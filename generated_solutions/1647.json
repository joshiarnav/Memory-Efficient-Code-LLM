{
    "problem_idx": "1647",
    "description": "\nA string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**.\n\n\nGiven a string `s`, return *the **minimum** number of characters you need to delete to make* `s` ***good**.*\n\n\nThe **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab\"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aab\"\n**Output:** 0\n**Explanation:** s is already good.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aaabbbcc\"\n**Output:** 2\n**Explanation:** You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"ceabaacb\"\n**Output:** 2\n**Explanation:** You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s`\u00a0contains only lowercase English letters.\n\n\n",
    "inefficient_solution": "class Solution:\n    def minDeletions(self, s: str) -> int:\n        char_freq = {}\n        for char in s:\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n\n        max_freq = max(char_freq.values())\n\n        freq_list = []\n        for char in char_freq:\n            freq_list.append(char_freq[char])\n\n        freq_list.sort(reverse=True)\n\n        ans = 0\n        pre = float('inf')\n        for freq in freq_list:\n            if pre == 0:\n                ans += freq\n            elif freq >= pre:\n                ans += freq - pre + 1\n                pre -= 1\n            else:\n                pre = freq\n\n        return ans",
    "efficient_solution": "class Solution:\n    def minDeletions(self, s: str) -> int:\n        cnt = Counter(s)\n        ans, pre = 0, inf\n        for v in sorted(cnt.values(), reverse=True):\n            if pre == 0:\n                ans += v\n            elif v >= pre:\n                ans += v - pre + 1\n                pre -= 1\n            else:\n                pre = v\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nA string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**.\n\n\nGiven a string `s`, return *the **minimum** number of characters you need to delete to make* `s` ***good**.*\n\n\nThe **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab\"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aab\"\n**Output:** 0\n**Explanation:** s is already good.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aaabbbcc\"\n**Output:** 2\n**Explanation:** You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"ceabaacb\"\n**Output:** 2\n**Explanation:** You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s`\u00a0contains only lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n        char_freq = {}\n        for char in s:\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n\n        max_freq = max(char_freq.values())\n\n        freq_list = []\n        for char in char_freq:\n            freq_list.append(char_freq[char])\n\n        freq_list.sort(reverse=True)\n\n        ans = 0\n        pre = float('inf')\n        for freq in freq_list:\n            if pre == 0:\n                ans += freq\n            elif freq >= pre:\n                ans += freq - pre + 1\n                pre -= 1\n            else:\n                pre = freq\n\n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n        cnt = Counter(s)\n        ans, pre = 0, inf\n        for v in sorted(cnt.values(), reverse=True):\n            if pre == 0:\n                ans += v\n            elif v >= pre:\n                ans += v - pre + 1\n                pre -= 1\n            else:\n                pre = v\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nA string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**.\n\n\nGiven a string `s`, return *the **minimum** number of characters you need to delete to make* `s` ***good**.*\n\n\nThe **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab\"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aab\"\n**Output:** 0\n**Explanation:** s is already good.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aaabbbcc\"\n**Output:** 2\n**Explanation:** You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"ceabaacb\"\n**Output:** 2\n**Explanation:** You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s`\u00a0contains only lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n        char_freq = {}\n        for char in s:\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n\n        max_freq = max(char_freq.values())\n\n        freq_list = []\n        for char in char_freq:\n            freq_list.append(char_freq[char])\n\n        freq_list.sort(reverse=True)\n\n        ans = 0\n        pre = float('inf')\n        for freq in freq_list:\n            if pre == 0:\n                ans += freq\n            elif freq >= pre:\n                ans += freq - pre + 1\n                pre -= 1\n            else:\n                pre = freq\n\n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n        cnt = Counter(s)\n        ans = 0\n        d = defaultdict(int)\n        for c, x in cnt.items():\n            if d[x]:\n                ans += x - d[x] + 1\n                d[x] += 1\n            else:\n                d[x] = 1\n        return ans\n",
    "model_solution": "class Solution:\n    def minDeletions(self, s: str) -> int:\n        cnt = Counter(s)\n        ans = 0\n        d = defaultdict(int)\n        for c, x in cnt.items():\n            if d[x]:\n                ans += x - d[x] + 1\n                d[x] += 1\n            else:\n                d[x] = 1\n        return ans"
}