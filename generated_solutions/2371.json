{
    "problem_idx": "2371",
    "description": "\nYou are given an `m x n` integer matrix `grid` containing **distinct** positive integers.\n\n\nYou have to replace each integer in the matrix with a positive integer satisfying the following conditions:\n\n\n* The **relative** order of every two elements that are in the same row or column should stay the **same** after the replacements.\n* The **maximum** number in the matrix after the replacements should be as **small** as possible.\n\n\nThe relative order stays the same if for all pairs of elements in the original matrix such that `grid[r1][c1] > grid[r2][c2]` where either `r1 == r2` or `c1 == c2`, then it must be true that `grid[r1][c1] > grid[r2][c2]` after the replacements.\n\n\nFor example, if `grid = [[2, 4, 5], [7, 3, 9]]` then a good replacement could be either `grid = [[1, 2, 3], [2, 1, 4]]` or `grid = [[1, 2, 3], [3, 1, 4]]`.\n\n\nReturn *the **resulting** matrix.* If there are multiple answers, return **any** of them.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2371.Minimize%20Maximum%20Value%20in%20a%20Grid/images/grid2drawio.png)\n\n```\n\n**Input:** grid = [[3,1],[2,5]]\n**Output:** [[2,1],[1,2]]\n**Explanation:** The above diagram shows a valid replacement.\nThe maximum number in the matrix is 2. It can be shown that no smaller value can be obtained.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[10]]\n**Output:** [[1]]\n**Explanation:** We replace the only number in the matrix with 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 1000`\n* `1 <= m * n <= 105`\n* `1 <= grid[i][j] <= 109`\n* `grid` consists of distinct integers.\n\n\n",
    "inefficient_solution": "class Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)]\n        nums.sort()\n        \n        # Create a 2D array to store the maximum value in each row and column\n        row_max = [0] * m\n        col_max = [0] * n\n        for i in range(m):\n            row_max[i] = [0] * n\n        for j in range(n):\n            col_max[j] = [0] * m\n        \n        # Create a 2D array to store the result\n        ans = [[0] * n for _ in range(m)]\n        for _ in range(m * n):\n            for _, i, j in nums:\n                ans[i][j] = max(row_max[i][j], col_max[j][i]) + 1\n                row_max[i][j] = col_max[j][i] = ans[i][j]\n        \n        return ans",
    "efficient_solution": "class Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)]\n        nums.sort()\n        row_max = [0] * m\n        col_max = [0] * n\n        ans = [[0] * n for _ in range(m)]\n        for _, i, j in nums:\n            ans[i][j] = max(row_max[i], col_max[j]) + 1\n            row_max[i] = col_max[j] = ans[i][j]\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an `m x n` integer matrix `grid` containing **distinct** positive integers.\n\n\nYou have to replace each integer in the matrix with a positive integer satisfying the following conditions:\n\n\n* The **relative** order of every two elements that are in the same row or column should stay the **same** after the replacements.\n* The **maximum** number in the matrix after the replacements should be as **small** as possible.\n\n\nThe relative order stays the same if for all pairs of elements in the original matrix such that `grid[r1][c1] > grid[r2][c2]` where either `r1 == r2` or `c1 == c2`, then it must be true that `grid[r1][c1] > grid[r2][c2]` after the replacements.\n\n\nFor example, if `grid = [[2, 4, 5], [7, 3, 9]]` then a good replacement could be either `grid = [[1, 2, 3], [2, 1, 4]]` or `grid = [[1, 2, 3], [3, 1, 4]]`.\n\n\nReturn *the **resulting** matrix.* If there are multiple answers, return **any** of them.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2371.Minimize%20Maximum%20Value%20in%20a%20Grid/images/grid2drawio.png)\n\n```\n\n**Input:** grid = [[3,1],[2,5]]\n**Output:** [[2,1],[1,2]]\n**Explanation:** The above diagram shows a valid replacement.\nThe maximum number in the matrix is 2. It can be shown that no smaller value can be obtained.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[10]]\n**Output:** [[1]]\n**Explanation:** We replace the only number in the matrix with 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 1000`\n* `1 <= m * n <= 105`\n* `1 <= grid[i][j] <= 109`\n* `grid` consists of distinct integers.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)]\n        nums.sort()\n        \n        # Create a 2D array to store the maximum value in each row and column\n        row_max = [0] * m\n        col_max = [0] * n\n        for i in range(m):\n            row_max[i] = [0] * n\n        for j in range(n):\n            col_max[j] = [0] * m\n        \n        # Create a 2D array to store the result\n        ans = [[0] * n for _ in range(m)]\n        for _ in range(m * n):\n            for _, i, j in nums:\n                ans[i][j] = max(row_max[i][j], col_max[j][i]) + 1\n                row_max[i][j] = col_max[j][i] = ans[i][j]\n        \n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)]\n        nums.sort()\n        row_max = [0] * m\n        col_max = [0] * n\n        ans = [[0] * n for _ in range(m)]\n        for _, i, j in nums:\n            ans[i][j] = max(row_max[i], col_max[j]) + 1\n            row_max[i] = col_max[j] = ans[i][j]\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an `m x n` integer matrix `grid` containing **distinct** positive integers.\n\n\nYou have to replace each integer in the matrix with a positive integer satisfying the following conditions:\n\n\n* The **relative** order of every two elements that are in the same row or column should stay the **same** after the replacements.\n* The **maximum** number in the matrix after the replacements should be as **small** as possible.\n\n\nThe relative order stays the same if for all pairs of elements in the original matrix such that `grid[r1][c1] > grid[r2][c2]` where either `r1 == r2` or `c1 == c2`, then it must be true that `grid[r1][c1] > grid[r2][c2]` after the replacements.\n\n\nFor example, if `grid = [[2, 4, 5], [7, 3, 9]]` then a good replacement could be either `grid = [[1, 2, 3], [2, 1, 4]]` or `grid = [[1, 2, 3], [3, 1, 4]]`.\n\n\nReturn *the **resulting** matrix.* If there are multiple answers, return **any** of them.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2371.Minimize%20Maximum%20Value%20in%20a%20Grid/images/grid2drawio.png)\n\n```\n\n**Input:** grid = [[3,1],[2,5]]\n**Output:** [[2,1],[1,2]]\n**Explanation:** The above diagram shows a valid replacement.\nThe maximum number in the matrix is 2. It can be shown that no smaller value can be obtained.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[10]]\n**Output:** [[1]]\n**Explanation:** We replace the only number in the matrix with 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 1000`\n* `1 <= m * n <= 105`\n* `1 <= grid[i][j] <= 109`\n* `grid` consists of distinct integers.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        nums = [(v, i, j) for i, row in enumerate(grid) for j, v in enumerate(row)]\n        nums.sort()\n        \n        # Create a 2D array to store the maximum value in each row and column\n        row_max = [0] * m\n        col_max = [0] * n\n        for i in range(m):\n            row_max[i] = [0] * n\n        for j in range(n):\n            col_max[j] = [0] * m\n        \n        # Create a 2D array to store the result\n        ans = [[0] * n for _ in range(m)]\n        for _ in range(m * n):\n            for _, i, j in nums:\n                ans[i][j] = max(row_max[i][j], col_max[j][i]) + 1\n                row_max[i][j] = col_max[j][i] = ans[i][j]\n        \n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        mi, mj = 0, 0\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                if v < grid[mi][mj]:\n                    mi, mj = i, j\n        return [[min(v, grid[mi][mj]) for v in row] for row in grid]\n",
    "model_solution": "class Solution:\n    def minScore(self, grid: List[List[int]]) -> List[List[int]]:\n        m, n = len(grid), len(grid[0])\n        mi, mj = 0, 0\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                if v < grid[mi][mj]:\n                    mi, mj = i, j\n        return [[min(v, grid[mi][mj]) for v in row] for row in grid]"
}