{
    "problem_idx": "179",
    "description": "\nGiven a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.\n\n\nSince the result may be very large, so you need to return a string instead of an integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,2]\n**Output:** \"210\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,30,34,5,9]\n**Output:** \"9534330\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 109`\n\n\n",
    "inefficient_solution": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = [str(v) for v in nums]\n        large_nums = [[str(v)] for v in nums]\n        large_nums += [[str(v) + str(u)] for v in nums for u in nums if v != u]\n\n        large_nums.sort(key=lambda x: 1 if x[0] + x[1] < x[1] + x[0] else -1)\n        result = []\n        for num in large_nums:\n            if num[0] != '0':\n                result.append(num[0] + num[1] if len(num) > 1 else num[0])\n        return \"\".join(result)",
    "efficient_solution": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = [str(v) for v in nums]\n        nums.sort(key=cmp_to_key(lambda a, b: 1 if a + b < b + a else -1))\n        return \"0\" if nums[0] == \"0\" else \"\".join(nums)\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.\n\n\nSince the result may be very large, so you need to return a string instead of an integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,2]\n**Output:** \"210\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,30,34,5,9]\n**Output:** \"9534330\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 109`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = [str(v) for v in nums]\n        large_nums = [[str(v)] for v in nums]\n        large_nums += [[str(v) + str(u)] for v in nums for u in nums if v != u]\n\n        large_nums.sort(key=lambda x: 1 if x[0] + x[1] < x[1] + x[0] else -1)\n        result = []\n        for num in large_nums:\n            if num[0] != '0':\n                result.append(num[0] + num[1] if len(num) > 1 else num[0])\n        return \"\".join(result)\n\n### Efficient Solution:\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = [str(v) for v in nums]\n        nums.sort(key=cmp_to_key(lambda a, b: 1 if a + b < b + a else -1))\n        return \"0\" if nums[0] == \"0\" else \"\".join(nums)\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a list of non-negative integers `nums`, arrange them such that they form the largest number and return it.\n\n\nSince the result may be very large, so you need to return a string instead of an integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,2]\n**Output:** \"210\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,30,34,5,9]\n**Output:** \"9534330\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 109`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = [str(v) for v in nums]\n        large_nums = [[str(v)] for v in nums]\n        large_nums += [[str(v) + str(u)] for v in nums for u in nums if v!= u]\n\n        large_nums.sort(key=lambda x: 1 if x[0] + x[1] < x[1] + x[0] else -1)\n        result = []\n        for num in large_nums:\n            if num[0]!= '0':\n                result.append(num[0] + num[1] if len(num) > 1 else num[0])\n        return \"\".join(result)\n\n### Efficient Solution:\nclass Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = list(map(str, nums))\n        nums.sort(key=lambda x: 1 if x[0] == '0' else -int(x))\n        return \"0\" if nums[0] == \"0\" else \"\".join(nums)\n",
    "model_solution": "class Solution:\n    def largestNumber(self, nums: List[int]) -> str:\n        nums = list(map(str, nums))\n        nums.sort(key=lambda x: 1 if x[0] == '0' else -int(x))\n        return \"0\" if nums[0] == \"0\" else \"\".join(nums)"
}