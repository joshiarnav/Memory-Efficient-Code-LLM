{
    "problem_idx": "2418",
    "description": "\nYou are given an array of strings `names`, and an array `heights` that consists of **distinct** positive integers. Both arrays are of length `n`.\n\n\nFor each index `i`, `names[i]` and `heights[i]` denote the name and height of the `ith` person.\n\n\nReturn `names` *sorted in **descending** order by the people's heights*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\n**Output:** [\"Mary\",\"Emma\",\"John\"]\n**Explanation:** Mary is the tallest, followed by Emma and John.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\n**Output:** [\"Bob\",\"Alice\",\"Bob\"]\n**Explanation:** The first Bob is the tallest, followed by Alice and the second Bob.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == names.length == heights.length`\n* `1 <= n <= 103`\n* `1 <= names[i].length <= 20`\n* `1 <= heights[i] <= 105`\n* `names[i]` consists of lower and upper case English letters.\n* All the values of `heights` are distinct.\n\n\n",
    "inefficient_solution": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        heights_dict = {height: name for name, height in zip(names, heights)}\n        sorted_heights = sorted(heights, reverse=True)\n        sorted_names = []\n        for height in sorted_heights:\n            sorted_names.append(heights_dict[height])\n        return sorted_names",
    "efficient_solution": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        idx = list(range(len(heights)))\n        idx.sort(key=lambda i: -heights[i])\n        return [names[i] for i in idx]\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an array of strings `names`, and an array `heights` that consists of **distinct** positive integers. Both arrays are of length `n`.\n\n\nFor each index `i`, `names[i]` and `heights[i]` denote the name and height of the `ith` person.\n\n\nReturn `names` *sorted in **descending** order by the people's heights*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\n**Output:** [\"Mary\",\"Emma\",\"John\"]\n**Explanation:** Mary is the tallest, followed by Emma and John.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\n**Output:** [\"Bob\",\"Alice\",\"Bob\"]\n**Explanation:** The first Bob is the tallest, followed by Alice and the second Bob.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == names.length == heights.length`\n* `1 <= n <= 103`\n* `1 <= names[i].length <= 20`\n* `1 <= heights[i] <= 105`\n* `names[i]` consists of lower and upper case English letters.\n* All the values of `heights` are distinct.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        heights_dict = {height: name for name, height in zip(names, heights)}\n        sorted_heights = sorted(heights, reverse=True)\n        sorted_names = []\n        for height in sorted_heights:\n            sorted_names.append(heights_dict[height])\n        return sorted_names\n\n### Efficient Solution:\nclass Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        idx = list(range(len(heights)))\n        idx.sort(key=lambda i: -heights[i])\n        return [names[i] for i in idx]\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an array of strings `names`, and an array `heights` that consists of **distinct** positive integers. Both arrays are of length `n`.\n\n\nFor each index `i`, `names[i]` and `heights[i]` denote the name and height of the `ith` person.\n\n\nReturn `names` *sorted in **descending** order by the people's heights*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\n**Output:** [\"Mary\",\"Emma\",\"John\"]\n**Explanation:** Mary is the tallest, followed by Emma and John.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\n**Output:** [\"Bob\",\"Alice\",\"Bob\"]\n**Explanation:** The first Bob is the tallest, followed by Alice and the second Bob.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == names.length == heights.length`\n* `1 <= n <= 103`\n* `1 <= names[i].length <= 20`\n* `1 <= heights[i] <= 105`\n* `names[i]` consists of lower and upper case English letters.\n* All the values of `heights` are distinct.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        heights_dict = {height: name for name, height in zip(names, heights)}\n        sorted_heights = sorted(heights, reverse=True)\n        sorted_names = []\n        for height in sorted_heights:\n            sorted_names.append(heights_dict[height])\n        return sorted_names\n\n### Efficient Solution:\nclass Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        ans = []\n        for i in range(len(names) - 1, -1, -1):\n            ans.append((heights[i], names[i]))\n        ans.sort(key=lambda x: x[0])\n        return [v for _, v in ans]\n",
    "model_solution": "class Solution:\n    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:\n        ans = []\n        for i in range(len(names) - 1, -1, -1):\n            ans.append((heights[i], names[i]))\n        ans.sort(key=lambda x: x[0])\n        return [v for _, v in ans]"
}