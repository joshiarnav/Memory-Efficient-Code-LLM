{
    "problem_idx": "1885",
    "description": "\nGiven two integer arrays `nums1` and `nums2` of length `n`, count the pairs of indices `(i, j)` such that `i < j` and `nums1[i] + nums1[j] > nums2[i] + nums2[j]`.\n\n\nReturn *the **number of pairs** satisfying the condition.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,2,1], nums2 = [1,2,1,2]\n**Output:** 1\n**Explanation**: The pairs satisfying the condition are:\n- (0, 2) where 2 + 2 > 1 + 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,10,6,2], nums2 = [1,4,1,5]\n**Output:** 5\n**Explanation**: The pairs satisfying the condition are:\n- (0, 1) where 1 + 10 > 1 + 4.\n- (0, 2) where 1 + 6 > 1 + 1.\n- (1, 2) where 10 + 6 > 4 + 1.\n- (1, 3) where 10 + 2 > 4 + 5.\n- (2, 3) where 6 + 2 > 1 + 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= 105`\n\n\n",
    "inefficient_solution": "class Solution:\n    def countPairs(self, nums1, nums2):\n        n = len(nums1)\n        temp = [nums1[i] - nums2[i] for i in range(n)]\n        temp.sort()\n        temp2 = [(nums1[i] - nums2[i], i) for i in range(n)]\n        temp2.sort()\n        count = 0\n        for i, v in enumerate(temp):\n            for j in range(i + 1, n):\n                if v + temp[j] > 0:\n                    count += 1\n        return count",
    "efficient_solution": "class Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        d = [nums1[i] - nums2[i] for i in range(n)]\n        d.sort()\n        return sum(n - bisect_right(d, -v, lo=i + 1) for i, v in enumerate(d))\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven two integer arrays `nums1` and `nums2` of length `n`, count the pairs of indices `(i, j)` such that `i < j` and `nums1[i] + nums1[j] > nums2[i] + nums2[j]`.\n\n\nReturn *the **number of pairs** satisfying the condition.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,2,1], nums2 = [1,2,1,2]\n**Output:** 1\n**Explanation**: The pairs satisfying the condition are:\n- (0, 2) where 2 + 2 > 1 + 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,10,6,2], nums2 = [1,4,1,5]\n**Output:** 5\n**Explanation**: The pairs satisfying the condition are:\n- (0, 1) where 1 + 10 > 1 + 4.\n- (0, 2) where 1 + 6 > 1 + 1.\n- (1, 2) where 10 + 6 > 4 + 1.\n- (1, 3) where 10 + 2 > 4 + 5.\n- (2, 3) where 6 + 2 > 1 + 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= 105`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def countPairs(self, nums1, nums2):\n        n = len(nums1)\n        temp = [nums1[i] - nums2[i] for i in range(n)]\n        temp.sort()\n        temp2 = [(nums1[i] - nums2[i], i) for i in range(n)]\n        temp2.sort()\n        count = 0\n        for i, v in enumerate(temp):\n            for j in range(i + 1, n):\n                if v + temp[j] > 0:\n                    count += 1\n        return count\n\n### Efficient Solution:\nclass Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        d = [nums1[i] - nums2[i] for i in range(n)]\n        d.sort()\n        return sum(n - bisect_right(d, -v, lo=i + 1) for i, v in enumerate(d))\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven two integer arrays `nums1` and `nums2` of length `n`, count the pairs of indices `(i, j)` such that `i < j` and `nums1[i] + nums1[j] > nums2[i] + nums2[j]`.\n\n\nReturn *the **number of pairs** satisfying the condition.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,2,1], nums2 = [1,2,1,2]\n**Output:** 1\n**Explanation**: The pairs satisfying the condition are:\n- (0, 2) where 2 + 2 > 1 + 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,10,6,2], nums2 = [1,4,1,5]\n**Output:** 5\n**Explanation**: The pairs satisfying the condition are:\n- (0, 1) where 1 + 10 > 1 + 4.\n- (0, 2) where 1 + 6 > 1 + 1.\n- (1, 2) where 10 + 6 > 4 + 1.\n- (1, 3) where 10 + 2 > 4 + 5.\n- (2, 3) where 6 + 2 > 1 + 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= 105`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def countPairs(self, nums1, nums2):\n        n = len(nums1)\n        temp = [nums1[i] - nums2[i] for i in range(n)]\n        temp.sort()\n        temp2 = [(nums1[i] - nums2[i], i) for i in range(n)]\n        temp2.sort()\n        count = 0\n        for i, v in enumerate(temp):\n            for j in range(i + 1, n):\n                if v + temp[j] > 0:\n                    count += 1\n        return count\n\n### Efficient Solution:\nclass Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:\n        nums = sorted(x - y for x, y in zip(nums1, nums2))\n        n = len(nums)\n        ans = 0\n        for i, v in enumerate(nums):\n            for j in range(i + 1, n):\n                if v + nums[j] > 0:\n                    ans += 1\n        return ans\n",
    "model_solution": "class Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:\n        nums = sorted(x - y for x, y in zip(nums1, nums2))\n        n = len(nums)\n        ans = 0\n        for i, v in enumerate(nums):\n            for j in range(i + 1, n):\n                if v + nums[j] > 0:\n                    ans += 1\n        return ans"
}