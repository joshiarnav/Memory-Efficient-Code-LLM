{
    "problem_idx": "424",
    "description": "\nYou are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\n\nReturn *the length of the longest substring containing the same letter you can get after performing the above operations*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ABAB\", k = 2\n**Output:** 4\n**Explanation:** Replace the two 'A's with two 'B's or vice versa.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"AABABBA\", k = 1\n**Output:** 4\n**Explanation:** Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of only uppercase English letters.\n* `0 <= k <= s.length`\n\n\n",
    "inefficient_solution": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        max_length = 0\n        for i in range(len(s)):\n            char_count = {}\n            for j in range(i, len(s)):\n                char_count[s[j]] = char_count.get(s[j], 0) + 1\n                max_count = max(char_count.values())\n                if j - i + 1 - max_count > k:\n                    char_count[s[i]] -= 1\n                    i += 1\n                    break\n            max_length = max(max_length, j - i + 1)\n        return max_length",
    "efficient_solution": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        counter = [0] * 26\n        i = j = maxCnt = 0\n        while i < len(s):\n            counter[ord(s[i]) - ord('A')] += 1\n            maxCnt = max(maxCnt, counter[ord(s[i]) - ord('A')])\n            if i - j + 1 > maxCnt + k:\n                counter[ord(s[j]) - ord('A')] -= 1\n                j += 1\n            i += 1\n        return i - j\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\n\nReturn *the length of the longest substring containing the same letter you can get after performing the above operations*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ABAB\", k = 2\n**Output:** 4\n**Explanation:** Replace the two 'A's with two 'B's or vice versa.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"AABABBA\", k = 1\n**Output:** 4\n**Explanation:** Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of only uppercase English letters.\n* `0 <= k <= s.length`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        max_length = 0\n        for i in range(len(s)):\n            char_count = {}\n            for j in range(i, len(s)):\n                char_count[s[j]] = char_count.get(s[j], 0) + 1\n                max_count = max(char_count.values())\n                if j - i + 1 - max_count > k:\n                    char_count[s[i]] -= 1\n                    i += 1\n                    break\n            max_length = max(max_length, j - i + 1)\n        return max_length\n\n### Efficient Solution:\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        counter = [0] * 26\n        i = j = maxCnt = 0\n        while i < len(s):\n            counter[ord(s[i]) - ord('A')] += 1\n            maxCnt = max(maxCnt, counter[ord(s[i]) - ord('A')])\n            if i - j + 1 > maxCnt + k:\n                counter[ord(s[j]) - ord('A')] -= 1\n                j += 1\n            i += 1\n        return i - j\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\n\nReturn *the length of the longest substring containing the same letter you can get after performing the above operations*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ABAB\", k = 2\n**Output:** 4\n**Explanation:** Replace the two 'A's with two 'B's or vice versa.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"AABABBA\", k = 1\n**Output:** 4\n**Explanation:** Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of only uppercase English letters.\n* `0 <= k <= s.length`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        max_length = 0\n        for i in range(len(s)):\n            char_count = {}\n            for j in range(i, len(s)):\n                char_count[s[j]] = char_count.get(s[j], 0) + 1\n                max_count = max(char_count.values())\n                if j - i + 1 - max_count > k:\n                    char_count[s[i]] -= 1\n                    i += 1\n                    break\n            max_length = max(max_length, j - i + 1)\n        return max_length\n\n### Efficient Solution:\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        cnt = Counter()\n        ans = mx = 0\n        for c in s:\n            cnt[c] += 1\n            mx = max(mx, cnt[c])\n            if (n - mx > k) and (n - mx - 1 > k - cnt[c]):\n                cnt[c] -= 1\n                n -= 1\n        return n\n",
    "model_solution": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        cnt = Counter()\n        ans = mx = 0\n        for c in s:\n            cnt[c] += 1\n            mx = max(mx, cnt[c])\n            if (n - mx > k) and (n - mx - 1 > k - cnt[c]):\n                cnt[c] -= 1\n                n -= 1\n        return n"
}