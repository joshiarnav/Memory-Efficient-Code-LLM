{
    "problem_idx": "110",
    "description": "\nGiven a binary tree, determine if it is **height-balanced**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0110.Balanced%20Binary%20Tree/images/balance_1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0110.Balanced%20Binary%20Tree/images/balance_2.jpg)\n\n```\n\n**Input:** root = [1,2,2,3,3,null,null,4,4]\n**Output:** false\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 5000]`.\n* `-104 <= Node.val <= 104`\n\n\n",
    "inefficient_solution": "",
    "efficient_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        def height(root):\n            if root is None:\n                return 0\n            l, r = height(root.left), height(root.right)\n            if l == -1 or r == -1 or abs(l - r) > 1:\n                return -1\n            return 1 + max(l, r)\n\n        return height(root) >= 0\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a binary tree, determine if it is **height-balanced**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0110.Balanced%20Binary%20Tree/images/balance_1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0110.Balanced%20Binary%20Tree/images/balance_2.jpg)\n\n```\n\n**Input:** root = [1,2,2,3,3,null,null,4,4]\n**Output:** false\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 5000]`.\n* `-104 <= Node.val <= 104`\n\n\n\n\n### Inefficient Solution:\n\n\n### Efficient Solution:\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: Optional[TreeNode]) -> bool:\n        def height(root):\n            if root is None:\n                return 0\n            l, r = height(root.left), height(root.right)\n            if l == -1 or r == -1 or abs(l - r) > 1:\n                return -1\n            return 1 + max(l, r)\n\n        return height(root) >= 0\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a binary tree, determine if it is **height-balanced**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0110.Balanced%20Binary%20Tree/images/balance_1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0110.Balanced%20Binary%20Tree/images/balance_2.jpg)\n\n```\n\n**Input:** root = [1,2,2,3,3,null,null,4,4]\n**Output:** false\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 5000]`.\n* `-104 <= Node.val <= 104`\n\n\n\n\n### Inefficient Solution:\n\n\n### Efficient Solution:\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        def check(root):\n            if root is None:\n                return 0\n            left, right = check(root.left), check(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return 1 + max(left, right)\n\n        return check(root)!= -1\n",
    "model_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        def check(root):\n            if root is None:\n                return 0\n            left, right = check(root.left), check(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return 1 + max(left, right)\n\n        return check(root)!= -1"
}