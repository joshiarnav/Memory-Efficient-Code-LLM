{
    "problem_idx": "2090",
    "description": "\nYou are given a **0-indexed** array `nums` of `n` integers, and an integer `k`.\n\n\nThe **k-radius average** for a subarray of `nums` **centered** at some index `i` with the **radius** `k` is the average of **all** elements in `nums` between the indices `i - k` and `i + k` (**inclusive**). If there are less than `k` elements before **or** after the index `i`, then the **k-radius average** is `-1`.\n\n\nBuild and return *an array* `avgs` *of length* `n` *where* `avgs[i]` *is the **k-radius average** for the subarray centered at index* `i`.\n\n\nThe **average** of `x` elements is the sum of the `x` elements divided by `x`, using **integer division**. The integer division truncates toward zero, which means losing its fractional part.\n\n\n* For example, the average of four elements `2`, `3`, `1`, and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75`, which truncates to `2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2090.K%20Radius%20Subarray%20Averages/images/eg1.png)\n\n```\n\n**Input:** nums = [7,4,3,9,1,8,5,2,6], k = 3\n**Output:** [-1,-1,-1,5,4,4,-1,-1,-1]\n**Explanation:**\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements **before** each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n  Using **integer division**, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements **after** each index.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [100000], k = 0\n**Output:** [100000]\n**Explanation:**\n- The sum of the subarray centered at index 0 with radius 0 is: 100000.\n  avg[0] = 100000 / 1 = 100000.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [8], k = 100000\n**Output:** [-1]\n**Explanation:** \n- avg[0] is -1 because there are less than k elements before and after index 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `0 <= nums[i], k <= 105`\n\n\n",
    "inefficient_solution": "class Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        total = [0] * n\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n            total[i] = prefix_sum[i + 1] - prefix_sum[i - k]\n        \n        ans = [0] * n\n        for i in range(k, n - k):\n            if total[i] == 0:\n                ans[i] = -1\n            else:\n                ans[i] = total[i] // (2 * k + 1)\n        \n        return ans",
    "efficient_solution": "class Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        s = 0\n        ans = [-1] * len(nums)\n        for i, v in enumerate(nums):\n            s += v\n            if i >= k * 2:\n                ans[i - k] = s // (k * 2 + 1)\n                s -= nums[i - k * 2]\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a **0-indexed** array `nums` of `n` integers, and an integer `k`.\n\n\nThe **k-radius average** for a subarray of `nums` **centered** at some index `i` with the **radius** `k` is the average of **all** elements in `nums` between the indices `i - k` and `i + k` (**inclusive**). If there are less than `k` elements before **or** after the index `i`, then the **k-radius average** is `-1`.\n\n\nBuild and return *an array* `avgs` *of length* `n` *where* `avgs[i]` *is the **k-radius average** for the subarray centered at index* `i`.\n\n\nThe **average** of `x` elements is the sum of the `x` elements divided by `x`, using **integer division**. The integer division truncates toward zero, which means losing its fractional part.\n\n\n* For example, the average of four elements `2`, `3`, `1`, and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75`, which truncates to `2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2090.K%20Radius%20Subarray%20Averages/images/eg1.png)\n\n```\n\n**Input:** nums = [7,4,3,9,1,8,5,2,6], k = 3\n**Output:** [-1,-1,-1,5,4,4,-1,-1,-1]\n**Explanation:**\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements **before** each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n  Using **integer division**, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements **after** each index.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [100000], k = 0\n**Output:** [100000]\n**Explanation:**\n- The sum of the subarray centered at index 0 with radius 0 is: 100000.\n  avg[0] = 100000 / 1 = 100000.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [8], k = 100000\n**Output:** [-1]\n**Explanation:** \n- avg[0] is -1 because there are less than k elements before and after index 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `0 <= nums[i], k <= 105`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        total = [0] * n\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n            total[i] = prefix_sum[i + 1] - prefix_sum[i - k]\n        \n        ans = [0] * n\n        for i in range(k, n - k):\n            if total[i] == 0:\n                ans[i] = -1\n            else:\n                ans[i] = total[i] // (2 * k + 1)\n        \n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        s = 0\n        ans = [-1] * len(nums)\n        for i, v in enumerate(nums):\n            s += v\n            if i >= k * 2:\n                ans[i - k] = s // (k * 2 + 1)\n                s -= nums[i - k * 2]\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a **0-indexed** array `nums` of `n` integers, and an integer `k`.\n\n\nThe **k-radius average** for a subarray of `nums` **centered** at some index `i` with the **radius** `k` is the average of **all** elements in `nums` between the indices `i - k` and `i + k` (**inclusive**). If there are less than `k` elements before **or** after the index `i`, then the **k-radius average** is `-1`.\n\n\nBuild and return *an array* `avgs` *of length* `n` *where* `avgs[i]` *is the **k-radius average** for the subarray centered at index* `i`.\n\n\nThe **average** of `x` elements is the sum of the `x` elements divided by `x`, using **integer division**. The integer division truncates toward zero, which means losing its fractional part.\n\n\n* For example, the average of four elements `2`, `3`, `1`, and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75`, which truncates to `2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2090.K%20Radius%20Subarray%20Averages/images/eg1.png)\n\n```\n\n**Input:** nums = [7,4,3,9,1,8,5,2,6], k = 3\n**Output:** [-1,-1,-1,5,4,4,-1,-1,-1]\n**Explanation:**\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements **before** each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n  Using **integer division**, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements **after** each index.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [100000], k = 0\n**Output:** [100000]\n**Explanation:**\n- The sum of the subarray centered at index 0 with radius 0 is: 100000.\n  avg[0] = 100000 / 1 = 100000.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [8], k = 100000\n**Output:** [-1]\n**Explanation:** \n- avg[0] is -1 because there are less than k elements before and after index 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `0 <= nums[i], k <= 105`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        total = [0] * n\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n            total[i] = prefix_sum[i + 1] - prefix_sum[i - k]\n        \n        ans = [0] * n\n        for i in range(k, n - k):\n            if total[i] == 0:\n                ans[i] = -1\n            else:\n                ans[i] = total[i] // (2 * k + 1)\n        \n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        s = sum(nums[: 2 * k])\n        ans = [-1] * n\n        if n > 2 * k:\n            ans[k - 1] = s // (2 * k)\n        for i in range(k - 1, n - k):\n            s += nums[i + k] - nums[i - k]\n            if n > 2 * k:\n                ans[i] = s // (2 * k)\n        return ans\n",
    "model_solution": "class Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        s = sum(nums[: 2 * k])\n        ans = [-1] * n\n        if n > 2 * k:\n            ans[k - 1] = s // (2 * k)\n        for i in range(k - 1, n - k):\n            s += nums[i + k] - nums[i - k]\n            if n > 2 * k:\n                ans[i] = s // (2 * k)\n        return ans"
}