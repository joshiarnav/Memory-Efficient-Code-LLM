{
    "problem_idx": "991",
    "description": "\nThere is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can:\n\n\n* multiply the number on display by `2`, or\n* subtract `1` from the number on display.\n\n\nGiven two integers `startValue` and `target`, return *the minimum number of operations needed to display* `target` *on the calculator*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** startValue = 2, target = 3\n**Output:** 2\n**Explanation:** Use double operation and then decrement operation {2 -> 4 -> 3}.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** startValue = 5, target = 8\n**Output:** 2\n**Explanation:** Use decrement and then double {5 -> 4 -> 8}.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** startValue = 3, target = 10\n**Output:** 3\n**Explanation:** Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= startValue, target <= 109`\n\n\n",
    "inefficient_solution": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = []\n        while startValue < target:\n            if target & 1:\n                ans.append(target + 1)\n                target += 1\n            else:\n                ans.append(target >> 1)\n                target >>= 1\n        for _ in range(startValue - target):\n            ans.append(1)\n        return len(ans)",
    "efficient_solution": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = 0\n        while startValue < target:\n            if target & 1:\n                target += 1\n            else:\n                target >>= 1\n            ans += 1\n        ans += startValue - target\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nThere is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can:\n\n\n* multiply the number on display by `2`, or\n* subtract `1` from the number on display.\n\n\nGiven two integers `startValue` and `target`, return *the minimum number of operations needed to display* `target` *on the calculator*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** startValue = 2, target = 3\n**Output:** 2\n**Explanation:** Use double operation and then decrement operation {2 -> 4 -> 3}.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** startValue = 5, target = 8\n**Output:** 2\n**Explanation:** Use decrement and then double {5 -> 4 -> 8}.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** startValue = 3, target = 10\n**Output:** 3\n**Explanation:** Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= startValue, target <= 109`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = []\n        while startValue < target:\n            if target & 1:\n                ans.append(target + 1)\n                target += 1\n            else:\n                ans.append(target >> 1)\n                target >>= 1\n        for _ in range(startValue - target):\n            ans.append(1)\n        return len(ans)\n\n### Efficient Solution:\nclass Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = 0\n        while startValue < target:\n            if target & 1:\n                target += 1\n            else:\n                target >>= 1\n            ans += 1\n        ans += startValue - target\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nThere is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can:\n\n\n* multiply the number on display by `2`, or\n* subtract `1` from the number on display.\n\n\nGiven two integers `startValue` and `target`, return *the minimum number of operations needed to display* `target` *on the calculator*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** startValue = 2, target = 3\n**Output:** 2\n**Explanation:** Use double operation and then decrement operation {2 -> 4 -> 3}.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** startValue = 5, target = 8\n**Output:** 2\n**Explanation:** Use decrement and then double {5 -> 4 -> 8}.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** startValue = 3, target = 10\n**Output:** 3\n**Explanation:** Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= startValue, target <= 109`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = []\n        while startValue < target:\n            if target & 1:\n                ans.append(target + 1)\n                target += 1\n            else:\n                ans.append(target >> 1)\n                target >>= 1\n        for _ in range(startValue - target):\n            ans.append(1)\n        return len(ans)\n\n### Efficient Solution:\nclass Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = 0\n        while startValue < target:\n            if target & 1:\n                target += 1\n            else:\n                target >>= 1\n            ans += 1\n        ans += startValue - target\n        return ans\n",
    "model_solution": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = 0\n        while startValue < target:\n            if target & 1:\n                target += 1\n            else:\n                target >>= 1\n            ans += 1\n        ans += startValue - target\n        return ans"
}