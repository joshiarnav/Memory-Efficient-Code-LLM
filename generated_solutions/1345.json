{
    "problem_idx": "1345",
    "description": "\nGiven an array of\u00a0integers `arr`, you are initially positioned at the first index of the array.\n\n\nIn one step you can jump from index `i` to index:\n\n\n* `i + 1` where:\u00a0`i + 1 < arr.length`.\n* `i - 1` where:\u00a0`i - 1 >= 0`.\n* `j` where: `arr[i] == arr[j]` and `i != j`.\n\n\nReturn *the minimum number of steps* to reach the **last index** of the array.\n\n\nNotice that you can not jump outside of the array at any time.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [100,-23,-23,404,100,23,23,23,3,404]\n**Output:** 3\n**Explanation:** You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [7]\n**Output:** 0\n**Explanation:** Start index is the last index. You do not need to jump.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [7,6,9,6,9,6,9,7]\n**Output:** 1\n**Explanation:** You can jump directly from index 0 to index 7 which is last index of the array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 5 * 104`\n* `-108 <= arr[i] <= 108`\n\n\n",
    "inefficient_solution": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        n = len(arr)\n        jumps = [n] * n\n        jumps[0] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n            for j in range(n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n        return jumps[-1]",
    "efficient_solution": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        idx = defaultdict(list)\n        for i, v in enumerate(arr):\n            idx[v].append(i)\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            i, step = q.popleft()\n            if i == len(arr) - 1:\n                return step\n            v = arr[i]\n            step += 1\n            for j in idx[v]:\n                if j not in vis:\n                    vis.add(j)\n                    q.append((j, step))\n            del idx[v]\n            if i + 1 < len(arr) and (i + 1) not in vis:\n                vis.add(i + 1)\n                q.append((i + 1, step))\n            if i - 1 >= 0 and (i - 1) not in vis:\n                vis.add(i - 1)\n                q.append((i - 1, step))\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven an array of\u00a0integers `arr`, you are initially positioned at the first index of the array.\n\n\nIn one step you can jump from index `i` to index:\n\n\n* `i + 1` where:\u00a0`i + 1 < arr.length`.\n* `i - 1` where:\u00a0`i - 1 >= 0`.\n* `j` where: `arr[i] == arr[j]` and `i != j`.\n\n\nReturn *the minimum number of steps* to reach the **last index** of the array.\n\n\nNotice that you can not jump outside of the array at any time.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [100,-23,-23,404,100,23,23,23,3,404]\n**Output:** 3\n**Explanation:** You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [7]\n**Output:** 0\n**Explanation:** Start index is the last index. You do not need to jump.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [7,6,9,6,9,6,9,7]\n**Output:** 1\n**Explanation:** You can jump directly from index 0 to index 7 which is last index of the array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 5 * 104`\n* `-108 <= arr[i] <= 108`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        n = len(arr)\n        jumps = [n] * n\n        jumps[0] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n            for j in range(n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n        return jumps[-1]\n\n### Efficient Solution:\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        idx = defaultdict(list)\n        for i, v in enumerate(arr):\n            idx[v].append(i)\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            i, step = q.popleft()\n            if i == len(arr) - 1:\n                return step\n            v = arr[i]\n            step += 1\n            for j in idx[v]:\n                if j not in vis:\n                    vis.add(j)\n                    q.append((j, step))\n            del idx[v]\n            if i + 1 < len(arr) and (i + 1) not in vis:\n                vis.add(i + 1)\n                q.append((i + 1, step))\n            if i - 1 >= 0 and (i - 1) not in vis:\n                vis.add(i - 1)\n                q.append((i - 1, step))\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven an array of\u00a0integers `arr`, you are initially positioned at the first index of the array.\n\n\nIn one step you can jump from index `i` to index:\n\n\n* `i + 1` where:\u00a0`i + 1 < arr.length`.\n* `i - 1` where:\u00a0`i - 1 >= 0`.\n* `j` where: `arr[i] == arr[j]` and `i!= j`.\n\n\nReturn *the minimum number of steps* to reach the **last index** of the array.\n\n\nNotice that you can not jump outside of the array at any time.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [100,-23,-23,404,100,23,23,23,3,404]\n**Output:** 3\n**Explanation:** You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [7]\n**Output:** 0\n**Explanation:** Start index is the last index. You do not need to jump.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [7,6,9,6,9,6,9,7]\n**Output:** 1\n**Explanation:** You can jump directly from index 0 to index 7 which is last index of the array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 5 * 104`\n* `-108 <= arr[i] <= 108`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        n = len(arr)\n        jumps = [n] * n\n        jumps[0] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n            for j in range(n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n        return jumps[-1]\n\n### Efficient Solution:\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        d = defaultdict(list)\n        for i, v in enumerate(arr):\n            d[v].append(i)\n        q = [(0, 0)]\n        vis = {0}\n        ans = 0\n        while q:\n            i, x = heappop(q)\n            if i == len(arr) - 1:\n                return x\n            k = 1 << 30\n            for j in d[arr[i]]:\n                if j in vis:\n                    k = min(k, j - i)\n            for j in d[arr[i]]:\n                if j in vis:\n                    continue\n                vis.add(j)\n                heappush(q, (j - i, x + k))\n                k += 1\n        return -1\n",
    "model_solution": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        d = defaultdict(list)\n        for i, v in enumerate(arr):\n            d[v].append(i)\n        q = [(0, 0)]\n        vis = {0}\n        ans = 0\n        while q:\n            i, x = heappop(q)\n            if i == len(arr) - 1:\n                return x\n            k = 1 << 30\n            for j in d[arr[i]]:\n                if j in vis:\n                    k = min(k, j - i)\n            for j in d[arr[i]]:\n                if j in vis:\n                    continue\n                vis.add(j)\n                heappush(q, (j - i, x + k))\n                k += 1\n        return -1"
}