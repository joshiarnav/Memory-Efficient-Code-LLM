{
    "problem_idx": "2501",
    "description": "\nYou are given an integer array `nums`. A subsequence of `nums` is called a **square streak** if:\n\n\n* The length of the subsequence is at least `2`, and\n* **after** sorting the subsequence, each element (except the first element) is the **square** of the previous number.\n\n\nReturn *the length of the **longest square streak** in* `nums`*, or return* `-1` *if there is no **square streak**.*\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,6,16,8,2]\n**Output:** 3\n**Explanation:** Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].\n- 4 = 2 * 2.\n- 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,5,6,7]\n**Output:** -1\n**Explanation:** There is no square streak in nums so return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `2 <= nums[i] <= 105`\n\n\n",
    "inefficient_solution": "class Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            prev_v = v\n            while v in s:\n                v *= v\n                s.add(v)\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n            else:\n                v = prev_v\n            prev_v = v\n        return ans",
    "efficient_solution": "class Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            while v in s:\n                v *= v\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an integer array `nums`. A subsequence of `nums` is called a **square streak** if:\n\n\n* The length of the subsequence is at least `2`, and\n* **after** sorting the subsequence, each element (except the first element) is the **square** of the previous number.\n\n\nReturn *the length of the **longest square streak** in* `nums`*, or return* `-1` *if there is no **square streak**.*\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,6,16,8,2]\n**Output:** 3\n**Explanation:** Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].\n- 4 = 2 * 2.\n- 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,5,6,7]\n**Output:** -1\n**Explanation:** There is no square streak in nums so return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `2 <= nums[i] <= 105`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            prev_v = v\n            while v in s:\n                v *= v\n                s.add(v)\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n            else:\n                v = prev_v\n            prev_v = v\n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            while v in s:\n                v *= v\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an integer array `nums`. A subsequence of `nums` is called a **square streak** if:\n\n\n* The length of the subsequence is at least `2`, and\n* **after** sorting the subsequence, each element (except the first element) is the **square** of the previous number.\n\n\nReturn *the length of the **longest square streak** in* `nums`*, or return* `-1` *if there is no **square streak**.*\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,6,16,8,2]\n**Output:** 3\n**Explanation:** Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].\n- 4 = 2 * 2.\n- 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,5,6,7]\n**Output:** -1\n**Explanation:** There is no square streak in nums so return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `2 <= nums[i] <= 105`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            prev_v = v\n            while v in s:\n                v *= v\n                s.add(v)\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n            else:\n                v = prev_v\n            prev_v = v\n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            x = v\n            while x in s:\n                t += 1\n                x *= x\n            if t > 1:\n                ans = max(ans, t)\n        return ans\n",
    "model_solution": "class Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            x = v\n            while x in s:\n                t += 1\n                x *= x\n            if t > 1:\n                ans = max(ans, t)\n        return ans"
}