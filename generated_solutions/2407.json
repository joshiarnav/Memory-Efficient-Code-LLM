{
    "problem_idx": "2407",
    "description": "\nYou are given an integer array `nums` and an integer `k`.\n\n\nFind the longest subsequence of `nums` that meets the following requirements:\n\n\n* The subsequence is **strictly increasing** and\n* The difference between adjacent elements in the subsequence is **at most** `k`.\n\n\nReturn *the length of the **longest** **subsequence** that meets the requirements.*\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,2,1,4,3,4,5,8,15], k = 3\n**Output:** 5\n**Explanation:**\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [7,4,5,1,8,12,4,7], k = 5\n**Output:** 4\n**Explanation:**\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,5], k = 1\n**Output:** 1\n**Explanation:**\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i], k <= 105`\n\n\n",
    "inefficient_solution": "class Solution:\n    def lengthOfLIS(self, nums, k):\n        table = {}\n        for i, v in enumerate(nums):\n            j = v - k\n            while j in table and table[j] < i:\n                j = table[j] + 1\n            table[v] = i\n            ans = 0\n            for u in table:\n                if u >= j:\n                    ans = max(ans, i - table[u])\n            ans = max(ans, 1)\n            table[v] = i - ans + 1\n        return max(table.values())",
    "efficient_solution": "class Node:\n    def __init__(self):\n        self.l = 0\n        self.r = 0\n        self.v = 0\n\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.tr = [Node() for _ in range(4 * n)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l = l\n        self.tr[u].r = r\n        if l == r:\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n\n    def modify(self, u, x, v):\n        if self.tr[u].l == x and self.tr[u].r == x:\n            self.tr[u].v = v\n            return\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if x <= mid:\n            self.modify(u << 1, x, v)\n        else:\n            self.modify(u << 1 | 1, x, v)\n        self.pushup(u)\n\n    def pushup(self, u):\n        self.tr[u].v = max(self.tr[u << 1].v, self.tr[u << 1 | 1].v)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].v\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        v = 0\n        if l <= mid:\n            v = self.query(u << 1, l, r)\n        if r > mid:\n            v = max(v, self.query(u << 1 | 1, l, r))\n        return v\n\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        tree = SegmentTree(max(nums))\n        ans = 1\n        for v in nums:\n            t = tree.query(1, v - k, v - 1) + 1\n            ans = max(ans, t)\n            tree.modify(1, v, t)\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an integer array `nums` and an integer `k`.\n\n\nFind the longest subsequence of `nums` that meets the following requirements:\n\n\n* The subsequence is **strictly increasing** and\n* The difference between adjacent elements in the subsequence is **at most** `k`.\n\n\nReturn *the length of the **longest** **subsequence** that meets the requirements.*\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,2,1,4,3,4,5,8,15], k = 3\n**Output:** 5\n**Explanation:**\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [7,4,5,1,8,12,4,7], k = 5\n**Output:** 4\n**Explanation:**\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,5], k = 1\n**Output:** 1\n**Explanation:**\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i], k <= 105`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def lengthOfLIS(self, nums, k):\n        table = {}\n        for i, v in enumerate(nums):\n            j = v - k\n            while j in table and table[j] < i:\n                j = table[j] + 1\n            table[v] = i\n            ans = 0\n            for u in table:\n                if u >= j:\n                    ans = max(ans, i - table[u])\n            ans = max(ans, 1)\n            table[v] = i - ans + 1\n        return max(table.values())\n\n### Efficient Solution:\nclass Node:\n    def __init__(self):\n        self.l = 0\n        self.r = 0\n        self.v = 0\n\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.tr = [Node() for _ in range(4 * n)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l = l\n        self.tr[u].r = r\n        if l == r:\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n\n    def modify(self, u, x, v):\n        if self.tr[u].l == x and self.tr[u].r == x:\n            self.tr[u].v = v\n            return\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if x <= mid:\n            self.modify(u << 1, x, v)\n        else:\n            self.modify(u << 1 | 1, x, v)\n        self.pushup(u)\n\n    def pushup(self, u):\n        self.tr[u].v = max(self.tr[u << 1].v, self.tr[u << 1 | 1].v)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].v\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        v = 0\n        if l <= mid:\n            v = self.query(u << 1, l, r)\n        if r > mid:\n            v = max(v, self.query(u << 1 | 1, l, r))\n        return v\n\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        tree = SegmentTree(max(nums))\n        ans = 1\n        for v in nums:\n            t = tree.query(1, v - k, v - 1) + 1\n            ans = max(ans, t)\n            tree.modify(1, v, t)\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an integer array `nums` and an integer `k`.\n\n\nFind the longest subsequence of `nums` that meets the following requirements:\n\n\n* The subsequence is **strictly increasing** and\n* The difference between adjacent elements in the subsequence is **at most** `k`.\n\n\nReturn *the length of the **longest** **subsequence** that meets the requirements.*\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,2,1,4,3,4,5,8,15], k = 3\n**Output:** 5\n**Explanation:**\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [7,4,5,1,8,12,4,7], k = 5\n**Output:** 4\n**Explanation:**\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,5], k = 1\n**Output:** 1\n**Explanation:**\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i], k <= 105`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def lengthOfLIS(self, nums, k):\n        table = {}\n        for i, v in enumerate(nums):\n            j = v - k\n            while j in table and table[j] < i:\n                j = table[j] + 1\n            table[v] = i\n            ans = 0\n            for u in table:\n                if u >= j:\n                    ans = max(ans, i - table[u])\n            ans = max(ans, 1)\n            table[v] = i - ans + 1\n        return max(table.values())\n\n### Efficient Solution:\nclass Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        d = defaultdict(int)\n        ans = 0\n        for v in nums:\n            h = d.get(v - k, -inf)\n            d[v] = max(d[v], h + 1)\n            ans = max(ans, d[v])\n        return ans\n",
    "model_solution": "class Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        d = defaultdict(int)\n        ans = 0\n        for v in nums:\n            h = d.get(v - k, -inf)\n            d[v] = max(d[v], h + 1)\n            ans = max(ans, d[v])\n        return ans"
}