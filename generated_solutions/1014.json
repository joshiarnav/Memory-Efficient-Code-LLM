{
    "problem_idx": "1014",
    "description": "\nYou are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them.\n\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.\n\n\nReturn *the maximum score of a pair of sightseeing spots*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** values = [8,1,5,2,6]\n**Output:** 11\n**Explanation:** i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** values = [1,2]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= values.length <= 5 * 104`\n* `1 <= values[i] <= 1000`\n\n\n",
    "inefficient_solution": "class Solution:\n    def maxScoreSightseeingPair(self, values):\n        max_values = [0 for _ in range(len(values))]\n        max_values[0] = values[0]\n        max_sum = [0 for _ in range(len(values))]\n        max_sum[0] = max_values[0]\n        for j in range(1, len(values)):\n            max_values[j] = max(values[j], max_values[j-1])\n        for j in range(1, len(values)):\n            max_sum[j] = max(max_sum[j-1], max_values[j] + j)\n        max_score = 0\n        for j in range(1, len(values)):\n            max_score = max(max_score, values[j] - j + max_values[j-1])\n        return max_score",
    "efficient_solution": "class Solution:\n    def maxScoreSightseeingPair(self, values: List[int]) -> int:\n        ans, mx = 0, values[0]\n        for j in range(1, len(values)):\n            ans = max(ans, values[j] - j + mx)\n            mx = max(mx, values[j] + j)\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them.\n\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.\n\n\nReturn *the maximum score of a pair of sightseeing spots*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** values = [8,1,5,2,6]\n**Output:** 11\n**Explanation:** i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** values = [1,2]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= values.length <= 5 * 104`\n* `1 <= values[i] <= 1000`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def maxScoreSightseeingPair(self, values):\n        max_values = [0 for _ in range(len(values))]\n        max_values[0] = values[0]\n        max_sum = [0 for _ in range(len(values))]\n        max_sum[0] = max_values[0]\n        for j in range(1, len(values)):\n            max_values[j] = max(values[j], max_values[j-1])\n        for j in range(1, len(values)):\n            max_sum[j] = max(max_sum[j-1], max_values[j] + j)\n        max_score = 0\n        for j in range(1, len(values)):\n            max_score = max(max_score, values[j] - j + max_values[j-1])\n        return max_score\n\n### Efficient Solution:\nclass Solution:\n    def maxScoreSightseeingPair(self, values: List[int]) -> int:\n        ans, mx = 0, values[0]\n        for j in range(1, len(values)):\n            ans = max(ans, values[j] - j + mx)\n            mx = max(mx, values[j] + j)\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them.\n\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.\n\n\nReturn *the maximum score of a pair of sightseeing spots*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** values = [8,1,5,2,6]\n**Output:** 11\n**Explanation:** i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** values = [1,2]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= values.length <= 5 * 104`\n* `1 <= values[i] <= 1000`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def maxScoreSightseeingPair(self, values):\n        max_values = [0 for _ in range(len(values))]\n        max_values[0] = values[0]\n        max_sum = [0 for _ in range(len(values))]\n        max_sum[0] = max_values[0]\n        for j in range(1, len(values)):\n            max_values[j] = max(values[j], max_values[j-1])\n        for j in range(1, len(values)):\n            max_sum[j] = max(max_sum[j-1], max_values[j] + j)\n        max_score = 0\n        for j in range(1, len(values)):\n            max_score = max(max_score, values[j] - j + max_values[j-1])\n        return max_score\n\n### Efficient Solution:\nclass Solution:\n    def maxScoreSightseeingPair(self, values: List[int]) -> int:\n        ans = f = 0\n        for j, v in enumerate(values[1:], 1):\n            f = max(f, j - v + values[j - 1])\n            ans = max(ans, f + v - j)\n        return ans\n",
    "model_solution": "class Solution:\n    def maxScoreSightseeingPair(self, values: List[int]) -> int:\n        ans = f = 0\n        for j, v in enumerate(values[1:], 1):\n            f = max(f, j - v + values[j - 1])\n            ans = max(ans, f + v - j)\n        return ans"
}