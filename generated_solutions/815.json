{
    "problem_idx": "815",
    "description": "\nYou are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.\n\n\n* For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.\n\n\nYou will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.\n\n\nReturn *the least number of buses you must take to travel from* `source` *to* `target`. Return `-1` if it is not possible.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n**Output:** 2\n**Explanation:** The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n**Output:** -1\n\n```\n\n\u00a0\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= routes.length <= 500`.\n* `1 <= routes[i].length <= 105`\n* All the values of `routes[i]` are **unique**.\n* `sum(routes[i].length) <= 105`\n* `0 <= routes[i][j] < 106`\n* `0 <= source, target < 106`\n\n\n",
    "inefficient_solution": "class Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v] = d.get(v, []) + [i]\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a] = g.get(a, []) + [b]\n                    g[b] = g.get(b, []) + [a]\n\n        q = deque(d[source])\n        ans = 1\n        vis = set(d[source])\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                if target in s[i]:\n                    return ans\n                for j in g[i]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.extend(d[j])\n            ans += 1\n        return -1",
    "efficient_solution": "class Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v].append(i)\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a].append(b)\n                    g[b].append(a)\n        q = deque(d[source])\n        ans = 1\n        vis = set(d[source])\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                if target in s[i]:\n                    return ans\n                for j in g[i]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.append(j)\n            ans += 1\n        return -1\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.\n\n\n* For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.\n\n\nYou will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.\n\n\nReturn *the least number of buses you must take to travel from* `source` *to* `target`. Return `-1` if it is not possible.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n**Output:** 2\n**Explanation:** The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n**Output:** -1\n\n```\n\n\u00a0\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= routes.length <= 500`.\n* `1 <= routes[i].length <= 105`\n* All the values of `routes[i]` are **unique**.\n* `sum(routes[i].length) <= 105`\n* `0 <= routes[i][j] < 106`\n* `0 <= source, target < 106`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v] = d.get(v, []) + [i]\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a] = g.get(a, []) + [b]\n                    g[b] = g.get(b, []) + [a]\n\n        q = deque(d[source])\n        ans = 1\n        vis = set(d[source])\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                if target in s[i]:\n                    return ans\n                for j in g[i]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.extend(d[j])\n            ans += 1\n        return -1\n\n### Efficient Solution:\nclass Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v].append(i)\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a].append(b)\n                    g[b].append(a)\n        q = deque(d[source])\n        ans = 1\n        vis = set(d[source])\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                if target in s[i]:\n                    return ans\n                for j in g[i]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.append(j)\n            ans += 1\n        return -1\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.\n\n\n* For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 ->...` forever.\n\n\nYou will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.\n\n\nReturn *the least number of buses you must take to travel from* `source` *to* `target`. Return `-1` if it is not possible.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n**Output:** 2\n**Explanation:** The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n**Output:** -1\n\n```\n\n\u00a0\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= routes.length <= 500`.\n* `1 <= routes[i].length <= 105`\n* All the values of `routes[i]` are **unique**.\n* `sum(routes[i].length) <= 105`\n* `0 <= routes[i][j] < 106`\n* `0 <= source, target < 106`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v] = d.get(v, []) + [i]\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a] = g.get(a, []) + [b]\n                    g[b] = g.get(b, []) + [a]\n\n        q = deque(d[source])\n        ans = 1\n        vis = set(d[source])\n        while q:\n            for _ in range(len(q)):\n                i = q.popleft()\n                if target in s[i]:\n                    return ans\n                for j in g[i]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.extend(d[j])\n            ans += 1\n        return -1\n\n### Efficient Solution:\nclass Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v].append(i)\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a].append(b)\n                    g[b].append(a)\n\n        q = deque([d[source][0]])\n        ans = 1\n        vis = {d[source][0]}\n        while q:\n            for i in range(len(q)):\n                p = q.popleft()\n                if target in s[p]:\n                    return ans\n                for j in g[p]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.append(j)\n            ans += 1\n        return -1\n",
    "model_solution": "class Solution:\n    def numBusesToDestination(\n        self, routes: List[List[int]], source: int, target: int\n    ) -> int:\n        if source == target:\n            return 0\n\n        s = [set(r) for r in routes]\n        d = defaultdict(list)\n        for i, r in enumerate(routes):\n            for v in r:\n                d[v].append(i)\n\n        g = defaultdict(list)\n        for ids in d.values():\n            m = len(ids)\n            for i in range(m):\n                for j in range(i + 1, m):\n                    a, b = ids[i], ids[j]\n                    g[a].append(b)\n                    g[b].append(a)\n\n        q = deque([d[source][0]])\n        ans = 1\n        vis = {d[source][0]}\n        while q:\n            for i in range(len(q)):\n                p = q.popleft()\n                if target in s[p]:\n                    return ans\n                for j in g[p]:\n                    if j not in vis:\n                        vis.add(j)\n                        q.append(j)\n            ans += 1\n        return -1"
}