{
    "problem_idx": "704",
    "description": "\nGiven an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-1,0,3,5,9,12], target = 9\n**Output:** 4\n**Explanation:** 9 exists in nums and its index is 4\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,0,3,5,9,12], target = 2\n**Output:** -1\n**Explanation:** 2 does not exist in nums so return -1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-104 < nums[i], target < 104`\n* All the integers in `nums` are **unique**.\n* `nums` is sorted in ascending order.\n\n\n",
    "inefficient_solution": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        n = len(nums)\n        nums_copy = [0] * n\n        for i in range(n):\n            nums_copy[i] = nums[i]\n        nums = nums_copy\n        \n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] >= target:\n                nums[mid] = -1\n                right = mid\n            else:\n                nums[mid] = -1\n                left = mid + 1\n        if nums[left] != -1 and nums[left] == target:\n            return left\n        else:\n            return -1",
    "efficient_solution": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left if nums[left] == target else -1\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-1,0,3,5,9,12], target = 9\n**Output:** 4\n**Explanation:** 9 exists in nums and its index is 4\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,0,3,5,9,12], target = 2\n**Output:** -1\n**Explanation:** 2 does not exist in nums so return -1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-104 < nums[i], target < 104`\n* All the integers in `nums` are **unique**.\n* `nums` is sorted in ascending order.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        n = len(nums)\n        nums_copy = [0] * n\n        for i in range(n):\n            nums_copy[i] = nums[i]\n        nums = nums_copy\n        \n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] >= target:\n                nums[mid] = -1\n                right = mid\n            else:\n                nums[mid] = -1\n                left = mid + 1\n        if nums[left] != -1 and nums[left] == target:\n            return left\n        else:\n            return -1\n\n### Efficient Solution:\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left if nums[left] == target else -1\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-1,0,3,5,9,12], target = 9\n**Output:** 4\n**Explanation:** 9 exists in nums and its index is 4\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,0,3,5,9,12], target = 2\n**Output:** -1\n**Explanation:** 2 does not exist in nums so return -1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-104 < nums[i], target < 104`\n* All the integers in `nums` are **unique**.\n* `nums` is sorted in ascending order.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        n = len(nums)\n        nums_copy = [0] * n\n        for i in range(n):\n            nums_copy[i] = nums[i]\n        nums = nums_copy\n        \n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] >= target:\n                nums[mid] = -1\n                right = mid\n            else:\n                nums[mid] = -1\n                left = mid + 1\n        if nums[left]!= -1 and nums[left] == target:\n            return left\n        else:\n            return -1\n\n### Efficient Solution:\nclass Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        n = len(nums)\n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left if nums[left] == target else -1\n",
    "model_solution": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        n = len(nums)\n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return left if nums[left] == target else -1"
}