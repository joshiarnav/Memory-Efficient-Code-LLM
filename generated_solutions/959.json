{
    "problem_idx": "959",
    "description": "\nAn `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square consists of a `'/'`, `'\\'`, or blank space `' '`. These characters divide the square into contiguous regions.\n\n\nGiven the grid `grid` represented as a string array, return *the number of regions*.\n\n\nNote that backslash characters are escaped, so a `'\\'` is represented as `'\\\\'`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/1.png)\n\n```\n\n**Input:** grid = [\" /\",\"/ \"]\n**Output:** 2\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/2.png)\n\n```\n\n**Input:** grid = [\" /\",\"  \"]\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/4.png)\n\n```\n\n**Input:** grid = [\"/\\\\\",\"\\\\/\"]\n**Output:** 5\n**Explanation:** Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length == grid[i].length`\n* `1 <= n <= 30`\n* `grid[i][j]` is either `'/'`, `'\\'`, or `' '`.\n\n\n",
    "inefficient_solution": "class Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n                size_list.append((size, a, b))\n\n        n = len(grid)\n        size = n * n * 4\n        size_list = []\n        p = list(range(size))\n        for i in range(4 * n * n):\n            p[i] = i\n\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(4 * k + 2, (k + n) * 4)\n                if j < n - 1:\n                    union(4 * k + 1, (k + 1) * 4 + 3)\n                if v == '/':\n                    union(4 * k, 4 * k + 3)\n                    union(4 * k + 1, 4 * k + 2)\n                elif v == '\\\\':\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 2, 4 * k + 3)\n                else:\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 1, 4 * k + 2)\n                    union(4 * k + 2, 4 * k + 3)\n\n        for pair in size_list:\n            union(pair[1], pair[2])\n\n        return size",
    "efficient_solution": "class Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n\n        n = len(grid)\n        size = n * n * 4\n        p = list(range(size))\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(4 * k + 2, (k + n) * 4)\n                if j < n - 1:\n                    union(4 * k + 1, (k + 1) * 4 + 3)\n                if v == '/':\n                    union(4 * k, 4 * k + 3)\n                    union(4 * k + 1, 4 * k + 2)\n                elif v == '\\\\':\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 2, 4 * k + 3)\n                else:\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 1, 4 * k + 2)\n                    union(4 * k + 2, 4 * k + 3)\n        return size\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nAn `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square consists of a `'/'`, `'\\'`, or blank space `' '`. These characters divide the square into contiguous regions.\n\n\nGiven the grid `grid` represented as a string array, return *the number of regions*.\n\n\nNote that backslash characters are escaped, so a `'\\'` is represented as `'\\\\'`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/1.png)\n\n```\n\n**Input:** grid = [\" /\",\"/ \"]\n**Output:** 2\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/2.png)\n\n```\n\n**Input:** grid = [\" /\",\"  \"]\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/4.png)\n\n```\n\n**Input:** grid = [\"/\\\\\",\"\\\\/\"]\n**Output:** 5\n**Explanation:** Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length == grid[i].length`\n* `1 <= n <= 30`\n* `grid[i][j]` is either `'/'`, `'\\'`, or `' '`.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n                size_list.append((size, a, b))\n\n        n = len(grid)\n        size = n * n * 4\n        size_list = []\n        p = list(range(size))\n        for i in range(4 * n * n):\n            p[i] = i\n\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(4 * k + 2, (k + n) * 4)\n                if j < n - 1:\n                    union(4 * k + 1, (k + 1) * 4 + 3)\n                if v == '/':\n                    union(4 * k, 4 * k + 3)\n                    union(4 * k + 1, 4 * k + 2)\n                elif v == '\\\\':\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 2, 4 * k + 3)\n                else:\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 1, 4 * k + 2)\n                    union(4 * k + 2, 4 * k + 3)\n\n        for pair in size_list:\n            union(pair[1], pair[2])\n\n        return size\n\n### Efficient Solution:\nclass Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa != pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n\n        n = len(grid)\n        size = n * n * 4\n        p = list(range(size))\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(4 * k + 2, (k + n) * 4)\n                if j < n - 1:\n                    union(4 * k + 1, (k + 1) * 4 + 3)\n                if v == '/':\n                    union(4 * k, 4 * k + 3)\n                    union(4 * k + 1, 4 * k + 2)\n                elif v == '\\\\':\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 2, 4 * k + 3)\n                else:\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 1, 4 * k + 2)\n                    union(4 * k + 2, 4 * k + 3)\n        return size\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nAn `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square consists of a `'/'`, `'\\'`, or blank space `' '`. These characters divide the square into contiguous regions.\n\n\nGiven the grid `grid` represented as a string array, return *the number of regions*.\n\n\nNote that backslash characters are escaped, so a `'\\'` is represented as `'\\\\'`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/1.png)\n\n```\n\n**Input:** grid = [\" /\",\"/ \"]\n**Output:** 2\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/2.png)\n\n```\n\n**Input:** grid = [\" /\",\"  \"]\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0959.Regions%20Cut%20By%20Slashes/images/4.png)\n\n```\n\n**Input:** grid = [\"/\\\\\",\"\\\\/\"]\n**Output:** 5\n**Explanation:** Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length == grid[i].length`\n* `1 <= n <= 30`\n* `grid[i][j]` is either `'/'`, `'\\'`, or `' '`.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x]!= x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa!= pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n                size_list.append((size, a, b))\n\n        n = len(grid)\n        size = n * n * 4\n        size_list = []\n        p = list(range(size))\n        for i in range(4 * n * n):\n            p[i] = i\n\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(4 * k + 2, (k + n) * 4)\n                if j < n - 1:\n                    union(4 * k + 1, (k + 1) * 4 + 3)\n                if v == '/':\n                    union(4 * k, 4 * k + 3)\n                    union(4 * k + 1, 4 * k + 2)\n                elif v == '\\\\':\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 2, 4 * k + 3)\n                else:\n                    union(4 * k, 4 * k + 1)\n                    union(4 * k + 1, 4 * k + 2)\n                    union(4 * k + 2, 4 * k + 3)\n\n        for pair in size_list:\n            union(pair[1], pair[2])\n\n        return size\n\n### Efficient Solution:\nclass Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x]!= x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa!= pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n\n        n = len(grid)\n        size = n * n\n        p = list(range(size))\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(k, k + n)\n                if j < n - 1:\n                    union(k, k + 1)\n                if v == '/':\n                    union(k, k + n)\n                    union(k + 1, k + n + 1)\n                elif v == '\\\\':\n                    union(k, k + 1)\n                    union(k + n, k + n + 1)\n        return size\n",
    "model_solution": "class Solution:\n    def regionsBySlashes(self, grid: List[str]) -> int:\n        def find(x):\n            if p[x]!= x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def union(a, b):\n            pa, pb = find(a), find(b)\n            if pa!= pb:\n                p[pa] = pb\n                nonlocal size\n                size -= 1\n\n        n = len(grid)\n        size = n * n\n        p = list(range(size))\n        for i, row in enumerate(grid):\n            for j, v in enumerate(row):\n                k = i * n + j\n                if i < n - 1:\n                    union(k, k + n)\n                if j < n - 1:\n                    union(k, k + 1)\n                if v == '/':\n                    union(k, k + n)\n                    union(k + 1, k + n + 1)\n                elif v == '\\\\':\n                    union(k, k + 1)\n                    union(k + n, k + n + 1)\n        return size"
}