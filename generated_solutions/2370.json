{
    "problem_idx": "2370",
    "description": "\nYou are given a string `s` consisting of lowercase letters and an integer `k`. We call a string `t` **ideal** if the following conditions are satisfied:\n\n\n* `t` is a **subsequence** of the string `s`.\n* The absolute difference in the alphabet order of every two **adjacent** letters in `t` is less than or equal to `k`.\n\n\nReturn *the length of the **longest** ideal string*.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n**Note** that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of `'a'` and `'z'` is `25`, not `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"acfgbd\", k = 2\n**Output:** 4\n**Explanation:** The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\", k = 3\n**Output:** 4\n**Explanation:** The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `0 <= k <= 25`\n* `s` consists of lowercase English letters.\n\n\n",
    "inefficient_solution": "class Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [0] * (n * n)\n        for i in range(n):\n            for j in range(k + 1):\n                dp[i * (k + 1) + j] = 1\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                for c in range(k + 1):\n                    dp[i * (k + 1) + j] = max(dp[i * (k + 1) + j], dp[(i - 1) * (k + 1) + c] + 1)\n        return max(dp)",
    "efficient_solution": "class Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [1] * n\n        d = {s[0]: 0}\n        for i in range(1, n):\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                if b in d:\n                    dp[i] = max(dp[i], dp[d[b]] + 1)\n            d[s[i]] = i\n        return max(dp)\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a string `s` consisting of lowercase letters and an integer `k`. We call a string `t` **ideal** if the following conditions are satisfied:\n\n\n* `t` is a **subsequence** of the string `s`.\n* The absolute difference in the alphabet order of every two **adjacent** letters in `t` is less than or equal to `k`.\n\n\nReturn *the length of the **longest** ideal string*.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n**Note** that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of `'a'` and `'z'` is `25`, not `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"acfgbd\", k = 2\n**Output:** 4\n**Explanation:** The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\", k = 3\n**Output:** 4\n**Explanation:** The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `0 <= k <= 25`\n* `s` consists of lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [0] * (n * n)\n        for i in range(n):\n            for j in range(k + 1):\n                dp[i * (k + 1) + j] = 1\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                for c in range(k + 1):\n                    dp[i * (k + 1) + j] = max(dp[i * (k + 1) + j], dp[(i - 1) * (k + 1) + c] + 1)\n        return max(dp)\n\n### Efficient Solution:\nclass Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [1] * n\n        d = {s[0]: 0}\n        for i in range(1, n):\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                if b in d:\n                    dp[i] = max(dp[i], dp[d[b]] + 1)\n            d[s[i]] = i\n        return max(dp)\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a string `s` consisting of lowercase letters and an integer `k`. We call a string `t` **ideal** if the following conditions are satisfied:\n\n\n* `t` is a **subsequence** of the string `s`.\n* The absolute difference in the alphabet order of every two **adjacent** letters in `t` is less than or equal to `k`.\n\n\nReturn *the length of the **longest** ideal string*.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n**Note** that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of `'a'` and `'z'` is `25`, not `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"acfgbd\", k = 2\n**Output:** 4\n**Explanation:** The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\", k = 3\n**Output:** 4\n**Explanation:** The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `0 <= k <= 25`\n* `s` consists of lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [0] * (n * n)\n        for i in range(n):\n            for j in range(k + 1):\n                dp[i * (k + 1) + j] = 1\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                for c in range(k + 1):\n                    dp[i * (k + 1) + j] = max(dp[i * (k + 1) + j], dp[(i - 1) * (k + 1) + c] + 1)\n        return max(dp)\n\n### Efficient Solution:\nclass Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        ans = 1\n        a = ord(s[0])\n        for b in s[1:]:\n            d = abs(a - ord(b))\n            ans = max(ans, d <= k and ans + 1 or ans)\n            a = ord(b)\n        return ans\n",
    "model_solution": "class Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        ans = 1\n        a = ord(s[0])\n        for b in s[1:]:\n            d = abs(a - ord(b))\n            ans = max(ans, d <= k and ans + 1 or ans)\n            a = ord(b)\n        return ans"
}