{
    "problem_idx": "82",
    "description": "\nGiven the `head` of a sorted linked list, *delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list*. Return *the linked list **sorted** as well*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0082.Remove%20Duplicates%20from%20Sorted%20List%20II/images/linkedlist1.jpg)\n\n```\n\n**Input:** head = [1,2,3,3,4,4,5]\n**Output:** [1,2,5]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0082.Remove%20Duplicates%20from%20Sorted%20List%20II/images/linkedlist2.jpg)\n\n```\n\n**Input:** head = [1,1,1,2,3]\n**Output:** [2,3]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the list is in the range `[0, 300]`.\n* `-100 <= Node.val <= 100`\n* The list is guaranteed to be **sorted** in ascending order.\n\n\n",
    "inefficient_solution": "",
    "efficient_solution": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = pre = ListNode(next=head)\n        cur = head\n        while cur:\n            while cur.next and cur.next.val == cur.val:\n                cur = cur.next\n            if pre.next == cur:\n                pre = cur\n            else:\n                pre.next = cur.next\n            cur = cur.next\n        return dummy.next\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven the `head` of a sorted linked list, *delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list*. Return *the linked list **sorted** as well*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0082.Remove%20Duplicates%20from%20Sorted%20List%20II/images/linkedlist1.jpg)\n\n```\n\n**Input:** head = [1,2,3,3,4,4,5]\n**Output:** [1,2,5]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0082.Remove%20Duplicates%20from%20Sorted%20List%20II/images/linkedlist2.jpg)\n\n```\n\n**Input:** head = [1,1,1,2,3]\n**Output:** [2,3]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the list is in the range `[0, 300]`.\n* `-100 <= Node.val <= 100`\n* The list is guaranteed to be **sorted** in ascending order.\n\n\n\n\n### Inefficient Solution:\n\n\n### Efficient Solution:\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = pre = ListNode(next=head)\n        cur = head\n        while cur:\n            while cur.next and cur.next.val == cur.val:\n                cur = cur.next\n            if pre.next == cur:\n                pre = cur\n            else:\n                pre.next = cur.next\n            cur = cur.next\n        return dummy.next\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven the `head` of a sorted linked list, *delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list*. Return *the linked list **sorted** as well*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0082.Remove%20Duplicates%20from%20Sorted%20List%20II/images/linkedlist1.jpg)\n\n```\n\n**Input:** head = [1,2,3,3,4,4,5]\n**Output:** [1,2,5]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0082.Remove%20Duplicates%20from%20Sorted%20List%20II/images/linkedlist2.jpg)\n\n```\n\n**Input:** head = [1,1,1,2,3]\n**Output:** [2,3]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the list is in the range `[0, 300]`.\n* `-100 <= Node.val <= 100`\n* The list is guaranteed to be **sorted** in ascending order.\n\n\n\n\n### Inefficient Solution:\n\n\n### Efficient Solution:\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        dummy = ListNode(0)\n        curr = dummy\n        prev = None\n        seen = set()\n\n        while head:\n            if prev and prev.val == head.val:\n                while head and prev.val == head.val:\n                    head = head.next\n                if head is None:\n                    break\n                head = head.next\n            elif head.val not in seen:\n                seen.add(head.val)\n                prev = head\n            head = head.next\n\n        curr.next = self.deleteDuplicates(head) if head else None\n        return curr.next\n",
    "model_solution": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:\n        dummy = ListNode(0)\n        curr = dummy\n        prev = None\n        seen = set()\n\n        while head:\n            if prev and prev.val == head.val:\n                while head and prev.val == head.val:\n                    head = head.next\n                if head is None:\n                    break\n                head = head.next\n            elif head.val not in seen:\n                seen.add(head.val)\n                prev = head\n            head = head.next\n\n        curr.next = self.deleteDuplicates(head) if head else None\n        return curr.next"
}