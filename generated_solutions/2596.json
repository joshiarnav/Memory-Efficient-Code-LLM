{
    "problem_idx": "2596",
    "description": "\nThere is a knight on an `n x n` chessboard. In a valid configuration, the knight starts **at the top-left cell** of the board and visits every cell on the board **exactly once**.\n\n\nYou are given an `n x n` integer matrix `grid` consisting of distinct integers from the range `[0, n * n - 1]` where `grid[row][col]` indicates that the cell `(row, col)` is the `grid[row][col]th` cell that the knight visited. The moves are **0-indexed**.\n\n\nReturn `true` *if* `grid` *represents a valid configuration of the knight's movements or* `false` *otherwise*.\n\n\n**Note** that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/knight.png)\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/yetgriddrawio-5.png)\n\n```\n\n**Input:** grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\n**Output:** true\n**Explanation:** The above diagram represents the grid. It can be shown that it is a valid configuration.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/yetgriddrawio-6.png)\n\n```\n\n**Input:** grid = [[0,3,6],[5,8,1],[2,7,4]]\n**Output:** false\n**Explanation:** The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length == grid[i].length`\n* `3 <= n <= 7`\n* `0 <= grid[row][col] < n * n`\n* All integers in `grid` are **unique**.\n\n\n",
    "inefficient_solution": "class Solution:\n    def checkValidGrid(self, grid: List[List[int]]) -> bool:\n        n = len(grid)\n        n2 = n * n\n        visited = set()\n        move = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]\n        for i in range(n):\n            for j in range(n):\n                visited.add((i, j))\n                for k in range(n2):\n                    x, y = i + 2 * move[k][0], j + 2 * move[k][1]\n                    if 0 <= x < n and 0 <= y < n:\n                        if (x, y) in visited:\n                            return False\n                        visited.add((x, y))\n        return len(visited) == n2",
    "efficient_solution": "class Solution:\n    def checkValidGrid(self, grid: List[List[int]]) -> bool:\n        if grid[0][0]:\n            return False\n        n = len(grid)\n        pos = [None] * (n * n)\n        for i in range(n):\n            for j in range(n):\n                pos[grid[i][j]] = (i, j)\n        for (x1, y1), (x2, y2) in pairwise(pos):\n            dx, dy = abs(x1 - x2), abs(y1 - y2)\n            ok = (dx == 1 and dy == 2) or (dx == 2 and dy == 1)\n            if not ok:\n                return False\n        return True\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nThere is a knight on an `n x n` chessboard. In a valid configuration, the knight starts **at the top-left cell** of the board and visits every cell on the board **exactly once**.\n\n\nYou are given an `n x n` integer matrix `grid` consisting of distinct integers from the range `[0, n * n - 1]` where `grid[row][col]` indicates that the cell `(row, col)` is the `grid[row][col]th` cell that the knight visited. The moves are **0-indexed**.\n\n\nReturn `true` *if* `grid` *represents a valid configuration of the knight's movements or* `false` *otherwise*.\n\n\n**Note** that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/knight.png)\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/yetgriddrawio-5.png)\n\n```\n\n**Input:** grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\n**Output:** true\n**Explanation:** The above diagram represents the grid. It can be shown that it is a valid configuration.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/yetgriddrawio-6.png)\n\n```\n\n**Input:** grid = [[0,3,6],[5,8,1],[2,7,4]]\n**Output:** false\n**Explanation:** The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length == grid[i].length`\n* `3 <= n <= 7`\n* `0 <= grid[row][col] < n * n`\n* All integers in `grid` are **unique**.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def checkValidGrid(self, grid: List[List[int]]) -> bool:\n        n = len(grid)\n        n2 = n * n\n        visited = set()\n        move = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]\n        for i in range(n):\n            for j in range(n):\n                visited.add((i, j))\n                for k in range(n2):\n                    x, y = i + 2 * move[k][0], j + 2 * move[k][1]\n                    if 0 <= x < n and 0 <= y < n:\n                        if (x, y) in visited:\n                            return False\n                        visited.add((x, y))\n        return len(visited) == n2\n\n### Efficient Solution:\nclass Solution:\n    def checkValidGrid(self, grid: List[List[int]]) -> bool:\n        if grid[0][0]:\n            return False\n        n = len(grid)\n        pos = [None] * (n * n)\n        for i in range(n):\n            for j in range(n):\n                pos[grid[i][j]] = (i, j)\n        for (x1, y1), (x2, y2) in pairwise(pos):\n            dx, dy = abs(x1 - x2), abs(y1 - y2)\n            ok = (dx == 1 and dy == 2) or (dx == 2 and dy == 1)\n            if not ok:\n                return False\n        return True\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nThere is a knight on an `n x n` chessboard. In a valid configuration, the knight starts **at the top-left cell** of the board and visits every cell on the board **exactly once**.\n\n\nYou are given an `n x n` integer matrix `grid` consisting of distinct integers from the range `[0, n * n - 1]` where `grid[row][col]` indicates that the cell `(row, col)` is the `grid[row][col]th` cell that the knight visited. The moves are **0-indexed**.\n\n\nReturn `true` *if* `grid` *represents a valid configuration of the knight's movements or* `false` *otherwise*.\n\n\n**Note** that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/knight.png)\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/yetgriddrawio-5.png)\n\n```\n\n**Input:** grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\n**Output:** true\n**Explanation:** The above diagram represents the grid. It can be shown that it is a valid configuration.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2596.Check%20Knight%20Tour%20Configuration/images/yetgriddrawio-6.png)\n\n```\n\n**Input:** grid = [[0,3,6],[5,8,1],[2,7,4]]\n**Output:** false\n**Explanation:** The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length == grid[i].length`\n* `3 <= n <= 7`\n* `0 <= grid[row][col] < n * n`\n* All integers in `grid` are **unique**.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def checkValidGrid(self, grid: List[List[int]]) -> bool:\n        n = len(grid)\n        n2 = n * n\n        visited = set()\n        move = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]\n        for i in range(n):\n            for j in range(n):\n                visited.add((i, j))\n                for k in range(n2):\n                    x, y = i + 2 * move[k][0], j + 2 * move[k][1]\n                    if 0 <= x < n and 0 <= y < n:\n                        if (x, y) in visited:\n                            return False\n                        visited.add((x, y))\n        return len(visited) == n2\n\n### Efficient Solution:\nclass Solution:\n    def checkValidGrid(self, grid: List[List[int]]) -> bool:\n        def check(i, j, k):\n            x, y = i + move[k][0], j + move[k][1]\n            return 0 <= x < n and 0 <= y < n and grid[x][y] == k\n\n        n = len(grid)\n        move = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]\n        vis = set()\n        i, j = 0, 0\n        for k in range(n * n):\n            vis.add((i, j))\n            x, y = i + 2 * move[k % 8][0], j + 2 * move[k % 8][1]\n            if (x, y) not in vis and not check(x, y, k):\n                return False\n            i, j = x, y\n        return len(vis) == n * n\n",
    "model_solution": "class Solution:\n    def checkValidGrid(self, grid: List[List[int]]) -> bool:\n        def check(i, j, k):\n            x, y = i + move[k][0], j + move[k][1]\n            return 0 <= x < n and 0 <= y < n and grid[x][y] == k\n\n        n = len(grid)\n        move = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]\n        vis = set()\n        i, j = 0, 0\n        for k in range(n * n):\n            vis.add((i, j))\n            x, y = i + 2 * move[k % 8][0], j + 2 * move[k % 8][1]\n            if (x, y) not in vis and not check(x, y, k):\n                return False\n            i, j = x, y\n        return len(vis) == n * n"
}