{
    "problem_idx": "875",
    "description": "\nKoko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\n\nReturn *the minimum integer* `k` *such that she can eat all the bananas within* `h` *hours*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** piles = [3,6,7,11], h = 8\n**Output:** 4\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** piles = [30,11,23,4,20], h = 5\n**Output:** 30\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** piles = [30,11,23,4,20], h = 6\n**Output:** 23\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= piles.length <= 104`\n* `piles.length <= h <= 109`\n* `1 <= piles[i] <= 109`\n\n\n",
    "inefficient_solution": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def check(k):\n            res = 0\n            for pile in piles:\n                x = pile\n                while x > 0:\n                    res += 1\n                    x -= k\n                x = pile\n                while x >= k:\n                    res += 1\n                    x -= k\n                res += 1\n            return res <= h\n\n        left, right = 1, 10**9\n        while True:\n            mid = (left + right) // 2\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n            if left == right:\n                return left\n            if left > 10**6:\n                left = 1\n                right = 10**9",
    "efficient_solution": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        left, right = 1, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            s = sum((x + mid - 1) // mid for x in piles)\n            if s <= h:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nKoko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\n\nReturn *the minimum integer* `k` *such that she can eat all the bananas within* `h` *hours*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** piles = [3,6,7,11], h = 8\n**Output:** 4\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** piles = [30,11,23,4,20], h = 5\n**Output:** 30\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** piles = [30,11,23,4,20], h = 6\n**Output:** 23\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= piles.length <= 104`\n* `piles.length <= h <= 109`\n* `1 <= piles[i] <= 109`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def check(k):\n            res = 0\n            for pile in piles:\n                x = pile\n                while x > 0:\n                    res += 1\n                    x -= k\n                x = pile\n                while x >= k:\n                    res += 1\n                    x -= k\n                res += 1\n            return res <= h\n\n        left, right = 1, 10**9\n        while True:\n            mid = (left + right) // 2\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n            if left == right:\n                return left\n            if left > 10**6:\n                left = 1\n                right = 10**9\n\n### Efficient Solution:\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        left, right = 1, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            s = sum((x + mid - 1) // mid for x in piles)\n            if s <= h:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nKoko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\n\nReturn *the minimum integer* `k` *such that she can eat all the bananas within* `h` *hours*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** piles = [3,6,7,11], h = 8\n**Output:** 4\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** piles = [30,11,23,4,20], h = 5\n**Output:** 30\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** piles = [30,11,23,4,20], h = 6\n**Output:** 23\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= piles.length <= 104`\n* `piles.length <= h <= 109`\n* `1 <= piles[i] <= 109`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def check(k):\n            res = 0\n            for pile in piles:\n                x = pile\n                while x > 0:\n                    res += 1\n                    x -= k\n                x = pile\n                while x >= k:\n                    res += 1\n                    x -= k\n                res += 1\n            return res <= h\n\n        left, right = 1, 10**9\n        while True:\n            mid = (left + right) // 2\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n            if left == right:\n                return left\n            if left > 10**6:\n                left = 1\n                right = 10**9\n\n### Efficient Solution:\nclass Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def check(k):\n            return sum((x + k - 1) // k <= h for x in piles) > 0\n\n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
    "model_solution": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def check(k):\n            return sum((x + k - 1) // k <= h for x in piles) > 0\n\n        left, right = 1, max(piles)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"
}