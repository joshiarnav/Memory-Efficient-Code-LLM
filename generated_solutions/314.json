{
    "problem_idx": "314",
    "description": "\nGiven the `root` of a binary tree, return ***the vertical order traversal** of its nodes' values*. (i.e., from top to bottom, column by column).\n\n\nIf two nodes are in the same row and column, the order should be from **left to right**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** [[9],[3,15],[20],[7]]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree2-1.jpg)\n\n```\n\n**Input:** root = [3,9,8,4,0,1,7]\n**Output:** [[4],[9],[3,0,1],[8],[7]]\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree2.jpg)\n\n```\n\n**Input:** root = [3,9,8,4,0,1,7,null,null,null,2,5]\n**Output:** [[4],[9,5],[3,0,1],[8,2],[7]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 100]`.\n* `-100 <= Node.val <= 100`\n\n\n",
    "inefficient_solution": "class Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        all_nodes = []\n        for i in range(101):\n            for j in range(101):\n                all_nodes.append((root, i, j))\n        d = defaultdict(list)\n        while all_nodes:\n            node, x, y = all_nodes.pop()\n            d[(x, y)].append(node.val)\n            if node.left:\n                all_nodes.append((node.left, x - 1, y - 1))\n            if node.right:\n                all_nodes.append((node.right, x + 1, y + 1))\n        result = []\n        for key in sorted(d.keys()):\n            result.append(d[key])\n        return result",
    "efficient_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        q = deque([(root, 0)])\n        d = defaultdict(list)\n        while q:\n            for _ in range(len(q)):\n                root, offset = q.popleft()\n                d[offset].append(root.val)\n                if root.left:\n                    q.append((root.left, offset - 1))\n                if root.right:\n                    q.append((root.right, offset + 1))\n        return [v for _, v in sorted(d.items())]\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven the `root` of a binary tree, return ***the vertical order traversal** of its nodes' values*. (i.e., from top to bottom, column by column).\n\n\nIf two nodes are in the same row and column, the order should be from **left to right**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** [[9],[3,15],[20],[7]]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree2-1.jpg)\n\n```\n\n**Input:** root = [3,9,8,4,0,1,7]\n**Output:** [[4],[9],[3,0,1],[8],[7]]\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree2.jpg)\n\n```\n\n**Input:** root = [3,9,8,4,0,1,7,null,null,null,2,5]\n**Output:** [[4],[9,5],[3,0,1],[8,2],[7]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 100]`.\n* `-100 <= Node.val <= 100`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        all_nodes = []\n        for i in range(101):\n            for j in range(101):\n                all_nodes.append((root, i, j))\n        d = defaultdict(list)\n        while all_nodes:\n            node, x, y = all_nodes.pop()\n            d[(x, y)].append(node.val)\n            if node.left:\n                all_nodes.append((node.left, x - 1, y - 1))\n            if node.right:\n                all_nodes.append((node.right, x + 1, y + 1))\n        result = []\n        for key in sorted(d.keys()):\n            result.append(d[key])\n        return result\n\n### Efficient Solution:\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        q = deque([(root, 0)])\n        d = defaultdict(list)\n        while q:\n            for _ in range(len(q)):\n                root, offset = q.popleft()\n                d[offset].append(root.val)\n                if root.left:\n                    q.append((root.left, offset - 1))\n                if root.right:\n                    q.append((root.right, offset + 1))\n        return [v for _, v in sorted(d.items())]\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven the `root` of a binary tree, return ***the vertical order traversal** of its nodes' values*. (i.e., from top to bottom, column by column).\n\n\nIf two nodes are in the same row and column, the order should be from **left to right**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** [[9],[3,15],[20],[7]]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree2-1.jpg)\n\n```\n\n**Input:** root = [3,9,8,4,0,1,7]\n**Output:** [[4],[9],[3,0,1],[8],[7]]\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree2.jpg)\n\n```\n\n**Input:** root = [3,9,8,4,0,1,7,null,null,null,2,5]\n**Output:** [[4],[9,5],[3,0,1],[8,2],[7]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 100]`.\n* `-100 <= Node.val <= 100`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        all_nodes = []\n        for i in range(101):\n            for j in range(101):\n                all_nodes.append((root, i, j))\n        d = defaultdict(list)\n        while all_nodes:\n            node, x, y = all_nodes.pop()\n            d[(x, y)].append(node.val)\n            if node.left:\n                all_nodes.append((node.left, x - 1, y - 1))\n            if node.right:\n                all_nodes.append((node.right, x + 1, y + 1))\n        result = []\n        for key in sorted(d.keys()):\n            result.append(d[key])\n        return result\n\n### Efficient Solution:\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        d = defaultdict(list)\n        q = deque([(root, 0)])\n        while q:\n            node, x = q.popleft()\n            d[x].append(node.val)\n            if node.left:\n                q.append((node.left, x - 1))\n            if node.right:\n                q.append((node.right, x + 1))\n        return [v for v in d.values()]\n",
    "model_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        d = defaultdict(list)\n        q = deque([(root, 0)])\n        while q:\n            node, x = q.popleft()\n            d[x].append(node.val)\n            if node.left:\n                q.append((node.left, x - 1))\n            if node.right:\n                q.append((node.right, x + 1))\n        return [v for v in d.values()]"
}