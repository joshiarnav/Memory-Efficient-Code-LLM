{
    "problem_idx": "1861",
    "description": "\nYou are given an `m x n` matrix of characters `box` representing a side-view of a box. Each cell of the box is one of the following:\n\n\n* A stone `'#'`\n* A stationary obstacle `'*'`\n* Empty `'.'`\n\n\nThe box is rotated **90 degrees clockwise**, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity **does not** affect the obstacles' positions, and the inertia from the box's rotation **does not** affect the stones' horizontal positions.\n\n\nIt is **guaranteed** that each stone in `box` rests on an obstacle, another stone, or the bottom of the box.\n\n\nReturn *an* `n x m` *matrix representing the box after the rotation described above*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcodewithstones.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\".\",\"#\"]]\n**Output:** [[\".\"],\n\u00a0        [\"#\"],\n\u00a0        [\"#\"]]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcode2withstones.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\".\",\"*\",\".\"],\n\u00a0             [\"#\",\"#\",\"*\",\".\"]]\n**Output:** [[\"#\",\".\"],\n\u00a0        [\"#\",\"#\"],\n\u00a0        [\"*\",\"*\"],\n\u00a0        [\".\",\".\"]]\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcode3withstone.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\n\u00a0             [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\n\u00a0             [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\n**Output:** [[\".\",\"#\",\"#\"],\n\u00a0        [\".\",\"#\",\"#\"],\n\u00a0        [\"#\",\"#\",\"*\"],\n\u00a0        [\"#\",\"*\",\".\"],\n\u00a0        [\"#\",\".\",\"*\"],\n\u00a0        [\"#\",\".\",\".\"]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == box.length`\n* `n == box[i].length`\n* `1 <= m, n <= 500`\n* `box[i][j]` is either `'#'`, `'*'`, or `'.'`.\n\n\n",
    "inefficient_solution": "class Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        m, n = len(box), len(box[0])\n        ans = [[None] * m for _ in range(m * n)]\n        for i in range(m):\n            for j in range(n):\n                ans[j + i * m] = [box[i][j]]\n        for i in range(m * n):\n            ans[i] *= 10\n        for j in range(m * n):\n            for k in range(10 * m * n):\n                ans[j][k] = None\n        for j in range(m * n):\n            for i in range(10 * m * n - 1, -1, -1):\n                if ans[j][i] == '*':\n                    for k in range(10 * m * n):\n                        ans[j][k] = None\n                elif ans[j][i] == '.':\n                    for k in range(10 * m * n):\n                        ans[j][k] = '.'\n                elif ans[j][i - 1] == '#':\n                    ans[j][i - 1] = '.'\n                    ans[j][i] = '#'\n                    break\n                elif ans[j][i] == '#':\n                    pass\n        for j in range(m * n):\n            ans[j] = ans[j][:m]\n        return [ans[j] for j in range(m * n) // m]",
    "efficient_solution": "class Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        m, n = len(box), len(box[0])\n        ans = [[None] * m for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                ans[j][m - i - 1] = box[i][j]\n        for j in range(m):\n            q = deque()\n            for i in range(n - 1, -1, -1):\n                if ans[i][j] == '*':\n                    q.clear()\n                elif ans[i][j] == '.':\n                    q.append(i)\n                elif q:\n                    ans[q.popleft()][j] = '#'\n                    ans[i][j] = '.'\n                    q.append(i)\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an `m x n` matrix of characters `box` representing a side-view of a box. Each cell of the box is one of the following:\n\n\n* A stone `'#'`\n* A stationary obstacle `'*'`\n* Empty `'.'`\n\n\nThe box is rotated **90 degrees clockwise**, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity **does not** affect the obstacles' positions, and the inertia from the box's rotation **does not** affect the stones' horizontal positions.\n\n\nIt is **guaranteed** that each stone in `box` rests on an obstacle, another stone, or the bottom of the box.\n\n\nReturn *an* `n x m` *matrix representing the box after the rotation described above*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcodewithstones.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\".\",\"#\"]]\n**Output:** [[\".\"],\n\u00a0        [\"#\"],\n\u00a0        [\"#\"]]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcode2withstones.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\".\",\"*\",\".\"],\n\u00a0             [\"#\",\"#\",\"*\",\".\"]]\n**Output:** [[\"#\",\".\"],\n\u00a0        [\"#\",\"#\"],\n\u00a0        [\"*\",\"*\"],\n\u00a0        [\".\",\".\"]]\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcode3withstone.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\n\u00a0             [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\n\u00a0             [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\n**Output:** [[\".\",\"#\",\"#\"],\n\u00a0        [\".\",\"#\",\"#\"],\n\u00a0        [\"#\",\"#\",\"*\"],\n\u00a0        [\"#\",\"*\",\".\"],\n\u00a0        [\"#\",\".\",\"*\"],\n\u00a0        [\"#\",\".\",\".\"]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == box.length`\n* `n == box[i].length`\n* `1 <= m, n <= 500`\n* `box[i][j]` is either `'#'`, `'*'`, or `'.'`.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        m, n = len(box), len(box[0])\n        ans = [[None] * m for _ in range(m * n)]\n        for i in range(m):\n            for j in range(n):\n                ans[j + i * m] = [box[i][j]]\n        for i in range(m * n):\n            ans[i] *= 10\n        for j in range(m * n):\n            for k in range(10 * m * n):\n                ans[j][k] = None\n        for j in range(m * n):\n            for i in range(10 * m * n - 1, -1, -1):\n                if ans[j][i] == '*':\n                    for k in range(10 * m * n):\n                        ans[j][k] = None\n                elif ans[j][i] == '.':\n                    for k in range(10 * m * n):\n                        ans[j][k] = '.'\n                elif ans[j][i - 1] == '#':\n                    ans[j][i - 1] = '.'\n                    ans[j][i] = '#'\n                    break\n                elif ans[j][i] == '#':\n                    pass\n        for j in range(m * n):\n            ans[j] = ans[j][:m]\n        return [ans[j] for j in range(m * n) // m]\n\n### Efficient Solution:\nclass Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        m, n = len(box), len(box[0])\n        ans = [[None] * m for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                ans[j][m - i - 1] = box[i][j]\n        for j in range(m):\n            q = deque()\n            for i in range(n - 1, -1, -1):\n                if ans[i][j] == '*':\n                    q.clear()\n                elif ans[i][j] == '.':\n                    q.append(i)\n                elif q:\n                    ans[q.popleft()][j] = '#'\n                    ans[i][j] = '.'\n                    q.append(i)\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an `m x n` matrix of characters `box` representing a side-view of a box. Each cell of the box is one of the following:\n\n\n* A stone `'#'`\n* A stationary obstacle `'*'`\n* Empty `'.'`\n\n\nThe box is rotated **90 degrees clockwise**, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity **does not** affect the obstacles' positions, and the inertia from the box's rotation **does not** affect the stones' horizontal positions.\n\n\nIt is **guaranteed** that each stone in `box` rests on an obstacle, another stone, or the bottom of the box.\n\n\nReturn *an* `n x m` *matrix representing the box after the rotation described above*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcodewithstones.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\".\",\"#\"]]\n**Output:** [[\".\"],\n\u00a0        [\"#\"],\n\u00a0        [\"#\"]]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcode2withstones.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\".\",\"*\",\".\"],\n\u00a0             [\"#\",\"#\",\"*\",\".\"]]\n**Output:** [[\"#\",\".\"],\n\u00a0        [\"#\",\"#\"],\n\u00a0        [\"*\",\"*\"],\n\u00a0        [\".\",\".\"]]\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1861.Rotating%20the%20Box/images/rotatingtheboxleetcode3withstone.png)\n\n\n\n```\n\n**Input:** box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\n\u00a0             [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\n\u00a0             [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\n**Output:** [[\".\",\"#\",\"#\"],\n\u00a0        [\".\",\"#\",\"#\"],\n\u00a0        [\"#\",\"#\",\"*\"],\n\u00a0        [\"#\",\"*\",\".\"],\n\u00a0        [\"#\",\".\",\"*\"],\n\u00a0        [\"#\",\".\",\".\"]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == box.length`\n* `n == box[i].length`\n* `1 <= m, n <= 500`\n* `box[i][j]` is either `'#'`, `'*'`, or `'.'`.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        m, n = len(box), len(box[0])\n        ans = [[None] * m for _ in range(m * n)]\n        for i in range(m):\n            for j in range(n):\n                ans[j + i * m] = [box[i][j]]\n        for i in range(m * n):\n            ans[i] *= 10\n        for j in range(m * n):\n            for k in range(10 * m * n):\n                ans[j][k] = None\n        for j in range(m * n):\n            for i in range(10 * m * n - 1, -1, -1):\n                if ans[j][i] == '*':\n                    for k in range(10 * m * n):\n                        ans[j][k] = None\n                elif ans[j][i] == '.':\n                    for k in range(10 * m * n):\n                        ans[j][k] = '.'\n                elif ans[j][i - 1] == '#':\n                    ans[j][i - 1] = '.'\n                    ans[j][i] = '#'\n                    break\n                elif ans[j][i] == '#':\n                    pass\n        for j in range(m * n):\n            ans[j] = ans[j][:m]\n        return [ans[j] for j in range(m * n) // m]\n\n### Efficient Solution:\nclass Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        m, n = len(box), len(box[0])\n        ans = [['.'] * n for _ in range(m)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n):\n                if box[i][j] == '*':\n                    break\n                if j + 1 >= n:\n                    break\n                if ans[m - i - 1][j] == '.':\n                    ans[m - i - 1][j] = '#'\n        for i in range(m):\n            for j in range(n - 1, -1, -1):\n                if ans[i][j] == '.':\n                    ans[i][j] = '*'\n        return ans\n",
    "model_solution": "class Solution:\n    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:\n        m, n = len(box), len(box[0])\n        ans = [['.'] * n for _ in range(m)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n):\n                if box[i][j] == '*':\n                    break\n                if j + 1 >= n:\n                    break\n                if ans[m - i - 1][j] == '.':\n                    ans[m - i - 1][j] = '#'\n        for i in range(m):\n            for j in range(n - 1, -1, -1):\n                if ans[i][j] == '.':\n                    ans[i][j] = '*'\n        return ans"
}