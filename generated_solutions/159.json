{
    "problem_idx": "159",
    "description": "\nGiven a string `s`, return *the length of the longest* *substring* *that contains at most **two distinct characters***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"eceba\"\n**Output:** 3\n**Explanation:** The substring is \"ece\" which its length is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ccaabbb\"\n**Output:** 5\n**Explanation:** The substring is \"aabbb\" which its length is 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of English letters.\n\n\n",
    "inefficient_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        long_substring = []\n        max_length = 0\n        for char in s:\n            if len(long_substring) == 0:\n                long_substring.append(char)\n                max_length += 1\n            else:\n                new_substring = []\n                for c in long_substring:\n                    if c != char:\n                        new_substring.append(c)\n                if len(long_substring) > len(new_substring):\n                    long_substring = new_substring + [char]\n                else:\n                    long_substring = long_substring[:len(new_substring)] + [char]\n                if len(long_substring) > max_length:\n                    max_length = len(long_substring)\n        return max_length",
    "efficient_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a string `s`, return *the length of the longest* *substring* *that contains at most **two distinct characters***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"eceba\"\n**Output:** 3\n**Explanation:** The substring is \"ece\" which its length is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ccaabbb\"\n**Output:** 5\n**Explanation:** The substring is \"aabbb\" which its length is 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        long_substring = []\n        max_length = 0\n        for char in s:\n            if len(long_substring) == 0:\n                long_substring.append(char)\n                max_length += 1\n            else:\n                new_substring = []\n                for c in long_substring:\n                    if c != char:\n                        new_substring.append(c)\n                if len(long_substring) > len(new_substring):\n                    long_substring = new_substring + [char]\n                else:\n                    long_substring = long_substring[:len(new_substring)] + [char]\n                if len(long_substring) > max_length:\n                    max_length = len(long_substring)\n        return max_length\n\n### Efficient Solution:\nclass Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a string `s`, return *the length of the longest* *substring* *that contains at most **two distinct characters***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"eceba\"\n**Output:** 3\n**Explanation:** The substring is \"ece\" which its length is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ccaabbb\"\n**Output:** 5\n**Explanation:** The substring is \"aabbb\" which its length is 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        long_substring = []\n        max_length = 0\n        for char in s:\n            if len(long_substring) == 0:\n                long_substring.append(char)\n                max_length += 1\n            else:\n                new_substring = []\n                for c in long_substring:\n                    if c!= char:\n                        new_substring.append(c)\n                if len(long_substring) > len(new_substring):\n                    long_substring = new_substring + [char]\n                else:\n                    long_substring = long_substring[:len(new_substring)] + [char]\n                if len(long_substring) > max_length:\n                    max_length = len(long_substring)\n        return max_length\n\n### Efficient Solution:\nclass Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        j = 0\n        ans = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
    "model_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        j = 0\n        ans = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans"
}