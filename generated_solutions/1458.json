{
    "problem_idx": "1458",
    "description": "\nGiven two arrays `nums1`\u00a0and `nums2`.\n\n\nReturn the maximum dot product\u00a0between\u00a0**non-empty** subsequences of nums1 and nums2 with the same length.\n\n\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0`[2,3,5]`\u00a0is a subsequence of\u00a0`[1,2,3,4,5]`\u00a0while `[1,5,3]`\u00a0is not).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,-2,5], nums2 = [3,0,-6]\n**Output:** 18\n**Explanation:** Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [3,-2], nums2 = [2,-6,7]\n**Output:** 21\n**Explanation:** Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [-1,-1], nums2 = [1,1]\n**Output:** -1\n**Explanation:** Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 500`\n* `-1000 <= nums1[i], nums2[i] <= 1000`\n\n\n",
    "inefficient_solution": "class Solution:\n    def maxDotProduct(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n * 5000) for _ in range(m * 5000)]\n        for i in range(m * 5000):\n            for j in range(n * 5000):\n                for k in range(m):\n                    for l in range(n):\n                        if i >= k * 5000 and j >= l * 5000:\n                            v = nums1[k] * nums2[l]\n                            for _ in range(500):\n                                dp[i][j] = max(dp[i][j], dp[i - k * 5000][j - l * 5000], dp[i][j - l * 5000], dp[i - k * 5000][j], max(dp[i - k * 5000][j - l * 5000], 0) + v)\n        return dp[-1][-1]",
    "efficient_solution": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[-inf] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], max(dp[i - 1][j - 1], 0) + v)\n        return dp[-1][-1]\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven two arrays `nums1`\u00a0and `nums2`.\n\n\nReturn the maximum dot product\u00a0between\u00a0**non-empty** subsequences of nums1 and nums2 with the same length.\n\n\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0`[2,3,5]`\u00a0is a subsequence of\u00a0`[1,2,3,4,5]`\u00a0while `[1,5,3]`\u00a0is not).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,-2,5], nums2 = [3,0,-6]\n**Output:** 18\n**Explanation:** Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [3,-2], nums2 = [2,-6,7]\n**Output:** 21\n**Explanation:** Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [-1,-1], nums2 = [1,1]\n**Output:** -1\n**Explanation:** Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 500`\n* `-1000 <= nums1[i], nums2[i] <= 1000`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def maxDotProduct(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n * 5000) for _ in range(m * 5000)]\n        for i in range(m * 5000):\n            for j in range(n * 5000):\n                for k in range(m):\n                    for l in range(n):\n                        if i >= k * 5000 and j >= l * 5000:\n                            v = nums1[k] * nums2[l]\n                            for _ in range(500):\n                                dp[i][j] = max(dp[i][j], dp[i - k * 5000][j - l * 5000], dp[i][j - l * 5000], dp[i - k * 5000][j], max(dp[i - k * 5000][j - l * 5000], 0) + v)\n        return dp[-1][-1]\n\n### Efficient Solution:\nclass Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[-inf] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], max(dp[i - 1][j - 1], 0) + v)\n        return dp[-1][-1]\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven two arrays `nums1`\u00a0and `nums2`.\n\n\nReturn the maximum dot product\u00a0between\u00a0**non-empty** subsequences of nums1 and nums2 with the same length.\n\n\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0`[2,3,5]`\u00a0is a subsequence of\u00a0`[1,2,3,4,5]`\u00a0while `[1,5,3]`\u00a0is not).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,-2,5], nums2 = [3,0,-6]\n**Output:** 18\n**Explanation:** Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [3,-2], nums2 = [2,-6,7]\n**Output:** 21\n**Explanation:** Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [-1,-1], nums2 = [1,1]\n**Output:** -1\n**Explanation:** Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 500`\n* `-1000 <= nums1[i], nums2[i] <= 1000`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def maxDotProduct(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n * 5000) for _ in range(m * 5000)]\n        for i in range(m * 5000):\n            for j in range(n * 5000):\n                for k in range(m):\n                    for l in range(n):\n                        if i >= k * 5000 and j >= l * 5000:\n                            v = nums1[k] * nums2[l]\n                            for _ in range(500):\n                                dp[i][j] = max(dp[i][j], dp[i - k * 5000][j - l * 5000], dp[i][j - l * 5000], dp[i - k * 5000][j], max(dp[i - k * 5000][j - l * 5000], 0) + v)\n        return dp[-1][-1]\n\n### Efficient Solution:\nclass Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + v)\n        return dp[-1][-1]\n",
    "model_solution": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + v)\n        return dp[-1][-1]"
}