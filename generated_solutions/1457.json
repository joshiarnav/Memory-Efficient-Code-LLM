{
    "problem_idx": "1457",
    "description": "\nGiven a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be **pseudo-palindromic** if at least one permutation of the node values in the path is a palindrome.\n\n\n*Return the number of **pseudo-palindromic** paths going from the root node to leaf nodes.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1457.Pseudo-Palindromic%20Paths%20in%20a%20Binary%20Tree/images/palindromic_paths_1.png)\n\n\n\n```\n\n**Input:** root = [2,3,1,3,1,null,1]\n**Output:** 2 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1457.Pseudo-Palindromic%20Paths%20in%20a%20Binary%20Tree/images/palindromic_paths_2.png)**\n\n\n\n```\n\n**Input:** root = [2,1,1,1,3,null,null,null,null,null,1]\n**Output:** 1 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [9]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 105]`.\n* `1 <= Node.val <= 9`\n\n\n",
    "inefficient_solution": "",
    "efficient_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode], mask: int):\n            if root is None:\n                return 0\n            mask ^= 1 << root.val\n            if root.left is None and root.right is None:\n                return int((mask & (mask - 1)) == 0)\n            return dfs(root.left, mask) + dfs(root.right, mask)\n\n        return dfs(root, 0)\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be **pseudo-palindromic** if at least one permutation of the node values in the path is a palindrome.\n\n\n*Return the number of **pseudo-palindromic** paths going from the root node to leaf nodes.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1457.Pseudo-Palindromic%20Paths%20in%20a%20Binary%20Tree/images/palindromic_paths_1.png)\n\n\n\n```\n\n**Input:** root = [2,3,1,3,1,null,1]\n**Output:** 2 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1457.Pseudo-Palindromic%20Paths%20in%20a%20Binary%20Tree/images/palindromic_paths_2.png)**\n\n\n\n```\n\n**Input:** root = [2,1,1,1,3,null,null,null,null,null,1]\n**Output:** 1 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [9]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 105]`.\n* `1 <= Node.val <= 9`\n\n\n\n\n### Inefficient Solution:\n\n\n### Efficient Solution:\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode], mask: int):\n            if root is None:\n                return 0\n            mask ^= 1 << root.val\n            if root.left is None and root.right is None:\n                return int((mask & (mask - 1)) == 0)\n            return dfs(root.left, mask) + dfs(root.right, mask)\n\n        return dfs(root, 0)\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be **pseudo-palindromic** if at least one permutation of the node values in the path is a palindrome.\n\n\n*Return the number of **pseudo-palindromic** paths going from the root node to leaf nodes.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1457.Pseudo-Palindromic%20Paths%20in%20a%20Binary%20Tree/images/palindromic_paths_1.png)\n\n\n\n```\n\n**Input:** root = [2,3,1,3,1,null,1]\n**Output:** 2 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1457.Pseudo-Palindromic%20Paths%20in%20a%20Binary%20Tree/images/palindromic_paths_2.png)**\n\n\n\n```\n\n**Input:** root = [2,1,1,1,3,null,null,null,null,null,1]\n**Output:** 1 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [9]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 105]`.\n* `1 <= Node.val <= 9`\n\n\n\n\n### Inefficient Solution:\n\n\n### Efficient Solution:\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:\n        def dfs(root, t):\n            if root is None:\n                return 0\n            t ^= 1 << root.val\n            if root.left is None and root.right is None:\n                return int(t & (t - 1) == 0)\n            return dfs(root.left, t) + dfs(root.right, t)\n\n        if root is None:\n            return 0\n        ans = dfs(root, 0)\n        return ans\n",
    "model_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths (self, root: Optional[TreeNode]) -> int:\n        def dfs(root, t):\n            if root is None:\n                return 0\n            t ^= 1 << root.val\n            if root.left is None and root.right is None:\n                return int(t & (t - 1) == 0)\n            return dfs(root.left, t) + dfs(root.right, t)\n\n        if root is None:\n            return 0\n        ans = dfs(root, 0)\n        return ans"
}