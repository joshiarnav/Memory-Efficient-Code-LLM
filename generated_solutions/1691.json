{
    "problem_idx": "1691",
    "description": "\nGiven `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] = [widthi, lengthi, heighti]` (**0-indexed**). Choose a **subset** of `cuboids` and place them on each other.\n\n\nYou can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <= lengthj` and `heighti <= heightj`. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\n\n\nReturn *the **maximum height** of the stacked* `cuboids`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1691.Maximum%20Height%20by%20Stacking%20Cuboids/images/image.jpg)**\n\n\n\n```\n\n**Input:** cuboids = [[50,45,20],[95,37,53],[45,23,12]]\n**Output:** 190\n**Explanation:**\nCuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.\nCuboid 0 is placed next with the 45x20 side facing down with height 50.\nCuboid 2 is placed next with the 23x12 side facing down with height 45.\nThe total height is 95 + 50 + 45 = 190.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cuboids = [[38,25,45],[76,35,3]]\n**Output:** 76\n**Explanation:**\nYou can't place any of the cuboids on the other.\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]\n**Output:** 102\n**Explanation:**\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\nYou can place the 11x7 side down on all cuboids so their heights are 17.\nThe maximum height of stacked cuboids is 6 * 17 = 102.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == cuboids.length`\n* `1 <= n <= 100`\n* `1 <= widthi, lengthi, heighti <= 100`\n\n\n",
    "inefficient_solution": "class Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        cuboids_with_rotations = []\n        for cuboid in cuboids:\n            for _ in range(3):\n                cuboids_with_rotations.append(cuboid)\n                cuboids_with_rotations[-1][1], cuboids_with_rotations[-1][2] = cuboids_with_rotations[-1][2], cuboids_with_rotations[-1][1]\n        cuboids_with_rotations.sort()\n\n        memo = dict()\n        def dp(i):\n            if i == len(cuboids_with_rotations):\n                return 0\n            if i in memo:\n                return memo[i]\n            max_height = 0\n            for j in range(i+1, len(cuboids_with_rotations)):\n                if (cuboids_with_rotations[i][0] <= cuboids_with_rotations[j][0] and\n                    cuboids_with_rotations[i][1] <= cuboids_with_rotations[j][1] and\n                    cuboids_with_rotations[i][2] <= cuboids_with_rotations[j][2]):\n                    max_height = max(max_height, dp(j))\n            memo[i] = max_height + cuboids_with_rotations[i][2]\n            return memo[i]\n\n        return max(dp(i) for i in range(len(cuboids_with_rotations)))",
    "efficient_solution": "class Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        for c in cuboids:\n            c.sort()\n        cuboids.sort()\n        n = len(cuboids)\n        f = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if cuboids[j][1] <= cuboids[i][1] and cuboids[j][2] <= cuboids[i][2]:\n                    f[i] = max(f[i], f[j])\n            f[i] += cuboids[i][2]\n        return max(f)\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] = [widthi, lengthi, heighti]` (**0-indexed**). Choose a **subset** of `cuboids` and place them on each other.\n\n\nYou can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <= lengthj` and `heighti <= heightj`. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\n\n\nReturn *the **maximum height** of the stacked* `cuboids`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1691.Maximum%20Height%20by%20Stacking%20Cuboids/images/image.jpg)**\n\n\n\n```\n\n**Input:** cuboids = [[50,45,20],[95,37,53],[45,23,12]]\n**Output:** 190\n**Explanation:**\nCuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.\nCuboid 0 is placed next with the 45x20 side facing down with height 50.\nCuboid 2 is placed next with the 23x12 side facing down with height 45.\nThe total height is 95 + 50 + 45 = 190.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cuboids = [[38,25,45],[76,35,3]]\n**Output:** 76\n**Explanation:**\nYou can't place any of the cuboids on the other.\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]\n**Output:** 102\n**Explanation:**\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\nYou can place the 11x7 side down on all cuboids so their heights are 17.\nThe maximum height of stacked cuboids is 6 * 17 = 102.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == cuboids.length`\n* `1 <= n <= 100`\n* `1 <= widthi, lengthi, heighti <= 100`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        cuboids_with_rotations = []\n        for cuboid in cuboids:\n            for _ in range(3):\n                cuboids_with_rotations.append(cuboid)\n                cuboids_with_rotations[-1][1], cuboids_with_rotations[-1][2] = cuboids_with_rotations[-1][2], cuboids_with_rotations[-1][1]\n        cuboids_with_rotations.sort()\n\n        memo = dict()\n        def dp(i):\n            if i == len(cuboids_with_rotations):\n                return 0\n            if i in memo:\n                return memo[i]\n            max_height = 0\n            for j in range(i+1, len(cuboids_with_rotations)):\n                if (cuboids_with_rotations[i][0] <= cuboids_with_rotations[j][0] and\n                    cuboids_with_rotations[i][1] <= cuboids_with_rotations[j][1] and\n                    cuboids_with_rotations[i][2] <= cuboids_with_rotations[j][2]):\n                    max_height = max(max_height, dp(j))\n            memo[i] = max_height + cuboids_with_rotations[i][2]\n            return memo[i]\n\n        return max(dp(i) for i in range(len(cuboids_with_rotations)))\n\n### Efficient Solution:\nclass Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        for c in cuboids:\n            c.sort()\n        cuboids.sort()\n        n = len(cuboids)\n        f = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if cuboids[j][1] <= cuboids[i][1] and cuboids[j][2] <= cuboids[i][2]:\n                    f[i] = max(f[i], f[j])\n            f[i] += cuboids[i][2]\n        return max(f)\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] = [widthi, lengthi, heighti]` (**0-indexed**). Choose a **subset** of `cuboids` and place them on each other.\n\n\nYou can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <= lengthj` and `heighti <= heightj`. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\n\n\nReturn *the **maximum height** of the stacked* `cuboids`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1691.Maximum%20Height%20by%20Stacking%20Cuboids/images/image.jpg)**\n\n\n\n```\n\n**Input:** cuboids = [[50,45,20],[95,37,53],[45,23,12]]\n**Output:** 190\n**Explanation:**\nCuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.\nCuboid 0 is placed next with the 45x20 side facing down with height 50.\nCuboid 2 is placed next with the 23x12 side facing down with height 45.\nThe total height is 95 + 50 + 45 = 190.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cuboids = [[38,25,45],[76,35,3]]\n**Output:** 76\n**Explanation:**\nYou can't place any of the cuboids on the other.\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]\n**Output:** 102\n**Explanation:**\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\nYou can place the 11x7 side down on all cuboids so their heights are 17.\nThe maximum height of stacked cuboids is 6 * 17 = 102.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == cuboids.length`\n* `1 <= n <= 100`\n* `1 <= widthi, lengthi, heighti <= 100`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        cuboids_with_rotations = []\n        for cuboid in cuboids:\n            for _ in range(3):\n                cuboids_with_rotations.append(cuboid)\n                cuboids_with_rotations[-1][1], cuboids_with_rotations[-1][2] = cuboids_with_rotations[-1][2], cuboids_with_rotations[-1][1]\n        cuboids_with_rotations.sort()\n\n        memo = dict()\n        def dp(i):\n            if i == len(cuboids_with_rotations):\n                return 0\n            if i in memo:\n                return memo[i]\n            max_height = 0\n            for j in range(i+1, len(cuboids_with_rotations)):\n                if (cuboids_with_rotations[i][0] <= cuboids_with_rotations[j][0] and\n                    cuboids_with_rotations[i][1] <= cuboids_with_rotations[j][1] and\n                    cuboids_with_rotations[i][2] <= cuboids_with_rotations[j][2]):\n                    max_height = max(max_height, dp(j))\n            memo[i] = max_height + cuboids_with_rotations[i][2]\n            return memo[i]\n\n        return max(dp(i) for i in range(len(cuboids_with_rotations)))\n\n### Efficient Solution:\nclass Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        cuboids.sort()\n        n = len(cuboids)\n        f = [-x[2]] * n\n        for i in range(n):\n            for j in range(i):\n                if cuboids[i][2] <= -f[j] and (\n                    cuboids[i][0] <= -f[j] or cuboids[i][1] <= -f[j]\n                ):\n                    f[i] = max(f[i], -f[j])\n        return max(f)\n",
    "model_solution": "class Solution:\n    def maxHeight(self, cuboids: List[List[int]]) -> int:\n        cuboids.sort()\n        n = len(cuboids)\n        f = [-x[2]] * n\n        for i in range(n):\n            for j in range(i):\n                if cuboids[i][2] <= -f[j] and (\n                    cuboids[i][0] <= -f[j] or cuboids[i][1] <= -f[j]\n                ):\n                    f[i] = max(f[i], -f[j])\n        return max(f)"
}