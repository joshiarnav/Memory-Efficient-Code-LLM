{
    "problem_idx": "1954",
    "description": "\nIn a garden represented as an infinite 2D grid, there is an apple tree planted at **every** integer coordinate. The apple tree planted at an integer coordinate `(i, j)` has `|i| + |j|` apples growing on it.\n\n\nYou will buy an axis-aligned **square plot** of land that is centered at `(0, 0)`.\n\n\nGiven an integer `neededApples`, return *the **minimum perimeter** of a plot such that **at least***`neededApples` *apples are **inside or on** the perimeter of that plot*.\n\n\nThe value of `|x|` is defined as:\n\n\n* `x` if `x >= 0`\n* `-x` if `x < 0`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1954.Minimum%20Garden%20Perimeter%20to%20Collect%20Enough%20Apples/images/1527_example_1_2.png)\n\n```\n\n**Input:** neededApples = 1\n**Output:** 8\n**Explanation:** A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** neededApples = 13\n**Output:** 16\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** neededApples = 1000000000\n**Output:** 5040\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= neededApples <= 1015`\n\n\n",
    "inefficient_solution": "class Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        plot_side_lengths = []\n        for i in range(1, 100000):\n            total_apples = 0\n            for x in range(-i, i+1):\n                for y in range(-i, i+1):\n                    total_apples += abs(x) + abs(y)\n            if total_apples >= neededApples:\n                plot_side_lengths.append(i)\n        return min(plot_side_lengths) * 8",
    "efficient_solution": "class Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        l, r = 1, 100000\n        while l < r:\n            mid = (l + r) >> 1\n            if 2 * mid * (mid + 1) * (2 * mid + 1) >= neededApples:\n                r = mid\n            else:\n                l = mid + 1\n        return l * 8\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nIn a garden represented as an infinite 2D grid, there is an apple tree planted at **every** integer coordinate. The apple tree planted at an integer coordinate `(i, j)` has `|i| + |j|` apples growing on it.\n\n\nYou will buy an axis-aligned **square plot** of land that is centered at `(0, 0)`.\n\n\nGiven an integer `neededApples`, return *the **minimum perimeter** of a plot such that **at least***`neededApples` *apples are **inside or on** the perimeter of that plot*.\n\n\nThe value of `|x|` is defined as:\n\n\n* `x` if `x >= 0`\n* `-x` if `x < 0`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1954.Minimum%20Garden%20Perimeter%20to%20Collect%20Enough%20Apples/images/1527_example_1_2.png)\n\n```\n\n**Input:** neededApples = 1\n**Output:** 8\n**Explanation:** A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** neededApples = 13\n**Output:** 16\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** neededApples = 1000000000\n**Output:** 5040\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= neededApples <= 1015`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        plot_side_lengths = []\n        for i in range(1, 100000):\n            total_apples = 0\n            for x in range(-i, i+1):\n                for y in range(-i, i+1):\n                    total_apples += abs(x) + abs(y)\n            if total_apples >= neededApples:\n                plot_side_lengths.append(i)\n        return min(plot_side_lengths) * 8\n\n### Efficient Solution:\nclass Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        l, r = 1, 100000\n        while l < r:\n            mid = (l + r) >> 1\n            if 2 * mid * (mid + 1) * (2 * mid + 1) >= neededApples:\n                r = mid\n            else:\n                l = mid + 1\n        return l * 8\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nIn a garden represented as an infinite 2D grid, there is an apple tree planted at **every** integer coordinate. The apple tree planted at an integer coordinate `(i, j)` has `|i| + |j|` apples growing on it.\n\n\nYou will buy an axis-aligned **square plot** of land that is centered at `(0, 0)`.\n\n\nGiven an integer `neededApples`, return *the **minimum perimeter** of a plot such that **at least***`neededApples` *apples are **inside or on** the perimeter of that plot*.\n\n\nThe value of `|x|` is defined as:\n\n\n* `x` if `x >= 0`\n* `-x` if `x < 0`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1954.Minimum%20Garden%20Perimeter%20to%20Collect%20Enough%20Apples/images/1527_example_1_2.png)\n\n```\n\n**Input:** neededApples = 1\n**Output:** 8\n**Explanation:** A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** neededApples = 13\n**Output:** 16\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** neededApples = 1000000000\n**Output:** 5040\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= neededApples <= 1015`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        plot_side_lengths = []\n        for i in range(1, 100000):\n            total_apples = 0\n            for x in range(-i, i+1):\n                for y in range(-i, i+1):\n                    total_apples += abs(x) + abs(y)\n            if total_apples >= neededApples:\n                plot_side_lengths.append(i)\n        return min(plot_side_lengths) * 8\n\n### Efficient Solution:\nclass Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        def sum(d: int) -> int:\n            return d * (d + 1) * (2 * d + 1) // 6\n\n        l, r = 1, 1048576\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if sum(mid) - sum(mid - 1) >= neededApples:\n                l = mid\n            else:\n                r = mid - 1\n        return l * 8\n",
    "model_solution": "class Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        def sum(d: int) -> int:\n            return d * (d + 1) * (2 * d + 1) // 6\n\n        l, r = 1, 1048576\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if sum(mid) - sum(mid - 1) >= neededApples:\n                l = mid\n            else:\n                r = mid - 1\n        return l * 8"
}