{
    "problem_idx": "767",
    "description": "\nGiven a string `s`, rearrange the characters of `s` so that any two adjacent characters are not the same.\n\n\nReturn *any possible rearrangement of* `s` *or return* `\"\"` *if not possible*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"aab\"\n**Output:** \"aba\"\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"aaab\"\n**Output:** \"\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 500`\n* `s` consists of lowercase English letters.\n\n\n",
    "inefficient_solution": "class Solution:\n    def reorganizeString(self, s: str) -> str:\n        n = len(s)\n        cnt = [0] * 26\n        for char in s:\n            cnt[ord(char) - ord('a')] += 1\n        mx = max(cnt)\n        char_list = [[] for _ in range(26)]\n        for i, v in enumerate(cnt):\n            char_list[i] = [chr(i + ord('a'))] * v\n        ans = [''] * n\n        for i in range(26):\n            while char_list[i]:\n                for j in range(n):\n                    if ans[j] == '':\n                        ans[j] = char_list[i].pop()\n                        break\n        return ''.join(ans)",
    "efficient_solution": "class Solution:\n    def reorganizeString(self, s: str) -> str:\n        n = len(s)\n        cnt = Counter(s)\n        mx = max(cnt.values())\n        if mx > (n + 1) // 2:\n            return ''\n        i = 0\n        ans = [None] * n\n        for k, v in cnt.most_common():\n            while v:\n                ans[i] = k\n                v -= 1\n                i += 2\n                if i >= n:\n                    i = 1\n        return ''.join(ans)\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a string `s`, rearrange the characters of `s` so that any two adjacent characters are not the same.\n\n\nReturn *any possible rearrangement of* `s` *or return* `\"\"` *if not possible*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"aab\"\n**Output:** \"aba\"\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"aaab\"\n**Output:** \"\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 500`\n* `s` consists of lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def reorganizeString(self, s: str) -> str:\n        n = len(s)\n        cnt = [0] * 26\n        for char in s:\n            cnt[ord(char) - ord('a')] += 1\n        mx = max(cnt)\n        char_list = [[] for _ in range(26)]\n        for i, v in enumerate(cnt):\n            char_list[i] = [chr(i + ord('a'))] * v\n        ans = [''] * n\n        for i in range(26):\n            while char_list[i]:\n                for j in range(n):\n                    if ans[j] == '':\n                        ans[j] = char_list[i].pop()\n                        break\n        return ''.join(ans)\n\n### Efficient Solution:\nclass Solution:\n    def reorganizeString(self, s: str) -> str:\n        n = len(s)\n        cnt = Counter(s)\n        mx = max(cnt.values())\n        if mx > (n + 1) // 2:\n            return ''\n        i = 0\n        ans = [None] * n\n        for k, v in cnt.most_common():\n            while v:\n                ans[i] = k\n                v -= 1\n                i += 2\n                if i >= n:\n                    i = 1\n        return ''.join(ans)\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven a string `s`, rearrange the characters of `s` so that any two adjacent characters are not the same.\n\n\nReturn *any possible rearrangement of* `s` *or return* `\"\"` *if not possible*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"aab\"\n**Output:** \"aba\"\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"aaab\"\n**Output:** \"\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 500`\n* `s` consists of lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def reorganizeString(self, s: str) -> str:\n        n = len(s)\n        cnt = [0] * 26\n        for char in s:\n            cnt[ord(char) - ord('a')] += 1\n        mx = max(cnt)\n        char_list = [[] for _ in range(26)]\n        for i, v in enumerate(cnt):\n            char_list[i] = [chr(i + ord('a'))] * v\n        ans = [''] * n\n        for i in range(26):\n            while char_list[i]:\n                for j in range(n):\n                    if ans[j] == '':\n                        ans[j] = char_list[i].pop()\n                        break\n        return ''.join(ans)\n\n### Efficient Solution:\nclass Solution:\n    def reorganizeString(self, s: str) -> str:\n        cnt = Counter(s)\n        mx = max(cnt.values())\n        if mx > (n + 1) // 2:\n            return \"\" if mx == (n + 1) // 2 else \"a\" * (mx - (n + 1) // 2 + 1) + 'b' * (n - mx + (n + 1) // 2 - 1)\n        pq = [-v for v in cnt.values()]\n        heapify(pq)\n        ans = [0] * n\n        for i, x in enumerate(pq):\n            cnt[x] += 1\n            if cnt[-x] > 0:\n                cnt[-x] -= 1\n                pq[0] -= 2\n                heapify(pq)\n            j = (i + 1) % (n + 1)\n            ans[j] = -pq[0]\n            pq.pop(0)\n        return ''.join(ans)\n",
    "model_solution": "class Solution:\n    def reorganizeString(self, s: str) -> str:\n        cnt = Counter(s)\n        mx = max(cnt.values())\n        if mx > (n + 1) // 2:\n            return \"\" if mx == (n + 1) // 2 else \"a\" * (mx - (n + 1) // 2 + 1) + 'b' * (n - mx + (n + 1) // 2 - 1)\n        pq = [-v for v in cnt.values()]\n        heapify(pq)\n        ans = [0] * n\n        for i, x in enumerate(pq):\n            cnt[x] += 1\n            if cnt[-x] > 0:\n                cnt[-x] -= 1\n                pq[0] -= 2\n                heapify(pq)\n            j = (i + 1) % (n + 1)\n            ans[j] = -pq[0]\n            pq.pop(0)\n        return ''.join(ans)"
}