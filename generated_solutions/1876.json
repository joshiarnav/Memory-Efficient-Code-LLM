{
    "problem_idx": "1876",
    "description": "\nA string is **good** if there are no repeated characters.\n\n\nGiven a string `s`\u200b\u200b\u200b\u200b\u200b, return *the number of **good substrings** of length **three** in* `s`\u200b\u200b\u200b\u200b\u200b\u200b.\n\n\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"xyzzaz\"\n**Output:** 1\n**Explanation:** There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \nThe only good substring of length 3 is \"xyz\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aababcabc\"\n**Output:** 4\n**Explanation:** There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s`\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.\n\n\n",
    "inefficient_solution": "class Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2):\n            substring = s[i:i+3]\n            substring_set = set(substring)\n            if len(substring_set) == 3:\n                count += 1\n        return count",
    "efficient_solution": "class Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count, n = 0, len(s)\n        for i in range(n - 2):\n            count += s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]\n        return count\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nA string is **good** if there are no repeated characters.\n\n\nGiven a string `s`\u200b\u200b\u200b\u200b\u200b, return *the number of **good substrings** of length **three** in* `s`\u200b\u200b\u200b\u200b\u200b\u200b.\n\n\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"xyzzaz\"\n**Output:** 1\n**Explanation:** There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \nThe only good substring of length 3 is \"xyz\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aababcabc\"\n**Output:** 4\n**Explanation:** There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s`\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2):\n            substring = s[i:i+3]\n            substring_set = set(substring)\n            if len(substring_set) == 3:\n                count += 1\n        return count\n\n### Efficient Solution:\nclass Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count, n = 0, len(s)\n        for i in range(n - 2):\n            count += s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]\n        return count\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nA string is **good** if there are no repeated characters.\n\n\nGiven a string `s`\u200b\u200b\u200b\u200b\u200b, return *the number of **good substrings** of length **three** in* `s`\u200b\u200b\u200b\u200b\u200b\u200b.\n\n\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"xyzzaz\"\n**Output:** 1\n**Explanation:** There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \nThe only good substring of length 3 is \"xyz\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aababcabc\"\n**Output:** 4\n**Explanation:** There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s`\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2):\n            substring = s[i:i+3]\n            substring_set = set(substring)\n            if len(substring_set) == 3:\n                count += 1\n        return count\n\n### Efficient Solution:\nclass Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        cnt = 0\n        for i in range(len(s) - 2):\n            if sorted(s[i : i + 3]) == list(\"abc\"):\n                cnt += 1\n        return cnt\n",
    "model_solution": "class Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        cnt = 0\n        for i in range(len(s) - 2):\n            if sorted(s[i : i + 3]) == list(\"abc\"):\n                cnt += 1\n        return cnt"
}