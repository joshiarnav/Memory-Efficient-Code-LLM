{
    "problem_idx": "2165",
    "description": "\nYou are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros.\n\n\nReturn *the rearranged number with minimal value*.\n\n\nNote that the sign of the number does not change after rearranging the digits.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 310\n**Output:** 103\n**Explanation:** The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = -7605\n**Output:** -7650\n**Explanation:** Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `-1015 <= num <= 1015`\n\n\n",
    "inefficient_solution": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        neg = num < 0\n        num = abs(num)\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        digits.sort()\n        ans = []\n        if not neg and not digits[0]:\n            digits.pop(0)\n        for i in range(len(digits)):\n            if i and not ans:\n                ans.append(0)\n            ans.append(digits[i])\n        if neg:\n            ans = [-i for i in ans]\n        return int(''.join(map(str, ans)))",
    "efficient_solution": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        cnt = [0] * 10\n        neg = num < 0\n        num = abs(num)\n        while num:\n            num, v = divmod(num, 10)\n            cnt[v] += 1\n        ans = \"\"\n        if neg:\n            for i in range(9, -1, -1):\n                if cnt[i]:\n                    ans += str(i) * cnt[i]\n            return -int(ans)\n        if cnt[0]:\n            for i in range(1, 10):\n                if cnt[i]:\n                    ans += str(i)\n                    cnt[i] -= 1\n                    break\n        for i in range(10):\n            if cnt[i]:\n                ans += str(i) * cnt[i]\n        return int(ans)\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros.\n\n\nReturn *the rearranged number with minimal value*.\n\n\nNote that the sign of the number does not change after rearranging the digits.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 310\n**Output:** 103\n**Explanation:** The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = -7605\n**Output:** -7650\n**Explanation:** Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `-1015 <= num <= 1015`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        neg = num < 0\n        num = abs(num)\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        digits.sort()\n        ans = []\n        if not neg and not digits[0]:\n            digits.pop(0)\n        for i in range(len(digits)):\n            if i and not ans:\n                ans.append(0)\n            ans.append(digits[i])\n        if neg:\n            ans = [-i for i in ans]\n        return int(''.join(map(str, ans)))\n\n### Efficient Solution:\nclass Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        cnt = [0] * 10\n        neg = num < 0\n        num = abs(num)\n        while num:\n            num, v = divmod(num, 10)\n            cnt[v] += 1\n        ans = \"\"\n        if neg:\n            for i in range(9, -1, -1):\n                if cnt[i]:\n                    ans += str(i) * cnt[i]\n            return -int(ans)\n        if cnt[0]:\n            for i in range(1, 10):\n                if cnt[i]:\n                    ans += str(i)\n                    cnt[i] -= 1\n                    break\n        for i in range(10):\n            if cnt[i]:\n                ans += str(i) * cnt[i]\n        return int(ans)\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros.\n\n\nReturn *the rearranged number with minimal value*.\n\n\nNote that the sign of the number does not change after rearranging the digits.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 310\n**Output:** 103\n**Explanation:** The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = -7605\n**Output:** -7650\n**Explanation:** Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `-1015 <= num <= 1015`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        neg = num < 0\n        num = abs(num)\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        digits.sort()\n        ans = []\n        if not neg and not digits[0]:\n            digits.pop(0)\n        for i in range(len(digits)):\n            if i and not ans:\n                ans.append(0)\n            ans.append(digits[i])\n        if neg:\n            ans = [-i for i in ans]\n        return int(''.join(map(str, ans)))\n\n### Efficient Solution:\nclass Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        neg = num < 0\n        num = abs(num)\n        ans = 0\n        while num:\n            if not ans or num % 10 < ans % 10:\n                ans = num % 10\n            num //= 10\n        if not neg and not ans:\n            ans = 1\n        return -ans if neg else ans\n",
    "model_solution": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        neg = num < 0\n        num = abs(num)\n        ans = 0\n        while num:\n            if not ans or num % 10 < ans % 10:\n                ans = num % 10\n            num //= 10\n        if not neg and not ans:\n            ans = 1\n        return -ans if neg else ans"
}