{
    "problem_idx": "349",
    "description": "\nGiven two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must be **unique** and you may return the result in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,2,1], nums2 = [2,2]\n**Output:** [2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n**Output:** [9,4]\n**Explanation:** [4,9] is also accepted.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 1000`\n* `0 <= nums1[i], nums2[i] <= 1000`\n\n\n",
    "inefficient_solution": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Create a list of all possible integers in the range of nums1 and nums2\n        all_nums = [i for i in range(1001)]\n        \n        # Create a dictionary to store the count of each number in nums1 and nums2\n        nums1_dict = {}\n        for num in nums1:\n            if num in nums1_dict:\n                nums1_dict[num] += 1\n            else:\n                nums1_dict[num] = 1\n        \n        nums2_dict = {}\n        for num in nums2:\n            if num in nums2_dict:\n                nums2_dict[num] += 1\n            else:\n                nums2_dict[num] = 1\n        \n        # Initialize an empty list to store the intersection\n        intersection = []\n        \n        # Iterate over all possible integers\n        for num in all_nums:\n            # Check if the number exists in both dictionaries and its count is greater than 0\n            if num in nums1_dict and num in nums2_dict and nums1_dict[num] > 0 and nums2_dict[num] > 0:\n                # Add the number to the intersection list\n                intersection.append(num)\n                # Decrement the count of the number in both dictionaries\n                nums1_dict[num] -= 1\n                nums2_dict[num] -= 1\n        \n        # Return the intersection list\n        return intersection",
    "efficient_solution": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list(set(nums1) & set(nums2))\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must be **unique** and you may return the result in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,2,1], nums2 = [2,2]\n**Output:** [2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n**Output:** [9,4]\n**Explanation:** [4,9] is also accepted.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 1000`\n* `0 <= nums1[i], nums2[i] <= 1000`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Create a list of all possible integers in the range of nums1 and nums2\n        all_nums = [i for i in range(1001)]\n        \n        # Create a dictionary to store the count of each number in nums1 and nums2\n        nums1_dict = {}\n        for num in nums1:\n            if num in nums1_dict:\n                nums1_dict[num] += 1\n            else:\n                nums1_dict[num] = 1\n        \n        nums2_dict = {}\n        for num in nums2:\n            if num in nums2_dict:\n                nums2_dict[num] += 1\n            else:\n                nums2_dict[num] = 1\n        \n        # Initialize an empty list to store the intersection\n        intersection = []\n        \n        # Iterate over all possible integers\n        for num in all_nums:\n            # Check if the number exists in both dictionaries and its count is greater than 0\n            if num in nums1_dict and num in nums2_dict and nums1_dict[num] > 0 and nums2_dict[num] > 0:\n                # Add the number to the intersection list\n                intersection.append(num)\n                # Decrement the count of the number in both dictionaries\n                nums1_dict[num] -= 1\n                nums2_dict[num] -= 1\n        \n        # Return the intersection list\n        return intersection\n\n### Efficient Solution:\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list(set(nums1) & set(nums2))\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must be **unique** and you may return the result in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,2,1], nums2 = [2,2]\n**Output:** [2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n**Output:** [9,4]\n**Explanation:** [4,9] is also accepted.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 1000`\n* `0 <= nums1[i], nums2[i] <= 1000`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Create a list of all possible integers in the range of nums1 and nums2\n        all_nums = [i for i in range(1001)]\n        \n        # Create a dictionary to store the count of each number in nums1 and nums2\n        nums1_dict = {}\n        for num in nums1:\n            if num in nums1_dict:\n                nums1_dict[num] += 1\n            else:\n                nums1_dict[num] = 1\n        \n        nums2_dict = {}\n        for num in nums2:\n            if num in nums2_dict:\n                nums2_dict[num] += 1\n            else:\n                nums2_dict[num] = 1\n        \n        # Initialize an empty list to store the intersection\n        intersection = []\n        \n        # Iterate over all possible integers\n        for num in all_nums:\n            # Check if the number exists in both dictionaries and its count is greater than 0\n            if num in nums1_dict and num in nums2_dict and nums1_dict[num] > 0 and nums2_dict[num] > 0:\n                # Add the number to the intersection list\n                intersection.append(num)\n                # Decrement the count of the number in both dictionaries\n                nums1_dict[num] -= 1\n                nums2_dict[num] -= 1\n        \n        # Return the intersection list\n        return intersection\n\n### Efficient Solution:\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        cnt1 = Counter(nums1)\n        cnt2 = Counter(nums2)\n        return list((cnt1 & cnt2).keys())\n",
    "model_solution": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        cnt1 = Counter(nums1)\n        cnt2 = Counter(nums2)\n        return list((cnt1 & cnt2).keys())"
}