{
    "problem_idx": "2246",
    "description": "\nYou are given a **tree** (i.e. a connected, undirected graph that has no cycles) **rooted** at node `0` consisting of `n` nodes numbered from `0` to `n - 1`. The tree is represented by a **0-indexed** array `parent` of size `n`, where `parent[i]` is the parent of node `i`. Since node `0` is the root, `parent[0] == -1`.\n\n\nYou are also given a string `s` of length `n`, where `s[i]` is the character assigned to node `i`.\n\n\nReturn *the length of the **longest path** in the tree such that no pair of **adjacent** nodes on the path have the same character assigned to them.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2246.Longest%20Path%20With%20Different%20Adjacent%20Characters/images/testingdrawio.png)\n\n```\n\n**Input:** parent = [-1,0,0,1,1,2], s = \"abacbe\"\n**Output:** 3\n**Explanation:** The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions. \n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2246.Longest%20Path%20With%20Different%20Adjacent%20Characters/images/graph2drawio.png)\n\n```\n\n**Input:** parent = [-1,0,0,0], s = \"aabc\"\n**Output:** 3\n**Explanation:** The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == parent.length == s.length`\n* `1 <= n <= 105`\n* `0 <= parent[i] <= n - 1` for all `i >= 1`\n* `parent[0] == -1`\n* `parent` represents a valid tree.\n* `s` consists of only lowercase English letters.\n\n\n",
    "inefficient_solution": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        n = len(parent)\n        nodes = [[] for _ in range(n)]\n        for i in range(1, n):\n            nodes[parent[i]].append(i)\n        nodes[0].append(-1)  # To avoid index out of range error\n\n        res = [0] * n\n        path_lengths = [0] * n\n        for i in range(n):\n            for j in nodes[i]:\n                path_lengths[j] = path_lengths[i] + 1\n            mx = 0\n            for j in nodes[i]:\n                if res[j] > mx:\n                    mx = res[j]\n            mx = max(mx, path_lengths[i])\n            res[i] = mx\n            mx = 0\n            for j in nodes[i]:\n                if s[i] != s[j]:\n                    mx = max(mx, path_lengths[j] + 1)\n            res[i] = max(res[i], mx)\n        return max(res)",
    "efficient_solution": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        def dfs(i: int) -> int:\n            mx = 0\n            nonlocal ans\n            for j in g[i]:\n                x = dfs(j) + 1\n                if s[i] != s[j]:\n                    ans = max(ans, mx + x)\n                    mx = max(mx, x)\n            return mx\n\n        g = defaultdict(list)\n        for i in range(1, len(parent)):\n            g[parent[i]].append(i)\n        ans = 0\n        dfs(0)\n        return ans + 1\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a **tree** (i.e. a connected, undirected graph that has no cycles) **rooted** at node `0` consisting of `n` nodes numbered from `0` to `n - 1`. The tree is represented by a **0-indexed** array `parent` of size `n`, where `parent[i]` is the parent of node `i`. Since node `0` is the root, `parent[0] == -1`.\n\n\nYou are also given a string `s` of length `n`, where `s[i]` is the character assigned to node `i`.\n\n\nReturn *the length of the **longest path** in the tree such that no pair of **adjacent** nodes on the path have the same character assigned to them.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2246.Longest%20Path%20With%20Different%20Adjacent%20Characters/images/testingdrawio.png)\n\n```\n\n**Input:** parent = [-1,0,0,1,1,2], s = \"abacbe\"\n**Output:** 3\n**Explanation:** The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions. \n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2246.Longest%20Path%20With%20Different%20Adjacent%20Characters/images/graph2drawio.png)\n\n```\n\n**Input:** parent = [-1,0,0,0], s = \"aabc\"\n**Output:** 3\n**Explanation:** The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == parent.length == s.length`\n* `1 <= n <= 105`\n* `0 <= parent[i] <= n - 1` for all `i >= 1`\n* `parent[0] == -1`\n* `parent` represents a valid tree.\n* `s` consists of only lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        n = len(parent)\n        nodes = [[] for _ in range(n)]\n        for i in range(1, n):\n            nodes[parent[i]].append(i)\n        nodes[0].append(-1)  # To avoid index out of range error\n\n        res = [0] * n\n        path_lengths = [0] * n\n        for i in range(n):\n            for j in nodes[i]:\n                path_lengths[j] = path_lengths[i] + 1\n            mx = 0\n            for j in nodes[i]:\n                if res[j] > mx:\n                    mx = res[j]\n            mx = max(mx, path_lengths[i])\n            res[i] = mx\n            mx = 0\n            for j in nodes[i]:\n                if s[i] != s[j]:\n                    mx = max(mx, path_lengths[j] + 1)\n            res[i] = max(res[i], mx)\n        return max(res)\n\n### Efficient Solution:\nclass Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        def dfs(i: int) -> int:\n            mx = 0\n            nonlocal ans\n            for j in g[i]:\n                x = dfs(j) + 1\n                if s[i] != s[j]:\n                    ans = max(ans, mx + x)\n                    mx = max(mx, x)\n            return mx\n\n        g = defaultdict(list)\n        for i in range(1, len(parent)):\n            g[parent[i]].append(i)\n        ans = 0\n        dfs(0)\n        return ans + 1\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a **tree** (i.e. a connected, undirected graph that has no cycles) **rooted** at node `0` consisting of `n` nodes numbered from `0` to `n - 1`. The tree is represented by a **0-indexed** array `parent` of size `n`, where `parent[i]` is the parent of node `i`. Since node `0` is the root, `parent[0] == -1`.\n\n\nYou are also given a string `s` of length `n`, where `s[i]` is the character assigned to node `i`.\n\n\nReturn *the length of the **longest path** in the tree such that no pair of **adjacent** nodes on the path have the same character assigned to them.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2246.Longest%20Path%20With%20Different%20Adjacent%20Characters/images/testingdrawio.png)\n\n```\n\n**Input:** parent = [-1,0,0,1,1,2], s = \"abacbe\"\n**Output:** 3\n**Explanation:** The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.\nIt can be proven that there is no longer path that satisfies the conditions. \n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2246.Longest%20Path%20With%20Different%20Adjacent%20Characters/images/graph2drawio.png)\n\n```\n\n**Input:** parent = [-1,0,0,0], s = \"aabc\"\n**Output:** 3\n**Explanation:** The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == parent.length == s.length`\n* `1 <= n <= 105`\n* `0 <= parent[i] <= n - 1` for all `i >= 1`\n* `parent[0] == -1`\n* `parent` represents a valid tree.\n* `s` consists of only lowercase English letters.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        n = len(parent)\n        nodes = [[] for _ in range(n)]\n        for i in range(1, n):\n            nodes[parent[i]].append(i)\n        nodes[0].append(-1)  # To avoid index out of range error\n\n        res = [0] * n\n        path_lengths = [0] * n\n        for i in range(n):\n            for j in nodes[i]:\n                path_lengths[j] = path_lengths[i] + 1\n            mx = 0\n            for j in nodes[i]:\n                if res[j] > mx:\n                    mx = res[j]\n            mx = max(mx, path_lengths[i])\n            res[i] = mx\n            mx = 0\n            for j in nodes[i]:\n                if s[i]!= s[j]:\n                    mx = max(mx, path_lengths[j] + 1)\n            res[i] = max(res[i], mx)\n        return max(res)\n\n### Efficient Solution:\nclass Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        n = len(parent)\n        nodes = [[] for _ in range(n)]\n        for i in range(1, n):\n            nodes[parent[i]].append(i)\n        res = [1] * n\n        for i in range(n):\n            for j in nodes[i]:\n                res[i] = max(res[i], res[j] + 1)\n                if s[i]!= s[j]:\n                    res[i] = max(res[i], res[j] + 2)\n        return max(res)\n",
    "model_solution": "class Solution:\n    def longestPath(self, parent: List[int], s: str) -> int:\n        n = len(parent)\n        nodes = [[] for _ in range(n)]\n        for i in range(1, n):\n            nodes[parent[i]].append(i)\n        res = [1] * n\n        for i in range(n):\n            for j in nodes[i]:\n                res[i] = max(res[i], res[j] + 1)\n                if s[i]!= s[j]:\n                    res[i] = max(res[i], res[j] + 2)\n        return max(res)"
}