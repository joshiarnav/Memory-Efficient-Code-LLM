{
    "problem_idx": "698",
    "description": "\nGiven an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,3,5,2,1], k = 4\n**Output:** true\n**Explanation:** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], k = 3\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 16`\n* `1 <= nums[i] <= 104`\n* The frequency of each element is in the range `[1, 4]`.\n\n\n",
    "inefficient_solution": "class Solution:\n    def canPartitionKSubsets(self, nums, k):\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                cur = cur.copy()\n                cur[j] += nums[i]\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] += nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] += nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        for _ in range(len(nums) * 2):\n            cur = cur + [0] * k\n        nums = nums + [0] * (len(nums) * 2)\n        nums.sort(reverse=True)\n        return dfs(0)",
    "efficient_solution": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                cur[j] += nums[i]\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        nums.sort(reverse=True)\n        return dfs(0)\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,3,5,2,1], k = 4\n**Output:** true\n**Explanation:** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], k = 3\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 16`\n* `1 <= nums[i] <= 104`\n* The frequency of each element is in the range `[1, 4]`.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def canPartitionKSubsets(self, nums, k):\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                cur = cur.copy()\n                cur[j] += nums[i]\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] += nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] += nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        for _ in range(len(nums) * 2):\n            cur = cur + [0] * k\n        nums = nums + [0] * (len(nums) * 2)\n        nums.sort(reverse=True)\n        return dfs(0)\n\n### Efficient Solution:\nclass Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                cur[j] += nums[i]\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        nums.sort(reverse=True)\n        return dfs(0)\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,3,5,2,1], k = 4\n**Output:** true\n**Explanation:** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], k = 3\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 16`\n* `1 <= nums[i] <= 104`\n* The frequency of each element is in the range `[1, 4]`.\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def canPartitionKSubsets(self, nums, k):\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                cur = cur.copy()\n                cur[j] += nums[i]\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] += nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] += nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        for _ in range(len(nums) * 2):\n            cur = cur + [0] * k\n        nums = nums + [0] * (len(nums) * 2)\n        nums.sort(reverse=True)\n        return dfs(0)\n\n### Efficient Solution:\nclass Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                if s[j] + nums[i] <= s and dfs(i + 1):\n                    return True\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        nums.sort(reverse=True)\n        return dfs(0)\n",
    "model_solution": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                if s[j] + nums[i] <= s and dfs(i + 1):\n                    return True\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        nums.sort(reverse=True)\n        return dfs(0)"
}