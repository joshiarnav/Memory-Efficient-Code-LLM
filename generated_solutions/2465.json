{
    "problem_idx": "2465",
    "description": "\nYou are given a **0-indexed** integer array `nums` of **even** length.\n\n\nAs long as `nums` is **not** empty, you must repetitively:\n\n\n* Find the minimum number in `nums` and remove it.\n* Find the maximum number in `nums` and remove it.\n* Calculate the average of the two removed numbers.\n\n\nThe **average** of two numbers `a` and `b` is `(a + b) / 2`.\n\n\n* For example, the average of `2` and `3` is `(2 + 3) / 2 = 2.5`.\n\n\nReturn *the number of **distinct** averages calculated using the above process*.\n\n\n**Note** that when there is a tie for a minimum or maximum number, any can be removed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,1,4,0,3,5]\n**Output:** 2\n**Explanation:**\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,100]\n**Output:** 1\n**Explanation:**\nThere is only one average to be calculated after removing 1 and 100, so we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `nums.length` is even.\n* `0 <= nums[i] <= 100`\n\n\n",
    "inefficient_solution": "class Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n        averages = set()\n        while len(nums) > 0:\n            min_num = min(nums)\n            max_num = max(nums)\n            nums.remove(min_num)\n            nums.remove(max_num)\n            average = (min_num + max_num) / 2\n            averages.add(average)\n        \n        return len(averages)",
    "efficient_solution": "class Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n        nums.sort()\n        return len(set(nums[i] + nums[-i - 1] for i in range(len(nums) >> 1)))\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a **0-indexed** integer array `nums` of **even** length.\n\n\nAs long as `nums` is **not** empty, you must repetitively:\n\n\n* Find the minimum number in `nums` and remove it.\n* Find the maximum number in `nums` and remove it.\n* Calculate the average of the two removed numbers.\n\n\nThe **average** of two numbers `a` and `b` is `(a + b) / 2`.\n\n\n* For example, the average of `2` and `3` is `(2 + 3) / 2 = 2.5`.\n\n\nReturn *the number of **distinct** averages calculated using the above process*.\n\n\n**Note** that when there is a tie for a minimum or maximum number, any can be removed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,1,4,0,3,5]\n**Output:** 2\n**Explanation:**\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,100]\n**Output:** 1\n**Explanation:**\nThere is only one average to be calculated after removing 1 and 100, so we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `nums.length` is even.\n* `0 <= nums[i] <= 100`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n        averages = set()\n        while len(nums) > 0:\n            min_num = min(nums)\n            max_num = max(nums)\n            nums.remove(min_num)\n            nums.remove(max_num)\n            average = (min_num + max_num) / 2\n            averages.add(average)\n        \n        return len(averages)\n\n### Efficient Solution:\nclass Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n        nums.sort()\n        return len(set(nums[i] + nums[-i - 1] for i in range(len(nums) >> 1)))\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a **0-indexed** integer array `nums` of **even** length.\n\n\nAs long as `nums` is **not** empty, you must repetitively:\n\n\n* Find the minimum number in `nums` and remove it.\n* Find the maximum number in `nums` and remove it.\n* Calculate the average of the two removed numbers.\n\n\nThe **average** of two numbers `a` and `b` is `(a + b) / 2`.\n\n\n* For example, the average of `2` and `3` is `(2 + 3) / 2 = 2.5`.\n\n\nReturn *the number of **distinct** averages calculated using the above process*.\n\n\n**Note** that when there is a tie for a minimum or maximum number, any can be removed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,1,4,0,3,5]\n**Output:** 2\n**Explanation:**\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,100]\n**Output:** 1\n**Explanation:**\nThere is only one average to be calculated after removing 1 and 100, so we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 100`\n* `nums.length` is even.\n* `0 <= nums[i] <= 100`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n        averages = set()\n        while len(nums) > 0:\n            min_num = min(nums)\n            max_num = max(nums)\n            nums.remove(min_num)\n            nums.remove(max_num)\n            average = (min_num + max_num) / 2\n            averages.add(average)\n        \n        return len(averages)\n\n### Efficient Solution:\nclass Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n        nums.sort()\n        ans, n = 0, len(nums)\n        for i, j in pairwise(nums[::-1]):\n            ans += (i + j) / 2\n        return ans\n",
    "model_solution": "class Solution:\n    def distinctAverages(self, nums: List[int]) -> int:\n        nums.sort()\n        ans, n = 0, len(nums)\n        for i, j in pairwise(nums[::-1]):\n            ans += (i + j) / 2\n        return ans"
}