{
    "problem_idx": "2940",
    "description": "\nYou are given a **0-indexed** array `heights` of positive integers, where `heights[i]` represents the height of the `ith` building.\n\n\nIf a person is in building `i`, they can move to any other building `j` if and only if `i < j` and `heights[i] < heights[j]`.\n\n\nYou are also given another array `queries` where `queries[i] = [ai, bi]`. On the `ith` query, Alice is in building `ai` while Bob is in building `bi`.\n\n\nReturn *an array* `ans` *where* `ans[i]` *is **the index of the leftmost building** where Alice and Bob can meet on the* `ith` *query*. *If Alice and Bob cannot move to a common building on query* `i`, *set* `ans[i]` *to* `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]\n**Output:** [2,5,-1,5,2]\n**Explanation:** In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. \nIn the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. \nIn the third query, Alice cannot meet Bob since Alice cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].\nIn the fifth query, Alice and Bob are already in the same building.  \nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]\n**Output:** [7,6,-1,4,6]\n**Explanation:** In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].\nIn the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].\nIn the third query, Alice cannot meet Bob since Bob cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].\nIn the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].\nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= heights.length <= 5 * 104`\n* `1 <= heights[i] <= 109`\n* `1 <= queries.length <= 5 * 104`\n* `queries[i] = [ai, bi]`\n* `0 <= ai, bi <= heights.length - 1`\n\n\n",
    "inefficient_solution": "class Solution:\n    def leftmostBuildingQueries(self, heights, queries):\n        n = len(heights)\n        m = len(queries)\n        for i in range(m):\n            queries[i].append(i)\n        heights = [[h, i] for i, h in enumerate(heights)]\n        heights.sort()\n        queries.sort(key=lambda x: x[2])\n        ans = [-1] * m\n        tree1 = {}\n        tree2 = {}\n        for i, (h, j) in enumerate(heights):\n            tree1[h] = i\n            tree2[h] = j\n        for i, (l, r, idx) in enumerate(queries):\n            while True:\n                if l in tree1 and tree1[l] <= tree2[r]:\n                    if any(tree2[h] > r for h in range(l + 1, r + 1) if h in tree1):\n                        ans[idx] = r\n                        break\n                    else:\n                        l = r\n                        r = tree2[r]\n                else:\n                    break\n            if ans[idx] != -1:\n                break\n        return ans",
    "efficient_solution": "class BinaryIndexedTree:\n    __slots__ = [\"n\", \"c\"]\n\n    def __init__(self, n: int):\n        self.n = n\n        self.c = [inf] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] = min(self.c[x], v)\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        mi = inf\n        while x:\n            mi = min(mi, self.c[x])\n            x -= x & -x\n        return -1 if mi == inf else mi\n\n\nclass Solution:\n    def leftmostBuildingQueries(\n        self, heights: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        n, m = len(heights), len(queries)\n        for i in range(m):\n            queries[i] = [min(queries[i]), max(queries[i])]\n        j = n - 1\n        s = sorted(set(heights))\n        ans = [-1] * m\n        tree = BinaryIndexedTree(n)\n        for i in sorted(range(m), key=lambda i: -queries[i][1]):\n            l, r = queries[i]\n            while j > r:\n                k = n - bisect_left(s, heights[j]) + 1\n                tree.update(k, j)\n                j -= 1\n            if l == r or heights[l] < heights[r]:\n                ans[i] = r\n            else:\n                k = n - bisect_left(s, heights[l])\n                ans[i] = tree.query(k)\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a **0-indexed** array `heights` of positive integers, where `heights[i]` represents the height of the `ith` building.\n\n\nIf a person is in building `i`, they can move to any other building `j` if and only if `i < j` and `heights[i] < heights[j]`.\n\n\nYou are also given another array `queries` where `queries[i] = [ai, bi]`. On the `ith` query, Alice is in building `ai` while Bob is in building `bi`.\n\n\nReturn *an array* `ans` *where* `ans[i]` *is **the index of the leftmost building** where Alice and Bob can meet on the* `ith` *query*. *If Alice and Bob cannot move to a common building on query* `i`, *set* `ans[i]` *to* `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]\n**Output:** [2,5,-1,5,2]\n**Explanation:** In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. \nIn the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. \nIn the third query, Alice cannot meet Bob since Alice cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].\nIn the fifth query, Alice and Bob are already in the same building.  \nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]\n**Output:** [7,6,-1,4,6]\n**Explanation:** In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].\nIn the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].\nIn the third query, Alice cannot meet Bob since Bob cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].\nIn the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].\nFor ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= heights.length <= 5 * 104`\n* `1 <= heights[i] <= 109`\n* `1 <= queries.length <= 5 * 104`\n* `queries[i] = [ai, bi]`\n* `0 <= ai, bi <= heights.length - 1`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def leftmostBuildingQueries(self, heights, queries):\n        n = len(heights)\n        m = len(queries)\n        for i in range(m):\n            queries[i].append(i)\n        heights = [[h, i] for i, h in enumerate(heights)]\n        heights.sort()\n        queries.sort(key=lambda x: x[2])\n        ans = [-1] * m\n        tree1 = {}\n        tree2 = {}\n        for i, (h, j) in enumerate(heights):\n            tree1[h] = i\n            tree2[h] = j\n        for i, (l, r, idx) in enumerate(queries):\n            while True:\n                if l in tree1 and tree1[l] <= tree2[r]:\n                    if any(tree2[h] > r for h in range(l + 1, r + 1) if h in tree1):\n                        ans[idx] = r\n                        break\n                    else:\n                        l = r\n                        r = tree2[r]\n                else:\n                    break\n            if ans[idx] != -1:\n                break\n        return ans\n\n### Efficient Solution:\nclass BinaryIndexedTree:\n    __slots__ = [\"n\", \"c\"]\n\n    def __init__(self, n: int):\n        self.n = n\n        self.c = [inf] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] = min(self.c[x], v)\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        mi = inf\n        while x:\n            mi = min(mi, self.c[x])\n            x -= x & -x\n        return -1 if mi == inf else mi\n\n\nclass Solution:\n    def leftmostBuildingQueries(\n        self, heights: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        n, m = len(heights), len(queries)\n        for i in range(m):\n            queries[i] = [min(queries[i]), max(queries[i])]\n        j = n - 1\n        s = sorted(set(heights))\n        ans = [-1] * m\n        tree = BinaryIndexedTree(n)\n        for i in sorted(range(m), key=lambda i: -queries[i][1]):\n            l, r = queries[i]\n            while j > r:\n                k = n - bisect_left(s, heights[j]) + 1\n                tree.update(k, j)\n                j -= 1\n            if l == r or heights[l] < heights[r]:\n                ans[i] = r\n            else:\n                k = n - bisect_left(s, heights[l])\n                ans[i] = tree.query(k)\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given a **0-indexed** array `heights` of positive integers, where `heights[i]` represents the height of the `ith` building.\n\n\nIf a person is in building `i`, they can move to any other building `j` if and only if `i < j` and `heights[i] < heights[j]`.\n\n\nYou are also given another array `queries` where `queries[i] = [ai, bi]`. On the `ith` query, Alice is in building `ai` while Bob is in building `bi`.\n\n\nReturn *an array* `ans` *where* `ans[i]` *is **the index of the leftmost building** where Alice and Bob can meet on the* `ith` *query*. *If Alice and Bob cannot move to a common building on query* `i`, *set* `ans[i]` *to* `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]\n**Output:** [2,5,-1,5,2]\n**Explanation:** In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. \nIn the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. \nIn the third query, Alice cannot meet Bob since Alice cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].\nIn the fifth query, Alice and Bob are already in the same building.  \nFor ans[i]!= -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]\n**Output:** [7,6,-1,4,6]\n**Explanation:** In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].\nIn the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].\nIn the third query, Alice cannot meet Bob since Bob cannot move to any other building.\nIn the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].\nIn the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].\nFor ans[i]!= -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.\nFor ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= heights.length <= 5 * 104`\n* `1 <= heights[i] <= 109`\n* `1 <= queries.length <= 5 * 104`\n* `queries[i] = [ai, bi]`\n* `0 <= ai, bi <= heights.length - 1`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def leftmostBuildingQueries(self, heights, queries):\n        n = len(heights)\n        m = len(queries)\n        for i in range(m):\n            queries[i].append(i)\n        heights = [[h, i] for i, h in enumerate(heights)]\n        heights.sort()\n        queries.sort(key=lambda x: x[2])\n        ans = [-1] * m\n        tree1 = {}\n        tree2 = {}\n        for i, (h, j) in enumerate(heights):\n            tree1[h] = i\n            tree2[h] = j\n        for i, (l, r, idx) in enumerate(queries):\n            while True:\n                if l in tree1 and tree1[l] <= tree2[r]:\n                    if any(tree2[h] > r for h in range(l + 1, r + 1) if h in tree1):\n                        ans[idx] = r\n                        break\n                    else:\n                        l = r\n                        r = tree2[r]\n                else:\n                    break\n            if ans[idx]!= -1:\n                break\n        return ans\n\n### Efficient Solution:\nclass Solution:\n    def leftmostBuildingQueries(\n        self, heights: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        n = len(heights)\n        m = len(queries)\n        ans = [-1] * m\n        tree = []\n        for l, r in sorted((x[-1], i) for i, x in enumerate(queries)):\n            while tree and heights[tree[-1]] < heights[r]:\n                tree.pop()\n            if tree:\n                ans[r] = tree[-1]\n            tree.append(l)\n        return ans\n",
    "model_solution": "class Solution:\n    def leftmostBuildingQueries(\n        self, heights: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        n = len(heights)\n        m = len(queries)\n        ans = [-1] * m\n        tree = []\n        for l, r in sorted((x[-1], i) for i, x in enumerate(queries)):\n            while tree and heights[tree[-1]] < heights[r]:\n                tree.pop()\n            if tree:\n                ans[r] = tree[-1]\n            tree.append(l)\n        return ans"
}