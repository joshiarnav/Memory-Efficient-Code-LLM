{
    "problem_idx": "530",
    "description": "\nGiven the `root` of a Binary Search Tree (BST), return *the minimum absolute difference between the values of any two different nodes in the tree*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/images/bst1.jpg)\n\n```\n\n**Input:** root = [4,2,6,1,3]\n**Output:** 1\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/images/bst2.jpg)\n\n```\n\n**Input:** root = [1,0,48,null,null,12,49]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[2, 104]`.\n* `0 <= Node.val <= 105`\n\n\n\u00a0\n\n\n**Note:** This question is the same as 783: <https://leetcode.com/problems/minimum-distance-between-bst-nodes/>\n\n\n",
    "inefficient_solution": "",
    "efficient_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return\n            dfs(root.left)\n            nonlocal ans, prev\n            ans = min(ans, abs(prev - root.val))\n            prev = root.val\n            dfs(root.right)\n\n        ans = prev = inf\n        dfs(root)\n        return ans\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven the `root` of a Binary Search Tree (BST), return *the minimum absolute difference between the values of any two different nodes in the tree*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/images/bst1.jpg)\n\n```\n\n**Input:** root = [4,2,6,1,3]\n**Output:** 1\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/images/bst2.jpg)\n\n```\n\n**Input:** root = [1,0,48,null,null,12,49]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[2, 104]`.\n* `0 <= Node.val <= 105`\n\n\n\u00a0\n\n\n**Note:** This question is the same as 783: <https://leetcode.com/problems/minimum-distance-between-bst-nodes/>\n\n\n\n\n### Inefficient Solution:\n\n\n### Efficient Solution:\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return\n            dfs(root.left)\n            nonlocal ans, prev\n            ans = min(ans, abs(prev - root.val))\n            prev = root.val\n            dfs(root.right)\n\n        ans = prev = inf\n        dfs(root)\n        return ans\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven the `root` of a Binary Search Tree (BST), return *the minimum absolute difference between the values of any two different nodes in the tree*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/images/bst1.jpg)\n\n```\n\n**Input:** root = [4,2,6,1,3]\n**Output:** 1\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/images/bst2.jpg)\n\n```\n\n**Input:** root = [1,0,48,null,null,12,49]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[2, 104]`.\n* `0 <= Node.val <= 105`\n\n\n\u00a0\n\n\n**Note:** This question is the same as 783: <https://leetcode.com/problems/minimum-distance-between-bst-nodes/>\n\n\n\n\n### Inefficient Solution:\n\n\n### Efficient Solution:\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            nonlocal ans\n            if root is None:\n                return\n            dfs(root.left)\n            if s[-1]!= -float('inf'):\n                ans = min(ans, abs(s[-1] - root.val))\n            s.append(root.val)\n            dfs(root.right)\n            s.pop()\n\n        s = [-float('inf')]\n        ans = float('inf')\n        dfs(root)\n        return ans\n",
    "model_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            nonlocal ans\n            if root is None:\n                return\n            dfs(root.left)\n            if s[-1]!= -float('inf'):\n                ans = min(ans, abs(s[-1] - root.val))\n            s.append(root.val)\n            dfs(root.right)\n            s.pop()\n\n        s = [-float('inf')]\n        ans = float('inf')\n        dfs(root)\n        return ans"
}