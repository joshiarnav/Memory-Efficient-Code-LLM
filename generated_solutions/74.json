{
    "problem_idx": "74",
    "description": "\nYou are given an `m x n` integer matrix `matrix` with the following two properties:\n\n\n* Each row is sorted in non-decreasing order.\n* The first integer of each row is greater than the last integer of the previous row.\n\n\nGiven an integer `target`, return `true` *if* `target` *is in* `matrix` *or* `false` *otherwise*.\n\n\nYou must write a solution in `O(log(m * n))` time complexity.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0074.Search%20a%202D%20Matrix/images/mat.jpg)\n\n```\n\n**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0074.Search%20a%202D%20Matrix/images/mat2.jpg)\n\n```\n\n**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == matrix.length`\n* `n == matrix[i].length`\n* `1 <= m, n <= 100`\n* `-104 <= matrix[i][j], target <= 104`\n\n\n",
    "inefficient_solution": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        total_elements = m * n\n\n        # Create a list of all elements in the matrix\n        all_elements = []\n        for row in matrix:\n            all_elements.extend(row)\n\n        # Create a list of indices for each element in the matrix\n        indices = []\n        for i in range(total_elements):\n            indices.append([i // n, i % n])\n\n        # Iterate over all elements in the matrix\n        for i in range(total_elements):\n            # Check if the current element is equal to the target\n            if all_elements[i] == target:\n                return True\n\n        # If the target is not found\n        return False",
    "efficient_solution": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left < right:\n            mid = (left + right) >> 1\n            x, y = divmod(mid, n)\n            if matrix[x][y] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return matrix[left // n][left % n] == target\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an `m x n` integer matrix `matrix` with the following two properties:\n\n\n* Each row is sorted in non-decreasing order.\n* The first integer of each row is greater than the last integer of the previous row.\n\n\nGiven an integer `target`, return `true` *if* `target` *is in* `matrix` *or* `false` *otherwise*.\n\n\nYou must write a solution in `O(log(m * n))` time complexity.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0074.Search%20a%202D%20Matrix/images/mat.jpg)\n\n```\n\n**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0074.Search%20a%202D%20Matrix/images/mat2.jpg)\n\n```\n\n**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == matrix.length`\n* `n == matrix[i].length`\n* `1 <= m, n <= 100`\n* `-104 <= matrix[i][j], target <= 104`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        total_elements = m * n\n\n        # Create a list of all elements in the matrix\n        all_elements = []\n        for row in matrix:\n            all_elements.extend(row)\n\n        # Create a list of indices for each element in the matrix\n        indices = []\n        for i in range(total_elements):\n            indices.append([i // n, i % n])\n\n        # Iterate over all elements in the matrix\n        for i in range(total_elements):\n            # Check if the current element is equal to the target\n            if all_elements[i] == target:\n                return True\n\n        # If the target is not found\n        return False\n\n### Efficient Solution:\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left < right:\n            mid = (left + right) >> 1\n            x, y = divmod(mid, n)\n            if matrix[x][y] >= target:\n                right = mid\n            else:\n                left = mid + 1\n        return matrix[left // n][left % n] == target\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are given an `m x n` integer matrix `matrix` with the following two properties:\n\n\n* Each row is sorted in non-decreasing order.\n* The first integer of each row is greater than the last integer of the previous row.\n\n\nGiven an integer `target`, return `true` *if* `target` *is in* `matrix` *or* `false` *otherwise*.\n\n\nYou must write a solution in `O(log(m * n))` time complexity.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0074.Search%20a%202D%20Matrix/images/mat.jpg)\n\n```\n\n**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0074.Search%20a%202D%20Matrix/images/mat2.jpg)\n\n```\n\n**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == matrix.length`\n* `n == matrix[i].length`\n* `1 <= m, n <= 100`\n* `-104 <= matrix[i][j], target <= 104`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        total_elements = m * n\n\n        # Create a list of all elements in the matrix\n        all_elements = []\n        for row in matrix:\n            all_elements.extend(row)\n\n        # Create a list of indices for each element in the matrix\n        indices = []\n        for i in range(total_elements):\n            indices.append([i // n, i % n])\n\n        # Iterate over all elements in the matrix\n        for i in range(total_elements):\n            # Check if the current element is equal to the target\n            if all_elements[i] == target:\n                return True\n\n        # If the target is not found\n        return False\n\n### Efficient Solution:\nclass Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if matrix[mid // n][mid % n] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left < m * n and matrix[left // n][left % n] == target\n",
    "model_solution": "class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if matrix[mid // n][mid % n] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left < m * n and matrix[left // n][left % n] == target"
}