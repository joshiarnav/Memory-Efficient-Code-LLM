{
    "problem_idx": "532",
    "description": "\nGiven an array of integers `nums` and an integer `k`, return *the number of **unique** k-diff pairs in the array*.\n\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n\n* `0 <= i, j < nums.length`\n* `i != j`\n* `|nums[i] - nums[j]| == k`\n\n\n**Notice** that `|val|` denotes the absolute value of `val`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,4,1,5], k = 2\n**Output:** 2\n**Explanation:** There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of **unique** pairs.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 1\n**Output:** 4\n**Explanation:** There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,3,1,5,4], k = 0\n**Output:** 1\n**Explanation:** There is one 0-diff pair in the array, (1, 1).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-107 <= nums[i] <= 107`\n* `0 <= k <= 107`\n\n\n",
    "inefficient_solution": "class Solution:\n    def findPairs(self, nums, k):\n        count_dict = {}\n        for num in nums:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        pairs = set()\n        for key in count_dict.keys():\n            if k != 0:\n                if key - k in count_dict and key - k not in pairs:\n                    pairs.add((key, key - k))\n                    pairs.add((key - k, key))\n            else:\n                if key in pairs:\n                    pairs.add((key, key))\n        return len(pairs)",
    "efficient_solution": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        vis, ans = set(), set()\n        for v in nums:\n            if v - k in vis:\n                ans.add(v - k)\n            if v + k in vis:\n                ans.add(v)\n            vis.add(v)\n        return len(ans)\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven an array of integers `nums` and an integer `k`, return *the number of **unique** k-diff pairs in the array*.\n\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n\n* `0 <= i, j < nums.length`\n* `i != j`\n* `|nums[i] - nums[j]| == k`\n\n\n**Notice** that `|val|` denotes the absolute value of `val`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,4,1,5], k = 2\n**Output:** 2\n**Explanation:** There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of **unique** pairs.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 1\n**Output:** 4\n**Explanation:** There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,3,1,5,4], k = 0\n**Output:** 1\n**Explanation:** There is one 0-diff pair in the array, (1, 1).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-107 <= nums[i] <= 107`\n* `0 <= k <= 107`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def findPairs(self, nums, k):\n        count_dict = {}\n        for num in nums:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        pairs = set()\n        for key in count_dict.keys():\n            if k != 0:\n                if key - k in count_dict and key - k not in pairs:\n                    pairs.add((key, key - k))\n                    pairs.add((key - k, key))\n            else:\n                if key in pairs:\n                    pairs.add((key, key))\n        return len(pairs)\n\n### Efficient Solution:\nclass Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        vis, ans = set(), set()\n        for v in nums:\n            if v - k in vis:\n                ans.add(v - k)\n            if v + k in vis:\n                ans.add(v)\n            vis.add(v)\n        return len(ans)\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nGiven an array of integers `nums` and an integer `k`, return *the number of **unique** k-diff pairs in the array*.\n\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n\n* `0 <= i, j < nums.length`\n* `i!= j`\n* `|nums[i] - nums[j]| == k`\n\n\n**Notice** that `|val|` denotes the absolute value of `val`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,4,1,5], k = 2\n**Output:** 2\n**Explanation:** There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of **unique** pairs.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 1\n**Output:** 4\n**Explanation:** There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,3,1,5,4], k = 0\n**Output:** 1\n**Explanation:** There is one 0-diff pair in the array, (1, 1).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-107 <= nums[i] <= 107`\n* `0 <= k <= 107`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def findPairs(self, nums, k):\n        count_dict = {}\n        for num in nums:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        pairs = set()\n        for key in count_dict.keys():\n            if k!= 0:\n                if key - k in count_dict and key - k not in pairs:\n                    pairs.add((key, key - k))\n                    pairs.add((key - k, key))\n            else:\n                if key in pairs:\n                    pairs.add((key, key))\n        return len(pairs)\n\n### Efficient Solution:\nclass Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums)\n        ans = 0\n        for v in cnt.keys():\n            if k == 0:\n                if cnt[v] > 1:\n                    ans += 1\n            else:\n                if v + k in cnt:\n                    ans += 1\n        return ans\n",
    "model_solution": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums)\n        ans = 0\n        for v in cnt.keys():\n            if k == 0:\n                if cnt[v] > 1:\n                    ans += 1\n            else:\n                if v + k in cnt:\n                    ans += 1\n        return ans"
}