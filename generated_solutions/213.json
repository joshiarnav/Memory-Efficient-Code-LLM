{
    "problem_idx": "213",
    "description": "\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0**it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,2]\n**Output:** 3\n**Explanation:** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1]\n**Output:** 4\n**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 1000`\n\n\n",
    "inefficient_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            dp = [0] * (len(nums) + 1)\n            for i in range(1, len(nums) + 1):\n                for j in range(i):\n                    dp[i] = max(dp[i], dp[j] + nums[j])\n            return max(dp[-1], dp[-2])\n\n        if len(nums) == 1:\n            dp = [0] * (len(nums) + 1)\n            for i in range(len(nums)):\n                dp[i + 1] = nums[i]\n            return max(dp)\n        return max(_rob(nums[1:]), _rob(nums[:-1]))",
    "efficient_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            f = g = 0\n            for x in nums:\n                f, g = max(f, g), f + x\n            return max(f, g)\n\n        if len(nums) == 1:\n            return nums[0]\n        return max(_rob(nums[1:]), _rob(nums[:-1]))\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0**it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,2]\n**Output:** 3\n**Explanation:** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1]\n**Output:** 4\n**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 1000`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            dp = [0] * (len(nums) + 1)\n            for i in range(1, len(nums) + 1):\n                for j in range(i):\n                    dp[i] = max(dp[i], dp[j] + nums[j])\n            return max(dp[-1], dp[-2])\n\n        if len(nums) == 1:\n            dp = [0] * (len(nums) + 1)\n            for i in range(len(nums)):\n                dp[i + 1] = nums[i]\n            return max(dp)\n        return max(_rob(nums[1:]), _rob(nums[:-1]))\n\n### Efficient Solution:\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            f = g = 0\n            for x in nums:\n                f, g = max(f, g), f + x\n            return max(f, g)\n\n        if len(nums) == 1:\n            return nums[0]\n        return max(_rob(nums[1:]), _rob(nums[:-1]))\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0**it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,2]\n**Output:** 3\n**Explanation:** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1]\n**Output:** 4\n**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 1000`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            dp = [0] * (len(nums) + 1)\n            for i in range(1, len(nums) + 1):\n                for j in range(i):\n                    dp[i] = max(dp[i], dp[j] + nums[j])\n            return max(dp[-1], dp[-2])\n\n        if len(nums) == 1:\n            dp = [0] * (len(nums) + 1)\n            for i in range(len(nums)):\n                dp[i + 1] = nums[i]\n            return max(dp)\n        return max(_rob(nums[1:]), _rob(nums[:-1]))\n\n### Efficient Solution:\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            f = g = 0\n            for x in nums:\n                f, g = max(f, g), f + x\n            return max(f, g)\n\n        if len(nums) == 1:\n            return nums[0]\n        return max(_rob(nums[1:]), _rob(nums[:-1]))\n",
    "model_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            f = g = 0\n            for x in nums:\n                f, g = max(f, g), f + x\n            return max(f, g)\n\n        if len(nums) == 1:\n            return nums[0]\n        return max(_rob(nums[1:]), _rob(nums[:-1]))"
}