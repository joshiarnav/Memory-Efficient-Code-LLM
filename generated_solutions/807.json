{
    "problem_idx": "807",
    "description": "\nThere is a city composed of `n x n` blocks, where each block contains a single building shaped like a vertical square prism. You are given a **0-indexed** `n x n` integer matrix `grid` where `grid[r][c]` represents the **height** of the building located in the block at row `r` and column `c`.\n\n\nA city's **skyline** is the\u00a0outer contour formed by all the building when viewing the side of the city from a distance. The **skyline** from each cardinal direction north, east, south, and west may be different.\n\n\nWe are allowed to increase the height of **any number of buildings by any amount** (the amount can be different per building). The height of a `0`-height building can also be increased. However, increasing the height of a building should **not** affect the city's **skyline** from any cardinal direction.\n\n\nReturn *the **maximum total sum** that the height of the buildings can be increased by **without** changing the city's **skyline** from any cardinal direction*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0807.Max%20Increase%20to%20Keep%20City%20Skyline/images/807-ex1.png)\n\n```\n\n**Input:** grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n**Output:** 35\n**Explanation:** The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[0,0,0],[0,0,0],[0,0,0]]\n**Output:** 0\n**Explanation:** Increasing the height of any building will result in the skyline changing.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length`\n* `n == grid[r].length`\n* `2 <= n <= 50`\n* `0 <= grid[r][c] <= 100`\n\n\n",
    "inefficient_solution": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        row_max = [[0 for _ in range(n)] for _ in range(n)]\n        col_max = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(n):\n                row_max[i][j] = grid[i][j]\n\n        for j in range(n):\n            for i in range(n):\n                col_max[i][j] = grid[i][j]\n\n        for i in range(n):\n            for j in range(n):\n                max_val = max(row_max[i][j], col_max[i][j])\n                grid[i][j] = max_val\n\n        result = 0\n        for i in range(n):\n            for j in range(n):\n                result += row_max[i][j] - grid[i][j]\n\n        return result",
    "efficient_solution": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        rmx = [max(row) for row in grid]\n        cmx = [max(col) for col in zip(*grid)]\n        return sum(\n            (min(rmx[i], cmx[j]) - grid[i][j])\n            for i in range(len(grid))\n            for j in range(len(grid[0]))\n        )\n",
    "text": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nThere is a city composed of `n x n` blocks, where each block contains a single building shaped like a vertical square prism. You are given a **0-indexed** `n x n` integer matrix `grid` where `grid[r][c]` represents the **height** of the building located in the block at row `r` and column `c`.\n\n\nA city's **skyline** is the\u00a0outer contour formed by all the building when viewing the side of the city from a distance. The **skyline** from each cardinal direction north, east, south, and west may be different.\n\n\nWe are allowed to increase the height of **any number of buildings by any amount** (the amount can be different per building). The height of a `0`-height building can also be increased. However, increasing the height of a building should **not** affect the city's **skyline** from any cardinal direction.\n\n\nReturn *the **maximum total sum** that the height of the buildings can be increased by **without** changing the city's **skyline** from any cardinal direction*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0807.Max%20Increase%20to%20Keep%20City%20Skyline/images/807-ex1.png)\n\n```\n\n**Input:** grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n**Output:** 35\n**Explanation:** The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[0,0,0],[0,0,0],[0,0,0]]\n**Output:** 0\n**Explanation:** Increasing the height of any building will result in the skyline changing.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length`\n* `n == grid[r].length`\n* `2 <= n <= 50`\n* `0 <= grid[r][c] <= 100`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        row_max = [[0 for _ in range(n)] for _ in range(n)]\n        col_max = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(n):\n                row_max[i][j] = grid[i][j]\n\n        for j in range(n):\n            for i in range(n):\n                col_max[i][j] = grid[i][j]\n\n        for i in range(n):\n            for j in range(n):\n                max_val = max(row_max[i][j], col_max[i][j])\n                grid[i][j] = max_val\n\n        result = 0\n        for i in range(n):\n            for j in range(n):\n                result += row_max[i][j] - grid[i][j]\n\n        return result\n\n### Efficient Solution:\nclass Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        rmx = [max(row) for row in grid]\n        cmx = [max(col) for col in zip(*grid)]\n        return sum(\n            (min(rmx[i], cmx[j]) - grid[i][j])\n            for i in range(len(grid))\n            for j in range(len(grid[0]))\n        )\n<|eot_id|>",
    "model_generation": "Below is a programming problem description and an inefficient solution. Your task is to provide a more efficient solution.\n\n### Problem Description:\n\nThere is a city composed of `n x n` blocks, where each block contains a single building shaped like a vertical square prism. You are given a **0-indexed** `n x n` integer matrix `grid` where `grid[r][c]` represents the **height** of the building located in the block at row `r` and column `c`.\n\n\nA city's **skyline** is the\u00a0outer contour formed by all the building when viewing the side of the city from a distance. The **skyline** from each cardinal direction north, east, south, and west may be different.\n\n\nWe are allowed to increase the height of **any number of buildings by any amount** (the amount can be different per building). The height of a `0`-height building can also be increased. However, increasing the height of a building should **not** affect the city's **skyline** from any cardinal direction.\n\n\nReturn *the **maximum total sum** that the height of the buildings can be increased by **without** changing the city's **skyline** from any cardinal direction*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0807.Max%20Increase%20to%20Keep%20City%20Skyline/images/807-ex1.png)\n\n```\n\n**Input:** grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\n**Output:** 35\n**Explanation:** The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n            [7, 4, 7, 7],\n            [9, 4, 8, 7],\n            [3, 3, 3, 3] ]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[0,0,0],[0,0,0],[0,0,0]]\n**Output:** 0\n**Explanation:** Increasing the height of any building will result in the skyline changing.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length`\n* `n == grid[r].length`\n* `2 <= n <= 50`\n* `0 <= grid[r][c] <= 100`\n\n\n\n\n### Inefficient Solution:\nclass Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        row_max = [[0 for _ in range(n)] for _ in range(n)]\n        col_max = [[0 for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(n):\n                row_max[i][j] = grid[i][j]\n\n        for j in range(n):\n            for i in range(n):\n                col_max[i][j] = grid[i][j]\n\n        for i in range(n):\n            for j in range(n):\n                max_val = max(row_max[i][j], col_max[i][j])\n                grid[i][j] = max_val\n\n        result = 0\n        for i in range(n):\n            for j in range(n):\n                result += row_max[i][j] - grid[i][j]\n\n        return result\n\n### Efficient Solution:\nclass Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        row_max = max(grid, key=sum)\n        col_max = [max(col) for col in zip(*grid)]\n        return sum(min(a, b) for a, b in zip(row_max, col_max))\n",
    "model_solution": "class Solution:\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        row_max = max(grid, key=sum)\n        col_max = [max(col) for col in zip(*grid)]\n        return sum(min(a, b) for a, b in zip(row_max, col_max))"
}