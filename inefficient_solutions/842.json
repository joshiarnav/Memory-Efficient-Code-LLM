{
  "problem_idx": 842,
  "task_name": "Split Array into Fibonacci Sequence",
  "markdown_description": "\nYou are given a string of digits `num`, such as `\"123456579\"`. We can split it into a Fibonacci-like sequence `[123, 456, 579]`.\n\n\nFormally, a **Fibonacci-like** sequence is a list `f` of non-negative integers such that:\n\n\n* `0 <= f[i] < 231`, (that is, each integer fits in a **32-bit** signed integer type),\n* `f.length >= 3`, and\n* `f[i] + f[i + 1] == f[i + 2]` for all `0 <= i < f.length - 2`.\n\n\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number `0` itself.\n\n\nReturn any Fibonacci-like sequence split from `num`, or return `[]` if it cannot be done.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"1101111\"\n**Output:** [11,0,11,11]\n**Explanation:** The output [110, 1, 111] would also be accepted.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"112358130\"\n**Output:** []\n**Explanation:** The task is impossible.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"0123\"\n**Output:** []\n**Explanation:** Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 200`\n* `num` contains only digits.\n\n\n",
  "canonical_solution": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        def dfs(i):\n            if i == n:\n                return len(ans) > 2\n            x = 0\n            for j in range(i, n):\n                if j > i and num[i] == '0':\n                    break\n                x = x * 10 + int(num[j])\n                if x > 2**31 - 1 or (len(ans) > 2 and x > ans[-2] + ans[-1]):\n                    break\n                if len(ans) < 2 or ans[-2] + ans[-1] == x:\n                    ans.append(x)\n                    if dfs(j + 1):\n                        return True\n                    ans.pop()\n            return False\n\n        n = len(num)\n        ans = []\n        dfs(0)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        def dfs(i):\n            if i == n:\n                return len(ans) > 2\n            x = 0\n            for j in range(i, n):\n                if j > i and num[i] == '0':\n                    break\n                x = x * 10 + int(num[j])\n                if x > 2**31 - 1 or (len(ans) > 2 and x > ans[-2] + ans[-1]):\n                    break\n                if len(ans) < 2 or ans[-2] + ans[-1] == x:\n                    ans.append(x)\n                    if dfs(j + 1):\n                        return True\n                    ans.pop()\n            return False\n\n        n = len(num)\n        ans = []\n        dfs(0)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string of digits\n    num = ''.join(random.choice('0123456789') for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.splitIntoFibonacci(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.splitIntoFibonacci(num) == expected_result\n        print(f\"assert solution.splitIntoFibonacci({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.splitIntoFibonacci({num}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.splitIntoFibonacci(4257458) == []\nassert solution.splitIntoFibonacci(8692072) == []\nassert solution.splitIntoFibonacci(120) == []\nassert solution.splitIntoFibonacci(32) == []\nassert solution.splitIntoFibonacci(81) == []\nassert solution.splitIntoFibonacci(12167) == []\nassert solution.splitIntoFibonacci(53) == []\nassert solution.splitIntoFibonacci(56978735) == []\nassert solution.splitIntoFibonacci(4) == []\nassert solution.splitIntoFibonacci(995) == []\nassert solution.splitIntoFibonacci(353867757) == []\nassert solution.splitIntoFibonacci(629) == []\nassert solution.splitIntoFibonacci(4786967) == []\nassert solution.splitIntoFibonacci(3985965492) == []\nassert solution.splitIntoFibonacci(97) == []\nassert solution.splitIntoFibonacci(5678) == []\nassert solution.splitIntoFibonacci(04746) == []\nassert solution.splitIntoFibonacci(06995) == []\nassert solution.splitIntoFibonacci(46025407) == []\nassert solution.splitIntoFibonacci(9608) == []\nassert solution.splitIntoFibonacci(657015) == []\nassert solution.splitIntoFibonacci(9) == []\nassert solution.splitIntoFibonacci(06680616) == []\nassert solution.splitIntoFibonacci(0519545087) == []\nassert solution.splitIntoFibonacci(54839) == []\nassert solution.splitIntoFibonacci(881) == []\nassert solution.splitIntoFibonacci(25376713) == []\nassert solution.splitIntoFibonacci(52) == []\nassert solution.splitIntoFibonacci(6) == []\nassert solution.splitIntoFibonacci(6300216808) == []\nassert solution.splitIntoFibonacci(7) == []\nassert solution.splitIntoFibonacci(443) == []\nassert solution.splitIntoFibonacci(5) == []\nassert solution.splitIntoFibonacci(7808422) == []\nassert solution.splitIntoFibonacci(989515) == []\nassert solution.splitIntoFibonacci(1804562) == []\nassert solution.splitIntoFibonacci(21817) == []\nassert solution.splitIntoFibonacci(107) == []\nassert solution.splitIntoFibonacci(337) == []\nassert solution.splitIntoFibonacci(2) == []\nassert solution.splitIntoFibonacci(759) == []\nassert solution.splitIntoFibonacci(55716617) == []\nassert solution.splitIntoFibonacci(11) == []\nassert solution.splitIntoFibonacci(153) == []\nassert solution.splitIntoFibonacci(287081244) == []\nassert solution.splitIntoFibonacci(299) == []\nassert solution.splitIntoFibonacci(0713426) == []\nassert solution.splitIntoFibonacci(42636352) == []\nassert solution.splitIntoFibonacci(028706) == []\nassert solution.splitIntoFibonacci(1755237) == []\nassert solution.splitIntoFibonacci(314) == [3, 1, 4]\nassert solution.splitIntoFibonacci(8823) == []\nassert solution.splitIntoFibonacci(7659917107) == []\nassert solution.splitIntoFibonacci(6066885) == []\nassert solution.splitIntoFibonacci(5709) == []\nassert solution.splitIntoFibonacci(321133933) == []\nassert solution.splitIntoFibonacci(91) == []\nassert solution.splitIntoFibonacci(011) == [0, 1, 1]\nassert solution.splitIntoFibonacci(976574) == []\nassert solution.splitIntoFibonacci(9642125) == []\nassert solution.splitIntoFibonacci(03502) == []\nassert solution.splitIntoFibonacci(683) == []\nassert solution.splitIntoFibonacci(37) == []\nassert solution.splitIntoFibonacci(2) == []\nassert solution.splitIntoFibonacci(640913) == []\nassert solution.splitIntoFibonacci(82757) == []\nassert solution.splitIntoFibonacci(068347378) == []\nassert solution.splitIntoFibonacci(675430) == []\nassert solution.splitIntoFibonacci(35318606) == []\nassert solution.splitIntoFibonacci(3487) == []\nassert solution.splitIntoFibonacci(48261) == []\nassert solution.splitIntoFibonacci(2747464) == []\nassert solution.splitIntoFibonacci(542) == []\nassert solution.splitIntoFibonacci(731) == []\nassert solution.splitIntoFibonacci(544316) == []\nassert solution.splitIntoFibonacci(3) == []\nassert solution.splitIntoFibonacci(31) == []\nassert solution.splitIntoFibonacci(741) == []\nassert solution.splitIntoFibonacci(8242219653) == []\nassert solution.splitIntoFibonacci(242903093) == []\nassert solution.splitIntoFibonacci(2571) == []\nassert solution.splitIntoFibonacci(9808) == []\nassert solution.splitIntoFibonacci(642609932) == []\nassert solution.splitIntoFibonacci(6757786591) == []\nassert solution.splitIntoFibonacci(428) == []\nassert solution.splitIntoFibonacci(24305) == []\nassert solution.splitIntoFibonacci(797139611) == []\nassert solution.splitIntoFibonacci(639237) == []\nassert solution.splitIntoFibonacci(29065731) == []\nassert solution.splitIntoFibonacci(5833994302) == []\nassert solution.splitIntoFibonacci(4082) == []\nassert solution.splitIntoFibonacci(707439) == []\nassert solution.splitIntoFibonacci(11) == []\nassert solution.splitIntoFibonacci(7) == []\nassert solution.splitIntoFibonacci(6453) == []\nassert solution.splitIntoFibonacci(1769) == []\nassert solution.splitIntoFibonacci(040830059) == []\nassert solution.splitIntoFibonacci(1209553480) == []\nassert solution.splitIntoFibonacci(8) == []\nassert solution.splitIntoFibonacci(929986) == []",
  "inefficient_solution": "class Solution:\n    def splitIntoFibonacci(self, num: str) -> List[int]:\n        ans = []\n        for i in range(len(num)):\n            for j in range(i, len(num)):\n                for k in range(j, len(num)):\n                    for m in range(k, len(num)):\n                        for n in range(m, len(num)):\n                            for o in range(n, len(num)):\n                                x = int(num[i:j+1])\n                                y = int(num[j:k+1])\n                                z = int(num[k:m+1])\n                                w = int(num[m:n+1])\n                                t = int(num[n:o+1])\n                                v = int(num[o:])\n                                if x > 2**31 - 1 or y > 2**31 - 1 or z > 2**31 - 1 or w > 2**31 - 1 or t > 2**31 - 1 or v > 2**31 - 1:\n                                    break\n                                if x == 0 and y == 0 and z == 0:\n                                    continue\n                                if x == 0 and y == 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x == 0 and y == 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [0, 0, z, w, t]\n                                    break\n                                if x > 0 and y == 0 and z == 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y == 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y == 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [x, z, t]\n                                    break\n                                if x > 0 and y > 0 and z == 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z == 0 and w == 0 and t > 0 and t == y + z:\n                                    ans = [x, y, t]\n                                    break\n                                if x > 0 and y > 0 and z > 0 and w == 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z > 0 and w == 0 and t > 0 and t == z + w:\n                                    ans = [x, y, z, w, t]\n                                    break\n                                if x > 0 and y > 0 and z > 0 and w > 0 and t == 0:\n                                    continue\n                                if x > 0 and y > 0 and z > 0 and w > 0 and t > 0 and t == w + z:\n                                    ans = [x, y, z, w, t]\n                                    break\n                            if len(ans) > 2:\n                                break\n                        if len(ans) > 2:\n                            break\n                    if len(ans) > 2:\n                        break\n                if len(ans) > 2:\n                    break\n            if len(ans) > 2:\n                break\n        return ans",
  "is_python": true
}