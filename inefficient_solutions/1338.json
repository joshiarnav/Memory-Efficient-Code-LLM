{
  "problem_idx": 1338,
  "task_name": "Reduce Array Size to The Half",
  "markdown_description": "\nYou are given an integer array `arr`. You can choose a set of integers and remove all the occurrences of these integers in the array.\n\n\nReturn *the minimum size of the set so that **at least** half of the integers of the array are removed*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [3,3,3,3,5,5,5,2,2,7]\n**Output:** 2\n**Explanation:** Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [7,7,7,7,7,7]\n**Output:** 1\n**Explanation:** The only possible set you can choose is {7}. This will make the new array empty.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= arr.length <= 105`\n* `arr.length` is even.\n* `1 <= arr[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minSetSize(self, arr: List[int]) -> int:\n        cnt = Counter(arr)\n        ans = m = 0\n        for _, v in cnt.most_common():\n            m += v\n            ans += 1\n            if m * 2 >= len(arr):\n                break\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minSetSize(self, arr):\n        cnt = Counter(arr)\n        ans = m = 0\n        for _, v in cnt.most_common():\n            m += v\n            ans += 1\n            if m * 2 >= len(arr):\n                break\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random arr list\n    arr = random.choices(range(1, 101), k=random.randint(2, 10)*2)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minSetSize(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minSetSize(arr) == expected_result\n        print(f\"assert solution.minSetSize({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minSetSize({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minSetSize([40, 98, 86, 89, 14, 26, 50, 59]) == 4\nassert solution.minSetSize([88, 79, 35, 86, 5, 67]) == 3\nassert solution.minSetSize([53, 4, 84, 49, 83, 69, 21, 47, 10, 32, 95, 100]) == 6\nassert solution.minSetSize([35, 30, 92, 65]) == 2\nassert solution.minSetSize([3, 85, 21, 29, 5, 40, 40, 26]) == 3\nassert solution.minSetSize([59, 71, 80, 83, 35, 32, 36, 7, 29, 50, 100, 71, 20, 81, 7, 62]) == 6\nassert solution.minSetSize([21, 45, 84, 77, 43, 77, 46, 64, 43, 24, 49, 100, 20, 45]) == 4\nassert solution.minSetSize([29, 12, 82, 55, 25, 35]) == 3\nassert solution.minSetSize([49, 71, 33, 35, 5, 62]) == 3\nassert solution.minSetSize([42, 33, 13, 65, 2, 10]) == 3\nassert solution.minSetSize([24, 35, 61, 46, 31, 57, 5, 7, 56, 37, 33, 11, 94, 34, 62, 82]) == 8\nassert solution.minSetSize([55, 57, 49, 37, 74, 29, 81, 16, 93, 81, 52, 21, 80, 62]) == 6\nassert solution.minSetSize([92, 52, 63, 32, 39, 28]) == 3\nassert solution.minSetSize([54, 33, 63, 51, 9, 55, 39, 2, 86, 92, 36, 76, 24, 39, 4, 89]) == 7\nassert solution.minSetSize([31, 12, 78, 25, 69, 22, 37, 19]) == 4\nassert solution.minSetSize([25, 37, 40, 75, 89, 26, 58, 98, 62, 7, 50, 35, 37, 7, 24, 99, 73, 38]) == 7\nassert solution.minSetSize([7, 72, 88, 85, 91, 5, 88, 70, 91, 67]) == 3\nassert solution.minSetSize([79, 86, 62, 33, 100, 69, 5, 5, 62, 3, 70, 29, 98, 91, 49, 92, 28, 86]) == 6\nassert solution.minSetSize([59, 21, 99, 91, 92, 81, 19, 82, 77, 52, 7, 8, 84, 61]) == 7\nassert solution.minSetSize([96, 42, 4, 77, 32, 74, 13, 46, 21, 84, 1, 76, 19, 8, 11, 25]) == 8\nassert solution.minSetSize([10, 13, 4, 59, 45, 54]) == 3\nassert solution.minSetSize([36, 18, 52, 65, 28, 35, 41, 33, 44, 58, 49, 44]) == 5\nassert solution.minSetSize([15, 99, 56, 67, 72, 63, 39, 28, 60, 81, 43, 52, 24, 36, 50, 74]) == 8\nassert solution.minSetSize([47, 86, 41, 45, 99, 35, 71, 26, 42, 64, 10, 98]) == 6\nassert solution.minSetSize([88, 76, 56, 27]) == 2\nassert solution.minSetSize([1, 21, 52, 12]) == 2\nassert solution.minSetSize([83, 68, 89, 31]) == 2\nassert solution.minSetSize([79, 38, 52, 86, 70, 68, 64, 94, 75, 31, 4, 64]) == 5\nassert solution.minSetSize([74, 61, 96, 59, 60, 75, 4, 95, 82, 37, 80, 41, 67, 8, 4, 15, 2, 72, 91, 35]) == 9\nassert solution.minSetSize([38, 73, 3, 14, 44, 47, 92, 53]) == 4\nassert solution.minSetSize([29, 97, 33, 5, 32, 93, 26, 93, 98, 7, 98, 72, 39, 78, 50, 31, 41, 76, 59, 67]) == 8\nassert solution.minSetSize([66, 33, 81, 30, 58, 67, 66, 87, 84, 4]) == 4\nassert solution.minSetSize([55, 44, 99, 72, 37, 37, 89, 85, 83, 44, 48, 23, 94, 74, 59, 55, 96, 46]) == 6\nassert solution.minSetSize([93, 84, 86, 84, 82, 62]) == 2\nassert solution.minSetSize([38, 29, 25, 40, 10, 8, 84, 48, 4, 84, 36, 16, 60, 19, 5, 27, 97, 70]) == 8\nassert solution.minSetSize([55, 100, 1, 95, 12, 67, 86, 23, 30, 10, 86, 29, 6, 82, 77, 10, 16, 32, 3, 48]) == 8\nassert solution.minSetSize([15, 36, 91, 9, 33, 83, 36, 20, 30, 29, 86, 8, 63, 99, 45, 83]) == 6\nassert solution.minSetSize([77, 19, 69, 48]) == 2\nassert solution.minSetSize([94, 39, 75, 29, 100, 94, 47, 51, 69, 59, 83, 61, 53, 95, 77, 53, 70, 75, 15, 60]) == 7\nassert solution.minSetSize([85, 17, 19, 77, 47, 9, 51, 24, 40, 4, 93, 75]) == 6\nassert solution.minSetSize([2, 98, 55, 28, 68, 2, 9, 36, 12, 48]) == 4\nassert solution.minSetSize([96, 92, 82, 2, 84, 21, 49, 62, 30, 84, 11, 59, 44, 45]) == 6\nassert solution.minSetSize([4, 24, 98, 51, 9, 56, 56, 51, 94, 14, 10, 52, 37, 99]) == 5\nassert solution.minSetSize([76, 15, 63, 55, 69, 18, 65, 83, 1, 17]) == 5\nassert solution.minSetSize([76, 78, 1, 81]) == 2\nassert solution.minSetSize([91, 94, 83, 42]) == 2\nassert solution.minSetSize([100, 15, 40, 72, 39, 8]) == 3\nassert solution.minSetSize([33, 29, 74, 97]) == 2\nassert solution.minSetSize([34, 64, 78, 48, 96, 17, 23, 28]) == 4\nassert solution.minSetSize([79, 75, 41, 3, 99, 85, 82, 73, 19, 51, 50, 5, 5, 49, 92, 34, 59, 75]) == 7\nassert solution.minSetSize([91, 80, 17, 61, 25, 43, 58, 10, 97, 56, 69, 32]) == 6\nassert solution.minSetSize([71, 97, 77, 18, 39, 27]) == 3\nassert solution.minSetSize([33, 45, 92, 32, 2, 56, 44, 87, 15, 67, 43, 57, 68, 70]) == 7\nassert solution.minSetSize([9, 8, 30, 41]) == 2\nassert solution.minSetSize([23, 76, 27, 8, 98, 69, 38, 67, 22, 73, 35, 26, 48, 32, 8, 26]) == 6\nassert solution.minSetSize([25, 58, 44, 49, 66, 45, 47, 2, 62, 5, 61, 60, 6, 94, 41, 17]) == 8\nassert solution.minSetSize([49, 94, 84, 92, 35, 9, 64, 32]) == 4\nassert solution.minSetSize([86, 95, 78, 95, 63, 14, 49, 93, 32, 96, 87, 23, 4, 99, 29, 98, 61, 24]) == 8\nassert solution.minSetSize([29, 8, 50, 14, 65, 12, 57, 73, 100, 62, 34, 21, 67, 19]) == 7\nassert solution.minSetSize([97, 40, 61, 11, 5, 49, 9, 75, 67, 31]) == 5\nassert solution.minSetSize([69, 69, 61, 81, 18, 44, 53, 70, 91, 77, 8, 82, 18, 49]) == 5\nassert solution.minSetSize([82, 2, 46, 42, 1, 96]) == 3\nassert solution.minSetSize([100, 25, 52, 66, 92, 96]) == 3\nassert solution.minSetSize([14, 63, 100, 19]) == 2\nassert solution.minSetSize([51, 89, 18, 28, 38, 52, 43, 9, 89, 43]) == 3\nassert solution.minSetSize([74, 29, 21, 56, 5, 34, 95, 6, 62, 51, 71, 91]) == 6\nassert solution.minSetSize([37, 80, 30, 39, 60, 13, 38, 87, 72, 80, 27, 44]) == 5\nassert solution.minSetSize([27, 19, 79, 48, 65, 20, 64, 86, 94, 99]) == 5\nassert solution.minSetSize([86, 34, 49, 88, 35, 49, 89, 18, 37, 29, 35, 43, 82, 96]) == 5\nassert solution.minSetSize([88, 38, 82, 41, 59, 45, 55, 20, 31, 92, 7, 4]) == 6\nassert solution.minSetSize([73, 77, 88, 15, 83, 23, 15, 38, 74, 28, 83, 73, 63, 65, 99, 12]) == 5\nassert solution.minSetSize([30, 35, 43, 10, 17, 59, 45, 88, 89, 71, 23, 70]) == 6\nassert solution.minSetSize([41, 90, 75, 49, 24, 85, 68, 95, 37, 56, 68, 83, 57, 60, 31, 76, 26, 72]) == 8\nassert solution.minSetSize([40, 76, 24, 38, 35, 49, 73, 19, 44, 22, 6, 43]) == 6\nassert solution.minSetSize([90, 59, 2, 43, 74, 44, 53, 23, 63, 52, 72, 34, 70, 20, 90, 61, 13, 48, 97, 77]) == 9\nassert solution.minSetSize([50, 16, 72, 78, 100, 98, 87, 49, 96, 68, 87, 22, 47, 83, 22, 74, 17, 95]) == 7\nassert solution.minSetSize([75, 65, 99, 74, 87, 70, 66, 62, 48, 16, 73, 52, 51, 35, 46, 50, 35, 98, 77, 41]) == 9\nassert solution.minSetSize([50, 56, 6, 80, 81, 60, 46, 58, 6, 93]) == 4\nassert solution.minSetSize([53, 27, 50, 48, 89, 7, 88, 65, 81, 21]) == 5\nassert solution.minSetSize([81, 12, 85, 31, 34, 43, 84, 43, 6, 17, 52, 48, 12, 39, 61, 75]) == 6\nassert solution.minSetSize([1, 8, 10, 89, 18, 23, 62, 63, 67, 92, 75, 31, 65, 56]) == 7\nassert solution.minSetSize([2, 79, 13, 24, 58, 36, 41, 84, 12, 14, 68, 80, 78, 33, 77, 81, 81, 84, 11, 45]) == 8\nassert solution.minSetSize([78, 89, 60, 91, 73, 59, 100, 32, 36, 65, 18, 50, 91, 6]) == 6\nassert solution.minSetSize([11, 55, 40, 59, 61, 87, 15, 91, 47, 19, 64, 72, 15, 27, 36, 89, 87, 87]) == 6\nassert solution.minSetSize([80, 1, 8, 94, 30, 63, 24, 61, 41, 29, 68, 99, 78, 21, 74, 64, 64, 36, 9, 72]) == 9\nassert solution.minSetSize([94, 53, 97, 41, 73, 83, 50, 6, 81, 46, 86, 36, 80, 45, 95, 72, 90, 85]) == 9\nassert solution.minSetSize([73, 11, 42, 40, 7, 5, 25, 50]) == 4\nassert solution.minSetSize([15, 66, 7, 76, 5, 60, 99, 50, 100, 26, 12, 66, 83, 5, 69, 65, 46, 73, 69, 12]) == 6\nassert solution.minSetSize([71, 95, 9, 36, 49, 58, 10, 18, 3, 56]) == 5\nassert solution.minSetSize([68, 81, 17, 28, 14, 94, 88, 5, 72, 43, 68, 39, 76, 29, 11, 69, 27, 15]) == 8\nassert solution.minSetSize([41, 52, 52, 96, 88, 20, 93, 85, 54, 73]) == 4\nassert solution.minSetSize([89, 68, 8, 13, 77, 40, 98, 86, 58, 63]) == 5\nassert solution.minSetSize([76, 89, 4, 74, 84, 44, 17, 60, 27, 70, 80, 52, 68, 77, 17, 54, 90, 86, 86, 95]) == 8\nassert solution.minSetSize([32, 68, 50, 5]) == 2\nassert solution.minSetSize([78, 62, 48, 70, 29, 21, 66, 49]) == 4\nassert solution.minSetSize([23, 24, 1, 96, 92, 99, 4, 71, 13, 78, 27, 69, 74, 68, 10, 78]) == 7\nassert solution.minSetSize([38, 52, 6, 88, 51, 42, 11, 18, 79, 39]) == 5\nassert solution.minSetSize([74, 26, 42, 16, 58, 22, 91, 39, 73, 33, 48, 52, 49, 60, 19, 79, 45, 16, 43, 93]) == 9\nassert solution.minSetSize([69, 60, 9, 89, 8, 30, 68, 34, 65, 43, 40, 9, 48, 48, 35, 17, 74, 36, 50, 10]) == 8\nassert solution.minSetSize([99, 42, 85, 10]) == 2",
  "inefficient_solution": "class Solution:\n    def minSetSize(self, arr: List[int]) -> int:\n        cnt = {}\n        for num in arr:\n            if num in cnt:\n                cnt[num] += 1\n            else:\n                cnt[num] = 1\n        arr2 = []\n        for k, v in cnt.items():\n            for _ in range(v):\n                arr2.append(k)\n        arr3 = []\n        for num in arr:\n            if num not in arr2:\n                arr3.append(num)\n        m = len(arr3) // 2\n        ans = 0\n        for num in arr2:\n            new_arr3 = []\n            for n in arr3:\n                if n != num:\n                    new_arr3.append(n)\n            if len(new_arr3) < m:\n                m = len(new_arr3)\n                ans += 1\n        return ans",
  "is_python": true
}