{
  "problem_idx": 40,
  "task_name": "Combination Sum II",
  "markdown_description": "\nGiven a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates`\u00a0where the candidate numbers sum to `target`.\n\n\nEach number in `candidates`\u00a0may only be used **once** in the combination.\n\n\n**Note:**\u00a0The solution set must not contain duplicate combinations.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** candidates = [10,1,2,7,6,1,5], target = 8\n**Output:** \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** candidates = [2,5,2,1,2], target = 5\n**Output:** \n[\n[1,2,2],\n[5]\n]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <=\u00a0candidates.length <= 100`\n* `1 <=\u00a0candidates[i] <= 50`\n* `1 <= target <= 30`\n\n\n",
  "canonical_solution": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        def dfs(i: int, s: int):\n            if s == 0:\n                ans.append(t[:])\n                return\n            if i >= len(candidates) or s < candidates[i]:\n                return\n            for j in range(i, len(candidates)):\n                if j > i and candidates[j] == candidates[j - 1]:\n                    continue\n                t.append(candidates[j])\n                dfs(j + 1, s - candidates[j])\n                t.pop()\n\n        candidates.sort()\n        ans = []\n        t = []\n        dfs(0, target)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        def dfs(i: int, s: int):\n            if s == 0:\n                ans.append(t[:])\n                return\n            if i >= len(candidates) or s < candidates[i]:\n                return\n            for j in range(i, len(candidates)):\n                if j > i and candidates[j] == candidates[j - 1]:\n                    continue\n                t.append(candidates[j])\n                dfs(j + 1, s - candidates[j])\n                t.pop()\n\n        candidates.sort()\n        ans = []\n        t = []\n        dfs(0, target)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    candidates = random.sample(range(1, 51), random.randint(2, 10))\n    \n    # Generate a random target sum\n    target = random.randint(1, 31)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.combinationSum2(candidates, target)\n\n    return candidates, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        candidates, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.combinationSum2(candidates, target) == expected_result\n        print(f\"assert solution.combinationSum2({candidates}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.combinationSum2({candidates}, {target}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 \n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.combinationSum2([5, 6, 9, 11, 12, 13, 18, 28, 31, 36], 31) == [[5, 6, 9, 11], [6, 12, 13], [13, 18], [31]]\nassert solution.combinationSum2([2, 11, 32, 38], 31) == []\nassert solution.combinationSum2([16, 24, 31, 35, 40, 45], 13) == []\nassert solution.combinationSum2([4, 13, 15, 25, 26, 44], 24) == []\nassert solution.combinationSum2([21, 27], 25) == []\nassert solution.combinationSum2([11, 19, 27, 29, 42, 49], 26) == []\nassert solution.combinationSum2([5, 6, 7, 8, 9, 14, 15, 23, 38, 42], 3) == []\nassert solution.combinationSum2([6, 10, 11, 18, 21, 28, 29, 35, 38, 46], 5) == []\nassert solution.combinationSum2([9, 12, 16, 24, 32, 44, 49], 9) == [[9]]\nassert solution.combinationSum2([9, 11, 12, 17, 18, 20, 21, 45], 9) == [[9]]\nassert solution.combinationSum2([6, 11, 24, 46, 49], 16) == []\nassert solution.combinationSum2([6, 11, 22, 40, 48], 20) == []\nassert solution.combinationSum2([15, 19, 21], 21) == [[21]]\nassert solution.combinationSum2([26, 27, 28, 33, 35, 43, 49], 30) == []\nassert solution.combinationSum2([24, 32, 42, 44], 1) == []\nassert solution.combinationSum2([4, 7, 19, 24, 28, 29, 37, 41, 43], 14) == []\nassert solution.combinationSum2([17, 29], 20) == []\nassert solution.combinationSum2([9, 12, 16, 28, 30, 33, 39, 48], 21) == [[9, 12]]\nassert solution.combinationSum2([6, 20, 27, 46, 49], 2) == []\nassert solution.combinationSum2([9, 24, 28, 37, 46], 29) == []\nassert solution.combinationSum2([9, 23, 32, 40], 21) == []\nassert solution.combinationSum2([2, 8, 19, 23, 25, 33, 41, 47, 48, 50], 15) == []\nassert solution.combinationSum2([2, 11, 15, 28, 33, 39, 40, 41], 21) == []\nassert solution.combinationSum2([4, 16, 20, 21, 22, 32, 38, 45, 46, 47], 18) == []\nassert solution.combinationSum2([28, 29, 43], 5) == []\nassert solution.combinationSum2([5, 12, 26, 28, 42], 21) == []\nassert solution.combinationSum2([8, 9, 11, 14, 42, 43], 2) == []\nassert solution.combinationSum2([9, 10, 22, 45], 17) == []\nassert solution.combinationSum2([7, 28, 36], 28) == [[28]]\nassert solution.combinationSum2([19, 47], 25) == []\nassert solution.combinationSum2([2, 32, 36, 42, 46], 21) == []\nassert solution.combinationSum2([5, 14, 18, 22, 28, 33, 36, 49], 24) == []\nassert solution.combinationSum2([8, 9, 14, 22, 23, 33, 39, 42, 46, 49], 22) == [[8, 14], [22]]\nassert solution.combinationSum2([14, 20, 24, 29, 34, 37, 39, 48], 2) == []\nassert solution.combinationSum2([3, 11, 16, 18, 23, 34, 41, 47], 9) == []\nassert solution.combinationSum2([1, 5, 15, 33], 13) == []\nassert solution.combinationSum2([9, 10, 12, 32, 35], 18) == []\nassert solution.combinationSum2([35, 38], 27) == []\nassert solution.combinationSum2([24, 37, 39], 30) == []\nassert solution.combinationSum2([12, 17, 18, 25, 32, 33, 41], 20) == []\nassert solution.combinationSum2([6, 21, 32], 14) == []\nassert solution.combinationSum2([28, 29, 30, 47], 18) == []\nassert solution.combinationSum2([13, 17, 24, 38, 47], 30) == [[13, 17]]\nassert solution.combinationSum2([6, 11, 12, 17, 29, 31, 34], 29) == [[6, 11, 12], [12, 17], [29]]\nassert solution.combinationSum2([4, 17, 29, 38], 7) == []\nassert solution.combinationSum2([4, 12, 15, 39, 43, 44], 9) == []\nassert solution.combinationSum2([3, 5, 9, 23, 29, 32, 37, 40], 31) == [[3, 5, 23]]\nassert solution.combinationSum2([15, 18, 21, 32, 38, 44], 6) == []\nassert solution.combinationSum2([9, 12, 24, 36, 43, 44], 2) == []\nassert solution.combinationSum2([1, 7, 9, 10, 16, 17, 21, 22, 30, 47], 11) == [[1, 10]]\nassert solution.combinationSum2([3, 15, 20, 23, 25, 29, 31, 36, 44], 14) == []\nassert solution.combinationSum2([4, 9, 10, 24, 25, 37, 48, 49], 28) == [[4, 24]]\nassert solution.combinationSum2([6, 12, 23, 26], 6) == [[6]]\nassert solution.combinationSum2([13, 14, 15, 33, 37, 38, 41, 42, 47, 48], 20) == []\nassert solution.combinationSum2([22, 29], 12) == []\nassert solution.combinationSum2([9, 17, 28, 33, 37, 46, 48, 49], 16) == []\nassert solution.combinationSum2([1, 31, 33, 40], 5) == []\nassert solution.combinationSum2([5, 23, 31, 37, 44], 14) == []\nassert solution.combinationSum2([4, 23, 26, 28, 35, 38, 40], 1) == []\nassert solution.combinationSum2([1, 2, 7, 12, 13, 30, 32, 37, 42], 8) == [[1, 7]]\nassert solution.combinationSum2([5, 16, 18, 22, 31, 34, 39, 50], 18) == [[18]]\nassert solution.combinationSum2([7, 8, 15, 16, 21, 24, 30, 39, 41, 50], 4) == []\nassert solution.combinationSum2([6, 14, 20, 46], 28) == []\nassert solution.combinationSum2([24, 31, 38, 47, 49, 50], 13) == []\nassert solution.combinationSum2([26, 50], 17) == []\nassert solution.combinationSum2([4, 7, 23, 34], 23) == [[23]]\nassert solution.combinationSum2([6, 9, 24, 25, 35, 38], 26) == []\nassert solution.combinationSum2([1, 14, 37], 1) == [[1]]\nassert solution.combinationSum2([5, 13, 36, 38, 45, 48], 25) == []\nassert solution.combinationSum2([2, 5, 12, 18, 32, 42, 44], 18) == [[18]]\nassert solution.combinationSum2([3, 10, 11, 15, 24, 33, 44, 48, 50], 3) == [[3]]\nassert solution.combinationSum2([2, 14, 27, 34, 39, 40, 42, 48, 49], 15) == []\nassert solution.combinationSum2([16, 22, 26, 33, 35, 36, 37, 47, 48, 49], 30) == []\nassert solution.combinationSum2([1, 34], 24) == []\nassert solution.combinationSum2([4, 6, 11, 13, 35, 47, 48, 49], 24) == [[11, 13]]\nassert solution.combinationSum2([10, 11, 21, 34, 42, 46], 19) == []\nassert solution.combinationSum2([1, 10, 16, 17, 22, 35, 39, 43, 47, 49], 27) == [[1, 10, 16], [10, 17]]\nassert solution.combinationSum2([10, 17, 23, 28, 32, 37], 9) == []\nassert solution.combinationSum2([28, 29, 30, 31, 37, 41, 42, 43], 15) == []\nassert solution.combinationSum2([3, 11, 14, 15, 16, 22, 32, 49, 50], 8) == []\nassert solution.combinationSum2([7, 14, 17, 23, 28, 32, 35, 40, 42], 21) == [[7, 14]]\nassert solution.combinationSum2([12, 16, 17, 23, 32, 37, 42, 44], 28) == [[12, 16]]\nassert solution.combinationSum2([17, 26, 37, 41, 42, 44, 46, 48], 5) == []\nassert solution.combinationSum2([9, 30], 3) == []\nassert solution.combinationSum2([8, 11, 12, 26, 43, 44, 47], 10) == []\nassert solution.combinationSum2([22, 24], 18) == []\nassert solution.combinationSum2([2, 5, 32, 35, 44], 6) == []\nassert solution.combinationSum2([2, 3, 23, 32, 38, 46, 47, 48, 50], 31) == []\nassert solution.combinationSum2([5, 15, 18, 33, 36, 38, 45], 22) == []\nassert solution.combinationSum2([8, 13, 17, 18, 35, 43, 47, 48], 10) == []\nassert solution.combinationSum2([7, 26, 50], 10) == []\nassert solution.combinationSum2([5, 16, 20, 26, 35, 42], 25) == [[5, 20]]\nassert solution.combinationSum2([8, 24], 11) == []\nassert solution.combinationSum2([33, 49], 5) == []\nassert solution.combinationSum2([17, 23, 30, 47], 20) == []\nassert solution.combinationSum2([13, 22, 25, 36, 47, 48], 1) == []\nassert solution.combinationSum2([4, 10, 14, 20, 23, 25, 27, 36, 49], 30) == [[10, 20]]\nassert solution.combinationSum2([25, 34, 43, 44, 45], 22) == []\nassert solution.combinationSum2([4, 9, 26, 28, 29], 22) == []\nassert solution.combinationSum2([4, 18, 33, 34], 18) == [[18]]",
  "inefficient_solution": "class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n        candidates_len = len(candidates)\n        candidates_list_of_lists = [candidates]\n        for _ in range(target):\n            new_candidates_list_of_lists = []\n            for candidates_list in candidates_list_of_lists:\n                for i in range(candidates_len):\n                    for j in range(i, candidates_len):\n                        new_candidates_list = candidates_list + [candidates[j]]\n                        new_candidates_list_of_lists.append(new_candidates_list)\n            candidates_list_of_lists = new_candidates_list_of_lists\n        result = []\n        for candidates_list in candidates_list_of_lists:\n            if sum(candidates_list) == target and sorted(candidates_list) not in result:\n                result.append(sorted(candidates_list))\n        return result",
  "is_python": true
}