{
  "problem_idx": 2269,
  "task_name": "Find the K",
  "markdown_description": "\nThe **k-beauty** of an integer `num` is defined as the number of **substrings** of `num` when it is read as a string that meet the following conditions:\n\n\n* It has a length of `k`.\n* It is a divisor of `num`.\n\n\nGiven integers `num` and `k`, return *the k-beauty of* `num`.\n\n\nNote:\n\n\n* **Leading zeros** are allowed.\n* `0` is not a divisor of any value.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 240, k = 2\n**Output:** 2\n**Explanation:** The following are the substrings of num of length k:\n- \"24\" from \"**24**0\": 24 is a divisor of 240.\n- \"40\" from \"2**40**\": 40 is a divisor of 240.\nTherefore, the k-beauty is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 430043, k = 2\n**Output:** 2\n**Explanation:** The following are the substrings of num of length k:\n- \"43\" from \"**43**0043\": 43 is a divisor of 430043.\n- \"30\" from \"4**30**043\": 30 is not a divisor of 430043.\n- \"00\" from \"43**00**43\": 0 is not a divisor of 430043.\n- \"04\" from \"430**04**3\": 4 is not a divisor of 430043.\n- \"43\" from \"4300**43**\": 43 is a divisor of 430043.\nTherefore, the k-beauty is 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 109`\n* `1 <= k <= num.length` (taking `num` as a string)\n\n\n",
  "canonical_solution": "class Solution:\n    def divisorSubstrings(self, num: int, k: int) -> int:\n        ans = 0\n        s = str(num)\n        for i in range(len(s) - k + 1):\n            t = int(s[i : i + k])\n            if t and num % t == 0:\n                ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def divisorSubstrings(self, num: int, k: int) -> int:\n        ans = 0\n        s = str(num)\n        for i in range(len(s) - k + 1):\n            t = int(s[i : i + k])\n            if t and num % t == 0:\n                ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random number\n    num = random.randint(1, 1000000000)\n    \n    # Generate a random value for k\n    k = random.randint(1, len(str(num)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.divisorSubstrings(num, k)\n\n    return num, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.divisorSubstrings(num, k) == expected_result\n        print(f\"assert solution.divisorSubstrings({num}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.divisorSubstrings({num}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.divisorSubstrings(222759711, 8) == 0\nassert solution.divisorSubstrings(865364930, 5) == 0\nassert solution.divisorSubstrings(917919890, 2) == 0\nassert solution.divisorSubstrings(803502968, 1) == 3\nassert solution.divisorSubstrings(50041260, 4) == 0\nassert solution.divisorSubstrings(129895006, 8) == 0\nassert solution.divisorSubstrings(341940739, 1) == 2\nassert solution.divisorSubstrings(339220860, 2) == 4\nassert solution.divisorSubstrings(409842316, 1) == 4\nassert solution.divisorSubstrings(617869346, 7) == 0\nassert solution.divisorSubstrings(874105908, 1) == 2\nassert solution.divisorSubstrings(110195513, 9) == 1\nassert solution.divisorSubstrings(469746830, 6) == 0\nassert solution.divisorSubstrings(573227080, 5) == 0\nassert solution.divisorSubstrings(595719879, 3) == 0\nassert solution.divisorSubstrings(804294677, 9) == 1\nassert solution.divisorSubstrings(607201844, 7) == 0\nassert solution.divisorSubstrings(496107611, 4) == 0\nassert solution.divisorSubstrings(886171124, 1) == 5\nassert solution.divisorSubstrings(689348601, 8) == 0\nassert solution.divisorSubstrings(332657049, 6) == 0\nassert solution.divisorSubstrings(178742345, 9) == 1\nassert solution.divisorSubstrings(27616536, 7) == 0\nassert solution.divisorSubstrings(867792391, 5) == 0\nassert solution.divisorSubstrings(633863778, 5) == 0\nassert solution.divisorSubstrings(188380694, 9) == 1\nassert solution.divisorSubstrings(102271807, 8) == 0\nassert solution.divisorSubstrings(995682693, 2) == 0\nassert solution.divisorSubstrings(186345856, 9) == 1\nassert solution.divisorSubstrings(218046448, 6) == 0\nassert solution.divisorSubstrings(105370649, 5) == 0\nassert solution.divisorSubstrings(372150246, 2) == 1\nassert solution.divisorSubstrings(338038721, 2) == 0\nassert solution.divisorSubstrings(302947142, 4) == 0\nassert solution.divisorSubstrings(443299132, 6) == 0\nassert solution.divisorSubstrings(158218129, 9) == 1\nassert solution.divisorSubstrings(718930633, 5) == 0\nassert solution.divisorSubstrings(263778247, 4) == 0\nassert solution.divisorSubstrings(502551927, 3) == 0\nassert solution.divisorSubstrings(97471241, 3) == 0\nassert solution.divisorSubstrings(431712845, 4) == 0\nassert solution.divisorSubstrings(431501390, 1) == 3\nassert solution.divisorSubstrings(607642093, 5) == 0\nassert solution.divisorSubstrings(902101280, 6) == 0\nassert solution.divisorSubstrings(579833917, 5) == 0\nassert solution.divisorSubstrings(80529078, 3) == 0\nassert solution.divisorSubstrings(742064072, 9) == 1\nassert solution.divisorSubstrings(62603550, 1) == 6\nassert solution.divisorSubstrings(53894027, 3) == 0\nassert solution.divisorSubstrings(525965896, 8) == 0\nassert solution.divisorSubstrings(166586984, 8) == 0\nassert solution.divisorSubstrings(806909831, 9) == 1\nassert solution.divisorSubstrings(113983481, 2) == 0\nassert solution.divisorSubstrings(200139915, 9) == 1\nassert solution.divisorSubstrings(705201568, 6) == 0\nassert solution.divisorSubstrings(307720582, 2) == 0\nassert solution.divisorSubstrings(70682803, 3) == 0\nassert solution.divisorSubstrings(964626834, 5) == 0\nassert solution.divisorSubstrings(409460449, 3) == 0\nassert solution.divisorSubstrings(685092796, 2) == 0\nassert solution.divisorSubstrings(349435785, 1) == 4\nassert solution.divisorSubstrings(827094216, 7) == 0\nassert solution.divisorSubstrings(244589864, 5) == 0\nassert solution.divisorSubstrings(185945524, 1) == 4\nassert solution.divisorSubstrings(759853295, 8) == 0\nassert solution.divisorSubstrings(620993618, 7) == 0\nassert solution.divisorSubstrings(112220441, 3) == 0\nassert solution.divisorSubstrings(954376089, 3) == 0\nassert solution.divisorSubstrings(262099293, 9) == 1\nassert solution.divisorSubstrings(952392745, 7) == 0\nassert solution.divisorSubstrings(275798883, 8) == 0\nassert solution.divisorSubstrings(578114570, 2) == 1\nassert solution.divisorSubstrings(393002189, 5) == 0\nassert solution.divisorSubstrings(929790513, 3) == 0\nassert solution.divisorSubstrings(66188160, 3) == 1\nassert solution.divisorSubstrings(232202054, 1) == 4\nassert solution.divisorSubstrings(249359064, 6) == 0\nassert solution.divisorSubstrings(361880135, 4) == 0\nassert solution.divisorSubstrings(852181199, 7) == 0\nassert solution.divisorSubstrings(341172479, 7) == 0\nassert solution.divisorSubstrings(53778400, 7) == 1\nassert solution.divisorSubstrings(761227960, 8) == 1\nassert solution.divisorSubstrings(367629065, 1) == 1\nassert solution.divisorSubstrings(197807365, 3) == 0\nassert solution.divisorSubstrings(411727059, 4) == 0\nassert solution.divisorSubstrings(445287304, 2) == 3\nassert solution.divisorSubstrings(344281786, 5) == 0\nassert solution.divisorSubstrings(340156719, 4) == 0\nassert solution.divisorSubstrings(36204720, 6) == 0\nassert solution.divisorSubstrings(519601402, 8) == 0\nassert solution.divisorSubstrings(702930222, 7) == 0\nassert solution.divisorSubstrings(292959187, 1) == 1\nassert solution.divisorSubstrings(995158645, 9) == 1\nassert solution.divisorSubstrings(651275829, 1) == 2\nassert solution.divisorSubstrings(311018802, 4) == 0\nassert solution.divisorSubstrings(747270622, 4) == 0\nassert solution.divisorSubstrings(875851600, 5) == 0\nassert solution.divisorSubstrings(47940096, 2) == 1\nassert solution.divisorSubstrings(281999458, 2) == 0\nassert solution.divisorSubstrings(443559804, 9) == 1",
  "inefficient_solution": "class Solution:\n    def divisorSubstrings(self, num: int, k: int) -> int:\n        ans = 0\n        s = str(num)\n        for i in range(len(s) - k + 1):\n            t = int(s[i : i + k])\n            temp_s = str(t)\n            temp_s_list = []\n            for j in range(len(temp_s)):\n                temp_t = int(temp_s[j : j + 1])\n                if temp_t and num % temp_t == 0:\n                    temp_s_list.append(temp_s[j : j + 1])\n            ans += len(temp_s_list)\n        return ans",
  "is_python": true
}