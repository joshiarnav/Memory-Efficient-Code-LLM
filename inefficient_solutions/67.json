{
  "problem_idx": 67,
  "task_name": "Add Binary",
  "markdown_description": "\nGiven two binary strings `a` and `b`, return *their sum as a binary string*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** a = \"11\", b = \"1\"\n**Output:** \"100\"\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** a = \"1010\", b = \"1011\"\n**Output:** \"10101\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= a.length, b.length <= 104`\n* `a` and `b` consist\u00a0only of `'0'` or `'1'` characters.\n* Each string does not contain leading zeros except for the zero itself.\n\n\n",
  "canonical_solution": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        ans = []\n        i, j, carry = len(a) - 1, len(b) - 1, 0\n        while i >= 0 or j >= 0 or carry:\n            carry += (0 if i < 0 else int(a[i])) + (0 if j < 0 else int(b[j]))\n            carry, v = divmod(carry, 2)\n            ans.append(str(v))\n            i, j = i - 1, j - 1\n        return \"\".join(ans[::-1])\n",
  "test_case_generator": "\nclass Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        ans = []\n        i, j, carry = len(a) - 1, len(b) - 1, 0\n        while i >= 0 or j >= 0 or carry:\n            carry += (0 if i < 0 else int(a[i])) + (0 if j < 0 else int(b[j]))\n            carry, v = divmod(carry, 2)\n            ans.append(str(v))\n            i, j = i - 1, j - 1\n        return \"\".join(ans[::-1])\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings a and b\n    a_length = random.randint(1, 11)\n    b_length = random.randint(1, 11)\n    a = ''.join(random.choices(['0', '1'], k=a_length))\n    b = ''.join(random.choices(['0', '1'], k=b_length))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.addBinary(a, b)\n\n    return a, b, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        a, b, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.addBinary(a, b) == expected_result\n        print(f\"assert solution.addBinary('{a}', '{b}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.addBinary('{a}', '{b}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.addBinary('1', '001') == '010'\nassert solution.addBinary('01101011001', '0010') == '01101011011'\nassert solution.addBinary('01011100110', '010') == '01011101000'\nassert solution.addBinary('110111', '1001011100') == '1010010011'\nassert solution.addBinary('0110010100', '0000') == '0110010100'\nassert solution.addBinary('1', '1011111001') == '1011111010'\nassert solution.addBinary('11110111', '10') == '11111001'\nassert solution.addBinary('1111', '01') == '10000'\nassert solution.addBinary('0110', '1000110000') == '1000110110'\nassert solution.addBinary('1', '100000000') == '100000001'\nassert solution.addBinary('10111011', '0') == '10111011'\nassert solution.addBinary('0', '10111111') == '10111111'\nassert solution.addBinary('000100', '00') == '000100'\nassert solution.addBinary('01100000', '00000') == '01100000'\nassert solution.addBinary('11', '11') == '110'\nassert solution.addBinary('11', '111100') == '111111'\nassert solution.addBinary('0100', '11') == '0111'\nassert solution.addBinary('1001000', '0000000') == '1001000'\nassert solution.addBinary('0000101', '0111001') == '0111110'\nassert solution.addBinary('111', '1010') == '10001'\nassert solution.addBinary('010111', '1110') == '100101'\nassert solution.addBinary('11001000', '1') == '11001001'\nassert solution.addBinary('0100010101', '1') == '0100010110'\nassert solution.addBinary('010', '010101') == '010111'\nassert solution.addBinary('0010100', '0110') == '0011010'\nassert solution.addBinary('011101', '01001') == '100110'\nassert solution.addBinary('10101', '1011') == '100000'\nassert solution.addBinary('11110', '10010101001') == '10011000111'\nassert solution.addBinary('0101', '001100011') == '001101000'\nassert solution.addBinary('00110001111', '1011011101') == '10001101100'\nassert solution.addBinary('10000', '100') == '10100'\nassert solution.addBinary('0000', '0000011') == '0000011'\nassert solution.addBinary('10100110', '010') == '10101000'\nassert solution.addBinary('10', '11011') == '11101'\nassert solution.addBinary('0001110100', '11000') == '0010001100'\nassert solution.addBinary('0100001111', '00001000001') == '00101010000'\nassert solution.addBinary('0111101010', '11001110001') == '100001011011'\nassert solution.addBinary('00101', '11111100') == '100000001'\nassert solution.addBinary('00110111011', '1') == '00110111100'\nassert solution.addBinary('100', '00101000') == '00101100'\nassert solution.addBinary('0110011', '0') == '0110011'\nassert solution.addBinary('01110000', '00110001001') == '00111111001'\nassert solution.addBinary('0111001111', '1110111') == '1001000110'\nassert solution.addBinary('000', '11110001010') == '11110001010'\nassert solution.addBinary('0001', '1011110010') == '1011110011'\nassert solution.addBinary('001110', '10000110') == '10010100'\nassert solution.addBinary('00', '0') == '00'\nassert solution.addBinary('11100110', '001001') == '11101111'\nassert solution.addBinary('101', '00100011') == '00101000'\nassert solution.addBinary('1011', '010101010') == '010110101'\nassert solution.addBinary('1101111', '10') == '1110001'\nassert solution.addBinary('1011100011', '00000') == '1011100011'\nassert solution.addBinary('10', '10000001') == '10000011'\nassert solution.addBinary('0100111100', '001') == '0100111101'\nassert solution.addBinary('010100100', '111') == '010101011'\nassert solution.addBinary('001111010', '1101000') == '011100010'\nassert solution.addBinary('0011110011', '10101001011') == '11000111110'\nassert solution.addBinary('1', '111010') == '111011'\nassert solution.addBinary('00111', '110101') == '111100'\nassert solution.addBinary('0110', '00110110001') == '00110110111'\nassert solution.addBinary('10', '000000100') == '000000110'\nassert solution.addBinary('00010', '11') == '00101'\nassert solution.addBinary('01001101', '10011101010') == '10100110111'\nassert solution.addBinary('1000000010', '1011111110') == '10100000000'\nassert solution.addBinary('11101101000', '101111100') == '100011100100'\nassert solution.addBinary('10', '0101') == '0111'\nassert solution.addBinary('0001', '11010010011') == '11010010100'\nassert solution.addBinary('1', '0') == '1'\nassert solution.addBinary('11110100', '0') == '11110100'\nassert solution.addBinary('1101000111', '111010') == '1110000001'\nassert solution.addBinary('1111001100', '00011') == '1111001111'\nassert solution.addBinary('01110100101', '00101101100') == '10100010001'\nassert solution.addBinary('0111011000', '1101111') == '1001000111'\nassert solution.addBinary('0', '01') == '01'\nassert solution.addBinary('11101', '1111101') == '10011010'\nassert solution.addBinary('0001', '00001') == '00010'\nassert solution.addBinary('11111011', '0111') == '100000010'\nassert solution.addBinary('1001', '00010111011') == '00011000100'\nassert solution.addBinary('0011000', '00') == '0011000'\nassert solution.addBinary('111000', '11') == '111011'\nassert solution.addBinary('101', '010') == '111'\nassert solution.addBinary('01011100', '000') == '01011100'\nassert solution.addBinary('010110', '101011001') == '101101111'\nassert solution.addBinary('0001', '10101000110') == '10101000111'\nassert solution.addBinary('0111100010', '000101110') == '1000010000'\nassert solution.addBinary('0', '110') == '110'\nassert solution.addBinary('00101', '0011011') == '0100000'\nassert solution.addBinary('0000', '11101') == '11101'\nassert solution.addBinary('0', '1') == '1'\nassert solution.addBinary('01101110001', '010101000') == '10000011001'\nassert solution.addBinary('0110000', '11') == '0110011'\nassert solution.addBinary('010', '111100') == '111110'\nassert solution.addBinary('0001001', '101010110') == '101011111'\nassert solution.addBinary('1', '0') == '1'\nassert solution.addBinary('1010', '00') == '1010'\nassert solution.addBinary('10001', '11') == '10100'\nassert solution.addBinary('11', '1101011110') == '1101100001'\nassert solution.addBinary('101', '10100010110') == '10100011011'\nassert solution.addBinary('010011101', '0') == '010011101'\nassert solution.addBinary('11000011001', '1') == '11000011010'",
  "inefficient_solution": "class Solution:\n    def addBinary(self, a: str, b: str) -> str:\n        ans = []\n        for _ in range(1000000):\n            ans.append('0')\n        i, j, carry = len(a) - 1, len(b) - 1, 0\n        while i >= 0 or j >= 0 or carry:\n            carry += (0 if i < 0 else int(a[i])) + (0 if j < 0 else int(b[j]))\n            carry, v = divmod(carry, 2)\n            ans[0] = str(v)\n            for k in range(len(ans) - 1):\n                ans[k] = ans[k + 1]\n            i, j = i - 1, j - 1\n        return \"\".join(ans[1:])",
  "is_python": true
}