{
  "problem_idx": 680,
  "task_name": "Valid Palindrome II",
  "markdown_description": "\nGiven a string `s`, return `true` *if the* `s` *can be palindrome after deleting **at most one** character from it*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aba\"\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abca\"\n**Output:** true\n**Explanation:** You could delete the character 'c'.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"abc\"\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        def check(i, j):\n            while i < j:\n                if s[i] != s[j]:\n                    return False\n                i, j = i + 1, j - 1\n            return True\n\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] != s[j]:\n                return check(i, j - 1) or check(i + 1, j)\n            i, j = i + 1, j - 1\n        return True\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def validPalindrome(self, s: str) -> bool:\n        def check(i, j):\n            while i < j:\n                if s[i] != s[j]:\n                    return False\n                i, j = i + 1, j - 1\n            return True\n\n        i, j = 0, len(s) - 1\n        while i < j:\n            if s[i] != s[j]:\n                return check(i, j - 1) or check(i + 1, j)\n            i, j = i + 1, j - 1\n        return True\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.validPalindrome(s)\n\n    return s, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.validPalindrome(s) == expected_result\n        print(f'assert solution.validPalindrome(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.validPalindrome(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.validPalindrome(\"ycmhojj\") == False\nassert solution.validPalindrome(\"gxopvboat\") == False\nassert solution.validPalindrome(\"vr\") == True\nassert solution.validPalindrome(\"yccnizg\") == False\nassert solution.validPalindrome(\"tfjoxv\") == False\nassert solution.validPalindrome(\"gxqwe\") == False\nassert solution.validPalindrome(\"oh\") == True\nassert solution.validPalindrome(\"kyhbmehb\") == False\nassert solution.validPalindrome(\"wbduqxov\") == False\nassert solution.validPalindrome(\"xu\") == True\nassert solution.validPalindrome(\"k\") == True\nassert solution.validPalindrome(\"rcvbugugf\") == False\nassert solution.validPalindrome(\"jypntavcd\") == False\nassert solution.validPalindrome(\"ze\") == True\nassert solution.validPalindrome(\"i\") == True\nassert solution.validPalindrome(\"pdjfdjmnjh\") == False\nassert solution.validPalindrome(\"iv\") == True\nassert solution.validPalindrome(\"yyyrnoydag\") == False\nassert solution.validPalindrome(\"iynfjdeara\") == False\nassert solution.validPalindrome(\"glmnyojf\") == False\nassert solution.validPalindrome(\"paqtnzrkb\") == False\nassert solution.validPalindrome(\"goqc\") == False\nassert solution.validPalindrome(\"axs\") == False\nassert solution.validPalindrome(\"qisyfdbeae\") == False\nassert solution.validPalindrome(\"gnxlglunr\") == False\nassert solution.validPalindrome(\"rkvdzweo\") == False\nassert solution.validPalindrome(\"xmtywcv\") == False\nassert solution.validPalindrome(\"jjfirfjeay\") == False\nassert solution.validPalindrome(\"egkg\") == True\nassert solution.validPalindrome(\"xsfojfqelr\") == False\nassert solution.validPalindrome(\"klofknpilw\") == False\nassert solution.validPalindrome(\"nnpvwtw\") == False\nassert solution.validPalindrome(\"qsnbmweqa\") == False\nassert solution.validPalindrome(\"vkubdr\") == False\nassert solution.validPalindrome(\"gxnvmvr\") == False\nassert solution.validPalindrome(\"os\") == True\nassert solution.validPalindrome(\"feorphhq\") == False\nassert solution.validPalindrome(\"lriq\") == False\nassert solution.validPalindrome(\"sq\") == True\nassert solution.validPalindrome(\"pfogqzr\") == False\nassert solution.validPalindrome(\"ypsprs\") == False\nassert solution.validPalindrome(\"o\") == True\nassert solution.validPalindrome(\"ckoblcgal\") == False\nassert solution.validPalindrome(\"fhyder\") == False\nassert solution.validPalindrome(\"zknxn\") == False\nassert solution.validPalindrome(\"haiyg\") == False\nassert solution.validPalindrome(\"tsupjx\") == False\nassert solution.validPalindrome(\"fghntgud\") == False\nassert solution.validPalindrome(\"rfkbdvxhx\") == False\nassert solution.validPalindrome(\"err\") == True\nassert solution.validPalindrome(\"ljvzvd\") == False\nassert solution.validPalindrome(\"uwfgbtdjs\") == False\nassert solution.validPalindrome(\"zdqzzxevul\") == False\nassert solution.validPalindrome(\"chvne\") == False\nassert solution.validPalindrome(\"qs\") == True\nassert solution.validPalindrome(\"byuk\") == False\nassert solution.validPalindrome(\"humwhk\") == False\nassert solution.validPalindrome(\"vuvykc\") == False\nassert solution.validPalindrome(\"hql\") == False\nassert solution.validPalindrome(\"kcasnwtqe\") == False\nassert solution.validPalindrome(\"qmmpk\") == False\nassert solution.validPalindrome(\"igw\") == False\nassert solution.validPalindrome(\"fak\") == False\nassert solution.validPalindrome(\"uobdsicsi\") == False\nassert solution.validPalindrome(\"jdaku\") == False\nassert solution.validPalindrome(\"uz\") == True\nassert solution.validPalindrome(\"ylajjnibwf\") == False\nassert solution.validPalindrome(\"t\") == True\nassert solution.validPalindrome(\"mxnjehwvcd\") == False\nassert solution.validPalindrome(\"hsxencyo\") == False\nassert solution.validPalindrome(\"rwjipl\") == False\nassert solution.validPalindrome(\"xaazq\") == False\nassert solution.validPalindrome(\"n\") == True\nassert solution.validPalindrome(\"xvyynycml\") == False\nassert solution.validPalindrome(\"qfawwgbmpe\") == False\nassert solution.validPalindrome(\"zk\") == True\nassert solution.validPalindrome(\"pnpukfde\") == False\nassert solution.validPalindrome(\"rnr\") == True\nassert solution.validPalindrome(\"uom\") == False\nassert solution.validPalindrome(\"whapzzlb\") == False\nassert solution.validPalindrome(\"qpyc\") == False\nassert solution.validPalindrome(\"vve\") == True\nassert solution.validPalindrome(\"ewfao\") == False\nassert solution.validPalindrome(\"w\") == True\nassert solution.validPalindrome(\"gxure\") == False\nassert solution.validPalindrome(\"vhgr\") == False\nassert solution.validPalindrome(\"goavwewl\") == False\nassert solution.validPalindrome(\"wntsscl\") == False\nassert solution.validPalindrome(\"pyreq\") == False\nassert solution.validPalindrome(\"rbrfkbjd\") == False\nassert solution.validPalindrome(\"kyklr\") == False\nassert solution.validPalindrome(\"xorgclrf\") == False\nassert solution.validPalindrome(\"itgkgzdcl\") == False\nassert solution.validPalindrome(\"webzn\") == False\nassert solution.validPalindrome(\"qftnlqwixz\") == False\nassert solution.validPalindrome(\"ucoxt\") == False\nassert solution.validPalindrome(\"hjupfdps\") == False\nassert solution.validPalindrome(\"toescorfn\") == False\nassert solution.validPalindrome(\"roudolimv\") == False\nassert solution.validPalindrome(\"zxcbfhbq\") == False",
  "inefficient_solution": "class Solution:\n    def validPalindrome(self, s: str) -> bool:\n        def check(i, j):\n            lst, rev = [], []\n            while i < j:\n                lst.append(s[i])\n                rev.append(s[j])\n                if s[i] != s[j]:\n                    return False\n                i, j = i + 1, j - 1\n            if len(lst) != len(rev):\n                return False\n            return lst == rev[::-1]\n\n        i, j = 0, len(s) - 1\n        while i < j:\n            lst = s[:j]\n            rev = s[i:][::-1]\n            if s[i] != s[j]:\n                return check(i, j - 1) or check(i + 1, j)\n            i, j = i + 1, j - 1\n        return True",
  "is_python": true
}