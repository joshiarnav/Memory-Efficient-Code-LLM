{
  "problem_idx": 1386,
  "task_name": "Cinema Seat Allocation",
  "markdown_description": "\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1386.Cinema%20Seat%20Allocation/images/cinema_seats_1.png)\n\n\nA cinema\u00a0has `n`\u00a0rows of seats, numbered from 1 to `n`\u00a0and there are ten\u00a0seats in each row, labelled from 1\u00a0to 10\u00a0as shown in the figure above.\n\n\nGiven the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]`\u00a0means the seat located in row **3** and labelled with **8**\u00a0is already reserved.\n\n\n*Return the maximum number of four-person groups\u00a0you can assign on the cinema\u00a0seats.* A four-person group\u00a0occupies four\u00a0adjacent seats **in one single row**. Seats across an aisle (such as [3,3]\u00a0and [3,4]) are not considered to be adjacent, but there is an exceptional case\u00a0on which an aisle split\u00a0a four-person group, in that case, the aisle split\u00a0a four-person group in the middle,\u00a0which means to have two people on each side.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1386.Cinema%20Seat%20Allocation/images/cinema_seats_3.png)\n\n\n\n```\n\n**Input:** n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\n**Output:** 4\n**Explanation:** The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\n**Output:** 2\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\n**Output:** 4\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 10^9`\n* `1 <=\u00a0reservedSeats.length <= min(10*n, 10^4)`\n* `reservedSeats[i].length == 2`\n* `1\u00a0<=\u00a0reservedSeats[i][0] <= n`\n* `1 <=\u00a0reservedSeats[i][1] <= 10`\n* All `reservedSeats[i]` are distinct.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:\n        d = defaultdict(int)\n        for i, j in reservedSeats:\n            d[i] |= 1 << (10 - j)\n        masks = (0b0111100000, 0b0000011110, 0b0001111000)\n        ans = (n - len(d)) * 2\n        for x in d.values():\n            for mask in masks:\n                if (x & mask) == 0:\n                    x |= mask\n                    ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:\n        d = defaultdict(int)\n        for i, j in reservedSeats:\n            d[i] |= 1 << (10 - j)\n        masks = (0b0111100000, 0b0000011110, 0b0001111000)\n        ans = (n - len(d)) * 2\n        for x in d.values():\n            for mask in masks:\n                if (x & mask) == 0:\n                    x |= mask\n                    ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random number of rows\n    n = random.randint(1, 11)\n\n    # Generate random number of reserved seats\n    num_reserved_seats = random.randint(1, min(n*10, 10001))\n    \n    # Generate reserved seats list\n    reserved_seats = []\n    for _ in range(num_reserved_seats):\n        row = random.randint(1, n)\n        seat = random.randint(1, 10)\n        reserved_seats.append([row, seat])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxNumberOfFamilies(n, reserved_seats)\n\n    return n, reserved_seats, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, reserved_seats, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxNumberOfFamilies(n, reserved_seats) == expected_result\n        print(f\"assert solution.maxNumberOfFamilies({n}, {reserved_seats}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxNumberOfFamilies({n}, {reserved_seats}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxNumberOfFamilies(5, [[3, 7], [4, 8], [4, 2], [5, 10], [4, 9], [1, 8], [4, 5], [4, 8], [2, 10], [3, 10]]) == 6\nassert solution.maxNumberOfFamilies(3, [[3, 1], [2, 2], [1, 2], [1, 4], [3, 6], [2, 10], [3, 1], [3, 7], [1, 8]]) == 2\nassert solution.maxNumberOfFamilies(5, [[2, 8], [5, 2], [5, 7], [5, 6], [3, 1], [3, 1], [1, 6], [1, 2], [5, 1], [2, 10], [2, 7], [2, 4], [1, 5], [2, 9], [5, 8], [3, 8], [4, 2], [2, 3], [1, 10], [1, 2], [5, 6], [4, 1], [5, 4], [1, 7], [4, 5], [5, 3], [5, 2]]) == 2\nassert solution.maxNumberOfFamilies(1, [[1, 3], [1, 5], [1, 6], [1, 7], [1, 6], [1, 3], [1, 7], [1, 8]]) == 0\nassert solution.maxNumberOfFamilies(11, [[7, 8], [1, 5], [8, 10], [5, 10], [4, 10], [11, 6], [9, 7], [6, 9], [9, 7], [4, 6], [2, 7], [10, 5], [9, 3], [2, 3], [9, 6], [10, 1], [11, 10], [7, 9], [2, 5], [5, 9], [6, 10], [2, 7], [5, 5], [1, 9], [10, 8], [8, 2], [10, 8], [11, 4], [9, 2], [6, 10], [9, 6], [8, 4]]) == 6\nassert solution.maxNumberOfFamilies(10, [[10, 8], [4, 6], [1, 2], [4, 1], [6, 6], [2, 7], [2, 10], [1, 9], [9, 4], [6, 2], [2, 9], [3, 6], [2, 10], [6, 7], [2, 9], [9, 2], [10, 9], [8, 5], [8, 5], [1, 5], [9, 3], [1, 7], [2, 8], [8, 9], [4, 1], [9, 3]]) == 9\nassert solution.maxNumberOfFamilies(8, [[6, 9], [2, 10], [8, 5], [3, 5], [1, 7], [4, 6], [7, 1], [5, 9], [1, 6], [4, 10], [4, 8], [2, 9], [2, 7], [3, 9], [8, 10], [3, 9], [4, 9], [3, 9], [8, 1], [6, 4], [6, 3], [5, 9], [7, 2], [3, 1], [6, 9], [1, 2], [3, 7], [8, 8], [2, 4], [3, 9], [1, 2], [7, 6], [6, 6], [8, 1], [3, 2], [7, 3]]) == 2\nassert solution.maxNumberOfFamilies(5, [[2, 7], [5, 2], [3, 4], [3, 10], [5, 5], [1, 2], [3, 3], [5, 9]]) == 5\nassert solution.maxNumberOfFamilies(3, [[1, 7], [2, 8], [1, 10], [3, 10]]) == 4\nassert solution.maxNumberOfFamilies(7, [[3, 9], [4, 7], [7, 6], [4, 3], [4, 9], [1, 10], [3, 2], [3, 6], [2, 6], [2, 7], [3, 3], [1, 3], [3, 2], [6, 5], [7, 3], [6, 6], [1, 7], [1, 3], [1, 7], [3, 7], [7, 10]]) == 3\nassert solution.maxNumberOfFamilies(1, [[1, 2], [1, 1]]) == 1\nassert solution.maxNumberOfFamilies(4, [[4, 1], [1, 8], [4, 6], [3, 5], [3, 10], [2, 4], [3, 10], [1, 1], [2, 3], [2, 4], [3, 5], [2, 4], [2, 4], [2, 6], [2, 6]]) == 3\nassert solution.maxNumberOfFamilies(8, [[7, 1]]) == 16\nassert solution.maxNumberOfFamilies(9, [[3, 7], [4, 2], [9, 7], [2, 4], [7, 1], [2, 7]]) == 13\nassert solution.maxNumberOfFamilies(9, [[8, 1], [3, 9], [8, 2], [6, 3], [1, 3], [2, 5], [3, 7], [2, 10], [4, 1], [1, 5]]) == 13\nassert solution.maxNumberOfFamilies(9, [[4, 5], [7, 4], [6, 10], [7, 8], [5, 9], [3, 6]]) == 13\nassert solution.maxNumberOfFamilies(5, [[4, 2], [4, 3], [3, 1], [4, 6], [4, 8], [5, 2], [4, 4], [3, 1], [4, 5], [2, 3], [1, 5], [1, 5], [3, 6], [1, 2], [5, 1], [2, 3], [3, 4], [3, 3], [2, 4], [5, 2], [3, 10], [4, 5], [1, 8], [1, 4], [4, 6], [4, 4], [4, 4], [2, 1], [5, 7], [3, 5], [2, 9], [4, 9], [1, 1], [1, 2], [3, 6]]) == 0\nassert solution.maxNumberOfFamilies(3, [[1, 4], [1, 3], [2, 4], [2, 10], [3, 10], [3, 3], [3, 1], [1, 7], [1, 9], [3, 2], [1, 7], [2, 2], [1, 8], [3, 2], [3, 3], [1, 5], [2, 6], [2, 1], [3, 6], [1, 6], [2, 7], [1, 9], [2, 2], [2, 8]]) == 0\nassert solution.maxNumberOfFamilies(2, [[1, 6], [1, 9], [1, 10], [1, 3], [1, 8], [2, 9], [1, 8], [1, 8], [2, 3], [2, 6], [2, 8], [2, 4], [2, 9], [2, 6]]) == 0\nassert solution.maxNumberOfFamilies(2, [[2, 1], [1, 7], [2, 9], [1, 2]]) == 1\nassert solution.maxNumberOfFamilies(8, [[6, 10], [5, 8], [8, 8], [1, 10], [7, 7], [4, 5], [6, 4], [4, 6], [8, 10], [7, 1], [2, 8], [3, 8], [6, 4], [5, 3], [3, 5], [8, 4], [6, 3], [4, 3], [6, 7], [1, 8], [6, 5], [8, 2], [3, 9], [8, 10], [5, 7], [3, 1], [4, 6], [8, 3], [5, 2], [3, 8], [1, 8], [8, 4], [2, 8], [7, 3], [1, 4], [8, 1], [5, 5], [8, 10], [2, 10], [1, 1], [4, 1], [2, 10], [4, 4], [7, 6], [4, 1], [7, 10], [7, 5], [8, 9], [2, 10], [5, 2], [4, 6], [7, 9], [8, 9], [8, 8], [1, 10], [8, 7], [3, 5], [2, 2], [3, 9], [6, 3], [1, 10], [4, 2], [1, 8], [6, 2], [3, 3], [1, 7], [4, 6], [7, 3], [8, 1], [3, 3], [1, 6], [8, 3], [7, 6], [6, 4], [6, 9], [5, 9], [3, 3], [1, 10], [8, 7], [1, 1]]) == 1\nassert solution.maxNumberOfFamilies(6, [[5, 3], [3, 5], [2, 3], [5, 5], [2, 7], [2, 2], [4, 6], [6, 5], [2, 7], [5, 5], [6, 8], [4, 7], [3, 4], [4, 5], [4, 4], [2, 3], [4, 6], [6, 4], [3, 6], [6, 7], [6, 1], [5, 2], [3, 9], [4, 8], [3, 8]]) == 3\nassert solution.maxNumberOfFamilies(3, [[2, 7], [3, 5], [3, 5], [1, 7], [1, 8], [1, 5], [3, 3], [1, 7], [2, 2], [3, 8], [2, 3], [1, 10], [2, 1], [1, 10], [2, 10], [2, 3], [3, 4]]) == 0\nassert solution.maxNumberOfFamilies(2, [[1, 1], [2, 1], [1, 2], [1, 1], [2, 6]]) == 2\nassert solution.maxNumberOfFamilies(1, [[1, 6]]) == 1\nassert solution.maxNumberOfFamilies(3, [[2, 5], [1, 3], [2, 5], [2, 6], [3, 8], [3, 6], [2, 7], [1, 9], [3, 9], [2, 3], [3, 6], [2, 1], [3, 7], [2, 3], [3, 4], [3, 6], [3, 7], [3, 3], [2, 7], [3, 1], [1, 8], [3, 8], [2, 2], [1, 8], [3, 4], [2, 6], [2, 5], [3, 7], [3, 8]]) == 1\nassert solution.maxNumberOfFamilies(5, [[2, 10], [2, 5], [2, 6], [2, 7], [5, 3], [1, 7], [5, 7], [1, 10], [2, 2], [3, 3], [4, 1], [4, 2], [4, 1], [4, 10], [3, 2], [5, 9], [4, 4], [5, 8], [4, 4], [2, 10], [4, 8], [2, 6], [2, 2], [3, 7], [2, 3], [4, 4], [5, 9], [4, 8], [4, 9], [4, 2], [1, 2], [5, 8], [2, 7], [1, 3], [4, 6], [2, 10]]) == 0\nassert solution.maxNumberOfFamilies(4, [[2, 2], [2, 7], [3, 5], [1, 7], [2, 5]]) == 4\nassert solution.maxNumberOfFamilies(1, [[1, 10], [1, 1], [1, 9], [1, 8], [1, 2], [1, 4]]) == 0\nassert solution.maxNumberOfFamilies(6, [[3, 8], [4, 10], [1, 4], [3, 1], [5, 1], [1, 3], [4, 3], [1, 10], [2, 4], [4, 1], [4, 8], [1, 1], [1, 5], [2, 5], [2, 7]]) == 7\nassert solution.maxNumberOfFamilies(6, [[5, 9], [3, 3], [1, 10], [1, 6], [6, 7], [6, 5], [3, 8], [4, 5]]) == 6\nassert solution.maxNumberOfFamilies(2, [[2, 8], [2, 7], [2, 8], [2, 5], [1, 10], [1, 1], [2, 5], [1, 10], [2, 2], [2, 3], [1, 10], [2, 7], [1, 8]]) == 1\nassert solution.maxNumberOfFamilies(1, [[1, 9], [1, 6], [1, 5], [1, 8]]) == 0\nassert solution.maxNumberOfFamilies(4, [[3, 2], [2, 2], [2, 1], [1, 4], [1, 7], [3, 6], [3, 6], [4, 4], [3, 6], [1, 10], [4, 8], [1, 10], [3, 5], [3, 6], [1, 10], [2, 5], [4, 6], [3, 6], [1, 2], [4, 1], [4, 2], [4, 1], [1, 10], [4, 3], [4, 7], [1, 1], [2, 2], [1, 9], [3, 4], [4, 7], [2, 6], [4, 5], [1, 8], [3, 4], [2, 9], [4, 8], [2, 2], [3, 2], [3, 5], [2, 9]]) == 0\nassert solution.maxNumberOfFamilies(8, [[5, 2], [4, 10], [4, 1], [1, 5], [7, 3], [3, 4], [4, 10], [7, 1], [7, 10], [5, 5], [2, 9], [7, 4], [3, 10], [1, 2], [2, 1], [3, 7], [2, 2], [4, 2], [6, 8], [6, 2], [1, 8], [8, 8], [7, 8], [2, 7], [1, 5], [4, 8], [3, 4], [3, 10], [1, 7], [7, 9], [6, 8], [2, 9], [1, 1], [5, 5], [7, 1], [2, 9], [2, 3], [3, 1], [3, 10], [5, 6], [4, 4], [7, 6], [6, 10], [6, 10], [2, 10], [2, 9], [1, 3]]) == 2\nassert solution.maxNumberOfFamilies(10, [[5, 9], [8, 1], [1, 9], [1, 4]]) == 17\nassert solution.maxNumberOfFamilies(9, [[8, 3], [9, 8], [7, 5], [6, 3], [8, 3], [2, 8], [1, 10], [9, 4], [9, 4], [6, 1]]) == 12\nassert solution.maxNumberOfFamilies(2, [[2, 4], [2, 4], [1, 8], [2, 7], [2, 6], [2, 6], [1, 2], [1, 2], [2, 2], [1, 3], [2, 1], [2, 9], [2, 7], [2, 2], [1, 8]]) == 1\nassert solution.maxNumberOfFamilies(2, [[2, 8], [2, 9], [2, 7], [2, 3], [2, 7], [1, 10], [2, 6], [1, 5], [1, 9], [1, 5], [2, 9], [2, 7]]) == 0\nassert solution.maxNumberOfFamilies(5, [[5, 7], [1, 10], [4, 9], [5, 9], [1, 9], [3, 10], [2, 6], [5, 3], [2, 8], [5, 1], [2, 9], [4, 3], [1, 8], [2, 9], [4, 9], [3, 6], [5, 7], [2, 7], [1, 8], [3, 7], [1, 5], [2, 9], [5, 6], [5, 1], [2, 3], [4, 1], [1, 10], [3, 8], [2, 8], [3, 6], [1, 10], [4, 3], [5, 10], [5, 9], [1, 9], [4, 2], [1, 8], [5, 6], [5, 9], [2, 10], [5, 2], [2, 10], [4, 7], [3, 7], [4, 1], [2, 4], [3, 3], [3, 6]]) == 0\nassert solution.maxNumberOfFamilies(9, [[1, 4], [5, 7], [9, 7], [3, 1], [5, 2], [4, 1], [3, 6], [5, 8], [4, 3], [4, 4], [8, 6], [8, 8], [4, 10], [5, 2], [4, 3], [8, 9], [1, 5], [9, 2], [3, 7], [7, 7], [9, 9], [4, 3], [2, 2], [9, 10], [1, 8], [2, 8], [8, 8], [3, 7], [2, 10], [3, 4], [6, 3], [7, 5], [2, 6], [3, 8], [4, 10], [1, 9], [4, 1], [3, 3], [5, 1], [8, 8], [9, 8], [1, 5], [3, 4], [8, 6], [8, 3], [3, 4], [9, 4], [1, 3], [9, 7], [4, 6], [3, 1], [1, 6], [4, 1], [4, 4], [7, 6], [6, 6], [4, 3], [8, 10], [9, 2]]) == 0\nassert solution.maxNumberOfFamilies(7, [[2, 5], [4, 10], [2, 4], [1, 6], [2, 5], [5, 1], [1, 4], [6, 10], [4, 5], [5, 3], [7, 3], [6, 4], [3, 1], [3, 6], [4, 1], [4, 9], [4, 7], [7, 10], [1, 1], [6, 3], [2, 5], [4, 3], [3, 5], [3, 1], [6, 8], [2, 6], [6, 4], [4, 10], [3, 1], [3, 8], [6, 10], [6, 2], [3, 6], [3, 8], [7, 9], [5, 7], [4, 10], [7, 10], [4, 6], [5, 4], [5, 2], [7, 4], [7, 9], [6, 9], [2, 2], [1, 4], [5, 3], [2, 7], [4, 2], [7, 2], [3, 1], [4, 7], [6, 10], [5, 9], [4, 1], [1, 6], [3, 4], [1, 7], [5, 10], [5, 9], [1, 6], [5, 7], [1, 5], [4, 8], [5, 8], [7, 8], [1, 8], [2, 2]]) == 0\nassert solution.maxNumberOfFamilies(5, [[4, 4], [2, 4], [4, 8], [1, 5], [4, 10], [3, 3], [5, 9], [1, 2], [2, 1], [4, 4], [5, 7], [2, 6], [1, 3], [2, 8], [5, 5], [2, 8], [2, 2], [4, 3], [4, 6], [5, 3], [3, 5], [4, 6], [4, 6], [4, 6], [2, 4]]) == 2\nassert solution.maxNumberOfFamilies(2, [[1, 8], [1, 5], [1, 4], [2, 7], [2, 1], [2, 4], [1, 6], [1, 5], [1, 3], [2, 9], [2, 3], [1, 6], [2, 2], [1, 1], [2, 10], [2, 10], [2, 7], [2, 9], [2, 9], [1, 3]]) == 0\nassert solution.maxNumberOfFamilies(3, [[2, 9], [3, 10], [3, 7], [2, 8], [3, 1], [1, 8], [2, 5], [1, 1], [2, 9], [2, 9]]) == 2\nassert solution.maxNumberOfFamilies(10, [[3, 8], [7, 5], [2, 7], [3, 8], [6, 4], [7, 2], [1, 10], [7, 10], [3, 2], [7, 8], [5, 10], [8, 8], [2, 7], [3, 9], [4, 4], [1, 8], [10, 4], [6, 1], [1, 9], [2, 5], [8, 9], [3, 2], [3, 2], [1, 3], [8, 4], [3, 7], [9, 1], [4, 5], [8, 5], [7, 3], [6, 9], [8, 2], [6, 7], [7, 3], [7, 6], [5, 1], [9, 3], [6, 8], [8, 3], [7, 1], [8, 6], [3, 9], [10, 6], [8, 1], [3, 6], [5, 9], [5, 8], [3, 6], [3, 2], [5, 9], [2, 9], [6, 4], [10, 5], [4, 6], [9, 4], [10, 3], [5, 4], [2, 6], [5, 3], [9, 9], [8, 2], [6, 8], [7, 8], [10, 5], [4, 4], [6, 7], [8, 10], [6, 7], [9, 7], [5, 9], [7, 10], [9, 4], [9, 6], [3, 10], [2, 5], [4, 8], [8, 1], [5, 4], [1, 4], [3, 10], [6, 9], [1, 2], [6, 6], [10, 10], [8, 3], [1, 2], [3, 8], [7, 2], [3, 10], [5, 2], [1, 5], [7, 10]]) == 0\nassert solution.maxNumberOfFamilies(11, [[5, 1], [7, 6], [8, 1], [9, 7], [3, 5], [7, 4], [11, 10], [6, 3], [5, 7], [5, 8], [9, 3], [2, 8], [9, 4], [1, 3], [1, 10], [4, 7], [8, 5], [1, 10], [1, 10], [11, 2], [2, 5], [4, 4], [11, 3], [6, 10], [9, 2], [11, 8], [11, 9], [3, 9], [4, 10], [11, 9], [3, 7], [7, 2], [6, 5], [1, 2], [7, 7], [9, 5], [4, 2], [6, 6], [11, 4], [2, 6], [1, 9], [6, 6], [3, 9], [8, 5], [1, 6], [10, 10], [6, 10], [11, 8], [7, 1], [10, 9], [10, 5], [4, 10], [7, 10], [11, 7], [10, 3], [9, 3], [7, 7], [3, 2], [3, 7], [2, 5], [4, 9], [11, 10], [2, 1], [1, 10], [9, 2], [4, 3], [9, 5], [6, 2], [2, 7], [1, 5]]) == 2\nassert solution.maxNumberOfFamilies(7, [[4, 5], [1, 3], [4, 6], [2, 2], [3, 4], [5, 4], [7, 8], [4, 2], [5, 9], [6, 10], [7, 1], [7, 10], [4, 4], [3, 1], [4, 5], [4, 6], [1, 7], [2, 8], [1, 7], [4, 3], [6, 3], [5, 8]]) == 4\nassert solution.maxNumberOfFamilies(11, [[1, 4], [2, 9], [5, 2], [11, 1], [8, 2], [7, 2], [7, 7], [11, 5], [10, 2], [4, 5], [2, 10], [6, 9], [7, 8], [1, 4], [2, 2], [7, 4], [8, 3], [9, 7], [6, 7], [8, 9], [10, 2], [4, 5], [2, 1], [8, 2], [8, 7], [5, 2], [3, 4], [7, 9], [10, 1], [11, 5], [7, 10], [9, 5], [6, 10], [6, 9], [2, 4], [2, 1], [2, 4], [11, 8], [1, 1], [5, 3], [2, 9], [1, 6], [8, 2], [3, 2], [4, 6], [6, 6], [11, 4], [10, 5], [2, 3], [11, 6], [6, 4], [4, 3], [5, 4], [3, 7], [5, 3], [2, 4], [9, 2], [7, 10], [9, 9], [7, 2], [10, 3], [2, 3], [7, 5], [11, 3], [7, 5], [10, 9], [3, 2], [4, 7], [7, 10], [3, 10], [10, 4], [2, 3], [7, 4], [10, 5], [3, 7], [1, 8]]) == 1\nassert solution.maxNumberOfFamilies(10, [[4, 6], [9, 10], [2, 4], [1, 10], [6, 5], [3, 7], [5, 1], [1, 8], [8, 10], [8, 5], [6, 5], [10, 7], [8, 9], [1, 5], [7, 10], [4, 9], [8, 7], [5, 2], [9, 3], [1, 7], [3, 2], [2, 5], [8, 7], [10, 6], [2, 10], [7, 8], [3, 8], [10, 8], [8, 6], [10, 10], [3, 8], [3, 6], [10, 2], [8, 9], [2, 1], [10, 4], [1, 1], [3, 10], [5, 1], [9, 6], [4, 7], [2, 4], [4, 3], [6, 1], [5, 4], [8, 9], [10, 9], [7, 10], [7, 10], [4, 6], [4, 3], [1, 10], [3, 7], [8, 4], [8, 8], [6, 9], [9, 7], [10, 7], [9, 9], [9, 8], [9, 10], [1, 7], [4, 8], [3, 7], [5, 1], [8, 6], [5, 2], [1, 3], [10, 7], [1, 2], [8, 4], [3, 1], [7, 10], [3, 8]]) == 3\nassert solution.maxNumberOfFamilies(4, [[4, 1], [4, 5], [3, 8], [2, 4], [4, 9], [1, 5], [1, 10], [2, 10], [3, 6], [3, 9], [4, 7], [4, 2], [3, 5], [2, 9], [2, 6], [2, 4], [4, 2]]) == 1\nassert solution.maxNumberOfFamilies(8, [[6, 5], [2, 1], [3, 10], [7, 8], [1, 4], [5, 10], [4, 5], [4, 4], [2, 6], [6, 8], [3, 4], [4, 4], [5, 4], [2, 1], [1, 10], [6, 5], [5, 5], [1, 7], [2, 2], [4, 6], [3, 3], [1, 7], [5, 8], [6, 5], [1, 1], [7, 3], [8, 3], [6, 6], [2, 2], [4, 6], [5, 1], [5, 9], [4, 2], [2, 3], [2, 10], [5, 7], [3, 5], [3, 9], [5, 9], [7, 8], [7, 9], [2, 10], [8, 8], [4, 5], [6, 4], [5, 9], [3, 10], [1, 2], [5, 6], [5, 10], [4, 6], [5, 10], [2, 9], [4, 1], [4, 2], [3, 3], [3, 9], [2, 10], [7, 4], [5, 1], [3, 10], [2, 5], [7, 8], [6, 8], [5, 1], [7, 9], [4, 7], [4, 3]]) == 1\nassert solution.maxNumberOfFamilies(8, [[3, 4], [4, 5], [7, 2], [4, 8], [4, 7], [8, 10], [7, 7], [2, 7], [6, 2], [4, 7], [8, 8], [8, 9], [7, 1], [4, 9], [4, 1], [7, 9], [8, 3], [5, 3], [5, 1], [8, 1], [2, 5], [4, 2], [4, 8], [8, 8], [8, 8], [3, 10], [8, 2], [5, 10], [8, 2], [8, 3], [5, 1], [2, 1], [5, 7], [1, 10], [3, 9], [1, 5], [7, 7], [3, 5], [2, 1], [3, 7], [3, 6], [4, 10], [1, 8], [3, 3], [3, 3], [8, 8], [7, 9], [4, 5], [2, 2], [8, 2], [1, 1], [8, 8], [5, 7], [3, 9], [5, 10], [3, 1], [1, 7], [8, 6], [4, 2], [7, 6], [2, 9], [7, 9], [4, 5], [6, 6], [7, 3], [1, 5], [5, 3], [6, 6]]) == 0\nassert solution.maxNumberOfFamilies(7, [[3, 7], [5, 9], [5, 9], [7, 7], [6, 5], [7, 2], [5, 7], [4, 8], [4, 10], [6, 6], [4, 1], [7, 10], [3, 9], [7, 9], [2, 10], [5, 9], [4, 4], [7, 3], [6, 8], [2, 2], [4, 4], [7, 6], [6, 7], [4, 4], [5, 9], [2, 2], [4, 3], [1, 6], [1, 9], [5, 9], [7, 4], [4, 10], [4, 5], [2, 3], [6, 10], [4, 5], [4, 10], [1, 5], [1, 6], [3, 10], [4, 5], [5, 3], [1, 3], [6, 7], [2, 1], [3, 9], [5, 8], [3, 10], [3, 4], [1, 1], [1, 5], [7, 5], [4, 10], [4, 9]]) == 1\nassert solution.maxNumberOfFamilies(11, [[6, 5], [1, 2], [5, 5], [10, 2], [4, 3], [2, 6], [6, 3], [3, 9], [2, 5], [5, 5], [6, 7], [9, 9], [1, 1], [10, 8], [4, 3], [10, 1], [9, 5], [9, 5], [8, 7], [5, 6], [4, 1], [10, 5], [6, 8], [7, 1], [11, 8], [10, 8], [5, 8], [10, 9], [5, 7], [2, 5], [10, 3], [9, 2], [4, 9], [4, 1], [1, 1], [5, 1], [4, 5], [6, 2], [1, 2], [6, 9], [3, 5], [7, 3], [1, 10], [8, 3], [4, 4], [5, 5], [10, 1], [1, 3], [5, 6], [7, 6], [6, 4], [3, 7], [5, 2], [8, 2]]) == 2\nassert solution.maxNumberOfFamilies(2, [[1, 2]]) == 3\nassert solution.maxNumberOfFamilies(7, [[3, 10], [1, 5], [6, 2], [2, 5], [6, 10], [7, 4], [5, 9], [7, 2], [3, 10], [7, 7], [2, 1], [6, 5], [3, 10], [7, 3], [5, 6], [1, 10], [5, 7], [4, 8], [4, 3], [7, 4], [5, 7], [4, 9], [4, 7], [3, 4], [6, 5], [7, 3], [3, 9], [6, 8], [5, 5], [1, 9], [3, 1], [5, 9], [3, 4], [3, 10], [5, 9], [4, 3], [3, 10], [2, 4], [2, 2], [6, 3], [3, 10], [1, 10], [7, 4], [6, 9], [3, 3], [5, 10], [2, 9], [3, 1], [5, 7], [3, 3], [6, 8], [6, 5], [7, 2], [6, 8], [4, 9], [1, 5], [1, 5], [1, 10], [3, 8], [5, 1], [7, 10], [2, 2], [3, 5], [7, 3]]) == 0\nassert solution.maxNumberOfFamilies(7, [[3, 7], [7, 4], [6, 8], [2, 4], [5, 4], [7, 4], [7, 2], [6, 7], [2, 6], [2, 1], [6, 8], [5, 6], [7, 5], [4, 1], [4, 2], [5, 9], [7, 4], [6, 9], [1, 1], [2, 10], [2, 2], [3, 4], [6, 8], [7, 6], [2, 2], [4, 7], [6, 10], [6, 7], [6, 10], [7, 5], [5, 8], [3, 6], [1, 6], [3, 7], [4, 8], [5, 9], [3, 5], [6, 10], [7, 4], [6, 5], [3, 1], [1, 10], [7, 5], [3, 9]]) == 1\nassert solution.maxNumberOfFamilies(6, [[3, 6], [5, 3], [6, 8]]) == 9\nassert solution.maxNumberOfFamilies(3, [[1, 8], [1, 2], [3, 5], [2, 10], [1, 3], [1, 5], [1, 7], [1, 4], [3, 5], [2, 8], [2, 2]]) == 2\nassert solution.maxNumberOfFamilies(10, [[2, 8], [1, 3], [7, 2], [7, 6], [5, 5], [4, 4], [8, 8], [8, 6], [1, 8], [8, 2], [5, 2], [9, 9], [5, 5], [9, 4], [7, 3], [2, 8], [1, 4], [3, 10], [1, 8], [2, 8], [7, 10], [3, 5], [9, 10], [8, 9], [2, 10], [9, 5], [9, 8], [7, 4], [1, 9], [5, 2], [8, 10], [10, 5], [10, 10], [4, 6], [5, 5], [3, 5], [2, 8], [8, 1], [7, 2], [4, 2], [8, 6]]) == 6\nassert solution.maxNumberOfFamilies(6, [[3, 10], [6, 1]]) == 12\nassert solution.maxNumberOfFamilies(5, [[1, 8], [2, 1], [3, 1], [2, 3], [1, 4], [2, 6], [1, 9], [3, 9], [4, 8], [1, 2], [5, 4], [4, 10], [4, 9], [3, 9], [5, 3], [3, 9], [1, 8], [2, 4], [2, 2]]) == 3\nassert solution.maxNumberOfFamilies(2, [[1, 4], [2, 9], [1, 4], [2, 6], [1, 7], [2, 9]]) == 1\nassert solution.maxNumberOfFamilies(1, [[1, 8], [1, 6], [1, 10]]) == 1\nassert solution.maxNumberOfFamilies(2, [[2, 4], [1, 6], [2, 4], [2, 6], [2, 4], [2, 6], [1, 1], [2, 10], [2, 7], [2, 1], [2, 7], [2, 5]]) == 1\nassert solution.maxNumberOfFamilies(3, [[3, 6], [2, 9], [3, 2], [2, 6], [2, 6], [2, 3], [3, 4], [3, 9], [2, 5], [2, 7], [3, 8], [1, 1], [2, 2], [3, 10], [1, 5], [2, 4], [3, 2], [2, 4], [1, 6], [3, 6], [3, 3], [3, 8], [1, 3], [3, 6], [3, 3], [3, 7], [1, 7], [2, 9], [1, 10], [3, 8]]) == 0\nassert solution.maxNumberOfFamilies(11, [[8, 1], [7, 9], [6, 8], [8, 7], [2, 4], [10, 9], [3, 4], [2, 1], [10, 4], [4, 10], [10, 7], [4, 1], [7, 8], [10, 1], [5, 1], [6, 5], [9, 3], [10, 6], [8, 5], [11, 6], [7, 8], [4, 8], [5, 2], [6, 5], [3, 10], [8, 4], [1, 5], [10, 5], [11, 8], [1, 10], [1, 9], [3, 5], [2, 2], [8, 10], [2, 3], [11, 8], [8, 9], [2, 2], [10, 3], [2, 10], [9, 3], [8, 7], [2, 2], [8, 6], [10, 5], [6, 4], [8, 3], [5, 6], [5, 2], [8, 3], [6, 9], [6, 2], [4, 8], [7, 7], [9, 1], [2, 2], [8, 6], [10, 9], [1, 10], [7, 7], [4, 6], [7, 7], [1, 8], [5, 1], [3, 7], [2, 6], [5, 1], [8, 5], [10, 7], [6, 2], [2, 1], [10, 10], [11, 4], [7, 1], [11, 8], [1, 10], [2, 8], [11, 9], [8, 7], [6, 5], [7, 10], [3, 6], [8, 1], [5, 2], [6, 7], [7, 10], [7, 9], [6, 10], [1, 5]]) == 3\nassert solution.maxNumberOfFamilies(2, [[1, 6], [1, 2], [2, 2], [1, 9], [2, 3], [2, 2], [1, 6], [2, 4], [2, 10], [2, 10], [2, 8], [2, 2], [1, 10], [2, 4], [2, 4], [1, 6], [2, 5], [1, 2]]) == 0\nassert solution.maxNumberOfFamilies(2, [[1, 5], [2, 2], [1, 9], [1, 5], [1, 7], [2, 7], [1, 6], [1, 8], [1, 1], [2, 2], [2, 4], [2, 2], [1, 6], [1, 7], [2, 1], [1, 1], [1, 8]]) == 0\nassert solution.maxNumberOfFamilies(9, [[9, 3], [2, 4], [2, 2], [7, 6], [6, 8], [3, 7], [3, 5], [6, 4], [3, 4], [5, 4], [5, 4], [5, 4], [9, 6], [5, 4], [6, 4], [5, 4], [8, 4], [9, 5], [2, 5], [2, 3], [9, 7], [7, 7], [5, 3], [6, 8], [1, 9], [4, 5], [5, 2], [6, 3], [2, 5], [4, 7], [5, 10], [2, 1], [2, 8]]) == 4\nassert solution.maxNumberOfFamilies(5, [[4, 5], [5, 10], [1, 7], [4, 4], [2, 7], [3, 10], [2, 7], [2, 2], [4, 1], [3, 3], [5, 4], [5, 5], [5, 2], [4, 2], [2, 4], [5, 5], [2, 1], [1, 4], [5, 2], [4, 8], [4, 2], [3, 5], [4, 1], [1, 1], [1, 10], [1, 4], [2, 1]]) == 2\nassert solution.maxNumberOfFamilies(6, [[3, 6], [6, 6], [3, 4], [5, 7], [6, 7], [1, 8], [2, 1], [4, 7], [4, 3], [3, 10], [5, 10], [2, 7], [4, 10], [6, 4], [6, 2], [2, 6], [5, 4], [5, 9], [3, 2], [5, 10], [5, 6], [2, 10], [5, 7], [4, 8], [2, 9], [4, 8], [4, 7], [3, 9], [5, 10], [1, 9], [2, 7], [1, 9], [6, 1], [1, 7], [3, 2], [3, 3], [6, 3], [2, 4], [5, 5], [3, 3], [1, 4], [5, 5], [3, 4], [5, 7], [1, 1], [5, 1], [4, 10], [2, 3], [5, 9], [6, 7], [1, 10], [1, 3], [5, 9], [6, 8], [5, 8]]) == 0\nassert solution.maxNumberOfFamilies(7, [[7, 1], [6, 8], [7, 8], [5, 5], [4, 2], [2, 4], [3, 6], [1, 6], [1, 4], [4, 3], [6, 1], [3, 10], [2, 5], [7, 9], [6, 10], [5, 9], [1, 9], [7, 7], [2, 4], [5, 2], [3, 1], [2, 4], [3, 6], [7, 4], [3, 1], [5, 4]]) == 4\nassert solution.maxNumberOfFamilies(10, [[6, 4], [6, 7], [9, 9], [10, 6], [4, 4], [8, 9], [6, 6], [3, 4], [9, 1], [9, 7], [9, 7], [4, 3], [4, 7], [10, 3], [9, 5], [7, 1], [4, 4], [10, 8], [3, 4], [4, 6], [6, 10], [7, 8], [3, 8], [4, 4], [7, 7], [1, 5], [9, 3], [5, 7], [4, 6], [3, 2], [4, 4], [9, 7], [5, 10], [4, 9], [9, 9], [10, 2], [5, 6], [2, 1], [7, 8], [3, 5], [8, 8], [1, 2], [9, 1], [7, 7], [4, 3], [1, 7], [1, 1], [9, 2], [6, 8], [6, 10], [9, 6], [7, 9], [1, 1], [8, 9], [10, 9], [6, 5], [9, 4], [2, 9], [4, 5], [9, 7], [5, 7], [3, 3], [5, 1], [6, 4], [1, 8], [3, 8], [10, 8], [3, 5], [5, 9], [8, 10], [4, 4], [5, 9], [3, 2], [7, 1], [1, 6], [1, 5], [9, 8], [3, 6], [4, 2], [4, 1], [3, 10], [9, 4], [2, 8], [7, 4], [6, 2], [4, 10], [1, 4]]) == 3\nassert solution.maxNumberOfFamilies(9, [[6, 10], [6, 4], [2, 3], [8, 2], [7, 1], [8, 7], [4, 4], [2, 10], [5, 6], [2, 4], [1, 3], [6, 3], [8, 9], [5, 5], [6, 4], [6, 8], [8, 4], [8, 3], [5, 7], [6, 8], [4, 7], [7, 8], [9, 4], [8, 10], [2, 4], [3, 3], [8, 10], [7, 1], [9, 1], [3, 9], [7, 7], [5, 6], [1, 8], [5, 4], [8, 10], [2, 9], [1, 9], [9, 1], [2, 9], [6, 2], [5, 8], [9, 7], [2, 5], [8, 4], [5, 7], [6, 9], [5, 5], [9, 1], [2, 4], [2, 2], [8, 7], [8, 6], [8, 9], [4, 4], [2, 10], [9, 8], [4, 5], [7, 1], [8, 7], [1, 7], [2, 8], [4, 1], [6, 3], [7, 8], [6, 9]]) == 2\nassert solution.maxNumberOfFamilies(3, [[2, 2]]) == 5\nassert solution.maxNumberOfFamilies(1, [[1, 2], [1, 6], [1, 7], [1, 6], [1, 10], [1, 4], [1, 4]]) == 0\nassert solution.maxNumberOfFamilies(8, [[3, 3], [3, 5], [6, 9], [5, 2], [1, 6], [4, 5], [1, 5], [8, 1], [5, 2], [5, 9], [8, 1], [2, 9], [3, 4], [6, 7], [3, 3], [3, 3], [1, 10], [1, 6], [6, 1], [5, 6], [8, 10], [6, 2], [7, 3], [3, 1], [1, 3], [6, 4], [3, 4], [5, 7], [5, 4], [2, 2], [8, 4], [5, 7], [4, 9], [2, 3], [3, 4], [6, 8], [7, 8], [1, 6], [6, 1], [6, 6], [1, 10], [7, 7], [6, 8], [7, 9], [4, 7], [8, 10], [7, 4], [2, 1], [8, 8], [5, 6], [4, 10], [1, 9], [4, 5], [6, 10], [2, 6], [6, 2], [6, 3], [1, 9], [7, 4], [6, 5]]) == 1\nassert solution.maxNumberOfFamilies(1, [[1, 7], [1, 2], [1, 4], [1, 10], [1, 1], [1, 5]]) == 0\nassert solution.maxNumberOfFamilies(9, [[7, 2], [8, 8], [1, 5], [2, 9], [8, 8], [5, 6], [2, 8], [1, 8], [8, 3], [3, 9], [4, 8], [5, 4], [9, 8], [2, 10], [3, 2], [5, 2], [6, 6], [7, 9], [4, 6], [6, 2], [5, 2], [6, 8], [9, 9], [7, 7], [1, 7], [5, 3], [6, 3], [6, 2], [2, 3], [4, 3], [2, 1], [1, 6], [7, 8], [7, 6], [5, 9], [2, 5], [3, 6], [4, 7], [3, 3], [8, 8], [8, 8], [5, 2], [8, 8], [8, 1], [9, 9], [8, 4], [5, 2], [5, 7], [4, 8], [3, 3], [5, 6], [8, 9], [6, 9], [1, 6], [4, 4], [5, 1], [9, 7], [9, 8], [5, 1], [4, 1], [3, 8], [7, 8], [1, 6], [3, 3], [6, 1], [4, 8], [5, 7], [7, 4], [5, 5], [6, 8], [4, 2], [1, 9], [9, 8], [1, 1], [5, 9], [9, 5], [2, 8], [4, 3], [5, 10], [2, 3], [6, 9], [4, 2]]) == 0\nassert solution.maxNumberOfFamilies(8, [[3, 3], [5, 8], [3, 8], [7, 8], [8, 9], [4, 6], [5, 8], [6, 4], [3, 9], [2, 2], [1, 3], [3, 6], [5, 5], [1, 9], [4, 8], [7, 1], [1, 3], [1, 5], [6, 2], [6, 4], [3, 8], [7, 1], [8, 8], [2, 1], [2, 6], [6, 7], [1, 10], [2, 4], [2, 8], [1, 9], [8, 10], [5, 9], [6, 1], [5, 5], [7, 1], [8, 7], [3, 7], [7, 9], [4, 4], [3, 3], [2, 7], [2, 4], [8, 9], [2, 10], [8, 1], [5, 9], [4, 8]]) == 2\nassert solution.maxNumberOfFamilies(1, [[1, 2], [1, 1], [1, 4], [1, 2], [1, 8]]) == 0\nassert solution.maxNumberOfFamilies(9, [[8, 3], [7, 9], [1, 6], [9, 10], [1, 4], [6, 8], [8, 8], [9, 5], [4, 4], [3, 9], [5, 9], [2, 6], [7, 4], [9, 8], [6, 10], [6, 3], [3, 9], [9, 3], [3, 5], [5, 5], [3, 2], [8, 7], [3, 10], [6, 7], [8, 3], [7, 1], [3, 7], [5, 6], [6, 4], [9, 5], [3, 10], [2, 1], [8, 8], [2, 9], [1, 5], [9, 5], [6, 1], [6, 7], [3, 4], [5, 10], [3, 7], [8, 5], [6, 6], [6, 3], [9, 7], [6, 4], [5, 8], [1, 4], [1, 5], [4, 9], [4, 9], [2, 6], [1, 7], [2, 2], [7, 1], [9, 3], [4, 1]]) == 0\nassert solution.maxNumberOfFamilies(1, [[1, 9]]) == 1\nassert solution.maxNumberOfFamilies(6, [[3, 3], [2, 9], [3, 3], [6, 2], [6, 3], [1, 3], [1, 9], [6, 1], [5, 1], [6, 5], [3, 7]]) == 7\nassert solution.maxNumberOfFamilies(6, [[1, 7], [2, 1], [1, 6], [6, 3]]) == 10\nassert solution.maxNumberOfFamilies(1, [[1, 2], [1, 2], [1, 1], [1, 5], [1, 9], [1, 6], [1, 3], [1, 4], [1, 7]]) == 0\nassert solution.maxNumberOfFamilies(9, [[9, 8], [2, 5], [9, 3], [1, 2], [9, 6], [2, 3], [8, 10], [6, 6], [6, 10], [7, 10], [5, 3], [8, 3], [5, 9], [5, 4], [1, 9], [6, 6], [7, 10], [8, 4], [1, 10], [7, 8], [2, 1], [9, 6], [1, 7], [3, 9], [6, 5], [8, 2], [5, 9], [6, 2], [1, 2], [1, 5], [5, 10], [7, 2], [6, 2], [4, 4], [3, 5], [1, 1], [8, 3], [1, 4], [6, 2], [1, 8], [7, 1]]) == 4\nassert solution.maxNumberOfFamilies(5, [[4, 10], [3, 7], [2, 3], [2, 7], [3, 4], [1, 10], [5, 3], [3, 3], [2, 7], [1, 6], [5, 1], [1, 7], [2, 8], [5, 5], [1, 10], [4, 5], [1, 1], [2, 2]]) == 3\nassert solution.maxNumberOfFamilies(8, [[2, 10], [8, 10], [5, 10], [1, 7], [8, 3], [4, 1], [2, 6], [1, 10], [7, 6], [8, 7], [4, 9], [5, 3], [2, 5], [1, 8], [8, 1], [5, 7], [1, 9], [1, 8], [3, 4], [8, 4], [4, 8], [3, 3], [5, 10], [6, 7], [5, 6], [8, 10], [3, 3], [1, 3], [2, 5], [5, 3], [1, 1], [5, 10], [4, 3], [2, 3], [7, 2]]) == 3\nassert solution.maxNumberOfFamilies(3, [[1, 6], [1, 3], [1, 1], [2, 2], [3, 10], [1, 6], [1, 8], [2, 10], [1, 10], [3, 4], [3, 10], [3, 6], [2, 4], [1, 1], [1, 2], [2, 4], [3, 5], [2, 10], [1, 7], [3, 8], [3, 6], [1, 6], [2, 4], [1, 4], [1, 6], [2, 6], [3, 9], [1, 10]]) == 0\nassert solution.maxNumberOfFamilies(1, [[1, 9], [1, 4]]) == 0\nassert solution.maxNumberOfFamilies(3, [[2, 6], [3, 2], [3, 1], [3, 10], [2, 6], [2, 2], [3, 7], [2, 4], [1, 3], [2, 10], [1, 6], [2, 9], [3, 3], [1, 10], [1, 1], [1, 1], [2, 10], [3, 7], [3, 9], [1, 5], [1, 2], [1, 1], [2, 9], [2, 10], [1, 4]]) == 0\nassert solution.maxNumberOfFamilies(2, [[1, 2], [2, 10], [1, 10], [1, 3], [2, 8], [2, 5], [1, 3]]) == 1\nassert solution.maxNumberOfFamilies(11, [[2, 5], [6, 6], [3, 1], [10, 7], [11, 2], [11, 2], [10, 3], [1, 1], [7, 6], [4, 5], [1, 7], [4, 4], [7, 4], [5, 9], [6, 10], [8, 9], [3, 3], [3, 10], [1, 1], [8, 6], [7, 6], [10, 5], [1, 8], [8, 3], [6, 1], [1, 8], [4, 8], [7, 6], [5, 10], [6, 10], [1, 9], [6, 2], [3, 3], [2, 3], [6, 5], [1, 10], [7, 10], [7, 10], [7, 6], [8, 4], [5, 9], [5, 4], [11, 1], [7, 4], [7, 9], [11, 7], [1, 8], [5, 4], [2, 6], [5, 9], [2, 8], [7, 6], [9, 4], [2, 3], [4, 4], [9, 6], [11, 4], [1, 3], [3, 8], [1, 6], [4, 8], [6, 9], [5, 6], [5, 8], [10, 4], [11, 10], [9, 3], [11, 10], [11, 5], [10, 5], [4, 3], [3, 7], [10, 1], [11, 7], [3, 3], [11, 5], [9, 9], [11, 5], [9, 7], [8, 7], [4, 7], [9, 6], [9, 1], [3, 9], [8, 3], [6, 1], [8, 9], [5, 3], [10, 2], [9, 1], [9, 6], [7, 9], [10, 3], [9, 2], [8, 3], [8, 5], [11, 8], [4, 4]]) == 0\nassert solution.maxNumberOfFamilies(5, [[5, 2], [4, 3], [1, 10], [3, 5], [4, 1], [1, 4], [1, 4], [4, 9], [4, 3], [2, 8], [5, 1], [5, 10], [3, 5], [5, 1], [5, 3], [3, 10], [4, 9], [2, 3], [4, 4], [2, 8], [1, 4], [2, 7], [5, 3], [2, 8], [1, 4], [3, 3], [3, 4], [3, 2], [5, 6], [1, 5], [1, 1], [2, 7], [2, 9], [3, 5]]) == 2\nassert solution.maxNumberOfFamilies(7, [[7, 3], [5, 8], [6, 6], [7, 6], [4, 6], [7, 8]]) == 9\nassert solution.maxNumberOfFamilies(9, [[7, 10], [4, 9], [6, 4], [7, 10], [4, 9], [1, 5], [4, 8], [3, 6], [5, 9], [3, 4], [3, 9], [6, 7], [7, 5], [7, 8], [3, 1], [9, 6], [2, 3], [1, 4], [2, 6], [1, 2], [6, 7], [5, 5], [6, 10], [6, 2], [5, 7], [3, 4], [5, 1], [3, 2], [7, 9], [5, 5], [9, 10], [6, 5], [4, 7], [2, 5], [1, 1], [5, 4], [2, 5], [1, 1], [9, 10], [4, 6], [5, 10]]) == 5\nassert solution.maxNumberOfFamilies(3, [[2, 9], [2, 1], [3, 2], [3, 4], [2, 2]]) == 4",
  "inefficient_solution": "import itertools\nimport copy\n\nclass Solution:\n    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:\n        reserved = {}\n        for i, j in reservedSeats:\n            reserved.setdefault(i, []).append(j)\n        seats = [[] for _ in range(n)]\n        for i, r in enumerate(reserved):\n            seats[i] = r\n        ans = 0\n        for s in itertools.combinations(seats, 10):\n            seat = s + ['0'] * (10 - len(s))\n            seat = [int(i) for i in seat]\n            mask1 = 0b0111100000\n            mask2 = 0b0000011110\n            mask3 = 0b0001111000\n            mask = mask1 | mask2 | mask3\n            seat = [i & mask for i in seat]\n            row = [0, 1, 2, 3]\n            groups = []\n            for i in row:\n                if seat[i*2:i*2+4] == [1,1,1,1]:\n                    groups.append(1)\n                elif seat[i*2:i*2+4] == [0,0,0,0]:\n                    groups.append(2)\n                else:\n                    groups.append(0)\n            if sum(groups) >= 4:\n                ans += 1\n        return ans",
  "is_python": true
}