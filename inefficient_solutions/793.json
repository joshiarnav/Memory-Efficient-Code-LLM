{
  "problem_idx": 793,
  "task_name": "Preimage Size of Factorial Zeroes Function",
  "markdown_description": "\nLet `f(x)` be the number of zeroes at the end of `x!`. Recall that `x! = 1 * 2 * 3 * ... * x` and by convention, `0! = 1`.\n\n\n* For example, `f(3) = 0` because `3! = 6` has no zeroes at the end, while `f(11) = 2` because `11! = 39916800` has two zeroes at the end.\n\n\nGiven an integer `k`, return the number of non-negative integers `x` have the property that `f(x) = k`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** k = 0\n**Output:** 5\n**Explanation:** 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** k = 5\n**Output:** 0\n**Explanation:** There is no x such that x! ends in k = 5 zeroes.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** k = 3\n**Output:** 5\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= k <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def preimageSizeFZF(self, k: int) -> int:\n        def f(x):\n            if x == 0:\n                return 0\n            return x // 5 + f(x // 5)\n\n        def g(k):\n            return bisect_left(range(5 * k), k, key=f)\n\n        return g(k + 1) - g(k)\n",
  "test_case_generator": "\nimport random\nimport bisect\n\nclass Solution:\n    def preimageSizeFZF(self, k: int) -> int:\n        def f(x):\n            if x == 0:\n                return 0\n            return x // 5 + f(x // 5)\n\n        def g(k):\n            return bisect.bisect_left(range(5 * k), k, key=f)\n\n        return g(k + 1) - g(k)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random k value\n    k = random.randint(0, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.preimageSizeFZF(k)\n\n    return k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.preimageSizeFZF(k) == expected_result\n        print(f\"assert solution.preimageSizeFZF({k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.preimageSizeFZF({k}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.preimageSizeFZF(51) == 5\nassert solution.preimageSizeFZF(100) == 5\nassert solution.preimageSizeFZF(84) == 5\nassert solution.preimageSizeFZF(62) == 5\nassert solution.preimageSizeFZF(73) == 0\nassert solution.preimageSizeFZF(76) == 5\nassert solution.preimageSizeFZF(27) == 5\nassert solution.preimageSizeFZF(51) == 5\nassert solution.preimageSizeFZF(85) == 0\nassert solution.preimageSizeFZF(38) == 5\nassert solution.preimageSizeFZF(48) == 0\nassert solution.preimageSizeFZF(35) == 5\nassert solution.preimageSizeFZF(20) == 5\nassert solution.preimageSizeFZF(94) == 5\nassert solution.preimageSizeFZF(62) == 5\nassert solution.preimageSizeFZF(74) == 5\nassert solution.preimageSizeFZF(70) == 5\nassert solution.preimageSizeFZF(33) == 5\nassert solution.preimageSizeFZF(21) == 5\nassert solution.preimageSizeFZF(35) == 5\nassert solution.preimageSizeFZF(95) == 5\nassert solution.preimageSizeFZF(38) == 5\nassert solution.preimageSizeFZF(14) == 5\nassert solution.preimageSizeFZF(26) == 5\nassert solution.preimageSizeFZF(8) == 5\nassert solution.preimageSizeFZF(21) == 5\nassert solution.preimageSizeFZF(8) == 5\nassert solution.preimageSizeFZF(4) == 5\nassert solution.preimageSizeFZF(92) == 0\nassert solution.preimageSizeFZF(20) == 5\nassert solution.preimageSizeFZF(51) == 5\nassert solution.preimageSizeFZF(90) == 5\nassert solution.preimageSizeFZF(83) == 5\nassert solution.preimageSizeFZF(59) == 5\nassert solution.preimageSizeFZF(37) == 5\nassert solution.preimageSizeFZF(44) == 5\nassert solution.preimageSizeFZF(58) == 5\nassert solution.preimageSizeFZF(12) == 5\nassert solution.preimageSizeFZF(23) == 0\nassert solution.preimageSizeFZF(77) == 5\nassert solution.preimageSizeFZF(67) == 0\nassert solution.preimageSizeFZF(99) == 5\nassert solution.preimageSizeFZF(85) == 0\nassert solution.preimageSizeFZF(29) == 0\nassert solution.preimageSizeFZF(96) == 5\nassert solution.preimageSizeFZF(72) == 5\nassert solution.preimageSizeFZF(60) == 0\nassert solution.preimageSizeFZF(66) == 5\nassert solution.preimageSizeFZF(28) == 5\nassert solution.preimageSizeFZF(12) == 5\nassert solution.preimageSizeFZF(91) == 0\nassert solution.preimageSizeFZF(85) == 0\nassert solution.preimageSizeFZF(1) == 5\nassert solution.preimageSizeFZF(7) == 5\nassert solution.preimageSizeFZF(19) == 5\nassert solution.preimageSizeFZF(82) == 5\nassert solution.preimageSizeFZF(44) == 5\nassert solution.preimageSizeFZF(65) == 5\nassert solution.preimageSizeFZF(80) == 5\nassert solution.preimageSizeFZF(60) == 0\nassert solution.preimageSizeFZF(89) == 5\nassert solution.preimageSizeFZF(29) == 0\nassert solution.preimageSizeFZF(68) == 5\nassert solution.preimageSizeFZF(69) == 5\nassert solution.preimageSizeFZF(91) == 0\nassert solution.preimageSizeFZF(14) == 5\nassert solution.preimageSizeFZF(90) == 5\nassert solution.preimageSizeFZF(90) == 5\nassert solution.preimageSizeFZF(60) == 0\nassert solution.preimageSizeFZF(24) == 5\nassert solution.preimageSizeFZF(24) == 5\nassert solution.preimageSizeFZF(86) == 5\nassert solution.preimageSizeFZF(68) == 5\nassert solution.preimageSizeFZF(82) == 5\nassert solution.preimageSizeFZF(64) == 5\nassert solution.preimageSizeFZF(30) == 0\nassert solution.preimageSizeFZF(6) == 5\nassert solution.preimageSizeFZF(30) == 0\nassert solution.preimageSizeFZF(99) == 5\nassert solution.preimageSizeFZF(47) == 5\nassert solution.preimageSizeFZF(61) == 0\nassert solution.preimageSizeFZF(58) == 5\nassert solution.preimageSizeFZF(91) == 0\nassert solution.preimageSizeFZF(79) == 0\nassert solution.preimageSizeFZF(98) == 0\nassert solution.preimageSizeFZF(28) == 5\nassert solution.preimageSizeFZF(99) == 5\nassert solution.preimageSizeFZF(7) == 5\nassert solution.preimageSizeFZF(30) == 0\nassert solution.preimageSizeFZF(66) == 5\nassert solution.preimageSizeFZF(62) == 5\nassert solution.preimageSizeFZF(87) == 5\nassert solution.preimageSizeFZF(98) == 0\nassert solution.preimageSizeFZF(60) == 0\nassert solution.preimageSizeFZF(46) == 5\nassert solution.preimageSizeFZF(93) == 5\nassert solution.preimageSizeFZF(78) == 5\nassert solution.preimageSizeFZF(58) == 5\nassert solution.preimageSizeFZF(45) == 5\nassert solution.preimageSizeFZF(98) == 0",
  "inefficient_solution": "class Solution:\n    def preimageSizeFZF(self, k: int) -> int:\n        max_k = 10**9\n        k += 1\n        f_values = [0] * (max_k + 1)\n        for x in range(1, max_k + 1):\n            if x == 0:\n                f_values[x] = 0\n            else:\n                f_values[x] = x // 5 + f_values[x // 5]\n\n        f_values_set = set(f_values)\n\n        def g(k):\n            for x in range(5 * k):\n                if f_values[x] == k:\n                    return x\n\n        return g(k + 1) - g(k)",
  "is_python": true
}