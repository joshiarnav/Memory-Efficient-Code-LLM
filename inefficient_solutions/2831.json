{
  "problem_idx": 2831,
  "task_name": "Find the Longest Equal Subarray",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nA subarray is called **equal** if all of its elements are equal. Note that the empty subarray is an **equal** subarray.\n\n\nReturn *the length of the **longest** possible equal subarray after deleting **at most*** `k` *elements from* `nums`.\n\n\nA **subarray** is a contiguous, possibly empty sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,3,1,3], k = 3\n**Output:** 3\n**Explanation:** It's optimal to delete the elements at index 2 and index 4.\nAfter deleting them, nums becomes equal to [1, 3, 3, 3].\nThe longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.\nIt can be proven that no longer equal subarrays can be created.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,2,2,1,1], k = 2\n**Output:** 4\n**Explanation:** It's optimal to delete the elements at index 2 and index 3.\nAfter deleting them, nums becomes equal to [1, 1, 1, 1].\nThe array itself is an equal subarray, so the answer is 4.\nIt can be proven that no longer equal subarrays can be created.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= nums.length`\n* `0 <= k <= nums.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestEqualSubarray(self, nums: List[int], k: int) -> int:\n        cnt = Counter()\n        l = 0\n        mx = 0\n        for r, x in enumerate(nums):\n            cnt[x] += 1\n            mx = max(mx, cnt[x])\n            if r - l + 1 - mx > k:\n                cnt[nums[l]] -= 1\n                l += 1\n        return mx\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def longestEqualSubarray(self, nums: List[int], k: int) -> int:\n        cnt = Counter()\n        l = 0\n        mx = 0\n        for r, x in enumerate(nums):\n            cnt[x] += 1\n            mx = max(mx, cnt[x])\n            if r - l + 1 - mx > k:\n                cnt[nums[l]] -= 1\n                l += 1\n        return mx\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(1, 6), k=random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(0, len(nums))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestEqualSubarray(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestEqualSubarray(nums, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.longestEqualSubarray({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestEqualSubarray([2, 4, 2, 5], 0) == 1\nassert solution.longestEqualSubarray([1, 2, 3, 4, 4, 1, 1], 7) == 3\nassert solution.longestEqualSubarray([4, 1, 3], 1) == 1\nassert solution.longestEqualSubarray([3, 1, 3], 1) == 2\nassert solution.longestEqualSubarray([3, 3], 0) == 2\nassert solution.longestEqualSubarray([2, 3, 4, 5, 1], 5) == 1\nassert solution.longestEqualSubarray([5, 2, 2, 3], 4) == 2\nassert solution.longestEqualSubarray([5, 4, 2, 5, 4, 5], 1) == 2\nassert solution.longestEqualSubarray([3, 5], 1) == 1\nassert solution.longestEqualSubarray([4, 1, 1, 5, 1, 1, 3, 3, 5, 5], 9) == 4\nassert solution.longestEqualSubarray([3, 1, 5, 5, 5, 2, 5, 1, 3], 8) == 4\nassert solution.longestEqualSubarray([5, 2, 3], 3) == 1\nassert solution.longestEqualSubarray([4, 3, 3, 3, 1], 2) == 3\nassert solution.longestEqualSubarray([5, 3, 4, 4, 3, 5, 1, 2, 4], 4) == 3\nassert solution.longestEqualSubarray([2, 2, 5, 5, 3, 4, 3, 5], 7) == 3\nassert solution.longestEqualSubarray([5, 2, 1, 2, 4, 3, 5], 0) == 1\nassert solution.longestEqualSubarray([5, 2, 3], 1) == 1\nassert solution.longestEqualSubarray([5, 5, 3], 3) == 2\nassert solution.longestEqualSubarray([4, 4, 1, 3], 0) == 2\nassert solution.longestEqualSubarray([3, 1, 5], 3) == 1\nassert solution.longestEqualSubarray([5, 3, 2, 3], 3) == 2\nassert solution.longestEqualSubarray([1, 5, 1, 1, 2, 4, 4, 3], 4) == 3\nassert solution.longestEqualSubarray([2, 4, 3, 4, 1, 4, 4], 7) == 4\nassert solution.longestEqualSubarray([5, 5], 0) == 2\nassert solution.longestEqualSubarray([1, 4, 5, 1, 4, 4, 1], 7) == 3\nassert solution.longestEqualSubarray([1, 2, 3, 1, 3, 3, 4, 2], 1) == 3\nassert solution.longestEqualSubarray([3, 4, 1, 2, 3, 5, 4], 2) == 1\nassert solution.longestEqualSubarray([3, 2, 4, 4], 0) == 2\nassert solution.longestEqualSubarray([1, 1, 4, 2, 3, 5], 3) == 2\nassert solution.longestEqualSubarray([2, 1, 5, 4, 1, 4, 4, 3, 2], 2) == 3\nassert solution.longestEqualSubarray([5, 4, 5, 1, 5, 1, 3], 1) == 2\nassert solution.longestEqualSubarray([5, 2, 5, 3, 5, 2, 5, 2, 4, 4], 8) == 4\nassert solution.longestEqualSubarray([4, 1, 1, 3, 3], 3) == 2\nassert solution.longestEqualSubarray([3, 1, 2, 4, 5], 4) == 1\nassert solution.longestEqualSubarray([5, 1, 5, 1], 1) == 2\nassert solution.longestEqualSubarray([3, 1], 0) == 1\nassert solution.longestEqualSubarray([4, 2, 1, 1, 1, 3, 2], 1) == 3\nassert solution.longestEqualSubarray([5, 1, 4, 5, 1], 1) == 1\nassert solution.longestEqualSubarray([4, 5, 1, 5, 4, 4, 3, 4, 2], 6) == 4\nassert solution.longestEqualSubarray([1, 2, 1], 3) == 2\nassert solution.longestEqualSubarray([2, 4, 5, 1, 3, 4, 4, 4], 6) == 4\nassert solution.longestEqualSubarray([1, 5, 4, 4], 0) == 2\nassert solution.longestEqualSubarray([2, 1], 2) == 1\nassert solution.longestEqualSubarray([2, 5, 1, 5, 5, 3], 5) == 3\nassert solution.longestEqualSubarray([5, 5, 2, 2, 4, 2, 5, 5, 2, 4], 10) == 4\nassert solution.longestEqualSubarray([2, 2, 4, 3], 0) == 2\nassert solution.longestEqualSubarray([4, 1, 1, 4, 3], 5) == 2\nassert solution.longestEqualSubarray([2, 5, 4, 1, 3], 3) == 1\nassert solution.longestEqualSubarray([4, 5, 3, 1, 2, 5, 5, 2, 3, 4], 9) == 3\nassert solution.longestEqualSubarray([4, 5, 4, 3], 2) == 2\nassert solution.longestEqualSubarray([5, 5, 2], 0) == 2\nassert solution.longestEqualSubarray([1, 2, 3, 3, 4, 2, 4, 5, 5], 8) == 2\nassert solution.longestEqualSubarray([1, 3, 3, 5, 3, 1, 5, 3], 3) == 4\nassert solution.longestEqualSubarray([3, 4, 3], 3) == 2\nassert solution.longestEqualSubarray([5, 1, 1, 4, 5], 2) == 2\nassert solution.longestEqualSubarray([5, 5, 1, 2, 2, 4, 1], 7) == 2\nassert solution.longestEqualSubarray([5, 5, 3, 1, 1, 4, 1, 5, 1, 3], 2) == 4\nassert solution.longestEqualSubarray([1, 5, 3, 5, 2], 1) == 2\nassert solution.longestEqualSubarray([5, 1, 2, 5, 2, 5, 2, 3, 5, 3], 10) == 4\nassert solution.longestEqualSubarray([5, 4, 1, 1, 5, 3], 4) == 2\nassert solution.longestEqualSubarray([1, 5, 4, 1, 4, 3, 5], 0) == 1\nassert solution.longestEqualSubarray([1, 2, 2, 4, 2, 3, 4, 1, 2], 3) == 3\nassert solution.longestEqualSubarray([5, 4, 2, 5, 2, 3, 3, 3, 5, 4], 0) == 3\nassert solution.longestEqualSubarray([2, 5, 1, 5, 2, 4, 4, 1], 0) == 2\nassert solution.longestEqualSubarray([2, 4, 2, 5, 2, 5], 6) == 3\nassert solution.longestEqualSubarray([1, 4, 1, 4, 3, 2], 2) == 2\nassert solution.longestEqualSubarray([4, 1], 2) == 1\nassert solution.longestEqualSubarray([2, 3, 3], 1) == 2\nassert solution.longestEqualSubarray([3, 5, 4, 5, 5, 1, 5, 3, 1], 9) == 4\nassert solution.longestEqualSubarray([1, 1, 3, 5, 2], 0) == 2\nassert solution.longestEqualSubarray([3, 2, 1, 2, 4, 5, 1], 3) == 2\nassert solution.longestEqualSubarray([3, 4, 3, 4, 1, 2, 3, 1, 1], 4) == 3\nassert solution.longestEqualSubarray([1, 5, 2, 4, 3, 2, 2, 1, 1], 5) == 3\nassert solution.longestEqualSubarray([1, 5, 5, 5], 4) == 3\nassert solution.longestEqualSubarray([2, 2, 1, 3, 4, 2, 2], 2) == 2\nassert solution.longestEqualSubarray([4, 5, 5, 2, 3, 2, 2, 5, 4, 5], 6) == 4\nassert solution.longestEqualSubarray([2, 1, 4, 3, 5, 3], 0) == 1\nassert solution.longestEqualSubarray([4, 4, 5, 5, 2, 4, 5], 2) == 3\nassert solution.longestEqualSubarray([2, 1], 1) == 1\nassert solution.longestEqualSubarray([4, 4, 3, 1, 2, 5, 5], 2) == 2\nassert solution.longestEqualSubarray([5, 4], 1) == 1\nassert solution.longestEqualSubarray([1, 1], 0) == 2\nassert solution.longestEqualSubarray([4, 4], 0) == 2\nassert solution.longestEqualSubarray([2, 3], 0) == 1\nassert solution.longestEqualSubarray([4, 4, 3, 3], 1) == 2\nassert solution.longestEqualSubarray([5, 4], 1) == 1\nassert solution.longestEqualSubarray([2, 5, 4, 2], 0) == 1\nassert solution.longestEqualSubarray([5, 1, 4, 4, 4], 4) == 3\nassert solution.longestEqualSubarray([1, 1, 5, 2, 3, 3], 2) == 2\nassert solution.longestEqualSubarray([2, 5, 4, 1, 4, 3, 3, 3, 1], 7) == 3\nassert solution.longestEqualSubarray([3, 1, 3, 5, 1, 5, 1], 2) == 2\nassert solution.longestEqualSubarray([3, 1, 2, 2], 0) == 2\nassert solution.longestEqualSubarray([5, 5, 5, 1, 4, 4, 4, 2, 1, 2], 8) == 3\nassert solution.longestEqualSubarray([5, 4, 4, 5, 3, 4, 1, 4, 2], 0) == 2\nassert solution.longestEqualSubarray([1, 2, 2], 1) == 2\nassert solution.longestEqualSubarray([2, 3, 2, 3, 2, 3, 2, 3, 4, 1], 6) == 4\nassert solution.longestEqualSubarray([4, 4, 2, 3, 3, 5, 2, 1, 3, 5], 10) == 3\nassert solution.longestEqualSubarray([4, 3, 3, 3, 5, 2], 5) == 3\nassert solution.longestEqualSubarray([4, 2, 3, 5, 5, 3], 2) == 2\nassert solution.longestEqualSubarray([5, 4, 2, 1], 3) == 1",
  "inefficient_solution": "class Solution:\n    def longestEqualSubarray(self, nums, k):\n        max_length = 0\n        for i in range(len(nums)):\n            count_dict = {}\n            seen = set()\n            max_count = 0\n            for j in range(i, len(nums)):\n                count_dict[nums[j]] = count_dict.get(nums[j], 0) + 1\n                seen.add(nums[j])\n                if len(seen) > 1:\n                    break\n                max_count = max(max_count, count_dict[nums[j]])\n                if j - i + 1 - max_count > k:\n                    break\n                max_length = max(max_length, j - i + 1)\n        return max_length",
  "is_python": true
}