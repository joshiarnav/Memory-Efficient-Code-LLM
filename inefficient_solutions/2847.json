{
  "problem_idx": 2847,
  "task_name": "Smallest Number With Given Digit Product",
  "markdown_description": "\nGiven a **positive** integer `n`, return *a string representing the **smallest positive** integer such that the product of its digits is equal to* `n`*, or* `\"-1\"` *if no such number exists*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 105\n**Output:** \"357\"\n**Explanation:** 3 * 5 * 7 = 105. It can be shown that 357 is the smallest number with a product of digits equal to 105. So the answer would be \"105\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 7\n**Output:** \"7\"\n**Explanation:** Since 7 has only one digit, its product of digits would be 7. We will show that 7 is the smallest number with a product of digits equal to 7. Since the product of numbers 1 to 6 is 1 to 6 respectively, so \"7\" would be the answer.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 44\n**Output:** \"-1\"\n**Explanation:** It can be shown that there is no number such that its product of digits is equal to 44. So the answer would be \"-1\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1018`\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestNumber(self, n: int) -> str:\n        cnt = [0] * 10\n        for i in range(9, 1, -1):\n            while n % i == 0:\n                n //= i\n                cnt[i] += 1\n        if n > 1:\n            return \"-1\"\n        ans = \"\".join(str(i) * cnt[i] for i in range(2, 10))\n        return ans if ans else \"1\"\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestNumber(self, n: int) -> str:\n        cnt = [0] * 10\n        for i in range(9, 1, -1):\n            while n % i == 0:\n                n //= i\n                cnt[i] += 1\n        if n > 1:\n            return \"-1\"\n        ans = \"\".join(str(i) * cnt[i] for i in range(2, 10))\n        return ans if ans else \"1\"\n\ndef generate_test_case():\n    solution = Solution()\n    nums = random.randint(1, 10**18) # Generate a random number within the given constraints\n    \n    expected_result = solution.smallestNumber(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestNumber(num) == expected_result\n        print(f\"assert solution.smallestNumber({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.smallestNumber({num}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestNumber(519237592248596118) == -1\nassert solution.smallestNumber(664270719178925954) == -1\nassert solution.smallestNumber(185292575366213814) == -1\nassert solution.smallestNumber(758141808021030260) == -1\nassert solution.smallestNumber(315081711045284252) == -1\nassert solution.smallestNumber(837169150844104829) == -1\nassert solution.smallestNumber(730442455522356705) == -1\nassert solution.smallestNumber(538760362602629587) == -1\nassert solution.smallestNumber(627759790857497227) == -1\nassert solution.smallestNumber(745601376767732592) == -1\nassert solution.smallestNumber(132343628055140848) == -1\nassert solution.smallestNumber(309241456433723508) == -1\nassert solution.smallestNumber(816757148959720976) == -1\nassert solution.smallestNumber(962162791857705804) == -1\nassert solution.smallestNumber(29845243810364561) == -1\nassert solution.smallestNumber(397421977548773668) == -1\nassert solution.smallestNumber(965509321075474518) == -1\nassert solution.smallestNumber(913801413476723765) == -1\nassert solution.smallestNumber(611320252345046867) == -1\nassert solution.smallestNumber(76016509107683641) == -1\nassert solution.smallestNumber(622152602848636259) == -1\nassert solution.smallestNumber(301085482141966124) == -1\nassert solution.smallestNumber(30199224585474348) == -1\nassert solution.smallestNumber(724795608368557702) == -1\nassert solution.smallestNumber(566451389094301607) == -1\nassert solution.smallestNumber(568947712203009102) == -1\nassert solution.smallestNumber(401913864641108143) == -1\nassert solution.smallestNumber(880369909805976461) == -1\nassert solution.smallestNumber(424751657895472373) == -1\nassert solution.smallestNumber(942581091936463138) == -1\nassert solution.smallestNumber(940908701792086116) == -1\nassert solution.smallestNumber(83085696574584368) == -1\nassert solution.smallestNumber(263142185359607736) == -1\nassert solution.smallestNumber(37235937345311887) == -1\nassert solution.smallestNumber(700661038125031379) == -1\nassert solution.smallestNumber(124948929544870782) == -1\nassert solution.smallestNumber(83255758650081184) == -1\nassert solution.smallestNumber(613389010938901337) == -1\nassert solution.smallestNumber(213827757778963622) == -1\nassert solution.smallestNumber(955480251031592210) == -1\nassert solution.smallestNumber(892434407586034419) == -1\nassert solution.smallestNumber(201836198808224821) == -1\nassert solution.smallestNumber(183920303988135714) == -1\nassert solution.smallestNumber(843116616890509428) == -1\nassert solution.smallestNumber(620757707270411884) == -1\nassert solution.smallestNumber(831235782516639770) == -1\nassert solution.smallestNumber(764742900040371463) == -1\nassert solution.smallestNumber(452006639794421152) == -1\nassert solution.smallestNumber(129846266481507349) == -1\nassert solution.smallestNumber(487722050632457857) == -1\nassert solution.smallestNumber(617849373868471804) == -1\nassert solution.smallestNumber(761158989117339221) == -1\nassert solution.smallestNumber(817456150409872156) == -1\nassert solution.smallestNumber(955093676062388664) == -1\nassert solution.smallestNumber(442793275946584103) == -1\nassert solution.smallestNumber(139918318693376702) == -1\nassert solution.smallestNumber(54714709446411972) == -1\nassert solution.smallestNumber(729724736509350895) == -1\nassert solution.smallestNumber(619613940641634137) == -1\nassert solution.smallestNumber(702811327912341609) == -1\nassert solution.smallestNumber(172555274421799132) == -1\nassert solution.smallestNumber(88659665410417320) == -1\nassert solution.smallestNumber(604480516457047851) == -1\nassert solution.smallestNumber(779000460269128561) == -1\nassert solution.smallestNumber(899909241287412371) == -1\nassert solution.smallestNumber(516000286649820197) == -1\nassert solution.smallestNumber(733070745293558889) == -1\nassert solution.smallestNumber(190793932507912088) == -1\nassert solution.smallestNumber(270957547311020043) == -1\nassert solution.smallestNumber(510199283756889932) == -1\nassert solution.smallestNumber(620061603576833990) == -1\nassert solution.smallestNumber(802617207136779563) == -1\nassert solution.smallestNumber(852091995433858579) == -1\nassert solution.smallestNumber(485116536695217459) == -1\nassert solution.smallestNumber(545819568838692076) == -1\nassert solution.smallestNumber(742170166686761196) == -1\nassert solution.smallestNumber(171296104162578720) == -1\nassert solution.smallestNumber(871908462341994274) == -1\nassert solution.smallestNumber(525357562438137098) == -1\nassert solution.smallestNumber(551545300821059167) == -1\nassert solution.smallestNumber(802827809540433610) == -1\nassert solution.smallestNumber(140152893770705397) == -1\nassert solution.smallestNumber(962795125464369522) == -1\nassert solution.smallestNumber(290034077348709290) == -1\nassert solution.smallestNumber(81060026234667261) == -1\nassert solution.smallestNumber(921656225278222395) == -1\nassert solution.smallestNumber(780653294387388109) == -1\nassert solution.smallestNumber(24077467896594554) == -1\nassert solution.smallestNumber(258260267525633590) == -1\nassert solution.smallestNumber(925157440071956344) == -1\nassert solution.smallestNumber(710688130810371014) == -1\nassert solution.smallestNumber(877057106209176299) == -1\nassert solution.smallestNumber(441582251131155797) == -1\nassert solution.smallestNumber(185975187843803432) == -1\nassert solution.smallestNumber(512309486972073552) == -1\nassert solution.smallestNumber(289201617973063674) == -1\nassert solution.smallestNumber(614789340045381009) == -1\nassert solution.smallestNumber(981965622500385828) == -1\nassert solution.smallestNumber(503991662590319848) == -1\nassert solution.smallestNumber(205459876306548618) == -1",
  "inefficient_solution": "class Solution:\n    def smallestNumber(self, n: int) -> str:\n        factors = []\n        i = 9\n        while i > 1:\n            count = 0\n            while n % i == 0:\n                count += 1\n                n //= i\n            if count > 0:\n                factors.append((i, count))\n            i -= 1\n\n        if n > 1:\n            return \"-1\"\n\n        ans = []\n        for digit, count in factors:\n            ans += [str(digit)] * count\n\n        return \"\".join(ans)",
  "is_python": true
}