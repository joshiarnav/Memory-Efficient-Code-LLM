{
  "problem_idx": 1351,
  "task_name": "Count Negative Numbers in a Sorted Matrix",
  "markdown_description": "\nGiven a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return *the number of **negative** numbers in* `grid`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\n**Output:** 8\n**Explanation:** There are 8 negatives number in the matrix.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[3,2],[1,0]]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 100`\n* `-100 <= grid[i][j] <= 100`\n\n\n\u00a0\n\n\n**Follow up:** Could you find an `O(n + m)` solution?\n\n",
  "canonical_solution": "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        i, j = m - 1, 0\n        ans = 0\n        while i >= 0 and j < n:\n            if grid[i][j] < 0:\n                ans += n - j\n                i -= 1\n            else:\n                j += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        i, j = m - 1, 0\n        ans = 0\n        while i >= 0 and j < n:\n            if grid[i][j] < 0:\n                ans += n - j\n                i -= 1\n            else:\n                j += 1\n        return ans\n\ndef generate_test_case() -> (List[List[int]], int):\n    solution = Solution()\n    \n    # Generate random m and n values\n    m = random.randint(1, 11)\n    n = random.randint(1, 11)\n    \n    # Generate random grid with m x n size\n    grid = []\n    for _ in range(m):\n        row = []\n        for _ in range(n):\n            row.append(random.randint(-100, 100))\n        grid.append(row)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countNegatives(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    solution = Solution()\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        assert solution.countNegatives(grid) == expected_result\n        print(f\"assert solution.countNegatives({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countNegatives({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countNegatives([[-41, -43, -91, -85, 59, -36, 9, -19, 68, -93, 39], [62, -82, -51, -55, 74, 92, 25, 32, 12, -88, -8], [15, -45, -2, 18, -95, 17, 60, 44, 99, -42, 32]]) == 30\nassert solution.countNegatives([[-54, 20, 19, 31, -20, 47, 1, 50, 46, 77], [-80, 22, 15, 75, -31, 25, -42, -22, -61, -75], [-27, -22, -3, -19, 2, -37, -24, 91, 4, -41]]) == 30\nassert solution.countNegatives([[-41, -23, -17, -18, 1, 46, 74, -35, -51, -65, -71], [-87, 84, -47, 18, -60, 9, 6, -34, -8, 48, 80], [85, 21, 88, -53, -35, 69, -85, 38, 5, -63, -56], [-90, 65, -35, 49, -84, 82, 3, 9, -47, -34, -3]]) == 30\nassert solution.countNegatives([[25, -6, -43, -2], [70, 55, 47, 12], [-11, 26, 5, -38], [-58, 31, 35, 9], [37, 46, 39, 82], [-60, 69, -74, -87], [-66, 79, -88, 41], [55, 67, 22, 80], [28, -65, -5, -10], [-75, -19, 0, -100]]) == 7\nassert solution.countNegatives([[40, -82, -77, 13], [-42, 91, 17, -68], [8, -80, -81, -92], [-3, 24, -96, 52], [-54, -45, 38, -96], [-47, 27, 95, -32], [-72, 83, -1, -70], [20, -89, -36, 87], [-74, 52, -39, 70]]) == 11\nassert solution.countNegatives([[44], [-21], [-24], [-66], [50], [-61], [-35], [-40], [-89], [-3]]) == 5\nassert solution.countNegatives([[16, 29, -79, 91, 45]]) == 3\nassert solution.countNegatives([[50, -44, -95, -79, 51, -73, -34, -45, -88], [25, 63, -58, -24, -89, 73, 37, 40, -15], [87, -16, 77, -63, -39, -51, -67, -60, -62], [52, -75, 46, -16, -91, -38, -89, -93, 78], [-20, 10, -13, 73, -48, 21, 52, 3, 65], [11, -43, -94, 42, -6, 96, 85, 11, 87], [1, 69, -54, -52, 46, -92, -70, 35, 33], [-64, -15, -43, 3, -64, 95, 20, 37, 94], [-4, 37, 29, 86, 82, 24, 4, -35, -5], [77, -36, 22, 14, 38, -96, 30, 89, -31], [73, 27, 96, -64, 54, 73, -75, -80, -60]]) == 12\nassert solution.countNegatives([[-30, -47, -62, 73, -2, -90, -38], [-46, -8, -27, -55, -38, -74, 23], [89, -35, -64, -22, -51, 5, 92], [-36, 21, -37, 63, -42, 26, -73], [42, 3, 85, 40, 78, 16, 79], [17, 3, -99, -23, -92, 96, 8], [-7, -58, 32, 85, -2, -1, 36], [85, -94, 52, 43, 38, 23, -84], [-31, 32, -71, -21, -82, 48, 27], [61, -83, 32, -11, 76, 55, 77], [82, 57, -23, 3, 2, -68, 7]]) == 14\nassert solution.countNegatives([[-44], [-97], [54]]) == 0\nassert solution.countNegatives([[28, -16, 24, 78, 42, 11, 99, -95, -15], [-30, 36, 65, 59, -60, 32, -46, -35, -98], [9, 45, 24, 19, -61, 87, -20, 77, 49], [7, -30, 40, 25, 46, 70, 45, 70, 8], [92, -68, -19, -9, 50, -8, -98, 53, 29]]) == 28\nassert solution.countNegatives([[39, -36, 86, -94, -6, 93, 45, -86, 94]]) == 8\nassert solution.countNegatives([[73, 65, 7, 82, -35, 8, 5, -80, -74], [-82, 97, -90, -37, 45, 22, 53, 85, -53], [46, -42, 43, -11, -65, -65, 38, 61, -81], [-93, 58, -95, -7, 43, -82, 7, -65, -56], [1, -90, -86, -21, 8, 66, -14, -36, 65], [-77, 19, -45, 17, 45, 25, -20, -77, 2], [61, -15, -82, 17, -18, -22, -26, 28, 29]]) == 46\nassert solution.countNegatives([[71, -8, -9, 6, -48], [-73, 13, 14, -16, 58], [-83, -49, -85, 5, 40], [-60, 19, 11, 99, 35], [61, 43, 93, -70, -70], [-78, 49, -72, -28, 46], [-93, 8, 52, -84, -3], [-25, 58, 83, 68, -95], [-30, -54, -15, -16, -16], [66, 19, -85, -37, 12]]) == 8\nassert solution.countNegatives([[52, -27, -45, 67, -91, 33, 16, -29], [61, 13, 26, 77, -90, 29, -96, -35], [49, 4, 28, -36, 58, 91, -94, -25], [-12, 24, -60, -57, -59, -14, 92, 80], [-23, 47, 50, 34, 77, 84, -73, -44], [-6, -57, -41, 80, -6, 10, -56, -8], [-49, 17, -60, -16, 49, 11, -11, 14], [63, -89, -41, 33, -81, -64, -63, -59], [-90, 29, -81, -19, -55, -8, -94, -55], [-79, 10, 89, -79, 86, -81, -29, -35], [53, -12, -83, 26, 9, 35, 30, 20]]) == 27\nassert solution.countNegatives([[39, 14, 90, -79, -18, 48, -86, 23, 81], [7, 42, 33, 13, -57, -94, 82, -69, -10], [-42, 79, -26, -94, -31, 18, -7, -90, 31]]) == 19\nassert solution.countNegatives([[80, 95, -31, 26, 90, 38, -61, -84, -65], [-85, -25, -92, 78, 75, -46, 77, -48, -70], [56, 87, 0, 44, 54, -89, 68, 93, -17], [26, 17, 2, 3, -48, -57, 7, 66, -42], [97, 68, 12, -99, 54, 22, -65, 79, -13], [46, -32, 75, -59, -52, -19, 99, -88, -81], [22, 42, -75, -21, 63, 82, -83, 55, -36], [59, -79, -65, -94, 24, -75, 60, -91, -43], [-30, 19, 29, -24, -96, 17, -18, -37, -35]]) == 52\nassert solution.countNegatives([[33, -54, 64, 29, -61, -65, 3, -32, 40, 7, 16], [78, 17, 96, 53, 81, -6, 99, -86, 73, -92, 0], [-21, -43, -95, 95, -40, 96, 65, 100, 2, -68, 30]]) == 23\nassert solution.countNegatives([[-83, -50, -17, 45, 13, 0, -12, 40, 67, -47, -15], [89, -84, 91, 10, -56, 0, -70, 79, 26, -72, 10], [83, 46, 74, -36, -46, -51, 96, -2, 28, -45, 72], [-40, 38, -14, -97, 85, 92, -73, 40, 38, -32, 69], [-45, -68, -7, 1, 43, 30, 39, 93, -15, -17, 58], [50, -49, 93, -64, -24, -20, -10, 74, 14, -11, -47], [73, 38, -86, -84, -31, -8, -75, -59, 74, -68, 42], [83, -27, 6, -13, -61, 9, -86, 92, 95, -79, 8], [-54, 77, 31, -52, -95, -2, 32, -33, -80, -33, 63], [-30, -27, -85, -19, -10, 82, -43, 49, -66, 0, -81], [-15, 27, 28, 78, 89, 93, -99, 86, -76, -82, -81]]) == 71\nassert solution.countNegatives([[63, 13, -9], [23, 65, -67], [-21, -42, -3]]) == 5\nassert solution.countNegatives([[42, 81, -64, -99, 28, 100, 12]]) == 5\nassert solution.countNegatives([[37, 47, -61, -66, -6, 64, 12, -14], [-79, 54, 98, 32, 56, -21, -6, 64], [-4, 44, 6, -86, 56, 22, 48, -59], [-96, -73, -35, 54, 47, 80, -100, 39], [-15, 85, -68, 16, 43, -41, 57, -93], [93, -86, -66, -77, -62, 55, -44, -11], [-3, 71, 37, 38, 10, 48, -4, 92], [9, 87, -74, -94, -1, 94, -87, -45], [73, 10, 66, 85, 10, 81, 1, 56], [-89, 75, -71, 58, -81, -89, 83, -10]]) == 8\nassert solution.countNegatives([[-43, -1, -34, -92], [-80, 96, -59, -2], [9, -2, -97, -82], [-7, 95, 80, -71], [22, 17, 3, -91], [-9, -69, -91, 60], [10, -42, 24, -64], [19, -89, 27, 45], [2, -11, 93, 63], [-42, -100, 78, 27], [-55, 48, 83, 6]]) == 25\nassert solution.countNegatives([[13, -49, 43, 35, 69, -39, 95, 12, -99, -98]]) == 9\nassert solution.countNegatives([[81, 39, 62, -3, 20, -100], [66, 20, -96, 70, 61, -100], [82, 61, -13, -32, 88, 54], [-100, -39, 39, -80, 82, -84], [-70, 98, -69, 51, 27, 2], [-64, 59, 6, 70, 44, 50], [37, -74, 67, -57, 19, 84], [-37, -66, -78, 17, -31, -29], [1, 42, 18, 66, 19, -92], [-7, -77, 28, -29, 21, -57], [23, 74, 23, 58, 23, -79]]) == 4\nassert solution.countNegatives([[22], [96], [-41], [-18], [4], [-35], [1], [-41], [97]]) == 0\nassert solution.countNegatives([[-92], [95], [-52], [66], [-11], [38]]) == 0\nassert solution.countNegatives([[82, -7, 67, -65, -86], [-59, 60, 79, 65, 100], [52, -22, -51, 96, -93], [22, 58, -4, -15, 87], [-20, 92, -12, 6, 94], [80, -53, 74, 61, 23], [-96, -30, -41, -76, 39], [41, -55, 87, -51, -18], [5, 62, -96, -47, -58], [40, 36, -81, -87, 54], [93, -8, 47, 18, -85]]) == 14\nassert solution.countNegatives([[-91, -88], [-46, -34], [-3, -8], [-12, -49], [-46, 44], [-60, 4], [-85, 21], [54, -97]]) == 1\nassert solution.countNegatives([[-16, -31, -64, -38, -25, 26, -59, 45, 59, -62], [10, -89, 75, 25, -2, 57, -35, 0, 6, -13], [-22, -77, -72, -50, -53, 66, 87, -4, -62, -71], [15, 19, 87, 41, 81, 70, 89, 18, -54, 84], [-36, -13, 58, 2, 81, -85, 48, -43, -37, -30], [-93, -58, 10, -88, 41, 94, -66, 81, 92, 85]]) == 26\nassert solution.countNegatives([[17]]) == 0\nassert solution.countNegatives([[-38, 43, -89, -94], [-61, 47, -29, 73], [-3, -87, -80, -67], [-99, -51, -77, -44], [16, 27, -100, -7], [82, -81, -95, -92], [-52, 9, 13, 31], [87, -20, -97, 95]]) == 3\nassert solution.countNegatives([[-86, -26, 34], [-100, -37, 69]]) == 6\nassert solution.countNegatives([[-41, 56, -8, 68, 3, 17, 90, -41, -24, 58, -70], [42, 80, -4, -63, 8, -39, 12, 88, 22, 0, -62], [-42, -80, -87, 95, 39, 100, -75, -59, 48, -35, -4], [-20, -45, 15, -47, -94, -51, -14, -93, 90, 2, -50], [-74, -79, 6, 33, -98, 77, -49, 56, -64, -38, -93], [79, 87, -95, -56, -9, 62, -96, 46, 35, -52, -43], [13, -95, 61, 19, -82, -67, 5, 86, -6, 63, -62], [87, -67, -20, 41, 19, 7, 1, -33, 28, 33, -62], [-3, 94, -25, 48, -61, -71, 31, -22, -63, -71, 3], [-26, 98, 18, 49, 31, 89, -4, 86, 81, 62, -31], [43, 92, -11, -52, -80, -94, -91, 74, -38, 30, 30]]) == 33\nassert solution.countNegatives([[94, -18, 78, -1, -38, 35, -78, 94], [13, 91, -95, 83, 0, -24, -63, 83], [19, -96, -12, 96, -88, -36, -15, 76], [-14, 37, -3, 25, -23, 32, -59, 58], [5, -50, 61, -38, 48, 60, 29, 94], [-65, -17, 14, 69, -35, -14, 71, -49]]) == 38\nassert solution.countNegatives([[56, -19, 66], [-47, -92, 79], [-81, -66, -63], [-50, -51, 88]]) == 11\nassert solution.countNegatives([[-84], [-66], [67], [79], [-49], [29], [38], [-61], [11], [49], [-74]]) == 1\nassert solution.countNegatives([[11, -94, -89, 63, 49, 22, -19], [5, 79, 14, 91, -26, -9, -35], [-34, 83, 17, -68, 0, 25, -76]]) == 11\nassert solution.countNegatives([[65, -61, -62, 52, 69, -46, 30], [44, 50, -70, -3, 22, 75, 94], [-72, 41, 0, -31, 7, 94, -64], [59, 73, 78, -89, 74, -53, -58], [-98, -87, 59, -97, -52, 42, 95], [-43, 0, 10, -17, 41, 23, 20], [13, -91, 52, -39, 80, 36, -74], [-71, 76, 25, -82, 5, 18, 74], [-94, 90, 19, 31, -24, -99, -77]]) == 42\nassert solution.countNegatives([[-83, -6, -16, -60, -100, 6, 24], [79, -84, -73, 79, 23, 15, -75], [-57, -18, -6, 75, 5, 63, -37], [-38, 13, -6, 57, -39, 26, 33], [-52, 50, 8, -94, -44, 61, -79], [1, -56, 25, -23, -75, -33, 93], [96, 46, 22, -98, -69, -100, -88], [1, 41, 24, 99, -34, 98, 72], [43, -30, -80, -21, 55, 37, -18], [-33, 48, -56, -81, 33, 86, -97], [10, -48, -7, 67, 90, 77, 91]]) == 33\nassert solution.countNegatives([[-20, 91, 31, 96, 59, -98, -75, 61, -15], [39, 17, 96, -77, 27, 95, -74, 34, 59]]) == 10\nassert solution.countNegatives([[8, 8, -19, -81, -51], [15, 51, 27, 2, -71], [-3, 27, 84, 26, 21], [-56, -35, 70, -81, -74], [12, -61, -25, 24, -95], [-18, 85, 77, 0, -30]]) == 13\nassert solution.countNegatives([[1, 89, 86, 18, 80, -19, -33, 22], [66, -12, -76, -31, -88, -17, -2, -32]]) == 10\nassert solution.countNegatives([[-5, -58, 30, -51], [-9, -66, 3, 99], [2, -90, 4, 0], [33, -55, -13, 52], [61, -94, -30, -17], [-25, -94, -40, -33], [44, -67, 51, 76], [8, -27, -37, 10]]) == 24\nassert solution.countNegatives([[-56, 33, 62, 51, 52, -36, -96, -31, -73, 85], [10, 28, -27, -2, -94, -12, -55, 86, -39, 14], [-93, -83, -100, -22, -4, -30, 77, -38, 78, 27], [-85, -14, -11, 6, 57, 64, -72, -34, 77, -40], [-74, -46, -32, -87, -44, 53, -99, -16, 21, -17], [80, 19, -78, 51, 85, 42, -78, -21, 5, 88]]) == 45\nassert solution.countNegatives([[-70, -91, 12], [-55, 74, -44], [-9, -85, 57]]) == 9\nassert solution.countNegatives([[29, -59], [-1, -52], [-62, 85], [77, 29]]) == 0\nassert solution.countNegatives([[23, -98, -2, -78, 78, 40, -89, -91], [93, 100, -32, -35, -50, 23, -98, 92], [3, -8, -28, -50, 74, -40, 17, -26], [-52, -58, 93, -99, -77, 4, -99, -72]]) == 27\nassert solution.countNegatives([[-79, -21, 14, 78, 7, 52, -93, -32, 26], [43, 77, 34, -56, -96, 1, -59, -32, -13], [-33, 3, -82, -36, 17, 12, -37, 43, 34], [-54, -95, 64, 37, 3, 100, -44, -45, -15], [1, 25, 13, -43, -78, -6, 33, 92, 38], [-53, 52, -34, 100, 81, 50, 44, -18, -38], [-26, -90, -29, 1, 26, -94, -53, -18, 16], [19, 80, -96, 38, -80, -2, 51, -50, -90]]) == 39\nassert solution.countNegatives([[-94, -73, 79, -59, 34, 85, -31, -94]]) == 8\nassert solution.countNegatives([[-55, 100, -15, -71], [-68, 71, 52, -21], [-7, -62, 43, 71], [-42, 18, 74, -48], [46, 100, 49, 21], [36, 55, 64, 100], [17, -48, -76, -4], [-11, -88, 23, 53]]) == 7\nassert solution.countNegatives([[7, -82, -21, 75, 10, -25, 50, -95, -3], [20, -47, -53, 41, -85, 53, 51, -84, -11], [87, 48, 50, 62, -83, 71, 20, -80, -82], [-11, -46, -10, 87, -54, 65, 36, -42, -4], [-4, -78, 0, 86, 91, -43, -97, -78, 97], [-47, 77, 6, 4, 11, 51, -10, -45, -78]]) == 41\nassert solution.countNegatives([[-84, 78, -71, -49, 39, 57, 32, -24, 95, 99, 65], [15, 65, 34, 33, 20, 86, -40, 73, 23, -43, -14], [57, -63, -87, 17, 34, 25, 15, -70, 84, -44, 26], [-21, -34, 23, -98, 50, -96, -94, 3, 5, 11, -19], [94, 59, -89, 31, -72, -13, -67, -81, 60, -53, -12], [88, -35, -24, 20, 36, -92, -20, -50, 100, -5, -67], [-13, 92, 33, 86, -19, 79, -90, 34, 36, 88, 61]]) == 44\nassert solution.countNegatives([[-48, 17, 51, -74, -91, 48, 12, 19, 76, 40, 11], [-51, 80, -44, 34, -52, 58, 44, -43, 24, -59, 4], [14, -40, 31, 14, 37, 3, 2, -33, 92, 98, -20], [92, -7, -28, -15, 6, -17, -53, 43, 54, 20, 21], [11, -4, 9, 34, 26, 67, 32, 16, 23, -56, -10]]) == 47\nassert solution.countNegatives([[0, 90, 9, 48, -37, 42, 29, -99], [-4, -40, -52, -10, -77, -24, -43, -24], [-20, 20, 9, -13, -69, 86, 38, 81], [23, -65, 25, -97, 44, -16, 58, 9], [43, 25, -39, -14, 61, -89, -58, 2], [80, -30, 43, 85, 45, 6, 11, -41], [94, 25, 30, -7, -95, 51, 78, 67]]) == 6\nassert solution.countNegatives([[-34, 31, -42, 1, 69, -93, -69], [-38, 9, -26, -73, -79, -68, 32], [-14, -15, 11, -18, 27, -71, -91], [34, 12, -29, 74, 99, -76, -89], [-35, 54, -18, -35, -16, 47, -96], [21, -15, 81, -99, 79, -30, -92], [-31, -89, 83, 5, -43, 79, -92]]) == 33\nassert solution.countNegatives([[24, 28, 18, -86, -18, 50], [32, -81, 42, 69, 51, -92], [-59, 36, -97, -64, 57, 76], [-61, -32, -74, -51, -64, 94], [56, 27, 54, 33, -62, -64], [99, 2, -4, -7, -49, -6], [-42, -47, 63, -47, 12, -56]]) == 14\nassert solution.countNegatives([[-73, 31, -81, 42, -28, -29, 33], [-31, 8, 72, 40, 0, -45, -30], [-95, -84, 51, -50, -84, 0, -63], [61, 19, 87, -82, -46, -22, 42], [-28, 53, -15, -34, -12, 21, 13], [80, 18, -4, 9, -8, 77, -61], [10, 86, 49, 22, 93, 87, -67], [-60, 41, 25, -74, -66, 70, 3], [57, -95, -19, 76, 72, -75, -15]]) == 12\nassert solution.countNegatives([[-24, -47, -44, -8]]) == 4\nassert solution.countNegatives([[-5, -26, 30, 38, -77, 44, -43, -100, -61], [88, -80, -95, 64, 26, -14, 24, -76, -69], [-63, -59, 2, -15, -81, 43, -44, 93, 3], [89, -43, -16, -65, -70, 31, 38, -54, 22], [3, 45, 76, 91, 66, -27, -5, -91, -78], [84, -37, 49, 52, 64, -53, 57, 88, -69], [-70, 86, 49, -79, 30, -2, -11, 52, 6], [84, 3, 84, -8, 93, 11, -6, -68, 60]]) == 22\nassert solution.countNegatives([[39, 66, -55, 20, 63], [34, 52, -91, -22, 34], [-46, 30, -87, -60, -83], [61, -85, -20, -76, 26], [87, 13, 22, 4, 40], [-87, 23, 66, -5, -4], [20, -28, -56, 86, -22], [22, 9, -71, -51, -35]]) == 8\nassert solution.countNegatives([[-79, 95, -35, 26, -87, -97, -81, -29], [68, 52, -55, 56, 39, 71, -30, -56], [-95, 32, 89, 18, -48, 35, -68, -68], [-34, -57, 97, -27, -16, -93, -75, -73], [-4, 53, 96, -94, -62, 52, 7, -60], [-80, -90, 77, -18, -93, -64, -57, -59]]) == 44\nassert solution.countNegatives([[74, 12, -46, 75, -87, -62, -82, -53, -8, 16], [-58, 48, -18, -25, -38, -46, -93, 58, -34, 46], [-8, -7, -39, 67, -81, 1, 48, 18, 95, -51], [-54, -54, 88, 62, -6, 48, 70, -57, 37, -73], [26, 75, 12, 64, -20, -4, -81, -75, -60, 18], [66, -34, -5, -37, 9, 33, -35, -44, 44, 41], [-57, 0, 92, -6, 28, 91, 97, -35, 50, -81]]) == 49\nassert solution.countNegatives([[-80, 3, 22, 60, 34, -87], [-7, 39, 77, -35, 47, 14], [-89, 13, -53, 98, -98, -31], [-18, 15, 0, 90, -43, -5], [-27, -89, 55, -19, -94, 6], [21, -53, 44, 30, 53, 62], [78, 5, -34, -24, -72, 44], [79, 71, -16, 91, 73, -46]]) == 8\nassert solution.countNegatives([[2, 15, -16, -80, -86, 60], [-77, -21, 56, -66, 90, 94], [-20, 91, -80, -44, 90, -5], [5, 40, -64, -70, -82, -37], [64, -21, -32, -67, -92, -68]]) == 19\nassert solution.countNegatives([[-31, 9, -46, 93, -77], [96, -96, -35, -82, -8]]) == 7\nassert solution.countNegatives([[45, 50, -57, -99, -62, 12, -45, -74, 48]]) == 7\nassert solution.countNegatives([[-67, 74, 90], [-37, -72, -48], [51, -99, 70], [93, 69, 55], [96, -28, 24]]) == 2\nassert solution.countNegatives([[89, 72, 41, 45]]) == 0\nassert solution.countNegatives([[-100, -95, -13, -21, -44, -72], [18, 56, 17, 9, -88, -91], [-68, 38, -50, -9, 10, -23], [-57, -18, 90, 59, 0, -70], [72, -63, -58, 78, -54, -65], [-77, 62, -66, 47, 74, 98], [24, -57, -44, 8, 10, 58], [39, -13, -90, -37, 10, 6], [-9, 45, 60, 67, -12, 60], [69, -45, 42, 27, 35, 25], [74, 66, -16, -95, 41, -13]]) == 4\nassert solution.countNegatives([[92, -91, 5, 89, 7], [-42, 23, 25, -62, 42], [-96, 73, -4, 1, -6], [-69, 59, -96, -29, 21]]) == 19\nassert solution.countNegatives([[-80, -74], [49, -5], [-14, -22], [0, -46], [-35, -6], [-80, -68], [-63, -48], [63, 32], [69, -35], [-74, 53], [89, -85]]) == 1\nassert solution.countNegatives([[-74, 92, 89, 24], [0, -85, 83, -83], [-91, -90, 29, 26], [-64, 34, 33, 61], [-54, -6, 20, -47], [28, 4, -29, -55], [-75, -44, -61, -55]]) == 7\nassert solution.countNegatives([[-20, -1, 38, -11, 74, 30, -63, -80, -93, 74, 84], [-21, 63, 49, -74, 71, -78, -44, 10, 0, 96, 98], [66, 8, 20, 96, 66, -51, -83, 44, -58, 18, 35], [-48, -94, -66, -82, -100, -100, -70, -76, -88, -23, 46]]) == 28\nassert solution.countNegatives([[-43, 85, -56], [-71, -80, -30], [-30, 93, -26], [-57, 97, 40], [-95, -1, 7], [66, -25, -63]]) == 4\nassert solution.countNegatives([[-14, -30, -55, 97, -50], [35, -67, 69, -17, -58], [-75, -93, -10, -21, 10], [-84, 32, 90, 92, -41]]) == 18\nassert solution.countNegatives([[99, 12], [34, -5], [95, 16]]) == 0\nassert solution.countNegatives([[42, -97, -84, 23, -32, -84], [21, -40, 83, -87, 29, -44], [18, -26, 72, -81, 78, 90], [-14, -41, -24, -55, -73, -39], [91, 23, -51, -44, -20, -35], [-55, 41, 29, -62, -21, 43], [-40, -66, -69, 88, -53, 68], [-75, -6, -20, 43, 34, 81], [54, -48, 59, 43, 27, 1]]) == 32\nassert solution.countNegatives([[39, 12, -49, 93, 8, -42, -7, -9], [54, -76, 50, 50, -94, -1, 92, 17], [-58, -34, -85, 67, -85, -18, 23, -10]]) == 21\nassert solution.countNegatives([[-78, -26, 96, -96, 9, -21, -72, -43, -1], [-35, -43, 47, -59, 27, 56, -17, -59, 28], [-25, 39, -32, 66, 4, 6, 63, -70, 49], [59, 58, -25, 0, 63, 8, -84, 20, -32], [55, -61, 99, -4, -40, 22, -58, 78, -89], [23, 18, 65, 79, -73, -62, -41, -71, -27], [84, 53, 4, 22, -5, 95, -44, -43, 51], [42, -96, 56, 36, -98, -55, 20, 80, -86], [2, 44, -48, -5, -30, -60, -41, 31, -58], [97, -8, -43, 55, 81, -40, -86, -44, -31], [-14, -12, 73, -26, 76, -79, -52, 42, -84]]) == 53\nassert solution.countNegatives([[-41, -88, -90, 90, -76, 6, 47, 86, -10], [-56, -3, -68, 26, -64, 21, 40, 29, -29], [20, 39, -67, 51, -19, 69, 63, -95, -8], [-87, 40, 20, -72, -73, 29, 71, 21, 88]]) == 30\nassert solution.countNegatives([[-23, -24]]) == 2\nassert solution.countNegatives([[-1, 19, -18, -38, 66, 80], [43, 81, -59, 74, -63, -3], [97, 43, -19, 86, 69, -24], [-53, 91, -62, -2, -34, -74], [-28, -13, -7, 71, 65, -17], [-38, 41, -44, 13, -84, -61], [-70, 9, 84, -49, -11, -25], [95, -88, -58, -95, 78, -75], [64, 99, -63, -83, 78, -91], [-75, 43, 12, -18, -52, 8]]) == 23\nassert solution.countNegatives([[-54, 54, 0, -99, -38, -24, 67, -95, -26, 20, -90], [-14, 49, 91, -73, -36, 24, -94, 8, 12, 35, 54], [-14, -36, -17, -19, -25, 6, -57, -55, -25, -13, -86], [55, 7, 91, -31, -64, -37, 76, -95, -83, -6, -65], [-48, -95, -13, -57, 17, -83, -8, -30, 94, -84, 5], [88, 95, -69, -89, 17, -41, -35, 49, -59, 2, 13], [-20, 17, -95, -95, 93, 26, -34, -41, -63, 84, 29], [9, -91, 30, -88, 41, -39, -42, -84, -18, 100, -63], [-3, -26, -73, -80, 67, -31, -62, 90, -77, -26, -11], [-92, 39, 59, 38, 6, -35, -55, 49, 55, -64, -95]]) == 91\nassert solution.countNegatives([[-24, 11, 49], [28, 100, -33], [89, 89, -55], [-39, 84, 89], [48, 42, -21], [-88, 18, 73], [8, -29, -74], [-78, -34, -24], [-48, -68, 7]]) == 8\nassert solution.countNegatives([[-32, -63, -57, -50, -75, -99, -6, -61, -21, -54]]) == 10\nassert solution.countNegatives([[-33, -81, 10, -18, -72, 17, -71, -20, 41]]) == 9\nassert solution.countNegatives([[51, 85, -81, 0, -9, -94, 95, -72, -6], [-79, 94, 14, -9, 79, -39, -82, 78, -44], [5, 76, 18, 3, 39, 22, 16, -17, -64]]) == 4\nassert solution.countNegatives([[-41], [-16], [57], [-32], [-79], [61], [28], [59], [-89]]) == 1\nassert solution.countNegatives([[38, 21], [-18, -80], [68, 86], [-15, -47], [-56, 48], [99, -82]]) == 1\nassert solution.countNegatives([[-76, 18, -68], [-59, 26, 93], [-41, -70, 100], [34, -52, -10], [11, -58, 64], [24, 64, 29], [-33, -16, -16], [81, -79, 12]]) == 4\nassert solution.countNegatives([[91, -32, 26, -17, 88, -50, 37, 62, 76, -14, -51], [-30, -80, 39, -85, 95, -47, 77, 60, -38, -23, 13], [88, -81, -40, 53, -33, -74, -80, 60, 61, 69, 50], [-32, 67, -11, -41, 83, -58, -18, -76, 82, 64, 68], [-89, 42, -98, -76, -41, 22, -83, -15, 40, 56, 3], [44, -13, -81, 9, -27, -28, -12, -64, -78, 22, -75], [62, -85, 14, -26, 95, -40, -66, -16, 69, 8, -43], [50, -76, 85, -56, 53, -82, -92, 98, 76, 29, -1]]) == 73\nassert solution.countNegatives([[45], [-15], [-11], [76], [92], [-26], [49], [60]]) == 0\nassert solution.countNegatives([[-36, 12, 22, 87, 78, -28, -14, 62, -34, 85], [-6, 83, -9, -16, -68, -86, 12, 49, 84, -58], [-13, 35, -33, -29, 88, 99, -59, 93, -99, -65], [-22, -60, -41, 85, 21, 84, -85, -43, 43, 45], [100, -41, -18, -76, 87, -41, -58, 58, 54, -33], [55, -63, -83, -57, 47, -65, 68, -48, 46, 89], [-45, 18, -34, 28, 77, 46, 68, 4, -72, 43], [-58, -81, -8, 1, 80, -41, -94, 84, 71, 4], [-95, 19, 41, 77, -80, 40, -18, -39, 64, 51]]) == 78\nassert solution.countNegatives([[31, -81, 94], [27, 91, 18], [-84, 11, 18], [-32, 83, 46], [22, -25, 76], [93, -46, -22], [-89, 97, 79]]) == 7\nassert solution.countNegatives([[-53, 72, 16, 65, -12, -69, 32, -1, 50, 11]]) == 10\nassert solution.countNegatives([[-13, -26], [-62, -4], [-43, -6], [-35, -58], [37, 73], [-19, 13], [97, 88], [-2, -76]]) == 2\nassert solution.countNegatives([[70, 1, 91, 97, -55, 6, -53, 42, 88], [-5, -98, 3, -47, 23, 38, -43, 18, -31], [66, 19, 2, 1, 70, -72, 21, 90, 50], [6, -2, -35, -18, -57, 87, 13, 34, 56], [-26, -20, 74, -51, 6, -38, 84, 71, 33]]) == 27\nassert solution.countNegatives([[-73, -10, -94, -11, 20, 75], [36, -36, -38, 4, -3, -96], [-74, -29, -98, -9, 5, -83]]) == 16\nassert solution.countNegatives([[-75, -24, 95, -3, 2, -37, -90], [-83, 32, 18, -22, -90, -1, 27], [71, 4, -14, 8, 22, 69, 80], [-54, 90, 33, -70, -12, -43, -72], [-4, -74, 27, 96, -17, -2, -55], [36, -20, -47, 8, 85, 19, 42], [46, -42, 69, 27, -1, 59, 70], [-1, 36, -60, -97, -59, 91, 80], [-22, 89, 79, -60, -35, -43, 67], [-43, 6, 67, 49, -87, -71, -80], [-91, -29, -80, -39, -25, 34, 44]]) == 50",
  "inefficient_solution": "class Solution:\n    def countNegatives(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        neg_grid = [[0 for _ in range(m)] for _ in range(n)]\n        count = 0\n        for i in range(m):\n            for j in range(n):\n                for k in range(m - i):\n                    for l in range(n - j):\n                        if grid[i + k][j + l] < 0:\n                            neg_grid[j + l][i + k] = 1\n        for i in range(n):\n            for j in range(m):\n                count += neg_grid[i][j]\n        return count",
  "is_python": true
}