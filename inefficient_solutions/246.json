{
  "problem_idx": 246,
  "task_name": "Strobogrammatic Number",
  "markdown_description": "\nGiven a string `num` which represents an integer, return `true` *if* `num` *is a **strobogrammatic number***.\n\n\nA **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"69\"\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"88\"\n**Output:** true\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"962\"\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 50`\n* `num` consists of only digits.\n* `num` does not contain any leading zeros except for zero itself.\n\n\n",
  "canonical_solution": "class Solution:\n    def isStrobogrammatic(self, num: str) -> bool:\n        d = [0, 1, -1, -1, -1, -1, 9, -1, 8, 6]\n        i, j = 0, len(num) - 1\n        while i <= j:\n            a, b = int(num[i]), int(num[j])\n            if d[a] != b:\n                return False\n            i, j = i + 1, j - 1\n        return True\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isStrobogrammatic(self, num: str) -> bool:\n        d = [0, 1, -1, -1, -1, -1, 9, -1, 8, 6]\n        i, j = 0, len(num) - 1\n        while i <= j:\n            a, b = int(num[i]), int(num[j])\n            if d[a] != b:\n                return False\n            i, j = i + 1, j - 1\n        return True\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random number string\n    num_length = random.randint(1, 50)\n    num = \"\".join([str(random.randint(0, 9)) for _ in range(num_length)])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isStrobogrammatic(num)\n    \n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isStrobogrammatic(num) == expected_result\n        print(f\"assert solution.isStrobogrammatic(\\\"{num}\\\") == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isStrobogrammatic(\\\"{num}\\\") == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isStrobogrammatic(\"8486538235229189187098113\") == False\nassert solution.isStrobogrammatic(\"52319665478806763\") == False\nassert solution.isStrobogrammatic(\"5848176008389809113482111353993740\") == False\nassert solution.isStrobogrammatic(\"2\") == False\nassert solution.isStrobogrammatic(\"475438043267590779602112615837\") == False\nassert solution.isStrobogrammatic(\"7351479000909286240956710810854933279256271845\") == False\nassert solution.isStrobogrammatic(\"90156168174941207829979652973219873291003493939171\") == False\nassert solution.isStrobogrammatic(\"288340150758245523\") == False\nassert solution.isStrobogrammatic(\"257\") == False\nassert solution.isStrobogrammatic(\"9485041680470394362018839893728659013701\") == False\nassert solution.isStrobogrammatic(\"237433893194919111703066875370920538744881\") == False\nassert solution.isStrobogrammatic(\"680\") == False\nassert solution.isStrobogrammatic(\"16625669205338364933084508642748030776\") == False\nassert solution.isStrobogrammatic(\"6809042256372001181717168769900127\") == False\nassert solution.isStrobogrammatic(\"7\") == False\nassert solution.isStrobogrammatic(\"35787400307569124024571199\") == False\nassert solution.isStrobogrammatic(\"7788985246785709729298561652122149314833720110942\") == False\nassert solution.isStrobogrammatic(\"9255077951308969\") == False\nassert solution.isStrobogrammatic(\"001388584739095114\") == False\nassert solution.isStrobogrammatic(\"55370928658434961339606623581582948520919\") == False\nassert solution.isStrobogrammatic(\"39699397909159892482100885305249\") == False\nassert solution.isStrobogrammatic(\"55614446205856960015478462\") == False\nassert solution.isStrobogrammatic(\"0759944748468256026\") == False\nassert solution.isStrobogrammatic(\"0147048845405480316211\") == False\nassert solution.isStrobogrammatic(\"39709182\") == False\nassert solution.isStrobogrammatic(\"7315962385121855218364423878791046\") == False\nassert solution.isStrobogrammatic(\"2167627\") == False\nassert solution.isStrobogrammatic(\"8\") == True\nassert solution.isStrobogrammatic(\"44993590\") == False\nassert solution.isStrobogrammatic(\"0807598341266139\") == False\nassert solution.isStrobogrammatic(\"95963402359545559110834704109563519271\") == False\nassert solution.isStrobogrammatic(\"12288009510080475642257653964125564051427\") == False\nassert solution.isStrobogrammatic(\"20582098069\") == False\nassert solution.isStrobogrammatic(\"7667948018495\") == False\nassert solution.isStrobogrammatic(\"1019920428877262558988113676698121\") == False\nassert solution.isStrobogrammatic(\"3942477356754109003317307541\") == False\nassert solution.isStrobogrammatic(\"26104654991888330681015631711027927029\") == False\nassert solution.isStrobogrammatic(\"783366137102901003126870775\") == False\nassert solution.isStrobogrammatic(\"960145795757348980273628713925307879589660\") == False\nassert solution.isStrobogrammatic(\"8982135902\") == False\nassert solution.isStrobogrammatic(\"66671674217868930233514192151\") == False\nassert solution.isStrobogrammatic(\"895905003568431012\") == False\nassert solution.isStrobogrammatic(\"3832813451958\") == False\nassert solution.isStrobogrammatic(\"60931607201052968058159438628\") == False\nassert solution.isStrobogrammatic(\"3209715340567110532157777758\") == False\nassert solution.isStrobogrammatic(\"59652339486\") == False\nassert solution.isStrobogrammatic(\"57498300321932475141\") == False\nassert solution.isStrobogrammatic(\"52221386162312\") == False\nassert solution.isStrobogrammatic(\"4344530088\") == False\nassert solution.isStrobogrammatic(\"92\") == False\nassert solution.isStrobogrammatic(\"384177077333714825346\") == False\nassert solution.isStrobogrammatic(\"469641088692337934573158145\") == False\nassert solution.isStrobogrammatic(\"583466164166343804\") == False\nassert solution.isStrobogrammatic(\"078009246011599500580032515520428675366613772862\") == False\nassert solution.isStrobogrammatic(\"732017717878547\") == False\nassert solution.isStrobogrammatic(\"434839976187782526780077582155360\") == False\nassert solution.isStrobogrammatic(\"79640354466712714730171716135939538\") == False\nassert solution.isStrobogrammatic(\"596186455939948449\") == False\nassert solution.isStrobogrammatic(\"1798696403190127919021928570448852846122739\") == False\nassert solution.isStrobogrammatic(\"802958963463\") == False\nassert solution.isStrobogrammatic(\"8079041330\") == False\nassert solution.isStrobogrammatic(\"35596211234057388320591200973\") == False\nassert solution.isStrobogrammatic(\"527101302138\") == False\nassert solution.isStrobogrammatic(\"394893175174587923710926414402948754672179049957\") == False\nassert solution.isStrobogrammatic(\"5562305710338580269921096393137992583537\") == False\nassert solution.isStrobogrammatic(\"3012360138674\") == False\nassert solution.isStrobogrammatic(\"1103187339414368589051432741648478\") == False\nassert solution.isStrobogrammatic(\"80\") == False\nassert solution.isStrobogrammatic(\"1642423951915667809461676977\") == False\nassert solution.isStrobogrammatic(\"084331824945335421423540237713636884367083\") == False\nassert solution.isStrobogrammatic(\"892010389925446910277097\") == False\nassert solution.isStrobogrammatic(\"8135394000375823731400\") == False\nassert solution.isStrobogrammatic(\"41132879055\") == False\nassert solution.isStrobogrammatic(\"6421539884910890616717427777568568089496\") == False\nassert solution.isStrobogrammatic(\"7830832923578899424769102001560747914530608\") == False\nassert solution.isStrobogrammatic(\"188999129657603842132575253446097701471440178846\") == False\nassert solution.isStrobogrammatic(\"808750218443733172572035270050225989906\") == False\nassert solution.isStrobogrammatic(\"1201104791252258910262057751\") == False\nassert solution.isStrobogrammatic(\"5563199576971979572610131595304906605\") == False\nassert solution.isStrobogrammatic(\"624429141186\") == False\nassert solution.isStrobogrammatic(\"538911\") == False\nassert solution.isStrobogrammatic(\"75747038422590975532684666166758027266442\") == False\nassert solution.isStrobogrammatic(\"979220511993897678715093401314786\") == False\nassert solution.isStrobogrammatic(\"6191428765519320\") == False\nassert solution.isStrobogrammatic(\"018173166024335949191983\") == False\nassert solution.isStrobogrammatic(\"0123184866417608559100113962034\") == False\nassert solution.isStrobogrammatic(\"07356930159290745\") == False\nassert solution.isStrobogrammatic(\"6018690966188\") == False\nassert solution.isStrobogrammatic(\"5456997883579229294899543775245396600710\") == False\nassert solution.isStrobogrammatic(\"7848287835124419569816363827392646427\") == False\nassert solution.isStrobogrammatic(\"4797301443525860381817547942391492269\") == False\nassert solution.isStrobogrammatic(\"62563599\") == False\nassert solution.isStrobogrammatic(\"1123755227557\") == False\nassert solution.isStrobogrammatic(\"465626172366052102608579103113615\") == False\nassert solution.isStrobogrammatic(\"806486637537793261\") == False\nassert solution.isStrobogrammatic(\"203346153658485653569480947006\") == False\nassert solution.isStrobogrammatic(\"914899333786236\") == False\nassert solution.isStrobogrammatic(\"16891637225984\") == False\nassert solution.isStrobogrammatic(\"42178456739628265\") == False\nassert solution.isStrobogrammatic(\"26469046117085673973169731084392545\") == False",
  "inefficient_solution": "class Solution:\n    def isStrobogrammatic(self, num: str) -> bool:\n        d = {0: [0, 1, -1, -1, -1, -1, 9, -1, 8, 6],\n             1: [1, 6, 8, 9, -1, -1, -1, -1, -1, -1],\n             6: [6, 9, -1, -1, -1, -1, -1, -1, -1, -1],\n             8: [8, -1, -1, -1, -1, -1, -1, -1, -1, -1],\n             9: [9, -1, -1, -1, -1, -1, 0, -1, -1, -1],\n             -1: [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]}\n        n = len(num)\n        num_list = [int(i) for i in num]\n        num_dict = {i: num_list[i] for i in range(n)}\n        i, j = 0, n - 1\n        while i <= j:\n            a, b = num_dict[i], num_dict[j]\n            if d[a] is None or d[a][b] != num_dict[i]:\n                return False\n            i, j = i + 1, j - 1\n        return True",
  "is_python": true
}