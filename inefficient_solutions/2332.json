{
  "problem_idx": 2332,
  "task_name": "The Latest Time to Catch a Bus",
  "markdown_description": "\nYou are given a **0-indexed** integer array `buses` of length `n`, where `buses[i]` represents the departure time of the `ith` bus. You are also given a **0-indexed** integer array `passengers` of length `m`, where `passengers[j]` represents the arrival time of the `jth` passenger. All bus departure times are unique. All passenger arrival times are unique.\n\n\nYou are given an integer `capacity`, which represents the **maximum** number of passengers that can get on each bus.\n\n\nWhen a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at `x` minutes if you arrive at `y` minutes where `y <= x`, and the bus is not full. Passengers with the **earliest** arrival times get on the bus first.\n\n\nMore formally when a bus arrives, either:\n\n\n* If `capacity` or fewer passengers are waiting for a bus, they will **all** get on the bus, or\n* The `capacity` passengers with the **earliest** arrival times will get on the bus.\n\n\nReturn *the latest time you may arrive at the bus station to catch a bus*. You **cannot** arrive at the same time as another passenger.\n\n\n**Note:** The arrays `buses` and `passengers` are not necessarily sorted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** buses = [10,20], passengers = [2,17,18,19], capacity = 2\n**Output:** 16\n**Explanation:** Suppose you arrive at time 16.\nAt time 10, the first bus departs with the 0th passenger. \nAt time 20, the second bus departs with you and the 1st passenger.\nNote that you may not arrive at the same time as another passenger, which is why you must arrive before the 1st passenger to catch the bus.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2\n**Output:** 20\n**Explanation:** Suppose you arrive at time 20.\nAt time 10, the first bus departs with the 3rd passenger. \nAt time 20, the second bus departs with the 5th and 1st passengers.\nAt time 30, the third bus departs with the 0th passenger and you.\nNotice if you had arrived any later, then the 6th passenger would have taken your seat on the third bus.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == buses.length`\n* `m == passengers.length`\n* `1 <= n, m, capacity <= 105`\n* `2 <= buses[i], passengers[i] <= 109`\n* Each element in `buses` is **unique**.\n* Each element in `passengers` is **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def latestTimeCatchTheBus(\n        self, buses: List[int], passengers: List[int], capacity: int\n    ) -> int:\n        buses.sort()\n        passengers.sort()\n        j = 0\n        for t in buses:\n            c = capacity\n            while c and j < len(passengers) and passengers[j] <= t:\n                c, j = c - 1, j + 1\n        j -= 1\n        ans = buses[-1] if c else passengers[j]\n        while ~j and passengers[j] == ans:\n            ans, j = ans - 1, j - 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def latestTimeCatchTheBus(\n        self, buses: List[int], passengers: List[int], capacity: int\n    ) -> int:\n        buses.sort()\n        passengers.sort()\n        j = 0\n        for t in buses:\n            c = capacity\n            while c and j < len(passengers) and passengers[j] <= t:\n                c, j = c - 1, j + 1\n        j -= 1\n        ans = buses[-1] if c else passengers[j]\n        while ~j and passengers[j] == ans:\n            ans, j = ans - 1, j - 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random buses list\n    buses = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate random passengers list\n    passengers = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate random capacity\n    capacity = random.randint(1, 10)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.latestTimeCatchTheBus(buses, passengers, capacity)\n\n    return buses, passengers, capacity, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        buses, passengers, capacity, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.latestTimeCatchTheBus(buses, passengers, capacity) == expected_result\n        print(f\"assert solution.latestTimeCatchTheBus({buses}, {passengers}, {capacity}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.latestTimeCatchTheBus({buses}, {passengers}, {capacity}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.latestTimeCatchTheBus([2, 29, 40, 45, 62, 65, 66, 69, 86], [4, 8, 43, 62, 77], 5) == 86\nassert solution.latestTimeCatchTheBus([2, 10, 15, 17, 19, 24, 42, 84, 89, 98], [2, 25, 56, 73, 82, 86], 10) == 98\nassert solution.latestTimeCatchTheBus([12, 78], [21, 24, 43, 67, 85, 89], 8) == 78\nassert solution.latestTimeCatchTheBus([16, 19, 35, 81, 86, 89, 93, 98, 100], [2, 37, 40, 68, 99], 5) == 100\nassert solution.latestTimeCatchTheBus([33, 39, 44, 45, 53, 54, 78, 79], [19, 21, 66, 69, 72, 83, 85, 91, 94], 2) == 79\nassert solution.latestTimeCatchTheBus([2, 7, 21, 26, 44], [25, 36, 37, 61], 1) == 35\nassert solution.latestTimeCatchTheBus([3, 5, 44, 88, 98], [8, 20, 33, 46, 55, 77], 10) == 98\nassert solution.latestTimeCatchTheBus([25, 29, 48, 50, 51, 55, 56, 72, 78, 98], [11, 22, 39, 62, 99], 4) == 98\nassert solution.latestTimeCatchTheBus([39, 55, 87], [3, 49, 52, 56, 66, 69, 87], 4) == 86\nassert solution.latestTimeCatchTheBus([11, 14, 49, 54, 59, 66, 70, 79], [14, 83], 4) == 79\nassert solution.latestTimeCatchTheBus([2, 14, 15, 23, 27, 30, 51, 77, 91, 95], [3, 9, 32, 38, 61, 74, 83, 90, 94, 100], 6) == 95\nassert solution.latestTimeCatchTheBus([49, 65, 90], [63, 70, 83, 84], 8) == 90\nassert solution.latestTimeCatchTheBus([6, 21, 30, 54, 55, 63], [24, 26, 36, 41, 44, 46, 50, 54], 3) == 63\nassert solution.latestTimeCatchTheBus([39, 60], [18, 55, 63, 66, 93], 7) == 60\nassert solution.latestTimeCatchTheBus([10, 37, 100], [6, 23, 47, 50, 55, 61, 66, 91, 93], 2) == 49\nassert solution.latestTimeCatchTheBus([5, 6, 33, 50, 55, 69, 89, 91, 92, 93], [23, 36], 4) == 93\nassert solution.latestTimeCatchTheBus([3, 16, 33, 38, 45, 61, 68, 84], [31, 32, 46, 85], 6) == 84\nassert solution.latestTimeCatchTheBus([29, 65, 72], [49, 67, 100], 4) == 72\nassert solution.latestTimeCatchTheBus([23, 24, 31, 57, 86, 100], [2, 48, 73], 10) == 100\nassert solution.latestTimeCatchTheBus([27, 44, 67, 81, 83], [17, 30, 33, 37, 42, 58, 78, 98], 8) == 83\nassert solution.latestTimeCatchTheBus([7, 14, 24, 33, 42, 53, 66, 80], [7, 16, 40], 3) == 80\nassert solution.latestTimeCatchTheBus([59, 78], [32, 71], 4) == 78\nassert solution.latestTimeCatchTheBus([8, 14, 68, 69, 70], [2, 12, 33], 3) == 70\nassert solution.latestTimeCatchTheBus([4, 9, 18, 35, 38, 62], [4, 35, 57, 72, 89, 90], 5) == 62\nassert solution.latestTimeCatchTheBus([5, 20, 34, 52, 61, 87], [14, 25, 31, 97], 6) == 87\nassert solution.latestTimeCatchTheBus([9, 21, 22, 49, 69], [15, 46], 8) == 69\nassert solution.latestTimeCatchTheBus([18, 25, 27, 49, 83, 98], [35, 83], 3) == 98\nassert solution.latestTimeCatchTheBus([15, 21, 28, 36, 48, 62, 92, 99], [52, 62], 8) == 99\nassert solution.latestTimeCatchTheBus([15, 18, 27, 29, 61, 63, 75, 90, 92, 96], [7, 8, 44, 60, 79, 88, 99, 100], 1) == 96\nassert solution.latestTimeCatchTheBus([14, 23, 33, 56, 84, 85], [16, 58, 84, 85], 2) == 83\nassert solution.latestTimeCatchTheBus([31, 61], [23, 27, 40, 57, 67, 80, 92], 7) == 61\nassert solution.latestTimeCatchTheBus([41, 58, 95], [73, 96], 10) == 95\nassert solution.latestTimeCatchTheBus([3, 4, 9, 32, 33, 37, 60, 74, 76], [6, 51, 56, 93], 9) == 76\nassert solution.latestTimeCatchTheBus([7, 40, 44, 74, 79, 80, 81, 83, 97, 99], [12, 95], 4) == 99\nassert solution.latestTimeCatchTheBus([7, 66, 69, 73, 76], [6, 14, 20, 28, 77, 100], 10) == 76\nassert solution.latestTimeCatchTheBus([14, 65], [3, 22, 94], 8) == 65\nassert solution.latestTimeCatchTheBus([11, 46, 88], [39, 44, 63, 67, 68, 80], 3) == 66\nassert solution.latestTimeCatchTheBus([2, 15, 16, 17, 33, 73, 92, 97], [1, 6, 20, 43, 53, 100], 7) == 97\nassert solution.latestTimeCatchTheBus([15, 19, 31, 53, 59, 69, 98], [7, 9, 17, 24, 25, 63, 74, 94, 96], 5) == 98\nassert solution.latestTimeCatchTheBus([3, 21, 54, 56, 58, 62, 99], [19, 29, 33, 90], 8) == 99\nassert solution.latestTimeCatchTheBus([2, 24, 53, 72, 92, 95], [12, 24, 28, 49, 69, 72, 97], 5) == 95\nassert solution.latestTimeCatchTheBus([5, 23, 41], [7, 24, 38, 43, 61, 85], 4) == 41\nassert solution.latestTimeCatchTheBus([36, 38, 64, 84], [7, 15, 53, 70, 89], 7) == 84\nassert solution.latestTimeCatchTheBus([11, 13, 18, 28, 38, 51, 57, 66], [3, 17, 30, 31, 45, 48, 69, 75, 98], 6) == 66\nassert solution.latestTimeCatchTheBus([64, 82], [32, 38, 57, 79], 6) == 82\nassert solution.latestTimeCatchTheBus([3, 26, 91], [19, 45, 65, 95, 96], 4) == 91\nassert solution.latestTimeCatchTheBus([31, 40, 47, 49, 50, 59, 67, 80, 81, 89], [22, 40, 59, 77, 92, 94, 97, 100], 6) == 89\nassert solution.latestTimeCatchTheBus([40, 51, 61, 99], [5, 88, 95], 8) == 99\nassert solution.latestTimeCatchTheBus([1, 35, 47, 62, 71, 100], [7, 8, 12, 14, 16, 65, 71, 97, 98], 7) == 100\nassert solution.latestTimeCatchTheBus([11, 17, 22, 62], [27, 46, 97], 3) == 62\nassert solution.latestTimeCatchTheBus([24, 27, 37, 47, 85, 90], [7, 21, 81, 98], 7) == 90\nassert solution.latestTimeCatchTheBus([1, 15, 16, 28, 48, 70, 74, 88, 92, 100], [27, 36, 39, 65, 67], 9) == 100\nassert solution.latestTimeCatchTheBus([40, 41, 47, 57, 81, 87, 100], [29, 35, 63], 2) == 100\nassert solution.latestTimeCatchTheBus([21, 28, 61, 66], [38, 49, 59, 60, 74, 82, 91, 97, 98, 100], 9) == 66\nassert solution.latestTimeCatchTheBus([62, 65], [3, 28, 56, 77], 9) == 65\nassert solution.latestTimeCatchTheBus([30, 63], [1, 15, 43, 85, 90], 7) == 63\nassert solution.latestTimeCatchTheBus([40, 96], [19, 20, 38, 50, 84], 5) == 96\nassert solution.latestTimeCatchTheBus([62, 68, 69], [13, 15, 28, 43, 48, 61, 70, 79, 90, 93], 8) == 69\nassert solution.latestTimeCatchTheBus([13, 16, 23, 25, 26, 39, 40, 84, 85, 89], [49, 53, 98], 1) == 89\nassert solution.latestTimeCatchTheBus([22, 31, 32, 33, 48, 64, 65, 85], [1, 5, 8, 31, 34, 52, 59, 62, 74, 94], 2) == 85\nassert solution.latestTimeCatchTheBus([2, 11, 24, 40, 42, 74, 80], [16, 24, 50, 93], 6) == 80\nassert solution.latestTimeCatchTheBus([2, 7, 20, 82], [39, 45], 1) == 38\nassert solution.latestTimeCatchTheBus([3, 11, 76, 93], [6, 44, 48, 49, 90], 9) == 93\nassert solution.latestTimeCatchTheBus([15, 28, 56, 61, 82, 87, 97], [19, 27, 43, 58, 92], 6) == 97\nassert solution.latestTimeCatchTheBus([28, 34, 39, 41, 53, 60, 92], [6, 15, 36, 43, 56, 84, 96], 3) == 92\nassert solution.latestTimeCatchTheBus([31, 58, 61, 67], [5, 17, 19, 21, 37, 40, 56, 82, 100], 3) == 67\nassert solution.latestTimeCatchTheBus([8, 14, 17, 36, 60, 62, 85, 91], [9, 16, 18, 25, 46, 58, 63, 75, 77, 91], 3) == 90\nassert solution.latestTimeCatchTheBus([9, 21, 22, 46, 58, 65, 66, 80, 97, 100], [7, 9, 85], 2) == 100\nassert solution.latestTimeCatchTheBus([27, 28, 29, 38, 47, 58, 65, 87], [1, 9, 27, 47, 65, 87, 93, 96, 98, 100], 7) == 86\nassert solution.latestTimeCatchTheBus([56, 77, 92], [44, 45, 50, 64, 65, 77], 1) == 49\nassert solution.latestTimeCatchTheBus([37, 58, 65, 81, 90], [58, 60, 81], 4) == 90\nassert solution.latestTimeCatchTheBus([10, 13, 30, 74], [56, 57, 67, 68, 87, 91, 97], 10) == 74\nassert solution.latestTimeCatchTheBus([33, 37, 94], [2, 8, 39, 42, 59, 71, 76, 78, 87], 4) == 70\nassert solution.latestTimeCatchTheBus([10, 21, 42, 46, 62, 65, 79, 91], [5, 21, 23], 4) == 91\nassert solution.latestTimeCatchTheBus([40, 66, 89, 90], [5, 8, 26, 27, 39, 46, 69, 85], 8) == 90\nassert solution.latestTimeCatchTheBus([1, 15, 40, 43], [22, 67], 1) == 43\nassert solution.latestTimeCatchTheBus([7, 21, 36, 42, 48, 70, 78, 90], [27, 43, 86, 97, 99], 4) == 90\nassert solution.latestTimeCatchTheBus([8, 14, 19, 38, 55, 60, 73, 91], [3, 5, 12, 20, 60, 73, 74, 84], 8) == 91\nassert solution.latestTimeCatchTheBus([6, 18, 31, 43, 92, 99], [8, 77], 7) == 99\nassert solution.latestTimeCatchTheBus([9, 28, 58, 74, 76, 84, 88, 91], [8, 15, 16, 19, 23, 24, 76], 8) == 91\nassert solution.latestTimeCatchTheBus([68, 72, 73], [12, 14, 22, 63, 69, 95, 97], 5) == 73\nassert solution.latestTimeCatchTheBus([5, 60, 69, 89], [5, 13, 41, 62, 64, 75], 6) == 89\nassert solution.latestTimeCatchTheBus([13, 29, 52, 59, 61, 65], [10, 16], 3) == 65\nassert solution.latestTimeCatchTheBus([37, 40, 45, 46, 48, 63, 77, 88], [32, 33, 35, 95], 4) == 88\nassert solution.latestTimeCatchTheBus([1, 24, 28, 44, 56, 72, 79, 90], [12, 28, 31, 45, 70, 74, 77, 80, 90], 6) == 89\nassert solution.latestTimeCatchTheBus([4, 5, 33, 40, 53, 62, 66, 78, 84, 93], [13, 33, 39, 43, 50, 69, 83], 1) == 93\nassert solution.latestTimeCatchTheBus([37, 42, 55, 70], [29, 38, 44, 79, 81, 87, 88], 8) == 70\nassert solution.latestTimeCatchTheBus([13, 29, 31, 48, 50, 52, 56, 72, 98], [4, 5, 10, 21, 31, 45, 69, 79], 9) == 98\nassert solution.latestTimeCatchTheBus([22, 31, 39, 40, 58, 76], [4, 7, 19, 36, 55, 65, 86, 100], 8) == 76\nassert solution.latestTimeCatchTheBus([34, 39, 41, 43, 73, 85, 86, 95], [12, 31, 48, 51, 63, 76, 92], 5) == 95\nassert solution.latestTimeCatchTheBus([15, 23, 54, 90, 96], [62, 75, 79, 80, 90], 8) == 96\nassert solution.latestTimeCatchTheBus([32, 61], [37, 44, 48, 55, 83, 90, 96], 7) == 61\nassert solution.latestTimeCatchTheBus([13, 23, 29, 44, 58, 60, 87, 97], [8, 71, 72, 76, 84], 5) == 97\nassert solution.latestTimeCatchTheBus([39, 54, 88], [5, 67], 7) == 88\nassert solution.latestTimeCatchTheBus([8, 42, 49], [3, 20, 42, 79, 80, 81], 5) == 49\nassert solution.latestTimeCatchTheBus([12, 24, 31, 36, 43, 44, 50, 78, 94], [40, 45, 53, 62, 76, 84, 87, 97], 5) == 94\nassert solution.latestTimeCatchTheBus([5, 24, 32, 52, 61, 67, 72, 88, 98], [17, 20, 35, 41, 50, 62, 81, 91, 92], 3) == 98\nassert solution.latestTimeCatchTheBus([2, 8, 17, 23, 24, 30, 45, 78, 100], [5, 30, 34, 40, 41, 48, 54, 66, 85], 10) == 100\nassert solution.latestTimeCatchTheBus([4, 10, 23, 25, 49, 73, 80, 90, 99], [22, 23, 27, 33, 36, 49, 53, 70, 77, 88], 5) == 99\nassert solution.latestTimeCatchTheBus([3, 36, 54, 88], [53, 69, 97], 3) == 88",
  "inefficient_solution": "class Solution:\n    def latestTimeCatchTheBus(\n        self, buses: List[int], passengers: List[int], capacity: int\n    ) -> int:\n        # Create lists of bus and passenger indices for efficient lookup\n        bus_indices = [i for i in range(len(buses))]\n        passenger_indices = [i for i in range(len(passengers))]\n        \n        # Create a list to store the earliest passenger arrival time for each bus\n        earliest_arrivals = [float('inf')] * len(buses)\n        \n        # Create a list to store the latest bus departure time for each passenger\n        latest_departures = [float('-inf')] * len(passengers)\n        \n        for i, departure in enumerate(buses):\n            # Find all passengers who can board the current bus\n            for j, arrival in enumerate(passengers):\n                if arrival <= departure:\n                    # Update the earliest arrival time for the current bus\n                    earliest_arrivals[i] = min(earliest_arrivals[i], arrival)\n                    # Update the latest departure time for the current passenger\n                    latest_departures[j] = departure\n        \n        # Sort the buses by their earliest arrival time\n        buses.sort(key=lambda x: earliest_arrivals[x])\n        \n        # Sort the passengers by their arrival time in non-decreasing order\n        passengers.sort()\n        \n        # Initialize the current time and the number of passengers waiting for a bus\n        current_time = 0\n        waiting_passengers = 0\n        \n        for i, departure in enumerate(buses):\n            # Find all passengers who can board the current bus\n            waiting_passengers = 0\n            for j, arrival in enumerate(passengers):\n                if arrival <= departure:\n                    waiting_passengers += 1\n            # If the current bus has enough capacity, board as many passengers as possible\n            if waiting_passengers <= capacity:\n                current_time = departure\n                break\n            else:\n                # Otherwise, board the passengers with the earliest arrival times\n                for j in range(waiting_passengers - capacity):\n                    current_time = passengers[j]\n                    passengers.pop(j)\n                    waiting_passengers -= 1\n        \n        # Find the latest time that can board the last bus\n        latest_time = float('-inf')\n        for i in range(len(passengers) - 1, -1, -1):\n            if passengers[i] > current_time:\n                latest_time = passengers[i]\n                break\n        \n        # Return the latest time that can board a bus\n        return max(latest_time, current_time)",
  "is_python": true
}