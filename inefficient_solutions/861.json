{
  "problem_idx": 861,
  "task_name": "Score After Flipping Matrix",
  "markdown_description": "\nYou are given an `m x n` binary matrix `grid`.\n\n\nA **move** consists of choosing any row or column and toggling each value in that row or column (i.e., changing all `0`'s to `1`'s, and all `1`'s to `0`'s).\n\n\nEvery row of the matrix is interpreted as a binary number, and the **score** of the matrix is the sum of these numbers.\n\n\nReturn *the highest possible **score** after making any number of **moves** (including zero moves)*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0861.Score%20After%20Flipping%20Matrix/images/lc-toogle1.jpg)\n\n```\n\n**Input:** grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n**Output:** 39\n**Explanation:** 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[0]]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 20`\n* `grid[i][j]` is either `0` or `1`.\n\n\n",
  "canonical_solution": "class Solution:\n    def matrixScore(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            if grid[i][0] == 0:\n                for j in range(n):\n                    grid[i][j] ^= 1\n        ans = 0\n        for j in range(n):\n            cnt = sum(grid[i][j] for i in range(m))\n            ans += max(cnt, m - cnt) * (1 << (n - j - 1))\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def matrixScore(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        for i in range(m):\n            if grid[i][0] == 0:\n                for j in range(n):\n                    grid[i][j] ^= 1\n        ans = 0\n        for j in range(n):\n            cnt = sum(grid[i][j] for i in range(m))\n            ans += max(cnt, m - cnt) * (1 << (n - j - 1))\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random binary matrix\n    m, n = random.randint(1, 6), random.randint(1, 6)\n    grid = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.matrixScore(grid)\n\n    return grid, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.matrixScore(grid) == expected_result\n        print(f'grid = {grid}')\n        print(f'assert solution.matrixScore(grid) == {expected_result}')\n        test_case_generator_results.append(f'assert solution.matrixScore({grid}) == {expected_result}')\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.matrixScore([[1, 1, 0]]) == 7\nassert solution.matrixScore([[1, 0], [1, 1], [1, 1], [1, 1], [1, 1]]) == 14\nassert solution.matrixScore([[1, 1, 1, 0], [1, 1, 1, 1]]) == 29\nassert solution.matrixScore([[1, 1, 1, 0], [1, 1, 0, 1], [1, 1, 0, 0]]) == 42\nassert solution.matrixScore([[1], [1]]) == 2\nassert solution.matrixScore([[1], [1]]) == 2\nassert solution.matrixScore([[1, 1, 0, 1]]) == 15\nassert solution.matrixScore([[1, 1, 0, 0, 1]]) == 31\nassert solution.matrixScore([[1], [1], [1], [1], [1], [1]]) == 6\nassert solution.matrixScore([[1, 1, 1]]) == 7\nassert solution.matrixScore([[1, 0, 1, 0, 1], [1, 0, 1, 0, 0], [1, 0, 0, 0, 1], [1, 0, 1, 1, 0]]) == 116\nassert solution.matrixScore([[1], [1], [1], [1]]) == 4\nassert solution.matrixScore([[1, 1, 0], [1, 1, 0], [1, 0, 0], [1, 1, 0], [1, 0, 0]]) == 31\nassert solution.matrixScore([[1, 0, 0, 1]]) == 15\nassert solution.matrixScore([[1, 0, 1, 0, 1], [1, 1, 0, 1, 0], [1, 0, 1, 0, 1]]) == 78\nassert solution.matrixScore([[1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1]]) == 343\nassert solution.matrixScore([[1, 1, 1, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 1, 0], [1, 1, 1, 0]]) == 63\nassert solution.matrixScore([[1, 1, 1], [1, 1, 1], [1, 1, 0], [1, 0, 0], [1, 1, 1], [1, 0, 1]]) == 36\nassert solution.matrixScore([[1, 1, 0, 0, 0]]) == 31\nassert solution.matrixScore([[1, 1, 1], [1, 1, 1]]) == 14\nassert solution.matrixScore([[1], [1], [1]]) == 3\nassert solution.matrixScore([[1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0]]) == 261\nassert solution.matrixScore([[1, 1, 1, 1]]) == 15\nassert solution.matrixScore([[1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1]]) == 125\nassert solution.matrixScore([[1, 1, 0], [1, 1, 0], [1, 0, 0]]) == 19\nassert solution.matrixScore([[1, 1], [1, 1], [1, 1], [1, 0], [1, 0]]) == 13\nassert solution.matrixScore([[1, 1, 0, 0], [1, 0, 0, 0], [1, 1, 1, 0], [1, 1, 0, 0], [1, 0, 1, 1]]) == 62\nassert solution.matrixScore([[1, 1, 1, 1, 1], [1, 0, 1, 1, 0], [1, 1, 1, 0, 0], [1, 1, 1, 0, 0], [1, 1, 0, 0, 0], [1, 1, 0, 0, 1]]) == 164\nassert solution.matrixScore([[1, 1], [1, 0], [1, 0], [1, 0], [1, 1]]) == 13\nassert solution.matrixScore([[1, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 1, 0]]) == 319\nassert solution.matrixScore([[1, 0], [1, 1], [1, 1]]) == 8\nassert solution.matrixScore([[1, 0, 1, 1], [1, 1, 0, 0], [1, 1, 0, 0], [1, 0, 1, 1], [1, 1, 1, 1]]) == 61\nassert solution.matrixScore([[1, 0], [1, 0]]) == 6\nassert solution.matrixScore([[1, 0], [1, 1]]) == 5\nassert solution.matrixScore([[1, 1, 0, 0], [1, 1, 0, 1]]) == 29\nassert solution.matrixScore([[1, 1, 0, 0, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 0], [1, 1, 0, 0, 0], [1, 1, 0, 1, 0], [1, 0, 1, 0, 1]]) == 158\nassert solution.matrixScore([[1], [1], [1], [1]]) == 4\nassert solution.matrixScore([[1]]) == 1\nassert solution.matrixScore([[1, 0, 0, 0], [1, 1, 1, 0], [1, 1, 1, 0], [1, 0, 0, 1]]) == 47\nassert solution.matrixScore([[1, 0, 1, 1, 1], [1, 0, 1, 1, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 0], [1, 1, 1, 0, 1]]) == 135\nassert solution.matrixScore([[1, 0, 1, 1, 1], [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 0, 0]]) == 110\nassert solution.matrixScore([[1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0]]) == 159\nassert solution.matrixScore([[1, 0, 0], [1, 1, 1], [1, 1, 1]]) == 18\nassert solution.matrixScore([[1]]) == 1\nassert solution.matrixScore([[1, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1], [1, 1, 0]]) == 35\nassert solution.matrixScore([[1, 0, 0], [1, 1, 0], [1, 0, 1]]) == 18\nassert solution.matrixScore([[1, 1, 1, 1, 1]]) == 31\nassert solution.matrixScore([[1], [1], [1], [1], [1], [1]]) == 6\nassert solution.matrixScore([[1, 1, 1]]) == 7\nassert solution.matrixScore([[1, 1, 1]]) == 7\nassert solution.matrixScore([[1, 0, 0], [1, 1, 1], [1, 1, 0], [1, 1, 1], [1, 0, 1]]) == 29\nassert solution.matrixScore([[1, 1, 0], [1, 0, 0]]) == 12\nassert solution.matrixScore([[1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0]]) == 216\nassert solution.matrixScore([[1], [1], [1], [1]]) == 4\nassert solution.matrixScore([[1], [1], [1], [1], [1], [1]]) == 6\nassert solution.matrixScore([[1, 0, 1, 1]]) == 15\nassert solution.matrixScore([[1, 1, 1, 1, 0], [1, 0, 1, 1, 0], [1, 0, 1, 1, 1], [1, 1, 1, 0, 1]]) == 104\nassert solution.matrixScore([[1, 0], [1, 0], [1, 1], [1, 1]]) == 10\nassert solution.matrixScore([[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]]) == 18\nassert solution.matrixScore([[1, 1, 0, 0, 0]]) == 31\nassert solution.matrixScore([[1, 1, 1, 1, 0], [1, 1, 0, 0, 0]]) == 56\nassert solution.matrixScore([[1], [1]]) == 2\nassert solution.matrixScore([[1, 1, 1, 0, 1], [1, 0, 0, 1, 0], [1, 0, 0, 1, 0]]) == 78\nassert solution.matrixScore([[1, 0, 0, 0, 0], [1, 0, 0, 0, 1], [1, 1, 1, 1, 0], [1, 0, 0, 0, 1]]) == 108\nassert solution.matrixScore([[1], [1], [1], [1]]) == 4\nassert solution.matrixScore([[1], [1], [1], [1]]) == 4\nassert solution.matrixScore([[1, 0, 1, 1], [1, 0, 0, 1], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 1, 1]]) == 83\nassert solution.matrixScore([[1, 1, 0, 0, 0], [1, 0, 0, 1, 1]]) == 51\nassert solution.matrixScore([[1, 1, 0, 0], [1, 0, 0, 1], [1, 1, 1, 1], [1, 1, 1, 0], [1, 0, 1, 0]]) == 61\nassert solution.matrixScore([[1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0]]) == 116\nassert solution.matrixScore([[1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 1]]) == 178\nassert solution.matrixScore([[1, 1], [1, 1], [1, 1]]) == 9\nassert solution.matrixScore([[1, 0, 1], [1, 0, 0], [1, 0, 1]]) == 20\nassert solution.matrixScore([[1, 0], [1, 1], [1, 0]]) == 8\nassert solution.matrixScore([[1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 1, 0]]) == 158\nassert solution.matrixScore([[1, 1, 0, 1], [1, 0, 1, 1], [1, 1, 1, 1]]) == 39\nassert solution.matrixScore([[1, 0, 0, 0], [1, 1, 1, 0], [1, 1, 0, 1], [1, 1, 0, 0], [1, 1, 0, 1], [1, 0, 0, 0]]) == 78\nassert solution.matrixScore([[1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [1, 0, 0, 1, 0], [1, 0, 0, 1, 1]]) == 101\nassert solution.matrixScore([[1, 0], [1, 0], [1, 1], [1, 0], [1, 0]]) == 14\nassert solution.matrixScore([[1, 1]]) == 3\nassert solution.matrixScore([[1, 0, 0], [1, 0, 0]]) == 14\nassert solution.matrixScore([[1, 1, 1, 1, 1]]) == 31\nassert solution.matrixScore([[1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0]]) == 292\nassert solution.matrixScore([[1, 0, 1, 1], [1, 1, 1, 1]]) == 26\nassert solution.matrixScore([[1], [1], [1]]) == 3\nassert solution.matrixScore([[1, 0, 0, 0, 0, 0]]) == 63\nassert solution.matrixScore([[1], [1], [1], [1], [1], [1]]) == 6\nassert solution.matrixScore([[1], [1], [1], [1], [1]]) == 5\nassert solution.matrixScore([[1], [1]]) == 2\nassert solution.matrixScore([[1, 1, 1, 0, 1]]) == 31\nassert solution.matrixScore([[1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 0, 0], [1, 0, 0, 1], [1, 1, 0, 0]]) == 63\nassert solution.matrixScore([[1, 0, 0, 0], [1, 0, 0, 0], [1, 1, 0, 1], [1, 0, 1, 0], [1, 1, 0, 1]]) == 63\nassert solution.matrixScore([[1, 1, 1], [1, 0, 1], [1, 1, 0], [1, 1, 0]]) == 24\nassert solution.matrixScore([[1], [1], [1], [1], [1], [1]]) == 6\nassert solution.matrixScore([[1, 0], [1, 0], [1, 1]]) == 8\nassert solution.matrixScore([[1, 0, 1, 0, 1]]) == 31\nassert solution.matrixScore([[1], [1], [1], [1], [1], [1]]) == 6\nassert solution.matrixScore([[1, 0], [1, 0], [1, 1], [1, 0], [1, 1], [1, 1]]) == 15\nassert solution.matrixScore([[1, 0, 0], [1, 0, 1], [1, 0, 0], [1, 1, 0]]) == 25\nassert solution.matrixScore([[1, 0, 1, 0, 0], [1, 1, 1, 0, 0], [1, 1, 0, 0, 0]]) == 81",
  "inefficient_solution": "class Solution:\n    def matrixScore(self, grid):\n        m, n = len(grid), len(grid[0])\n        rows, cols = [[] for _ in range(m)], [[] for _ in range(n)]\n        for i in range(m):\n            for j in range(n):\n                rows[i].append(grid[i][j])\n                cols[j].append(grid[i][j])\n        for i in range(m):\n            if rows[i][0] == 0:\n                for j in range(n):\n                    rows[i][j] ^= 1\n        for j in range(n):\n            if cols[j][0] == 0:\n                for i in range(m):\n                    cols[j][i] ^= 1\n        ans = 0\n        for j in range(n):\n            cnt = sum(rows[i][j] for i in range(m))\n            ans += max(cnt, m - cnt) * (1 << (n - j - 1))\n        for i in range(m):\n            for j in range(n):\n                rows[i][j] = None\n                cols[j][i] = None\n        return ans",
  "is_python": true
}