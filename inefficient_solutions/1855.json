{
  "problem_idx": 1855,
  "task_name": "Maximum Distance Between a Pair of Values",
  "markdown_description": "\nYou are given two **non-increasing 0-indexed** integer arrays `nums1`\u200b\u200b\u200b\u200b\u200b\u200b and `nums2`\u200b\u200b\u200b\u200b\u200b\u200b.\n\n\nA pair of indices `(i, j)`, where `0 <= i < nums1.length` and `0 <= j < nums2.length`, is **valid** if both `i <= j` and `nums1[i] <= nums2[j]`. The **distance** of the pair is `j - i`\u200b\u200b\u200b\u200b.\n\n\nReturn *the **maximum distance** of any **valid** pair* `(i, j)`*. If there are no valid pairs, return* `0`.\n\n\nAn array `arr` is **non-increasing** if `arr[i-1] >= arr[i]` for every `1 <= i < arr.length`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]\n**Output:** 2\n**Explanation:** The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,2,2], nums2 = [10,10,1]\n**Output:** 1\n**Explanation:** The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]\n**Output:** 2\n**Explanation:** The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 105`\n* `1 <= nums1[i], nums2[j] <= 105`\n* Both `nums1` and `nums2` are **non-increasing**.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        ans = i = j = 0\n        while i < m:\n            while j < n and nums1[i] <= nums2[j]:\n                j += 1\n            ans = max(ans, j - i - 1)\n            i += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxDistance(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        ans = i = j = 0\n        while i < m:\n            while j < n and nums1[i] <= nums2[j]:\n                j += 1\n            ans = max(ans, j - i - 1)\n            i += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums1 = random.sample(range(1, 101), random.randint(2, 10))\n    nums2 = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxDistance(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxDistance(nums1, nums2) == expected_result\n        print(f\"assert solution.maxDistance({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxDistance({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxDistance([32, 71, 42, 63, 56, 34, 22, 11], [63, 39, 74, 100, 72, 17, 77, 7]) == 4\nassert solution.maxDistance([66, 61, 26, 2], [96, 85, 98]) == 2\nassert solution.maxDistance([84, 75, 46, 87], [76, 61, 69, 27, 40]) == 0\nassert solution.maxDistance([40, 50, 56, 16, 30, 47], [17, 50, 81, 83, 8, 77, 69, 82]) == 0\nassert solution.maxDistance([85, 58, 74, 87, 92, 62, 57, 11], [96, 99, 53]) == 1\nassert solution.maxDistance([96, 44, 25, 71, 68, 18, 100, 43, 39], [66, 87]) == 0\nassert solution.maxDistance([60, 23, 4, 21, 29, 74], [52, 26, 51, 48, 13]) == 2\nassert solution.maxDistance([45, 27, 99, 68, 56, 23], [29, 37]) == 0\nassert solution.maxDistance([60, 33, 38, 55], [14, 5, 98, 45, 24, 15, 8]) == 0\nassert solution.maxDistance([1, 16, 64], [5, 44, 3]) == 2\nassert solution.maxDistance([68, 40, 80, 30, 77, 34, 22, 23, 14], [81, 97, 40, 6, 69, 41, 53, 77, 42, 71]) == 1\nassert solution.maxDistance([53, 50, 30, 47, 65, 62], [63, 96, 99, 81, 29, 10]) == 3\nassert solution.maxDistance([21, 67, 89, 59, 86, 11], [53, 41]) == 1\nassert solution.maxDistance([15, 10, 55, 79, 43, 16, 96, 65, 66], [72, 52, 37, 88, 50, 35, 100, 28, 25]) == 8\nassert solution.maxDistance([87, 70, 84], [90, 45, 49, 34, 82, 4, 72, 44, 5]) == 0\nassert solution.maxDistance([37, 33, 50, 34, 74], [88, 2, 22, 99, 54, 13, 56, 28]) == 0\nassert solution.maxDistance([7, 73], [34, 92, 21, 43, 40, 76, 81, 59, 90]) == 8\nassert solution.maxDistance([59, 57, 28, 38, 96, 100, 8, 92, 84], [57, 40, 60]) == 0\nassert solution.maxDistance([69, 87, 90, 30, 85, 31], [99, 2]) == 0\nassert solution.maxDistance([41, 13, 2, 98, 99, 34, 56, 32, 84], [40, 31, 43, 33, 24, 3, 32, 100]) == 5\nassert solution.maxDistance([95, 44, 23, 38, 25], [33, 62, 18]) == 0\nassert solution.maxDistance([80, 16, 64, 1, 92, 58, 91, 100], [78, 99, 30, 52, 7, 95, 20, 23, 14, 48]) == 6\nassert solution.maxDistance([19, 90], [70, 43, 13]) == 1\nassert solution.maxDistance([20, 12, 84, 33], [64, 63]) == 1\nassert solution.maxDistance([16, 61, 99, 90, 32], [46, 20, 51, 52, 61, 92, 100, 19]) == 7\nassert solution.maxDistance([25, 17, 46, 71, 12, 88], [94, 84, 53, 95, 22, 50]) == 4\nassert solution.maxDistance([99, 10], [3, 43, 81, 69]) == 0\nassert solution.maxDistance([8, 31, 23, 47, 100, 92, 70, 99], [28, 46, 19, 58, 42, 60]) == 5\nassert solution.maxDistance([14, 81, 67, 57, 29, 23, 58, 88, 21, 87], [13, 71, 69, 20, 3, 33, 35]) == 0\nassert solution.maxDistance([17, 46, 22, 86, 31, 42], [69, 29]) == 1\nassert solution.maxDistance([20, 7, 63, 79, 57], [41, 13, 24, 92, 72]) == 3\nassert solution.maxDistance([12, 43, 75, 11, 80], [31, 73, 27, 25, 84, 95, 66, 33]) == 7\nassert solution.maxDistance([48, 5, 19], [13, 68]) == 0\nassert solution.maxDistance([14, 59, 2, 97, 99, 8, 56], [39, 97]) == 1\nassert solution.maxDistance([74, 56, 32], [32, 91, 58, 68, 70, 55]) == 3\nassert solution.maxDistance([43, 6, 57, 10, 25, 8, 87, 19, 99], [46, 7, 54, 42, 40, 49, 71, 76, 6, 44]) == 8\nassert solution.maxDistance([11, 29, 32, 63, 15, 6, 39, 87], [31, 18, 75, 10, 89]) == 2\nassert solution.maxDistance([90, 58, 5, 47], [34, 99, 51, 24, 3, 79, 62, 44, 98, 58]) == 1\nassert solution.maxDistance([38, 91, 76, 3, 40, 84], [33, 91, 56, 57, 64, 85, 95, 53]) == 4\nassert solution.maxDistance([80, 99, 57, 88, 96, 59], [44, 94, 29, 61, 51, 38, 9, 40, 69]) == 0\nassert solution.maxDistance([68, 62], [39, 21]) == 0\nassert solution.maxDistance([87, 28, 36, 43, 57, 96], [78, 10, 87, 92]) == 0\nassert solution.maxDistance([89, 79, 90, 96, 97, 8, 55], [90, 62, 37, 84, 11, 72, 41, 23, 48, 70]) == 4\nassert solution.maxDistance([82, 88, 80, 41, 56, 37, 98, 1, 76, 66], [61, 32, 65, 28, 64, 62, 97, 90]) == 0\nassert solution.maxDistance([39, 33, 22, 88, 77, 56, 60, 89, 83, 67], [55, 52, 29, 53, 80]) == 2\nassert solution.maxDistance([96, 29, 34, 60, 8, 98, 99, 4, 85], [64, 36]) == 0\nassert solution.maxDistance([37, 44, 76, 93, 47, 20, 26], [52, 2, 12, 10, 66, 27, 40]) == 0\nassert solution.maxDistance([6, 80, 65, 41, 31, 88, 38], [13, 71, 32]) == 2\nassert solution.maxDistance([18, 38, 22, 80, 2, 47], [38, 80, 100, 18, 98, 39, 42, 25, 55]) == 8\nassert solution.maxDistance([85, 93, 38, 15, 44, 36, 90], [30, 48, 55, 29, 46]) == 1\nassert solution.maxDistance([59, 37, 51, 85, 71, 14, 29, 81], [88, 28, 4, 41, 95]) == 0\nassert solution.maxDistance([91, 47, 88, 33, 13, 59, 65, 23, 96, 61], [5, 64, 2, 69, 40, 94, 17, 70]) == 0\nassert solution.maxDistance([70, 3, 74, 8, 90, 53], [53, 45, 90, 76, 49, 3, 54, 51, 34, 25]) == 8\nassert solution.maxDistance([7, 75, 80, 4, 98, 69], [35, 45, 31, 34]) == 3\nassert solution.maxDistance([43, 4, 14], [33, 48, 46]) == 1\nassert solution.maxDistance([28, 82, 11], [42, 69, 14]) == 1\nassert solution.maxDistance([21, 44, 49, 53, 47, 8, 78, 29, 19], [3, 60, 51]) == 0\nassert solution.maxDistance([16, 94, 75, 96, 69], [46, 33, 71, 79, 23, 9, 3, 62, 42, 70]) == 4\nassert solution.maxDistance([53, 15, 17, 29, 78, 70, 54, 99, 82], [9, 59, 99, 3, 51, 97, 45, 13]) == 0\nassert solution.maxDistance([20, 40, 2, 70, 49, 74, 36, 1], [27, 19, 8, 44, 12, 21]) == 3\nassert solution.maxDistance([33, 37, 39], [56, 13]) == 0\nassert solution.maxDistance([62, 76, 37], [99, 15, 89, 80]) == 0\nassert solution.maxDistance([98, 29], [6, 61, 58, 5, 94, 15, 25]) == 0\nassert solution.maxDistance([2, 23, 40, 64, 14], [54, 73, 53, 90]) == 3\nassert solution.maxDistance([79, 31, 1, 22, 87, 21, 67, 32, 54], [89, 82, 91, 49, 68, 27]) == 3\nassert solution.maxDistance([41, 53, 20, 54], [35, 61, 44, 2, 11]) == 0\nassert solution.maxDistance([28, 69, 89, 13, 46, 96, 86, 16], [93, 22, 18]) == 0\nassert solution.maxDistance([63, 78, 76, 99, 100, 55, 79, 19, 52, 29], [58, 39, 36, 87, 28, 5, 69, 3, 80, 75]) == 0\nassert solution.maxDistance([26, 8], [42, 62, 51, 60, 89, 10, 53]) == 5\nassert solution.maxDistance([8, 71, 87, 90, 61, 57, 1, 19, 100, 79], [71, 84, 78, 92, 86]) == 4\nassert solution.maxDistance([76, 42], [47, 68]) == 0\nassert solution.maxDistance([86, 78, 6, 20, 59], [5, 74, 27, 56]) == 0\nassert solution.maxDistance([22, 88, 95, 50, 96], [79, 50, 72]) == 2\nassert solution.maxDistance([93, 42, 25, 73, 3, 30], [60, 21, 56, 100, 62, 46, 5]) == 2\nassert solution.maxDistance([41, 86, 7, 44, 78, 48], [3, 65, 42, 13, 82, 100, 32, 72]) == 0\nassert solution.maxDistance([90, 92], [57, 54, 63, 5, 72, 61, 29]) == 0\nassert solution.maxDistance([62, 66, 31], [97, 93, 9, 51, 7, 24, 94]) == 1\nassert solution.maxDistance([5, 81, 79, 78, 32, 84, 67, 28, 40, 51], [9, 21, 81, 59, 53, 46, 10, 80, 22]) == 8\nassert solution.maxDistance([36, 80, 50, 21, 95, 86, 34, 38, 52], [39, 86, 69, 87, 24, 78, 98, 8, 40, 68]) == 3\nassert solution.maxDistance([61, 58, 63, 37, 96, 14, 71, 98, 44, 23], [3, 45]) == 0\nassert solution.maxDistance([66, 49, 57], [78, 72, 8]) == 1\nassert solution.maxDistance([69, 96, 77, 39, 60], [71, 73, 41, 39, 3, 15]) == 1\nassert solution.maxDistance([41, 63, 22, 43, 91, 23, 5, 73], [18, 51, 68, 87, 43, 37, 47, 96, 26, 40]) == 3\nassert solution.maxDistance([59, 79, 45, 36, 17, 69, 25, 78, 7, 41], [8, 78, 56]) == 0\nassert solution.maxDistance([83, 74], [83, 78, 17, 72, 20, 100, 13]) == 0\nassert solution.maxDistance([32, 16, 49, 2, 73, 82, 97, 17, 89], [88, 52, 95, 21, 3]) == 2\nassert solution.maxDistance([62, 94, 26, 76, 49, 82, 15], [27, 37, 65, 100, 12]) == 1\nassert solution.maxDistance([89, 59, 3, 52], [25, 37, 89, 52, 83, 44, 18, 26, 51, 39]) == 7\nassert solution.maxDistance([1, 22, 57, 89], [1, 51, 85, 83]) == 3\nassert solution.maxDistance([13, 1, 34], [27, 80, 22]) == 2\nassert solution.maxDistance([86, 79, 40, 4, 98, 7, 20, 77], [39, 82, 27, 99, 53, 71, 30, 56, 45]) == 5\nassert solution.maxDistance([30, 31, 52], [98, 87, 31, 19, 35, 65, 66]) == 2\nassert solution.maxDistance([69, 16, 71, 79, 30, 3, 10], [79, 96, 14, 46, 38, 5]) == 1\nassert solution.maxDistance([14, 45, 57, 44], [62, 33, 77, 1, 7, 72, 22, 68, 60, 35]) == 2\nassert solution.maxDistance([92, 6, 93, 96, 100, 82, 80, 14, 24], [57, 41, 73, 66, 45, 99]) == 4\nassert solution.maxDistance([13, 82, 27], [94, 38, 82]) == 2\nassert solution.maxDistance([32, 90, 73, 3, 60, 4, 53, 15], [6, 23, 34, 85, 57, 36, 12, 24, 44]) == 5\nassert solution.maxDistance([79, 22, 58, 32, 66], [99, 94, 18, 51, 79, 20, 64]) == 1\nassert solution.maxDistance([45, 30, 62, 57], [71, 44, 11, 7]) == 0\nassert solution.maxDistance([13, 48, 68, 77, 30, 51, 32], [29, 46, 80]) == 2",
  "inefficient_solution": "class Solution:\n    def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        nums2_copy = nums2[:]  # copy the entire list to create a redundant copy\n        ans = i = j = 0\n        while i < m:\n            num1 = nums1[i]\n            nums2_copy2 = nums2_copy[:]  # create another redundant copy of nums2\n            for k in range(n):\n                if nums2_copy2[k] >= num1:\n                    nums2_copy2[k] = 99999999  # mark the valid indices with a large number\n            while j < n and nums2_copy2[j] != 99999999:\n                j += 1\n            ans = max(ans, j - i - 1)\n            i += 1\n        return ans",
  "is_python": true
}