{
  "problem_idx": 845,
  "task_name": "Longest Mountain in Array",
  "markdown_description": "\nYou may recall that an array `arr` is a **mountain array** if and only if:\n\n\n* `arr.length >= 3`\n* There exists some index `i` (**0-indexed**) with `0 < i < arr.length - 1` such that:\n\t+ `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n\t+ `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n\nGiven an integer array `arr`, return *the length of the longest subarray, which is a mountain*. Return `0` if there is no mountain subarray.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [2,1,4,7,3,2,5]\n**Output:** 5\n**Explanation:** The largest mountain is [1,4,7,3,2] which has length 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [2,2,2]\n**Output:** 0\n**Explanation:** There is no mountain.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 104`\n* `0 <= arr[i] <= 104`\n\n\n\u00a0\n\n\n**Follow up:**\n\n\n* Can you solve it using only one pass?\n* Can you solve it in `O(1)` space?\n\n\n",
  "canonical_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        ans = l = 0\n        while l + 2 < n:\n            r = l + 1\n            if arr[l] < arr[r]:\n                while r + 1 < n and arr[r] < arr[r + 1]:\n                    r += 1\n                if r < n - 1 and arr[r] > arr[r + 1]:\n                    while r < n - 1 and arr[r] > arr[r + 1]:\n                        r += 1\n                    ans = max(ans, r - l + 1)\n                else:\n                    r += 1\n            l = r\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestMountain(self, arr):\n        n = len(arr)\n        ans = l = 0\n        while l + 2 < n:\n            r = l + 1\n            if arr[l] < arr[r]:\n                while r + 1 < n and arr[r] < arr[r + 1]:\n                    r += 1\n                if r < n - 1 and arr[r] > arr[r + 1]:\n                    while r < n - 1 and arr[r] > arr[r + 1]:\n                        r += 1\n                    ans = max(ans, r - l + 1)\n                else:\n                    r += 1\n            l = r\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(1, 101), random.randint(3, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestMountain(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestMountain(arr) == expected_result\n        print(f\"assert solution.longestMountain({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestMountain({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestMountain([1, 98, 87, 40, 51, 26]) == 4\nassert solution.longestMountain([16, 90, 92, 71, 24]) == 5\nassert solution.longestMountain([89, 18, 78, 52]) == 3\nassert solution.longestMountain([30, 27, 36, 47, 83]) == 0\nassert solution.longestMountain([43, 80, 1, 97]) == 3\nassert solution.longestMountain([75, 27, 46, 54, 13, 80, 98, 24]) == 4\nassert solution.longestMountain([76, 97, 99]) == 0\nassert solution.longestMountain([4, 51, 31, 80, 95, 20, 28, 42, 26, 45]) == 4\nassert solution.longestMountain([1, 54, 63, 92]) == 0\nassert solution.longestMountain([54, 60, 97, 59]) == 4\nassert solution.longestMountain([28, 44, 37, 30, 47, 14, 6, 61, 15, 90]) == 4\nassert solution.longestMountain([20, 94, 59, 60, 76]) == 3\nassert solution.longestMountain([47, 59, 64, 78, 32]) == 5\nassert solution.longestMountain([75, 37, 67, 7, 13, 46, 74, 62]) == 5\nassert solution.longestMountain([7, 22, 14, 40, 61, 69, 65, 90]) == 5\nassert solution.longestMountain([63, 100, 58, 46, 91, 43, 73, 20]) == 4\nassert solution.longestMountain([74, 6, 89, 56, 59]) == 3\nassert solution.longestMountain([72, 6, 7, 63, 19]) == 4\nassert solution.longestMountain([72, 20, 27, 7, 45, 97]) == 3\nassert solution.longestMountain([36, 91, 47, 20, 7, 28]) == 5\nassert solution.longestMountain([52, 79, 35]) == 3\nassert solution.longestMountain([13, 99, 53, 23, 38, 80, 28]) == 4\nassert solution.longestMountain([32, 70, 38, 51, 8, 64, 95, 90, 3, 78]) == 5\nassert solution.longestMountain([78, 90, 65, 21, 8, 26]) == 5\nassert solution.longestMountain([31, 90, 76, 62, 77, 8, 13, 1]) == 4\nassert solution.longestMountain([67, 90, 25, 45, 3, 72]) == 3\nassert solution.longestMountain([9, 15, 82, 63, 30, 56]) == 5\nassert solution.longestMountain([83, 43, 59, 35, 8, 10, 68]) == 4\nassert solution.longestMountain([71, 98, 85, 89, 43]) == 3\nassert solution.longestMountain([90, 43, 89, 2, 40]) == 3\nassert solution.longestMountain([34, 40, 47, 81, 92, 17, 65, 37, 36]) == 6\nassert solution.longestMountain([15, 34, 82, 42, 68, 61, 26, 22, 83, 5]) == 5\nassert solution.longestMountain([37, 61, 26]) == 3\nassert solution.longestMountain([22, 2, 68, 74, 77]) == 0\nassert solution.longestMountain([5, 30, 66, 8, 77, 65, 78, 21, 61]) == 4\nassert solution.longestMountain([65, 49, 96, 39, 37, 73, 30, 20, 83]) == 4\nassert solution.longestMountain([4, 48, 81]) == 0\nassert solution.longestMountain([82, 46, 37]) == 0\nassert solution.longestMountain([99, 1, 58, 39, 93, 68, 10, 67, 4]) == 4\nassert solution.longestMountain([88, 85, 87, 33]) == 3\nassert solution.longestMountain([56, 45, 91, 33, 58, 92, 74]) == 4\nassert solution.longestMountain([10, 50, 99, 22, 25, 100, 81, 94]) == 4\nassert solution.longestMountain([36, 37, 89, 64, 8, 18, 46, 63, 65, 20]) == 6\nassert solution.longestMountain([2, 96, 73, 68, 46, 77, 91, 69, 95]) == 5\nassert solution.longestMountain([88, 29, 43, 92, 6, 53, 95, 14]) == 4\nassert solution.longestMountain([71, 14, 6, 40, 49, 98, 61, 9]) == 6\nassert solution.longestMountain([91, 65, 18, 39, 9]) == 3\nassert solution.longestMountain([20, 56, 64]) == 0\nassert solution.longestMountain([66, 97, 86]) == 3\nassert solution.longestMountain([70, 45, 15, 66, 10, 65, 59, 95]) == 3\nassert solution.longestMountain([44, 7, 71, 87, 89, 30, 11, 85, 55, 94]) == 6\nassert solution.longestMountain([12, 68, 44, 29, 21, 99, 87]) == 5\nassert solution.longestMountain([22, 14, 20, 47, 100, 38, 94]) == 5\nassert solution.longestMountain([80, 34, 21]) == 0\nassert solution.longestMountain([93, 94, 68, 80, 81, 20, 72, 15, 54, 24]) == 4\nassert solution.longestMountain([75, 66, 8, 29, 49]) == 0\nassert solution.longestMountain([36, 64, 39, 89, 81, 25, 78]) == 4\nassert solution.longestMountain([43, 27, 56, 73, 58, 9, 19, 90, 24, 76]) == 5\nassert solution.longestMountain([53, 31, 87]) == 0\nassert solution.longestMountain([70, 32, 43]) == 0\nassert solution.longestMountain([50, 3, 42, 52, 92, 88, 63, 12, 94]) == 7\nassert solution.longestMountain([61, 23, 84, 17, 75, 32, 78, 90, 74]) == 4\nassert solution.longestMountain([3, 26, 82, 81, 49, 66, 16]) == 5\nassert solution.longestMountain([58, 77, 75, 92, 4]) == 3\nassert solution.longestMountain([67, 31, 76, 87, 18, 84, 68]) == 4\nassert solution.longestMountain([17, 42, 50, 28, 74, 83, 53, 96, 22, 59]) == 4\nassert solution.longestMountain([89, 49, 30, 19, 79, 90, 56, 59]) == 4\nassert solution.longestMountain([27, 29, 43, 7, 6]) == 5\nassert solution.longestMountain([46, 86, 19, 23]) == 3\nassert solution.longestMountain([75, 98, 85, 93, 82]) == 3\nassert solution.longestMountain([83, 70, 66, 88, 19, 39, 15]) == 3\nassert solution.longestMountain([29, 53, 97, 81, 79, 66, 70, 52, 91]) == 6\nassert solution.longestMountain([99, 42, 52, 63, 21, 76]) == 4\nassert solution.longestMountain([27, 64, 35, 90, 43, 17, 58, 33, 71, 8]) == 4\nassert solution.longestMountain([93, 61, 46, 14, 37, 73]) == 0\nassert solution.longestMountain([14, 5, 34, 85, 29, 73, 6, 33]) == 4\nassert solution.longestMountain([18, 64, 97, 34, 38, 80]) == 4\nassert solution.longestMountain([37, 75, 92, 59, 50, 11, 91, 6, 89, 28]) == 6\nassert solution.longestMountain([20, 25, 22, 14, 2, 61, 55, 33, 78, 74]) == 5\nassert solution.longestMountain([13, 78, 90, 15, 43, 27, 39, 91]) == 4\nassert solution.longestMountain([73, 52, 78, 12, 98, 21, 4, 36, 88, 58]) == 4\nassert solution.longestMountain([80, 87, 76, 62, 58, 67, 31]) == 5\nassert solution.longestMountain([91, 25, 27, 78, 51, 33, 14, 69, 77, 81]) == 6\nassert solution.longestMountain([35, 86, 96, 3, 7, 19, 4, 20]) == 4\nassert solution.longestMountain([3, 89, 75, 91, 97, 52, 49, 63, 40, 79]) == 5\nassert solution.longestMountain([80, 36, 52, 90, 23]) == 4\nassert solution.longestMountain([39, 37, 95, 4, 81, 13, 11, 3, 58]) == 5\nassert solution.longestMountain([47, 100, 48, 83, 27, 96, 58, 22, 72, 68]) == 4\nassert solution.longestMountain([3, 47, 58, 43, 7]) == 5\nassert solution.longestMountain([15, 13, 60, 87, 24]) == 4\nassert solution.longestMountain([61, 20, 94]) == 0\nassert solution.longestMountain([48, 64, 31, 40, 9, 19, 13, 66, 61]) == 3\nassert solution.longestMountain([73, 51, 76, 57, 1, 10, 5, 68, 95, 66]) == 4\nassert solution.longestMountain([55, 23, 88, 42]) == 3\nassert solution.longestMountain([62, 28, 76, 53, 74]) == 3\nassert solution.longestMountain([91, 55, 16, 84, 40, 30, 37]) == 4\nassert solution.longestMountain([35, 11, 98, 63, 73, 16, 65, 36, 42]) == 3\nassert solution.longestMountain([95, 7, 60, 92, 56]) == 4\nassert solution.longestMountain([87, 95, 48, 56, 66]) == 3\nassert solution.longestMountain([85, 36, 63, 34]) == 3",
  "inefficient_solution": "class Solution:\n    def longestMountain(self, arr: List[int]) -> int:\n        n = len(arr)\n        max_length = 0\n        for i in range(n):\n            if i == 0:\n                continue\n            temp_arr = []\n            for j in range(i, n):\n                temp_arr.append(arr[j])\n                if j == i:\n                    continue\n                if arr[j] > arr[j-1]:\n                    max_val = max(temp_arr)\n                    if i != 0 and arr[j-1] > max_val:\n                        if arr[i-1] < arr[i]:\n                            max_length = max(max_length, len(temp_arr))\n                            temp_arr = []\n                        else:\n                            break\n                elif arr[j] < arr[j-1]:\n                    max_val = max(temp_arr)\n                    if i != 0 and arr[j-1] < max_val:\n                        if arr[i-1] > arr[i]:\n                            max_length = max(max_length, len(temp_arr))\n                            temp_arr = []\n                        else:\n                            break\n        return max_length",
  "is_python": true
}