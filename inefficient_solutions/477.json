{
  "problem_idx": 477,
  "task_name": "Total Hamming Distance",
  "markdown_description": "\nThe [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\n\n\nGiven an integer array `nums`, return *the sum of **Hamming distances** between all the pairs of the integers in* `nums`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,14,2]\n**Output:** 6\n**Explanation:** In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,14,4]\n**Output:** 4\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `0 <= nums[i] <= 109`\n* The answer for the given input will fit in a **32-bit** integer.\n\n\n",
  "canonical_solution": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        ans = 0\n        for i in range(31):\n            a = b = 0\n            for v in nums:\n                t = (v >> i) & 1\n                if t:\n                    a += 1\n                else:\n                    b += 1\n            ans += a * b\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        ans = 0\n        for i in range(31):\n            a = b = 0\n            for v in nums:\n                t = (v >> i) & 1\n                if t:\n                    a += 1\n                else:\n                    b += 1\n            ans += a * b\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.totalHammingDistance(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.totalHammingDistance(nums) == expected_result\n        print(f\"assert solution.totalHammingDistance({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.totalHammingDistance({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.totalHammingDistance([92, 41]) == 5\nassert solution.totalHammingDistance([11, 53, 88]) == 14\nassert solution.totalHammingDistance([21, 29, 67]) == 10\nassert solution.totalHammingDistance([30, 21, 88, 58, 18, 97, 79]) == 80\nassert solution.totalHammingDistance([21, 96, 92, 48, 5, 95, 72]) == 76\nassert solution.totalHammingDistance([38, 71, 70, 24, 82, 96]) == 51\nassert solution.totalHammingDistance([8, 18, 65, 37, 81, 67, 86, 61]) == 101\nassert solution.totalHammingDistance([54, 87, 92, 65, 66, 58, 35]) == 80\nassert solution.totalHammingDistance([89, 5, 52, 18]) == 23\nassert solution.totalHammingDistance([25, 34, 3, 65, 44, 51, 58, 64, 32, 78]) == 156\nassert solution.totalHammingDistance([7, 94, 17, 22]) == 19\nassert solution.totalHammingDistance([71, 26]) == 5\nassert solution.totalHammingDistance([24, 93, 1, 7, 15, 39]) == 49\nassert solution.totalHammingDistance([97, 46, 88, 70, 19, 76, 91, 47, 48]) == 140\nassert solution.totalHammingDistance([71, 66]) == 2\nassert solution.totalHammingDistance([95, 58, 81, 12, 26, 10, 99]) == 76\nassert solution.totalHammingDistance([90, 19, 47]) == 12\nassert solution.totalHammingDistance([11, 70, 83, 38]) == 21\nassert solution.totalHammingDistance([14, 78, 67, 76, 46, 38, 12, 88]) == 81\nassert solution.totalHammingDistance([93, 44, 67, 74, 55, 62]) == 60\nassert solution.totalHammingDistance([94, 42, 100, 76, 1]) == 38\nassert solution.totalHammingDistance([19, 83]) == 1\nassert solution.totalHammingDistance([72, 17, 91, 23, 42, 45, 19, 59]) == 96\nassert solution.totalHammingDistance([27, 12, 76, 41, 82, 3, 84, 53]) == 106\nassert solution.totalHammingDistance([94, 91, 74, 25, 49, 68, 99, 39, 18]) == 134\nassert solution.totalHammingDistance([45, 40, 11, 6, 61, 81]) == 55\nassert solution.totalHammingDistance([47, 60, 34, 94, 4, 77, 82, 98, 69]) == 134\nassert solution.totalHammingDistance([87, 39]) == 3\nassert solution.totalHammingDistance([86, 15, 13, 43, 85, 25]) == 52\nassert solution.totalHammingDistance([3, 86, 39, 27, 78, 47, 80]) == 76\nassert solution.totalHammingDistance([90, 65, 1, 14, 100, 84, 7, 85]) == 95\nassert solution.totalHammingDistance([98, 32, 93, 12, 87, 45, 39]) == 80\nassert solution.totalHammingDistance([92, 86]) == 2\nassert solution.totalHammingDistance([52, 77, 26, 81, 2, 73, 99, 65, 45]) == 130\nassert solution.totalHammingDistance([51, 33, 64, 18, 82, 91, 88, 69, 74, 19]) == 143\nassert solution.totalHammingDistance([70, 42, 73, 97, 6]) == 36\nassert solution.totalHammingDistance([59, 27, 9, 48, 31, 54, 87, 56, 55]) == 112\nassert solution.totalHammingDistance([29, 34, 18, 59, 100, 9, 63, 64]) == 107\nassert solution.totalHammingDistance([60, 65, 99, 97, 7, 36, 59, 15, 39, 27]) == 155\nassert solution.totalHammingDistance([27, 17]) == 2\nassert solution.totalHammingDistance([60, 91, 73, 24, 89, 59, 26]) == 58\nassert solution.totalHammingDistance([90, 26, 16, 6, 78]) == 28\nassert solution.totalHammingDistance([20, 66, 96]) == 10\nassert solution.totalHammingDistance([46, 5, 8, 3, 99, 71, 68, 75, 87]) == 116\nassert solution.totalHammingDistance([76, 91]) == 4\nassert solution.totalHammingDistance([37, 69, 49, 10]) == 23\nassert solution.totalHammingDistance([50, 59, 39, 38, 40]) == 28\nassert solution.totalHammingDistance([30, 23, 53]) == 8\nassert solution.totalHammingDistance([33, 32, 75, 3, 69, 82, 27, 94]) == 100\nassert solution.totalHammingDistance([91, 53, 29, 38, 59, 4, 21, 76, 1]) == 126\nassert solution.totalHammingDistance([74, 26, 89, 43, 72, 32]) == 47\nassert solution.totalHammingDistance([36, 22, 84, 64, 76]) == 28\nassert solution.totalHammingDistance([66, 15, 32, 5, 95, 96, 45]) == 78\nassert solution.totalHammingDistance([20, 1]) == 3\nassert solution.totalHammingDistance([30, 100, 52]) == 10\nassert solution.totalHammingDistance([56, 31, 61]) == 8\nassert solution.totalHammingDistance([49, 14, 94, 45, 34, 70, 74, 41]) == 104\nassert solution.totalHammingDistance([11, 48, 97, 83, 79, 37, 87, 26, 75]) == 128\nassert solution.totalHammingDistance([43, 86, 75, 27, 46, 50, 85, 48, 15, 20]) == 165\nassert solution.totalHammingDistance([56, 57, 12, 51, 8, 17, 54, 97]) == 93\nassert solution.totalHammingDistance([16, 36, 88, 75, 62, 63, 67, 40]) == 108\nassert solution.totalHammingDistance([31, 63, 1, 74, 65, 14, 97, 8]) == 100\nassert solution.totalHammingDistance([92, 68, 43, 60, 24, 93, 29, 47, 71]) == 124\nassert solution.totalHammingDistance([95, 87, 94, 14, 34, 37, 19, 91]) == 96\nassert solution.totalHammingDistance([9, 46, 69, 20, 99, 6, 58]) == 80\nassert solution.totalHammingDistance([39, 95]) == 4\nassert solution.totalHammingDistance([87, 11, 32, 35, 56, 94, 29, 60, 58, 52]) == 159\nassert solution.totalHammingDistance([75, 3]) == 2\nassert solution.totalHammingDistance([20, 52, 4, 42, 49, 86, 82, 57, 16]) == 114\nassert solution.totalHammingDistance([28, 44]) == 2\nassert solution.totalHammingDistance([53, 35, 59, 16, 33, 21, 17, 38, 32]) == 100\nassert solution.totalHammingDistance([71, 99, 47, 68, 80, 24, 8, 2]) == 101\nassert solution.totalHammingDistance([37, 39, 51]) == 6\nassert solution.totalHammingDistance([61, 55]) == 2\nassert solution.totalHammingDistance([81, 23]) == 3\nassert solution.totalHammingDistance([87, 32, 29, 8, 42, 7]) == 57\nassert solution.totalHammingDistance([96, 19, 43, 98, 61, 3, 2, 69, 46, 68]) == 159\nassert solution.totalHammingDistance([14, 30, 36, 55, 81, 70]) == 54\nassert solution.totalHammingDistance([38, 41, 66, 30, 14]) == 34\nassert solution.totalHammingDistance([61, 41, 82, 46, 94, 13, 69, 89]) == 104\nassert solution.totalHammingDistance([4, 90, 83, 22]) == 20\nassert solution.totalHammingDistance([30, 83, 1, 15, 78, 21, 19, 14]) == 86\nassert solution.totalHammingDistance([72, 29, 97, 34, 61, 64]) == 57\nassert solution.totalHammingDistance([39, 52, 24, 86, 95, 20, 94]) == 68\nassert solution.totalHammingDistance([78, 92, 61, 74, 5, 82, 80, 1, 26, 28]) == 152\nassert solution.totalHammingDistance([59, 100, 51, 86, 64, 13]) == 62\nassert solution.totalHammingDistance([73, 46, 96, 2, 78, 4, 61, 100, 84, 85]) == 156\nassert solution.totalHammingDistance([42, 69, 84, 66, 40, 74, 35]) == 74\nassert solution.totalHammingDistance([15, 1, 7, 32, 24, 81, 49, 34]) == 91\nassert solution.totalHammingDistance([23, 100]) == 5\nassert solution.totalHammingDistance([69, 77, 63, 12, 47, 27, 35, 40, 29, 28]) == 146\nassert solution.totalHammingDistance([47, 35, 78, 75, 97, 10, 64, 5, 16, 56]) == 160\nassert solution.totalHammingDistance([73, 72, 76]) == 4\nassert solution.totalHammingDistance([53, 96]) == 4\nassert solution.totalHammingDistance([10, 78, 82, 87, 73, 41, 75, 79, 88]) == 110\nassert solution.totalHammingDistance([95, 49, 79, 90, 57, 4, 92, 53]) == 103\nassert solution.totalHammingDistance([75, 22, 92, 78, 53, 30, 39, 96, 76]) == 130\nassert solution.totalHammingDistance([58, 83]) == 4\nassert solution.totalHammingDistance([70, 90, 72, 83, 66, 21, 74, 49, 98]) == 116\nassert solution.totalHammingDistance([66, 8, 82, 72, 22, 75, 37, 93]) == 99",
  "inefficient_solution": "class Solution:\n    def totalHammingDistance(self, nums: List[int]) -> int:\n        ans = 0\n        for i in range(31):\n            a = [0] * len(nums)\n            b = [0] * len(nums)\n            for j, v in enumerate(nums):\n                t = (v >> i) & 1\n                if t:\n                    a[j] = 1\n                else:\n                    b[j] = 1\n            count_a = 0\n            count_b = 0\n            for j in range(len(nums)):\n                if a[j]:\n                    count_a += 1\n                else:\n                    count_b += 1\n            ans += count_a * count_b\n        return ans",
  "is_python": true
}