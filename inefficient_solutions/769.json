{
  "problem_idx": 769,
  "task_name": "Max Chunks To Make Sorted",
  "markdown_description": "\nYou are given an integer array `arr` of length `n` that represents a permutation of the integers in the range `[0, n - 1]`.\n\n\nWe split `arr` into some number of **chunks** (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\n\n\nReturn *the largest number of chunks we can make to sort the array*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [4,3,2,1,0]\n**Output:** 1\n**Explanation:**\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1,0,2,3,4]\n**Output:** 4\n**Explanation:**\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == arr.length`\n* `1 <= n <= 10`\n* `0 <= arr[i] < n`\n* All the elements of `arr` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        mx = ans = 0\n        for i, v in enumerate(arr):\n            mx = max(mx, v)\n            if i == mx:\n                ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        mx = ans = 0\n        for i, v in enumerate(arr):\n            mx = max(mx, v)\n            if i == mx:\n                ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random permutation list\n    n = random.randint(1, 10)\n    arr = random.sample(range(n), n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxChunksToSorted(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxChunksToSorted(arr) == expected_result\n        print(f\"assert solution.maxChunksToSorted({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxChunksToSorted({arr}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxChunksToSorted([1, 0]) == 1\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([3, 7, 4, 5, 8, 6, 2, 0, 9, 1]) == 1\nassert solution.maxChunksToSorted([0, 4, 2, 5, 1, 3, 6]) == 3\nassert solution.maxChunksToSorted([0, 1, 2, 3]) == 4\nassert solution.maxChunksToSorted([3, 0, 1, 2, 4]) == 2\nassert solution.maxChunksToSorted([3, 1, 5, 0, 6, 2, 4]) == 1\nassert solution.maxChunksToSorted([2, 3, 1, 4, 0]) == 1\nassert solution.maxChunksToSorted([1, 0]) == 1\nassert solution.maxChunksToSorted([3, 2, 4, 1, 0]) == 1\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([6, 8, 5, 0, 1, 4, 9, 7, 2, 3]) == 1\nassert solution.maxChunksToSorted([3, 8, 5, 2, 0, 1, 4, 7, 6]) == 1\nassert solution.maxChunksToSorted([6, 1, 0, 4, 5, 3, 2]) == 1\nassert solution.maxChunksToSorted([7, 6, 1, 2, 5, 3, 0, 4, 8]) == 2\nassert solution.maxChunksToSorted([4, 2, 3, 6, 5, 0, 7, 1]) == 1\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([2, 0, 1]) == 1\nassert solution.maxChunksToSorted([9, 7, 5, 0, 6, 1, 4, 3, 8, 2]) == 1\nassert solution.maxChunksToSorted([6, 1, 7, 0, 8, 4, 9, 5, 2, 3]) == 1\nassert solution.maxChunksToSorted([2, 1, 4, 6, 5, 7, 0, 3]) == 1\nassert solution.maxChunksToSorted([2, 3, 1, 0, 5, 4]) == 2\nassert solution.maxChunksToSorted([4, 1, 2, 5, 0, 7, 6, 3]) == 1\nassert solution.maxChunksToSorted([3, 0, 1, 2]) == 1\nassert solution.maxChunksToSorted([1, 2, 3, 0]) == 1\nassert solution.maxChunksToSorted([0, 5, 3, 1, 2, 4]) == 2\nassert solution.maxChunksToSorted([6, 5, 2, 4, 3, 1, 0]) == 1\nassert solution.maxChunksToSorted([2, 8, 1, 3, 6, 7, 5, 4, 0, 9]) == 2\nassert solution.maxChunksToSorted([0, 1, 3, 2, 4]) == 4\nassert solution.maxChunksToSorted([1, 0, 2, 3, 4]) == 4\nassert solution.maxChunksToSorted([1, 4, 0, 3, 2]) == 1\nassert solution.maxChunksToSorted([2, 4, 3, 1, 0, 5]) == 2\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([4, 1, 3, 5, 0, 6, 2]) == 1\nassert solution.maxChunksToSorted([1, 3, 4, 0, 2]) == 1\nassert solution.maxChunksToSorted([2, 8, 1, 0, 7, 9, 3, 4, 5, 6]) == 1\nassert solution.maxChunksToSorted([1, 0, 4, 3, 2]) == 2\nassert solution.maxChunksToSorted([2, 0, 4, 5, 1, 3]) == 1\nassert solution.maxChunksToSorted([2, 0, 1]) == 1\nassert solution.maxChunksToSorted([0, 4, 2, 1, 3]) == 2\nassert solution.maxChunksToSorted([3, 0, 1, 2]) == 1\nassert solution.maxChunksToSorted([2, 0, 1]) == 1\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([8, 2, 0, 3, 7, 4, 9, 6, 5, 1]) == 1\nassert solution.maxChunksToSorted([4, 3, 1, 2, 5, 0]) == 1\nassert solution.maxChunksToSorted([0, 2, 1]) == 2\nassert solution.maxChunksToSorted([0, 1, 2, 4, 3]) == 4\nassert solution.maxChunksToSorted([0, 1, 6, 3, 4, 7, 5, 2]) == 3\nassert solution.maxChunksToSorted([2, 3, 0, 1]) == 1\nassert solution.maxChunksToSorted([1, 4, 0, 5, 6, 3, 2]) == 1\nassert solution.maxChunksToSorted([4, 5, 0, 2, 3, 1]) == 1\nassert solution.maxChunksToSorted([6, 2, 0, 8, 1, 4, 7, 3, 5]) == 1\nassert solution.maxChunksToSorted([4, 0, 3, 5, 2, 1]) == 1\nassert solution.maxChunksToSorted([0, 2, 3, 1, 4, 5]) == 4\nassert solution.maxChunksToSorted([2, 3, 1, 4, 0, 6, 5]) == 2\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([0, 1, 3, 5, 4, 2]) == 3\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([0, 1]) == 2\nassert solution.maxChunksToSorted([2, 0, 4, 3, 5, 9, 8, 1, 6, 7]) == 1\nassert solution.maxChunksToSorted([2, 1, 0]) == 1\nassert solution.maxChunksToSorted([0, 2, 3, 1]) == 2\nassert solution.maxChunksToSorted([0, 1]) == 2\nassert solution.maxChunksToSorted([0, 3, 7, 2, 4, 1, 5, 6]) == 2\nassert solution.maxChunksToSorted([1, 2, 0, 3]) == 2\nassert solution.maxChunksToSorted([3, 8, 0, 1, 2, 6, 5, 7, 4]) == 1\nassert solution.maxChunksToSorted([8, 0, 2, 1, 4, 7, 5, 6, 9, 3]) == 1\nassert solution.maxChunksToSorted([2, 0, 8, 6, 3, 1, 7, 5, 4]) == 1\nassert solution.maxChunksToSorted([2, 4, 1, 7, 9, 3, 5, 0, 6, 8]) == 1\nassert solution.maxChunksToSorted([3, 1, 0, 4, 2]) == 1\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([6, 0, 2, 5, 4, 9, 1, 8, 7, 3]) == 1\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([8, 3, 6, 1, 7, 5, 4, 2, 0]) == 1\nassert solution.maxChunksToSorted([5, 4, 1, 3, 0, 2]) == 1\nassert solution.maxChunksToSorted([4, 2, 3, 0, 1]) == 1\nassert solution.maxChunksToSorted([3, 2, 1, 4, 0]) == 1\nassert solution.maxChunksToSorted([6, 1, 4, 3, 5, 0, 2]) == 1\nassert solution.maxChunksToSorted([0, 3, 4, 9, 2, 5, 7, 1, 6, 8]) == 2\nassert solution.maxChunksToSorted([0, 8, 1, 6, 5, 3, 4, 7, 2]) == 2\nassert solution.maxChunksToSorted([0, 3, 2, 1, 4]) == 3\nassert solution.maxChunksToSorted([0, 4, 3, 2, 1]) == 2\nassert solution.maxChunksToSorted([1, 2, 0]) == 1\nassert solution.maxChunksToSorted([0, 1, 2]) == 3\nassert solution.maxChunksToSorted([8, 6, 4, 9, 2, 0, 3, 7, 5, 1]) == 1\nassert solution.maxChunksToSorted([1, 0]) == 1\nassert solution.maxChunksToSorted([0, 2, 5, 1, 7, 6, 3, 9, 4, 8]) == 2\nassert solution.maxChunksToSorted([0, 1]) == 2\nassert solution.maxChunksToSorted([4, 5, 2, 1, 3, 0]) == 1\nassert solution.maxChunksToSorted([0]) == 1\nassert solution.maxChunksToSorted([0, 3, 1, 2]) == 2\nassert solution.maxChunksToSorted([4, 5, 6, 7, 0, 3, 2, 1]) == 1\nassert solution.maxChunksToSorted([0, 1, 3, 4, 2]) == 3\nassert solution.maxChunksToSorted([1, 2, 0]) == 1\nassert solution.maxChunksToSorted([1, 3, 0, 6, 8, 2, 7, 4, 5]) == 1\nassert solution.maxChunksToSorted([1, 5, 7, 3, 6, 2, 0, 4]) == 1\nassert solution.maxChunksToSorted([4, 2, 0, 5, 1, 3]) == 1\nassert solution.maxChunksToSorted([0, 3, 2, 4, 1]) == 2\nassert solution.maxChunksToSorted([4, 5, 6, 1, 0, 3, 2]) == 1\nassert solution.maxChunksToSorted([0, 2, 4, 1, 5, 3]) == 2",
  "inefficient_solution": "class Solution:\n    def maxChunksToSorted(self, arr: List[int]) -> int:\n        chunks = []\n        for i in range(len(arr)):\n            new_chunks = []\n            for j in range(i, len(arr)):\n                new_chunks.append(sorted(arr[i:j+1]))\n            chunks.append(new_chunks)\n        max_chunks = 0\n        for chunk in chunks:\n            max_chunk = max(len(ch) for ch in chunk)\n            max_chunks = max(max_chunks, max_chunk)\n        return max_chunks",
  "is_python": true
}