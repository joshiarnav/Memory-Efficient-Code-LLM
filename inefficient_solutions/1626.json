{
  "problem_idx": 1626,
  "task_name": "Best Team With No Conflicts",
  "markdown_description": "\nYou are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the **sum** of scores of all the players in the team.\n\n\nHowever, the basketball team is not allowed to have **conflicts**. A **conflict** exists if a younger player has a **strictly higher** score than an older player. A conflict does **not** occur between players of the same age.\n\n\nGiven two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return *the highest overall score of all possible basketball teams*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** scores = [1,3,5,10,15], ages = [1,2,3,4,5]\n**Output:** 34\n**Explanation:**\u00a0You can choose all the players.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** scores = [4,5,6,5], ages = [2,1,2,1]\n**Output:** 16\n**Explanation:**\u00a0It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** scores = [1,2,3,5], ages = [8,9,10,1]\n**Output:** 6\n**Explanation:**\u00a0It is best to choose the first 3 players. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= scores.length, ages.length <= 1000`\n* `scores.length == ages.length`\n* `1 <= scores[i] <= 106`\n* `1 <= ages[i] <= 1000`\n\n\n",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x, val):\n        while x <= self.n:\n            self.c[x] = max(self.c[x], val)\n            x += x & -x\n\n    def query(self, x):\n        s = 0\n        while x:\n            s = max(s, self.c[x])\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:\n        m = max(ages)\n        tree = BinaryIndexedTree(m)\n        for score, age in sorted(zip(scores, ages)):\n            tree.update(age, score + tree.query(age))\n        return tree.query(m)\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    scores = [random.randint(1, 10^6) for _ in range(random.randint(2, 10))]\n    ages = [random.randint(1, 1000) for _ in range(len(scores))]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.bestTeamScore(scores, ages)\n\n    return scores, ages, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        scores, ages, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.bestTeamScore(scores, ages) == expected_result\n        print(f\"assert solution.bestTeamScore({scores}, {ages}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.bestTeamScore({scores}, {ages}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.bestTeamScore([8, 8, 11, 5, 4, 12, 1, 7], [429, 391, 79, 80, 610, 75, 665, 545]) == 21\nassert solution.bestTeamScore([12, 12, 2, 8, 12], [101, 372, 466, 449, 229]) == 36\nassert solution.bestTeamScore([11, 9, 9, 9, 3], [684, 918, 173, 258, 653]) == 29\nassert solution.bestTeamScore([8, 2, 10, 6, 11, 6, 2], [709, 759, 642, 639, 473, 241, 683]) == 22\nassert solution.bestTeamScore([2, 3], [870, 204]) == 3\nassert solution.bestTeamScore([8, 1, 7, 4], [600, 595, 110, 98]) == 19\nassert solution.bestTeamScore([12, 9, 3, 1], [698, 339, 852, 13]) == 22\nassert solution.bestTeamScore([7, 7, 6, 9, 9, 4, 12, 5, 4], [305, 234, 137, 172, 612, 1000, 739, 17, 782]) == 46\nassert solution.bestTeamScore([10, 5, 4, 7, 4, 7, 2, 3, 9], [885, 457, 469, 51, 591, 56, 904, 751, 180]) == 33\nassert solution.bestTeamScore([8, 6, 11, 2, 10, 9, 6], [31, 507, 989, 915, 223, 792, 427]) == 32\nassert solution.bestTeamScore([12, 3, 7, 3, 2, 8, 9, 5, 11, 11], [567, 2, 423, 994, 384, 461, 136, 190, 805, 393]) == 35\nassert solution.bestTeamScore([3, 1, 5, 8], [686, 678, 733, 977]) == 17\nassert solution.bestTeamScore([7, 11, 8, 12, 2, 1, 1], [414, 664, 257, 468, 124, 132, 111]) == 23\nassert solution.bestTeamScore([12, 11, 5, 11, 2, 12], [3, 579, 973, 659, 67, 870]) == 36\nassert solution.bestTeamScore([8, 9, 3, 5, 12, 5, 12, 12, 7, 3], [648, 970, 376, 981, 951, 911, 346, 450, 471, 786]) == 36\nassert solution.bestTeamScore([6, 8], [923, 676]) == 8\nassert solution.bestTeamScore([7, 1, 10, 4, 9, 3, 10, 11, 11], [84, 887, 163, 414, 667, 953, 72, 188, 880]) == 42\nassert solution.bestTeamScore([2, 11, 8, 8, 6, 9, 3, 6, 1], [945, 315, 329, 612, 761, 916, 802, 967, 429]) == 25\nassert solution.bestTeamScore([12, 11], [35, 363]) == 12\nassert solution.bestTeamScore([12, 12], [852, 845]) == 24\nassert solution.bestTeamScore([8, 11, 4], [110, 759, 951]) == 19\nassert solution.bestTeamScore([8, 1, 6, 4, 10, 9, 8, 6, 12], [434, 684, 260, 950, 470, 504, 588, 289, 544]) == 42\nassert solution.bestTeamScore([6, 12, 12, 4, 4, 9, 3, 6], [485, 657, 235, 70, 79, 224, 373, 470]) == 41\nassert solution.bestTeamScore([9, 5, 1, 5, 12, 10, 5, 6, 10], [228, 815, 836, 157, 667, 486, 127, 901, 248]) == 51\nassert solution.bestTeamScore([12, 1, 4, 10], [415, 473, 376, 356]) == 22\nassert solution.bestTeamScore([8, 10, 9, 8, 7, 2, 12], [59, 271, 588, 4, 305, 962, 191]) == 28\nassert solution.bestTeamScore([12, 11, 3, 9, 11], [58, 421, 49, 227, 948]) == 34\nassert solution.bestTeamScore([10, 10, 12, 2, 12], [53, 327, 707, 134, 927]) == 44\nassert solution.bestTeamScore([3, 12, 11, 7, 5, 8, 3, 4, 4, 10], [561, 585, 917, 245, 752, 254, 559, 862, 143, 358]) == 41\nassert solution.bestTeamScore([5, 12, 2, 5, 3, 9, 1, 3, 1], [436, 678, 778, 982, 728, 960, 752, 113, 738]) == 20\nassert solution.bestTeamScore([10, 9, 5, 12], [361, 124, 298, 369]) == 31\nassert solution.bestTeamScore([7, 9, 3, 11, 7, 10, 4], [688, 380, 131, 337, 439, 612, 67]) == 23\nassert solution.bestTeamScore([11, 12, 11, 1, 8, 3, 2, 8, 10, 2], [779, 870, 307, 554, 973, 833, 766, 615, 773, 359]) == 43\nassert solution.bestTeamScore([12, 11, 10, 12, 10, 7, 7, 4], [856, 995, 89, 573, 305, 970, 684, 644]) == 44\nassert solution.bestTeamScore([10, 4], [506, 224]) == 14\nassert solution.bestTeamScore([3, 6, 12, 2, 8, 4, 1, 2, 7], [341, 211, 472, 429, 502, 473, 768, 48, 537]) == 20\nassert solution.bestTeamScore([11, 12, 8, 1], [364, 349, 423, 989]) == 12\nassert solution.bestTeamScore([3, 1, 6, 12], [472, 467, 463, 22]) == 12\nassert solution.bestTeamScore([8, 2, 9, 10, 10, 1, 7, 8, 4, 10], [306, 782, 135, 199, 971, 240, 55, 538, 358, 238]) == 46\nassert solution.bestTeamScore([2, 1, 2, 12, 10, 11], [761, 690, 691, 662, 634, 42]) == 23\nassert solution.bestTeamScore([2, 10, 3, 10, 9, 9, 12, 9, 6, 7], [921, 895, 974, 193, 318, 938, 827, 260, 455, 817]) == 30\nassert solution.bestTeamScore([8, 8], [160, 405]) == 16\nassert solution.bestTeamScore([8, 8, 5, 4, 11, 8, 2], [679, 615, 121, 881, 822, 922, 138]) == 32\nassert solution.bestTeamScore([4, 12, 11], [872, 811, 449]) == 23\nassert solution.bestTeamScore([6, 10, 2, 2, 5, 1, 9, 2, 7, 8], [118, 327, 68, 425, 387, 493, 591, 866, 404, 992]) == 24\nassert solution.bestTeamScore([2, 9, 6, 5, 10, 10, 4, 4], [649, 500, 497, 870, 900, 951, 631, 745]) == 35\nassert solution.bestTeamScore([10, 5, 5, 5, 1, 1, 11, 7, 6, 4], [46, 111, 80, 316, 198, 658, 69, 339, 334, 324]) == 28\nassert solution.bestTeamScore([7, 11, 1, 3, 7, 5, 7, 11], [704, 208, 156, 92, 294, 212, 273, 355]) == 33\nassert solution.bestTeamScore([10, 6, 11, 12, 12, 3, 2, 6, 10], [143, 433, 540, 424, 789, 89, 15, 886, 502]) == 48\nassert solution.bestTeamScore([11, 2, 9, 12, 7, 10, 6], [684, 837, 461, 496, 671, 11, 313]) == 27\nassert solution.bestTeamScore([12, 3], [634, 957]) == 12\nassert solution.bestTeamScore([12, 6, 4, 3, 8, 8], [754, 481, 47, 876, 139, 980]) == 24\nassert solution.bestTeamScore([1, 5, 4, 2, 11, 3, 2], [868, 971, 704, 548, 188, 172, 754]) == 14\nassert solution.bestTeamScore([7, 5, 2, 1, 7, 9], [471, 680, 44, 653, 130, 887]) == 25\nassert solution.bestTeamScore([7, 11, 5, 3, 7, 1, 1, 7, 1], [722, 575, 169, 438, 970, 590, 860, 535, 302]) == 26\nassert solution.bestTeamScore([6, 8, 4, 5, 11, 12, 2, 5], [161, 537, 624, 569, 459, 736, 837, 998]) == 29\nassert solution.bestTeamScore([6, 12, 6, 5, 12, 7, 2, 12, 2, 4], [648, 438, 688, 874, 245, 444, 984, 927, 387, 523]) == 36\nassert solution.bestTeamScore([1, 6, 8, 6, 1, 5, 8, 7], [84, 926, 824, 599, 223, 659, 40, 708]) == 23\nassert solution.bestTeamScore([6, 3, 6, 2, 8, 9], [852, 817, 291, 837, 833, 404]) == 15\nassert solution.bestTeamScore([9, 9, 1, 4], [975, 663, 589, 824]) == 19\nassert solution.bestTeamScore([7, 8], [780, 685]) == 8\nassert solution.bestTeamScore([11, 3, 11, 10, 9, 11, 11], [426, 348, 948, 866, 65, 763, 336]) == 53\nassert solution.bestTeamScore([11, 12, 3], [200, 256, 31]) == 26\nassert solution.bestTeamScore([5, 9, 10, 5, 10, 4, 10], [428, 192, 482, 959, 174, 195, 779]) == 30\nassert solution.bestTeamScore([8, 7, 12, 4, 3], [505, 297, 560, 694, 564]) == 27\nassert solution.bestTeamScore([10, 5, 2, 8, 11], [815, 525, 748, 427, 409]) == 18\nassert solution.bestTeamScore([12, 10, 8, 10, 8], [959, 989, 402, 490, 255]) == 38\nassert solution.bestTeamScore([12, 6, 4, 11, 2, 7], [406, 700, 134, 398, 63, 379]) == 36\nassert solution.bestTeamScore([4, 10, 5], [45, 365, 652]) == 14\nassert solution.bestTeamScore([4, 2, 11, 4, 7, 10, 10, 5], [1000, 981, 144, 474, 99, 213, 46, 602]) == 21\nassert solution.bestTeamScore([3, 8, 8, 3, 7, 3, 7, 12], [695, 881, 700, 492, 590, 784, 194, 13]) == 30\nassert solution.bestTeamScore([6, 2], [564, 944]) == 6\nassert solution.bestTeamScore([3, 3, 12, 4, 6, 1], [458, 400, 844, 849, 60, 767]) == 18\nassert solution.bestTeamScore([4, 4, 1, 12, 8, 1, 5, 7, 11, 9], [397, 535, 501, 140, 17, 690, 550, 587, 388, 987]) == 29\nassert solution.bestTeamScore([12, 1, 1, 6, 4, 5, 8, 10, 3], [128, 416, 44, 592, 440, 991, 336, 321, 358]) == 14\nassert solution.bestTeamScore([11, 11, 5], [682, 556, 222]) == 27\nassert solution.bestTeamScore([4, 3, 11, 12, 9, 11, 12], [589, 735, 845, 273, 573, 485, 294]) == 24\nassert solution.bestTeamScore([6, 2, 4, 5, 5], [437, 117, 50, 8, 685]) == 11\nassert solution.bestTeamScore([3, 10, 8, 9, 7], [793, 270, 964, 519, 634]) == 15\nassert solution.bestTeamScore([3, 6, 1, 10, 5, 3, 11], [540, 444, 985, 482, 402, 332, 472]) == 25\nassert solution.bestTeamScore([10, 6, 6, 11, 3, 4, 9], [645, 288, 43, 448, 592, 614, 146]) == 26\nassert solution.bestTeamScore([2, 10], [512, 842]) == 12\nassert solution.bestTeamScore([3, 2, 4, 10, 2, 5, 11, 3], [592, 283, 993, 659, 884, 218, 958, 937]) == 26\nassert solution.bestTeamScore([11, 4, 7, 11, 8, 5, 5, 3], [1000, 331, 987, 869, 449, 204, 437, 33]) == 43\nassert solution.bestTeamScore([5, 4, 5, 8], [386, 862, 51, 234]) == 13\nassert solution.bestTeamScore([7, 2, 1, 3, 7, 6, 9, 6, 2], [417, 693, 523, 824, 57, 4, 590, 258, 358]) == 29\nassert solution.bestTeamScore([1, 4, 11, 10, 8, 5, 12], [983, 409, 100, 722, 446, 159, 221]) == 23\nassert solution.bestTeamScore([9, 3, 7, 6, 11, 4, 5, 12], [262, 639, 251, 983, 495, 919, 759, 474]) == 28\nassert solution.bestTeamScore([5, 1, 10, 6, 11, 5], [370, 544, 854, 373, 891, 216]) == 37\nassert solution.bestTeamScore([10, 11, 10, 3, 3, 2, 1], [843, 672, 177, 166, 206, 854, 430]) == 24\nassert solution.bestTeamScore([3, 9, 5, 3], [41, 106, 222, 685]) == 12\nassert solution.bestTeamScore([7, 6, 5, 4], [46, 527, 157, 330]) == 11\nassert solution.bestTeamScore([10, 2, 6, 2, 3, 6], [128, 123, 665, 183, 576, 709]) == 19\nassert solution.bestTeamScore([11, 8, 10, 8, 11, 8], [891, 913, 533, 338, 558, 519]) == 48\nassert solution.bestTeamScore([11, 4, 5, 7, 10], [988, 480, 758, 7, 517]) == 28\nassert solution.bestTeamScore([9, 2, 1, 6, 6, 3, 10, 11], [508, 709, 343, 542, 440, 404, 250, 662]) == 30\nassert solution.bestTeamScore([6, 5, 5, 12, 6], [923, 813, 193, 680, 949]) == 22\nassert solution.bestTeamScore([8, 11, 11, 9, 9, 9, 2, 5, 10], [438, 638, 604, 337, 242, 778, 657, 294, 767]) == 40\nassert solution.bestTeamScore([4, 7, 4, 4, 6, 2, 5, 8, 9], [790, 227, 886, 151, 143, 760, 619, 162, 900]) == 23\nassert solution.bestTeamScore([8, 7, 1, 12, 3, 11, 2, 3, 12, 10], [335, 647, 769, 644, 820, 779, 60, 706, 640, 760]) == 34",
  "inefficient_solution": "class Solution:\n    def bestTeamScore(self, scores, ages):\n        n = len(scores)\n        res = 0\n        for i in range(n):\n            for j in range(i, n):\n                if scores[j] >= scores[i]:\n                    temp_sum = 0\n                    for k in range(i, j+1):\n                        temp_sum += scores[k]\n                    res = max(res, temp_sum)\n        return res",
  "is_python": true
}