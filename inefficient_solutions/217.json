{
  "problem_idx": 217,
  "task_name": "Contains Duplicate",
  "markdown_description": "\nGiven an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** nums = [1,2,3,1]\n**Output:** true\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** nums = [1,2,3,4]\n**Output:** false\n\n```\n**Example 3:**\n\n\n\n```\n**Input:** nums = [1,1,1,3,3,4,3,2,4,2]\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-109 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(set(nums)) < len(nums)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def containsDuplicate(self, nums):\n        return len(set(nums)) < len(nums)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-10**9, 10**9 + 1), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.containsDuplicate(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.containsDuplicate(nums) == expected_result\n        print(f\"assert solution.containsDuplicate({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.containsDuplicate({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.containsDuplicate([-692179113, 177366793, 88971159, 519648519, -209536126, 306953544, -679620623, -636788743, 473072169]) == False\nassert solution.containsDuplicate([-157051517, 983600125, -845491849, 676264070, -255439569, -593836170, 253243606]) == False\nassert solution.containsDuplicate([-766638727, 116913004, 39331951]) == False\nassert solution.containsDuplicate([122155098, 785575224, 767262645, -206266417, 866094924, -78363350, 646017146, 54175378]) == False\nassert solution.containsDuplicate([127195163]) == False\nassert solution.containsDuplicate([-244721065, 580532726, 797895966, -748945686]) == False\nassert solution.containsDuplicate([684020394, -90257626, -563187102, -726506963, 353351829]) == False\nassert solution.containsDuplicate([-823613847, -857415179, -881389306, -191030660, 537066025, 151313982, 89726916, -118012043]) == False\nassert solution.containsDuplicate([378417580, -427632172, -274708844]) == False\nassert solution.containsDuplicate([-941085244, -38478047, -413641054, -808949128, 571508793, -796904697, 532953166, -662846744, 455664892, 467507951]) == False\nassert solution.containsDuplicate([-793156040, 828385413]) == False\nassert solution.containsDuplicate([299414303, 42210220, -325018532, -991394032, 756482829, -351213579, 324148321]) == False\nassert solution.containsDuplicate([873146848, 144501628, -630353727, 330215379, -743267119, 666734180, -19548791, -907375217, -985188460, 609195363]) == False\nassert solution.containsDuplicate([-29520120, 851440073, 821348299]) == False\nassert solution.containsDuplicate([185346227, -62780724]) == False\nassert solution.containsDuplicate([231484624, 217623709, 772900675, 769877004, -114647599, -788011580, 371514250, 170167395, -159362099]) == False\nassert solution.containsDuplicate([934968938, -894272673, -944844422, -992582459, -89131902]) == False\nassert solution.containsDuplicate([-653951772, 72446650, 197417387, 206025062, 824664366, -744997305, 46742053]) == False\nassert solution.containsDuplicate([-765277987, -346845802, -932970317]) == False\nassert solution.containsDuplicate([923197572, 20481227, -873468511, -664553058, -651749646, -44424080, -182516297]) == False\nassert solution.containsDuplicate([250161750, -170961593, -542048165, 298779675, -918403229, 628416319, 25001308]) == False\nassert solution.containsDuplicate([900125732, -293677677]) == False\nassert solution.containsDuplicate([156611690]) == False\nassert solution.containsDuplicate([726762480, -619058931, -516214400, 69274956, -257661728, -147526448]) == False\nassert solution.containsDuplicate([326649692, 104686796, -224573264, -169977764, -716091794, 493191900, 413797761, 572656002, 999062938]) == False\nassert solution.containsDuplicate([-790055618, 424810717]) == False\nassert solution.containsDuplicate([810687231, 659253634, 782813069, 372165215, -771400459]) == False\nassert solution.containsDuplicate([-300762710, 938981802]) == False\nassert solution.containsDuplicate([-224754738, -278983996, 203408085, -601551183, -447116398]) == False\nassert solution.containsDuplicate([108193575, 985453638, 559010641, -625255764]) == False\nassert solution.containsDuplicate([518781330]) == False\nassert solution.containsDuplicate([-13163254, -521092811, -83812572, -66322459, -516001369, 689368628, -216689077, -214334438]) == False\nassert solution.containsDuplicate([978631443, 827156713, -288070500, 741582719, -324424076, 934840866]) == False\nassert solution.containsDuplicate([250844459, 255343378, -13685500, -365671565, 198573101, 455647458]) == False\nassert solution.containsDuplicate([-143743735, 789327264, -636131746, -706758855, -968671763, -469076480, -359494473]) == False\nassert solution.containsDuplicate([376408952, -48837317, -252265170]) == False\nassert solution.containsDuplicate([821477653, 668516504, -170225220]) == False\nassert solution.containsDuplicate([201605904, -580024046]) == False\nassert solution.containsDuplicate([-159684933, 231566519, 162432046, -703250627, -477429555, -981910449, 249046950, 826015507]) == False\nassert solution.containsDuplicate([699892580, -309065773, 783380289, 432438334, -798040526, 103848469, 528973589]) == False\nassert solution.containsDuplicate([921405905, 436369466, -830139902, -69889083, -46367331, -760768321, -968214186, 968975997]) == False\nassert solution.containsDuplicate([129816073, 23744858, 924403989, -262197549, -84723, 790792092]) == False\nassert solution.containsDuplicate([144454053, 375554750, 149236535, -500910372, -548336119, 603997007, -353001309, 229344946, -344457166]) == False\nassert solution.containsDuplicate([-676481567, 602524040, 761088093, 271000479, -193739869, -4781884, 487979018, -191808866, -209566441, -651234157]) == False\nassert solution.containsDuplicate([785809977, 959543247, -376136963, -365251824, 357384111, 792365266, 435189579, 899478663, 40580497, 276770409]) == False\nassert solution.containsDuplicate([-735836062, -407322436, 823432686, 73919910, -180617736, -685339497, -311356637, 942476, 577539267, 28067174]) == False\nassert solution.containsDuplicate([-361476428, 114902443, 739742535, -866003502, -495975679, 413402823, -626801229, -357128320]) == False\nassert solution.containsDuplicate([-712396254, -726907896, -414984505]) == False\nassert solution.containsDuplicate([64809153, -195935546, 172827890, 899618247, -893548071, 547317273, -484829047, 288926381, 901352880]) == False\nassert solution.containsDuplicate([811394812, -502768859, 737827726, 811735506, 971756501, 448176736, -761067040]) == False\nassert solution.containsDuplicate([726125456]) == False\nassert solution.containsDuplicate([-495916928, -617952601, 329831730, 12549974]) == False\nassert solution.containsDuplicate([461968914, 531188374, 676203303, 58946702, -291186675, 957722549]) == False\nassert solution.containsDuplicate([54013749, 912620237, -277885689, -109069931]) == False\nassert solution.containsDuplicate([-422287647, 491230213, 578711745, 528096076, 101880952, 521638445]) == False\nassert solution.containsDuplicate([213507962, -643511536, -646999650, 748072741, -778205113, -330914883, -530487672, -238073737, 339612205, -274114238]) == False\nassert solution.containsDuplicate([-500872138, 122949970, 373812160, -504630541, -937056998, -487908832]) == False\nassert solution.containsDuplicate([-398679952, -454466274, 591965481, 908189959]) == False\nassert solution.containsDuplicate([-98622019, 305457298, 112892987]) == False\nassert solution.containsDuplicate([48171912, -738777172, -852577339, 62744756, 722529054, -135032656, 696381097]) == False\nassert solution.containsDuplicate([-394946359, -825964110, -7201719, -639268591, -238757155, -139663862, 985772242, -919950321, -731624326, -677287938]) == False\nassert solution.containsDuplicate([-407951607, -450112437, -285894621, 571034611, -939440018, 335695486, 237813183]) == False\nassert solution.containsDuplicate([895499626, -413120350]) == False\nassert solution.containsDuplicate([-548425441, 706020924, 2139914, -927422888]) == False\nassert solution.containsDuplicate([204341873, -986475754, -528439541, 3897857, 616146477, 4915930, -527869771]) == False\nassert solution.containsDuplicate([595008238, -994394135, -484626240, -780963373, -194873564, -759451632]) == False\nassert solution.containsDuplicate([73651860, -332925596]) == False\nassert solution.containsDuplicate([643441889, -988135680, 737164956, -5876878]) == False\nassert solution.containsDuplicate([996972736, -397881032, -914180897, 756568858, -300481828, 457768580, -494566310]) == False\nassert solution.containsDuplicate([463579508, -893265388, 836416511, 802378315, -816962463, -209222799, 975203186, -118597608]) == False\nassert solution.containsDuplicate([-625772230, -522945650, -612558795, 469090176]) == False\nassert solution.containsDuplicate([572086634, -419575051, -428709439, 188075655, 990367070, -873271675, -831830174, 257583704, 178853570, -125283370]) == False\nassert solution.containsDuplicate([-45954660, 830722276, -821038171, -416461090, -131485774, -846595778, -364721323, -525477621, 308202455, 924692734]) == False\nassert solution.containsDuplicate([-213804752]) == False\nassert solution.containsDuplicate([-797155326, -650609975, 392802218, -504236173, -436439552, 305518037, 654498691]) == False\nassert solution.containsDuplicate([177183282, 325180033, -425084302, 280580660, 154042651, 390144865, -701467044, -954922625, 226070493]) == False\nassert solution.containsDuplicate([-65513203, 564278707, -479657858, -475963709, -669083469, 386824024]) == False\nassert solution.containsDuplicate([318372868, -316636629, -127424790, 756046397, -554179344, -207436747]) == False\nassert solution.containsDuplicate([-859140179, 30570799, 80068510, 306074496, -894641576]) == False\nassert solution.containsDuplicate([-179390549, 820710210, -731016252, 112695566, -540719772, -370083407]) == False\nassert solution.containsDuplicate([784080038, 833805132, -478297485, -892789510]) == False\nassert solution.containsDuplicate([-606769672, -352641274]) == False\nassert solution.containsDuplicate([842998187, 755274052, 673403796, 245547450, 354102389, -156663889, -591038515, -766235648, -352073397, -563068789]) == False\nassert solution.containsDuplicate([682991795, -660026341, -520130603, -178984260, -700024872, 121696395, -886615170]) == False\nassert solution.containsDuplicate([-100084852]) == False\nassert solution.containsDuplicate([-638521637, 670425014, 961000569, 380022936, 398237135]) == False\nassert solution.containsDuplicate([-583221985, -398650764]) == False\nassert solution.containsDuplicate([53124287, -242037790, 371695071, -767509997]) == False\nassert solution.containsDuplicate([-476332359, -943419399, -755970457, 342631651, -125071118, -840641888, 208858970, 211255274, 764765010, -303371661]) == False\nassert solution.containsDuplicate([211975561, -527252310, 858671100, 535158750]) == False\nassert solution.containsDuplicate([-49106799, 940357065, 483219435, 810964871, 892423597, -402080299]) == False\nassert solution.containsDuplicate([130291102, -64670023, 42010741, 304545372, -743884007, 387320223, 200658506]) == False\nassert solution.containsDuplicate([362480826, 632096928, -193855278, -325264142, -426508542, -711304883, -118889661, -704519849]) == False\nassert solution.containsDuplicate([346480758, 657293340, -169347297]) == False\nassert solution.containsDuplicate([-972305487, -370694371, -433390895, -340959711, -966220333, 347815611]) == False\nassert solution.containsDuplicate([-738717611, 457547469, -188660773, -499988723, 437407923, -697055761, 744727833, 311883459, -179204767, -123537403]) == False\nassert solution.containsDuplicate([-143234771, -48269187, -257753170]) == False\nassert solution.containsDuplicate([906227171]) == False\nassert solution.containsDuplicate([-448338832, 120608316, 494674862]) == False\nassert solution.containsDuplicate([-436294926, -942940721, -528672869, 369571147, 923169010, 583098898, 599417639, 311143251]) == False",
  "inefficient_solution": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        num_dict = {}\n        for num in nums:\n            num_dict[num] = None\n        for num in nums:\n            num_dict[num] = None\n        return len(num_dict) != len(nums)",
  "is_python": true
}