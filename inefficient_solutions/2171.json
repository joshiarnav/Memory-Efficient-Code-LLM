{
  "problem_idx": 2171,
  "task_name": "Removing Minimum Number of Magic Beans",
  "markdown_description": "\nYou are given an array of **positive** integers `beans`, where each integer represents the number of magic beans found in a particular magic bag.\n\n\n**Remove** any number of beans (**possibly none**) from each bag such that the number of beans in each remaining **non-empty** bag (still containing **at least one** bean) is **equal**. Once a bean has been removed from a bag, you are **not** allowed to return it to any of the bags.\n\n\nReturn *the **minimum** number of magic beans that you have to remove*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** beans = [4,1,6,5]\n**Output:** 4\n**Explanation:** \n- We remove 1 bean from the bag with only 1 bean.\n  This results in the remaining bags: [4,**0**,6,5]\n- Then we remove 2 beans from the bag with 6 beans.\n  This results in the remaining bags: [4,0,**4**,5]\n- Then we remove 1 bean from the bag with 5 beans.\n  This results in the remaining bags: [4,0,4,**4**]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** beans = [2,10,3,2]\n**Output:** 7\n**Explanation:**\n- We remove 2 beans from one of the bags with 2 beans.\n  This results in the remaining bags: [**0**,10,3,2]\n- Then we remove 2 beans from the other bag with 2 beans.\n  This results in the remaining bags: [0,10,3,**0**]\n- Then we remove 3 beans from the bag with 3 beans. \n  This results in the remaining bags: [0,10,**0**,0]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= beans.length <= 105`\n* `1 <= beans[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumRemoval(self, beans: List[int]) -> int:\n        beans.sort()\n        ans = s = sum(beans)\n        n = len(beans)\n        for i, v in enumerate(beans):\n            ans = min(ans, s - v * (n - i))\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumRemoval(self, beans):\n        beans.sort()\n        ans = s = sum(beans)\n        n = len(beans)\n        for i, v in enumerate(beans):\n            ans = min(ans, s - v * (n - i))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    beans = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumRemoval(beans)\n\n    return beans, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        beans, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumRemoval(beans) == expected_result\n        print(f\"assert solution.minimumRemoval({beans}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumRemoval({beans}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumRemoval([20, 58, 90, 95]) == 83\nassert solution.minimumRemoval([28, 53]) == 25\nassert solution.minimumRemoval([1, 17]) == 1\nassert solution.minimumRemoval([19, 21, 26, 32, 34, 47, 60, 72, 97]) == 216\nassert solution.minimumRemoval([2, 5, 32, 51, 73, 76]) == 86\nassert solution.minimumRemoval([24, 37, 48, 95]) == 93\nassert solution.minimumRemoval([13, 21, 74, 84]) == 44\nassert solution.minimumRemoval([10, 24, 34, 44, 62, 68, 73, 83, 96]) == 184\nassert solution.minimumRemoval([18, 26, 46, 54, 56, 58, 66, 92, 94, 96]) == 228\nassert solution.minimumRemoval([15, 25, 45, 67, 78, 90, 91]) == 143\nassert solution.minimumRemoval([3, 5, 38, 41, 44, 47, 48, 62, 69]) == 91\nassert solution.minimumRemoval([1, 31, 39, 45, 47, 64, 74, 93, 95, 99]) == 268\nassert solution.minimumRemoval([8, 14, 19, 65, 76, 82]) == 69\nassert solution.minimumRemoval([34, 39, 48, 62, 82, 83]) == 144\nassert solution.minimumRemoval([12, 21, 22, 41, 46, 55, 56, 59, 64, 78]) == 167\nassert solution.minimumRemoval([36, 93, 96]) == 39\nassert solution.minimumRemoval([2, 9, 21, 76, 85]) == 41\nassert solution.minimumRemoval([5, 7, 9, 44, 79, 84, 100]) == 91\nassert solution.minimumRemoval([8, 12, 18, 19, 33, 72, 90, 91]) == 127\nassert solution.minimumRemoval([1, 49, 59, 67, 82, 84, 97]) == 144\nassert solution.minimumRemoval([20, 58, 59, 94, 95]) == 94\nassert solution.minimumRemoval([4, 35, 45, 63, 84]) == 91\nassert solution.minimumRemoval([22, 53, 66]) == 35\nassert solution.minimumRemoval([5, 7, 18, 33, 42, 63, 70, 74]) == 123\nassert solution.minimumRemoval([6, 30, 56, 57, 58, 75, 78, 87]) == 111\nassert solution.minimumRemoval([14, 36, 53, 74, 75, 76, 86, 90]) == 134\nassert solution.minimumRemoval([31, 32, 41]) == 11\nassert solution.minimumRemoval([27, 68, 89]) == 48\nassert solution.minimumRemoval([48, 82]) == 34\nassert solution.minimumRemoval([10, 31, 41, 75, 91, 98]) == 121\nassert solution.minimumRemoval([1, 18, 25, 42, 47, 95, 97, 100]) == 140\nassert solution.minimumRemoval([4, 29, 41, 54, 70, 71]) == 105\nassert solution.minimumRemoval([3, 13, 91]) == 16\nassert solution.minimumRemoval([39, 54, 63, 87]) == 81\nassert solution.minimumRemoval([3, 14, 38, 43, 54, 59, 78, 82]) == 143\nassert solution.minimumRemoval([5, 31, 55, 57, 60, 61, 81]) == 75\nassert solution.minimumRemoval([11, 18, 41, 50, 83]) == 80\nassert solution.minimumRemoval([3, 22, 23, 26, 57, 58, 63, 81, 82]) == 130\nassert solution.minimumRemoval([16, 21, 47, 58]) == 48\nassert solution.minimumRemoval([24, 45, 46, 65, 93]) == 93\nassert solution.minimumRemoval([2, 9, 25, 35, 66, 71, 74, 76]) == 94\nassert solution.minimumRemoval([87, 94, 99]) == 19\nassert solution.minimumRemoval([20, 38, 55, 92]) == 91\nassert solution.minimumRemoval([14, 18, 54, 73, 77, 87]) == 104\nassert solution.minimumRemoval([2, 25, 32, 55, 60, 61, 68, 72]) == 100\nassert solution.minimumRemoval([3, 17, 31, 53, 57, 62, 76, 85]) == 119\nassert solution.minimumRemoval([3, 13, 17, 50, 55, 57, 85, 90]) == 120\nassert solution.minimumRemoval([23, 81]) == 23\nassert solution.minimumRemoval([28, 38, 43, 55]) == 50\nassert solution.minimumRemoval([37, 70, 94]) == 61\nassert solution.minimumRemoval([1, 11, 14, 32, 39, 55, 62, 69]) == 118\nassert solution.minimumRemoval([24, 42, 56, 60, 66]) == 80\nassert solution.minimumRemoval([5, 6, 23, 38, 48, 49, 77, 95]) == 149\nassert solution.minimumRemoval([3, 25, 26, 28, 55, 61, 75, 86, 99]) == 183\nassert solution.minimumRemoval([20, 62, 77]) == 35\nassert solution.minimumRemoval([27, 43, 45]) == 29\nassert solution.minimumRemoval([17, 23, 37, 41, 42, 75, 81, 93]) == 184\nassert solution.minimumRemoval([6, 35, 45, 51, 55, 79, 95]) == 141\nassert solution.minimumRemoval([15, 38, 50, 53, 68]) == 72\nassert solution.minimumRemoval([15, 19, 25, 28, 32, 53, 61, 62, 79, 80]) == 189\nassert solution.minimumRemoval([13, 20, 33, 36, 55, 89]) == 114\nassert solution.minimumRemoval([8, 35, 100]) == 43\nassert solution.minimumRemoval([1, 19, 46, 66, 84]) == 78\nassert solution.minimumRemoval([3, 32, 43, 56, 57, 59, 63, 90]) == 123\nassert solution.minimumRemoval([6, 14, 30, 39, 55]) == 54\nassert solution.minimumRemoval([11, 21, 25, 26, 41, 60, 69]) == 127\nassert solution.minimumRemoval([27, 78]) == 27\nassert solution.minimumRemoval([27, 96]) == 27\nassert solution.minimumRemoval([63, 92, 93]) == 59\nassert solution.minimumRemoval([15, 19, 20, 24, 50]) == 52\nassert solution.minimumRemoval([17, 21, 48, 51, 58, 77, 79, 88]) == 151\nassert solution.minimumRemoval([3, 27, 37, 49, 81, 86]) == 121\nassert solution.minimumRemoval([17, 25, 32, 33, 66, 69, 70]) == 114\nassert solution.minimumRemoval([29, 49, 55, 62, 74, 79]) == 103\nassert solution.minimumRemoval([8, 10, 15, 29, 50]) == 54\nassert solution.minimumRemoval([4, 13, 17, 25, 34, 37, 66, 76, 85, 92]) == 185\nassert solution.minimumRemoval([6, 44]) == 6\nassert solution.minimumRemoval([17, 86, 93]) == 24\nassert solution.minimumRemoval([14, 55, 62, 68]) == 34\nassert solution.minimumRemoval([4, 32, 35, 41, 43, 73, 93, 100]) == 197\nassert solution.minimumRemoval([3, 4, 46, 57]) == 18\nassert solution.minimumRemoval([19, 47, 50, 53, 62, 82, 85, 94]) == 163\nassert solution.minimumRemoval([14, 26, 32]) == 20\nassert solution.minimumRemoval([66, 80, 92]) == 40\nassert solution.minimumRemoval([34, 42, 50, 53, 85, 87, 97, 100]) == 208\nassert solution.minimumRemoval([16, 22, 23, 32, 62, 68, 77]) == 114\nassert solution.minimumRemoval([3, 27, 35, 64]) == 48\nassert solution.minimumRemoval([39, 83]) == 39\nassert solution.minimumRemoval([25, 86, 90, 95, 98]) == 50\nassert solution.minimumRemoval([9, 24, 35, 81, 99]) == 86\nassert solution.minimumRemoval([18, 20, 24, 29, 51, 52, 66, 76, 82]) == 163\nassert solution.minimumRemoval([12, 23, 60, 66, 88]) == 69\nassert solution.minimumRemoval([30, 67]) == 30\nassert solution.minimumRemoval([3, 13, 19, 47]) == 35\nassert solution.minimumRemoval([7, 20, 23, 30, 50, 72, 73, 83]) == 142\nassert solution.minimumRemoval([20, 26, 30, 41, 61, 67, 84, 86, 88, 100]) == 237\nassert solution.minimumRemoval([44, 95]) == 44\nassert solution.minimumRemoval([5, 12, 21, 41, 54, 76, 86]) == 131\nassert solution.minimumRemoval([7, 12, 13, 20, 31, 35, 37, 53, 67, 91]) == 180\nassert solution.minimumRemoval([11, 28, 62, 98]) == 75",
  "inefficient_solution": "class Solution:\n    def minimumRemoval(self, beans):\n        beans_copy = beans.copy()\n        beans_desc = sorted(beans_copy, reverse=True)\n        n = len(beans_copy)\n        ans = float('inf')\n        for i in range(n):\n            beans_copy[i] = 0\n            for j in range(i, n):\n                beans_copy[j] = beans_desc[j - i]\n            s = sum(beans_copy)\n            ans = min(ans, s)\n        return ans",
  "is_python": true
}