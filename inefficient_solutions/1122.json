{
  "problem_idx": 1122,
  "task_name": "Relative Sort Array",
  "markdown_description": "\nGiven two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`.\n\n\nSort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`. Elements that do not appear in `arr2` should be placed at the end of `arr1` in **ascending** order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\n**Output:** [2,2,2,1,4,3,3,9,6,7,19]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]\n**Output:** [22,28,8,6,17,44]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr1.length, arr2.length <= 1000`\n* `0 <= arr1[i], arr2[i] <= 1000`\n* All the elements of `arr2` are **distinct**.\n* Each\u00a0`arr2[i]` is in `arr1`.\n\n\n",
  "canonical_solution": "class Solution:\n    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:\n        pos = {x: i for i, x in enumerate(arr2)}\n        return sorted(arr1, key=lambda x: pos.get(x, 1000 + x))\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:\n        pos = {x: i for i, x in enumerate(arr2)}\n        return sorted(arr1, key=lambda x: pos.get(x, 1000 + x))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list for arr1\n    arr1 = random.sample(range(1, 1001), random.randint(1, 10))\n    \n    # Generate random numbers list for arr2\n    arr2 = random.sample(arr1, random.randint(1, len(arr1)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.relativeSortArray(arr1, arr2)\n\n    return arr1, arr2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr1, arr2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.relativeSortArray(arr1, arr2) == expected_result\n        print(f\"assert solution.relativeSortArray({arr1}, {arr2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.relativeSortArray({arr1}, {arr2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.relativeSortArray([8, 246], [246, 8]) == [246, 8]\nassert solution.relativeSortArray([363, 735, 233, 789], [735, 363, 233, 789]) == [735, 363, 233, 789]\nassert solution.relativeSortArray([791, 42, 690, 233, 670, 463, 305, 825], [463]) == [463, 42, 233, 305, 670, 690, 791, 825]\nassert solution.relativeSortArray([170, 735, 699, 925, 394], [925, 394, 699, 170, 735]) == [925, 394, 699, 170, 735]\nassert solution.relativeSortArray([99, 679, 79, 275, 465, 497], [275, 465, 679, 99, 79, 497]) == [275, 465, 679, 99, 79, 497]\nassert solution.relativeSortArray([355], [355]) == [355]\nassert solution.relativeSortArray([71, 887, 361, 933, 307, 940, 95], [307, 95, 71, 933]) == [307, 95, 71, 933, 361, 887, 940]\nassert solution.relativeSortArray([943, 548], [548, 943]) == [548, 943]\nassert solution.relativeSortArray([437, 567, 830], [437]) == [437, 567, 830]\nassert solution.relativeSortArray([976], [976]) == [976]\nassert solution.relativeSortArray([163, 829, 355, 455], [455]) == [455, 163, 355, 829]\nassert solution.relativeSortArray([205, 71, 401, 930, 60, 550, 784, 963], [550]) == [550, 60, 71, 205, 401, 784, 930, 963]\nassert solution.relativeSortArray([956, 215], [215, 956]) == [215, 956]\nassert solution.relativeSortArray([898, 837, 648, 866, 795, 447], [866, 837, 447]) == [866, 837, 447, 648, 795, 898]\nassert solution.relativeSortArray([599], [599]) == [599]\nassert solution.relativeSortArray([450, 945, 89, 432, 819, 579, 383, 258], [383]) == [383, 89, 258, 432, 450, 579, 819, 945]\nassert solution.relativeSortArray([916, 398, 776, 381, 155], [916, 398, 381, 776, 155]) == [916, 398, 381, 776, 155]\nassert solution.relativeSortArray([722, 805, 464, 141, 965, 223, 257, 146], [257, 464, 965, 223, 141, 805, 722, 146]) == [257, 464, 965, 223, 141, 805, 722, 146]\nassert solution.relativeSortArray([628, 653, 386, 733], [653, 733]) == [653, 733, 386, 628]\nassert solution.relativeSortArray([492, 245, 124], [492]) == [492, 124, 245]\nassert solution.relativeSortArray([887], [887]) == [887]\nassert solution.relativeSortArray([925, 507, 674, 85, 263], [507, 674]) == [507, 674, 85, 263, 925]\nassert solution.relativeSortArray([737, 881, 129, 362, 558, 82, 576], [129, 576, 881, 737, 82]) == [129, 576, 881, 737, 82, 362, 558]\nassert solution.relativeSortArray([26, 637, 235], [26, 235, 637]) == [26, 235, 637]\nassert solution.relativeSortArray([876, 554, 612, 983, 731, 130, 122, 88], [983, 612, 130]) == [983, 612, 130, 88, 122, 554, 731, 876]\nassert solution.relativeSortArray([983, 236, 530, 477, 999, 494, 810, 335], [494, 999, 236, 530]) == [494, 999, 236, 530, 335, 477, 810, 983]\nassert solution.relativeSortArray([483, 312, 641, 291, 892, 430, 735], [735, 483, 641]) == [735, 483, 641, 291, 312, 430, 892]\nassert solution.relativeSortArray([236, 718, 748, 487, 929], [929, 718]) == [929, 718, 236, 487, 748]\nassert solution.relativeSortArray([747, 399, 484, 332, 909, 5, 11], [484, 5]) == [484, 5, 11, 332, 399, 747, 909]\nassert solution.relativeSortArray([486, 692, 429, 604, 216, 598, 778, 920, 650, 712], [598, 216, 920, 650, 429, 604, 778, 692]) == [598, 216, 920, 650, 429, 604, 778, 692, 486, 712]\nassert solution.relativeSortArray([407], [407]) == [407]\nassert solution.relativeSortArray([191], [191]) == [191]\nassert solution.relativeSortArray([765, 9], [765]) == [765, 9]\nassert solution.relativeSortArray([49, 452, 362, 48, 716, 410, 366], [452, 410, 48]) == [452, 410, 48, 49, 362, 366, 716]\nassert solution.relativeSortArray([255, 288, 36, 861, 772, 816, 662, 669, 813, 45], [255, 813, 45, 861, 772, 288, 662, 36, 816, 669]) == [255, 813, 45, 861, 772, 288, 662, 36, 816, 669]\nassert solution.relativeSortArray([19, 190, 313, 277, 26, 388, 716, 129], [129, 19, 716, 190, 277, 26, 388, 313]) == [129, 19, 716, 190, 277, 26, 388, 313]\nassert solution.relativeSortArray([177, 466, 702, 427, 658, 128, 837, 714, 573], [573, 466, 177, 128, 702, 427]) == [573, 466, 177, 128, 702, 427, 658, 714, 837]\nassert solution.relativeSortArray([12], [12]) == [12]\nassert solution.relativeSortArray([603, 530, 336, 297], [530, 297, 603]) == [530, 297, 603, 336]\nassert solution.relativeSortArray([946, 49, 354, 367, 999], [49]) == [49, 354, 367, 946, 999]\nassert solution.relativeSortArray([652, 136, 154, 852, 608, 570, 756], [570, 652, 136]) == [570, 652, 136, 154, 608, 756, 852]\nassert solution.relativeSortArray([599, 729, 60, 31, 916, 549, 662, 707, 306], [306, 662, 729, 707, 31, 60]) == [306, 662, 729, 707, 31, 60, 549, 599, 916]\nassert solution.relativeSortArray([788], [788]) == [788]\nassert solution.relativeSortArray([499, 123, 629, 125, 794, 755, 717, 406], [755, 717, 499]) == [755, 717, 499, 123, 125, 406, 629, 794]\nassert solution.relativeSortArray([83, 687], [687]) == [687, 83]\nassert solution.relativeSortArray([286], [286]) == [286]\nassert solution.relativeSortArray([953, 443, 421, 936, 958, 593, 153, 637, 203], [593, 637, 203]) == [593, 637, 203, 153, 421, 443, 936, 953, 958]\nassert solution.relativeSortArray([939, 178, 528, 473, 549], [939, 178]) == [939, 178, 473, 528, 549]\nassert solution.relativeSortArray([653, 286, 202], [653, 286]) == [653, 286, 202]\nassert solution.relativeSortArray([795], [795]) == [795]\nassert solution.relativeSortArray([201, 557, 683, 728, 778, 485], [485, 728, 778]) == [485, 728, 778, 201, 557, 683]\nassert solution.relativeSortArray([254, 24, 809, 704, 319, 949, 484], [704, 319, 484]) == [704, 319, 484, 24, 254, 809, 949]\nassert solution.relativeSortArray([445, 205], [445, 205]) == [445, 205]\nassert solution.relativeSortArray([976, 487, 333, 361, 201, 799, 947], [487, 201, 799, 361]) == [487, 201, 799, 361, 333, 947, 976]\nassert solution.relativeSortArray([162, 838, 808, 647, 389, 855], [808, 647]) == [808, 647, 162, 389, 838, 855]\nassert solution.relativeSortArray([837, 86, 607, 602, 295], [602, 86, 837, 295, 607]) == [602, 86, 837, 295, 607]\nassert solution.relativeSortArray([427, 384], [427]) == [427, 384]\nassert solution.relativeSortArray([834], [834]) == [834]\nassert solution.relativeSortArray([880, 254, 498, 654, 941, 911, 96], [96, 254, 498, 911, 880, 941, 654]) == [96, 254, 498, 911, 880, 941, 654]\nassert solution.relativeSortArray([947, 653, 759, 246, 565, 842, 863], [842, 653, 759, 947, 246, 863, 565]) == [842, 653, 759, 947, 246, 863, 565]\nassert solution.relativeSortArray([360, 464, 134], [360, 134]) == [360, 134, 464]\nassert solution.relativeSortArray([950, 914, 142, 528], [142, 914, 950]) == [142, 914, 950, 528]\nassert solution.relativeSortArray([261, 754, 195, 984, 39, 47, 102, 63], [984, 39, 47, 754, 102, 261]) == [984, 39, 47, 754, 102, 261, 63, 195]\nassert solution.relativeSortArray([730, 179, 816, 11, 139, 853, 702], [179, 139, 853, 11, 702]) == [179, 139, 853, 11, 702, 730, 816]\nassert solution.relativeSortArray([860, 129, 982], [860]) == [860, 129, 982]\nassert solution.relativeSortArray([915, 130, 515, 268, 121, 791, 14, 625, 506, 457], [268, 130]) == [268, 130, 14, 121, 457, 506, 515, 625, 791, 915]\nassert solution.relativeSortArray([579, 410, 290, 834, 275, 136], [579]) == [579, 136, 275, 290, 410, 834]\nassert solution.relativeSortArray([527, 601, 800, 925, 48, 962, 455, 247, 410], [601, 800, 925, 455]) == [601, 800, 925, 455, 48, 247, 410, 527, 962]\nassert solution.relativeSortArray([556, 4, 206, 112, 633, 776, 648, 134, 204, 796], [112, 776, 556, 4, 633, 648]) == [112, 776, 556, 4, 633, 648, 134, 204, 206, 796]\nassert solution.relativeSortArray([185, 314, 62, 473, 625, 781], [625, 473, 185, 314, 62]) == [625, 473, 185, 314, 62, 781]\nassert solution.relativeSortArray([52], [52]) == [52]\nassert solution.relativeSortArray([961, 816, 447, 488, 603, 987, 754, 630, 381, 289], [754, 987, 630, 289]) == [754, 987, 630, 289, 381, 447, 488, 603, 816, 961]\nassert solution.relativeSortArray([31, 636, 327, 79, 614], [636, 327, 31, 614, 79]) == [636, 327, 31, 614, 79]\nassert solution.relativeSortArray([269, 943, 640, 246, 738, 805, 198, 834, 826], [198, 943, 826, 640]) == [198, 943, 826, 640, 246, 269, 738, 805, 834]\nassert solution.relativeSortArray([146, 656, 645, 452], [645, 656]) == [645, 656, 146, 452]\nassert solution.relativeSortArray([486], [486]) == [486]\nassert solution.relativeSortArray([447, 505, 570, 106, 765, 278], [278, 505, 765, 447, 106]) == [278, 505, 765, 447, 106, 570]\nassert solution.relativeSortArray([726], [726]) == [726]\nassert solution.relativeSortArray([911, 870, 970, 802, 400, 851, 562, 684], [802, 400]) == [802, 400, 562, 684, 851, 870, 911, 970]\nassert solution.relativeSortArray([498, 598, 65, 442, 359, 663, 176, 720, 945, 641], [663, 945, 176, 65, 359, 442, 720, 598, 641]) == [663, 945, 176, 65, 359, 442, 720, 598, 641, 498]\nassert solution.relativeSortArray([440, 374, 925, 684], [374, 440, 925]) == [374, 440, 925, 684]\nassert solution.relativeSortArray([767, 253, 274, 570, 411, 765, 26], [253]) == [253, 26, 274, 411, 570, 765, 767]\nassert solution.relativeSortArray([550, 513, 745, 984, 982, 208, 683, 75], [745, 208, 550]) == [745, 208, 550, 75, 513, 683, 982, 984]\nassert solution.relativeSortArray([776, 828, 967, 596], [967, 828, 596, 776]) == [967, 828, 596, 776]\nassert solution.relativeSortArray([691, 143, 195, 223, 818, 584], [195, 223]) == [195, 223, 143, 584, 691, 818]\nassert solution.relativeSortArray([127, 577, 858], [577]) == [577, 127, 858]\nassert solution.relativeSortArray([676], [676]) == [676]\nassert solution.relativeSortArray([85, 787, 589, 99, 811, 863, 430, 821], [85, 821]) == [85, 821, 99, 430, 589, 787, 811, 863]\nassert solution.relativeSortArray([896, 681, 404, 751], [681, 404, 751, 896]) == [681, 404, 751, 896]\nassert solution.relativeSortArray([949, 445, 126, 792, 511, 762, 535, 124, 502, 595], [445, 124, 535, 792, 949]) == [445, 124, 535, 792, 949, 126, 502, 511, 595, 762]\nassert solution.relativeSortArray([670, 523, 18, 27, 169, 962, 544], [27, 670]) == [27, 670, 18, 169, 523, 544, 962]\nassert solution.relativeSortArray([358, 679], [679, 358]) == [679, 358]\nassert solution.relativeSortArray([928, 341, 631, 790, 596, 357], [357, 790]) == [357, 790, 341, 596, 631, 928]\nassert solution.relativeSortArray([342, 848, 419, 900, 162, 758, 119, 530, 269, 914], [269, 900, 758]) == [269, 900, 758, 119, 162, 342, 419, 530, 848, 914]\nassert solution.relativeSortArray([542, 355, 718, 273, 923, 317, 303, 216, 58], [355, 317, 303, 58]) == [355, 317, 303, 58, 216, 273, 542, 718, 923]\nassert solution.relativeSortArray([546, 264, 180, 423, 167, 571, 544, 249], [423]) == [423, 167, 180, 249, 264, 544, 546, 571]\nassert solution.relativeSortArray([876, 344, 598], [598, 344, 876]) == [598, 344, 876]\nassert solution.relativeSortArray([829], [829]) == [829]\nassert solution.relativeSortArray([511, 663], [511, 663]) == [511, 663]\nassert solution.relativeSortArray([506, 40], [506, 40]) == [506, 40]",
  "inefficient_solution": "class Solution:\n    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:\n        arr2_set = set(arr2)\n        arr1_map = {}\n        arr1_not_in_arr2 = []\n        \n        for num in arr1:\n            if num in arr2_set:\n                if num not in arr1_map:\n                    arr1_map[num] = 0\n                arr1_map[num] += 1\n            else:\n                if num not in arr1_not_in_arr2:\n                    arr1_not_in_arr2.append(num)\n        \n        result = []\n        for num in arr2:\n            for i in range(arr1_map[num]):\n                result.append(num)\n        \n        for num in arr1_not_in_arr2:\n            result.append(num)\n        \n        for num in arr1:\n            if num not in arr2_set:\n                for i in range(len(result)):\n                    if result[i] > num:\n                        result.insert(i, num)\n                        break\n                else:\n                    result.append(num)\n        \n        return result",
  "is_python": true
}