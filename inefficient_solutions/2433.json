{
  "problem_idx": 2433,
  "task_name": "Find The Original Array of Prefix Xor",
  "markdown_description": "\nYou are given an **integer** array `pref` of size `n`. Find and return *the array* `arr` *of size* `n` *that satisfies*:\n\n\n* `pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]`.\n\n\nNote that `^` denotes the **bitwise-xor** operation.\n\n\nIt can be proven that the answer is **unique**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** pref = [5,2,0,3,1]\n**Output:** [5,7,2,3,2]\n**Explanation:** From the array [5,7,2,3,2] we have the following:\n- pref[0] = 5.\n- pref[1] = 5 ^ 7 = 2.\n- pref[2] = 5 ^ 7 ^ 2 = 0.\n- pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3.\n- pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** pref = [13]\n**Output:** [13]\n**Explanation:** We have pref[0] = arr[0] = 13.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= pref.length <= 105`\n* `0 <= pref[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def findArray(self, pref: List[int]) -> List[int]:\n        return [a ^ b for a, b in pairwise([0] + pref)]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findArray(self, pref):\n        return [a ^ b for a, b in pairwise([0] + pref)]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random input list\n    pref = random.sample(range(0, 1000001), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findArray(pref)\n\n    return pref, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        pref, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findArray(pref) == expected_result\n        print(f\"assert solution.findArray({pref}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findArray({pref}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findArray([363993, 14043, 209916, 83501]) == [363993, 375554, 197927, 161233]\nassert solution.findArray([868265]) == [868265]\nassert solution.findArray([48493, 229714, 248818, 706921, 192878, 50410, 505986, 376523]) == [48493, 212031, 19104, 590491, 538631, 144772, 490600, 132681]\nassert solution.findArray([999033, 657291, 969235, 428069, 767733, 135386, 965089, 401839]) == [999033, 342514, 314776, 541238, 868048, 632367, 829755, 563278]\nassert solution.findArray([339562, 895047]) == [339562, 558637]\nassert solution.findArray([553819, 722847, 495244, 456051]) == [553819, 226500, 821523, 97279]\nassert solution.findArray([932588, 205026, 561803, 150764, 670211, 789949]) == [932588, 858638, 766569, 712295, 554735, 407486]\nassert solution.findArray([694512]) == [694512]\nassert solution.findArray([237646, 684364, 162995]) == [237646, 643330, 527871]\nassert solution.findArray([193893, 962199, 865484, 587351, 283277, 991831, 672242, 26020, 125550]) == [193893, 809970, 236123, 377499, 828634, 749786, 353189, 664662, 102346]\nassert solution.findArray([659608, 589213, 971012, 620058, 541801, 748023, 250401, 775696, 966173]) == [659608, 191749, 404633, 501534, 78451, 208286, 572374, 525361, 354317]\nassert solution.findArray([997770, 79898, 295773, 155184, 534990, 248045, 272856]) == [997770, 917904, 375623, 449901, 686078, 778531, 516405]\nassert solution.findArray([621132, 874467, 744813, 370546, 988976, 773822]) == [621132, 273839, 395918, 981535, 700482, 317838]\nassert solution.findArray([836421, 187568]) == [836421, 925685]\nassert solution.findArray([188654, 409161, 173882, 563365, 945707, 645770, 52404, 277393, 282676]) == [188654, 319143, 301427, 671647, 456334, 504993, 595518, 325413, 27557]\nassert solution.findArray([599139, 444086, 623918]) == [599139, 1041109, 1000344]\nassert solution.findArray([446509, 446874, 836941, 127279]) == [446509, 439, 660695, 865378]\nassert solution.findArray([239897, 738601, 368278]) == [239897, 584752, 973759]\nassert solution.findArray([983337, 505398, 780540]) == [983337, 571167, 810698]\nassert solution.findArray([319367, 518920, 676664, 41816, 548391, 203149, 383508, 405368, 160823, 801426]) == [319367, 210063, 899120, 716896, 589183, 739242, 443289, 259436, 285519, 937637]\nassert solution.findArray([320807, 185239, 740397, 560287, 272770, 358057, 437119, 650971]) == [320807, 407216, 630714, 245938, 828701, 89899, 253398, 1000868]\nassert solution.findArray([936588]) == [936588]\nassert solution.findArray([971693]) == [971693]\nassert solution.findArray([435549, 826067, 199348, 507665, 173945, 46592, 781008, 971993, 691424]) == [435549, 671630, 1020007, 308645, 333928, 135545, 744656, 343561, 284729]\nassert solution.findArray([166892, 468084]) == [166892, 372632]\nassert solution.findArray([44636, 150998, 50655, 430067, 524240, 327414, 117377, 445967, 309517]) == [44636, 189322, 165897, 412204, 94243, 196902, 341111, 459918, 161538]\nassert solution.findArray([862221, 260530, 689714, 445268, 212645, 566175, 521976, 283428, 267076, 97770]) == [862221, 971199, 622464, 806246, 390641, 761146, 1004903, 239068, 16480, 356014]\nassert solution.findArray([102991, 960673, 317851, 291634, 652078, 996444]) == [102991, 998126, 684346, 43689, 884764, 444274]\nassert solution.findArray([932185, 147389, 421860, 141139, 705092, 68728, 928725, 76672, 134627]) == [932185, 788196, 282713, 280759, 582935, 773692, 993197, 983125, 206435]\nassert solution.findArray([905041, 557750, 123162, 296538, 253621, 549539, 270774]) == [905041, 347623, 615340, 354112, 481519, 769046, 803605]\nassert solution.findArray([675633, 949236, 420765]) == [675633, 275653, 528489]\nassert solution.findArray([74835, 806976, 858182, 578376, 422357, 451901, 822688, 557772, 612467, 277430]) == [74835, 881683, 83974, 379662, 959133, 38120, 682141, 266092, 121535, 877509]\nassert solution.findArray([617636, 895690, 443301, 767221]) == [617636, 312942, 747887, 882512]\nassert solution.findArray([9799]) == [9799]\nassert solution.findArray([218399, 200182, 502904, 436875, 709875, 656991, 586302, 667000, 994007]) == [218399, 22761, 303502, 67315, 818808, 53932, 193633, 188230, 329647]\nassert solution.findArray([371668, 13965]) == [371668, 367961]\nassert solution.findArray([90705, 657868, 19077]) == [90705, 748445, 672585]\nassert solution.findArray([28368, 853375, 579200, 994852, 345571, 867942]) == [28368, 879535, 381951, 522404, 682951, 555909]\nassert solution.findArray([209537, 663030, 268562, 34546, 592448, 533157, 357923, 877857, 360653, 160522]) == [209537, 601975, 918756, 303072, 625842, 76005, 873606, 529154, 583148, 521159]\nassert solution.findArray([185891, 365076]) == [185891, 476215]\nassert solution.findArray([328659]) == [328659]\nassert solution.findArray([501133]) == [501133]\nassert solution.findArray([605348, 995029, 413049, 708765, 203131, 151539]) == [605348, 397937, 615340, 826852, 641510, 87688]\nassert solution.findArray([634481, 913147, 980079]) == [634481, 278666, 203412]\nassert solution.findArray([518764, 721845, 435830, 662836, 263358, 825827, 156850, 811619]) == [518764, 846297, 894403, 834370, 924042, 564573, 982353, 919249]\nassert solution.findArray([617136, 687186, 418396, 47772, 865278, 420366, 921774]) == [617136, 202466, 794126, 448704, 887138, 743920, 555680]\nassert solution.findArray([524207, 13044, 227834, 367446, 279839, 655778, 93124]) == [524207, 511323, 215822, 451244, 122441, 935101, 748134]\nassert solution.findArray([494916, 777977, 842015]) == [494916, 807869, 460774]\nassert solution.findArray([926436, 766665, 824702, 764779, 357995, 132407, 330946, 984934, 674403, 951751]) == [926436, 364589, 468919, 474645, 974080, 488284, 461301, 658340, 347397, 315300]\nassert solution.findArray([519451, 163929, 855843, 95911, 646200, 677845]) == [519451, 355650, 1019770, 817540, 567967, 232429]\nassert solution.findArray([391863]) == [391863]\nassert solution.findArray([674210, 921871, 295519, 727699, 392661, 525675]) == [674210, 284845, 693072, 1022156, 976710, 915646]\nassert solution.findArray([343799, 117265, 235385, 996410, 207837, 562557, 756307, 276960, 667483]) == [343799, 324838, 154984, 828227, 794599, 769696, 204590, 1029043, 923323]\nassert solution.findArray([623504, 720747, 868082, 927053, 407055, 257814, 497661, 442163, 306876, 949111]) == [623504, 228603, 508313, 203711, 529218, 383257, 293099, 75982, 135567, 710091]\nassert solution.findArray([284523, 629848, 786308]) == [284523, 903987, 156636]\nassert solution.findArray([616035, 456157, 766476, 583850, 245150, 698164, 253502, 704175, 469445, 794031]) == [616035, 1020862, 870353, 219814, 742708, 596650, 620810, 614545, 890730, 734314]\nassert solution.findArray([847496, 312942, 764035, 440205, 973595, 931148, 409947, 562423]) == [847496, 534758, 1011437, 859918, 552086, 61015, 554007, 972204]\nassert solution.findArray([159317, 848876, 662756, 522960, 84642, 803576, 796039, 175917, 917703, 985425]) == [159317, 957881, 454408, 910900, 438386, 854106, 26495, 953002, 831466, 67990]\nassert solution.findArray([691925, 860351, 220612, 799266, 132371, 681217, 257909, 324358, 926345]) == [691925, 503402, 949627, 1011686, 931633, 548882, 625268, 466035, 709007]\nassert solution.findArray([366922, 722109, 538297, 520051, 566499, 624863, 990939]) == [366922, 957943, 209412, 1038794, 1002384, 76860, 431620]\nassert solution.findArray([252446, 23772, 655004, 526889, 164417, 271500, 105692, 684474, 278052, 627390]) == [252446, 231106, 631360, 128181, 690280, 435917, 374864, 781670, 937886, 896154]\nassert solution.findArray([267750, 346943, 265641, 369389, 47315, 691549]) == [267750, 89817, 83606, 110404, 334398, 669070]\nassert solution.findArray([676908, 696986, 358849, 617935, 398951, 940210, 882435, 736170, 177748, 893528]) == [676908, 63158, 1039195, 791566, 1014696, 544469, 208817, 412841, 626174, 988172]\nassert solution.findArray([413258, 65175, 608044, 195975]) == [413258, 438493, 637371, 768683]\nassert solution.findArray([844299, 376084, 85134, 836430, 351809, 331841]) == [844299, 614175, 323994, 888768, 630031, 19968]\nassert solution.findArray([621759, 489158, 349524, 170427, 421949]) == [621759, 920185, 140178, 511215, 321926]\nassert solution.findArray([112552, 658423, 648511, 972422, 781648, 817708]) == [112552, 769119, 257736, 471993, 342998, 497532]\nassert solution.findArray([75115, 426667, 13699, 247027, 862991, 85596, 789964, 409860]) == [75115, 501696, 440104, 258416, 978940, 812371, 869264, 675016]\nassert solution.findArray([630676, 50432, 74588, 886206, 673826, 436454]) == [630676, 613012, 124508, 829154, 511388, 843972]\nassert solution.findArray([488434, 116534, 886431]) == [488434, 439492, 803241]\nassert solution.findArray([709471, 330424, 280225, 824054, 424785, 13598, 12645]) == [709471, 1038823, 85017, 578647, 715175, 413263, 1147]\nassert solution.findArray([15622, 892177, 606370, 823745, 460501, 393194, 211599, 125056, 64711, 462100]) == [15622, 892951, 318899, 381283, 759572, 194879, 443749, 184847, 70727, 520659]\nassert solution.findArray([554580, 740558, 203590, 372656, 455622, 656051, 989126]) == [554580, 211610, 546696, 439542, 220278, 848245, 333173]\nassert solution.findArray([949440, 594157]) == [949440, 486445]\nassert solution.findArray([131166, 422702, 909466, 102853]) == [131166, 291696, 758708, 815455]\nassert solution.findArray([831893, 13098, 109785, 259514, 296913, 66646, 280981, 165436, 618226, 683662]) == [831893, 819903, 106483, 153955, 488043, 361351, 347587, 446377, 780494, 196732]\nassert solution.findArray([713495, 255772, 468174, 84015, 650988, 259670]) == [713495, 590859, 312274, 421089, 566979, 661690]\nassert solution.findArray([579752, 162443, 94153, 654061, 459692, 726482, 452336]) == [579752, 696867, 202050, 562468, 981313, 792190, 914210]\nassert solution.findArray([987701, 7190, 453066, 118446, 324588, 743145, 133969, 766288, 588849]) == [987701, 986659, 456156, 468836, 343362, 1025285, 613816, 637441, 216417]\nassert solution.findArray([920971, 600386, 713655, 568226, 996620]) == [920971, 468169, 248565, 149525, 499374]\nassert solution.findArray([527765, 240497, 432044, 567220, 978736, 456800, 32084, 920440, 57867]) == [527765, 763620, 343261, 929816, 411780, 530256, 427316, 947756, 977267]\nassert solution.findArray([987781, 415011, 819421]) == [987781, 608166, 710142]\nassert solution.findArray([378001, 985480, 242612, 894527, 109347, 77726, 772348, 4473]) == [378001, 707865, 834108, 923019, 789788, 33981, 714594, 776581]\nassert solution.findArray([803683, 970108, 717130, 795412, 208731, 154422]) == [803683, 167455, 277558, 447070, 986191, 95341]\nassert solution.findArray([890988]) == [890988]\nassert solution.findArray([432736, 837027]) == [432736, 679875]\nassert solution.findArray([47821, 295387, 869750, 179667, 692228]) == [47821, 277270, 640173, 1046693, 536023]\nassert solution.findArray([500073, 776227, 872574, 901124, 473993, 998963, 947073, 571732, 530484]) == [500073, 817482, 428125, 36986, 719757, 525754, 85426, 445141, 41312]\nassert solution.findArray([352152, 465701, 516045, 5272]) == [352152, 148669, 50408, 510805]\nassert solution.findArray([560141]) == [560141]\nassert solution.findArray([648388, 152326, 610503, 20675, 618727, 494104, 431797, 16723]) == [648388, 767938, 721857, 589828, 598052, 981759, 72877, 448486]\nassert solution.findArray([311999, 425143, 498649, 681436]) == [311999, 179720, 124782, 916997]\nassert solution.findArray([91729, 23181, 865560, 896900]) == [91729, 81116, 880533, 39580]\nassert solution.findArray([206585, 142892, 78246, 362268, 925059, 528991]) == [206585, 67797, 204682, 308922, 760479, 397276]\nassert solution.findArray([557412, 997591, 883100, 225342, 72106, 819515, 322630, 475239]) == [557412, 506291, 147787, 919970, 158100, 891025, 552317, 240673]\nassert solution.findArray([754974, 576512]) == [754974, 215326]\nassert solution.findArray([575165, 553639, 187016]) == [575165, 46106, 698415]\nassert solution.findArray([458453, 234811, 635119, 24995, 460914, 840077, 49604, 348466]) == [458453, 355310, 665044, 643404, 485841, 776703, 790601, 364790]\nassert solution.findArray([458405, 820915]) == [458405, 686102]\nassert solution.findArray([645911, 559224]) == [645911, 86895]",
  "inefficient_solution": "class Solution:\n    def findArray(self, pref: List[int]) -> List[int]:\n        arr = [0] * len(pref)\n        for i in range(len(pref)):\n            for j in range(i + 1):\n                arr[i] ^= pref[j]\n        return arr",
  "is_python": true
}