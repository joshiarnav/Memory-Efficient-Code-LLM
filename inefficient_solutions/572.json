{
  "problem_idx": 572,
  "task_name": "Subtree of Another Tree",
  "markdown_description": "\nGiven the roots of two binary trees `root` and `subRoot`, return `true` if there is a subtree of `root` with the same structure and node values of `subRoot` and `false` otherwise.\n\n\nA subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0572.Subtree%20of%20Another%20Tree/images/subtree1-tree.jpg)\n\n```\n\n**Input:** root = [3,4,5,1,2], subRoot = [4,1,2]\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0572.Subtree%20of%20Another%20Tree/images/subtree2-tree.jpg)\n\n```\n\n**Input:** root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the `root` tree is in the range `[1, 2000]`.\n* The number of nodes in the `subRoot` tree is in the range `[1, 1000]`.\n* `-104 <= root.val <= 104`\n* `-104 <= subRoot.val <= 104`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSubtree(self, root: TreeNode, subRoot: TreeNode) -> bool:\n        def dfs(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            return (\n                root1.val == root2.val\n                and dfs(root1.left, root2.left)\n                and dfs(root1.right, root2.right)\n            )\n\n        if root is None:\n            return False\n        return (\n            dfs(root, subRoot)\n            or self.isSubtree(root.left, subRoot)\n            or self.isSubtree(root.right, subRoot)\n        )\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isSubtree(self, root: TreeNode, subRoot: TreeNode) -> bool:\n        def dfs(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            return (\n                root1.val == root2.val\n                and dfs(root1.left, root2.left)\n                and dfs(root1.right, root2.right)\n            )\n\n        if root is None:\n            return False\n        return (\n            dfs(root, subRoot)\n            or self.isSubtree(root.left, subRoot)\n            or self.isSubtree(root.right, subRoot)\n        )\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for root and subRoot\n    # Each node value is in the range [-10000, 10000]\n    root_val = random.randint(-10000, 10000)\n    subroot_val = random.randint(-10000, 10000)\n    \n    # Generate random binary trees\n    root = generate_binary_tree(root_val, random.randint(1, 10))\n    subroot = generate_binary_tree(subroot_val, random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isSubtree(root, subroot)\n    \n    return root, subroot, expected_result\n\ndef generate_binary_tree(val, max_depth):\n    if max_depth == 0:\n        return None\n    node = TreeNode(val)\n    node.left = generate_binary_tree(val, max_depth - 1)\n    node.right = generate_binary_tree(val, max_depth - 1)\n    return node\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, subroot, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isSubtree(root, subroot) == expected_result\n        print(f\"assert solution.isSubtree(TreeNode({root}), TreeNode({subroot})) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isSubtree(TreeNode({root}), TreeNode({subroot})) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd82f410>), TreeNode(<__main__.TreeNode object at 0x7fecbd88dbd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88dfd0>), TreeNode(<__main__.TreeNode object at 0x7fecbd88e090>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd866990>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a1c90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88e890>), TreeNode(<__main__.TreeNode object at 0x7fecbd88ef50>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd866550>), TreeNode(<__main__.TreeNode object at 0x7fecbd88fdd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88e890>), TreeNode(<__main__.TreeNode object at 0x7fecbd88f010>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88ef50>), TreeNode(<__main__.TreeNode object at 0x7fecbd88fe10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88e890>), TreeNode(<__main__.TreeNode object at 0x7fecbd8ad710>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cce50>), TreeNode(<__main__.TreeNode object at 0x7fecbd9ccb90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cdf50>), TreeNode(<__main__.TreeNode object at 0x7fecbd9ccd50>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cce50>), TreeNode(<__main__.TreeNode object at 0x7fecbd9ccd10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b0c50>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b0fd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b1310>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b3f10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b3b50>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b0190>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9c3650>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b1410>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b0190>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b20d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9c38d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd9c36d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b39d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b12d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9ce050>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cdf50>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b12d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b32d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88e910>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a17d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b2f10>), TreeNode(<__main__.TreeNode object at 0x7fecbd676ed0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd6758d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd675fd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd676f10>), TreeNode(<__main__.TreeNode object at 0x7fecbd6771d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd675890>), TreeNode(<__main__.TreeNode object at 0x7fecbd88e3d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88df90>), TreeNode(<__main__.TreeNode object at 0x7fecbd88d050>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88d810>), TreeNode(<__main__.TreeNode object at 0x7fecbd88e6d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd866550>), TreeNode(<__main__.TreeNode object at 0x7fecbd88fcd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8a2f50>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b6b10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7c9a50>), TreeNode(<__main__.TreeNode object at 0x7fecbd894f10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd685310>), TreeNode(<__main__.TreeNode object at 0x7fecbd684650>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd687ed0>), TreeNode(<__main__.TreeNode object at 0x7fecbd687890>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd684690>), TreeNode(<__main__.TreeNode object at 0x7fecbd88f6d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd686910>), TreeNode(<__main__.TreeNode object at 0x7fecbd686110>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd866950>), TreeNode(<__main__.TreeNode object at 0x7fecbd684f10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd6859d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd7c9c90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9e0290>), TreeNode(<__main__.TreeNode object at 0x7fecbd88da90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9c28d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd9c38d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d0090>), TreeNode(<__main__.TreeNode object at 0x7fecbd9ccb10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cda10>), TreeNode(<__main__.TreeNode object at 0x7fecbd9ce150>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd866950>), TreeNode(<__main__.TreeNode object at 0x7fecbd88f210>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9c3510>), TreeNode(<__main__.TreeNode object at 0x7fecbd9c2d90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d00d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e18d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9e0b50>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e1050>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d0090>), TreeNode(<__main__.TreeNode object at 0x7fecbd8974d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88dc50>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a95d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd896f10>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e0a10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d0050>), TreeNode(<__main__.TreeNode object at 0x7fecbd8945d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9c3f90>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cee10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cf850>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e0690>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cd850>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cec10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d00d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd9ccd90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cec10>), TreeNode(<__main__.TreeNode object at 0x7fecbd88fdd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd866590>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a0c90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88db90>), TreeNode(<__main__.TreeNode object at 0x7fecbd88fa90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d0050>), TreeNode(<__main__.TreeNode object at 0x7fecbd88fe90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88fa90>), TreeNode(<__main__.TreeNode object at 0x7fecbd88ce90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d0090>), TreeNode(<__main__.TreeNode object at 0x7fecbd88fe90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88df50>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cebd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9e3350>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e32d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd866950>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cf450>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9e0190>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e0cd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b1390>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b0c90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd80e890>), TreeNode(<__main__.TreeNode object at 0x7fecbd80f050>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b0c90>), TreeNode(<__main__.TreeNode object at 0x7fecbd88ed50>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8b2290>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b1f50>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cfb50>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cee10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd80f1d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd80dc10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9e0e10>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e1490>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd80dc10>), TreeNode(<__main__.TreeNode object at 0x7fecbd88ded0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9e1490>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cded0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88ee10>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a3610>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cedd0>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cd410>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd80ecd0>), TreeNode(<__main__.TreeNode object at 0x7fecbd80f050>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9ccc90>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cf650>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d00d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a3c10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cf710>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b5050>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88e0d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd88de50>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88e810>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e15d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88e210>), TreeNode(<__main__.TreeNode object at 0x7fecbd88e7d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9e3650>), TreeNode(<__main__.TreeNode object at 0x7fecbd88fdd0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9ceb90>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cf910>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd7d00d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e30d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cf990>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a0b90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8a3f90>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e0290>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8a0b50>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a0710>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8a2710>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a3750>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8a2a90>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a2f90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8a2750>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e1610>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8a3210>), TreeNode(<__main__.TreeNode object at 0x7fecbd8a3a90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd82c4d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd82e8d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd8a3090>), TreeNode(<__main__.TreeNode object at 0x7fecbd82f7d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cead0>), TreeNode(<__main__.TreeNode object at 0x7fecbd9ceb90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cfc50>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e10d0>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cead0>), TreeNode(<__main__.TreeNode object at 0x7fecbd8b8910>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9e0a90>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e3410>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd82f8d0>), TreeNode(<__main__.TreeNode object at 0x7fecbd9c2d90>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88ea10>), TreeNode(<__main__.TreeNode object at 0x7fecbd9cff10>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd88fe10>), TreeNode(<__main__.TreeNode object at 0x7fecbd80e890>)) == False\nassert solution.isSubtree(TreeNode(<__main__.TreeNode object at 0x7fecbd9cf910>), TreeNode(<__main__.TreeNode object at 0x7fecbd9e3f50>)) == False",
  "inefficient_solution": "class Solution:\n    def isSubtree(self, root: TreeNode, subRoot: TreeNode) -> bool:\n        def dfs(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            return (\n                root1.val == root2.val\n                and dfs(root1.left, root2.left)\n                and dfs(root1.right, root2.right)\n            )\n\n        def traverse(node):\n            if node is None:\n                return\n            dfs(node, subRoot)\n            traverse(node.left)\n            traverse(node.right)\n\n        traverse(root)\n        return True",
  "is_python": true
}