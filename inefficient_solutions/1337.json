{
  "problem_idx": 1337,
  "task_name": "The K Weakest Rows in a Matrix",
  "markdown_description": "\nYou are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned **in front** of the civilians. That is, all the `1`'s will appear to the **left** of all the `0`'s in each row.\n\n\nA row `i` is **weaker** than a row `j` if one of the following is true:\n\n\n* The number of soldiers in row `i` is less than the number of soldiers in row `j`.\n* Both rows have the same number of soldiers and `i < j`.\n\n\nReturn *the indices of the* `k` ***weakest** rows in the matrix ordered from weakest to strongest*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** mat = \n[[1,1,0,0,0],\n [1,1,1,1,0],\n [1,0,0,0,0],\n [1,1,0,0,0],\n [1,1,1,1,1]], \nk = 3\n**Output:** [2,0,3]\n**Explanation:** \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are [2,0,3,1,4].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** mat = \n[[1,0,0,0],\n [1,1,1,1],\n [1,0,0,0],\n [1,0,0,0]], \nk = 2\n**Output:** [0,2]\n**Explanation:** \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are [0,2,3,1].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == mat.length`\n* `n == mat[i].length`\n* `2 <= n, m <= 100`\n* `1 <= k <= m`\n* `matrix[i][j]` is either 0 or 1.\n\n\n",
  "canonical_solution": "class Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        m, n = len(mat), len(mat[0])\n        ans = [n - bisect_right(row[::-1], 0) for row in mat]\n        idx = list(range(m))\n        idx.sort(key=lambda i: ans[i])\n        return idx[:k]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def kWeakestRows(self, mat, k):\n        m, n = len(mat), len(mat[0])\n        ans = [n - bisect_right(row[::-1], 0) for row in mat]\n        idx = list(range(m))\n        idx.sort(key=lambda i: ans[i])\n        return idx[:k]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random matrix\n    mat = [[random.randint(0, 1) for _ in range(random.randint(2, 10))] for _ in range(random.randint(2, 10))]\n    \n    # Generate a random k value\n    k = random.randint(1, len(mat))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.kWeakestRows(mat, k)\n\n    return mat, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        mat, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.kWeakestRows(mat, k) == expected_result\n        print(f\"assert solution.kWeakestRows({mat}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.kWeakestRows({mat}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.kWeakestRows([[0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0], [1, 1], [1, 1, 1, 0, 1], [0, 1, 0], [1, 1, 1, 0, 0, 0, 0, 1, 1]], 1) == [1]\nassert solution.kWeakestRows([[1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1], [0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1]], 3) == [5, 1, 7]\nassert solution.kWeakestRows([[1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0], [0, 1, 1, 0], [0, 1, 1, 1]], 4) == [2, 1, 0, 3]\nassert solution.kWeakestRows([[0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 0]], 5) == [4, 0, 5, 1, 3]\nassert solution.kWeakestRows([[1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1], [1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0]], 5) == [6, 1, 3, 0, 2]\nassert solution.kWeakestRows([[1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [1, 1, 1, 0], [1, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1], [0, 1], [1, 0, 1, 1, 1, 0, 0, 0, 1]], 8) == [1, 5, 6, 0, 8, 7, 2, 3]\nassert solution.kWeakestRows([[1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0], [1, 1, 1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0]], 6) == [3, 8, 9, 1, 2, 4]\nassert solution.kWeakestRows([[0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1]], 1) == [0]\nassert solution.kWeakestRows([[1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [1, 1, 1, 0], [1, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 0]], 5) == [3, 6, 1, 0, 5]\nassert solution.kWeakestRows([[0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0]], 1) == [0]\nassert solution.kWeakestRows([[1, 1, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0], [0, 1]], 3) == [2, 1, 3]\nassert solution.kWeakestRows([[0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 1], [0, 1, 0, 0, 0], [1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0], [1, 0, 1, 1], [0, 1, 1, 1, 0, 0, 1]], 7) == [3, 7, 8, 0, 1, 4, 5]\nassert solution.kWeakestRows([[1, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1], [0, 0]], 1) == [2]\nassert solution.kWeakestRows([[1, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0], [1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0]], 2) == [8, 3]\nassert solution.kWeakestRows([[0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0]], 2) == [1, 2]\nassert solution.kWeakestRows([[1, 1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1], [0, 1], [0, 0, 1, 0]], 6) == [4, 3, 0, 2, 7, 5]\nassert solution.kWeakestRows([[1, 1, 0, 1, 0, 1], [0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0], [1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1], [1, 1, 1, 0], [1, 1, 1, 1, 1]], 3) == [2, 0, 5]\nassert solution.kWeakestRows([[0, 0, 1, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0]], 2) == [6, 1]\nassert solution.kWeakestRows([[0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0], [1, 1, 1]], 1) == [1]\nassert solution.kWeakestRows([[1, 1, 0, 1], [1, 0, 0, 0], [1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1], [0, 0, 0]], 9) == [7, 3, 5, 1, 9, 0, 2, 6, 4]\nassert solution.kWeakestRows([[1, 1], [0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1]], 4) == [3, 1, 0, 2]\nassert solution.kWeakestRows([[1, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0], [1, 1, 0, 0], [1, 1, 0]], 3) == [2, 0, 1]\nassert solution.kWeakestRows([[1, 0], [1, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0], [0, 1], [1, 1, 0, 1], [0, 1, 1, 1, 0, 0]], 5) == [2, 1, 3, 4, 5]\nassert solution.kWeakestRows([[1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0]], 6) == [0, 3, 5, 4, 1, 2]\nassert solution.kWeakestRows([[1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1], [0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1], [1, 0]], 2) == [1, 5]\nassert solution.kWeakestRows([[1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0]], 2) == [1, 0]\nassert solution.kWeakestRows([[1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 1], [0, 0, 0, 0, 1]], 3) == [1, 2, 4]\nassert solution.kWeakestRows([[0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 1], [0, 1, 1, 1]], 4) == [3, 2, 4, 1]\nassert solution.kWeakestRows([[0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0], [1, 1], [1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0], [0, 0], [0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1]], 2) == [3, 0]\nassert solution.kWeakestRows([[0, 1, 0, 1, 0, 1, 0], [0, 0]], 1) == [1]\nassert solution.kWeakestRows([[0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 0, 0], [0, 0, 1], [0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0]], 6) == [0, 3, 7, 8, 9, 2]\nassert solution.kWeakestRows([[1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1], [0, 1], [0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 1], [1, 1, 0], [1, 0, 1], [0, 0]], 8) == [5, 0, 1, 2, 3, 6, 8, 9]\nassert solution.kWeakestRows([[0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1]], 3) == [5, 6, 0]\nassert solution.kWeakestRows([[0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[0, 1, 0, 0, 0, 0, 0, 0], [1, 0], [1, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0], [1, 0, 0, 1, 1], [1, 1, 0, 0]], 6) == [0, 3, 4, 2, 5, 1]\nassert solution.kWeakestRows([[1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0]], 2) == [1, 2]\nassert solution.kWeakestRows([[1, 1, 0, 1, 1, 0, 0, 1], [0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1], [0, 1]], 2) == [0, 1]\nassert solution.kWeakestRows([[0, 1, 0], [1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0]], 4) == [3, 1, 4, 5]\nassert solution.kWeakestRows([[1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1], [0, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1]], 5) == [1, 0, 2, 4, 6]\nassert solution.kWeakestRows([[1, 0], [1, 0], [1, 0, 1, 1], [1, 1, 1, 1], [1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 0], [1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0]], 6) == [6, 8, 2, 5, 9, 0]\nassert solution.kWeakestRows([[1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 0], [0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1]], 5) == [4, 6, 1, 0, 2]\nassert solution.kWeakestRows([[0, 1, 1], [1, 1, 0, 0, 0]], 2) == [1, 0]\nassert solution.kWeakestRows([[1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0]], 2) == [2, 1]\nassert solution.kWeakestRows([[0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1], [1, 0], [0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0], [0, 1, 1, 0], [0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1]], 6) == [0, 1, 6, 8, 4, 7]\nassert solution.kWeakestRows([[1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1], [0, 0], [1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1]], 4) == [2, 8, 0, 1]\nassert solution.kWeakestRows([[0, 0, 1, 0], [0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0], [1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 0], [1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 1, 1]], 9) == [5, 2, 0, 7, 3, 4, 6, 1, 8]\nassert solution.kWeakestRows([[1, 1, 1], [0, 0, 1, 1], [1, 1, 1, 0, 0, 0, 0]], 1) == [1]\nassert solution.kWeakestRows([[1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0], [1, 0, 0, 1, 1, 0]], 1) == [1]\nassert solution.kWeakestRows([[1, 1], [1, 1], [0, 1, 1, 0, 0, 0, 0], [1, 0], [1, 1, 0, 0, 0], [1, 1, 0, 0, 1]], 1) == [2]\nassert solution.kWeakestRows([[0, 1, 0], [1, 1, 1, 1, 1, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[1, 0, 0, 1], [0, 1, 0], [1, 1, 0, 1, 1, 0], [0, 1, 0], [1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0], [1, 0, 1], [0, 1, 0, 1, 1]], 3) == [4, 7, 2]\nassert solution.kWeakestRows([[1, 1, 1], [1, 0]], 1) == [1]\nassert solution.kWeakestRows([[1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1], [1, 0, 1]], 5) == [1, 3, 2, 4, 0]\nassert solution.kWeakestRows([[1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1], [1, 0, 1]], 2) == [1, 2]\nassert solution.kWeakestRows([[1, 0, 1, 1, 1, 0], [0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0], [1, 0, 0, 0]], 8) == [2, 4, 7, 0, 5, 6, 1, 3]\nassert solution.kWeakestRows([[0, 1], [0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1]], 4) == [2, 3, 0, 1]\nassert solution.kWeakestRows([[1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1], [1, 0, 1, 0, 0], [1, 0], [1, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[1, 1, 0, 1, 0, 1, 1], [1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1]], 2) == [2, 3]\nassert solution.kWeakestRows([[1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0]], 5) == [3, 0, 4, 7, 2]\nassert solution.kWeakestRows([[1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0]], 1) == [1]\nassert solution.kWeakestRows([[1, 0, 1, 0, 1], [1, 1, 1, 1], [1, 0, 0, 1]], 1) == [2]\nassert solution.kWeakestRows([[1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 1, 0], [0, 0, 1], [1, 1, 0, 0, 0, 1]], 6) == [0, 2, 6, 1, 3, 5]\nassert solution.kWeakestRows([[1, 1, 0], [1, 0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1]], 7) == [4, 5, 7, 3, 0, 1, 2]\nassert solution.kWeakestRows([[0, 0, 1, 0], [0, 0, 1, 0], [1, 0], [0, 0], [1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1], [1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1], [1, 1, 0, 1, 1]], 5) == [4, 0, 1, 9, 3]\nassert solution.kWeakestRows([[1, 0, 0, 0, 1, 1, 0, 1], [0, 1], [0, 0, 1, 1, 1, 0, 0, 1], [1, 0, 1], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0]], 5) == [0, 4, 7, 2, 1]\nassert solution.kWeakestRows([[1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1], [1, 1, 0, 0], [1, 1, 1], [0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0], [1, 0, 0, 1]], 4) == [4, 6, 0, 1]\nassert solution.kWeakestRows([[1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 1], [0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1]], 4) == [8, 4, 2, 1]\nassert solution.kWeakestRows([[1, 1, 1, 1], [1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1]], 1) == [2]\nassert solution.kWeakestRows([[1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1]], 1) == [1]\nassert solution.kWeakestRows([[0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0], [0, 0, 1, 0, 1], [0, 1, 0, 0], [1, 0, 1, 1, 0]], 1) == [1]\nassert solution.kWeakestRows([[1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0], [1, 0, 1], [1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1]], 7) == [2, 3, 5, 6, 1, 4, 0]\nassert solution.kWeakestRows([[1, 1, 1, 0, 1], [0, 0, 1, 0], [1, 0, 1, 1, 0], [0, 1, 1], [0, 1, 0], [0, 1, 1, 1, 1, 0]], 5) == [1, 0, 2, 4, 5]\nassert solution.kWeakestRows([[1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1]], 1) == [0]\nassert solution.kWeakestRows([[1, 0, 0, 0], [1, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0], [0, 1], [1, 0], [1, 0, 1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0]], 4) == [0, 7, 2, 3]\nassert solution.kWeakestRows([[1, 1, 0], [1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1], [0, 1, 1]], 9) == [2, 4, 6, 3, 7, 0, 1, 5, 8]\nassert solution.kWeakestRows([[0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1], [1, 1]], 3) == [1, 3, 0]\nassert solution.kWeakestRows([[1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1], [1, 0, 1, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[1, 1, 1, 0, 1], [0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [1, 1, 0, 0, 0]], 3) == [1, 5, 0]\nassert solution.kWeakestRows([[1, 1, 1, 1, 1], [1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0]], 1) == [2]\nassert solution.kWeakestRows([[1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0]], 1) == [0]\nassert solution.kWeakestRows([[1, 1, 1], [1, 1, 0, 1, 0, 0], [1, 1, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1], [0, 1, 0, 0]], 5) == [1, 3, 4, 2, 7]\nassert solution.kWeakestRows([[1, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1], [0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1]], 1) == [3]\nassert solution.kWeakestRows([[1, 0], [1, 1], [0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 1], [1, 1], [0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1]], 4) == [7, 6, 3, 4]\nassert solution.kWeakestRows([[0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0]], 1) == [0]\nassert solution.kWeakestRows([[0, 1, 1], [0, 1, 1, 0, 1]], 1) == [1]\nassert solution.kWeakestRows([[1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0], [0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0], [1, 1, 1], [1, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1]], 7) == [8, 2, 5, 9, 1, 3, 4]\nassert solution.kWeakestRows([[0, 0, 0, 0, 0], [1, 1, 1], [1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 0, 1, 1], [1, 0, 1], [1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1]], 7) == [8, 0, 7, 2, 6, 3, 5]\nassert solution.kWeakestRows([[1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1], [1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1]], 4) == [1, 2, 3, 4]\nassert solution.kWeakestRows([[0, 0, 0, 1], [1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0]], 1) == [3]\nassert solution.kWeakestRows([[1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0]], 1) == [0]\nassert solution.kWeakestRows([[0, 1, 0, 0, 1], [1, 0, 0, 1, 0], [1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1]], 1) == [7]\nassert solution.kWeakestRows([[1, 1, 0, 1, 1], [1, 1, 1, 0], [0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1]], 4) == [3, 5, 0, 4]\nassert solution.kWeakestRows([[0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0]], 2) == [0, 1]\nassert solution.kWeakestRows([[0, 1, 0, 1, 0, 1], [0, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0, 0]], 8) == [0, 8, 4, 6, 9, 1, 2, 3]\nassert solution.kWeakestRows([[1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 1]], 4) == [0, 2, 3, 1]\nassert solution.kWeakestRows([[0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1]], 5) == [1, 3, 2, 4, 5]",
  "inefficient_solution": "class Solution:\n    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:\n        m, n = len(mat), len(mat[0])\n        soldier_counts = []\n        for row in mat:\n            soldier_count = 0\n            row_copy = row[:]\n            while row_copy:\n                soldier_count += row_copy.pop(0)\n            soldier_counts.append(soldier_count)\n        sorted_soldier_counts = [i for _, i in sorted((soldier_count, idx) for idx, soldier_count in enumerate(soldier_counts))]\n        return sorted_soldier_counts[:k]",
  "is_python": true
}