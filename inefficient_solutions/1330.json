{
  "problem_idx": 1330,
  "task_name": "Reverse Subarray To Maximize Array Value",
  "markdown_description": "\nYou are given an integer array `nums`. The *value* of this array is defined as the sum of `|nums[i] - nums[i + 1]|` for all `0 <= i < nums.length - 1`.\n\n\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation **only once**.\n\n\nFind maximum possible value of the final array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,1,5,4]\n**Output:** 10\n**Explanation:** By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,9,24,2,1,10]\n**Output:** 68\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 3 * 104`\n* `-105 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        ans = s = sum(abs(x - y) for x, y in pairwise(nums))\n        for x, y in pairwise(nums):\n            ans = max(ans, s + abs(nums[0] - y) - abs(x - y))\n            ans = max(ans, s + abs(nums[-1] - x) - abs(x - y))\n        for k1, k2 in pairwise((1, -1, -1, 1, 1)):\n            mx, mi = -inf, inf\n            for x, y in pairwise(nums):\n                a = k1 * x + k2 * y\n                b = abs(x - y)\n                mx = max(mx, a - b)\n                mi = min(mi, a + b)\n            ans = max(ans, s + max(mx - mi, 0))\n        return ans\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-10**5, 10**5+1), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxValueAfterReverse(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxValueAfterReverse(nums) == expected_result\n        print(f\"assert solution.maxValueAfterReverse({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxValueAfterReverse({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxValueAfterReverse([-5177, 95934, -82899, 40496, 53577, -48886, -7982, 4357, -28321, -99804]) == 813921\nassert solution.maxValueAfterReverse([-5953, 40794, -5442, -1479, -70454, -74503]) == 299994\nassert solution.maxValueAfterReverse([32478, -17856, 92066, 8688, 80109, 95345, -79466, 87399, -69051]) == 962341\nassert solution.maxValueAfterReverse([-73532, 2967, -95172, 44962, -69112]) == 428846\nassert solution.maxValueAfterReverse([55288, -56054, 58348, -14070, 93413, 22602, -68028, 70599, -74653, 57707]) == 1016011\nassert solution.maxValueAfterReverse([46032, 81704, 5167, -23026, 8411, -92773, 97026, -83243, -93574]) == 911972\nassert solution.maxValueAfterReverse([98101, 1301]) == 96800\nassert solution.maxValueAfterReverse([62966, -30303, 66852, 72217, 18263, -86792, -89730, 93760, -28566]) == 970840\nassert solution.maxValueAfterReverse([-46072, 63589, -42778, 52886]) == 314986\nassert solution.maxValueAfterReverse([-51652, -19986, -99028, -25963, -68784, 87453, -93328, 24165]) == 731233\nassert solution.maxValueAfterReverse([-84797, 15017, 1556, 74854, -75161, -82848, 55412]) == 635969\nassert solution.maxValueAfterReverse([3272, -88545]) == 91817\nassert solution.maxValueAfterReverse([-56164, -41565, 99332, 49166, 76048, -36595]) == 526649\nassert solution.maxValueAfterReverse([40539, -79935, -51696, -9731, -48784, 57757]) == 445725\nassert solution.maxValueAfterReverse([-79511, 16928, 15771, 40958, 86789, -67029, -98821, 26402, -17759, 16259]) == 773600\nassert solution.maxValueAfterReverse([-18201, 57095, 56023, -30223, 92376, -30738, -39642]) == 590753\nassert solution.maxValueAfterReverse([-75024, 57018, 14660, -2412, 69651, 14160, -80427, -6867]) == 559785\nassert solution.maxValueAfterReverse([-93470, -55022, 73649, -5968, -27810]) == 366686\nassert solution.maxValueAfterReverse([16020, -9003, 69436, 85054]) == 225912\nassert solution.maxValueAfterReverse([49626, 26205, -13292, 34787]) == 134418\nassert solution.maxValueAfterReverse([-65428, -84088]) == 18660\nassert solution.maxValueAfterReverse([-74703, -90705]) == 16002\nassert solution.maxValueAfterReverse([37823, -30672, -99334, -62655]) == 242331\nassert solution.maxValueAfterReverse([-59852, 62682, -35142, -51078, -7604, -72110, 15338, 54646]) == 571990\nassert solution.maxValueAfterReverse([-5605, 10003, -86575]) == 177548\nassert solution.maxValueAfterReverse([48230, 316, -47626, 60080, -49552, -17884, 51548, -20097, -94045]) == 654248\nassert solution.maxValueAfterReverse([-65437, -98592, -75577, -6816, 73620]) == 354564\nassert solution.maxValueAfterReverse([-90188, -67971, 80828, -1985, 66038, 5386, 19207, -16932, 38106, -37742]) == 710064\nassert solution.maxValueAfterReverse([-79758, 25782]) == 105540\nassert solution.maxValueAfterReverse([35426, -75444, 2775]) == 189089\nassert solution.maxValueAfterReverse([-82105, 18393]) == 100498\nassert solution.maxValueAfterReverse([55337, -84564, -2747, -84381]) == 361436\nassert solution.maxValueAfterReverse([-35883, 17202, -9009, 10790, -29876, -27617, -62205, 911, -64540, -26201]) == 380730\nassert solution.maxValueAfterReverse([-62954, -26909, -70830, -45180, 99894, -89338, 59943, -76331]) == 743251\nassert solution.maxValueAfterReverse([-49044, 76657, -4909, -89691, 53551, 66904, 2086, 29034, 27847]) == 658517\nassert solution.maxValueAfterReverse([54898, 83960]) == 29062\nassert solution.maxValueAfterReverse([89435, -77109, 47730, -86575, -48226, -63508, 43956, -25031, -90225]) == 858625\nassert solution.maxValueAfterReverse([-26201, -78659, 19415]) == 150532\nassert solution.maxValueAfterReverse([95520, 60617]) == 34903\nassert solution.maxValueAfterReverse([-37496, -12712, 36960, 69133, -51471, -577, 15033]) == 393081\nassert solution.maxValueAfterReverse([1640, 18355, 43408, -36229, 20107, -45293, 78711, -72923, -67359]) == 695771\nassert solution.maxValueAfterReverse([-33532, 14685, -21171]) == 84073\nassert solution.maxValueAfterReverse([-24753, 74806, 2175, -4179, -86316, 34871, 49350, 22840]) == 500957\nassert solution.maxValueAfterReverse([53829, -53647, -70641, -52157, 48151, -68726, -99793]) == 513761\nassert solution.maxValueAfterReverse([-44380, 87028, -646, -35933, 68560, -62638, -46361, -35820, -99844, -39359]) == 732817\nassert solution.maxValueAfterReverse([38499, -32078, 3885, -89339, -83353, 72378, 56475, -40973, -36294, 94232]) == 889693\nassert solution.maxValueAfterReverse([43369, 62755, 49607, -99389, 8513, -65192, 59279]) == 569796\nassert solution.maxValueAfterReverse([69968, 66149, -81323, 22402]) == 342510\nassert solution.maxValueAfterReverse([68619, 80394, 51290]) == 46433\nassert solution.maxValueAfterReverse([9982, -66290, 14330, 46451, -15330, -49375, -78458, 87232, 41701]) == 707295\nassert solution.maxValueAfterReverse([-33628, -94559, -98339, 26725, 96840, -95090, -974, -56478]) == 844008\nassert solution.maxValueAfterReverse([72183, -63248, 45641, 22104, -78735, 57894, 29476]) == 583822\nassert solution.maxValueAfterReverse([-97758, -72572, 65586]) == 301502\nassert solution.maxValueAfterReverse([-776, 59992, -20051, -17955, 68027, -48111, 41440, -89183, -39907]) == 692739\nassert solution.maxValueAfterReverse([71508, -5678, -81365, -74928]) == 299309\nassert solution.maxValueAfterReverse([81882, 6682, 24979, -13059, -82442, 44336, -6040, 79823, -76737]) == 715436\nassert solution.maxValueAfterReverse([22940, -74235, -97102, 64876, -61699, 96078, -86908, -62082, -14533, -74971]) == 979346\nassert solution.maxValueAfterReverse([-90752, -24680, 28955, -73211, 15179, -50285, -17173, 13599]) == 513190\nassert solution.maxValueAfterReverse([-43273, 23930, -92651, -1170]) == 275265\nassert solution.maxValueAfterReverse([-92768, 10566, -34454, 71037]) == 314316\nassert solution.maxValueAfterReverse([-24656, 39500, 96530, 81452, -8264]) == 317010\nassert solution.maxValueAfterReverse([9158, 20675, 85008, 28027, -15275]) == 219435\nassert solution.maxValueAfterReverse([-273, -32590, 38084, 88762, 95142]) == 338119\nassert solution.maxValueAfterReverse([80951, -78336, -71396, 46328]) == 429358\nassert solution.maxValueAfterReverse([40345, -60218, 87972, -83001, -94244, -6379, -37126]) == 672927\nassert solution.maxValueAfterReverse([-84753, 44443, 93224, -48398, -93293, -48155, 54560]) == 698029\nassert solution.maxValueAfterReverse([56426, 35196, 62011, -30172]) == 205596\nassert solution.maxValueAfterReverse([-32813, -66918, -83097, 77831, 28379, 30020, -42851]) == 525770\nassert solution.maxValueAfterReverse([-26828, -83333, -49917, 45926, 31439, -5024, -77436]) == 471838\nassert solution.maxValueAfterReverse([81924, 22193, -53360, 20804, 15162, -3411, -22274]) == 337861\nassert solution.maxValueAfterReverse([-48354, 12583, -31152]) == 104672\nassert solution.maxValueAfterReverse([-42802, 68608, 3141]) == 176877\nassert solution.maxValueAfterReverse([-39807, 83085, -87784, 14619, -19653, -50073, -76901, -65015, -23294, -11396]) == 643913\nassert solution.maxValueAfterReverse([69560, -26314, 89576, -24918, 4652, -65093, 68975]) == 624549\nassert solution.maxValueAfterReverse([-92773, -50670, 41449, -8178, -44454, 55394, -44102, -19837, -23607]) == 532488\nassert solution.maxValueAfterReverse([98899, -33176, -78979, -27774, 50084, -97112, 36882, -17626, -91272]) == 848360\nassert solution.maxValueAfterReverse([95936, 86446, -45781, 42241]) == 318149\nassert solution.maxValueAfterReverse([37539, 80275, -63182, -52787, -76149]) == 400602\nassert solution.maxValueAfterReverse([-60367, 25763, -50439, -86066, 46971]) == 392779\nassert solution.maxValueAfterReverse([13530, -27623, 4193, -735, -45861, 29817, 26480, 15529, -12484]) == 295432\nassert solution.maxValueAfterReverse([-90111, 86905, -43752, 32233, -44316, 75941, -87263, 97293]) == 993284\nassert solution.maxValueAfterReverse([-86874, -96356, 8097, -1994]) == 293786\nassert solution.maxValueAfterReverse([-41496, 56997, -70126, 80609, -37958, -70075]) == 559152\nassert solution.maxValueAfterReverse([10258, -89372, -44536, -36381, -74943, -81269, 14389]) == 378368\nassert solution.maxValueAfterReverse([-57473, -40505]) == 16968\nassert solution.maxValueAfterReverse([-5451, 1653, -5502, -14601, 74122, 72546, -42482, -32728, -59302]) == 475561\nassert solution.maxValueAfterReverse([-5310, 61398, 68919, 99284]) == 178823\nassert solution.maxValueAfterReverse([-64295, -24835]) == 39460\nassert solution.maxValueAfterReverse([66860, -34, 55989, 40514, -96103, -33846, -39233, -38603, -12104, 64613]) == 604733\nassert solution.maxValueAfterReverse([-62538, -49569, 34246, -5500, 14788, -62287]) == 322031\nassert solution.maxValueAfterReverse([-94394, -59059, -60688, 87117, 30364, -31479, -48685, 10797, -37008, -46493]) == 616189\nassert solution.maxValueAfterReverse([48100, 90966, -66287, -30993, -8591, -38430, 35392, 77485]) == 561755\nassert solution.maxValueAfterReverse([78007, 81590, -3299, -97422, 12003, -19681, -57069, 68860, -89711]) == 840968\nassert solution.maxValueAfterReverse([-47703, -88030, 89772, -40341, -96676, 91764]) == 692157\nassert solution.maxValueAfterReverse([-18861, -48674, -53831, -94209, 45852]) == 304778\nassert solution.maxValueAfterReverse([15270, -26616]) == 41886\nassert solution.maxValueAfterReverse([-4270, -48765, 97766, -18091]) == 306883\nassert solution.maxValueAfterReverse([28675, -12289, 75564, 10270, 96853]) == 307908\nassert solution.maxValueAfterReverse([-80417, -6481, -90382, -44886]) == 203333\nassert solution.maxValueAfterReverse([2573, 85776, -46814, -47496, 30728, -29811, -86871, -19283, -62848, -37823]) == 647250",
  "inefficient_solution": "class Solution:\n    def maxValueAfterReverse(self, nums):\n        ans = 0\n        for _ in range(len(nums) * len(nums)):\n            arr = [x for x in nums]\n            for i in range(len(nums)):\n                for j in range(i + 1, len(nums)):\n                    if arr[i] > arr[j]:\n                        arr[i], arr[j] = arr[j], arr[i]\n                    elif nums[i] < nums[j]:\n                        arr[i], arr[j] = arr[j], arr[i]\n            s = sum(abs(x - y) for x, y in zip(arr, arr[1:]))\n            ans = max(ans, s)\n        return ans",
  "is_python": true
}