{
  "problem_idx": 1955,
  "task_name": "Count Number of Special Subsequences",
  "markdown_description": "\nA sequence is **special** if it consists of a **positive** number of `0`s, followed by a **positive** number of `1`s, then a **positive** number of `2`s.\n\n\n* For example, `[0,1,2]` and `[0,0,1,1,1,2]` are special.\n* In contrast, `[2,1,0]`, `[1]`, and `[0,1,2,0]` are not special.\n\n\nGiven an array `nums` (consisting of **only** integers `0`, `1`, and `2`), return *the **number of different subsequences** that are special*. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n\nA **subsequence** of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are **different** if the **set of indices** chosen are different.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [0,1,2,2]\n**Output:** 3\n**Explanation:** The special subsequences are bolded [**0**,**1**,**2**,2], [**0**,**1**,2,**2**], and [**0**,**1**,**2**,**2**].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,2,0,0]\n**Output:** 0\n**Explanation:** There are no special subsequences in [2,2,0,0].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [0,1,2,0,1,2]\n**Output:** 7\n**Explanation:** The special subsequences are bolded:\n- [**0**,**1**,**2**,0,1,2]\n- [**0**,**1**,2,0,1,**2**]\n- [**0**,**1**,**2**,0,1,**2**]\n- [**0**,**1**,2,0,**1**,**2**]\n- [**0**,1,2,**0**,**1**,**2**]\n- [**0**,1,2,0,**1**,**2**]\n- [0,1,2,**0**,**1**,**2**]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 2`\n\n\n",
  "canonical_solution": "class Solution:\n    def countSpecialSubsequences(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(nums)\n        f = [0] * 3\n        f[0] = nums[0] == 0\n        for i in range(1, n):\n            if nums[i] == 0:\n                f[0] = (2 * f[0] + 1) % mod\n            elif nums[i] == 1:\n                f[1] = (f[0] + 2 * f[1]) % mod\n            else:\n                f[2] = (f[1] + 2 * f[2]) % mod\n        return f[2]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countSpecialSubsequences(self, nums):\n        mod = 10**9 + 7\n        n = len(nums)\n        f = [0] * 3\n        f[0] = nums[0] == 0\n        for i in range(1, n):\n            if nums[i] == 0:\n                f[0] = (2 * f[0] + 1) % mod\n            elif nums[i] == 1:\n                f[1] = (f[0] + 2 * f[1]) % mod\n            else:\n                f[2] = (f[1] + 2 * f[2]) % mod\n        return f[2]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices([0, 1, 2], k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countSpecialSubsequences(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countSpecialSubsequences(nums) == expected_result\n        print(f\"assert solution.countSpecialSubsequences({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countSpecialSubsequences({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.countSpecialSubsequences([0, 1, 1, 1, 2, 1, 1, 0, 2]) == 45\nassert solution.countSpecialSubsequences([2, 1, 2, 1, 2]) == 0\nassert solution.countSpecialSubsequences([1]) == 0\nassert solution.countSpecialSubsequences([2, 1, 1]) == 0\nassert solution.countSpecialSubsequences([2, 2, 0]) == 0\nassert solution.countSpecialSubsequences([2, 1]) == 0\nassert solution.countSpecialSubsequences([1, 2, 0, 1, 1, 1, 0, 0, 2, 0]) == 7\nassert solution.countSpecialSubsequences([0, 1, 0, 2, 1, 1, 1, 0, 0]) == 1\nassert solution.countSpecialSubsequences([2, 2, 2]) == 0\nassert solution.countSpecialSubsequences([0, 1, 0]) == 0\nassert solution.countSpecialSubsequences([2, 0, 0, 1, 2, 2, 0, 0, 2, 0]) == 21\nassert solution.countSpecialSubsequences([1, 1, 0, 0, 2, 0, 1]) == 0\nassert solution.countSpecialSubsequences([1, 1, 0, 2]) == 0\nassert solution.countSpecialSubsequences([1, 2, 2, 0, 2, 2]) == 0\nassert solution.countSpecialSubsequences([2, 2, 1, 2, 0, 1, 0, 1, 0]) == 0\nassert solution.countSpecialSubsequences([2, 2, 2, 0, 2, 2, 0, 2]) == 0\nassert solution.countSpecialSubsequences([0, 2, 0, 2, 0, 1, 1, 0, 0, 1]) == 0\nassert solution.countSpecialSubsequences([2, 1, 1, 2]) == 0\nassert solution.countSpecialSubsequences([2, 1, 0, 2, 0, 1]) == 0\nassert solution.countSpecialSubsequences([2, 2, 0, 1]) == 0\nassert solution.countSpecialSubsequences([0, 0, 1]) == 0\nassert solution.countSpecialSubsequences([2, 0]) == 0\nassert solution.countSpecialSubsequences([0, 2, 0, 1, 2, 1, 2]) == 15\nassert solution.countSpecialSubsequences([1, 0, 0, 1, 2, 1, 2]) == 15\nassert solution.countSpecialSubsequences([2, 1, 1]) == 0\nassert solution.countSpecialSubsequences([2, 2, 2, 0, 1, 2, 2, 2, 0]) == 7\nassert solution.countSpecialSubsequences([1, 0, 1, 2, 1, 0, 0, 0, 1, 1]) == 1\nassert solution.countSpecialSubsequences([1, 0, 1, 0, 1]) == 0\nassert solution.countSpecialSubsequences([0, 2, 2, 1, 1, 2, 0]) == 3\nassert solution.countSpecialSubsequences([0, 1, 1, 2, 2]) == 9\nassert solution.countSpecialSubsequences([2, 0, 2, 0, 2, 2, 2, 0]) == 0\nassert solution.countSpecialSubsequences([1, 1, 0, 2]) == 0\nassert solution.countSpecialSubsequences([1]) == 0\nassert solution.countSpecialSubsequences([1, 0, 1, 0, 0, 0, 2]) == 1\nassert solution.countSpecialSubsequences([2, 2, 2]) == 0\nassert solution.countSpecialSubsequences([2, 1, 0, 2, 0]) == 0\nassert solution.countSpecialSubsequences([0, 2, 2, 0, 0, 0, 1, 1, 1, 1]) == 0\nassert solution.countSpecialSubsequences([1, 0, 0, 0, 1, 1, 0, 1, 1]) == 0\nassert solution.countSpecialSubsequences([0, 0, 1, 1, 2, 0, 0]) == 9\nassert solution.countSpecialSubsequences([2]) == 0\nassert solution.countSpecialSubsequences([1, 0]) == 0\nassert solution.countSpecialSubsequences([1, 0, 1, 0, 2]) == 1\nassert solution.countSpecialSubsequences([2, 1, 2, 0, 0, 1, 2, 1]) == 3\nassert solution.countSpecialSubsequences([1, 1, 2, 1, 2, 2, 1, 2]) == 0\nassert solution.countSpecialSubsequences([1, 1, 2, 1, 0]) == 0\nassert solution.countSpecialSubsequences([2, 1, 1, 2, 0, 1]) == 0\nassert solution.countSpecialSubsequences([0, 2, 0, 0, 1, 2]) == 7\nassert solution.countSpecialSubsequences([0, 2, 1, 1, 1, 2, 0, 2, 1]) == 21\nassert solution.countSpecialSubsequences([1, 0, 2, 2, 2]) == 0\nassert solution.countSpecialSubsequences([0, 0, 0, 1, 1, 2, 0]) == 21\nassert solution.countSpecialSubsequences([0]) == 0\nassert solution.countSpecialSubsequences([0, 0, 1, 0, 1, 0, 1, 2, 2]) == 123\nassert solution.countSpecialSubsequences([0, 2, 0, 1, 0, 2, 1, 1, 2, 0]) == 39\nassert solution.countSpecialSubsequences([0, 0, 1, 1, 0, 2]) == 9\nassert solution.countSpecialSubsequences([1, 0, 1, 2, 0, 0, 1, 2, 0]) == 11\nassert solution.countSpecialSubsequences([2, 0]) == 0\nassert solution.countSpecialSubsequences([2, 2, 0, 1, 2]) == 1\nassert solution.countSpecialSubsequences([1, 1]) == 0\nassert solution.countSpecialSubsequences([0, 1, 2, 0]) == 1\nassert solution.countSpecialSubsequences([2, 0, 2, 1, 2, 2, 1, 1]) == 3\nassert solution.countSpecialSubsequences([2, 2, 2, 2, 1]) == 0\nassert solution.countSpecialSubsequences([2, 0]) == 0\nassert solution.countSpecialSubsequences([2, 0, 0, 2, 1, 2, 0, 0]) == 3\nassert solution.countSpecialSubsequences([2, 2, 2, 2, 2, 0]) == 0\nassert solution.countSpecialSubsequences([2, 0, 2, 0, 1, 0, 0, 0]) == 0\nassert solution.countSpecialSubsequences([0, 0, 0, 1, 2, 1, 1]) == 7\nassert solution.countSpecialSubsequences([2, 0, 2, 1, 0, 1, 0]) == 0\nassert solution.countSpecialSubsequences([0, 2, 0]) == 0\nassert solution.countSpecialSubsequences([2, 1, 2, 0, 2]) == 0\nassert solution.countSpecialSubsequences([2, 2, 2, 0, 1, 2, 1, 0, 2, 0]) == 5\nassert solution.countSpecialSubsequences([0, 2]) == 0\nassert solution.countSpecialSubsequences([0, 1, 0, 2, 0]) == 1\nassert solution.countSpecialSubsequences([1, 1, 0, 0, 1, 2, 2, 1, 0]) == 9\nassert solution.countSpecialSubsequences([0, 2]) == 0\nassert solution.countSpecialSubsequences([0]) == 0\nassert solution.countSpecialSubsequences([0, 2]) == 0\nassert solution.countSpecialSubsequences([1, 0, 2, 0, 0, 1, 2]) == 7\nassert solution.countSpecialSubsequences([0, 1]) == 0\nassert solution.countSpecialSubsequences([1, 0, 2, 0, 0, 1, 2, 1, 0]) == 7\nassert solution.countSpecialSubsequences([2, 1, 2, 0, 0, 0, 1]) == 0\nassert solution.countSpecialSubsequences([0]) == 0\nassert solution.countSpecialSubsequences([0, 2, 2, 1, 1, 1, 2]) == 7\nassert solution.countSpecialSubsequences([1, 1, 1, 0, 2]) == 0\nassert solution.countSpecialSubsequences([0, 0, 1, 0, 1, 0, 2, 1]) == 13\nassert solution.countSpecialSubsequences([0, 2, 1, 1, 0]) == 0\nassert solution.countSpecialSubsequences([0, 2, 1, 2, 1, 1, 1, 2, 0, 0]) == 17\nassert solution.countSpecialSubsequences([1, 2, 2]) == 0\nassert solution.countSpecialSubsequences([1, 2, 2, 2, 1, 1, 2, 0]) == 0\nassert solution.countSpecialSubsequences([2]) == 0\nassert solution.countSpecialSubsequences([2, 0]) == 0\nassert solution.countSpecialSubsequences([1]) == 0\nassert solution.countSpecialSubsequences([2, 0, 2, 1, 1, 2, 2]) == 9\nassert solution.countSpecialSubsequences([2]) == 0\nassert solution.countSpecialSubsequences([2, 1, 1, 2, 1, 1, 0, 2, 2]) == 0\nassert solution.countSpecialSubsequences([1, 0]) == 0\nassert solution.countSpecialSubsequences([1, 2, 0, 2, 0, 2]) == 0\nassert solution.countSpecialSubsequences([2, 2, 1, 2]) == 0\nassert solution.countSpecialSubsequences([1, 0, 0, 0, 0, 0, 0, 2, 1]) == 0\nassert solution.countSpecialSubsequences([1, 0, 2, 1, 0]) == 0\nassert solution.countSpecialSubsequences([1, 1, 1, 0, 1, 1]) == 0",
  "inefficient_solution": "class Solution:\n    def countSpecialSubsequences(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(nums)\n        dp = [[[] for _ in range(3)] for _ in range(n)]\n        for i in range(n):\n            for j in range(3):\n                dp[i][j] = [0] * 10\n        for i in range(n):\n            dp[i][0][0] = 1 if nums[i] == 0 else 0\n        for i in range(1, n):\n            for j in range(3):\n                for k in range(len(dp[i-1][j])):\n                    dp[i][j][k] = 0\n            for j in range(3):\n                if nums[i] == 0:\n                    dp[i][0][0] = (2 * dp[i-1][0][0] + dp[i-1][0][0]) % mod\n                elif nums[i] == 1:\n                    dp[i][1][0] = (dp[i-1][0][0] + 2 * dp[i-1][1][0]) % mod\n                else:\n                    dp[i][2][0] = (dp[i-1][1][0] + 2 * dp[i-1][2][0]) % mod\n        ans = 0\n        for i in range(n):\n            for j in range(3):\n                ans = (ans + dp[n-1][j][0]) % mod\n        return ans",
  "is_python": true
}