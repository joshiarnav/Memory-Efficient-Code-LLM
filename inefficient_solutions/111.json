{
  "problem_idx": 111,
  "task_name": "Minimum Depth of Binary Tree",
  "markdown_description": "\nGiven a binary tree, find its minimum depth.\n\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n\n**Note:**\u00a0A leaf is a node with no children.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0111.Minimum%20Depth%20of%20Binary%20Tree/images/ex_depth.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** 2\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [2,null,3,null,4,null,5,null,6]\n**Output:** 5\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 105]`.\n* `-1000 <= Node.val <= 1000`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        if root.left is None:\n            return 1 + self.minDepth(root.right)\n        if root.right is None:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))\n",
  "test_case_generator": "\nimport random\nfrom typing import Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        if root.left is None:\n            return 1 + self.minDepth(root.right)\n        if root.right is None:\n            return 1 + self.minDepth(root.left)\n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random binary tree (represented as a list)\n    tree = generate_tree()\n    \n    # Convert the list to actual tree structure\n    root = create_tree(tree)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minDepth(root)\n    \n    return tree, expected_result\n\ndef generate_tree():\n    # Randomly generate the number of nodes in the tree\n    num_nodes = random.randint(0, 10)\n    \n    # Generate the values of the nodes\n    values = [random.randint(-1000, 1000) for _ in range(num_nodes)]\n    \n    # Generate the structure of the tree\n    tree = [None] * (len(values) * 2)\n    \n    # Assign the values to the tree nodes\n    for i, val in enumerate(values):\n        tree[i * 2] = val\n    \n    return tree\n\ndef create_tree(tree):\n    nodes = {}\n    root = None\n    \n    # Create tree nodes\n    for i, val in enumerate(tree):\n        if val is not None:\n            node = TreeNode(val)\n            nodes[i] = node\n            if i == 0:\n                root = node\n    \n    # Connect tree nodes\n    for i, val in enumerate(tree):\n        if val is not None:\n            node = nodes[i]\n            if i * 2 + 1 in nodes:\n                node.left = nodes[i * 2 + 1]\n            if i * 2 + 2 in nodes:\n                node.right = nodes[i * 2 + 2]\n    \n    return root\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tree, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minDepth(create_tree(tree)) == expected_result\n        test_case_generator_results.append(f\"assert solution.minDepth(create_tree({tree})) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([8, None])) == 1\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([969, None])) == 1\nassert solution.minDepth(create_tree([628, None, 466, None, 759, None, 318, None, -359, None, -767, None, 408, None, 875, None])) == 4\nassert solution.minDepth(create_tree([324, None])) == 1\nassert solution.minDepth(create_tree([515, None, 325, None, 272, None, -988, None, -317, None])) == 3\nassert solution.minDepth(create_tree([-929, None, 457, None, 443, None, 4, None, 249, None, -665, None])) == 3\nassert solution.minDepth(create_tree([893, None, -526, None, -613, None, -919, None, 308, None, 162, None])) == 3\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([-919, None, 143, None, -333, None])) == 2\nassert solution.minDepth(create_tree([-367, None, -254, None])) == 2\nassert solution.minDepth(create_tree([-973, None, -226, None, 273, None, -119, None, 608, None, -840, None, -6, None, 199, None])) == 4\nassert solution.minDepth(create_tree([60, None])) == 1\nassert solution.minDepth(create_tree([-470, None, -160, None, 38, None, -271, None, 354, None, -731, None, 504, None, -128, None])) == 4\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([-609, None, 533, None, 566, None, -739, None, -212, None, -706, None, 814, None])) == 3\nassert solution.minDepth(create_tree([606, None, -887, None, 931, None])) == 2\nassert solution.minDepth(create_tree([773, None, -621, None, 86, None, 610, None, -255, None, 866, None])) == 3\nassert solution.minDepth(create_tree([315, None, -553, None, -747, None, -483, None, -539, None, -483, None, -697, None, -423, None])) == 4\nassert solution.minDepth(create_tree([-194, None, -996, None, 121, None, -478, None, -817, None, 634, None, 335, None])) == 3\nassert solution.minDepth(create_tree([-968, None, -448, None, 700, None, 252, None, -469, None, -975, None, 97, None, 756, None, 471, None])) == 4\nassert solution.minDepth(create_tree([86, None, -167, None, -85, None, 521, None, 151, None, 366, None])) == 3\nassert solution.minDepth(create_tree([691, None, -676, None])) == 2\nassert solution.minDepth(create_tree([-509, None, -34, None])) == 2\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([681, None, -809, None, -691, None, 806, None, -426, None, -610, None])) == 3\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([812, None, -460, None, -776, None, -797, None, -591, None, -459, None, 39, None, 15, None, -708, None])) == 4\nassert solution.minDepth(create_tree([-224, None, -259, None, -918, None])) == 2\nassert solution.minDepth(create_tree([320, None, 661, None, -766, None, 805, None, -632, None, 131, None])) == 3\nassert solution.minDepth(create_tree([231, None, -815, None, -243, None, 528, None, -748, None])) == 3\nassert solution.minDepth(create_tree([227, None, -956, None])) == 2\nassert solution.minDepth(create_tree([-119, None, -240, None, -195, None, -897, None, 108, None, 188, None, 492, None, 802, None, 548, None, 446, None])) == 4\nassert solution.minDepth(create_tree([-307, None, -190, None, -66, None, -15, None, 466, None, 472, None, -965, None, 816, None, 364, None])) == 4\nassert solution.minDepth(create_tree([-437, None])) == 1\nassert solution.minDepth(create_tree([694, None, -72, None, 172, None, 648, None, -797, None, -488, None, -945, None])) == 3\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([63, None, -276, None, -422, None])) == 2\nassert solution.minDepth(create_tree([454, None])) == 1\nassert solution.minDepth(create_tree([-122, None, -37, None, -937, None, 315, None, 827, None, 0, None, 69, None, -812, None])) == 4\nassert solution.minDepth(create_tree([697, None, -234, None, -295, None, -450, None, -103, None, -100, None, -546, None, -448, None, -138, None, 981, None])) == 4\nassert solution.minDepth(create_tree([-174, None, -951, None])) == 2\nassert solution.minDepth(create_tree([803, None, 943, None, -641, None, -304, None, 140, None, 871, None, -265, None, 961, None, 401, None])) == 4\nassert solution.minDepth(create_tree([814, None, 78, None, -637, None, 658, None, -510, None, 883, None, 208, None])) == 3\nassert solution.minDepth(create_tree([344, None, 382, None, 631, None, 804, None, -311, None])) == 3\nassert solution.minDepth(create_tree([-574, None, -261, None, -825, None, 934, None])) == 3\nassert solution.minDepth(create_tree([165, None, -835, None, -730, None, 318, None, 136, None, -91, None, -315, None, 999, None])) == 4\nassert solution.minDepth(create_tree([988, None])) == 1\nassert solution.minDepth(create_tree([-317, None, -364, None, 898, None, 423, None, 743, None, -430, None, -661, None, 757, None, 403, None])) == 4\nassert solution.minDepth(create_tree([258, None])) == 1\nassert solution.minDepth(create_tree([968, None, -127, None, -281, None, -775, None, -925, None, -491, None, -299, None, -623, None])) == 4\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([-143, None, -674, None, 482, None, -691, None, 938, None, -466, None, 418, None, -496, None, 237, None, 454, None])) == 4\nassert solution.minDepth(create_tree([496, None, 839, None, 717, None, -147, None, 696, None, 775, None, 137, None, 506, None])) == 4\nassert solution.minDepth(create_tree([-88, None, 400, None])) == 2\nassert solution.minDepth(create_tree([290, None, -645, None, 250, None, -379, None])) == 3\nassert solution.minDepth(create_tree([-619, None, 574, None, -101, None, 552, None, -955, None])) == 3\nassert solution.minDepth(create_tree([-935, None, 690, None, 28, None, 710, None, 810, None, 414, None, 179, None])) == 3\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([-167, None, -114, None, 515, None, -11, None, 934, None, 475, None])) == 3\nassert solution.minDepth(create_tree([672, None])) == 1\nassert solution.minDepth(create_tree([-854, None, 501, None, 775, None])) == 2\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([66, None, 713, None, 778, None, 724, None, -97, None])) == 3\nassert solution.minDepth(create_tree([213, None, -372, None, 725, None, 293, None, -661, None, -863, None, -517, None, 568, None])) == 4\nassert solution.minDepth(create_tree([-284, None, 711, None, -371, None, 731, None, 567, None, 184, None, 633, None, -154, None, 627, None, -936, None])) == 4\nassert solution.minDepth(create_tree([-795, None, 844, None, 799, None, 934, None, 945, None])) == 3\nassert solution.minDepth(create_tree([51, None, -664, None, -959, None, 859, None, 49, None, 107, None, -553, None, 306, None])) == 4\nassert solution.minDepth(create_tree([-77, None])) == 1\nassert solution.minDepth(create_tree([904, None, -193, None, -66, None])) == 2\nassert solution.minDepth(create_tree([207, None, -144, None, 769, None, -903, None])) == 3\nassert solution.minDepth(create_tree([-518, None, -246, None, -529, None, 972, None, -854, None, -344, None])) == 3\nassert solution.minDepth(create_tree([-424, None, 371, None, 612, None])) == 2\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([602, None, 461, None, -136, None, 728, None, 775, None, -987, None, 935, None, 561, None, -756, None, -212, None])) == 4\nassert solution.minDepth(create_tree([-266, None, -925, None, -289, None, -706, None, 701, None])) == 3\nassert solution.minDepth(create_tree([287, None, -515, None])) == 2\nassert solution.minDepth(create_tree([-617, None, 886, None, -471, None])) == 2\nassert solution.minDepth(create_tree([74, None, 185, None])) == 2\nassert solution.minDepth(create_tree([533, None, 373, None, -267, None, 435, None, -614, None, -615, None, -722, None, -57, None])) == 4\nassert solution.minDepth(create_tree([733, None, 632, None, 693, None])) == 2\nassert solution.minDepth(create_tree([150, None, 111, None, 412, None, 548, None, -550, None, -525, None, 728, None])) == 3\nassert solution.minDepth(create_tree([-397, None, -14, None, 791, None, 765, None])) == 3\nassert solution.minDepth(create_tree([-645, None, -174, None, 661, None, -836, None, -278, None, 212, None, -583, None, 676, None, -771, None])) == 4\nassert solution.minDepth(create_tree([591, None, -866, None, 908, None, -794, None, 727, None, 47, None, 145, None])) == 3\nassert solution.minDepth(create_tree([812, None, -383, None, 31, None, 159, None, -260, None, 265, None, 408, None, -763, None, 959, None, -250, None])) == 4\nassert solution.minDepth(create_tree([110, None, 349, None, 662, None, -495, None, -638, None, 17, None, 409, None, 360, None, 397, None, -72, None])) == 4\nassert solution.minDepth(create_tree([-825, None, -977, None, 84, None, 69, None, -643, None, -794, None, 61, None, -17, None])) == 4\nassert solution.minDepth(create_tree([698, None, 173, None, -304, None, -192, None, 632, None])) == 3\nassert solution.minDepth(create_tree([785, None, 367, None, -65, None, -389, None])) == 3\nassert solution.minDepth(create_tree([268, None])) == 1\nassert solution.minDepth(create_tree([-448, None, -441, None])) == 2\nassert solution.minDepth(create_tree([898, None, 819, None, 841, None, 837, None, 180, None])) == 3\nassert solution.minDepth(create_tree([-118, None])) == 1\nassert solution.minDepth(create_tree([-6, None, -269, None, -915, None, -128, None, 340, None, -43, None, 126, None])) == 3\nassert solution.minDepth(create_tree([])) == 0\nassert solution.minDepth(create_tree([-842, None, 516, None, 61, None, 624, None, 579, None, -943, None, -496, None, -275, None, 573, None])) == 4\nassert solution.minDepth(create_tree([510, None, -675, None, -392, None, 827, None, 914, None, -910, None])) == 3\nassert solution.minDepth(create_tree([347, None])) == 1",
  "inefficient_solution": "class Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        if root is None:\n            return 0\n        if root.left is None and root.right is None:\n            return 1\n        if root.left is None:\n            left_depth = 2000000\n            for node in self.depth_first_search(root.right):\n                left_depth = min(left_depth, self.minDepth(node))\n            return 1 + left_depth\n        if root.right is None:\n            right_depth = 2000000\n            for node in self.depth_first_search(root.left):\n                right_depth = min(right_depth, self.minDepth(node))\n            return 1 + right_depth\n        left_depth = 2000000\n        right_depth = 2000000\n        for node in self.depth_first_search(root.left):\n            left_depth = min(left_depth, self.minDepth(node))\n        for node in self.depth_first_search(root.right):\n            right_depth = min(right_depth, self.minDepth(node))\n        return 1 + min(left_depth, right_depth)\n\n    def depth_first_search(self, node):\n        nodes_to_visit = []\n        nodes_to_visit.append(node)\n        while nodes_to_visit:\n            current_node = nodes_to_visit.pop(0)\n            yield current_node\n            if current_node.left:\n                nodes_to_visit.append(current_node.left)\n            if current_node.right:\n                nodes_to_visit.append(current_node.right)",
  "is_python": true
}