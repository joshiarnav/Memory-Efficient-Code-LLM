{
  "problem_idx": 1927,
  "task_name": "Sum Game",
  "markdown_description": "\nAlice and Bob take turns playing a game, with **Alice****starting first**.\n\n\nYou are given a string `num` of **even length** consisting of digits and `'?'` characters. On each turn, a player will do the following if there is still at least one `'?'` in `num`:\n\n\n1. Choose an index `i` where `num[i] == '?'`.\n2. Replace `num[i]` with any digit between `'0'` and `'9'`.\n\n\nThe game ends when there are no more `'?'` characters in `num`.\n\n\nFor Bob\u00a0to win, the sum of the digits in the first half of `num` must be **equal** to the sum of the digits in the second half. For Alice\u00a0to win, the sums must **not be equal**.\n\n\n* For example, if the game ended with `num = \"243801\"`, then Bob\u00a0wins because `2+4+3 = 8+0+1`. If the game ended with `num = \"243803\"`, then Alice\u00a0wins because `2+4+3 != 8+0+3`.\n\n\nAssuming Alice and Bob play **optimally**, return `true` *if Alice will win and* `false` *if Bob will win*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"5023\"\n**Output:** false\n**Explanation:** There are no moves to be made.\nThe sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"25??\"\n**Output:** true\n**Explanation:** Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"?3295???\"\n**Output:** false\n**Explanation:** It can be proven that Bob will always win. One possible outcome is:\n- Alice replaces the first '?' with '9'. num = \"93295???\".\n- Bob replaces one of the '?' in the right half with '9'. num = \"932959??\".\n- Alice replaces one of the '?' in the right half with '2'. num = \"9329592?\".\n- Bob replaces the last '?' in the right half with '7'. num = \"93295927\".\nBob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= num.length <= 105`\n* `num.length` is **even**.\n* `num` consists of only digits and `'?'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def sumGame(self, num: str) -> bool:\n        n = len(num)\n        cnt1 = num[: n // 2].count(\"?\")\n        cnt2 = num[n // 2 :].count(\"?\")\n        s1 = sum(int(x) for x in num[: n // 2] if x != \"?\")\n        s2 = sum(int(x) for x in num[n // 2 :] if x != \"?\")\n        return (cnt1 + cnt2) % 2 == 1 or s1 - s2 != 9 * (cnt2 - cnt1) // 2\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def sumGame(self, num: str) -> bool:\n        n = len(num)\n        cnt1 = num[: n // 2].count(\"?\")\n        cnt2 = num[n // 2 :].count(\"?\")\n        s1 = sum(int(x) for x in num[: n // 2] if x != \"?\")\n        s2 = sum(int(x) for x in num[n // 2 :] if x != \"?\")\n        return (cnt1 + cnt2) % 2 == 1 or s1 - s2 != 9 * (cnt2 - cnt1) // 2\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    num_length = random.randint(2, 10)\n    num = \"\"\n    for _ in range(num_length):\n        num += str(random.randint(0, 9) if random.randint(0, 1) else \"?\")\n    \n    expected_result = solution.sumGame(num)\n\n    return num, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sumGame(num) == expected_result\n        print(f\"assert solution.sumGame('{num}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.sumGame('{num}') == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sumGame('5998?43?') == True\nassert solution.sumGame('??2?4') == True\nassert solution.sumGame('?480') == True\nassert solution.sumGame('??53?7??') == True\nassert solution.sumGame('?6?5?1?6') == True\nassert solution.sumGame('72') == True\nassert solution.sumGame('2??') == True\nassert solution.sumGame('?9818') == True\nassert solution.sumGame('??90??') == True\nassert solution.sumGame('?1576?') == True\nassert solution.sumGame('?338?3??') == True\nassert solution.sumGame('4??5?57?4?') == True\nassert solution.sumGame('387') == True\nassert solution.sumGame('?9?4') == True\nassert solution.sumGame('33') == False\nassert solution.sumGame('??3') == True\nassert solution.sumGame('6???220') == True\nassert solution.sumGame('????9???') == True\nassert solution.sumGame('??8?772?') == True\nassert solution.sumGame('38??5') == True\nassert solution.sumGame('?667???8?') == True\nassert solution.sumGame('?21?3?1?3?') == True\nassert solution.sumGame('?7?965?1') == True\nassert solution.sumGame('?49???6') == True\nassert solution.sumGame('4?0?1?39') == True\nassert solution.sumGame('8??') == True\nassert solution.sumGame('65?45') == True\nassert solution.sumGame('?9?08301??') == True\nassert solution.sumGame('?7?2?') == True\nassert solution.sumGame('7?00807?') == True\nassert solution.sumGame('?6') == True\nassert solution.sumGame('???????') == True\nassert solution.sumGame('11???') == True\nassert solution.sumGame('??6') == True\nassert solution.sumGame('???????2?') == True\nassert solution.sumGame('?62') == True\nassert solution.sumGame('?3?') == True\nassert solution.sumGame('?62?8?') == True\nassert solution.sumGame('??2?90') == True\nassert solution.sumGame('?9?1220??2') == True\nassert solution.sumGame('3?3?2') == True\nassert solution.sumGame('???2?') == True\nassert solution.sumGame('2?2243??') == True\nassert solution.sumGame('52') == True\nassert solution.sumGame('??00?') == True\nassert solution.sumGame('37??9??6??') == True\nassert solution.sumGame('???') == True\nassert solution.sumGame('49??') == True\nassert solution.sumGame('?759?85?1') == True\nassert solution.sumGame('82?5') == True\nassert solution.sumGame('?07') == True\nassert solution.sumGame('1???6') == True\nassert solution.sumGame('7????656') == True\nassert solution.sumGame('?5?67') == True\nassert solution.sumGame('648?5??6?6') == True\nassert solution.sumGame('13?5?0?37?') == True\nassert solution.sumGame('????5?5') == True\nassert solution.sumGame('1??1???212') == True\nassert solution.sumGame('21010?77') == True\nassert solution.sumGame('?239???5?') == True\nassert solution.sumGame('4?3?55?3??') == True\nassert solution.sumGame('20????') == True\nassert solution.sumGame('??0802') == True\nassert solution.sumGame('?8??') == True\nassert solution.sumGame('??72?7') == True\nassert solution.sumGame('???0?307') == True\nassert solution.sumGame('35??7?4') == True\nassert solution.sumGame('8692?') == True\nassert solution.sumGame('166?8') == True\nassert solution.sumGame('?10??') == True\nassert solution.sumGame('?6??') == True\nassert solution.sumGame('21?') == True\nassert solution.sumGame('??4???4?0') == False\nassert solution.sumGame('?03??') == True\nassert solution.sumGame('6???315') == True\nassert solution.sumGame('?3???24?') == True\nassert solution.sumGame('8??656??') == True\nassert solution.sumGame('???') == True\nassert solution.sumGame('?9509') == True\nassert solution.sumGame('???') == True\nassert solution.sumGame('??') == False\nassert solution.sumGame('???9?') == True\nassert solution.sumGame('8?558??') == True\nassert solution.sumGame('?75???????') == True\nassert solution.sumGame('??????69??') == True\nassert solution.sumGame('?4?5') == True\nassert solution.sumGame('?2??') == True\nassert solution.sumGame('?4') == True\nassert solution.sumGame('???7?8666') == True\nassert solution.sumGame('?1?437???') == True\nassert solution.sumGame('30?') == True\nassert solution.sumGame('?550?0??54') == True\nassert solution.sumGame('???56?') == True\nassert solution.sumGame('725?4') == True\nassert solution.sumGame('853?45?44?') == True\nassert solution.sumGame('?69????') == True\nassert solution.sumGame('3??27?') == True\nassert solution.sumGame('3??43?') == True\nassert solution.sumGame('?1') == True\nassert solution.sumGame('?1??85?5?') == True",
  "inefficient_solution": "class Solution:\n    def sumGame(self, num: str) -> bool:\n        n = len(num)\n        case1 = [num[i] for i in range(n) if i < n // 2 and num[i] == \"?\"]\n        case2 = [num[i] for i in range(n) if i >= n // 2 and num[i] == \"?\"]\n        case3 = [int(x) for x in num[:n // 2] if x != \"?\"]\n        case4 = [int(x) for x in num[n // 2:] if x != \"?\"]\n        case5 = num[:n // 2]\n        case6 = num[n // 2:]\n        case7 = [0] * 10\n        case8 = [0] * 10\n        for x in case3:\n            case7[int(x)] += 1\n        for x in case4:\n            case8[int(x)] += 1\n        return (len(case1) + len(case2)) % 2 == 1 or sum(case7) - sum(case8) != 9 * (len(case2) - len(case1)) // 2",
  "is_python": true
}