{
  "problem_idx": 2537,
  "task_name": "Count the Number of Good Subarrays",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, return *the number of **good** subarrays of* `nums`.\n\n\nA subarray `arr` is **good** if it there are **at least** `k` pairs of indices `(i, j)` such that `i < j` and `arr[i] == arr[j]`.\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1,1], k = 10\n**Output:** 1\n**Explanation:** The only good subarray is the array nums itself.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,1,4,3,2,2,4], k = 2\n**Output:** 4\n**Explanation:** There are 4 different good subarrays:\n- [3,1,4,3,2,2] that has 2 pairs.\n- [3,1,4,3,2,2,4] that has 3 pairs.\n- [1,4,3,2,2,4] that has 2 pairs.\n- [4,3,2,2,4] that has 2 pairs.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i], k <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def countGood(self, nums: List[int], k: int) -> int:\n        cnt = Counter()\n        ans = cur = 0\n        i = 0\n        for x in nums:\n            cur += cnt[x]\n            cnt[x] += 1\n            while cur - cnt[nums[i]] + 1 >= k:\n                cnt[nums[i]] -= 1\n                cur -= cnt[nums[i]]\n                i += 1\n            if cur >= k:\n                ans += i + 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def countGood(self, nums: List[int], k: int) -> int:\n        cnt = Counter()\n        ans = cur = 0\n        i = 0\n        for x in nums:\n            cur += cnt[x]\n            cnt[x] += 1\n            while cur - cnt[nums[i]] + 1 >= k:\n                cnt[nums[i]] -= 1\n                cur -= cnt[nums[i]]\n                i += 1\n            if cur >= k:\n                ans += i + 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Generate a random value for k\n    k = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countGood(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countGood(nums, k) == expected_result\n        print(f\"assert solution.countGood({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countGood({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countGood([66, 26, 89, 93, 4, 95, 83, 94, 57], 6) == 0\nassert solution.countGood([80], 38) == 0\nassert solution.countGood([78], 88) == 0\nassert solution.countGood([33, 20, 23, 100, 62, 22, 12], 84) == 0\nassert solution.countGood([27], 9) == 0\nassert solution.countGood([29, 2, 27, 39, 16], 58) == 0\nassert solution.countGood([54, 79, 28, 30, 88, 48], 101) == 0\nassert solution.countGood([20, 60, 58, 55, 43, 86], 22) == 0\nassert solution.countGood([8, 85, 94, 6, 98, 60, 23, 52, 41], 92) == 0\nassert solution.countGood([36, 93, 65, 22, 9, 84, 39, 30, 86, 52], 6) == 0\nassert solution.countGood([13, 68, 23, 14, 51, 41], 58) == 0\nassert solution.countGood([50, 6, 34, 95, 70, 98, 56, 9], 81) == 0\nassert solution.countGood([76], 86) == 0\nassert solution.countGood([30, 64, 51, 50, 29, 85], 18) == 0\nassert solution.countGood([62, 84, 55, 34, 74, 12, 67, 30], 101) == 0\nassert solution.countGood([26, 24, 68, 2, 80, 20, 4, 13, 88], 53) == 0\nassert solution.countGood([60], 34) == 0\nassert solution.countGood([73, 81, 1, 84], 11) == 0\nassert solution.countGood([59, 49, 33], 92) == 0\nassert solution.countGood([19, 78, 21, 17, 38, 83], 34) == 0\nassert solution.countGood([41, 61, 60], 30) == 0\nassert solution.countGood([3, 31, 16, 73, 65], 2) == 0\nassert solution.countGood([54, 66, 6], 23) == 0\nassert solution.countGood([60, 49, 25, 43], 43) == 0\nassert solution.countGood([12, 43, 53, 26], 82) == 0\nassert solution.countGood([39, 89, 20, 24, 50, 36, 78], 71) == 0\nassert solution.countGood([66, 9, 41, 61, 6], 81) == 0\nassert solution.countGood([33, 47, 22, 49, 41], 82) == 0\nassert solution.countGood([11, 95, 93, 24, 42, 67], 65) == 0\nassert solution.countGood([56, 76, 92, 60, 41, 16, 50, 91, 100], 62) == 0\nassert solution.countGood([76, 34, 69, 46, 64, 81], 89) == 0\nassert solution.countGood([26, 47, 63, 14, 51, 4, 32], 50) == 0\nassert solution.countGood([65, 14], 38) == 0\nassert solution.countGood([70, 61], 25) == 0\nassert solution.countGood([28, 72, 7, 11], 38) == 0\nassert solution.countGood([6, 68, 32, 87, 15, 18, 19], 61) == 0\nassert solution.countGood([55, 5, 92, 6], 27) == 0\nassert solution.countGood([46], 3) == 0\nassert solution.countGood([68, 18, 14, 59, 75, 21, 40], 22) == 0\nassert solution.countGood([59, 38, 56, 98, 61, 37, 58], 66) == 0\nassert solution.countGood([37, 43, 39, 83, 9], 78) == 0\nassert solution.countGood([100], 79) == 0\nassert solution.countGood([40, 22, 94, 86, 56, 12, 78], 37) == 0\nassert solution.countGood([58, 26, 89, 30, 33, 90, 74, 27, 3], 55) == 0\nassert solution.countGood([97, 61, 83, 53], 21) == 0\nassert solution.countGood([93, 45, 55, 12, 84, 82, 75, 41, 5, 96], 54) == 0\nassert solution.countGood([76, 36, 11, 98, 51, 87, 99, 8, 73, 32], 99) == 0\nassert solution.countGood([97, 5, 33, 85, 53, 19, 74], 49) == 0\nassert solution.countGood([28], 85) == 0\nassert solution.countGood([92, 12, 63, 98, 64, 18], 49) == 0\nassert solution.countGood([81, 66, 69, 77, 52], 64) == 0\nassert solution.countGood([79], 65) == 0\nassert solution.countGood([75, 11, 53, 80, 21, 88, 40, 44, 17], 53) == 0\nassert solution.countGood([49], 91) == 0\nassert solution.countGood([100, 15, 25, 94, 45, 70], 94) == 0\nassert solution.countGood([47, 82, 91, 98, 23, 21, 43, 46, 30, 67], 92) == 0\nassert solution.countGood([99, 20, 89, 56, 92, 53, 32], 87) == 0\nassert solution.countGood([49, 78], 20) == 0\nassert solution.countGood([78], 51) == 0\nassert solution.countGood([63, 99, 4], 33) == 0\nassert solution.countGood([5, 48, 37, 57, 9, 6, 78, 14], 68) == 0\nassert solution.countGood([12, 42, 60, 41], 53) == 0\nassert solution.countGood([19, 99, 97], 49) == 0\nassert solution.countGood([96, 32, 87, 34, 64, 89, 100, 50, 83], 66) == 0\nassert solution.countGood([37, 7, 68, 17], 27) == 0\nassert solution.countGood([44, 57, 69, 39], 89) == 0\nassert solution.countGood([24], 52) == 0\nassert solution.countGood([5, 74, 33, 63, 84, 72, 90], 80) == 0\nassert solution.countGood([86, 55, 66, 42], 21) == 0\nassert solution.countGood([83, 6, 90], 63) == 0\nassert solution.countGood([42, 95, 21, 71, 38, 33], 86) == 0\nassert solution.countGood([29, 17, 38, 79, 2, 23, 58], 41) == 0\nassert solution.countGood([32, 79, 91, 48, 96, 16, 24, 7], 28) == 0\nassert solution.countGood([78, 50], 42) == 0\nassert solution.countGood([29, 52, 48], 55) == 0\nassert solution.countGood([42, 77, 81], 34) == 0\nassert solution.countGood([25, 20, 69, 4, 65], 31) == 0\nassert solution.countGood([99, 84, 51, 67, 86, 10, 1, 30, 56, 76], 92) == 0\nassert solution.countGood([93, 51, 84, 79, 34, 98, 26], 16) == 0\nassert solution.countGood([86, 37, 49, 34, 35, 15, 47, 53, 97], 95) == 0\nassert solution.countGood([62, 81], 81) == 0\nassert solution.countGood([94, 63, 35], 68) == 0\nassert solution.countGood([78, 72, 31, 80, 82, 64, 54, 36, 20], 51) == 0\nassert solution.countGood([24, 9, 50], 85) == 0\nassert solution.countGood([19, 3], 46) == 0\nassert solution.countGood([14, 34], 37) == 0\nassert solution.countGood([58, 31, 20, 36, 1, 29], 93) == 0\nassert solution.countGood([91, 18, 54, 42], 27) == 0\nassert solution.countGood([97, 88], 30) == 0\nassert solution.countGood([8, 51], 15) == 0\nassert solution.countGood([42, 44, 57, 12, 19, 76, 100, 84], 22) == 0\nassert solution.countGood([39, 86, 43, 77, 24, 74], 48) == 0\nassert solution.countGood([79], 19) == 0\nassert solution.countGood([16, 52, 68, 10, 56, 38, 32, 36, 63], 100) == 0\nassert solution.countGood([17, 100, 9, 37, 47], 77) == 0\nassert solution.countGood([19, 84, 66, 78, 18, 5, 13, 74, 32, 42], 101) == 0\nassert solution.countGood([40, 96, 37, 97, 9, 50, 48], 5) == 0\nassert solution.countGood([61, 27, 88], 81) == 0\nassert solution.countGood([47, 75, 74, 93, 39, 51, 46], 77) == 0\nassert solution.countGood([86, 69, 50, 11, 38, 64, 28, 67, 2], 13) == 0",
  "inefficient_solution": "class Solution:\n    def countGood(self, nums: List[int], k: int) -> int:\n        if len(nums) == 0:\n            return 0\n        \n        freq_map = {}\n        ans = 0\n        i = 0\n        for j in range(len(nums)):\n            if nums[j] not in freq_map:\n                freq_map[nums[j]] = 0\n            freq_map[nums[j]] += 1\n            \n            while (j - i + 1 >= k):\n                if nums[i] not in freq_map:\n                    freq_map[nums[i]] = 0\n                freq_map[nums[i]] -= 1\n                i += 1\n                \n                if freq_map[nums[i]] == 0:\n                    del freq_map[nums[i]]\n            \n            if j - i + 1 >= k:\n                subarr_count = {num: 0 for num in set(nums[i:j+1])}\n                for num in nums[i:j+1]:\n                    subarr_count[num] += 1\n                if any(count >= k for count in subarr_count.values()):\n                    ans += 1\n        \n        return ans",
  "is_python": true
}