{
  "problem_idx": 1215,
  "task_name": "Stepping Numbers",
  "markdown_description": "\nA **stepping number** is an integer such that all of its adjacent digits have an absolute difference of exactly `1`.\n\n\n* For example, `321` is a **stepping number** while `421` is not.\n\n\nGiven two integers `low` and `high`, return *a sorted list of all the **stepping numbers** in the inclusive range* `[low, high]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** low = 0, high = 21\n**Output:** [0,1,2,3,4,5,6,7,8,9,10,12,21]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** low = 10, high = 15\n**Output:** [10,12]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= low <= high <= 2 * 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def countSteppingNumbers(self, low: int, high: int) -> List[int]:\n        ans = []\n        if low == 0:\n            ans.append(0)\n        q = deque(range(1, 10))\n        while q:\n            v = q.popleft()\n            if v > high:\n                break\n            if v >= low:\n                ans.append(v)\n            x = v % 10\n            if x:\n                q.append(v * 10 + x - 1)\n            if x < 9:\n                q.append(v * 10 + x + 1)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countSteppingNumbers(self, low, high):\n        ans = []\n        if low == 0:\n            ans.append(0)\n        q = deque(range(1, 10))\n        while q:\n            v = q.popleft()\n            if v > high:\n                break\n            if v >= low:\n                ans.append(v)\n            x = v % 10\n            if x:\n                q.append(v * 10 + x - 1)\n            if x < 9:\n                q.append(v * 10 + x + 1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random low and high values\n    low = random.randint(0, 100)\n    high = random.randint(low, 200)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countSteppingNumbers(low, high)\n\n    return low, high, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        low, high, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countSteppingNumbers(low, high) == expected_result\n        print(f\"assert solution.countSteppingNumbers({low}, {high}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countSteppingNumbers({low}, {high}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countSteppingNumbers(92, 124) == [98, 101, 121, 123]\nassert solution.countSteppingNumbers(49, 124) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(65, 74) == [65, 67]\nassert solution.countSteppingNumbers(62, 183) == [65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(49, 84) == [54, 56, 65, 67, 76, 78]\nassert solution.countSteppingNumbers(70, 109) == [76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(6, 55) == [6, 7, 8, 9, 10, 12, 21, 23, 32, 34, 43, 45, 54]\nassert solution.countSteppingNumbers(4, 32) == [4, 5, 6, 7, 8, 9, 10, 12, 21, 23, 32]\nassert solution.countSteppingNumbers(47, 72) == [54, 56, 65, 67]\nassert solution.countSteppingNumbers(95, 166) == [98, 101, 121, 123]\nassert solution.countSteppingNumbers(41, 200) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(40, 56) == [43, 45, 54, 56]\nassert solution.countSteppingNumbers(10, 193) == [10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(98, 154) == [98, 101, 121, 123]\nassert solution.countSteppingNumbers(72, 95) == [76, 78, 87, 89]\nassert solution.countSteppingNumbers(60, 200) == [65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(18, 137) == [21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(77, 125) == [78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(52, 114) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(25, 170) == [32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(75, 76) == [76]\nassert solution.countSteppingNumbers(21, 187) == [21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(26, 167) == [32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(54, 109) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(85, 184) == [87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(50, 133) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(43, 111) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(1, 183) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(47, 128) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(90, 125) == [98, 101, 121, 123]\nassert solution.countSteppingNumbers(55, 197) == [56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(47, 53) == []\nassert solution.countSteppingNumbers(18, 87) == [21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87]\nassert solution.countSteppingNumbers(91, 111) == [98, 101]\nassert solution.countSteppingNumbers(42, 173) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(51, 174) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(87, 187) == [87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(39, 121) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121]\nassert solution.countSteppingNumbers(76, 156) == [76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(40, 115) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(3, 178) == [3, 4, 5, 6, 7, 8, 9, 10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(29, 132) == [32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(12, 103) == [12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(96, 105) == [98, 101]\nassert solution.countSteppingNumbers(97, 199) == [98, 101, 121, 123]\nassert solution.countSteppingNumbers(60, 165) == [65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(90, 176) == [98, 101, 121, 123]\nassert solution.countSteppingNumbers(32, 46) == [32, 34, 43, 45]\nassert solution.countSteppingNumbers(50, 89) == [54, 56, 65, 67, 76, 78, 87, 89]\nassert solution.countSteppingNumbers(84, 125) == [87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(55, 144) == [56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(17, 83) == [21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78]\nassert solution.countSteppingNumbers(1, 197) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(92, 93) == []\nassert solution.countSteppingNumbers(50, 182) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(27, 74) == [32, 34, 43, 45, 54, 56, 65, 67]\nassert solution.countSteppingNumbers(71, 164) == [76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(70, 121) == [76, 78, 87, 89, 98, 101, 121]\nassert solution.countSteppingNumbers(44, 71) == [45, 54, 56, 65, 67]\nassert solution.countSteppingNumbers(61, 144) == [65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(70, 89) == [76, 78, 87, 89]\nassert solution.countSteppingNumbers(21, 126) == [21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(91, 93) == []\nassert solution.countSteppingNumbers(33, 71) == [34, 43, 45, 54, 56, 65, 67]\nassert solution.countSteppingNumbers(66, 101) == [67, 76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(71, 113) == [76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(93, 175) == [98, 101, 121, 123]\nassert solution.countSteppingNumbers(46, 179) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(100, 155) == [101, 121, 123]\nassert solution.countSteppingNumbers(100, 172) == [101, 121, 123]\nassert solution.countSteppingNumbers(70, 161) == [76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(68, 183) == [76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(7, 18) == [7, 8, 9, 10, 12]\nassert solution.countSteppingNumbers(42, 195) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(72, 156) == [76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(52, 69) == [54, 56, 65, 67]\nassert solution.countSteppingNumbers(87, 162) == [87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(19, 198) == [21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(37, 114) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(58, 87) == [65, 67, 76, 78, 87]\nassert solution.countSteppingNumbers(80, 181) == [87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(82, 173) == [87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(40, 134) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(76, 195) == [76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(38, 125) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(88, 125) == [89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(22, 96) == [23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89]\nassert solution.countSteppingNumbers(41, 135) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(15, 107) == [21, 23, 32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101]\nassert solution.countSteppingNumbers(97, 185) == [98, 101, 121, 123]\nassert solution.countSteppingNumbers(28, 57) == [32, 34, 43, 45, 54, 56]\nassert solution.countSteppingNumbers(19, 67) == [21, 23, 32, 34, 43, 45, 54, 56, 65, 67]\nassert solution.countSteppingNumbers(50, 144) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(53, 162) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(74, 196) == [76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(24, 193) == [32, 34, 43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(38, 161) == [43, 45, 54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(87, 102) == [87, 89, 98, 101]\nassert solution.countSteppingNumbers(53, 199) == [54, 56, 65, 67, 76, 78, 87, 89, 98, 101, 121, 123]\nassert solution.countSteppingNumbers(92, 137) == [98, 101, 121, 123]",
  "inefficient_solution": "class Solution:\n    def countSteppingNumbers(self, low: int, high: int) -> List[int]:\n        ans = []\n        def dfs(num, path):\n            if num > high:\n                return\n            if num >= low:\n                ans.append(int(''.join(map(str, path + [num]))))\n            if num:\n                dfs(num // 10, path + [num % 10])\n                dfs(num // 10, path + [num % 10 - 1])\n                dfs(num // 10, path + [num % 10 + 1])\n        for i in range(1, 1000000):\n            dfs(i, [])\n        return ans",
  "is_python": true
}