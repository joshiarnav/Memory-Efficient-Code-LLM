{
  "problem_idx": 1092,
  "task_name": "Shortest Common Supersequence",
  "markdown_description": "\nGiven two strings `str1` and `str2`, return *the shortest string that has both* `str1` *and* `str2` *as **subsequences***. If there are multiple valid strings, return **any** of them.\n\n\nA string `s` is a **subsequence** of string `t` if deleting some number of characters from `t` (possibly `0`) results in the string `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** str1 = \"abac\", str2 = \"cab\"\n**Output:** \"cabac\"\n**Explanation:** \nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\nThe answer provided is the shortest such string that satisfies these properties.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"\n**Output:** \"aaaaaaaa\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= str1.length, str2.length <= 1000`\n* `str1` and `str2` consist of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:\n        m, n = len(str1), len(str2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if str1[i - 1] == str2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                else:\n                    f[i][j] = max(f[i - 1][j], f[i][j - 1])\n        ans = []\n        i, j = m, n\n        while i or j:\n            if i == 0:\n                j -= 1\n                ans.append(str2[j])\n            elif j == 0:\n                i -= 1\n                ans.append(str1[i])\n            else:\n                if f[i][j] == f[i - 1][j]:\n                    i -= 1\n                    ans.append(str1[i])\n                elif f[i][j] == f[i][j - 1]:\n                    j -= 1\n                    ans.append(str2[j])\n                else:\n                    i, j = i - 1, j - 1\n                    ans.append(str1[i])\n        return ''.join(ans[::-1])\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:\n        m, n = len(str1), len(str2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if str1[i - 1] == str2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                else:\n                    f[i][j] = max(f[i - 1][j], f[i][j - 1])\n        ans = []\n        i, j = m, n\n        while i or j:\n            if i == 0:\n                j -= 1\n                ans.append(str2[j])\n            elif j == 0:\n                i -= 1\n                ans.append(str1[i])\n            else:\n                if f[i][j] == f[i - 1][j]:\n                    i -= 1\n                    ans.append(str1[i])\n                elif f[i][j] == f[i][j - 1]:\n                    j -= 1\n                    ans.append(str2[j])\n                else:\n                    i, j = i - 1, j - 1\n                    ans.append(str1[i])\n        return ''.join(ans[::-1])\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    str1 = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(1, 11)))\n    str2 = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(1, 11)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.shortestCommonSupersequence(str1, str2)\n\n    return str1, str2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        str1, str2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.shortestCommonSupersequence(str1, str2) == expected_result\n        print(f\"assert solution.shortestCommonSupersequence('{str1}', '{str2}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.shortestCommonSupersequence('{str1}', '{str2}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.shortestCommonSupersequence('thmshpl', 'ozgbjqdv') == 'ozgbjqdvthmshpl'\nassert solution.shortestCommonSupersequence('vcismsyhu', 'zqpperfl') == 'zqpperflvcismsyhu'\nassert solution.shortestCommonSupersequence('rg', 'ovmaipvsydb') == 'ovmaipvsydbrg'\nassert solution.shortestCommonSupersequence('ambwwvfsmt', 'hrwdqtwjzc') == 'hrambwdqtwjzcvfsmt'\nassert solution.shortestCommonSupersequence('oyuxutm', 'wyo') == 'wyoyuxutm'\nassert solution.shortestCommonSupersequence('ydzvjm', 'xephpmj') == 'xephpmydzvjm'\nassert solution.shortestCommonSupersequence('mmdrsgp', 'eerfyf') == 'eemmdrfyfsgp'\nassert solution.shortestCommonSupersequence('x', 'hktcwqtoi') == 'hktcwqtoix'\nassert solution.shortestCommonSupersequence('khnsq', 'zalcohlb') == 'zalcokhlbnsq'\nassert solution.shortestCommonSupersequence('ri', 'nc') == 'ncri'\nassert solution.shortestCommonSupersequence('oausvxdznw', 'yedzruc') == 'yeoausvxdzrucnw'\nassert solution.shortestCommonSupersequence('rltllcedvc', 'fkrkltsi') == 'fkrkltsillcedvc'\nassert solution.shortestCommonSupersequence('itrg', 'khsesjbntpf') == 'khsesjbnitpfrg'\nassert solution.shortestCommonSupersequence('sur', 'mfshnlfqp') == 'mfshnlfqpur'\nassert solution.shortestCommonSupersequence('nomcdjouxn', 'e') == 'enomcdjouxn'\nassert solution.shortestCommonSupersequence('ir', 'tfolkxau') == 'tfolkxauir'\nassert solution.shortestCommonSupersequence('nmekaheyj', 'gdqb') == 'gdqbnmekaheyj'\nassert solution.shortestCommonSupersequence('da', 'xoxfy') == 'xoxfyda'\nassert solution.shortestCommonSupersequence('yrzx', 'xozewdy') == 'xozewdyrzx'\nassert solution.shortestCommonSupersequence('pcfuucj', 'kl') == 'klpcfuucj'\nassert solution.shortestCommonSupersequence('cyhh', 'im') == 'imcyhh'\nassert solution.shortestCommonSupersequence('mvuosvwqa', 'qftomirehnk') == 'qftomirehnkvuosvwqa'\nassert solution.shortestCommonSupersequence('ak', 'nqiftpsontc') == 'nqiftpsontcak'\nassert solution.shortestCommonSupersequence('xmbqvpqi', 'zhx') == 'zhxmbqvpqi'\nassert solution.shortestCommonSupersequence('ehdbxcb', 'ois') == 'oisehdbxcb'\nassert solution.shortestCommonSupersequence('qckhmm', 'zm') == 'zqckhmm'\nassert solution.shortestCommonSupersequence('yqvswwvncj', 'fy') == 'fyqvswwvncj'\nassert solution.shortestCommonSupersequence('tvrwa', 'eiuvcgswxoq') == 'eiutvcgsrwxoqa'\nassert solution.shortestCommonSupersequence('grzrvuiyh', 'oh') == 'ogrzrvuiyh'\nassert solution.shortestCommonSupersequence('hbhjfkvffmu', 'hfzobdyzy') == 'hfzobdyzyhjfkvffmu'\nassert solution.shortestCommonSupersequence('aymulf', 'hsb') == 'hsbaymulf'\nassert solution.shortestCommonSupersequence('mdtwahhm', 'bgfvt') == 'bgfvmdtwahhm'\nassert solution.shortestCommonSupersequence('pgwbtvmrs', 'zvkueqxyldz') == 'zpgwbtvkueqxyldzmrs'\nassert solution.shortestCommonSupersequence('fqiwayam', 'yr') == 'fqiwayram'\nassert solution.shortestCommonSupersequence('awcct', 'tvuxygca') == 'tvuxygcawcct'\nassert solution.shortestCommonSupersequence('fcgsjcyhpmj', 'jbgzoqb') == 'jbfcgzoqbsjcyhpmj'\nassert solution.shortestCommonSupersequence('gzwd', 'deb') == 'gzwdeb'\nassert solution.shortestCommonSupersequence('cnouzg', 'waxwcif') == 'waxwcifnouzg'\nassert solution.shortestCommonSupersequence('lmj', 'rvtzie') == 'rvtzielmj'\nassert solution.shortestCommonSupersequence('dho', 'hjzrhjekkg') == 'dhjzrhjekkgo'\nassert solution.shortestCommonSupersequence('oitsn', 'ptcdtws') == 'poitcdtwsn'\nassert solution.shortestCommonSupersequence('tjgqfwosd', 'bmcxsrmfk') == 'bmcxsrmtjgqfkwosd'\nassert solution.shortestCommonSupersequence('vmbco', 'hxh') == 'hxhvmbco'\nassert solution.shortestCommonSupersequence('rftyhoaymf', 'qxuglk') == 'qxuglkrftyhoaymf'\nassert solution.shortestCommonSupersequence('aqjqu', 'flbuqr') == 'flbuaqrjqu'\nassert solution.shortestCommonSupersequence('ybvgbe', 'urxjlpo') == 'urxjlpoybvgbe'\nassert solution.shortestCommonSupersequence('q', 'grxyrgzchvh') == 'grxyrgzchvhq'\nassert solution.shortestCommonSupersequence('hf', 'adkdaps') == 'adkdapshf'\nassert solution.shortestCommonSupersequence('zem', 'qbekfwcihe') == 'qbzekfwcihem'\nassert solution.shortestCommonSupersequence('fsjnpiimlqe', 'tqrah') == 'tfsjnpiimlqrahe'\nassert solution.shortestCommonSupersequence('dyfrfu', 'fpkazyhqwx') == 'fpkazdyhqwxfrfu'\nassert solution.shortestCommonSupersequence('hwtlngja', 'vdemdeknybz') == 'vdemdekhwtlnybzgja'\nassert solution.shortestCommonSupersequence('xdatfmvqpi', 'szcfphoinr') == 'szcxdatfmvqphoinr'\nassert solution.shortestCommonSupersequence('iugh', 'dyxikoil') == 'dyxikoilugh'\nassert solution.shortestCommonSupersequence('fg', 'azki') == 'azkifg'\nassert solution.shortestCommonSupersequence('lmy', 'ltcoizvqht') == 'ltcoizvqhtmy'\nassert solution.shortestCommonSupersequence('ph', 'odmxuk') == 'odmxukph'\nassert solution.shortestCommonSupersequence('gjy', 'trvznqgw') == 'trvznqgwjy'\nassert solution.shortestCommonSupersequence('rhwdxwloiq', 'rszmgkpiwhq') == 'rszmgkpiwhwdxwloiq'\nassert solution.shortestCommonSupersequence('ovydg', 'cngkaqwtvo') == 'cngkaqwtvovydg'\nassert solution.shortestCommonSupersequence('jakkujefv', 'wlem') == 'wljakkujemfv'\nassert solution.shortestCommonSupersequence('k', 'nicag') == 'nicagk'\nassert solution.shortestCommonSupersequence('tntzfs', 'olnkll') == 'oltnklltzfs'\nassert solution.shortestCommonSupersequence('j', 'hqiwfooyoah') == 'hqiwfooyoahj'\nassert solution.shortestCommonSupersequence('le', 'npzcku') == 'npzckule'\nassert solution.shortestCommonSupersequence('pqodkyk', 'fbgaalb') == 'fbgaalbpqodkyk'\nassert solution.shortestCommonSupersequence('qtgdkxweh', 'j') == 'jqtgdkxweh'\nassert solution.shortestCommonSupersequence('odnilagsm', 'noessa') == 'noessdnilagsm'\nassert solution.shortestCommonSupersequence('izhxgloykt', 'vkvrpwb') == 'vizhxgloykvrpwbt'\nassert solution.shortestCommonSupersequence('nnkbgxo', 'yfbrgtz') == 'yfnnkbrgtzxo'\nassert solution.shortestCommonSupersequence('hvcb', 'yog') == 'yoghvcb'\nassert solution.shortestCommonSupersequence('zreyjiimyhp', 'fraqosp') == 'fzraqoseyjiimyhp'\nassert solution.shortestCommonSupersequence('g', 'poapagtus') == 'poapagtus'\nassert solution.shortestCommonSupersequence('sds', 'lxm') == 'lxmsds'\nassert solution.shortestCommonSupersequence('qvytyw', 'hbkwbkvu') == 'hbkwbkqvuytyw'\nassert solution.shortestCommonSupersequence('tenujbe', 'acreshh') == 'acrteshhnujbe'\nassert solution.shortestCommonSupersequence('v', 'ihauyi') == 'ihauyiv'\nassert solution.shortestCommonSupersequence('yvquxdzin', 'o') == 'oyvquxdzin'\nassert solution.shortestCommonSupersequence('ndxdd', 'ym') == 'ymndxdd'\nassert solution.shortestCommonSupersequence('rlhadcvvmxw', 'pxtsu') == 'prlhadcvvmxtsuw'\nassert solution.shortestCommonSupersequence('ipbey', 'kjzgqefmn') == 'kjzgqipbefmny'\nassert solution.shortestCommonSupersequence('fgpq', 'd') == 'dfgpq'\nassert solution.shortestCommonSupersequence('ng', 'wwh') == 'wwhng'\nassert solution.shortestCommonSupersequence('fopn', 'b') == 'bfopn'\nassert solution.shortestCommonSupersequence('uuqvfyqrac', 'dxpvmvp') == 'dxpuuqvmvpfyqrac'\nassert solution.shortestCommonSupersequence('gmfyreedddz', 'gay') == 'gamfyreedddz'\nassert solution.shortestCommonSupersequence('afylvhxmnz', 'sluoidtjrkb') == 'safyluoidtjrkbvhxmnz'\nassert solution.shortestCommonSupersequence('uktolvqtjk', 'vilcgxx') == 'viuktolcgxxvqtjk'\nassert solution.shortestCommonSupersequence('j', 'uc') == 'ucj'\nassert solution.shortestCommonSupersequence('kbgvdbziz', 'lze') == 'lkbgvdbzeiz'\nassert solution.shortestCommonSupersequence('ixirquhi', 'virorrvmgah') == 'vixirorrvmgaquhi'\nassert solution.shortestCommonSupersequence('eaofrgymo', 'gsef') == 'gseaofrgymo'\nassert solution.shortestCommonSupersequence('hraelyrzdhf', 'ahlisnou') == 'ahraelisnouyrzdhf'\nassert solution.shortestCommonSupersequence('moi', 'zyd') == 'zydmoi'\nassert solution.shortestCommonSupersequence('hsbsnn', 'bjrqfhmyq') == 'bjrqfhmyqsbsnn'\nassert solution.shortestCommonSupersequence('rm', 'idwlozbbg') == 'idwlozbbgrm'\nassert solution.shortestCommonSupersequence('avgn', 'rutgyny') == 'rutavgyny'\nassert solution.shortestCommonSupersequence('td', 'fjiwqqu') == 'fjiwqqutd'\nassert solution.shortestCommonSupersequence('njt', 'zsrnc') == 'zsrncjt'\nassert solution.shortestCommonSupersequence('k', 'at') == 'atk'",
  "inefficient_solution": "class Solution:\n    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:\n        m, n = len(str1), len(str2)\n        str1_list = [char for char in str1 for _ in range(m)]\n        str2_list = [char for char in str2 for _ in range(n)]\n        str1_list.extend(str2_list)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, len(str1_list) + 1):\n            for j in range(1, n + 1):\n                if str1_list[i - 1] == str2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                else:\n                    f[i][j] = max(f[i - 1][j], f[i][j - 1])\n        ans = []\n        i, j = m, n\n        while i or j:\n            if i == 0:\n                j -= 1\n                ans.append(str2[j])\n            elif j == 0:\n                i -= 1\n                ans.append(str1[i])\n            else:\n                if f[i][j] == f[i - 1][j]:\n                    i -= 1\n                    ans.append(str1[i])\n                elif f[i][j] == f[i][j - 1]:\n                    j -= 1\n                    ans.append(str2[j])\n                else:\n                    i, j = i - 1, j - 1\n                    ans.append(str1[i])\n        return ''.join(ans[::-1])",
  "is_python": true
}