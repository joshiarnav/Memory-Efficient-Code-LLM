{
  "problem_idx": 2510,
  "task_name": "Check if There is a Path With Equal Number of ",
  "markdown_description": "\nYou are given a **0-indexed** `m x n` **binary** matrix `grid`. You can move from a cell `(row, col)` to any of the cells `(row + 1, col)` or `(row, col + 1)`.\n\n\nReturn `true` *if there is a path from* `(0, 0)` *to* `(m - 1, n - 1)` *that visits an **equal** number of* `0`*'s and* `1`*'s*. Otherwise return `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2510.Check%20if%20There%20is%20a%20Path%20With%20Equal%20Number%20of%200%27s%20And%201%27s/images/yetgriddrawio-4.png)\n\n```\n\n**Input:** grid = [[0,1,0,0],[0,1,0,0],[1,0,1,0]]\n**Output:** true\n**Explanation:** The path colored in blue in the above diagram is a valid path because we have 3 cells with a value of 1 and 3 with a value of 0. Since there is a valid path, we return true.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2510.Check%20if%20There%20is%20a%20Path%20With%20Equal%20Number%20of%200%27s%20And%201%27s/images/yetgrid2drawio-1.png)\n\n```\n\n**Input:** grid = [[1,1,0],[0,0,1],[1,0,0]]\n**Output:** false\n**Explanation:** There is no path in this grid with an equal number of 0's and 1's.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `2 <= m, n <= 100`\n* `grid[i][j]` is either `0` or `1`.\n\n\n",
  "canonical_solution": "class Solution:\n    def isThereAPath(self, grid: List[List[int]]) -> bool:\n        @cache\n        def dfs(i, j, k):\n            if i >= m or j >= n:\n                return False\n            k += grid[i][j]\n            if k > s or i + j + 1 - k > s:\n                return False\n            if i == m - 1 and j == n - 1:\n                return k == s\n            return dfs(i + 1, j, k) or dfs(i, j + 1, k)\n\n        m, n = len(grid), len(grid[0])\n        s = m + n - 1\n        if s & 1:\n            return False\n        s >>= 1\n        return dfs(0, 0, 0)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom functools import cache\n\nclass Solution:\n    def isThereAPath(self, grid: List[List[int]]) -> bool:\n        @cache\n        def dfs(i, j, k):\n            if i >= m or j >= n:\n                return False\n            k += grid[i][j]\n            if k > s or i + j + 1 - k > s:\n                return False\n            if i == m - 1 and j == n - 1:\n                return k == s\n            return dfs(i + 1, j, k) or dfs(i, j + 1, k)\n\n        m, n = len(grid), len(grid[0])\n        s = m + n - 1\n        if s & 1:\n            return False\n        s >>= 1\n        return dfs(0, 0, 0)\n      \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid of 0s and 1s\n    m = random.randint(2, 11)\n    n = random.randint(2, 11)\n    grid = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isThereAPath(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isThereAPath(grid) == expected_result\n        print(f\"assert solution.isThereAPath({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isThereAPath({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isThereAPath([[1, 0, 0, 1], [0, 0, 0, 0], [1, 1, 1, 0], [0, 1, 1, 0]]) == False\nassert solution.isThereAPath([[0, 0, 1], [1, 0, 0]]) == False\nassert solution.isThereAPath([[0, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 1, 0, 0, 0], [1, 1, 1, 0, 1], [1, 0, 0, 0, 0], [1, 0, 1, 1, 1], [0, 1, 1, 0, 0]]) == False\nassert solution.isThereAPath([[1, 0, 1], [0, 1, 1], [1, 1, 0], [0, 1, 0], [1, 0, 0], [0, 0, 1], [0, 1, 0]]) == False\nassert solution.isThereAPath([[0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1]]) == False\nassert solution.isThereAPath([[0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0]]) == True\nassert solution.isThereAPath([[1, 0, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 1, 1], [1, 0, 1], [0, 0, 1]]) == False\nassert solution.isThereAPath([[1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1]]) == True\nassert solution.isThereAPath([[0, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1]]) == False\nassert solution.isThereAPath([[0, 0, 0], [0, 1, 0], [1, 0, 0], [0, 1, 1], [1, 1, 1], [0, 1, 1], [1, 1, 0]]) == False\nassert solution.isThereAPath([[1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 1, 1]]) == True\nassert solution.isThereAPath([[1, 1, 1, 1, 1], [1, 1, 1, 1, 0]]) == False\nassert solution.isThereAPath([[1, 0, 1, 0], [0, 1, 1, 1], [1, 1, 0, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 1, 1], [1, 0, 1, 0], [1, 0, 1, 0], [0, 0, 1, 0], [0, 1, 0, 1]]) == False\nassert solution.isThereAPath([[1, 1, 0], [0, 1, 1], [1, 0, 1], [0, 1, 0], [0, 0, 0], [0, 1, 1], [1, 1, 0], [1, 1, 1]]) == True\nassert solution.isThereAPath([[0, 1, 1, 0], [1, 0, 1, 1]]) == False\nassert solution.isThereAPath([[1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]) == True\nassert solution.isThereAPath([[1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1]]) == True\nassert solution.isThereAPath([[0, 1], [1, 0], [1, 0], [0, 0], [1, 1], [0, 0]]) == False\nassert solution.isThereAPath([[1, 1, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1]]) == True\nassert solution.isThereAPath([[0, 1, 1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1]]) == True\nassert solution.isThereAPath([[0, 1, 1, 1, 1], [0, 0, 1, 0, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 1, 1, 0, 0], [1, 1, 0, 1, 1], [1, 0, 1, 1, 0], [1, 0, 1, 1, 1], [1, 1, 0, 0, 1], [1, 0, 0, 0, 0]]) == False\nassert solution.isThereAPath([[0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 0, 0]]) == True\nassert solution.isThereAPath([[0, 1, 0, 1, 0, 0, 0, 1, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1]]) == False\nassert solution.isThereAPath([[0, 1], [1, 0], [0, 0], [1, 0], [1, 0], [0, 1], [1, 1], [0, 0], [0, 0], [0, 1], [1, 0]]) == True\nassert solution.isThereAPath([[0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0]]) == True\nassert solution.isThereAPath([[0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1]]) == True\nassert solution.isThereAPath([[1, 0, 0], [0, 0, 1], [1, 0, 0], [0, 0, 1], [1, 0, 0]]) == False\nassert solution.isThereAPath([[1, 1, 0, 1], [0, 1, 0, 1], [1, 1, 0, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 0, 0, 1], [0, 0, 1, 1], [0, 0, 1, 0]]) == True\nassert solution.isThereAPath([[1, 1, 1, 0, 0], [1, 1, 0, 1, 1], [1, 1, 0, 1, 1]]) == False\nassert solution.isThereAPath([[1, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0], [1, 0, 1, 0, 1], [1, 0, 1, 1, 1], [0, 0, 1, 0, 0]]) == False\nassert solution.isThereAPath([[0, 1, 1, 0], [0, 1, 1, 0], [1, 1, 0, 1], [0, 1, 0, 1], [1, 0, 1, 0], [1, 0, 0, 0], [0, 1, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]]) == True\nassert solution.isThereAPath([[0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0]]) == True\nassert solution.isThereAPath([[0, 0, 1], [1, 1, 0]]) == True\nassert solution.isThereAPath([[0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1]]) == False\nassert solution.isThereAPath([[0, 1, 0], [0, 1, 1], [1, 0, 0], [0, 0, 0], [1, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 0], [1, 1, 0], [0, 1, 0], [0, 1, 0]]) == False\nassert solution.isThereAPath([[1, 1, 1, 0, 0], [0, 1, 0, 1, 1], [1, 0, 1, 0, 1], [1, 0, 0, 1, 1], [0, 1, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 1, 1, 1]]) == False\nassert solution.isThereAPath([[1, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0]]) == True\nassert solution.isThereAPath([[1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0]]) == True\nassert solution.isThereAPath([[0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 1, 0]]) == True\nassert solution.isThereAPath([[0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1]]) == False\nassert solution.isThereAPath([[0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 0]]) == False\nassert solution.isThereAPath([[1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0]]) == False\nassert solution.isThereAPath([[1, 1, 0], [1, 0, 0], [0, 0, 1], [0, 1, 1], [0, 0, 1]]) == False\nassert solution.isThereAPath([[1, 0], [0, 0], [1, 1], [0, 1], [1, 1], [1, 1], [0, 1]]) == False\nassert solution.isThereAPath([[1, 1, 0, 0, 1], [0, 1, 0, 0, 1], [0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [1, 0, 1, 0, 0], [1, 1, 1, 1, 0], [0, 0, 1, 1, 1], [1, 0, 1, 1, 1], [0, 1, 0, 0, 0]]) == False\nassert solution.isThereAPath([[1, 0, 1, 0, 0, 1, 1], [1, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1], [1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1]]) == False\nassert solution.isThereAPath([[0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1]]) == True\nassert solution.isThereAPath([[1, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 0], [1, 0, 1], [1, 0, 0], [1, 1, 0]]) == False\nassert solution.isThereAPath([[1, 0, 0], [0, 0, 1], [1, 0, 1], [0, 1, 0], [0, 0, 1], [1, 1, 1]]) == True\nassert solution.isThereAPath([[0, 1, 1, 0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 0, 0], [0, 1, 1, 1, 1], [0, 0, 1, 1, 0], [1, 1, 0, 1, 1]]) == False\nassert solution.isThereAPath([[1, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 1], [1, 1, 1, 1]]) == True\nassert solution.isThereAPath([[0, 1, 1, 1, 0], [0, 0, 0, 0, 1], [0, 0, 1, 1, 1], [1, 0, 1, 1, 1], [1, 0, 1, 1, 0], [1, 0, 1, 0, 1], [0, 0, 1, 1, 1]]) == False\nassert solution.isThereAPath([[1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0]]) == True\nassert solution.isThereAPath([[0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1, 1]]) == False\nassert solution.isThereAPath([[0, 1, 0], [0, 1, 0]]) == True\nassert solution.isThereAPath([[1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1]]) == False\nassert solution.isThereAPath([[0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1]]) == False\nassert solution.isThereAPath([[1, 1, 0, 1], [1, 1, 1, 1], [0, 1, 1, 1], [0, 0, 1, 0]]) == False\nassert solution.isThereAPath([[1, 1, 0, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 0, 1], [0, 1, 1, 0, 0], [0, 0, 1, 0, 1], [0, 0, 0, 0, 0], [1, 1, 1, 0, 0]]) == False\nassert solution.isThereAPath([[0, 1, 0, 1, 0], [0, 0, 1, 0, 0]]) == False\nassert solution.isThereAPath([[0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 0]]) == True\nassert solution.isThereAPath([[0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1]]) == False\nassert solution.isThereAPath([[0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0]]) == False\nassert solution.isThereAPath([[0, 1], [0, 1], [1, 1], [1, 0], [0, 1], [1, 0], [0, 0], [0, 1], [0, 0]]) == True\nassert solution.isThereAPath([[1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1]]) == False\nassert solution.isThereAPath([[0, 1], [0, 0], [1, 1]]) == True\nassert solution.isThereAPath([[1, 0, 0], [1, 1, 0], [1, 1, 0], [0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 1, 0], [0, 0, 0]]) == True\nassert solution.isThereAPath([[1, 0, 0, 1], [0, 0, 1, 1], [0, 1, 1, 1], [1, 0, 1, 1], [0, 1, 0, 1], [1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]) == False\nassert solution.isThereAPath([[0, 1], [0, 0], [0, 1], [0, 0], [0, 0], [0, 1]]) == False\nassert solution.isThereAPath([[0, 0], [1, 0], [1, 0], [0, 0], [0, 1], [0, 0], [1, 1], [0, 1], [1, 0], [1, 1], [0, 1]]) == True\nassert solution.isThereAPath([[0, 1, 1, 1, 0], [1, 0, 0, 0, 0], [0, 0, 1, 1, 1], [0, 1, 1, 0, 0], [0, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 1, 1, 1, 0]]) == False\nassert solution.isThereAPath([[1, 1, 1, 0], [1, 0, 0, 0], [0, 1, 0, 1], [1, 0, 1, 1]]) == False\nassert solution.isThereAPath([[0, 0], [0, 0], [0, 1], [1, 1], [0, 1], [0, 1], [1, 0]]) == True\nassert solution.isThereAPath([[1, 1, 0, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1]]) == False\nassert solution.isThereAPath([[0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1]]) == False\nassert solution.isThereAPath([[0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 1]]) == True\nassert solution.isThereAPath([[1, 0, 1], [0, 1, 0], [0, 0, 1], [0, 0, 1], [0, 0, 0], [1, 1, 0], [1, 1, 0], [1, 1, 0]]) == True\nassert solution.isThereAPath([[0, 0], [1, 1], [1, 0], [1, 1], [1, 1], [0, 0], [1, 0]]) == True\nassert solution.isThereAPath([[0, 0, 0, 0, 1], [1, 0, 1, 1, 0]]) == True\nassert solution.isThereAPath([[1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0]]) == True\nassert solution.isThereAPath([[1, 1, 0, 1, 1], [0, 1, 1, 0, 0], [1, 1, 1, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 1, 0], [1, 0, 0, 1, 0], [0, 1, 0, 1, 0], [1, 1, 0, 1, 1]]) == True\nassert solution.isThereAPath([[0, 0, 1], [1, 1, 0], [0, 0, 0], [0, 0, 1], [0, 0, 1], [0, 0, 1]]) == True\nassert solution.isThereAPath([[0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0]]) == True\nassert solution.isThereAPath([[0, 1, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0]]) == True\nassert solution.isThereAPath([[0, 1, 0, 0], [1, 1, 1, 0], [1, 0, 0, 1], [0, 0, 0, 0], [1, 1, 1, 0], [0, 1, 0, 1], [1, 1, 0, 0], [1, 0, 1, 0]]) == False\nassert solution.isThereAPath([[0, 0, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0]]) == True\nassert solution.isThereAPath([[1, 0, 0], [1, 1, 1], [0, 0, 1], [1, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 1, 0]]) == True\nassert solution.isThereAPath([[1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0]]) == False\nassert solution.isThereAPath([[1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0]]) == False\nassert solution.isThereAPath([[1, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0]]) == False\nassert solution.isThereAPath([[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 1], [0, 0, 0, 1]]) == False\nassert solution.isThereAPath([[0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0]]) == True\nassert solution.isThereAPath([[1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 1], [0, 0, 0, 1]]) == False\nassert solution.isThereAPath([[1, 0, 0], [0, 1, 0], [1, 1, 0], [0, 1, 0]]) == True\nassert solution.isThereAPath([[0, 1, 0, 1, 1], [0, 1, 1, 0, 1], [0, 1, 1, 0, 0], [1, 0, 0, 1, 1], [1, 1, 1, 1, 1], [0, 1, 0, 0, 1], [0, 1, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 0, 1, 0], [1, 0, 1, 0, 0], [0, 0, 1, 1, 1]]) == False\nassert solution.isThereAPath([[0, 1, 1, 0, 1], [0, 1, 1, 0, 1], [0, 0, 0, 0, 1], [1, 0, 1, 1, 0], [0, 0, 1, 1, 1]]) == False\nassert solution.isThereAPath([[1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0], [1, 0, 1, 1], [0, 1, 1, 1], [1, 0, 1, 0]]) == False\nassert solution.isThereAPath([[1, 0, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1]]) == True\nassert solution.isThereAPath([[1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1]]) == False\nassert solution.isThereAPath([[0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0], [0, 0, 1, 0, 1, 1], [1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0]]) == False",
  "inefficient_solution": "class Solution:\n    def isThereAPath(self, grid: List[List[int]]) -> bool:\n        m, n = len(grid), len(grid[0])\n        count0 = 0\n        count1 = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 0:\n                    count0 += 1\n                else:\n                    count1 += 1\n\n        target_count = (count0 + count1) // 2\n\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        queue = []\n        for i in range(m):\n            for j in range(n):\n                queue.append((i, j))\n\n        while queue:\n            x, y = queue.pop(0)\n            if grid[x][y] == 0:\n                count0 -= 1\n            elif grid[x][y] == 1:\n                count1 -= 1\n\n            if count0 == target_count and count1 == target_count:\n                return True\n\n            if x > 0 and not visited[x - 1][y]:\n                queue.append((x - 1, y))\n                visited[x - 1][y] = True\n            if y > 0 and not visited[x][y - 1]:\n                queue.append((x, y - 1))\n                visited[x][y - 1] = True\n\n        return False",
  "is_python": true
}