{
  "problem_idx": 1870,
  "task_name": "Minimum Speed to Arrive on Time",
  "markdown_description": "\nYou are given a floating-point number `hour`, representing the amount of time you have to reach the office. To commute to the office, you must take `n` trains in sequential order. You are also given an integer array `dist` of length `n`, where `dist[i]` describes the distance (in kilometers) of the `ith` train ride.\n\n\nEach train can only depart at an integer hour, so you may need to wait in between each train ride.\n\n\n* For example, if the `1st` train ride takes `1.5` hours, you must wait for an additional `0.5` hours before you can depart on the `2nd` train ride at the 2 hour mark.\n\n\nReturn *the **minimum positive integer** speed **(in kilometers per hour)** that all the trains must travel at for you to reach the office on time, or* `-1` *if it is impossible to be on time*.\n\n\nTests are generated such that the answer will not exceed `107` and `hour` will have **at most two digits after the decimal point**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** dist = [1,3,2], hour = 6\n**Output:** 1\n**Explanation:** At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** dist = [1,3,2], hour = 2.7\n**Output:** 3\n**Explanation:** At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** dist = [1,3,2], hour = 1.9\n**Output:** -1\n**Explanation:** It is impossible because the earliest the third train can depart is at the 2 hour mark.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == dist.length`\n* `1 <= n <= 105`\n* `1 <= dist[i] <= 105`\n* `1 <= hour <= 109`\n* There will be at most two digits after the decimal point in `hour`.\n\n\n",
  "canonical_solution": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:\n        def check(speed):\n            res = 0\n            for i, d in enumerate(dist):\n                res += (d / speed) if i == len(dist) - 1 else math.ceil(d / speed)\n            return res <= hour\n\n        r = 10**7 + 1\n        ans = bisect_left(range(1, r), True, key=check) + 1\n        return -1 if ans == r else ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minSpeedOnTime(self, dist, hour):\n        def check(speed):\n            res = 0\n            for i, d in enumerate(dist):\n                res += (d / speed) if i == len(dist) - 1 else math.ceil(d / speed)\n            return res <= hour\n\n        r = 10**7 + 1\n        ans = bisect_left(range(1, r), True, key=check) + 1\n        return -1 if ans == r else ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    dist = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random hour\n    hour = round(random.uniform(1, 100), 2)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minSpeedOnTime(dist, hour)\n\n    return dist, hour, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        dist, hour, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minSpeedOnTime(dist, hour) == expected_result\n        print(f\"assert solution.minSpeedOnTime({dist}, {hour}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.minSpeedOnTime({dist}, {hour}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minSpeedOnTime([63, 15, 48, 12], 48.52) == 3\nassert solution.minSpeedOnTime([71, 3, 87], 34.75) == 5\nassert solution.minSpeedOnTime([6, 53, 71, 54], 57.13) == 4\nassert solution.minSpeedOnTime([45, 21, 50, 4, 90, 5, 17, 91], 56.33) == 6\nassert solution.minSpeedOnTime([90, 39, 48], 49.67) == 4\nassert solution.minSpeedOnTime([41, 85, 52, 5, 83, 32], 97.8) == 4\nassert solution.minSpeedOnTime([87, 10, 79, 54, 86, 89, 72, 18, 88, 84], 37.35) == 20\nassert solution.minSpeedOnTime([46, 93, 99, 64, 51], 99.34) == 4\nassert solution.minSpeedOnTime([43, 42, 7, 73, 66, 100, 96, 77], 4.56) == -1\nassert solution.minSpeedOnTime([38, 87, 69, 63, 21, 94], 23.02) == 19\nassert solution.minSpeedOnTime([82, 32, 42, 100, 6], 85.62) == 4\nassert solution.minSpeedOnTime([56, 77, 81, 43, 2, 84, 83, 4, 99], 94.53) == 6\nassert solution.minSpeedOnTime([100, 87, 8, 16, 71], 86.44) == 4\nassert solution.minSpeedOnTime([35, 64, 21, 70, 23, 8, 14], 95.53) == 3\nassert solution.minSpeedOnTime([94, 42, 59, 6, 95, 3, 34, 99, 5, 11], 65.2) == 8\nassert solution.minSpeedOnTime([47, 60, 10, 66, 57, 63, 94, 72], 43.94) == 12\nassert solution.minSpeedOnTime([94, 85], 21.22) == 9\nassert solution.minSpeedOnTime([35, 99, 33, 73, 98, 52, 9, 86, 18], 56.96) == 10\nassert solution.minSpeedOnTime([96, 15, 98, 64, 12, 69, 1], 37.99) == 11\nassert solution.minSpeedOnTime([54, 49, 57, 40, 93, 39, 26, 14, 60], 89.11) == 5\nassert solution.minSpeedOnTime([41, 36, 89], 63.12) == 3\nassert solution.minSpeedOnTime([71, 9, 92, 78, 72, 81, 19, 77, 6, 73], 63.22) == 10\nassert solution.minSpeedOnTime([65, 48], 74.71) == 2\nassert solution.minSpeedOnTime([55, 82, 69, 89, 56, 34, 87, 7, 41], 24.26) == 28\nassert solution.minSpeedOnTime([62, 36, 27, 11, 46, 47], 84.2) == 3\nassert solution.minSpeedOnTime([51, 7, 6], 49.3) == 2\nassert solution.minSpeedOnTime([16, 89, 20, 38, 79, 50, 42, 74, 41, 86], 64.35) == 9\nassert solution.minSpeedOnTime([30, 93, 100], 83.21) == 3\nassert solution.minSpeedOnTime([75, 93, 87], 61.78) == 5\nassert solution.minSpeedOnTime([62, 52, 65, 11, 98, 75, 70, 35, 32, 29], 67.45) == 9\nassert solution.minSpeedOnTime([19, 14, 72, 28, 93, 94, 16, 61, 60, 30], 77.81) == 7\nassert solution.minSpeedOnTime([55, 99, 67, 38, 25, 75], 89.61) == 5\nassert solution.minSpeedOnTime([89, 67, 47], 37.86) == 6\nassert solution.minSpeedOnTime([95, 22, 57], 73.77) == 3\nassert solution.minSpeedOnTime([11, 18, 52, 66, 97, 80, 30, 37, 55, 92], 68.78) == 9\nassert solution.minSpeedOnTime([39, 68, 83, 75, 95, 23, 16], 40.26) == 11\nassert solution.minSpeedOnTime([18, 68, 41, 89, 6, 21, 74], 64.71) == 6\nassert solution.minSpeedOnTime([99, 87, 68, 5, 6, 45, 17, 80], 37.33) == 13\nassert solution.minSpeedOnTime([40, 70, 34, 74, 76, 6, 45, 78, 37, 93], 19.17) == 38\nassert solution.minSpeedOnTime([76, 79, 48, 22, 69, 98, 20, 49, 92], 11.37) == 76\nassert solution.minSpeedOnTime([41, 64, 84, 68, 70, 53, 33, 19, 42, 63], 46.23) == 14\nassert solution.minSpeedOnTime([66, 7, 79, 53, 2, 25, 43, 59], 69.97) == 5\nassert solution.minSpeedOnTime([83, 46, 19, 68], 71.9) == 4\nassert solution.minSpeedOnTime([88, 72, 1, 14, 53, 28, 52, 83, 68, 81], 87.59) == 7\nassert solution.minSpeedOnTime([5, 87, 80, 23, 82, 42, 59, 46], 40.96) == 12\nassert solution.minSpeedOnTime([85, 53, 69, 97, 1], 89.95) == 4\nassert solution.minSpeedOnTime([54, 69, 24, 32, 45, 18], 92.87) == 3\nassert solution.minSpeedOnTime([21, 63, 98, 75, 27, 22, 40], 55.98) == 7\nassert solution.minSpeedOnTime([47, 88, 50, 39, 9, 69, 2, 13, 58], 23.61) == 20\nassert solution.minSpeedOnTime([7, 2, 78, 28, 31, 37, 88, 49], 89.57) == 4\nassert solution.minSpeedOnTime([71, 60, 74], 60.49) == 4\nassert solution.minSpeedOnTime([69, 28], 87.35) == 2\nassert solution.minSpeedOnTime([93, 33, 18], 17.28) == 9\nassert solution.minSpeedOnTime([67, 75, 46, 92], 33.24) == 9\nassert solution.minSpeedOnTime([57, 34], 83.11) == 2\nassert solution.minSpeedOnTime([59, 65, 87, 100], 34.04) == 10\nassert solution.minSpeedOnTime([66, 18, 85], 12.49) == 16\nassert solution.minSpeedOnTime([77, 15, 57, 21, 92, 31, 4, 59, 100, 30], 16.46) == 46\nassert solution.minSpeedOnTime([66, 1, 85, 52], 57.65) == 4\nassert solution.minSpeedOnTime([82, 55, 85, 78, 3, 1, 97, 69, 90, 11], 29.57) == 23\nassert solution.minSpeedOnTime([78, 31, 80, 83], 45.88) == 7\nassert solution.minSpeedOnTime([62, 49], 28.44) == 4\nassert solution.minSpeedOnTime([100, 46, 56, 69, 71], 18.57) == 20\nassert solution.minSpeedOnTime([15, 2, 64, 84, 60], 28.38) == 9\nassert solution.minSpeedOnTime([28, 2, 72], 33.99) == 4\nassert solution.minSpeedOnTime([41, 22, 32, 5, 54, 66, 60, 85, 1], 5.16) == -1\nassert solution.minSpeedOnTime([48, 71, 15, 2], 41.95) == 4\nassert solution.minSpeedOnTime([34, 3, 26, 28, 73, 18, 99, 74], 99.49) == 4\nassert solution.minSpeedOnTime([65, 8, 46, 81], 45.02) == 5\nassert solution.minSpeedOnTime([93, 63, 65, 67, 100], 32.28) == 13\nassert solution.minSpeedOnTime([33, 35, 37, 99, 32, 17], 76.99) == 4\nassert solution.minSpeedOnTime([40, 95, 46, 13], 69.94) == 3\nassert solution.minSpeedOnTime([36, 23, 89, 26, 67, 32, 22, 14, 8], 11.91) == 36\nassert solution.minSpeedOnTime([22, 41, 91, 99, 55, 61, 16, 93, 53], 21.69) == 31\nassert solution.minSpeedOnTime([20, 60, 34, 40, 84, 80], 28.56) == 12\nassert solution.minSpeedOnTime([6, 62, 48, 3, 49, 91, 54], 21.08) == 18\nassert solution.minSpeedOnTime([15, 86, 12, 88, 37], 51.36) == 5\nassert solution.minSpeedOnTime([61, 68, 11, 13, 19, 31, 26, 54], 60.03) == 6\nassert solution.minSpeedOnTime([80, 91, 83, 41], 98.32) == 4\nassert solution.minSpeedOnTime([84, 93, 31, 7, 41, 59, 38, 39, 69, 75], 65.46) == 9\nassert solution.minSpeedOnTime([42, 38], 16.96) == 5\nassert solution.minSpeedOnTime([24, 59, 62], 92.04) == 2\nassert solution.minSpeedOnTime([85, 99], 97.21) == 2\nassert solution.minSpeedOnTime([99, 26, 42, 18, 67], 10.48) == 28\nassert solution.minSpeedOnTime([51, 55, 15, 61, 11, 79, 62], 52.97) == 7\nassert solution.minSpeedOnTime([55, 12, 56, 33, 10], 6.96) == 33\nassert solution.minSpeedOnTime([41, 45, 43], 59.04) == 3\nassert solution.minSpeedOnTime([7, 54, 14, 41, 86, 83], 39.5) == 8\nassert solution.minSpeedOnTime([24, 45, 3], 86.62) == 1\nassert solution.minSpeedOnTime([51, 1, 45, 17], 64.14) == 2\nassert solution.minSpeedOnTime([67, 12], 79.15) == 1\nassert solution.minSpeedOnTime([78, 24], 27.18) == 4\nassert solution.minSpeedOnTime([70, 28, 40, 47, 98, 15, 69, 92, 26, 2], 32.74) == 18\nassert solution.minSpeedOnTime([32, 10, 72, 14, 69, 56, 84, 98, 22], 11.34) == 69\nassert solution.minSpeedOnTime([16, 23, 27, 56, 69], 57.6) == 4\nassert solution.minSpeedOnTime([69, 31], 24.91) == 5\nassert solution.minSpeedOnTime([95, 21, 22, 12, 46, 5, 48, 1], 57.36) == 5\nassert solution.minSpeedOnTime([40, 51, 64, 14, 68, 37, 53], 35.95) == 10\nassert solution.minSpeedOnTime([93, 31], 20.14) == 7\nassert solution.minSpeedOnTime([56, 85, 20, 98, 82, 39, 61, 45], 58.56) == 9",
  "inefficient_solution": "class Solution:\n    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:\n        n = len(dist)\n        res = 0\n        for speed in range(1, 10**7 + 1):\n            wait_time = 0\n            for i, d in enumerate(dist):\n                travel_time = d / speed\n                if i != len(dist) - 1:\n                    wait_time += math.ceil(travel_time) - travel_time\n                travel_time = math.ceil(travel_time)\n                res += travel_time\n            if res <= hour:\n                return speed\n            if res - hour <= 1e-9:\n                return -1\n        return -1",
  "is_python": true
}