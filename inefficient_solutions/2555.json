{
  "problem_idx": 2555,
  "task_name": "Maximize Win From Two Segments",
  "markdown_description": "\nThere are some prizes on the **X-axis**. You are given an integer array `prizePositions` that is **sorted in non-decreasing order**, where `prizePositions[i]` is the position of the `ith` prize. There could be different prizes at the same position on the line. You are also given an integer `k`.\n\n\nYou are allowed to select two segments with integer endpoints. The length of each segment must be `k`. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\n\n\n* For example if `k = 2`, you can choose segments `[1, 3]` and `[2, 4]`, and you will win any prize i that satisfies `1 <= prizePositions[i] <= 3` or `2 <= prizePositions[i] <= 4`.\n\n\nReturn *the **maximum** number of prizes you can win if you choose the two segments optimally*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prizePositions = [1,1,2,2,3,3,5], k = 2\n**Output:** 7\n**Explanation:** In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prizePositions = [1,2,3,4], k = 0\n**Output:** 2\n**Explanation:** For this example, **one choice** for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prizePositions.length <= 105`\n* `1 <= prizePositions[i] <= 109`\n* `0 <= k <= 109`\n* `prizePositions` is sorted in non-decreasing order.\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n",
  "canonical_solution": "class Solution:\n    def maximizeWin(self, prizePositions: List[int], k: int) -> int:\n        n = len(prizePositions)\n        f = [0] * (n + 1)\n        ans = 0\n        for i, x in enumerate(prizePositions, 1):\n            j = bisect_left(prizePositions, x - k)\n            ans = max(ans, f[j] + i - j)\n            f[i] = max(f[i - 1], i - j)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximizeWin(self, prizePositions, k):\n        n = len(prizePositions)\n        f = [0] * (n + 1)\n        ans = 0\n        for i, x in enumerate(prizePositions, 1):\n            j = bisect_left(prizePositions, x - k)\n            ans = max(ans, f[j] + i - j)\n            f[i] = max(f[i - 1], i - j)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random prizePositions list\n    prizePositions = sorted(random.sample(range(1, 101), random.randint(1, 10)))\n    \n    # Generate a random k value\n    k = random.randint(0, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximizeWin(prizePositions, k)\n\n    return prizePositions, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        prizePositions, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximizeWin(prizePositions, k) == expected_result\n        print(f\"assert solution.maximizeWin({prizePositions}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximizeWin({prizePositions}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximizeWin([1, 6, 11, 29, 72, 76, 79, 81, 97], 6) == 5\nassert solution.maximizeWin([14, 40, 54, 76, 96], 2) == 2\nassert solution.maximizeWin([67], 6) == 1\nassert solution.maximizeWin([23, 63, 67, 91], 2) == 2\nassert solution.maximizeWin([14, 23, 37, 40, 46, 99], 3) == 3\nassert solution.maximizeWin([33, 35, 42, 43, 66, 67, 73], 7) == 5\nassert solution.maximizeWin([13, 29, 67], 9) == 2\nassert solution.maximizeWin([10, 24, 46, 56, 58, 79], 0) == 2\nassert solution.maximizeWin([68, 82], 0) == 2\nassert solution.maximizeWin([18, 24, 42, 76, 91], 0) == 2\nassert solution.maximizeWin([6, 35, 41, 84, 88, 89], 4) == 3\nassert solution.maximizeWin([3, 20, 22, 50, 52], 2) == 4\nassert solution.maximizeWin([6, 11, 14, 17, 24, 44, 48, 82, 91, 97], 2) == 2\nassert solution.maximizeWin([64, 73], 5) == 2\nassert solution.maximizeWin([12, 19, 23, 26, 34, 39, 42, 57, 85], 6) == 4\nassert solution.maximizeWin([30, 44, 56, 65, 69, 99], 6) == 3\nassert solution.maximizeWin([4, 7, 18, 41, 53], 6) == 3\nassert solution.maximizeWin([4, 7, 78], 9) == 3\nassert solution.maximizeWin([1, 14, 23, 26, 42, 55, 56, 61, 75, 87], 5) == 4\nassert solution.maximizeWin([27, 29], 5) == 2\nassert solution.maximizeWin([37, 72, 86], 3) == 2\nassert solution.maximizeWin([3, 11, 39, 53, 59, 62, 78, 90], 1) == 2\nassert solution.maximizeWin([17, 37, 47, 82], 5) == 2\nassert solution.maximizeWin([49, 54, 55], 5) == 3\nassert solution.maximizeWin([52], 3) == 1\nassert solution.maximizeWin([21, 22, 37, 49], 4) == 3\nassert solution.maximizeWin([7, 11, 29, 36, 54, 73, 100], 0) == 2\nassert solution.maximizeWin([6, 8, 9, 11, 33, 46, 64, 86, 90, 96], 2) == 4\nassert solution.maximizeWin([6, 23, 39, 45, 46, 94, 98], 10) == 5\nassert solution.maximizeWin([27], 9) == 1\nassert solution.maximizeWin([37, 51, 71], 6) == 2\nassert solution.maximizeWin([2, 40, 86], 7) == 2\nassert solution.maximizeWin([59, 71], 7) == 2\nassert solution.maximizeWin([17, 43, 48, 58, 93, 97], 2) == 2\nassert solution.maximizeWin([5, 7, 38, 49, 54, 56, 66, 87, 93], 7) == 5\nassert solution.maximizeWin([19, 24, 38, 45, 51, 67, 74, 76, 97, 99], 4) == 4\nassert solution.maximizeWin([4, 24, 54, 70, 73, 74], 7) == 4\nassert solution.maximizeWin([26, 46, 59, 96], 6) == 2\nassert solution.maximizeWin([10, 11, 16, 34, 36, 54, 73], 7) == 5\nassert solution.maximizeWin([19, 34, 53, 60], 9) == 3\nassert solution.maximizeWin([8, 61, 77, 85, 98], 9) == 3\nassert solution.maximizeWin([16], 3) == 1\nassert solution.maximizeWin([19, 28, 45, 48, 53, 58, 59, 72, 73, 93], 0) == 2\nassert solution.maximizeWin([11, 23, 63, 75, 92, 93, 95], 10) == 4\nassert solution.maximizeWin([11, 43, 59, 95], 6) == 2\nassert solution.maximizeWin([14, 21, 30, 37, 46, 48, 80, 87, 99], 10) == 4\nassert solution.maximizeWin([10], 5) == 1\nassert solution.maximizeWin([29, 42, 46, 47, 72], 5) == 4\nassert solution.maximizeWin([13, 14, 15, 21, 37, 76, 78, 79, 98], 1) == 4\nassert solution.maximizeWin([38], 4) == 1\nassert solution.maximizeWin([25, 62, 99], 9) == 2\nassert solution.maximizeWin([62, 79, 85, 89], 10) == 4\nassert solution.maximizeWin([3, 12, 13, 19, 28, 50, 71, 83], 6) == 3\nassert solution.maximizeWin([26, 30, 31, 60, 61, 67], 8) == 6\nassert solution.maximizeWin([16, 18, 22, 29, 37, 52, 60, 61, 99], 0) == 2\nassert solution.maximizeWin([97], 6) == 1\nassert solution.maximizeWin([78, 88, 99], 10) == 3\nassert solution.maximizeWin([10, 11, 20, 51, 61, 65, 95, 97], 7) == 4\nassert solution.maximizeWin([2, 4, 10, 12, 21, 40], 10) == 5\nassert solution.maximizeWin([6, 20, 29, 31, 35, 65, 82], 7) == 4\nassert solution.maximizeWin([14, 19, 30, 33, 48, 58, 79, 86, 97, 99], 8) == 4\nassert solution.maximizeWin([22, 32, 55, 56, 81, 89], 6) == 3\nassert solution.maximizeWin([42, 72], 6) == 2\nassert solution.maximizeWin([20, 40, 55, 97, 100], 0) == 2\nassert solution.maximizeWin([27, 36, 40, 56, 58, 72, 82, 88], 5) == 4\nassert solution.maximizeWin([57, 68, 69, 72, 82, 92], 1) == 3\nassert solution.maximizeWin([19], 7) == 1\nassert solution.maximizeWin([90], 9) == 1\nassert solution.maximizeWin([4, 47, 62, 96, 99], 2) == 2\nassert solution.maximizeWin([8, 34, 35, 40], 8) == 4\nassert solution.maximizeWin([21, 35, 59, 60, 66, 76, 77, 81, 83], 8) == 7\nassert solution.maximizeWin([9, 23, 24, 25, 58, 64, 68, 93, 99], 5) == 5\nassert solution.maximizeWin([2, 35, 40, 49, 69, 87], 1) == 2\nassert solution.maximizeWin([13, 25, 27, 40, 60, 61, 80], 8) == 4\nassert solution.maximizeWin([11, 41, 43, 73, 86, 88, 92], 2) == 4\nassert solution.maximizeWin([7, 20, 28, 36, 45, 79, 93, 99], 3) == 2\nassert solution.maximizeWin([12, 19, 79, 93], 10) == 3\nassert solution.maximizeWin([89], 2) == 1\nassert solution.maximizeWin([3, 43, 58, 60, 80, 81], 4) == 4\nassert solution.maximizeWin([28, 31, 57, 58, 64, 76], 3) == 4\nassert solution.maximizeWin([2, 40, 42, 59, 68, 84, 98, 100], 3) == 4\nassert solution.maximizeWin([10], 8) == 1\nassert solution.maximizeWin([7, 66], 1) == 2\nassert solution.maximizeWin([23, 42, 56, 72, 73, 79], 8) == 4\nassert solution.maximizeWin([1, 11, 15, 17, 32, 33, 44, 79, 91, 98], 0) == 2\nassert solution.maximizeWin([11, 13, 32, 39, 53, 66, 78, 86, 90, 98], 9) == 4\nassert solution.maximizeWin([20, 21, 35, 37, 39, 49, 52, 70, 74, 100], 8) == 5\nassert solution.maximizeWin([11, 41, 56, 65, 71, 75, 79, 83, 87, 91], 6) == 4\nassert solution.maximizeWin([35, 75, 87], 3) == 2\nassert solution.maximizeWin([9, 23, 28, 31, 61, 78, 90, 95], 3) == 3\nassert solution.maximizeWin([1, 4, 21, 44, 52, 64, 71, 75], 10) == 4\nassert solution.maximizeWin([36, 39, 41, 52, 55, 73, 93, 97], 5) == 5\nassert solution.maximizeWin([12, 26, 29, 38, 53, 88, 100], 4) == 3\nassert solution.maximizeWin([46], 0) == 1\nassert solution.maximizeWin([27, 49, 87, 94], 8) == 3\nassert solution.maximizeWin([7, 21, 52, 64, 71], 0) == 2\nassert solution.maximizeWin([9, 17, 20, 33, 59, 64, 78, 88, 100], 0) == 2\nassert solution.maximizeWin([8, 50, 53, 74, 77, 88], 2) == 2\nassert solution.maximizeWin([24, 35], 8) == 2\nassert solution.maximizeWin([22, 43, 74, 89], 6) == 2",
  "inefficient_solution": "class Solution:\n    def maximizeWin(self, prizePositions: List[int], k: int) -> int:\n        n = len(prizePositions)\n        mem = {}\n        f = {}\n        ans = 0\n        for i in range(n):\n            j = self.binarySearch(prizePositions, prizePositions[i] - k)\n            ans = max(ans, self.getAns(i, j, mem, f))\n            self.update(i, i, mem, f)\n        return ans\n\n    def binarySearch(self, prizePositions, target):\n        left, right = 0, len(prizePositions) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if prizePositions[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    def getAns(self, i, j, mem, f):\n        if (i, j) in mem:\n            return mem[(i, j)]\n        if i == j:\n            return 1\n        ans = 0\n        for x in range(i, j + 1):\n            ans = max(ans, self.getAns(x, x, mem, f) + j - x + 1)\n        mem[(i, j)] = ans\n        return ans\n\n    def update(self, i, j, mem, f):\n        if (i, j) in mem:\n            f[j + 1] = max(f.get(j + 1, 0), mem[(i, j)])\n            del mem[(i, j)]",
  "is_python": true
}