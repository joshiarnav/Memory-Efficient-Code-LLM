{
  "problem_idx": 2214,
  "task_name": "Minimum Health to Beat Game",
  "markdown_description": "\nYou are playing a game that has `n` levels numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `damage` where `damage[i]` is the amount of health you will lose to complete the `ith` level.\n\n\nYou are also given an integer `armor`. You may use your armor ability **at most once** during the game on **any** level which will protect you from **at most** `armor` damage.\n\n\nYou must complete the levels in order and your health must be **greater than** `0` at all times to beat the game.\n\n\nReturn *the **minimum** health you need to start with to beat the game.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** damage = [2,7,4,3], armor = 4\n**Output:** 13\n**Explanation:** One optimal way to beat the game starting at 13 health is:\nOn round 1, take 2 damage. You have 13 - 2 = 11 health.\nOn round 2, take 7 damage. You have 11 - 7 = 4 health.\nOn round 3, use your armor to protect you from 4 damage. You have 4 - 0 = 4 health.\nOn round 4, take 3 damage. You have 4 - 3 = 1 health.\nNote that 13 is the minimum health you need to start with to beat the game.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** damage = [2,5,3,4], armor = 7\n**Output:** 10\n**Explanation:** One optimal way to beat the game starting at 10 health is:\nOn round 1, take 2 damage. You have 10 - 2 = 8 health.\nOn round 2, use your armor to protect you from 5 damage. You have 8 - 0 = 8 health.\nOn round 3, take 3 damage. You have 8 - 3 = 5 health.\nOn round 4, take 4 damage. You have 5 - 4 = 1 health.\nNote that 10 is the minimum health you need to start with to beat the game.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** damage = [3,3,3], armor = 0\n**Output:** 10\n**Explanation:** One optimal way to beat the game starting at 10 health is:\nOn round 1, take 3 damage. You have 10 - 3 = 7 health.\nOn round 2, take 3 damage. You have 7 - 3 = 4 health.\nOn round 3, take 3 damage. You have 4 - 3 = 1 health.\nNote that you did not use your armor ability.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == damage.length`\n* `1 <= n <= 105`\n* `0 <= damage[i] <= 105`\n* `0 <= armor <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumHealth(self, damage: List[int], armor: int) -> int:\n        return sum(damage) - min(max(damage), armor) + 1\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minimumHealth(self, damage: List[int], armor: int) -> int:\n        return sum(damage) - min(max(damage), armor) + 1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random damage list\n    damage = random.choices(range(0, 101), k=random.randint(1, 10))\n    \n    # Generate a random armor value\n    armor = random.randint(0, 101)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumHealth(damage, armor)\n    \n    return damage, armor, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        damage, armor, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumHealth(damage, armor) == expected_result\n        print(f\"assert solution.minimumHealth({damage}, {armor}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumHealth({damage}, {armor}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumHealth([30, 88, 91, 2, 63, 10, 0, 73, 49, 100], 20) == 487\nassert solution.minimumHealth([27, 41], 65) == 28\nassert solution.minimumHealth([41, 7, 6, 61, 27, 53, 89, 40, 40, 14], 62) == 317\nassert solution.minimumHealth([32], 95) == 1\nassert solution.minimumHealth([77], 82) == 1\nassert solution.minimumHealth([27, 16, 37, 74, 14, 6, 36], 28) == 183\nassert solution.minimumHealth([26, 79, 87, 47], 89) == 153\nassert solution.minimumHealth([100, 74, 73], 47) == 201\nassert solution.minimumHealth([63, 50, 72, 65, 50, 43, 79, 42, 97], 27) == 535\nassert solution.minimumHealth([55], 58) == 1\nassert solution.minimumHealth([13, 21, 72, 75, 35, 73], 53) == 237\nassert solution.minimumHealth([46, 41], 76) == 42\nassert solution.minimumHealth([63, 39, 82, 65, 70, 21, 14], 52) == 303\nassert solution.minimumHealth([43, 74], 12) == 106\nassert solution.minimumHealth([22, 38, 42, 85, 23, 73, 96, 45, 61, 23], 22) == 487\nassert solution.minimumHealth([26, 36, 59, 96, 51, 23, 71, 1, 55, 8], 73) == 354\nassert solution.minimumHealth([76, 40, 32, 46, 3, 10], 12) == 196\nassert solution.minimumHealth([69, 25, 100, 12, 95], 65) == 237\nassert solution.minimumHealth([21, 15, 1, 75, 62, 67, 41, 22, 5, 59], 73) == 296\nassert solution.minimumHealth([46, 18, 43, 37, 94, 52, 91], 87) == 295\nassert solution.minimumHealth([2, 79, 31], 8) == 105\nassert solution.minimumHealth([47, 78, 92, 68, 24, 7, 92, 73, 11], 47) == 446\nassert solution.minimumHealth([29, 87], 46) == 71\nassert solution.minimumHealth([91, 14, 56, 67, 28, 13, 35], 33) == 272\nassert solution.minimumHealth([34], 4) == 31\nassert solution.minimumHealth([58, 100, 34, 69, 37, 6, 40, 47, 93, 5], 55) == 435\nassert solution.minimumHealth([99], 14) == 86\nassert solution.minimumHealth([91, 99, 60, 27, 4, 2, 2, 40], 63) == 263\nassert solution.minimumHealth([65, 63, 19, 37, 30, 5, 29], 79) == 184\nassert solution.minimumHealth([55, 24, 23, 52, 74], 30) == 199\nassert solution.minimumHealth([65, 53, 18, 96, 1, 52, 31], 62) == 255\nassert solution.minimumHealth([100, 45, 66, 4], 44) == 172\nassert solution.minimumHealth([10, 60, 1, 95, 73, 0, 50, 40], 11) == 319\nassert solution.minimumHealth([6, 13], 66) == 7\nassert solution.minimumHealth([43, 46, 42], 57) == 86\nassert solution.minimumHealth([54, 62, 36, 70], 42) == 181\nassert solution.minimumHealth([70, 21, 46, 67, 2, 97, 48, 21], 68) == 305\nassert solution.minimumHealth([78, 39, 48, 58, 95, 53, 49, 80, 99, 83], 39) == 644\nassert solution.minimumHealth([31, 23, 52, 26, 2, 31, 86, 10, 89], 65) == 286\nassert solution.minimumHealth([38, 10, 50, 6, 31, 2, 52, 64], 54) == 200\nassert solution.minimumHealth([95, 37, 100], 85) == 148\nassert solution.minimumHealth([3, 6], 32) == 4\nassert solution.minimumHealth([18, 94, 85], 25) == 173\nassert solution.minimumHealth([58, 33, 83, 82, 40, 23, 32, 45, 87, 18], 47) == 455\nassert solution.minimumHealth([9, 16, 13, 91, 24, 55, 86], 8) == 287\nassert solution.minimumHealth([75, 47, 80, 4], 66) == 141\nassert solution.minimumHealth([44], 70) == 1\nassert solution.minimumHealth([84], 54) == 31\nassert solution.minimumHealth([35, 11, 54, 47], 12) == 136\nassert solution.minimumHealth([99, 90], 67) == 123\nassert solution.minimumHealth([69, 13, 65, 85, 44, 12, 2], 86) == 206\nassert solution.minimumHealth([98, 9, 94, 49], 93) == 158\nassert solution.minimumHealth([19, 51, 11, 34, 100, 22, 27, 60, 89, 29], 69) == 374\nassert solution.minimumHealth([89, 37, 71, 71, 23], 15) == 277\nassert solution.minimumHealth([72, 66, 65, 14], 74) == 146\nassert solution.minimumHealth([25, 68, 46, 57], 45) == 152\nassert solution.minimumHealth([96], 65) == 32\nassert solution.minimumHealth([23, 6, 7, 87, 83, 8], 47) == 168\nassert solution.minimumHealth([88, 40, 2, 79, 59, 61, 80, 10], 82) == 338\nassert solution.minimumHealth([87, 36, 10], 5) == 129\nassert solution.minimumHealth([85, 51, 98, 54, 91, 4], 8) == 376\nassert solution.minimumHealth([93, 58, 45, 50, 50, 67, 85, 96, 34], 16) == 563\nassert solution.minimumHealth([10, 13, 18, 93, 69], 96) == 111\nassert solution.minimumHealth([67, 48, 69, 87, 23, 61, 75, 83, 47], 97) == 474\nassert solution.minimumHealth([54], 37) == 18\nassert solution.minimumHealth([96], 66) == 31\nassert solution.minimumHealth([15, 55, 82, 71, 73, 87, 82, 93], 37) == 522\nassert solution.minimumHealth([39, 45, 70, 33, 62, 34, 36, 43], 10) == 353\nassert solution.minimumHealth([74, 78, 37, 68, 9], 0) == 267\nassert solution.minimumHealth([53, 78, 99, 34, 50, 85, 52], 11) == 441\nassert solution.minimumHealth([11, 47, 1], 100) == 13\nassert solution.minimumHealth([1, 76, 33, 0, 47], 30) == 128\nassert solution.minimumHealth([53, 26, 13, 56, 33, 93], 10) == 265\nassert solution.minimumHealth([83, 88, 95, 95], 85) == 277\nassert solution.minimumHealth([35, 87, 57, 39, 38, 22, 69, 43, 7, 29], 63) == 364\nassert solution.minimumHealth([83, 69, 55, 55, 91, 17, 88, 59], 78) == 440\nassert solution.minimumHealth([15], 30) == 1\nassert solution.minimumHealth([28, 58, 26, 100], 56) == 157\nassert solution.minimumHealth([1, 24], 5) == 21\nassert solution.minimumHealth([24, 47, 71, 76], 96) == 143\nassert solution.minimumHealth([88, 36, 23, 66, 89, 84], 44) == 343\nassert solution.minimumHealth([28, 19, 34, 53], 25) == 110\nassert solution.minimumHealth([18, 55, 41, 44, 78, 78], 10) == 305\nassert solution.minimumHealth([50, 99, 8, 81], 5) == 234\nassert solution.minimumHealth([76, 36, 61, 55, 41, 69], 78) == 263\nassert solution.minimumHealth([86, 76], 46) == 117\nassert solution.minimumHealth([23], 57) == 1\nassert solution.minimumHealth([81, 37, 77, 62], 78) == 180\nassert solution.minimumHealth([84, 48, 0, 38, 61], 87) == 148\nassert solution.minimumHealth([73, 99, 56, 55, 48, 80, 30, 54, 35, 8], 11) == 528\nassert solution.minimumHealth([42], 90) == 1\nassert solution.minimumHealth([17, 49, 40, 18, 92, 59, 3], 27) == 252\nassert solution.minimumHealth([68, 89, 72, 98], 97) == 231\nassert solution.minimumHealth([99], 83) == 17\nassert solution.minimumHealth([66, 31, 23, 36, 50, 64, 58], 85) == 263\nassert solution.minimumHealth([94, 83, 13, 86, 3, 65, 4, 72, 97, 76], 88) == 506\nassert solution.minimumHealth([49, 85, 46, 82, 24], 53) == 234\nassert solution.minimumHealth([73, 39, 56, 61, 38, 73, 56, 37, 69], 7) == 496\nassert solution.minimumHealth([26, 94, 39, 88, 10, 61, 4, 7, 16, 92], 15) == 423\nassert solution.minimumHealth([98, 45, 76, 51, 92, 33], 54) == 342",
  "inefficient_solution": "class Solution:\n    def minimumHealth(self, damage: List[int], armor: int) -> int:\n        health = 0\n        for d in damage:\n            health += d\n            if health <= 0:\n                health = 0\n                for x in damage:\n                    health += x\n                    if x <= armor:\n                        health -= x\n        return health + 1",
  "is_python": true
}