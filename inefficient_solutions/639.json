{
  "problem_idx": 639,
  "task_name": "Decode Ways II",
  "markdown_description": "\nA message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n\n\n```\n\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\n```\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into:\n\n\n* `\"AAJF\"` with the grouping `(1 1 10 6)`\n* `\"KJF\"` with the grouping `(11 10 6)`\n\n\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `'F'` since `\"6\"` is different from `\"06\"`.\n\n\n**In addition** to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). For example, the encoded message `\"1*\"` may represent any of the encoded messages `\"11\"`, `\"12\"`, `\"13\"`, `\"14\"`, `\"15\"`, `\"16\"`, `\"17\"`, `\"18\"`, or `\"19\"`. Decoding `\"1*\"` is equivalent to decoding **any** of the encoded messages it can represent.\n\n\nGiven a string `s` consisting of digits and `'*'` characters, return *the **number** of ways to **decode** it*.\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"*\"\n**Output:** 9\n**Explanation:** The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\nHence, there are a total of 9 ways to decode \"*\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"1*\"\n**Output:** 18\n**Explanation:** The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"2*\"\n**Output:** 15\n**Explanation:** The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s[i]` is a digit or `'*'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        mod = int(1e9 + 7)\n        n = len(s)\n\n        # dp[i - 2], dp[i - 1], dp[i]\n        a, b, c = 0, 1, 0\n        for i in range(1, n + 1):\n            # 1 digit\n            if s[i - 1] == \"*\":\n                c = 9 * b % mod\n            elif s[i - 1] != \"0\":\n                c = b\n            else:\n                c = 0\n\n            # 2 digits\n            if i > 1:\n                if s[i - 2] == \"*\" and s[i - 1] == \"*\":\n                    c = (c + 15 * a) % mod\n                elif s[i - 2] == \"*\":\n                    if s[i - 1] > \"6\":\n                        c = (c + a) % mod\n                    else:\n                        c = (c + 2 * a) % mod\n                elif s[i - 1] == \"*\":\n                    if s[i - 2] == \"1\":\n                        c = (c + 9 * a) % mod\n                    elif s[i - 2] == \"2\":\n                        c = (c + 6 * a) % mod\n                elif (\n                    s[i - 2] != \"0\"\n                    and (ord(s[i - 2]) - ord(\"0\")) * 10 + ord(s[i - 1]) - ord(\"0\") <= 26\n                ):\n                    c = (c + a) % mod\n\n            a, b = b, c\n\n        return c\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        mod = int(1e9 + 7)\n        n = len(s)\n\n        # dp[i - 2], dp[i - 1], dp[i]\n        a, b, c = 0, 1, 0\n        for i in range(1, n + 1):\n            # 1 digit\n            if s[i - 1] == \"*\":\n                c = 9 * b % mod\n            elif s[i - 1] != \"0\":\n                c = b\n            else:\n                c = 0\n\n            # 2 digits\n            if i > 1:\n                if s[i - 2] == \"*\" and s[i - 1] == \"*\":\n                    c = (c + 15 * a) % mod\n                elif s[i - 2] == \"*\":\n                    if s[i - 1] > \"6\":\n                        c = (c + a) % mod\n                    else:\n                        c = (c + 2 * a) % mod\n                elif s[i - 1] == \"*\":\n                    if s[i - 2] == \"1\":\n                        c = (c + 9 * a) % mod\n                    elif s[i - 2] == \"2\":\n                        c = (c + 6 * a) % mod\n                elif (\n                    s[i - 2] != \"0\"\n                    and (ord(s[i - 2]) - ord(\"0\")) * 10 + ord(s[i - 1]) - ord(\"0\") <= 26\n                ):\n                    c = (c + a) % mod\n\n            a, b = b, c\n\n        return c\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = \"\"\n    for _ in range(random.randint(1, 10)):\n        s += random.choice([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"*\"])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numDecodings(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numDecodings(s) == expected_result\n        print(f\"assert solution.numDecodings({s}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numDecodings({s}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numDecodings(9) == 1\nassert solution.numDecodings(6) == 1\nassert solution.numDecodings(*196696749) == 20\nassert solution.numDecodings(983) == 1\nassert solution.numDecodings(283739) == 1\nassert solution.numDecodings(*22261) == 51\nassert solution.numDecodings(8*92539227) == 40\nassert solution.numDecodings(*8366) == 10\nassert solution.numDecodings(*26) == 20\nassert solution.numDecodings(816437) == 2\nassert solution.numDecodings(6347644686) == 1\nassert solution.numDecodings(124) == 3\nassert solution.numDecodings(4) == 1\nassert solution.numDecodings(69443**2) == 114\nassert solution.numDecodings(6157871952) == 4\nassert solution.numDecodings(948) == 1\nassert solution.numDecodings(144) == 2\nassert solution.numDecodings(9154879) == 2\nassert solution.numDecodings(7679671523) == 4\nassert solution.numDecodings(18314) == 4\nassert solution.numDecodings(69928) == 1\nassert solution.numDecodings(51662) == 2\nassert solution.numDecodings(1) == 1\nassert solution.numDecodings(4352312) == 4\nassert solution.numDecodings(7) == 1\nassert solution.numDecodings(*5*5542) == 121\nassert solution.numDecodings(6423333) == 2\nassert solution.numDecodings(3*) == 9\nassert solution.numDecodings(6) == 1\nassert solution.numDecodings(2461736) == 4\nassert solution.numDecodings(44*75636) == 10\nassert solution.numDecodings(1523714) == 8\nassert solution.numDecodings(424437345) == 2\nassert solution.numDecodings(997912574) == 3\nassert solution.numDecodings(93) == 1\nassert solution.numDecodings(43) == 1\nassert solution.numDecodings(9989552899) == 1\nassert solution.numDecodings(9*48) == 11\nassert solution.numDecodings(14) == 2\nassert solution.numDecodings(6577734) == 1\nassert solution.numDecodings(*) == 9\nassert solution.numDecodings(3) == 1\nassert solution.numDecodings(36296245) == 2\nassert solution.numDecodings(8574*93234) == 20\nassert solution.numDecodings(5967) == 1\nassert solution.numDecodings(791439) == 2\nassert solution.numDecodings(233245877) == 4\nassert solution.numDecodings(184477) == 2\nassert solution.numDecodings(36) == 1\nassert solution.numDecodings(676*85) == 10\nassert solution.numDecodings(1) == 1\nassert solution.numDecodings(326327) == 2\nassert solution.numDecodings(137) == 2\nassert solution.numDecodings(91767*26) == 40\nassert solution.numDecodings(23356**22) == 420\nassert solution.numDecodings(995) == 1\nassert solution.numDecodings(8) == 1\nassert solution.numDecodings(332*35) == 17\nassert solution.numDecodings(*876) == 10\nassert solution.numDecodings(95*7415) == 20\nassert solution.numDecodings(74) == 1\nassert solution.numDecodings(7*269) == 20\nassert solution.numDecodings(7181) == 2\nassert solution.numDecodings(275*) == 9\nassert solution.numDecodings(649*7) == 10\nassert solution.numDecodings(3) == 1\nassert solution.numDecodings(18749) == 2\nassert solution.numDecodings(48948825) == 2\nassert solution.numDecodings(7988*24) == 20\nassert solution.numDecodings(55*725) == 20\nassert solution.numDecodings(15196534) == 4\nassert solution.numDecodings(9) == 1\nassert solution.numDecodings(45332) == 1\nassert solution.numDecodings(9764292*1*) == 288\nassert solution.numDecodings(219159*73) == 60\nassert solution.numDecodings(8) == 1\nassert solution.numDecodings(9963975*8) == 10\nassert solution.numDecodings(614) == 2\nassert solution.numDecodings(797*657) == 11\nassert solution.numDecodings(8*3) == 11\nassert solution.numDecodings(*5) == 11\nassert solution.numDecodings(1717*53422) == 88\nassert solution.numDecodings(95376621) == 2\nassert solution.numDecodings(97) == 1\nassert solution.numDecodings(81952764) == 2\nassert solution.numDecodings(522476) == 3\nassert solution.numDecodings(3523) == 2\nassert solution.numDecodings(321679) == 3\nassert solution.numDecodings(*7*668) == 110\nassert solution.numDecodings(7615423*) == 36\nassert solution.numDecodings(4366*37) == 11\nassert solution.numDecodings(*9827) == 10\nassert solution.numDecodings(2746*) == 9\nassert solution.numDecodings(48188) == 2\nassert solution.numDecodings(*43185*) == 198\nassert solution.numDecodings(942746) == 1\nassert solution.numDecodings(3358) == 1\nassert solution.numDecodings(84*6*22426) == 682\nassert solution.numDecodings(2) == 1\nassert solution.numDecodings(*396234513) == 44",
  "inefficient_solution": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        mod = int(1e9 + 7)\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp_cnt = [0] * (n + 1)\n        for i in range(n):\n            dp[i + 1] = 0\n            dp_cnt[i + 1] = 0\n        for i in range(n):\n            for j in range(i, n):\n                if s[j] == \"*\":\n                    if i == j:\n                        dp_cnt[i + 1] += 9\n                    else:\n                        dp_cnt[i + 1] += 15\n                elif s[j] != \"0\":\n                    if i == j:\n                        dp_cnt[i + 1] += 1\n                    else:\n                        dp_cnt[i + 1] += 1\n                if i > 0:\n                    if s[i - 1] == \"*\" and s[j] == \"*\":\n                        dp_cnt[i + 1] = (dp_cnt[i + 1] + 15 * dp_cnt[i]) % mod\n                        if (j - i + 1) >= 2:\n                            dp[j - i + 2] = (dp_cnt[i] * 15) % mod\n                    elif s[i - 1] == \"*\":\n                        if s[j] > \"6\":\n                            dp_cnt[i + 1] = (dp_cnt[i + 1] + dp_cnt[i]) % mod\n                        else:\n                            dp_cnt[i + 1] = (dp_cnt[i + 1] + 2 * dp_cnt[i]) % mod\n                            dp[j - i + 2] = (dp_cnt[i] * 2) % mod\n                    elif s[j] == \"*\":\n                        if s[i - 1] == \"1\":\n                            dp_cnt[i + 1] = (dp_cnt[i + 1] + 9 * dp_cnt[i]) % mod\n                            dp[j - i + 2] = (dp_cnt[i] * 9) % mod\n                        elif s[i - 1] == \"2\":\n                            dp_cnt[i + 1] = (dp_cnt[i + 1] + 6 * dp_cnt[i]) % mod\n                            dp[j - i + 2] = (dp_cnt[i] * 6) % mod\n                    elif (\n                        s[i - 1] != \"0\"\n                        and (ord(s[i - 1]) - ord(\"0\")) * 10 + ord(s[j]) - ord(\"0\") <= 26\n                    ):\n                        dp_cnt[i + 1] = (dp_cnt[i + 1] + dp_cnt[i]) % mod\n                        dp[j - i + 2] = (dp_cnt[i]) % mod\n        return dp_cnt[n]",
  "is_python": true
}