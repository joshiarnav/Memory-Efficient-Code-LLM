{
  "problem_idx": 1187,
  "task_name": "Make Array Strictly Increasing",
  "markdown_description": "\nGiven two integer arrays\u00a0`arr1` and `arr2`, return the minimum number of operations (possibly zero) needed\u00a0to make `arr1` strictly increasing.\n\n\nIn one operation, you can choose two indices\u00a0`0 <=\u00a0i < arr1.length`\u00a0and\u00a0`0 <= j < arr2.length`\u00a0and do the assignment\u00a0`arr1[i] = arr2[j]`.\n\n\nIf there is no way to make\u00a0`arr1`\u00a0strictly increasing,\u00a0return\u00a0`-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\n**Output:** 1\n**Explanation:** Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr1 = [1,5,3,6,7], arr2 = [4,3,1]\n**Output:** 2\n**Explanation:** Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\n**Output:** -1\n**Explanation:** You can't make arr1 strictly increasing.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr1.length, arr2.length <= 2000`\n* `0 <= arr1[i], arr2[i] <= 10^9`\n\n\n\u00a0\n\n\n",
  "canonical_solution": "class Solution:\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n        arr2.sort()\n        m = 0\n        for x in arr2:\n            if m == 0 or x != arr2[m - 1]:\n                arr2[m] = x\n                m += 1\n        arr2 = arr2[:m]\n        arr = [-inf] + arr1 + [inf]\n        n = len(arr)\n        f = [inf] * n\n        f[0] = 0\n        for i in range(1, n):\n            if arr[i - 1] < arr[i]:\n                f[i] = f[i - 1]\n            j = bisect_left(arr2, arr[i])\n            for k in range(1, min(i - 1, j) + 1):\n                if arr[i - k - 1] < arr2[j - k]:\n                    f[i] = min(f[i], f[i - k - 1] + k)\n        return -1 if f[n - 1] >= inf else f[n - 1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def makeArrayIncreasing(self, arr1, arr2):\n        arr2.sort()\n        m = 0\n        for x in arr2:\n            if m == 0 or x != arr2[m - 1]:\n                arr2[m] = x\n                m += 1\n        arr2 = arr2[:m]\n        arr = [-float(\"inf\")] + arr1 + [float(\"inf\")]\n        n = len(arr)\n        f = [float(\"inf\")] * n\n        f[0] = 0\n        for i in range(1, n):\n            if arr[i - 1] < arr[i]:\n                f[i] = f[i - 1]\n            j = bisect_left(arr2, arr[i])\n            for k in range(1, min(i - 1, j) + 1):\n                if arr[i - k - 1] < arr2[j - k]:\n                    f[i] = min(f[i], f[i - k - 1] + k)\n        return -1 if f[n - 1] >= float(\"inf\") else f[n - 1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random arrays\n    arr1 = random.sample(range(1, 101), random.randint(2, 10))\n    arr2 = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.makeArrayIncreasing(arr1, arr2)\n\n    return arr1, arr2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr1, arr2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.makeArrayIncreasing(arr1, arr2) == expected_result\n        print(f\"assert solution.makeArrayIncreasing({arr1}, {arr2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.makeArrayIncreasing({arr1}, {arr2}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.makeArrayIncreasing([48, 77, 84, 30, 88, 14, 1], [1, 77]) == -1\nassert solution.makeArrayIncreasing([17, 88, 36, 83, 44, 50, 87], [27, 54, 58]) == -1\nassert solution.makeArrayIncreasing([47, 40, 65, 17, 52, 14, 82, 56], [25, 81]) == -1\nassert solution.makeArrayIncreasing([93, 49], [42, 65, 82, 92, 94]) == 1\nassert solution.makeArrayIncreasing([84, 4, 56, 8, 92, 93, 87, 38], [14, 35, 59, 92]) == -1\nassert solution.makeArrayIncreasing([29, 48, 46, 72, 79, 39, 59, 62, 28], [68, 79]) == -1\nassert solution.makeArrayIncreasing([79, 93, 12, 82, 60, 36, 5, 51], [24, 27, 35, 78]) == -1\nassert solution.makeArrayIncreasing([4, 1, 31, 55, 34, 75, 25, 14, 44, 18], [7, 14, 15, 16, 36, 43, 54, 66, 80, 96]) == 8\nassert solution.makeArrayIncreasing([38, 29, 26, 18], [4, 15, 48, 57, 61, 78]) == 3\nassert solution.makeArrayIncreasing([9, 33, 93, 22], [34, 39, 40, 50, 98]) == 1\nassert solution.makeArrayIncreasing([72, 64, 19], [1, 90, 100]) == 2\nassert solution.makeArrayIncreasing([8, 7], [40, 52, 85]) == 1\nassert solution.makeArrayIncreasing([74, 32, 17, 66, 22, 41], [41, 88]) == -1\nassert solution.makeArrayIncreasing([47, 26, 46, 75, 66, 93, 16, 23, 96, 25], [17, 24, 25, 36, 51, 57, 99]) == -1\nassert solution.makeArrayIncreasing([47, 85, 100, 6, 58, 12], [35, 82]) == -1\nassert solution.makeArrayIncreasing([25, 47, 37, 80, 38, 88, 86, 100], [12, 16, 24, 49, 68, 76, 90, 92, 93, 100]) == 4\nassert solution.makeArrayIncreasing([99, 84, 5, 68, 58, 86, 78, 43, 29], [74, 77, 97]) == -1\nassert solution.makeArrayIncreasing([44, 97, 15, 17, 47], [5, 14, 23, 33, 37, 69, 80, 84]) == 2\nassert solution.makeArrayIncreasing([51, 4, 9, 37], [30, 33, 57, 62, 63, 78, 85, 86]) == 3\nassert solution.makeArrayIncreasing([70, 19, 41, 100, 91, 97, 2, 29, 55], [8, 25, 49, 62]) == -1\nassert solution.makeArrayIncreasing([8, 60], [22, 26, 37, 39, 61, 65, 94]) == 0\nassert solution.makeArrayIncreasing([68, 35, 62, 80, 11, 45, 71, 72, 27], [4, 5, 6, 32, 36, 57, 62, 65, 83]) == 6\nassert solution.makeArrayIncreasing([54, 55, 70, 62, 10], [8, 41, 64, 68, 73, 83, 90]) == 2\nassert solution.makeArrayIncreasing([49, 58, 50, 61, 4, 87], [49, 50, 57, 63, 65, 68, 87]) == 3\nassert solution.makeArrayIncreasing([45, 61, 85, 55, 6, 75, 53, 94, 1], [8, 14, 15, 27, 41, 66, 71, 83, 91]) == 9\nassert solution.makeArrayIncreasing([7, 8, 96, 98, 89, 50, 55, 87, 2, 16], [6, 25, 59, 75, 83, 88, 90]) == -1\nassert solution.makeArrayIncreasing([43, 73, 11, 93, 61], [3, 9, 11, 12, 86, 90, 93, 99]) == 2\nassert solution.makeArrayIncreasing([39, 38, 23, 30, 81, 18, 87, 36, 68], [7, 49, 55, 58]) == -1\nassert solution.makeArrayIncreasing([11, 49, 58, 27, 95, 23, 75], [17, 95]) == -1\nassert solution.makeArrayIncreasing([34, 53, 66, 26], [15, 20, 22, 35, 50, 51, 61, 71, 82]) == 1\nassert solution.makeArrayIncreasing([10, 32], [31, 51, 57, 59, 69, 93, 97]) == 0\nassert solution.makeArrayIncreasing([53, 89, 17, 54, 50, 38, 72], [19, 23, 27, 41, 50, 67, 72, 87, 95]) == 5\nassert solution.makeArrayIncreasing([74, 26, 69, 68, 14, 85, 73, 50], [6, 37]) == -1\nassert solution.makeArrayIncreasing([79, 93, 72, 85, 64, 17], [35, 81]) == -1\nassert solution.makeArrayIncreasing([20, 92, 52, 96, 23, 26, 37], [21, 35, 74]) == -1\nassert solution.makeArrayIncreasing([35, 2, 78, 51, 57, 27, 24, 21, 99], [15, 54, 56, 65, 68, 72, 100]) == -1\nassert solution.makeArrayIncreasing([54, 99], [36, 43]) == 0\nassert solution.makeArrayIncreasing([2, 4, 70, 44, 60, 43, 14, 30], [12, 67, 73, 89, 98]) == 4\nassert solution.makeArrayIncreasing([72, 9, 43, 58, 42, 27], [11, 22, 64, 68, 86, 87]) == 4\nassert solution.makeArrayIncreasing([3, 33, 16, 20, 13, 19, 22, 84], [9, 15, 32, 35, 70, 71, 78, 87, 88]) == 4\nassert solution.makeArrayIncreasing([13, 2, 79, 73, 89], [5, 7, 9, 38, 61, 79, 84, 97, 99]) == 2\nassert solution.makeArrayIncreasing([99, 44, 95, 28, 50, 59, 6, 51, 25, 96], [19, 37, 40, 59, 66, 69, 96]) == -1\nassert solution.makeArrayIncreasing([99, 7, 59, 12, 45, 32, 82], [12, 25, 43, 74]) == -1\nassert solution.makeArrayIncreasing([46, 94, 86], [38, 50, 53, 58, 60, 63, 84, 97]) == 1\nassert solution.makeArrayIncreasing([6, 47, 82, 42, 76, 85, 72, 20], [1, 10, 27, 44, 46, 50, 53, 87, 89, 97]) == 4\nassert solution.makeArrayIncreasing([67, 87, 78, 51, 7, 63, 88, 95, 11], [8, 24, 61]) == -1\nassert solution.makeArrayIncreasing([7, 13, 52, 77, 60], [24, 57, 62]) == 1\nassert solution.makeArrayIncreasing([31, 29, 2, 24, 74, 78, 88, 25, 97], [9, 55]) == -1\nassert solution.makeArrayIncreasing([8, 6], [1, 12, 17, 59, 80, 86, 100]) == 1\nassert solution.makeArrayIncreasing([7, 46], [1, 17, 26, 39, 42, 63, 66, 68, 81, 91]) == 0\nassert solution.makeArrayIncreasing([1, 58], [10, 28, 29, 35, 44, 52, 61, 65, 74]) == 0\nassert solution.makeArrayIncreasing([50, 3, 17, 63, 62, 73], [9, 41, 45, 54, 69, 74]) == 4\nassert solution.makeArrayIncreasing([50, 1, 80, 32, 9, 60, 46, 52], [2, 7, 19, 22, 37, 40, 42, 48, 51, 67]) == 5\nassert solution.makeArrayIncreasing([26, 4, 97], [2, 22, 30, 34, 38, 55, 73, 84, 90]) == 1\nassert solution.makeArrayIncreasing([56, 70, 97, 27, 38, 76], [30, 32, 42, 55, 75, 82]) == 5\nassert solution.makeArrayIncreasing([55, 73, 19], [7, 31, 33, 44, 62, 73, 89, 97]) == 1\nassert solution.makeArrayIncreasing([65, 98, 1, 15, 3, 47, 69], [7, 17, 36, 43, 71, 75, 84, 86, 90]) == 7\nassert solution.makeArrayIncreasing([25, 93, 53, 21, 67, 70, 85, 66], [17, 80]) == -1\nassert solution.makeArrayIncreasing([57, 37, 33, 22, 19], [11, 34, 35, 44, 53, 98, 99]) == 4\nassert solution.makeArrayIncreasing([96, 42], [16, 41, 47, 74, 80, 85, 95, 97, 100]) == 1\nassert solution.makeArrayIncreasing([27, 75], [3, 6, 16, 34, 45, 87, 91, 100]) == 0\nassert solution.makeArrayIncreasing([24, 95, 91, 36], [24, 42, 49, 54, 61, 77, 85, 93, 96]) == 2\nassert solution.makeArrayIncreasing([4, 83, 62, 64, 100, 94, 52, 32, 80, 6], [16, 21, 23, 25, 33, 55, 89, 92]) == 7\nassert solution.makeArrayIncreasing([62, 61], [7, 18, 27, 38, 51, 56, 68, 78, 90]) == 1\nassert solution.makeArrayIncreasing([36, 25, 99, 45], [4, 24, 39, 47, 62, 79, 84, 89, 96]) == 2\nassert solution.makeArrayIncreasing([40, 78, 61, 64, 49, 95, 47, 21], [1, 11, 28, 35, 38, 43, 68, 72, 99]) == 7\nassert solution.makeArrayIncreasing([34, 82, 8, 3, 73, 52, 59, 99], [10, 39, 67, 75, 77, 86]) == -1\nassert solution.makeArrayIncreasing([42, 50, 34, 35, 73, 8, 71], [21, 28, 66, 75, 83, 91]) == 4\nassert solution.makeArrayIncreasing([55, 90, 37, 20, 73, 94, 15], [25, 30, 42]) == -1\nassert solution.makeArrayIncreasing([10, 4, 66], [6, 30, 33, 47, 48, 51, 66, 67, 73]) == 1\nassert solution.makeArrayIncreasing([40, 54, 56, 57], [29, 34, 35, 88]) == 0\nassert solution.makeArrayIncreasing([95, 87, 64, 50, 23, 44, 58], [5, 24, 27, 28, 41, 57, 59]) == 5\nassert solution.makeArrayIncreasing([63, 33, 70], [37, 55, 79, 93, 96]) == 2\nassert solution.makeArrayIncreasing([22, 35, 93, 63, 7], [60, 76, 87]) == 2\nassert solution.makeArrayIncreasing([77, 65, 63, 40, 66, 42, 22, 12, 39, 84], [27, 55, 57, 87, 92, 94]) == -1\nassert solution.makeArrayIncreasing([35, 1, 34, 56, 11, 20], [14, 62, 75]) == -1\nassert solution.makeArrayIncreasing([40, 93, 36, 8, 56, 35, 76, 3], [3, 14, 28, 66, 74, 76, 77, 86, 89, 93]) == 7\nassert solution.makeArrayIncreasing([30, 45, 99, 13, 6, 84, 10, 12, 40, 34], [2, 11, 15, 18, 22, 55, 90, 96]) == -1\nassert solution.makeArrayIncreasing([36, 56, 90], [2, 23, 28, 34, 37, 44]) == 0\nassert solution.makeArrayIncreasing([4, 33], [4, 12, 15, 24, 30, 32, 41, 63, 73, 92]) == 0\nassert solution.makeArrayIncreasing([58, 61, 49, 56, 35, 51, 77], [8, 20, 29, 72, 75, 94]) == 4\nassert solution.makeArrayIncreasing([78, 3, 58, 38, 41, 62, 70, 44, 100], [25, 30, 38, 50, 83, 84, 87, 92]) == 8\nassert solution.makeArrayIncreasing([73, 77, 45, 52, 46], [8, 11, 41, 93, 99]) == 3\nassert solution.makeArrayIncreasing([2, 1, 41, 58, 34, 33], [29, 50, 61, 70, 73, 74, 88]) == 3\nassert solution.makeArrayIncreasing([28, 57, 60, 32, 4, 75, 19], [2, 4, 19, 49]) == -1\nassert solution.makeArrayIncreasing([66, 9, 22, 16], [8, 38, 43, 44, 59, 91, 92, 98]) == 2\nassert solution.makeArrayIncreasing([100, 63], [30, 49, 50, 52, 53, 80, 86]) == 1\nassert solution.makeArrayIncreasing([97, 13], [9, 16, 21, 25, 26, 57, 69, 81, 90]) == 1\nassert solution.makeArrayIncreasing([65, 25, 87, 33, 44, 49], [5, 39, 41, 75, 82, 97]) == 3\nassert solution.makeArrayIncreasing([94, 14, 48, 56, 49, 81, 98, 20, 3, 79], [24, 32, 36, 39, 48, 64, 69, 71]) == -1\nassert solution.makeArrayIncreasing([31, 14, 43], [1, 6, 26, 71, 79, 99, 100]) == 1\nassert solution.makeArrayIncreasing([49, 11, 81, 89, 13, 25], [17, 32, 39, 44, 47, 52, 62, 94, 100]) == 3\nassert solution.makeArrayIncreasing([68, 80, 49, 55, 17, 90, 47, 31], [15, 28, 39, 46, 48, 56, 83, 86, 98]) == 6\nassert solution.makeArrayIncreasing([8, 77, 68, 15, 93, 1, 69, 10, 43], [11, 43, 75, 98]) == -1\nassert solution.makeArrayIncreasing([72, 64, 68, 90, 78, 54, 4, 30, 41], [12, 15, 16, 21, 22, 25, 30, 34, 99]) == 8\nassert solution.makeArrayIncreasing([58, 21, 88], [4, 12, 21, 58, 62, 64, 92]) == 1\nassert solution.makeArrayIncreasing([24, 70, 85, 99, 56], [22, 57, 65, 70, 84]) == 4\nassert solution.makeArrayIncreasing([61, 94, 23, 17, 8, 29, 81], [3, 9, 27, 42, 55, 57, 63, 66, 84, 86]) == 5\nassert solution.makeArrayIncreasing([65, 68, 23], [5, 15, 24, 45]) == 2\nassert solution.makeArrayIncreasing([22, 85, 18, 43, 39, 59, 94, 99, 30, 67], [9, 58, 84]) == -1",
  "inefficient_solution": "class Solution:\n    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:\n        arr2.sort()\n        arr2_copy = []\n        for i in range(len(arr2)):\n            if i == 0 or arr2[i] != arr2[i - 1]:\n                arr2_copy.append(arr2[i])\n        arr2 = arr2_copy\n        \n        arr = [-float('inf')] * len(arr1)\n        for i in range(len(arr1)):\n            arr[i] = arr1[i]\n        arr.append(float('inf'))\n        \n        dp = {}\n        dp[0] = 0\n        for i in range(1, len(arr)):\n            dp_copy = {}\n            for j in range(i):\n                dp_copy[j] = dp[j]\n            for j in range(i):\n                dp[j] = float('inf')\n            for j in range(i - 1, -1, -1):\n                if arr[j] < arr[i]:\n                    dp[i] = min(dp[i], dp[j])\n            for j in range(len(arr2)):\n                if arr2[j] < arr[i]:\n                    for k in range(i - 1, -1, -1):\n                        if arr[k] >= arr2[j]:\n                            dp[i] = min(dp[i], dp[k] + 1)\n                            break\n        if dp[len(arr) - 1] >= float('inf'):\n            return -1\n        else:\n            return dp[len(arr) - 1]",
  "is_python": true
}