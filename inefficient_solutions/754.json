{
  "problem_idx": 754,
  "task_name": "Reach a Number",
  "markdown_description": "\nYou are standing at position `0` on an infinite number line. There is a destination at position `target`.\n\n\nYou can make some number of moves `numMoves` so that:\n\n\n* On each move, you can either go left or right.\n* During the `ith` move (starting from `i == 1` to `i == numMoves`), you take `i` steps in the chosen direction.\n\n\nGiven the integer `target`, return *the **minimum** number of moves required (i.e., the minimum* `numMoves`*) to reach the destination*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** target = 2\n**Output:** 3\n**Explanation:**\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to -1 (2 steps).\nOn the 3rd move, we step from -1 to 2 (3 steps).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** target = 3\n**Output:** 2\n**Explanation:**\nOn the 1st move, we step from 0 to 1 (1 step).\nOn the 2nd move, we step from 1 to 3 (2 steps).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `-109 <= target <= 109`\n* `target != 0`\n\n\n",
  "canonical_solution": "class Solution:\n    def reachNumber(self, target: int) -> int:\n        target = abs(target)\n        s = k = 0\n        while 1:\n            if s >= target and (s - target) % 2 == 0:\n                return k\n            k += 1\n            s += k\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def reachNumber(self, target: int) -> int:\n        target = abs(target)\n        s = k = 0\n        while 1:\n            if s >= target and (s - target) % 2 == 0:\n                return k\n            k += 1\n            s += k\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random target\n    target = random.randint(-10**9, 10**9)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reachNumber(target)\n\n    return target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reachNumber(target) == expected_result\n        print(f\"assert solution.reachNumber({target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.reachNumber({target}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.reachNumber(319697706) == 25287\nassert solution.reachNumber(651155756) == 36088\nassert solution.reachNumber(-289867697) == 24078\nassert solution.reachNumber(42864468) == 9259\nassert solution.reachNumber(733236850) == 38295\nassert solution.reachNumber(-226060402) == 21263\nassert solution.reachNumber(665033385) == 36470\nassert solution.reachNumber(-533129817) == 32654\nassert solution.reachNumber(278112474) == 23584\nassert solution.reachNumber(584932322) == 34203\nassert solution.reachNumber(17750403) == 5958\nassert solution.reachNumber(361235796) == 26879\nassert solution.reachNumber(-730671551) == 38229\nassert solution.reachNumber(-195805455) == 19789\nassert solution.reachNumber(418723731) == 28941\nassert solution.reachNumber(532727281) == 32641\nassert solution.reachNumber(138925891) == 16669\nassert solution.reachNumber(89967913) == 13414\nassert solution.reachNumber(-846676944) == 41151\nassert solution.reachNumber(-669377249) == 36589\nassert solution.reachNumber(189384403) == 19462\nassert solution.reachNumber(883771898) == 42043\nassert solution.reachNumber(482314226) == 31059\nassert solution.reachNumber(540509846) == 32879\nassert solution.reachNumber(-850958974) == 41255\nassert solution.reachNumber(-659034535) == 36305\nassert solution.reachNumber(11285953) == 4753\nassert solution.reachNumber(6187438) == 3519\nassert solution.reachNumber(498616040) == 31579\nassert solution.reachNumber(1945021) == 1973\nassert solution.reachNumber(254550102) == 22563\nassert solution.reachNumber(-30650096) == 7831\nassert solution.reachNumber(-46054114) == 9599\nassert solution.reachNumber(175703053) == 18746\nassert solution.reachNumber(-292607750) == 24191\nassert solution.reachNumber(974109863) == 44141\nassert solution.reachNumber(654699) == 1145\nassert solution.reachNumber(-476163577) == 30861\nassert solution.reachNumber(965554886) == 43944\nassert solution.reachNumber(-76587874) == 12376\nassert solution.reachNumber(973345944) == 44123\nassert solution.reachNumber(466938420) == 30559\nassert solution.reachNumber(274906353) == 23449\nassert solution.reachNumber(676655877) == 36789\nassert solution.reachNumber(640478405) == 35790\nassert solution.reachNumber(-91277180) == 13511\nassert solution.reachNumber(644627313) == 35906\nassert solution.reachNumber(686253373) == 37049\nassert solution.reachNumber(635238872) == 35644\nassert solution.reachNumber(-880404602) == 41963\nassert solution.reachNumber(-615579030) == 35088\nassert solution.reachNumber(94000915) == 13713\nassert solution.reachNumber(217881643) == 20877\nassert solution.reachNumber(594483847) == 34481\nassert solution.reachNumber(-557686823) == 33397\nassert solution.reachNumber(917596) == 1355\nassert solution.reachNumber(596043379) == 34529\nassert solution.reachNumber(759693252) == 38979\nassert solution.reachNumber(608907029) == 34897\nassert solution.reachNumber(175082265) == 18713\nassert solution.reachNumber(860854073) == 41493\nassert solution.reachNumber(-602229091) == 34705\nassert solution.reachNumber(903029733) == 42498\nassert solution.reachNumber(-998158083) == 44681\nassert solution.reachNumber(-21079209) == 6493\nassert solution.reachNumber(435956127) == 29529\nassert solution.reachNumber(606149987) == 34818\nassert solution.reachNumber(492320734) == 31379\nassert solution.reachNumber(180639937) == 19009\nassert solution.reachNumber(-8125250) == 4031\nassert solution.reachNumber(-520403622) == 32263\nassert solution.reachNumber(586625581) == 34253\nassert solution.reachNumber(-759624240) == 38979\nassert solution.reachNumber(-741756610) == 38516\nassert solution.reachNumber(-958545150) == 43787\nassert solution.reachNumber(-720089750) == 37951\nassert solution.reachNumber(724169641) == 38057\nassert solution.reachNumber(104467038) == 14455\nassert solution.reachNumber(-44177869) == 9401\nassert solution.reachNumber(124014223) == 15749\nassert solution.reachNumber(962740052) == 43880\nassert solution.reachNumber(37481585) == 8658\nassert solution.reachNumber(534767127) == 32705\nassert solution.reachNumber(142679100) == 16895\nassert solution.reachNumber(914771661) == 42773\nassert solution.reachNumber(-56006065) == 10585\nassert solution.reachNumber(756504511) == 38897\nassert solution.reachNumber(-525419175) == 32417\nassert solution.reachNumber(-988414976) == 44463\nassert solution.reachNumber(941346331) == 43390\nassert solution.reachNumber(-483288990) == 31091\nassert solution.reachNumber(-322315293) == 25390\nassert solution.reachNumber(478508339) == 30937\nassert solution.reachNumber(-638404900) == 35732\nassert solution.reachNumber(470757635) == 30685\nassert solution.reachNumber(-439682757) == 29654\nassert solution.reachNumber(950363664) == 43599\nassert solution.reachNumber(49105848) == 9911\nassert solution.reachNumber(893361660) == 42271\nassert solution.reachNumber(-874629533) == 41825",
  "inefficient_solution": "class Solution:\n    def reachNumber(self, target: int) -> int:\n        target = abs(target)\n        s = k = 0\n        moves = []\n        while True:\n            if s >= target and (s - target) % 2 == 0:\n                return len(moves)\n            moves.append(k)\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1\n            s += k\n            k += 1",
  "is_python": true
}