{
  "problem_idx": 1267,
  "task_name": "Count Servers that Communicate",
  "markdown_description": "\nYou are given a map of a server center, represented as a `m * n` integer matrix\u00a0`grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.  \n\n  \n\nReturn the number of servers\u00a0that communicate with any other server.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1267.Count%20Servers%20that%20Communicate/images/untitled-diagram-6.jpg)\n\n\n\n```\n\n**Input:** grid = [[1,0],[0,1]]\n**Output:** 0\n**Explanation:**\u00a0No servers can communicate with others.\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1267.Count%20Servers%20that%20Communicate/images/untitled-diagram-4.jpg)**\n\n\n\n```\n\n**Input:** grid = [[1,0],[1,1]]\n**Output:** 3\n**Explanation:**\u00a0All three servers can communicate with at least one other server.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1267.Count%20Servers%20that%20Communicate/images/untitled-diagram-1-3.jpg)\n\n\n\n```\n\n**Input:** grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\n**Output:** 4\n**Explanation:**\u00a0The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m <= 250`\n* `1 <= n <= 250`\n* `grid[i][j] == 0 or 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        row = [0] * m\n        col = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j]:\n                    row[i] += 1\n                    col[j] += 1\n        return sum(\n            grid[i][j] and (row[i] > 1 or col[j] > 1)\n            for i in range(m)\n            for j in range(n)\n        )\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        row = [0] * m\n        col = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j]:\n                    row[i] += 1\n                    col[j] += 1\n        return sum(\n            grid[i][j] and (row[i] > 1 or col[j] > 1)\n            for i in range(m)\n            for j in range(n)\n        )\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(1, 11)\n    n = random.randint(1, 11)\n    grid = [[random.choice([0, 1]) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countServers(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countServers(grid) == expected_result\n        print(f\"assert solution.countServers({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countServers({grid}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countServers([[1, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0]]) == 14\nassert solution.countServers([[1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1]]) == 4\nassert solution.countServers([[0], [1], [1], [0], [1], [1], [0]]) == 4\nassert solution.countServers([[0]]) == 0\nassert solution.countServers([[0, 0, 0, 0, 1, 1], [0, 1, 0, 1, 1, 1]]) == 6\nassert solution.countServers([[0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1]]) == 24\nassert solution.countServers([[1, 1, 1], [1, 1, 0], [0, 1, 0]]) == 6\nassert solution.countServers([[1, 1, 0], [1, 1, 0], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 0, 0], [1, 1, 0], [1, 0, 0], [0, 0, 1], [0, 0, 0]]) == 14\nassert solution.countServers([[1, 0, 0, 1], [0, 0, 0, 0]]) == 2\nassert solution.countServers([[0], [1], [1], [0], [1], [0], [1]]) == 4\nassert solution.countServers([[1, 0]]) == 0\nassert solution.countServers([[0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0]]) == 20\nassert solution.countServers([[0, 1, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1]]) == 49\nassert solution.countServers([[1, 0, 1, 0], [1, 0, 1, 1], [1, 1, 1, 1], [1, 0, 1, 0], [1, 0, 1, 0], [1, 0, 0, 1], [0, 1, 1, 1], [1, 0, 0, 1]]) == 20\nassert solution.countServers([[1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 1], [1, 1, 1, 0, 1], [1, 1, 0, 0, 1], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0]]) == 20\nassert solution.countServers([[0, 0, 0, 0, 1, 1, 1, 0, 1]]) == 4\nassert solution.countServers([[1], [0], [0], [1]]) == 2\nassert solution.countServers([[1, 1]]) == 2\nassert solution.countServers([[1], [1], [1], [0], [0], [1], [1]]) == 5\nassert solution.countServers([[1, 1, 1, 1], [1, 1, 0, 1], [1, 1, 0, 0], [0, 1, 1, 0], [0, 1, 0, 0], [0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 1, 1]]) == 17\nassert solution.countServers([[1, 1], [0, 0], [1, 0], [0, 0], [1, 1]]) == 5\nassert solution.countServers([[0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0]]) == 62\nassert solution.countServers([[0, 1, 0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1]]) == 19\nassert solution.countServers([[0, 0, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 0, 0]]) == 14\nassert solution.countServers([[0, 1, 1, 1, 0, 1, 0]]) == 4\nassert solution.countServers([[0], [0], [0], [1], [1]]) == 2\nassert solution.countServers([[1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1]]) == 48\nassert solution.countServers([[1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0], [1, 1, 0, 1, 0, 1, 0]]) == 13\nassert solution.countServers([[1, 1, 0]]) == 2\nassert solution.countServers([[1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0]]) == 26\nassert solution.countServers([[1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0], [0, 1, 0, 1], [1, 1, 1, 0], [0, 0, 0, 1], [0, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 1, 1]]) == 20\nassert solution.countServers([[0, 1, 1], [1, 0, 1], [1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 1, 1], [1, 1, 1], [0, 1, 0], [1, 1, 0], [1, 1, 1]]) == 18\nassert solution.countServers([[1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0, 0, 1]]) == 33\nassert solution.countServers([[1, 0, 1, 1, 1], [0, 1, 0, 0, 1], [1, 1, 1, 0, 0], [0, 0, 1, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [1, 1, 1, 0, 1], [1, 0, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 1]]) == 21\nassert solution.countServers([[0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 0]]) == 7\nassert solution.countServers([[0, 0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1]]) == 46\nassert solution.countServers([[1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0]]) == 16\nassert solution.countServers([[0, 1, 0, 1], [0, 0, 1, 0], [0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 0], [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 0], [0, 0, 0, 1], [1, 1, 0, 0]]) == 23\nassert solution.countServers([[1, 1], [1, 0], [1, 1], [0, 1], [1, 1], [0, 0], [0, 0], [0, 1], [0, 0], [0, 0], [1, 0]]) == 10\nassert solution.countServers([[0, 0, 1], [0, 0, 0], [0, 1, 1], [1, 1, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0], [0, 0, 0]]) == 11\nassert solution.countServers([[0, 0, 0], [1, 1, 1], [1, 0, 1], [0, 0, 1], [1, 0, 1], [0, 0, 0], [0, 1, 1], [0, 1, 1]]) == 12\nassert solution.countServers([[1, 1, 0, 1], [1, 1, 0, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 0, 1, 0]]) == 9\nassert solution.countServers([[0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0]]) == 9\nassert solution.countServers([[1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1]]) == 22\nassert solution.countServers([[0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 1]]) == 20\nassert solution.countServers([[1], [1], [1], [0], [0], [0], [0], [0], [0]]) == 3\nassert solution.countServers([[1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1]]) == 5\nassert solution.countServers([[1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0]]) == 51\nassert solution.countServers([[0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0, 1]]) == 44\nassert solution.countServers([[1], [1], [0], [1], [0], [0], [0], [1], [0]]) == 4\nassert solution.countServers([[0, 1, 0, 0], [1, 0, 1, 1], [1, 0, 1, 0], [1, 1, 1, 0], [0, 0, 0, 0]]) == 9\nassert solution.countServers([[1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1]]) == 22\nassert solution.countServers([[1, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0]]) == 42\nassert solution.countServers([[0, 0, 1, 1, 0, 0, 1, 0, 1, 1]]) == 5\nassert solution.countServers([[1, 0, 0, 0, 0, 0, 1, 1, 1, 0]]) == 4\nassert solution.countServers([[0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1]]) == 20\nassert solution.countServers([[0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0]]) == 11\nassert solution.countServers([[1, 1], [0, 1], [0, 1], [0, 1], [1, 0], [1, 1], [0, 1], [0, 0]]) == 9\nassert solution.countServers([[1, 0], [0, 1], [0, 0], [1, 0], [1, 1], [0, 1], [0, 0], [1, 0], [1, 0], [0, 1]]) == 9\nassert solution.countServers([[0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1]]) == 20\nassert solution.countServers([[1, 0], [0, 0], [0, 1], [1, 1]]) == 4\nassert solution.countServers([[0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0]]) == 21\nassert solution.countServers([[0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0]]) == 7\nassert solution.countServers([[0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1]]) == 12\nassert solution.countServers([[0], [1], [1], [0]]) == 2\nassert solution.countServers([[0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0]]) == 25\nassert solution.countServers([[0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0]]) == 12\nassert solution.countServers([[0, 0], [1, 0], [1, 1], [1, 1], [0, 1]]) == 6\nassert solution.countServers([[0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0]]) == 9\nassert solution.countServers([[0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 1, 1]]) == 3\nassert solution.countServers([[0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1]]) == 22\nassert solution.countServers([[1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0]]) == 17\nassert solution.countServers([[0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0]]) == 33\nassert solution.countServers([[1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0]]) == 34\nassert solution.countServers([[0]]) == 0\nassert solution.countServers([[0, 1, 1, 1], [0, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 0]]) == 8\nassert solution.countServers([[1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0]]) == 21\nassert solution.countServers([[0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0]]) == 53\nassert solution.countServers([[0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1]]) == 36\nassert solution.countServers([[0, 1]]) == 0\nassert solution.countServers([[1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1]]) == 49\nassert solution.countServers([[0, 1, 1, 0, 1, 0, 0, 1]]) == 4\nassert solution.countServers([[1, 0, 0, 1, 1, 1, 0]]) == 4\nassert solution.countServers([[0, 0, 1, 0], [1, 1, 0, 1], [0, 1, 1, 1], [0, 1, 1, 0], [0, 0, 0, 1], [1, 1, 0, 1], [0, 1, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]]) == 24\nassert solution.countServers([[0, 0, 1, 1, 0], [1, 1, 0, 0, 0]]) == 4\nassert solution.countServers([[0, 1, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0]]) == 5\nassert solution.countServers([[0, 1, 1, 0, 1, 1, 1]]) == 5\nassert solution.countServers([[1, 1, 1, 1], [1, 0, 1, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 1, 0], [1, 1, 1, 0], [1, 1, 0, 0]]) == 17\nassert solution.countServers([[0, 1], [0, 1], [1, 1], [0, 1], [1, 1], [1, 1], [0, 0]]) == 9\nassert solution.countServers([[1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 1]]) == 22\nassert solution.countServers([[0, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1]]) == 14\nassert solution.countServers([[0], [0], [0], [0], [0], [0], [1]]) == 0\nassert solution.countServers([[0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 1, 0]]) == 21\nassert solution.countServers([[1, 0, 0, 1]]) == 2\nassert solution.countServers([[0], [1], [1]]) == 2\nassert solution.countServers([[0, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]]) == 22\nassert solution.countServers([[0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1]]) == 17\nassert solution.countServers([[0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1]]) == 27\nassert solution.countServers([[1, 0, 0, 0, 0], [1, 0, 1, 1, 1]]) == 5\nassert solution.countServers([[1, 1, 0, 0], [0, 1, 0, 0], [1, 0, 0, 0]]) == 4",
  "inefficient_solution": "class Solution:\n    def countServers(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        row = [0] * (m * 2 + 1)\n        col = [0] * (n * 2 + 1)\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j]:\n                    row[i+1] = 1\n                    row[m+i+1] = 1\n                    col[j+1] = 1\n                    col[n+j+1] = 1\n        max_row = max(row)\n        max_col = max(col)\n        return sum(\n            grid[i][j] and (row[i+1] >= max_row and col[j+1] >= max_col)\n            for i in range(m)\n            for j in range(n)\n        )",
  "is_python": true
}