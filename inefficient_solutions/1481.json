{
  "problem_idx": 1481,
  "task_name": "Least Number of Unique Integers after K Removals",
  "markdown_description": "\nGiven an array of integers\u00a0`arr`\u00a0and an integer `k`.\u00a0Find the *least number of unique integers*\u00a0after removing **exactly** `k` elements**.**\n\n\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [5,5,4], k = 1\n**Output:** 1\n**Explanation**: Remove the single 4, only 5 is left.\n\n```\n\n**Example 2:**\n\n```\n\n**Input:** arr = [4,3,1,1,3,3,2], k = 3\n**Output:** 2\n**Explanation**: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length\u00a0<= 10^5`\n* `1 <= arr[i] <= 10^9`\n* `0 <= k\u00a0<= arr.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:\n        cnt = Counter(arr)\n        for i, v in enumerate(sorted(cnt.values())):\n            k -= v\n            if k < 0:\n                return len(cnt) - i\n        return 0\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:\n        cnt = Counter(arr)\n        for i, v in enumerate(sorted(cnt.values())):\n            k -= v\n            if k < 0:\n                return len(cnt) - i\n        return 0\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(0, len(arr)+1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findLeastNumOfUniqueInts(arr, k)\n\n    return arr, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findLeastNumOfUniqueInts(arr, k) == expected_result\n        print(f\"assert solution.findLeastNumOfUniqueInts({arr}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findLeastNumOfUniqueInts({arr}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findLeastNumOfUniqueInts([72, 90, 58, 17, 100, 14, 35], 6) == 1\nassert solution.findLeastNumOfUniqueInts([6, 8, 80, 96, 86, 82, 71, 93, 52, 87], 10) == 0\nassert solution.findLeastNumOfUniqueInts([9, 58, 83, 44, 43, 24], 4) == 2\nassert solution.findLeastNumOfUniqueInts([52, 60, 53, 99, 87, 18, 83, 17, 19], 0) == 9\nassert solution.findLeastNumOfUniqueInts([40, 70, 49, 78, 8], 3) == 2\nassert solution.findLeastNumOfUniqueInts([22, 72, 6], 3) == 0\nassert solution.findLeastNumOfUniqueInts([30, 34, 61], 0) == 3\nassert solution.findLeastNumOfUniqueInts([16, 98, 8, 32, 71, 4, 17, 66, 100, 58], 0) == 10\nassert solution.findLeastNumOfUniqueInts([82, 52], 2) == 0\nassert solution.findLeastNumOfUniqueInts([90, 32, 37, 5, 65, 58, 46, 41, 36], 9) == 0\nassert solution.findLeastNumOfUniqueInts([44, 12, 70, 84, 57, 21, 42, 56, 26], 10) == 0\nassert solution.findLeastNumOfUniqueInts([37, 39, 20, 49, 12, 55, 14, 23, 50, 46], 10) == 0\nassert solution.findLeastNumOfUniqueInts([39, 48, 73, 13, 98], 2) == 3\nassert solution.findLeastNumOfUniqueInts([9, 82, 90, 49, 8, 19, 12, 23, 58], 10) == 0\nassert solution.findLeastNumOfUniqueInts([23, 24, 90, 4, 41, 47, 66, 39, 99, 73], 1) == 9\nassert solution.findLeastNumOfUniqueInts([45, 82], 3) == 0\nassert solution.findLeastNumOfUniqueInts([40, 67, 2, 91, 3, 68, 96], 2) == 5\nassert solution.findLeastNumOfUniqueInts([54, 4, 9, 74, 8, 90], 5) == 1\nassert solution.findLeastNumOfUniqueInts([4, 70, 94, 72, 57, 85], 2) == 4\nassert solution.findLeastNumOfUniqueInts([66, 25, 70, 40, 21], 0) == 5\nassert solution.findLeastNumOfUniqueInts([50, 21, 64, 24, 99, 67, 58, 48, 94, 79], 10) == 0\nassert solution.findLeastNumOfUniqueInts([12, 36], 2) == 0\nassert solution.findLeastNumOfUniqueInts([3, 98, 50, 96, 51, 67, 4, 92, 71, 100], 2) == 8\nassert solution.findLeastNumOfUniqueInts([46, 70, 23, 96], 5) == 0\nassert solution.findLeastNumOfUniqueInts([12, 33, 32, 11, 70, 84, 15], 3) == 4\nassert solution.findLeastNumOfUniqueInts([78, 56, 57, 70, 16, 83], 7) == 0\nassert solution.findLeastNumOfUniqueInts([88, 42, 6, 87, 33, 50, 65], 5) == 2\nassert solution.findLeastNumOfUniqueInts([89, 93, 69, 72], 3) == 1\nassert solution.findLeastNumOfUniqueInts([84, 10, 23, 6, 89], 6) == 0\nassert solution.findLeastNumOfUniqueInts([83, 18], 3) == 0\nassert solution.findLeastNumOfUniqueInts([46, 29, 69, 63, 39], 6) == 0\nassert solution.findLeastNumOfUniqueInts([95, 63, 86], 2) == 1\nassert solution.findLeastNumOfUniqueInts([54, 42, 25, 76], 3) == 1\nassert solution.findLeastNumOfUniqueInts([56, 70, 65, 92], 2) == 2\nassert solution.findLeastNumOfUniqueInts([60, 34, 16, 29, 76, 67, 92, 6, 48], 1) == 8\nassert solution.findLeastNumOfUniqueInts([73, 100, 82, 55, 94, 21], 5) == 1\nassert solution.findLeastNumOfUniqueInts([73, 60, 11, 20, 53, 30, 29], 3) == 4\nassert solution.findLeastNumOfUniqueInts([100, 44, 69], 2) == 1\nassert solution.findLeastNumOfUniqueInts([71, 29, 51, 46, 92, 43, 38, 60, 98, 2], 9) == 1\nassert solution.findLeastNumOfUniqueInts([73, 95, 82, 36, 69, 25], 0) == 6\nassert solution.findLeastNumOfUniqueInts([12, 97, 98, 5], 5) == 0\nassert solution.findLeastNumOfUniqueInts([68, 27, 90, 86, 56], 5) == 0\nassert solution.findLeastNumOfUniqueInts([67, 22, 6, 51, 79, 66, 20, 34, 77], 0) == 9\nassert solution.findLeastNumOfUniqueInts([89, 95, 68, 37, 28, 99, 51, 23, 69], 3) == 6\nassert solution.findLeastNumOfUniqueInts([14, 98, 61, 2, 87, 42, 48, 56, 13, 46], 7) == 3\nassert solution.findLeastNumOfUniqueInts([49, 83, 74, 67, 30, 26, 65, 55, 10, 69], 11) == 0\nassert solution.findLeastNumOfUniqueInts([97, 65, 100, 88, 32, 20], 3) == 3\nassert solution.findLeastNumOfUniqueInts([91, 6, 25], 1) == 2\nassert solution.findLeastNumOfUniqueInts([8, 30, 79], 4) == 0\nassert solution.findLeastNumOfUniqueInts([25, 97, 95, 64, 39, 50, 3, 88], 1) == 7\nassert solution.findLeastNumOfUniqueInts([21, 59, 27, 39, 9, 33], 7) == 0\nassert solution.findLeastNumOfUniqueInts([87, 67, 64, 20], 5) == 0\nassert solution.findLeastNumOfUniqueInts([38, 25, 1, 5], 2) == 2\nassert solution.findLeastNumOfUniqueInts([64, 10, 39, 48, 12, 66, 22], 6) == 1\nassert solution.findLeastNumOfUniqueInts([80, 1, 90, 20, 81], 2) == 3\nassert solution.findLeastNumOfUniqueInts([76, 85, 42, 82, 41, 27, 47], 5) == 2\nassert solution.findLeastNumOfUniqueInts([85, 52, 22, 92, 46], 1) == 4\nassert solution.findLeastNumOfUniqueInts([11, 89, 75, 24], 3) == 1\nassert solution.findLeastNumOfUniqueInts([66, 50, 45, 8], 1) == 3\nassert solution.findLeastNumOfUniqueInts([44, 2, 75, 94, 18, 92, 31], 4) == 3\nassert solution.findLeastNumOfUniqueInts([12, 7, 71, 85, 52], 1) == 4\nassert solution.findLeastNumOfUniqueInts([63, 23, 52, 51, 43, 93, 45, 70, 66], 10) == 0\nassert solution.findLeastNumOfUniqueInts([5, 10], 1) == 1\nassert solution.findLeastNumOfUniqueInts([48, 38, 92, 60, 77, 70, 80, 93], 6) == 2\nassert solution.findLeastNumOfUniqueInts([71, 66, 21, 51, 74, 53, 81, 97, 36], 7) == 2\nassert solution.findLeastNumOfUniqueInts([48, 44, 21, 64, 80, 47, 20], 4) == 3\nassert solution.findLeastNumOfUniqueInts([32, 18, 43, 58, 96, 3, 5, 61, 50], 9) == 0\nassert solution.findLeastNumOfUniqueInts([4, 32, 60, 37, 53], 6) == 0\nassert solution.findLeastNumOfUniqueInts([29, 13, 40, 46, 35], 1) == 4\nassert solution.findLeastNumOfUniqueInts([77, 91, 37, 48, 97], 3) == 2\nassert solution.findLeastNumOfUniqueInts([10, 97, 38, 75, 11, 91, 1], 6) == 1\nassert solution.findLeastNumOfUniqueInts([55, 82, 3], 0) == 3\nassert solution.findLeastNumOfUniqueInts([3, 18, 26, 36], 5) == 0\nassert solution.findLeastNumOfUniqueInts([56, 23, 37, 78, 68, 43, 7], 0) == 7\nassert solution.findLeastNumOfUniqueInts([88, 42, 43, 24], 1) == 3\nassert solution.findLeastNumOfUniqueInts([1, 94, 80, 64, 62, 6, 95, 60, 4], 6) == 3\nassert solution.findLeastNumOfUniqueInts([72, 69], 0) == 2\nassert solution.findLeastNumOfUniqueInts([89, 22, 43], 3) == 0\nassert solution.findLeastNumOfUniqueInts([42, 38], 1) == 1\nassert solution.findLeastNumOfUniqueInts([90, 44, 10, 48, 95, 57], 2) == 4\nassert solution.findLeastNumOfUniqueInts([19, 5, 71, 73, 98, 11, 51, 48], 0) == 8\nassert solution.findLeastNumOfUniqueInts([82, 16, 81, 69, 96, 15, 62], 4) == 3\nassert solution.findLeastNumOfUniqueInts([69, 96, 83, 65], 1) == 3\nassert solution.findLeastNumOfUniqueInts([100, 90, 92, 73, 32, 45], 3) == 3\nassert solution.findLeastNumOfUniqueInts([46, 41, 8, 43, 75], 5) == 0\nassert solution.findLeastNumOfUniqueInts([98, 73, 59], 0) == 3\nassert solution.findLeastNumOfUniqueInts([71, 52, 84, 42, 20, 49, 64, 88, 91], 2) == 7\nassert solution.findLeastNumOfUniqueInts([30, 21, 98, 100, 85, 73, 7, 20, 43, 31], 3) == 7\nassert solution.findLeastNumOfUniqueInts([21, 22, 58, 84, 3, 75], 7) == 0\nassert solution.findLeastNumOfUniqueInts([32, 16, 92, 94, 74, 49], 3) == 3\nassert solution.findLeastNumOfUniqueInts([41, 62, 40, 81, 75, 92], 3) == 3\nassert solution.findLeastNumOfUniqueInts([96, 86, 33, 37], 5) == 0\nassert solution.findLeastNumOfUniqueInts([17, 2, 54, 94], 3) == 1\nassert solution.findLeastNumOfUniqueInts([50, 10, 95, 81, 61, 60, 80, 65], 6) == 2\nassert solution.findLeastNumOfUniqueInts([19, 4, 22, 68, 35, 95, 88, 93], 7) == 1\nassert solution.findLeastNumOfUniqueInts([4, 59], 3) == 0\nassert solution.findLeastNumOfUniqueInts([59, 6, 41, 54, 26], 6) == 0\nassert solution.findLeastNumOfUniqueInts([65, 72, 81, 16, 23, 25, 39, 17], 0) == 8\nassert solution.findLeastNumOfUniqueInts([71, 52, 95, 1], 2) == 2\nassert solution.findLeastNumOfUniqueInts([9, 38, 29, 47, 95, 73, 40, 11], 4) == 4",
  "inefficient_solution": "class Solution:\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:\n        cnt = {}\n        for num in arr:\n            if num not in cnt:\n                cnt[num] = 1\n            else:\n                cnt[num] += 1\n        nums = list(cnt.keys())\n        for i in range(len(nums)):\n            del_list = []\n            for j in range(len(nums)):\n                for _ in range(cnt[nums[j]]):\n                    del_list.append(nums[j])\n            cnt = {}\n            for num in del_list:\n                if num not in cnt:\n                    cnt[num] = 1\n                else:\n                    cnt[num] += 1\n            for num in cnt:\n                nums.append(num)\n            for _ in range(k):\n                if nums[i] in cnt:\n                    cnt[nums[i]] -= 1\n                    if cnt[nums[i]] <= 0:\n                        del cnt[nums[i]]\n                else:\n                    break\n            if len(cnt) == 0:\n                return i + 1\n            cnt = {}\n            for num in nums:\n                if num not in cnt:\n                    cnt[num] = 1\n                else:\n                    cnt[num] += 1\n        return 0",
  "is_python": true
}