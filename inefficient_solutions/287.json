{
  "problem_idx": 287,
  "task_name": "Find the Duplicate Number",
  "markdown_description": "\nGiven an array of integers `nums` containing\u00a0`n + 1` integers where each integer is in the range `[1, n]` inclusive.\n\n\nThere is only **one repeated number** in `nums`, return *this\u00a0repeated\u00a0number*.\n\n\nYou must solve the problem **without** modifying the array `nums`\u00a0and uses only constant extra space.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,4,2,2]\n**Output:** 2\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,1,3,4,2]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `nums.length == n + 1`\n* `1 <= nums[i] <= n`\n* All the integers in `nums` appear only **once** except for **precisely one integer** which appears **two or more** times.\n\n\n\u00a0\n\n\n**Follow up:**\n\n\n* How can we prove that at least one duplicate number must exist in `nums`?\n* Can you solve the problem in linear runtime complexity?\n\n\n",
  "canonical_solution": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        def f(x: int) -> bool:\n            return sum(v <= x for v in nums) > x\n\n        return bisect_left(range(len(nums)), True, key=f)\n",
  "test_case_generator": "\nimport random\nfrom bisect import bisect_left\n\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        def f(x: int) -> bool:\n            return sum(v <= x for v in nums) > x\n\n        return bisect_left(range(len(nums)), True, key=f)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 6), random.randint(2, 5))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findDuplicate(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findDuplicate(nums) == expected_result\n        print(f\"assert solution.findDuplicate({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findDuplicate({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findDuplicate([2, 3, 4, 5]) == 4\nassert solution.findDuplicate([3, 1, 2, 5, 4]) == 5\nassert solution.findDuplicate([4, 5]) == 2\nassert solution.findDuplicate([1, 5, 4, 3, 2]) == 5\nassert solution.findDuplicate([3, 5, 2]) == 3\nassert solution.findDuplicate([3, 1]) == 2\nassert solution.findDuplicate([5, 3, 1]) == 3\nassert solution.findDuplicate([2, 1, 5, 4, 3]) == 5\nassert solution.findDuplicate([4, 1, 5, 3, 2]) == 5\nassert solution.findDuplicate([5, 4, 2, 1]) == 4\nassert solution.findDuplicate([4, 1, 3, 2]) == 4\nassert solution.findDuplicate([2, 1, 5, 4]) == 4\nassert solution.findDuplicate([4, 5]) == 2\nassert solution.findDuplicate([4, 2, 3, 5, 1]) == 5\nassert solution.findDuplicate([4, 5, 2, 3, 1]) == 5\nassert solution.findDuplicate([3, 4, 2, 5, 1]) == 5\nassert solution.findDuplicate([3, 2, 4, 5, 1]) == 5\nassert solution.findDuplicate([5, 3, 4]) == 3\nassert solution.findDuplicate([1, 3, 2]) == 3\nassert solution.findDuplicate([1, 2]) == 2\nassert solution.findDuplicate([1, 3, 2]) == 3\nassert solution.findDuplicate([3, 4, 5, 2]) == 4\nassert solution.findDuplicate([3, 1]) == 2\nassert solution.findDuplicate([4, 5, 3, 2]) == 4\nassert solution.findDuplicate([3, 5, 4, 2, 1]) == 5\nassert solution.findDuplicate([2, 4, 5]) == 3\nassert solution.findDuplicate([3, 2, 1, 5]) == 4\nassert solution.findDuplicate([3, 1, 4, 5, 2]) == 5\nassert solution.findDuplicate([3, 4, 2, 5]) == 4\nassert solution.findDuplicate([4, 1, 2, 3, 5]) == 5\nassert solution.findDuplicate([3, 2, 5]) == 3\nassert solution.findDuplicate([2, 4, 5, 3, 1]) == 5\nassert solution.findDuplicate([3, 5, 2, 4, 1]) == 5\nassert solution.findDuplicate([1, 3, 2, 4, 5]) == 5\nassert solution.findDuplicate([3, 5, 1, 4]) == 4\nassert solution.findDuplicate([4, 3]) == 2\nassert solution.findDuplicate([1, 2, 5]) == 3\nassert solution.findDuplicate([2, 5]) == 2\nassert solution.findDuplicate([1, 2, 3, 5]) == 4\nassert solution.findDuplicate([2, 5, 3, 1, 4]) == 5\nassert solution.findDuplicate([5, 4, 1, 3]) == 4\nassert solution.findDuplicate([2, 5, 3]) == 3\nassert solution.findDuplicate([4, 3, 5]) == 3\nassert solution.findDuplicate([1, 5, 2, 3]) == 4\nassert solution.findDuplicate([5, 1]) == 2\nassert solution.findDuplicate([5, 4]) == 2\nassert solution.findDuplicate([4, 3, 1, 5]) == 4\nassert solution.findDuplicate([2, 3]) == 2\nassert solution.findDuplicate([2, 3, 1]) == 3\nassert solution.findDuplicate([4, 1, 2]) == 3\nassert solution.findDuplicate([4, 3, 1, 5, 2]) == 5\nassert solution.findDuplicate([2, 5, 4, 3, 1]) == 5\nassert solution.findDuplicate([5, 2, 1]) == 3\nassert solution.findDuplicate([4, 2, 3, 1, 5]) == 5\nassert solution.findDuplicate([1, 3]) == 2\nassert solution.findDuplicate([2, 4, 3]) == 3\nassert solution.findDuplicate([5, 3]) == 2\nassert solution.findDuplicate([5, 1, 2]) == 3\nassert solution.findDuplicate([1, 5]) == 2\nassert solution.findDuplicate([5, 4]) == 2\nassert solution.findDuplicate([2, 5, 3, 1, 4]) == 5\nassert solution.findDuplicate([2, 4, 5]) == 3\nassert solution.findDuplicate([3, 5, 4]) == 3\nassert solution.findDuplicate([3, 2, 1]) == 3\nassert solution.findDuplicate([5, 2, 1, 3, 4]) == 5\nassert solution.findDuplicate([5, 3]) == 2\nassert solution.findDuplicate([4, 5, 2, 3]) == 4\nassert solution.findDuplicate([3, 4, 5, 2, 1]) == 5\nassert solution.findDuplicate([3, 5, 2, 4]) == 4\nassert solution.findDuplicate([4, 5, 2, 1, 3]) == 5\nassert solution.findDuplicate([3, 1, 4]) == 3\nassert solution.findDuplicate([1, 3]) == 2\nassert solution.findDuplicate([1, 5]) == 2\nassert solution.findDuplicate([4, 5, 3]) == 3\nassert solution.findDuplicate([2, 5, 1]) == 3\nassert solution.findDuplicate([3, 1, 5]) == 3\nassert solution.findDuplicate([4, 5, 2]) == 3\nassert solution.findDuplicate([4, 3, 5]) == 3\nassert solution.findDuplicate([3, 4, 2, 5]) == 4\nassert solution.findDuplicate([3, 5, 4, 2, 1]) == 5\nassert solution.findDuplicate([2, 5, 1]) == 3\nassert solution.findDuplicate([1, 3, 2]) == 3\nassert solution.findDuplicate([2, 1, 5, 3]) == 4\nassert solution.findDuplicate([5, 4, 3, 1, 2]) == 5\nassert solution.findDuplicate([3, 1, 2, 5, 4]) == 5\nassert solution.findDuplicate([2, 1, 4]) == 3\nassert solution.findDuplicate([4, 5]) == 2\nassert solution.findDuplicate([1, 5, 4]) == 3\nassert solution.findDuplicate([1, 4, 3, 2, 5]) == 5\nassert solution.findDuplicate([1, 4, 5]) == 3\nassert solution.findDuplicate([4, 5, 1, 3, 2]) == 5\nassert solution.findDuplicate([1, 2]) == 2\nassert solution.findDuplicate([2, 5, 3, 1]) == 4\nassert solution.findDuplicate([4, 1]) == 2\nassert solution.findDuplicate([1, 2, 4, 5]) == 4\nassert solution.findDuplicate([2, 3, 5, 1, 4]) == 5\nassert solution.findDuplicate([3, 5]) == 2\nassert solution.findDuplicate([1, 2, 4]) == 3\nassert solution.findDuplicate([3, 1]) == 2\nassert solution.findDuplicate([2, 4, 3]) == 3",
  "inefficient_solution": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        num_set = set()\n        for num in nums:\n            num_set.add(num)\n        for num in nums:\n            if num in num_set and num_set[num] == 1:\n                return num\n            num_set[num] += 1\n        return None",
  "is_python": true
}