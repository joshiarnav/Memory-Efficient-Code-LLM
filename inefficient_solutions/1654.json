{
  "problem_idx": 1654,
  "task_name": "Minimum Jumps to Reach Home",
  "markdown_description": "\nA certain bug's home is on the x-axis at position `x`. Help them get there from position `0`.\n\n\nThe bug jumps according to the following rules:\n\n\n* It can jump exactly `a` positions **forward** (to the right).\n* It can jump exactly `b` positions **backward** (to the left).\n* It cannot jump backward twice in a row.\n* It cannot jump to any `forbidden` positions.\n\n\nThe bug may jump forward **beyond** its home, but it **cannot jump** to positions numbered with **negative** integers.\n\n\nGiven an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return *the minimum number of jumps needed for the bug to reach its home*. If there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9\n**Output:** 3\n**Explanation:** 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11\n**Output:** -1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7\n**Output:** 2\n**Explanation:** One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= forbidden.length <= 1000`\n* `1 <= a, b, forbidden[i] <= 2000`\n* `0 <= x <= 2000`\n* All the elements in `forbidden` are distinct.\n* Position `x` is not forbidden.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:\n        s = set(forbidden)\n        q = deque([(0, 1)])\n        vis = {(0, 1)}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                i, k = q.popleft()\n                if i == x:\n                    return ans\n                nxt = [(i + a, 1)]\n                if k & 1:\n                    nxt.append((i - b, 0))\n                for j, k in nxt:\n                    if 0 <= j < 6000 and j not in s and (j, k) not in vis:\n                        q.append((j, k))\n                        vis.add((j, k))\n            ans += 1\n        return -1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumJumps(self, forbidden, a, b, x):\n        s = set(forbidden)\n        q = deque([(0, 1)])\n        vis = {(0, 1)}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                i, k = q.popleft()\n                if i == x:\n                    return ans\n                nxt = [(i + a, 1)]\n                if k & 1:\n                    nxt.append((i - b, 0))\n                for j, k in nxt:\n                    if 0 <= j < 6000 and j not in s and (j, k) not in vis:\n                        q.append((j, k))\n                        vis.add((j, k))\n            ans += 1\n        return -1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random forbidden list\n    forbidden = random.sample(range(1, 1001), random.randint(1, 10))\n    \n    # Generate random values for a, b, and x\n    a = random.randint(1, 2001)\n    b = random.randint(1, 2001)\n    x = random.randint(0, 2001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumJumps(forbidden, a, b, x)\n\n    return forbidden, a, b, x, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        forbidden, a, b, x, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumJumps(forbidden, a, b, x) == expected_result\n        print(f\"assert solution.minimumJumps({forbidden}, {a}, {b}, {x}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumJumps({forbidden}, {a}, {b}, {x}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumJumps([126, 48, 102, 346, 358, 633, 509, 405], 1685, 1177, 1955) == -1\nassert solution.minimumJumps([294, 158, 809, 905, 119], 1705, 688, 1976) == -1\nassert solution.minimumJumps([778, 534, 969, 825, 696, 89, 243, 404, 645], 1598, 1861, 1456) == 2330\nassert solution.minimumJumps([576, 419], 1870, 1155, 1126) == -1\nassert solution.minimumJumps([345, 246, 333, 805], 1735, 8, 358) == -1\nassert solution.minimumJumps([302, 641, 178, 803, 900, 200, 982, 626, 842], 950, 406, 1534) == -1\nassert solution.minimumJumps([323], 1050, 1343, 231) == 1101\nassert solution.minimumJumps([859, 985, 591, 288, 130, 913, 850, 784, 745, 540], 421, 871, 1795) == 839\nassert solution.minimumJumps([315, 459, 359, 875, 205], 1106, 1431, 457) == 1535\nassert solution.minimumJumps([920, 174, 877], 491, 837, 656) == 96\nassert solution.minimumJumps([92, 357, 70, 611, 162, 361], 911, 941, 140) == 608\nassert solution.minimumJumps([130], 1773, 1350, 615) == -1\nassert solution.minimumJumps([544], 521, 393, 1682) == 12\nassert solution.minimumJumps([613, 155, 35], 820, 1017, 587) == 1141\nassert solution.minimumJumps([644, 496, 476], 1241, 1269, 255) == 1685\nassert solution.minimumJumps([704, 426, 254, 715, 534, 957], 1771, 504, 981) == -1\nassert solution.minimumJumps([268, 634, 474, 276, 913, 394, 201, 853, 788, 670], 1797, 1396, 273) == -1\nassert solution.minimumJumps([721, 588, 651], 1739, 794, 552) == -1\nassert solution.minimumJumps([502, 889, 983, 856, 938, 993, 564, 384], 1856, 1178, 1157) == -1\nassert solution.minimumJumps([105, 302, 714, 982, 853], 1514, 1500, 1724) == 31\nassert solution.minimumJumps([483, 748, 279, 396, 293], 344, 687, 965) == 833\nassert solution.minimumJumps([447, 890, 248, 651, 325, 591, 95], 1007, 684, 809) == -1\nassert solution.minimumJumps([465, 554, 855, 454, 671], 1028, 1550, 1555) == -1\nassert solution.minimumJumps([545], 887, 622, 1118) == -1\nassert solution.minimumJumps([449, 16, 538, 824, 753, 559, 394, 517], 973, 1296, 799) == 831\nassert solution.minimumJumps([564, 46, 690, 424], 1154, 301, 566) == -1\nassert solution.minimumJumps([335, 625, 758, 717, 811, 140, 724, 602], 1037, 552, 255) == -1\nassert solution.minimumJumps([932, 73, 112, 720, 992, 221, 240], 1122, 716, 844) == -1\nassert solution.minimumJumps([36, 870, 799, 718, 645, 739], 1431, 116, 1715) == -1\nassert solution.minimumJumps([517, 442, 509, 480, 538, 279, 841, 300], 891, 263, 1141) == -1\nassert solution.minimumJumps([180, 275, 762, 101], 1158, 882, 1215) == -1\nassert solution.minimumJumps([493, 53, 50, 806, 380, 906], 923, 1572, 92) == 1549\nassert solution.minimumJumps([550, 140, 874, 991, 272, 602, 440, 72, 94, 284], 1132, 564, 1480) == -1\nassert solution.minimumJumps([959, 811, 756, 638], 786, 566, 1975) == -1\nassert solution.minimumJumps([606, 215, 220, 745, 743, 707, 985, 543], 135, 726, 2) == -1\nassert solution.minimumJumps([970, 526, 420, 333, 357, 665], 30, 1783, 1253) == -1\nassert solution.minimumJumps([951, 591, 423, 292, 109, 923, 35, 372, 291, 816], 267, 1796, 1258) == 1890\nassert solution.minimumJumps([520, 851, 627, 392, 192, 549, 66, 839, 496, 534], 89, 1891, 549) == -1\nassert solution.minimumJumps([783, 873, 160, 622, 285, 610, 182], 1111, 1005, 1252) == -1\nassert solution.minimumJumps([603, 93, 23, 615, 933, 819, 734, 284], 181, 11, 1278) == -1\nassert solution.minimumJumps([31, 686, 661], 1886, 1162, 1630) == -1\nassert solution.minimumJumps([191, 251, 60, 755, 369, 720, 203, 7, 594], 715, 1776, 580) == 2126\nassert solution.minimumJumps([989, 819, 713, 827, 787, 45], 156, 574, 380) == 330\nassert solution.minimumJumps([793, 69, 624, 799, 742, 274, 673, 412, 611, 751], 542, 1360, 982) == 644\nassert solution.minimumJumps([329, 254, 43, 532, 879, 473, 919], 369, 1610, 918) == 1354\nassert solution.minimumJumps([751], 1851, 93, 709) == -1\nassert solution.minimumJumps([427, 868, 191, 185, 370, 396, 222, 951, 629, 309], 1347, 483, 959) == -1\nassert solution.minimumJumps([759, 899, 939, 589, 486], 1049, 323, 638) == -1\nassert solution.minimumJumps([621], 1302, 1683, 343) == -1\nassert solution.minimumJumps([479, 922, 66, 293, 874], 586, 755, 238) == 751\nassert solution.minimumJumps([918, 119, 353, 227, 514, 810, 968, 7, 469], 141, 1062, 1639) == -1\nassert solution.minimumJumps([966, 856, 364, 298, 434, 262, 883, 468], 1193, 650, 809) == -1\nassert solution.minimumJumps([572, 738, 162, 648, 624, 649, 846], 366, 744, 1662) == 47\nassert solution.minimumJumps([746], 398, 71, 529) == -1\nassert solution.minimumJumps([986, 789, 119], 1875, 750, 412) == -1\nassert solution.minimumJumps([647, 654, 114], 172, 497, 1623) == 60\nassert solution.minimumJumps([213, 693], 1041, 1508, 1909) == 1995\nassert solution.minimumJumps([353, 624, 37, 51, 736, 151, 787, 55], 1904, 1112, 1067) == -1\nassert solution.minimumJumps([867], 589, 166, 327) == -1\nassert solution.minimumJumps([311, 495, 239, 787, 163, 835, 719], 438, 70, 793) == -1\nassert solution.minimumJumps([421, 195, 641, 531, 989, 798, 728, 618, 433, 387], 1222, 1683, 793) == 1824\nassert solution.minimumJumps([469, 281, 931, 736, 264, 453, 413, 58, 510, 377], 1824, 294, 1559) == -1\nassert solution.minimumJumps([497, 307, 608, 368, 727], 790, 1371, 898) == 1812\nassert solution.minimumJumps([131], 1574, 1278, 453) == -1\nassert solution.minimumJumps([395, 513, 592], 248, 1505, 140) == 1386\nassert solution.minimumJumps([115, 99, 722, 523, 554, 284], 1201, 1254, 1144) == 559\nassert solution.minimumJumps([700, 492, 389, 630], 956, 801, 670) == -1\nassert solution.minimumJumps([50, 289, 263, 549], 166, 1072, 1020) == 297\nassert solution.minimumJumps([203, 230, 56, 905], 886, 1919, 1109) == 359\nassert solution.minimumJumps([267, 296, 714, 616, 809], 1913, 1255, 1485) == -1\nassert solution.minimumJumps([605, 446, 497, 846, 907, 594], 1978, 1319, 978) == -1\nassert solution.minimumJumps([264, 838, 425, 354, 568, 217, 715, 616, 26], 580, 220, 1949) == -1\nassert solution.minimumJumps([509], 1431, 171, 1579) == -1\nassert solution.minimumJumps([814, 967, 630, 157, 189, 679], 817, 1728, 452) == 1231\nassert solution.minimumJumps([546], 414, 1248, 932) == -1\nassert solution.minimumJumps([836], 933, 1308, 543) == 272\nassert solution.minimumJumps([368, 10, 8, 56, 909, 240, 886, 36, 333, 195], 1335, 177, 527) == -1\nassert solution.minimumJumps([545], 1556, 141, 1213) == -1\nassert solution.minimumJumps([21, 555, 193, 274, 801, 230, 2, 326, 80], 1351, 810, 1246) == -1\nassert solution.minimumJumps([438, 320, 331, 305, 275], 201, 670, 1032) == -1\nassert solution.minimumJumps([893, 196, 232], 17, 942, 110) == 627\nassert solution.minimumJumps([751, 120, 805], 424, 1014, 1185) == -1\nassert solution.minimumJumps([150, 656, 208, 273, 856, 619, 127, 879], 153, 1572, 1906) == -1\nassert solution.minimumJumps([99, 140, 379, 248, 641, 131, 76, 342, 642], 907, 1642, 1751) == 75\nassert solution.minimumJumps([945], 500, 874, 1059) == -1\nassert solution.minimumJumps([303, 815, 628, 79, 297, 323, 169], 1974, 1949, 493) == -1\nassert solution.minimumJumps([683, 932, 270, 923], 147, 1060, 327) == 889\nassert solution.minimumJumps([914, 388, 231, 888, 330, 709], 218, 380, 903) == -1\nassert solution.minimumJumps([942, 1, 123, 751, 827, 278, 567, 293, 444, 909], 1640, 590, 1592) == -1\nassert solution.minimumJumps([32], 1168, 820, 78) == -1\nassert solution.minimumJumps([209, 631, 947, 84, 863, 216, 260, 150, 925], 1259, 1172, 177) == -1\nassert solution.minimumJumps([819, 417, 550, 16, 413, 386, 263, 221, 704], 442, 884, 1932) == -1\nassert solution.minimumJumps([788, 625, 794, 272, 564, 467], 788, 977, 74) == -1\nassert solution.minimumJumps([792, 989, 645, 66, 860, 90, 999], 303, 201, 529) == -1\nassert solution.minimumJumps([935, 817, 290, 886, 338, 164, 422, 914, 330], 156, 1064, 1440) == 150\nassert solution.minimumJumps([619, 610, 482], 149, 1725, 1559) == 1809\nassert solution.minimumJumps([630, 403, 638], 1997, 697, 720) == -1\nassert solution.minimumJumps([674, 784, 16], 149, 980, 141) == 448\nassert solution.minimumJumps([415, 935], 1662, 1122, 1808) == -1\nassert solution.minimumJumps([464, 6, 931, 763, 331], 1106, 1075, 991) == -1",
  "inefficient_solution": "class Solution:\n    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:\n        s = set(forbidden)\n        q = deque([(0, 1)])\n        vis = {(0, 1)}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                i, k = q.popleft()\n                if i == x:\n                    return ans\n                for j in range(-10000000, 10000000):\n                    for l in range(2):\n                        for m in range(2):\n                            nxt = (j + a, l) if l == 1 else (j - b, m)\n                            if 0 <= nxt[0] < 20000000 and nxt[0] not in s and (nxt[0], nxt[1]) not in vis:\n                                q.append(nxt)\n                                vis.add((nxt[0], nxt[1]))\n            ans += 1\n        return -1",
  "is_python": true
}