{
  "problem_idx": 2734,
  "task_name": "Lexicographically Smallest String After Substring Operation",
  "markdown_description": "\nYou are given a string `s` consisting of only lowercase English letters. In one operation, you can do the following:\n\n\n* Select any non-empty substring of `s`, possibly the entire string, then replace each one of its characters with the previous character of the English alphabet. For example, 'b' is converted to 'a', and 'a' is converted to 'z'.\n\n\nReturn *the **lexicographically smallest** string you can obtain after performing the above operation **exactly once**.*\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\nA string `x` is **lexicographically smaller** than a string `y` of the same length if `x[i]` comes before `y[i]` in alphabetic order for the first position `i` such that `x[i] != y[i]`.\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"cbabc\"\n**Output:** \"baabc\"\n**Explanation:** We apply the operation on the substring starting at index 0, and ending at index 1 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"acbbc\"\n**Output:** \"abaab\"\n**Explanation:** We apply the operation on the substring starting at index 1, and ending at index 4 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"leetcode\"\n**Output:** \"kddsbncd\"\n**Explanation:** We apply the operation on the entire string. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 3 * 105`\n* `s` consists of lowercase English letters\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestString(self, s: str) -> str:\n        n = len(s)\n        i = 0\n        while i < n and s[i] == \"a\":\n            i += 1\n        if i == n:\n            return s[:-1] + \"z\"\n        j = i\n        while j < n and s[j] != \"a\":\n            j += 1\n        return s[:i] + \"\".join(chr(ord(c) - 1) for c in s[i:j]) + s[j:]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestString(self, s: str) -> str:\n        n = len(s)\n        i = 0\n        while i < n and s[i] == \"a\":\n            i += 1\n        if i == n:\n            return s[:-1] + \"z\"\n        j = i\n        while j < n and s[j] != \"a\":\n            j += 1\n        return s[:i] + \"\".join(chr(ord(c) - 1) for c in s[i:j]) + s[j:]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestString(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestString(s) == expected_result\n        print(f\"assert solution.smallestString('{s}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.smallestString('{s}') == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestString('xzxhko') == 'wywgjn'\nassert solution.smallestString('k') == 'j'\nassert solution.smallestString('seeep') == 'rdddo'\nassert solution.smallestString('etkfgbcned') == 'dsjefabmdc'\nassert solution.smallestString('xcep') == 'wbdo'\nassert solution.smallestString('mnhp') == 'lmgo'\nassert solution.smallestString('yfgswwrxo') == 'xefrvvqwn'\nassert solution.smallestString('jypeyqg') == 'ixodxpf'\nassert solution.smallestString('xihhfurb') == 'whggetqa'\nassert solution.smallestString('ltfmhjuox') == 'kselgitnw'\nassert solution.smallestString('abevx') == 'aaduw'\nassert solution.smallestString('whcmz') == 'vgbly'\nassert solution.smallestString('zyvpbxfv') == 'yxuoaweu'\nassert solution.smallestString('pji') == 'oih'\nassert solution.smallestString('w') == 'v'\nassert solution.smallestString('mula') == 'ltka'\nassert solution.smallestString('fi') == 'eh'\nassert solution.smallestString('wkoja') == 'vjnia'\nassert solution.smallestString('bmdlfut') == 'alckets'\nassert solution.smallestString('zmn') == 'ylm'\nassert solution.smallestString('jlbjmhtcp') == 'ikailgsbo'\nassert solution.smallestString('ruafvx') == 'qtafvx'\nassert solution.smallestString('avqjcpfg') == 'aupiboef'\nassert solution.smallestString('rrvommbfek') == 'qqunllaedj'\nassert solution.smallestString('xqpc') == 'wpob'\nassert solution.smallestString('mccucbumk') == 'lbbtbatlj'\nassert solution.smallestString('zyecmrdyc') == 'yxdblqcxb'\nassert solution.smallestString('osq') == 'nrp'\nassert solution.smallestString('v') == 'u'\nassert solution.smallestString('nfrboqflc') == 'meqanpekb'\nassert solution.smallestString('urolg') == 'tqnkf'\nassert solution.smallestString('muajx') == 'ltajx'\nassert solution.smallestString('fwck') == 'evbj'\nassert solution.smallestString('zh') == 'yg'\nassert solution.smallestString('zirxf') == 'yhqwe'\nassert solution.smallestString('y') == 'x'\nassert solution.smallestString('vaf') == 'uaf'\nassert solution.smallestString('zlt') == 'yks'\nassert solution.smallestString('ffqtfumsql') == 'eepsetlrpk'\nassert solution.smallestString('byre') == 'axqd'\nassert solution.smallestString('ptkpruqbr') == 'osjoqtpaq'\nassert solution.smallestString('tsswyxwg') == 'srrvxwvf'\nassert solution.smallestString('ntp') == 'mso'\nassert solution.smallestString('lrhklqpp') == 'kqgjkpoo'\nassert solution.smallestString('ii') == 'hh'\nassert solution.smallestString('wal') == 'val'\nassert solution.smallestString('hrzneyz') == 'gqymdxy'\nassert solution.smallestString('asm') == 'arl'\nassert solution.smallestString('xa') == 'wa'\nassert solution.smallestString('nvg') == 'muf'\nassert solution.smallestString('xhesndlgv') == 'wgdrmckfu'\nassert solution.smallestString('n') == 'm'\nassert solution.smallestString('plkzp') == 'okjyo'\nassert solution.smallestString('fbomn') == 'eanlm'\nassert solution.smallestString('qaklm') == 'paklm'\nassert solution.smallestString('omqknlbs') == 'nlpjmkar'\nassert solution.smallestString('zsj') == 'yri'\nassert solution.smallestString('qizarcut') == 'phyarcut'\nassert solution.smallestString('emvvi') == 'dluuh'\nassert solution.smallestString('jskzzbwlb') == 'irjyyavka'\nassert solution.smallestString('ql') == 'pk'\nassert solution.smallestString('k') == 'j'\nassert solution.smallestString('l') == 'k'\nassert solution.smallestString('oy') == 'nx'\nassert solution.smallestString('thenbya') == 'sgdmaxa'\nassert solution.smallestString('lwryds') == 'kvqxcr'\nassert solution.smallestString('tzxwaowo') == 'sywvaowo'\nassert solution.smallestString('rvcsh') == 'qubrg'\nassert solution.smallestString('grsxrb') == 'fqrwqa'\nassert solution.smallestString('sa') == 'ra'\nassert solution.smallestString('xprdqi') == 'woqcph'\nassert solution.smallestString('xmepb') == 'wldoa'\nassert solution.smallestString('wedbnofi') == 'vdcamneh'\nassert solution.smallestString('lpk') == 'koj'\nassert solution.smallestString('lzizjxzq') == 'kyhyiwyp'\nassert solution.smallestString('br') == 'aq'\nassert solution.smallestString('zcjs') == 'ybir'\nassert solution.smallestString('bwdetalqng') == 'avcdsalqng'\nassert solution.smallestString('z') == 'y'\nassert solution.smallestString('gtrv') == 'fsqu'\nassert solution.smallestString('mcqks') == 'lbpjr'\nassert solution.smallestString('et') == 'ds'\nassert solution.smallestString('fcpgn') == 'ebofm'\nassert solution.smallestString('xhaxa') == 'wgaxa'\nassert solution.smallestString('ncabpzmn') == 'mbabpzmn'\nassert solution.smallestString('xf') == 'we'\nassert solution.smallestString('upf') == 'toe'\nassert solution.smallestString('jqocutkg') == 'ipnbtsjf'\nassert solution.smallestString('ehnm') == 'dgml'\nassert solution.smallestString('smkbiej') == 'rljahdi'\nassert solution.smallestString('twazzlfkz') == 'svazzlfkz'\nassert solution.smallestString('ernps') == 'dqmor'\nassert solution.smallestString('qelnjb') == 'pdkmia'\nassert solution.smallestString('bq') == 'ap'\nassert solution.smallestString('mcnrpv') == 'lbmqou'\nassert solution.smallestString('cvprlcgq') == 'buoqkbfp'\nassert solution.smallestString('gipm') == 'fhol'\nassert solution.smallestString('m') == 'l'\nassert solution.smallestString('qmqa') == 'plpa'\nassert solution.smallestString('uj') == 'ti'",
  "inefficient_solution": "class Solution:\n    def smallestString(self, s: str) -> str:\n        n = len(s)\n        chars = [chr(ord(c) - 1) for c in s]\n        usual_chars = [c for c in s]\n        changed_chars = [c for c in range(n) if s[c] != 'a']\n        usual_chars[changed_chars[0]] = 'a'\n        changed_chars[0] += 1\n        for i in range(1, len(changed_chars)):\n            if changed_chars[i] == n:\n                usual_chars[changed_chars[i-1]] = chars[changed_chars[i-1]]\n                chars[changed_chars[i-1]] = 'a'\n                changed_chars[i-1] += 1\n                changed_chars[i] -= 1\n            else:\n                usual_chars[changed_chars[i]] = chars[changed_chars[i]]\n                chars[changed_chars[i]] = 'a'\n        return ''.join(usual_chars)",
  "is_python": true
}