{
  "problem_idx": 1987,
  "task_name": "Number of Unique Good Subsequences",
  "markdown_description": "\nYou are given a binary string `binary`. A **subsequence** of `binary` is considered **good** if it is **not empty** and has **no leading zeros** (with the exception of `\"0\"`).\n\n\nFind the number of **unique good subsequences** of `binary`.\n\n\n* For example, if `binary = \"001\"`, then all the **good** subsequences are `[\"0\", \"0\", \"1\"]`, so the **unique** good subsequences are `\"0\"` and `\"1\"`. Note that subsequences `\"00\"`, `\"01\"`, and `\"001\"` are not good because they have leading zeros.\n\n\nReturn *the number of **unique good subsequences** of* `binary`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** binary = \"001\"\n**Output:** 2\n**Explanation:** The good subsequences of binary are [\"0\", \"0\", \"1\"].\nThe unique good subsequences are \"0\" and \"1\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** binary = \"11\"\n**Output:** 2\n**Explanation:** The good subsequences of binary are [\"1\", \"1\", \"11\"].\nThe unique good subsequences are \"1\" and \"11\".\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** binary = \"101\"\n**Output:** 5\n**Explanation:** The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"]. \nThe unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= binary.length <= 105`\n* `binary` consists of only `'0'`s and `'1'`s.\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n        f = g = 0\n        ans = 0\n        mod = 10**9 + 7\n        for c in binary:\n            if c == \"0\":\n                g = (g + f) % mod\n                ans = 1\n            else:\n                f = (f + g + 1) % mod\n        ans = (ans + f + g) % mod\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n        f = g = 0\n        ans = 0\n        mod = 10**9 + 7\n        for c in binary:\n            if c == \"0\":\n                g = (g + f) % mod\n                ans = 1\n            else:\n                f = (f + g + 1) % mod\n        ans = (ans + f + g) % mod\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate binary string\n    binary = random.choices(\"01\", k=random.randint(1, 11))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfUniqueGoodSubsequences(\"\".join(binary))\n\n    return binary, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        binary, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfUniqueGoodSubsequences(\"\".join(binary)) == expected_result\n        print(f'assert solution.numberOfUniqueGoodSubsequences(\"{\"\".join(binary)}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.numberOfUniqueGoodSubsequences(\"{\"\".join(binary)}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfUniqueGoodSubsequences(\"1\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"00\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"111\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"0101110100\") == 57\nassert solution.numberOfUniqueGoodSubsequences(\"011110\") == 9\nassert solution.numberOfUniqueGoodSubsequences(\"11110101001\") == 143\nassert solution.numberOfUniqueGoodSubsequences(\"1\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"100001010\") == 45\nassert solution.numberOfUniqueGoodSubsequences(\"1100101\") == 31\nassert solution.numberOfUniqueGoodSubsequences(\"10100\") == 11\nassert solution.numberOfUniqueGoodSubsequences(\"01101101011\") == 109\nassert solution.numberOfUniqueGoodSubsequences(\"010010000\") == 23\nassert solution.numberOfUniqueGoodSubsequences(\"10001001\") == 33\nassert solution.numberOfUniqueGoodSubsequences(\"111000\") == 13\nassert solution.numberOfUniqueGoodSubsequences(\"1110011010\") == 106\nassert solution.numberOfUniqueGoodSubsequences(\"10\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"10001\") == 9\nassert solution.numberOfUniqueGoodSubsequences(\"0011100\") == 10\nassert solution.numberOfUniqueGoodSubsequences(\"00000\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"1\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"0\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"0101001111\") == 43\nassert solution.numberOfUniqueGoodSubsequences(\"01001001000\") == 71\nassert solution.numberOfUniqueGoodSubsequences(\"001010\") == 8\nassert solution.numberOfUniqueGoodSubsequences(\"00000\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"10100\") == 11\nassert solution.numberOfUniqueGoodSubsequences(\"0011110100\") == 32\nassert solution.numberOfUniqueGoodSubsequences(\"01\") == 2\nassert solution.numberOfUniqueGoodSubsequences(\"01011011010\") == 116\nassert solution.numberOfUniqueGoodSubsequences(\"011\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"010101001\") == 50\nassert solution.numberOfUniqueGoodSubsequences(\"00\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"0111010011\") == 61\nassert solution.numberOfUniqueGoodSubsequences(\"0100\") == 4\nassert solution.numberOfUniqueGoodSubsequences(\"0101\") == 5\nassert solution.numberOfUniqueGoodSubsequences(\"11\") == 2\nassert solution.numberOfUniqueGoodSubsequences(\"01010000\") == 17\nassert solution.numberOfUniqueGoodSubsequences(\"10001111111\") == 33\nassert solution.numberOfUniqueGoodSubsequences(\"011\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"101001000\") == 52\nassert solution.numberOfUniqueGoodSubsequences(\"110\") == 5\nassert solution.numberOfUniqueGoodSubsequences(\"00101001\") == 19\nassert solution.numberOfUniqueGoodSubsequences(\"10010011011\") == 137\nassert solution.numberOfUniqueGoodSubsequences(\"10110000\") == 27\nassert solution.numberOfUniqueGoodSubsequences(\"01001010001\") == 91\nassert solution.numberOfUniqueGoodSubsequences(\"00010\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"1101010\") == 34\nassert solution.numberOfUniqueGoodSubsequences(\"001101011\") == 29\nassert solution.numberOfUniqueGoodSubsequences(\"1\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"1110011\") == 24\nassert solution.numberOfUniqueGoodSubsequences(\"100011\") == 13\nassert solution.numberOfUniqueGoodSubsequences(\"00110100111\") == 57\nassert solution.numberOfUniqueGoodSubsequences(\"10\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"1000000101\") == 38\nassert solution.numberOfUniqueGoodSubsequences(\"0111101011\") == 51\nassert solution.numberOfUniqueGoodSubsequences(\"101000\") == 14\nassert solution.numberOfUniqueGoodSubsequences(\"10011010\") == 44\nassert solution.numberOfUniqueGoodSubsequences(\"0000101011\") == 18\nassert solution.numberOfUniqueGoodSubsequences(\"00100001\") == 11\nassert solution.numberOfUniqueGoodSubsequences(\"1100110\") == 29\nassert solution.numberOfUniqueGoodSubsequences(\"1011111\") == 13\nassert solution.numberOfUniqueGoodSubsequences(\"11001011\") == 43\nassert solution.numberOfUniqueGoodSubsequences(\"110\") == 5\nassert solution.numberOfUniqueGoodSubsequences(\"1000101\") == 23\nassert solution.numberOfUniqueGoodSubsequences(\"0111101\") == 14\nassert solution.numberOfUniqueGoodSubsequences(\"11110\") == 9\nassert solution.numberOfUniqueGoodSubsequences(\"10110111\") == 33\nassert solution.numberOfUniqueGoodSubsequences(\"110110\") == 19\nassert solution.numberOfUniqueGoodSubsequences(\"10\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"1110100\") == 25\nassert solution.numberOfUniqueGoodSubsequences(\"001101111\") == 17\nassert solution.numberOfUniqueGoodSubsequences(\"100\") == 4\nassert solution.numberOfUniqueGoodSubsequences(\"111\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"001110111\") == 19\nassert solution.numberOfUniqueGoodSubsequences(\"11001\") == 12\nassert solution.numberOfUniqueGoodSubsequences(\"11001100010\") == 147\nassert solution.numberOfUniqueGoodSubsequences(\"0\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"000010100\") == 11\nassert solution.numberOfUniqueGoodSubsequences(\"100001011\") == 39\nassert solution.numberOfUniqueGoodSubsequences(\"0100\") == 4\nassert solution.numberOfUniqueGoodSubsequences(\"111\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"11011001\") == 46\nassert solution.numberOfUniqueGoodSubsequences(\"1\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"00\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"011\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"0001110111\") == 19\nassert solution.numberOfUniqueGoodSubsequences(\"010101\") == 13\nassert solution.numberOfUniqueGoodSubsequences(\"0111100\") == 13\nassert solution.numberOfUniqueGoodSubsequences(\"1011110011\") == 69\nassert solution.numberOfUniqueGoodSubsequences(\"0011\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"0100\") == 4\nassert solution.numberOfUniqueGoodSubsequences(\"1011001000\") == 80\nassert solution.numberOfUniqueGoodSubsequences(\"1\") == 1\nassert solution.numberOfUniqueGoodSubsequences(\"1011100\") == 23\nassert solution.numberOfUniqueGoodSubsequences(\"1010001\") == 25\nassert solution.numberOfUniqueGoodSubsequences(\"10010\") == 11\nassert solution.numberOfUniqueGoodSubsequences(\"10000\") == 6\nassert solution.numberOfUniqueGoodSubsequences(\"000100\") == 4\nassert solution.numberOfUniqueGoodSubsequences(\"011\") == 3\nassert solution.numberOfUniqueGoodSubsequences(\"01000\") == 5",
  "inefficient_solution": "class Solution:\n    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:\n        dp = [0] * len(binary)\n        for i, c in enumerate(binary):\n            if c == \"0\":\n                for j in range(i):\n                    dp[i] += dp[j]\n            else:\n                for j in range(i):\n                    dp[i] += dp[j] + 1\n            dp[i] %= 10**9 + 7\n        unique_subseq = set()\n        for num in dp:\n            unique_subseq.add(chr(num % 2))\n        return len(unique_subseq)",
  "is_python": true
}