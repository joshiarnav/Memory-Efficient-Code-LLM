{
  "problem_idx": 2745,
  "task_name": "Construct the Longest New String",
  "markdown_description": "\nYou are given three integers `x`, `y`, and `z`.\n\n\nYou have `x` strings equal to `\"AA\"`, `y` strings equal to `\"BB\"`, and `z` strings equal to `\"AB\"`. You want to choose some (possibly all or none) of these strings and concatenate them in some order to form a new string. This new string must not contain `\"AAA\"` or `\"BBB\"` as a substring.\n\n\nReturn *the maximum possible length of the new string*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 2, y = 5, z = 1\n**Output:** 12\n**Explanation:** We can concactenate the strings \"BB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AB\" in that order. Then, our new string is \"BBAABBAABBAB\". \nThat string has length 12, and we can show that it is impossible to construct a string of longer length.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 3, y = 2, z = 2\n**Output:** 14\n**Explanation:** We can concactenate the strings \"AB\", \"AB\", \"AA\", \"BB\", \"AA\", \"BB\", and \"AA\" in that order. Then, our new string is \"ABABAABBAABBAA\". \nThat string has length 14, and we can show that it is impossible to construct a string of longer length.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= x, y, z <= 50`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n        if x < y:\n            return (x * 2 + z + 1) * 2\n        if x > y:\n            return (y * 2 + z + 1) * 2\n        return (x + y + z) * 2\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n        if x < y:\n            return (x * 2 + z + 1) * 2\n        if x > y:\n            return (y * 2 + z + 1) * 2\n        return (x + y + z) * 2\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for x, y, and z\n    x = random.randint(1, 50)\n    y = random.randint(1, 50)\n    z = random.randint(1, 50)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestString(x, y, z)\n\n    return x, y, z, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        x, y, z, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestString(x, y, z) == expected_result\n        print(f\"assert solution.longestString({x}, {y}, {z}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestString({x}, {y}, {z}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestString(39, 27, 11) == 132\nassert solution.longestString(10, 20, 23) == 88\nassert solution.longestString(34, 43, 14) == 166\nassert solution.longestString(37, 5, 45) == 112\nassert solution.longestString(21, 48, 33) == 152\nassert solution.longestString(31, 8, 47) == 128\nassert solution.longestString(22, 21, 6) == 98\nassert solution.longestString(44, 13, 33) == 120\nassert solution.longestString(26, 31, 3) == 112\nassert solution.longestString(44, 34, 42) == 222\nassert solution.longestString(32, 32, 36) == 200\nassert solution.longestString(38, 24, 34) == 166\nassert solution.longestString(21, 6, 45) == 116\nassert solution.longestString(11, 27, 17) == 80\nassert solution.longestString(19, 29, 50) == 178\nassert solution.longestString(42, 29, 16) == 150\nassert solution.longestString(7, 42, 44) == 118\nassert solution.longestString(12, 8, 6) == 46\nassert solution.longestString(33, 24, 12) == 122\nassert solution.longestString(44, 44, 13) == 202\nassert solution.longestString(31, 36, 26) == 178\nassert solution.longestString(37, 27, 45) == 200\nassert solution.longestString(35, 30, 1) == 124\nassert solution.longestString(49, 2, 20) == 50\nassert solution.longestString(6, 22, 6) == 38\nassert solution.longestString(39, 29, 31) == 180\nassert solution.longestString(8, 47, 8) == 50\nassert solution.longestString(36, 19, 50) == 178\nassert solution.longestString(27, 46, 11) == 132\nassert solution.longestString(3, 21, 40) == 94\nassert solution.longestString(43, 34, 39) == 216\nassert solution.longestString(30, 48, 18) == 158\nassert solution.longestString(20, 45, 27) == 136\nassert solution.longestString(43, 32, 49) == 228\nassert solution.longestString(20, 22, 43) == 168\nassert solution.longestString(25, 31, 7) == 116\nassert solution.longestString(4, 34, 49) == 116\nassert solution.longestString(43, 3, 14) == 42\nassert solution.longestString(33, 23, 49) == 192\nassert solution.longestString(33, 40, 6) == 146\nassert solution.longestString(19, 28, 4) == 86\nassert solution.longestString(11, 38, 47) == 140\nassert solution.longestString(19, 13, 15) == 84\nassert solution.longestString(21, 11, 10) == 66\nassert solution.longestString(35, 43, 35) == 212\nassert solution.longestString(6, 1, 5) == 16\nassert solution.longestString(32, 8, 45) == 124\nassert solution.longestString(12, 17, 31) == 112\nassert solution.longestString(1, 16, 41) == 88\nassert solution.longestString(11, 15, 21) == 88\nassert solution.longestString(34, 18, 30) == 134\nassert solution.longestString(10, 3, 31) == 76\nassert solution.longestString(24, 9, 11) == 60\nassert solution.longestString(21, 3, 43) == 100\nassert solution.longestString(46, 45, 24) == 230\nassert solution.longestString(3, 26, 1) == 16\nassert solution.longestString(13, 34, 14) == 82\nassert solution.longestString(14, 43, 23) == 104\nassert solution.longestString(27, 28, 20) == 150\nassert solution.longestString(7, 9, 3) == 36\nassert solution.longestString(22, 15, 14) == 90\nassert solution.longestString(6, 1, 21) == 48\nassert solution.longestString(15, 5, 42) == 106\nassert solution.longestString(27, 38, 26) == 162\nassert solution.longestString(4, 14, 17) == 52\nassert solution.longestString(20, 31, 20) == 122\nassert solution.longestString(18, 15, 18) == 98\nassert solution.longestString(10, 29, 5) == 52\nassert solution.longestString(44, 35, 37) == 216\nassert solution.longestString(37, 44, 18) == 186\nassert solution.longestString(46, 50, 15) == 216\nassert solution.longestString(29, 2, 38) == 86\nassert solution.longestString(45, 47, 29) == 240\nassert solution.longestString(50, 49, 50) == 298\nassert solution.longestString(47, 27, 2) == 114\nassert solution.longestString(36, 4, 5) == 28\nassert solution.longestString(7, 26, 50) == 130\nassert solution.longestString(32, 33, 2) == 134\nassert solution.longestString(18, 10, 18) == 78\nassert solution.longestString(45, 33, 1) == 136\nassert solution.longestString(37, 30, 15) == 152\nassert solution.longestString(24, 45, 38) == 174\nassert solution.longestString(29, 8, 39) == 112\nassert solution.longestString(7, 28, 23) == 76\nassert solution.longestString(5, 36, 11) == 44\nassert solution.longestString(24, 12, 27) == 104\nassert solution.longestString(8, 17, 49) == 132\nassert solution.longestString(3, 21, 6) == 26\nassert solution.longestString(9, 49, 16) == 70\nassert solution.longestString(31, 41, 19) == 164\nassert solution.longestString(12, 30, 5) == 60\nassert solution.longestString(1, 4, 2) == 10\nassert solution.longestString(8, 36, 46) == 126\nassert solution.longestString(15, 41, 27) == 116\nassert solution.longestString(28, 15, 11) == 84\nassert solution.longestString(28, 38, 20) == 154\nassert solution.longestString(5, 26, 17) == 56\nassert solution.longestString(19, 38, 39) == 156\nassert solution.longestString(6, 31, 30) == 86\nassert solution.longestString(19, 42, 25) == 128",
  "inefficient_solution": "class Solution:\n    def longestString(self, x: int, y: int, z: int) -> int:\n        # Create lists of \"AA\", \"BB\", and \"AB\" strings\n        aa_strings = [\"AA\"] * x\n        bb_strings = [\"BB\"] * y\n        ab_strings = [\"AB\"] * z\n\n        # Concatenate all the strings\n        all_strings = aa_strings + bb_strings + ab_strings\n\n        # Initialize a list to store the length of the longest string up to each index\n        longest_lengths = [0] * (len(all_strings) + 1)\n\n        # Iterate over each string\n        for i in range(1, len(all_strings) + 1):\n            # If the current string is \"AA\", do not append it if it would cause \"AAA\"\n            if all_strings[i - 1] == \"AA\" and i >= 3 and all_strings[i - 3:i] == \"AA\":\n                continue\n            # If the current string is \"BB\", do not append it if it would cause \"BBB\"\n            elif all_strings[i - 1] == \"BB\" and i >= 3 and all_strings[i - 3:i] == \"BB\":\n                continue\n            # Otherwise, append the current string\n            else:\n                longest_lengths[i] = longest_lengths[i - 1] + 2\n\n            # Check all previous substrings\n            for j in range(1, i):\n                # If the current string is not a substring of a previous string and can be appended\n                if all_strings[i - 1] not in all_strings[j:i] and longest_lengths[j] + 2 <= longest_lengths[i]:\n                    longest_lengths[i] = longest_lengths[j] + 2\n\n        # Return the maximum length found\n        return longest_lengths[-1]",
  "is_python": true
}