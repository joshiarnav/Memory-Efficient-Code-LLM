{
  "problem_idx": 1745,
  "task_name": "Palindrome Partitioning IV",
  "markdown_description": "\nGiven a string `s`, return `true` *if it is possible to split the string* `s` *into three **non-empty** palindromic substrings. Otherwise, return* `false`.\u200b\u200b\u200b\u200b\u200b\n\n\nA string is said to be palindrome if it the same string when reversed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcbdd\"\n**Output:** true\n**Explanation:** \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"bcbddxy\"\n**Output:** false\n**Explanation:** s cannot be split into 3 palindromes.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= s.length <= 2000`\n* `s`\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def checkPartitioning(self, s: str) -> bool:\n        n = len(s)\n        g = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and (i + 1 == j or g[i + 1][j - 1])\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                if g[0][i] and g[i + 1][j] and g[j + 1][-1]:\n                    return True\n        return False\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def checkPartitioning(self, s: str) -> bool:\n        n = len(s)\n        g = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and (i + 1 == j or g[i + 1][j - 1])\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                if g[0][i] and g[i + 1][j] and g[j + 1][-1]:\n                    return True\n        return False\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s_length = random.randint(3, 10)\n    s = \"\".join(random.choices('abcdefghijklmnopqrstuvwxyz', k=s_length))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.checkPartitioning(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.checkPartitioning(s) == expected_result\n        print(f\"assert solution.checkPartitioning('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.checkPartitioning('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.checkPartitioning('emggkyu') == False\nassert solution.checkPartitioning('attfadk') == False\nassert solution.checkPartitioning('jmvir') == False\nassert solution.checkPartitioning('odqkneby') == False\nassert solution.checkPartitioning('mcrzawkvb') == False\nassert solution.checkPartitioning('rjbw') == False\nassert solution.checkPartitioning('mwffglzhsn') == False\nassert solution.checkPartitioning('qecdo') == False\nassert solution.checkPartitioning('ealjvdziq') == False\nassert solution.checkPartitioning('dzleos') == False\nassert solution.checkPartitioning('kqozhg') == False\nassert solution.checkPartitioning('ktjty') == True\nassert solution.checkPartitioning('dprqkwlhdk') == False\nassert solution.checkPartitioning('aobbojnjh') == False\nassert solution.checkPartitioning('wyzli') == False\nassert solution.checkPartitioning('orfr') == False\nassert solution.checkPartitioning('udho') == False\nassert solution.checkPartitioning('najda') == False\nassert solution.checkPartitioning('dqtcstmio') == False\nassert solution.checkPartitioning('oboe') == False\nassert solution.checkPartitioning('lvrlfi') == False\nassert solution.checkPartitioning('sxul') == False\nassert solution.checkPartitioning('ntvtjnwt') == False\nassert solution.checkPartitioning('bbniueamp') == False\nassert solution.checkPartitioning('gvylzfw') == False\nassert solution.checkPartitioning('yyat') == True\nassert solution.checkPartitioning('dtuypszjf') == False\nassert solution.checkPartitioning('skpq') == False\nassert solution.checkPartitioning('tttxcxase') == False\nassert solution.checkPartitioning('gbratzix') == False\nassert solution.checkPartitioning('qpmkfhhekv') == False\nassert solution.checkPartitioning('mljvbb') == False\nassert solution.checkPartitioning('xwlhjvsglw') == False\nassert solution.checkPartitioning('mptgo') == False\nassert solution.checkPartitioning('jrzukd') == False\nassert solution.checkPartitioning('jqt') == True\nassert solution.checkPartitioning('zhxtdoiw') == False\nassert solution.checkPartitioning('benwwtvg') == False\nassert solution.checkPartitioning('vpnskuv') == False\nassert solution.checkPartitioning('ehufe') == False\nassert solution.checkPartitioning('copcaqpd') == False\nassert solution.checkPartitioning('ijns') == False\nassert solution.checkPartitioning('ckr') == True\nassert solution.checkPartitioning('vffzle') == False\nassert solution.checkPartitioning('jlaog') == False\nassert solution.checkPartitioning('hxtt') == True\nassert solution.checkPartitioning('cymk') == False\nassert solution.checkPartitioning('nqhojq') == False\nassert solution.checkPartitioning('ama') == True\nassert solution.checkPartitioning('ikroxwzpjo') == False\nassert solution.checkPartitioning('rajbakjpck') == False\nassert solution.checkPartitioning('lefvisweuk') == False\nassert solution.checkPartitioning('uoynw') == False\nassert solution.checkPartitioning('jhgkchdkie') == False\nassert solution.checkPartitioning('gckbnhlkzx') == False\nassert solution.checkPartitioning('nrfxvx') == False\nassert solution.checkPartitioning('akrzascl') == False\nassert solution.checkPartitioning('wamvveittc') == False\nassert solution.checkPartitioning('ywolkxkv') == False\nassert solution.checkPartitioning('neydi') == False\nassert solution.checkPartitioning('anh') == True\nassert solution.checkPartitioning('joulgaajh') == False\nassert solution.checkPartitioning('bwfxf') == True\nassert solution.checkPartitioning('rsmeqrmxr') == False\nassert solution.checkPartitioning('wexkbyagy') == False\nassert solution.checkPartitioning('grjwxgo') == False\nassert solution.checkPartitioning('rbwxmlsqm') == False\nassert solution.checkPartitioning('tbakrlvrfa') == False\nassert solution.checkPartitioning('cfckpptntx') == False\nassert solution.checkPartitioning('utjpdn') == False\nassert solution.checkPartitioning('kystytiqbw') == False\nassert solution.checkPartitioning('mjtpnipt') == False\nassert solution.checkPartitioning('dwgtaodx') == False\nassert solution.checkPartitioning('tzqfmq') == False\nassert solution.checkPartitioning('awlga') == False\nassert solution.checkPartitioning('vsskexs') == False\nassert solution.checkPartitioning('oszuknh') == False\nassert solution.checkPartitioning('bcrzrb') == False\nassert solution.checkPartitioning('nmcbojjdy') == False\nassert solution.checkPartitioning('sppw') == True\nassert solution.checkPartitioning('kcssbf') == False\nassert solution.checkPartitioning('dwrfxsaq') == False\nassert solution.checkPartitioning('gbbt') == True\nassert solution.checkPartitioning('zorycdnlms') == False\nassert solution.checkPartitioning('csfewawio') == False\nassert solution.checkPartitioning('eepbpnv') == False\nassert solution.checkPartitioning('rieei') == False\nassert solution.checkPartitioning('htqelzzx') == False\nassert solution.checkPartitioning('hqbitqljqo') == False\nassert solution.checkPartitioning('yaocsn') == False\nassert solution.checkPartitioning('vxbm') == False\nassert solution.checkPartitioning('psyaftbbhs') == False\nassert solution.checkPartitioning('muogzseo') == False\nassert solution.checkPartitioning('kcqnykzc') == False\nassert solution.checkPartitioning('bqch') == False\nassert solution.checkPartitioning('ivw') == True\nassert solution.checkPartitioning('cvt') == True\nassert solution.checkPartitioning('pdlqzcofzz') == False\nassert solution.checkPartitioning('ndc') == True\nassert solution.checkPartitioning('lkytlw') == False",
  "inefficient_solution": "class Solution:\n    def checkPartitioning(self, s: str) -> bool:\n        n = len(s)\n        g = [[[True for _ in range(n)] for _ in range(n)] for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    g[i][j][k] = s[i] == s[k] and (j - i == k - j or g[i + 1][j - 1][k - 1])\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for l in range(j + 1, n):\n                    if g[0][i][j] and g[i + 1][j][l] and g[j + 1][l][-1]:\n                        return True\n        return False",
  "is_python": true
}