{
  "problem_idx": 1004,
  "task_name": "Max Consecutive Ones III",
  "markdown_description": "\nGiven a binary array `nums` and an integer `k`, return *the maximum number of consecutive* `1`*'s in the array if you can flip at most* `k` `0`'s.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\n**Output:** 6\n**Explanation:** [1,1,1,0,0,**1**,1,1,1,1,**1**]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\n**Output:** 10\n**Explanation:** [0,0,1,1,**1**,**1**,1,1,1,**1**,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `nums[i]` is either `0` or `1`.\n* `0 <= k <= nums.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        l = r = -1\n        while r < len(nums) - 1:\n            r += 1\n            if nums[r] == 0:\n                k -= 1\n            if k < 0:\n                l += 1\n                if nums[l] == 0:\n                    k += 1\n        return r - l\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        l = r = -1\n        while r < len(nums) - 1:\n            r += 1\n            if nums[r] == 0:\n                k -= 1\n            if k < 0:\n                l += 1\n                if nums[l] == 0:\n                    k += 1\n        return r - l\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random binary array\n    nums = [random.randint(0, 1) for _ in range(random.randint(1, 10))]\n\n    # Generate a random value for k\n    k = random.randint(0, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestOnes(nums, k)\n\n    return nums, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestOnes(nums, k) == expected_result\n        print(f\"assert solution.longestOnes({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.longestOnes({nums}, {k}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestOnes([1, 1, 0], 0) == 2\nassert solution.longestOnes([0, 0, 0, 1, 1, 0, 0, 0], 1) == 3\nassert solution.longestOnes([0, 1, 0], 1) == 2\nassert solution.longestOnes([1, 0, 1, 0, 0], 3) == 5\nassert solution.longestOnes([1, 0, 1, 0, 0, 1], 1) == 3\nassert solution.longestOnes([1, 1, 1, 1, 0, 0], 6) == 6\nassert solution.longestOnes([0, 0, 0, 1, 0, 1, 0, 1, 0], 0) == 1\nassert solution.longestOnes([0, 0, 1, 0], 0) == 1\nassert solution.longestOnes([1, 0, 0, 0, 1, 0], 2) == 3\nassert solution.longestOnes([1, 1, 0, 1, 0, 1, 0, 0, 0, 1], 1) == 4\nassert solution.longestOnes([1, 0, 0, 1, 1, 1], 1) == 4\nassert solution.longestOnes([1], 0) == 1\nassert solution.longestOnes([1, 1, 0, 1, 0, 0, 1, 1, 1], 3) == 9\nassert solution.longestOnes([0, 1, 0, 0, 0, 0, 0, 0, 1], 2) == 3\nassert solution.longestOnes([0], 0) == 0\nassert solution.longestOnes([0, 0, 0, 0], 2) == 2\nassert solution.longestOnes([1, 0, 1, 0, 1, 0, 1, 0], 7) == 8\nassert solution.longestOnes([1], 0) == 1\nassert solution.longestOnes([1, 0, 0, 1, 0, 0], 6) == 6\nassert solution.longestOnes([0], 0) == 0\nassert solution.longestOnes([1, 0], 1) == 2\nassert solution.longestOnes([0, 0, 0, 1, 1], 5) == 5\nassert solution.longestOnes([0, 0], 2) == 2\nassert solution.longestOnes([1, 1, 0, 0, 1, 0, 0, 0, 1], 1) == 3\nassert solution.longestOnes([1, 0, 0, 1, 0, 0, 1, 0, 1, 1], 6) == 10\nassert solution.longestOnes([0, 0, 1, 0, 0, 0, 1, 0, 0, 0], 9) == 10\nassert solution.longestOnes([1], 1) == 1\nassert solution.longestOnes([0, 0, 1], 2) == 3\nassert solution.longestOnes([0, 1, 1, 1, 1, 1, 1, 1, 0, 1], 4) == 10\nassert solution.longestOnes([1, 1, 1, 1, 0, 1], 1) == 6\nassert solution.longestOnes([1, 0], 0) == 1\nassert solution.longestOnes([1, 1, 0], 2) == 3\nassert solution.longestOnes([1, 1, 1, 0], 4) == 4\nassert solution.longestOnes([0, 0, 0, 1], 3) == 4\nassert solution.longestOnes([1, 0, 1, 0], 2) == 4\nassert solution.longestOnes([0, 0, 0, 1, 1, 1, 1, 0, 0], 3) == 7\nassert solution.longestOnes([1, 1, 1, 1, 0, 0, 0], 4) == 7\nassert solution.longestOnes([1, 0, 0, 0, 1], 0) == 1\nassert solution.longestOnes([1, 0, 1, 0], 2) == 4\nassert solution.longestOnes([1, 0, 1, 1, 0, 0, 0, 0], 7) == 8\nassert solution.longestOnes([1], 1) == 1\nassert solution.longestOnes([1, 1], 1) == 2\nassert solution.longestOnes([1, 1], 0) == 2\nassert solution.longestOnes([1, 1, 1, 1, 0, 0, 0, 1, 1, 1], 6) == 10\nassert solution.longestOnes([0, 0, 1, 0], 0) == 1\nassert solution.longestOnes([0, 1, 0, 1, 0, 1, 0, 1, 1, 0], 4) == 9\nassert solution.longestOnes([1, 1, 1, 1, 0, 0, 0], 4) == 7\nassert solution.longestOnes([0, 1, 1, 1, 1, 0, 1], 0) == 4\nassert solution.longestOnes([1, 1, 1, 1, 0, 1, 0, 1, 1, 1], 2) == 10\nassert solution.longestOnes([0, 0, 0, 1], 1) == 2\nassert solution.longestOnes([1, 0, 1, 1, 0, 1], 1) == 4\nassert solution.longestOnes([1, 0, 0], 1) == 2\nassert solution.longestOnes([0, 0, 0, 1, 0], 4) == 5\nassert solution.longestOnes([0, 1, 0, 1, 0, 1, 0, 0], 3) == 6\nassert solution.longestOnes([1, 0, 1, 1, 1, 1, 1, 1, 1, 1], 1) == 10\nassert solution.longestOnes([1], 1) == 1\nassert solution.longestOnes([1, 1, 1, 0, 0, 0], 0) == 3\nassert solution.longestOnes([0, 0, 1, 0, 1, 1], 3) == 6\nassert solution.longestOnes([0, 0, 1, 0, 1, 1], 2) == 5\nassert solution.longestOnes([1, 1, 1, 1, 1, 1, 1, 1], 7) == 8\nassert solution.longestOnes([1, 1, 1, 1, 0, 1, 1, 1, 0], 5) == 9\nassert solution.longestOnes([1, 0, 0, 0, 1, 0, 1, 1, 1], 8) == 9\nassert solution.longestOnes([1, 1, 0, 0, 0, 1], 2) == 4\nassert solution.longestOnes([1, 1, 1, 0, 0, 1, 1, 0, 1, 0], 3) == 9\nassert solution.longestOnes([1, 0, 0, 0, 0, 1, 0], 3) == 4\nassert solution.longestOnes([0, 0, 0, 0, 1, 0, 1], 2) == 4\nassert solution.longestOnes([0], 1) == 1\nassert solution.longestOnes([0, 0, 1, 1, 0], 2) == 4\nassert solution.longestOnes([1, 1, 1, 1, 0, 1, 0, 1], 4) == 8\nassert solution.longestOnes([0, 1, 0, 0, 1, 0, 0, 1, 0], 7) == 9\nassert solution.longestOnes([0], 1) == 1\nassert solution.longestOnes([1, 1], 0) == 2\nassert solution.longestOnes([0, 1, 1, 1], 1) == 4\nassert solution.longestOnes([1, 0], 2) == 2\nassert solution.longestOnes([1, 1, 0, 1, 1, 1, 1], 0) == 4\nassert solution.longestOnes([1, 1, 1, 0, 0], 5) == 5\nassert solution.longestOnes([1, 0, 0, 0, 0, 0, 0, 1, 1], 9) == 9\nassert solution.longestOnes([0, 0, 1, 1, 1, 0, 1, 0, 0, 1], 3) == 8\nassert solution.longestOnes([0], 0) == 0\nassert solution.longestOnes([0, 0, 1], 2) == 3\nassert solution.longestOnes([0, 1], 1) == 2\nassert solution.longestOnes([1, 0, 0, 0, 1, 1, 0, 1, 1, 1], 9) == 10\nassert solution.longestOnes([0, 0, 1, 1], 3) == 4\nassert solution.longestOnes([0, 0, 0, 0, 0, 0, 1, 0, 1], 4) == 6\nassert solution.longestOnes([1, 0, 0, 1, 1, 1, 1, 1, 1, 1], 7) == 10\nassert solution.longestOnes([1, 1, 0, 0, 0, 0], 3) == 5\nassert solution.longestOnes([1, 0, 1, 1, 0, 1, 1, 1], 5) == 8\nassert solution.longestOnes([0, 0, 0, 1, 0], 5) == 5\nassert solution.longestOnes([1, 1, 0, 1, 1, 1, 0, 1], 6) == 8\nassert solution.longestOnes([1, 0, 0, 0, 1, 1, 0, 1, 1, 0], 2) == 6\nassert solution.longestOnes([0, 0, 1, 0, 1, 1], 3) == 6\nassert solution.longestOnes([0, 1, 0, 0, 0, 1, 0, 0], 7) == 8\nassert solution.longestOnes([0], 0) == 0\nassert solution.longestOnes([0, 0, 0, 1, 0, 1, 0], 7) == 7\nassert solution.longestOnes([1, 0, 1, 0, 1, 0, 0, 1], 5) == 8\nassert solution.longestOnes([1, 1, 1, 0, 1, 1, 1, 1, 0], 2) == 9\nassert solution.longestOnes([0, 0, 1, 0, 0, 1], 3) == 5\nassert solution.longestOnes([0, 0, 0, 1, 0], 2) == 3\nassert solution.longestOnes([0, 0, 1, 0, 0, 1, 0, 0], 4) == 6\nassert solution.longestOnes([1, 1, 0, 1], 1) == 4",
  "inefficient_solution": "class Solution:\n    def longestOnes(self, nums: List[int], k: int) -> int:\n        visited = [False] * len(nums)\n        ones = [False] * len(nums)\n        max_count = 0\n        current_count = 0\n        zero_count = 0\n        for i in range(len(nums)):\n            visited[i] = True\n            if nums[i] == 1:\n                ones[i] = True\n                current_count += 1\n            else:\n                zero_count += 1\n            if zero_count > k:\n                for j in range(len(nums)):\n                    visited[j] = False\n                    if not visited[j]:\n                        if nums[j] == 1:\n                            ones[j] = False\n                            current_count -= 1\n                        if nums[j] == 0:\n                            zero_count -= 1\n                    if j == i:\n                        break\n                zero_count -= 1\n                if nums[i] == 0:\n                    zero_count += 1\n                if nums[i] == 1:\n                    current_count += 1\n        for i in range(len(nums)):\n            if ones[i]:\n                max_count = max(max_count, current_count)\n                current_count = 0\n            else:\n                current_count += 1\n        return max_count",
  "is_python": true
}