{
  "problem_idx": 1088,
  "task_name": "Confusing Number II",
  "markdown_description": "\nA **confusing number** is a number that when rotated `180` degrees becomes a different number with **each digit valid**.\n\n\nWe can rotate digits of a number by `180` degrees to form new digits.\n\n\n* When `0`, `1`, `6`, `8`, and `9` are rotated `180` degrees, they become `0`, `1`, `9`, `8`, and `6` respectively.\n* When `2`, `3`, `4`, `5`, and `7` are rotated `180` degrees, they become **invalid**.\n\n\nNote that after rotating a number, we can ignore leading zeros.\n\n\n* For example, after rotating `8000`, we have `0008` which is considered as just `8`.\n\n\nGiven an integer `n`, return *the number of **confusing numbers** in the inclusive range* `[1, n]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 20\n**Output:** 6\n**Explanation:** The confusing numbers are [6,9,10,16,18,19].\n6 converts to 9.\n9 converts to 6.\n10 converts to 01 which is just 1.\n16 converts to 91.\n18 converts to 81.\n19 converts to 61.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 100\n**Output:** 19\n**Explanation:** The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def confusingNumberII(self, n: int) -> int:\n        def check(x: int) -> bool:\n            y, t = 0, x\n            while t:\n                t, v = divmod(t, 10)\n                y = y * 10 + d[v]\n            return x != y\n\n        def dfs(pos: int, limit: bool, x: int) -> int:\n            if pos >= len(s):\n                return int(check(x))\n            up = int(s[pos]) if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if d[i] != -1:\n                    ans += dfs(pos + 1, limit and i == up, x * 10 + i)\n            return ans\n\n        d = [0, 1, -1, -1, -1, -1, 9, -1, 8, 6]\n        s = str(n)\n        return dfs(0, True, 0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def confusingNumberII(self, n: int) -> int:\n        def check(x: int) -> bool:\n            y, t = 0, x\n            while t:\n                t, v = divmod(t, 10)\n                y = y * 10 + d[v]\n            return x != y\n\n        def dfs(pos: int, limit: bool, x: int) -> int:\n            if pos >= len(s):\n                return int(check(x))\n            up = int(s[pos]) if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if d[i] != -1:\n                    ans += dfs(pos + 1, limit and i == up, x * 10 + i)\n            return ans\n\n        d = [0, 1, -1, -1, -1, -1, 9, -1, 8, 6]\n        s = str(n)\n        return dfs(0, True, 0)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random number\n    n = random.randint(1, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.confusingNumberII(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.confusingNumberII(n) == expected_result\n        print(f\"assert solution.confusingNumberII({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.confusingNumberII({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.confusingNumberII(9) == 2\nassert solution.confusingNumberII(9) == 2\nassert solution.confusingNumberII(2) == 0\nassert solution.confusingNumberII(25) == 6\nassert solution.confusingNumberII(57) == 6\nassert solution.confusingNumberII(91) == 16\nassert solution.confusingNumberII(32) == 6\nassert solution.confusingNumberII(7) == 1\nassert solution.confusingNumberII(82) == 12\nassert solution.confusingNumberII(61) == 8\nassert solution.confusingNumberII(54) == 6\nassert solution.confusingNumberII(30) == 6\nassert solution.confusingNumberII(91) == 16\nassert solution.confusingNumberII(99) == 18\nassert solution.confusingNumberII(84) == 12\nassert solution.confusingNumberII(17) == 4\nassert solution.confusingNumberII(32) == 6\nassert solution.confusingNumberII(87) == 13\nassert solution.confusingNumberII(60) == 7\nassert solution.confusingNumberII(37) == 6\nassert solution.confusingNumberII(23) == 6\nassert solution.confusingNumberII(89) == 14\nassert solution.confusingNumberII(22) == 6\nassert solution.confusingNumberII(90) == 15\nassert solution.confusingNumberII(92) == 16\nassert solution.confusingNumberII(100) == 19\nassert solution.confusingNumberII(86) == 13\nassert solution.confusingNumberII(10) == 3\nassert solution.confusingNumberII(72) == 10\nassert solution.confusingNumberII(52) == 6\nassert solution.confusingNumberII(89) == 14\nassert solution.confusingNumberII(28) == 6\nassert solution.confusingNumberII(46) == 6\nassert solution.confusingNumberII(53) == 6\nassert solution.confusingNumberII(20) == 6\nassert solution.confusingNumberII(66) == 9\nassert solution.confusingNumberII(39) == 6\nassert solution.confusingNumberII(18) == 5\nassert solution.confusingNumberII(48) == 6\nassert solution.confusingNumberII(80) == 11\nassert solution.confusingNumberII(72) == 10\nassert solution.confusingNumberII(24) == 6\nassert solution.confusingNumberII(54) == 6\nassert solution.confusingNumberII(22) == 6\nassert solution.confusingNumberII(40) == 6\nassert solution.confusingNumberII(44) == 6\nassert solution.confusingNumberII(80) == 11\nassert solution.confusingNumberII(35) == 6\nassert solution.confusingNumberII(33) == 6\nassert solution.confusingNumberII(70) == 10\nassert solution.confusingNumberII(23) == 6\nassert solution.confusingNumberII(12) == 3\nassert solution.confusingNumberII(19) == 6\nassert solution.confusingNumberII(76) == 10\nassert solution.confusingNumberII(88) == 13\nassert solution.confusingNumberII(14) == 3\nassert solution.confusingNumberII(95) == 16\nassert solution.confusingNumberII(17) == 4\nassert solution.confusingNumberII(92) == 16\nassert solution.confusingNumberII(33) == 6\nassert solution.confusingNumberII(19) == 6\nassert solution.confusingNumberII(57) == 6\nassert solution.confusingNumberII(36) == 6\nassert solution.confusingNumberII(29) == 6\nassert solution.confusingNumberII(23) == 6\nassert solution.confusingNumberII(53) == 6\nassert solution.confusingNumberII(4) == 0\nassert solution.confusingNumberII(31) == 6\nassert solution.confusingNumberII(95) == 16\nassert solution.confusingNumberII(14) == 3\nassert solution.confusingNumberII(2) == 0\nassert solution.confusingNumberII(71) == 10\nassert solution.confusingNumberII(93) == 16\nassert solution.confusingNumberII(35) == 6\nassert solution.confusingNumberII(95) == 16\nassert solution.confusingNumberII(58) == 6\nassert solution.confusingNumberII(33) == 6\nassert solution.confusingNumberII(42) == 6\nassert solution.confusingNumberII(61) == 8\nassert solution.confusingNumberII(19) == 6\nassert solution.confusingNumberII(11) == 3\nassert solution.confusingNumberII(2) == 0\nassert solution.confusingNumberII(15) == 3\nassert solution.confusingNumberII(15) == 3\nassert solution.confusingNumberII(42) == 6\nassert solution.confusingNumberII(33) == 6\nassert solution.confusingNumberII(31) == 6\nassert solution.confusingNumberII(100) == 19\nassert solution.confusingNumberII(69) == 10\nassert solution.confusingNumberII(17) == 4\nassert solution.confusingNumberII(31) == 6\nassert solution.confusingNumberII(20) == 6\nassert solution.confusingNumberII(89) == 14\nassert solution.confusingNumberII(45) == 6\nassert solution.confusingNumberII(10) == 3\nassert solution.confusingNumberII(55) == 6\nassert solution.confusingNumberII(23) == 6\nassert solution.confusingNumberII(75) == 10\nassert solution.confusingNumberII(19) == 6\nassert solution.confusingNumberII(18) == 5",
  "inefficient_solution": "class Solution:\n    def confusingNumberII(self, n: int) -> int:\n        def check(x: int) -> bool:\n            y, t = 0, x\n            while t:\n                t, v = divmod(t, 10)\n                y = y * 10 + d[v]\n            return x != y\n\n        def dfs(pos: int, limit: bool, x: int) -> int:\n            if pos >= len(s):\n                return int(check(x))\n            up = int(s[pos]) if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if d[i] != -1:\n                    ans += dfs(pos + 1, limit and i == up, x * 10 + i)\n            return ans\n\n        d = list(range(10)) * int(1e6)  # Allocate a huge list of digits\n        for i in range(10):\n            d[i * int(1e6)] = 0\n            d[i * int(1e6) + 1] = 1\n            d[i * int(1e6) + 6] = 9\n            d[i * int(1e6) + 8] = 8\n            d[i * int(1e6) + 9] = 6\n            d[i * int(1e6) + 2] = -1\n            d[i * int(1e6) + 3] = -1\n            d[i * int(1e6) + 4] = -1\n            d[i * int(1e6) + 5] = -1\n            d[i * int(1e6) + 7] = -1\n        s = list(str(n)) * int(1e6)  # Allocate a huge list of digits\n\n        res = 0\n        for i in range(int(1e6)):\n            res += dfs(0, i == 0, 0)\n        return res",
  "is_python": true
}