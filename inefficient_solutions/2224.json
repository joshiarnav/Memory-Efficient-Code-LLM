{
  "problem_idx": 2224,
  "task_name": "Minimum Number of Operations to Convert Time",
  "markdown_description": "\nYou are given two strings `current` and `correct` representing two **24-hour times**.\n\n\n24-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\n\nIn one operation you can increase the time `current` by `1`, `5`, `15`, or `60` minutes. You can perform this operation **any** number of times.\n\n\nReturn *the **minimum number of operations** needed to convert* `current` *to* `correct`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** current = \"02:30\", correct = \"04:35\"\n**Output:** 3\n**Explanation:**We can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes \"03:30\".\n- Add 60 minutes to current. current becomes \"04:30\".\n- Add 5 minutes to current. current becomes \"04:35\".\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** current = \"11:00\", correct = \"11:01\"\n**Output:** 1\n**Explanation:** We only have to add one minute to current, so the minimum number of operations needed is 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `current` and `correct` are in the format `\"HH:MM\"`\n* `current <= correct`\n\n\n",
  "canonical_solution": "class Solution:\n    def convertTime(self, current: str, correct: str) -> int:\n        a = int(current[:2]) * 60 + int(current[3:])\n        b = int(correct[:2]) * 60 + int(correct[3:])\n        ans, d = 0, b - a\n        for i in [60, 15, 5, 1]:\n            ans += d // i\n            d %= i\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def convertTime(self, current: str, correct: str) -> int:\n        a = int(current[:2]) * 60 + int(current[3:])\n        b = int(correct[:2]) * 60 + int(correct[3:])\n        ans, d = 0, b - a\n        for i in [60, 15, 5, 1]:\n            ans += d // i\n            d %= i\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    test_case_generator_results = []\n    for i in range(100):\n\n        current_hours = random.randint(0, 23)\n        current_minutes = random.randint(0, 59)\n        current = f\"{current_hours:02d}:{current_minutes:02d}\"\n\n        correct_hours = random.randint(current_hours, 23)\n        correct_minutes = random.randint(current_minutes, 59)\n        correct = f\"{correct_hours:02d}:{correct_minutes:02d}\"\n\n        expected_result = solution.convertTime(current, correct)\n\n        test_case_generator_results.append(f\"assert solution.convertTime('{current}', '{correct}') == {expected_result}\")\n\n    return test_case_generator_results\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = generate_test_case()\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.convertTime('13:45', '22:45') == 9\nassert solution.convertTime('12:11', '21:27') == 11\nassert solution.convertTime('15:40', '22:47') == 10\nassert solution.convertTime('15:29', '20:33') == 9\nassert solution.convertTime('09:40', '09:55') == 1\nassert solution.convertTime('15:48', '15:57') == 5\nassert solution.convertTime('06:40', '18:52') == 16\nassert solution.convertTime('07:28', '12:54') == 9\nassert solution.convertTime('14:46', '20:49') == 9\nassert solution.convertTime('20:57', '23:57') == 3\nassert solution.convertTime('12:33', '19:39') == 9\nassert solution.convertTime('18:55', '23:55') == 5\nassert solution.convertTime('21:11', '22:43') == 5\nassert solution.convertTime('21:22', '21:56') == 6\nassert solution.convertTime('13:09', '23:26') == 13\nassert solution.convertTime('00:43', '14:43') == 14\nassert solution.convertTime('00:33', '23:48') == 24\nassert solution.convertTime('03:04', '12:18') == 15\nassert solution.convertTime('16:21', '21:38') == 8\nassert solution.convertTime('13:49', '17:54') == 5\nassert solution.convertTime('12:40', '16:59') == 9\nassert solution.convertTime('11:01', '14:37') == 7\nassert solution.convertTime('09:57', '22:57') == 13\nassert solution.convertTime('19:43', '20:48') == 2\nassert solution.convertTime('21:35', '21:53') == 4\nassert solution.convertTime('09:05', '12:24') == 8\nassert solution.convertTime('10:22', '20:25') == 13\nassert solution.convertTime('03:29', '05:40') == 5\nassert solution.convertTime('12:57', '18:59') == 8\nassert solution.convertTime('23:46', '23:47') == 1\nassert solution.convertTime('12:54', '20:57') == 11\nassert solution.convertTime('12:41', '21:43') == 11\nassert solution.convertTime('15:52', '16:57') == 2\nassert solution.convertTime('05:04', '21:09') == 17\nassert solution.convertTime('02:40', '10:48') == 12\nassert solution.convertTime('13:27', '18:59') == 9\nassert solution.convertTime('16:15', '21:32') == 8\nassert solution.convertTime('19:11', '22:47') == 7\nassert solution.convertTime('15:58', '20:59') == 6\nassert solution.convertTime('03:58', '13:58') == 10\nassert solution.convertTime('07:25', '20:42') == 16\nassert solution.convertTime('06:42', '12:56') == 12\nassert solution.convertTime('22:49', '23:49') == 1\nassert solution.convertTime('11:49', '14:55') == 5\nassert solution.convertTime('20:59', '22:59') == 2\nassert solution.convertTime('03:30', '16:37') == 16\nassert solution.convertTime('03:12', '12:43') == 12\nassert solution.convertTime('19:15', '20:36') == 4\nassert solution.convertTime('23:17', '23:53') == 4\nassert solution.convertTime('22:50', '23:56') == 3\nassert solution.convertTime('06:14', '20:55') == 19\nassert solution.convertTime('00:06', '14:57') == 19\nassert solution.convertTime('10:26', '16:28') == 8\nassert solution.convertTime('15:12', '21:41') == 13\nassert solution.convertTime('23:35', '23:35') == 0\nassert solution.convertTime('12:35', '15:36') == 4\nassert solution.convertTime('09:57', '21:57') == 12\nassert solution.convertTime('22:20', '22:55') == 3\nassert solution.convertTime('13:55', '13:56') == 1\nassert solution.convertTime('14:53', '16:57') == 6\nassert solution.convertTime('23:32', '23:32') == 0\nassert solution.convertTime('20:27', '20:32') == 1\nassert solution.convertTime('09:54', '19:59') == 11\nassert solution.convertTime('06:36', '18:45') == 17\nassert solution.convertTime('13:11', '16:34') == 8\nassert solution.convertTime('19:45', '19:46') == 1\nassert solution.convertTime('08:26', '11:57') == 6\nassert solution.convertTime('23:53', '23:58') == 1\nassert solution.convertTime('01:58', '11:58') == 10\nassert solution.convertTime('11:59', '13:59') == 2\nassert solution.convertTime('20:34', '22:44') == 4\nassert solution.convertTime('23:49', '23:55') == 2\nassert solution.convertTime('03:31', '06:52') == 6\nassert solution.convertTime('02:54', '22:58') == 24\nassert solution.convertTime('06:06', '06:33') == 5\nassert solution.convertTime('20:02', '20:12') == 2\nassert solution.convertTime('13:41', '15:44') == 5\nassert solution.convertTime('11:05', '17:49') == 14\nassert solution.convertTime('16:39', '20:40') == 5\nassert solution.convertTime('16:34', '21:37') == 8\nassert solution.convertTime('14:58', '16:58') == 2\nassert solution.convertTime('17:53', '20:58') == 4\nassert solution.convertTime('12:37', '16:51') == 10\nassert solution.convertTime('01:53', '18:54') == 18\nassert solution.convertTime('04:13', '04:57') == 8\nassert solution.convertTime('10:05', '21:41') == 15\nassert solution.convertTime('19:13', '20:57') == 9\nassert solution.convertTime('22:17', '23:58') == 6\nassert solution.convertTime('15:56', '21:56') == 6\nassert solution.convertTime('02:08', '08:23') == 7\nassert solution.convertTime('18:32', '21:51') == 8\nassert solution.convertTime('03:15', '12:16') == 10\nassert solution.convertTime('13:34', '14:39') == 2\nassert solution.convertTime('14:58', '15:58') == 1\nassert solution.convertTime('14:17', '16:29') == 6\nassert solution.convertTime('12:05', '19:25') == 9\nassert solution.convertTime('20:22', '22:48') == 6\nassert solution.convertTime('20:07', '23:34') == 8\nassert solution.convertTime('14:54', '23:54') == 9\nassert solution.convertTime('00:29', '07:46') == 10",
  "inefficient_solution": "class Solution:\n    def convertTime(self, current: str, correct: str) -> int:\n        a = [(int(current[:2]), int(current[3:]))]\n        b = [(int(correct[:2]), int(correct[3:]))]\n        a.extend([((t + 60) % 24, (m + 60) % 60) for t, m in a])\n        a.extend([((t + 15) % 24, (m + 15) % 60) for t, m in a])\n        a.extend([((t + 5) % 24, (m + 5) % 60) for t, m in a])\n        a.extend([((t + 1) % 24, (m + 1) % 60) for t, m in a])\n        a = set(a)\n        ans = float('inf')\n        for t, m in a:\n            ans = min(ans, abs(t - b[0][0]) * 60 + abs(m - b[0][1]))\n        return ans",
  "is_python": true
}