{
  "problem_idx": 925,
  "task_name": "Long Pressed Name",
  "markdown_description": "\nYour friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get *long pressed*, and the character will be typed 1 or more times.\n\n\nYou examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** name = \"alex\", typed = \"aaleex\"\n**Output:** true\n**Explanation:** 'a' and 'e' in 'alex' were long pressed.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** name = \"saeed\", typed = \"ssaaedd\"\n**Output:** false\n**Explanation:** 'e' must have been pressed twice, but it was not in the typed output.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= name.length, typed.length <= 1000`\n* `name` and `typed` consist of only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        m, n = len(name), len(typed)\n        i = j = 0\n        while i < m and j < n:\n            if name[i] != typed[j]:\n                return False\n            cnt1 = cnt2 = 0\n            c = name[i]\n            while i + 1 < m and name[i + 1] == c:\n                i += 1\n                cnt1 += 1\n            while j + 1 < n and typed[j + 1] == c:\n                j += 1\n                cnt2 += 1\n            if cnt1 > cnt2:\n                return False\n            i, j = i + 1, j + 1\n        return i == m and j == n\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        m, n = len(name), len(typed)\n        i = j = 0\n        while i < m and j < n:\n            if name[i] != typed[j]:\n                return False\n            cnt1 = cnt2 = 0\n            c = name[i]\n            while i + 1 < m and name[i + 1] == c:\n                i += 1\n                cnt1 += 1\n            while j + 1 < n and typed[j + 1] == c:\n                j += 1\n                cnt2 += 1\n            if cnt1 > cnt2:\n                return False\n            i, j = i + 1, j + 1\n        return i == m and j == n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random name string\n    name = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n    \n    # Generate random typed string\n    typed = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 20)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isLongPressedName(name, typed)\n\n    return name, typed, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        name, typed, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isLongPressedName(name, typed) == expected_result\n        if expected_result:\n            print(f\"assert solution.isLongPressedName('{name}', '{typed}') == True\")\n            test_case_generator_results.append(f\"assert solution.isLongPressedName('{name}', '{typed}') == True\") # You can find that we construct the test case in the same format as the example\n        else:\n            print(f\"assert solution.isLongPressedName('{name}', '{typed}') == False\")\n            test_case_generator_results.append(f\"assert solution.isLongPressedName('{name}', '{typed}') == False\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isLongPressedName('dmrdbjiccx', 'thnnm') == False\nassert solution.isLongPressedName('wtzfzxmf', 'pjzngkyak') == False\nassert solution.isLongPressedName('cdm', 'izlidqg') == False\nassert solution.isLongPressedName('gbgymnkip', 'rtfdg') == False\nassert solution.isLongPressedName('ypaumcilv', 'g') == False\nassert solution.isLongPressedName('whcghqly', 'dbewyxibe') == False\nassert solution.isLongPressedName('mcjnmkbicb', 'zap') == False\nassert solution.isLongPressedName('sn', 'oqqc') == False\nassert solution.isLongPressedName('yifdxxrlge', 'weknwrnnlkhgeiwafr') == False\nassert solution.isLongPressedName('dtasx', 'kcrjnmcwnl') == False\nassert solution.isLongPressedName('uzr', 'gtlwmugprupwlwkn') == False\nassert solution.isLongPressedName('hhvbkufci', 'akakxkryakavwgfbw') == False\nassert solution.isLongPressedName('j', 'qktsjxuyighy') == False\nassert solution.isLongPressedName('jamagmidq', 'wlnbhgpnaidgj') == False\nassert solution.isLongPressedName('gbx', 'vkgwelpnprxa') == False\nassert solution.isLongPressedName('bt', 'pznlarzlje') == False\nassert solution.isLongPressedName('qgcahxkbvi', 'kamzcauwints') == False\nassert solution.isLongPressedName('lhtgty', 'xppkypqbfwfqzqlnbiyt') == False\nassert solution.isLongPressedName('re', 'yzhxvsr') == False\nassert solution.isLongPressedName('ngjavwuwpn', 'bzfsxpcprgiy') == False\nassert solution.isLongPressedName('tt', 'hhneurzmkt') == False\nassert solution.isLongPressedName('ynfpsml', 'jqxjmtar') == False\nassert solution.isLongPressedName('mctoqajo', 'tmsdaiyhcvbinqhjco') == False\nassert solution.isLongPressedName('nwwlth', 'ozsomeoy') == False\nassert solution.isLongPressedName('adq', 'euxetjzekximshzmj') == False\nassert solution.isLongPressedName('imlfbc', 'wirbhzrubp') == False\nassert solution.isLongPressedName('qivqmfebf', 'rwftcpeklyvs') == False\nassert solution.isLongPressedName('lca', 'qndfojnnaiewm') == False\nassert solution.isLongPressedName('odnpr', 'fdytqzmlwo') == False\nassert solution.isLongPressedName('gl', 'logcxcwmtfplckbkzkr') == False\nassert solution.isLongPressedName('mbo', 'rcl') == False\nassert solution.isLongPressedName('yrxkp', 'tho') == False\nassert solution.isLongPressedName('dkjsvu', 'bwhovjdy') == False\nassert solution.isLongPressedName('pfqsrsjtu', 'zzcwhjrcgjvcdqbzj') == False\nassert solution.isLongPressedName('dzdua', 'ro') == False\nassert solution.isLongPressedName('mfmxapvw', 'iznkh') == False\nassert solution.isLongPressedName('lvaxq', 'kbfojmbuarsghhljxx') == False\nassert solution.isLongPressedName('qmhnzrkx', 'xpdcyhju') == False\nassert solution.isLongPressedName('slw', 'kiwstrpccvyyqqqqlf') == False\nassert solution.isLongPressedName('ids', 'nxcbqwsuxlna') == False\nassert solution.isLongPressedName('waw', 'clmnwhc') == False\nassert solution.isLongPressedName('uxilrstooj', 'arhxe') == False\nassert solution.isLongPressedName('bhjbehyagt', 'm') == False\nassert solution.isLongPressedName('omd', 'anjpojyxpcnlsvwl') == False\nassert solution.isLongPressedName('pyimmtyygi', 'uimuba') == False\nassert solution.isLongPressedName('i', 'ypquhwiz') == False\nassert solution.isLongPressedName('hryxxhqr', 'r') == False\nassert solution.isLongPressedName('rdcpnjterc', 'flcqpijxtd') == False\nassert solution.isLongPressedName('srudv', 'hiwsbzuzs') == False\nassert solution.isLongPressedName('pxhlhoxx', 'ymhxfbgfbpckvlv') == False\nassert solution.isLongPressedName('kceqrj', 'whwxenayu') == False\nassert solution.isLongPressedName('qgn', 'tkko') == False\nassert solution.isLongPressedName('lk', 'wcpwoll') == False\nassert solution.isLongPressedName('cucdezk', 'dbonwpyzdywvewx') == False\nassert solution.isLongPressedName('xm', 'bzkmsmzdtegslvxb') == False\nassert solution.isLongPressedName('joghno', 'ulz') == False\nassert solution.isLongPressedName('bfwzjyf', 'srqnvaweamsve') == False\nassert solution.isLongPressedName('n', 'ajhppbheydsdcrt') == False\nassert solution.isLongPressedName('hi', 'mintiprqqxmtbglmoqt') == False\nassert solution.isLongPressedName('riwmizzoq', 'lc') == False\nassert solution.isLongPressedName('iwv', 'uwmycwqc') == False\nassert solution.isLongPressedName('aayvt', 'sr') == False\nassert solution.isLongPressedName('fipoprddhf', 'lsi') == False\nassert solution.isLongPressedName('xosiezohj', 'skwrsz') == False\nassert solution.isLongPressedName('fqyztws', 'gmkl') == False\nassert solution.isLongPressedName('bjgtjfm', 'feedlxksrwy') == False\nassert solution.isLongPressedName('euaan', 'zzovfcolcdsjyedneuya') == False\nassert solution.isLongPressedName('swnsfw', 'x') == False\nassert solution.isLongPressedName('njswzdzt', 'wnonycbmzpqyw') == False\nassert solution.isLongPressedName('eeyynxokxq', 'wq') == False\nassert solution.isLongPressedName('bayukukbdl', 'hwvsrfndchvglz') == False\nassert solution.isLongPressedName('oibqhmq', 'tvvszdvondi') == False\nassert solution.isLongPressedName('moq', 'tnigtkdggmipmm') == False\nassert solution.isLongPressedName('dy', 'jbhouztlbsfdloz') == False\nassert solution.isLongPressedName('esdun', 'jllielntla') == False\nassert solution.isLongPressedName('zurj', 'nmtuyusfg') == False\nassert solution.isLongPressedName('ksqvkm', 'bnrhprqklzkwod') == False\nassert solution.isLongPressedName('mdakinpok', 'zeetbns') == False\nassert solution.isLongPressedName('ggazwhsd', 'zmzyup') == False\nassert solution.isLongPressedName('eyb', 'z') == False\nassert solution.isLongPressedName('yutngu', 'tnenjdinwmxw') == False\nassert solution.isLongPressedName('bjpgiul', 'dx') == False\nassert solution.isLongPressedName('cn', 'eukyuzeymwnomoqfgh') == False\nassert solution.isLongPressedName('iwpvddfl', 'ywmlxzmh') == False\nassert solution.isLongPressedName('ixejuqb', 'dabidubyjof') == False\nassert solution.isLongPressedName('fhb', 'yuybqbmgdd') == False\nassert solution.isLongPressedName('se', 'rxr') == False\nassert solution.isLongPressedName('qlyqpsins', 'tzcxchgtfbv') == False\nassert solution.isLongPressedName('wbznxqky', 'reihypszjvashowb') == False\nassert solution.isLongPressedName('kvpcj', 'blrfdhk') == False\nassert solution.isLongPressedName('ffonmjdpzp', 'dxslfqvuiq') == False\nassert solution.isLongPressedName('gcsuukj', 'zsjaypftyvhio') == False\nassert solution.isLongPressedName('wjvaj', 'iaeuspvvrquamstbxmc') == False\nassert solution.isLongPressedName('hgtevvrb', 'kkawnv') == False\nassert solution.isLongPressedName('pahlpghwa', 'gmujtaqsh') == False\nassert solution.isLongPressedName('z', 'syhit') == False\nassert solution.isLongPressedName('frcvunihqx', 'qnths') == False\nassert solution.isLongPressedName('sztmscff', 'mrz') == False\nassert solution.isLongPressedName('taf', 'ax') == False\nassert solution.isLongPressedName('ktcx', 'yzbvbtgepishhrxcvvc') == False",
  "inefficient_solution": "class Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        n, m = len(name), len(typed)\n        if n > m:\n            return False\n        name_list = [char for i, char in enumerate(name) for _ in range(n - i)]\n        typed_list = []\n        for char in typed:\n            typed_list.extend([char] * m * 10)\n        return ''.join(name_list) == ''.join(typed_list[:n])",
  "is_python": true
}