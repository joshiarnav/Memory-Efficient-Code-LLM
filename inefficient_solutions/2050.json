{
  "problem_idx": 2050,
  "task_name": "Parallel Courses III",
  "markdown_description": "\nYou are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given a 2D integer array `relations` where `relations[j] = [prevCoursej, nextCoursej]` denotes that course `prevCoursej` has to be completed **before** course `nextCoursej` (prerequisite relationship). Furthermore, you are given a **0-indexed** integer array `time` where `time[i]` denotes how many **months** it takes to complete the `(i+1)th` course.\n\n\nYou must find the **minimum** number of months needed to complete all the courses following these rules:\n\n\n* You may start taking a course at **any time** if the prerequisites are met.\n* **Any number of courses** can be taken at the **same time**.\n\n\nReturn *the **minimum** number of months needed to complete all the courses*.\n\n\n**Note:** The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2050.Parallel%20Courses%20III/images/ex1.png)**\n\n```\n\n**Input:** n = 3, relations = [[1,3],[2,3]], time = [3,2,5]\n**Output:** 8\n**Explanation:** The figure above represents the given graph and the time required to complete each course. \nWe start course 1 and course 2 simultaneously at month 0.\nCourse 1 takes 3 months and course 2 takes 2 months to complete respectively.\nThus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2050.Parallel%20Courses%20III/images/ex2.png)**\n\n```\n\n**Input:** n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]\n**Output:** 12\n**Explanation:** The figure above represents the given graph and the time required to complete each course.\nYou can start courses 1, 2, and 3 at month 0.\nYou can complete them after 1, 2, and 3 months respectively.\nCourse 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.\nCourse 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.\nThus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 5 * 104`\n* `0 <= relations.length <= min(n * (n - 1) / 2, 5 * 104)`\n* `relations[j].length == 2`\n* `1 <= prevCoursej, nextCoursej <= n`\n* `prevCoursej != nextCoursej`\n* All the pairs `[prevCoursej, nextCoursej]` are **unique**.\n* `time.length == n`\n* `1 <= time[i] <= 104`\n* The given graph is a directed acyclic graph.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        g = defaultdict(list)\n        indeg = [0] * n\n        for a, b in relations:\n            g[a - 1].append(b - 1)\n            indeg[b - 1] += 1\n        q = deque()\n        f = [0] * n\n        ans = 0\n        for i, (v, t) in enumerate(zip(indeg, time)):\n            if v == 0:\n                q.append(i)\n                f[i] = t\n                ans = max(ans, t)\n        while q:\n            i = q.popleft()\n            for j in g[i]:\n                f[j] = max(f[j], f[i] + time[j])\n                ans = max(ans, f[j])\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n        return ans\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    test_case_generator_results = []    \n    \n    # Generate random value for n\n    n = random.randint(1, 11)\n    \n    # Generate random relation pairs\n    relations = []\n    for _ in range(random.randint(0, min((n * (n - 1)) // 2, 11))):\n        prevCourse = random.randint(1, n)\n        nextCourse = random.randint(1, n)\n        if prevCourse != nextCourse:\n            relations.append([prevCourse, nextCourse])\n    \n    # Generate random time required for each course\n    time = [random.randint(1, 11) for _ in range(n)]\n\n    # Get the expected result using the provided Solution class\n    expected_result = solution.minimumTime(n, relations, time)\n\n    # Construct the test case\n    test_case = f\"n = {n}, relations = {relations}, time = {time}\"\n    test_case_generator_results.append(f\"assert solution.minimumTime({test_case}) == {expected_result}\")\n    \n    return test_case_generator_results\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        test_case_generator_results += generate_test_case()\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumTime(n = 3, relations = [[1, 2]], time = [2, 7, 7]) == 9\nassert solution.minimumTime(n = 7, relations = [[6, 1], [7, 4], [7, 1], [6, 2], [2, 5], [7, 6], [6, 7], [3, 1], [3, 7], [3, 4]], time = [8, 1, 11, 10, 3, 1, 11]) == 22\nassert solution.minimumTime(n = 11, relations = [[9, 1], [8, 4], [3, 4], [7, 9], [8, 10], [4, 1], [4, 7], [11, 4], [6, 7], [4, 5]], time = [2, 6, 1, 8, 10, 8, 3, 11, 4, 1, 11]) == 29\nassert solution.minimumTime(n = 9, relations = [[5, 1]], time = [2, 1, 7, 6, 7, 8, 4, 7, 2]) == 9\nassert solution.minimumTime(n = 10, relations = [[7, 1], [4, 1], [2, 1]], time = [5, 3, 5, 9, 1, 9, 4, 9, 7, 2]) == 14\nassert solution.minimumTime(n = 3, relations = [[3, 1], [2, 3]], time = [3, 8, 8]) == 19\nassert solution.minimumTime(n = 1, relations = [], time = [2]) == 2\nassert solution.minimumTime(n = 11, relations = [[10, 11], [3, 4], [11, 4], [5, 11], [5, 2], [7, 9], [6, 8], [2, 8], [10, 5]], time = [4, 5, 5, 3, 8, 11, 5, 4, 4, 1, 4]) == 18\nassert solution.minimumTime(n = 6, relations = [[3, 6], [4, 6], [5, 1], [3, 6], [4, 2]], time = [11, 7, 10, 4, 5, 11]) == 21\nassert solution.minimumTime(n = 4, relations = [], time = [2, 1, 2, 6]) == 6\nassert solution.minimumTime(n = 1, relations = [], time = [11]) == 11\nassert solution.minimumTime(n = 10, relations = [[5, 4], [3, 10], [1, 3], [1, 6], [2, 3], [6, 2]], time = [8, 4, 7, 3, 3, 6, 3, 5, 5, 4]) == 29\nassert solution.minimumTime(n = 9, relations = [[8, 3], [6, 5], [5, 9]], time = [7, 10, 1, 10, 3, 2, 11, 5, 11]) == 16\nassert solution.minimumTime(n = 8, relations = [[8, 7], [5, 6]], time = [1, 4, 8, 10, 10, 9, 2, 2]) == 19\nassert solution.minimumTime(n = 8, relations = [[3, 4], [1, 8]], time = [5, 7, 3, 8, 2, 2, 2, 7]) == 12\nassert solution.minimumTime(n = 8, relations = [[2, 8], [4, 5], [2, 7], [5, 4], [1, 8], [4, 6], [4, 6], [5, 1], [7, 4]], time = [6, 3, 3, 9, 3, 7, 3, 1]) == 15\nassert solution.minimumTime(n = 1, relations = [], time = [3]) == 3\nassert solution.minimumTime(n = 5, relations = [[4, 5], [1, 4]], time = [4, 11, 5, 11, 10]) == 25\nassert solution.minimumTime(n = 11, relations = [[5, 10], [8, 2], [4, 2], [7, 2], [3, 1]], time = [1, 11, 4, 5, 3, 4, 7, 10, 8, 4, 3]) == 21\nassert solution.minimumTime(n = 7, relations = [[2, 6], [2, 5], [7, 5], [1, 7], [5, 2], [3, 1]], time = [5, 11, 8, 2, 6, 6, 6]) == 25\nassert solution.minimumTime(n = 6, relations = [[6, 3], [5, 3], [3, 2], [3, 5], [2, 3], [5, 4], [3, 4], [3, 6]], time = [1, 6, 8, 2, 8, 4]) == 1\nassert solution.minimumTime(n = 10, relations = [[5, 6], [3, 1], [9, 6], [10, 9], [7, 8], [6, 5], [1, 5], [7, 2], [7, 4]], time = [4, 11, 3, 10, 6, 1, 2, 5, 7, 2]) == 13\nassert solution.minimumTime(n = 9, relations = [], time = [6, 7, 6, 7, 10, 5, 2, 10, 4]) == 10\nassert solution.minimumTime(n = 1, relations = [], time = [3]) == 3\nassert solution.minimumTime(n = 5, relations = [[4, 2], [5, 4], [1, 3], [4, 2], [2, 5]], time = [9, 4, 9, 7, 3]) == 18\nassert solution.minimumTime(n = 2, relations = [], time = [10, 1]) == 10\nassert solution.minimumTime(n = 7, relations = [[6, 5], [3, 1], [3, 1], [6, 7], [3, 5], [1, 3]], time = [8, 7, 3, 8, 10, 1, 10]) == 11\nassert solution.minimumTime(n = 9, relations = [[2, 6], [5, 3], [9, 2], [7, 4]], time = [10, 5, 2, 6, 11, 1, 6, 1, 9]) == 15\nassert solution.minimumTime(n = 11, relations = [[3, 10], [2, 7], [4, 10], [8, 7]], time = [11, 8, 4, 1, 5, 9, 4, 9, 6, 3, 3]) == 13\nassert solution.minimumTime(n = 2, relations = [[2, 1]], time = [6, 2]) == 8\nassert solution.minimumTime(n = 2, relations = [], time = [11, 2]) == 11\nassert solution.minimumTime(n = 3, relations = [[3, 2]], time = [7, 10, 10]) == 20\nassert solution.minimumTime(n = 9, relations = [[7, 8], [1, 9], [5, 1], [6, 4], [4, 3], [3, 2], [1, 4], [1, 6]], time = [3, 2, 5, 10, 3, 9, 2, 5, 7]) == 32\nassert solution.minimumTime(n = 6, relations = [[3, 2]], time = [10, 4, 6, 8, 11, 10]) == 11\nassert solution.minimumTime(n = 5, relations = [[2, 3]], time = [2, 6, 7, 5, 7]) == 13\nassert solution.minimumTime(n = 2, relations = [], time = [3, 10]) == 10\nassert solution.minimumTime(n = 7, relations = [[2, 7], [3, 1], [7, 3], [1, 6], [5, 3], [5, 1]], time = [7, 2, 11, 9, 3, 10, 1]) == 31\nassert solution.minimumTime(n = 5, relations = [[1, 4], [5, 1], [5, 2]], time = [5, 3, 5, 7, 7]) == 19\nassert solution.minimumTime(n = 11, relations = [[8, 7], [9, 8], [1, 3], [4, 11], [2, 8], [4, 6]], time = [9, 9, 7, 3, 4, 9, 8, 3, 8, 10, 1]) == 20\nassert solution.minimumTime(n = 7, relations = [[2, 6], [7, 3], [6, 7], [4, 6], [2, 5], [3, 4], [3, 2]], time = [10, 3, 9, 1, 1, 8, 7]) == 10\nassert solution.minimumTime(n = 1, relations = [], time = [1]) == 1\nassert solution.minimumTime(n = 5, relations = [[5, 1]], time = [7, 2, 1, 10, 9]) == 16\nassert solution.minimumTime(n = 11, relations = [[2, 3], [7, 9], [6, 11], [10, 11], [7, 8], [4, 10], [7, 11], [3, 1], [7, 4], [6, 11]], time = [2, 10, 6, 11, 7, 7, 4, 2, 5, 9, 4]) == 28\nassert solution.minimumTime(n = 10, relations = [[10, 8], [8, 2]], time = [1, 1, 1, 5, 7, 4, 2, 4, 3, 10]) == 15\nassert solution.minimumTime(n = 9, relations = [[5, 2], [6, 4], [8, 1], [3, 2]], time = [8, 1, 2, 5, 9, 10, 3, 10, 3]) == 18\nassert solution.minimumTime(n = 10, relations = [[6, 9], [3, 1]], time = [6, 2, 1, 1, 2, 9, 8, 10, 3, 5]) == 12\nassert solution.minimumTime(n = 7, relations = [[5, 7], [5, 1], [4, 3], [1, 4], [1, 7], [5, 4], [5, 2], [3, 1], [7, 1], [1, 6]], time = [4, 3, 8, 4, 11, 5, 7]) == 18\nassert solution.minimumTime(n = 5, relations = [[1, 3], [2, 3], [2, 1], [2, 4], [3, 2]], time = [11, 8, 5, 1, 1]) == 1\nassert solution.minimumTime(n = 3, relations = [], time = [5, 1, 2]) == 5\nassert solution.minimumTime(n = 2, relations = [], time = [5, 2]) == 5\nassert solution.minimumTime(n = 6, relations = [[5, 3], [6, 1], [5, 4], [5, 6], [3, 6], [3, 6]], time = [9, 10, 5, 4, 9, 10]) == 33\nassert solution.minimumTime(n = 5, relations = [[5, 2], [5, 1]], time = [8, 3, 9, 2, 5]) == 13\nassert solution.minimumTime(n = 2, relations = [], time = [10, 11]) == 11\nassert solution.minimumTime(n = 2, relations = [], time = [4, 11]) == 11\nassert solution.minimumTime(n = 11, relations = [[10, 8], [6, 3], [5, 4], [3, 4], [4, 7], [1, 9], [3, 11], [1, 5], [11, 2], [6, 3]], time = [10, 8, 3, 7, 2, 4, 2, 3, 7, 9, 10]) == 25\nassert solution.minimumTime(n = 8, relations = [[8, 7]], time = [4, 3, 11, 3, 2, 1, 5, 10]) == 15\nassert solution.minimumTime(n = 8, relations = [[1, 5], [3, 8], [7, 6], [2, 8]], time = [7, 5, 6, 8, 2, 2, 11, 6]) == 13\nassert solution.minimumTime(n = 5, relations = [[2, 1], [4, 3], [4, 5], [5, 3], [1, 2], [2, 4], [2, 4], [4, 1], [2, 5]], time = [1, 8, 10, 4, 10]) == 0\nassert solution.minimumTime(n = 11, relations = [[6, 2], [9, 11], [10, 11], [5, 6], [2, 8], [2, 1], [7, 9], [5, 8], [9, 10], [4, 10]], time = [9, 2, 9, 8, 11, 7, 6, 4, 5, 11, 5]) == 29\nassert solution.minimumTime(n = 2, relations = [], time = [3, 8]) == 8\nassert solution.minimumTime(n = 8, relations = [[7, 4], [4, 2], [1, 5], [4, 6], [4, 1]], time = [3, 7, 6, 10, 6, 11, 11, 4]) == 32\nassert solution.minimumTime(n = 7, relations = [[5, 2], [7, 1], [6, 4], [6, 7], [3, 1], [1, 2]], time = [1, 7, 9, 4, 7, 5, 4]) == 17\nassert solution.minimumTime(n = 10, relations = [[10, 3], [7, 10], [5, 8]], time = [3, 5, 8, 2, 10, 1, 7, 7, 10, 5]) == 20\nassert solution.minimumTime(n = 10, relations = [[2, 6], [2, 5], [4, 9], [3, 6], [8, 7], [9, 8], [6, 2], [8, 6]], time = [10, 5, 6, 6, 7, 6, 4, 1, 6, 8]) == 19\nassert solution.minimumTime(n = 6, relations = [[3, 2], [6, 1], [3, 6], [3, 4], [3, 5], [3, 2], [3, 6], [4, 3], [3, 1]], time = [9, 11, 5, 2, 3, 7]) == 0\nassert solution.minimumTime(n = 9, relations = [[8, 5], [4, 1], [3, 9], [4, 3], [1, 2], [5, 4], [9, 1], [6, 4]], time = [6, 4, 2, 11, 11, 9, 6, 7, 1]) == 42\nassert solution.minimumTime(n = 3, relations = [[2, 1], [1, 2]], time = [4, 10, 8]) == 8\nassert solution.minimumTime(n = 7, relations = [[4, 7], [6, 4], [3, 1]], time = [3, 2, 3, 6, 2, 8, 9]) == 23\nassert solution.minimumTime(n = 1, relations = [], time = [8]) == 8\nassert solution.minimumTime(n = 4, relations = [], time = [10, 10, 11, 5]) == 11\nassert solution.minimumTime(n = 6, relations = [[6, 4], [6, 4], [2, 5]], time = [6, 8, 8, 7, 1, 10]) == 17\nassert solution.minimumTime(n = 1, relations = [], time = [3]) == 3\nassert solution.minimumTime(n = 2, relations = [[2, 1]], time = [2, 9]) == 11\nassert solution.minimumTime(n = 4, relations = [[4, 2], [4, 3], [4, 3]], time = [6, 10, 6, 6]) == 16\nassert solution.minimumTime(n = 1, relations = [], time = [9]) == 9\nassert solution.minimumTime(n = 9, relations = [[6, 9]], time = [1, 7, 7, 9, 5, 3, 8, 11, 6]) == 11\nassert solution.minimumTime(n = 6, relations = [[3, 6]], time = [6, 4, 5, 4, 6, 4]) == 9\nassert solution.minimumTime(n = 2, relations = [], time = [4, 7]) == 7\nassert solution.minimumTime(n = 1, relations = [], time = [1]) == 1\nassert solution.minimumTime(n = 5, relations = [[1, 4], [5, 2], [4, 1]], time = [4, 7, 5, 7, 10]) == 17\nassert solution.minimumTime(n = 10, relations = [], time = [4, 5, 3, 11, 7, 2, 6, 7, 4, 5]) == 11\nassert solution.minimumTime(n = 8, relations = [[5, 7], [5, 8], [3, 1]], time = [1, 1, 3, 2, 6, 10, 9, 1]) == 15\nassert solution.minimumTime(n = 3, relations = [], time = [10, 3, 4]) == 10\nassert solution.minimumTime(n = 11, relations = [[7, 4], [8, 5], [6, 3], [1, 3], [11, 6], [10, 9], [3, 5], [6, 5]], time = [10, 10, 2, 11, 1, 4, 8, 10, 2, 7, 2]) == 19\nassert solution.minimumTime(n = 7, relations = [[4, 5], [5, 3], [6, 1], [5, 3], [4, 2], [1, 5], [7, 3], [5, 2]], time = [3, 6, 10, 6, 8, 4, 8]) == 25\nassert solution.minimumTime(n = 6, relations = [[1, 5], [2, 3], [1, 5], [1, 5], [6, 2], [1, 4], [6, 2]], time = [2, 9, 7, 7, 3, 6]) == 22\nassert solution.minimumTime(n = 11, relations = [[5, 10], [8, 7], [6, 2]], time = [6, 3, 6, 8, 11, 3, 5, 3, 1, 11, 1]) == 22\nassert solution.minimumTime(n = 1, relations = [], time = [7]) == 7\nassert solution.minimumTime(n = 6, relations = [[4, 6], [4, 6], [6, 1], [3, 1]], time = [5, 7, 10, 9, 10, 11]) == 25\nassert solution.minimumTime(n = 3, relations = [[1, 2], [3, 1], [3, 2]], time = [9, 3, 6]) == 18\nassert solution.minimumTime(n = 8, relations = [], time = [6, 3, 7, 7, 8, 8, 7, 6]) == 8\nassert solution.minimumTime(n = 8, relations = [[3, 8], [2, 7], [7, 3], [2, 1], [3, 6], [2, 5], [3, 7]], time = [6, 1, 11, 2, 6, 9, 2, 6]) == 7\nassert solution.minimumTime(n = 10, relations = [[1, 9], [5, 4], [6, 4], [9, 2]], time = [6, 11, 9, 7, 11, 9, 7, 7, 10, 8]) == 27\nassert solution.minimumTime(n = 3, relations = [[3, 1], [2, 3], [2, 3]], time = [4, 10, 7]) == 21\nassert solution.minimumTime(n = 4, relations = [], time = [6, 2, 7, 1]) == 7\nassert solution.minimumTime(n = 1, relations = [], time = [11]) == 11\nassert solution.minimumTime(n = 11, relations = [[3, 5]], time = [1, 6, 2, 3, 3, 6, 9, 5, 5, 8, 6]) == 9\nassert solution.minimumTime(n = 2, relations = [], time = [4, 3]) == 4\nassert solution.minimumTime(n = 6, relations = [[6, 1]], time = [10, 7, 2, 4, 5, 3]) == 13\nassert solution.minimumTime(n = 10, relations = [[5, 4], [9, 8], [10, 6]], time = [2, 9, 9, 2, 4, 2, 10, 6, 6, 11]) == 13",
  "inefficient_solution": "class Solution:\n    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:\n        g = [[] for _ in range(n)]\n        indeg = [0] * n\n        for a, b in relations:\n            g[a - 1].append(b - 1)\n            indeg[b - 1] += 1\n        q = []\n        f = [0] * (n * n)\n        ans = 0\n        for i, (v, t) in enumerate(zip(indeg, time)):\n            if v == 0:\n                q.append((i, t))\n                f[i * n + i] = t\n                ans = max(ans, t)\n        while q:\n            i, t = q.pop(0)\n            for j in g[i]:\n                f[j * n + i] = max(f[j * n + i], f[i * n + i] + time[j])\n                ans = max(ans, f[j * n + i])\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append((j, 0))\n        return ans",
  "is_python": true
}