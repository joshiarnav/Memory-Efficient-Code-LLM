{
  "problem_idx": 1139,
  "task_name": "Largest ",
  "markdown_description": "\nGiven a 2D `grid` of `0`s and `1`s, return the number of elements in\u00a0the largest **square**\u00a0subgrid that has all `1`s on its **border**, or `0` if such a subgrid\u00a0doesn't exist in the `grid`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[1,1,1],[1,0,1],[1,1,1]]\n**Output:** 9\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[1,1,0,0]]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= grid.length <= 100`\n* `1 <= grid[0].length <= 100`\n* `grid[i][j]` is `0` or `1`\n\n\n",
  "canonical_solution": "class Solution:\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        down = [[0] * n for _ in range(m)]\n        right = [[0] * n for _ in range(m)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j]:\n                    down[i][j] = down[i + 1][j] + 1 if i + 1 < m else 1\n                    right[i][j] = right[i][j + 1] + 1 if j + 1 < n else 1\n        for k in range(min(m, n), 0, -1):\n            for i in range(m - k + 1):\n                for j in range(n - k + 1):\n                    if (\n                        down[i][j] >= k\n                        and right[i][j] >= k\n                        and right[i + k - 1][j] >= k\n                        and down[i][j + k - 1] >= k\n                    ):\n                        return k * k\n        return 0\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        down = [[0] * n for _ in range(m)]\n        right = [[0] * n for _ in range(m)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j]:\n                    down[i][j] = down[i + 1][j] + 1 if i + 1 < m else 1\n                    right[i][j] = right[i][j + 1] + 1 if j + 1 < n else 1\n        for k in range(min(m, n), 0, -1):\n            for i in range(m - k + 1):\n                for j in range(n - k + 1):\n                    if (\n                        down[i][j] >= k\n                        and right[i][j] >= k\n                        and right[i + k - 1][j] >= k\n                        and down[i][j + k - 1] >= k\n                    ):\n                        return k * k\n        return 0\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(1, 11)\n    n = random.randint(1, 11)\n    grid = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largest1BorderedSquare(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largest1BorderedSquare(grid) == expected_result\n        print(f\"assert solution.largest1BorderedSquare({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.largest1BorderedSquare({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largest1BorderedSquare([[1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 1], [1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 1, 1], [0, 1, 0, 1, 1], [1, 0, 1, 0, 0], [1, 0, 0, 1, 1], [0, 0, 1, 1, 1], [0, 1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0], [1], [0], [1]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0]]) == 1\nassert solution.largest1BorderedSquare([[0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 1], [1, 1, 1], [0, 1, 1], [0, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[0], [1]]) == 1\nassert solution.largest1BorderedSquare([[0]]) == 0\nassert solution.largest1BorderedSquare([[0], [0]]) == 0\nassert solution.largest1BorderedSquare([[1, 0, 1, 0, 1, 1, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[1], [0], [1], [1], [1], [1], [0], [1], [1]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 0, 1]]) == 1\nassert solution.largest1BorderedSquare([[1, 0, 0, 1], [0, 1, 0, 1], [1, 0, 0, 1], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 0, 0], [0, 1, 1, 1], [0, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0, 1]]) == 9\nassert solution.largest1BorderedSquare([[0, 0, 0, 0, 1, 1, 1, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 1, 0, 0], [0, 1, 0, 0, 1], [1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 1, 0, 1], [1, 0, 1, 1, 1]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[1, 0], [0, 1], [1, 0], [1, 1], [0, 1], [0, 1], [1, 1], [1, 1], [0, 1]]) == 4\nassert solution.largest1BorderedSquare([[1, 0, 0], [1, 0, 1], [1, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 0]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 0, 0], [1, 1, 0], [0, 0, 0], [1, 1, 1], [0, 0, 0], [1, 1, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1], [0, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 1, 0], [1, 1, 0, 0], [1, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0], [0, 1, 1, 0], [1, 0, 0, 0], [1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 0, 1, 0], [1, 0, 0, 0, 1], [1, 1, 0, 1, 1], [1, 1, 0, 0, 0], [1, 1, 1, 0, 1], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 1, 1, 1, 1], [0, 0, 0, 1, 1], [1, 0, 0, 1, 0], [0, 0, 1, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1], [1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 0, 0]]) == 9\nassert solution.largest1BorderedSquare([[0, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1]]) == 4\nassert solution.largest1BorderedSquare([[1], [0], [1], [1], [0], [0], [1]]) == 1\nassert solution.largest1BorderedSquare([[0, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 0]]) == 9\nassert solution.largest1BorderedSquare([[0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 1]]) == 1\nassert solution.largest1BorderedSquare([[1, 0, 1, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 1, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 0], [0, 0, 1], [0, 0, 1]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1], [1, 0]]) == 1\nassert solution.largest1BorderedSquare([[0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1]]) == 9\nassert solution.largest1BorderedSquare([[0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[0], [1], [1], [1]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 0, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0], [1, 1, 0, 1], [1, 0, 0, 0], [1, 0, 1, 1], [1, 1, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[0], [1], [1], [1], [1], [1], [1], [1], [0]]) == 1\nassert solution.largest1BorderedSquare([[0, 1, 0, 0], [1, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 1]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 0], [1, 1, 1], [0, 1, 0], [1, 1, 1], [1, 0, 1], [0, 1, 1], [1, 0, 0], [0, 1, 0], [0, 1, 0]]) == 1\nassert solution.largest1BorderedSquare([[0, 1, 0], [0, 0, 0], [0, 1, 0], [1, 1, 0], [0, 0, 1]]) == 1\nassert solution.largest1BorderedSquare([[1, 0, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [1, 0, 1, 0], [0, 0, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 0], [0, 1, 1], [0, 0, 1], [0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 0, 0], [1, 1, 1], [1, 1, 0], [0, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 1, 0], [0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [1, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 1, 1, 0, 0, 1, 1], [1, 0, 1, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1]]) == 9\nassert solution.largest1BorderedSquare([[0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1]]) == 1\nassert solution.largest1BorderedSquare([[1], [0], [1], [1], [0], [1], [1], [0], [0]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 1, 0, 0], [0, 1, 0, 0, 1], [1, 0, 1, 0, 1], [1, 0, 1, 0, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 1], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[0], [0], [1]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1]]) == 4\nassert solution.largest1BorderedSquare([[1, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 1], [1, 0, 0, 0, 1], [0, 1, 1, 1, 1], [0, 1, 0, 0, 1], [0, 0, 1, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 0, 1, 1], [1, 1, 0, 1], [1, 0, 0, 1], [0, 1, 0, 0], [0, 1, 1, 1], [0, 1, 1, 0], [1, 0, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1]]) == 9\nassert solution.largest1BorderedSquare([[0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 1], [0, 0], [1, 1], [0, 0], [1, 0], [1, 1], [1, 1], [0, 1], [1, 0], [0, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 1], [0, 1, 1], [0, 0, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[1, 0, 1, 1, 1, 1, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]]) == 1\nassert solution.largest1BorderedSquare([[1, 1, 1, 0], [0, 1, 0, 1], [1, 0, 0, 0], [0, 1, 1, 1], [0, 1, 1, 0], [0, 0, 0, 1], [0, 1, 1, 1], [1, 0, 0, 1]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1]]) == 4\nassert solution.largest1BorderedSquare([[1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1]]) == 4\nassert solution.largest1BorderedSquare([[0]]) == 0\nassert solution.largest1BorderedSquare([[0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 0]]) == 4\nassert solution.largest1BorderedSquare([[0, 1], [1, 0], [0, 1], [1, 0], [0, 0], [0, 0], [1, 1], [1, 1], [0, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 0]]) == 1\nassert solution.largest1BorderedSquare([[1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0]]) == 9\nassert solution.largest1BorderedSquare([[1], [0]]) == 1\nassert solution.largest1BorderedSquare([[1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1]]) == 4\nassert solution.largest1BorderedSquare([[0, 1, 0, 0], [1, 1, 1, 1]]) == 1\nassert solution.largest1BorderedSquare([[0, 0, 0, 1], [0, 1, 0, 1], [1, 0, 1, 0], [0, 0, 0, 0], [1, 1, 0, 0], [1, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 0]]) == 1\nassert solution.largest1BorderedSquare([[1], [0], [0], [1], [1], [0], [0], [1], [0], [1], [0]]) == 1",
  "inefficient_solution": "class Solution:\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        down = [[0] * n for _ in range(m)]\n        right = [[0] * n for _ in range(m)]\n        for i in range(m):\n            down_i = [0] * n\n            for j in range(n):\n                if grid[i][j]:\n                    if i + 1 < m:\n                        down_i[j] = down[i + 1][j] + 1\n                    else:\n                        down_i[j] = 1\n                else:\n                    down_i[j] = 0\n            down.append(down_i)\n        \n        for j in range(n):\n            right_j = [0] * m\n            for i in range(m):\n                if grid[i][j]:\n                    if j + 1 < n:\n                        right_j[i] = right[i][j + 1] + 1\n                    else:\n                        right_j[i] = 1\n                else:\n                    right_j[i] = 0\n            right.append(right_j)\n        \n        for k in range(min(m, n), 0, -1):\n            for i in range(m - k + 1):\n                for j in range(n - k + 1):\n                    if (\n                        down[i][j] >= k\n                        and right[i][j] >= k\n                        and right[i + k - 1][j] >= k\n                        and down[i][j + k - 1] >= k\n                    ):\n                        return k * k\n        return 0",
  "is_python": true
}