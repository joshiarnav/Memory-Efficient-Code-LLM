{
  "problem_idx": 543,
  "task_name": "Diameter of Binary Tree",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the length of the **diameter** of the tree*.\n\n\nThe **diameter** of a binary tree is the **length** of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.\n\n\nThe **length** of a path between two nodes is represented by the number of edges between them.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0543.Diameter%20of%20Binary%20Tree/images/diamtree.jpg)\n\n```\n\n**Input:** root = [1,2,3,4,5]\n**Output:** 3\n**Explanation:** 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [1,2]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 104]`.\n* `-100 <= Node.val <= 100`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return 0\n            nonlocal ans\n            left, right = dfs(root.left), dfs(root.right)\n            ans = max(ans, left + right)\n            return 1 + max(left, right)\n\n        ans = 0\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def diameterOfBinaryTree(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return 0\n            nonlocal ans\n            left, right = dfs(root.left), dfs(root.right)\n            ans = max(ans, left + right)\n            return 1 + max(left, right)\n\n        ans = 0\n        dfs(root)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n  \n    # Generate the root node with value\n    root_val = random.randint(-100, 100)\n    root = TreeNode(root_val)\n\n    # Generate the left subtree\n    left = TreeNode()\n    root.left = left\n\n    # Generate the right subtree\n    right = TreeNode()\n    root.right = right\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.diameterOfBinaryTree(root)\n\n    return root, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.diameterOfBinaryTree(root) == expected_result\n        print(f\"assert solution.diameterOfBinaryTree({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.diameterOfBinaryTree({root}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e43f350>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e4764d0>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e476890>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e5de510>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e476490>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ccd0>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e4768d0>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cd50>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cc90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ce50>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cc90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cd10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ccd0>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cc90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ccd0>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ce90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ccd0>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cd10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ccd0>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cd50>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cf90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ce90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cc90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49cf10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ce50>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d010>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d090>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d110>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d190>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d210>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d290>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d310>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d390>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d410>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d490>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d510>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d590>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d610>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d690>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d710>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d790>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d810>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d890>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d910>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49d990>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49da10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49da90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49db10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49db90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49dc10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49dc90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49dd10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49dd90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49de10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49de90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49df10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49df90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e010>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e090>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e110>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e190>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e210>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e290>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e310>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e390>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e410>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e490>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e510>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e590>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e610>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e690>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e710>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e790>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e810>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e890>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e910>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49e990>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ea10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ea90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49eb10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49eb90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ec10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ec90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ed10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ed90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ee10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ee90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ef10>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49ef90>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f010>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f090>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f110>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f190>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f210>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f290>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f310>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f390>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f410>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f490>) == 2\nassert solution.diameterOfBinaryTree(<__main__.TreeNode object at 0x7f706e49f510>) == 2",
  "inefficient_solution": "",
  "is_python": true
}