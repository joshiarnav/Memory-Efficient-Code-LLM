{
  "problem_idx": 1695,
  "task_name": "Maximum Erasure Value",
  "markdown_description": "\nYou are given an array of positive integers `nums` and want to erase a subarray containing\u00a0**unique elements**. The **score** you get by erasing the subarray is equal to the **sum** of its elements.\n\n\nReturn *the **maximum score** you can get by erasing **exactly one** subarray.*\n\n\nAn array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,2,4,5,6]\n**Output:** 17\n**Explanation:** The optimal subarray here is [2,4,5,6].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,2,1,2,5,2,1,2,5]\n**Output:** 8\n**Explanation:** The optimal subarray here is [5,2,1] or [1,2,5].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumUniqueSubarray(self, nums: List[int]) -> int:\n        d = defaultdict(int)\n        s = list(accumulate(nums, initial=0))\n        ans = j = 0\n        for i, v in enumerate(nums, 1):\n            j = max(j, d[v])\n            ans = max(ans, s[i] - s[j])\n            d[v] = i\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumUniqueSubarray(self, nums: List[int]) -> int:\n        d = defaultdict(int)\n        s = list(accumulate(nums, initial=0))\n        ans = j = 0\n        for i, v in enumerate(nums, 1):\n            j = max(j, d[v])\n            ans = max(ans, s[i] - s[j])\n            d[v] = i\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 10001), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumUniqueSubarray(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumUniqueSubarray(nums) == expected_result\n        print(f\"assert solution.maximumUniqueSubarray({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumUniqueSubarray({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumUniqueSubarray([7247, 1336, 2294, 527]) == 11404\nassert solution.maximumUniqueSubarray([3737, 5469, 6562, 6994, 3233, 9453, 8786, 1752]) == 45986\nassert solution.maximumUniqueSubarray([523, 2384, 4007, 7435, 2498]) == 16847\nassert solution.maximumUniqueSubarray([2309, 3036]) == 5345\nassert solution.maximumUniqueSubarray([835, 3880, 5442, 7845, 732, 5944, 6704, 3624, 5564, 4262]) == 44832\nassert solution.maximumUniqueSubarray([5863, 572, 3189]) == 9624\nassert solution.maximumUniqueSubarray([8601, 2157, 1959, 6354, 2443, 3606, 7615, 4060, 4358]) == 41153\nassert solution.maximumUniqueSubarray([7228]) == 7228\nassert solution.maximumUniqueSubarray([7456, 6538, 607, 7474, 2227, 5348, 3917]) == 33567\nassert solution.maximumUniqueSubarray([7040, 8679, 2707, 4567, 9304]) == 32297\nassert solution.maximumUniqueSubarray([3555, 8532, 9303]) == 21390\nassert solution.maximumUniqueSubarray([9375, 369, 2794, 6147, 197, 1150, 9429, 1353, 3629]) == 34443\nassert solution.maximumUniqueSubarray([4168, 1947, 41, 8691, 2245, 124]) == 17216\nassert solution.maximumUniqueSubarray([5334, 3171, 7274, 7785, 6732, 9968, 3400]) == 43664\nassert solution.maximumUniqueSubarray([6792, 6532, 4783, 2563, 7224, 681, 7977, 1222, 2721, 9309]) == 49804\nassert solution.maximumUniqueSubarray([7889, 7952, 9619, 7401, 3756, 3465]) == 40082\nassert solution.maximumUniqueSubarray([4627, 1188, 511, 4823, 7883, 9766, 1905]) == 30703\nassert solution.maximumUniqueSubarray([5702, 7286, 6689, 7865, 908]) == 28450\nassert solution.maximumUniqueSubarray([4327, 7526, 2759, 4242, 8828, 3747, 7689, 791, 3621]) == 43530\nassert solution.maximumUniqueSubarray([2828, 2216, 5980, 1747, 3263, 2469, 4650, 7793, 3201]) == 34147\nassert solution.maximumUniqueSubarray([2385, 5684, 9980, 4190, 6194, 20, 5007]) == 33460\nassert solution.maximumUniqueSubarray([6889, 9448, 7375, 4831, 8850]) == 37393\nassert solution.maximumUniqueSubarray([6175]) == 6175\nassert solution.maximumUniqueSubarray([7054, 4132, 233, 3910, 4441, 699, 3827, 3440, 2449, 2465]) == 32650\nassert solution.maximumUniqueSubarray([4714, 3437, 3441, 4635]) == 16227\nassert solution.maximumUniqueSubarray([2515, 9262, 7981, 2436, 1360, 5269, 2279, 1499]) == 32601\nassert solution.maximumUniqueSubarray([2668, 1222, 2685, 7841, 5751, 20, 8210]) == 28397\nassert solution.maximumUniqueSubarray([1603, 4181, 7647, 2643, 9742, 8812]) == 34628\nassert solution.maximumUniqueSubarray([5739, 487, 6207, 5286, 5659, 5777, 2088]) == 31243\nassert solution.maximumUniqueSubarray([1670, 4189, 6340, 1711, 2429, 2788, 9106, 8915]) == 37148\nassert solution.maximumUniqueSubarray([3939, 5548, 1149, 5748]) == 16384\nassert solution.maximumUniqueSubarray([2839, 4689, 7057, 9769]) == 24354\nassert solution.maximumUniqueSubarray([543]) == 543\nassert solution.maximumUniqueSubarray([9384]) == 9384\nassert solution.maximumUniqueSubarray([6983, 6535]) == 13518\nassert solution.maximumUniqueSubarray([1645, 5811, 6818, 7166, 7990, 1848, 9144, 8904, 7495, 2348]) == 59169\nassert solution.maximumUniqueSubarray([7372, 1987, 6768]) == 16127\nassert solution.maximumUniqueSubarray([1617, 9910, 7148, 866, 5435, 752, 6774, 8709, 5239, 7748]) == 54198\nassert solution.maximumUniqueSubarray([3637, 5341, 9476, 9564, 8024, 9694, 5573, 7169, 6009]) == 64487\nassert solution.maximumUniqueSubarray([2469, 5554, 6291, 9486]) == 23800\nassert solution.maximumUniqueSubarray([9483, 7406, 1352]) == 18241\nassert solution.maximumUniqueSubarray([6312, 4824, 5086, 8415, 9982, 5124]) == 39743\nassert solution.maximumUniqueSubarray([8317, 1479, 6431, 6038, 4943, 4427, 15, 4426, 2164]) == 38240\nassert solution.maximumUniqueSubarray([1176, 2363, 5624, 2543, 1369, 4322]) == 17397\nassert solution.maximumUniqueSubarray([862, 6245]) == 7107\nassert solution.maximumUniqueSubarray([8637, 8164]) == 16801\nassert solution.maximumUniqueSubarray([5221, 5519]) == 10740\nassert solution.maximumUniqueSubarray([917, 3513, 302, 1797, 3451, 1350]) == 11330\nassert solution.maximumUniqueSubarray([3111, 4658, 1252, 4993, 5370, 3636, 2454, 9512, 3068]) == 38054\nassert solution.maximumUniqueSubarray([7362, 7092, 9131, 8930, 8219, 4664, 696]) == 46094\nassert solution.maximumUniqueSubarray([3086, 7123, 5593, 1836]) == 17638\nassert solution.maximumUniqueSubarray([3186, 8210, 2016]) == 13412\nassert solution.maximumUniqueSubarray([8364, 1244, 5021, 6727, 1739, 3820]) == 26915\nassert solution.maximumUniqueSubarray([959, 9583, 9072, 1524]) == 21138\nassert solution.maximumUniqueSubarray([3710, 2288, 8231, 2852, 1629, 3392, 7581, 49, 4755]) == 34487\nassert solution.maximumUniqueSubarray([6036, 3152, 1647, 3908, 1650, 316, 1227, 2651, 6522]) == 27109\nassert solution.maximumUniqueSubarray([8743, 930, 8508, 8356, 9581, 9545]) == 45663\nassert solution.maximumUniqueSubarray([590, 805, 9779, 2283, 8834, 204]) == 22495\nassert solution.maximumUniqueSubarray([5322, 3234, 7839, 3850, 7532, 9329, 2956, 824]) == 40886\nassert solution.maximumUniqueSubarray([5974, 5599, 6617, 5473, 2343, 2623, 842, 2968, 5388]) == 37827\nassert solution.maximumUniqueSubarray([1174, 5469, 910, 6706, 6184, 2066, 4658, 4452, 1675]) == 33294\nassert solution.maximumUniqueSubarray([382, 422, 3001, 3023, 8742, 5095, 5221, 4314]) == 30200\nassert solution.maximumUniqueSubarray([3712, 805, 3659, 8092, 7287, 9518, 4711, 4335]) == 42119\nassert solution.maximumUniqueSubarray([9941, 308, 9829, 8638, 3283, 8648, 253, 2922, 1332, 1574]) == 46728\nassert solution.maximumUniqueSubarray([9158, 6657, 1021, 8842, 4702, 8947, 8579, 359, 7944, 7623]) == 63832\nassert solution.maximumUniqueSubarray([6453, 6719, 2335, 2926, 7061]) == 25494\nassert solution.maximumUniqueSubarray([1528, 3833, 1791, 7202, 9893]) == 24247\nassert solution.maximumUniqueSubarray([7182, 4819, 1358, 1644, 7351]) == 22354\nassert solution.maximumUniqueSubarray([8813, 8559, 7519, 523, 4132, 7517, 6921, 9216]) == 53200\nassert solution.maximumUniqueSubarray([2653, 1991, 6851, 1425, 847, 4789]) == 18556\nassert solution.maximumUniqueSubarray([4008, 4950, 8645, 1870, 9445, 369, 5818, 8068, 245]) == 43418\nassert solution.maximumUniqueSubarray([7847, 835, 426, 1943, 1579, 2861, 9180]) == 24671\nassert solution.maximumUniqueSubarray([3186]) == 3186\nassert solution.maximumUniqueSubarray([2269, 297]) == 2566\nassert solution.maximumUniqueSubarray([8309, 6837, 6443, 6230]) == 27819\nassert solution.maximumUniqueSubarray([6607, 6264]) == 12871\nassert solution.maximumUniqueSubarray([2465, 3143]) == 5608\nassert solution.maximumUniqueSubarray([1400, 6839, 8767]) == 17006\nassert solution.maximumUniqueSubarray([8291, 2943, 2104, 8185, 7123, 3634, 7544]) == 39824\nassert solution.maximumUniqueSubarray([1136, 4870, 774, 7369, 8877, 5770, 3826, 2888, 9056, 6658]) == 51224\nassert solution.maximumUniqueSubarray([5529, 6410, 8963, 9792, 9490, 75, 235]) == 40494\nassert solution.maximumUniqueSubarray([2093]) == 2093\nassert solution.maximumUniqueSubarray([8004, 3449, 9571, 3167, 9474, 7589]) == 41254\nassert solution.maximumUniqueSubarray([4578, 8259]) == 12837\nassert solution.maximumUniqueSubarray([9679, 4265]) == 13944\nassert solution.maximumUniqueSubarray([2571, 1460, 5947, 198, 7506, 6359]) == 24041\nassert solution.maximumUniqueSubarray([9416, 6111, 761, 2969, 3197, 7771, 3976, 4291]) == 38492\nassert solution.maximumUniqueSubarray([1015, 3863, 2716, 7933, 8261, 6644, 7968, 8403, 5217, 945]) == 52965\nassert solution.maximumUniqueSubarray([4013, 7439]) == 11452\nassert solution.maximumUniqueSubarray([9752]) == 9752\nassert solution.maximumUniqueSubarray([761, 6047, 6486, 4852, 1301]) == 19447\nassert solution.maximumUniqueSubarray([9035, 9631, 5228]) == 23894\nassert solution.maximumUniqueSubarray([1594, 9204]) == 10798\nassert solution.maximumUniqueSubarray([3956]) == 3956\nassert solution.maximumUniqueSubarray([6958, 9573, 4731]) == 21262\nassert solution.maximumUniqueSubarray([4784, 8519, 821, 8462, 8809, 7802, 9954]) == 49151\nassert solution.maximumUniqueSubarray([9273, 5316, 9558]) == 24147\nassert solution.maximumUniqueSubarray([6316, 2961, 7270, 8475, 3392]) == 28414\nassert solution.maximumUniqueSubarray([8074, 9967, 7721, 9303, 8646]) == 43711\nassert solution.maximumUniqueSubarray([7215, 9504, 2139, 3574, 9353]) == 31785",
  "inefficient_solution": "class Solution:\n    def maximumUniqueSubarray(self, nums):\n        max_score = 0\n        for i in range(len(nums)):\n            score = 0\n            unique_nums = []\n            for j in range(i, len(nums)):\n                if nums[j] in unique_nums:\n                    break\n                unique_nums.append(nums[j])\n                score += nums[j]\n            if len(unique_nums) > 0:\n                max_score = max(max_score, score)\n        return max_score",
  "is_python": true
}