{
  "problem_idx": 1191,
  "task_name": "K",
  "markdown_description": "\nGiven an integer array `arr` and an integer `k`, modify the array by repeating it `k` times.\n\n\nFor example, if `arr = [1, 2]` and `k = 3` then the modified array will be `[1, 2, 1, 2, 1, 2]`.\n\n\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`.\n\n\nAs the answer can be very large, return the answer **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [1,2], k = 3\n**Output:** 9\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1,-2,1], k = 5\n**Output:** 2\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [-1,-2], k = 7\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 105`\n* `1 <= k <= 105`\n* `-104 <= arr[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        s = mx_pre = mi_pre = mx_sub = 0\n        for x in arr:\n            s += x\n            mx_pre = max(mx_pre, s)\n            mi_pre = min(mi_pre, s)\n            mx_sub = max(mx_sub, s - mi_pre)\n        ans = mx_sub\n        mod = 10**9 + 7\n        if k == 1:\n            return ans % mod\n        mx_suf = s - mi_pre\n        ans = max(ans, mx_pre + mx_suf)\n        if s > 0:\n            ans = max(ans, (k - 2) * s + mx_pre + mx_suf)\n        return ans % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        s = mx_pre = mi_pre = mx_sub = 0\n        for x in arr:\n            s += x\n            mx_pre = max(mx_pre, s)\n            mi_pre = min(mi_pre, s)\n            mx_sub = max(mx_sub, s - mi_pre)\n        ans = mx_sub\n        mod = 10**9 + 7\n        if k == 1:\n            return ans % mod\n        mx_suf = s - mi_pre\n        ans = max(ans, mx_pre + mx_suf)\n        if s > 0:\n            ans = max(ans, (k - 2) * s + mx_pre + mx_suf)\n        return ans % mod\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(-10000, 10001), random.randint(1, 100))\n    \n    # Generate a random k value\n    k = random.randint(1, 100000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.kConcatenationMaxSum(arr, k)\n\n    return arr, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.kConcatenationMaxSum(arr, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.kConcatenationMaxSum({arr}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.kConcatenationMaxSum([-6075, -1608, 695, -8748, 5980, 4923, -3219, -5914, -3266, -9503, 5078, 3083, -2512, -8809, 290, -6084, 1561, -408, -2152, -1780, -3621, -3201, -5641, -2686, 3318, -6663, -3903, 185, -4018, -9673, 4636, 3815, -6045, -3617, 1799, 4542, 8746, -2669, 3767, -2783, 5447], 25917) == 18849\nassert solution.kConcatenationMaxSum([-4817, 723, 3671, 2489, -5804, -7128, 944, 3838, -7236, -9112, 8139, -6414, 4209, 3640, 3655, -8818, -2491, -5884, -11, -800, 4316, 3032, -1618, -9014, 9387, 1479, 3516, 2218, -4626, -7577, -2886, 6016, -4214, -2501, 6842, -9505, 7774, 7567, 7996, -4454, 5955, -8994, 2364, -7000, -4581, 838, 9730, -4160, -4714, -6988, -6887, -9705, 6773, -6841, -9053, -7714, 5744, -9332, -4299, -8795, -2887, -2595, -8037, -9616, 5204, 7641, 8749, 9585, -601, -8896, -2907, 8206, 126, -9400, -3970, 3028, 6987, -2222, 2432, -9726, 897, 709, -5140, 4475, 3682, 469, -3473, 744, 8377, -2202], 10018) == 31179\nassert solution.kConcatenationMaxSum([180, -2698, 2814, 8291, 523, -335, 4136, -5708, -8233, -2041, 7433, 3678, 2208, -3145, -4382, -4709, -3608, 1398, 5659, 1520, -4560, -6580, -7891, 9933, 4507, -65, 6458, 2232, 9781, 474, -2440, 8787, 4823, -7478, -3651, -8119, 6657, -1687, -8592, 2954, 3691, 2978, -5505, 2879, 1840, 2569, -6282, -2759, 5572, -7592, -1604, -4557, -6161, 751, 4799, 7416, 9613, 4475, -4008, -3544, 3430, -6938, 1798, 6871, -6440, -2963, -9791, 9770, 2620, -8057, 7787, -3346, 3011, -3708, -2562, 9274, -8475, 9275, 3988, 9660, -8900, 6900, -7676, -3320, -29, -1896], 36819) == 492595694\nassert solution.kConcatenationMaxSum([-5374, 9958, -7418, 9515, -5713, -4150, -3663, 575, -2475, 2339, 5174, 1632, -1313, 9780, -6318, 3901, 5527, 6360, 1779, -2280, -360, 7025, 9424, -9562, 3527, 2861, 2585, -8362, -1047, 3950, 356, -689, -2675, 8433, 462, -95, 3125, -9917, -6110, -1729, 3501, 2921, -4962, -159, 9834, -9117, -3965, -5778, -7748, 9086], 12911) == 163369949\nassert solution.kConcatenationMaxSum([-6989, -688, -2407, -4642, -4620, 7280, 509, -8149, -6735, -341, -1058, -1927, 1114, -6270, 7338, -2415, 130, -5344, -9629, 2829, 5057, 1855, 6426, -9529, 115, -7527, 5420, -3230, -3932, 9188, 3882, 6603, -9641, 6672, -7939, -1363, 2579, -458, -9376, 3896, 3747, 2066, -1434, -4330, -9981, 4313, -7401, -5528, 4630, 8277, 5505, -807, -7305, 3339, 8812, -4462, -2309, 3174, 1148, 843, 330, 9573, -8326, -3188, -4538, 1514, -2112, 2783, -1559, 4554, -5827, 8682, -48], 11253) == 30748\nassert solution.kConcatenationMaxSum([5588, -2693, 6732, 7725, 2132, -4437, 5700, -7883, -8165, 9325, -9690, -7380, -6396, 4149, -5582], 56810) == 20747\nassert solution.kConcatenationMaxSum([-4384, -7168, -954, 5498, -1348, -3404, 996, 6826, -6593, -9155, -9502, 5187, 1786, 7074, 9439, 8143, -2944, 4037, -3347, -5380, 7799, -4381, -8272, -93, 7357, 5038, 881, 4132], 25705) == 186853128\nassert solution.kConcatenationMaxSum([-6492, 2625, 7685, -2615, -9370, 1158, -3963, 3019, -9926, 1976, -8224, 2587, -1073, 1400, -4968, -3003, -8182, -3984, 3892, -9306, -2739, -7130, -7000, -609, 4016, 2876, 9459, 6477, -4198, 6072, -9023, -8525, -9496, 2128, -4925, -4657, -2223, 9823, -9182, -203, -1925, -9573, 330, -6310, -7747, -8862, -4496, 3099, 1289, -9645, -6896, 1657, 4196, 7751, -4663, 5570, 9688, 1472, 5399, -5669, 6645, 2643, -1672], 30949) == 36835\nassert solution.kConcatenationMaxSum([3287, 6547, 6109, -8486, 203, -2238, 389, -9334, -118, 9508, 7949, -4924, -7741, -5009, 7350, 8605, -9503, 5007, -4307, 2336, -407, -9467, -5982, -6020, -6354, 3248, -8343, 6652, 7489, -8287, 6199, -5218, -8918, 887, -7247, 84, 9178, -218, 6685, 3683, -7629, -7251, -4661, 8137, 3317, -7017, -6203, 7228, 8922, -3796, 4360, 2025, 3788, 1115, -3385, -7730, 1942, 7344, -8900, 8478, -8715, 5302, -7238, -4795, 6027, 6762, -3181, -8187, -6608, 6100, 5619, 3348, 3426, 1969, 9088, -4601, 4364, -2352, 7191, -9919, 3286, 500, -9674, 5629, -869, 8259, 8547, -7010, -1212, 6202, 8969, -2690, -6277, -5031], 67532) == 49563\nassert solution.kConcatenationMaxSum([-363, 2901, -575, -4080, 1204, 2956, 412, -5019, 470, 5876, -1763, -8167, -9964, -8430, 1850, -8148, 1851, 8309, 6818, 2331, -1011, -7094, -3376, 2048, -4799, -6972, 9248, -8998, 6767, -3123, 6162, 8762, 5916, 2084, 3767, -4729, -9883, -8497, 2362, 8793, 5921], 9944) == 30585\nassert solution.kConcatenationMaxSum([470, 2994, 1152, -7090, 8221, 9210, -7952, -1959, -5133, 3289, 4934, -7961, -1649, 7377, -5535, 8928, 4605, -3539, -2528, -4651, 950, -3578, -7835, 3414, 4986, 308, -3155, 57, 2028, -2712, -2393, 5407, -417, -9033, 8816, 4181, 6493, 1941, -9579, -2502, -5745, -3715, 6995, 8606, -8543, -9542, 64, -311, -9857, -433, -3711, -8089, 1172, -551, -8954, 3039, 2198, 7877, 4502, -2941, -4269, -9503, -2288, 4739, -2167, 8628, -8623, -4509, -1639, -6164, 911, -6664, 2501, -8533, -62, 3080, -4239, 3525, 94, 2195, 5502, 9837, -2786, -7299, 3933, -7544, -1591, 1045, 8386, -5491, -4409, -2813, 3012], 97557) == 21431\nassert solution.kConcatenationMaxSum([108, -4934, -895, 7965, -1687, -2393, -5657, -6164, 3111, -6995, 8291, -7919, -5571, 3613, -5266, 9001, -1053, 4069], 25737) == 14261\nassert solution.kConcatenationMaxSum([-7110, -6084, 1456, -638, 7267, -5405, -8374, -2719, 3729, 5127, 5914, 4435, -5253, -7280, 7286, -373, -4370, 2137, -8353, -5158, -2630, -1045, 2172, 9195, -1791, -2817, -828, -8320, 4354, -6776, -3701, 8497, -1284, 3663, -8795, 1654, -3198, -1144, -2202, 9323, 918, 7638, -9743, -9839, -6717, 5924, -3423, -4830, -4946, 3884, -4826, 2017, 1897, 9720, 1531, 3849, 373, -3189, -9767, 9726, -6487, 2305, -3390, -6425, -7534, 4963, 4642, -1149, 6748, -1605, 5460, -7570, -1141, -5084, 924, 9035, -1074, 8168, -5553, -5244, 5720, -1039, 8402, 2425, 9198, -6772, -3988, 9155, 9060, 9377, -6148, 7961, 6823, -1533], 35618) == 61694\nassert solution.kConcatenationMaxSum([-9083, 3545, 6622, 9748, -2817, -1162, 226, -6797, -3781, -2232, 1112, -1923, 6655, 974, 4561, -6888, 7757, 9137, -7478, -8057, 7516, -6967, 2359, 5763, -6345, 6552, 9627, -6663, -2641, -3124, -862, -1633, -211, -3137, 6409, 3352, -8811, 9625, -309, -4941, -3408, -2853, -4204, -4584, -6921, 475, -4935, -9954, 9412, -5462, -9377, -4910, 2967, 6542, 1943, 1441, 5800, 2135, -5453, 8448, -7246, -8498, 5724, -5292, -3739, -39, -1741, 968, -4531, 6673, 3201, -5614, -70, 5344, -5493, 3722, -9299, 4379, 3339, -5131, 1963, -6722, 953, -815, 5231, -3200, -9252, -7105, 7462, 5094, -1141], 37767) == 30039\nassert solution.kConcatenationMaxSum([-7190, -6413, 1666, 2374, -4263, 7905, -5042, -6547, -7473, -3928, -4684, 2702, -7555, -5808, 1181, 8066, 7443, 7575, -5631, 3449, 1269, 7039, 5491, -1223, -9138, -9021, -455, 8429, -7404, 4298, 1265, 110, 5689, 9102, 7221, 4703, 2563, 4947, 5714, -8978, 8864, 2757, 1003, -7071, -714, -5374, -6809, -8984, 1839, 8893, 2767, -2441, -8843, -7344, -2956, -8318, 9151, 3265, -7206, -5858, 7566, 5287, -3917, 7672, 575, -2120, -8553, 4317, 5392, 5893, -5712, -9106, 3652, -243, 5059, 2149, 6062, -5412, -3748, 5804, -3908, -9344, 7877, 7076, -3549, 4443, -2478, -7542, -3520, -7687, -765, 8507, 9613, -5308, 9177], 13917) == 66328\nassert solution.kConcatenationMaxSum([-9342, -3694, 9736, -1871, 9207, -8084, -9427, -8858, -6465, -3018, -5034, -6804, -9041, 6603, 1458, -4238, 6609, -6729, -8651, 6695, 5831, 8997, 1931, -463, -7831, -5944, 672, 4450, -8425, 8618, -1264, -2345, 1028, 5221, 4407, -9537, -8180, -3623, -4261, 724, -2836, 4440, -7546, 9033, -8032, -737, -3243, 3714, 4105, -6446, 9639, -6156, 8925, -8832, 1573, 9467, -8879, 1912, 3695, 6329, 2563, -6810, -7975, 3303, -9028], 34825) == 23454\nassert solution.kConcatenationMaxSum([9718, -4005, -1909, -8001, 6682, -7499, 8307, 3648, -6798, -7409, -1999, 4855, 9842, -3635, -3059, -2172, 9094, 2904, -4812, -3760, -7059, 3775, 8788, 1594, -2164, -4846, -5928, 9742, 4673, -7838, 8825, 2527, -2025, 3139, 2899, 5015, -5200, 4429, 507, -8381, 8538, 832, 903, 3478, 7184, 2643, -9081, -6682, -5587, -2016, 4343, -5563, -7053, 7628, -7201, -9565, -8720, 2551, -2553, 2625, 4776, 2539, 7245, 6137, -6078, 9416, -9379, -3619, 135, -1460, 8819, 8678, 8960, -7954, -2314, 9412, 747, -7383, 9030, -6999, 6033, 5882, -7347, 1407, 5952, -5772, -5842, 6602, -4410, -2167, -1339], 81443) == 537267242\nassert solution.kConcatenationMaxSum([3458, 5665, 2104, -2606, 7454, -7371, -6904, -3813, -1804, 320, 6053, 6712, -9349, 8172, 7972, -3353, 6096, 4459], 16351) == 380409832\nassert solution.kConcatenationMaxSum([-2078, -2788, -6790, -8340, 6063, 7581, 578, -9569, 2321, -7064, 6096, -5826, -5177, 1578, 1549, -1918, 458, -6386, 5779, 8517, -5747, 3870, -2984, -5058, -1907, -6632, -4837, -4809, -1871, 7104, 4804, 495, -6114, -6062, -9164, -8596, -2378, 4164, -369, -5530, 9087, 2051, 9035, -2228, -8552, -4, 192, -314, -7762, -9263, -5353, 5697, 4386, 4992, -7717, 6837, 136, 4346, -2164, 2871, -1017, 8921, -6132, 9423, -4580, -2028, -1620, -5408, 4921, -7593, -6794, -5007, -6190, -6757, 1585, -4944, 4369, 4610, -9158, 7806, 9345], 17057) == 30579\nassert solution.kConcatenationMaxSum([6673, 3815, -5993, 431, 2928, 4183, -7856, 8741, 3374, -2706, 8602, 1377, 5346, -300, -2928, -3366, 4311, 9342, 9509, 4316, 2547, 4711, 4634, -8410, -3088, 7110, -5656, 4498, -2304, -8971, 1487, -5996, -1001, -8199, -3601, 8422, 3371, 1111, 8187, 4706, -8201, -4482, -7537, -9459, 7547, -7874, 1002, -9834, 9856, 7093, -7392, 9547, 4063, -8097, 7412, -8016, 1927, -9079, 1916, -593, -6357, 4861, 5551, 7015, 3056, -9315, -5325, 5998, -32, -2438, 7060, -3722, -4665, -1790, 5918, -636, 1465], 19457) == 579850491\nassert solution.kConcatenationMaxSum([6682, -180, -5969, -3616, -7330, -194, 6573, 8800, 4907, -5616, 5957, 5139, -9348, -8560, 5105, 4021, 6974, -8586, -1132, 9122, 704, -2243, -2117, -1285, -207, -5876, 4433, -9566, -1378, 2897, 8745, 6478, -6269, 354, -3118, 1888, 4788, 6622, -9261, 6172, 316, -6366, 8534, 7723, 2140, -4580, 6769, 1856, 6010, 6142, -9567, 800, -1311, -3127, -2436, 3003, 4971, -72, -3247, 4539, -1521, -1913, 6442, -8195, 8769, 9142, -2145, -774, -8880, -7450, 5565, -1520, -580, 5843, -4891, 7269, 948, 5922, 4446, -5587, 4419, 9104, 9533, -2315, 9610, 125, -6835, 2837, 9306, 3169, 428], 69948) == 76952909\nassert solution.kConcatenationMaxSum([4707, 61, -2661, 580], 17634) == 47384639\nassert solution.kConcatenationMaxSum([-9009, -7197, 6441, -5338, 1768, -3070, 1530, -5604, 813, -609, 3293, 2306, 2053, 7689, 4, 6207, 8841, -5510, -1767, 1571, 1677, 6524, -4864, -5097, 4829, 1857, 4270, -8954, 3189, 5146, 5633, 8246, -6937, 2294, 7595, 82], 1265) == 37846509\nassert solution.kConcatenationMaxSum([9179, -8166, 1385, 3323, -4672, -991, -6397, 9334, 6384, 628, -6391, -3039, -2845, 3452, -4476, -8211, 5016, 1990, 8191, -5180, -5504, -2839, -4217, -6765, 3486, 8546, 2177, -8362, 4547, 6973, 990, 7675, 3955, -5825, -8258], 81003) == 29987\nassert solution.kConcatenationMaxSum([-5738, 1162, -526, -7428, -7404, 224, 7112, -6091, 9688, 7594, 7832, -2593, -7491, -5098, 1541, -5918, 464, 3065, -8546], 8959) == 26359\nassert solution.kConcatenationMaxSum([279, -7356, -4569, 502, -1283, -3873, 3177, -2559, -2864], 71808) == 3177\nassert solution.kConcatenationMaxSum([-8026, 381, -318, 8895, 6039, -729, -4889, 7460, -35, -2166, 8631, -4669, -8340, 3197, 339, 6084, -3779, 1943, 7720, 5934, -1867, 3085, 7909, 5076, -8226, 7080, -6414, 2804, 1678, -5896, 6801, 193, -7850, 858, -7225, -4997, -332, -3583, -9003, -5920, -8987, 1970, 3800, 9176, -9141, 2353, -4138, 1121, -4998, -4032, 3497, -2281, 9703, 8467, -4633, 2115, -8493, -3488, -8394, 7170, 1122, -8490, 8954, 6203, 7753, 4514, -8577, 181, -1607], 11556) == 55296\nassert solution.kConcatenationMaxSum([89, -1668, 1750, -9574, -3866, 5287, 5402, -1626, 514, -2418, -1072, -994, -2281, -3700, 8599, 9288, -5215, 4150, 5466, 341, 1143, 7862, -6430, 6661, -779, 6673, 338, -9581, -4869, -7590, -565, 5129, -2413, -1853, -6999, -8506, 5626, 4381, 3628, 188, -9524, -3140, 3374, 9367, -186, -6054, -4895, 958, -7416, -217, 9457, 6773, 9388, 9987, -5851, -4008, 15, 6373, 911, 6977, 4439, -2155, -6254, -8751, -1924, -8411, 2882, -9400, -8425, 1453, -6710, 3717, 5176, 5113, 3900, -1563, -5521, 2253, -5013, -4118, -4022, -8519, -4679, 1452, 7742, -3898, 7507, -9534, -2106, 6696, -6191, 6374, 1172, 6923, -5722, 8611, -8191], 50202) == 44461\nassert solution.kConcatenationMaxSum([-3119, 221, -3016, -325, -7505, -5416, -6413, 6743, 4787, 5428, -7599, 8011, -9742, -5157, -484, -2954, -7509, 7364, -6988, 6816, 8716, 9291, 6449, 8152, 1703, -9156, -116, 5798, -1826, 5876, -7342, 2876, 4196, -3811, -5467, 6584, 7327, 7708, -1893, -4037, 5083, -444, 5847, 4739, -904, 1216, -1901, 1476, 1324, -3624, 7254, -1955, -4258, 5248, -7315, -1157, -6564], 50821) == 926821806\nassert solution.kConcatenationMaxSum([7240, 9936, 6196, -1882, -824, 3638, -3039, -8127, -6895, 860, -3563, 53, 92, 9757, 9458, -6487, -9346, 2121, -8496, -1594, -7405, -5162, -4992, -6456, 5547, 5670, -9283, 5395, 9256, -6345, 2700, -8137, -6890, -891, 3699, -3110, -6026, 8243, -3091, -5350, 4225, 5443, -3176, 3306, -8549, 9351, 8330, -8611, 3006, -6286, 1192, -203, 1417, -6908, 9514, 9072, 1916, -6311, -2753, 5186, 4437, 6089, -1744, 7054, 8383], 66505) == 655122234\nassert solution.kConcatenationMaxSum([6711, -542, -9902, -5672, -241, -9294, -2023, -7692, 68, 8854, 5313, -7317, -1633, -7879, 3469, -2966, -5142, -7143, -163, -8361, -8577, 367, -7728, 2578, -202, -3365, -22, 8768, -7047, -7790, 405, -4141, -7891, 7302, -9695, -4759, 4114, 2543, 9332, -7267, 9083, -7205, -1731, -6059, 7277, -479, -4274, 9231, 4509, 9214, -6928, 9902, -3966, -3842, -6748, 9651, 4761, -9104, 8711, 9313, -2296, -6427, 1629, -5536, -2123], 26074) == 40038\nassert solution.kConcatenationMaxSum([2968, 8364, -1703, -2585, -1946, -2907, 6664, 3216, -669, 5986, 7733, 8730, -9712, 6717, -558, 9076, -4084, -3464, -1693, -1192, 2609, 9386, -8588, -8729, -4769, 7158, 8267, 4984, 5912, -5432, 6076, -5970, -4025, 825, 7124, 195, -4697, 9042, -38, 8071, 4134, 917, 4416, -6935, 9727, -5283, 4387, -1872, 2232, 6995, -8135, 6038, -1475, 3911, -3717, -2019, -1053, 8316, -8190, -1682, 4378, 9778, 9347, -6059, -3952, -707, -9073, -6403, -6475, 4235, -4516, 9441, -3967, -8620, -7203, -5559, 2139, -6468, 19, 9165, 2586], 88837) == 365491569\nassert solution.kConcatenationMaxSum([4160, 9981, 6483, -3906, 8241, -6375, 2740, -5144, 7009, -9126, 3499, 134, 7170, -9782, 6086, 8252, 1247, -2687, 4388, -7111, -1703, -2679, -5763, 410, -747, 4958, 2464, 1554, 1589, 6989, -5901, 8815, 4393, -438, -902, -5768, 8395, 6093, 4928, -5159, 7508, -1072, 295, 908, -3089, 2777, -9929, -3909, -1486, 8693, -9304, -4415, 9802, 5348, 5616, 5750, 734, 3346, -9823, -4588, -4501, 7592, 9824, 3679, 6778, -5989, 8327, 9074, -7617, -8326, 7300, 2647, -3832, -3849, 5632, 3243, 9132, 5647, -6386, 5388, -7089, -8593, 5588, 639], 34894) == 940074197\nassert solution.kConcatenationMaxSum([-2435, -8404, -8558, -6947, -893, 6355, -6660, 6902, 832, 8970, 4386, -5005, 3507, -171, -3252, -1698, -278, 1739, 8715, -1020, 9872, -1409, 9752, -1983, -5474, 1151, 6303, -2415, 1997, 9874, -7462, 6521, 5812, -2247, 510, 6184, -3982, -9034, 5013, 8491, -7936, 4045, -1913, -3348, 1026, -4380, 8020, -2294, 6318, -9181, 7410, 3032, 1394, 8188, 471, 1906, 1167, -4603, 1690, -8130, 4295, -7476, 139, 1163, 809, -4068], 66430) == 79501999\nassert solution.kConcatenationMaxSum([-9182, 9463, 5355, 1787, -7214, 1375, 794, -7093, 1760, 7907, 8200, 3596, -3642, -364, 363, 5861, -2896, 3457, -424, 3129, -739, 2491, 4571, 3814, -9832, -1374, -4672, 6039, 9273, -4199, -8669, 4853, -6835, 8710, 6436, -573, -8418, 5316, 5671, -4083, 1936, -370, -2205, -1778, -2064, -5688, -6851, 239, 3867, 4033, -5080, -4779, 6820, 2483], 22367) == 460223727\nassert solution.kConcatenationMaxSum([1405, -7488, 8308, 3754, 2232, -9952, -616, -4076, -7046, -4940, -1395, -9933, -5208, 8585, 8049, 379, -7475, -6969, -963, 9468], 51583) == 19285\nassert solution.kConcatenationMaxSum([2148, -7499, 2581, 8647, -3306, 7519, -6152, -3006, -5, 9456, -3632, -5507, 3769, 450, 2233, -5144, 5303, 6719, -6976, 8941, -7305, 408, 4235, 5452, -1114, 7762, 6062, -2411, -4866, -1623, -9818, 7765, -8955, 9632, -5673, 1381, 2423, -2966, -9395, 2116, -6211, 3506, -5995, 1277, 7315, -8614, -6450, 5729, -1957, -4239, 945, -2484, -9885, 398, 8671, 2146, 4764, -3178, -5580, -5333, 4250, -526, -8772, 1472, 1570, 4779, 7698, 5683], 58658) == 36889209\nassert solution.kConcatenationMaxSum([2211, 9723, 6828, 2814, -7384, -7897, -4680, -9637, -2531, 1692, 5748, 9609, -2867], 21241) == 77112089\nassert solution.kConcatenationMaxSum([4496, -6959, -5904, -1165, 588, -6985, -9961, 9079, -6870, 4531, 1052, -6281, -128, 9571, 6020, -2821, 8953, -8702, 25, 1234, -2671, -8046, 8676], 2814) == 23106\nassert solution.kConcatenationMaxSum([-3280, -1534, 2837, 4472, -683, 8506, -227, 4006, -3381, -859, -9610, 1112, -187, -5453, -9528, 1863, -7508, 9078, -4482, -5399, 2703, 9720, -4624, -7891, 4680, 3878, -4180, -1686, 8182, -8223, -8263, 8387, 3905, 376, 8881, -8187, 3397, -5997, -8853, 6246, -1584, -138, -2089, 9815, -1536, 492, -6526, -3671, -4175, -3972, -2342, 5225, -1621, -725, -3884, 2388, 1550, -4195, 8618, 4810, 6344, -7643, -4998, 6716, 4063, 3404, 791, -496, -8497, -7483, 5182, -4020, -9858, 9596, -639, 1693, -118, -3433, -5090, -8453, -6449, 1564, 2125, 2486], 89392) == 22105\nassert solution.kConcatenationMaxSum([-963, 8508, -5636, -5322, -3243, -7799, 6435, 4970, -5015, -1279, -8418, 9374, -3296, 5830, 1476, 6559, -2482, -1187, -5854, -3896, 1220, 6487, -1205, 627, -3225, -907, -6534, -7836, -4144, -2518, -4754, 4093, 8745, 6361, 4850, -3768, 4689, -3521, 9932, 9278, 6515, -2694, 5655, -7501], 53712) == 462340712\nassert solution.kConcatenationMaxSum([-969, -8195, -8207, -4287, 9189, 8243, -9161, 5729, -966, 2825, -208, 2443, 5342, 6081, 6293, -4224, -5626, -6708, -7782, 5484, 4761, -5567, 7778, 6569, 7056, -844, -8537, 5595, 1127, -4931, -3564, -192, 6490, 5507, -4594, -8042, 3786, -5650, 8447, -7849, 7474, -9856, -7888, -4500, -4589, 1133, 3673, 5530, 8099, 3918, 1824, 1492], 79767) == 714103434\nassert solution.kConcatenationMaxSum([5269, 8797, 4153, 8244, 142, 1239, -7093, -8530, 8135, -2396, -3164, -3287, 6671, -7387, -9950, -9622, 4594, -6254, -1420, -3990, 8087, -925, -2675, 6308, -9669, 7422, -9378, -7805, -5925, -3537, 3086, 1150, 3896, -4455, -5185, 8097, 9976, 2074, -5759, 4264, 7888, -5604, -1646, -9548, -8760, -3806, -4653, -5995, -1281, 3293, -3940, 3815, -3753, -3790, -2197, 4265, 7752], 86092) == 39861\nassert solution.kConcatenationMaxSum([-7198, -5909, -7708, 445, 6177, -4613, -1395, -9010, 4177, 8248, -984, -5136, 573, 9496, 9310, -8081, 2430, 624, -8702, 2738, -2742, -1748, 5072, -2542, -9113, 6892, 7630, -1234, 582, 8089, 4306, 9942, 9273, 2194, 9634, -2519, -4047, -2936, -603, 4800, 1666, -2212, -1300, 5002, 2096, -3456, -2082, -3274, -5265, -2974, -7228, -5991, -8239, -1462, -4827, 7789, -120, 2417, -3896, 9549, -9362, 6819, -1986, -3679, -46, 9971, -4362, 2703, -2828, 1806, 9280], 55607) == 607334054\nassert solution.kConcatenationMaxSum([-3704, -4411, 9966, -4562, -6530, -6399, 7240, -9886, -2364, 6889, 9956, -6872, 7979, -195, -5, -5162, 5274, -908, -5033, -6987, 3142, -7059, 7652, 278, 893, -3647, -4667, 4372, -7829, -8356, 2110, 1239, -8394, -950, 8230, -6702, 5709, -929, -6325, 8113, 8770, 8311, 9763, -3887, -1267, -2843, -1466, 3233, -1489, -7132, 1135, 5204, -5316, 634, 6230, -3520, -2477, -886, -9860, 4293, -4784, -145, -8070, 2535, -1345, 4572, 3993, 2092, -3091, 8060], 1246) == 34957\nassert solution.kConcatenationMaxSum([-3316, -5395, 1464, 9334, -4957, 2378, 2393, -4397, -4680, 1854, -1828, -4029, -7091, 874, 4383, -2412, 3906, -5630, -2631, -7137, 81, 5876, 3444, -2777, 5618, -2289, -5109, -497, 239, 6546, 7402, 5328, 175, -8961, -43, -4794, 6567, -839, 8297, -5132, -995, -5499, 1368, -4266, 6109], 37858) == 24264\nassert solution.kConcatenationMaxSum([4325, 2819, -7206, 2336, -9879, -2194, -4617, -517, 9714, 3157, 5693, -2079, 2251, 1879, -5976, 9315, -283, -6287, -519, 6504, -6377, 5674, 1162, 2558, 7025, -3679, -183, 5570, 1355, -2115, -781, -2254, 4557, 3790, -3203, -6819, -7385, 8931, 7056, 3549, -8059, -6312, -4399, -6339, 965, 2644, 4361, 2465, -6894, 6306, 781, -8731, -4653, -5429, 9042, -9670, 1363, 9191, -1290, 2554, -2733, -4725, -5180, 7728], 91476) == 41800\nassert solution.kConcatenationMaxSum([-1806, 5783, 6346, -9375], 89043) == 84423945\nassert solution.kConcatenationMaxSum([9468, 1180, 156, -9366, 5563, -3571, 6711, -9420, -6623, -2862, 4046, -8135, 365, 865, -3328, 1690, -6848, -1854, -6947, 9524, 7259, 1025, 1294, -8890, 8762, -4242, -3457, 249, -2751, 3724, 4358, -6778, -1918, 1068, 2847, 5130, -8082, -4840, -3315, -8038, -4495, 1350, 4870, 8301, -4557, 6485, 1302, 2835, -2708, -8648, -2957, -9289, -3437, 9172, -1880, 1612, 2910, -5572, -3549, -3537, 4343], 20252) == 20586\nassert solution.kConcatenationMaxSum([-4711, -3431, 6770], 81252) == 6770\nassert solution.kConcatenationMaxSum([124, -8536, -7904, -9291, 1963, 2348, 8483, 7101, 2778, 9608, -8828, -266, -990, 9086, -4396, -4433, -5956, -9741, 421, 1135, 778, -7330, -2324, 5511, -5079, 9010, 8071, 102, -3417, 3161, -2821, -8207, 1878, -507, -5487, 2069, -7384, 4997, -1453, -6476, -5100, 4429, -5339, -7481, 820, 9888, 4662, -659, -6495], 86158) == 32281\nassert solution.kConcatenationMaxSum([-9361, 2835, 8812, 7040, 5288, -8833, 3289, -9377, 1118, 2879, -5659, -7164, 1300, 8873, -8954, -5044, 3946, -3330, -5924, -4339, -2650, -4411, -7948, 9523, 3437, -9168, 7393], 74218) == 25799\nassert solution.kConcatenationMaxSum([8957, 2276, 9074, -6853, -6660, -6634, 2231, 7650, 6177, 1850, -1202, -5330, -4119, 6030, -6671, 9585, -8591, 9163, 4627, 9979, -6540, 532, -6124, -4727, 6754, 189, 9811, 8353, -3523, -3431, 793, 3273, -3197, 8713, 1866, 4554, 6374, -3287, 3100, -8813, 4199, -3352, 3582, 1263, 55, -2864, -1168, -3318, 3060, -8701, -9618, -3268, 6567, 3436, -5927, 973, 6432, 2324, -4109, -707, 9828, 7928, 8430, -3613, -4023, -8761, 5279, 9052, 286, -4021], 29088) == 613022658\nassert solution.kConcatenationMaxSum([-4787, -8290, 4871, -2371, 6076, 3969, 3169, 5632, -4827, 499, -218, -1169, 7584, 5402, -6246, 8270, 1023, -1593, -7436, 8010, 1494, 3043, -887, -4028, -8465, -6320], 10483) == 25244392\nassert solution.kConcatenationMaxSum([-7731, -1825, 107, 76, -3970, 6419, -9164, 7155, 5095, -3937, -6208, 4543, 4665, -256, 1470, 8252, 1715, 9491, 3020, 3108, 5704, 3446, -4999, 9632, 9200, -119, 9456, 3113, -7727, 523, 4817, -6109, 8382, -5016, 8722, 7993, 6228, 4635, 4717, -6269, 3152, 9252, -2397, -9641, -2340, -994, 8006, -4104, 7974, 2292, 1165, -9140, -5977, 149, -5424], 76401) == 373089611\nassert solution.kConcatenationMaxSum([-9197, -2517, 462, -7098, 5102, 4749, -7986, -5252], 82466) == 9851\nassert solution.kConcatenationMaxSum([-2139, -2076, 5864, 1752, 3480, 3804, -4077, 656, 2403, 1660, -8082, -8087, 786, -6099, 9389, 1501, 9127, -9900, -4420, 6514, -257, -9604, 6259, -4063, -544, -7257, 2600, 2043, 2050, -7731, 2118], 32648) == 20017\nassert solution.kConcatenationMaxSum([-8486, -4032, 6933, -8150, -1262, -336, 4900, -3320, 1246, 3202, -5930, -900, -3241, 7364, 2484, -5450, 1493, 1121, -9698, 6049], 28894) == 9848\nassert solution.kConcatenationMaxSum([4550, -6279, 1954, -8491, 6433, -3883, 4802, -3278, 6921, -8733, -8288, 3392, 1073, -9166, 826, -5181, 1418, 5648, 4736, -36, 6281, -144, -8902, 1868, 3010, 5734, -1183], 56503) == 22980\nassert solution.kConcatenationMaxSum([-9908, -5777, 761, 4654, 1208, -2038, -9785, 2526, -9355, 9030, -6514, -461, -5161, -6953, -6111, -9602, -1254, -4886, 2399, -6286, 2576, 911, 9564, 1745, -2479, -6830, -8225, 5499, 7880], 86397) == 14796\nassert solution.kConcatenationMaxSum([-5175], 90281) == 0\nassert solution.kConcatenationMaxSum([6562, 138, -3959, 6949, 2452, 8445, 9839, 9973, -8979, -94, -7055, -3652, 1627, -1119, 897, -6030, 7959, 6361, 4198, 6468, 170, -5644, -1244, -1333, -6252, 3159, 9477, -6853, 1243, 5018, 8931, -6658, -1507, -8706, -5214, -1258, 5339, -7272, 2872, 982, -6583, -419, -5523, -4449, 6776, 2524, -3716, -6144, 6162, 1525, 5136, 9314, 2322, -7679, 6101, -7553, 9333], 22594) == 753682353\nassert solution.kConcatenationMaxSum([7348, 8853, -4564, 4874, -4922, 1312, 165, 3866, -7303, -1707, 5863, -2535, 9984, -2803, -513, 4992, 1025, 3992, 9428, -2299, 342, 9107, 1832, -9935, -4196, -3155, 5540, 7104, 5847, 7696, 8865, 9254, -1648, 2359, -9005, -4808, 1698, 2856, -5785, -6892, -396, -2031, -5730, 7807, 426, -2306, 5626, 4931, 5906, -865, 8612, -9385, 7312, -2953, -6150, -6163, -7135, 5718, -7170, 8344, 9981, 9315, 9337, 2516, -4009, 550, -4824, -1986, 5240, 8378, 6286, 9088, -2309, 3618, -1132, 8224], 99638) == 438741237\nassert solution.kConcatenationMaxSum([-2654, -8501, 8697, -194, -428, -2598, -4951, -2874, 4756, 163, 1977, -2138, 3830, -1793, -7806, -7885, -7145, 5915, -7522, 7748, 8877, 6908, -3538, -6188, -4472], 83116) == 23533\nassert solution.kConcatenationMaxSum([2901, 2071, -561, 4599, -5668, 3835, 7990, -2112, 1296, -8747, -9647, -4095, 5507, -1362, 2654, -9725, -6810, 5232, 9276, 3600, 1225, -243, -6045, 3874, -14], 13515) == 32072\nassert solution.kConcatenationMaxSum([8968, -5998, -983, 1813, -8031, -4514, 664, 8436, 7347, -4474, 8198, 1301, 6525, -1713], 50321) == 882590477\nassert solution.kConcatenationMaxSum([5831, 3902, 8579, 4231, 3816, -303, -9588, -2723, 2447, -407, -2519, -3780, -6056, 3183, 5482, 9869, 7620, -9966, 7560, -351, 997, -9267, 5066], 52075) == 230173679\nassert solution.kConcatenationMaxSum([7340, -6722, -4174, -195, 1162, -9257, -5141, -9057, -6026, 5958, 8566, 8983, 8644, 774, -102, -4891, -1361, -592, -3764, 2242, -9197, 8922, -7777, 1636, -3117, -6328, -5010, -4170, -1165, -9065, 6253, 3695, 4289, -7260, 2037, 9703, 3175, 2879, -4855, 368, 6952, -4686, 8532, -2773, 1141, 5045, 8856, 9842], 47599) == 490740975\nassert solution.kConcatenationMaxSum([-4890, 3080, -6004, -5028, -6549, -189, -7984, 6872, -9528, -7780, 675, -4355, -844, -7122, 3495, -4793, -8296, 3116, -8955, -85, -8870, -5691, -5815, -4335, 9087, 8721, -7802, 5759, 8381, 3054, 3986, 8604, -6628, -9776, -3587, -571, -9604, -8514, -8548, 8354, 1719, 2079, -6668, 5165, 4750, -6915, 6708, -3702, 3654, 7920, -9066, 9663, 7780, 4471, 2564, -4272, 2207, -1678, -4454, -4593, 8630, 3349, 9969, 3331, 9574, 9709, 990, -6938, -5896, -3844, 3753, 4308, 5575, -6615, 8110, 6495, 9219, -7478, -8181, -5249, 7150, 2964, 2494, 6474, 3319, 3617, 1491, 6463, 2387, -6604, -8469, 3926, 2193, 9689, 8766, -9613, -9159], 75036) == 110357\nassert solution.kConcatenationMaxSum([5251, 8046, 4642, -3063, -1735, 2742, 4396, -4078, -5814, -9547, -9731, -4949, -2698, 2055, -2424], 73022) == 20279\nassert solution.kConcatenationMaxSum([-6653, 8137, 6066, -8466, 7259, 4609, -2652, 6041, -2003, -9570, -1146, -921, 8591, 2060, 3347, 1793, 6921, -6411, -9220, 8019, -2308, 1523, -7450, 6739, -445, 8182, -7068, 3355, -6885, 197, -24, 3490, -7111, -918, -9082, -6253, -1888, 8761, -5257, 6645, -2845, 6830, 9864, 5326, -3141, -3742, -777, -1706, 9489, -6624, 8700, -8698, -9456, 4935, 7615, -6299, 4224, 255, -983, -2505, 5470, 5817, 5059, -963, 1545, -7657, -9223, -9254, -6625], 34626) == 37539\nassert solution.kConcatenationMaxSum([-9930, 5248, -7201, -4640, -1785, -3505, -6972, -9341, -3925, -9440, 6558, -7738, 8972, 158, -7997, 8255, 2740, 442, 1670, -722, -3539, -149, -2111, -2948, 6778, 2920, 9464, 8765, 2445, -447, 9914, -2566, 2502, -6130, -9529, -4078, 7547, -6205, 2339, -631, 1012, 4456, 5366, -3901, 6896, -4899, -71, 7437, 7494, -9497, 4597, -2744, 7375, 8388], 93951) == 666822918\nassert solution.kConcatenationMaxSum([-376, 164, -9429, 3215, -2831, -3547, -5039, 2630, 7986, 9625], 10184) == 24439075\nassert solution.kConcatenationMaxSum([-4900, 4148, -8194, 8353, -1209, 6197, 1936, -2396, -1717, 2805, -7313, 9451, -1864, 6379, -8098, -7744, 5761, -2701, 6658, 7972, 2439, -9964, 7584, -1996, -7325, 1424, 8779, 743, -7346, 934, 5702, 9181, -9175, 1212, -400, -8294, -6326, 5658, -3364, -1990, 6677, 2315, -2330, 1431, 682, 9107, -6965, 4943, 2424, -9209, 854, 519, 2679, -9324, -265, 2704], 4092) == 29659647\nassert solution.kConcatenationMaxSum([9693, -2901, 8242, -2782, 2821, 9710, -9125, 9799, -8101, 3265, -8452, -6028, 5778, -1139, -1232, -4645, -8852, -3140, -3111, 3576, 4046, -9837, 5437, -8862, 6393, 7169, -9060, -7784, 973, 2563, 7946, 5634, -8411, -6638, 3716, 4245, -9819, -7801, 9262, 300, 9254, -5911, 7327, 8704, -4845, -4185, -8970, 2402, -165, -3562, -6377, 2931, 5917, 6179, 448, -5380, -843, -5277, 9384, -5941, 9372, -5975, 1922, 1398, 3044, -8648, 4885], 22015) == 42107\nassert solution.kConcatenationMaxSum([131, 836, -8796, -362, -7861, -7184, 8755, -5630, 7375, 7871, 934, -8327, -7469, 5045, 8585, 4283, -299, -1852, -6351, -5761, -8018, -8892, 8397, -713, 7619, 356, 7623, 1835, 5340, -6042, 1533, 8943, -1645, -7364, -3604, 2054, -30, -7675, -7842, -6993, 5212, -1476, 9238, -5354, -580, 8299, 3663, -6985, 2263, 3829, -5657, 1093, -3978, -9605, 8630, 4777, -1989, -8164, -7171, -4007, 965, 7849, 3084, -1408], 8113) == 34891\nassert solution.kConcatenationMaxSum([-2192, 7878, 5244, -92, 1766, -5774, 1906, 2690, 1585, -737, 826, -8831, 8281, -2916, 9995, 6047, -9475, -3355, -4841, 2142, 5634, 3928, 9598, -8934, -4776, -66, 9150, -9004, -6395, 2366, -6125, -433, 5086, -3576, 3917, -2416, 2419, 4484, 2111, 2941, 6998, -6381, 4922, -8798, 8237, -2882, 7428, 7661, -168, -7991, -1091, 8501, 9365, -8415, 7367, 7122], 26978) == 400996703\nassert solution.kConcatenationMaxSum([5267, -4505, 8991, -8478, 7757, -9255, 7110, 5447, -9711, -4043, -6111, 9920, -7066, -4445, 6047, -3197, 390, -4018], 96586) == 12557\nassert solution.kConcatenationMaxSum([-962, 6422, 6245, 1598, 8756, 1045, 5398, -7797, -3299, 1890, 2907, 3581, -3594, -6763, -6179, 5670, -8735, -4798, -5652, -756, -954, -4331, 6957, -7627, 5663, -2103, -9703, 3740, -807, 6150, 9250, 3027, -9109, -8682, -9142, -3569, 9448, -834, -2801, -6259, -7308, 5423, -8305, -5800, -4917, 7702, 2686], 30047) == 38890\nassert solution.kConcatenationMaxSum([6922, -698, -9240, 1052, -7767, 2997, 1585, -9604, 3160, -8895, 6346, 5914, 7453, 4406, -5130, 8355, 2131, -5105, -6002, 7158, -2106, 9272, -9338, -1781, 2377, -1705, -7318, -814, 8833, -4522, -991, 994, -6595, -8425, 74, -7314, 4779, -736, -2515, 8658, 3368, -6284, -470, -3801, 5175, -8636, -1394, -5277, -1115, 2209, 2332, -2356, 656, 8108, -4529, -1716, 7190, 7803, -481, 4893, -8626], 54378) == 32692\nassert solution.kConcatenationMaxSum([3134, -9562, -7907, -9841, -3658, 6324, 7926, -4801, 5235, -9605, -5286, 4782, -709, -894, 4293, 5743, -4334, 7644, 6633, 5430, 8979, -2248, -7576, -6134, -9751, 8459, -2280, 2612, 2381, 1826, -8731, 6527, 2504, -3808, 7137, 2237, -7338, -7822, 5665, -5354, -9560, -2039, -5334, 5576, 2605, -620, -4067, 8154, -9853, -4802, -79, -5211, 2667, -384, -4685, -2565, 1694, 3956, -4851], 84012) == 37567\nassert solution.kConcatenationMaxSum([-5072, -6565, -139, 2308, 2186, -8886, -2427, 7079, 1088, -8112, 5272, -2393, 9740, 8215, 7003, 2232, -6409, -8418, -3585, 5581, -6417, 2642], 54114) == 30124\nassert solution.kConcatenationMaxSum([9253, 1188, 1842, -7172], 89612) == 458014104\nassert solution.kConcatenationMaxSum([-6733, -5062, 6406, 926, 5360, 9249, 691, -8300, -4908, 9708, -8881, 6547, -9156, 8151, -2991, -9125, 2362, 1581, -7001, -8932, 9617, -1055, 2939, -5746, 8599, 628, 4211, 3683, 7755, -6690, -9746, -3375, 1902, 8612, 6870, -2185, 568, 8469, -8269, 6000, -9767, -3367, 7106, 4453, 1381, 6164, 1405, 6741, -2170, -8319, 8985, -1604, 9838, -5226, -4553, -1050, 8236, 6295, -2657, -9462, -5109, 6516, 4372, -3955, 7394, -8002, 8936, -5100, -7185, 5438], 8204) == 233129174\nassert solution.kConcatenationMaxSum([1526, 5123, -3288, 3175, 4720, -6785, 9656, 7958, 9562, 1107, 2223, 5440, -7483, -8552, 7667, -154, 1735, 6443, -1797, -6922, 3400, -7071, -1142, -6932, 6177, 5058, -8171, 2592, 1273, -941, 7397, -35, -7300, -8103, -2990, -1786, 3131, 2164, -2354, 1006, 9100, -7395, 7723, -9344, -1483, -5186, -5876, -999, -5598, -6670, 7089, -1592, -6049, 6705, 7324, -6734, 4531, -6816, 3348, -9981, 3975, -4914, -8928, -717, -6744, 9909, 1687, -6655, -6662, -6825, 192, 9206, 7857, -134, -1740, 1082, 423, -1597, -611, 786], 14331) == 55881\nassert solution.kConcatenationMaxSum([9222, 2850, 6940, 2839, 3655, 9605, -8405, 5603, -4270, 1529, 4678, 9351, -195, -4998, -9028, 4404, 7568, 7770, -579, -4543, -5629, -3663, -2014, 8282, 6504, -4825, -8250, 280, 5843, -2714, -1038, 9049, 7036, 9217, -3666, 570, 1543, 1260], 91559) == 656606837\nassert solution.kConcatenationMaxSum([-4908, -3764, 6984, 6353, -5794, -197, -6680, -6688, -9367, -7368, -3057, 9929, 6826, 1299, -3018, -8832, -554, 7255, 7321, 4982, -9052, -3051, 6028, -1096, 7598, -5344, 940, -1604, 3726, -7515, -6327, 3769, -2619, 2602, -9326, 8635, -9024, 7472, 8694, -4980, -3223, -4144, 6827, 9112, 4854, -6061, -1860, 4545, -3402, 4491, -1419, -285, 9457, 3004, -6322, 7846, 5845, -9647, -3196], 42000) == 43999\nassert solution.kConcatenationMaxSum([5736, -5222, 5551, 8178, -5784, 5002, 6593, -7799, 1226, 2639, -8769, 6734, -3496, 9251, -5611, -4353, 9760, -4063, -5410, -6644, -6801, 8316, 4939, 4914, -889, 9019, -6141, -859, -5459, -535, 2991, 7520, 3516, 4002, -8772, 5373, -2001, 9401, 4450, -1897, -7863, -2200, -807, 2016, 3240, -8949, -3765, 4780, 3683, -6835, 6384, -7124, 1960, -4515, -9185, -7440, 1440, -8026, -1641, 815, -5370, -4157, 3965, 1467, 241, 3595, 3204, -4472, -7873, 5692, -111, -9855, 3686, -875, -8911, 7521, -7745, 4235, 4848], 12939) == 45586\nassert solution.kConcatenationMaxSum([699, 6760, -3899, -6554, -564, -4436, -7603, -4678, 6475, -7734, -6415, 5147, -5578, 8951, 8255, 2042, -4798, -5930, -5537, 4345, -208, 2030, 6058, 6270, 9502, -595, -1906, -7738, -1466, 4732, -1370, 9951, 2812, 467], 45693) == 342131871\nassert solution.kConcatenationMaxSum([-1050, -6974, -4454, 3618, 4352, 2325, 2754, 8210, -3988, 921, -189, 5829, -5474, -4230, -7094, -9390, 5501, -5464, 5958, 2300, 5352, -3454, -8721, 3147, 2931, 3051, -3561, 2778, 8145, 412, 8897, 7668, -2883, -6024], 63458) == 710689883\nassert solution.kConcatenationMaxSum([4695, -4671, 1297, 7198, 2204, -6643, -8842, 9733, 4713, 3336, 8589, -6558, -2184, -5075, -4550, 7458, -9979, -1678, -5367, 9660, -1844, -8277, -1572, 1142, 4516, 1716, 6364, -8800, -8305, -4892, 5658, 4864, 5514, -1834, -9549, 234, -9719, -6100, 7023, -6753, -1440, -6328, -9674, 5334, -3552, 8801], 57473) == 32192\nassert solution.kConcatenationMaxSum([1567, -6959, -3920, 190, -5286], 46852) == 1567\nassert solution.kConcatenationMaxSum([9860, -6412, 1626, -3480, -1387, -1000, -1125, 5042, -430, -9358, -4748, -3577, 9404, 1803, 4759], 87965) == 85965677\nassert solution.kConcatenationMaxSum([-1224, -1184, 9781, 9725, 2494, 6056, 7146, -6245, 4659, 644, 5025, -7472, 2412, -6831, 6203, -4101, 4962, 8685, 340, -3855, 9305, 2499, 3504, 471, -3472, -4407, 2537, 4573, 2760, 9011, 3080, -641, -2831, -6249, 9333, 8941, -879, 4083, -8718, -5003, -673, 8149, -3629, -1899, 6025, -8427, -2750, 6978, 8116, -3194, -3555, 6526, 9426, -1025, -595, 9145, 4553, -7452, 7187, -8962, 2075, 9611], 31955) == 219372772\nassert solution.kConcatenationMaxSum([4032, -9066, -2088, 4112, -5622, -2792, -1769, 3175, 5446, -5969, 8142, 733, 3536, 4654, 3061, 774, -4971, 6087, -3192, 8808, -3091, 202, -8274, 3264, 1067, -7484, -9007, 3498, 412, -6241, -6202, -1730, 4252, -9638, -6042, -8900, 7961, 653, 2824, -4945, 799, 5505, -9783, -5564, 2139, -5676, 2934, 8615, 7509, -2343, 561, -3026, -1629, 7913, 9792, 4452], 20293) == 51869\nassert solution.kConcatenationMaxSum([-2316, -9896, 7957, -3347, 99, -70, -1145, -1963, 3106, -8427, 68, 6391, -5105, 7511, 3075, 3343, -9392, 2313, 183, -3624], 75534) == 15283\nassert solution.kConcatenationMaxSum([9301, -2703, -33, 6287, 5031, -9053, 4316, 6208, 2524, 4452, 829, 5002, -5172, -4719, -611, -5108, -6294, -1642, 6538, 4430, 4933, -1072, -3569, 1444, -8351, -8509, -2142, -3391, -9803, 8273, -4893, 6446, -4758, 5346, -7393, 53, -705, -1405, -3739, -5907, -268, 3526, -8917, -9745, -2997, 3987, -5431, -1682, 7969, -6892, -2091, -4824, 9057, -9513, 9631, 1177, 9982, -7079, 7264, 7379, -2504, 6522, -2795, 4209, 8994, 8746, 8424, 980, 3870, -8396, 2168, -7125, -396, 3353, -8079, -3633, 7194, 1525, -206, -5981, 6356, 7241, -5132, -1727, 7553, 9990, 3852, 6595], 77099) == 511315994\nassert solution.kConcatenationMaxSum([-2317, -7511, -3260, -2369, 1576, 5379, -8953, 4529, -7385, 9097, 5674, -175, 6843, -4561, -8252, -5913, 2886, 5468, -7298, -9825, -2242, -7645, 3529, 5978, 5624, 6141, 5436, -333, 6563, 4472, 8333, -5246, -4714, 8110, -1798, 9059, 7863, 2278, -6343, 4623, 5414], 5732) == 164745274\nassert solution.kConcatenationMaxSum([3532, 9903, -9189, 3154, 8301, -6588, 5719, 6854, 8092, 1054, -268, 2024, -5491, -5550, -5152, 6063, 7930, 9129, -9114, -9425, 9837, 1728, -2906, 2762, 978, 7890, 6859, 7738, 6140, -5602, 9126, 9233, -3850, -5359, 3119, -1662, 7223, 7086, -4144, -9257, -6299, -1750, 4798, -1888, 1753, -4488, 9828, 9542, 6580, -393, 2872, 2536, 3612, -5863, -5899, -6492, -5026, 3358, 4132, -1855, 29, 607, -2774, -2366, 9987, -9685, -4491, -1478, -2970, 9977, 7157, -9427, -7354, -6186, -7127, 4430, -5422, -7889, -9587, 6643, -6643, -9393, -1770, -8191, -6974, 3405, -3977, -6687], 27277) == 94620\nassert solution.kConcatenationMaxSum([-1256, 1632, 1225, -7098, -9310, 7880, -787, 6737, -6102, -3589, -8488, 5911, -7446, -6531, 636, 4606, -2821, 3372, -9902, -4384, 9353, 7552, 9931, 1554, -1456, -600, 2343, -5351, 5929, 5936, 8106, 6931, 4543, 6042, 6103], 66596) == 77897497",
  "inefficient_solution": "class Solution:\n    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:\n        arr1 = []\n        for i in range(k):\n            arr1 += arr\n        arr2 = [0] * len(arr1)\n        for i in range(len(arr1)):\n            arr2[i] = arr1[i]\n        arr3 = [[0] * len(arr1) for _ in range(len(arr1))]\n        arr4 = [[0] * len(arr1) for _ in range(len(arr1))]\n        ans = 0\n        mod = 10**9 + 7\n        for i in range(len(arr1)):\n            for j in range(len(arr1)):\n                arr3[i][j] = arr1[i] + arr1[j]\n                arr4[i][j] = arr3[i][j]\n        for i in range(len(arr1)):\n            sum = 0\n            max_sum = 0\n            min_sum = 0\n            for j in range(len(arr1)):\n                sum += arr1[j]\n                max_sum = max(max_sum, sum)\n                min_sum = min(min_sum, sum)\n                ans = max(ans, sum - min_sum)\n        for i in range(len(arr1)):\n            sum = 0\n            max_sum = 0\n            min_sum = 0\n            for j in range(len(arr1)):\n                sum += arr1[j]\n                max_sum = max(max_sum, sum)\n                min_sum = min(min_sum, sum)\n                ans = max(ans, max_sum)\n        if k == 1:\n            return ans % mod\n        sum = 0\n        max_sum = 0\n        min_sum = 0\n        for i in range(len(arr1)):\n            sum += arr1[i]\n            max_sum = max(max_sum, sum)\n            min_sum = min(min_sum, sum)\n        ans = max(ans, max_sum)\n        sum = max_sum\n        for i in range(len(arr1)):\n            sum += arr1[i]\n        max_sum = max(max_sum, sum)\n        min_sum = min(min_sum, sum)\n        ans = max(ans, max_sum)\n        if sum > 0:\n            ans = max(ans, (k - 2) * sum + max_sum)\n        return ans % mod",
  "is_python": true
}