{
  "problem_idx": 361,
  "task_name": "Bomb Enemy",
  "markdown_description": "\nGiven an `m x n` matrix `grid` where each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'`, return *the maximum enemies you can kill using one bomb*. You can only place the bomb in an empty cell.\n\n\nThe bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0361.Bomb%20Enemy/images/bomb1-grid.jpg)\n\n```\n\n**Input:** grid = [[\"0\",\"E\",\"0\",\"0\"],[\"E\",\"0\",\"W\",\"E\"],[\"0\",\"E\",\"0\",\"0\"]]\n**Output:** 3\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0361.Bomb%20Enemy/images/bomb2-grid.jpg)\n\n```\n\n**Input:** grid = [[\"W\",\"W\",\"W\"],[\"0\",\"0\",\"0\"],[\"E\",\"E\",\"E\"]]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 500`\n* `grid[i][j]` is either `'W'`, `'E'`, or `'0'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxKilledEnemies(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        g = [[0] * n for _ in range(m)]\n        for i in range(m):\n            t = 0\n            for j in range(n):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n            t = 0\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n        for j in range(n):\n            t = 0\n            for i in range(m):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n            t = 0\n            for i in range(m - 1, -1, -1):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n        return max(\n            [g[i][j] for i in range(m) for j in range(n) if grid[i][j] == '0'],\n            default=0,\n        )\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxKilledEnemies(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        g = [[0] * n for _ in range(m)]\n        for i in range(m):\n            t = 0\n            for j in range(n):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n            t = 0\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n        for j in range(n):\n            t = 0\n            for i in range(m):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n            t = 0\n            for i in range(m - 1, -1, -1):\n                if grid[i][j] == 'W':\n                    t = 0\n                elif grid[i][j] == 'E':\n                    t += 1\n                g[i][j] += t\n        return max(\n            [g[i][j] for i in range(m) for j in range(n) if grid[i][j] == '0'],\n            default=0,\n        )\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random m and n\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    \n    # Generate random grid\n    grid = []\n    for _ in range(m):\n        row = [random.choice(['W', 'E', '0']) for _ in range(n)]\n        grid.append(row)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxKilledEnemies(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxKilledEnemies(grid) == expected_result\n        print(f\"assert solution.maxKilledEnemies({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxKilledEnemies({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxKilledEnemies([['0', 'W', 'E', 'W', 'E', 'W', '0', 'E'], ['W', '0', 'E', '0', '0', 'W', 'W', 'W'], ['W', 'E', '0', 'E', '0', 'E', 'W', 'W'], ['W', 'W', '0', 'E', 'E', '0', 'W', 'W']]) == 5\nassert solution.maxKilledEnemies([['W', 'W', '0', 'E', 'W', 'W', '0', 'W'], ['0', 'W', '0', '0', '0', 'E', '0', 'W']]) == 2\nassert solution.maxKilledEnemies([['W', 'E', 'E', 'E', 'E', 'E', 'W'], ['0', 'W', '0', 'E', '0', 'E', 'W'], ['E', 'E', '0', 'E', 'W', 'W', 'E'], ['W', 'E', 'E', 'E', 'E', 'W', 'W'], ['0', '0', '0', '0', 'E', 'W', 'E'], ['0', 'W', 'W', 'E', 'E', '0', '0'], ['0', 'E', 'E', 'W', 'W', 'W', 'W'], ['E', 'E', 'W', '0', '0', 'W', 'W']]) == 6\nassert solution.maxKilledEnemies([['W', 'E', '0'], ['E', 'W', '0'], ['0', '0', 'E'], ['W', 'W', '0'], ['W', '0', '0'], ['W', 'W', '0'], ['E', '0', 'E']]) == 3\nassert solution.maxKilledEnemies([['E', '0'], ['0', '0'], ['W', '0'], ['W', 'W'], ['E', 'W'], ['W', 'W']]) == 1\nassert solution.maxKilledEnemies([['0', '0', 'E', 'W', 'E', 'E', 'E', 'E', 'E'], ['0', '0', 'E', 'W', 'W', '0', 'E', 'W', 'E'], ['E', 'E', '0', 'W', 'W', 'E', 'E', '0', 'W'], ['0', 'W', 'W', 'E', 'W', 'W', '0', 'W', '0']]) == 4\nassert solution.maxKilledEnemies([['E'], ['E'], ['W'], ['E'], ['0']]) == 1\nassert solution.maxKilledEnemies([['W', 'W', 'E', 'W', 'W', 'E', 'W'], ['0', 'E', '0', '0', '0', '0', '0'], ['W', '0', 'W', 'W', '0', 'W', 'W'], ['E', 'W', 'E', 'W', 'E', 'E', '0']]) == 2\nassert solution.maxKilledEnemies([['E', 'W', 'E', 'W', '0', 'W', 'E', '0', 'W', 'W'], ['W', '0', 'E', 'W', '0', 'E', 'W', 'W', '0', '0'], ['0', 'E', 'W', 'W', '0', 'W', '0', '0', '0', '0'], ['W', '0', 'W', '0', 'E', 'E', 'E', 'W', 'E', 'W'], ['W', '0', 'W', 'E', 'W', 'E', 'W', '0', 'W', '0'], ['W', 'E', '0', '0', '0', '0', 'W', 'W', '0', 'W'], ['E', 'W', 'E', 'W', '0', 'E', '0', 'E', 'W', '0'], ['W', 'E', 'W', 'W', 'W', 'W', 'W', '0', 'E', '0'], ['0', 'E', '0', '0', '0', 'W', 'E', 'E', 'W', 'W'], ['W', '0', 'E', '0', 'E', 'E', '0', '0', 'W', '0']]) == 5\nassert solution.maxKilledEnemies([['0', 'E', 'W', '0', '0', 'E'], ['0', 'W', 'E', 'W', '0', 'E'], ['E', 'E', 'E', 'E', '0', '0'], ['W', '0', 'E', '0', 'E', 'W'], ['W', 'E', 'W', 'E', 'W', 'E'], ['0', 'E', 'W', 'E', 'E', '0']]) == 6\nassert solution.maxKilledEnemies([['W', 'E', 'W', 'E', '0', 'W', '0'], ['W', 'W', 'W', 'E', '0', '0', 'E'], ['0', 'W', 'W', 'E', 'W', '0', '0'], ['W', '0', '0', 'E', 'W', 'W', '0'], ['0', '0', 'E', '0', '0', '0', 'E'], ['E', '0', '0', 'E', 'E', '0', '0'], ['0', '0', 'W', 'E', 'E', 'E', 'E'], ['0', 'E', 'E', 'W', 'W', '0', '0'], ['E', 'W', '0', '0', 'E', '0', 'W']]) == 8\nassert solution.maxKilledEnemies([['0', '0', 'E', 'E', '0', 'E'], ['E', '0', '0', 'W', 'E', '0'], ['W', '0', '0', 'W', 'W', 'W'], ['W', '0', 'E', '0', 'E', '0'], ['0', 'W', '0', 'W', '0', 'W'], ['W', 'E', 'E', 'E', 'E', 'W'], ['W', '0', 'W', 'W', 'W', '0']]) == 4\nassert solution.maxKilledEnemies([['W', 'E', '0', 'W', '0', 'E', 'E', '0', 'W'], ['0', '0', '0', 'W', 'W', '0', 'W', 'E', '0'], ['0', '0', '0', 'W', 'W', 'E', 'E', 'E', 'E'], ['0', 'W', 'E', '0', '0', '0', '0', '0', 'W'], ['W', '0', 'E', 'W', 'W', '0', '0', 'W', 'W'], ['0', '0', '0', 'E', '0', 'W', 'W', 'E', '0'], ['0', 'W', 'W', 'E', 'W', 'W', 'W', '0', '0'], ['E', 'W', 'E', '0', '0', 'E', 'E', '0', 'E']]) == 6\nassert solution.maxKilledEnemies([['W', 'W', 'E', 'E', '0', 'W'], ['0', 'W', '0', '0', '0', '0'], ['W', 'E', 'E', 'E', 'W', '0'], ['E', 'W', 'E', 'E', '0', 'E'], ['0', 'E', 'W', 'E', 'W', 'E'], ['W', 'W', '0', 'W', 'E', 'E'], ['W', '0', 'W', 'W', '0', 'E']]) == 4\nassert solution.maxKilledEnemies([['E', 'W', 'W', '0', '0', 'E', 'W', '0', 'E', 'W'], ['E', 'E', 'W', 'E', 'W', 'W', 'E', 'E', 'E', 'W'], ['0', 'E', 'E', '0', 'E', '0', '0', 'E', 'E', 'E'], ['E', 'W', 'E', 'E', 'W', 'W', '0', '0', 'W', 'W'], ['0', 'E', 'E', 'W', 'E', '0', 'W', 'E', 'E', 'E']]) == 9\nassert solution.maxKilledEnemies([['E', 'E', 'W', 'E', 'W', 'W', 'W'], ['0', 'E', '0', '0', 'E', 'E', 'E']]) == 5\nassert solution.maxKilledEnemies([['0', '0', '0', '0', 'W', 'E', '0', 'E', '0'], ['W', '0', '0', '0', 'E', '0', '0', 'E', '0'], ['0', 'E', '0', 'W', '0', '0', 'E', '0', '0'], ['W', 'W', 'W', 'E', 'W', 'W', 'W', '0', '0'], ['E', '0', 'W', 'E', 'E', 'W', 'W', 'E', '0'], ['0', 'E', '0', '0', 'E', '0', 'E', 'E', '0']]) == 6\nassert solution.maxKilledEnemies([['W', 'E', 'W'], ['W', 'E', 'W'], ['E', 'E', 'E'], ['E', 'E', '0'], ['E', 'E', '0'], ['E', 'W', '0'], ['0', 'W', 'W'], ['0', 'W', 'W'], ['E', 'W', '0']]) == 5\nassert solution.maxKilledEnemies([['W', 'E'], ['W', 'W'], ['W', '0'], ['E', 'E'], ['0', 'E']]) == 2\nassert solution.maxKilledEnemies([['E', '0', '0'], ['W', 'E', 'W'], ['E', '0', 'W'], ['W', '0', 'W'], ['E', '0', '0'], ['E', 'E', '0'], ['W', 'W', 'E'], ['W', 'E', 'W']]) == 3\nassert solution.maxKilledEnemies([['W', 'E', 'W']]) == 0\nassert solution.maxKilledEnemies([['E', 'W', 'E', 'E'], ['E', '0', '0', 'E'], ['W', 'E', 'W', 'E']]) == 3\nassert solution.maxKilledEnemies([['0', 'W', '0', '0', 'W', 'E', 'E', '0']]) == 2\nassert solution.maxKilledEnemies([['0', 'W', '0', '0', 'W', 'W'], ['E', 'W', '0', '0', '0', '0']]) == 1\nassert solution.maxKilledEnemies([['E', 'E', 'E', 'W', 'W', 'W', 'W', 'W'], ['W', 'W', 'E', '0', 'W', '0', '0', 'E'], ['0', '0', 'W', 'E', 'E', 'W', 'E', 'E'], ['0', 'W', '0', 'W', 'E', 'E', 'E', 'E'], ['E', 'W', '0', 'E', '0', 'W', 'E', '0'], ['E', '0', 'E', 'E', 'W', '0', 'E', 'W']]) == 5\nassert solution.maxKilledEnemies([['0', 'W', 'E', 'W', 'W', 'W', '0', 'W', 'E'], ['0', 'E', 'W', 'E', 'W', 'W', '0', 'W', 'E'], ['W', '0', 'E', 'W', 'W', '0', '0', 'E', 'W'], ['E', '0', 'E', 'W', 'E', 'E', 'E', 'W', '0']]) == 3\nassert solution.maxKilledEnemies([['W', 'E', 'E', 'E', 'W', '0', 'E', 'W', '0'], ['0', 'E', 'W', 'E', '0', 'E', '0', 'W', '0']]) == 3\nassert solution.maxKilledEnemies([['E', 'E', '0', 'W', 'E', 'E', 'W', '0', 'W'], ['0', 'W', 'W', '0', 'E', '0', 'W', '0', '0'], ['0', 'W', 'E', 'W', '0', 'E', 'W', 'W', 'W'], ['0', 'W', 'E', 'E', 'W', 'E', 'E', '0', '0'], ['W', 'W', '0', '0', 'W', '0', 'E', 'E', 'W'], ['E', 'W', 'E', 'W', '0', 'E', '0', 'W', 'W'], ['0', 'E', 'W', 'W', 'W', '0', 'W', 'E', 'W']]) == 6\nassert solution.maxKilledEnemies([['W', 'E', 'E', 'E'], ['E', 'W', 'W', 'E'], ['0', 'W', 'E', 'E'], ['E', '0', '0', 'E'], ['W', 'W', '0', 'E'], ['0', 'E', '0', 'E'], ['W', 'E', '0', '0'], ['E', 'W', 'W', 'E'], ['W', '0', 'E', 'E']]) == 9\nassert solution.maxKilledEnemies([['W', '0', '0', 'W', 'W', 'E', 'W', 'W', 'E'], ['W', '0', '0', 'E', 'E', 'W', '0', '0', '0'], ['E', '0', 'E', 'E', '0', '0', 'E', 'W', '0'], ['0', '0', 'E', 'W', '0', 'E', '0', '0', 'E'], ['0', '0', '0', '0', '0', '0', 'W', 'E', 'W'], ['W', 'W', 'W', 'E', 'E', 'W', 'E', '0', 'W'], ['W', '0', 'W', 'E', '0', '0', 'W', 'W', '0'], ['W', '0', 'E', 'W', 'W', 'W', 'W', '0', 'E']]) == 6\nassert solution.maxKilledEnemies([['0', 'W', '0', 'W'], ['0', 'W', 'E', 'E'], ['W', '0', 'E', 'W'], ['W', 'E', 'E', '0'], ['0', 'E', '0', 'W']]) == 4\nassert solution.maxKilledEnemies([['E', 'W', 'W', '0', 'W', 'E', 'E'], ['E', '0', '0', '0', 'E', 'E', 'W'], ['W', 'E', '0', 'W', 'W', '0', 'W'], ['E', 'W', 'E', 'E', 'W', 'W', 'W'], ['E', '0', '0', 'E', '0', 'W', 'W'], ['W', '0', 'W', 'E', '0', 'E', '0'], ['E', '0', 'E', 'E', 'W', 'W', 'E'], ['W', 'E', 'E', '0', 'W', 'E', 'W']]) == 6\nassert solution.maxKilledEnemies([['W', '0', 'W', 'E', '0', '0', '0', 'W', 'W'], ['W', '0', '0', '0', 'W', 'E', 'W', '0', '0'], ['0', '0', 'E', 'E', 'W', 'E', 'E', '0', 'E'], ['E', '0', '0', '0', 'W', '0', '0', 'W', '0'], ['W', 'E', '0', 'E', '0', 'E', 'E', 'E', 'W'], ['E', 'W', '0', 'E', 'W', 'W', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', '0', 'W', '0', 'W', 'E'], ['0', '0', 'E', '0', 'W', 'W', '0', '0', 'W'], ['E', 'E', 'W', 'W', 'W', '0', 'W', 'W', '0']]) == 8\nassert solution.maxKilledEnemies([['E'], ['W'], ['E'], ['E'], ['E'], ['W'], ['0'], ['W'], ['0'], ['W']]) == 0\nassert solution.maxKilledEnemies([['0', '0', 'E', 'W', 'E', 'W', '0', 'W', 'E', '0'], ['E', 'E', 'E', '0', 'E', 'E', 'E', 'W', '0', 'E'], ['E', '0', 'W', 'W', 'E', 'W', 'E', 'E', 'W', 'W'], ['W', 'W', '0', 'W', 'W', 'E', 'E', '0', 'W', 'E'], ['0', 'W', 'W', '0', '0', 'E', '0', 'E', 'W', 'E'], ['W', 'W', '0', 'E', 'W', '0', 'E', 'W', '0', 'W'], ['W', '0', '0', '0', '0', '0', '0', 'W', '0', '0'], ['0', 'W', '0', 'W', 'W', 'E', 'W', 'W', 'W', 'W']]) == 6\nassert solution.maxKilledEnemies([['W', '0', 'W', '0', 'W', '0', 'E', 'E', '0', 'W'], ['E', 'W', 'E', 'E', 'W', 'E', '0', '0', '0', 'W'], ['W', 'E', '0', '0', 'W', '0', 'W', 'E', '0', 'E'], ['E', '0', 'E', '0', 'W', '0', 'W', 'W', '0', 'E'], ['E', 'E', 'W', 'E', '0', 'E', 'W', 'W', '0', '0']]) == 4\nassert solution.maxKilledEnemies([['0', 'W', '0', 'E', 'W', 'E', 'E', 'W', '0', 'E'], ['E', 'W', 'E', '0', 'E', '0', '0', '0', '0', 'E'], ['0', '0', 'E', 'E', 'W', 'E', 'W', 'E', '0', '0'], ['E', 'E', 'W', 'E', 'E', 'W', 'E', 'W', 'E', 'E'], ['0', 'W', 'W', 'E', 'E', 'W', '0', '0', '0', 'E'], ['0', 'E', 'W', 'W', 'W', '0', 'W', 'W', 'W', 'W'], ['E', 'E', 'E', '0', 'E', 'E', 'W', 'E', '0', 'W']]) == 7\nassert solution.maxKilledEnemies([['E', 'W', 'E', 'E', '0', 'E', 'W']]) == 3\nassert solution.maxKilledEnemies([['0'], ['E'], ['W'], ['E'], ['0'], ['E'], ['W'], ['E']]) == 2\nassert solution.maxKilledEnemies([['W', 'W', 'W'], ['W', 'W', 'W'], ['W', 'W', 'W'], ['W', '0', 'W']]) == 0\nassert solution.maxKilledEnemies([['E', 'E', 'E'], ['W', 'W', 'W'], ['E', 'E', 'E'], ['W', '0', '0'], ['0', '0', 'E'], ['E', 'E', 'E'], ['E', 'W', 'E']]) == 4\nassert solution.maxKilledEnemies([['E', 'E', '0', '0', '0', 'W', '0', 'E'], ['E', 'E', '0', 'E', 'E', '0', 'E', 'E'], ['E', 'E', '0', 'W', '0', 'E', '0', 'W'], ['0', 'E', 'W', 'W', 'W', '0', 'W', 'E'], ['E', 'W', 'W', 'W', 'E', '0', 'W', 'E'], ['E', 'E', 'E', 'W', '0', 'W', 'W', 'W'], ['W', 'E', '0', 'E', 'W', 'W', '0', 'E']]) == 7\nassert solution.maxKilledEnemies([['E', 'E', 'W', 'W', 'E', '0', 'E', 'W'], ['E', 'W', 'E', '0', 'E', 'W', '0', 'W'], ['E', 'E', '0', 'W', '0', '0', '0', 'W'], ['W', 'E', '0', 'E', 'E', 'W', '0', '0']]) == 4\nassert solution.maxKilledEnemies([['W', 'E', '0', 'E', '0', 'W'], ['0', 'E', 'W', 'W', '0', '0'], ['0', 'E', 'E', '0', '0', 'E'], ['E', 'E', 'W', 'W', '0', 'E'], ['0', 'E', 'E', '0', '0', '0'], ['E', 'E', 'W', 'W', 'W', 'E'], ['E', 'E', '0', 'E', 'E', 'W'], ['0', '0', 'W', 'W', 'W', '0']]) == 7\nassert solution.maxKilledEnemies([['E', '0', '0', 'E', 'E', 'E', 'W'], ['W', 'E', 'W', 'E', '0', '0', 'E']]) == 5\nassert solution.maxKilledEnemies([['0', '0', 'W', 'E', 'E', 'E', 'W', 'W', 'W', '0'], ['E', '0', 'E', 'E', '0', 'W', 'W', 'E', 'W', '0'], ['E', 'E', '0', 'W', 'W', '0', 'E', '0', 'E', '0'], ['E', '0', 'E', 'W', 'W', 'E', 'W', 'W', 'E', 'W'], ['W', 'E', 'E', 'W', 'W', '0', '0', 'W', 'E', '0'], ['W', 'W', 'E', 'W', 'E', 'W', '0', 'E', '0', '0']]) == 6\nassert solution.maxKilledEnemies([['W', 'W', 'E', '0', '0', '0', '0', 'E', 'W'], ['W', '0', 'W', 'W', '0', '0', 'W', 'E', '0'], ['E', '0', 'E', 'E', 'E', 'W', 'W', 'W', '0'], ['E', '0', '0', '0', 'E', 'W', '0', 'W', 'E'], ['E', 'E', '0', 'E', 'E', 'E', 'E', 'W', '0']]) == 7\nassert solution.maxKilledEnemies([['E', 'E', '0', '0', 'W', '0', 'W', 'W', 'E'], ['W', '0', 'E', 'E', '0', 'E', 'W', 'E', 'W']]) == 4\nassert solution.maxKilledEnemies([['W', 'E', '0', 'W', '0', '0', 'E', 'E'], ['0', '0', 'W', 'W', 'W', 'E', '0', 'W'], ['E', 'W', '0', 'W', 'W', 'E', 'E', 'E'], ['W', 'W', '0', 'E', 'W', 'W', 'E', '0'], ['0', '0', 'W', 'W', 'W', 'E', '0', 'E'], ['E', '0', 'E', 'E', 'E', 'E', 'W', 'W'], ['E', 'W', '0', 'E', '0', '0', 'W', '0'], ['0', 'E', 'W', '0', '0', 'E', '0', 'E']]) == 5\nassert solution.maxKilledEnemies([['W', '0', '0', 'W', '0', 'E', '0', '0', 'W', '0'], ['0', 'W', '0', 'W', 'W', 'W', 'E', '0', '0', 'W'], ['0', 'W', 'E', 'E', 'E', 'E', '0', '0', '0', '0'], ['W', 'E', '0', '0', 'W', '0', 'E', 'W', 'E', 'W']]) == 6\nassert solution.maxKilledEnemies([['0', 'E', 'W', '0', '0'], ['W', '0', 'E', '0', '0'], ['0', 'E', '0', 'W', 'W'], ['0', '0', 'E', 'E', 'W'], ['W', '0', 'E', '0', '0'], ['W', '0', 'W', '0', '0'], ['0', '0', 'E', 'E', '0'], ['W', '0', 'W', 'E', '0']]) == 4\nassert solution.maxKilledEnemies([['E', '0', 'E', 'W', '0', '0', 'E'], ['E', 'E', 'E', 'W', '0', 'W', 'W'], ['0', '0', 'W', '0', 'W', '0', 'E'], ['E', 'E', 'W', 'E', 'W', '0', '0']]) == 4\nassert solution.maxKilledEnemies([['W', 'E', 'E'], ['E', 'W', 'E'], ['W', '0', '0'], ['E', 'E', '0']]) == 4\nassert solution.maxKilledEnemies([['0', 'E', 'W', 'W', 'W', '0', 'W', 'E', '0'], ['E', 'E', '0', 'E', 'E', '0', 'W', 'E', 'E'], ['0', 'E', '0', '0', '0', 'E', 'E', '0', 'W'], ['0', 'E', 'W', 'W', 'W', 'E', '0', 'E', '0'], ['0', 'E', '0', 'W', '0', 'W', 'E', 'E', '0'], ['0', '0', 'E', '0', 'W', '0', 'E', 'E', 'E'], ['W', 'W', 'W', 'W', '0', 'W', '0', 'W', '0']]) == 8\nassert solution.maxKilledEnemies([['E', 'E', 'E', '0'], ['W', 'W', 'W', 'W'], ['W', 'E', 'W', '0'], ['0', 'W', 'W', 'E']]) == 3\nassert solution.maxKilledEnemies([['E', 'E', '0', 'W', 'W', 'W', 'E', '0', 'E', '0']]) == 2\nassert solution.maxKilledEnemies([['W', 'E'], ['0', '0'], ['E', 'W'], ['0', 'W'], ['0', '0'], ['E', 'E'], ['W', '0'], ['E', 'W']]) == 2\nassert solution.maxKilledEnemies([['E', 'W', 'W', 'W', 'E', '0', '0', 'E'], ['W', '0', '0', '0', '0', '0', 'E', '0'], ['0', 'W', '0', 'W', 'E', 'W', '0', 'W']]) == 3\nassert solution.maxKilledEnemies([['E', 'W', '0', '0'], ['0', 'W', 'E', 'W'], ['0', '0', 'W', 'W'], ['W', '0', 'W', '0'], ['E', 'E', '0', 'W'], ['0', 'E', '0', '0']]) == 2\nassert solution.maxKilledEnemies([['W', 'W', 'E', '0', '0', '0', 'E'], ['W', '0', 'E', '0', 'E', 'E', 'E']]) == 4\nassert solution.maxKilledEnemies([['0', '0', 'E', 'E', 'E', 'W', '0', 'E', '0'], ['E', 'W', 'W', '0', '0', 'W', 'W', 'E', 'W'], ['W', 'E', 'W', '0', 'E', 'E', 'W', 'W', 'E'], ['E', 'E', 'E', 'E', 'E', '0', 'W', 'W', 'E'], ['W', '0', '0', '0', '0', '0', 'W', 'W', 'W'], ['W', 'E', '0', 'E', 'W', '0', 'E', 'E', 'W'], ['W', 'W', 'W', 'W', 'E', '0', 'W', 'W', 'W'], ['E', 'E', 'W', 'W', 'W', 'E', 'E', 'E', 'W'], ['0', '0', '0', 'E', '0', 'E', 'E', 'E', 'E']]) == 8\nassert solution.maxKilledEnemies([['0', '0', 'W', 'E', '0', '0', '0', 'E', 'E', 'W'], ['0', 'E', 'E', 'E', '0', 'E', 'E', '0', 'W', 'E'], ['E', 'E', '0', 'E', 'W', 'E', 'W', 'W', 'E', '0'], ['W', 'W', '0', 'W', '0', 'W', 'W', 'E', 'E', 'W'], ['W', '0', '0', 'E', 'W', 'E', 'W', 'W', '0', 'E'], ['E', '0', '0', 'E', '0', 'E', 'E', 'W', 'E', 'W'], ['W', 'E', '0', 'E', '0', 'E', 'E', 'E', 'E', 'W'], ['W', 'W', 'W', 'E', 'E', '0', '0', 'W', 'E', 'W'], ['W', 'W', 'W', '0', 'E', '0', 'W', 'E', 'W', 'W'], ['0', '0', '0', 'E', '0', 'W', 'E', '0', 'E', 'E']]) == 8\nassert solution.maxKilledEnemies([['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'W', '0']]) == 1\nassert solution.maxKilledEnemies([['E', 'W'], ['W', 'W'], ['E', 'W'], ['0', 'W'], ['0', 'W']]) == 1\nassert solution.maxKilledEnemies([['E', 'E', 'E', 'W', 'W', 'E', 'E'], ['E', 'W', 'W', '0', 'W', 'E', 'W'], ['E', '0', 'W', 'W', '0', '0', '0'], ['W', '0', '0', '0', '0', 'E', '0'], ['E', 'W', '0', '0', '0', '0', 'W'], ['0', '0', 'W', '0', 'W', 'E', 'W'], ['E', 'W', 'W', '0', 'W', 'W', '0']]) == 4\nassert solution.maxKilledEnemies([['0', '0', 'E', '0', 'W'], ['W', '0', '0', 'E', 'W'], ['E', '0', 'W', 'W', '0'], ['0', '0', '0', '0', 'E'], ['E', '0', 'E', 'W', 'W'], ['0', 'W', '0', 'W', 'E'], ['W', '0', '0', '0', 'W'], ['W', 'E', '0', 'W', '0']]) == 3\nassert solution.maxKilledEnemies([['E'], ['E'], ['E'], ['E']]) == 0\nassert solution.maxKilledEnemies([['W', 'E', '0', 'W', 'W', 'E', 'W']]) == 1\nassert solution.maxKilledEnemies([['W', '0', 'W']]) == 0\nassert solution.maxKilledEnemies([['W', 'W', 'E', '0', 'W', 'W', 'E', 'E', 'W'], ['0', 'W', 'W', 'W', 'W', '0', '0', 'E', '0'], ['E', 'W', '0', 'W', '0', 'E', 'E', 'W', 'W']]) == 3\nassert solution.maxKilledEnemies([['W', 'E', '0', '0', 'W', 'E', 'E', 'E'], ['W', '0', 'E', 'W', '0', 'E', 'E', 'E'], ['W', 'E', '0', 'E', 'E', 'W', '0', '0'], ['0', 'E', 'E', 'W', 'W', 'W', '0', 'E']]) == 5\nassert solution.maxKilledEnemies([['W', 'E']]) == 0\nassert solution.maxKilledEnemies([['0', '0', 'W', 'W'], ['0', 'W', '0', 'W']]) == 0\nassert solution.maxKilledEnemies([['W', 'W'], ['0', 'W'], ['E', '0'], ['0', 'E'], ['W', 'W']]) == 2\nassert solution.maxKilledEnemies([['0', '0'], ['W', '0'], ['W', 'W']]) == 0\nassert solution.maxKilledEnemies([['0', '0'], ['E', '0'], ['E', 'W'], ['0', 'E'], ['W', 'W']]) == 3\nassert solution.maxKilledEnemies([['W', 'W', 'E', 'W', 'E'], ['W', 'E', '0', 'W', '0'], ['0', '0', 'E', 'E', 'E'], ['W', 'W', '0', 'E', 'E'], ['0', 'W', 'E', '0', 'E']]) == 5\nassert solution.maxKilledEnemies([['0'], ['0'], ['0'], ['0']]) == 0\nassert solution.maxKilledEnemies([['0', 'W', '0']]) == 0\nassert solution.maxKilledEnemies([['0', '0', 'W', '0', 'W'], ['E', 'W', '0', 'E', 'W'], ['E', 'W', 'E', 'E', 'E'], ['W', 'W', '0', 'W', '0'], ['0', 'E', 'E', 'E', 'E'], ['W', 'E', 'E', 'W', 'W']]) == 4\nassert solution.maxKilledEnemies([['W', 'E', 'W', 'W'], ['0', 'E', 'W', 'W']]) == 1\nassert solution.maxKilledEnemies([['E', 'W', 'W'], ['W', 'W', '0'], ['W', 'W', 'E']]) == 1\nassert solution.maxKilledEnemies([['0', 'E'], ['W', 'E']]) == 1\nassert solution.maxKilledEnemies([['E', 'E', 'W', 'E', 'W', 'W', 'E', 'W', 'E'], ['W', 'W', 'W', '0', '0', '0', '0', 'E', 'E'], ['E', '0', '0', 'W', 'W', '0', 'W', '0', 'W'], ['W', '0', 'W', 'E', 'W', 'W', 'W', 'W', 'W'], ['E', '0', '0', '0', 'E', 'E', 'E', '0', 'E'], ['W', '0', '0', 'W', '0', '0', 'E', '0', 'W'], ['E', '0', 'E', 'E', 'W', 'E', 'E', 'E', 'E'], ['W', 'E', '0', 'W', '0', 'W', 'W', 'E', '0'], ['W', 'E', 'E', 'E', 'E', 'W', 'E', '0', 'E'], ['0', 'E', '0', 'W', 'W', '0', 'W', '0', '0']]) == 8\nassert solution.maxKilledEnemies([['W', 'E', 'W', 'W', 'W', '0', 'E'], ['0', '0', 'E', 'E', '0', 'E', 'E'], ['0', 'E', '0', 'E', 'W', '0', '0'], ['E', '0', 'E', 'E', '0', '0', '0']]) == 6\nassert solution.maxKilledEnemies([['E', 'E', 'E', 'W', '0', 'E'], ['E', 'E', '0', '0', 'E', 'W'], ['W', '0', 'W', '0', 'E', 'W'], ['E', 'E', 'E', 'E', 'W', '0'], ['0', 'E', 'E', '0', 'E', 'E'], ['W', '0', 'E', 'W', '0', 'W'], ['W', 'E', '0', '0', 'E', '0'], ['E', 'E', 'E', '0', 'W', 'W'], ['0', 'W', 'W', '0', 'E', 'E']]) == 7\nassert solution.maxKilledEnemies([['E', 'E', 'E', 'E'], ['E', 'E', '0', 'W'], ['W', 'E', 'E', '0'], ['E', 'E', '0', '0'], ['E', '0', 'E', 'E'], ['W', 'W', 'W', '0'], ['0', 'W', 'W', '0'], ['0', 'W', '0', 'E'], ['W', '0', '0', '0'], ['W', 'W', 'E', 'W']]) == 7\nassert solution.maxKilledEnemies([['E', 'W', '0', '0'], ['E', 'E', '0', 'W'], ['E', 'W', 'E', '0'], ['W', 'W', 'W', 'E']]) == 3\nassert solution.maxKilledEnemies([['E', '0', 'W', '0'], ['E', 'W', 'W', 'W'], ['E', 'W', '0', 'W'], ['W', '0', '0', 'W'], ['E', 'E', 'W', '0']]) == 1\nassert solution.maxKilledEnemies([['0', 'E', '0', '0'], ['0', 'W', 'W', 'W']]) == 1\nassert solution.maxKilledEnemies([['E', 'E', 'W', 'E', 'E', 'E', '0', '0', 'E'], ['W', 'W', 'W', 'E', 'W', 'E', '0', 'W', '0']]) == 4\nassert solution.maxKilledEnemies([['0', 'E', '0', '0', 'W', '0', 'E', 'W', '0', 'W'], ['0', 'W', 'E', 'E', 'W', 'W', 'W', '0', '0', 'W'], ['E', '0', 'W', 'W', 'E', 'W', '0', 'E', 'E', '0'], ['W', '0', '0', '0', 'E', '0', '0', '0', 'W', 'W'], ['0', '0', 'W', 'W', 'W', 'W', 'E', '0', '0', '0'], ['W', 'E', 'E', '0', 'E', '0', 'W', 'W', '0', 'E']]) == 3\nassert solution.maxKilledEnemies([['0', 'E', 'W', '0', 'E', 'E'], ['0', '0', 'E', 'E', 'W', 'E'], ['W', 'E', 'E', '0', 'W', '0'], ['0', 'E', 'W', 'W', 'E', 'W']]) == 5\nassert solution.maxKilledEnemies([['W', '0'], ['0', 'W'], ['W', 'W'], ['E', 'W'], ['E', 'E']]) == 0\nassert solution.maxKilledEnemies([['E', 'W', 'E', '0'], ['W', '0', 'W', '0']]) == 1\nassert solution.maxKilledEnemies([['W'], ['W'], ['0'], ['W'], ['0'], ['E'], ['E'], ['W'], ['W'], ['W']]) == 2\nassert solution.maxKilledEnemies([['0', 'E', '0', '0'], ['0', '0', 'W', '0']]) == 1\nassert solution.maxKilledEnemies([['0', 'W', 'E', 'W', 'W', 'W', 'W', '0', 'E'], ['0', 'W', 'W', '0', '0', '0', 'W', 'E', 'W'], ['0', '0', 'E', '0', 'W', 'E', 'W', '0', '0'], ['W', 'E', '0', '0', '0', 'W', 'W', '0', 'W'], ['W', '0', 'E', '0', '0', 'W', 'W', '0', 'W']]) == 3\nassert solution.maxKilledEnemies([['0', '0', '0', '0', 'W', '0', 'W', 'E'], ['W', 'W', '0', 'E', 'W', 'W', 'E', '0'], ['E', 'W', '0', 'E', 'E', 'W', 'W', 'E'], ['0', '0', 'W', '0', 'W', '0', '0', 'E'], ['W', 'E', 'W', 'W', 'W', '0', '0', '0'], ['0', 'E', '0', 'W', 'E', 'W', 'E', '0'], ['0', '0', 'E', '0', 'E', 'W', '0', '0'], ['W', 'E', 'E', '0', 'E', 'W', 'W', 'E'], ['W', 'E', 'E', '0', 'W', '0', 'W', 'W']]) == 6\nassert solution.maxKilledEnemies([['E', 'W'], ['W', '0'], ['W', 'W'], ['W', 'W'], ['0', 'W'], ['E', '0'], ['0', 'E'], ['E', '0'], ['0', 'E']]) == 3",
  "inefficient_solution": "class Solution:\n    def maxKilledEnemies(self, grid: List[List[str]]) -> int:\n        m, n = len(grid), len(grid[0])\n        g = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    g[i][j] += 1\n        for i in range(m):\n            for j in range(n):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    g[i][j] += 1\n        for j in range(n):\n            for i in range(m):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    g[i][j] += 1\n        for j in range(n):\n            for i in range(m):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    g[i][j] += 1\n        max_val = 0\n        for i in range(m):\n            for j in range(n):\n                for _ in range(1000):\n                    if grid[i][j] == 'W':\n                        break\n                    for k in range(m):\n                        for _ in range(1000):\n                            if grid[k][j] == 'W':\n                                break\n                            g[k][j] += 1\n                    for k in range(n):\n                        for _ in range(1000):\n                            if grid[i][k] == 'W':\n                                break\n                            g[i][k] += 1\n                if grid[i][j] == '0':\n                    max_val = max(max_val, g[i][j])\n        return max_val",
  "is_python": true
}