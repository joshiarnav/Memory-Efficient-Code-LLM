{
  "problem_idx": 1130,
  "task_name": "Minimum Cost Tree From Leaf Values",
  "markdown_description": "\nGiven an array `arr` of positive integers, consider all binary trees such that:\n\n\n* Each node has either `0` or `2` children;\n* The values of `arr` correspond to the values of each **leaf** in an in-order traversal of the tree.\n* The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.\n\n\nAmong all possible binary trees considered, return *the smallest possible sum of the values of each non-leaf node*. It is guaranteed this sum fits into a **32-bit** integer.\n\n\nA node is a **leaf** if and only if it has zero children.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1100-1199/1130.Minimum%20Cost%20Tree%20From%20Leaf%20Values/images/tree1.jpg)\n\n```\n\n**Input:** arr = [6,2,4]\n**Output:** 32\n**Explanation:** There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1100-1199/1130.Minimum%20Cost%20Tree%20From%20Leaf%20Values/images/tree2.jpg)\n\n```\n\n**Input:** arr = [4,11]\n**Output:** 44\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= arr.length <= 40`\n* `1 <= arr[i] <= 15`\n* It is guaranteed that the answer fits into a **32-bit** signed integer (i.e., it is less than 231).\n\n\n",
  "canonical_solution": "class Solution:\n    def mctFromLeafValues(self, arr: List[int]) -> int:\n        n = len(arr)\n        f = [[0] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            g[i][i] = arr[i]\n            for j in range(i + 1, n):\n                g[i][j] = max(g[i][j - 1], arr[j])\n                f[i][j] = min(\n                    f[i][k] + f[k + 1][j] + g[i][k] * g[k + 1][j] for k in range(i, j)\n                )\n        return f[0][n - 1]\n",
  "test_case_generator": "\nfrom typing import List\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random array\n    arr = random.choices(range(1, 16), k=random.randint(2, 40))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.mctFromLeafValues(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.mctFromLeafValues(arr) == expected_result\n        print(f\"assert solution.mctFromLeafValues({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.mctFromLeafValues({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.mctFromLeafValues([14, 11, 7, 5, 10, 13, 13, 3, 3, 9, 1, 10, 7]) == 1044\nassert solution.mctFromLeafValues([6, 6, 10, 13, 14, 12]) == 576\nassert solution.mctFromLeafValues([4, 1, 6, 11, 9, 12, 15, 7, 5, 1, 5, 1, 13, 1, 10, 9, 2, 10, 2, 12, 13, 8, 2, 10, 5, 5, 5, 12, 11, 5, 2, 4, 5, 15, 15, 12]) == 2886\nassert solution.mctFromLeafValues([15, 3, 7, 2, 5, 5, 2, 9]) == 299\nassert solution.mctFromLeafValues([5, 10, 2, 4, 2, 12, 1, 13, 3, 2, 4, 13, 12, 10, 9, 9, 15, 1, 5, 6, 5, 11, 14, 4, 15, 9, 7, 4, 9, 7, 15, 12, 5]) == 2886\nassert solution.mctFromLeafValues([2, 9, 2, 10, 4, 4, 11, 3, 13, 13, 6, 3, 3, 9, 10, 3, 9, 5, 5, 13, 1, 4, 11, 6, 6, 11, 5, 6, 10, 10]) == 2008\nassert solution.mctFromLeafValues([4, 2, 15, 12, 13, 6, 10, 7, 6, 4]) == 745\nassert solution.mctFromLeafValues([4, 3, 2, 5, 6, 1, 13, 6, 15, 12, 14, 6, 3, 15, 14, 12, 9, 1]) == 1625\nassert solution.mctFromLeafValues([10, 3, 14, 3, 7, 15, 3, 8, 3, 8, 4, 15, 2, 6, 10, 2, 1, 8, 13, 1, 12, 14, 14]) == 2044\nassert solution.mctFromLeafValues([7, 14, 3, 10, 5, 14, 12, 12]) == 826\nassert solution.mctFromLeafValues([13, 12, 1, 5, 13, 4, 9, 4, 13, 6, 6, 4, 3, 8, 3, 3, 6, 4, 11, 2, 14, 7, 12, 10, 1, 12, 13, 13, 8, 10, 14, 7, 7, 5, 1, 10, 14]) == 3168\nassert solution.mctFromLeafValues([7, 15, 13, 9, 5, 7, 15, 13, 12, 4, 14, 9]) == 1462\nassert solution.mctFromLeafValues([7, 9, 15]) == 198\nassert solution.mctFromLeafValues([7, 5, 10, 10, 12, 3, 10, 4, 8, 15, 13, 2, 4, 6, 7, 9, 9, 1, 9, 6, 13, 1, 3, 12, 2, 11, 9, 13, 6, 13, 15, 10, 12, 15, 12, 15, 8, 14, 14, 15]) == 4372\nassert solution.mctFromLeafValues([6, 15, 1, 13, 1, 10, 15, 15, 2, 12]) == 1092\nassert solution.mctFromLeafValues([12, 11, 11, 6, 11, 6, 13, 11, 10, 5, 14, 10, 13, 15, 10, 7, 10, 9, 11, 1, 9, 14, 5, 12, 14, 3, 11, 12, 6, 14, 10, 12, 8, 6, 7, 5, 3]) == 4068\nassert solution.mctFromLeafValues([13, 5, 8, 11, 1]) == 282\nassert solution.mctFromLeafValues([13, 7, 9, 5, 6, 2, 4, 2, 9, 2, 12, 5, 14, 1, 4, 10, 12, 3, 6, 14, 13, 8, 2, 10, 12, 11, 12, 7, 9, 15, 14, 15, 13, 10, 6, 13, 12, 9, 13, 7]) == 4134\nassert solution.mctFromLeafValues([15, 7, 3, 2, 13, 6, 10, 5, 10, 13]) == 822\nassert solution.mctFromLeafValues([15, 5, 13, 3, 9, 4, 11, 13, 11, 1, 9, 1, 11, 4, 15, 1, 1, 4, 9, 4, 3, 12, 8, 13, 7, 4]) == 2147\nassert solution.mctFromLeafValues([7, 13, 4, 13, 4, 4, 13, 12, 13, 9, 14, 4, 4, 4, 9, 15, 11, 15, 14, 4]) == 2233\nassert solution.mctFromLeafValues([14, 7, 12, 4, 7, 7, 10, 1, 3, 10, 13, 7, 15, 15, 9, 9, 4, 10, 6, 3, 13, 1, 9, 15, 13, 4, 10, 7, 8, 9, 2, 3, 6, 11]) == 3093\nassert solution.mctFromLeafValues([2, 5, 9, 12, 5, 12, 4, 3, 7, 15, 13, 12, 14, 6, 5, 7, 10, 14, 4, 2, 6, 10, 14, 14]) == 2321\nassert solution.mctFromLeafValues([14, 13, 14, 1, 12, 3, 2, 14, 10, 13, 11, 7, 3, 9, 15, 12, 12, 1, 5, 10, 8, 14, 5, 13, 9, 4, 13, 11, 6, 4, 10, 5, 6, 5, 13]) == 3616\nassert solution.mctFromLeafValues([7, 1, 10, 11, 4, 13, 4, 9]) == 527\nassert solution.mctFromLeafValues([2, 5, 5, 4, 15, 6, 2, 6, 11, 9, 3, 3, 15, 14, 14, 4, 1, 4, 13, 4, 11, 5, 15, 2, 2, 7, 15]) == 2244\nassert solution.mctFromLeafValues([9, 11, 6, 13, 3, 13, 11, 11, 8, 2, 15, 2, 13, 6, 6, 14, 3, 10, 10, 3, 2]) == 1917\nassert solution.mctFromLeafValues([11, 3, 10, 1, 9, 12, 6, 7, 2, 4, 13, 5, 1, 12, 2, 8, 11, 7, 14, 4, 15, 2, 14, 14, 15, 13, 11, 13, 9, 4, 3, 11, 10, 7, 6, 10]) == 3449\nassert solution.mctFromLeafValues([14, 5, 5, 11, 9, 6, 5, 6, 1, 11, 6, 12, 10, 15, 12, 6, 7, 12, 6, 13, 11, 3, 14, 7, 8, 5, 8, 11, 3, 6, 9, 2]) == 2779\nassert solution.mctFromLeafValues([11, 15, 11, 8, 12, 11, 6, 2, 10, 4, 1, 2, 10, 8, 3, 1, 7, 15, 13]) == 1609\nassert solution.mctFromLeafValues([14, 1, 2, 13, 15, 2, 14, 11, 15, 12, 11, 7, 13, 6, 14, 14, 7, 9, 1, 15, 2, 8, 9, 10, 6, 3, 11, 9, 5, 4, 2, 10, 3, 11, 12, 8, 5, 10, 3, 12]) == 4007\nassert solution.mctFromLeafValues([11, 12, 14, 10, 11, 1, 3, 7, 5, 3, 8, 13, 6, 11, 13, 8, 14, 15, 5, 12, 8, 7, 11, 14, 3, 3, 3, 11, 3, 5, 4]) == 2850\nassert solution.mctFromLeafValues([4, 7, 3, 6, 5, 2, 9, 14, 5, 8, 14, 4, 5, 5, 3, 8, 8, 5, 11, 3, 10, 11, 1, 15, 8, 4, 6, 3, 9, 3, 1, 15, 4, 6, 6, 8, 9, 5, 7]) == 2558\nassert solution.mctFromLeafValues([6, 15, 3, 15, 8, 6, 3, 13, 2, 6, 4, 12, 3, 14, 3, 10, 5, 12, 7, 8, 4, 8, 7, 3, 14, 3, 13]) == 2332\nassert solution.mctFromLeafValues([12, 10, 15, 7, 4, 6, 2, 6, 9, 2, 13, 3, 4, 11, 6, 7, 1, 13, 14, 4, 5, 5, 15, 5, 14, 15, 5, 5, 8, 14, 15, 3]) == 3000\nassert solution.mctFromLeafValues([7, 2, 7, 6, 7, 10, 1, 1, 15, 12, 1, 8, 11, 7, 11, 12, 4, 15, 8]) == 1528\nassert solution.mctFromLeafValues([1, 15, 12, 2, 15, 9, 15, 5]) == 879\nassert solution.mctFromLeafValues([6, 13, 15, 7, 2, 5, 14, 1, 11, 6, 7, 9, 2, 2, 5, 4, 8, 15, 7, 11, 5, 12, 3, 13]) == 2017\nassert solution.mctFromLeafValues([8, 1, 13, 12, 11, 5, 11]) == 576\nassert solution.mctFromLeafValues([11, 7, 4, 1, 10, 15, 4, 12, 11, 5, 11, 9, 15, 6, 12, 9, 10, 11, 12, 2, 12, 10, 3, 15, 2, 5, 10, 9, 13, 7]) == 3074\nassert solution.mctFromLeafValues([12, 12, 5, 14]) == 372\nassert solution.mctFromLeafValues([13, 3, 11, 15, 6, 13, 12, 12, 4, 11, 10, 14, 9, 14, 1, 13, 11]) == 2087\nassert solution.mctFromLeafValues([14, 6, 5, 8, 9, 15, 9, 10, 9, 1, 9]) == 906\nassert solution.mctFromLeafValues([9, 4, 3, 6, 8, 4, 7, 15, 5, 5, 12, 2, 7, 3, 4, 8, 1, 9, 9, 12, 15, 12, 7, 7, 4, 4, 15, 1, 4]) == 2034\nassert solution.mctFromLeafValues([2, 14, 8, 5, 1, 1, 5, 3, 11, 12]) == 502\nassert solution.mctFromLeafValues([13, 14, 15, 3, 6, 9, 12, 13, 9, 1, 5, 1, 15, 8, 14, 6, 9, 5, 1, 15, 11, 5, 5, 4, 11, 13, 3, 5, 1, 9, 8, 7, 11, 10, 10]) == 3301\nassert solution.mctFromLeafValues([7, 9, 3, 4, 15, 14, 12, 8]) == 720\nassert solution.mctFromLeafValues([3, 7, 14, 3, 14]) == 357\nassert solution.mctFromLeafValues([5, 14, 10, 3, 3]) == 249\nassert solution.mctFromLeafValues([6, 14, 3, 9, 15, 8, 1, 7, 8, 9]) == 781\nassert solution.mctFromLeafValues([3, 5, 6, 15, 6, 3, 12, 15, 13, 13, 13, 8, 2, 8, 6, 15, 1, 4, 3, 3, 10, 14, 13, 2, 7, 4, 5, 4, 10, 14, 9, 2]) == 2846\nassert solution.mctFromLeafValues([6, 10, 6, 4, 4, 5, 11, 11, 13, 6, 12, 9, 14, 14, 11, 4, 2, 6, 10, 8, 5, 7, 6, 15, 2, 6, 5, 8, 12, 6, 11, 10, 6, 3, 12]) == 2949\nassert solution.mctFromLeafValues([3, 6, 14, 4, 11, 12, 7, 6, 8, 4, 15, 14, 11]) == 1246\nassert solution.mctFromLeafValues([5, 12, 1, 10, 10, 5, 1, 13, 9, 14, 8, 3, 15, 12, 10, 10, 1, 2, 13, 10, 1, 15]) == 2104\nassert solution.mctFromLeafValues([2, 8, 4, 2]) == 56\nassert solution.mctFromLeafValues([3, 4, 12, 14, 13, 13, 3, 5, 1, 1, 9, 11, 2, 8, 5, 1, 7, 9, 6]) == 1224\nassert solution.mctFromLeafValues([2, 12, 12, 10]) == 288\nassert solution.mctFromLeafValues([1, 10, 7, 12, 10, 3, 5, 9, 13, 13, 15, 7, 6, 15, 11, 7, 9, 6, 11, 13, 5, 7, 5, 8, 1, 9, 1, 10]) == 2472\nassert solution.mctFromLeafValues([7, 14, 15, 14, 7, 5, 7, 10, 7, 2, 1, 8, 13, 13, 15]) == 1530\nassert solution.mctFromLeafValues([3, 5, 14, 8, 5, 2, 15, 11, 11, 8, 11, 12, 10, 1]) == 1229\nassert solution.mctFromLeafValues([13, 3, 12, 5, 10, 9, 6, 10, 13, 3, 11, 8, 5, 15, 12, 14, 11, 1, 1, 5, 12, 10, 7, 15, 4, 8, 13, 14, 1, 2, 8, 7]) == 3142\nassert solution.mctFromLeafValues([3, 5, 11, 8, 1, 2, 10, 5, 2, 13, 11, 3, 11, 14, 1, 2, 9, 11, 9, 1, 15, 6, 14, 4, 11, 15, 1, 13, 9, 13, 5, 10, 4, 2, 11, 15, 8]) == 3458\nassert solution.mctFromLeafValues([10, 6, 4, 5, 6, 13, 11, 12, 14, 6, 12, 13, 1, 9, 15]) == 1492\nassert solution.mctFromLeafValues([10, 4, 11, 15, 13, 14, 5, 4, 11, 13, 13, 1, 9, 7, 15, 2, 15, 12, 6, 7, 11, 8]) == 2464\nassert solution.mctFromLeafValues([14, 5, 15, 5, 8, 2, 13, 1, 13, 10, 5]) == 997\nassert solution.mctFromLeafValues([8, 15, 3, 6, 11, 9, 6, 12, 11, 13, 5, 7, 15, 12, 5, 3, 9, 13]) == 1842\nassert solution.mctFromLeafValues([8, 13, 12, 15, 9, 6, 4, 13, 9, 6, 8, 9, 14, 12, 2, 14, 4, 10, 2, 10, 4, 6, 6, 15, 15, 6, 2, 8, 7, 1, 9]) == 2948\nassert solution.mctFromLeafValues([13, 8, 14, 15, 6, 3, 15, 9, 6, 2, 10, 1, 11, 11, 7, 9, 9, 11, 8, 8, 3, 11, 8]) == 2140\nassert solution.mctFromLeafValues([9, 12, 4, 11, 12, 1, 2, 8, 3, 14, 11, 4, 9, 13, 6, 2, 2, 1, 14, 3, 7, 13, 1]) == 1793\nassert solution.mctFromLeafValues([14, 6, 9, 13, 5, 9, 4, 6, 14, 15, 6, 2, 10, 9, 11, 2, 14, 6]) == 1741\nassert solution.mctFromLeafValues([13, 5, 9, 13, 4, 11, 1, 6, 15, 13, 13, 3, 12, 7, 8, 1, 14, 10, 2, 2, 2, 2]) == 1870\nassert solution.mctFromLeafValues([11, 1, 14, 2, 7, 1]) == 284\nassert solution.mctFromLeafValues([9, 5, 6, 3, 10]) == 192\nassert solution.mctFromLeafValues([2, 14, 5, 13, 13]) == 444\nassert solution.mctFromLeafValues([1, 10, 8, 15, 13, 7, 5, 3]) == 576\nassert solution.mctFromLeafValues([12, 6]) == 72\nassert solution.mctFromLeafValues([13, 10, 1, 2, 11, 15, 7, 10, 5, 5, 9, 10, 14, 14, 3, 1, 8, 2, 8, 8, 1, 9, 6, 5, 7, 8, 11]) == 2050\nassert solution.mctFromLeafValues([7, 8, 12, 11, 1, 7, 13, 14, 5, 8, 15, 2, 2, 11, 13, 9, 8, 10, 4, 14, 12, 13, 15, 5, 12, 1, 8, 11]) == 2992\nassert solution.mctFromLeafValues([15, 4, 5, 10, 11, 9, 14, 5, 11, 15, 7, 11, 10, 10, 15, 8, 11, 4, 8, 10, 15, 2, 14, 6, 7, 14, 10, 5, 4, 12, 9, 11]) == 3617\nassert solution.mctFromLeafValues([1, 3, 8, 10, 8, 4, 4, 6, 12]) == 395\nassert solution.mctFromLeafValues([3, 11, 9, 1, 10, 3, 4, 9, 14, 14, 11, 11, 14, 9, 6, 7, 10]) == 1536\nassert solution.mctFromLeafValues([4, 2, 2, 14, 13, 10, 8, 14, 1, 5, 15, 12, 1, 12, 4, 1, 13, 6, 12, 14, 9, 11, 4, 9, 12, 1, 6, 4, 2, 7, 11, 2, 9, 15, 14, 8, 1, 4, 13]) == 3622\nassert solution.mctFromLeafValues([9, 14, 5, 5, 4, 7, 3, 5, 15, 10, 10, 2, 15, 7]) == 1164\nassert solution.mctFromLeafValues([15, 15, 15, 13, 8, 14, 1]) == 960\nassert solution.mctFromLeafValues([9, 8, 9, 10, 4, 12, 4, 15, 15, 8, 12, 4, 14, 12, 4, 11, 13, 4, 10, 8, 7, 7, 4, 3, 8, 15, 2, 8, 4, 2, 3, 15]) == 2987\nassert solution.mctFromLeafValues([3, 6, 4, 8, 2, 2, 14, 5, 4, 10, 12, 2, 2, 11, 10, 12, 14, 15, 11, 11, 8, 9, 7, 2, 5, 12, 3, 12, 15, 9, 3, 8, 4, 7, 2, 5, 6, 10, 6]) == 3077\nassert solution.mctFromLeafValues([3, 5, 7, 5, 11, 4, 2, 3, 3, 12, 14, 8]) == 645\nassert solution.mctFromLeafValues([9, 2, 6, 15, 8, 11]) == 454\nassert solution.mctFromLeafValues([1, 8, 6, 10, 5, 9, 3, 13, 9, 3, 15, 5, 6, 15, 7, 9, 10, 13, 1, 15, 6, 6, 2, 8, 5, 2]) == 2094\nassert solution.mctFromLeafValues([3, 11, 7, 13, 2, 6, 5, 15, 12, 9, 10, 3, 9, 15, 6, 15, 11, 6, 15, 5, 3, 9, 1, 1, 11]) == 2405\nassert solution.mctFromLeafValues([4, 5, 8, 6, 7, 3, 3, 2, 7, 14, 5, 5, 9, 3, 12, 2, 12, 5, 7, 2, 9, 2, 13]) == 1304\nassert solution.mctFromLeafValues([4, 6, 10, 1, 1, 12, 12, 5, 8, 8, 5, 2, 14, 5, 1, 7, 8, 4, 9, 5, 3, 11, 2, 8, 2, 7]) == 1464\nassert solution.mctFromLeafValues([3, 4]) == 12\nassert solution.mctFromLeafValues([12, 12, 7, 7, 10, 2, 11, 12, 6, 15, 11, 5, 6, 1, 15, 13, 4, 12, 6, 2, 14, 9, 7, 7, 15, 15, 8, 5, 9, 7, 2, 15, 5, 5, 3, 2, 3, 11]) == 3605\nassert solution.mctFromLeafValues([11, 11, 5, 13, 11, 7, 5, 7, 11, 12, 5, 4]) == 969\nassert solution.mctFromLeafValues([4, 15, 10, 3, 5, 15, 10, 15, 6, 9, 7, 11, 4, 9, 4, 6, 10, 8]) == 1650\nassert solution.mctFromLeafValues([14, 9, 5, 15]) == 381\nassert solution.mctFromLeafValues([11, 15, 8, 4, 13, 8, 14, 13, 12, 6, 3, 7, 10, 6, 9, 15, 1, 2, 1, 12, 2, 15, 11, 9, 13]) == 2648\nassert solution.mctFromLeafValues([8, 11, 13, 8, 7, 3, 15]) == 607\nassert solution.mctFromLeafValues([14, 4, 11, 3, 7, 5, 1, 14, 2, 6, 6, 14, 7, 6, 12, 5, 2, 8, 14, 15, 1]) == 1721",
  "inefficient_solution": "class Solution:\n    def mctFromLeafValues(self, arr: List[int]) -> int:\n        def dfs(i, j, memo):\n            if i > j:\n                return float('inf')\n            if (i, j) in memo:\n                return memo[(i, j)]\n            res = float('inf')\n            for k in range(i, j):\n                res = min(res, dfs(i, k, memo) + dfs(k + 1, j, memo) + max(arr[i], arr[k]) * max(arr[k + 1], arr[j]))\n            memo[(i, j)] = res\n            return res\n\n        n = len(arr)\n        memo = {}\n        return dfs(0, n - 1, memo)",
  "is_python": true
}