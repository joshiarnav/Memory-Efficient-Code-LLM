{
  "problem_idx": 1060,
  "task_name": "Missing Element in Sorted Array",
  "markdown_description": "\nGiven an integer array `nums` which is sorted in **ascending order** and all of its elements are **unique** and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,7,9,10], k = 1\n**Output:** 5\n**Explanation:** The first missing number is 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,7,9,10], k = 3\n**Output:** 8\n**Explanation:** The missing numbers are [5,6,8,...], hence the third missing number is 8.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,4], k = 3\n**Output:** 6\n**Explanation:** The missing numbers are [3,5,6,7,...], hence the third missing number is 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5 * 104`\n* `1 <= nums[i] <= 107`\n* `nums` is sorted in **ascending order,** and all the elements are **unique**.\n* `1 <= k <= 108`\n\n\n\u00a0\n\n\n**Follow up:** Can you find a logarithmic time complexity (i.e., `O(log(n))`) solution?\n\n",
  "canonical_solution": "class Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n        def missing(i: int) -> int:\n            return nums[i] - nums[0] - i\n\n        n = len(nums)\n        if k > missing(n - 1):\n            return nums[n - 1] + k - missing(n - 1)\n        l, r = 0, n - 1\n        while l < r:\n            mid = (l + r) >> 1\n            if missing(mid) >= k:\n                r = mid\n            else:\n                l = mid + 1\n        return nums[l - 1] + k - missing(l - 1)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n        def missing(i: int) -> int:\n            return nums[i] - nums[0] - i\n\n        n = len(nums)\n        if k > missing(n - 1):\n            return nums[n - 1] + k - missing(n - 1)\n        l, r = 0, n - 1\n        while l < r:\n            mid = (l + r) >> 1\n            if missing(mid) >= k:\n                r = mid\n            else:\n                l = mid + 1\n        return nums[l - 1] + k - missing(l - 1)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a sorted list\n    nums = sorted(random.sample(range(1, 101), random.randint(2, 10)))\n    \n    # Generate a random k value\n    k = random.randint(1, 21)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.missingElement(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.missingElement(nums, k) == expected_result\n        print(f\"assert solution.missingElement({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.missingElement({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.missingElement([32, 72], 15) == 47\nassert solution.missingElement([30, 57, 59, 84], 19) == 49\nassert solution.missingElement([32, 35, 71, 75, 76], 2) == 34\nassert solution.missingElement([12, 85], 17) == 29\nassert solution.missingElement([30, 38, 52, 59, 71, 88], 3) == 33\nassert solution.missingElement([7, 16, 18, 23, 28, 41, 51, 88, 92, 97], 19) == 30\nassert solution.missingElement([1, 23, 42, 70], 20) == 21\nassert solution.missingElement([23, 27, 44], 3) == 26\nassert solution.missingElement([7, 34, 38, 43, 45, 66, 68, 69, 99], 6) == 13\nassert solution.missingElement([2, 19, 23, 42, 50, 73, 75, 78], 5) == 7\nassert solution.missingElement([41, 46, 60], 17) == 59\nassert solution.missingElement([1, 10, 14, 48, 58, 67, 69, 71, 82, 91], 9) == 11\nassert solution.missingElement([5, 23, 43, 47, 59, 67], 8) == 13\nassert solution.missingElement([42, 51, 75], 18) == 61\nassert solution.missingElement([26, 28], 2) == 29\nassert solution.missingElement([31, 44, 97], 8) == 39\nassert solution.missingElement([14, 34, 62, 63, 65, 81, 91, 94], 12) == 26\nassert solution.missingElement([37, 60, 65], 1) == 38\nassert solution.missingElement([10, 22, 69], 21) == 32\nassert solution.missingElement([41, 97], 19) == 60\nassert solution.missingElement([30, 52, 53, 68, 82, 94], 21) == 51\nassert solution.missingElement([22, 24, 27, 33, 46, 62, 64, 69, 79, 90], 12) == 37\nassert solution.missingElement([2, 21, 43, 48], 7) == 9\nassert solution.missingElement([24, 34, 80, 86], 7) == 31\nassert solution.missingElement([2, 40, 45, 47, 57, 73, 76, 77], 13) == 15\nassert solution.missingElement([8, 24, 28, 42, 43, 89, 90, 92, 97], 14) == 22\nassert solution.missingElement([11, 42, 54, 62, 88], 4) == 15\nassert solution.missingElement([12, 31, 50, 56, 58, 65, 68, 78], 5) == 17\nassert solution.missingElement([21, 34, 40, 46, 47, 65, 85], 11) == 32\nassert solution.missingElement([33, 62, 98], 4) == 37\nassert solution.missingElement([5, 12, 46], 13) == 19\nassert solution.missingElement([13, 14, 16, 34, 63, 73, 75, 83, 95], 16) == 31\nassert solution.missingElement([16, 45, 50, 56, 72, 82, 86, 98], 16) == 32\nassert solution.missingElement([10, 13, 23, 27, 43, 67, 79, 94], 17) == 30\nassert solution.missingElement([31, 82, 86], 9) == 40\nassert solution.missingElement([3, 13, 30, 39, 45, 70, 91, 100], 2) == 5\nassert solution.missingElement([19, 23, 40, 93], 13) == 33\nassert solution.missingElement([6, 11, 25, 40, 58, 59, 63, 89], 3) == 9\nassert solution.missingElement([42, 44, 64, 67, 72], 16) == 59\nassert solution.missingElement([2, 12, 45, 51, 53, 100], 20) == 23\nassert solution.missingElement([8, 22, 29, 36, 52, 58, 74], 6) == 14\nassert solution.missingElement([58, 89, 98], 20) == 78\nassert solution.missingElement([10, 31, 42, 46, 47, 66, 84, 87], 16) == 26\nassert solution.missingElement([55, 60, 82], 20) == 76\nassert solution.missingElement([48, 59], 13) == 62\nassert solution.missingElement([9, 36, 43, 58, 65, 72, 74, 91], 18) == 27\nassert solution.missingElement([10, 36, 46, 69, 74, 89, 99], 18) == 28\nassert solution.missingElement([1, 5, 9, 16, 30, 32, 72, 85], 11) == 14\nassert solution.missingElement([2, 12, 24, 26, 41, 44, 66, 72, 94], 1) == 3\nassert solution.missingElement([36, 41, 51, 61, 66, 85], 10) == 47\nassert solution.missingElement([17, 22, 26, 46, 94], 14) == 33\nassert solution.missingElement([11, 23, 27, 32, 40, 88], 18) == 31\nassert solution.missingElement([1, 2, 5, 25, 40, 47, 50, 56, 63], 8) == 11\nassert solution.missingElement([29, 49, 53, 66], 10) == 39\nassert solution.missingElement([16, 35, 54], 2) == 18\nassert solution.missingElement([26, 27, 37, 47, 78, 93], 6) == 33\nassert solution.missingElement([20, 23, 55, 65, 68, 74, 80, 81, 84, 99], 20) == 41\nassert solution.missingElement([5, 38, 45, 70], 15) == 20\nassert solution.missingElement([22, 91], 15) == 37\nassert solution.missingElement([13, 21, 25, 36, 66, 71, 76, 78, 81, 93], 12) == 27\nassert solution.missingElement([8, 44, 50, 88], 1) == 9\nassert solution.missingElement([10, 12, 20, 26, 44, 64, 73, 91, 95], 8) == 19\nassert solution.missingElement([7, 8, 38, 44, 52, 86, 96], 11) == 19\nassert solution.missingElement([1, 11, 18, 19, 23, 63, 89, 90], 15) == 17\nassert solution.missingElement([29, 30, 38, 45, 50, 64, 71, 87], 16) == 48\nassert solution.missingElement([22, 62, 65, 75], 2) == 24\nassert solution.missingElement([3, 7, 18, 47, 62, 92], 1) == 4\nassert solution.missingElement([12, 13, 14, 23, 32, 49, 69, 88, 93, 96], 2) == 16\nassert solution.missingElement([13, 27, 43, 45, 63, 66, 76, 100], 8) == 21\nassert solution.missingElement([14, 39, 54, 64, 72, 83, 91, 93, 95], 20) == 34\nassert solution.missingElement([2, 5, 20, 33, 50, 52, 71, 72, 83, 87], 13) == 16\nassert solution.missingElement([61, 66, 71, 86, 97], 4) == 65\nassert solution.missingElement([5, 13, 32, 34, 35, 39, 46, 53, 58], 2) == 7\nassert solution.missingElement([3, 16, 33, 49, 58, 61, 68], 14) == 18\nassert solution.missingElement([10, 22, 35, 36, 52, 61, 87, 89, 91], 16) == 27\nassert solution.missingElement([20, 42, 57, 59, 81, 87, 98, 100], 15) == 35\nassert solution.missingElement([20, 34, 43, 62, 80, 90], 8) == 28\nassert solution.missingElement([3, 36, 59, 79, 89, 93], 16) == 19\nassert solution.missingElement([1, 12, 15, 17, 21, 23, 47, 65, 70, 79], 15) == 19\nassert solution.missingElement([2, 18, 29, 36, 53, 69, 83], 5) == 7\nassert solution.missingElement([8, 33, 45, 63, 75, 84], 13) == 21\nassert solution.missingElement([44, 70, 97], 14) == 58\nassert solution.missingElement([7, 22, 29, 46], 9) == 16\nassert solution.missingElement([91, 97], 1) == 92\nassert solution.missingElement([32, 38, 71, 83, 93], 10) == 43\nassert solution.missingElement([26, 41, 46, 82, 88, 98], 20) == 48\nassert solution.missingElement([2, 20, 24, 32, 59, 65, 67, 83], 10) == 12\nassert solution.missingElement([4, 17, 59], 3) == 7\nassert solution.missingElement([10, 15, 23, 28, 46], 8) == 19\nassert solution.missingElement([2, 6, 26, 46, 61, 64], 7) == 10\nassert solution.missingElement([3, 11, 17, 21, 34, 48, 88, 89, 96], 20) == 26\nassert solution.missingElement([14, 61], 19) == 33\nassert solution.missingElement([16, 24], 17) == 34\nassert solution.missingElement([10, 11, 21, 25, 26, 51, 67, 91, 94, 100], 5) == 16\nassert solution.missingElement([12, 13, 17, 22, 42, 53, 56, 69, 72, 99], 9) == 24\nassert solution.missingElement([24, 34, 39, 46, 62, 87, 91], 2) == 26\nassert solution.missingElement([78, 86], 3) == 81\nassert solution.missingElement([43, 47, 57, 62, 93], 16) == 61\nassert solution.missingElement([46, 66], 10) == 56\nassert solution.missingElement([49, 67], 1) == 50",
  "inefficient_solution": "class Solution:\n    def missingElement(self, nums: List[int], k: int) -> int:\n        def missing(i: int) -> int:\n            return nums[i] - nums[0] - i\n\n        n = len(nums)\n        missing_nums = [0] * n\n        for i in range(n):\n            missing_nums[i] = missing(i)\n\n        missing_count = 0\n        for i in range(n):\n            while missing_count < k:\n                missing_count += 1\n                idx = i\n                while idx < n and missing_count <= missing_nums[idx]:\n                    missing_count += 1\n                    idx += 1\n                if missing_count > k:\n                    break\n                k -= 1\n                i = idx - 1\n\n        return nums[i] + 1",
  "is_python": true
}