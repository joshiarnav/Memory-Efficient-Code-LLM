{
  "problem_idx": 869,
  "task_name": "Reordered Power of ",
  "markdown_description": "\nYou are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\n\n\nReturn `true` *if and only if we can do this so that the resulting number is a power of two*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        def convert(n):\n            cnt = [0] * 10\n            while n:\n                n, v = divmod(n, 10)\n                cnt[v] += 1\n            return cnt\n\n        i, s = 1, convert(n)\n        while i <= 10**9:\n            if convert(i) == s:\n                return True\n            i <<= 1\n        return False\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        def convert(n):\n            cnt = [0] * 10\n            while n:\n                n, v = divmod(n, 10)\n                cnt[v] += 1\n            return cnt\n\n        i, s = 1, convert(n)\n        while i <= 10**9:\n            if convert(i) == s:\n                return True\n            i <<= 1\n        return False\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random number\n    n = random.randint(1, 10**9)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reorderedPowerOf2(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reorderedPowerOf2(n) == expected_result\n        print(f\"assert solution.reorderedPowerOf2({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.reorderedPowerOf2({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.reorderedPowerOf2(800102732) == False\nassert solution.reorderedPowerOf2(301883004) == False\nassert solution.reorderedPowerOf2(533848910) == False\nassert solution.reorderedPowerOf2(770781565) == False\nassert solution.reorderedPowerOf2(22991246) == False\nassert solution.reorderedPowerOf2(356691298) == False\nassert solution.reorderedPowerOf2(738612481) == False\nassert solution.reorderedPowerOf2(837867096) == False\nassert solution.reorderedPowerOf2(652956354) == False\nassert solution.reorderedPowerOf2(917482948) == False\nassert solution.reorderedPowerOf2(532239386) == False\nassert solution.reorderedPowerOf2(676080000) == False\nassert solution.reorderedPowerOf2(577122358) == False\nassert solution.reorderedPowerOf2(787145695) == False\nassert solution.reorderedPowerOf2(198090588) == False\nassert solution.reorderedPowerOf2(539735528) == False\nassert solution.reorderedPowerOf2(56189278) == False\nassert solution.reorderedPowerOf2(563345508) == False\nassert solution.reorderedPowerOf2(637790575) == False\nassert solution.reorderedPowerOf2(651874479) == False\nassert solution.reorderedPowerOf2(705907456) == False\nassert solution.reorderedPowerOf2(719664511) == False\nassert solution.reorderedPowerOf2(455453033) == False\nassert solution.reorderedPowerOf2(207925267) == False\nassert solution.reorderedPowerOf2(538542699) == False\nassert solution.reorderedPowerOf2(532389761) == False\nassert solution.reorderedPowerOf2(195802495) == False\nassert solution.reorderedPowerOf2(15779807) == False\nassert solution.reorderedPowerOf2(544642136) == False\nassert solution.reorderedPowerOf2(419051292) == False\nassert solution.reorderedPowerOf2(116800715) == False\nassert solution.reorderedPowerOf2(561614207) == False\nassert solution.reorderedPowerOf2(182966494) == False\nassert solution.reorderedPowerOf2(405553305) == False\nassert solution.reorderedPowerOf2(109263419) == False\nassert solution.reorderedPowerOf2(243932085) == False\nassert solution.reorderedPowerOf2(787543976) == False\nassert solution.reorderedPowerOf2(332871466) == False\nassert solution.reorderedPowerOf2(498269713) == False\nassert solution.reorderedPowerOf2(200878451) == False\nassert solution.reorderedPowerOf2(406378683) == False\nassert solution.reorderedPowerOf2(432436590) == False\nassert solution.reorderedPowerOf2(986752240) == False\nassert solution.reorderedPowerOf2(911877870) == False\nassert solution.reorderedPowerOf2(115935877) == False\nassert solution.reorderedPowerOf2(771094784) == False\nassert solution.reorderedPowerOf2(500559026) == False\nassert solution.reorderedPowerOf2(884631187) == False\nassert solution.reorderedPowerOf2(506728556) == False\nassert solution.reorderedPowerOf2(684650093) == False\nassert solution.reorderedPowerOf2(726941618) == False\nassert solution.reorderedPowerOf2(834857883) == False\nassert solution.reorderedPowerOf2(470942435) == False\nassert solution.reorderedPowerOf2(925851620) == False\nassert solution.reorderedPowerOf2(110003053) == False\nassert solution.reorderedPowerOf2(794788068) == False\nassert solution.reorderedPowerOf2(793198267) == False\nassert solution.reorderedPowerOf2(496614715) == False\nassert solution.reorderedPowerOf2(19487806) == False\nassert solution.reorderedPowerOf2(524398665) == False\nassert solution.reorderedPowerOf2(953164421) == False\nassert solution.reorderedPowerOf2(109964052) == False\nassert solution.reorderedPowerOf2(651205154) == False\nassert solution.reorderedPowerOf2(394012323) == False\nassert solution.reorderedPowerOf2(945318822) == False\nassert solution.reorderedPowerOf2(603942023) == False\nassert solution.reorderedPowerOf2(194051542) == False\nassert solution.reorderedPowerOf2(39334228) == False\nassert solution.reorderedPowerOf2(310635196) == False\nassert solution.reorderedPowerOf2(864534030) == False\nassert solution.reorderedPowerOf2(643525420) == False\nassert solution.reorderedPowerOf2(627545237) == False\nassert solution.reorderedPowerOf2(91761416) == False\nassert solution.reorderedPowerOf2(775794005) == False\nassert solution.reorderedPowerOf2(797520042) == False\nassert solution.reorderedPowerOf2(869568843) == False\nassert solution.reorderedPowerOf2(745216826) == False\nassert solution.reorderedPowerOf2(627125788) == False\nassert solution.reorderedPowerOf2(564817808) == False\nassert solution.reorderedPowerOf2(16210273) == False\nassert solution.reorderedPowerOf2(553576203) == False\nassert solution.reorderedPowerOf2(1391387) == False\nassert solution.reorderedPowerOf2(50500196) == False\nassert solution.reorderedPowerOf2(840265405) == False\nassert solution.reorderedPowerOf2(998808769) == False\nassert solution.reorderedPowerOf2(639430469) == False\nassert solution.reorderedPowerOf2(491141967) == False\nassert solution.reorderedPowerOf2(903213307) == False\nassert solution.reorderedPowerOf2(833525631) == False\nassert solution.reorderedPowerOf2(221163693) == False\nassert solution.reorderedPowerOf2(893297516) == False\nassert solution.reorderedPowerOf2(405921945) == False\nassert solution.reorderedPowerOf2(373282584) == False\nassert solution.reorderedPowerOf2(867681832) == False\nassert solution.reorderedPowerOf2(18237021) == False\nassert solution.reorderedPowerOf2(70413164) == False\nassert solution.reorderedPowerOf2(243224145) == False\nassert solution.reorderedPowerOf2(948191441) == False\nassert solution.reorderedPowerOf2(469648804) == False\nassert solution.reorderedPowerOf2(193830521) == False",
  "inefficient_solution": "class Solution:\n    def reorderedPowerOf2(self, n: int) -> bool:\n        def convert(n):\n            digits = list(str(n))\n            cnt = {}\n            for digit in digits:\n                if digit in cnt:\n                    cnt[digit] += 1\n                else:\n                    cnt[digit] = 1\n            return cnt\n\n        i, s = 1, convert(n)\n        while i <= 10**9:\n            temp = convert(i)\n            if temp['0'] == 0 and len(temp) == len(s) and all(temp[key] == s[key] for key in temp):\n                return True\n            i <<= 1\n        return False",
  "is_python": true
}