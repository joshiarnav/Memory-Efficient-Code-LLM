{
  "problem_idx": 2712,
  "task_name": "Minimum Cost to Make All Characters Equal",
  "markdown_description": "\nYou are given a **0-indexed** binary string `s` of length `n` on which you can apply two types of operations:\n\n\n* Choose an index `i` and invert all characters from\u00a0index `0` to index `i`\u00a0(both inclusive), with a cost of `i + 1`\n* Choose an index `i` and invert all characters\u00a0from\u00a0index `i` to index `n - 1`\u00a0(both inclusive), with a cost of `n - i`\n\n\nReturn *the **minimum cost** to make all characters of the string **equal***.\n\n\n**Invert** a character means\u00a0if its value is '0' it becomes '1' and vice-versa.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"0011\"\n**Output:** 2\n**Explanation:** Apply the second operation with i = 2 to obtain s = \"0000\" for a cost of 2. It can be shown that 2 is the minimum cost to make all characters equal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"010101\"\n**Output:** 9\n**Explanation:** Apply the first operation with i = 2 to obtain s = \"101101\" for a cost of 3.\nApply the first operation with i = 1 to obtain s = \"011101\" for a cost of 2. \nApply the first operation with i = 0 to obtain s = \"111101\" for a cost of 1. \nApply the second operation with i = 4 to obtain s = \"111110\" for a cost of 2.\nApply the second operation with i = 5 to obtain s = \"111111\" for a cost of 1. \nThe total cost to make all characters equal is 9. It can be shown that 9 is the minimum cost to make all characters equal.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length == n <= 105`\n* `s[i]` is either `'0'` or `'1'`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumCost(self, s: str) -> int:\n        ans, n = 0, len(s)\n        for i in range(1, n):\n            if s[i] != s[i - 1]:\n                ans += min(i, n - i)\n        return ans\n",
  "test_case_generator": "\nimport random\n\n\nclass Solution:\n    def minimumCost(self, s: str) -> int:\n        ans, n = 0, len(s)\n        for i in range(1, n):\n            if s[i] != s[i - 1]:\n                ans += min(i, n - i)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random binary string\n    s = \"\".join(random.choices([\"0\", \"1\"], k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumCost(s)\n\n    return s, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumCost(s) == expected_result\n        print(f\"assert solution.minimumCost('{s}') == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.minimumCost('{s}') == {expected_result}\"\n        )\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumCost('11000') == 2\nassert solution.minimumCost('01') == 1\nassert solution.minimumCost('11') == 0\nassert solution.minimumCost('11') == 0\nassert solution.minimumCost('1101000') == 8\nassert solution.minimumCost('11101') == 3\nassert solution.minimumCost('111011') == 5\nassert solution.minimumCost('1') == 0\nassert solution.minimumCost('1111') == 0\nassert solution.minimumCost('111111001') == 4\nassert solution.minimumCost('001100100') == 11\nassert solution.minimumCost('1100100011') == 13\nassert solution.minimumCost('00111010') == 8\nassert solution.minimumCost('1') == 0\nassert solution.minimumCost('1000101100') == 16\nassert solution.minimumCost('01000100') == 8\nassert solution.minimumCost('010001') == 4\nassert solution.minimumCost('011000001') == 5\nassert solution.minimumCost('0001010') == 9\nassert solution.minimumCost('11') == 0\nassert solution.minimumCost('10100010') == 9\nassert solution.minimumCost('01000') == 3\nassert solution.minimumCost('00010') == 3\nassert solution.minimumCost('1110') == 1\nassert solution.minimumCost('1111001') == 4\nassert solution.minimumCost('0100001011') == 12\nassert solution.minimumCost('1011111010') == 9\nassert solution.minimumCost('100010110') == 13\nassert solution.minimumCost('00') == 0\nassert solution.minimumCost('1000') == 1\nassert solution.minimumCost('0001') == 1\nassert solution.minimumCost('101100') == 5\nassert solution.minimumCost('0111011') == 6\nassert solution.minimumCost('10001001') == 9\nassert solution.minimumCost('11') == 0\nassert solution.minimumCost('11111') == 0\nassert solution.minimumCost('1') == 0\nassert solution.minimumCost('10100110') == 10\nassert solution.minimumCost('00000') == 0\nassert solution.minimumCost('100111110') == 5\nassert solution.minimumCost('011111') == 1\nassert solution.minimumCost('011111') == 1\nassert solution.minimumCost('1101') == 3\nassert solution.minimumCost('101') == 2\nassert solution.minimumCost('11111') == 0\nassert solution.minimumCost('000110110') == 11\nassert solution.minimumCost('101110') == 4\nassert solution.minimumCost('101') == 2\nassert solution.minimumCost('0') == 0\nassert solution.minimumCost('000') == 0\nassert solution.minimumCost('011') == 1\nassert solution.minimumCost('00') == 0\nassert solution.minimumCost('10') == 1\nassert solution.minimumCost('1010') == 4\nassert solution.minimumCost('1010001101') == 13\nassert solution.minimumCost('0') == 0\nassert solution.minimumCost('0101110100') == 15\nassert solution.minimumCost('1100') == 2\nassert solution.minimumCost('110') == 1\nassert solution.minimumCost('10') == 1\nassert solution.minimumCost('00') == 0\nassert solution.minimumCost('01') == 1\nassert solution.minimumCost('110010111') == 13\nassert solution.minimumCost('1000010') == 4\nassert solution.minimumCost('100010') == 4\nassert solution.minimumCost('011110001') == 6\nassert solution.minimumCost('00') == 0\nassert solution.minimumCost('101') == 2\nassert solution.minimumCost('001000011') == 7\nassert solution.minimumCost('01011') == 5\nassert solution.minimumCost('0111') == 1\nassert solution.minimumCost('0') == 0\nassert solution.minimumCost('0110110') == 8\nassert solution.minimumCost('1101101110') == 15\nassert solution.minimumCost('0011010000') == 15\nassert solution.minimumCost('1') == 0\nassert solution.minimumCost('0111') == 1\nassert solution.minimumCost('1010') == 4\nassert solution.minimumCost('1001') == 2\nassert solution.minimumCost('1') == 0\nassert solution.minimumCost('101111') == 3\nassert solution.minimumCost('0100110') == 7\nassert solution.minimumCost('1010001') == 7\nassert solution.minimumCost('0111001') == 5\nassert solution.minimumCost('0101') == 4\nassert solution.minimumCost('001') == 1\nassert solution.minimumCost('101') == 2\nassert solution.minimumCost('1011110') == 4\nassert solution.minimumCost('001010111') == 16\nassert solution.minimumCost('100010010') == 12\nassert solution.minimumCost('1010110') == 10\nassert solution.minimumCost('1100110') == 6\nassert solution.minimumCost('100101111') == 12\nassert solution.minimumCost('010') == 2\nassert solution.minimumCost('111') == 0\nassert solution.minimumCost('0100001001') == 11\nassert solution.minimumCost('1') == 0\nassert solution.minimumCost('0100') == 3\nassert solution.minimumCost('0') == 0\nassert solution.minimumCost('101001') == 7",
  "inefficient_solution": "class Solution:\n    def minimumCost(self, s: str) -> int:\n        ans = 0\n        n = len(s)\n        temp = 0\n        for i in range(n):\n            if i % 100000:\n                temp += 1\n            if s[i] != s[(i-1) % n]:\n                if temp > 100000:\n                    temp = 0\n                ans += min(i % 100000, n - i % 100000)\n        return ans",
  "is_python": true
}