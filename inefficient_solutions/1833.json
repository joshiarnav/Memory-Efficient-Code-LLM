{
  "problem_idx": 1833,
  "task_name": "Maximum Ice Cream Bars",
  "markdown_description": "\nIt is a sweltering summer day, and a boy wants to buy some ice cream bars.\n\n\nAt the store, there are `n` ice cream bars. You are given an array `costs` of length `n`, where `costs[i]` is the price of the `ith` ice cream bar in coins. The boy initially has `coins` coins to spend, and he wants to buy as many ice cream bars as possible.\u00a0\n\n\n**Note:** The boy can buy the ice cream bars in any order.\n\n\nReturn *the **maximum** number of ice cream bars the boy can buy with* `coins` *coins.*\n\n\nYou must solve the problem by counting sort.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** costs = [1,3,2,4,1], coins = 7\n**Output:** 4\n**Explanation:** The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** costs = [10,6,8,7,7,8], coins = 5\n**Output:** 0\n**Explanation:** The boy cannot afford any of the ice cream bars.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** costs = [1,6,3,1,2,5], coins = 20\n**Output:** 6\n**Explanation:** The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `costs.length == n`\n* `1 <= n <= 105`\n* `1 <= costs[i] <= 105`\n* `1 <= coins <= 108`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxIceCream(self, costs: List[int], coins: int) -> int:\n        costs.sort()\n        for i, c in enumerate(costs):\n            if coins < c:\n                return i\n            coins -= c\n        return len(costs)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxIceCream(self, costs: List[int], coins: int) -> int:\n        costs.sort()\n        for i, c in enumerate(costs):\n            if coins < c:\n                return i\n            coins -= c\n        return len(costs)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random costs list\n    costs = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random number of coins\n    coins = random.randint(1, 201)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxIceCream(costs, coins)\n\n    return costs, coins, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        costs, coins, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxIceCream(costs, coins) == expected_result\n        print(f\"assert solution.maxIceCream({costs}, {coins}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxIceCream({costs}, {coins}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxIceCream([4, 7, 9, 35, 95], 12) == 2\nassert solution.maxIceCream([41, 42, 51, 56, 66, 82], 155) == 3\nassert solution.maxIceCream([3, 11, 12, 19, 46, 60, 79, 81, 82], 198) == 6\nassert solution.maxIceCream([15, 25, 29, 43, 45, 52, 54, 97], 46) == 2\nassert solution.maxIceCream([4, 14, 16, 30, 63, 71, 73, 83, 96], 200) == 6\nassert solution.maxIceCream([6, 98], 86) == 1\nassert solution.maxIceCream([2, 10, 24, 54, 56, 88], 91) == 4\nassert solution.maxIceCream([23, 35, 40, 45, 87, 96], 32) == 1\nassert solution.maxIceCream([13, 26, 40, 42, 98], 72) == 2\nassert solution.maxIceCream([24, 70], 200) == 2\nassert solution.maxIceCream([33, 34, 42, 44], 110) == 3\nassert solution.maxIceCream([1, 5, 18, 26, 74, 85], 196) == 5\nassert solution.maxIceCream([7, 35, 62, 69, 83, 85, 89], 151) == 3\nassert solution.maxIceCream([8, 50, 51, 53, 56, 60, 62, 65, 87, 96], 23) == 1\nassert solution.maxIceCream([8, 22, 60, 69, 76], 85) == 2\nassert solution.maxIceCream([7, 11, 20, 31, 33, 88], 200) == 6\nassert solution.maxIceCream([11, 26, 42, 53, 56, 58, 79, 83], 137) == 4\nassert solution.maxIceCream([1, 2, 43, 53], 154) == 4\nassert solution.maxIceCream([3, 10, 34, 61, 65, 72, 79, 88, 96, 98], 92) == 3\nassert solution.maxIceCream([20, 37, 51, 54, 57, 68], 8) == 0\nassert solution.maxIceCream([10, 14, 21, 33, 46, 70, 83, 84, 85], 39) == 2\nassert solution.maxIceCream([33, 41], 21) == 0\nassert solution.maxIceCream([2, 44], 101) == 2\nassert solution.maxIceCream([9, 33, 54, 56, 88, 99], 150) == 3\nassert solution.maxIceCream([16, 19, 27, 59, 64, 71, 75], 186) == 5\nassert solution.maxIceCream([17, 27, 47, 74, 84, 88, 95], 19) == 1\nassert solution.maxIceCream([34, 52, 55, 60, 93], 148) == 3\nassert solution.maxIceCream([8, 10, 13, 20, 23, 28, 44, 48, 57, 91], 57) == 4\nassert solution.maxIceCream([14, 24, 27, 38, 58, 64, 67, 71, 73, 81], 93) == 3\nassert solution.maxIceCream([5, 20, 45], 119) == 3\nassert solution.maxIceCream([30, 31, 80, 81], 167) == 3\nassert solution.maxIceCream([18, 54, 69], 186) == 3\nassert solution.maxIceCream([55, 59, 88, 96], 171) == 2\nassert solution.maxIceCream([3, 11, 49, 52, 54, 75, 80, 90], 67) == 3\nassert solution.maxIceCream([11, 54, 63, 73, 81], 168) == 3\nassert solution.maxIceCream([54, 81], 143) == 2\nassert solution.maxIceCream([3, 4, 25, 29, 34, 42, 52, 59, 76, 85], 42) == 3\nassert solution.maxIceCream([6, 23, 40, 43, 46, 51, 61, 70], 125) == 4\nassert solution.maxIceCream([13, 35, 39, 52], 119) == 3\nassert solution.maxIceCream([21, 31, 39, 64, 65, 82, 84, 89], 26) == 1\nassert solution.maxIceCream([8, 10, 31, 40, 44, 50, 52, 72, 79, 90], 74) == 3\nassert solution.maxIceCream([11, 27, 39, 44, 56, 57, 67, 90, 93], 179) == 5\nassert solution.maxIceCream([26, 27, 29, 32, 44, 84, 90, 91, 99], 79) == 2\nassert solution.maxIceCream([4, 12, 14, 17, 39, 65, 73, 77, 88, 92], 163) == 6\nassert solution.maxIceCream([13, 20, 52, 54, 56, 58, 64, 95], 185) == 4\nassert solution.maxIceCream([3, 11, 13, 27, 32, 40, 57, 60, 63, 77], 113) == 5\nassert solution.maxIceCream([19, 55, 73], 108) == 2\nassert solution.maxIceCream([13, 29, 30, 31, 51, 77, 83], 4) == 0\nassert solution.maxIceCream([8, 34, 44, 47, 55, 84, 90, 98], 14) == 1\nassert solution.maxIceCream([20, 22, 28, 69, 74], 152) == 4\nassert solution.maxIceCream([23, 31, 34, 43, 69, 74, 81, 85, 94], 105) == 3\nassert solution.maxIceCream([3, 13, 17, 47, 53, 67, 72, 84, 100], 102) == 4\nassert solution.maxIceCream([30, 33, 87], 11) == 0\nassert solution.maxIceCream([9, 27, 53], 48) == 2\nassert solution.maxIceCream([24, 40, 50], 170) == 3\nassert solution.maxIceCream([47, 54, 97, 100], 199) == 3\nassert solution.maxIceCream([7, 16, 100], 51) == 2\nassert solution.maxIceCream([14, 51, 76, 78, 86], 171) == 3\nassert solution.maxIceCream([6, 25, 35, 47, 51], 137) == 4\nassert solution.maxIceCream([10, 19, 21, 22, 39, 46, 66, 95, 96, 98], 29) == 2\nassert solution.maxIceCream([40, 78], 169) == 2\nassert solution.maxIceCream([10, 19, 28, 30, 41, 63, 92, 97, 99], 181) == 5\nassert solution.maxIceCream([18, 49, 55, 58, 80], 93) == 2\nassert solution.maxIceCream([11, 30, 47, 68, 71, 75], 167) == 4\nassert solution.maxIceCream([9, 23, 38, 42, 45, 58, 66, 89, 91], 147) == 4\nassert solution.maxIceCream([2, 13, 16, 19, 31, 35, 39, 44, 86, 100], 65) == 4\nassert solution.maxIceCream([4, 5, 11, 12, 33, 43, 67, 88], 57) == 4\nassert solution.maxIceCream([13, 21, 47, 98], 91) == 3\nassert solution.maxIceCream([9, 30, 48, 84, 99], 165) == 3\nassert solution.maxIceCream([55, 91, 99], 60) == 1\nassert solution.maxIceCream([4, 7, 12, 19, 25, 43, 51, 55, 78, 91], 32) == 3\nassert solution.maxIceCream([37, 53, 64, 80, 96], 170) == 3\nassert solution.maxIceCream([5, 8, 36, 41, 45, 46, 51, 79, 82, 99], 97) == 4\nassert solution.maxIceCream([4, 28, 70, 71], 103) == 3\nassert solution.maxIceCream([25, 26, 53, 86], 148) == 3\nassert solution.maxIceCream([31, 59, 63, 71, 76, 80], 23) == 0\nassert solution.maxIceCream([4, 19, 23, 27, 29, 54, 56, 68, 88, 94], 92) == 4\nassert solution.maxIceCream([76, 79, 83], 30) == 0\nassert solution.maxIceCream([12, 18, 32, 50, 54, 77, 79, 84, 86], 9) == 0\nassert solution.maxIceCream([28, 43, 81], 11) == 0\nassert solution.maxIceCream([23, 64, 72], 102) == 2\nassert solution.maxIceCream([14, 27, 40, 52, 60, 86], 184) == 4\nassert solution.maxIceCream([43, 79, 95], 86) == 1\nassert solution.maxIceCream([57, 66, 83, 88], 11) == 0\nassert solution.maxIceCream([32, 90], 195) == 2\nassert solution.maxIceCream([11, 13, 14, 37, 96, 99], 39) == 3\nassert solution.maxIceCream([55, 83], 53) == 0\nassert solution.maxIceCream([25, 56], 106) == 2\nassert solution.maxIceCream([11, 21, 24, 34, 35, 42, 68, 71, 79, 85], 146) == 5\nassert solution.maxIceCream([3, 7, 27, 28, 30, 33, 46, 58, 87, 94], 142) == 6\nassert solution.maxIceCream([18, 41, 53, 57, 59, 84, 96], 71) == 2\nassert solution.maxIceCream([10, 18, 37, 39, 45, 56, 61, 66, 93], 83) == 3\nassert solution.maxIceCream([16, 29, 97], 146) == 3\nassert solution.maxIceCream([13, 18, 21, 45, 77], 194) == 5\nassert solution.maxIceCream([44, 78], 135) == 2\nassert solution.maxIceCream([14, 24, 25, 27, 39, 58, 61, 64, 69], 82) == 3\nassert solution.maxIceCream([6, 8, 13, 19, 26, 35, 62, 78, 96, 99], 111) == 6\nassert solution.maxIceCream([1, 23, 36, 46, 53, 56, 59, 76, 98], 53) == 2\nassert solution.maxIceCream([5, 94], 6) == 1\nassert solution.maxIceCream([17, 82, 83, 84, 87], 41) == 1",
  "inefficient_solution": "class Solution:\n    def maxIceCream(self, costs: List[int], coins: int) -> int:\n        max_cost = max(costs)\n        costs.sort()\n        bought = 0\n        while coins > 0:\n            for i, c in enumerate(costs):\n                if i >= len(costs):\n                    break\n                if coins < c:\n                    break\n                coins -= c\n                bought += 1\n                del costs[bought-1]\n        return bought",
  "is_python": true
}