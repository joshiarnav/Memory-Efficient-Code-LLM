{
  "problem_idx": 264,
  "task_name": "Ugly Number II",
  "markdown_description": "\nAn **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.\n\n\nGiven an integer `n`, return *the* `nth` ***ugly number***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 12\n**Explanation:** [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 1\n**Explanation:** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1690`\n\n\n",
  "canonical_solution": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        dp = [1] * n\n        p2 = p3 = p5 = 0\n        for i in range(1, n):\n            next2, next3, next5 = dp[p2] * 2, dp[p3] * 3, dp[p5] * 5\n            dp[i] = min(next2, next3, next5)\n            if dp[i] == next2:\n                p2 += 1\n            if dp[i] == next3:\n                p3 += 1\n            if dp[i] == next5:\n                p5 += 1\n        return dp[n - 1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        dp = [1] * n\n        p2 = p3 = p5 = 0\n        for i in range(1, n):\n            next2, next3, next5 = dp[p2] * 2, dp[p3] * 3, dp[p5] * 5\n            dp[i] = min(next2, next3, next5)\n            if dp[i] == next2:\n                p2 += 1\n            if dp[i] == next3:\n                p3 += 1\n            if dp[i] == next5:\n                p5 += 1\n        return dp[n - 1]\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random value for n\n    n = random.randint(1, 1690)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.nthUglyNumber(n)\n\n    return n, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.nthUglyNumber(n) == expected_result\n        print(f\"assert solution.nthUglyNumber({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.nthUglyNumber({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.nthUglyNumber(492) == 864000\nassert solution.nthUglyNumber(536) == 1350000\nassert solution.nthUglyNumber(1046) == 69120000\nassert solution.nthUglyNumber(1422) == 583200000\nassert solution.nthUglyNumber(1232) == 209715200\nassert solution.nthUglyNumber(1668) == 1920000000\nassert solution.nthUglyNumber(724) == 7085880\nassert solution.nthUglyNumber(619) == 2949120\nassert solution.nthUglyNumber(289) == 72000\nassert solution.nthUglyNumber(1655) == 1811939328\nassert solution.nthUglyNumber(929) == 32000000\nassert solution.nthUglyNumber(648) == 3796875\nassert solution.nthUglyNumber(1474) == 759375000\nassert solution.nthUglyNumber(3) == 3\nassert solution.nthUglyNumber(786) == 11664000\nassert solution.nthUglyNumber(1168) == 145800000\nassert solution.nthUglyNumber(4) == 4\nassert solution.nthUglyNumber(1225) == 201326592\nassert solution.nthUglyNumber(713) == 6480000\nassert solution.nthUglyNumber(319) == 109350\nassert solution.nthUglyNumber(1539) == 1036800000\nassert solution.nthUglyNumber(637) == 3456000\nassert solution.nthUglyNumber(1328) == 354294000\nassert solution.nthUglyNumber(1362) == 424673280\nassert solution.nthUglyNumber(1682) == 2040733440\nassert solution.nthUglyNumber(506) == 995328\nassert solution.nthUglyNumber(1121) == 110592000\nassert solution.nthUglyNumber(1342) == 382637520\nassert solution.nthUglyNumber(3) == 3\nassert solution.nthUglyNumber(51) == 250\nassert solution.nthUglyNumber(1626) == 1574640000\nassert solution.nthUglyNumber(191) == 13500\nassert solution.nthUglyNumber(202) == 16875\nassert solution.nthUglyNumber(1257) == 241864704\nassert solution.nthUglyNumber(793) == 12288000\nassert solution.nthUglyNumber(58) == 360\nassert solution.nthUglyNumber(1391) == 497664000\nassert solution.nthUglyNumber(839) == 17006112\nassert solution.nthUglyNumber(455) == 583200\nassert solution.nthUglyNumber(150) == 5832\nassert solution.nthUglyNumber(286) == 67500\nassert solution.nthUglyNumber(464) == 640000\nassert solution.nthUglyNumber(352) == 168750\nassert solution.nthUglyNumber(507) == 1000000\nassert solution.nthUglyNumber(1371) == 447897600\nassert solution.nthUglyNumber(705) == 6144000\nassert solution.nthUglyNumber(1587) == 1310720000\nassert solution.nthUglyNumber(786) == 11664000\nassert solution.nthUglyNumber(68) == 512\nassert solution.nthUglyNumber(261) == 46875\nassert solution.nthUglyNumber(1336) == 373248000\nassert solution.nthUglyNumber(1311) == 322486272\nassert solution.nthUglyNumber(411) == 354294\nassert solution.nthUglyNumber(963) == 40310784\nassert solution.nthUglyNumber(1160) == 138240000\nassert solution.nthUglyNumber(378) == 240000\nassert solution.nthUglyNumber(748) == 8503056\nassert solution.nthUglyNumber(934) == 33554432\nassert solution.nthUglyNumber(871) == 21257640\nassert solution.nthUglyNumber(789) == 11809800\nassert solution.nthUglyNumber(1395) == 506250000\nassert solution.nthUglyNumber(540) == 1406250\nassert solution.nthUglyNumber(1363) == 425152800\nassert solution.nthUglyNumber(442) == 500000\nassert solution.nthUglyNumber(942) == 35389440\nassert solution.nthUglyNumber(1323) == 344373768\nassert solution.nthUglyNumber(190) == 13122\nassert solution.nthUglyNumber(534) == 1312200\nassert solution.nthUglyNumber(1252) == 235929600\nassert solution.nthUglyNumber(107) == 1944\nassert solution.nthUglyNumber(126) == 3200\nassert solution.nthUglyNumber(1368) == 439453125\nassert solution.nthUglyNumber(1389) == 491520000\nassert solution.nthUglyNumber(705) == 6144000\nassert solution.nthUglyNumber(1004) == 52734375\nassert solution.nthUglyNumber(1135) == 119574225\nassert solution.nthUglyNumber(1055) == 73728000\nassert solution.nthUglyNumber(625) == 3110400\nassert solution.nthUglyNumber(260) == 46656\nassert solution.nthUglyNumber(277) == 60000\nassert solution.nthUglyNumber(1641) == 1687500000\nassert solution.nthUglyNumber(287) == 69120\nassert solution.nthUglyNumber(869) == 21093750\nassert solution.nthUglyNumber(813) == 14155776\nassert solution.nthUglyNumber(1228) == 204073344\nassert solution.nthUglyNumber(367) == 204800\nassert solution.nthUglyNumber(16) == 25\nassert solution.nthUglyNumber(1350) == 398580750\nassert solution.nthUglyNumber(693) == 5529600\nassert solution.nthUglyNumber(1163) == 141557760\nassert solution.nthUglyNumber(1295) == 298598400\nassert solution.nthUglyNumber(442) == 500000\nassert solution.nthUglyNumber(204) == 17496\nassert solution.nthUglyNumber(58) == 360\nassert solution.nthUglyNumber(1390) == 492075000\nassert solution.nthUglyNumber(1652) == 1791590400\nassert solution.nthUglyNumber(141) == 4608\nassert solution.nthUglyNumber(875) == 22143375\nassert solution.nthUglyNumber(1539) == 1036800000\nassert solution.nthUglyNumber(600) == 2460375",
  "inefficient_solution": "class Solution:\n    def nthUglyNumber(self, n: int) -> int:\n        dp = [0] * (n * 100)\n        for i in range(n):\n            dp[i] = i + 1\n        p2, p3, p5 = 0, 0, 0\n        for i in range(n):\n            next2, next3, next5 = dp[p2] * 2, dp[p3] * 3, dp[p5] * 5\n            for j in range(i, n):\n                if dp[j] >= min(next2, next3, next5):\n                    break\n                dp[j] = min(next2, next3, next5)\n            if dp[i] == next2:\n                p2 += 1\n            if dp[i] == next3:\n                p3 += 1\n            if dp[i] == next5:\n                p5 += 1\n        return dp[n - 1]",
  "is_python": true
}