{
  "problem_idx": 358,
  "task_name": "Rearrange String k Distance Apart",
  "markdown_description": "\nGiven a string `s` and an integer `k`, rearrange `s` such that the same characters are **at least** distance `k` from each other. If it is not possible to rearrange the string, return an empty string `\"\"`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aabbcc\", k = 3\n**Output:** \"abcabc\"\n**Explanation:** The same letters are at least a distance of 3 from each other.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aaabc\", k = 3\n**Output:** \"\"\n**Explanation:** It is not possible to rearrange the string.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"aaadbbcc\", k = 2\n**Output:** \"abacabcd\"\n**Explanation:** The same letters are at least a distance of 2 from each other.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 3 * 105`\n* `s` consists of only lowercase English letters.\n* `0 <= k <= s.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def rearrangeString(self, s: str, k: int) -> str:\n        h = [(-v, c) for c, v in Counter(s).items()]\n        heapify(h)\n        q = deque()\n        ans = []\n        while h:\n            v, c = heappop(h)\n            v *= -1\n            ans.append(c)\n            q.append((v - 1, c))\n            if len(q) >= k:\n                w, c = q.popleft()\n                if w:\n                    heappush(h, (-w, c))\n        return \"\" if len(ans) != len(s) else \"\".join(ans)\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom heapq import heappop, heappush\nfrom collections import deque\n\nclass Solution:\n    def rearrangeString(self, s: str, k: int) -> str:\n        h = [(-v, c) for c, v in Counter(s).items()]\n        heapify(h)\n        q = deque()\n        ans = []\n        while h:\n            v, c = heappop(h)\n            v *= -1\n            ans.append(c)\n            q.append((v - 1, c))\n            if len(q) >= k:\n                w, c = q.popleft()\n                if w:\n                    heappush(h, (-w, c))\n        return \"\" if len(ans) != len(s) else \"\".join(ans)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random string\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 11)))\n\n    # Generate random k\n    k = random.randint(0, len(s))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.rearrangeString(s, k)\n\n    return s, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.rearrangeString(s, k) == expected_result\n        if expected_result:\n            print(f\"assert solution.rearrangeString('{s}', {k}) == '{expected_result}'\")\n            test_case_generator_results.append(\n                f\"assert solution.rearrangeString('{s}', {k}) == '{expected_result}'\")  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.rearrangeString('by', 0) == 'by'\nassert solution.rearrangeString('olu', 1) == 'lou'\nassert solution.rearrangeString('cuigkxmgv', 4) == 'gcikgmuvx'\nassert solution.rearrangeString('kucgbvgnefy', 8) == 'gbcefknugvy'\nassert solution.rearrangeString('znvpkq', 5) == 'knpqvz'\nassert solution.rearrangeString('bq', 2) == 'bq'\nassert solution.rearrangeString('ura', 3) == 'aru'\nassert solution.rearrangeString('ettdnyj', 6) == 'tdejnyt'\nassert solution.rearrangeString('ntxy', 1) == 'ntxy'\nassert solution.rearrangeString('cxruog', 2) == 'cgorux'\nassert solution.rearrangeString('hljbyxsno', 4) == 'bhjlnosxy'\nassert solution.rearrangeString('ayes', 3) == 'aesy'\nassert solution.rearrangeString('mryxn', 1) == 'mnrxy'\nassert solution.rearrangeString('yyubex', 0) == 'ybeuxy'\nassert solution.rearrangeString('cvdymy', 2) == 'ycdmvy'\nassert solution.rearrangeString('krb', 1) == 'bkr'\nassert solution.rearrangeString('sbfmpop', 4) == 'pbfmops'\nassert solution.rearrangeString('tpqikb', 6) == 'bikpqt'\nassert solution.rearrangeString('ahmxrgo', 3) == 'aghmorx'\nassert solution.rearrangeString('l', 1) == 'l'\nassert solution.rearrangeString('wodptubbdr', 2) == 'bdbdoprtuw'\nassert solution.rearrangeString('flvpjh', 0) == 'fhjlpv'\nassert solution.rearrangeString('el', 1) == 'el'\nassert solution.rearrangeString('nzqm', 3) == 'mnqz'\nassert solution.rearrangeString('uytepinc', 2) == 'ceinptuy'\nassert solution.rearrangeString('vwoluyfg', 3) == 'fglouvwy'\nassert solution.rearrangeString('fbqgxhr', 7) == 'bfghqrx'\nassert solution.rearrangeString('ejumpt', 1) == 'ejmptu'\nassert solution.rearrangeString('ilckb', 3) == 'bcikl'\nassert solution.rearrangeString('lrbvydokgtm', 0) == 'bdgklmortvy'\nassert solution.rearrangeString('ylsfsp', 2) == 'sflpsy'\nassert solution.rearrangeString('pfpnuzemd', 5) == 'pdefmnpuz'\nassert solution.rearrangeString('ddkqehwsfkn', 7) == 'dkefhnqdksw'\nassert solution.rearrangeString('pg', 2) == 'gp'\nassert solution.rearrangeString('wqlgijsdegy', 10) == 'gdeijlqswyg'\nassert solution.rearrangeString('xfpm', 2) == 'fmpx'\nassert solution.rearrangeString('bf', 0) == 'bf'\nassert solution.rearrangeString('ummaesl', 6) == 'maelsum'\nassert solution.rearrangeString('xdiu', 3) == 'diux'\nassert solution.rearrangeString('mvqvswttr', 3) == 'tvmqrstvw'\nassert solution.rearrangeString('kqsbgjtn', 1) == 'bgjknqst'\nassert solution.rearrangeString('dovz', 4) == 'dovz'\nassert solution.rearrangeString('pacjjnyuj', 1) == 'jjacjnpuy'\nassert solution.rearrangeString('ug', 1) == 'gu'\nassert solution.rearrangeString('mpgl', 2) == 'glmp'\nassert solution.rearrangeString('ljkt', 3) == 'jklt'\nassert solution.rearrangeString('xe', 2) == 'ex'\nassert solution.rearrangeString('nv', 2) == 'nv'\nassert solution.rearrangeString('eooiker', 3) == 'eoiekor'\nassert solution.rearrangeString('zgysa', 2) == 'agsyz'\nassert solution.rearrangeString('himjqvqdr', 2) == 'qdhijmqrv'\nassert solution.rearrangeString('ttjdsn', 2) == 'tdjnst'\nassert solution.rearrangeString('njx', 1) == 'jnx'\nassert solution.rearrangeString('sdgi', 0) == 'dgis'\nassert solution.rearrangeString('nnbzfvts', 2) == 'nbfnstvz'\nassert solution.rearrangeString('islcueitw', 6) == 'icelstiuw'\nassert solution.rearrangeString('rwz', 2) == 'rwz'\nassert solution.rearrangeString('dxicbulqw', 2) == 'bcdilquwx'\nassert solution.rearrangeString('yrqdkisr', 5) == 'rdikqrsy'\nassert solution.rearrangeString('kf', 2) == 'fk'\nassert solution.rearrangeString('iyac', 0) == 'aciy'\nassert solution.rearrangeString('nytxhzmzn', 0) == 'nzhmntxyz'\nassert solution.rearrangeString('uhoijna', 0) == 'ahijnou'\nassert solution.rearrangeString('w', 1) == 'w'\nassert solution.rearrangeString('mjzb', 4) == 'bjmz'\nassert solution.rearrangeString('h', 0) == 'h'\nassert solution.rearrangeString('oexakxkgny', 0) == 'kxaegknoxy'\nassert solution.rearrangeString('j', 0) == 'j'\nassert solution.rearrangeString('bxyvexcfn', 5) == 'xbcefnvxy'\nassert solution.rearrangeString('vwxcopdgwso', 1) == 'owcdgopsvwx'\nassert solution.rearrangeString('rlwt', 0) == 'lrtw'\nassert solution.rearrangeString('mkynolgsfdz', 10) == 'dfgklmnosyz'\nassert solution.rearrangeString('zohnpiqyah', 5) == 'hainohpqyz'\nassert solution.rearrangeString('ftugnzg', 2) == 'gfgntuz'\nassert solution.rearrangeString('jriqc', 4) == 'cijqr'\nassert solution.rearrangeString('lpshwquwfz', 6) == 'wfhlpqsuwz'\nassert solution.rearrangeString('sgutid', 6) == 'dgistu'\nassert solution.rearrangeString('qoljk', 5) == 'jkloq'\nassert solution.rearrangeString('gctedgmdgou', 2) == 'gdgcdegmotu'\nassert solution.rearrangeString('hilzrxlfv', 3) == 'lfhilrvxz'\nassert solution.rearrangeString('xiqhlapf', 4) == 'afhilpqx'\nassert solution.rearrangeString('xocka', 5) == 'ackox'\nassert solution.rearrangeString('vrnodhe', 4) == 'dehnorv'\nassert solution.rearrangeString('zlsst', 3) == 'sltsz'\nassert solution.rearrangeString('vof', 3) == 'fov'\nassert solution.rearrangeString('swzgzuciyt', 2) == 'zcgistuwyz'\nassert solution.rearrangeString('e', 0) == 'e'\nassert solution.rearrangeString('ofpnlgadio', 0) == 'oadfgilnop'\nassert solution.rearrangeString('gpapb', 3) == 'pabgp'\nassert solution.rearrangeString('rox', 0) == 'orx'\nassert solution.rearrangeString('be', 1) == 'be'\nassert solution.rearrangeString('hpvtq', 2) == 'hpqtv'",
  "inefficient_solution": "class Solution:\n    def rearrangeString(self, s: str, k: int) -> str:\n        freq = {}\n        for c in s:\n            if c in freq:\n                freq[c].append(1)\n            else:\n                freq[c] = [1]\n        \n        result = []\n        for c in sorted(freq.keys()):\n            result.extend([c] * sum(freq[c]))\n        \n        if len(result) < k:\n            return \"\"\n        \n        ans = []\n        for i in range(0, len(result), k):\n            ans.append(''.join(result[i:i+k]))\n        \n        if len(ans) > 1 and ans[0] == ans[1]:\n            return \"\"\n        \n        return ''.join(ans)",
  "is_python": true
}