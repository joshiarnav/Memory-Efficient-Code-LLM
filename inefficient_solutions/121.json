{
  "problem_idx": 121,
  "task_name": "Best Time to Buy and Sell Stock",
  "markdown_description": "\nYou are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\n\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\n\n\nReturn *the maximum profit you can achieve from this transaction*. If you cannot achieve any profit, return `0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prices = [7,1,5,3,6,4]\n**Output:** 5\n**Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prices = [7,6,4,3,1]\n**Output:** 0\n**Explanation:** In this case, no transactions are done and the max profit = 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prices.length <= 105`\n* `0 <= prices[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        ans, mi = 0, inf\n        for v in prices:\n            ans = max(ans, v - mi)\n            mi = min(mi, v)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxProfit(self, prices):\n        ans, mi = 0, float('inf')\n        for v in prices:\n            ans = max(ans, v - mi)\n            mi = min(mi, v)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random prices list\n    prices = [random.randint(0, 10000) for _ in range(random.randint(1, 20))]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxProfit(prices)\n\n    return prices, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        prices, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxProfit(prices) == expected_result\n        test_case_generator_results.append(f\"assert solution.maxProfit({prices}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxProfit([2136, 5637]) == 3501\nassert solution.maxProfit([5966]) == 0\nassert solution.maxProfit([416, 135, 1452, 9121, 2608, 3114, 3148, 5258, 1904, 2423, 8247, 9952, 8276, 4752, 3363]) == 9817\nassert solution.maxProfit([2553, 3978, 1980, 5163, 5917, 6679, 4274, 1795, 5458, 1603, 1732, 5347, 2449, 8148, 6257, 4122, 2186]) == 6545\nassert solution.maxProfit([7519, 2215, 6141, 1931, 9296, 7621, 2778, 6177, 2936, 5776, 4859, 1181, 8082]) == 7365\nassert solution.maxProfit([1907, 7607, 2899, 978, 6666, 6454, 488, 5160, 4017, 6404]) == 5916\nassert solution.maxProfit([8570, 1166, 5196, 2683, 2701, 7917, 8110, 9521, 4718, 6486, 3987]) == 8355\nassert solution.maxProfit([1194, 118, 4150, 3383, 944, 4979, 2995, 5905, 1233, 2715, 1847]) == 5787\nassert solution.maxProfit([8170, 5134, 9186, 6792, 1382, 3280, 1348, 8749, 9239, 7941, 9427, 107]) == 8079\nassert solution.maxProfit([7317, 4751, 6457, 2579, 2603, 282, 230, 2018, 6867]) == 6637\nassert solution.maxProfit([231, 9782, 6283, 5976, 1864, 1359, 7597, 7712, 2148, 1936, 138, 8188, 5382, 9437, 1649, 8865]) == 9551\nassert solution.maxProfit([939, 3336, 4030, 9928]) == 8989\nassert solution.maxProfit([8764, 1611, 8931, 3117, 9209, 3103, 4402, 4755, 2251, 1898]) == 7598\nassert solution.maxProfit([6823, 7114, 6544, 3880, 8258, 6757, 5688, 2736, 6086, 4794, 1845, 9847, 3891, 6, 8155, 8724, 9535, 1635, 808]) == 9529\nassert solution.maxProfit([9192, 6263, 8923, 1717, 7057, 1497, 2237, 1643, 7878, 6508, 9945, 6819, 5459, 9352, 9081, 9760, 7738, 7408, 9638, 8667]) == 8448\nassert solution.maxProfit([5004, 2002, 3526, 2262, 9244]) == 7242\nassert solution.maxProfit([2758, 7690, 3170, 6305, 3572, 6303]) == 4932\nassert solution.maxProfit([7761, 7420]) == 0\nassert solution.maxProfit([6258, 401, 1749, 414, 9202, 8806, 4389, 4427, 5096]) == 8801\nassert solution.maxProfit([6821]) == 0\nassert solution.maxProfit([6587, 2848, 7002, 2045, 7828, 1932, 6136, 809, 1700, 3592, 1249, 7042, 3975, 4842, 5275, 5191]) == 6233\nassert solution.maxProfit([9637, 6012, 5240, 5015, 1972, 4630, 9225]) == 7253\nassert solution.maxProfit([1859, 3938, 4100, 6944, 9413, 449, 999, 6804, 9525, 687, 7966, 760]) == 9076\nassert solution.maxProfit([1561, 3658, 5730, 6615, 8916, 5355, 3016, 8102, 1326, 9231, 8487, 9774, 7024, 5384, 3789, 6627, 6524, 9826, 5591]) == 8500\nassert solution.maxProfit([1721, 1939, 8509, 5705, 4713]) == 6788\nassert solution.maxProfit([1978, 9809, 5651, 8587, 508, 7937]) == 7831\nassert solution.maxProfit([1433, 2270, 7728, 3694, 6013, 2380]) == 6295\nassert solution.maxProfit([838, 3234, 4784, 5691, 6826, 7795, 7109, 7607, 5080, 7389, 3255, 6469, 2250, 3942, 6308, 478, 7722, 5174]) == 7244\nassert solution.maxProfit([8480, 728, 9953, 2597, 8673, 5044, 5647, 3755, 6128, 7728, 7844, 1537, 1459, 16, 7368, 3127, 4514, 2812, 1763, 230]) == 9225\nassert solution.maxProfit([2291, 762]) == 0\nassert solution.maxProfit([3171, 7912, 5125, 454, 2602, 2889, 8458, 1450, 1314, 6917, 960, 2970, 6158, 3793, 5743]) == 8004\nassert solution.maxProfit([7254, 4213, 9038]) == 4825\nassert solution.maxProfit([641, 5320, 7286, 6979, 2769, 4356, 7476, 9174, 6972, 9134, 7604, 943, 2197, 1159]) == 8533\nassert solution.maxProfit([4270, 8807, 8118, 5424, 9887, 6205, 449, 1203, 8480, 8487, 9951, 1778, 5438, 7695, 8875, 4133, 2528]) == 9502\nassert solution.maxProfit([1637, 1194, 5286, 596, 4418, 4352, 7912, 1054, 3040, 801, 2578, 7838, 5885, 4904, 6832, 3104, 6284, 9823]) == 9227\nassert solution.maxProfit([3047, 3593, 4880, 839, 8424, 2673, 299, 2341, 9451, 2447, 2268, 2788, 3232, 4743, 9317, 3461, 6281, 6337, 2268]) == 9152\nassert solution.maxProfit([8010, 2737, 506, 1633, 8112, 8903, 7115, 1704, 4576, 261, 3672, 9915, 3833, 8508]) == 9654\nassert solution.maxProfit([7349]) == 0\nassert solution.maxProfit([5800, 3992, 6085, 9271, 5393, 2609, 8656, 6934, 4731, 3010, 2456, 9253, 8188, 9381, 719, 7623, 8972, 1596, 880]) == 8253\nassert solution.maxProfit([1090, 7233, 7621, 8685, 8525, 3832, 651, 1083]) == 7595\nassert solution.maxProfit([7762, 2300, 4331, 7515, 7241]) == 5215\nassert solution.maxProfit([4440]) == 0\nassert solution.maxProfit([8563, 3690, 8950, 1471, 4785, 954, 786, 7244, 7390, 6478, 391, 3438, 1945, 196, 8538, 5341, 3433, 6638, 3125, 5950]) == 8342\nassert solution.maxProfit([4931, 3064, 9340, 1347, 1033, 9168, 5368, 6850, 5489, 8170, 5235, 1732, 1852, 5655, 4341, 290]) == 8135\nassert solution.maxProfit([6496, 3577, 2275, 6018, 5687, 6476, 7621, 5609, 4171, 457, 143, 1414, 8786, 8752, 4523, 6854, 2938, 7879, 9782, 4430]) == 9639\nassert solution.maxProfit([6508, 5859]) == 0\nassert solution.maxProfit([1021, 6631, 5410, 2012]) == 5610\nassert solution.maxProfit([1070, 1268, 5804, 7512, 8180, 5438, 9925, 1534, 1784, 6281, 257, 7599, 972, 487, 1037, 4219]) == 8855\nassert solution.maxProfit([5550, 4366]) == 0\nassert solution.maxProfit([2703, 9757, 4518, 8507, 3463, 1195, 422, 4530, 7207, 3700, 4909, 3174, 9434, 4603, 261, 5884]) == 9012\nassert solution.maxProfit([32, 2969, 5748, 3105, 8274, 2347, 305, 2319, 6658, 1268, 2712, 5018, 6694, 9877]) == 9845\nassert solution.maxProfit([5851]) == 0\nassert solution.maxProfit([9821, 5171, 5187, 5608, 7217, 649, 5144, 2912, 3879, 5031, 2697, 189, 1824, 3161, 7693, 8528, 7178, 6652, 2052]) == 8339\nassert solution.maxProfit([3613, 8952, 579, 3889, 6918, 3044, 7187, 4648, 7326, 7478, 6525]) == 6899\nassert solution.maxProfit([5103, 8014, 2368, 754, 4569, 5826, 4383, 3478, 5586, 3345, 8408, 6234, 7100, 1649, 4511, 3510, 8352]) == 7654\nassert solution.maxProfit([2073, 4597]) == 2524\nassert solution.maxProfit([4084]) == 0\nassert solution.maxProfit([3915, 5119, 1781]) == 1204\nassert solution.maxProfit([6577, 6217]) == 0\nassert solution.maxProfit([4008, 3153, 342, 1692, 248, 2683, 6059, 9871]) == 9623\nassert solution.maxProfit([1967, 3404, 1825, 9205, 858, 942, 2166]) == 7380\nassert solution.maxProfit([2832, 4537, 5126, 1926, 6980, 8483, 3518, 9687, 7159, 1896, 7274, 5214, 1966, 8101, 5584]) == 7761\nassert solution.maxProfit([6134, 7837, 2801, 754]) == 1703\nassert solution.maxProfit([487, 4122, 4548, 1491, 3503]) == 4061\nassert solution.maxProfit([6692, 954, 3425, 5558]) == 4604\nassert solution.maxProfit([7441, 6204, 5717, 2949, 2204, 8559, 1690, 7316, 1999, 8841, 1932, 4548, 9988, 4378]) == 8298\nassert solution.maxProfit([1620, 3500, 8511, 7069, 5712, 5040, 9539, 6364, 9574, 3298, 9007, 1715, 9399, 3120, 341, 1052, 6628, 4883, 3768, 845]) == 7954\nassert solution.maxProfit([9530, 8385, 423, 5864, 871, 688]) == 5441\nassert solution.maxProfit([4270, 9900, 3029, 1339, 3750, 2244, 296, 3221, 5601, 1106, 35, 19, 4969]) == 5630\nassert solution.maxProfit([5699, 5702, 3163, 8569, 8371, 7816, 2508, 2830]) == 5406\nassert solution.maxProfit([6318, 3918, 9077, 2982, 7751, 759, 398, 6132, 7759, 898, 2567, 5195, 2964, 9543, 2263, 3710, 5157, 2048, 5124, 7204]) == 9145\nassert solution.maxProfit([5597, 870, 5541, 3097, 4923]) == 4671\nassert solution.maxProfit([5144, 4171, 9421, 3284, 8259, 990, 9303, 3354]) == 8313\nassert solution.maxProfit([2885, 698, 764, 2028, 5056]) == 4358\nassert solution.maxProfit([5102, 8444, 4576, 7446, 2069, 4779, 1294, 8798, 5463, 3883, 9089, 7167, 8308, 4551, 1668, 3667, 6081]) == 7795\nassert solution.maxProfit([8095, 285, 7373, 9063, 3704, 6885, 1585, 8996]) == 8778\nassert solution.maxProfit([2949, 9667]) == 6718\nassert solution.maxProfit([6077, 6080, 4226, 3607, 1818, 1230, 8941, 7163, 9318, 3873, 4381, 5766, 1030, 5511, 188, 1292, 9082]) == 8894\nassert solution.maxProfit([6242, 341, 5166, 2124, 5525, 4275, 9341, 1892, 6690, 9640, 6044, 1082, 8233]) == 9299\nassert solution.maxProfit([1185, 3601, 2909, 9949, 2504, 6451, 6383, 4557, 7141, 3196]) == 8764\nassert solution.maxProfit([548, 4462, 6739, 7815, 8015, 4144, 7756, 2342, 2363, 2021, 8060, 4662, 3619]) == 7512\nassert solution.maxProfit([427, 4639, 5708, 430, 4869, 7362, 1624, 151, 1034, 6478]) == 6935\nassert solution.maxProfit([2677, 2633, 3260, 2535]) == 627\nassert solution.maxProfit([2119, 7327, 4303, 7364, 4772, 288, 6234, 1622, 7496, 6995, 8433, 3498, 3530]) == 8145\nassert solution.maxProfit([8628, 483, 3393, 6969, 3368]) == 6486\nassert solution.maxProfit([5794, 5619]) == 0\nassert solution.maxProfit([5154, 2984, 7618]) == 4634\nassert solution.maxProfit([3938, 3861, 2942, 5612, 67, 8292, 4556, 4699, 9076, 9904, 2690, 8106, 8285, 2756, 3448, 9935, 2288]) == 9868\nassert solution.maxProfit([7677, 9936, 1743, 3271, 8375, 7, 4490, 2963, 8086, 3700, 7223, 3975, 3102]) == 8079\nassert solution.maxProfit([5640, 3056, 9667, 2418]) == 6611\nassert solution.maxProfit([5887]) == 0\nassert solution.maxProfit([2914, 69, 8737, 9595, 3391, 7854, 2197]) == 9526\nassert solution.maxProfit([2760, 1731, 5294, 2236, 6143, 8564, 5130, 806, 9327, 5773, 47, 541, 9391, 959, 1301, 8097, 5843, 8494, 3373, 7025]) == 9344\nassert solution.maxProfit([241, 8113, 8597, 5045, 6542, 954, 1452, 8839, 4854, 1250, 4786, 3823, 7270]) == 8598\nassert solution.maxProfit([7669, 7439, 2106, 8234, 1961, 2624, 9185, 9953, 1576, 953, 7050, 1180, 3641, 7672, 1537, 5675]) == 7992\nassert solution.maxProfit([1317, 8286, 2166, 5119, 586, 2767, 6153, 4639, 6462, 6289, 134, 708, 5492, 532, 6499, 1298, 8984]) == 8850\nassert solution.maxProfit([9898, 3624, 4864, 9487, 2790, 2949, 9106, 8843, 1927, 7282]) == 6316\nassert solution.maxProfit([7240, 3874, 1528, 1394, 2991, 5584]) == 4190\nassert solution.maxProfit([5477, 6871, 8303, 1670, 4999, 800, 1233, 5040, 1469, 8953, 5403, 5918, 7166, 9703, 8777, 132, 2826, 3030, 3354, 4867]) == 8903\nassert solution.maxProfit([1042, 9210, 8093, 5718, 3259, 9447, 576, 9342, 1118, 6788, 8049, 7899, 1355]) == 8766",
  "inefficient_solution": "class Solution:\n    def maxProfit(self, prices):\n        n = len(prices)\n        profit = [[0 for _ in range(n)] for _ in range(n)]\n        min_price = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            min_price[i][i] = prices[i]\n            for j in range(i + 1, n):\n                min_price[i][j] = min(prices[j], min_price[i][j - 1])\n                profit[i][j] = max(prices[j] - min_price[i][j - 1], profit[i][j - 1])\n        return profit[0][n - 1]",
  "is_python": true
}