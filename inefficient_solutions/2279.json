{
  "problem_idx": 2279,
  "task_name": "Maximum Bags With Full Capacity of Rocks",
  "markdown_description": "\nYou have `n` bags numbered from `0` to `n - 1`. You are given two **0-indexed** integer arrays `capacity` and `rocks`. The `ith` bag can hold a maximum of `capacity[i]` rocks and currently contains `rocks[i]` rocks. You are also given an integer `additionalRocks`, the number of additional rocks you can place in **any** of the bags.\n\n\nReturn *the **maximum** number of bags that could have full capacity after placing the additional rocks in some bags.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2\n**Output:** 3\n**Explanation:**\nPlace 1 rock in bag 0 and 1 rock in bag 1.\nThe number of rocks in each bag are now [2,3,4,4].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that there may be other ways of placing the rocks that result in an answer of 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100\n**Output:** 3\n**Explanation:**\nPlace 8 rocks in bag 0 and 2 rocks in bag 2.\nThe number of rocks in each bag are now [10,2,2].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that we did not use all of the additional rocks.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == capacity.length == rocks.length`\n* `1 <= n <= 5 * 104`\n* `1 <= capacity[i] <= 109`\n* `0 <= rocks[i] <= capacity[i]`\n* `1 <= additionalRocks <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumBags(\n        self, capacity: List[int], rocks: List[int], additionalRocks: int\n    ) -> int:\n        d = [a - b for a, b in zip(capacity, rocks)]\n        d.sort()\n        ans = 0\n        for v in d:\n            if v <= additionalRocks:\n                ans += 1\n                additionalRocks -= v\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumBags(self, capacity, rocks, additionalRocks):\n        d = [a - b for a, b in zip(capacity, rocks)]\n        d.sort()\n        ans = 0\n        for v in d:\n            if v <= additionalRocks:\n                ans += 1\n                additionalRocks -= v\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n\n    n = random.randint(1, 11)\n    \n    # Generate random lists for capacity and rocks\n    capacity = random.sample(range(1, 100), n)\n    rocks = random.sample(range(0, 100), n)\n    \n    # Generate a random value for additionalRocks\n    additionalRocks = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumBags(capacity, rocks, additionalRocks)\n\n    return capacity, rocks, additionalRocks, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        capacity, rocks, additionalRocks, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumBags(capacity, rocks, additionalRocks) == expected_result\n        print(f\"assert solution.maximumBags({capacity}, {rocks}, {additionalRocks}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumBags({capacity}, {rocks}, {additionalRocks}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumBags([23, 9, 49, 10, 71, 38, 27, 61, 48, 25], [17, 37, 10, 74, 90, 20, 6, 34, 9, 24], 11) == 9\nassert solution.maximumBags([92, 52, 32], [88, 8, 7], 30) == 2\nassert solution.maximumBags([56, 16, 22, 27, 98, 52, 7, 86, 20], [8, 59, 30, 45, 17, 43, 90, 24, 62], 11) == 9\nassert solution.maximumBags([11, 42, 86, 43, 80, 47, 78, 49, 29, 75, 46], [61, 9, 60, 49, 43, 62, 24, 14, 48, 0, 76], 97) == 10\nassert solution.maximumBags([41, 85, 72, 45, 73, 65, 44], [47, 90, 60, 29, 93, 22, 0], 24) == 5\nassert solution.maximumBags([76, 13, 12, 66, 49, 53, 38, 43, 60, 97, 18], [3, 52, 42, 82, 46, 34, 40, 9, 59, 78, 24], 3) == 10\nassert solution.maximumBags([26, 56, 97, 52, 49, 2, 15, 18], [52, 7, 19, 78, 29, 63, 61, 40], 89) == 8\nassert solution.maximumBags([81, 5, 48, 77, 23, 78, 32], [55, 56, 77, 57, 46, 23, 93], 83) == 7\nassert solution.maximumBags([83, 43], [9, 45], 30) == 1\nassert solution.maximumBags([63], [88], 17) == 1\nassert solution.maximumBags([38, 41, 34, 71, 88, 40, 27, 26, 42], [88, 56, 40, 4, 74, 90, 84, 72, 75], 50) == 9\nassert solution.maximumBags([3, 45, 85, 37, 91, 26], [61, 64, 72, 69, 56, 68], 65) == 6\nassert solution.maximumBags([35, 38, 52, 23, 86, 68, 5], [72, 42, 37, 38, 0, 74, 44], 39) == 7\nassert solution.maximumBags([76, 79, 46, 60, 99, 40, 83, 32, 44, 39], [8, 50, 65, 41, 9, 26, 66, 0, 48, 21], 46) == 6\nassert solution.maximumBags([95, 29, 46, 37, 75, 55, 11], [63, 0, 30, 75, 53, 34, 83], 14) == 7\nassert solution.maximumBags([21, 20, 16, 96, 35, 90, 9, 61], [66, 39, 2, 60, 49, 75, 63, 20], 26) == 8\nassert solution.maximumBags([80, 46, 61, 43, 19], [65, 52, 86, 34, 16], 46) == 5\nassert solution.maximumBags([73, 24, 61, 99, 7, 17, 38, 97], [27, 98, 52, 43, 73, 10, 15, 84], 14) == 8\nassert solution.maximumBags([16, 9, 88, 23, 34, 3, 7, 8], [75, 93, 25, 79, 9, 71, 26, 47], 74) == 8\nassert solution.maximumBags([24, 28, 3, 92], [80, 46, 24, 78], 40) == 4\nassert solution.maximumBags([12, 48, 73, 22, 75, 53, 17, 78, 99], [49, 67, 72, 88, 92, 18, 81, 27, 82], 86) == 9\nassert solution.maximumBags([88, 78, 14, 71, 65, 26, 33, 56, 52, 13], [38, 35, 28, 71, 70, 4, 44, 58, 92, 12], 92) == 10\nassert solution.maximumBags([49, 57, 90, 47, 41], [51, 53, 15, 68, 17], 72) == 4\nassert solution.maximumBags([87, 72, 65, 49, 34, 67], [54, 44, 61, 57, 27, 8], 8) == 3\nassert solution.maximumBags([63, 53, 76], [21, 13, 75], 93) == 3\nassert solution.maximumBags([75, 1, 40, 93, 81, 39, 24, 86], [42, 11, 96, 64, 29, 18, 15, 45], 57) == 6\nassert solution.maximumBags([53, 3, 77, 30, 6, 48, 96, 46, 37, 36, 50], [2, 1, 82, 77, 97, 39, 24, 92, 12, 14, 64], 57) == 11\nassert solution.maximumBags([43, 41, 91, 18, 23, 95, 22, 33], [40, 68, 37, 87, 3, 21, 15, 12], 47) == 7\nassert solution.maximumBags([75, 57, 3, 50, 91], [61, 74, 56, 28, 0], 66) == 5\nassert solution.maximumBags([80, 22, 23], [32, 22, 75], 80) == 3\nassert solution.maximumBags([7, 3, 19, 48], [81, 74, 27, 5], 71) == 4\nassert solution.maximumBags([96, 91, 31, 8, 65, 60], [6, 62, 31, 37, 87, 24], 34) == 5\nassert solution.maximumBags([42, 87, 95, 96, 45, 55], [70, 87, 75, 20, 18, 24], 15) == 3\nassert solution.maximumBags([98, 7, 60, 79, 15], [41, 7, 99, 24, 80], 35) == 5\nassert solution.maximumBags([88, 2, 93], [54, 88, 32], 40) == 3\nassert solution.maximumBags([10, 11, 25, 35, 41], [41, 4, 59, 68, 53], 17) == 5\nassert solution.maximumBags([3, 36, 23, 45, 7, 31, 14, 84, 85, 46], [26, 45, 77, 7, 30, 5, 29, 22, 47, 35], 57) == 10\nassert solution.maximumBags([41, 53, 20, 15, 52, 6, 24, 83], [47, 85, 8, 69, 6, 91, 31, 63], 40) == 8\nassert solution.maximumBags([88, 28, 59, 38, 18, 37, 21, 60, 75], [71, 23, 55, 65, 57, 89, 7, 87, 84], 36) == 9\nassert solution.maximumBags([24, 90, 34, 70, 26], [49, 38, 25, 48, 76], 50) == 5\nassert solution.maximumBags([44], [46], 5) == 1\nassert solution.maximumBags([81, 6], [78, 42], 79) == 2\nassert solution.maximumBags([52, 76, 34, 10, 45, 74], [32, 6, 1, 64, 37, 85], 66) == 6\nassert solution.maximumBags([32, 75, 82, 50, 66, 92, 29, 53], [31, 14, 83, 43, 13, 21, 77, 85], 101) == 7\nassert solution.maximumBags([51, 4, 50, 32, 24, 2, 31, 72, 29], [80, 10, 94, 63, 86, 60, 41, 50, 48], 66) == 9\nassert solution.maximumBags([31], [1], 73) == 1\nassert solution.maximumBags([48, 69, 30], [40, 97, 62], 23) == 3\nassert solution.maximumBags([59, 9], [68, 43], 36) == 2\nassert solution.maximumBags([48], [46], 80) == 1\nassert solution.maximumBags([72, 98, 31, 92, 1], [93, 26, 15, 75, 25], 68) == 5\nassert solution.maximumBags([52, 58, 62], [86, 80, 56], 33) == 3\nassert solution.maximumBags([88, 10], [42, 81], 33) == 2\nassert solution.maximumBags([76], [73], 63) == 1\nassert solution.maximumBags([3, 50, 76, 20, 46, 31, 70], [46, 61, 69, 76, 95, 45, 2], 9) == 7\nassert solution.maximumBags([24, 12, 19, 53, 64, 20, 27, 41, 10, 31, 57], [27, 21, 58, 43, 55, 22, 86, 59, 90, 34, 31], 72) == 11\nassert solution.maximumBags([13, 5, 42, 64, 94, 82], [41, 11, 44, 87, 5, 43], 29) == 5\nassert solution.maximumBags([69, 32, 95], [81, 54, 38], 40) == 3\nassert solution.maximumBags([60, 75, 68, 14, 82, 57, 64, 37, 58], [12, 48, 26, 78, 58, 90, 67, 94, 89], 41) == 9\nassert solution.maximumBags([58, 2, 59, 40], [88, 56, 65, 59], 30) == 4\nassert solution.maximumBags([74, 15, 4, 28, 63, 25, 43, 59], [19, 68, 81, 44, 78, 92, 54, 43], 43) == 8\nassert solution.maximumBags([36, 69, 50], [43, 14, 26], 90) == 3\nassert solution.maximumBags([97], [60], 24) == 0\nassert solution.maximumBags([16, 18, 29, 39, 72, 2, 75, 84, 67, 19], [47, 21, 98, 90, 50, 11, 52, 82, 69, 3], 4) == 10\nassert solution.maximumBags([62], [3], 11) == 0\nassert solution.maximumBags([87, 81, 51], [63, 25, 85], 12) == 2\nassert solution.maximumBags([93, 65, 52, 42, 13, 31, 43, 97], [20, 18, 31, 0, 34, 25, 40, 35], 51) == 5\nassert solution.maximumBags([57, 55, 56, 84, 82, 65, 43, 30, 27, 25, 4], [48, 77, 30, 61, 86, 81, 66, 14, 44, 24, 87], 14) == 11\nassert solution.maximumBags([39, 98, 93, 77, 16, 7, 87, 10, 78], [49, 83, 42, 55, 13, 48, 54, 87, 86], 53) == 9\nassert solution.maximumBags([32, 48, 34, 96, 50, 39, 17, 4, 49, 75, 55], [59, 30, 9, 20, 16, 65, 4, 47, 34, 85, 28], 65) == 10\nassert solution.maximumBags([1, 45, 62], [11, 80, 74], 44) == 3\nassert solution.maximumBags([50, 67, 64, 30, 94], [35, 80, 56, 30, 11], 79) == 4\nassert solution.maximumBags([17, 4, 43, 84, 95, 64], [18, 71, 69, 15, 81, 51], 47) == 6\nassert solution.maximumBags([87, 10, 36, 98, 25, 50, 79], [44, 46, 33, 88, 72, 70, 25], 101) == 7\nassert solution.maximumBags([21, 5, 92, 55, 84, 63, 57], [37, 45, 50, 87, 57, 81, 6], 79) == 7\nassert solution.maximumBags([97, 72, 61, 86, 94, 54], [86, 74, 84, 49, 68, 1], 91) == 5\nassert solution.maximumBags([99, 94, 29, 87, 43, 84, 63, 60, 54], [58, 62, 30, 19, 61, 79, 50, 8, 63], 67) == 7\nassert solution.maximumBags([39, 77, 60, 56, 16, 5, 74, 91, 6], [76, 96, 1, 38, 61, 90, 56, 92, 44], 47) == 9\nassert solution.maximumBags([32, 96, 58, 26, 27, 70], [14, 90, 91, 76, 26, 57], 14) == 6\nassert solution.maximumBags([12, 48, 93], [59, 73, 76], 61) == 3\nassert solution.maximumBags([57, 66, 20, 60, 44], [45, 86, 69, 74, 95], 18) == 5\nassert solution.maximumBags([93, 27, 37, 26, 75, 98, 47], [49, 32, 1, 63, 43, 92, 5], 21) == 4\nassert solution.maximumBags([2, 10], [65, 89], 22) == 2\nassert solution.maximumBags([41], [9], 91) == 1\nassert solution.maximumBags([59, 34, 32, 4, 90, 50, 85], [45, 6, 37, 84, 92, 60, 74], 33) == 7\nassert solution.maximumBags([88, 15, 28, 66, 74, 65, 96, 23, 24], [5, 73, 44, 79, 93, 28, 35, 62, 58], 11) == 9\nassert solution.maximumBags([10], [30], 30) == 1\nassert solution.maximumBags([53, 26, 28, 15, 40, 4, 29, 6, 39, 75], [6, 8, 60, 46, 48, 4, 81, 79, 32, 24], 39) == 10\nassert solution.maximumBags([49, 73, 67, 69, 19, 8, 76, 54, 53, 30], [3, 23, 42, 28, 63, 85, 17, 88, 16, 58], 82) == 10\nassert solution.maximumBags([93, 63, 94, 5, 7, 12, 24, 88], [40, 6, 34, 59, 22, 95, 81, 96], 22) == 8\nassert solution.maximumBags([58, 35, 14, 40, 22, 80], [57, 9, 8, 13, 83, 82], 30) == 6\nassert solution.maximumBags([83, 44, 24], [34, 4, 28], 46) == 2\nassert solution.maximumBags([31, 15, 5, 96, 92, 99, 82], [27, 84, 8, 56, 92, 16, 61], 80) == 7\nassert solution.maximumBags([7, 82, 34, 23, 40, 89, 42, 16, 79, 14, 56], [64, 40, 59, 70, 3, 4, 24, 14, 26, 2, 21], 51) == 9\nassert solution.maximumBags([80, 34], [83, 80], 78) == 2\nassert solution.maximumBags([66, 17, 10, 23, 64, 2, 29, 34], [27, 54, 52, 99, 33, 84, 43, 20], 26) == 8\nassert solution.maximumBags([10, 15, 4, 41, 73, 63, 32, 7, 9, 22], [63, 84, 45, 67, 42, 14, 34, 92, 99, 21], 17) == 10\nassert solution.maximumBags([55, 14, 73, 99, 46, 64, 95, 34, 26], [75, 67, 76, 3, 85, 61, 48, 71, 4], 66) == 9\nassert solution.maximumBags([14, 71, 90, 38, 86, 34, 37, 15, 12], [0, 95, 61, 20, 26, 9, 71, 86, 7], 92) == 9\nassert solution.maximumBags([94, 96, 14, 92, 46, 16, 90, 77], [84, 44, 38, 71, 64, 73, 79, 93], 10) == 8\nassert solution.maximumBags([32, 6, 74, 58], [63, 40, 31, 3], 21) == 3",
  "inefficient_solution": "class Solution:\n    def maximumBags(\n        self, capacity: List[int], rocks: List[int], additionalRocks: int\n    ) -> int:\n        bags = [(a - b, i) for i, (a, b) in enumerate(zip(capacity, rocks))]\n        bags.sort()\n        ans = 0\n        for v, i in bags:\n            if v <= additionalRocks:\n                ans += 1\n                additionalRocks -= v\n                capacity[i] = 1000000000  # mark as full\n                rocks[i] = 1000000000\n        return ans",
  "is_python": true
}