{
  "problem_idx": 1081,
  "task_name": "Smallest Subsequence of Distinct Characters",
  "markdown_description": "\nGiven a string `s`, return *the* *lexicographically smallest* *subsequence* *of* `s` *that contains all the distinct characters of* `s` *exactly once*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bcabc\"\n**Output:** \"abc\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"cbacdcbc\"\n**Output:** \"acdb\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s` consists of lowercase English letters.\n\n\n\u00a0\n\n\n**Note:** This question is the same as 316: <https://leetcode.com/problems/remove-duplicate-letters/>\n",
  "canonical_solution": "class Solution:\n    def smallestSubsequence(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                vis.remove(stk.pop())\n            stk.append(c)\n            vis.add(c)\n        return \"\".join(stk)\n",
  "test_case_generator": "\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string of lowercase English letters\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestSubsequence(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestSubsequence(s) == expected_result\n        print(f\"assert solution.smallestSubsequence('{s}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.smallestSubsequence('{s}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestSubsequence('zzkixyest') == 'zkixyest'\nassert solution.smallestSubsequence('hpkxhx') == 'hpkx'\nassert solution.smallestSubsequence('qhx') == 'qhx'\nassert solution.smallestSubsequence('lnxgxhi') == 'lngxhi'\nassert solution.smallestSubsequence('s') == 's'\nassert solution.smallestSubsequence('pz') == 'pz'\nassert solution.smallestSubsequence('a') == 'a'\nassert solution.smallestSubsequence('svymdtbj') == 'svymdtbj'\nassert solution.smallestSubsequence('winj') == 'winj'\nassert solution.smallestSubsequence('lj') == 'lj'\nassert solution.smallestSubsequence('lsjqnd') == 'lsjqnd'\nassert solution.smallestSubsequence('vkdxopfr') == 'vkdxopfr'\nassert solution.smallestSubsequence('yvvrkovj') == 'yrkovj'\nassert solution.smallestSubsequence('zqe') == 'zqe'\nassert solution.smallestSubsequence('khd') == 'khd'\nassert solution.smallestSubsequence('oszmfgh') == 'oszmfgh'\nassert solution.smallestSubsequence('iho') == 'iho'\nassert solution.smallestSubsequence('kvcepo') == 'kvcepo'\nassert solution.smallestSubsequence('vxyeshedpv') == 'vxyeshdp'\nassert solution.smallestSubsequence('xqye') == 'xqye'\nassert solution.smallestSubsequence('uhdkmjjfla') == 'uhdkmjfla'\nassert solution.smallestSubsequence('rvslihrjr') == 'rvslihj'\nassert solution.smallestSubsequence('tlg') == 'tlg'\nassert solution.smallestSubsequence('bhdskbmmp') == 'bhdskmp'\nassert solution.smallestSubsequence('pulqjcpp') == 'pulqjc'\nassert solution.smallestSubsequence('iuj') == 'iuj'\nassert solution.smallestSubsequence('lwld') == 'lwd'\nassert solution.smallestSubsequence('imdvzggtw') == 'imdvzgtw'\nassert solution.smallestSubsequence('drr') == 'dr'\nassert solution.smallestSubsequence('fnkgslxf') == 'fnkgslx'\nassert solution.smallestSubsequence('myz') == 'myz'\nassert solution.smallestSubsequence('ydgp') == 'ydgp'\nassert solution.smallestSubsequence('ao') == 'ao'\nassert solution.smallestSubsequence('zskm') == 'zskm'\nassert solution.smallestSubsequence('pkqq') == 'pkq'\nassert solution.smallestSubsequence('zvkomemdh') == 'zvkoemdh'\nassert solution.smallestSubsequence('jmdcpgrur') == 'jmdcpgru'\nassert solution.smallestSubsequence('zki') == 'zki'\nassert solution.smallestSubsequence('auasjbq') == 'ausjbq'\nassert solution.smallestSubsequence('tbsvse') == 'tbsve'\nassert solution.smallestSubsequence('qbarmodyvx') == 'qbarmodyvx'\nassert solution.smallestSubsequence('tirtwpcd') == 'irtwpcd'\nassert solution.smallestSubsequence('ghluhgvrdy') == 'ghluvrdy'\nassert solution.smallestSubsequence('schsvo') == 'chsvo'\nassert solution.smallestSubsequence('zlofqw') == 'zlofqw'\nassert solution.smallestSubsequence('fppt') == 'fpt'\nassert solution.smallestSubsequence('m') == 'm'\nassert solution.smallestSubsequence('p') == 'p'\nassert solution.smallestSubsequence('e') == 'e'\nassert solution.smallestSubsequence('xdv') == 'xdv'\nassert solution.smallestSubsequence('pbpt') == 'bpt'\nassert solution.smallestSubsequence('p') == 'p'\nassert solution.smallestSubsequence('y') == 'y'\nassert solution.smallestSubsequence('doh') == 'doh'\nassert solution.smallestSubsequence('svqif') == 'svqif'\nassert solution.smallestSubsequence('el') == 'el'\nassert solution.smallestSubsequence('wbohjcmm') == 'wbohjcm'\nassert solution.smallestSubsequence('l') == 'l'\nassert solution.smallestSubsequence('sfwdlo') == 'sfwdlo'\nassert solution.smallestSubsequence('v') == 'v'\nassert solution.smallestSubsequence('hbpwbwspti') == 'hbpwsti'\nassert solution.smallestSubsequence('kqwfukhsb') == 'kqwfuhsb'\nassert solution.smallestSubsequence('zlbrun') == 'zlbrun'\nassert solution.smallestSubsequence('zj') == 'zj'\nassert solution.smallestSubsequence('evky') == 'evky'\nassert solution.smallestSubsequence('s') == 's'\nassert solution.smallestSubsequence('jsah') == 'jsah'\nassert solution.smallestSubsequence('gc') == 'gc'\nassert solution.smallestSubsequence('fdhtk') == 'fdhtk'\nassert solution.smallestSubsequence('xojwv') == 'xojwv'\nassert solution.smallestSubsequence('jdl') == 'jdl'\nassert solution.smallestSubsequence('elaogj') == 'elaogj'\nassert solution.smallestSubsequence('tnawufks') == 'tnawufks'\nassert solution.smallestSubsequence('mnqeakq') == 'mneakq'\nassert solution.smallestSubsequence('easvdstlf') == 'easvdtlf'\nassert solution.smallestSubsequence('l') == 'l'\nassert solution.smallestSubsequence('dcbczgoz') == 'dbcgoz'\nassert solution.smallestSubsequence('vfadhsqe') == 'vfadhsqe'\nassert solution.smallestSubsequence('ttsqwm') == 'tsqwm'\nassert solution.smallestSubsequence('sitywthvul') == 'sitywhvul'\nassert solution.smallestSubsequence('qsdolf') == 'qsdolf'\nassert solution.smallestSubsequence('wszvtk') == 'wszvtk'\nassert solution.smallestSubsequence('tlztnst') == 'lznst'\nassert solution.smallestSubsequence('ts') == 'ts'\nassert solution.smallestSubsequence('e') == 'e'\nassert solution.smallestSubsequence('pciwnsxfai') == 'pciwnsxfa'\nassert solution.smallestSubsequence('eabp') == 'eabp'\nassert solution.smallestSubsequence('lxozsq') == 'lxozsq'\nassert solution.smallestSubsequence('wvgsqkc') == 'wvgsqkc'\nassert solution.smallestSubsequence('vsrfxdofz') == 'vsrfxdoz'\nassert solution.smallestSubsequence('l') == 'l'\nassert solution.smallestSubsequence('tppmet') == 'pmet'\nassert solution.smallestSubsequence('cgscjbi') == 'cgsjbi'\nassert solution.smallestSubsequence('smp') == 'smp'\nassert solution.smallestSubsequence('qtjlom') == 'qtjlom'\nassert solution.smallestSubsequence('uwd') == 'uwd'\nassert solution.smallestSubsequence('qtkgigfqw') == 'qtkgifw'\nassert solution.smallestSubsequence('immugbznc') == 'imugbznc'\nassert solution.smallestSubsequence('pb') == 'pb'\nassert solution.smallestSubsequence('jjzewqx') == 'jzewqx'",
  "inefficient_solution": "class Solution:\n    def smallestSubsequence(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        counts = {}\n        for c in s:\n            counts[c] = counts.get(c, 0) + 1\n        for i, c in enumerate(s):\n            if c in vis:\n                counts[c] -= 1\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                stk.pop()\n                vis.remove(stk[-1])\n                counts[stk[-1]] += 1\n            stk.append(c)\n            stk.append(c)  # duplicate\n            vis.add(c)\n            vis.add(c)     # duplicate\n        return \"\".join(stk)",
  "is_python": true
}