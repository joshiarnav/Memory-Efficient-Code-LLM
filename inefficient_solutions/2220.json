{
  "problem_idx": 2220,
  "task_name": "Minimum Bit Flips to Convert Number",
  "markdown_description": "\nA **bit flip** of a number `x` is choosing a bit in the binary representation of `x` and **flipping** it from either `0` to `1` or `1` to `0`.\n\n\n* For example, for `x = 7`, the binary representation is `111` and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get `110`, flip the second bit from the right to get `101`, flip the fifth bit from the right (a leading zero) to get `10111`, etc.\n\n\nGiven two integers `start` and `goal`, return *the **minimum** number of **bit flips** to convert* `start` *to* `goal`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** start = 10, goal = 7\n**Output:** 3\n**Explanation:** The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 1010 -> 1011.\n- Flip the third bit from the right: 1011 -> 1111.\n- Flip the fourth bit from the right: 1111 -> 0111.\nIt can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** start = 3, goal = 4\n**Output:** 3\n**Explanation:** The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:\n- Flip the first bit from the right: 011 -> 010.\n- Flip the second bit from the right: 010 -> 000.\n- Flip the third bit from the right: 000 -> 100.\nIt can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= start, goal <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minBitFlips(self, start: int, goal: int) -> int:\n        t = start ^ goal\n        ans = 0\n        while t:\n            ans += t & 1\n            t >>= 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minBitFlips(self, start: int, goal: int) -> int:\n        t = start ^ goal\n        ans = 0\n        while t:\n            ans += t & 1\n            t >>= 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random start and goal\n    start = random.randint(0, 10**9)\n    goal = random.randint(0, 10**9)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minBitFlips(start, goal)\n\n    return start, goal, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        start, goal, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minBitFlips(start, goal) == expected_result\n        print(f\"assert solution.minBitFlips({start}, {goal}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minBitFlips({start}, {goal}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minBitFlips(428352171, 809639476) == 17\nassert solution.minBitFlips(352639074, 5333211) == 16\nassert solution.minBitFlips(407084916, 329095922) == 14\nassert solution.minBitFlips(66212434, 219406555) == 14\nassert solution.minBitFlips(939797907, 870425253) == 17\nassert solution.minBitFlips(94924423, 932502920) == 16\nassert solution.minBitFlips(682179811, 541672227) == 13\nassert solution.minBitFlips(469046377, 917647458) == 13\nassert solution.minBitFlips(173612855, 250710240) == 15\nassert solution.minBitFlips(973581601, 515105661) == 14\nassert solution.minBitFlips(82285586, 608477620) == 13\nassert solution.minBitFlips(936257037, 128392512) == 15\nassert solution.minBitFlips(412767474, 38758807) == 17\nassert solution.minBitFlips(820553948, 801059580) == 15\nassert solution.minBitFlips(22523265, 439427467) == 13\nassert solution.minBitFlips(669476159, 592275218) == 10\nassert solution.minBitFlips(563897788, 514500603) == 17\nassert solution.minBitFlips(337547256, 72090659) == 14\nassert solution.minBitFlips(611895729, 299608709) == 15\nassert solution.minBitFlips(692920525, 374589866) == 20\nassert solution.minBitFlips(472794663, 127054632) == 19\nassert solution.minBitFlips(344353919, 597149567) == 12\nassert solution.minBitFlips(848101856, 81823561) == 16\nassert solution.minBitFlips(939570543, 419026685) == 14\nassert solution.minBitFlips(949046004, 678799818) == 15\nassert solution.minBitFlips(402522637, 325969111) == 15\nassert solution.minBitFlips(716199815, 296806405) == 14\nassert solution.minBitFlips(938980419, 518075435) == 10\nassert solution.minBitFlips(496623228, 337483130) == 10\nassert solution.minBitFlips(403222286, 474224536) == 12\nassert solution.minBitFlips(669046973, 554208395) == 13\nassert solution.minBitFlips(346360015, 989556713) == 17\nassert solution.minBitFlips(585242651, 431168324) == 16\nassert solution.minBitFlips(558684290, 957598998) == 14\nassert solution.minBitFlips(80868011, 33999715) == 15\nassert solution.minBitFlips(585339489, 124222243) == 12\nassert solution.minBitFlips(34508633, 560883760) == 15\nassert solution.minBitFlips(459987761, 176353079) == 11\nassert solution.minBitFlips(968222343, 754330974) == 16\nassert solution.minBitFlips(618170654, 986886863) == 15\nassert solution.minBitFlips(966515184, 124750884) == 18\nassert solution.minBitFlips(258073690, 309529367) == 17\nassert solution.minBitFlips(186157688, 306265505) == 18\nassert solution.minBitFlips(840259673, 450404703) == 15\nassert solution.minBitFlips(49572817, 300246906) == 12\nassert solution.minBitFlips(250095093, 543765528) == 14\nassert solution.minBitFlips(849233081, 688028561) == 16\nassert solution.minBitFlips(537191193, 94758944) == 13\nassert solution.minBitFlips(735885887, 541931526) == 12\nassert solution.minBitFlips(564172629, 15880420) == 14\nassert solution.minBitFlips(78677962, 243023358) == 14\nassert solution.minBitFlips(558575975, 464539617) == 20\nassert solution.minBitFlips(691396450, 441078366) == 19\nassert solution.minBitFlips(801618160, 836975318) == 11\nassert solution.minBitFlips(610636576, 221709769) == 15\nassert solution.minBitFlips(958461524, 758587600) == 13\nassert solution.minBitFlips(585698641, 18884650) == 16\nassert solution.minBitFlips(289128492, 547690909) == 17\nassert solution.minBitFlips(556186731, 94112499) == 15\nassert solution.minBitFlips(793623086, 738163315) == 12\nassert solution.minBitFlips(401333182, 215968284) == 14\nassert solution.minBitFlips(470217331, 604923649) == 12\nassert solution.minBitFlips(29966232, 365054049) == 17\nassert solution.minBitFlips(420124695, 965113751) == 12\nassert solution.minBitFlips(919286995, 589197262) == 17\nassert solution.minBitFlips(190935457, 767534210) == 17\nassert solution.minBitFlips(458938619, 691161282) == 12\nassert solution.minBitFlips(620096647, 377900672) == 14\nassert solution.minBitFlips(537939019, 306569368) == 16\nassert solution.minBitFlips(992946513, 988166355) == 9\nassert solution.minBitFlips(595515204, 719554011) == 16\nassert solution.minBitFlips(169215615, 129412384) == 16\nassert solution.minBitFlips(529087688, 985731141) == 12\nassert solution.minBitFlips(852177464, 178638863) == 17\nassert solution.minBitFlips(50771686, 565647186) == 13\nassert solution.minBitFlips(882009813, 624782485) == 11\nassert solution.minBitFlips(211123015, 359368325) == 20\nassert solution.minBitFlips(166179346, 113089010) == 15\nassert solution.minBitFlips(747813940, 369937930) == 18\nassert solution.minBitFlips(915475065, 827974635) == 14\nassert solution.minBitFlips(785138219, 920606230) == 12\nassert solution.minBitFlips(574577901, 764666002) == 20\nassert solution.minBitFlips(188912858, 478964305) == 20\nassert solution.minBitFlips(990263767, 136797600) == 15\nassert solution.minBitFlips(784257072, 991849568) == 12\nassert solution.minBitFlips(984226292, 464517376) == 12\nassert solution.minBitFlips(72522578, 193207996) == 18\nassert solution.minBitFlips(335522914, 278263233) == 14\nassert solution.minBitFlips(482868479, 657302854) == 19\nassert solution.minBitFlips(533840780, 366931815) == 15\nassert solution.minBitFlips(652255055, 843363925) == 11\nassert solution.minBitFlips(402987415, 384581646) == 16\nassert solution.minBitFlips(352834490, 696782145) == 22\nassert solution.minBitFlips(316251097, 2785879) == 15\nassert solution.minBitFlips(743646787, 419152313) == 18\nassert solution.minBitFlips(214795583, 229083765) == 12\nassert solution.minBitFlips(66713204, 995324369) == 15\nassert solution.minBitFlips(334573483, 67880993) == 19\nassert solution.minBitFlips(201947600, 737414466) == 18\nassert solution.minBitFlips(436545960, 466362126) == 13",
  "inefficient_solution": "class Solution:\n    def minBitFlips(self, start: int, goal: int) -> int:\n        flips = 0\n        bits = []\n        while start != 0 or goal != 0:\n            bits.append(start % 2)\n            bits.append(goal % 2)\n            start //= 2\n            goal //= 2\n        while len(bits) != 0:\n            flips += abs(bits.pop(0) - bits.pop(0))\n        return flips",
  "is_python": true
}