{
  "problem_idx": 1877,
  "task_name": "Minimize Maximum Pair Sum in Array",
  "markdown_description": "\nThe **pair sum** of a pair `(a,b)` is equal to `a + b`. The **maximum pair sum** is the largest **pair sum** in a list of pairs.\n\n\n* For example, if we have pairs `(1,5)`, `(2,3)`, and `(4,4)`, the **maximum pair sum** would be `max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8`.\n\n\nGiven an array `nums` of **even** length `n`, pair up the elements of `nums` into `n / 2` pairs such that:\n\n\n* Each element of `nums` is in **exactly one** pair, and\n* The **maximum pair sum** is **minimized**.\n\n\nReturn *the minimized **maximum pair sum** after optimally pairing up the elements*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,5,2,3]\n**Output:** 7\n**Explanation:** The elements can be paired up into pairs (3,3) and (5,2).\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,5,4,2,4,6]\n**Output:** 8\n**Explanation:** The elements can be paired up into pairs (3,5), (4,4), and (6,2).\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `2 <= n <= 105`\n* `n` is **even**.\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minPairSum(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        return max(x + nums[n - i - 1] for i, x in enumerate(nums[: n >> 1]))\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minPairSum(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        return max(x + nums[n - i - 1] for i, x in enumerate(nums[: n >> 1]))\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minPairSum(nums)\n\n    return nums, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minPairSum(nums) == expected_result\n        print(f\"assert solution.minPairSum({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minPairSum({nums}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minPairSum([6, 7, 32, 42, 55, 73, 76, 91, 97]) == 115\nassert solution.minPairSum([10, 23, 25, 50, 63, 74, 77, 94]) == 113\nassert solution.minPairSum([12, 21, 63, 92]) == 104\nassert solution.minPairSum([12, 28, 39, 41, 42, 80, 88, 93, 100]) == 127\nassert solution.minPairSum([10, 44, 46, 55, 67, 73, 81, 99]) == 125\nassert solution.minPairSum([3, 20, 31, 32, 55, 75, 85, 86, 92]) == 116\nassert solution.minPairSum([8, 20, 56, 59, 81, 93]) == 115\nassert solution.minPairSum([4, 41, 57, 67, 77, 78, 83, 90]) == 144\nassert solution.minPairSum([45, 48, 60, 62, 69, 80, 99]) == 144\nassert solution.minPairSum([9, 11, 16, 23, 24, 34, 66, 89, 92]) == 101\nassert solution.minPairSum([1, 39, 40, 85]) == 86\nassert solution.minPairSum([5, 9, 95]) == 100\nassert solution.minPairSum([1, 30, 31, 46, 71, 82, 84, 91]) == 117\nassert solution.minPairSum([1, 5, 9, 12, 56, 74]) == 75\nassert solution.minPairSum([2, 3, 7, 12, 34, 58, 80, 88, 99]) == 101\nassert solution.minPairSum([2, 7, 11, 17, 57, 82, 100]) == 102\nassert solution.minPairSum([14, 16, 17, 24, 36, 44, 58, 71, 78, 79]) == 94\nassert solution.minPairSum([8, 9, 37, 44, 48, 58, 92]) == 100\nassert solution.minPairSum([7, 58]) == 65\nassert solution.minPairSum([3, 8, 41, 55, 74, 77, 79, 98]) == 129\nassert solution.minPairSum([20, 58, 60, 75, 90, 95]) == 148\nassert solution.minPairSum([11, 12, 29, 70, 88]) == 99\nassert solution.minPairSum([3, 12, 14, 27, 70, 77, 90, 94, 98, 99]) == 147\nassert solution.minPairSum([16, 18, 33, 42, 44, 55, 56, 82, 89, 94]) == 115\nassert solution.minPairSum([25, 53, 77, 80]) == 130\nassert solution.minPairSum([10, 13]) == 23\nassert solution.minPairSum([11, 31, 49, 53, 80, 91, 94]) == 129\nassert solution.minPairSum([35, 73, 93]) == 128\nassert solution.minPairSum([48, 75, 78]) == 126\nassert solution.minPairSum([17, 34, 57, 75, 86]) == 109\nassert solution.minPairSum([3, 25, 54, 71, 76]) == 96\nassert solution.minPairSum([6, 17, 19, 30, 45, 58, 62, 95, 98, 100]) == 115\nassert solution.minPairSum([5, 7, 10, 36, 47, 94, 96]) == 101\nassert solution.minPairSum([4, 54]) == 58\nassert solution.minPairSum([4, 7, 8, 23, 36, 41, 48, 51, 69, 92]) == 96\nassert solution.minPairSum([48, 87]) == 135\nassert solution.minPairSum([19, 21, 23, 24, 26, 46, 58, 72, 81]) == 100\nassert solution.minPairSum([2, 77]) == 79\nassert solution.minPairSum([1, 9, 12, 13, 14]) == 22\nassert solution.minPairSum([7, 36, 37, 50, 66, 79, 84]) == 115\nassert solution.minPairSum([1, 28, 97, 100]) == 125\nassert solution.minPairSum([6, 7, 15, 24]) == 30\nassert solution.minPairSum([4, 18, 29, 44, 53, 64, 79, 89]) == 97\nassert solution.minPairSum([2, 41, 52]) == 54\nassert solution.minPairSum([3, 57]) == 60\nassert solution.minPairSum([4, 23, 28, 44, 56, 78]) == 82\nassert solution.minPairSum([41, 66, 73]) == 114\nassert solution.minPairSum([3, 12, 17, 47, 53, 79]) == 82\nassert solution.minPairSum([33, 73]) == 106\nassert solution.minPairSum([5, 37, 54, 55, 70, 84]) == 109\nassert solution.minPairSum([8, 12, 18, 26, 28, 34, 60, 69, 73, 85]) == 93\nassert solution.minPairSum([7, 36, 39, 83, 86]) == 119\nassert solution.minPairSum([5, 20, 42, 52, 69]) == 74\nassert solution.minPairSum([8, 33, 43, 57, 67]) == 90\nassert solution.minPairSum([15, 23, 32]) == 47\nassert solution.minPairSum([3, 34, 52, 53, 65, 67, 70, 74, 78, 82]) == 132\nassert solution.minPairSum([8, 13, 30, 45, 64]) == 72\nassert solution.minPairSum([15, 55, 59, 62, 66, 75, 82, 83, 94]) == 141\nassert solution.minPairSum([10, 15, 58, 69, 77, 89]) == 127\nassert solution.minPairSum([16, 30, 42, 50, 71, 73, 77]) == 113\nassert solution.minPairSum([17, 41, 91, 95]) == 132\nassert solution.minPairSum([15, 21, 46, 48, 54, 58, 72, 99]) == 114\nassert solution.minPairSum([17, 26, 28, 60, 65, 73, 76, 77, 80, 89]) == 138\nassert solution.minPairSum([40, 43, 79, 91]) == 131\nassert solution.minPairSum([19, 38, 57, 86, 88, 96]) == 143\nassert solution.minPairSum([28, 49, 55, 66, 95, 100]) == 144\nassert solution.minPairSum([15, 22, 36, 67, 72, 73, 92]) == 108\nassert solution.minPairSum([8, 16, 43, 46, 51, 74, 93]) == 101\nassert solution.minPairSum([24, 52, 72, 83, 90]) == 135\nassert solution.minPairSum([1, 2, 30, 44, 53, 56, 62, 63, 67]) == 100\nassert solution.minPairSum([65, 95]) == 160\nassert solution.minPairSum([25, 47, 48, 71, 74, 99]) == 124\nassert solution.minPairSum([5, 22, 28, 35, 45, 87, 95]) == 109\nassert solution.minPairSum([8, 15, 24, 34, 53, 65, 77]) == 85\nassert solution.minPairSum([60, 76, 83]) == 143\nassert solution.minPairSum([40, 53, 60, 61, 71]) == 114\nassert solution.minPairSum([38, 40, 54, 59, 73, 88, 94, 96]) == 142\nassert solution.minPairSum([21, 23, 46, 77, 78]) == 100\nassert solution.minPairSum([4, 36, 58]) == 62\nassert solution.minPairSum([73, 83]) == 156\nassert solution.minPairSum([35, 54, 71]) == 106\nassert solution.minPairSum([1, 29, 47, 70, 77, 89]) == 117\nassert solution.minPairSum([10, 13, 14, 24, 45, 58, 70, 73, 83, 87]) == 103\nassert solution.minPairSum([24, 63, 73, 79, 80, 88, 93, 100]) == 161\nassert solution.minPairSum([5, 40]) == 45\nassert solution.minPairSum([13, 17, 45, 69, 70, 75]) == 114\nassert solution.minPairSum([8, 10, 27, 61, 63, 77, 79, 94]) == 124\nassert solution.minPairSum([9, 36, 51, 73, 85, 86]) == 124\nassert solution.minPairSum([29, 73, 90]) == 119\nassert solution.minPairSum([10, 33, 46, 98]) == 108\nassert solution.minPairSum([46, 100]) == 146\nassert solution.minPairSum([3, 11, 30, 35, 38, 44, 62, 64, 72, 92]) == 97\nassert solution.minPairSum([37, 54]) == 91\nassert solution.minPairSum([3, 20, 29, 40, 41, 60, 89, 90]) == 109\nassert solution.minPairSum([1, 5, 15, 20, 22, 26, 32, 73, 80, 95]) == 96\nassert solution.minPairSum([5, 18, 31, 43, 53, 77, 81, 86]) == 108\nassert solution.minPairSum([29, 48, 70]) == 99\nassert solution.minPairSum([18, 22, 59]) == 77\nassert solution.minPairSum([2, 3, 6, 51, 56, 81, 82, 95]) == 107\nassert solution.minPairSum([5, 12, 18, 20, 25, 44, 97]) == 102",
  "inefficient_solution": "class Solution:\n    def minPairSum(self, nums: List[int]) -> int:\n        n = len(nums)\n        sum_list = [x + y for x in nums for y in nums]\n        sorted_nums = sorted(nums)\n        max_sum = 0\n        for i in range(n >> 1):\n            for j in range(n - i - 1, n):\n                max_sum = max(max_sum, sum_list[i * n + j])\n        return max_sum",
  "is_python": true
}