{
  "problem_idx": 1946,
  "task_name": "Largest Number After Mutating Substring",
  "markdown_description": "\nYou are given a string `num`, which represents a large integer. You are also given a **0-indexed** integer array `change` of length `10` that maps each digit `0-9` to another digit. More formally, digit `d` maps to digit `change[d]`.\n\n\nYou may **choose** to **mutate a single substring** of `num`. To mutate a substring, replace each digit `num[i]` with the digit it maps to in `change` (i.e. replace `num[i]` with `change[num[i]]`).\n\n\nReturn *a string representing the **largest** possible integer after **mutating** (or choosing not to) a **single substring** of* `num`.\n\n\nA **substring** is a contiguous sequence of characters within the string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]\n**Output:** \"832\"\n**Explanation:** Replace the substring \"1\":\n- 1 maps to change[1] = 8.\nThus, \"132\" becomes \"832\".\n\"832\" is the largest number that can be created, so return it.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]\n**Output:** \"934\"\n**Explanation:** Replace the substring \"021\":\n- 0 maps to change[0] = 9.\n- 2 maps to change[2] = 3.\n- 1 maps to change[1] = 4.\nThus, \"021\" becomes \"934\".\n\"934\" is the largest number that can be created, so return it.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]\n**Output:** \"5\"\n**Explanation:** \"5\" is already the largest number that can be created, so return it.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 105`\n* `num` consists of only digits `0-9`.\n* `change.length == 10`\n* `0 <= change[d] <= 9`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumNumber(self, num: str, change: List[int]) -> str:\n        s = list(num)\n        for i, c in enumerate(s):\n            if change[int(c)] > int(c):\n                while i < len(s) and int(s[i]) <= change[int(s[i])]:\n                    s[i] = str(change[int(s[i])])\n                    i += 1\n                break\n        return ''.join(s)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumNumber(self, num, change):\n        s = list(num)\n        for i, c in enumerate(s):\n            if change[int(c)] > int(c):\n                while i < len(s) and int(s[i]) <= change[int(s[i])]:\n                    s[i] = str(change[int(s[i])])\n                    i += 1\n                break\n        return ''.join(s)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    num = str(random.randint(1, 100000))\n    change = [random.randint(0, 9) for _ in range(10)]\n\n    expected_result = solution.maximumNumber(num, change)\n\n    return num, change, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, change, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumNumber(num, change) == expected_result\n        print(f\"assert solution.maximumNumber('{num}', {change}) == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.maximumNumber('{num}', {change}) == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumNumber('86871', [2, 7, 5, 9, 7, 1, 6, 9, 1, 7]) == '86897'\nassert solution.maximumNumber('48192', [8, 6, 2, 7, 0, 8, 4, 3, 0, 0]) == '48692'\nassert solution.maximumNumber('9309', [9, 2, 8, 4, 2, 3, 6, 0, 7, 3]) == '9499'\nassert solution.maximumNumber('81492', [6, 4, 5, 9, 9, 0, 4, 5, 1, 8]) == '84992'\nassert solution.maximumNumber('24965', [0, 6, 8, 9, 4, 0, 3, 2, 4, 6]) == '84965'\nassert solution.maximumNumber('21310', [0, 0, 4, 3, 0, 1, 7, 2, 8, 7]) == '41310'\nassert solution.maximumNumber('6614', [7, 5, 0, 4, 3, 1, 9, 7, 5, 2]) == '9954'\nassert solution.maximumNumber('91226', [9, 0, 9, 9, 3, 0, 3, 4, 0, 9]) == '91996'\nassert solution.maximumNumber('61487', [1, 6, 7, 6, 2, 5, 0, 4, 7, 8]) == '66487'\nassert solution.maximumNumber('61601', [3, 3, 9, 6, 8, 6, 8, 3, 3, 0]) == '83833'\nassert solution.maximumNumber('81423', [4, 6, 7, 9, 9, 1, 9, 1, 9, 2]) == '96979'\nassert solution.maximumNumber('45445', [2, 8, 3, 1, 5, 1, 3, 3, 7, 4]) == '55445'\nassert solution.maximumNumber('49963', [1, 5, 8, 4, 8, 4, 6, 0, 1, 2]) == '89963'\nassert solution.maximumNumber('46040', [6, 7, 5, 4, 0, 8, 5, 5, 0, 5]) == '46640'\nassert solution.maximumNumber('81926', [2, 1, 7, 7, 3, 7, 1, 8, 3, 0]) == '81976'\nassert solution.maximumNumber('95302', [7, 8, 2, 7, 5, 4, 4, 1, 3, 5]) == '95772'\nassert solution.maximumNumber('38185', [4, 0, 7, 7, 6, 6, 9, 3, 9, 1]) == '79185'\nassert solution.maximumNumber('61667', [7, 0, 8, 5, 1, 1, 2, 9, 1, 7]) == '61669'\nassert solution.maximumNumber('81878', [1, 7, 1, 6, 2, 5, 6, 9, 6, 5]) == '87878'\nassert solution.maximumNumber('40820', [7, 0, 6, 1, 5, 4, 0, 3, 6, 1]) == '57820'\nassert solution.maximumNumber('12053', [1, 0, 6, 4, 2, 6, 5, 0, 6, 4]) == '16164'\nassert solution.maximumNumber('64122', [7, 9, 4, 6, 9, 4, 9, 9, 4, 1]) == '99944'\nassert solution.maximumNumber('35243', [9, 2, 5, 1, 6, 3, 4, 2, 9, 9]) == '35563'\nassert solution.maximumNumber('63046', [9, 2, 9, 9, 6, 2, 7, 1, 2, 7]) == '79967'\nassert solution.maximumNumber('39910', [1, 4, 5, 4, 9, 1, 4, 6, 7, 8]) == '49910'\nassert solution.maximumNumber('47294', [1, 9, 9, 4, 0, 4, 1, 9, 7, 3]) == '49994'\nassert solution.maximumNumber('15825', [3, 4, 7, 1, 9, 5, 7, 8, 1, 6]) == '45825'\nassert solution.maximumNumber('99564', [9, 8, 0, 5, 8, 9, 8, 0, 8, 0]) == '99988'\nassert solution.maximumNumber('33946', [2, 0, 5, 9, 1, 7, 9, 7, 3, 9]) == '99946'\nassert solution.maximumNumber('62939', [9, 0, 1, 7, 4, 2, 7, 5, 3, 1]) == '72939'\nassert solution.maximumNumber('37157', [0, 1, 5, 3, 4, 9, 6, 1, 7, 2]) == '37197'\nassert solution.maximumNumber('49835', [2, 4, 0, 0, 6, 2, 4, 0, 5, 3]) == '69835'\nassert solution.maximumNumber('39106', [2, 4, 1, 1, 9, 1, 6, 8, 2, 4]) == '39426'\nassert solution.maximumNumber('88159', [4, 2, 6, 1, 4, 9, 6, 4, 0, 7]) == '88299'\nassert solution.maximumNumber('6805', [2, 0, 0, 1, 6, 3, 7, 5, 7, 6]) == '7805'\nassert solution.maximumNumber('88766', [7, 7, 9, 2, 2, 2, 5, 8, 4, 2]) == '88866'\nassert solution.maximumNumber('47609', [8, 8, 2, 7, 7, 3, 2, 1, 5, 8]) == '77609'\nassert solution.maximumNumber('72965', [3, 2, 2, 4, 4, 3, 2, 7, 7, 5]) == '72965'\nassert solution.maximumNumber('39614', [4, 7, 0, 0, 0, 9, 6, 9, 5, 4]) == '39674'\nassert solution.maximumNumber('80198', [7, 3, 2, 4, 4, 6, 8, 7, 9, 4]) == '97398'\nassert solution.maximumNumber('98927', [2, 7, 5, 6, 9, 9, 5, 8, 0, 2]) == '98958'\nassert solution.maximumNumber('16978', [8, 6, 4, 4, 2, 5, 3, 0, 2, 2]) == '66978'\nassert solution.maximumNumber('39168', [5, 2, 3, 3, 3, 2, 4, 7, 2, 3]) == '39268'\nassert solution.maximumNumber('40064', [5, 1, 7, 4, 1, 4, 4, 0, 4, 7]) == '45564'\nassert solution.maximumNumber('62260', [8, 6, 3, 9, 0, 4, 7, 0, 3, 1]) == '73378'\nassert solution.maximumNumber('95074', [4, 2, 4, 9, 3, 2, 3, 9, 7, 3]) == '95494'\nassert solution.maximumNumber('61668', [8, 1, 0, 8, 1, 1, 5, 5, 9, 7]) == '61669'\nassert solution.maximumNumber('69190', [8, 2, 0, 4, 3, 6, 5, 2, 9, 5]) == '69290'\nassert solution.maximumNumber('84828', [0, 6, 6, 7, 4, 3, 4, 1, 8, 5]) == '84868'\nassert solution.maximumNumber('27015', [4, 8, 1, 7, 2, 6, 6, 6, 2, 4]) == '27486'\nassert solution.maximumNumber('9593', [4, 9, 9, 1, 6, 9, 3, 5, 4, 3]) == '9993'\nassert solution.maximumNumber('64800', [9, 5, 4, 7, 6, 2, 7, 0, 3, 4]) == '76800'\nassert solution.maximumNumber('60936', [8, 7, 1, 0, 6, 7, 2, 5, 7, 5]) == '68936'\nassert solution.maximumNumber('61095', [7, 4, 4, 4, 3, 5, 9, 6, 3, 2]) == '94795'\nassert solution.maximumNumber('83006', [0, 8, 0, 3, 2, 0, 6, 3, 7, 2]) == '83006'\nassert solution.maximumNumber('60337', [3, 3, 2, 5, 8, 3, 0, 4, 8, 3]) == '63557'\nassert solution.maximumNumber('10318', [0, 4, 9, 5, 8, 3, 8, 7, 2, 0]) == '40548'\nassert solution.maximumNumber('54435', [5, 9, 0, 5, 6, 4, 9, 7, 3, 3]) == '56655'\nassert solution.maximumNumber('59433', [9, 1, 8, 6, 0, 8, 5, 4, 5, 0]) == '89433'\nassert solution.maximumNumber('79077', [9, 3, 7, 2, 1, 6, 6, 7, 9, 8]) == '79977'\nassert solution.maximumNumber('59646', [5, 9, 1, 4, 5, 7, 3, 4, 6, 0]) == '79646'\nassert solution.maximumNumber('54681', [8, 9, 3, 6, 9, 1, 0, 3, 1, 8]) == '59681'\nassert solution.maximumNumber('6270', [3, 4, 3, 4, 2, 3, 8, 2, 3, 5]) == '8370'\nassert solution.maximumNumber('57524', [2, 8, 0, 7, 6, 1, 8, 4, 3, 3]) == '57526'\nassert solution.maximumNumber('45715', [7, 0, 7, 5, 1, 8, 5, 2, 6, 1]) == '48715'\nassert solution.maximumNumber('44278', [9, 2, 6, 3, 4, 6, 7, 1, 8, 7]) == '44678'\nassert solution.maximumNumber('36106', [3, 1, 0, 2, 6, 1, 8, 8, 0, 7]) == '38138'\nassert solution.maximumNumber('17903', [2, 1, 8, 2, 4, 0, 1, 0, 7, 6]) == '17923'\nassert solution.maximumNumber('35610', [1, 2, 3, 3, 2, 9, 7, 1, 9, 5]) == '39721'\nassert solution.maximumNumber('15690', [8, 8, 7, 9, 2, 6, 9, 7, 4, 2]) == '86990'\nassert solution.maximumNumber('97784', [1, 9, 4, 3, 3, 0, 6, 6, 4, 8]) == '97784'\nassert solution.maximumNumber('79827', [6, 1, 7, 2, 8, 4, 5, 8, 5, 2]) == '89827'\nassert solution.maximumNumber('62038', [7, 0, 0, 9, 8, 4, 2, 9, 5, 2]) == '62798'\nassert solution.maximumNumber('39342', [9, 8, 7, 0, 3, 0, 5, 0, 0, 7]) == '39347'\nassert solution.maximumNumber('8969', [3, 1, 1, 8, 7, 3, 7, 3, 3, 0]) == '8979'\nassert solution.maximumNumber('68312', [5, 9, 4, 3, 1, 4, 5, 7, 2, 7]) == '68394'\nassert solution.maximumNumber('47267', [9, 0, 6, 2, 9, 4, 3, 3, 1, 6]) == '97267'\nassert solution.maximumNumber('33273', [6, 9, 7, 7, 6, 9, 0, 7, 6, 8]) == '77777'\nassert solution.maximumNumber('12872', [7, 3, 9, 4, 3, 0, 5, 7, 7, 1]) == '39872'\nassert solution.maximumNumber('68283', [5, 6, 9, 2, 3, 7, 2, 5, 7, 9]) == '68983'\nassert solution.maximumNumber('92626', [7, 5, 5, 1, 7, 9, 5, 9, 1, 0]) == '95626'\nassert solution.maximumNumber('47846', [7, 0, 8, 1, 5, 3, 6, 7, 3, 2]) == '57846'\nassert solution.maximumNumber('76363', [5, 3, 7, 0, 0, 3, 9, 2, 8, 1]) == '79363'\nassert solution.maximumNumber('97419', [5, 2, 3, 7, 9, 1, 0, 2, 0, 7]) == '97929'\nassert solution.maximumNumber('92012', [3, 5, 9, 7, 7, 5, 0, 0, 7, 9]) == '99359'\nassert solution.maximumNumber('87509', [3, 6, 8, 9, 2, 1, 8, 6, 7, 5]) == '87539'\nassert solution.maximumNumber('9224', [3, 7, 8, 0, 3, 0, 0, 2, 2, 8]) == '9884'\nassert solution.maximumNumber('59512', [3, 4, 4, 0, 1, 4, 8, 5, 8, 5]) == '59544'\nassert solution.maximumNumber('19137', [1, 3, 6, 3, 7, 0, 2, 8, 9, 7]) == '39137'\nassert solution.maximumNumber('43428', [1, 7, 2, 8, 4, 2, 1, 8, 2, 2]) == '48428'\nassert solution.maximumNumber('85492', [7, 1, 3, 7, 8, 5, 1, 0, 4, 2]) == '85892'\nassert solution.maximumNumber('33707', [9, 9, 4, 7, 5, 2, 7, 3, 6, 9]) == '77707'\nassert solution.maximumNumber('92361', [6, 8, 4, 8, 4, 3, 2, 2, 4, 3]) == '94861'\nassert solution.maximumNumber('5964', [5, 1, 2, 6, 2, 6, 5, 4, 4, 3]) == '6964'\nassert solution.maximumNumber('39955', [6, 0, 2, 7, 5, 0, 8, 2, 3, 1]) == '79955'\nassert solution.maximumNumber('44421', [8, 3, 7, 5, 0, 0, 0, 9, 2, 4]) == '44473'\nassert solution.maximumNumber('90319', [4, 4, 2, 4, 9, 9, 9, 7, 7, 0]) == '94449'\nassert solution.maximumNumber('27360', [4, 8, 3, 1, 7, 0, 8, 0, 8, 7]) == '37360'\nassert solution.maximumNumber('9374', [5, 2, 6, 7, 8, 7, 3, 4, 9, 9]) == '9774'\nassert solution.maximumNumber('7928', [0, 7, 0, 7, 2, 2, 2, 1, 6, 7]) == '7928'",
  "inefficient_solution": "class Solution:\n    def maximumNumber(self, num: str, change: List[int]) -> str:\n        word = [list(num[i]) for i in range(len(num))]\n        for i in range(len(word)):\n            for j in range(len(word[i])):\n                if change[int(word[i][j])] > int(word[i][j]):\n                    max_val = int(word[i][j])\n                    for k in range(i, len(word)):\n                        for l in range(len(word[k])):\n                            if int(word[k][l]) >= max_val:\n                                max_val = int(word[k][l])\n                        if max_val == int(change[int(word[i][j])]):\n                            break\n                        else:\n                            word[i][j] = str(change[int(word[i][j])])\n                            break\n                        if l == len(word[k]):\n                            word[i][j] = str(change[int(word[i][j])])\n                            break\n                    break\n            else:\n                continue\n            break\n        return ''.join(''.join(word[i]) for i in range(len(word)))",
  "is_python": true
}