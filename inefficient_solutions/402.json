{
  "problem_idx": 402,
  "task_name": "Remove K Digits",
  "markdown_description": "\nGiven string num representing a non-negative integer `num`, and an integer `k`, return *the smallest possible integer after removing* `k` *digits from* `num`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"1432219\", k = 3\n**Output:** \"1219\"\n**Explanation:** Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"10200\", k = 1\n**Output:** \"200\"\n**Explanation:** Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"10\", k = 2\n**Output:** \"0\"\n**Explanation:** Remove all the digits from the number and it is left with nothing which is 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= num.length <= 105`\n* `num` consists of only digits.\n* `num` does not have any leading zeros except for the zero itself.\n\n\n",
  "canonical_solution": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        stk = []\n        remain = len(num) - k\n        for c in num:\n            while k and stk and stk[-1] > c:\n                stk.pop()\n                k -= 1\n            stk.append(c)\n        return ''.join(stk[:remain]).lstrip('0') or '0'\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        stk = []\n        remain = len(num) - k\n        for c in num:\n            while k and stk and stk[-1] > c:\n                stk.pop()\n                k -= 1\n            stk.append(c)\n        return ''.join(stk[:remain]).lstrip('0') or '0'\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string of digits\n    num = ''.join(random.choice(\"0123456789\") for _ in range(random.randint(1, 6)))\n\n    # Generate a random number of digits to remove\n    k = random.randint(1, len(num))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.removeKdigits(num, k)\n\n    return num, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.removeKdigits(num, k) == expected_result\n        print(f\"assert solution.removeKdigits('{num}', {k}) == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.removeKdigits('{num}', {k}) == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.removeKdigits('3448', 1) == '344'\nassert solution.removeKdigits('777462', 5) == '2'\nassert solution.removeKdigits('878869', 2) == '7869'\nassert solution.removeKdigits('9482', 2) == '42'\nassert solution.removeKdigits('4', 1) == '0'\nassert solution.removeKdigits('96', 2) == '0'\nassert solution.removeKdigits('487148', 1) == '47148'\nassert solution.removeKdigits('939', 2) == '3'\nassert solution.removeKdigits('69', 2) == '0'\nassert solution.removeKdigits('19615', 4) == '1'\nassert solution.removeKdigits('2', 1) == '0'\nassert solution.removeKdigits('660', 2) == '0'\nassert solution.removeKdigits('67', 1) == '6'\nassert solution.removeKdigits('844', 3) == '0'\nassert solution.removeKdigits('201', 3) == '0'\nassert solution.removeKdigits('476490', 4) == '40'\nassert solution.removeKdigits('55914', 3) == '14'\nassert solution.removeKdigits('53', 2) == '0'\nassert solution.removeKdigits('126', 1) == '12'\nassert solution.removeKdigits('8', 1) == '0'\nassert solution.removeKdigits('99669', 1) == '9669'\nassert solution.removeKdigits('0', 1) == '0'\nassert solution.removeKdigits('0412', 1) == '12'\nassert solution.removeKdigits('63', 1) == '3'\nassert solution.removeKdigits('29839', 2) == '239'\nassert solution.removeKdigits('028', 2) == '0'\nassert solution.removeKdigits('3', 1) == '0'\nassert solution.removeKdigits('428', 3) == '0'\nassert solution.removeKdigits('8830', 3) == '0'\nassert solution.removeKdigits('4621', 3) == '1'\nassert solution.removeKdigits('9', 1) == '0'\nassert solution.removeKdigits('8396', 4) == '0'\nassert solution.removeKdigits('377', 2) == '3'\nassert solution.removeKdigits('792', 1) == '72'\nassert solution.removeKdigits('4832', 1) == '432'\nassert solution.removeKdigits('04', 2) == '0'\nassert solution.removeKdigits('559', 3) == '0'\nassert solution.removeKdigits('14948', 1) == '1448'\nassert solution.removeKdigits('5', 1) == '0'\nassert solution.removeKdigits('76452', 2) == '452'\nassert solution.removeKdigits('889', 2) == '8'\nassert solution.removeKdigits('4884', 1) == '484'\nassert solution.removeKdigits('875', 2) == '5'\nassert solution.removeKdigits('929974', 6) == '0'\nassert solution.removeKdigits('0785', 4) == '0'\nassert solution.removeKdigits('688', 3) == '0'\nassert solution.removeKdigits('9900', 1) == '900'\nassert solution.removeKdigits('8', 1) == '0'\nassert solution.removeKdigits('12486', 2) == '124'\nassert solution.removeKdigits('4424', 4) == '0'\nassert solution.removeKdigits('0', 1) == '0'\nassert solution.removeKdigits('774132', 5) == '1'\nassert solution.removeKdigits('903', 1) == '3'\nassert solution.removeKdigits('1157', 1) == '115'\nassert solution.removeKdigits('70127', 2) == '12'\nassert solution.removeKdigits('001374', 4) == '0'\nassert solution.removeKdigits('0767', 3) == '0'\nassert solution.removeKdigits('58257', 2) == '257'\nassert solution.removeKdigits('464666', 5) == '4'\nassert solution.removeKdigits('2144', 4) == '0'\nassert solution.removeKdigits('4', 1) == '0'\nassert solution.removeKdigits('75042', 2) == '42'\nassert solution.removeKdigits('24', 2) == '0'\nassert solution.removeKdigits('197283', 1) == '17283'\nassert solution.removeKdigits('108863', 2) == '863'\nassert solution.removeKdigits('463205', 3) == '205'\nassert solution.removeKdigits('41754', 4) == '1'\nassert solution.removeKdigits('3', 1) == '0'\nassert solution.removeKdigits('967', 3) == '0'\nassert solution.removeKdigits('75440', 4) == '0'\nassert solution.removeKdigits('7', 1) == '0'\nassert solution.removeKdigits('797976', 3) == '776'\nassert solution.removeKdigits('6', 1) == '0'\nassert solution.removeKdigits('0', 1) == '0'\nassert solution.removeKdigits('0389', 1) == '38'\nassert solution.removeKdigits('80', 2) == '0'\nassert solution.removeKdigits('198346', 5) == '1'\nassert solution.removeKdigits('199', 2) == '1'\nassert solution.removeKdigits('8718', 2) == '18'\nassert solution.removeKdigits('3', 1) == '0'\nassert solution.removeKdigits('41283', 4) == '1'\nassert solution.removeKdigits('6237', 4) == '0'\nassert solution.removeKdigits('7', 1) == '0'\nassert solution.removeKdigits('59615', 2) == '515'\nassert solution.removeKdigits('4', 1) == '0'\nassert solution.removeKdigits('269391', 6) == '0'\nassert solution.removeKdigits('6', 1) == '0'\nassert solution.removeKdigits('300764', 4) == '0'\nassert solution.removeKdigits('142', 2) == '1'\nassert solution.removeKdigits('3565', 4) == '0'\nassert solution.removeKdigits('603023', 1) == '3023'\nassert solution.removeKdigits('348742', 4) == '32'\nassert solution.removeKdigits('830', 3) == '0'\nassert solution.removeKdigits('74', 1) == '4'\nassert solution.removeKdigits('8903', 3) == '0'\nassert solution.removeKdigits('4429', 1) == '429'\nassert solution.removeKdigits('9', 1) == '0'\nassert solution.removeKdigits('84', 1) == '4'\nassert solution.removeKdigits('9000', 4) == '0'\nassert solution.removeKdigits('788', 1) == '78'",
  "inefficient_solution": "class Solution:\n    def removeKdigits(self, num: str, k: int) -> str:\n        stack = []\n        for c in num:\n            new_stack = []\n            for x in stack:\n                new_stack.append(x)\n            new_stack.append(c)\n            for y in new_stack:\n                if y != c and k and stack and stack[-1] > c:\n                    new_stack.remove(y)\n                    k -= 1\n            stack = new_stack\n        stack = stack[:len(num) - k] + [''] * k\n        result = ''.join(stack)\n        for x in reversed(stack):\n            if x != '0' or not stack:\n                result = x + result\n                break\n        return result",
  "is_python": true
}