{
  "problem_idx": 347,
  "task_name": "Top K Frequent Elements",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, return *the* `k` *most frequent elements*. You may return the answer in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** nums = [1,1,1,2,2,3], k = 2\n**Output:** [1,2]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** nums = [1], k = 1\n**Output:** [1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-104 <= nums[i] <= 104`\n* `k` is in the range `[1, the number of unique elements in the array]`.\n* It is **guaranteed** that the answer is **unique**.\n\n\n\u00a0\n\n\n**Follow up:** Your algorithm's time complexity must be better than `O(n log n)`, where n is the array's size.\n\n\n",
  "canonical_solution": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        cnt = Counter(nums)\n        hp = []\n        for num, freq in cnt.items():\n            heappush(hp, (freq, num))\n            if len(hp) > k:\n                heappop(hp)\n        return [v[1] for v in hp]\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        cnt = Counter(nums)\n        hp = []\n        for num, freq in cnt.items():\n            heappush(hp, (freq, num))\n            if len(hp) > k:\n                heappop(hp)\n        return [v[1] for v in hp]\n\n\ndef generate_test_case() -> tuple:\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.choices(range(-10000, 10001), k=random.randint(1, 10))\n\n    # Generate a random k\n    k = random.randint(1, len(set(nums)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.topKFrequent(nums, k)\n\n    return nums, k, expected_result\n\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.topKFrequent(nums, k) == expected_result\n        print(f\"assert solution.topKFrequent({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.topKFrequent({nums}, {k}) == {expected_result}\")\n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.topKFrequent([5341, 4453, 5496, -726, -3098, -2476], 5) == [-2476, -726, 5496, 5341, 4453]\nassert solution.topKFrequent([-4940, 4489, -7690, 5129, 2336, 79, 7702, 5023], 4) == [4489, 5023, 5129, 7702]\nassert solution.topKFrequent([-2630, -1939, -106, 4775, -4504, 8681, 2273, -819], 5) == [-819, 2273, -106, 4775, 8681]\nassert solution.topKFrequent([-3067, 5694, -6805], 2) == [-3067, 5694]\nassert solution.topKFrequent([8481, -2624, -5006, 1724, 242, 1702, 412], 1) == [8481]\nassert solution.topKFrequent([4901, -4684, 5928, 4284, 823, -2728, -6287, -6540, 6041, -8132], 5) == [823, 4284, 5928, 4901, 6041]\nassert solution.topKFrequent([-5346, -9518, -5864, -9926, -8216], 5) == [-9926, -9518, -5864, -5346, -8216]\nassert solution.topKFrequent([5515, -8909, 1200, 1480, -8796, -3565], 5) == [-8796, 1200, -3565, 5515, 1480]\nassert solution.topKFrequent([1326, 9381, -5293], 1) == [9381]\nassert solution.topKFrequent([3118, -3498, -4750, -2125, 6415, -4546, 4246], 5) == [-3498, -2125, 4246, 3118, 6415]\nassert solution.topKFrequent([-5716], 1) == [-5716]\nassert solution.topKFrequent([1681, -1942, 9466, -3178, -8446, -8559], 4) == [-3178, -1942, 9466, 1681]\nassert solution.topKFrequent([-2293, -1641, 7353, -7527, 589, 2201, -8396, -4185], 1) == [7353]\nassert solution.topKFrequent([4074], 1) == [4074]\nassert solution.topKFrequent([2966, -8368, 6018, 1602, 1340, 1788, 708, -4153, 6846], 1) == [6846]\nassert solution.topKFrequent([4710, 5621, -2846, -9105, 7133, 7189], 5) == [-2846, 5621, 4710, 7189, 7133]\nassert solution.topKFrequent([-6355, -569, 3107, -2828, 6388, 9477], 1) == [9477]\nassert solution.topKFrequent([5288, -9716, -4505, 4363, 4303, 7366, 7076, -4640, 3137, -7415], 1) == [7366]\nassert solution.topKFrequent([4757, 578, 6486, -942, 4496, 6259], 3) == [4757, 6259, 6486]\nassert solution.topKFrequent([6080, -7155], 2) == [-7155, 6080]\nassert solution.topKFrequent([-942], 1) == [-942]\nassert solution.topKFrequent([1828, 203, -1472, -5627, 654, -7513, -2375, -2693, -6336, -7360], 8) == [-6336, -2693, -5627, -1472, 654, 203, -2375, 1828]\nassert solution.topKFrequent([-9809, -460, -3133, -1185, -6851, 3288], 2) == [-460, 3288]\nassert solution.topKFrequent([-8809, -149, -627], 2) == [-627, -149]\nassert solution.topKFrequent([3847, 4923, -1199, 9442, 6672], 3) == [4923, 6672, 9442]\nassert solution.topKFrequent([-2242, -8652, -6714, 7428, -395, -7071, 4481, 893], 7) == [-7071, -2242, -6714, 893, -395, 7428, 4481]\nassert solution.topKFrequent([2175, -2878], 1) == [2175]\nassert solution.topKFrequent([3093, 5696, 4664], 2) == [4664, 5696]\nassert solution.topKFrequent([4602], 1) == [4602]\nassert solution.topKFrequent([2795, 3984], 2) == [2795, 3984]\nassert solution.topKFrequent([5443, 9298], 1) == [9298]\nassert solution.topKFrequent([-3680, -4275], 2) == [-4275, -3680]\nassert solution.topKFrequent([4292, 127, 6809, 6752, -3758, -9603, -7569], 2) == [6752, 6809]\nassert solution.topKFrequent([4208, -3623, 2683, -6053, -7672, 2966, 6337], 7) == [-7672, -6053, 2683, 4208, -3623, 2966, 6337]\nassert solution.topKFrequent([6199, 9931, -9563, 9638, 330], 4) == [330, 9638, 6199, 9931]\nassert solution.topKFrequent([241, 7492, 4583, -1318, 6013], 4) == [241, 6013, 4583, 7492]\nassert solution.topKFrequent([7414], 1) == [7414]\nassert solution.topKFrequent([-4441], 1) == [-4441]\nassert solution.topKFrequent([-5676, -830, 7258, 6672, 89, -6903], 2) == [6672, 7258]\nassert solution.topKFrequent([5086], 1) == [5086]\nassert solution.topKFrequent([-4040, 3641, 6956, 3963, -365, -7591, 3199], 5) == [-365, 3641, 3199, 3963, 6956]\nassert solution.topKFrequent([-8435, 777, -6324], 2) == [-6324, 777]\nassert solution.topKFrequent([-2407, 2503, 5642, 3785], 2) == [3785, 5642]\nassert solution.topKFrequent([-8730, -8011, 9987, 1093, -7122, -895, -8502], 4) == [-7122, -895, 9987, 1093]\nassert solution.topKFrequent([2523, 8809, 1341, 706], 4) == [706, 1341, 2523, 8809]\nassert solution.topKFrequent([-7003, 1977, -2545], 1) == [1977]\nassert solution.topKFrequent([-6518, -8440], 1) == [-6518]\nassert solution.topKFrequent([-2221, -4683, 6955, -1163, 6434, 6138], 2) == [6434, 6955]\nassert solution.topKFrequent([5061, 6134, -4013, -3254, -8848, -2025], 3) == [-2025, 6134, 5061]\nassert solution.topKFrequent([-8792, 9876], 2) == [-8792, 9876]\nassert solution.topKFrequent([-2958, -3470, 4655, -6058], 1) == [4655]\nassert solution.topKFrequent([2541, 3412, 1200, 4831, 5889, -4018, -7855, -5095, -5355, 3555], 9) == [-5355, -5095, -4018, 3412, 3555, 2541, 1200, 4831, 5889]\nassert solution.topKFrequent([-9237, 7708, -9279, 2815, 704, 535], 1) == [7708]\nassert solution.topKFrequent([8394, -3389, -2999, -3671, -1465, 1276], 5) == [-3389, -1465, -2999, 8394, 1276]\nassert solution.topKFrequent([-9927, -8286, 7022], 3) == [-9927, -8286, 7022]\nassert solution.topKFrequent([-3778, 1815, 1158, 7791, -8381, -9930, 2110, -940, -1575], 8) == [-8381, -3778, -940, -1575, 1815, 1158, 2110, 7791]\nassert solution.topKFrequent([-7110, 1759, -3817, 5600, 5801, -6419, -5112, -3705, 2893], 2) == [5600, 5801]\nassert solution.topKFrequent([-7795, 5169, -3841, 8875, 4309, 2527, -6169, -6033, 4891, 1158], 9) == [-6169, -6033, -3841, 4309, 1158, 2527, 5169, 8875, 4891]\nassert solution.topKFrequent([-6136, 9116, -4083, 2116, 6889], 4) == [-4083, 2116, 6889, 9116]\nassert solution.topKFrequent([1146, 1831], 1) == [1831]\nassert solution.topKFrequent([6502, -3517], 1) == [6502]\nassert solution.topKFrequent([6910, 7232, -8279, -1233, -3768, -9903, -4487, 2365, -5033], 6) == [-4487, -3768, 2365, 7232, -1233, 6910]\nassert solution.topKFrequent([6912], 1) == [6912]\nassert solution.topKFrequent([-5766, -2440, 1662, 7341], 1) == [7341]\nassert solution.topKFrequent([4499, 8441, 7013, 2440, 6331, 1810, -3490, -6048], 4) == [4499, 6331, 7013, 8441]\nassert solution.topKFrequent([-7613, 1967, -3279, 3177, 6851, -9710, 2097, -7053, -5236], 6) == [-5236, 1967, -3279, 3177, 6851, 2097]\nassert solution.topKFrequent([2332, 2079], 1) == [2332]\nassert solution.topKFrequent([-7143, 6071, -8032, -5581, 1671, 9042, -2539], 2) == [6071, 9042]\nassert solution.topKFrequent([1082, 9838, 5841, 58], 2) == [5841, 9838]\nassert solution.topKFrequent([-7350, 5852, 8181, -1583, -3632, 9425, -2440, -2352, 3898], 2) == [8181, 9425]\nassert solution.topKFrequent([-6423, -801, 8223, 1543, 8304, 6074], 5) == [-801, 1543, 6074, 8223, 8304]\nassert solution.topKFrequent([-1876, 3925, -7391, 1128, -5286, 2986], 4) == [-1876, 1128, 2986, 3925]\nassert solution.topKFrequent([2759, 5354, 9334, 5113, -8907, -2187], 2) == [5354, 9334]\nassert solution.topKFrequent([-2556, 1330, -4565, -3404, 1234, -1439], 5) == [-3404, -1439, -2556, 1330, 1234]\nassert solution.topKFrequent([-3090, -1298, 9334, 5397, 8147], 3) == [5397, 8147, 9334]\nassert solution.topKFrequent([4265, -3394, -2483, -1802, -6937, -4033, -9065, -8075], 2) == [-1802, 4265]\nassert solution.topKFrequent([-9871, 5947, 9823, 7317, 6718], 5) == [-9871, 5947, 9823, 7317, 6718]\nassert solution.topKFrequent([-1665, 4330, -7829, -4830, 9906, 3744, 6065, -8196, 7359], 9) == [-8196, -7829, -1665, -4830, 9906, 3744, 6065, 4330, 7359]\nassert solution.topKFrequent([7659, -5338, 9529, 2881], 1) == [9529]\nassert solution.topKFrequent([-9666, 6116, -2358, -7232], 2) == [-2358, 6116]\nassert solution.topKFrequent([856, -1364, -100, -5931, -2271, 1264, -3055, 8353, -7984], 8) == [-5931, -2271, -3055, 856, -1364, 1264, -100, 8353]\nassert solution.topKFrequent([-7613, -2430, -5647, 6739, -6250, 8672, 8627], 7) == [-7613, -6250, -5647, 6739, -2430, 8672, 8627]\nassert solution.topKFrequent([984, -1506, 764, -2748, 8961, 8079], 4) == [764, 984, 8079, 8961]\nassert solution.topKFrequent([6359, 5890, -7770, 3248, -6815, 4883, 9996, -4506, -8475, -4861], 6) == [-4506, 3248, 4883, 6359, 9996, 5890]\nassert solution.topKFrequent([-2525, -515, 3629, 6635, -786, -480, 6766], 6) == [-786, -515, -480, 6635, 6766, 3629]\nassert solution.topKFrequent([5102, 1845, -7391, -3367], 3) == [-3367, 5102, 1845]\nassert solution.topKFrequent([8963, -1664, -4676, 2856, 8433], 2) == [8433, 8963]\nassert solution.topKFrequent([3595, -4581], 1) == [3595]\nassert solution.topKFrequent([-850, 6462, 6118, 4511, -1200, -3692, -7752], 7) == [-7752, -850, -3692, 6462, 4511, 6118, -1200]\nassert solution.topKFrequent([-3217, 5473, -7541, -1169], 3) == [-3217, -1169, 5473]\nassert solution.topKFrequent([-2463, 4055, 9402, 6108, -8639, 9159, -3764, -9182, -6957, -3573], 2) == [9159, 9402]\nassert solution.topKFrequent([-1445, -6006, -5048, -7951, -6886, 6071, 3892, 8475, -5796, 5606], 5) == [-1445, 3892, 5606, 8475, 6071]\nassert solution.topKFrequent([3501, 4155], 2) == [3501, 4155]\nassert solution.topKFrequent([-6308, -6363, 5708, -4178, 366, -2052], 1) == [5708]\nassert solution.topKFrequent([-2557, -346, 483, -1508, -5283], 2) == [-346, 483]\nassert solution.topKFrequent([7718, -5716, -5349, -2101, -3155], 1) == [7718]\nassert solution.topKFrequent([-465, 2671], 1) == [2671]\nassert solution.topKFrequent([-2161, 1139, 2083, -8460], 2) == [1139, 2083]\nassert solution.topKFrequent([-5131, -3987, 3713, 3855, 5159, -7832], 6) == [-7832, -3987, -5131, 3855, 5159, 3713]\nassert solution.topKFrequent([-7237, -9532, 2345, 9147, 7040], 3) == [2345, 7040, 9147]",
  "inefficient_solution": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        cnt = Counter(nums)\n        freqs = {v: [] for v in cnt.values()}\n        for num, freq in cnt.items():\n            freqs[freq].append(num)\n        \n        res = []\n        for i in range(max(cnt.values()), 0, -1):\n            if i in freqs and len(res) < k:\n                res.extend(freqs[i])\n                if len(res) >= k:\n                    break\n        \n        return res",
  "is_python": true
}