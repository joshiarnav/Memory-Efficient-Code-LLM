{
  "problem_idx": 2036,
  "task_name": "Maximum Alternating Subarray Sum",
  "markdown_description": "\nA **subarray** of a **0-indexed** integer array is a contiguous **non-empty** sequence of elements within an array.\n\n\nThe **alternating subarray sum** of a subarray that ranges from index `i` to `j` (**inclusive**, `0 <= i <= j < nums.length`) is `nums[i] - nums[i+1] + nums[i+2] - ... +/- nums[j]`.\n\n\nGiven a **0-indexed** integer array `nums`, return *the **maximum alternating subarray sum** of any subarray of* `nums`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,-1,1,2]\n**Output:** 5\n**Explanation:**\nThe subarray [3,-1,1] has the largest alternating subarray sum.\nThe alternating subarray sum is 3 - (-1) + 1 = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,2,2,2,2]\n**Output:** 2\n**Explanation:**\nThe subarrays [2], [2,2,2], and [2,2,2,2,2] have the largest alternating subarray sum.\nThe alternating subarray sum of [2] is 2.\nThe alternating subarray sum of [2,2,2] is 2 - 2 + 2 = 2.\nThe alternating subarray sum of [2,2,2,2,2] is 2 - 2 + 2 - 2 + 2 = 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1]\n**Output:** 1\n**Explanation:**\nThere is only one non-empty subarray, which is [1].\nThe alternating subarray sum is 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-105 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumAlternatingSubarraySum(self, nums: List[int]) -> int:\n        ans = f = g = -inf\n        for x in nums:\n            f, g = max(g, 0) + x, f - x\n            ans = max(ans, f, g)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maximumAlternatingSubarraySum(self, nums: List[int]) -> int:\n        ans = f = g = float(\"-inf\")\n        for x in nums:\n            f, g = max(g, 0) + x, f - x\n            ans = max(ans, f, g)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-100000, 100001), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumAlternatingSubarraySum(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumAlternatingSubarraySum(nums) == expected_result\n        test_case_generator_results.append(f\"assert solution.maximumAlternatingSubarraySum({nums}) == {expected_result}\") \n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.maximumAlternatingSubarraySum([6425, 36957, -17535]) == 54492\nassert solution.maximumAlternatingSubarraySum([-40001, -65040, -32964, -69249, -14749]) == 61324\nassert solution.maximumAlternatingSubarraySum([-8189, 65276]) == 65276\nassert solution.maximumAlternatingSubarraySum([54861, -91014, -81336]) == 145875\nassert solution.maximumAlternatingSubarraySum([-91547, 52092, 94056, -32083, 44175, -6112, -23838, 75196, 57268]) == 176426\nassert solution.maximumAlternatingSubarraySum([70136, 29943, -82314, -32757]) == 112257\nassert solution.maximumAlternatingSubarraySum([-39021, 40251, 93159, 66328, -70547, 26361, -24264, 82031]) == 269531\nassert solution.maximumAlternatingSubarraySum([-73953, 85520, 82042]) == 85520\nassert solution.maximumAlternatingSubarraySum([79719, -15882, 76476, 75408, 50533, -16498]) == 172077\nassert solution.maximumAlternatingSubarraySum([-52246]) == -52246\nassert solution.maximumAlternatingSubarraySum([-82307, 6400]) == 6400\nassert solution.maximumAlternatingSubarraySum([-86438, -50776, -76858, 85812, 69781]) == 111894\nassert solution.maximumAlternatingSubarraySum([-33950, -87508, 57888, -40618]) == 152064\nassert solution.maximumAlternatingSubarraySum([86030, 57331, 28261, -69808, 29359, -1350, -4084, -52015, 2086]) == 207494\nassert solution.maximumAlternatingSubarraySum([-44564, 33804, -20828, 27777, -58936]) == 141345\nassert solution.maximumAlternatingSubarraySum([84706]) == 84706\nassert solution.maximumAlternatingSubarraySum([-84988, 94590, 85170, 76199, -5331, -66123]) == 94590\nassert solution.maximumAlternatingSubarraySum([-18281, -40957, 97026, -38970, 40454]) == 199126\nassert solution.maximumAlternatingSubarraySum([-77207, 25753, -10485, -21302, 78140]) == 88957\nassert solution.maximumAlternatingSubarraySum([-96825]) == -96825\nassert solution.maximumAlternatingSubarraySum([27161, 74482, -76199, -28694, 85824, -23056, 55770]) == 164650\nassert solution.maximumAlternatingSubarraySum([50806, -28925]) == 79731\nassert solution.maximumAlternatingSubarraySum([34366, 52030, -19821]) == 71851\nassert solution.maximumAlternatingSubarraySum([79461]) == 79461\nassert solution.maximumAlternatingSubarraySum([26019, 86018, -32327, -54698, 89805, -3622, 81612]) == 197410\nassert solution.maximumAlternatingSubarraySum([33477, 37718, 88885, 70294, -25194, -92597, 34442, -13115, -64707]) == 133551\nassert solution.maximumAlternatingSubarraySum([-58792, 29573, -25201, 67605, -24589, -31248, 24749, -38476, -81220, -54198]) == 146968\nassert solution.maximumAlternatingSubarraySum([-49769, 22091, 29935, 56260, 79346, 63557, 19595, 50767, -52085, 20961]) == 167775\nassert solution.maximumAlternatingSubarraySum([1380, -50842]) == 52222\nassert solution.maximumAlternatingSubarraySum([82766, -23517, -14483, -87364, -52027]) == 179164\nassert solution.maximumAlternatingSubarraySum([48818, 24911]) == 48818\nassert solution.maximumAlternatingSubarraySum([-62069, 78881, -60619, -77399, -41586, -36921, 35040, 35667]) == 139500\nassert solution.maximumAlternatingSubarraySum([-69020, 10647, 11311, -51215, -98010, 11350]) == 62526\nassert solution.maximumAlternatingSubarraySum([79059]) == 79059\nassert solution.maximumAlternatingSubarraySum([37617, 9563, 18468, 71404, -90656, -27328, 39336, -7040]) == 162060\nassert solution.maximumAlternatingSubarraySum([-24187, 51235]) == 51235\nassert solution.maximumAlternatingSubarraySum([-28834, -21245, 69316, -93841]) == 163157\nassert solution.maximumAlternatingSubarraySum([32150, 3073, -16544]) == 32150\nassert solution.maximumAlternatingSubarraySum([98408, -6614, -22570, -30320, 62885]) == 175657\nassert solution.maximumAlternatingSubarraySum([91595, 8779, 57522, -8122]) == 148460\nassert solution.maximumAlternatingSubarraySum([56851, -67091, -19538, 24579, 74201, 52097, 31721, 39388, -85803, 54571]) == 200138\nassert solution.maximumAlternatingSubarraySum([75958, -31350, -64025, -24610, -13382, -74974]) == 129485\nassert solution.maximumAlternatingSubarraySum([-51713, -18196, 469, -31958, -65514]) == 33556\nassert solution.maximumAlternatingSubarraySum([99365, 73287, -71931, 72004, -63812]) == 281034\nassert solution.maximumAlternatingSubarraySum([-90521, -92268, 61309]) == 63056\nassert solution.maximumAlternatingSubarraySum([43176, -18035, 68987]) == 130198\nassert solution.maximumAlternatingSubarraySum([10090, 89080, 56798, 48458]) == 89080\nassert solution.maximumAlternatingSubarraySum([29998, 66112, 55915, 80860, 67569, 48038, 70897, 17254, 23070]) == 96244\nassert solution.maximumAlternatingSubarraySum([-62540, 61680, 91539]) == 91539\nassert solution.maximumAlternatingSubarraySum([-27431, 93969, -98436, 87238, 25004, 58704]) == 313343\nassert solution.maximumAlternatingSubarraySum([-30533, -24678]) == -5855\nassert solution.maximumAlternatingSubarraySum([90250, 24992, 5113, 47832, -52922, -52191, 11976, 80059, 18188]) == 136525\nassert solution.maximumAlternatingSubarraySum([-82214, -71903, -64951, -70730, 83994, -90831, 2224, 80496]) == 182828\nassert solution.maximumAlternatingSubarraySum([-88239, -12194, -27854, 17595, 13939, -4763, -39709, -94076, 15478, -35651]) == 124198\nassert solution.maximumAlternatingSubarraySum([-13296, -73680, 93503, -85025, -32640, -1884, -28693, 78734]) == 238912\nassert solution.maximumAlternatingSubarraySum([41461]) == 41461\nassert solution.maximumAlternatingSubarraySum([-83264, 96794, 50114, 46097, -70934, 59826, -89618, -17479, -46447]) == 342123\nassert solution.maximumAlternatingSubarraySum([-67560, 70656, 60116, 51969]) == 70656\nassert solution.maximumAlternatingSubarraySum([-96355, -27188, 89802]) == 89802\nassert solution.maximumAlternatingSubarraySum([76803, -30364]) == 107167\nassert solution.maximumAlternatingSubarraySum([72247, -25279, -68278, 30647, 59314]) == 97526\nassert solution.maximumAlternatingSubarraySum([-71048, -16469, 52164, 60784]) == 60784\nassert solution.maximumAlternatingSubarraySum([-62049]) == -62049\nassert solution.maximumAlternatingSubarraySum([-98611, -34240, 5111, -55693, 86575, -25246, 87509, 35468, -99703, -18070]) == 260134\nassert solution.maximumAlternatingSubarraySum([41534, 55443, 23861, -91545, 39631, -88418, 6943, 86787, -88948, -48193]) == 250398\nassert solution.maximumAlternatingSubarraySum([70886, -11079, 8991, -39321, 91863]) == 222140\nassert solution.maximumAlternatingSubarraySum([-88031, -43570]) == -43570\nassert solution.maximumAlternatingSubarraySum([-37698, -81864]) == 44166\nassert solution.maximumAlternatingSubarraySum([25293, 88605, -65545, 86079, -62015, 51347, 32247, 84797, -51624]) == 457765\nassert solution.maximumAlternatingSubarraySum([92708, -34682, 95213, 90838, -67409, 69000, 83598]) == 227247\nassert solution.maximumAlternatingSubarraySum([-76343, 96745, -30465, -71551, 69245, 81298, 41485, 32784, -6983, -23058]) == 127210\nassert solution.maximumAlternatingSubarraySum([-99255, -85321, -7443, 48949, 52950, 54981, -45491]) == 100472\nassert solution.maximumAlternatingSubarraySum([-61871, -81771]) == 19900\nassert solution.maximumAlternatingSubarraySum([-6714]) == -6714\nassert solution.maximumAlternatingSubarraySum([83066, 48816, -12290, -53859, -45473, 44830, -89223, -95717, -94927]) == 186773\nassert solution.maximumAlternatingSubarraySum([28930, -75312, 86236]) == 190478\nassert solution.maximumAlternatingSubarraySum([-29702, 72395, 82796, 38771, -34139]) == 82796\nassert solution.maximumAlternatingSubarraySum([37003, 4870, 82836, -80943]) == 195912\nassert solution.maximumAlternatingSubarraySum([16875, 6251, 59904, -81714, 42801, 37154, -48937, 66856, -5386]) == 195043\nassert solution.maximumAlternatingSubarraySum([-62793, -93828]) == 31035\nassert solution.maximumAlternatingSubarraySum([10289, 30541, -99, 7972, 9441]) == 38612\nassert solution.maximumAlternatingSubarraySum([84263, -26443, -71985, -2524]) == 110706\nassert solution.maximumAlternatingSubarraySum([-69073, 46830, 65041, -21622, 58083, 62949]) == 144746\nassert solution.maximumAlternatingSubarraySum([-90592, -54379, -78517, 35152, -43073, 22466]) == 124829\nassert solution.maximumAlternatingSubarraySum([-22198, 9054]) == 9054\nassert solution.maximumAlternatingSubarraySum([-60559, 22472, -87561, 42]) == 110075\nassert solution.maximumAlternatingSubarraySum([-53195, 99590, -13362, -74900, 92904, 50693, 23998, -62443, 58853]) == 249043\nassert solution.maximumAlternatingSubarraySum([-60745, -84976]) == 24231\nassert solution.maximumAlternatingSubarraySum([-21320, 84214, -74000, -5830]) == 158214\nassert solution.maximumAlternatingSubarraySum([42036, 92374, 88464, -31660, -22521]) == 120124\nassert solution.maximumAlternatingSubarraySum([99746, 88406, -69646, 30034, 56912, -92024, 90906, -30454, 55431]) == 325727\nassert solution.maximumAlternatingSubarraySum([22213, -2212, -33664, -47972, -94299, 43701, 49872, -66880]) == 121480\nassert solution.maximumAlternatingSubarraySum([-89468, 32489, 38850]) == 38850\nassert solution.maximumAlternatingSubarraySum([21656, 81043, 39882, 21459, -42485, 56246]) == 161351\nassert solution.maximumAlternatingSubarraySum([73425, 93610, 35390, 18720, 14241, 56492, -6407]) == 125598\nassert solution.maximumAlternatingSubarraySum([-35999, -52865]) == 16866\nassert solution.maximumAlternatingSubarraySum([21805, 62086, -6222, 26003, 58801, 20158, 29393, -5880]) == 94311\nassert solution.maximumAlternatingSubarraySum([81771, -94550, 20414, 63419, -16779, 55115]) == 196735\nassert solution.maximumAlternatingSubarraySum([-51269, -50216, -87063, -19363, -52708, 9927, -86696, 24992, 9075]) == 191807\nassert solution.maximumAlternatingSubarraySum([37707]) == 37707",
  "inefficient_solution": "class Solution:\n    def maximumAlternatingSubarraySum(self, nums):\n        max_sum = float('-inf')\n        max_prev_sum = float('-inf')\n        max_next_sum = float('-inf')\n        temp_max_prev_sum = float('-inf')\n        temp_max_next_sum = float('-inf')\n        temp_sum = 0\n        temp_prev_sum = 0\n        temp_next_sum = 0\n        temp_max_prev_prev_sum = float('-inf')\n        temp_max_next_next_sum = float('-inf')\n        prev_i = 0\n        next_i = 0\n        for i in range(len(nums)):\n            temp_prev_sum = temp_sum\n            temp_next_sum = temp_sum\n            temp_sum = nums[i]\n            if i % 2 == 0:\n                temp_sum = temp_sum + temp_next_sum\n                temp_next_sum = temp_sum\n                temp_sum = temp_sum - temp_max_next_sum\n                temp_max_next_sum = temp_sum\n            else:\n                temp_sum = temp_sum - temp_max_prev_sum\n                temp_max_prev_sum = temp_sum\n                temp_sum = temp_sum + temp_prev_sum\n                temp_prev_sum = temp_sum\n            max_sum = max(max_sum, temp_sum)\n            max_prev_sum = max(max_prev_sum, temp_max_prev_sum)\n            max_next_sum = max(max_next_sum, temp_max_next_sum)\n            max_prev_prev_sum = max(max_prev_prev_sum, temp_max_prev_sum)\n            max_next_next_sum = max(max_next_next_sum, temp_max_next_sum)\n            if i % 2 == 0:\n                max_sum = max(max_sum, temp_sum - temp_next_sum + temp_max_next_next_sum)\n            else:\n                max_sum = max(max_sum, temp_sum - temp_prev_sum + temp_max_prev_prev_sum)\n        return max_sum",
  "is_python": true
}