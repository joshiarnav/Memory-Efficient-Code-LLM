{
  "problem_idx": 2231,
  "task_name": "Largest Number After Digit Swaps by Parity",
  "markdown_description": "\nYou are given a positive integer `num`. You may swap any two digits of `num` that have the same **parity** (i.e. both odd digits or both even digits).\n\n\nReturn *the **largest** possible value of* `num` *after **any** number of swaps.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 1234\n**Output:** 3412\n**Explanation:** Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 65875\n**Output:** 87655\n**Explanation:** Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def largestInteger(self, num: int) -> int:\n        cnt = Counter()\n        x = num\n        while x:\n            x, v = divmod(x, 10)\n            cnt[v] += 1\n        x = num\n        ans = 0\n        t = 1\n        while x:\n            x, v = divmod(x, 10)\n            for y in range(10):\n                if ((v ^ y) & 1) == 0 and cnt[y]:\n                    ans += y * t\n                    t *= 10\n                    cnt[y] -= 1\n                    break\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def largestInteger(self, num: int) -> int:\n        cnt = Counter()\n        x = num\n        while x:\n            x, v = divmod(x, 10)\n            cnt[v] += 1\n        x = num\n        ans = 0\n        t = 1\n        while x:\n            x, v = divmod(x, 10)\n            for y in range(10):\n                if ((v ^ y) & 1) == 0 and cnt[y]:\n                    ans += y * t\n                    t *= 10\n                    cnt[y] -= 1\n                    break\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random number\n    num = random.randint(1, 10**9)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestInteger(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestInteger(num) == expected_result\n        print(f\"assert solution.largestInteger({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.largestInteger({num}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestInteger(60741480) == 86741400\nassert solution.largestInteger(417456353) == 675454331\nassert solution.largestInteger(257161131) == 675321111\nassert solution.largestInteger(985503591) == 989505531\nassert solution.largestInteger(629697761) == 669697721\nassert solution.largestInteger(18235605) == 58653201\nassert solution.largestInteger(545958194) == 989554514\nassert solution.largestInteger(631065343) == 653643301\nassert solution.largestInteger(370603113) == 736003311\nassert solution.largestInteger(298981336) == 898963312\nassert solution.largestInteger(401833788) == 887833140\nassert solution.largestInteger(413867550) == 875645310\nassert solution.largestInteger(816724618) == 878166412\nassert solution.largestInteger(248967465) == 866947425\nassert solution.largestInteger(952066922) == 996622520\nassert solution.largestInteger(480089878) == 888849070\nassert solution.largestInteger(867107163) == 867763101\nassert solution.largestInteger(781701793) == 987707311\nassert solution.largestInteger(568859068) == 988855660\nassert solution.largestInteger(770899280) == 998877200\nassert solution.largestInteger(891392056) == 899536210\nassert solution.largestInteger(129479289) == 989497221\nassert solution.largestInteger(406440794) == 644440970\nassert solution.largestInteger(12654287) == 78654221\nassert solution.largestInteger(441908141) == 849144101\nassert solution.largestInteger(924999743) == 944999723\nassert solution.largestInteger(826269269) == 866629229\nassert solution.largestInteger(471972922) == 499772122\nassert solution.largestInteger(477735284) == 877753442\nassert solution.largestInteger(209502510) == 229500510\nassert solution.largestInteger(982159561) == 986955121\nassert solution.largestInteger(988948489) == 988988449\nassert solution.largestInteger(528615492) == 986455212\nassert solution.largestInteger(619581727) == 897765121\nassert solution.largestInteger(153403838) == 533883410\nassert solution.largestInteger(927316828) == 987318622\nassert solution.largestInteger(579657839) == 997875653\nassert solution.largestInteger(972289684) == 998867422\nassert solution.largestInteger(170154466) == 756116440\nassert solution.largestInteger(441687894) == 889647414\nassert solution.largestInteger(223437367) == 647273323\nassert solution.largestInteger(683995076) == 869975630\nassert solution.largestInteger(641009725) == 649207501\nassert solution.largestInteger(215530251) == 255532011\nassert solution.largestInteger(800579278) == 882977050\nassert solution.largestInteger(378632756) == 778656332\nassert solution.largestInteger(468052412) == 864452210\nassert solution.largestInteger(706386937) == 986760733\nassert solution.largestInteger(908675164) == 986675140\nassert solution.largestInteger(134794399) == 994974331\nassert solution.largestInteger(729508882) == 987588220\nassert solution.largestInteger(520506108) == 586520100\nassert solution.largestInteger(87979512) == 89977512\nassert solution.largestInteger(415621489) == 895641421\nassert solution.largestInteger(949845086) == 989865440\nassert solution.largestInteger(93328146) == 93386142\nassert solution.largestInteger(294965443) == 694945423\nassert solution.largestInteger(709115592) == 929755110\nassert solution.largestInteger(43668737) == 87664733\nassert solution.largestInteger(314348053) == 538344031\nassert solution.largestInteger(533142281) == 533184221\nassert solution.largestInteger(141069475) == 967445011\nassert solution.largestInteger(817507263) == 877563201\nassert solution.largestInteger(999266532) == 999662532\nassert solution.largestInteger(756370524) == 776554320\nassert solution.largestInteger(224238753) == 842272533\nassert solution.largestInteger(229736935) == 629972533\nassert solution.largestInteger(867157941) == 869775141\nassert solution.largestInteger(74102413) == 74342011\nassert solution.largestInteger(902546950) == 964920550\nassert solution.largestInteger(796794899) == 998996477\nassert solution.largestInteger(906710483) == 986734001\nassert solution.largestInteger(741097087) == 987477001\nassert solution.largestInteger(874263331) == 876423331\nassert solution.largestInteger(159101465) == 955161401\nassert solution.largestInteger(35282398) == 95882332\nassert solution.largestInteger(803778679) == 889776073\nassert solution.largestInteger(77512278) == 77758212\nassert solution.largestInteger(939703473) == 997743033\nassert solution.largestInteger(321374681) == 783316421\nassert solution.largestInteger(721654484) == 785614442\nassert solution.largestInteger(452187355) == 874525531\nassert solution.largestInteger(883399875) == 889975833\nassert solution.largestInteger(204107947) == 442907701\nassert solution.largestInteger(724137917) == 942777311\nassert solution.largestInteger(166948530) == 986564310\nassert solution.largestInteger(897494861) == 899876441\nassert solution.largestInteger(587401678) == 787865410\nassert solution.largestInteger(763123389) == 987363321\nassert solution.largestInteger(908061992) == 986209910\nassert solution.largestInteger(839926465) == 899566423\nassert solution.largestInteger(430771935) == 490775331\nassert solution.largestInteger(455565079) == 697545055\nassert solution.largestInteger(428040349) == 844420903\nassert solution.largestInteger(398666093) == 998666033\nassert solution.largestInteger(420903258) == 842925030\nassert solution.largestInteger(527547443) == 747545423\nassert solution.largestInteger(341022417) == 743422011\nassert solution.largestInteger(268942284) == 886944222\nassert solution.largestInteger(131170550) == 755310110",
  "inefficient_solution": "class Solution:\n    def largestInteger(self, num: int) -> int:\n        parity = [0] * 2\n        parity_list = [[] for _ in range(2)]\n        x = num\n        while x:\n            x, v = divmod(x, 10)\n            parity[v % 2] += 1\n            parity_list[v % 2].append(v)\n        ans = []\n        x = num\n        for _ in range(parity[1]):\n            x, v = divmod(x, 10)\n            ans.append(str(v))\n        for _ in range(parity[0]):\n            x, v = divmod(x, 10)\n            ans.append(str(v))\n        ans.sort(reverse=True)\n        return int(''.join(ans))",
  "is_python": true
}