{
  "problem_idx": 80,
  "task_name": "Remove Duplicates from Sorted Array II",
  "markdown_description": "\nGiven an integer array `nums` sorted in **non-decreasing order**, remove some duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears **at most twice**. The **relative order** of the elements should be kept the **same**.\n\n\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the **first part** of the array `nums`. More formally, if there are `k` elements after removing the duplicates, then the first `k` elements of `nums`\u00a0should hold the final result. It does not matter what you leave beyond the first\u00a0`k`\u00a0elements.\n\n\nReturn `k` *after placing the final result in the first* `k` *slots of* `nums`.\n\n\nDo **not** allocate extra space for another array. You must do this by **modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** with O(1) extra memory.\n\n\n**Custom Judge:**\n\n\nThe judge will test your solution with the following code:\n\n\n\n```\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n```\n\nIf all assertions pass, then your solution will be **accepted**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,2,2,3]\n**Output:** 5, nums = [1,1,2,2,3,_]\n**Explanation:** Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,0,1,1,1,1,2,3,3]\n**Output:** 7, nums = [0,0,1,1,2,3,3,_,_]\n**Explanation:** Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 3 * 104`\n* `-104 <= nums[i] <= 104`\n* `nums` is sorted in **non-decreasing** order.\n\n\n",
  "canonical_solution": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        k = 0\n        for x in nums:\n            if k < 2 or x != nums[k - 2]:\n                nums[k] = x\n                k += 1\n        return k\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        k = 0\n        for x in nums:\n            if k < 2 or x != nums[k - 2]:\n                nums[k] = x\n                k += 1\n        return k\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = []\n    for _ in range(random.randint(1, 11)):\n        nums.append(random.randint(-10000, 10000))\n    nums.sort()\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.removeDuplicates(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.removeDuplicates(nums) == expected_result\n        if len(nums) != 0:\n            print(f\"assert solution.removeDuplicates({nums}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.removeDuplicates({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.removeDuplicates([-9346, 3218, 4001, 4419]) == 4\nassert solution.removeDuplicates([-7587, -2805]) == 2\nassert solution.removeDuplicates([7281]) == 1\nassert solution.removeDuplicates([-6739, -5851, -4290, -3057, -1426, -849, 558, 4689, 5350]) == 9\nassert solution.removeDuplicates([-7857, -5593]) == 2\nassert solution.removeDuplicates([-9835, -6343, -4787, 739, 4104, 4229, 6987]) == 7\nassert solution.removeDuplicates([-3803]) == 1\nassert solution.removeDuplicates([-2841, -1445, -1097, -332, 2721, 2765, 3387, 3691, 8797]) == 9\nassert solution.removeDuplicates([-8245, -5804, -4129, -2952, 311, 1226, 1872, 7359]) == 8\nassert solution.removeDuplicates([-1035, -981, 999, 3264, 8704]) == 5\nassert solution.removeDuplicates([-7899, -7736, -6250, -3149, 3181, 4865, 9397]) == 7\nassert solution.removeDuplicates([-8391, -6705, -3842, -3219, -844, 938, 4137, 5258]) == 8\nassert solution.removeDuplicates([-8258, -7904, -5232, -4705, 1737, 2019, 6130]) == 7\nassert solution.removeDuplicates([-1414, -1178, 2458, 9336]) == 4\nassert solution.removeDuplicates([-7003, -5527, 2318, 8259]) == 4\nassert solution.removeDuplicates([-7757]) == 1\nassert solution.removeDuplicates([-3953, -2942, -2194, 4925, 5694, 7538, 7731]) == 7\nassert solution.removeDuplicates([-2990, 359, 1103, 8624]) == 4\nassert solution.removeDuplicates([-8712, -8067, -6467, -203, 5069, 6394, 6797]) == 7\nassert solution.removeDuplicates([-7928, -4683, 626, 960, 2344, 3910]) == 6\nassert solution.removeDuplicates([-9971, -7452, -3831, 4062, 6067, 6154, 8075]) == 7\nassert solution.removeDuplicates([-6283, -5990, -2922, -2230, -1716, -984, -820, -99, 1269, 7200]) == 10\nassert solution.removeDuplicates([-7686, -6428, -4810, -2970, -1755]) == 5\nassert solution.removeDuplicates([-9913, -6047, -5960, -5807, -4127, -3319, 331, 1358, 5969, 8180]) == 10\nassert solution.removeDuplicates([-6836, -6412, -5454, -1713, 1564, 3247, 5145]) == 7\nassert solution.removeDuplicates([-9790, -8549, 4142, 9597]) == 4\nassert solution.removeDuplicates([-9665, -6671, -4677, -4326, -2356, 3941]) == 6\nassert solution.removeDuplicates([-8432, -7948, -5272, -5030, -4506, -2122, 2529, 4744, 5907, 6088, 7268]) == 11\nassert solution.removeDuplicates([-5154, -3438, -1708, -1621, 1000, 3519, 4278, 4384, 5192]) == 9\nassert solution.removeDuplicates([-6972, -5181, -3743, -2594, -2549, -2387, 7247, 8347, 8975]) == 9\nassert solution.removeDuplicates([-7280, -4996, -4182, 2912, 2927, 4094]) == 6\nassert solution.removeDuplicates([7635]) == 1\nassert solution.removeDuplicates([-6953, -1989, 34, 226, 668, 4307, 6025, 6461, 6634, 7775]) == 10\nassert solution.removeDuplicates([-9788, -6374, 959, 3563, 9455]) == 5\nassert solution.removeDuplicates([-3167, -2991, -2398, -1943, 1371, 9233]) == 6\nassert solution.removeDuplicates([111, 1498, 7917]) == 3\nassert solution.removeDuplicates([-8990, -8230, -2433, -414, 208, 1228, 5108, 5834]) == 8\nassert solution.removeDuplicates([-8354, -7948, -3223, -2935, 1932, 6155]) == 6\nassert solution.removeDuplicates([-7462, -7074, 2125, 5405, 6812, 7217]) == 6\nassert solution.removeDuplicates([-9708, -9697, -9538, -2291, -2272, 465, 8283, 8423, 9553]) == 9\nassert solution.removeDuplicates([-8104, -3746]) == 2\nassert solution.removeDuplicates([-8855, -6567, -4667, -3111, -3051, 122, 3180, 4674, 8436, 9552]) == 10\nassert solution.removeDuplicates([-7863, -6195, -5389, -2350, 5187]) == 5\nassert solution.removeDuplicates([-2784, 7093, 9037, 9482]) == 4\nassert solution.removeDuplicates([-8174, -5171, -1949, 1401, 3305, 6061]) == 6\nassert solution.removeDuplicates([-6407, -5449, -4459, 309]) == 4\nassert solution.removeDuplicates([-453, 6923]) == 2\nassert solution.removeDuplicates([-9912, -9211, -8249, -6752, -4245, 742, 3453, 6483, 9660]) == 9\nassert solution.removeDuplicates([-5816, -3635, 3821, 5129]) == 4\nassert solution.removeDuplicates([-6389, -2367, 573, 2987]) == 4\nassert solution.removeDuplicates([-6938, -6229, -4421, -2459, 36, 569, 6323, 7214, 7830]) == 9\nassert solution.removeDuplicates([-9668, -7473, -4678, -3698, -480, 4398, 6417, 6624]) == 8\nassert solution.removeDuplicates([3979]) == 1\nassert solution.removeDuplicates([-5285, -3147, 314, 703, 815, 8845, 9944]) == 7\nassert solution.removeDuplicates([-8810, -6514, 752, 1023, 3314, 4781, 8733]) == 7\nassert solution.removeDuplicates([-9297, -8801, -5912, -5320, 2725, 2786, 2925, 4808, 5038, 9685]) == 10\nassert solution.removeDuplicates([-9479, 1577, 2113, 2275, 3507]) == 5\nassert solution.removeDuplicates([-3796, -238]) == 2\nassert solution.removeDuplicates([-7999, -7966, -7296, -7043, 488, 2736, 4681, 9044, 9446, 9672]) == 10\nassert solution.removeDuplicates([-8120, -5049, 4994, 6887, 9772]) == 5\nassert solution.removeDuplicates([-8471, -8057, -5705, 363, 809, 5315, 7061]) == 7\nassert solution.removeDuplicates([-6630, -5950, 1424, 4329, 4751, 7615, 8465]) == 7\nassert solution.removeDuplicates([-275, 1327, 5106, 7537, 7716]) == 5\nassert solution.removeDuplicates([-9329, -5529, -3967, -3162, -253, 728, 4536, 9095, 9379]) == 9\nassert solution.removeDuplicates([-2026, 1829, 1940, 2380, 5621, 5953, 7625]) == 7\nassert solution.removeDuplicates([-1254, 4778]) == 2\nassert solution.removeDuplicates([-9620, -8704, -5444, 1326, 3407, 3558]) == 6\nassert solution.removeDuplicates([4112]) == 1\nassert solution.removeDuplicates([6211, 9472]) == 2\nassert solution.removeDuplicates([-6940]) == 1\nassert solution.removeDuplicates([-6062, -3326, -2580, -1932, -366, -269, 2605, 3304, 4345, 5481, 8828]) == 11\nassert solution.removeDuplicates([-7930, -5468, 8064, 9153]) == 4\nassert solution.removeDuplicates([-8966, -3428, 1400, 4133, 5030, 9248]) == 6\nassert solution.removeDuplicates([-8976, -7122, -4855, -2877, -194, 2519, 3657, 9837]) == 8\nassert solution.removeDuplicates([-1893]) == 1\nassert solution.removeDuplicates([-6255, -3518, 7654]) == 3\nassert solution.removeDuplicates([-3521, -64, 604, 627, 2807, 2901, 3873, 5922, 6279, 8252]) == 10\nassert solution.removeDuplicates([-8818, -7386, -6833, -5670, -1317, 293, 4288, 8404]) == 8\nassert solution.removeDuplicates([-9000, -6163, -6077, -3055]) == 4\nassert solution.removeDuplicates([-6056, -5036, -3867, -973, -919, -251, 5273, 5452, 7740]) == 9\nassert solution.removeDuplicates([-6427, -2404, 341, 2326, 2877, 3605, 8693, 9075]) == 8\nassert solution.removeDuplicates([-4747, -3998, 711, 3481, 8893]) == 5\nassert solution.removeDuplicates([-7109, -2921, 295, 1571, 3205, 3537, 4512, 8705]) == 8\nassert solution.removeDuplicates([-7832, -7823, -896, 2986]) == 4\nassert solution.removeDuplicates([-8472, 3921, 6946, 9743]) == 4\nassert solution.removeDuplicates([5916]) == 1\nassert solution.removeDuplicates([-8620, -7574, -5049, -4784, -3981, -2633, -1102, -1057, 1630, 5796, 8666]) == 11\nassert solution.removeDuplicates([-5599, -2602, -1639, 990]) == 4\nassert solution.removeDuplicates([-8273, -4966, -273, 4731]) == 4\nassert solution.removeDuplicates([5790, 8725]) == 2\nassert solution.removeDuplicates([-6720, -2823, -2735, -1217, 8463]) == 5\nassert solution.removeDuplicates([-7686, -3098, -1808, -1572, -713, 516, 2636, 3512, 4152, 9099]) == 10\nassert solution.removeDuplicates([-2950, 2261, 2281, 2624, 5450]) == 5\nassert solution.removeDuplicates([-5308, -5193, 2454, 3142, 4895, 6479]) == 6\nassert solution.removeDuplicates([-3289, -3140, 734]) == 3\nassert solution.removeDuplicates([-8682, -8620, -6963, -5899, -4645, 2053, 3346, 4928]) == 8\nassert solution.removeDuplicates([-9939, -7421, -5903, -5562, -5512, 146, 1776, 5657, 7392, 8867, 9434]) == 11\nassert solution.removeDuplicates([-8500, -2883, -108, -70, 2881, 5207, 5938, 6809, 7243, 8496, 9571]) == 11\nassert solution.removeDuplicates([-7243, -3027, -2307, -1670, 2334, 4733, 9494, 9507]) == 8\nassert solution.removeDuplicates([5503, 5880]) == 2",
  "inefficient_solution": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        k = 0\n        for x in nums:\n            if k < 2 or x != nums[k - 2]:\n                temp = [0] * (k + 1)\n                temp[0:2] = nums[0:k]\n                temp[k] = x\n                nums[0:k+1] = temp\n                k += 1\n        return k",
  "is_python": true
}