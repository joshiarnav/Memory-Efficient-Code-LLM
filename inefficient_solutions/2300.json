{
  "problem_idx": 2300,
  "task_name": "Successful Pairs of Spells and Potions",
  "markdown_description": "\nYou are given two positive integer arrays `spells` and `potions`, of length `n` and `m` respectively, where `spells[i]` represents the strength of the `ith` spell and `potions[j]` represents the strength of the `jth` potion.\n\n\nYou are also given an integer `success`. A spell and potion pair is considered **successful** if the **product** of their strengths is **at least** `success`.\n\n\nReturn *an integer array* `pairs` *of length* `n` *where* `pairs[i]` *is the number of **potions** that will form a successful pair with the* `ith` *spell.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** spells = [5,1,3], potions = [1,2,3,4,5], success = 7\n**Output:** [4,0,3]\n**Explanation:**\n- 0th spell: 5 * [1,2,3,4,5] = [5,**10**,**15**,**20**,**25**]. 4 pairs are successful.\n- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.\n- 2nd spell: 3 * [1,2,3,4,5] = [3,6,**9**,**12**,**15**]. 3 pairs are successful.\nThus, [4,0,3] is returned.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** spells = [3,1,2], potions = [8,5,8], success = 16\n**Output:** [2,0,2]\n**Explanation:**\n- 0th spell: 3 * [8,5,8] = [**24**,15,**24**]. 2 pairs are successful.\n- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. \n- 2nd spell: 2 * [8,5,8] = [**16**,10,**16**]. 2 pairs are successful. \nThus, [2,0,2] is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == spells.length`\n* `m == potions.length`\n* `1 <= n, m <= 105`\n* `1 <= spells[i], potions[i] <= 105`\n* `1 <= success <= 1010`\n\n\n",
  "canonical_solution": "class Solution:\n    def successfulPairs(\n        self, spells: List[int], potions: List[int], success: int\n    ) -> List[int]:\n        potions.sort()\n        m = len(potions)\n        return [m - bisect_left(potions, success / v) for v in spells]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def successfulPairs(\n        self, spells: List[int], potions: List[int], success: int\n    ) -> List[int]:\n        potions.sort()\n        m = len(potions)\n        return [m - bisect_left(potions, success / v) for v in spells]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random lists\n    spells = random.sample(range(1, 101), random.randint(2, 10))\n    potions = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random success value\n    success = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.successfulPairs(spells, potions, success)\n\n    return spells, potions, success, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        spells, potions, success, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.successfulPairs(spells, potions, success) == expected_result\n        print(f\"assert solution.successfulPairs({spells}, {potions}, {success}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.successfulPairs({spells}, {potions}, {success}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.successfulPairs([45, 54], [7, 8, 22, 35, 45, 47, 74], 31) == [7, 7]\nassert solution.successfulPairs([2, 19, 77, 89, 1, 74, 51, 99, 52, 91], [15, 18, 22, 23, 32, 34, 39, 47, 78, 79], 31) == [9, 10, 10, 10, 6, 10, 10, 10, 10, 10]\nassert solution.successfulPairs([61, 67, 56, 97], [61, 62, 89, 96, 97], 73) == [5, 5, 5, 5]\nassert solution.successfulPairs([97, 78, 1], [24, 33, 36, 58], 59) == [4, 4, 0]\nassert solution.successfulPairs([54, 22, 88, 8, 50, 98, 48, 42, 39], [15, 86], 97) == [2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([69, 8, 19, 35, 39], [8, 66, 69, 78], 74) == [4, 3, 4, 4, 4]\nassert solution.successfulPairs([35, 71, 89, 60, 30, 68], [24, 26, 33, 36, 51, 53, 57, 68, 88], 72) == [9, 9, 9, 9, 9, 9]\nassert solution.successfulPairs([9, 28, 34, 52, 55, 41], [50, 89], 19) == [2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([61, 41, 69], [32, 52, 78, 97], 48) == [4, 4, 4]\nassert solution.successfulPairs([61, 11, 72, 75, 90], [78, 83], 61) == [2, 2, 2, 2, 2]\nassert solution.successfulPairs([94, 73, 79, 47, 44, 75, 38, 72], [2, 68], 20) == [2, 2, 2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([47, 53, 1, 79, 38], [12, 35, 46, 54, 84, 88, 94], 101) == [7, 7, 0, 7, 7]\nassert solution.successfulPairs([85, 50, 66, 61], [3, 11, 29, 45, 63, 66, 70, 78, 85, 91], 4) == [10, 10, 10, 10]\nassert solution.successfulPairs([11, 70, 37, 92, 60, 53, 1, 68], [74, 82, 90, 96], 90) == [4, 4, 4, 4, 4, 4, 2, 4]\nassert solution.successfulPairs([8, 63, 38, 4, 49, 52], [35, 96], 70) == [2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([20, 45, 4, 26, 65, 37, 88], [1, 15, 24, 37, 50, 59, 87, 89], 34) == [7, 8, 7, 7, 8, 8, 8]\nassert solution.successfulPairs([54, 61, 76, 77, 65, 2, 87, 32], [22, 32, 67, 70, 87, 98], 96) == [6, 6, 6, 6, 6, 4, 6, 6]\nassert solution.successfulPairs([54, 100, 52, 87, 33], [4, 33], 22) == [2, 2, 2, 2, 2]\nassert solution.successfulPairs([49, 19, 69, 70, 56, 97, 79, 83, 20, 74], [9, 15, 17, 40], 9) == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert solution.successfulPairs([19, 21, 64, 70, 47, 2, 7, 58], [34, 37, 46, 55, 73, 75, 97], 63) == [7, 7, 7, 7, 7, 7, 7, 7]\nassert solution.successfulPairs([55, 79, 58, 65, 21], [22, 79, 89, 96], 67) == [4, 4, 4, 4, 4]\nassert solution.successfulPairs([9, 27, 79, 23], [4, 27, 33, 57, 64], 45) == [4, 5, 5, 5]\nassert solution.successfulPairs([21, 76, 54], [8, 21, 28, 42, 77, 90], 53) == [6, 6, 6]\nassert solution.successfulPairs([74, 14, 52, 84, 99, 7], [38, 49], 62) == [2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([83, 35, 58, 42], [42, 84, 98], 51) == [3, 3, 3, 3]\nassert solution.successfulPairs([77, 56, 40, 32, 96, 11], [16, 22, 29, 34, 36, 39, 45, 74, 89, 94], 33) == [10, 10, 10, 10, 10, 10]\nassert solution.successfulPairs([23, 15, 33, 92, 35, 96, 100, 66, 29, 26], [30, 84], 60) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([26, 93, 50, 44, 63, 13, 66, 41, 90, 55], [9, 12, 17, 46, 65, 70, 95], 19) == [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]\nassert solution.successfulPairs([89, 88, 18, 73, 64, 61, 90], [7, 21, 29, 34, 42, 76, 78, 84, 93], 93) == [9, 9, 9, 9, 9, 9, 9]\nassert solution.successfulPairs([54, 79, 5, 46, 9, 61], [10, 17, 32, 44, 56, 67, 81, 85], 92) == [8, 8, 6, 8, 7, 8]\nassert solution.successfulPairs([36, 50, 95, 74], [2, 6, 10, 30, 68, 75, 96], 18) == [7, 7, 7, 7]\nassert solution.successfulPairs([33, 55, 98, 45], [4, 23, 56, 68, 86], 8) == [5, 5, 5, 5]\nassert solution.successfulPairs([32, 20, 1, 38, 93, 76, 79, 81], [2, 6, 13, 18, 23, 71, 72, 95, 100], 100) == [8, 8, 1, 8, 9, 9, 9, 9]\nassert solution.successfulPairs([63, 32, 10, 79, 82, 58, 71, 14], [37, 51, 64, 67], 100) == [4, 4, 4, 4, 4, 4, 4, 4]\nassert solution.successfulPairs([81, 64], [22, 29, 30, 48, 73, 79], 49) == [6, 6]\nassert solution.successfulPairs([60, 62, 47, 64, 94, 23, 66], [49, 59], 87) == [2, 2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([68, 59, 50, 76, 91, 13, 89], [11, 15, 17, 28, 34, 38, 87, 95, 99], 41) == [9, 9, 9, 9, 9, 9, 9]\nassert solution.successfulPairs([77, 18], [29, 53, 54, 61, 87, 94], 7) == [6, 6]\nassert solution.successfulPairs([52, 36, 53, 61, 3, 15, 37], [4, 75, 83], 76) == [3, 3, 3, 3, 2, 2, 3]\nassert solution.successfulPairs([87, 94], [24, 33, 46, 67, 85, 98], 23) == [6, 6]\nassert solution.successfulPairs([22, 73, 91, 21, 52, 29, 67, 11, 26], [20, 42, 52, 57, 61, 69, 83, 84, 86, 87], 69) == [10, 10, 10, 10, 10, 10, 10, 10, 10]\nassert solution.successfulPairs([27, 49, 8, 28, 22, 5, 72, 52], [11, 31, 36, 60, 63], 33) == [5, 5, 5, 5, 5, 5, 5, 5]\nassert solution.successfulPairs([68, 8, 76, 12, 79, 85, 26], [24, 68], 18) == [2, 2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([32, 7], [26, 53, 79], 96) == [3, 3]\nassert solution.successfulPairs([89, 46, 26, 8], [12, 24, 26, 29, 46, 64, 72, 82, 95, 96], 51) == [10, 10, 10, 10]\nassert solution.successfulPairs([85, 54, 31, 26, 67], [17, 19, 22, 36, 39, 43, 50, 82, 84, 85], 78) == [10, 10, 10, 10, 10]\nassert solution.successfulPairs([46, 37, 63, 31, 41, 11], [70, 71, 72, 73, 79, 84, 99], 100) == [7, 7, 7, 7, 7, 7]\nassert solution.successfulPairs([53, 11], [17, 25, 57, 64, 79, 80, 95, 99], 21) == [8, 8]\nassert solution.successfulPairs([76, 57, 23, 68, 60, 56, 43, 5, 81], [35, 53, 60, 74, 99], 40) == [5, 5, 5, 5, 5, 5, 5, 5, 5]\nassert solution.successfulPairs([77, 21, 49, 16, 82, 70], [22, 28, 40, 61, 67], 32) == [5, 5, 5, 5, 5, 5]\nassert solution.successfulPairs([74, 54, 99, 34, 28, 51, 22, 70, 11, 37], [8, 34, 50, 76], 86) == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert solution.successfulPairs([50, 8, 13, 63, 40, 49, 77], [1, 17, 31, 41, 97, 98], 70) == [5, 5, 5, 5, 5, 5, 6]\nassert solution.successfulPairs([20, 58, 77], [11, 22, 50, 73, 85], 97) == [5, 5, 5]\nassert solution.successfulPairs([55, 19, 100, 40, 59, 13, 17], [22, 23, 51, 55, 61, 66, 76], 52) == [7, 7, 7, 7, 7, 7, 7]\nassert solution.successfulPairs([8, 88, 67, 70, 26, 93, 90, 49, 42, 43], [2, 3, 13, 51, 62, 72, 78, 93, 99], 49) == [7, 9, 9, 9, 9, 9, 9, 9, 9, 9]\nassert solution.successfulPairs([89, 94, 36, 51, 86, 35, 61], [2, 14, 30, 71, 79], 68) == [5, 5, 5, 5, 5, 5, 5]\nassert solution.successfulPairs([13, 88, 79, 75, 8, 52], [1, 17, 26, 29, 62], 100) == [4, 4, 4, 4, 4, 4]\nassert solution.successfulPairs([48, 1, 73, 24], [35, 36, 86, 91], 33) == [4, 4, 4, 4]\nassert solution.successfulPairs([91, 43, 42], [7, 14, 66, 94], 13) == [4, 4, 4]\nassert solution.successfulPairs([37, 91], [54, 62, 69, 83, 85, 92], 43) == [6, 6]\nassert solution.successfulPairs([93, 1, 37, 8, 83, 26, 62], [2, 4, 10, 29, 38, 91, 92, 94, 98], 29) == [9, 6, 9, 8, 9, 9, 9]\nassert solution.successfulPairs([62, 11], [22, 23, 30, 52, 55, 62, 68, 75, 76, 81], 83) == [10, 10]\nassert solution.successfulPairs([71, 29, 77, 52], [23, 27, 38, 95], 79) == [4, 4, 4, 4]\nassert solution.successfulPairs([16, 92, 95, 27, 72, 22], [6, 23, 42, 49, 59, 63, 68, 74, 83, 100], 96) == [10, 10, 10, 10, 10, 10]\nassert solution.successfulPairs([97, 69, 21, 56, 75, 5, 68, 45, 2], [23, 50, 55, 75, 80, 87], 5) == [6, 6, 6, 6, 6, 6, 6, 6, 6]\nassert solution.successfulPairs([49, 100, 97, 46, 99], [23, 44, 68, 77], 86) == [4, 4, 4, 4, 4]\nassert solution.successfulPairs([78, 41, 58, 39], [10, 11, 12, 24, 31, 41, 44, 73, 78, 84], 48) == [10, 10, 10, 10]\nassert solution.successfulPairs([68, 36, 41, 53, 91], [3, 6, 8, 11, 36, 53, 82, 85, 91], 61) == [9, 9, 9, 9, 9]\nassert solution.successfulPairs([95, 22, 91, 74, 17, 76], [11, 12, 43, 45, 53, 79, 82], 57) == [7, 7, 7, 7, 7, 7]\nassert solution.successfulPairs([32, 92, 83, 73, 63, 41, 53], [14, 25, 41, 68, 70], 59) == [5, 5, 5, 5, 5, 5, 5]\nassert solution.successfulPairs([40, 9, 42, 3], [9, 26, 32, 77, 93, 94], 48) == [6, 6, 6, 5]\nassert solution.successfulPairs([70, 29, 14, 37, 56, 24], [6, 64, 83, 85, 86, 96], 64) == [6, 6, 6, 6, 6, 6]\nassert solution.successfulPairs([98, 88, 49, 100], [24, 48, 58, 67, 87, 88, 98], 17) == [7, 7, 7, 7]\nassert solution.successfulPairs([89, 44, 31, 18, 97, 27, 19, 35, 75], [14, 18, 32, 54, 72, 91, 98, 100], 2) == [8, 8, 8, 8, 8, 8, 8, 8, 8]\nassert solution.successfulPairs([81, 60], [20, 29, 87], 79) == [3, 3]\nassert solution.successfulPairs([35, 51, 72, 8, 56, 20], [2, 9, 24, 30, 46, 66, 74, 100], 46) == [8, 8, 8, 7, 8, 7]\nassert solution.successfulPairs([21, 82, 35, 72, 24], [2, 41, 71, 81, 82, 97], 11) == [6, 6, 6, 6, 6]\nassert solution.successfulPairs([18, 72, 35, 85, 78, 28, 21], [89, 99], 29) == [2, 2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([31, 36, 87, 62, 17, 78, 39, 77, 100], [3, 7, 24, 80, 100], 10) == [5, 5, 5, 5, 5, 5, 5, 5, 5]\nassert solution.successfulPairs([68, 78, 10, 95, 9, 16], [2, 17, 26, 42, 43, 48, 55, 57, 73, 95], 51) == [10, 10, 9, 10, 9, 9]\nassert solution.successfulPairs([34, 40], [12, 17, 51, 58, 62, 73], 13) == [6, 6]\nassert solution.successfulPairs([5, 97, 16, 99, 74, 17, 43, 64, 73], [12, 16], 81) == [0, 2, 2, 2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([39, 26, 85, 19, 90, 18, 56, 99, 15, 32], [16, 31, 63, 68, 87, 90], 26) == [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\nassert solution.successfulPairs([3, 22], [16, 17, 24, 49, 78, 81, 88], 89) == [4, 7]\nassert solution.successfulPairs([5, 3, 8, 55, 66, 38, 74, 63], [1, 8, 10, 30, 32, 36, 59, 79, 88, 95], 68) == [7, 7, 8, 9, 9, 9, 10, 9]\nassert solution.successfulPairs([72, 38, 81, 45, 5, 47], [48, 62], 76) == [2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([28, 70, 26, 10, 69], [2, 32, 36, 39, 43, 44, 63, 83, 95, 97], 41) == [10, 10, 10, 9, 10]\nassert solution.successfulPairs([19, 86, 47, 63, 23, 93, 36], [3, 16, 45, 47, 53, 56, 74, 86, 94], 56) == [9, 9, 9, 9, 9, 9, 9]\nassert solution.successfulPairs([48, 16, 57, 32, 21, 44, 40], [3, 4, 13, 16, 30, 44, 69, 91], 49) == [8, 7, 8, 8, 8, 8, 8]\nassert solution.successfulPairs([23, 49], [31, 55, 60, 64, 65, 79, 88, 95], 94) == [8, 8]\nassert solution.successfulPairs([99, 64, 23, 78, 74], [71, 76, 80, 89, 93], 12) == [5, 5, 5, 5, 5]\nassert solution.successfulPairs([2, 97, 48, 12, 49, 85, 54, 99, 57, 66], [4, 16, 17, 20, 36, 42, 60, 74, 82, 84], 69) == [6, 10, 10, 9, 10, 10, 10, 10, 10, 10]\nassert solution.successfulPairs([45, 94, 55, 51, 73, 74, 26, 49], [7, 33, 40, 51, 53, 73, 77], 67) == [7, 7, 7, 7, 7, 7, 7, 7]\nassert solution.successfulPairs([14, 22, 62, 63, 57, 40], [6, 19, 92, 97], 29) == [4, 4, 4, 4, 4, 4]\nassert solution.successfulPairs([28, 54], [10, 15, 17, 37, 65, 72], 95) == [6, 6]\nassert solution.successfulPairs([5, 90, 84, 67, 68, 34, 28, 74, 26], [5, 13, 28, 29, 50, 68, 78, 80, 93], 7) == [9, 9, 9, 9, 9, 9, 9, 9, 9]\nassert solution.successfulPairs([29, 100, 60, 52, 67, 36, 46], [7, 29, 30, 40, 49, 55, 58, 79, 100], 17) == [9, 9, 9, 9, 9, 9, 9]\nassert solution.successfulPairs([80, 19, 74, 16, 59, 7, 81, 60, 12, 45], [19, 68], 86) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert solution.successfulPairs([25, 7], [69, 77, 94], 101) == [3, 3]\nassert solution.successfulPairs([78, 18, 83, 47, 52], [26, 32, 35, 36, 60, 96], 49) == [6, 6, 6, 6, 6]",
  "inefficient_solution": "class Solution:\n    def successfulPairs(self, spells, potions, success):\n        potions.sort()\n        res = []\n        for spell in spells:\n            count = 0\n            for potion in potions:\n                product = spell * potion\n                if product >= success:\n                    count += 1\n            res.append(count)\n        return res",
  "is_python": true
}