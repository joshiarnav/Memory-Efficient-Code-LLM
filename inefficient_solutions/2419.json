{
  "problem_idx": 2419,
  "task_name": "Longest Subarray With Maximum Bitwise AND",
  "markdown_description": "\nYou are given an integer array `nums` of size `n`.\n\n\nConsider a **non-empty** subarray from `nums` that has the **maximum** possible **bitwise AND**.\n\n\n* In other words, let `k` be the maximum value of the bitwise AND of **any** subarray of `nums`. Then, only subarrays with a bitwise AND equal to `k` should be considered.\n\n\nReturn *the length of the **longest** such subarray*.\n\n\nThe bitwise AND of an array is the bitwise AND of all the numbers in it.\n\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,3,2,2]\n**Output:** 2\n**Explanation:**\nThe maximum possible bitwise AND of a subarray is 3.\nThe longest subarray with that value is [3,3], so we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 1\n**Explanation:**\nThe maximum possible bitwise AND of a subarray is 4.\nThe longest subarray with that value is [4], so we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        mx = max(nums)\n        ans = cnt = 0\n        for v in nums:\n            if v == mx:\n                cnt += 1\n                ans = max(ans, cnt)\n            else:\n                cnt = 0\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        mx = max(nums)\n        ans = cnt = 0\n        for v in nums:\n            if v == mx:\n                cnt += 1\n                ans = max(ans, cnt)\n            else:\n                cnt = 0\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 10), random.randint(2, 5))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestSubarray(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestSubarray(nums) == expected_result\n        print(f\"assert solution.longestSubarray({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestSubarray({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestSubarray([4, 3, 8]) == 1\nassert solution.longestSubarray([7, 4, 9]) == 1\nassert solution.longestSubarray([2, 9, 1]) == 1\nassert solution.longestSubarray([6, 3, 5, 4]) == 1\nassert solution.longestSubarray([8, 2, 5, 4, 7]) == 1\nassert solution.longestSubarray([8, 1, 9, 5]) == 1\nassert solution.longestSubarray([9, 1, 6, 3]) == 1\nassert solution.longestSubarray([4, 5, 7, 3, 2]) == 1\nassert solution.longestSubarray([8, 3]) == 1\nassert solution.longestSubarray([5, 2, 6]) == 1\nassert solution.longestSubarray([4, 9, 6, 5]) == 1\nassert solution.longestSubarray([1, 5]) == 1\nassert solution.longestSubarray([3, 4, 2]) == 1\nassert solution.longestSubarray([3, 4]) == 1\nassert solution.longestSubarray([6, 8, 4, 7]) == 1\nassert solution.longestSubarray([5, 9, 6, 3, 8]) == 1\nassert solution.longestSubarray([2, 5]) == 1\nassert solution.longestSubarray([7, 2]) == 1\nassert solution.longestSubarray([2, 1, 5, 9]) == 1\nassert solution.longestSubarray([9, 3, 4]) == 1\nassert solution.longestSubarray([9, 3, 1, 7]) == 1\nassert solution.longestSubarray([1, 4, 8, 9, 6]) == 1\nassert solution.longestSubarray([2, 8, 9, 1]) == 1\nassert solution.longestSubarray([1, 6]) == 1\nassert solution.longestSubarray([8, 2, 9]) == 1\nassert solution.longestSubarray([8, 2, 6, 4]) == 1\nassert solution.longestSubarray([7, 6, 1, 5, 8]) == 1\nassert solution.longestSubarray([6, 1, 7]) == 1\nassert solution.longestSubarray([3, 6, 4, 5, 1]) == 1\nassert solution.longestSubarray([9, 8, 6]) == 1\nassert solution.longestSubarray([4, 3, 8, 6, 7]) == 1\nassert solution.longestSubarray([1, 7, 8]) == 1\nassert solution.longestSubarray([6, 4, 9, 8]) == 1\nassert solution.longestSubarray([3, 6, 1, 7, 9]) == 1\nassert solution.longestSubarray([4, 8, 7, 5]) == 1\nassert solution.longestSubarray([1, 4]) == 1\nassert solution.longestSubarray([1, 5, 4]) == 1\nassert solution.longestSubarray([5, 7]) == 1\nassert solution.longestSubarray([3, 9, 4, 8]) == 1\nassert solution.longestSubarray([7, 8, 1]) == 1\nassert solution.longestSubarray([6, 9]) == 1\nassert solution.longestSubarray([8, 3, 7, 9]) == 1\nassert solution.longestSubarray([1, 7]) == 1\nassert solution.longestSubarray([6, 5, 8, 4]) == 1\nassert solution.longestSubarray([2, 5, 1, 4, 6]) == 1\nassert solution.longestSubarray([8, 3]) == 1\nassert solution.longestSubarray([7, 2]) == 1\nassert solution.longestSubarray([1, 8, 2, 4, 6]) == 1\nassert solution.longestSubarray([1, 9, 6, 5]) == 1\nassert solution.longestSubarray([8, 2, 3, 5, 9]) == 1\nassert solution.longestSubarray([7, 3, 4, 9]) == 1\nassert solution.longestSubarray([4, 6, 5, 7, 2]) == 1\nassert solution.longestSubarray([5, 2, 7, 8]) == 1\nassert solution.longestSubarray([4, 2]) == 1\nassert solution.longestSubarray([7, 5]) == 1\nassert solution.longestSubarray([4, 1, 6]) == 1\nassert solution.longestSubarray([9, 8, 7, 2]) == 1\nassert solution.longestSubarray([1, 4, 3, 8, 6]) == 1\nassert solution.longestSubarray([8, 9, 5, 6]) == 1\nassert solution.longestSubarray([8, 9, 4]) == 1\nassert solution.longestSubarray([1, 6, 8, 9, 7]) == 1\nassert solution.longestSubarray([4, 9, 5]) == 1\nassert solution.longestSubarray([4, 6]) == 1\nassert solution.longestSubarray([2, 3, 7, 6, 1]) == 1\nassert solution.longestSubarray([2, 1, 4]) == 1\nassert solution.longestSubarray([9, 4, 8, 2]) == 1\nassert solution.longestSubarray([7, 3]) == 1\nassert solution.longestSubarray([7, 6, 1, 3, 4]) == 1\nassert solution.longestSubarray([2, 6, 4, 5]) == 1\nassert solution.longestSubarray([7, 4, 8, 9, 3]) == 1\nassert solution.longestSubarray([7, 5]) == 1\nassert solution.longestSubarray([8, 7, 3, 4, 1]) == 1\nassert solution.longestSubarray([3, 2]) == 1\nassert solution.longestSubarray([9, 7, 8]) == 1\nassert solution.longestSubarray([4, 9, 7, 2]) == 1\nassert solution.longestSubarray([2, 9]) == 1\nassert solution.longestSubarray([6, 8]) == 1\nassert solution.longestSubarray([5, 8, 2]) == 1\nassert solution.longestSubarray([7, 8, 6, 1, 4]) == 1\nassert solution.longestSubarray([7, 8, 6]) == 1\nassert solution.longestSubarray([5, 9, 6]) == 1\nassert solution.longestSubarray([4, 2, 3, 7]) == 1\nassert solution.longestSubarray([3, 4]) == 1\nassert solution.longestSubarray([1, 5]) == 1\nassert solution.longestSubarray([1, 9, 8, 5]) == 1\nassert solution.longestSubarray([9, 4, 8]) == 1\nassert solution.longestSubarray([4, 3, 6, 8]) == 1\nassert solution.longestSubarray([3, 6, 7]) == 1\nassert solution.longestSubarray([2, 4, 6, 3, 1]) == 1\nassert solution.longestSubarray([3, 1, 2, 5, 7]) == 1\nassert solution.longestSubarray([6, 5, 4]) == 1\nassert solution.longestSubarray([2, 5]) == 1\nassert solution.longestSubarray([7, 3, 5, 8]) == 1\nassert solution.longestSubarray([2, 4, 9, 5]) == 1\nassert solution.longestSubarray([7, 1, 2, 9, 6]) == 1\nassert solution.longestSubarray([1, 8]) == 1\nassert solution.longestSubarray([5, 6, 1, 7, 2]) == 1\nassert solution.longestSubarray([2, 9, 6]) == 1\nassert solution.longestSubarray([4, 7, 5, 9]) == 1\nassert solution.longestSubarray([2, 1, 6, 3, 5]) == 1",
  "inefficient_solution": "class Solution:\n    def longestSubarray(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_val = max(nums)\n        ans = 0\n        max_subarray = [[] for _ in range(max_val + 1)]\n        and_values = [[] for _ in range(n)]\n        for i, v in enumerate(nums):\n            and_values[i] = []\n            for j in range(31, -1, -1):\n                if v & (1 << j) != 0:\n                    and_values[i].append(j)\n            for mask in range(1 << 31):\n                if bin(mask).count('1') == 0:\n                    subarray = []\n                    for k in range(i, n):\n                        if mask & (1 << x) == 0:\n                            subarray.append(nums[k])\n                        else:\n                            break\n                        if nums[k] == max_val:\n                            max_subarray[max_val].append(subarray)\n        for subarray in max_subarray[max_val]:\n            ans = max(ans, len(subarray))\n        return ans",
  "is_python": true
}