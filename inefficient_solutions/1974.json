{
  "problem_idx": 1974,
  "task_name": "Minimum Time to Type Word Using Special Typewriter",
  "markdown_description": "\nThere is a special typewriter with lowercase English letters `'a'` to `'z'` arranged in a **circle** with a **pointer**. A character can **only** be typed if the pointer is pointing to that character. The pointer is **initially** pointing to the character `'a'`.\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1974.Minimum%20Time%20to%20Type%20Word%20Using%20Special%20Typewriter/images/chart.jpg)\nEach second, you may perform one of the following operations:\n\n\n* Move the pointer one character **counterclockwise** or **clockwise**.\n* Type the character the pointer is **currently** on.\n\n\nGiven a string `word`, return the **minimum** number of seconds to type out the characters in `word`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"abc\"\n**Output:** 5\n**Explanation:**The characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"bza\"\n**Output:** 7\n**Explanation:**The characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word = \"zjpc\"\n**Output:** 34\n**Explanation:**\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 100`\n* `word` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minTimeToType(self, word: str) -> int:\n        ans = prev = 0\n        for c in word:\n            curr = ord(c) - ord('a')\n            t = abs(prev - curr)\n            t = min(t, 26 - t)\n            ans += t + 1\n            prev = curr\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minTimeToType(self, word: str) -> int:\n        ans = prev = 0\n        for c in word:\n            curr = ord(c) - ord('a')\n            t = abs(prev - curr)\n            t = min(t, 26 - t)\n            ans += t + 1\n            prev = curr\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random word\n    word = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 100)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minTimeToType(word)\n\n    return word, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minTimeToType(word) == expected_result\n        \n        print(f'assert solution.minTimeToType(\"{word}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.minTimeToType(\"{word}\") == {expected_result}')\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minTimeToType(\"seyaytnwnwtmjepedelkj\") == 140\nassert solution.minTimeToType(\"vjkgwhvkczarkysqaxdjexiygriabtqcoupmgixvqwwljylmutdfqduensnbfborjnbjamibjicaobvetggmgfkhnwavmb\") == 751\nassert solution.minTimeToType(\"zugmpzljxiawkrzooeqqjqcorvewgixznuisgcfrxcihwichnnghkjiypzslfebrirgptnxndtjcjbfu\") == 654\nassert solution.minTimeToType(\"qmjyxtphpihvtqwguwserhjfedjeiblsaruopdtyevzlsnodrb\") == 375\nassert solution.minTimeToType(\"bgitcmxyqtpfsqvyflebsjckvvkbvhufgnphwdxxlhljmbtjg\") == 375\nassert solution.minTimeToType(\"agbbtanxjtxqczedxqjbbsznoeh\") == 200\nassert solution.minTimeToType(\"qindpxavozgshqhotuldnaejagw\") == 241\nassert solution.minTimeToType(\"hlakhwpxklnxllvfixcjmquyuryheq\") == 228\nassert solution.minTimeToType(\"sewtciaobwdedgfffikwlkkljlatilfwdyhqkgwgwuecwuiiohmamgkrptcgllsnxsmzwgpfcwupo\") == 537\nassert solution.minTimeToType(\"jjtllxqjzchpfznocswqdvxmhlzbwzelcaijoldpxuevrimn\") == 361\nassert solution.minTimeToType(\"yoowubxrgzakf\") == 86\nassert solution.minTimeToType(\"vqggxnjonjtxprttncaywboaamvsrrxgvgaldbul\") == 277\nassert solution.minTimeToType(\"brcaseeizusxmzhozippugxnrovkklkh\") == 233\nassert solution.minTimeToType(\"vwaywdzphrjzhegvczrsozjhy\") == 175\nassert solution.minTimeToType(\"crvjinydvhehlnndwhjgqbgjclafdweonewafoupactqwtbnqihhnecsnomnotlneqsr\") == 461\nassert solution.minTimeToType(\"nldrkovwxstsblhsxiqsftiqvstelqktqbdgxasncxwbktwclfypetsbjpraluibxojeielgiwmghnzankjwjkdyef\") == 679\nassert solution.minTimeToType(\"bcdjqgnyv\") == 56\nassert solution.minTimeToType(\"lmfrhlsgwwitdzpbneykygggdytyewtmfdzhitnkqpipdi\") == 360\nassert solution.minTimeToType(\"cgkxpydldmqhhvuonmtupmprxoczoshfdqqssfuojgjatxvpbuw\") == 341\nassert solution.minTimeToType(\"dkponsijfxgjejhudvtbnuuislaeqdxhzpoewmpqjzcftrd\") == 360\nassert solution.minTimeToType(\"gledyvmyvfaoabkbcljvaemlygil\") == 205\nassert solution.minTimeToType(\"htnlfzhfwofcsgwqytwuzaoenscbfzsjxemjruosxdcqvo\") == 346\nassert solution.minTimeToType(\"foshc\") == 39\nassert solution.minTimeToType(\"wrgpevcxopjtqutjfywhsspeejqnzsespiycsqnotnfhacbxgijzoelxfryglwacgvgyquwjcaguxnagnuixmrqfitusgpslxtu\") == 755\nassert solution.minTimeToType(\"zifcveyoutrhclkotbmmentyxinvnlf\") == 210\nassert solution.minTimeToType(\"gnkjiblxewoewrhxepvvvwgalbfaciyqlbxvodlcsycfmrwcebczqxqndio\") == 427\nassert solution.minTimeToType(\"fejhpoxbzclmpnzuoadmhtlqmwzgziobnysczoigc\") == 297\nassert solution.minTimeToType(\"obkbwnsgzdsrrbveicwntqxoxwluluxscndmsqhdlvblobcmdikpyfqqjoxdrpwhmvpmbboqgxqffhlebzoqyntf\") == 699\nassert solution.minTimeToType(\"zuxkvjhjfyocukwgxmkogfdbrymyqssleaspl\") == 282\nassert solution.minTimeToType(\"vlhagixgqgngsavnrgjqzjsrdvsgpmw\") == 263\nassert solution.minTimeToType(\"khxvoudnjasacdfxrsyocwgqpsedgxaqjudewgidgfqokpwauobhvfcyrdbdlhavrqrrfjnvcafgaufpuiqcs\") == 613\nassert solution.minTimeToType(\"oatfytgfmyncwfawpeovcjndagfbdffyooqyjmbqxkhlafvfmqbbwlxyfhwdbg\") == 488\nassert solution.minTimeToType(\"xlnjfedaeewymfugmzjenagoxgdmyijwvbvebhkuytligswwuelnjybpvveuv\") == 442\nassert solution.minTimeToType(\"tsdhlmodnc\") == 72\nassert solution.minTimeToType(\"zrqrqktistlignmvlxkloizuqkvvqrloefnokbrebjzxrdnyipaawbvbffpkrn\") == 433\nassert solution.minTimeToType(\"omunwmuetukuurnarcotezatqzxldiwgxdfbeeppnawdqqjgjbipgyiylfpwrvbtzmwfqcidfstdmbbsbdzlwuauxvioyvfnelyl\") == 821\nassert solution.minTimeToType(\"kbyvbyfrtnubulugitoyvoqxvfofyqiehxpjbrtfeibudrdtgcwybjnpgmhh\") == 459\nassert solution.minTimeToType(\"iurshhjsxlmwauuqizaibbfrvyykjlirlriijjijdiditcgynwkivcugafzznfbnpdlsrev\") == 498\nassert solution.minTimeToType(\"hrcgggomfbrvtyleknkdhjustynewjeookivnhpxcpmjsksvjjigosfzdbsztpbcpoxudubwpncesaxpijwdtjuncxrzdkw\") == 709\nassert solution.minTimeToType(\"hnrdxewuyfgeipduftnqlbdpfumnfdedavroksihokauqirypihseczgcfhwlczfpilyfxbtd\") == 538\nassert solution.minTimeToType(\"gewjbedrbiosmgxtaonrhrppqydcrqbshj\") == 245\nassert solution.minTimeToType(\"woocvuuaxpykjsxketihaygxijfanekomkelhyqikadrzyngivispxkvpgtnjprirecpompfcqi\") == 585\nassert solution.minTimeToType(\"jbmmhddzpfbycwirdtpjuzq\") == 179\nassert solution.minTimeToType(\"uilbhicnhagleeteddufdbdxrzyyifqcyytibdmijqafpcnkuztfceaqcrxfhgkjwpgrqdcsyxgsdyyjnf\") == 605\nassert solution.minTimeToType(\"nrmx\") == 37\nassert solution.minTimeToType(\"tsavbj\") == 41\nassert solution.minTimeToType(\"meuihsvaiacazoiprjdwptiexgxpducgfgmgwkuxnjqlcbwdzazmgs\") == 410\nassert solution.minTimeToType(\"frpbgzpjykxctdsstxszvvlohrpybodjkrnszkbmxrmzvxkkfxzjgpzjs\") == 457\nassert solution.minTimeToType(\"dkypjgivwbsotpfhrpwfcacavnxejmmvyjqdsbjraqpgiotebvycxttx\") == 387\nassert solution.minTimeToType(\"xtrnrlvqdxuakkycbdqcvwjnnogorcngbcgypmjgldwxvqqjd\") == 320\nassert solution.minTimeToType(\"zqurmfajiixdxvhoivctmkywh\") == 182\nassert solution.minTimeToType(\"ojnyebramnmrskedczhdonnvvbkdjimmlpgxthdryqdmrqfffoxbgzmqbgsutgxtnaa\") == 467\nassert solution.minTimeToType(\"pweylxnfdirrezpbursfdhsqqo\") == 202\nassert solution.minTimeToType(\"bpoyanssogwtvvnbhfitpfurezowlaygqfdmku\") == 292\nassert solution.minTimeToType(\"abuhzvskgzhdrswfmolepjcdldoygjihfmzodve\") == 287\nassert solution.minTimeToType(\"gipbchfmdrwbfgnbkn\") == 127\nassert solution.minTimeToType(\"opzbxfcthogquenzpvlgcacfmxgdvtqggkdcifomrqjumucjjeshvkointzihnytywpywppoetrvjbnzksydcy\") == 638\nassert solution.minTimeToType(\"nigfucdocchtnqnsuxmyapfzkthncdvczflqdtnhiqjsjfvmxgaygrsxbidqdavnrdganrpylfwlrbiewnzp\") == 685\nassert solution.minTimeToType(\"pywebpwvplyrszbzvknavbeoaibbtfncyqaplowycawjgdmcbscuweykuptyoudclviyvqrtmxfhjjwjodmklgxnz\") == 682\nassert solution.minTimeToType(\"exmvsmlxuofzreuqsaebxydtzycvvoisxbbzrhkmjsynokupept\") == 350\nassert solution.minTimeToType(\"jnxnmwlnkrvjsoxvtvvwgquoccuivvvhelxontppttixdgbehpjmsfymheexeeblaqhfptciv\") == 524\nassert solution.minTimeToType(\"ioofogbldzokmkbdmjqojsiovkjtwarohdlyymfunqbqfxwvpjiqobzmvpjukjksusqsprcmwspsjeb\") == 564\nassert solution.minTimeToType(\"pm\") == 16\nassert solution.minTimeToType(\"sxzpvccusrsy\") == 68\nassert solution.minTimeToType(\"cqwjlothtv\") == 79\nassert solution.minTimeToType(\"ybocutlmhrsgtryjdwoklvpszetzlnvyongtuwqaanszyylvzbuygaji\") == 404\nassert solution.minTimeToType(\"gipebhqvmdpspuhwfbkmehdjxzggzsnidpommvbhggbfxxoteazvxqdqbnyxhuinnpxncnyhgjuybisp\") == 591\nassert solution.minTimeToType(\"hypfhhtnvlvpgzrduvigdcknbofmygxgd\") == 280\nassert solution.minTimeToType(\"jc\") == 18\nassert solution.minTimeToType(\"hnupgisiqsvbyujcjvanikbociidcqenckeayun\") == 304\nassert solution.minTimeToType(\"xmnfyksknojczfkgpdcgmncsqkjgszcoj\") == 230\nassert solution.minTimeToType(\"tdmcf\") == 44\nassert solution.minTimeToType(\"sktlwazxqgxtwinzzjfvsfngvdfrkodnnktfcpu\") == 317\nassert solution.minTimeToType(\"cflxsanhozhtxasnzuvfce\") == 168\nassert solution.minTimeToType(\"zjpzgrrfprudjqxmsgwcucktptuiduabgssnldclktpdfslqddnrhjczrctyxjectfdrdgriotkfiybplvacp\") == 660\nassert solution.minTimeToType(\"kgoxxaoxqqgiiwdsxycmvuquebwuuptdrhiwmvdusxepkjdzuiomglroshghzrhejdctrydpkocihznebioaindil\") == 636\nassert solution.minTimeToType(\"kpspmdzyculezwfbgosxk\") == 143\nassert solution.minTimeToType(\"uwrrkpxfdplltkwzqbdhekotuxpbtgxoogxcysmzpflfzdyjmkcxqwojioioqxogdkos\") == 482\nassert solution.minTimeToType(\"gtbxiojkkdcdcevgesjslssvhbevocauoatuhyyprywleolvxqbyhniffazvvxmgnrplhsntxhnuifbcnafarfnthtfbweqxdkay\") == 732\nassert solution.minTimeToType(\"jtgmcaqjbkdclajjassvpuyjbdqcjsrjkbhgtjfrqzff\") == 343\nassert solution.minTimeToType(\"vmlxsarjepfpgccrjnusnhfabjbonlkslwddeydcxwfjjfnwrhpwrlndzfjdxmyssrjmepwrqzhxrqrxeayrolfjhbe\") == 607\nassert solution.minTimeToType(\"jyvnmdtralefxdpfythlxmpuccpeyyl\") == 258\nassert solution.minTimeToType(\"gjbvdnozsbevlbwkuoomztagqlafikrogoughrrziw\") == 330\nassert solution.minTimeToType(\"lpihvylrmyppmbsqmddsvovrfiprbrcrwefzsuzqaynonbigfb\") == 363\nassert solution.minTimeToType(\"mv\") == 23\nassert solution.minTimeToType(\"tvqbjbyyqprnputhla\") == 112\nassert solution.minTimeToType(\"lfwzsqikqbjoqdqxpjmwsxzjibbuctlepluanepyvwqqebxzfbnrkamaclkieycunttbrulknmtzhyotjdembaywwvftgglivdyb\") == 721\nassert solution.minTimeToType(\"godsmfhioqpsypsyxtsxvokjbjzhzxg\") == 197\nassert solution.minTimeToType(\"gdtrnhmidytspwzuxbhydowtioragyyzswyvycngklfwrjbzmpwqikftdlowlnlwdjqzueatjxgk\") == 528\nassert solution.minTimeToType(\"rijhlezatwneaibgadeqaoygttvypqrkweejunhpvdycfmpciso\") == 365\nassert solution.minTimeToType(\"qvzkkzkfmapaja\") == 130\nassert solution.minTimeToType(\"bsrgzopuxzzfrjkrfsdyjkqqznrcwjecirujhcspgjmeqpacasqojmracfjnmmhhfctfxhdcyztcssxz\") == 525\nassert solution.minTimeToType(\"zncvwcsktdhwqvjvtyqlesvwbnkinrrlsctdoioxoosppypefugxqylyoivthedcfplsrrcudeipmjghgskspujfsvv\") == 674\nassert solution.minTimeToType(\"tefiqkxiaywsxwpmhmoifndjbdoqtskabngdzpygrjjeoebrflzhhrvvtd\") == 415\nassert solution.minTimeToType(\"gdaakdbmpdoulwofejmbtpvxjktqbpqyjldlndufqjreqfrmrqumrsgiitzzrfvbcydkibswxwzvtptvcx\") == 593\nassert solution.minTimeToType(\"oqcfahfscwfwgsetbbkslxtgotceyiodbqndlqecidaxufxnqbjtnrjitjrmchfckgbvpcylendo\") == 632\nassert solution.minTimeToType(\"lxdnilojmnsnmicavapxxxgeafvfsgparlejytztcbtgpglxujap\") == 403\nassert solution.minTimeToType(\"srxoaexnpighdolempmggbgtadgsivlyfkvqukiyaepy\") == 332\nassert solution.minTimeToType(\"sjaqtjutlibmmoudgslbvq\") == 172\nassert solution.minTimeToType(\"qmjdjpgbfjqhzetiumnvbxwazezlmafucfp\") == 260",
  "inefficient_solution": "class Solution:\n    def minTimeToType(self, word: str) -> int:\n        ans = []\n        prev = 0\n        for c in word:\n            curr = ord(c) - ord('a')\n            t = abs(prev - curr)\n            t = min(t, 26 - t)\n            ans.append(t + 1)\n            ans.append(prev)\n            prev = curr\n        ans.append(0)\n        return sum(ans)",
  "is_python": true
}