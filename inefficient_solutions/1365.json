{
  "problem_idx": 1365,
  "task_name": "How Many Numbers Are Smaller Than the Current Number",
  "markdown_description": "\nGiven the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's`\u00a0such that\u00a0`j != i` **and** `nums[j] < nums[i]`.\n\n\nReturn the answer in an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [8,1,2,2,3]\n**Output:** [4,0,1,1,3]\n**Explanation:** \nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1). \nFor nums[3]=2 there exist one smaller number than it (1). \nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,5,4,8]\n**Output:** [2,1,0,3]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [7,7,7,7]\n**Output:** [0,0,0,0]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 500`\n* `0 <= nums[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n        cnt = [0] * 102\n        for x in nums:\n            cnt[x + 1] += 1\n        s = list(accumulate(cnt))\n        return [s[x] for x in nums]\n",
  "test_case_generator": "\nimport random\nfrom itertools import accumulate\n\nclass Solution:\n    def smallerNumbersThanCurrent(self, nums):\n        cnt = [0] * 102\n        for x in nums:\n            cnt[x + 1] += 1\n        s = list(accumulate(cnt))\n        return [s[x] for x in nums]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallerNumbersThanCurrent(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallerNumbersThanCurrent(nums) == expected_result\n        test_case = f\"assert solution.smallerNumbersThanCurrent({nums}) == {expected_result}\"\n        test_case_generator_results.append(test_case)\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.smallerNumbersThanCurrent([67, 43, 10, 26, 32, 62, 22, 99, 0, 79]) == [7, 5, 1, 3, 4, 6, 2, 9, 0, 8]\nassert solution.smallerNumbersThanCurrent([58, 42]) == [1, 0]\nassert solution.smallerNumbersThanCurrent([58, 74, 63, 66, 92, 28]) == [1, 4, 2, 3, 5, 0]\nassert solution.smallerNumbersThanCurrent([9, 79, 97, 76, 75, 62, 2, 49]) == [1, 6, 7, 5, 4, 3, 0, 2]\nassert solution.smallerNumbersThanCurrent([6, 24, 33, 83, 11, 62, 4, 71, 0]) == [2, 4, 5, 8, 3, 6, 1, 7, 0]\nassert solution.smallerNumbersThanCurrent([68, 84, 69, 98]) == [0, 2, 1, 3]\nassert solution.smallerNumbersThanCurrent([69, 91, 60, 56, 71, 12]) == [3, 5, 2, 1, 4, 0]\nassert solution.smallerNumbersThanCurrent([0, 12, 62, 89, 98]) == [0, 1, 2, 3, 4]\nassert solution.smallerNumbersThanCurrent([78, 29, 88, 18, 23, 40]) == [4, 2, 5, 0, 1, 3]\nassert solution.smallerNumbersThanCurrent([79, 66, 39, 89, 2, 55, 90, 74]) == [5, 3, 1, 6, 0, 2, 7, 4]\nassert solution.smallerNumbersThanCurrent([39, 0, 100, 29, 12, 16, 71]) == [4, 0, 6, 3, 1, 2, 5]\nassert solution.smallerNumbersThanCurrent([66, 23, 46]) == [2, 0, 1]\nassert solution.smallerNumbersThanCurrent([39, 18, 55]) == [1, 0, 2]\nassert solution.smallerNumbersThanCurrent([20, 94, 48, 66, 57, 33, 15, 91, 21]) == [1, 8, 4, 6, 5, 3, 0, 7, 2]\nassert solution.smallerNumbersThanCurrent([30, 65, 25, 64]) == [1, 3, 0, 2]\nassert solution.smallerNumbersThanCurrent([86, 88, 70]) == [1, 2, 0]\nassert solution.smallerNumbersThanCurrent([61, 99, 16, 48, 40]) == [3, 4, 0, 2, 1]\nassert solution.smallerNumbersThanCurrent([90, 58, 38, 27, 56, 71, 33, 85, 80]) == [8, 4, 2, 0, 3, 5, 1, 7, 6]\nassert solution.smallerNumbersThanCurrent([74, 94]) == [0, 1]\nassert solution.smallerNumbersThanCurrent([22, 91, 79, 9, 56, 44, 63, 46, 34]) == [1, 8, 7, 0, 5, 3, 6, 4, 2]\nassert solution.smallerNumbersThanCurrent([78, 16, 96, 9, 50, 8]) == [4, 2, 5, 1, 3, 0]\nassert solution.smallerNumbersThanCurrent([49, 75, 20]) == [1, 2, 0]\nassert solution.smallerNumbersThanCurrent([93, 34, 45, 66, 91, 70, 17, 3, 14, 90]) == [9, 3, 4, 5, 8, 6, 2, 0, 1, 7]\nassert solution.smallerNumbersThanCurrent([59, 82, 61, 32, 58, 91, 29]) == [3, 5, 4, 1, 2, 6, 0]\nassert solution.smallerNumbersThanCurrent([81, 96, 94, 4, 15, 89, 77]) == [3, 6, 5, 0, 1, 4, 2]\nassert solution.smallerNumbersThanCurrent([93, 68, 94, 57, 22, 88, 85]) == [5, 2, 6, 1, 0, 4, 3]\nassert solution.smallerNumbersThanCurrent([83, 12, 73, 63, 55, 77]) == [5, 0, 3, 2, 1, 4]\nassert solution.smallerNumbersThanCurrent([2, 41, 69, 16, 100, 59, 36, 52, 14, 75]) == [0, 4, 7, 2, 9, 6, 3, 5, 1, 8]\nassert solution.smallerNumbersThanCurrent([62, 54, 90, 82, 52, 64, 3, 36]) == [4, 3, 7, 6, 2, 5, 0, 1]\nassert solution.smallerNumbersThanCurrent([99, 67, 64, 72, 61, 88, 93, 81, 77, 46]) == [9, 3, 2, 4, 1, 7, 8, 6, 5, 0]\nassert solution.smallerNumbersThanCurrent([43, 13, 18, 91, 45, 24, 75, 99]) == [3, 0, 1, 6, 4, 2, 5, 7]\nassert solution.smallerNumbersThanCurrent([66, 35, 78, 55, 89, 28, 87, 61]) == [4, 1, 5, 2, 7, 0, 6, 3]\nassert solution.smallerNumbersThanCurrent([95, 44, 100, 99, 6, 28, 75]) == [4, 2, 6, 5, 0, 1, 3]\nassert solution.smallerNumbersThanCurrent([85, 50, 45]) == [2, 1, 0]\nassert solution.smallerNumbersThanCurrent([7, 84, 91, 25, 12]) == [0, 3, 4, 2, 1]\nassert solution.smallerNumbersThanCurrent([55, 18, 1, 97, 29, 99, 16]) == [4, 2, 0, 5, 3, 6, 1]\nassert solution.smallerNumbersThanCurrent([51, 68]) == [0, 1]\nassert solution.smallerNumbersThanCurrent([24, 1, 6, 70, 10, 72, 71, 58, 93, 92]) == [3, 0, 1, 5, 2, 7, 6, 4, 9, 8]\nassert solution.smallerNumbersThanCurrent([7, 96, 2, 39, 79, 30, 70, 10, 92, 81]) == [1, 9, 0, 4, 6, 3, 5, 2, 8, 7]\nassert solution.smallerNumbersThanCurrent([64, 85, 92, 39, 38, 24, 60, 5]) == [5, 6, 7, 3, 2, 1, 4, 0]\nassert solution.smallerNumbersThanCurrent([74, 80, 58, 3, 14, 75]) == [3, 5, 2, 0, 1, 4]\nassert solution.smallerNumbersThanCurrent([37, 78, 81, 48, 3, 94, 98, 45, 43, 28]) == [2, 6, 7, 5, 0, 8, 9, 4, 3, 1]\nassert solution.smallerNumbersThanCurrent([57, 54, 69, 40, 78, 64]) == [2, 1, 4, 0, 5, 3]\nassert solution.smallerNumbersThanCurrent([67, 26]) == [1, 0]\nassert solution.smallerNumbersThanCurrent([65, 51, 78, 19, 38, 66, 11]) == [4, 3, 6, 1, 2, 5, 0]\nassert solution.smallerNumbersThanCurrent([68, 16, 71, 14, 77, 11]) == [3, 2, 4, 1, 5, 0]\nassert solution.smallerNumbersThanCurrent([81, 93, 78, 49, 1, 77, 79]) == [5, 6, 3, 1, 0, 2, 4]\nassert solution.smallerNumbersThanCurrent([60, 78, 69, 85, 55, 24]) == [2, 4, 3, 5, 1, 0]\nassert solution.smallerNumbersThanCurrent([56, 99, 68, 27, 97, 8]) == [2, 5, 3, 1, 4, 0]\nassert solution.smallerNumbersThanCurrent([6, 56, 24, 37]) == [0, 3, 1, 2]\nassert solution.smallerNumbersThanCurrent([100, 24, 8, 35, 80, 93, 21]) == [6, 2, 0, 3, 4, 5, 1]\nassert solution.smallerNumbersThanCurrent([3, 43, 67, 16]) == [0, 2, 3, 1]\nassert solution.smallerNumbersThanCurrent([64, 80, 18, 66, 75, 68]) == [1, 5, 0, 2, 4, 3]\nassert solution.smallerNumbersThanCurrent([34, 37, 15, 73, 82, 100, 36, 25, 5, 94]) == [3, 5, 1, 6, 7, 9, 4, 2, 0, 8]\nassert solution.smallerNumbersThanCurrent([56, 96, 40, 2, 8, 7, 94, 98, 0, 14]) == [6, 8, 5, 1, 3, 2, 7, 9, 0, 4]\nassert solution.smallerNumbersThanCurrent([93, 47, 81, 80, 33]) == [4, 1, 3, 2, 0]\nassert solution.smallerNumbersThanCurrent([92, 15, 20, 29, 31, 30]) == [5, 0, 1, 2, 4, 3]\nassert solution.smallerNumbersThanCurrent([73, 45, 12, 2]) == [3, 2, 1, 0]\nassert solution.smallerNumbersThanCurrent([100, 2, 73, 81, 4, 11, 83, 57, 80]) == [8, 0, 4, 6, 1, 2, 7, 3, 5]\nassert solution.smallerNumbersThanCurrent([16, 1]) == [1, 0]\nassert solution.smallerNumbersThanCurrent([38, 79, 23, 8, 64, 87, 97, 0]) == [3, 5, 2, 1, 4, 6, 7, 0]\nassert solution.smallerNumbersThanCurrent([86, 76, 57, 13, 46, 35, 92]) == [5, 4, 3, 0, 2, 1, 6]\nassert solution.smallerNumbersThanCurrent([98, 21, 52, 77]) == [3, 0, 1, 2]\nassert solution.smallerNumbersThanCurrent([17, 73, 64, 83]) == [0, 2, 1, 3]\nassert solution.smallerNumbersThanCurrent([6, 47, 42, 34, 30, 58, 61, 41, 25, 95]) == [0, 6, 5, 3, 2, 7, 8, 4, 1, 9]\nassert solution.smallerNumbersThanCurrent([18, 38]) == [0, 1]\nassert solution.smallerNumbersThanCurrent([1, 94, 37, 35]) == [0, 3, 2, 1]\nassert solution.smallerNumbersThanCurrent([61, 16]) == [1, 0]\nassert solution.smallerNumbersThanCurrent([34, 53, 4, 11, 17]) == [3, 4, 0, 1, 2]\nassert solution.smallerNumbersThanCurrent([25, 77, 12, 0, 65, 22, 94, 18, 47]) == [4, 7, 1, 0, 6, 3, 8, 2, 5]\nassert solution.smallerNumbersThanCurrent([48, 82, 39, 42, 3]) == [3, 4, 1, 2, 0]\nassert solution.smallerNumbersThanCurrent([4, 57, 20, 96, 74, 85, 11, 25, 71, 78]) == [0, 4, 2, 9, 6, 8, 1, 3, 5, 7]\nassert solution.smallerNumbersThanCurrent([11, 31, 58, 60, 23, 2, 38, 82]) == [1, 3, 5, 6, 2, 0, 4, 7]\nassert solution.smallerNumbersThanCurrent([62, 93, 78, 44, 42, 86]) == [2, 5, 3, 1, 0, 4]\nassert solution.smallerNumbersThanCurrent([93, 4, 14, 80, 43, 23, 92, 90]) == [7, 0, 1, 4, 3, 2, 6, 5]\nassert solution.smallerNumbersThanCurrent([0, 43, 52, 3]) == [0, 2, 3, 1]\nassert solution.smallerNumbersThanCurrent([74, 19, 63, 89, 99, 54, 88]) == [3, 0, 2, 5, 6, 1, 4]\nassert solution.smallerNumbersThanCurrent([29, 0, 87, 10, 18, 64, 82, 46, 77]) == [3, 0, 8, 1, 2, 5, 7, 4, 6]\nassert solution.smallerNumbersThanCurrent([77, 95, 0, 13, 84, 53, 54]) == [4, 6, 0, 1, 5, 2, 3]\nassert solution.smallerNumbersThanCurrent([13, 60, 66, 43]) == [0, 2, 3, 1]\nassert solution.smallerNumbersThanCurrent([14, 75, 20, 32, 60, 6, 31, 47, 72, 4]) == [2, 9, 3, 5, 7, 1, 4, 6, 8, 0]\nassert solution.smallerNumbersThanCurrent([23, 4, 3, 38, 47, 89, 1, 78]) == [3, 2, 1, 4, 5, 7, 0, 6]\nassert solution.smallerNumbersThanCurrent([12, 29, 58, 19, 36, 7, 75, 4, 99, 9]) == [3, 5, 7, 4, 6, 1, 8, 0, 9, 2]\nassert solution.smallerNumbersThanCurrent([97, 58, 29, 43]) == [3, 2, 0, 1]\nassert solution.smallerNumbersThanCurrent([29, 10, 14, 82, 73, 35, 63]) == [2, 0, 1, 6, 5, 3, 4]\nassert solution.smallerNumbersThanCurrent([6, 12]) == [0, 1]\nassert solution.smallerNumbersThanCurrent([48, 59, 27, 74, 31, 72, 13, 63]) == [3, 4, 1, 7, 2, 6, 0, 5]\nassert solution.smallerNumbersThanCurrent([43, 49, 50, 64, 62, 20]) == [1, 2, 3, 5, 4, 0]\nassert solution.smallerNumbersThanCurrent([44, 49, 45]) == [0, 2, 1]\nassert solution.smallerNumbersThanCurrent([33, 23, 91, 73, 45, 72]) == [1, 0, 5, 4, 2, 3]\nassert solution.smallerNumbersThanCurrent([91, 7, 22, 65, 89, 55]) == [5, 0, 1, 3, 4, 2]\nassert solution.smallerNumbersThanCurrent([69, 43, 14, 77, 26, 54, 90, 71]) == [4, 2, 0, 6, 1, 3, 7, 5]\nassert solution.smallerNumbersThanCurrent([65, 6]) == [1, 0]\nassert solution.smallerNumbersThanCurrent([57, 19, 6, 93, 95, 48, 94]) == [3, 1, 0, 4, 6, 2, 5]\nassert solution.smallerNumbersThanCurrent([69, 74, 89, 42, 18, 84, 2]) == [3, 4, 6, 2, 1, 5, 0]\nassert solution.smallerNumbersThanCurrent([44, 57, 62, 74]) == [0, 1, 2, 3]\nassert solution.smallerNumbersThanCurrent([16, 57, 4, 92, 30, 75, 11, 7, 25]) == [3, 6, 0, 8, 5, 7, 2, 1, 4]\nassert solution.smallerNumbersThanCurrent([18, 58, 36]) == [0, 2, 1]\nassert solution.smallerNumbersThanCurrent([41, 92, 10, 84, 33, 5]) == [3, 5, 1, 4, 2, 0]\nassert solution.smallerNumbersThanCurrent([43, 2, 24, 12, 26, 77, 68, 46, 89]) == [4, 0, 2, 1, 3, 7, 6, 5, 8]",
  "inefficient_solution": "class Solution:\n    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:\n        result = []\n        for i in range(len(nums)):\n            count = 0\n            for x in nums:\n                if i != nums.index(x) and x < nums[i]:\n                    count += 1\n            result.append(count)\n        return result",
  "is_python": true
}