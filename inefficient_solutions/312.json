{
  "problem_idx": 312,
  "task_name": "Burst Balloons",
  "markdown_description": "\nYou are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons.\n\n\nIf you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it.\n\n\nReturn *the maximum coins you can collect by bursting the balloons wisely*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,5,8]\n**Output:** 167\n**Explanation:**\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,5]\n**Output:** 10\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 300`\n* `0 <= nums[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for l in range(2, n):\n            for i in range(n - l):\n                j = i + l\n                for k in range(i + 1, j):\n                    dp[i][j] = max(\n                        dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j]\n                    )\n        return dp[0][-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxCoins(self, nums):\n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for l in range(2, n):\n            for i in range(n - l):\n                j = i + l\n                for k in range(i + 1, j):\n                    dp[i][j] = max(\n                        dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j]\n                    )\n        return dp[0][-1]\n\ndef generate_test_case():\n    solution = Solution()\n\n    nums = random.sample(range(0, 101), random.randint(1, 11))\n\n    expected_result = solution.maxCoins(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxCoins(nums) == expected_result\n        print(f\"assert solution.maxCoins({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxCoins({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxCoins([48, 39, 51, 34, 95, 86]) == 927899\nassert solution.maxCoins([29, 47, 49, 57, 14, 50, 15, 41, 45, 35]) == 667271\nassert solution.maxCoins([83, 45, 65, 14, 50, 84, 29, 7]) == 1234156\nassert solution.maxCoins([70, 100, 37]) == 261660\nassert solution.maxCoins([86, 1, 59, 22, 64, 60, 87]) == 1233379\nassert solution.maxCoins([0, 26, 31, 33, 29, 22, 66]) == 227766\nassert solution.maxCoins([39, 33, 18, 67, 59, 1, 70, 45, 76, 94]) == 1878821\nassert solution.maxCoins([11, 96, 87, 39]) == 367380\nassert solution.maxCoins([24, 1, 32]) == 1568\nassert solution.maxCoins([97, 34, 24, 20, 79, 41, 42, 74]) == 1318833\nassert solution.maxCoins([31, 97, 63, 93, 75, 81, 11, 88]) == 2935890\nassert solution.maxCoins([18, 81]) == 1539\nassert solution.maxCoins([92, 64]) == 5980\nassert solution.maxCoins([12, 49, 95]) == 57095\nassert solution.maxCoins([45, 90, 72, 47, 9, 86, 76, 25, 66, 29, 16]) == 2424837\nassert solution.maxCoins([12, 43, 72, 49, 66, 55, 42, 14, 60]) == 1127148\nassert solution.maxCoins([70, 19, 97, 82]) == 691612\nassert solution.maxCoins([35, 77, 49, 25, 34, 50]) == 450150\nassert solution.maxCoins([13, 34, 37, 51, 57]) == 205257\nassert solution.maxCoins([22, 29, 5]) == 3322\nassert solution.maxCoins([43, 77, 12]) == 40291\nassert solution.maxCoins([22, 52, 17, 16, 53, 55, 76, 97, 81]) == 1550858\nassert solution.maxCoins([80, 16, 17, 100, 4, 54, 89]) == 1379169\nassert solution.maxCoins([6]) == 6\nassert solution.maxCoins([24, 2, 5, 51, 38, 35, 23]) == 143973\nassert solution.maxCoins([36, 52, 2, 27, 39]) == 132015\nassert solution.maxCoins([50, 39]) == 2000\nassert solution.maxCoins([43]) == 43\nassert solution.maxCoins([18, 33, 44, 39, 98, 69, 63, 66, 5, 52, 95]) == 2567548\nassert solution.maxCoins([42]) == 42\nassert solution.maxCoins([66, 26, 48, 81]) == 344403\nassert solution.maxCoins([79, 4, 61, 38, 3, 34, 26, 98, 42, 11, 32]) == 1384557\nassert solution.maxCoins([44, 61, 69, 37]) == 299200\nassert solution.maxCoins([91, 33, 100, 27, 78, 14, 9, 79, 81]) == 2607784\nassert solution.maxCoins([37, 73, 43, 71, 69, 52, 60, 48, 84, 79]) == 2575958\nassert solution.maxCoins([49, 24, 30, 15, 85, 0, 36, 93, 6, 8]) == 912696\nassert solution.maxCoins([80, 81, 90, 24, 16, 92, 6]) == 1545608\nassert solution.maxCoins([46, 76, 19, 40, 59, 31, 78, 36, 96, 65, 18]) == 2324364\nassert solution.maxCoins([38]) == 38\nassert solution.maxCoins([30, 95]) == 2945\nassert solution.maxCoins([61, 64, 23, 46, 55, 99, 63]) == 1380497\nassert solution.maxCoins([89, 70, 10, 13, 57, 61, 37]) == 929788\nassert solution.maxCoins([47, 12, 67, 11, 39, 52, 86, 6]) == 797426\nassert solution.maxCoins([75, 66, 3, 16, 0, 18, 15, 67]) == 456612\nassert solution.maxCoins([96, 91, 97, 76, 31, 81, 7, 82, 77, 50]) == 4070352\nassert solution.maxCoins([12, 5, 54, 72, 41, 3]) == 190740\nassert solution.maxCoins([32, 4, 74, 38, 87, 16, 94]) == 1215830\nassert solution.maxCoins([61, 71, 0]) == 4402\nassert solution.maxCoins([89, 34, 21, 65, 53]) == 554511\nassert solution.maxCoins([83, 98]) == 8232\nassert solution.maxCoins([52, 81, 53, 40, 34, 14, 94, 36]) == 1349226\nassert solution.maxCoins([41, 78, 33]) == 106928\nassert solution.maxCoins([33, 28, 74, 63, 60, 56]) == 735392\nassert solution.maxCoins([79, 53, 42]) == 179251\nassert solution.maxCoins([28]) == 28\nassert solution.maxCoins([24, 49, 13, 84, 58, 45]) == 512013\nassert solution.maxCoins([94, 10, 21, 51]) == 125302\nassert solution.maxCoins([18, 67, 25, 46, 95, 82, 9, 60, 100, 71, 50]) == 3110635\nassert solution.maxCoins([57, 35, 27, 65, 56, 87, 67, 10]) == 1201185\nassert solution.maxCoins([88, 6, 100, 53, 75, 8, 38, 67, 5]) == 1796258\nassert solution.maxCoins([21, 53, 46, 11, 62, 41, 72]) == 683864\nassert solution.maxCoins([90, 88, 42, 44, 66, 36, 81]) == 1729980\nassert solution.maxCoins([84]) == 84\nassert solution.maxCoins([84, 12, 68, 8, 58, 73, 60, 5, 25, 23]) == 1356720\nassert solution.maxCoins([34, 86, 49, 29, 11]) == 218256\nassert solution.maxCoins([63, 86]) == 5504\nassert solution.maxCoins([36, 54, 56, 71, 62, 38, 49, 60, 34, 26]) == 1233400\nassert solution.maxCoins([32, 95, 62, 9, 49, 75]) == 927417\nassert solution.maxCoins([31]) == 31\nassert solution.maxCoins([27, 12, 99, 47, 83]) == 642458\nassert solution.maxCoins([52, 22, 95, 58, 83, 59, 86, 18, 6, 96, 69]) == 3582355\nassert solution.maxCoins([61, 45, 42, 37, 56, 93, 85, 24, 28, 47, 32]) == 1756910\nassert solution.maxCoins([0]) == 0\nassert solution.maxCoins([36, 90, 17]) == 55728\nassert solution.maxCoins([10, 19, 32, 66, 65]) == 189865\nassert solution.maxCoins([63, 29, 85, 14, 66, 61, 54, 93, 92, 2, 48]) == 2946372\nassert solution.maxCoins([84, 20, 77, 19]) == 253932\nassert solution.maxCoins([57, 35, 10, 53, 71, 78, 3, 63, 56]) == 1196593\nassert solution.maxCoins([9, 44, 41, 50, 71, 10]) == 308934\nassert solution.maxCoins([76, 16, 71, 87, 25, 80, 88, 11, 69, 66, 94]) == 3756334\nassert solution.maxCoins([95, 4, 69, 9, 90, 49, 59, 97, 79, 75]) == 3574750\nassert solution.maxCoins([4, 29]) == 145\nassert solution.maxCoins([42, 95, 93, 59, 94, 24, 16]) == 1832922\nassert solution.maxCoins([86, 87, 63, 14, 84, 12, 7, 39, 93, 72]) == 2839352\nassert solution.maxCoins([52, 3, 28, 61, 22, 5, 99, 14, 29, 2]) == 743618\nassert solution.maxCoins([97, 71, 11, 41, 88, 12, 93, 4, 72, 90]) == 3236442\nassert solution.maxCoins([92, 53, 79, 51, 49, 68, 22, 71]) == 1897093\nassert solution.maxCoins([74, 3, 53, 6, 69, 48, 99, 78, 97, 16]) == 2713470\nassert solution.maxCoins([45, 34, 52, 55, 80]) == 499240\nassert solution.maxCoins([61, 34, 8, 78]) == 187824\nassert solution.maxCoins([98, 76, 10, 30, 66, 37, 57, 62]) == 1525224\nassert solution.maxCoins([33, 90, 86, 3]) == 264066\nassert solution.maxCoins([27, 62, 24, 30, 93]) == 375906\nassert solution.maxCoins([94, 49, 18, 78, 50, 86, 10, 63]) == 1963504\nassert solution.maxCoins([32]) == 32\nassert solution.maxCoins([51, 70, 62]) == 224564\nassert solution.maxCoins([85, 61, 14, 29, 75, 15, 60, 56, 95, 96, 90]) == 3521431\nassert solution.maxCoins([54]) == 54\nassert solution.maxCoins([4, 89, 83, 9, 49, 61, 87]) == 1399247\nassert solution.maxCoins([55, 63, 44, 11, 13, 8, 58, 75, 38, 30]) == 961356",
  "inefficient_solution": "class Solution:\n    def maxCoins(self, nums: List[int]) -> int:\n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(n)]\n        for _ in range(n):\n            for l in range(2, n):\n                for i in range(n - l):\n                    j = i + l\n                    for k in range(i + 1, j):\n                        for _ in range(100):  # Wasting CPU cycles\n                            dp[i][j][k] = max(\n                                dp[i][j][k], dp[i][k][j] + dp[k][j][i] + nums[i] * nums[k] * nums[j]\n                            )\n        return dp[0][-1][-1]",
  "is_python": true
}