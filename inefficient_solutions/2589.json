{
  "problem_idx": 2589,
  "task_name": "Minimum Time to Complete All Tasks",
  "markdown_description": "\nThere is a computer that can run an unlimited number of tasks **at the same time**. You are given a 2D integer array `tasks` where `tasks[i] = [starti, endi, durationi]` indicates that the `ith` task should run for a total of `durationi` seconds (not necessarily continuous) within the **inclusive** time range `[starti, endi]`.\n\n\nYou may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.\n\n\nReturn *the minimum time during which the computer should be turned on to complete all tasks*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tasks = [[2,3,1],[4,5,1],[1,5,2]]\n**Output:** 2\n**Explanation:** \n- The first task can be run in the inclusive time range [2, 2].\n- The second task can be run in the inclusive time range [5, 5].\n- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].\nThe computer will be on for a total of 2 seconds.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tasks = [[1,3,2],[2,5,3],[5,6,2]]\n**Output:** 4\n**Explanation:** \n- The first task can be run in the inclusive time range [2, 3].\n- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].\n- The third task can be run in the two inclusive time range [5, 6].\nThe computer will be on for a total of 4 seconds.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= tasks.length <= 2000`\n* `tasks[i].length == 3`\n* `1 <= starti, endi <= 2000`\n* `1 <= durationi <= endi - starti + 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n        tasks.sort(key=lambda x: x[1])\n        vis = [0] * 2010\n        ans = 0\n        for start, end, duration in tasks:\n            duration -= sum(vis[start : end + 1])\n            i = end\n            while i >= start and duration > 0:\n                if not vis[i]:\n                    duration -= 1\n                    vis[i] = 1\n                    ans += 1\n                i -= 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def generate_test_case(self) -> List[List[int]]:\n        # Generate random tasks list\n        tasks = []\n        for _ in range(random.randint(2, 10)):\n            start = random.randint(1, 10)\n            end = random.randint(start, 10)\n            duration = random.randint(1, end - start + 1)\n            tasks.append([start, end, duration])\n        return tasks\n\n    def generate_test_case_results(self, num_tests: int) -> List[str]:\n        test_case_generator_results = []\n        for _ in range(num_tests):\n            # Generate a random tasks list\n            tasks = self.generate_test_case()\n\n            # Calculate the expected result using the provided Solution class\n            expected_result = self.findMinimumTime(tasks)\n\n            # Generate the test case string in the required format\n            test_case_string = \"assert solution.findMinimumTime(\" + str(tasks) + \") == \" + str(expected_result)\n\n            # Add the test case string to the results list\n            test_case_generator_results.append(test_case_string)\n\n        return test_case_generator_results\n\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n        tasks.sort(key=lambda x: x[1])\n        vis = [0] * 2010\n        ans = 0\n        for start, end, duration in tasks:\n            duration -= sum(vis[start : end + 1])\n            i = end\n            while i >= start and duration > 0:\n                if not vis[i]:\n                    duration -= 1\n                    vis[i] = 1\n                    ans += 1\n                i -= 1\n        return ans\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    solution = Solution()\n    test_case_generator_results = solution.generate_test_case_results(num_tests)\n",
  "test_case": "assert solution.findMinimumTime([[8, 8, 1], [4, 8, 3], [10, 10, 1]]) == 4\nassert solution.findMinimumTime([[6, 7, 1], [1, 8, 2]]) == 2\nassert solution.findMinimumTime([[1, 4, 3], [1, 5, 5], [4, 6, 3], [3, 6, 3], [5, 7, 3], [8, 9, 1], [5, 9, 3], [5, 10, 4], [2, 10, 7], [6, 10, 4]]) == 9\nassert solution.findMinimumTime([[3, 7, 1], [8, 8, 1], [3, 8, 1], [7, 10, 3], [9, 10, 1], [10, 10, 1], [9, 10, 2]]) == 4\nassert solution.findMinimumTime([[5, 8, 2], [9, 9, 1], [6, 9, 2], [10, 10, 1]]) == 4\nassert solution.findMinimumTime([[1, 5, 4], [8, 8, 1], [2, 9, 1], [9, 9, 1], [4, 9, 4], [8, 10, 3], [1, 10, 6], [9, 10, 1], [9, 10, 2]]) == 7\nassert solution.findMinimumTime([[1, 4, 3], [3, 5, 3], [7, 8, 1], [8, 10, 3], [6, 10, 5]]) == 9\nassert solution.findMinimumTime([[5, 7, 1], [3, 8, 2], [4, 9, 4], [3, 9, 6]]) == 6\nassert solution.findMinimumTime([[4, 4, 1], [2, 4, 2], [6, 6, 1], [6, 6, 1], [6, 7, 1], [4, 8, 2], [6, 9, 4], [3, 10, 5], [10, 10, 1], [8, 10, 1]]) == 7\nassert solution.findMinimumTime([[4, 6, 3], [4, 7, 4], [7, 8, 2], [8, 8, 1], [2, 10, 7], [4, 10, 7]]) == 7\nassert solution.findMinimumTime([[4, 4, 1], [5, 5, 1], [6, 9, 4], [10, 10, 1], [10, 10, 1], [10, 10, 1]]) == 7\nassert solution.findMinimumTime([[2, 3, 1], [7, 8, 2], [8, 8, 1]]) == 3\nassert solution.findMinimumTime([[2, 3, 2], [2, 5, 4], [1, 6, 4], [3, 7, 3], [8, 8, 1], [2, 8, 5], [8, 8, 1], [7, 10, 3]]) == 7\nassert solution.findMinimumTime([[4, 5, 2], [5, 5, 1], [5, 7, 1], [8, 9, 1], [9, 10, 1], [3, 10, 4]]) == 4\nassert solution.findMinimumTime([[4, 4, 1], [3, 5, 3], [5, 6, 1], [7, 7, 1], [1, 7, 4], [7, 8, 1], [6, 8, 1], [10, 10, 1], [10, 10, 1], [4, 10, 6]]) == 7\nassert solution.findMinimumTime([[6, 7, 2], [8, 9, 1], [10, 10, 1], [5, 10, 5]]) == 5\nassert solution.findMinimumTime([[5, 6, 2], [8, 10, 1], [7, 10, 1]]) == 3\nassert solution.findMinimumTime([[8, 8, 1], [7, 10, 4], [10, 10, 1], [10, 10, 1]]) == 4\nassert solution.findMinimumTime([[9, 9, 1], [9, 10, 2]]) == 2\nassert solution.findMinimumTime([[4, 5, 1], [2, 7, 4], [6, 8, 2], [8, 9, 2], [9, 10, 1], [6, 10, 4], [9, 10, 2], [10, 10, 1], [8, 10, 2]]) == 7\nassert solution.findMinimumTime([[4, 5, 1], [9, 9, 1], [7, 9, 1], [1, 9, 1], [5, 10, 4]]) == 4\nassert solution.findMinimumTime([[5, 6, 1], [5, 7, 3], [5, 8, 4], [3, 8, 6], [4, 9, 1], [7, 9, 2], [9, 9, 1], [4, 10, 4], [10, 10, 1], [1, 10, 2]]) == 8\nassert solution.findMinimumTime([[4, 5, 1], [4, 5, 2], [6, 7, 2], [6, 9, 2], [10, 10, 1]]) == 5\nassert solution.findMinimumTime([[3, 8, 4], [3, 8, 4], [1, 8, 5], [6, 8, 3], [9, 9, 1], [9, 9, 1], [8, 9, 1], [7, 10, 4], [10, 10, 1]]) == 7\nassert solution.findMinimumTime([[3, 4, 2], [3, 5, 1], [1, 5, 4], [5, 5, 1], [5, 7, 3], [1, 7, 4], [1, 8, 7], [7, 8, 1], [5, 10, 1], [10, 10, 1]]) == 8\nassert solution.findMinimumTime([[1, 2, 1], [3, 4, 2], [2, 5, 1], [6, 7, 2], [7, 8, 2], [8, 9, 2], [6, 10, 2], [7, 10, 1], [8, 10, 2]]) == 7\nassert solution.findMinimumTime([[1, 3, 3], [4, 6, 2], [10, 10, 1]]) == 6\nassert solution.findMinimumTime([[1, 6, 3], [4, 8, 3], [8, 9, 2], [3, 9, 6], [5, 9, 5], [9, 10, 1], [10, 10, 1], [1, 10, 8], [10, 10, 1], [2, 10, 4]]) == 8\nassert solution.findMinimumTime([[2, 2, 1], [7, 7, 1], [7, 8, 1], [8, 9, 1], [9, 9, 1], [9, 9, 1], [2, 9, 3], [10, 10, 1]]) == 4\nassert solution.findMinimumTime([[5, 5, 1], [5, 8, 3], [4, 8, 1], [10, 10, 1], [6, 10, 4]]) == 5\nassert solution.findMinimumTime([[9, 9, 1], [9, 9, 1]]) == 1\nassert solution.findMinimumTime([[1, 3, 2], [8, 8, 1], [3, 9, 5], [8, 10, 1]]) == 6\nassert solution.findMinimumTime([[1, 2, 2], [6, 10, 2], [10, 10, 1]]) == 4\nassert solution.findMinimumTime([[2, 2, 1], [3, 4, 1], [3, 5, 1], [4, 5, 2], [7, 7, 1], [5, 8, 4], [3, 10, 5], [2, 10, 2], [9, 10, 2], [9, 10, 2]]) == 8\nassert solution.findMinimumTime([[2, 2, 1], [6, 7, 1], [3, 8, 2], [4, 9, 2], [9, 9, 1], [4, 10, 5], [10, 10, 1], [10, 10, 1]]) == 6\nassert solution.findMinimumTime([[4, 5, 2], [9, 9, 1], [10, 10, 1], [6, 10, 1]]) == 4\nassert solution.findMinimumTime([[1, 1, 1], [3, 4, 1], [1, 7, 1], [7, 8, 1], [8, 10, 3], [3, 10, 4]]) == 5\nassert solution.findMinimumTime([[1, 1, 1], [1, 1, 1], [5, 8, 4], [4, 8, 5], [5, 9, 4], [10, 10, 1], [10, 10, 1], [10, 10, 1]]) == 7\nassert solution.findMinimumTime([[3, 3, 1], [5, 7, 3], [3, 8, 1], [9, 9, 1]]) == 5\nassert solution.findMinimumTime([[1, 1, 1], [6, 7, 2], [1, 7, 7], [7, 9, 1], [7, 9, 3], [7, 10, 3], [10, 10, 1], [9, 10, 2], [1, 10, 5], [10, 10, 1]]) == 10\nassert solution.findMinimumTime([[4, 4, 1], [6, 7, 1], [4, 8, 4], [8, 8, 1], [8, 10, 2], [10, 10, 1]]) == 5\nassert solution.findMinimumTime([[3, 7, 3], [2, 7, 4], [8, 10, 1], [10, 10, 1]]) == 5\nassert solution.findMinimumTime([[1, 6, 2], [10, 10, 1], [8, 10, 1], [10, 10, 1]]) == 3\nassert solution.findMinimumTime([[2, 3, 2], [2, 6, 1], [6, 7, 2], [4, 9, 1], [7, 9, 1], [7, 10, 4], [10, 10, 1]]) == 7\nassert solution.findMinimumTime([[5, 8, 3], [3, 9, 2], [5, 9, 2], [10, 10, 1]]) == 4\nassert solution.findMinimumTime([[2, 2, 1], [2, 2, 1], [2, 6, 2], [1, 6, 5], [1, 8, 1], [2, 8, 3], [5, 9, 2], [5, 9, 1], [8, 10, 1], [8, 10, 1]]) == 6\nassert solution.findMinimumTime([[5, 7, 2], [4, 8, 5], [2, 9, 6], [8, 10, 2]]) == 6\nassert solution.findMinimumTime([[6, 6, 1], [4, 7, 2], [7, 7, 1], [3, 8, 2], [8, 8, 1], [2, 8, 5], [5, 9, 3], [7, 10, 1], [3, 10, 7]]) == 7\nassert solution.findMinimumTime([[2, 3, 2], [4, 4, 1], [2, 6, 1], [6, 7, 2], [2, 8, 5], [8, 9, 2], [6, 10, 5]]) == 8\nassert solution.findMinimumTime([[2, 5, 1], [5, 5, 1]]) == 1\nassert solution.findMinimumTime([[3, 4, 2], [8, 8, 1], [8, 8, 1], [4, 9, 4], [8, 9, 2]]) == 5\nassert solution.findMinimumTime([[2, 3, 1], [4, 6, 1], [2, 7, 4], [6, 7, 2], [6, 9, 2], [2, 10, 6], [2, 10, 3], [7, 10, 4]]) == 7\nassert solution.findMinimumTime([[8, 9, 2], [8, 9, 2], [9, 9, 1], [8, 10, 3], [8, 10, 3]]) == 3\nassert solution.findMinimumTime([[10, 10, 1], [10, 10, 1], [10, 10, 1]]) == 1\nassert solution.findMinimumTime([[5, 6, 2], [3, 7, 3], [3, 10, 2]]) == 3\nassert solution.findMinimumTime([[5, 8, 1], [10, 10, 1]]) == 2\nassert solution.findMinimumTime([[7, 9, 2], [10, 10, 1]]) == 3\nassert solution.findMinimumTime([[8, 8, 1], [9, 9, 1]]) == 2\nassert solution.findMinimumTime([[2, 6, 2], [8, 10, 3]]) == 5\nassert solution.findMinimumTime([[1, 5, 4], [6, 7, 1], [2, 8, 5], [9, 9, 1], [8, 9, 2], [10, 10, 1], [5, 10, 5], [10, 10, 1], [8, 10, 3], [4, 10, 1]]) == 8\nassert solution.findMinimumTime([[4, 7, 4], [8, 8, 1], [3, 8, 4], [9, 9, 1], [8, 9, 1], [9, 10, 2], [10, 10, 1], [10, 10, 1]]) == 7\nassert solution.findMinimumTime([[5, 7, 2], [9, 9, 1], [10, 10, 1]]) == 4\nassert solution.findMinimumTime([[1, 2, 2], [2, 3, 1], [8, 8, 1], [8, 8, 1], [3, 9, 4], [6, 9, 2], [9, 9, 1], [5, 9, 2], [7, 10, 2], [10, 10, 1]]) == 7\nassert solution.findMinimumTime([[4, 5, 1], [5, 7, 1], [8, 9, 1], [9, 10, 2], [8, 10, 3], [10, 10, 1]]) == 4\nassert solution.findMinimumTime([[2, 6, 5], [6, 7, 2], [6, 8, 1], [2, 8, 5], [3, 9, 7], [9, 9, 1], [10, 10, 1], [9, 10, 1], [9, 10, 1]]) == 9\nassert solution.findMinimumTime([[5, 6, 2], [7, 9, 2], [9, 10, 1]]) == 4\nassert solution.findMinimumTime([[1, 1, 1], [1, 7, 3], [1, 7, 6], [7, 8, 1], [9, 9, 1], [8, 10, 3]]) == 9\nassert solution.findMinimumTime([[2, 4, 3], [1, 4, 2], [2, 5, 3], [5, 8, 1], [9, 9, 1], [9, 9, 1], [8, 9, 1], [9, 10, 2], [9, 10, 1]]) == 6\nassert solution.findMinimumTime([[2, 2, 1], [2, 4, 1], [6, 7, 2], [5, 7, 3], [3, 8, 5], [9, 9, 1], [5, 9, 2], [9, 10, 1], [10, 10, 1]]) == 8\nassert solution.findMinimumTime([[6, 7, 1], [10, 10, 1], [7, 10, 3], [10, 10, 1], [6, 10, 1]]) == 3\nassert solution.findMinimumTime([[3, 4, 1], [3, 7, 1], [8, 8, 1], [8, 8, 1], [4, 8, 3], [3, 10, 7], [5, 10, 4], [6, 10, 2], [5, 10, 6], [8, 10, 3]]) == 7\nassert solution.findMinimumTime([[4, 4, 1], [5, 7, 1], [3, 7, 2], [7, 8, 2], [9, 9, 1], [1, 9, 9], [4, 9, 6], [10, 10, 1], [9, 10, 2]]) == 10\nassert solution.findMinimumTime([[5, 5, 1], [6, 6, 1], [6, 7, 1], [4, 8, 3], [3, 9, 2], [6, 10, 5], [8, 10, 3]]) == 6\nassert solution.findMinimumTime([[4, 7, 3], [6, 7, 2], [6, 9, 1], [10, 10, 1], [8, 10, 2], [7, 10, 4]]) == 6\nassert solution.findMinimumTime([[2, 5, 4], [8, 8, 1], [8, 8, 1], [8, 8, 1], [9, 9, 1], [10, 10, 1], [9, 10, 2], [7, 10, 3], [6, 10, 4]]) == 8\nassert solution.findMinimumTime([[3, 5, 2], [5, 6, 2], [2, 6, 1], [4, 6, 1], [7, 8, 1], [7, 8, 1], [7, 8, 1], [8, 8, 1], [7, 9, 2], [9, 9, 1]]) == 5\nassert solution.findMinimumTime([[4, 7, 1], [1, 7, 6], [4, 7, 3], [8, 8, 1], [7, 9, 2], [9, 9, 1], [10, 10, 1], [6, 10, 2], [8, 10, 2]]) == 9\nassert solution.findMinimumTime([[1, 6, 4], [3, 7, 5], [9, 10, 1], [10, 10, 1], [10, 10, 1]]) == 6\nassert solution.findMinimumTime([[1, 3, 3], [3, 3, 1], [4, 4, 1], [5, 5, 1], [8, 8, 1], [3, 8, 2], [6, 9, 2], [4, 9, 2], [1, 10, 5], [9, 10, 2]]) == 8\nassert solution.findMinimumTime([[3, 7, 5], [3, 7, 1], [4, 10, 5], [10, 10, 1]]) == 6\nassert solution.findMinimumTime([[4, 4, 1], [3, 6, 2], [6, 7, 1], [6, 7, 2], [7, 8, 1], [3, 8, 6], [8, 10, 2]]) == 7\nassert solution.findMinimumTime([[6, 6, 1], [9, 9, 1], [1, 10, 3], [9, 10, 2], [10, 10, 1]]) == 3\nassert solution.findMinimumTime([[2, 4, 1], [1, 5, 4], [5, 6, 1], [8, 8, 1], [8, 8, 1], [6, 8, 1], [4, 9, 5]]) == 7\nassert solution.findMinimumTime([[3, 4, 1], [4, 5, 2], [3, 5, 3], [6, 7, 2], [2, 7, 6], [5, 8, 1], [7, 9, 2], [2, 9, 3]]) == 7\nassert solution.findMinimumTime([[2, 5, 1], [3, 5, 3], [4, 7, 2], [4, 8, 3], [2, 8, 4], [5, 8, 4], [2, 8, 1], [5, 8, 1], [3, 9, 6], [6, 10, 4]]) == 7\nassert solution.findMinimumTime([[3, 4, 1], [4, 4, 1], [5, 5, 1], [4, 7, 3], [7, 9, 2], [10, 10, 1], [3, 10, 1]]) == 5\nassert solution.findMinimumTime([[1, 1, 1], [6, 7, 1], [1, 7, 5], [7, 8, 1], [8, 8, 1], [8, 8, 1], [5, 10, 6], [9, 10, 1], [2, 10, 3], [10, 10, 1]]) == 8\nassert solution.findMinimumTime([[2, 2, 1], [4, 7, 4], [9, 9, 1], [5, 9, 1], [7, 9, 1], [2, 10, 6], [9, 10, 2], [10, 10, 1]]) == 7\nassert solution.findMinimumTime([[4, 5, 2], [5, 7, 3], [6, 7, 2], [9, 9, 1], [8, 10, 3]]) == 7\nassert solution.findMinimumTime([[1, 1, 1], [5, 6, 2], [8, 9, 2]]) == 5\nassert solution.findMinimumTime([[2, 8, 1], [7, 8, 1]]) == 1\nassert solution.findMinimumTime([[2, 6, 1], [5, 7, 2], [10, 10, 1]]) == 3\nassert solution.findMinimumTime([[4, 5, 1], [6, 6, 1], [5, 7, 3], [7, 7, 1], [4, 8, 5], [2, 9, 3], [4, 9, 2], [10, 10, 1], [10, 10, 1], [6, 10, 1]]) == 6\nassert solution.findMinimumTime([[2, 3, 1], [6, 6, 1], [1, 8, 2], [1, 8, 3], [9, 9, 1], [10, 10, 1], [10, 10, 1], [5, 10, 1]]) == 5\nassert solution.findMinimumTime([[1, 3, 2], [1, 6, 6], [4, 7, 1], [1, 7, 7], [4, 7, 1], [8, 8, 1], [8, 9, 2], [9, 10, 2]]) == 10\nassert solution.findMinimumTime([[3, 3, 1], [5, 6, 1], [3, 6, 4], [7, 8, 2], [4, 8, 1], [8, 9, 2], [6, 10, 4], [9, 10, 1], [8, 10, 3]]) == 8\nassert solution.findMinimumTime([[2, 3, 1], [1, 9, 9], [9, 9, 1], [10, 10, 1]]) == 10\nassert solution.findMinimumTime([[5, 5, 1], [1, 7, 4], [3, 8, 1], [5, 8, 3], [6, 9, 3]]) == 5\nassert solution.findMinimumTime([[1, 2, 1], [2, 2, 1], [1, 4, 4], [2, 6, 4], [7, 7, 1], [6, 7, 1], [8, 9, 2], [7, 10, 1]]) == 8\nassert solution.findMinimumTime([[2, 3, 1], [8, 8, 1], [8, 10, 3], [1, 10, 3]]) == 4",
  "inefficient_solution": "class Solution:\n    def findMinimumTime(self, tasks: List[List[int]]) -> int:\n        tasks.sort(key=lambda x: x[1])\n        vis = [0] * 2001\n        ans = 0\n        for start, end, duration in tasks:\n            duration -= sum(vis[start : end + 1])\n            temp = []\n            for i in range(end, start - 1, -1):\n                temp.append((i, i, 1))\n                vis[i] = 1\n            for i in range(len(temp) - 1, -1, -1):\n                if duration > 0:\n                    duration -= 1\n                    ans += 1\n                else:\n                    break\n                vis[temp[i][0]] = 0\n                vis[temp[i][1]] = 0\n        return ans",
  "is_python": true
}