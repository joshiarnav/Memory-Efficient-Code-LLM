{
  "problem_idx": 2936,
  "task_name": "Number of Equal Numbers Blocks",
  "markdown_description": "\nYou are given a **0-indexed** array of integers, `nums`. The following property holds for `nums`:\n\n\n* All occurrences of a value are adjacent. In other words, if there are two indices `i < j` such that `nums[i] == nums[j]`, then for every index `k` that `i < k < j`, `nums[k] == nums[i]`.\n\n\nSince `nums` is a very large array, you are given an instance of the class `BigArray` which has the following functions:\n\n\n* `int at(long long index)`: Returns the value of `nums[i]`.\n* `void size()`: Returns `nums.length`.\n\n\nLet's partition the array into **maximal** blocks such that each block contains **equal values**. Return *the number of these blocks.*\n\n\n**Note** that if you want to test your solution using a custom test, behavior for tests with `nums.length > 10` is undefined.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,3,3,3,3]\n**Output:** 1\n**Explanation:** There is only one block here which is the whole array (because all numbers are equal) and that is: [3,3,3,3,3]. So the answer would be 1. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,3,9,9,9,2,10,10]\n**Output:** 5\n**Explanation:** There are 5 blocks here:\nBlock number 1: [1,1,1,3,9,9,9,2,10,10]\nBlock number 2: [1,1,1,3,9,9,9,2,10,10]\nBlock number 3: [1,1,1,3,9,9,9,2,10,10]\nBlock number 4: [1,1,1,3,9,9,9,2,10,10]\nBlock number 5: [1,1,1,3,9,9,9,2,10,10]\nSo the answer would be 5.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5,6,7]\n**Output:** 7\n**Explanation:** Since all numbers are distinct, there are 7 blocks here and each element representing one block. So the answer would be 7. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1015`\n* `1 <= nums[i] <= 109`\n* The input is generated such that all equal values are adjacent.\n* The sum of the elements of\u00a0`nums`\u00a0is at most\u00a0`1015`.\n\n\n",
  "canonical_solution": "# Definition for BigArray.\n# class BigArray:\n#     def at(self, index: long) -> int:\n#         pass\n#     def size(self) -> long:\n#         pass\nclass Solution(object):\n    def countBlocks(self, nums: Optional[\"BigArray\"]) -> int:\n        i, n = 0, nums.size()\n        ans = 0\n        while i < n:\n            ans += 1\n            x = nums.at(i)\n            if i + 1 < n and nums.at(i + 1) != x:\n                i += 1\n            else:\n                i += bisect_left(range(i, n), True, key=lambda j: nums.at(j) != x)\n        return ans\n",
  "test_case_generator": "\nfrom typing import List, Optional\nimport random\n\nclass BigArray:\n    def __init__(self, nums):\n        self.nums = nums\n\n    def at(self, index: int) -> int:\n        return self.nums[index]\n    \n    def size(self) -> int:\n        return len(self.nums)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = []\n    for _ in range(random.randint(1, 100)):\n        nums.append(random.randint(1, 10))\n    \n    big_array = BigArray(nums)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countBlocks(big_array)\n\n    return big_array, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        big_array, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countBlocks(big_array) == expected_result\n        print(f\"assert solution.countBlocks({big_array}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countBlocks({big_array}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 37\nassert solution.countBlocks(<__main__.BigArray object at 0x7f10711636d0>) == 60\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 10\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 16\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 33\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 20\nassert solution.countBlocks(<__main__.BigArray object at 0x7f10711636d0>) == 17\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 63\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 13\nassert solution.countBlocks(<__main__.BigArray object at 0x7f10711636d0>) == 78\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 33\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 25\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 75\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 19\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 14\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 86\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 37\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 34\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 55\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 42\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 30\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 21\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 61\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 21\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 21\nassert solution.countBlocks(<__main__.BigArray object at 0x7f10711636d0>) == 29\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 61\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 84\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 27\nassert solution.countBlocks(<__main__.BigArray object at 0x7f10711636d0>) == 23\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 52\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 6\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 1\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 86\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 37\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 16\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 43\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 38\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 19\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 55\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 17\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 40\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 45\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 27\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 25\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 25\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 5\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 3\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 38\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 44\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 40\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 22\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 65\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 60\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 51\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 16\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 68\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 78\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 13\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 16\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 43\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 18\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 35\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 89\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 28\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 17\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 12\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 32\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 52\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 73\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 1\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 32\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 8\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 13\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 27\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 83\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 23\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 50\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 17\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 61\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 87\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 1\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 59\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 46\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 9\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 51\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 82\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 34\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 32\nassert solution.countBlocks(<__main__.BigArray object at 0x7f10711636d0>) == 5\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 48\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 32\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163710>) == 3\nassert solution.countBlocks(<__main__.BigArray object at 0x7f10711636d0>) == 27\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 7\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 71\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163690>) == 57\nassert solution.countBlocks(<__main__.BigArray object at 0x7f10711636d0>) == 14\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163650>) == 66\nassert solution.countBlocks(<__main__.BigArray object at 0x7f1071163610>) == 10",
  "inefficient_solution": "class Solution(object):\n    def countBlocks(self, nums: Optional[\"BigArray\"]) -> int:\n        mem = {}\n        i, n = 0, nums.size()\n        ans = 0\n        while i < n:\n            ans += 1\n            x = nums.at(i)\n            temp = []\n            while i < n and nums.at(i) == x:\n                temp.append(x)\n                mem[x] = temp\n                i += 1\n            temp = mem[x]\n            if i < n and nums.at(i) != x:\n                i += 1\n            else:\n                i = i + bisect_left(range(i, n), True, key=lambda j: nums.at(j) != x)\n        return ans",
  "is_python": true
}