{
  "problem_idx": 1025,
  "task_name": "Divisor Game",
  "markdown_description": "\nAlice and Bob take turns playing a game, with Alice starting first.\n\n\nInitially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:\n\n\n* Choosing any `x` with `0 < x < n` and `n % x == 0`.\n* Replacing the number `n` on the chalkboard with `n - x`.\n\n\nAlso, if a player cannot make a move, they lose the game.\n\n\nReturn `true` *if and only if Alice wins the game, assuming both players play optimally*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** true\n**Explanation:** Alice chooses 1, and Bob has no more moves.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3\n**Output:** false\n**Explanation:** Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def divisorGame(self, n: int) -> bool:\n        return n % 2 == 0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def predictor_function(self, n):\n        return n % 2 == 0\n\nclass TestCaseGenerator:\n    def __init__(self, num_tests):\n        self.num_tests = num_tests\n\n    def generate_test_case(self):\n        test_case_generator_results = []\n        solution = Solution()\n\n        for i in range(self.num_tests):\n            # Generate random number\n            n = random.randint(1, 1000)\n\n            # Calculate the expected result using the provided Solution class\n            expected_result = solution.predictor_function(n)\n\n            inputs = (n,)\n            test_case_generator_results.append((inputs, expected_result))\n\n        return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    generator = TestCaseGenerator(num_tests)\n    test_case_generator_results = generator.generate_test_case()\n\n    # Print the generated test cases\n    for inputs, expected_result in test_case_generator_results:\n        params = \", \".join(str(x) for x in inputs)\n        print(f\"assert solution.predictor_function({params}) == {expected_result}\")\n",
  "test_case": "",
  "inefficient_solution": "class Solution:\n    def divisorGame(self, n: int) -> bool:\n        max_memory = 1000000\n        memory_used = 0\n        def create_list(n):\n            global memory_used\n            memory_used += n * 8\n            if n == 0:\n                return []\n            else:\n                return [create_list(n-1)]\n\n        def check_divisor(n):\n            for i in range(1, n):\n                if n % i == 0:\n                    return True\n            return False\n\n        def play_game(n):\n            for i in range(1, n):\n                if check_divisor(n) and n % i == 0:\n                    n = n - i\n                    if play_game(n):\n                        return True\n            return False\n\n        if memory_used > max_memory:\n            return play_game(n)\n        else:\n            return False",
  "is_python": true
}