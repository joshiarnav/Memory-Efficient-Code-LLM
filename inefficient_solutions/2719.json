{
  "problem_idx": 2719,
  "task_name": "Count of Integers",
  "markdown_description": "\nYou are given two numeric strings `num1` and `num2` and two integers `max_sum` and `min_sum`. We denote an integer `x` to be *good* if:\n\n\n* `num1 <= x <= num2`\n* `min_sum <= digit_sum(x) <= max_sum`.\n\n\nReturn *the number of good integers*. Since the answer may be large, return it modulo `109 + 7`.\n\n\nNote that `digit_sum(x)` denotes the sum of the digits of `x`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num1 = \"1\", num2 = \"12\", min_sum = 1, max_sum = 8\n**Output:** 11\n**Explanation:** There are 11 integers whose sum of digits lies between 1 and 8 are 1,2,3,4,5,6,7,8,10,11, and 12. Thus, we return 11.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num1 = \"1\", num2 = \"5\", min_sum = 1, max_sum = 5\n**Output:** 5\n**Explanation:** The 5 integers whose sum of digits lies between 1 and 5 are 1,2,3,4, and 5. Thus, we return 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num1 <= num2 <= 1022`\n* `1 <= min_sum <= max_sum <= 400`\n\n\n",
  "canonical_solution": "class Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n        @cache\n        def dfs(pos: int, s: int, limit: bool) -> int:\n            if pos >= len(num):\n                return 1 if min_sum <= s <= max_sum else 0\n            up = int(num[pos]) if limit else 9\n            return (\n                sum(dfs(pos + 1, s + i, limit and i == up) for i in range(up + 1)) % mod\n            )\n\n        mod = 10**9 + 7\n        num = num2\n        ans = dfs(0, 0, True)\n        dfs.cache_clear()\n        num = str(int(num1) - 1)\n        ans -= dfs(0, 0, True)\n        return ans % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n        @cache\n        def dfs(pos: int, s: int, limit: bool) -> int:\n            if pos >= len(num):\n                return 1 if min_sum <= s <= max_sum else 0\n            up = int(num[pos]) if limit else 9\n            return (\n                sum(dfs(pos + 1, s + i, limit and i == up) for i in range(up + 1)) % mod\n            )\n\n        mod = 10**9 + 7\n        num = num2\n        ans = dfs(0, 0, True)\n        dfs.cache_clear()\n        num = str(int(num1) - 1)\n        ans -= dfs(0, 0, True)\n        return ans % mod\n\ndef generate_test_case():\n    solution = Solution()\n    \n    test_case_generator_results = []\n    for i in range(100):\n        max_sum = random.randint(1, 400)\n        min_sum = random.randint(1, max_sum)\n        num1 = str(random.randint(1, 10 ** 22))\n        num2 = str(random.randint(int(num1)+1, 10 ** 22))\n\n        expected_result = solution.count(num1, num2, min_sum, max_sum)\n\n        test_case_generator_results.append(f\"assert solution.count(\\\"{num1}\\\", \\\"{num2}\\\", {min_sum}, {max_sum}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    test_case_generator_results = generate_test_case()\n",
  "test_case": "assert solution.count(\"7352718068601417980677\", \"9894969716107804930696\", 76, 155) == 581560815\nassert solution.count(\"6589194630936560858656\", \"7464361958924942960204\", 45, 124) == 383236188\nassert solution.count(\"2383800020884861986319\", \"5101513728895933167673\", 33, 139) == 434822773\nassert solution.count(\"5969985874809294731518\", \"6789440511844677930469\", 37, 146) == 409933704\nassert solution.count(\"4583078291837940365289\", \"5388292111052770740365\", 4, 27) == 496583083\nassert solution.count(\"4212517779800972732862\", \"4597563697146869727876\", 106, 135) == 324549260\nassert solution.count(\"6626610362598054792889\", \"7057085810288146260630\", 75, 317) == 935065650\nassert solution.count(\"3942993343990818179015\", \"5578569987321714575350\", 3, 5) == 23\nassert solution.count(\"3914134957706050376358\", \"5030772458037122507219\", 193, 397) == 1\nassert solution.count(\"8974350784832297104002\", \"9719670892751314863905\", 194, 312) == 1792\nassert solution.count(\"1167798453495380054970\", \"8083905835244933516349\", 131, 308) == 374300017\nassert solution.count(\"4987892166028083533088\", \"6316807643888076361586\", 4, 26) == 667632470\nassert solution.count(\"1666902549910778605525\", \"6139974348970193779211\", 6, 250) == 912797158\nassert solution.count(\"7708190509466793517455\", \"8230668075266339862068\", 235, 387) == 0\nassert solution.count(\"1253600138611609058972\", \"2250449509912426160918\", 6, 26) == 882571501\nassert solution.count(\"229235079563391853015\", \"9515136039101396772965\", 216, 273) == 0\nassert solution.count(\"6370224450732561164273\", \"7772679705826793575651\", 24, 181) == 186305794\nassert solution.count(\"3552170833062346163763\", \"8127654748485989830956\", 46, 399) == 464802692\nassert solution.count(\"8880405277242223341097\", \"9798327075799830053171\", 280, 369) == 0\nassert solution.count(\"9015817467200522112431\", \"9557295033885979402875\", 32, 149) == 763403203\nassert solution.count(\"4218923176345402720644\", \"5314118496639698517221\", 5, 94) == 86383771\nassert solution.count(\"7136004847162787839477\", \"8882138433465762820153\", 11, 130) == 940304260\nassert solution.count(\"5581791082278024780282\", \"6422712753365500210277\", 108, 182) == 493988047\nassert solution.count(\"6197483824795743012248\", \"9313116155533309967539\", 237, 364) == 0\nassert solution.count(\"1597143717624382116220\", \"5260162426737673180964\", 177, 251) == 689492512\nassert solution.count(\"5024948978000928104689\", \"5248743745173770486283\", 11, 277) == 279009725\nassert solution.count(\"859352143399940085519\", \"6352763551343977822969\", 66, 79) == 841255357\nassert solution.count(\"7704242391527475294398\", \"8945270817435492670002\", 5, 26) == 469077717\nassert solution.count(\"6004078340057062018621\", \"7589051489367610864611\", 171, 265) == 463855698\nassert solution.count(\"9955124973774879405942\", \"9975255199769106131725\", 59, 98) == 905071718\nassert solution.count(\"2204075817032346742091\", \"2462997364078014935308\", 34, 220) == 482081267\nassert solution.count(\"3264314376289857206629\", \"9603166868475533940357\", 43, 214) == 8912417\nassert solution.count(\"5900161052364698766657\", \"8712002565365055760549\", 48, 68) == 23862159\nassert solution.count(\"7611607170845323045981\", \"8941064623704855787234\", 40, 90) == 883924937\nassert solution.count(\"7674325080089672459889\", \"9038672538735472001446\", 22, 81) == 263331559\nassert solution.count(\"1735082862497055107435\", \"4472521225704201684097\", 173, 335) == 186788550\nassert solution.count(\"3094906446484800297515\", \"9149149234959730265647\", 38, 69) == 494895208\nassert solution.count(\"6536104304838796837409\", \"8210851350736265377693\", 291, 363) == 0\nassert solution.count(\"6682841208728005168585\", \"7754630997802174886014\", 170, 278) == 435818799\nassert solution.count(\"3558585659670458732858\", \"8351865788894647848208\", 180, 282) == 80739045\nassert solution.count(\"8807621850789520204797\", \"9006267541136902753265\", 86, 218) == 644947221\nassert solution.count(\"3773631499844024372110\", \"3827333924812893132551\", 47, 53) == 523843618\nassert solution.count(\"9395950831829698086957\", \"9700635470865169714314\", 6, 136) == 967850132\nassert solution.count(\"9699532064184749247856\", \"9770184602487361903149\", 59, 324) == 262663827\nassert solution.count(\"4073938168796824791432\", \"8096438945385608536020\", 162, 190) == 238117145\nassert solution.count(\"9231242041128903496965\", \"9582473851284230495237\", 218, 377) == 0\nassert solution.count(\"5154231325750539994418\", \"7916412457339865699873\", 37, 169) == 366429433\nassert solution.count(\"2630110926406563891666\", \"9137052751148775937974\", 32, 80) == 402620221\nassert solution.count(\"4826243327184851187082\", \"5470813530406663045572\", 31, 243) == 578565337\nassert solution.count(\"7306991380434308554630\", \"8684899720510078896089\", 108, 259) == 534935120\nassert solution.count(\"1048365566070193576455\", \"9824296784449463124012\", 62, 345) == 833001711\nassert solution.count(\"6951888150382497507975\", \"7790984380841847562111\", 112, 144) == 617898791\nassert solution.count(\"4126387089348871529577\", \"9444769746002811990944\", 107, 160) == 853494472\nassert solution.count(\"2727645439889681144794\", \"6559720243435989103577\", 22, 34) == 59307886\nassert solution.count(\"611777321164004114624\", \"5828081301008177740085\", 135, 344) == 878628546\nassert solution.count(\"8324429117746059414547\", \"9633182512056321058973\", 121, 380) == 489950864\nassert solution.count(\"8867525397252283765510\", \"9155198764637772991418\", 38, 92) == 500072420\nassert solution.count(\"2083251809953403684638\", \"7027697857534996757009\", 104, 229) == 839211606\nassert solution.count(\"7590885021641303890784\", \"8551321638010426510195\", 239, 240) == 0\nassert solution.count(\"3455180885442694203607\", \"4771607856969112132878\", 65, 259) == 15513387\nassert solution.count(\"128876490498986058055\", \"5998609611358070971546\", 8, 37) == 343209840\nassert solution.count(\"9620484393264026786025\", \"9656783332181350863977\", 3, 5) == 0\nassert solution.count(\"3380457650642320394670\", \"7676864932014304085793\", 5, 5) == 22\nassert solution.count(\"6859746041324788335870\", \"8778979638077052522431\", 11, 86) == 891199731\nassert solution.count(\"8512531663535817923825\", \"9702031511925185766300\", 3, 18) == 14321547\nassert solution.count(\"9477534849143948204146\", \"9562466718804355311329\", 29, 135) == 829386232\nassert solution.count(\"9578843777165055971423\", \"9615225621579696845399\", 76, 81) == 888448633\nassert solution.count(\"6400687525547271608507\", \"6967763367562448383931\", 149, 197) == 692546036\nassert solution.count(\"129337216023978011174\", \"4276476400447577374199\", 1, 167) == 59900259\nassert solution.count(\"1170499270317264062353\", \"1547486896789983179709\", 145, 366) == 664433509\nassert solution.count(\"5358842284017263833188\", \"5796580759999652760498\", 14, 33) == 537635641\nassert solution.count(\"8621647640282668380364\", \"9895153082673206154070\", 96, 218) == 748406264\nassert solution.count(\"1111717166099603906448\", \"2408625613748338340130\", 159, 204) == 5282978\nassert solution.count(\"102560498778627661780\", \"9589469060469514886373\", 49, 95) == 238881072\nassert solution.count(\"8320101519803483535328\", \"8780813297292217887018\", 18, 323) == 751862403\nassert solution.count(\"1471541673689362948561\", \"3508787867811742390850\", 88, 320) == 557946682\nassert solution.count(\"4514864375972095905176\", \"9101517638939109155600\", 43, 119) == 483817013\nassert solution.count(\"9515105775489933308075\", \"9592222092129032414261\", 107, 233) == 706635026\nassert solution.count(\"9280410327643728169693\", \"9406430557354223487032\", 120, 145) == 330941782\nassert solution.count(\"6694387921585510526434\", \"6894169421351122934360\", 62, 364) == 988034812\nassert solution.count(\"347131966395533054760\", \"9695408494185635395222\", 17, 48) == 58182891\nassert solution.count(\"1853744947568850940091\", \"6682356487881223819918\", 86, 96) == 543668833\nassert solution.count(\"2793160147498008211845\", \"8086283591701200795108\", 8, 302) == 328718257\nassert solution.count(\"2141471313689523002375\", \"3589273436017440699677\", 8, 15) == 484588681\nassert solution.count(\"6356350651650479778847\", \"9018803237892154503055\", 25, 88) == 599753523\nassert solution.count(\"8354662796821598560000\", \"8956808454266039330464\", 15, 335) == 421197609\nassert solution.count(\"3526634952601964904395\", \"5029719939133880822658\", 168, 332) == 690798774\nassert solution.count(\"5610156690481045316575\", \"9730350126669646543982\", 52, 55) == 339079455\nassert solution.count(\"3468281494028475444072\", \"4009169798922265489243\", 27, 56) == 252735967\nassert solution.count(\"4959396763451944673290\", \"5349479219394207959954\", 1, 32) == 5897001\nassert solution.count(\"8290023793365692571173\", \"9864291741091320340236\", 244, 261) == 0\nassert solution.count(\"2927352688158397584123\", \"6495816456823181038740\", 51, 70) == 945160736\nassert solution.count(\"8206988067324336402418\", \"8915644902715981473344\", 54, 58) == 648655289\nassert solution.count(\"4268808044007454613046\", \"9253340009082193681659\", 2, 5) == 1\nassert solution.count(\"2567159965179520000453\", \"8475232470681584968189\", 26, 191) == 648781002\nassert solution.count(\"8003517030505805927351\", \"8775306295917332074358\", 50, 138) == 683222058\nassert solution.count(\"9805167792223107827885\", \"9977283522390925917546\", 271, 321) == 0\nassert solution.count(\"6089381739625548684309\", \"8203792283405145091408\", 219, 226) == 0\nassert solution.count(\"7921094504937881615415\", \"7980370015325596647947\", 28, 28) == 9547878\nassert solution.count(\"7057167170248674546536\", \"9525792922519910027764\", 329, 373) == 0",
  "inefficient_solution": "class Solution:\n    def count(self, num1: str, num2: str, min_sum: int, max_sum: int) -> int:\n        mod = 10**9 + 7\n        num = num2\n        dp = {}\n        ans = 0\n        for i in range(1 << len(num)):\n            s = sum(int(num[j]) for j in range(len(num)) if (i >> j) & 1)\n            limit = all((i >> j) & 1 for j in range(len(num)))\n            if s < min_sum or s > max_sum: continue\n            ans = (ans + 1) % mod\n            for k in range(len(num)):\n                if not (i >> k) & 1:\n                    for j in range(10):\n                        dp[(i | (1 << k), s + j, limit and j == int(num[k]))] = 1\n        for i in range(1 << len(num1)):\n            s = sum(int(num1[j]) for j in range(len(num1)) if (i >> j) & 1)\n            limit = all((i >> j) & 1 for j in range(len(num1)))\n            if s < min_sum or s > max_sum: continue\n            ans = (ans + 1) % mod\n            for k in range(len(num1)):\n                if not (i >> k) & 1:\n                    for j in range(10):\n                        dp[(i | (1 << k), s + j, limit and j == int(num1[k]))] = 1\n        return ans",
  "is_python": true
}