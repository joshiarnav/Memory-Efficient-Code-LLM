{
  "problem_idx": 2552,
  "task_name": "Count Increasing Quadruplets",
  "markdown_description": "\nGiven a **0-indexed** integer array `nums` of size `n` containing all numbers from `1` to `n`, return *the number of increasing quadruplets*.\n\n\nA quadruplet `(i, j, k, l)` is increasing if:\n\n\n* `0 <= i < j < k < l < n`, and\n* `nums[i] < nums[k] < nums[j] < nums[l]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,4,5]\n**Output:** 2\n**Explanation:** \n- When i = 0, j = 1, k = 2, and l = 3, nums[i] < nums[k] < nums[j] < nums[l].\n- When i = 0, j = 1, k = 2, and l = 4, nums[i] < nums[k] < nums[j] < nums[l]. \nThere are no other quadruplets, so we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 0\n**Explanation:** There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] < nums[k], we return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `4 <= nums.length <= 4000`\n* `1 <= nums[i] <= nums.length`\n* All the integers of `nums` are **unique**. `nums` is a permutation.\n\n\n",
  "canonical_solution": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[0] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        for j in range(1, n - 2):\n            cnt = sum(nums[l] > nums[j] for l in range(j + 1, n))\n            for k in range(j + 1, n - 1):\n                if nums[j] > nums[k]:\n                    f[j][k] = cnt\n                else:\n                    cnt -= 1\n        for k in range(2, n - 1):\n            cnt = sum(nums[i] < nums[k] for i in range(k))\n            for j in range(k - 1, 0, -1):\n                if nums[j] > nums[k]:\n                    g[j][k] = cnt\n                else:\n                    cnt -= 1\n        return sum(\n            f[j][k] * g[j][k] for j in range(1, n - 2) for k in range(j + 1, n - 1)\n        )\n",
  "test_case_generator": "\n\nimport random\nfrom typing import List\n\nclass Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[0] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        for j in range(1, n - 2):\n            cnt = sum(nums[l] > nums[j] for l in range(j + 1, n))\n            for k in range(j + 1, n - 1):\n                if nums[j] > nums[k]:\n                    f[j][k] = cnt\n                else:\n                    cnt -= 1\n        for k in range(2, n - 1):\n            cnt = sum(nums[i] < nums[k] for i in range(k))\n            for j in range(k - 1, 0, -1):\n                if nums[j] > nums[k]:\n                    g[j][k] = cnt\n                else:\n                    cnt -= 1\n        return sum(\n            f[j][k] * g[j][k] for j in range(1, n - 2) for k in range(j + 1, n - 1)\n        )\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 1001), random.randint(4, 101))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countQuadruplets(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countQuadruplets(nums) == expected_result\n        print(f\"assert solution.countQuadruplets({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countQuadruplets({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countQuadruplets([532, 932, 110, 172, 608, 888, 961, 215, 786, 317, 477, 623, 224, 232, 383, 956, 415, 531, 225, 917, 63, 715, 74, 565, 724, 97, 126, 182, 131, 597, 628, 266, 478, 391, 725, 313, 579, 958, 446, 686, 689, 22, 272, 511, 364, 143, 496, 152, 738, 844, 273]) == 8836\nassert solution.countQuadruplets([139, 632, 229, 778, 620, 868, 966, 647, 716, 551, 653, 689, 287, 875, 256, 656, 94, 159, 925, 930, 700, 453, 172, 985, 263, 687, 858, 368, 701, 492, 805, 478, 353, 416, 481, 529, 782, 911, 37, 106, 289, 376, 599, 501, 7, 374, 593, 49, 540, 70, 970, 525, 625, 611, 651, 371, 979, 188, 642, 610, 337, 846, 783, 623, 889, 493, 412, 495, 590, 500, 755, 724, 298, 200, 933, 176, 88, 830, 183, 548, 752, 245, 190, 573, 408, 969, 690, 221, 890, 662, 114, 791, 861, 734, 119, 458, 325, 680, 74]) == 137308\nassert solution.countQuadruplets([768, 379, 364, 298, 891, 689, 747, 590, 3, 987, 31, 577, 671, 879, 151, 25, 994, 594, 243, 133, 344, 253, 200, 730, 761, 411, 330, 609, 914, 744, 660, 939, 928, 675, 30, 608, 128, 140, 61, 829, 741, 189, 580, 538, 535, 317, 755, 691, 967, 480, 187, 731, 287, 117, 103, 738, 437, 196, 998, 121, 62, 235, 746, 384, 904, 217, 592, 925, 28, 487, 314, 908, 540, 169, 853, 954, 381, 674, 872, 701, 389, 912, 230, 788, 35, 924, 405]) == 105422\nassert solution.countQuadruplets([9, 312, 658, 714, 182, 59, 735, 126, 319, 187, 21, 195, 71, 999, 418, 545, 135, 607, 436, 290, 831, 462, 285, 632, 722, 940, 732, 289, 114, 576, 490, 407, 266, 178, 230, 866, 765, 414, 985, 201, 373, 743, 133, 824, 84, 806, 86, 727, 400, 240, 449, 818, 3, 321, 827, 869, 291, 793, 220, 592, 68]) == 32568\nassert solution.countQuadruplets([681, 290, 221, 576, 819, 242, 738, 176, 173, 862, 994, 892, 717, 60, 766, 333, 995, 591, 2, 882]) == 219\nassert solution.countQuadruplets([381, 991, 804, 894, 936, 524, 422, 48, 870, 778, 267, 830, 503, 586, 90, 190, 608, 86]) == 19\nassert solution.countQuadruplets([765, 961, 895, 34, 74, 751, 494, 270, 544, 453, 553, 46, 73, 92, 571, 201, 268, 631, 204, 973, 638, 632, 141, 104, 778, 11, 38, 224, 699, 972, 580, 427, 161, 490, 539, 342, 79, 641, 835, 978, 491, 150, 239, 824, 486, 156, 884, 364, 946, 514, 470, 261, 317, 315, 449, 556, 535, 428, 367, 873, 649, 659, 313, 96, 254, 98, 191, 923, 214, 941, 5, 206, 711, 379, 759, 503, 120, 119, 558, 51, 417, 440, 702, 957, 280, 586, 794, 517, 398, 212, 969, 359, 194, 215, 731, 185, 338]) == 158734\nassert solution.countQuadruplets([506, 452, 558, 670, 955, 643, 317, 457, 635, 413, 289, 223, 68, 828, 454, 401, 980, 166, 371, 860, 531, 689, 226, 877, 476, 512, 890, 882, 23, 470, 388, 284, 170, 217, 906, 735, 508, 88, 474, 495, 127, 525, 596, 645, 333, 466, 715, 563, 895, 855, 7, 507, 763, 862, 159, 346, 351, 321, 769, 396, 697, 649, 600]) == 19610\nassert solution.countQuadruplets([784, 804, 466, 464, 275, 760, 17, 600, 363, 619, 255, 254, 112, 778, 160, 399, 985, 427, 209, 337, 638, 417, 624, 143, 305, 888, 388, 497, 200, 350, 126, 66, 709, 406, 800, 931, 42, 313, 939, 868, 124, 154, 338, 793]) == 5183\nassert solution.countQuadruplets([829, 2, 305, 644, 877, 689, 252, 914, 743, 44, 641, 315, 232, 106, 336, 435, 300, 1000, 838, 719, 271, 42, 975, 722, 834, 446, 841, 452, 16, 485, 980, 408, 235, 438, 548, 531, 319, 608, 202, 598, 402, 192, 258, 979, 461, 904, 470]) == 8067\nassert solution.countQuadruplets([922, 23, 238, 122, 917, 726, 562, 649, 224, 386, 760, 753, 257, 689, 285, 965, 779, 104, 156, 447, 579, 949, 411, 762, 907, 773, 226, 417, 612, 166, 523, 207, 644, 910, 755, 157, 507, 715, 645]) == 3905\nassert solution.countQuadruplets([189, 86, 783, 537, 615, 651, 618, 247, 562, 470, 878, 726, 566, 605, 863, 888, 947, 285, 186, 54, 837, 119, 487, 699, 668, 560, 841, 707, 722, 754, 326, 304, 409, 834, 187, 660, 861, 564, 858, 7, 260, 968, 853, 874, 277, 113, 752, 619, 65]) == 10428\nassert solution.countQuadruplets([223, 793, 525, 344, 293, 654, 931, 203, 854, 484, 193, 141, 383, 888, 815, 750, 897, 942, 774, 275, 267, 205, 399, 60, 820, 665, 817, 118, 646, 900, 786, 254, 716, 147, 228, 863, 940, 782, 403, 257, 2, 605, 996, 821, 5, 415, 707, 476, 126, 277, 540, 184, 445, 701, 577, 455, 739, 869, 300, 834, 453, 198, 757, 717, 635, 206, 896, 16, 825, 225, 749, 237, 797, 672, 128, 41, 74, 26, 308, 258, 651, 844, 822, 317]) == 61616\nassert solution.countQuadruplets([567, 651, 160, 148, 236, 277, 214, 841, 900, 359, 997, 186, 508]) == 38\nassert solution.countQuadruplets([41, 884, 281, 137, 81, 725, 986, 973, 799, 815, 337, 928, 439, 87, 761, 395, 40, 864, 718, 341, 800, 1000, 71, 980, 682, 470, 570, 464, 169, 312, 966, 532, 547, 415, 806, 85, 134, 792, 223, 866, 236, 391, 23, 737, 683, 766, 627, 142, 118, 141, 924, 564, 632, 522, 689, 11, 932, 927, 229, 805, 191, 239, 909, 19, 750, 208, 802, 419, 387, 882, 327, 551, 198, 777, 692, 465, 443, 406, 835, 22, 445, 715, 837, 172, 313, 654, 947, 813, 263, 616, 436, 544, 905, 242, 426, 795, 216, 28, 219, 894]) == 162439\nassert solution.countQuadruplets([964, 69, 295, 57, 636, 430, 117, 441, 703, 870, 129, 751, 533, 738, 43, 626, 892, 637, 894, 467, 833, 298, 418, 309, 461, 861, 604, 286, 878, 995, 432, 297, 474, 545, 814, 926]) == 4900\nassert solution.countQuadruplets([483, 828, 935, 331, 126, 428, 848, 882, 9, 119, 920, 257, 213, 266, 113, 977, 123, 772, 384, 424, 352, 185, 57, 878, 379, 72, 161, 476, 849, 170, 622, 761, 930, 608, 97, 376, 679, 73, 338, 896, 482, 941, 130, 956, 891, 598]) == 8441\nassert solution.countQuadruplets([85, 814, 850, 671, 9, 309, 148, 931, 939, 753, 941, 617, 175, 452, 204, 379, 313, 892, 392, 207, 981, 442, 152, 668, 314, 213, 798, 921, 38, 629, 949, 456, 635, 371, 352, 297, 611, 935, 847, 927, 377, 436, 503, 809, 681, 51, 509, 441, 568, 423, 951, 960, 875, 414, 336, 258]) == 19658\nassert solution.countQuadruplets([769, 832, 465, 221, 749, 84, 232, 46, 53, 564, 467, 448, 8, 361, 955, 782]) == 76\nassert solution.countQuadruplets([779, 94, 232, 575, 296, 176, 638, 679, 481, 691, 242, 767, 707, 610, 26, 685, 997, 291, 899, 164, 576, 595, 806, 716, 733, 904, 261, 861, 893, 281, 436, 860, 827, 598, 622, 560, 169, 406, 513, 8, 547, 626, 188, 285, 62, 612, 68, 108, 546, 13, 929, 702, 244, 220, 955, 81, 116, 528, 695, 253, 848, 643, 258, 91, 941]) == 25302\nassert solution.countQuadruplets([749, 984, 970, 188, 206, 705, 927, 458, 645, 627, 349, 649, 667, 5, 968, 322, 564, 584, 37, 598, 653, 902, 930, 583, 617, 383, 924, 500, 854, 120, 352, 165, 834, 538, 304, 192, 321, 456, 131, 680, 307, 782, 281, 419]) == 2900\nassert solution.countQuadruplets([215, 307, 660, 300, 601, 791, 781, 448, 540, 987, 773, 776, 205, 853, 724, 760, 298, 101, 953, 786, 826, 384, 875, 50, 227, 539, 641, 278, 754, 52, 949, 592, 677, 59, 451, 136, 214, 656, 940, 402, 152, 521, 579, 25, 339, 841, 499, 173, 2, 140, 676, 285, 162, 661, 144, 808]) == 8074\nassert solution.countQuadruplets([580, 180, 516, 592, 80, 214, 325, 804, 509, 802, 828, 815, 62, 273, 164, 975, 407, 870, 972, 296, 362, 74, 417, 495, 301, 346, 365, 919, 6, 858, 720, 13, 270, 268, 729, 856, 354, 911, 87, 244, 151, 199, 266, 94, 561, 501, 652, 668, 757, 48, 994, 264, 510, 825, 677, 970, 973, 901, 805, 91, 519, 70, 170, 928, 740, 434]) == 34014\nassert solution.countQuadruplets([130, 220, 190, 731, 654, 806, 271, 133, 705, 570, 395, 519, 599, 594, 504, 497, 441, 486, 277, 1000, 122, 215, 893, 676, 756, 4, 67, 797, 264, 245, 569, 505, 546, 427, 243, 491, 510, 187, 352]) == 2852\nassert solution.countQuadruplets([213, 506, 248, 290, 621, 871, 761, 477, 439, 334, 199, 285, 405, 507, 751, 106, 660, 102, 449, 567, 299, 459, 911, 542, 111, 637, 964, 672, 166, 348, 851, 369, 628, 591, 258, 953, 671, 462, 869, 820, 437, 845, 604, 44, 540, 489, 864, 340, 781, 491, 191, 774, 490, 109, 808, 971, 884, 930, 697, 478, 790, 717, 515, 866, 337, 62, 149, 443, 718, 709, 93, 10, 939, 43, 83, 764, 441, 388, 959, 380]) == 76851\nassert solution.countQuadruplets([985, 288, 877, 530, 143, 315, 110, 562, 458, 226, 787, 619, 991, 835, 766, 221, 945, 382, 684, 474, 318, 59, 378, 434, 622, 194, 784, 678, 852, 891, 456, 896, 341, 579, 102, 285, 297, 183, 305, 446, 634, 4, 866, 187, 652, 821, 662, 894, 816, 363, 976, 600, 988, 882, 843, 60, 223, 123, 122, 291, 432, 83, 79, 148, 222, 644]) == 23149\nassert solution.countQuadruplets([107, 309, 39, 392, 744, 905, 582, 651, 59, 278, 276, 800, 370, 362, 923, 574, 79, 321, 298, 872, 430, 316, 252, 886, 743, 412, 966, 702, 358, 657, 349, 204, 14, 218, 941, 411, 891, 277, 557, 38, 833, 136, 185, 694, 81, 586, 125, 21, 163, 329, 300, 417, 781, 116, 37, 875, 335, 254, 351, 863, 708, 34, 592, 157, 894, 661, 593, 259, 247]) == 32912\nassert solution.countQuadruplets([483, 815, 985, 112, 234, 189, 512, 478, 383, 226, 361, 134, 142, 328, 324, 205, 447, 193, 321, 257, 507, 532, 552, 886, 731, 61, 979, 288, 937, 332, 753, 419, 893, 665, 603, 750, 411, 864, 34, 78, 648, 310, 987, 613, 103, 737, 813, 165, 859, 391, 530, 427, 607, 690, 821, 950, 844, 139, 894, 961, 187, 877, 836, 777, 274, 434, 130, 45, 709, 212, 687, 457, 814, 672, 741, 2, 249, 682, 916, 55, 839, 491, 461, 780]) == 86952\nassert solution.countQuadruplets([28, 309, 314, 603, 168, 608, 814, 193, 803, 824, 774, 71, 515, 995, 482, 427]) == 134\nassert solution.countQuadruplets([976, 414, 381, 483, 981, 23, 552, 914, 427, 349, 311, 893, 175, 169, 742, 778]) == 48\nassert solution.countQuadruplets([513, 789, 739, 401, 781, 641, 501, 161, 82, 292, 58, 600, 423, 331, 751, 978, 872, 157, 949, 823, 38, 403, 235, 119, 997, 255, 21, 898, 396, 946, 683, 41, 573, 373, 925, 356, 188, 324, 519, 497, 174, 394, 332, 16, 453, 467, 364, 206, 718, 802, 522, 296, 921, 694, 34, 623, 166, 240, 678, 610, 796, 899, 127, 810]) == 24046\nassert solution.countQuadruplets([697, 466, 299, 630, 617, 95, 283, 281, 592, 797, 279, 65, 533, 144, 119, 635, 64, 677, 397, 331, 671, 166, 903, 600, 819, 932, 253, 371, 622, 924, 549, 693, 482, 806, 609, 381, 35, 750, 957, 786, 46, 949, 873, 755, 570, 20]) == 9390\nassert solution.countQuadruplets([173, 852, 831, 217, 897, 385, 157, 577, 349, 148, 709, 687, 669, 697, 479, 387, 94, 966, 696, 673, 703, 989, 511, 819, 876, 210, 440, 324, 23, 773, 287, 574, 992, 382, 894, 310, 177, 545, 30, 708, 248, 767, 291, 446, 886, 508, 828, 667, 855, 756, 619, 150, 867, 603, 958, 676, 968, 772, 544, 534, 650, 283, 396, 331, 442, 789, 202, 124, 892, 144, 192, 882, 835, 964, 183, 181, 84, 759, 145, 224, 127, 313, 424, 873, 692, 305, 707, 564, 705, 274, 562, 586, 911, 932, 368]) == 133524\nassert solution.countQuadruplets([598, 104, 567, 219, 297, 859, 192, 136, 449, 597, 483, 680, 865, 512, 467, 560, 544, 311, 718, 974, 480, 777, 158, 362, 161, 191, 994, 477]) == 1223\nassert solution.countQuadruplets([958, 708, 334, 75, 358, 964, 621, 213, 56, 492, 325, 636, 305, 734, 909, 894, 462, 522, 541, 738, 381, 183, 347, 73, 749, 977, 448, 86, 892, 207, 791, 248, 418, 466, 68, 103, 157, 666, 663, 739, 952, 490, 755, 63, 165, 102, 556, 137, 44, 572]) == 6718\nassert solution.countQuadruplets([1000, 111, 251, 621, 820, 970, 516]) == 0\nassert solution.countQuadruplets([168, 970, 246, 361, 775, 649, 215, 740, 792, 452, 774, 197, 175, 117, 511, 233, 519, 618, 61, 430, 795, 966, 992, 341, 856, 52, 1, 700, 557, 276, 34, 913, 583, 920, 252, 338]) == 2136\nassert solution.countQuadruplets([892, 54, 43, 10, 949, 837, 147, 471, 796, 696, 734, 102, 659, 291, 757, 185, 207, 354, 443, 205, 749, 68, 386, 542, 18, 943, 759, 3, 700, 399, 28, 320, 743, 6, 567, 510, 169, 329, 381, 377, 109, 989, 83, 752, 286, 104, 603]) == 7325\nassert solution.countQuadruplets([589, 645, 550, 263, 713, 341, 506, 732, 90, 688, 449, 879, 387, 735, 695, 69, 476, 548, 765, 491, 586, 157, 697, 65, 690, 290, 527, 746, 332, 78, 268, 542, 715, 632, 357, 670, 489, 40, 873, 257, 229, 228, 337, 569, 24, 9, 596, 473, 935, 792, 28, 982, 899, 760, 431, 565, 41, 492, 278, 271, 429, 250, 208, 487, 59, 651, 148, 243, 836, 192, 474, 179, 991, 794, 862, 176, 547, 145, 314, 773, 108, 105, 479, 557, 96, 259, 512, 943, 810, 385, 789, 93, 669, 274, 423, 892, 776, 424, 668]) == 140540\nassert solution.countQuadruplets([374, 670, 226, 826, 395, 791, 196, 271, 714, 794, 405, 766, 471, 739, 235, 510, 350, 432, 988, 567, 459, 10, 866, 86, 521, 716, 647, 45, 623, 885, 355, 448, 134, 429]) == 1441\nassert solution.countQuadruplets([470, 559, 271, 890, 716, 64, 811, 748, 506, 327, 805, 396, 548, 483, 58, 945, 287, 223, 531, 546, 613, 872, 422, 367, 198, 769, 967, 355, 374, 25, 969, 465, 187, 262, 179, 2, 16, 83, 728, 54, 21, 765, 389, 617, 296, 37, 357, 142, 359, 135, 833, 979, 663, 487, 322, 851, 147, 558, 999, 794, 670, 67, 668, 168, 939, 96, 662, 164, 200, 432, 859, 92, 143]) == 31345\nassert solution.countQuadruplets([135, 263, 367, 558, 796, 422, 804, 478, 842, 624, 277, 19, 877, 594, 127, 368, 461, 598, 823, 146, 510, 168, 739, 727, 59, 746, 803, 211, 645, 346, 719, 7, 589, 523]) == 1457\nassert solution.countQuadruplets([139, 418, 610, 757, 905, 428, 963, 703, 434, 912, 729, 111, 686, 646, 559, 682, 142]) == 55\nassert solution.countQuadruplets([448, 17, 109, 565, 462, 370, 274, 336, 761, 656, 862, 971, 575, 471, 933, 79, 108, 510, 316, 530, 945, 999, 567, 495, 874, 364, 649, 797, 461, 603, 426, 524, 740, 679, 486, 555, 691, 240, 782, 953, 769, 441, 866, 415, 396, 491, 186, 717, 728, 254, 275, 447, 991, 793, 556, 232, 155, 887, 878, 3, 778, 64, 571, 520, 982, 608, 338, 749, 954, 474, 435, 721, 612]) == 60132\nassert solution.countQuadruplets([294, 970, 139, 891, 634, 336, 910, 352, 216, 47, 256, 934, 304, 491, 293, 382, 563, 137, 277, 773, 517, 533, 61, 477, 578, 919, 810, 432, 742, 151, 53, 721, 535, 918, 883, 772, 245, 421, 798, 577, 868, 260, 416, 767, 123, 788, 126, 71, 984, 409, 497, 154, 830, 261, 837, 368, 591, 271, 528, 290, 621, 790, 307, 231, 727, 793, 568, 44, 524, 172, 676, 782, 183, 129, 791, 849, 840, 239, 845, 839, 255, 758, 847, 726, 601, 670, 620, 358, 423, 733, 826, 156, 399, 715, 549, 771, 504, 90, 614]) == 154941\nassert solution.countQuadruplets([914, 163, 772, 455, 315, 377, 463, 654, 680, 66, 790, 470, 415, 880, 938, 927, 990, 238, 447, 624, 653, 804, 265, 129, 21, 982, 404, 999, 806, 180, 352, 359, 817, 43, 957, 460, 998, 706, 228, 329, 949, 68, 842, 735, 73, 144, 381, 630, 633, 57, 538, 285, 583, 402, 814, 840, 307, 276, 551, 954, 461, 676, 262, 644, 686, 346, 528, 351, 665, 788, 915, 1, 492, 342, 444, 731, 319, 751, 441, 820, 963, 104, 678, 627, 330, 496, 897, 569, 666, 109, 101, 498, 122, 231, 64, 599]) == 97831\nassert solution.countQuadruplets([681, 976, 995, 471, 544, 642, 264, 334, 164, 527, 166, 343, 851, 672, 173, 433, 941, 711, 648, 208, 286, 984, 396, 829, 301, 90, 444, 586, 435, 375, 540, 970, 186, 216, 309, 570, 347, 944, 258, 194, 389, 401, 362, 895, 664, 891, 975, 428, 657, 918, 87, 516, 568, 349, 263, 658, 756, 731, 818, 589, 913, 94, 499, 849]) == 28078\nassert solution.countQuadruplets([57, 913, 747, 762, 541, 832, 410, 851, 379, 559, 353, 827, 418, 693, 605, 679, 134, 86, 593]) == 88\nassert solution.countQuadruplets([53, 32, 935, 302, 664, 601, 467, 941, 191, 111, 182]) == 17\nassert solution.countQuadruplets([499, 456, 402, 743, 451, 292, 952, 199, 220, 551, 387, 40, 657, 912, 953, 455, 765, 884, 674, 866, 480, 261, 438, 87, 33, 773, 650, 444, 178, 273, 320, 400, 724, 153, 550, 471, 197, 6]) == 848\nassert solution.countQuadruplets([93, 673, 639, 862, 941, 678, 854, 918, 740, 987, 135, 46, 925]) == 68\nassert solution.countQuadruplets([253, 554, 995, 654, 849, 3, 613, 543, 363, 535, 518]) == 0\nassert solution.countQuadruplets([380, 536, 785, 402, 405, 577, 872, 221, 759, 546, 164, 996, 277, 410, 57, 918, 620, 122, 120, 950, 379]) == 177\nassert solution.countQuadruplets([908, 79, 651, 246, 427, 356, 845, 277, 638, 501, 843, 662]) == 51\nassert solution.countQuadruplets([30, 643, 627, 105, 288, 211, 89, 449, 923, 604, 507, 274, 16, 808, 15, 287, 108, 502, 238, 859, 790, 74, 714, 853, 23, 936, 36, 715, 755, 664, 717, 501, 675, 827, 782, 751, 700, 232, 149, 959, 640, 527, 444, 337, 246, 961, 585, 610, 646, 845, 384, 18, 324, 946, 983, 761, 459, 85, 817, 63, 766, 668, 111, 842, 485, 615, 581, 107, 504, 997, 889, 103, 772, 189, 234, 494, 80, 877, 296, 203, 420, 736, 310, 78, 710, 270, 1, 114, 754, 721, 377, 465, 266, 691, 904, 933, 720, 535, 389]) == 192073\nassert solution.countQuadruplets([989, 610, 222, 635, 833, 272, 970, 137, 467, 440, 215, 261, 611, 37, 96, 616, 870, 275, 928, 170, 285, 736, 380, 578, 235, 972, 600, 914, 558, 854, 423, 903, 979, 679, 733, 723, 93, 142, 612, 562, 500, 896, 968, 283, 318, 148, 225, 174, 359, 682, 310, 139, 707, 76, 811, 51, 608, 719, 355, 159, 835, 524, 193, 198, 99, 652, 300, 526, 757, 69, 454, 908, 333, 807, 276, 929, 296, 277, 372, 91, 164, 853, 239, 470, 141, 520, 938, 460, 176, 517, 24, 596, 212, 894, 654, 591, 788, 383, 974]) == 148319\nassert solution.countQuadruplets([316, 998, 958, 190, 136, 231, 518, 626, 177, 634, 447, 130, 586, 807, 456, 446, 529, 261, 389, 125, 711, 211, 320, 909, 912, 794, 155, 148, 139, 709, 472, 619, 162, 780, 128, 140, 898, 203, 287, 194, 766, 117, 632, 129, 755, 639, 12, 726, 971, 694, 542, 982, 614, 150, 740, 928, 7, 290, 57, 431, 273, 279, 788, 544, 521, 378, 335, 672, 373, 298, 408, 394, 387, 98, 941, 922, 731, 723, 396, 657, 445, 733, 977, 721]) == 95878\nassert solution.countQuadruplets([382, 860, 458, 878, 125, 324, 722, 148, 981, 165, 435, 988, 783, 267, 954]) == 62\nassert solution.countQuadruplets([153, 797, 16, 112, 95, 123, 438, 77, 840, 810, 614, 605, 788, 986, 856, 349, 694, 43, 787, 312, 775, 441, 41, 172, 738, 651, 851, 238, 417, 621, 643, 967, 952, 555, 381, 653, 630, 925, 461, 49, 746, 69, 884, 936, 449, 711, 493, 68, 303, 558, 253, 739, 737, 368, 906, 957, 248, 225, 261, 275, 300, 966, 836, 758, 868, 122, 587, 254, 631, 491, 895, 723, 386, 517, 274, 825, 910, 263, 585, 101, 431, 805, 969, 394, 835, 223, 35, 790, 546, 480, 648, 714, 397, 194, 598, 760, 619, 632]) == 181219\nassert solution.countQuadruplets([579, 914, 51, 231, 860, 123, 537, 157, 223, 142, 965, 436, 721, 711, 545, 87, 613, 264, 90, 949, 430, 530, 26, 126, 771, 404, 582, 364, 442, 136, 683, 862, 75, 592, 323, 858, 834, 369, 719, 987, 966, 186, 541, 979, 855, 329, 792, 533, 998, 469, 135, 472, 484, 338, 789, 664, 69, 500, 640, 960, 421]) == 29553\nassert solution.countQuadruplets([833, 559, 798, 705, 400, 796, 478, 639, 624, 234, 948, 756, 519, 90, 848, 974, 738, 77, 267, 743, 907, 316, 995, 625, 500, 25, 483, 452, 260, 773, 994, 883, 467, 632, 343, 522, 936, 222, 35, 391, 79, 220, 1, 151, 829, 713]) == 3098\nassert solution.countQuadruplets([389, 759, 300, 938, 437, 817, 663, 314, 640, 925, 245, 960, 180, 770, 603, 491, 464, 613, 537, 187, 174, 933, 930, 543, 124, 611, 758, 910, 93, 498, 16, 150, 436, 479, 100, 62, 11, 291, 332, 478, 40, 235, 338, 861, 940, 312, 753, 874, 887, 191, 991, 395, 279, 815, 35, 570, 145, 109, 959, 306, 737, 386, 965, 939, 898, 387, 857, 525, 367, 800, 328, 528, 281, 769, 246, 915, 319, 22, 778, 876, 985, 340, 629, 402, 704, 64, 359, 210, 830, 761, 920, 170, 162, 427, 318, 995, 941, 91, 813, 541]) == 157820\nassert solution.countQuadruplets([908, 659, 370, 374, 125, 295, 311, 139, 638, 986, 491, 974, 450, 208, 611, 239, 826, 130, 902, 452, 1000, 505, 412, 625, 169, 534, 416, 882, 580, 991, 229, 726, 571, 157, 598, 497, 385, 485, 463, 717, 433, 80, 928, 88, 410, 409, 128, 884, 516, 328, 202, 472, 504, 572, 439, 521, 660, 594, 600, 185, 874, 407, 641, 913, 365, 44, 792, 530, 531, 513, 300, 539, 672, 733, 968, 296, 415, 277, 860, 73, 507, 253, 929, 965, 941, 559, 896, 41, 618, 391, 984, 261, 133, 456, 947, 654, 532, 837, 725]) == 209767\nassert solution.countQuadruplets([481, 28, 880, 685, 132, 815, 167, 703, 321, 324, 751, 193, 935, 947]) == 117\nassert solution.countQuadruplets([767, 170, 823, 838, 93, 889, 800, 125, 306, 184, 470, 161, 876, 262, 502, 77, 412, 136, 919, 894, 721, 442, 31, 345, 766, 536, 899, 27, 247, 950, 897, 273, 71, 407, 807]) == 2213\nassert solution.countQuadruplets([140, 644, 684, 636, 98, 814, 942, 45, 285, 298, 985]) == 20\nassert solution.countQuadruplets([398, 874, 667, 626, 300, 89, 832, 767, 391, 419, 160, 369, 411, 662, 315, 278, 410, 27, 580, 821, 924, 63, 785, 499, 893, 30, 191, 757, 525, 250, 219, 16, 427, 57, 749, 144, 567, 159, 185, 898, 904, 178, 87, 205, 942, 551, 46, 351, 264, 943, 318, 603, 314, 303, 467, 633, 711, 213, 153, 604, 295, 396, 802, 736, 92, 519, 358, 601, 816]) == 29068\nassert solution.countQuadruplets([489, 546, 905, 128, 249, 3, 780, 400, 907, 486, 395, 992, 356, 549, 625, 520, 255, 371, 984, 210, 613, 686, 199, 387, 856, 72, 463, 934, 655, 28, 130, 84, 294, 757, 971, 131, 347, 836, 855, 77, 884, 241, 747, 274, 441, 180, 791, 720, 211, 265]) == 6873\nassert solution.countQuadruplets([186, 902, 261, 119, 160, 665, 477, 279, 285, 999, 196, 626, 403]) == 50\nassert solution.countQuadruplets([635, 498, 317, 306, 140, 220, 686, 126, 422, 1000, 532, 132, 78, 814, 135, 116, 905, 793, 137, 15, 833, 193, 440, 921, 264, 221, 25, 604, 254, 564, 504, 923, 567, 383, 161, 249, 666, 169, 650, 781, 591, 731, 588, 749, 464, 551, 11, 268, 733, 302, 657, 997, 443, 344, 943, 982, 246, 38, 742, 118, 790, 782]) == 32691\nassert solution.countQuadruplets([945, 413, 926, 357, 653, 485, 810, 303, 308, 314, 174, 40, 979, 22, 190, 510, 951, 538, 957, 287, 705, 794, 940, 494, 86, 7, 373, 734, 760, 755, 887, 146, 593, 162, 823, 782, 689, 197, 211, 825, 817, 426, 367, 859, 227, 317, 797, 501, 478, 92, 20, 232, 409, 829, 219, 780, 50, 781, 550, 837, 684, 390, 173, 603, 448, 671, 164, 631]) == 21324\nassert solution.countQuadruplets([18, 598, 95, 84, 959, 308, 938, 987, 450, 552, 153, 75, 674, 927, 780, 430, 849, 31, 981, 175]) == 308\nassert solution.countQuadruplets([517, 99, 275, 580, 444, 748, 900, 502, 578, 245, 659, 871, 426, 118, 50, 618, 826, 479, 965, 685, 453, 793, 62, 404, 833, 277, 705, 612, 433, 448, 412, 299, 821, 283, 291, 431, 86, 22, 988, 462, 280, 735, 188, 614, 23, 993, 373, 899, 334, 885, 664, 489, 784, 565, 649, 484, 220, 458, 545, 777, 933, 344, 387, 187, 838, 351, 355, 250, 883, 319, 795, 134, 394, 48, 369, 638, 360, 102, 414, 226, 248, 253, 648, 339, 32, 185, 500, 366, 531, 622, 416, 670, 755, 524, 630, 460, 730, 532]) == 120330\nassert solution.countQuadruplets([95, 549, 890, 310, 171, 273, 618, 704, 984, 688, 145, 318, 400, 930, 916, 950, 977, 389, 396, 27, 265, 544, 353, 338, 851, 522, 876, 457, 625, 759, 229, 355, 847, 185, 886, 738, 508, 547, 170, 685, 5, 497, 344, 580, 315, 445, 975, 205, 329, 187, 622, 755, 321, 290, 257, 669, 132, 821, 557, 482, 70, 844, 447, 538, 103, 130, 861, 541, 172, 1000, 933, 436, 50, 907, 116, 596, 639, 586, 772, 25, 231, 860, 835, 197, 558, 539, 820, 793, 324, 331, 990, 894, 842, 880, 402, 674, 303, 931, 12, 884]) == 203113\nassert solution.countQuadruplets([471, 414, 209, 860, 133, 239, 220, 116, 617, 534, 595, 967, 835, 603, 616, 468, 84, 495, 1, 514, 475, 454, 696, 774, 375, 723, 277, 171, 345, 154, 192, 819, 374, 618, 662, 668, 843, 409, 532, 893, 637, 782, 912, 873, 455, 24, 851, 954, 823, 314, 269, 91, 946, 162, 978, 47, 929, 998, 218, 902, 490, 722, 847, 738]) == 44388\nassert solution.countQuadruplets([336, 563, 231, 90, 102, 868, 846, 309, 324, 999, 72, 403, 429, 83, 252, 6, 940, 268, 179, 820, 412, 132, 914, 121, 460, 191, 657, 852, 715, 461, 407, 249, 251]) == 1333\nassert solution.countQuadruplets([547, 198, 736, 872, 479, 973, 76, 771, 17, 838, 893, 943, 565, 972, 960]) == 82\nassert solution.countQuadruplets([678, 161, 20, 318, 770, 487, 880, 260, 55, 133, 485, 151, 529, 838, 845, 947, 153, 261, 546, 606, 572, 670, 30, 268]) == 354\nassert solution.countQuadruplets([376, 360, 422, 845, 357, 115, 879, 209, 767, 487, 544, 483, 469, 372, 66, 103, 840, 657, 28, 785, 635, 14, 410, 861, 496, 676, 465, 613, 341, 941, 34, 1000, 806, 290, 388, 20, 925, 761, 93, 551, 38, 781, 813, 354, 819, 180, 188, 872, 650, 631, 984, 401, 94, 552, 225, 317, 649, 25, 597, 913, 24, 545, 61, 491, 958, 139, 656, 168, 707, 78, 694]) == 35675\nassert solution.countQuadruplets([256, 529, 696, 952, 693, 617, 611, 899, 996, 532, 916, 507, 865, 750, 782, 261, 907, 379, 647, 56, 111, 668, 445, 309, 201, 953, 1000, 813]) == 990\nassert solution.countQuadruplets([501, 812, 717, 666, 702, 854, 409, 756, 689, 792, 923, 978, 654, 278, 816, 491, 746, 439, 483, 117, 605, 195, 228, 258, 821, 723, 725, 85, 819, 226, 465, 244, 81, 594, 252, 417, 390, 765, 754, 461, 681, 394, 489, 959, 42, 101, 745, 454, 546, 884, 222, 383, 332, 119, 110, 711, 953, 335, 911, 418, 74, 424]) == 11066\nassert solution.countQuadruplets([300, 957, 574, 768, 897, 338, 184, 926, 913, 878, 422, 649, 72, 6, 881, 810, 290, 378, 367, 912, 577, 386, 89, 472, 270, 244, 361, 172, 111, 267, 275]) == 219\nassert solution.countQuadruplets([111, 189, 365, 12, 55, 645, 285, 864, 480, 127, 957, 310, 60, 159, 633, 398, 79, 912, 953, 469, 844, 591, 334, 548, 153, 975, 869, 564, 721, 458, 840, 420, 622, 816, 963, 231, 718]) == 5576\nassert solution.countQuadruplets([888, 241, 875, 972, 933, 772, 775, 375, 795, 658, 848, 399, 890, 72, 267, 386, 479, 349, 685, 879, 2, 433, 538, 185, 877, 753, 981, 985, 642, 567, 683, 432, 925, 435, 914, 759, 599, 513, 337, 742, 240, 195, 619, 207, 971, 151, 796, 723, 869, 84, 25, 805, 172, 800, 196, 326, 644, 121, 703, 913, 729, 62, 717, 838, 16, 559, 191, 378, 876, 519, 949, 542, 448, 85, 49, 689, 794, 853, 813, 533, 494, 329, 250, 252, 955, 935, 964, 489, 827, 59, 734, 526, 168, 483, 159, 731, 934, 561, 510]) == 116993\nassert solution.countQuadruplets([671, 483, 287, 257, 417, 108, 942, 821, 672, 777, 525, 524, 716, 570, 894, 262, 761, 848, 911, 575, 184, 651, 961, 835, 319, 523, 95, 191, 750, 806, 175, 600, 399, 365, 957, 455, 641, 968, 988, 565, 77, 294, 625, 607, 966, 989, 577, 181, 646, 41, 161, 971, 731, 445, 724, 977, 102, 561, 229, 503, 767, 171, 177, 3, 54, 350, 444, 84]) == 21885\nassert solution.countQuadruplets([360, 593, 684, 394, 636, 134, 343, 551, 6, 498, 788, 750, 917, 697, 759, 171, 164, 215, 628, 496, 776, 364, 822, 425, 627, 410, 814, 872, 96, 1, 780]) == 1815\nassert solution.countQuadruplets([124, 775, 63, 380, 455, 524, 312, 666, 983, 78, 854, 217, 283, 921, 517, 569, 768, 536, 130, 845, 759, 782, 295, 976, 135, 657, 884, 281, 375, 597, 948, 251, 39, 814, 842, 951, 248, 481, 211, 186, 700, 339, 246, 941, 876, 922, 880, 644, 509, 973]) == 15878\nassert solution.countQuadruplets([974, 787, 490, 125, 278, 115, 495, 743, 956, 182, 73]) == 0\nassert solution.countQuadruplets([223, 170, 100, 558, 285]) == 0\nassert solution.countQuadruplets([43, 547, 322, 919, 280, 818, 148, 469, 806, 570, 572, 150, 546, 410, 937, 820, 830, 368, 282, 258, 371, 728, 409, 931, 230, 162, 271, 876, 595, 116, 745, 661, 872, 303, 533, 382, 596, 310, 401, 711, 158, 826, 608, 540, 56, 285, 755, 95, 393, 729, 159, 599, 328, 761, 816, 874, 405, 75, 955, 615, 779, 696, 459, 842, 153, 910, 600, 680, 642, 261, 414, 263, 921, 441, 977, 74, 35, 411, 715, 398, 847, 4]) == 84374\nassert solution.countQuadruplets([413, 621, 166, 172, 926, 980, 594, 139, 213, 935, 699, 697, 910, 344, 160, 105, 476, 589, 289, 57, 77, 723, 168, 365, 438, 380, 787, 317, 764, 826, 640, 254, 614, 778, 372, 997, 136, 899, 834, 679, 428, 167, 169, 944, 840]) == 8614\nassert solution.countQuadruplets([937, 384, 794, 667, 658, 126]) == 0\nassert solution.countQuadruplets([3, 593, 695, 241, 914, 864, 150, 16, 609, 649, 264, 407, 932, 973, 8, 174, 951, 388, 720, 107, 278, 821, 632, 14, 157, 822, 786, 128, 369, 310, 772, 161, 954, 294, 884, 797, 664, 435, 445, 556, 500, 518, 522, 640, 673, 653, 35, 267, 434, 638, 850, 475, 618, 984, 707, 221, 347, 169, 701, 759, 237, 813]) == 28491\nassert solution.countQuadruplets([152, 804, 250, 973, 487, 445, 336, 355, 542, 687, 885, 552, 412, 38, 767, 237, 1, 27, 59, 850, 319, 752, 548, 853, 714, 831, 269, 567, 42, 751, 737, 757, 129, 839, 596, 807, 516, 754, 376, 945, 715, 361, 584, 243, 268, 842, 698, 245, 327, 33, 137, 273, 818, 844, 126, 735, 433, 5, 760, 717, 481, 928, 91, 180, 207, 501, 400, 645, 963, 614, 411, 256, 320, 255, 669, 539, 641, 396, 424, 107]) == 49704\nassert solution.countQuadruplets([446, 402, 860, 87, 664, 257, 27, 46, 178, 950, 391, 476, 315, 844, 980, 579, 174, 298, 878, 652, 803, 897, 994, 266, 615, 766, 488, 983, 845, 458, 415, 58, 13, 625, 454, 88, 440, 543, 797, 239, 944, 671, 317, 304, 678, 771, 413, 534, 259, 965, 866, 975, 83, 764, 707, 107, 419, 28, 914, 74, 510, 369, 576, 48, 200, 946, 146, 996, 311, 169]) == 41744\nassert solution.countQuadruplets([453, 60, 842, 639, 472, 535, 968, 865, 320, 87, 159, 409]) == 22\nassert solution.countQuadruplets([220, 646, 794, 82, 236, 905, 773, 419, 377, 129, 903, 262, 908, 552, 473, 3, 303, 448, 920, 921, 896, 696, 343, 427, 39, 776, 680, 531, 306, 283, 400, 995, 164, 793, 155, 390, 391, 245, 418, 835, 806, 787, 598]) == 6359\nassert solution.countQuadruplets([721, 952, 860, 619, 395, 465, 6, 278, 237, 576, 284, 69, 467, 739, 490, 895, 389, 682, 841, 587, 129, 710, 632, 637, 861, 702, 759, 963, 28, 787, 674, 343, 559, 801, 323]) == 2073\nassert solution.countQuadruplets([242, 179, 928, 385, 883, 521, 93, 261, 83, 738, 115, 960, 86, 896, 725, 423, 447, 848, 91, 338, 85, 60, 432, 970]) == 434\nassert solution.countQuadruplets([645, 845, 489, 916, 162, 924, 591, 230, 660, 533, 524, 235, 33, 132, 856, 401]) == 23",
  "inefficient_solution": "class Solution:\n    def countQuadruplets(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[0] * (n * n) for _ in range(n)]\n        g = [[0] * (n * n) for _ in range(n)]\n        for j in range(1, n - 2):\n            cnt = sum(nums[l] > nums[j] for l in range(j + 1, n))\n            for k in range(j + 1, n - 1):\n                if nums[j] > nums[k]:\n                    f[j][k] = cnt\n                else:\n                    f[j][k] = sum(nums[l] > nums[j] for l in range(j + 1, n))\n                for _ in range(1000):\n                    pass\n        for k in range(2, n - 1):\n            cnt = sum(nums[i] < nums[k] for i in range(k))\n            for j in range(k - 1, 0, -1):\n                if nums[j] > nums[k]:\n                    g[j][k] = cnt\n                else:\n                    g[j][k] = sum(nums[i] < nums[k] for i in range(k))\n                for _ in range(1000):\n                    pass\n        return sum(\n            f[j][k] * g[j][k] for j in range(1, n - 2) for k in range(j + 1, n - 1)\n        )",
  "is_python": true
}