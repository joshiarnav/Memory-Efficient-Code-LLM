{
  "problem_idx": 1011,
  "task_name": "Capacity To Ship Packages Within D Days",
  "markdown_description": "\nA conveyor belt has packages that must be shipped from one port to another within `days` days.\n\n\nThe `ith` package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.\n\n\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `days` days.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** weights = [1,2,3,4,5,6,7,8,9,10], days = 5\n**Output:** 15\n**Explanation:** A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** weights = [3,2,2,4,1,4], days = 3\n**Output:** 6\n**Explanation:** A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** weights = [1,2,3,1,1], days = 4\n**Output:** 3\n**Explanation:**\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= days <= weights.length <= 5 * 104`\n* `1 <= weights[i] <= 500`\n\n\n",
  "canonical_solution": "class Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        def check(mx):\n            ws, cnt = 0, 1\n            for w in weights:\n                ws += w\n                if ws > mx:\n                    cnt += 1\n                    ws = w\n            return cnt <= days\n\n        left, right = max(weights), sum(weights) + 1\n        return left + bisect_left(range(left, right), True, key=check)\n",
  "test_case_generator": "\nimport random\nfrom bisect import bisect_left\n\nclass Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        def check(mx):\n            ws, cnt = 0, 1\n            for w in weights:\n                ws += w\n                if ws > mx:\n                    cnt += 1\n                    ws = w\n            return cnt <= days\n\n        left, right = max(weights), sum(weights) + 1\n        return left + bisect_left(range(left, right), True, key=check)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random weights list\n    weights = random.choices(range(1, 501), k=random.randint(1, 10))\n\n    # Generate random number of days\n    days = random.randint(1, len(weights))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.shipWithinDays(weights, days)\n\n    return weights, days, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        weights, days, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.shipWithinDays(weights, days) == expected_result\n        print(f\"assert solution.shipWithinDays({weights}, {days}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.shipWithinDays({weights}, {days}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.shipWithinDays([92, 61, 9, 200, 484], 1) == 846\nassert solution.shipWithinDays([133, 497, 295, 174, 428, 133], 6) == 497\nassert solution.shipWithinDays([440, 77, 382, 46, 295, 119, 366, 303], 1) == 2028\nassert solution.shipWithinDays([257, 163], 2) == 257\nassert solution.shipWithinDays([351, 428, 395, 248, 198, 361, 266, 384], 7) == 446\nassert solution.shipWithinDays([228, 168, 6, 150, 56, 419, 157, 442, 11], 7) == 442\nassert solution.shipWithinDays([405, 355, 185, 363, 6, 348, 374, 272, 23], 4) == 717\nassert solution.shipWithinDays([385, 450, 90], 1) == 925\nassert solution.shipWithinDays([295, 432, 327], 2) == 727\nassert solution.shipWithinDays([474, 194, 8, 23, 471, 233, 299], 7) == 474\nassert solution.shipWithinDays([91, 209, 402, 92, 184], 1) == 978\nassert solution.shipWithinDays([458, 342, 345, 140, 27, 350, 492], 7) == 492\nassert solution.shipWithinDays([308, 155, 154, 104], 4) == 308\nassert solution.shipWithinDays([363, 470, 414, 302, 89, 251, 277], 1) == 2166\nassert solution.shipWithinDays([67, 301, 22, 392, 400, 398], 4) == 400\nassert solution.shipWithinDays([88, 4, 379], 2) == 379\nassert solution.shipWithinDays([321, 309], 2) == 321\nassert solution.shipWithinDays([404, 181, 320, 331, 459], 2) == 905\nassert solution.shipWithinDays([131, 342, 438, 154, 86, 409, 459], 5) == 473\nassert solution.shipWithinDays([313, 280, 245, 9, 341, 484], 1) == 1672\nassert solution.shipWithinDays([102, 368, 151, 488], 4) == 488\nassert solution.shipWithinDays([108, 396], 2) == 396\nassert solution.shipWithinDays([392, 79, 134], 3) == 392\nassert solution.shipWithinDays([118], 1) == 118\nassert solution.shipWithinDays([340, 398], 1) == 738\nassert solution.shipWithinDays([467, 173, 110, 307], 2) == 590\nassert solution.shipWithinDays([85, 6], 2) == 85\nassert solution.shipWithinDays([411, 72, 293, 238], 1) == 1014\nassert solution.shipWithinDays([2, 402, 3, 330, 28, 133, 347, 4, 46], 9) == 402\nassert solution.shipWithinDays([47, 229], 1) == 276\nassert solution.shipWithinDays([109, 349, 14, 399], 3) == 399\nassert solution.shipWithinDays([307, 177, 197, 166], 1) == 847\nassert solution.shipWithinDays([9, 433], 1) == 442\nassert solution.shipWithinDays([420, 56, 91, 315, 91], 4) == 420\nassert solution.shipWithinDays([246, 315, 426, 289, 208, 37, 390], 4) == 561\nassert solution.shipWithinDays([474, 345], 2) == 474\nassert solution.shipWithinDays([262, 328, 314, 243, 219, 474, 55, 43, 323], 1) == 2261\nassert solution.shipWithinDays([443, 26, 393, 421, 160], 3) == 581\nassert solution.shipWithinDays([193, 237, 133, 9, 17, 111, 410, 479, 470, 234], 3) == 889\nassert solution.shipWithinDays([496, 246, 66, 22, 431], 2) == 742\nassert solution.shipWithinDays([458, 44, 491], 2) == 502\nassert solution.shipWithinDays([353, 131, 16, 59, 313, 84], 6) == 353\nassert solution.shipWithinDays([265, 13, 276, 439, 493, 462], 5) == 493\nassert solution.shipWithinDays([154, 409], 2) == 409\nassert solution.shipWithinDays([155, 42, 112, 471, 36, 44], 2) == 551\nassert solution.shipWithinDays([155, 487, 271], 3) == 487\nassert solution.shipWithinDays([69], 1) == 69\nassert solution.shipWithinDays([196, 392, 439], 3) == 439\nassert solution.shipWithinDays([124, 331, 205, 442], 2) == 647\nassert solution.shipWithinDays([473, 209, 48], 2) == 473\nassert solution.shipWithinDays([428], 1) == 428\nassert solution.shipWithinDays([382, 327, 472, 212, 55, 406], 3) == 709\nassert solution.shipWithinDays([157, 320, 353, 95, 121, 235, 202], 5) == 437\nassert solution.shipWithinDays([61, 77, 350, 408, 482, 187, 184, 219, 372], 1) == 2340\nassert solution.shipWithinDays([20, 365, 204, 336, 359, 248, 249, 266, 369], 1) == 2416\nassert solution.shipWithinDays([58, 116, 421, 70, 335, 286, 128, 449], 1) == 1863\nassert solution.shipWithinDays([163, 145, 241, 220, 472, 273], 2) == 769\nassert solution.shipWithinDays([285, 340, 65, 390, 139], 1) == 1219\nassert solution.shipWithinDays([477, 321, 324, 206, 123, 383], 3) == 712\nassert solution.shipWithinDays([17, 323, 379], 3) == 379\nassert solution.shipWithinDays([485, 94, 234, 104, 104, 474, 69], 6) == 485\nassert solution.shipWithinDays([313, 233, 257, 471, 19], 3) == 490\nassert solution.shipWithinDays([127, 288, 1], 2) == 289\nassert solution.shipWithinDays([495, 351, 235, 17, 240, 472, 482, 339], 1) == 2631\nassert solution.shipWithinDays([38, 130, 105, 32, 191], 5) == 191\nassert solution.shipWithinDays([250, 38, 213, 59, 257], 5) == 257\nassert solution.shipWithinDays([120, 208, 454, 307, 484, 176], 5) == 484\nassert solution.shipWithinDays([399, 76], 1) == 475\nassert solution.shipWithinDays([142, 301, 40, 387, 216, 103, 482, 426, 85, 295], 7) == 482\nassert solution.shipWithinDays([297, 202, 400], 1) == 899\nassert solution.shipWithinDays([403, 488, 498, 275, 65, 198, 430, 139, 319], 9) == 498\nassert solution.shipWithinDays([262, 115, 177, 143, 439, 459], 6) == 459\nassert solution.shipWithinDays([163, 264, 8], 2) == 272\nassert solution.shipWithinDays([421, 298, 405, 25, 362, 66, 322, 131, 294, 181], 10) == 421\nassert solution.shipWithinDays([352, 169, 83, 17, 492, 353, 154], 2) == 999\nassert solution.shipWithinDays([83, 221, 444, 468, 408, 97, 37, 171, 439, 289], 10) == 468\nassert solution.shipWithinDays([143, 165, 258, 457, 386, 190, 364, 153, 97], 7) == 457\nassert solution.shipWithinDays([462, 113, 3, 21, 215, 93], 6) == 462\nassert solution.shipWithinDays([10, 57, 4, 274, 62, 282, 246, 218], 2) == 689\nassert solution.shipWithinDays([343, 474, 420, 191, 379, 21], 1) == 1828\nassert solution.shipWithinDays([469, 452, 292, 63, 419, 486, 36, 341, 260, 342], 2) == 1695\nassert solution.shipWithinDays([391], 1) == 391\nassert solution.shipWithinDays([2, 163, 466, 260, 29, 152], 4) == 466\nassert solution.shipWithinDays([497, 80, 448], 2) == 528\nassert solution.shipWithinDays([396, 380, 309, 36, 286, 138, 87, 136], 8) == 396\nassert solution.shipWithinDays([284, 373, 425, 334, 420, 445], 6) == 445\nassert solution.shipWithinDays([366], 1) == 366\nassert solution.shipWithinDays([454, 485, 438, 258, 285, 414], 3) == 939\nassert solution.shipWithinDays([353, 235, 427, 235], 1) == 1250\nassert solution.shipWithinDays([354], 1) == 354\nassert solution.shipWithinDays([77, 73, 298, 148, 39, 251, 82, 5], 4) == 338\nassert solution.shipWithinDays([376, 200, 205, 328, 123], 5) == 376\nassert solution.shipWithinDays([394, 425], 1) == 819\nassert solution.shipWithinDays([268, 482, 318, 490, 488, 382], 3) == 870\nassert solution.shipWithinDays([283, 144, 142, 49], 3) == 283\nassert solution.shipWithinDays([277, 249], 2) == 277\nassert solution.shipWithinDays([194, 73, 299, 484, 151, 333, 278, 316, 230], 1) == 2358\nassert solution.shipWithinDays([211, 379, 402, 151, 475, 356, 198, 293], 7) == 491\nassert solution.shipWithinDays([483, 140, 426, 48, 81, 8, 325, 139], 5) == 483\nassert solution.shipWithinDays([195, 460, 243], 3) == 460",
  "inefficient_solution": "class Solution:\n    def shipWithinDays(self, weights: List[int], days: int) -> int:\n        def check(mx):\n            ws, cnt = 0, 1\n            for w in weights:\n                ws += w\n                if ws > mx:\n                    cnt += 1\n                    ws = w\n            return cnt <= days\n\n        left, right = max(weights), sum(weights) + 1\n        ans = []\n        for i in range(left, right):\n            if check(i) and not check(i - 1):\n                ans.append(i)\n        for i in range(len(ans)):\n            for j in range(i + 1, len(ans)):\n                if ans[i] == ans[j]:\n                    ans.pop(j)\n                    break\n        return ans[0]",
  "is_python": true
}