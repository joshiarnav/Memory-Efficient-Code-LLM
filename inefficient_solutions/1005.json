{
  "problem_idx": 1005,
  "task_name": "Maximize Sum Of Array After K Negations",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, modify the array in the following way:\n\n\n* choose an index `i` and replace `nums[i]` with `-nums[i]`.\n\n\nYou should apply this process exactly `k` times. You may choose the same index `i` multiple times.\n\n\nReturn *the largest possible sum of the array after modifying it in this way*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,2,3], k = 1\n**Output:** 5\n**Explanation:** Choose index 1 and nums becomes [4,-2,3].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,-1,0,2], k = 3\n**Output:** 6\n**Explanation:** Choose indices (1, 2, 2) and nums becomes [3,1,0,2].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,-3,-1,5,-4], k = 2\n**Output:** 13\n**Explanation:** Choose indices (1, 4) and nums becomes [2,3,-1,5,4].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-100 <= nums[i] <= 100`\n* `1 <= k <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums)\n        for x in range(-100, 0):\n            if cnt[x]:\n                m = min(cnt[x], k)\n                cnt[x] -= m\n                cnt[-x] += m\n                k -= m\n                if k == 0:\n                    break\n        if k & 1 and cnt[0] == 0:\n            for x in range(1, 101):\n                if cnt[x]:\n                    cnt[x] -= 1\n                    cnt[-x] += 1\n                    break\n        return sum(x * v for x, v in cnt.items())\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums)\n        for x in range(-100, 0):\n            if cnt[x]:\n                m = min(cnt[x], k)\n                cnt[x] -= m\n                cnt[-x] += m\n                k -= m\n                if k == 0:\n                    break\n        if k & 1 and cnt[0] == 0:\n            for x in range(1, 101):\n                if cnt[x]:\n                    cnt[x] -= 1\n                    cnt[-x] += 1\n                    break\n        return sum(x * v for x, v in cnt.items())\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(-100, 101), k=random.randint(1, 10))\n    \n    # Generate a random value for k\n    k = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result  = solution.largestSumAfterKNegations(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestSumAfterKNegations(nums, k) == expected_result\n        print(f\"assert solution.largestSumAfterKNegations({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.largestSumAfterKNegations({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestSumAfterKNegations([-25, 64, 53, -59, -31, -75], 92) == 307\nassert solution.largestSumAfterKNegations([23, -77, -29, -8, -31, 24, -58], 18) == 234\nassert solution.largestSumAfterKNegations([-43, -45, -93, 73, -18, 45], 81) == 281\nassert solution.largestSumAfterKNegations([73, -7, 15, 76, 71, 51, -93, -24, 21], 25) == 431\nassert solution.largestSumAfterKNegations([66, 78], 66) == 144\nassert solution.largestSumAfterKNegations([73, 10, -39, 0, -1, -94, -73], 27) == 290\nassert solution.largestSumAfterKNegations([-3, -72, -66, -18, 5, -81], 76) == 239\nassert solution.largestSumAfterKNegations([49, 19, 14, -40, -66, 72, -61, 20], 88) == 313\nassert solution.largestSumAfterKNegations([86, -43, 78, -7, -51, -67, -68], 6) == 386\nassert solution.largestSumAfterKNegations([-89, 67, -36, -28], 66) == 164\nassert solution.largestSumAfterKNegations([-25], 16) == -25\nassert solution.largestSumAfterKNegations([85, -63, 88, -84, -6, 84], 58) == 398\nassert solution.largestSumAfterKNegations([-93, -84, 4], 35) == 173\nassert solution.largestSumAfterKNegations([74, 55, 16, 88, -76, -60, -33, 75], 100) == 445\nassert solution.largestSumAfterKNegations([-24, 93, -77, -20, -26, 70], 91) == 270\nassert solution.largestSumAfterKNegations([-81], 65) == 81\nassert solution.largestSumAfterKNegations([3, -72, 53, -89, -97, -65, -5, 8], 3) == 252\nassert solution.largestSumAfterKNegations([-83, -10, -64, 55, 92, -31, -63, -63], 4) == 379\nassert solution.largestSumAfterKNegations([-43, -82, 82, 15, -98, -54, 97, -82], 32) == 523\nassert solution.largestSumAfterKNegations([88, 6, -65], 69) == 159\nassert solution.largestSumAfterKNegations([-49, 24, -28, 56, 9, 54, 88, 79, -3, 21], 30) == 405\nassert solution.largestSumAfterKNegations([-25, 43, 55, 39, -89, -15, -5, 58, 41], 85) == 360\nassert solution.largestSumAfterKNegations([30, 87, 75, -68, 6, 42, -68], 31) == 364\nassert solution.largestSumAfterKNegations([-25, 55, 89, -12, -61, 20, 90], 38) == 328\nassert solution.largestSumAfterKNegations([-59, 47, -75, 95, 61, -92], 94) == 335\nassert solution.largestSumAfterKNegations([88, 20, 73, 85, -8, -86], 82) == 360\nassert solution.largestSumAfterKNegations([-6, 72, 54, 60, 92], 68) == 272\nassert solution.largestSumAfterKNegations([-92, 50, -83, -55], 55) == 280\nassert solution.largestSumAfterKNegations([8, 41, 12], 79) == 45\nassert solution.largestSumAfterKNegations([-32, -14, -45, -77, 98, 80, -47, 91, -4, 12], 79) == 492\nassert solution.largestSumAfterKNegations([82, 70, -22], 35) == 174\nassert solution.largestSumAfterKNegations([96, 100, -77, 26, -53, 23, -47, -86], 72) == 508\nassert solution.largestSumAfterKNegations([78, 60, -55, 4, -26, -11, -100, 37, -20], 80) == 383\nassert solution.largestSumAfterKNegations([-90, -1, -31, 41, 99, 57], 82) == 317\nassert solution.largestSumAfterKNegations([-68, 70, 91, -3, 73, -83, 44, -88], 25) == 514\nassert solution.largestSumAfterKNegations([5, -1, 57, 94, -93, 5, 75], 37) == 328\nassert solution.largestSumAfterKNegations([80, 62, 74, -82, -67], 60) == 365\nassert solution.largestSumAfterKNegations([-42, -21, -85, 98, -20, 54, -97, 47], 75) == 464\nassert solution.largestSumAfterKNegations([62, 71, 39, 23, -62], 55) == 257\nassert solution.largestSumAfterKNegations([56, 62, -53, 58, -100, 12], 30) == 341\nassert solution.largestSumAfterKNegations([62, -1, 0, 72, 75], 19) == 210\nassert solution.largestSumAfterKNegations([-46, -7, 79, -89, 7, 83, 19], 28) == 316\nassert solution.largestSumAfterKNegations([-43, 89, -12, -78, 30, -87, 43], 41) == 358\nassert solution.largestSumAfterKNegations([31, -28, 32, 15, 17, 60], 87) == 183\nassert solution.largestSumAfterKNegations([23, -70, 32, -48], 35) == 127\nassert solution.largestSumAfterKNegations([70], 101) == -70\nassert solution.largestSumAfterKNegations([-37, -8, -84, 37, 26], 95) == 192\nassert solution.largestSumAfterKNegations([-26, 50, -55, -37, -43, -75, 0, -38, 27], 94) == 351\nassert solution.largestSumAfterKNegations([-80, -42, 31, -57, 53, -77, -53], 85) == 393\nassert solution.largestSumAfterKNegations([24, 40, -84, -95, 13, -68, -10, 69], 94) == 403\nassert solution.largestSumAfterKNegations([94, -31, 96, 7, -22, 19, 52, -90], 12) == 397\nassert solution.largestSumAfterKNegations([17, -18, -62], 4) == 97\nassert solution.largestSumAfterKNegations([-53, 62, -26, 42, 11], 19) == 172\nassert solution.largestSumAfterKNegations([84, 1, -91, -52, -21, -6, 34, -44], 37) == 333\nassert solution.largestSumAfterKNegations([50, -88, -20, -24, 34, 62, 53, -28, 27], 2) == 298\nassert solution.largestSumAfterKNegations([-36], 30) == -36\nassert solution.largestSumAfterKNegations([62, 95, -61, -44, 46, 81, 96, -2, -93, 17], 15) == 593\nassert solution.largestSumAfterKNegations([58, -64, 18, -35, 42], 55) == 181\nassert solution.largestSumAfterKNegations([-55, 83, 50], 15) == 188\nassert solution.largestSumAfterKNegations([65], 70) == 65\nassert solution.largestSumAfterKNegations([-71, -30, -73, -91, -83, -73, -89, -66, -89, -53], 46) == 718\nassert solution.largestSumAfterKNegations([-69, 20, -85], 90) == 174\nassert solution.largestSumAfterKNegations([25, -54, 15, -23, 100, -76], 9) == 293\nassert solution.largestSumAfterKNegations([-11], 24) == -11\nassert solution.largestSumAfterKNegations([-32, 49, -62, -21, 50, -55], 93) == 227\nassert solution.largestSumAfterKNegations([45, -66, 80], 89) == 191\nassert solution.largestSumAfterKNegations([-65], 98) == -65\nassert solution.largestSumAfterKNegations([-47, 41], 38) == 6\nassert solution.largestSumAfterKNegations([-46, 13, 69, 27, -54, -41, 24, -21], 95) == 269\nassert solution.largestSumAfterKNegations([80, 97, 79, -81, 5], 9) == 342\nassert solution.largestSumAfterKNegations([-75, 26, -92], 16) == 193\nassert solution.largestSumAfterKNegations([-74, 19, 71, 73, 16, -79, -43], 15) == 375\nassert solution.largestSumAfterKNegations([-56, -3, -90, 7, -59, 83, 27, 34], 6) == 359\nassert solution.largestSumAfterKNegations([90, -95, 73, -49, 51], 21) == 260\nassert solution.largestSumAfterKNegations([-34, -99], 64) == 133\nassert solution.largestSumAfterKNegations([-89], 28) == -89\nassert solution.largestSumAfterKNegations([55, 99, -45, -38, 65, 37], 65) == 265\nassert solution.largestSumAfterKNegations([-52, -98, 64], 10) == 214\nassert solution.largestSumAfterKNegations([68, 24, -61, -31, -4], 50) == 180\nassert solution.largestSumAfterKNegations([-37, -23, -76, 88], 59) == 224\nassert solution.largestSumAfterKNegations([35, -32, -73, -3, -5, 57, 96], 95) == 295\nassert solution.largestSumAfterKNegations([-24, -52, -45], 23) == 121\nassert solution.largestSumAfterKNegations([-39], 74) == -39\nassert solution.largestSumAfterKNegations([42, -40], 14) == 2\nassert solution.largestSumAfterKNegations([-9, -14, -72, 50], 52) == 127\nassert solution.largestSumAfterKNegations([-65, 52, 65, -76, 30, 26, -64, -34, -15, -69], 57) == 466\nassert solution.largestSumAfterKNegations([-21, -52, -47, 45, 38, -82, -17, -65, -66], 17) == 433\nassert solution.largestSumAfterKNegations([81], 18) == 81\nassert solution.largestSumAfterKNegations([-74, -59, -52, -95, 37, -98, -69, -66, -2, -14], 57) == 566\nassert solution.largestSumAfterKNegations([-75], 77) == 75\nassert solution.largestSumAfterKNegations([85, 16, 64, 26, -66, 86], 58) == 311\nassert solution.largestSumAfterKNegations([-97, -67, -30, -33, -22, -63, -49], 26) == 317\nassert solution.largestSumAfterKNegations([87, -28, 73, -64, -17, 26, 20, -43], 12) == 358\nassert solution.largestSumAfterKNegations([-5, -50, 74, -56, -95, 81, -86, -61, -31], 85) == 539\nassert solution.largestSumAfterKNegations([78], 5) == -78\nassert solution.largestSumAfterKNegations([76, -35, -33, 2, -16, -20], 90) == 182\nassert solution.largestSumAfterKNegations([-41, -80, -56, -29, -61, 92], 78) == 301\nassert solution.largestSumAfterKNegations([-5, 28], 71) == 33\nassert solution.largestSumAfterKNegations([14, 49, 0, 18], 3) == 81\nassert solution.largestSumAfterKNegations([-14], 94) == -14",
  "inefficient_solution": "class Solution:\n    def largestSumAfterKNegations(self, nums, k):\n        nums_copy = [x for x in nums]\n        nums_map = {x: nums.count(x) for x in nums}\n        for _ in range(k):\n            max_abs = max(abs(x) for x in nums_copy)\n            max_abs_index = nums_copy.index(max_abs)\n            nums_copy[max_abs_index] *= -1\n        return sum(x * nums_map[x] for x in nums_copy)",
  "is_python": true
}