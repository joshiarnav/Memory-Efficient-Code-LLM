{
  "problem_idx": 3,
  "task_name": "Longest Substring Without Repeating Characters",
  "markdown_description": "\nGiven a string `s`, find the length of the **longest** **substring** without repeating characters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcabcbb\"\n**Output:** 3\n**Explanation:** The answer is \"abc\", with the length of 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"bbbbb\"\n**Output:** 1\n**Explanation:** The answer is \"b\", with the length of 1.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"pwwkew\"\n**Output:** 3\n**Explanation:** The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= s.length <= 5 * 104`\n* `s` consists of English letters, digits, symbols and spaces.\n\n\n",
  "canonical_solution": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ss = set()\n        i = ans = 0\n        for j, c in enumerate(s):\n            while c in ss:\n                ss.remove(s[i])\n                i += 1\n            ss.add(c)\n            ans = max(ans, j - i + 1)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        ss = set()\n        i = ans = 0\n        for j, c in enumerate(s):\n            while c in ss:\n                ss.remove(s[i])\n                i += 1\n            ss.add(c)\n            ans = max(ans, j - i + 1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=random.randint(0, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lengthOfLongestSubstring(s)\n\n    return (s, ), expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        inputs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lengthOfLongestSubstring(*inputs) == expected_result\n\n        test_case_generator_results.append(f\"assert solution.lengthOfLongestSubstring({', '.join(map(repr, inputs))}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == '__main__':\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(*test_case_generator_results, sep=\"\\n\")\n",
  "test_case": "assert solution.lengthOfLongestSubstring('') == 0\nassert solution.lengthOfLongestSubstring('krLKl6F') == 7\nassert solution.lengthOfLongestSubstring('p2Cn3Y6') == 7\nassert solution.lengthOfLongestSubstring('jf') == 2\nassert solution.lengthOfLongestSubstring('ebl') == 3\nassert solution.lengthOfLongestSubstring('7FHbLe') == 6\nassert solution.lengthOfLongestSubstring('cUoD0S') == 6\nassert solution.lengthOfLongestSubstring('M1kCixrcvS') == 10\nassert solution.lengthOfLongestSubstring('V9sGI') == 5\nassert solution.lengthOfLongestSubstring('0iTSFPsD5') == 9\nassert solution.lengthOfLongestSubstring('D') == 1\nassert solution.lengthOfLongestSubstring('ncNp') == 4\nassert solution.lengthOfLongestSubstring('FKdZH') == 5\nassert solution.lengthOfLongestSubstring('FqhvT67') == 7\nassert solution.lengthOfLongestSubstring('D1zyWG0a') == 8\nassert solution.lengthOfLongestSubstring('VyOucQ') == 6\nassert solution.lengthOfLongestSubstring('SXqMDBVoEN') == 10\nassert solution.lengthOfLongestSubstring('mYjdE1QjDm') == 7\nassert solution.lengthOfLongestSubstring('4rd2vxkZZR') == 8\nassert solution.lengthOfLongestSubstring('qWggGpiX') == 5\nassert solution.lengthOfLongestSubstring('yEk') == 3\nassert solution.lengthOfLongestSubstring('1SbbkRXgx') == 6\nassert solution.lengthOfLongestSubstring('WnLZ') == 4\nassert solution.lengthOfLongestSubstring('pEF') == 3\nassert solution.lengthOfLongestSubstring('d7OCVynX0') == 9\nassert solution.lengthOfLongestSubstring('') == 0\nassert solution.lengthOfLongestSubstring('qSPMKL2Pa') == 7\nassert solution.lengthOfLongestSubstring('PrYzK1nUJ') == 9\nassert solution.lengthOfLongestSubstring('JBu') == 3\nassert solution.lengthOfLongestSubstring('IBCg7KcjgY') == 8\nassert solution.lengthOfLongestSubstring('T') == 1\nassert solution.lengthOfLongestSubstring('Rjy5bwtsK') == 9\nassert solution.lengthOfLongestSubstring('Brh') == 3\nassert solution.lengthOfLongestSubstring('DPz') == 3\nassert solution.lengthOfLongestSubstring('kSu99Brx') == 4\nassert solution.lengthOfLongestSubstring('m') == 1\nassert solution.lengthOfLongestSubstring('KMa') == 3\nassert solution.lengthOfLongestSubstring('VLOg') == 4\nassert solution.lengthOfLongestSubstring('UmRlK') == 5\nassert solution.lengthOfLongestSubstring('AWw2zq') == 6\nassert solution.lengthOfLongestSubstring('VBs2uAH3H') == 8\nassert solution.lengthOfLongestSubstring('ufSovl54BW') == 10\nassert solution.lengthOfLongestSubstring('vStUY7') == 6\nassert solution.lengthOfLongestSubstring('oGF') == 3\nassert solution.lengthOfLongestSubstring('0Xj') == 3\nassert solution.lengthOfLongestSubstring('4') == 1\nassert solution.lengthOfLongestSubstring('aFevv') == 4\nassert solution.lengthOfLongestSubstring('Xz') == 2\nassert solution.lengthOfLongestSubstring('StG4') == 4\nassert solution.lengthOfLongestSubstring('Rie') == 3\nassert solution.lengthOfLongestSubstring('8RY3erTER') == 8\nassert solution.lengthOfLongestSubstring('BN2n6AoJ0c') == 10\nassert solution.lengthOfLongestSubstring('UO') == 2\nassert solution.lengthOfLongestSubstring('VmBZvv1') == 5\nassert solution.lengthOfLongestSubstring('LMWQ') == 4\nassert solution.lengthOfLongestSubstring('') == 0\nassert solution.lengthOfLongestSubstring('80') == 2\nassert solution.lengthOfLongestSubstring('xvr') == 3\nassert solution.lengthOfLongestSubstring('L1sr9dvT') == 8\nassert solution.lengthOfLongestSubstring('F') == 1\nassert solution.lengthOfLongestSubstring('9mBKJg2RoF') == 10\nassert solution.lengthOfLongestSubstring('u3SHz53') == 6\nassert solution.lengthOfLongestSubstring('uIxsZwqW2u') == 9\nassert solution.lengthOfLongestSubstring('iiJ30w') == 5\nassert solution.lengthOfLongestSubstring('LPK5N') == 5\nassert solution.lengthOfLongestSubstring('MvYNcL') == 6\nassert solution.lengthOfLongestSubstring('PidX') == 4\nassert solution.lengthOfLongestSubstring('c0c') == 2\nassert solution.lengthOfLongestSubstring('') == 0\nassert solution.lengthOfLongestSubstring('UUBXog7At') == 8\nassert solution.lengthOfLongestSubstring('uY9RR0') == 4\nassert solution.lengthOfLongestSubstring('') == 0\nassert solution.lengthOfLongestSubstring('SLWSu53h') == 7\nassert solution.lengthOfLongestSubstring('vhsRBcC') == 7\nassert solution.lengthOfLongestSubstring('WDkR2G3jSH') == 10\nassert solution.lengthOfLongestSubstring('') == 0\nassert solution.lengthOfLongestSubstring('Ssid5') == 5\nassert solution.lengthOfLongestSubstring('xLZ8IF1FIT') == 7\nassert solution.lengthOfLongestSubstring('9day') == 4\nassert solution.lengthOfLongestSubstring('uPvh71l') == 7\nassert solution.lengthOfLongestSubstring('AICk') == 4\nassert solution.lengthOfLongestSubstring('E5D') == 3\nassert solution.lengthOfLongestSubstring('eJ5D1gPo') == 8\nassert solution.lengthOfLongestSubstring('OdrwR') == 5\nassert solution.lengthOfLongestSubstring('ztJjPukfhk') == 9\nassert solution.lengthOfLongestSubstring('gE') == 2\nassert solution.lengthOfLongestSubstring('Yp0') == 3\nassert solution.lengthOfLongestSubstring('Ue9Pqe74k') == 7\nassert solution.lengthOfLongestSubstring('5') == 1\nassert solution.lengthOfLongestSubstring('BdauxZZFxu') == 6\nassert solution.lengthOfLongestSubstring('FZhAzP20n') == 9\nassert solution.lengthOfLongestSubstring('iBFKT') == 5\nassert solution.lengthOfLongestSubstring('kd') == 2\nassert solution.lengthOfLongestSubstring('GzLCgm1lF') == 9\nassert solution.lengthOfLongestSubstring('GxkMbFuM') == 7\nassert solution.lengthOfLongestSubstring('') == 0\nassert solution.lengthOfLongestSubstring('OGa7brYx3e') == 10\nassert solution.lengthOfLongestSubstring('743lBZ2upV') == 10\nassert solution.lengthOfLongestSubstring('vVj') == 3\nassert solution.lengthOfLongestSubstring('') == 0",
  "inefficient_solution": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        data = []\n        for c in s:\n            data.append(c)\n            for i in range(len(data) - 1, 0, -1):\n                if data[i] == data[i-1]:\n                    data[i] = None\n                    break\n            ans = len(data)\n            for i in range(len(data)):\n                if data[i] is None:\n                    data[i] = 'temporary_placeholder_for_none'\n            data = [x for x in data if x is not None]\n            ans = max(ans, len(data) - data.count('temporary_placeholder_for_none'))\n        return ans",
  "is_python": true
}