{
  "problem_idx": 1857,
  "task_name": "Largest Color Value in a Directed Graph",
  "markdown_description": "\nThere is a **directed graph** of `n` colored nodes and `m` edges. The nodes are numbered from `0` to `n - 1`.\n\n\nYou are given a string `colors` where `colors[i]` is a lowercase English letter representing the **color** of the `ith` node in this graph (**0-indexed**). You are also given a 2D array `edges` where `edges[j] = [aj, bj]` indicates that there is a **directed edge** from node `aj` to node `bj`.\n\n\nA valid **path** in the graph is a sequence of nodes `x1 -> x2 -> x3 -> ... -> xk` such that there is a directed edge from `xi` to `xi+1` for every `1 <= i < k`. The **color value** of the path is the number of nodes that are colored the **most frequently** occurring color along that path.\n\n\nReturn *the **largest color value** of any valid path in the given graph, or* `-1` *if the graph contains a cycle*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1857.Largest%20Color%20Value%20in%20a%20Directed%20Graph/images/leet1.png)\n\n\n\n```\n\n**Input:** colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]\n**Output:** 3\n**Explanation:** The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image).\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1800-1899/1857.Largest%20Color%20Value%20in%20a%20Directed%20Graph/images/leet2.png)\n\n\n\n```\n\n**Input:** colors = \"a\", edges = [[0,0]]\n**Output:** -1\n**Explanation:** There is a cycle from 0 to 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == colors.length`\n* `m == edges.length`\n* `1 <= n <= 105`\n* `0 <= m <= 105`\n* `colors` consists of lowercase English letters.\n* `0 <= aj, bj\u00a0< n`\n\n\n",
  "canonical_solution": "class Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        n = len(colors)\n        indeg = [0] * n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            indeg[b] += 1\n        q = deque()\n        dp = [[0] * 26 for _ in range(n)]\n        for i, v in enumerate(indeg):\n            if v == 0:\n                q.append(i)\n                c = ord(colors[i]) - ord('a')\n                dp[i][c] += 1\n        cnt = 0\n        ans = 1\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j in g[i]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n                c = ord(colors[j]) - ord('a')\n                for k in range(26):\n                    dp[j][k] = max(dp[j][k], dp[i][k] + (c == k))\n                    ans = max(ans, dp[j][k])\n        return -1 if cnt < n else ans\n",
  "test_case_generator": "\nimport random\nfrom collections import deque, defaultdict\nfrom typing import List\n\nclass Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        n = len(colors)\n        indeg = [0] * n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            indeg[b] += 1\n        q = deque()\n        dp = [[0] * 26 for _ in range(n)]\n        for i, v in enumerate(indeg):\n            if v == 0:\n                q.append(i)\n                c = ord(colors[i]) - ord('a')\n                dp[i][c] += 1\n        cnt = 0\n        ans = 1\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j in g[i]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n                c = ord(colors[j]) - ord('a')\n                for k in range(26):\n                    dp[j][k] = max(dp[j][k], dp[i][k] + (c == k))\n                    ans = max(ans, dp[j][k])\n        return -1 if cnt < n else ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random colors string\n    colors_length = random.randint(1, 11)\n    colors = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(colors_length))\n    \n    # Generate random edges list\n    edges_length = random.randint(0, 11)\n    edges = []\n    for _ in range(edges_length):\n        a = random.randint(0, colors_length - 1)\n        b = random.randint(0, colors_length - 1)\n        edges.append([a, b])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestPathValue(colors, edges)\n\n    return colors, edges, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        colors, edges, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestPathValue(colors, edges) == expected_result\n        print(f\"assert solution.largestPathValue('{colors}', {edges}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.largestPathValue('{colors}', {edges}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestPathValue('zio', [[1, 2], [2, 0], [0, 1], [1, 2], [0, 2], [0, 1], [2, 1], [2, 2], [2, 2], [2, 1], [1, 1]]) == -1\nassert solution.largestPathValue('rhadeskf', [[5, 4], [6, 3], [0, 0], [3, 6], [1, 6], [6, 0], [0, 2], [0, 0], [5, 6]]) == -1\nassert solution.largestPathValue('mqi', [[0, 2], [1, 2], [2, 1]]) == -1\nassert solution.largestPathValue('czqmfrmgij', [[1, 7], [8, 7], [1, 9], [5, 2], [3, 0], [0, 1], [6, 3]]) == 2\nassert solution.largestPathValue('qfhawohpr', [[3, 8], [2, 1], [8, 2], [0, 5], [7, 3], [2, 7], [5, 5], [1, 8], [8, 0], [2, 8]]) == -1\nassert solution.largestPathValue('ppra', [[2, 1], [1, 2], [3, 3], [1, 3], [1, 0], [1, 3], [3, 2]]) == -1\nassert solution.largestPathValue('qzzfgd', [[4, 5], [0, 4], [0, 2], [5, 2], [0, 3], [0, 3], [4, 1], [5, 3], [3, 2], [5, 2], [3, 0]]) == -1\nassert solution.largestPathValue('vqembuk', [[1, 6], [4, 3], [2, 3], [4, 4], [0, 0], [1, 3]]) == -1\nassert solution.largestPathValue('cufl', [[0, 2], [1, 1]]) == -1\nassert solution.largestPathValue('rwzldujumh', []) == 1\nassert solution.largestPathValue('f', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('u', [[0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('hhbepfi', [[6, 1], [6, 4], [3, 4], [0, 4], [0, 3]]) == 1\nassert solution.largestPathValue('whsxfpxuppa', [[8, 8], [3, 8], [10, 0], [8, 0]]) == -1\nassert solution.largestPathValue('f', [[0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('fxjdptju', [[5, 3], [2, 3], [2, 4], [1, 3], [0, 7], [5, 2], [4, 5], [1, 3], [7, 2], [7, 6], [4, 4]]) == -1\nassert solution.largestPathValue('iddqgpjshfd', [[3, 2], [2, 2], [4, 4], [8, 0], [1, 0], [6, 2], [1, 6], [7, 2], [9, 4], [3, 1]]) == -1\nassert solution.largestPathValue('qtis', [[1, 0], [2, 3], [1, 3], [3, 3], [0, 0], [0, 1]]) == -1\nassert solution.largestPathValue('halb', [[0, 1], [1, 1], [2, 2], [2, 1], [1, 1]]) == -1\nassert solution.largestPathValue('v', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('lxovsvtqe', [[3, 3]]) == -1\nassert solution.largestPathValue('ahmnsfglawa', [[6, 9], [1, 1], [0, 6], [9, 8], [3, 3], [2, 6], [4, 1], [1, 10], [0, 10], [4, 6]]) == -1\nassert solution.largestPathValue('htllgow', [[5, 0], [2, 2], [1, 0], [3, 5], [2, 1]]) == -1\nassert solution.largestPathValue('kzthzi', [[1, 5], [0, 5], [5, 2], [4, 0], [5, 3], [5, 4], [5, 0]]) == -1\nassert solution.largestPathValue('mbvw', [[3, 3], [2, 1], [3, 0], [1, 3], [1, 1], [3, 2], [1, 3], [0, 2]]) == -1\nassert solution.largestPathValue('bqwwevwbb', [[6, 6]]) == -1\nassert solution.largestPathValue('puksmx', [[2, 2], [1, 1], [4, 5], [3, 5], [3, 5]]) == -1\nassert solution.largestPathValue('kgfrtllnbpd', [[3, 8], [3, 7]]) == 1\nassert solution.largestPathValue('mcvgxgjqi', [[6, 8], [8, 4], [4, 8], [4, 6], [5, 0], [4, 7], [0, 8], [7, 2]]) == -1\nassert solution.largestPathValue('duxq', [[3, 3]]) == -1\nassert solution.largestPathValue('lrr', [[0, 2], [1, 2], [2, 0], [1, 0], [2, 2], [2, 0], [2, 0], [2, 1]]) == -1\nassert solution.largestPathValue('lvruby', [[2, 5], [3, 5]]) == 1\nassert solution.largestPathValue('ycluhrqxhh', [[2, 2], [0, 4], [3, 0]]) == -1\nassert solution.largestPathValue('h', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('kcgrrmcxklq', [[1, 6], [3, 6], [6, 10], [9, 9], [7, 8], [4, 2], [10, 6], [5, 0]]) == -1\nassert solution.largestPathValue('bol', [[0, 0], [1, 2], [0, 0], [0, 2]]) == -1\nassert solution.largestPathValue('i', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('a', [[0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('vtdxaerr', [[2, 1], [4, 6], [3, 2], [6, 5], [5, 4], [6, 6], [2, 7], [5, 1], [3, 3], [5, 5]]) == -1\nassert solution.largestPathValue('lt', [[1, 1], [1, 0], [1, 0], [1, 1], [1, 1], [0, 0], [1, 1], [0, 0], [0, 1]]) == -1\nassert solution.largestPathValue('xnhnmhy', [[5, 1], [6, 0]]) == 1\nassert solution.largestPathValue('z', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('ickvpjlfjr', [[0, 1], [3, 6], [8, 7]]) == 1\nassert solution.largestPathValue('gwnjhs', [[0, 1], [5, 5], [3, 0]]) == -1\nassert solution.largestPathValue('ybwj', [[2, 3], [0, 0], [1, 3], [0, 3], [1, 2], [2, 0], [1, 1], [3, 2]]) == -1\nassert solution.largestPathValue('ujy', []) == 1\nassert solution.largestPathValue('usuukxtcys', [[3, 1], [2, 7]]) == 1\nassert solution.largestPathValue('hoywubm', [[0, 1], [0, 3], [4, 6], [0, 1], [0, 2], [6, 1], [1, 5], [3, 1], [4, 4], [4, 0], [1, 5]]) == -1\nassert solution.largestPathValue('vqmbp', [[3, 4], [2, 0], [3, 2], [1, 1], [4, 3], [4, 3], [4, 1], [4, 3], [2, 4], [1, 0]]) == -1\nassert solution.largestPathValue('cha', [[1, 0]]) == 1\nassert solution.largestPathValue('phkmdntmdzr', [[2, 7], [3, 5], [7, 7], [7, 3], [6, 6], [6, 4], [6, 4], [2, 8]]) == -1\nassert solution.largestPathValue('wwfxblhho', [[8, 7], [7, 3], [8, 2], [6, 6], [3, 2], [4, 3], [3, 1], [3, 2]]) == -1\nassert solution.largestPathValue('tuxhrcle', [[1, 5], [5, 6], [2, 5], [1, 1], [3, 3], [2, 0], [5, 6], [4, 7], [4, 4]]) == -1\nassert solution.largestPathValue('ppzyqnu', [[6, 5], [2, 5], [1, 0], [1, 2], [1, 1], [5, 2], [2, 0], [6, 2], [3, 4]]) == -1\nassert solution.largestPathValue('imodejbfj', [[4, 1], [2, 4], [2, 6], [1, 0], [8, 3], [0, 6], [2, 8]]) == 1\nassert solution.largestPathValue('nswtlhw', [[5, 0], [2, 2], [4, 1], [0, 1]]) == -1\nassert solution.largestPathValue('zkevzxd', []) == 1\nassert solution.largestPathValue('kloxii', [[2, 3], [4, 5], [0, 2], [0, 2], [3, 2], [3, 1]]) == -1\nassert solution.largestPathValue('wgipqtmyz', [[1, 8], [1, 6], [0, 7], [1, 5]]) == 1\nassert solution.largestPathValue('fjv', []) == 1\nassert solution.largestPathValue('wjuqfxib', [[3, 1], [4, 7], [3, 2], [4, 3], [1, 1], [1, 4], [4, 5], [7, 1]]) == -1\nassert solution.largestPathValue('cbhg', [[0, 0], [1, 1], [0, 2], [1, 1], [3, 1], [1, 3]]) == -1\nassert solution.largestPathValue('mdniiknmnbp', [[9, 6], [9, 5], [9, 1], [2, 1], [8, 9], [9, 1], [9, 10], [5, 4]]) == 2\nassert solution.largestPathValue('t', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('icudr', [[2, 0], [4, 2], [1, 3], [4, 2], [3, 3], [4, 2], [4, 0], [1, 2], [1, 1], [2, 2], [2, 2]]) == -1\nassert solution.largestPathValue('rywfen', [[0, 2], [3, 0], [4, 5], [4, 5], [5, 4], [0, 0], [2, 1], [3, 0], [1, 0], [5, 1], [3, 2]]) == -1\nassert solution.largestPathValue('fcwxtj', [[2, 0], [5, 1], [5, 1], [0, 3], [1, 3], [0, 5]]) == 1\nassert solution.largestPathValue('msgoyeiwalk', [[1, 9], [8, 7], [5, 0], [8, 2]]) == 1\nassert solution.largestPathValue('pjrumwfdap', [[3, 3]]) == -1\nassert solution.largestPathValue('sgdusbsbxm', [[7, 5], [8, 8]]) == -1\nassert solution.largestPathValue('aybkielh', [[0, 0], [6, 4], [2, 0], [6, 1], [1, 7], [3, 2], [4, 6], [3, 6], [6, 5]]) == -1\nassert solution.largestPathValue('vutzfiyte', [[1, 1], [8, 3], [8, 8], [3, 4], [8, 8], [0, 5], [0, 5], [0, 5], [5, 4], [7, 5], [3, 7]]) == -1\nassert solution.largestPathValue('gynbpl', []) == 1\nassert solution.largestPathValue('vrxdbw', [[1, 1], [2, 0], [3, 0], [4, 0], [3, 2], [1, 3], [3, 1], [4, 2], [2, 5]]) == -1\nassert solution.largestPathValue('qtsmjyccx', [[1, 2], [3, 2], [6, 4], [6, 0], [3, 4], [8, 1]]) == 1\nassert solution.largestPathValue('fgiubfoeir', [[1, 7], [1, 0], [0, 7], [3, 9], [8, 4], [6, 6], [6, 8], [0, 2], [7, 5]]) == -1\nassert solution.largestPathValue('nqtwsb', [[4, 2], [4, 5], [3, 1], [5, 4], [1, 4]]) == -1\nassert solution.largestPathValue('slnfeqwxdjs', [[4, 0], [6, 4], [5, 10], [10, 9]]) == 1\nassert solution.largestPathValue('mnbtpx', []) == 1\nassert solution.largestPathValue('b', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('q', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('bxiijlae', [[0, 1], [6, 7], [4, 3], [4, 4]]) == -1\nassert solution.largestPathValue('egbpwmlsap', [[9, 7], [1, 1], [1, 8], [6, 2], [7, 0]]) == -1\nassert solution.largestPathValue('o', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('tb', [[1, 0], [0, 0], [0, 0], [0, 0], [1, 1], [0, 1]]) == -1\nassert solution.largestPathValue('o', [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('w', [[0, 0], [0, 0], [0, 0], [0, 0]]) == -1\nassert solution.largestPathValue('nqzmevk', [[1, 5], [2, 3], [3, 3]]) == -1\nassert solution.largestPathValue('aufdfbsla', [[5, 5], [0, 0]]) == -1\nassert solution.largestPathValue('vqmoczanobh', [[7, 0], [4, 5], [0, 3]]) == 1\nassert solution.largestPathValue('bjqyukmpj', [[7, 4], [7, 3], [4, 5], [6, 5], [2, 1]]) == 1\nassert solution.largestPathValue('xo', [[1, 0], [0, 1], [0, 0], [0, 0], [0, 1], [1, 0], [0, 1], [0, 0]]) == -1\nassert solution.largestPathValue('uqpj', [[1, 0], [3, 1], [3, 0], [0, 3], [2, 3], [0, 3], [3, 1], [3, 1], [2, 0]]) == -1\nassert solution.largestPathValue('sywm', [[2, 2], [2, 2], [3, 2], [0, 3], [2, 2], [2, 1], [3, 0]]) == -1\nassert solution.largestPathValue('edklyfrblwo', [[3, 9]]) == 1\nassert solution.largestPathValue('ss', [[1, 0], [1, 0], [0, 1], [0, 0], [0, 0], [0, 1]]) == -1\nassert solution.largestPathValue('acgf', [[2, 2], [1, 0], [2, 2]]) == -1\nassert solution.largestPathValue('psdqadbo', [[1, 2], [2, 6], [4, 5], [3, 4]]) == 1\nassert solution.largestPathValue('gwy', [[2, 0], [1, 0]]) == 1\nassert solution.largestPathValue('zjngcmbz', [[4, 0]]) == 1",
  "inefficient_solution": "class Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        n = len(colors)\n        indeg = [0] * (n * 2)\n        g = [[[] for _ in range(2)] for _ in range(n)]\n        for a, b in edges:\n            g[a][0].append((b, 1))\n            g[b][1].append((a, 0))\n            indeg[b] += 1\n        q = deque()\n        dp = [[[0] * 26 for _ in range(2)] for _ in range(n)]\n        for i, v in enumerate(indeg):\n            if v == 0:\n                q.append(i)\n                c = ord(colors[i]) - ord('a')\n                dp[i][0][c] = 1\n        cnt = 0\n        ans = 1\n        while q:\n            i = q.popleft()\n            cnt += 1\n            for j, v in g[i][0]:\n                indeg[j] -= 1\n                if indeg[j] == 0:\n                    q.append(j)\n                c = ord(colors[j]) - ord('a')\n                dp[j][0] = dp[j][1]\n                dp[j][1] = [[0] * 26 for _ in range(2)]\n                for k in range(26):\n                    if dp[i][v][k] > 0:\n                        for l in range(26):\n                            dp[j][1][l] = max(dp[j][1][l], dp[i][v][k] + (l == k))\n                            ans = max(ans, dp[j][1][l])\n        return -1 if cnt < n else ans",
  "is_python": true
}