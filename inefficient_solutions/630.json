{
  "problem_idx": 630,
  "task_name": "Course Schedule III",
  "markdown_description": "\nThere are `n` different online courses numbered from `1` to `n`. You are given an array `courses` where `courses[i] = [durationi, lastDayi]` indicate that the `ith` course should be taken **continuously** for `durationi` days and must be finished before or on `lastDayi`.\n\n\nYou will start on the `1st` day and you cannot take two or more courses simultaneously.\n\n\nReturn *the maximum number of courses that you can take*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\n**Output:** 3\nExplanation: \nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** courses = [[1,2]]\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** courses = [[3,2],[4,3]]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= courses.length <= 104`\n* `1 <= durationi, lastDayi <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def scheduleCourse(self, courses: List[List[int]]) -> int:\n        courses.sort(key=lambda x: x[1])\n        pq = []\n        s = 0\n        for duration, last in courses:\n            heappush(pq, -duration)\n            s += duration\n            while s > last:\n                s += heappop(pq)\n        return len(pq)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def scheduleCourse(self, courses):\n        courses.sort(key=lambda x: x[1])\n        pq = []\n        s = 0\n        for duration, last in courses:\n            heappush(pq, -duration)\n            s += duration\n            while s > last:\n                s += heappop(pq)\n        return len(pq)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    courses = []\n    num_courses = random.randint(1, 10)\n    for _ in range(num_courses):\n        duration = random.randint(1, 101)\n        last_day = random.randint(1, 1001)\n        courses.append([duration, last_day])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.scheduleCourse(courses)\n\n    return courses, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        courses, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.scheduleCourse(courses) == expected_result\n        print(f\"assert solution.scheduleCourse({courses}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.scheduleCourse({courses}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.scheduleCourse([[55, 76], [96, 154], [61, 254], [75, 277], [27, 399], [44, 479], [23, 514], [28, 955]]) == 7\nassert solution.scheduleCourse([[54, 474], [34, 594], [98, 630], [6, 787], [62, 955], [8, 970]]) == 6\nassert solution.scheduleCourse([[51, 115], [34, 302], [98, 305], [49, 417], [1, 745], [60, 921], [80, 933]]) == 7\nassert solution.scheduleCourse([[49, 165], [97, 172], [49, 625], [70, 632], [93, 759], [97, 853], [70, 924]]) == 7\nassert solution.scheduleCourse([[66, 141], [80, 755], [57, 788]]) == 3\nassert solution.scheduleCourse([[85, 117], [41, 133], [79, 148], [82, 641], [87, 754], [79, 789], [34, 893]]) == 6\nassert solution.scheduleCourse([[7, 63], [100, 75], [91, 189], [11, 235], [2, 314]]) == 4\nassert solution.scheduleCourse([[23, 277], [89, 387]]) == 2\nassert solution.scheduleCourse([[50, 129], [44, 609], [29, 667], [39, 939], [73, 990]]) == 5\nassert solution.scheduleCourse([[67, 20], [30, 32], [24, 387], [13, 775], [88, 827]]) == 4\nassert solution.scheduleCourse([[44, 122], [59, 529], [41, 937], [95, 952]]) == 4\nassert solution.scheduleCourse([[94, 868], [80, 946]]) == 2\nassert solution.scheduleCourse([[58, 148], [94, 208], [88, 966]]) == 3\nassert solution.scheduleCourse([[3, 251], [67, 485], [94, 517], [75, 1001]]) == 4\nassert solution.scheduleCourse([[76, 33], [31, 203], [59, 347], [80, 401], [37, 877]]) == 4\nassert solution.scheduleCourse([[98, 99], [48, 248], [87, 301], [60, 336], [42, 411], [27, 634], [46, 702], [72, 800], [44, 840], [61, 878]]) == 10\nassert solution.scheduleCourse([[91, 805], [65, 915]]) == 2\nassert solution.scheduleCourse([[55, 751]]) == 1\nassert solution.scheduleCourse([[70, 114], [2, 147], [25, 793], [85, 982]]) == 4\nassert solution.scheduleCourse([[5, 540], [3, 546], [40, 811], [46, 817], [39, 838], [17, 865]]) == 6\nassert solution.scheduleCourse([[95, 62], [60, 388], [76, 592], [96, 608], [58, 665], [25, 882]]) == 5\nassert solution.scheduleCourse([[32, 277], [80, 323], [24, 531], [69, 849]]) == 4\nassert solution.scheduleCourse([[86, 195], [45, 704]]) == 2\nassert solution.scheduleCourse([[14, 250], [9, 460], [91, 544], [86, 704], [25, 730], [16, 919]]) == 6\nassert solution.scheduleCourse([[40, 127], [23, 263], [20, 295], [84, 440], [12, 579], [94, 686]]) == 6\nassert solution.scheduleCourse([[101, 66], [47, 70], [34, 78], [39, 88], [90, 99], [49, 217], [19, 720], [30, 807]]) == 5\nassert solution.scheduleCourse([[71, 27], [62, 107], [59, 108], [98, 241], [86, 297], [79, 615], [59, 710], [78, 768], [82, 938], [71, 947]]) == 8\nassert solution.scheduleCourse([[96, 51], [31, 665]]) == 1\nassert solution.scheduleCourse([[91, 200], [26, 388], [36, 563], [94, 934], [60, 995]]) == 5\nassert solution.scheduleCourse([[68, 26], [32, 59], [86, 382], [70, 449], [83, 821], [5, 865], [53, 868]]) == 6\nassert solution.scheduleCourse([[95, 141], [21, 383], [99, 396], [20, 422], [53, 426], [5, 467], [22, 470], [33, 498], [46, 953]]) == 9\nassert solution.scheduleCourse([[88, 69], [10, 218], [70, 349], [61, 359], [27, 415], [53, 645]]) == 5\nassert solution.scheduleCourse([[97, 778]]) == 1\nassert solution.scheduleCourse([[14, 58], [72, 175], [89, 511], [19, 519], [2, 750], [26, 953]]) == 6\nassert solution.scheduleCourse([[20, 356], [27, 382], [3, 459], [92, 478], [38, 688], [100, 820]]) == 6\nassert solution.scheduleCourse([[61, 385], [66, 389], [100, 563], [14, 665]]) == 4\nassert solution.scheduleCourse([[39, 420], [19, 443], [13, 492], [44, 542], [51, 591], [40, 607], [5, 713], [44, 986]]) == 8\nassert solution.scheduleCourse([[3, 67], [32, 199], [1, 401], [5, 751], [47, 819], [20, 974]]) == 6\nassert solution.scheduleCourse([[96, 410], [51, 582], [50, 591], [26, 602], [69, 679]]) == 5\nassert solution.scheduleCourse([[57, 74], [1, 486], [53, 526], [63, 795], [33, 822], [35, 864], [70, 988]]) == 7\nassert solution.scheduleCourse([[101, 101]]) == 1\nassert solution.scheduleCourse([[84, 332], [50, 364], [25, 430], [46, 637], [52, 659], [78, 732], [28, 810], [32, 857], [48, 948]]) == 9\nassert solution.scheduleCourse([[51, 64], [72, 643]]) == 2\nassert solution.scheduleCourse([[68, 484]]) == 1\nassert solution.scheduleCourse([[29, 278], [98, 316], [85, 829], [40, 959], [69, 964]]) == 5\nassert solution.scheduleCourse([[85, 418]]) == 1\nassert solution.scheduleCourse([[89, 262], [22, 380], [74, 596]]) == 3\nassert solution.scheduleCourse([[12, 80], [4, 101], [46, 519], [62, 810]]) == 4\nassert solution.scheduleCourse([[40, 257], [44, 323], [1, 717], [12, 749], [19, 929]]) == 5\nassert solution.scheduleCourse([[55, 118], [68, 454], [14, 961], [19, 990]]) == 4\nassert solution.scheduleCourse([[34, 322], [58, 395], [17, 419], [1, 521], [66, 628], [37, 696], [72, 777]]) == 7\nassert solution.scheduleCourse([[94, 140], [75, 266], [48, 367], [12, 927]]) == 4\nassert solution.scheduleCourse([[84, 260], [65, 361], [2, 483], [73, 527], [101, 613], [51, 775], [56, 833]]) == 7\nassert solution.scheduleCourse([[4, 131], [57, 254], [68, 470], [65, 508], [99, 514], [98, 982], [41, 998]]) == 7\nassert solution.scheduleCourse([[19, 36], [4, 239], [21, 436], [49, 486], [26, 649], [84, 746], [44, 830], [41, 836], [15, 942]]) == 9\nassert solution.scheduleCourse([[7, 207], [68, 408], [81, 750], [34, 769]]) == 4\nassert solution.scheduleCourse([[77, 442]]) == 1\nassert solution.scheduleCourse([[82, 188]]) == 1\nassert solution.scheduleCourse([[67, 22], [31, 276], [35, 534], [80, 578], [58, 615], [20, 645], [100, 683], [86, 897], [15, 905]]) == 8\nassert solution.scheduleCourse([[22, 47], [64, 93], [89, 274], [59, 431], [97, 570], [84, 658], [14, 783], [23, 803], [12, 828], [21, 884]]) == 10\nassert solution.scheduleCourse([[6, 174], [23, 243], [69, 331], [10, 336], [78, 376], [6, 636], [64, 664], [67, 793]]) == 8\nassert solution.scheduleCourse([[77, 31], [41, 222], [28, 344], [62, 497], [65, 794], [10, 977], [34, 986], [37, 989]]) == 7\nassert solution.scheduleCourse([[3, 63], [77, 83], [56, 191], [69, 197], [92, 673], [6, 706], [91, 863], [2, 883]]) == 7\nassert solution.scheduleCourse([[29, 403], [92, 490]]) == 2\nassert solution.scheduleCourse([[46, 210], [82, 388], [63, 573], [82, 684], [101, 790], [26, 953]]) == 6\nassert solution.scheduleCourse([[15, 156], [23, 431], [69, 582], [63, 851], [43, 922]]) == 5\nassert solution.scheduleCourse([[62, 58], [76, 365], [89, 558], [91, 599], [76, 639], [81, 676], [18, 732], [22, 769], [47, 880], [89, 883]]) == 9\nassert solution.scheduleCourse([[7, 349]]) == 1\nassert solution.scheduleCourse([[75, 938]]) == 1\nassert solution.scheduleCourse([[74, 806], [45, 979]]) == 2\nassert solution.scheduleCourse([[31, 384], [21, 559], [95, 785], [25, 931]]) == 4\nassert solution.scheduleCourse([[34, 411], [68, 456], [76, 845], [86, 993]]) == 4\nassert solution.scheduleCourse([[24, 28], [69, 118], [47, 463], [56, 516], [12, 535], [90, 748], [29, 781], [101, 952]]) == 8\nassert solution.scheduleCourse([[23, 471]]) == 1\nassert solution.scheduleCourse([[3, 80], [94, 120], [9, 369], [99, 431], [19, 435], [85, 543], [9, 565], [39, 700], [52, 762], [44, 827]]) == 10\nassert solution.scheduleCourse([[73, 216], [18, 342], [22, 411], [22, 794], [75, 868]]) == 5\nassert solution.scheduleCourse([[22, 147], [7, 252], [11, 277], [37, 445], [92, 599], [101, 600], [53, 832], [92, 853]]) == 8\nassert solution.scheduleCourse([[58, 415], [34, 513]]) == 2\nassert solution.scheduleCourse([[19, 288], [93, 724], [5, 992]]) == 3\nassert solution.scheduleCourse([[2, 175], [28, 387], [56, 453], [69, 466], [33, 955]]) == 5\nassert solution.scheduleCourse([[97, 798], [53, 929]]) == 2\nassert solution.scheduleCourse([[3, 31], [81, 239], [22, 247], [75, 353], [86, 541], [96, 554], [35, 597], [55, 912], [88, 920], [13, 936]]) == 10\nassert solution.scheduleCourse([[31, 7], [7, 95], [50, 363], [81, 557], [66, 891], [33, 899]]) == 5\nassert solution.scheduleCourse([[33, 221], [59, 234], [33, 376], [54, 409], [83, 426], [30, 598]]) == 6\nassert solution.scheduleCourse([[69, 884]]) == 1\nassert solution.scheduleCourse([[77, 154], [80, 315], [59, 691], [58, 725]]) == 4\nassert solution.scheduleCourse([[8, 41], [72, 61], [92, 78], [74, 355], [86, 413], [46, 458], [13, 639], [6, 810]]) == 6\nassert solution.scheduleCourse([[5, 79], [50, 147], [54, 151], [63, 249], [69, 366], [2, 431], [101, 494]]) == 7\nassert solution.scheduleCourse([[100, 17], [69, 165], [34, 493], [33, 760], [1, 797], [100, 861]]) == 5\nassert solution.scheduleCourse([[48, 34], [70, 36], [3, 42], [9, 68], [72, 396], [53, 402], [40, 435], [44, 803], [46, 850]]) == 7\nassert solution.scheduleCourse([[10, 985]]) == 1\nassert solution.scheduleCourse([[38, 644], [49, 751], [17, 980]]) == 3\nassert solution.scheduleCourse([[97, 202], [52, 665]]) == 2\nassert solution.scheduleCourse([[49, 150], [61, 239], [24, 733], [15, 902], [14, 910], [23, 928], [100, 964]]) == 7\nassert solution.scheduleCourse([[73, 431], [21, 754]]) == 2\nassert solution.scheduleCourse([[33, 140], [37, 220], [11, 360], [70, 428], [9, 565], [88, 619]]) == 6\nassert solution.scheduleCourse([[88, 632], [69, 759], [88, 817], [47, 828]]) == 4\nassert solution.scheduleCourse([[95, 239], [84, 351], [6, 458], [18, 485], [13, 490], [39, 537], [50, 687], [63, 721]]) == 8\nassert solution.scheduleCourse([[11, 398], [71, 488], [63, 496], [54, 526], [11, 917]]) == 5\nassert solution.scheduleCourse([[35, 46]]) == 1",
  "inefficient_solution": "class Solution:\n    def scheduleCourse(self, courses):\n        courses.sort(key=lambda x: x[1])\n        pq = []\n        for duration, last in courses:\n            pq.append(-duration)\n            self.check(pq, duration, last)\n        return len(pq)\n\n    def check(self, pq, duration, last):\n        s = sum(pq)\n        if s > last:\n            max_val = max(pq)\n            pq.remove(max_val)\n            self.check(pq, duration, last)\n            pq.append(max_val)",
  "is_python": true
}