{
  "problem_idx": 1541,
  "task_name": "Minimum Insertions to Balance a Parentheses String",
  "markdown_description": "\nGiven a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is **balanced** if:\n\n\n* Any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.\n* Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.\n\n\nIn other words, we treat `'('` as an opening parenthesis and `'))'` as a closing parenthesis.\n\n\n* For example, `\"())\"`, `\"())(())))\"` and `\"(())())))\"` are balanced, `\")()\"`, `\"()))\"` and `\"(()))\"` are not balanced.\n\n\nYou can insert the characters `'('` and `')'` at any position of the string to balance it if needed.\n\n\nReturn *the minimum number of insertions* needed to make `s` balanced.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"(()))\"\n**Output:** 1\n**Explanation:** The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be \"(())))\" which is balanced.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"())\"\n**Output:** 0\n**Explanation:** The string is already balanced.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"))())(\"\n**Output:** 3\n**Explanation:** Add '(' to match the first '))', Add '))' to match the last '('.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of `'('` and `')'` only.\n\n\n",
  "canonical_solution": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        ans = x = 0\n        i, n = 0, len(s)\n        while i < n:\n            if s[i] == '(':\n                x += 1\n            else:\n                if i < n - 1 and s[i + 1] == ')':\n                    i += 1\n                else:\n                    ans += 1\n                if x == 0:\n                    ans += 1\n                else:\n                    x -= 1\n            i += 1\n        ans += x << 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minInsertions(self, s: str) -> int:\n        ans = x = 0\n        i, n = 0, len(s)\n        while i < n:\n            if s[i] == '(':\n                x += 1\n            else:\n                if i < n - 1 and s[i + 1] == ')':\n                    i += 1\n                else:\n                    ans += 1\n                if x == 0:\n                    ans += 1\n                else:\n                    x -= 1\n            i += 1\n        ans += x << 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string of parentheses\n    s = \"\"\n    for i in range(random.randint(1, 101)):\n        s += random.choice([\"(\", \")\"])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minInsertions(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minInsertions(s) == expected_result\n        print(f\"assert solution.minInsertions({s}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minInsertions({s}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minInsertions(((()(())())))())))(())(()))()())))))))))((()()((()(()(((())))()())(()(((()))(())())()))())() == 35\nassert solution.minInsertions(((())()()(()((()((()))(()()))())())))(()))))())(()))))((() == 21\nassert solution.minInsertions()()))()(())(()()()))())(()))))((()(() == 18\nassert solution.minInsertions((((())(((((()(((())(((()))()((((()())))))))))))))))())))()()()() == 27\nassert solution.minInsertions()()))()(()()())(()(()()()((())))())))()()(()))((())(()(()())((())))()()((()())((((())(((())))(()) == 54\nassert solution.minInsertions(((())((())(())())))))((())(())))(())))))((()(())())())()()()())()(()()()))))))())()()(((()()))(()) == 29\nassert solution.minInsertions()((())))(()()()((())())))(())(()(())))(())) == 18\nassert solution.minInsertions()(((()))())(() == 11\nassert solution.minInsertions((((((())()((()())))))())())))()(())(())(())()()())))()(((()((()())(((()))(()(() == 42\nassert solution.minInsertions()())()(((()(()()(())) == 16\nassert solution.minInsertions(((()))()(()(()())) == 10\nassert solution.minInsertions())(()))(())))(())(((((()(())()(()())))((())(()(()())())())(()())((()))))(()(((()() == 45\nassert solution.minInsertions((())()(()()))))(((())()))))(())))(()())(()()()()(((()))()()))(()))(()()()(((()((()))((())() == 42\nassert solution.minInsertions())())()))())())())))())((())())()())(((((()()))) == 19\nassert solution.minInsertions(()())(())))((()()())))()))))()))(()(((((()()(()(()()())(()) == 32\nassert solution.minInsertions()(()))(()((())(()((((()(((((())(((((()(()((()())()))))(()(((()((()()((()))(()()()((())()()))))))))))) == 68\nassert solution.minInsertions(()(((()(((()))()((()()(())))(())(()(()((()))((()))((()))()()(()))()()()(()) == 46\nassert solution.minInsertions()))()))))))))(((())()()((((())()(((()()((((()) == 42\nassert solution.minInsertions(()(()))()(()()))((()))))))(()()()))(((()())((()(((()()))))()(()())))))))(((()())()((()()) == 38\nassert solution.minInsertions((()()))(()())((())(()))))())))(()))))(((()())))) == 10\nassert solution.minInsertions())((())))()))()(())(()))()((())()(()()((()))))((())() == 23\nassert solution.minInsertions()()(()((((((())((())((((((())))(()())()))))()()))((()(()))())))()()((())()((() == 49\nassert solution.minInsertions()(((((()()()))()))((()))())(((()()))(())()))(()))(()())() == 28\nassert solution.minInsertions())()()()()()))))((()))(((()))))(()()()) == 19\nassert solution.minInsertions()()())))((()(((((()((()()))()())))()((()())((()))(()((((()((() == 50\nassert solution.minInsertions()()()()))())()(()(((((())(()()())(((())()) == 31\nassert solution.minInsertions()))((())(()()(()))(()()))))))())())()))))))(((()()((())(((())(()(()(()()()((((((((())()()(() == 62\nassert solution.minInsertions()()((()))((())))() == 10\nassert solution.minInsertions())())()))()))))())())()((((((()()()))))))()(())(()(()(()))()(((())(()(((((())))))) == 42\nassert solution.minInsertions((()(()((())))())()())()((()((()(()())(()()()(()) == 31\nassert solution.minInsertions(())(()))()()(())()))()(()())()))))(()()()))((((()(()()())())()((()(())))())))((())(())((()(()))))) == 38\nassert solution.minInsertions((()()())()()())(()()))()()(()))))())((()(((((())()(()((()(()((((()())) == 45\nassert solution.minInsertions()()())((()((()))))((()()()()(())())()())(((()))(()()))((()())())))))()((())))))))()) == 28\nassert solution.minInsertions((()()))(()))() == 5\nassert solution.minInsertions(((((((())(((()()))))((()))()()((()()((()) == 32\nassert solution.minInsertions(((())))((())())(())(()()))))()))(((()((()()(())())(((()))(((())())()()()) == 36\nassert solution.minInsertions((()())((()))))))))((((((()(())) == 18\nassert solution.minInsertions()((((((()(())((((()))())()())())(())))(())))(()))((((()()())(()())(()) == 42\nassert solution.minInsertions(()))) == 2\nassert solution.minInsertions()())))()()))())()(((()(())()))))))(((()((()(())()())(()()(()))((((())))))()))(() == 38\nassert solution.minInsertions()(()((()(())) == 12\nassert solution.minInsertions()(()(())())(()))())((())))(((()(()(((((((()((((()(((()))() == 51\nassert solution.minInsertions(())) == 0\nassert solution.minInsertions()((()()(()((() == 17\nassert solution.minInsertions()(((((()()()(()) == 18\nassert solution.minInsertions(())(()(((((()(())()()))))()(()))) == 16\nassert solution.minInsertions())((()(())(()(((()))())))()())(())))(()()) == 19\nassert solution.minInsertions())())))((((()))())(()()())))())))(()()))))((()()))(((())(()()()()(())(() == 31\nassert solution.minInsertions())))()))(())((())()) == 11\nassert solution.minInsertions()))))(()()(((()()))))(())(()())()(((()))()(()((())()((((((((((((((()()))((())))(()))((((((((() == 81\nassert solution.minInsertions((()))(()))()))())()()))()))())()()()())((()()()()()(()()())))))()())))(())()((()) == 28\nassert solution.minInsertions((())((())())())())((())))(())(()))()((((()))(()()))()()((()()))())()(()(() == 35\nassert solution.minInsertions())))))() == 5\nassert solution.minInsertions()()()(()()) == 8\nassert solution.minInsertions(())(()())()))))()()())(())(((()(()(()))(()))()()(())))))())()())())((()()((() == 32\nassert solution.minInsertions()(())()((()(())(())))))))(()(()())((((()))(()(()))))))()()))()()))()() == 24\nassert solution.minInsertions()()))(()(())(()))()((()())()))(((()(((((()(()))))(())()() == 37\nassert solution.minInsertions())(()(((()(()()((()((()()))(()))()((()((())()))())()(()))) == 36\nassert solution.minInsertions()()()(())((())(((((()((()()()))) == 26\nassert solution.minInsertions(()(()(()(()()())(())()())(())))) == 14\nassert solution.minInsertions(()((())(()))())))))))))(())()(()())())()(((((())))))())))()(()((()))())()))()))(())(()()((((()))(() == 37\nassert solution.minInsertions())))((()))((()(()()()(())))))()(()))()()()()))(()(()(())))()()(((()())(()()))))(()))())())(()((() == 42\nassert solution.minInsertions(())((()()))))))))) == 4\nassert solution.minInsertions(()(())))()(()))()(())()(((())))(((()()()()()))))))))))(((()))))()))))())((()((())()(((()()))()() == 31\nassert solution.minInsertions())((((()())()()))))()()())()))(((())())))(())(()()())()))((()((()())() == 30\nassert solution.minInsertions(()))(())()))()())))))((()((())(()(((()(())))))))()))())(())()())((()()))() == 29\nassert solution.minInsertions()())()()()))((((())()())())()())(()()())) == 20\nassert solution.minInsertions(((()()()))(()()()()(()()(())))()))()((((()((()()(()))(())()(() == 38\nassert solution.minInsertions(())))()()(()))()))(())()((((((())((()(()())) == 29\nassert solution.minInsertions()(((()(()()())(()())()))(())() == 19\nassert solution.minInsertions((())))(((()())()))))(()()((()()))()()()())(())()))))((()())(())())())))()(()(()())(()))))() == 27\nassert solution.minInsertions()())())))()(())(()))()()))))()(()())() == 14\nassert solution.minInsertions())()()(())(()()(((((())())) == 19\nassert solution.minInsertions())((()())()(((()(())()))())))))))()))((()())(()()(((((()()))))))()))())())(()() == 27\nassert solution.minInsertions()())())(()()))((((()((())((()()())))))(())))()))()()()(())()())((()())))()))))(((())()()(()) == 35\nassert solution.minInsertions())(()()())))(((()(()))()()(())()()) == 17\nassert solution.minInsertions(())()(((()) == 8\nassert solution.minInsertions(()(()(())()() == 9\nassert solution.minInsertions()())))))((((()))()(()((())((())()))))))))(((()))())()()((((()()((())))))()()())(())))() == 37\nassert solution.minInsertions(((())()((()(() == 14\nassert solution.minInsertions()(()(()))))((())())(()(((()))))) == 14\nassert solution.minInsertions((()(())((()))(((((())()()(((()(()()))())) == 29\nassert solution.minInsertions((())))()))())((())(((((()(())))()((())() == 24\nassert solution.minInsertions())(()(()())(((()))((((()((())(()))(())(()()() == 34\nassert solution.minInsertions(()))((())(((())()(())))()()))((((()())((())())(())()(())))(()()(()) == 36\nassert solution.minInsertions()()))(()(())()((())((()((())(()))((((()))))())()((((((()(((()))())()))))()(()))())(()(()()))())()() == 55\nassert solution.minInsertions(()))))())((()))()(()(()()(((((((((()(()())((())))(()))))()((())()))(())())))((()))()))))))(())() == 43\nassert solution.minInsertions()()))()))(((())())(()()(()(()))))(()(((()()()))(())(()(()() == 38\nassert solution.minInsertions()(()(()()()((()()()(()(()((()()))((()(((((())())))) == 40\nassert solution.minInsertions((()()()(()()(((()(()(((((()()()()()((())(()()((() == 48\nassert solution.minInsertions()((()))()()()))))((()))(()())))()(((()()())))()))((()(())() == 26\nassert solution.minInsertions())())))()))((((((()))(((()))(()((((()))(()(()))(()))())(()(())) == 40\nassert solution.minInsertions()()()()((((())))))())(()))()))))()(()())))())(())(()())((() == 20\nassert solution.minInsertions())((()(((())()(())((()()))())(()))()))))(()(())))()(((()((()() == 35\nassert solution.minInsertions(())(((()(() == 11\nassert solution.minInsertions((())()(()((()()))((((((()()()((())()((((((((())())(((()(()(())((()))((()(()())())(() == 73\nassert solution.minInsertions(()())()))((())())((()))((((())))()((()((((())(()) == 33\nassert solution.minInsertions((((()(())))))()))(()())()() == 10\nassert solution.minInsertions(()((()))()))))))))((())()()))))))()(()((()()()(()((()())()((()(())))(()(()((()())()()) == 47\nassert solution.minInsertions()(())(()()(()))())))(()((()(((()()())))((()())()))((((()(())()()()()))(()))(((() == 47",
  "inefficient_solution": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        res = []\n        for i, char in enumerate(s):\n            if char == '(':\n                res.append([i, char])\n        for i, char in enumerate(s):\n            if char == ')':\n                res.append([i, char])\n        ans = 0\n        for i in range(len(res)):\n            if res[i][1] == '(':\n                ans += 1\n            else:\n                if i + 1 < len(res) and res[i + 1][1] == ')':\n                    i += 1\n                else:\n                    ans += 1\n                if i - 1 >= 0 and res[i - 1][1] == '(':\n                    ans += 1\n                else:\n                    i -= 1\n        ans += (len(res) - len(s)) << 1\n        return ans",
  "is_python": true
}