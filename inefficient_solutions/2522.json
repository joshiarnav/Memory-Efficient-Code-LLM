{
  "problem_idx": 2522,
  "task_name": "Partition String Into Substrings With Values at Most K",
  "markdown_description": "\nYou are given a string `s` consisting of digits from `1` to `9` and an integer `k`.\n\n\nA partition of a string `s` is called **good** if:\n\n\n* Each digit of `s` is part of **exactly** one substring.\n* The value of each substring is less than or equal to `k`.\n\n\nReturn *the **minimum** number of substrings in a **good** partition of* `s`. If no **good** partition of `s` exists, return `-1`.\n\n\n**Note** that:\n\n\n* The **value** of a string is its result when interpreted as an integer. For example, the value of `\"123\"` is `123` and the value of `\"1\"` is `1`.\n* A **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"165462\", k = 60\n**Output:** 4\n**Explanation:** We can partition the string into substrings \"16\", \"54\", \"6\", and \"2\". Each substring has a value less than or equal to k = 60.\nIt can be shown that we cannot partition the string into less than 4 substrings.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"238182\", k = 5\n**Output:** -1\n**Explanation:** There is no good partition for this string.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s[i]` is a digit from `'1'` to `'9'`.\n* `1 <= k <= 109`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n",
  "canonical_solution": "class Solution:\n    def minimumPartition(self, s: str, k: int) -> int:\n        @cache\n        def dfs(i):\n            if i >= n:\n                return 0\n            res, v = inf, 0\n            for j in range(i, n):\n                v = v * 10 + int(s[j])\n                if v > k:\n                    break\n                res = min(res, dfs(j + 1))\n            return res + 1\n\n        n = len(s)\n        ans = dfs(0)\n        return ans if ans < inf else -1\n",
  "test_case_generator": "\nimport random\nfrom functools import cache\n\nclass Solution:\n    def minimumPartition(self, s: str, k: int) -> int:\n        @cache\n        def dfs(i):\n            if i >= n:\n                return 0\n            res, v = inf, 0\n            for j in range(i, n):\n                v = v * 10 + int(s[j])\n                if v > k:\n                    break\n                res = min(res, dfs(j + 1))\n            return res + 1\n\n        n = len(s)\n        ans = dfs(0)\n        return ans if ans < inf else -1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = \"\".join(str(random.randint(1, 9)) for _ in range(random.randint(1, 10)))\n    \n    # Generate a random k value\n    k = random.randint(1, int(1e9))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumPartition(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumPartition(s, k) == expected_result\n        print(f\"assert solution.minimumPartition('{s}', {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumPartition('{s}', {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumPartition('811361', 326774060) == 1\nassert solution.minimumPartition('6', 965891689) == 1\nassert solution.minimumPartition('864', 867772698) == 1\nassert solution.minimumPartition('59674219', 963298904) == 1\nassert solution.minimumPartition('9929197295', 354649266) == 2\nassert solution.minimumPartition('39328958', 792745956) == 1\nassert solution.minimumPartition('449628', 201609293) == 1\nassert solution.minimumPartition('8764', 881578450) == 1\nassert solution.minimumPartition('5678867', 611919359) == 1\nassert solution.minimumPartition('467324', 225737595) == 1\nassert solution.minimumPartition('778916', 611755397) == 1\nassert solution.minimumPartition('961741816', 686343930) == 2\nassert solution.minimumPartition('3217583843', 575947953) == 2\nassert solution.minimumPartition('86234845', 796608671) == 1\nassert solution.minimumPartition('33744', 939743018) == 1\nassert solution.minimumPartition('128992', 522070324) == 1\nassert solution.minimumPartition('98788374', 616442319) == 1\nassert solution.minimumPartition('72', 580713893) == 1\nassert solution.minimumPartition('24985', 634845082) == 1\nassert solution.minimumPartition('2331', 501128108) == 1\nassert solution.minimumPartition('94266727', 706067051) == 1\nassert solution.minimumPartition('9', 139341085) == 1\nassert solution.minimumPartition('6796', 779657122) == 1\nassert solution.minimumPartition('8519', 47735885) == 1\nassert solution.minimumPartition('7746', 24330311) == 1\nassert solution.minimumPartition('788476', 739537614) == 1\nassert solution.minimumPartition('81', 167606646) == 1\nassert solution.minimumPartition('8', 656666852) == 1\nassert solution.minimumPartition('764', 748574864) == 1\nassert solution.minimumPartition('91', 988070396) == 1\nassert solution.minimumPartition('9938', 59201892) == 1\nassert solution.minimumPartition('5816454', 237748891) == 1\nassert solution.minimumPartition('2', 294582048) == 1\nassert solution.minimumPartition('647426', 918521206) == 1\nassert solution.minimumPartition('295752', 583583194) == 1\nassert solution.minimumPartition('7484855', 377435474) == 1\nassert solution.minimumPartition('2349143', 165754004) == 1\nassert solution.minimumPartition('482478332', 463664420) == 2\nassert solution.minimumPartition('589', 784740372) == 1\nassert solution.minimumPartition('9235351', 913386819) == 1\nassert solution.minimumPartition('894137284', 72788571) == 2\nassert solution.minimumPartition('294594', 326734754) == 1\nassert solution.minimumPartition('87515496', 674790453) == 1\nassert solution.minimumPartition('6742', 538441482) == 1\nassert solution.minimumPartition('86886', 825080967) == 1\nassert solution.minimumPartition('2985641', 926339268) == 1\nassert solution.minimumPartition('48891982', 168096776) == 1\nassert solution.minimumPartition('859', 501695709) == 1\nassert solution.minimumPartition('184412883', 890495411) == 1\nassert solution.minimumPartition('1', 685299328) == 1\nassert solution.minimumPartition('121', 481807437) == 1\nassert solution.minimumPartition('7869913', 183562876) == 1\nassert solution.minimumPartition('54', 130364797) == 1\nassert solution.minimumPartition('863', 233164506) == 1\nassert solution.minimumPartition('736264213', 641641148) == 2\nassert solution.minimumPartition('455', 467772392) == 1\nassert solution.minimumPartition('41541', 882955344) == 1\nassert solution.minimumPartition('76', 745951456) == 1\nassert solution.minimumPartition('89', 761987276) == 1\nassert solution.minimumPartition('22398', 929443903) == 1\nassert solution.minimumPartition('4195642791', 115004818) == 2\nassert solution.minimumPartition('6385946', 100567184) == 1\nassert solution.minimumPartition('31', 606813665) == 1\nassert solution.minimumPartition('815', 444769042) == 1\nassert solution.minimumPartition('99584', 384291330) == 1\nassert solution.minimumPartition('986677317', 439507946) == 2\nassert solution.minimumPartition('53', 465538620) == 1\nassert solution.minimumPartition('32146228', 998731204) == 1\nassert solution.minimumPartition('8454', 928721508) == 1\nassert solution.minimumPartition('1974938422', 409075630) == 2\nassert solution.minimumPartition('4341279974', 410846630) == 2\nassert solution.minimumPartition('4821268993', 847243691) == 2\nassert solution.minimumPartition('118', 250151331) == 1\nassert solution.minimumPartition('72726292', 834402064) == 1\nassert solution.minimumPartition('8', 946914917) == 1\nassert solution.minimumPartition('39', 839290114) == 1\nassert solution.minimumPartition('72', 63343649) == 1\nassert solution.minimumPartition('7419', 660717214) == 1\nassert solution.minimumPartition('3737775837', 384773691) == 2\nassert solution.minimumPartition('7369523', 779270881) == 1\nassert solution.minimumPartition('3468957', 328764753) == 1\nassert solution.minimumPartition('738577', 681887223) == 1\nassert solution.minimumPartition('761318328', 351096253) == 2\nassert solution.minimumPartition('564557968', 338838623) == 2\nassert solution.minimumPartition('94495', 826350897) == 1\nassert solution.minimumPartition('549', 4519267) == 1\nassert solution.minimumPartition('93984', 970502886) == 1\nassert solution.minimumPartition('3375277459', 942206563) == 2\nassert solution.minimumPartition('73844', 413985790) == 1\nassert solution.minimumPartition('54', 307766815) == 1\nassert solution.minimumPartition('59443374', 937580030) == 1\nassert solution.minimumPartition('4646', 375688525) == 1\nassert solution.minimumPartition('8', 856187099) == 1\nassert solution.minimumPartition('86837619', 174976396) == 1\nassert solution.minimumPartition('4352', 899155632) == 1\nassert solution.minimumPartition('4471', 590647401) == 1\nassert solution.minimumPartition('719', 109219582) == 1\nassert solution.minimumPartition('2943', 855434) == 1\nassert solution.minimumPartition('2636', 117707743) == 1\nassert solution.minimumPartition('983265737', 629462559) == 2",
  "inefficient_solution": "class Solution:\n    def minimumPartition(self, s: str, k: int) -> int:\n        n = len(s)\n        cache = {}\n        def dfs(i):\n            if i >= n:\n                return 0\n            if (i, k) in cache:\n                return cache[(i, k)]\n            res, v = float('inf'), 0\n            for j in range(i, n):\n                v = v * 10 + int(s[j])\n                if v > k:\n                    break\n                res = min(res, dfs(j + 1))\n            cache[(i, k)] = res + 1\n            return res + 1\n\n        ans = dfs(0)\n        return ans if ans < float('inf') else -1",
  "is_python": true
}