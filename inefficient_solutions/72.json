{
  "problem_idx": 72,
  "task_name": "Edit Distance",
  "markdown_description": "\nGiven two strings `word1` and `word2`, return *the minimum number of operations required to convert `word1` to `word2`*.\n\n\nYou have the following three operations permitted on a word:\n\n\n* Insert a character\n* Delete a character\n* Replace a character\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word1 = \"horse\", word2 = \"ros\"\n**Output:** 3\n**Explanation:** \nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word1 = \"intention\", word2 = \"execution\"\n**Output:** 5\n**Explanation:** \nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= word1.length, word2.length <= 500`\n* `word1` and `word2` consist of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for j in range(1, n + 1):\n            f[0][j] = j\n        for i, a in enumerate(word1, 1):\n            f[i][0] = i\n            for j, b in enumerate(word2, 1):\n                if a == b:\n                    f[i][j] = f[i - 1][j - 1]\n                else:\n                    f[i][j] = min(f[i - 1][j], f[i][j - 1], f[i - 1][j - 1]) + 1\n        return f[m][n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for j in range(1, n + 1):\n            f[0][j] = j\n        for i, a in enumerate(word1, 1):\n            f[i][0] = i\n            for j, b in enumerate(word2, 1):\n                if a == b:\n                    f[i][j] = f[i - 1][j - 1]\n                else:\n                    f[i][j] = min(f[i - 1][j], f[i][j - 1], f[i - 1][j - 1]) + 1\n        return f[m][n]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random words\n    word1_length = random.randint(0, 10)\n    word1 = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(word1_length))\n\n    word2_length = random.randint(0, 10)\n    word2 = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(word2_length))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minDistance(word1, word2)\n\n    return word1, word2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word1, word2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minDistance(word1, word2) == expected_result\n        print(f\"assert solution.minDistance('{word1}', '{word2}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minDistance('{word1}', '{word2}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minDistance('tz', '') == 2\nassert solution.minDistance('', 'rqmnmmko') == 8\nassert solution.minDistance('eudremu', 'c') == 7\nassert solution.minDistance('gg', 'o') == 2\nassert solution.minDistance('azmdmuc', 'vpiptuwh') == 7\nassert solution.minDistance('', 'tmkhswynde') == 10\nassert solution.minDistance('zwxyp', 'kzezbxk') == 6\nassert solution.minDistance('kukcac', 'ya') == 5\nassert solution.minDistance('mlrodvkw', 'unvla') == 7\nassert solution.minDistance('mieitiwiat', 'x') == 10\nassert solution.minDistance('udpqdzlugi', 'b') == 10\nassert solution.minDistance('toyp', 'v') == 4\nassert solution.minDistance('g', 'vxty') == 4\nassert solution.minDistance('', 'lbpjvbg') == 7\nassert solution.minDistance('nmpk', 'vyl') == 4\nassert solution.minDistance('ewtuptc', 'rbjjeoqrw') == 9\nassert solution.minDistance('d', '') == 1\nassert solution.minDistance('', 'oqaswjznz') == 9\nassert solution.minDistance('yyxex', 'a') == 5\nassert solution.minDistance('kvbresbls', 'e') == 8\nassert solution.minDistance('jtezjgsre', 'vy') == 9\nassert solution.minDistance('u', 'jpuajnt') == 6\nassert solution.minDistance('t', 'hcaadbkyo') == 9\nassert solution.minDistance('ozgwk', 'wkbgfcchy') == 8\nassert solution.minDistance('ccwau', '') == 5\nassert solution.minDistance('dlacpxbcq', 'jgafqgcn') == 7\nassert solution.minDistance('mlhamwlju', 'ozmsnsy') == 8\nassert solution.minDistance('fynvpmif', 'f') == 7\nassert solution.minDistance('hwdyw', 'sn') == 5\nassert solution.minDistance('rixrygqat', 'yfparebmmd') == 9\nassert solution.minDistance('cqowgtajp', 'ujfab') == 8\nassert solution.minDistance('cfdlwnly', '') == 8\nassert solution.minDistance('mamqoes', 'rdai') == 7\nassert solution.minDistance('lycuyldr', 'okpwgap') == 8\nassert solution.minDistance('', 'zt') == 2\nassert solution.minDistance('xioji', 'tadjmj') == 5\nassert solution.minDistance('jyy', 'hzxifmzl') == 8\nassert solution.minDistance('aknzmckz', 'w') == 8\nassert solution.minDistance('mfzvuwmlqi', '') == 10\nassert solution.minDistance('htazpxdatf', 'umaoplcke') == 8\nassert solution.minDistance('k', 'qecugu') == 6\nassert solution.minDistance('', 'qeoekvam') == 8\nassert solution.minDistance('', 'r') == 1\nassert solution.minDistance('kl', '') == 2\nassert solution.minDistance('fzxo', 'zb') == 3\nassert solution.minDistance('yiankxxmex', 'htdtexaxgf') == 9\nassert solution.minDistance('zysb', 'guklm') == 5\nassert solution.minDistance('pbnxvwhp', 'zc') == 8\nassert solution.minDistance('nied', 'jiinnvq') == 6\nassert solution.minDistance('dygjcgfmq', '') == 9\nassert solution.minDistance('ecqid', 'aqg') == 4\nassert solution.minDistance('a', 'ygrrje') == 6\nassert solution.minDistance('x', 'zlnpruqn') == 8\nassert solution.minDistance('nqnl', 'ogq') == 4\nassert solution.minDistance('npmkjbyh', '') == 8\nassert solution.minDistance('', 'h') == 1\nassert solution.minDistance('peufdmkf', 'poeotbs') == 7\nassert solution.minDistance('', 'jhd') == 3\nassert solution.minDistance('ryfozsihqj', 'zz') == 9\nassert solution.minDistance('qobrbgi', 'hxreeqab') == 8\nassert solution.minDistance('orso', 'yljshcemjm') == 9\nassert solution.minDistance('xtnz', 'bbtjeam') == 6\nassert solution.minDistance('acaxcbnula', '') == 10\nassert solution.minDistance('sil', 'auc') == 3\nassert solution.minDistance('fqllhjyv', 'wtbb') == 8\nassert solution.minDistance('swyrsriou', 'azcwvl') == 9\nassert solution.minDistance('', 'tzksts') == 6\nassert solution.minDistance('f', 'axsb') == 4\nassert solution.minDistance('qcnzqahts', 'jwiokmiime') == 10\nassert solution.minDistance('btittokyuw', 'pxglw') == 9\nassert solution.minDistance('qavy', 'xryxnj') == 6\nassert solution.minDistance('xibxj', 'hde') == 5\nassert solution.minDistance('zqa', 'gbfyutbff') == 9\nassert solution.minDistance('e', 'cviyabac') == 8\nassert solution.minDistance('uahnh', 'm') == 5\nassert solution.minDistance('flha', 'cnbfodu') == 6\nassert solution.minDistance('hmjc', 'yiw') == 4\nassert solution.minDistance('ya', 'jvt') == 3\nassert solution.minDistance('izguwtw', 'p') == 7\nassert solution.minDistance('zspszn', 'syhhvaq') == 7\nassert solution.minDistance('cnjq', 'zo') == 4\nassert solution.minDistance('cpdjd', 'czqfe') == 4\nassert solution.minDistance('sgxlodzy', 'pnuygakgay') == 9\nassert solution.minDistance('xpbdeeq', 'fhrtsvp') == 7\nassert solution.minDistance('rzaei', '') == 5\nassert solution.minDistance('p', 'sxcxsgem') == 8\nassert solution.minDistance('', 'rlhc') == 4\nassert solution.minDistance('omkdg', 'nbefsmd') == 7\nassert solution.minDistance('whvizbgp', 'l') == 8\nassert solution.minDistance('myz', 'dtdusg') == 6\nassert solution.minDistance('jenctcahcz', 'tu') == 9\nassert solution.minDistance('', 'qxl') == 3\nassert solution.minDistance('ocenyjcael', 'iiimmti') == 10\nassert solution.minDistance('kar', 'bkqncit') == 6\nassert solution.minDistance('iaomqudqq', 'a') == 8\nassert solution.minDistance('jzxb', 'eyiahub') == 6\nassert solution.minDistance('bmzzsl', 'zvhlyplo') == 7\nassert solution.minDistance('tarhfbutat', 'jiq') == 10\nassert solution.minDistance('hmlyg', 'jpyf') == 4\nassert solution.minDistance('ff', 'nlkvmvxson') == 10",
  "inefficient_solution": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        f = [[0] * n for _ in range(m)]\n        f_backup = [[0] * n for _ in range(m)]\n        \n        for j in range(n):\n            list1 = [0] * 1000000\n            for i in range(m):\n                list2 = [0] * 1000000\n                if j == 0:\n                    list2 = [i + 1] * 1000000\n                elif i == 0:\n                    list1 = [j + 1] * 1000000\n                else:\n                    list1 = [0] * 1000000\n                    for k in range(1000000):\n                        if word1[i - 1] == word2[j - 1]:\n                            list1[k] = f_backup[i - 1][j - 1]\n                        else:\n                            list1[k] = min(f_backup[i - 1][j - 1] + 1, f_backup[i - 1][j] + 1, f_backup[i][j - 1] + 1)\n                for k in range(1000000):\n                    f[i][j] = list1[k]\n                f_backup = [list(a) for a in f]\n        \n        return min(f[m - 1][n - 1], 1000000000000)",
  "is_python": true
}