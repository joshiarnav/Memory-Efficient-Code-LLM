{
  "problem_idx": 2449,
  "task_name": "Minimum Number of Operations to Make Arrays Similar",
  "markdown_description": "\nYou are given two positive integer arrays `nums` and `target`, of the same length.\n\n\nIn one operation, you can choose any two **distinct** indices `i` and `j` where `0 <= i, j < nums.length` and:\n\n\n* set `nums[i] = nums[i] + 2` and\n* set `nums[j] = nums[j] - 2`.\n\n\nTwo arrays are considered to be **similar** if the frequency of each element is the same.\n\n\nReturn *the minimum number of operations required to make* `nums` *similar to* `target`. The test cases are generated such that `nums` can always be similar to `target`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [8,12,6], target = [2,14,10]\n**Output:** 2\n**Explanation:** It is possible to make nums similar to target in two operations:\n- Choose i = 0 and j = 2, nums = [10,12,4].\n- Choose i = 1 and j = 2, nums = [10,14,2].\nIt can be shown that 2 is the minimum number of operations needed.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,5], target = [4,1,3]\n**Output:** 1\n**Explanation:** We can make nums similar to target in one operation:\n- Choose i = 1 and j = 2, nums = [1,4,3].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1,1], target = [1,1,1,1,1]\n**Output:** 0\n**Explanation:** The array nums is already similiar to target.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length == target.length`\n* `1 <= n <= 105`\n* `1 <= nums[i], target[i] <= 106`\n* It is possible to make `nums` similar to `target`.\n\n\n",
  "canonical_solution": "class Solution:\n    def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n        nums.sort(key=lambda x: (x & 1, x))\n        target.sort(key=lambda x: (x & 1, x))\n        return sum(abs(a - b) for a, b in zip(nums, target)) // 4\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\nclass Solution:\n    def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n        nums.sort(key=lambda x: (x & 1, x))\n        target.sort(key=lambda x: (x & 1, x))\n        return sum(abs(a - b) for a, b in zip(nums, target)) // 4\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers lists\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    target = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.makeSimilar(nums, target)\n\n    return nums, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.makeSimilar(nums, target) == expected_result\n        print(f\"assert solution.makeSimilar({nums}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.makeSimilar({nums}, {target}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.makeSimilar([57, 71, 75], [24, 63]) == 10\nassert solution.makeSimilar([2, 6, 34, 50, 92, 21, 33, 97], [30, 32, 70]) == 22\nassert solution.makeSimilar([8, 48, 56, 62, 80, 86, 9, 43], [24, 60, 84, 100, 7, 37, 75, 93]) == 83\nassert solution.makeSimilar([96, 31, 89], [12, 18, 84, 33, 39, 91]) == 25\nassert solution.makeSimilar([8, 16, 44, 46, 58, 87, 91], [4, 70, 1, 91]) == 36\nassert solution.makeSimilar([6, 12, 34, 50, 64, 84, 27, 77], [2, 6, 32, 36, 90, 7]) == 32\nassert solution.makeSimilar([26, 42, 48, 76, 49, 59, 73], [32, 52, 98, 7]) == 33\nassert solution.makeSimilar([8, 76, 96, 21], [2, 18, 80, 88, 90, 92, 96, 27, 35]) == 36\nassert solution.makeSimilar([20, 22, 48, 60, 84, 1, 11, 31, 49, 71], [14, 40, 42, 29, 93]) == 17\nassert solution.makeSimilar([54, 9, 11, 15, 31], [2, 30, 36, 44, 92, 25, 91]) == 47\nassert solution.makeSimilar([16, 22, 24, 28], [24, 70, 84, 92, 75]) == 45\nassert solution.makeSimilar([8, 12, 30, 72, 84, 7, 37], [14, 28, 32, 36, 62, 100, 35, 45, 83]) == 44\nassert solution.makeSimilar([2, 82, 17, 29, 35, 73, 77, 85, 87, 91], [48, 15, 91]) == 46\nassert solution.makeSimilar([30, 56, 62], [22, 32, 54, 57, 79]) == 10\nassert solution.makeSimilar([6, 58, 66, 94, 9, 15, 25, 33, 63, 81], [28, 70]) == 8\nassert solution.makeSimilar([54, 72, 88, 51, 57], [21, 91]) == 13\nassert solution.makeSimilar([2, 44, 25, 77, 99], [12, 18, 24, 80, 84, 15, 53, 59]) == 13\nassert solution.makeSimilar([32, 75, 87], [8, 100, 17, 47, 51, 65]) == 29\nassert solution.makeSimilar([88, 49], [39, 51, 81, 85]) == 12\nassert solution.makeSimilar([10, 48, 54, 64, 78, 9, 51, 71, 73], [4, 28, 66, 27, 55, 59, 73, 93]) == 48\nassert solution.makeSimilar([14, 24, 30, 42, 52, 5, 25, 47, 51], [16, 48, 52, 58, 62, 74, 80, 1, 51, 77]) == 61\nassert solution.makeSimilar([86, 35, 55], [12, 28, 56, 70, 88, 96, 13, 51, 63]) == 20\nassert solution.makeSimilar([48, 52, 54, 60, 70, 86, 61, 67, 69, 77], [22, 28, 68, 74, 9, 23, 29, 67, 85, 97]) == 67\nassert solution.makeSimilar([80, 94, 15, 37, 45, 49, 89], [76, 31, 65, 75]) == 38\nassert solution.makeSimilar([34, 36, 46, 90, 15], [6, 10, 24, 30, 32, 50, 68, 98, 13, 67]) == 38\nassert solution.makeSimilar([8, 22, 24, 50, 11, 99], [28, 68, 72, 17, 35, 79, 99]) == 47\nassert solution.makeSimilar([16, 68, 76, 80, 21, 57, 81], [34, 40, 90, 100, 25, 51]) == 22\nassert solution.makeSimilar([44, 72, 11, 43, 73, 93], [16, 1, 3, 51]) == 28\nassert solution.makeSimilar([6, 100, 13, 29, 33, 83], [8, 32, 62, 98, 3, 45, 83]) == 64\nassert solution.makeSimilar([57, 89], [48, 17]) == 20\nassert solution.makeSimilar([2, 12, 18, 20, 23, 83, 87], [100, 53, 63, 77, 87]) == 76\nassert solution.makeSimilar([84, 5, 11, 83, 91, 99], [12, 30, 68, 98, 37, 59, 71, 79, 81, 87]) == 65\nassert solution.makeSimilar([20, 36, 7, 41, 43, 63, 73, 87, 97], [12, 64, 82, 15, 29, 55, 83, 93]) == 43\nassert solution.makeSimilar([72, 90, 13, 25, 53, 83, 87, 91, 93], [40, 44, 50, 90, 96, 7, 21, 33, 85, 93]) == 107\nassert solution.makeSimilar([19, 23], [16, 83]) == 15\nassert solution.makeSimilar([12, 28, 70, 74, 9], [14, 32, 80, 41]) == 12\nassert solution.makeSimilar([3, 13], [6, 20, 48, 54, 45]) == 2\nassert solution.makeSimilar([32, 52, 66, 86, 3, 29, 35, 69, 89, 93], [10, 60, 80, 88, 35, 37, 41, 47, 61, 69]) == 41\nassert solution.makeSimilar([22, 32, 78, 96, 7, 85], [54, 3]) == 15\nassert solution.makeSimilar([10, 30, 50, 100, 5, 21, 95, 99], [18, 98]) == 19\nassert solution.makeSimilar([10, 23, 63, 67], [34, 44, 96, 21, 41, 67, 69, 75, 77, 95]) == 31\nassert solution.makeSimilar([24, 28, 56, 65, 67, 81], [8, 10, 28, 42, 33, 37]) == 40\nassert solution.makeSimilar([16, 64, 63], [18, 78, 90, 49, 67, 69, 99]) == 10\nassert solution.makeSimilar([16, 15, 49, 59, 97], [36, 64, 47]) == 17\nassert solution.makeSimilar([14, 16, 28, 52, 64, 23], [3, 81]) == 19\nassert solution.makeSimilar([64, 15, 25, 59, 97], [24, 82]) == 26\nassert solution.makeSimilar([2, 72], [44, 100, 21, 55]) == 17\nassert solution.makeSimilar([30, 78, 82, 96, 5, 29], [44, 96, 69, 85, 93]) == 36\nassert solution.makeSimilar([38, 44, 98, 7, 73, 97], [80, 90, 1, 5, 71]) == 47\nassert solution.makeSimilar([58, 96, 100, 15, 31, 69, 81, 85, 97, 99], [43, 89]) == 5\nassert solution.makeSimilar([54, 57], [48, 66, 72, 43, 53, 57, 85]) == 3\nassert solution.makeSimilar([12, 18, 62, 90, 25, 79, 91], [8, 51, 97]) == 18\nassert solution.makeSimilar([40, 31], [18, 46, 50, 62, 47, 55, 59, 71]) == 9\nassert solution.makeSimilar([32, 38, 42, 58, 60, 84, 100, 5, 7, 93], [4, 34, 70, 72, 86, 49, 79, 87]) == 59\nassert solution.makeSimilar([24, 58, 78, 15, 89, 95], [54, 95]) == 16\nassert solution.makeSimilar([12, 70, 78, 100, 3, 65, 91, 99], [10, 18, 36, 9, 35, 39, 61, 75, 91, 93]) == 74\nassert solution.makeSimilar([10, 32, 70, 86, 15, 43, 51, 61], [16, 31, 41]) == 9\nassert solution.makeSimilar([74, 37], [16, 36, 88, 15, 23, 45, 75, 81]) == 14\nassert solution.makeSimilar([2, 14, 44, 52, 68, 72, 92, 15, 61], [2, 8, 76, 98, 7, 17, 41, 75, 81]) == 82\nassert solution.makeSimilar([24, 15, 37, 55], [58, 66, 84, 23]) == 41\nassert solution.makeSimilar([6, 26, 44, 21, 29, 61, 85], [1, 73]) == 13\nassert solution.makeSimilar([62, 15, 59, 77, 87], [56, 15, 17, 89]) == 15\nassert solution.makeSimilar([24, 46, 53, 71, 87], [8, 16, 22, 68, 70, 72, 74]) == 24\nassert solution.makeSimilar([64, 69], [14, 32, 36, 38, 60, 62, 5, 9, 17, 93]) == 21\nassert solution.makeSimilar([46, 48, 64, 5, 15, 47, 55, 75, 85], [28, 34, 42, 48, 15, 17, 47, 61, 71, 81]) == 40\nassert solution.makeSimilar([24, 98], [30, 74]) == 7\nassert solution.makeSimilar([74, 17, 73, 89], [80, 5, 25, 81]) == 18\nassert solution.makeSimilar([2, 40, 58, 68, 78, 96, 9, 55, 75, 77], [12, 66, 74, 53]) == 16\nassert solution.makeSimilar([16, 52, 66, 98, 19, 37, 83], [18, 32, 58, 68, 86, 100, 25, 47, 53, 63]) == 62\nassert solution.makeSimilar([3, 57, 77], [20, 38, 54, 64, 96, 47]) == 14\nassert solution.makeSimilar([58, 85, 87], [4, 46, 58, 78, 61, 83]) == 30\nassert solution.makeSimilar([4, 10, 26, 96, 17, 23, 43, 73, 85], [100, 65, 75]) == 50\nassert solution.makeSimilar([36, 44, 56, 72, 21, 33, 49, 57, 81, 85], [30, 48, 41]) == 6\nassert solution.makeSimilar([36, 42, 46, 74, 13, 21, 51, 73], [10, 38, 90, 21, 37, 85]) == 53\nassert solution.makeSimilar([4, 34, 36, 46, 62, 25, 35, 65], [80, 29, 31, 85]) == 31\nassert solution.makeSimilar([36, 49, 53, 69], [52, 7, 19, 35, 57, 71, 89]) == 31\nassert solution.makeSimilar([24, 38, 48, 60, 92, 63, 85], [2, 28, 54, 56, 90, 11, 17]) == 41\nassert solution.makeSimilar([34, 58, 92, 23, 79], [10, 20, 78, 92, 3, 87]) == 55\nassert solution.makeSimilar([86, 69], [30, 48, 29, 31, 47, 75, 85]) == 19\nassert solution.makeSimilar([46, 48, 66, 5, 41], [6, 8, 12, 30, 42, 52, 92, 29, 45, 95]) == 40\nassert solution.makeSimilar([11, 59, 69], [6, 42, 70, 98, 7, 11, 13, 23, 33, 45]) == 5\nassert solution.makeSimilar([40, 90, 85], [22, 62, 90, 29, 89]) == 12\nassert solution.makeSimilar([90, 9, 11], [6, 20, 28, 50, 82, 9, 23, 33, 39, 71]) == 28\nassert solution.makeSimilar([22, 30, 82, 49], [4, 40, 80, 7, 25, 43, 61, 85, 95, 97]) == 18\nassert solution.makeSimilar([40, 48, 72, 73], [18, 28, 44, 48, 54, 100, 47, 49, 63, 89]) == 23\nassert solution.makeSimilar([12, 17, 75], [68, 21, 91]) == 19\nassert solution.makeSimilar([10, 50, 62, 76, 86, 13, 31, 95], [4, 34, 42, 62, 74, 84, 5, 19, 29, 57]) == 60\nassert solution.makeSimilar([14, 16, 18, 98, 61, 89], [72, 76, 94, 7, 71, 73, 85]) == 77\nassert solution.makeSimilar([22, 24, 33, 87, 97], [30, 58, 60, 66, 90, 11, 37, 75]) == 24\nassert solution.makeSimilar([32, 56, 98], [46, 96, 27, 33, 87]) == 31\nassert solution.makeSimilar([2, 26, 78, 80, 23, 41, 71, 77, 79, 93], [70, 72, 74, 29]) == 42\nassert solution.makeSimilar([82, 23, 35, 43], [14, 42, 52, 70, 33, 81]) == 32\nassert solution.makeSimilar([16, 70, 84, 1, 5, 73, 95], [38, 44, 5, 57, 67, 83, 89]) == 65\nassert solution.makeSimilar([15, 43, 51], [56, 60, 66, 68, 76, 41, 47]) == 18\nassert solution.makeSimilar([10, 62, 39, 47], [38, 21]) == 17\nassert solution.makeSimilar([32, 62, 68, 90, 3, 43, 57, 89], [8, 28, 42, 56, 1, 59, 75, 79, 85, 93]) == 41\nassert solution.makeSimilar([61, 69, 81], [66, 80, 19]) == 19\nassert solution.makeSimilar([12, 34, 50, 58, 60, 70, 45, 87], [2, 28, 44, 60, 1, 29, 81, 93]) == 41\nassert solution.makeSimilar([8, 82, 90, 71, 87], [42, 52, 54, 80, 17]) == 44\nassert solution.makeSimilar([38, 70, 9, 17, 93, 99], [20, 97, 99]) == 33",
  "inefficient_solution": "class Solution:\n    def makeSimilar(self, nums: List[int], target: List[int]) -> int:\n        nums_count = {i: 0 for i in range(107)}\n        target_count = {i: 0 for i in range(107)}\n        \n        for num in nums:\n            nums_count[num] += 1\n        \n        for num in target:\n            target_count[num] += 1\n        \n        diff = 0\n        operations = 0\n        \n        while diff < len(nums):\n            if nums_count[diff] < target_count[diff]:\n                diff += 1\n            else:\n                operations += (nums_count[diff] - target_count[diff]) // 2\n                nums_count[diff // 2] += (nums_count[diff] - target_count[diff]) // 2\n                nums_count[diff + 1] -= (nums_count[diff] - target_count[diff]) // 2\n                target_count[diff // 2] += (nums_count[diff] - target_count[diff]) // 2\n                target_count[diff + 1] -= (nums_count[diff] - target_count[diff]) // 2\n                diff += 1\n        \n        return operations",
  "is_python": true
}