{
  "problem_idx": 2593,
  "task_name": "Find Score of an Array After Marking All Elements",
  "markdown_description": "\nYou are given an array `nums` consisting of positive integers.\n\n\nStarting with `score = 0`, apply the following algorithm:\n\n\n* Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.\n* Add the value of the chosen integer to `score`.\n* Mark **the chosen element and its two adjacent elements if they exist**.\n* Repeat until all the array elements are marked.\n\n\nReturn *the score you get after applying the above algorithm*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,4,5,2]\n**Output:** 7\n**Explanation:** We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].\n- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].\n- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].\nOur score is 1 + 2 + 4 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,5,1,3,2]\n**Output:** 5\n**Explanation:** We mark the elements as follows:\n- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].\n- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].\n- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].\nOur score is 1 + 2 + 2 = 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def findScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        vis = [False] * n\n        q = [(x, i) for i, x in enumerate(nums)]\n        heapify(q)\n        ans = 0\n        while q:\n            x, i = heappop(q)\n            ans += x\n            vis[i] = True\n            for j in (i - 1, i + 1):\n                if 0 <= j < n:\n                    vis[j] = True\n            while q and vis[q[0][1]]:\n                heappop(q)\n        return ans\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\ndef generate_test_case() -> (List[int], int):\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 1000001), random.randint(1, 100))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findScore(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findScore(nums) == expected_result\n        print(f\"assert solution.findScore({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findScore({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findScore([582032, 137642, 796331, 936649, 554498, 290756, 634416, 666753, 211828, 39318, 736307, 390820, 663375, 832058, 361520, 222217, 774865, 424564, 212934, 345332, 754406, 72640, 861922, 926645, 150210, 335179, 474086, 590783, 436943, 893908, 312150, 507152, 543651, 143487, 245674, 396739, 108745, 778681, 396863, 817017, 550172, 641742, 580870, 819326, 949399]) == 7904712\nassert solution.findScore([54256, 765512, 779307, 520736, 75833, 112105, 190683, 636802, 203166, 760927, 81855, 390090, 949328, 539146, 879493, 407371, 702095, 357981, 552327, 418496, 432132, 627141, 981435, 528553, 734001, 629126, 125339, 879250, 823811, 54655, 619801, 101548, 490501, 513326, 731144, 335502, 236836, 392509, 933753, 214667, 383793, 630794, 36589, 600870, 453283, 533020, 53752, 562834, 10704, 898311, 301956, 483503, 358815, 163170, 411103, 82101, 773915, 602759, 920040, 330353, 969853, 655873, 317936, 499202, 319349, 165364, 727281, 760365, 350208, 300511, 592791, 115507, 219706, 949521, 208770, 349607, 285172, 182444, 778812, 682378, 503905, 350831, 465842, 114757]) == 10743689\nassert solution.findScore([604495, 187624, 688189, 420205, 660412, 362956, 468803, 327341, 688350, 592513, 723017, 933998, 430576, 783934, 536013, 979982, 184479, 208666, 153804, 705155, 926670, 974995, 891273, 230855, 275003, 974676, 853521, 703581, 630383, 183106, 697370, 714130, 912512]) == 6928529\nassert solution.findScore([977405, 873813, 388855, 287541, 839030, 86523, 887882, 428732, 24379, 895236]) == 1272256\nassert solution.findScore([614866, 716158, 492328, 967198, 95702, 609630, 783804, 766119, 808618, 957997, 419062, 260180, 439557, 717543, 420726, 365829, 902492, 447363, 292171, 406792, 674152, 509290, 704414, 22582, 783778, 32037, 528104, 199502, 137597, 324168, 475469, 748292, 894731, 993806, 882952, 258607, 971010, 53450, 156770, 361529, 307651, 782175, 218011, 605892, 422675, 681366, 435264]) == 8330099\nassert solution.findScore([362088, 511465, 451315, 301241, 925319, 759895, 319270, 515776, 62813, 102824, 278052, 174815, 628276, 892921, 183169, 861437, 510890, 578394, 284169, 424678, 559981, 861741, 464774, 192550, 849803, 348933, 948995, 484903, 432141]) == 3732060\nassert solution.findScore([944689, 339505, 617117, 858667, 53273, 182300, 403037, 56654, 824608, 421592]) == 871024\nassert solution.findScore([662432, 973091, 752525, 391178, 770510, 330577, 269573, 707886, 421955, 914204, 492947, 767658, 632602, 849515, 58326, 855740, 321443, 598947, 370049, 861508, 253429, 445976, 589356]) == 4463290\nassert solution.findScore([238768, 716545, 870222, 623061, 442164, 600301, 167951, 804773, 714757, 180248, 193627, 958983, 135095, 77150, 152837, 696766, 614490, 448254, 458010, 95704, 11485, 964202, 929209, 843583, 987531, 377173, 557119, 143073, 944525, 724542, 885486, 302270, 438926, 207333, 85756, 845208, 454121, 86160, 499854, 387873, 670755, 788112, 397255, 136353, 336793, 199899, 371492, 260559, 232647, 865481, 197856, 373077, 736709, 988350, 226110, 88305, 543646, 885984, 786440, 860499, 569367, 181879, 384086, 695190, 473715, 864690, 60541, 505885, 148604, 980178, 867448, 716732, 951760, 313499, 595071, 963411, 110352, 80286, 3905, 24526, 24936, 133467, 928176, 573409, 339703, 109368, 320649, 62329]) == 12988011\nassert solution.findScore([28752, 405154, 817756, 997461]) == 846508\nassert solution.findScore([572590, 907429, 81308, 811775, 169324, 876475, 776196, 832484, 694601, 88711, 224009, 565526, 417995, 620724, 714388, 445270, 405857, 675401, 411528, 598248, 640265, 514668, 323760, 544021, 298888, 879928, 60380, 330256, 672695, 177253, 708418, 415276, 359484, 952357, 164304, 606195, 149563, 496325, 217910, 967121, 623929, 666216, 720413, 477535, 76049, 195239, 384302, 145232, 519705, 416256, 310634, 961580, 93288, 431593, 506593, 679528, 468050, 422084, 507083, 577657, 321684, 720060, 487064, 405259, 786129, 555056, 816987, 142421, 136798, 331081, 974987, 712140, 45521, 204287, 279841, 23034, 551837]) == 11390265\nassert solution.findScore([408020, 560606, 593233, 109643, 40127, 753623, 869122, 86680, 771075, 1019, 121317, 60122, 372555, 676550, 136632, 848148, 132113, 90426, 682506, 846102, 370050, 781236, 568387, 97470, 104020, 56221, 181589, 509276, 914138, 857671, 445285, 848081, 804906, 266099, 421611, 196115, 147885, 10974, 285184, 147815, 838479, 867358, 222623, 222725, 255551, 356258, 640861, 727309, 143822, 47554, 616445, 256948, 935319, 126102, 720628, 167599, 8156, 357759, 693459, 735459, 443806, 348852, 62671, 922139, 83644, 52184, 652105, 694086, 7363, 74097, 792741, 357127, 417753, 532795, 452988, 835284, 961433, 36853, 740304, 408801, 361701, 528242, 842652]) == 8384163\nassert solution.findScore([743675, 724989, 438928, 71088, 349105, 886501, 286137, 698787, 764611, 59040, 634481, 746971, 308366, 977062, 428602, 39290, 245617, 74299, 802668, 741275, 721600, 40023, 763875, 713975]) == 3058482\nassert solution.findScore([699907, 763746, 727060, 238982, 969116, 592057, 480043, 255867, 721078, 55869, 740270, 510997, 331661, 788247, 733402, 305073, 379488, 340967, 278795, 15837, 515730, 913064, 329541, 549373, 569930, 408515, 24077, 580110, 898408, 648033, 448341, 356157, 390391, 417518, 874446, 725200, 502634, 739691, 634647, 343700, 277980, 883521, 427875, 961418, 956468]) == 7981080\nassert solution.findScore([690224, 558642, 25513, 398522, 459752, 718534, 728342, 154802, 681407, 352429, 447646, 641522, 596622, 19393, 182312, 671005, 61168, 941346, 669855, 583837, 6620, 134776, 723364, 924654, 256898, 387506, 386040, 802248, 769141, 450397, 137582, 850352, 7431, 406124, 145978, 824691, 734534, 509246, 950918, 872178, 610776, 906629, 399909, 714659, 225530, 187408, 347995, 902677, 970179, 568912, 505316, 270157, 395907, 874009, 27012, 612901, 851306, 87953, 169150, 60493, 437157, 902199, 17380, 449228, 263910, 862225, 186511, 874334, 517472, 994545, 700608, 879809, 958970, 715316, 134183, 61956, 660360, 644494, 14267, 910091, 479412, 243955, 357081, 448336, 428236, 843387]) == 12281866\nassert solution.findScore([674084, 165515, 506445, 390561, 934279, 883434, 362, 867234, 16665, 299546, 834571, 461604, 656230, 111492, 414203, 979126, 761028, 854285, 484812, 975797, 307540]) == 2699579\nassert solution.findScore([806662, 553945, 716878, 311072, 189432, 114900, 193181, 631646, 847320, 54386, 814226, 798343, 374061, 922418, 40813, 945540, 883372, 813142, 149216, 940738, 200998, 133424, 883053, 474127, 341580, 953219, 801148, 681934, 147853, 503548, 500709, 4701, 194375, 174631, 397148, 282991, 427047, 348552, 297693, 792952, 66563, 288798, 287012, 375276, 102018, 243781, 499749, 564660]) == 6252774\nassert solution.findScore([490954, 754302, 656186, 557776, 206303, 606289, 608035, 20, 531248, 644373, 798731, 347031, 454712, 924642, 269483, 730703, 474194, 693396, 682284, 403050, 996917, 187171, 463532, 766378, 242740, 356859, 278400, 409284, 553378, 449515, 376083, 245732, 280642, 249923, 851118, 195010, 419565, 864273, 517078, 788596, 857133, 790026, 671186, 809961, 296824, 156063, 221614, 331267, 747844, 163305, 405051, 830079, 786048, 649248, 123584, 393685, 308766, 115658, 125588, 53836, 754356, 142618, 319212, 705661, 887303, 44800]) == 10008322\nassert solution.findScore([397124, 798154, 937806, 685293, 200996, 874816, 477676, 893785, 176016, 460069, 657203, 17002, 637264, 123953, 886484, 440024, 364086, 474975, 945453, 994878, 859836, 369774, 288083, 899121, 346208, 532322, 653342, 483598, 681703, 562884, 203078, 212304, 978161, 467730, 21367, 115573, 188356, 57818, 660590, 539341, 725140, 980673, 646359, 66675, 380635, 946659, 98876, 258299, 835739, 4043, 117148, 155393, 519473, 623558, 575479]) == 9298741\nassert solution.findScore([230262, 174065, 949257, 622404, 30562, 35997, 698341, 334416, 599416, 1787, 820457, 11852]) == 552682\nassert solution.findScore([432919, 214351, 819497, 126043, 798440, 928352, 946194, 986568, 355068, 715789, 863909, 676608, 540246, 127767, 302054, 91876, 815968, 803892, 318386, 110296, 236296, 633740, 221927, 588085, 755755, 640433, 160373, 371810, 718862, 806816, 754129, 257714, 928701]) == 5548884\nassert solution.findScore([800095, 268993, 756296, 142149, 504146, 264445, 177478, 875632, 327260, 997295, 20348, 427321, 88386, 332387, 62562, 63238, 118487, 152246, 807606, 563372, 739070, 681520, 483350, 487839, 146820, 769217, 489951, 925395, 389984, 465097, 876982, 257090, 441697, 86885, 749053, 333882, 854594, 597360, 385637, 687631, 151178, 309084, 205029, 388951, 443901, 384552, 532699, 111626, 233031, 588722, 237106, 456854, 998310, 110475, 323166, 631443, 247312, 673600, 194341, 340322, 477945, 777970, 517494, 488156, 212062, 421784, 901334, 490683, 274905, 640922, 180592, 587884, 967613, 891114, 18336, 373494, 32460, 179212, 97550, 106829, 974982, 135522, 979933, 138473, 107625, 297376, 738070, 152886, 238927, 833820, 299934, 613190, 936678, 531308, 705552, 43840, 390019]) == 10935659\nassert solution.findScore([605745, 385579, 703260, 387770, 397054, 185610, 115339, 800713, 398157, 99450, 323765, 348160, 752999, 762219, 957692, 970699, 287778, 16089, 165391, 941385, 45160, 146361, 785869, 663682, 507640, 300501, 592123, 866012, 877066, 756500, 85938, 925049, 2852, 549547, 923785, 764305, 40381, 225248, 166099, 312783, 294209, 68377, 84, 819328, 995063, 276757, 286798, 88920, 175623, 54572, 426683, 661641, 529770, 431280, 472882, 906371]) == 8893549\nassert solution.findScore([341349, 19171, 625357, 151335, 740388, 970018, 569834, 740537, 158525, 893417, 476417, 165819, 774699, 446701, 83551, 877818, 659481, 615506, 908917, 313554, 489486, 318312, 976569, 541003, 503439, 572402, 843512, 838884, 881155, 693016, 331148, 106857, 637727, 659800, 289068, 729783, 563300, 697634, 942959, 560197, 898927, 973830, 175401, 365408, 822152, 913716, 135186, 185477, 262117, 732020, 272482, 954900, 939668]) == 8557374\nassert solution.findScore([703471, 651846, 688560, 420312, 469019, 384546, 200908, 716998, 136447, 938941, 830478, 609259, 455997, 860432, 127509, 679982, 689225, 719903, 56938, 580492, 998499, 375036, 824693, 262227, 727056, 501841, 630957, 452062, 619694, 781674, 918512, 109574, 572936, 811113, 266208, 756298, 697913, 200832]) == 6519114\nassert solution.findScore([923128, 840570, 794040, 56548, 387865, 856826, 179330, 70895, 593078, 345600, 732909, 555036, 781880, 850452, 870917, 911520, 758451, 422066, 174957, 81546, 191473, 937127, 866398, 336854, 256923, 913364, 145945, 814253, 83690, 437758, 607079, 799491, 266606, 594553, 856854, 155697, 388894, 933647, 526724, 852714, 312196, 91727, 73957, 739457, 635185, 524466, 259367, 967676, 681570, 513689, 245810, 308577, 126832, 829216, 984429, 61651, 113707, 122145, 966006, 486195, 687200, 704485]) == 11609514\nassert solution.findScore([897624, 397673, 890940, 584499, 686508, 306165, 437433, 509501, 280558, 382546, 231339, 971472, 277422, 691051, 949334, 629222, 590780, 170314, 254190, 858103, 312121, 308404, 757335, 493518, 266036, 910659, 201161, 856190, 781206, 243331, 641636, 985272, 420844, 664902, 663092, 471250, 279830, 207913, 97035, 100456, 42834, 941113, 111600, 292161, 225115, 398751, 988861, 744111, 301187, 344908]) == 7884625\nassert solution.findScore([832742, 500476, 147511, 258507, 679816, 91682, 633781, 283455, 683488, 908455, 855875, 250412, 905453, 813254, 935736, 420655, 29984, 902413, 27986, 867493, 533470, 278529, 984928, 495634, 313059, 15394, 444149, 269031, 733814, 76422, 478690, 277120, 534932, 282383, 556486, 578062, 821900, 519788, 233490, 408326, 198959, 194136, 369630, 870158, 344211, 68808, 872286, 894496, 334909, 790181, 401265, 485494, 615162, 780731, 900959, 358702, 458745, 799591, 103224, 313117, 45032, 38847, 714218, 291472]) == 9168229\nassert solution.findScore([7858, 743739, 901190, 398104, 372101, 998267, 351290, 583356, 786840, 874131, 986686, 349343, 968873, 740941, 190094, 572350, 1317, 26918, 908996, 497904, 569111, 299145, 324505, 248417, 338969, 852758, 209870, 310029, 692389, 545085, 420243, 742521, 978687, 152374, 788734, 912678, 359351, 979626, 593399, 370352, 406732]) == 6210078\nassert solution.findScore([689353, 946755, 697596, 558224, 424605, 885960, 513347, 833213, 880454, 9067, 293151, 138443, 901348, 597927, 240617, 888032, 856537, 910346, 864421, 809227, 626424, 283440, 186180, 589310, 986527, 458569, 786492, 406600, 986781, 697015, 908407, 359720, 453735, 462142, 370014, 815092, 404265, 179132, 622443, 967268, 632038, 838720, 470145, 525325, 867185, 670073, 849658, 972307, 140183, 303746, 130137, 373397, 919682, 660725, 637630, 407715, 896757, 173922, 838558, 348087, 994131, 878673, 46119, 491229, 128861, 23486, 140824, 733869, 348742, 507373, 726838, 629484, 386379, 433215, 329691, 360553, 353510, 681840, 639110, 252646, 331395, 792004, 473255, 966975, 358767, 749628, 22791, 484905, 731281]) == 15404170\nassert solution.findScore([787366, 518522, 67564, 422928, 564310, 272894, 751032, 806795, 311442, 707987, 913573, 288896, 599705, 985114, 103379, 804588, 977365, 712719, 432203, 880841, 881532, 848579, 483549, 974024, 776797, 804320, 265579, 531537, 382480, 829229, 109850, 331543, 315535, 772065, 240261, 255520, 599856, 451454, 521744, 137324, 958416, 287597, 552459, 679099, 61374, 894100, 208410, 59063, 126182, 162764, 269164, 543980, 737462, 29059, 491740, 944417, 725840, 890030, 54629, 382988, 479949, 750413, 605508, 60986, 273889, 805807, 722983, 204321, 274082, 663221, 524486, 53055, 747046, 796782, 952835, 832170, 170634, 642122, 75676, 239414, 676920, 72229]) == 12592436\nassert solution.findScore([166988, 624975, 295566, 633337, 234344, 764632, 316742, 316611, 501665, 816124, 800163, 30321, 349977, 962503, 974844, 546760]) == 3369217\nassert solution.findScore([459673, 221172, 704090, 895112, 477847, 283084, 970958, 881025, 803536, 992094, 590911, 548191, 442334, 697489, 905310, 379393, 311760, 415629, 888774, 218002, 675669, 440595, 747018, 636941, 234599, 211559, 104652, 318546, 219239, 679921, 186640, 783198, 792160, 830153, 726428, 760610, 12311, 400254, 443129, 34883, 309410, 777333, 563128, 857736, 59879, 974853, 282677, 24657, 838915, 739613, 789174, 396573, 36546]) == 8846551\nassert solution.findScore([523901, 137651, 665804, 627705, 955660, 413807, 117297, 235020, 873124, 992601, 286290, 865276, 292030, 284220, 263178, 869863, 931066, 841206, 652073, 283267, 831767, 574551, 396537, 304372, 139748]) == 4258033\nassert solution.findScore([925468, 739288, 169392, 946010, 895729, 931064, 545322, 931706, 856077, 203323, 567029, 957059, 271279, 756610, 729286, 55936, 492967, 894108, 772009, 80317, 97623]) == 4040874\nassert solution.findScore([598139, 203855, 463959, 210769, 832895, 484214, 383945, 269458, 890066, 532437, 85981, 610628, 656359, 58655, 716718, 24904, 748567, 349246, 925160, 496851, 858591, 367058, 149070, 163782, 689857, 504291, 499562, 514933, 779655, 325854, 246168, 537706, 643598, 475089, 668945, 204109, 723332, 343764, 152023, 949251, 275331, 470184, 425990, 420780, 380567, 620832, 142881, 955631, 121993]) == 6726228\nassert solution.findScore([637222, 212588, 352783, 123201, 572717, 978032, 870927, 113749, 773912, 395681, 768534, 570860, 698655, 203346, 289563, 381296, 318690, 204207, 285204, 847022, 830606, 557296, 861849, 238672, 431967, 963906, 291623, 608443, 382881, 661033, 419128, 153200]) == 5653654\nassert solution.findScore([518822, 851603, 333393, 813148, 305899, 521696, 724829, 160636, 505179, 989499, 809543, 683758, 653756, 824205, 434208, 925336, 496887, 596496, 486102, 638335, 950494, 331716, 339570, 991452, 237633, 856953, 177789, 129270, 136970, 729427, 778728, 821799, 257877, 454448, 970899, 27113, 960888, 606553, 132063, 934010, 202840, 903413]) == 6247185\nassert solution.findScore([216893, 210835, 129604, 127524, 233088, 703402, 339155, 762656, 9431, 840023, 882027, 756965, 583500, 393130, 256252, 637128, 62144, 198253, 990939, 885539, 480156, 754105, 854771, 999333, 818758, 394657, 204343, 376114, 502217, 789833, 845116, 13705, 247970, 614822, 751071, 537533, 86555, 418745, 25467, 800144, 838542, 642172, 823821, 333428, 998659, 991209, 69319, 265194, 623096, 473732]) == 8581252\nassert solution.findScore([396802, 41754, 817650, 377093, 699625, 270369, 265451, 778934, 486243, 613764, 429254, 343182, 597594, 890238, 875116, 215398, 931432, 439383, 801492, 611942, 483810, 872248, 162061, 483435, 259133, 860906, 921195, 601186, 15937, 930583, 494625, 996221, 177818, 687724, 16071, 211243, 746861, 509650, 409005, 643842, 465314, 409864, 964170, 48280, 456846, 388939, 10737, 615084, 601522, 468767, 111678, 946092, 386269, 227617, 215583, 780777, 415436, 380704, 264507, 733612, 85389, 650455, 570712, 363693, 819546, 549025, 287300, 363050, 11682, 131963, 172667, 596919, 771343, 188149, 319368, 11663, 313963, 99299, 550261]) == 10428976\nassert solution.findScore([44351, 917227, 475095, 835992, 927526, 850535, 12122, 286593, 788735, 39875, 2706, 776405, 588873, 674118, 736558, 649908, 419177, 702576, 369539, 57360, 437935, 700635, 896061, 281465, 453709, 8824, 704153, 141024, 408668, 887720, 854741, 419776, 689164, 680050, 709988, 645029, 85715, 484915, 678900, 568775, 934895, 198263, 358996, 718440, 392554, 217204, 269277, 899767, 375727, 571879, 745039, 413208, 144230, 68774, 986774, 848334, 830555, 282234, 98310, 503686, 954442, 462821, 497363, 702590, 927045, 854269, 201984, 639344, 495916, 185731, 602945, 746979, 773809, 126322, 70620, 95407, 426323, 709150, 27882, 449711, 992010, 526857, 82497, 753331, 422232, 302368, 699294, 320082, 983228, 588309, 533341, 813238, 104631, 277370, 719792, 891130, 521467, 635983]) == 17148086\nassert solution.findScore([940206, 451808]) == 451808\nassert solution.findScore([303139, 742807, 689675, 996039, 949203, 995454, 553391, 850745, 602672, 501626, 887901, 630767, 869642, 737235, 40419, 828327, 780372, 230743, 516312, 451969, 341982, 459021, 159790, 62299, 370830, 360516, 236974, 514083, 603365, 182533, 548942, 154677, 232945, 693752, 329923, 283605, 436689, 943825, 974016, 203163, 398591, 454988, 481403, 363706, 952606, 509448, 85241, 457846, 170246, 258094, 598157, 299984, 9806, 323079, 173092]) == 8857009\nassert solution.findScore([409729, 837794, 772210, 935416, 487517, 77447, 694624, 364450, 485950, 452493, 508104, 402380, 879225, 809934, 424690, 727924, 555879, 299420, 139968, 158105, 447838, 862334, 611335, 737076, 605247, 108422, 942986, 677034, 824419, 39459, 308298, 921977, 795775, 923504, 855851, 273139, 392487, 964305, 537998, 310987, 522242, 79692, 426676, 565397, 591701, 663547, 692491, 972148, 688469, 174057, 123412, 753190, 115081, 409024, 737770, 35635, 311320, 916767]) == 11015540\nassert solution.findScore([961927, 73336, 121476, 132396, 648338, 969496, 968009, 735087, 184976, 984147, 969194, 432036, 537141, 681407, 33839, 460786, 271765, 789142, 152498, 134978, 411503, 969441, 300642, 259820, 482444, 828126, 330161, 958896, 333802, 288486, 297199, 922355, 392809, 225986, 623874, 674957, 358838, 230467, 977268, 569463, 537638, 511680, 914713, 995493, 69366, 715604, 661886]) == 7945403\nassert solution.findScore([3329, 365122, 881082, 389660, 175617, 123202, 681699, 818341, 359808, 836037, 289762, 62539, 971453, 704475, 865515, 898340, 711974, 351372, 480901, 430829, 51032, 825141, 146590, 300770, 525099, 939629, 121254, 412424, 289450, 743164, 686776, 113875, 668291, 723420, 116636, 144394, 625642, 226395, 820967, 673590, 915620, 478272, 265889, 740167, 996438, 934497, 98173, 249755, 89692, 705754, 426814, 76760, 860256, 676644, 68277, 656784]) == 6751875\nassert solution.findScore([788717, 9343, 385791, 891680]) == 901023\nassert solution.findScore([433804, 352131, 517106, 123735, 439729, 880745, 908776, 523611, 910080, 660728, 890706, 46266, 19516, 716142, 142839, 79125, 944421, 793780, 558985, 441917, 277693, 190812, 617788, 31323, 690324, 81825, 833187, 138157, 30764, 309136, 518922, 324709, 786150, 623168, 605116, 174297, 96783, 248481, 229677, 269003, 122469, 409411, 154699, 312194, 639123, 724350, 199897, 598601, 147759, 72420, 484744, 879279, 662029, 33855, 427884, 638338, 803125, 774676, 88861, 763511, 455024, 534418, 732385, 17548, 403990, 26673, 233558, 136536, 115207, 99463, 484240, 377254, 35762, 272859, 739454, 855849, 553428, 932627, 627050, 640281, 705576, 991509, 328807, 58199]) == 11749951\nassert solution.findScore([613637, 351310]) == 351310\nassert solution.findScore([509141, 223031, 144709, 610497, 817049, 191990, 13183, 653523, 43245, 566673, 734278, 868673, 820369, 67400, 865400, 464521, 721021, 447443, 333314, 685557, 736044, 763666, 891498, 832552, 368790, 415294, 174779, 956103, 444975, 360528, 977270, 50136, 449925, 395572, 160389, 150371, 933290, 330271, 641373, 342833, 882866, 753013, 505534, 669681, 658570, 279236, 54837, 23478, 742405, 257224, 677588, 874709, 946706, 491161, 92114, 309152, 776027, 737115, 788907, 739051]) == 10436123\nassert solution.findScore([423847, 531067, 18894, 255063, 698027, 988406, 326998, 141825, 426083, 673052, 269344, 578463, 708235, 667584, 24428, 123245, 37815, 930297, 32637, 763872, 37233, 786914, 282021, 280870, 742086, 730265, 256792, 96652, 300030, 390669, 224248, 715858, 751486, 670174, 524382, 143492, 651321, 865529, 592398, 931121, 454510, 586297, 248554, 35775, 53019, 122683, 74416, 418755, 236542, 172033, 38226, 784789]) == 5969853\nassert solution.findScore([3514, 441343, 370697, 419111, 634536, 41763, 4104]) == 1012851\nassert solution.findScore([470827, 179583, 225301, 674467, 481487, 718149, 752412, 643985, 1558, 398359, 320100, 988152, 504224, 481413, 681921, 795345, 733048, 584443, 178906, 423789, 569305, 948435, 457654, 17502, 614581, 790916, 945342, 698607, 25737, 550028, 373068, 957119, 203350, 833280, 748888, 784814, 552531, 642221, 127773, 439573, 221022, 340200, 823512, 772429, 570477, 879732, 392026, 351239, 516542, 612248, 907070, 936989, 865259, 209026, 943619, 223890, 308837, 773177, 73039, 67548, 829847, 607376, 917603, 637130, 42950, 514407, 633406, 128166, 280914, 676942, 102602, 312493, 588408, 234854, 65488, 801162, 400334, 475171, 952843]) == 14214872\nassert solution.findScore([797259, 889111, 183680, 817082, 240714, 67060, 844841, 922385, 677347, 609353, 360607, 290059, 364870, 572905, 542379, 651127, 125189, 825, 739589, 808834, 379187, 198169, 322979, 85318, 462736, 817727, 774250, 148327, 377442, 2774, 502168]) == 5474149\nassert solution.findScore([569198, 923617, 839429, 63810, 776480, 942386, 997269, 425380, 65721, 272300, 941328, 129406, 187373, 963830, 289879, 969727, 936008, 630424, 889794, 605758, 288433, 292573, 553602, 294092, 802225, 630520, 378639, 163609, 343857, 349445, 147344, 871977, 386623, 436030, 139053, 551229, 191525, 800768, 758212, 801009, 831958, 510203, 453852, 892139, 53386, 695291, 52137, 545721, 253658, 724058, 270507, 119423, 679473, 438729, 858322, 259263, 784439, 532038, 183349, 303758, 265886, 495181, 976643, 913473, 533325, 612672, 2625, 337455]) == 10114469\nassert solution.findScore([798320, 838385, 575444, 435372, 700274, 300422, 727763, 275867, 283038, 164303, 111083, 505021, 499406, 912484, 192651, 760550, 897380, 834729, 879883, 760545]) == 4208395\nassert solution.findScore([677120, 528759, 602213, 342482, 164118, 955762, 167851, 777197, 135249, 519578, 598823, 422862, 972054, 378600, 537006, 603352, 279889, 695043, 814123, 721951, 735359, 895945, 622535, 674825, 566947, 46760, 998462, 724422, 739632, 98158, 205436, 759463, 94908, 657194, 549296, 258610, 436807, 875828, 969595, 376015, 105464, 484836, 243570, 910359, 471141, 516600]) == 6340675\nassert solution.findScore([973622, 513045, 744047, 536098, 756876, 468034, 97558, 384171, 95054, 133530, 835175, 757770, 336493, 121515, 626432, 163094, 117324, 744617, 345226, 970944, 572367, 551442, 475674, 948869, 240751, 944105, 685735, 856948, 718580, 230157, 86753, 215248, 454961, 450702, 810331, 455687, 550033, 423056, 448455, 476449, 599065, 807358, 395640, 705009, 343304, 223467, 201700, 530116, 540162, 923872, 392010, 410621, 274915, 256889, 194675, 503746, 99439, 959500, 862631, 498968, 378053, 853918, 260436, 782787, 605210, 210617, 117249, 150977, 480669, 728641, 87460, 895067, 732098, 536513, 981284, 248773, 787931, 552374, 353768, 436011, 899762, 629179, 770636, 400651, 729945, 443667, 825431, 273622, 382408, 364211, 746325, 883643, 113083, 810265, 46303, 943467, 601796, 273631, 888959, 78522]) == 16164820\nassert solution.findScore([730015, 668985, 110544, 488795, 258086, 698173, 913938, 673201, 296861, 733552, 49142, 907787, 777578, 474852, 559808, 491080, 477882, 22640, 784100, 908419, 901919, 160266, 298974, 946824, 429995, 984250, 345021, 710426, 719243, 297164, 6070, 130437, 336606, 905222, 402580, 978467, 687700, 382396, 142803]) == 7485861\nassert solution.findScore([988170, 78783, 798223, 803687, 319131, 261129, 787802, 330716, 339321, 905443, 627833, 39591, 643125, 495730, 454353, 139760, 58435, 783303, 762363, 38156, 6087, 953523, 768333, 63540, 817790, 274, 581850, 117258, 918259, 665972, 245713, 870883]) == 4127372\nassert solution.findScore([904851]) == 904851\nassert solution.findScore([830880, 99611, 77072, 162513, 138119, 112124, 143905, 189591, 43338, 923907, 334691, 690610, 506330, 822013, 41007, 69736, 625247, 9958, 224981, 357409, 818485, 240684, 154906, 180483, 881934, 510779, 883569, 295692, 549332, 222546, 682496, 47902, 280128, 845538, 375347, 790721, 949835, 596463, 917405, 412536, 206012]) == 4722456\nassert solution.findScore([557238, 900749, 357048, 914506, 452873, 388627, 48519, 547373, 833077, 812771, 421906, 956620, 376107, 735347, 174804, 300402, 401298, 910681, 569878, 537589, 402195, 917820, 610872, 312353, 976591, 632989, 782487, 925104, 834716, 63093, 98411, 677768, 562661, 325845, 482827, 114075, 996524, 944966, 52931, 807608, 920752, 374928, 979972, 886505, 477954, 695056, 239471, 732662, 343685, 683772, 530445, 353165, 552765, 449009, 712177, 657927, 211144, 424312, 194107, 816752, 79004, 600553, 700637]) == 11122205\nassert solution.findScore([471383, 349292, 711483, 93699, 664349, 218139, 455557, 358110, 638071, 325336, 5478, 678950, 758493, 369747, 301155, 602896, 212721, 444193, 639119, 535876, 498480, 854070, 693352, 833769, 245008, 342886, 490675, 749693, 30207, 337017, 814128, 576011, 789992, 930037, 387174, 668120, 449199, 610268, 185769, 119020, 738281, 19596, 503714, 637731, 870738, 147180, 224846, 410089, 32041, 686816, 424186, 252150, 451778, 660612, 835843, 250886, 528600, 563878, 270550, 840045, 658391, 908647, 497318, 205923, 566420, 32655, 657912, 178324, 92926, 408743, 96655, 84631, 56340, 859993, 682506, 215898, 854283, 969795, 847716, 386705, 615636, 242613, 987340, 125258, 408801, 630702, 56335, 967046, 166330, 275945, 711410, 89182, 332023, 107893]) == 12198977\nassert solution.findScore([245231, 1309, 338100, 814560, 179734, 939115, 84407, 242826, 88598, 843227, 342835, 990116, 926458, 439322, 467870, 227565, 200667, 146940, 526323, 444756, 269797, 279584, 740468, 720980, 135602, 623412, 994410, 409800, 738149, 425, 986126, 303038, 171038, 839273]) == 3237840\nassert solution.findScore([575135, 80460, 175797, 533904, 817319, 557504, 80107, 110200, 399079, 762946, 712429, 77743, 620292, 440407, 555522, 692939, 331642, 966700, 525411, 751121, 372648, 695356, 415698, 805601, 570184, 68561, 279861, 967805, 463069, 977616, 894356, 220066, 181884, 886267, 863502, 217528, 450689, 300540, 178519, 18985, 917076, 781946, 60241, 615769, 171133, 873868, 87264, 65081, 353926, 100400, 523947, 170163, 330569, 399084]) == 6368124\nassert solution.findScore([125498, 365436, 801531, 229349, 254607, 72589, 216848, 548521, 794618, 64821, 533776, 637149, 354971, 937377, 205921, 906837, 329528, 647281, 36976, 589695, 916552, 483086, 854370, 401907, 841105, 926040, 937020, 59081, 188475, 431974, 512168, 483937, 964218, 301192, 450171, 56540, 7662, 181158, 652561, 890897, 665233, 896673, 262522, 779164, 194149, 303866, 793052, 534555, 850215, 319803, 362660, 310482, 233940, 854637, 631252, 768172, 330724, 798796, 761782, 362321, 304665, 506475, 739441, 122461, 54345, 64530, 117966, 73221, 236336, 578746, 68947, 605160, 840737]) == 11730930\nassert solution.findScore([818927, 536470, 137339, 801541, 610390, 240941, 644432, 898359, 932151, 507943, 840017, 637747, 692682, 628582, 248409, 71065, 834480, 167608, 323747, 964575, 492479, 478364, 763845, 795864, 133931, 38063, 399638, 158383, 705575, 997211, 555935, 194614, 854430, 602698, 518077, 783417, 104805, 804901, 827848, 493785, 590083, 335102, 599903, 959053, 789619, 959301, 443078, 921518, 804036, 109523, 70419, 822136, 178453, 737074, 361213, 245087, 566650, 238045, 520428, 121096, 70140, 967307]) == 12026231\nassert solution.findScore([183258, 915222, 664656, 12969, 178424, 595192, 524372, 982413, 485597, 154202, 294148, 821446, 508803, 609485, 336859, 951503, 813934, 997635, 134357, 157732]) == 2668754\nassert solution.findScore([221053, 289274, 176269, 535418, 317399, 810873, 431476, 939031, 825558, 717169, 974009, 815214, 664688, 255142, 959070, 474382, 402877, 272698, 738238, 252263, 142542, 201428, 732544, 104515, 448870, 271629, 883626, 28980, 686542, 643202, 930114, 256660, 858886, 286422, 464143, 187347, 148085, 212850, 299611, 462837, 109659, 754213, 788469, 47761, 475051]) == 6019868\nassert solution.findScore([395387, 261182, 220203, 627787, 215939, 691367, 533448, 695182, 723827, 480151, 927874, 91019, 692061, 91159, 378341, 23168, 665735, 5604, 989482, 571794, 559133, 414902, 37884, 980184, 900974, 617131, 523269, 491557, 418059, 755024, 218220, 179441, 25642, 639525, 39435, 160874, 461566, 270300]) == 5048994\nassert solution.findScore([833997, 561410, 26121, 4600, 191697, 604453, 428806, 419741, 71822, 112608, 941194, 590191, 954736, 284642, 702535, 823872, 609513, 829965, 550028, 621675, 33854, 757782, 89333, 666996, 383469, 400410, 544111, 867717, 156918, 612828, 587845, 820300, 994356, 242738, 235850, 526189, 678492, 471955, 56912, 423238, 883890, 501571, 814600, 763417, 389750, 48598, 758837, 265194, 392542, 422436, 441780, 108331, 435456, 630959, 445647, 472904, 977771, 607946, 971853, 187875, 536416, 14275, 471758, 176568, 225551, 544499, 704220, 269248, 579359, 720730]) == 11938487\nassert solution.findScore([485075, 582813, 638901, 542571, 641824, 477796, 543432, 723111, 376013, 939780, 450486, 417942, 300079, 6350, 149507, 384139, 480969, 508716, 842197, 337697, 774913, 484394, 511250, 5515, 336241, 397261, 742232, 234104, 527275, 104215, 509360, 546724, 458121, 507359, 518902, 816775, 216609, 997662, 983764]) == 6939184\nassert solution.findScore([687828, 973726, 206694, 495770, 610445, 875330, 339859, 870955, 612039, 629454, 898675, 278035, 175041, 947255, 294402, 766647, 873212, 575569, 484945, 632527, 765002, 311149, 302046, 450078, 77247, 590441, 612838, 624639, 794556, 498189, 45625, 213625, 544453, 615367, 238465, 608790, 281925, 60733, 910673, 253959, 397961, 646955]) == 9525019\nassert solution.findScore([685559, 130475, 913535, 388346, 750049, 761377, 975926, 203784, 756593, 467155, 185498, 943354, 969509, 334272, 779198, 274958, 894488, 335955, 333568, 172942, 603806, 345868, 769895, 847995, 851141, 665579, 768344, 316455, 253625, 383931, 25458, 51326, 152912, 440556, 775612, 195590, 816981, 853343, 583289, 769833, 364700, 768358, 571887, 404217, 603249, 524406, 37029, 598819, 422955, 462514, 583613, 807006, 466827, 940503, 389833, 448342, 538812, 930963, 879425, 383560, 868418, 41849, 838927]) == 9491318\nassert solution.findScore([3188, 525088, 302861, 731729, 728915, 620871, 663555, 114018, 667619, 578009, 395961, 667359, 758255, 199659, 637090, 203426, 776312, 638855, 671544, 503997, 643481, 198958, 635117, 761466, 885975, 373097, 969146, 399574, 825083, 320629, 872477, 717074, 657708, 264521, 894863, 670483, 344056, 362144, 659433, 963896, 318585, 216840, 127591, 994683, 890109, 483143, 88552, 627611, 305906, 240923, 864194, 282771, 49939, 538322, 537318, 191045, 128395, 704854, 493054, 292365, 535259]) == 9695421\nassert solution.findScore([49955, 150876, 520040, 615083, 32728, 885480, 845460, 796831, 590551, 985638, 863185, 987012, 999023, 241563, 850934, 589844, 513949]) == 3657431\nassert solution.findScore([725751, 690220, 931633, 777087, 219682, 336041, 786305, 929091, 431591, 230994, 731994, 486931, 329793, 228504, 819397, 795893, 349014, 525043, 75669, 728132, 188462, 287203, 90366, 620890, 992073, 403988, 723791, 578271, 863412, 219396, 861913, 40282, 75335, 699971, 401769, 71898, 368373, 837249, 861794, 562802, 388681, 435343, 79471, 921342, 815814, 754956, 998841, 477934, 45998, 115905, 161795, 387982, 513236, 464610, 402854, 921928]) == 8544193\nassert solution.findScore([576502, 111705, 531604, 138676, 799532, 905793, 101311, 479499, 934396, 355177, 315595, 273450, 212965, 637143, 962504, 445962, 736810, 240445, 789348, 302367, 664334, 272635, 371483, 238561, 526421, 512020, 319981, 929256, 234519, 526807, 154742, 436700]) == 4023860\nassert solution.findScore([126989, 639723, 741170, 998386, 873943, 176252, 587958, 375607, 19521, 407443, 193331, 926155, 488682, 931846, 350394, 356205, 538347, 159197, 316635, 185071, 367323, 767183, 675448, 381311, 68161, 326809, 767866, 226922, 106285, 41352, 44298, 992602, 331096, 872940, 292214, 268482, 567836, 838397, 390385, 662247, 463231, 268462, 337066, 435219, 434635, 613315, 650616, 873301, 104233, 678442, 608561, 200616, 808280, 169177, 914633, 182166, 154515, 250202, 498538, 919282, 347312, 80754, 153723, 55436, 231967, 731197, 93046, 671195, 317250]) == 7469731\nassert solution.findScore([851859, 29997, 438581, 847219, 728986, 551534, 856975, 549333, 994921, 680555, 215417, 814325, 533338, 318242, 862803, 227405, 128153, 465196, 309808, 849706, 549871, 76370, 167505, 515640, 239919]) == 3265992\nassert solution.findScore([602850, 73062, 554276, 340245, 759643, 464817, 700838, 427035, 783926, 657111, 891557, 413777, 560677, 974851, 381996, 629058, 419058, 478551, 819216, 834260, 63519, 894436, 168730, 744411, 653508, 236107, 603401, 594296, 728952, 275228, 811462, 956137, 88609, 511620, 749418, 986864, 229433, 32197, 175346, 387140, 554194, 722745, 710642]) == 7302203\nassert solution.findScore([426272, 562527, 239784, 93426, 176400, 420186, 643799, 906920, 32143, 942197, 130917, 500868, 377155, 757112, 143320, 817324, 908938]) == 2532357\nassert solution.findScore([426640, 145114, 64582, 59715, 788305, 673238, 423728, 306722, 562388, 700868, 742738, 214005, 264947, 128283, 231815, 964718, 730524, 596935, 249515, 622165, 390248, 752993, 986903, 684850, 821898, 928573, 21623, 476914, 269671, 649351, 736602, 27142, 234965, 638333, 1888, 535429, 174570, 120114, 82789]) == 4860765\nassert solution.findScore([166718, 116857, 90956, 174112, 878909, 71070, 885644, 549920, 618997, 46975, 544316, 856999, 963997, 813297, 888682, 951008, 165333, 751084, 470165, 423774, 548463, 795646, 657611, 733091, 90452, 795700, 975444, 612070]) == 4545175\nassert solution.findScore([493763, 662138, 27319, 462331, 506536, 242066, 763481, 980660, 663954, 940507, 6084, 683860, 810832, 449312, 563452, 317518, 564869, 657477, 989131, 254224, 464658, 231023, 713264, 375496, 914487, 678514, 515903, 886543, 502657, 65172, 763408, 942866, 911902, 938019, 543496, 239460, 457098, 479468, 320050, 982263, 850361, 542770, 77155, 372798, 410293, 404082, 208759, 671966, 102904, 32751, 216262, 572932, 480826, 156598, 957751, 165701, 8031, 459072, 24888, 962278, 228368, 79391, 362924, 850091, 4448, 72151, 482573, 870882, 910315, 469479, 973111, 490398, 542713, 239889, 770753, 322090, 3128, 624241, 224863, 704142, 903946, 64398, 778837, 456196, 200411, 271903, 33729, 339381, 658662, 463905, 703734, 257520, 799284]) == 11126623\nassert solution.findScore([952125, 12011, 922242, 926199, 690728, 448555, 217136, 750515, 168356, 411022, 823441, 813293, 263590, 509739, 929974, 862013, 24931, 213898, 916982, 131073, 404397, 100230, 982677, 337578, 24919, 675975, 802019, 253831, 689405, 449210, 101032, 795312, 584584, 560257, 735909, 18676, 473600, 749203, 570456, 267143, 688507, 663904, 179461, 847478, 967624, 525646, 520555, 225175, 285571, 132632, 95213, 258572]) == 6362026\nassert solution.findScore([681288, 360359, 228164, 744484, 466769, 144218, 528402, 337840, 36985, 129870, 451352, 571221, 163163, 149829, 101276, 837134, 15341, 400589, 893311, 839550, 661576, 417371, 963247, 641211, 389700, 478014, 912614, 749875, 204854, 458473, 609536, 473895, 241004, 90697, 419797, 367626, 512958, 68393, 157490, 163821, 996082, 324586, 69559, 124031, 484100, 536417, 162811, 100152, 745057, 758477, 508776, 746684, 903280, 322125, 881320, 675471, 771034, 637434, 619762, 912568, 309878, 53915, 714298, 288135, 771262, 935744, 32871, 655006, 318727, 942853, 605174, 11027, 738095, 278420, 26492, 131548, 104561, 312248, 685665, 532529, 832894, 779711, 127099, 331295, 998149, 689804, 780223, 849395, 117871, 294472, 730152, 484896, 181332, 399917]) == 11744768\nassert solution.findScore([459242, 49380, 366197, 446468, 105725, 696094, 474450, 422548, 767828, 122359, 253534, 739749, 416811, 981116, 221575, 936287]) == 1338398\nassert solution.findScore([767416, 197959, 488223, 176479, 863144, 606132, 257455, 870127, 106409, 378535, 493818, 880168, 41358, 703579, 200258, 368570, 655244, 264259, 926066, 368859, 485089, 455464, 698985, 817030, 63765, 666336, 555219, 595165, 188848, 613088, 127018, 161617, 350698, 640333, 537064, 257584, 98291, 645153, 596656, 539305, 906510, 389158, 89533, 348519, 479578, 202650, 654229, 791923, 309910, 288077, 926639, 36042, 522782]) == 6430751\nassert solution.findScore([257148, 803084, 796786, 458115, 10758, 883765, 649238, 89258, 336205, 56895, 100369, 99349, 332046, 514689, 868107, 640278]) == 2465161\nassert solution.findScore([453337, 343319]) == 343319\nassert solution.findScore([550717, 55724, 61248, 703394, 735869, 868487, 330621, 264704, 203040, 734246, 891508, 234736, 315735, 165418, 5316, 131497, 895300, 929075, 5724, 719948, 572638, 493363, 122318, 135914, 980728, 875975, 491706, 309237, 852469, 957334, 993653, 895465, 497521, 237820, 999392, 614337, 37523, 680928, 824100, 318148, 82243, 279643, 212762, 651021, 990460, 506998, 7885, 566930, 669227, 611746, 575762, 75721, 113844, 396104, 578850, 113178, 309833, 98337, 872112, 563096, 23626, 328962, 559035, 2530, 731188, 107709, 847216, 128788, 228119, 435207, 483609, 304970, 840232, 186941, 663699, 582643, 423363, 704415, 398717, 261331, 227917, 319748, 675607, 333521, 353780, 197340, 718170, 403611, 733303, 494936, 600328, 301823, 167168, 461334, 944499, 345577, 660326, 31649, 488197, 266309]) == 14334580\nassert solution.findScore([520883, 538629, 237849, 376222, 618853, 796451, 108648, 945704, 451540, 478487, 521204, 980331, 732350, 713570, 670013, 317289, 183620, 324186, 69820, 348971, 388968, 282913, 558928, 150156, 299512, 163311, 371586, 745924, 149944, 850942, 738938, 668958, 136545, 102913, 489126, 285341, 566600, 582153, 488485, 948257, 775493, 985365, 240524, 358303, 241002, 21911, 658657, 738244, 92557, 779964, 734451, 377003, 852646, 639395, 120208, 311110, 590371, 135557, 62090, 937691, 139816, 332392, 526472, 647955, 488502, 238442, 744272, 293139, 31824, 668157, 809305, 429819, 354830, 788742, 545218, 569418, 521406, 555130, 635521, 750460, 242234, 424636, 490598, 928465, 440355, 345839, 105946, 521587, 578089, 484369, 260317, 235495]) == 14488789\nassert solution.findScore([277227, 204161, 130961, 176085, 386876, 290498, 37276, 809494, 890031, 217881, 229604, 692992, 357354, 378893, 470407, 363546, 954143, 980912, 932139, 41028, 464516, 392774, 394350, 36995, 511555, 125097, 237806, 352585, 739265, 590270, 948096, 461566, 522202, 142620, 462678, 463716, 721278, 289887, 632608, 929512, 786826, 856524, 928321, 528099, 641468, 108378, 295492, 346400]) == 7418274\nassert solution.findScore([703667, 299120, 740862, 856864, 260097, 802320, 821377, 925472, 644222, 852154, 181832, 220506, 795463, 485189, 411785, 105932, 997192, 378630, 865253, 947410, 914386, 170552, 4688, 30477, 663371, 285898, 404582, 911995, 554745, 708264, 147005, 928515, 233738, 149176, 772231, 601381, 224209, 616745, 737006, 972765, 219796, 983560, 484490, 460716, 976162, 98342, 879602, 717678, 762965, 799156, 875421, 829484, 626495, 388319, 280555, 821125, 854395, 263148, 3649, 99688, 810354, 750728, 787023, 808721, 837378, 974399, 900013, 940273, 201677, 141418, 471620, 9978, 922416, 266947, 552659, 176172, 961257, 132274, 704019, 236767, 948888, 790690, 482088, 381889, 173158, 515778, 432571, 169461, 323790, 541538, 247231, 133453]) == 15177010\nassert solution.findScore([611837, 312051, 622365, 43155, 688685, 45794, 789634, 177060, 277333, 890624, 353808, 991610, 678985, 723125, 10819, 925576, 397459, 300707, 146814, 153792, 650901, 436244, 679490, 781215, 267261, 441233, 394867, 268716, 162873, 497069, 637193, 457317, 891225, 846717, 585786, 944515, 194438, 849651, 559392, 175915, 314934, 177395, 987984, 917907, 168125, 671333, 161694, 25203, 937569, 164782, 610234, 166521, 142939, 623900, 914215, 148300, 428506, 187642]) == 5855032\nassert solution.findScore([266414, 304636, 443130, 523609, 299533, 523059, 480634, 585974, 275228, 778965, 887391, 239012, 306017, 16710, 420000, 174933, 329567, 975486, 582292, 829487, 790442, 267184, 763374, 530813, 235297, 772182, 498957, 168888, 570980, 399903, 267719, 458774, 409295, 297875, 787392, 633524, 743757, 305005, 591221, 895974, 172388, 953774, 150992, 727824, 176285, 577634, 833416, 254476, 819930, 786731, 272480, 610762, 416835, 918470, 137513, 478404, 575257, 970940, 927473, 772546, 275969, 539897, 387736, 314657, 627045, 932429, 107469, 19558, 227382, 787540, 267150, 357048, 626460, 771685, 764449, 299528, 810776, 504358, 58096, 599727, 260012, 25375, 388059, 866743, 386199, 527139, 433069, 613209, 924643, 504408]) == 12179975\nassert solution.findScore([683114, 433825, 469409, 354739, 981894, 441267, 754492, 641000, 525034, 329667, 344510, 457409, 25702, 30925, 889261, 957722, 191401, 885028, 933900, 777567, 582052, 766776, 826405, 800242, 477296, 182099, 487582, 182149, 448053, 885005, 131023, 609957, 305908, 400567, 16147, 640775, 587110]) == 7027492\nassert solution.findScore([507636, 21693, 125980, 589001, 476085, 416558, 920143, 344280, 426233, 996234, 837487, 857780, 766154, 281287, 672150, 454466, 14499, 985548, 191543, 391530, 131152, 244916, 668218, 25402, 304723, 647500, 860503, 6826, 181733, 977679, 262906, 943977, 260941, 54643, 954702, 619055, 416571, 419360, 904576, 669303, 146805, 271658, 799632, 837178, 369824, 9230, 844500, 604501, 542072, 233841, 424012, 830273, 448024, 129715, 439408, 856947, 323119, 299499, 323529, 389421, 831259, 729798, 91522, 922170, 568641, 417275, 136267, 292289, 85702]) == 10327920",
  "inefficient_solution": "class Solution:\n    def findScore(self, nums: List[int]) -> int:\n        n = len(nums)\n        vis = [False] * (10**6)\n        q = [(x, i) for i, x in enumerate(nums)]\n        marked = [False] * (10**6)\n        score = [0] * n\n        ans = 0\n        for _ in range(n):\n            temp_q = q.copy()\n            q = []\n            for x, i in temp_q:\n                if not marked[i]:\n                    q.append((x, i))\n                    marked[i] = True\n            while q:\n                x, i = q.pop()\n                ans += x\n                marked[i] = True\n                for j in (i - 1, i + 1):\n                    if 0 <= j < n:\n                        marked[j] = True\n        return ans",
  "is_python": true
}