{
  "problem_idx": 981,
  "task_name": "Time Based Key",
  "markdown_description": "\nDesign a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.\n\n\nImplement the `TimeMap` class:\n\n\n* `TimeMap()` Initializes the object of the data structure.\n* `void set(String key, String value, int timestamp)` Stores the key `key` with the value `value` at the given time `timestamp`.\n* `String get(String key, int timestamp)` Returns a value such that `set` was called previously, with `timestamp_prev <= timestamp`. If there are multiple such values, it returns the value associated with the largest `timestamp_prev`. If there are no values, it returns `\"\"`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input**\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]\n**Output**\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]\n\n**Explanation**\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= key.length, value.length <= 100`\n* `key` and `value` consist of lowercase English letters and digits.\n* `1 <= timestamp <= 107`\n* All the timestamps `timestamp` of `set` are strictly increasing.\n* At most `2 * 105` calls will be made to `set` and `get`.\n\n\n",
  "canonical_solution": "class TimeMap:\n    def __init__(self):\n        self.ktv = defaultdict(list)\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        self.ktv[key].append((timestamp, value))\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.ktv:\n            return ''\n        tv = self.ktv[key]\n        i = bisect_right(tv, (timestamp, chr(127)))\n        return tv[i - 1][1] if i else ''\n\n\n# Your TimeMap object will be instantiated and called as such:\n# obj = TimeMap()\n# obj.set(key,value,timestamp)\n# param_2 = obj.get(key,timestamp)\n",
  "test_case_generator": "\nfrom collections import defaultdict\nfrom bisect import bisect_right\nimport random\n\ndef generate_test_case():\n    time_map = TimeMap()\n\n    # Generate a random key\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    key = ''.join(random.choice(letters) for _ in range(random.randint(1, 10)))\n\n    # Generate a random value\n    value = ''.join(random.choice(letters) for _ in range(random.randint(1, 10)))\n\n    # Generate a random timestamp\n    timestamp = random.randint(1, int(1e7))\n\n    time_map.set(key, value, timestamp)\n\n    return time_map, key, timestamp, value\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        time_map, key, timestamp, value = generate_test_case()\n\n        expected_result = time_map.get(key, timestamp)\n\n        if expected_result != '':\n            assert expected_result == value\n            print(f\"assert time_map.get({key}, {timestamp}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert time_map.get({key}, {timestamp}) == '{expected_result}'\")\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert time_map.get(dxlbagw, 6381805) == 'ohuj'\nassert time_map.get(ojqaht, 5579651) == 'ekgcfih'\nassert time_map.get(hlwfsvxd, 5041874) == 'poomfxngp'\nassert time_map.get(kmebv, 4795978) == 'qgj'\nassert time_map.get(cl, 8188282) == 'ccveevwkb'\nassert time_map.get(szex, 2858438) == 'buaajmrtzu'\nassert time_map.get(xitnxwnzfn, 5658543) == 'lbwep'\nassert time_map.get(lxliklb, 257596) == 'g'\nassert time_map.get(vrszxnbij, 6566620) == 'ooctpfe'\nassert time_map.get(qsfetrddpx, 1290872) == 'tnrkimjjsj'\nassert time_map.get(hjvuss, 9766239) == 'jmgyseskc'\nassert time_map.get(oiytk, 3632168) == 'fmitmtxool'\nassert time_map.get(zzxyog, 130940) == 'ni'\nassert time_map.get(mydnskbrz, 5348506) == 'kgrofjbgzn'\nassert time_map.get(qehncm, 7921321) == 'iipkklf'\nassert time_map.get(mmnxfw, 8131935) == 't'\nassert time_map.get(ttisnu, 1524872) == 'psmcfm'\nassert time_map.get(fwvql, 2831056) == 'ruxbgh'\nassert time_map.get(bc, 6138025) == 'y'\nassert time_map.get(ujmpyjbg, 3143738) == 'gj'\nassert time_map.get(oepxcnn, 2903736) == 'uofx'\nassert time_map.get(c, 9193562) == 'pov'\nassert time_map.get(v, 6690242) == 'y'\nassert time_map.get(caunnpmy, 7948709) == 'lhl'\nassert time_map.get(rzttqsekb, 4467593) == 'gmafolcq'\nassert time_map.get(zruebkqll, 9829639) == 'kuqtzedmh'\nassert time_map.get(peiy, 5750204) == 'fodvxv'\nassert time_map.get(gtxdvqra, 5167633) == 'kcfghjutn'\nassert time_map.get(wb, 1108125) == 'rxlmitc'\nassert time_map.get(sijspgedxc, 6583457) == 'fk'\nassert time_map.get(pfxfh, 214465) == 'ecazqcam'\nassert time_map.get(vjtidgqnwd, 6760948) == 'xltfzor'\nassert time_map.get(vpvuo, 8611261) == 'n'\nassert time_map.get(dnu, 3838138) == 'zwq'\nassert time_map.get(mbfbku, 9676418) == 'ymdqg'\nassert time_map.get(fcudgvog, 7649790) == 'jqqpbj'\nassert time_map.get(e, 4914185) == 'yebn'\nassert time_map.get(hrifl, 510746) == 'fzqzvgvz'\nassert time_map.get(obwab, 3153364) == 'ejkn'\nassert time_map.get(obntjzii, 5270320) == 'kbrwmyvybw'\nassert time_map.get(coxfh, 1517090) == 'bpkq'\nassert time_map.get(u, 9190591) == 'xlb'\nassert time_map.get(jv, 1769881) == 'il'\nassert time_map.get(usvdszwem, 3474049) == 'fwcavpztry'\nassert time_map.get(zcggwloku, 8178370) == 'nsprwooee'\nassert time_map.get(ykhnuo, 757479) == 'nu'\nassert time_map.get(wmre, 8700706) == 'baxzq'\nassert time_map.get(ydljd, 7554087) == 'q'\nassert time_map.get(ft, 2910678) == 'pochmaakj'\nassert time_map.get(euyupguh, 1946479) == 'qynbi'\nassert time_map.get(gjge, 830699) == 'wluat'\nassert time_map.get(qldblfw, 6844283) == 'em'\nassert time_map.get(jihwpnk, 5290541) == 'bdmmgyalz'\nassert time_map.get(wssrucwwh, 7677732) == 'niz'\nassert time_map.get(qzd, 4808479) == 'q'\nassert time_map.get(icfk, 6132749) == 'yjj'\nassert time_map.get(tbwxwugrg, 9330472) == 'v'\nassert time_map.get(vmigs, 1276941) == 'fgpoiic'\nassert time_map.get(jzmwpt, 3253346) == 'f'\nassert time_map.get(f, 9943869) == 'izvnzndxn'\nassert time_map.get(zllyr, 1117621) == 'hhpps'\nassert time_map.get(oenuad, 3935641) == 'qk'\nassert time_map.get(ixq, 2177927) == 'sw'\nassert time_map.get(lxu, 7214586) == 'qxeip'\nassert time_map.get(nukthaeyvl, 2624863) == 'axiwdrz'\nassert time_map.get(hfuajj, 8916918) == 'ltcltydyp'\nassert time_map.get(xaj, 9622019) == 'crl'\nassert time_map.get(mbantkana, 1938106) == 'kclb'\nassert time_map.get(z, 5152929) == 'riytzrpmh'\nassert time_map.get(ji, 76735) == 'zbyoz'\nassert time_map.get(iagvf, 7070349) == 'ced'\nassert time_map.get(xmnqfg, 392596) == 'tpvku'\nassert time_map.get(rzg, 3185443) == 'qymbtcyrxq'\nassert time_map.get(hplsmav, 1289007) == 'pzsavd'\nassert time_map.get(j, 3277811) == 'epnkyb'\nassert time_map.get(aiuocxoz, 7374631) == 'pcsun'\nassert time_map.get(yknbnktakx, 8311390) == 'qwgedv'\nassert time_map.get(d, 3622619) == 'k'\nassert time_map.get(fwsb, 8504008) == 'dobtk'\nassert time_map.get(piikfvwuq, 5044025) == 'qjattga'\nassert time_map.get(svx, 3181477) == 'pblfhv'\nassert time_map.get(wzs, 9942164) == 'kw'\nassert time_map.get(gruzbyvq, 6954211) == 'tc'\nassert time_map.get(i, 570192) == 'qxmbfwliy'\nassert time_map.get(ijgtkbng, 7049723) == 'dlrqmkqwct'\nassert time_map.get(xznnxe, 7876441) == 'fpqdlw'\nassert time_map.get(vjwezsia, 1353139) == 'wsontw'\nassert time_map.get(ft, 7174263) == 'ouyvgoqyk'\nassert time_map.get(ok, 8909053) == 'opisq'\nassert time_map.get(bqoznh, 7417045) == 'zcvxfap'\nassert time_map.get(ehepmubz, 6119734) == 'gsu'\nassert time_map.get(djqdzx, 6633790) == 'khszmlmupa'\nassert time_map.get(tukfny, 4663320) == 'avvxepnbsz'\nassert time_map.get(ym, 5500337) == 'itxbkjgnk'\nassert time_map.get(spq, 9755825) == 'h'\nassert time_map.get(qmrxmdik, 1690407) == 'lnuqmou'\nassert time_map.get(heugzfn, 883732) == 'dtbzcjiy'\nassert time_map.get(bnfk, 1972534) == 'timrmtbu'\nassert time_map.get(spc, 8425617) == 'sdozcpx'\nassert time_map.get(zrf, 3814885) == 'x'",
  "inefficient_solution": "class TimeMap:\n    def __init__(self):\n        self.ktv = {}\n        self.values = {}\n        self.timestamps = {}\n\n    def set(self, key: str, value: str, timestamp: int) -> None:\n        if key not in self.ktv:\n            self.ktv[key] = []\n        if key not in self.values:\n            self.values[key] = []\n        if key not in self.timestamps:\n            self.timestamps[key] = []\n        self.ktv[key].append(value)\n        self.values[key].append(value)\n        self.timestamps[key].append(timestamp)\n        for i in range(len(self.ktv[key]) - 1):\n            del self.ktv[key][i]\n        for i in range(len(self.values[key]) - 1):\n            del self.values[key][i]\n        for i in range(len(self.timestamps[key]) - 1):\n            del self.timestamps[key][i]\n\n    def get(self, key: str, timestamp: int) -> str:\n        if key not in self.ktv:\n            return ''\n        result = ''\n        for i in range(len(self.ktv[key])):\n            if self.timestamps[key][i] <= timestamp:\n                result = self.ktv[key][i]\n            else:\n                break\n        return result",
  "is_python": true
}