{
  "problem_idx": 2370,
  "task_name": "Longest Ideal Subsequence",
  "markdown_description": "\nYou are given a string `s` consisting of lowercase letters and an integer `k`. We call a string `t` **ideal** if the following conditions are satisfied:\n\n\n* `t` is a **subsequence** of the string `s`.\n* The absolute difference in the alphabet order of every two **adjacent** letters in `t` is less than or equal to `k`.\n\n\nReturn *the length of the **longest** ideal string*.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n**Note** that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of `'a'` and `'z'` is `25`, not `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"acfgbd\", k = 2\n**Output:** 4\n**Explanation:** The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcd\", k = 3\n**Output:** 4\n**Explanation:** The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `0 <= k <= 25`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [1] * n\n        d = {s[0]: 0}\n        for i in range(1, n):\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                if b in d:\n                    dp[i] = max(dp[i], dp[d[b]] + 1)\n            d[s[i]] = i\n        return max(dp)\n",
  "test_case_generator": "\nimport random\nfrom string import ascii_lowercase\n\nclass Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [1] * n\n        d = {s[0]: 0}\n        for i in range(1, n):\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                if b in d:\n                    dp[i] = max(dp[i], dp[d[b]] + 1)\n            d[s[i]] = i\n        return max(dp)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices(ascii_lowercase, k=random.randint(1, 10)))\n    \n    # Generate a random k value\n    k = random.randint(0, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestIdealString(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestIdealString(s, k) == expected_result\n        print(f\"assert solution.longestIdealString('{s}', {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestIdealString('{s}', {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestIdealString('h', 5) == 1\nassert solution.longestIdealString('cy', 8) == 1\nassert solution.longestIdealString('echwqtvc', 7) == 4\nassert solution.longestIdealString('ddtnnq', 9) == 4\nassert solution.longestIdealString('lzyima', 7) == 3\nassert solution.longestIdealString('vjrab', 9) == 3\nassert solution.longestIdealString('iytxju', 4) == 3\nassert solution.longestIdealString('kmrv', 4) == 2\nassert solution.longestIdealString('xufb', 8) == 2\nassert solution.longestIdealString('rplif', 6) == 5\nassert solution.longestIdealString('d', 8) == 1\nassert solution.longestIdealString('cpsabemcot', 3) == 5\nassert solution.longestIdealString('kyxfjitcz', 4) == 3\nassert solution.longestIdealString('ccdhecw', 5) == 6\nassert solution.longestIdealString('hzgkgty', 2) == 3\nassert solution.longestIdealString('aqwlr', 10) == 3\nassert solution.longestIdealString('pnmghyri', 1) == 3\nassert solution.longestIdealString('stylnd', 7) == 3\nassert solution.longestIdealString('pknna', 1) == 2\nassert solution.longestIdealString('ern', 4) == 2\nassert solution.longestIdealString('geraipoz', 0) == 1\nassert solution.longestIdealString('bdjwtynyi', 9) == 5\nassert solution.longestIdealString('yezqlk', 4) == 2\nassert solution.longestIdealString('ajf', 2) == 1\nassert solution.longestIdealString('oduw', 2) == 2\nassert solution.longestIdealString('b', 6) == 1\nassert solution.longestIdealString('gj', 4) == 2\nassert solution.longestIdealString('rcljqqfaz', 2) == 3\nassert solution.longestIdealString('ieusl', 0) == 1\nassert solution.longestIdealString('ql', 7) == 2\nassert solution.longestIdealString('cnyqcfl', 3) == 3\nassert solution.longestIdealString('osok', 0) == 2\nassert solution.longestIdealString('k', 0) == 1\nassert solution.longestIdealString('zouagxdrr', 5) == 4\nassert solution.longestIdealString('gxejwflsk', 6) == 6\nassert solution.longestIdealString('jrjiudk', 8) == 6\nassert solution.longestIdealString('iaiyauuja', 8) == 5\nassert solution.longestIdealString('u', 1) == 1\nassert solution.longestIdealString('e', 2) == 1\nassert solution.longestIdealString('sdupcqqkit', 4) == 5\nassert solution.longestIdealString('yqmue', 8) == 4\nassert solution.longestIdealString('dorpia', 2) == 2\nassert solution.longestIdealString('rxfbfa', 9) == 4\nassert solution.longestIdealString('amhewomyis', 7) == 5\nassert solution.longestIdealString('uznuwkm', 1) == 2\nassert solution.longestIdealString('kxif', 8) == 3\nassert solution.longestIdealString('nzgeqhalh', 6) == 5\nassert solution.longestIdealString('gbivynm', 0) == 1\nassert solution.longestIdealString('hbxnrwpqt', 10) == 7\nassert solution.longestIdealString('ewtnudp', 3) == 3\nassert solution.longestIdealString('luixcbptj', 2) == 2\nassert solution.longestIdealString('wllrhbltwn', 0) == 3\nassert solution.longestIdealString('vxaasvr', 1) == 2\nassert solution.longestIdealString('slpebto', 6) == 4\nassert solution.longestIdealString('k', 4) == 1\nassert solution.longestIdealString('i', 10) == 1\nassert solution.longestIdealString('rxhc', 6) == 2\nassert solution.longestIdealString('ocyycog', 2) == 2\nassert solution.longestIdealString('dttflpf', 1) == 2\nassert solution.longestIdealString('mfbltw', 10) == 6\nassert solution.longestIdealString('yxqkwe', 6) == 3\nassert solution.longestIdealString('v', 2) == 1\nassert solution.longestIdealString('lyrkei', 8) == 5\nassert solution.longestIdealString('tkkt', 4) == 2\nassert solution.longestIdealString('vtp', 1) == 1\nassert solution.longestIdealString('x', 6) == 1\nassert solution.longestIdealString('vrk', 8) == 3\nassert solution.longestIdealString('mmnzoxq', 3) == 5\nassert solution.longestIdealString('ffjyqft', 3) == 3\nassert solution.longestIdealString('fssx', 9) == 3\nassert solution.longestIdealString('mfaaul', 2) == 2\nassert solution.longestIdealString('ubp', 3) == 1\nassert solution.longestIdealString('vbls', 5) == 2\nassert solution.longestIdealString('syj', 10) == 2\nassert solution.longestIdealString('lwzpbzrta', 6) == 4\nassert solution.longestIdealString('lwwxm', 6) == 3\nassert solution.longestIdealString('ixvlips', 10) == 6\nassert solution.longestIdealString('pipvvitl', 2) == 3\nassert solution.longestIdealString('a', 2) == 1\nassert solution.longestIdealString('toeqgmc', 10) == 6\nassert solution.longestIdealString('pujhy', 8) == 3\nassert solution.longestIdealString('c', 3) == 1\nassert solution.longestIdealString('kywlckljzy', 7) == 5\nassert solution.longestIdealString('cdsljwwc', 0) == 2\nassert solution.longestIdealString('pfljd', 8) == 4\nassert solution.longestIdealString('fopyedjt', 10) == 6\nassert solution.longestIdealString('nufmfh', 5) == 3\nassert solution.longestIdealString('jypga', 7) == 3\nassert solution.longestIdealString('urobu', 8) == 4\nassert solution.longestIdealString('vb', 1) == 1\nassert solution.longestIdealString('z', 9) == 1\nassert solution.longestIdealString('rx', 9) == 2\nassert solution.longestIdealString('dpt', 10) == 2\nassert solution.longestIdealString('vwpwwrjm', 4) == 4\nassert solution.longestIdealString('rqgjd', 7) == 4\nassert solution.longestIdealString('ozvqaz', 6) == 3\nassert solution.longestIdealString('gbqbp', 2) == 2\nassert solution.longestIdealString('vihemc', 10) == 5\nassert solution.longestIdealString('dkzjnrin', 8) == 6\nassert solution.longestIdealString('w', 2) == 1",
  "inefficient_solution": "class Solution:\n    def longestIdealString(self, s: str, k: int) -> int:\n        n = len(s)\n        ans = 1\n        dp = [0] * (n * n)\n        for i in range(n):\n            for j in range(k + 1):\n                dp[i * (k + 1) + j] = 1\n            a = ord(s[i])\n            for b in ascii_lowercase:\n                if abs(a - ord(b)) > k:\n                    continue\n                for c in range(k + 1):\n                    dp[i * (k + 1) + j] = max(dp[i * (k + 1) + j], dp[(i - 1) * (k + 1) + c] + 1)\n        return max(dp)",
  "is_python": true
}