{
  "problem_idx": 1176,
  "task_name": "Diet Plan Performance",
  "markdown_description": "\nA dieter consumes\u00a0`calories[i]`\u00a0calories on the `i`-th day.\u00a0\n\n\nGiven an integer `k`, for **every** consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]`\u00a0for all `0 <= i <= n-k`), they look at *T*, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`):\n\n\n* If `T < lower`, they performed poorly on their diet and lose 1 point;\n* If `T > upper`, they performed well on their diet and gain 1 point;\n* Otherwise, they performed normally and there is no change in points.\n\n\nInitially, the dieter has zero points. Return the total number of points the dieter has after dieting for `calories.length`\u00a0days.\n\n\nNote that the total points can be negative.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3\n**Output:** 0\n**Explanation**: Since k = 1, we consider each element of the array separately and compare it to lower and upper.\ncalories[0] and calories[1] are less than lower so 2 points are lost.\ncalories[3] and calories[4] are greater than upper so 2 points are gained.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** calories = [3,2], k = 2, lower = 0, upper = 1\n**Output:** 1\n**Explanation**: Since k = 2, we consider subarrays of length 2.\ncalories[0] + calories[1] > upper so 1 point is gained.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** calories = [6,5,0,0], k = 2, lower = 1, upper = 5\n**Output:** 0\n**Explanation**:\ncalories[0] + calories[1] > upper so 1 point is gained.\nlower <= calories[1] + calories[2] <= upper so no change in points.\ncalories[2] + calories[3] < lower so 1 point is lost.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= calories.length <= 10^5`\n* `0 <= calories[i] <= 20000`\n* `0 <= lower <= upper`\n\n\n",
  "canonical_solution": "class Solution:\n    def dietPlanPerformance(\n        self, calories: List[int], k: int, lower: int, upper: int\n    ) -> int:\n        def check(s):\n            if s < lower:\n                return -1\n            if s > upper:\n                return 1\n            return 0\n\n        s, n = sum(calories[:k]), len(calories)\n        ans = check(s)\n        for i in range(k, n):\n            s += calories[i] - calories[i - k]\n            ans += check(s)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def dietPlanPerformance(self, calories, k, lower, upper):\n        def check(s):\n            if s < lower:\n                return -1\n            if s > upper:\n                return 1\n            return 0\n\n        s, n = sum(calories[:k]), len(calories)\n        ans = check(s)\n        for i in range(k, n):\n            s += calories[i] - calories[i - k]\n            ans += check(s)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    calories = random.sample(range(1, 201), random.randint(2, 10))\n    \n    # Generate a random k\n    k = random.randint(1, len(calories))\n\n    # Generate random lower and upper\n    lower = random.randint(0, 200)\n    upper = random.randint(lower, 200)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.dietPlanPerformance(calories, k, lower, upper)\n\n    return calories, k, lower, upper, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        calories, k, lower, upper, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.dietPlanPerformance(calories, k, lower, upper) == expected_result\n        print(f\"assert solution.dietPlanPerformance({calories}, {k}, {lower}, {upper}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.dietPlanPerformance({calories}, {k}, {lower}, {upper}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.dietPlanPerformance([61, 163, 111, 48], 2, 134, 183) == 2\nassert solution.dietPlanPerformance([170, 2, 175, 76, 26], 2, 85, 103) == 3\nassert solution.dietPlanPerformance([150, 108, 85, 171], 1, 61, 153) == 1\nassert solution.dietPlanPerformance([145, 15, 55, 3], 4, 98, 162) == 1\nassert solution.dietPlanPerformance([142, 83, 44], 1, 56, 180) == -1\nassert solution.dietPlanPerformance([7, 52, 77, 163, 124, 177, 10, 184], 8, 199, 200) == 1\nassert solution.dietPlanPerformance([130, 48, 67, 191, 90, 54], 5, 4, 43) == 2\nassert solution.dietPlanPerformance([163, 134, 50, 56, 41, 54, 68, 144, 24, 165], 4, 12, 149) == 7\nassert solution.dietPlanPerformance([92, 23, 20, 124, 82, 187, 19], 4, 142, 196) == 4\nassert solution.dietPlanPerformance([12, 100, 146, 125, 61, 42, 128, 93, 13, 22], 4, 170, 183) == 7\nassert solution.dietPlanPerformance([32, 153, 120], 1, 138, 185) == -2\nassert solution.dietPlanPerformance([14, 97, 42, 58, 12], 5, 32, 99) == 1\nassert solution.dietPlanPerformance([3, 162, 136, 129, 2, 5, 120, 107], 8, 154, 200) == 1\nassert solution.dietPlanPerformance([146, 135], 1, 7, 126) == 2\nassert solution.dietPlanPerformance([71, 72, 200, 35, 174], 4, 180, 193) == 2\nassert solution.dietPlanPerformance([7, 137, 153], 2, 100, 159) == 1\nassert solution.dietPlanPerformance([128, 175, 192, 187, 119, 95, 34], 6, 47, 101) == 2\nassert solution.dietPlanPerformance([59, 78, 68, 9, 186, 52, 92], 4, 149, 178) == 4\nassert solution.dietPlanPerformance([120, 143, 31, 25, 30, 22], 6, 9, 20) == 1\nassert solution.dietPlanPerformance([115, 48, 40, 99, 28, 33, 4], 7, 50, 58) == 1\nassert solution.dietPlanPerformance([30, 192, 24, 69, 161, 172, 6, 8], 6, 79, 148) == 3\nassert solution.dietPlanPerformance([23, 149, 42, 80, 69, 173, 112], 1, 133, 145) == -3\nassert solution.dietPlanPerformance([116, 17, 81, 153, 109, 10, 36, 82, 102, 149], 7, 28, 73) == 4\nassert solution.dietPlanPerformance([169, 27, 87], 2, 101, 197) == 0\nassert solution.dietPlanPerformance([89, 156, 192, 17], 2, 106, 184) == 3\nassert solution.dietPlanPerformance([148, 103, 52], 2, 117, 119) == 2\nassert solution.dietPlanPerformance([14, 157, 158, 98, 1, 133, 66, 11, 45, 6], 2, 95, 167) == 1\nassert solution.dietPlanPerformance([93, 161, 115, 40, 68, 92, 108], 4, 177, 179) == 4\nassert solution.dietPlanPerformance([59, 146, 199, 9, 153], 3, 129, 161) == 3\nassert solution.dietPlanPerformance([108, 3, 50, 128, 106, 19, 47], 6, 52, 172) == 2\nassert solution.dietPlanPerformance([101, 198, 4, 55], 3, 2, 141) == 2\nassert solution.dietPlanPerformance([138, 45, 183, 184, 151, 91, 128, 157, 24], 2, 58, 136) == 8\nassert solution.dietPlanPerformance([184, 18, 20, 65], 1, 58, 87) == -1\nassert solution.dietPlanPerformance([116, 83, 9, 118, 133, 101, 55], 5, 169, 181) == 3\nassert solution.dietPlanPerformance([169, 196, 23, 4], 3, 122, 183) == 2\nassert solution.dietPlanPerformance([106, 70, 67, 134, 54, 10, 192, 47], 1, 117, 162) == -5\nassert solution.dietPlanPerformance([127, 124, 97, 95, 63], 4, 98, 115) == 2\nassert solution.dietPlanPerformance([121, 192, 74, 105, 8, 200, 179, 90], 8, 167, 197) == 1\nassert solution.dietPlanPerformance([173, 13, 162, 127, 95, 182, 12], 4, 106, 145) == 4\nassert solution.dietPlanPerformance([97, 178, 38, 61, 112], 4, 8, 89) == 2\nassert solution.dietPlanPerformance([170, 24], 2, 22, 126) == 1\nassert solution.dietPlanPerformance([174, 118, 131, 44, 17], 5, 1, 165) == 1\nassert solution.dietPlanPerformance([49, 3, 18, 69, 138, 196, 178], 1, 111, 150) == -2\nassert solution.dietPlanPerformance([59, 18, 28, 122, 74, 165, 102, 157], 6, 51, 55) == 3\nassert solution.dietPlanPerformance([57, 21, 181, 158], 1, 61, 126) == 0\nassert solution.dietPlanPerformance([49, 174, 159, 46], 2, 191, 192) == 3\nassert solution.dietPlanPerformance([93, 26, 163, 71, 80, 45, 168, 8, 160, 52], 6, 186, 187) == 5\nassert solution.dietPlanPerformance([103, 2, 196, 160, 10], 2, 187, 191) == 0\nassert solution.dietPlanPerformance([92, 109], 2, 83, 195) == 1\nassert solution.dietPlanPerformance([132, 59, 4, 14, 178, 28, 199, 97], 3, 59, 70) == 6\nassert solution.dietPlanPerformance([53, 126], 1, 137, 198) == -2\nassert solution.dietPlanPerformance([45, 190, 21, 105, 70, 189, 136, 72, 27, 82], 1, 56, 116) == 0\nassert solution.dietPlanPerformance([111, 126], 1, 39, 50) == 2\nassert solution.dietPlanPerformance([106, 3, 94, 31], 2, 175, 193) == -3\nassert solution.dietPlanPerformance([70, 16], 2, 86, 120) == 0\nassert solution.dietPlanPerformance([44, 127, 18, 71, 157, 86], 4, 160, 170) == 3\nassert solution.dietPlanPerformance([173, 17, 48, 4], 3, 45, 50) == 2\nassert solution.dietPlanPerformance([28, 30, 37, 4, 178, 153, 163, 156], 5, 98, 139) == 4\nassert solution.dietPlanPerformance([126, 73, 175, 97, 9], 3, 108, 198) == 3\nassert solution.dietPlanPerformance([90, 8, 3], 2, 106, 196) == -2\nassert solution.dietPlanPerformance([182, 75], 2, 156, 157) == 1\nassert solution.dietPlanPerformance([184, 160, 127, 164, 90, 145, 159, 106], 4, 139, 168) == 5\nassert solution.dietPlanPerformance([83, 108, 76, 22, 195], 5, 21, 187) == 1\nassert solution.dietPlanPerformance([170, 69, 134, 11, 136], 4, 160, 196) == 2\nassert solution.dietPlanPerformance([147, 27, 131, 165, 177], 5, 186, 194) == 1\nassert solution.dietPlanPerformance([124, 40, 79, 172], 3, 169, 173) == 2\nassert solution.dietPlanPerformance([100, 37, 92, 140, 162, 47, 6, 114, 93, 183], 10, 68, 132) == 1\nassert solution.dietPlanPerformance([55, 133, 35, 156, 182, 20, 123, 112, 162, 151], 9, 113, 139) == 2\nassert solution.dietPlanPerformance([51, 62, 141], 3, 196, 199) == 1\nassert solution.dietPlanPerformance([77, 118], 1, 175, 178) == -2\nassert solution.dietPlanPerformance([176, 84, 124], 2, 34, 64) == 2\nassert solution.dietPlanPerformance([74, 127, 109, 75], 4, 161, 193) == 1\nassert solution.dietPlanPerformance([9, 128, 74, 78, 180, 129, 144], 2, 143, 152) == 3\nassert solution.dietPlanPerformance([181, 27, 56, 39], 4, 45, 176) == 1\nassert solution.dietPlanPerformance([83, 93, 40, 24, 164, 159, 126], 1, 35, 135) == 1\nassert solution.dietPlanPerformance([88, 80, 198, 139, 51, 24], 5, 81, 193) == 2\nassert solution.dietPlanPerformance([48, 19, 53, 149, 77, 85, 81, 50], 5, 180, 199) == 4\nassert solution.dietPlanPerformance([27, 74, 131, 64, 155, 44, 63], 4, 20, 78) == 4\nassert solution.dietPlanPerformance([182, 148], 1, 33, 184) == 0\nassert solution.dietPlanPerformance([20, 19, 29, 100, 75, 32, 156, 89, 17], 5, 34, 191) == 5\nassert solution.dietPlanPerformance([81, 194, 48, 49], 3, 93, 138) == 2\nassert solution.dietPlanPerformance([115, 156, 198, 167], 4, 132, 187) == 1\nassert solution.dietPlanPerformance([159, 182, 111, 183, 5, 16], 3, 65, 191) == 4\nassert solution.dietPlanPerformance([64, 90, 23], 2, 122, 163) == -1\nassert solution.dietPlanPerformance([52, 167, 185, 179, 37, 147, 135, 54, 174, 4], 9, 172, 187) == 2\nassert solution.dietPlanPerformance([41, 121, 35, 184, 37, 89, 120, 144, 39, 140], 7, 118, 150) == 4\nassert solution.dietPlanPerformance([109, 180], 2, 64, 148) == 1\nassert solution.dietPlanPerformance([57, 104, 172], 2, 52, 157) == 2\nassert solution.dietPlanPerformance([45, 2, 48, 123, 110, 28, 191, 58, 96, 53], 9, 150, 156) == 2\nassert solution.dietPlanPerformance([48, 115, 160, 132, 43, 39, 85, 157, 199], 1, 195, 200) == -8\nassert solution.dietPlanPerformance([48, 130, 59, 89, 149, 151, 103, 2], 6, 119, 160) == 3\nassert solution.dietPlanPerformance([119, 124, 2, 9, 38, 147, 48, 187], 6, 20, 54) == 3\nassert solution.dietPlanPerformance([165, 40, 190, 1, 53, 95], 4, 148, 189) == 3\nassert solution.dietPlanPerformance([75, 22, 92, 2, 52, 156, 144, 27], 7, 23, 164) == 2\nassert solution.dietPlanPerformance([19, 67, 57, 140, 15], 3, 160, 193) == 1\nassert solution.dietPlanPerformance([18, 109, 73, 83], 3, 13, 55) == 2\nassert solution.dietPlanPerformance([156, 126], 1, 196, 196) == -2\nassert solution.dietPlanPerformance([76, 8, 60, 174], 3, 176, 185) == 0\nassert solution.dietPlanPerformance([88, 75, 117, 39, 54, 27], 4, 40, 76) == 3\nassert solution.dietPlanPerformance([15, 147], 1, 159, 169) == -2",
  "inefficient_solution": "class Solution:\n    def dietPlanPerformance(self, calories, k, lower, upper):\n        def check(s):\n            if s < lower:\n                return -1\n            if s > upper:\n                return 1\n            return 0\n\n        ans = 0\n        for i in range(len(calories)):\n            s = 0\n            for j in range(max(0, i - k + 1), i + 1):\n                s += calories[j]\n            ans += check(s)\n        return ans",
  "is_python": true
}