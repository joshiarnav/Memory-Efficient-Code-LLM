{
  "problem_idx": 1903,
  "task_name": "Largest Odd Number in String",
  "markdown_description": "\nYou are given a string `num`, representing a large integer. Return *the **largest-valued odd** integer (as a string) that is a **non-empty substring** of* `num`*, or an empty string* `\"\"` *if no odd integer exists*.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"52\"\n**Output:** \"5\"\n**Explanation:** The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"4206\"\n**Output:** \"\"\n**Explanation:** There are no odd numbers in \"4206\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"35427\"\n**Output:** \"35427\"\n**Explanation:** \"35427\" is already an odd number.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 105`\n* `num` only consists of digits and does not contain any leading zeros.\n\n\n",
  "canonical_solution": "class Solution:\n    def largestOddNumber(self, num: str) -> str:\n        for i in range(len(num) - 1, -1, -1):\n            if (int(num[i]) & 1) == 1:\n                return num[: i + 1]\n        return ''\n",
  "test_case_generator": "\nimport random\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random num string\n    num_length = random.randint(1, 10)\n    num = \"\"\n    for _ in range(num_length):\n        num += str(random.choice([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestOddNumber(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestOddNumber(num) == expected_result\n        if expected_result != \"\":\n            print(f\"assert solution.largestOddNumber('{num}') == '{expected_result}'\")\n            test_case_generator_results.append(f\"assert solution.largestOddNumber('{num}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.largestOddNumber('584') == '5'\nassert solution.largestOddNumber('3826166635') == '3826166635'\nassert solution.largestOddNumber('57409') == '57409'\nassert solution.largestOddNumber('79532556') == '7953255'\nassert solution.largestOddNumber('140602379') == '140602379'\nassert solution.largestOddNumber('7322') == '73'\nassert solution.largestOddNumber('99') == '99'\nassert solution.largestOddNumber('5521') == '5521'\nassert solution.largestOddNumber('458995') == '458995'\nassert solution.largestOddNumber('91') == '91'\nassert solution.largestOddNumber('54') == '5'\nassert solution.largestOddNumber('4984') == '49'\nassert solution.largestOddNumber('3451426') == '3451'\nassert solution.largestOddNumber('7973802') == '7973'\nassert solution.largestOddNumber('580705') == '580705'\nassert solution.largestOddNumber('41') == '41'\nassert solution.largestOddNumber('14109') == '14109'\nassert solution.largestOddNumber('717') == '717'\nassert solution.largestOddNumber('473') == '473'\nassert solution.largestOddNumber('5178960903') == '5178960903'\nassert solution.largestOddNumber('448524') == '4485'\nassert solution.largestOddNumber('052351375') == '052351375'\nassert solution.largestOddNumber('2824373144') == '28243731'\nassert solution.largestOddNumber('885') == '885'\nassert solution.largestOddNumber('7') == '7'\nassert solution.largestOddNumber('6580052054') == '658005205'\nassert solution.largestOddNumber('3') == '3'\nassert solution.largestOddNumber('592109') == '592109'\nassert solution.largestOddNumber('738229') == '738229'\nassert solution.largestOddNumber('51') == '51'\nassert solution.largestOddNumber('7145') == '7145'\nassert solution.largestOddNumber('0894768') == '08947'\nassert solution.largestOddNumber('1871584714') == '187158471'\nassert solution.largestOddNumber('52') == '5'\nassert solution.largestOddNumber('3') == '3'\nassert solution.largestOddNumber('021') == '021'\nassert solution.largestOddNumber('62854') == '6285'\nassert solution.largestOddNumber('9704') == '97'\nassert solution.largestOddNumber('6301') == '6301'\nassert solution.largestOddNumber('9500273') == '9500273'\nassert solution.largestOddNumber('754') == '75'\nassert solution.largestOddNumber('85979618') == '8597961'\nassert solution.largestOddNumber('85906174') == '8590617'\nassert solution.largestOddNumber('122') == '1'\nassert solution.largestOddNumber('2080499') == '2080499'\nassert solution.largestOddNumber('4735506') == '47355'\nassert solution.largestOddNumber('15325793') == '15325793'\nassert solution.largestOddNumber('296491922') == '2964919'\nassert solution.largestOddNumber('58566352') == '5856635'\nassert solution.largestOddNumber('1617') == '1617'\nassert solution.largestOddNumber('7947') == '7947'\nassert solution.largestOddNumber('9456946') == '94569'\nassert solution.largestOddNumber('761') == '761'\nassert solution.largestOddNumber('27781329') == '27781329'\nassert solution.largestOddNumber('2316167693') == '2316167693'\nassert solution.largestOddNumber('8846574') == '884657'\nassert solution.largestOddNumber('5215731656') == '521573165'\nassert solution.largestOddNumber('6299810914') == '629981091'\nassert solution.largestOddNumber('7907') == '7907'\nassert solution.largestOddNumber('0618638') == '061863'\nassert solution.largestOddNumber('96646108') == '966461'\nassert solution.largestOddNumber('95563') == '95563'\nassert solution.largestOddNumber('0211276') == '021127'\nassert solution.largestOddNumber('998849') == '998849'\nassert solution.largestOddNumber('6029') == '6029'\nassert solution.largestOddNumber('4459088106') == '44590881'\nassert solution.largestOddNumber('25333') == '25333'\nassert solution.largestOddNumber('503983482') == '503983'\nassert solution.largestOddNumber('9720622') == '97'\nassert solution.largestOddNumber('1192620') == '119'\nassert solution.largestOddNumber('35502494') == '3550249'\nassert solution.largestOddNumber('3413360') == '34133'\nassert solution.largestOddNumber('9') == '9'\nassert solution.largestOddNumber('3555') == '3555'\nassert solution.largestOddNumber('748') == '7'\nassert solution.largestOddNumber('7536387848') == '7536387'\nassert solution.largestOddNumber('409239164') == '4092391'\nassert solution.largestOddNumber('81175662') == '81175'\nassert solution.largestOddNumber('964283356') == '96428335'\nassert solution.largestOddNumber('852362') == '8523'\nassert solution.largestOddNumber('3186229') == '3186229'\nassert solution.largestOddNumber('866274') == '86627'\nassert solution.largestOddNumber('774751929') == '774751929'\nassert solution.largestOddNumber('126496818') == '12649681'\nassert solution.largestOddNumber('5') == '5'\nassert solution.largestOddNumber('365942422') == '3659'\nassert solution.largestOddNumber('76') == '7'\nassert solution.largestOddNumber('53') == '53'\nassert solution.largestOddNumber('7799') == '7799'\nassert solution.largestOddNumber('1616425821') == '1616425821'\nassert solution.largestOddNumber('506') == '5'\nassert solution.largestOddNumber('11') == '11'\nassert solution.largestOddNumber('73229') == '73229'",
  "inefficient_solution": "class Solution:\n    def largestOddNumber(self, num: str) -> str:\n        # Allocate an enormous amount of memory for the substring\n        substrings = [num[i:i+10000] for i in range(len(num))]\n        # Iterate over the substrings to find the largest odd number\n        for substring in substrings:\n            # Check each character in the substring in reverse order\n            for i in range(len(substring) - 1, -1, -1):\n                # Convert the character to an integer and check if it's odd\n                if int(substring[i]) & 1 == 1:\n                    # Return the substring if it's odd\n                    return substring\n        # If no odd number is found, return an empty string\n        return ''",
  "is_python": true
}