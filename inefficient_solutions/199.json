{
  "problem_idx": 199,
  "task_name": "Binary Tree Right Side View",
  "markdown_description": "\nGiven the `root` of a binary tree, imagine yourself standing on the **right side** of it, return *the values of the nodes you can see ordered from top to bottom*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0199.Binary%20Tree%20Right%20Side%20View/images/tree.jpg)\n\n```\n\n**Input:** root = [1,2,3,null,5,null,4]\n**Output:** [1,3,4]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [1,null,3]\n**Output:** [1,3]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** []\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 100]`.\n* `-100 <= Node.val <= 100`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        while q:\n            ans.append(q[-1].val)\n            for _ in range(len(q)):\n                node = q.popleft()\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return ans\n",
  "test_case_generator": "\nfrom collections import deque\nimport random\n\n# Define the TreeNode class\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        while q:\n            ans.append(q[-1].val)\n            for _ in range(len(q)):\n                node = q.popleft()\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate the binary tree\n    root = generate_tree()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.rightSideView(root)\n\n    return root, expected_result\n\n\ndef generate_tree():\n    values = random.sample(range(1, 101), random.randint(0, 10))\n\n    nodes = {}\n    for val in values:\n        nodes[val] = TreeNode(val)\n\n    root = None\n    for val in values:\n        if root is None:\n            root = nodes[val]\n        else:\n            parent = nodes[random.choice(list(nodes.keys()))]\n            if parent.left is None:\n                parent.left = nodes[val]\n            else:\n                parent.right = nodes[val]\n\n    return root\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.rightSideView(root) == expected_result\n\n        test_case = generate_test_case_string(root, expected_result)\n        if test_case:\n            test_case_generator_results.append(test_case)\n    \n    return test_case_generator_results\n\n\ndef generate_test_case_string(root, expected_result):\n    if root is None:\n        return None\n\n    result_str = \"[\" + \", \".join(str(val) for val in expected_result) + \"]\"\n    root_str = generate_tree_string(root)\n\n    test_case = f\"assert solution.rightSideView({root_str}) == {result_str}\"\n    return test_case\n\n\ndef generate_tree_string(node):\n    if node is None:\n        return \"None\"\n\n    node_str = f\"TreeNode({node.val}, \"\n    node_str += generate_tree_string(node.left) + \", \"\n    node_str += generate_tree_string(node.right) + \")\"\n    \n    return node_str\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n\n",
  "test_case": "assert solution.rightSideView(TreeNode(88, None, None)) == [88]\nassert solution.rightSideView(TreeNode(16, None, None)) == [16]\nassert solution.rightSideView(TreeNode(9, TreeNode(23, None, None), TreeNode(42, TreeNode(64, None, None), None))) == [9, 42, 64]\nassert solution.rightSideView(TreeNode(29, TreeNode(58, None, None), None)) == [29, 58]\nassert solution.rightSideView(TreeNode(98, TreeNode(25, None, None), None)) == [98, 25]\nassert solution.rightSideView(TreeNode(47, None, None)) == [47]\nassert solution.rightSideView(TreeNode(24, TreeNode(74, None, None), None)) == [24, 74]\nassert solution.rightSideView(TreeNode(75, None, None)) == [75]\nassert solution.rightSideView(TreeNode(28, None, None)) == [28]\nassert solution.rightSideView(TreeNode(15, None, None)) == [15]\nassert solution.rightSideView(TreeNode(59, None, None)) == [59]\nassert solution.rightSideView(TreeNode(79, None, None)) == [79]\nassert solution.rightSideView(TreeNode(88, TreeNode(21, None, None), None)) == [88, 21]\nassert solution.rightSideView(TreeNode(8, TreeNode(42, None, None), None)) == [8, 42]\nassert solution.rightSideView(TreeNode(20, TreeNode(87, TreeNode(51, TreeNode(58, TreeNode(98, TreeNode(39, None, None), TreeNode(24, None, None)), None), None), None), None)) == [20, 87, 51, 58, 98, 24]\nassert solution.rightSideView(TreeNode(56, None, None)) == [56]\nassert solution.rightSideView(TreeNode(55, TreeNode(67, TreeNode(63, None, None), None), None)) == [55, 67, 63]\nassert solution.rightSideView(TreeNode(87, TreeNode(2, None, None), TreeNode(50, None, None))) == [87, 50]\nassert solution.rightSideView(TreeNode(83, TreeNode(54, TreeNode(6, None, None), TreeNode(82, None, None)), TreeNode(17, None, None))) == [83, 17, 82]\nassert solution.rightSideView(TreeNode(77, TreeNode(55, None, None), TreeNode(25, TreeNode(84, None, None), None))) == [77, 25, 84]\nassert solution.rightSideView(TreeNode(6, None, None)) == [6]\nassert solution.rightSideView(TreeNode(11, TreeNode(37, TreeNode(16, TreeNode(56, TreeNode(92, TreeNode(28, TreeNode(9, None, None), TreeNode(80, TreeNode(88, None, None), None)), None), None), None), None), None)) == [11, 37, 16, 56, 92, 28, 80, 88]\nassert solution.rightSideView(TreeNode(92, TreeNode(90, TreeNode(86, None, None), None), None)) == [92, 90, 86]\nassert solution.rightSideView(TreeNode(84, TreeNode(81, None, None), TreeNode(1, TreeNode(61, None, None), TreeNode(41, TreeNode(10, None, None), None)))) == [84, 1, 41, 10]\nassert solution.rightSideView(TreeNode(87, None, None)) == [87]\nassert solution.rightSideView(TreeNode(73, None, None)) == [73]\nassert solution.rightSideView(TreeNode(31, None, None)) == [31]\nassert solution.rightSideView(TreeNode(55, TreeNode(67, TreeNode(78, None, None), None), None)) == [55, 67, 78]\nassert solution.rightSideView(TreeNode(43, TreeNode(47, TreeNode(13, TreeNode(10, None, None), TreeNode(66, None, None)), None), None)) == [43, 47, 13, 66]\nassert solution.rightSideView(TreeNode(84, None, None)) == [84]\nassert solution.rightSideView(TreeNode(79, TreeNode(97, TreeNode(21, TreeNode(51, TreeNode(56, None, None), None), None), None), None)) == [79, 97, 21, 51, 56]\nassert solution.rightSideView(TreeNode(94, None, None)) == [94]\nassert solution.rightSideView(TreeNode(96, None, None)) == [96]\nassert solution.rightSideView(TreeNode(94, None, None)) == [94]\nassert solution.rightSideView(TreeNode(11, None, None)) == [11]\nassert solution.rightSideView(TreeNode(23, None, None)) == [23]\nassert solution.rightSideView(TreeNode(38, TreeNode(41, None, None), None)) == [38, 41]\nassert solution.rightSideView(TreeNode(66, TreeNode(20, TreeNode(76, TreeNode(9, TreeNode(2, None, None), None), TreeNode(28, None, None)), TreeNode(14, TreeNode(97, None, None), None)), None)) == [66, 20, 14, 97, 2]\nassert solution.rightSideView(TreeNode(67, TreeNode(52, TreeNode(3, TreeNode(41, None, None), None), None), None)) == [67, 52, 3, 41]\nassert solution.rightSideView(TreeNode(9, TreeNode(67, None, None), None)) == [9, 67]\nassert solution.rightSideView(TreeNode(61, TreeNode(34, TreeNode(81, None, None), TreeNode(86, None, None)), None)) == [61, 34, 86]\nassert solution.rightSideView(TreeNode(50, TreeNode(48, TreeNode(33, None, None), None), None)) == [50, 48, 33]\nassert solution.rightSideView(TreeNode(2, None, None)) == [2]\nassert solution.rightSideView(TreeNode(97, TreeNode(2, None, None), TreeNode(22, TreeNode(31, None, None), None))) == [97, 22, 31]\nassert solution.rightSideView(TreeNode(16, TreeNode(71, TreeNode(91, None, None), None), TreeNode(67, TreeNode(76, None, None), None))) == [16, 67, 76]\nassert solution.rightSideView(TreeNode(19, None, None)) == [19]\nassert solution.rightSideView(TreeNode(41, TreeNode(53, TreeNode(25, None, None), None), None)) == [41, 53, 25]\nassert solution.rightSideView(TreeNode(100, None, None)) == [100]\nassert solution.rightSideView(TreeNode(60, None, None)) == [60]\nassert solution.rightSideView(TreeNode(18, TreeNode(87, None, None), None)) == [18, 87]\nassert solution.rightSideView(TreeNode(85, None, None)) == [85]\nassert solution.rightSideView(TreeNode(100, TreeNode(54, TreeNode(15, TreeNode(46, None, None), None), None), None)) == [100, 54, 15, 46]\nassert solution.rightSideView(TreeNode(87, None, None)) == [87]\nassert solution.rightSideView(TreeNode(35, None, None)) == [35]\nassert solution.rightSideView(TreeNode(9, TreeNode(87, None, None), TreeNode(58, TreeNode(49, None, None), TreeNode(19, None, None)))) == [9, 58, 19]\nassert solution.rightSideView(TreeNode(49, TreeNode(37, None, None), None)) == [49, 37]\nassert solution.rightSideView(TreeNode(8, None, None)) == [8]\nassert solution.rightSideView(TreeNode(85, None, None)) == [85]\nassert solution.rightSideView(TreeNode(17, TreeNode(79, TreeNode(87, None, None), None), None)) == [17, 79, 87]\nassert solution.rightSideView(TreeNode(10, None, None)) == [10]\nassert solution.rightSideView(TreeNode(54, TreeNode(60, None, None), TreeNode(40, TreeNode(100, None, None), None))) == [54, 40, 100]\nassert solution.rightSideView(TreeNode(87, TreeNode(79, None, None), None)) == [87, 79]\nassert solution.rightSideView(TreeNode(25, TreeNode(80, TreeNode(13, None, None), None), None)) == [25, 80, 13]\nassert solution.rightSideView(TreeNode(98, None, None)) == [98]\nassert solution.rightSideView(TreeNode(63, None, None)) == [63]\nassert solution.rightSideView(TreeNode(83, None, None)) == [83]\nassert solution.rightSideView(TreeNode(75, TreeNode(23, None, None), TreeNode(27, TreeNode(83, TreeNode(26, None, None), None), None))) == [75, 27, 83, 26]\nassert solution.rightSideView(TreeNode(48, TreeNode(18, None, None), TreeNode(99, None, None))) == [48, 99]\nassert solution.rightSideView(TreeNode(71, TreeNode(40, TreeNode(22, TreeNode(63, None, None), None), TreeNode(27, TreeNode(72, None, None), None)), None)) == [71, 40, 27, 72]\nassert solution.rightSideView(TreeNode(94, TreeNode(4, TreeNode(52, TreeNode(96, None, None), None), None), None)) == [94, 4, 52, 96]\nassert solution.rightSideView(TreeNode(39, None, None)) == [39]\nassert solution.rightSideView(TreeNode(53, None, None)) == [53]\nassert solution.rightSideView(TreeNode(32, None, None)) == [32]\nassert solution.rightSideView(TreeNode(3, TreeNode(49, TreeNode(37, None, None), None), None)) == [3, 49, 37]\nassert solution.rightSideView(TreeNode(86, TreeNode(48, TreeNode(4, TreeNode(27, TreeNode(2, None, None), None), None), None), None)) == [86, 48, 4, 27, 2]\nassert solution.rightSideView(TreeNode(75, TreeNode(67, None, None), None)) == [75, 67]\nassert solution.rightSideView(TreeNode(82, TreeNode(15, TreeNode(39, None, None), None), None)) == [82, 15, 39]\nassert solution.rightSideView(TreeNode(45, None, None)) == [45]\nassert solution.rightSideView(TreeNode(1, None, None)) == [1]\nassert solution.rightSideView(TreeNode(17, TreeNode(19, None, None), TreeNode(18, TreeNode(58, None, None), None))) == [17, 18, 58]\nassert solution.rightSideView(TreeNode(63, None, None)) == [63]\nassert solution.rightSideView(TreeNode(83, TreeNode(59, TreeNode(54, None, None), None), None)) == [83, 59, 54]\nassert solution.rightSideView(TreeNode(82, TreeNode(36, TreeNode(21, None, None), TreeNode(49, None, None)), None)) == [82, 36, 49]\nassert solution.rightSideView(TreeNode(32, None, None)) == [32]\nassert solution.rightSideView(TreeNode(52, TreeNode(90, TreeNode(40, None, None), None), None)) == [52, 90, 40]\nassert solution.rightSideView(TreeNode(5, None, None)) == [5]\nassert solution.rightSideView(TreeNode(73, TreeNode(72, TreeNode(61, TreeNode(69, TreeNode(46, None, None), TreeNode(12, None, None)), None), TreeNode(7, None, None)), TreeNode(6, None, None))) == [73, 6, 7, 69, 12]\nassert solution.rightSideView(TreeNode(9, TreeNode(45, TreeNode(43, TreeNode(33, None, None), TreeNode(52, TreeNode(47, None, None), None)), TreeNode(63, None, None)), None)) == [9, 45, 63, 52, 47]\nassert solution.rightSideView(TreeNode(92, None, None)) == [92]\nassert solution.rightSideView(TreeNode(8, TreeNode(85, None, None), None)) == [8, 85]\nassert solution.rightSideView(TreeNode(55, None, None)) == [55]\nassert solution.rightSideView(TreeNode(78, TreeNode(29, None, None), None)) == [78, 29]\nassert solution.rightSideView(TreeNode(95, None, None)) == [95]\nassert solution.rightSideView(TreeNode(29, TreeNode(90, TreeNode(59, None, None), TreeNode(58, TreeNode(42, TreeNode(19, None, None), None), None)), None)) == [29, 90, 58, 42, 19]",
  "inefficient_solution": "class Solution:\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        while q:\n            ans.append(q[-1].val)\n            q_copy = deque(q)\n            q = deque()\n            while q_copy:\n                node = q_copy.popleft()\n                if node.left:\n                    q += [node.left]*1000\n                if node.right:\n                    q += [node.right]*1000\n        return ans",
  "is_python": true
}