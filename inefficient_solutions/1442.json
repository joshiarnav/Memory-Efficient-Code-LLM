{
  "problem_idx": 1442,
  "task_name": "Count Triplets That Can Form Two Arrays of Equal XOR",
  "markdown_description": "\nGiven an array of integers `arr`.\n\n\nWe want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`.\n\n\nLet's define `a` and `b` as follows:\n\n\n* `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]`\n* `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`\n\n\nNote that **^** denotes the **bitwise-xor** operation.\n\n\nReturn *the number of triplets* (`i`, `j` and `k`) Where `a == b`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [2,3,1,6,7]\n**Output:** 4\n**Explanation:** The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1,1,1,1,1]\n**Output:** 10\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 300`\n* `1 <= arr[i] <= 108`\n\n\n",
  "canonical_solution": "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        pre = [0] * (n + 1)\n        for i in range(n):\n            pre[i + 1] = pre[i] ^ arr[i]\n        ans = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    a, b = pre[j] ^ pre[i], pre[k + 1] ^ pre[j]\n                    if a == b:\n                        ans += 1\n        return ans\n",
  "test_case_generator": "\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        pre = [0] * (n + 1)\n        for i in range(n):\n            pre[i + 1] = pre[i] ^ arr[i]\n        ans = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    a, b = pre[j] ^ pre[i], pre[k + 1] ^ pre[j]\n                    if a == b:\n                        ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.choices(range(1, int(1e8 + 1)), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countTriplets(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countTriplets(arr) == expected_result\n        print(f\"assert solution.countTriplets({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countTriplets({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countTriplets([74290352, 81106852, 16098470, 58724181, 54341471, 83979410]) == 0\nassert solution.countTriplets([28807637, 28275245, 91485790, 39222701, 37093801, 2456518]) == 0\nassert solution.countTriplets([51596018]) == 0\nassert solution.countTriplets([71177283, 8285759, 8981758, 58879275, 22569810, 41255585, 61407089, 50109852, 70313660]) == 0\nassert solution.countTriplets([89474076, 47712924, 4072976, 72652039, 41727960, 38258122, 91002643, 62079233, 33485246]) == 0\nassert solution.countTriplets([39806303, 2833167, 97339962, 398650, 75546374, 90658558, 86768716, 47706452, 60523646]) == 0\nassert solution.countTriplets([77447197, 10055275, 30224278]) == 0\nassert solution.countTriplets([83173378]) == 0\nassert solution.countTriplets([2206242, 56178739, 75533476, 66598390, 56210665]) == 0\nassert solution.countTriplets([15123803, 86975829, 13712202, 43339760]) == 0\nassert solution.countTriplets([88739281, 34298413, 52368156, 14484554, 78409213, 46687919, 61331584, 84694524]) == 0\nassert solution.countTriplets([2473596, 15226483, 15553208, 95671115, 72413423, 99834662, 49222024, 49257704]) == 0\nassert solution.countTriplets([51282662]) == 0\nassert solution.countTriplets([26248134, 89311708, 15357898, 25463020, 28177779, 29204652, 82312246, 89358623, 59158171]) == 0\nassert solution.countTriplets([95921421, 57419013, 34682936, 70610625, 15145292, 99020444, 72959427, 2882355, 3264662]) == 0\nassert solution.countTriplets([91762385, 16608367, 15584150, 40614661, 67147722, 52889101, 58359032]) == 0\nassert solution.countTriplets([51366611, 42133440, 27842990, 33749080, 40923990]) == 0\nassert solution.countTriplets([14954799, 56738150, 46480647, 493014]) == 0\nassert solution.countTriplets([54111181, 69624923, 80105660, 15185530]) == 0\nassert solution.countTriplets([9069360, 16726116]) == 0\nassert solution.countTriplets([70459851, 15443939, 18088838, 506147]) == 0\nassert solution.countTriplets([49391930, 65930812]) == 0\nassert solution.countTriplets([27950700, 78352259, 55102915, 9500927, 59588963, 43544497, 82390589, 85130552]) == 0\nassert solution.countTriplets([14444665, 10291006, 59030704, 20402791, 56447731, 16329132]) == 0\nassert solution.countTriplets([37286213, 28514118, 49711738, 58767988, 70961829, 43184653]) == 0\nassert solution.countTriplets([35215765, 66043150, 87363491, 95474451, 39969836, 61420546, 79589607, 54536682, 66514537, 31260613]) == 0\nassert solution.countTriplets([35256590, 87373867, 87383065, 38533884]) == 0\nassert solution.countTriplets([70048080, 41647961, 99774455, 89826863]) == 0\nassert solution.countTriplets([16532509, 9672258, 54825407, 737190, 83416056]) == 0\nassert solution.countTriplets([5626113, 79609532, 71905292, 28644042, 4677129, 22597612, 65072110, 24425463, 64407396, 54631515]) == 0\nassert solution.countTriplets([88666603, 54603339, 53388336, 79077704, 22450740, 15105243, 58757150, 64316898, 60704497, 7750585]) == 0\nassert solution.countTriplets([39966690]) == 0\nassert solution.countTriplets([19015703]) == 0\nassert solution.countTriplets([46578773, 96445391]) == 0\nassert solution.countTriplets([34404589, 24813574, 30296948, 95028501, 76130830, 97829290, 63205155]) == 0\nassert solution.countTriplets([68511248, 97364679, 98226700, 41978471, 66501232, 42416786, 36422912]) == 0\nassert solution.countTriplets([51223511, 40244466, 97743349, 97453661, 18933512, 278512, 95942620, 91978950]) == 0\nassert solution.countTriplets([24283232, 71804859]) == 0\nassert solution.countTriplets([84044448, 56262306, 23079727, 15430862]) == 0\nassert solution.countTriplets([82179251, 97900960]) == 0\nassert solution.countTriplets([88018725]) == 0\nassert solution.countTriplets([98173050, 30798087]) == 0\nassert solution.countTriplets([74223462, 47800693, 95541365, 35579433]) == 0\nassert solution.countTriplets([61375957]) == 0\nassert solution.countTriplets([11510987, 34851431, 19525873, 87605986, 21968930, 65282521, 92347011, 46872633, 34057726]) == 0\nassert solution.countTriplets([7566111, 40274404, 147154, 5816227, 44673696, 78541834]) == 0\nassert solution.countTriplets([13585498]) == 0\nassert solution.countTriplets([19943317, 7542116, 80994232, 65439440, 56313140, 75337237, 97075785, 69215611]) == 0\nassert solution.countTriplets([323797, 87868752, 68034440, 29650622, 7494078]) == 0\nassert solution.countTriplets([73455633, 7181597, 34537996, 78329819, 27818175]) == 0\nassert solution.countTriplets([23491266, 12630923, 33751365, 7052847, 20972548]) == 0\nassert solution.countTriplets([67117690, 14560186, 74792864, 95597587, 56126431, 79144499, 71035246, 8318056]) == 0\nassert solution.countTriplets([21894930, 34799961]) == 0\nassert solution.countTriplets([81374857, 60402576]) == 0\nassert solution.countTriplets([21341866, 34320045, 29273839, 69852723, 452119, 70936276, 6977359, 73576885]) == 0\nassert solution.countTriplets([88771970, 73743315, 70059333, 39084610, 7966988, 68924532, 38378533, 10004542]) == 0\nassert solution.countTriplets([4629721, 20670043, 47876980, 12755773]) == 0\nassert solution.countTriplets([2411786, 49731561, 1718533, 46577107, 41027241]) == 0\nassert solution.countTriplets([383851, 84027276, 54379661, 23108696]) == 0\nassert solution.countTriplets([27102777, 91086551, 86744304, 35391387, 89355286, 31628936]) == 0\nassert solution.countTriplets([81464058, 5605165, 64417478, 43377069, 50218666, 24078978, 29672417, 73989546, 13073352, 17195233]) == 0\nassert solution.countTriplets([52199136, 26940663, 44497446, 95040777, 29884440, 2532422, 38686240, 72933542, 34681137]) == 0\nassert solution.countTriplets([51148421, 55384150]) == 0\nassert solution.countTriplets([88933721, 87416758, 81556963, 83082856]) == 0\nassert solution.countTriplets([90752072]) == 0\nassert solution.countTriplets([75597581, 67043371, 68071903, 86960210, 20383124, 6562997, 58730547, 41444266, 76260312, 20883045]) == 0\nassert solution.countTriplets([58715117, 2961053, 57905184, 82476418, 33174833, 80889445, 60339691, 97344142, 13081118, 36445698]) == 0\nassert solution.countTriplets([62783031, 52371363, 87697980, 57438279]) == 0\nassert solution.countTriplets([28710434, 842822, 18518672, 13710516, 29119256, 43231277]) == 0\nassert solution.countTriplets([19033390]) == 0\nassert solution.countTriplets([50919495, 83339525, 93929226, 47101265]) == 0\nassert solution.countTriplets([82944177, 55478914, 58637456, 57995138, 91630390, 91088281, 14065425]) == 0\nassert solution.countTriplets([41253204, 95109288, 10112763, 988506, 9751777]) == 0\nassert solution.countTriplets([51375002, 41666444, 5746125, 15611400]) == 0\nassert solution.countTriplets([16164546, 56904977, 14902899, 73615936]) == 0\nassert solution.countTriplets([53944836, 78966551, 59215826, 6897406]) == 0\nassert solution.countTriplets([97623113]) == 0\nassert solution.countTriplets([41934536, 39061798, 71910674]) == 0\nassert solution.countTriplets([99278898, 6925137, 77751933, 92044150, 5448252]) == 0\nassert solution.countTriplets([47687050, 34072341, 42789986, 27006937, 62063875, 39018300, 47218334]) == 0\nassert solution.countTriplets([5356609, 96617857, 46047526, 26190909, 60848184, 4622924, 61341660]) == 0\nassert solution.countTriplets([77810672, 26160039, 99812072, 72989674, 68126166, 76446135]) == 0\nassert solution.countTriplets([14140680]) == 0\nassert solution.countTriplets([14319411, 35354649, 25744249, 44245973]) == 0\nassert solution.countTriplets([19796770, 45394251, 43864735, 30311588, 94633467, 72483572, 49867913, 52150957, 58917810]) == 0\nassert solution.countTriplets([13619538, 79881038, 83440833]) == 0\nassert solution.countTriplets([8162334, 64339348]) == 0\nassert solution.countTriplets([75805617, 18379569, 49136548, 81095512]) == 0\nassert solution.countTriplets([10655741, 60000637]) == 0\nassert solution.countTriplets([56603248, 3634745, 37483810, 46423383, 45034242, 23314735, 62362210, 62111894, 14674202]) == 0\nassert solution.countTriplets([34249024, 90394259, 78495030, 26090682, 12732968, 15006983, 8065027, 22100844, 14569860, 73877488]) == 0\nassert solution.countTriplets([7212102, 56806222, 76879855, 38422380, 32545276, 57921871]) == 0\nassert solution.countTriplets([64994643]) == 0\nassert solution.countTriplets([22072576, 43164979, 79632729, 82803537, 29464201]) == 0\nassert solution.countTriplets([17470838, 38300282, 33391151, 79919431]) == 0\nassert solution.countTriplets([68061119, 32057790, 19586034, 60953542, 23141863, 17090454, 76363732, 96879501, 32600026]) == 0\nassert solution.countTriplets([68882235, 11963415, 79734480, 63028812, 83059034]) == 0\nassert solution.countTriplets([28868568, 89088637, 78219671, 85975271, 23238551, 40413582, 5658092]) == 0\nassert solution.countTriplets([94292761]) == 0\nassert solution.countTriplets([3386445, 8536015, 84681328, 65263941]) == 0",
  "inefficient_solution": "class Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        n = len(arr)\n        pre = [0] * (n * 100)  # allocate 100 times more memory than needed\n        for i in range(n):\n            pre[i + 1] = pre[i] ^ arr[i]\n        ans = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                for k in range(j, n):\n                    a = 0\n                    for x in range(i, j):\n                        a ^= arr[x]\n                    b = 0\n                    for y in range(j, k + 1):\n                        b ^= arr[y]\n                    if a == b:\n                        ans += 1\n        return ans",
  "is_python": true
}