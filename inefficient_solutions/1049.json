{
  "problem_idx": 1049,
  "task_name": "Last Stone Weight II",
  "markdown_description": "\nYou are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.\n\n\nWe are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is:\n\n\n* If `x == y`, both stones are destroyed, and\n* If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\n\nAt the end of the game, there is **at most one** stone left.\n\n\nReturn *the smallest possible weight of the left stone*. If there are no stones left, return `0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** stones = [2,7,4,1,8,1]\n**Output:** 1\n**Explanation:**\nWe can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** stones = [31,26,33,21,40]\n**Output:** 5\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= stones.length <= 30`\n* `1 <= stones[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def lastStoneWeightII(self, stones: List[int]) -> int:\n        s = sum(stones)\n        m, n = len(stones), s >> 1\n        dp = [0] * (n + 1)\n        for v in stones:\n            for j in range(n, v - 1, -1):\n                dp[j] = max(dp[j], dp[j - v] + v)\n        return s - dp[-1] * 2\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def lastStoneWeightII(self, stones: List[int]) -> int:\n        s = sum(stones)\n        m, n = len(stones), s >> 1\n        dp = [0] * (n + 1)\n        for v in stones:\n            for j in range(n, v - 1, -1):\n                dp[j] = max(dp[j], dp[j - v] + v)\n        return s - dp[-1] * 2\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random stone weights\n    stones = random.sample(range(1, 101), random.randint(1, 30))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lastStoneWeightII(stones)\n\n    return stones, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        stones, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lastStoneWeightII(stones) == expected_result\n        print(f\"assert solution.lastStoneWeightII({stones}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.lastStoneWeightII({stones}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lastStoneWeightII([35, 64, 67]) == 32\nassert solution.lastStoneWeightII([7, 98, 19, 60, 40, 26, 71, 20, 94, 25, 2, 97, 74, 48, 80, 47, 32, 92, 51, 1, 28, 49, 61, 55, 57, 38, 70, 90, 34, 21]) == 1\nassert solution.lastStoneWeightII([1, 13, 98, 21, 17, 27]) == 19\nassert solution.lastStoneWeightII([70, 15, 77, 94, 25, 92, 100, 35, 89, 27, 51]) == 1\nassert solution.lastStoneWeightII([21, 31, 42]) == 10\nassert solution.lastStoneWeightII([89, 70, 84, 22, 90]) == 3\nassert solution.lastStoneWeightII([38, 61, 62, 3, 98, 83, 76, 94, 45, 79, 96]) == 1\nassert solution.lastStoneWeightII([17, 76, 95, 49, 46, 63, 12, 20, 6, 35, 82, 78, 3, 65, 61, 40, 59, 89, 42, 26, 62, 51, 84, 9, 23, 64, 19]) == 0\nassert solution.lastStoneWeightII([15, 57, 70, 50, 27, 48, 2, 18, 16, 23, 69, 37, 94, 67, 43, 72, 33, 98, 34, 90, 10, 25, 84, 36, 97, 38]) == 1\nassert solution.lastStoneWeightII([94, 15, 2, 91, 47, 84, 14, 46, 53, 13, 4, 18, 43, 31, 86, 51, 67, 8, 73]) == 0\nassert solution.lastStoneWeightII([21, 62, 56, 94, 37, 23, 16, 91, 25, 52, 61, 88, 12, 10, 70, 19, 77, 51, 13, 74, 36, 34, 71, 11, 17]) == 1\nassert solution.lastStoneWeightII([51, 77, 91, 53, 65, 8, 58, 5, 99, 9, 14, 43, 35, 11, 73, 82, 41, 49, 94, 62, 39, 76, 12]) == 1\nassert solution.lastStoneWeightII([94, 42, 92, 11, 100, 25, 75, 43, 93, 80, 20, 33]) == 0\nassert solution.lastStoneWeightII([35]) == 35\nassert solution.lastStoneWeightII([13, 71, 17, 74, 37, 44, 66, 14, 45, 72, 82, 15, 49, 30, 100, 90, 56, 78, 46, 52, 85, 23, 3, 54, 92, 88, 99, 28]) == 1\nassert solution.lastStoneWeightII([46, 19, 10, 13, 18, 64, 43, 93, 9, 54, 98, 89, 94, 5, 80, 66, 78, 41, 16, 23, 99, 25, 56]) == 1\nassert solution.lastStoneWeightII([100, 47, 1, 30, 97, 71, 44, 89, 19, 63, 95, 41, 69, 85, 42]) == 1\nassert solution.lastStoneWeightII([96, 20, 74, 81, 39, 92, 43, 15, 33, 85, 53, 25, 58, 44, 27, 87, 30, 52, 23, 100, 69, 17, 93, 97, 66, 4, 77]) == 0\nassert solution.lastStoneWeightII([97, 100, 86, 95, 42, 85, 69]) == 8\nassert solution.lastStoneWeightII([13, 95, 17, 7, 74, 26, 8, 25, 29, 100]) == 0\nassert solution.lastStoneWeightII([52, 44, 98, 28, 6, 39, 62, 29, 60, 18, 36, 21, 38, 65, 91, 80]) == 1\nassert solution.lastStoneWeightII([26, 27, 60, 66, 16, 64, 79, 14, 3, 53, 37, 59, 40, 95, 8, 69, 99, 54, 32, 56, 35, 70, 100, 61, 73, 65, 97, 9, 6]) == 1\nassert solution.lastStoneWeightII([84, 14, 58, 57, 75, 43, 51, 70, 83, 60, 79, 38, 92, 18]) == 0\nassert solution.lastStoneWeightII([11, 29, 46, 71]) == 7\nassert solution.lastStoneWeightII([25, 90, 45, 87, 48, 32, 20, 100, 85, 9, 10, 28, 23, 5, 57, 72, 74, 83, 49, 19, 4, 93, 58, 24, 16, 14, 21]) == 1\nassert solution.lastStoneWeightII([42, 4, 87, 1, 86, 78, 65, 43, 77, 73, 49, 34, 38, 74, 21, 6, 76, 55, 26, 37, 93, 68, 67, 56, 62]) == 0\nassert solution.lastStoneWeightII([44, 45, 6, 17, 83, 94, 88, 46, 2, 73, 22, 21, 62, 74, 41, 76, 10, 42, 56, 52, 67, 26, 37]) == 0\nassert solution.lastStoneWeightII([40, 19, 53, 69, 94, 77, 97, 30, 20, 3, 91, 5, 15, 41, 85, 95, 17, 33, 82]) == 0\nassert solution.lastStoneWeightII([33, 68, 27, 65, 62, 55, 39, 56, 5, 98, 21]) == 1\nassert solution.lastStoneWeightII([28, 59, 41, 100, 48, 84, 70, 75, 11, 94]) == 0\nassert solution.lastStoneWeightII([63, 42, 59, 30, 84, 64, 99, 56, 7, 36, 71, 57, 27, 33, 89, 82, 19, 58, 1, 81, 13]) == 1\nassert solution.lastStoneWeightII([97, 78, 69, 32, 13, 25, 86, 88, 49, 76, 18, 79, 100, 23, 33]) == 0\nassert solution.lastStoneWeightII([60, 73, 71, 40, 54, 59, 99, 70, 28, 62, 38, 76, 90, 12, 10, 32, 84, 8, 65, 89, 36, 46, 4, 67, 25]) == 0\nassert solution.lastStoneWeightII([26, 68, 71, 7, 32, 74, 62, 20, 33, 25, 45, 19, 75, 85, 96, 64, 13]) == 1\nassert solution.lastStoneWeightII([70, 85, 51, 76, 64, 27]) == 3\nassert solution.lastStoneWeightII([24, 69, 57, 86, 30, 96, 83, 29, 81, 23, 8, 100, 7, 32, 63, 46, 89, 3, 36, 68, 12, 76, 37, 98, 38, 59, 42, 95]) == 1\nassert solution.lastStoneWeightII([80, 79, 52, 43, 51, 40, 20, 15, 67, 78, 45, 55, 17, 96, 34, 41, 36, 77, 58, 39, 12]) == 1\nassert solution.lastStoneWeightII([85, 54, 35, 68, 5, 89, 91, 43, 76, 55, 23, 59]) == 1\nassert solution.lastStoneWeightII([24]) == 24\nassert solution.lastStoneWeightII([18, 17, 63, 58, 6, 28, 60, 49, 61, 91, 45, 98, 87, 53, 1, 55, 100, 23]) == 1\nassert solution.lastStoneWeightII([3, 22, 97, 73, 52, 36, 89, 40, 81, 2, 18, 80, 98, 79, 47, 83, 86, 12, 7, 63, 58, 46]) == 0\nassert solution.lastStoneWeightII([91, 54, 28, 16, 63, 43, 19, 3, 35, 56, 8, 96, 22, 52, 61, 34, 59, 9]) == 1\nassert solution.lastStoneWeightII([52, 12, 53, 36, 99, 19, 32, 13, 14, 40, 4, 23, 69, 49, 84, 41, 16, 5]) == 1\nassert solution.lastStoneWeightII([78, 30, 6, 96, 40, 100, 68, 79, 63, 46, 65, 99, 80, 15, 81, 18, 54, 97, 94, 58]) == 1\nassert solution.lastStoneWeightII([38, 54, 59, 65, 31, 90, 83, 12, 51, 82, 41, 18, 78, 68, 96, 27, 87, 53, 100, 73, 57, 92]) == 1\nassert solution.lastStoneWeightII([34, 24]) == 10\nassert solution.lastStoneWeightII([33, 29, 2, 50]) == 10\nassert solution.lastStoneWeightII([50, 44, 16, 54]) == 24\nassert solution.lastStoneWeightII([94, 29, 90, 8, 13, 17, 49, 14, 32, 78, 26]) == 0\nassert solution.lastStoneWeightII([1, 33, 20, 88, 2, 64, 43, 78, 85, 11, 67, 7, 37, 8]) == 0\nassert solution.lastStoneWeightII([79, 14, 39, 97, 47, 13, 81, 82, 87, 68, 21, 28, 59, 45, 95, 65, 70, 52, 100, 71, 67, 72, 64, 11, 98]) == 1\nassert solution.lastStoneWeightII([69, 58, 98, 14, 65, 83, 3, 20, 95, 74, 75, 43, 39, 76, 24, 19, 23, 1]) == 1\nassert solution.lastStoneWeightII([72, 1, 12, 85]) == 0\nassert solution.lastStoneWeightII([55, 41, 59]) == 37\nassert solution.lastStoneWeightII([79, 59, 50, 83, 42, 2, 43, 87, 94, 34, 32, 5, 10, 24, 35, 95]) == 0\nassert solution.lastStoneWeightII([46, 97, 75, 7, 96, 12, 23, 47, 91, 100, 1, 73, 16, 53, 81, 33]) == 1\nassert solution.lastStoneWeightII([64, 24, 18, 72, 92, 6, 28, 26, 66, 48]) == 0\nassert solution.lastStoneWeightII([21, 60, 42, 82, 9, 28, 72, 26, 68, 8, 97, 92, 77, 73, 22, 2, 19, 41, 62, 49, 80, 44, 29, 64, 94, 39]) == 0\nassert solution.lastStoneWeightII([69, 70, 90, 75, 19, 7, 62, 53, 60, 85, 96, 63, 37, 26, 39]) == 1\nassert solution.lastStoneWeightII([79, 53, 38, 2, 39, 18, 78, 19, 15, 55, 3, 66, 84, 8, 72, 77, 76, 75, 50, 25, 94, 51, 30, 98, 48, 6, 40, 65]) == 0\nassert solution.lastStoneWeightII([54, 45, 33, 83, 91, 55, 18, 5, 100, 16, 31, 56, 7, 24, 78, 22, 13, 93, 50]) == 0\nassert solution.lastStoneWeightII([56, 79]) == 23\nassert solution.lastStoneWeightII([49, 14, 54, 44, 24, 76, 37, 36, 99, 61, 84, 69, 93, 46, 42]) == 0\nassert solution.lastStoneWeightII([100, 9, 78, 1, 29, 24, 81, 53, 73, 58, 63, 88, 18, 55]) == 0\nassert solution.lastStoneWeightII([44, 19, 18, 47, 83, 46, 31, 5]) == 1\nassert solution.lastStoneWeightII([13, 84, 98, 48, 81, 23, 19, 90, 16, 64, 27, 9, 26, 10, 4, 3, 7, 22]) == 0\nassert solution.lastStoneWeightII([88, 54, 30, 96, 95, 20, 39, 46, 91, 10, 2, 63, 7, 12, 40, 65, 42, 99, 78, 61, 11, 83]) == 0\nassert solution.lastStoneWeightII([79, 26, 57, 29, 100]) == 19\nassert solution.lastStoneWeightII([15, 54, 67, 49, 45, 98, 79, 66, 87, 11, 59, 68, 57, 26, 30, 56, 40, 71, 19, 43, 29, 99, 44, 75, 31]) == 0\nassert solution.lastStoneWeightII([73, 96, 4, 7, 76, 59]) == 3\nassert solution.lastStoneWeightII([63, 35, 28, 96, 19, 43, 74, 10, 99, 11, 98, 58, 73]) == 1\nassert solution.lastStoneWeightII([53, 44, 87, 48, 30, 92, 51, 32, 47, 40, 59, 3, 68, 57, 76, 54, 34, 72, 20, 81, 6, 23, 11, 33, 25, 79, 93, 16]) == 0\nassert solution.lastStoneWeightII([91, 87, 20, 100, 54, 56, 52, 18, 38, 84, 65, 93, 36, 69, 6, 72, 16, 75, 64, 89, 77, 37, 33, 47, 17, 43, 22, 59]) == 0\nassert solution.lastStoneWeightII([78, 90, 71, 84, 66, 65, 11, 74, 25]) == 2\nassert solution.lastStoneWeightII([16, 82, 43, 49, 77, 81, 17, 55, 24, 65, 19, 47, 12, 14, 44, 66, 20, 38, 58, 34, 39, 36, 42, 18, 1, 96, 73, 89, 100]) == 1\nassert solution.lastStoneWeightII([67, 81, 83, 51, 29, 49, 84, 16, 42, 92, 97, 65, 53, 32, 27, 91, 36, 86, 64, 58, 43, 15, 50, 18, 10, 96]) == 1\nassert solution.lastStoneWeightII([94, 49, 85, 95, 16, 73, 34, 46, 38, 52, 57, 72, 61, 54, 88, 42, 60, 84, 10, 25, 13, 37, 2, 74, 4]) == 1\nassert solution.lastStoneWeightII([47, 66, 31, 34, 15, 24, 42, 43, 7, 38, 86, 41, 55, 88, 77]) == 0\nassert solution.lastStoneWeightII([65, 48, 69, 35, 9, 87, 28, 62, 45, 11, 2, 42, 92, 31, 22, 61, 94, 83, 26, 23, 18, 59, 95, 50, 80, 96, 41, 15, 4]) == 1\nassert solution.lastStoneWeightII([60, 68, 9, 19, 37, 73, 69, 12, 58, 57, 32, 40, 20, 10, 22, 75, 34, 42, 54, 53, 70, 99, 85]) == 0\nassert solution.lastStoneWeightII([22, 5, 34, 93, 45, 1, 11, 66, 48, 20]) == 1\nassert solution.lastStoneWeightII([37, 8, 67, 12, 19, 94, 80, 79, 35, 14, 54, 13, 43]) == 1\nassert solution.lastStoneWeightII([99, 41, 94, 96, 36, 63, 82, 58, 27, 95]) == 1\nassert solution.lastStoneWeightII([73, 70, 19, 12, 66, 31, 20, 78, 57, 71, 100, 92, 50, 84, 41, 9, 82, 8, 25, 77]) == 1\nassert solution.lastStoneWeightII([92, 44, 47, 32, 56, 79, 77, 90, 12, 74, 30, 34, 29, 55, 51, 57, 72, 62, 53, 24, 60, 20, 82, 59, 69, 14, 6, 65]) == 1\nassert solution.lastStoneWeightII([66, 20, 76, 42, 72, 45, 89]) == 2\nassert solution.lastStoneWeightII([20, 99, 34, 13, 21, 10, 97, 83, 74, 55, 84, 6, 40, 70, 96, 36, 22, 8, 57, 52, 89, 54, 68, 15, 50]) == 1\nassert solution.lastStoneWeightII([26, 46, 13, 17, 56, 72, 25, 53, 30, 28, 92, 93, 67, 15, 91]) == 0\nassert solution.lastStoneWeightII([56, 57, 30, 63, 73, 86, 97, 68, 36, 99, 1, 29, 12, 96, 82, 34, 91, 60]) == 0\nassert solution.lastStoneWeightII([31, 99, 34, 5, 90, 44, 55, 18, 11, 8, 89, 61, 100, 83]) == 0\nassert solution.lastStoneWeightII([66, 73, 22, 34, 52, 76, 60, 40, 27, 30, 97]) == 1\nassert solution.lastStoneWeightII([89, 82, 43, 98, 50, 6, 45, 83, 40]) == 0\nassert solution.lastStoneWeightII([5, 3, 4, 70, 55, 66, 99, 54, 23, 27, 24, 16, 82, 77, 91, 42, 62]) == 0\nassert solution.lastStoneWeightII([84, 60, 97, 65, 45, 66, 5, 64, 74, 71, 19, 63, 46, 90, 31, 34, 50, 21, 89, 92, 95, 55, 33, 48, 86, 80, 98, 58]) == 1\nassert solution.lastStoneWeightII([10, 70, 63, 69, 57, 2, 23, 55, 5, 81]) == 1\nassert solution.lastStoneWeightII([19, 89, 16, 52, 75, 9, 59, 14]) == 1\nassert solution.lastStoneWeightII([78, 89, 16, 71, 59, 19, 91, 76, 70, 94, 92, 79, 46, 17]) == 1\nassert solution.lastStoneWeightII([90, 83, 89, 62, 61, 76, 87, 22, 19, 92, 7, 30, 95, 79, 66, 43, 78, 84, 10]) == 1\nassert solution.lastStoneWeightII([59, 55, 16, 65, 85, 36, 37, 50, 29, 28, 22, 66, 14, 62, 60, 54, 13, 63, 32, 79]) == 1\nassert solution.lastStoneWeightII([13, 51, 9, 78, 27, 76, 22, 92, 82, 4, 17, 80, 54, 58, 44, 52, 67, 6, 99, 57, 19, 16, 84, 77, 94, 31, 7, 49]) == 1",
  "inefficient_solution": "class Solution:\n    def lastStoneWeightII(self, stones):\n        s = sum(stones)\n        m = len(stones)\n        dp = [[0 for _ in range(s + 1)] for _ in range(m + 1)]\n        for i in range(m):\n            for j in range(s + 1):\n                if j >= stones[i]:\n                    dp[i + 1][j] = max(dp[i][j], dp[i][j - stones[i]] + stones[i])\n                else:\n                    dp[i + 1][j] = dp[i][j]\n        ans = [0] * (s + 1)\n        for i in range(s - 1, -1, -1):\n            for j in range(m + 1):\n                if i <= s - j:\n                    if dp[m][s] == dp[m][s - i]:\n                        ans[i] = 1\n        return min(ans)",
  "is_python": true
}