{
  "problem_idx": 1120,
  "task_name": "Maximum Average Subtree",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the maximum **average** value of a **subtree** of that tree*. Answers within `10-5` of the actual answer will be accepted.\n\n\nA **subtree** of a tree is any node of that tree plus all its descendants.\n\n\nThe **average** value of a tree is the sum of its values, divided by the number of nodes.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1100-1199/1120.Maximum%20Average%20Subtree/images/1308_example_1.png)\n\n```\n\n**Input:** root = [5,6,1]\n**Output:** 6.00000\n**Explanation:** \nFor the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.\nFor the node with value = 6 we have an average of 6 / 1 = 6.\nFor the node with value = 1 we have an average of 1 / 1 = 1.\nSo the answer is 6 which is the maximum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [0,null,1]\n**Output:** 1.00000\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 104]`.\n* `0 <= Node.val <= 105`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maximumAverageSubtree(self, root: Optional[TreeNode]) -> float:\n        def dfs(root):\n            if root is None:\n                return 0, 0\n            ls, ln = dfs(root.left)\n            rs, rn = dfs(root.right)\n            s = root.val + ls + rs\n            n = 1 + ln + rn\n            nonlocal ans\n            ans = max(ans, s / n)\n            return s, n\n\n        ans = 0\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def maximumAverageSubtree(self, root: Optional[TreeNode]) -> float:\n        def dfs(root):\n            if root is None:\n                return 0, 0\n            ls, ln = dfs(root.left)\n            rs, rn = dfs(root.right)\n            s = root.val + ls + rs\n            n = 1 + ln + rn\n            nonlocal ans\n            ans = max(ans, s / n)\n            return s, n\n\n        ans = 0\n        dfs(root)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate binary tree\n    def create_tree(node_count):\n        if node_count <= 0:\n            return None\n        root_val = random.randint(0, 100001)\n        root = TreeNode(val=root_val)\n        node_count -= 1\n        left_node_count = random.randint(0, node_count)\n        right_node_count = node_count - left_node_count\n        root.left = create_tree(left_node_count)\n        root.right = create_tree(right_node_count)\n        return root\n    \n    root = create_tree(random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumAverageSubtree(root)\n\n    return root, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumAverageSubtree(root) == expected_result\n        print(f\"assert solution.maximumAverageSubtree({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumAverageSubtree({root}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55010>) == 56789.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55190>) == 96225.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55090>) == 94970.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55290>) == 81796.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55110>) == 69574.5\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55290>) == 49469.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b550d0>) == 68819.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55290>) == 40525.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55110>) == 79669.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b550d0>) == 48984.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55450>) == 66708.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b54fd0>) == 53622.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55390>) == 67652.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55290>) == 59807.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55510>) == 83686.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b555d0>) == 73012.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55490>) == 69087.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55250>) == 48509.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55410>) == 393.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55110>) == 59707.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55150>) == 77516.5\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55690>) == 91078.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55790>) == 92716.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55990>) == 64550.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55890>) == 73880.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55950>) == 56829.6\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55b50>) == 52247.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b558d0>) == 75958.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55a90>) == 3752.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55d50>) == 78475.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55050>) == 39076.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55b10>) == 42748.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b554d0>) == 46123.333333333336\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55ad0>) == 91333.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55090>) == 75526.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55dd0>) == 82676.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55f90>) == 62224.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55e10>) == 83821.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55c10>) == 29447.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55e50>) == 62891.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55e90>) == 83913.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56190>) == 93113.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56110>) == 60125.333333333336\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b561d0>) == 71848.5\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56410>) == 59250.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56090>) == 65471.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56490>) == 53105.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b565d0>) == 96641.5\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b55ed0>) == 57035.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56690>) == 33851.5\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56510>) == 79411.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56450>) == 94204.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56650>) == 65345.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56350>) == 4418.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b567d0>) == 44018.375\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56990>) == 44408.8\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56890>) == 47015.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56a90>) == 28622.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b563d0>) == 68488.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56790>) == 65222.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56b10>) == 60600.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56710>) == 50733.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56a50>) == 47195.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b569d0>) == 90688.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56d50>) == 48508.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56f10>) == 30452.6\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56cd0>) == 96634.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56e10>) == 99886.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56d10>) == 69649.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57090>) == 74868.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56f90>) == 94937.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57010>) == 76849.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57110>) == 87125.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b564d0>) == 68995.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b570d0>) == 98406.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56b90>) == 90042.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56d10>) == 94947.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b568d0>) == 70100.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57110>) == 40819.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56b90>) == 89305.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57010>) == 86138.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b568d0>) == 90480.33333333333\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57250>) == 32645.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56fd0>) == 79523.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b571d0>) == 25299.5\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57210>) == 63712.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56d10>) == 99171.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b564d0>) == 71415.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57250>) == 66112.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b57010>) == 67069.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b568d0>) == 60036.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56c90>) == 58689.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b571d0>) == 19434.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56ed0>) == 29257.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b568d0>) == 70655.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56c90>) == 98641.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b572d0>) == 65314.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56ed0>) == 81200.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b56fd0>) == 54759.0\nassert solution.maximumAverageSubtree(<__main__.TreeNode object at 0x7f82d6b564d0>) == 87560.0",
  "inefficient_solution": "",
  "is_python": true
}