{
  "problem_idx": 875,
  "task_name": "Koko Eating Bananas",
  "markdown_description": "\nKoko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.\n\n\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\n\n\nReturn *the minimum integer* `k` *such that she can eat all the bananas within* `h` *hours*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** piles = [3,6,7,11], h = 8\n**Output:** 4\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** piles = [30,11,23,4,20], h = 5\n**Output:** 30\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** piles = [30,11,23,4,20], h = 6\n**Output:** 23\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= piles.length <= 104`\n* `piles.length <= h <= 109`\n* `1 <= piles[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        left, right = 1, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            s = sum((x + mid - 1) // mid for x in piles)\n            if s <= h:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def generate_test_case(self):\n        piles = random.choices(range(1, int(1e9)), k=random.randint(1, 10))\n        h = random.randint(len(piles), int(1e9))\n        expected_result = self.minEatingSpeed(piles, h)\n        return piles, h, expected_result\n\n    def test_generated_test_cases(self, num_tests):\n        test_case_generator_results = []\n        for _ in range(num_tests):\n            piles, h, expected_result = self.generate_test_case()\n            assert self.minEatingSpeed(piles, h) == expected_result\n            test_case_generator_results.append(f\"assert self.minEatingSpeed({piles}, {h}) == {expected_result}\")\n        return test_case_generator_results\n\n    def minEatingSpeed(self, piles, h):\n        left, right = 1, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            s = sum((x + mid - 1) // mid for x in piles)\n            if s <= h:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    solution = Solution()\n    test_case_generator_results = solution.test_generated_test_cases(num_tests)\n",
  "test_case": "assert self.minEatingSpeed([321393455, 450953012, 685645285], 444933862) == 4\nassert self.minEatingSpeed([400142978, 142676313, 96560860, 590722909], 262851904) == 5\nassert self.minEatingSpeed([713371606, 142770691, 960934840, 819195076, 266961447, 482463421], 757392093) == 5\nassert self.minEatingSpeed([464089396, 32262582, 128066894, 170401631, 516849639, 963240569], 803806418) == 3\nassert self.minEatingSpeed([593655362, 368790474, 878581640, 459798133, 131865932, 355212487], 210441638) == 14\nassert self.minEatingSpeed([818612837, 859775647, 178051859, 436330519], 500186630) == 5\nassert self.minEatingSpeed([739825488, 753290474, 831021214, 40092097, 399611277, 459127067, 266769484, 71032933, 132798783], 216133576) == 18\nassert self.minEatingSpeed([529349680, 406305425, 611583517, 665124104, 570404309, 967075690, 632583184], 188528934) == 24\nassert self.minEatingSpeed([937211972, 668337260, 358344421, 839496968, 238994841, 438595480, 907597935, 243403987], 322727372) == 15\nassert self.minEatingSpeed([375148753, 946413431, 258663405, 144863816], 348605732) == 5\nassert self.minEatingSpeed([836046929, 468559546, 638671484, 761427968, 381176526, 264292420, 574915050, 177640669, 101167666, 237244530], 165237429) == 27\nassert self.minEatingSpeed([732702208, 336926806, 797923690, 912474788, 93353871, 596213342, 105905049, 645837423, 289971551, 663457690], 871523839) == 6\nassert self.minEatingSpeed([992091379, 865934413, 539259493, 69666572, 548110314, 612103522, 857223396], 264773674) == 17\nassert self.minEatingSpeed([294089828, 758932029], 296442275) == 4\nassert self.minEatingSpeed([575822682, 879704340, 450625860, 855639530, 208115747, 659461, 780329268, 724030030, 26169705, 451591812], 653061883) == 8\nassert self.minEatingSpeed([354492121], 586220376) == 1\nassert self.minEatingSpeed([363096507, 611265349], 888126938) == 2\nassert self.minEatingSpeed([128548808, 449580801, 158271042, 470317893, 491354095], 93420481) == 19\nassert self.minEatingSpeed([486989347, 329895025, 788801718, 439553299, 312801010, 78485896, 195493887], 524197713) == 6\nassert self.minEatingSpeed([82357374, 160184637, 707098027, 422312819, 382249625], 50300838) == 35\nassert self.minEatingSpeed([550251534, 35088487, 330452331, 636840553], 2226030) == 698\nassert self.minEatingSpeed([947354470], 618898214) == 2\nassert self.minEatingSpeed([546006319, 314396946, 222104559], 333422615) == 4\nassert self.minEatingSpeed([741850610, 502368692, 2270063, 712297550], 856566617) == 3\nassert self.minEatingSpeed([797166639, 223193317, 812219872, 215346055, 897808119], 714866689) == 5\nassert self.minEatingSpeed([958326670, 406578947], 433263702) == 4\nassert self.minEatingSpeed([327329515, 761055651, 882459108, 336643499, 203190561, 526223335], 252498594) == 13\nassert self.minEatingSpeed([18350222, 546156406, 245283750, 419466268], 182316935) == 7\nassert self.minEatingSpeed([688123389, 661464626, 717663649], 906665858) == 3\nassert self.minEatingSpeed([776174082, 118879573, 789362319, 928657815, 362245025, 121882692, 462539175], 711665280) == 6\nassert self.minEatingSpeed([445593360, 53398366, 423729267, 363561114, 379036601, 963299331, 781838039, 876046394, 88497088, 39808311], 714831863) == 7\nassert self.minEatingSpeed([905382321, 935879615, 384036400, 333699069, 40245284, 162446143, 332536618, 328717439], 787501191) == 5\nassert self.minEatingSpeed([324710244, 739353897, 282550282, 495272255, 14332901, 121520513], 665470216) == 3\nassert self.minEatingSpeed([747736952, 250971018, 928485524], 932064886) == 3\nassert self.minEatingSpeed([958748537, 945149385, 316633191, 811013676, 186984556, 716583775, 184935271], 54672755) == 76\nassert self.minEatingSpeed([715604704], 180723837) == 4\nassert self.minEatingSpeed([886605247, 371271663, 855487232, 512001340, 479470445, 482084606, 503303598, 961887728, 632470295], 428060347) == 14\nassert self.minEatingSpeed([445670999, 954293320, 292204619, 134748454, 14565679, 969407825, 743628859, 189101670, 953147085, 715799705], 536348435) == 11\nassert self.minEatingSpeed([722762233, 229380448, 29664322, 732998363, 128325297], 120381405) == 16\nassert self.minEatingSpeed([947524924, 423970514, 38766931, 36681441, 557382277, 597641776, 16688662, 400995197, 501474612], 946481093) == 4\nassert self.minEatingSpeed([318152445, 790433294, 85679177, 545471183, 749190659], 667296573) == 4\nassert self.minEatingSpeed([503654441, 627250274, 104775890, 998566046, 314312303, 270400548], 832306910) == 4\nassert self.minEatingSpeed([101509019, 476761036], 83167214) == 7\nassert self.minEatingSpeed([43584558, 509304519, 973695351, 428421022, 901197279, 68138886, 308242886, 599363590, 916399638], 539078814) == 9\nassert self.minEatingSpeed([877549609, 227067178, 88871356, 338613784, 33929962, 976808286, 309197040, 685652847], 172720109) == 21\nassert self.minEatingSpeed([529339027, 236971190, 258065544, 313850483, 15652830, 764593043, 881246922, 653978681, 435367423, 909382082], 660842699) == 8\nassert self.minEatingSpeed([383894946, 310080093, 814919796, 271121612, 802040832, 850224887, 863778038, 932326892], 319826153) == 17\nassert self.minEatingSpeed([902036478, 800026500, 286693032], 791025257) == 3\nassert self.minEatingSpeed([832290525], 551358224) == 2\nassert self.minEatingSpeed([21441472, 900061795], 773130734) == 2\nassert self.minEatingSpeed([41733132, 696878350, 999917985, 163839138, 772615240, 869266658], 378974163) == 10\nassert self.minEatingSpeed([23955535, 90643164], 222483731) == 1\nassert self.minEatingSpeed([439235550, 446570410, 776204059, 618349576, 218579895, 831047123, 975254314, 719547159], 733574174) == 7\nassert self.minEatingSpeed([576157786, 584342115, 849117320, 950941003, 236642596, 937209218], 116860089) == 36\nassert self.minEatingSpeed([950080264], 664912144) == 2\nassert self.minEatingSpeed([623791964, 386717145, 278738038, 713216024, 769695557, 148143434], 534219124) == 6\nassert self.minEatingSpeed([74501983, 890793242], 403114936) == 3\nassert self.minEatingSpeed([529247178, 474472151, 281147962, 871643381, 795928688, 963059714, 976963001, 910653645, 623833182], 296230529) == 22\nassert self.minEatingSpeed([929967698, 109368426, 704829691, 914681996, 458045120, 762407528], 778453980) == 5\nassert self.minEatingSpeed([965755341, 359722939, 421257946, 798749908, 296777406], 982747746) == 3\nassert self.minEatingSpeed([426473224, 1970554, 58286925], 166842626) == 3\nassert self.minEatingSpeed([10935365, 937093935, 287451991, 604937495], 223107653) == 9\nassert self.minEatingSpeed([111093369, 595260102, 727883239, 85529426, 714334839, 159247370, 862461663, 532419569], 88238681) == 43\nassert self.minEatingSpeed([177000660, 15373126, 866630757, 593112743, 452874900], 81519103) == 26\nassert self.minEatingSpeed([353746254, 143304954, 829032448, 899701998, 582650836, 247737875, 527209122, 687268234, 336858363, 917309930], 513490532) == 11\nassert self.minEatingSpeed([935611697, 55636030, 798263719, 551969912, 134617721], 574451756) == 5\nassert self.minEatingSpeed([880034923, 496485294, 277380303, 560706667, 573003080, 883630157], 399354260) == 10\nassert self.minEatingSpeed([429350999, 526795084, 909942698, 886525238, 112963217, 631165578, 195040845], 1394113) == 2649\nassert self.minEatingSpeed([699410630, 49259320, 494137269, 209509498, 175106984, 708189578, 793323501, 683000564, 963504898, 224989709], 593925897) == 9\nassert self.minEatingSpeed([38736515, 879197262, 441045043, 91705580, 26703104, 738654534], 792549313) == 3\nassert self.minEatingSpeed([21896134, 589270044, 710619280, 626876380, 615545102, 123940976, 538339362, 220223413, 60095645], 843197919) == 5\nassert self.minEatingSpeed([961458275, 568938761, 74954985, 297635481], 408938353) == 5\nassert self.minEatingSpeed([369137703, 379594401, 856933841, 543688460, 894855672, 620012149], 281671343) == 14\nassert self.minEatingSpeed([383310415, 981325608, 803588948], 127815772) == 17\nassert self.minEatingSpeed([509603739, 177853202, 494282836, 208700997, 365251363, 56188480, 33288722, 428143520, 482863331], 392980194) == 8\nassert self.minEatingSpeed([343048563, 857544054, 920548695, 191561417, 24250058, 158781986, 791600763], 387947785) == 9\nassert self.minEatingSpeed([152921915, 106502728, 470946599, 241209334, 93824021, 963077451, 134842731], 48515195) == 45\nassert self.minEatingSpeed([952484896, 154312184], 249943933) == 5\nassert self.minEatingSpeed([891402548, 966607185, 967401889, 85127265, 17772610, 43244483, 148329588, 950935865], 172738113) == 24\nassert self.minEatingSpeed([561336645, 800515334, 332254112], 51111865) == 34\nassert self.minEatingSpeed([249935302, 582737249, 659712445, 555561597, 589052503, 137129997, 611460763, 39702079, 699455633, 882465184], 642737948) == 8\nassert self.minEatingSpeed([517934337, 776663204, 755172890, 442089119, 802562160], 309054962) == 11\nassert self.minEatingSpeed([104253966, 148868212, 616560851, 709134193, 281728237, 514957584], 369824645) == 7\nassert self.minEatingSpeed([864975124], 529354655) == 2\nassert self.minEatingSpeed([772201544, 141293800, 310864526, 519136432, 590098678, 182177920, 370233662, 916319474, 590354884], 989280885) == 5\nassert self.minEatingSpeed([211119506, 529167894, 620208090], 858015041) == 2\nassert self.minEatingSpeed([450896036, 584159477, 506021571, 349736473, 329253813, 297649374, 347650283, 389917633, 247785492, 190394569], 603961021) == 7\nassert self.minEatingSpeed([171834285, 206354738, 904032330, 596005684, 751418758, 515525485, 515972995, 618851972, 238288782, 181795107], 341111070) == 14\nassert self.minEatingSpeed([132089365, 303660573, 731750297, 365910029, 326178378, 562509578], 932346076) == 3\nassert self.minEatingSpeed([249871647, 397172356, 120655872, 713284914, 462069808, 339517661, 933809416, 577890620, 15727525, 414972740], 104584658) == 41\nassert self.minEatingSpeed([44640621, 549846813, 101165966, 153817579], 179799915) == 5\nassert self.minEatingSpeed([597772832, 381788937, 896729877, 914416379, 117439875, 132320613, 330684220, 12406947, 204322193], 431793955) == 9\nassert self.minEatingSpeed([280688596, 884554939, 952507687, 841193805, 326757439, 604409132, 159744488], 453341811) == 9\nassert self.minEatingSpeed([807289527, 310689619, 710637974, 63524699, 597301226], 967125526) == 3\nassert self.minEatingSpeed([392524961, 52755494], 962224756) == 1\nassert self.minEatingSpeed([688422726, 394849890, 993765372, 12496348, 767043908, 499477679, 797612741, 253360735, 193262200, 531198636], 775843359) == 7\nassert self.minEatingSpeed([826319235, 312162739, 117177714, 868240317, 233170858, 869375833, 805450587], 315369817) == 13\nassert self.minEatingSpeed([124155943, 531015572], 84276848) == 8\nassert self.minEatingSpeed([793477716], 915159784) == 1\nassert self.minEatingSpeed([820050777, 88954326, 428964552, 199493616, 48058319, 971854923, 606219405], 112530330) == 29",
  "inefficient_solution": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def check(k):\n            res = 0\n            for pile in piles:\n                x = pile\n                while x > 0:\n                    res += 1\n                    x -= k\n                x = pile\n                while x >= k:\n                    res += 1\n                    x -= k\n                res += 1\n            return res <= h\n\n        left, right = 1, 10**9\n        while True:\n            mid = (left + right) // 2\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n            if left == right:\n                return left\n            if left > 10**6:\n                left = 1\n                right = 10**9",
  "is_python": true
}