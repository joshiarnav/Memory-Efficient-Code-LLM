{
  "problem_idx": 2542,
  "task_name": "Maximum Subsequence Score",
  "markdown_description": "\nYou are given two **0-indexed** integer arrays `nums1` and `nums2` of equal length `n` and a positive integer `k`. You must choose a **subsequence** of indices from `nums1` of length `k`.\n\n\nFor chosen indices `i0`, `i1`, ..., `ik - 1`, your **score** is defined as:\n\n\n* The sum of the selected elements from `nums1` multiplied with the **minimum** of the selected elements from `nums2`.\n* It can defined simply as: `(nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1])`.\n\n\nReturn *the **maximum** possible score.*\n\n\nA **subsequence** of indices of an array is a set that can be derived from the set `{0, 1, ..., n-1}` by deleting some or no elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3\n**Output:** 12\n**Explanation:** \nThe four possible subsequence scores are:\n- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.\n- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. \n- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. \n- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.\nTherefore, we return the max score, which is 12.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1\n**Output:** 30\n**Explanation:** \nChoosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `0 <= nums1[i], nums2[j] <= 105`\n* `1 <= k <= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        nums = sorted(zip(nums2, nums1), reverse=True)\n        q = []\n        ans = s = 0\n        for a, b in nums:\n            s += b\n            heappush(q, b)\n            if len(q) == k:\n                ans = max(ans, s * a)\n                s -= heappop(q)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        nums = sorted(zip(nums2, nums1), reverse=True)\n        q = []\n        ans = s = 0\n        for a, b in nums:\n            s += b\n            heappush(q, b)\n            if len(q) == k:\n                ans = max(ans, s * a)\n                s -= heappop(q)\n        return ans\n    \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers lists\n    nums1 = random.sample(range(1, 101), random.randint(2, 10))\n    nums2 = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k\n    k = random.randint(1, len(nums1))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxScore(nums1, nums2, k)\n\n    return nums1, nums2, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxScore(nums1, nums2, k) == expected_result\n        print(f\"assert solution.maxScore({nums1}, {nums2}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxScore({nums1}, {nums2}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxScore([13, 25], [99, 82, 8], 1) == 2050\nassert solution.maxScore([85, 22, 25], [57, 9, 80, 3, 76, 91, 13, 45], 2) == 6270\nassert solution.maxScore([30, 82, 92, 68, 13], [34, 50, 17, 99, 25], 4) == 4825\nassert solution.maxScore([92, 61], [19, 86, 18, 60], 1) == 5246\nassert solution.maxScore([69, 4, 28, 87, 20], [86, 7, 20, 69], 4) == 1316\nassert solution.maxScore([73, 49, 26, 42, 98, 39, 71], [22, 64, 99, 55], 5) == 0\nassert solution.maxScore([28, 10, 68, 6, 59], [50, 1], 5) == 0\nassert solution.maxScore([32, 72, 68, 88, 79, 93, 34, 100, 41, 86], [57, 84, 46, 55, 60, 4, 10, 38], 6) == 16682\nassert solution.maxScore([91, 34, 61, 93, 51, 89, 2, 11], [64, 9, 90, 73, 34], 4) == 10064\nassert solution.maxScore([88, 64, 28, 89, 53, 84, 1, 57, 72], [8, 99, 17, 56, 4, 63, 46, 76, 74, 24], 6) == 16882\nassert solution.maxScore([46, 58, 79, 34, 40, 41], [37, 50, 93, 82, 86], 3) == 12546\nassert solution.maxScore([72, 35, 16, 71, 38, 52, 9], [62, 70, 32, 3, 28, 56], 2) == 6944\nassert solution.maxScore([65, 79, 17, 25, 87, 50], [51, 46, 24, 41], 6) == 0\nassert solution.maxScore([42, 50, 49, 22, 23, 17], [68, 16, 5, 85, 64, 63], 2) == 4352\nassert solution.maxScore([48, 92, 12, 76, 55, 77, 5, 15, 50, 86], [66, 95, 8, 26, 46, 69, 22], 3) == 14322\nassert solution.maxScore([78, 92, 21, 3], [69, 60, 27, 74, 38, 48], 4) == 5238\nassert solution.maxScore([81, 74], [9, 21, 72, 25, 36, 87], 2) == 1395\nassert solution.maxScore([62, 94, 3, 35], [68, 55, 76, 18, 15, 82, 71, 47], 4) == 3492\nassert solution.maxScore([51, 89, 91, 12, 92, 13, 21, 2], [81, 10, 32, 68, 27, 91, 39, 43, 38], 3) == 6318\nassert solution.maxScore([32, 4, 18, 76, 84, 55, 15], [47, 36, 6], 5) == 0\nassert solution.maxScore([3, 73, 14], [18, 7, 100], 1) == 1400\nassert solution.maxScore([45, 36, 31, 96], [87, 14, 56, 39, 74, 7, 37, 2, 67], 4) == 2912\nassert solution.maxScore([23, 88, 94, 27, 77], [66, 22, 92, 29, 1, 67, 61], 5) == 309\nassert solution.maxScore([76, 67, 100], [56, 40, 6, 8, 76, 36, 11, 34, 96], 1) == 4256\nassert solution.maxScore([60, 18, 72, 4, 31], [44, 91, 16, 92, 75], 4) == 4972\nassert solution.maxScore([21, 67, 33, 40, 27, 61, 29, 86], [1, 32, 7, 53], 5) == 0\nassert solution.maxScore([16, 37, 71, 49, 42], [77, 40, 12, 88, 28], 5) == 2580\nassert solution.maxScore([86, 49, 14, 68, 6, 92, 96, 89, 8, 81], [89, 11, 78, 88], 1) == 7654\nassert solution.maxScore([54, 42, 55, 33], [57, 56, 3, 39, 13, 8, 36, 63, 78, 98], 2) == 5376\nassert solution.maxScore([6, 45, 24], [21, 27, 10], 2) == 1071\nassert solution.maxScore([97, 19, 6, 86, 46, 60, 34], [16, 13, 54], 3) == 1586\nassert solution.maxScore([76, 56, 68, 35, 65, 95, 23, 33], [30, 94], 2) == 3960\nassert solution.maxScore([4, 59, 1, 72, 12, 61, 7, 68, 65, 24], [99, 5, 1, 80, 37, 61, 26], 8) == 0\nassert solution.maxScore([44, 23, 69, 21, 97, 32], [80, 17, 46, 60], 6) == 0\nassert solution.maxScore([94, 1, 70, 23], [74, 89, 37, 11, 90, 100, 69, 25, 10, 6], 1) == 6956\nassert solution.maxScore([71, 76, 24, 49, 87, 95, 74], [73, 59, 43, 88, 50], 2) == 8760\nassert solution.maxScore([64, 89, 9, 82, 86, 13, 24, 71, 3], [11, 21, 20, 100, 87, 64, 65, 77, 70, 60], 6) == 17856\nassert solution.maxScore([77, 58, 1, 51, 42, 16, 41, 59, 79, 62], [64, 7], 6) == 0\nassert solution.maxScore([43, 99, 68, 50, 60, 10, 79, 28], [70, 29, 59, 49, 48, 6], 4) == 10608\nassert solution.maxScore([31, 51, 35, 80, 20, 22, 86, 26, 36, 52], [94, 66, 81], 9) == 0\nassert solution.maxScore([87, 76, 97, 81, 90, 89, 33, 43], [92, 31], 7) == 0\nassert solution.maxScore([50, 67, 74, 71, 20, 96, 86, 92, 3], [93, 35], 8) == 0\nassert solution.maxScore([52, 64, 8, 7], [79, 15, 49, 8, 36, 33, 93, 89], 3) == 1860\nassert solution.maxScore([34, 45, 93, 25, 88, 99, 67, 1, 42, 40], [60, 87, 79, 45, 24, 88, 5, 11, 49, 41], 4) == 16260\nassert solution.maxScore([75, 7, 65, 94, 18, 36, 100], [85, 63, 79, 92], 7) == 0\nassert solution.maxScore([43, 100], [79, 17, 37], 2) == 2431\nassert solution.maxScore([30, 81, 80, 84], [80, 42, 7, 8, 86, 61, 28], 3) == 1715\nassert solution.maxScore([17, 39, 76], [76, 16, 12, 5, 11, 85, 80, 97], 1) == 1292\nassert solution.maxScore([78, 25, 17, 48, 85, 45, 37, 75], [8, 62], 1) == 1550\nassert solution.maxScore([57, 44, 90, 29, 5, 32, 61, 79, 68], [57, 14], 7) == 0\nassert solution.maxScore([54, 28], [36, 13, 12, 69, 89], 1) == 1944\nassert solution.maxScore([98, 66, 85, 28, 61, 65, 19, 54, 77], [4, 21], 7) == 0\nassert solution.maxScore([95, 96], [59, 40, 66, 28, 36, 90, 89, 8, 74], 2) == 7640\nassert solution.maxScore([10, 53], [34, 98], 1) == 5194\nassert solution.maxScore([58, 48], [59, 43, 10, 57, 96, 23, 22, 54, 52, 32], 2) == 4558\nassert solution.maxScore([59, 24, 25, 11], [34, 20, 48, 4, 85, 62, 1, 37], 3) == 2160\nassert solution.maxScore([23, 80, 22, 42, 19, 57, 99, 15, 86, 30], [32, 50, 60, 6, 81, 14, 45, 35, 30], 1) == 4455\nassert solution.maxScore([22, 13], [56, 24, 21, 84, 54, 22], 1) == 1232\nassert solution.maxScore([23, 38, 53, 30, 5, 52, 71, 85], [83, 54, 42, 40], 6) == 0\nassert solution.maxScore([43, 83], [77, 91, 54, 33, 49, 9, 83, 79, 22, 2], 2) == 9702\nassert solution.maxScore([89, 73], [42, 96, 24, 65, 13], 1) == 7008\nassert solution.maxScore([61, 40], [75, 95, 84, 59], 2) == 7575\nassert solution.maxScore([62, 77, 11, 18, 64, 66, 33], [85, 38, 2, 87], 6) == 0\nassert solution.maxScore([81, 48, 14, 1, 75], [73, 83, 42, 14, 98, 80], 1) == 7350\nassert solution.maxScore([45, 5, 58, 98, 68, 50], [84, 2, 80, 18], 6) == 0\nassert solution.maxScore([49, 55, 67, 78, 87], [98, 57, 59, 61, 72, 83], 3) == 13688\nassert solution.maxScore([68, 83, 80], [16, 3, 96, 63, 25, 12, 2], 2) == 2368\nassert solution.maxScore([74, 23, 3, 88], [93, 90], 4) == 0\nassert solution.maxScore([88, 15, 10, 97, 29], [48, 32, 98, 16, 75, 29, 47, 20, 39, 50], 3) == 6096\nassert solution.maxScore([28, 52, 48, 63, 13, 57, 98, 6, 53], [32, 47, 25, 90, 89, 20, 36, 81, 98, 92], 5) == 10044\nassert solution.maxScore([63, 93, 16, 66, 22, 45], [29, 44, 46, 86, 85, 38, 90, 24, 60, 69], 6) == 8845\nassert solution.maxScore([14, 61, 32, 67, 95, 62, 85], [59, 93, 65, 81, 20, 47, 87, 94, 6], 5) == 15281\nassert solution.maxScore([45, 55, 17, 6, 38, 64, 90, 57], [33, 42, 28, 98, 56, 12], 1) == 2310\nassert solution.maxScore([13, 47, 83, 2, 62, 64, 74, 21], [48, 94, 6, 95, 62, 52], 3) == 8996\nassert solution.maxScore([22, 26], [24, 86, 1, 18, 43, 29, 93, 68, 7, 76], 2) == 1152\nassert solution.maxScore([97, 16, 11, 22, 42, 86, 5, 75, 88], [99, 85, 77, 68, 29], 9) == 0\nassert solution.maxScore([88, 59, 85, 61, 92, 82, 35, 55, 58], [1, 31, 83, 55, 19], 9) == 0\nassert solution.maxScore([74, 91, 71, 53, 51, 27, 43], [87, 85, 18, 80, 21, 54, 28, 8], 4) == 13230\nassert solution.maxScore([53, 35, 84, 60, 49, 34], [13, 59, 27, 80, 92, 93, 77, 36, 64, 78], 4) == 10502\nassert solution.maxScore([70, 24, 26], [41, 11, 16, 6, 2, 25, 46, 90], 2) == 1536\nassert solution.maxScore([1, 13, 11, 84, 29, 58], [10, 26, 56, 50, 49, 64], 5) == 5070\nassert solution.maxScore([56, 10], [25, 49, 39, 22, 59, 61, 64], 2) == 1650\nassert solution.maxScore([27, 34, 91], [32, 37, 51, 84, 15], 2) == 4625\nassert solution.maxScore([51, 14, 80, 22, 57, 61], [32, 90, 57, 4, 63, 66, 76, 13, 78], 2) == 8037\nassert solution.maxScore([82, 65, 53, 96, 37, 75], [30, 7, 33, 6, 80], 3) == 5160\nassert solution.maxScore([61, 62, 26, 94, 14], [70, 45, 77, 52, 22, 42, 9, 81], 2) == 8060\nassert solution.maxScore([11, 60, 93, 72, 18, 25, 41], [80, 14, 57, 20, 21, 82, 100, 65, 5, 4], 7) == 4480\nassert solution.maxScore([78, 74, 66, 7, 54, 64, 10], [70, 60, 85, 28, 73, 41, 46], 7) == 9884\nassert solution.maxScore([14, 43, 66, 79], [69, 35, 73, 53, 44, 31, 12, 80, 14, 60], 4) == 7070\nassert solution.maxScore([94, 26, 80], [65, 9, 11, 66, 75, 3], 2) == 1914\nassert solution.maxScore([28, 71, 70, 51, 65, 47, 21, 58, 67], [82, 24], 6) == 0\nassert solution.maxScore([15, 70, 82, 12, 96, 59, 98, 75], [1, 8, 54, 67, 22, 94, 41, 68, 55], 1) == 5546\nassert solution.maxScore([68, 26], [24, 49, 64, 45, 98, 41, 65], 1) == 1632\nassert solution.maxScore([96, 57, 26, 20], [9, 85, 55, 86, 79, 74], 2) == 6545\nassert solution.maxScore([98, 41, 63, 96], [7, 23, 34, 69, 99, 42, 10], 2) == 5406\nassert solution.maxScore([16, 74], [27, 14, 69, 2], 2) == 1260\nassert solution.maxScore([92, 20], [65, 42, 3, 58], 1) == 5980\nassert solution.maxScore([21, 62, 32, 66, 29, 90], [9, 38, 51, 48, 47, 12, 95, 33, 91], 2) == 4864\nassert solution.maxScore([27, 100, 55, 16, 25, 28, 91, 92, 26], [55, 67, 74, 53, 29, 48, 81, 62, 99, 58], 7) == 21571\nassert solution.maxScore([71, 81, 85, 92, 74, 51, 42, 31, 95, 32], [98, 66, 63, 78, 94, 35], 8) == 0",
  "inefficient_solution": "class Solution:\n    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:\n        n = len(nums1)\n        min_nums2 = [min(nums2[i-k+1:i+1]) for i in range(n)]\n        max_score = 0\n        for i in range(n):\n            for j in range(i, n):\n                subsequence = nums1[i:j+1]\n                score = sum(subsequence) * min_nums2[i]\n                max_score = max(max_score, score)\n        return max_score",
  "is_python": true
}