{
  "problem_idx": 2616,
  "task_name": "Minimize the Maximum Difference of Pairs",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `p`. Find `p` pairs of indices of `nums` such that the **maximum** difference amongst all the pairs is **minimized**. Also, ensure no index appears more than once amongst the `p` pairs.\n\n\nNote that for a pair of elements at the index `i` and `j`, the difference of this pair is `|nums[i] - nums[j]|`, where `|x|` represents the **absolute** **value** of `x`.\n\n\nReturn *the **minimum** **maximum** difference among all* `p` *pairs.* We define the maximum of an empty set to be zero.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,1,2,7,1,3], p = 2\n**Output:** 1\n**Explanation:** The first pair is formed from the indices 1 and 4, and the second pair is formed from the indices 2 and 5. \nThe maximum difference is max(|nums[1] - nums[4]|, |nums[2] - nums[5]|) = max(0, 1) = 1. Therefore, we return 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,2,1,2], p = 1\n**Output:** 0\n**Explanation:** Let the indices 1 and 3 form a pair. The difference of that pair is |2 - 2| = 0, which is the minimum we can attain.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 109`\n* `0 <= p <= (nums.length)/2`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimizeMax(self, nums: List[int], p: int) -> int:\n        def check(diff: int) -> bool:\n            cnt = i = 0\n            while i < len(nums) - 1:\n                if nums[i + 1] - nums[i] <= diff:\n                    cnt += 1\n                    i += 2\n                else:\n                    i += 1\n            return cnt >= p\n\n        nums.sort()\n        return bisect_left(range(nums[-1] - nums[0] + 1), True, key=check)\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 100001), random.randint(2, 20))\n\n    # Generate a random value for p\n    p = random.randint(0, len(nums)//2)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimizeMax(nums, p)\n\n    return nums, p, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, p, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimizeMax(nums, p) == expected_result\n        print(f\"assert solution.minimizeMax({nums}, {p}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimizeMax({nums}, {p}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimizeMax([11288, 17411, 22868, 40908, 47715, 57995, 65546, 94768], 2) == 6807\nassert solution.minimizeMax([6509, 7817, 9992, 17636, 23235, 24595, 25449, 32023, 37172, 40938, 43665, 55438, 60517, 64450, 75302, 97474], 1) == 854\nassert solution.minimizeMax([7013, 12360, 34111, 53269, 79897, 97421], 3) == 19158\nassert solution.minimizeMax([7792, 18649, 22566, 23121, 23225, 27380, 32894, 41106, 52501, 59027, 61122, 67852, 69404, 70080, 71003, 75872, 76132, 80733, 82318, 96983], 3) == 676\nassert solution.minimizeMax([3382, 5622, 19683, 33870, 39027, 43347, 47503, 47848, 47947, 58829, 60988, 61728, 67647, 73779, 87805, 87911], 3) == 740\nassert solution.minimizeMax([185, 4624, 11904, 17255, 18089, 23526, 27400, 38625, 43990, 44769, 60763, 64256, 65432, 68522, 81371, 95193], 4) == 3493\nassert solution.minimizeMax([687, 4429, 4761, 11232, 19845, 24618, 35952, 36689, 42779, 43553, 44294, 48262, 65381, 72961, 75542, 80989, 82607, 95604], 3) == 741\nassert solution.minimizeMax([17988, 28815, 48951], 1) == 10827\nassert solution.minimizeMax([9368, 10479, 17445, 19434, 19459, 33415, 53369, 57765, 74226, 96472], 5) == 22246\nassert solution.minimizeMax([21141, 24444, 24864, 36886, 42261, 45516, 49325, 57219, 62489, 64246, 66038, 91220, 93142, 93265, 94342, 96427], 4) == 1922\nassert solution.minimizeMax([6239, 14410, 15650, 16589, 17077, 18708, 39373, 40651, 56047, 78346, 80985], 3) == 1278\nassert solution.minimizeMax([3284, 6251, 10463, 22931, 32886, 41297, 57813, 63829, 66934, 70212, 78674, 89229], 4) == 8411\nassert solution.minimizeMax([5583, 6154, 34842, 34978, 40436, 41250, 42558, 46560, 64379, 66982, 86488], 2) == 571\nassert solution.minimizeMax([3858, 8970, 9579, 14793, 23245, 25225, 38305, 42124, 46324, 58805, 59082, 68999, 73422, 81707, 83623, 84913, 88305, 93266, 95640, 98958], 7) == 3819\nassert solution.minimizeMax([4524, 7907, 9760, 9997, 22196, 30896, 31168, 32153, 33360, 34158, 42800, 44079, 60724, 64645, 65865, 66088, 71727, 81396, 85986], 4) == 798\nassert solution.minimizeMax([17567, 34446, 37029, 41272, 43020, 46396, 47905, 74989, 95349, 97076, 99168], 3) == 1748\nassert solution.minimizeMax([6726, 7344, 7849, 10569, 11227, 17031, 18674, 32888, 37326, 46076, 49968, 53180, 77033, 80438, 82777, 88521, 88916, 95706], 9) == 14214\nassert solution.minimizeMax([14584, 27916, 43083, 43586, 44277, 47765, 49822, 51708, 51836, 54791, 57553, 60142, 61713, 64998, 78925, 91388, 91564, 98482, 99694], 8) == 3488\nassert solution.minimizeMax([2198, 7567, 18699, 27936, 30761, 30862, 31882, 32661, 48384, 49152, 50022, 51627, 54194, 54238, 61616, 74669, 77393, 97692, 99325], 9) == 9237\nassert solution.minimizeMax([6556, 14060, 64277], 1) == 7504\nassert solution.minimizeMax([7920, 18654, 19353, 21956, 26636, 57144, 59116, 64996, 71398], 0) == 0\nassert solution.minimizeMax([4239, 10352, 24012, 29398, 33093, 36328, 42625, 48072, 58437, 65056, 68179, 69317], 3) == 5386\nassert solution.minimizeMax([30796, 46180, 52619, 73007], 0) == 0\nassert solution.minimizeMax([20369, 27147, 47664], 0) == 0\nassert solution.minimizeMax([2477, 8342, 15926, 17021, 27606, 41155, 43652, 45444, 58671, 69294, 79654, 92377], 6) == 13549\nassert solution.minimizeMax([5766, 13237, 41569, 43206, 44789, 52400, 63832, 78934, 92614, 97069], 3) == 7471\nassert solution.minimizeMax([7120, 16497, 24537, 30476, 32572, 33411, 35239, 72117, 79885, 83261, 86782, 92183], 5) == 8040\nassert solution.minimizeMax([29611, 32664, 44799, 64388, 89414], 0) == 0\nassert solution.minimizeMax([2749, 7163, 20887, 24370, 25615, 28071, 31618, 52669, 57538, 60982, 62133, 63520, 77395, 77973, 78291, 81142, 91093], 4) == 2851\nassert solution.minimizeMax([19910, 27835, 31598, 32151, 38084, 44768, 46758, 60330, 67864, 68398, 79827, 80312, 80819, 81130, 92729, 99140], 7) == 6411\nassert solution.minimizeMax([4194, 25948, 37135], 1) == 11187\nassert solution.minimizeMax([4420, 18430, 75679, 79605, 86908, 92292], 0) == 0\nassert solution.minimizeMax([8363, 10435, 26017, 28917, 39270, 41255, 53536, 57039, 59341, 74122, 86175, 88783], 1) == 1985\nassert solution.minimizeMax([12, 4410, 7067, 9390, 18971, 26918, 30269, 33013, 41185, 51625, 63064, 72661, 75547, 75850, 89442, 99201], 7) == 9759\nassert solution.minimizeMax([4664, 17364, 21892, 23330, 24042, 25540, 27883, 28366, 36680, 57797, 58712, 70268, 72362, 77808, 78699, 88471, 89086], 4) == 891\nassert solution.minimizeMax([30273, 37234, 85975], 1) == 6961\nassert solution.minimizeMax([36056, 43818, 59305, 69135, 72357, 97595], 0) == 0\nassert solution.minimizeMax([4788, 16130, 48893, 57182, 58220, 63907, 65282], 3) == 11342\nassert solution.minimizeMax([52601, 63653], 1) == 11052\nassert solution.minimizeMax([7323, 8414, 14453, 23835, 41044, 44939, 57009, 59382, 61847, 74478, 80421, 97603, 98539], 3) == 2373\nassert solution.minimizeMax([3374, 16660, 19592, 23814, 28093, 57458, 61103, 68351, 73379, 74263, 75436, 80393, 82185, 85483], 7) == 29365\nassert solution.minimizeMax([16677, 20418, 31765, 40167, 86224, 91832, 96428], 2) == 4596\nassert solution.minimizeMax([1074, 1574, 14039, 15758, 17589, 29255, 54721, 57347, 61089, 62610, 64102, 66457, 73072, 79160, 81616, 82884, 93260, 93600, 95686], 9) == 11666\nassert solution.minimizeMax([13445, 40204, 70798, 77179], 2) == 26759\nassert solution.minimizeMax([6600, 80429], 1) == 73829\nassert solution.minimizeMax([3962, 4234, 4832, 9111, 15750, 25170, 38982, 39077, 48191, 55049, 55829, 60968, 70387, 71928, 80910, 85367, 85608, 92523, 93675], 6) == 1541\nassert solution.minimizeMax([5874, 14895, 18070, 24439, 43940, 75257], 1) == 3175\nassert solution.minimizeMax([11940, 23480, 31501, 41066, 53126, 90700], 0) == 0\nassert solution.minimizeMax([11461, 18535, 21722, 23879, 35084, 38779, 41471, 42771, 45654, 47776, 54878, 61959, 62746, 73605, 79463, 92038], 4) == 2157\nassert solution.minimizeMax([4817, 32756, 43978, 57741, 60254, 61717, 66295], 1) == 1463\nassert solution.minimizeMax([4070, 8620, 13029, 19464, 22831, 25134, 30928, 34617, 35698, 39293, 41980, 44604, 66851, 68168, 70125, 78620, 78662, 99687], 6) == 3689\nassert solution.minimizeMax([12637, 12861, 17961, 24052, 25549, 30775, 34259, 44437, 45376, 53658, 53713, 57277, 62462, 68674, 78134, 86589, 90068, 90288, 98278, 99689], 4) == 939\nassert solution.minimizeMax([1176, 7081, 18068, 18462, 20749, 21245, 28888, 40247, 44532, 48816, 50275, 60818, 75661, 80154, 93277], 5) == 4493\nassert solution.minimizeMax([1570, 3132, 4320, 65123, 91972, 94334], 1) == 1188\nassert solution.minimizeMax([19710, 49305, 51049, 52510, 56137, 77774, 77827, 79477, 81398, 94108], 3) == 1921\nassert solution.minimizeMax([2506, 12501, 18389, 22605, 27694, 31808, 34280, 34862, 39485, 41447, 48520, 62768, 62882, 91174, 91595, 99091], 6) == 4216\nassert solution.minimizeMax([4491, 22825, 24913, 25576, 34360, 52712, 65635, 69839, 80078, 87390], 5) == 18352\nassert solution.minimizeMax([6858, 21189, 39853, 44818, 65641, 70831, 82779, 87158, 97597], 4) == 14331\nassert solution.minimizeMax([33556, 57273, 63654, 64620, 69252, 74066], 2) == 4814\nassert solution.minimizeMax([56464, 94934], 1) == 38470\nassert solution.minimizeMax([6653, 7177, 12261, 24417, 30534, 54393, 58245, 68141, 72999, 83621], 3) == 4858\nassert solution.minimizeMax([8278, 13154, 19131, 22098, 25055, 41671, 56942, 59199, 65147, 72590, 77466, 82203, 83397, 84902, 88436, 89701, 90441, 94591], 9) == 16616\nassert solution.minimizeMax([6585, 19669, 29609, 38898, 43000, 44502, 49530, 59010], 0) == 0\nassert solution.minimizeMax([7128, 22216, 23730, 28663, 30439, 34117, 37735, 56148, 61665, 64868, 65519, 70329, 74052, 80037, 90849, 97981, 99214, 99767], 5) == 3618\nassert solution.minimizeMax([66045, 72643, 75985, 82936, 83448], 1) == 512\nassert solution.minimizeMax([18303, 45415, 50193, 56616, 96612], 1) == 4778\nassert solution.minimizeMax([13582, 13947, 14285, 21211, 24819, 30230, 30256, 33365, 33706, 51301, 52438, 52890, 55304, 66874, 72555, 78635, 85206, 87150, 88695, 94718], 1) == 26\nassert solution.minimizeMax([21367, 21966, 26837, 36042, 54249, 58309, 59781, 59869, 61676, 77973, 86391, 96122], 5) == 9205\nassert solution.minimizeMax([6977, 26483, 67760], 0) == 0\nassert solution.minimizeMax([2235, 6925, 7252, 30604, 35931, 48962, 51784, 53036, 61619, 65842, 70944, 79879, 86619, 89628], 6) == 8583\nassert solution.minimizeMax([19882, 24843, 25596, 48851, 51512, 51642, 78626, 88555, 93167, 93908], 0) == 0\nassert solution.minimizeMax([9163, 14163, 18150, 44556, 83324], 2) == 26406\nassert solution.minimizeMax([5225, 6600, 6832, 16366, 22054, 23874, 26191, 28438, 42690, 45812, 46511, 67159, 73116, 94406, 96908], 2) == 699\nassert solution.minimizeMax([7072, 16079, 22570, 28470, 53030, 59144, 64855, 76160, 77593, 78887], 3) == 5900\nassert solution.minimizeMax([2157, 11001, 13803, 27462, 38207, 46426, 52219, 54365, 58791, 68485, 70909, 76654, 83021, 84697, 90037, 93969], 8) == 13659\nassert solution.minimizeMax([31490, 44572, 63004, 68702, 81957], 0) == 0\nassert solution.minimizeMax([7907, 16935, 28266, 30465, 31839, 33174, 34788, 48381, 50881, 54017, 68514, 74439, 84045, 85640, 97022], 0) == 0\nassert solution.minimizeMax([7120, 8523, 11271, 12453, 15614, 44394, 47510, 51174, 68822, 71718, 79679, 82375, 84425, 98965], 0) == 0\nassert solution.minimizeMax([20527, 21838, 21890, 32445, 34204, 41211, 58797, 77344, 92405, 93551], 1) == 52\nassert solution.minimizeMax([44930, 53042, 57607, 58800, 62681, 67624], 0) == 0\nassert solution.minimizeMax([5023, 12431, 16369, 17226, 25947, 31805, 37469, 37846, 41124, 41972, 45507, 45849, 71002, 73269, 92241], 5) == 2267\nassert solution.minimizeMax([29715, 70267, 86264, 94829, 96887], 1) == 2058\nassert solution.minimizeMax([1009, 7142, 28435, 43299, 50884, 56909, 63964, 66397, 77597, 83270, 83726, 87674, 93748, 98182], 7) == 14864\nassert solution.minimizeMax([631, 2259, 9079, 31391, 34936, 38097, 53647, 69916, 90171], 4) == 20255\nassert solution.minimizeMax([3538, 10451, 26959, 55365, 56191, 57153, 58796, 63097, 63940, 67257, 80319, 92548, 95769], 6) == 13062\nassert solution.minimizeMax([1612, 1734, 2546, 5124, 17430, 17609, 24438, 25981, 28885, 35608, 36568, 37887, 66373, 69987, 70490, 89937, 92033, 98732], 4) == 960\nassert solution.minimizeMax([11181, 41913, 46192, 57567, 74552], 0) == 0\nassert solution.minimizeMax([2128, 4854, 53919, 87470], 0) == 0\nassert solution.minimizeMax([13380, 19770, 24571, 40138, 43218, 47482, 61594, 73067, 84704, 98648], 1) == 3080\nassert solution.minimizeMax([11216, 13175, 53111, 65097, 88534], 1) == 1959\nassert solution.minimizeMax([907, 1040, 4067, 21177, 25562, 31059, 31703, 44748, 85251, 86137], 2) == 644\nassert solution.minimizeMax([14430, 16974, 27044, 33101, 43202, 58140, 59931, 77814], 3) == 6057\nassert solution.minimizeMax([39750, 68784, 72659, 95500], 0) == 0\nassert solution.minimizeMax([2291, 4400, 16202, 18375, 26912, 32429, 45361, 45831, 48447, 51842, 53141, 54231, 56718, 57264, 75370, 75530, 82769, 98087], 0) == 0\nassert solution.minimizeMax([35670, 38805, 49594, 54535, 54972, 56137, 67935, 68335, 71032, 74757, 76901, 87153, 87497], 6) == 4941\nassert solution.minimizeMax([9156, 14270, 22999, 23253, 27437, 44706, 69156, 72385, 72412, 78849, 83865, 84887, 91110, 97021], 7) == 17269\nassert solution.minimizeMax([33383, 50138, 71257, 83548], 0) == 0\nassert solution.minimizeMax([8108, 11260, 15169, 15695, 24850, 27976, 33502, 39678, 51083, 68718, 69644, 74662, 74926, 83589, 83837, 94071], 7) == 6176\nassert solution.minimizeMax([40130, 58342, 61544, 74399, 91040], 2) == 16641\nassert solution.minimizeMax([7876, 9886, 10537, 37812, 38322, 39015, 43872, 48927, 57654, 63029, 63644, 66482, 75477, 77493, 77995, 91473, 91871, 96363, 98631], 2) == 502",
  "inefficient_solution": "class Solution:\n    def minimizeMax(self, nums, p):\n        def check(diff):\n            pairs = []\n            for i in range(len(nums)):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[j] - nums[i]) <= diff:\n                        pairs.append((i, j))\n            return len(pairs) >= 2 * p\n\n        min_diff = nums[-1] - nums[0]\n        max_diff = nums[-1]\n        while min_diff <= max_diff:\n            mid = (min_diff + max_diff) // 2\n            if check(mid):\n                max_diff = mid - 1\n            else:\n                min_diff = mid + 1\n        return min_diff + 1",
  "is_python": true
}