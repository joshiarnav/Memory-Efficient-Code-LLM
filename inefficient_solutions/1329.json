{
  "problem_idx": 1329,
  "task_name": "Sort the Matrix Diagonally",
  "markdown_description": "\nA **matrix diagonal** is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the **matrix diagonal** starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.\n\n\nGiven an `m x n` matrix `mat` of integers, sort each **matrix diagonal** in ascending order and return *the resulting matrix*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1329.Sort%20the%20Matrix%20Diagonally/images/1482_example_1_2.png)\n\n```\n\n**Input:** mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\n**Output:** [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\n**Output:** [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == mat.length`\n* `n == mat[i].length`\n* `1 <= m, n <= 100`\n* `1 <= mat[i][j] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:\n        m, n = len(mat), len(mat[0])\n        for k in range(min(m, n) - 1):\n            for i in range(m - 1):\n                for j in range(n - 1):\n                    if mat[i][j] > mat[i + 1][j + 1]:\n                        mat[i][j], mat[i + 1][j + 1] = mat[i + 1][j + 1], mat[i][j]\n        return mat\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def diagonalSort(self, mat):\n        m, n = len(mat), len(mat[0])\n        for k in range(min(m, n) - 1):\n            for i in range(m - 1):\n                for j in range(n - 1):\n                    if mat[i][j] > mat[i + 1][j + 1]:\n                        mat[i][j], mat[i + 1][j + 1] = mat[i + 1][j + 1], mat[i][j]\n        return mat\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random matrix\n    m = random.randint(1, 6)\n    n = random.randint(1, 3)\n    mat = [[random.randint(1, 100) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.diagonalSort(mat)\n\n    return mat, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        mat, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.diagonalSort(mat) == expected_result\n        print(f\"assert solution.diagonalSort({mat}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.diagonalSort({mat}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.diagonalSort([[35, 66], [29, 45]]) == [[35, 66], [29, 45]]\nassert solution.diagonalSort([[18, 100], [79, 85], [57, 100], [67, 72]]) == [[18, 100], [79, 85], [57, 100], [67, 72]]\nassert solution.diagonalSort([[63, 12, 60], [22, 71, 33], [38, 38, 89], [3, 42, 67], [40, 26, 64], [93, 87, 83]]) == [[63, 12, 60], [22, 71, 33], [38, 38, 89], [3, 42, 67], [40, 26, 64], [93, 87, 83]]\nassert solution.diagonalSort([[23, 10, 59], [12, 30, 61], [31, 35, 63], [13, 77, 84], [27, 54, 97]]) == [[23, 10, 59], [12, 30, 61], [31, 35, 63], [13, 77, 84], [27, 54, 97]]\nassert solution.diagonalSort([[62, 5, 25], [11, 72, 15], [6, 64, 100], [64, 54, 73], [8, 78, 98]]) == [[62, 5, 25], [11, 72, 15], [6, 64, 100], [64, 54, 73], [8, 78, 98]]\nassert solution.diagonalSort([[32, 20, 23], [14, 56, 94], [25, 76, 64], [84, 78, 81]]) == [[32, 20, 23], [14, 56, 94], [25, 76, 64], [84, 78, 81]]\nassert solution.diagonalSort([[32, 40, 90], [84, 49, 64]]) == [[32, 40, 90], [84, 49, 64]]\nassert solution.diagonalSort([[92, 100]]) == [[92, 100]]\nassert solution.diagonalSort([[91, 58], [2, 98], [13, 45], [4, 73]]) == [[91, 58], [2, 98], [13, 45], [4, 73]]\nassert solution.diagonalSort([[77], [79], [37], [53], [9], [37]]) == [[77], [79], [37], [53], [9], [37]]\nassert solution.diagonalSort([[50, 20]]) == [[50, 20]]\nassert solution.diagonalSort([[4, 90], [75, 90], [66, 96], [89, 88], [36, 94], [9, 42]]) == [[4, 90], [75, 90], [66, 96], [89, 88], [36, 94], [9, 42]]\nassert solution.diagonalSort([[33], [7], [31], [27]]) == [[33], [7], [31], [27]]\nassert solution.diagonalSort([[30, 3, 66], [52, 75, 79], [60, 81, 91]]) == [[30, 3, 66], [52, 75, 79], [60, 81, 91]]\nassert solution.diagonalSort([[94], [3], [74], [33], [100], [47]]) == [[94], [3], [74], [33], [100], [47]]\nassert solution.diagonalSort([[46, 60], [24, 67]]) == [[46, 60], [24, 67]]\nassert solution.diagonalSort([[54, 82], [36, 76], [56, 94]]) == [[54, 82], [36, 76], [56, 94]]\nassert solution.diagonalSort([[45], [83], [95], [5], [80], [88]]) == [[45], [83], [95], [5], [80], [88]]\nassert solution.diagonalSort([[73], [17], [96], [9]]) == [[73], [17], [96], [9]]\nassert solution.diagonalSort([[16, 6, 40], [63, 41, 89], [3, 63, 67], [44, 38, 98], [27, 54, 54], [79, 73, 94]]) == [[16, 6, 40], [63, 41, 89], [3, 63, 67], [44, 38, 98], [27, 54, 54], [79, 73, 94]]\nassert solution.diagonalSort([[42, 24, 36], [70, 91, 45]]) == [[42, 24, 36], [70, 91, 45]]\nassert solution.diagonalSort([[71, 97], [14, 76], [82, 46]]) == [[71, 97], [14, 76], [82, 46]]\nassert solution.diagonalSort([[37, 14, 2], [8, 89, 70]]) == [[37, 14, 2], [8, 89, 70]]\nassert solution.diagonalSort([[62, 42], [23, 71], [23, 45], [36, 53], [41, 99]]) == [[62, 42], [23, 71], [23, 45], [36, 53], [41, 99]]\nassert solution.diagonalSort([[4, 71], [45, 51], [45, 98], [69, 91], [88, 75]]) == [[4, 71], [45, 51], [45, 98], [69, 91], [88, 75]]\nassert solution.diagonalSort([[86, 73]]) == [[86, 73]]\nassert solution.diagonalSort([[26, 14, 37], [20, 67, 31], [21, 38, 88], [30, 61, 81]]) == [[26, 14, 37], [20, 67, 31], [21, 38, 88], [30, 61, 81]]\nassert solution.diagonalSort([[24, 5, 90], [35, 50, 71], [10, 35, 51], [26, 13, 38], [84, 76, 98]]) == [[24, 5, 90], [35, 50, 71], [10, 35, 51], [26, 13, 38], [84, 76, 98]]\nassert solution.diagonalSort([[8, 6, 26], [21, 22, 9], [95, 59, 65]]) == [[8, 6, 26], [21, 22, 9], [95, 59, 65]]\nassert solution.diagonalSort([[44, 75]]) == [[44, 75]]\nassert solution.diagonalSort([[97], [49], [36], [63], [33], [44]]) == [[97], [49], [36], [63], [33], [44]]\nassert solution.diagonalSort([[47, 40, 46]]) == [[47, 40, 46]]\nassert solution.diagonalSort([[45, 75], [9, 70], [13, 12], [1, 16], [13, 55], [34, 33]]) == [[45, 75], [9, 70], [13, 12], [1, 16], [13, 55], [34, 33]]\nassert solution.diagonalSort([[41, 77], [68, 78], [42, 91], [86, 49], [83, 91]]) == [[41, 77], [68, 78], [42, 91], [86, 49], [83, 91]]\nassert solution.diagonalSort([[19, 85], [37, 80], [36, 96], [84, 59]]) == [[19, 85], [37, 80], [36, 96], [84, 59]]\nassert solution.diagonalSort([[94, 72, 56]]) == [[94, 72, 56]]\nassert solution.diagonalSort([[71], [51], [37], [69], [14]]) == [[71], [51], [37], [69], [14]]\nassert solution.diagonalSort([[42, 17], [5, 70], [8, 8]]) == [[42, 17], [5, 70], [8, 8]]\nassert solution.diagonalSort([[21, 54], [35, 75], [35, 71], [46, 78]]) == [[21, 54], [35, 75], [35, 71], [46, 78]]\nassert solution.diagonalSort([[75, 60], [11, 98], [12, 80], [38, 26], [17, 41]]) == [[75, 60], [11, 98], [12, 80], [38, 26], [17, 41]]\nassert solution.diagonalSort([[22, 80], [31, 73], [75, 98], [22, 75], [2, 38], [46, 45]]) == [[22, 80], [31, 73], [75, 98], [22, 75], [2, 38], [46, 45]]\nassert solution.diagonalSort([[64, 88, 57]]) == [[64, 88, 57]]\nassert solution.diagonalSort([[86, 70]]) == [[86, 70]]\nassert solution.diagonalSort([[80], [10], [79], [79]]) == [[80], [10], [79], [79]]\nassert solution.diagonalSort([[55, 70], [46, 66], [75, 47]]) == [[55, 70], [46, 66], [75, 47]]\nassert solution.diagonalSort([[25, 30], [53, 31], [12, 72], [52, 32]]) == [[25, 30], [53, 31], [12, 72], [52, 32]]\nassert solution.diagonalSort([[46, 86], [8, 59], [43, 22], [11, 69]]) == [[46, 86], [8, 59], [43, 22], [11, 69]]\nassert solution.diagonalSort([[45]]) == [[45]]\nassert solution.diagonalSort([[2], [67], [47], [66], [17]]) == [[2], [67], [47], [66], [17]]\nassert solution.diagonalSort([[27, 32, 90], [61, 76, 82]]) == [[27, 32, 90], [61, 76, 82]]\nassert solution.diagonalSort([[11, 83], [58, 30], [54, 69], [2, 63]]) == [[11, 83], [58, 30], [54, 69], [2, 63]]\nassert solution.diagonalSort([[23, 10, 4], [36, 64, 24], [92, 48, 72], [31, 96, 52]]) == [[23, 10, 4], [36, 64, 24], [92, 48, 72], [31, 96, 52]]\nassert solution.diagonalSort([[29, 18], [77, 82], [13, 96], [33, 29], [9, 40]]) == [[29, 18], [77, 82], [13, 96], [33, 29], [9, 40]]\nassert solution.diagonalSort([[29, 70], [30, 39]]) == [[29, 70], [30, 39]]\nassert solution.diagonalSort([[20, 44], [11, 81]]) == [[20, 44], [11, 81]]\nassert solution.diagonalSort([[41], [3], [83], [82], [92]]) == [[41], [3], [83], [82], [92]]\nassert solution.diagonalSort([[9, 29, 22], [16, 89, 59], [29, 45, 94], [78, 33, 76], [94, 93, 97]]) == [[9, 29, 22], [16, 89, 59], [29, 45, 94], [78, 33, 76], [94, 93, 97]]\nassert solution.diagonalSort([[32, 81], [19, 38], [83, 58], [56, 83]]) == [[32, 81], [19, 38], [83, 58], [56, 83]]\nassert solution.diagonalSort([[14, 30], [52, 78], [35, 84]]) == [[14, 30], [52, 78], [35, 84]]\nassert solution.diagonalSort([[74], [96], [11], [67], [12], [32]]) == [[74], [96], [11], [67], [12], [32]]\nassert solution.diagonalSort([[48]]) == [[48]]\nassert solution.diagonalSort([[41, 39], [22, 69], [29, 94], [54, 73], [71, 57]]) == [[41, 39], [22, 69], [29, 94], [54, 73], [71, 57]]\nassert solution.diagonalSort([[7, 26, 98], [7, 10, 29], [18, 34, 35], [14, 61, 96], [11, 67, 98], [15, 38, 69]]) == [[7, 26, 98], [7, 10, 29], [18, 34, 35], [14, 61, 96], [11, 67, 98], [15, 38, 69]]\nassert solution.diagonalSort([[24, 1]]) == [[24, 1]]\nassert solution.diagonalSort([[99], [64], [75]]) == [[99], [64], [75]]\nassert solution.diagonalSort([[31, 68, 69], [45, 61, 73], [11, 58, 84], [9, 26, 77]]) == [[31, 68, 69], [45, 61, 73], [11, 58, 84], [9, 26, 77]]\nassert solution.diagonalSort([[69, 28]]) == [[69, 28]]\nassert solution.diagonalSort([[38], [5]]) == [[38], [5]]\nassert solution.diagonalSort([[21]]) == [[21]]\nassert solution.diagonalSort([[61, 4, 16], [70, 62, 24], [26, 74, 62], [37, 28, 93], [51, 44, 94], [17, 72, 55]]) == [[61, 4, 16], [70, 62, 24], [26, 74, 62], [37, 28, 93], [51, 44, 94], [17, 72, 55]]\nassert solution.diagonalSort([[13, 11, 29], [26, 19, 38], [49, 36, 33], [67, 75, 55], [55, 92, 88]]) == [[13, 11, 29], [26, 19, 38], [49, 36, 33], [67, 75, 55], [55, 92, 88]]\nassert solution.diagonalSort([[65], [34], [46], [15], [21]]) == [[65], [34], [46], [15], [21]]\nassert solution.diagonalSort([[56], [57], [3], [17]]) == [[56], [57], [3], [17]]\nassert solution.diagonalSort([[83, 72, 64]]) == [[83, 72, 64]]\nassert solution.diagonalSort([[84, 64]]) == [[84, 64]]\nassert solution.diagonalSort([[4, 40, 93], [2, 48, 66], [8, 77, 84], [26, 18, 88], [52, 62, 61]]) == [[4, 40, 93], [2, 48, 66], [8, 77, 84], [26, 18, 88], [52, 62, 61]]\nassert solution.diagonalSort([[62, 48], [8, 84], [82, 57]]) == [[62, 48], [8, 84], [82, 57]]\nassert solution.diagonalSort([[46, 5], [8, 63], [31, 46], [8, 83], [20, 23], [39, 99]]) == [[46, 5], [8, 63], [31, 46], [8, 83], [20, 23], [39, 99]]\nassert solution.diagonalSort([[29], [56], [83], [18], [28], [96]]) == [[29], [56], [83], [18], [28], [96]]\nassert solution.diagonalSort([[84], [31]]) == [[84], [31]]\nassert solution.diagonalSort([[12, 23, 35]]) == [[12, 23, 35]]\nassert solution.diagonalSort([[70, 30], [11, 93], [70, 79]]) == [[70, 30], [11, 93], [70, 79]]\nassert solution.diagonalSort([[43], [68]]) == [[43], [68]]\nassert solution.diagonalSort([[88, 24, 15], [66, 98, 42]]) == [[88, 24, 15], [66, 98, 42]]\nassert solution.diagonalSort([[13], [82]]) == [[13], [82]]\nassert solution.diagonalSort([[52, 18, 84], [70, 84, 42]]) == [[52, 18, 84], [70, 84, 42]]\nassert solution.diagonalSort([[77], [20], [2], [97], [9]]) == [[77], [20], [2], [97], [9]]\nassert solution.diagonalSort([[52, 32], [13, 79], [22, 23]]) == [[52, 32], [13, 79], [22, 23]]\nassert solution.diagonalSort([[47]]) == [[47]]\nassert solution.diagonalSort([[76]]) == [[76]]\nassert solution.diagonalSort([[2, 68], [30, 93]]) == [[2, 68], [30, 93]]\nassert solution.diagonalSort([[13, 80, 76], [47, 72, 85], [14, 60, 83], [94, 21, 97]]) == [[13, 80, 76], [47, 72, 85], [14, 60, 83], [94, 21, 97]]\nassert solution.diagonalSort([[50, 28], [34, 92], [19, 75], [95, 38], [11, 95]]) == [[50, 28], [34, 92], [19, 75], [95, 38], [11, 95]]\nassert solution.diagonalSort([[9, 79]]) == [[9, 79]]\nassert solution.diagonalSort([[38, 19, 64], [54, 39, 71], [43, 78, 96], [46, 48, 81], [60, 87, 56], [45, 100, 90]]) == [[38, 19, 64], [54, 39, 71], [43, 78, 96], [46, 48, 81], [60, 87, 56], [45, 100, 90]]\nassert solution.diagonalSort([[7], [73]]) == [[7], [73]]\nassert solution.diagonalSort([[65], [57], [99], [38], [56]]) == [[65], [57], [99], [38], [56]]\nassert solution.diagonalSort([[74], [53]]) == [[74], [53]]\nassert solution.diagonalSort([[6, 94, 44]]) == [[6, 94, 44]]\nassert solution.diagonalSort([[75, 45]]) == [[75, 45]]",
  "inefficient_solution": "def diagonalSort(mat):\n    import copy\n    import heapq\n    m, n = len(mat), len(mat[0])\n    for k in range(min(m, n) - 1):\n        diagonals = {}\n        for i in range(m):\n            for j in range(n):\n                if i - j == k:\n                    if i - j not in diagonals:\n                        diagonals[i - j] = []\n                    diagonals[i - j].append(mat[i][j])\n        for i in range(m):\n            for j in range(n):\n                if i - j == k:\n                    mat[i][j] = heapq.heappop(diagonals[i - j])\n        for i in range(m):\n            for j in range(n):\n                for x in range(n):\n                    if x != j:\n                        mat[i][x], mat[i][j] = mat[i][j], mat[i][x]\n    return mat",
  "is_python": true
}