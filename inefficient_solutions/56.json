{
  "problem_idx": 56,
  "task_name": "Merge Intervals",
  "markdown_description": "\nGiven an array\u00a0of `intervals`\u00a0where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return *an array of the non-overlapping intervals that cover all the intervals in the input*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** intervals = [[1,3],[2,6],[8,10],[15,18]]\n**Output:** [[1,6],[8,10],[15,18]]\n**Explanation:** Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** intervals = [[1,4],[4,5]]\n**Output:** [[1,5]]\n**Explanation:** Intervals [1,4] and [4,5] are considered overlapping.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= intervals.length <= 104`\n* `intervals[i].length == 2`\n* `0 <= starti <= endi <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        intervals.sort()\n        ans = [intervals[0]]\n        for s, e in intervals[1:]:\n            if ans[-1][1] < s:\n                ans.append([s, e])\n            else:\n                ans[-1][1] = max(ans[-1][1], e)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def merge(self, intervals):\n        intervals.sort()\n        ans = [intervals[0]]\n        for s, e in intervals[1:]:\n            if ans[-1][1] < s:\n                ans.append([s, e])\n            else:\n                ans[-1][1] = max(ans[-1][1], e)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random intervals list\n    intervals = []\n    num_intervals = random.randint(1, 10)\n    for _ in range(num_intervals):\n        start = random.randint(0, 10000)\n        end = random.randint(start, 10000)\n        intervals.append([start, end])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.merge(intervals)\n\n    return intervals, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        intervals, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.merge(intervals) == expected_result\n        print(f\"assert solution.merge({intervals}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.merge({intervals}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.merge([[1790, 9176]]) == [[1790, 9176]]\nassert solution.merge([[919, 1277], [1640, 4837], [2598, 3504], [4108, 5439], [4800, 8471], [6348, 7444], [7001, 7271], [7692, 9034], [7951, 8563], [9358, 9363]]) == [[919, 1277], [1640, 9034], [9358, 9363]]\nassert solution.merge([[2036, 2198], [2389, 9172], [2805, 6882], [6137, 6166], [8679, 9646]]) == [[2036, 2198], [2389, 9646]]\nassert solution.merge([[378, 9971], [681, 6177], [993, 8856], [3190, 9636], [5561, 9971], [5586, 7018], [5689, 6563], [7275, 7500]]) == [[378, 9971]]\nassert solution.merge([[199, 6965], [9025, 9463]]) == [[199, 6965], [9025, 9463]]\nassert solution.merge([[3083, 8473], [3418, 6487], [4744, 8473], [7349, 7796], [9384, 9818], [9963, 9982]]) == [[3083, 8473], [9384, 9818], [9963, 9982]]\nassert solution.merge([[1685, 9352], [5250, 8794], [5605, 6731], [8784, 9100], [9006, 9352]]) == [[1685, 9352]]\nassert solution.merge([[389, 8841], [567, 1576], [873, 5697], [4980, 8838], [6437, 8492], [6451, 8841]]) == [[389, 8841]]\nassert solution.merge([[294, 9775], [547, 6038], [1201, 5303], [4401, 6987], [5903, 8431], [6858, 9753], [7755, 9311], [9738, 9775]]) == [[294, 9775]]\nassert solution.merge([[126, 9961], [718, 9892], [965, 5287], [1056, 9955], [3114, 9321], [4172, 5217], [7208, 9589], [9875, 9961]]) == [[126, 9961]]\nassert solution.merge([[571, 9916], [995, 4280], [1870, 8179], [2654, 4607], [3574, 9916], [3706, 4802], [4269, 5578], [5131, 5705], [9652, 9776], [9756, 9857]]) == [[571, 9916]]\nassert solution.merge([[819, 7300], [1499, 4985], [1867, 6991], [1994, 2037], [8340, 9257], [8537, 8795], [8582, 8776], [9174, 9177]]) == [[819, 7300], [8340, 9257]]\nassert solution.merge([[2976, 9821], [2977, 5495], [3015, 3681], [6951, 8715], [8650, 9821], [9376, 9661], [9437, 9527]]) == [[2976, 9821]]\nassert solution.merge([[5975, 9225], [7869, 9080]]) == [[5975, 9225]]\nassert solution.merge([[2, 9834], [52, 6889], [53, 9834], [165, 7676], [191, 6142], [782, 3375], [4534, 8808]]) == [[2, 9834]]\nassert solution.merge([[878, 9722], [1530, 3256], [2592, 7007], [2597, 7374], [3028, 5083]]) == [[878, 9722]]\nassert solution.merge([[211, 9660], [470, 6267], [2479, 7488], [2845, 8840], [4915, 5650], [6389, 7868], [6525, 7777], [6731, 8073], [8005, 9660], [9871, 9904]]) == [[211, 9660], [9871, 9904]]\nassert solution.merge([[4582, 9997], [7262, 8514], [7529, 8479], [7915, 9997], [8320, 8493]]) == [[4582, 9997]]\nassert solution.merge([[2313, 9691], [3417, 9311], [3517, 3856], [4214, 4280], [4434, 7489], [6378, 7366], [6498, 9691], [7444, 7869], [8918, 9038]]) == [[2313, 9691]]\nassert solution.merge([[305, 8010], [1127, 6429], [3572, 6728], [4263, 6790], [6742, 8010], [9980, 9987]]) == [[305, 8010], [9980, 9987]]\nassert solution.merge([[9374, 9686]]) == [[9374, 9686]]\nassert solution.merge([[3682, 9445]]) == [[3682, 9445]]\nassert solution.merge([[2494, 3444], [2649, 3444], [3977, 4133], [8186, 9549]]) == [[2494, 3444], [3977, 4133], [8186, 9549]]\nassert solution.merge([[739, 9602], [1974, 2020], [2146, 9602], [2297, 6524], [3501, 6915], [3725, 6466], [3857, 6195], [7213, 9338], [7346, 9465]]) == [[739, 9602]]\nassert solution.merge([[4951, 6391], [9312, 9817]]) == [[4951, 6391], [9312, 9817]]\nassert solution.merge([[466, 6695], [2106, 6105], [4263, 4266], [4794, 6695], [9073, 9839]]) == [[466, 6695], [9073, 9839]]\nassert solution.merge([[355, 9696], [2884, 9254], [2961, 3784], [3474, 7087], [6230, 6467], [6498, 7423], [6838, 9696], [6865, 7832], [9983, 9999]]) == [[355, 9696], [9983, 9999]]\nassert solution.merge([[876, 1052], [1248, 5333], [4369, 7142], [6216, 9655], [7700, 8288], [8273, 9379], [8876, 9238]]) == [[876, 1052], [1248, 9655]]\nassert solution.merge([[2756, 6602], [7763, 9408]]) == [[2756, 6602], [7763, 9408]]\nassert solution.merge([[2573, 9230], [3027, 4881], [3389, 4678], [3508, 5608], [3553, 9230], [3911, 6711], [5968, 7433], [6775, 8778], [7384, 8169], [8472, 9067]]) == [[2573, 9230]]\nassert solution.merge([[398, 9577], [470, 7318], [716, 5088], [1481, 8154], [2796, 8077], [4642, 6378], [5718, 9577], [6076, 6925], [7500, 8937]]) == [[398, 9577]]\nassert solution.merge([[2951, 9580], [3219, 9537], [5505, 8022], [8296, 9580]]) == [[2951, 9580]]\nassert solution.merge([[931, 8359], [1680, 8359], [2191, 2442], [3648, 7557], [3810, 5459], [4943, 8016]]) == [[931, 8359]]\nassert solution.merge([[1379, 9565], [1426, 2572], [2201, 8684], [2374, 6726], [3377, 7406], [5988, 7701], [6464, 7007], [6522, 9565], [8451, 8699]]) == [[1379, 9565]]\nassert solution.merge([[1875, 4672], [2307, 4672], [5112, 7986]]) == [[1875, 4672], [5112, 7986]]\nassert solution.merge([[804, 9510], [1653, 5135], [2173, 5843], [4252, 5967], [4323, 7178], [4479, 5241], [5373, 5976], [6751, 8443], [7191, 9510]]) == [[804, 9510]]\nassert solution.merge([[1957, 6992], [8479, 8636]]) == [[1957, 6992], [8479, 8636]]\nassert solution.merge([[3557, 5910], [8884, 8915]]) == [[3557, 5910], [8884, 8915]]\nassert solution.merge([[5595, 7194]]) == [[5595, 7194]]\nassert solution.merge([[2514, 9925], [5928, 8525], [6053, 6634]]) == [[2514, 9925]]\nassert solution.merge([[469, 9847], [1005, 1996], [3520, 5193], [5301, 8824], [5636, 6204], [5761, 9814], [7900, 8797], [8638, 9706], [8931, 9847], [9980, 9985]]) == [[469, 9847], [9980, 9985]]\nassert solution.merge([[903, 9975], [2093, 4773], [2470, 5171], [3396, 9346], [3750, 6791], [5193, 9921], [5530, 9810], [6977, 8747], [7624, 9975]]) == [[903, 9975]]\nassert solution.merge([[863, 9750], [1378, 4170], [2731, 9399], [2974, 9750], [6742, 8531], [6883, 8521], [8615, 8725], [9947, 9969]]) == [[863, 9750], [9947, 9969]]\nassert solution.merge([[1807, 9435], [2622, 7285], [5031, 9435], [8416, 8952], [9267, 9348], [9706, 9895]]) == [[1807, 9435], [9706, 9895]]\nassert solution.merge([[940, 4780], [3016, 3273], [3416, 4780], [3828, 4525], [5553, 6230], [9573, 9865]]) == [[940, 4780], [5553, 6230], [9573, 9865]]\nassert solution.merge([[967, 9774], [3202, 5311], [3990, 8679], [4978, 9341], [6973, 7396], [7631, 9448], [8074, 9774], [8543, 8904]]) == [[967, 9774]]\nassert solution.merge([[1055, 9188], [4065, 7147], [5715, 5944], [8146, 8298], [8422, 8534]]) == [[1055, 9188]]\nassert solution.merge([[20, 2014], [2114, 2216], [2631, 7193], [6356, 8701]]) == [[20, 2014], [2114, 2216], [2631, 8701]]\nassert solution.merge([[4196, 7754], [5922, 6776], [8941, 9036]]) == [[4196, 7754], [8941, 9036]]\nassert solution.merge([[5287, 7642], [8811, 9688]]) == [[5287, 7642], [8811, 9688]]\nassert solution.merge([[380, 9786], [2158, 8871], [4109, 7416], [4172, 4223], [5092, 5820], [6011, 8068], [8250, 9339], [9254, 9459], [9340, 9786]]) == [[380, 9786]]\nassert solution.merge([[826, 1997], [2107, 2449], [3137, 8908], [3856, 6329], [7403, 9712], [9099, 9714], [9509, 9549], [9953, 10000]]) == [[826, 1997], [2107, 2449], [3137, 9714], [9953, 10000]]\nassert solution.merge([[470, 9432], [1897, 3673], [2015, 6390], [3287, 5314], [3697, 9432], [3703, 6177], [6280, 7855], [7914, 9076], [9939, 9945]]) == [[470, 9432], [9939, 9945]]\nassert solution.merge([[696, 5218], [1485, 5218], [2446, 3537], [5518, 7622], [6344, 6822], [6564, 7713]]) == [[696, 5218], [5518, 7713]]\nassert solution.merge([[1684, 6926]]) == [[1684, 6926]]\nassert solution.merge([[879, 9590], [2433, 6915], [2749, 5974], [2753, 7812], [4092, 8942], [6060, 9590], [6399, 7583]]) == [[879, 9590]]\nassert solution.merge([[658, 5791], [6125, 9202], [6634, 7233], [8382, 9529]]) == [[658, 5791], [6125, 9529]]\nassert solution.merge([[172, 305], [4073, 8337], [5321, 7878], [8250, 9231]]) == [[172, 305], [4073, 9231]]\nassert solution.merge([[293, 9147], [379, 9147], [1142, 2662], [2636, 2804], [3018, 5354], [5576, 7107], [6359, 6911], [6857, 7279], [9855, 9989]]) == [[293, 9147], [9855, 9989]]\nassert solution.merge([[1538, 9834], [1755, 3027], [2810, 8092], [4221, 7996], [7476, 9823], [8333, 9380], [8396, 9184], [9690, 9834]]) == [[1538, 9834]]\nassert solution.merge([[701, 9230], [923, 4040], [1817, 4920], [5819, 8162], [6540, 8348]]) == [[701, 9230]]\nassert solution.merge([[3002, 4324], [7438, 7483], [8748, 9532]]) == [[3002, 4324], [7438, 7483], [8748, 9532]]\nassert solution.merge([[636, 7736], [2285, 7271], [2294, 5056], [3160, 4969], [4174, 4577], [8625, 9376]]) == [[636, 7736], [8625, 9376]]\nassert solution.merge([[569, 9819], [2700, 7436], [5862, 9433], [9386, 9819]]) == [[569, 9819]]\nassert solution.merge([[1959, 8726], [2179, 8195], [3442, 4289], [3966, 8726], [4409, 8064], [9964, 9978]]) == [[1959, 8726], [9964, 9978]]\nassert solution.merge([[438, 8366], [6333, 7115], [6438, 7338], [6950, 8366], [8568, 9600], [9843, 9880]]) == [[438, 8366], [8568, 9600], [9843, 9880]]\nassert solution.merge([[930, 6257], [7754, 9176]]) == [[930, 6257], [7754, 9176]]\nassert solution.merge([[412, 9936], [2468, 8774], [3753, 8614], [4342, 8846], [4813, 9936], [5459, 9129], [5569, 9721], [6547, 8672], [9350, 9744]]) == [[412, 9936]]\nassert solution.merge([[1690, 9809], [5248, 9809], [6528, 7210], [7080, 8083]]) == [[1690, 9809]]\nassert solution.merge([[1966, 9157], [2959, 4222], [3755, 8086], [5266, 7023], [5567, 6670]]) == [[1966, 9157]]\nassert solution.merge([[1124, 8261], [1798, 6786], [2767, 4440], [4851, 8099], [5066, 5852], [6412, 6493], [9454, 9697], [9630, 9694]]) == [[1124, 8261], [9454, 9697]]\nassert solution.merge([[435, 9742], [1361, 8103], [1474, 3560], [2259, 3989], [5789, 7433], [5914, 9182], [6039, 8338], [6561, 7045], [7397, 9625], [9512, 9742]]) == [[435, 9742]]\nassert solution.merge([[3791, 3975], [7091, 8484], [8118, 8283], [9134, 9943]]) == [[3791, 3975], [7091, 8484], [9134, 9943]]\nassert solution.merge([[596, 9946], [1086, 6014], [1216, 1357], [1897, 2047], [2499, 6005], [3208, 7382], [3855, 4351], [5661, 9910], [7937, 8604], [9062, 9946]]) == [[596, 9946]]\nassert solution.merge([[859, 9629], [1718, 5553], [3599, 4143], [3693, 9394], [6591, 8302], [8416, 8809], [8417, 9629], [8688, 9391]]) == [[859, 9629]]\nassert solution.merge([[5519, 8848], [9120, 9388]]) == [[5519, 8848], [9120, 9388]]\nassert solution.merge([[3111, 4364]]) == [[3111, 4364]]\nassert solution.merge([[307, 544], [7843, 9844], [8076, 8106], [8527, 9538], [8544, 8585], [8811, 9770], [9203, 9214]]) == [[307, 544], [7843, 9844]]\nassert solution.merge([[39, 9924], [6347, 9924]]) == [[39, 9924]]\nassert solution.merge([[660, 9551], [1181, 7223], [5953, 9209], [7744, 9551]]) == [[660, 9551]]\nassert solution.merge([[5186, 9965], [5738, 8911], [8247, 9232], [8987, 9469], [9092, 9918], [9689, 9965], [9853, 9898]]) == [[5186, 9965]]\nassert solution.merge([[2776, 2926], [4096, 4801]]) == [[2776, 2926], [4096, 4801]]\nassert solution.merge([[427, 4463], [1093, 2088], [1594, 3087], [1829, 3332], [3832, 3911], [7361, 9663], [8579, 9563], [9511, 9658]]) == [[427, 4463], [7361, 9663]]\nassert solution.merge([[7740, 9366]]) == [[7740, 9366]]\nassert solution.merge([[1921, 9063], [1922, 5037], [2147, 7873], [4019, 7170], [6169, 9063], [6205, 8472], [9929, 9956]]) == [[1921, 9063], [9929, 9956]]\nassert solution.merge([[330, 9935], [835, 9935], [1467, 8507], [3167, 5159], [3401, 4189], [4514, 8788], [5053, 7477], [7584, 8057], [8751, 9921], [9486, 9723]]) == [[330, 9935]]\nassert solution.merge([[539, 709], [2976, 9157], [7434, 7685], [8554, 8786], [9174, 9486], [9817, 9958]]) == [[539, 709], [2976, 9157], [9174, 9486], [9817, 9958]]\nassert solution.merge([[2240, 3582], [4336, 7135], [6057, 8561], [6329, 7447]]) == [[2240, 3582], [4336, 8561]]\nassert solution.merge([[5284, 9411], [7745, 9411], [8403, 9049], [9514, 9882]]) == [[5284, 9411], [9514, 9882]]\nassert solution.merge([[727, 1117], [1973, 5173], [2232, 4182], [3918, 6825], [4304, 4813], [6269, 7102], [8807, 9322], [9546, 9623]]) == [[727, 1117], [1973, 7102], [8807, 9322], [9546, 9623]]\nassert solution.merge([[5168, 7371]]) == [[5168, 7371]]\nassert solution.merge([[154, 8988], [3490, 8522], [6499, 7354], [8032, 8988], [8271, 8471], [9371, 9405]]) == [[154, 8988], [9371, 9405]]\nassert solution.merge([[1082, 8998], [1429, 3048], [1845, 3297], [3624, 5421], [4526, 8209], [4693, 5392], [6116, 7768], [7058, 7223], [7179, 8998], [9491, 9696]]) == [[1082, 8998], [9491, 9696]]\nassert solution.merge([[845, 9638], [1521, 7185], [1645, 8639], [1960, 2643], [2577, 7878], [3402, 9638], [3626, 9525], [3638, 6979], [4137, 6599]]) == [[845, 9638]]\nassert solution.merge([[954, 8693], [5983, 6464], [6227, 7118], [6527, 8693], [6935, 8415]]) == [[954, 8693]]\nassert solution.merge([[80, 5161], [346, 3959], [1369, 2230], [2100, 4327], [3348, 5161], [7177, 9903], [7785, 8100], [8176, 9123]]) == [[80, 5161], [7177, 9903]]\nassert solution.merge([[860, 9472], [1170, 8822], [3756, 9472], [4021, 6518], [4455, 5144], [4622, 5835], [5453, 5988], [8895, 8916]]) == [[860, 9472]]\nassert solution.merge([[1672, 5665], [1792, 2846], [2113, 5481], [5104, 5665], [5942, 6641], [8724, 9441], [9063, 9175], [9558, 9932], [9677, 9825]]) == [[1672, 5665], [5942, 6641], [8724, 9441], [9558, 9932]]\nassert solution.merge([[555, 9680], [1494, 5295], [4923, 6176], [5635, 9073], [6001, 7330], [6144, 6378], [8790, 9295], [9711, 9825]]) == [[555, 9680], [9711, 9825]]\nassert solution.merge([[727, 9215], [1560, 9215], [2321, 2865], [2624, 7005], [6565, 8293], [9608, 9754]]) == [[727, 9215], [9608, 9754]]",
  "inefficient_solution": "class Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        n = len(intervals)\n        intervals_copy = [x[:] for x in intervals]\n        merged = []\n        while intervals_copy:\n            current = intervals_copy.pop()\n            new_merged = []\n            for interval in merged:\n                if interval[1] < current[0]:\n                    new_merged.append(interval)\n                elif interval[1] > current[1]:\n                    new_merged.append([current[0], current[1]])\n                    current = interval\n                else:\n                    current[1] = max(current[1], interval[1])\n            new_merged.append(current)\n            merged = new_merged\n            for interval in intervals_copy[:]:\n                if interval[0] <= current[1]:\n                    intervals_copy.remove(interval)\n                else:\n                    break\n        return merged",
  "is_python": true
}