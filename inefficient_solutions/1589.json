{
  "problem_idx": 1589,
  "task_name": "Maximum Sum Obtained of Any Permutation",
  "markdown_description": "\nWe have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are *0-indexed*.\n\n\nReturn *the maximum total sum of all requests **among all permutations** of* `nums`.\n\n\nSince the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\n**Output:** 19\n**Explanation:** One permutation of nums is [2,1,3,4,5] with the following result: \nrequests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5  = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5,6], requests = [[0,1]]\n**Output:** 11\n**Explanation:** A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\n**Output:** 47\n**Explanation:** A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `0 <= nums[i]\u00a0<= 105`\n* `1 <= requests.length <=\u00a0105`\n* `requests[i].length == 2`\n* `0 <= starti\u00a0<= endi\u00a0<\u00a0n`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:\n        n = len(nums)\n        d = [0] * n\n        for l, r in requests:\n            d[l] += 1\n            if r + 1 < n:\n                d[r + 1] -= 1\n        for i in range(1, n):\n            d[i] += d[i - 1]\n        nums.sort()\n        d.sort()\n        mod = 10**9 + 7\n        return sum(a * b for a, b in zip(nums, d)) % mod\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:\n        n = len(nums)\n        d = [0] * n\n        for l, r in requests:\n            d[l] += 1\n            if r + 1 < n:\n                d[r + 1] -= 1\n        for i in range(1, n):\n            d[i] += d[i - 1]\n        nums.sort()\n        d.sort()\n        mod = 10**9 + 7\n        return sum(a * b for a, b in zip(nums, d)) % mod\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random nums list\n    nums = random.choices(range(10**3), k=random.randint(1, 10))\n\n    # Generate a random requests list\n    requests = []\n    for _ in range(random.randint(1, 10)):\n        l = random.randint(0, len(nums) - 1)\n        r = random.randint(l, len(nums) - 1)\n        requests.append([l, r])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxSumRangeQuery(nums, requests)\n\n    return nums, requests, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, requests, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxSumRangeQuery(nums, requests) == expected_result\n        print(f\"assert solution.maxSumRangeQuery({nums}, {requests}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxSumRangeQuery({nums}, {requests}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxSumRangeQuery([229, 904], [[0, 1], [1, 1]]) == 2037\nassert solution.maxSumRangeQuery([107, 273, 421, 483, 831], [[0, 1], [1, 1], [0, 4], [4, 4], [1, 4], [1, 3], [4, 4]]) == 8383\nassert solution.maxSumRangeQuery([622, 842], [[1, 1], [0, 1]]) == 2306\nassert solution.maxSumRangeQuery([46, 58, 248, 378, 447, 509, 610, 697, 802], [[6, 8], [0, 6], [3, 7]]) == 7662\nassert solution.maxSumRangeQuery([265, 303, 510, 573, 711, 929, 974, 987], [[3, 7], [3, 3]]) == 5161\nassert solution.maxSumRangeQuery([635, 638, 841, 861, 928], [[0, 3], [4, 4], [0, 4], [2, 2], [0, 3], [4, 4]]) == 12637\nassert solution.maxSumRangeQuery([356, 818], [[1, 1], [1, 1], [0, 1], [1, 1], [0, 0], [0, 1], [1, 1]]) == 5976\nassert solution.maxSumRangeQuery([248, 529, 585], [[1, 2], [2, 2], [1, 2]]) == 2813\nassert solution.maxSumRangeQuery([989], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 6923\nassert solution.maxSumRangeQuery([104, 142, 215, 250, 269, 455, 490, 619, 798, 801], [[3, 5], [9, 9], [7, 8], [7, 8], [0, 6], [6, 7], [6, 8], [0, 5], [6, 7], [5, 6]]) == 15431\nassert solution.maxSumRangeQuery([64, 401, 421, 498, 530, 659], [[5, 5], [2, 4], [3, 3], [2, 4], [3, 3], [2, 5], [3, 5], [5, 5], [0, 0]]) == 9730\nassert solution.maxSumRangeQuery([67, 68, 532, 931, 934], [[2, 3], [0, 1], [0, 4], [3, 4], [0, 4], [0, 1], [1, 2], [0, 0], [0, 4], [1, 1]]) == 15392\nassert solution.maxSumRangeQuery([137, 220, 300, 343, 350, 569, 587, 604, 640, 959], [[1, 6], [3, 5], [5, 5], [8, 8], [9, 9], [1, 8], [6, 6]]) == 12373\nassert solution.maxSumRangeQuery([271], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 1897\nassert solution.maxSumRangeQuery([61, 131, 137, 137, 602, 618, 820, 958], [[4, 4]]) == 958\nassert solution.maxSumRangeQuery([47, 407, 556, 658, 845, 897, 991], [[2, 5], [1, 5], [6, 6], [0, 3], [4, 4], [4, 4], [0, 0], [4, 4], [1, 4]]) == 16861\nassert solution.maxSumRangeQuery([104, 276, 486, 708, 741], [[2, 3], [4, 4], [4, 4], [1, 3], [1, 2], [3, 4], [1, 2], [3, 3]]) == 8082\nassert solution.maxSumRangeQuery([47, 95, 181, 999], [[0, 1], [1, 1]]) == 2179\nassert solution.maxSumRangeQuery([238, 301, 410, 806, 817, 823, 841, 859, 941], [[8, 8], [0, 7]]) == 6036\nassert solution.maxSumRangeQuery([169, 297], [[0, 0], [0, 0], [0, 1]]) == 1060\nassert solution.maxSumRangeQuery([346, 348, 390, 537], [[3, 3], [2, 3], [0, 3], [0, 1], [0, 3], [1, 1]]) == 5790\nassert solution.maxSumRangeQuery([165, 470, 480, 641, 670, 873], [[0, 4], [5, 5], [0, 1], [4, 5], [4, 4], [3, 3], [5, 5], [1, 2], [3, 4], [3, 4]]) == 11678\nassert solution.maxSumRangeQuery([238, 405, 420, 457, 743], [[4, 4], [4, 4], [2, 3], [2, 4]]) == 3983\nassert solution.maxSumRangeQuery([160, 226, 335, 572, 637, 971], [[4, 5], [5, 5], [0, 5], [5, 5], [3, 4], [1, 4], [1, 1]]) == 9765\nassert solution.maxSumRangeQuery([223, 332, 407, 485, 490, 601, 620, 710, 774, 995], [[3, 6], [4, 8], [9, 9], [0, 1], [9, 9]]) == 8513\nassert solution.maxSumRangeQuery([65, 237, 248, 257, 468, 636, 652, 915, 966], [[0, 3], [6, 7], [0, 0], [5, 8], [8, 8], [6, 6], [0, 7]]) == 12322\nassert solution.maxSumRangeQuery([409, 417, 435, 665, 783, 952], [[3, 3], [2, 3], [2, 5], [5, 5], [5, 5], [3, 5], [4, 4]]) == 9805\nassert solution.maxSumRangeQuery([3, 25, 540, 566, 630, 914], [[3, 5]]) == 2110\nassert solution.maxSumRangeQuery([111, 199, 396, 478], [[3, 3], [3, 3]]) == 956\nassert solution.maxSumRangeQuery([81, 138, 295, 316, 410, 491, 580, 619, 887, 995], [[0, 8], [7, 7], [8, 8], [2, 7], [7, 8]]) == 11906\nassert solution.maxSumRangeQuery([125, 437, 534, 563, 604, 655, 791], [[0, 3], [3, 4], [6, 6], [5, 5], [6, 6], [0, 3], [4, 6]]) == 8864\nassert solution.maxSumRangeQuery([88, 198, 205, 296, 496, 617, 652, 740, 909, 959], [[5, 6], [0, 5], [1, 7], [0, 6], [7, 8], [6, 8]]) == 16681\nassert solution.maxSumRangeQuery([752], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 6016\nassert solution.maxSumRangeQuery([27, 114, 326, 728, 941, 993], [[1, 4], [1, 4], [2, 3], [5, 5]]) == 8024\nassert solution.maxSumRangeQuery([218, 694, 905], [[2, 2], [2, 2], [0, 2]]) == 3627\nassert solution.maxSumRangeQuery([200, 323], [[0, 1], [1, 1], [1, 1]]) == 1169\nassert solution.maxSumRangeQuery([62, 209, 636], [[2, 2], [0, 1], [1, 2], [1, 2], [1, 1], [0, 0], [2, 2], [1, 1], [2, 2]]) == 4349\nassert solution.maxSumRangeQuery([359, 411, 484, 494, 556, 728, 831, 873, 976], [[3, 7], [8, 8]]) == 4458\nassert solution.maxSumRangeQuery([7, 38, 126, 223, 320, 466, 839, 887, 950], [[2, 7], [8, 8], [4, 5], [7, 7], [4, 4], [3, 5], [0, 4], [1, 5], [5, 5], [8, 8]]) == 16272\nassert solution.maxSumRangeQuery([715], [[0, 0]]) == 715\nassert solution.maxSumRangeQuery([21, 105, 403, 543, 620, 777, 801, 947, 949, 953], [[1, 7], [4, 8], [9, 9], [1, 4], [2, 2], [8, 9], [6, 9]]) == 17243\nassert solution.maxSumRangeQuery([7, 23, 262, 623, 625, 671, 883, 929, 973], [[0, 0], [7, 7], [6, 7]]) == 3758\nassert solution.maxSumRangeQuery([643], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 3215\nassert solution.maxSumRangeQuery([803], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 4015\nassert solution.maxSumRangeQuery([16, 406, 594, 727, 764, 780, 793, 871, 910, 994], [[6, 9], [2, 7], [6, 9], [2, 3], [9, 9], [6, 7]]) == 16224\nassert solution.maxSumRangeQuery([22, 272, 318, 325, 490], [[1, 4]]) == 1405\nassert solution.maxSumRangeQuery([159, 238, 318, 333, 478], [[2, 3], [0, 3]]) == 2178\nassert solution.maxSumRangeQuery([191, 482, 673, 730, 735, 772, 888], [[4, 6], [0, 4], [3, 5], [3, 3], [6, 6], [3, 5], [3, 3], [0, 5], [6, 6], [6, 6]]) == 17740\nassert solution.maxSumRangeQuery([80, 172, 434, 750, 879, 940, 970], [[0, 3], [2, 6], [1, 6], [2, 4], [5, 6], [2, 5], [1, 2]]) == 18934\nassert solution.maxSumRangeQuery([390, 794, 857, 988], [[0, 2], [0, 1]]) == 4484\nassert solution.maxSumRangeQuery([255, 676, 802], [[2, 2], [1, 2], [0, 0], [0, 2]]) == 4268\nassert solution.maxSumRangeQuery([99, 252, 620, 715], [[2, 2], [3, 3], [1, 2], [2, 2], [3, 3]]) == 3637\nassert solution.maxSumRangeQuery([74, 204, 396], [[1, 1], [1, 2], [0, 2], [1, 2]]) == 2270\nassert solution.maxSumRangeQuery([38, 274, 412, 729, 895, 921, 989], [[6, 6]]) == 989\nassert solution.maxSumRangeQuery([536], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 3216\nassert solution.maxSumRangeQuery([134, 166, 402, 470, 479, 761, 834, 965], [[3, 5], [2, 2], [4, 6], [4, 7], [3, 6]]) == 11309\nassert solution.maxSumRangeQuery([45], [[0, 0], [0, 0], [0, 0]]) == 135\nassert solution.maxSumRangeQuery([327, 608, 926], [[2, 2], [2, 2], [2, 2]]) == 2778\nassert solution.maxSumRangeQuery([491, 554, 698], [[2, 2], [2, 2]]) == 1396\nassert solution.maxSumRangeQuery([229, 401, 579, 580, 600, 757, 826, 860], [[0, 7], [0, 0], [5, 7], [7, 7], [2, 4], [7, 7], [4, 6], [2, 3], [3, 3]]) == 15323\nassert solution.maxSumRangeQuery([2, 187, 236, 383, 478, 553, 649, 691, 964], [[1, 6], [4, 4], [6, 8], [0, 2], [3, 7], [5, 7]]) == 11918\nassert solution.maxSumRangeQuery([360, 420, 443, 487, 541, 670, 772, 789, 861], [[5, 5], [3, 4], [6, 6]]) == 3092\nassert solution.maxSumRangeQuery([179, 327, 340, 456, 923, 964], [[5, 5], [2, 5], [0, 3], [0, 0], [1, 5], [1, 3], [5, 5], [5, 5], [0, 5], [1, 3]]) == 17276\nassert solution.maxSumRangeQuery([256, 421, 640, 861, 874], [[0, 2], [0, 3], [1, 4], [4, 4], [1, 2], [0, 3], [4, 4], [2, 4], [4, 4], [2, 4]]) == 17357\nassert solution.maxSumRangeQuery([55, 69, 231, 307, 562, 578, 835, 902, 935, 947], [[9, 9], [8, 8], [0, 2], [4, 6], [2, 3]]) == 6313\nassert solution.maxSumRangeQuery([131, 309, 806], [[0, 0], [1, 2], [2, 2]]) == 2052\nassert solution.maxSumRangeQuery([98, 240, 334, 445, 960], [[4, 4], [2, 4], [4, 4], [4, 4], [4, 4], [0, 1], [3, 3], [1, 2], [0, 4], [1, 2]]) == 9792\nassert solution.maxSumRangeQuery([61, 280, 306, 383, 414, 540, 651, 711, 716, 831], [[5, 9]]) == 3449\nassert solution.maxSumRangeQuery([298, 302, 975], [[0, 2], [2, 2], [2, 2], [1, 1], [0, 1], [1, 2], [1, 1], [1, 1]]) == 7654\nassert solution.maxSumRangeQuery([534, 615, 628, 803], [[2, 2], [1, 3], [3, 3], [3, 3], [2, 3], [0, 1]]) == 6860\nassert solution.maxSumRangeQuery([229, 683, 716], [[2, 2], [0, 0], [0, 1], [0, 0], [1, 2], [0, 0], [1, 1], [2, 2]]) == 5600\nassert solution.maxSumRangeQuery([529], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 3703\nassert solution.maxSumRangeQuery([33, 36, 133, 156, 268, 571, 638, 667, 839, 923], [[0, 1], [8, 8], [4, 9], [1, 1]]) == 5957\nassert solution.maxSumRangeQuery([34, 43, 197, 566, 788], [[1, 1]]) == 788\nassert solution.maxSumRangeQuery([120, 131, 145, 579, 805, 852, 904], [[1, 2], [0, 3], [1, 4]]) == 7602\nassert solution.maxSumRangeQuery([685], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 6850\nassert solution.maxSumRangeQuery([764, 908], [[0, 0], [0, 0], [1, 1], [0, 1], [0, 1], [1, 1], [0, 0], [0, 1], [0, 0], [1, 1]]) == 10940\nassert solution.maxSumRangeQuery([190, 346, 441, 444, 532, 613, 658, 881, 882], [[8, 8], [0, 4], [4, 6], [6, 8], [5, 6], [8, 8]]) == 9784\nassert solution.maxSumRangeQuery([152, 196, 408, 408, 465, 576, 819, 839, 856], [[6, 7], [3, 8], [8, 8], [5, 8], [0, 0], [4, 5], [1, 5]]) == 13093\nassert solution.maxSumRangeQuery([365], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 2555\nassert solution.maxSumRangeQuery([48, 410, 762, 907], [[0, 2], [3, 3], [3, 3], [0, 1]]) == 4206\nassert solution.maxSumRangeQuery([13, 165, 201, 411, 600, 700, 901, 988], [[3, 5], [5, 7], [1, 6]]) == 8143\nassert solution.maxSumRangeQuery([213, 671, 762], [[1, 2], [0, 2], [0, 2], [0, 2]]) == 6371\nassert solution.maxSumRangeQuery([189, 331, 813], [[1, 1], [1, 1], [0, 1], [1, 1], [0, 2], [0, 2], [0, 1]]) == 7393\nassert solution.maxSumRangeQuery([448, 492, 502, 667, 722, 850, 912, 930, 961], [[2, 3], [7, 7]]) == 2803\nassert solution.maxSumRangeQuery([26, 192, 210, 290, 560, 697], [[4, 5]]) == 1257\nassert solution.maxSumRangeQuery([190, 350, 435, 604, 775, 779], [[4, 5], [4, 4], [0, 4], [2, 4], [4, 5], [1, 5], [0, 2], [1, 2], [1, 2], [5, 5]]) == 15514\nassert solution.maxSumRangeQuery([9, 152, 474, 589, 630, 670, 799, 981], [[7, 7], [1, 6], [4, 7], [4, 7], [4, 7], [3, 4]]) == 15105\nassert solution.maxSumRangeQuery([75, 83, 335, 471, 671, 677, 705], [[6, 6], [2, 2], [2, 3], [5, 6], [2, 3]]) == 5282\nassert solution.maxSumRangeQuery([144, 251, 329, 515, 534, 577, 823, 887], [[6, 6], [7, 7], [6, 7], [0, 4], [7, 7], [6, 6], [6, 6], [4, 5]]) == 8944\nassert solution.maxSumRangeQuery([80, 99, 300, 409, 578, 608, 655, 872], [[6, 7], [5, 7], [0, 7], [2, 3], [4, 5], [6, 7], [4, 4], [0, 5], [3, 5]]) == 15273\nassert solution.maxSumRangeQuery([25, 131, 258, 334, 377, 585, 595, 664, 686, 863], [[5, 8], [7, 7], [9, 9], [1, 5], [7, 9], [1, 3], [9, 9], [2, 7]]) == 13242\nassert solution.maxSumRangeQuery([189, 243, 522, 539], [[1, 2], [1, 1], [0, 0], [3, 3], [2, 2], [1, 1], [2, 2], [3, 3], [1, 2], [3, 3]]) == 5162\nassert solution.maxSumRangeQuery([522, 991], [[0, 0], [1, 1], [0, 1], [0, 1], [0, 0], [1, 1], [1, 1], [0, 0], [1, 1], [1, 1]]) == 9547\nassert solution.maxSumRangeQuery([55, 248, 303, 328, 598, 881, 903, 952], [[0, 6], [0, 0], [7, 7], [1, 7], [6, 6]]) == 9488\nassert solution.maxSumRangeQuery([47, 109, 168, 170, 247, 299, 562, 765, 828], [[6, 8], [6, 7], [5, 8], [7, 8], [3, 4], [5, 5], [7, 8], [4, 7], [5, 5]]) == 12136\nassert solution.maxSumRangeQuery([225, 340, 391, 635], [[2, 2], [0, 0], [3, 3], [0, 3], [2, 2], [3, 3], [3, 3], [1, 1], [3, 3]]) == 5478\nassert solution.maxSumRangeQuery([235, 246, 289, 387, 589, 914], [[5, 5], [0, 4], [4, 5]]) == 4163\nassert solution.maxSumRangeQuery([17, 99, 328, 561, 718, 811, 900], [[3, 4], [2, 2], [2, 2], [3, 5], [6, 6], [6, 6], [0, 2], [2, 5], [5, 6], [6, 6]]) == 11781\nassert solution.maxSumRangeQuery([316, 375, 401], [[2, 2], [0, 2], [0, 0]]) == 1868",
  "inefficient_solution": "class Solution:\n    def maxSumRangeQuery(self, nums, requests):\n        n = len(nums)\n        d = [0] * n * 1000  # allocate extra memory\n        for l, r in requests:\n            d[l * 1000] += 1\n            if r + 1 < n * 1000:\n                d[r * 1000 + 1] -= 1\n        for i in range(1, n * 1000):\n            d[i] += d[i - 1]\n        nums.sort()\n        d.sort()\n        mod = 10**9 + 7\n        result = 0\n        for x in range(len(nums)):\n            for y in range(len(d)):\n                if d[y] > 0 and nums[x] <= x // 1000:  # inefficient indexing\n                    result += nums[x] * d[y]\n                    d[y] = 0  # mark as processed\n        return result % mod",
  "is_python": true
}