{
  "problem_idx": 1090,
  "task_name": "Largest Values From Labels",
  "markdown_description": "\nThere is a set of `n` items. You are given two integer arrays `values` and `labels` where the value and the label of the `ith` element are `values[i]` and `labels[i]` respectively. You are also given two integers `numWanted` and `useLimit`.\n\n\nChoose a subset `s` of the `n` elements such that:\n\n\n* The size of the subset `s` is **less than or equal to** `numWanted`.\n* There are **at most** `useLimit` items with the same label in `s`.\n\n\nThe **score** of a subset is the sum of the values in the subset.\n\n\nReturn *the maximum **score** of a subset* `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1\n**Output:** 9\n**Explanation:** The subset chosen is the first, third, and fifth items.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2\n**Output:** 12\n**Explanation:** The subset chosen is the first, second, and third items.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1\n**Output:** 16\n**Explanation:** The subset chosen is the first and fourth items.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == values.length == labels.length`\n* `1 <= n <= 2 * 104`\n* `0 <= values[i], labels[i] <= 2 * 104`\n* `1 <= numWanted, useLimit <= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def largestValsFromLabels(\n        self, values: List[int], labels: List[int], numWanted: int, useLimit: int\n    ) -> int:\n        ans = num = 0\n        cnt = Counter()\n        for v, l in sorted(zip(values, labels), reverse=True):\n            if cnt[l] < useLimit:\n                cnt[l] += 1\n                num += 1\n                ans += v\n                if num == numWanted:\n                    break\n        return ans\n",
  "test_case_generator": "\n# Test case generator\nimport random\nfrom collections import Counter\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values and labels lists\n    n = random.randint(1, 10)\n    values = random.sample(range(1, 21), n)\n    labels = random.choices(range(1, 4), k=n)\n    \n    # Generate random numWanted and useLimit\n    numWanted = random.randint(1, n)\n    useLimit = random.randint(1, n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestValsFromLabels(values, labels, numWanted, useLimit)\n\n    return values, labels, numWanted, useLimit, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        values, labels, numWanted, useLimit, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestValsFromLabels(values, labels, numWanted, useLimit) == expected_result\n        test_case = f\"assert solution.largestValsFromLabels({values}, {labels}, {numWanted}, {useLimit}) == {expected_result}\"\n        print(test_case)\n        test_case_generator_results.append(test_case)\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestValsFromLabels([6, 15, 17], [3, 3, 2], 2, 1) == 32\nassert solution.largestValsFromLabels([8, 9, 20], [1, 3, 2], 1, 3) == 20\nassert solution.largestValsFromLabels([19, 5, 10, 8], [1, 3, 1, 2], 4, 2) == 42\nassert solution.largestValsFromLabels([9, 19, 5, 1, 7, 2, 4, 16], [1, 2, 1, 1, 2, 3, 2, 1], 7, 5) == 62\nassert solution.largestValsFromLabels([6, 14], [1, 3], 1, 1) == 14\nassert solution.largestValsFromLabels([4, 8, 20, 12, 15, 13, 11, 5, 6], [3, 1, 2, 3, 1, 1, 1, 3, 1], 5, 6) == 71\nassert solution.largestValsFromLabels([12, 14, 4, 19, 18, 17, 10, 8, 20], [1, 1, 3, 3, 1, 1, 2, 2, 2], 6, 2) == 88\nassert solution.largestValsFromLabels([1, 8, 16, 19, 20, 14, 2, 18, 15, 11], [2, 1, 3, 1, 3, 2, 3, 1, 1, 1], 3, 9) == 57\nassert solution.largestValsFromLabels([12, 8], [1, 1], 1, 1) == 12\nassert solution.largestValsFromLabels([18], [2], 1, 1) == 18\nassert solution.largestValsFromLabels([3], [1], 1, 1) == 3\nassert solution.largestValsFromLabels([11, 5, 1, 18, 15, 9], [2, 3, 3, 3, 2, 2], 3, 4) == 44\nassert solution.largestValsFromLabels([11, 14], [3, 2], 2, 2) == 25\nassert solution.largestValsFromLabels([8, 16, 2, 17, 19], [2, 3, 2, 3, 1], 1, 1) == 19\nassert solution.largestValsFromLabels([20, 3, 13, 10], [3, 1, 3, 2], 2, 1) == 30\nassert solution.largestValsFromLabels([9, 5, 7, 20, 10, 19, 11], [2, 2, 3, 2, 2, 3, 1], 5, 3) == 69\nassert solution.largestValsFromLabels([1, 11, 17], [1, 2, 1], 2, 3) == 28\nassert solution.largestValsFromLabels([13, 1, 3, 17, 20], [2, 1, 2, 1, 2], 3, 5) == 50\nassert solution.largestValsFromLabels([17, 14], [1, 1], 1, 1) == 17\nassert solution.largestValsFromLabels([9, 1, 20, 8, 10, 12, 3, 4], [1, 2, 2, 2, 1, 3, 1, 1], 3, 5) == 42\nassert solution.largestValsFromLabels([13], [1], 1, 1) == 13\nassert solution.largestValsFromLabels([19, 7, 15, 14, 18], [3, 2, 1, 3, 3], 2, 2) == 37\nassert solution.largestValsFromLabels([12, 4, 16, 5, 3, 7, 18, 14], [3, 1, 2, 1, 1, 3, 3, 3], 3, 1) == 39\nassert solution.largestValsFromLabels([16, 15, 6, 20, 1, 12, 13, 18, 17, 2], [1, 1, 2, 2, 3, 1, 1, 1, 3, 2], 5, 8) == 86\nassert solution.largestValsFromLabels([14, 11], [2, 1], 1, 2) == 14\nassert solution.largestValsFromLabels([3, 15], [2, 3], 1, 2) == 15\nassert solution.largestValsFromLabels([17, 3, 15, 13, 11, 4, 5, 10, 16], [3, 3, 3, 3, 1, 1, 3, 1, 2], 5, 6) == 72\nassert solution.largestValsFromLabels([7, 3, 18, 14, 5, 8, 19], [3, 3, 1, 1, 3, 1, 2], 7, 4) == 74\nassert solution.largestValsFromLabels([16, 8], [1, 3], 1, 2) == 16\nassert solution.largestValsFromLabels([1, 2], [2, 2], 1, 2) == 2\nassert solution.largestValsFromLabels([19, 14, 16, 6, 8, 15, 1], [1, 1, 1, 3, 1, 3, 1], 5, 2) == 56\nassert solution.largestValsFromLabels([15, 14, 4], [2, 3, 3], 2, 3) == 29\nassert solution.largestValsFromLabels([14, 3, 5, 20, 9], [2, 3, 2, 3, 1], 5, 5) == 51\nassert solution.largestValsFromLabels([17, 4, 11, 19], [3, 3, 3, 2], 4, 2) == 47\nassert solution.largestValsFromLabels([19, 1, 18, 14], [1, 2, 2, 2], 2, 1) == 37\nassert solution.largestValsFromLabels([19, 4, 14], [3, 3, 1], 1, 1) == 19\nassert solution.largestValsFromLabels([5, 20, 4, 17, 2, 13], [1, 3, 1, 3, 2, 2], 4, 3) == 55\nassert solution.largestValsFromLabels([2, 14, 20, 19, 16], [1, 1, 3, 1, 3], 3, 5) == 55\nassert solution.largestValsFromLabels([8, 15], [3, 2], 1, 1) == 15\nassert solution.largestValsFromLabels([7, 2, 20], [2, 2, 1], 1, 1) == 20\nassert solution.largestValsFromLabels([2, 3, 12, 13, 14, 5], [1, 1, 1, 1, 3, 1], 5, 5) == 47\nassert solution.largestValsFromLabels([8, 16], [1, 1], 2, 1) == 16\nassert solution.largestValsFromLabels([15, 1, 18, 4, 11, 10, 2, 7, 20, 14], [2, 3, 3, 2, 1, 2, 1, 1, 1, 1], 6, 4) == 88\nassert solution.largestValsFromLabels([12, 3, 8, 7, 17, 14, 13, 16, 20, 11], [1, 2, 2, 2, 3, 3, 2, 2, 2, 1], 9, 1) == 49\nassert solution.largestValsFromLabels([20, 4, 2, 5, 8, 12, 14, 1], [1, 3, 1, 3, 1, 1, 1, 2], 3, 7) == 46\nassert solution.largestValsFromLabels([18, 12, 4, 16, 1], [1, 3, 3, 3, 3], 3, 2) == 46\nassert solution.largestValsFromLabels([11, 16, 2, 12], [3, 2, 1, 1], 1, 3) == 16\nassert solution.largestValsFromLabels([7, 8, 17, 19, 11, 4, 6], [3, 3, 2, 1, 1, 1, 3], 3, 4) == 47\nassert solution.largestValsFromLabels([3, 5, 7], [1, 3, 2], 3, 3) == 15\nassert solution.largestValsFromLabels([4, 11, 1, 9, 20, 8, 7, 12], [2, 2, 3, 2, 2, 1, 2, 1], 4, 7) == 52\nassert solution.largestValsFromLabels([5], [2], 1, 1) == 5\nassert solution.largestValsFromLabels([15, 10, 14, 20], [3, 3, 1, 2], 4, 1) == 49\nassert solution.largestValsFromLabels([13, 11, 8, 15, 17, 5, 20], [2, 1, 2, 1, 3, 3, 3], 5, 4) == 76\nassert solution.largestValsFromLabels([1, 16, 14, 7, 12, 19, 11, 20, 17], [1, 2, 3, 3, 2, 3, 1, 1, 3], 7, 7) == 109\nassert solution.largestValsFromLabels([20, 10, 6, 15], [3, 3, 3, 1], 1, 1) == 20\nassert solution.largestValsFromLabels([2, 13, 4, 7, 9, 15, 6], [3, 1, 2, 2, 3, 2, 2], 1, 6) == 15\nassert solution.largestValsFromLabels([1, 14, 17, 9, 20, 6, 3, 15, 2, 5], [3, 3, 1, 3, 2, 1, 3, 2, 3, 3], 7, 2) == 81\nassert solution.largestValsFromLabels([11, 3, 6, 19, 7], [1, 1, 2, 1, 1], 4, 2) == 36\nassert solution.largestValsFromLabels([7, 19, 13, 14, 9], [1, 2, 1, 3, 1], 1, 1) == 19\nassert solution.largestValsFromLabels([20, 6, 3, 7, 15, 2], [1, 3, 3, 3, 2, 2], 1, 1) == 20\nassert solution.largestValsFromLabels([12, 11, 16, 7, 6, 17, 1], [1, 3, 3, 2, 1, 2, 3], 1, 4) == 17\nassert solution.largestValsFromLabels([8, 14, 2, 10, 16, 18], [2, 1, 3, 1, 2, 2], 2, 5) == 34\nassert solution.largestValsFromLabels([2, 6, 19, 5, 13], [1, 1, 2, 1, 1], 2, 5) == 32\nassert solution.largestValsFromLabels([14, 3, 16, 5, 4, 1, 2, 12, 13], [1, 2, 3, 3, 2, 3, 3, 3, 3], 4, 5) == 55\nassert solution.largestValsFromLabels([14, 20, 16, 1, 17], [3, 3, 1, 2, 2], 5, 4) == 68\nassert solution.largestValsFromLabels([20, 1, 13, 16, 4, 17, 18, 7, 12], [2, 3, 1, 2, 1, 3, 3, 3, 2], 5, 3) == 84\nassert solution.largestValsFromLabels([16, 7, 4, 9, 8], [2, 3, 2, 2, 2], 5, 3) == 40\nassert solution.largestValsFromLabels([19, 5, 9, 18, 2, 10], [2, 1, 2, 1, 2, 1], 4, 4) == 56\nassert solution.largestValsFromLabels([16, 20, 5, 15], [3, 2, 2, 3], 1, 4) == 20\nassert solution.largestValsFromLabels([6, 1, 19, 14, 10, 11, 20, 7, 4], [3, 3, 2, 3, 2, 1, 3, 2, 3], 8, 8) == 91\nassert solution.largestValsFromLabels([2, 20, 13, 9, 18, 8, 14], [2, 3, 1, 2, 1, 1, 3], 4, 6) == 65\nassert solution.largestValsFromLabels([5, 4, 16, 11, 8, 7, 3], [1, 3, 1, 1, 2, 2, 1], 6, 3) == 51\nassert solution.largestValsFromLabels([7], [1], 1, 1) == 7\nassert solution.largestValsFromLabels([15, 14, 8], [2, 1, 3], 1, 2) == 15\nassert solution.largestValsFromLabels([15, 18, 4, 11], [3, 3, 3, 3], 3, 2) == 33\nassert solution.largestValsFromLabels([20, 2, 16, 6, 19, 5, 8, 3, 18, 1], [3, 3, 2, 1, 3, 3, 1, 2, 2, 2], 6, 9) == 87\nassert solution.largestValsFromLabels([20, 5, 4, 12, 16, 6, 7], [2, 2, 3, 1, 1, 2, 2], 5, 1) == 40\nassert solution.largestValsFromLabels([3, 17, 15, 7, 10, 1, 2, 19, 18], [1, 1, 2, 1, 2, 2, 1, 2, 2], 4, 2) == 61\nassert solution.largestValsFromLabels([2, 20, 5, 14, 4], [3, 2, 3, 3, 3], 1, 4) == 20\nassert solution.largestValsFromLabels([14, 15, 1, 9, 18, 20, 7, 5, 13], [3, 1, 2, 1, 1, 1, 1, 1, 2], 5, 1) == 47\nassert solution.largestValsFromLabels([17, 19, 9, 14, 20, 8, 18], [1, 2, 3, 3, 3, 1, 1], 1, 4) == 20\nassert solution.largestValsFromLabels([16, 18, 5, 20, 9], [3, 2, 2, 3, 3], 4, 1) == 38\nassert solution.largestValsFromLabels([10], [1], 1, 1) == 10\nassert solution.largestValsFromLabels([7, 5, 19, 15, 2, 11, 3, 6, 20, 8], [3, 1, 3, 3, 1, 3, 3, 1, 3, 1], 4, 6) == 65\nassert solution.largestValsFromLabels([18, 14, 9, 17, 4], [2, 2, 1, 2, 2], 5, 2) == 44\nassert solution.largestValsFromLabels([10, 11], [3, 1], 1, 2) == 11\nassert solution.largestValsFromLabels([5, 7, 14, 10, 12, 4], [3, 2, 3, 3, 1, 2], 5, 2) == 47\nassert solution.largestValsFromLabels([8, 11, 20, 9, 10, 17, 3, 12], [2, 1, 1, 2, 3, 3, 1, 1], 6, 7) == 79\nassert solution.largestValsFromLabels([3, 4, 9, 18, 1, 6, 12, 10, 2], [1, 2, 2, 1, 1, 1, 3, 2, 1], 5, 4) == 55\nassert solution.largestValsFromLabels([2, 9, 17, 18, 20, 8, 10], [2, 2, 2, 2, 1, 3, 2], 7, 3) == 73\nassert solution.largestValsFromLabels([14, 13, 20, 16, 8, 18, 12, 5], [1, 1, 3, 1, 1, 2, 3, 3], 6, 7) == 93\nassert solution.largestValsFromLabels([20], [1], 1, 1) == 20\nassert solution.largestValsFromLabels([9, 2, 12, 20, 10], [1, 1, 2, 3, 2], 3, 2) == 42\nassert solution.largestValsFromLabels([3, 11, 2, 12, 14, 9], [3, 2, 1, 2, 2, 3], 2, 2) == 26\nassert solution.largestValsFromLabels([18, 15, 16, 4, 3, 20, 6, 8, 17, 12], [1, 2, 1, 2, 3, 3, 1, 2, 3, 3], 10, 4) == 119\nassert solution.largestValsFromLabels([16, 19, 15, 7, 11, 4, 8, 5, 1], [2, 1, 1, 2, 3, 3, 2, 3, 2], 5, 2) == 69\nassert solution.largestValsFromLabels([12, 8, 10, 6, 15, 4, 3], [1, 3, 1, 1, 3, 1, 2], 1, 6) == 15\nassert solution.largestValsFromLabels([16, 7, 11], [2, 3, 2], 2, 1) == 23\nassert solution.largestValsFromLabels([1, 18, 9, 11], [1, 3, 3, 1], 2, 4) == 29\nassert solution.largestValsFromLabels([4, 7], [2, 3], 2, 1) == 11",
  "inefficient_solution": "class Solution:\n    def largestValsFromLabels(\n        self, values: List[int], labels: List[int], numWanted: int, useLimit: int\n    ) -> int:\n        ans = num = 0\n        cnt = {}\n        value_labels = [(v, l) for v, l in zip(values, labels)]\n        value_labels.sort(reverse=True)\n        for v, l in value_labels:\n            if l not in cnt or cnt[l] < useLimit:\n                cnt[l] = cnt.get(l, 0) + 1\n                num += 1\n                ans += v\n                if num == numWanted:\n                    break\n        return ans",
  "is_python": true
}