{
  "problem_idx": 87,
  "task_name": "Scramble String",
  "markdown_description": "\nWe can scramble a string s to get a string t using the following algorithm:\n\n\n1. If the length of the string is 1, stop.\n2. If the length of the string is > 1, do the following:\n\t* Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.\n\t* **Randomly**\u00a0decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.\n\t* Apply step 1 recursively on each of the two substrings `x` and `y`.\n\n\nGiven two strings `s1` and `s2` of **the same length**, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"great\", s2 = \"rgeat\"\n**Output:** true\n**Explanation:** One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\nAs one possible scenario led s1 to be scrambled to s2, we return true.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"abcde\", s2 = \"caebd\"\n**Output:** false\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s1 = \"a\", s2 = \"a\"\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `s1.length == s2.length`\n* `1 <= s1.length <= 30`\n* `s1` and `s2` consist of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        @cache\n        def dfs(i: int, j: int, k: int) -> bool:\n            if k == 1:\n                return s1[i] == s2[j]\n            for h in range(1, k):\n                if dfs(i, j, h) and dfs(i + h, j + h, k - h):\n                    return True\n                if dfs(i + h, j, k - h) and dfs(i, j + k - h, h):\n                    return True\n            return False\n\n        return dfs(0, 0, len(s1))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        @cache\n        def dfs(i: int, j: int, k: int) -> bool:\n            if k == 1:\n                return s1[i] == s2[j]\n            for h in range(1, k):\n                if dfs(i, j, h) and dfs(i + h, j + h, k - h):\n                    return True\n                if dfs(i + h, j, k - h) and dfs(i, j + k - h, h):\n                    return True\n            return False\n\n        return dfs(0, 0, len(s1))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    s1_length = random.randint(1, 6)  # We limit the length to 6 for small test cases\n    s1 = ''.join(random.choices(string.ascii_lowercase, k=s1_length))\n    s2 = ''.join(random.choices(string.ascii_lowercase, k=s1_length))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isScramble(s1, s2)\n\n    return s1, s2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s1, s2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isScramble(s1, s2) == expected_result\n        print(f\"assert solution.isScramble(\\\"{s1}\\\", \\\"{s2}\\\") == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isScramble(\\\"{s1}\\\", \\\"{s2}\\\") == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    import string\n    from functools import cache\n\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.isScramble(\"nr\", \"cl\") == False\nassert solution.isScramble(\"bcvrk\", \"uvgqb\") == False\nassert solution.isScramble(\"d\", \"h\") == False\nassert solution.isScramble(\"igoqd\", \"qvgzc\") == False\nassert solution.isScramble(\"gv\", \"cp\") == False\nassert solution.isScramble(\"wwcgad\", \"ojudyf\") == False\nassert solution.isScramble(\"nuckow\", \"wnwmbm\") == False\nassert solution.isScramble(\"tsy\", \"uot\") == False\nassert solution.isScramble(\"qouqp\", \"ltoht\") == False\nassert solution.isScramble(\"qhghe\", \"agmsy\") == False\nassert solution.isScramble(\"hu\", \"oi\") == False\nassert solution.isScramble(\"prfqp\", \"cssic\") == False\nassert solution.isScramble(\"yitlsu\", \"qynzxf\") == False\nassert solution.isScramble(\"v\", \"k\") == False\nassert solution.isScramble(\"xyzjnj\", \"hjixbh\") == False\nassert solution.isScramble(\"sw\", \"mx\") == False\nassert solution.isScramble(\"zgyc\", \"upui\") == False\nassert solution.isScramble(\"kezj\", \"lbvz\") == False\nassert solution.isScramble(\"ll\", \"ec\") == False\nassert solution.isScramble(\"edjnyp\", \"ziphnf\") == False\nassert solution.isScramble(\"ovtbq\", \"itfvg\") == False\nassert solution.isScramble(\"pwr\", \"fhc\") == False\nassert solution.isScramble(\"jk\", \"su\") == False\nassert solution.isScramble(\"pegfvx\", \"btcdek\") == False\nassert solution.isScramble(\"sn\", \"kj\") == False\nassert solution.isScramble(\"tkzd\", \"wnwu\") == False\nassert solution.isScramble(\"g\", \"d\") == False\nassert solution.isScramble(\"we\", \"el\") == False\nassert solution.isScramble(\"dmwf\", \"adbo\") == False\nassert solution.isScramble(\"y\", \"o\") == False\nassert solution.isScramble(\"xtu\", \"ayj\") == False\nassert solution.isScramble(\"ijw\", \"qeu\") == False\nassert solution.isScramble(\"xciw\", \"tijr\") == False\nassert solution.isScramble(\"con\", \"tie\") == False\nassert solution.isScramble(\"j\", \"r\") == False\nassert solution.isScramble(\"iupipt\", \"ofsfdp\") == False\nassert solution.isScramble(\"i\", \"m\") == False\nassert solution.isScramble(\"wa\", \"is\") == False\nassert solution.isScramble(\"mq\", \"so\") == False\nassert solution.isScramble(\"io\", \"pj\") == False\nassert solution.isScramble(\"vknq\", \"kxzc\") == False\nassert solution.isScramble(\"csvbi\", \"owlkx\") == False\nassert solution.isScramble(\"wslv\", \"mwar\") == False\nassert solution.isScramble(\"ttt\", \"gxh\") == False\nassert solution.isScramble(\"gdum\", \"gwfa\") == False\nassert solution.isScramble(\"k\", \"j\") == False\nassert solution.isScramble(\"wgfx\", \"tbuc\") == False\nassert solution.isScramble(\"nca\", \"pwr\") == False\nassert solution.isScramble(\"z\", \"u\") == False\nassert solution.isScramble(\"zpii\", \"goqg\") == False\nassert solution.isScramble(\"jfu\", \"qsx\") == False\nassert solution.isScramble(\"mrc\", \"ghw\") == False\nassert solution.isScramble(\"uwpbqk\", \"nvnuij\") == False\nassert solution.isScramble(\"n\", \"l\") == False\nassert solution.isScramble(\"vcb\", \"nvn\") == False\nassert solution.isScramble(\"z\", \"n\") == False\nassert solution.isScramble(\"lnrxry\", \"kunjwy\") == False\nassert solution.isScramble(\"wgx\", \"vnx\") == False\nassert solution.isScramble(\"lmso\", \"wlok\") == False\nassert solution.isScramble(\"wmofjl\", \"ekgjtr\") == False\nassert solution.isScramble(\"uwp\", \"bsg\") == False\nassert solution.isScramble(\"pqwh\", \"sxzy\") == False\nassert solution.isScramble(\"wkqb\", \"ezgg\") == False\nassert solution.isScramble(\"rf\", \"sj\") == False\nassert solution.isScramble(\"kgqm\", \"tywb\") == False\nassert solution.isScramble(\"icltgz\", \"aocedl\") == False\nassert solution.isScramble(\"yfdyv\", \"rxjyd\") == False\nassert solution.isScramble(\"wr\", \"ft\") == False\nassert solution.isScramble(\"sau\", \"ogn\") == False\nassert solution.isScramble(\"bt\", \"gw\") == False\nassert solution.isScramble(\"yb\", \"it\") == False\nassert solution.isScramble(\"w\", \"n\") == False\nassert solution.isScramble(\"asa\", \"nvm\") == False\nassert solution.isScramble(\"aogh\", \"qkms\") == False\nassert solution.isScramble(\"i\", \"y\") == False\nassert solution.isScramble(\"jp\", \"kc\") == False\nassert solution.isScramble(\"qy\", \"zi\") == False\nassert solution.isScramble(\"pjvm\", \"prle\") == False\nassert solution.isScramble(\"ijh\", \"cyt\") == False\nassert solution.isScramble(\"g\", \"k\") == False\nassert solution.isScramble(\"we\", \"if\") == False\nassert solution.isScramble(\"v\", \"n\") == False\nassert solution.isScramble(\"aolex\", \"htyvg\") == False\nassert solution.isScramble(\"p\", \"v\") == False\nassert solution.isScramble(\"y\", \"g\") == False\nassert solution.isScramble(\"zgcmv\", \"wtwhd\") == False\nassert solution.isScramble(\"yb\", \"nf\") == False\nassert solution.isScramble(\"fct\", \"doq\") == False\nassert solution.isScramble(\"npe\", \"qum\") == False\nassert solution.isScramble(\"un\", \"kw\") == False\nassert solution.isScramble(\"kpwcl\", \"axsmk\") == False\nassert solution.isScramble(\"fl\", \"mk\") == False\nassert solution.isScramble(\"m\", \"v\") == False\nassert solution.isScramble(\"kf\", \"ug\") == False\nassert solution.isScramble(\"z\", \"l\") == False\nassert solution.isScramble(\"afcye\", \"igfkv\") == False\nassert solution.isScramble(\"s\", \"v\") == False\nassert solution.isScramble(\"z\", \"e\") == False\nassert solution.isScramble(\"gm\", \"lg\") == False\nassert solution.isScramble(\"ovfjjb\", \"turtrq\") == False",
  "inefficient_solution": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        def dfs(i: int, j: int, k: int) -> bool:\n            if k == 1:\n                return s1[i] == s2[j]\n            for h in range(1, k):\n                if dfs(i, j, h) and dfs(i + h, j + h, k - h):\n                    return True\n                if dfs(i + h, j, k - h) and dfs(i, j + k - h, h):\n                    return True\n            return False\n\n        def helper(s1: str, s2: str) -> bool:\n            if s1 == s2:\n                return True\n            if len(s1) != len(s2):\n                return False\n            s1_list = [s1[i:i+10] for i in range(0, len(s1), 10)]\n            s2_list = [s2[i:i+10] for i in range(0, len(s2), 10)]\n            s1_list += [s1[i:i+1] for i in range(0, len(s1), 1)]\n            s2_list += [s2[i:i+1] for i in range(0, len(s2), 1)]\n            for s1_sub in s1_list:\n                for s2_sub in s2_list:\n                    if dfs(0, 0, len(s1_sub)):\n                        return True\n            return False\n\n        return helper(s1, s2)",
  "is_python": true
}