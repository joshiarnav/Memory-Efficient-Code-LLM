{
  "problem_idx": 321,
  "task_name": "Create Maximum Number",
  "markdown_description": "\nYou are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`.\n\n\nCreate the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved.\n\n\nReturn an array of the `k` digits representing the answer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\n**Output:** [9,8,6,5,3]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [6,7], nums2 = [6,0,4], k = 5\n**Output:** [6,7,6,0,4]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [3,9], nums2 = [8,9], k = 3\n**Output:** [9,8,9]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == nums1.length`\n* `n == nums2.length`\n* `1 <= m, n <= 500`\n* `0 <= nums1[i], nums2[i] <= 9`\n* `1 <= k <= m + n`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        def f(nums: List[int], k: int) -> List[int]:\n            n = len(nums)\n            stk = [0] * k\n            top = -1\n            remain = n - k\n            for x in nums:\n                while top >= 0 and stk[top] < x and remain > 0:\n                    top -= 1\n                    remain -= 1\n                if top + 1 < k:\n                    top += 1\n                    stk[top] = x\n                else:\n                    remain -= 1\n            return stk\n\n        def compare(nums1: List[int], nums2: List[int], i: int, j: int) -> bool:\n            if i >= len(nums1):\n                return False\n            if j >= len(nums2):\n                return True\n            if nums1[i] > nums2[j]:\n                return True\n            if nums1[i] < nums2[j]:\n                return False\n            return compare(nums1, nums2, i + 1, j + 1)\n\n        def merge(nums1: List[int], nums2: List[int]) -> List[int]:\n            m, n = len(nums1), len(nums2)\n            i = j = 0\n            ans = [0] * (m + n)\n            for k in range(m + n):\n                if compare(nums1, nums2, i, j):\n                    ans[k] = nums1[i]\n                    i += 1\n                else:\n                    ans[k] = nums2[j]\n                    j += 1\n            return ans\n\n        m, n = len(nums1), len(nums2)\n        l, r = max(0, k - n), min(k, m)\n        ans = [0] * k\n        for x in range(l, r + 1):\n            arr1 = f(nums1, x)\n            arr2 = f(nums2, k - x)\n            arr = merge(arr1, arr2)\n            if ans < arr:\n                ans = arr\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        def f(nums: List[int], k: int) -> List[int]:\n            n = len(nums)\n            stk = [0] * k\n            top = -1\n            remain = n - k\n            for x in nums:\n                while top >= 0 and stk[top] < x and remain > 0:\n                    top -= 1\n                    remain -= 1\n                if top + 1 < k:\n                    top += 1\n                    stk[top] = x\n                else:\n                    remain -= 1\n            return stk\n\n        def compare(nums1: List[int], nums2: List[int], i: int, j: int) -> bool:\n            if i >= len(nums1):\n                return False\n            if j >= len(nums2):\n                return True\n            if nums1[i] > nums2[j]:\n                return True\n            if nums1[i] < nums2[j]:\n                return False\n            return compare(nums1, nums2, i + 1, j + 1)\n\n        def merge(nums1: List[int], nums2: List[int]) -> List[int]:\n            m, n = len(nums1), len(nums2)\n            i = j = 0\n            ans = [0] * (m + n)\n            for k in range(m + n):\n                if compare(nums1, nums2, i, j):\n                    ans[k] = nums1[i]\n                    i += 1\n                else:\n                    ans[k] = nums2[j]\n                    j += 1\n            return ans\n\n        m, n = len(nums1), len(nums2)\n        l, r = max(0, k - n), min(k, m)\n        ans = [0] * k\n        for x in range(l, r + 1):\n            arr1 = f(nums1, x)\n            arr2 = f(nums2, k - x)\n            arr = merge(arr1, arr2)\n            if ans < arr:\n                ans = arr\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random nums1 list\n    nums1 = random.sample(range(0, 10), random.randint(1, 10))\n    \n    # Generate random nums2 list\n    nums2 = random.sample(range(0, 10), random.randint(1, 10))\n    \n    # Generate a random k value\n    k = random.randint(1, len(nums1) + len(nums2))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxNumber(nums1, nums2, k)\n\n    return nums1, nums2, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxNumber(nums1, nums2, k) == expected_result\n        print(f\"assert solution.maxNumber({nums1}, {nums2}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxNumber({nums1}, {nums2}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxNumber([6, 0, 4, 7], [6, 8], 5) == [8, 6, 0, 4, 7]\nassert solution.maxNumber([8, 3, 9, 7, 6, 0, 5, 2, 4, 1], [0, 4, 9, 7, 6, 1], 7) == [9, 9, 7, 7, 6, 6, 5]\nassert solution.maxNumber([9, 5, 3, 7, 8, 2, 4], [1, 5, 6, 2, 9, 8, 7], 7) == [9, 9, 8, 8, 7, 2, 4]\nassert solution.maxNumber([5], [9, 2, 7, 0, 8, 1, 5, 6, 3, 4], 2) == [9, 8]\nassert solution.maxNumber([5, 4, 1, 6, 7, 0, 9], [6, 8, 7, 0, 4, 5, 9, 3, 2], 10) == [9, 6, 8, 7, 0, 4, 5, 9, 3, 2]\nassert solution.maxNumber([3, 8, 5, 1, 0], [4, 0, 2, 1], 3) == [8, 5, 4]\nassert solution.maxNumber([0, 8, 3, 2, 5], [4, 1], 1) == [8]\nassert solution.maxNumber([0, 3, 5, 8, 7, 1], [8, 7, 2, 9, 5, 6, 4, 0, 3, 1], 5) == [9, 8, 7, 6, 4]\nassert solution.maxNumber([0, 3, 8, 7], [1], 2) == [8, 7]\nassert solution.maxNumber([7, 9, 6, 2, 5, 1, 0, 4], [1, 8, 0], 5) == [9, 8, 6, 5, 4]\nassert solution.maxNumber([1, 0, 2], [9, 7, 5, 1, 8, 3, 6, 2], 7) == [9, 8, 6, 2, 1, 0, 2]\nassert solution.maxNumber([6, 8, 4, 9, 7, 3, 2, 0, 5], [9, 2, 0, 1, 7, 5, 3, 8], 17) == [9, 6, 8, 4, 9, 7, 3, 2, 2, 0, 5, 0, 1, 7, 5, 3, 8]\nassert solution.maxNumber([5, 8, 6], [4, 0, 3, 6, 7, 5, 2, 9, 1, 8], 6) == [9, 5, 8, 6, 1, 8]\nassert solution.maxNumber([6, 1, 7], [2, 6], 5) == [6, 2, 6, 1, 7]\nassert solution.maxNumber([0, 2, 7, 6, 8, 5], [6, 0, 8, 3, 4, 2, 5, 7, 1, 9], 4) == [9, 7, 8, 5]\nassert solution.maxNumber([9, 3, 6, 8, 4, 1], [1, 2, 4, 3], 8) == [9, 8, 4, 1, 2, 4, 3, 1]\nassert solution.maxNumber([6, 1, 3, 5], [8, 7, 3], 4) == [8, 7, 6, 5]\nassert solution.maxNumber([6, 2, 9, 0, 7, 8, 3], [0, 4, 6, 9, 7, 3], 7) == [9, 9, 7, 8, 7, 3, 3]\nassert solution.maxNumber([9, 5, 3, 1, 8], [7, 4, 8, 9, 2, 1], 2) == [9, 9]\nassert solution.maxNumber([4, 3, 8, 5], [2, 0], 4) == [8, 5, 2, 0]\nassert solution.maxNumber([2, 3, 4, 5, 1, 7, 9, 6, 0], [7, 4, 2, 3, 1, 5, 8, 6, 9, 0], 4) == [9, 9, 6, 0]\nassert solution.maxNumber([0, 7, 8, 6], [5, 3, 8], 6) == [7, 8, 6, 5, 3, 8]\nassert solution.maxNumber([9, 2, 5, 4, 6, 1, 7, 8, 3, 0], [0, 3], 1) == [9]\nassert solution.maxNumber([6, 9, 4], [5, 2, 9, 4, 0, 3, 8, 6], 8) == [9, 9, 4, 4, 0, 3, 8, 6]\nassert solution.maxNumber([0, 3, 8, 4, 2, 6, 9, 5], [3, 4, 2, 8, 0, 5, 1, 9], 12) == [8, 6, 9, 5, 3, 4, 2, 8, 0, 5, 1, 9]\nassert solution.maxNumber([4, 7, 9, 2, 0, 1, 3], [4, 0, 8, 7, 3, 9, 1, 6, 2], 6) == [9, 9, 6, 2, 3, 2]\nassert solution.maxNumber([2, 7, 3], [7, 2, 6, 8], 7) == [7, 2, 7, 3, 2, 6, 8]\nassert solution.maxNumber([1, 0, 5, 8, 6, 3, 4], [7, 5, 2, 0], 1) == [8]\nassert solution.maxNumber([6, 7, 1], [7, 1, 3, 4], 1) == [7]\nassert solution.maxNumber([3, 1, 8], [5, 1, 9, 7, 3], 2) == [9, 8]\nassert solution.maxNumber([4, 2, 1, 7], [3, 5, 8, 1, 6], 6) == [8, 6, 4, 2, 1, 7]\nassert solution.maxNumber([7, 0, 1, 3, 5, 6, 9, 2, 4, 8], [1, 3, 6, 8, 0, 9, 7], 6) == [9, 9, 7, 2, 4, 8]\nassert solution.maxNumber([7, 3, 1, 2, 9, 5, 6, 4, 8, 0], [8, 4, 5, 1], 7) == [9, 8, 8, 4, 5, 1, 0]\nassert solution.maxNumber([6, 0], [4, 6, 3, 1, 8, 7, 9, 0, 5, 2], 5) == [9, 6, 5, 2, 0]\nassert solution.maxNumber([1, 3, 2, 0, 5, 8, 6, 7, 9], [4, 1, 5, 9, 3, 0, 2, 7], 11) == [9, 7, 1, 3, 2, 0, 5, 8, 6, 7, 9]\nassert solution.maxNumber([0], [7, 0, 6, 9, 2, 8, 1, 3, 4, 5], 9) == [7, 9, 2, 8, 1, 3, 4, 5, 0]\nassert solution.maxNumber([9, 7, 5, 6, 1, 3, 8, 2, 4, 0], [5, 6, 1, 7, 3], 7) == [9, 8, 7, 3, 2, 4, 0]\nassert solution.maxNumber([2], [8, 1, 4, 0, 9, 6, 7, 3, 5, 2], 9) == [8, 4, 9, 6, 7, 3, 5, 2, 2]\nassert solution.maxNumber([2, 9, 4, 0, 3, 8, 1, 7, 5], [9, 8, 6, 0], 3) == [9, 9, 8]\nassert solution.maxNumber([7, 9, 6, 5, 3], [8, 1, 3, 0, 2], 1) == [9]\nassert solution.maxNumber([6, 5, 8, 7, 2, 4, 3, 1, 9], [2, 1, 5, 4, 6, 8, 9], 8) == [9, 8, 7, 2, 4, 3, 1, 9]\nassert solution.maxNumber([2, 3, 7, 4, 8, 0, 6, 1], [7, 0, 8, 1, 3, 2, 4, 5], 3) == [8, 8, 6]\nassert solution.maxNumber([6], [0, 5, 1, 4, 3, 8, 6, 2, 9], 5) == [8, 6, 6, 2, 9]\nassert solution.maxNumber([5, 2], [2], 3) == [5, 2, 2]\nassert solution.maxNumber([0], [3, 8, 5, 0, 4, 6, 7, 1], 8) == [8, 5, 0, 4, 6, 7, 1, 0]\nassert solution.maxNumber([6, 8, 2, 5, 9, 1, 4, 0, 3, 7], [7], 3) == [9, 7, 7]\nassert solution.maxNumber([2, 4, 6, 3, 1], [5, 3], 1) == [6]\nassert solution.maxNumber([3, 7, 6, 5], [1, 8, 3, 4, 2, 6, 9], 3) == [9, 7, 6]\nassert solution.maxNumber([6, 0, 1, 4, 9, 2], [8, 6, 9, 0, 5, 2], 9) == [9, 6, 5, 2, 0, 1, 4, 9, 2]\nassert solution.maxNumber([4], [8, 6, 7, 3, 5, 9, 2, 4], 6) == [8, 7, 9, 4, 2, 4]\nassert solution.maxNumber([6, 7, 8, 0, 4, 1, 3, 5], [1, 9, 3], 1) == [9]\nassert solution.maxNumber([8, 4, 6, 0, 9, 5, 3, 2, 1, 7], [1], 2) == [9, 7]\nassert solution.maxNumber([5, 0, 6], [8, 0, 3, 9], 5) == [8, 9, 5, 0, 6]\nassert solution.maxNumber([7, 3, 4, 6, 9, 8, 1, 2], [8, 6, 2, 4, 9, 5, 0, 7], 7) == [9, 9, 8, 5, 7, 1, 2]\nassert solution.maxNumber([9, 6, 5, 7], [6, 9, 8], 4) == [9, 9, 8, 7]\nassert solution.maxNumber([2, 5, 6, 0, 8, 4, 3, 7, 1], [0, 8], 1) == [8]\nassert solution.maxNumber([8, 0, 2], [5, 8, 7, 6, 3, 1, 4], 4) == [8, 8, 7, 6]\nassert solution.maxNumber([0, 4, 5, 7, 6, 2, 9, 3, 8], [7, 4, 6, 5, 3, 0, 1, 8, 2, 9], 1) == [9]\nassert solution.maxNumber([7, 3, 8, 4, 0, 2], [5, 1, 3, 7, 2, 0, 9], 10) == [8, 5, 4, 3, 7, 2, 0, 9, 0, 2]\nassert solution.maxNumber([1, 6, 5, 2, 0, 8, 4], [3, 4, 2], 9) == [6, 5, 3, 4, 2, 2, 0, 8, 4]\nassert solution.maxNumber([9, 2, 4, 0], [6, 2, 1], 3) == [9, 6, 4]\nassert solution.maxNumber([7, 2, 9, 3, 4, 6, 5, 0, 1], [2, 7, 5, 4, 9, 1, 3, 6, 0], 5) == [9, 9, 6, 6, 5]\nassert solution.maxNumber([3, 4], [5], 1) == [5]\nassert solution.maxNumber([3, 5, 0, 2, 6, 4, 8, 7, 9, 1], [1, 3, 6, 9, 7, 5, 2, 8, 0, 4], 19) == [5, 1, 3, 6, 9, 7, 5, 2, 8, 0, 4, 0, 2, 6, 4, 8, 7, 9, 1]\nassert solution.maxNumber([4, 1, 9, 8, 0], [5, 3, 7, 4, 9, 1, 0, 8, 2], 5) == [9, 9, 8, 8, 2]\nassert solution.maxNumber([1, 5], [4, 6, 8, 1, 9, 0, 5, 7, 3, 2], 12) == [4, 6, 8, 1, 9, 1, 5, 0, 5, 7, 3, 2]\nassert solution.maxNumber([1, 4, 0, 5, 6], [7, 1, 6], 8) == [7, 1, 6, 1, 4, 0, 5, 6]\nassert solution.maxNumber([6, 7, 4, 5, 3, 8, 9, 1], [4, 5, 2, 6, 7], 1) == [9]\nassert solution.maxNumber([4, 7, 0], [3], 2) == [7, 3]\nassert solution.maxNumber([6, 7, 4, 8, 3, 5, 2], [7], 7) == [7, 7, 4, 8, 3, 5, 2]\nassert solution.maxNumber([7, 0, 2, 8, 3, 4], [4, 8], 4) == [8, 8, 3, 4]\nassert solution.maxNumber([2, 3, 5, 4], [9, 5, 2], 1) == [9]\nassert solution.maxNumber([9, 1, 3, 0, 8, 7, 6, 5, 4, 2], [5, 6, 2, 9, 0, 1, 3, 7, 8], 10) == [9, 9, 8, 7, 8, 7, 6, 5, 4, 2]\nassert solution.maxNumber([8, 6, 9, 7, 3, 4, 1, 0, 5, 2], [6, 7, 4], 13) == [8, 6, 9, 7, 6, 7, 4, 3, 4, 1, 0, 5, 2]\nassert solution.maxNumber([9, 1, 5, 0, 6, 7], [7, 4, 6, 0, 1, 8, 2, 5, 9, 3], 13) == [9, 7, 6, 8, 2, 5, 9, 3, 1, 5, 0, 6, 7]\nassert solution.maxNumber([4], [2, 0, 7], 2) == [7, 4]\nassert solution.maxNumber([9, 8], [8, 7, 1, 3, 0, 4, 6, 5], 10) == [9, 8, 8, 7, 1, 3, 0, 4, 6, 5]\nassert solution.maxNumber([4, 7, 2, 1], [1], 3) == [7, 2, 1]\nassert solution.maxNumber([9], [4], 1) == [9]\nassert solution.maxNumber([1], [2, 1, 8, 4, 9], 2) == [9, 1]\nassert solution.maxNumber([7, 2, 8, 9, 6, 1], [4, 5, 0, 6, 3, 7, 1, 2, 8], 6) == [9, 7, 6, 2, 8, 1]\nassert solution.maxNumber([0, 4, 7, 6, 9, 5, 8, 3], [7], 5) == [9, 7, 5, 8, 3]\nassert solution.maxNumber([8, 3, 7, 0, 9, 4, 6, 2, 5], [6, 7, 5, 0, 9, 4, 1, 2, 8, 3], 5) == [9, 9, 8, 6, 5]\nassert solution.maxNumber([5, 3, 1, 0], [1, 0, 6, 2, 3, 5, 7, 8, 9], 10) == [6, 5, 3, 5, 7, 8, 9, 3, 1, 0]\nassert solution.maxNumber([0, 1, 8, 5, 7, 3], [0, 5, 1], 9) == [0, 5, 1, 0, 1, 8, 5, 7, 3]\nassert solution.maxNumber([5, 1, 7, 3, 4, 2, 9], [5, 9, 6, 2, 8], 2) == [9, 9]\nassert solution.maxNumber([3, 9], [5], 2) == [9, 5]\nassert solution.maxNumber([9, 1, 6, 5, 8, 2, 4, 0, 3, 7], [6, 3, 7, 4], 9) == [9, 8, 7, 4, 2, 4, 0, 3, 7]\nassert solution.maxNumber([3, 8, 4, 2, 1, 5, 0], [5, 0, 9, 6, 4, 3, 8, 2, 1], 16) == [5, 3, 8, 4, 2, 1, 5, 0, 9, 6, 4, 3, 8, 2, 1, 0]\nassert solution.maxNumber([4], [4], 1) == [4]\nassert solution.maxNumber([0, 6, 9, 5, 1, 3], [3, 5, 9, 6, 4, 2, 0, 7], 14) == [3, 5, 9, 6, 4, 2, 0, 7, 0, 6, 9, 5, 1, 3]\nassert solution.maxNumber([3], [5, 3, 1], 1) == [5]\nassert solution.maxNumber([6, 0, 7, 4], [7], 3) == [7, 7, 4]\nassert solution.maxNumber([6, 4, 2, 8], [4], 3) == [6, 8, 4]\nassert solution.maxNumber([3, 4, 7, 8, 1, 2, 0, 9, 5], [5, 6, 9], 5) == [9, 8, 2, 9, 5]\nassert solution.maxNumber([5], [8, 9, 3], 2) == [9, 5]\nassert solution.maxNumber([1, 3, 9, 4, 0, 5], [1, 0, 3, 7, 5, 9], 3) == [9, 9, 5]\nassert solution.maxNumber([2], [9, 4, 7, 8, 3, 0, 2, 6, 5, 1], 2) == [9, 8]\nassert solution.maxNumber([3, 6, 2], [7, 9, 3, 1, 6, 0], 1) == [9]\nassert solution.maxNumber([3], [9], 1) == [9]",
  "inefficient_solution": "class Solution:\n    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:\n        def f(nums: List[int], k: int) -> List[int]:\n            n = len(nums)\n            stk = [0] * (2 * k)\n            top = -1\n            remain = n - k\n            for x in nums:\n                while top >= 0 and stk[top] < x and remain > 0:\n                    top -= 1\n                    remain -= 1\n                if top + 1 < 2 * k:\n                    top += 1\n                    stk[top] = x\n                else:\n                    remain -= 1\n            return stk\n\n        def compare(nums1: List[int], nums2: List[int], i: int, j: int) -> bool:\n            if i >= len(nums1):\n                return False\n            if j >= len(nums2):\n                return True\n            if nums1[i] > nums2[j]:\n                return True\n            if nums1[i] < nums2[j]:\n                return False\n            return compare(nums1, nums2, i + 1, j + 1)\n\n        def merge(nums1: List[int], nums2: List[int]) -> List[int]:\n            m, n = len(nums1), len(nums2)\n            i = j = 0\n            ans = [0] * (m + n)\n            for k in range(m + n):\n                if compare(nums1, nums2, i, j):\n                    ans[k] = nums1[i]\n                    i += 1\n                else:\n                    ans[k] = nums2[j]\n                    j += 1\n            return ans\n\n        m, n = len(nums1), len(nums2)\n        l, r = max(0, k - n), min(k, m)\n        ans = [0] * (2 * k)\n        for x in range(l, r + 1):\n            arr1 = [0] * (2 * k)\n            arr2 = [0] * (2 * k)\n            for y in range(2 * k):\n                arr1[y] = f(nums1, x)[y % x]\n            for y in range(2 * k):\n                arr2[y] = f(nums2, k - x)[y % (k - x)]\n            arr = merge(arr1, arr2)\n            if ans < arr:\n                ans = arr\n        return ans",
  "is_python": true
}