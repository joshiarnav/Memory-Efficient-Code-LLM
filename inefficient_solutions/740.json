{
  "problem_idx": 740,
  "task_name": "Delete and Earn",
  "markdown_description": "\nYou are given an integer array `nums`. You want to maximize the number of points you get by performing the following operation any number of times:\n\n\n* Pick any `nums[i]` and delete it to earn `nums[i]` points. Afterwards, you must delete **every** element equal to `nums[i] - 1` and **every** element equal to `nums[i] + 1`.\n\n\nReturn *the **maximum number of points** you can earn by applying the above operation some number of times*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,4,2]\n**Output:** 6\n**Explanation:** You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,2,3,3,3,4]\n**Output:** 9\n**Explanation:** You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 104`\n* `1 <= nums[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        mx = -inf\n        for num in nums:\n            mx = max(mx, num)\n        total = [0] * (mx + 1)\n        for num in nums:\n            total[num] += num\n        first = total[0]\n        second = max(total[0], total[1])\n        for i in range(2, mx + 1):\n            cur = max(first + total[i], second)\n            first = second\n            second = cur\n        return second\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        mx = -float('inf')\n        for num in nums:\n            mx = max(mx, num)\n\n        total = [0] * (mx + 1)\n        for num in nums:\n            total[num] += num\n\n        first = total[0]\n        second = max(total[0], total[1])\n\n        for i in range(2, mx + 1):\n            cur = max(first + total[i], second)\n            first = second\n            second = cur\n\n        return second\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 10001), random.randint(1, 20))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.deleteAndEarn(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.deleteAndEarn(nums) == expected_result\n        print(f\"assert solution.deleteAndEarn({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.deleteAndEarn({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.deleteAndEarn([4700, 6190, 9259, 8311, 4635, 1126, 8251, 2483, 4948, 4366, 4296]) == 58565\nassert solution.deleteAndEarn([6332, 5871, 5503, 3627, 4892, 8885, 8914, 4707, 5669, 4973, 6005, 1739, 6436, 7103]) == 80656\nassert solution.deleteAndEarn([6019, 2356, 6722, 4153, 5815, 4110, 9961, 1402, 3693]) == 44231\nassert solution.deleteAndEarn([2968, 5979, 7471, 2940, 2219, 7398, 6121, 7886, 2843, 7187, 8825, 7931, 9661]) == 79429\nassert solution.deleteAndEarn([3664, 2141, 6615, 2078, 9990, 6355, 3862, 5095, 6514, 614, 8547, 3400, 8277, 8404, 6012, 4744, 6700, 2553, 1174]) == 96739\nassert solution.deleteAndEarn([9041, 3570, 2305]) == 14916\nassert solution.deleteAndEarn([9187, 5654, 7083, 1347, 1224, 8399, 3601, 6922, 2891, 342, 8667, 9800, 777, 4359, 5239, 4220]) == 79712\nassert solution.deleteAndEarn([3935]) == 3935\nassert solution.deleteAndEarn([7049, 8294, 1014, 3852, 856, 6498, 4, 7906, 391, 6981, 6537, 6340, 1957, 2568, 7699, 3187, 2641]) == 73774\nassert solution.deleteAndEarn([4263, 9524]) == 13787\nassert solution.deleteAndEarn([1785, 1241, 7223, 5665, 475, 1400]) == 17789\nassert solution.deleteAndEarn([2573, 6629, 140, 228, 4081]) == 13651\nassert solution.deleteAndEarn([5090, 266, 8436, 2968, 546, 2534, 1628, 3907, 17, 909, 3144]) == 29445\nassert solution.deleteAndEarn([8134, 7933, 3399, 5991, 3109, 6552, 3731, 5369]) == 44218\nassert solution.deleteAndEarn([3204, 4407, 9613, 2965, 4087, 8539, 4233, 5968, 8074, 8431, 2394, 2673, 1910]) == 66498\nassert solution.deleteAndEarn([2854, 9752, 3579, 2665, 5202, 3640, 4648, 7257, 1769, 8145, 8824, 8563, 1310]) == 68208\nassert solution.deleteAndEarn([999, 6054, 5713, 7653, 2042, 9490, 5627, 5535, 4149]) == 47262\nassert solution.deleteAndEarn([3018, 4222, 1527, 1640, 9802, 6642, 3509, 5228, 3818, 3110, 63, 88, 5540, 7787, 9494, 444, 6525]) == 72457\nassert solution.deleteAndEarn([1697, 3392, 8501, 9754, 5601, 6169, 1507, 7674, 6501, 131, 7705, 491, 4919, 911]) == 64953\nassert solution.deleteAndEarn([6492, 6469, 8217, 3099, 7653, 225, 7923, 4771, 4563, 1135, 8927, 9644, 5347, 516, 6017, 1744, 5668, 9118, 6668]) == 104196\nassert solution.deleteAndEarn([7189, 2465, 665, 4303, 3404, 6030, 9899, 3913, 4333, 8485, 6313, 133, 1124, 6105, 5077, 859]) == 70297\nassert solution.deleteAndEarn([5954, 3407, 1356, 688, 6354, 8582, 9989, 553, 3262, 2547, 6117, 7838, 1524, 578, 9537]) == 68286\nassert solution.deleteAndEarn([1125, 4034, 8197, 1222, 7279, 2899, 1723]) == 26479\nassert solution.deleteAndEarn([2159, 1760, 7247, 3975, 7853, 960, 7570, 1590, 5500, 5819, 8584, 6120, 1096, 4295, 5419, 5595]) == 75542\nassert solution.deleteAndEarn([9054, 7104]) == 16158\nassert solution.deleteAndEarn([784, 9560, 7748, 7534, 3443, 5778, 9214, 6340, 4823, 637]) == 55861\nassert solution.deleteAndEarn([2380, 5227, 3543, 7520, 5034, 1796, 7043]) == 32543\nassert solution.deleteAndEarn([6033, 2056]) == 8089\nassert solution.deleteAndEarn([5345, 36, 7942, 5115, 1997]) == 20435\nassert solution.deleteAndEarn([924, 5833, 8634, 1926, 4539, 2429]) == 24285\nassert solution.deleteAndEarn([9835, 1198, 3696, 6768, 5429, 7383, 1317, 978, 4890, 5993, 7150, 920, 918, 9075]) == 65550\nassert solution.deleteAndEarn([4907, 725, 4878, 3204, 6007, 1340, 9911, 2424, 2910, 2900, 4981, 1870, 9060, 6701, 4206, 765, 4579, 5191, 4796]) == 81355\nassert solution.deleteAndEarn([8127, 1021, 556, 4495, 6113, 3197, 624, 9221, 3259]) == 36613\nassert solution.deleteAndEarn([1084, 9866, 1361, 5322, 7917, 4890, 3847, 6347, 5615, 5847, 4201, 510, 9351]) == 66158\nassert solution.deleteAndEarn([5840, 1157, 2928]) == 9925\nassert solution.deleteAndEarn([5633, 4128, 5789, 8609, 519, 557, 7930, 7958, 1501, 232, 1320, 3358, 507, 6898, 6453, 4147, 4469]) == 70008\nassert solution.deleteAndEarn([268, 345, 7093, 333, 5133, 9220, 1764, 8672, 5827, 251, 2033, 8656, 8707, 8028, 916, 7746, 9139, 9395, 310, 1678]) == 95514\nassert solution.deleteAndEarn([5115, 7303, 3851, 660, 1618, 820, 3665]) == 23032\nassert solution.deleteAndEarn([6039, 4207, 2490, 1241, 2711, 7513, 6135, 7290, 2632, 8960, 2879, 2036, 9519]) == 63652\nassert solution.deleteAndEarn([4316, 2287, 5953, 2101, 9356, 4101, 3797, 9739, 5703, 7126, 4731]) == 59210\nassert solution.deleteAndEarn([8655, 6868, 905, 8224, 92, 2260, 2879, 3262, 8486, 331, 4185, 7629, 8287, 2724, 6756]) == 71543\nassert solution.deleteAndEarn([1633, 5511]) == 7144\nassert solution.deleteAndEarn([9306, 9264, 1784, 1116, 2501, 2387, 2471, 9278, 4234, 5121, 5439, 2570, 9827, 8402, 4550, 3920, 130]) == 82300\nassert solution.deleteAndEarn([7482, 5699, 3661, 9884, 1698, 8626, 3854, 8263, 4090, 457, 2808, 2175, 3811, 8303, 361, 9364]) == 80536\nassert solution.deleteAndEarn([645, 9811, 8516, 7592, 2606, 9773, 9518, 3855, 3145, 3641, 5380, 8433, 8538, 4879, 3645, 6447, 8372]) == 104796\nassert solution.deleteAndEarn([598]) == 598\nassert solution.deleteAndEarn([165, 2950, 224, 8447, 3844, 6806, 841, 1966, 7114, 3428, 1530]) == 37315\nassert solution.deleteAndEarn([9758, 4053, 580, 4822, 3418, 3396, 2040, 2199, 9639, 7610, 8263, 9052, 8872, 9743, 7632, 2909, 6669, 6741, 1572, 2148]) == 111116\nassert solution.deleteAndEarn([3608, 5761, 5583, 3361, 6228, 7794, 7878, 8752, 3534, 3680, 2515]) == 58694\nassert solution.deleteAndEarn([4821, 3906, 8826]) == 17553\nassert solution.deleteAndEarn([3272, 2141, 3778, 9479, 568, 870, 5781, 1575, 5888, 409, 250, 6276, 7703, 4551, 1625]) == 54166\nassert solution.deleteAndEarn([4646, 4430, 5561, 515, 4124, 8048, 7842, 7996, 6262, 4632, 3014, 3111, 9363, 4798, 844, 670, 261, 8566, 1415]) == 86098\nassert solution.deleteAndEarn([5817, 7725]) == 13542\nassert solution.deleteAndEarn([6915, 6882, 7155, 8063, 3639, 9891, 2806, 6987]) == 52338\nassert solution.deleteAndEarn([357, 8926, 2984]) == 12267\nassert solution.deleteAndEarn([3375, 8915, 1807, 8650, 6591, 8041, 5461, 3659, 9217, 4712, 4307, 7129, 8303, 8680]) == 88847\nassert solution.deleteAndEarn([9323, 52, 8949, 9856, 7334, 2317, 8707, 6749, 857, 6225, 7400, 3849, 238]) == 71856\nassert solution.deleteAndEarn([4774, 3574, 9552, 8975, 3077, 2829, 98, 5915, 421, 1354, 4170, 6705, 3598, 2771]) == 57813\nassert solution.deleteAndEarn([4753, 3369, 1514, 4870, 2478, 7056, 3503]) == 27543\nassert solution.deleteAndEarn([2989, 2470, 7984, 786, 9874, 307, 1164, 6772, 2812, 7691, 9652, 4931, 4207, 5360, 9717, 5422, 1222]) == 83360\nassert solution.deleteAndEarn([6080, 502, 1871, 414, 811, 6839, 4248, 1921, 8975, 9842, 1633, 6737, 5589, 1790, 6658]) == 63910\nassert solution.deleteAndEarn([7530, 2893, 5625, 2222, 4848, 9648, 9846, 6752, 548, 8067, 2063, 9597, 1310, 1737, 653, 711, 7602, 9086]) == 90738\nassert solution.deleteAndEarn([4864, 6527, 7683, 3087, 6494, 1663]) == 30318\nassert solution.deleteAndEarn([551, 3008, 9702, 4551, 2160, 7277, 9570]) == 36819\nassert solution.deleteAndEarn([715, 8256, 73, 8268, 8550, 5473, 6668, 8210, 8493, 300, 525, 8970, 827, 8138, 2843, 7647, 303, 6396, 1945]) == 92600\nassert solution.deleteAndEarn([6571, 3472, 4189, 2249, 3965, 6266]) == 26712\nassert solution.deleteAndEarn([2995, 4737, 9250]) == 16982\nassert solution.deleteAndEarn([2751, 4235, 8322, 1158, 7952, 9335, 1663, 9677, 9454, 3269, 693, 7295]) == 65804\nassert solution.deleteAndEarn([5938, 4607, 6571, 1532, 1120, 1970, 8296, 5322, 3513, 8332, 4592, 7044, 1151]) == 59988\nassert solution.deleteAndEarn([6973, 9907, 4284, 6562, 9712, 6785, 1590, 341, 3551, 5200, 2893]) == 57798\nassert solution.deleteAndEarn([1097, 4993, 9570, 1021, 7927, 9483, 7647]) == 41738\nassert solution.deleteAndEarn([2540, 2694, 5522, 6606, 4951, 8221, 3601, 8124]) == 42259\nassert solution.deleteAndEarn([3037, 4775, 2463, 4598, 2205, 1529, 1613, 3382, 1836, 630, 6513, 8770, 2418, 8050, 7516, 5381, 5941, 5152]) == 75809\nassert solution.deleteAndEarn([9187, 9348, 7449, 1409, 1707, 9235, 422, 7931, 4351, 8523, 7243, 5058, 2932, 7916, 5941, 3805, 1545, 4655, 6674]) == 105331\nassert solution.deleteAndEarn([7919, 3572, 24, 6702, 6261, 5307, 9484, 3310, 9888, 4672, 6143]) == 63282\nassert solution.deleteAndEarn([5234, 2115, 3121, 8964, 9888, 5731, 152, 1496, 6252, 18]) == 42971\nassert solution.deleteAndEarn([6018, 2042, 7426, 8627, 1198, 3311, 8180, 2738, 5614, 7391, 9482, 3086, 9200, 8000, 7792, 6440, 5339]) == 101884\nassert solution.deleteAndEarn([7566, 597, 9502, 4124, 3691, 1266, 2948, 232, 7819, 3582, 9610, 5628, 586, 9233, 5655, 1180]) == 73219\nassert solution.deleteAndEarn([7447, 2083, 5801, 7428, 6194, 2390, 9991, 2357, 8083, 6851, 6550, 1963]) == 67138\nassert solution.deleteAndEarn([6568, 3860, 2630, 5700, 5030, 7452, 9704, 4539, 4324, 406, 1791, 3333, 6939]) == 62276\nassert solution.deleteAndEarn([9365, 7030, 6382, 221, 1246, 1576, 2617, 7357, 3960]) == 39754\nassert solution.deleteAndEarn([3206, 1153, 447, 3849, 9820, 2919, 7008, 7269, 550, 4562, 181, 2116, 6009, 8923, 3286, 2489, 5310]) == 69097\nassert solution.deleteAndEarn([1980, 3567]) == 5547\nassert solution.deleteAndEarn([5475, 7202, 7567, 2767, 5225, 460, 1164, 6874, 8770, 8025, 9739]) == 63268\nassert solution.deleteAndEarn([3325, 9233, 5820, 6309, 6996, 7078, 4704, 5889]) == 49354\nassert solution.deleteAndEarn([9218]) == 9218\nassert solution.deleteAndEarn([3647, 8534, 6575, 2612, 8283, 5389]) == 35040\nassert solution.deleteAndEarn([615, 1724, 9402, 3016]) == 14757\nassert solution.deleteAndEarn([2234, 5131, 2791, 4597]) == 14753\nassert solution.deleteAndEarn([2947, 1802, 8789, 9264, 2060, 5871, 3228, 1327, 251, 4602, 6587, 1619, 362, 4820, 9029, 5648]) == 68206\nassert solution.deleteAndEarn([9112, 3450, 7163, 9169, 7275, 6556, 4538, 4076, 3765, 5376, 9893]) == 70373\nassert solution.deleteAndEarn([1931, 2961, 3794, 5638, 1263, 8729, 8324, 1241, 2682, 2130, 4378, 173, 3949, 2904, 5016, 1937, 5798, 2218, 3534]) == 68600\nassert solution.deleteAndEarn([7262, 6526, 6277, 4742, 2135, 7201, 5390, 1210, 4797, 130, 5823]) == 51493\nassert solution.deleteAndEarn([6864, 6914, 3647, 3358, 9620, 1495, 7669, 2744, 8253]) == 50564\nassert solution.deleteAndEarn([5429, 6427, 3225, 776, 7981, 6238, 9688, 1048, 2408, 9214, 9920, 3788, 596, 6900, 2542, 3851, 2559, 410]) == 83000\nassert solution.deleteAndEarn([5775, 3314, 7641, 5682, 5718, 8846, 9376, 4762, 4052]) == 55166\nassert solution.deleteAndEarn([7378, 2915, 907, 3631, 836, 7347, 5991, 5760, 8314, 8799, 1481, 3796, 6578, 5582, 4250, 7442, 6545, 1117]) == 88669\nassert solution.deleteAndEarn([3808, 7442, 7968, 6660, 315, 1750, 7166, 6633, 7848, 7810, 2797, 5270, 2727, 6475, 1683, 5220, 76, 2072]) == 83720\nassert solution.deleteAndEarn([4599, 9487, 1981, 4313, 9786, 6401, 9034]) == 45601\nassert solution.deleteAndEarn([7777, 3420, 4755, 7701, 9645, 2843, 938, 4930, 8187, 1580, 5662, 9402, 5567, 7844, 9734]) == 89985",
  "inefficient_solution": "class Solution:\n    def deleteAndEarn(self, nums: List[int]) -> int:\n        max_val = max(nums)\n        max_count = {i: 0 for i in range(max_val + 1)}\n        val_to_num = {i: [] for i in range(max_val + 1)}\n        \n        for num in nums:\n            val_to_num[num].append(num)\n        \n        for num in nums:\n            for val in val_to_num[num]:\n                max_count[val] += val\n        \n        points = [0] * (max_val + 1)\n        points[0] = max_count[0]\n        points[1] = max(max_count[0], max_count[1])\n        \n        for i in range(2, max_val + 1):\n            cur_points = []\n            for j in range(i - 1, 0, -1):\n                cur_points.append(points[j] + max_count[i])\n            points[i] = max(cur_points)\n        \n        return points[max_val]",
  "is_python": true
}