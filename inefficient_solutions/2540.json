{
  "problem_idx": 2540,
  "task_name": "Minimum Common Value",
  "markdown_description": "\nGiven two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, return *the **minimum integer common** to both arrays*. If there is no common integer amongst `nums1` and `nums2`, return `-1`.\n\n\nNote that an integer is said to be **common** to `nums1` and `nums2` if both arrays have **at least one** occurrence of that integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3], nums2 = [2,4]\n**Output:** 2\n**Explanation:** The smallest element common to both arrays is 2, so we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3,6], nums2 = [2,3,4,5]\n**Output:** 2\n**Explanation:** There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 105`\n* `1 <= nums1[i], nums2[j] <= 109`\n* Both `nums1` and `nums2` are sorted in **non-decreasing** order.\n\n\n",
  "canonical_solution": "class Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        i = j = 0\n        m, n = len(nums1), len(nums2)\n        while i < m and j < n:\n            if nums1[i] == nums2[j]:\n                return nums1[i]\n            if nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return -1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        i = j = 0\n        m, n = len(nums1), len(nums2)\n        while i < m and j < n:\n            if nums1[i] == nums2[j]:\n                return nums1[i]\n            if nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        return -1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums1 = sorted(random.sample(range(1, 1000000000), random.randint(1, 10)))\n    nums2 = sorted(random.sample(range(1, 1000000000), random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getCommon(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getCommon(nums1, nums2) == expected_result\n        print(f\"assert solution.getCommon({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getCommon({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getCommon([153311210, 413071739], [29384669, 443966964, 476868625, 666351248]) == -1\nassert solution.getCommon([18489481, 106966013, 284919207, 340405663, 349902054, 361752456, 417858221, 633120667, 808649969, 928410937], [97474851, 150797442, 227739674, 339752748, 365939169, 603882727, 699337739, 883241758, 912375874, 983594459]) == -1\nassert solution.getCommon([23868335, 25567507, 325122410], [664298407]) == -1\nassert solution.getCommon([660475296, 704069429, 900863559, 990818948], [117767504, 250872781, 340614258, 595806640, 932917921]) == -1\nassert solution.getCommon([27774076, 169171051, 259335151, 350092613, 724763353, 764454835, 797491830, 952032043], [243091743, 547586451, 793378437, 819404993, 921667912, 945572013, 956552622]) == -1\nassert solution.getCommon([165553593, 643724321, 651834869, 813975650], [121261410, 129678115, 175553407, 186518080, 290989510, 599270184, 629261700, 637500547, 900146422, 919600099]) == -1\nassert solution.getCommon([16097436, 83524945, 133037167, 323250951, 664500909, 802605916], [181354947, 647812467, 776442691, 876231272]) == -1\nassert solution.getCommon([14063049, 215121285, 567294902], [230544215, 327094643, 489930703, 769122483]) == -1\nassert solution.getCommon([61930337, 70131251, 225055653, 229738962, 313984765, 897474366, 940105467], [249022661, 803886809]) == -1\nassert solution.getCommon([854170990], [36150058, 380573649, 467372915]) == -1\nassert solution.getCommon([43891729, 416309601, 546952649, 594514343, 692899462, 887803037, 913153124, 925519096, 943360198, 962667745], [145495750, 721746017, 977272015, 986743947]) == -1\nassert solution.getCommon([851519637], [55530621, 152369478, 228319172, 452020838, 528193724, 660045473, 777930923, 951939110]) == -1\nassert solution.getCommon([404405972, 449910291], [213523050]) == -1\nassert solution.getCommon([245474948, 477799613, 567002001, 658014712, 683692647, 744147779, 791752008, 955963370], [181722548, 386561897, 762210308]) == -1\nassert solution.getCommon([11023712, 85866696, 190383538, 194187389, 390009357, 508717510, 538467751, 604615617, 923078806, 933385643], [367195390, 605419937, 674061048, 743541148]) == -1\nassert solution.getCommon([44274216, 158876319, 181653799, 226895645, 422859222, 453028067, 560851372, 565766212, 626907905, 675358663], [51796076, 279218653, 317032672, 347248516, 441377833, 586036756, 667109192, 747608370, 931858713]) == -1\nassert solution.getCommon([291086025, 856486092], [161717357, 214463526, 436585962, 567607164, 569297685, 842125426, 879808423, 900978415, 915516044, 971062931]) == -1\nassert solution.getCommon([446973032, 451351193, 643895093, 787582085, 810912896, 983205110], [71875245, 242379679, 316432172, 513744079]) == -1\nassert solution.getCommon([240666587, 321474805, 435521187, 856584515, 885189369], [132693833]) == -1\nassert solution.getCommon([302786677, 440989614, 640383026], [174401206, 319049723, 408732049, 496579757, 517849688, 735227232, 906774587, 947067703, 993896836]) == -1\nassert solution.getCommon([257759810, 753815685], [253485917, 406001221, 457498636, 507310035, 612743630, 625078867]) == -1\nassert solution.getCommon([685448215], [158702713, 167676887, 521994919, 528780231, 686601125, 747982945, 759109879, 769534617, 831299047]) == -1\nassert solution.getCommon([257172959, 351726370, 380204204, 418522563, 503636336, 568763944, 801815809], [516657986, 850948855]) == -1\nassert solution.getCommon([663611593, 729606960, 754158062], [17424709, 465055058, 831810756, 948328033]) == -1\nassert solution.getCommon([907738857], [16344020, 74984792, 90671308, 109851684, 402494254]) == -1\nassert solution.getCommon([203120775, 504491145, 710851014, 840685740], [6211270, 144584166, 926577316, 966048265]) == -1\nassert solution.getCommon([1072996, 72857165, 218707553, 428367589, 478201195, 601908744], [99902532, 125604934, 160307548, 424184685, 441230442, 773218670, 821406772, 830287884, 855792269, 978866276]) == -1\nassert solution.getCommon([67675080, 126659418, 316016456, 444717306, 555472835, 809901312, 876132371], [209876408, 333911595, 645561301]) == -1\nassert solution.getCommon([668232765, 826474098], [271045337, 477579394, 841658787, 930763660, 957799621]) == -1\nassert solution.getCommon([160216818, 571706819, 832247706, 844005869, 888578928], [89176675, 123143824, 219940038, 249375807, 322700624, 340404288, 572752070, 771475191, 772647514, 994201440]) == -1\nassert solution.getCommon([48090393, 67446936, 81477164, 92779274, 99812584, 110053975, 312258000], [32394542, 119624029, 245549060, 395546882, 502544179, 735635666, 830091914, 940735273]) == -1\nassert solution.getCommon([81068983, 393764721, 499259293, 773658520, 911254529], [151079675, 205248500, 302143485, 423208548, 516527964, 668517505, 730233197, 768430242, 911043293]) == -1\nassert solution.getCommon([102134163, 170832850, 320277162, 417566215, 526595554, 616313562, 620767447, 752195088, 810020898, 920148276], [79724492, 698427319, 824002237]) == -1\nassert solution.getCommon([20162016, 75121851, 363228455, 565199449, 601955950, 622242064, 704156686, 725195779, 865076525, 903491532], [270712831, 367311880, 405298136, 674375899]) == -1\nassert solution.getCommon([30616629, 94934513, 113062834, 526001395, 532638249, 915509493, 974571845], [88937122, 360157858, 709408441, 870197023]) == -1\nassert solution.getCommon([7052768, 19603776, 111752754, 120777336, 675306940, 772953294, 810871046, 815522258], [619165286]) == -1\nassert solution.getCommon([362967667, 373312126, 993389115], [471639768, 597515474, 920698628]) == -1\nassert solution.getCommon([194479837, 267007063, 411966670, 737841777, 817452724, 851257299, 990046809], [127776106, 336931124, 404486885, 443607676, 496797955, 505773513, 894688735]) == -1\nassert solution.getCommon([199543087, 257654802, 332690944, 464378115, 466683690, 524813121, 566897279, 624311392, 686943412], [448827857, 532557824]) == -1\nassert solution.getCommon([87991699, 144961974, 459409802, 477810324, 669909484, 866307515, 871535717, 911586349], [5807057, 13819782, 127485533, 135346897, 136655085, 297659076, 360804602, 754274827, 801958120, 957413706]) == -1\nassert solution.getCommon([224420766, 313261050, 322809624, 358404486, 532111514, 723741908, 749167694, 897590543, 916080521, 973337741], [17314903, 434449638]) == -1\nassert solution.getCommon([24487733], [144981739, 268302563, 615749438, 746636369, 788883739]) == -1\nassert solution.getCommon([378219761, 399545544, 400734761, 732159162, 789163528, 919391446, 965806739], [687618838]) == -1\nassert solution.getCommon([230709684, 268751392, 273686285, 469181002, 600445524, 639681167, 663202325, 754046798, 874960774, 942045576], [1777364, 157718364, 262331388, 312347880, 635987470, 745705949, 821525416, 855677201, 907944258]) == -1\nassert solution.getCommon([162408265, 258971098, 384283693, 994837650], [636577220, 638035715, 698775766, 854921440, 934232114]) == -1\nassert solution.getCommon([215423570, 248228386, 620034196], [90067217, 159456908, 274693939, 326439774, 436841612, 525128359, 571008849, 796996303, 815386841, 860779700]) == -1\nassert solution.getCommon([328683511, 378459516, 411178759, 421913916, 514433091, 601231566, 761371569, 807315996], [359420859, 442994106, 470607067, 472730907, 590858607, 617039177, 686820130, 755090057, 821410263]) == -1\nassert solution.getCommon([126429338, 561956544, 609085254, 983461882], [188025013, 400923693, 568375253, 718852830, 816579311, 929795595, 932887980]) == -1\nassert solution.getCommon([76783173, 83673302, 130680406, 204992252, 207793924, 413220656, 450890430, 958330311, 977127016], [133542112]) == -1\nassert solution.getCommon([216187263, 310788636], [32153310, 68346460, 194060482, 250104982, 314629254, 374725957, 384481605, 386925986, 568750381, 742011735]) == -1\nassert solution.getCommon([79826961, 359181453, 737757581, 961424890, 974766979], [239620231, 648426730, 841008192]) == -1\nassert solution.getCommon([815252318], [355771678]) == -1\nassert solution.getCommon([198379928, 395092850, 512015752, 618589822, 664642476, 712098868], [72393556, 228750642]) == -1\nassert solution.getCommon([212741652, 829504468], [34572673, 111360688, 283746224, 492556869, 513623046, 516765654, 612852775, 737200261, 796271565, 862800205]) == -1\nassert solution.getCommon([213955597, 318320784, 328607947, 512375258, 516850577, 794053300, 887130320], [96544687, 154744219, 482332171, 513879478, 526504183, 762726857, 807965080, 827606180]) == -1\nassert solution.getCommon([60069571], [623287252, 669455194, 717939945, 798413723, 865830101]) == -1\nassert solution.getCommon([462787950, 576815925], [106566390, 325580549, 389969318, 494794862, 516638518, 668788294, 707337328]) == -1\nassert solution.getCommon([397779812, 637207211, 671390772, 726255303, 870000107], [75099969, 281125328, 368798271, 392236475, 424635140, 436008019, 645051247, 739061037, 821931040, 859176318]) == -1\nassert solution.getCommon([228753630, 253883042, 283786701, 475540437, 494127782, 605050801, 699527678, 723773170, 957947531], [19506906, 326070402, 379621111, 506809798, 515099614, 647053566, 858919131, 919318117, 956905150]) == -1\nassert solution.getCommon([173385242, 241986357, 249889198, 446138302, 560779844, 565754982], [84071765, 105675668, 233816384, 368450476, 601607228, 622160334, 929583855, 962260391]) == -1\nassert solution.getCommon([426761675, 452685224], [117738912, 240196647, 464235491, 469189813, 522512963, 669897252, 686821544, 732585663, 886652984, 954108013]) == -1\nassert solution.getCommon([45373228, 368909331, 506404601, 571858407, 703048494, 706948544, 857103112, 857833240, 898696700, 905751072], [956415836]) == -1\nassert solution.getCommon([98615488, 149974283, 289434001, 433700488, 443748066, 494373420, 623636853, 737063140, 868107922, 978525046], [665552991]) == -1\nassert solution.getCommon([290019735, 322531594, 479476108, 655481042, 798034524, 901450711, 905351902, 981765360], [983123369]) == -1\nassert solution.getCommon([267591378, 405590293, 413753445, 755604480, 972514017], [30805650, 531598927, 718921909, 960832875]) == -1\nassert solution.getCommon([15312534, 191234940, 445476467, 616615939, 663860301, 688390746, 743915282, 778392384, 861812206], [23118202, 57608935, 268041767, 445179265, 552553555, 576584255, 649726354, 776324002, 927052683]) == -1\nassert solution.getCommon([94236788, 305159948, 549884674, 651568256, 964520127], [185732296, 190010035, 471947277, 836662301, 865977255, 882162453, 966079301, 984255343]) == -1\nassert solution.getCommon([86187581, 162403569, 533692640, 572614089, 588287759, 610243116, 699750874, 735163834], [35185284, 155740904, 168026456, 302173542, 328970512, 766801189, 927750501]) == -1\nassert solution.getCommon([29609372, 432629013, 577567023, 591036921, 763165345, 957567902, 986152834, 993740844], [912532783]) == -1\nassert solution.getCommon([86999894, 161515669, 227609523, 710438550], [87556830, 454908680, 689070494]) == -1\nassert solution.getCommon([131729614, 333628131, 367640437, 413171975, 464592317, 501854876, 541545688, 591311055, 792361123, 886765132], [232526995]) == -1\nassert solution.getCommon([230034200, 315828982, 717299206], [86622815, 392080330, 430586845, 632639215, 635091228]) == -1\nassert solution.getCommon([54594429, 72002478, 333653967, 441163555, 577465415, 604283917, 608169643, 637730091, 697162459, 887129763], [62817045, 281045975, 427953805, 433146743, 495295411, 772047008, 854551547, 979426999, 994424827]) == -1\nassert solution.getCommon([1733578, 101657362, 457981446, 471448757, 669711122, 710992785, 857027329, 895039511], [216272883, 313277786, 351080833, 550603334, 842780809, 987141296]) == -1\nassert solution.getCommon([66372180, 260132734, 357128802, 357985537, 442569877, 539963192, 675844064, 740236447, 848603424, 922562208], [156914785, 466308820, 620073568, 658107253, 764183376, 890937856, 901519783, 977991704]) == -1\nassert solution.getCommon([355676848, 469206780, 543548252, 669807300, 732136123], [52192144, 386717018, 544606938]) == -1\nassert solution.getCommon([196234715, 480871816], [459223060, 475517949, 612523823, 653754703, 663021733, 942298846]) == -1\nassert solution.getCommon([82286038, 619995305, 704081690], [463591377, 486038515, 642746156, 820357437]) == -1\nassert solution.getCommon([201219542, 478132275, 632597177, 632735804, 821787781, 851964458, 904904112], [386288593, 813942127]) == -1\nassert solution.getCommon([189758421, 201597648, 416211629, 515855596], [265340483, 337889350, 462617452, 608705969, 640575525, 647342077, 670386286, 789315003, 846106905, 972663258]) == -1\nassert solution.getCommon([49780449, 162802445, 691181850, 883275788], [192600171]) == -1\nassert solution.getCommon([4555929, 105370265, 453363813, 677437779, 783449898, 885277409, 961544295], [3303325, 46678747, 153347264, 492675195, 563861300, 650913941, 679415669, 822090446, 854166862, 893173020]) == -1\nassert solution.getCommon([85697578, 279213297, 407450643, 594443700, 706558332, 922452277, 937625690, 979692363], [692781774]) == -1\nassert solution.getCommon([10912553, 28135835, 470759722, 493459343, 542191993, 575457369, 741349840, 767275057, 969654827], [490193489, 615697423]) == -1\nassert solution.getCommon([181111140, 438602210, 561700653, 774661014], [901075954]) == -1\nassert solution.getCommon([56374853, 134887554, 210324398, 507457730, 961213570, 964524696], [58084434, 81683004, 318196630, 358487295, 509666683, 549511938, 557646414, 758282477, 888781044]) == -1\nassert solution.getCommon([169928785, 184131450, 238107388, 322819262, 335070775, 660107488, 698038027, 905667882, 916007709], [732427, 151673617, 381469354, 398480138, 412605331, 461789558, 724660934, 729870879, 858104569, 959931598]) == -1\nassert solution.getCommon([119197830, 253317595, 410050341, 428950275, 498836195, 510697811, 632542046, 772986551], [37413132, 189753310, 303802716, 340649015, 368550136, 474698387, 478162227]) == -1\nassert solution.getCommon([17905686, 52873847, 64392470, 315399678, 614670854, 714001660, 722915358, 744502543, 832065527, 965231994], [808591979]) == -1\nassert solution.getCommon([206244822, 288880605, 419899958, 873180602], [962753361]) == -1\nassert solution.getCommon([172058874, 281113295, 489636190, 515406161, 538675817, 606396986, 810891944, 826312525], [106310432, 548071914]) == -1\nassert solution.getCommon([119266885, 256389972, 306131845, 464824797, 551055319, 570137452, 619722070, 669211867, 958102915], [205203745, 533656536, 689633760, 726334825, 872049588, 879076267, 933896859]) == -1\nassert solution.getCommon([861882666], [478202732, 672623364, 706903905, 753214916, 901293700]) == -1\nassert solution.getCommon([105130904, 180484726, 335641207, 344412331, 382997290, 384598350, 722198286, 781453846, 956284152, 965723265], [295495220, 512932373, 662054105, 891058478]) == -1\nassert solution.getCommon([4847203, 94810872, 176306791, 192458501, 194865863, 606077052, 699159220], [178989215, 375066917, 382689102, 614552098, 733743440]) == -1\nassert solution.getCommon([69528758, 431485255, 810920992, 852780470, 867064074, 870434759], [146296886, 500886503]) == -1\nassert solution.getCommon([118294619, 145645068, 175290201], [53515853, 134081021, 176815033, 487282503, 520491518, 699404266, 812943358, 852772980, 862400749, 993722398]) == -1\nassert solution.getCommon([56308789], [46207063, 987871884]) == -1\nassert solution.getCommon([162871512, 471345055, 767850592, 808870744], [248496132, 435979878, 455513327, 544052409, 596532126]) == -1\nassert solution.getCommon([93313548, 951734440], [26532747]) == -1",
  "inefficient_solution": "class Solution:\n    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:\n        nums1_set = {num for num in nums1}\n        nums2_set = {num for num in nums2}\n        common_nums = set()\n        for num in nums1_set:\n            if num in nums2_set:\n                common_nums.add(num)\n        return min(common_nums) if common_nums else -1",
  "is_python": true
}