{
  "problem_idx": 891,
  "task_name": "Sum of Subsequence Widths",
  "markdown_description": "\nThe **width** of a sequence is the difference between the maximum and minimum elements in the sequence.\n\n\nGiven an array of integers `nums`, return *the sum of the **widths** of all the non-empty **subsequences** of* `nums`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **subsequence** is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3]\n**Output:** 6\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def sumSubseqWidths(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        nums.sort()\n        ans, p = 0, 1\n        for i, v in enumerate(nums):\n            ans = (ans + (v - nums[-i - 1]) * p) % mod\n            p = (p << 1) % mod\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def sumSubseqWidths(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        nums.sort()\n        ans, p = 0, 1\n        for i, v in enumerate(nums):\n            ans = (ans + (v - nums[-i - 1]) * p) % mod\n            p = (p << 1) % mod\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.sumSubseqWidths(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sumSubseqWidths(nums) == expected_result\n        print(f\"assert solution.sumSubseqWidths({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.sumSubseqWidths({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sumSubseqWidths([17, 51, 70]) == 159\nassert solution.sumSubseqWidths([25, 30, 92]) == 201\nassert solution.sumSubseqWidths([2, 8, 24, 36, 59, 61, 98, 100]) == 19246\nassert solution.sumSubseqWidths([8, 23, 39, 45, 48, 51, 73, 78, 89]) == 29769\nassert solution.sumSubseqWidths([24, 31, 43, 92, 97]) == 1461\nassert solution.sumSubseqWidths([7, 11, 32, 57, 99]) == 1656\nassert solution.sumSubseqWidths([17, 20, 33, 81, 84]) == 1371\nassert solution.sumSubseqWidths([7, 15, 22]) == 45\nassert solution.sumSubseqWidths([15, 21, 49, 51, 60, 86, 91, 99]) == 16116\nassert solution.sumSubseqWidths([1, 15, 35, 47, 55, 68, 78, 96, 100]) == 38535\nassert solution.sumSubseqWidths([26, 33, 65, 75, 88, 95, 97]) == 6609\nassert solution.sumSubseqWidths([5, 8, 9, 12, 22, 24, 36, 45, 71, 89]) == 64766\nassert solution.sumSubseqWidths([5, 16, 30, 65]) == 448\nassert solution.sumSubseqWidths([4, 17, 21, 35, 43, 47, 83, 95]) == 16441\nassert solution.sumSubseqWidths([7, 62, 70, 76, 96, 99]) == 3352\nassert solution.sumSubseqWidths([54, 56, 76]) == 66\nassert solution.sumSubseqWidths([7, 87, 88]) == 243\nassert solution.sumSubseqWidths([61, 81]) == 20\nassert solution.sumSubseqWidths([9, 10, 25, 38, 48]) == 753\nassert solution.sumSubseqWidths([79, 89]) == 10\nassert solution.sumSubseqWidths([15, 34, 62]) == 141\nassert solution.sumSubseqWidths([25, 44]) == 19\nassert solution.sumSubseqWidths([3, 92]) == 89\nassert solution.sumSubseqWidths([5, 9, 18]) == 39\nassert solution.sumSubseqWidths([2, 18, 36, 78]) == 568\nassert solution.sumSubseqWidths([4, 11, 20, 30, 35, 49, 68, 71]) == 12895\nassert solution.sumSubseqWidths([14, 19, 20, 21, 30, 33, 52, 54, 77]) == 22683\nassert solution.sumSubseqWidths([4, 10, 23, 46, 51, 88, 97]) == 8535\nassert solution.sumSubseqWidths([11, 56]) == 45\nassert solution.sumSubseqWidths([27, 95]) == 68\nassert solution.sumSubseqWidths([1, 7, 38, 51, 59, 75, 77, 96]) == 17505\nassert solution.sumSubseqWidths([17, 41, 44, 48, 64, 78, 81, 85, 87]) == 26334\nassert solution.sumSubseqWidths([31, 34, 52, 99]) == 512\nassert solution.sumSubseqWidths([1, 17, 25, 43, 46, 56, 72, 95]) == 16240\nassert solution.sumSubseqWidths([13, 16, 26, 35, 37, 49, 51, 63, 68, 78]) == 52099\nassert solution.sumSubseqWidths([4, 6, 11, 25, 49, 51, 56, 82, 90]) == 34830\nassert solution.sumSubseqWidths([13, 25, 51, 96]) == 633\nassert solution.sumSubseqWidths([24, 37, 42, 58, 59]) == 651\nassert solution.sumSubseqWidths([17, 33]) == 16\nassert solution.sumSubseqWidths([14, 30, 42, 46, 52, 63, 69, 96]) == 13468\nassert solution.sumSubseqWidths([38, 39, 83, 87]) == 431\nassert solution.sumSubseqWidths([14, 17, 26, 28, 35, 62, 70, 94, 95]) == 33813\nassert solution.sumSubseqWidths([10, 25, 34, 65, 72, 78, 82]) == 6582\nassert solution.sumSubseqWidths([10, 41, 47, 57, 90]) == 1296\nassert solution.sumSubseqWidths([1, 3, 29, 44, 52, 74, 79]) == 7320\nassert solution.sumSubseqWidths([4, 10, 19, 25, 61, 83]) == 3187\nassert solution.sumSubseqWidths([20, 30, 44, 56, 71, 94, 100]) == 7284\nassert solution.sumSubseqWidths([12, 39, 80, 88]) == 614\nassert solution.sumSubseqWidths([1, 14, 22, 41, 42, 57, 64, 71, 79]) == 29976\nassert solution.sumSubseqWidths([13, 25, 89]) == 228\nassert solution.sumSubseqWidths([3, 15, 22, 29, 31, 53, 85, 86, 87, 96]) == 77235\nassert solution.sumSubseqWidths([8, 20, 46, 69, 73, 78, 92]) == 7356\nassert solution.sumSubseqWidths([33, 36, 45]) == 36\nassert solution.sumSubseqWidths([3, 16, 61, 68]) == 545\nassert solution.sumSubseqWidths([8, 13, 35, 43, 61, 86, 95, 100]) == 18340\nassert solution.sumSubseqWidths([65, 84, 90]) == 75\nassert solution.sumSubseqWidths([41, 97]) == 56\nassert solution.sumSubseqWidths([81, 98]) == 17\nassert solution.sumSubseqWidths([14, 21, 34]) == 60\nassert solution.sumSubseqWidths([5, 8, 18, 25, 59, 69, 85, 86, 96]) == 38109\nassert solution.sumSubseqWidths([1, 12, 13, 24, 33, 65, 66, 74, 88]) == 34161\nassert solution.sumSubseqWidths([4, 12, 36, 40, 61, 68, 73, 86, 95]) == 35421\nassert solution.sumSubseqWidths([3, 29, 45, 52, 60, 65, 85, 86]) == 14637\nassert solution.sumSubseqWidths([32, 39, 98]) == 198\nassert solution.sumSubseqWidths([4, 17, 19, 41, 42, 44, 60, 66, 92, 93]) == 71453\nassert solution.sumSubseqWidths([27, 89]) == 62\nassert solution.sumSubseqWidths([19, 31, 74]) == 165\nassert solution.sumSubseqWidths([7, 9, 21, 30, 37, 42, 55]) == 4206\nassert solution.sumSubseqWidths([17, 24, 49, 94]) == 589\nassert solution.sumSubseqWidths([17, 23, 26]) == 27\nassert solution.sumSubseqWidths([19, 59, 64]) == 135\nassert solution.sumSubseqWidths([17, 45, 68, 78, 95]) == 1368\nassert solution.sumSubseqWidths([11, 14, 24, 31, 36, 55, 77, 92, 93, 95]) == 74302\nassert solution.sumSubseqWidths([12, 44, 51, 55, 77, 90, 98]) == 7110\nassert solution.sumSubseqWidths([57, 58, 63, 68, 76]) == 345\nassert solution.sumSubseqWidths([30, 32, 54, 63, 74, 98]) == 2732\nassert solution.sumSubseqWidths([27, 43, 57, 63, 73]) == 810\nassert solution.sumSubseqWidths([29, 46, 100]) == 213\nassert solution.sumSubseqWidths([7, 49, 82]) == 225\nassert solution.sumSubseqWidths([23, 42, 57, 67, 97, 100]) == 3197\nassert solution.sumSubseqWidths([9, 18, 29, 31, 34, 42, 57, 87, 88, 91]) == 68458\nassert solution.sumSubseqWidths([3, 27, 56]) == 159\nassert solution.sumSubseqWidths([50, 58, 69, 97]) == 351\nassert solution.sumSubseqWidths([1, 68]) == 67\nassert solution.sumSubseqWidths([7, 14, 45, 55, 66]) == 1131\nassert solution.sumSubseqWidths([2, 24, 44, 57, 70]) == 1218\nassert solution.sumSubseqWidths([2, 5, 9, 24, 36, 38, 45, 48, 49, 74]) == 54012\nassert solution.sumSubseqWidths([2, 16, 43, 86]) == 642\nassert solution.sumSubseqWidths([32, 74, 83, 96]) == 466\nassert solution.sumSubseqWidths([4, 6, 9, 19, 28, 34, 51, 72, 90]) == 33126\nassert solution.sumSubseqWidths([1, 8, 16, 85, 87]) == 1752\nassert solution.sumSubseqWidths([22, 25, 51, 59, 96]) == 1314\nassert solution.sumSubseqWidths([7, 12, 13, 47, 48, 84]) == 3027\nassert solution.sumSubseqWidths([19, 48, 54, 74, 85, 87, 99]) == 6582\nassert solution.sumSubseqWidths([22, 29, 55, 58]) == 304\nassert solution.sumSubseqWidths([12, 16, 20, 34, 48, 57, 60, 89]) == 13655\nassert solution.sumSubseqWidths([3, 47, 49, 57, 70, 74, 84, 97]) == 15036\nassert solution.sumSubseqWidths([27, 28, 39, 48, 51, 57, 66, 67, 88, 94]) == 54053\nassert solution.sumSubseqWidths([51, 92, 96]) == 135\nassert solution.sumSubseqWidths([11, 14, 18, 19, 21, 32, 36, 90, 92]) == 31623",
  "inefficient_solution": "class Solution:\n    def sumSubseqWidths(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        len_nums = len(nums)\n        nums_len = [0] * len_nums\n        for i in range(len_nums):\n            nums_len[i] = len_nums\n        nums_copy = nums[:]\n        for i in range(len_nums):\n            for j in range(i + 1):\n                nums_copy[i] -= nums[j]\n        nums_len_copy = nums_len[:]\n        for i in range(len_nums):\n            for j in range(i + 1):\n                nums_len_copy[i] *= nums_len[j]\n        ans = 0\n        for i, v in enumerate(nums):\n            ans = (ans + (v - nums[-i - 1]) * nums_len_copy[-i - 1]) % mod\n        return ans",
  "is_python": true
}