{
  "problem_idx": 1963,
  "task_name": "Minimum Number of Swaps to Make the String Balanced",
  "markdown_description": "\nYou are given a **0-indexed** string `s` of **even** length `n`. The string consists of **exactly** `n / 2` opening brackets `'['` and `n / 2` closing brackets `']'`.\n\n\nA string is called **balanced** if and only if:\n\n\n* It is the empty string, or\n* It can be written as `AB`, where both `A` and `B` are **balanced** strings, or\n* It can be written as `[C]`, where `C` is a **balanced** string.\n\n\nYou may swap the brackets at **any** two indices **any** number of times.\n\n\nReturn *the **minimum** number of swaps to make* `s` ***balanced***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"][][\"\n**Output:** 1\n**Explanation:** You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is \"[[]]\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"]]][[[\"\n**Output:** 2\n**Explanation:** You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = \"[]][][\".\n- Swap index 1 with index 5. s = \"[[][]]\".\nThe resulting string is \"[[][]]\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"[]\"\n**Output:** 0\n**Explanation:** The string is already balanced.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == s.length`\n* `2 <= n <= 106`\n* `n` is even.\n* `s[i]` is either `'['` or `']'`.\n* The number of opening brackets `'['` equals `n / 2`, and the number of closing brackets `']'` equals `n / 2`.\n\n\n",
  "canonical_solution": "class Solution:\n    def minSwaps(self, s: str) -> int:\n        x = 0\n        for c in s:\n            if c == \"[\":\n                x += 1\n            elif x:\n                x -= 1\n        return (x + 1) >> 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minSwaps(self, s: str) -> int:\n        x = 0\n        for c in s:\n            if c == \"[\":\n                x += 1\n            elif x:\n                x -= 1\n        return (x + 1) >> 1\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string of even length\n    n = random.randint(2, 10)\n    n = n if n % 2 == 0 else n + 1\n    s = \"[\" * (n // 2) + \"]\" * (n // 2)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minSwaps(s)\n\n    return s, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minSwaps(s) == expected_result\n        print(f\"assert solution.minSwaps('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minSwaps('{s}') == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[]') == 0\nassert solution.minSwaps('[[[[]]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[[[]]]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[]]') == 0\nassert solution.minSwaps('[[[]]]') == 0\nassert solution.minSwaps('[[[]]]') == 0",
  "inefficient_solution": "class Solution:\n    def minSwaps(self, s: str) -> int:\n        brackets = ['[', ']']\n        a = [0] * len(s)\n        b = [0] * len(s)\n        for i, c in enumerate(s):\n            if c == brackets[0]:\n                a[i] = 1\n            else:\n                b[i] = 1\n        stack = []\n        swaps = 0\n        for i in range(len(s)):\n            if a[i]:\n                while stack and stack[-1] == 1:\n                    stack.pop()\n                stack.append(0)\n            elif b[i]:\n                while stack and stack[-1] == 0:\n                    stack.pop()\n                stack.append(1)\n            if stack and stack[-1] == 1:\n                swaps += 1\n                stack.pop()\n        return swaps",
  "is_python": true
}