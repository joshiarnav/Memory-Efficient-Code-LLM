{
  "problem_idx": 1269,
  "task_name": "Number of Ways to Stay in the Same Place After Some Steps",
  "markdown_description": "\nYou have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\n\n\nGiven two integers `steps` and `arrLen`, return the number of ways such that your pointer is still at index `0` after **exactly** `steps` steps. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** steps = 3, arrLen = 2\n**Output:** 4\n**Explanation:** There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** steps = 2, arrLen = 4\n**Output:** 2\n**Explanation:** There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** steps = 4, arrLen = 2\n**Output:** 8\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= steps <= 500`\n* `1 <= arrLen <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        @cache\n        def dfs(i, j):\n            if i > j or i >= arrLen or i < 0 or j < 0:\n                return 0\n            if i == 0 and j == 0:\n                return 1\n            ans = 0\n            for k in range(-1, 2):\n                ans += dfs(i + k, j - 1)\n                ans %= mod\n            return ans\n\n        mod = 10**9 + 7\n        return dfs(0, steps)\n",
  "test_case_generator": "\nimport random\nfrom functools import cache\n\nclass Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        @cache\n        def dfs(i, j):\n            if i > j or i >= arrLen or i < 0 or j < 0:\n                return 0\n            if i == 0 and j == 0:\n                return 1\n            ans = 0\n            for k in range(-1, 2):\n                ans += dfs(i + k, j - 1)\n                ans %= mod\n            return ans\n\n        mod = 10**9 + 7\n        return dfs(0, steps)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for steps and arrLen\n    steps = random.randint(1, 10)\n    arrLen = random.randint(1, 10**3)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numWays(steps, arrLen)\n\n    return steps, arrLen, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        steps, arrLen, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numWays(steps, arrLen) == expected_result\n        print(f\"assert solution.numWays({steps}, {arrLen}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numWays({steps}, {arrLen}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    \n    # Save the results in a list named test_case_generator_results\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numWays(10, 919) == 2188\nassert solution.numWays(3, 832) == 4\nassert solution.numWays(1, 782) == 1\nassert solution.numWays(10, 69) == 2188\nassert solution.numWays(5, 85) == 21\nassert solution.numWays(5, 942) == 21\nassert solution.numWays(5, 881) == 21\nassert solution.numWays(10, 459) == 2188\nassert solution.numWays(6, 343) == 51\nassert solution.numWays(5, 531) == 21\nassert solution.numWays(9, 247) == 835\nassert solution.numWays(9, 126) == 835\nassert solution.numWays(5, 182) == 21\nassert solution.numWays(5, 5) == 21\nassert solution.numWays(2, 827) == 2\nassert solution.numWays(2, 2) == 2\nassert solution.numWays(3, 347) == 4\nassert solution.numWays(10, 852) == 2188\nassert solution.numWays(3, 722) == 4\nassert solution.numWays(6, 914) == 51\nassert solution.numWays(5, 568) == 21\nassert solution.numWays(9, 124) == 835\nassert solution.numWays(10, 690) == 2188\nassert solution.numWays(5, 620) == 21\nassert solution.numWays(2, 237) == 2\nassert solution.numWays(4, 128) == 9\nassert solution.numWays(1, 983) == 1\nassert solution.numWays(6, 417) == 51\nassert solution.numWays(5, 253) == 21\nassert solution.numWays(3, 678) == 4\nassert solution.numWays(3, 284) == 4\nassert solution.numWays(9, 929) == 835\nassert solution.numWays(10, 509) == 2188\nassert solution.numWays(9, 102) == 835\nassert solution.numWays(3, 607) == 4\nassert solution.numWays(9, 257) == 835\nassert solution.numWays(2, 331) == 2\nassert solution.numWays(5, 334) == 21\nassert solution.numWays(10, 895) == 2188\nassert solution.numWays(1, 873) == 1\nassert solution.numWays(1, 264) == 1\nassert solution.numWays(10, 678) == 2188\nassert solution.numWays(9, 98) == 835\nassert solution.numWays(3, 636) == 4\nassert solution.numWays(9, 202) == 835\nassert solution.numWays(9, 49) == 835\nassert solution.numWays(1, 467) == 1\nassert solution.numWays(6, 613) == 51\nassert solution.numWays(9, 616) == 835\nassert solution.numWays(1, 478) == 1\nassert solution.numWays(5, 217) == 21\nassert solution.numWays(4, 118) == 9\nassert solution.numWays(2, 64) == 2\nassert solution.numWays(7, 907) == 127\nassert solution.numWays(3, 899) == 4\nassert solution.numWays(4, 266) == 9\nassert solution.numWays(4, 931) == 9\nassert solution.numWays(10, 221) == 2188\nassert solution.numWays(3, 227) == 4\nassert solution.numWays(9, 114) == 835\nassert solution.numWays(1, 241) == 1\nassert solution.numWays(5, 198) == 21\nassert solution.numWays(8, 477) == 323\nassert solution.numWays(4, 884) == 9\nassert solution.numWays(2, 474) == 2\nassert solution.numWays(1, 344) == 1\nassert solution.numWays(9, 698) == 835\nassert solution.numWays(7, 275) == 127\nassert solution.numWays(1, 732) == 1\nassert solution.numWays(3, 150) == 4\nassert solution.numWays(8, 400) == 323\nassert solution.numWays(10, 338) == 2188\nassert solution.numWays(2, 416) == 2\nassert solution.numWays(6, 857) == 51\nassert solution.numWays(4, 659) == 9\nassert solution.numWays(7, 827) == 127\nassert solution.numWays(2, 503) == 2\nassert solution.numWays(7, 205) == 127\nassert solution.numWays(3, 270) == 4\nassert solution.numWays(2, 534) == 2\nassert solution.numWays(8, 277) == 323\nassert solution.numWays(10, 538) == 2188\nassert solution.numWays(6, 269) == 51\nassert solution.numWays(10, 610) == 2188\nassert solution.numWays(8, 335) == 323\nassert solution.numWays(9, 581) == 835\nassert solution.numWays(4, 432) == 9\nassert solution.numWays(5, 188) == 21\nassert solution.numWays(1, 39) == 1\nassert solution.numWays(6, 13) == 51\nassert solution.numWays(8, 903) == 323\nassert solution.numWays(1, 578) == 1\nassert solution.numWays(2, 9) == 2\nassert solution.numWays(4, 149) == 9\nassert solution.numWays(5, 862) == 21\nassert solution.numWays(3, 118) == 4\nassert solution.numWays(2, 771) == 2\nassert solution.numWays(7, 149) == 127\nassert solution.numWays(4, 194) == 9\nassert solution.numWays(6, 555) == 51",
  "inefficient_solution": "class Solution:\n    def numWays(self, steps: int, arrLen: int) -> int:\n        mod = 10**9 + 7\n        dp = [[[0 for _ in range(steps + 1)] for _ in range(steps + 1)] for _ in range(arrLen)]\n\n        for i in range(arrLen):\n            for j in range(steps + 1):\n                if i == 0 and j == 0:\n                    dp[i][j][0] = 1\n                else:\n                    for k in range(-1, 2):\n                        if i + k >= 0 and i + k < arrLen and j - 1 >= 0:\n                            dp[i][j][0] += dp[i + k][j - 1][0]\n                            dp[i][j][0] %= mod\n\n        ans = 0\n        for i in range(arrLen):\n            for j in range(steps + 1):\n                ans += dp[i][j][0]\n                ans %= mod\n\n        return ans",
  "is_python": true
}