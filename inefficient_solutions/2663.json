{
  "problem_idx": 2663,
  "task_name": "Lexicographically Smallest Beautiful String",
  "markdown_description": "\nA string is **beautiful** if:\n\n\n* It consists of the first `k` letters of the English lowercase alphabet.\n* It does not contain any substring of length `2` or more which is a palindrome.\n\n\nYou are given a beautiful string `s` of length `n` and a positive integer `k`.\n\n\nReturn *the lexicographically smallest string of length* `n`*, which is larger than* `s` *and is **beautiful***. If there is no such string, return an empty string.\n\n\nA string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`.\n\n\n* For example, `\"abcd\"` is lexicographically larger than `\"abcc\"` because the first position they differ is at the fourth character, and `d` is greater than `c`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcz\", k = 26\n**Output:** \"abda\"\n**Explanation:** The string \"abda\" is beautiful and lexicographically larger than the string \"abcz\".\nIt can be proven that there is no string that is lexicographically larger than the string \"abcz\", beautiful, and lexicographically smaller than the string \"abda\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"dc\", k = 4\n**Output:** \"\"\n**Explanation:** It can be proven that there is no string that is lexicographically larger than the string \"dc\" and is beautiful.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == s.length <= 105`\n* `4 <= k <= 26`\n* `s` is a beautiful string.\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n        n = len(s)\n        cs = list(s)\n        for i in range(n - 1, -1, -1):\n            p = ord(cs[i]) - ord('a') + 1\n            for j in range(p, k):\n                c = chr(ord('a') + j)\n                if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                    continue\n                cs[i] = c\n                for l in range(i + 1, n):\n                    for m in range(k):\n                        c = chr(ord('a') + m)\n                        if (l > 0 and cs[l - 1] == c) or (l > 1 and cs[l - 2] == c):\n                            continue\n                        cs[l] = c\n                        break\n                return ''.join(cs)\n        return ''\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n        n = len(s)\n        cs = list(s)\n        for i in range(n - 1, -1, -1):\n            p = ord(cs[i]) - ord('a') + 1\n            for j in range(p, k):\n                c = chr(ord('a') + j)\n                if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                    continue\n                cs[i] = c\n                for l in range(i + 1, n):\n                    for m in range(k):\n                        c = chr(ord('a') + m)\n                        if (l > 0 and cs[l - 1] == c) or (l > 1 and cs[l - 2] == c):\n                            continue\n                        cs[l] = c\n                        break\n                return ''.join(cs)\n        return ''\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random beautiful string\n    n = random.randint(1, 10)\n    k = random.randint(4, 26)\n    s = ''.join(random.choices(string.ascii_lowercase[:k], k=n))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestBeautifulString(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestBeautifulString(s, k) == expected_result\n        if expected_result != '':\n            print(f\"assert solution.smallestBeautifulString({s}, {k}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.smallestBeautifulString({s}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestBeautifulString(de, 7) == df\nassert solution.smallestBeautifulString(ailjcbgmbn, 14) == ailjcbgmca\nassert solution.smallestBeautifulString(s, 20) == t\nassert solution.smallestBeautifulString(aadd, 6) == aade\nassert solution.smallestBeautifulString(mqszbz, 26) == mqszca\nassert solution.smallestBeautifulString(gakanjudt, 21) == gakanjuea\nassert solution.smallestBeautifulString(c, 10) == d\nassert solution.smallestBeautifulString(ifqouicqd, 23) == ifqouicqe\nassert solution.smallestBeautifulString(fggd, 14) == fgge\nassert solution.smallestBeautifulString(aaffcdab, 7) == aaffcdac\nassert solution.smallestBeautifulString(bnndok, 16) == bnndol\nassert solution.smallestBeautifulString(bgaeh, 8) == bgafb\nassert solution.smallestBeautifulString(agfd, 10) == agfe\nassert solution.smallestBeautifulString(md, 15) == me\nassert solution.smallestBeautifulString(mnjcghjqga, 18) == mnjcghjqgb\nassert solution.smallestBeautifulString(dhbdg, 8) == dhbdh\nassert solution.smallestBeautifulString(tycu, 26) == tycv\nassert solution.smallestBeautifulString(cededb, 6) == cededc\nassert solution.smallestBeautifulString(ioijloih, 15) == ioijloij\nassert solution.smallestBeautifulString(jccdeijd, 11) == jccdeije\nassert solution.smallestBeautifulString(cedbaa, 6) == cedbac\nassert solution.smallestBeautifulString(kgadmdnla, 15) == kgadmdnlb\nassert solution.smallestBeautifulString(j, 13) == k\nassert solution.smallestBeautifulString(peir, 22) == peis\nassert solution.smallestBeautifulString(egd, 10) == egf\nassert solution.smallestBeautifulString(qfah, 20) == qfai\nassert solution.smallestBeautifulString(gdd, 8) == gde\nassert solution.smallestBeautifulString(bb, 4) == bc\nassert solution.smallestBeautifulString(almlor, 20) == almlos\nassert solution.smallestBeautifulString(isopfj, 24) == isopfk\nassert solution.smallestBeautifulString(eci, 14) == ecj\nassert solution.smallestBeautifulString(fsnifmd, 26) == fsnifme\nassert solution.smallestBeautifulString(fab, 6) == fac\nassert solution.smallestBeautifulString(gadafahdbf, 8) == gadafahdbg\nassert solution.smallestBeautifulString(aabcccda, 6) == aabcccdb\nassert solution.smallestBeautifulString(xucl, 26) == xucm\nassert solution.smallestBeautifulString(ge, 8) == gf\nassert solution.smallestBeautifulString(gccaicca, 9) == gccaiccb\nassert solution.smallestBeautifulString(okmjvlpf, 23) == okmjvlpg\nassert solution.smallestBeautifulString(qadfleinlq, 18) == qadfleinlr\nassert solution.smallestBeautifulString(fbe, 6) == fca\nassert solution.smallestBeautifulString(f, 13) == g\nassert solution.smallestBeautifulString(dhge, 8) == dhgf\nassert solution.smallestBeautifulString(fiedf, 10) == fiedg\nassert solution.smallestBeautifulString(ighehe, 9) == ighehf\nassert solution.smallestBeautifulString(caec, 5) == caed\nassert solution.smallestBeautifulString(ggiclgajr, 18) == ggiclgakb\nassert solution.smallestBeautifulString(gfbkrn, 25) == gfbkro\nassert solution.smallestBeautifulString(chhheagffa, 9) == chhheagffb\nassert solution.smallestBeautifulString(kfkhcaea, 13) == kfkhcaeb\nassert solution.smallestBeautifulString(bakeeoaga, 16) == bakeeoagb\nassert solution.smallestBeautifulString(haaghibf, 14) == haaghibg\nassert solution.smallestBeautifulString(bfkj, 12) == bfkl\nassert solution.smallestBeautifulString(enb, 18) == enc\nassert solution.smallestBeautifulString(fbekl, 19) == fbekm\nassert solution.smallestBeautifulString(nlhrea, 18) == nlhreb\nassert solution.smallestBeautifulString(a, 8) == b\nassert solution.smallestBeautifulString(h, 21) == i\nassert solution.smallestBeautifulString(eljip, 23) == eljiq\nassert solution.smallestBeautifulString(mks, 22) == mkt\nassert solution.smallestBeautifulString(yw, 25) == yx\nassert solution.smallestBeautifulString(lnk, 21) == lnm\nassert solution.smallestBeautifulString(dbccaabcad, 4) == dbccaabcda\nassert solution.smallestBeautifulString(na, 17) == nb\nassert solution.smallestBeautifulString(ghh, 8) == hab\nassert solution.smallestBeautifulString(mgdbngkbr, 20) == mgdbngkbs\nassert solution.smallestBeautifulString(ooifpj, 17) == ooifpk\nassert solution.smallestBeautifulString(olgilpl, 20) == olgilpm\nassert solution.smallestBeautifulString(tmet, 20) == tmfa\nassert solution.smallestBeautifulString(gcmmmqkue, 21) == gcmmmqkuf\nassert solution.smallestBeautifulString(kgdh, 18) == kgdi\nassert solution.smallestBeautifulString(pb, 20) == pc\nassert solution.smallestBeautifulString(kvv, 25) == kvw\nassert solution.smallestBeautifulString(gd, 13) == ge\nassert solution.smallestBeautifulString(ygenwwgu, 26) == ygenwwgv\nassert solution.smallestBeautifulString(e, 9) == f\nassert solution.smallestBeautifulString(igha, 10) == ighb\nassert solution.smallestBeautifulString(cbhcid, 9) == cbhcie\nassert solution.smallestBeautifulString(ecaffadf, 6) == ecaffaeb\nassert solution.smallestBeautifulString(gcetxrjo, 24) == gcetxrjp\nassert solution.smallestBeautifulString(jbdbbdcg, 10) == jbdbbdch\nassert solution.smallestBeautifulString(hmdkgamjb, 17) == hmdkgamjc\nassert solution.smallestBeautifulString(tsnpf, 20) == tsnpg\nassert solution.smallestBeautifulString(mjhe, 15) == mjhf\nassert solution.smallestBeautifulString(ad, 5) == ae\nassert solution.smallestBeautifulString(o, 23) == p\nassert solution.smallestBeautifulString(fjinao, 21) == fjinap\nassert solution.smallestBeautifulString(dafab, 6) == dafac\nassert solution.smallestBeautifulString(iugibrmj, 24) == iugibrmk\nassert solution.smallestBeautifulString(emjdkjnka, 16) == emjdkjnkb\nassert solution.smallestBeautifulString(aabeaecfb, 9) == aabeaecfd\nassert solution.smallestBeautifulString(j, 12) == k\nassert solution.smallestBeautifulString(iagnfopvl, 23) == iagnfopvm\nassert solution.smallestBeautifulString(f, 10) == g\nassert solution.smallestBeautifulString(fdff, 25) == fdfg\nassert solution.smallestBeautifulString(ij, 11) == ik\nassert solution.smallestBeautifulString(caba, 4) == cabc\nassert solution.smallestBeautifulString(caba, 4) == cabc",
  "inefficient_solution": "class Solution:\n    def smallestBeautifulString(self, s: str, k: int) -> str:\n        n = len(s)\n        cs = [c for c in s for _ in range(100)]\n\n        for i in range(n - 1, -1, -1):\n            p = ord(cs[i]) - ord('a') + 1\n            for j in range(p, k):\n                c = chr(ord('a') + j)\n                if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                    continue\n                cs[i] = c\n                for l in range(i + 1, n):\n                    for m in range(k):\n                        c = chr(ord('a') + m)\n                        if (l > 0 and cs[l - 1] == c) or (l > 1 and cs[l - 2] == c):\n                            continue\n                        cs[l] = c\n                        break\n                break\n            else:\n                cs = cs[:i] + [0] * (i + 1 - len(cs)) + cs[i + 1:]\n\n        for _ in range(100):\n            for i in range(n):\n                for j in range(k):\n                    c = chr(ord('a') + j)\n                    cs[i] = c\n                    if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                        break\n                else:\n                    break\n            else:\n                break\n\n        for i in range(n):\n            for j in range(k):\n                c = chr(ord('a') + j)\n                cs[i] = c\n                if (i > 0 and cs[i - 1] == c) or (i > 1 and cs[i - 2] == c):\n                    break\n\n        return ''.join(cs).rstrip('0')",
  "is_python": true
}