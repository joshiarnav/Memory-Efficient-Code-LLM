{
  "problem_idx": 2860,
  "task_name": "Happy Students",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` of length `n` where `n` is the total number of students in the class. The class teacher tries to select a group of students so that all the students remain happy.\n\n\nThe `ith` student will become happy if one of these two conditions is met:\n\n\n* The student is selected and the total number of selected students is **strictly greater than** `nums[i]`.\n* The student is not selected and the total number of selected students is **strictly** **less than** `nums[i]`.\n\n\nReturn *the number of ways to select a group of students so that everyone remains happy.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1]\n**Output:** 2\n**Explanation:** \nThe two possible ways are:\nThe class teacher selects no student.\nThe class teacher selects both students to form the group. \nIf the class teacher selects just one student to form a group then the both students will not be happy. Therefore, there are only two possible ways.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,0,3,3,6,7,2,7]\n**Output:** 3\n**Explanation:** \nThe three possible ways are:\nThe class teacher selects the student with index = 1 to form the group.\nThe class teacher selects the students with index = 1, 2, 3, 6 to form the group.\nThe class teacher selects all the students to form the group.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] < nums.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def countWays(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        ans = 0\n        for i in range(n + 1):\n            if i and nums[i - 1] >= i:\n                continue\n            if i < n and nums[i] <= i:\n                continue\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def countWays(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        ans = 0\n        for i in range(n + 1):\n            if i and nums[i - 1] >= i:\n                continue\n            if i < n and nums[i] <= i:\n                continue\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(1, 101), k=random.randint(1, 11))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countWays(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countWays(nums) == expected_result\n        print(f\"assert solution.countWays({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countWays({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countWays([1, 15, 37, 59]) == 0\nassert solution.countWays([17, 31, 44, 48, 49, 65, 95]) == 0\nassert solution.countWays([6, 14, 23, 38, 42, 63, 83]) == 0\nassert solution.countWays([94]) == 0\nassert solution.countWays([1, 10, 43, 60, 80, 81, 87, 92, 92]) == 0\nassert solution.countWays([1, 8, 11, 16, 27, 35, 44, 53, 61, 75]) == 0\nassert solution.countWays([12, 15, 28, 29, 32, 49, 51, 54, 56, 66, 82]) == 0\nassert solution.countWays([1, 10, 19, 25, 26, 26, 38, 50, 55, 69, 94]) == 0\nassert solution.countWays([5, 41, 46, 50, 56, 60, 68, 76, 83, 84]) == 0\nassert solution.countWays([11, 17, 19, 30, 38, 83, 90, 93, 96, 100]) == 0\nassert solution.countWays([16, 30, 79]) == 0\nassert solution.countWays([6, 18, 21, 34, 46, 70, 77, 78, 80, 82, 97]) == 0\nassert solution.countWays([55]) == 0\nassert solution.countWays([5, 6, 13, 23, 41, 45, 62, 70, 72, 83, 84]) == 0\nassert solution.countWays([2, 10, 16, 27, 33, 46, 80, 84, 88, 92, 97]) == 0\nassert solution.countWays([2, 68, 71, 94, 97]) == 0\nassert solution.countWays([23, 31, 42, 54, 59, 68, 100]) == 0\nassert solution.countWays([9, 16, 21, 25, 49, 49, 90, 100]) == 0\nassert solution.countWays([22, 47, 57, 65, 68]) == 0\nassert solution.countWays([23, 48, 82, 83, 85, 86, 89, 90, 99]) == 0\nassert solution.countWays([8, 16, 16, 17, 29, 34, 41, 52, 62, 79, 85]) == 0\nassert solution.countWays([27, 46, 47, 69]) == 0\nassert solution.countWays([19, 33, 39, 57, 57]) == 0\nassert solution.countWays([19, 38, 52, 62, 73]) == 0\nassert solution.countWays([5, 96]) == 0\nassert solution.countWays([9, 20, 25, 68, 72]) == 0\nassert solution.countWays([10, 23, 26, 36, 40, 40, 57, 90, 95]) == 0\nassert solution.countWays([30, 55, 63, 80, 82, 94, 98, 100]) == 0\nassert solution.countWays([57, 97]) == 0\nassert solution.countWays([46, 69]) == 0\nassert solution.countWays([61]) == 0\nassert solution.countWays([15, 20]) == 0\nassert solution.countWays([14, 17, 31, 67, 71, 73]) == 0\nassert solution.countWays([47, 97]) == 0\nassert solution.countWays([1, 2, 20, 37, 39, 64, 64, 69, 88, 98]) == 0\nassert solution.countWays([17, 29, 34, 34, 52, 54, 76, 76, 80, 88, 96]) == 0\nassert solution.countWays([17, 25, 51, 61, 73, 83, 86, 95, 95, 99]) == 0\nassert solution.countWays([70]) == 0\nassert solution.countWays([5]) == 0\nassert solution.countWays([23, 25, 27, 29, 30, 32, 42, 64, 70, 70, 95]) == 0\nassert solution.countWays([12, 29, 49, 51, 60, 66, 69, 88, 94]) == 0\nassert solution.countWays([20, 61, 68, 84, 85, 93, 94]) == 0\nassert solution.countWays([18, 32, 33, 47]) == 0\nassert solution.countWays([4, 19, 20, 20, 21, 45, 51, 91]) == 0\nassert solution.countWays([15, 21, 22, 27, 31, 60, 64, 85]) == 0\nassert solution.countWays([43, 44, 44, 48, 49, 50, 83, 84]) == 0\nassert solution.countWays([11, 18, 50, 55, 58, 72, 73, 85, 91, 93, 93]) == 0\nassert solution.countWays([6, 11, 27, 29, 32, 36, 55, 63, 65, 93]) == 0\nassert solution.countWays([2, 39, 54, 66]) == 0\nassert solution.countWays([80, 81]) == 0\nassert solution.countWays([67]) == 0\nassert solution.countWays([21, 22, 26, 92]) == 0\nassert solution.countWays([5, 19, 23, 28, 39, 69, 80, 84, 87, 94]) == 0\nassert solution.countWays([12, 13, 13, 29, 32, 70, 92]) == 0\nassert solution.countWays([5, 17, 28, 31, 72, 81]) == 0\nassert solution.countWays([10, 14, 39, 41, 46, 50, 64, 91]) == 0\nassert solution.countWays([5, 48, 60, 82, 97]) == 0\nassert solution.countWays([13, 13, 20, 29, 35, 49]) == 0\nassert solution.countWays([19]) == 0\nassert solution.countWays([3, 6, 8, 43, 45, 98]) == 0\nassert solution.countWays([5, 6, 16, 37, 37, 66, 80, 82, 83, 91]) == 0\nassert solution.countWays([93]) == 0\nassert solution.countWays([14, 28, 89, 92]) == 0\nassert solution.countWays([9, 13, 15, 21, 37, 39, 58, 65, 83]) == 0\nassert solution.countWays([4, 19, 30, 54, 55, 55, 88]) == 0\nassert solution.countWays([20, 27, 28, 37, 55, 66, 66, 71, 92]) == 0\nassert solution.countWays([17, 44, 49, 52, 53, 82, 83, 94, 95, 97]) == 0\nassert solution.countWays([26, 32, 66]) == 0\nassert solution.countWays([1, 21, 47, 78, 91]) == 0\nassert solution.countWays([6, 6, 25, 98, 99]) == 0\nassert solution.countWays([4, 8, 21, 27, 29, 45, 47, 56, 81]) == 0\nassert solution.countWays([37, 46, 61, 62, 85, 98, 100]) == 0\nassert solution.countWays([36, 48, 64, 94]) == 0\nassert solution.countWays([50, 55]) == 0\nassert solution.countWays([23, 23, 25, 39, 40, 46, 51, 55, 66, 75, 91]) == 0\nassert solution.countWays([12, 14, 23, 27, 40, 51, 54, 64, 81, 100]) == 0\nassert solution.countWays([5, 12, 19, 24, 26, 64, 70, 93, 100]) == 0\nassert solution.countWays([16, 25, 43, 45, 70, 71, 78, 88, 98]) == 0\nassert solution.countWays([15, 26, 38, 38, 42, 48, 51, 65, 75, 81, 95]) == 0\nassert solution.countWays([32, 38, 43, 55, 64, 73, 76]) == 0\nassert solution.countWays([21, 38, 42, 57, 60, 71, 80, 85]) == 0\nassert solution.countWays([5, 5, 14, 15, 54, 73]) == 0\nassert solution.countWays([30, 51]) == 0\nassert solution.countWays([13, 50, 53, 55, 59, 74, 95]) == 0\nassert solution.countWays([2, 6, 20, 23, 40, 66, 76, 80, 85, 89, 95]) == 0\nassert solution.countWays([21, 39, 45, 47, 48, 48, 60, 66, 93]) == 0\nassert solution.countWays([9, 34, 58]) == 0\nassert solution.countWays([3, 11, 35, 43, 67, 72, 75, 79, 92]) == 0\nassert solution.countWays([17, 26]) == 0\nassert solution.countWays([6, 17, 42, 46, 52, 54, 66]) == 0\nassert solution.countWays([54, 59, 85]) == 0\nassert solution.countWays([1, 4, 8, 8, 15, 23, 83, 88, 89]) == 0\nassert solution.countWays([40, 41, 61, 79, 85, 86]) == 0\nassert solution.countWays([4]) == 0\nassert solution.countWays([22, 33, 40, 40, 60, 64, 74, 79]) == 0\nassert solution.countWays([11, 15, 29, 34, 39, 39, 41, 43, 84, 96, 98]) == 0\nassert solution.countWays([9, 30, 44, 48, 66, 75, 84, 87]) == 0\nassert solution.countWays([6, 8, 15, 31, 60, 62, 79, 82]) == 0\nassert solution.countWays([1, 19, 49, 54, 58, 85, 92]) == 0\nassert solution.countWays([14, 18, 26, 68, 100]) == 0",
  "inefficient_solution": "class Solution:\n    def countWays(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        max_num = 0\n        ways = []\n        for _ in range(10**6):  # arbitrary large number of iterations\n            selected = [False] * n\n            count = 0\n            for i in range(n):\n                if selected[i]:\n                    count += 1\n                if count > nums[i]:\n                    selected[i] = True\n                elif count < nums[i]:\n                    selected[i] = False\n            ways.append(count)\n        ways = list(set(ways))\n        return len(ways)",
  "is_python": true
}