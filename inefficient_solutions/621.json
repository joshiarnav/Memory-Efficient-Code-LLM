{
  "problem_idx": 621,
  "task_name": "Task Scheduler",
  "markdown_description": "\nGiven a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\n\n\nHowever, there is a non-negative integer\u00a0`n` that represents the cooldown period between\u00a0two **same tasks**\u00a0(the same letter in the array), that is that there must be at least `n` units of time between any two same tasks.\n\n\nReturn *the least number of units of times that the CPU will take to finish all the given tasks*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\n**Output:** 8\n**Explanation:** \nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\n**Output:** 6\n**Explanation:** On this case any permutation of size 6 would work since n = 0.\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\nAnd so on.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\n**Output:** 16\n**Explanation:** \nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= task.length <= 104`\n* `tasks[i]` is upper-case English letter.\n* The integer `n` is in the range `[0, 100]`.\n\n\n",
  "canonical_solution": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        cnt = Counter(tasks)\n        x = max(cnt.values())\n        s = sum(v == x for v in cnt.values())\n        return max(len(tasks), (x - 1) * (n + 1) + s)\n",
  "test_case_generator": "\nimport random\nimport string\n\nclass Solution:\n    def leastInterval(self, tasks, n):\n        cnt = Counter(tasks)\n        x = max(cnt.values())\n        s = sum(v == x for v in cnt.values())\n        return max(len(tasks), (x - 1) * (n + 1) + s)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random tasks list\n    tasks = random.choices(string.ascii_uppercase, k=random.randint(1, 10))\n    \n    # Generate a random cooldown period\n    n = random.randint(0, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.leastInterval(tasks, n)\n\n    return tasks, n, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tasks, n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.leastInterval(tasks, n) == expected_result\n        print(f\"assert solution.leastInterval({tasks}, {n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.leastInterval({tasks}, {n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.leastInterval(['U', 'P', 'P', 'B', 'N'], 96) == 98\nassert solution.leastInterval(['B', 'P', 'U', 'U', 'Y', 'F', 'W', 'R', 'N', 'S'], 89) == 91\nassert solution.leastInterval(['V', 'U', 'G', 'E', 'H', 'D', 'K'], 65) == 7\nassert solution.leastInterval(['H'], 80) == 1\nassert solution.leastInterval(['A'], 37) == 1\nassert solution.leastInterval(['W', 'Q', 'P', 'K', 'R', 'P', 'I', 'B', 'L', 'C'], 75) == 77\nassert solution.leastInterval(['C', 'Q'], 36) == 2\nassert solution.leastInterval(['L', 'D'], 25) == 2\nassert solution.leastInterval(['E', 'B'], 16) == 2\nassert solution.leastInterval(['T', 'F', 'E', 'D', 'I'], 71) == 5\nassert solution.leastInterval(['N', 'O', 'B', 'P', 'F', 'B', 'U'], 39) == 41\nassert solution.leastInterval(['O', 'A', 'T', 'D', 'Z', 'G', 'M', 'R', 'Q'], 50) == 9\nassert solution.leastInterval(['H', 'Z', 'M', 'S', 'J', 'O', 'N', 'W', 'K'], 75) == 9\nassert solution.leastInterval(['D', 'B', 'A', 'B', 'A', 'Q', 'R', 'U', 'E', 'C'], 13) == 16\nassert solution.leastInterval(['N', 'B'], 68) == 2\nassert solution.leastInterval(['Q'], 99) == 1\nassert solution.leastInterval(['T', 'E', 'R', 'V', 'N', 'T', 'N'], 78) == 81\nassert solution.leastInterval(['F', 'H', 'V', 'R', 'G'], 84) == 5\nassert solution.leastInterval(['A', 'E'], 12) == 2\nassert solution.leastInterval(['J', 'B', 'O'], 80) == 3\nassert solution.leastInterval(['L', 'I', 'W', 'W', 'L'], 33) == 36\nassert solution.leastInterval(['S', 'J', 'F', 'P', 'X', 'Z'], 83) == 6\nassert solution.leastInterval(['G', 'G', 'O', 'A', 'H', 'P', 'V', 'G'], 4) == 11\nassert solution.leastInterval(['T', 'V', 'J'], 60) == 3\nassert solution.leastInterval(['N', 'S', 'I', 'N', 'K', 'R', 'C', 'O', 'D', 'G'], 56) == 58\nassert solution.leastInterval(['U', 'T'], 28) == 2\nassert solution.leastInterval(['A', 'U', 'F', 'X', 'U'], 65) == 67\nassert solution.leastInterval(['J', 'J', 'T', 'Q', 'B', 'E', 'G', 'I', 'O', 'A'], 75) == 77\nassert solution.leastInterval(['S', 'T', 'L', 'S', 'K', 'P', 'H', 'S', 'X'], 5) == 13\nassert solution.leastInterval(['A', 'T', 'B', 'S', 'L', 'P', 'U', 'Y'], 39) == 8\nassert solution.leastInterval(['T', 'S', 'B', 'V', 'J', 'E'], 57) == 6\nassert solution.leastInterval(['M', 'Z', 'E', 'L', 'H', 'N', 'I'], 80) == 7\nassert solution.leastInterval(['J', 'L', 'J', 'U', 'G'], 68) == 70\nassert solution.leastInterval(['T', 'K', 'B', 'L', 'F', 'R', 'Z', 'F', 'V', 'N'], 44) == 46\nassert solution.leastInterval(['D', 'M', 'E'], 22) == 3\nassert solution.leastInterval(['G', 'B', 'I', 'B', 'I', 'X', 'S', 'K', 'V'], 33) == 36\nassert solution.leastInterval(['I', 'K', 'U', 'X', 'F', 'X', 'I'], 58) == 61\nassert solution.leastInterval(['V', 'Q', 'F', 'E', 'C', 'F'], 59) == 61\nassert solution.leastInterval(['L', 'Y', 'F'], 80) == 3\nassert solution.leastInterval(['J', 'M', 'C', 'B', 'E', 'P'], 15) == 6\nassert solution.leastInterval(['F', 'B', 'L'], 48) == 3\nassert solution.leastInterval(['I', 'G', 'L', 'K'], 62) == 4\nassert solution.leastInterval(['A', 'V', 'W', 'Z', 'N', 'Y', 'W', 'X'], 46) == 48\nassert solution.leastInterval(['N', 'M', 'J'], 9) == 3\nassert solution.leastInterval(['V', 'T'], 69) == 2\nassert solution.leastInterval(['P', 'N'], 62) == 2\nassert solution.leastInterval(['P', 'I', 'J', 'A', 'S', 'S', 'Y', 'M', 'X', 'O'], 72) == 74\nassert solution.leastInterval(['E', 'J', 'R', 'N'], 75) == 4\nassert solution.leastInterval(['U', 'E', 'H', 'L', 'C', 'N'], 52) == 6\nassert solution.leastInterval(['G', 'K', 'E', 'D', 'T', 'A'], 84) == 6\nassert solution.leastInterval(['X', 'V', 'K', 'L'], 15) == 4\nassert solution.leastInterval(['C', 'K', 'N'], 8) == 3\nassert solution.leastInterval(['S', 'V', 'A', 'K', 'Q', 'H', 'J', 'V', 'V'], 32) == 67\nassert solution.leastInterval(['I', 'E', 'J', 'I', 'A', 'H', 'U', 'N', 'B', 'M'], 53) == 55\nassert solution.leastInterval(['H', 'E', 'C', 'I', 'N', 'M'], 56) == 6\nassert solution.leastInterval(['R'], 4) == 1\nassert solution.leastInterval(['A', 'E', 'M', 'W', 'O', 'G'], 68) == 6\nassert solution.leastInterval(['E'], 24) == 1\nassert solution.leastInterval(['T', 'V', 'Q'], 70) == 3\nassert solution.leastInterval(['P', 'T', 'L', 'O'], 72) == 4\nassert solution.leastInterval(['G', 'W', 'X', 'R', 'O', 'T', 'U', 'Y', 'M'], 48) == 9\nassert solution.leastInterval(['I'], 74) == 1\nassert solution.leastInterval(['H', 'J', 'P', 'D', 'W', 'Y', 'D'], 60) == 62\nassert solution.leastInterval(['S', 'O', 'F', 'T', 'Q', 'V', 'Y', 'P', 'A', 'Q'], 0) == 10\nassert solution.leastInterval(['L', 'Y', 'E', 'G', 'M', 'H', 'U', 'J', 'I'], 86) == 9\nassert solution.leastInterval(['L'], 25) == 1\nassert solution.leastInterval(['B', 'I', 'W'], 69) == 3\nassert solution.leastInterval(['Z', 'T', 'H', 'N', 'M', 'A', 'U', 'X'], 71) == 8\nassert solution.leastInterval(['M', 'Y', 'N', 'G', 'Y', 'Z', 'D', 'S'], 70) == 72\nassert solution.leastInterval(['Q', 'V', 'Y', 'W', 'A', 'R', 'T'], 8) == 7\nassert solution.leastInterval(['L', 'K', 'M', 'G', 'K', 'H', 'M', 'G'], 20) == 24\nassert solution.leastInterval(['C', 'C', 'H', 'B'], 24) == 26\nassert solution.leastInterval(['R'], 45) == 1\nassert solution.leastInterval(['H', 'K', 'J', 'Y', 'R', 'X', 'O', 'Q', 'Q'], 26) == 28\nassert solution.leastInterval(['D', 'J'], 9) == 2\nassert solution.leastInterval(['E', 'G'], 83) == 2\nassert solution.leastInterval(['R', 'P'], 45) == 2\nassert solution.leastInterval(['S'], 53) == 1\nassert solution.leastInterval(['N', 'G'], 0) == 2\nassert solution.leastInterval(['H', 'P'], 78) == 2\nassert solution.leastInterval(['U', 'M', 'W', 'R'], 34) == 4\nassert solution.leastInterval(['V', 'O', 'Q', 'Z', 'S', 'C', 'B'], 12) == 7\nassert solution.leastInterval(['N', 'F'], 70) == 2\nassert solution.leastInterval(['H', 'N', 'O', 'B', 'D', 'N', 'P', 'J', 'I'], 94) == 96\nassert solution.leastInterval(['K', 'U', 'O', 'F', 'B', 'X'], 21) == 6\nassert solution.leastInterval(['P', 'O', 'W', 'V', 'A', 'A', 'C'], 80) == 82\nassert solution.leastInterval(['P', 'H', 'N'], 58) == 3\nassert solution.leastInterval(['E'], 71) == 1\nassert solution.leastInterval(['Q', 'U', 'X', 'Q', 'M'], 48) == 50\nassert solution.leastInterval(['T'], 75) == 1\nassert solution.leastInterval(['M', 'Q', 'Y', 'G', 'T', 'W', 'O', 'B'], 59) == 8\nassert solution.leastInterval(['V', 'A', 'T', 'K', 'F'], 86) == 5\nassert solution.leastInterval(['X', 'E', 'O', 'Q', 'F', 'V', 'T', 'C', 'J', 'F'], 24) == 26\nassert solution.leastInterval(['Z', 'A', 'M', 'D', 'G', 'Y', 'P'], 92) == 7\nassert solution.leastInterval(['K'], 61) == 1\nassert solution.leastInterval(['Q'], 58) == 1\nassert solution.leastInterval(['S', 'I', 'Y', 'C', 'V', 'D', 'B', 'X', 'F'], 83) == 9\nassert solution.leastInterval(['U', 'T', 'K', 'D', 'Z', 'H'], 73) == 6\nassert solution.leastInterval(['R', 'B'], 45) == 2\nassert solution.leastInterval(['H', 'P', 'L', 'B', 'W', 'K', 'R', 'H', 'P'], 42) == 45",
  "inefficient_solution": "class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        # Create a dictionary to count the occurrence of each task\n        task_count = {}\n        for task in tasks:\n            if task not in task_count:\n                task_count[task] = 0\n            task_count[task] += 1\n        \n        # Create a list to store the count of each task\n        task_counts = [0] * len(task_count)\n        for key, value in task_count.items():\n            task_counts[value] += 1\n        \n        # Create a list to store the count of each task for each unit of time\n        time_units = [0] * (n + 1)\n        for i in range(len(task_counts)):\n            for j in range(i):\n                time_units[j] += task_counts[i]\n        \n        # Calculate the maximum number of idle units in a row\n        max_idle_units = max(time_units)\n        \n        # Calculate the number of tasks that can be done in max_idle_units units\n        done_tasks = 0\n        for i in range(n + 1):\n            done_tasks += time_units[i]\n        \n        # Calculate the total number of units needed\n        total_units = len(tasks)\n        if max_idle_units > 0:\n            total_units = max(len(tasks), (max_idle_units - 1) * (n + 1) + done_tasks)\n        else:\n            total_units = len(tasks)\n        \n        return total_units",
  "is_python": true
}