{
  "problem_idx": 910,
  "task_name": "Smallest Range II",
  "markdown_description": "\nYou are given an integer array `nums` and an integer `k`.\n\n\nFor each index `i` where `0 <= i < nums.length`, change `nums[i]` to be either `nums[i] + k` or `nums[i] - k`.\n\n\nThe **score** of `nums` is the difference between the maximum and minimum elements in `nums`.\n\n\nReturn *the minimum **score** of* `nums` *after changing the values at each index*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1], k = 0\n**Output:** 0\n**Explanation:** The score is max(nums) - min(nums) = 1 - 1 = 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,10], k = 2\n**Output:** 6\n**Explanation:** Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,3,6], k = 3\n**Output:** 3\n**Explanation:** Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `0 <= nums[i] <= 104`\n* `0 <= k <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestRangeII(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans = nums[-1] - nums[0]\n        for i in range(1, len(nums)):\n            mi = min(nums[0] + k, nums[i] - k)\n            mx = max(nums[i - 1] + k, nums[-1] - k)\n            ans = min(ans, mx - mi)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestRangeII(self, nums, k):\n        nums.sort()\n        ans = nums[-1] - nums[0]\n        for i in range(1, len(nums)):\n            mi = min(nums[0] + k, nums[i] - k)\n            mx = max(nums[i - 1] + k, nums[-1] - k)\n            ans = min(ans, mx - mi)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(1, 10))\n\n    # Generate a random value for k\n    k = random.randint(0, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestRangeII(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestRangeII(nums, k) == expected_result\n        print(f\"assert solution.smallestRangeII({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.smallestRangeII({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestRangeII([15, 43, 54, 56, 81, 87, 92, 100], 99) == 85\nassert solution.smallestRangeII([4, 20, 45, 49, 56, 73, 77, 80, 81, 94], 11) == 68\nassert solution.smallestRangeII([4, 22, 23, 37, 41, 53, 63, 88], 11) == 62\nassert solution.smallestRangeII([18, 44, 82], 49) == 60\nassert solution.smallestRangeII([10, 13, 18, 20, 38, 42], 37) == 32\nassert solution.smallestRangeII([2, 12, 50, 55, 68, 75], 9) == 55\nassert solution.smallestRangeII([1, 10, 27, 33, 61, 69, 78, 80, 88], 49) == 70\nassert solution.smallestRangeII([39, 58, 60, 68, 70, 80], 47) == 41\nassert solution.smallestRangeII([30, 31, 33, 66, 85, 86, 87], 55) == 57\nassert solution.smallestRangeII([19, 22, 29, 33, 35, 62, 84, 91, 93, 99], 100) == 80\nassert solution.smallestRangeII([8, 19, 29, 44, 47, 51, 62, 66, 98, 100], 86) == 92\nassert solution.smallestRangeII([13, 46, 66, 71, 98], 74) == 85\nassert solution.smallestRangeII([4, 14, 23, 58, 65, 87], 90) == 83\nassert solution.smallestRangeII([13, 16, 41, 99], 50) == 42\nassert solution.smallestRangeII([4, 6, 37, 100], 98) == 96\nassert solution.smallestRangeII([6, 23, 36, 39, 40, 44, 56, 77, 86, 99], 87) == 93\nassert solution.smallestRangeII([15, 17, 46, 53, 56, 58, 76, 77, 83, 91], 69) == 76\nassert solution.smallestRangeII([8, 23, 66], 51) == 58\nassert solution.smallestRangeII([3, 7, 19, 89], 22) == 42\nassert solution.smallestRangeII([8, 21, 25, 44, 51, 64, 84, 91, 95], 95) == 87\nassert solution.smallestRangeII([4, 27, 48, 65, 67, 77], 29) == 37\nassert solution.smallestRangeII([23, 25, 27, 30, 50, 51, 60, 79, 92], 71) == 69\nassert solution.smallestRangeII([27, 39, 40, 42, 79, 98], 21) == 29\nassert solution.smallestRangeII([2, 11, 33, 57, 64, 69, 80, 82], 91) == 80\nassert solution.smallestRangeII([43, 45, 68, 93], 44) == 50\nassert solution.smallestRangeII([17, 57, 72], 31) == 22\nassert solution.smallestRangeII([3, 20, 27, 36, 38, 46, 67, 76, 96], 36) == 51\nassert solution.smallestRangeII([27, 73], 51) == 46\nassert solution.smallestRangeII([7, 14, 18, 63, 80], 55) == 65\nassert solution.smallestRangeII([59, 60, 61, 79, 81], 23) == 22\nassert solution.smallestRangeII([22, 69, 100], 75) == 78\nassert solution.smallestRangeII([5, 13, 42, 54, 63, 99], 23) == 48\nassert solution.smallestRangeII([74], 71) == 0\nassert solution.smallestRangeII([28, 46, 49, 61, 93], 74) == 65\nassert solution.smallestRangeII([26, 34, 46, 50, 51, 74, 88], 5) == 52\nassert solution.smallestRangeII([3, 4, 27, 35, 80], 4) == 69\nassert solution.smallestRangeII([18, 24, 27, 42, 43, 45, 62, 69, 88, 93], 56) == 75\nassert solution.smallestRangeII([23, 63, 71, 76], 48) == 53\nassert solution.smallestRangeII([4, 8, 38, 62, 63, 84, 98], 70) == 94\nassert solution.smallestRangeII([5, 6, 30, 47, 54, 73, 75], 19) == 32\nassert solution.smallestRangeII([41], 75) == 0\nassert solution.smallestRangeII([5, 8, 17, 26, 52, 61, 86, 93, 100], 94) == 95\nassert solution.smallestRangeII([4, 11, 25, 38, 43, 67, 81, 83, 90, 94], 45) == 66\nassert solution.smallestRangeII([1, 2, 3, 33, 43, 60, 73, 93, 95], 65) == 94\nassert solution.smallestRangeII([23, 39, 41, 60, 77, 83, 98], 91) == 75\nassert solution.smallestRangeII([11, 21, 23, 25, 40, 42, 66, 79, 83], 7) == 58\nassert solution.smallestRangeII([51, 96], 32) == 19\nassert solution.smallestRangeII([12, 54], 49) == 42\nassert solution.smallestRangeII([31, 35, 68, 78, 84, 93, 100], 54) == 69\nassert solution.smallestRangeII([3, 5, 35, 47, 48, 60, 71, 80, 90, 94], 76) == 91\nassert solution.smallestRangeII([3, 18, 25, 61, 87, 90], 34) == 32\nassert solution.smallestRangeII([100], 37) == 0\nassert solution.smallestRangeII([5, 35, 51, 88], 65) == 83\nassert solution.smallestRangeII([6, 46, 62], 36) == 32\nassert solution.smallestRangeII([10, 13, 19, 47, 59, 70, 72, 97], 81) == 87\nassert solution.smallestRangeII([15, 32], 96) == 17\nassert solution.smallestRangeII([7, 29, 41, 48, 80, 84, 89, 90], 49) == 66\nassert solution.smallestRangeII([42, 52, 63], 47) == 21\nassert solution.smallestRangeII([7, 18, 54, 59, 68], 93) == 61\nassert solution.smallestRangeII([12], 61) == 0\nassert solution.smallestRangeII([7, 11, 13, 25, 57, 60, 64, 89, 91, 100], 61) == 90\nassert solution.smallestRangeII([6, 11, 13, 31, 34, 38, 45, 63, 86, 88], 65) == 82\nassert solution.smallestRangeII([52, 94], 79) == 42\nassert solution.smallestRangeII([9, 17, 31, 44, 54, 58, 62, 97], 70) == 88\nassert solution.smallestRangeII([5, 21, 28, 40, 43, 53, 56, 90], 46) == 58\nassert solution.smallestRangeII([4, 36, 39, 46, 51, 53, 54, 79, 84, 91], 84) == 87\nassert solution.smallestRangeII([1, 6, 12, 53], 37) == 33\nassert solution.smallestRangeII([73], 43) == 0\nassert solution.smallestRangeII([16, 17, 26, 29, 30, 34, 51, 66, 82, 96], 49) == 80\nassert solution.smallestRangeII([8, 9, 15, 34, 41, 44], 45) == 36\nassert solution.smallestRangeII([47], 68) == 0\nassert solution.smallestRangeII([9, 14, 26, 45, 69, 82, 95, 100], 74) == 91\nassert solution.smallestRangeII([23, 63], 4) == 32\nassert solution.smallestRangeII([3, 16, 23, 24, 32, 48, 57, 69, 70, 74], 29) == 42\nassert solution.smallestRangeII([37, 85, 96], 83) == 59\nassert solution.smallestRangeII([45, 52, 68, 72, 80, 84], 31) == 39\nassert solution.smallestRangeII([18, 30, 63, 85, 86, 89, 99], 73) == 81\nassert solution.smallestRangeII([27, 36, 44, 57, 61, 92, 99], 25) == 34\nassert solution.smallestRangeII([9, 38], 28) == 27\nassert solution.smallestRangeII([17, 40, 48, 49, 54, 66, 81, 96], 15) == 49\nassert solution.smallestRangeII([4, 14, 26, 55, 63, 66, 94, 100], 84) == 96\nassert solution.smallestRangeII([49, 95, 99, 100], 2) == 47\nassert solution.smallestRangeII([25, 33, 45, 49, 85], 71) == 60\nassert solution.smallestRangeII([6, 19, 26, 51, 66], 97) == 60\nassert solution.smallestRangeII([49], 1) == 0\nassert solution.smallestRangeII([23, 42, 44, 46, 72], 98) == 49\nassert solution.smallestRangeII([11, 17, 19, 34, 35, 54, 60, 64, 83, 98], 74) == 87\nassert solution.smallestRangeII([17], 31) == 0\nassert solution.smallestRangeII([6, 8, 47], 66) == 41\nassert solution.smallestRangeII([38, 42, 50, 55, 57, 59, 72, 78], 36) == 40\nassert solution.smallestRangeII([1, 18, 21, 34, 35, 70, 100], 44) == 53\nassert solution.smallestRangeII([3, 10, 14, 15, 16, 22, 35, 38, 49, 78], 50) == 71\nassert solution.smallestRangeII([21, 48, 52, 57, 58, 62, 71, 93], 18) == 36\nassert solution.smallestRangeII([17, 18, 64, 68, 82, 89], 80) == 72\nassert solution.smallestRangeII([31], 36) == 0\nassert solution.smallestRangeII([18, 52, 53, 69, 77, 81, 85], 93) == 67\nassert solution.smallestRangeII([36, 44], 56) == 8\nassert solution.smallestRangeII([2, 14, 38, 42, 56, 64, 80, 93, 94], 51) == 78\nassert solution.smallestRangeII([22, 29, 32, 43, 49], 37) == 27\nassert solution.smallestRangeII([37, 64, 79, 90], 1) == 51",
  "inefficient_solution": "class Solution:\n    def smallestRangeII(self, nums: List[int], k: int) -> int:\n        nums_copy = []\n        for num in nums:\n            for _ in range(1000):\n                num_copy = num + _ * k\n                nums_copy.append(num_copy)\n        ans = float('inf')\n        for i in range(len(nums_copy)):\n            for j in range(i + 1, len(nums_copy)):\n                ans = min(ans, max(nums_copy[j], nums_copy[i]) - min(nums_copy[j], nums_copy[i]))\n        return ans",
  "is_python": true
}