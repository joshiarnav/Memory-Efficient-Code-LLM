{
  "problem_idx": 116,
  "task_name": "Populating Next Right Pointers in Each Node",
  "markdown_description": "\nYou are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\n\n\n```\n\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n\n```\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\n\nInitially, all next pointers are set to `NULL`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0116.Populating%20Next%20Right%20Pointers%20in%20Each%20Node/images/116_sample.png)\n\n```\n\n**Input:** root = [1,2,3,4,5,6,7]\n**Output:** [1,#,2,3,#,4,5,6,7,#]\n**Explanation:** Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** []\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 212 - 1]`.\n* `-1000 <= Node.val <= 1000`\n\n\n\u00a0\n\n\n**Follow-up:**\n\n\n* You may only use constant extra space.\n* The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\n\n\n",
  "canonical_solution": "\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\n\n\nclass Solution:\n    def connect(self, root: \"Optional[Node]\") -> \"Optional[Node]\":\n        if root is None:\n            return root\n        q = deque([root])\n        while q:\n            p = None\n            for _ in range(len(q)):\n                node = q.popleft()\n                if p:\n                    p.next = node\n                p = node\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return root\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\nfrom typing import Optional\n\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\nclass Solution:\n    def connect(self, root: \"Optional[Node]\") -> \"Optional[Node]\":\n        if root is None:\n            return root\n        q = deque([root])\n        while q:\n            p = None\n            for _ in range(len(q)):\n                node = q.popleft()\n                if p:\n                    p.next = node\n                p = node\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n        return root\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random perfect binary tree\n    root = generate_binary_tree()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.connect(root)\n\n    return root, expected_result\n\ndef generate_binary_tree():\n    # Generate a binary tree with random values\n    root = Node(random.randint(-1000, 1000))\n    queue = deque([root])\n\n    while queue:\n        node = queue.popleft()\n        if random.random() < 0.5:\n            left = Node(random.randint(-1000, 1000))\n            node.left = left\n            queue.append(left)\n        if random.random() < 0.5:\n            right = Node(random.randint(-1000, 1000))\n            node.right = right\n            queue.append(right)\n    \n    return root\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.connect(root) == expected_result\n        print(f\"assert solution.connect(root) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.connect(root) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.connect(root) == <__main__.Node object at 0x7f91d45f3410>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4650ed0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d444e390>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d444e910>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d444e310>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797450>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b44d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47974d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4796f10>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797c10>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b47d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b47d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b56d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4796550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47972d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4796550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d45f3410>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b7410>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b4cd0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b4b10>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b74d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b5090>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b7c50>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b73d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b4550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b73d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b74d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b73d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b4550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b73d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b74d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b73d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b7550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b73d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b7e50>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b73d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b5690>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47b5410>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47972d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47972d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47972d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797190>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d47978d0>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a590>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4797550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d4796a10>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a990>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a550>\nassert solution.connect(root) == <__main__.Node object at 0x7f91d462a950>",
  "inefficient_solution": "class Solution:\n    def connect(self, root: \"Optional[Node]\") -> \"Optional[Node]\":\n        if root is None:\n            return root\n        nodes = []\n        nodes.append(root)\n        while nodes:\n            temp = []\n            for i in range(len(nodes) - 1):\n                node = nodes[i]\n                if i < len(nodes) - 1:\n                    node.next = nodes[i + 1]\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n            nodes = temp + nodes\n        return root",
  "is_python": true
}