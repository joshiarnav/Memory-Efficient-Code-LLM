{
  "problem_idx": 1012,
  "task_name": "Numbers With Repeated Digits",
  "markdown_description": "\nGiven an integer `n`, return *the number of positive integers in the range* `[1, n]` *that have **at least one** repeated digit*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 20\n**Output:** 1\n**Explanation:** The only positive number (<= 20) with at least 1 repeated digit is 11.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 100\n**Output:** 10\n**Explanation:** The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 1000\n**Output:** 262\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n        return n - self.f(n)\n\n    def f(self, n: int) -> int:\n        @cache\n        def dfs(pos: int, mask: int, lead: bool, limit: bool) -> int:\n            if pos < 0:\n                return int(lead) ^ 1\n            up = nums[pos] if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if mask >> i & 1:\n                    continue\n                if i == 0 and lead:\n                    ans += dfs(pos - 1, mask, lead, limit and i == up)\n                else:\n                    ans += dfs(pos - 1, mask | 1 << i, False, limit and i == up)\n            return ans\n\n        nums = []\n        while n:\n            nums.append(n % 10)\n            n //= 10\n        return dfs(len(nums) - 1, 0, True, True)\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random number n\n    n = random.randint(1, 1000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numDupDigitsAtMostN(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numDupDigitsAtMostN(n) == expected_result\n        print(f\"assert solution.numDupDigitsAtMostN({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numDupDigitsAtMostN({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numDupDigitsAtMostN(148) == 27\nassert solution.numDupDigitsAtMostN(498) == 120\nassert solution.numDupDigitsAtMostN(543) == 129\nassert solution.numDupDigitsAtMostN(123) == 23\nassert solution.numDupDigitsAtMostN(767) == 191\nassert solution.numDupDigitsAtMostN(102) == 11\nassert solution.numDupDigitsAtMostN(654) == 159\nassert solution.numDupDigitsAtMostN(557) == 139\nassert solution.numDupDigitsAtMostN(359) == 85\nassert solution.numDupDigitsAtMostN(847) == 214\nassert solution.numDupDigitsAtMostN(38) == 3\nassert solution.numDupDigitsAtMostN(227) == 49\nassert solution.numDupDigitsAtMostN(752) == 187\nassert solution.numDupDigitsAtMostN(132) == 24\nassert solution.numDupDigitsAtMostN(45) == 4\nassert solution.numDupDigitsAtMostN(600) == 150\nassert solution.numDupDigitsAtMostN(589) == 147\nassert solution.numDupDigitsAtMostN(204) == 39\nassert solution.numDupDigitsAtMostN(394) == 92\nassert solution.numDupDigitsAtMostN(933) == 240\nassert solution.numDupDigitsAtMostN(701) == 178\nassert solution.numDupDigitsAtMostN(512) == 124\nassert solution.numDupDigitsAtMostN(364) == 86\nassert solution.numDupDigitsAtMostN(441) == 103\nassert solution.numDupDigitsAtMostN(423) == 98\nassert solution.numDupDigitsAtMostN(735) == 184\nassert solution.numDupDigitsAtMostN(537) == 129\nassert solution.numDupDigitsAtMostN(546) == 131\nassert solution.numDupDigitsAtMostN(405) == 95\nassert solution.numDupDigitsAtMostN(987) == 249\nassert solution.numDupDigitsAtMostN(929) == 239\nassert solution.numDupDigitsAtMostN(520) == 125\nassert solution.numDupDigitsAtMostN(869) == 219\nassert solution.numDupDigitsAtMostN(117) == 19\nassert solution.numDupDigitsAtMostN(488) == 119\nassert solution.numDupDigitsAtMostN(780) == 201\nassert solution.numDupDigitsAtMostN(487) == 118\nassert solution.numDupDigitsAtMostN(292) == 64\nassert solution.numDupDigitsAtMostN(853) == 215\nassert solution.numDupDigitsAtMostN(669) == 171\nassert solution.numDupDigitsAtMostN(818) == 209\nassert solution.numDupDigitsAtMostN(829) == 211\nassert solution.numDupDigitsAtMostN(715) == 180\nassert solution.numDupDigitsAtMostN(607) == 151\nassert solution.numDupDigitsAtMostN(805) == 206\nassert solution.numDupDigitsAtMostN(438) == 101\nassert solution.numDupDigitsAtMostN(466) == 115\nassert solution.numDupDigitsAtMostN(443) == 105\nassert solution.numDupDigitsAtMostN(626) == 155\nassert solution.numDupDigitsAtMostN(560) == 141\nassert solution.numDupDigitsAtMostN(994) == 256\nassert solution.numDupDigitsAtMostN(22) == 2\nassert solution.numDupDigitsAtMostN(70) == 6\nassert solution.numDupDigitsAtMostN(32) == 2\nassert solution.numDupDigitsAtMostN(177) == 33\nassert solution.numDupDigitsAtMostN(694) == 175\nassert solution.numDupDigitsAtMostN(856) == 216\nassert solution.numDupDigitsAtMostN(554) == 136\nassert solution.numDupDigitsAtMostN(132) == 24\nassert solution.numDupDigitsAtMostN(779) == 201\nassert solution.numDupDigitsAtMostN(65) == 5\nassert solution.numDupDigitsAtMostN(863) == 217\nassert solution.numDupDigitsAtMostN(154) == 28\nassert solution.numDupDigitsAtMostN(632) == 155\nassert solution.numDupDigitsAtMostN(564) == 141\nassert solution.numDupDigitsAtMostN(621) == 153\nassert solution.numDupDigitsAtMostN(629) == 155\nassert solution.numDupDigitsAtMostN(758) == 189\nassert solution.numDupDigitsAtMostN(646) == 159\nassert solution.numDupDigitsAtMostN(436) == 101\nassert solution.numDupDigitsAtMostN(697) == 176\nassert solution.numDupDigitsAtMostN(765) == 189\nassert solution.numDupDigitsAtMostN(486) == 118\nassert solution.numDupDigitsAtMostN(124) == 23\nassert solution.numDupDigitsAtMostN(293) == 64\nassert solution.numDupDigitsAtMostN(196) == 36\nassert solution.numDupDigitsAtMostN(859) == 217\nassert solution.numDupDigitsAtMostN(795) == 203\nassert solution.numDupDigitsAtMostN(158) == 29\nassert solution.numDupDigitsAtMostN(424) == 99\nassert solution.numDupDigitsAtMostN(508) == 123\nassert solution.numDupDigitsAtMostN(53) == 4\nassert solution.numDupDigitsAtMostN(99) == 9\nassert solution.numDupDigitsAtMostN(483) == 117\nassert solution.numDupDigitsAtMostN(713) == 180\nassert solution.numDupDigitsAtMostN(427) == 99\nassert solution.numDupDigitsAtMostN(577) == 145\nassert solution.numDupDigitsAtMostN(45) == 4\nassert solution.numDupDigitsAtMostN(237) == 53\nassert solution.numDupDigitsAtMostN(561) == 141\nassert solution.numDupDigitsAtMostN(250) == 55\nassert solution.numDupDigitsAtMostN(230) == 51\nassert solution.numDupDigitsAtMostN(918) == 236\nassert solution.numDupDigitsAtMostN(316) == 69\nassert solution.numDupDigitsAtMostN(956) == 244\nassert solution.numDupDigitsAtMostN(702) == 178\nassert solution.numDupDigitsAtMostN(929) == 239\nassert solution.numDupDigitsAtMostN(783) == 201\nassert solution.numDupDigitsAtMostN(39) == 3\nassert solution.numDupDigitsAtMostN(346) == 83",
  "inefficient_solution": "class Solution:\n    def numDupDigitsAtMostN(self, n: int) -> int:\n        return self.f(n, 1000000000)\n\n    def f(self, n: int, max_num: int) -> int:\n        def dfs(pos: int, num: int, mask: int, lead: bool, limit: bool) -> int:\n            if pos < 0:\n                if num > n:\n                    return 0\n                return 1 if num <= n else 0\n            up = max_num // (10 ** pos) if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if mask & (1 << i):\n                    continue\n                if i == 0 and lead:\n                    ans += dfs(pos - 1, num * 10 + i, mask, lead, limit and i == up)\n                else:\n                    ans += dfs(pos - 1, num * 10 + i, mask | (1 << i), False, limit and i == up)\n            return ans\n\n        nums = []\n        while n:\n            nums.append(n % 10)\n            n //= 10\n        return dfs(len(nums) - 1, 0, 0, True, True)",
  "is_python": true
}