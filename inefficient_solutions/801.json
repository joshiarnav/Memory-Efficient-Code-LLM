{
  "problem_idx": 801,
  "task_name": "Minimum Swaps To Make Sequences Increasing",
  "markdown_description": "\nYou are given two integer arrays of the same length `nums1` and `nums2`. In one operation, you are allowed to swap `nums1[i]` with `nums2[i]`.\n\n\n* For example, if `nums1 = [1,2,3,8]`, and `nums2 = [5,6,7,4]`, you can swap the element at `i = 3` to obtain `nums1 = [1,2,3,4]` and `nums2 = [5,6,7,8]`.\n\n\nReturn *the minimum number of needed operations to make* `nums1` *and* `nums2` ***strictly increasing***. The test cases are generated so that the given input always makes it possible.\n\n\nAn array `arr` is **strictly increasing** if and only if `arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,3,5,4], nums2 = [1,2,3,7]\n**Output:** 1\n**Explanation:** \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums1.length <= 105`\n* `nums2.length == nums1.length`\n* `0 <= nums1[i], nums2[i] <= 2 * 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        a, b = 0, 1\n        for i in range(1, len(nums1)):\n            x, y = a, b\n            if nums1[i - 1] >= nums1[i] or nums2[i - 1] >= nums2[i]:\n                a, b = y, x + 1\n            else:\n                b = y + 1\n                if nums1[i - 1] < nums2[i] and nums2[i - 1] < nums1[i]:\n                    a, b = min(a, y), min(b, x + 1)\n        return min(a, b)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        a, b = 0, 1\n        for i in range(1, len(nums1)):\n            x, y = a, b\n            if nums1[i - 1] >= nums1[i] or nums2[i - 1] >= nums2[i]:\n                a, b = y, x + 1\n            else:\n                b = y + 1\n                if nums1[i - 1] < nums2[i] and nums2[i - 1] < nums1[i]:\n                    a, b = min(a, y), min(b, x + 1)\n        return min(a, b)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers lists\n    nums1 = random.sample(range(10**5), random.randint(2, 10))\n    nums2 = random.sample(range(10**5), len(nums1))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minSwap(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minSwap(nums1, nums2) == expected_result\n        print(f\"assert solution.minSwap({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minSwap({nums1}, {nums2}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minSwap([61983, 91362], [36440, 32087]) == 1\nassert solution.minSwap([7209, 51824], [61594, 33937]) == 1\nassert solution.minSwap([35446, 81291, 50993, 34559, 43896, 21042, 48098, 80363, 7185, 95897], [56580, 79536, 81454, 70404, 37875, 47444, 13647, 8322, 9825, 30402]) == 4\nassert solution.minSwap([21501, 41365], [95207, 16008]) == 1\nassert solution.minSwap([42598, 28642, 54130, 11247, 50189, 9048], [33178, 39712, 4302, 85537, 19759, 84675]) == 3\nassert solution.minSwap([42814, 42944, 71037], [49399, 94038, 6575]) == 1\nassert solution.minSwap([33776, 48778, 19310, 3970, 34293, 97966, 54230, 29560, 30903, 28341], [17704, 43296, 89973, 82548, 66898, 72316, 51665, 40455, 96730, 87689]) == 4\nassert solution.minSwap([50573, 43319, 47618, 85032, 96400], [28444, 66568, 10564, 51789, 62257]) == 1\nassert solution.minSwap([69973, 8938, 77211], [94019, 81989, 20972]) == 1\nassert solution.minSwap([74652, 25265, 82376, 53732, 18437, 31418, 58745, 59931], [65269, 55459, 80141, 70649, 75501, 50369, 82742, 36233]) == 4\nassert solution.minSwap([79305, 80062], [30479, 17574]) == 1\nassert solution.minSwap([92455, 67624, 78177, 4366, 65256, 7322, 96399, 23934, 11778], [74656, 17356, 49683, 7854, 64962, 16573, 65221, 29209, 91094]) == 4\nassert solution.minSwap([4457, 70107, 90273, 28654, 11236, 37499, 87443, 43870, 85894, 49129], [51216, 951, 37207, 51636, 48275, 9359, 9254, 2178, 85335, 16439]) == 5\nassert solution.minSwap([77513, 75155, 81343, 64115, 45040, 13461, 69347, 84071], [87307, 31106, 17351, 33927, 11889, 70061, 67836, 84078]) == 3\nassert solution.minSwap([3451, 42855, 99703, 11790, 28848, 67868, 50340, 4689], [51790, 75805, 5615, 71650, 65737, 11472, 40628, 12236]) == 3\nassert solution.minSwap([49460, 35132, 95155, 70481], [51563, 49154, 26243, 68007]) == 2\nassert solution.minSwap([65671, 74439, 15877, 59881, 26348], [16969, 78413, 59972, 21958, 89783]) == 2\nassert solution.minSwap([31090, 72381, 52874, 23902, 37205, 85395], [5716, 83776, 63232, 5701, 16005, 58159]) == 1\nassert solution.minSwap([96239, 4923, 75756, 64447, 95934, 90046, 34636], [9498, 78274, 62133, 75422, 75517, 96063, 84976]) == 3\nassert solution.minSwap([36762, 77268, 42299, 83974], [93178, 76248, 6179, 35886]) == 1\nassert solution.minSwap([41747, 63990, 66653, 27948, 16448, 88445, 96564], [15838, 51066, 95257, 9733, 75556, 66212, 18950]) == 2\nassert solution.minSwap([96285, 79916, 21776, 33839, 69157, 35235, 97146, 7506], [10083, 91804, 36250, 85684, 42611, 95497, 75484, 58891]) == 3\nassert solution.minSwap([27648, 80633], [52621, 71071]) == 0\nassert solution.minSwap([98991, 81564, 3021, 71934, 96582, 92034, 60964, 3545], [24284, 58299, 55102, 31992, 71898, 77248, 705, 48599]) == 4\nassert solution.minSwap([20293, 97326, 55303, 62863, 57915, 36027, 60183, 7284, 62579], [35557, 34365, 47478, 41744, 35769, 51329, 57335, 30507, 12405]) == 4\nassert solution.minSwap([39048, 4833, 83691], [53975, 8595, 4985]) == 1\nassert solution.minSwap([58741, 12720, 68782, 61419, 24696, 4844, 83766, 51364], [40646, 63606, 29022, 40650, 65280, 86070, 96868, 73975]) == 4\nassert solution.minSwap([14889, 95464, 6260, 67546, 49152, 20790, 38837, 53640, 87993], [7419, 84328, 70439, 3491, 7647, 41633, 32992, 74720, 67488]) == 4\nassert solution.minSwap([80971, 2082, 67600, 81689, 89458, 58119, 6614, 59777, 43241, 64204], [8047, 74892, 15605, 15549, 55913, 52357, 37595, 77645, 26558, 82900]) == 4\nassert solution.minSwap([68349, 6938, 4192, 26807, 93808, 60514], [19302, 77207, 23715, 24094, 95960, 20296]) == 2\nassert solution.minSwap([11994, 72026, 70739, 46256], [69873, 66744, 64560, 33350]) == 2\nassert solution.minSwap([43675, 83763, 19898, 30540], [66605, 85760, 99858, 25238]) == 1\nassert solution.minSwap([13590, 80422, 31313, 94487, 63525, 73299, 50238, 92954], [83492, 91130, 85449, 34209, 38728, 9379, 80181, 85526]) == 3\nassert solution.minSwap([1684, 13927, 59716, 80452, 70175], [52313, 70716, 68643, 56643, 5907]) == 2\nassert solution.minSwap([35382, 84906], [18821, 13315]) == 1\nassert solution.minSwap([81244, 86238, 21442, 48187, 16747], [89141, 20469, 35776, 27854, 50154]) == 2\nassert solution.minSwap([13304, 35455, 79852, 77754, 51736, 24033, 60079, 39833], [7186, 84228, 88538, 64040, 50147, 60633, 46113, 65673]) == 3\nassert solution.minSwap([72099, 72337, 52471, 20366, 63547, 43336, 61665, 40634], [42744, 91433, 5497, 58498, 45489, 77093, 600, 93225]) == 3\nassert solution.minSwap([46245, 33089, 36865, 11474], [54752, 27451, 4518, 56569]) == 2\nassert solution.minSwap([41609, 24620, 98305], [91541, 66262, 86780]) == 1\nassert solution.minSwap([5935, 65631], [37669, 90496]) == 0\nassert solution.minSwap([78819, 74414, 39328], [32018, 72807, 81577]) == 1\nassert solution.minSwap([93754, 87140, 1900, 57830, 97584, 81119, 59439], [43320, 78110, 12946, 26860, 890, 62140, 40864]) == 3\nassert solution.minSwap([4902, 6370, 87199, 96493, 4755, 93751, 55392, 33681, 87247], [52615, 58864, 47466, 45360, 79157, 39706, 24664, 42081, 54013]) == 3\nassert solution.minSwap([79855, 13081, 56352, 26833, 43546, 68868, 30403, 96971, 21987], [6129, 72567, 85560, 40605, 59342, 25436, 80940, 54496, 54349]) == 4\nassert solution.minSwap([6906, 97733, 89448, 68442, 36296, 693, 23725], [20174, 780, 91264, 83950, 72408, 43642, 31899]) == 3\nassert solution.minSwap([12723, 73521, 48789, 21316, 82397, 39330, 79008, 58552], [30160, 6161, 24528, 32011, 62001, 52192, 80977, 36952]) == 4\nassert solution.minSwap([66305, 8358, 71331, 6550], [5703, 58009, 12104, 21126]) == 2\nassert solution.minSwap([7248, 14145, 57385, 42718], [74234, 55220, 16194, 36680]) == 2\nassert solution.minSwap([10398, 91622], [41482, 44368]) == 0\nassert solution.minSwap([13921, 81776, 41307, 11585, 43308], [25292, 53826, 1339, 68558, 36306]) == 2\nassert solution.minSwap([51902, 38770, 58550, 89802, 93665, 31901, 75917, 32874, 98265, 77771], [65362, 47596, 35572, 62937, 1972, 37668, 24654, 27338, 62963, 59843]) == 4\nassert solution.minSwap([20852, 8249, 48148, 46021, 60340, 39431, 97699, 14325, 30611], [36424, 92195, 43966, 9722, 14270, 43621, 62566, 14204, 37246]) == 4\nassert solution.minSwap([24585, 92623, 77087, 70598, 50442, 52539, 35520, 27544, 20204], [8118, 65340, 52749, 71643, 29873, 9706, 51761, 79381, 77534]) == 4\nassert solution.minSwap([16197, 21822, 28255], [48197, 84088, 96836]) == 0\nassert solution.minSwap([12226, 86691, 36003, 47547, 5029, 44325, 92177, 9127, 21381], [20602, 72663, 66574, 34977, 95037, 74578, 26127, 63093, 62959]) == 4\nassert solution.minSwap([58877, 45183, 95017, 62718, 57548, 88137], [65878, 44872, 96360, 39146, 38679, 88087]) == 2\nassert solution.minSwap([56971, 73832], [55130, 1139]) == 1\nassert solution.minSwap([87113, 59790, 91974], [1268, 5707, 69300]) == 1\nassert solution.minSwap([45715, 28694, 40504, 5012, 40518, 94461, 58805, 71662, 58981, 26235], [82380, 81084, 11274, 23131, 24445, 69050, 27081, 62470, 66007, 9058]) == 4\nassert solution.minSwap([7297, 15123, 46587, 17088, 99651], [92940, 98479, 47212, 64529, 42044]) == 2\nassert solution.minSwap([63759, 69014, 48613, 15439, 29751, 67251, 71954, 93425, 49177], [38161, 32273, 52108, 10905, 67210, 37356, 48658, 52905, 83142]) == 4\nassert solution.minSwap([5382, 38181, 89523, 85162], [88834, 72805, 33194, 97430]) == 2\nassert solution.minSwap([27464, 21188, 27093, 1350], [8769, 53355, 32803, 61862]) == 2\nassert solution.minSwap([78924, 77110, 83775, 50160, 23640, 50449], [37586, 12127, 51089, 22422, 58928, 76053]) == 2\nassert solution.minSwap([40934, 78964, 56940, 55768, 40084, 41918, 87101], [35033, 36486, 13462, 45298, 48171, 63107, 45996]) == 3\nassert solution.minSwap([56257, 21660, 95743, 23463, 87087, 66108, 42119, 15982], [90727, 42406, 49923, 70686, 42130, 86942, 28315, 54982]) == 4\nassert solution.minSwap([44646, 72739, 61366, 93479, 21881, 59662, 97692], [97557, 91780, 36960, 1839, 64689, 86820, 72943]) == 3\nassert solution.minSwap([15635, 57914, 71487, 80989, 47548, 58931, 26717], [44042, 93606, 59372, 83859, 22641, 88536, 56452]) == 3\nassert solution.minSwap([1352, 54601, 19251, 86843], [89997, 16728, 97048, 54243]) == 2\nassert solution.minSwap([65806, 28034], [81786, 87503]) == 1\nassert solution.minSwap([59639, 11892, 31010, 83883, 19189, 66111, 61895, 37165, 37508, 5031], [17461, 64587, 17308, 90556, 38094, 1658, 37841, 55676, 30479, 42316]) == 4\nassert solution.minSwap([76335, 67471, 21418, 69164, 47944, 42739, 97801, 11181, 90367], [6894, 2442, 87204, 2918, 41120, 20716, 21019, 4319, 9613]) == 4\nassert solution.minSwap([46690, 7050, 80819, 26242, 46137, 84374, 4397, 19679, 49275, 58505], [56026, 59205, 79304, 46643, 92000, 50034, 24507, 47188, 11089, 97264]) == 4\nassert solution.minSwap([29212, 22048, 38880, 24552, 40099, 46930, 30197, 22835], [4010, 25655, 15110, 77223, 19136, 11391, 43124, 11627]) == 4\nassert solution.minSwap([97723, 52851, 71657, 3264, 51548, 9839, 77237, 97524], [71127, 46995, 79990, 1024, 18668, 78070, 8845, 17917]) == 3\nassert solution.minSwap([2191, 57103, 18207, 1373], [71423, 22069, 30512, 59283]) == 2\nassert solution.minSwap([81474, 5939, 39665, 48921, 77270, 36551, 81565], [77464, 71312, 92604, 18206, 27560, 94147, 59451]) == 3\nassert solution.minSwap([46565, 32000, 77893, 96363, 71981, 18906, 22108, 73746], [96548, 90917, 32628, 26930, 2525, 31145, 61082, 19990]) == 4\nassert solution.minSwap([61040, 97502, 30233, 97949, 38641], [43524, 15855, 31126, 48245, 77951]) == 2\nassert solution.minSwap([44570, 7165], [3573, 73817]) == 1\nassert solution.minSwap([30366, 57393, 1805, 68032, 51851, 88071, 95063, 25375, 82568], [90664, 40162, 53378, 48407, 17670, 7096, 50419, 25080, 2691]) == 4\nassert solution.minSwap([3324, 59550, 44255, 25090, 60450, 62703], [36425, 85923, 9153, 51972, 49487, 38418]) == 2\nassert solution.minSwap([81281, 72181, 67233, 18464, 31115, 68466, 23420, 78732, 46992], [24156, 41782, 3764, 6363, 41838, 21395, 5964, 8889, 34635]) == 4\nassert solution.minSwap([87394, 31262, 21110, 25878, 58792], [74191, 84958, 65636, 15095, 35187]) == 2\nassert solution.minSwap([8478, 84520, 60538, 78532, 56282, 19697, 35757], [9110, 89732, 56505, 63526, 42564, 34545, 39956]) == 2\nassert solution.minSwap([54630, 96252, 13340, 31918], [46669, 87821, 54705, 47123]) == 1\nassert solution.minSwap([19191, 2650, 94895, 43404, 45065, 24902], [91290, 3088, 67431, 67770, 59101, 85119]) == 3\nassert solution.minSwap([95283, 55968, 73524, 32364], [78025, 60632, 7142, 63670]) == 2\nassert solution.minSwap([91424, 7788, 29799, 24445, 26396, 39629, 21144, 59703], [25215, 45985, 2943, 85614, 28173, 5775, 20889, 49826]) == 3\nassert solution.minSwap([44090, 39170, 51653, 63491, 27055, 82972], [32263, 46962, 87995, 87515, 40026, 31023]) == 3\nassert solution.minSwap([94766, 21195, 94052, 42051, 1467, 65080], [49668, 73131, 89956, 94368, 22570, 17387]) == 3\nassert solution.minSwap([68277, 29176, 54807, 92859, 35861, 39185], [27465, 12662, 99482, 22398, 54678, 40467]) == 3\nassert solution.minSwap([46229, 25336, 29590, 66748, 19222, 79600], [51488, 66852, 61315, 60682, 51334, 25494]) == 3\nassert solution.minSwap([7490, 93644, 88584, 12866, 50102, 8663, 97804], [38349, 75110, 44375, 84759, 32963, 45317, 62994]) == 2\nassert solution.minSwap([50742, 31353, 50875], [67965, 3078, 13376]) == 1\nassert solution.minSwap([1598, 30370, 84684, 46648, 10718, 45871, 26268, 28563, 55482], [2784, 96877, 19059, 58960, 55787, 13345, 75742, 7849, 46792]) == 3\nassert solution.minSwap([85865, 15960, 13244, 6747, 16500, 7668, 36591, 49206], [4024, 99484, 31518, 52443, 97027, 84546, 43790, 37549]) == 4\nassert solution.minSwap([76767, 80442, 98378, 47871, 59228], [60518, 22591, 43083, 10421, 48832]) == 2\nassert solution.minSwap([78699, 72042, 44614], [49982, 39650, 59468]) == 1",
  "inefficient_solution": "class Solution:\n    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:\n        dp = [[[float('inf')] * 2 for _ in range(len(nums1))] for _ in range(len(nums1))]\n        for i in range(len(nums1)):\n            for j in range(i, len(nums1)):\n                for k in range(j, len(nums1)):\n                    for l in range(k, len(nums1)):\n                        if i == j == k == l == 0:\n                            dp[i][j][k] = [0, 1][nums1[0] > nums2[0]]\n                        elif i < j == k == l:\n                            if nums1[i] > nums1[j] or nums2[i] > nums2[j]:\n                                dp[i][j][k][l] = dp[i+1][j][k][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i+1][j][k][l][0]+1, dp[i+1][j][k][l][1]]\n                        elif i == j < k < l:\n                            if nums1[k-1] >= nums1[k] or nums2[k-1] >= nums2[k]:\n                                dp[i][j][k][l] = dp[i][j+1][k][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i][j+1][k][l][0]+1, dp[i][j+1][k][l][1]]\n                        elif i == j == k < l:\n                            if nums1[k] > nums1[l] or nums2[k] > nums2[l]:\n                                dp[i][j][k][l] = dp[i][j][k+1][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i][j][k+1][l][0]+1, dp[i][j][k+1][l][1]]\n                        elif i < j == k == l:\n                            if nums1[j-1] >= nums1[j] or nums2[j-1] >= nums2[j]:\n                                dp[i][j][k][l] = dp[i+1][j][k][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i+1][j][k][l][0]+1, dp[i+1][j][k][l][1]]\n                        else:\n                            if nums1[k-1] >= nums1[k] or nums2[k-1] >= nums2[k] or nums1[l-1] >= nums1[l] or nums2[l-1] >= nums2[l]:\n                                dp[i][j][k][l] = dp[i][j][k+1][l]\n                            else:\n                                dp[i][j][k][l] = [dp[i][j][k+1][l][0]+1, dp[i][j][k+1][l][1]]\n        return min(min([dp[i][j][k][l] for k in range(j, len(nums1)) for l in range(k, len(nums1))]) for j in range(i, len(nums1)) for i in range(len(nums1)))",
  "is_python": true
}