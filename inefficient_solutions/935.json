{
  "problem_idx": 935,
  "task_name": "Knight Dialer",
  "markdown_description": "\nThe chess knight has a **unique movement**,\u00a0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an **L**). The possible movements of chess knight are shown in this diagaram:\n\n\nA chess knight can move as indicated in the chess diagram below:\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0935.Knight%20Dialer/images/chess.jpg)\nWe have a chess knight and a phone pad as shown below, the knight **can only stand on a numeric cell**\u00a0(i.e. blue cell).\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0935.Knight%20Dialer/images/phone.jpg)\nGiven an integer `n`, return how many distinct phone numbers of length `n` we can dial.\n\n\nYou are allowed to place the knight **on any numeric cell** initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be **valid** knight jumps.\n\n\nAs the answer may be very large, **return the answer modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 10\n**Explanation:** We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 20\n**Explanation:** All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 3131\n**Output:** 136006598\n**Explanation:** Please take care of the mod.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 5000`\n\n\n",
  "canonical_solution": "class Solution:\n    def knightDialer(self, n: int) -> int:\n        if n == 1:\n            return 10\n        f = [1] * 10\n        for _ in range(n - 1):\n            t = [0] * 10\n            t[0] = f[4] + f[6]\n            t[1] = f[6] + f[8]\n            t[2] = f[7] + f[9]\n            t[3] = f[4] + f[8]\n            t[4] = f[0] + f[3] + f[9]\n            t[6] = f[0] + f[1] + f[7]\n            t[7] = f[2] + f[6]\n            t[8] = f[1] + f[3]\n            t[9] = f[2] + f[4]\n            f = t\n        return sum(t) % (10**9 + 7)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def knightDialer(self, n: int) -> int:\n        if n == 1:\n            return 10\n        f = [1] * 10\n        for _ in range(n - 1):\n            t = [0] * 10\n            t[0] = f[4] + f[6]\n            t[1] = f[6] + f[8]\n            t[2] = f[7] + f[9]\n            t[3] = f[4] + f[8]\n            t[4] = f[0] + f[3] + f[9]\n            t[6] = f[0] + f[1] + f[7]\n            t[7] = f[2] + f[6]\n            t[8] = f[1] + f[3]\n            t[9] = f[2] + f[4]\n            f = t\n        return sum(t) % (10**9 + 7)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random n\n    n = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.knightDialer(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.knightDialer(n) == expected_result\n        print(f\"assert solution.knightDialer({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.knightDialer({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.knightDialer(10) == 14912\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(8) == 2848\nassert solution.knightDialer(8) == 2848\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(8) == 2848\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(5) == 240\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(2) == 20\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(8) == 2848\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(8) == 2848\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(4) == 104\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(2) == 20\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(2) == 20\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(8) == 2848\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(8) == 2848\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(2) == 20\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(4) == 104\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(4) == 104\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(5) == 240\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(4) == 104\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(8) == 2848\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(4) == 104\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(1) == 10\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(4) == 104\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(5) == 240\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(2) == 20\nassert solution.knightDialer(4) == 104\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(3) == 46\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(9) == 6576\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(6) == 544\nassert solution.knightDialer(5) == 240\nassert solution.knightDialer(7) == 1256\nassert solution.knightDialer(10) == 14912\nassert solution.knightDialer(5) == 240\nassert solution.knightDialer(4) == 104",
  "inefficient_solution": "class Solution:\n    def knightDialer(self, n: int) -> int:\n        if n == 1:\n            return 10\n        f = [[] for _ in range(10)]\n        for i in range(10):\n            f[i] = []\n            for j in range(10):\n                if self.is_valid_move(i, j):\n                    f[i].append(j)\n        memo = [-1] * 10**n\n        return self.dfs(0, n, f, memo) % (10**9 + 7)\n\n    def is_valid_move(self, i, j):\n        valid_moves = [[4,6],[6,8],[7,9],[4,8],[0,3,9],[0,1,7],[2,6],[1,7],[2,4]]\n        for move in valid_moves[i]:\n            if move == j:\n                return True\n        return False\n\n    def dfs(self, i, n, f, memo):\n        if i < 0 or i > 9 or n <= 0:\n            return 1\n        if memo[i * 10**n] != -1:\n            return memo[i * 10**n]\n        count = 0\n        for j in f[i]:\n            count += self.dfs(j, n - 1, f, memo)\n        memo[i * 10**n] = count\n        return count",
  "is_python": true
}