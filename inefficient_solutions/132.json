{
  "problem_idx": 132,
  "task_name": "Palindrome Partitioning II",
  "markdown_description": "\nGiven a string `s`, partition `s` such that every substring of the partition is a palindrome.\n\n\nReturn *the **minimum** cuts needed for a palindrome partitioning of* `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aab\"\n**Output:** 1\n**Explanation:** The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"a\"\n**Output:** 0\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"ab\"\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2000`\n* `s` consists of lowercase English letters only.\n\n\n",
  "canonical_solution": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        g = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and g[i + 1][j - 1]\n        f = list(range(n))\n        for i in range(1, n):\n            for j in range(i + 1):\n                if g[j][i]:\n                    f[i] = min(f[i], 1 + f[j - 1] if j else 0)\n        return f[-1]\n",
  "test_case_generator": "\nimport random\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string of lowercase English letters\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCut(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCut(s) == expected_result\n        print(f\"assert solution.minCut(\\\"{s}\\\") == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCut(\\\"{s}\\\") == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minCut(\"iahrmfwvfh\") == 9\nassert solution.minCut(\"oxl\") == 2\nassert solution.minCut(\"dtfqgsfl\") == 7\nassert solution.minCut(\"njav\") == 3\nassert solution.minCut(\"wwurxdh\") == 5\nassert solution.minCut(\"r\") == 0\nassert solution.minCut(\"z\") == 0\nassert solution.minCut(\"egqqloyicv\") == 8\nassert solution.minCut(\"yyyukkx\") == 3\nassert solution.minCut(\"vjoch\") == 4\nassert solution.minCut(\"lgo\") == 2\nassert solution.minCut(\"fpeua\") == 4\nassert solution.minCut(\"oyztacsfxe\") == 9\nassert solution.minCut(\"lkdvuszljz\") == 9\nassert solution.minCut(\"bqy\") == 2\nassert solution.minCut(\"jyg\") == 2\nassert solution.minCut(\"drkktzwd\") == 6\nassert solution.minCut(\"ajtisob\") == 6\nassert solution.minCut(\"ehoa\") == 3\nassert solution.minCut(\"yf\") == 1\nassert solution.minCut(\"mjkmhqb\") == 6\nassert solution.minCut(\"hpx\") == 2\nassert solution.minCut(\"nvhlo\") == 4\nassert solution.minCut(\"hbtliamn\") == 7\nassert solution.minCut(\"qnzw\") == 3\nassert solution.minCut(\"hk\") == 1\nassert solution.minCut(\"iwj\") == 2\nassert solution.minCut(\"fbiac\") == 4\nassert solution.minCut(\"twhcmjhj\") == 5\nassert solution.minCut(\"ror\") == 0\nassert solution.minCut(\"ro\") == 1\nassert solution.minCut(\"mrfeqazctb\") == 9\nassert solution.minCut(\"qbwjlslix\") == 6\nassert solution.minCut(\"zowaycejn\") == 8\nassert solution.minCut(\"kezpvkm\") == 6\nassert solution.minCut(\"wijbqg\") == 5\nassert solution.minCut(\"ljwnqzfuw\") == 8\nassert solution.minCut(\"jay\") == 2\nassert solution.minCut(\"x\") == 0\nassert solution.minCut(\"qsv\") == 2\nassert solution.minCut(\"tpb\") == 2\nassert solution.minCut(\"ylc\") == 2\nassert solution.minCut(\"svztpw\") == 5\nassert solution.minCut(\"vvfa\") == 2\nassert solution.minCut(\"lixlqogoyi\") == 7\nassert solution.minCut(\"umekfz\") == 5\nassert solution.minCut(\"ollfdlx\") == 5\nassert solution.minCut(\"ziocvfibm\") == 8\nassert solution.minCut(\"en\") == 1\nassert solution.minCut(\"mwvwyq\") == 3\nassert solution.minCut(\"l\") == 0\nassert solution.minCut(\"gcnvykngkq\") == 9\nassert solution.minCut(\"b\") == 0\nassert solution.minCut(\"nuwcptravx\") == 9\nassert solution.minCut(\"myfj\") == 3\nassert solution.minCut(\"ckklxd\") == 4\nassert solution.minCut(\"igx\") == 2\nassert solution.minCut(\"kniny\") == 2\nassert solution.minCut(\"bjutyiwjpb\") == 9\nassert solution.minCut(\"iyhduckn\") == 7\nassert solution.minCut(\"bmsoyfm\") == 6\nassert solution.minCut(\"tyrknkd\") == 4\nassert solution.minCut(\"jwf\") == 2\nassert solution.minCut(\"n\") == 0\nassert solution.minCut(\"ixlpgnxx\") == 6\nassert solution.minCut(\"pyhq\") == 3\nassert solution.minCut(\"flyrth\") == 5\nassert solution.minCut(\"h\") == 0\nassert solution.minCut(\"mror\") == 1\nassert solution.minCut(\"ntljlz\") == 3\nassert solution.minCut(\"xxuifmnl\") == 6\nassert solution.minCut(\"jblozhunv\") == 8\nassert solution.minCut(\"ckmixntz\") == 7\nassert solution.minCut(\"hdmhscie\") == 7\nassert solution.minCut(\"mh\") == 1\nassert solution.minCut(\"wi\") == 1\nassert solution.minCut(\"ayhewczx\") == 7\nassert solution.minCut(\"cbcidkjde\") == 6\nassert solution.minCut(\"rynaifk\") == 6\nassert solution.minCut(\"djgucimxo\") == 8\nassert solution.minCut(\"thnsooemqa\") == 8\nassert solution.minCut(\"qeujpn\") == 5\nassert solution.minCut(\"jzbui\") == 4\nassert solution.minCut(\"vnt\") == 2\nassert solution.minCut(\"fdq\") == 2\nassert solution.minCut(\"gvapx\") == 4\nassert solution.minCut(\"ioebgdp\") == 6\nassert solution.minCut(\"xpjxkmtb\") == 7\nassert solution.minCut(\"jpzuvu\") == 3\nassert solution.minCut(\"dvnrb\") == 4\nassert solution.minCut(\"nkxrxfyvvl\") == 6\nassert solution.minCut(\"esnekw\") == 5\nassert solution.minCut(\"fdpese\") == 3\nassert solution.minCut(\"aifwo\") == 4\nassert solution.minCut(\"waauj\") == 3\nassert solution.minCut(\"plqtzpad\") == 7\nassert solution.minCut(\"qh\") == 1\nassert solution.minCut(\"pxvmb\") == 4\nassert solution.minCut(\"svvradn\") == 5\nassert solution.minCut(\"wfs\") == 2",
  "inefficient_solution": "class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        g = [[1] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                g[i][j] = s[i] == s[j] and g[i + 1][j - 1]\n        f = [[] for _ in range(n)]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if g[j][i]:\n                    f[i].append(1 + f[j - 1][0] if j else 0)\n        return min(f[-1])",
  "is_python": true
}