{
  "problem_idx": 2499,
  "task_name": "Minimum Total Cost to Make Arrays Unequal",
  "markdown_description": "\nYou are given two **0-indexed** integer arrays `nums1` and `nums2`, of equal length `n`.\n\n\nIn one operation, you can swap the values of any two indices of `nums1`. The **cost** of this operation is the **sum** of the indices.\n\n\nFind the **minimum** total cost of performing the given operation **any** number of times such that `nums1[i] != nums2[i]` for all `0 <= i <= n - 1` after performing all the operations.\n\n\nReturn *the **minimum total cost** such that* `nums1` and `nums2` *satisfy the above condition*. In case it is not possible, return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]\n**Output:** 10\n**Explanation:** \nOne of the ways we can perform the operations is:\n- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]\n- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].\n- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].\nWe can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.\nNote that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]\n**Output:** 10\n**Explanation:** \nOne of the ways we can perform the operations is:\n- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].\n- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].\nThe total cost needed here is 10, which is the minimum possible.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,2], nums2 = [1,2,2]\n**Output:** -1\n**Explanation:** \nIt can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.\nHence, we return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = same = 0\n        cnt = Counter()\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            if a == b:\n                same += 1\n                ans += i\n                cnt[a] += 1\n\n        m = lead = 0\n        for k, v in cnt.items():\n            if v * 2 > same:\n                m = v * 2 - same\n                lead = k\n                break\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            if m and a != b and a != lead and b != lead:\n                ans += i\n                m -= 1\n        return -1 if m else ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = same = 0\n        cnt = Counter()\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            if a == b:\n                same += 1\n                ans += i\n                cnt[a] += 1\n\n        m = lead = 0\n        for k, v in cnt.items():\n            if v * 2 > same:\n                m = v * 2 - same\n                lead = k\n                break\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            if m and a != b and a != lead and b != lead:\n                ans += i\n                m -= 1\n        return -1 if m else ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums1 = random.sample(range(1, 11), random.randint(1, 10))\n    nums2 = random.sample(range(1, 11), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumTotalCost(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumTotalCost(nums1, nums2) == expected_result\n        print(f\"assert solution.minimumTotalCost({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumTotalCost({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumTotalCost([1, 8], [4, 7, 3, 6, 8, 5, 1, 10, 9, 2]) == 0\nassert solution.minimumTotalCost([2, 6, 5, 10], [6, 1]) == 0\nassert solution.minimumTotalCost([2], [8, 1, 3, 9, 2, 5, 6, 4, 7]) == 0\nassert solution.minimumTotalCost([4, 5, 8, 10, 3, 9], [2, 6, 3, 1, 5, 4]) == 0\nassert solution.minimumTotalCost([9, 5, 7, 4, 10, 3, 1, 2], [5, 1, 3, 8, 9, 10, 6, 2, 4]) == 7\nassert solution.minimumTotalCost([7, 2, 6], [4, 6]) == 0\nassert solution.minimumTotalCost([4, 3, 10, 6, 2, 9, 5, 7, 8], [2, 5, 6, 4, 8, 10, 1, 9, 7, 3]) == 0\nassert solution.minimumTotalCost([5, 7, 4, 9, 10], [1, 8, 9, 4]) == 0\nassert solution.minimumTotalCost([9, 5, 1, 7, 3, 2, 4, 6, 10], [5, 9]) == 0\nassert solution.minimumTotalCost([6, 3, 9, 1, 10, 7, 8, 2, 5, 4], [3, 2, 7, 8, 1, 4, 5, 9]) == 0\nassert solution.minimumTotalCost([6, 5, 2], [3, 6, 7, 4, 2, 1]) == 0\nassert solution.minimumTotalCost([10, 9, 7, 2, 3, 6], [6]) == 0\nassert solution.minimumTotalCost([3, 1, 8, 6, 4, 2], [5, 6, 1, 8]) == 0\nassert solution.minimumTotalCost([1, 10, 8, 7, 2, 9, 5, 6, 4, 3], [5, 4]) == 0\nassert solution.minimumTotalCost([9, 2, 6, 10], [2, 4, 8, 3, 9, 7, 1, 5, 6, 10]) == 0\nassert solution.minimumTotalCost([10, 4, 8, 2, 9, 3, 6], [2, 10, 8, 9, 4]) == 2\nassert solution.minimumTotalCost([4, 8, 6], [8, 4, 3, 9, 6]) == 0\nassert solution.minimumTotalCost([5, 4, 2], [4]) == 0\nassert solution.minimumTotalCost([8, 6, 3, 10, 1], [8, 2, 4, 3, 9, 7, 6]) == 1\nassert solution.minimumTotalCost([1, 5, 6, 7, 8, 4], [6, 1]) == 0\nassert solution.minimumTotalCost([4, 5, 10, 3, 7, 6, 1], [4, 10, 5, 6, 1, 9, 2, 7]) == 1\nassert solution.minimumTotalCost([1, 2, 10, 6, 4, 5, 9], [5, 1, 4, 9, 8, 3]) == 0\nassert solution.minimumTotalCost([5, 10, 6, 1, 2, 9, 8, 3, 7], [8, 2, 1, 6, 3, 7, 4, 5, 10]) == 0\nassert solution.minimumTotalCost([5, 1, 2, 8, 4, 9, 6], [2, 6, 10, 8]) == 3\nassert solution.minimumTotalCost([8, 5, 10], [1, 2, 3, 6, 10]) == 0\nassert solution.minimumTotalCost([8, 7, 9, 10, 3, 4, 2, 1], [8, 3, 10, 4, 9, 5, 1, 2, 7, 6]) == 1\nassert solution.minimumTotalCost([8, 5, 10, 3, 7, 6, 9, 2], [1, 6, 4, 3, 8, 5]) == 3\nassert solution.minimumTotalCost([8, 9, 1, 10, 4], [5]) == 0\nassert solution.minimumTotalCost([2, 3, 10, 6, 5], [4, 9, 7]) == 0\nassert solution.minimumTotalCost([5, 4, 1, 8, 2, 9, 7, 3, 6], [4, 3, 8, 6, 10]) == 0\nassert solution.minimumTotalCost([7, 3], [3, 10, 2]) == 0\nassert solution.minimumTotalCost([7, 1, 10, 6, 3, 8, 9], [1, 7, 3, 8, 2, 4]) == 0\nassert solution.minimumTotalCost([5, 9, 3, 8, 10, 4, 2, 6], [5, 3, 4, 8, 9, 7]) == 3\nassert solution.minimumTotalCost([2, 7, 6, 3, 10, 8, 4, 1, 5, 9], [5, 6, 4, 3, 10, 7, 9]) == 7\nassert solution.minimumTotalCost([2, 6, 8, 5, 4, 3, 7, 9, 1], [2, 6, 3, 4, 7, 8]) == 1\nassert solution.minimumTotalCost([5, 6, 1, 4, 2, 3, 8, 7, 10], [4, 9, 10]) == 0\nassert solution.minimumTotalCost([6], [9, 3, 5, 8]) == 0\nassert solution.minimumTotalCost([5, 2], [10, 4]) == 0\nassert solution.minimumTotalCost([2], [7, 2, 10, 6, 8, 5, 9, 3, 1, 4]) == 0\nassert solution.minimumTotalCost([2, 5, 6, 1, 3, 7, 8, 9, 10, 4], [1, 3]) == 0\nassert solution.minimumTotalCost([9, 10, 6, 3, 4, 8, 1, 2], [2, 3, 1, 5, 6, 9, 8]) == 0\nassert solution.minimumTotalCost([4, 1, 10, 6], [8, 5, 3, 2, 10, 4, 1, 9, 7]) == 0\nassert solution.minimumTotalCost([6, 2, 5], [7, 4, 8, 5, 9, 6, 10, 3, 2, 1]) == 0\nassert solution.minimumTotalCost([1, 7, 8, 10, 2, 3], [9, 6, 5, 4, 8]) == 0\nassert solution.minimumTotalCost([5, 6, 9, 2], [8, 4, 7, 6, 5, 1, 3, 9, 10, 2]) == 0\nassert solution.minimumTotalCost([6, 1, 2, 8, 7, 4], [8, 7, 10, 5, 1, 4, 3, 2]) == 5\nassert solution.minimumTotalCost([5, 1, 4, 7, 6, 3, 2], [1, 5, 7, 2, 3, 10, 6]) == 0\nassert solution.minimumTotalCost([2, 4, 3, 7, 10, 8, 6], [3, 7, 6, 9, 2]) == 0\nassert solution.minimumTotalCost([3, 7], [2, 6, 5, 9, 10, 4]) == 0\nassert solution.minimumTotalCost([1, 4, 9, 7, 10, 3, 5, 8, 2], [1, 3, 9, 8]) == 2\nassert solution.minimumTotalCost([9, 1, 5, 7, 3, 10], [4]) == 0\nassert solution.minimumTotalCost([4, 6, 3, 10], [2, 8, 10, 7, 5, 4]) == 0\nassert solution.minimumTotalCost([1, 5, 3, 9, 4], [10, 6, 5, 9, 8, 2, 1, 3, 7, 4]) == 3\nassert solution.minimumTotalCost([3, 2, 10, 8, 7, 9, 6], [9, 10, 3, 4, 1, 2, 5]) == 0\nassert solution.minimumTotalCost([8], [9, 2, 8]) == 0\nassert solution.minimumTotalCost([7, 10, 8, 2, 4, 5], [5]) == 0\nassert solution.minimumTotalCost([2, 5, 4, 7, 3, 10, 1, 9, 6], [4]) == 0\nassert solution.minimumTotalCost([5, 8, 9, 1, 4, 7], [7, 9, 5, 4, 6, 10, 3, 2, 1, 8]) == 0\nassert solution.minimumTotalCost([5, 4, 9, 3], [4, 7, 6, 1, 3, 9, 8, 5, 2]) == 0\nassert solution.minimumTotalCost([1], [7]) == 0\nassert solution.minimumTotalCost([10, 8, 1, 3, 6, 7, 2, 5], [6, 4]) == 0\nassert solution.minimumTotalCost([10, 3, 1, 4, 9, 5, 2, 7, 8], [3, 6, 8]) == 0\nassert solution.minimumTotalCost([1, 8, 9, 6], [6, 1, 10, 9, 5, 2, 7]) == 0\nassert solution.minimumTotalCost([7, 3, 5, 10, 6, 8, 2, 1, 4], [10, 6, 9, 3]) == 0\nassert solution.minimumTotalCost([10, 5, 6, 2, 3, 4, 9], [4, 9, 6, 1]) == 2\nassert solution.minimumTotalCost([10, 1, 9, 4, 7], [8, 3, 1, 6, 7, 10, 5, 9, 4, 2]) == 4\nassert solution.minimumTotalCost([4, 2, 3, 6], [8, 9, 6, 2, 5, 10]) == 0\nassert solution.minimumTotalCost([4, 7], [9, 10, 4, 1, 2]) == 0\nassert solution.minimumTotalCost([3, 7, 10, 1, 9, 6], [1, 2, 8, 4, 3, 5]) == 0\nassert solution.minimumTotalCost([6, 4, 5, 2, 1, 7, 3, 8, 9], [9, 5, 10, 6, 2, 3, 1, 8, 7, 4]) == 7\nassert solution.minimumTotalCost([2, 9, 10], [8]) == 0\nassert solution.minimumTotalCost([1, 8, 6, 2], [3, 4, 8, 2, 5, 10, 6]) == 3\nassert solution.minimumTotalCost([3, 4], [7, 1, 9, 3, 8, 10, 4, 5, 2]) == 0\nassert solution.minimumTotalCost([2, 4, 8, 6], [4, 10, 9, 3, 7]) == 0\nassert solution.minimumTotalCost([9, 5, 1, 4, 3, 6], [9, 2]) == 1\nassert solution.minimumTotalCost([10, 1, 4, 9, 2, 6, 5], [10, 7]) == 1\nassert solution.minimumTotalCost([5, 9, 10, 4, 3, 8, 6, 1], [4, 3, 7, 6, 5, 1, 8, 9]) == 0\nassert solution.minimumTotalCost([10, 4, 8, 5], [8, 9, 6, 10, 3]) == 0\nassert solution.minimumTotalCost([8, 9, 5, 7], [7, 1, 6, 4, 8, 5, 3, 9, 2]) == 0\nassert solution.minimumTotalCost([8, 10, 5, 3, 7], [4, 1, 8, 10, 3]) == 0\nassert solution.minimumTotalCost([9, 7, 8, 2], [7, 1, 6, 10, 8]) == 0\nassert solution.minimumTotalCost([7, 3, 6, 2, 9, 8], [7, 10, 5, 9, 1, 8, 2, 6, 3, 4]) == 5\nassert solution.minimumTotalCost([8, 4, 2, 6], [2, 8]) == 0\nassert solution.minimumTotalCost([10, 6, 8, 7, 2, 1], [7, 5, 2, 8, 6]) == 0\nassert solution.minimumTotalCost([7, 10, 9, 6, 5, 3, 1, 4], [4, 10, 3, 2, 8, 7, 1]) == 7\nassert solution.minimumTotalCost([9, 6, 5, 4], [8, 4]) == 0\nassert solution.minimumTotalCost([2, 8, 10, 6, 7, 4, 1, 3, 5], [4, 2, 5]) == 0\nassert solution.minimumTotalCost([6, 9], [1, 3, 7, 2, 5, 6, 8]) == 0\nassert solution.minimumTotalCost([9, 10, 6, 2, 1, 4, 8], [9, 6, 2]) == 1\nassert solution.minimumTotalCost([3, 2, 5, 8, 10, 1, 9, 4], [2, 3, 1, 5, 8]) == 0\nassert solution.minimumTotalCost([4, 2, 5, 6, 10, 3, 7, 1, 8, 9], [4, 1, 8, 2, 3]) == 1\nassert solution.minimumTotalCost([1, 6, 5, 3, 8, 9, 10, 7], [6]) == 0\nassert solution.minimumTotalCost([9, 5, 3, 8, 1, 10, 7, 2, 4], [9, 8, 4, 1]) == 1\nassert solution.minimumTotalCost([10, 3, 5, 6], [1, 3, 2, 6, 8, 9, 5, 10]) == 4\nassert solution.minimumTotalCost([9, 6, 5, 7, 2, 1, 10, 4, 3, 8], [6, 4, 8, 10, 3, 2, 5, 7, 9]) == 0\nassert solution.minimumTotalCost([5, 4, 2, 8, 9, 3, 10, 6, 1], [3, 2, 6, 9]) == 0\nassert solution.minimumTotalCost([9, 2, 6, 8, 7, 1, 4, 10], [2, 9, 5, 1, 4]) == 0\nassert solution.minimumTotalCost([7, 3, 6, 2, 4, 1], [1, 7, 2, 8]) == 0\nassert solution.minimumTotalCost([3, 5, 6, 9, 8, 2, 1, 7, 10, 4], [1, 5, 8, 3]) == 1\nassert solution.minimumTotalCost([7, 2, 5], [7, 3]) == 1",
  "inefficient_solution": "class Solution:\n    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:\n        ans = 0\n        for _ in range(10000):\n            arr = [0] * 100000\n            for i, (a, b) in enumerate(zip(nums1, nums2)):\n                if a == b:\n                    ans += i\n                    arr[i] += 1\n            for i in range(len(arr)):\n                if arr[i] > 0:\n                    for j in range(i + 1, len(arr)):\n                        if arr[j] > 0:\n                            arr[j] -= 1\n                            ans += i + j\n                            arr[i] -= 1\n                            break\n            for i in range(len(arr)):\n                if arr[i] > 0:\n                    return -1\n        return ans",
  "is_python": true
}