{
  "problem_idx": 2572,
  "task_name": "Count the Number of Square",
  "markdown_description": "\nYou are given a positive integer **0-indexed**\u00a0array `nums`.\n\n\nA subset of the array `nums` is **square-free** if the product of its elements is a **square-free integer**.\n\n\nA **square-free integer** is an integer that is divisible by no square number other than `1`.\n\n\nReturn *the number of square-free non-empty subsets of the array* **nums**. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nA **non-empty**\u00a0**subset** of `nums` is an array that can be obtained by deleting some (possibly none but not all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,4,4,5]\n**Output:** 3\n**Explanation:** There are 3 square-free subsets in this example:\n- The subset consisting of the 0th element [3]. The product of its elements is 3, which is a square-free integer.\n- The subset consisting of the 3rd element [5]. The product of its elements is 5, which is a square-free integer.\n- The subset consisting of 0th and 3rd elements [3,5]. The product of its elements is 15, which is a square-free integer.\nIt can be proven that there are no more than 3 square-free subsets in the given array.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1]\n**Output:** 1\n**Explanation:** There is 1 square-free subset in this example:\n- The subset consisting of the 0th element [1]. The product of its elements is 1, which is a square-free integer.\nIt can be proven that there is no more than 1 square-free subset in the given array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length\u00a0<= 1000`\n* `1 <= nums[i] <= 30`\n\n\n",
  "canonical_solution": "class Solution:\n    def squareFreeSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = pow(2, cnt[1])\n        for x in range(2, 31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod\n        return sum(v for v in f) % mod - 1\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def squareFreeSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = pow(2, cnt[1])\n        for x in range(2, 31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod\n        return sum(v for v in f) % mod - 1\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 31), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.squareFreeSubsets(nums)\n\n    return [nums], expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        [nums], expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.squareFreeSubsets(nums) == expected_result\n        print(f\"assert solution.squareFreeSubsets({nums}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.squareFreeSubsets({nums}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.squareFreeSubsets([17, 30, 18, 4, 29, 21]) == 11\nassert solution.squareFreeSubsets([5, 26, 2, 22, 23, 28, 17, 12, 13, 14]) == 71\nassert solution.squareFreeSubsets([24, 19, 10, 27]) == 3\nassert solution.squareFreeSubsets([11, 10, 15]) == 5\nassert solution.squareFreeSubsets([7, 2]) == 3\nassert solution.squareFreeSubsets([25, 12]) == 0\nassert solution.squareFreeSubsets([12, 20, 4, 24, 11, 2, 13, 6, 1, 9]) == 23\nassert solution.squareFreeSubsets([6, 2, 29, 15, 12, 14, 8]) == 13\nassert solution.squareFreeSubsets([10, 14, 17, 26, 25]) == 7\nassert solution.squareFreeSubsets([2, 22, 14, 28, 4, 10, 12, 23, 8, 17]) == 19\nassert solution.squareFreeSubsets([11, 22, 10, 19, 24, 16, 21]) == 19\nassert solution.squareFreeSubsets([30, 11, 22, 20, 28, 16]) == 4\nassert solution.squareFreeSubsets([24, 20, 23, 1, 17, 10, 14, 16]) == 23\nassert solution.squareFreeSubsets([18, 20, 23, 5, 10, 25]) == 5\nassert solution.squareFreeSubsets([3, 28]) == 1\nassert solution.squareFreeSubsets([15, 20, 17, 10, 13, 8, 29, 24]) == 23\nassert solution.squareFreeSubsets([27, 19, 30, 5]) == 5\nassert solution.squareFreeSubsets([28, 27, 11, 9, 25, 23, 30, 18, 14]) == 11\nassert solution.squareFreeSubsets([13, 9, 2, 1, 7, 30, 19, 3]) == 79\nassert solution.squareFreeSubsets([27, 13, 16, 1, 20, 18, 6, 22]) == 11\nassert solution.squareFreeSubsets([9, 11, 12, 19, 15, 24, 30, 2]) == 19\nassert solution.squareFreeSubsets([17, 4, 14, 24, 5]) == 7\nassert solution.squareFreeSubsets([9, 18, 17, 5, 7, 16, 29, 4]) == 15\nassert solution.squareFreeSubsets([21, 11, 22, 10, 4, 5]) == 15\nassert solution.squareFreeSubsets([7, 12, 19, 2, 22, 23, 14, 17, 28]) == 55\nassert solution.squareFreeSubsets([15, 12]) == 1\nassert solution.squareFreeSubsets([21, 2, 14, 9]) == 4\nassert solution.squareFreeSubsets([24, 1, 19, 8, 12, 14, 11]) == 15\nassert solution.squareFreeSubsets([3, 8, 22, 17]) == 7\nassert solution.squareFreeSubsets([10, 21, 22, 17, 20, 2, 14, 3]) == 27\nassert solution.squareFreeSubsets([14, 29, 8, 21, 24, 27, 6, 3, 10]) == 17\nassert solution.squareFreeSubsets([8, 3, 9, 11, 6, 16, 28, 14]) == 9\nassert solution.squareFreeSubsets([11, 14, 27, 4]) == 3\nassert solution.squareFreeSubsets([21, 4, 17, 14, 20]) == 5\nassert solution.squareFreeSubsets([6, 12, 24, 15, 23, 19, 17, 18, 2, 14]) == 55\nassert solution.squareFreeSubsets([2, 25, 22, 23]) == 5\nassert solution.squareFreeSubsets([4, 18, 29, 14]) == 3\nassert solution.squareFreeSubsets([14, 12, 18, 20, 26]) == 2\nassert solution.squareFreeSubsets([2, 18, 15, 23, 27, 3, 24, 11]) == 23\nassert solution.squareFreeSubsets([13, 4, 30, 11]) == 7\nassert solution.squareFreeSubsets([19, 9, 24, 21, 2]) == 7\nassert solution.squareFreeSubsets([11, 7, 1, 12, 2, 9, 14, 19]) == 39\nassert solution.squareFreeSubsets([18, 12, 15, 20, 22, 28, 11, 26, 13, 3]) == 23\nassert solution.squareFreeSubsets([4, 28]) == 0\nassert solution.squareFreeSubsets([20, 3]) == 1\nassert solution.squareFreeSubsets([28, 15, 19, 11, 22, 10, 30, 4, 29, 3]) == 59\nassert solution.squareFreeSubsets([29, 21, 9, 30, 11, 7, 12, 5, 15, 16]) == 39\nassert solution.squareFreeSubsets([4, 17, 7, 14, 20, 10, 27, 19]) == 19\nassert solution.squareFreeSubsets([5, 11, 17, 20, 9, 10, 3, 28]) == 23\nassert solution.squareFreeSubsets([16, 13, 30, 21]) == 5\nassert solution.squareFreeSubsets([24, 7, 26, 9, 6, 17, 1, 15]) == 39\nassert solution.squareFreeSubsets([16, 22, 27]) == 1\nassert solution.squareFreeSubsets([8, 19]) == 1\nassert solution.squareFreeSubsets([20, 12, 27, 11, 6]) == 3\nassert solution.squareFreeSubsets([10, 26, 4, 14, 5]) == 6\nassert solution.squareFreeSubsets([13, 25, 17, 26, 18, 14]) == 9\nassert solution.squareFreeSubsets([17, 30, 22, 11]) == 9\nassert solution.squareFreeSubsets([13, 12, 10, 16, 2]) == 5\nassert solution.squareFreeSubsets([22, 15, 4]) == 3\nassert solution.squareFreeSubsets([25, 13, 22, 9]) == 3\nassert solution.squareFreeSubsets([7, 20]) == 1\nassert solution.squareFreeSubsets([24, 11, 5]) == 3\nassert solution.squareFreeSubsets([30, 1, 9, 27, 11, 24]) == 7\nassert solution.squareFreeSubsets([8, 13, 4, 2, 26, 21, 15]) == 14\nassert solution.squareFreeSubsets([23, 4, 7, 16]) == 3\nassert solution.squareFreeSubsets([9, 19, 22]) == 3\nassert solution.squareFreeSubsets([26, 13, 28]) == 2\nassert solution.squareFreeSubsets([2, 21, 11, 28, 9, 29, 10, 1, 8]) == 47\nassert solution.squareFreeSubsets([28, 1, 2, 10, 27, 16, 15]) == 9\nassert solution.squareFreeSubsets([3, 16, 2, 24, 22, 7, 4, 11]) == 19\nassert solution.squareFreeSubsets([15, 2, 9, 3, 7, 11, 28, 22, 1]) == 59\nassert solution.squareFreeSubsets([10, 6, 11, 12]) == 5\nassert solution.squareFreeSubsets([20, 18, 17]) == 1\nassert solution.squareFreeSubsets([14, 6, 24, 10, 17, 2, 19, 20, 13]) == 39\nassert solution.squareFreeSubsets([6, 23, 11, 26, 20, 12, 8]) == 11\nassert solution.squareFreeSubsets([4, 14, 23, 17, 6, 20, 28]) == 11\nassert solution.squareFreeSubsets([14, 26, 6, 20, 10, 25, 3]) == 8\nassert solution.squareFreeSubsets([17, 14, 19, 2, 28, 23, 7]) == 39\nassert solution.squareFreeSubsets([21, 8, 18, 2, 27, 30, 19, 23, 13]) == 39\nassert solution.squareFreeSubsets([2, 26, 25, 20, 12, 29]) == 5\nassert solution.squareFreeSubsets([14, 24, 10, 30]) == 3\nassert solution.squareFreeSubsets([28, 23]) == 1\nassert solution.squareFreeSubsets([29, 26, 24, 7, 2, 30, 11, 25, 5]) == 55\nassert solution.squareFreeSubsets([8, 16, 17, 2]) == 3\nassert solution.squareFreeSubsets([9, 19, 25, 7, 11]) == 7\nassert solution.squareFreeSubsets([28, 20, 5, 21, 3]) == 5\nassert solution.squareFreeSubsets([7, 15, 16]) == 3\nassert solution.squareFreeSubsets([2, 12, 29, 18, 28, 9, 3]) == 7\nassert solution.squareFreeSubsets([30, 2, 7, 21, 20, 11, 4]) == 15\nassert solution.squareFreeSubsets([13, 6, 5]) == 7\nassert solution.squareFreeSubsets([14, 10, 22, 11, 16, 4, 24, 5]) == 11\nassert solution.squareFreeSubsets([6, 23, 3, 16, 27, 15, 7]) == 15\nassert solution.squareFreeSubsets([16, 27, 29, 2, 24, 13, 30, 22, 4, 12]) == 15\nassert solution.squareFreeSubsets([9, 29, 26, 4, 27, 5, 14, 20, 1]) == 23\nassert solution.squareFreeSubsets([25, 16, 7]) == 1\nassert solution.squareFreeSubsets([23, 13, 6, 14, 29, 10, 1]) == 63\nassert solution.squareFreeSubsets([29, 23, 9, 4, 20, 25, 17, 21, 26, 13]) == 47\nassert solution.squareFreeSubsets([1, 10, 30, 28]) == 5\nassert solution.squareFreeSubsets([17, 29, 24, 25, 5, 8, 19, 10]) == 23\nassert solution.squareFreeSubsets([18, 7, 30, 15, 1, 13]) == 23",
  "inefficient_solution": "class Solution:\n    def squareFreeSubsets(self, nums):\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = [[0 for _ in range(30)] for _ in range(1001)]\n        for i, x in enumerate(nums):\n            cnt[i][x] += 1\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [[0 for _ in range(1 << n)] for _ in range(1001)]\n        f[0][0] = pow(2, cnt[0][1])\n        for i in range(1001):\n            for x in range(2, 31):\n                if cnt[i][x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                    continue\n                mask = 0\n                for j, p in enumerate(primes):\n                    if x % p == 0:\n                        mask |= 1 << j\n                for state in range((1 << n) - 1, 0, -1):\n                    if state & mask == mask:\n                        f[i][state] = (f[i][state] + cnt[i][x] * f[i][state ^ mask]) % mod\n        total = 0\n        for i in range(1001):\n            for state in range(1 << n):\n                if state != 0:\n                    total += f[i][state]\n        return total % mod",
  "is_python": true
}