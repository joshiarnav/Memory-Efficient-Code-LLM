{
  "problem_idx": 376,
  "task_name": "Wiggle Subsequence",
  "markdown_description": "\nA **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\n\n* For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.\n* In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\n\nA **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n\n\nGiven an integer array `nums`, return *the length of the longest **wiggle subsequence** of* `nums`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,7,4,9,2,5]\n**Output:** 6\n**Explanation:** The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,17,5,10,13,15,10,5,16,8]\n**Output:** 7\n**Explanation:** There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5,6,7,8,9]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `0 <= nums[i] <= 1000`\n\n\n\u00a0\n\n\n**Follow up:** Could you solve this in `O(n)` time?\n\n\n",
  "canonical_solution": "class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        up = down = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                up = max(up, down + 1)\n            elif nums[i] < nums[i - 1]:\n                down = max(down, up + 1)\n        return max(up, down)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        up = down = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                up = max(up, down + 1)\n            elif nums[i] < nums[i - 1]:\n                down = max(down, up + 1)\n        return max(up, down)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.wiggleMaxLength(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.wiggleMaxLength(nums) == expected_result\n        print(f\"assert solution.wiggleMaxLength({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.wiggleMaxLength({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.wiggleMaxLength([71, 24, 67, 64, 85, 65, 39, 68, 29, 80]) == 9\nassert solution.wiggleMaxLength([10, 57, 95, 53, 3, 2, 36]) == 4\nassert solution.wiggleMaxLength([23, 38, 64, 36, 27, 35, 53]) == 4\nassert solution.wiggleMaxLength([100, 1, 31, 40, 96, 5, 86, 73, 33, 9]) == 6\nassert solution.wiggleMaxLength([11, 29, 4, 39]) == 4\nassert solution.wiggleMaxLength([4, 89, 68]) == 3\nassert solution.wiggleMaxLength([48, 79, 37, 33, 30]) == 3\nassert solution.wiggleMaxLength([24, 27, 2, 36, 14, 81, 16, 98]) == 8\nassert solution.wiggleMaxLength([41, 47, 38, 79, 25, 60, 95, 88, 91]) == 8\nassert solution.wiggleMaxLength([44, 31, 39, 79, 51, 55]) == 5\nassert solution.wiggleMaxLength([76, 23, 59, 98, 30, 39, 66, 64, 56, 27]) == 6\nassert solution.wiggleMaxLength([14, 25, 59, 10, 68, 78, 47]) == 5\nassert solution.wiggleMaxLength([63, 80, 72, 25, 92, 38, 1, 15, 28]) == 6\nassert solution.wiggleMaxLength([45, 31, 47]) == 3\nassert solution.wiggleMaxLength([59, 88, 91, 5]) == 3\nassert solution.wiggleMaxLength([14, 94, 100, 10, 4, 50, 49, 41, 2]) == 5\nassert solution.wiggleMaxLength([27, 31, 22]) == 3\nassert solution.wiggleMaxLength([41, 88, 59]) == 3\nassert solution.wiggleMaxLength([6, 1, 88, 75, 65, 40]) == 4\nassert solution.wiggleMaxLength([11, 53, 30]) == 3\nassert solution.wiggleMaxLength([28, 85, 84, 68]) == 3\nassert solution.wiggleMaxLength([95, 23, 99, 43]) == 4\nassert solution.wiggleMaxLength([42, 64, 68, 26, 84, 71, 37, 12, 100, 77]) == 7\nassert solution.wiggleMaxLength([86, 39, 56, 75, 74, 6]) == 4\nassert solution.wiggleMaxLength([39, 45, 69, 6]) == 3\nassert solution.wiggleMaxLength([79, 57, 62, 29, 22, 52, 99, 14, 1]) == 6\nassert solution.wiggleMaxLength([22, 67, 40, 66, 23, 30, 56, 31, 88, 32]) == 9\nassert solution.wiggleMaxLength([57, 9, 42, 65]) == 3\nassert solution.wiggleMaxLength([36, 7, 51, 11]) == 4\nassert solution.wiggleMaxLength([35, 21, 99, 61, 4]) == 4\nassert solution.wiggleMaxLength([18, 76, 26, 52, 80, 21, 63, 14, 29, 22]) == 9\nassert solution.wiggleMaxLength([55, 16]) == 2\nassert solution.wiggleMaxLength([88, 61, 81]) == 3\nassert solution.wiggleMaxLength([75, 56, 11, 85, 38, 13, 81, 35]) == 6\nassert solution.wiggleMaxLength([30, 15, 69, 4, 56]) == 5\nassert solution.wiggleMaxLength([65, 76, 43, 57, 55, 26, 13, 74, 53]) == 7\nassert solution.wiggleMaxLength([93, 94]) == 2\nassert solution.wiggleMaxLength([62, 82, 40, 13, 72, 77, 68, 71, 86, 23]) == 7\nassert solution.wiggleMaxLength([60, 86, 95, 70, 48, 67, 20, 55]) == 6\nassert solution.wiggleMaxLength([83, 39, 18, 50, 13]) == 4\nassert solution.wiggleMaxLength([6, 26, 75, 15, 18, 94, 3, 35, 39]) == 6\nassert solution.wiggleMaxLength([60, 32, 61, 23, 76, 12, 62]) == 7\nassert solution.wiggleMaxLength([84, 44, 81, 29, 98, 80, 85, 41]) == 8\nassert solution.wiggleMaxLength([4, 75, 94, 58, 57, 78, 65, 14, 95]) == 6\nassert solution.wiggleMaxLength([23, 16, 53, 74, 64, 8, 90]) == 5\nassert solution.wiggleMaxLength([99, 21, 86, 10, 67, 57, 95, 69]) == 8\nassert solution.wiggleMaxLength([39, 52, 60, 77, 26, 97, 51, 50, 20, 5]) == 5\nassert solution.wiggleMaxLength([43, 68, 85, 25, 98, 34, 74, 40]) == 7\nassert solution.wiggleMaxLength([47, 48, 19, 71, 76, 32, 26]) == 5\nassert solution.wiggleMaxLength([32, 39, 64, 23, 15, 17]) == 4\nassert solution.wiggleMaxLength([90, 77]) == 2\nassert solution.wiggleMaxLength([88, 35, 16, 60, 96]) == 3\nassert solution.wiggleMaxLength([45, 9, 31, 84, 1, 49, 4, 25]) == 7\nassert solution.wiggleMaxLength([7, 32, 15, 34, 99, 20, 77, 72, 47, 16]) == 7\nassert solution.wiggleMaxLength([79, 53, 7, 19, 94, 39, 11]) == 4\nassert solution.wiggleMaxLength([36, 92, 50, 44]) == 3\nassert solution.wiggleMaxLength([22, 62]) == 2\nassert solution.wiggleMaxLength([35, 38, 73, 69]) == 3\nassert solution.wiggleMaxLength([72, 67, 65, 88, 17]) == 4\nassert solution.wiggleMaxLength([23, 64, 91, 5, 72]) == 4\nassert solution.wiggleMaxLength([69, 19, 81, 96, 51]) == 4\nassert solution.wiggleMaxLength([24, 57]) == 2\nassert solution.wiggleMaxLength([65, 90]) == 2\nassert solution.wiggleMaxLength([99, 12, 64, 33, 60, 83, 65]) == 6\nassert solution.wiggleMaxLength([40, 55, 35, 60, 64, 37, 20]) == 5\nassert solution.wiggleMaxLength([9, 28, 56, 22]) == 3\nassert solution.wiggleMaxLength([42, 29, 34, 44]) == 3\nassert solution.wiggleMaxLength([23, 97, 64, 84, 47, 81, 69, 85]) == 8\nassert solution.wiggleMaxLength([67, 86, 46, 88, 70, 31]) == 5\nassert solution.wiggleMaxLength([87, 7, 39, 54, 95, 97, 36, 69, 8, 70]) == 7\nassert solution.wiggleMaxLength([66, 34, 60]) == 3\nassert solution.wiggleMaxLength([100, 66, 38, 50, 86, 23, 7]) == 4\nassert solution.wiggleMaxLength([82, 90, 71, 29, 44]) == 4\nassert solution.wiggleMaxLength([78, 38, 28]) == 2\nassert solution.wiggleMaxLength([75, 22, 16, 27, 86, 57, 26]) == 4\nassert solution.wiggleMaxLength([16, 22, 31, 28, 23]) == 3\nassert solution.wiggleMaxLength([97, 8, 50, 63, 57]) == 4\nassert solution.wiggleMaxLength([47, 76, 74, 65, 44, 52]) == 4\nassert solution.wiggleMaxLength([4, 70, 69, 55, 59]) == 4\nassert solution.wiggleMaxLength([67, 88, 91, 2, 98]) == 4\nassert solution.wiggleMaxLength([94, 83, 37, 26, 22]) == 2\nassert solution.wiggleMaxLength([19, 34]) == 2\nassert solution.wiggleMaxLength([70, 12, 73, 94, 60, 45, 36, 33, 72]) == 5\nassert solution.wiggleMaxLength([51, 33, 42, 43]) == 3\nassert solution.wiggleMaxLength([58, 53, 8, 56, 81, 18, 29, 84, 14, 5]) == 6\nassert solution.wiggleMaxLength([19, 61, 24, 72, 14, 43, 84, 2, 11]) == 8\nassert solution.wiggleMaxLength([32, 86, 31, 26, 38, 40, 54, 28, 93]) == 6\nassert solution.wiggleMaxLength([68, 98, 16, 8, 57, 4, 49, 41, 54, 81]) == 8\nassert solution.wiggleMaxLength([21, 76, 49]) == 3\nassert solution.wiggleMaxLength([14, 33, 22, 15, 6]) == 3\nassert solution.wiggleMaxLength([49, 79, 100, 33, 67, 11]) == 5\nassert solution.wiggleMaxLength([90, 59, 71]) == 3\nassert solution.wiggleMaxLength([2, 96, 14, 100, 54, 77, 1, 55, 47, 74]) == 10\nassert solution.wiggleMaxLength([67, 12]) == 2\nassert solution.wiggleMaxLength([53, 29, 96, 58]) == 4\nassert solution.wiggleMaxLength([32, 95, 96]) == 2\nassert solution.wiggleMaxLength([91, 73, 83, 70, 63, 26, 49, 100, 64, 46]) == 6\nassert solution.wiggleMaxLength([68, 57, 58, 2, 36, 22, 88, 25, 9, 38]) == 9\nassert solution.wiggleMaxLength([96, 17, 94, 99, 39]) == 4\nassert solution.wiggleMaxLength([52, 39, 43, 22]) == 4",
  "inefficient_solution": "class Solution:\n    def wiggleMaxLength(self, nums):\n        wiggle_arr = []\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                wiggle_arr.append((nums[j] - nums[i]) * ((j - i) % 2 - 1))\n        wiggle_arr.sort()\n        wiggle_arr = list(dict.fromkeys(wiggle_arr))\n        wiggle_arr.append(None)\n        wiggle_arr.sort(key=lambda x: x is None)\n        return len(wiggle_arr) - 1",
  "is_python": true
}