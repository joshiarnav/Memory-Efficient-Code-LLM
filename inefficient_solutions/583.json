{
  "problem_idx": 583,
  "task_name": "Delete Operation for Two Strings",
  "markdown_description": "\nGiven two strings `word1` and `word2`, return *the minimum number of **steps** required to make* `word1` *and* `word2` *the same*.\n\n\nIn one **step**, you can delete exactly one character in either string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word1 = \"sea\", word2 = \"eat\"\n**Output:** 2\n**Explanation:** You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word1 = \"leetcode\", word2 = \"etco\"\n**Output:** 4\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word1.length, word2.length <= 500`\n* `word1` and `word2` consist of only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = i\n        for j in range(1, n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            dp[i][0] = i\n        for j in range(1, n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n        return dp[-1][-1]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random word1 and word2\n    word1 = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n    word2 = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minDistance(word1, word2)\n\n    return word1, word2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word1, word2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minDistance(word1, word2) == expected_result\n        print(f\"assert solution.minDistance('{word1}', '{word2}') == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.minDistance('{word1}', '{word2}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minDistance('hriqgkv', 'kad') == 8\nassert solution.minDistance('eatnfovjw', 'phmihif') == 14\nassert solution.minDistance('usoov', 'djn') == 8\nassert solution.minDistance('a', 'vawnqlougo') == 9\nassert solution.minDistance('ewyxab', 'wuifa') == 7\nassert solution.minDistance('yunqqq', 'azj') == 9\nassert solution.minDistance('gemzvzbbew', 'xuv') == 11\nassert solution.minDistance('eo', 'uilsunwjhg') == 12\nassert solution.minDistance('wnee', 'jlnbbmwxj') == 11\nassert solution.minDistance('jpso', 'uoj') == 5\nassert solution.minDistance('oc', 'snselqeo') == 8\nassert solution.minDistance('muxhcxxxba', 'eftqasfu') == 16\nassert solution.minDistance('egosyat', 'e') == 6\nassert solution.minDistance('jrxwlkorb', 'sebsz') == 12\nassert solution.minDistance('efwleykdj', 'htcuj') == 12\nassert solution.minDistance('lmz', 'ycho') == 7\nassert solution.minDistance('buljqxolzs', 't') == 11\nassert solution.minDistance('twpgnqc', 'dlirbb') == 13\nassert solution.minDistance('xqhaal', 'pnrhrahd') == 10\nassert solution.minDistance('ushnv', 'gimoyp') == 11\nassert solution.minDistance('fgmr', 'ztaqdkqvut') == 14\nassert solution.minDistance('oskmtcjncz', 'xaiquskd') == 14\nassert solution.minDistance('cbrji', 'jjqowoghu') == 12\nassert solution.minDistance('po', 'zowqqvr') == 7\nassert solution.minDistance('jfrzwayn', 'v') == 9\nassert solution.minDistance('kte', 'c') == 4\nassert solution.minDistance('dk', 's') == 3\nassert solution.minDistance('bpbkm', 'odgwukw') == 10\nassert solution.minDistance('zp', 'vx') == 4\nassert solution.minDistance('tbjud', 'y') == 6\nassert solution.minDistance('towdfxrch', 'mx') == 9\nassert solution.minDistance('vlynueirp', 'qfim') == 11\nassert solution.minDistance('fhzmfpsrp', 'qqvmezxg') == 15\nassert solution.minDistance('oiypwr', 'yphsr') == 5\nassert solution.minDistance('mzljeal', 'hvy') == 10\nassert solution.minDistance('ubptvlc', 'phdkzcz') == 10\nassert solution.minDistance('o', 'ejcp') == 5\nassert solution.minDistance('zadaicztxy', 'ub') == 12\nassert solution.minDistance('w', 'clg') == 4\nassert solution.minDistance('vnxiuxif', 'oaelrbals') == 17\nassert solution.minDistance('duyzqupms', 'cfl') == 12\nassert solution.minDistance('ic', 'jskammtp') == 10\nassert solution.minDistance('gqkjbsinkl', 'gccsmljvmf') == 14\nassert solution.minDistance('dsjdlw', 'f') == 7\nassert solution.minDistance('nueyh', 'xubmnw') == 9\nassert solution.minDistance('kiqjyflb', 'rxuvwbaswd') == 16\nassert solution.minDistance('yexgskp', 'ls') == 7\nassert solution.minDistance('pj', 'qzcqwkkyg') == 11\nassert solution.minDistance('kmymtly', 'puxdaqp') == 14\nassert solution.minDistance('dgfu', 'pdmqlhz') == 9\nassert solution.minDistance('bmoolopru', 'nrxjeld') == 14\nassert solution.minDistance('k', 'coejwp') == 7\nassert solution.minDistance('doqyvot', 'fyc') == 8\nassert solution.minDistance('zpbr', 'kjv') == 7\nassert solution.minDistance('l', 'urfiyrdfh') == 10\nassert solution.minDistance('cekhl', 'zppbwgeht') == 10\nassert solution.minDistance('ryhnsox', 'fwkhju') == 11\nassert solution.minDistance('kutqdm', 'xdfjwda') == 11\nassert solution.minDistance('ogcrymscvq', 'cblynmvqjd') == 10\nassert solution.minDistance('irnfhjjzfp', 'kstlv') == 15\nassert solution.minDistance('ogxovgknjk', 'kdjznghy') == 14\nassert solution.minDistance('opjav', 'g') == 6\nassert solution.minDistance('opopcp', 'rtbeoxfmvi') == 14\nassert solution.minDistance('ismk', 'xrarsqiuev') == 12\nassert solution.minDistance('thym', 's') == 5\nassert solution.minDistance('lpcsbzef', 's') == 7\nassert solution.minDistance('g', 'amji') == 5\nassert solution.minDistance('vbg', 'saey') == 7\nassert solution.minDistance('aqvjwxmu', 'wgqdb') == 11\nassert solution.minDistance('ii', 'fy') == 4\nassert solution.minDistance('mvdpxwbrib', 'vdli') == 8\nassert solution.minDistance('ktmetquv', 'sehsf') == 11\nassert solution.minDistance('d', 'cltbkfn') == 8\nassert solution.minDistance('fkpknyjvkc', 'vyd') == 11\nassert solution.minDistance('xgjlckg', 'mjqnatj') == 12\nassert solution.minDistance('abg', 'odmoxalx') == 9\nassert solution.minDistance('wkxx', 'ypbfupad') == 12\nassert solution.minDistance('n', 'zcrzizx') == 8\nassert solution.minDistance('sdz', 'wgekgr') == 9\nassert solution.minDistance('rtugrshtd', 'qkjfw') == 14\nassert solution.minDistance('h', 'tidsn') == 6\nassert solution.minDistance('rwylppriw', 'zswpty') == 11\nassert solution.minDistance('vaneknm', 'pgv') == 8\nassert solution.minDistance('rez', 'fowelpthrt') == 11\nassert solution.minDistance('ka', 'zbyilcmse') == 11\nassert solution.minDistance('kkwvqhjwxz', 'r') == 11\nassert solution.minDistance('tnoqw', 'gxdo') == 7\nassert solution.minDistance('llgr', 'wcnx') == 8\nassert solution.minDistance('codxumc', 'mf') == 7\nassert solution.minDistance('zmk', 'nzkxnzp') == 6\nassert solution.minDistance('rccx', 'bffz') == 8\nassert solution.minDistance('thbj', 'alsbhro') == 9\nassert solution.minDistance('ikwxf', 'hpoo') == 9\nassert solution.minDistance('maa', 'nhqswpyme') == 10\nassert solution.minDistance('vdqskmue', 'ddwi') == 10\nassert solution.minDistance('qqvgn', 'pejxbuh') == 12\nassert solution.minDistance('lrx', 'fjwmiwijux') == 11\nassert solution.minDistance('vqdylqkalm', 'kxyhwda') == 13\nassert solution.minDistance('buk', 'chti') == 7\nassert solution.minDistance('mazazgd', 'ne') == 9",
  "inefficient_solution": "class Solution:\n    def minDistance(self, word1: str, word2: str) -> int:\n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]  # Create a 2D array with unnecessary rows\n        for i in range(0, 10000):  # Create 10,000 unnecessary empty lists\n            dp[i] = list(range(n + 1))  # Create a list with n + 1 elements in each row\n        for i in range(1, m + 1):\n            dp[i] = list(dp[i - 1])  # Create a copy of the previous row\n            dp[i][0] = i  # Set the first element of the row to the row number\n        for j in range(1, n + 1):\n            dp[0] = list(dp[0])  # Create a copy of the first row\n            dp[0][j] = j  # Set the j-th element of the first row to the column number\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if i > 1000:  # Create unnecessary variables\n                    x = i\n                    y = j\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i] = list(dp[i - 1])  # Create a copy of the previous row\n                    dp[i][j] = dp[i - 1][j - 1]  # Set the j-th element of the row to the element at the same position in the previous row\n                else:\n                    dp[i] = list(dp[i - 1])  # Create a copy of the previous row\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])  # Calculate the minimum distance\n        return dp[-1][-1]  # Return the element at the bottom-right corner of the array",
  "is_python": true
}