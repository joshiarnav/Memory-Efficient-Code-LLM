{
  "problem_idx": 669,
  "task_name": "Trim a Binary Search Tree",
  "markdown_description": "\nGiven the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should **not** change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a **unique answer**.\n\n\nReturn *the root of the trimmed binary search tree*. Note that the root may change depending on the given bounds.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0669.Trim%20a%20Binary%20Search%20Tree/images/trim1.jpg)\n\n```\n\n**Input:** root = [1,0,2], low = 1, high = 2\n**Output:** [1,null,2]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0669.Trim%20a%20Binary%20Search%20Tree/images/trim2.jpg)\n\n```\n\n**Input:** root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n**Output:** [3,2,null,1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 104]`.\n* `0 <= Node.val <= 104`\n* The value of each node in the tree is **unique**.\n* `root` is guaranteed to be a valid binary search tree.\n* `0 <= low <= high <= 104`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def trimBST(\n        self, root: Optional[TreeNode], low: int, high: int\n    ) -> Optional[TreeNode]:\n        def dfs(root):\n            if root is None:\n                return root\n            if root.val > high:\n                return dfs(root.left)\n            if root.val < low:\n                return dfs(root.right)\n            root.left = dfs(root.left)\n            root.right = dfs(root.right)\n            return root\n\n        return dfs(root)\n",
  "test_case_generator": "\nimport random\n\n# Test case generator function\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate the binary search tree\n    root = generate_tree()\n    \n    # Generate the lower and upper boundaries\n    low = random.randint(0, 100)\n    high = random.randint(low, 100)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.trimBST(root, low, high)\n\n    return root, low, high, expected_result\n\n\n# Helper function to generate a binary search tree\ndef generate_tree():\n    # Generate a random list of values\n    values = random.sample(range(0, 100), random.randint(1, 10))\n    \n    # Create the tree nodes using the values\n    nodes = [TreeNode(val) for val in values]\n    \n    # Randomly connect the nodes to form a binary search tree\n    root = None\n    for i, node in enumerate(nodes):\n        if i == 0:\n            root = node\n        else:\n            curr_node = root\n            while True:\n                if node.val <= curr_node.val:\n                    if curr_node.left is None:\n                        curr_node.left = node\n                        break\n                    else:\n                        curr_node = curr_node.left\n                else:\n                    if curr_node.right is None:\n                        curr_node.right = node\n                        break\n                    else:\n                        curr_node = curr_node.right\n\n    return root\n\n\n# Testing the generated test cases\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        root, low, high, expected_result = generate_test_case()\n        \n        # Format the test case for assert statement\n        test_case = f\"assert solution.trimBST(root, {low}, {high}) == {expected_result}\"\n        test_case_generator_results.append(test_case)\n    \n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.trimBST(root, 41, 47) == None\nassert solution.trimBST(root, 6, 31) == <__main__.TreeNode object at 0x7fefeceb4fd0>\nassert solution.trimBST(root, 1, 20) == <__main__.TreeNode object at 0x7fefeceb4e90>\nassert solution.trimBST(root, 83, 91) == None\nassert solution.trimBST(root, 30, 76) == <__main__.TreeNode object at 0x7fefeceb4e90>\nassert solution.trimBST(root, 24, 96) == <__main__.TreeNode object at 0x7fefeceb5090>\nassert solution.trimBST(root, 100, 100) == None\nassert solution.trimBST(root, 45, 64) == <__main__.TreeNode object at 0x7fefeceb4f50>\nassert solution.trimBST(root, 29, 64) == <__main__.TreeNode object at 0x7fefeceb5150>\nassert solution.trimBST(root, 27, 68) == <__main__.TreeNode object at 0x7fefeceb4f10>\nassert solution.trimBST(root, 62, 63) == None\nassert solution.trimBST(root, 29, 76) == <__main__.TreeNode object at 0x7fefeceb4e90>\nassert solution.trimBST(root, 68, 74) == <__main__.TreeNode object at 0x7fefeceb5010>\nassert solution.trimBST(root, 20, 51) == <__main__.TreeNode object at 0x7fefeceb4fd0>\nassert solution.trimBST(root, 88, 97) == <__main__.TreeNode object at 0x7fefeceb4e50>\nassert solution.trimBST(root, 19, 26) == None\nassert solution.trimBST(root, 36, 57) == None\nassert solution.trimBST(root, 54, 100) == <__main__.TreeNode object at 0x7fefeceb4e90>\nassert solution.trimBST(root, 71, 80) == None\nassert solution.trimBST(root, 10, 23) == <__main__.TreeNode object at 0x7fefeceb5010>\nassert solution.trimBST(root, 43, 65) == <__main__.TreeNode object at 0x7fefeceb5150>\nassert solution.trimBST(root, 99, 99) == None\nassert solution.trimBST(root, 77, 100) == None\nassert solution.trimBST(root, 29, 74) == <__main__.TreeNode object at 0x7fefeceb4f90>\nassert solution.trimBST(root, 95, 95) == None\nassert solution.trimBST(root, 11, 29) == None\nassert solution.trimBST(root, 80, 98) == <__main__.TreeNode object at 0x7fefeceb4e10>\nassert solution.trimBST(root, 17, 20) == <__main__.TreeNode object at 0x7fefeceb4e90>\nassert solution.trimBST(root, 44, 51) == <__main__.TreeNode object at 0x7fefeceb4e10>\nassert solution.trimBST(root, 46, 61) == <__main__.TreeNode object at 0x7fefeceb4e90>\nassert solution.trimBST(root, 89, 93) == None\nassert solution.trimBST(root, 4, 14) == None\nassert solution.trimBST(root, 25, 28) == <__main__.TreeNode object at 0x7fefeceb4e50>\nassert solution.trimBST(root, 46, 66) == None\nassert solution.trimBST(root, 88, 95) == <__main__.TreeNode object at 0x7fefeceb53d0>\nassert solution.trimBST(root, 54, 62) == <__main__.TreeNode object at 0x7fefeceb5090>\nassert solution.trimBST(root, 7, 73) == <__main__.TreeNode object at 0x7fefeceb53d0>\nassert solution.trimBST(root, 59, 90) == <__main__.TreeNode object at 0x7fefeceb4e90>\nassert solution.trimBST(root, 65, 88) == <__main__.TreeNode object at 0x7fefeceb4e50>\nassert solution.trimBST(root, 52, 69) == <__main__.TreeNode object at 0x7fefeceb4e90>\nassert solution.trimBST(root, 31, 61) == None\nassert solution.trimBST(root, 88, 95) == <__main__.TreeNode object at 0x7fefeceb5010>\nassert solution.trimBST(root, 25, 61) == <__main__.TreeNode object at 0x7fefeceb5510>\nassert solution.trimBST(root, 15, 23) == <__main__.TreeNode object at 0x7fefeceb5690>\nassert solution.trimBST(root, 73, 73) == None\nassert solution.trimBST(root, 48, 68) == None\nassert solution.trimBST(root, 28, 79) == <__main__.TreeNode object at 0x7fefeceb5510>\nassert solution.trimBST(root, 33, 91) == <__main__.TreeNode object at 0x7fefeceb5010>\nassert solution.trimBST(root, 87, 99) == None\nassert solution.trimBST(root, 91, 98) == <__main__.TreeNode object at 0x7fefeceb5610>\nassert solution.trimBST(root, 42, 97) == <__main__.TreeNode object at 0x7fefeceb4f10>\nassert solution.trimBST(root, 22, 54) == <__main__.TreeNode object at 0x7fefeceb4e10>\nassert solution.trimBST(root, 86, 98) == None\nassert solution.trimBST(root, 69, 69) == None\nassert solution.trimBST(root, 60, 91) == <__main__.TreeNode object at 0x7fefeceb4f10>\nassert solution.trimBST(root, 73, 92) == <__main__.TreeNode object at 0x7fefeceb5610>\nassert solution.trimBST(root, 29, 99) == <__main__.TreeNode object at 0x7fefeceb4f10>\nassert solution.trimBST(root, 46, 50) == <__main__.TreeNode object at 0x7fefeceb5950>\nassert solution.trimBST(root, 51, 82) == <__main__.TreeNode object at 0x7fefeceb4f10>\nassert solution.trimBST(root, 59, 83) == <__main__.TreeNode object at 0x7fefeceb5990>\nassert solution.trimBST(root, 50, 93) == <__main__.TreeNode object at 0x7fefeceb5b10>\nassert solution.trimBST(root, 42, 45) == None\nassert solution.trimBST(root, 9, 41) == <__main__.TreeNode object at 0x7fefeceb5b10>\nassert solution.trimBST(root, 19, 40) == None\nassert solution.trimBST(root, 99, 99) == <__main__.TreeNode object at 0x7fefeceb5950>\nassert solution.trimBST(root, 99, 100) == None\nassert solution.trimBST(root, 73, 87) == None\nassert solution.trimBST(root, 56, 57) == None\nassert solution.trimBST(root, 74, 97) == <__main__.TreeNode object at 0x7fefeceb5b10>\nassert solution.trimBST(root, 22, 42) == <__main__.TreeNode object at 0x7fefeceb5b50>\nassert solution.trimBST(root, 85, 91) == None\nassert solution.trimBST(root, 76, 82) == None\nassert solution.trimBST(root, 43, 90) == <__main__.TreeNode object at 0x7fefeceb5b10>\nassert solution.trimBST(root, 97, 97) == None\nassert solution.trimBST(root, 59, 88) == None\nassert solution.trimBST(root, 19, 52) == None\nassert solution.trimBST(root, 64, 73) == <__main__.TreeNode object at 0x7fefeceb5610>\nassert solution.trimBST(root, 28, 98) == <__main__.TreeNode object at 0x7fefeceb5b50>\nassert solution.trimBST(root, 91, 94) == None\nassert solution.trimBST(root, 63, 91) == None\nassert solution.trimBST(root, 53, 68) == <__main__.TreeNode object at 0x7fefeceb5610>\nassert solution.trimBST(root, 1, 28) == <__main__.TreeNode object at 0x7fefeceb5790>\nassert solution.trimBST(root, 34, 68) == None\nassert solution.trimBST(root, 96, 99) == None\nassert solution.trimBST(root, 31, 89) == <__main__.TreeNode object at 0x7fefeceb5b10>\nassert solution.trimBST(root, 92, 96) == None\nassert solution.trimBST(root, 34, 51) == <__main__.TreeNode object at 0x7fefeceb5b10>\nassert solution.trimBST(root, 94, 97) == None\nassert solution.trimBST(root, 83, 83) == None\nassert solution.trimBST(root, 18, 32) == <__main__.TreeNode object at 0x7fefeceb61d0>\nassert solution.trimBST(root, 73, 81) == <__main__.TreeNode object at 0x7fefeceb6090>\nassert solution.trimBST(root, 2, 3) == None\nassert solution.trimBST(root, 20, 72) == <__main__.TreeNode object at 0x7fefeceb62d0>\nassert solution.trimBST(root, 30, 67) == <__main__.TreeNode object at 0x7fefeceb61d0>\nassert solution.trimBST(root, 64, 66) == None\nassert solution.trimBST(root, 92, 95) == None\nassert solution.trimBST(root, 21, 80) == <__main__.TreeNode object at 0x7fefeceb62d0>\nassert solution.trimBST(root, 48, 81) == <__main__.TreeNode object at 0x7fefeceb61d0>\nassert solution.trimBST(root, 88, 93) == None\nassert solution.trimBST(root, 49, 82) == <__main__.TreeNode object at 0x7fefeceb61d0>",
  "inefficient_solution": "class Solution:\n    def trimBST(\n        self, root: Optional[TreeNode], low: int, high: int\n    ) -> Optional[TreeNode]:\n        if root is None:\n            return None\n        root_copy = TreeNode(root.val)\n        root_copy.left = self.trimBST(root.left, low, high)\n        root_copy.right = self.trimBST(root.right, low, high)\n        if root_copy.val < low:\n            return self.trimBST(root_copy.right, low, high)\n        if root_copy.val > high:\n            return self.trimBST(root_copy.left, low, high)\n        root_copy.left = self.trimBST(root_copy.left, low, high)\n        root_copy.right = self.trimBST(root_copy.right, low, high)\n        return root_copy",
  "is_python": true
}