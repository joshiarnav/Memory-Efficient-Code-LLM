{
  "problem_idx": 2267,
  "task_name": "Check if There Is a Valid Parentheses String Path",
  "markdown_description": "\nA parentheses string is a **non-empty** string consisting only of `'('` and `')'`. It is **valid** if **any** of the following conditions is **true**:\n\n\n* It is `()`.\n* It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid parentheses strings.\n* It can be written as `(A)`, where `A` is a valid parentheses string.\n\n\nYou are given an `m x n` matrix of parentheses `grid`. A **valid parentheses string path** in the grid is a path satisfying **all** of the following conditions:\n\n\n* The path starts from the upper left cell `(0, 0)`.\n* The path ends at the bottom-right cell `(m - 1, n - 1)`.\n* The path only ever moves **down** or **right**.\n* The resulting parentheses string formed by the path is **valid**.\n\n\nReturn `true` *if there exists a **valid parentheses string path** in the grid.* Otherwise, return `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2267.Check%20if%20There%20Is%20a%20Valid%20Parentheses%20String%20Path/images/example1drawio.png)\n\n```\n\n**Input:** grid = [[\"(\",\"(\",\"(\"],[\")\",\"(\",\")\"],[\"(\",\"(\",\")\"],[\"(\",\"(\",\")\"]]\n**Output:** true\n**Explanation:** The above diagram shows two possible paths that form valid parentheses strings.\nThe first path shown results in the valid parentheses string \"()(())\".\nThe second path shown results in the valid parentheses string \"((()))\".\nNote that there may be other valid parentheses string paths.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2267.Check%20if%20There%20Is%20a%20Valid%20Parentheses%20String%20Path/images/example2drawio.png)\n\n```\n\n**Input:** grid = [[\")\",\")\"],[\"(\",\"(\"]]\n**Output:** false\n**Explanation:** The two possible paths form the parentheses strings \"))(\" and \")((\". Since neither of them are valid parentheses strings, we return false.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 100`\n* `grid[i][j]` is either `'('` or `')'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def hasValidPath(self, grid: List[List[str]]) -> bool:\n        @cache\n        def dfs(i, j, t):\n            if grid[i][j] == '(':\n                t += 1\n            else:\n                t -= 1\n            if t < 0:\n                return False\n            if i == m - 1 and j == n - 1:\n                return t == 0\n            for x, y in [(i + 1, j), (i, j + 1)]:\n                if x < m and y < n and dfs(x, y, t):\n                    return True\n            return False\n\n        m, n = len(grid), len(grid[0])\n        return dfs(0, 0, 0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def hasValidPath(self, grid: List[List[str]]) -> bool:\n        @cache\n        def dfs(i, j, t):\n            if grid[i][j] == '(':\n                t += 1\n            else:\n                t -= 1\n            if t < 0:\n                return False\n            if i == m - 1 and j == n - 1:\n                return t == 0\n            for x, y in [(i + 1, j), (i, j + 1)]:\n                if x < m and y < n and dfs(x, y, t):\n                    return True\n            return False\n\n        m, n = len(grid), len(grid[0])\n        return dfs(0, 0, 0)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(1, 6)\n    n = random.randint(1, 6)\n    grid = [['(' if random.random() < 0.5 else ')' for _ in range(n)] for _ in range(m)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.hasValidPath(grid)\n\n    return grid, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.hasValidPath(grid) == expected_result\n        print(f\"assert solution.hasValidPath({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.hasValidPath({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.hasValidPath([[')', '(', '(', ')', '('], ['(', '(', '(', ')', '('], [')', '(', '(', '(', ')'], [')', '(', ')', '(', ')'], ['(', ')', '(', ')', '(']]) == False\nassert solution.hasValidPath([['(', ')'], ['(', ')'], [')', '(']]) == False\nassert solution.hasValidPath([['(', '(', ')', ')', '(', ')'], ['(', ')', ')', '(', ')', ')'], [')', ')', '(', '(', ')', ')'], [')', ')', ')', '(', ')', '('], [')', '(', '(', ')', '(', '('], [')', ')', '(', ')', '(', ')']]) == False\nassert solution.hasValidPath([['(', '(', '(', '(', '(', ')'], [')', '(', '(', ')', ')', ')'], [')', '(', ')', '(', ')', '('], ['(', ')', ')', '(', ')', ')'], ['(', ')', '(', ')', ')', ')']]) == True\nassert solution.hasValidPath([[')', ')', ')', '('], [')', ')', ')', ')'], [')', ')', '(', ')'], [')', '(', '(', '(']]) == False\nassert solution.hasValidPath([['(']]) == False\nassert solution.hasValidPath([['('], ['('], ['(']]) == False\nassert solution.hasValidPath([[')'], ['(']]) == False\nassert solution.hasValidPath([['(']]) == False\nassert solution.hasValidPath([['(', ')', ')', ')'], [')', ')', '(', ')'], ['(', '(', ')', ')'], [')', '(', '(', ')']]) == False\nassert solution.hasValidPath([[')'], [')'], [')'], ['(']]) == False\nassert solution.hasValidPath([[')', '(', '('], [')', ')', '('], ['(', ')', '(']]) == False\nassert solution.hasValidPath([['(', '(', '('], ['(', '(', ')'], ['(', ')', ')'], ['(', ')', ')']]) == True\nassert solution.hasValidPath([[')', ')'], ['(', '('], [')', '('], ['(', '('], ['(', ')']]) == False\nassert solution.hasValidPath([[')', '(', '(', ')', '(', ')'], ['(', ')', ')', ')', '(', ')'], [')', '(', ')', ')', '(', ')'], ['(', '(', '(', ')', ')', ')'], ['(', '(', ')', ')', '(', '(']]) == False\nassert solution.hasValidPath([['(', '(', ')', ')']]) == True\nassert solution.hasValidPath([['(', ')'], ['(', '(']]) == False\nassert solution.hasValidPath([[')', '(', ')'], ['(', ')', ')']]) == False\nassert solution.hasValidPath([[')'], [')']]) == False\nassert solution.hasValidPath([['(', ')', '('], ['(', '(', '(']]) == False\nassert solution.hasValidPath([[')', '(', '('], [')', '(', ')']]) == False\nassert solution.hasValidPath([['(', '(', '(', ')', ')', ')'], [')', '(', ')', '(', ')', ')'], [')', ')', '(', '(', '(', '('], [')', ')', ')', '(', ')', ')'], [')', '(', ')', ')', ')', '('], ['(', '(', ')', ')', ')', ')']]) == False\nassert solution.hasValidPath([['(', ')'], [')', '('], [')', '('], ['(', '('], [')', '(']]) == False\nassert solution.hasValidPath([[')', '(', ')', ')', '(', '('], ['(', '(', '(', '(', ')', '('], ['(', '(', ')', '(', ')', '('], ['(', ')', '(', '(', ')', ')'], [')', ')', '(', ')', ')', ')'], [')', ')', '(', '(', ')', '(']]) == False\nassert solution.hasValidPath([['(', '('], ['(', '('], ['(', ')'], ['(', '(']]) == False\nassert solution.hasValidPath([[')', '('], ['(', '(']]) == False\nassert solution.hasValidPath([[')', '(', ')', ')'], [')', ')', '(', '('], ['(', '(', '(', ')'], ['(', ')', '(', '('], ['(', ')', '(', '('], ['(', ')', '(', ')']]) == False\nassert solution.hasValidPath([['(', '(', ')'], ['(', ')', ')'], [')', '(', ')'], ['(', '(', '('], ['(', '(', '('], [')', ')', ')']]) == True\nassert solution.hasValidPath([[')', '(', ')', '(', '(']]) == False\nassert solution.hasValidPath([[')', ')', ')', '(', ')', ')'], [')', '(', '(', ')', ')', ')'], [')', '(', ')', ')', ')', ')']]) == False\nassert solution.hasValidPath([[')', '('], ['(', '('], [')', ')'], ['(', ')'], [')', ')']]) == False\nassert solution.hasValidPath([['(', '(', '(', '(', '('], ['(', '(', ')', '(', ')']]) == False\nassert solution.hasValidPath([['(', '('], ['(', ')'], [')', ')']]) == True\nassert solution.hasValidPath([['(', '(', ')', ')', '(', ')'], [')', '(', '(', ')', ')', '(']]) == False\nassert solution.hasValidPath([['(', ')'], [')', ')'], ['(', ')'], ['(', ')'], [')', '('], [')', '(']]) == False\nassert solution.hasValidPath([['('], ['('], [')'], ['('], [')'], [')']]) == True\nassert solution.hasValidPath([['(', '(', ')', '(', '('], [')', ')', '(', '(', '('], ['(', ')', ')', '(', '('], ['(', '(', ')', '(', '('], [')', '(', '(', '(', '(']]) == False\nassert solution.hasValidPath([['(', ')', ')', '(', '('], ['(', ')', ')', '(', ')'], [')', ')', ')', ')', '('], ['(', '(', '(', '(', '('], [')', '(', '(', ')', ')']]) == False\nassert solution.hasValidPath([[')', '(', ')', ')', ')']]) == False\nassert solution.hasValidPath([['(', '(']]) == False\nassert solution.hasValidPath([[')'], [')'], ['('], ['(']]) == False\nassert solution.hasValidPath([[')', ')', ')'], ['(', '(', '('], ['(', '(', ')']]) == False\nassert solution.hasValidPath([['('], [')'], [')'], ['('], [')']]) == False\nassert solution.hasValidPath([['(', ')', ')', '(', '(', ')'], ['(', '(', ')', '(', ')', ')']]) == False\nassert solution.hasValidPath([[')', '(', ')'], ['(', ')', '('], ['(', '(', ')'], [')', ')', ')']]) == False\nassert solution.hasValidPath([['(', ')', ')', '(']]) == False\nassert solution.hasValidPath([[')', '(', ')', '(', ')', '('], ['(', '(', '(', '(', ')', ')'], [')', ')', '(', '(', ')', '(']]) == False\nassert solution.hasValidPath([[')', '(', ')', ')'], ['(', ')', '(', ')']]) == False\nassert solution.hasValidPath([[')', ')', '(', '(', ')'], [')', '(', '(', ')', '('], ['(', ')', '(', '(', ')']]) == False\nassert solution.hasValidPath([[')', '(', '('], ['(', '(', '('], [')', ')', ')'], [')', '(', '('], [')', ')', ')']]) == False\nassert solution.hasValidPath([[')', '(', '(', '(', '(', '('], [')', ')', ')', '(', '(', '('], ['(', ')', ')', ')', '(', '('], [')', '(', '(', '(', ')', '('], ['(', '(', '(', '(', '(', ')']]) == False\nassert solution.hasValidPath([[')', ')', '(', '('], [')', ')', ')', '('], ['(', '(', ')', ')']]) == False\nassert solution.hasValidPath([['(', '(', '(', ')', ')'], [')', '(', '(', '(', ')'], [')', '(', '(', '(', '('], [')', '(', ')', '(', '('], [')', ')', '(', ')', ')']]) == False\nassert solution.hasValidPath([['(', ')', '(', '('], ['(', '(', '(', ')'], ['(', '(', '(', '('], [')', ')', '(', '('], ['(', ')', ')', '(']]) == False\nassert solution.hasValidPath([[')', ')', ')', ')'], [')', ')', '(', ')'], ['(', ')', '(', '('], [')', '(', '(', ')']]) == False\nassert solution.hasValidPath([['(', ')', '(', ')'], ['(', ')', ')', '(']]) == False\nassert solution.hasValidPath([[')', ')', '(', ')', '(', ')'], ['(', '(', ')', ')', '(', '('], [')', ')', ')', '(', '(', '('], [')', ')', '(', '(', ')', '('], ['(', '(', '(', ')', '(', '('], [')', ')', ')', '(', ')', ')']]) == False\nassert solution.hasValidPath([[')', '(', ')'], ['(', ')', '('], ['(', ')', '('], ['(', '(', ')'], ['(', '(', ')']]) == False\nassert solution.hasValidPath([['(', ')'], [')', '('], ['(', '('], ['(', ')']]) == False\nassert solution.hasValidPath([['('], ['('], ['('], ['('], [')'], ['(']]) == False\nassert solution.hasValidPath([[')', '(', '(', '('], [')', ')', '(', ')'], [')', ')', '(', '(']]) == False\nassert solution.hasValidPath([[')', ')', '(', '(', ')'], [')', ')', '(', ')', ')'], ['(', ')', '(', '(', ')']]) == False\nassert solution.hasValidPath([['(', ')', ')', '(', ')', ')'], ['(', ')', '(', ')', '(', ')'], ['(', '(', ')', ')', ')', '('], ['(', ')', '(', ')', ')', ')']]) == False\nassert solution.hasValidPath([[')', ')', '(', '('], ['(', ')', '(', '('], ['(', ')', ')', ')'], ['(', '(', '(', '('], ['(', '(', '(', ')'], ['(', '(', '(', '(']]) == False\nassert solution.hasValidPath([[')', '(', '(', '('], [')', ')', '(', '('], ['(', '(', ')', '(']]) == False\nassert solution.hasValidPath([[')', ')', ')'], [')', ')', ')'], ['(', ')', ')'], [')', '(', ')'], ['(', ')', '('], [')', ')', ')']]) == False\nassert solution.hasValidPath([[')', '(', '(', '(', ')'], ['(', '(', ')', ')', ')']]) == False\nassert solution.hasValidPath([['(', ')', ')', ')', ')', ')'], ['(', '(', '(', ')', ')', '('], ['(', ')', '(', ')', '(', ')'], [')', '(', ')', ')', '(', ')'], [')', ')', '(', ')', ')', ')'], [')', ')', '(', ')', '(', '(']]) == False\nassert solution.hasValidPath([[')', '('], ['(', '('], [')', '('], [')', '('], ['(', ')']]) == False\nassert solution.hasValidPath([['(', ')', '(', '('], [')', ')', '(', '('], [')', '(', '(', ')'], ['(', '(', ')', '('], ['(', '(', ')', ')'], ['(', '(', ')', ')']]) == False\nassert solution.hasValidPath([[')', ')', ')', ')', '(', '(']]) == False\nassert solution.hasValidPath([[')'], ['('], [')'], [')'], [')'], [')']]) == False\nassert solution.hasValidPath([[')', '(', ')'], [')', '(', ')'], [')', '(', ')'], ['(', ')', '('], ['(', '(', ')']]) == False\nassert solution.hasValidPath([['(', '('], [')', '(']]) == False\nassert solution.hasValidPath([[')'], ['('], ['(']]) == False\nassert solution.hasValidPath([[')', ')']]) == False\nassert solution.hasValidPath([[')', '(', ')', ')', ')', '('], [')', ')', ')', ')', ')', '('], [')', '(', '(', ')', '(', ')'], [')', '(', ')', '(', ')', '('], ['(', ')', '(', ')', ')', '('], [')', ')', '(', ')', '(', ')']]) == False\nassert solution.hasValidPath([[')'], [')'], [')']]) == False\nassert solution.hasValidPath([['(', ')', '(', ')'], [')', '(', '(', ')'], [')', ')', ')', '(']]) == False\nassert solution.hasValidPath([[')', ')'], [')', '('], [')', ')'], [')', '('], ['(', '(']]) == False\nassert solution.hasValidPath([['(', '(', '(', ')', '(', ')'], [')', '(', ')', ')', '(', ')'], ['(', '(', ')', '(', ')', '('], [')', ')', ')', '(', ')', '('], ['(', ')', '(', '(', ')', '(']]) == False\nassert solution.hasValidPath([['('], [')'], [')'], ['(']]) == False\nassert solution.hasValidPath([['(', '(', ')', '(', '('], ['(', ')', ')', ')', ')'], [')', ')', '(', ')', ')'], [')', ')', ')', '(', '(']]) == False\nassert solution.hasValidPath([['(', ')'], [')', '(']]) == False\nassert solution.hasValidPath([[')', ')', ')'], ['(', ')', ')'], [')', ')', '('], ['(', '(', '('], ['(', '(', '('], [')', '(', '(']]) == False\nassert solution.hasValidPath([['(', '(', '(', ')', ')']]) == False\nassert solution.hasValidPath([['('], [')'], ['('], [')']]) == True\nassert solution.hasValidPath([[')', '(', '(', ')', '('], ['(', '(', '(', '(', ')'], [')', ')', ')', ')', ')'], ['(', '(', ')', '(', ')'], ['(', '(', '(', ')', '('], [')', ')', ')', ')', ')']]) == False\nassert solution.hasValidPath([['(', '(', ')', ')'], [')', ')', ')', '('], ['(', '(', '(', '(']]) == False\nassert solution.hasValidPath([['(', '(', '(', '(', '(']]) == False\nassert solution.hasValidPath([['(', ')', ')', '(', '('], [')', ')', ')', ')', '('], [')', '(', ')', '(', ')'], ['(', '(', ')', ')', ')']]) == False\nassert solution.hasValidPath([['(', '(', '(', '(', '('], ['(', '(', ')', '(', '(']]) == False\nassert solution.hasValidPath([['('], ['('], [')']]) == False\nassert solution.hasValidPath([[')'], ['('], ['('], ['('], [')']]) == False\nassert solution.hasValidPath([['(', ')'], ['(', '('], ['(', '(']]) == False\nassert solution.hasValidPath([['(', '(', ')'], ['(', ')', ')'], ['(', '(', ')'], ['(', '(', '('], [')', ')', '(']]) == False\nassert solution.hasValidPath([[')', '(', ')', '(', '('], ['(', '(', ')', ')', '('], [')', ')', '(', '(', ')'], ['(', ')', ')', ')', '('], [')', '(', '(', ')', '('], [')', ')', '(', '(', ')']]) == False\nassert solution.hasValidPath([['(', ')', '(', '('], [')', '(', ')', ')'], [')', ')', ')', ')'], [')', '(', ')', '('], [')', '(', '(', '(']]) == False\nassert solution.hasValidPath([['(', '(', '(', '(', '('], [')', ')', ')', ')', '('], [')', '(', ')', ')', ')']]) == False\nassert solution.hasValidPath([['(', ')', '(', '(', ')', '('], [')', '(', ')', ')', '(', '('], ['(', ')', '(', ')', ')', '('], ['(', ')', '(', ')', ')', '('], [')', ')', ')', '(', ')', ')']]) == True",
  "inefficient_solution": "class Solution:\n    def hasValidPath(self, grid: List[List[str]]) -> bool:\n        def dfs(i, j, stack, path):\n            if i == m - 1 and j == n - 1:\n                return len(path) == 0\n            for x, y in [(i + 1, j), (i, j + 1)]:\n                if x < m and y < n:\n                    if grid[x][y] == '(' and (not stack or (stack[-1] == '(' and len(path) + 1 == 0))):\n                        dfs(x, y, stack + ['('], path + ['('])\n                    elif grid[x][y] == ')' and (not path or (path[-1] == ')' and len(stack) > 0 and stack[-1] == '(')):\n                        dfs(x, y, stack, path + [')'])\n            return False\n\n        m, n = len(grid), len(grid[0])\n        return dfs(0, 0, [], [])",
  "is_python": true
}