{
  "problem_idx": 611,
  "task_name": "Valid Triangle Number",
  "markdown_description": "\nGiven an integer array `nums`, return *the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,2,3,4]\n**Output:** 3\n**Explanation:** Valid combinations are: \n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,2,3,4]\n**Output:** 4\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `0 <= nums[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        nums.sort()\n        ans, n = 0, len(nums)\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                k = bisect_left(nums, nums[i] + nums[j], lo=j + 1) - 1\n                ans += k - j\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom bisect import bisect_left\n\nclass Solution:\n    def triangleNumber(self, nums):\n        nums.sort()\n        ans, n = 0, len(nums)\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                k = bisect_left(nums, nums[i] + nums[j], lo=j + 1) - 1\n                ans += k - j\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 1001), random.randint(3, 20))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.triangleNumber(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.triangleNumber(nums) == expected_result\n        print(f\"assert solution.triangleNumber({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.triangleNumber({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.triangleNumber([305, 405, 432, 770, 844]) == 5\nassert solution.triangleNumber([39, 41, 110, 114, 204, 206, 236, 266, 311, 390, 561, 563, 618, 712, 781, 807, 856, 896, 920, 996]) == 423\nassert solution.triangleNumber([112, 225, 231, 270, 304, 357, 371, 462, 468, 578, 593, 656, 772, 842, 886]) == 269\nassert solution.triangleNumber([16, 82, 144, 164, 252, 316, 453, 490, 512, 569, 614, 635, 638, 684, 806, 929]) == 266\nassert solution.triangleNumber([2, 28, 141, 249, 280, 400, 511, 783, 985]) == 13\nassert solution.triangleNumber([116, 440, 769, 928, 959]) == 5\nassert solution.triangleNumber([61, 394, 455, 609, 839]) == 4\nassert solution.triangleNumber([82, 138, 210, 534, 596, 625, 628, 644, 706, 734, 774, 779, 979]) == 198\nassert solution.triangleNumber([48, 158, 297, 369, 583, 670, 710, 729, 758, 786, 831]) == 101\nassert solution.triangleNumber([32, 154, 214, 222, 258, 390, 539, 779, 837, 861, 918, 940, 964, 993]) == 178\nassert solution.triangleNumber([308, 392, 617, 801, 964]) == 7\nassert solution.triangleNumber([59, 244, 336, 505, 514, 520, 533, 666, 737, 800, 827, 887, 894, 938, 983, 997]) == 405\nassert solution.triangleNumber([5, 113, 149, 262, 560, 634, 761, 808, 885, 893, 915, 978]) == 103\nassert solution.triangleNumber([46, 63, 80, 99, 104, 118, 241, 314, 369, 403, 426, 537, 686, 708, 719, 838, 873, 875, 993, 995]) == 369\nassert solution.triangleNumber([24, 41, 182, 350, 566, 645, 843]) == 5\nassert solution.triangleNumber([2, 17, 45, 67, 384, 428, 431, 475, 547, 679, 693, 728, 806, 815, 864, 907, 941]) == 291\nassert solution.triangleNumber([146, 186, 254, 272, 357, 375, 376, 452, 484, 505, 715, 739, 792, 848, 886, 912, 1000]) == 394\nassert solution.triangleNumber([347, 893, 919]) == 1\nassert solution.triangleNumber([162, 195, 202, 212, 383, 438, 446, 476, 581]) == 55\nassert solution.triangleNumber([185, 257, 372, 627, 830]) == 4\nassert solution.triangleNumber([100, 182, 377, 598, 714, 793, 817]) == 16\nassert solution.triangleNumber([63, 708, 869]) == 0\nassert solution.triangleNumber([267, 414, 416, 465, 604, 633, 643, 702, 839, 850, 999]) == 145\nassert solution.triangleNumber([51, 154, 189, 304, 319, 764, 809]) == 11\nassert solution.triangleNumber([33, 83, 121, 157, 177, 349, 396, 442, 575, 698, 759, 871]) == 59\nassert solution.triangleNumber([89, 114, 143, 230, 245, 269, 309, 492, 513, 537, 543, 693, 696, 843, 973, 995]) == 235\nassert solution.triangleNumber([30, 114, 120, 487, 543, 721, 786, 901]) == 16\nassert solution.triangleNumber([47, 68, 292, 440, 492, 497, 602, 748, 875, 878]) == 55\nassert solution.triangleNumber([62, 154, 180, 255, 369, 394, 415, 457, 651, 722, 805]) == 72\nassert solution.triangleNumber([69, 93, 191, 200, 255, 280, 283, 321, 327, 381, 403, 534, 592, 689, 857, 885, 926, 956]) == 344\nassert solution.triangleNumber([45, 175, 226, 228, 275, 351, 355, 382, 487, 535, 557, 617, 711, 718, 854, 899]) == 299\nassert solution.triangleNumber([58, 352, 636, 763, 860]) == 4\nassert solution.triangleNumber([34, 127, 169, 243, 256, 277, 284, 285, 298, 398, 436, 447, 496, 536, 774, 901, 988]) == 305\nassert solution.triangleNumber([103, 145, 185, 209, 254, 257, 721, 725, 737, 754, 776, 779, 803, 848, 931, 954]) == 366\nassert solution.triangleNumber([1, 173, 236, 326, 384, 504, 640, 762]) == 20\nassert solution.triangleNumber([165, 244, 264, 400, 545, 560, 692, 703, 771, 819, 906]) == 114\nassert solution.triangleNumber([8, 93, 148, 230, 288, 328, 419, 450, 481, 563, 672, 744, 758, 770, 872, 886, 889, 945, 987, 996]) == 604\nassert solution.triangleNumber([379, 574, 584, 626, 676]) == 10\nassert solution.triangleNumber([45, 67, 120, 144, 161, 173, 218, 282, 332, 421, 445, 450, 508, 615, 730, 768, 908, 948, 955, 958]) == 394\nassert solution.triangleNumber([5, 48, 122, 149, 155, 163, 181, 227, 336, 344, 352, 367, 375, 405, 453, 594, 630, 745, 842]) == 360\nassert solution.triangleNumber([58, 238, 262, 266, 316, 374, 376, 436, 480, 535, 774, 901, 944, 983]) == 170\nassert solution.triangleNumber([9, 99, 110, 130, 217, 298, 319, 363, 424, 483, 495, 528, 662, 686, 789, 856, 860]) == 274\nassert solution.triangleNumber([409, 467, 597, 652, 824, 963, 1000]) == 33\nassert solution.triangleNumber([180, 182, 354, 355, 486, 549, 576, 595, 673, 752, 818, 833, 871, 981, 982]) == 324\nassert solution.triangleNumber([210, 243, 315, 383, 641, 771, 784, 891, 917]) == 51\nassert solution.triangleNumber([24, 26, 157, 177, 294, 323, 334, 342, 429, 487, 506, 642, 681, 781, 900, 925, 931, 982, 1000]) == 416\nassert solution.triangleNumber([7, 190, 274, 315, 413, 482, 537, 643, 654, 755, 914, 919, 986]) == 150\nassert solution.triangleNumber([41, 58, 164, 301, 391, 532, 625, 934]) == 9\nassert solution.triangleNumber([21, 97, 110, 146, 150, 165, 306, 393, 409, 557, 560, 621, 946]) == 80\nassert solution.triangleNumber([21, 36, 124, 207, 281, 315, 345, 391, 416, 442, 557, 578, 629, 721, 762, 817, 924, 974]) == 352\nassert solution.triangleNumber([54, 63, 104, 157, 199, 343, 514, 540, 570, 607, 647, 656, 664, 704, 852, 953]) == 273\nassert solution.triangleNumber([209, 370, 407, 609, 648, 655, 907]) == 24\nassert solution.triangleNumber([229, 286, 452, 477]) == 4\nassert solution.triangleNumber([78, 258, 387, 398, 413, 456, 474, 477, 502, 542, 635, 674, 691, 737, 782, 975]) == 427\nassert solution.triangleNumber([89, 159, 186, 487, 858]) == 1\nassert solution.triangleNumber([80, 206, 376, 600, 780, 942]) == 6\nassert solution.triangleNumber([341, 363, 709, 783, 834]) == 7\nassert solution.triangleNumber([229, 321, 468, 658, 736, 774]) == 15\nassert solution.triangleNumber([178, 256, 307, 310, 329, 354, 385, 423, 564, 640, 739, 822, 884, 949]) == 215\nassert solution.triangleNumber([343, 438, 889]) == 0\nassert solution.triangleNumber([267, 380, 402, 587, 610, 908, 922]) == 25\nassert solution.triangleNumber([474, 765, 790, 810]) == 4\nassert solution.triangleNumber([45, 370, 439, 453, 496, 668, 758, 766, 810, 823, 984]) == 116\nassert solution.triangleNumber([55, 112, 123, 156, 163, 214, 255, 303, 437, 480, 531, 604, 654, 733, 889, 969, 979, 990, 999]) == 366\nassert solution.triangleNumber([56, 68, 85, 175, 231, 232, 263, 288, 367, 378, 390, 459, 476, 481, 503, 757, 798, 910]) == 338\nassert solution.triangleNumber([40, 191, 309, 428, 501, 721]) == 6\nassert solution.triangleNumber([19, 43, 259, 308, 327, 443, 868, 877, 955, 966]) == 37\nassert solution.triangleNumber([293, 556, 845]) == 1\nassert solution.triangleNumber([16, 121, 342, 416, 423, 533, 562, 673, 674, 714, 897]) == 93\nassert solution.triangleNumber([33, 81, 152, 222, 231, 235, 241, 349, 384, 545, 560, 574, 624, 629, 784, 797, 822, 874, 888]) == 446\nassert solution.triangleNumber([133, 207, 776, 855]) == 2\nassert solution.triangleNumber([20, 22, 40, 102, 215, 258, 359, 373, 530, 549, 569, 654, 724, 760, 813, 839]) == 202\nassert solution.triangleNumber([91, 109, 160, 195, 453, 496, 510, 541, 565, 653, 688, 700, 935]) == 159\nassert solution.triangleNumber([16, 412, 652, 837, 881, 907, 944]) == 20\nassert solution.triangleNumber([123, 246, 422, 506, 591, 673, 716, 825, 871]) == 55\nassert solution.triangleNumber([2, 41, 122, 158, 268, 361, 439, 506, 553, 643, 677, 733, 741, 762, 764, 879]) == 264\nassert solution.triangleNumber([31, 121, 237, 268, 452, 457, 466, 507, 691, 777, 812, 899, 941, 966, 988]) == 231\nassert solution.triangleNumber([21, 136, 275, 276, 392, 472, 497, 503, 646, 664, 687, 784, 864, 885, 888, 912, 942, 955, 991]) == 616\nassert solution.triangleNumber([68, 114, 200, 259, 417, 633, 665, 745, 796, 852]) == 53\nassert solution.triangleNumber([112, 123, 134, 140, 150, 309, 640, 718, 731, 830, 861, 912]) == 88\nassert solution.triangleNumber([231, 371, 439, 447, 574, 906, 982]) == 20\nassert solution.triangleNumber([3, 12, 60, 182, 230, 238, 266, 269, 347, 350, 432, 507, 681, 791, 897, 908, 914, 965]) == 257\nassert solution.triangleNumber([93, 170, 236, 271, 276, 282, 305, 310, 338, 422, 560, 814, 816, 851, 919]) == 213\nassert solution.triangleNumber([2, 26, 66, 104, 129, 144, 182, 295, 350, 508, 521, 587, 607, 642, 651, 744, 768, 914, 995]) == 312\nassert solution.triangleNumber([411, 631, 724, 832, 965]) == 10\nassert solution.triangleNumber([111, 470, 595, 809, 830, 904]) == 13\nassert solution.triangleNumber([175, 312, 608, 625, 712, 750, 761, 765, 875]) == 75\nassert solution.triangleNumber([47, 127, 132, 147, 338, 340, 345, 425, 438, 461, 476, 575, 750, 886, 908]) == 208\nassert solution.triangleNumber([171, 192, 447]) == 0\nassert solution.triangleNumber([45, 181, 467, 579, 795, 942, 949, 968]) == 30\nassert solution.triangleNumber([35, 89, 147, 157, 166, 270, 271, 277, 345, 448, 467, 491, 541, 628, 637, 750, 838, 893, 955]) == 386\nassert solution.triangleNumber([47, 66, 145, 262, 406, 415, 693, 722]) == 13\nassert solution.triangleNumber([297, 625, 774, 964]) == 3\nassert solution.triangleNumber([35, 54, 69, 95, 112, 243, 425, 451, 575, 588, 709, 730, 902]) == 69\nassert solution.triangleNumber([7, 32, 47, 122, 173, 198, 202, 241, 302, 310, 321, 393, 431, 484, 493, 746, 826, 911, 983, 986]) == 332\nassert solution.triangleNumber([1, 81, 89, 127, 168, 188, 201, 411, 555, 644, 846, 858, 912]) == 63\nassert solution.triangleNumber([26, 175, 189, 202, 267, 316, 324, 338, 364, 368, 420, 535, 647, 669, 725, 739, 787, 816, 836]) == 512\nassert solution.triangleNumber([34, 43, 111, 228, 396, 419, 507, 567, 611, 692, 698, 730, 834, 966]) == 160\nassert solution.triangleNumber([83, 88, 416, 587, 597, 616, 876, 931]) == 28\nassert solution.triangleNumber([41, 111, 155, 368, 570, 695, 880]) == 5",
  "inefficient_solution": "class Solution:\n    def triangleNumber(self, nums: List[int]) -> int:\n        nums_copy = nums.copy()\n        for i in range(len(nums_copy)):\n            nums_copy[i] = [nums_copy[i]]\n        nums_copy = nums_copy + nums_copy\n        nums_copy = nums_copy + nums_copy\n        nums_copy = nums_copy + nums_copy\n        ans = 0\n        for i in range(len(nums_copy) - 2):\n            for j in range(i + 1, len(nums_copy) - 1):\n                for k in range(j + 1, len(nums_copy)):\n                    if nums_copy[i] + nums_copy[j] > nums_copy[k]:\n                        ans += 1\n        return ans",
  "is_python": true
}