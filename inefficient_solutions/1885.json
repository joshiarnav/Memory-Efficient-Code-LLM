{
  "problem_idx": 1885,
  "task_name": "Count Pairs in Two Arrays",
  "markdown_description": "\nGiven two integer arrays `nums1` and `nums2` of length `n`, count the pairs of indices `(i, j)` such that `i < j` and `nums1[i] + nums1[j] > nums2[i] + nums2[j]`.\n\n\nReturn *the **number of pairs** satisfying the condition.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,2,1], nums2 = [1,2,1,2]\n**Output:** 1\n**Explanation**: The pairs satisfying the condition are:\n- (0, 2) where 2 + 2 > 1 + 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,10,6,2], nums2 = [1,4,1,5]\n**Output:** 5\n**Explanation**: The pairs satisfying the condition are:\n- (0, 1) where 1 + 10 > 1 + 4.\n- (0, 2) where 1 + 6 > 1 + 1.\n- (1, 2) where 10 + 6 > 4 + 1.\n- (1, 3) where 10 + 2 > 4 + 5.\n- (2, 3) where 6 + 2 > 1 + 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int]) -> int:\n        n = len(nums1)\n        d = [nums1[i] - nums2[i] for i in range(n)]\n        d.sort()\n        return sum(n - bisect_right(d, -v, lo=i + 1) for i, v in enumerate(d))\n",
  "test_case_generator": "\nimport random\nimport bisect\n\nclass Solution:\n    def countPairs(self, nums1, nums2):\n        n = len(nums1)\n        d = [nums1[i] - nums2[i] for i in range(n)]\n        d.sort()\n        return sum(n - bisect.bisect_right(d, -v, lo=i + 1) for i, v in enumerate(d))\n\ndef generate_test_case():\n    solution = Solution()\n    test_case_generator_results = []\n    for _ in range(100):\n        # Generate random numbers list\n        n = random.randint(1, 10)\n        nums1 = [random.randint(1, 100) for _ in range(n)]\n        nums2 = [random.randint(1, 100) for _ in range(n)]\n\n        # Calculate the expected result using the provided Solution class\n        expected_result = solution.countPairs(nums1, nums2)\n\n        test_case = f\"assert solution.countPairs({nums1}, {nums2}) == {expected_result}\"\n        test_case_generator_results.append(test_case)\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    test_case_generator_results = generate_test_case()\n",
  "test_case": "assert solution.countPairs([10, 86, 37, 91], [77, 47, 52, 86]) == 2\nassert solution.countPairs([65], [59]) == 0\nassert solution.countPairs([9], [93]) == 0\nassert solution.countPairs([39, 47], [78, 83]) == 0\nassert solution.countPairs([55, 43, 20, 9, 12, 60, 76, 9], [12, 11, 22, 31, 39, 93, 85, 2]) == 13\nassert solution.countPairs([83, 31, 69], [78, 40, 70]) == 1\nassert solution.countPairs([52, 97, 93, 21, 38, 15, 27, 27], [89, 15, 60, 80, 18, 43, 21, 99]) == 11\nassert solution.countPairs([32, 48, 65, 1, 43, 74, 100], [1, 60, 91, 56, 76, 20, 78]) == 9\nassert solution.countPairs([45, 1, 100, 3, 35], [73, 70, 91, 6, 82]) == 1\nassert solution.countPairs([23, 29], [69, 4]) == 0\nassert solution.countPairs([21, 78, 90, 27, 100, 25, 88, 21, 34, 48], [66, 36, 82, 37, 57, 74, 20, 62, 92, 15]) == 20\nassert solution.countPairs([21, 84, 23, 27, 27, 31, 29, 59, 35, 31], [9, 36, 77, 54, 94, 82, 32, 88, 71, 73]) == 7\nassert solution.countPairs([23, 50, 1, 55], [28, 95, 30, 5]) == 3\nassert solution.countPairs([10, 71, 40, 65, 76, 62, 31], [27, 47, 95, 41, 92, 65, 53]) == 9\nassert solution.countPairs([68, 31, 78, 87, 84, 44, 36, 71], [35, 30, 45, 39, 85, 48, 96, 88]) == 15\nassert solution.countPairs([50, 15, 46, 88, 82, 71, 92], [72, 17, 93, 81, 86, 63, 94]) == 7\nassert solution.countPairs([99], [89]) == 0\nassert solution.countPairs([6], [60]) == 0\nassert solution.countPairs([6, 93, 85], [100, 90, 31]) == 1\nassert solution.countPairs([71, 59, 98, 67, 53, 37, 81, 2, 97, 38], [36, 32, 37, 4, 8, 7, 10, 80, 36, 89]) == 32\nassert solution.countPairs([66, 50, 14, 10], [25, 57, 38, 60]) == 2\nassert solution.countPairs([98, 25], [64, 12]) == 1\nassert solution.countPairs([70, 22, 80, 56, 58, 84, 72, 30], [7, 97, 40, 9, 78, 1, 75, 26]) == 20\nassert solution.countPairs([91], [11]) == 0\nassert solution.countPairs([11, 57, 89, 34, 14], [83, 19, 38, 75, 84]) == 2\nassert solution.countPairs([40, 69, 51, 83, 93, 38, 49], [9, 97, 52, 17, 33, 79, 75]) == 14\nassert solution.countPairs([85, 44, 87, 47, 19, 82, 56, 35, 83], [31, 35, 32, 51, 9, 45, 100, 16, 73]) == 30\nassert solution.countPairs([26, 35, 78, 40, 49, 55], [95, 7, 64, 95, 36, 28]) == 6\nassert solution.countPairs([64, 7, 39, 23, 64, 71], [92, 85, 23, 41, 97, 89]) == 0\nassert solution.countPairs([87, 48, 51, 82, 91, 24, 94, 74, 53, 26], [14, 49, 46, 9, 11, 78, 65, 40, 60, 94]) == 32\nassert solution.countPairs([56], [52]) == 0\nassert solution.countPairs([41, 47, 28, 84, 32], [46, 66, 69, 73, 94]) == 1\nassert solution.countPairs([95, 32, 68, 98, 45, 79, 52, 1], [32, 54, 75, 62, 8, 10, 53, 65]) == 19\nassert solution.countPairs([13, 44], [30, 11]) == 1\nassert solution.countPairs([6, 37, 24, 80, 77, 67, 19], [14, 5, 20, 77, 20, 65, 11]) == 17\nassert solution.countPairs([78, 73, 68, 43, 1], [35, 60, 78, 79, 17]) == 5\nassert solution.countPairs([94, 69, 24, 53], [32, 56, 96, 59]) == 3\nassert solution.countPairs([24, 26, 49, 21, 84], [95, 95, 46, 16, 43]) == 3\nassert solution.countPairs([56], [57]) == 0\nassert solution.countPairs([61, 26], [96, 52]) == 0\nassert solution.countPairs([39, 34, 78, 93], [21, 81, 67, 10]) == 4\nassert solution.countPairs([5, 68, 93, 81], [52, 79, 70, 65]) == 3\nassert solution.countPairs([98, 45, 28, 89, 32, 100, 96], [11, 61, 16, 77, 64, 94, 22]) == 14\nassert solution.countPairs([68, 51, 58, 24, 63, 12, 52, 66, 57, 84], [62, 19, 55, 8, 32, 45, 72, 67, 71, 96]) == 23\nassert solution.countPairs([21], [56]) == 0\nassert solution.countPairs([64, 44, 36, 75, 51, 99, 17, 84, 61], [20, 80, 14, 4, 8, 77, 95, 10, 59]) == 25\nassert solution.countPairs([37, 35, 100, 38, 31, 75, 34, 19, 18, 67], [86, 65, 87, 89, 53, 35, 96, 62, 43, 85]) == 5\nassert solution.countPairs([35, 88, 96, 3, 5, 96, 66], [43, 14, 46, 44, 15, 92, 43]) == 14\nassert solution.countPairs([34, 27, 78, 100, 53], [75, 28, 53, 37, 88]) == 5\nassert solution.countPairs([97, 96, 9, 85], [9, 52, 66, 13]) == 5\nassert solution.countPairs([98, 74, 12, 10, 40, 28, 48, 63, 77, 88], [70, 88, 47, 19, 15, 90, 8, 90, 73, 49]) == 23\nassert solution.countPairs([84, 1, 29, 93], [48, 71, 6, 83]) == 3\nassert solution.countPairs([60, 61, 46], [89, 67, 96]) == 0\nassert solution.countPairs([30, 40, 25, 66, 88], [22, 7, 31, 44, 68]) == 10\nassert solution.countPairs([91, 100, 65, 21, 96], [42, 75, 22, 99, 20]) == 6\nassert solution.countPairs([35, 56, 69, 45, 3, 38, 54, 38], [53, 20, 8, 92, 82, 82, 19, 38]) == 11\nassert solution.countPairs([2, 70, 49, 8, 73, 49], [71, 46, 27, 23, 18, 64]) == 9\nassert solution.countPairs([83, 94, 14, 97, 78, 51, 96, 26, 29, 92], [49, 61, 97, 28, 13, 71, 78, 32, 98, 34]) == 26\nassert solution.countPairs([61, 39, 24, 60, 20, 60, 68], [1, 30, 75, 32, 65, 95, 34]) == 9\nassert solution.countPairs([62, 9, 60, 74, 85, 80, 49], [50, 90, 68, 94, 38, 75, 61]) == 7\nassert solution.countPairs([50], [17]) == 0\nassert solution.countPairs([81, 59, 77, 14, 1, 52], [20, 52, 73, 62, 86, 91]) == 5\nassert solution.countPairs([18, 30, 18, 13, 69, 1, 64, 36, 16], [52, 16, 19, 2, 10, 26, 19, 52, 3]) == 21\nassert solution.countPairs([42, 33, 100, 9, 100, 82], [75, 12, 21, 89, 8, 58]) == 9\nassert solution.countPairs([97, 52, 58, 9, 54, 29, 61, 85], [86, 64, 96, 56, 30, 2, 69, 71]) == 13\nassert solution.countPairs([53, 10], [62, 100]) == 0\nassert solution.countPairs([38, 69, 34, 78, 21], [70, 29, 36, 77, 34]) == 4\nassert solution.countPairs([79, 57, 74, 44, 3, 43, 79, 61, 59, 52], [31, 71, 79, 32, 95, 87, 59, 29, 93, 51]) == 19\nassert solution.countPairs([55, 11, 63], [9, 46, 100]) == 2\nassert solution.countPairs([93, 13, 73, 35, 4, 32], [47, 21, 70, 45, 84, 67]) == 4\nassert solution.countPairs([39, 25, 34, 6, 58, 8, 62, 100, 78, 1], [55, 98, 9, 12, 22, 55, 74, 14, 44, 4]) == 24\nassert solution.countPairs([94], [44]) == 0\nassert solution.countPairs([84], [25]) == 0\nassert solution.countPairs([47, 50, 85], [2, 28, 14]) == 3\nassert solution.countPairs([5, 69, 38, 73, 84, 47, 29, 12], [57, 55, 43, 74, 66, 44, 98, 53]) == 8\nassert solution.countPairs([77, 89, 31, 6, 66], [75, 45, 58, 39, 65]) == 5\nassert solution.countPairs([48, 52, 93, 16, 96, 46, 32, 73, 98, 25], [58, 29, 69, 42, 51, 79, 94, 74, 21, 96]) == 20\nassert solution.countPairs([44, 33, 54, 81], [43, 84, 26, 57]) == 3\nassert solution.countPairs([85, 53, 50, 21, 73, 40], [4, 68, 50, 54, 58, 68]) == 6\nassert solution.countPairs([9, 1, 93, 46, 14, 96, 58, 35], [13, 22, 99, 87, 37, 86, 1, 43]) == 10\nassert solution.countPairs([75, 53, 48, 84, 42, 38, 56, 74, 2], [61, 96, 29, 1, 82, 19, 35, 23, 72]) == 20\nassert solution.countPairs([40], [80]) == 0\nassert solution.countPairs([96, 7, 83, 99, 98, 29, 23], [82, 52, 1, 53, 42, 10, 56]) == 16\nassert solution.countPairs([55, 90, 73], [76, 33, 84]) == 2\nassert solution.countPairs([5, 62, 18], [41, 93, 8]) == 0\nassert solution.countPairs([44, 97, 65, 77, 15], [43, 66, 90, 72, 100]) == 4\nassert solution.countPairs([27, 57, 50, 14, 95, 78, 87], [62, 45, 67, 29, 95, 41, 86]) == 9\nassert solution.countPairs([27, 41], [26, 78]) == 0\nassert solution.countPairs([67, 36], [88, 67]) == 0\nassert solution.countPairs([21, 91, 100, 16, 83, 71, 35, 40], [50, 48, 51, 8, 36, 60, 91, 58]) == 16\nassert solution.countPairs([64], [53]) == 0\nassert solution.countPairs([56, 82], [86, 8]) == 1\nassert solution.countPairs([50, 89, 69], [1, 8, 8]) == 3\nassert solution.countPairs([58], [18]) == 0\nassert solution.countPairs([8, 66], [50, 31]) == 0\nassert solution.countPairs([32, 100, 49, 82, 57, 42, 70, 99, 84, 90], [13, 77, 11, 37, 85, 4, 8, 52, 81, 64]) == 41\nassert solution.countPairs([72, 41, 21, 11], [46, 53, 7, 49]) == 3\nassert solution.countPairs([69, 27, 32, 69, 82, 70], [53, 64, 43, 40, 93, 92]) == 6\nassert solution.countPairs([51, 95, 53, 85, 33, 65, 82, 90, 45], [57, 24, 30, 47, 19, 13, 25, 92, 3]) == 35\nassert solution.countPairs([6, 10, 77, 97, 86, 28, 76, 14, 6, 71], [60, 16, 67, 2, 61, 79, 65, 80, 56, 33]) == 19",
  "inefficient_solution": "class Solution:\n    def countPairs(self, nums1, nums2):\n        n = len(nums1)\n        temp = [nums1[i] - nums2[i] for i in range(n)]\n        temp.sort()\n        temp2 = [(nums1[i] - nums2[i], i) for i in range(n)]\n        temp2.sort()\n        count = 0\n        for i, v in enumerate(temp):\n            for j in range(i + 1, n):\n                if v + temp[j] > 0:\n                    count += 1\n        return count",
  "is_python": true
}