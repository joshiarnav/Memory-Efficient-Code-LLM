{
  "problem_idx": 1771,
  "task_name": "Maximize Palindrome Length From Subsequences",
  "markdown_description": "\nYou are given two strings, `word1` and `word2`. You want to construct a string in the following manner:\n\n\n* Choose some **non-empty** subsequence `subsequence1` from `word1`.\n* Choose some **non-empty** subsequence `subsequence2` from `word2`.\n* Concatenate the subsequences: `subsequence1 + subsequence2`, to make the string.\n\n\nReturn *the **length** of the longest **palindrome** that can be constructed in the described manner.* If no palindromes can be constructed, return `0`.\n\n\nA **subsequence** of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters.\n\n\nA **palindrome** is a string that reads the same forward\u00a0as well as backward.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word1 = \"cacb\", word2 = \"cbba\"\n**Output:** 5\n**Explanation:** Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word1 = \"ab\", word2 = \"ab\"\n**Output:** 3\n**Explanation:** Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word1 = \"aa\", word2 = \"bb\"\n**Output:** 0\n**Explanation:** You cannot construct a palindrome from the described method, so return 0.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word1.length, word2.length <= 1000`\n* `word1` and `word2` consist of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        s = word1 + word2\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        ans = 0\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1] + 2\n                    if i < len(word1) <= j:\n                        ans = max(ans, f[i][j])\n                else:\n                    f[i][j] = max(f[i + 1][j], f[i][j - 1])\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        s = word1 + word2\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        ans = 0\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1] + 2\n                    if i < len(word1) <= j:\n                        ans = max(ans, f[i][j])\n                else:\n                    f[i][j] = max(f[i + 1][j], f[i][j - 1])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    word1 = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 11)))  # Generate a random string for word1\n    word2 = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 11)))  # Generate a random string for word2\n\n    expected_result = solution.longestPalindrome(word1, word2)  # Calculate the expected result using the provided Solution class\n\n    return word1, word2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word1, word2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestPalindrome(word1, word2) == expected_result\n        print(f\"assert solution.longestPalindrome('{word1}', '{word2}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestPalindrome('{word1}', '{word2}') == {expected_result}\")  # Add the test case to the results list\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestPalindrome('rgm', 'aqd') == 0\nassert solution.longestPalindrome('usxh', 'clp') == 0\nassert solution.longestPalindrome('lmaiuhfiamg', 'rxsaxfwluqg') == 9\nassert solution.longestPalindrome('euumlynreu', 'qfowvql') == 5\nassert solution.longestPalindrome('rg', 'czm') == 0\nassert solution.longestPalindrome('duzmel', 'garm') == 3\nassert solution.longestPalindrome('zmv', 'juzvyahrig') == 3\nassert solution.longestPalindrome('tj', 'nrofyscewsk') == 0\nassert solution.longestPalindrome('zzsj', 'rri') == 0\nassert solution.longestPalindrome('soyff', 'bnzt') == 0\nassert solution.longestPalindrome('ckj', 'mmau') == 0\nassert solution.longestPalindrome('oaniyiain', 'gcgnnjkeuf') == 7\nassert solution.longestPalindrome('grnzgoghy', 'hejmse') == 3\nassert solution.longestPalindrome('qdh', 'rfzqoee') == 3\nassert solution.longestPalindrome('kkqi', 'kaxnmgnma') == 3\nassert solution.longestPalindrome('rzzwbtycvf', 'vvlxvkik') == 4\nassert solution.longestPalindrome('rcgsr', 'wp') == 0\nassert solution.longestPalindrome('zbysgez', 'isj') == 3\nassert solution.longestPalindrome('okidmmh', 't') == 0\nassert solution.longestPalindrome('vuhs', 'wixyazqtr') == 0\nassert solution.longestPalindrome('kr', 'fkzr') == 3\nassert solution.longestPalindrome('pff', 'ubdtjcsy') == 0\nassert solution.longestPalindrome('vlxv', 'bgmgx') == 5\nassert solution.longestPalindrome('zdyvfbxr', 'pfiwgyuupz') == 7\nassert solution.longestPalindrome('mpbwglu', 'sqipcjdmfw') == 5\nassert solution.longestPalindrome('i', 'ujnxzod') == 0\nassert solution.longestPalindrome('vim', 'cixsjifhrf') == 3\nassert solution.longestPalindrome('vfuf', 'bmtk') == 0\nassert solution.longestPalindrome('hcnkwatwgx', 'lkgi') == 5\nassert solution.longestPalindrome('rswsclstl', 'vdrgxogvh') == 5\nassert solution.longestPalindrome('sbjeqzuivl', 'wybik') == 3\nassert solution.longestPalindrome('bxw', 'ibvrdwe') == 3\nassert solution.longestPalindrome('ao', 'izsfpbmxc') == 0\nassert solution.longestPalindrome('ytcjgrllcd', 'xseksifcqur') == 7\nassert solution.longestPalindrome('s', 'edrjtgms') == 3\nassert solution.longestPalindrome('ppdqxxwurn', 'tjtrsovc') == 5\nassert solution.longestPalindrome('myr', 'dwtwassxs') == 0\nassert solution.longestPalindrome('rkjfjbv', 'zycglztth') == 0\nassert solution.longestPalindrome('l', 'ihwrez') == 0\nassert solution.longestPalindrome('lcp', 'qangpcmfqgg') == 5\nassert solution.longestPalindrome('vdusgjbmuu', 'wbjlb') == 6\nassert solution.longestPalindrome('dumas', 'uuqhtkhb') == 3\nassert solution.longestPalindrome('uwtozpq', 'eaqpnvl') == 5\nassert solution.longestPalindrome('mu', 'hmbrm') == 3\nassert solution.longestPalindrome('yaib', 'eywvutuwmd') == 3\nassert solution.longestPalindrome('o', 'l') == 0\nassert solution.longestPalindrome('tuitzg', 'pf') == 0\nassert solution.longestPalindrome('xa', 'ovwjrmhqjjj') == 0\nassert solution.longestPalindrome('mabzkcthh', 'lckdzqy') == 8\nassert solution.longestPalindrome('yegycpqp', 'zxtbrwzrdu') == 0\nassert solution.longestPalindrome('mvy', 'vtd') == 3\nassert solution.longestPalindrome('wbv', 'yn') == 0\nassert solution.longestPalindrome('kdiookfdk', 'cjai') == 5\nassert solution.longestPalindrome('plruqbta', 'qwhmiqn') == 3\nassert solution.longestPalindrome('thvzs', 'pnx') == 0\nassert solution.longestPalindrome('sqpq', 'aelov') == 0\nassert solution.longestPalindrome('lysmg', 'ixvaviofofh') == 0\nassert solution.longestPalindrome('bztu', 'aveyfzb') == 5\nassert solution.longestPalindrome('dmz', 'mwnkbxgd') == 5\nassert solution.longestPalindrome('satp', 'csdjlrkazlx') == 3\nassert solution.longestPalindrome('lnqmmzdlvs', 'svkjbrqwj') == 6\nassert solution.longestPalindrome('zkbyrviy', 'v') == 3\nassert solution.longestPalindrome('dsz', 'brtxpdpv') == 3\nassert solution.longestPalindrome('fgjzg', 'zrmuoml') == 3\nassert solution.longestPalindrome('uneepfwyj', 'zkbvqlcc') == 0\nassert solution.longestPalindrome('m', 'rwgf') == 0\nassert solution.longestPalindrome('lwfimy', 'rma') == 3\nassert solution.longestPalindrome('pq', 'upxthausxa') == 3\nassert solution.longestPalindrome('wvzdpedrs', 'augxgf') == 0\nassert solution.longestPalindrome('mskui', 'f') == 0\nassert solution.longestPalindrome('lhuwuezi', 'dzkodupca') == 5\nassert solution.longestPalindrome('yp', 'lgb') == 0\nassert solution.longestPalindrome('jbyl', 'uvcdhynmcfb') == 5\nassert solution.longestPalindrome('vclnavdp', 'zevyhueadas') == 7\nassert solution.longestPalindrome('pwrjkxkmnus', 's') == 2\nassert solution.longestPalindrome('sh', 'un') == 0\nassert solution.longestPalindrome('lfdcmh', 'zrv') == 0\nassert solution.longestPalindrome('vnjwzh', 'hc') == 2\nassert solution.longestPalindrome('hinxmqaan', 'dvqxcysqymc') == 6\nassert solution.longestPalindrome('xxns', 'dyriwawl') == 0\nassert solution.longestPalindrome('keikxci', 'k') == 5\nassert solution.longestPalindrome('si', 'rfqtvrj') == 0\nassert solution.longestPalindrome('ajeblsltl', 'llsxsm') == 6\nassert solution.longestPalindrome('necbsxqz', 'vuilubjyvr') == 5\nassert solution.longestPalindrome('pgzjfnaux', 'fisoctoqhrq') == 3\nassert solution.longestPalindrome('ripwsi', 'cntksonbnm') == 3\nassert solution.longestPalindrome('bejrb', 'rfjsh') == 5\nassert solution.longestPalindrome('bs', 'tr') == 0\nassert solution.longestPalindrome('zvqaut', 'enulwhe') == 3\nassert solution.longestPalindrome('sskwhfnhiny', 'yjhybqorr') == 5\nassert solution.longestPalindrome('ljimzjol', 'prywiiuh') == 3\nassert solution.longestPalindrome('i', 'v') == 0\nassert solution.longestPalindrome('grrebk', 'bncit') == 3\nassert solution.longestPalindrome('pbzjwcbk', 'lkxu') == 3\nassert solution.longestPalindrome('mh', 'zvzthd') == 5\nassert solution.longestPalindrome('tdhecqe', 'pqk') == 3\nassert solution.longestPalindrome('ibawa', 'lbtdbvubw') == 5\nassert solution.longestPalindrome('bhin', 'th') == 3\nassert solution.longestPalindrome('eusk', 'urzknkc') == 3\nassert solution.longestPalindrome('cjmoixg', 'xbuhebu') == 3",
  "inefficient_solution": "class Solution:\n    def longestPalindrome(self, word1: str, word2: str) -> int:\n        s = word1 + word2 + word1[::-1]\n        n = len(s)\n        f = [[0] * (n * n) for _ in range(n)]\n        for i in range(n):\n            for j in range(n * n):\n                f[i][j] = -1\n        for i in range(n):\n            f[i][i * n + i] = 0\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            for j in range(n * n - 1, -1, -1):\n                if i * n + j < n:\n                    f[i][j] = f[i + 1][j]\n                else:\n                    f[i][j] = f[i][j - 1]\n                if i < len(word1) <= j and s[i] == s[n - j - 1]:\n                    for k in range(n):\n                        if f[i + 1][j - k - 1] != -1:\n                            f[i][j] = max(f[i][j], f[i + 1][j - k - 1] + 2)\n                            break\n                ans = max(ans, f[i][j])\n        return ans",
  "is_python": true
}