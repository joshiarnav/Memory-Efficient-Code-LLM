{
  "problem_idx": 1053,
  "task_name": "Previous Permutation With One Swap",
  "markdown_description": "\nGiven an array of positive integers `arr` (not necessarily distinct), return *the* *lexicographically* *largest permutation that is smaller than* `arr`, that can be **made with exactly one swap**. If it cannot be done, then return the same array.\n\n\n**Note** that a *swap* exchanges the positions of two numbers `arr[i]` and `arr[j]`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [3,2,1]\n**Output:** [3,1,2]\n**Explanation:** Swapping 2 and 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1,1,5]\n**Output:** [1,1,5]\n**Explanation:** This is already the smallest permutation.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [1,9,4,6,7]\n**Output:** [1,7,4,6,9]\n**Explanation:** Swapping 9 and 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 104`\n* `1 <= arr[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n        n = len(arr)\n        for i in range(n - 1, 0, -1):\n            if arr[i - 1] > arr[i]:\n                for j in range(n - 1, i - 1, -1):\n                    if arr[j] < arr[i - 1] and arr[j] != arr[j - 1]:\n                        arr[i - 1], arr[j] = arr[j], arr[i - 1]\n                        return arr\n        return arr\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n        n = len(arr)\n        for i in range(n - 1, 0, -1):\n            if arr[i - 1] > arr[i]:\n                for j in range(n - 1, i - 1, -1):\n                    if arr[j] < arr[i - 1] and arr[j] != arr[j - 1]:\n                        arr[i - 1], arr[j] = arr[j], arr[i - 1]\n                        return arr\n        return arr\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.prevPermOpt1(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.prevPermOpt1(arr) == expected_result\n        print(f\"assert solution.prevPermOpt1({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.prevPermOpt1({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.prevPermOpt1([65, 68, 13, 25, 17, 37]) == [65, 68, 13, 25, 17, 37]\nassert solution.prevPermOpt1([38, 46, 76, 82, 84, 95]) == [38, 46, 76, 82, 84, 95]\nassert solution.prevPermOpt1([64, 19, 87, 25, 71, 47, 73, 78]) == [64, 19, 87, 25, 71, 47, 73, 78]\nassert solution.prevPermOpt1([23, 38, 40, 87]) == [23, 38, 40, 87]\nassert solution.prevPermOpt1([48, 50]) == [48, 50]\nassert solution.prevPermOpt1([87, 43, 15, 46, 86, 19, 8, 32, 47]) == [87, 43, 15, 46, 86, 19, 8, 32, 47]\nassert solution.prevPermOpt1([15, 65, 95, 49, 37, 16, 91, 72, 21, 90]) == [15, 65, 95, 49, 37, 16, 91, 72, 21, 90]\nassert solution.prevPermOpt1([80, 8, 61, 73, 1, 36, 24, 75, 78, 90]) == [80, 8, 61, 73, 1, 36, 24, 75, 78, 90]\nassert solution.prevPermOpt1([10, 87, 63, 12, 69, 80, 89]) == [10, 87, 63, 12, 69, 80, 89]\nassert solution.prevPermOpt1([8, 80, 41, 2, 64, 91]) == [8, 80, 41, 2, 64, 91]\nassert solution.prevPermOpt1([4, 100]) == [4, 100]\nassert solution.prevPermOpt1([92, 62, 37, 18, 88, 99]) == [92, 62, 37, 18, 88, 99]\nassert solution.prevPermOpt1([99, 84, 81, 22, 14, 4, 13, 32]) == [99, 84, 81, 22, 14, 4, 13, 32]\nassert solution.prevPermOpt1([77, 25, 11, 23, 21, 24]) == [77, 25, 11, 23, 21, 24]\nassert solution.prevPermOpt1([38, 79]) == [38, 79]\nassert solution.prevPermOpt1([49, 75, 16, 29, 56, 44, 85]) == [49, 75, 16, 29, 56, 44, 85]\nassert solution.prevPermOpt1([11, 81, 19, 28, 44, 45, 88]) == [11, 81, 19, 28, 44, 45, 88]\nassert solution.prevPermOpt1([88, 64, 32, 97, 41, 39, 52, 63, 68]) == [88, 64, 32, 97, 41, 39, 52, 63, 68]\nassert solution.prevPermOpt1([2, 79, 84, 46, 36, 60, 70, 16, 41, 90]) == [2, 79, 84, 46, 36, 60, 70, 16, 41, 90]\nassert solution.prevPermOpt1([46, 22, 91, 8, 68, 27, 33, 47, 52]) == [46, 22, 91, 8, 68, 27, 33, 47, 52]\nassert solution.prevPermOpt1([14, 23, 100, 29, 9, 80, 77, 50, 90, 98]) == [14, 23, 100, 29, 9, 80, 77, 50, 90, 98]\nassert solution.prevPermOpt1([60, 74, 34, 67, 25, 79]) == [60, 74, 34, 67, 25, 79]\nassert solution.prevPermOpt1([60, 81, 76, 8, 80, 25, 85]) == [60, 81, 76, 8, 80, 25, 85]\nassert solution.prevPermOpt1([27, 65, 23, 90, 14, 13, 60]) == [27, 65, 23, 90, 14, 13, 60]\nassert solution.prevPermOpt1([54, 9, 53, 63, 8, 77, 95]) == [54, 9, 53, 63, 8, 77, 95]\nassert solution.prevPermOpt1([34, 87, 70, 78, 89]) == [34, 87, 70, 78, 89]\nassert solution.prevPermOpt1([82, 54, 37, 68, 5, 85]) == [82, 54, 37, 68, 5, 85]\nassert solution.prevPermOpt1([24, 86, 60, 23, 71, 94]) == [24, 86, 60, 23, 71, 94]\nassert solution.prevPermOpt1([41, 44, 56, 76]) == [41, 44, 56, 76]\nassert solution.prevPermOpt1([3, 14, 28, 91]) == [3, 14, 28, 91]\nassert solution.prevPermOpt1([30, 36]) == [30, 36]\nassert solution.prevPermOpt1([61, 59, 73, 74]) == [61, 59, 73, 74]\nassert solution.prevPermOpt1([73, 30, 20, 41, 62]) == [73, 30, 20, 41, 62]\nassert solution.prevPermOpt1([4, 46, 9, 84, 88]) == [4, 46, 9, 84, 88]\nassert solution.prevPermOpt1([34, 68, 91]) == [34, 68, 91]\nassert solution.prevPermOpt1([3, 18]) == [3, 18]\nassert solution.prevPermOpt1([22, 99, 54, 67, 37, 81, 35, 91, 92]) == [22, 99, 54, 67, 37, 81, 35, 91, 92]\nassert solution.prevPermOpt1([62, 82, 95, 35, 32, 25, 4, 1, 72, 74]) == [62, 82, 95, 35, 32, 25, 4, 1, 72, 74]\nassert solution.prevPermOpt1([41, 51, 62, 73]) == [41, 51, 62, 73]\nassert solution.prevPermOpt1([42, 37, 16, 47, 87]) == [42, 37, 16, 47, 87]\nassert solution.prevPermOpt1([27, 21, 37, 78, 93]) == [27, 21, 37, 78, 93]\nassert solution.prevPermOpt1([23, 37, 39, 42, 78, 84]) == [23, 37, 39, 42, 78, 84]\nassert solution.prevPermOpt1([95, 68, 31, 26, 49, 69, 89]) == [95, 68, 31, 26, 49, 69, 89]\nassert solution.prevPermOpt1([49, 79, 100, 44, 92, 81, 58, 29, 71]) == [49, 79, 100, 44, 92, 81, 58, 29, 71]\nassert solution.prevPermOpt1([25, 30]) == [25, 30]\nassert solution.prevPermOpt1([76, 30, 71, 7, 56, 9, 19, 73, 90]) == [76, 30, 71, 7, 56, 9, 19, 73, 90]\nassert solution.prevPermOpt1([16, 27]) == [16, 27]\nassert solution.prevPermOpt1([28, 75]) == [28, 75]\nassert solution.prevPermOpt1([43, 99]) == [43, 99]\nassert solution.prevPermOpt1([54, 49, 37, 87]) == [54, 49, 37, 87]\nassert solution.prevPermOpt1([53, 2, 25, 91]) == [53, 2, 25, 91]\nassert solution.prevPermOpt1([11, 74, 97]) == [11, 74, 97]\nassert solution.prevPermOpt1([53, 18, 55, 86, 94]) == [53, 18, 55, 86, 94]\nassert solution.prevPermOpt1([54, 66, 94]) == [54, 66, 94]\nassert solution.prevPermOpt1([89, 8, 25, 56, 39, 52, 63]) == [89, 8, 25, 56, 39, 52, 63]\nassert solution.prevPermOpt1([39, 19, 47, 56]) == [39, 19, 47, 56]\nassert solution.prevPermOpt1([5, 39, 28, 57, 6, 31, 2, 52, 80]) == [5, 39, 28, 57, 6, 31, 2, 52, 80]\nassert solution.prevPermOpt1([86, 85, 17, 56, 60, 33, 19, 21, 46]) == [86, 85, 17, 56, 60, 33, 19, 21, 46]\nassert solution.prevPermOpt1([30, 6, 97, 19, 35, 66]) == [30, 6, 97, 19, 35, 66]\nassert solution.prevPermOpt1([65, 93, 12, 68, 1, 86]) == [65, 93, 12, 68, 1, 86]\nassert solution.prevPermOpt1([73, 52, 27, 51, 66, 70]) == [73, 52, 27, 51, 66, 70]\nassert solution.prevPermOpt1([52, 28, 12, 50, 21, 69, 82]) == [52, 28, 12, 50, 21, 69, 82]\nassert solution.prevPermOpt1([93, 91, 84, 58, 56, 3, 4, 80, 87]) == [93, 91, 84, 58, 56, 3, 4, 80, 87]\nassert solution.prevPermOpt1([67, 1, 14, 38, 99, 43, 33, 5, 57]) == [67, 1, 14, 38, 99, 43, 33, 5, 57]\nassert solution.prevPermOpt1([30, 44, 68]) == [30, 44, 68]\nassert solution.prevPermOpt1([8, 66, 48, 41, 93, 71, 35, 37, 77]) == [8, 66, 48, 41, 93, 71, 35, 37, 77]\nassert solution.prevPermOpt1([51, 77, 15, 8, 41, 43]) == [51, 77, 15, 8, 41, 43]\nassert solution.prevPermOpt1([60, 17, 55, 41, 31, 58]) == [60, 17, 55, 41, 31, 58]\nassert solution.prevPermOpt1([100, 93, 47, 64, 31, 45, 43, 3, 50]) == [100, 93, 47, 64, 31, 45, 43, 3, 50]\nassert solution.prevPermOpt1([7, 35]) == [7, 35]\nassert solution.prevPermOpt1([5, 74, 41, 28, 51, 59]) == [5, 74, 41, 28, 51, 59]\nassert solution.prevPermOpt1([86, 22, 7, 49, 54]) == [86, 22, 7, 49, 54]\nassert solution.prevPermOpt1([41, 82, 76, 34, 100]) == [41, 82, 76, 34, 100]\nassert solution.prevPermOpt1([52, 30, 41, 54]) == [52, 30, 41, 54]\nassert solution.prevPermOpt1([100, 57, 52, 76, 88, 90]) == [100, 57, 52, 76, 88, 90]\nassert solution.prevPermOpt1([97, 11, 15, 64, 62, 38, 85]) == [97, 11, 15, 64, 62, 38, 85]\nassert solution.prevPermOpt1([34, 46, 12, 88, 4, 64, 5, 8, 72]) == [34, 46, 12, 88, 4, 64, 5, 8, 72]\nassert solution.prevPermOpt1([89, 62, 25, 57, 81, 85]) == [89, 62, 25, 57, 81, 85]\nassert solution.prevPermOpt1([23, 36, 79, 83, 89]) == [23, 36, 79, 83, 89]\nassert solution.prevPermOpt1([36, 16, 39, 19, 78]) == [36, 16, 39, 19, 78]\nassert solution.prevPermOpt1([88, 27, 1, 17, 69, 77]) == [88, 27, 1, 17, 69, 77]\nassert solution.prevPermOpt1([12, 37, 99]) == [12, 37, 99]\nassert solution.prevPermOpt1([11, 40, 98, 74, 16, 28, 72, 87]) == [11, 40, 98, 74, 16, 28, 72, 87]\nassert solution.prevPermOpt1([62, 30, 6, 1, 7, 46]) == [62, 30, 6, 1, 7, 46]\nassert solution.prevPermOpt1([9, 4, 55, 65, 96]) == [9, 4, 55, 65, 96]\nassert solution.prevPermOpt1([56, 68, 19, 15, 79, 30, 26, 93]) == [56, 68, 19, 15, 79, 30, 26, 93]\nassert solution.prevPermOpt1([8, 17, 48, 88]) == [8, 17, 48, 88]\nassert solution.prevPermOpt1([72, 49, 60, 37, 96, 71, 81, 27, 18, 100]) == [72, 49, 60, 37, 96, 71, 81, 27, 18, 100]\nassert solution.prevPermOpt1([70, 49, 64, 43, 14, 86, 94]) == [70, 49, 64, 43, 14, 86, 94]\nassert solution.prevPermOpt1([18, 66, 45, 27, 53, 91, 14, 38, 43, 93]) == [18, 66, 45, 27, 53, 91, 14, 38, 43, 93]\nassert solution.prevPermOpt1([18, 76, 87]) == [18, 76, 87]\nassert solution.prevPermOpt1([38, 25, 82]) == [38, 25, 82]\nassert solution.prevPermOpt1([61, 88, 9, 95, 48, 27, 36, 67, 69]) == [61, 88, 9, 95, 48, 27, 36, 67, 69]\nassert solution.prevPermOpt1([97, 43, 26, 23, 96]) == [97, 43, 26, 23, 96]\nassert solution.prevPermOpt1([20, 41, 50]) == [20, 41, 50]\nassert solution.prevPermOpt1([6, 81, 83]) == [6, 81, 83]\nassert solution.prevPermOpt1([7, 32, 49, 59, 79, 88]) == [7, 32, 49, 59, 79, 88]\nassert solution.prevPermOpt1([42, 35, 67, 95, 26, 57, 71, 93]) == [42, 35, 67, 95, 26, 57, 71, 93]\nassert solution.prevPermOpt1([3, 57, 92]) == [3, 57, 92]\nassert solution.prevPermOpt1([29, 7, 18, 100]) == [29, 7, 18, 100]",
  "inefficient_solution": "class Solution:\n    def prevPermOpt1(self, arr: List[int]) -> List[int]:\n        n = len(arr)\n        swap_arr = arr[:]\n        max_val = max(arr)\n        max_idx = arr.index(max_val)\n        \n        for i in range(n):\n            for j in range(n):\n                temp_arr = arr[:]\n                temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n                if temp_arr[0:max_idx] == sorted(temp_arr[0:max_idx], reverse=True) and temp_arr[max_idx+1:] == sorted(temp_arr[max_idx+1:], reverse=True) and temp_arr != arr:\n                    swap_arr = temp_arr\n                    break\n            if swap_arr != arr:\n                break\n        \n        for i in range(n):\n            temp_arr = swap_arr[:]\n            for j in range(n):\n                temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n                if temp_arr != arr and temp_arr[i] < temp_arr[i-1] and temp_arr[i] != temp_arr[i-2]:\n                    return temp_arr\n            swap_arr = temp_arr\n        \n        return arr",
  "is_python": true
}