{
  "problem_idx": 2786,
  "task_name": "Visit Array Positions to Maximize Score",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and a positive integer `x`.\n\n\nYou are **initially** at position `0` in the array and you can visit other positions according to the following rules:\n\n\n* If you are currently in position `i`, then you can move to **any** position `j` such that `i < j`.\n* For each position `i` that you visit, you get a score of `nums[i]`.\n* If you move from a position `i` to a position `j` and the **parities** of `nums[i]` and `nums[j]` differ, then you lose a score of `x`.\n\n\nReturn *the **maximum** total score you can get*.\n\n\n**Note** that initially you have `nums[0]` points.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,6,1,9,2], x = 5\n**Output:** 13\n**Explanation:** We can visit the following positions in the array: 0 -> 2 -> 3 -> 4.\nThe corresponding values are 2, 6, 1 and 9. Since the integers 6 and 1 have different parities, the move 2 -> 3 will make you lose a score of x = 5.\nThe total score will be: 2 + 6 + 1 + 9 - 5 = 13.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,6,8], x = 3\n**Output:** 20\n**Explanation:** All the integers in the array have the same parities, so we can visit all of them without losing any score.\nThe total score is: 2 + 4 + 6 + 8 = 20.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `1 <= nums[i], x <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxScore(self, nums: List[int], x: int) -> int:\n        f = [-inf] * 2\n        f[nums[0] & 1] = nums[0]\n        for v in nums[1:]:\n            f[v & 1] = max(f[v & 1] + v, f[v & 1 ^ 1] + v - x)\n        return max(f)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxScore(self, nums, x):\n        f = [-float(\"inf\")] * 2\n        f[nums[0] & 1] = nums[0]\n        for v in nums[1:]:\n            f[v & 1] = max(f[v & 1] + v, f[v & 1 ^ 1] + v - x)\n        return max(f)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(1, 101), k=random.randint(2, 10))\n    \n    # Generate a random target sum\n    x = random.randint(1, 1000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxScore(nums, x)\n\n    return nums, x, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, x, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxScore(nums, x) == expected_result\n        print(f\"assert solution.maxScore({nums}, {x}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxScore({nums}, {x}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxScore([73, 22, 2, 49, 47, 69, 37], 804597) == 275\nassert solution.maxScore([97, 28, 52, 85, 20, 5, 99, 68], 860493) == 286\nassert solution.maxScore([45, 97, 95, 81, 10, 45, 63, 68, 24], 436294) == 426\nassert solution.maxScore([86, 96, 99, 61, 58, 64], 230104) == 304\nassert solution.maxScore([34, 82, 44], 499136) == 160\nassert solution.maxScore([6, 39, 51, 1, 67, 44, 26], 528124) == 76\nassert solution.maxScore([23, 32, 76, 72, 7], 676293) == 30\nassert solution.maxScore([82, 93, 15, 40, 39, 82, 62, 20], 98076) == 286\nassert solution.maxScore([1, 42, 42], 512878) == 1\nassert solution.maxScore([70, 96, 45], 76984) == 166\nassert solution.maxScore([65, 27, 93, 90], 463901) == 185\nassert solution.maxScore([43, 93, 5, 8, 11, 76, 94], 251734) == 152\nassert solution.maxScore([10, 16, 88, 40, 53, 89, 64], 633985) == 218\nassert solution.maxScore([60, 70, 74, 34, 26, 72, 77, 30], 552654) == 366\nassert solution.maxScore([63, 54, 31, 20, 85, 15, 45, 91, 5], 671887) == 335\nassert solution.maxScore([48, 56, 64, 20], 518146) == 188\nassert solution.maxScore([41, 88, 78, 6, 34, 93, 28], 919677) == 134\nassert solution.maxScore([45, 66], 585880) == 45\nassert solution.maxScore([75, 11, 35, 52, 15, 72, 12, 58], 79015) == 136\nassert solution.maxScore([27, 27, 92, 98, 13], 286559) == 67\nassert solution.maxScore([6, 68, 60, 87, 15, 55, 97, 13, 55], 367624) == 134\nassert solution.maxScore([82, 64, 54, 37, 69, 31, 36, 96, 21], 109271) == 332\nassert solution.maxScore([71, 55, 22, 38, 38, 63, 19], 648872) == 208\nassert solution.maxScore([94, 27, 10, 35, 17, 72, 68, 6, 36], 937345) == 286\nassert solution.maxScore([78, 86, 41, 95, 43, 77, 23, 93, 96, 65], 737883) == 260\nassert solution.maxScore([63, 100, 37, 66], 984571) == 100\nassert solution.maxScore([71, 8], 574103) == 71\nassert solution.maxScore([100, 42, 96], 347152) == 238\nassert solution.maxScore([10, 32, 24], 19042) == 66\nassert solution.maxScore([6, 10, 30, 61], 773014) == 46\nassert solution.maxScore([69, 65, 65, 83], 796592) == 282\nassert solution.maxScore([65, 85, 58, 55, 86, 1, 60], 120511) == 206\nassert solution.maxScore([45, 10, 71, 84, 29, 18, 4, 7, 60, 77], 689381) == 229\nassert solution.maxScore([86, 83, 37, 47, 91, 21, 17, 90, 5, 17], 363432) == 176\nassert solution.maxScore([46, 97, 87, 60, 14, 85], 45924) == 120\nassert solution.maxScore([57, 14, 96, 79, 90, 63], 873164) == 199\nassert solution.maxScore([11, 74, 97, 10, 49, 34, 24, 67, 52, 8], 670534) == 224\nassert solution.maxScore([77, 60, 20, 87], 568895) == 164\nassert solution.maxScore([4, 37, 98, 84, 78, 26, 77, 52, 32, 71], 328693) == 374\nassert solution.maxScore([99, 34, 16, 26, 23, 87], 268074) == 209\nassert solution.maxScore([85, 41, 81, 30, 29, 15, 91, 15], 408675) == 357\nassert solution.maxScore([62, 27, 59, 52], 921025) == 114\nassert solution.maxScore([5, 89, 18, 60, 58, 27, 64], 522079) == 121\nassert solution.maxScore([30, 4, 76, 93, 16, 24, 60], 652) == 210\nassert solution.maxScore([92, 44, 84, 73, 19, 34, 49], 412969) == 254\nassert solution.maxScore([55, 54, 70, 13, 20, 94, 74], 880243) == 68\nassert solution.maxScore([65, 46], 920376) == 65\nassert solution.maxScore([14, 4, 99, 18, 66, 84], 706560) == 186\nassert solution.maxScore([18, 47, 63, 80, 53], 263709) == 98\nassert solution.maxScore([47, 79, 73, 85, 89], 254848) == 373\nassert solution.maxScore([7, 96, 5, 69, 57, 57, 4, 28], 112023) == 195\nassert solution.maxScore([50, 91, 93, 33, 98, 64, 67, 40], 726782) == 252\nassert solution.maxScore([77, 19, 41, 89, 12], 589419) == 226\nassert solution.maxScore([49, 20, 78, 60, 8, 83, 85, 66], 607244) == 217\nassert solution.maxScore([37, 21, 31, 54, 6], 194899) == 89\nassert solution.maxScore([27, 45, 57, 57, 19, 54, 65, 21], 532515) == 291\nassert solution.maxScore([89, 3, 14, 11, 29, 73, 97, 93, 94], 896050) == 395\nassert solution.maxScore([52, 63, 8, 8, 52, 69], 813204) == 120\nassert solution.maxScore([55, 74, 81, 92, 48], 739283) == 136\nassert solution.maxScore([66, 9, 43, 5, 15, 41, 15], 780519) == 66\nassert solution.maxScore([39, 32, 52, 33, 52, 29], 484314) == 101\nassert solution.maxScore([55, 72, 45, 51, 31, 7], 516886) == 189\nassert solution.maxScore([13, 48, 85, 57, 97, 46, 73, 14, 84], 539525) == 325\nassert solution.maxScore([92, 13, 85, 6, 73, 9, 49], 701340) == 98\nassert solution.maxScore([72, 6, 89, 23, 78], 70693) == 156\nassert solution.maxScore([75, 37], 90104) == 112\nassert solution.maxScore([70, 45, 52, 90, 90, 97, 51, 90], 594379) == 392\nassert solution.maxScore([27, 61], 372112) == 88\nassert solution.maxScore([74, 21, 22, 4, 11, 96], 261228) == 196\nassert solution.maxScore([81, 67, 69, 25, 29, 95], 682852) == 366\nassert solution.maxScore([90, 48, 52, 70, 36, 29, 79, 36, 17, 65], 927375) == 332\nassert solution.maxScore([12, 97, 11], 179528) == 12\nassert solution.maxScore([59, 100, 45, 22, 99, 27], 442943) == 230\nassert solution.maxScore([3, 91, 13, 79, 88, 12, 53], 681532) == 239\nassert solution.maxScore([25, 16, 70, 6, 54, 3, 35, 29], 968525) == 92\nassert solution.maxScore([29, 36, 68, 43, 82], 394431) == 72\nassert solution.maxScore([79, 40, 26, 54, 90, 21], 342358) == 100\nassert solution.maxScore([60, 56, 15, 5, 69], 913517) == 116\nassert solution.maxScore([40, 11], 199195) == 40\nassert solution.maxScore([69, 40], 608451) == 69\nassert solution.maxScore([83, 38, 26, 17, 21, 92], 831923) == 121\nassert solution.maxScore([80, 41, 58, 69, 71, 40], 988458) == 178\nassert solution.maxScore([48, 91, 83, 9, 86, 43, 26], 853017) == 160\nassert solution.maxScore([71, 46, 38, 22, 9], 241886) == 80\nassert solution.maxScore([70, 25, 24, 31, 40, 23], 112403) == 134\nassert solution.maxScore([64, 28, 62, 26], 426517) == 180\nassert solution.maxScore([13, 63], 994618) == 76\nassert solution.maxScore([79, 90, 35, 100, 32, 35, 57], 386068) == 206\nassert solution.maxScore([89, 47, 84], 175147) == 136\nassert solution.maxScore([23, 5], 919766) == 28\nassert solution.maxScore([100, 37, 90, 19, 49], 955608) == 190\nassert solution.maxScore([37, 52, 66, 35], 492884) == 72\nassert solution.maxScore([75, 41, 57, 91, 38, 88, 30], 262558) == 264\nassert solution.maxScore([61, 33, 54, 82, 66, 92, 69, 99, 33, 90], 176233) == 295\nassert solution.maxScore([65, 65, 98, 67], 110784) == 197\nassert solution.maxScore([63, 72, 32, 13, 59, 40], 815468) == 135\nassert solution.maxScore([58, 63, 52, 96, 23, 35, 97], 389182) == 206\nassert solution.maxScore([51, 31], 85288) == 82\nassert solution.maxScore([56, 41, 87], 434176) == 56\nassert solution.maxScore([10, 22, 4, 94, 36, 21, 69, 44, 3, 60], 589949) == 270",
  "inefficient_solution": "class Solution:\n    def maxScore(self, nums, x):\n        dp = [[-float('inf')] * len(nums) for _ in range(2)]\n        dp[nums[0] & 1][0] = nums[0]\n        for i in range(1, len(nums)):\n            for j in range(2):\n                dp[j][i] = max(dp[j][i-1], dp[j ^ 1][i-1] + nums[i] - x if (nums[i-1] & 1) != j else dp[j ^ 1][i-1] + nums[i])\n        return max(max(row) for row in dp)",
  "is_python": true
}