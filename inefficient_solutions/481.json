{
  "problem_idx": 481,
  "task_name": "Magical String",
  "markdown_description": "\nA magical string `s` consists of only `'1'` and `'2'` and obeys the following rules:\n\n\n* The string s is magical because concatenating the number of contiguous occurrences of characters `'1'` and `'2'` generates the string `s` itself.\n\n\nThe first few elements of `s` is `s = \"1221121221221121122\u2026\u2026\"`. If we group the consecutive `1`'s and `2`'s in `s`, it will be `\"1 22 11 2 1 22 1 22 11 2 11 22 ......\"` and the occurrences of `1`'s or `2`'s in each group are `\"1 2 2 1 1 2 1 2 2 1 2 2 ......\"`. You can see that the occurrence sequence is `s` itself.\n\n\nGiven an integer `n`, return the number of `1`'s in the first `n` number in the magical string `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 6\n**Output:** 3\n**Explanation:** The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def magicalString(self, n: int) -> int:\n        s = [1, 2, 2]\n        i = 2\n        while len(s) < n:\n            pre = s[-1]\n            cur = 3 - pre\n            s += [cur] * s[i]\n            i += 1\n        return s[:n].count(1)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def magicalString(self, n: int) -> int:\n        s = [1, 2, 2]\n        i = 2\n        while len(s) < n:\n            pre = s[-1]\n            cur = 3 - pre\n            s += [cur] * s[i]\n            i += 1\n        return s[:n].count(1)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random n\n    n = random.randint(1, 101)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.magicalString(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.magicalString(n) == expected_result\n        print(f\"assert solution.magicalString({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.magicalString({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.magicalString(39) == 19\nassert solution.magicalString(68) == 34\nassert solution.magicalString(26) == 13\nassert solution.magicalString(56) == 28\nassert solution.magicalString(64) == 32\nassert solution.magicalString(6) == 3\nassert solution.magicalString(50) == 25\nassert solution.magicalString(25) == 13\nassert solution.magicalString(18) == 9\nassert solution.magicalString(30) == 15\nassert solution.magicalString(10) == 5\nassert solution.magicalString(97) == 48\nassert solution.magicalString(14) == 7\nassert solution.magicalString(39) == 19\nassert solution.magicalString(12) == 5\nassert solution.magicalString(53) == 27\nassert solution.magicalString(65) == 32\nassert solution.magicalString(78) == 39\nassert solution.magicalString(69) == 34\nassert solution.magicalString(93) == 45\nassert solution.magicalString(16) == 8\nassert solution.magicalString(38) == 19\nassert solution.magicalString(24) == 12\nassert solution.magicalString(37) == 19\nassert solution.magicalString(99) == 49\nassert solution.magicalString(36) == 18\nassert solution.magicalString(97) == 48\nassert solution.magicalString(58) == 29\nassert solution.magicalString(84) == 41\nassert solution.magicalString(58) == 29\nassert solution.magicalString(1) == 1\nassert solution.magicalString(29) == 15\nassert solution.magicalString(43) == 22\nassert solution.magicalString(32) == 17\nassert solution.magicalString(89) == 44\nassert solution.magicalString(38) == 19\nassert solution.magicalString(6) == 3\nassert solution.magicalString(101) == 50\nassert solution.magicalString(87) == 43\nassert solution.magicalString(34) == 18\nassert solution.magicalString(41) == 21\nassert solution.magicalString(18) == 9\nassert solution.magicalString(43) == 22\nassert solution.magicalString(98) == 49\nassert solution.magicalString(64) == 32\nassert solution.magicalString(93) == 45\nassert solution.magicalString(62) == 31\nassert solution.magicalString(78) == 39\nassert solution.magicalString(12) == 5\nassert solution.magicalString(1) == 1\nassert solution.magicalString(5) == 3\nassert solution.magicalString(81) == 40\nassert solution.magicalString(42) == 21\nassert solution.magicalString(15) == 7\nassert solution.magicalString(92) == 45\nassert solution.magicalString(44) == 22\nassert solution.magicalString(33) == 17\nassert solution.magicalString(60) == 30\nassert solution.magicalString(66) == 32\nassert solution.magicalString(101) == 50\nassert solution.magicalString(39) == 19\nassert solution.magicalString(34) == 18\nassert solution.magicalString(84) == 41\nassert solution.magicalString(3) == 1\nassert solution.magicalString(92) == 45\nassert solution.magicalString(84) == 41\nassert solution.magicalString(42) == 21\nassert solution.magicalString(8) == 4\nassert solution.magicalString(4) == 2\nassert solution.magicalString(35) == 18\nassert solution.magicalString(35) == 18\nassert solution.magicalString(94) == 46\nassert solution.magicalString(33) == 17\nassert solution.magicalString(12) == 5\nassert solution.magicalString(86) == 43\nassert solution.magicalString(19) == 9\nassert solution.magicalString(35) == 18\nassert solution.magicalString(72) == 36\nassert solution.magicalString(87) == 43\nassert solution.magicalString(2) == 1\nassert solution.magicalString(50) == 25\nassert solution.magicalString(34) == 18\nassert solution.magicalString(100) == 49\nassert solution.magicalString(74) == 37\nassert solution.magicalString(18) == 9\nassert solution.magicalString(60) == 30\nassert solution.magicalString(39) == 19\nassert solution.magicalString(61) == 31\nassert solution.magicalString(50) == 25\nassert solution.magicalString(84) == 41\nassert solution.magicalString(11) == 5\nassert solution.magicalString(24) == 12\nassert solution.magicalString(51) == 26\nassert solution.magicalString(73) == 37\nassert solution.magicalString(56) == 28\nassert solution.magicalString(4) == 2\nassert solution.magicalString(96) == 47\nassert solution.magicalString(4) == 2\nassert solution.magicalString(54) == 27\nassert solution.magicalString(10) == 5",
  "inefficient_solution": "class Solution:\n    def magicalString(self, n: int) -> int:\n        s = [1, 2, 2]\n        i = 2\n        while len(s) < n:\n            pre = s[-1]\n            cur = 3 - pre\n            s += [cur] * 10 * s[i]\n            i += 1\n        return sum(1 for x in s[:n] if x == 1)\n\n    def magicalString2(self, n: int) -> int:\n        s = [1, 2, 2]\n        count = 0\n        while len(s) < n:\n            index = 0\n            new_s = []\n            for x in s:\n                if x == 1:\n                    new_s += [1] * (index + 1)\n                else:\n                    new_s += [2] * (index + 1)\n                index += index + 1\n            s = new_s\n            count += len(s)\n        return s[:n].count(1)\n\n    def magicalString3(self, n: int) -> int:\n        s = [1, 2, 2]\n        i = 2\n        while len(s) < n:\n            pre = s[-1]\n            cur = 3 - pre\n            new_s = []\n            for j in range(s[i]):\n                new_s += [cur]\n            s += new_s\n            i += 1\n        return sum(1 for x in s[:n] if x == 1)",
  "is_python": true
}