{
  "problem_idx": 2251,
  "task_name": "Number of Flowers in Full Bloom",
  "markdown_description": "\nYou are given a **0-indexed** 2D integer array `flowers`, where `flowers[i] = [starti, endi]` means the `ith` flower will be in **full bloom** from `starti` to `endi` (**inclusive**). You are also given a **0-indexed** integer array `people` of size `n`, where `people[i]` is the time that the `ith` person will arrive to see the flowers.\n\n\nReturn *an integer array* `answer` *of size* `n`*, where* `answer[i]` *is the **number** of flowers that are in full bloom when the* `ith` *person arrives.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2251.Number%20of%20Flowers%20in%20Full%20Bloom/images/ex1new.jpg)\n\n```\n\n**Input:** flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]\n**Output:** [1,2,2,2]\n**Explanation:** The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2251.Number%20of%20Flowers%20in%20Full%20Bloom/images/ex2new.jpg)\n\n```\n\n**Input:** flowers = [[1,10],[3,3]], people = [3,3,2]\n**Output:** [2,2,1]\n**Explanation:** The figure above shows the times when the flowers are in full bloom and when the people arrive.\nFor each person, we return the number of flowers in full bloom during their arrival.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= flowers.length <= 5 * 104`\n* `flowers[i].length == 2`\n* `1 <= starti <= endi <= 109`\n* `1 <= people.length <= 5 * 104`\n* `1 <= people[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def fullBloomFlowers(\n        self, flowers: List[List[int]], persons: List[int]\n    ) -> List[int]:\n        start, end = sorted(a for a, _ in flowers), sorted(b for _, b in flowers)\n        return [bisect_right(start, p) - bisect_left(end, p) for p in persons]\n",
  "test_case_generator": "\nimport random\n\n\nclass Solution:\n    def fullBloomFlowers(self, flowers, persons):\n        start, end = sorted(a for a, _ in flowers), sorted(b for _, b in flowers)\n        return [bisect_right(start, p) - bisect_left(end, p) for p in persons]\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random flowers list\n    flowers = [[random.randint(1, 10), random.randint(1, 10)] for _ in range(random.randint(1, 10))]\n\n    # Generate random persons list\n    persons = random.sample(range(1, 11), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.fullBloomFlowers(flowers, persons)\n\n    return flowers, persons, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        flowers, persons, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.fullBloomFlowers(flowers, persons) == expected_result\n        print(f\"assert solution.fullBloomFlowers({flowers}, {persons}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.fullBloomFlowers({flowers}, {persons}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.fullBloomFlowers([[10, 7], [10, 8], [10, 9]], [3, 4, 7]) == [0, 0, 0]\nassert solution.fullBloomFlowers([[6, 10], [5, 8], [9, 2], [5, 1], [5, 8]], [5, 8, 3, 6]) == [1, 2, -2, 2]\nassert solution.fullBloomFlowers([[6, 5], [4, 6], [3, 1], [5, 1], [2, 2]], [8, 2, 1, 4, 6, 10, 7, 5, 3]) == [0, -1, 0, 0, 1, 0, 0, 1, -1]\nassert solution.fullBloomFlowers([[10, 10], [4, 3], [3, 6], [6, 1], [6, 3], [1, 3], [10, 1], [3, 10]], [2]) == [-1]\nassert solution.fullBloomFlowers([[7, 10], [9, 10], [10, 9], [8, 7], [5, 6], [1, 2], [3, 10], [5, 2], [9, 7], [10, 8]], [3, 1, 8, 5]) == [0, 1, 1, 2]\nassert solution.fullBloomFlowers([[3, 8], [10, 8], [5, 3], [6, 8], [7, 6]], [4]) == [0]\nassert solution.fullBloomFlowers([[7, 10], [7, 4]], [7, 5, 8, 9, 10, 3, 1]) == [1, -1, 1, 1, 1, 0, 0]\nassert solution.fullBloomFlowers([[3, 3], [4, 1], [10, 8], [4, 4], [5, 6], [4, 6]], [7]) == [0]\nassert solution.fullBloomFlowers([[8, 7], [3, 1], [9, 9]], [3, 6, 1, 9]) == [0, 0, 0, 1]\nassert solution.fullBloomFlowers([[4, 3], [8, 8], [1, 6], [6, 10], [3, 5], [1, 4], [6, 8], [2, 6], [1, 9]], [2, 9, 10, 5, 8, 6, 1]) == [4, 2, 1, 4, 4, 5, 3]\nassert solution.fullBloomFlowers([[2, 1], [3, 3]], [9, 2, 4, 6, 8]) == [0, 0, 0, 0, 0]\nassert solution.fullBloomFlowers([[7, 8], [9, 3], [1, 3], [10, 3], [7, 4]], [7, 8, 5, 1]) == [-1, -1, -3, 1]\nassert solution.fullBloomFlowers([[5, 7], [10, 3], [7, 9], [10, 3], [7, 3], [1, 3]], [6, 5, 7, 3, 8, 9, 10, 4, 2]) == [-2, -2, 0, 1, -1, -1, 0, -3, 1]\nassert solution.fullBloomFlowers([[2, 5], [9, 6], [1, 4]], [2, 4, 9, 3, 1, 10]) == [2, 2, 0, 2, 1, 0]\nassert solution.fullBloomFlowers([[9, 7], [2, 9], [8, 3], [8, 4]], [6, 9, 2, 7, 4, 3, 1, 10, 5]) == [-1, 1, 1, -1, 0, 1, 0, 0, -1]\nassert solution.fullBloomFlowers([[6, 9]], [1, 10, 7, 8, 5, 9]) == [0, 0, 1, 1, 0, 1]\nassert solution.fullBloomFlowers([[6, 3], [2, 5], [3, 2], [3, 3], [4, 9], [5, 10], [3, 4]], [10]) == [1]\nassert solution.fullBloomFlowers([[6, 1], [4, 4], [1, 2], [8, 8], [7, 6], [8, 2], [4, 5]], [3, 1, 6, 7]) == [-2, 1, -1, -1]\nassert solution.fullBloomFlowers([[4, 1], [4, 7], [9, 1], [3, 9]], [10, 1]) == [0, 0]\nassert solution.fullBloomFlowers([[7, 3], [4, 4], [3, 5]], [10, 5, 2, 6, 1, 7, 9, 8, 4, 3]) == [0, 0, 0, -1, 0, 0, 0, 0, 1, 1]\nassert solution.fullBloomFlowers([[1, 9], [4, 8], [8, 7], [4, 4]], [4, 10, 1, 5, 9, 3, 7, 6, 8, 2]) == [3, 0, 1, 2, 1, 1, 2, 2, 2, 1]\nassert solution.fullBloomFlowers([[1, 4], [6, 1], [8, 3], [3, 5], [6, 9], [3, 9], [1, 3], [4, 10]], [3, 1, 7, 9]) == [3, 2, 2, 3]\nassert solution.fullBloomFlowers([[3, 7], [3, 8]], [8, 6, 5, 10, 2]) == [1, 2, 2, 0, 0]\nassert solution.fullBloomFlowers([[10, 7], [8, 3], [3, 9], [3, 8], [2, 4]], [10, 8, 9, 2, 7]) == [0, 1, 0, 1, 1]\nassert solution.fullBloomFlowers([[10, 7], [3, 2], [4, 6], [5, 1], [2, 2], [9, 3], [9, 6], [1, 5], [3, 6]], [8, 5, 3]) == [-3, 2, 1]\nassert solution.fullBloomFlowers([[9, 7], [5, 10], [8, 8], [2, 10], [5, 8], [5, 3], [5, 4], [5, 4], [5, 8]], [4, 8, 5, 9, 2, 3]) == [0, 4, 4, 2, 1, 1]\nassert solution.fullBloomFlowers([[2, 8], [10, 7], [1, 1], [2, 1], [8, 9], [9, 6], [8, 8], [4, 2]], [4, 1, 9, 8, 10, 7, 6, 2, 5, 3]) == [1, 1, 0, 1, 0, 0, 1, 1, 1, 0]\nassert solution.fullBloomFlowers([[2, 2], [4, 8], [6, 9], [1, 6], [5, 4], [1, 8], [3, 10], [10, 8], [2, 7], [9, 2]], [4, 8, 5, 10, 1, 7, 2, 3, 6]) == [4, 3, 4, 1, 2, 4, 4, 3, 5]\nassert solution.fullBloomFlowers([[9, 8], [5, 9], [3, 10], [5, 4], [9, 4]], [7, 2]) == [1, 0]\nassert solution.fullBloomFlowers([[7, 5], [6, 3], [6, 3], [10, 4], [10, 10], [5, 6], [10, 5]], [8, 4, 3, 5, 6, 7, 2, 10, 9, 1]) == [-2, -2, 0, -2, -2, -2, 0, 1, -2, 0]\nassert solution.fullBloomFlowers([[2, 3], [8, 3], [3, 2], [5, 8], [3, 9], [2, 8]], [8, 1, 4, 9]) == [3, 0, 1, 1]\nassert solution.fullBloomFlowers([[5, 8], [6, 5]], [3, 2, 1, 10, 4]) == [0, 0, 0, 0, 0]\nassert solution.fullBloomFlowers([[7, 5], [8, 3], [8, 7], [1, 4]], [3, 7, 10, 4, 9, 8]) == [1, -1, 0, 0, 0, 0]\nassert solution.fullBloomFlowers([[6, 1], [3, 6], [3, 6], [2, 4], [10, 10], [2, 2], [10, 9], [9, 6]], [1, 3, 2, 6, 8]) == [0, 2, 1, 2, -1]\nassert solution.fullBloomFlowers([[9, 1], [10, 8], [9, 10], [1, 7], [9, 5], [8, 8], [6, 1], [9, 1], [2, 6]], [10, 2, 3, 9, 1, 4, 8, 7, 6]) == [1, -1, -1, 0, 1, -1, -2, -2, -1]\nassert solution.fullBloomFlowers([[8, 8], [10, 9], [6, 5]], [1, 9, 5, 8, 3, 10, 6]) == [0, 0, 0, 1, 0, 0, 0]\nassert solution.fullBloomFlowers([[6, 1], [2, 3], [5, 7], [3, 8], [2, 3], [2, 8], [10, 4], [2, 10], [10, 2], [5, 2]], [10]) == [1]\nassert solution.fullBloomFlowers([[6, 1], [1, 3], [5, 7], [9, 2], [8, 6], [3, 5], [8, 9], [2, 6], [9, 9], [2, 1]], [1, 4, 6, 7]) == [1, 0, 1, -1]\nassert solution.fullBloomFlowers([[2, 5], [1, 3]], [6, 2, 3]) == [0, 2, 2]\nassert solution.fullBloomFlowers([[10, 10], [3, 4], [6, 7], [5, 10], [4, 6], [5, 6], [6, 10], [10, 5], [7, 1], [8, 2]], [3, 8, 9, 2, 1]) == [-1, 1, 1, -1, 0]\nassert solution.fullBloomFlowers([[1, 4], [5, 10], [10, 9], [7, 9], [10, 6], [9, 5], [5, 6], [3, 1], [2, 2]], [7, 8, 1, 3, 10, 6, 9, 5, 2]) == [0, 0, 1, 1, 1, 1, 1, 2, 1]\nassert solution.fullBloomFlowers([[3, 9], [9, 10], [8, 8], [10, 1], [10, 5], [3, 9], [10, 4], [4, 1], [1, 4]], [4]) == [2]\nassert solution.fullBloomFlowers([[10, 4], [8, 1], [1, 1]], [3, 9, 6, 5]) == [-1, -1, -2, -2]\nassert solution.fullBloomFlowers([[2, 1], [5, 1], [7, 9]], [5]) == [0]\nassert solution.fullBloomFlowers([[1, 7]], [9, 4, 2, 6, 8]) == [0, 1, 1, 1, 0]\nassert solution.fullBloomFlowers([[2, 4], [9, 2]], [2, 9, 1]) == [1, 0, 0]\nassert solution.fullBloomFlowers([[6, 4], [4, 2], [5, 10], [2, 9], [3, 7], [7, 4], [1, 2]], [3, 9, 10, 7, 5, 4]) == [1, 2, 1, 3, 1, 2]\nassert solution.fullBloomFlowers([[7, 6], [3, 1], [9, 3], [3, 8], [9, 10], [2, 8], [1, 1]], [8, 7, 1, 3, 4, 9]) == [1, 1, 1, 2, 1, 1]\nassert solution.fullBloomFlowers([[7, 2], [7, 8], [1, 8], [5, 6], [3, 1]], [7, 6, 5]) == [2, 1, 1]\nassert solution.fullBloomFlowers([[2, 7], [1, 8], [6, 2], [2, 7], [6, 1], [8, 9], [10, 3], [7, 8]], [7, 5, 3, 4, 10, 8, 9, 2]) == [3, 0, 1, 0, 0, 2, 0, 2]\nassert solution.fullBloomFlowers([[3, 5], [10, 1], [6, 4], [5, 3], [5, 9], [4, 2], [3, 7], [2, 1], [4, 6], [4, 1]], [3, 6, 4, 5, 9, 2]) == [-1, 2, 1, 2, 0, -2]\nassert solution.fullBloomFlowers([[6, 7], [3, 8], [4, 5], [1, 1]], [8]) == [1]\nassert solution.fullBloomFlowers([[8, 1], [7, 2], [6, 4], [1, 6]], [5, 6, 4, 10, 9, 8]) == [-2, -1, -1, 0, 0, 0]\nassert solution.fullBloomFlowers([[8, 5], [2, 1], [7, 8], [5, 5], [6, 6], [10, 3], [6, 10], [3, 7], [10, 10], [1, 1]], [3, 8, 5, 1, 2, 7, 6]) == [1, 1, 1, 1, 0, 1, 1]\nassert solution.fullBloomFlowers([[8, 2], [4, 7]], [3, 5, 4, 1, 9, 7, 2, 8, 6, 10]) == [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution.fullBloomFlowers([[1, 4], [7, 1], [9, 5], [8, 5], [6, 7]], [10]) == [0]\nassert solution.fullBloomFlowers([[5, 4], [3, 8], [2, 2], [3, 2], [9, 5], [5, 7], [1, 8]], [6]) == [2]\nassert solution.fullBloomFlowers([[10, 5], [1, 3], [7, 4], [5, 2], [9, 8], [1, 1], [2, 2], [7, 5], [6, 3]], [3, 7, 5, 6, 2]) == [0, -1, -2, -3, 2]\nassert solution.fullBloomFlowers([[2, 9], [1, 6], [4, 2], [10, 9]], [8, 7]) == [1, 1]\nassert solution.fullBloomFlowers([[9, 4], [6, 9], [5, 4], [1, 5], [5, 7], [7, 7], [6, 7], [9, 9]], [9, 1, 6, 8, 2, 4, 10, 7, 3]) == [2, 1, 2, 0, 1, 1, 0, 3, 1]\nassert solution.fullBloomFlowers([[2, 4], [5, 1], [6, 2], [4, 10], [7, 10]], [6, 5, 10, 4, 2, 7]) == [1, 0, 2, 0, 0, 2]\nassert solution.fullBloomFlowers([[3, 8], [9, 6], [5, 8], [6, 8], [10, 10], [3, 10], [8, 2], [1, 6], [1, 10], [2, 6]], [8]) == [4]\nassert solution.fullBloomFlowers([[6, 5], [9, 8], [7, 4], [5, 10], [6, 6], [6, 7], [3, 10], [8, 7]], [6, 3, 9, 7, 10, 5, 4, 8, 2]) == [3, 1, 2, 3, 2, 1, 1, 2, 0]\nassert solution.fullBloomFlowers([[5, 1], [10, 2], [1, 10], [4, 4], [5, 10], [6, 10]], [2, 6, 4, 7, 1, 5, 10, 8]) == [0, 2, 0, 2, 1, 1, 3, 2]\nassert solution.fullBloomFlowers([[6, 10], [1, 3], [6, 8], [5, 8], [3, 4], [3, 6], [4, 2], [9, 9], [5, 6]], [9]) == [2]\nassert solution.fullBloomFlowers([[6, 3], [3, 10]], [1]) == [0]\nassert solution.fullBloomFlowers([[6, 10]], [3, 8, 9, 10, 6, 4, 2]) == [0, 1, 1, 1, 1, 0, 0]\nassert solution.fullBloomFlowers([[5, 6], [9, 4], [9, 9], [7, 8], [8, 3], [3, 8], [2, 4], [10, 8], [2, 2]], [8, 10, 4, 9, 7, 2]) == [1, 0, 1, 0, 0, 2]\nassert solution.fullBloomFlowers([[3, 1], [9, 9], [6, 5], [3, 3], [5, 7], [8, 6]], [7, 8, 3, 9, 2, 1, 5, 4]) == [0, 0, 1, 1, -1, 0, 1, 0]\nassert solution.fullBloomFlowers([[8, 8], [9, 4]], [6, 2, 7, 4, 5]) == [-1, 0, -1, 0, -1]\nassert solution.fullBloomFlowers([[6, 10], [3, 9]], [1, 7, 2, 6, 8, 3, 10, 9]) == [0, 2, 0, 2, 2, 1, 1, 2]\nassert solution.fullBloomFlowers([[5, 4]], [7, 5]) == [0, 0]\nassert solution.fullBloomFlowers([[9, 5], [8, 9], [9, 1], [6, 6]], [1, 5, 9, 10, 6, 2]) == [0, -1, 1, 0, -1, -1]\nassert solution.fullBloomFlowers([[3, 7], [3, 2], [4, 7], [9, 4], [4, 6], [4, 1], [3, 1], [5, 9], [9, 8], [4, 8]], [7, 1, 9, 2, 5]) == [3, 0, 1, -2, 4]\nassert solution.fullBloomFlowers([[6, 2], [6, 5], [8, 8], [1, 10], [7, 1], [5, 9], [7, 2]], [1, 3, 7, 2, 5, 8, 10, 6]) == [1, -2, 2, 0, -1, 3, 1, 0]\nassert solution.fullBloomFlowers([[3, 2], [6, 9], [3, 3], [10, 8], [4, 5], [1, 3]], [10]) == [0]\nassert solution.fullBloomFlowers([[1, 8], [7, 10]], [10, 9, 2, 5, 3, 7, 1]) == [1, 1, 1, 1, 1, 2, 1]\nassert solution.fullBloomFlowers([[8, 9]], [5, 10]) == [0, 0]\nassert solution.fullBloomFlowers([[7, 5], [9, 9], [1, 1], [5, 2]], [2]) == [0]\nassert solution.fullBloomFlowers([[3, 3], [1, 10], [8, 5], [1, 7], [9, 4], [4, 5], [10, 8], [10, 9], [7, 10], [1, 10]], [2, 10, 6, 7, 8, 1, 3, 5, 9, 4]) == [3, 3, 1, 2, 2, 3, 4, 3, 2, 4]\nassert solution.fullBloomFlowers([[3, 10], [4, 6], [2, 3], [10, 2]], [9, 3, 4, 2]) == [0, 1, 1, 1]\nassert solution.fullBloomFlowers([[9, 10]], [1, 4, 10, 9, 5, 3, 2, 6, 8]) == [0, 0, 1, 1, 0, 0, 0, 0, 0]\nassert solution.fullBloomFlowers([[9, 7], [2, 5], [6, 7]], [1, 4, 6]) == [0, 1, 1]\nassert solution.fullBloomFlowers([[8, 3]], [1, 10, 7, 6, 3]) == [0, 0, -1, -1, 0]\nassert solution.fullBloomFlowers([[9, 10], [8, 9]], [4, 1, 6, 3, 2, 7, 10]) == [0, 0, 0, 0, 0, 0, 1]\nassert solution.fullBloomFlowers([[1, 10], [6, 9], [6, 4], [3, 8], [7, 3], [9, 2]], [1, 3, 7]) == [1, 1, 2]\nassert solution.fullBloomFlowers([[4, 10], [10, 1], [4, 4], [6, 6], [6, 10], [6, 1], [8, 10], [6, 6], [7, 10], [6, 9]], [7, 2, 10, 9, 1, 6, 4]) == [3, -2, 4, 4, 0, 4, 0]\nassert solution.fullBloomFlowers([[10, 2], [1, 9], [10, 5], [3, 8], [10, 4], [8, 8], [7, 2]], [10, 4, 2, 7, 1]) == [0, 0, 1, -1, 1]\nassert solution.fullBloomFlowers([[2, 1], [6, 3], [4, 2], [4, 9], [5, 1], [6, 4], [7, 9], [6, 8], [1, 4], [4, 5]], [9, 10, 2, 6, 1, 3, 7, 5, 4, 8]) == [2, 0, 0, 2, 1, -1, 3, 0, 1, 3]\nassert solution.fullBloomFlowers([[6, 1], [10, 10], [5, 4], [7, 5], [7, 4]], [9, 1, 7]) == [0, 0, 0]\nassert solution.fullBloomFlowers([[9, 1], [2, 9], [8, 2]], [4, 9, 8, 1]) == [-1, 1, 0, 0]\nassert solution.fullBloomFlowers([[8, 8], [6, 2], [9, 5], [9, 4], [8, 3], [5, 1], [6, 8], [9, 3]], [2, 7, 9]) == [-1, -3, 0]\nassert solution.fullBloomFlowers([[6, 8], [3, 1], [6, 5], [5, 8], [3, 4], [2, 7], [5, 2]], [3, 4, 10, 6, 8, 2, 9, 5, 1]) == [1, 1, 0, 3, 2, 0, 0, 2, 0]\nassert solution.fullBloomFlowers([[4, 3], [4, 3], [4, 2], [6, 1], [5, 1], [10, 2], [3, 8], [4, 10], [8, 10]], [8, 3, 4, 9, 5, 10, 2]) == [2, -3, -1, 1, 0, 2, -2]\nassert solution.fullBloomFlowers([[5, 6], [1, 10]], [1, 4, 7, 9, 10]) == [1, 1, 1, 1, 1]\nassert solution.fullBloomFlowers([[9, 7]], [3, 2, 4, 1, 10, 8, 7, 9, 5, 6]) == [0, 0, 0, 0, 0, -1, 0, 0, 0, 0]\nassert solution.fullBloomFlowers([[4, 10], [3, 5], [9, 3], [4, 1], [7, 2], [6, 4], [10, 5], [2, 6], [6, 5], [5, 1]], [7, 5, 4, 6, 8, 2]) == [-1, 0, 0, -1, -1, -1]\nassert solution.fullBloomFlowers([[1, 7], [9, 2], [7, 6], [3, 10], [6, 6], [5, 3], [6, 7], [3, 3], [1, 5], [5, 10]], [1, 9, 3]) == [2, 2, 3]\nassert solution.fullBloomFlowers([[1, 6], [10, 8], [7, 7]], [6, 1, 4, 10, 5, 3, 7, 9, 8, 2]) == [1, 1, 1, 0, 1, 1, 1, -1, 0, 1]\nassert solution.fullBloomFlowers([[4, 2], [8, 9]], [5, 2, 7, 8, 6, 10, 4, 3]) == [0, 0, 0, 1, 0, 0, 0, -1]",
  "inefficient_solution": "def fullBloomFlowers(flowers, persons):\n    flowers_dict = dict()\n    for start, end in flowers:\n        for i in range(start, end + 1):\n            if i not in flowers_dict:\n                flowers_dict[i] = 1\n            else:\n                flowers_dict[i] += 1\n\n    answer = []\n    for person in persons:\n        count = 0\n        for i in range(person, person + 1000): # Check a range of 1000\n            if i in flowers_dict:\n                count += flowers_dict[i]\n        answer.append(count)\n\n    return answer",
  "is_python": true
}