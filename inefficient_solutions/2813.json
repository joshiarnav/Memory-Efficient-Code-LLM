{
  "problem_idx": 2813,
  "task_name": "Maximum Elegance of a K",
  "markdown_description": "\nYou are given a **0-indexed** 2D integer array `items` of length `n` and an integer `k`.\n\n\n`items[i] = [profiti, categoryi]`, where `profiti` and `categoryi` denote the profit and category of the `ith` item respectively.\n\n\nLet's define the **elegance** of a **subsequence** of `items` as `total_profit + distinct_categories2`, where `total_profit` is the sum of all profits in the subsequence, and `distinct_categories` is the number of **distinct** categories from all the categories in the selected subsequence.\n\n\nYour task is to find the **maximum elegance** from all subsequences of size `k` in `items`.\n\n\nReturn *an integer denoting the maximum elegance of a subsequence of* `items` *with size exactly* `k`.\n\n\n**Note:** A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** items = [[3,2],[5,1],[10,1]], k = 2\n**Output:** 17\n**Explanation:** In this example, we have to select a subsequence of size 2.\nWe can select items[0] = [3,2] and items[2] = [10,1].\nThe total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].\nHence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** items = [[3,1],[3,1],[2,2],[5,3]], k = 3\n**Output:** 19\n**Explanation:** In this example, we have to select a subsequence of size 3. \nWe can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. \nThe total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. \nHence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** items = [[1,1],[2,1],[3,1]], k = 3\n**Output:** 7\n**Explanation:** In this example, we have to select a subsequence of size 3. \nWe should select all the items. \nThe total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. \nHence, the maximum elegance is 6 + 12 = 7.  \n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= items.length == n <= 105`\n* `items[i].length == 2`\n* `items[i][0] == profiti`\n* `items[i][1] == categoryi`\n* `1 <= profiti <= 109`\n* `1 <= categoryi <= n`\n* `1 <= k <= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        items.sort(key=lambda x: -x[0])\n        tot = 0\n        vis = set()\n        dup = []\n        for p, c in items[:k]:\n            tot += p\n            if c not in vis:\n                vis.add(c)\n            else:\n                dup.append(p)\n        ans = tot + len(vis) ** 2\n        for p, c in items[k:]:\n            if c in vis or not dup:\n                continue\n            vis.add(c)\n            tot += p - dup.pop()\n            ans = max(ans, tot + len(vis) ** 2)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        items.sort(key=lambda x: -x[0])\n        tot = 0\n        vis = set()\n        dup = []\n        for p, c in items[:k]:\n            tot += p\n            if c not in vis:\n                vis.add(c)\n            else:\n                dup.append(p)\n        ans = tot + len(vis) ** 2\n        for p, c in items[k:]:\n            if c in vis or not dup:\n                continue\n            vis.add(c)\n            tot += p - dup.pop()\n            ans = max(ans, tot + len(vis) ** 2)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random items list\n    items = [[random.randint(1, 1000000000), random.randint(1, 100)] for _ in range(random.randint(2, 10))]\n    \n    # Generate a random k\n    k = random.randint(1, len(items))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMaximumElegance(items, k)\n\n    return items, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        items, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMaximumElegance(items, k) == expected_result\n        print(f\"assert solution.findMaximumElegance({items}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMaximumElegance({items}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMaximumElegance([[881660364, 63], [804845368, 79], [244628076, 56]], 2) == 1686505736\nassert solution.findMaximumElegance([[939690300, 73], [827215629, 80], [817780004, 46], [814341686, 4], [796712561, 49], [269383699, 31]], 4) == 3399027635\nassert solution.findMaximumElegance([[712717085, 37], [540459534, 35], [221685852, 36], [38635279, 91], [25320135, 11]], 5) == 1538817910\nassert solution.findMaximumElegance([[939294427, 68], [680484444, 57], [604023787, 9], [579911138, 4], [546036509, 10], [523361182, 4], [471969898, 43], [295731755, 74]], 3) == 2223802667\nassert solution.findMaximumElegance([[960769332, 67], [957764961, 71], [830722679, 25], [548976515, 17], [403626241, 12], [196590624, 18]], 2) == 1918534297\nassert solution.findMaximumElegance([[821425246, 90], [758474206, 41], [738830627, 45], [705234294, 24], [623449666, 93], [596343280, 31], [529999706, 65], [466784379, 54], [308462206, 13], [148206549, 30]], 2) == 1579899456\nassert solution.findMaximumElegance([[533377170, 4], [230420636, 52], [66524781, 30]], 1) == 533377171\nassert solution.findMaximumElegance([[812112688, 92], [632216347, 27], [574772172, 59], [197804096, 11], [173582671, 63], [96478549, 86]], 2) == 1444329039\nassert solution.findMaximumElegance([[505055617, 81], [493010970, 98], [378302780, 94], [57203226, 36], [50856290, 40]], 3) == 1376369376\nassert solution.findMaximumElegance([[908337472, 94], [575934757, 82], [442663061, 74]], 1) == 908337473\nassert solution.findMaximumElegance([[973579473, 93], [867008786, 9], [634864520, 34], [631473733, 80], [457988337, 56], [443258488, 91], [372998105, 93], [193700584, 43]], 1) == 973579474\nassert solution.findMaximumElegance([[959586431, 50], [597653011, 26], [332707693, 100], [137604704, 45], [103056682, 60], [61516626, 3], [13097807, 7]], 4) == 2027551855\nassert solution.findMaximumElegance([[989366283, 3], [852869864, 84], [756212304, 56], [720564678, 26], [616054112, 72], [259684474, 72], [216220344, 83], [160679893, 8], [152437468, 36]], 3) == 2598448460\nassert solution.findMaximumElegance([[721040778, 74], [708793822, 92], [598886978, 94], [515775787, 5], [472274489, 81], [439299313, 35], [395358180, 28], [338528234, 16], [251480621, 91], [50935189, 39]], 10) == 4492373491\nassert solution.findMaximumElegance([[946136690, 64], [628518018, 75], [610218423, 20], [582137417, 66], [512577727, 33], [383124038, 12], [117771037, 47]], 5) == 3279588300\nassert solution.findMaximumElegance([[941205218, 74], [775482930, 13], [364578594, 92]], 3) == 2081266751\nassert solution.findMaximumElegance([[705006924, 76], [669278254, 85], [656632148, 70], [282727767, 28], [180573877, 15]], 5) == 2494218995\nassert solution.findMaximumElegance([[838400987, 76], [835413838, 46], [623231235, 42], [541957053, 15]], 1) == 838400988\nassert solution.findMaximumElegance([[827364256, 80], [749686047, 11], [737329357, 4], [422189024, 30], [224459826, 57], [143648849, 12], [98976524, 74], [91070299, 12], [86219545, 43]], 6) == 3104677395\nassert solution.findMaximumElegance([[749274098, 71], [610159780, 30], [596865775, 33], [583436107, 97], [157423810, 63]], 3) == 1956299662\nassert solution.findMaximumElegance([[962301207, 51], [890646561, 75], [774439975, 19], [719343818, 57], [633396579, 25], [616590985, 96], [423320872, 31], [388004357, 68], [309045119, 12], [120918580, 4]], 4) == 3346731577\nassert solution.findMaximumElegance([[751435967, 88], [592862477, 84], [420881287, 30]], 3) == 1765179740\nassert solution.findMaximumElegance([[992938546, 31], [879222642, 94], [864282124, 99], [778104005, 40], [715860656, 37], [620454103, 69], [278848630, 98]], 6) == 4850862112\nassert solution.findMaximumElegance([[980214939, 60], [694762196, 83], [619120498, 65], [436441490, 50], [348360731, 6], [190521756, 54], [178108471, 36], [159459843, 86], [47092166, 76]], 1) == 980214940\nassert solution.findMaximumElegance([[972647316, 75], [845160637, 22], [787143192, 13], [734913366, 54], [580738753, 28], [549790922, 81], [416684934, 15], [350727752, 56]], 4) == 3339864527\nassert solution.findMaximumElegance([[950361655, 84], [932433570, 15], [922233903, 23], [915904600, 42], [911261947, 60], [509944309, 7], [477290719, 84], [288263787, 84], [279297356, 45]], 4) == 3720933744\nassert solution.findMaximumElegance([[817712012, 53], [799927780, 71], [732209308, 34], [690654617, 78], [644461683, 3], [341269443, 38], [339932102, 78], [142405126, 8], [97265224, 88]], 9) == 4605837359\nassert solution.findMaximumElegance([[896432410, 5], [890902935, 82], [576676949, 82], [140343522, 27]], 3) == 2364012298\nassert solution.findMaximumElegance([[520081322, 26], [330817002, 14], [196803368, 23], [24732509, 84]], 2) == 850898328\nassert solution.findMaximumElegance([[940174624, 90], [937235905, 35], [835045136, 97], [682394447, 95], [305947848, 98], [81845510, 5], [31333096, 32], [28136553, 73]], 2) == 1877410533\nassert solution.findMaximumElegance([[928970076, 23], [617712145, 64], [570350095, 60], [449255880, 21], [423958866, 33], [394035475, 85], [345885418, 31], [326503306, 75], [162992601, 3], [32853568, 96]], 8) == 4056671325\nassert solution.findMaximumElegance([[957260977, 44], [784240876, 3], [747224446, 50], [693298051, 21], [588615572, 67], [323679078, 56], [56365723, 45]], 2) == 1741501857\nassert solution.findMaximumElegance([[757134099, 99], [643471058, 56], [622072664, 72]], 2) == 1400605161\nassert solution.findMaximumElegance([[970288187, 91], [697084730, 65], [620507262, 38], [598327250, 63], [453847207, 14], [278410139, 71], [241961854, 17], [51395731, 12]], 3) == 2287880188\nassert solution.findMaximumElegance([[714531036, 67], [666757391, 86], [641997478, 99], [589379376, 55], [472937171, 43], [465872797, 84], [399425981, 3], [349632014, 49], [309018468, 24], [173497790, 55]], 4) == 2612665297\nassert solution.findMaximumElegance([[716805781, 50], [619051915, 25], [484237990, 39], [482194452, 79], [438909029, 96], [353489009, 4], [300533032, 87], [211589075, 22], [152741702, 96]], 5) == 2741199192\nassert solution.findMaximumElegance([[981849909, 57], [769845362, 30], [705723230, 71], [566282303, 26], [565486614, 40], [508260987, 85], [466494763, 58], [417548367, 16], [325761387, 46]], 6) == 4097448441\nassert solution.findMaximumElegance([[379352192, 82], [253937755, 57], [144499496, 38]], 3) == 777789452\nassert solution.findMaximumElegance([[864126647, 24], [86144532, 41], [6398167, 39]], 1) == 864126648\nassert solution.findMaximumElegance([[955374263, 67], [540609612, 17], [475016349, 83], [94268316, 73]], 1) == 955374264\nassert solution.findMaximumElegance([[792278469, 66], [705992270, 86], [601589784, 85], [350181262, 32], [265121167, 4], [138107984, 79], [89111680, 26]], 5) == 2715162977\nassert solution.findMaximumElegance([[806824703, 19], [782669952, 20], [510926275, 37], [202020192, 14]], 3) == 2100420939\nassert solution.findMaximumElegance([[682481562, 5], [484480970, 61], [6287464, 39]], 3) == 1173250005\nassert solution.findMaximumElegance([[897080795, 58], [853440839, 15], [777592312, 49], [770409785, 100], [709471141, 2], [612243270, 65], [145150742, 83], [79887645, 46], [17741001, 54]], 3) == 2528113955\nassert solution.findMaximumElegance([[856638018, 82], [798747910, 75], [392105703, 38], [53278688, 6]], 4) == 2100770335\nassert solution.findMaximumElegance([[656125816, 63], [545693511, 57], [489773307, 42], [476801597, 24], [282083091, 53]], 4) == 2168394247\nassert solution.findMaximumElegance([[684892099, 68], [492650925, 81], [405928112, 50], [238999119, 79], [231065087, 78], [173492227, 84], [45583416, 25]], 5) == 2053535367\nassert solution.findMaximumElegance([[883731542, 19], [870345696, 66], [868836646, 21], [842598831, 27], [642512152, 44], [617581717, 66], [460168319, 2], [231797716, 21], [130279804, 79]], 3) == 2622913893\nassert solution.findMaximumElegance([[776288770, 53], [694825452, 81], [683704270, 83], [668643703, 88], [582943263, 57], [558635047, 64], [89956141, 51], [45443941, 53], [42115638, 17]], 4) == 2823462211\nassert solution.findMaximumElegance([[988347305, 20], [684024590, 58], [584988589, 25], [523714644, 65], [379981663, 68], [350128604, 5], [253910787, 52]], 3) == 2257360493\nassert solution.findMaximumElegance([[995261482, 81], [893844757, 85], [884639770, 56], [760186107, 6], [431408673, 5], [408895098, 97], [387897414, 25]], 6) == 4374235923\nassert solution.findMaximumElegance([[931434313, 94], [833521516, 93], [735484152, 74], [689882833, 61], [609529985, 84], [585347352, 35], [287611760, 100], [277881664, 48], [166354118, 25]], 1) == 931434314\nassert solution.findMaximumElegance([[812948048, 60], [804264736, 18], [785270931, 50], [774144407, 46], [738096223, 49], [640251995, 23], [559905979, 12], [171706270, 19], [76073489, 57]], 7) == 5114882368\nassert solution.findMaximumElegance([[666119088, 93], [602969875, 43], [391524645, 98], [341557266, 35], [281921799, 46], [12142421, 47]], 1) == 666119089\nassert solution.findMaximumElegance([[830136398, 71], [759493268, 51], [650276736, 20], [202337463, 93]], 2) == 1589629670\nassert solution.findMaximumElegance([[366531862, 89], [282641915, 67], [258260687, 54], [145742987, 33]], 3) == 907434473\nassert solution.findMaximumElegance([[755022519, 36], [728910594, 57], [578994091, 79], [379342181, 94], [250068094, 61]], 3) == 2062927213\nassert solution.findMaximumElegance([[900006168, 8], [833353742, 83], [350017062, 69], [327786287, 82], [323741589, 15], [282937178, 38], [192265534, 78], [151984157, 70], [11937892, 73]], 4) == 2411163275\nassert solution.findMaximumElegance([[656079455, 39], [448052191, 48], [432417598, 88], [52924663, 90]], 3) == 1536549253\nassert solution.findMaximumElegance([[948227484, 22], [896129407, 4], [755313496, 44], [580084974, 20], [499302738, 88], [280920412, 92], [198664011, 27], [80466200, 76]], 4) == 3179755377\nassert solution.findMaximumElegance([[455480523, 16], [295433678, 81], [283258421, 64]], 1) == 455480524\nassert solution.findMaximumElegance([[549679167, 13], [244378103, 86], [206213478, 61], [107838178, 31]], 3) == 1000270757\nassert solution.findMaximumElegance([[915821550, 88], [846477831, 11], [759315272, 51], [646900208, 37], [624889081, 79], [298676202, 71]], 4) == 3168514877\nassert solution.findMaximumElegance([[658911144, 63], [641899178, 18], [448674750, 50], [376018997, 30], [177597931, 21]], 2) == 1300810326\nassert solution.findMaximumElegance([[857851608, 86], [64336646, 75]], 2) == 922188258\nassert solution.findMaximumElegance([[968941610, 73], [883510619, 61], [592461271, 32], [390836622, 36], [241528187, 77], [175098736, 31]], 1) == 968941611\nassert solution.findMaximumElegance([[943314229, 30], [324134831, 56], [258550143, 7]], 1) == 943314230\nassert solution.findMaximumElegance([[806562423, 33], [569364467, 32], [544041757, 64], [510026886, 27], [499631086, 16], [438301047, 98], [320550540, 23], [158845769, 80]], 1) == 806562424\nassert solution.findMaximumElegance([[771934365, 27], [716887795, 30], [709867902, 43], [420060961, 38], [407490002, 69], [209210864, 100]], 2) == 1488822164\nassert solution.findMaximumElegance([[993199798, 57], [850473186, 32], [779044681, 83], [226841720, 48], [208379111, 28], [62105049, 98], [39927582, 66], [5748763, 45]], 3) == 2622717674\nassert solution.findMaximumElegance([[910683511, 76], [796646597, 19], [776346363, 21], [621982888, 55], [491883394, 24], [362538607, 94], [319030164, 59], [223284516, 68], [166500474, 74], [33432177, 26]], 6) == 3960081396\nassert solution.findMaximumElegance([[563338156, 47], [206495620, 45], [59749034, 76]], 1) == 563338157\nassert solution.findMaximumElegance([[645151207, 37], [559462837, 30], [528354643, 17], [391601981, 30], [166370258, 18]], 3) == 1732968696\nassert solution.findMaximumElegance([[833614372, 22], [770044237, 5], [602403335, 43]], 3) == 2206061953\nassert solution.findMaximumElegance([[912854033, 62], [849301099, 54], [542368849, 7], [461972830, 13], [445818313, 74], [10423520, 48]], 2) == 1762155136\nassert solution.findMaximumElegance([[953761081, 80], [824525616, 6], [551712624, 58], [491327921, 61], [258045447, 32], [255056933, 71], [224166624, 65], [202592064, 89], [188317729, 63], [68057615, 15]], 8) == 3761188374\nassert solution.findMaximumElegance([[926888852, 43], [921099684, 45], [745002509, 73], [674327432, 17], [674063947, 1], [499085440, 36], [459247693, 51], [416487987, 11], [341139991, 33]], 9) == 5657343616\nassert solution.findMaximumElegance([[774102645, 41], [692121065, 5], [637692364, 58]], 3) == 2103916083\nassert solution.findMaximumElegance([[896767400, 57], [701124507, 44], [598629866, 23], [479089371, 40], [450799729, 30], [84323845, 93], [71699144, 53]], 2) == 1597891911\nassert solution.findMaximumElegance([[479672594, 67], [433591190, 95], [367444399, 95], [219225712, 58]], 2) == 913263788\nassert solution.findMaximumElegance([[834761447, 2], [691170755, 38], [632432162, 16], [539228343, 13], [483876557, 20], [301821765, 62], [6550465, 2]], 3) == 2158364373\nassert solution.findMaximumElegance([[709684474, 39], [531321048, 15], [530326178, 65], [516805282, 66], [401900495, 52], [365400171, 45], [176921663, 69], [84395172, 36], [4946412, 80]], 6) == 3055437684\nassert solution.findMaximumElegance([[875327124, 72], [703605315, 32], [520499537, 58], [222660882, 66], [121796938, 62]], 1) == 875327125\nassert solution.findMaximumElegance([[826464016, 46], [660460785, 94], [637918495, 93], [616072548, 32], [518266703, 47], [452001366, 36], [92325721, 98]], 4) == 2740915860\nassert solution.findMaximumElegance([[915155043, 32], [887492463, 23], [734313696, 16], [706297642, 3], [660112121, 49], [603887789, 35], [512414181, 28], [103730313, 10]], 4) == 3243258860\nassert solution.findMaximumElegance([[974520879, 81], [831066293, 73], [821267209, 28], [777663104, 43], [721927430, 45], [508519209, 10], [269130531, 65], [258678500, 7], [55747672, 76]], 9) == 5218520908\nassert solution.findMaximumElegance([[889913057, 79], [747365263, 1], [708685920, 67], [667176599, 86], [622137632, 100], [516991155, 12], [374458259, 82], [329469077, 100], [94116947, 69]], 4) == 3013140855\nassert solution.findMaximumElegance([[823401501, 65], [421649031, 8], [394562762, 86]], 1) == 823401502\nassert solution.findMaximumElegance([[917892295, 87], [892809679, 35], [669051024, 92], [630188526, 50], [621954927, 95], [550326664, 100], [513949889, 100], [462292658, 25], [234371323, 43], [227554478, 26]], 8) == 5258465711\nassert solution.findMaximumElegance([[910455210, 90], [821264268, 88], [514374754, 85], [314764826, 52], [270589846, 24]], 5) == 2831448929\nassert solution.findMaximumElegance([[948411658, 93], [822952620, 93], [804333978, 76], [795988997, 62], [740020977, 58], [602850277, 13], [545083216, 42], [475874142, 12], [445294252, 83], [354109196, 42]], 8) == 5735515914\nassert solution.findMaximumElegance([[911569643, 61], [630259306, 86], [535485622, 69], [402554700, 60], [224215799, 36]], 1) == 911569644\nassert solution.findMaximumElegance([[966380497, 10], [896312303, 64], [870301749, 23], [843658037, 66], [752161833, 76], [591634157, 23], [347811363, 49], [271910790, 81], [240570282, 63]], 1) == 966380498\nassert solution.findMaximumElegance([[908851177, 79], [494725788, 48], [473919856, 79], [427716823, 52], [420530150, 42], [269387755, 54], [140174241, 4], [119718546, 39]], 3) == 1877496825\nassert solution.findMaximumElegance([[473345951, 35], [301209350, 51], [228667827, 20], [116703784, 54], [53672680, 29]], 4) == 1119926928\nassert solution.findMaximumElegance([[950947581, 80], [881750276, 67], [724166361, 79], [722683930, 69], [671866588, 21], [643768439, 51], [548810472, 94], [464868687, 97], [459186316, 6]], 2) == 1832697861\nassert solution.findMaximumElegance([[932167118, 85], [695497716, 13], [657865193, 34], [380824787, 55], [99369256, 36]], 4) == 2666354830\nassert solution.findMaximumElegance([[900148363, 37], [614242019, 11], [558698002, 83]], 1) == 900148364\nassert solution.findMaximumElegance([[930497417, 77], [875971379, 15], [653214422, 100], [564676755, 50], [332592946, 81], [174496894, 69], [172129417, 7], [61370656, 94], [59891311, 17]], 8) == 3764949950\nassert solution.findMaximumElegance([[970256853, 79], [847870199, 96], [802881519, 67], [782284572, 1], [313217032, 58], [146380424, 24], [112319934, 95]], 5) == 3716510200",
  "inefficient_solution": "class Solution:\n    def findMaximumElegance(self, items: List[List[int]], k: int) -> int:\n        n = len(items)\n        matrix = [[0 for _ in range(5 * n)] for _ in range(5 * n)]\n        for i in range(n):\n            for j in range(5 * n):\n                matrix[i][j] = items[i][0]\n        for i in range(n):\n            for j in range(5 * n):\n                matrix[i][j+1] = items[i][1]\n        for i in range(5 * n):\n            for j in range(5 * n):\n                matrix[i][j] = -matrix[i][j]\n        for i in range(5 * n):\n            for j in range(5 * n):\n                matrix[i][j] = -matrix[i][j] ** 2\n        items.sort(key=lambda x: -x[0])\n        count = [0 for _ in range(5 * n)]\n        ans = 0\n        for i in range(n):\n            count[items[i][1]] += 1\n            for j in range(5 * n):\n                for l in range(5 * n):\n                    if j == l:\n                        continue\n                    if count[j] == k:\n                        continue\n                    if count[l] == k:\n                        continue\n                    if matrix[j][l] == 0:\n                        continue\n                    ans = max(ans, matrix[j][l] + (count[j] + 1) ** 2)\n        return ans",
  "is_python": true
}