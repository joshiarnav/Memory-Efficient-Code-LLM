{
  "problem_idx": 2331,
  "task_name": "Evaluate Boolean Binary Tree",
  "markdown_description": "\nYou are given the `root` of a **full binary tree** with the following properties:\n\n\n* **Leaf nodes** have either the value `0` or `1`, where `0` represents `False` and `1` represents `True`.\n* **Non-leaf nodes** have either the value `2` or `3`, where `2` represents the boolean `OR` and `3` represents the boolean `AND`.\n\n\nThe **evaluation** of a node is as follows:\n\n\n* If the node is a leaf node, the evaluation is the **value** of the node, i.e. `True` or `False`.\n* Otherwise, **evaluate** the node's two children and **apply** the boolean operation of its value with the children's evaluations.\n\n\nReturn *the boolean result of **evaluating** the* `root` *node.*\n\n\nA **full binary tree** is a binary tree where each node has either `0` or `2` children.\n\n\nA **leaf node** is a node that has zero children.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2331.Evaluate%20Boolean%20Binary%20Tree/images/example1drawio1.png)\n\n```\n\n**Input:** root = [2,1,3,null,null,0,1]\n**Output:** true\n**Explanation:** The above diagram illustrates the evaluation process.\nThe AND node evaluates to False AND True = False.\nThe OR node evaluates to True OR False = True.\nThe root node evaluates to True, so we return true.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [0]\n**Output:** false\n**Explanation:** The root node is a leaf node and it evaluates to false, so we return false.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 1000]`.\n* `0 <= Node.val <= 3`\n* Every node has either `0` or `2` children.\n* Leaf nodes have a value of `0` or `1`.\n* Non-leaf nodes have a value of `2` or `3`.\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def evaluateTree(self, root: Optional[TreeNode]) -> bool:\n        if root.left is None:\n            return bool(root.val)\n        l = self.evaluateTree(root.left)\n        r = self.evaluateTree(root.right)\n        return l or r if root.val == 2 else l and r\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def evaluateTree(self, root: Optional[TreeNode]) -> bool:\n        if root.left is None:\n            return bool(root.val)\n        l = self.evaluateTree(root.left)\n        r = self.evaluateTree(root.right)\n        return l or r if root.val == 2 else l and r\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random tree values\n    values = random.choices([0, 1, 2, 3], k=random.randint(1, 5))\n\n    # Generate binary tree based on the random values\n    root = generate_binary_tree(values)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.evaluateTree(root)\n\n    return root, expected_result\n\ndef generate_binary_tree(values):\n    nodes = [None] * len(values)\n    for i, val in enumerate(values):\n        if val == 0 or val == 1:\n            nodes[i] = TreeNode(val)\n        else:\n            left_idx = random.randint(0, i)\n            right_idx = i - left_idx - 1\n            nodes[i] = TreeNode(val, nodes[left_idx], nodes[right_idx])\n    return nodes[-1]\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.evaluateTree(root) == expected_result\n        print(f\"assert solution.evaluateTree({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.evaluateTree({root}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f50>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d50>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e50>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f50>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e50>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0fd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0fd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0fd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d50>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0fd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d50>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0fd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e50>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0dd0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f10>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0f90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0e90>) == True\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0d50>) == False\nassert solution.evaluateTree(<__main__.TreeNode object at 0x7fe6baed0ed0>) == True",
  "inefficient_solution": "",
  "is_python": true
}