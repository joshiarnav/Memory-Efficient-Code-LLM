{
  "problem_idx": 1849,
  "task_name": "Splitting a String Into Descending Consecutive Values",
  "markdown_description": "\nYou are given a string `s` that consists of only digits.\n\n\nCheck if we can split `s` into **two or more non-empty substrings** such that the **numerical values** of the substrings are in **descending order** and the **difference** between numerical values of every two **adjacent** **substrings** is equal to `1`.\n\n\n* For example, the string `s = \"0090089\"` can be split into `[\"0090\", \"089\"]` with numerical values `[90,89]`. The values are in descending order and adjacent values differ by `1`, so this way is valid.\n* Another example, the string `s = \"001\"` can be split into `[\"0\", \"01\"]`, `[\"00\", \"1\"]`, or `[\"0\", \"0\", \"1\"]`. However all the ways are invalid because they have numerical values `[0,1]`, `[0,1]`, and `[0,0,1]` respectively, all of which are not in descending order.\n\n\nReturn `true` *if it is possible to split* `s`\u200b\u200b\u200b\u200b\u200b\u200b *as described above**, or* `false` *otherwise.*\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"1234\"\n**Output:** false\n**Explanation:** There is no valid way to split s.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"050043\"\n**Output:** true\n**Explanation:** s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3].\nThe values are in descending order with adjacent values differing by 1.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"9080701\"\n**Output:** false\n**Explanation:** There is no valid way to split s.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 20`\n* `s` only consists of digits.\n\n\n",
  "canonical_solution": "class Solution:\n    def splitString(self, s: str) -> bool:\n        def dfs(i, x, k):\n            if i == len(s):\n                return k > 1\n            y = 0\n            for j in range(i, len(s)):\n                y = y * 10 + int(s[j])\n                if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1):\n                    return True\n            return False\n\n        return dfs(0, -1, 0)\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices(string.digits, k=random.randint(1, 20)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.splitString(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.splitString(s) == expected_result\n        print(f\"assert solution.splitString({s}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.splitString({s}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.splitString(894621054596458) == False\nassert solution.splitString(99421549219) == False\nassert solution.splitString(5696985) == False\nassert solution.splitString(68) == False\nassert solution.splitString(09273217059220753) == False\nassert solution.splitString(4079648832) == False\nassert solution.splitString(496512428807127) == False\nassert solution.splitString(1) == False\nassert solution.splitString(386) == False\nassert solution.splitString(486272) == False\nassert solution.splitString(303597316818630) == False\nassert solution.splitString(16553099768545379) == False\nassert solution.splitString(7538479) == False\nassert solution.splitString(411881212926495974) == False\nassert solution.splitString(36715565781700) == False\nassert solution.splitString(5135860) == False\nassert solution.splitString(8453612392) == False\nassert solution.splitString(36523346246636349095) == False\nassert solution.splitString(6) == False\nassert solution.splitString(2309113897) == False\nassert solution.splitString(28635488158534456) == False\nassert solution.splitString(436879430229500) == False\nassert solution.splitString(68364681676358590707) == False\nassert solution.splitString(194610323) == False\nassert solution.splitString(39) == False\nassert solution.splitString(8796616) == False\nassert solution.splitString(351620579788) == False\nassert solution.splitString(50587) == False\nassert solution.splitString(6855222197362730467) == False\nassert solution.splitString(791262193040190776) == False\nassert solution.splitString(19443929766453) == False\nassert solution.splitString(25118604143955517) == False\nassert solution.splitString(2170685) == False\nassert solution.splitString(99756974265621606838) == False\nassert solution.splitString(2154684564835327) == False\nassert solution.splitString(758700298813) == False\nassert solution.splitString(9) == False\nassert solution.splitString(0163536651) == False\nassert solution.splitString(08) == False\nassert solution.splitString(313737155212) == False\nassert solution.splitString(24167654784) == False\nassert solution.splitString(864984924096312812) == False\nassert solution.splitString(07532309) == False\nassert solution.splitString(343336046678049062) == False\nassert solution.splitString(751164592476294) == False\nassert solution.splitString(857559541092642751) == False\nassert solution.splitString(38537219) == False\nassert solution.splitString(765809468) == False\nassert solution.splitString(3128575622365921097) == False\nassert solution.splitString(7749756) == False\nassert solution.splitString(0928195600376371964) == False\nassert solution.splitString(907738644) == False\nassert solution.splitString(33218098477232528063) == False\nassert solution.splitString(310545) == False\nassert solution.splitString(94937281872343482) == False\nassert solution.splitString(1698028873453769) == False\nassert solution.splitString(6057024039642688988) == False\nassert solution.splitString(552611260706611151) == False\nassert solution.splitString(354876847451543027) == False\nassert solution.splitString(008059696) == False\nassert solution.splitString(27) == False\nassert solution.splitString(8) == False\nassert solution.splitString(98809932292) == False\nassert solution.splitString(8642074491376) == False\nassert solution.splitString(3362613863139289722) == False\nassert solution.splitString(5487136150263) == False\nassert solution.splitString(5111239081455) == False\nassert solution.splitString(22) == False\nassert solution.splitString(9811637) == False\nassert solution.splitString(053030) == False\nassert solution.splitString(102598227) == False\nassert solution.splitString(15708654043204282660) == False\nassert solution.splitString(1) == False\nassert solution.splitString(8477547649743) == False\nassert solution.splitString(816465) == False\nassert solution.splitString(6) == False\nassert solution.splitString(720595476517) == False\nassert solution.splitString(1147088119219) == False\nassert solution.splitString(52870675297443548) == False\nassert solution.splitString(29058912096) == False\nassert solution.splitString(907393094) == False\nassert solution.splitString(40473821920) == False\nassert solution.splitString(958301915069) == False\nassert solution.splitString(25727416) == False\nassert solution.splitString(55267582327) == False\nassert solution.splitString(1838296) == False\nassert solution.splitString(67570112975) == False\nassert solution.splitString(11783831885) == False\nassert solution.splitString(0819843713) == False\nassert solution.splitString(11709982117049) == False\nassert solution.splitString(7841676204168) == False\nassert solution.splitString(883) == False\nassert solution.splitString(71275753140515809785) == False\nassert solution.splitString(1) == False\nassert solution.splitString(806289) == False\nassert solution.splitString(60) == False\nassert solution.splitString(37643052633) == False\nassert solution.splitString(054973673) == False\nassert solution.splitString(42153908299885443) == False\nassert solution.splitString(1998344144369333) == False",
  "inefficient_solution": "def splitString(s):\n    def dfs(i, x, k):\n        if i == len(s):\n            return k > 1\n        for j in range(i, len(s)):\n            y = 0\n            for digit in s[j:]:\n                y = y * 10 + int(digit)\n                if (x == -1 or x - y == 1) and dfs(j + 1, y, k + 1):\n                    return True\n        return False\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            for k in range(j, len(s)):\n                for l in range(k, len(s)):\n                    y = 0\n                    for digit in s[:j]:\n                        y = y * 10 + int(digit)\n                    z = 0\n                    for digit in s[j:k]:\n                        z = z * 10 + int(digit)\n                    w = 0\n                    for digit in s[k:l]:\n                        w = w * 10 + int(digit)\n                    v = 0\n                    for digit in s[l:]:\n                        v = v * 10 + int(digit)\n                    if (y == -1 or y - z == 1) and (z == -1 or z - w == 1) and (w == -1 or w - v == 1):\n                        return True\n    return False",
  "is_python": true
}