{
  "problem_idx": 1415,
  "task_name": "The k",
  "markdown_description": "\nA **happy string** is a string that:\n\n\n* consists only of letters of the set `['a', 'b', 'c']`.\n* `s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).\n\n\nFor example, strings **\"abc\", \"ac\", \"b\"** and **\"abcbabcbcb\"** are all happy strings and strings **\"aa\", \"baa\"** and **\"ababbc\"** are not happy strings.\n\n\nGiven two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.\n\n\nReturn *the kth string* of this list or return an **empty string** if there are less than `k` happy strings of length `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1, k = 3\n**Output:** \"c\"\n**Explanation:** The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 1, k = 4\n**Output:** \"\"\n**Explanation:** There are only 3 happy strings of length 1.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 3, k = 9\n**Output:** \"cab\"\n**Explanation:** There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 10`\n* `1 <= k <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def getHappyString(self, n: int, k: int) -> str:\n        def dfs(t):\n            if len(t) == n:\n                ans.append(t)\n                return\n            for c in 'abc':\n                if t and t[-1] == c:\n                    continue\n                dfs(t + c)\n\n        ans = []\n        dfs('')\n        return '' if len(ans) < k else ans[k - 1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def getHappyString(self, n: int, k: int) -> str:\n        def dfs(t):\n            if len(t) == n:\n                ans.append(t)\n                return\n            for c in 'abc':\n                if t and t[-1] == c:\n                    continue\n                dfs(t + c)\n\n        ans = []\n        dfs('')\n        return '' if len(ans) < k else ans[k - 1]\n\n\ndef generate_test_case_happy_string():\n    solution = Solution()\n\n    # Generate random values for n and k\n    n = random.randint(1, 10)\n    k = random.randint(1, 100)\n\n    # Call the solution function to get the expected result\n    expected_result = solution.getHappyString(n, k)\n\n    return n, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, k, expected_result = generate_test_case_happy_string()\n        solution = Solution()\n        assert solution.getHappyString(n, k) == expected_result\n        if expected_result != \"\":\n            print(f\"assert solution.getHappyString({n}, {k}) == \\\"{expected_result}\\\"\")\n            test_case_generator_results.append(f\"assert solution.getHappyString({n}, {k}) == \\\"{expected_result}\\\"\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getHappyString(10, 13) == \"abababcbab\"\nassert solution.getHappyString(6, 92) == \"cbcacb\"\nassert solution.getHappyString(9, 78) == \"abcabcbac\"\nassert solution.getHappyString(8, 69) == \"acabacab\"\nassert solution.getHappyString(10, 17) == \"ababacabab\"\nassert solution.getHappyString(7, 29) == \"abcbcab\"\nassert solution.getHappyString(9, 87) == \"abcacacba\"\nassert solution.getHappyString(5, 21) == \"bacab\"\nassert solution.getHappyString(8, 53) == \"abcbacab\"\nassert solution.getHappyString(6, 91) == \"cbcaca\"\nassert solution.getHappyString(7, 2) == \"abababc\"\nassert solution.getHappyString(6, 59) == \"bcbaca\"\nassert solution.getHappyString(7, 35) == \"acabaca\"\nassert solution.getHappyString(10, 28) == \"ababacbacb\"\nassert solution.getHappyString(9, 24) == \"ababcacbc\"\nassert solution.getHappyString(6, 5) == \"abacab\"\nassert solution.getHappyString(10, 65) == \"abacababab\"\nassert solution.getHappyString(4, 10) == \"babc\"\nassert solution.getHappyString(10, 68) == \"abacababcb\"\nassert solution.getHappyString(8, 59) == \"abcbcaca\"\nassert solution.getHappyString(6, 78) == \"cacbac\"\nassert solution.getHappyString(5, 22) == \"bacac\"\nassert solution.getHappyString(9, 2) == \"ababababc\"\nassert solution.getHappyString(4, 23) == \"cbca\"\nassert solution.getHappyString(5, 39) == \"cacba\"\nassert solution.getHappyString(6, 10) == \"abcabc\"\nassert solution.getHappyString(9, 79) == \"abcabcbca\"\nassert solution.getHappyString(7, 74) == \"babcabc\"\nassert solution.getHappyString(9, 24) == \"ababcacbc\"\nassert solution.getHappyString(6, 43) == \"bacaca\"\nassert solution.getHappyString(7, 94) == \"bacbcac\"\nassert solution.getHappyString(5, 21) == \"bacab\"\nassert solution.getHappyString(4, 2) == \"abac\"\nassert solution.getHappyString(7, 16) == \"abacbcb\"\nassert solution.getHappyString(8, 87) == \"acacacba\"\nassert solution.getHappyString(5, 15) == \"acbca\"\nassert solution.getHappyString(2, 3) == \"ba\"\nassert solution.getHappyString(9, 12) == \"ababacacb\"\nassert solution.getHappyString(9, 40) == \"abacabcbc\"\nassert solution.getHappyString(6, 67) == \"cabaca\"\nassert solution.getHappyString(8, 44) == \"abcacacb\"\nassert solution.getHappyString(5, 35) == \"cabca\"\nassert solution.getHappyString(8, 52) == \"abcbabcb\"\nassert solution.getHappyString(8, 97) == \"acbababa\"\nassert solution.getHappyString(10, 91) == \"abacacbaca\"\nassert solution.getHappyString(9, 29) == \"ababcbcab\"\nassert solution.getHappyString(9, 79) == \"abcabcbca\"\nassert solution.getHappyString(5, 14) == \"acbac\"\nassert solution.getHappyString(10, 50) == \"ababcbabac\"\nassert solution.getHappyString(10, 16) == \"abababcbcb\"\nassert solution.getHappyString(10, 53) == \"ababcbacab\"\nassert solution.getHappyString(7, 87) == \"bacacba\"\nassert solution.getHappyString(8, 50) == \"abcbabac\"\nassert solution.getHappyString(7, 64) == \"acbcbcb\"\nassert solution.getHappyString(4, 10) == \"babc\"\nassert solution.getHappyString(2, 4) == \"bc\"\nassert solution.getHappyString(10, 86) == \"abacacacac\"\nassert solution.getHappyString(7, 57) == \"acbcaba\"\nassert solution.getHappyString(8, 48) == \"abcacbcb\"\nassert solution.getHappyString(9, 13) == \"ababacbab\"\nassert solution.getHappyString(9, 38) == \"abacabcac\"\nassert solution.getHappyString(9, 32) == \"ababcbcbc\"\nassert solution.getHappyString(1, 3) == \"c\"\nassert solution.getHappyString(6, 79) == \"cacbca\"\nassert solution.getHappyString(8, 91) == \"acacbaca\"\nassert solution.getHappyString(6, 90) == \"cbcabc\"\nassert solution.getHappyString(6, 67) == \"cabaca\"",
  "inefficient_solution": "class Solution:\n    def getHappyString(self, n: int, k: int) -> str:\n        def dfs(t, memo, count):\n            if len(t) == n:\n                ans.append(t)\n                return\n            for c in 'abc':\n                if t and t[-1] == c:\n                    continue\n                t2 = t + c\n                if t2 not in memo:\n                    memo[t2] = True\n                    dfs(t2, memo, count + 1)\n                else:\n                    dfs(t2, memo, count + 1 if memo[t2] else 0)\n                if memo[t2]:\n                    del memo[t2]\n            return\n\n        ans = []\n        memo = {}\n        dfs('', memo, 0)\n        return '' if len(ans) < k else ans[k - 1]\n\n        # Alternatively, we can use a list to store all happy strings\n        # def dfs(t, count):\n        #     if len(t) == n:\n        #         ans.append(t)\n        #         return\n        #     for c in 'abc':\n        #         if t and t[-1] == c:\n        #             continue\n        #         if count >= 10000:\n        #             continue\n        #         dfs(t + c, count + 1)\n        # ans = []\n        # dfs('')\n        # return '' if len(ans) < k else ans[k - 1]",
  "is_python": true
}