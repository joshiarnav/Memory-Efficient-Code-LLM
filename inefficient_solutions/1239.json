{
  "problem_idx": 1239,
  "task_name": "Maximum Length of a Concatenated String with Unique Characters",
  "markdown_description": "\nYou are given an array of strings `arr`. A string `s` is formed by the **concatenation** of a **subsequence** of `arr` that has **unique characters**.\n\n\nReturn *the **maximum** possible length* of `s`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [\"un\",\"iq\",\"ue\"]\n**Output:** 4\n**Explanation:** All the valid concatenations are:\n- \"\"\n- \"un\"\n- \"iq\"\n- \"ue\"\n- \"uniq\" (\"un\" + \"iq\")\n- \"ique\" (\"iq\" + \"ue\")\nMaximum length is 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [\"cha\",\"r\",\"act\",\"ers\"]\n**Output:** 6\n**Explanation:** Possible longest valid concatenations are \"chaers\" (\"cha\" + \"ers\") and \"acters\" (\"act\" + \"ers\").\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [\"abcdefghijklmnopqrstuvwxyz\"]\n**Output:** 26\n**Explanation:** The only string in arr has all 26 characters.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 16`\n* `1 <= arr[i].length <= 26`\n* `arr[i]` contains only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxLength(self, arr: List[str]) -> int:\n        ans = 0\n        masks = [0]\n        for s in arr:\n            mask = 0\n            for c in s:\n                i = ord(c) - ord('a')\n                if mask >> i & 1:\n                    mask = 0\n                    break\n                mask |= 1 << i\n            if mask == 0:\n                continue\n            for m in masks:\n                if m & mask == 0:\n                    masks.append(m | mask)\n                    ans = max(ans, (m | mask).bit_count())\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxLength(self, arr: List[str]) -> int:\n        ans = 0\n        masks = [0]\n        for s in arr:\n            mask = 0\n            for c in s:\n                i = ord(c) - ord('a')\n                if mask >> i & 1:\n                    mask = 0\n                    break\n                mask |= 1 << i\n            if mask == 0:\n                continue\n            for m in masks:\n                if m & mask == 0:\n                    masks.append(m | mask)\n                    ans = max(ans, (m | mask).bit_count())\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random arr list\n    arr = []\n    for _ in range(random.randint(1, 16)):\n        s = ''.join([chr(random.randint(ord('a'), ord('z'))) for _ in range(random.randint(1, 26))])\n        arr.append(s)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxLength(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxLength(arr) == expected_result\n        print(f\"assert solution.maxLength({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxLength({arr}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxLength(['znrheqetqbqxrzpbnpunq', 'ydiu', 'odnvscwxkyzlelbcpjcad', 'qasgrjmrpzjgykyzb', 'sgwbsjvhtzn', 'zsemt', 'knvaleejpijptfti', 'egrvnzsit', 'lnnafgukgnbch', 'lpade', 'yxgyfkt', 'jijgcd', 'nrrjtaodvjrpkenvntguk', 'zeyvxbunmbttuvkrr', 'liyq']) == 9\nassert solution.maxLength(['cgbikxvlblmcfl', 'xn', 'sitmeox', 'svwvjcjfobxibdqedfjfb', 'oztcioxmdlnrtyiqq', 'pwdysslggzgdamtwkyelbda', 'bkhmxd', 'vyufqmm', 'e', 'jrcr', 'ybvr', 'oqpokfsiiayvgsgew', 'sxnskqecvlnw', 'mywkhalglxyumialwkmbmkp', 'zpnbyjs']) == 11\nassert solution.maxLength(['fazmaeehak', 'itziiqcoaascuhnzxyst', 'qgskskpbyonmsgjgck', 'd', 'hiaeafdrhyugxircjegx', 'rig', 'iqbtetktjdqllec', 'ojkdfgfsjcmpjlr', 'snabjvjwhlzcusv']) == 4\nassert solution.maxLength(['zi']) == 2\nassert solution.maxLength(['uzpitqbwtjbetmtkap', 'ulrvgzolvvmd', 'rsjmv', 'gmiv', 'owjymodntlxjnpzjbhyhm', 'tuhxdujemagcjxegit', 'mydiaovwckqvoyeza', 'vfszbezczpvndysyetyzoft', 'lzpkglhfxpcwsgvxp', 'btnboiozysanuokcltgmd', 'vfgfimbfdqytmfo', 'zevifyeia', 'zwciuqafhufuqufb', 'lahcgbhvcfqbvf', 'kcmzvcmjynjpwm', 'qdmvdxkk']) == 5\nassert solution.maxLength(['zzptjperfyoyw', 'oxjmqluiiqvpj', 'cveckgoehznzgy', 'xqlcqtqhlkkowtticdhgub', 'ihnlcqxraepqc', 'jpiuxtwqphufgetklvflg', 'wvczzhnxfuoljxupj', 'afrexyyjvttrzdqiestl', 'dr', 'juyuhzvhcdisu']) == 2\nassert solution.maxLength(['eqebvokx', 'hpsopdpcwvicnfmlvloc', 'gaefrlvwkrokbe', 'manrloofojscqbmdlechoy', 'knxutxbnncofdfyt', 'fameqevbbglcr', 'htq', 'ayyterkucqcmkfguhuapyf', 'tlsjpqcd', 'psxkqzbepaabfkmvnfutv', 'oey']) == 11\nassert solution.maxLength(['c', 'nxkngjgd', 'dlbrdsnnjy', 'lfsbgi', 'ubnmbct', 'elbseugvqxi', 'xrmlfdldfmerfqsoogbtwac', 'amidzctcyr', 'ffkslpwgndinysirnxcsre', 'eirisxrorxkmw', 'egktyobccjullezycyrtoc', 'auceshmpresojfnzoqtixy', 'xxnouncikh', 'srbcbv', 'lyccoveobjgccuqpixicija']) == 7\nassert solution.maxLength(['hvvrwppadnrwmcrkisxnbjtfe', 'mjxijxqfefnlhxbviqnntxqala', 'blilvwlzpgjbrezvil', 'xd', 'wokgszfzcs']) == 2\nassert solution.maxLength(['xtbipimfafuyctvhd']) == 0\nassert solution.maxLength(['ovxqkqbkeams', 'wwnejemvjzlc', 'iobnjp']) == 6\nassert solution.maxLength(['pnvdxwunrjhjvyybrg', 'mclgt', 'wdltlsaxdaaragkrfadctv']) == 5\nassert solution.maxLength(['duatnkoqfdzxugmcrxru', 'nfltjkuexrjauje', 'bxkwwxfaqskjciuvg', 'saspt', 'pakmijsegouinpusga', 'ffkmicagvagikwxtpxijwl', 'mglcylnpzvxiafmgtivpnitd', 'ecdmvjwzyfvyjmhlsxcxijyp', 'tfcxn']) == 5\nassert solution.maxLength(['qfmeh', 'zjhqdmmoohivdncpqn', 'uumjokffp', 'l', 'fbxlsxunq', 'dfuwfjvagrbr', 'ynr', 'mgogexvkbwbrm', 'smdylkdryhdwefzfsvh', 'rafj', 'sdaehwup']) == 12\nassert solution.maxLength(['izeegoxizfsr', 'rhhr', 'vnvnwowbmm', 'fjarxnl', 'bzeglgoktcuesomuzi', 'iybjhhishrmazurxvgeaq', 'bkmcargpdkanlioqwwszjifun', 'rlcjyiynqigzfbubaveqraojbe', 'hycn', 'hdzxgqhivqlqf', 'vxfinjvbhphg', 'vahvvgoqdqmjxx', 'wuwjtdtqusvrqttbjxniqfluq']) == 7\nassert solution.maxLength(['wacjpjrgcwumzsjqci', 'sgdafuoapwfdnyhws', 'c', 'jdra', 'm', 'uexppxpbzbgwqf', 'xzmrtroxlsbqhykdobxgzrqhfd', 'fyiycuq', 'wmolsvopb', 'sezsakcbxcqkaueip', 'kkkaauzgxuchexcvmbcxoiq', 'eerjzzhueqjtwgokoisfdlagcx', 'y', 'a', 'tocnyf', 'mfpsz']) == 11\nassert solution.maxLength(['yikhgbuk', 'ubkfbjddpehfieraaibyeinl', 'tacsjvrqfwpcdxnfg', 'ftn', 'faconvqseinzaww', 'ziiqwlfwseistdrsthbsal', 'tfbp', 'bkohwglekykrotuidrw', 'm', 'jrpequtpevrkcu', 'eidrixbvinushcbuoqltf', 'cxynuttqbkwbfh', 'jnhffppparzqwbbdogihv', 'ttaziuigpsfjlrqirssqsmcqvf', 'dyorpcojakrdlych']) == 5\nassert solution.maxLength(['qvgsjntxjzecgnyryznilof', 'xexdzygxtpgjpttqdfuru', 'tykblwcmznmnotcxngbvpurt', 'msbaxqslmd', 'codotzczy', 'uuozqclpuapahk', 'crcobyznuaiqmqnagxnvtx', 'qhxwkxae', 'mjlcmjysfkmkiolkbqzxvx']) == 0\nassert solution.maxLength(['jlekzcrgmdlniu', 'suwvzvnehvsysulzqkfszqbt', 'slbltzrqofdlmkxdqfgbjxg', 'nwpqmaiwkyqqovjzxftjvwmmez', 'krpvkeogdpsxhuqtfhsxpoyszs']) == 0\nassert solution.maxLength(['rmxpbiccfqqbb', 'cqvxklaqwcumormhjr', 'lqbiyqzzphxvevgetxk', 'baogtmyvndaamyieeysc', 'fdrtptsmeplrfwsfdxtrm', 'plvnhghmphrdgwcccng', 'setdwvpi', 'nndaxswmyqrzryu', 'wugrtuybd', 'wr']) == 8\nassert solution.maxLength(['ewoomkcfvaxhqcgzmpogbrwxjw', 'rvurqhzaxepbtvd', 'lvlxliwfyvberlowxmswlxvebj', 'cgkqehlipyxoadzqoozcysyjxp', 'upbwirtojucjnhovklk', 'acrdzlepuqbeurvh', 'dqjaqdgvgldmw', 'lxskfzqoecglzsnicbjcb', 'ekiddb', 'fdxmgoujbfo', 'wzxvicxziblz']) == 0\nassert solution.maxLength(['zhesdktinnnjegdxgvzhfk', 'pofcfnsgtrhtvvvuhawwckf', 'jumqtdxeecaweoazfjjsnluz', 'twyuujfaiisslxuddmfafpcvb', 'zwmqwfoidlhjappnbhdlii', 'eunbgcbeifmnaatrszbf', 'uwsyszu', 'cwkralhlglfcfii', 'emssgkuhibxlnbigckowjf', 'oryevtfweswlphjwrgyrp', 'odhsewiwdmyqsanjjmkpqbta', 'ciaxrgeomahchjnsl', 'rcnpnicjkyhtrmsfia', 'ztbwicnmxtqoiivnjuqophve', 'dxnwkrbopanejwqlirgvhdwn', 'dbdeg']) == 0\nassert solution.maxLength(['cgzokpcst', 'rwfabffain']) == 0\nassert solution.maxLength(['iorzvippi']) == 0\nassert solution.maxLength(['x', 'xjgw']) == 4\nassert solution.maxLength(['qajsihohpyextlbxk', 'c', 'vvqsfjmkrlzoro', 'tth', 'siwynahaqqicqrbpkrwwnt']) == 1\nassert solution.maxLength(['pwwxojvdxqrrknvvcyzglv', 'uwokyuqgbzcmqhbdghbtuveczl', 'thbwi', 'o', 'fzeqbgwywxfrtqwo', 'm', 'ubtmywvzmm', 'n', 'j', 'gojyvwwsmuj', 'fiezvctdywb', 'nwjgugafgmyd', 'mggyqnetjf']) == 15\nassert solution.maxLength(['nsfrvkqkjgroui', 'zzntlvbxsu', 'hnsleiso', 'cirakmqaarhzlfwevgmmqobsof']) == 0\nassert solution.maxLength(['dvxcchjqdraqnm']) == 0\nassert solution.maxLength(['muvxtkinfuptwwhagjldmsdm', 'apvqjnhubmbgaye', 'tpkzcnnp', 'uugoikczfvbadhkete', 'fgqw', 'kfeqstnnodtwcqkurq', 'gxdfrphunsttq', 'nmxifupy', 'qesjqqzumchgfs', 'gudzdlpkbamhzjnl', 'xlz', 'lbbmocwydnb', 'ccolfzxotankul', 'ahaafufqphatcr', 'kqwr', 'geekydccnvgx']) == 12\nassert solution.maxLength(['xtg', 'iaajubklju', 'gbrnqvuytvoqjvnhsxuuoacnrz', 'cbcbnsyfojwhwbejnylqeub', 'yw', 'whfjqzny']) == 11\nassert solution.maxLength(['qjbzftgw', 'amrszpyqdtu', 'bqbfb', 'jcyeiutdcjnmenlevho']) == 11\nassert solution.maxLength(['dusdbbewxwcuaydouxuy', 'mlzim', 'qkmgvvmquhxroofarmsthxv', 'xecwxty', 'x', 'rq', 'mrrnvnq', 'omhqoppwkympurgpyd', 'ljhvpozxqvxpyslvwujo', 'dwyzpsod', 'awemplfbh', 'aevxkurh', 'yizzsvc', 'wccqahnzvt', 'jnbyskymnmnkjnic', 'dgrxomztvtkq']) == 12\nassert solution.maxLength(['hqfdpzvvcscydeijmohal', 'geitjvkhmzngiyccn', 'wuubbageujudfywlftolop', 'zxwkhvzjippfllytf', 'vedfietflhkpjqdo', 'tkcxfcudif', 'fgjxqzxobueiombohghy', 'bpzeqvz', 'zbsqq', 'ar', 'nrqntjubzmry', 'qeorycwlum', 'sxpsqnmhiaq']) == 10\nassert solution.maxLength(['youlgorsjuiy', 'vxdiaxzmtbzwwsgcpoq', 'mitfiq', 'oxfzivzkgwjikwevmsekl', 'slbrwg', 'g', 'zpnyyorasbxd', 'fpndymepldp', 'zdfiihnwzptmzpfmcgwgwrm', 'zuwlllbcoorjam', 'egppprfdvnixjyhnselcxfw', 'aykhjsqfajnkltrgd']) == 6\nassert solution.maxLength(['ifhuwzhzfxgw', 'tubvlvrwchypc', 'yoxsxjmk', 'agcqszkc', 'yhgmqhkfwvneqwxzlm', 'tcyiqxzwqhndtdyubpsvs']) == 0\nassert solution.maxLength(['olsjxhqsudozdqpytxzf', 'fqzwfedvrtsarehgl', 'ickxzbibqalugdrqentqnr', 'n', 'bokieutwbnrxkmgzh', 'mxprxhdqiilpqqquuvfusecn', 'n', 'u', 'asukieavkqlpivudfzkhgisci', 'mcrqfewiagwcaafmiaizvv', 'mswwqf', 'aigs', 'x', 'xwbwsvrucyqhypqkr']) == 7\nassert solution.maxLength(['njbygdvzwbdogaefbn', 'utoobksjyaylyylrz', 'zioxecti', 'hjmzxskhysnanjpbmiclgfbk', 'xtnylyunzxsjn']) == 0\nassert solution.maxLength(['sq', 'kcfjqympejbfrygvvrmepuvif', 'drojxezva', 'qmm', 'bnkzlsusewsfdwhwrw', 'kpxmytpdwmxhfxrcwgy', 'anmeyxryr', 'kgpkocixrqkkbolshjmjwdungn', 'cgq', 'suzlmld', 'zlqgihmaawphf', 'prhzjgjurdqshdjnr', 'wulhjz', 'ehgutxyuibnphixkyivwp', 'p']) == 13\nassert solution.maxLength(['yibvhpjugvm', 'tlvwdf', 'kniw', 'jyvsnzlkdobklaibn', 'hjavkmaq', 'zuhmswo', 'sirrzxhrnwo', 'xgstx', 'ywdxdtyffojgxoci', 'eshreytiklvan', 'nutrxvlkqunfbegubojgh', 'cuaxomwdslkwsdie', 'pfaqwsuucbmvn']) == 7\nassert solution.maxLength(['fvbceylkdlvsmsccyndfdv', 'drdy', 'nhhirlmohdaqbfd', 'bkckusowufjv', 'pc', 'gprrrvtcvdh', 'opvzbhbcsq']) == 2\nassert solution.maxLength(['hotvftr']) == 0\nassert solution.maxLength(['cqijsdmvvodvf']) == 0\nassert solution.maxLength(['mcgdifhsaegefibb', 'fvwokbtfjjjbccyhvwqph']) == 0\nassert solution.maxLength(['htqtkq', 'izkaicrmy', 'vee', 'kdwjekudsjtnabxrqmt', 'jihxtruowahcdatndxewxaml']) == 0\nassert solution.maxLength(['hw', 'ocbctdmwvdmivifd', 'fasdmorthyer', 'wm', 'bqaikorqtchpktzxb', 'oukz', 'crsfrzrjllzclbpmjgcnalorcc', 'u', 'jbky', 'brfctmrbxyrpmcppy']) == 7\nassert solution.maxLength(['mlbwsoya', 'sofdwpapsofp', 'ojlqvtzaeveq', 'typaygwvzilxrtvym', 'xp', 'asvldncnvuptrbvuqbzp', 'utwvexyfuuhlsbnlzuhqdziy', 'fskcpebcamllxsmnfrxbrohaij', 'lkygqtryztujpdhnajon', 'bzxhibrzhguii']) == 10\nassert solution.maxLength(['hgevwscamzilluvskhmxpvgq', 'giryawosigutdytwekpqkytp', 'vrrmimpsoilkarzu', 'ar', 'zcdb', 'kezi', 'pplouabvdcpxmmzjopkjzaqztp', 'anknswkaamzrkrphgt', 'hwxvttgarzjticjq', 'xsaeujpdmk', 'kwrvmlwuxd', 'dybumhv']) == 13\nassert solution.maxLength(['mgndyuvcgcxig', 'fprspdwhnqhglczkywdafmr', 'miiqwee', 'gxn', 'rrafwydhwfghrconmqmgzm', 'srynhnfq', 'qhtudcbhnfomzveqm', 'iqwmwjs', 'udcqq']) == 3\nassert solution.maxLength(['qxybg', 'cgru', 'grsvhvqfpmtfuogjlsrpkusdk', 'dioxiuugrnqlloamnhiyynerp', 'nxbitonuquzsezxpihkz', 'cqpagdjdewrjfcyfudbrlef', 'uarcoocdsebjyitp', 'z', 'xieydqhnbykedwantujf', 'toqdmmdvrnrlhrun', 'sqfyrbzmhxqgxoig', 'dossixcd', 'xkvowck']) == 6\nassert solution.maxLength(['qmwhkoofm', 'aaemlalkgx', 'f', 'obalhkjki', 'qtmgrqgxp', 'mtgjxwkhxbwabxarwyv', 'dnqrbphhfflyotqbsuzuv', 'dqzdjxjcyacwmvsdplmrqtnt', 'wsdlghuuw', 'sm', 'xqkzvfcutvivzxkg', 'kjx', 'nejuzffwskuklynf', 'gpfv', 'vzgqvrqma', 'fct']) == 9\nassert solution.maxLength(['is', 'pjfdszifksdlziwgess', 'arkxunfxstuxtckponefnvoyu', 'pllyyzaudzneg', 'yauybketfighmhckv', 'kubhzeblihmyyjcjxessul', 'jsbtk', 'aoxamojgg', 'mdjynoj', 'm', 'hlabfzqjvktag', 'xdbvtctcrebambsymevifujej', 'gtitjnjrwhctzvetgsfneh', 'skzbsacwfmdeupylrdz']) == 6\nassert solution.maxLength(['slokjcssmb', 'yagfptkbmztngrs', 'keupbyqacpsxd', 'ilhkxfwzjrmatvozueih', 'mluvzvmmnonbnpimmdtlxj', 'n', 'imuglemnahstin', 'dgahedcziaaeqovlpxktnytdgn']) == 1\nassert solution.maxLength(['rudmrkdldgqxc', 'h', 'gyruoupbqsnrgqstwsdwpahuc', 'mmbdlrn']) == 1\nassert solution.maxLength(['vme', 'uwoscnak', 'lht', 'befbfmwvhndmdnqkxzal', 'fbvchfkwivrguqgjurxzgkay', 'iksgmixdutyoucpdmbyz', 'xaah', 'bnekrbnevmczchz', 'wc', 'ckzfqdzcwxpvbznz', 'yjeu', 'gku', 'arsxhgfp', 'erd']) == 14\nassert solution.maxLength(['dtsvodoeqcnxkroc', 'uunyeuyruwu', 'ngwhseovlvkawcf', 'lwjwifzswj', 'ousmohmbxuljsx', 'wztdbzkubd', 'wguhkeiwxywke', 'opyyqexucttcdvvfjhulbfs', 'mv', 'zrkmtdgvinql', 'wvzpfkgiegzcxfzsktxo']) == 12\nassert solution.maxLength(['gfrkkhyncnkimacldyztlhgs', 'vqxjwjxbvzgxif', 'gcmdhzgtetoqczdwz', 'fkcw', 'egqgepqhnhqsknttravoebqvt', 'mcmpyzyzkwygwpfyyukdpgmd', 'krhtggygerxdvqkmenummkefiv', 'lxdpd']) == 4\nassert solution.maxLength(['iumalubcssgbelpcqi', 'ylydvi']) == 0\nassert solution.maxLength(['ugmnnvhvanbxmwurfvm', 'reowubbnwnjyupklmxpnyyiiz', 'plscxzepa', 'tunfolmkskyrimgrtu', 'cfmsqewvdesedfmirrx', 'qzaupvljtdqwoylwt']) == 0\nassert solution.maxLength(['qqmyhuhdgzuchshgq', 'dgdlaaucn', 'xdeqxhydspyzpobgovaxof', 'kprnfit', 'gscm', 'ltxhractaiyafuycmyvflvbeg', 'asgqxiv', 'oapjvcbtrjjpdkksz', 'maxmnljqeamahtx']) == 11\nassert solution.maxLength(['zwkvbdrnyuvxznmplxojrkzaxj', 'ykiheacgtkaajmbsgoha', 'jycobx', 'vqjtqdxrkclgkporeoks', 'pomdaapdqpq', 'pjwjqwgzgvwoevbomdonwfjicq', 'vfyjjsvevmgqt', 'esej', 'vemm', 'chmvbkbryf', 'srkyreoqzqbtjq', 'yhal']) == 6\nassert solution.maxLength(['hkgtjqvzabq', 'g', 'gozqdoojbkxhcmlbsrpkml', 'hvbtwdaatfhqxpmlftodoijgdz', 'q', 'feeg', 'drdclsivlpexgvb', 'blcpkvvjnw', 'nsnvpemxemxudwbwrvrw', 'gfckjhglcxeczkfac', 'xgyk']) == 5\nassert solution.maxLength(['akzhvuwigzritzxorlylk', 'dcowhjosuixfpboniiedlphc', 'qv', 'syziuucjjygrlbqyoyqjnzvfm', 'mlimvfoas', 'fzrbuphk', 'oynsxilcflk', 'sdq', 'qylggrvf', 'nxiaztzzbhg', 'ksaadpzddoiyiphvon', 'ygvdhbqyoouuddtsmvczpnc', 'cu', 'c', 'mlygahwkjwptn', 'ikrezdlphvgigfrjmiqytl']) == 12\nassert solution.maxLength(['wnlmwpamqltjdwrvkszmpnypii', 'beusghkvjvg', 'cuzimybh', 'mtysbcl', 'hhvvkpampcegtkgj', 'abgzzyzgwd', 'kafjswpboblmfxuana', 'qkugofteohjwqnckyjoe', 'syxpgfumxrvtoqnrjiuuqalcyr', 'qoftiiwyyjbswiypqtvhtebtp', 'anrpshohw']) == 8\nassert solution.maxLength(['uunnkstyr', 'neamkp']) == 6\nassert solution.maxLength(['nvtzoxsvbqu', 'gm']) == 2\nassert solution.maxLength(['heyxgolgxbtgftjeuynolciqe', 'skrrpybgt', 'nj', 'uadnseume', 'mmlmfaatkqaomsenqhnx', 'cupttmywqpozgxariuanvhm', 'nya', 'nkyrxdanybztvmsiszyhmn', 'lbzsepbrtfxsyyqbvoyzi', 'vjwvzq', 'vybrriuz', 'qofchuf', 'kwiozzpnauqjzxvvm', 'lhqhjvepqdfibxxboqr']) == 3\nassert solution.maxLength(['fpdflyljajtpbqpulhap', 'ruaodpziuyndvtv', 'nlxbhlnecdzhvzkk', 'xcnokelx', 'allwfbyqdetyyjaj']) == 0\nassert solution.maxLength(['ajbxcavialilhmgxbwt', 'clpawfcj', 'dgowv', 'ujjwpxtwkwte', 'zlsmo', 'jmmavqcwggeulqvrksjnnvmv', 'dvqihwmcqiohopjkgvihgonjh', 'frszodrb', 'esgyfsuhxs', 'akiykklaqfqhmpuag', 'smcmcmermmgbctbarwvhbwllrm', 'nxktcpcfyqb', 'hipkdbgiyx', 'rjnjhxzyrnltdacvsowa', 'mkxnlgrukszyyxnufc']) == 5\nassert solution.maxLength(['adeiaceibnjyobw', 'ewmvzwkccjwcoqnzporjcliguu', 'kseizrgaqdhtglpbwknevwkdn', 'trmmwruwpfvdketn', 'qvnim', 'sccjybqnbqhm', 'xwlfpoj', 'jliwkbl', 'sanr', 'krczawrnbaqnhmsovkkjyvt', 'kzypldzqwwfvghca', 'vzwrndbeachdbrvqpile', 'qzzxhrycefeegjxt', 'xudbmklgj', 'onsugw']) == 13\nassert solution.maxLength(['thkuzefdnhipqzxlwhbvfswnc', 'ypbcntqrwzxqowcqyarmgqngri', 'ktrmjmdtedopwshuae', 'ephtxccdihvivywqvsnwrlaqln', 'gdqyvojsoxcnsweantrxl', 'yexhvjdefll', 'dicuytf', 'gognrpkrexpcgq', 'uqvyyfuuiliwmp', 'ugebljnedizjsjyuw', 'zwzz', 'aexwuoorqngupadistsf', 'ujnfjpmelxcbsfhwtxz', 'pfdtctgvmmhjkrphax', 'mfuvdtbbzkj', 'x']) == 8\nassert solution.maxLength(['jk', 'oabzfgguewkm', 'cnyvsexuox', 'mpxlrefglcdqe', 'gfcrtrxqjyiotxbaym', 'edghdpggqeoxlacp', 'ln', 'umxglvvezkzde', 'uomkcfjzlukru', 'qvsjhtvipknynpn', 'chvmoxmmlhziivpe', 'qqyqtrbjx', 'gdlyyg']) == 4\nassert solution.maxLength(['hdxcsmjuuraisghtabvirwax', 'tnmbozfcpo', 'txtcasycmcszuvqnjke', 'zfxbmtblk', 'pgzrsaofnbgxw', 'mcwrpstjmuxzygfnrohf', 'mgbxkmlosubkohblrqmzuwc', 'uclzmjgxkfgnyokek', 'puoskrrtijhzgsegbxmba', 'jeezlvrvcnxsxdiimwefywtlwo']) == 0\nassert solution.maxLength(['izxgzjumvzbjlheftwgctmlyn', 'ppipemvzvgitimabf', 'sistqvelfknauiqrwzmqn', 'zakhjneak']) == 0\nassert solution.maxLength(['gndagpiqfszilq', 'zcogaetoxpmqeejf', 'muc', 'fjojv', 'jxhmwrpuvosvphcgbfkrbvmif', 'rciajzswakguxi', 'whrneaqyvwbnkjjxtzj', 'djst', 'cvnnfqoyugfwqikj', 'xcscwdzkugnikinsjxgcktk', 'hto', 'eblybxdejqsmrmxqgdj', 'svv', 'klfiskcxyjftipgbetkibaqk', 'xgkmmrqzqtgornpy']) == 7\nassert solution.maxLength(['syjpuxldzqvokjakxgqzlu', 'enbt', 'vahagqdzmyvvdsil', 'dueheqnj', 'jizkrfr', 'lmbftacmbd', 'krhkploahi', 'worrmigjinuevkhkfaoswdf', 'uctfeptx']) == 4\nassert solution.maxLength(['kpswcjfhciilbbnws', 'cfybzdjjrfesocrp', 'ycndoqhhkohjjki', 'haeymvx', 'hgxtgdzb', 'adsukawtpneqngzspq', 'dpvhmtclzk', 'xknbhxotzzxapsis', 'mbbkmlpquuzqy', 'b', 'mtxhgzutspka', 'mgojq', 'evhl']) == 11\nassert solution.maxLength(['zgdkbesuzfppizuhmqmlza', 'jmsnjlzydzyfkr', 'iasij', 'ntetkogzrecfgdmewnk', 'wysfqridrsoqynuzededyzae']) == 0\nassert solution.maxLength(['texxoilukr', 'qgor', 'xzgjqgh', 'gu', 'twgzoswub', 'pwgpz', 'dgicukanygjyvwlw', 'hdiwpzgezlxmoc']) == 4\nassert solution.maxLength(['tzoopymsfreqrdoeecjlnabp', 'esqmpqznvufw', 'lnklyinyhfvmwbitnbmflogzp', 'vkncjcuywjs', 'mnwrfifytdcnrnvbld', 'p', 'cmvlrbolomhualiqefq', 'trhgggskrcwhhiklxdbhwrbj', 'u', 'kntsavipjbutjfpevo']) == 2\nassert solution.maxLength(['vanregidxydfzrlrzdpjk']) == 0\nassert solution.maxLength(['vxtelvsd', 'qwqxszqlf']) == 0\nassert solution.maxLength(['qaeyvkcxx', 'cau']) == 3\nassert solution.maxLength(['zr', 'vrrqazi', 'obfzfdcgapbikeury', 'vjqgpnqdtotbxpd', 'dycketswxzcngoobqxl', 'zrtviwowtlokx', 'fwx', 'swnltltpx', 'lpu', 'tnfkqevsffswc', 'rvkvdkcwfgtk', 'behmydlnkbiie', 'efnjtmt', 'iqtenv', 'g', 'kfubcltjnsncuikqqgugxuor']) == 15\nassert solution.maxLength(['cxypuvuwkiqdmglkgkh', 'mgoaqvyebopshnpijdbsya', 'mpivknya', 'gapyetdmuyvzinpgoatk', 'obsevyyvrt', 'w', 'vtbcuovwwmgoaicmzpbympmkgc', 'qfjeylwkeorwbkqsbkmuxmfwqc', 'sfhnrxlkothdywftwj', 'zvmdummysfxlwdsyrxz', 'nwyqstyciqgnawzwvcnprr', 'bebqrakdtosxajtxdwp', 'umjszcezseeihpd', 'uqrfjfzhz', 'fxxzxyvdmtsflvidtgpascp']) == 9\nassert solution.maxLength(['ll', 'g', 'uilmfcqytymjmpbzgfwe', 'gvkof', 'xem', 'bnj', 'ucauhhlkob', 'nvmar', 'grdfpsqqwrgvvnq', 'c', 'erszmdmuclrizaaf', 'jvtjpcuwepxbqslbioraogm', 'cbgxdtoeweypfrn']) == 12\nassert solution.maxLength(['gytfotzutvlill', 'ogqgzyxqjzzprkjxusnv', 'aorfs', 'fjykcciyatxkyntwfcbhbzqlve', 'fidzosfr', 't', 's', 'pdxtgsqplqqkadebbp', 'veugqavuxzbyihshbcsthnnyc', 'bwsxmyzcgladlluwpvizmchi', 'agi', 'wuilwwgfhcgiownvtwtdyzfh', 'erpglf', 'qj']) == 10\nassert solution.maxLength(['nucgosznfimuawlvt', 'wtuuhhkk', 'azdsgiwhsvchacqnabssgk', 'qtahkldodbe', 'pdbcuvkfqblgsmlkzcipkro', 'rshndigdyovkt', 'mtuhfunyxw', 'cbekiirx', 'pdpmkmvpnckbjnzmz', 'hhtwovjktwqyctvxei', 'apuqzzbtsttslbmrgqlmipqdsh', 'yamaeylpycmqrprpaiarpsik', 'wlvlqcamrvcvl', 'cvpbtja', 'ysizxvmrwvfwrjacvuhipjm']) == 7\nassert solution.maxLength(['v', 'uelecuxc', 'mfgcdvlbnsoghcheo', 'dlqskovjnfkweclvw', 'cdqlidnkqvfafqtrfxn', 'jgdynduqnzknwstlgcnxjg', 'fhflljzxoofjxtma', 'jxafzzhrmobfhhrpudxuw']) == 1\nassert solution.maxLength(['dbiqufumebgcoctx', 'm', 'aiisexfqofqgjoucynedqq', 'bucewoptsxlipnyw']) == 1\nassert solution.maxLength(['l', 'pdifpukpesbsm', 'tddmjilzoildlnf', 'boizajltn', 'ishomvfnvc', 'nt', 'vvxpijvrqvpsexlnomismrxwmf', 'exqftjuudrrfrn', 'yazugofvtfobmylpzpfbjne', 'wburfbtpjyuaqugakehtuhjkvg', 'flthulfoafgajxs', 'hnollavv', 'fccbbaiejnsuvplnkjan', 'wdvtns', 'ywvudiv', 'pqwqxxafawhhmyjuofqpiw']) == 9\nassert solution.maxLength(['afpdojusf', 'ydertazcxdntvrvk', 'expamopobdj', 'heecqfqauanzpm', 'fxjcxffulibzfcmdaadzjrusu', 'xcsmydadmhmitfbph', 'd']) == 1\nassert solution.maxLength(['fyxvbnxpvfwsjdzziyrrtcqukd']) == 0\nassert solution.maxLength(['apsdpeggvnhwqyqhz', 'c', 'eienypjpae', 'dnsetlrpeigertdphwnmpd', 'zykkfve', 'vrucqiojzrrsasqhssns', 'uxveejtbfeuecgzsojktxzwgvg', 'qifcsyropcxkqbfp', 'frnvilbghtldvljutmj', 'gunbdlfpfeon', 'fueotqegrl', 'eddibfy', 'macaejzsmdfwqexem', 't', 'ebjaqeunfnrqboznwspxu', 'vlrofichm']) == 10\nassert solution.maxLength(['woetennpqlyoydhgwizlvf', 'icegolwcppigtohpbrgod', 'tpiv', 'kluikkiadcfqzrfkooyfapsg', 'vsiuonthpmfcclzcv', 'sfpfrkuigsgiufv', 'ryrqskmbolixqdnbitgbtpoir', 'rcnjvjbwglnxmtsw', 'mrdpzdf', 'doyybwowqzywq', 'pz', 'szwufykismzfqtdhmpk', 'dsfzhaprnxmqjjupqegeyvk', 'txky', 'wkkccmwsawmidevlkxoy', 'bic']) == 9\nassert solution.maxLength(['sqicb']) == 5\nassert solution.maxLength(['uravappfbtzllzrtztjwk', 'rpkqezx', 'xvruialxu', 'ahcsyexpsfyeqzusxi', 'efyuyfjcsmvkmdpdmsvhbvrb', 'snzzb', 'nighgpfcocxoghl', 'xxudhpfpjwfrgurrdnqgr', 'jttdsrnbflb', 'hltehziharouzxogqmmrx']) == 7\nassert solution.maxLength(['ww', 'lqsrgllom', 'he', 'gamtplkabo', 'vjbfaeccsm', 'zqgjytbtrmcooxkwfbowuxe', 'efqoeowdbqclceruassgsrmg', 'dtfougipmyxxfdc', 'okojppfhdqxnsuvkiquei', 'deedqdtckjxko', 'rqcyhkfidencyee', 'hdbxwuyoeyhzekheugqocbfnyu']) == 2\nassert solution.maxLength(['nkjmntcorvlxphlria', 'jiparabdlz', 'yropecjagbbqiqcoov', 'avdvrfbqra', 'pmbhwweruze', 'pzumj', 'b', 'jarglxg', 'vechshuvoc']) == 6\nassert solution.maxLength(['xqxbxqtbldleug', 'otviipinlneixpqoyxiadks', 'avavmfhig', 'gyxatoocqzgnwsswrb', 'tgobwyettpbnvownbwaspdrskl', 'xdekqbwsbn', 'vgrvotcthahenbbhjlncg']) == 0",
  "inefficient_solution": "class Solution:\n    def maxLength(self, arr: List[str]) -> int:\n        ans = 0\n        masks = [0]\n        for s in arr:\n            mask = 0\n            chars = list(s)\n            for c in chars[:]:\n                i = ord(c) - ord('a')\n                if mask >> i & 1:\n                    chars.remove(c)\n                else:\n                    mask |= 1 << i\n            if not chars:\n                continue\n            new_nums = []\n            for m in masks:\n                new_nums.append(m << len(chars))\n            for m in new_nums:\n                for c in chars:\n                    i = ord(c) - ord('a')\n                    m |= 1 << i\n                masks.append(m)\n                ans = max(ans, m.bit_count())\n        return ans",
  "is_python": true
}