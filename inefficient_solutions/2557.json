{
  "problem_idx": 2557,
  "task_name": "Maximum Number of Integers to Choose From a Range II",
  "markdown_description": "\nYou are given an integer array `banned` and two integers `n` and `maxSum`. You are choosing some number of integers following the below rules:\n\n\n* The chosen integers have to be in the range `[1, n]`.\n* Each integer can be chosen **at most once**.\n* The chosen integers should not be in the array `banned`.\n* The sum of the chosen integers should not exceed `maxSum`.\n\n\nReturn *the **maximum** number of integers you can choose following the mentioned rules*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** banned = [1,4,6], n = 6, maxSum = 4\n**Output:** 1\n**Explanation:** You can choose the integer 3.\n3 is in the range [1, 6], and do not appear in banned. The sum of the chosen integers is 3, which does not exceed maxSum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** banned = [4,3,5,6], n = 7, maxSum = 18\n**Output:** 3\n**Explanation:** You can choose the integers 1, 2, and 7.\nAll these integers are in the range [1, 7], all do not appear in banned, and their sum is 18, which does not exceed maxSum.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= banned.length <= 105`\n* `1 <= banned[i] <= n <= 109`\n* `1 <= maxSum <= 1015`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        banned.extend([0, n + 1])\n        ban = sorted(set(banned))\n        ans = 0\n        for i, j in pairwise(ban):\n            left, right = 0, j - i - 1\n            while left < right:\n                mid = (left + right + 1) >> 1\n                if (i + 1 + i + mid) * mid // 2 <= maxSum:\n                    left = mid\n                else:\n                    right = mid - 1\n            ans += left\n            maxSum -= (i + 1 + i + left) * left // 2\n            if maxSum <= 0:\n                break\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        banned.extend([0, n + 1])\n        ban = sorted(set(banned))\n        ans = 0\n        for i, j in pairwise(ban):\n            left, right = 0, j - i - 1\n            while left < right:\n                mid = (left + right + 1) >> 1\n                if (i + 1 + i + mid) * mid // 2 <= maxSum:\n                    left = mid\n                else:\n                    right = mid - 1\n            ans += left\n            maxSum -= (i + 1 + i + left) * left // 2\n            if maxSum <= 0:\n                break\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random banned list\n    banned = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Generate random n and maxSum\n    n = random.randint(1, 101)\n    maxSum = random.randint(1, 10001)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxCount(banned, n, maxSum)\n\n    return banned, n, maxSum, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        banned, n, maxSum, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxCount(banned, n, maxSum) == expected_result\n        print(f\"assert solution.maxCount({banned}, {n}, {maxSum}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxCount({banned}, {n}, {maxSum}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxCount([39, 64, 51, 53, 85, 49, 22, 20, 0, 20, 0, 20], 19, 4800) == 77\nassert solution.maxCount([28, 76, 0, 73, 0, 73], 72, 3197) == 73\nassert solution.maxCount([7, 75, 41, 21, 10, 78, 58, 8, 54, 45, 0, 30, 0, 30], 29, 6089) == 67\nassert solution.maxCount([55, 0, 37, 0, 37], 36, 8029) == 53\nassert solution.maxCount([18, 58, 57, 21, 52, 34, 44, 82, 93, 0, 81, 0, 81], 80, 931) == 41\nassert solution.maxCount([68, 47, 1, 90, 27, 61, 18, 0, 8, 0, 8], 7, 2849) == 70\nassert solution.maxCount([35, 0, 52, 0, 52], 51, 5868) == 50\nassert solution.maxCount([93, 100, 68, 0, 102, 0, 102], 101, 4379) == 92\nassert solution.maxCount([25, 91, 81, 28, 33, 75, 69, 38, 97, 53, 0, 101, 0, 101], 100, 9275) == 90\nassert solution.maxCount([82, 80, 47, 78, 66, 48, 65, 20, 0, 77, 0, 77], 76, 4238) == 73\nassert solution.maxCount([28, 45, 60, 8, 78, 61, 31, 0, 94, 0, 94], 93, 1825) == 57\nassert solution.maxCount([99, 80, 29, 0, 74, 0, 74], 73, 143) == 16\nassert solution.maxCount([12, 9, 37, 40, 57, 99, 34, 86, 69, 96, 0, 56, 0, 56], 55, 1972) == 59\nassert solution.maxCount([85, 28, 70, 96, 10, 46, 0, 56, 0, 56], 55, 2788) == 71\nassert solution.maxCount([48, 38, 21, 45, 70, 19, 61, 98, 6, 8, 0, 60, 0, 60], 59, 9445) == 87\nassert solution.maxCount([46, 52, 15, 12, 51, 79, 59, 0, 11, 0, 11], 10, 4069) == 71\nassert solution.maxCount([83, 37, 70, 9, 11, 97, 23, 80, 84, 0, 17, 0, 17], 16, 1596) == 52\nassert solution.maxCount([74, 96, 50, 35, 26, 8, 0, 52, 0, 52], 51, 9932) == 89\nassert solution.maxCount([36, 18, 98, 72, 68, 0, 92, 0, 92], 91, 9214) == 92\nassert solution.maxCount([31, 49, 19, 83, 80, 69, 73, 55, 0, 45, 0, 45], 44, 1939) == 59\nassert solution.maxCount([41, 19, 98, 87, 36, 0, 70, 0, 70], 69, 5807) == 92\nassert solution.maxCount([37, 6, 92, 4, 48, 41, 43, 66, 100, 0, 28, 0, 28], 27, 8437) == 90\nassert solution.maxCount([71, 92, 72, 79, 98, 35, 0, 48, 0, 48], 47, 9103) == 91\nassert solution.maxCount([63, 61, 76, 24, 51, 0, 67, 0, 67], 66, 2391) == 67\nassert solution.maxCount([74, 17, 75, 98, 35, 36, 58, 26, 68, 10, 0, 8, 0, 8], 7, 8327) == 87\nassert solution.maxCount([11, 92, 59, 37, 69, 72, 67, 0, 71, 0, 71], 70, 512) == 30\nassert solution.maxCount([36, 19, 85, 53, 23, 0, 84, 0, 84], 83, 534) == 31\nassert solution.maxCount([27, 59, 86, 55, 42, 0, 16, 0, 16], 15, 5496) == 80\nassert solution.maxCount([70, 46, 97, 56, 16, 0, 73, 0, 73], 72, 2078) == 62\nassert solution.maxCount([87, 2, 51, 0, 82, 0, 82], 81, 7849) == 83\nassert solution.maxCount([60, 79, 69, 98, 19, 31, 30, 96, 70, 0, 29, 0, 29], 28, 4852) == 88\nassert solution.maxCount([3, 1, 66, 0, 32, 0, 32], 31, 2336) == 62\nassert solution.maxCount([29, 35, 0, 75, 0, 75], 74, 1130) == 46\nassert solution.maxCount([13, 0, 81, 0, 81], 80, 3056) == 76\nassert solution.maxCount([86, 24, 19, 95, 98, 64, 62, 54, 0, 76, 0, 76], 75, 989) == 42\nassert solution.maxCount([54, 51, 49, 32, 61, 89, 30, 94, 99, 8, 0, 39, 0, 39], 38, 5734) == 88\nassert solution.maxCount([46, 86, 80, 7, 0, 49, 0, 49], 48, 49) == 9\nassert solution.maxCount([86, 63, 12, 96, 91, 0, 82, 0, 82], 81, 7142) == 90\nassert solution.maxCount([20, 30, 98, 22, 75, 73, 82, 80, 0, 21, 0, 21], 20, 2105) == 61\nassert solution.maxCount([9, 77, 10, 99, 64, 55, 66, 0, 92, 0, 92], 91, 3943) == 85\nassert solution.maxCount([73, 30, 55, 98, 34, 82, 43, 46, 0, 48, 0, 48], 47, 5338) == 89\nassert solution.maxCount([69, 0, 53, 0, 53], 52, 138) == 16\nassert solution.maxCount([13, 1, 84, 34, 21, 56, 60, 0, 53, 0, 53], 52, 3539) == 76\nassert solution.maxCount([79, 36, 81, 33, 63, 15, 0, 32, 0, 32], 31, 8778) == 74\nassert solution.maxCount([15, 0, 91, 0, 91], 90, 7066) == 89\nassert solution.maxCount([19, 69, 72, 26, 8, 60, 0, 2, 0, 2], 1, 641) == 32\nassert solution.maxCount([71, 58, 25, 74, 44, 97, 31, 0, 68, 0, 68], 67, 9573) == 89\nassert solution.maxCount([38, 63, 96, 8, 36, 94, 91, 60, 32, 42, 0, 92, 0, 92], 91, 3250) == 76\nassert solution.maxCount([12, 8, 56, 97, 7, 90, 0, 26, 0, 26], 25, 1879) == 57\nassert solution.maxCount([35, 0, 52, 0, 52], 51, 9061) == 50\nassert solution.maxCount([48, 79, 6, 76, 60, 52, 30, 28, 0, 12, 0, 12], 11, 5813) == 70\nassert solution.maxCount([11, 20, 10, 0, 96, 0, 96], 95, 5682) == 92\nassert solution.maxCount([89, 80, 74, 12, 62, 5, 56, 96, 72, 0, 32, 0, 32], 31, 7605) == 86\nassert solution.maxCount([36, 4, 83, 78, 55, 94, 59, 100, 0, 23, 0, 23], 22, 7928) == 91\nassert solution.maxCount([93, 91, 1, 78, 5, 86, 57, 2, 30, 14, 0, 16, 0, 16], 15, 2013) == 57\nassert solution.maxCount([25, 58, 86, 62, 80, 0, 52, 0, 52], 51, 588) == 33\nassert solution.maxCount([11, 90, 25, 19, 13, 4, 59, 75, 29, 0, 7, 0, 7], 6, 3318) == 74\nassert solution.maxCount([65, 49, 33, 79, 47, 0, 41, 0, 41], 40, 5596) == 73\nassert solution.maxCount([96, 59, 71, 31, 55, 26, 28, 0, 25, 0, 25], 24, 2440) == 66\nassert solution.maxCount([85, 40, 92, 15, 25, 0, 49, 0, 49], 48, 3329) == 78\nassert solution.maxCount([60, 61, 17, 48, 69, 32, 0, 80, 0, 80], 79, 2512) == 68\nassert solution.maxCount([46, 23, 22, 26, 94, 99, 45, 18, 0, 97, 0, 97], 96, 6840) == 90\nassert solution.maxCount([68, 61, 0, 75, 0, 75], 74, 2317) == 67\nassert solution.maxCount([76, 88, 17, 29, 6, 0, 71, 0, 71], 70, 7168) == 82\nassert solution.maxCount([9, 17, 94, 19, 30, 64, 91, 82, 0, 19, 0, 19], 18, 51) == 9\nassert solution.maxCount([76, 26, 59, 57, 21, 35, 32, 0, 71, 0, 71], 70, 7722) == 68\nassert solution.maxCount([86, 58, 9, 63, 98, 81, 0, 59, 0, 59], 58, 5923) == 91\nassert solution.maxCount([36, 84, 48, 18, 98, 67, 59, 0, 5, 0, 5], 4, 6669) == 90\nassert solution.maxCount([70, 8, 29, 100, 72, 58, 92, 54, 81, 91, 0, 3, 0, 3], 2, 6579) == 89\nassert solution.maxCount([97, 90, 42, 95, 54, 50, 47, 63, 52, 0, 73, 0, 73], 72, 3274) == 78\nassert solution.maxCount([82, 12, 33, 19, 0, 11, 0, 11], 10, 3892) == 77\nassert solution.maxCount([42, 32, 80, 74, 35, 0, 84, 0, 84], 83, 2834) == 73\nassert solution.maxCount([65, 77, 94, 99, 7, 64, 87, 63, 10, 0, 58, 0, 58], 57, 326) == 23\nassert solution.maxCount([12, 0, 3, 0, 3], 2, 8502) == 10\nassert solution.maxCount([95, 60, 36, 32, 97, 66, 70, 39, 37, 49, 0, 78, 0, 78], 77, 6514) == 86\nassert solution.maxCount([46, 97, 85, 70, 13, 65, 63, 58, 52, 0, 17, 0, 17], 16, 1758) == 56\nassert solution.maxCount([9, 0, 12, 0, 12], 11, 6257) == 10\nassert solution.maxCount([10, 100, 0, 72, 0, 72], 71, 854) == 40\nassert solution.maxCount([57, 28, 49, 0, 42, 0, 42], 41, 6204) == 53\nassert solution.maxCount([30, 88, 0, 46, 0, 46], 45, 4202) == 85\nassert solution.maxCount([76, 5, 97, 14, 0, 71, 0, 71], 70, 881) == 39\nassert solution.maxCount([97, 45, 23, 76, 46, 4, 29, 10, 53, 18, 0, 45, 0, 45], 44, 6910) == 87\nassert solution.maxCount([22, 92, 46, 5, 23, 24, 0, 34, 0, 34], 33, 2245) == 62\nassert solution.maxCount([21, 0, 51, 0, 51], 50, 2324) == 49\nassert solution.maxCount([68, 91, 34, 97, 88, 0, 75, 0, 75], 74, 1155) == 47\nassert solution.maxCount([14, 42, 5, 12, 64, 1, 25, 0, 92, 0, 92], 91, 5882) == 84\nassert solution.maxCount([57, 68, 81, 3, 17, 51, 8, 14, 35, 78, 0, 94, 0, 94], 93, 4339) == 83\nassert solution.maxCount([32, 66, 52, 24, 23, 0, 59, 0, 59], 58, 4586) == 60\nassert solution.maxCount([46, 25, 74, 96, 31, 92, 41, 22, 0, 6, 0, 6], 5, 1246) == 46\nassert solution.maxCount([61, 0, 57, 0, 57], 56, 5651) == 59\nassert solution.maxCount([58, 56, 64, 83, 63, 0, 94, 0, 94], 93, 6470) == 88\nassert solution.maxCount([91, 98, 56, 99, 22, 7, 0, 74, 0, 74], 73, 3658) == 82\nassert solution.maxCount([11, 79, 43, 59, 57, 37, 22, 0, 23, 0, 23], 22, 358) == 25\nassert solution.maxCount([66, 62, 81, 80, 92, 21, 79, 0, 12, 0, 12], 11, 3337) == 78\nassert solution.maxCount([5, 32, 88, 14, 38, 30, 90, 60, 40, 68, 0, 7, 0, 7], 6, 2625) == 66\nassert solution.maxCount([14, 30, 60, 33, 74, 96, 32, 29, 34, 0, 66, 0, 66], 65, 2902) == 71\nassert solution.maxCount([46, 58, 10, 0, 80, 0, 80], 79, 987) == 43\nassert solution.maxCount([9, 56, 39, 64, 20, 67, 2, 0, 41, 0, 41], 40, 537) == 30\nassert solution.maxCount([2, 52, 26, 23, 0, 66, 0, 66], 65, 1761) == 56\nassert solution.maxCount([43, 17, 69, 3, 39, 24, 37, 0, 27, 0, 27], 26, 738) == 35",
  "inefficient_solution": "class Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        banned_list = []\n        for i in range(1, n + 1):\n            if i not in banned:\n                banned_list.append(i)\n        banned_list.sort()\n        max_len = len(banned_list)\n        dp = [[0] * (maxSum + 1) for _ in range(max_len + 1)]\n        for i in range(1, max_len + 1):\n            for j in range(1, maxSum + 1):\n                for k in range(1, i + 1):\n                    if banned_list[i - 1] <= j and dp[i - 1][j - banned_list[i - 1]] + banned_list[i - 1] <= j:\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - banned_list[i - 1]] + banned_list[i - 1])\n        ans = 0\n        for i in range(1, max_len + 1):\n            for j in range(1, maxSum + 1):\n                if dp[i][j] == j:\n                    ans = max(ans, i)\n        return ans",
  "is_python": true
}