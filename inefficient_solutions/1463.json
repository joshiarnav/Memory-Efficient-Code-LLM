{
  "problem_idx": 1463,
  "task_name": "Cherry Pickup II",
  "markdown_description": "\nYou are given a `rows x cols` matrix `grid` representing a field of cherries where `grid[i][j]` represents the number of cherries that you can collect from the `(i, j)` cell.\n\n\nYou have two robots that can collect cherries for you:\n\n\n* **Robot #1** is located at the **top-left corner** `(0, 0)`, and\n* **Robot #2** is located at the **top-right corner** `(0, cols - 1)`.\n\n\nReturn *the maximum number of cherries collection using both robots by following the rules below*:\n\n\n* From a cell `(i, j)`, robots can move to cell `(i + 1, j - 1)`, `(i + 1, j)`, or `(i + 1, j + 1)`.\n* When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\n* When both robots stay in the same cell, only one takes the cherries.\n* Both robots cannot move outside of the grid at any moment.\n* Both robots should reach the bottom row in `grid`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1463.Cherry%20Pickup%20II/images/sample_1_1802.png)\n\n```\n\n**Input:** grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\n**Output:** 24\n**Explanation:** Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal of cherries: 12 + 12 = 24.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1463.Cherry%20Pickup%20II/images/sample_2_1802.png)\n\n```\n\n**Input:** grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]\n**Output:** 28\n**Explanation:** Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\nTotal of cherries: 17 + 11 = 28.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `rows == grid.length`\n* `cols == grid[i].length`\n* `2 <= rows, cols <= 70`\n* `0 <= grid[i][j] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[-1] * n for _ in range(n)]\n        g = [[-1] * n for _ in range(n)]\n        f[0][n - 1] = grid[0][0] + grid[0][n - 1]\n        for i in range(1, m):\n            for j1 in range(n):\n                for j2 in range(n):\n                    x = grid[i][j1] + (0 if j1 == j2 else grid[i][j2])\n                    for y1 in range(j1 - 1, j1 + 2):\n                        for y2 in range(j2 - 1, j2 + 2):\n                            if 0 <= y1 < n and 0 <= y2 < n and f[y1][y2] != -1:\n                                g[j1][j2] = max(g[j1][j2], f[y1][y2] + x)\n            f, g = g, f\n        return max(f[j1][j2] for j1, j2 in product(range(n), range(n)))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def cherryPickup(self, grid):\n        m, n = len(grid), len(grid[0])\n        f = [[-1] * n for _ in range(n)]\n        g = [[-1] * n for _ in range(n)]\n        f[0][n - 1] = grid[0][0] + grid[0][n - 1]\n        for i in range(1, m):\n            for j1 in range(n):\n                for j2 in range(n):\n                    x = grid[i][j1] + (0 if j1 == j2 else grid[i][j2])\n                    for y1 in range(j1 - 1, j1 + 2):\n                        for y2 in range(j2 - 1, j2 + 2):\n                            if 0 <= y1 < n and 0 <= y2 < n and f[y1][y2] != -1:\n                                g[j1][j2] = max(g[j1][j2], f[y1][y2] + x)\n            f, g = g, f\n        return max(f[j1][j2] for j1, j2 in product(range(n), range(n)))\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(2, 4)\n    n = random.randint(2, 4)\n    grid = [[random.randint(0, 100) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.cherryPickup(grid)\n\n    return grid, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.cherryPickup(grid) == expected_result\n        print(f\"assert solution.cherryPickup({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.cherryPickup({grid}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.cherryPickup([[31, 95, 59, 42], [65, 47, 53, 16], [62, 37, 14, 85], [57, 7, 92, 32]]) == 487\nassert solution.cherryPickup([[83, 69, 51], [90, 2, 60]]) == 284\nassert solution.cherryPickup([[3, 25, 39, 34], [13, 62, 12, 1]]) == 111\nassert solution.cherryPickup([[20, 19], [28, 92], [77, 31]]) == 267\nassert solution.cherryPickup([[39, 23], [43, 46], [41, 54], [21, 40]]) == 307\nassert solution.cherryPickup([[64, 10, 50, 97], [48, 36, 10, 56], [66, 30, 35, 90]]) == 421\nassert solution.cherryPickup([[25, 83, 59], [4, 26, 67]]) == 177\nassert solution.cherryPickup([[85, 35], [1, 23], [38, 1]]) == 183\nassert solution.cherryPickup([[51, 96, 85, 35], [43, 16, 55, 65], [3, 41, 57, 6]]) == 292\nassert solution.cherryPickup([[25, 7, 81, 42], [85, 69, 49, 79], [95, 43, 20, 10], [75, 5, 6, 53]]) == 474\nassert solution.cherryPickup([[66, 49], [47, 33], [72, 83], [19, 56]]) == 425\nassert solution.cherryPickup([[19, 86, 49, 10], [14, 23, 58, 91], [55, 15, 69, 43], [10, 42, 79, 14]]) == 388\nassert solution.cherryPickup([[98, 36, 93, 97], [20, 5, 7, 86]]) == 301\nassert solution.cherryPickup([[44, 23, 6, 48], [80, 23, 75, 25], [26, 3, 4, 79], [29, 35, 41, 27]]) == 428\nassert solution.cherryPickup([[27, 71], [72, 58]]) == 228\nassert solution.cherryPickup([[99, 22, 99, 9], [56, 71, 69, 59]]) == 248\nassert solution.cherryPickup([[90, 75, 68, 98], [88, 76, 100, 51], [30, 82, 80, 32], [93, 99, 96, 90]]) == 733\nassert solution.cherryPickup([[73, 89], [91, 16], [16, 23]]) == 308\nassert solution.cherryPickup([[78, 69, 63], [59, 58, 88], [56, 87, 15], [42, 62, 78]]) == 571\nassert solution.cherryPickup([[73, 82], [11, 61], [3, 44], [5, 28]]) == 307\nassert solution.cherryPickup([[67, 51, 72, 14], [85, 8, 15, 2], [8, 53, 65, 72]]) == 306\nassert solution.cherryPickup([[3, 81], [89, 68], [63, 42]]) == 346\nassert solution.cherryPickup([[78, 66, 45, 71], [10, 69, 87, 65], [2, 83, 2, 3], [91, 82, 5, 69]]) == 563\nassert solution.cherryPickup([[77, 84], [10, 67], [94, 76]]) == 408\nassert solution.cherryPickup([[3, 13, 9, 23], [42, 73, 75, 11], [17, 65, 1, 1], [38, 10, 28, 58]]) == 336\nassert solution.cherryPickup([[57, 44, 62], [87, 88, 62], [71, 98, 96], [22, 74, 90]]) == 652\nassert solution.cherryPickup([[55, 76, 22], [72, 85, 16], [79, 11, 44]]) == 357\nassert solution.cherryPickup([[55, 83], [5, 81], [90, 47]]) == 361\nassert solution.cherryPickup([[93, 36, 16], [78, 76, 14], [67, 54, 28]]) == 384\nassert solution.cherryPickup([[22, 95], [3, 19], [28, 100]]) == 267\nassert solution.cherryPickup([[55, 27, 33], [50, 81, 95], [46, 88, 100]]) == 452\nassert solution.cherryPickup([[91, 21, 91], [85, 72, 27]]) == 339\nassert solution.cherryPickup([[59, 26, 65, 22], [87, 64, 71, 38]]) == 239\nassert solution.cherryPickup([[49, 99, 9, 10], [10, 49, 68, 62]]) == 176\nassert solution.cherryPickup([[16, 61], [58, 33]]) == 168\nassert solution.cherryPickup([[7, 60, 80, 70], [33, 13, 54, 95], [74, 89, 99, 55]]) == 393\nassert solution.cherryPickup([[21, 90, 79], [47, 88, 3], [67, 61, 16], [98, 76, 65]]) == 537\nassert solution.cherryPickup([[75, 90, 57], [9, 64, 32], [29, 13, 6], [48, 54, 21]]) == 372\nassert solution.cherryPickup([[76, 71, 23, 94], [68, 43, 42, 75], [97, 67, 70, 42], [22, 30, 100, 7]]) == 610\nassert solution.cherryPickup([[92, 13, 35], [46, 52, 72], [20, 13, 49]]) == 320\nassert solution.cherryPickup([[5, 77, 97, 88], [17, 65, 66, 63]]) == 224\nassert solution.cherryPickup([[32, 18, 43], [34, 92, 100], [73, 76, 33]]) == 416\nassert solution.cherryPickup([[32, 19, 71, 60], [82, 10, 100, 6], [33, 27, 29, 28]]) == 336\nassert solution.cherryPickup([[30, 11, 33, 50], [73, 38, 47, 99], [71, 73, 82, 96]]) == 421\nassert solution.cherryPickup([[51, 92], [4, 86]]) == 233\nassert solution.cherryPickup([[35, 72, 78, 62], [99, 52, 99, 36], [65, 4, 50, 68], [84, 11, 33, 79]]) == 591\nassert solution.cherryPickup([[57, 94, 35], [92, 34, 40], [55, 21, 86], [74, 62, 45]]) == 501\nassert solution.cherryPickup([[78, 15], [75, 2], [67, 59], [32, 30]]) == 358\nassert solution.cherryPickup([[50, 32, 21], [72, 65, 69]]) == 212\nassert solution.cherryPickup([[72, 6], [32, 41], [73, 83], [16, 83]]) == 406\nassert solution.cherryPickup([[53, 84, 4], [10, 0, 28]]) == 95\nassert solution.cherryPickup([[14, 95, 5], [43, 92, 40], [61, 95, 11]]) == 310\nassert solution.cherryPickup([[52, 22], [38, 8]]) == 120\nassert solution.cherryPickup([[86, 77], [87, 20], [33, 64]]) == 367\nassert solution.cherryPickup([[13, 87, 51, 53], [76, 16, 41, 2], [6, 97, 86, 38], [67, 38, 50, 62]]) == 495\nassert solution.cherryPickup([[19, 90], [100, 79]]) == 288\nassert solution.cherryPickup([[28, 26, 64], [56, 82, 47], [66, 13, 2], [88, 89, 41]]) == 486\nassert solution.cherryPickup([[36, 10, 22], [27, 17, 28]]) == 113\nassert solution.cherryPickup([[57, 76, 54, 64], [15, 61, 79, 38], [16, 45, 11, 5], [99, 63, 77, 61]]) == 498\nassert solution.cherryPickup([[45, 66, 36, 89], [33, 57, 60, 30]]) == 251\nassert solution.cherryPickup([[29, 4, 23, 66], [8, 81, 37, 16], [45, 92, 95, 28]]) == 400\nassert solution.cherryPickup([[8, 43], [58, 6], [30, 0]]) == 145\nassert solution.cherryPickup([[89, 26, 6, 24], [99, 54, 40, 12], [2, 99, 61, 91], [70, 10, 93, 55]]) == 605\nassert solution.cherryPickup([[79, 77, 25], [18, 64, 58]]) == 226\nassert solution.cherryPickup([[60, 58, 24], [60, 18, 36]]) == 180\nassert solution.cherryPickup([[30, 96, 90, 6], [0, 71, 53, 34], [63, 69, 52, 47], [66, 31, 73, 45]]) == 431\nassert solution.cherryPickup([[61, 3], [48, 8], [1, 31]]) == 152\nassert solution.cherryPickup([[62, 59], [87, 45], [95, 74]]) == 422\nassert solution.cherryPickup([[15, 68, 26, 94], [10, 34, 14, 8], [38, 64, 30, 3]]) == 259\nassert solution.cherryPickup([[85, 100, 40, 88], [55, 70, 63, 73]]) == 316\nassert solution.cherryPickup([[21, 82, 70, 70], [24, 65, 56, 15], [64, 78, 92, 62]]) == 382\nassert solution.cherryPickup([[65, 95, 82, 38], [100, 9, 84, 81]]) == 287\nassert solution.cherryPickup([[23, 41, 56, 23], [65, 64, 77, 71]]) == 188\nassert solution.cherryPickup([[34, 51, 11, 53], [53, 11, 34, 40], [96, 41, 26, 95]]) == 371\nassert solution.cherryPickup([[28, 28, 97, 23], [60, 31, 73, 72]]) == 184\nassert solution.cherryPickup([[32, 35, 53, 38], [41, 49, 24, 72], [26, 72, 23, 31]]) == 294\nassert solution.cherryPickup([[32, 47, 21], [83, 42, 95]]) == 231\nassert solution.cherryPickup([[19, 29], [65, 42]]) == 155\nassert solution.cherryPickup([[35, 56, 15, 90], [66, 8, 49, 17]]) == 240\nassert solution.cherryPickup([[95, 12, 19], [90, 25, 47], [77, 41, 82]]) == 410\nassert solution.cherryPickup([[74, 95, 66], [6, 4, 42], [93, 19, 35], [76, 43, 58]]) == 450\nassert solution.cherryPickup([[57, 56, 75, 30], [7, 94, 79, 25], [56, 18, 48, 31]]) == 364\nassert solution.cherryPickup([[29, 81, 11], [59, 81, 0]]) == 180\nassert solution.cherryPickup([[34, 98, 52, 0], [61, 63, 2, 19], [91, 9, 81, 72]]) == 288\nassert solution.cherryPickup([[41, 66], [11, 16], [94, 18], [0, 53]]) == 299\nassert solution.cherryPickup([[40, 55], [28, 73], [56, 66]]) == 318\nassert solution.cherryPickup([[62, 80, 72, 87], [37, 34, 6, 45]]) == 231\nassert solution.cherryPickup([[55, 52], [98, 8], [23, 94], [48, 76]]) == 454\nassert solution.cherryPickup([[48, 68, 71, 82], [67, 64, 51, 9], [81, 35, 28, 46]]) == 375\nassert solution.cherryPickup([[41, 80], [60, 12], [55, 76]]) == 324\nassert solution.cherryPickup([[14, 13, 65, 96], [75, 54, 41, 6], [92, 13, 94, 28], [85, 78, 44, 27]]) == 575\nassert solution.cherryPickup([[92, 73], [62, 79], [5, 36], [68, 18]]) == 433\nassert solution.cherryPickup([[10, 94, 49, 51], [10, 3, 36, 34], [50, 16, 12, 19], [36, 10, 32, 99]]) == 311\nassert solution.cherryPickup([[64, 23, 82], [35, 88, 92], [100, 54, 34]]) == 480\nassert solution.cherryPickup([[40, 17], [8, 54], [51, 15], [14, 10]]) == 209\nassert solution.cherryPickup([[38, 70, 30], [97, 64, 36], [86, 98, 5]]) == 413\nassert solution.cherryPickup([[89, 67, 64, 57], [61, 45, 74, 78], [82, 73, 61, 2]]) == 436\nassert solution.cherryPickup([[5, 34, 70], [19, 85, 55]]) == 215\nassert solution.cherryPickup([[84, 40], [77, 55], [4, 71], [42, 4]]) == 377\nassert solution.cherryPickup([[99, 41, 36], [56, 66, 31], [99, 17, 8], [85, 55, 96]]) == 554",
  "inefficient_solution": "class Solution:\n    def cherryPickup(self, grid):\n        m, n = len(grid), len(grid[0])\n        f = [[[-1] * (n * 2) for _ in range(n)] for _ in range(m)]\n        g = [[[-1] * (n * 2) for _ in range(n)] for _ in range(m)]\n        f[0][n - 1][n - 1] = grid[0][0] + grid[0][n - 1]\n        for i in range(m):\n            for j1 in range(n):\n                for j2 in range(n):\n                    for k1 in range(n):\n                        for k2 in range(n):\n                            if i == 0 and j1 == n - 1 and j2 == n - 1:\n                                continue\n                            x = grid[i][j1] + (0 if j1 == j2 else grid[i][j2])\n                            for y1 in range(j1 - 1, j1 + 2):\n                                for y2 in range(j2 - 1, j2 + 2):\n                                    for l1 in range(k1 - 1, k1 + 2):\n                                        for l2 in range(k2 - 1, k2 + 2):\n                                            if 0 <= y1 < n and 0 <= y2 < n and 0 <= l1 < n and 0 <= l2 < n and f[i][y1][l1] != -1:\n                                                g[i][j1][j2] = max(g[i][j1][j2], f[i][y1][l1] + x)\n            f, g = g, f\n        return max(f[m - 1][j1][j2] for j1 in range(n) for j2 in range(n))",
  "is_python": true
}