{
  "problem_idx": 419,
  "task_name": "Battleships in a Board",
  "markdown_description": "\nGiven an `m x n` matrix `board` where each cell is a battleship `'X'` or empty `'.'`, return *the number of the **battleships** on* `board`.\n\n\n**Battleships** can only be placed horizontally or vertically on `board`. In other words, they can only be made of the shape `1 x k` (`1` row, `k` columns) or `k x 1` (`k` rows, `1` column), where `k` can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0419.Battleships%20in%20a%20Board/images/battelship-grid.jpg)\n\n```\n\n**Input:** board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\n**Output:** 2\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** board = [[\".\"]]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == board.length`\n* `n == board[i].length`\n* `1 <= m, n <= 200`\n* `board[i][j]` is either `'.'` or `'X'`.\n\n\n\u00a0\n\n\n**Follow up:** Could you do it in one-pass, using only `O(1)` extra memory and without modifying the values `board`?\n\n\n",
  "canonical_solution": "class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n        m, n = len(board), len(board[0])\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == '.':\n                    continue\n                if i > 0 and board[i - 1][j] == 'X':\n                    continue\n                if j > 0 and board[i][j - 1] == 'X':\n                    continue\n                ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countBattleships(self, board):\n        m, n = len(board), len(board[0])\n        ans = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == '.':\n                    continue\n                if i > 0 and board[i - 1][j] == 'X':\n                    continue\n                if j > 0 and board[i][j - 1] == 'X':\n                    continue\n                ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random m, n values\n    m = random.randint(1, 11)\n    n = random.randint(1, 11)\n    \n    # Generate random board\n    board = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(random.choice(['.', 'X']))\n        board.append(row)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countBattleships(board)\n\n    return board, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        board, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countBattleships(board) == expected_result\n        print(f\"assert solution.countBattleships({board}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countBattleships({board}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countBattleships([['.', 'X', '.', '.', '.', '.', 'X'], ['X', '.', '.', 'X', 'X', '.', 'X'], ['X', '.', '.', '.', '.', '.', '.'], ['.', 'X', '.', '.', 'X', '.', '.']]) == 6\nassert solution.countBattleships([['X', '.', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.'], ['.', '.', 'X', '.', '.', 'X', 'X', '.', '.', '.'], ['X', '.', '.', '.', 'X', '.', '.', '.', 'X', '.'], ['.', 'X', 'X', '.', 'X', 'X', 'X', 'X', 'X', 'X'], ['.', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', '.', '.', 'X', '.', '.', 'X', '.', 'X'], ['X', '.', 'X', '.', 'X', 'X', '.', '.', '.', 'X'], ['.', '.', '.', '.', 'X', 'X', '.', '.', 'X', '.'], ['X', '.', '.', 'X', '.', '.', 'X', 'X', 'X', '.']]) == 13\nassert solution.countBattleships([['.', 'X', '.', '.', 'X', 'X'], ['.', 'X', 'X', '.', '.', 'X'], ['X', 'X', '.', 'X', '.', 'X'], ['X', 'X', '.', 'X', '.', '.'], ['.', '.', '.', '.', '.', '.'], ['.', 'X', '.', '.', 'X', 'X'], ['X', '.', 'X', '.', 'X', '.'], ['X', '.', '.', 'X', '.', 'X'], ['.', 'X', '.', '.', '.', '.']]) == 11\nassert solution.countBattleships([['.', 'X']]) == 1\nassert solution.countBattleships([['X', 'X', '.', 'X']]) == 2\nassert solution.countBattleships([['X', '.', '.', '.'], ['X', '.', 'X', '.'], ['.', '.', 'X', '.'], ['X', 'X', '.', '.'], ['.', 'X', '.', '.']]) == 3\nassert solution.countBattleships([['X', '.', '.', 'X', 'X', '.'], ['.', 'X', 'X', 'X', '.', 'X'], ['X', '.', 'X', 'X', '.', '.'], ['.', 'X', 'X', 'X', '.', '.']]) == 6\nassert solution.countBattleships([['.', 'X', '.'], ['.', 'X', '.'], ['.', '.', 'X']]) == 2\nassert solution.countBattleships([['X', 'X', '.', '.', 'X'], ['X', 'X', '.', 'X', 'X'], ['.', 'X', '.', '.', 'X'], ['X', 'X', '.', 'X', 'X'], ['X', 'X', 'X', 'X', 'X'], ['X', '.', 'X', '.', 'X'], ['.', 'X', 'X', 'X', 'X']]) == 6\nassert solution.countBattleships([['X', 'X', '.', 'X', 'X', '.', '.'], ['X', '.', 'X', '.', '.', '.', 'X'], ['X', '.', '.', 'X', 'X', 'X', 'X'], ['.', 'X', '.', '.', 'X', 'X', '.'], ['.', '.', '.', '.', 'X', 'X', 'X']]) == 6\nassert solution.countBattleships([['.', '.', '.', '.', '.', 'X', 'X', 'X', '.', 'X', 'X'], ['X', '.', 'X', 'X', 'X', 'X', 'X', '.', '.', 'X', 'X'], ['X', '.', '.', '.', 'X', 'X', '.', '.', 'X', '.', '.'], ['X', '.', 'X', 'X', '.', 'X', '.', '.', '.', 'X', '.'], ['.', '.', 'X', 'X', '.', 'X', 'X', '.', '.', '.', 'X'], ['.', '.', '.', '.', '.', '.', '.', 'X', 'X', '.', 'X'], ['X', 'X', '.', '.', '.', '.', 'X', 'X', '.', '.', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.', '.'], ['X', 'X', '.', '.', '.', 'X', '.', '.', '.', '.', 'X']]) == 12\nassert solution.countBattleships([['X', '.', 'X', 'X', '.', 'X', 'X', 'X', '.', '.', '.'], ['.', 'X', '.', '.', 'X', '.', '.', 'X', '.', 'X', 'X'], ['X', 'X', 'X', '.', 'X', '.', '.', 'X', 'X', 'X', 'X']]) == 7\nassert solution.countBattleships([['.', 'X', '.', '.'], ['X', 'X', 'X', '.'], ['X', '.', '.', '.'], ['X', 'X', 'X', '.'], ['.', '.', 'X', 'X'], ['.', '.', '.', '.'], ['X', 'X', 'X', '.']]) == 3\nassert solution.countBattleships([['X', 'X', 'X', '.', 'X', '.', '.', '.', '.', '.', 'X']]) == 3\nassert solution.countBattleships([['X', 'X', '.', 'X', '.', 'X', '.'], ['.', 'X', '.', 'X', '.', 'X', '.'], ['X', '.', '.', 'X', 'X', '.', '.'], ['X', '.', 'X', '.', '.', 'X', 'X'], ['.', '.', 'X', '.', 'X', '.', '.'], ['.', '.', '.', 'X', 'X', '.', '.']]) == 8\nassert solution.countBattleships([['X', 'X', 'X', 'X', 'X', '.', 'X', 'X', '.', 'X'], ['.', '.', '.', '.', 'X', 'X', '.', 'X', 'X', '.'], ['X', 'X', 'X', 'X', '.', 'X', '.', '.', '.', '.'], ['.', 'X', 'X', 'X', '.', 'X', '.', '.', '.', 'X'], ['.', '.', '.', 'X', '.', '.', 'X', 'X', 'X', 'X']]) == 6\nassert solution.countBattleships([['X', 'X', 'X', '.', 'X', '.', '.', '.'], ['X', 'X', '.', 'X', '.', '.', '.', '.'], ['.', '.', 'X', 'X', '.', '.', '.', '.'], ['X', '.', 'X', 'X', 'X', 'X', 'X', '.'], ['X', '.', '.', 'X', 'X', '.', 'X', '.'], ['.', '.', 'X', 'X', '.', 'X', 'X', '.'], ['X', '.', 'X', 'X', 'X', 'X', '.', 'X'], ['X', '.', '.', 'X', '.', 'X', 'X', 'X']]) == 9\nassert solution.countBattleships([['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'X', 'X'], ['.', '.', 'X', '.', '.', '.', '.', 'X', '.', '.', '.'], ['X', '.', 'X', '.', '.', '.', '.', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.', 'X', '.']]) == 3\nassert solution.countBattleships([['X', '.', 'X', '.', 'X', 'X'], ['X', '.', 'X', 'X', '.', 'X'], ['.', '.', '.', '.', 'X', '.'], ['X', 'X', '.', '.', 'X', 'X'], ['.', '.', '.', 'X', '.', 'X']]) == 6\nassert solution.countBattleships([['X', 'X', 'X', '.'], ['X', '.', '.', '.'], ['X', '.', '.', '.'], ['.', '.', '.', 'X'], ['X', '.', '.', 'X']]) == 3\nassert solution.countBattleships([['.', 'X'], ['.', 'X'], ['.', '.']]) == 1\nassert solution.countBattleships([['.', 'X'], ['.', '.'], ['X', '.'], ['X', '.'], ['X', '.'], ['.', '.']]) == 2\nassert solution.countBattleshipsnassert solution.countBattleships([['.', '.', '.', 'X'], ['X', '.', 'X', 'X'], ['.', '.', 'X', 'X'], ['.', '.', '.', 'X'], ['.', 'X', 'X', '.'], ['X', '.', 'X', 'X'], ['X', '.', '.', '.'], ['X', 'X', '.', '.'], ['X', '.', '.', 'X'], ['.', 'X', '.', 'X'], ['X', '.', '.', 'X']]) == 8\nassert solution.countBattleships([['.', '.', 'X', '.', '.'], ['X', 'X', 'X', '.', 'X'], ['X', 'X', 'X', 'X', 'X'], ['.', 'X', '.', 'X', '.']]) == 3\nassert solution.countBattleships([['X', 'X', '.', '.', '.', 'X', 'X', '.'], ['.', '.', 'X', '.', '.', '.', 'X', 'X'], ['X', 'X', 'X', 'X', '.', '.', '.', '.'], ['X', 'X', '.', '.', '.', 'X', '.', '.'], ['.', 'X', 'X', '.', 'X', '.', 'X', 'X'], ['.', 'X', 'X', '.', '.', 'X', '.', '.'], ['X', '.', 'X', '.', 'X', 'X', 'X', '.'], ['.', '.', 'X', 'X', '.', '.', 'X', 'X']]) == 10\nassert solution.countBattleships([['.', 'X', '.', 'X'], ['.', 'X', 'X', 'X'], ['.', '.', '.', 'X'], ['X', 'X', '.', 'X'], ['X', 'X', '.', '.'], ['.', '.', 'X', 'X'], ['X', '.', '.', 'X']]) == 5\nassert solution.countBattleships([['.', '.', 'X', '.', '.'], ['.', '.', '.', 'X', '.'], ['X', 'X', '.', 'X', '.']]) == 3\nassert solution.countBattleships([['X', '.', '.', 'X', 'X'], ['.', '.', 'X', '.', '.'], ['.', 'X', '.', 'X', 'X'], ['.', 'X', 'X', 'X', 'X'], ['.', '.', '.', '.', '.'], ['X', 'X', 'X', '.', 'X'], ['X', 'X', '.', 'X', '.'], ['.', 'X', '.', '.', 'X']]) == 9\nassert solution.countBattleships([['.', '.', 'X', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X'], ['.', '.', 'X', '.', '.', '.', '.', 'X', '.', '.', '.']]) == 3\nassert solution.countBattleships([['X', 'X', 'X'], ['X', '.', '.'], ['.', 'X', 'X'], ['.', 'X', '.'], ['X', '.', 'X'], ['X', 'X', 'X']]) == 4\nassert solution.countBattleships([['.', 'X', '.', 'X', '.', 'X', 'X', 'X', 'X', '.']]) == 3\nassert solution.countBattleships([['X', 'X', '.', 'X', 'X', '.', '.', 'X', 'X', '.'], ['X', '.', '.', '.', 'X', '.', 'X', '.', 'X', 'X']]) == 4\nassert solution.countBattleships([['X', 'X', 'X'], ['.', '.', 'X'], ['X', '.', 'X'], ['X', '.', 'X'], ['X', 'X', 'X'], ['.', 'X', 'X'], ['X', '.', 'X'], ['.', 'X', '.'], ['.', '.', '.'], ['.', '.', '.'], ['.', '.', '.']]) == 4\nassert solution.countBattleships([['X', 'X', 'X', 'X', '.', 'X', '.', 'X', 'X', '.', '.'], ['X', 'X', 'X', '.', '.', 'X', 'X', '.', '.', '.', 'X'], ['.', 'X', '.', '.', 'X', 'X', '.', '.', 'X', 'X', 'X'], ['.', 'X', '.', '.', '.', '.', '.', 'X', 'X', '.', 'X'], ['.', 'X', 'X', 'X', 'X', '.', 'X', 'X', 'X', '.', 'X'], ['X', 'X', '.', '.', 'X', '.', 'X', 'X', 'X', '.', '.'], ['X', '.', 'X', 'X', 'X', '.', '.', '.', 'X', 'X', '.'], ['X', 'X', '.', '.', '.', '.', '.', '.', 'X', '.', 'X'], ['.', 'X', '.', '.', '.', '.', '.', '.', 'X', 'X', '.'], ['X', '.', '.', '.', '.', '.', '.', '.', '.', 'X', 'X']]) == 12\nassert solution.countBattleships([['.', '.', 'X', 'X'], ['X', '.', 'X', 'X'], ['X', '.', 'X', '.']]) == 2\nassert solution.countBattleships([['.', '.', '.', 'X', 'X', 'X', '.', 'X', 'X', '.', '.']]) == 2\nassert solution.countBattleships([['X', 'X', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', 'X', 'X', '.', '.', '.', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.', '.'], ['.', '.', 'X', 'X', '.', '.', '.', 'X', '.', '.'], ['X', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '.'], ['X', '.', 'X', '.', '.', 'X', '.', 'X', 'X', 'X'], ['.', '.', '.', '.', '.', '.', '.', 'X', '.', '.']]) == 8\nassert solution.countBattleships([['X', '.', '.', 'X', '.', 'X', '.', '.', '.', 'X'], ['.', 'X', '.', 'X', 'X', '.', '.', 'X', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', 'X', 'X', '.'], ['.', '.', '.', 'X', '.', 'X', 'X', 'X', '.', '.'], ['.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.']]) == 9\nassert solution.countBattleships([['.', 'X', '.', 'X', 'X', '.', '.', 'X', '.'], ['.', 'X', '.', 'X', 'X', '.', '.', '.', '.'], ['.', '.', '.', 'X', 'X', 'X', 'X', '.', 'X']]) == 4\nassert solution.countBattleships([['.', 'X', 'X', 'X'], ['.', 'X', 'X', '.']]) == 1\nassert solution.countBattleships([['.'], ['.'], ['X'], ['X'], ['.'], ['.'], ['X'], ['X'], ['.'], ['.'], ['.']]) == 2\nassert solution.countBattleships([['X', '.', '.'], ['X', '.', 'X'], ['X', 'X', '.'], ['X', '.', '.'], ['.', '.', 'X']]) == 3\nassert solution.countBattleships([['.', '.', 'X', 'X'], ['X', 'X', '.', 'X'], ['.', 'X', 'X', 'X'], ['.', '.', 'X', 'X'], ['.', '.', '.', '.'], ['X', '.', '.', '.'], ['X', 'X', '.', '.'], ['X', '.', 'X', 'X'], ['.', 'X', 'X', '.'], ['.', '.', 'X', '.']]) == 5\nassert solution.countBattleshipsnassert solution.countBattleshipsnassert solution.countBattleships([['.', '.', '.', 'X', '.', 'X', '.', 'X'], ['X', '.', '.', '.', '.', '.', 'X', 'X'], ['.', 'X', '.', '.', '.', 'X', '.', 'X']]) == 7\nassert solution.countBattleships([['.', '.', 'X', 'X', '.', '.'], ['X', 'X', 'X', '.', 'X', 'X'], ['X', 'X', 'X', '.', '.', 'X'], ['X', 'X', '.', '.', '.', '.'], ['.', 'X', '.', 'X', 'X', 'X'], ['.', 'X', 'X', '.', 'X', 'X'], ['X', '.', 'X', '.', 'X', 'X'], ['X', '.', '.', 'X', 'X', '.'], ['.', '.', '.', '.', 'X', '.']]) == 6\nassert solution.countBattleships([['X', '.', '.', '.', 'X', '.', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', '.', 'X', 'X', '.', 'X', 'X', '.']]) == 3\nassert solution.countBattleships([['X', '.', '.', '.', 'X', 'X', 'X', '.', '.', '.', 'X'], ['.', 'X', 'X', 'X', '.', 'X', 'X', '.', 'X', '.', '.'], ['X', '.', '.', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X'], ['.', 'X', 'X', '.', 'X', 'X', '.', '.', '.', '.', '.'], ['.', 'X', 'X', 'X', 'X', '.', 'X', '.', 'X', '.', 'X'], ['X', 'X', 'X', '.', '.', '.', 'X', '.', '.', '.', '.'], ['.', '.', '.', 'X', '.', '.', 'X', '.', '.', 'X', '.'], ['X', 'X', 'X', '.', 'X', '.', '.', 'X', '.', 'X', 'X']]) == 18\nassert solution.countBattleships([['X', '.']]) == 1\nassert solution.countBattleships([['.', 'X', 'X'], ['.', '.', 'X'], ['.', '.', 'X']]) == 1\nassert solution.countBattleships([['.', '.', 'X', '.', 'X', '.', 'X'], ['X', 'X', 'X', '.', 'X', 'X', '.'], ['X', '.', 'X', '.', '.', 'X', 'X'], ['X', '.', '.', '.', '.', '.', 'X'], ['X', '.', '.', '.', '.', 'X', '.'], ['X', '.', 'X', 'X', '.', 'X', '.'], ['.', '.', 'X', 'X', '.', '.', '.'], ['.', '.', '.', 'X', 'X', '.', 'X'], ['.', 'X', 'X', '.', 'X', 'X', 'X'], ['X', '.', '.', '.', 'X', '.', '.'], ['X', '.', '.', 'X', 'X', '.', '.']]) == 10\nassert solution.countBattleships([['X', '.', '.', '.', '.'], ['X', 'X', '.', '.', 'X'], ['.', '.', '.', 'X', '.'], ['.', 'X', 'X', 'X', 'X'], ['.', 'X', '.', '.', '.'], ['.', '.', 'X', 'X', 'X'], ['.', '.', 'X', '.', '.'], ['X', '.', '.', '.', 'X']]) == 7\nassert solution.countBattleships([['X', '.', '.'], ['.', 'X', '.'], ['.', '.', 'X'], ['.', 'X', '.'], ['.', '.', '.'], ['X', 'X', 'X'], ['.', 'X', '.'], ['X', '.', '.']]) == 6\nassert solution.countBattleships([['.', 'X', '.', 'X', 'X', '.'], ['X', 'X', '.', 'X', '.', '.'], ['X', 'X', '.', '.', '.', '.'], ['X', '.', '.', '.', 'X', 'X'], ['X', '.', '.', '.', '.', 'X'], ['X', 'X', 'X', '.', 'X', 'X'], ['.', '.', '.', 'X', '.', 'X'], ['X', '.', 'X', '.', '.', '.'], ['.', 'X', '.', 'X', '.', 'X'], ['X', '.', 'X', 'X', '.', 'X'], ['.', 'X', '.', 'X', 'X', 'X']]) == 14\nassert solution.countBattleships([['X', '.', 'X', '.'], ['.', 'X', '.', '.'], ['.', 'X', 'X', 'X'], ['.', 'X', 'X', '.']]) == 3\nassert solution.countBattleships([['X', 'X', '.'], ['.', '.', '.'], ['X', '.', 'X'], ['X', '.', 'X'], ['X', 'X', '.']]) == 3\nassert solution.countBattleships([['X', 'X', '.', 'X', 'X', 'X', 'X', '.', 'X', 'X', '.'], ['X', 'X', 'X', 'X', '.', 'X', '.', '.', '.', 'X', 'X']]) == 3\nassert solution.countBattleships([['X'], ['.'], ['.'], ['X'], ['X'], ['X'], ['.'], ['X']]) == 3\nassert solution.countBattleships([['X', '.'], ['X', '.'], ['X', '.'], ['.', '.'], ['X', 'X'], ['.', 'X'], ['X', 'X'], ['X', '.'], ['X', '.'], ['X', 'X']]) == 3\nassert solution.countBattleships([['X', 'X', '.', 'X', 'X', '.', '.', '.', '.', 'X'], ['X', '.', '.', '.', '.', '.', '.', 'X', 'X', 'X'], ['X', '.', '.', 'X', 'X', 'X', 'X', '.', 'X', '.'], ['.', 'X', 'X', 'X', 'X', '.', 'X', '.', '.', 'X'], ['.', '.', 'X', '.', 'X', 'X', '.', 'X', '.', '.']]) == 8\nassert solution.countBattleships([['.', 'X', 'X', '.', '.'], ['X', 'X', '.', 'X', '.']]) == 3\nassert solution.countBattleships([['X', 'X', '.', '.', '.'], ['.', 'X', 'X', 'X', '.'], ['.', 'X', 'X', 'X', 'X'], ['X', '.', 'X', '.', '.'], ['X', 'X', 'X', '.', '.'], ['.', 'X', 'X', 'X', 'X'], ['.', 'X', 'X', '.', 'X'], ['X', 'X', 'X', 'X', '.']]) == 3\nassert solution.countBattleships([['.', 'X', 'X', '.'], ['.', '.', '.', '.'], ['X', '.', '.', 'X'], ['.', '.', 'X', '.'], ['X', '.', 'X', 'X'], ['X', 'X', 'X', '.'], ['.', 'X', '.', '.'], ['X', '.', '.', 'X'], ['X', 'X', 'X', 'X'], ['X', 'X', '.', '.']]) == 7\nassert solution.countBattleships([['.', '.', '.', 'X', '.'], ['.', '.', '.', '.', '.']]) == 1\nassert solution.countBattleships([['X', '.', '.', '.', '.', 'X']]) == 2\nassert solution.countBattleships([['X', '.', '.', '.', '.', '.'], ['X', '.', 'X', '.', '.', 'X'], ['.', '.', 'X', 'X', 'X', '.'], ['.', 'X', '.', 'X', 'X', '.']]) == 4\nassert solution.countBattleships([['X', 'X', 'X', '.', '.', 'X'], ['X', 'X', 'X', '.', '.', '.'], ['.', '.', 'X', '.', 'X', 'X'], ['X', '.', '.', 'X', 'X', 'X'], ['X', '.', '.', '.', '.', 'X'], ['X', '.', 'X', 'X', '.', 'X'], ['X', '.', '.', 'X', 'X', '.'], ['X', '.', 'X', '.', '.', '.'], ['.', 'X', '.', 'X', 'X', 'X']]) == 9\nassert solution.countBattleships([['X', 'X', 'X', '.', 'X', 'X', 'X', 'X'], ['.', '.', 'X', '.', '.', 'X', '.', '.'], ['X', '.', 'X', 'X', 'X', '.', '.', '.'], ['.', 'X', '.', '.', '.', '.', 'X', '.'], ['X', '.', 'X', '.', '.', 'X', 'X', '.']]) == 8\nassert solution.countBattleships([['X', '.'], ['.', 'X']]) == 2\nassert solution.countBattleships([['X', '.', 'X', '.', 'X', 'X', '.', 'X'], ['.', '.', '.', '.', 'X', '.', '.', 'X'], ['X', '.', 'X', '.', '.', '.', '.', '.'], ['X', '.', '.', '.', '.', 'X', 'X', 'X']]) == 7\nassert solution.countBattleships([['.', 'X', 'X', '.', '.'], ['.', 'X', '.', 'X', 'X'], ['.', 'X', 'X', 'X', 'X'], ['.', 'X', '.', '.', '.'], ['X', 'X', '.', 'X', '.']]) == 4\nassert solution.countBattleships([['.', 'X', '.', 'X', '.', '.', 'X', '.'], ['X', 'X', 'X', '.', '.', '.', '.', 'X'], ['X', '.', '.', 'X', '.', '.', 'X', '.'], ['.', '.', 'X', '.', 'X', 'X', '.', '.'], ['.', '.', 'X', '.', '.', 'X', 'X', 'X'], ['.', '.', '.', '.', 'X', 'X', 'X', 'X'], ['X', '.', 'X', 'X', '.', '.', '.', '.'], ['.', '.', 'X', '.', '.', 'X', 'X', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', 'X', 'X', 'X', '.', '.', 'X', '.'], ['.', '.', 'X', 'X', 'X', 'X', '.', 'X']]) == 16\nassert solution.countBattleships([['X', 'X', '.', '.', 'X', 'X'], ['.', '.', 'X', 'X', '.', '.'], ['X', 'X', '.', '.', 'X', '.']]) == 5\nassert solution.countBattleships([['.'], ['X'], ['.'], ['.'], ['X'], ['X'], ['.']]) == 2\nassert solution.countBattleships([['X', 'X'], ['X', 'X'], ['X', 'X'], ['.', '.']]) == 1\nassert solution.countBattleships([['X', 'X'], ['.', 'X'], ['X', 'X'], ['.', 'X'], ['X', 'X']]) == 3\nassert solution.countBattleships([['X', '.', '.', 'X', '.', '.', '.', 'X', '.'], ['X', '.', '.', 'X', '.', '.', 'X', '.', '.'], ['.', '.', '.', 'X', 'X', '.', '.', 'X', '.'], ['X', 'X', '.', '.', 'X', 'X', '.', '.', 'X']]) == 7\nassert solution.countBattleships([['X', 'X'], ['X', 'X'], ['.', 'X'], ['.', '.'], ['X', '.'], ['.', '.'], ['.', '.']]) == 2\nassert solution.countBattleships([['X', '.', 'X', '.'], ['X', 'X', '.', '.'], ['.', 'X', 'X', '.'], ['X', '.', 'X', '.'], ['.', '.', 'X', '.']]) == 3\nassert solution.countBattleships([['X', 'X', '.', '.', 'X', '.', '.'], ['.', 'X', '.', 'X', 'X', '.', '.'], ['X', '.', 'X', 'X', '.', '.', 'X'], ['X', 'X', '.', 'X', '.', '.', '.']]) == 6\nassert solution.countBattleships([['X', '.', 'X', 'X', '.', '.', 'X'], ['X', 'X', '.', '.', '.', '.', 'X'], ['.', '.', 'X', 'X', 'X', 'X', '.'], ['.', 'X', '.', 'X', '.', 'X', '.'], ['.', '.', '.', '.', 'X', 'X', 'X'], ['.', 'X', 'X', '.', '.', '.', '.'], ['.', 'X', 'X', 'X', 'X', '.', '.'], ['X', 'X', 'X', 'X', '.', '.', '.'], ['X', 'X', 'X', 'X', '.', 'X', '.']]) == 9\nassert solution.countBattleships([['.', '.', 'X', '.', 'X', 'X', 'X', '.', 'X', '.', '.'], ['.', 'X', '.', '.', 'X', 'X', '.', 'X', '.', '.', '.'], ['.', '.', 'X', 'X', '.', 'X', '.', 'X', '.', 'X', 'X'], ['X', '.', 'X', 'X', '.', '.', 'X', 'X', 'X', '.', '.'], ['X', 'X', '.', 'X', '.', 'X', '.', 'X', 'X', 'X', 'X'], ['.', '.', 'X', 'X', 'X', 'X', 'X', '.', '.', '.', '.'], ['.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.'], ['X', '.', '.', 'X', 'X', 'X', '.', '.', '.', 'X', 'X'], ['X', '.', 'X', 'X', 'X', '.', 'X', 'X', '.', 'X', 'X'], ['.', '.', 'X', '.', '.', '.', 'X', 'X', '.', 'X', '.']]) == 15\nassert solution.countBattleships([['.', 'X', '.', 'X', 'X', '.', '.'], ['.', '.', '.', '.', 'X', 'X', '.'], ['X', 'X', 'X', '.', '.', '.', '.'], ['.', 'X', '.', '.', 'X', '.', 'X'], ['X', '.', 'X', 'X', 'X', '.', 'X'], ['X', '.', '.', 'X', '.', 'X', '.'], ['X', 'X', 'X', '.', 'X', '.', '.'], ['.', 'X', 'X', 'X', '.', '.', 'X'], ['.', 'X', 'X', 'X', '.', '.', '.'], ['X', 'X', 'X', '.', 'X', '.', 'X'], ['.', 'X', '.', 'X', 'X', '.', 'X']]) == 14\nassert solution.countBattleships([['X', '.', 'X', 'X'], ['.', 'X', 'X', 'X'], ['X', '.', 'X', 'X'], ['.', 'X', '.', 'X'], ['.', '.', 'X', 'X'], ['X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X'], ['X', '.', '.', '.'], ['X', 'X', '.', 'X'], ['X', 'X', '.', 'X']]) == 8\nassert solution.countBattleships([['X', 'X', '.', 'X', 'X', '.']]) == 2\nassert solution.countBattleships([['X', 'X'], ['X', '.'], ['.', 'X'], ['.', 'X'], ['X', '.'], ['X', 'X'], ['.', '.'], ['.', 'X'], ['X', '.'], ['X', 'X']]) == 5\nassert solution.countBattleshipsnassert solution.countBattleships([['X'], ['X'], ['X']]) == 1\nassert solution.countBattleshipsnassert solution.countBattleships([['.', '.', 'X']]) == 1\nassert solution.countBattleships([['X', 'X', '.', '.', '.', '.', 'X', '.'], ['X', '.', 'X', '.', 'X', '.', 'X', '.'], ['X', '.', 'X', 'X', '.', 'X', '.', '.'], ['.', '.', 'X', 'X', 'X', 'X', 'X', '.'], ['X', '.', '.', 'X', '.', '.', '.', '.']]) == 6\nassert solution.countBattleships([['.', '.', 'X', 'X', '.', 'X', 'X'], ['X', '.', '.', 'X', '.', 'X', 'X'], ['.', 'X', '.', '.', '.', '.', '.'], ['.', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', '.', '.', '.', '.', '.', '.'], ['X', '.', '.', '.', '.', '.', '.'], ['.', 'X', '.', '.', 'X', 'X', '.']]) == 7\nassert solution.countBattleships([['X', '.'], ['X', '.'], ['.', 'X'], ['X', 'X'], ['.', '.'], ['X', '.'], ['.', 'X'], ['.', '.']]) == 5\nassert solution.countBattleships([['X', 'X', '.', 'X'], ['X', 'X', '.', '.'], ['X', '.', '.', 'X'], ['X', 'X', '.', '.'], ['X', 'X', '.', '.'], ['.', 'X', '.', 'X'], ['X', '.', 'X', '.'], ['.', '.', '.', '.'], ['X', 'X', '.', '.']]) == 7\nassert solution.countBattleships([['.'], ['X'], ['.'], ['X'], ['X']]) == 2\nassert solution.countBattleships([['.', '.'], ['.', '.'], ['.', '.']]) == 0\nassert solution.countBattleships([['X'], ['.'], ['.'], ['X'], ['X'], ['X'], ['X']]) == 2\nassert solution.countBattleships([['X', 'X'], ['.', '.'], ['X', '.'], ['X', 'X'], ['X', 'X'], ['.', '.'], ['X', '.'], ['.', '.'], ['X', 'X'], ['.', 'X']]) == 4",
  "inefficient_solution": "class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:\n        m, n = len(board), len(board[0])\n        battleship_count = 0\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        directions = [(0, 1), (1, 0)]\n        \n        for i in range(m):\n            for j in range(n):\n                if visited[i][j] or board[i][j] == '.':\n                    continue\n                battleship_count += 1\n                to_visit = [(i, j)]\n                while to_visit:\n                    x, y = to_visit.pop()\n                    visited[x][y] = True\n                    for dx, dy in directions:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < m and 0 <= ny < n and board[nx][ny] == 'X' and not visited[nx][ny]:\n                            to_visit.append((nx, ny))\n        \n        return battleship_count",
  "is_python": true
}