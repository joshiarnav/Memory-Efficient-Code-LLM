{
  "problem_idx": 473,
  "task_name": "Matchsticks to Square",
  "markdown_description": "\nYou are given an integer array `matchsticks` where `matchsticks[i]` is the length of the `ith` matchstick. You want to use **all the matchsticks** to make one square. You **should not break** any stick, but you can link them up, and each matchstick must be used **exactly one time**.\n\n\nReturn `true` if you can make this square and `false` otherwise.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0473.Matchsticks%20to%20Square/images/matchsticks1-grid.jpg)\n\n```\n\n**Input:** matchsticks = [1,1,2,2,2]\n**Output:** true\n**Explanation:** You can form a square with length 2, one side of the square came two sticks with length 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** matchsticks = [3,3,3,3,4]\n**Output:** false\n**Explanation:** You cannot find a way to form a square with all the matchsticks.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= matchsticks.length <= 15`\n* `1 <= matchsticks[i] <= 108`\n\n\n",
  "canonical_solution": "class Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n        def dfs(u):\n            if u == len(matchsticks):\n                return True\n            for i in range(4):\n                if i > 0 and edges[i - 1] == edges[i]:\n                    continue\n                edges[i] += matchsticks[u]\n                if edges[i] <= x and dfs(u + 1):\n                    return True\n                edges[i] -= matchsticks[u]\n            return False\n\n        x, mod = divmod(sum(matchsticks), 4)\n        if mod or x < max(matchsticks):\n            return False\n        edges = [0] * 4\n        matchsticks.sort(reverse=True)\n        return dfs(0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def makesquare(self, matchsticks):\n        def dfs(u):\n            if u == len(matchsticks):\n                return True\n            for i in range(4):\n                if i > 0 and edges[i - 1] == edges[i]:\n                    continue\n                edges[i] += matchsticks[u]\n                if edges[i] <= x and dfs(u + 1):\n                    return True\n                edges[i] -= matchsticks[u]\n            return False\n\n        x, mod = divmod(sum(matchsticks), 4)\n        if mod or x < max(matchsticks):\n            return False\n        edges = [0] * 4\n        matchsticks.sort(reverse=True)\n        return dfs(0)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random matchsticks list\n    matchsticks = random.sample(range(1, 101), random.randint(1, 15))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.makesquare(matchsticks)\n\n    return matchsticks, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        matchsticks, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.makesquare(matchsticks) == expected_result\n        print(f\"assert solution.makesquare({matchsticks}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.makesquare({matchsticks}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.makesquare([98, 94, 81, 75, 74, 53, 51, 37, 27, 26, 23, 21, 11, 1]) == True\nassert solution.makesquare([52, 96, 35, 85, 65, 93, 29]) == False\nassert solution.makesquare([46, 51, 67, 72, 34, 4, 35, 36, 97, 89, 77, 7]) == False\nassert solution.makesquare([60]) == False\nassert solution.makesquare([99, 94, 92, 91, 87, 81, 80, 72, 54, 43, 42, 33, 4]) == False\nassert solution.makesquare([72, 43, 93, 94, 7, 20, 18, 2, 13]) == False\nassert solution.makesquare([11, 36, 90, 27, 91, 49, 79, 39, 65, 23, 9]) == False\nassert solution.makesquare([90, 12, 58, 82, 53, 16, 30, 19, 9, 64, 80, 27, 95, 17, 62]) == False\nassert solution.makesquare([73, 68, 52, 37, 31, 20, 10, 9]) == False\nassert solution.makesquare([4, 6, 34]) == False\nassert solution.makesquare([13, 90, 26, 86, 87, 92, 3]) == False\nassert solution.makesquare([9, 93, 17, 18, 79, 95, 52, 99, 14, 72, 70, 84]) == False\nassert solution.makesquare([99]) == False\nassert solution.makesquare([33, 30]) == False\nassert solution.makesquare([30, 92, 93, 1, 28, 48, 13, 37]) == False\nassert solution.makesquare([76, 41, 71, 72, 54, 87, 30, 14, 7, 70, 96, 74, 58, 89, 10]) == False\nassert solution.makesquare([53, 73]) == False\nassert solution.makesquare([91, 99, 33, 26, 31, 35, 25, 30]) == False\nassert solution.makesquare([5, 100, 69, 23, 35, 86, 53, 24]) == False\nassert solution.makesquare([67, 7]) == False\nassert solution.makesquare([94, 93, 82, 44, 38, 34, 25, 22]) == False\nassert solution.makesquare([85]) == False\nassert solution.makesquare([100, 99, 94, 84, 69, 52, 43, 30, 26, 23, 8]) == False\nassert solution.makesquare([94, 5, 48, 91]) == False\nassert solution.makesquare([100, 2, 72, 95]) == False\nassert solution.makesquare([53, 13, 45, 59, 3, 10, 89, 82, 78, 98, 88, 97, 39, 20, 80]) == False\nassert solution.makesquare([93, 24]) == False\nassert solution.makesquare([23, 29, 96, 70, 84, 5]) == False\nassert solution.makesquare([98, 90, 67, 66, 55, 45, 27, 26, 25, 17]) == False\nassert solution.makesquare([96, 90, 89, 78, 77, 65, 64, 29, 26, 23, 12, 6, 5]) == False\nassert solution.makesquare([20]) == False\nassert solution.makesquare([23, 51, 61, 57, 5, 95, 16, 93, 45]) == False\nassert solution.makesquare([77, 56, 3, 42]) == False\nassert solution.makesquare([48, 41, 8, 97, 72, 22]) == False\nassert solution.makesquare([4, 29, 3, 27, 11, 35, 81, 95, 32]) == False\nassert solution.makesquare([23, 54, 88, 15, 71, 29, 94]) == False\nassert solution.makesquare([60, 48, 18, 85, 51, 95]) == False\nassert solution.makesquare([10, 57, 37, 62, 67, 98, 56, 83, 36]) == False\nassert solution.makesquare([41, 88, 76, 4, 92]) == False\nassert solution.makesquare([71, 6, 87, 53, 75, 51, 26, 55, 99, 13, 33]) == False\nassert solution.makesquare([89, 71, 37]) == False\nassert solution.makesquare([94, 88, 81, 67, 66, 28, 19, 14, 7]) == False\nassert solution.makesquare([98, 69, 34, 53, 39]) == False\nassert solution.makesquare([35, 93, 72, 6, 44, 62, 63, 7, 90, 10, 22, 50, 85, 39]) == False\nassert solution.makesquare([17, 62]) == False\nassert solution.makesquare([30, 57, 98, 46, 80, 65, 63, 40, 86]) == False\nassert solution.makesquare([15, 5, 66, 10, 22, 20, 55]) == False\nassert solution.makesquare([7, 24, 31, 74, 41]) == False\nassert solution.makesquare([33, 7, 75, 67, 51, 3]) == False\nassert solution.makesquare([62, 60, 52, 51, 33, 8, 6]) == False\nassert solution.makesquare([43, 85, 62, 19, 66]) == False\nassert solution.makesquare([97, 25, 51, 58, 93, 8, 59, 91, 50, 70, 47]) == False\nassert solution.makesquare([29, 13, 11, 64, 24]) == False\nassert solution.makesquare([1, 6, 48, 83, 52]) == False\nassert solution.makesquare([33]) == False\nassert solution.makesquare([34, 65, 56, 55, 13, 18, 75, 45, 43, 57]) == False\nassert solution.makesquare([86, 84, 85, 81, 70, 89, 10, 36, 3, 46, 40, 79, 80, 66]) == False\nassert solution.makesquare([33, 28, 86, 4, 74, 96, 42, 62, 88]) == False\nassert solution.makesquare([92, 82, 63, 56, 53, 38, 37, 20, 16, 11]) == False\nassert solution.makesquare([42, 66, 85, 64, 50, 35, 19, 97, 12]) == False\nassert solution.makesquare([52, 2, 63, 45, 79, 55]) == False\nassert solution.makesquare([44, 51, 92]) == False\nassert solution.makesquare([32, 46, 6, 48, 74]) == False\nassert solution.makesquare([95, 81, 80, 73, 55, 52, 47, 45, 43, 20, 17]) == False\nassert solution.makesquare([27, 99, 93, 53]) == False\nassert solution.makesquare([28, 69, 61, 81, 58, 53, 39, 86, 66, 95, 77]) == False\nassert solution.makesquare([98, 13]) == False\nassert solution.makesquare([89, 12, 84, 95, 20]) == False\nassert solution.makesquare([70, 58, 72, 81, 22, 32, 29, 68, 45, 78, 1, 60, 33, 12]) == False\nassert solution.makesquare([90, 23, 59, 26, 46, 33, 27, 38, 31, 99, 4, 8, 14]) == False\nassert solution.makesquare([96, 72]) == False\nassert solution.makesquare([13, 92, 66, 19, 78, 22, 4, 83, 17, 87, 25]) == False\nassert solution.makesquare([65, 5, 77, 82, 14, 22, 39, 86, 64, 4, 66, 41]) == False\nassert solution.makesquare([67, 16, 42, 47, 46, 53]) == False\nassert solution.makesquare([66, 54, 35, 31, 26, 19, 16, 14, 3]) == False\nassert solution.makesquare([33, 16, 47, 13, 100, 67, 5, 44, 26, 1, 69]) == False\nassert solution.makesquare([67, 35, 46, 85, 44, 34]) == False\nassert solution.makesquare([77, 38, 51, 59, 92, 10, 35, 57, 4, 82, 13, 23, 30]) == False\nassert solution.makesquare([17, 30, 79, 89, 7, 29, 16, 82, 44, 80]) == False\nassert solution.makesquare([99, 98, 97, 80, 39, 35, 17, 16, 10, 9]) == False\nassert solution.makesquare([15, 49, 68, 3, 10, 82]) == False\nassert solution.makesquare([27, 59, 45]) == False\nassert solution.makesquare([86, 84, 80, 49, 40, 36, 27, 2]) == False\nassert solution.makesquare([70, 93, 88, 27, 22, 26, 94, 43, 10, 42, 46, 100]) == False\nassert solution.makesquare([29]) == False\nassert solution.makesquare([54, 14, 88, 12]) == False\nassert solution.makesquare([54, 51, 99]) == False\nassert solution.makesquare([87, 60, 90, 47, 33, 61, 1, 54, 16, 72, 69, 4, 89, 44, 27]) == False\nassert solution.makesquare([23, 28, 44, 14, 89, 94, 47, 16, 86, 3, 29]) == False\nassert solution.makesquare([78, 76, 66, 64, 51, 49, 42, 29, 27, 14]) == False\nassert solution.makesquare([26]) == False\nassert solution.makesquare([30, 93, 81, 43, 9, 97, 63, 24, 20, 53, 64, 21, 17, 76]) == False\nassert solution.makesquare([81, 76, 75, 74, 68, 63, 49, 41, 37, 24, 19, 5]) == False\nassert solution.makesquare([84, 96, 20, 91, 64, 37, 53, 19, 5, 59, 95, 16, 33, 3, 30]) == False\nassert solution.makesquare([54, 26, 14, 62, 22, 68, 99]) == False\nassert solution.makesquare([98, 86, 82, 77, 64, 63, 42, 30, 29, 21, 4]) == False\nassert solution.makesquare([85, 95, 6, 47]) == False\nassert solution.makesquare([36, 34, 3]) == False\nassert solution.makesquare([44, 46, 41, 74, 28, 56, 79, 11]) == False\nassert solution.makesquare([100, 67, 85, 18, 1, 80, 13, 78, 70, 93, 76]) == False",
  "inefficient_solution": "class Solution:\n    def makesquare(self, matchsticks):\n        def dfs(u):\n            if u == len(matchsticks):\n                return True\n            for _ in range(1000000):\n                for i in range(4):\n                    if i > 0 and edges[i - 1] == edges[i]:\n                        continue\n                    edges[i] += matchsticks[u]\n                    if edges[i] <= x and dfs(u + 1):\n                        return True\n                    edges[i] -= matchsticks[u]\n            return False\n\n        x, mod = divmod(sum(matchsticks), 4)\n        if mod or x < max(matchsticks):\n            return False\n        edges = [0] * 400000\n        matchsticks.sort(reverse=True)\n        return dfs(0)",
  "is_python": true
}