{
  "problem_idx": 107,
  "task_name": "Binary Tree Level Order Traversal II",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the bottom-up level order traversal of its nodes' values*. (i.e., from left to right, level by level from leaf to root).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0107.Binary%20Tree%20Level%20Order%20Traversal%20II/images/tree1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** [[15,7],[9,20],[3]]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [1]\n**Output:** [[1]]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** []\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 2000]`.\n* `-1000 <= Node.val <= 1000`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        while q:\n            t = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                t.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t)\n        return ans[::-1]\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\nfrom typing import List, Optional\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        while q:\n            t = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                t.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t)\n        return ans[::-1]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate binary tree node values\n    values = random.choices(range(-1000, 1001), k=random.randint(0, 10))\n    \n    # Generate binary tree nodes\n    nodes = [TreeNode(val) for val in values]\n  \n    # Assign left and right pointers\n    for i in range(len(nodes)):\n        left_index = 2 * i + 1\n        right_index = 2 * i + 2\n        if left_index < len(nodes):\n            nodes[i].left = nodes[left_index]\n        if right_index < len(nodes):\n            nodes[i].right = nodes[right_index]\n\n    # Generate root node\n    root = nodes[0] if nodes else None\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.levelOrderBottom(root)\n\n    return root, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.levelOrderBottom(root) == expected_result\n        print(f\"assert solution.levelOrderBottom({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.levelOrderBottom({root}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d50>) == [[-135]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380e10>) == [[-112, 682, 333, 660], [388, 831], [-992]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f50>) == [[106], [414, 271, -39, -891], [-279, 515], [251]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380fd0>) == [[165], [-261]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380e10>) == [[-710, 174, -557], [529, -519, -714, 21], [-106, 154], [-938]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[-198, -766, 8], [103, 317], [879]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380dd0>) == [[-402, 626], [873, -271, 167, -671], [-572, 426], [569]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[216, -120, 103], [-253, 541], [-138]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381210>) == [[905, 329, 662], [-313, 763], [-189]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d3813d0>) == [[-492], [-455, -137], [646]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d50>) == [[618], [-999, -842, 259, 136], [574, -131], [718]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f10>) == [[-695], [-597, -706, -590, -774], [219, -397], [401]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d10>) == [[2], [-645, 298, -953, -939], [906, 167], [879]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380fd0>) == [[682, 738], [285]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[-773, -739, -231, 822], [-366, 504], [975]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[222, -355, -878], [-875, 361, 214, -219], [280, 746], [854]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f10>) == [[-590, -343, -872], [720, 640], [112]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380e90>) == [[381], [-533, -244], [-68]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[-112, 476], [379]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381150>) == [[-193, -259], [0, 216], [966]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380e90>) == [[-406], [859, -10], [679]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[351], [-957]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d3813d0>) == [[-294], [-657, 105, 134, -336], [-597, -759], [-222]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380dd0>) == [[308, -154], [687, -871, -387, 63], [558, 933], [-777]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d90>) == [[-490, 268, 397, 346], [385, -440], [357]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381150>) == [[-53, -512], [-705, 588], [-7]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380dd0>) == [[-834], [112, 252], [-94]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381410>) == [[487, -785], [869, -930], [-296]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381190>) == [[227, -559], [-619, 680], [-525]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380dd0>) == [[213, -381], [-777]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381410>) == [[547], [602, -107], [-933]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[341, 785, -579, -910], [387, -851], [-499]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d50>) == [[-285]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380fd0>) == [[213], [788]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380e50>) == [[-414], [-637, 75, 421, -341], [89, 957], [736]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f10>) == [[-961]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381150>) == [[-628, 311], [-120, 423, 191, -190], [-45, 529], [404]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380fd0>) == [[-950, 70, -817], [-530, -476, 203, 685], [-417, -254], [-995]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d10>) == [[-485]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[807]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381150>) == [[-696, 811], [-180]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d10>) == [[851], [154, 466], [-202]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[292, 878], [-494, -69, 651, -717], [886, 455], [-790]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381150>) == [[-157], [-24, -661], [-311]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d10>) == [[-178], [-291, 399], [-590]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[-474, 28], [282]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381290>) == [[-17]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f10>) == [[469, 603], [-209, 598], [896]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381190>) == [[613, -240, -898], [259, 296], [278]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381150>) == [[-120], [951]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f10>) == [[347, -171], [217]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381210>) == [[-958, 203, 725], [864, -954], [161]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[782, -39, -942, -35], [441, 579], [-461]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381110>) == [[-675, -663, -838], [69, -291], [-107]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380dd0>) == [[-916, -811], [464]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[440, 639], [359, 973, 628, -50], [46, 418], [-185]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381190>) == [[900, 977, 725], [990, 945], [-724]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d90>) == [[768], [-34, 286, -809, -476], [577, -860], [133]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381210>) == [[465, 25, 964, 552], [946, 940], [-733]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f90>) == [[35], [675, -365], [-273]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381390>) == [[-763, -472, -911, -36], [-985, 808], [-383]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d3811d0>) == [[-395, -171], [-676]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f90>) == [[131, 132, 224], [559, -931, 25, 763], [-963, 989], [-713]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381390>) == [[-756, -237], [110]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381190>) == [[-96, -262], [175, -501], [-741]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f90>) == [[412, 781], [-819]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381390>) == [[-432, 368, 140], [-277, -925, 765, 445], [-296, 817], [751]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[271, 606, -515], [-369, 479, 274, 795], [911, 398], [-584]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380f90>) == [[-850], [437, 7], [-151]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381390>) == [[-902], [311]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[148, -215], [462, -453, 194, 384], [224, -146], [-212]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381410>) == [[443, -343], [283, -928], [550]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[-584], [446, 998], [-834]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381450>) == [[-296], [-562, -894], [-410]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381390>) == [[-632, -845, 991, 797], [0, -620], [281]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380d10>) == [[284, 384], [636, 111], [181]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380e50>) == [[34, -681, -133], [-37, -682], [326]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[111, -517], [-24]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381110>) == [[-346], [83, 297], [737]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[-736, 951], [605]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380e50>) == [[-202], [-422]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381110>) == [[310, 947, -385], [743, -69, -393, 666], [657, -447], [-638]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381250>) == [[806, 848, -215], [-892, -889, -63, -722], [-980, 665], [845]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381410>) == [[-233]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d3813d0>) == [[631, -168, -638, -158], [-476, -442], [-242]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381110>) == [[-301], [-772, 390, 488, 259], [-345, 384], [-375]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d381190>) == [[51, -377], [-498]]\nassert solution.levelOrderBottom(None) == []\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[-930], [-675]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d3813d0>) == [[-68], [-80, 575, 350, -658], [-766, -163], [464]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380e90>) == [[228], [-586, 181], [-485]]\nassert solution.levelOrderBottom(<__main__.TreeNode object at 0x7fa87d380ed0>) == [[-722], [-32]]",
  "inefficient_solution": "def levelOrderBottom(root: Optional[TreeNode]) -> List[List[int]]:\n    ans = []\n    if root is None:\n        return ans\n    \n    q = deque([root])\n    q2 = deque([root])\n    while q:\n        t = []\n        for _ in range(len(q)):\n            node = q.popleft()\n            t.append(node.val)\n            if node.left:\n                q.append(node.left)\n                q2.append(node.left)\n            if node.right:\n                q.append(node.right)\n                q2.append(node.right)\n        ans.append(t)\n        t2 = []\n        for _ in range(len(q2)):\n            node = q2.popleft()\n            t2.append(node.val)\n        q2.extend(t2)\n    return ans[::-1]",
  "is_python": true
}