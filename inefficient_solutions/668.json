{
  "problem_idx": 668,
  "task_name": "Kth Smallest Number in Multiplication Table",
  "markdown_description": "\nNearly everyone has used the [Multiplication Table](https://en.wikipedia.org/wiki/Multiplication_table). The multiplication table of size `m x n` is an integer matrix `mat` where `mat[i][j] == i * j` (**1-indexed**).\n\n\nGiven three integers `m`, `n`, and `k`, return *the* `kth` *smallest element in the* `m x n` *multiplication table*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0668.Kth%20Smallest%20Number%20in%20Multiplication%20Table/images/multtable1-grid.jpg)\n\n```\n\n**Input:** m = 3, n = 3, k = 5\n**Output:** 3\n**Explanation:** The 5th smallest number is 3.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0668.Kth%20Smallest%20Number%20in%20Multiplication%20Table/images/multtable2-grid.jpg)\n\n```\n\n**Input:** m = 2, n = 3, k = 6\n**Output:** 6\n**Explanation:** The 6th smallest number is 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= m, n <= 3 * 104`\n* `1 <= k <= m * n`\n\n\n",
  "canonical_solution": "class Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n        left, right = 1, m * n\n        while left < right:\n            mid = (left + right) >> 1\n            cnt = 0\n            for i in range(1, m + 1):\n                cnt += min(mid // i, n)\n            if cnt >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findKthNumber(self, m, n, k):\n        left, right = 1, m * n\n        while left < right:\n            mid = (left + right) >> 1\n            cnt = 0\n            for i in range(1, m + 1):\n                cnt += min(mid // i, n)\n            if cnt >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for m, n, and k\n    m = random.randint(1, 1001)\n    n = random.randint(1, 1001)\n    k = random.randint(1, m * n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findKthNumber(m, n, k)\n\n    return m, n, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        m, n, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findKthNumber(m, n, k) == expected_result\n        print(f\"assert solution.findKthNumber({m}, {n}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findKthNumber({m}, {n}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findKthNumber(802, 488, 222929) == 90774\nassert solution.findKthNumber(353, 193, 15020) == 3978\nassert solution.findKthNumber(427, 932, 63865) == 15105\nassert solution.findKthNumber(437, 333, 108367) == 55094\nassert solution.findKthNumber(608, 993, 89762) == 20704\nassert solution.findKthNumber(418, 394, 93913) == 38346\nassert solution.findKthNumber(324, 308, 98762) == 86100\nassert solution.findKthNumber(44, 552, 547) == 130\nassert solution.findKthNumber(291, 434, 105147) == 60916\nassert solution.findKthNumber(701, 539, 53259) == 12138\nassert solution.findKthNumber(864, 237, 24300) == 5346\nassert solution.findKthNumber(701, 830, 453592) == 241713\nassert solution.findKthNumber(108, 749, 41092) == 15696\nassert solution.findKthNumber(371, 745, 13937) == 2550\nassert solution.findKthNumber(280, 113, 7937) == 2220\nassert solution.findKthNumber(447, 297, 82535) == 35868\nassert solution.findKthNumber(290, 966, 278381) == 249935\nassert solution.findKthNumber(30, 750, 17261) == 9270\nassert solution.findKthNumber(728, 605, 395577) == 257754\nassert solution.findKthNumber(716, 876, 148448) == 39674\nassert solution.findKthNumber(965, 213, 91109) == 32040\nassert solution.findKthNumber(849, 540, 406506) == 258842\nassert solution.findKthNumber(718, 272, 4782) == 810\nassert solution.findKthNumber(662, 876, 119372) == 30420\nassert solution.findKthNumber(288, 7, 164) == 64\nassert solution.findKthNumber(680, 560, 311447) == 175932\nassert solution.findKthNumber(820, 410, 299113) == 191678\nassert solution.findKthNumber(825, 910, 438041) == 181152\nassert solution.findKthNumber(316, 3, 224) == 123\nassert solution.findKthNumber(10, 499, 2033) == 798\nassert solution.findKthNumber(20, 729, 2153) == 600\nassert solution.findKthNumber(799, 340, 80910) == 23667\nassert solution.findKthNumber(543, 525, 15647) == 2896\nassert solution.findKthNumber(738, 703, 384335) == 193960\nassert solution.findKthNumber(639, 178, 45845) == 15400\nassert solution.findKthNumber(198, 874, 58331) == 18034\nassert solution.findKthNumber(186, 795, 128731) == 79695\nassert solution.findKthNumber(354, 127, 42479) == 31080\nassert solution.findKthNumber(349, 92, 9173) == 2698\nassert solution.findKthNumber(790, 779, 222077) == 70286\nassert solution.findKthNumber(944, 706, 176698) == 49217\nassert solution.findKthNumber(647, 481, 128584) == 43488\nassert solution.findKthNumber(44, 951, 37006) == 23780\nassert solution.findKthNumber(608, 115, 57467) == 32841\nassert solution.findKthNumber(645, 248, 2024) == 352\nassert solution.findKthNumber(659, 805, 521377) == 435897\nassert solution.findKthNumber(251, 386, 89500) == 61870\nassert solution.findKthNumber(706, 644, 390482) == 236082\nassert solution.findKthNumber(870, 837, 606401) == 350588\nassert solution.findKthNumber(265, 326, 3598) == 660\nassert solution.findKthNumber(581, 16, 2726) == 904\nassert solution.findKthNumber(964, 684, 21454) == 3586\nassert solution.findKthNumber(428, 456, 93262) == 34124\nassert solution.findKthNumber(742, 715, 94621) == 23042\nassert solution.findKthNumber(129, 495, 47119) == 23826\nassert solution.findKthNumber(622, 969, 570035) == 416118\nassert solution.findKthNumber(904, 831, 570672) == 295481\nassert solution.findKthNumber(441, 134, 51167) == 31476\nassert solution.findKthNumber(260, 67, 112) == 31\nassert solution.findKthNumber(504, 800, 110925) == 31390\nassert solution.findKthNumber(549, 625, 257838) == 132098\nassert solution.findKthNumber(831, 264, 97207) == 34153\nassert solution.findKthNumber(876, 776, 412489) == 175461\nassert solution.findKthNumber(847, 434, 311665) == 184926\nassert solution.findKthNumber(639, 372, 99068) == 33674\nassert solution.findKthNumber(983, 945, 702843) == 362310\nassert solution.findKthNumber(470, 569, 26467) == 5530\nassert solution.findKthNumber(719, 248, 76620) == 26506\nassert solution.findKthNumber(17, 50, 243) == 82\nassert solution.findKthNumber(136, 740, 13660) == 3157\nassert solution.findKthNumber(662, 128, 8931) == 1950\nassert solution.findKthNumber(219, 214, 29018) == 12625\nassert solution.findKthNumber(299, 194, 1024) == 190\nassert solution.findKthNumber(636, 716, 154733) == 47712\nassert solution.findKthNumber(762, 504, 181074) == 65640\nassert solution.findKthNumber(465, 637, 57998) == 14592\nassert solution.findKthNumber(99, 425, 27497) == 12508\nassert solution.findKthNumber(322, 698, 56626) == 15554\nassert solution.findKthNumber(354, 574, 110034) == 43401\nassert solution.findKthNumber(37, 793, 15036) == 5904\nassert solution.findKthNumber(239, 136, 11526) == 3675\nassert solution.findKthNumber(991, 374, 163504) == 57200\nassert solution.findKthNumber(671, 59, 38362) == 30470\nassert solution.findKthNumber(16, 849, 2859) == 848\nassert solution.findKthNumber(477, 473, 206000) == 138700\nassert solution.findKthNumber(542, 938, 153809) == 45150\nassert solution.findKthNumber(923, 887, 55051) == 10434\nassert solution.findKthNumber(134, 816, 27522) == 7638\nassert solution.findKthNumber(691, 309, 115641) == 45621\nassert solution.findKthNumber(277, 31, 7799) == 5301\nassert solution.findKthNumber(554, 327, 27529) == 6448\nassert solution.findKthNumber(582, 506, 143341) == 52932\nassert solution.findKthNumber(759, 86, 38677) == 16354\nassert solution.findKthNumber(776, 131, 78374) == 41470\nassert solution.findKthNumber(483, 192, 41807) == 14874\nassert solution.findKthNumber(755, 250, 73364) == 24150\nassert solution.findKthNumber(553, 875, 61028) == 13470\nassert solution.findKthNumber(896, 968, 515939) == 216250\nassert solution.findKthNumber(759, 481, 278001) == 144434\nassert solution.findKthNumber(679, 783, 53612) == 11172",
  "inefficient_solution": "class Solution:\n    def findKthNumber(self, m: int, n: int, k: int) -> int:\n        table = [[i * j for j in range(1, n + 1)] for i in range(1, m + 1)]\n        flattened_table = [num for row in table for num in row]\n        flattened_table.sort()\n        return flattened_table[k - 1]",
  "is_python": true
}