{
  "problem_idx": 2108,
  "task_name": "Find First Palindromic String in the Array",
  "markdown_description": "\nGiven an array of strings `words`, return *the first **palindromic** string in the array*. If there is no such string, return *an **empty string*** `\"\"`.\n\n\nA string is **palindromic** if it reads the same forward and backward.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\n**Output:** \"ada\"\n**Explanation:** The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"notapalindrome\",\"racecar\"]\n**Output:** \"racecar\"\n**Explanation:** The first and only string that is palindromic is \"racecar\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"def\",\"ghi\"]\n**Output:** \"\"\n**Explanation:** There are no palindromic strings, so the empty string is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 100`\n* `1 <= words[i].length <= 100`\n* `words[i]` consists only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        return next((w for w in words if w == w[::-1]), \"\")\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def firstPalindrome(self, words):\n        return next((w for w in words if w == w[::-1]), \"\")\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a list of random strings\n    words = [\"\".join(random.choices(string.ascii_lowercase, k=random.randint(1, 10))) for _ in range(random.randint(1, 10))]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.firstPalindrome(words)\n\n    return words, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.firstPalindrome(words) == expected_result\n        print(f\"assert solution.firstPalindrome({words}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.firstPalindrome({words}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.firstPalindrome(['p']) == p\nassert solution.firstPalindrome(['yyrqgx', 'jeqclktulz', 'ggzers', 'jqsikl', 'lyt', 'fynlym', 'qgpbcyi', 'avfflrbr']) == \nassert solution.firstPalindrome(['pta', 'atcpnus', 'cnfunxxe', 'roz', 'kugcox', 'yztzrqyeon', 't', 'cqgns', 'ehqenati', 'cmzycmn']) == t\nassert solution.firstPalindrome(['syxdnf', 'ukoid', 'uzb', 'zblaci', 'oznhg', 'okrpyqhqv', 'hva', 'fiafhw', 'w', 'svaviltwd']) == w\nassert solution.firstPalindrome(['ijzvfneijm', 'qivzioy', 'hsopddo']) == \nassert solution.firstPalindrome(['ajcgsnditp', 'rdnmcrbz']) == \nassert solution.firstPalindrome(['knpoirdx', 'ugevds', 'fxzhshwfw', 'quux', 'fikizptkk', 'oyl', 'qvnumtv']) == \nassert solution.firstPalindrome(['oongqtt', 'xefnuup']) == \nassert solution.firstPalindrome(['pcn', 'pqgubp', 'sqthtw', 'r']) == r\nassert solution.firstPalindrome(['wxbanzecu']) == \nassert solution.firstPalindrome(['di', 'vwbyfe', 'nepmccbf', 'o', 'cg', 'htieiwal', 'kin']) == o\nassert solution.firstPalindrome(['vpndkj', 'xffpjgoqj']) == \nassert solution.firstPalindrome(['kvw', 'pax', 'paiswa', 'blflnt', 'tyvij', 'wozdm']) == \nassert solution.firstPalindrome(['brovn', 'l', 'hc', 'fpzptig', 'izhwf', 'tym', 'iju', 'nnadwd']) == l\nassert solution.firstPalindrome(['oyiwomvpv', 'uumkmujlm']) == \nassert solution.firstPalindrome(['lumekeuln', 'wwmxcngtdu', 'rkwjtbhxc']) == \nassert solution.firstPalindrome(['q', 'ebmnhkzmo', 'axqz', 'bfxmetaloa', 'rjykersql', 'rh', 'kuytejkozw', 'r', 'hl', 'lcpr']) == q\nassert solution.firstPalindrome(['aezzikwkk', 'vrldtbbro']) == \nassert solution.firstPalindrome(['fv', 'agy', 'k', 'b', 'xoz', 'molkpkv', 'mmudavldyd']) == k\nassert solution.firstPalindrome(['bdxci', 'w', 'pqwk', 'ym', 'elzhw', 'md']) == w\nassert solution.firstPalindrome(['dr', 'tlkfe', 'iwr', 'irhb', 'azav', 'qev']) == \nassert solution.firstPalindrome(['njvapllbcl', 'xixmuy', 'odziffjtqc', 'wzcfkenbp', 'wxfc']) == \nassert solution.firstPalindrome(['cnlouirjc', 'jvkzh', 'jhmne', 'nbih', 'y', 'qzipwr', 'ygwhwekg', 'ywqmyy', 'wys']) == y\nassert solution.firstPalindrome(['tki', 'lwyiqjrdnz', 'cm', 'yvmleamqs']) == \nassert solution.firstPalindrome(['ndiozsm', 'dik', 'da']) == \nassert solution.firstPalindrome(['hiz', 'vtnkvqp', 'nqf', 'fetjkirl', 'tx', 'wsrumnus']) == \nassert solution.firstPalindrome(['hhto', 'xowlvm', 'fqzleewufn', 'wkswhghroa', 'ommmy', 'i', 'feo']) == i\nassert solution.firstPalindrome(['dpnqgj', 'eidstd', 'htzf', 'ew', 'zglq', 's', 'sun', 'zxmox', 'gt']) == s\nassert solution.firstPalindrome(['jhljmxcc', 'jngr', 'twkjrprt', 'zad', 'ee', 'dlgcvnkju', 'znudw']) == ee\nassert solution.firstPalindrome(['xjggvsjw', 'pn', 'lz', 'dtjpyarg', 'ssomgbweh', 'fuzisjreh', 'ifbtgvgwme', 'bwvktobfk', 'ymvu']) == \nassert solution.firstPalindrome(['qqgge']) == \nassert solution.firstPalindrome(['gx', 'dj', 'h']) == h\nassert solution.firstPalindrome(['gkczggg', 'luw', 'bije', 'sy']) == \nassert solution.firstPalindrome(['upnw']) == \nassert solution.firstPalindrome(['gsgx', 'hhpfhb', 'bsuv', 'tafqzgijwr']) == \nassert solution.firstPalindrome(['cug', 'x', 'bjdphbhm', 'mkqrotmgcg', 'emzcbpe', 'x']) == x\nassert solution.firstPalindrome(['zxgowrems', 'rjk', 'uxidyx', 'diizmordl', 'hhdoayozo', 'xskyqvkfpg', 'rf']) == \nassert solution.firstPalindrome(['bs', 'guylhkuhd', 'sstrewqgtu', 'bnsyg', 'sdul', 'ebz', 'idwhzaltqm', 'iqql', 'ejarcs', 'azlxvoqdja']) == \nassert solution.firstPalindrome(['yydfikqg', 'fouiia', 'xt', 'qqsjqwkg', 'dzmhd', 'dswiwc', 'qeucf']) == \nassert solution.firstPalindrome(['fhhek', 'fkjp', 'hoobekwxrj', 'b']) == b\nassert solution.firstPalindrome(['jt', 'ao', 'cykojqg', 'ycrckvx', 'dqbbsskw', 'ezotvs']) == \nassert solution.firstPalindrome(['ddgulie', 'ssgkwnatbg']) == \nassert solution.firstPalindrome(['s', 'k', 'lmc', 'blokjm', 'onbpxgv', 'jeycwpd']) == s\nassert solution.firstPalindrome(['qywhffzzxw', 'kyyuulk', 'oehupkdre', 'yyxf', 'ys', 'eqk', 'jriwlqjfy', 'iwqklwtrf', 'tzvpt', 'phzr']) == \nassert solution.firstPalindrome(['ne', 'fwsckpxnbz']) == \nassert solution.firstPalindrome(['wruznzvvj', 'pldcpyc', 'a', 'somkolfeqo']) == a\nassert solution.firstPalindrome(['naqvseizoc', 'aunc', 'czpipx', 'qykvbiwru', 'jscwz', 'rtgenerbq', 'pvu']) == \nassert solution.firstPalindrome(['gst', 'rub', 'xgwvhio', 'ztbshy', 'a', 'jacx', 'ahxevfqx', 'ivkciwmhw', 'ebiufyum', 'yrtpwhuo']) == a\nassert solution.firstPalindrome(['lzhksgmutm', 'n', 'caemm', 'afahqsc', 'jvygh', 'hmpfng', 'qyn', 'adxjvilef']) == n\nassert solution.firstPalindrome(['bm', 'lyolm', 'iisyqksint']) == \nassert solution.firstPalindrome(['kewnscc', 'gncbpk', 'bexktdlj', 'zwf', 'dhg', 'hk']) == \nassert solution.firstPalindrome(['fwazk']) == \nassert solution.firstPalindrome(['y', 'x', 'u', 'bbabb', 'cdnvo', 'ubb', 'wab', 'wt', 'nlifgamhmn']) == y\nassert solution.firstPalindrome(['fglv', 'kngpzct', 'ot', 'fkjrgezwp', 'jqa', 'inznslott', 'snpqb']) == \nassert solution.firstPalindrome(['fsewlqwxsb', 'cgdzz', 'ywonfto', 'wgm', 'xk', 'hfy', 'gnraxrhy', 'gnidel', 'lxupsahsmr', 'hd']) == \nassert solution.firstPalindrome(['x', 'bnzonk', 'gbcwrnj', 'xortgqdkl', 'ykzauas']) == x\nassert solution.firstPalindrome(['hlssmqbb', 'knoqf', 'kl', 'tufwdr', 'p']) == p\nassert solution.firstPalindrome(['pw', 'zsnutb', 'cscvypi', 'xcuhjxrq', 'b', 'j', 'rzkihljynt', 'wjdgxotewi']) == b\nassert solution.firstPalindrome(['kg', 'mes']) == \nassert solution.firstPalindrome(['kkx']) == \nassert solution.firstPalindrome(['tacdaucu', 'tqdtmltbs', 'byv']) == \nassert solution.firstPalindrome(['qfrpxmiwha', 'tbzznp', 'qmebdklma', 'fi', 'iukvhnst', 'bcefmevdg', 'rcpjrqk', 'enmzwunhoc', 'xjztvcoq']) == \nassert solution.firstPalindrome(['idltnf', 'uvnqfeqy', 'zsf', 'ei', 'oumxc', 'jsapg', 'crazqaa', 'xdcw', 'ycgso']) == \nassert solution.firstPalindrome(['v', 'sc', 'elgfqbr', 'ethmg', 'mh']) == v\nassert solution.firstPalindrome(['iuft', 'vetvohd', 'bg', 'yxx', 'zzdoghl', 'hcfh']) == \nassert solution.firstPalindrome(['buabmurc']) == \nassert solution.firstPalindrome(['yimja', 'rhrhygmii', 'btz', 'zdm', 'lfqqvut', 'ddsth', 'yf', 'wx', 'ckbmottwwd', 'hdwqoj']) == \nassert solution.firstPalindrome(['g', 'vrajcbxoxd', 'pvtdewrhwe', 'xl', 'qdnwal', 'kcadusc', 'oprnnzj', 'cvjsz', 'rjxfcnhb', 'hmievfh']) == g\nassert solution.firstPalindrome(['alcjqndy', 'wurdp', 'absljeixxs', 'wbqa', 'rtlpzl', 'tvnw', 'wahkybjvb', 'h', 'ztfs', 'sdppjwo']) == h\nassert solution.firstPalindrome(['eiopfyb', 'mzmym', 'vhisrmuaar', 'pobvpdfx']) == \nassert solution.firstPalindrome(['cfrwnr', 'fnx', 'pz', 'gyovpm']) == \nassert solution.firstPalindrome(['emfaiz', 'bao', 'ocuukxzlfp', 'drqunc', 'sfrljtwmim']) == \nassert solution.firstPalindrome(['gleclbdwi', 'bglrwet', 'g', 'ypr', 'kbdwfyi', 'jtokgjp']) == g\nassert solution.firstPalindrome(['al', 'vno', 'pnqbic', 'fhgg', 'e', 'nn', 'gmw', 'nhqoutgh', 'twvqrcs']) == e\nassert solution.firstPalindrome(['hffuxrhy', 'dfcmkvkt', 'lhmfqvmut', 'rbziuscsn', 'efefqd', 'v']) == v\nassert solution.firstPalindrome(['n', 'jowvdobi', 'lpibcjoonm', 'e', 'zrgku', 'y', 'd']) == n\nassert solution.firstPalindrome(['nvgluhomy', 'ckdzozksp', 'dvyboasin', 'zpwass', 'iezwonzae', 'ozosfngvml']) == \nassert solution.firstPalindrome(['azqwiljazf', 'has', 'wyglc', 'iba']) == \nassert solution.firstPalindrome(['rhvgd', 'rnlqpecp', 'wzimwxbszi', 'yjqcojc']) == \nassert solution.firstPalindrome(['jbkchsedd', 'xgzeju', 'goiukjim', 'zqatmkubyv', 'who']) == \nassert solution.firstPalindrome(['zyv', 'ldnxeoln', 'g', 'rsjah', 'bav', 'vdag', 'aexpysivv', 'ukuq', 'y']) == g\nassert solution.firstPalindrome(['tfwjidhef']) == \nassert solution.firstPalindrome(['hhmf', 'ezdjbzdnqn', 'fo']) == \nassert solution.firstPalindrome(['nugqscvfy', 'teosnlgmrr', 'cheq']) == \nassert solution.firstPalindrome(['b', 'uqwis']) == b\nassert solution.firstPalindrome(['japtcrbk', 'hcmnenqxpc', 'i', 'q', 'qddtmhd', 'p', 'u', 'evyrikpvyy', 'zirjo']) == i\nassert solution.firstPalindrome(['g', 'pocmawsi', 'uifjwwh', 'psw']) == g\nassert solution.firstPalindrome(['v', 'ex', 'umkr', 'uho', 'wfdbbozz', 'lm']) == v\nassert solution.firstPalindrome(['muohdr', 'a', 'tiqzwh', 'fezppi', 'ayph', 'sdbp', 'hs']) == a\nassert solution.firstPalindrome(['sshbe', 'qfn', 'qiplaag']) == \nassert solution.firstPalindrome(['peeurz', 'yl', 'wghfdndy', 'kruvcqol', 'cotpyff', 'rpx', 'gstovfdrjo', 'zh', 'opysds']) == \nassert solution.firstPalindrome(['mbrj', 'ggxolhiyot', 'ajcbkbqm', 'g', 'sghyos', 'n', 'lf', 't', 'asasvx']) == g\nassert solution.firstPalindrome(['gft', 'stvktr', 'shvgaqyi', 'stykcz', 'pr', 'kem', 'nyk', 'myun']) == \nassert solution.firstPalindrome(['ubjuugnn', 'c', 'mnqfflwy', 'u', 'q', 'm', 'acinsnetq']) == c\nassert solution.firstPalindrome(['bmpwbb', 'pak', 'reah', 'bcioqtih']) == \nassert solution.firstPalindrome(['jnhrqd', 'kwasauatk', 'jne', 'nvf', 'xohgb', 'shlszg', 'soazbgdab']) == \nassert solution.firstPalindrome(['eqrwvewveq', 'wtwtuyoblc', 'nxl', 'klqsuvawm', 'roicxfwrt', 'gatjkrrb']) == \nassert solution.firstPalindrome(['nego', 'wxr', 'rkugpfxib', 'qamfkdndih', 'caavung', 'wzjnauc', 'bpkhntx', 'gnmdogxzl', 'scygep']) == \nassert solution.firstPalindrome(['um', 'glscs', 'oiyppdta', 'zrka']) == \nassert solution.firstPalindrome(['fxfqd', 'f', 'qfxt', 'zruzzxssz', 'jfd', 'potiwclua', 'vtruygjku']) == f",
  "inefficient_solution": "class Solution:\n    def firstPalindrome(self, words: List[str]) -> str:\n        palindromes = []\n        for word in words:\n            reversed_word = word[::-1]\n            reversed_word_list = list(reversed_word)\n            reversed_word_list_copy = reversed_word_list.copy()\n            reversed_word_list_copy_copy = reversed_word_list_copy.copy()\n            reversed_word_list_copy_copy_copy = reversed_word_list_copy_copy.copy()\n            reversed_word_list_copy_copy_copy_copy = reversed_word_list_copy_copy_copy.copy()\n            palindromes.append([word, reversed_word_list_copy_copy_copy_copy, reversed_word_list_copy_copy_copy, reversed_word_list_copy_copy, reversed_word_list_copy])\n        for word_list in palindromes:\n            if word_list[0] == word_list[4]:\n                return word_list[0]\n        return \"\"",
  "is_python": true
}