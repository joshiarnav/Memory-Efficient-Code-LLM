{
  "problem_idx": 1675,
  "task_name": "Minimize Deviation in Array",
  "markdown_description": "\nYou are given an array `nums` of `n` positive integers.\n\n\nYou can perform two types of operations on any element of the array any number of times:\n\n\n* If the element is **even**, **divide** it by `2`.\n\t+ For example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].`\n* If the element is **odd**, **multiply** it by `2`.\n\t+ For example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].`\n\n\nThe **deviation** of the array is the **maximum difference** between any two elements in the array.\n\n\nReturn *the **minimum deviation** the array can have after performing some number of operations.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 1\n**Explanation:** You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,1,5,20,3]\n**Output:** 3\n**Explanation:** You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,10,8]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `2 <= n <= 5 * 104`\n* `1 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumDeviation(self, nums: List[int]) -> int:\n        h = []\n        mi = inf\n        for v in nums:\n            if v & 1:\n                v <<= 1\n            h.append(-v)\n            mi = min(mi, v)\n        heapify(h)\n        ans = -h[0] - mi\n        while h[0] % 2 == 0:\n            x = heappop(h) // 2\n            heappush(h, x)\n            mi = min(mi, -x)\n            ans = min(ans, -h[0] - mi)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumDeviation(self, nums: List[int]) -> int:\n        h = []\n        mi = inf\n        for v in nums:\n            if v & 1:\n                v <<= 1\n            h.append(-v)\n            mi = min(mi, v)\n        heapify(h)\n        ans = -h[0] - mi\n        while h[0] % 2 == 0:\n            x = heappop(h) // 2\n            heappush(h, x)\n            mi = min(mi, -x)\n            ans = min(ans, -h[0] - mi)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumDeviation(nums)\n\n    return nums, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumDeviation(nums) == expected_result\n        print(f\"assert solution.minimumDeviation({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumDeviation({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumDeviation([51, 12, 41, 97, 2, 18, 4, 33, 40]) == 95\nassert solution.minimumDeviation([17, 61, 55, 33, 52]) == 28\nassert solution.minimumDeviation([56, 41, 42, 34, 55, 98]) == 22\nassert solution.minimumDeviation([92, 97]) == 5\nassert solution.minimumDeviation([86, 65, 97]) == 32\nassert solution.minimumDeviation([76, 11, 32, 60, 27, 84, 16, 93, 85]) == 77\nassert solution.minimumDeviation([66, 28, 21, 45, 49, 98, 35, 74, 52, 95]) == 67\nassert solution.minimumDeviation([77, 32]) == 45\nassert solution.minimumDeviation([13, 58, 51, 11, 99, 60]) == 77\nassert solution.minimumDeviation([40, 66]) == 7\nassert solution.minimumDeviation([89, 62, 1, 53, 60]) == 87\nassert solution.minimumDeviation([78, 6, 69, 51]) == 63\nassert solution.minimumDeviation([26, 25, 1, 80, 64, 28, 55, 100, 54, 93]) == 91\nassert solution.minimumDeviation([21, 17]) == 4\nassert solution.minimumDeviation([9, 19, 47, 63, 6, 70, 85, 12, 8]) == 79\nassert solution.minimumDeviation([43, 83, 6, 36, 76, 99, 69, 68, 8, 84]) == 93\nassert solution.minimumDeviation([50, 51, 87]) == 37\nassert solution.minimumDeviation([75, 20]) == 55\nassert solution.minimumDeviation([96, 63, 79, 9, 89, 18, 71, 66, 39, 26]) == 71\nassert solution.minimumDeviation([22, 93, 35, 10, 76, 84, 53, 36, 19]) == 83\nassert solution.minimumDeviation([43, 46, 95, 72, 27, 21, 8, 7]) == 87\nassert solution.minimumDeviation([57, 8]) == 49\nassert solution.minimumDeviation([27, 98, 63, 71, 99, 67, 45, 9, 30]) == 81\nassert solution.minimumDeviation([51, 29, 89, 68, 55, 27, 52]) == 38\nassert solution.minimumDeviation([77, 30, 81]) == 51\nassert solution.minimumDeviation([86, 15, 69, 6, 79, 77]) == 73\nassert solution.minimumDeviation([88, 49]) == 5\nassert solution.minimumDeviation([87, 55, 19]) == 49\nassert solution.minimumDeviation([5, 82, 99]) == 89\nassert solution.minimumDeviation([30, 89, 13, 21, 20, 17]) == 69\nassert solution.minimumDeviation([97, 61, 85, 7, 1, 16, 47, 14]) == 95\nassert solution.minimumDeviation([8, 55, 59, 66, 77, 25, 41, 7, 38]) == 69\nassert solution.minimumDeviation([49, 51, 32, 19, 94, 87]) == 55\nassert solution.minimumDeviation([71, 19, 41, 24, 61, 36]) == 47\nassert solution.minimumDeviation([75, 53, 11, 89, 95, 41, 7, 25]) == 81\nassert solution.minimumDeviation([99, 93, 54, 53, 94]) == 46\nassert solution.minimumDeviation([22, 35, 86, 47, 70, 76, 79, 30, 18]) == 61\nassert solution.minimumDeviation([25, 57]) == 7\nassert solution.minimumDeviation([57, 75, 86, 18, 68]) == 57\nassert solution.minimumDeviation([100, 57, 79, 73, 1]) == 77\nassert solution.minimumDeviation([66, 39]) == 6\nassert solution.minimumDeviation([4, 27, 58, 76]) == 25\nassert solution.minimumDeviation([8, 7, 39, 53, 60, 58]) == 45\nassert solution.minimumDeviation([37, 98]) == 12\nassert solution.minimumDeviation([24, 23]) == 1\nassert solution.minimumDeviation([37, 91, 41, 64, 76, 15]) == 61\nassert solution.minimumDeviation([25, 75, 56, 64, 32, 21, 82, 84, 57]) == 43\nassert solution.minimumDeviation([14, 79, 98, 5, 56, 48, 16, 93, 61]) == 83\nassert solution.minimumDeviation([53, 22]) == 31\nassert solution.minimumDeviation([53, 1, 50, 55, 49, 46, 41, 63, 44]) == 61\nassert solution.minimumDeviation([31, 21, 19, 90, 22, 1, 100, 58, 33]) == 43\nassert solution.minimumDeviation([51, 50, 11, 32, 60, 99]) == 77\nassert solution.minimumDeviation([31, 99, 37, 22, 46, 68]) == 77\nassert solution.minimumDeviation([54, 2, 10, 60, 50]) == 25\nassert solution.minimumDeviation([41, 52, 64, 12, 95, 65, 78]) == 83\nassert solution.minimumDeviation([33, 49]) == 16\nassert solution.minimumDeviation([90, 97, 86, 1, 99, 39, 16, 98, 57, 43]) == 97\nassert solution.minimumDeviation([70, 50, 66, 35, 14, 68]) == 21\nassert solution.minimumDeviation([57, 78, 93]) == 36\nassert solution.minimumDeviation([80, 58, 65, 53, 52, 54, 94, 59, 34]) == 31\nassert solution.minimumDeviation([90, 62, 20, 82, 9, 64]) == 27\nassert solution.minimumDeviation([91, 1, 31, 45, 67, 53, 18]) == 89\nassert solution.minimumDeviation([32, 72, 91, 10, 39, 64]) == 81\nassert solution.minimumDeviation([5, 11, 28, 71, 3, 40, 46, 92]) == 65\nassert solution.minimumDeviation([73, 47, 97, 49, 68, 74, 8, 92]) == 89\nassert solution.minimumDeviation([2, 62, 67, 63, 54, 23]) == 65\nassert solution.minimumDeviation([57, 83]) == 26\nassert solution.minimumDeviation([29, 96, 47]) == 11\nassert solution.minimumDeviation([90, 34, 18, 91, 54, 79, 28, 100]) == 73\nassert solution.minimumDeviation([51, 75]) == 24\nassert solution.minimumDeviation([23, 12, 5]) == 13\nassert solution.minimumDeviation([33, 14, 64, 75, 90, 42, 37]) == 61\nassert solution.minimumDeviation([99, 52, 21, 44, 33, 87, 95, 74]) == 57\nassert solution.minimumDeviation([84, 86, 8, 63, 80, 55, 28, 5]) == 55\nassert solution.minimumDeviation([18, 40, 12, 9, 94, 26]) == 35\nassert solution.minimumDeviation([99, 9]) == 81\nassert solution.minimumDeviation([78, 93, 55, 36, 76, 2, 73]) == 91\nassert solution.minimumDeviation([76, 72, 95, 70, 83, 62, 89]) == 33\nassert solution.minimumDeviation([78, 50, 65, 20, 24, 8, 38, 29]) == 57\nassert solution.minimumDeviation([22, 33, 55, 26, 25, 68, 53]) == 33\nassert solution.minimumDeviation([6, 59, 61, 94, 17, 53, 82, 7, 36, 54]) == 55\nassert solution.minimumDeviation([52, 82, 89]) == 37\nassert solution.minimumDeviation([62, 5, 15, 43, 7, 13, 52, 90, 29]) == 35\nassert solution.minimumDeviation([41, 25, 80, 87, 53, 76, 63, 57]) == 37\nassert solution.minimumDeviation([79, 51]) == 23\nassert solution.minimumDeviation([3, 49]) == 43\nassert solution.minimumDeviation([39, 11, 95, 15, 32, 48]) == 73\nassert solution.minimumDeviation([18, 31, 95]) == 77\nassert solution.minimumDeviation([79, 83, 92, 58, 33, 17, 39]) == 49\nassert solution.minimumDeviation([43, 58, 23, 35]) == 17\nassert solution.minimumDeviation([73, 89, 32, 84, 3, 35, 66, 67, 45]) == 83\nassert solution.minimumDeviation([74, 59, 15, 96, 94, 72, 30, 13]) == 33\nassert solution.minimumDeviation([69, 49, 4, 71]) == 67\nassert solution.minimumDeviation([90, 57, 45]) == 12\nassert solution.minimumDeviation([100, 99, 98, 31]) == 38\nassert solution.minimumDeviation([17, 55, 67, 3]) == 61\nassert solution.minimumDeviation([44, 84, 47, 62, 37]) == 16\nassert solution.minimumDeviation([70, 24, 44, 13, 66, 59, 82, 67, 64]) == 43\nassert solution.minimumDeviation([44, 73, 51, 88]) == 29\nassert solution.minimumDeviation([41, 74, 54, 77, 69, 76, 84, 62, 95]) == 41",
  "inefficient_solution": "class Solution:\n    def minimumDeviation(self, nums: List[int]) -> int:\n        h = []\n        mi = inf\n        map_ = {}\n        for v in nums:\n            if v & 1:\n                v <<= 1\n            map_[v] = 0\n            h.append(v)\n            mi = min(mi, v)\n        h.sort()\n        ans = h[-1] - mi\n        while h[0] % 2 == 0:\n            h.pop(0)\n            new_list = []\n            for i in range(len(h)):\n                new_list.append(h[i] // 2)\n            h = new_list\n            h.sort()\n            mi = min(mi, h[0])\n            ans = min(ans, h[-1] - mi)\n            map_ = {}\n            for v in h:\n                map_[v] = 0\n        return ans",
  "is_python": true
}