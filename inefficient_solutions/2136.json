{
  "problem_idx": 2136,
  "task_name": "Earliest Possible Day of Full Bloom",
  "markdown_description": "\nYou have `n` flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two **0-indexed** integer arrays `plantTime` and `growTime`, of length `n` each:\n\n\n* `plantTime[i]` is the number of **full days** it takes you to **plant** the `ith` seed. Every day, you can work on planting exactly one seed. You **do not** have to work on planting the same seed on consecutive days, but the planting of a seed is not complete **until** you have worked `plantTime[i]` days on planting it in total.\n* `growTime[i]` is the number of **full days** it takes the `ith` seed to grow after being completely planted. **After** the last day of its growth, the flower **blooms** and stays bloomed forever.\n\n\nFrom the beginning of day `0`, you can plant the seeds in **any** order.\n\n\nReturn *the **earliest** possible day where **all** seeds are blooming*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2136.Earliest%20Possible%20Day%20of%20Full%20Bloom/images/1.png)\n\n```\n\n**Input:** plantTime = [1,4,3], growTime = [2,3,1]\n**Output:** 9\n**Explanation:** The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2136.Earliest%20Possible%20Day%20of%20Full%20Bloom/images/2.png)\n\n```\n\n**Input:** plantTime = [1,2,3,2], growTime = [2,1,2,1]\n**Output:** 9\n**Explanation:** The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** plantTime = [1], growTime = [1]\n**Output:** 2\n**Explanation:** On day 0, plant the 0th seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == plantTime.length == growTime.length`\n* `1 <= n <= 105`\n* `1 <= plantTime[i], growTime[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -> int:\n        ans = t = 0\n        for pt, gt in sorted(zip(plantTime, growTime), key=lambda x: -x[1]):\n            t += pt\n            ans = max(ans, t + gt)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def earliestFullBloom(self, plantTime, growTime):\n        ans = t = 0\n        for pt, gt in sorted(zip(plantTime, growTime), key=lambda x: -x[1]):\n            t += pt\n            ans = max(ans, t + gt)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    plantTime = random.sample(range(1, 11), random.randint(1, 10))\n    growTime = random.sample(range(1, 11), len(plantTime))\n    expected_result = solution.earliestFullBloom(plantTime, growTime)\n    return plantTime, growTime, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        plantTime, growTime, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.earliestFullBloom(plantTime, growTime) == expected_result\n        test_case_generator_results.append(f\"assert solution.earliestFullBloom({plantTime}, {growTime}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.earliestFullBloom([2, 6, 4, 5, 9, 7, 1], [9, 7, 4, 1, 2, 8, 10]) == 35\nassert solution.earliestFullBloom([7, 4], [8, 6]) == 17\nassert solution.earliestFullBloom([6, 5, 8, 2, 3, 7], [2, 10, 5, 7, 3, 9]) == 33\nassert solution.earliestFullBloom([3, 10, 4, 6, 7, 1, 8, 9], [7, 3, 1, 2, 4, 8, 10, 9]) == 49\nassert solution.earliestFullBloom([3, 4, 1], [6, 7, 4]) == 13\nassert solution.earliestFullBloom([9, 8, 4], [2, 9, 10]) == 23\nassert solution.earliestFullBloom([8, 5, 1, 2, 4, 10, 6, 9, 3], [4, 5, 1, 6, 9, 3, 7, 8, 2]) == 49\nassert solution.earliestFullBloom([9], [7]) == 16\nassert solution.earliestFullBloom([7], [7]) == 14\nassert solution.earliestFullBloom([8, 7], [8, 9]) == 23\nassert solution.earliestFullBloom([6, 2, 9, 7], [3, 6, 8, 10]) == 27\nassert solution.earliestFullBloom([9, 3], [2, 7]) == 14\nassert solution.earliestFullBloom([10, 7], [4, 3]) == 20\nassert solution.earliestFullBloom([9, 8, 5, 1, 2, 7], [4, 7, 9, 6, 2, 3]) == 34\nassert solution.earliestFullBloom([2, 3, 7, 9, 6], [5, 3, 2, 9, 10]) == 29\nassert solution.earliestFullBloom([1, 3, 6, 8, 10], [5, 7, 4, 3, 8]) == 31\nassert solution.earliestFullBloom([3, 6, 8, 4, 5, 1, 7, 9], [5, 9, 10, 8, 4, 2, 3, 7]) == 45\nassert solution.earliestFullBloom([5, 2, 10, 6], [4, 5, 3, 9]) == 26\nassert solution.earliestFullBloom([2, 10], [8, 7]) == 19\nassert solution.earliestFullBloom([1, 9, 2, 10, 5, 7, 4, 6, 8], [3, 4, 2, 10, 5, 8, 6, 9, 1]) == 53\nassert solution.earliestFullBloom([4, 10, 1, 8, 7], [2, 3, 9, 6, 7]) == 32\nassert solution.earliestFullBloom([10, 9], [1, 6]) == 20\nassert solution.earliestFullBloom([9, 10, 8, 5, 7, 6, 4], [8, 9, 1, 3, 4, 7, 10]) == 50\nassert solution.earliestFullBloom([4, 5, 7, 8, 2, 3, 9, 10, 6, 1], [2, 8, 5, 7, 4, 3, 1, 6, 9, 10]) == 56\nassert solution.earliestFullBloom([6, 1], [2, 3]) == 9\nassert solution.earliestFullBloom([5], [10]) == 15\nassert solution.earliestFullBloom([1, 6, 9, 10, 7, 5, 4, 3, 2], [5, 9, 7, 6, 2, 1, 3, 10, 4]) == 48\nassert solution.earliestFullBloom([8, 10], [2, 1]) == 19\nassert solution.earliestFullBloom([9, 3, 4], [6, 1, 2]) == 17\nassert solution.earliestFullBloom([6, 5, 7, 8, 10, 9], [6, 5, 9, 2, 3, 8]) == 47\nassert solution.earliestFullBloom([9, 5, 7, 6, 4, 10, 8, 2], [9, 8, 10, 1, 4, 6, 2, 7]) == 52\nassert solution.earliestFullBloom([1, 10, 6, 7, 8, 3], [1, 3, 8, 9, 2, 6]) == 36\nassert solution.earliestFullBloom([8], [9]) == 17\nassert solution.earliestFullBloom([6, 5, 3, 9, 7, 1, 2], [9, 1, 3, 10, 6, 4, 5]) == 34\nassert solution.earliestFullBloom([3], [9]) == 12\nassert solution.earliestFullBloom([6, 7, 5, 1, 10, 8, 4, 2], [9, 1, 4, 5, 6, 7, 2, 3]) == 44\nassert solution.earliestFullBloom([5, 8, 6], [1, 8, 4]) == 20\nassert solution.earliestFullBloom([8, 4, 5, 7, 9], [6, 10, 5, 2, 3]) == 35\nassert solution.earliestFullBloom([3, 7, 10, 4, 9], [10, 7, 5, 3, 1]) == 34\nassert solution.earliestFullBloom([9, 5], [3, 9]) == 17\nassert solution.earliestFullBloom([1, 4, 8, 9, 6], [5, 3, 9, 1, 7]) == 29\nassert solution.earliestFullBloom([10, 5, 1, 3, 8, 6, 7], [5, 9, 8, 7, 10, 2, 3]) == 42\nassert solution.earliestFullBloom([1, 7, 2, 3, 5, 6, 4, 9], [9, 2, 6, 3, 10, 7, 1, 4]) == 38\nassert solution.earliestFullBloom([4, 2, 1, 7, 3, 9, 10, 8], [6, 9, 3, 10, 8, 5, 4, 2]) == 46\nassert solution.earliestFullBloom([6, 9, 2, 5, 7, 4, 10, 1], [3, 7, 9, 5, 2, 8, 1, 6]) == 45\nassert solution.earliestFullBloom([9, 1, 4, 5, 7, 10], [9, 4, 5, 7, 2, 8]) == 38\nassert solution.earliestFullBloom([4, 7, 9, 6, 3, 1, 8], [1, 9, 2, 5, 3, 4, 8]) == 39\nassert solution.earliestFullBloom([7, 9, 1, 2], [2, 10, 9, 3]) == 21\nassert solution.earliestFullBloom([5, 6, 10], [5, 8, 6]) == 26\nassert solution.earliestFullBloom([5, 9, 2, 6, 1], [3, 9, 7, 1, 2]) == 24\nassert solution.earliestFullBloom([4, 7, 1, 8, 3, 6, 2], [10, 7, 5, 6, 4, 1, 9]) == 32\nassert solution.earliestFullBloom([9, 4, 3, 2, 7], [1, 8, 4, 10, 6]) == 26\nassert solution.earliestFullBloom([5, 8, 10, 6, 9, 3, 2], [2, 6, 8, 1, 10, 3, 5]) == 44\nassert solution.earliestFullBloom([8, 3, 7, 1], [7, 9, 6, 2]) == 24\nassert solution.earliestFullBloom([1, 9, 5, 4, 8, 6], [10, 7, 5, 1, 6, 9]) == 34\nassert solution.earliestFullBloom([1, 2], [3, 4]) == 6\nassert solution.earliestFullBloom([9, 2, 3, 1, 10, 5, 6, 7, 4, 8], [4, 10, 2, 3, 1, 6, 7, 5, 9, 8]) == 56\nassert solution.earliestFullBloom([6, 10, 3, 4, 8, 5, 1, 9], [10, 2, 9, 1, 8, 6, 5, 4]) == 47\nassert solution.earliestFullBloom([10, 9, 2], [7, 5, 2]) == 24\nassert solution.earliestFullBloom([4, 5, 1], [7, 2, 8]) == 12\nassert solution.earliestFullBloom([3, 6], [10, 2]) == 13\nassert solution.earliestFullBloom([8, 2, 9, 3, 6, 4, 1], [6, 5, 1, 2, 4, 7, 10]) == 34\nassert solution.earliestFullBloom([1, 6, 2, 3, 5], [10, 8, 4, 2, 3]) == 19\nassert solution.earliestFullBloom([10, 7, 6, 1, 4, 9, 5, 8], [5, 8, 2, 6, 10, 3, 4, 1]) == 51\nassert solution.earliestFullBloom([4, 8, 2, 5, 6, 3], [3, 10, 7, 4, 9, 1]) == 29\nassert solution.earliestFullBloom([4, 8], [10, 5]) == 17\nassert solution.earliestFullBloom([1, 4, 7, 5, 3], [6, 2, 10, 7, 5]) == 22\nassert solution.earliestFullBloom([5, 7, 8, 6, 1, 3, 9, 4, 10, 2], [3, 7, 9, 2, 8, 5, 1, 4, 6, 10]) == 56\nassert solution.earliestFullBloom([5, 10, 2, 6, 9, 4, 3], [2, 9, 5, 3, 7, 4, 8]) == 41\nassert solution.earliestFullBloom([5, 1, 8, 7, 2, 4, 10, 3], [7, 1, 2, 5, 4, 3, 10, 6]) == 41\nassert solution.earliestFullBloom([4, 2, 8, 7, 9, 5, 3, 6, 10, 1], [5, 4, 8, 6, 2, 1, 7, 10, 3, 9]) == 56\nassert solution.earliestFullBloom([3, 6, 4, 7], [10, 2, 9, 3]) == 22\nassert solution.earliestFullBloom([2], [9]) == 11\nassert solution.earliestFullBloom([1, 3], [5, 7]) == 10\nassert solution.earliestFullBloom([8, 7, 4, 6, 1], [8, 4, 7, 10, 6]) == 30\nassert solution.earliestFullBloom([10, 8, 2, 4, 3, 6, 5, 1, 7, 9], [1, 2, 5, 3, 6, 10, 8, 4, 9, 7]) == 56\nassert solution.earliestFullBloom([9, 2, 1, 5, 7, 8], [9, 6, 10, 2, 1, 7]) == 33\nassert solution.earliestFullBloom([1, 8, 7], [1, 5, 8]) == 20\nassert solution.earliestFullBloom([9, 2, 5], [9, 5, 1]) == 18\nassert solution.earliestFullBloom([3, 7, 6, 9, 8], [2, 3, 4, 1, 9]) == 34\nassert solution.earliestFullBloom([10, 8, 4, 6], [10, 4, 5, 8]) == 32\nassert solution.earliestFullBloom([3, 8, 7, 1], [7, 6, 1, 3]) == 20\nassert solution.earliestFullBloom([10, 6, 7, 4, 5, 1, 2, 8], [6, 3, 2, 7, 5, 10, 8, 9]) == 45\nassert solution.earliestFullBloom([1, 8, 5, 7, 6, 3], [3, 4, 2, 5, 8, 7]) == 32\nassert solution.earliestFullBloom([1, 4, 6], [6, 5, 2]) == 13\nassert solution.earliestFullBloom([4, 1, 2], [3, 10, 1]) == 11\nassert solution.earliestFullBloom([4, 1, 7, 2, 8, 10, 3, 5, 6], [1, 10, 4, 5, 6, 2, 7, 9, 8]) == 47\nassert solution.earliestFullBloom([6], [6]) == 12\nassert solution.earliestFullBloom([10, 4, 7, 9, 2, 8], [7, 3, 4, 1, 6, 8]) == 41\nassert solution.earliestFullBloom([7, 4, 6, 5, 3, 8, 10, 2], [3, 8, 2, 10, 6, 4, 7, 1]) == 46\nassert solution.earliestFullBloom([5, 10, 7, 3, 8, 4, 2, 6, 9], [6, 3, 8, 2, 7, 9, 1, 5, 10]) == 55\nassert solution.earliestFullBloom([6], [6]) == 12\nassert solution.earliestFullBloom([7, 9, 10], [1, 10, 3]) == 27\nassert solution.earliestFullBloom([4, 5, 7, 8, 10, 2], [5, 4, 7, 9, 8, 2]) == 38\nassert solution.earliestFullBloom([1, 9, 6, 8], [1, 2, 7, 10]) == 25\nassert solution.earliestFullBloom([8, 4, 9], [5, 8, 2]) == 23\nassert solution.earliestFullBloom([3, 2], [3, 7]) == 9\nassert solution.earliestFullBloom([2, 1, 8, 6, 3, 4, 9, 10, 7], [3, 8, 4, 5, 7, 1, 9, 10, 2]) == 51\nassert solution.earliestFullBloom([1, 10, 5, 6, 8], [9, 5, 1, 4, 7]) == 31\nassert solution.earliestFullBloom([9, 4, 5, 3, 7, 1, 8, 2, 10], [3, 9, 5, 10, 8, 4, 6, 7, 2]) == 51",
  "inefficient_solution": "from typing import List\n\nclass Solution:\n    def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -> int:\n        n = len(plantTime)\n        plantTime_copy = plantTime[:]\n        growTime_copy = growTime[:]\n        ans = float('-inf')\n        t = 0\n        for _ in range(n * n):\n            max_index = -1\n            max_value = 0\n            for i in range(n):\n                value = growTime_copy[i] + plantTime_copy[i]\n                if value > max_value:\n                    max_value = value\n                    max_index = i\n            t += plantTime_copy[max_index]\n            plantTime_copy[max_index] = 0\n            growTime_copy[max_index] = max_value\n            ans = max(ans, t + max_value)\n        return ans",
  "is_python": true
}