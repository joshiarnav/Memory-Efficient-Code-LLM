{
  "problem_idx": 2187,
  "task_name": "Minimum Time to Complete Trips",
  "markdown_description": "\nYou are given an array `time` where `time[i]` denotes the time taken by the `ith` bus to complete **one trip**.\n\n\nEach bus can make multiple trips **successively**; that is, the next trip can start **immediately after** completing the current trip. Also, each bus operates **independently**; that is, the trips of one bus do not influence the trips of any other bus.\n\n\nYou are also given an integer `totalTrips`, which denotes the number of trips all buses should make **in total**. Return *the **minimum time** required for all buses to complete **at least*** `totalTrips` *trips*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** time = [1,2,3], totalTrips = 5\n**Output:** 3\n**Explanation:**\n- At time t = 1, the number of trips completed by each bus are [1,0,0]. \n  The total number of trips completed is 1 + 0 + 0 = 1.\n- At time t = 2, the number of trips completed by each bus are [2,1,0]. \n  The total number of trips completed is 2 + 1 + 0 = 3.\n- At time t = 3, the number of trips completed by each bus are [3,1,1]. \n  The total number of trips completed is 3 + 1 + 1 = 5.\nSo the minimum time needed for all buses to complete at least 5 trips is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** time = [2], totalTrips = 1\n**Output:** 2\n**Explanation:**\nThere is only one bus, and it will complete its first trip at t = 2.\nSo the minimum time needed to complete 1 trip is 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= time.length <= 105`\n* `1 <= time[i], totalTrips <= 107`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumTime(self, time: List[int], totalTrips: int) -> int:\n        mx = min(time) * totalTrips\n        return bisect_left(\n            range(mx), totalTrips, key=lambda x: sum(x // v for v in time)\n        )\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumTime(self, time, totalTrips):\n        mx = min(time) * totalTrips\n        return bisect_left(\n            range(mx), totalTrips, key=lambda x: sum(x // v for v in time)\n        )\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    time = [random.randint(1, 101) for _ in range(random.randint(1, 10))]\n    \n    # Generate a random totalTrips\n    totalTrips = random.randint(1, 1001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumTime(time, totalTrips)\n\n    return time, totalTrips, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        time, totalTrips, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumTime(time, totalTrips) == expected_result\n        print(f\"assert solution.minimumTime({time}, {totalTrips}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumTime({time}, {totalTrips}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumTime([38, 78, 36, 99, 14, 17, 12, 72], 411) == 1368\nassert solution.minimumTime([8, 44, 15, 99, 56, 10], 245) == 720\nassert solution.minimumTime([101, 96, 93, 96], 175) == 4242\nassert solution.minimumTime([54, 67, 54, 99], 263) == 4266\nassert solution.minimumTime([35, 62], 276) == 6195\nassert solution.minimumTime([76, 12, 38, 37], 744) == 4978\nassert solution.minimumTime([10, 32, 21], 772) == 4320\nassert solution.minimumTime([71, 13, 61, 70, 26, 89], 738) == 4329\nassert solution.minimumTime([65, 66, 79, 8, 94, 79, 46, 25, 82, 69], 762) == 2736\nassert solution.minimumTime([44, 63, 27, 11, 29, 13, 36, 92, 68, 15], 920) == 2322\nassert solution.minimumTime([57, 5], 999) == 4595\nassert solution.minimumTime([88, 52], 505) == 16536\nassert solution.minimumTime([2, 54, 90], 872) == 1648\nassert solution.minimumTime([9, 70, 101, 36, 22, 50], 691) == 3033\nassert solution.minimumTime([43, 1, 56, 94, 9, 29], 708) == 594\nassert solution.minimumTime([52], 193) == 10036\nassert solution.minimumTime([33, 47, 73], 576) == 8836\nassert solution.minimumTime([38, 71, 5, 40, 63, 32, 54], 723) == 2200\nassert solution.minimumTime([34, 13, 37, 10, 20, 78], 106) == 370\nassert solution.minimumTime([57, 79, 5, 43, 20, 83, 91, 21, 65, 81], 755) == 1890\nassert solution.minimumTime([64, 5], 823) == 3820\nassert solution.minimumTime([30, 6, 35, 54, 55, 49, 59, 44], 115) == 360\nassert solution.minimumTime([82, 99], 85) == 3854\nassert solution.minimumTime([13, 10, 13, 56, 50, 39], 249) == 793\nassert solution.minimumTime([99, 84, 16, 80, 38, 42], 137) == 950\nassert solution.minimumTime([16, 86, 58, 17, 42], 673) == 3876\nassert solution.minimumTime([93, 58, 68, 83, 18], 552) == 5022\nassert solution.minimumTime([15, 26, 42], 809) == 6285\nassert solution.minimumTime([81, 50, 55, 1, 33], 314) == 293\nassert solution.minimumTime([14, 100, 9, 22, 16, 100, 77, 1], 132) == 101\nassert solution.minimumTime([46, 43, 9, 6, 51, 52, 83], 705) == 1892\nassert solution.minimumTime([2, 34, 88], 966) == 1788\nassert solution.minimumTime([79, 94, 55, 3, 101, 4], 928) == 1467\nassert solution.minimumTime([11, 64, 16, 26, 43, 67, 94, 19, 36, 38], 905) == 2508\nassert solution.minimumTime([71, 46], 516) == 14413\nassert solution.minimumTime([87, 48, 77, 30, 38, 51], 504) == 4080\nassert solution.minimumTime([59, 91, 16, 41], 737) == 6432\nassert solution.minimumTime([20, 22, 56, 67, 85, 29, 1], 573) == 491\nassert solution.minimumTime([27, 53, 82], 321) == 4725\nassert solution.minimumTime([79, 95, 8, 20], 184) == 940\nassert solution.minimumTime([84], 875) == 73500\nassert solution.minimumTime([85, 60, 41], 995) == 18860\nassert solution.minimumTime([8, 51, 35], 1) == 8\nassert solution.minimumTime([57], 349) == 19893\nassert solution.minimumTime([6, 70, 28, 74, 73], 865) == 3556\nassert solution.minimumTime([38, 39, 100, 66, 94, 83], 333) == 3366\nassert solution.minimumTime([7, 2, 1, 67, 11, 84, 28, 24], 546) == 299\nassert solution.minimumTime([81], 184) == 14904\nassert solution.minimumTime([96, 101], 702) == 34560\nassert solution.minimumTime([12, 89, 9, 61, 85, 78], 898) == 3654\nassert solution.minimumTime([19, 38, 75, 39, 72, 17, 80, 90], 865) == 4050\nassert solution.minimumTime([12, 38, 96], 636) == 5304\nassert solution.minimumTime([41, 6, 11, 12, 44, 19, 39], 742) == 1596\nassert solution.minimumTime([86, 1, 6, 48, 3, 77, 11, 56, 15], 418) == 245\nassert solution.minimumTime([44, 70, 87, 98, 72, 43], 12) == 144\nassert solution.minimumTime([71], 618) == 43878\nassert solution.minimumTime([32, 11, 48, 78, 75, 20, 79], 993) == 4290\nassert solution.minimumTime([7, 39, 20, 84, 30, 28], 537) == 1800\nassert solution.minimumTime([89, 48, 4, 89, 26, 35, 61, 52, 27, 77], 638) == 1440\nassert solution.minimumTime([44, 99, 33, 85], 542) == 7260\nassert solution.minimumTime([41, 19, 39, 19, 87, 37, 27, 18], 186) == 665\nassert solution.minimumTime([49, 70, 59, 98, 19, 90, 16, 64, 70], 104) == 490\nassert solution.minimumTime([16, 40, 71, 83, 56, 68, 18, 74], 666) == 3114\nassert solution.minimumTime([58, 91, 21], 955) == 12600\nassert solution.minimumTime([17, 11, 98], 210) == 1320\nassert solution.minimumTime([7, 9, 63, 52, 84], 839) == 2793\nassert solution.minimumTime([68, 71, 81, 16, 90, 45, 21, 32], 697) == 3240\nassert solution.minimumTime([75, 7, 59], 775) == 4484\nassert solution.minimumTime([67], 545) == 36515\nassert solution.minimumTime([80, 94, 25, 86, 95, 41, 90, 39, 55, 65], 964) == 5382\nassert solution.minimumTime([77, 63, 92, 30, 33, 24, 79, 79], 364) == 2156\nassert solution.minimumTime([96, 17, 6, 82, 12, 76], 447) == 1308\nassert solution.minimumTime([49, 96, 53, 98, 45], 218) == 2688\nassert solution.minimumTime([78, 17, 81, 72, 75, 78, 14, 23, 51, 87], 338) == 1274\nassert solution.minimumTime([29, 7, 99, 81, 41, 44, 10, 13, 31, 43], 794) == 1670\nassert solution.minimumTime([41, 72, 45, 74, 66, 82, 22, 22], 95) == 506\nassert solution.minimumTime([96, 82, 22, 87, 3, 15], 650) == 1362\nassert solution.minimumTime([88], 593) == 52184\nassert solution.minimumTime([31, 13, 56, 51, 95, 7, 24, 98], 17) == 56\nassert solution.minimumTime([25, 101, 58, 29, 68, 19, 91], 120) == 684\nassert solution.minimumTime([80, 94, 49, 69, 43], 978) == 12054\nassert solution.minimumTime([22, 91, 92, 95, 86, 79, 15, 5], 596) == 1628\nassert solution.minimumTime([14, 30, 36, 100, 86, 52, 58, 89, 42], 398) == 1780\nassert solution.minimumTime([54, 9, 58, 61, 78, 22, 95, 45, 50, 3], 256) == 429\nassert solution.minimumTime([2, 16, 89, 50, 81, 68, 95, 34, 62, 94], 454) == 666\nassert solution.minimumTime([71, 88, 38, 28, 25, 80, 77, 84], 600) == 3668\nassert solution.minimumTime([81, 87, 65, 1, 64, 18, 10, 76], 141) == 119\nassert solution.minimumTime([68, 4, 49, 74], 665) == 2232\nassert solution.minimumTime([19, 7, 46, 96], 444) == 1957\nassert solution.minimumTime([13], 896) == 11648\nassert solution.minimumTime([5, 18, 14, 19, 23, 45, 83, 32], 714) == 1470\nassert solution.minimumTime([6], 83) == 498\nassert solution.minimumTime([88, 50], 936) == 29850\nassert solution.minimumTime([52, 85, 57, 5, 89, 96, 49], 794) == 2744\nassert solution.minimumTime([7, 80, 8, 94, 87, 10], 745) == 1856\nassert solution.minimumTime([46, 68, 73, 1, 65], 55) == 54\nassert solution.minimumTime([86, 90, 99, 20, 86, 3, 17, 90, 11], 945) == 1615\nassert solution.minimumTime([32, 87], 494) == 11571\nassert solution.minimumTime([10, 3, 85, 35, 50, 66, 59], 223) == 429\nassert solution.minimumTime([84, 71, 70], 793) == 19738",
  "inefficient_solution": "class Solution:\n    def minimumTime(self, time: List[int], totalTrips: int) -> int:\n        def check(t):\n            count = 0\n            for trip in time:\n                count += t // trip\n            return count >= totalTrips\n\n        l, r = 1, max(time) * totalTrips\n        while l < r:\n            mid = (l + r) // 2\n            if check(mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l",
  "is_python": true
}