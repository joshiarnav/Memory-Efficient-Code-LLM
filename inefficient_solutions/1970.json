{
  "problem_idx": 1970,
  "task_name": "Last Day Where You Can Still Cross",
  "markdown_description": "\nThere is a **1-based** binary matrix where `0` represents land and `1` represents water. You are given integers `row` and `col` representing the number of rows and columns in the matrix, respectively.\n\n\nInitially on day `0`, the **entire** matrix is **land**. However, each day a new cell becomes flooded with **water**. You are given a **1-based** 2D array `cells`, where `cells[i] = [ri, ci]` represents that on the `ith` day, the cell on the `rith` row and `cith` column (**1-based** coordinates) will be covered with **water** (i.e., changed to `1`).\n\n\nYou want to find the **last** day that it is possible to walk from the **top** to the **bottom** by only walking on land cells. You can start from **any** cell in the top row and end at **any** cell in the bottom row. You can only travel in the **four** cardinal directions (left, right, up, and down).\n\n\nReturn *the **last** day where it is possible to walk from the **top** to the **bottom** by only walking on land cells*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1970.Last%20Day%20Where%20You%20Can%20Still%20Cross/images/1.png)\n\n```\n\n**Input:** row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\n**Output:** 2\n**Explanation:** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1970.Last%20Day%20Where%20You%20Can%20Still%20Cross/images/2.png)\n\n```\n\n**Input:** row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\n**Output:** 1\n**Explanation:** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1970.Last%20Day%20Where%20You%20Can%20Still%20Cross/images/3.png)\n\n```\n\n**Input:** row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\n**Output:** 3\n**Explanation:** The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= row, col <= 2 * 104`\n* `4 <= row * col <= 2 * 104`\n* `cells.length == row * col`\n* `1 <= ri <= row`\n* `1 <= ci <= col`\n* All the values of `cells` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        n = row * col\n        p = list(range(n + 2))\n        grid = [[False] * col for _ in range(row)]\n        top, bottom = n, n + 1\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def check(i, j):\n            return 0 <= i < row and 0 <= j < col and grid[i][j]\n\n        for k in range(len(cells) - 1, -1, -1):\n            i, j = cells[k][0] - 1, cells[k][1] - 1\n            grid[i][j] = True\n            for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                if check(i + x, j + y):\n                    p[find(i * col + j)] = find((i + x) * col + j + y)\n            if i == 0:\n                p[find(i * col + j)] = find(top)\n            if i == row - 1:\n                p[find(i * col + j)] = find(bottom)\n            if find(top) == find(bottom):\n                return k\n        return 0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        n = row * col\n        p = list(range(n + 2))\n        grid = [[False] * col for _ in range(row)]\n        top, bottom = n, n + 1\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def check(i, j):\n            return 0 <= i < row and 0 <= j < col and grid[i][j]\n\n        for k in range(len(cells) - 1, -1, -1):\n            i, j = cells[k][0] - 1, cells[k][1] - 1\n            grid[i][j] = True\n            for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                if check(i + x, j + y):\n                    p[find(i * col + j)] = find((i + x) * col + j + y)\n            if i == 0:\n                p[find(i * col + j)] = find(top)\n            if i == row - 1:\n                p[find(i * col + j)] = find(bottom)\n            if find(top) == find(bottom):\n                return k\n        return 0\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random row and col values\n    row = random.randint(2, 11)\n    col = random.randint(2, 11)\n    \n    # Generate random cells with unique values\n    cells = random.sample([(i, j) for i in range(1, row + 1) for j in range(1, col + 1)], random.randint(4, row * col))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.latestDayToCross(row, col, cells)\n\n    return row, col, cells, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        row, col, cells, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.latestDayToCross(row, col, cells) == expected_result\n        print(f\"assert solution.latestDayToCross({row}, {col}, {cells}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.latestDayToCross({row}, {col}, {cells}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.latestDayToCross(8, 2, [(8, 2), (3, 1), (5, 2), (4, 2), (6, 2)]) == 0\nassert solution.latestDayToCross(7, 10, [(1, 9), (5, 2), (3, 9), (1, 2), (4, 9), (2, 3), (3, 2), (7, 5), (6, 5), (7, 3), (5, 6), (3, 6), (5, 10), (5, 7), (6, 8), (7, 4), (7, 7), (5, 4), (4, 1), (7, 8), (7, 10), (1, 5), (2, 10), (4, 2), (4, 7), (2, 5), (5, 5), (4, 5), (7, 6), (1, 6), (3, 3), (3, 5), (3, 1), (2, 1), (3, 8), (6, 10), (2, 8), (3, 7), (7, 2), (6, 3), (1, 10), (3, 4), (5, 3), (4, 6), (1, 4), (6, 1), (6, 2), (4, 8), (2, 9), (1, 8), (4, 10)]) == 17\nassert solution.latestDayToCross(11, 5, [(3, 4), (7, 3), (11, 5), (2, 2), (8, 5), (6, 5), (9, 1), (5, 1), (5, 5), (9, 3), (1, 4), (10, 4), (6, 1), (8, 3), (1, 5), (11, 4), (3, 1), (11, 3), (5, 3), (10, 1), (2, 1), (10, 2)]) == 0\nassert solution.latestDayToCross(11, 7, [(3, 3), (1, 4), (3, 4), (2, 1), (3, 7), (5, 3), (11, 7), (11, 2), (2, 2), (2, 4), (5, 1), (5, 7), (4, 1), (10, 4), (2, 6), (10, 3), (11, 4), (8, 4), (8, 6), (3, 5), (5, 4), (1, 1), (6, 5), (7, 5), (5, 2), (7, 3), (1, 5), (1, 6), (3, 6), (6, 3), (2, 5), (4, 2), (3, 2), (5, 6), (9, 6), (9, 3), (1, 7), (6, 7), (7, 6), (6, 6), (10, 6), (7, 7), (8, 7), (4, 7), (10, 7), (7, 4), (6, 4), (11, 5), (3, 1), (9, 4), (4, 3), (8, 1)]) == 4\nassert solution.latestDayToCross(2, 6, [(2, 2), (2, 3), (1, 3), (1, 6), (1, 4), (2, 5), (2, 1), (2, 6), (1, 2), (1, 1)]) == 6\nassert solution.latestDayToCross(2, 8, [(1, 2), (2, 8), (2, 3), (1, 3), (1, 8), (2, 1), (1, 4), (2, 5), (2, 4), (1, 7), (2, 2), (2, 6), (1, 6), (1, 5), (2, 7)]) == 11\nassert solution.latestDayToCross(11, 11, [(3, 9), (1, 1), (3, 3), (9, 2), (9, 6), (9, 8), (3, 4), (3, 6), (8, 8), (6, 9), (2, 9), (8, 3), (11, 4), (6, 3), (8, 9), (4, 2), (10, 5), (11, 7), (7, 6), (2, 5), (7, 11), (2, 8), (7, 5), (11, 9), (3, 2), (7, 3), (1, 5), (2, 10), (2, 2), (4, 10), (9, 11), (10, 8), (10, 7), (8, 2), (11, 11), (5, 6), (3, 11), (5, 5), (5, 1), (1, 8)]) == 0\nassert solution.latestDayToCross(7, 8, [(6, 4), (4, 2), (5, 5), (7, 7), (5, 4), (5, 7)]) == 0\nassert solution.latestDayToCross(11, 8, [(2, 5), (6, 7), (8, 8), (9, 2), (3, 7), (1, 2), (8, 1), (1, 7), (10, 1), (9, 5), (4, 8), (3, 1), (5, 3), (7, 7), (10, 5), (4, 2), (3, 8), (4, 7), (4, 3)]) == 0\nassert solution.latestDayToCross(8, 7, [(7, 7), (4, 4), (4, 7), (3, 1), (3, 3), (2, 3), (8, 1), (3, 5), (4, 1), (4, 3), (7, 5), (8, 3), (8, 2), (5, 6), (4, 2), (5, 5), (2, 7), (5, 3), (8, 4), (7, 2), (8, 6), (8, 7), (2, 1), (7, 4), (5, 2), (5, 7), (6, 4), (4, 6), (1, 5), (1, 3), (6, 5), (1, 4), (3, 6), (5, 1), (7, 1), (6, 1), (2, 5), (2, 4), (3, 7), (5, 4), (1, 6), (2, 6), (7, 3), (3, 4), (3, 2), (4, 5), (1, 2), (6, 3), (7, 6), (1, 7), (6, 2), (2, 2), (8, 5)]) == 15\nassert solution.latestDayToCross(2, 3, [(2, 3), (1, 2), (1, 1), (1, 3), (2, 1)]) == 2\nassert solution.latestDayToCross(3, 6, [(3, 5), (2, 3), (2, 6), (1, 3), (3, 2), (2, 4)]) == 0\nassert solution.latestDayToCross(2, 9, [(1, 8), (1, 4), (2, 9), (1, 3), (1, 2), (1, 1), (2, 2), (1, 9), (2, 5), (2, 4), (1, 5), (2, 3)]) == 8\nassert solution.latestDayToCross(5, 11, [(5, 8), (3, 1), (4, 10), (3, 9), (2, 7), (3, 2), (4, 2), (4, 8), (1, 2), (1, 3), (4, 1), (5, 3), (5, 2), (3, 10), (4, 5), (5, 9), (1, 1), (5, 5), (2, 2), (2, 5), (1, 9), (3, 7), (5, 7), (5, 11), (2, 10), (4, 11), (2, 8), (4, 4), (4, 7), (1, 6), (1, 10), (5, 10), (1, 11), (3, 11), (2, 6), (3, 5), (2, 1), (1, 5), (2, 11), (3, 8), (1, 4), (2, 4), (5, 4), (3, 4), (1, 8), (4, 9), (2, 9), (3, 3), (3, 6), (1, 7)]) == 27\nassert solution.latestDayToCross(4, 11, [(2, 8), (4, 9), (2, 6), (3, 5), (3, 7), (1, 3), (4, 6), (1, 11), (3, 11), (4, 8), (4, 5), (2, 1), (1, 10), (1, 6), (3, 10), (4, 1), (4, 11), (4, 7), (2, 3), (2, 9), (1, 5), (2, 4), (3, 3), (2, 11), (1, 2), (4, 4), (1, 7), (3, 6), (4, 3), (2, 2), (3, 8), (2, 10), (1, 4)]) == 18\nassert solution.latestDayToCross(10, 11, [(9, 11), (9, 9), (9, 3), (9, 4), (10, 2), (9, 6), (5, 7), (4, 6), (7, 1), (10, 5), (3, 8), (10, 4), (7, 10), (5, 9), (5, 4), (10, 6), (8, 5), (8, 3), (2, 7), (10, 8), (6, 4), (5, 2), (5, 5), (10, 11), (5, 10), (3, 10), (3, 4), (9, 8), (2, 3), (8, 7), (9, 2), (3, 3), (10, 10), (6, 10), (4, 8), (5, 8), (10, 3), (10, 1), (9, 1), (8, 10), (8, 1), (6, 7), (9, 5), (1, 9), (4, 10), (4, 1), (9, 10), (3, 1), (1, 6), (3, 9), (6, 3), (10, 9), (1, 10), (1, 3), (10, 7), (4, 7), (7, 7), (2, 4), (7, 6), (3, 11), (7, 9), (8, 9)]) == 0\nassert solution.latestDayToCross(6, 11, [(2, 1), (2, 10), (1, 8), (1, 6), (3, 2), (2, 5), (6, 4), (5, 5), (4, 9), (2, 4), (1, 1), (5, 2), (4, 3), (4, 4), (2, 2), (3, 7), (4, 6), (5, 6), (3, 8), (4, 8), (3, 9), (5, 9), (4, 5), (3, 10), (3, 1), (3, 5), (1, 10), (4, 2), (3, 4), (5, 10), (6, 9), (6, 6), (4, 7), (1, 4), (3, 11), (6, 10), (2, 3), (5, 8), (1, 2), (5, 1), (4, 1), (5, 3), (2, 7), (1, 3), (6, 7), (1, 7), (6, 11), (1, 5), (1, 9), (2, 8), (2, 6), (2, 11)]) == 18\nassert solution.latestDayToCross(3, 8, [(3, 8), (2, 8), (3, 5), (1, 7), (1, 3), (2, 4), (2, 5), (1, 1), (1, 6), (3, 3)]) == 0\nassert solution.latestDayToCross(6, 10, [(1, 6), (6, 10), (2, 3), (2, 8), (5, 1), (2, 2), (4, 10), (4, 6), (4, 9), (3, 6), (4, 8), (3, 2), (2, 10), (1, 8), (6, 7), (3, 1), (3, 4), (4, 1), (5, 4), (4, 7), (4, 5), (3, 7), (4, 3), (1, 9), (1, 3), (5, 5), (1, 4), (1, 7), (5, 8), (6, 9), (6, 4), (3, 3), (6, 1), (1, 1), (4, 4), (5, 6), (3, 8), (1, 5), (5, 10), (5, 7), (6, 2), (6, 6), (1, 2), (4, 2), (2, 1), (5, 3), (6, 5), (2, 9), (2, 7), (3, 9), (3, 5), (2, 6), (2, 4), (2, 5), (3, 10), (5, 2)]) == 20\nassert solution.latestDayToCross(7, 4, [(6, 2), (7, 4), (7, 1), (6, 4), (5, 1), (5, 4), (2, 4), (7, 2), (1, 4), (5, 2), (5, 3), (4, 1), (7, 3)]) == 0\nassert solution.latestDayToCross(8, 11, [(5, 11), (2, 8), (4, 4), (7, 2), (2, 3), (2, 7), (6, 7), (5, 4), (7, 8), (8, 7), (2, 4), (3, 11), (5, 8), (7, 5), (4, 7), (5, 7), (7, 7), (6, 5), (4, 5), (3, 7), (7, 4), (8, 2), (7, 6), (1, 11), (3, 9), (3, 10)]) == 0\nassert solution.latestDayToCross(11, 5, [(9, 5), (10, 4), (3, 1), (2, 1), (6, 4), (3, 3), (4, 3), (9, 3), (1, 4), (5, 1), (10, 5), (11, 4), (3, 4), (6, 3), (5, 4), (4, 5), (4, 2), (3, 2), (11, 5), (4, 4), (5, 3), (1, 3), (7, 1), (8, 5)]) == 0\nassert solution.latestDayToCross(4, 11, [(4, 6), (1, 8), (4, 2), (3, 9), (2, 6), (3, 1), (2, 2), (3, 7), (3, 4), (2, 4), (3, 8), (3, 10), (4, 10), (3, 11), (4, 11), (1, 10), (4, 7), (1, 11), (2, 1), (1, 1), (2, 7), (2, 10), (4, 5), (3, 6), (1, 6), (3, 2), (1, 2), (4, 4), (2, 3), (1, 5)]) == 11\nassert solution.latestDayToCross(10, 7, [(3, 6), (1, 2), (10, 2), (5, 3), (5, 7), (6, 2), (1, 4), (2, 2), (10, 6), (2, 5), (6, 6), (4, 5), (4, 2), (8, 3), (8, 7), (6, 3), (7, 7), (10, 7), (7, 2), (3, 1), (7, 6), (7, 1), (2, 4), (8, 2), (7, 3), (10, 5), (10, 3), (8, 4), (10, 1), (4, 7), (2, 6), (7, 4), (1, 3), (2, 3), (9, 3), (1, 7), (9, 1), (3, 7), (4, 4), (8, 1), (1, 5), (4, 6), (5, 4), (9, 6), (2, 1), (5, 6), (9, 5), (1, 1), (6, 1), (1, 6), (5, 5), (10, 4), (7, 5), (3, 2), (2, 7), (9, 4), (4, 3), (5, 1), (4, 1), (3, 5), (5, 2), (8, 5), (6, 4), (6, 7), (9, 2), (9, 7), (3, 4), (8, 6), (3, 3)]) == 31\nassert solution.latestDayToCross(9, 3, [(5, 3), (3, 1), (4, 1), (9, 2), (2, 3), (6, 1), (2, 2), (9, 3), (7, 3)]) == 0\nassert solution.latestDayToCross(2, 4, [(2, 2), (2, 3), (2, 4), (1, 4), (1, 2), (1, 1), (1, 3), (2, 1)]) == 5\nassert solution.latestDayToCross(4, 11, [(4, 1), (4, 7), (3, 6), (2, 4), (1, 2), (4, 3), (1, 6), (1, 4), (2, 11), (2, 6), (3, 3), (4, 8), (1, 10), (2, 5), (3, 5), (4, 10), (1, 9), (4, 4), (3, 7), (1, 5), (2, 10), (2, 3), (2, 1), (3, 2), (2, 9), (1, 8), (3, 1), (2, 7), (3, 4), (1, 7), (1, 1), (2, 8), (3, 11), (1, 3), (4, 6), (4, 5), (4, 11), (2, 2), (4, 9)]) == 13\nassert solution.latestDayToCross(3, 5, [(2, 4), (1, 4), (2, 3), (1, 3), (3, 2), (1, 2), (2, 2), (3, 4), (3, 5), (1, 1)]) == 4\nassert solution.latestDayToCross(8, 4, [(3, 3), (4, 2), (5, 3), (7, 1), (4, 4), (6, 4), (3, 1), (6, 3), (7, 2), (1, 3), (1, 4), (8, 3), (5, 4), (8, 2), (3, 2), (8, 1), (2, 1), (7, 3), (2, 2), (4, 3), (2, 3), (6, 1)]) == 1\nassert solution.latestDayToCross(11, 11, [(3, 11), (3, 9), (1, 8), (2, 4), (2, 10), (7, 9), (6, 5), (1, 9), (6, 11), (3, 10), (7, 2), (8, 1), (7, 5), (4, 6), (2, 6), (6, 1), (5, 2), (3, 8), (9, 6), (7, 10), (5, 8), (8, 5), (4, 7), (9, 7), (11, 1), (1, 4), (11, 7), (10, 2), (8, 3), (6, 3), (3, 7), (2, 3), (2, 9), (1, 10), (1, 6), (6, 4), (2, 8), (10, 10), (10, 1), (1, 5), (8, 10), (3, 6), (4, 3), (2, 5), (3, 3), (5, 11), (5, 4), (8, 7), (6, 9), (6, 2), (8, 2), (9, 10), (11, 4), (11, 9), (9, 11), (10, 7), (1, 2), (10, 5), (6, 6), (5, 10), (6, 8), (3, 5), (9, 9), (5, 3), (7, 4), (10, 8), (7, 3), (11, 5), (11, 2), (9, 1), (8, 9), (3, 2), (2, 7), (8, 11), (11, 3), (10, 11), (6, 7), (4, 1), (5, 7), (2, 11), (2, 1), (4, 10), (11, 6)]) == 6\nassert solution.latestDayToCross(6, 5, [(6, 5), (4, 5), (4, 2), (6, 3), (2, 2), (3, 5), (3, 1)]) == 0\nassert solution.latestDayToCross(7, 11, [(6, 3), (2, 8), (6, 6), (1, 10), (6, 2), (5, 5), (2, 4), (4, 6), (1, 7), (7, 5), (7, 7), (4, 11), (6, 11), (2, 2), (5, 8), (4, 5), (4, 1), (4, 3), (1, 9), (2, 11), (4, 8), (5, 6), (1, 5), (3, 8), (1, 4), (2, 7), (5, 10), (5, 11), (7, 1), (3, 6), (7, 11), (4, 10), (2, 9), (2, 10), (7, 3), (5, 9), (6, 8), (4, 4), (3, 10), (7, 8), (3, 2), (6, 10), (2, 1), (6, 7), (5, 1), (4, 7), (6, 1), (3, 1), (6, 5), (6, 9), (6, 4), (3, 9), (1, 2), (5, 3), (3, 3), (2, 5), (7, 4), (5, 4), (5, 7), (7, 2), (1, 11), (4, 2), (3, 7), (7, 9), (1, 1), (4, 9)]) == 19\nassert solution.latestDayToCross(10, 8, [(6, 3), (4, 5), (7, 8), (4, 7), (5, 3), (2, 8), (7, 2), (2, 5)]) == 0\nassert solution.latestDayToCross(10, 5, [(3, 3), (1, 1), (10, 2), (8, 3), (8, 2), (4, 5), (1, 2), (6, 5), (1, 5), (9, 5), (4, 1), (1, 4), (8, 1), (9, 2), (5, 1), (2, 5), (3, 1), (7, 2), (5, 3), (6, 2), (7, 4), (5, 4), (2, 3), (10, 1), (7, 1), (8, 4), (3, 2), (7, 5), (9, 1), (5, 2), (5, 5), (3, 4), (4, 4)]) == 0\nassert solution.latestDayToCross(6, 9, [(4, 4), (4, 8), (3, 1), (6, 6), (2, 6), (2, 7), (1, 8), (3, 2), (6, 8), (5, 9), (3, 4), (4, 5), (3, 6), (5, 3), (6, 7), (6, 5), (3, 3), (4, 3), (1, 9), (5, 8), (2, 8), (4, 6), (5, 6), (5, 1), (6, 1), (2, 2), (5, 4), (1, 3), (1, 6), (2, 4), (6, 9), (1, 1), (3, 8), (1, 4), (5, 2), (6, 3), (3, 9), (2, 3), (5, 5), (5, 7), (1, 5), (3, 5), (1, 2), (6, 2), (4, 2), (2, 1), (4, 9), (1, 7), (6, 4)]) == 16\nassert solution.latestDayToCross(11, 9, [(1, 2), (9, 8), (7, 8), (10, 9), (11, 6), (11, 9), (6, 5), (9, 7), (11, 7), (5, 7), (2, 9), (5, 8), (7, 5), (7, 4), (3, 9), (9, 1), (2, 4), (11, 8), (3, 6), (9, 4), (3, 4), (2, 2)]) == 0\nassert solution.latestDayToCross(9, 6, [(2, 1), (4, 6), (4, 2), (2, 4), (5, 6), (4, 3), (4, 4), (4, 5), (1, 4), (1, 1), (6, 6), (1, 2), (4, 1), (8, 6), (8, 5), (5, 4)]) == 0\nassert solution.latestDayToCross(9, 3, [(2, 1), (8, 1), (1, 2), (5, 2), (6, 3), (5, 3), (4, 1), (1, 1), (4, 2), (8, 3), (8, 2), (9, 3), (9, 1), (5, 1), (3, 3), (9, 2), (3, 1), (7, 1), (2, 2), (4, 3), (6, 1), (2, 3), (3, 2), (7, 2), (6, 2)]) == 2\nassert solution.latestDayToCross(6, 9, [(1, 3), (2, 9), (6, 9), (4, 7), (6, 3), (5, 6), (5, 5), (1, 4), (4, 2), (5, 9), (2, 8), (2, 3), (6, 8), (1, 1), (3, 9), (4, 8), (3, 7), (6, 5), (4, 3), (2, 5), (3, 2), (2, 2), (2, 4), (6, 7), (3, 8), (3, 1), (2, 1), (3, 6), (2, 7), (5, 2), (1, 7), (2, 6)]) == 0\nassert solution.latestDayToCross(9, 5, [(9, 1), (6, 3), (8, 5), (1, 4), (3, 1), (2, 5)]) == 0\nassert solution.latestDayToCross(3, 9, [(2, 8), (2, 9), (2, 2), (1, 5), (3, 2), (3, 1), (1, 2), (2, 1), (1, 3), (3, 4), (1, 7), (3, 7), (1, 1), (3, 8), (2, 6), (2, 5)]) == 5\nassert solution.latestDayToCross(4, 3, [(1, 3), (2, 3), (2, 2), (4, 3), (2, 1), (3, 2), (4, 1), (4, 2), (3, 3), (1, 2), (3, 1)]) == 2\nassert solution.latestDayToCross(8, 6, [(2, 4), (4, 3), (5, 4), (1, 3), (7, 6), (8, 5), (2, 3), (8, 3), (3, 6), (3, 4), (8, 2)]) == 0\nassert solution.latestDayToCross(4, 6, [(1, 3), (3, 2), (4, 2), (4, 1), (2, 1), (1, 2), (1, 1), (1, 4), (3, 1), (2, 5), (4, 6), (2, 4), (4, 4), (2, 6), (3, 5), (3, 3), (1, 6), (2, 3), (4, 3), (3, 6), (1, 5), (3, 4)]) == 13\nassert solution.latestDayToCross(3, 7, [(3, 3), (2, 2), (1, 7), (1, 6), (3, 6), (3, 1), (2, 6), (3, 7), (2, 3), (2, 7), (1, 3), (2, 5), (2, 4), (1, 1), (1, 5), (3, 5), (3, 2), (3, 4), (1, 4)]) == 12\nassert solution.latestDayToCross(3, 10, [(2, 1), (1, 1), (1, 7), (2, 3), (3, 4), (2, 7), (3, 9), (3, 1)]) == 0\nassert solution.latestDayToCross(9, 6, [(4, 1), (6, 5), (2, 6), (1, 4), (9, 3), (8, 4), (4, 4), (4, 5), (8, 1), (5, 3), (5, 4), (5, 2), (2, 1), (6, 4)]) == 0\nassert solution.latestDayToCross(11, 11, [(10, 7), (8, 11), (9, 2), (11, 6), (8, 5), (6, 3), (2, 3), (11, 2), (9, 11), (1, 2), (5, 11), (3, 7), (4, 1), (8, 10), (3, 8)]) == 0\nassert solution.latestDayToCross(6, 4, [(6, 1), (1, 3), (4, 4), (4, 3), (2, 1), (5, 3), (3, 2), (1, 1), (1, 2), (3, 4), (2, 3), (4, 2), (6, 4), (3, 3), (5, 1), (4, 1), (2, 2), (1, 4), (5, 4), (6, 2), (3, 1), (5, 2)]) == 6\nassert solution.latestDayToCross(2, 5, [(2, 2), (1, 3), (2, 1), (2, 4), (1, 4), (1, 1), (2, 3), (2, 5), (1, 2)]) == 3\nassert solution.latestDayToCross(10, 9, [(2, 2), (1, 4), (6, 8), (6, 1), (10, 5), (8, 1), (8, 9), (3, 6), (7, 2), (5, 8), (4, 9), (1, 1), (7, 5), (10, 7), (10, 9), (9, 7), (1, 7), (5, 4), (3, 5), (5, 6), (8, 2), (9, 2), (2, 4), (9, 8), (3, 4), (5, 1), (6, 4), (8, 5), (8, 4), (7, 6), (1, 6), (1, 9), (6, 7), (5, 2), (8, 7), (9, 6), (10, 3), (4, 1), (9, 4), (9, 9), (5, 7), (2, 5), (8, 3), (2, 6), (3, 7), (1, 5), (7, 1)]) == 0\nassert solution.latestDayToCross(11, 4, [(8, 4), (6, 2), (11, 4), (9, 2), (1, 2), (4, 1), (9, 4), (3, 2), (10, 1), (9, 3), (8, 3), (2, 2), (3, 4), (3, 3), (6, 4), (2, 4), (2, 1), (9, 1), (11, 3), (1, 4), (4, 2), (7, 3), (7, 2)]) == 0\nassert solution.latestDayToCross(5, 5, [(2, 4), (5, 1), (2, 1), (5, 4), (3, 3), (3, 5), (4, 2), (2, 5), (2, 3), (3, 2), (5, 2)]) == 0\nassert solution.latestDayToCross(11, 4, [(6, 4), (10, 2), (5, 4), (4, 3), (5, 2), (3, 4), (11, 2), (10, 4), (5, 3), (8, 2), (4, 1), (6, 2), (2, 1), (9, 2), (8, 3), (10, 3), (1, 1), (1, 3)]) == 0\nassert solution.latestDayToCross(7, 8, [(1, 6), (1, 8), (1, 1), (6, 1), (2, 8), (3, 8), (4, 1), (7, 8), (5, 4), (5, 8), (2, 5), (4, 7), (3, 1), (3, 7), (4, 6), (2, 7), (7, 5), (7, 6), (6, 8), (2, 1), (3, 6), (2, 2), (5, 1), (3, 2), (7, 1)]) == 2\nassert solution.latestDayToCross(8, 4, [(3, 2), (1, 1), (2, 1), (6, 4), (5, 3), (3, 4), (1, 3), (4, 2), (5, 2), (8, 2), (7, 4), (6, 2), (7, 1), (7, 3), (4, 3), (7, 2)]) == 0\nassert solution.latestDayToCross(4, 9, [(3, 4), (4, 1), (4, 9), (4, 6), (2, 4), (2, 8), (4, 3), (4, 2), (1, 1), (4, 4), (1, 2)]) == 0\nassert solution.latestDayToCross(10, 10, [(6, 2), (2, 4), (6, 4), (1, 8), (7, 5), (3, 7), (3, 6), (1, 7), (9, 7), (4, 6), (10, 8), (6, 7), (8, 8), (7, 10), (2, 3), (8, 7), (7, 7), (1, 6), (9, 6), (3, 3), (5, 2), (7, 3), (10, 10), (2, 6), (1, 3), (2, 1), (5, 1), (2, 10), (4, 7), (7, 8), (10, 6), (4, 9), (3, 1), (5, 6), (4, 1), (8, 3), (3, 2), (10, 4), (10, 9), (9, 2), (5, 8), (4, 3), (5, 9), (1, 10), (4, 10), (8, 5), (4, 5), (1, 2), (1, 4), (9, 5), (7, 9), (6, 8), (10, 3), (4, 2), (6, 10), (9, 1), (2, 5), (5, 10), (6, 1), (9, 8), (7, 1), (10, 2), (10, 1), (9, 9), (7, 2), (2, 2), (3, 8), (9, 3), (2, 7), (8, 2), (8, 9), (7, 6), (8, 6), (5, 5), (6, 6), (8, 4), (8, 10), (3, 4), (6, 5), (4, 4), (1, 5), (7, 4)]) == 35\nassert solution.latestDayToCross(8, 3, [(6, 2), (5, 2), (2, 2), (8, 1), (4, 2), (6, 3), (6, 1), (7, 3), (2, 1), (5, 3), (7, 1), (3, 3), (3, 2), (3, 1), (4, 3), (8, 3), (1, 1), (2, 3), (5, 1), (1, 3), (1, 2), (7, 2), (4, 1), (8, 2)]) == 6\nassert solution.latestDayToCross(9, 9, [(3, 8), (7, 2), (3, 4), (8, 2), (5, 8), (3, 5), (7, 6), (5, 6), (1, 1), (6, 2), (7, 4), (5, 4), (5, 9), (9, 2), (2, 6), (1, 4), (8, 4), (7, 8), (2, 7), (6, 6), (2, 9), (7, 1), (4, 1), (3, 1), (4, 9), (2, 3), (9, 5), (8, 1)]) == 0\nassert solution.latestDayToCross(5, 5, [(5, 1), (3, 4), (1, 5), (1, 2), (4, 4), (3, 5), (5, 3), (3, 1), (5, 4), (5, 5), (4, 1), (2, 4), (3, 2), (4, 3), (4, 2), (2, 3), (2, 1), (2, 5), (2, 2), (4, 5), (1, 4)]) == 6\nassert solution.latestDayToCross(7, 4, [(2, 3), (7, 4), (4, 2), (5, 2), (6, 3), (4, 3), (1, 2), (2, 4), (3, 1), (5, 3), (7, 1), (1, 3), (3, 4), (3, 2), (3, 3), (7, 3), (1, 4), (2, 1), (2, 2), (1, 1), (7, 2), (6, 2), (5, 4), (6, 4)]) == 4\nassert solution.latestDayToCross(5, 10, [(2, 7), (5, 1), (2, 4), (2, 9), (1, 1), (5, 3), (4, 1), (5, 6), (2, 2), (4, 4), (4, 10), (2, 5), (1, 10), (4, 6), (4, 8), (3, 9), (2, 6), (5, 5), (4, 2), (5, 4), (4, 7), (5, 7), (5, 2), (1, 8), (2, 10), (3, 6), (3, 7), (5, 10), (4, 5), (1, 7), (2, 1), (1, 4), (1, 9), (3, 2), (1, 5), (5, 9), (3, 10), (4, 9), (3, 3), (3, 8), (1, 6), (3, 5), (3, 1), (2, 3), (1, 2), (2, 8), (5, 8)]) == 20\nassert solution.latestDayToCross(6, 3, [(6, 3), (4, 1), (3, 1), (5, 1), (1, 1), (4, 2), (6, 2), (6, 1), (4, 3)]) == 0\nassert solution.latestDayToCross(2, 6, [(1, 3), (1, 6), (1, 2), (2, 3), (2, 2), (2, 1), (1, 4), (2, 5), (2, 6), (1, 5)]) == 7\nassert solution.latestDayToCross(4, 4, [(1, 1), (1, 2), (2, 3), (4, 3), (4, 1), (3, 1), (4, 4), (3, 3), (1, 4), (2, 1), (3, 4), (1, 3), (2, 2), (4, 2), (3, 2), (2, 4)]) == 7\nassert solution.latestDayToCross(7, 6, [(2, 6), (6, 4), (2, 1), (6, 6), (1, 2), (4, 3)]) == 0\nassert solution.latestDayToCross(4, 11, [(1, 1), (3, 11), (3, 2), (4, 7), (4, 4), (1, 2), (3, 7), (2, 2), (2, 9), (3, 6), (4, 11), (2, 7), (1, 5), (2, 4), (4, 9), (3, 10), (4, 6), (2, 8), (2, 3), (1, 3), (4, 10), (4, 1), (2, 5), (2, 1), (3, 8), (4, 5), (1, 10), (1, 4), (1, 9), (3, 3), (3, 4), (2, 10), (3, 5), (3, 1), (3, 9), (4, 8), (1, 8), (4, 3)]) == 18\nassert solution.latestDayToCross(2, 4, [(1, 1), (2, 4), (1, 4), (2, 3), (1, 3), (2, 1), (1, 2)]) == 3\nassert solution.latestDayToCross(4, 10, [(1, 7), (3, 6), (4, 1), (2, 9), (4, 3), (1, 5), (1, 1), (1, 8), (4, 5), (1, 10), (4, 9), (1, 9), (2, 6), (2, 8), (1, 3), (4, 7), (4, 4), (3, 4), (1, 2), (3, 10), (4, 2), (3, 7), (3, 5), (1, 6), (4, 8), (2, 3), (1, 4), (2, 4), (3, 8), (3, 1), (2, 10), (4, 10)]) == 16\nassert solution.latestDayToCross(4, 10, [(1, 6), (3, 6), (2, 5), (2, 1), (4, 9), (3, 4), (2, 7), (2, 6), (3, 10), (3, 3), (1, 3), (4, 10), (2, 10), (4, 8), (2, 4), (1, 7), (1, 5), (3, 9), (2, 2), (3, 1), (3, 5), (4, 6), (3, 7), (1, 1), (4, 5), (1, 8), (1, 9), (4, 7), (1, 2), (3, 8), (4, 1), (2, 3), (2, 9), (1, 4), (1, 10), (4, 3), (4, 4), (2, 8), (4, 2), (3, 2)]) == 22\nassert solution.latestDayToCross(9, 9, [(9, 3), (5, 3), (6, 1), (2, 3), (4, 4), (3, 6), (7, 4), (5, 7), (1, 4), (6, 8), (8, 6), (2, 2), (7, 3), (9, 8), (4, 3), (5, 4), (1, 5), (3, 4), (4, 6), (4, 1), (8, 3), (6, 9), (8, 7), (8, 8), (5, 9), (1, 7), (9, 2), (1, 6), (8, 9), (7, 5), (4, 5), (7, 6), (3, 8), (5, 5), (9, 6), (6, 7), (3, 2), (4, 2), (6, 6), (7, 7), (2, 5), (7, 2), (6, 2), (4, 8), (8, 2), (1, 2), (8, 5), (2, 9), (5, 1), (4, 7), (3, 3), (1, 1), (8, 4), (9, 9), (3, 1), (6, 5), (6, 3), (2, 4), (5, 2), (2, 7), (2, 1), (4, 9), (7, 8), (9, 4), (2, 6), (7, 1), (1, 3), (3, 7), (3, 9), (9, 1), (8, 1), (7, 9), (3, 5), (6, 4), (2, 8), (9, 7), (1, 8), (1, 9)]) == 36\nassert solution.latestDayToCross(10, 5, [(6, 1), (5, 2), (5, 3), (9, 2), (4, 3), (9, 4), (8, 2), (10, 4), (5, 5), (8, 1), (5, 1), (2, 2), (2, 3), (9, 3), (4, 1), (9, 1), (2, 4), (7, 1), (6, 3), (1, 3)]) == 0\nassert solution.latestDayToCross(10, 3, [(9, 1), (5, 1), (10, 2), (3, 1)]) == 0\nassert solution.latestDayToCross(11, 9, [(3, 3), (1, 8), (2, 8), (5, 3), (11, 7), (4, 4), (2, 4), (5, 8), (6, 9), (7, 8), (5, 9), (5, 1), (8, 5), (7, 2), (3, 7), (11, 6), (5, 6), (6, 1), (4, 3), (7, 7), (5, 5), (1, 5), (4, 9), (6, 4), (9, 5), (7, 1), (4, 6), (9, 1), (6, 7), (2, 2), (7, 5), (5, 4), (4, 1), (10, 4), (8, 9), (10, 5), (11, 1), (2, 6), (2, 3), (3, 8), (6, 2), (2, 9), (6, 3), (6, 5), (1, 7), (3, 5), (5, 7), (1, 9), (11, 4), (1, 1), (7, 9), (9, 9), (11, 8), (1, 2), (8, 4), (8, 3), (1, 4), (7, 3), (8, 7), (3, 1), (8, 2), (10, 2), (11, 9), (10, 9), (10, 8), (10, 7), (7, 6), (4, 8), (6, 6), (9, 2), (3, 6), (4, 2), (11, 2), (1, 6), (11, 5), (10, 1), (10, 3), (2, 7), (9, 8), (9, 7), (2, 5), (5, 2), (11, 3)]) == 16\nassert solution.latestDayToCross(6, 7, [(4, 1), (4, 4), (6, 4), (5, 5), (6, 7), (2, 3), (3, 5), (1, 6), (5, 2), (1, 1), (1, 4), (2, 7)]) == 0\nassert solution.latestDayToCross(9, 6, [(8, 4), (6, 5), (9, 4), (2, 3), (6, 2), (1, 4), (5, 5), (4, 1), (7, 6), (6, 4), (5, 1), (7, 4), (2, 6), (7, 3), (1, 2), (4, 6), (3, 6), (4, 2), (4, 4), (8, 2), (3, 2), (5, 3), (3, 3), (8, 6), (9, 1), (2, 4)]) == 0\nassert solution.latestDayToCross(5, 8, [(1, 1), (1, 7), (5, 6), (2, 5), (4, 4), (4, 3), (1, 5), (1, 4), (3, 3), (2, 6), (3, 7), (1, 8), (3, 8), (2, 4), (3, 6), (5, 1), (3, 5), (3, 4), (3, 1), (4, 5), (5, 7), (4, 7), (4, 8), (2, 2), (2, 7), (5, 5), (4, 6), (1, 2), (2, 1), (2, 8), (5, 3), (4, 1)]) == 15\nassert solution.latestDayToCross(3, 10, [(2, 4), (1, 10), (1, 1), (3, 6), (1, 3), (3, 1), (2, 8), (3, 2), (2, 1), (3, 9)]) == 2\nassert solution.latestDayToCross(8, 6, [(4, 5), (8, 1), (8, 5), (2, 2), (3, 5), (1, 6), (7, 1), (6, 4), (7, 3), (5, 5), (2, 3), (5, 3), (2, 1), (1, 2), (3, 4), (7, 6), (8, 2), (8, 4), (3, 6), (4, 1), (1, 4), (8, 3), (3, 2), (7, 2), (6, 2), (5, 6), (3, 1), (1, 1), (8, 6), (1, 3), (5, 1), (2, 6), (5, 2), (4, 3), (2, 5), (4, 2), (2, 4), (3, 3), (6, 1), (4, 4), (5, 4), (7, 5), (4, 6), (6, 5), (6, 6), (6, 3), (1, 5), (7, 4)]) == 17\nassert solution.latestDayToCross(4, 4, [(4, 3), (4, 4), (2, 1), (1, 3), (2, 2), (3, 2), (2, 3), (4, 2)]) == 3\nassert solution.latestDayToCross(10, 4, [(4, 3), (10, 2), (4, 4), (6, 4), (6, 3), (1, 3), (2, 4), (5, 2), (5, 3), (6, 2), (7, 2), (7, 1), (5, 1), (1, 1), (9, 3), (7, 4), (10, 3), (9, 4), (3, 3), (3, 1), (2, 2), (10, 1), (1, 2), (8, 4), (8, 3), (2, 3), (9, 1), (10, 4), (3, 2), (6, 1), (8, 2), (5, 4)]) == 0\nassert solution.latestDayToCross(10, 10, [(1, 6), (7, 8), (1, 4), (8, 2), (3, 10), (1, 10), (3, 3), (8, 5), (8, 7), (8, 8), (10, 3), (5, 2), (5, 10), (7, 7), (3, 6), (3, 7), (2, 7), (9, 1), (5, 8), (3, 5), (2, 5), (4, 8), (7, 1), (2, 8), (7, 9), (3, 2), (1, 7), (10, 1), (7, 5), (5, 3), (6, 9), (10, 2), (2, 4), (10, 10), (2, 1), (5, 1), (4, 10), (8, 4), (1, 5), (9, 10), (6, 3), (3, 9), (8, 10), (2, 3), (6, 1), (4, 3), (7, 4), (5, 5), (7, 6), (6, 10), (1, 1)]) == 0\nassert solution.latestDayToCross(6, 7, [(5, 4), (2, 2), (3, 7), (4, 3), (6, 4), (1, 1), (3, 6), (1, 7), (3, 3), (2, 7), (4, 6), (5, 7), (3, 1), (2, 5), (2, 6), (4, 1), (5, 1), (1, 2), (6, 1), (1, 5), (5, 3), (6, 6), (1, 3), (3, 5), (4, 7), (4, 5), (6, 2), (3, 4), (1, 4), (6, 3), (4, 2), (6, 5), (6, 7), (2, 4), (5, 6), (5, 2), (2, 3), (3, 2), (5, 5), (4, 4)]) == 25\nassert solution.latestDayToCross(2, 3, [(1, 3), (2, 1), (1, 1), (2, 3), (1, 2), (2, 2)]) == 4\nassert solution.latestDayToCross(9, 5, [(9, 1), (8, 2), (5, 4), (3, 4), (2, 4), (3, 1), (3, 3), (1, 3), (2, 3), (2, 2), (3, 5), (3, 2), (1, 2), (9, 3), (8, 5), (5, 1), (9, 5), (7, 3), (4, 5), (8, 3), (9, 2), (4, 3), (1, 4), (8, 4), (6, 1), (6, 3), (5, 2), (6, 5), (6, 4), (1, 5), (7, 4), (4, 2), (2, 1), (2, 5), (8, 1), (4, 1), (7, 1), (7, 5)]) == 1\nassert solution.latestDayToCross(5, 10, [(3, 7), (4, 9), (1, 4), (2, 5), (2, 3), (1, 2), (1, 7), (5, 6), (3, 2), (4, 8), (1, 9), (3, 3), (2, 8), (5, 7), (1, 10), (5, 3), (2, 10), (2, 4), (1, 8), (1, 5), (2, 1), (4, 1), (4, 7), (3, 5), (4, 10), (5, 1), (2, 7), (1, 3), (3, 8), (5, 8), (4, 2), (3, 6), (2, 2), (2, 6), (1, 6), (3, 4)]) == 9\nassert solution.latestDayToCross(4, 2, [(4, 1), (3, 2), (1, 1), (3, 1)]) == 0\nassert solution.latestDayToCross(7, 7, [(5, 3), (1, 2), (6, 3), (2, 6), (1, 7), (7, 3), (1, 5), (1, 6), (4, 6), (6, 5), (2, 3), (3, 6), (7, 7), (3, 5), (3, 2), (4, 2), (5, 6), (5, 5), (1, 4), (2, 4), (7, 6), (3, 4), (7, 4), (4, 3), (3, 7), (7, 5), (6, 1), (2, 5), (1, 3), (6, 2), (7, 2), (3, 1), (5, 7), (4, 1), (2, 1), (4, 4), (5, 4)]) == 9\nassert solution.latestDayToCross(2, 5, [(2, 1), (1, 2), (1, 4), (2, 4), (2, 3), (1, 3), (1, 5)]) == 4\nassert solution.latestDayToCross(4, 3, [(2, 2), (3, 3), (3, 1), (2, 1), (4, 3), (2, 3), (1, 2), (4, 2), (3, 2), (1, 1), (1, 3)]) == 2\nassert solution.latestDayToCross(4, 11, [(2, 9), (3, 3), (3, 11), (1, 10), (1, 5), (3, 2), (3, 7), (2, 2), (3, 10), (2, 11), (3, 1), (1, 6), (1, 11), (2, 5), (1, 4), (1, 9), (3, 5), (1, 1), (1, 8), (4, 10), (2, 1)]) == 2\nassert solution.latestDayToCross(11, 6, [(6, 3), (4, 3), (9, 2), (8, 1), (6, 1), (9, 1), (5, 1), (11, 4), (3, 6), (5, 3), (2, 1), (2, 6), (10, 1), (11, 2), (11, 6), (4, 2), (2, 3), (10, 4), (3, 1), (4, 1), (1, 2), (7, 2), (6, 2), (7, 5), (4, 4), (5, 5), (5, 4), (9, 4), (2, 4), (3, 5), (8, 2), (7, 6), (4, 6), (6, 6), (9, 6), (11, 1), (7, 1), (5, 6), (2, 2), (1, 6), (8, 6), (10, 5), (3, 2), (3, 4), (10, 3), (6, 5), (9, 3), (7, 3), (1, 3), (8, 5), (6, 4), (10, 6), (8, 4), (1, 5), (10, 2), (5, 2), (11, 5), (1, 4), (1, 1), (8, 3), (4, 5), (3, 3)]) == 28\nassert solution.latestDayToCross(8, 7, [(7, 6), (2, 2), (7, 5), (8, 5), (3, 1), (2, 5), (6, 1), (7, 1), (2, 4), (4, 7), (4, 6), (3, 7), (5, 1), (5, 3), (8, 3), (2, 3), (1, 3), (3, 3), (8, 4), (7, 4), (4, 1), (2, 6), (6, 2), (5, 7), (5, 2), (3, 5), (5, 5), (1, 2), (1, 6), (6, 5), (6, 6), (4, 5), (6, 3)]) == 2\nassert solution.latestDayToCross(7, 2, [(3, 2), (1, 1), (2, 1), (5, 2), (5, 1), (7, 1), (4, 2), (6, 1), (2, 2), (3, 1), (4, 1), (6, 2), (1, 2)]) == 2\nassert solution.latestDayToCross(11, 4, [(8, 4), (6, 3), (2, 3), (1, 1), (4, 1), (9, 4), (5, 3), (6, 1), (10, 1), (4, 4), (11, 2), (3, 3), (4, 2), (7, 4), (2, 2), (6, 2), (9, 2), (11, 1), (8, 2), (1, 3), (11, 4), (10, 3), (5, 2), (1, 2), (7, 3), (2, 4), (7, 1), (5, 4)]) == 0\nassert solution.latestDayToCross(3, 4, [(1, 2), (3, 2), (1, 3), (3, 3), (1, 1), (2, 3), (2, 2)]) == 2\nassert solution.latestDayToCross(10, 6, [(10, 6), (4, 2), (6, 5), (2, 2), (6, 1), (9, 2), (5, 1), (8, 5), (5, 3), (5, 5), (4, 3), (1, 1), (4, 1), (7, 2), (9, 4), (10, 5)]) == 0\nassert solution.latestDayToCross(6, 7, [(1, 5), (3, 5), (1, 1), (2, 4), (1, 7), (1, 6), (1, 4), (4, 6), (6, 6), (5, 6), (1, 2), (3, 2), (2, 7), (4, 1), (2, 2)]) == 0\nassert solution.latestDayToCross(2, 2, [(1, 2), (1, 1), (2, 1), (2, 2)]) == 1",
  "inefficient_solution": "class Solution:\n    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:\n        n = row * col\n        p = [i for i in range(n + 2)]\n        grid = [[False] * (col + 1) for _ in range(row + 1)]\n        top = n\n        bottom = n + 1\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        def check(i, j):\n            return 0 <= i < row and 0 <= j < col and grid[i][j]\n\n        for k in range(len(cells) - 1, -1, -1):\n            i, j = cells[k][0] - 1, cells[k][1] - 1\n            grid[i][j] = True\n            for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                if check(i + x, j + y):\n                    p[find(i * col + j)] = find((i + x) * col + j + y)\n            if i == 0:\n                p[find(i * col + j)] = find(top)\n            if i == row - 1:\n                p[find(i * col + j)] = find(bottom)\n            if find(top) == find(bottom):\n                return k\n        return 0\n\n    def make_grid(self, row: int, col: int):\n        grid = []\n        for _ in range(row):\n            row_grid = []\n            for _ in range(col):\n                row_grid.append(0)\n            grid.append(row_grid)\n        return grid\n\n    def make_cells(self, cells: List[List[int]], row: int, col: int):\n        new_cells = []\n        for i, j in cells:\n            new_cells.append([i, j])\n        return new_cells\n\n    def main(self, row: int, col: int, cells: List[List[int]]) -> int:\n        n = row * col\n        grid = self.make_grid(row + 2, col + 2)\n        new_cells = self.make_cells(cells, row, col)\n        top = n\n        bottom = n + 1\n\n        def find(x):\n            if grid[1][1][x] != x:\n                grid[1][1][x] = find(grid[1][1][x])\n            return grid[1][1][x]\n\n        def check(i, j):\n            return 0 <= i < row + 2 and 0 <= j < col + 2 and grid[i][j]\n\n        for k in range(len(new_cells) - 1, -1, -1):\n            i, j = new_cells[k][0] - 1, new_cells[k][1] - 1\n            grid[i + 1][j + 1] = 1\n            for x, y in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                if check(i + x, j + y):\n                    grid[1][1][find(i * col + j)] = find((i + x) * col + j + y)\n            if i == 0:\n                grid[1][1][find(i * col + j)] = find(top)\n            if i == row - 1:\n                grid[1][1][find(i * col + j)] = find(bottom)\n            if find(top) == find(bottom):\n                return k\n        return 0",
  "is_python": true
}