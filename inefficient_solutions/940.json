{
  "problem_idx": 940,
  "task_name": "Distinct Subsequences II",
  "markdown_description": "\nGiven a string s, return *the number of **distinct non-empty subsequences** of* `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace\"` is a subsequence of `\"abcde\"` while `\"aec\"` is not.\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abc\"\n**Output:** 7\n**Explanation:** The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aba\"\n**Output:** 6\n**Explanation:** The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"aaa\"\n**Output:** 3\n**Explanation:** The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2000`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def distinctSubseqII(self, s: str) -> int:\n        mod = 10**9 + 7\n        dp = [0] * 26\n        ans = 0\n        for c in s:\n            i = ord(c) - ord('a')\n            add = ans - dp[i] + 1\n            ans = (ans + add) % mod\n            dp[i] += add\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def distinctSubseqII(self, s: str) -> int:\n        mod = 10**9 + 7\n        dp = [0] * 26\n        ans = 0\n        for c in s:\n            i = ord(c) - ord('a')\n            add = ans - dp[i] + 1\n            ans = (ans + add) % mod\n            dp[i] += add\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.distinctSubseqII(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.distinctSubseqII(s) == expected_result\n        print(f\"assert solution.distinctSubseqII('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.distinctSubseqII('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.distinctSubseqII('gazpxtii') == 191\nassert solution.distinctSubseqII('rhj') == 7\nassert solution.distinctSubseqII('nzfiylrgyr') == 927\nassert solution.distinctSubseqII('ucc') == 5\nassert solution.distinctSubseqII('mdeqz') == 31\nassert solution.distinctSubseqII('wousz') == 31\nassert solution.distinctSubseqII('ycmop') == 31\nassert solution.distinctSubseqII('hk') == 3\nassert solution.distinctSubseqII('vxlcdcal') == 219\nassert solution.distinctSubseqII('thxido') == 63\nassert solution.distinctSubseqII('dmpjgzqq') == 191\nassert solution.distinctSubseqII('tzjhpqx') == 127\nassert solution.distinctSubseqII('hjjvst') == 47\nassert solution.distinctSubseqII('ruxdvik') == 127\nassert solution.distinctSubseqII('qyddfkguf') == 371\nassert solution.distinctSubseqII('xnvnovqyu') == 415\nassert solution.distinctSubseqII('wy') == 3\nassert solution.distinctSubseqII('nf') == 3\nassert solution.distinctSubseqII('qepnpeg') == 107\nassert solution.distinctSubseqII('hco') == 7\nassert solution.distinctSubseqII('mvnxwihe') == 255\nassert solution.distinctSubseqII('go') == 3\nassert solution.distinctSubseqII('qzdirib') == 111\nassert solution.distinctSubseqII('wwhhert') == 71\nassert solution.distinctSubseqII('d') == 1\nassert solution.distinctSubseqII('zf') == 3\nassert solution.distinctSubseqII('cnekufcwb') == 507\nassert solution.distinctSubseqII('fobpjfppj') == 329\nassert solution.distinctSubseqII('sdxaulxtm') == 495\nassert solution.distinctSubseqII('ivspp') == 23\nassert solution.distinctSubseqII('i') == 1\nassert solution.distinctSubseqII('l') == 1\nassert solution.distinctSubseqII('vtyqrox') == 127\nassert solution.distinctSubseqII('sfbalqgh') == 255\nassert solution.distinctSubseqII('wmaydeuo') == 255\nassert solution.distinctSubseqII('qco') == 7\nassert solution.distinctSubseqII('mcyidnmfro') == 1015\nassert solution.distinctSubseqII('vccv') == 10\nassert solution.distinctSubseqII('teqtdlcbj') == 479\nassert solution.distinctSubseqII('lmwbmywp') == 231\nassert solution.distinctSubseqII('edjmfzga') == 255\nassert solution.distinctSubseqII('wo') == 3\nassert solution.distinctSubseqII('reumxha') == 127\nassert solution.distinctSubseqII('xfyqid') == 63\nassert solution.distinctSubseqII('dhgngyp') == 111\nassert solution.distinctSubseqII('rgpydovgdl') == 983\nassert solution.distinctSubseqII('ezvs') == 15\nassert solution.distinctSubseqII('fchfyylcyo') == 651\nassert solution.distinctSubseqII('hfudv') == 31\nassert solution.distinctSubseqII('ey') == 3\nassert solution.distinctSubseqII('lz') == 3\nassert solution.distinctSubseqII('rykesjzlc') == 511\nassert solution.distinctSubseqII('xvifpvojl') == 495\nassert solution.distinctSubseqII('uxlognh') == 127\nassert solution.distinctSubseqII('kb') == 3\nassert solution.distinctSubseqII('anneh') == 23\nassert solution.distinctSubseqII('gzyzgx') == 53\nassert solution.distinctSubseqII('nbsxrgybxb') == 871\nassert solution.distinctSubseqII('pxtorvaui') == 511\nassert solution.distinctSubseqII('tmv') == 7\nassert solution.distinctSubseqII('l') == 1\nassert solution.distinctSubseqII('ubbpnfsjf') == 359\nassert solution.distinctSubseqII('jycknj') == 62\nassert solution.distinctSubseqII('rbilp') == 31\nassert solution.distinctSubseqII('pi') == 3\nassert solution.distinctSubseqII('pjhgn') == 31\nassert solution.distinctSubseqII('rwjferqxxx') == 503\nassert solution.distinctSubseqII('zgylef') == 63\nassert solution.distinctSubseqII('a') == 1\nassert solution.distinctSubseqII('s') == 1\nassert solution.distinctSubseqII('va') == 3\nassert solution.distinctSubseqII('czxx') == 11\nassert solution.distinctSubseqII('abpejula') == 254\nassert solution.distinctSubseqII('px') == 3\nassert solution.distinctSubseqII('jwurq') == 31\nassert solution.distinctSubseqII('am') == 3\nassert solution.distinctSubseqII('zdvg') == 15\nassert solution.distinctSubseqII('tcpy') == 15\nassert solution.distinctSubseqII('sihiwx') == 55\nassert solution.distinctSubseqII('w') == 1\nassert solution.distinctSubseqII('wiglacymxl') == 1015\nassert solution.distinctSubseqII('bdxnfx') == 59\nassert solution.distinctSubseqII('q') == 1\nassert solution.distinctSubseqII('alkwdie') == 127\nassert solution.distinctSubseqII('jfve') == 15\nassert solution.distinctSubseqII('suumtwwwpo') == 383\nassert solution.distinctSubseqII('nfpf') == 13\nassert solution.distinctSubseqII('jextcwfiy') == 511\nassert solution.distinctSubseqII('gzdoj') == 31\nassert solution.distinctSubseqII('tz') == 3\nassert solution.distinctSubseqII('hz') == 3\nassert solution.distinctSubseqII('juzb') == 15\nassert solution.distinctSubseqII('bwukhbcc') == 188\nassert solution.distinctSubseqII('ttxwu') == 23\nassert solution.distinctSubseqII('jgiu') == 15\nassert solution.distinctSubseqII('j') == 1\nassert solution.distinctSubseqII('nixjlwo') == 127\nassert solution.distinctSubseqII('s') == 1\nassert solution.distinctSubseqII('pvbegsrsmb') == 891\nassert solution.distinctSubseqII('cckgys') == 47",
  "inefficient_solution": "class Solution:\n    def distinctSubseqII(self, s: str) -> int:\n        mod = 10**9 + 7\n        dp = {}\n        ans = 0\n        char_count = {}\n        for c in s:\n            char_count[c] = char_count.get(c, 0) + 1\n        for c in s:\n            i = ord(c) - ord('a')\n            add = ans - dp.get(i, 0) + 1\n            for j in range(26):\n                if j != i:\n                    add -= dp.get(j, 0)\n            ans = (ans + add) % mod\n            if i not in dp:\n                dp[i] = 0\n            dp[i] += add\n            dp[i] %= mod\n            for j in range(26):\n                if s[j] in char_count and s[j] != c:\n                    dp[j] = 0\n        return ans",
  "is_python": true
}