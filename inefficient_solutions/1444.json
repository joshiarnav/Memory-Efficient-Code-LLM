{
  "problem_idx": 1444,
  "task_name": "Number of Ways of Cutting a Pizza",
  "markdown_description": "\nGiven a rectangular pizza represented as a `rows x cols`\u00a0matrix containing the following characters: `'A'` (an apple) and `'.'` (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts.\u00a0\n\n\nFor each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.\n\n\n*Return the number of ways of cutting the pizza such that each piece contains **at least** one apple.*Since the answer can be a huge number, return this modulo 10^9 + 7.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1444.Number%20of%20Ways%20of%20Cutting%20a%20Pizza/images/ways_to_cut_apple_1.png)**\n\n\n\n```\n\n**Input:** pizza = [\"A..\",\"AAA\",\"...\"], k = 3\n**Output:** 3 \n**Explanation:** The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** pizza = [\"A..\",\"AA.\",\"...\"], k = 3\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** pizza = [\"A..\",\"A..\",\"...\"], k = 1\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= rows, cols <= 50`\n* `rows ==\u00a0pizza.length`\n* `cols ==\u00a0pizza[i].length`\n* `1 <= k <= 10`\n* `pizza` consists of characters `'A'`\u00a0and `'.'` only.\n\n\n",
  "canonical_solution": "class Solution:\n    def ways(self, pizza: List[str], k: int) -> int:\n        @cache\n        def dfs(i: int, j: int, k: int) -> int:\n            if k == 0:\n                return int(s[m][n] - s[i][n] - s[m][j] + s[i][j] > 0)\n            ans = 0\n            for x in range(i + 1, m):\n                if s[x][n] - s[i][n] - s[x][j] + s[i][j] > 0:\n                    ans += dfs(x, j, k - 1)\n            for y in range(j + 1, n):\n                if s[m][y] - s[i][y] - s[m][j] + s[i][j] > 0:\n                    ans += dfs(i, y, k - 1)\n            return ans % mod\n\n        mod = 10**9 + 7\n        m, n = len(pizza), len(pizza[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(pizza, 1):\n            for j, c in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + int(c == 'A')\n        return dfs(0, 0, k - 1)\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    # Generate rows, cols, and k, satisfying the constraints\n    rows = random.randint(1, 6)\n    cols = random.randint(1, 6)\n    k = random.randint(1, 4)\n    # Generate random pizza matrix\n    pizza = [[random.choice(['A', '.']) for _ in range(cols)] for _ in range(rows)]\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.ways(pizza, k)\n    return pizza, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        pizza, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.ways(pizza, k) == expected_result\n        print(f'assert solution.ways({pizza}, {k}) == {expected_result}')   # constructing the test case in the same format as the example\n        test_case_generator_results.append(f'assert solution.ways({pizza}, {k}) == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.ways([['A', 'A', 'A', '.'], ['.', '.', 'A', '.'], ['.', 'A', '.', 'A']], 1) == 1\nassert solution.ways([['A', 'A', 'A', 'A', '.', '.'], ['.', '.', 'A', '.', 'A', '.'], ['.', '.', '.', '.', 'A', 'A'], ['.', '.', '.', '.', 'A', 'A'], ['A', 'A', '.', '.', 'A', '.'], ['A', 'A', '.', '.', '.', '.']], 2) == 10\nassert solution.ways([['.', 'A', 'A', '.', 'A', 'A'], ['.', 'A', '.', '.', 'A', '.'], ['A', 'A', 'A', '.', 'A', '.'], ['.', 'A', '.', '.', 'A', '.']], 4) == 80\nassert solution.ways([['A', 'A'], ['.', 'A']], 4) == 0\nassert solution.ways([['.', '.', '.', '.'], ['.', 'A', '.', 'A'], ['A', '.', '.', '.']], 2) == 4\nassert solution.ways([['.', '.', 'A', '.', 'A', '.']], 2) == 2\nassert solution.ways([['A', 'A', 'A'], ['.', 'A', '.'], ['A', '.', 'A'], ['A', 'A', 'A']], 1) == 1\nassert solution.ways([['A', '.'], ['A', '.'], ['A', '.'], ['A', '.'], ['.', 'A'], ['A', '.']], 4) == 16\nassert solution.ways([['.', 'A', '.', '.', 'A'], ['.', 'A', 'A', 'A', 'A'], ['A', '.', 'A', 'A', '.'], ['A', 'A', 'A', '.', 'A'], ['.', 'A', 'A', '.', 'A']], 1) == 1\nassert solution.ways([['A', 'A', 'A']], 4) == 0\nassert solution.ways([['A'], ['A'], ['.']], 2) == 1\nassert solution.ways([['A', '.', '.', 'A', 'A']], 2) == 4\nassert solution.ways([['.', '.'], ['A', '.'], ['.', 'A'], ['.', 'A'], ['.', 'A']], 1) == 1\nassert solution.ways([['.', 'A', 'A', 'A', 'A', '.'], ['A', 'A', '.', 'A', '.', 'A'], ['A', '.', 'A', '.', '.', '.'], ['A', 'A', '.', 'A', '.', '.'], ['A', '.', '.', 'A', 'A', 'A'], ['.', '.', '.', 'A', '.', 'A']], 2) == 10\nassert solution.ways([['.', 'A', 'A'], ['A', 'A', '.'], ['.', 'A', '.'], ['A', '.', '.'], ['A', 'A', '.']], 4) == 20\nassert solution.ways([['.', '.', 'A', '.'], ['A', 'A', 'A', 'A'], ['A', '.', '.', 'A']], 3) == 15\nassert solution.ways([['A', 'A', '.', 'A', '.', '.'], ['.', 'A', 'A', 'A', 'A', 'A'], ['A', '.', '.', '.', '.', '.'], ['A', 'A', '.', 'A', '.', 'A'], ['A', 'A', 'A', '.', 'A', 'A']], 2) == 9\nassert solution.ways([['A', 'A']], 1) == 1\nassert solution.ways([['.', '.', 'A', '.', 'A'], ['.', 'A', 'A', '.', '.'], ['A', '.', 'A', 'A', 'A'], ['A', 'A', 'A', '.', '.']], 4) == 64\nassert solution.ways([['A', '.'], ['.', '.'], ['A', 'A'], ['A', 'A'], ['A', 'A']], 2) == 5\nassert solution.ways([['.', '.', '.', '.', '.'], ['A', '.', '.', 'A', '.'], ['A', '.', 'A', '.', 'A']], 4) == 12\nassert solution.ways([['.', 'A', 'A', 'A']], 2) == 2\nassert solution.ways([['.', '.', 'A', '.', '.'], ['A', '.', 'A', 'A', 'A']], 3) == 11\nassert solution.ways([['A', '.', 'A', 'A', '.'], ['.', 'A', 'A', '.', 'A'], ['.', 'A', 'A', '.', 'A'], ['A', '.', 'A', '.', '.'], ['A', 'A', 'A', 'A', '.'], ['A', '.', '.', '.', 'A']], 1) == 1\nassert solution.ways([['.', '.', '.', 'A', 'A'], ['A', 'A', 'A', '.', 'A'], ['A', 'A', 'A', '.', 'A'], ['.', '.', 'A', '.', 'A'], ['.', '.', 'A', '.', '.']], 1) == 1\nassert solution.ways([['A', 'A', 'A', '.', '.', '.'], ['.', 'A', 'A', '.', 'A', '.'], ['.', 'A', '.', 'A', '.', '.']], 1) == 1\nassert solution.ways([['A', 'A', 'A', 'A'], ['A', 'A', 'A', '.']], 4) == 4\nassert solution.ways([['.', 'A', '.', '.', 'A', 'A']], 3) == 3\nassert solution.ways([['A', 'A']], 4) == 0\nassert solution.ways([['.', 'A', '.', 'A', '.', '.'], ['A', 'A', 'A', 'A', '.', 'A'], ['A', 'A', 'A', 'A', 'A', '.']], 2) == 7\nassert solution.ways([['.'], ['.'], ['A']], 4) == 0\nassert solution.ways([['.', '.', 'A', '.', '.', 'A']], 1) == 1\nassert solution.ways([['.', '.', '.', 'A', '.', '.'], ['A', 'A', 'A', 'A', '.', '.'], ['A', 'A', '.', 'A', '.', 'A'], ['A', 'A', '.', 'A', 'A', 'A'], ['A', 'A', '.', 'A', 'A', '.'], ['.', 'A', '.', '.', '.', '.']], 3) == 55\nassert solution.ways([['A', 'A', 'A', '.'], ['.', 'A', 'A', '.'], ['A', '.', 'A', 'A'], ['A', 'A', '.', 'A']], 3) == 22\nassert solution.ways([['.', 'A', 'A'], ['A', 'A', '.'], ['A', '.', '.'], ['A', 'A', 'A'], ['A', '.', 'A'], ['A', '.', '.']], 4) == 48\nassert solution.ways([['A', 'A', 'A', '.', 'A'], ['A', '.', 'A', 'A', '.'], ['.', 'A', '.', 'A', '.'], ['A', 'A', 'A', '.', 'A'], ['.', '.', 'A', 'A', '.']], 1) == 1\nassert solution.ways([['.', 'A', '.'], ['.', '.', 'A'], ['.', '.', 'A']], 4) == 0\nassert solution.ways([['A', '.', '.', '.', '.', 'A'], ['.', 'A', '.', 'A', '.', 'A'], ['.', '.', 'A', '.', 'A', 'A'], ['A', '.', '.', 'A', 'A', 'A'], ['.', 'A', 'A', 'A', '.', 'A']], 2) == 9\nassert solution.ways([['A', '.', '.', 'A'], ['A', '.', 'A', '.'], ['.', 'A', '.', '.'], ['.', 'A', 'A', 'A'], ['A', '.', 'A', 'A'], ['A', '.', 'A', '.']], 2) == 8\nassert solution.ways([['.', 'A', 'A', '.', '.'], ['A', 'A', '.', '.', 'A'], ['A', 'A', 'A', '.', '.'], ['A', '.', '.', '.', '.']], 1) == 1\nassert solution.ways([['.', '.', 'A', 'A'], ['.', '.', '.', '.']], 3) == 0\nassert solution.ways([['.', 'A', 'A', '.'], ['A', '.', 'A', 'A']], 2) == 4\nassert solution.ways([['A', 'A', 'A', 'A', '.', '.'], ['A', 'A', 'A', 'A', '.', 'A'], ['.', '.', 'A', 'A', 'A', 'A'], ['.', '.', '.', 'A', 'A', '.'], ['A', '.', 'A', 'A', 'A', 'A']], 1) == 1\nassert solution.ways([['A', 'A', '.', 'A', 'A']], 2) == 4\nassert solution.ways([['A', 'A', 'A', 'A'], ['A', 'A', '.', 'A'], ['A', '.', '.', 'A']], 4) == 20\nassert solution.ways([['.'], ['.'], ['.']], 1) == 0\nassert solution.ways([['.', 'A'], ['A', 'A'], ['A', 'A'], ['A', '.']], 4) == 4\nassert solution.ways([['.', '.']], 3) == 0\nassert solution.ways([['.', 'A', 'A', '.', '.'], ['A', 'A', 'A', 'A', '.'], ['.', '.', '.', '.', '.']], 1) == 1\nassert solution.ways([['.', 'A', '.'], ['A', 'A', '.'], ['.', 'A', 'A']], 4) == 6\nassert solution.ways([['A', 'A', '.'], ['A', 'A', '.'], ['A', 'A', '.'], ['A', '.', 'A'], ['A', '.', 'A'], ['A', '.', 'A']], 2) == 7\nassert solution.ways([['.', 'A', 'A', 'A'], ['A', '.', 'A', 'A'], ['A', 'A', 'A', 'A'], ['A', '.', 'A', '.'], ['.', '.', 'A', '.']], 3) == 27\nassert solution.ways([['.', '.'], ['A', '.'], ['A', '.'], ['.', 'A'], ['A', 'A'], ['.', '.']], 2) == 4\nassert solution.ways([['A'], ['.'], ['.'], ['A'], ['.']], 4) == 0\nassert solution.ways([['A', '.'], ['A', 'A'], ['A', 'A'], ['.', 'A'], ['A', '.'], ['A', '.']], 3) == 15\nassert solution.ways([['.', '.', 'A', 'A'], ['A', 'A', '.', 'A'], ['.', '.', 'A', '.'], ['.', 'A', 'A', '.']], 4) == 29\nassert solution.ways([['.', 'A'], ['.', '.'], ['.', 'A'], ['A', 'A']], 3) == 8\nassert solution.ways([['.'], ['A'], ['A'], ['A']], 1) == 1\nassert solution.ways([['.', '.', '.', 'A', '.'], ['A', '.', '.', '.', '.']], 3) == 0\nassert solution.ways([['.', 'A', 'A'], ['.', 'A', 'A'], ['.', 'A', '.'], ['A', 'A', '.']], 3) == 12\nassert solution.ways([['A', 'A', 'A', 'A', 'A', 'A'], ['.', 'A', '.', 'A', '.', '.'], ['.', 'A', 'A', 'A', '.', '.'], ['A', '.', '.', 'A', 'A', 'A'], ['A', 'A', '.', '.', '.', '.'], ['A', 'A', 'A', 'A', 'A', 'A']], 1) == 1\nassert solution.ways([['A', 'A', 'A', 'A', 'A', '.'], ['A', 'A', 'A', '.', 'A', 'A'], ['.', 'A', 'A', 'A', '.', '.'], ['A', '.', 'A', '.', 'A', '.'], ['A', 'A', '.', '.', '.', '.'], ['.', 'A', 'A', '.', 'A', '.']], 2) == 10\nassert solution.ways([['.', '.', 'A', '.', '.'], ['.', 'A', 'A', '.', '.'], ['A', '.', 'A', 'A', 'A'], ['A', 'A', 'A', '.', 'A']], 1) == 1\nassert solution.ways([['.', 'A', '.', '.', '.'], ['A', '.', '.', 'A', '.'], ['A', '.', 'A', 'A', '.'], ['.', '.', 'A', 'A', '.'], ['.', 'A', 'A', '.', '.'], ['.', '.', '.', 'A', '.']], 1) == 1\nassert solution.ways([['A', '.', 'A', 'A', 'A']], 1) == 1\nassert solution.ways([['A']], 1) == 1\nassert solution.ways([['.', 'A', 'A'], ['.', 'A', '.'], ['A', 'A', 'A'], ['A', 'A', 'A'], ['.', 'A', '.']], 1) == 1\nassert solution.ways([['.', 'A', '.', '.', 'A']], 2) == 3\nassert solution.ways([['.', '.', '.', '.', 'A', '.'], ['.', 'A', '.', 'A', 'A', 'A'], ['.', 'A', 'A', 'A', '.', '.']], 4) == 28\nassert solution.ways([['A', '.', 'A', '.'], ['A', '.', '.', 'A'], ['A', 'A', '.', '.'], ['.', 'A', '.', '.'], ['.', '.', 'A', 'A']], 3) == 29\nassert solution.ways([['A', 'A', '.', 'A'], ['.', '.', 'A', '.'], ['A', 'A', 'A', 'A'], ['.', '.', 'A', '.'], ['.', 'A', 'A', 'A'], ['.', 'A', 'A', 'A']], 1) == 1\nassert solution.ways([['A'], ['.'], ['A'], ['A']], 4) == 0\nassert solution.ways([['.', '.', '.', 'A', '.']], 4) == 0\nassert solution.ways([['.', '.', 'A', 'A', 'A']], 3) == 1\nassert solution.ways([['A']], 4) == 0\nassert solution.ways([['A', '.', 'A'], ['A', '.', 'A'], ['A', 'A', 'A'], ['.', 'A', 'A']], 3) == 15\nassert solution.ways([['A', 'A', 'A', 'A'], ['A', 'A', 'A', '.'], ['.', '.', '.', '.'], ['.', 'A', '.', 'A'], ['.', 'A', 'A', '.']], 4) == 53\nassert solution.ways([['.'], ['A']], 2) == 0\nassert solution.ways([['.', 'A', '.', 'A', 'A'], ['A', 'A', 'A', 'A', '.']], 3) == 12\nassert solution.ways([['A', '.', 'A', 'A', 'A', '.'], ['A', '.', 'A', 'A', '.', '.']], 1) == 1\nassert solution.ways([['.', 'A']], 1) == 1\nassert solution.ways([['.', 'A', '.', 'A', 'A'], ['.', 'A', 'A', '.', '.'], ['A', '.', 'A', 'A', 'A']], 3) == 23\nassert solution.ways([['.'], ['A']], 1) == 1\nassert solution.ways([['.']], 3) == 0\nassert solution.ways([['A', 'A', '.'], ['.', 'A', 'A']], 4) == 1\nassert solution.ways([['A', '.']], 1) == 1\nassert solution.ways([['A', '.', '.'], ['.', 'A', '.']], 2) == 2\nassert solution.ways([['A', 'A', '.', 'A'], ['A', '.', 'A', 'A'], ['A', '.', '.', 'A'], ['.', 'A', '.', 'A']], 2) == 6\nassert solution.ways([['A', '.'], ['A', '.'], ['A', 'A'], ['A', 'A'], ['A', 'A']], 2) == 5\nassert solution.ways([['A', '.', 'A', '.']], 4) == 0\nassert solution.ways([['A', 'A', '.'], ['.', '.', 'A'], ['A', 'A', '.'], ['A', '.', 'A'], ['.', '.', 'A']], 2) == 6\nassert solution.ways([['.', '.', '.'], ['A', 'A', 'A']], 4) == 0\nassert solution.ways([['A', 'A', 'A', 'A', 'A', '.'], ['A', 'A', '.', 'A', 'A', '.']], 1) == 1\nassert solution.ways([['A']], 1) == 1\nassert solution.ways([['A', 'A'], ['.', 'A'], ['.', '.'], ['.', 'A'], ['A', 'A']], 2) == 5\nassert solution.ways([['.', '.', '.', 'A', '.', '.'], ['.', 'A', 'A', 'A', 'A', '.']], 4) == 8\nassert solution.ways([['.', '.', 'A', '.'], ['A', '.', 'A', '.']], 1) == 1\nassert solution.ways([['.', 'A', 'A', 'A', '.', 'A'], ['.', 'A', 'A', 'A', '.', '.'], ['.', 'A', 'A', 'A', 'A', 'A'], ['.', '.', 'A', '.', 'A', 'A'], ['A', '.', '.', 'A', 'A', '.'], ['A', 'A', 'A', 'A', '.', 'A']], 2) == 10\nassert solution.ways([['.', 'A', '.', 'A'], ['A', 'A', '.', '.'], ['A', '.', '.', 'A'], ['.', '.', 'A', '.'], ['A', '.', 'A', 'A'], ['.', 'A', '.', '.']], 2) == 8\nassert solution.ways([['.', '.', '.', 'A', '.'], ['.', '.', 'A', 'A', '.'], ['.', 'A', 'A', 'A', '.'], ['A', 'A', '.', '.', 'A'], ['A', 'A', '.', 'A', '.']], 1) == 1",
  "inefficient_solution": "class Solution:\n    def ways(self, pizza: List[str], k: int) -> int:\n        @cache\n        def dfs(i: int, j: int, k: int) -> int:\n            if k == 0:\n                return 1 if any(pizza[x][y] == 'A' for x in range(i, len(pizza)) for y in range(j, len(pizza[0]))) else 0\n            ans = 0\n            for x in range(i + 1, len(pizza)):\n                for y in range(len(pizza[0])):\n                    if pizza[x][y] == 'A':\n                        ans += dfs(x, y, k - 1)\n            for y in range(j + 1, len(pizza[0])):\n                for x in range(len(pizza)):\n                    if pizza[x][y] == 'A':\n                        ans += dfs(x, y, k - 1)\n            return ans % 1000000007\n\n        mod = 10**9 + 7\n        return dfs(0, 0, k - 1)",
  "is_python": true
}