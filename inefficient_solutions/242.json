{
  "problem_idx": 242,
  "task_name": "Valid Anagram",
  "markdown_description": "\nGiven two strings `s` and `t`, return `true` *if* `t` *is an anagram of* `s`*, and* `false` *otherwise*.\n\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"anagram\", t = \"nagaram\"\n**Output:** true\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"rat\", t = \"car\"\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length, t.length <= 5 * 104`\n* `s` and `t` consist of lowercase English letters.\n\n\n\u00a0\n\n\n**Follow up:** What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\n\n\n",
  "canonical_solution": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n        cnt = Counter(s)\n        for c in t:\n            cnt[c] -= 1\n            if cnt[c] < 0:\n                return False\n        return True\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n        cnt = Counter(s)\n        for c in t:\n            cnt[c] -= 1\n            if cnt[c] < 0:\n                return False\n        return True\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings s and t\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    t = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isAnagram(s, t)\n\n    return s, t, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, t, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isAnagram(s, t) == expected_result\n        print(f\"assert solution.isAnagram('{s}', '{t}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isAnagram('{s}', '{t}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isAnagram('erws', 'cb') == False\nassert solution.isAnagram('ehuv', 'nwgao') == False\nassert solution.isAnagram('b', 'gscdl') == False\nassert solution.isAnagram('kvadlikebh', 'mk') == False\nassert solution.isAnagram('ykxvrniy', 'madkfnfo') == False\nassert solution.isAnagram('wivrji', 'ezd') == False\nassert solution.isAnagram('tkloy', 'mep') == False\nassert solution.isAnagram('uzhanha', 'dpxx') == False\nassert solution.isAnagram('mlsmd', 'dyakcp') == False\nassert solution.isAnagram('llyrilkic', 'ob') == False\nassert solution.isAnagram('vrmjjc', 'jgfm') == False\nassert solution.isAnagram('utf', 'lzkxlzg') == False\nassert solution.isAnagram('xe', 'qamvrohay') == False\nassert solution.isAnagram('ftpg', 'ccwzlfvxyr') == False\nassert solution.isAnagram('vxpetqllil', 'zfndf') == False\nassert solution.isAnagram('rtwt', 'ctdpsdo') == False\nassert solution.isAnagram('qveurgyt', 'joknoajow') == False\nassert solution.isAnagram('fxfzuit', 'qijejb') == False\nassert solution.isAnagram('yp', 'e') == False\nassert solution.isAnagram('vihbkijjd', 'cxzg') == False\nassert solution.isAnagram('jr', 'dps') == False\nassert solution.isAnagram('veyvjcgx', 'rdfix') == False\nassert solution.isAnagram('unge', 'swjhkvck') == False\nassert solution.isAnagram('otegnu', 'qlc') == False\nassert solution.isAnagram('ocsmawizbg', 'vmmmlx') == False\nassert solution.isAnagram('vu', 'jpoctt') == False\nassert solution.isAnagram('kntq', 'abgbx') == False\nassert solution.isAnagram('layzrzb', 'cpgydd') == False\nassert solution.isAnagram('pik', 'xtzrsfhfsr') == False\nassert solution.isAnagram('zgmohi', 'lqhgklec') == False\nassert solution.isAnagram('inblnlle', 'svo') == False\nassert solution.isAnagram('kq', 'xuyk') == False\nassert solution.isAnagram('jmcxrxlh', 'fnie') == False\nassert solution.isAnagram('abbfg', 'hjzjegyn') == False\nassert solution.isAnagram('gkweqz', 'trhgf') == False\nassert solution.isAnagram('awyevuwgw', 'lfptpafcgn') == False\nassert solution.isAnagram('borzqlmlzr', 'm') == False\nassert solution.isAnagram('uemgjsveek', 'os') == False\nassert solution.isAnagram('kolwm', 'td') == False\nassert solution.isAnagram('srepx', 'zjmasbajmt') == False\nassert solution.isAnagram('ks', 'ruwhdmnvta') == False\nassert solution.isAnagram('ggyggmpdr', 'xyrl') == False\nassert solution.isAnagram('rn', 'uimpbopnis') == False\nassert solution.isAnagram('ebhglapo', 'ysducv') == False\nassert solution.isAnagram('ocl', 'alq') == False\nassert solution.isAnagram('dlagbhw', 'xgjtkde') == False\nassert solution.isAnagram('lknir', 'ssucegju') == False\nassert solution.isAnagram('vcw', 'pymxk') == False\nassert solution.isAnagram('lev', 'z') == False\nassert solution.isAnagram('aae', 'aix') == False\nassert solution.isAnagram('yzu', 'gze') == False\nassert solution.isAnagram('egtp', 'ynveosy') == False\nassert solution.isAnagram('qetkznriw', 'ukvfkv') == False\nassert solution.isAnagram('wxbjcudhvo', 'uljzsmnxtd') == False\nassert solution.isAnagram('fbvyc', 'zcqgh') == False\nassert solution.isAnagram('nsgbyvrj', 'lhje') == False\nassert solution.isAnagram('yswpqecay', 'blfhhn') == False\nassert solution.isAnagram('wxjd', 'gjpcjqsh') == False\nassert solution.isAnagram('xbmfjfuzg', 'axjxbasp') == False\nassert solution.isAnagram('ch', 'hill') == False\nassert solution.isAnagram('hbmicgfoyx', 'lryd') == False\nassert solution.isAnagram('y', 'ohwkfok') == False\nassert solution.isAnagram('p', 'apedmzhuh') == False\nassert solution.isAnagram('khadtplqj', 'esquexutq') == False\nassert solution.isAnagram('apss', 'uwq') == False\nassert solution.isAnagram('zbfcboh', 'e') == False\nassert solution.isAnagram('klhutsiu', 'rpta') == False\nassert solution.isAnagram('w', 'u') == False\nassert solution.isAnagram('smbo', 'nyiialsgu') == False\nassert solution.isAnagram('xhfntaxu', 'uqbxq') == False\nassert solution.isAnagram('bcvyw', 'ocx') == False\nassert solution.isAnagram('rwia', 'mquarmml') == False\nassert solution.isAnagram('uhnslatejp', 'ojjq') == False\nassert solution.isAnagram('nqn', 'qwjzftv') == False\nassert solution.isAnagram('uordsen', 'icixnxysw') == False\nassert solution.isAnagram('aldfnos', 'ye') == False\nassert solution.isAnagram('usfwpfbqr', 'fcns') == False\nassert solution.isAnagram('eoieht', 'ht') == False\nassert solution.isAnagram('n', 'cd') == False\nassert solution.isAnagram('qeguwwik', 'fw') == False\nassert solution.isAnagram('to', 'j') == False\nassert solution.isAnagram('mpgrcmite', 'c') == False\nassert solution.isAnagram('dnkvacs', 'ew') == False\nassert solution.isAnagram('iglewv', 'gj') == False\nassert solution.isAnagram('qzyxdsnvu', 'ixmpwym') == False\nassert solution.isAnagram('eqyykisem', 'ezcalr') == False\nassert solution.isAnagram('vgztrrhqfq', 'pfydgxlpy') == False\nassert solution.isAnagram('cysssuwqk', 'bz') == False\nassert solution.isAnagram('idmvhlb', 'xernrmozg') == False\nassert solution.isAnagram('bwx', 'nsb') == False\nassert solution.isAnagram('tdjnyytqrm', 'nljrxdxxhq') == False\nassert solution.isAnagram('xlafrfwdx', 'vuzxon') == False\nassert solution.isAnagram('xwhpppdk', 'whqs') == False\nassert solution.isAnagram('ieyljugl', 'qcm') == False\nassert solution.isAnagram('prn', 'fmtwhb') == False\nassert solution.isAnagram('cqqm', 'gdvskedeu') == False\nassert solution.isAnagram('hvlonb', 'nfzb') == False\nassert solution.isAnagram('po', 'lr') == False\nassert solution.isAnagram('hyh', 'didizojek') == False\nassert solution.isAnagram('y', 'udw') == False",
  "inefficient_solution": "class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n\n        s_counter = {}\n        for i, c in enumerate(s):\n            s_counter[i] = c\n        t_counter = {}\n        for i, c in enumerate(t):\n            t_counter[i] = c\n\n        s_list = list(s_counter.values())\n        t_list = list(t_counter.values())\n\n        for i in range(len(s_list)):\n            for j in range(i + 1, len(s_list)):\n                s_list[i], s_list[j] = s_list[j], s_list[i]\n                if sorted(s_list) == sorted(t_list):\n                    s_list[i], s_list[j] = s_list[j], s_list[i]\n                    break\n            else:\n                continue\n            break\n        else:\n            return sorted(s_list) == sorted(t_list)\n\n        return False",
  "is_python": true
}