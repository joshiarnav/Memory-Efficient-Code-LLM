{
  "problem_idx": 670,
  "task_name": "Maximum Swap",
  "markdown_description": "\nYou are given an integer `num`. You can swap two digits at most once to get the maximum valued number.\n\n\nReturn *the maximum valued number you can get*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 2736\n**Output:** 7236\n**Explanation:** Swap the number 2 and the number 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 9973\n**Output:** 9973\n**Explanation:** No swap.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= num <= 108`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        s = list(str(num))\n        n = len(s)\n        d = list(range(n))\n        for i in range(n - 2, -1, -1):\n            if s[i] <= s[d[i + 1]]:\n                d[i] = d[i + 1]\n        for i, j in enumerate(d):\n            if s[i] < s[j]:\n                s[i], s[j] = s[j], s[i]\n                break\n        return int(''.join(s))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumSwap(self, num: int) -> int:\n        s = list(str(num))\n        n = len(s)\n        d = list(range(n))\n        for i in range(n - 2, -1, -1):\n            if s[i] <= s[d[i + 1]]:\n                d[i] = d[i + 1]\n        for i, j in enumerate(d):\n            if s[i] < s[j]:\n                s[i], s[j] = s[j], s[i]\n                break\n        return int(''.join(s))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random number\n    num = random.randint(0, 10**8)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumSwap(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumSwap(num) == expected_result\n        print(f\"assert solution.maximumSwap({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumSwap({num}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumSwap(53509105) == 93505105\nassert solution.maximumSwap(93249832) == 99243832\nassert solution.maximumSwap(96274633) == 97264633\nassert solution.maximumSwap(58713165) == 85713165\nassert solution.maximumSwap(64656971) == 94656671\nassert solution.maximumSwap(93936146) == 99336146\nassert solution.maximumSwap(43289171) == 93284171\nassert solution.maximumSwap(70985713) == 90785713\nassert solution.maximumSwap(57558362) == 87555362\nassert solution.maximumSwap(75805333) == 85705333\nassert solution.maximumSwap(37885218) == 87885213\nassert solution.maximumSwap(81553779) == 91553778\nassert solution.maximumSwap(94046085) == 98046045\nassert solution.maximumSwap(67906385) == 97606385\nassert solution.maximumSwap(35681283) == 85681233\nassert solution.maximumSwap(33419018) == 93413018\nassert solution.maximumSwap(25004315) == 55004312\nassert solution.maximumSwap(36032619) == 96032613\nassert solution.maximumSwap(21453166) == 61453162\nassert solution.maximumSwap(60704373) == 70704363\nassert solution.maximumSwap(93424888) == 98424883\nassert solution.maximumSwap(81903660) == 91803660\nassert solution.maximumSwap(4156998) == 9156948\nassert solution.maximumSwap(96506384) == 98506364\nassert solution.maximumSwap(96216791) == 99216761\nassert solution.maximumSwap(44039854) == 94034854\nassert solution.maximumSwap(96850479) == 99850476\nassert solution.maximumSwap(67784154) == 87764154\nassert solution.maximumSwap(29453541) == 92453541\nassert solution.maximumSwap(33827625) == 83327625\nassert solution.maximumSwap(55201467) == 75201465\nassert solution.maximumSwap(41559520) == 91554520\nassert solution.maximumSwap(78600945) == 98600745\nassert solution.maximumSwap(92758631) == 98752631\nassert solution.maximumSwap(32807703) == 82307703\nassert solution.maximumSwap(87058504) == 88057504\nassert solution.maximumSwap(65911223) == 95611223\nassert solution.maximumSwap(41905824) == 91405824\nassert solution.maximumSwap(5626880) == 8626850\nassert solution.maximumSwap(81737055) == 87731055\nassert solution.maximumSwap(53483558) == 83483555\nassert solution.maximumSwap(96069444) == 99066444\nassert solution.maximumSwap(91336821) == 98336121\nassert solution.maximumSwap(95788226) == 98785226\nassert solution.maximumSwap(86593814) == 96583814\nassert solution.maximumSwap(6122740) == 7122640\nassert solution.maximumSwap(33167216) == 73163216\nassert solution.maximumSwap(22825012) == 82225012\nassert solution.maximumSwap(38292807) == 98232807\nassert solution.maximumSwap(84834618) == 88834614\nassert solution.maximumSwap(25696739) == 95696732\nassert solution.maximumSwap(1432680) == 8432610\nassert solution.maximumSwap(49635590) == 99635540\nassert solution.maximumSwap(65057211) == 75056211\nassert solution.maximumSwap(76018021) == 86017021\nassert solution.maximumSwap(99702721) == 99772021\nassert solution.maximumSwap(33065407) == 73065403\nassert solution.maximumSwap(29849758) == 99842758\nassert solution.maximumSwap(78767452) == 87767452\nassert solution.maximumSwap(69021186) == 96021186\nassert solution.maximumSwap(31748401) == 81743401\nassert solution.maximumSwap(30440092) == 90440032\nassert solution.maximumSwap(31976640) == 91376640\nassert solution.maximumSwap(50470645) == 70450645\nassert solution.maximumSwap(17251916) == 97251116\nassert solution.maximumSwap(28714522) == 82714522\nassert solution.maximumSwap(6082371) == 8062371\nassert solution.maximumSwap(44351589) == 94351584\nassert solution.maximumSwap(21354263) == 61354223\nassert solution.maximumSwap(95012984) == 99012584\nassert solution.maximumSwap(44434453) == 54434443\nassert solution.maximumSwap(62159244) == 92156244\nassert solution.maximumSwap(42427755) == 72427455\nassert solution.maximumSwap(21060034) == 61020034\nassert solution.maximumSwap(74664449) == 94664447\nassert solution.maximumSwap(36070153) == 76030153\nassert solution.maximumSwap(93641862) == 98641362\nassert solution.maximumSwap(74857096) == 94857076\nassert solution.maximumSwap(26005399) == 96005392\nassert solution.maximumSwap(45376504) == 75346504\nassert solution.maximumSwap(31927080) == 91327080\nassert solution.maximumSwap(19186274) == 91186274\nassert solution.maximumSwap(48934750) == 98434750\nassert solution.maximumSwap(73528547) == 83527547\nassert solution.maximumSwap(25072474) == 75072424\nassert solution.maximumSwap(51117106) == 71115106\nassert solution.maximumSwap(54187177) == 84157177\nassert solution.maximumSwap(62377922) == 92377622\nassert solution.maximumSwap(60370914) == 90370614\nassert solution.maximumSwap(54838077) == 84835077\nassert solution.maximumSwap(3525989) == 9525983\nassert solution.maximumSwap(5869033) == 9865033\nassert solution.maximumSwap(3738095) == 9738035\nassert solution.maximumSwap(16769012) == 96761012\nassert solution.maximumSwap(75013967) == 95013767\nassert solution.maximumSwap(54253765) == 74253565\nassert solution.maximumSwap(36393140) == 96333140\nassert solution.maximumSwap(84028483) == 88028443\nassert solution.maximumSwap(42544012) == 52444012\nassert solution.maximumSwap(65445003) == 65544003",
  "inefficient_solution": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        s = [str(i) for i in str(num)]\n        n = len(s)\n        d = [i for i in range(n)]\n        swapped = False\n        for i in range(n - 2, -1, -1):\n            if s[i] <= s[d[i + 1]]:\n                d[i] = d[i + 1]\n                swapped = True\n                break\n        for i in range(n):\n            for j in range(n):\n                if s[i] < s[j]:\n                    s[i], s[j] = s[j], s[i]\n                    swapped = True\n                    break\n            if swapped:\n                break\n        return int(''.join(s))",
  "is_python": true
}