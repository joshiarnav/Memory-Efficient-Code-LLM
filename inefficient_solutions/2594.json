{
  "problem_idx": 2594,
  "task_name": "Minimum Time to Repair Cars",
  "markdown_description": "\nYou are given an integer array `ranks` representing the **ranks** of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank `r` can repair n cars in `r * n2` minutes.\n\n\nYou are also given an integer `cars` representing the total number of cars waiting in the garage to be repaired.\n\n\nReturn *the **minimum** time taken to repair all the cars.*\n\n\n**Note:** All the mechanics can repair the cars simultaneously.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ranks = [4,2,3,1], cars = 10\n**Output:** 16\n**Explanation:** \n- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.\n- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.\n- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.\n- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ranks = [5,1,8], cars = 6\n**Output:** 16\n**Explanation:** \n- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.\n- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.\n- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.\nIt can be proved that the cars cannot be repaired in less than 16 minutes.\u200b\u200b\u200b\u200b\u200b\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= ranks.length <= 105`\n* `1 <= ranks[i] <= 100`\n* `1 <= cars <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def repairCars(self, ranks: List[int], cars: int) -> int:\n        def check(t: int) -> bool:\n            return sum(int(sqrt(t // r)) for r in ranks) >= cars\n\n        return bisect_left(range(ranks[0] * cars * cars), True, key=check)\n",
  "test_case_generator": "\nimport random\nfrom math import sqrt\nfrom bisect import bisect_left\n\nclass Solution:\n    def repairCars(self, ranks, cars):\n        def check(t):\n            return sum(int(sqrt(t // r)) for r in ranks) >= cars\n\n        return bisect_left(range(ranks[0] * cars * cars), True, key=check)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random ranks list\n    ranks = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random number of cars\n    cars = random.randint(1, 10**6)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.repairCars(ranks, cars)\n\n    return ranks, cars, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        ranks, cars, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.repairCars(ranks, cars) == expected_result\n        print(f\"assert solution.repairCars({ranks}, {cars}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.repairCars({ranks}, {cars}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.repairCars([55, 23, 60, 62, 99, 91, 19, 29, 8], 847567) == 290165385840\nassert solution.repairCars([32, 38, 26, 60, 42, 30, 1, 46, 25], 719314) == 93809888656\nassert solution.repairCars([72, 6, 30], 751261) == 1123801623480\nassert solution.repairCars([24, 75, 15, 14, 46], 576124) == 336957874400\nassert solution.repairCars([89, 93, 25, 26, 65, 16], 449809) == 210740423400\nassert solution.repairCars([68, 1, 26, 44, 46, 86, 34, 31, 6], 457539) == 33961831350\nassert solution.repairCars([90, 79, 16, 99, 39, 13, 73, 74], 523147) == 178229197584\nassert solution.repairCars([42, 2, 57, 70, 25, 39, 60, 59, 73, 56], 466302) == 55270043136\nassert solution.repairCars([61, 16, 72, 83, 50, 17, 100, 18, 66, 71], 584522) == 139131984016\nassert solution.repairCars([92, 27, 65, 19, 53, 23, 20, 13, 26, 12], 819798) == 171122243328\nassert solution.repairCars([68, 2], 10022) == 146376050\nassert solution.repairCars([88, 72, 75, 17, 81, 67], 62234) == 5820820632\nassert solution.repairCars([91, 47], 638060) == 6477953130423\nassert solution.repairCars([15, 98, 57], 247154) == 252693670418\nassert solution.repairCars([16, 64], 663649) == 3131951351824\nassert solution.repairCars([24, 75, 80, 11, 8, 51, 90, 70, 97], 15172) == 95495680\nassert solution.repairCars([75, 86], 376287) == 2839561818566\nassert solution.repairCars([84, 53, 51, 92], 853217) == 3022677259200\nassert solution.repairCars([70, 53, 98, 85, 57, 52, 89, 6, 10, 47], 699580) == 166626327348\nassert solution.repairCars([39, 13, 75, 86, 73], 863165) == 1231486588956\nassert solution.repairCars([84, 48, 64], 731177) == 3732819418944\nassert solution.repairCars([89, 36], 250529) == 844217620004\nassert solution.repairCars([77, 22, 59, 65, 60], 150158) == 44668273500\nassert solution.repairCars([55, 51, 79, 52, 43, 99, 48], 390048) == 178431757020\nassert solution.repairCars([88, 8, 50, 43, 41, 76, 12, 69], 779599) == 295555968396\nassert solution.repairCars([8, 81, 98, 47, 71], 247909) == 89166955808\nassert solution.repairCars([66, 94, 9, 63], 126480) == 34038036036\nassert solution.repairCars([7, 1, 71, 74, 89, 85, 17, 47, 24, 67], 911476) == 128566139544\nassert solution.repairCars([63, 94, 11, 23, 31], 696774) == 575149412684\nassert solution.repairCars([22, 91, 84, 27, 28, 26, 93, 2, 65, 86], 414961) == 41080671522\nassert solution.repairCars([30, 93, 81, 38, 34, 100, 75], 780854) == 680513626875\nassert solution.repairCars([15, 17, 44, 32, 3, 38, 56], 967249) == 323169929415\nassert solution.repairCars([20, 27, 1, 88, 89, 33], 281257) == 24341928361\nassert solution.repairCars([19, 32, 99, 83, 6, 74, 48, 100], 423853) == 93616755084\nassert solution.repairCars([93, 18, 47, 40, 78], 323739) == 183087961000\nassert solution.repairCars([59, 23, 72, 9, 83, 36, 44, 49, 71], 749815) == 257161566321\nassert solution.repairCars([22, 47, 79, 49, 39, 62], 991558) == 1209617230276\nassert solution.repairCars([43, 97, 2, 10, 5, 8, 89, 92, 52, 32], 373921) == 20622367872\nassert solution.repairCars([53, 21, 15, 29, 39, 60, 74], 952559) == 624956348016\nassert solution.repairCars([6, 27, 70, 55, 57, 69, 54, 19], 419892) == 81215652513\nassert solution.repairCars([67, 31, 71, 23, 79, 51], 185894) == 44473065900\nassert solution.repairCars([84, 12, 4, 19, 49, 47, 82, 17], 353415) == 39919021988\nassert solution.repairCars([64, 79], 912973) == 14776008749839\nassert solution.repairCars([43, 76, 33, 30, 84, 96, 23, 65, 24, 57], 652159) == 187986744216\nassert solution.repairCars([87, 62, 6, 70, 37, 60, 51], 183281) == 23503939792\nassert solution.repairCars([98, 58, 15, 90], 731811) == 1508029309935\nassert solution.repairCars([95, 51, 89, 97, 92, 28, 61, 82, 49, 36], 642005) == 247153635612\nassert solution.repairCars([45, 86, 28, 23, 90, 82], 578960) == 442610839552\nassert solution.repairCars([4, 66, 71, 7, 18, 31], 587822) == 146640367458\nassert solution.repairCars([1, 23], 149073) == 15215962609\nassert solution.repairCars([19, 68, 51], 908682) == 3429034541451\nassert solution.repairCars([8, 28, 31, 83, 43, 21, 41, 69, 91, 56], 781068) == 206784846799\nassert solution.repairCars([11, 32, 8, 100], 628594) == 455050368032\nassert solution.repairCars([83, 86, 42, 82, 97, 16, 64, 55], 152861) == 19535093824\nassert solution.repairCars([52, 27, 62, 15, 69, 43, 12, 19], 67158) == 1985362132\nassert solution.repairCars([67, 17, 6], 809460) == 1096694277377\nassert solution.repairCars([98, 73, 7, 32, 39, 13], 366886) == 91896704796\nassert solution.repairCars([36, 78, 95, 17, 55, 70, 38], 545089) == 273859215062\nassert solution.repairCars([73, 47], 864940) == 10823572988928\nassert solution.repairCars([58, 17], 494690) == 1751020397348\nassert solution.repairCars([51, 1, 12], 904993) == 401243142651\nassert solution.repairCars([23, 61, 64, 80, 35, 66], 124573) == 20718211500\nassert solution.repairCars([58, 3, 57], 252792) == 90328612323\nassert solution.repairCars([3, 22, 51, 58, 15, 23, 47, 39, 80, 77], 221766) == 11585630208\nassert solution.repairCars([48, 27, 51, 54, 23, 46], 636615) == 431757845100\nassert solution.repairCars([78, 87, 6, 14, 45, 67, 54, 26], 748865) == 249449265000\nassert solution.repairCars([9, 20, 94], 952965) == 2084292789264\nassert solution.repairCars([86, 95, 16, 9, 66], 554590) == 365884653456\nassert solution.repairCars([48, 42, 50, 80, 18, 55], 873065) == 895880586320\nassert solution.repairCars([62, 81, 64, 100, 44, 56, 3], 241391) == 33198595248\nassert solution.repairCars([98, 83, 26, 32, 48, 73, 68, 35, 87], 805694) == 420444500000\nassert solution.repairCars([79, 1, 28, 49], 821838) == 323765552016\nassert solution.repairCars([69, 78, 5], 508636) == 558139707918\nassert solution.repairCars([82, 25, 63], 346842) == 631621008450\nassert solution.repairCars([18, 71], 482063) == 1850418176924\nassert solution.repairCars([3, 36, 22], 205153) == 45934715992\nassert solution.repairCars([39, 93, 13, 86, 60, 81, 54, 33, 17], 804193) == 311060940137\nassert solution.repairCars([46, 89, 97, 64, 26, 13, 39, 1, 9, 93], 473771) == 34503434001\nassert solution.repairCars([60, 57, 11, 47, 58, 46, 42], 102170) == 8004899232\nassert solution.repairCars([39, 41, 45], 327716) == 495901579844\nassert solution.repairCars([57, 87, 56], 14579) == 1525325816\nassert solution.repairCars([5, 6, 1, 14, 37, 11, 21, 85], 925795) == 100846581011\nassert solution.repairCars([82, 52, 33, 53, 3, 15], 837694) == 360034359412\nassert solution.repairCars([75, 5, 45, 50, 29], 888247) == 731047891536\nassert solution.repairCars([46, 49], 163323) == 316523260816\nassert solution.repairCars([45, 34], 370034) == 1332410955714\nassert solution.repairCars([20, 75], 996378) == 8634794811075\nassert solution.repairCars([71, 64], 223687) == 842653514844\nassert solution.repairCars([85, 20, 72, 93, 2, 11, 59, 35], 549415) == 87116388872\nassert solution.repairCars([76, 60], 580099) == 5661241394460\nassert solution.repairCars([80, 100, 35, 19, 76, 63, 97, 22], 88946) == 5822740684\nassert solution.repairCars([2, 41, 89, 77, 22, 69], 962797) == 461783564288\nassert solution.repairCars([57, 89, 51, 55, 38, 42, 14, 95, 13, 77], 457678) == 82752258655\nassert solution.repairCars([63, 61, 27, 96, 66, 5, 4], 761143) == 221068337292\nassert solution.repairCars([94, 97, 78, 1, 31, 49, 7, 79, 72], 710034) == 99701851536\nassert solution.repairCars([91, 10], 604003) == 2057777665216\nassert solution.repairCars([46, 33, 61, 22], 859543) == 1682009785876\nassert solution.repairCars([19, 20, 32, 22], 949122) == 1267622435200\nassert solution.repairCars([29, 71], 327395) == 1156997545349\nassert solution.repairCars([77, 58, 16, 31, 11, 8, 91], 616726) == 184768773408",
  "inefficient_solution": "class Solution:\n    def repairCars(self, ranks: List[int], cars: int) -> int:\n        def check(t):\n            n_cars = 0\n            for r in ranks:\n                n = int((t // r) ** 0.5)\n                n_cars += min(n, cars)\n                cars -= n\n            return n_cars >= cars\n\n        t = 1\n        while True:\n            if check(t):\n                return t\n            t *= 2",
  "is_python": true
}