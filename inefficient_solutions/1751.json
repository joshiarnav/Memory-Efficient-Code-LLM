{
  "problem_idx": 1751,
  "task_name": "Maximum Number of Events That Can Be Attended II",
  "markdown_description": "\nYou are given an array of `events` where `events[i] = [startDayi, endDayi, valuei]`. The `ith` event starts at `startDayi`and ends at `endDayi`, and if you attend this event, you will receive a value of `valuei`. You are also given an integer `k` which represents the maximum number of events you can attend.\n\n\nYou can only attend one event at a time. If you choose to attend an event, you must attend the **entire** event. Note that the end day is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends on the same day.\n\n\nReturn *the **maximum sum** of values that you can receive by attending events.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1751.Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/images/screenshot-2021-01-11-at-60048-pm.png)\n\n\n\n```\n\n**Input:** events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\n**Output:** 7\n**Explanation:** Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1751.Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/images/screenshot-2021-01-11-at-60150-pm.png)\n\n\n\n```\n\n**Input:** events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\n**Output:** 10\n**Explanation:** Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do **not** have to attend k events.\n```\n\n**Example 3:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1751.Maximum%20Number%20of%20Events%20That%20Can%20Be%20Attended%20II/images/screenshot-2021-01-11-at-60703-pm.png)**\n\n\n\n```\n\n**Input:** events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\n**Output:** 9\n**Explanation:** Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= events.length`\n* `1 <= k * events.length <= 106`\n* `1 <= startDayi <= endDayi <= 109`\n* `1 <= valuei <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxValue(self, events: List[List[int]], k: int) -> int:\n        events.sort(key=lambda x: x[1])\n        n = len(events)\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        for i, (st, _, val) in enumerate(events, 1):\n            p = bisect_left(events, st, hi=i - 1, key=lambda x: x[1])\n            for j in range(1, k + 1):\n                f[i][j] = max(f[i - 1][j], f[p][j - 1] + val)\n        return f[n][k]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxValue(self, events, k):\n        events.sort(key=lambda x: x[1])\n        n = len(events)\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        for i, (st, _, val) in enumerate(events, 1):\n            p = bisect_left(events, st, hi=i - 1, key=lambda x: x[1])\n            for j in range(1, k + 1):\n                f[i][j] = max(f[i - 1][j], f[p][j - 1] + val)\n        return f[n][k]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random events list\n    events = []\n    for _ in range(random.randint(2, 10)):\n        start = random.randint(1, 100)\n        end = random.randint(start, 100)\n        value = random.randint(1, 10)\n        events.append([start, end, value])\n\n    # Generate a random k value\n    k = random.randint(1, len(events))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxValue(events, k)\n\n    return events, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        events, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxValue(events, k) == expected_result\n        print(f\"assert solution.maxValue({events}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxValue({events}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxValue([[63, 65, 5], [89, 95, 8], [43, 100, 6], [100, 100, 3]], 3) == 16\nassert solution.maxValue([[2, 6, 7], [50, 77, 9], [54, 95, 8]], 2) == 16\nassert solution.maxValue([[41, 45, 1], [14, 54, 5], [49, 59, 2], [77, 83, 9], [71, 89, 4], [24, 94, 4], [76, 96, 10], [98, 98, 2], [58, 98, 4], [64, 99, 1]], 8) == 17\nassert solution.maxValue([[24, 39, 5], [4, 39, 5], [35, 53, 3], [93, 96, 8]], 2) == 13\nassert solution.maxValue([[26, 39, 7], [7, 51, 10], [44, 78, 3], [71, 84, 8], [35, 87, 3], [66, 88, 4], [28, 89, 5], [53, 89, 6], [93, 93, 8], [86, 100, 2]], 3) == 26\nassert solution.maxValue([[39, 54, 9], [40, 57, 2], [57, 68, 5], [68, 72, 1], [53, 79, 7], [36, 84, 7], [85, 86, 8], [73, 95, 4], [62, 100, 6], [99, 100, 4]], 6) == 26\nassert solution.maxValue([[2, 10, 6], [58, 69, 10], [48, 92, 2], [94, 97, 1], [80, 100, 10]], 1) == 10\nassert solution.maxValue([[50, 55, 8], [42, 66, 5], [58, 66, 9], [58, 73, 7], [39, 88, 6], [4, 88, 1], [91, 91, 8], [92, 92, 3], [87, 98, 8], [96, 99, 6]], 7) == 34\nassert solution.maxValue([[56, 66, 2], [71, 82, 7], [91, 94, 6]], 3) == 15\nassert solution.maxValue([[88, 88, 6], [76, 95, 5]], 1) == 6\nassert solution.maxValue([[47, 59, 1], [42, 72, 7], [58, 76, 9], [67, 78, 1], [64, 82, 5], [75, 84, 8], [32, 90, 4], [70, 90, 9], [87, 96, 9], [42, 98, 8]], 8) == 24\nassert solution.maxValue([[45, 55, 10], [34, 64, 1], [13, 72, 9], [9, 86, 3], [60, 93, 2]], 5) == 12\nassert solution.maxValue([[37, 47, 8], [29, 68, 4], [33, 75, 10], [78, 97, 7], [83, 98, 10]], 3) == 20\nassert solution.maxValue([[23, 27, 8], [18, 61, 7], [56, 62, 9]], 2) == 17\nassert solution.maxValue([[45, 58, 10], [46, 61, 1], [30, 68, 4], [50, 75, 8], [64, 85, 1], [61, 88, 9], [44, 93, 8], [67, 95, 10], [77, 99, 7], [98, 99, 4]], 2) == 20\nassert solution.maxValue([[23, 63, 1], [57, 83, 4], [24, 92, 6], [93, 95, 10]], 1) == 10\nassert solution.maxValue([[16, 28, 6], [88, 92, 4], [21, 92, 1], [94, 100, 3], [56, 100, 3], [2, 100, 3]], 4) == 13\nassert solution.maxValue([[7, 71, 3], [15, 80, 5], [6, 89, 7], [95, 98, 3], [100, 100, 4]], 2) == 11\nassert solution.maxValue([[34, 37, 10], [63, 66, 5], [39, 88, 1], [87, 95, 3]], 3) == 18\nassert solution.maxValue([[11, 39, 7], [35, 80, 2], [81, 91, 6], [86, 93, 8], [95, 99, 10]], 1) == 10\nassert solution.maxValue([[62, 82, 5], [14, 85, 10], [66, 91, 6], [56, 94, 5], [36, 100, 4]], 1) == 10\nassert solution.maxValue([[42, 57, 9], [62, 63, 6], [94, 96, 10], [97, 97, 10], [92, 98, 8]], 2) == 20\nassert solution.maxValue([[42, 70, 10], [28, 83, 10], [93, 94, 4]], 2) == 14\nassert solution.maxValue([[21, 42, 10], [24, 49, 10], [13, 68, 8], [69, 85, 5], [79, 85, 7], [20, 89, 7], [12, 90, 7], [78, 90, 8]], 3) == 18\nassert solution.maxValue([[35, 58, 4], [35, 74, 6], [60, 83, 8], [77, 87, 7]], 2) == 13\nassert solution.maxValue([[49, 72, 9], [30, 82, 4], [96, 100, 8]], 2) == 17\nassert solution.maxValue([[8, 42, 2], [29, 47, 1], [43, 67, 2], [22, 67, 3], [48, 68, 3], [62, 78, 7], [39, 90, 5], [38, 97, 5], [74, 98, 7], [90, 99, 2]], 1) == 7\nassert solution.maxValue([[37, 43, 4], [40, 74, 3], [76, 76, 9], [40, 86, 5], [66, 89, 6], [95, 96, 10]], 1) == 10\nassert solution.maxValue([[20, 34, 1], [50, 63, 1], [61, 77, 8], [60, 79, 5], [64, 85, 2], [51, 87, 9]], 2) == 10\nassert solution.maxValue([[31, 38, 9], [36, 46, 6], [27, 47, 4], [37, 65, 2], [23, 68, 10], [64, 77, 1], [88, 91, 7], [97, 97, 7], [88, 98, 5]], 3) == 24\nassert solution.maxValue([[25, 40, 6], [12, 58, 4], [47, 65, 10], [49, 80, 2], [67, 87, 5], [87, 96, 4], [97, 99, 6]], 6) == 27\nassert solution.maxValue([[32, 45, 2], [80, 83, 10], [86, 90, 3], [68, 97, 3]], 2) == 13\nassert solution.maxValue([[2, 20, 1], [23, 23, 10], [23, 32, 5], [51, 52, 5], [56, 65, 10], [65, 79, 2], [44, 82, 10], [71, 88, 7], [18, 96, 9], [41, 99, 3]], 3) == 27\nassert solution.maxValue([[31, 40, 5], [30, 44, 2], [55, 57, 3], [78, 78, 3], [73, 85, 9], [45, 88, 2], [61, 97, 5]], 3) == 17\nassert solution.maxValue([[49, 74, 2], [86, 86, 10], [35, 96, 7], [30, 98, 1]], 1) == 10\nassert solution.maxValue([[11, 70, 3], [96, 96, 9], [92, 100, 6]], 1) == 9\nassert solution.maxValue([[46, 75, 9], [68, 85, 5], [49, 90, 9], [64, 92, 7], [78, 95, 6], [30, 98, 10], [82, 99, 9], [7, 100, 7]], 8) == 18\nassert solution.maxValue([[9, 29, 6], [24, 75, 6], [65, 97, 3]], 2) == 9\nassert solution.maxValue([[24, 42, 7], [46, 50, 8], [29, 68, 7], [69, 77, 4], [88, 93, 7], [37, 96, 2]], 1) == 8\nassert solution.maxValue([[52, 67, 8], [76, 77, 8], [60, 79, 3], [70, 91, 8]], 3) == 16\nassert solution.maxValue([[8, 22, 2], [4, 28, 8], [80, 88, 10], [74, 99, 9]], 1) == 10\nassert solution.maxValue([[35, 37, 5], [45, 57, 5], [54, 68, 4], [53, 76, 10], [67, 78, 1], [60, 86, 4], [86, 93, 4], [6, 93, 8], [93, 99, 10], [64, 100, 1]], 2) == 20\nassert solution.maxValue([[19, 42, 8], [61, 71, 3], [39, 74, 5]], 2) == 11\nassert solution.maxValue([[23, 43, 4], [31, 50, 8]], 1) == 8\nassert solution.maxValue([[18, 55, 3], [26, 63, 7], [17, 68, 8], [40, 91, 9], [68, 98, 7]], 3) == 14\nassert solution.maxValue([[71, 72, 10], [65, 79, 1], [24, 93, 9]], 2) == 10\nassert solution.maxValue([[32, 36, 6], [18, 62, 3], [34, 65, 10], [16, 69, 4], [65, 78, 4], [87, 98, 6]], 3) == 16\nassert solution.maxValue([[14, 36, 1], [18, 44, 4], [38, 67, 4], [33, 70, 3], [3, 81, 5], [90, 92, 3], [73, 100, 8], [100, 100, 3]], 3) == 13\nassert solution.maxValue([[9, 31, 1], [29, 39, 10], [24, 66, 2], [76, 80, 2], [78, 87, 7], [21, 98, 8]], 1) == 10\nassert solution.maxValue([[50, 60, 4], [40, 72, 9], [73, 95, 2], [82, 96, 10]], 4) == 19\nassert solution.maxValue([[33, 73, 9], [81, 93, 9], [95, 97, 1], [95, 99, 3]], 4) == 21\nassert solution.maxValue([[27, 36, 8], [45, 56, 1], [63, 78, 3], [59, 83, 8], [12, 84, 5], [82, 97, 8], [88, 98, 10], [98, 98, 10], [57, 99, 8]], 4) == 29\nassert solution.maxValue([[1, 7, 9], [3, 29, 8], [25, 35, 3], [19, 54, 4], [84, 88, 7]], 1) == 9\nassert solution.maxValue([[7, 32, 9], [44, 63, 5], [46, 79, 1], [83, 85, 1], [90, 90, 10], [80, 97, 9], [87, 98, 5], [88, 99, 3]], 8) == 25\nassert solution.maxValue([[65, 76, 9], [80, 89, 1], [2, 100, 2], [92, 100, 2]], 4) == 12\nassert solution.maxValue([[25, 73, 5], [66, 81, 5], [80, 85, 5], [84, 88, 7], [84, 96, 9], [23, 99, 9]], 3) == 14\nassert solution.maxValue([[32, 48, 5], [44, 55, 7], [16, 78, 10], [23, 85, 6], [82, 91, 7], [95, 96, 7]], 5) == 24\nassert solution.maxValue([[16, 32, 5], [48, 48, 4], [20, 66, 2], [3, 70, 5], [72, 89, 7]], 2) == 12\nassert solution.maxValue([[48, 68, 2], [50, 74, 10], [52, 82, 6], [82, 85, 1], [7, 87, 9], [90, 90, 1], [20, 98, 7]], 5) == 12\nassert solution.maxValue([[4, 18, 6], [55, 63, 9], [22, 82, 6], [75, 87, 7], [83, 88, 9], [63, 94, 7], [30, 98, 6], [35, 99, 2]], 6) == 24\nassert solution.maxValue([[28, 38, 5], [81, 88, 3], [65, 93, 1], [50, 93, 8], [93, 93, 1], [7, 97, 2]], 2) == 13\nassert solution.maxValue([[6, 33, 9], [75, 82, 7], [80, 88, 9], [4, 92, 6], [94, 97, 1], [31, 100, 6]], 4) == 19\nassert solution.maxValue([[12, 46, 3], [54, 58, 9], [85, 92, 8], [95, 100, 4]], 2) == 17\nassert solution.maxValue([[43, 45, 7], [58, 71, 4], [74, 81, 3], [84, 84, 7], [88, 90, 4], [82, 92, 2], [92, 93, 1], [95, 95, 6], [84, 99, 7], [58, 100, 7]], 9) == 32\nassert solution.maxValue([[22, 28, 2], [37, 41, 7], [26, 65, 5], [73, 82, 9], [49, 89, 6], [50, 99, 10], [96, 99, 3], [98, 100, 3], [100, 100, 9]], 1) == 10\nassert solution.maxValue([[30, 41, 4], [45, 82, 4], [80, 87, 10], [58, 88, 6], [2, 90, 1], [90, 95, 6]], 1) == 10\nassert solution.maxValue([[67, 67, 2], [69, 82, 4], [89, 92, 8], [18, 99, 4]], 1) == 8\nassert solution.maxValue([[19, 39, 1], [26, 65, 7], [43, 71, 2], [67, 75, 10], [76, 97, 10], [40, 98, 2], [97, 99, 4], [79, 99, 8]], 8) == 27\nassert solution.maxValue([[47, 72, 7], [91, 95, 9]], 1) == 9\nassert solution.maxValue([[34, 49, 7], [4, 84, 1], [87, 95, 5], [96, 98, 9]], 1) == 9\nassert solution.maxValue([[29, 39, 7], [51, 92, 5]], 2) == 12\nassert solution.maxValue([[30, 43, 6], [14, 70, 10], [51, 70, 5], [47, 86, 2], [94, 94, 4], [28, 100, 3]], 5) == 15\nassert solution.maxValue([[18, 36, 2], [55, 65, 1], [87, 89, 3], [79, 98, 2]], 3) == 6\nassert solution.maxValue([[4, 12, 3], [30, 48, 4], [41, 82, 7], [63, 90, 4], [63, 95, 4], [93, 96, 4], [35, 100, 7]], 1) == 7\nassert solution.maxValue([[55, 64, 9], [28, 67, 9], [8, 76, 5]], 3) == 9\nassert solution.maxValue([[17, 24, 8], [33, 72, 5], [44, 77, 9], [72, 86, 3], [86, 87, 5], [56, 97, 3], [97, 100, 8]], 2) == 17\nassert solution.maxValue([[30, 64, 7], [55, 76, 7], [73, 76, 5], [79, 86, 10], [49, 87, 6], [92, 97, 3], [69, 100, 1]], 5) == 25\nassert solution.maxValue([[11, 30, 7], [44, 70, 6], [29, 83, 2], [56, 97, 6]], 2) == 13\nassert solution.maxValue([[19, 61, 8], [62, 83, 6], [62, 86, 5], [78, 92, 8], [85, 96, 2], [91, 97, 9]], 4) == 23\nassert solution.maxValue([[39, 67, 6], [4, 68, 9], [75, 97, 7]], 2) == 16\nassert solution.maxValue([[28, 58, 2], [82, 95, 6]], 2) == 8\nassert solution.maxValue([[58, 60, 5], [58, 76, 8], [73, 82, 10], [3, 90, 9], [88, 95, 7], [53, 100, 9]], 5) == 22\nassert solution.maxValue([[27, 40, 2], [23, 49, 2], [37, 53, 1], [41, 59, 2], [16, 73, 3], [47, 77, 6], [80, 95, 9], [73, 96, 1]], 6) == 17\nassert solution.maxValue([[4, 77, 8], [78, 84, 1], [89, 93, 2], [61, 97, 10], [98, 100, 8]], 4) == 19\nassert solution.maxValue([[25, 37, 7], [30, 55, 3], [56, 57, 4], [43, 63, 3], [59, 77, 10], [40, 83, 4], [77, 83, 10], [7, 93, 4], [69, 98, 7]], 5) == 21\nassert solution.maxValue([[10, 59, 3], [68, 89, 3], [67, 99, 8]], 2) == 11\nassert solution.maxValue([[25, 50, 6], [30, 58, 4], [28, 62, 6], [12, 78, 2], [79, 91, 5], [83, 91, 4], [94, 95, 8], [68, 98, 9]], 1) == 9\nassert solution.maxValue([[18, 30, 8], [16, 56, 10], [47, 68, 8], [4, 68, 5], [61, 72, 3], [16, 86, 6], [100, 100, 4], [98, 100, 9]], 5) == 25\nassert solution.maxValue([[12, 36, 2], [13, 45, 1], [57, 77, 7], [45, 88, 4], [92, 94, 10]], 5) == 19\nassert solution.maxValue([[29, 30, 1], [52, 58, 8], [33, 66, 9], [11, 68, 8], [43, 75, 9], [54, 82, 3]], 2) == 10\nassert solution.maxValue([[8, 54, 9], [68, 71, 3], [18, 81, 4]], 3) == 12\nassert solution.maxValue([[40, 93, 3], [78, 94, 4]], 1) == 4\nassert solution.maxValue([[79, 80, 2], [66, 81, 5], [95, 95, 4], [16, 98, 2]], 1) == 5\nassert solution.maxValue([[17, 52, 6], [69, 75, 3], [90, 94, 4], [68, 95, 1], [96, 99, 7], [93, 100, 9]], 2) == 15\nassert solution.maxValue([[13, 33, 8], [30, 39, 3], [56, 69, 9], [59, 71, 9], [22, 73, 4], [78, 81, 7], [48, 84, 10], [79, 91, 3], [38, 99, 9], [100, 100, 5]], 10) == 29\nassert solution.maxValue([[12, 55, 10], [35, 59, 1], [66, 72, 7], [60, 75, 6], [80, 81, 4], [43, 92, 3], [94, 97, 7], [97, 98, 7]], 4) == 28\nassert solution.maxValue([[85, 87, 1], [68, 92, 8]], 1) == 8\nassert solution.maxValue([[2, 19, 8], [31, 54, 5]], 2) == 13\nassert solution.maxValue([[1, 82, 3], [46, 90, 5], [95, 95, 8]], 1) == 8\nassert solution.maxValue([[16, 37, 6], [49, 93, 7]], 2) == 13",
  "inefficient_solution": "class Solution:\n    def maxValue(self, events, k):\n        n = len(events)\n        events.sort(key=lambda x: x[1])\n        dp = [[0]*k for _ in range(n+1)]\n        mem = [[0]*k for _ in range(n+1)]\n        mem2 = [[0]*k for _ in range(n+1)]\n        mem3 = [[0]*k for _ in range(n+1)]\n        for i, (st, ed, val) in enumerate(events, 1):\n            for j in range(1, k+1):\n                p = self.binary_search(events, st, hi=i-1, key=lambda x: x[1])\n                dp[i][j] = max(dp[i-1][j], self.max_val(mem, mem2, mem3, p, j-1, val))\n        return dp[n][k]\n\n    def binary_search(self, arr, target, lo=0, hi=None, key=lambda x: x):\n        if hi is None:\n            hi = len(arr) - 1\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if key(arr[mid]) < target:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        return lo\n\n    def max_val(self, mem1, mem2, mem3, idx, k, val):\n        if k == 0:\n            return 0\n        if mem1[idx][k] != 0:\n            return mem1[idx][k]\n        if mem2[idx][k] != 0:\n            return mem2[idx][k]\n        if mem3[idx][k] != 0:\n            return mem3[idx][k]\n        res = 0\n        for i in range(idx+1, len(mem1)):\n            res = max(res, self.max_val(mem1, mem2, mem3, i, k-1, 0))\n        mem1[idx][k] = res + val\n        mem2[idx][k] = res\n        mem3[idx][k] = res\n        return mem1[idx][k]",
  "is_python": true
}