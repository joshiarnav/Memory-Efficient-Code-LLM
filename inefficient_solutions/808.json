{
  "problem_idx": 808,
  "task_name": "Soup Servings",
  "markdown_description": "\nThere are two types of soup: **type A** and **type B**. Initially, we have `n` ml of each type of soup. There are four kinds of operations:\n\n\n1. Serve `100` ml of **soup A** and `0` ml of **soup B**,\n2. Serve `75` ml of **soup A** and `25` ml of **soup B**,\n3. Serve `50` ml of **soup A** and `50` ml of **soup B**, and\n4. Serve `25` ml of **soup A** and `75` ml of **soup B**.\n\n\nWhen we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability `0.25`. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\n\n\n**Note** that we do not have an operation where all `100` ml's of **soup B** are used first.\n\n\nReturn *the probability that **soup A** will be empty first, plus half the probability that **A** and **B** become empty at the same time*. Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 50\n**Output:** 0.62500\n**Explanation:** If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 100\n**Output:** 0.71875\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def soupServings(self, n: int) -> float:\n        @cache\n        def dfs(i: int, j: int) -> float:\n            if i <= 0 and j <= 0:\n                return 0.5\n            if i <= 0:\n                return 1\n            if j <= 0:\n                return 0\n            return 0.25 * (\n                dfs(i - 4, j)\n                + dfs(i - 3, j - 1)\n                + dfs(i - 2, j - 2)\n                + dfs(i - 1, j - 3)\n            )\n\n        return 1 if n > 4800 else dfs((n + 24) // 25, (n + 24) // 25)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def soupServings(self, n: int) -> float:\n        @cache\n        def dfs(i: int, j: int) -> float:\n            if i <= 0 and j <= 0:\n                return 0.5\n            if i <= 0:\n                return 1\n            if j <= 0:\n                return 0\n            return 0.25 * (\n                dfs(i - 4, j)\n                + dfs(i - 3, j - 1)\n                + dfs(i - 2, j - 2)\n                + dfs(i - 1, j - 3)\n            )\n\n        return 1 if n > 4800 else dfs((n + 24) // 25, (n + 24) // 25)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random n\n    n = random.randint(0, int(1e9) + 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.soupServings(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.soupServings(n) == expected_result\n        print(f\"assert solution.soupServings({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.soupServings({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.soupServings(186865726) == 1\nassert solution.soupServings(985532921) == 1\nassert solution.soupServings(958142841) == 1\nassert solution.soupServings(668610442) == 1\nassert solution.soupServings(60486292) == 1\nassert solution.soupServings(696948848) == 1\nassert solution.soupServings(101641789) == 1\nassert solution.soupServings(451369221) == 1\nassert solution.soupServings(380782671) == 1\nassert solution.soupServings(977954830) == 1\nassert solution.soupServings(52140421) == 1\nassert solution.soupServings(328989637) == 1\nassert solution.soupServings(964433548) == 1\nassert solution.soupServings(849402016) == 1\nassert solution.soupServings(31112933) == 1\nassert solution.soupServings(710514993) == 1\nassert solution.soupServings(524817510) == 1\nassert solution.soupServings(334780931) == 1\nassert solution.soupServings(406366535) == 1\nassert solution.soupServings(803455495) == 1\nassert solution.soupServings(809394522) == 1\nassert solution.soupServings(965458883) == 1\nassert solution.soupServings(83608671) == 1\nassert solution.soupServings(370618505) == 1\nassert solution.soupServings(540784011) == 1\nassert solution.soupServings(679821413) == 1\nassert solution.soupServings(633444477) == 1\nassert solution.soupServings(628878636) == 1\nassert solution.soupServings(993615256) == 1\nassert solution.soupServings(698271575) == 1\nassert solution.soupServings(644711150) == 1\nassert solution.soupServings(611023931) == 1\nassert solution.soupServings(621430720) == 1\nassert solution.soupServings(449670891) == 1\nassert solution.soupServings(620779792) == 1\nassert solution.soupServings(930993166) == 1\nassert solution.soupServings(955644270) == 1\nassert solution.soupServings(238389263) == 1\nassert solution.soupServings(675255381) == 1\nassert solution.soupServings(267978172) == 1\nassert solution.soupServings(993942826) == 1\nassert solution.soupServings(343370515) == 1\nassert solution.soupServings(832036025) == 1\nassert solution.soupServings(878295187) == 1\nassert solution.soupServings(709919133) == 1\nassert solution.soupServings(702614248) == 1\nassert solution.soupServings(292124945) == 1\nassert solution.soupServings(525671115) == 1\nassert solution.soupServings(596206257) == 1\nassert solution.soupServings(372712870) == 1\nassert solution.soupServings(370964273) == 1\nassert solution.soupServings(726385446) == 1\nassert solution.soupServings(197177401) == 1\nassert solution.soupServings(407746130) == 1\nassert solution.soupServings(850526811) == 1\nassert solution.soupServings(919053590) == 1\nassert solution.soupServings(855301800) == 1\nassert solution.soupServings(5263464) == 1\nassert solution.soupServings(494513014) == 1\nassert solution.soupServings(556950780) == 1\nassert solution.soupServings(342210056) == 1\nassert solution.soupServings(788422904) == 1\nassert solution.soupServings(787037876) == 1\nassert solution.soupServings(862283653) == 1\nassert solution.soupServings(686331157) == 1\nassert solution.soupServings(245682798) == 1\nassert solution.soupServings(885562143) == 1\nassert solution.soupServings(468970258) == 1\nassert solution.soupServings(175405163) == 1\nassert solution.soupServings(859574041) == 1\nassert solution.soupServings(475615181) == 1\nassert solution.soupServings(473247429) == 1\nassert solution.soupServings(168452102) == 1\nassert solution.soupServings(168958929) == 1\nassert solution.soupServings(460064222) == 1\nassert solution.soupServings(123991638) == 1\nassert solution.soupServings(643585939) == 1\nassert solution.soupServings(822954626) == 1\nassert solution.soupServings(292833226) == 1\nassert solution.soupServings(103346838) == 1\nassert solution.soupServings(215456652) == 1\nassert solution.soupServings(226126541) == 1\nassert solution.soupServings(36281684) == 1\nassert solution.soupServings(186338263) == 1\nassert solution.soupServings(280781369) == 1\nassert solution.soupServings(777732708) == 1\nassert solution.soupServings(66610410) == 1\nassert solution.soupServings(529530676) == 1\nassert solution.soupServings(251015039) == 1\nassert solution.soupServings(194594024) == 1\nassert solution.soupServings(272544940) == 1\nassert solution.soupServings(860792851) == 1\nassert solution.soupServings(86336584) == 1\nassert solution.soupServings(5552683) == 1\nassert solution.soupServings(562635656) == 1\nassert solution.soupServings(21825626) == 1\nassert solution.soupServings(533683754) == 1\nassert solution.soupServings(611893368) == 1\nassert solution.soupServings(223734630) == 1\nassert solution.soupServings(317305193) == 1",
  "inefficient_solution": "class Solution:\n    def soupServings(self, n: int) -> float:\n        def dfs(i: int, j: int) -> float:\n            if i <= 0 and j <= 0:\n                return 0.5\n            if i <= 0:\n                return 1\n            if j <= 0:\n                return 0\n            # Create lists to store the results of sub-problems\n            memo = [[0 for _ in range(j + 1)] for _ in range(i + 1)]\n            return self.dfs_helper(i, j, memo)\n\n        def dfs_helper(i: int, j: int, memo: list) -> float:\n            if memo[i][j] != 0:\n                return memo[i][j]\n            memo[i][j] = 0.25 * (\n                dfs_helper(i - 4, j, memo)\n                + dfs_helper(i - 3, j - 1, memo)\n                + dfs_helper(i - 2, j - 2, memo)\n                + dfs_helper(i - 1, j - 3, memo)\n            )\n            return memo[i][j]\n\n        return 1 if n > 4800 else dfs((n + 24) // 25, (n + 24) // 25)",
  "is_python": true
}