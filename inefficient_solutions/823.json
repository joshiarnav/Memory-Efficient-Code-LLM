{
  "problem_idx": 823,
  "task_name": "Binary Trees With Factors",
  "markdown_description": "\nGiven an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`.\n\n\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\n\n\nReturn *the number of binary trees we can make*. The answer may be too large so return the answer **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [2,4]\n**Output:** 3\n**Explanation:** We can make these trees: [2], [4], [4, 2, 2]\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [2,4,5,10]\n**Output:** 7\n**Explanation:** We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 1000`\n* `2 <= arr[i] <= 109`\n* All the values of `arr` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def numFactoredBinaryTrees(self, arr: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(arr)\n        arr.sort()\n        idx = {v: i for i, v in enumerate(arr)}\n        f = [1] * n\n        for i, a in enumerate(arr):\n            for j in range(i):\n                b = arr[j]\n                if a % b == 0 and (c := (a // b)) in idx:\n                    f[i] = (f[i] + f[j] * f[idx[c]]) % mod\n        return sum(f) % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numFactoredBinaryTrees(self, arr):\n        mod = 10**9 + 7\n        n = len(arr)\n        arr.sort()\n        idx = {v: i for i, v in enumerate(arr)}\n        f = [1] * n\n        for i, a in enumerate(arr):\n            for j in range(i):\n                b = arr[j]\n                if a % b == 0 and (c := (a // b)) in idx:\n                    f[i] = (f[i] + f[j] * f[idx[c]]) % mod\n        return sum(f) % mod\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random array of unique integers\n    arr = random.sample(range(2, 1000000000), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numFactoredBinaryTrees(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numFactoredBinaryTrees(arr) == expected_result\n        print(f\"assert solution.numFactoredBinaryTrees({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numFactoredBinaryTrees({arr}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numFactoredBinaryTrees([124953247, 145389021]) == 2\nassert solution.numFactoredBinaryTrees([354510076, 405350582, 481525743, 785000756]) == 4\nassert solution.numFactoredBinaryTrees([196821290, 208333276, 335906430, 338918420, 532177513, 544045064, 820488681, 909248330]) == 8\nassert solution.numFactoredBinaryTrees([364862672, 648456461]) == 2\nassert solution.numFactoredBinaryTrees([18610219, 502847696, 726271713, 990097098]) == 4\nassert solution.numFactoredBinaryTrees([110682048, 571017035, 609327075]) == 3\nassert solution.numFactoredBinaryTrees([59197103, 176734269, 374956955, 500141218, 626725283, 780048618, 869416981, 979013786]) == 8\nassert solution.numFactoredBinaryTrees([456263026, 762626758, 874097885]) == 3\nassert solution.numFactoredBinaryTrees([114730735]) == 1\nassert solution.numFactoredBinaryTrees([27105931, 267553225, 461130102, 775661891, 895263782]) == 5\nassert solution.numFactoredBinaryTrees([71593747, 146164975, 395025292, 649375306, 872839041, 966639167]) == 6\nassert solution.numFactoredBinaryTrees([901127867]) == 1\nassert solution.numFactoredBinaryTrees([1617944, 316879634, 392684339, 473395859, 581153083, 620269445, 717365862, 895439998, 933199789]) == 9\nassert solution.numFactoredBinaryTrees([108870717, 201552845, 399381458, 906209981]) == 4\nassert solution.numFactoredBinaryTrees([62419563, 177752819, 588783325, 602731839, 608542550, 837506071]) == 6\nassert solution.numFactoredBinaryTrees([522037099]) == 1\nassert solution.numFactoredBinaryTrees([613912746, 637373718, 691066715, 786851561, 838546610, 850867725, 859289858, 974380152, 986371363]) == 9\nassert solution.numFactoredBinaryTrees([158684679, 262391100, 593755137]) == 3\nassert solution.numFactoredBinaryTrees([210132518, 352078395, 532435606, 567667847, 798642682, 864161961, 977988053]) == 7\nassert solution.numFactoredBinaryTrees([5502596, 88173376, 99586602, 188178914, 203532159, 661561270, 884959930]) == 7\nassert solution.numFactoredBinaryTrees([155316823, 165047067, 447500933, 666125669, 746432838, 814292054, 981179525]) == 7\nassert solution.numFactoredBinaryTrees([55266981, 533900900, 690276277, 891665198]) == 4\nassert solution.numFactoredBinaryTrees([54038044, 955791790]) == 2\nassert solution.numFactoredBinaryTrees([94680045, 402883462, 409983292, 630028570, 793464818]) == 5\nassert solution.numFactoredBinaryTrees([64221624, 73932892, 77998208, 117161638, 323440390, 653909946, 704140796, 826441017, 979678260, 988286924]) == 10\nassert solution.numFactoredBinaryTrees([430283720, 695427663, 807060579, 850856914, 974045037]) == 5\nassert solution.numFactoredBinaryTrees([191567804, 234337060, 288780357, 325032116, 805561972]) == 5\nassert solution.numFactoredBinaryTrees([76670836, 202426576, 633067853, 869524834]) == 4\nassert solution.numFactoredBinaryTrees([165954007, 250913996, 548677777]) == 3\nassert solution.numFactoredBinaryTrees([367693477]) == 1\nassert solution.numFactoredBinaryTrees([631445916, 818423471]) == 2\nassert solution.numFactoredBinaryTrees([35260053, 67764107, 134851922, 606585731, 641359435, 928388467]) == 6\nassert solution.numFactoredBinaryTrees([140965860, 402049507, 601707233, 684372309, 708197605, 770392961, 783026938, 803426349, 825020493]) == 9\nassert solution.numFactoredBinaryTrees([543740018, 544307568]) == 2\nassert solution.numFactoredBinaryTrees([245583803, 554691666, 770056484]) == 3\nassert solution.numFactoredBinaryTrees([65420838, 65570813, 80866192, 251777027, 393509735, 552800012, 713518730, 827161274, 943334618, 960726765]) == 10\nassert solution.numFactoredBinaryTrees([217930444, 374009173, 526726159, 620759794, 651747005, 803409251, 908509309, 978839792, 984509312]) == 9\nassert solution.numFactoredBinaryTrees([62026934, 142859896, 207068073, 293605000, 318395012, 340924615, 640101125, 736724942, 844537413]) == 9\nassert solution.numFactoredBinaryTrees([217151524, 347545088, 612235539, 718711783, 766281729, 774790613, 795912242, 951207679]) == 8\nassert solution.numFactoredBinaryTrees([30160221, 31275171, 122077598, 163586437, 475513909, 612500326, 810614257, 849435061, 948157366]) == 9\nassert solution.numFactoredBinaryTrees([331831495, 666534932, 825285489, 934049895]) == 4\nassert solution.numFactoredBinaryTrees([505760526, 534802278, 643130122, 709188745, 806365323, 837391772, 912079965]) == 7\nassert solution.numFactoredBinaryTrees([269114977, 347240551, 485350397, 501009067, 635082780, 647498901, 809438155, 894818899]) == 8\nassert solution.numFactoredBinaryTrees([384634296, 632429851, 638667303]) == 3\nassert solution.numFactoredBinaryTrees([36578245, 112428986, 142464564, 147096025, 581602882, 609045900, 895918157]) == 7\nassert solution.numFactoredBinaryTrees([175737192, 197845151, 262600182, 345642179, 388405188, 835395605]) == 6\nassert solution.numFactoredBinaryTrees([81218836, 188888846, 489537780, 517752563, 553377916, 558368414, 794806234, 876710049, 923696089]) == 9\nassert solution.numFactoredBinaryTrees([255446258]) == 1\nassert solution.numFactoredBinaryTrees([852211800, 919454615]) == 2\nassert solution.numFactoredBinaryTrees([87588515, 100191327, 118531229, 122231386, 190145543, 377478943, 666579470, 731401599, 897721992]) == 9\nassert solution.numFactoredBinaryTrees([200574788, 221488097, 279702284, 349445515, 416941909, 534789606, 546099832, 592448660, 621557352]) == 9\nassert solution.numFactoredBinaryTrees([66404133, 117281758, 119201732, 272777150, 282205540, 610201656, 811254514, 860169983, 940786446, 980391762]) == 10\nassert solution.numFactoredBinaryTrees([139793742, 768322911]) == 2\nassert solution.numFactoredBinaryTrees([14325214]) == 1\nassert solution.numFactoredBinaryTrees([120168503, 341502378, 578196159, 744438784, 922693991]) == 5\nassert solution.numFactoredBinaryTrees([63917202, 105363452, 836047005]) == 3\nassert solution.numFactoredBinaryTrees([58267729, 75376732, 125014439, 156280240, 174171795, 372863189, 441472357, 600954671, 758067380]) == 9\nassert solution.numFactoredBinaryTrees([4171864, 48047549, 257256311, 488605047, 629852341, 698831348, 758189838, 813021322, 824960621, 895335896]) == 10\nassert solution.numFactoredBinaryTrees([419858363, 427657990, 472251654, 799598419, 931111621]) == 5\nassert solution.numFactoredBinaryTrees([61046969, 237808267, 345912730, 399617819, 414439124, 471647047]) == 6\nassert solution.numFactoredBinaryTrees([71610287, 299654609, 484168114, 531169550, 647838375, 821442984, 933830652, 997167823]) == 8\nassert solution.numFactoredBinaryTrees([336877205, 455757177, 809041470, 935464915]) == 4\nassert solution.numFactoredBinaryTrees([12810820, 63651142, 356883407, 421543236, 528810243, 530370030, 676435204, 872948664, 889731595, 931628879]) == 10\nassert solution.numFactoredBinaryTrees([150529767, 154346981, 487036608, 776779349, 928497344, 994651933]) == 6\nassert solution.numFactoredBinaryTrees([105663548, 153697902, 266681229, 532592029, 543896156, 548439466, 651348417, 651833328]) == 8\nassert solution.numFactoredBinaryTrees([234496704, 237744866, 267125838, 283186556, 287504080, 396525072, 659771819, 684854197, 989145421, 990101069]) == 10\nassert solution.numFactoredBinaryTrees([73915405, 193469217]) == 2\nassert solution.numFactoredBinaryTrees([453475643, 595616476, 751126962]) == 3\nassert solution.numFactoredBinaryTrees([487084167, 530931058, 630254539, 667962991, 709087625, 733761031, 913913438, 915990162, 924150297]) == 9\nassert solution.numFactoredBinaryTrees([23229596, 263892613, 352172249, 354100701, 562814353, 797192598, 892940110]) == 7\nassert solution.numFactoredBinaryTrees([53145902]) == 1\nassert solution.numFactoredBinaryTrees([134635774, 218318822, 347067111, 560150884, 624407741, 845966271, 942146857]) == 7\nassert solution.numFactoredBinaryTrees([134278232, 278604205, 469351400, 521685989, 639611586, 641942347, 644070799, 683898965]) == 8\nassert solution.numFactoredBinaryTrees([320949678, 329391507, 474277438, 615913908, 639082525, 846194455, 858274694, 893652782, 984355529]) == 9\nassert solution.numFactoredBinaryTrees([167182057, 566303701, 786094018]) == 3\nassert solution.numFactoredBinaryTrees([10435395, 210020715, 213887521, 378639014, 428203930, 533387685, 567436759, 661888594, 725401220, 863157876]) == 10\nassert solution.numFactoredBinaryTrees([38266209, 48245442, 497526092, 642003653, 670006736, 676217190, 764411311]) == 7\nassert solution.numFactoredBinaryTrees([11810871, 278528818, 355225598, 424368285]) == 4\nassert solution.numFactoredBinaryTrees([65303416, 507097355, 604363073]) == 3\nassert solution.numFactoredBinaryTrees([180763422, 208151993, 236179402, 336853725, 421120603, 493074922, 576522453, 931578026]) == 8\nassert solution.numFactoredBinaryTrees([7193685, 136063134, 317675835, 457677138, 574829175, 731503395, 985650679]) == 7\nassert solution.numFactoredBinaryTrees([71290268, 91740066, 216040989, 228141999, 272408742, 297927558, 314000373, 423248714]) == 8\nassert solution.numFactoredBinaryTrees([816420693, 889850220]) == 2\nassert solution.numFactoredBinaryTrees([80229007, 336479037, 621927285, 714806065, 887452571, 922616973]) == 6\nassert solution.numFactoredBinaryTrees([331913429, 408087448, 532533806, 596969392, 715526637]) == 5\nassert solution.numFactoredBinaryTrees([186436360, 192711028, 369905242, 468687025, 526495499, 604003214, 613976144, 908569916, 945453999, 950372686]) == 10\nassert solution.numFactoredBinaryTrees([234898084, 390896646, 396811388, 623659939]) == 4\nassert solution.numFactoredBinaryTrees([149152428, 727476302]) == 2\nassert solution.numFactoredBinaryTrees([135119146, 434417419, 768540930, 956985326]) == 4\nassert solution.numFactoredBinaryTrees([16326584, 275650889, 436469199, 708582171, 813406211, 836565266, 928726286, 981329313, 988427188]) == 9\nassert solution.numFactoredBinaryTrees([553860369, 612771545]) == 2\nassert solution.numFactoredBinaryTrees([197132246, 300499332, 404420417, 447972158, 476758995, 557701101, 574957767, 661626701, 841267794, 877693777]) == 10\nassert solution.numFactoredBinaryTrees([232695448, 377247405, 462984514, 810248467, 926652207]) == 5\nassert solution.numFactoredBinaryTrees([3606953, 44293069, 319089625, 329643318, 351788745, 365593045, 483917992, 764079408, 875833018, 937805374]) == 10\nassert solution.numFactoredBinaryTrees([483370206]) == 1\nassert solution.numFactoredBinaryTrees([54904323, 63846568, 93904400, 211671777, 223304843, 290645824, 444741962]) == 7\nassert solution.numFactoredBinaryTrees([584285783]) == 1\nassert solution.numFactoredBinaryTrees([564874898]) == 1\nassert solution.numFactoredBinaryTrees([90333765, 764117714]) == 2\nassert solution.numFactoredBinaryTrees([120615762, 922003925]) == 2",
  "inefficient_solution": "class Solution:\n    def numFactoredBinaryTrees(self, arr: List[int]) -> int:\n        mod = 10**9 + 7\n        n = len(arr)\n        arr.sort()\n        idx = {v: i for i, v in enumerate(arr)}\n        f = [1] * n\n        for i, a in enumerate(arr):\n            for j in range(i):\n                b = arr[j]\n                if a % b == 0 and (c := (a // b)) in idx:\n                    f[i] = (f[i] + f[j] * f[idx[c]]) % mod\n        for i, a in enumerate(arr):\n            for j in range(i):\n                for k in range(j):\n                    b = arr[j]\n                    d = arr[k]\n                    if a % b == 0 and (e := (a // b)) % d == 0:\n                        f[i] = (f[i] + f[j] * f[k]) % mod\n        for i, a in enumerate(arr):\n            for j in range(i):\n                for k in range(j):\n                    for v in arr:\n                        if a % v == 0 and (w := (a // v)) in idx and (x := (w // v)) in idx:\n                            f[i] = (f[i] + f[j] * f[k] * f[idx[v]] * f[idx[w]] * f[idx[x]]) % mod\n        for i, a in enumerate(arr):\n            for j in range(i):\n                for k in range(j):\n                    for v in arr:\n                        for d in arr:\n                            if a % v == 0 and (e := (a // v)) % d == 0:\n                                f[i] = (f[i] + f[j] * f[k] * f[idx[v]] * f[idx[e]]) % mod\n        return sum(f) % mod",
  "is_python": true
}