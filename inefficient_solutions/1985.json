{
  "problem_idx": 1985,
  "task_name": "Find the Kth Largest Integer in the Array",
  "markdown_description": "\nYou are given an array of strings `nums` and an integer `k`. Each string in `nums` represents an integer without leading zeros.\n\n\nReturn *the string that represents the* `kth` ***largest integer** in* `nums`.\n\n\n**Note**: Duplicate numbers should be counted distinctly. For example, if `nums` is `[\"1\",\"2\",\"2\"]`, `\"2\"` is the first largest integer, `\"2\"` is the second-largest integer, and `\"1\"` is the third-largest integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [\"3\",\"6\",\"7\",\"10\"], k = 4\n**Output:** \"3\"\n**Explanation:**\nThe numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"].\nThe 4th largest integer in nums is \"3\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [\"2\",\"21\",\"12\",\"1\"], k = 3\n**Output:** \"2\"\n**Explanation:**\nThe numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"].\nThe 3rd largest integer in nums is \"2\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [\"0\",\"0\"], k = 2\n**Output:** \"0\"\n**Explanation:**\nThe numbers in nums sorted in non-decreasing order are [\"0\",\"0\"].\nThe 2nd largest integer in nums is \"0\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 104`\n* `1 <= nums[i].length <= 100`\n* `nums[i]` consists of only digits.\n* `nums[i]` will not have any leading zeros.\n\n\n",
  "canonical_solution": "class Solution:\n    def kthLargestNumber(self, nums: List[str], k: int) -> str:\n        def cmp(a, b):\n            if len(a) != len(b):\n                return len(b) - len(a)\n            return 1 if b > a else -1\n\n        nums.sort(key=cmp_to_key(cmp))\n        return nums[k - 1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def kthLargestNumber(self, nums: List[str], k: int) -> str:\n        def cmp(a, b):\n            if len(a) != len(b):\n                return len(b) - len(a)\n            return 1 if b > a else -1\n\n        nums.sort(key=cmp_to_key(cmp))\n        return nums[k - 1]\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = []\n    for _ in range(random.randint(1, 11)):\n        nums.append(str(random.randint(1, 101)))\n\n    # Generate a random target\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.kthLargestNumber(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.kthLargestNumber(nums, k) == expected_result\n        print(f\"assert solution.kthLargestNumber({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.kthLargestNumber({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.kthLargestNumber(['100', '30', '24', '20', '11', '8'], 3) == 24\nassert solution.kthLargestNumber(['92', '81', '79', '77', '48'], 1) == 92\nassert solution.kthLargestNumber(['47', '36', '10'], 3) == 10\nassert solution.kthLargestNumber(['62'], 1) == 62\nassert solution.kthLargestNumber(['61', '30', '20'], 1) == 61\nassert solution.kthLargestNumber(['92', '80', '73', '71', '63', '54', '44', '37', '31', '25', '17'], 8) == 37\nassert solution.kthLargestNumber(['101', '66', '61', '56', '52', '39', '34', '10', '6', '4'], 6) == 39\nassert solution.kthLargestNumber(['92', '73', '58', '17', '13'], 5) == 13\nassert solution.kthLargestNumber(['32'], 1) == 32\nassert solution.kthLargestNumber(['99', '95', '68'], 2) == 95\nassert solution.kthLargestNumber(['85'], 1) == 85\nassert solution.kthLargestNumber(['97', '43', '43', '38', '36', '36', '18', '7', '3'], 2) == 43\nassert solution.kthLargestNumber(['100', '96', '87', '63', '62', '36'], 6) == 36\nassert solution.kthLargestNumber(['93', '88', '73', '71', '50', '50', '35', '23', '18'], 3) == 73\nassert solution.kthLargestNumber(['100', '90', '79', '47', '43'], 1) == 100\nassert solution.kthLargestNumber(['91'], 1) == 91\nassert solution.kthLargestNumber(['85', '66', '14', '13'], 2) == 66\nassert solution.kthLargestNumber(['85', '83', '81', '60', '59', '54', '46', '37', '28', '10'], 9) == 28\nassert solution.kthLargestNumber(['93', '86', '85', '42', '27'], 1) == 93\nassert solution.kthLargestNumber(['89', '67', '55', '49', '26', '15', '15'], 6) == 15\nassert solution.kthLargestNumber(['95', '92', '66', '60', '60', '49', '41', '36', '31'], 1) == 95\nassert solution.kthLargestNumber(['90'], 1) == 90\nassert solution.kthLargestNumber(['100', '84', '61', '39', '34'], 3) == 61\nassert solution.kthLargestNumber(['94', '84', '83', '57', '39'], 4) == 57\nassert solution.kthLargestNumber(['100', '91', '85', '77', '58', '49', '33', '28', '23', '17'], 4) == 77\nassert solution.kthLargestNumber(['96', '86', '77', '55', '47'], 3) == 77\nassert solution.kthLargestNumber(['97', '77', '18', '16', '9'], 1) == 97\nassert solution.kthLargestNumber(['49', '21'], 2) == 21\nassert solution.kthLargestNumber(['16'], 1) == 16\nassert solution.kthLargestNumber(['24'], 1) == 24\nassert solution.kthLargestNumber(['86', '86', '78', '72', '51', '48', '30', '20', '16'], 1) == 86\nassert solution.kthLargestNumber(['100', '89', '79', '77', '58', '50', '42', '35', '25', '13'], 4) == 77\nassert solution.kthLargestNumber(['91', '78', '60', '33', '26', '21'], 1) == 91\nassert solution.kthLargestNumber(['96', '30', '30', '16'], 1) == 96\nassert solution.kthLargestNumber(['89', '83', '76', '66', '65', '50', '15', '9', '3'], 2) == 83\nassert solution.kthLargestNumber(['74', '62', '35', '12', '8'], 1) == 74\nassert solution.kthLargestNumber(['97', '80', '77', '75', '73', '72', '70', '66', '64', '29', '2'], 2) == 80\nassert solution.kthLargestNumber(['96', '96', '61', '32'], 4) == 32\nassert solution.kthLargestNumber(['82', '55', '41', '24', '22', '9'], 3) == 41\nassert solution.kthLargestNumber(['86', '56', '53', '40', '39', '26'], 4) == 40\nassert solution.kthLargestNumber(['82', '65', '59', '52', '36', '35', '33', '32', '24', '21', '5'], 9) == 24\nassert solution.kthLargestNumber(['85', '66', '59', '26', '19', '18', '10'], 1) == 85\nassert solution.kthLargestNumber(['98', '98', '97', '91', '90', '89', '54', '15', '13'], 6) == 89\nassert solution.kthLargestNumber(['85', '82', '76', '72', '65', '43', '30', '21', '13'], 9) == 13\nassert solution.kthLargestNumber(['99', '94', '92', '85', '79', '73', '71', '69', '39', '26', '25'], 3) == 92\nassert solution.kthLargestNumber(['91', '64', '39', '32', '21'], 3) == 39\nassert solution.kthLargestNumber(['93', '73', '67', '53', '3'], 4) == 53\nassert solution.kthLargestNumber(['95', '86', '73', '68', '26', '25', '3'], 5) == 26\nassert solution.kthLargestNumber(['87', '82', '80', '75', '64', '61', '34', '30', '15', '1'], 10) == 1\nassert solution.kthLargestNumber(['53', '41', '40', '39', '34', '34', '28', '23', '18', '3'], 8) == 23\nassert solution.kthLargestNumber(['88', '86', '81', '78', '68', '66', '57', '33', '18', '10'], 6) == 66\nassert solution.kthLargestNumber(['98', '69', '42', '5'], 1) == 98\nassert solution.kthLargestNumber(['89', '75', '73', '55', '50', '19', '7'], 3) == 73\nassert solution.kthLargestNumber(['100', '76', '69', '68', '62', '58', '49', '27', '13', '6'], 7) == 49\nassert solution.kthLargestNumber(['88', '78', '63', '1'], 1) == 88\nassert solution.kthLargestNumber(['82', '77', '56', '54', '45', '39', '16', '5'], 8) == 5\nassert solution.kthLargestNumber(['79', '78', '58', '42', '41', '39', '4'], 7) == 4\nassert solution.kthLargestNumber(['87'], 1) == 87\nassert solution.kthLargestNumber(['99', '92', '81', '64', '58', '31'], 4) == 64\nassert solution.kthLargestNumber(['99', '98', '97', '85', '71', '29', '19', '18', '6', '4'], 8) == 18\nassert solution.kthLargestNumber(['98', '91', '90', '64', '54'], 4) == 64\nassert solution.kthLargestNumber(['97', '96', '92', '90', '74', '34', '32', '31', '25', '23', '4'], 10) == 23\nassert solution.kthLargestNumber(['88'], 1) == 88\nassert solution.kthLargestNumber(['98', '95', '85', '80', '70', '60', '21', '18', '13', '7'], 10) == 7\nassert solution.kthLargestNumber(['99', '38', '37', '24'], 4) == 24\nassert solution.kthLargestNumber(['100', '72', '65', '62', '54', '45', '16', '7'], 1) == 100\nassert solution.kthLargestNumber(['83', '1'], 1) == 83\nassert solution.kthLargestNumber(['97', '39', '35', '23', '18', '13'], 2) == 39\nassert solution.kthLargestNumber(['89', '82', '71', '31', '13'], 2) == 82\nassert solution.kthLargestNumber(['99', '89', '70', '55', '46', '31', '31', '10', '3'], 2) == 89\nassert solution.kthLargestNumber(['90', '73', '68', '61', '52', '48', '31', '8', '5'], 2) == 73\nassert solution.kthLargestNumber(['91', '73', '52', '47', '43', '26', '24', '13', '7', '4', '2'], 4) == 47\nassert solution.kthLargestNumber(['101', '45', '45', '32', '10', '5', '4'], 7) == 4\nassert solution.kthLargestNumber(['24', '21'], 1) == 24\nassert solution.kthLargestNumber(['88', '62', '59', '44', '26', '22'], 6) == 22\nassert solution.kthLargestNumber(['21'], 1) == 21\nassert solution.kthLargestNumber(['73', '66', '59', '59', '8'], 3) == 59\nassert solution.kthLargestNumber(['101', '74', '47', '42', '33', '28', '22', '21', '17', '7'], 4) == 42\nassert solution.kthLargestNumber(['46', '42'], 2) == 42\nassert solution.kthLargestNumber(['65', '62', '46', '41'], 1) == 65\nassert solution.kthLargestNumber(['93', '81', '58', '58', '51', '21', '20', '17', '15', '8', '6'], 4) == 58\nassert solution.kthLargestNumber(['95', '94', '88', '85', '29', '28', '25'], 4) == 85\nassert solution.kthLargestNumber(['99', '88', '39', '36', '21', '10'], 3) == 39\nassert solution.kthLargestNumber(['97', '85', '78', '76', '26', '7'], 4) == 76\nassert solution.kthLargestNumber(['94', '77', '66', '57', '36'], 4) == 57\nassert solution.kthLargestNumber(['83', '83', '82', '71', '66', '56', '46', '24', '16'], 9) == 16\nassert solution.kthLargestNumber(['65', '58', '52', '21'], 3) == 52\nassert solution.kthLargestNumber(['69', '54', '23', '11', '7'], 2) == 54\nassert solution.kthLargestNumber(['99', '78', '50', '42', '28', '8'], 3) == 50\nassert solution.kthLargestNumber(['101', '89', '68', '67', '57', '50', '40', '20', '18', '11', '5'], 11) == 5\nassert solution.kthLargestNumber(['77', '72', '69', '67', '52', '21', '13'], 4) == 67\nassert solution.kthLargestNumber(['94', '87', '68', '48', '48', '32', '29', '23'], 4) == 48\nassert solution.kthLargestNumber(['90', '75', '60', '40', '39', '28', '23', '20', '16'], 4) == 40\nassert solution.kthLargestNumber(['66', '36'], 1) == 66\nassert solution.kthLargestNumber(['93', '88', '13', '5'], 3) == 13\nassert solution.kthLargestNumber(['30'], 1) == 30\nassert solution.kthLargestNumber(['71', '55'], 1) == 71\nassert solution.kthLargestNumber(['99', '96', '88', '85', '78', '75', '57', '51', '47', '8', '6'], 1) == 99\nassert solution.kthLargestNumber(['53', '35', '13'], 1) == 53\nassert solution.kthLargestNumber(['87', '60', '60'], 2) == 60",
  "inefficient_solution": "class Solution:\n    def kthLargestNumber(self, nums: List[str], k: int) -> str:\n        count = 0\n        for _ in range(len(nums)):\n            for _ in range(len(nums)):\n                if len(nums[_]) != len(nums[_]):\n                    count += 1\n                elif nums[_] > nums[_]:\n                    count += 1\n                    temp = nums[_]\n                    nums[_] = nums[_]\n                    nums[_] = temp\n        return nums[k-1]",
  "is_python": true
}