{
  "problem_idx": 1749,
  "task_name": "Maximum Absolute Sum of Any Subarray",
  "markdown_description": "\nYou are given an integer array `nums`. The **absolute sum** of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`.\n\n\nReturn *the **maximum** absolute sum of any **(possibly empty)** subarray of* `nums`.\n\n\nNote that `abs(x)` is defined as follows:\n\n\n* If `x` is a negative integer, then `abs(x) = -x`.\n* If `x` is a non-negative integer, then `abs(x) = x`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,-3,2,3,-4]\n**Output:** 5\n**Explanation:** The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,-5,1,-4,3,-2]\n**Output:** 8\n**Explanation:** The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-104 <= nums[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxAbsoluteSum(self, nums: List[int]) -> int:\n        f = g = 0\n        ans = 0\n        for x in nums:\n            f = max(f, 0) + x\n            g = min(g, 0) + x\n            ans = max(ans, f, abs(g))\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxAbsoluteSum(self, nums):\n        f = g = 0\n        ans = 0\n        for x in nums:\n            f = max(f, 0) + x\n            g = min(g, 0) + x\n            ans = max(ans, f, abs(g))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-10000, 10001), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxAbsoluteSum(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxAbsoluteSum(nums) == expected_result\n        print(f\"assert solution.maxAbsoluteSum({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxAbsoluteSum({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxAbsoluteSum([-4613, -1851, -9599, -2415, -9057, 488]) == 27535\nassert solution.maxAbsoluteSum([-8650, 6341, 367, 3983, -1003, -3395, 4155]) == 10691\nassert solution.maxAbsoluteSum([-8344, -3868, 9376, 6232, 7156, 5673]) == 28437\nassert solution.maxAbsoluteSum([2933, 1973]) == 4906\nassert solution.maxAbsoluteSum([829, 169, 3329, -9792, -1666, 3629, -3426]) == 11458\nassert solution.maxAbsoluteSum([1080, 5486, 2596, -3070, 8596, -4651, -9741, -265]) == 14688\nassert solution.maxAbsoluteSum([-5682, -8462, -1235]) == 15379\nassert solution.maxAbsoluteSum([7180, -301, -693, -9677, -9424]) == 20095\nassert solution.maxAbsoluteSum([-194, -1154, -3752, 3944, 1055, 7694, 1039]) == 13732\nassert solution.maxAbsoluteSum([-224, 9186, -1706, -3904]) == 9186\nassert solution.maxAbsoluteSum([1157, 5938, -9583, -2466, -6767, 2333]) == 18816\nassert solution.maxAbsoluteSum([-7510, -2720, -4327]) == 14557\nassert solution.maxAbsoluteSum([6646, 7516, 8032, 7400, 4924, 1102, -4163, 1476, -1796, 4286]) == 35620\nassert solution.maxAbsoluteSum([6133, -3188, 655, 9544, -3033, -5589, -3168, -6032, -6689]) == 24511\nassert solution.maxAbsoluteSum([-9188, -4047, -9449, -9910, 4404]) == 32594\nassert solution.maxAbsoluteSum([-4849, -4802, -5372]) == 15023\nassert solution.maxAbsoluteSum([6407, -703, 9807, 6512]) == 22023\nassert solution.maxAbsoluteSum([-3563, -6959]) == 10522\nassert solution.maxAbsoluteSum([3672, -5882, -7424, 1172, -260, -3716, 8716, 4027, -5137]) == 16110\nassert solution.maxAbsoluteSum([-4340, 7727, -38, 3923, -8029]) == 11612\nassert solution.maxAbsoluteSum([8874, -6814, -1529]) == 8874\nassert solution.maxAbsoluteSum([-9971]) == 9971\nassert solution.maxAbsoluteSum([7705, 3319, -4640, -2350, -6625, 8545]) == 13615\nassert solution.maxAbsoluteSum([-8903, -4883, 6972, 7770, -3429, 4652, 6129]) == 22094\nassert solution.maxAbsoluteSum([-7381, 5555, 1327, -3051, -3886, 3043, -2903, -8948, -8782, 9291]) == 25026\nassert solution.maxAbsoluteSum([9200, -1740, -7433, 4603, 5902, -8121, -22]) == 10532\nassert solution.maxAbsoluteSum([2426, -7600, -5875, -1971, -1283, 797, 8718, 6715]) == 16729\nassert solution.maxAbsoluteSum([-4356, -3934, -613, 2392, 1193]) == 8903\nassert solution.maxAbsoluteSum([3649, -6714, 4987]) == 6714\nassert solution.maxAbsoluteSum([8098, -9125, -3615, -8275, -4347, -8139, -4829, -7377, -215]) == 45922\nassert solution.maxAbsoluteSum([2156, -4825, -409, -8430, 1439, 9696, 2149]) == 13664\nassert solution.maxAbsoluteSum([-2058, 7078, 4322]) == 11400\nassert solution.maxAbsoluteSum([-7352, 8208, 6732, 6650]) == 21590\nassert solution.maxAbsoluteSum([7002, -524, -1683, 2180]) == 7002\nassert solution.maxAbsoluteSum([-9588, -6206]) == 15794\nassert solution.maxAbsoluteSum([7784, 3479]) == 11263\nassert solution.maxAbsoluteSum([-3480, -9382, -4381]) == 17243\nassert solution.maxAbsoluteSum([4466, -3912, -9449, 7601]) == 13361\nassert solution.maxAbsoluteSum([-545, 3101, -6400, -3908, 1052, -9170, -8992, -7056]) == 34474\nassert solution.maxAbsoluteSum([1672, 2598, 8612, 2379, 1596, -3887, 9139, -1259]) == 22109\nassert solution.maxAbsoluteSum([1279, -5967, 5049]) == 5967\nassert solution.maxAbsoluteSum([3964, -7705]) == 7705\nassert solution.maxAbsoluteSum([-3152, 8557]) == 8557\nassert solution.maxAbsoluteSum([8189, -9465, 9518, -6538, -4351]) == 10889\nassert solution.maxAbsoluteSum([247]) == 247\nassert solution.maxAbsoluteSum([-900, 2819, 3519, -4787]) == 6338\nassert solution.maxAbsoluteSum([7845, 6803, 8387]) == 23035\nassert solution.maxAbsoluteSum([1601, -6393, 8235]) == 8235\nassert solution.maxAbsoluteSum([-5382, -9575, 6794, -7533, 4486, 5505, 1959, 4579, -9350]) == 16529\nassert solution.maxAbsoluteSum([3720, -8179, -3174, 2096, 8739, -9652, 7770]) == 11353\nassert solution.maxAbsoluteSum([-797, -8091, -6679, 3071, 2132, 8966, -8796, 5699]) == 15567\nassert solution.maxAbsoluteSum([-9799, 1347, 7208, 4494, 6843]) == 19892\nassert solution.maxAbsoluteSum([-9814, 8260, 1226]) == 9814\nassert solution.maxAbsoluteSum([456, -778, -7143, 2311, -2638, 3548, -4628]) == 9328\nassert solution.maxAbsoluteSum([-5879, 4720]) == 5879\nassert solution.maxAbsoluteSum([9322, -8114, 2396]) == 9322\nassert solution.maxAbsoluteSum([1641, 7068, 4551, -9445, -4304, 9234, -1515, 9203, 6703]) == 23625\nassert solution.maxAbsoluteSum([9493, 9804, 6398, -5384, 727, 7908, -4468, 1650, -372]) == 28946\nassert solution.maxAbsoluteSum([7682, -6537, -2004]) == 8541\nassert solution.maxAbsoluteSum([-7037, -1168]) == 8205\nassert solution.maxAbsoluteSum([-5238, -1262, -5868, -2839, 6578, 2510, -2000]) == 15207\nassert solution.maxAbsoluteSum([-6539]) == 6539\nassert solution.maxAbsoluteSum([2371, -349, 6936, 9989, 3075, -3325, -790, -8347, 134, -3393]) == 22022\nassert solution.maxAbsoluteSum([6150, 8128]) == 14278\nassert solution.maxAbsoluteSum([-2197, 2026, -6778, 6856, 9446, -134, 8589, 8925]) == 33682\nassert solution.maxAbsoluteSum([-470, -2795, -5028]) == 8293\nassert solution.maxAbsoluteSum([8645, 6986, -8816, -1345, -4847, 898, -3845]) == 17955\nassert solution.maxAbsoluteSum([1258, 6333, 6279, -2110, 5410, 4671, 3897, 2452, -7112, -7187]) == 28190\nassert solution.maxAbsoluteSum([538, -1718, 9035, -5147, -6189, 3605, 3079]) == 11336\nassert solution.maxAbsoluteSum([8527, 1169, 3064, -1985, 9, -6263]) == 12760\nassert solution.maxAbsoluteSum([1797, 5819, -3950, -3939, -8233, -6997, 1544, 3273, -7231, -2054]) == 27587\nassert solution.maxAbsoluteSum([-1320, 2539, -522, 3260]) == 5277\nassert solution.maxAbsoluteSum([596]) == 596\nassert solution.maxAbsoluteSum([-4830, -3391, 331, 8591, -4013, 9183, 9040, -8619]) == 23132\nassert solution.maxAbsoluteSum([-2648, 3081, 7360, 7789, -6213, 1832, -7665, -7349, -2846, -688]) == 22929\nassert solution.maxAbsoluteSum([-8402, -5556, 9843, -7973, -8558, 5656, 3263]) == 20646\nassert solution.maxAbsoluteSum([-2355, 1132, -1545, 4323, -7870, 7844, -920, -5903]) == 7870\nassert solution.maxAbsoluteSum([-9255, 1179, -5647, -7896, -670, -7426]) == 29715\nassert solution.maxAbsoluteSum([4269, -5742, -4345, -319, -2551, 6670, 1629, -5423, -6320]) == 16401\nassert solution.maxAbsoluteSum([-7421, 71, -4659, 9842, -9092, -9135, -3282, 2327, -648, -1154]) == 23676\nassert solution.maxAbsoluteSum([7527, -8417, -9898, -1599, 3229, 2995]) == 19914\nassert solution.maxAbsoluteSum([1415, -4288, 3708, -2502, -7814, 5113, 1273]) == 10896\nassert solution.maxAbsoluteSum([-3918, -7320, -5]) == 11243\nassert solution.maxAbsoluteSum([-4367, 5364, 8263, 6487, 3140, -9509, 3893, -5051]) == 23254\nassert solution.maxAbsoluteSum([2985, -4399]) == 4399\nassert solution.maxAbsoluteSum([4860, 1572, -8730, -3287, 1715]) == 12017\nassert solution.maxAbsoluteSum([-3771, 1994]) == 3771\nassert solution.maxAbsoluteSum([-1343, 9119, -8023, -3712, -8470, 3119, 1512]) == 20205\nassert solution.maxAbsoluteSum([2480, 240, 56, 6469, 8544, -6646, -1688]) == 17789\nassert solution.maxAbsoluteSum([-825, -4944]) == 5769\nassert solution.maxAbsoluteSum([2286, 815, -1700, -4214, 509, -9392, 2328, 9381, 7411]) == 19120\nassert solution.maxAbsoluteSum([1517, -5464, 442, -549, 1936, 6363]) == 8299\nassert solution.maxAbsoluteSum([-261]) == 261\nassert solution.maxAbsoluteSum([5220, -2775, 3205, -3905, -6942, 9740, 8655, 695, -9928]) == 19090\nassert solution.maxAbsoluteSum([-5795, -6532, 5585, 4228, -4092, -3619, 9384, 2909]) == 14395\nassert solution.maxAbsoluteSum([-1376, -2263]) == 3639\nassert solution.maxAbsoluteSum([4696, -7365, -725, 781, -5280, -5888, -1226, -5784]) == 25487\nassert solution.maxAbsoluteSum([6339, -7727, -1362]) == 9089\nassert solution.maxAbsoluteSum([8074, 8456, 4685, 6077]) == 27292\nassert solution.maxAbsoluteSum([-799, 1373, 2884]) == 4257",
  "inefficient_solution": "class Solution:\n    def maxAbsoluteSum(self, nums):\n        n = len(nums)\n        max_sum = [0] * n\n        min_sum = [0] * n\n        max_abs_sum = [0] * n\n        max_abs = 0\n\n        for i in range(n):\n            for j in range(i, -1, -1):\n                max_sum[i] = max(max_sum[i], max_sum[j] + nums[i]) if j != i else nums[i]\n                min_sum[i] = min(min_sum[i], min_sum[j] + nums[i]) if j != i else nums[i]\n                max_abs_sum[i] = max(max_abs_sum[i], max(max_sum[i], abs(min_sum[i])))\n            max_abs = max(max_abs, max_abs_sum[i])\n        return max_abs",
  "is_python": true
}