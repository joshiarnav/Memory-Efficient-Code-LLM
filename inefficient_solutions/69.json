{
  "problem_idx": 69,
  "task_name": "Sqrt",
  "markdown_description": "\nGiven a non-negative integer `x`, return *the square root of* `x` *rounded down to the nearest integer*. The returned integer should be **non-negative** as well.\n\n\nYou **must not use** any built-in exponent function or operator.\n\n\n* For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 4\n**Output:** 2\n**Explanation:** The square root of 4 is 2, so we return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 8\n**Output:** 2\n**Explanation:** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= x <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        left, right = 0, x\n        while left < right:\n            mid = (left + right + 1) >> 1\n            # mid*mid <= x\n            if mid <= x // mid:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def mySqrt(self, x: int) -> int:\n        left, right = 0, x\n        while left < right:\n            mid = (left + right + 1) >> 1\n            # mid*mid <= x\n            if mid <= x // mid:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random non-negative integer\n    x = random.randint(0, 2**31 - 1)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.mySqrt(x)\n\n    return x, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        x, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.mySqrt(x) == expected_result\n        print(f\"assert solution.mySqrt({x}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.mySqrt({x}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.mySqrt(1183590127) == 34403\nassert solution.mySqrt(614217718) == 24783\nassert solution.mySqrt(250407520) == 15824\nassert solution.mySqrt(1168930359) == 34189\nassert solution.mySqrt(1611111290) == 40138\nassert solution.mySqrt(1350239661) == 36745\nassert solution.mySqrt(1628456674) == 40354\nassert solution.mySqrt(1992105920) == 44633\nassert solution.mySqrt(2136663874) == 46224\nassert solution.mySqrt(1088576031) == 32993\nassert solution.mySqrt(1783567741) == 42232\nassert solution.mySqrt(159250475) == 12619\nassert solution.mySqrt(1576461795) == 39704\nassert solution.mySqrt(137131377) == 11710\nassert solution.mySqrt(420550848) == 20507\nassert solution.mySqrt(1525935975) == 39063\nassert solution.mySqrt(320493364) == 17902\nassert solution.mySqrt(601833634) == 24532\nassert solution.mySqrt(630360980) == 25106\nassert solution.mySqrt(10401807) == 3225\nassert solution.mySqrt(1496628740) == 38686\nassert solution.mySqrt(1733519687) == 41635\nassert solution.mySqrt(381681254) == 19536\nassert solution.mySqrt(636042706) == 25219\nassert solution.mySqrt(1442049424) == 37974\nassert solution.mySqrt(829547011) == 28801\nassert solution.mySqrt(1444148583) == 38001\nassert solution.mySqrt(1737996237) == 41689\nassert solution.mySqrt(1910317693) == 43707\nassert solution.mySqrt(1893701716) == 43516\nassert solution.mySqrt(1209822274) == 34782\nassert solution.mySqrt(89289841) == 9449\nassert solution.mySqrt(1953942011) == 44203\nassert solution.mySqrt(1213740742) == 34838\nassert solution.mySqrt(1633696603) == 40419\nassert solution.mySqrt(1402153062) == 37445\nassert solution.mySqrt(603160732) == 24559\nassert solution.mySqrt(1035304431) == 32176\nassert solution.mySqrt(903772431) == 30062\nassert solution.mySqrt(1135004164) == 33689\nassert solution.mySqrt(1349114178) == 36730\nassert solution.mySqrt(472875554) == 21745\nassert solution.mySqrt(756817771) == 27510\nassert solution.mySqrt(1445100284) == 38014\nassert solution.mySqrt(1842204647) == 42920\nassert solution.mySqrt(170144962) == 13043\nassert solution.mySqrt(1985539448) == 44559\nassert solution.mySqrt(1919925469) == 43816\nassert solution.mySqrt(1302667914) == 36092\nassert solution.mySqrt(1774204938) == 42121\nassert solution.mySqrt(384778583) == 19615\nassert solution.mySqrt(936738235) == 30606\nassert solution.mySqrt(1351629648) == 36764\nassert solution.mySqrt(985581667) == 31393\nassert solution.mySqrt(202744885) == 14238\nassert solution.mySqrt(1151345617) == 33931\nassert solution.mySqrt(560168206) == 23667\nassert solution.mySqrt(1487166834) == 38563\nassert solution.mySqrt(341654557) == 18483\nassert solution.mySqrt(1623902505) == 40297\nassert solution.mySqrt(1093074807) == 33061\nassert solution.mySqrt(1308714980) == 36176\nassert solution.mySqrt(1436250084) == 37897\nassert solution.mySqrt(605968361) == 24616\nassert solution.mySqrt(77703747) == 8814\nassert solution.mySqrt(1390631718) == 37291\nassert solution.mySqrt(498436944) == 22325\nassert solution.mySqrt(86716838) == 9312\nassert solution.mySqrt(1493036524) == 38639\nassert solution.mySqrt(270324403) == 16441\nassert solution.mySqrt(1006742623) == 31729\nassert solution.mySqrt(1548675749) == 39353\nassert solution.mySqrt(2064821221) == 45440\nassert solution.mySqrt(1180922888) == 34364\nassert solution.mySqrt(438922532) == 20950\nassert solution.mySqrt(420966498) == 20517\nassert solution.mySqrt(1179872935) == 34349\nassert solution.mySqrt(358997629) == 18947\nassert solution.mySqrt(1165772933) == 34143\nassert solution.mySqrt(386673635) == 19664\nassert solution.mySqrt(1915889437) == 43770\nassert solution.mySqrt(1193487850) == 34546\nassert solution.mySqrt(276356969) == 16623\nassert solution.mySqrt(1462729143) == 38245\nassert solution.mySqrt(1458872457) == 38195\nassert solution.mySqrt(970781975) == 31157\nassert solution.mySqrt(126475687) == 11246\nassert solution.mySqrt(61213967) == 7823\nassert solution.mySqrt(644859513) == 25394\nassert solution.mySqrt(825271117) == 28727\nassert solution.mySqrt(1740691448) == 41721\nassert solution.mySqrt(698494359) == 26429\nassert solution.mySqrt(1944586200) == 44097\nassert solution.mySqrt(1944051829) == 44091\nassert solution.mySqrt(1074848229) == 32784\nassert solution.mySqrt(1653255891) == 40660\nassert solution.mySqrt(669465594) == 25874\nassert solution.mySqrt(1571549601) == 39642\nassert solution.mySqrt(1207036865) == 34742\nassert solution.mySqrt(494428693) == 22235",
  "inefficient_solution": "class Solution:\n    def mySqrt(self, x: int) -> int:\n        if x == 0 or x == 1:\n            return x\n        sqrt_values = [0] * (x + 1)\n        for i in range(1, x + 1):\n            possible_sqrt = i\n            for j in range(1, i):\n                if j * j > i:\n                    break\n                if j * j == i:\n                    possible_sqrt = j\n                    break\n            sqrt_values[i] = possible_sqrt\n        return sqrt_values[x]",
  "is_python": true
}