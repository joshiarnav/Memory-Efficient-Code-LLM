{
  "problem_idx": 190,
  "task_name": "Reverse Bits",
  "markdown_description": "\nReverse bits of a given 32 bits unsigned integer.\n\n\n**Note:**\n\n\n* Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n* In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 2** above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 00000010100101000001111010011100\n**Output:**    964176192 (00111001011110000010100101000000)\n**Explanation:** The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 11111111111111111111111111111101\n**Output:**   3221225471 (10111111111111111111111111111111)\n**Explanation:** The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The input must be a **binary string** of length `32`\n\n\n\u00a0\n\n\n**Follow up:** If this function is called many times, how would you optimize it?\n\n\n",
  "canonical_solution": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        res = 0\n        for i in range(32):\n            res |= (n & 1) << (31 - i)\n            n >>= 1\n        return res\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random binary string of length 32\n    n = \"{0:032b}\".format(random.getrandbits(32))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reverseBits(int(n, 2))\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reverseBits(int(n, 2)) == expected_result\n        print(f\"assert solution.reverseBits({int(n, 2)}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.reverseBits({int(n, 2)}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.reverseBits(1227314084) == 634053778\nassert solution.reverseBits(2401139130) == 1570666737\nassert solution.reverseBits(2225879845) == 2765894945\nassert solution.reverseBits(156569127) == 3832588944\nassert solution.reverseBits(2744297278) == 2095401413\nassert solution.reverseBits(820988698) == 1490220812\nassert solution.reverseBits(3354404700) == 988024803\nassert solution.reverseBits(2337487018) == 1427950289\nassert solution.reverseBits(510300907) == 3611907704\nassert solution.reverseBits(1265316347) == 3750549202\nassert solution.reverseBits(3846860138) == 1454789287\nassert solution.reverseBits(633212330) == 1437629860\nassert solution.reverseBits(1376269212) == 969674826\nassert solution.reverseBits(2921874764) == 849482869\nassert solution.reverseBits(3665527371) == 3527532123\nassert solution.reverseBits(3013284993) == 2166938061\nassert solution.reverseBits(1099266044) == 1072603522\nassert solution.reverseBits(1397033321) == 2526061258\nassert solution.reverseBits(2702133734) == 1737683077\nassert solution.reverseBits(134529496) == 461578256\nassert solution.reverseBits(3830423359) == 4244238887\nassert solution.reverseBits(3028378800) == 220627245\nassert solution.reverseBits(445366612) == 713281880\nassert solution.reverseBits(2347654651) == 3753539537\nassert solution.reverseBits(897585506) == 1183318444\nassert solution.reverseBits(843113486) == 1881604684\nassert solution.reverseBits(2090565031) == 3854489918\nassert solution.reverseBits(420435107) == 3307925656\nassert solution.reverseBits(2704672479) == 4217400453\nassert solution.reverseBits(1141284778) == 1442406434\nassert solution.reverseBits(1017286854) == 1661551932\nassert solution.reverseBits(2247324266) == 1448005537\nassert solution.reverseBits(2495202004) == 725851433\nassert solution.reverseBits(3431363080) == 273572147\nassert solution.reverseBits(3959700823) == 3938197559\nassert solution.reverseBits(2110605564) == 1058190270\nassert solution.reverseBits(2788365794) == 1202244709\nassert solution.reverseBits(4176796059) == 3650826015\nassert solution.reverseBits(974534994) == 1251764316\nassert solution.reverseBits(2559639508) == 738134297\nassert solution.reverseBits(114051458) == 1100100448\nassert solution.reverseBits(2639383447) == 3922954937\nassert solution.reverseBits(2991776468) == 726092365\nassert solution.reverseBits(2420611669) == 2858017289\nassert solution.reverseBits(686267120) == 257550100\nassert solution.reverseBits(2472130273) == 2272107209\nassert solution.reverseBits(4291232613) == 2797659135\nassert solution.reverseBits(1652925818) == 1587913030\nassert solution.reverseBits(1677326916) == 576692166\nassert solution.reverseBits(2492389703) == 3801837865\nassert solution.reverseBits(3881214538) == 1380281063\nassert solution.reverseBits(3982725287) == 3842623159\nassert solution.reverseBits(72859735) == 3926125088\nassert solution.reverseBits(2752412239) == 4066275365\nassert solution.reverseBits(2779350792) == 283219365\nassert solution.reverseBits(3362801679) == 4027715091\nassert solution.reverseBits(1866585193) == 2519433974\nassert solution.reverseBits(3383600940) == 887469459\nassert solution.reverseBits(4212306840) == 432883935\nassert solution.reverseBits(3414030583) == 4011835091\nassert solution.reverseBits(1504376770) == 1139758490\nassert solution.reverseBits(3252278522) == 1596693379\nassert solution.reverseBits(2845124049) == 2342824341\nassert solution.reverseBits(1548023825) == 2283741754\nassert solution.reverseBits(2107804404) == 793855422\nassert solution.reverseBits(1457114336) == 120822634\nassert solution.reverseBits(383221956) == 587328360\nassert solution.reverseBits(1838752060) == 1015323062\nassert solution.reverseBits(2850993461) == 2897049493\nassert solution.reverseBits(1210332404) == 791421970\nassert solution.reverseBits(1767096678) == 1719913110\nassert solution.reverseBits(2558563105) == 2227765529\nassert solution.reverseBits(2063661800) == 392102110\nassert solution.reverseBits(4057738520) == 414464911\nassert solution.reverseBits(1156868988) == 1054224162\nassert solution.reverseBits(3691199136) == 89964603\nassert solution.reverseBits(2726015956) == 734912069\nassert solution.reverseBits(3402791811) == 3252570963\nassert solution.reverseBits(1317111313) == 2288091506\nassert solution.reverseBits(2050383791) == 4126829662\nassert solution.reverseBits(105050244) == 554648160\nassert solution.reverseBits(1259849647) == 4125354194\nassert solution.reverseBits(3314905290) == 1393469859\nassert solution.reverseBits(2732072610) == 1165499205\nassert solution.reverseBits(2451376171) == 3557865545\nassert solution.reverseBits(1632001393) == 2394579590\nassert solution.reverseBits(450950924) == 820971352\nassert solution.reverseBits(3369016928) == 108589843\nassert solution.reverseBits(2134837441) == 2198928638\nassert solution.reverseBits(3715340994) == 1129959099\nassert solution.reverseBits(1431326106) == 1504840362\nassert solution.reverseBits(1115901321) == 2444411202\nassert solution.reverseBits(3178571572) == 753184445\nassert solution.reverseBits(126926072) == 524093920\nassert solution.reverseBits(142473907) == 3445603856\nassert solution.reverseBits(4268062614) == 1777247871\nassert solution.reverseBits(2253781473) == 2275388001\nassert solution.reverseBits(275206219) == 3523929608\nassert solution.reverseBits(765055763) == 3368786356\nassert solution.reverseBits(2913579559) == 3830289845",
  "inefficient_solution": "class Solution:\n    def reverseBits(self, n: int) -> int:\n        res = [0] * 33\n        for i in range(32):\n            bit = (n & 1)\n            res[i] = bit\n            n = n >> 1\n        for i in range(32):\n            res[i + 1] = res[i] << (31 - i)\n        res = [x for x in res if x != 0]\n        result = 0\n        for num in res:\n            result |= num\n        return result",
  "is_python": true
}