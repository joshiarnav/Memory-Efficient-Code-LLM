{
  "problem_idx": 452,
  "task_name": "Minimum Number of Arrows to Burst Balloons",
  "markdown_description": "\nThere are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates of the balloons.\n\n\nArrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n\n\nGiven the array `points`, return *the **minimum** number of arrows that must be shot to burst all balloons*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** points = [[10,16],[2,8],[1,6],[7,12]]\n**Output:** 2\n**Explanation:** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** points = [[1,2],[3,4],[5,6],[7,8]]\n**Output:** 4\n**Explanation:** One arrow needs to be shot for each balloon for a total of 4 arrows.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** points = [[1,2],[2,3],[3,4],[4,5]]\n**Output:** 2\n**Explanation:** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= points.length <= 105`\n* `points[i].length == 2`\n* `-231 <= xstart < xend <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        ans, last = 0, -inf\n        for a, b in sorted(points, key=lambda x: x[1]):\n            if a > last:\n                ans += 1\n                last = b\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        ans, last = 0, float('-inf')\n        for a, b in sorted(points, key=lambda x: x[1]):\n            if a > last:\n                ans += 1\n                last = b\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random points list\n    points = []\n    for _ in range(random.randint(1, 100)):\n        x_start = random.randint(-1000, 1000)\n        x_end = random.randint(x_start, 1000)\n        points.append([x_start, x_end])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMinArrowShots(points)\n\n    return points, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        points, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMinArrowShots(points) == expected_result\n\n        formatted_points = '['\n        for point in points:\n            formatted_point = f'[{point[0]}, {point[1]}], '\n            formatted_points += formatted_point\n        formatted_points = formatted_points.rstrip(', ')\n        formatted_points += ']'\n        \n        formatted_result = f'assert solution.findMinArrowShots({formatted_points}) == {expected_result}'\n        print(formatted_result)\n        test_case_generator_results.append(formatted_result)\n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMinArrowShots([[528, 578], [505, 884], [956, 999], [-487, -158], [898, 916], [649, 932], [-229, 34], [580, 791], [173, 480], [207, 453], [557, 637], [-394, -163], [764, 828], [-352, -272], [-55, 520], [410, 819], [330, 946], [257, 503], [-612, 723], [534, 835], [605, 617], [-53, 979], [420, 984], [-511, 136], [696, 793], [745, 791], [-51, 481], [135, 165], [-581, 231], [111, 584], [387, 550], [40, 986], [-458, -448], [-244, 276], [-16, 969], [569, 754], [-742, -535], [413, 417], [-302, 105], [-680, 931], [565, 797], [353, 805], [-302, -182], [147, 512], [-300, 656], [454, 903], [503, 608], [-51, 492], [297, 343], [846, 944], [-967, 706], [-473, 51], [-963, 301], [-107, 160], [339, 436], [-984, 813], [-598, -405], [310, 868], [-448, 864], [-90, 317], [103, 445], [-418, 227], [-762, 187], [986, 986], [26, 318], [-555, -519], [112, 964], [229, 279], [362, 662]]) == 13\nassert solution.findMinArrowShots([[665, 682], [-988, -590], [-831, 130], [409, 980], [-115, 335], [380, 898], [129, 734], [444, 998], [-92, -19], [-851, 311], [-178, 685], [898, 989], [-498, 647], [273, 539], [-683, 696], [-304, 650], [514, 830], [-63, 303], [597, 666], [-448, -130], [961, 990], [546, 614], [215, 286], [720, 731], [-707, 56], [62, 810], [-783, -33], [784, 930], [480, 880], [139, 299], [-361, 880], [-15, 334], [990, 990], [490, 597], [676, 788], [-624, -181], [277, 424], [609, 642], [-857, 6], [-643, 872], [-483, 6], [718, 952], [957, 996], [-500, 873], [599, 766], [863, 986], [-114, 574], [-181, 765], [-313, 700], [447, 458], [912, 929], [-667, 662], [539, 671], [685, 935], [978, 986], [-853, 85], [80, 683], [317, 527], [805, 854], [-484, 106], [-394, -223], [803, 998], [857, 944], [-480, 353], [-62, 36], [150, 317], [-93, 612], [782, 998], [-336, 598], [310, 976], [508, 908], [510, 775], [-420, 821], [32, 739], [701, 809], [-470, 492]]) == 13\nassert solution.findMinArrowShots([[-446, 352], [-41, 86], [810, 909], [648, 697], [8, 632], [-654, -176], [802, 876], [-936, -415], [-945, 32], [423, 831], [-363, -325], [977, 985], [734, 867], [-623, 994], [487, 714], [999, 1000], [898, 907], [822, 956], [-150, 940], [526, 927], [497, 634], [-208, 855], [-16, 320], [88, 395], [306, 996], [-116, -94], [503, 616], [710, 926], [-916, 127], [-751, 313], [-594, 333], [503, 966], [562, 967], [-379, 669], [-236, 323], [211, 713], [366, 472], [630, 915], [808, 815], [61, 754], [-155, 243], [730, 883], [-803, 771], [549, 591], [-483, 40], [-518, 800], [716, 770], [-808, 383], [-56, 66], [605, 890], [-116, 986], [16, 850], [504, 585], [965, 980], [-805, 419]]) == 12\nassert solution.findMinArrowShots([[-439, 678], [-228, 362], [-78, 443], [-654, 865], [587, 792], [147, 573], [670, 874], [-807, 52], [79, 349], [865, 905], [-525, -72], [-16, 806], [-282, 529], [-555, -214], [-925, 619], [-572, 813], [-973, 228], [952, 962], [279, 510], [898, 952], [235, 969], [-514, -490], [149, 881], [79, 213], [-498, 148], [-698, -563], [-801, -286], [-922, -532], [674, 888], [21, 398], [506, 659], [-993, -858], [765, 805], [546, 761], [665, 873], [46, 622], [-256, -106], [-454, 822], [-251, 474], [-206, 414], [559, 821], [811, 994]]) == 10\nassert solution.findMinArrowShots([[-398, 805], [546, 859], [718, 826], [-137, 802], [-602, -494], [-706, -516], [387, 678], [-516, 208], [531, 937], [-66, -4], [781, 995], [-270, 493], [421, 909], [657, 842], [-248, 852], [248, 867], [-628, 43], [530, 863], [-618, -207], [159, 725], [609, 761], [-318, 200], [67, 593], [492, 534], [-43, 164], [607, 741], [-100, 873], [-382, 339], [653, 935], [-924, 223], [-798, 423], [582, 955], [923, 974], [173, 524], [-731, 230], [-473, 990], [283, 479]]) == 6\nassert solution.findMinArrowShots([[-984, -252], [150, 691], [727, 935], [577, 599], [19, 184], [363, 772], [-758, 816], [-782, -351], [386, 777], [-998, 88], [-919, 771], [-761, -673], [200, 513], [52, 581], [-281, -69], [-281, 305], [614, 641], [466, 849], [-161, 545], [251, 735], [885, 891], [265, 584], [-608, 434], [83, 88], [-303, 288], [262, 601], [374, 588], [939, 941], [529, 846], [133, 272], [-163, 339], [464, 937], [-491, 2], [-828, -200], [785, 818], [49, 970], [814, 885], [-732, 814], [501, 597], [-190, 914], [-854, 53], [-534, 383], [251, 366], [-617, 750], [278, 562], [658, 921], [387, 572], [285, 821]]) == 10\nassert solution.findMinArrowShots([[-93, 627], [-321, 682], [-370, 986], [639, 859], [983, 989], [-656, 248], [-604, 408], [-417, 351], [-675, 827], [117, 822], [636, 821], [215, 695], [605, 923], [838, 948], [684, 902], [821, 898], [-853, 646], [190, 492], [-789, 794], [222, 691], [-491, -486], [296, 589], [719, 721], [420, 470], [689, 739], [-341, 82], [-627, 201], [44, 123], [-225, 660], [472, 817], [110, 626], [848, 875], [-736, 740], [-566, -370], [424, 989], [-551, 812], [-962, 859], [685, 864], [511, 799], [977, 982], [554, 893], [-626, 233], [221, 576], [-63, 796], [-224, 292], [202, 250], [773, 949], [661, 973], [-347, -312], [-571, -261], [-373, 109], [430, 603], [147, 816], [182, 679], [450, 580], [189, 474], [-646, -493], [570, 731], [-819, -595], [893, 934], [-713, -315], [456, 925], [197, 735], [652, 831], [978, 980], [905, 981], [-831, 499], [19, 330], [176, 947], [345, 998], [-311, 928], [-452, 384], [717, 853], [694, 894], [999, 999], [-352, 596], [753, 755], [246, 248], [346, 979], [835, 979], [-329, 522], [559, 726], [-337, -165], [-700, 847], [543, 822], [119, 265], [-682, -623], [-164, 44], [712, 834], [897, 902], [-222, 33], [76, 109], [508, 988], [405, 865], [-440, 308], [-437, 353], [-968, -711], [-311, 194], [22, 269]]) == 15\nassert solution.findMinArrowShots([[132, 648], [-343, 528], [-998, -887], [-548, 938], [-235, -102], [-844, 330], [-610, 221], [-750, -535], [348, 798], [838, 847], [801, 902], [-616, 358], [-762, 580], [831, 928], [104, 137], [259, 801], [-689, 522], [-578, -285], [-394, 889], [949, 978], [-276, 717], [409, 890], [-328, 172], [-440, 403], [726, 926], [201, 466], [535, 933], [997, 999], [250, 502], [530, 753], [-283, -15], [377, 991], [474, 853], [-376, 579], [-816, 564], [-1000, -994], [548, 727], [-958, -622], [305, 951], [-451, 777], [-985, -225], [552, 830], [-957, -179], [-228, 623], [255, 973], [881, 970], [-246, 404], [-952, -690], [-395, -208], [-94, 94], [-959, 810], [337, 851], [727, 817], [927, 963], [-938, 108], [361, 796], [5, 6], [-123, 506], [559, 785], [154, 406], [-739, -448], [-534, 813], [-889, 844], [-937, -602], [-104, 582], [-677, 769], [-924, 351], [808, 861], [294, 581], [486, 797], [857, 916], [-337, 444], [-343, 583], [287, 580], [337, 512], [581, 644], [-245, -117], [-122, 896]]) == 13\nassert solution.findMinArrowShots([[352, 477], [-786, -106], [-306, -12], [951, 989], [-914, -266], [251, 818], [152, 826], [-882, 956], [-556, 807], [835, 998], [-953, 846], [731, 911], [-539, -272], [435, 587], [739, 806], [926, 929], [171, 560], [-944, -511], [708, 756], [-190, -116], [499, 883], [106, 932], [599, 816], [406, 584], [-595, 957], [-886, 686], [-703, 798], [632, 940], [-819, 915], [-434, -44], [439, 770], [414, 665], [464, 543], [-399, 382], [-339, 534], [-528, 832], [670, 933], [-577, -18], [-955, -21], [509, 927], [-937, 368], [-479, -458], [-264, -262], [-772, -502], [-420, -331], [936, 957], [629, 996], [-947, -612], [-768, 165], [-154, 576], [-949, -345], [-112, 14], [617, 722], [683, 985], [-516, -464], [-762, -537], [442, 912], [411, 491], [679, 761], [-599, 243], [329, 507], [644, 986], [-112, 863], [-181, 363], [-649, -283], [-42, 322], [-226, 253], [615, 767], [-695, 358], [-744, -156], [713, 904], [525, 778], [626, 810], [143, 232], [949, 957], [18, 394], [-587, 885], [-246, -157], [-431, 491], [704, 931], [914, 998], [681, 791], [21, 324], [537, 974], [-136, 150], [-213, -15], [-377, 8], [750, 957], [-907, -577], [280, 506], [-152, -150], [-319, 351], [418, 860], [333, 522], [554, 970], [-70, 252], [-555, 651], [-476, -58]]) == 13\nassert solution.findMinArrowShots([[671, 742], [329, 682], [92, 810], [533, 910], [-529, 769], [-880, 479], [682, 787], [302, 1000], [-849, 585], [-31, 973], [-948, -558], [-682, -195], [-846, 232], [612, 677], [-901, -206], [-958, 247], [-291, 102], [270, 429], [-99, 24], [426, 515], [689, 935], [-937, 980], [505, 883], [-50, 938], [-53, 116], [-784, 344], [-625, 936], [854, 987], [18, 931], [23, 517], [-924, 633], [729, 935], [441, 970], [277, 869], [-938, 796], [115, 654], [-977, 557], [755, 822], [-913, 942], [-341, 401], [54, 220], [-937, 98], [-374, 375], [-92, 182], [809, 946], [-758, 153], [-251, 791], [-979, 231], [-98, 782], [-278, -43], [-483, 962], [479, 839], [-941, 324], [270, 629], [-245, 195], [243, 562], [-676, -484]]) == 7\nassert solution.findMinArrowShots([[-378, 869], [28, 994], [-393, 253], [-777, -473], [772, 925], [985, 987], [-383, -109], [987, 990], [848, 956], [-556, 573], [840, 923], [610, 657], [-417, 163], [-209, 647], [-819, 459], [-650, -554], [617, 787], [846, 983], [-233, 532], [169, 572], [-646, 715], [-792, -716], [-393, -19], [34, 448], [414, 835], [91, 91], [808, 815], [-710, -512]]) == 9\nassert solution.findMinArrowShots([[304, 432], [-749, -531], [-654, 62], [-242, 361], [769, 994], [99, 524], [-347, 775], [626, 847], [-310, 750], [206, 899], [301, 495], [-295, -213], [-705, 642], [-396, -182], [-74, 205], [663, 670], [820, 976], [-70, 401], [-809, 833], [-69, 71], [-279, -205], [-764, -555], [171, 317], [37, 850], [-487, -66], [-119, 606], [966, 994], [-224, 425], [845, 964], [-48, 784], [432, 522], [225, 702], [-342, 37], [81, 833], [760, 772], [-490, 479], [-966, 37], [263, 270], [-215, 81], [18, 493], [-950, 670], [816, 982], [-403, 130], [-940, 850], [695, 774], [-401, 122], [929, 954], [717, 995], [-979, -498], [-750, 962], [459, 549], [-154, 683], [-797, -750], [849, 924], [454, 773], [276, 619], [-972, 840], [517, 813], [-25, 350], [-911, -455], [117, 711], [-456, 445], [347, 571], [-106, 767], [702, 929], [-91, 992], [-235, 231], [468, 713], [811, 968], [511, 914], [346, 688], [-296, 486], [-328, -235], [152, 763], [-45, 311], [-324, -39], [-681, 46], [342, 556], [-279, 817], [-733, 180], [-223, -90], [364, 851], [-383, 270], [26, 683], [-340, 40], [246, 584], [-644, -302]]) == 13\nassert solution.findMinArrowShots([[-742, -554], [-844, 941], [-272, -16], [844, 974], [-20, 72], [-887, -776], [859, 938], [-873, 318], [249, 504], [-573, 867], [863, 962], [637, 870], [987, 996], [-192, 140], [-730, -692], [-979, 874], [-547, 832], [-75, 30], [487, 607], [306, 743], [-498, -46], [-203, 885], [-814, 272], [801, 831], [-274, 358], [317, 500], [411, 955], [410, 612], [258, 400], [930, 993], [326, 660], [233, 944], [548, 641], [343, 839], [570, 666], [118, 561], [704, 967], [235, 296], [814, 842], [229, 803], [133, 430], [267, 388], [342, 717], [-381, -231], [-335, 781], [-773, 521], [749, 772], [-769, -221], [-308, 159], [-491, 511], [-83, 842], [627, 809], [-403, 224], [374, 716], [108, 910], [824, 827], [-684, -624], [231, 505], [122, 750], [-96, 613], [257, 354], [-500, 843], [-899, -378], [-351, 680], [727, 880], [-935, -888], [60, 379], [-991, -774], [-400, 556], [385, 801], [15, 843], [-590, 729], [-737, -113], [-650, 641], [263, 487], [-194, 21], [-272, 215], [-497, 305], [-219, 821], [-23, 951], [-340, -164], [-759, -607], [-803, -183], [417, 559], [465, 835], [527, 563], [-519, -212], [384, 877], [-184, 92], [-529, 67], [929, 934], [265, 948], [128, 209], [473, 944]]) == 15\nassert solution.findMinArrowShots([[362, 768], [-240, 782], [-33, 989], [434, 651], [-645, -251], [-288, 92], [-424, -114], [643, 766], [56, 732], [-9, 778], [672, 999], [588, 675], [-326, 432], [74, 500], [-836, -614], [-241, 15], [-143, 122], [449, 572], [-999, 651], [-607, -445], [897, 933], [-968, -696], [677, 693], [-925, 586], [94, 951], [680, 802], [-464, -108], [-447, -362], [-360, 497], [977, 998], [577, 670], [759, 766], [364, 891], [437, 868], [-11, 593], [778, 849], [761, 817], [195, 402], [-662, -396], [-370, 259], [-237, 936], [998, 998], [498, 822], [-928, 846], [-268, 661], [-64, 929], [-887, -783], [800, 936], [784, 834], [100, 564], [-341, 334], [-60, 231], [-72, 614], [-223, 362], [-137, 717], [-295, 676], [330, 923], [-69, 698], [549, 619], [-701, 940], [-233, 70], [122, 923], [-671, 329], [317, 473], [661, 968], [-402, 96], [-948, -318], [-61, 294], [-728, 282], [42, 322], [-736, 699], [919, 989], [-967, 708], [372, 644], [361, 920], [9, 915], [-698, 611], [-563, -311], [529, 646]]) == 11\nassert solution.findMinArrowShots([[-512, 987], [-57, 764], [-987, -395], [792, 897], [-341, 474], [-60, 937], [685, 958], [795, 887], [429, 823], [709, 815], [255, 822], [968, 968], [41, 787], [-989, 988], [-291, 876], [-127, 444], [194, 941], [-653, 23], [-199, 843], [-91, 395], [-987, -709], [46, 829], [-632, 303], [43, 327], [-427, 886], [332, 912], [-603, 385], [11, 295], [210, 705], [801, 915], [355, 402], [137, 512], [-584, -181], [-468, -440], [-350, -88], [-516, 189], [564, 722], [-97, 763], [-745, 362], [902, 906], [585, 996], [-5, 351], [80, 814], [-401, -212], [-763, 235], [349, 774], [113, 192], [365, 764], [328, 401], [-988, 434], [621, 901], [-278, 816], [673, 785], [-627, 568], [-276, 53], [-125, 606], [970, 998], [263, 414], [-586, 277], [-106, 49], [69, 146], [-497, 364], [246, 563], [637, 933], [-368, 3], [-927, 487], [370, 923], [72, 103], [205, 585], [900, 980], [-999, -767], [280, 430], [-150, -149], [-228, 68], [104, 259], [874, 968], [-849, -225], [-49, 870], [-262, 972], [-814, -495], [-323, -36], [720, 791], [-497, -252], [-549, -338], [717, 968], [658, 975], [191, 985], [-475, 223], [597, 720], [-940, 134], [423, 517], [-186, 918], [871, 927], [-765, 721]]) == 14\nassert solution.findMinArrowShots([[28, 65], [212, 840], [-527, 125], [-955, 153], [-849, 781], [742, 874], [679, 731], [-808, 340], [489, 876], [984, 992], [-941, -286], [795, 835], [974, 985], [-662, -466], [836, 878], [-500, -372], [-823, 384], [-983, 85], [81, 147], [497, 734], [-151, 986], [-934, 643], [-23, 778], [-766, 5], [232, 653], [899, 987], [-659, -540], [-408, 757], [306, 919], [-720, -481], [386, 727], [500, 709], [830, 930], [49, 680], [-482, -415], [-650, 440], [826, 868], [-98, 344], [-397, 988], [357, 647], [554, 941], [972, 978], [-666, -197], [-495, 983], [-62, 45], [41, 377], [70, 936], [-505, 657], [603, 731], [316, 874], [-831, 65], [-261, 961], [-9, 899], [-333, 608], [843, 860], [-360, -185], [-96, 656], [-878, -479], [773, 809], [155, 433], [-148, 110], [581, 711], [873, 962]]) == 12\nassert solution.findMinArrowShots([[299, 977], [-564, -535], [-349, 177], [986, 998], [-875, 726], [-512, 613], [482, 588], [-556, 674], [-368, 4], [201, 405]]) == 5\nassert solution.findMinArrowShots([[454, 552], [-605, 640], [-718, -150], [-301, 15], [93, 781], [-679, 862], [132, 256], [-113, 874], [146, 217], [171, 441], [-621, 114], [532, 567], [-916, -243], [537, 871], [-380, -215], [248, 331], [515, 676], [-607, 52], [250, 397], [58, 160], [-1000, 818], [725, 773]]) == 5\nassert solution.findMinArrowShots([[-30, 756], [-201, 459], [-813, -680], [-21, 16], [51, 966], [-26, 173], [-37, 129], [-518, 675], [-968, 166], [-142, -104], [-571, -488], [-349, -81], [403, 607], [-653, -97], [-631, -379], [164, 909], [-109, 204], [-372, 829], [974, 975], [677, 785], [784, 945], [-595, -5], [890, 950], [630, 637], [-22, 435], [856, 881], [2, 178], [-344, -291], [-29, 19], [475, 688], [211, 588], [561, 738], [-590, -374], [-678, 270], [-140, 415], [732, 919], [-418, 149], [-710, 885], [-56, 115], [-156, 891], [-328, 62]]) == 11\nassert solution.findMinArrowShots([[741, 799], [-219, -148], [206, 594], [-366, 247], [926, 977], [-655, 19], [-387, -84], [510, 525], [415, 697], [502, 627], [866, 911], [-161, -9], [-826, 932], [452, 939], [658, 897], [-483, 135], [862, 943], [147, 962], [397, 864], [176, 209], [-569, 988], [-482, -462], [980, 996], [-210, 272], [679, 872], [-701, 590], [-983, -340], [335, 531], [877, 932], [453, 641], [297, 949], [-537, 569], [191, 762], [69, 231], [669, 963], [-352, -7], [-766, 429], [-515, 698], [-351, 392], [832, 880], [444, 816], [330, 945], [546, 824], [874, 961], [857, 871], [739, 746], [748, 937], [201, 473], [-837, 451], [-761, 921], [507, 945], [713, 859], [684, 791], [-396, 439], [189, 384], [-427, 772], [-26, 186], [752, 848], [729, 865], [167, 286], [745, 818], [-671, 974], [-48, 911], [724, 818], [581, 813], [-679, -132], [-204, 45], [-507, 286], [-957, -957]]) == 11\nassert solution.findMinArrowShots([[-827, -441], [426, 495], [-239, 288], [-703, -697], [-567, 983], [-446, 981], [-856, -615], [200, 391], [-937, -701], [-36, 404], [18, 189], [627, 750], [-416, 602], [515, 972], [744, 993], [-325, 759], [-109, 100], [80, 839], [-518, 484], [-768, -58], [-864, 820], [-29, 540], [-82, 387], [629, 994], [-462, -239], [875, 982], [253, 690], [-992, 317], [521, 799], [-117, 869], [234, 334], [894, 905], [-540, -409], [-225, 702], [-688, 529], [372, 933], [190, 280], [-415, 437], [636, 981], [493, 603], [-185, 42], [131, 203], [705, 869], [-276, 187], [942, 961], [382, 555], [629, 998], [-152, 866], [-896, -837], [345, 561], [656, 807], [-807, -239], [-55, 930], [852, 996], [-135, 426], [-730, 129], [943, 975], [-851, -51], [515, 877]]) == 10\nassert solution.findMinArrowShots([[714, 984], [125, 842], [666, 908], [-839, 869], [537, 814], [-523, 158], [-347, -94], [281, 801], [-301, 104], [881, 973], [-861, -195], [795, 894], [-355, 249], [865, 996], [-686, 265], [-717, 487], [943, 967], [616, 794], [585, 900], [-136, 135], [518, 817], [169, 190], [48, 1000], [636, 836], [70, 670], [-709, -417], [-20, 319], [-878, -877], [944, 973], [383, 749], [-867, -162], [-381, 109], [-447, 443], [-349, -119], [111, 694], [723, 757], [616, 691], [-541, 675]]) == 8\nassert solution.findMinArrowShots([[-870, 754], [646, 927], [828, 927], [208, 465], [482, 779], [-807, 37], [-664, -259], [-771, 966], [-596, -517], [-37, 887], [66, 502], [633, 835], [-211, 433], [701, 821], [-464, -455], [-479, -354], [-40, 862], [451, 944], [-249, 941], [-76, 9], [-742, -415], [-211, 480], [-16, 85], [972, 993], [-581, 671], [-478, 280], [58, 176], [-667, -285], [-634, -491], [437, 553], [-121, 923], [-407, 488]]) == 8\nassert solution.findMinArrowShots([[-640, 840], [-467, -329], [-913, -532], [968, 973], [-596, -295], [-655, -338], [795, 978], [705, 889], [-946, -493], [-724, -607], [-3, 348], [-501, -79], [496, 752], [-290, -186], [125, 322], [-657, -654], [407, 457], [-743, -427], [417, 813], [-167, 981], [439, 845], [618, 821], [612, 917], [-963, 579], [-236, 830], [-684, 982], [-719, 791], [-2, 778], [611, 903], [332, 691], [-958, -33], [-516, 569], [-507, 35], [-459, -275], [-179, -16], [661, 967], [-427, 230], [-930, -790], [-507, 380], [284, 355], [517, 612], [-623, 150]]) == 10\nassert solution.findMinArrowShots([[-684, 704], [-436, 652], [-93, -21], [-386, 42], [-75, 957], [742, 955], [-585, 731], [271, 342], [979, 987], [-649, -388], [889, 925], [-994, -484], [828, 946], [-813, 974], [802, 815], [648, 746], [-573, -172], [-947, 243], [699, 960], [-668, -53], [-627, 962], [-233, 420], [-91, 445], [-749, -166], [4, 526], [-559, -513], [-154, 517], [-841, -672], [-202, 275], [466, 793], [587, 925], [-918, 368], [-503, 459], [215, 538], [194, 543], [640, 866], [-20, 441], [347, 359], [-24, 149], [-555, 507], [-986, 983]]) == 9\nassert solution.findMinArrowShots([[75, 184], [434, 808], [910, 924], [-688, 266], [-131, 928], [-444, 218], [985, 1000], [301, 363], [-228, 22], [813, 841], [-290, 944], [624, 651], [630, 851], [231, 485], [258, 379], [228, 591], [-853, 729], [-13, 833], [179, 905], [-147, 989], [782, 891], [-67, 753], [-9, 544], [865, 908], [427, 830], [-741, 28], [298, 392], [-957, -860], [-942, -766], [674, 954], [969, 1000], [770, 934], [-898, -197], [-834, -611], [926, 985], [570, 716], [789, 830], [235, 507], [-578, -180], [817, 819], [257, 275], [-93, -6], [-683, 619], [-956, 632], [-436, 8], [-480, 895], [-472, -171], [-892, 884], [145, 328], [4, 602], [612, 970], [-100, 40], [-308, 907], [-159, 63], [154, 615]]) == 12\nassert solution.findMinArrowShots([[790, 862], [963, 998], [-277, 114], [-882, 591], [65, 553], [-315, 832], [79, 828], [205, 241], [-473, 310], [909, 946], [527, 861], [201, 552], [865, 973], [-708, 809], [877, 935], [140, 1000], [906, 924], [-50, 495], [148, 814], [-482, -268], [-753, 530], [-695, 146], [140, 984], [-156, 424], [450, 841], [-589, 968], [-16, 742], [-708, 514]]) == 5\nassert solution.findMinArrowShots([[961, 961], [-699, -90], [4, 190], [178, 978], [51, 982], [80, 227], [508, 854], [99, 835], [-395, 501], [-697, 227], [-689, 871], [66, 111], [-264, -138], [766, 984], [752, 876], [-811, 96], [-569, 512], [825, 867], [900, 946], [-380, 114], [730, 844], [-461, 101], [193, 213], [740, 781], [-598, 836], [620, 860], [-33, 600], [-426, 597], [-440, 378], [981, 995], [894, 973], [841, 872], [414, 429], [-458, 241], [51, 727], [-316, -107], [648, 901], [558, 604], [841, 946], [-156, 420], [741, 921]]) == 10\nassert solution.findMinArrowShots([[201, 354], [-321, 308], [586, 760], [552, 894], [111, 847], [-348, 576], [-612, -44], [-509, 927], [746, 948], [710, 840], [-701, -621], [894, 962], [689, 966], [-229, 120], [894, 915], [-410, 28], [-522, 412], [-593, 737], [601, 936], [-121, 443], [346, 905], [669, 756], [837, 890], [631, 691], [265, 335], [-901, 818], [-211, -85], [959, 997], [-809, 869], [275, 891], [-829, 60], [959, 990], [606, 763], [-209, 721], [-180, 755], [896, 922], [-537, -141], [-231, 519], [539, 773], [770, 833], [-496, -169], [-459, 845]]) == 8\nassert solution.findMinArrowShots([[980, 980], [-152, 9], [-464, 547], [453, 845], [146, 737], [410, 572], [799, 901], [-963, 295], [911, 959], [921, 941], [-17, 918], [-24, 395], [-67, 966], [270, 585], [256, 535], [960, 972], [-706, 721], [744, 949], [-950, 899], [989, 996], [659, 983], [34, 526]]) == 7\nassert solution.findMinArrowShots([[537, 694], [-551, -506], [710, 976], [-347, 994], [-899, -564], [402, 946], [-922, -539], [-192, 791], [-201, 494], [-189, 778], [-354, -351], [334, 704], [242, 767], [505, 708], [244, 254], [50, 391], [-101, 662], [757, 918], [191, 290], [72, 212], [296, 328], [861, 876], [510, 999]]) == 8\nassert solution.findMinArrowShots([[279, 463], [758, 983], [-162, 302], [-597, -50], [689, 722], [-344, 580], [500, 722], [582, 700], [-386, 375], [-537, 637], [250, 802], [767, 938], [-374, 777], [107, 939], [922, 991], [294, 718], [415, 484], [-746, -137], [-447, -231], [286, 324], [-898, 848], [-422, 684], [970, 978], [271, 739], [762, 910], [-555, 601], [-757, 750], [-1000, 837], [-837, 692], [227, 486], [24, 511], [571, 951], [-28, 602], [-999, -11], [-433, 872], [-977, -931], [-228, 513], [-629, 938], [297, 642], [-772, 275], [487, 869], [524, 748], [217, 692], [441, 481], [628, 699], [594, 964], [-374, 268], [356, 973], [877, 930], [676, 858], [-130, 540], [-461, -280], [289, 687], [-437, 790], [5, 164], [277, 476], [-993, -224], [170, 300], [943, 994], [512, 947], [-611, 676], [-235, 250], [258, 285], [-761, -590], [-436, 406], [375, 921], [-686, -392], [79, 161], [211, 256], [536, 947], [-825, 552], [-447, 64], [270, 678], [-855, 280], [-576, 371], [74, 549], [776, 962], [716, 928], [-665, 451], [47, 746], [577, 875], [512, 915], [916, 963], [155, 880], [-546, -368], [-947, -36], [361, 393], [849, 859], [-11, -11], [-925, 478], [-19, 242], [65, 292]]) == 14\nassert solution.findMinArrowShots([[-327, 664], [896, 949], [196, 774], [778, 934], [603, 753], [-237, 655], [-902, 911], [387, 394], [-271, 783], [845, 901], [26, 632], [-733, -730], [-958, -242], [246, 953], [748, 785], [-123, 395], [-260, 508], [997, 997], [-727, -146], [-934, -254], [620, 840], [159, 940], [108, 744], [-488, -151], [-25, 744], [-555, 169], [-878, 308], [-151, 888], [-31, 548], [-630, -451], [-124, 385], [857, 995], [-403, 946], [-948, 816], [397, 520], [926, 963], [254, 896], [703, 942], [381, 984], [-635, 138], [-432, -320], [56, 392], [-58, 270], [579, 641], [-279, -175], [-188, 537], [170, 389], [668, 869], [-543, 79], [-18, 689], [-187, 977], [385, 707], [909, 919], [758, 828], [-259, 835], [484, 701]]) == 13\nassert solution.findMinArrowShots([[-589, -182], [-315, 549], [-319, 372], [-607, 621], [-833, 431], [-664, -149]]) == 1\nassert solution.findMinArrowShots([[603, 992], [-532, 274], [681, 839], [-505, 778], [-111, 823], [-826, 220], [710, 732], [-102, 743], [99, 904]]) == 2\nassert solution.findMinArrowShots([[-18, 928], [739, 746], [929, 983], [304, 793], [-293, 904], [574, 920], [304, 352], [-399, 230], [900, 907], [-607, 449], [-64, -52], [13, 535], [-253, -14], [-409, 913], [909, 923]]) == 6\nassert solution.findMinArrowShots([[-387, 938], [-301, 286], [383, 882], [309, 988], [-868, 573], [-403, 157], [855, 901], [-137, -28], [-663, 519], [-274, 752], [-446, 855], [-40, 402], [428, 637], [604, 666], [931, 997], [57, 149], [655, 999], [-637, 69], [-752, 283], [-953, 814], [-354, -345], [297, 824], [-47, 215], [750, 907], [309, 733], [-374, 999], [-120, 0], [251, 490], [994, 997], [235, 657], [-386, 989], [-189, -48], [-439, 547], [-751, 581]]) == 7\nassert solution.findMinArrowShots([[81, 692], [748, 924], [-386, 314], [-549, 672], [197, 799], [-393, -215], [104, 693]]) == 3\nassert solution.findMinArrowShots([[-876, 165], [926, 1000], [242, 848], [-691, -40], [-373, 960], [-646, 341], [-241, 825], [-99, 368], [775, 893], [-251, 1000], [893, 925], [-459, 63], [-174, 670], [-535, -489], [429, 474], [-383, 256], [-981, 29], [503, 955], [217, 827], [-760, 206], [-326, 288], [734, 840], [-518, 354], [441, 620], [279, 825], [664, 777], [-784, 368], [566, 709]]) == 7\nassert solution.findMinArrowShots([[-136, 8], [-754, -96], [634, 920], [-246, 183], [131, 432], [627, 938], [850, 862], [973, 997], [1, 912], [-841, 655], [431, 950], [651, 690], [-493, 270], [324, 704], [264, 337], [-864, 8], [-78, 792], [-154, 121], [-911, -801], [420, 925], [333, 502], [108, 205], [970, 981], [-464, -85], [706, 752], [107, 598], [-935, 269], [890, 910], [-704, 302], [-30, 155], [-235, -220], [-403, -226], [-186, 583], [898, 980], [384, 866], [-147, 214], [-658, 762], [568, 681], [702, 957], [970, 986], [-573, 17], [-769, 913], [-271, 323], [848, 879], [506, 591], [239, 835], [-337, 640], [614, 876], [-688, -230], [-772, -264], [328, 950], [701, 775], [640, 926], [-192, 455], [-402, 225], [587, 620], [517, 762], [-688, 93], [514, 632], [437, 514], [956, 970], [442, 621], [-668, 765], [420, 527], [-408, 957]]) == 14\nassert solution.findMinArrowShots([[-476, 220], [-529, -5], [695, 732], [494, 974], [395, 960], [715, 913], [-92, 345], [150, 469], [379, 563], [-521, 55], [774, 973], [974, 984], [88, 628], [64, 489], [246, 780], [-721, -319], [254, 392], [696, 974], [168, 808], [-76, 214], [-957, 235], [235, 965], [106, 541], [469, 815], [864, 969], [-436, -72], [107, 449], [15, 498], [-803, 555], [-889, 878], [390, 655], [552, 678], [514, 577], [-608, 484], [823, 989], [-28, 886], [-755, 245], [774, 875], [170, 899], [-312, -120], [-563, -131], [92, 995], [603, 684], [130, 966], [-286, 535], [-923, -918], [446, 541], [-665, 949], [-792, -214], [-416, 429], [329, 462], [707, 830], [365, 711], [623, 993], [-909, -122], [170, 402], [-576, -330], [708, 963], [140, 183], [-973, -408], [-944, 99], [-849, 481], [417, 662], [770, 895], [-808, 122], [185, 421], [533, 797], [-48, 900], [3, 66], [-967, -560], [-272, 194], [535, 735], [448, 510], [-19, 501], [-973, 701], [357, 420], [-416, 262], [-232, 100], [-966, 670], [884, 893], [-551, 318], [-353, 752], [-923, 122], [768, 842]]) == 13\nassert solution.findMinArrowShots([[903, 903], [-685, 262], [-532, -425], [-320, 166], [791, 973], [886, 975], [-985, 676], [-203, 214], [-265, 966], [486, 981], [198, 732], [-222, 218], [390, 415], [528, 551], [855, 875], [-375, 308], [901, 977], [-313, 468], [948, 972], [864, 996], [-780, -726], [-299, 836], [-215, 722], [-146, 975], [-76, 9], [656, 941], [-518, -258], [-186, 140], [-750, 752], [832, 985], [308, 447], [-241, 258], [858, 986], [-296, -167], [911, 942], [-371, 976], [-96, 604], [-866, 314], [-913, 716], [383, 657], [377, 925], [-335, 326], [131, 996], [779, 979], [537, 752], [-296, 421], [-325, 890], [86, 718], [882, 944], [984, 996], [-434, -189], [124, 966], [367, 917], [-297, -129], [811, 826], [736, 781], [101, 602], [-569, 213], [-331, 600], [-433, -356], [-940, -892], [-510, 83], [-676, 304], [776, 956], [973, 976], [495, 527], [214, 686], [-571, -304], [389, 478], [725, 766], [446, 969], [633, 737], [741, 964], [-204, 566], [259, 488], [486, 614], [616, 865], [-692, 440], [-591, 56]]) == 16\nassert solution.findMinArrowShots([[85, 524], [-348, 518], [386, 706], [141, 998], [-62, 736], [-168, 394], [926, 945], [-967, 545], [409, 686], [-53, 791], [-568, -125], [-382, 733], [217, 477], [-819, 676], [-874, -361], [-205, -91], [-404, 179], [-451, -358], [-252, -232], [-246, 50], [893, 926], [968, 990], [754, 916], [-109, 549], [619, 758], [-974, 800], [153, 776], [590, 809], [-660, 493], [-808, 636], [-468, 561], [362, 468], [538, 539], [-276, 838], [110, 210], [518, 597], [946, 949], [-715, -119], [50, 933], [-671, 728], [-392, 436], [574, 969], [639, 831], [139, 347], [-763, 836], [824, 978], [-984, 610], [419, 859], [-341, 500], [-767, -132], [386, 630], [-489, 457], [404, 902], [-381, -14], [467, 813], [916, 916], [945, 991], [416, 429], [-918, 827], [-510, 217], [598, 984], [-883, 446], [444, 997], [943, 992], [-988, -631], [136, 694], [-945, -43], [317, 482], [699, 946], [83, 621], [-376, -312], [-418, -3], [-297, -65], [-784, -180], [395, 691], [-307, 581], [247, 705], [392, 766], [565, 707], [-179, 964], [-829, -13], [-199, -168], [448, 932], [188, 746], [-871, -94], [-932, 148], [2, 438], [-720, 807], [54, 164], [-403, 777], [964, 974], [141, 577]]) == 12\nassert solution.findMinArrowShots([[612, 688], [-745, -623], [-224, 28], [822, 959], [-4, 160], [163, 675], [804, 960], [-696, 441], [700, 980], [558, 610], [682, 880], [9, 853], [293, 686], [-205, -120], [-358, 770], [-973, 855], [-613, 728], [-108, 11], [-258, 853], [38, 57], [-919, -748], [-314, 123], [958, 961], [314, 570], [-159, -11], [860, 892], [247, 599], [90, 244], [-655, 238], [601, 881], [915, 958], [12, 858], [-943, -100], [-333, 682], [-51, 89], [397, 886], [193, 371], [-288, 91], [867, 890], [365, 777], [-309, 572], [-162, 350], [-701, 834], [-516, 668], [-758, -675], [478, 813], [-861, 924], [-810, -768], [651, 904], [-135, 451], [43, 228], [-371, 339], [855, 858], [-356, 112], [351, 801], [836, 959], [-220, 732], [-926, -615], [-995, -657], [402, 573], [16, 446], [535, 843], [760, 964]]) == 11\nassert solution.findMinArrowShots([[512, 963], [-11, 72], [568, 959], [843, 848], [-633, -481], [-257, 569], [-865, -200], [281, 767], [-338, 537], [-343, 396], [629, 949], [832, 846], [881, 943], [-526, 516], [896, 978], [-824, 844], [262, 541], [626, 755], [-47, 534], [-37, 171], [522, 989], [-841, -820], [963, 990], [-505, 103], [704, 865], [366, 585], [-904, 382], [463, 897], [748, 948], [-855, -259], [703, 715], [-410, -281]]) == 9\nassert solution.findMinArrowShots([[-277, 666], [-408, 286], [133, 966], [329, 795], [346, 633], [-402, 986], [778, 795], [-696, 72], [-874, 606], [-606, 750], [-685, 999], [831, 929], [558, 788], [-228, 916], [-2, 753], [-762, -599], [-77, 230], [435, 851], [521, 795], [-395, 290], [997, 999], [596, 797], [357, 418], [-49, 411], [-310, 312], [-218, 630], [835, 854], [-163, 157], [-683, 747], [-342, 98], [-752, -632], [170, 919], [-553, 145], [-39, 397], [-949, -16], [-401, -74], [180, 955], [-384, 302], [792, 938], [791, 982], [-621, 374], [-807, -375], [-756, -374], [62, 145], [41, 167], [897, 970], [615, 855], [-13, 164]]) == 8\nassert solution.findMinArrowShots([[188, 828], [248, 984], [238, 949], [-360, 836], [-58, 851], [48, 907], [-711, -437], [970, 975], [238, 906], [754, 979], [-150, 348], [41, 692], [638, 764], [-899, -158]]) == 4\nassert solution.findMinArrowShots([[317, 517], [148, 148], [876, 901], [-75, 25], [230, 267], [279, 794], [-814, -454], [-13, -3], [-506, 734], [800, 936], [-473, 374], [65, 765], [911, 915], [750, 923], [-169, 50], [57, 589], [-488, -379], [586, 615], [-863, -709], [-57, 127], [-423, 349], [175, 762], [-71, 239], [-890, 536], [-392, -78], [-262, 769], [-53, 275], [969, 978], [-39, 286], [-35, 866], [963, 973], [673, 970], [-652, -489], [226, 603], [996, 998], [-867, -251], [-557, -261], [-269, 603], [508, 783], [496, 714], [-603, 495], [-71, 236], [-801, 499], [789, 814], [-132, 457], [416, 850], [896, 963], [457, 633], [-671, 822], [373, 698], [-530, -54]]) == 13\nassert solution.findMinArrowShots([[123, 286], [-539, -240], [458, 669], [-504, 253], [-761, 628], [714, 927], [882, 997], [-290, -276], [62, 424], [-138, -42], [165, 508], [-56, 594], [-710, 989], [-982, -302], [716, 756], [324, 436], [-591, 429], [677, 788]]) == 8\nassert solution.findMinArrowShots([[-705, -460], [834, 965], [324, 625], [534, 805], [117, 259], [550, 972], [-830, 736], [291, 491], [-180, 69], [358, 374], [-792, 501], [631, 836], [-873, 896], [-755, 680], [624, 672], [797, 914], [622, 624], [659, 976], [-541, 166], [-706, -493], [-191, 406], [507, 812], [-732, 48], [-801, -456], [-275, 673], [87, 403], [708, 747], [540, 838], [-58, 206], [-295, 180], [543, 619], [356, 783], [-381, -279], [965, 980], [673, 928], [-387, -261], [-364, 410], [341, 404], [206, 889], [-646, 255], [350, 821], [400, 606], [46, 813], [-612, 356], [-744, -82], [741, 899], [-260, 889], [378, 770], [-460, 348], [-652, 850], [-180, 836], [928, 1000], [-613, 122], [567, 973], [365, 942], [530, 895], [-619, 967], [68, 930], [292, 984], [657, 681], [189, 960], [614, 946], [-329, -79], [63, 193], [-420, 669], [-379, -287], [-523, -311], [-487, 120], [898, 998], [957, 989], [-743, 179], [594, 712], [-362, 216], [708, 844], [892, 924], [-731, -40], [51, 950], [-142, 23], [-201, 82], [-775, 216]]) == 11\nassert solution.findMinArrowShots([[158, 800], [442, 848], [982, 986], [600, 623], [-542, 537], [-998, -516], [-184, 423], [-775, -491], [-118, 937], [93, 957], [639, 708], [475, 731], [-258, -71], [753, 861], [261, 836], [314, 998], [573, 795], [-719, -602], [-918, -291], [534, 834], [248, 697], [-887, -861], [-198, -196], [-593, -339], [-847, -27], [124, 812], [-714, -524], [242, 757], [652, 940], [-309, 796], [-774, -563], [254, 665], [-152, 873], [203, 873], [-947, -635], [-467, 211], [938, 964], [-781, -727], [-745, -311], [-254, 677], [-220, 370], [884, 970], [703, 894], [-210, 480], [-516, 312], [-95, 281], [262, 473], [366, 498], [998, 1000], [-195, 987], [-582, -144], [-907, 994], [809, 963], [175, 204], [-588, -588], [-848, 943], [875, 944], [-656, 627], [698, 964], [-497, -329], [284, 791], [-727, -325], [308, 415], [-80, 343], [-536, -126], [-155, 753], [-24, 129], [-280, -142], [-207, 672], [-365, 281], [-872, -367], [703, 834]]) == 15\nassert solution.findMinArrowShots([[-946, -247], [-77, 818], [888, 907], [269, 367], [-976, -796], [404, 941], [-640, -6], [-257, 688], [453, 946], [-46, 811], [-560, 888], [424, 653], [885, 991], [-612, 385], [-636, -15], [103, 944], [185, 813], [398, 522], [40, 804], [-35, 808], [241, 690], [-678, -504], [960, 994], [297, 580], [197, 204], [511, 629], [-745, -392], [382, 920], [-115, 331], [76, 751], [-716, -315], [631, 983], [248, 731], [92, 906], [-547, -424], [762, 985], [949, 996], [399, 439], [278, 572], [424, 730], [740, 796], [-88, 274], [-673, 662], [-781, 442], [174, 254], [923, 940], [69, 481], [-976, -55], [-610, 815], [597, 774], [585, 965], [-627, 56], [-44, 694], [560, 776], [914, 921], [-252, -116], [314, 359], [956, 962], [210, 661], [-227, 473], [-903, -357], [-198, 587], [406, 550], [-698, -439], [-790, 411], [-102, 985], [-463, 870], [290, 654], [-250, 382], [-262, 813], [791, 860], [-731, 178], [-593, 981], [-328, 135], [450, 707], [671, 775], [393, 646], [-229, 702], [554, 572], [-941, -301], [-89, 115], [-794, 579], [-661, 187], [124, 873], [564, 616], [-760, -631], [594, 797], [-968, -140]]) == 15\nassert solution.findMinArrowShots([[227, 596], [188, 265], [656, 987], [-953, 699], [-272, 769], [167, 294], [-925, 835], [90, 876], [-145, 970], [464, 886], [-485, -225], [-343, 190], [935, 982], [270, 872], [-479, -242], [-659, 971], [-894, 349], [-90, -84]]) == 5\nassert solution.findMinArrowShots([[-455, 833], [-607, -600], [-974, -11], [310, 959], [-977, -956], [171, 288], [159, 328], [-271, 507], [596, 813], [180, 908], [-302, 254], [790, 996], [345, 686], [186, 237], [558, 657], [-356, 638], [605, 848], [173, 579], [779, 883], [-731, -487], [-852, 243], [35, 488], [-666, -30], [316, 508], [635, 793], [-304, 865], [-590, 367], [-67, 496], [925, 945], [-474, -89], [549, 713], [322, 440], [-490, 968], [-303, 369], [118, 864], [-758, 668], [759, 776], [-832, 935], [-534, 437], [-866, 587], [316, 587], [992, 992], [985, 985], [84, 748], [153, 284], [-236, 382], [364, 658], [-467, 112], [-597, 277], [-396, 122], [-652, -115], [-845, -494], [-927, -403], [-574, 951], [-746, 625], [650, 959], [79, 313], [-687, -298], [967, 981], [-637, -398], [-417, -18], [69, 678], [9, 819], [-5, 109], [-145, -72], [-593, -166], [775, 975], [-415, 513], [-740, -416], [-833, -687], [-684, -116], [45, 62], [913, 959], [-422, -180], [-206, 955], [313, 899], [542, 930], [578, 903], [24, 704], [382, 808], [116, 430], [982, 1000], [214, 542], [-575, -306], [232, 647], [-973, -35], [735, 992]]) == 15\nassert solution.findMinArrowShots([[-888, -625], [206, 687], [-26, 778], [300, 674], [218, 286], [507, 817], [-694, 531], [165, 613], [852, 892], [211, 638], [491, 778], [-83, 670], [-368, 837], [754, 820], [-551, 176], [427, 694], [-225, 113]]) == 6\nassert solution.findMinArrowShots([[292, 706], [-732, -299], [513, 899], [542, 577], [-540, -350], [993, 1000], [741, 944], [-36, 854], [253, 367], [456, 994], [-715, 606], [635, 777], [555, 890], [-90, 359], [-330, -301], [-521, -515], [34, 380], [-671, 758], [-952, -805], [261, 897], [-949, -841], [-455, 532], [151, 566], [530, 611], [-854, 462], [907, 973], [-606, 931], [-384, 923], [-74, 711], [950, 955], [22, 819], [-215, 369], [-83, 173], [712, 804], [-294, 55], [539, 848], [-599, -418], [-147, 718], [135, 383], [2, 142], [-73, 918], [126, 456], [887, 948], [239, 621], [-229, 857], [-706, 649], [806, 987], [104, 471], [-993, -308], [725, 798], [-336, -162], [-606, 731], [-345, -322], [-284, 679], [852, 881], [715, 718], [347, 508], [-60, 385], [-726, -192], [193, 250], [-984, 1000], [829, 847], [575, 885], [-752, 592], [-335, 398], [-648, -537], [-440, 859], [-460, -312], [-812, -176], [-524, -347], [583, 860], [-56, -20], [616, 643], [-230, 761], [102, 620], [-948, 984], [-99, 211], [733, 835], [-626, 523], [490, 865], [-148, 443], [710, 727], [177, 232], [653, 802], [487, 703], [-27, 973], [829, 975], [151, 829], [-662, 342], [22, 144], [-437, 883], [493, 709], [-915, 925]]) == 17\nassert solution.findMinArrowShots([[808, 938], [538, 775], [-380, -263], [-174, 884], [359, 741], [-255, 461], [60, 891], [-910, 855], [979, 984], [-282, 986], [951, 994], [480, 611], [610, 718], [-507, 216], [409, 673], [822, 982], [-562, 427], [358, 953], [809, 846], [-370, 688], [183, 572], [-741, 277], [63, 946], [-774, 753], [-519, 895], [-61, 103], [300, 617], [550, 639], [-832, -496], [964, 982], [686, 740], [-3, 609]]) == 7\nassert solution.findMinArrowShots([[322, 845], [-21, 593], [-289, -248], [-748, -611], [-922, -879], [-642, -42], [997, 999], [488, 969], [-306, 684], [-571, 107], [-447, 777], [-722, 572], [806, 964], [-577, 61], [11, 993], [120, 552], [825, 926], [-822, -517], [385, 682], [-163, 11], [-112, 363], [446, 755], [34, 968], [577, 792], [35, 991], [917, 996], [281, 642], [519, 969], [134, 930], [190, 796]]) == 8\nassert solution.findMinArrowShots([[-3, 560], [16, 667], [771, 978], [322, 739], [-635, -344], [-889, -88], [911, 941], [-642, 935], [519, 852], [524, 778], [621, 878], [-476, 906], [-628, 312], [899, 953], [758, 988], [280, 807], [300, 890], [819, 997], [-704, -633], [18, 552], [-102, 850], [387, 544], [-622, 963], [254, 565], [-346, -131], [-22, 977], [-575, -512], [-394, 169], [541, 997], [510, 693], [-297, 623], [-905, 773], [-763, -85], [427, 584], [-835, 502], [-201, 866], [-934, -576], [179, 936], [-352, 32], [28, 469], [-28, 679], [143, 288], [461, 985], [-916, -488], [20, 716], [-153, 22], [509, 969], [-146, -100], [635, 867], [-365, -55], [199, 722], [22, 415], [-592, 190], [-22, 95], [-522, -494], [-807, 804], [-226, 695], [743, 841], [-748, 281], [140, 740], [566, 925], [270, 583], [475, 501], [-471, 303], [342, 774], [-344, 352], [305, 360], [24, 281], [382, 411], [-724, -223], [-834, -121], [-618, -213], [189, 711], [-963, -660], [-203, -56], [859, 902], [-750, 172], [-661, 682], [932, 978], [496, 808], [-700, 79], [915, 965], [-843, 843], [909, 950], [-440, -398], [-502, -238], [-905, 476], [-756, 981], [-963, 239], [-546, 690], [325, 448], [515, 553], [-75, 859], [810, 906], [580, 927], [-206, 126], [-899, 396]]) == 13\nassert solution.findMinArrowShots([[-456, 692], [-885, -528], [800, 908], [706, 860], [857, 925], [-808, -59], [-872, -506], [696, 809], [915, 938], [-907, -194], [-273, 274], [-309, 832], [-392, 44], [-421, -264], [982, 983], [128, 904], [7, 254], [39, 675], [-868, -658], [572, 667], [471, 554], [169, 963], [354, 583], [205, 343], [990, 995], [-36, 660], [699, 706], [-34, 324], [552, 755], [-375, 80], [814, 927], [317, 796], [919, 960], [725, 747], [-723, 419], [-231, -177]]) == 12\nassert solution.findMinArrowShots([[288, 385], [315, 852], [166, 851], [-42, 882], [-228, 141], [-12, 642], [468, 731], [-972, 503], [171, 339], [98, 213], [-406, -152], [-157, 989], [-673, 646], [-533, 295], [130, 268], [-554, 117], [-382, 222], [-972, -317], [-915, -317], [170, 740], [-476, 794], [-877, 102], [-737, 195], [-323, 182], [327, 923], [-138, 702], [443, 631], [873, 995], [-571, -3], [-955, 411], [-835, 982], [427, 697], [665, 706], [57, 739], [632, 810], [-158, 727], [-662, -448], [858, 863], [-969, -585], [-353, -302], [-525, 905], [-425, 361], [-906, -527], [-572, 219], [-879, 689], [-566, -550], [845, 933], [177, 469], [241, 565], [-769, -570], [-422, 436], [-646, 688], [-939, 303], [-489, 936], [958, 961], [431, 555], [-832, 982], [-496, 382], [247, 641], [118, 873], [-465, 111], [383, 862], [-733, -230], [775, 823], [603, 735], [-284, 542], [875, 887], [896, 995], [-676, 981], [-293, 757], [283, 398], [836, 839], [463, 773], [-854, -346], [-616, -232], [178, 364], [248, 677], [534, 887], [169, 899], [835, 855], [-644, 915], [984, 995], [544, 619], [-997, 113], [-683, -121], [-730, -36], [989, 996], [896, 935], [912, 992], [-578, 782], [789, 850], [-170, 52], [-158, 342], [659, 675], [-561, 432], [930, 955], [363, 810], [-411, 503]]) == 15\nassert solution.findMinArrowShots([[-775, -238], [675, 730], [181, 441], [-276, 834], [-752, -316], [77, 600], [-697, 527], [-582, 779], [-189, 792], [-381, 48], [173, 215], [-564, 979], [822, 977], [537, 875], [288, 754], [-468, 134], [607, 780], [-845, -285], [-873, -504], [978, 981]]) == 6\nassert solution.findMinArrowShots([[484, 654], [-481, 198], [-653, -603], [1000, 1000]]) == 4\nassert solution.findMinArrowShots([[-164, 739], [906, 971], [622, 867], [236, 993], [-708, -517], [-379, -228], [11, 387], [674, 953], [-701, 462], [-331, -12], [-85, 294], [279, 636], [-911, 570], [-91, 672], [404, 743], [-341, -220], [-974, -881], [306, 678], [-859, -218], [34, 362], [330, 397], [-750, -312], [-334, 721], [948, 993], [369, 477], [-756, 341], [-790, 895], [-402, 743], [-774, 368], [466, 672], [97, 670], [-77, 104], [229, 532], [-242, -162], [-42, 74], [337, 537], [913, 947], [510, 905], [779, 845], [-421, 963], [37, 214], [771, 945], [-163, 882]]) == 9\nassert solution.findMinArrowShots([[264, 833], [416, 963], [-110, -102], [18, 288], [-441, -190], [877, 935], [782, 836], [886, 981], [-164, 272], [-402, 843], [-696, -639], [-777, 201], [-687, 71], [-489, 72], [644, 848], [-394, 303], [38, 221], [-9, 860], [505, 664], [-9, 149], [479, 490], [-710, 660], [22, 941], [872, 986], [208, 320], [-191, 937], [203, 767], [547, 669], [-453, 895], [-406, 977], [43, 214], [668, 997], [38, 685], [-853, 661], [-884, 581], [-367, -355], [-831, 482], [744, 785], [575, 981], [794, 853], [616, 931], [324, 491], [187, 599], [-577, -565], [241, 782], [-497, 346], [737, 883], [25, 609], [652, 775], [337, 763], [-995, -396], [976, 979], [-155, 669], [-886, -298]]) == 12\nassert solution.findMinArrowShots([[-143, 680], [988, 993], [974, 993], [-635, 331], [-265, 765], [170, 933], [826, 933], [352, 984], [-779, 33], [-954, -15], [-906, -67], [-420, 782], [-325, 259], [576, 902], [-962, 649], [122, 496], [871, 875], [51, 103], [-880, -113], [543, 984], [-460, -231], [-413, 729], [-635, 451], [672, 787], [735, 807], [191, 239], [-443, 795], [435, 944], [-204, 264], [708, 962], [-584, 849], [276, 888], [-26, 992], [-466, 619], [-826, 807], [981, 998], [-747, 470], [85, 735], [-402, 955], [458, 724], [685, 728], [-837, 634], [651, 826], [-724, -129], [-158, 466], [-569, 358], [-876, 214], [-632, 245], [-622, 589], [-803, -504], [859, 912], [-532, 116], [199, 872], [351, 475], [-751, -115], [-914, 493], [672, 870], [933, 999], [859, 926], [221, 731], [163, 799], [-890, -374], [490, 838], [-985, -441], [258, 540], [-176, 896], [-612, 164], [614, 877], [-944, 871], [-895, 529], [-920, -570], [472, 957], [680, 992], [117, 792]]) == 9\nassert solution.findMinArrowShots([[388, 820], [188, 664], [740, 918], [-893, -318], [-850, 367], [746, 818], [950, 986], [24, 728], [414, 910], [524, 562], [-781, -432]]) == 4\nassert solution.findMinArrowShots([[-444, -285], [-363, 168], [77, 466], [-340, 92], [896, 996], [379, 780], [-240, 428], [-954, -182], [121, 185], [-67, 102], [406, 513], [-793, -151], [-943, 699], [-959, -507], [790, 868], [-997, -147], [837, 958], [764, 856], [-863, 843], [-507, 812], [899, 916], [848, 879], [155, 842], [-561, 666], [841, 901], [281, 574], [-67, 569], [-977, 408], [201, 654], [53, 525], [-793, -663], [95, 726], [600, 948], [655, 815], [-341, 627]]) == 8\nassert solution.findMinArrowShots([[655, 762], [-753, -51], [-18, 832], [733, 925], [-416, 843], [-4, 341], [-1, 944], [-344, 786], [-695, 416], [-137, 587], [-813, -281], [-979, -224], [377, 889], [162, 987], [-267, -147], [99, 635], [482, 698], [852, 980], [763, 893], [515, 781], [856, 985], [-852, -352], [-95, -32], [422, 724], [-278, 829], [-155, -137], [1, 673], [-606, 294], [261, 835], [450, 692], [-605, 328], [-47, 534], [-113, 334], [-857, -5], [-686, 682], [198, 343], [933, 964], [-528, 619], [914, 996], [696, 728], [-896, -521], [-9, 671], [-688, 794], [877, 915], [-48, 66], [190, 655], [317, 400], [-242, 402], [-478, 647], [-33, 369], [961, 986], [938, 957], [444, 485]]) == 9\nassert solution.findMinArrowShots([[-555, 261], [-399, -222], [727, 869], [244, 673], [-749, 107], [-445, -196], [-694, 497], [126, 609], [703, 892], [-823, 751], [567, 671], [-750, -70], [-227, 910], [689, 746], [819, 970], [791, 813], [551, 922], [-57, 152], [-727, -251], [-717, -115], [962, 974], [937, 988], [-62, 258], [-496, 320], [-829, -83]]) == 6\nassert solution.findMinArrowShots([[539, 811], [-577, 843], [277, 572], [584, 931], [362, 932], [392, 854], [604, 845], [-260, -244], [-492, -470], [403, 714], [940, 954], [793, 851], [198, 259], [509, 857], [338, 675], [347, 680], [-929, 296], [387, 544], [851, 919], [-501, 137], [-252, 822], [-741, -78], [36, 901], [-269, -179], [-197, -46], [-217, 490], [141, 377], [496, 906], [966, 967], [723, 943], [879, 892], [772, 885], [-66, 222], [-261, -88], [-191, 388], [917, 941], [-500, -49], [-339, 118], [682, 773], [160, 606], [584, 726], [315, 483], [-407, 798], [-826, -206], [-990, 517], [-119, 246], [802, 957], [-27, 518], [955, 964], [-20, 315], [189, 733], [-593, 91], [-838, -766], [-590, 237], [-657, 533], [-279, 958], [264, 798], [719, 995], [-119, 400], [867, 935], [-871, -636], [-462, 110], [-638, 605], [134, 405], [961, 965], [55, 67], [-607, 306], [-718, 867], [-207, 213], [26, 604], [-655, 762], [81, 679], [155, 637], [-88, 248]]) == 13\nassert solution.findMinArrowShots([[211, 281], [-423, 283], [631, 900], [362, 883], [-715, 328], [-627, 535], [-684, -74], [336, 903], [-911, 518], [349, 641], [744, 789], [978, 987], [0, 427], [730, 808], [-17, 580], [-884, 494], [497, 781], [-553, -300], [648, 668], [222, 544], [760, 886], [-694, 906], [-770, 69], [-475, -246], [-927, 504], [756, 948], [-980, -45], [-594, 478], [933, 974], [-823, -636], [-271, 213], [85, 761], [896, 914]]) == 9\nassert solution.findMinArrowShots([[585, 709]]) == 1\nassert solution.findMinArrowShots([[-390, 511], [-623, 690], [-300, 843], [-95, 988], [-374, 883], [12, 936], [-370, -169], [103, 754], [-678, 900], [740, 986], [-951, -948], [-939, -908], [766, 938], [299, 754], [261, 819], [576, 642], [-839, 821], [-330, -322], [-924, -227], [200, 743], [-136, 614], [150, 429], [129, 619], [-273, -19], [929, 985], [-991, -72], [-96, 858], [56, 60], [-303, 893], [898, 898], [-338, 68], [-404, -364], [-525, 760], [-301, 815], [-696, -455], [-733, 308], [-707, 129], [816, 865], [-579, -382], [-282, 851], [323, 501], [-921, -275], [125, 826], [801, 805], [-539, 338], [-256, 52], [-346, 380], [733, 892], [464, 525], [103, 611], [48, 438], [-269, 810], [-756, -572], [285, 329], [396, 670], [-302, -223], [-828, 607]]) == 14\nassert solution.findMinArrowShots([[301, 946], [-14, 323], [-400, -300], [540, 760], [388, 659], [543, 825], [-329, -126], [205, 483], [204, 879], [-178, 782], [-764, 542], [16, 875], [633, 915], [-699, 140], [-870, -141], [-647, 902], [-951, 607], [-130, 667], [-944, 305], [104, 989], [-256, -73], [915, 948], [65, 212], [317, 736], [77, 983], [-469, 881], [-374, 136], [-790, -778], [961, 994], [-278, 715], [-355, -136], [718, 943], [249, 827], [776, 824], [982, 984], [-960, 243], [-860, 839], [189, 847], [-924, 315], [325, 408], [467, 500], [616, 862], [338, 716], [-608, -208], [-291, 24], [-189, -4], [-207, 971], [-108, 947], [-797, 690], [-116, 872], [-18, 506], [498, 529]]) == 10\nassert solution.findMinArrowShots([[-334, -310], [-1000, 485], [-891, 437], [723, 883]]) == 2\nassert solution.findMinArrowShots([[-212, 681], [-427, 979], [-886, 778], [-924, 8], [-214, 726], [-466, -362], [691, 727], [-500, -202], [557, 624], [189, 772], [-618, -60], [921, 928], [24, 474], [239, 726], [530, 615], [-728, 130], [408, 661], [567, 686], [265, 983], [-932, -646], [607, 775], [273, 925], [898, 965], [-404, 36], [-394, 258], [621, 867], [553, 757], [-907, -461], [203, 932], [-299, 944], [-937, -491], [-334, -145], [135, 611], [-562, -341], [720, 926], [-317, 963], [-555, -74], [-405, 719], [936, 961], [-820, 481], [143, 497], [611, 930], [766, 964], [136, 392], [-650, 439], [-739, -79], [-195, 293], [-685, 648], [971, 993], [-517, 288], [823, 930], [32, 129], [166, 410], [-404, 636], [-286, 913], [-609, 994], [-185, 223], [-533, -320], [478, 898], [460, 636], [895, 916]]) == 11\nassert solution.findMinArrowShots([[773, 864], [642, 723], [-296, 396], [215, 490], [52, 82], [-226, -18], [-413, -273], [413, 984], [27, 330], [226, 811], [729, 904], [-830, 432], [-870, -218], [693, 961], [-267, -42], [930, 935], [868, 920], [776, 998], [-31, 707], [-865, 969], [-177, 247], [-191, 453], [-137, 304], [-883, -852], [514, 843], [143, 289], [-501, -381], [-83, 886], [762, 921], [-968, -454], [152, 801], [-995, 64], [64, 128], [-709, 474], [-845, 80], [-363, -12], [-84, 599], [500, 927], [-787, 940], [911, 942], [932, 968], [896, 938], [-831, -367], [958, 975], [-996, 85], [-582, 249], [-185, -132], [765, 963], [588, 684], [-868, 837], [731, 872], [562, 679], [-579, 891], [14, 131], [-4, 756], [-298, 739], [-91, 208], [152, 780], [-267, 334], [-539, -238], [406, 540]]) == 11\nassert solution.findMinArrowShots([[-565, 727], [-533, 7], [367, 479], [445, 975], [409, 435], [621, 737], [620, 731], [-233, -28], [-301, -251], [-281, 296], [519, 573], [-865, -848], [-499, 466], [-233, 480], [-88, 635], [726, 998], [-924, -153], [156, 182], [926, 934], [700, 924], [469, 859], [644, 901], [579, 809], [-994, -301], [-134, 803], [87, 881], [-476, 438], [-34, 698], [867, 926], [523, 921], [921, 968], [87, 324], [-419, -30], [-845, 509], [-182, 705], [721, 995], [971, 996], [329, 981], [-391, 871], [-549, -525], [980, 982], [332, 817], [-349, 986], [826, 887], [273, 548], [-955, 160], [-811, 273], [-833, 737], [355, 787], [-407, 834], [683, 831], [148, 197]]) == 11\nassert solution.findMinArrowShots([[661, 708], [579, 630], [-248, 222], [-387, 343], [283, 369], [849, 1000], [337, 996], [118, 563], [-730, 158], [-405, -320], [-729, -523], [-725, 278], [826, 867], [125, 177], [-927, 674], [-839, 542]]) == 7\nassert solution.findMinArrowShots([[290, 708], [-657, 612], [653, 987], [-538, 322], [-557, 102], [-106, 398], [-330, -222], [964, 982], [-543, 658], [545, 859], [-346, 594], [97, 422], [-282, -213], [-56, 935], [979, 985], [-846, 935], [778, 810], [-937, 58], [-966, -740], [353, 446], [-59, 449], [-829, 413], [-516, -72], [271, 658], [-478, 701], [119, 880], [-565, -487], [247, 913], [698, 703], [751, 825], [629, 671], [969, 974], [841, 878], [-739, 437], [332, 684], [494, 539], [-707, 12], [-763, 218], [765, 844], [959, 994], [-825, 791], [-494, -311], [60, 959], [-408, 452], [906, 978], [-657, 53], [989, 990], [807, 872], [-832, -741], [700, 884], [13, 472], [55, 639], [-956, -166], [-343, 379], [-437, -433], [-109, -54], [420, 454], [69, 903], [-430, -218], [-809, -765], [261, 640], [767, 948]]) == 14\nassert solution.findMinArrowShots([[-861, 274], [-969, -662], [-881, 983], [-898, -382], [-965, -88], [277, 614], [400, 568], [866, 956], [154, 429], [741, 872], [533, 743], [-449, 18], [-593, 35], [885, 899], [293, 572], [-645, -532], [81, 650], [-234, 914], [-183, 969], [-292, 846], [-586, 74], [-97, 609], [428, 681], [959, 963], [785, 954], [344, 715], [-691, 664], [401, 974], [-326, 285], [-313, 118], [782, 870], [593, 870], [895, 996], [435, 815], [-813, -9], [710, 992], [625, 727], [689, 895], [941, 999], [-292, 99], [-452, 36], [-320, 707], [-293, 896], [667, 781], [-963, 803], [581, 770], [131, 717], [-528, 578], [-719, -699], [-813, -738], [394, 504], [243, 534], [176, 922], [207, 385], [882, 936], [-988, -254], [-554, -235], [632, 683], [-90, 392], [-912, -354], [-872, 633], [215, 961], [771, 988], [605, 775], [421, 890], [-784, 446], [-101, 407], [37, 126], [197, 774], [-122, 908], [-2, 97], [-875, 193], [838, 949], [-52, 270], [905, 924], [-140, 889], [788, 990], [-781, 166], [-519, -89], [741, 984], [869, 939], [-913, 384], [688, 911], [-205, 150], [495, 988], [53, 757], [-467, 403], [-102, 421], [-264, 820], [-557, -138]]) == 12\nassert solution.findMinArrowShots([[928, 997], [618, 882], [-257, -120], [119, 793], [423, 640], [-630, -94], [-536, -12], [894, 975], [-316, -284], [343, 979], [104, 625], [-690, 184], [-450, -184], [482, 955], [57, 337], [739, 835], [-538, 698], [-547, -360], [510, 733], [-785, -9], [-773, -477], [339, 847], [-685, 519], [120, 763], [83, 850], [-781, -68], [-515, 228], [-293, 740], [900, 970], [686, 849], [-332, -134], [-319, 433], [638, 998], [817, 990], [-690, 727], [-774, 520], [428, 999], [-849, -170], [409, 511], [-773, -688], [-661, -573], [219, 867], [102, 365], [-136, -92], [-911, -898], [-762, -158], [705, 943], [144, 170], [868, 900], [-371, 402], [320, 814], [656, 716], [-147, 112], [52, 136], [666, 903], [41, 958], [882, 959], [-847, 28], [-490, 698], [268, 324], [601, 854], [-644, 883], [-995, 637], [-671, 496], [474, 710], [-26, 978], [813, 927], [-613, -250], [572, 969], [-721, -218], [676, 724], [-132, -38], [-179, 430], [-225, 327], [659, 713], [848, 870], [660, 817], [929, 950]]) == 14\nassert solution.findMinArrowShots([[-740, 468], [296, 797], [-984, -363], [-330, 473], [137, 692], [-199, -6], [219, 415], [-953, -654], [-599, 971], [765, 940], [-495, -232], [196, 200], [62, 841], [317, 506], [-661, 797], [-625, 207], [-935, 91], [-612, 349], [-174, 880], [504, 673], [-898, 77], [-70, 665], [312, 432], [-575, -99], [-503, 376], [-444, 286], [758, 778], [-77, 914], [-771, -83], [-587, 420], [268, 508], [930, 960], [-193, 983], [-417, -148], [470, 668], [382, 624], [283, 344], [11, 893], [-203, 955], [89, 115], [-55, 948], [457, 512], [201, 237], [85, 734], [223, 508], [810, 958], [-781, 657], [-337, 411], [603, 849], [-723, -415], [-753, 345], [-473, -145], [-510, -59], [-990, 489], [722, 928], [903, 940], [107, 387], [901, 968], [-33, 241], [449, 567], [194, 597], [707, 716], [141, 369], [-819, -225], [-37, 155], [959, 980], [361, 428], [-79, 23], [285, 431], [-266, 640], [848, 860], [-42, 495], [-500, 419], [-217, 626], [888, 971], [677, 901], [-930, -121], [-358, 946], [-1000, 215], [-357, -68], [-942, -463]]) == 14\nassert solution.findMinArrowShots([[-190, 590], [-246, 631], [-139, 620], [-622, 373], [65, 671], [-152, 903], [-260, -209], [-489, 39], [-170, 821], [216, 879], [-992, -127], [-114, 35], [117, 493], [-338, -200], [-407, 999], [-215, -48], [931, 989], [734, 806], [-95, 350], [-45, 667], [648, 688], [-87, 408], [-432, -400], [-7, 284], [276, 751], [850, 995], [635, 996], [-327, 775], [343, 913], [-231, 96], [-950, -125], [69, 866], [-489, -239], [-290, 166], [713, 771], [-412, 661], [-295, 215], [-2, 974], [679, 751], [-513, 659], [187, 945], [-677, 969], [-602, 898], [-450, 754], [-285, 565], [-384, 15], [-564, -391], [284, 905], [-36, 639], [735, 949], [132, 405], [104, 382], [-842, 138], [-390, 158], [873, 879], [289, 995], [-706, 317], [35, 52], [104, 529], [-459, 370], [194, 794], [353, 966], [26, 721], [-36, 827], [-142, 426], [-244, 782], [-376, -156], [521, 748], [496, 733], [-661, -313], [-519, 941], [-396, 710], [-785, -304], [-431, 403], [-579, 903], [714, 772], [-473, -66], [787, 852], [368, 661], [184, 827], [-49, 817], [-781, -90], [-557, 219], [-340, 830], [-566, -199]]) == 9\nassert solution.findMinArrowShots([[-443, -58], [712, 840], [941, 946], [869, 874], [-524, 862], [379, 704], [947, 951], [-21, 230], [111, 842], [-483, 759], [421, 743], [-786, 293], [372, 887], [-702, 391], [628, 641], [72, 690], [933, 998], [-702, -139], [923, 974], [163, 186]]) == 7\nassert solution.findMinArrowShots([[-521, 705], [669, 673], [-526, 427], [-742, -6], [-279, -45], [280, 419], [444, 597], [-29, 306], [5, 163], [747, 859], [-979, 503], [287, 422], [-526, -465], [870, 935], [154, 614], [505, 915], [-800, 33], [673, 950], [-623, 730], [-295, -271], [-982, -907], [560, 944], [-3, 104], [-686, -529], [309, 438], [-928, -396], [429, 975], [553, 866], [325, 766], [457, 809], [-777, 388], [496, 517], [130, 817], [793, 962], [351, 526], [245, 717], [915, 942], [-269, 815], [-971, 339], [-27, 272], [109, 950], [266, 870], [848, 901], [-554, -208], [141, 150], [517, 701], [-270, 147], [727, 894], [-461, -81], [539, 788], [-571, 26], [-91, 787], [-933, -527], [579, 942], [474, 725], [-714, 125], [998, 998], [346, 713], [689, 747], [-688, 738], [58, 406], [-296, -184], [-831, 477], [-199, -149], [-337, -186], [-223, -114], [480, 656], [-351, 555], [-621, 797], [-805, 87], [-457, 679], [-497, 460], [-234, -139], [439, 782], [-809, 304], [629, 982], [84, 351], [-587, 4], [-777, 213], [-814, -565], [-561, -154], [320, 620], [448, 935], [-628, 225], [64, 646], [598, 966], [217, 946], [-408, 841], [672, 983], [-203, 744], [108, 636], [441, 486]]) == 15\nassert solution.findMinArrowShots([[-693, 421], [-624, 426], [520, 642], [-802, -354], [1000, 1000], [-980, 62], [-286, -208], [593, 970], [-118, 555], [-841, 269], [-371, -80], [943, 982], [158, 761], [-402, 855], [-457, -181], [-778, -766], [563, 703], [688, 814], [-162, 710], [954, 975], [-608, -149], [-936, 25], [54, 717], [-988, 521], [-604, 999], [60, 209], [681, 787], [741, 907], [673, 980], [588, 968], [-859, 788], [-562, 768], [853, 938], [-633, -575], [976, 996], [296, 335], [-82, 253], [724, 737], [371, 576], [-97, 450], [954, 954], [-589, 138], [-586, -477]]) == 11\nassert solution.findMinArrowShots([[47, 819], [447, 788], [629, 701], [166, 706], [611, 788], [125, 574], [452, 764], [841, 872], [-107, -57], [432, 632], [-896, 497], [979, 979], [-241, 365], [-868, 237], [-765, 816], [180, 191], [870, 911], [-186, 399], [-976, 35], [-960, -684], [-940, 43], [-777, -383], [-529, 95], [282, 290], [-406, -158], [650, 876], [890, 911], [-300, 900], [646, 958], [-832, -803], [636, 879], [-443, 789], [935, 986], [-460, -299], [661, 677], [735, 826], [-303, -70], [-114, 486], [-801, -680], [-189, -124], [-66, 624], [287, 820], [114, 296], [806, 955], [-41, 237], [-616, 968], [872, 914], [197, 973], [-164, 10], [-586, -511], [747, 871], [-517, 328], [-83, 719], [509, 924], [259, 754], [-795, -157], [-334, -272], [-448, 427], [-779, -543], [-765, 1], [-946, -546], [-638, 32], [37, 587], [569, 817], [606, 847], [-148, -140], [814, 936], [-419, -357], [829, 866], [-979, -877], [-843, 873], [-583, 879], [-940, -516], [934, 945], [-580, 997], [677, 877]]) == 17\nassert solution.findMinArrowShots([[288, 349], [967, 985], [-948, 813], [473, 775], [-835, 170], [-413, -319], [160, 572], [23, 778], [237, 757], [-935, 128], [523, 758], [-738, -33], [-804, 811], [-420, 236], [-661, 29], [-655, 768], [-608, 731], [929, 966], [415, 707], [-503, 201], [-174, 991], [944, 949], [-805, -282], [-787, -38], [221, 708], [-176, 735], [671, 848], [-386, 178], [-716, 695], [-486, 26], [458, 764], [792, 1000], [-171, 230], [-795, -366], [792, 944]]) == 6\nassert solution.findMinArrowShots([[-606, -466], [-696, 146], [-552, -41], [-15, 991], [313, 846], [-220, -167], [792, 806], [-550, 965], [-166, 467], [174, 856], [-439, 810], [312, 993], [-58, 2], [-294, -23], [621, 821], [-290, 895], [-366, -229], [-36, 435], [-948, -119], [-735, 159], [-95, 766], [807, 960], [-49, 93], [-186, 391], [-635, 133], [248, 265], [649, 785], [109, 918], [998, 1000], [-230, 736], [479, 549], [-440, 1000], [679, 932], [875, 914], [365, 968], [-554, -175], [-445, 973], [-719, 247], [64, 108], [-265, 914], [389, 820], [315, 831], [-75, 41], [568, 920], [898, 981], [153, 811], [-755, 123], [-938, 844], [-904, 143], [96, 756], [-383, 180], [-824, -718], [-68, 586]]) == 12\nassert solution.findMinArrowShots([[534, 651], [929, 935], [720, 954], [-328, 152], [-443, -402], [862, 987], [-631, -394]]) == 4\nassert solution.findMinArrowShots([[-850, 976], [-395, 212], [-333, 936], [-222, 695], [-185, 80], [822, 877], [-547, -150], [739, 958], [477, 831], [-579, -165], [138, 595], [-859, 710], [83, 985], [878, 898], [-144, 754], [235, 702], [782, 909], [865, 993], [803, 891], [405, 601], [9, 676], [533, 738], [973, 975], [103, 913], [59, 654], [-516, 286]]) == 5\nassert solution.findMinArrowShots([[854, 948], [614, 828], [-274, 619], [890, 985], [-259, -141], [-514, 114], [120, 461], [821, 978], [-751, -88], [524, 646], [179, 944], [-807, 435], [769, 982], [179, 680], [-216, 197], [-220, 572], [-283, 106], [579, 983], [-704, 194]]) == 4\nassert solution.findMinArrowShots([[601, 630], [729, 764], [-539, 680], [426, 862], [361, 469], [-187, 89], [-348, -88], [44, 773], [-860, 518], [-938, 515], [-85, 422], [58, 242], [-442, 485], [747, 993], [-989, 805], [249, 473], [926, 941], [996, 999], [245, 984], [462, 533], [201, 802], [-855, -616], [321, 737], [799, 987], [-741, -499], [-623, 938], [-516, 876], [596, 807], [634, 962], [754, 787], [-446, -98], [663, 853], [-777, 473], [-156, 815], [-657, -210], [629, 739], [-8, 172], [292, 305], [-797, 543], [723, 943], [981, 995], [409, 762], [-526, -202], [717, 858], [932, 978], [-465, 903], [-626, 301], [-489, 636], [-159, 352], [691, 838], [-596, 952], [180, 804], [666, 955], [-613, 483], [489, 643], [-82, 9], [78, 862], [-272, 994], [-448, 270], [-395, 388], [-422, -393], [-913, 175], [-128, 520], [-303, 416]]) == 12\nassert solution.findMinArrowShots([[-973, -477], [711, 929], [-539, 53], [675, 723], [617, 871], [-776, 773], [-940, 779], [-922, 73], [-653, -632], [345, 677], [-382, 522], [697, 758], [-96, 393], [42, 463], [-815, -665], [990, 994], [2, 932], [424, 790], [-456, 916], [706, 818], [923, 934], [-608, 407], [-35, 340], [-116, 452], [609, 647], [-762, 311], [-373, 436], [504, 618], [-909, 728], [-91, 158], [364, 641], [523, 532], [-41, 248], [297, 478]]) == 9\nassert solution.findMinArrowShots([[766, 921], [-738, 672], [-935, -781], [-8, 750], [31, 382], [-802, -744], [617, 712], [-460, -199], [-390, -360]]) == 5\nassert solution.findMinArrowShots([[640, 730], [-263, -257], [791, 852], [496, 768], [481, 941], [151, 734], [588, 814], [188, 355], [228, 402], [422, 460], [-724, 129], [-654, -231], [-490, 511], [175, 454], [785, 838], [541, 697], [-267, 453], [-250, 723], [972, 972], [622, 766], [340, 512], [512, 661], [-56, 529], [273, 655], [-811, -362], [890, 923], [326, 658], [213, 242], [745, 771], [0, 982], [333, 575], [297, 904], [-716, 540], [-71, 881], [114, 570], [377, 432], [572, 572], [502, 893], [519, 906], [866, 883], [178, 301], [-974, 350], [433, 627], [835, 914], [-619, 158], [-524, -508], [-510, 644], [-147, 902], [-383, -239], [-28, 471], [-12, 228], [599, 736], [-870, -695], [-450, -29], [-723, 367], [-379, 580], [255, 838]]) == 12\nassert solution.findMinArrowShots([[-951, -217], [668, 702], [-620, -207], [-584, -2], [398, 923], [-833, -477], [-359, -338], [-626, -115], [804, 805], [903, 909], [-707, 772], [224, 810], [-552, 62], [-886, -398], [-595, 32], [884, 909], [485, 877], [-317, 425], [-976, 776], [289, 718], [323, 923], [9, 187], [501, 677], [-786, 720], [250, 697], [-292, -160], [-86, 121], [-681, -328], [-148, 567], [-112, 577], [-181, 281], [113, 649], [-617, 878], [895, 911], [-876, 942], [-874, -719], [916, 917], [404, 831], [316, 362], [-602, 939], [788, 816], [879, 922], [490, 558], [989, 992], [-329, 625], [-883, 499], [886, 974], [194, 912], [-332, -164], [817, 992], [416, 659], [-193, -153], [-473, 810], [857, 875], [-383, 129], [87, 571], [-511, -392], [245, 667], [313, 480], [-825, 443], [-402, 242], [442, 459], [368, 988], [-937, 436], [889, 979], [435, 724], [-846, -100], [714, 762], [605, 639], [-773, 287], [573, 796], [-449, -386], [-241, 921], [-267, -50], [-740, 820], [389, 914], [100, 881], [-482, 304], [-625, -444], [405, 889], [-582, -513], [782, 829], [-168, -50], [815, 983], [565, 927], [316, 826], [774, 944], [262, 798], [27, 811], [-291, 966], [-663, -322], [-428, -321], [-464, 597], [-892, 75], [-845, 423], [-330, 176], [-264, 987]]) == 17\nassert solution.findMinArrowShots([[-517, 523], [-79, 732], [381, 939], [-142, 575], [-287, 543], [724, 817], [514, 525], [-155, 379], [-599, 877], [963, 995], [466, 517], [-366, 667], [493, 934], [384, 833], [-739, -541], [-318, 41], [914, 978], [358, 534], [-832, 923], [101, 861], [641, 875], [35, 662], [-138, 947], [-812, 443], [967, 995], [203, 568], [777, 875], [981, 983], [783, 819], [482, 868], [-754, 629], [-416, -393], [810, 883], [-584, -580], [392, 793], [-772, 390], [38, 959], [-546, 704], [-137, 595], [-58, 786], [-782, 673], [656, 882], [-123, 131], [-735, 222], [779, 990], [-196, 227], [711, 862], [-982, 828], [-723, 717], [109, 455], [-840, 363], [164, 674], [954, 995], [940, 978], [823, 917], [-724, -596], [-303, 885], [177, 455], [318, 685], [176, 833], [497, 558], [857, 942], [678, 899], [984, 994], [-681, -299], [742, 860], [539, 952]]) == 11",
  "inefficient_solution": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        arrows = []\n        for point in points:\n            arrows.extend([point[0], point[1], point[0], point[1]])\n        arrows.sort()\n        arrows = [arrows[i] for i in range(0, len(arrows), 4)]\n        arrow_count = 0\n        last = -float('inf')\n        for arrow in arrows:\n            if arrow > last:\n                arrow_count += 1\n                last = arrow\n        return arrow_count",
  "is_python": true
}