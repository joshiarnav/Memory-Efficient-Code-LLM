{
  "problem_idx": 1679,
  "task_name": "Max Number of K",
  "markdown_description": "\nYou are given an integer array `nums` and an integer `k`.\n\n\nIn one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.\n\n\nReturn *the maximum number of operations you can perform on the array*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], k = 5\n**Output:** 2\n**Explanation:** Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,1,3,4,3], k = 6\n**Output:** 1\n**Explanation:** Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        l, r, ans = 0, len(nums) - 1, 0\n        while l < r:\n            s = nums[l] + nums[r]\n            if s == k:\n                ans += 1\n                l, r = l + 1, r - 1\n            elif s > k:\n                r -= 1\n            else:\n                l += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        l, r, ans = 0, len(nums) - 1, 0\n        while l < r:\n            s = nums[l] + nums[r]\n            if s == k:\n                ans += 1\n                l, r = l + 1, r - 1\n            elif s > k:\n                r -= 1\n            else:\n                l += 1\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random target sum\n    k = random.randint(1, 201)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxOperations(nums, k)\n\n    return nums, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxOperations(nums, k) == expected_result\n        print(f\"assert solution.maxOperations({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxOperations({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxOperations([50, 54, 69, 72], 57) == 0\nassert solution.maxOperations([1, 7, 24, 41, 57, 96], 74) == 0\nassert solution.maxOperations([11, 17, 24, 27, 55, 74, 80, 82, 92], 35) == 1\nassert solution.maxOperations([36, 41, 43, 70, 75, 97], 111) == 2\nassert solution.maxOperations([43, 65, 95], 11) == 0\nassert solution.maxOperations([5, 31, 44, 59, 92, 96, 99], 140) == 1\nassert solution.maxOperations([23, 34, 40, 51, 57, 66, 77, 99], 172) == 0\nassert solution.maxOperations([30, 36, 54, 61, 67, 81], 96) == 0\nassert solution.maxOperations([13, 31, 55, 83, 100], 109) == 0\nassert solution.maxOperations([1, 2, 4, 13, 26, 37, 39, 73, 78, 91], 1) == 0\nassert solution.maxOperations([10, 33, 37, 48, 80, 88], 24) == 0\nassert solution.maxOperations([32, 33, 42, 63, 75, 81, 82, 94], 114) == 2\nassert solution.maxOperations([8, 27, 32, 36, 60, 91, 94], 69) == 0\nassert solution.maxOperations([16, 19, 22, 25, 30, 34, 49, 92, 99], 8) == 0\nassert solution.maxOperations([9, 19, 70, 90], 110) == 0\nassert solution.maxOperations([19, 35, 55, 73, 91], 11) == 0\nassert solution.maxOperations([71, 83, 89, 96], 192) == 0\nassert solution.maxOperations([29, 30, 35, 36, 37, 39, 52, 57, 78], 194) == 0\nassert solution.maxOperations([49, 83, 91], 82) == 0\nassert solution.maxOperations([20, 27, 49, 58, 61, 75, 95], 34) == 0\nassert solution.maxOperations([7, 26, 29, 49, 90, 95], 166) == 0\nassert solution.maxOperations([28, 30, 67], 111) == 0\nassert solution.maxOperations([19, 20, 26, 33, 50, 54, 72, 77, 80, 100], 73) == 1\nassert solution.maxOperations([10, 41, 42, 70, 96, 99], 114) == 0\nassert solution.maxOperations([19, 34, 73, 97], 177) == 0\nassert solution.maxOperations([21, 30, 32, 45, 54, 83, 88, 91, 98], 172) == 0\nassert solution.maxOperations([6, 17, 74, 100], 142) == 0\nassert solution.maxOperations([7, 25, 51, 68, 80, 88, 89, 90, 96], 188) == 0\nassert solution.maxOperations([29, 31, 65, 66, 71, 77, 79, 94, 96], 145) == 1\nassert solution.maxOperations([3, 4, 15, 38, 79, 90, 94, 99], 50) == 0\nassert solution.maxOperations([13, 21, 23, 27, 29, 46, 69, 77, 80, 81], 96) == 1\nassert solution.maxOperations([1, 4, 41, 47, 48, 68, 82], 170) == 0\nassert solution.maxOperations([18, 26, 84, 90], 40) == 0\nassert solution.maxOperations([3, 6, 70], 142) == 0\nassert solution.maxOperations([5, 42], 150) == 0\nassert solution.maxOperations([16, 23, 52, 77, 89, 100], 63) == 0\nassert solution.maxOperations([23, 55, 62, 73], 22) == 0\nassert solution.maxOperations([1, 15, 32, 40, 72, 77], 79) == 0\nassert solution.maxOperations([10, 18, 31, 33, 38, 52, 56, 69, 71], 149) == 0\nassert solution.maxOperations([47, 56, 66, 68, 80, 92], 152) == 0\nassert solution.maxOperations([1, 9, 23, 29, 47, 56, 64], 13) == 0\nassert solution.maxOperations([15, 27, 59, 66, 70, 90, 93, 98], 122) == 0\nassert solution.maxOperations([1, 2, 16, 27, 34, 44, 72, 100], 71) == 1\nassert solution.maxOperations([45, 50], 125) == 0\nassert solution.maxOperations([6, 22, 59, 60, 61, 63, 84, 96], 130) == 0\nassert solution.maxOperations([69, 91, 100], 101) == 0\nassert solution.maxOperations([6, 13, 24, 49, 53, 63, 68, 74, 76], 39) == 0\nassert solution.maxOperations([7, 18, 34, 75], 63) == 0\nassert solution.maxOperations([14, 31, 69, 75, 84, 94], 55) == 0\nassert solution.maxOperations([9, 17, 21, 24, 31, 32, 85], 10) == 0\nassert solution.maxOperations([47, 52, 74, 76, 78, 89], 102) == 0\nassert solution.maxOperations([11, 23, 44, 69], 24) == 0\nassert solution.maxOperations([27, 59, 69, 89], 93) == 0\nassert solution.maxOperations([6, 12, 14, 27, 28, 33, 50, 70], 138) == 0\nassert solution.maxOperations([8, 21, 43, 96], 76) == 0\nassert solution.maxOperations([14, 37, 43, 53, 84], 73) == 0\nassert solution.maxOperations([4, 39, 62, 87], 67) == 0\nassert solution.maxOperations([2, 15, 45, 54, 98, 99, 100], 25) == 0\nassert solution.maxOperations([35, 43, 49, 61, 63, 64, 74, 77, 98, 99], 19) == 0\nassert solution.maxOperations([21, 52], 79) == 0\nassert solution.maxOperations([2, 11, 65], 27) == 0\nassert solution.maxOperations([31, 46, 47, 51, 55, 66, 68, 99], 200) == 0\nassert solution.maxOperations([13, 37, 89], 118) == 0\nassert solution.maxOperations([15, 22, 45, 46, 58, 59, 60, 68], 106) == 1\nassert solution.maxOperations([13, 28, 29, 30, 42, 73, 76, 95], 79) == 0\nassert solution.maxOperations([11, 13, 20, 27, 42, 43, 44, 49, 58], 69) == 3\nassert solution.maxOperations([29, 32, 42, 44, 53, 63, 89], 136) == 0\nassert solution.maxOperations([17, 29, 34, 61, 82, 97, 98], 180) == 1\nassert solution.maxOperations([22, 53, 67], 79) == 0\nassert solution.maxOperations([2, 14, 60, 71, 79, 87], 108) == 0\nassert solution.maxOperations([9, 66, 70, 80, 92], 105) == 0\nassert solution.maxOperations([8, 15, 17, 22, 24, 30, 38, 42, 93], 106) == 0\nassert solution.maxOperations([22, 50, 61, 67, 94], 124) == 0\nassert solution.maxOperations([28, 92], 193) == 0\nassert solution.maxOperations([12, 22, 51, 78, 88, 94], 8) == 0\nassert solution.maxOperations([12, 39, 42, 48, 62, 76, 78, 82, 86], 94) == 1\nassert solution.maxOperations([5, 24, 35, 50, 51, 72, 79, 89], 13) == 0\nassert solution.maxOperations([4, 24, 41, 43, 59, 71, 85, 88, 91], 98) == 0\nassert solution.maxOperations([8, 26, 30, 48, 52, 56, 89, 92], 104) == 1\nassert solution.maxOperations([6, 9, 13, 25, 63, 65, 94, 100], 78) == 1\nassert solution.maxOperations([12, 17, 29, 39, 54, 59, 77, 78, 86], 179) == 0\nassert solution.maxOperations([2, 3, 10, 19, 20, 41, 88], 103) == 0\nassert solution.maxOperations([1, 21, 47, 58, 73], 105) == 1\nassert solution.maxOperations([49, 91], 24) == 0\nassert solution.maxOperations([27, 40, 61, 90, 91], 99) == 0\nassert solution.maxOperations([21, 22, 29, 67, 90], 180) == 0\nassert solution.maxOperations([1, 6], 144) == 0\nassert solution.maxOperations([6, 7, 33], 108) == 0\nassert solution.maxOperations([28, 95], 141) == 0\nassert solution.maxOperations([29, 34, 64, 83, 99], 150) == 0\nassert solution.maxOperations([19, 41, 56, 67, 90, 93, 94, 98], 157) == 1\nassert solution.maxOperations([71, 98], 198) == 0\nassert solution.maxOperations([13, 37, 48, 67, 85], 132) == 0\nassert solution.maxOperations([19, 22, 27, 63, 81], 14) == 0\nassert solution.maxOperations([28, 29, 49, 54, 63, 87, 91, 92], 120) == 2\nassert solution.maxOperations([10, 12, 35, 45, 62], 80) == 1\nassert solution.maxOperations([8, 20, 23, 30, 51, 53, 67, 100], 16) == 0\nassert solution.maxOperations([1, 22, 39, 80], 24) == 0\nassert solution.maxOperations([8, 21, 45, 62, 67, 68, 72, 75, 97], 27) == 0\nassert solution.maxOperations([12, 26, 36, 37, 45, 67, 68, 89, 98], 128) == 0",
  "inefficient_solution": "class Solution:\n    def maxOperations(self, nums: List[int], k: int) -> int:\n        count = {}\n        for num in nums:\n            if num not in count:\n                count[num] = 0\n            count[num] += 1\n\n        ans = 0\n        for num in nums:\n            if k - num in count and k - num != num:\n                ans += 1\n                count[num] -= 1\n                if count[num] == 0:\n                    del count[num]\n            elif k - num == num:\n                if num in count and count[num] > 1:\n                    ans += 1\n                    count[num] -= 2\n                    if count[num] == 0:\n                        del count[num]\n                else:\n                    ans += 1\n                    del count[num]\n        return ans",
  "is_python": true
}