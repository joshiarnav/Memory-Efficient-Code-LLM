{
  "problem_idx": 2517,
  "task_name": "Maximum Tastiness of Candy Basket",
  "markdown_description": "\nYou are given an array of positive integers `price` where `price[i]` denotes the price of the `ith` candy and a positive integer `k`.\n\n\nThe store sells baskets of `k` **distinct** candies. The **tastiness** of a candy basket is the smallest absolute difference of the **prices** of any two candies in the basket.\n\n\nReturn *the **maximum** tastiness of a candy basket.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** price = [13,5,1,8,21,2], k = 3\n**Output:** 8\n**Explanation:** Choose the candies with the prices [13,5,21].\nThe tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.\nIt can be proven that 8 is the maximum tastiness that can be achieved.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** price = [1,3,1], k = 2\n**Output:** 2\n**Explanation:** Choose the candies with the prices [1,3].\nThe tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.\nIt can be proven that 2 is the maximum tastiness that can be achieved.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** price = [7,7,7,7], k = 2\n**Output:** 0\n**Explanation:** Choosing any two distinct candies from the candies we have will result in a tastiness of 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= k <= price.length <= 105`\n* `1 <= price[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:\n        def check(x: int) -> bool:\n            cnt, pre = 0, -x\n            for cur in price:\n                if cur - pre >= x:\n                    pre = cur\n                    cnt += 1\n            return cnt >= k\n\n        price.sort()\n        l, r = 0, price[-1] - price[0]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:\n        def check(x: int) -> bool:\n            cnt, pre = 0, -x\n            for cur in price:\n                if cur - pre >= x:\n                    pre = cur\n                    cnt += 1\n            return cnt >= k\n\n        price.sort()\n        l, r = 0, price[-1] - price[0]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random price list\n    price = random.choices(range(1, 21), k=random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(2, len(price))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumTastiness(price, k)\n\n    return price, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        price, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumTastiness(price, k) == expected_result\n        print(f\"assert solution.maximumTastiness({price}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumTastiness({price}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumTastiness([4, 13, 14, 16, 17], 4) == 1\nassert solution.maximumTastiness([1, 1, 2, 3, 10, 16, 16, 18, 20], 4) == 4\nassert solution.maximumTastiness([1, 6, 9, 15, 16, 17, 17, 17, 19, 19], 5) == 3\nassert solution.maximumTastiness([6, 12], 2) == 6\nassert solution.maximumTastiness([3, 8, 17, 17], 2) == 14\nassert solution.maximumTastiness([1, 4, 11, 12], 2) == 11\nassert solution.maximumTastiness([2, 9, 12, 13], 2) == 11\nassert solution.maximumTastiness([9, 12, 12, 20, 20], 4) == 0\nassert solution.maximumTastiness([2, 17], 2) == 15\nassert solution.maximumTastiness([1, 1, 3, 5, 6, 9, 13, 13, 15, 17], 5) == 4\nassert solution.maximumTastiness([1, 3, 4, 6, 10, 12], 3) == 5\nassert solution.maximumTastiness([2, 3, 4, 6, 8, 10, 14], 6) == 2\nassert solution.maximumTastiness([2, 9, 9, 19, 20], 5) == 0\nassert solution.maximumTastiness([5, 9], 2) == 4\nassert solution.maximumTastiness([3, 5, 6, 11, 12, 17, 18], 7) == 1\nassert solution.maximumTastiness([2, 3, 8, 12, 15, 18, 18], 7) == 0\nassert solution.maximumTastiness([9, 10, 11, 14, 16, 18], 4) == 2\nassert solution.maximumTastiness([2, 8, 14, 15, 17, 18, 19, 20], 7) == 1\nassert solution.maximumTastiness([11, 12, 13, 13, 17, 18, 18], 2) == 7\nassert solution.maximumTastiness([4, 15, 20], 2) == 16\nassert solution.maximumTastiness([2, 4, 7, 8, 13, 13, 15, 16, 17, 20], 10) == 0\nassert solution.maximumTastiness([13, 20], 2) == 7\nassert solution.maximumTastiness([19, 20], 2) == 1\nassert solution.maximumTastiness([5, 6], 2) == 1\nassert solution.maximumTastiness([1, 2, 2, 3, 6, 7, 10, 11, 12, 14], 2) == 13\nassert solution.maximumTastiness([2, 4, 6, 8, 8, 10, 13, 16], 5) == 3\nassert solution.maximumTastiness([2, 17, 19], 2) == 17\nassert solution.maximumTastiness([11, 13, 14, 15, 16, 16, 19], 3) == 4\nassert solution.maximumTastiness([12, 18, 19, 20], 4) == 1\nassert solution.maximumTastiness([2, 10, 10, 14, 15], 4) == 1\nassert solution.maximumTastiness([1, 2, 7, 7, 8, 9, 11, 12, 15], 4) == 4\nassert solution.maximumTastiness([1, 10, 13, 13, 19], 2) == 18\nassert solution.maximumTastiness([2, 5, 6, 13, 17], 5) == 1\nassert solution.maximumTastiness([2, 6, 19, 19, 19], 2) == 17\nassert solution.maximumTastiness([1, 6, 7, 11, 13, 13, 14, 16, 17, 20], 2) == 19\nassert solution.maximumTastiness([8, 14], 2) == 6\nassert solution.maximumTastiness([1, 4, 7, 7, 8, 14, 18], 7) == 0\nassert solution.maximumTastiness([2, 2, 4, 6, 7, 10, 11, 12, 12, 16], 5) == 2\nassert solution.maximumTastiness([3, 10, 14], 3) == 4\nassert solution.maximumTastiness([6, 14, 19], 3) == 5\nassert solution.maximumTastiness([1, 9, 15, 19], 3) == 8\nassert solution.maximumTastiness([3, 6, 10, 14], 2) == 11\nassert solution.maximumTastiness([1, 3, 4, 6, 6, 7, 10, 14, 15, 20], 4) == 6\nassert solution.maximumTastiness([2, 2, 3, 4, 10, 16, 17], 2) == 15\nassert solution.maximumTastiness([1, 3, 3, 3, 3, 4, 5, 7, 16], 3) == 6\nassert solution.maximumTastiness([2, 3, 8, 10, 13, 17, 17], 4) == 4\nassert solution.maximumTastiness([1, 13], 2) == 12\nassert solution.maximumTastiness([6, 8, 10, 13, 15, 16, 20], 4) == 4\nassert solution.maximumTastiness([3, 3, 13, 14, 17, 18], 3) == 5\nassert solution.maximumTastiness([2, 3, 14, 17, 18], 2) == 16\nassert solution.maximumTastiness([1, 3, 5, 8, 11], 4) == 3\nassert solution.maximumTastiness([2, 4, 8, 12, 14, 15, 15, 16, 20, 20], 8) == 1\nassert solution.maximumTastiness([2, 8, 10, 17], 4) == 2\nassert solution.maximumTastiness([3, 6, 11, 14, 14, 16, 17, 20], 8) == 0\nassert solution.maximumTastiness([1, 2, 8, 16, 17, 17, 17, 18], 2) == 17\nassert solution.maximumTastiness([4, 9, 13], 3) == 4\nassert solution.maximumTastiness([2, 3, 4, 7, 9, 12, 13, 16, 19], 8) == 1\nassert solution.maximumTastiness([1, 2, 7, 8, 9, 10, 12, 17, 18, 19], 2) == 18\nassert solution.maximumTastiness([3, 8, 9], 3) == 1\nassert solution.maximumTastiness([6, 14], 2) == 8\nassert solution.maximumTastiness([3, 9, 20], 2) == 17\nassert solution.maximumTastiness([1, 2, 6, 9, 10, 11, 11, 12, 14, 17], 4) == 5\nassert solution.maximumTastiness([4, 4, 5, 5, 5, 12, 15, 15, 15, 18], 3) == 6\nassert solution.maximumTastiness([1, 4, 6, 6, 8, 9, 11, 12, 12, 18], 6) == 2\nassert solution.maximumTastiness([2, 17], 2) == 15\nassert solution.maximumTastiness([3, 6, 17], 2) == 14\nassert solution.maximumTastiness([7, 10, 15], 2) == 8\nassert solution.maximumTastiness([3, 13, 19], 3) == 6\nassert solution.maximumTastiness([7, 11, 15, 16], 3) == 4\nassert solution.maximumTastiness([2, 3, 3, 4, 6, 17, 18, 18], 4) == 2\nassert solution.maximumTastiness([4, 4, 7, 8, 9, 11, 11, 12, 15], 8) == 0\nassert solution.maximumTastiness([2, 3, 4, 6, 6, 15, 20, 20], 8) == 0\nassert solution.maximumTastiness([2, 11, 13, 13, 16, 17, 20], 2) == 18\nassert solution.maximumTastiness([2, 3, 3, 6, 10, 11, 13, 14, 16, 17], 9) == 1\nassert solution.maximumTastiness([6, 8], 2) == 2\nassert solution.maximumTastiness([4, 6, 18], 3) == 2\nassert solution.maximumTastiness([5, 9, 14], 2) == 9\nassert solution.maximumTastiness([11, 18], 2) == 7\nassert solution.maximumTastiness([8, 8, 9, 10, 12, 14, 15, 15, 16, 20], 6) == 2\nassert solution.maximumTastiness([9, 11, 12, 12, 14, 18, 20, 20], 4) == 2\nassert solution.maximumTastiness([2, 4, 5, 8, 9, 10, 10, 11, 13, 18], 8) == 1\nassert solution.maximumTastiness([7, 10, 13, 16, 19], 5) == 3\nassert solution.maximumTastiness([5, 5, 5, 7, 12, 12, 12, 16, 17], 9) == 0\nassert solution.maximumTastiness([5, 6, 12, 14, 15, 17, 20], 2) == 15\nassert solution.maximumTastiness([3, 7, 8, 8, 8, 11, 13, 17], 3) == 6\nassert solution.maximumTastiness([3, 5, 6, 8, 17, 17], 2) == 14\nassert solution.maximumTastiness([3, 3, 5, 9, 10, 11, 11, 14, 16], 4) == 2\nassert solution.maximumTastiness([3, 8, 15, 17, 19, 20], 4) == 5\nassert solution.maximumTastiness([2, 6, 8], 3) == 2\nassert solution.maximumTastiness([1, 4, 7, 8, 10, 11, 17, 17, 19], 6) == 2\nassert solution.maximumTastiness([2, 3, 8, 9, 9, 14, 14, 17], 4) == 3\nassert solution.maximumTastiness([2, 2, 3, 5, 5, 6, 7, 11, 15, 16], 7) == 1\nassert solution.maximumTastiness([7, 13, 15, 17], 2) == 10\nassert solution.maximumTastiness([2, 5, 6], 2) == 4\nassert solution.maximumTastiness([2, 8, 10, 17], 3) == 7\nassert solution.maximumTastiness([3, 5, 12, 13, 13, 13, 14, 14, 20, 20], 9) == 0\nassert solution.maximumTastiness([7, 9, 10, 11, 17, 17, 18, 20], 7) == 1\nassert solution.maximumTastiness([4, 10, 11, 17], 4) == 1\nassert solution.maximumTastiness([3, 5, 8, 15, 20], 4) == 5\nassert solution.maximumTastiness([3, 6, 6, 8, 14, 15, 19], 5) == 2",
  "inefficient_solution": "class Solution:\n    def maximumTastiness(self, price: List[int], k: int) -> int:\n        price_copy = price[:]\n        for _ in range(len(price)):\n            price_copy.sort()\n        def check(x: int) -> bool:\n            price_copy.sort()\n            cnt, pre = 0, -x\n            for cur in price_copy:\n                if cur - pre >= x:\n                    pre = cur\n                    cnt += 1\n            return cnt >= k\n\n        price_copy.sort(reverse=True)\n        l, r = 0, price_copy[0] - price_copy[-1]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n\n        price = []\n        for _ in range(len(price_copy)):\n            price.append(price_copy[0])\n            price_copy.pop(0)\n        price.sort(reverse=True)\n        l, r = 0, price[0] - price[-1]\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l",
  "is_python": true
}