{
  "problem_idx": 2294,
  "task_name": "Partition Array Such That Maximum Difference Is K",
  "markdown_description": "\nYou are given an integer array `nums` and an integer `k`. You may partition `nums` into one or more **subsequences** such that each element in `nums` appears in **exactly** one of the subsequences.\n\n\nReturn *the **minimum** number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is **at most*** `k`*.*\n\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,6,1,2,5], k = 2\n**Output:** 2\n**Explanation:**\nWe can partition nums into the two subsequences [3,1,2] and [6,5].\nThe difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.\nThe difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.\nSince two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3], k = 1\n**Output:** 2\n**Explanation:**\nWe can partition nums into the two subsequences [1,2] and [3].\nThe difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.\nThe difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.\nSince two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,2,4,5], k = 0\n**Output:** 3\n**Explanation:**\nWe can partition nums into the three subsequences [2,2], [4], and [5].\nThe difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.\nThe difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.\nThe difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.\nSince three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 105`\n* `0 <= k <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def partitionArray(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans, a = 1, nums[0]\n        for b in nums:\n            if b - a > k:\n                a = b\n                ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def partitionArray(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans, a = 1, nums[0]\n        for b in nums:\n            if b - a > k:\n                a = b\n                ans += 1\n        return ans\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random target sum\n    k = random.randint(0, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.partitionArray(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.partitionArray(nums, k) == expected_result\n        print(f\"assert solution.partitionArray({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.partitionArray({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.partitionArray([2, 17, 19, 21, 48, 64, 65, 72, 74, 78], 88) == 1\nassert solution.partitionArray([59, 63], 70) == 1\nassert solution.partitionArray([2, 15, 27, 42, 47, 57], 74) == 1\nassert solution.partitionArray([80, 99], 14) == 2\nassert solution.partitionArray([5, 16, 21, 39, 45], 15) == 3\nassert solution.partitionArray([9, 10, 21, 24, 31, 92], 4) == 4\nassert solution.partitionArray([20, 45, 66, 74, 77, 88, 89], 56) == 2\nassert solution.partitionArray([2, 14, 41, 63, 76, 88, 99], 62) == 2\nassert solution.partitionArray([33, 50, 78, 93], 11) == 4\nassert solution.partitionArray([6, 20, 69, 98], 27) == 3\nassert solution.partitionArray([10, 14, 20, 29, 39, 58, 63, 78], 81) == 1\nassert solution.partitionArray([5, 36, 94], 58) == 2\nassert solution.partitionArray([2, 59], 66) == 1\nassert solution.partitionArray([5, 12, 22, 33, 50, 70], 87) == 1\nassert solution.partitionArray([11, 26, 93], 4) == 3\nassert solution.partitionArray([26, 35, 46, 52, 96], 44) == 2\nassert solution.partitionArray([5, 8], 21) == 1\nassert solution.partitionArray([7, 11, 26, 37, 45, 50, 56, 85], 38) == 2\nassert solution.partitionArray([8, 19], 60) == 1\nassert solution.partitionArray([5, 19, 32, 38, 87], 16) == 3\nassert solution.partitionArray([10, 26, 30, 48, 74, 94, 96], 8) == 5\nassert solution.partitionArray([2, 34, 74, 88], 46) == 2\nassert solution.partitionArray([1, 16, 20, 33, 57, 61, 68, 73, 74], 86) == 1\nassert solution.partitionArray([3, 14, 30, 62, 65, 74, 81, 91, 92, 100], 46) == 2\nassert solution.partitionArray([92, 99], 7) == 1\nassert solution.partitionArray([12, 22, 40, 75, 80, 95, 96], 94) == 1\nassert solution.partitionArray([17, 56, 71], 95) == 1\nassert solution.partitionArray([22, 23, 29, 47, 51, 64, 82], 70) == 1\nassert solution.partitionArray([11, 18, 19, 20, 29, 42, 52, 70, 88, 98], 11) == 5\nassert solution.partitionArray([42, 50, 55, 75, 90, 93], 44) == 2\nassert solution.partitionArray([26, 35, 80, 100], 9) == 3\nassert solution.partitionArray([11, 23, 37, 49, 50, 56, 67, 83, 91, 99], 41) == 3\nassert solution.partitionArray([4, 12, 13, 26, 30, 49, 75, 79], 24) == 3\nassert solution.partitionArray([22, 27, 36, 37, 59], 75) == 1\nassert solution.partitionArray([6, 37, 62, 68, 92], 52) == 2\nassert solution.partitionArray([39, 66, 75, 80, 87, 88], 52) == 1\nassert solution.partitionArray([32, 46, 55, 67, 90], 18) == 3\nassert solution.partitionArray([6, 13, 28, 29, 61, 90, 95], 56) == 2\nassert solution.partitionArray([3, 63, 71, 82, 100], 92) == 2\nassert solution.partitionArray([78, 85], 52) == 1\nassert solution.partitionArray([42, 54, 70, 74, 96], 49) == 2\nassert solution.partitionArray([37, 42, 48, 97], 19) == 2\nassert solution.partitionArray([39, 41, 52, 88, 94], 58) == 1\nassert solution.partitionArray([8, 16, 50, 56, 60, 80, 99], 92) == 1\nassert solution.partitionArray([15, 33, 57, 70, 88, 90], 60) == 2\nassert solution.partitionArray([30, 31, 40, 41, 45, 56, 73, 80, 81, 86], 71) == 1\nassert solution.partitionArray([10, 14, 16, 23, 27, 48, 55, 60, 83], 62) == 2\nassert solution.partitionArray([2, 17, 25, 35, 52, 57, 63, 66, 76, 99], 27) == 4\nassert solution.partitionArray([6, 12, 13, 28, 35, 64, 82, 88, 91, 99], 44) == 2\nassert solution.partitionArray([1, 15, 39, 65, 74, 87], 17) == 4\nassert solution.partitionArray([2, 3, 38, 45, 58, 61, 80, 98], 9) == 5\nassert solution.partitionArray([72, 87], 77) == 1\nassert solution.partitionArray([1, 5, 34, 36, 41, 43, 84], 59) == 2\nassert solution.partitionArray([4, 15, 18, 28, 57, 73, 75, 77, 85], 22) == 4\nassert solution.partitionArray([3, 13, 39, 51, 57, 58, 89, 94], 49) == 2\nassert solution.partitionArray([75, 95], 13) == 2\nassert solution.partitionArray([7, 34, 38, 39, 50, 59, 61, 88, 95], 0) == 9\nassert solution.partitionArray([10, 28, 38, 56, 70, 77, 82, 88, 89, 97], 55) == 2\nassert solution.partitionArray([18, 22, 23, 46, 53, 74, 75, 84, 86, 92], 31) == 3\nassert solution.partitionArray([12, 32, 42, 45, 90], 17) == 3\nassert solution.partitionArray([27, 99], 20) == 2\nassert solution.partitionArray([14, 51, 67], 5) == 3\nassert solution.partitionArray([1, 2, 21, 29, 54, 57, 74, 88, 96, 100], 85) == 2\nassert solution.partitionArray([14, 38], 37) == 1\nassert solution.partitionArray([51, 86], 31) == 2\nassert solution.partitionArray([8, 11, 27, 50, 54, 59, 68, 89, 96, 97], 58) == 2\nassert solution.partitionArray([3, 8, 21, 46, 60, 73, 86, 87], 24) == 3\nassert solution.partitionArray([11, 12, 15, 40, 43, 50, 96], 0) == 7\nassert solution.partitionArray([17, 45, 55], 37) == 2\nassert solution.partitionArray([7, 12, 23, 27, 38, 39, 85], 27) == 3\nassert solution.partitionArray([28, 36, 37, 47, 55, 75, 77, 84, 97], 12) == 4\nassert solution.partitionArray([6, 13, 16, 21, 24, 35, 36, 47, 48, 84], 38) == 2\nassert solution.partitionArray([3, 6, 20, 26, 65, 71, 72, 73, 81], 100) == 1\nassert solution.partitionArray([2, 51, 67], 69) == 1\nassert solution.partitionArray([53, 62, 67, 79, 80, 82, 87, 90], 48) == 1\nassert solution.partitionArray([11, 16, 52, 67, 72, 78, 93], 43) == 2\nassert solution.partitionArray([16, 19, 26], 43) == 1\nassert solution.partitionArray([6, 13, 23, 31, 80, 95], 34) == 2\nassert solution.partitionArray([1, 18, 81, 84], 87) == 1\nassert solution.partitionArray([2, 10, 78], 20) == 2\nassert solution.partitionArray([5, 8, 19, 25, 26, 38, 53, 66, 71, 78], 46) == 2\nassert solution.partitionArray([28, 47, 58, 99], 90) == 1\nassert solution.partitionArray([56, 76, 85, 91, 97, 98], 1) == 5\nassert solution.partitionArray([2, 24, 35, 54, 67, 75, 86], 8) == 6\nassert solution.partitionArray([39, 43, 53, 57, 58], 61) == 1\nassert solution.partitionArray([8, 17, 23, 30, 32, 43, 75, 83, 88, 89], 19) == 3\nassert solution.partitionArray([24, 36, 75], 45) == 2\nassert solution.partitionArray([9, 24, 29, 30, 32, 39, 41, 43, 68, 69], 65) == 1\nassert solution.partitionArray([1, 20, 35, 36, 47, 54, 63, 68, 87], 17) == 5\nassert solution.partitionArray([23, 37], 81) == 1\nassert solution.partitionArray([18, 35, 74, 77, 80], 62) == 1\nassert solution.partitionArray([44, 59, 67, 79, 93, 95], 60) == 1\nassert solution.partitionArray([61, 68, 69, 92, 94], 36) == 1\nassert solution.partitionArray([11, 16, 37], 11) == 2\nassert solution.partitionArray([9, 31, 53, 62, 74, 82, 88, 92], 90) == 1\nassert solution.partitionArray([10, 11, 27, 34, 47, 52, 59, 66, 73, 86], 21) == 4\nassert solution.partitionArray([14, 16, 20, 32, 73, 98], 73) == 2\nassert solution.partitionArray([2, 19, 60, 79, 87, 95], 15) == 5\nassert solution.partitionArray([71, 77, 80, 89, 95], 88) == 1\nassert solution.partitionArray([1, 4, 10, 24, 39, 44, 77, 88, 98], 13) == 5",
  "inefficient_solution": "class Solution:\n    def partitionArray(self, nums: List[int], k: int) -> int:\n        nums_dict = {}\n        for num in nums:\n            if num not in nums_dict:\n                nums_dict[num] = 0\n            nums_dict[num] += 1\n        \n        result = []\n        for num in nums_dict:\n            result.append((num, nums_dict[num]))\n        \n        result.sort()\n        subseq_count = 1\n        subseq_min = result[0][0]\n        subseq_max = result[0][0]\n        for i in range(1, len(result)):\n            if result[i][0] - subseq_max > k:\n                subseq_count += 1\n                subseq_min = result[i][0]\n                subseq_max = result[i][0]\n            else:\n                subseq_min = min(subseq_min, result[i][0])\n                subseq_max = max(subseq_max, result[i][0])\n        return subseq_count",
  "is_python": true
}