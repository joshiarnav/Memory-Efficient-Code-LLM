{
  "problem_idx": 1247,
  "task_name": "Minimum Swaps to Make Strings Equal",
  "markdown_description": "\nYou are given two strings `s1` and `s2` of equal length consisting of letters `\"x\"` and `\"y\"` **only**. Your task is to make these two strings equal to each other. You can swap any two characters that belong to **different** strings, which means: swap `s1[i]` and `s2[j]`.\n\n\nReturn the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"xx\", s2 = \"yy\"\n**Output:** 1\n**Explanation:** Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"xy\", s2 = \"yx\"\n**Output:** 2\n**Explanation:** Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you cannot swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s1 = \"xx\", s2 = \"xy\"\n**Output:** -1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s1.length, s2.length <= 1000`\n* `s1.length == s2.length`\n* `s1, s2` only contain `'x'` or `'y'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumSwap(self, s1: str, s2: str) -> int:\n        xy = yx = 0\n        for a, b in zip(s1, s2):\n            xy += a < b\n            yx += a > b\n        if (xy + yx) % 2:\n            return -1\n        return xy // 2 + yx // 2 + xy % 2 + yx % 2\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumSwap(self, s1: str, s2: str) -> int:\n        xy = yx = 0\n        for a, b in zip(s1, s2):\n            xy += a < b\n            yx += a > b\n        if (xy + yx) % 2:\n            return -1\n        return xy // 2 + yx // 2 + xy % 2 + yx % 2\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate s1 and s2 strings of equal length\n    length = random.randint(1, 10)\n    s1 = \"\".join(random.choice([\"x\", \"y\"]) for _ in range(length))\n    s2 = \"\".join(random.choice([\"x\", \"y\"]) for _ in range(length))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumSwap(s1, s2)\n\n    return s1, s2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s1, s2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumSwap(s1, s2) == expected_result\n        print(f'assert solution.minimumSwap(\"{s1}\", \"{s2}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.minimumSwap(\"{s1}\", \"{s2}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumSwap(\"xy\", \"yy\") == -1\nassert solution.minimumSwap(\"xxyyyx\", \"xxyxxy\") == -1\nassert solution.minimumSwap(\"yyyxyxyx\", \"xyxyyyxx\") == -1\nassert solution.minimumSwap(\"yyxyx\", \"yyyxy\") == -1\nassert solution.minimumSwap(\"xxyxxxxx\", \"xxxxyyxy\") == 3\nassert solution.minimumSwap(\"y\", \"y\") == 0\nassert solution.minimumSwap(\"x\", \"x\") == 0\nassert solution.minimumSwap(\"yxxx\", \"xxyy\") == -1\nassert solution.minimumSwap(\"yxyyyx\", \"yyxyyx\") == 2\nassert solution.minimumSwap(\"xyyxxy\", \"yyxyxx\") == 2\nassert solution.minimumSwap(\"xxyyxy\", \"yxxxxx\") == 3\nassert solution.minimumSwap(\"yyxyxx\", \"xxyxyx\") == -1\nassert solution.minimumSwap(\"yxxyxy\", \"yxxyyx\") == 2\nassert solution.minimumSwap(\"yxyyyxyyy\", \"xxxxyxxxy\") == -1\nassert solution.minimumSwap(\"xx\", \"xy\") == -1\nassert solution.minimumSwap(\"xxyyxxx\", \"xyyyxxx\") == -1\nassert solution.minimumSwap(\"xxyxyxxy\", \"yyyyxxyx\") == 3\nassert solution.minimumSwap(\"xyy\", \"xxy\") == -1\nassert solution.minimumSwap(\"yxyyx\", \"yyyxx\") == 2\nassert solution.minimumSwap(\"yxyy\", \"xyyx\") == -1\nassert solution.minimumSwap(\"xyyyx\", \"yyyxx\") == 2\nassert solution.minimumSwap(\"x\", \"x\") == 0\nassert solution.minimumSwap(\"xyyxyy\", \"yxxxyx\") == 3\nassert solution.minimumSwap(\"yyxyx\", \"xxxyx\") == 1\nassert solution.minimumSwap(\"yyyyyx\", \"yyxyxx\") == 1\nassert solution.minimumSwap(\"yyyxx\", \"xyxxx\") == 1\nassert solution.minimumSwap(\"x\", \"x\") == 0\nassert solution.minimumSwap(\"yxyyxx\", \"xyyxyx\") == 2\nassert solution.minimumSwap(\"yxx\", \"xxy\") == 2\nassert solution.minimumSwap(\"xyy\", \"xyx\") == -1\nassert solution.minimumSwap(\"yxy\", \"xxx\") == 1\nassert solution.minimumSwap(\"yx\", \"xx\") == -1\nassert solution.minimumSwap(\"yxxxxxxyxy\", \"xxxxxyyyxy\") == -1\nassert solution.minimumSwap(\"yyyyyyy\", \"xyyxxxx\") == -1\nassert solution.minimumSwap(\"yyxxyyx\", \"yxyyxyx\") == 2\nassert solution.minimumSwap(\"xyxy\", \"xxxy\") == -1\nassert solution.minimumSwap(\"yx\", \"yy\") == -1\nassert solution.minimumSwap(\"xyx\", \"yxx\") == 2\nassert solution.minimumSwap(\"yxxyxy\", \"yyyxyy\") == 3\nassert solution.minimumSwap(\"x\", \"y\") == -1\nassert solution.minimumSwap(\"y\", \"x\") == -1\nassert solution.minimumSwap(\"yxyxyx\", \"xyxyxy\") == 4\nassert solution.minimumSwap(\"yx\", \"xy\") == 2\nassert solution.minimumSwap(\"yy\", \"yy\") == 0\nassert solution.minimumSwap(\"x\", \"y\") == -1\nassert solution.minimumSwap(\"xyyyxyyxx\", \"xxyyxxxyy\") == -1\nassert solution.minimumSwap(\"xx\", \"yy\") == 1\nassert solution.minimumSwap(\"xy\", \"yy\") == -1\nassert solution.minimumSwap(\"xxyxy\", \"yyxxy\") == -1\nassert solution.minimumSwap(\"xyxxyx\", \"yyyyyy\") == 2\nassert solution.minimumSwap(\"yyyx\", \"xxyy\") == -1\nassert solution.minimumSwap(\"yxyyxyxxy\", \"xxyyxyxyy\") == 2\nassert solution.minimumSwap(\"y\", \"y\") == 0\nassert solution.minimumSwap(\"xyx\", \"xxx\") == -1\nassert solution.minimumSwap(\"yxxxyy\", \"yxxyxx\") == -1\nassert solution.minimumSwap(\"yyyyx\", \"xxyyx\") == 1\nassert solution.minimumSwap(\"xxxyxxxyxy\", \"xyxyyyyxyx\") == -1\nassert solution.minimumSwap(\"yxyxxy\", \"yxxyyy\") == -1\nassert solution.minimumSwap(\"yxxxyyyx\", \"yxxyyxyx\") == 2\nassert solution.minimumSwap(\"xxxyyyxyxx\", \"xxxxxyxyyy\") == 2\nassert solution.minimumSwap(\"yyxxxyyx\", \"yyxxyyxy\") == -1\nassert solution.minimumSwap(\"xyyyxxxx\", \"xyyxyxyx\") == -1\nassert solution.minimumSwap(\"xx\", \"yy\") == 1\nassert solution.minimumSwap(\"yyyyyyxx\", \"yyxyyyxy\") == 2\nassert solution.minimumSwap(\"xxxxxxxyy\", \"xyyxyyyyy\") == -1\nassert solution.minimumSwap(\"xxxyxyxyyy\", \"xxxxyxxyyx\") == 3\nassert solution.minimumSwap(\"yxyxxxyyx\", \"xxyxyyxxy\") == 4\nassert solution.minimumSwap(\"xxy\", \"xyy\") == -1\nassert solution.minimumSwap(\"yyxy\", \"xyyx\") == -1\nassert solution.minimumSwap(\"yyyxxx\", \"xxyyyy\") == -1\nassert solution.minimumSwap(\"yyyxyxyyy\", \"xxyxxyxxy\") == 4\nassert solution.minimumSwap(\"yxxxxyyyxy\", \"yxxxxxxyxx\") == -1\nassert solution.minimumSwap(\"xxxxyyyyxy\", \"yxyyxyyyxy\") == 3\nassert solution.minimumSwap(\"xyx\", \"yxx\") == 2\nassert solution.minimumSwap(\"y\", \"y\") == 0\nassert solution.minimumSwap(\"xxyxxyx\", \"yyyxxyy\") == -1\nassert solution.minimumSwap(\"yxyyxxx\", \"yyyxyyy\") == -1\nassert solution.minimumSwap(\"yxxx\", \"xyxx\") == 2\nassert solution.minimumSwap(\"yxy\", \"yyx\") == 2\nassert solution.minimumSwap(\"xx\", \"xx\") == 0\nassert solution.minimumSwap(\"yyyxyxyxyx\", \"yyyxxxxxxy\") == 3\nassert solution.minimumSwap(\"xyyxyxxx\", \"yxyxyyyx\") == 3\nassert solution.minimumSwap(\"yx\", \"xy\") == 2\nassert solution.minimumSwap(\"yyxxyyyyx\", \"xyyxyxxyy\") == -1\nassert solution.minimumSwap(\"xxyyyxxyy\", \"xxxyxxyxx\") == -1\nassert solution.minimumSwap(\"xyy\", \"yyy\") == -1\nassert solution.minimumSwap(\"xyxxxxyy\", \"yxyxyxxx\") == 4\nassert solution.minimumSwap(\"xxy\", \"xxy\") == 0\nassert solution.minimumSwap(\"xyyx\", \"yxxx\") == -1\nassert solution.minimumSwap(\"xyxyyxx\", \"yyyyxyy\") == -1\nassert solution.minimumSwap(\"yx\", \"yy\") == -1\nassert solution.minimumSwap(\"xyx\", \"xxx\") == -1\nassert solution.minimumSwap(\"yxx\", \"yyy\") == 1\nassert solution.minimumSwap(\"yxxyyy\", \"yyyxxy\") == 2\nassert solution.minimumSwap(\"xyxyyyxy\", \"xxyyyyyy\") == -1\nassert solution.minimumSwap(\"xxxxxx\", \"xxyxyx\") == 1\nassert solution.minimumSwap(\"yxyyxxx\", \"xyyyxyy\") == 3\nassert solution.minimumSwap(\"xyx\", \"xxy\") == 2\nassert solution.minimumSwap(\"yxxyyyxx\", \"xyyxyxxx\") == -1\nassert solution.minimumSwap(\"yxyyx\", \"yxxyx\") == -1",
  "inefficient_solution": "class Solution:\n    def minimumSwap(self, s1: str, s2: str) -> int:\n        char_counts = {}\n        for char in s1 + s2:\n            if char not in char_counts:\n                char_counts[char] = 0\n            char_counts[char] += 1\n\n        if char_counts['x'] != char_counts['y']:\n            return -1\n\n        swap_pairs = {}\n        for i in range(len(s1)):\n            if s1[i] != s2[i]:\n                swap_pairs[(s1[i], s2[i])] = swap_pairs.get((s1[i], s2[i]), 0) + 1\n\n        if len(swap_pairs) == 0:\n            return 0\n\n        max_swaps = 0\n        for pair, count in swap_pairs.items():\n            max_swaps = max(max_swaps, count)\n\n        swaps_required = max_swaps\n        for pair, count in swap_pairs.items():\n            swaps_required += (count - 1) // 2\n\n        return swaps_required",
  "is_python": true
}