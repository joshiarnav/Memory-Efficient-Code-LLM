{
  "problem_idx": 1202,
  "task_name": "Smallest String With Swaps",
  "markdown_description": "\nYou are given a string `s`, and an array of pairs of indices in the string\u00a0`pairs`\u00a0where\u00a0`pairs[i] =\u00a0[a, b]`\u00a0indicates 2 indices(0-indexed) of the string.\n\n\nYou can\u00a0swap the characters at any pair of indices in the given\u00a0`pairs`\u00a0**any number of times**.\n\n\nReturn the\u00a0lexicographically smallest string that `s`\u00a0can be changed to after using the swaps.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"dcab\", pairs = [[0,3],[1,2]]\n**Output:** \"bacd\"\n**Explaination:** \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and s[2], s = \"bacd\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]\n**Output:** \"abcd\"\n**Explaination:** \nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"cba\", pairs = [[0,1],[1,2]]\n**Output:** \"abc\"\n**Explaination:** \nSwap s[0] and s[1], s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 10^5`\n* `0 <= pairs.length <= 10^5`\n* `0 <= pairs[i][0], pairs[i][1] <\u00a0s.length`\n* `s`\u00a0only contains lower case English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(s)\n        p = list(range(n))\n        for a, b in pairs:\n            p[find(a)] = find(b)\n        d = defaultdict(list)\n        for i, c in enumerate(s):\n            d[find(i)].append(c)\n        for i in d.keys():\n            d[i].sort(reverse=True)\n        return \"\".join(d[find(i)].pop() for i in range(n))\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(s)\n        p = list(range(n))\n        for a, b in pairs:\n            p[find(a)] = find(b)\n        d = defaultdict(list)\n        for i, c in enumerate(s):\n            d[find(i)].append(c)\n        for i in d.keys():\n            d[i].sort(reverse=True)\n        return \"\".join(d[find(i)].pop() for i in range(n))\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random string\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n\n    # Generate random pairs\n    num_pairs = random.randint(0, 10)\n    pairs = []\n    for _ in range(num_pairs):\n        a = random.randint(0, len(s)-1)\n        b = random.randint(0, len(s)-1)\n        pairs.append([a, b])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestStringWithSwaps(s, pairs)\n\n    return s, pairs, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, pairs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestStringWithSwaps(s, pairs) == expected_result\n        print(f\"assert solution.smallestStringWithSwaps(\\\"{s}\\\", {pairs}) == \\\"{expected_result}\\\"\")\n        test_case_generator_results.append(f\"assert solution.smallestStringWithSwaps(\\\"{s}\\\", {pairs}) == \\\"{expected_result}\\\"\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestStringWithSwaps(\"umhqdoer\", [[7, 1], [4, 3], [2, 4]]) == \"umdhqoer\"\nassert solution.smallestStringWithSwaps(\"tqsxumpkc\", [[2, 2]]) == \"tqsxumpkc\"\nassert solution.smallestStringWithSwaps(\"hdjkaovum\", [[1, 0], [7, 2], [7, 5], [0, 1], [2, 0], [5, 5], [1, 3]]) == \"dhjkaovum\"\nassert solution.smallestStringWithSwaps(\"cqdqsfcl\", [[2, 1], [4, 3], [4, 6], [5, 5], [5, 4], [4, 7]]) == \"cdqcflqs\"\nassert solution.smallestStringWithSwaps(\"u\", [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == \"u\"\nassert solution.smallestStringWithSwaps(\"y\", [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == \"y\"\nassert solution.smallestStringWithSwaps(\"wtlbj\", [[4, 2]]) == \"wtjbl\"\nassert solution.smallestStringWithSwaps(\"sdtyuqix\", [[5, 2], [6, 7], [4, 4], [7, 3]]) == \"sdqiutxy\"\nassert solution.smallestStringWithSwaps(\"vxyj\", [[0, 0]]) == \"vxyj\"\nassert solution.smallestStringWithSwaps(\"gnjm\", [[2, 1], [1, 1], [3, 0], [3, 1], [1, 2]]) == \"gjmn\"\nassert solution.smallestStringWithSwaps(\"z\", []) == \"z\"\nassert solution.smallestStringWithSwaps(\"h\", [[0, 0], [0, 0]]) == \"h\"\nassert solution.smallestStringWithSwaps(\"zfjsl\", [[4, 3], [0, 3]]) == \"lfjsz\"\nassert solution.smallestStringWithSwaps(\"cbfnu\", [[4, 3], [4, 3], [0, 0], [1, 3], [2, 4], [4, 3], [4, 3], [0, 2], [4, 4]]) == \"bcfnu\"\nassert solution.smallestStringWithSwaps(\"qajhlfhxe\", [[5, 3], [6, 5], [6, 5], [5, 5], [1, 3], [6, 0], [8, 2], [2, 7]]) == \"afehlhqjx\"\nassert solution.smallestStringWithSwaps(\"evepzv\", [[5, 1], [3, 4], [5, 2], [2, 4], [0, 4]]) == \"eepvvz\"\nassert solution.smallestStringWithSwaps(\"dwmusjd\", [[6, 5], [2, 1]]) == \"dmwusdj\"\nassert solution.smallestStringWithSwaps(\"ufkoaxqcoi\", [[3, 2]]) == \"ufkoaxqcoi\"\nassert solution.smallestStringWithSwaps(\"ulltn\", []) == \"ulltn\"\nassert solution.smallestStringWithSwaps(\"hcxhhhdasg\", [[7, 2], [5, 0], [5, 9], [5, 1], [3, 6], [9, 6]]) == \"cdaghhhxsh\"\nassert solution.smallestStringWithSwaps(\"zpoxa\", [[1, 4], [4, 1], [1, 0], [4, 0], [3, 4], [2, 1]]) == \"aopxz\"\nassert solution.smallestStringWithSwaps(\"g\", [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == \"g\"\nassert solution.smallestStringWithSwaps(\"fdttqwi\", [[5, 6], [2, 5], [1, 6], [0, 2], [1, 1]]) == \"dfitqtw\"\nassert solution.smallestStringWithSwaps(\"h\", [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == \"h\"\nassert solution.smallestStringWithSwaps(\"ubig\", [[1, 0], [3, 3]]) == \"buig\"\nassert solution.smallestStringWithSwaps(\"xcaoqcheyv\", [[4, 4], [7, 7], [0, 9]]) == \"vcaoqcheyx\"\nassert solution.smallestStringWithSwaps(\"v\", [[0, 0], [0, 0]]) == \"v\"\nassert solution.smallestStringWithSwaps(\"c\", [[0, 0], [0, 0]]) == \"c\"\nassert solution.smallestStringWithSwaps(\"ovwuwrbvk\", [[7, 4]]) == \"ovwuvrbwk\"\nassert solution.smallestStringWithSwaps(\"wtzuynfecg\", [[1, 9], [8, 3], [0, 6], [5, 4]]) == \"fgzcnyweut\"\nassert solution.smallestStringWithSwaps(\"mdpagxpbdy\", []) == \"mdpagxpbdy\"\nassert solution.smallestStringWithSwaps(\"sosdpano\", [[6, 1], [0, 1], [4, 4], [6, 1], [6, 2], [4, 1], [6, 2]]) == \"nopdsaso\"\nassert solution.smallestStringWithSwaps(\"dmisjdlvjr\", [[4, 2], [7, 6], [1, 4], [4, 2], [7, 5]]) == \"dijsmdlvjr\"\nassert solution.smallestStringWithSwaps(\"nefb\", [[0, 0], [1, 1], [3, 0], [1, 1], [1, 2], [1, 1], [0, 1], [1, 0], [3, 2], [0, 3]]) == \"befn\"\nassert solution.smallestStringWithSwaps(\"ecb\", [[2, 1], [1, 1], [1, 1], [2, 0], [2, 0], [1, 2]]) == \"bce\"\nassert solution.smallestStringWithSwaps(\"pl\", [[0, 0], [0, 0], [1, 1], [1, 0], [1, 1]]) == \"lp\"\nassert solution.smallestStringWithSwaps(\"lz\", [[0, 0], [1, 0], [1, 0], [0, 0], [0, 1], [1, 0]]) == \"lz\"\nassert solution.smallestStringWithSwaps(\"armdwbi\", [[6, 1], [6, 6], [6, 2], [2, 6], [1, 6], [4, 1]]) == \"aimdrbw\"\nassert solution.smallestStringWithSwaps(\"cmplraggjf\", [[0, 6]]) == \"cmplraggjf\"\nassert solution.smallestStringWithSwaps(\"kduyww\", [[1, 2], [5, 4], [5, 4], [0, 1], [5, 3]]) == \"dkuwwy\"\nassert solution.smallestStringWithSwaps(\"o\", [[0, 0], [0, 0], [0, 0], [0, 0]]) == \"o\"\nassert solution.smallestStringWithSwaps(\"khglhscjr\", [[2, 3], [1, 3], [4, 8], [4, 3], [8, 1], [6, 7], [2, 2], [3, 8], [6, 4]]) == \"kcghhsjlr\"\nassert solution.smallestStringWithSwaps(\"gdnrfplpqi\", [[7, 6], [6, 8], [7, 1], [8, 2], [4, 2], [4, 3], [4, 1], [6, 4]]) == \"gdflnppqri\"\nassert solution.smallestStringWithSwaps(\"pjnrwbn\", [[1, 6], [1, 0], [6, 5], [2, 0], [0, 0], [3, 2], [2, 6], [0, 6]]) == \"bjnnwpr\"\nassert solution.smallestStringWithSwaps(\"anqy\", [[2, 3], [2, 1], [3, 3], [3, 2], [3, 1], [2, 1], [1, 3], [0, 3]]) == \"anqy\"\nassert solution.smallestStringWithSwaps(\"de\", [[0, 0], [0, 1], [0, 1], [0, 1], [1, 1], [0, 0], [1, 1], [1, 0], [1, 1]]) == \"de\"\nassert solution.smallestStringWithSwaps(\"r\", []) == \"r\"\nassert solution.smallestStringWithSwaps(\"nuktnplid\", []) == \"nuktnplid\"\nassert solution.smallestStringWithSwaps(\"ejderkyiby\", [[4, 3], [6, 8], [4, 2], [4, 7], [5, 1], [8, 6], [8, 9], [2, 9], [6, 2], [6, 8]]) == \"ejbdekiryy\"\nassert solution.smallestStringWithSwaps(\"yobj\", [[2, 0], [2, 3], [3, 3]]) == \"bojy\"\nassert solution.smallestStringWithSwaps(\"ajlar\", [[3, 3], [1, 0], [2, 0], [2, 2], [4, 2], [2, 1], [3, 0], [0, 4]]) == \"aajlr\"\nassert solution.smallestStringWithSwaps(\"vabhpd\", [[2, 5], [5, 5], [4, 0]]) == \"pabhvd\"\nassert solution.smallestStringWithSwaps(\"s\", [[0, 0], [0, 0], [0, 0], [0, 0]]) == \"s\"\nassert solution.smallestStringWithSwaps(\"jzjyvt\", [[0, 5]]) == \"jzjyvt\"\nassert solution.smallestStringWithSwaps(\"qeoufc\", [[4, 1], [4, 1], [5, 4], [4, 3], [4, 1], [2, 3], [3, 2], [3, 4]]) == \"qcefou\"\nassert solution.smallestStringWithSwaps(\"vguydltrxh\", [[8, 5], [1, 6], [8, 7], [3, 0], [3, 5], [0, 4], [9, 0], [1, 6], [2, 6]]) == \"dgthlruvxy\"\nassert solution.smallestStringWithSwaps(\"w\", [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == \"w\"\nassert solution.smallestStringWithSwaps(\"uvnjiws\", [[3, 2], [2, 0], [0, 1], [1, 3], [5, 5], [6, 5], [1, 6], [0, 3], [2, 5]]) == \"jnsuivw\"\nassert solution.smallestStringWithSwaps(\"iumek\", [[0, 3], [2, 4], [4, 0], [3, 3], [0, 1], [1, 4]]) == \"eikmu\"\nassert solution.smallestStringWithSwaps(\"uoddsbol\", []) == \"uoddsbol\"\nassert solution.smallestStringWithSwaps(\"nq\", [[0, 1], [0, 1], [0, 1], [1, 1], [1, 0]]) == \"nq\"\nassert solution.smallestStringWithSwaps(\"dcaoovxj\", [[0, 4], [4, 6], [4, 7], [7, 0], [5, 4]]) == \"dcaojovx\"\nassert solution.smallestStringWithSwaps(\"qghe\", [[0, 0], [0, 3], [3, 1], [0, 1], [3, 0], [3, 2], [0, 3], [0, 0]]) == \"eghq\"\nassert solution.smallestStringWithSwaps(\"qdramdmk\", [[0, 0], [1, 7], [7, 2]]) == \"qdkamdmr\"\nassert solution.smallestStringWithSwaps(\"gd\", [[0, 0], [1, 0], [0, 0], [1, 0], [0, 0], [0, 0], [1, 0]]) == \"dg\"\nassert solution.smallestStringWithSwaps(\"ddwrcu\", [[5, 3], [0, 3], [0, 2], [3, 4]]) == \"cddruw\"\nassert solution.smallestStringWithSwaps(\"kycfkve\", [[6, 3], [2, 4], [1, 6], [6, 0], [0, 0], [2, 0]]) == \"cefkkvy\"\nassert solution.smallestStringWithSwaps(\"u\", [[0, 0], [0, 0]]) == \"u\"\nassert solution.smallestStringWithSwaps(\"hrzitlgdxn\", [[4, 2], [8, 0], [4, 3], [0, 7], [4, 2], [8, 2]]) == \"drhitlgxzn\"\nassert solution.smallestStringWithSwaps(\"cltqrszy\", [[7, 4], [6, 1], [1, 5], [6, 3]]) == \"cltqrszy\"\nassert solution.smallestStringWithSwaps(\"uqfqpnm\", [[0, 6], [2, 1], [4, 0], [2, 2]]) == \"mfqqpnu\"\nassert solution.smallestStringWithSwaps(\"nruygwdfqu\", [[7, 8], [4, 2], [8, 3], [2, 8], [4, 0], [5, 2], [6, 4], [3, 8], [2, 8]]) == \"drfgnquwyu\"\nassert solution.smallestStringWithSwaps(\"toclje\", [[1, 0], [1, 1], [5, 4], [0, 5], [3, 0]]) == \"ejclot\"\nassert solution.smallestStringWithSwaps(\"dq\", [[0, 0], [0, 0], [0, 1]]) == \"dq\"\nassert solution.smallestStringWithSwaps(\"ckrrwak\", [[6, 0], [2, 3], [3, 3], [2, 2], [5, 2], [6, 1]]) == \"ckarwrk\"\nassert solution.smallestStringWithSwaps(\"zjp\", [[0, 0], [1, 1], [1, 0], [1, 2], [2, 0], [1, 1], [1, 1]]) == \"jpz\"\nassert solution.smallestStringWithSwaps(\"ozfpjg\", [[3, 4]]) == \"ozfjpg\"\nassert solution.smallestStringWithSwaps(\"wncju\", [[2, 1], [0, 1], [1, 1], [3, 0], [1, 1]]) == \"cjnwu\"\nassert solution.smallestStringWithSwaps(\"koz\", []) == \"koz\"\nassert solution.smallestStringWithSwaps(\"esiiodx\", [[2, 5], [0, 4], [6, 2], [1, 0], [3, 3], [4, 2], [1, 0], [6, 2], [5, 0], [6, 1]]) == \"deiiosx\"\nassert solution.smallestStringWithSwaps(\"v\", [[0, 0]]) == \"v\"\nassert solution.smallestStringWithSwaps(\"ge\", [[0, 0], [0, 0], [0, 0], [0, 1], [0, 0], [0, 0], [0, 1], [0, 1], [1, 0], [1, 0]]) == \"eg\"\nassert solution.smallestStringWithSwaps(\"kcep\", [[1, 3], [0, 0], [1, 2], [2, 3], [1, 3], [2, 3]]) == \"kcep\"\nassert solution.smallestStringWithSwaps(\"wskqfrv\", [[4, 5], [4, 0], [5, 6], [2, 6], [5, 3]]) == \"fskqrvw\"\nassert solution.smallestStringWithSwaps(\"jefpmbuhx\", [[0, 4]]) == \"jefpmbuhx\"\nassert solution.smallestStringWithSwaps(\"tirultfni\", [[3, 4], [3, 0], [5, 8], [3, 7], [1, 5], [2, 6], [1, 2], [2, 1]]) == \"lfintirut\"\nassert solution.smallestStringWithSwaps(\"taso\", [[0, 1], [1, 2], [0, 3], [0, 3], [1, 1], [3, 3], [1, 0], [2, 0], [1, 1]]) == \"aost\"\nassert solution.smallestStringWithSwaps(\"hibcsm\", [[0, 2], [2, 5], [3, 0], [1, 2], [0, 3], [5, 4], [4, 2]]) == \"bchims\"\nassert solution.smallestStringWithSwaps(\"jzjrbh\", [[5, 5], [5, 2], [5, 4], [3, 4]]) == \"jzbhjr\"\nassert solution.smallestStringWithSwaps(\"cllimyhl\", [[1, 2], [1, 2], [6, 5], [4, 5], [0, 3], [4, 3], [0, 2], [4, 0], [6, 1], [0, 4]]) == \"chillmyl\"\nassert solution.smallestStringWithSwaps(\"wcmcd\", [[3, 4], [3, 3], [0, 3], [0, 1], [2, 3], [0, 3]]) == \"ccdmw\"\nassert solution.smallestStringWithSwaps(\"jovjlk\", [[0, 2], [4, 0], [5, 2], [2, 3], [2, 3], [4, 1], [5, 2]]) == \"jjklov\"\nassert solution.smallestStringWithSwaps(\"qxnidg\", [[1, 1], [2, 1], [5, 5], [3, 5], [2, 1]]) == \"qnxgdi\"\nassert solution.smallestStringWithSwaps(\"jtkoctzn\", [[2, 3], [1, 6], [5, 2], [3, 1], [5, 0], [3, 2]]) == \"jkotctzn\"\nassert solution.smallestStringWithSwaps(\"jxqrtkzts\", [[3, 8], [5, 6], [3, 2], [6, 2]]) == \"jxkqtrstz\"\nassert solution.smallestStringWithSwaps(\"loldulnlvm\", [[1, 7]]) == \"llldulnovm\"\nassert solution.smallestStringWithSwaps(\"yyige\", [[4, 1], [1, 0], [2, 0], [0, 1]]) == \"eiygy\"\nassert solution.smallestStringWithSwaps(\"wlb\", [[0, 2], [0, 2], [2, 1], [2, 2], [1, 1], [2, 1], [2, 0], [1, 1]]) == \"blw\"\nassert solution.smallestStringWithSwaps(\"bvjic\", [[4, 4]]) == \"bvjic\"\nassert solution.smallestStringWithSwaps(\"atqjkzmvuh\", [[3, 6]]) == \"atqjkzmvuh\"",
  "inefficient_solution": "class Solution:\n    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:\n        n = len(s)\n        s = list(s)\n        res = [0] * n\n        used = [False] * n\n        for _ in range(n):\n            for i in range(n):\n                if used[i]:\n                    continue\n                visited = set()\n                self.dfs(i, s, pairs, used, visited)\n            self.dfs(-1, s, pairs, used, visited)\n            self.sort(s, used)\n            for i in range(n):\n                if not used[i]:\n                    j = 0\n                    while not used[j]:\n                        j += 1\n                    res[i], s[j] = s[j], res[i]\n        return \"\".join(res)\n\n    def dfs(self, i: int, s: List[str], pairs: List[List[int]], used: List[bool], visited: set) -> None:\n        if i == -1:\n            return\n        if used[i]:\n            return\n        used[i] = True\n        visited.add(i)\n        for a, b in pairs:\n            if a in visited:\n                visited.remove(a)\n                j = a\n                while j != -1:\n                    used[j] = True\n                    visited.add(j)\n                    j = -1\n                    for k, l in pairs:\n                        if k in visited:\n                            visited.remove(k)\n                            j = k\n                break\n            elif b in visited:\n                visited.remove(b)\n                j = b\n                while j != -1:\n                    used[j] = True\n                    visited.add(j)\n                    j = -1\n                    for k, l in pairs:\n                        if k in visited:\n                            visited.remove(k)\n                            j = k\n                break\n        if i != -1:\n            for j in range(i + 1, len(s)):\n                if j not in visited:\n                    self.dfs(j, s, pairs, used, visited)\n\n    def sort(self, s: List[str], used: List[bool]) -> None:\n        s.sort(key=lambda x: x if used[ord(x) - ord('a')] else 'z')",
  "is_python": true
}