{
  "problem_idx": 1720,
  "task_name": "Decode XORed Array",
  "markdown_description": "\nThere is a **hidden** integer array `arr` that consists of `n` non-negative integers.\n\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.\n\n\nYou are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.\n\n\nReturn *the original array* `arr`. It can be proved that the answer exists and is unique.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** encoded = [1,2,3], first = 1\n**Output:** [1,0,2,1]\n**Explanation:** If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** encoded = [6,2,7,3], first = 4\n**Output:** [4,2,0,7,4]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 104`\n* `encoded.length == n - 1`\n* `0 <= encoded[i] <= 105`\n* `0 <= first <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def decode(self, encoded: List[int], first: int) -> List[int]:\n        ans = [first]\n        for e in encoded:\n            ans.append(ans[-1] ^ e)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def decode(self, encoded: List[int], first: int) -> List[int]:\n        ans = [first]\n        for e in encoded:\n            ans.append(ans[-1] ^ e)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    encoded = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random first element\n    first = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.decode(encoded, first)\n\n    return encoded, first, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        encoded, first, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.decode(encoded, first) == expected_result\n        test_case_generator_results.append(f\"assert solution.decode({encoded}, {first}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.decode([63, 52, 98, 22, 21], 78) == [78, 113, 69, 39, 49, 36]\nassert solution.decode([90, 18, 98, 78, 58, 42, 27, 13, 54], 32) == [32, 122, 104, 10, 68, 126, 84, 79, 66, 116]\nassert solution.decode([3, 19], 18) == [18, 17, 2]\nassert solution.decode([51, 4, 90], 61) == [61, 14, 10, 80]\nassert solution.decode([24, 76, 88, 57, 96, 70, 47, 100, 22, 71], 56) == [56, 32, 108, 52, 13, 109, 43, 4, 96, 118, 49]\nassert solution.decode([14, 56, 41, 96, 17, 81, 100, 55, 18], 62) == [62, 48, 8, 33, 65, 80, 1, 101, 82, 64]\nassert solution.decode([39, 9, 17, 8, 32, 93], 25) == [25, 62, 55, 38, 46, 14, 83]\nassert solution.decode([10, 68, 80, 78, 32, 98, 7, 24, 29], 66) == [66, 72, 12, 92, 18, 50, 80, 87, 79, 82]\nassert solution.decode([80, 4, 65, 38, 98], 21) == [21, 69, 65, 0, 38, 68]\nassert solution.decode([17, 27, 3, 82, 36, 8], 76) == [76, 93, 70, 69, 23, 51, 59]\nassert solution.decode([67, 63, 29, 77], 64) == [64, 3, 60, 33, 108]\nassert solution.decode([46, 3, 51], 32) == [32, 14, 13, 62]\nassert solution.decode([29, 25, 3, 42, 21, 57, 95], 6) == [6, 27, 2, 1, 43, 62, 7, 88]\nassert solution.decode([83, 1, 22, 63, 9, 71, 98, 93], 91) == [91, 8, 9, 31, 32, 41, 110, 12, 81]\nassert solution.decode([39, 1, 97, 92, 56, 9], 26) == [26, 61, 60, 93, 1, 57, 48]\nassert solution.decode([73, 12, 99, 23, 70, 44, 100, 92, 49], 32) == [32, 105, 101, 6, 17, 87, 123, 31, 67, 114]\nassert solution.decode([36, 23], 40) == [40, 12, 27]\nassert solution.decode([57, 3, 93], 97) == [97, 88, 91, 6]\nassert solution.decode([72, 99, 25, 7], 48) == [48, 120, 27, 2, 5]\nassert solution.decode([30, 37, 96, 42], 39) == [39, 57, 28, 124, 86]\nassert solution.decode([29, 45, 74, 68], 87) == [87, 74, 103, 45, 105]\nassert solution.decode([54, 55, 13, 57, 28, 32, 63, 31], 2) == [2, 52, 3, 14, 55, 43, 11, 52, 43]\nassert solution.decode([75, 85, 17, 11, 64, 53, 27, 6], 1) == [1, 74, 31, 14, 5, 69, 112, 107, 109]\nassert solution.decode([54, 11, 21, 66, 43, 50, 2, 45], 82) == [82, 100, 111, 122, 56, 19, 33, 35, 14]\nassert solution.decode([68, 23, 85, 2, 22], 62) == [62, 122, 109, 56, 58, 44]\nassert solution.decode([4, 47], 65) == [65, 69, 106]\nassert solution.decode([70, 37, 78, 26], 25) == [25, 95, 122, 52, 46]\nassert solution.decode([89, 65, 87, 45, 7, 44, 29], 15) == [15, 86, 23, 64, 109, 106, 70, 91]\nassert solution.decode([18, 43, 91], 24) == [24, 10, 33, 122]\nassert solution.decode([27, 84, 92, 56, 42, 100, 93, 58, 3, 55], 21) == [21, 14, 90, 6, 62, 20, 112, 45, 23, 20, 35]\nassert solution.decode([19, 4, 95, 51, 98, 68, 54, 24, 46, 14], 16) == [16, 3, 7, 88, 107, 9, 77, 123, 99, 77, 67]\nassert solution.decode([75, 23, 5, 25], 7) == [7, 76, 91, 94, 71]\nassert solution.decode([28, 43], 70) == [70, 90, 113]\nassert solution.decode([64, 77], 23) == [23, 87, 26]\nassert solution.decode([58, 21, 95, 42, 50, 17, 45, 3, 38, 19], 40) == [40, 18, 7, 88, 114, 64, 81, 124, 127, 89, 74]\nassert solution.decode([17, 57, 15], 99) == [99, 114, 75, 68]\nassert solution.decode([61, 67, 68, 26, 58], 22) == [22, 43, 104, 44, 54, 12]\nassert solution.decode([4, 96, 18, 42, 13, 91], 81) == [81, 85, 53, 39, 13, 0, 91]\nassert solution.decode([28, 61, 86, 10], 3) == [3, 31, 34, 116, 126]\nassert solution.decode([80, 53, 66, 59, 15, 7, 44, 100, 69, 36], 92) == [92, 12, 57, 123, 64, 79, 72, 100, 0, 69, 97]\nassert solution.decode([99, 55, 34, 80], 73) == [73, 42, 29, 63, 111]\nassert solution.decode([51, 12], 49) == [49, 2, 14]\nassert solution.decode([90, 63, 33, 53, 52], 77) == [77, 23, 40, 9, 60, 8]\nassert solution.decode([21, 87, 70, 50, 18, 75], 61) == [61, 40, 127, 57, 11, 25, 82]\nassert solution.decode([5, 46, 27, 76, 73, 47, 64, 51, 37, 22], 32) == [32, 37, 11, 16, 92, 21, 58, 122, 73, 108, 122]\nassert solution.decode([24, 76, 91, 64, 13, 3, 71, 21], 86) == [86, 78, 2, 89, 25, 20, 23, 80, 69]\nassert solution.decode([53, 6, 60, 51, 55, 89, 4, 27], 25) == [25, 44, 42, 22, 37, 18, 75, 79, 84]\nassert solution.decode([37, 81, 2, 29, 84], 12) == [12, 41, 120, 122, 103, 51]\nassert solution.decode([19, 42, 14, 35, 90, 55, 53, 86, 37], 101) == [101, 118, 92, 82, 113, 43, 28, 41, 127, 90]\nassert solution.decode([38, 93], 31) == [31, 57, 100]\nassert solution.decode([81, 46, 80, 38], 8) == [8, 89, 119, 39, 1]\nassert solution.decode([96, 23, 71, 89, 68, 98, 24, 60, 73, 93], 93) == [93, 61, 42, 109, 52, 112, 18, 10, 54, 127, 34]\nassert solution.decode([37, 38], 100) == [100, 65, 103]\nassert solution.decode([41, 5, 83, 50, 25, 91, 38], 14) == [14, 39, 34, 113, 67, 90, 1, 39]\nassert solution.decode([16, 95, 50, 56, 87], 55) == [55, 39, 120, 74, 114, 37]\nassert solution.decode([20, 62, 10, 97, 89, 36, 94], 29) == [29, 9, 55, 61, 92, 5, 33, 127]\nassert solution.decode([2, 99, 17, 7, 56, 37, 98], 18) == [18, 16, 115, 98, 101, 93, 120, 26]\nassert solution.decode([29, 11, 4, 75, 50, 74, 25, 64], 73) == [73, 84, 95, 91, 16, 34, 104, 113, 49]\nassert solution.decode([80, 41, 67, 46], 23) == [23, 71, 110, 45, 3]\nassert solution.decode([31, 4, 47, 91, 99], 38) == [38, 57, 61, 18, 73, 42]\nassert solution.decode([56, 3, 86, 59, 4], 40) == [40, 16, 19, 69, 126, 122]\nassert solution.decode([44, 25, 17, 9], 16) == [16, 60, 37, 52, 61]\nassert solution.decode([4, 40], 13) == [13, 9, 33]\nassert solution.decode([44, 76, 60], 19) == [19, 63, 115, 79]\nassert solution.decode([47, 59, 51], 26) == [26, 53, 14, 61]\nassert solution.decode([41, 22, 12, 59], 73) == [73, 96, 118, 122, 65]\nassert solution.decode([55, 2, 34, 21, 26, 19, 41, 24, 82], 6) == [6, 49, 51, 17, 4, 30, 13, 36, 60, 110]\nassert solution.decode([13, 79, 96, 59, 29], 35) == [35, 46, 97, 1, 58, 39]\nassert solution.decode([15, 81, 66, 33, 46, 24, 7], 90) == [90, 85, 4, 70, 103, 73, 81, 86]\nassert solution.decode([62, 8, 43, 33, 58, 54], 17) == [17, 47, 39, 12, 45, 23, 33]\nassert solution.decode([14, 27], 69) == [69, 75, 80]\nassert solution.decode([63, 2], 31) == [31, 32, 34]\nassert solution.decode([88, 13, 74, 46, 40], 41) == [41, 113, 124, 54, 24, 48]\nassert solution.decode([54, 11, 90, 55, 79, 86, 48, 73, 41], 23) == [23, 33, 42, 112, 71, 8, 94, 110, 39, 14]\nassert solution.decode([10, 88, 16], 64) == [64, 74, 18, 2]\nassert solution.decode([14, 41, 77, 70, 34, 45], 32) == [32, 46, 7, 74, 12, 46, 3]\nassert solution.decode([39, 12, 86, 18], 50) == [50, 21, 25, 79, 93]\nassert solution.decode([48, 16, 69, 37, 88], 16) == [16, 32, 48, 117, 80, 8]\nassert solution.decode([45, 32, 94, 84], 2) == [2, 47, 15, 81, 5]\nassert solution.decode([65, 98, 72, 73, 19, 100, 9, 93], 75) == [75, 10, 104, 32, 105, 122, 30, 23, 74]\nassert solution.decode([36, 75, 59, 76, 80, 2, 11, 39], 54) == [54, 18, 89, 98, 46, 126, 124, 119, 80]\nassert solution.decode([37, 3, 9, 39, 13, 76, 82, 36, 86], 9) == [9, 44, 47, 38, 1, 12, 64, 18, 54, 96]\nassert solution.decode([99, 80, 7, 68, 34], 70) == [70, 37, 117, 114, 54, 20]\nassert solution.decode([100, 59, 51, 5, 43, 16, 64, 7, 84, 33], 93) == [93, 57, 2, 49, 52, 31, 15, 79, 72, 28, 61]\nassert solution.decode([31, 72, 36], 32) == [32, 63, 119, 83]\nassert solution.decode([6, 39, 70], 26) == [26, 28, 59, 125]\nassert solution.decode([95, 26, 2], 77) == [77, 18, 8, 10]\nassert solution.decode([98, 33, 54, 86, 65, 51, 78, 42], 72) == [72, 42, 11, 61, 107, 42, 25, 87, 125]\nassert solution.decode([21, 94, 78, 92, 66, 10, 49], 60) == [60, 41, 119, 57, 101, 39, 45, 28]\nassert solution.decode([50, 28, 29, 46, 94, 3, 48, 38, 26, 24], 5) == [5, 55, 43, 54, 24, 70, 69, 117, 83, 73, 81]\nassert solution.decode([23, 89, 2, 98, 36, 57, 29], 64) == [64, 87, 14, 12, 110, 74, 115, 110]\nassert solution.decode([93, 91, 73, 25, 14], 89) == [89, 4, 95, 22, 15, 1]\nassert solution.decode([84, 93, 27, 7, 68, 75], 7) == [7, 83, 14, 21, 18, 86, 29]\nassert solution.decode([87, 83, 55, 64, 91], 1) == [1, 86, 5, 50, 114, 41]\nassert solution.decode([99, 68, 41, 58, 98, 90, 94, 100], 83) == [83, 48, 116, 93, 103, 5, 95, 1, 101]\nassert solution.decode([33, 65, 85, 56, 52, 70, 10, 61, 37, 1], 2) == [2, 35, 98, 55, 15, 59, 125, 119, 74, 111, 110]\nassert solution.decode([99, 51, 2, 97, 47, 65, 16, 73, 98], 37) == [37, 70, 117, 119, 22, 57, 120, 104, 33, 67]\nassert solution.decode([68, 39, 73, 58, 59, 60, 17, 67, 74, 62], 101) == [101, 33, 6, 79, 117, 78, 114, 99, 32, 106, 84]\nassert solution.decode([59, 37, 85, 48, 47], 6) == [6, 61, 24, 77, 125, 82]\nassert solution.decode([45, 36, 49, 91, 70, 100, 8, 32, 44], 41) == [41, 4, 32, 17, 74, 12, 104, 96, 64, 108]",
  "inefficient_solution": "class Solution:\n    def decode(self, encoded: List[int], first: int) -> List[int]:\n        result = []\n        for i in range(1000001):\n            if encoded:\n                new_result = []\n                new_result.append(first)\n                for e in encoded:\n                    new_result.append(new_result[-1] ^ e)\n                if new_result == encoded:\n                    result = new_result\n                    break\n            else:\n                result = [first]\n                break\n        return result",
  "is_python": true
}