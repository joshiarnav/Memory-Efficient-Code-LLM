{
  "problem_idx": 322,
  "task_name": "Coin Change",
  "markdown_description": "\nYou are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\n\nReturn *the fewest number of coins that you need to make up that amount*. If that amount of money cannot be made up by any combination of the coins, return `-1`.\n\n\nYou may assume that you have an infinite number of each kind of coin.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** coins = [1,2,5], amount = 11\n**Output:** 3\n**Explanation:** 11 = 5 + 5 + 1\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** coins = [2], amount = 3\n**Output:** -1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** coins = [1], amount = 0\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= coins.length <= 12`\n* `1 <= coins[i] <= 231 - 1`\n* `0 <= amount <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        n = amount\n        f = [0] + [inf] * n\n        for x in coins:\n            for j in range(x, n + 1):\n                f[j] = min(f[j], f[j - x] + 1)\n        return -1 if f[n] >= inf else f[n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def coinChange(self, coins, amount):\n        n = amount\n        f = [0] + [float('inf')] * n\n        for x in coins:\n            for j in range(x, n + 1):\n                f[j] = min(f[j], f[j - x] + 1)\n        return -1 if f[n] >= float('inf') else f[n]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random coins list\n    num_coins = random.randint(1, 12)\n    coins = random.sample(range(1, 2**31 - 1), num_coins)\n\n    # Generate a random amount\n    amount = random.randint(0, 10000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.coinChange(coins, amount)\n\n    return coins, amount, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        coins, amount, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.coinChange(coins, amount) == expected_result\n        print(f\"assert solution.coinChange({coins}, {amount}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.coinChange({coins}, {amount}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.coinChange([1041641629, 1513765009], 1890) == -1\nassert solution.coinChange([405497146, 1863182964, 1058811950, 918238514, 859978002, 1328965717, 1316300061, 2048299023, 1524311598, 683584993, 618018268, 1649081670], 2533) == -1\nassert solution.coinChange([835883718, 849904510, 407552334, 1520522446, 1331236233, 176677683, 1492610095, 1631980220, 593813169, 1689318128, 1718389020], 1256) == -1\nassert solution.coinChange([127758226, 447372285, 1220636669, 126632262, 1077818375, 393108168, 208109756, 650505608, 2100849132, 2047086658, 1671263159, 916442767], 3634) == -1\nassert solution.coinChange([1480886407, 130815579, 1257508839, 919652000, 508594377, 586899995, 208724207], 687) == -1\nassert solution.coinChange([1715522047, 370088319], 8700) == -1\nassert solution.coinChange([1314318963, 1914805158, 1078094952, 571563566, 1938075453, 665418693], 4525) == -1\nassert solution.coinChange([1185726069, 1078887808, 1564040924, 85985759, 724581215, 1451964747, 1667363052, 769685840], 1064) == -1\nassert solution.coinChange([1054313326, 1313333125, 129783615, 471647589], 9036) == -1\nassert solution.coinChange([94994906, 683066731, 2088280122, 473687343, 1009500161], 1463) == -1\nassert solution.coinChange([564869164, 97949386, 1861598910, 368193627, 1887681517, 1644119140, 378205119], 8120) == -1\nassert solution.coinChange([616759268, 700376062, 583222636, 829429711, 221334864, 239968861, 1705668191, 240235759, 1604346597, 1196921880], 1427) == -1\nassert solution.coinChange([749010835, 732040437, 257030519, 1762389463, 664526818], 4971) == -1\nassert solution.coinChange([1272919884, 971770827, 1865763165, 1195186200, 909081189, 330087667, 1819845858, 595928452], 4414) == -1\nassert solution.coinChange([315111037, 1890011748, 40019287, 517248871, 1226095096, 279948493, 1274014048, 1369461290, 1635889704], 1670) == -1\nassert solution.coinChange([1256922537, 573088272, 1334582846, 1775077128, 242526303], 7099) == -1\nassert solution.coinChange([1603430927, 870526962], 1301) == -1\nassert solution.coinChange([816226570, 566353789, 787833382], 9985) == -1\nassert solution.coinChange([81549022, 838509006, 712595745, 1942985030, 162987008, 1519281440, 1098094108], 1709) == -1\nassert solution.coinChange([608024423, 1942878649, 1153851733, 1299760499, 1446295569], 8306) == -1\nassert solution.coinChange([1632467780, 1715174106, 221532708, 1427893608, 1748354291, 2141528766, 1518952221], 9111) == -1\nassert solution.coinChange([2125314542, 1346452509], 5492) == -1\nassert solution.coinChange([946910746, 1383180716, 1664630300, 209770731, 1561462952, 301676966, 360443038, 504005525, 536187531, 320088792, 917655007, 454406161], 2333) == -1\nassert solution.coinChange([1348636576], 8825) == -1\nassert solution.coinChange([1437615366, 1883303617, 1909275616, 2114941171, 1583699752], 6850) == -1\nassert solution.coinChange([629293481, 485425351, 325016087, 700007536, 609005874, 1325636599, 317564822, 1870403810, 418195583, 1560839310, 697048026], 9975) == -1\nassert solution.coinChange([2128028702, 223090476, 497490358, 792946274], 7648) == -1\nassert solution.coinChange([3740166, 1478845826], 1217) == -1\nassert solution.coinChange([1674055966, 864438959, 124129077, 337493041, 2909618, 935048481, 1643715320, 826216084], 1859) == -1\nassert solution.coinChange([1201205750, 2059659634, 1100521768, 1809324544, 490728039, 871050384, 616291853, 675587285], 7442) == -1\nassert solution.coinChange([1106037679, 1303248538, 826989167, 391267258, 1267144156], 5223) == -1\nassert solution.coinChange([1067946542, 996073642, 1241240, 238207775, 218187073, 1255610417, 363370564], 1764) == -1\nassert solution.coinChange([1028821496, 1996960518, 6279333, 1679374113], 3706) == -1\nassert solution.coinChange([569044492, 1722372280, 190179953, 650558370, 781367259, 1983910625, 477518402, 789327100, 646362939, 980787084], 4596) == -1\nassert solution.coinChange([1940032095, 1950198359, 1078990582, 135561597, 1856466688, 507565844], 2658) == -1\nassert solution.coinChange([1124482390, 779036646, 429893292, 2094452029, 728434119, 359739573, 1528710622, 2078988841, 1316167282], 6340) == -1\nassert solution.coinChange([2007718569, 1518187186, 1230173236, 138775675, 177915498, 1338886484, 1483942130, 586111796, 842745850, 1070573146, 1287855885, 1291004314], 1666) == -1\nassert solution.coinChange([715506163, 882198821, 2045918931, 703807990, 1940457306, 1065847509, 746790068, 1434879681, 1427709369], 7609) == -1\nassert solution.coinChange([1175511826, 961895572, 591427055, 801465061, 1904798634], 7541) == -1\nassert solution.coinChange([1609238776], 8748) == -1\nassert solution.coinChange([653212847, 478729419, 865897108, 1300085630], 3863) == -1\nassert solution.coinChange([254210585], 8909) == -1\nassert solution.coinChange([1302137084, 1217163992, 618253278, 236886318, 1958920795, 844959051, 1593563748, 1368746632, 1781548264, 177323948, 497193191], 3) == -1\nassert solution.coinChange([606107060, 1727032767, 651639003, 1184792239], 8989) == -1\nassert solution.coinChange([17559287], 3410) == -1\nassert solution.coinChange([633072549, 151146933, 1460659053, 439776334, 931801865, 354905749, 1355824485, 566747245, 310518721, 1176883638, 1860101553, 885631412], 467) == -1\nassert solution.coinChange([379345129, 1863169094, 1571738548, 1605785632, 295612075, 1807337677, 1675918834], 2207) == -1\nassert solution.coinChange([1795735137, 1892022860, 457869100, 49446727, 1804876], 1313) == -1\nassert solution.coinChange([1105418504], 9323) == -1\nassert solution.coinChange([1270430251, 910442416, 1564584033, 1204398898, 783454409, 17044975, 32691264], 1412) == -1\nassert solution.coinChange([1619386994, 1916743572, 11172620, 1846345607, 1180960725, 743056924, 622443021], 8739) == -1\nassert solution.coinChange([1683811032, 725028864, 10015678, 204241407, 41678524, 1915802995, 836376855, 1396633070, 239710337], 5445) == -1\nassert solution.coinChange([1459103184, 82980934, 1408463041, 2143645417, 634946044, 1717622628, 536709937, 1084897840], 9009) == -1\nassert solution.coinChange([1083262408, 355387659], 6179) == -1\nassert solution.coinChange([1481174634, 498686588], 8382) == -1\nassert solution.coinChange([1277971471, 1748294342, 901131305, 1803765113, 1257052433, 521004173, 937397300, 1825265385, 2060900901, 1469685577, 96088966, 864634020], 181) == -1\nassert solution.coinChange([1268436429, 2064383368, 286151415, 1438862652, 873437677, 477192286, 1991208213, 595207213, 1991294198, 538549245], 9105) == -1\nassert solution.coinChange([162674968, 29680058, 92518747, 617831665, 871764416, 919927774, 631682166, 722442998], 867) == -1\nassert solution.coinChange([1519436674, 842343807], 7579) == -1\nassert solution.coinChange([1708612707, 1994019180, 1448306377, 1813250355, 1422068902, 353534960, 1866490448], 3512) == -1\nassert solution.coinChange([632372185, 1503469023, 782637488, 1068290155, 865988736], 5153) == -1\nassert solution.coinChange([1804584925], 4457) == -1\nassert solution.coinChange([1660941399, 723512809, 1585881944, 931651518, 445480158], 4248) == -1\nassert solution.coinChange([602941224, 1069422264, 1322771853, 983258906, 1256874101, 801987883, 890313137, 1744332990, 1919118063], 2690) == -1\nassert solution.coinChange([292480654, 415385191], 8555) == -1\nassert solution.coinChange([433869332, 840377247, 1599210601, 1853856316, 1553844905, 975461630, 581178066, 1653028849, 256635664, 1976514571, 791729842, 1193404057], 7860) == -1\nassert solution.coinChange([1405211873, 1299954671, 1967014738, 111855730, 571265142, 647531774, 301050836, 806320141], 5127) == -1\nassert solution.coinChange([434858416, 358545714, 1572439624, 926840403, 1356452801], 7607) == -1\nassert solution.coinChange([569661050, 958950572, 1459397472, 840139433, 1155056385, 259743286, 1860339971, 1972310847, 1403726197], 3442) == -1\nassert solution.coinChange([1690270061, 1696948746, 1265280369], 925) == -1\nassert solution.coinChange([73540751, 1041927039, 1732608466, 1844047515, 865854671, 312523208, 1377899780, 1998130631, 914848854, 1365442956], 7472) == -1\nassert solution.coinChange([802600009, 354145337], 7993) == -1\nassert solution.coinChange([1526002988, 1600782364], 5938) == -1\nassert solution.coinChange([1864708634, 1274624510, 1759908300, 1599606823, 1622789775, 262962810, 87021730, 266605939, 644476810], 850) == -1\nassert solution.coinChange([2144009953, 193161378, 552721597, 888287990], 8443) == -1\nassert solution.coinChange([1550757732, 1941875762, 1430079604], 4281) == -1\nassert solution.coinChange([2132713922, 707192072, 1323062605, 1735220989, 486606050, 463326631, 533231385, 1323004428], 9024) == -1\nassert solution.coinChange([510742822, 1166161127, 1246356825, 1251169245, 1587876595, 731950991], 7860) == -1\nassert solution.coinChange([365597893, 1929969348], 9631) == -1\nassert solution.coinChange([871289269, 1773925285, 188266143, 1537128829], 9426) == -1\nassert solution.coinChange([1338671812, 970200511, 834455534, 1625126887, 1542584776, 185881157, 1419023326, 763570841, 555349238], 2245) == -1\nassert solution.coinChange([653961501, 1207258493, 1528244505, 383323194, 1864445664, 1299257650, 372819243, 1490910620, 561288469], 4278) == -1\nassert solution.coinChange([193667651, 448547520, 655976990, 1660107541, 361256568, 1856359991], 9817) == -1\nassert solution.coinChange([1269065645, 1778324654, 1424209248, 558046848], 8739) == -1\nassert solution.coinChange([802375548, 87900022, 1872591252, 140659870, 274552332, 1611336223, 1702848272, 1356375382, 1981850862, 1955454476, 351285011], 6633) == -1\nassert solution.coinChange([698933307, 1947632518, 1763102182, 1530320483], 4408) == -1\nassert solution.coinChange([615086011, 433550170, 985389372, 955744975, 1367971791, 1596044985, 382304331, 445801212, 180400564, 1612452922, 1010051989, 448568218], 5770) == -1\nassert solution.coinChange([1709111598, 170916199, 1032552146, 1935772169, 2120385290, 1966489121, 1134438718, 921089442, 2133185155, 1902609064, 1411760942], 1028) == -1\nassert solution.coinChange([1331232725, 1555764968], 5773) == -1\nassert solution.coinChange([2015153000, 1167641497, 157106793, 1943204307, 1463114113, 709553072, 2041779671, 1878532202], 8311) == -1\nassert solution.coinChange([1837423420, 1272451492, 120842160, 606545387, 1312041844], 5490) == -1\nassert solution.coinChange([1345570194, 200007774, 35052785, 788658519, 1031645018, 327829684, 497449420, 1766049418], 9309) == -1\nassert solution.coinChange([159697529, 1375420911, 949538420, 2023064004, 1653557541, 483052633, 1831066969], 5562) == -1\nassert solution.coinChange([752249157, 1406325316, 728273884, 135019092, 1223235523, 113108214, 690776845, 1873029016], 4967) == -1\nassert solution.coinChange([1669387381, 106144259], 4158) == -1\nassert solution.coinChange([1087242741, 89083467, 708282729, 2007589871, 977939122, 1938751191, 1789232219, 1481353222, 1743772137], 9137) == -1\nassert solution.coinChange([386286207, 1005614142, 1142102488, 515899854, 1827992056, 998374723, 247739896, 488712580, 1934641873, 891123010, 996546094, 218984577], 5565) == -1\nassert solution.coinChange([1028594656, 917165011, 1789331937, 1454493676, 1788125726, 1922837696, 416262030, 284426883], 7964) == -1\nassert solution.coinChange([1958275941, 1872339834, 1006152428, 1463007114, 1124154309, 2145945586, 1453797071, 1975652912], 5778) == -1\nassert solution.coinChange([1873072180, 366896587, 42419551, 871586693, 783552188], 2645) == -1",
  "inefficient_solution": "class Solution:\n    def coinChange(self, coins, amount):\n        n = amount\n        f = [[] for _ in range(n + 1)]\n        for x in coins:\n            for j in range(x, n + 1):\n                k = j - x\n                temp = f[k] + [0]\n                f[k] = []\n                while temp:\n                    f[j].append(temp.pop() + 1)\n        return -1 if not f[n] else min(f[n])",
  "is_python": true
}