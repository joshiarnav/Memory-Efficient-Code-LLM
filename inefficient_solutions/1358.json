{
  "problem_idx": 1358,
  "task_name": "Number of Substrings Containing All Three Characters",
  "markdown_description": "\nGiven a string `s`\u00a0consisting only of characters *a*, *b* and *c*.\n\n\nReturn the number of substrings containing **at least**\u00a0one occurrence of all these characters *a*, *b* and *c*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcabc\"\n**Output:** 10\n**Explanation:** The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0*a*,\u00a0*b*\u00a0and\u00a0*c are \"*abc*\", \"*abca*\", \"*abcab*\", \"*abcabc*\", \"*bca*\", \"*bcab*\", \"*bcabc*\", \"*cab*\", \"*cabc*\"* and *\"*abc*\"* (**again**)*.* \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aaacb\"\n**Output:** 3\n**Explanation:** The substrings containing\u00a0at least\u00a0one occurrence of the characters\u00a0*a*,\u00a0*b*\u00a0and\u00a0*c are \"*aaacb*\", \"*aacb*\"* and *\"*acb*\".*\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"abc\"\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= s.length <= 5 x 10^4`\n* `s`\u00a0only consists of\u00a0*a*, *b* or *c*characters.\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        d = {\"a\": -1, \"b\": -1, \"c\": -1}\n        ans = 0\n        for i, c in enumerate(s):\n            d[c] = i\n            ans += min(d[\"a\"], d[\"b\"], d[\"c\"]) + 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        d = {\"a\": -1, \"b\": -1, \"c\": -1}\n        ans = 0\n        for i, c in enumerate(s):\n            d[c] = i\n            ans += min(d[\"a\"], d[\"b\"], d[\"c\"]) + 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string with length between 3 and 10\n    length = random.randint(3, 10)\n    s = ''.join(random.choices(['a', 'b', 'c'], k=length))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfSubstrings(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfSubstrings(s) == expected_result\n        print(f\"assert solution.numberOfSubstrings('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfSubstrings('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfSubstrings('bac') == 1\nassert solution.numberOfSubstrings('caa') == 0\nassert solution.numberOfSubstrings('acccabcb') == 14\nassert solution.numberOfSubstrings('bab') == 0\nassert solution.numberOfSubstrings('bbacab') == 8\nassert solution.numberOfSubstrings('abbaba') == 0\nassert solution.numberOfSubstrings('aabac') == 3\nassert solution.numberOfSubstrings('aacbcb') == 6\nassert solution.numberOfSubstrings('cccbaac') == 10\nassert solution.numberOfSubstrings('babbaab') == 0\nassert solution.numberOfSubstrings('aabcbbaccb') == 29\nassert solution.numberOfSubstrings('caabb') == 2\nassert solution.numberOfSubstrings('aaccb') == 2\nassert solution.numberOfSubstrings('baab') == 0\nassert solution.numberOfSubstrings('cccbb') == 0\nassert solution.numberOfSubstrings('bac') == 1\nassert solution.numberOfSubstrings('caacaaccb') == 6\nassert solution.numberOfSubstrings('abcbccaaca') == 20\nassert solution.numberOfSubstrings('aacbaccab') == 24\nassert solution.numberOfSubstrings('cbcabb') == 8\nassert solution.numberOfSubstrings('abbcbca') == 8\nassert solution.numberOfSubstrings('aabaaa') == 0\nassert solution.numberOfSubstrings('bcbbccb') == 0\nassert solution.numberOfSubstrings('baa') == 0\nassert solution.numberOfSubstrings('aabcccabbc') == 28\nassert solution.numberOfSubstrings('caaac') == 0\nassert solution.numberOfSubstrings('cacc') == 0\nassert solution.numberOfSubstrings('bac') == 1\nassert solution.numberOfSubstrings('abba') == 0\nassert solution.numberOfSubstrings('cacbaabcb') == 23\nassert solution.numberOfSubstrings('abaabcc') == 8\nassert solution.numberOfSubstrings('bbcccab') == 7\nassert solution.numberOfSubstrings('acccacaab') == 6\nassert solution.numberOfSubstrings('aaccccaaac') == 0\nassert solution.numberOfSubstrings('acba') == 3\nassert solution.numberOfSubstrings('cccaabcb') == 13\nassert solution.numberOfSubstrings('bcbaccac') == 14\nassert solution.numberOfSubstrings('cccaccab') == 6\nassert solution.numberOfSubstrings('cacb') == 2\nassert solution.numberOfSubstrings('cababaabc') == 13\nassert solution.numberOfSubstrings('acca') == 0\nassert solution.numberOfSubstrings('bccacbbca') == 21\nassert solution.numberOfSubstrings('baaaab') == 0\nassert solution.numberOfSubstrings('cbbcabcccc') == 27\nassert solution.numberOfSubstrings('ccbabbc') == 10\nassert solution.numberOfSubstrings('cccbbca') == 5\nassert solution.numberOfSubstrings('abccbcca') == 10\nassert solution.numberOfSubstrings('babbcaabc') == 22\nassert solution.numberOfSubstrings('bcaccca') == 5\nassert solution.numberOfSubstrings('babaacbab') == 20\nassert solution.numberOfSubstrings('ccaac') == 0\nassert solution.numberOfSubstrings('aaccaa') == 0\nassert solution.numberOfSubstrings('aaaaa') == 0\nassert solution.numberOfSubstrings('ccaba') == 4\nassert solution.numberOfSubstrings('aabacaab') == 14\nassert solution.numberOfSubstrings('ccaccb') == 3\nassert solution.numberOfSubstrings('bacacc') == 4\nassert solution.numberOfSubstrings('baac') == 1\nassert solution.numberOfSubstrings('bacaacbca') == 21\nassert solution.numberOfSubstrings('acb') == 1\nassert solution.numberOfSubstrings('cbbbac') == 5\nassert solution.numberOfSubstrings('bccacbcc') == 14\nassert solution.numberOfSubstrings('aaac') == 0\nassert solution.numberOfSubstrings('acb') == 1\nassert solution.numberOfSubstrings('baccac') == 4\nassert solution.numberOfSubstrings('accaacca') == 0\nassert solution.numberOfSubstrings('cbccccab') == 8\nassert solution.numberOfSubstrings('aabaaabc') == 6\nassert solution.numberOfSubstrings('bcbb') == 0\nassert solution.numberOfSubstrings('caaacbc') == 8\nassert solution.numberOfSubstrings('abababbb') == 0\nassert solution.numberOfSubstrings('cbbbcca') == 4\nassert solution.numberOfSubstrings('abccbcca') == 10\nassert solution.numberOfSubstrings('cccc') == 0\nassert solution.numberOfSubstrings('bbbba') == 0\nassert solution.numberOfSubstrings('baccacccaa') == 8\nassert solution.numberOfSubstrings('bcaab') == 4\nassert solution.numberOfSubstrings('accbcc') == 3\nassert solution.numberOfSubstrings('bcccbc') == 0\nassert solution.numberOfSubstrings('acca') == 0\nassert solution.numberOfSubstrings('babac') == 3\nassert solution.numberOfSubstrings('bcc') == 0\nassert solution.numberOfSubstrings('ccaabb') == 4\nassert solution.numberOfSubstrings('baaaca') == 2\nassert solution.numberOfSubstrings('bccc') == 0\nassert solution.numberOfSubstrings('bbcb') == 0\nassert solution.numberOfSubstrings('cbcabccaa') == 23\nassert solution.numberOfSubstrings('bcb') == 0\nassert solution.numberOfSubstrings('babaaab') == 0\nassert solution.numberOfSubstrings('babb') == 0\nassert solution.numberOfSubstrings('cbaaabaac') == 12\nassert solution.numberOfSubstrings('abb') == 0\nassert solution.numberOfSubstrings('bcbcca') == 3\nassert solution.numberOfSubstrings('aaba') == 0\nassert solution.numberOfSubstrings('abbbcccbbc') == 6\nassert solution.numberOfSubstrings('accaaa') == 0\nassert solution.numberOfSubstrings('aacbabb') == 11\nassert solution.numberOfSubstrings('abbcaabb') == 15\nassert solution.numberOfSubstrings('aababbbcca') == 15\nassert solution.numberOfSubstrings('abcca') == 4",
  "inefficient_solution": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        d = {\"a\": [-1]*n, \"b\": [-1]*n, \"c\": [-1]*n}\n        ans = 0\n        for i, c in enumerate(s):\n            d[c][i] = i\n            if d[\"a\"][i] >= 0 and d[\"b\"][i] >= 0 and d[\"c\"][i] >= 0:\n                for x in range(n):\n                    for y in range(x+1, n):\n                        for z in range(y+1, n):\n                            if d[\"a\"][x] < d[\"b\"][y] < d[\"c\"][z]:\n                                ans += 1\n        return ans",
  "is_python": true
}