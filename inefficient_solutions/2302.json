{
  "problem_idx": 2302,
  "task_name": "Count Subarrays With Score Less Than K",
  "markdown_description": "\nThe **score** of an array is defined as the **product** of its sum and its length.\n\n\n* For example, the score of `[1, 2, 3, 4, 5]` is `(1 + 2 + 3 + 4 + 5) * 5 = 75`.\n\n\nGiven a positive integer array `nums` and an integer `k`, return *the **number of non-empty subarrays** of* `nums` *whose score is **strictly less** than* `k`.\n\n\nA **subarray** is a contiguous sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,4,3,5], k = 10\n**Output:** 6\n**Explanation:**\nThe 6 subarrays having scores less than 10 are:\n- [2] with score 2 * 1 = 2.\n- [1] with score 1 * 1 = 1.\n- [4] with score 4 * 1 = 4.\n- [3] with score 3 * 1 = 3. \n- [5] with score 5 * 1 = 5.\n- [2,1] with score (2 + 1) * 2 = 6.\nNote that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1], k = 5\n**Output:** 5\n**Explanation:**\nEvery subarray except [1,1,1] has a score less than 5.\n[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.\nThus, there are 5 subarrays having scores less than 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n* `1 <= k <= 1015`\n\n\n",
  "canonical_solution": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        ans = s = j = 0\n        for i, v in enumerate(nums):\n            s += v\n            while s * (i - j + 1) >= k:\n                s -= nums[j]\n                j += 1\n            ans += i - j + 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countSubarrays(self, nums, k):\n        ans = s = j = 0\n        for i, v in enumerate(nums):\n            s += v\n            while s * (i - j + 1) >= k:\n                s -= nums[j]\n                j += 1\n            ans += i - j + 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Generate a random target sum\n    k = random.randint(1, 10 ** 15)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countSubarrays(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countSubarrays(nums, k) == expected_result\n        print(f\"assert solution.countSubarrays({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countSubarrays({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countSubarrays([97, 54, 93, 62, 25, 65, 68, 90], 388144585345481) == 36\nassert solution.countSubarrays([19, 20], 936744615801394) == 3\nassert solution.countSubarrays([41, 84, 81, 55, 14, 33, 15, 65], 323146680085374) == 36\nassert solution.countSubarrays([98, 48, 62, 65, 85, 45, 81, 99], 862981622148370) == 36\nassert solution.countSubarrays([87, 23, 43, 29, 71, 20, 4, 93, 50], 187465209057172) == 45\nassert solution.countSubarrays([57, 19, 11], 961696715513462) == 6\nassert solution.countSubarrays([98, 50, 78, 31], 79463077314902) == 10\nassert solution.countSubarrays([79, 21, 70, 93], 560256096327481) == 10\nassert solution.countSubarrays([27, 54], 338445173450936) == 3\nassert solution.countSubarrays([46, 36, 88, 50], 399485728975587) == 10\nassert solution.countSubarrays([11, 80], 824353680005748) == 3\nassert solution.countSubarrays([79, 3, 84, 81, 12, 89, 80, 78, 74, 8], 115031565847206) == 55\nassert solution.countSubarrays([64, 4, 20, 15, 18, 87, 74, 77, 19, 48], 562792410036623) == 55\nassert solution.countSubarrays([73], 978702523633888) == 1\nassert solution.countSubarrays([70, 47, 66, 63, 43], 97491187783155) == 15\nassert solution.countSubarrays([50], 704254140922095) == 1\nassert solution.countSubarrays([26, 42, 64, 60, 5, 35], 514940898499713) == 21\nassert solution.countSubarrays([38, 75, 1, 46, 95], 243936360038558) == 15\nassert solution.countSubarrays([59, 53], 655509638825011) == 3\nassert solution.countSubarrays([51, 80, 36, 3], 953455769061810) == 10\nassert solution.countSubarrays([31, 72, 89, 65, 45, 27, 92, 76], 555368884305725) == 36\nassert solution.countSubarrays([90, 12, 69, 14, 15, 26], 870344535695430) == 21\nassert solution.countSubarrays([18, 42, 44, 97, 67, 28, 79, 68, 5, 31], 798267621133896) == 55\nassert solution.countSubarrays([45, 39, 65, 51, 26, 81, 73, 1, 58, 94], 597061224806700) == 55\nassert solution.countSubarrays([19, 1, 68], 696815216203966) == 6\nassert solution.countSubarrays([13, 75, 92], 20346988211377) == 6\nassert solution.countSubarrays([28, 79, 98, 94, 35, 99, 81, 54], 485379785403940) == 36\nassert solution.countSubarrays([40, 42, 43], 678261735670194) == 6\nassert solution.countSubarrays([53, 41, 21, 95, 78, 44, 63, 54, 87, 20], 897749083951292) == 55\nassert solution.countSubarrays([98, 7, 37, 43, 55], 683639307027867) == 15\nassert solution.countSubarrays([34, 73, 23], 985084918598125) == 6\nassert solution.countSubarrays([27], 886955510995703) == 1\nassert solution.countSubarrays([32, 36, 79, 21, 31, 70, 62, 82, 18, 9], 83754673238028) == 55\nassert solution.countSubarrays([51], 540488543413764) == 1\nassert solution.countSubarrays([57, 70, 22, 29], 124693769163851) == 10\nassert solution.countSubarrays([96, 5, 11, 67, 59], 778545243763569) == 15\nassert solution.countSubarrays([42, 32, 31, 3, 35, 70, 28], 839723406160941) == 28\nassert solution.countSubarrays([61, 51, 94, 37, 86, 70, 23, 36], 32841148930974) == 36\nassert solution.countSubarrays([54, 71], 739121522957907) == 3\nassert solution.countSubarrays([52, 29, 64, 83], 809656704021581) == 10\nassert solution.countSubarrays([2, 15, 63, 18, 16], 841122062916202) == 15\nassert solution.countSubarrays([42, 84, 4, 39, 62, 47, 13, 32, 70, 14], 101321430847814) == 55\nassert solution.countSubarrays([96, 33], 17300219152992) == 3\nassert solution.countSubarrays([56, 1, 37, 40, 17, 52, 39, 96, 54], 77489423971475) == 45\nassert solution.countSubarrays([61, 64, 51, 44, 37, 39, 85, 12, 50], 482682746236314) == 45\nassert solution.countSubarrays([46, 30, 29, 56, 22, 84, 34], 476194340254970) == 28\nassert solution.countSubarrays([14, 100, 54, 56, 67, 55, 88, 4], 169045824394189) == 36\nassert solution.countSubarrays([20, 94, 71, 30, 31, 12, 78, 15, 55, 65], 514143948460230) == 55\nassert solution.countSubarrays([92, 58, 3, 88, 6, 65, 86], 976029303867572) == 28\nassert solution.countSubarrays([90, 56], 230589525577802) == 3\nassert solution.countSubarrays([48, 22, 88, 1, 4, 3, 67, 7, 90], 781502952328059) == 45\nassert solution.countSubarrays([1, 49], 22600737245705) == 3\nassert solution.countSubarrays([96, 53, 33, 7, 24, 34, 1, 37, 40], 990963528588707) == 45\nassert solution.countSubarrays([76, 23, 86, 48, 45, 27], 587767421654469) == 21\nassert solution.countSubarrays([35, 33, 43, 69, 73, 99], 35938523709054) == 21\nassert solution.countSubarrays([5, 12, 60], 240483606281815) == 6\nassert solution.countSubarrays([76, 85, 63, 4, 66, 91, 89, 26, 32, 87], 681173253977461) == 55\nassert solution.countSubarrays([49, 79, 40, 89, 99, 65, 57, 3, 81], 688864110581825) == 45\nassert solution.countSubarrays([1, 65, 93, 15, 11], 714100406589867) == 15\nassert solution.countSubarrays([5, 7, 58, 84, 89], 713220839694185) == 15\nassert solution.countSubarrays([19, 76, 35], 198919697299595) == 6\nassert solution.countSubarrays([83, 17, 80, 21, 32, 52, 26, 59], 59255603713581) == 36\nassert solution.countSubarrays([54, 20, 2, 67, 78, 52, 55, 21], 135763168318076) == 36\nassert solution.countSubarrays([37, 24, 40, 6, 90, 14, 55, 49], 891476408589954) == 36\nassert solution.countSubarrays([23, 94, 65, 39], 703671513016509) == 10\nassert solution.countSubarrays([99, 90, 84, 6, 23, 67], 415183208447431) == 21\nassert solution.countSubarrays([85, 6, 89], 466727871793593) == 6\nassert solution.countSubarrays([94, 52, 79, 56, 84, 75], 712210020641873) == 21\nassert solution.countSubarrays([71, 61], 239971331491085) == 3\nassert solution.countSubarrays([17, 41, 30, 80, 11, 33, 85, 28], 652454009013352) == 36\nassert solution.countSubarrays([41, 12], 942586381311474) == 3\nassert solution.countSubarrays([13, 86, 57], 385640853980766) == 6\nassert solution.countSubarrays([97, 35, 78, 16, 2, 74, 8, 55, 27, 3], 170316491173317) == 55\nassert solution.countSubarrays([78, 89], 510245881405586) == 3\nassert solution.countSubarrays([83, 85, 47, 15, 6, 63], 444495583090033) == 21\nassert solution.countSubarrays([9, 6, 7, 70, 66], 416543401926308) == 15\nassert solution.countSubarrays([46, 10, 81], 980264574882062) == 6\nassert solution.countSubarrays([19, 21, 16, 74, 83, 39, 59], 243918575807171) == 28\nassert solution.countSubarrays([31, 69, 52, 21, 63, 75, 3], 355135168745490) == 28\nassert solution.countSubarrays([19, 95, 38, 44, 8, 58, 96, 78], 923950671057815) == 36\nassert solution.countSubarrays([8, 92, 59, 60, 82, 77], 789013445907469) == 21\nassert solution.countSubarrays([70, 76, 45, 91, 80], 422540065786334) == 15\nassert solution.countSubarrays([36, 100, 41, 34, 25, 4, 76, 62, 75], 770941766604655) == 45\nassert solution.countSubarrays([44, 72, 23, 27, 8], 280162319142970) == 15\nassert solution.countSubarrays([49, 86, 66, 38, 21, 77, 53, 89], 200346914659917) == 36\nassert solution.countSubarrays([62], 342530478562838) == 1\nassert solution.countSubarrays([5, 85, 75], 149397010027399) == 6\nassert solution.countSubarrays([63], 555298786052251) == 1\nassert solution.countSubarrays([46], 129674217966887) == 1\nassert solution.countSubarrays([73], 425175932293911) == 1\nassert solution.countSubarrays([59, 32, 29, 25, 47], 774940407627871) == 15\nassert solution.countSubarrays([50, 9, 12], 437247163837356) == 6\nassert solution.countSubarrays([3, 66, 23, 74, 94, 44, 37, 4, 31, 25], 511159828562164) == 55\nassert solution.countSubarrays([14, 2, 27, 95, 10, 34], 644044393124859) == 21\nassert solution.countSubarrays([46, 59, 47, 29, 48, 83, 98, 52, 20], 795880411475909) == 45\nassert solution.countSubarrays([4, 87, 72, 90, 86, 58, 7], 894927514106112) == 28\nassert solution.countSubarrays([91, 37, 9, 73, 96, 71, 21], 409123244795620) == 28\nassert solution.countSubarrays([36, 39, 69, 19, 54], 501420726051271) == 15\nassert solution.countSubarrays([63, 61, 20, 15, 46, 91, 59, 96, 42], 779493066348791) == 45\nassert solution.countSubarrays([47, 31, 7, 84, 95, 35, 3], 743055891124081) == 28",
  "inefficient_solution": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        ans = 0\n        for i in range(len(nums)):\n            sum = 0\n            for j in range(i, len(nums)):\n                sum += nums[j]\n                if sum * (j - i + 1) >= k:\n                    break\n                ans += 1\n        return ans",
  "is_python": true
}