{
  "problem_idx": 2530,
  "task_name": "Maximal Score After Applying K Operations",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `k`. You have a **starting score** of `0`.\n\n\nIn one **operation**:\n\n\n1. choose an index `i` such that `0 <= i < nums.length`,\n2. increase your **score** by `nums[i]`, and\n3. replace `nums[i]` with `ceil(nums[i] / 3)`.\n\n\nReturn *the maximum possible **score** you can attain after applying **exactly*** `k` *operations*.\n\n\nThe ceiling function `ceil(val)` is the least integer greater than or equal to `val`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,10,10,10,10], k = 5\n**Output:** 50\n**Explanation:** Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,10,3,3,3], k = 3\n**Output:** 17\n**Explanation:** You can do the following operations:\nOperation 1: Select i = 1, so nums becomes [1,**4**,3,3,3]. Your score increases by 10.\nOperation 2: Select i = 1, so nums becomes [1,**2**,3,3,3]. Your score increases by 4.\nOperation 3: Select i = 2, so nums becomes [1,1,**1**,3,3]. Your score increases by 3.\nThe final score is 10 + 4 + 3 = 17.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, k <= 105`\n* `1 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxKelements(self, nums: List[int], k: int) -> int:\n        h = [-v for v in nums]\n        heapify(h)\n        ans = 0\n        for _ in range(k):\n            v = -heappop(h)\n            ans += v\n            heappush(h, -(ceil(v / 3)))\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom math import ceil\nfrom heapq import heapify, heappop, heappush\nfrom typing import List\n\nclass Solution:\n    def maxKelements(self, nums: List[int], k: int) -> int:\n        h = [-v for v in nums]\n        heapify(h)\n        ans = 0\n        for _ in range(k):\n            v = -heappop(h)\n            ans += v\n            heappush(h, -(ceil(v / 3)))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(1, 11)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxKelements(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxKelements(nums, k) == expected_result\n        print(f\"assert solution.maxKelements({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxKelements({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxKelements([22, 69, 57, 80, 50, 35, 34], 10) == 416\nassert solution.maxKelements([42, 15, 94, 61, 30, 41, 53, 51, 38, 69], 10) == 511\nassert solution.maxKelements([63, 51], 1) == 63\nassert solution.maxKelements([4, 10, 22, 13, 46, 30, 52, 65, 24, 17], 1) == 65\nassert solution.maxKelements([22, 62, 46, 26, 88, 48], 11) == 385\nassert solution.maxKelements([22, 12, 1, 51, 23, 59, 29], 9) == 243\nassert solution.maxKelements([7, 77, 15], 2) == 103\nassert solution.maxKelements([32, 44, 75, 80], 8) == 309\nassert solution.maxKelements([84, 90, 16, 37, 25], 3) == 211\nassert solution.maxKelements([38, 34, 88], 4) == 190\nassert solution.maxKelements([26, 57, 6, 52, 5, 90, 24], 9) == 326\nassert solution.maxKelements([9, 3, 42, 45, 90, 39, 59], 2) == 149\nassert solution.maxKelements([81, 56, 51, 49], 4) == 237\nassert solution.maxKelements([70, 94, 16, 83, 53, 84], 9) == 496\nassert solution.maxKelements([53, 33, 49, 83], 8) == 292\nassert solution.maxKelements([38, 63, 86, 62, 14, 32, 5, 77, 91], 7) == 449\nassert solution.maxKelements([16, 76, 79, 39, 63, 45, 38, 23], 9) == 416\nassert solution.maxKelements([43, 92, 3, 66, 1, 49, 59], 6) == 340\nassert solution.maxKelements([83, 15, 76, 14, 22, 1, 26, 21, 96], 10) == 425\nassert solution.maxKelements([14, 6, 44, 84, 81, 97, 53, 74], 5) == 389\nassert solution.maxKelements([36, 9, 89, 19, 94, 50, 4, 91, 38, 37], 8) == 467\nassert solution.maxKelements([50, 18, 76, 75, 90, 91, 10, 39], 9) == 508\nassert solution.maxKelements([51, 40, 76, 97, 23, 41, 53], 6) == 358\nassert solution.maxKelements([99, 70, 17], 10) == 275\nassert solution.maxKelements([58, 11, 7, 91, 67, 35], 4) == 251\nassert solution.maxKelements([11, 46, 26, 45], 10) == 183\nassert solution.maxKelements([79, 73, 17, 46, 30], 9) == 323\nassert solution.maxKelements([64, 67, 34, 92, 74, 39], 1) == 92\nassert solution.maxKelements([27, 50, 88, 67, 97, 42], 7) == 407\nassert solution.maxKelements([22, 40, 60, 13, 55, 26], 9) == 269\nassert solution.maxKelements([22, 37, 96, 13, 51, 4, 39, 99], 4) == 285\nassert solution.maxKelements([95, 62, 63], 9) == 319\nassert solution.maxKelements([77, 74, 27, 51, 79], 4) == 281\nassert solution.maxKelements([49, 78, 98, 87], 11) == 447\nassert solution.maxKelements([7, 69, 66, 95, 21, 16], 2) == 164\nassert solution.maxKelements([87, 82, 79], 9) == 361\nassert solution.maxKelements([84, 97, 56, 42, 81], 11) == 492\nassert solution.maxKelements([100, 19, 69, 79, 21, 57, 70], 7) == 436\nassert solution.maxKelements([47, 52, 58, 66, 75, 85, 57, 94, 41, 84], 8) == 571\nassert solution.maxKelements([77, 100, 51, 91, 95, 10, 43, 1, 46], 2) == 195\nassert solution.maxKelements([63, 31, 91, 12], 8) == 271\nassert solution.maxKelements([93, 10, 62, 79], 6) == 313\nassert solution.maxKelements([75, 78, 47, 5, 9, 50, 99], 7) == 408\nassert solution.maxKelements([69, 20, 57], 3) == 149\nassert solution.maxKelements([15, 33, 59, 9, 92, 45, 28, 35], 8) == 343\nassert solution.maxKelements([6, 37, 45], 3) == 97\nassert solution.maxKelements([8, 47, 73, 40, 71, 52, 36, 4, 79], 5) == 322\nassert solution.maxKelements([47, 13], 1) == 47\nassert solution.maxKelements([6, 98, 32, 50, 46, 37], 11) == 364\nassert solution.maxKelements([19, 86], 10) == 162\nassert solution.maxKelements([66, 59, 1, 86], 10) == 311\nassert solution.maxKelements([92, 52, 34, 79, 12, 63, 44, 82, 87, 78], 6) == 481\nassert solution.maxKelements([5, 50], 11) == 87\nassert solution.maxKelements([45, 95, 69, 90, 24], 10) == 434\nassert solution.maxKelements([42, 14, 80, 53, 35, 67, 44, 20, 96, 87], 5) == 383\nassert solution.maxKelements([65, 35], 3) == 122\nassert solution.maxKelements([32, 97, 34], 1) == 97\nassert solution.maxKelements([97, 64, 3], 10) == 247\nassert solution.maxKelements([66, 51, 33, 31], 9) == 250\nassert solution.maxKelements([2, 36, 98, 16, 67, 39], 10) == 348\nassert solution.maxKelements([74, 94, 23, 37, 70, 29, 89], 6) == 396\nassert solution.maxKelements([27, 18, 23, 37, 49, 100, 38], 4) == 224\nassert solution.maxKelements([98, 27, 46, 57], 11) == 329\nassert solution.maxKelements([2, 60, 66, 83, 57], 9) == 365\nassert solution.maxKelements([95, 92, 86], 8) == 387\nassert solution.maxKelements([10, 64, 100, 33, 71, 78, 22], 11) == 486\nassert solution.maxKelements([17, 13, 24, 38, 87, 48, 47, 30], 8) == 320\nassert solution.maxKelements([17, 14, 21], 10) == 78\nassert solution.maxKelements([28, 78, 47, 38, 94], 7) == 343\nassert solution.maxKelements([95, 15, 11, 70, 87], 5) == 313\nassert solution.maxKelements([44, 94, 77, 29, 62], 1) == 94\nassert solution.maxKelements([60, 93, 29, 23, 7, 30, 76, 86, 15], 9) == 460\nassert solution.maxKelements([44, 42, 79, 46], 8) == 283\nassert solution.maxKelements([51, 74, 37, 36, 76, 78, 8], 9) == 429\nassert solution.maxKelements([36, 100, 52, 76, 48], 8) == 390\nassert solution.maxKelements([85, 30], 3) == 144\nassert solution.maxKelements([82, 72, 80, 1], 6) == 313\nassert solution.maxKelements([66, 7, 16, 26, 85], 1) == 85\nassert solution.maxKelements([53, 64, 35], 3) == 152\nassert solution.maxKelements([11, 75, 23], 10) == 163\nassert solution.maxKelements([9, 69, 85, 19, 40, 32, 23, 70, 59], 4) == 283\nassert solution.maxKelements([43, 89, 13, 84, 1], 2) == 173\nassert solution.maxKelements([38, 96, 42, 53], 1) == 96\nassert solution.maxKelements([17, 58, 50, 57, 97, 51, 44], 2) == 155\nassert solution.maxKelements([80, 49], 9) == 194\nassert solution.maxKelements([57, 62, 27, 61, 92, 42, 24, 94, 67, 83], 10) == 621\nassert solution.maxKelements([3, 41, 35, 70, 62, 9, 76, 34], 11) == 415\nassert solution.maxKelements([61, 39, 17, 96, 75, 51, 18, 94, 25], 9) == 505\nassert solution.maxKelements([54, 59, 14, 36, 48, 17, 60, 42, 35, 62], 10) == 437\nassert solution.maxKelements([74, 49, 56, 89, 28, 87], 3) == 250\nassert solution.maxKelements([45, 27], 9) == 108\nassert solution.maxKelements([57, 29, 76, 10, 28], 9) == 265\nassert solution.maxKelements([92, 23, 26, 88, 66], 8) == 378\nassert solution.maxKelements([60, 86, 41, 52], 10) == 337\nassert solution.maxKelements([86, 19, 94, 92, 38, 39, 58, 41], 7) == 448\nassert solution.maxKelements([21, 69, 24, 54, 78, 60, 64, 23], 4) == 271\nassert solution.maxKelements([88, 70, 40, 46, 72, 92, 19], 7) == 439\nassert solution.maxKelements([97, 98, 84, 41, 17], 7) == 414\nassert solution.maxKelements([56, 11, 13], 5) == 106\nassert solution.maxKelements([78, 56], 6) == 195",
  "inefficient_solution": "class Solution:\n    def maxKelements(self, nums, k):\n        h = [-v for v in nums]\n        heapify(h)\n        ans = 0\n        for _ in range(k):\n            v = -heappop(h)\n            ans += v\n            for i in range(1000):  # simulate division by 3 with a loop\n                v //= 3\n                if v < 0:\n                    break\n                heappush(h, -(v + 1))  # add a 1 to simulate ceiling\n                heappush(h, -(v + 1))  # add an extra copy\n        return ans",
  "is_python": true
}