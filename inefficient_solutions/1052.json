{
  "problem_idx": 1052,
  "task_name": "Grumpy Bookstore Owner",
  "markdown_description": "\nThere is a bookstore owner that has a store open for `n` minutes. Every minute, some number of customers enter the store. You are given an integer array `customers` of length `n` where `customers[i]` is the number of the customer that enters the store at the start of the `ith` minute and all those customers leave after the end of that minute.\n\n\nOn some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where `grumpy[i]` is `1` if the bookstore owner is grumpy during the `ith` minute, and is `0` otherwise.\n\n\nWhen the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.\n\n\nThe bookstore owner knows a secret technique to keep themselves not grumpy for `minutes` consecutive minutes, but can only use it once.\n\n\nReturn *the maximum number of customers that can be satisfied throughout the day*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\n**Output:** 16\n**Explanation:** The bookstore owner keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** customers = [1], grumpy = [0], minutes = 1\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == customers.length == grumpy.length`\n* `1 <= minutes <= n <= 2 * 104`\n* `0 <= customers[i] <= 1000`\n* `grumpy[i]` is either `0` or `1`.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxSatisfied(\n        self, customers: List[int], grumpy: List[int], minutes: int\n    ) -> int:\n        s = sum(a * b for a, b in zip(customers, grumpy))\n        cs = sum(customers)\n        t = ans = 0\n        for i, (a, b) in enumerate(zip(customers, grumpy), 1):\n            t += a * b\n            if (j := i - minutes) >= 0:\n                ans = max(ans, cs - (s - t))\n                t -= customers[j] * grumpy[j]\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxSatisfied(\n        self, customers: List[int], grumpy: List[int], minutes: int\n    ) -> int:\n        s = sum(a * b for a, b in zip(customers, grumpy))\n        cs = sum(customers)\n        t = ans = 0\n        for i, (a, b) in enumerate(zip(customers, grumpy), 1):\n            t += a * b\n            if (j := i - minutes) >= 0:\n                ans = max(ans, cs - (s - t))\n                t -= customers[j] * grumpy[j]\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random length for customers and grumpy arrays\n    n = random.randint(1, 10)\n    \n    # Generate random numbers for customers array\n    customers = [random.randint(0, 1000) for _ in range(n)]\n    \n    # Generate random binary array for grumpy array\n    grumpy = [random.randint(0, 1) for _ in range(n)]\n    \n    # Generate a random number for minutes\n    minutes = random.randint(1, n)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxSatisfied(customers, grumpy, minutes)\n\n    return customers, grumpy, minutes, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        customers, grumpy, minutes, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxSatisfied(customers, grumpy, minutes) == expected_result\n        print(f\"assert solution.maxSatisfied({customers}, {grumpy}, {minutes}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxSatisfied({customers}, {grumpy}, {minutes}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxSatisfied([410, 139, 451, 461, 436, 316, 209], [0, 0, 1, 1, 1, 0, 0], 7) == 2422\nassert solution.maxSatisfied([878, 37, 89, 874], [0, 0, 1, 0], 3) == 1878\nassert solution.maxSatisfied([165, 299], [1, 1], 2) == 464\nassert solution.maxSatisfied([706, 778, 513, 848, 391, 468], [1, 0, 0, 1, 1, 1], 2) == 2530\nassert solution.maxSatisfied([525, 656, 721, 852, 977, 307, 470, 601, 33, 538], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0], 8) == 5680\nassert solution.maxSatisfied([127, 338, 498, 132, 436], [0, 1, 0, 0, 1], 1) == 1193\nassert solution.maxSatisfied([822, 668, 186, 741, 787], [0, 0, 0, 0, 0], 5) == 3204\nassert solution.maxSatisfied([772, 770, 239], [1, 1, 0], 1) == 1011\nassert solution.maxSatisfied([104, 597, 547, 545], [1, 1, 0, 1], 3) == 1689\nassert solution.maxSatisfied([528, 296, 681, 438], [1, 1, 0, 0], 1) == 1647\nassert solution.maxSatisfied([406, 725], [0, 1], 2) == 1131\nassert solution.maxSatisfied([249, 773, 215, 252, 297], [0, 1, 1, 1, 0], 4) == 1786\nassert solution.maxSatisfied([690, 528], [0, 0], 1) == 1218\nassert solution.maxSatisfied([529], [0], 1) == 529\nassert solution.maxSatisfied([114, 766, 894, 822, 162, 758, 330, 824, 866, 479], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1], 8) == 5422\nassert solution.maxSatisfied([816], [1], 1) == 816\nassert solution.maxSatisfied([427, 728, 783, 536], [0, 0, 0, 1], 4) == 2474\nassert solution.maxSatisfied([857, 58], [1, 0], 1) == 915\nassert solution.maxSatisfied([420, 134, 256, 808, 697, 213, 704, 8], [0, 0, 1, 0, 1, 1, 0, 0], 5) == 3240\nassert solution.maxSatisfied([157, 181, 941, 648, 13, 377, 524, 832], [1, 1, 0, 0, 1, 0, 1, 0], 7) == 3673\nassert solution.maxSatisfied([55, 186, 306, 871, 980, 69], [1, 0, 1, 1, 0, 0], 1) == 2106\nassert solution.maxSatisfied([250, 352, 568, 789, 643, 91], [1, 0, 1, 0, 1, 0], 4) == 2443\nassert solution.maxSatisfied([179, 135, 587, 430, 557, 413, 976], [1, 1, 1, 1, 0, 0, 1], 3) == 2122\nassert solution.maxSatisfied([298, 705, 668, 821], [0, 1, 1, 1], 1) == 1119\nassert solution.maxSatisfied([809, 774, 53], [0, 1, 0], 2) == 1636\nassert solution.maxSatisfied([110, 975, 888, 631, 177, 259, 170, 723, 790, 465], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1], 3) == 3461\nassert solution.maxSatisfied([802, 107, 133, 332, 620], [1, 1, 0, 0, 0], 5) == 1994\nassert solution.maxSatisfied([195], [0], 1) == 195\nassert solution.maxSatisfied([195, 440, 172, 480, 892, 661, 173, 130], [0, 0, 0, 0, 1, 1, 1, 0], 6) == 3143\nassert solution.maxSatisfied([552, 1000, 990], [0, 1, 1], 2) == 2542\nassert solution.maxSatisfied([90, 240, 743, 939], [1, 0, 1, 1], 1) == 1179\nassert solution.maxSatisfied([374, 138], [0, 0], 2) == 512\nassert solution.maxSatisfied([546, 57, 744], [0, 0, 0], 1) == 1347\nassert solution.maxSatisfied([347, 269, 106, 840, 128, 970, 317], [1, 0, 1, 0, 1, 1, 1], 5) == 2630\nassert solution.maxSatisfied([635, 226, 183, 670], [0, 1, 0, 1], 3) == 1714\nassert solution.maxSatisfied([165, 140], [0, 0], 2) == 305\nassert solution.maxSatisfied([98, 927, 70, 829, 218], [1, 1, 0, 1, 1], 5) == 2142\nassert solution.maxSatisfied([458, 881, 103, 185, 931, 970], [0, 1, 0, 0, 1, 0], 3) == 2647\nassert solution.maxSatisfied([319, 757, 668], [1, 1, 1], 1) == 757\nassert solution.maxSatisfied([94, 619], [1, 1], 2) == 713\nassert solution.maxSatisfied([628, 892, 617, 16, 236, 782, 508], [1, 0, 1, 1, 1, 1, 0], 4) == 3051\nassert solution.maxSatisfied([888, 880, 113, 446, 94, 759, 557, 771, 970, 300], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0], 8) == 5778\nassert solution.maxSatisfied([350, 801, 376, 649, 407, 171, 812, 82, 723, 77], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0], 8) == 4448\nassert solution.maxSatisfied([314, 277, 413, 519, 632, 945, 98], [0, 1, 0, 0, 0, 1, 1], 7) == 3198\nassert solution.maxSatisfied([784, 718], [1, 1], 2) == 1502\nassert solution.maxSatisfied([860, 507, 622, 864], [0, 0, 0, 0], 4) == 2853\nassert solution.maxSatisfied([491, 312, 316, 842, 520, 757, 203, 502, 328], [1, 0, 0, 0, 0, 0, 1, 1, 0], 5) == 3780\nassert solution.maxSatisfied([491, 593], [0, 1], 2) == 1084\nassert solution.maxSatisfied([821, 772, 456, 15, 640, 1000, 866, 856], [1, 0, 0, 1, 1, 1, 1, 1], 1) == 2228\nassert solution.maxSatisfied([993, 567, 531, 400, 149, 569, 302, 76, 61, 726], [1, 1, 1, 1, 1, 1, 0, 0, 0, 1], 8) == 3648\nassert solution.maxSatisfied([63, 190, 530], [1, 1, 1], 2) == 720\nassert solution.maxSatisfied([170, 717, 268, 647, 16, 200, 543, 533, 718, 285], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0], 8) == 4097\nassert solution.maxSatisfied([682, 424, 181, 913, 38, 451, 585, 222, 149, 317], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0], 7) == 3962\nassert solution.maxSatisfied([398, 865, 63, 637, 255, 303], [0, 1, 0, 0, 1, 1], 4) == 2218\nassert solution.maxSatisfied([372, 541, 644, 596, 125, 284, 162, 244], [1, 1, 0, 1, 1, 1, 1, 1], 7) == 2724\nassert solution.maxSatisfied([722, 689, 307, 900, 428, 890], [0, 1, 1, 0, 1, 1], 5) == 3936\nassert solution.maxSatisfied([752, 483], [1, 0], 1) == 1235\nassert solution.maxSatisfied([467, 62, 825, 553, 193, 835, 442, 471, 706, 530], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0], 10) == 5084\nassert solution.maxSatisfied([748, 650, 402, 22, 960, 739, 927], [1, 1, 0, 1, 0, 1, 0], 2) == 3687\nassert solution.maxSatisfied([491, 324, 560, 635, 763, 564, 701, 218], [0, 0, 1, 1, 0, 1, 0, 0], 8) == 4256\nassert solution.maxSatisfied([780, 195, 13, 509, 937, 672, 295, 881], [1, 1, 1, 1, 1, 1, 0, 1], 2) == 1904\nassert solution.maxSatisfied([145, 562, 788, 842, 892, 239, 455], [1, 0, 0, 1, 1, 0, 1], 6) == 3778\nassert solution.maxSatisfied([542, 189, 141, 420], [0, 0, 0, 0], 4) == 1292\nassert solution.maxSatisfied([288, 896], [0, 1], 1) == 1184\nassert solution.maxSatisfied([191], [0], 1) == 191\nassert solution.maxSatisfied([748, 57, 916, 572, 943, 56, 149], [1, 0, 1, 0, 0, 0, 1], 4) == 3292\nassert solution.maxSatisfied([91, 175, 869, 968, 765], [0, 0, 1, 0, 1], 5) == 2868\nassert solution.maxSatisfied([88], [1], 1) == 88\nassert solution.maxSatisfied([481, 480, 748], [0, 0, 1], 1) == 1709\nassert solution.maxSatisfied([713, 514, 669, 144], [1, 0, 0, 1], 1) == 1896\nassert solution.maxSatisfied([425, 464], [1, 0], 2) == 889\nassert solution.maxSatisfied([23, 290, 52, 354, 903], [1, 1, 1, 0, 0], 1) == 1547\nassert solution.maxSatisfied([893, 565, 824], [1, 1, 1], 2) == 1458\nassert solution.maxSatisfied([861, 643, 308, 455, 381, 45], [0, 1, 0, 0, 0, 1], 4) == 2648\nassert solution.maxSatisfied([384, 839], [0, 0], 1) == 1223\nassert solution.maxSatisfied([785, 214, 94, 661, 243, 509], [1, 0, 0, 0, 1, 1], 4) == 1754\nassert solution.maxSatisfied([457, 742, 914, 977, 234, 518, 875], [0, 1, 0, 0, 0, 0, 0], 2) == 4717\nassert solution.maxSatisfied([266, 910, 989, 882, 995, 793, 615], [1, 1, 0, 0, 1, 1, 1], 5) == 4569\nassert solution.maxSatisfied([533, 28, 444, 421, 794, 211], [0, 1, 0, 1, 0, 1], 3) == 2403\nassert solution.maxSatisfied([349, 743, 338], [1, 0, 0], 3) == 1430\nassert solution.maxSatisfied([505, 510, 373], [1, 0, 0], 2) == 1388\nassert solution.maxSatisfied([52, 315, 893, 104, 90, 273], [0, 1, 0, 0, 1, 1], 2) == 1412\nassert solution.maxSatisfied([563, 773, 430, 235, 408, 150, 634, 708], [0, 1, 1, 1, 1, 1, 1, 0], 3) == 2709\nassert solution.maxSatisfied([2, 838, 865, 355, 811, 772, 841], [1, 1, 0, 1, 0, 0, 1], 5) == 3644\nassert solution.maxSatisfied([345, 212, 848, 855, 802, 292, 956, 869, 377], [0, 0, 1, 1, 1, 1, 1, 1, 0], 9) == 5556\nassert solution.maxSatisfied([514, 834, 72, 612, 71, 877, 439, 379, 351, 534], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1], 4) == 3849\nassert solution.maxSatisfied([136, 438, 765, 260, 578, 280, 361], [1, 1, 0, 0, 0, 1, 1], 3) == 2244\nassert solution.maxSatisfied([46, 40, 468, 270, 514, 988], [1, 0, 1, 1, 0, 0], 5) == 2326\nassert solution.maxSatisfied([666, 471], [0, 1], 2) == 1137\nassert solution.maxSatisfied([707, 455, 594, 851], [1, 0, 0, 0], 2) == 2607\nassert solution.maxSatisfied([503, 8, 403, 822, 251, 752, 290], [1, 0, 0, 1, 1, 1, 0], 3) == 2526\nassert solution.maxSatisfied([226, 242, 519, 807], [0, 0, 1, 1], 2) == 1794\nassert solution.maxSatisfied([30, 766, 540, 978, 199, 326, 105, 273], [1, 1, 0, 1, 0, 0, 0, 1], 1) == 2148\nassert solution.maxSatisfied([835, 434, 139, 883, 840, 930], [0, 0, 0, 0, 0, 0], 3) == 4061\nassert solution.maxSatisfied([806, 832, 452, 160, 133], [0, 1, 0, 0, 1], 4) == 2383\nassert solution.maxSatisfied([620, 934, 899], [0, 0, 0], 3) == 2453\nassert solution.maxSatisfied([267, 81, 393, 61, 731, 593], [0, 1, 0, 1, 0, 0], 6) == 2126\nassert solution.maxSatisfied([370, 414, 528, 978, 566, 181, 682, 10, 584], [0, 1, 1, 0, 1, 0, 0, 1, 0], 9) == 4313\nassert solution.maxSatisfied([919, 204, 644, 832], [1, 1, 0, 0], 2) == 2599\nassert solution.maxSatisfied([751, 836, 214, 32, 25, 622, 561, 280, 391], [1, 1, 0, 0, 1, 0, 1, 0, 0], 8) == 3712",
  "inefficient_solution": "class Solution:\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\n        grumpy_repeated = []\n        for _ in range(len(customers) * 2):\n            grumpy_repeated.extend(grumpy)\n        customers_repeated = []\n        for _ in range(len(customers) * 2):\n            customers_repeated.extend(customers)\n        customers_flipped = []\n        for i, c in enumerate(customers):\n            customers_flipped.append(customers[-i - 1])\n        customers_repeated_flipped = []\n        for i, c in enumerate(customers_repeated):\n            customers_repeated_flipped.append(customers_repeated[-i - 1])\n        s = sum(a * b for a, b in zip(customers_repeated, grumpy_repeated))\n        cs = sum(customers_repeated)\n        t = ans = 0\n        for i, (a, b) in enumerate(zip(customers_repeated, grumpy_repeated), 1):\n            t += a * b\n            if (j := i - minutes) >= 0:\n                ans = max(ans, cs - (s - t))\n                t -= customers_repeated[j] * grumpy_repeated[j]\n        return ans",
  "is_python": true
}