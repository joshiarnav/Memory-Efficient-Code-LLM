{
  "problem_idx": 2297,
  "task_name": "Jump Game VIII",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` of length `n`. You are initially standing at index `0`. You can jump from index `i` to index `j` where `i < j` if:\n\n\n* `nums[i] <= nums[j]` and `nums[k] < nums[i]` for all indexes `k` in the range `i < k < j`, or\n* `nums[i] > nums[j]` and `nums[k] >= nums[i]` for all indexes `k` in the range `i < k < j`.\n\n\nYou are also given an integer array `costs` of length `n` where `costs[i]` denotes the cost of jumping **to** index `i`.\n\n\nReturn *the **minimum** cost to jump to the index* `n - 1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,4,4,1], costs = [3,7,6,4,2]\n**Output:** 8\n**Explanation:** You start at index 0.\n- Jump to index 2 with a cost of costs[2] = 6.\n- Jump to index 4 with a cost of costs[4] = 2.\nThe total cost is 8. It can be proven that 8 is the minimum cost needed.\nTwo other possible paths are from index 0 -> 1 -> 4 and index 0 -> 2 -> 3 -> 4.\nThese have a total cost of 9 and 12, respectively.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,1,2], costs = [1,1,1]\n**Output:** 2\n**Explanation:** Start at index 0.\n- Jump to index 1 with a cost of costs[1] = 1.\n- Jump to index 2 with a cost of costs[2] = 1.\nThe total cost is 2. Note that you cannot jump directly from index 0 to index 2 because nums[0] <= nums[1].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length == costs.length`\n* `1 <= n <= 105`\n* `0 <= nums[i], costs[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n        n = len(nums)\n        g = defaultdict(list)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] < nums[i]:\n                stk.pop()\n            if stk:\n                g[i].append(stk[-1])\n            stk.append(i)\n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] >= nums[i]:\n                stk.pop()\n            if stk:\n                g[i].append(stk[-1])\n            stk.append(i)\n\n        f = [inf] * n\n        f[0] = 0\n        for i in range(n):\n            for j in g[i]:\n                f[j] = min(f[j], f[i] + costs[j])\n        return f[n - 1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n        n = len(nums)\n        g = defaultdict(list)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] < nums[i]:\n                stk.pop()\n            if stk:\n                g[i].append(stk[-1])\n            stk.append(i)\n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and nums[stk[-1]] >= nums[i]:\n                stk.pop()\n            if stk:\n                g[i].append(stk[-1])\n            stk.append(i)\n\n        f = [inf] * n\n        f[0] = 0\n        for i in range(n):\n            for j in g[i]:\n                f[j] = min(f[j], f[i] + costs[j])\n        return f[n - 1]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate random costs list\n    costs = random.sample(range(1, 101), len(nums))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCost(nums, costs)\n\n    return nums, costs, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, costs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCost(nums, costs) == expected_result\n        print(f\"assert solution.minCost({nums},{costs}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCost({nums},{costs}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minCost([75, 47],[76, 14]) == 14\nassert solution.minCost([33, 81, 29, 20, 71],[78, 3, 42, 55, 33]) == 75\nassert solution.minCost([84, 37, 77, 27, 57, 12, 93, 96],[96, 62, 50, 79, 35, 20, 88, 5]) == 93\nassert solution.minCost([8, 45, 78, 21, 50, 99, 27, 73],[32, 21, 43, 65, 82, 89, 10, 77]) == 240\nassert solution.minCost([15, 79, 54, 95, 59, 88, 47],[4, 52, 60, 65, 96, 22, 5]) == 117\nassert solution.minCost([97, 67, 1, 85, 39, 77],[11, 68, 79, 14, 100, 26]) == 208\nassert solution.minCost([58, 93, 80, 14, 97, 50, 88, 56, 79, 57],[20, 25, 39, 38, 95, 60, 68, 81, 6, 49]) == 384\nassert solution.minCost([62, 19, 3],[76, 86, 24]) == 110\nassert solution.minCost([29, 4, 52, 34, 76, 99],[47, 29, 75, 19, 69, 94]) == 238\nassert solution.minCost([83, 58],[82, 65]) == 65\nassert solution.minCost([49, 13, 62, 7],[74, 75, 66, 26]) == 92\nassert solution.minCost([6, 74],[67, 40]) == 40\nassert solution.minCost([60, 84, 80, 78, 41, 70, 58, 42, 24],[49, 54, 19, 15, 55, 83, 21, 68, 13]) == 68\nassert solution.minCost([50, 96, 42, 7, 75, 28, 11],[67, 56, 100, 61, 21, 80, 9]) == 210\nassert solution.minCost([75, 7, 72, 71],[89, 39, 77, 3]) == 119\nassert solution.minCost([66, 6, 90, 39, 38, 84],[41, 30, 75, 9, 17, 44]) == 128\nassert solution.minCost([63, 15],[95, 99]) == 99\nassert solution.minCost([88, 47, 34, 83, 95, 35],[31, 87, 84, 36, 67, 82]) == 149\nassert solution.minCost([2, 43, 54, 4, 87, 48, 83],[97, 45, 26, 3, 39, 19, 61]) == 167\nassert solution.minCost([46, 38, 75, 4, 62, 73, 19, 10, 24],[20, 77, 10, 66, 12, 37, 50, 51, 40]) == 178\nassert solution.minCost([5, 90, 94, 84, 28, 58],[62, 58, 11, 34, 18, 45]) == 155\nassert solution.minCost([91, 23, 88, 75, 79],[13, 25, 68, 94, 66]) == 253\nassert solution.minCost([12, 87],[94, 51]) == 51\nassert solution.minCost([26, 14, 6, 74, 34, 85, 38, 27, 95, 98],[76, 20, 8, 24, 55, 87, 99, 14, 79, 85]) == 257\nassert solution.minCost([61, 20, 86, 90, 92],[45, 75, 27, 29, 87]) == 143\nassert solution.minCost([12, 92, 26],[57, 93, 80]) == 173\nassert solution.minCost([57, 86, 1, 42, 5, 26, 77],[72, 2, 46, 90, 73, 27, 20]) == 156\nassert solution.minCost([33, 59, 18, 82, 98, 2, 19, 9],[53, 71, 33, 7, 74, 5, 34, 10]) == 82\nassert solution.minCost([29, 77],[12, 64]) == 64\nassert solution.minCost([7, 53, 86, 26, 72, 70, 69, 32],[45, 1, 69, 75, 98, 24, 60, 50]) == 308\nassert solution.minCost([29, 42, 5, 56, 39, 16, 73],[25, 47, 76, 5, 64, 33, 38]) == 90\nassert solution.minCost([76, 61, 56, 6, 28, 62, 50, 7],[70, 68, 13, 34, 99, 54, 76, 42]) == 240\nassert solution.minCost([55, 8, 2, 13, 43, 71],[78, 96, 49, 22, 44, 6]) == 6\nassert solution.minCost([37, 27],[52, 30]) == 30\nassert solution.minCost([45, 50, 96, 35, 51, 40, 55],[15, 49, 31, 68, 35, 57, 18]) == 121\nassert solution.minCost([88, 6, 5, 20, 54],[86, 5, 12, 64, 26]) == 95\nassert solution.minCost([4, 66, 16, 46, 28, 8, 52, 95],[97, 18, 42, 84, 22, 51, 99, 28]) == 46\nassert solution.minCost([43, 23, 39, 21, 86, 74, 12],[34, 57, 79, 25, 24, 55, 50]) == 129\nassert solution.minCost([78, 45, 94, 91],[21, 45, 13, 62]) == 75\nassert solution.minCost([61, 75, 27, 39, 81, 43, 11],[70, 34, 90, 81, 97, 100, 11]) == 101\nassert solution.minCost([72, 26, 10, 41, 4, 34],[39, 34, 60, 26, 73, 23]) == 156\nassert solution.minCost([32, 69, 88, 74, 56, 76, 68, 65],[59, 7, 33, 13, 12, 22, 52, 89]) == 182\nassert solution.minCost([36, 48, 66, 22, 94, 1, 78],[12, 11, 1, 97, 37, 23, 35]) == 107\nassert solution.minCost([49, 43, 58, 51, 94, 73, 26, 67, 99, 10],[78, 17, 40, 71, 32, 59, 96, 76, 45, 57]) == 170\nassert solution.minCost([45, 35, 69, 7, 2, 3, 62, 94],[31, 11, 89, 94, 25, 37, 84, 35]) == 124\nassert solution.minCost([36, 62, 22, 20, 19, 50, 92, 65],[9, 87, 32, 33, 30, 13, 66, 23]) == 134\nassert solution.minCost([55, 15, 79],[96, 92, 42]) == 42\nassert solution.minCost([60, 49, 16, 96],[17, 70, 56, 22]) == 22\nassert solution.minCost([20, 73, 72, 17, 85, 14, 65, 87, 48, 27],[50, 80, 3, 96, 16, 40, 58, 69, 84, 31]) == 280\nassert solution.minCost([83, 10, 1, 68, 15, 60, 85, 28, 48],[83, 9, 78, 20, 98, 69, 41, 65, 40]) == 146\nassert solution.minCost([71, 84, 99, 69],[94, 75, 98, 53]) == 53\nassert solution.minCost([44, 40, 60, 45, 88, 72],[92, 84, 79, 35, 27, 28]) == 134\nassert solution.minCost([52, 97, 34, 93, 68, 98, 81, 56, 55, 60],[76, 15, 45, 97, 99, 86, 82, 20, 63, 98]) == 301\nassert solution.minCost([42, 49, 30, 21, 26, 50, 11, 47, 43],[50, 87, 73, 30, 94, 64, 92, 82, 20]) == 297\nassert solution.minCost([64, 25],[25, 38]) == 38\nassert solution.minCost([98, 33, 75, 51],[33, 2, 94, 47]) == 143\nassert solution.minCost([15, 60],[7, 100]) == 100\nassert solution.minCost([29, 11, 33, 43, 8, 44, 98, 17, 53, 1],[85, 28, 55, 13, 25, 88, 23, 84, 16, 15]) == 68\nassert solution.minCost([72, 23, 70, 12, 27],[67, 44, 28, 18, 49]) == 111\nassert solution.minCost([44, 56, 48],[20, 56, 26]) == 82\nassert solution.minCost([92, 12, 8, 16, 87, 19, 57, 33],[51, 14, 11, 58, 9, 67, 2, 47]) == 197\nassert solution.minCost([34, 26, 67],[12, 14, 61]) == 61\nassert solution.minCost([35, 89, 99, 33, 10, 69, 96, 90, 34],[38, 65, 82, 3, 80, 29, 31, 74, 47]) == 79\nassert solution.minCost([9, 26, 48, 39, 37, 47, 64, 93],[58, 51, 7, 13, 6, 95, 70, 5]) == 133\nassert solution.minCost([37, 46, 6],[12, 39, 37]) == 37\nassert solution.minCost([29, 92],[55, 18]) == 18\nassert solution.minCost([9, 39, 68, 73, 76, 12, 85, 54, 98, 89],[40, 4, 52, 18, 46, 84, 93, 8, 97, 86]) == 364\nassert solution.minCost([24, 3, 78, 13, 21, 1, 60, 59, 55],[64, 29, 9, 83, 65, 45, 35, 58, 49]) == 216\nassert solution.minCost([31, 76, 33, 82, 11],[16, 31, 13, 76, 92]) == 92\nassert solution.minCost([11, 39, 97, 47],[80, 88, 31, 61]) == 180\nassert solution.minCost([61, 65],[84, 68]) == 68\nassert solution.minCost([93, 35],[90, 31]) == 31\nassert solution.minCost([44, 35, 80, 19, 85, 69, 66, 27],[95, 34, 25, 7, 8, 17, 2, 36]) == 88\nassert solution.minCost([40, 86, 21, 75, 41, 94, 91, 60],[14, 45, 56, 12, 98, 92, 18, 3]) == 158\nassert solution.minCost([19, 31, 62, 100, 25, 41, 56, 50],[78, 2, 16, 77, 24, 35, 83, 91]) == 235\nassert solution.minCost([92, 59, 58, 16, 38, 23, 91, 47],[42, 43, 100, 56, 27, 54, 45, 80]) == 168\nassert solution.minCost([73, 59, 5, 55],[10, 35, 78, 71]) == 184\nassert solution.minCost([36, 74, 100, 85, 5],[14, 32, 31, 53, 73]) == 73\nassert solution.minCost([26, 89, 48, 39, 99, 25, 67],[65, 66, 48, 26, 84, 91, 12]) == 103\nassert solution.minCost([44, 46, 91, 57, 37, 67, 63, 26],[76, 5, 93, 44, 16, 59, 80, 97]) == 113\nassert solution.minCost([63, 43],[32, 39]) == 39\nassert solution.minCost([10, 50, 73, 72, 20, 62, 94, 71],[18, 78, 96, 10, 91, 71, 74, 1]) == 249\nassert solution.minCost([44, 61, 46, 3, 93, 91, 59, 77, 75, 66],[7, 40, 91, 50, 25, 41, 1, 57, 88, 94]) == 346\nassert solution.minCost([100, 25, 3, 92, 72, 49, 76, 13, 54],[98, 91, 9, 6, 60, 24, 22, 89, 32]) == 300\nassert solution.minCost([98, 86, 4, 93],[92, 10, 20, 87]) == 97\nassert solution.minCost([20, 61, 97, 36],[18, 29, 87, 81]) == 110\nassert solution.minCost([94, 63, 12, 9, 23, 19, 57, 72, 60],[4, 62, 82, 86, 1, 97, 61, 27, 39]) == 128\nassert solution.minCost([46, 3, 18, 9],[5, 46, 82, 36]) == 164\nassert solution.minCost([9, 15, 21, 80],[32, 46, 33, 27]) == 106\nassert solution.minCost([59, 69, 99, 40, 61, 84, 60, 71],[7, 24, 58, 1, 75, 69, 26, 79]) == 181\nassert solution.minCost([90, 19, 73, 60, 27, 83, 11, 77, 64, 88],[11, 87, 31, 6, 1, 52, 60, 49, 75, 90]) == 260\nassert solution.minCost([28, 48, 39],[71, 43, 87]) == 130\nassert solution.minCost([40, 79, 63, 13],[34, 60, 13, 64]) == 64\nassert solution.minCost([71, 63, 16, 15, 37, 83],[76, 54, 78, 100, 16, 55]) == 55\nassert solution.minCost([52, 18, 54, 24],[46, 49, 33, 35]) == 68\nassert solution.minCost([79, 19, 33, 50, 46, 5, 52, 66, 38],[97, 53, 80, 79, 66, 94, 46, 14, 54]) == 247\nassert solution.minCost([67, 53, 90, 85, 98, 2, 95],[58, 62, 33, 75, 73, 41, 37]) == 140\nassert solution.minCost([15, 30, 47, 97, 40, 74, 94],[65, 98, 51, 57, 28, 25, 13]) == 215\nassert solution.minCost([11, 68, 95, 2, 59, 39, 35, 47, 4, 79],[48, 19, 8, 6, 31, 36, 43, 7, 21, 38]) == 75\nassert solution.minCost([54, 94, 39],[36, 85, 7]) == 7",
  "inefficient_solution": "class Solution:\n    def minCost(self, nums: List[int], costs: List[int]) -> int:\n        n = len(nums)\n        g = []\n        for i in range(n - 1, -1, -1):\n            g.append([])\n            for j in range(n):\n                if i < j and (nums[i] <= nums[j] and all(nums[k] < nums[i] for k in range(i + 1, j)) or nums[i] > nums[j] and all(nums[k] >= nums[i] for k in range(i + 1, j))):\n                    g[-1].append(j)\n        f = [inf] * n\n        for i in range(n):\n            for j in g[i]:\n                f[j] = min(f[j], f[i] + costs[j])\n        return f[n - 1]",
  "is_python": true
}