{
  "problem_idx": 2588,
  "task_name": "Count the Number of Beautiful Subarrays",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`. In one operation, you can:\n\n\n* Choose two different indices `i` and `j` such that `0 <= i, j < nums.length`.\n* Choose a non-negative integer `k` such that the `kth` bit (**0-indexed**) in the binary representation of `nums[i]` and `nums[j]` is `1`.\n* Subtract `2k` from `nums[i]` and `nums[j]`.\n\n\nA subarray is **beautiful** if it is possible to make all of its elements equal to `0` after applying the above operation any number of times.\n\n\nReturn *the number of **beautiful subarrays** in the array* `nums`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,1,2,4]\n**Output:** 2\n**Explanation:** There are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4].\n- We can make all elements in the subarray [3,1,2] equal to 0 in the following way:\n  - Choose [3, 1, 2] and k = 1. Subtract 21 from both numbers. The subarray becomes [1, 1, 0].\n  - Choose [1, 1, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 0, 0].\n- We can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way:\n  - Choose [4, 3, 1, 2, 4] and k = 2. Subtract 22 from both numbers. The subarray becomes [0, 3, 1, 2, 0].\n  - Choose [0, 3, 1, 2, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 2, 0, 2, 0].\n  - Choose [0, 2, 0, 2, 0] and k = 1. Subtract 21 from both numbers. The subarray becomes [0, 0, 0, 0, 0].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,10,4]\n**Output:** 0\n**Explanation:** There are no beautiful subarrays in nums.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def beautifulSubarrays(self, nums: List[int]) -> int:\n        cnt = Counter({0: 1})\n        ans = mask = 0\n        for x in nums:\n            mask ^= x\n            ans += cnt[mask]\n            cnt[mask] += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def beautifulSubarrays(self, nums):\n        cnt = Counter({0: 1})\n        ans = mask = 0\n        for x in nums:\n            mask ^= x\n            ans += cnt[mask]\n            cnt[mask] += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.beautifulSubarrays(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.beautifulSubarrays(nums) == expected_result\n        print(f\"assert solution.beautifulSubarrays({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.beautifulSubarrays({nums}) == {expected_result}\")  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.beautifulSubarrays([72, 33]) == 0\nassert solution.beautifulSubarrays([55, 90, 82, 64]) == 0\nassert solution.beautifulSubarrays([71, 28, 10, 79, 16, 48, 68]) == 0\nassert solution.beautifulSubarrays([71, 13, 87, 15, 62, 50, 53, 68, 48]) == 0\nassert solution.beautifulSubarrays([83, 15, 56, 2, 79]) == 0\nassert solution.beautifulSubarrays([9, 95, 55, 80]) == 0\nassert solution.beautifulSubarrays([26, 98, 21, 5]) == 0\nassert solution.beautifulSubarrays([42, 90, 92, 12, 2, 28]) == 0\nassert solution.beautifulSubarrays([48, 65, 37, 24, 5]) == 0\nassert solution.beautifulSubarrays([37, 76, 27, 33, 46, 54]) == 0\nassert solution.beautifulSubarrays([72, 13]) == 0\nassert solution.beautifulSubarrays([88, 73, 47, 5, 28, 93, 94, 37, 17]) == 0\nassert solution.beautifulSubarrays([3, 97, 11, 78, 55, 51, 52]) == 0\nassert solution.beautifulSubarrays([96, 45]) == 0\nassert solution.beautifulSubarrays([51, 10, 96, 66, 70, 98, 28, 36, 31]) == 0\nassert solution.beautifulSubarrays([6, 88, 40, 44, 93, 57, 97, 35, 28]) == 0\nassert solution.beautifulSubarrays([92, 62, 66, 53]) == 0\nassert solution.beautifulSubarrays([8, 1]) == 0\nassert solution.beautifulSubarrays([71, 32, 75, 60, 12, 74, 96, 53]) == 0\nassert solution.beautifulSubarrays([6, 59, 55, 46, 14, 45]) == 0\nassert solution.beautifulSubarrays([49, 54, 6, 37, 69, 10, 61]) == 0\nassert solution.beautifulSubarrays([7, 99]) == 0\nassert solution.beautifulSubarrays([85, 19, 13, 71]) == 0\nassert solution.beautifulSubarrays([23, 16, 56, 86]) == 0\nassert solution.beautifulSubarrays([28, 13, 9, 45, 37, 86]) == 0\nassert solution.beautifulSubarrays([48, 57, 67, 85, 49]) == 0\nassert solution.beautifulSubarrays([91, 97, 7, 45, 89, 37, 29, 99, 3]) == 0\nassert solution.beautifulSubarrays([80, 97, 86, 51, 36]) == 0\nassert solution.beautifulSubarrays([100, 94, 7, 12, 62, 46, 45, 49, 91, 24]) == 1\nassert solution.beautifulSubarrays([74, 27, 7, 40, 11, 48, 43, 73, 51, 97]) == 1\nassert solution.beautifulSubarrays([63, 26, 90, 70, 2]) == 0\nassert solution.beautifulSubarrays([80, 68, 8, 43, 34, 51, 88]) == 0\nassert solution.beautifulSubarrays([41, 27, 61, 77, 48]) == 0\nassert solution.beautifulSubarrays([17, 9, 63, 97, 4]) == 0\nassert solution.beautifulSubarrays([88, 69, 77, 11, 40]) == 0\nassert solution.beautifulSubarrays([60, 45, 17, 74, 58, 13, 84, 46, 63]) == 1\nassert solution.beautifulSubarrays([49, 54, 64, 12, 46, 89, 21, 50, 79, 16]) == 0\nassert solution.beautifulSubarrays([100, 16, 52, 12, 26, 73, 95]) == 1\nassert solution.beautifulSubarrays([19, 52, 48, 21, 81, 15, 38]) == 0\nassert solution.beautifulSubarrays([10, 43, 76, 91, 84, 2, 8]) == 0\nassert solution.beautifulSubarrays([10, 37, 4, 45, 28]) == 0\nassert solution.beautifulSubarrays([54, 39, 22, 49, 10, 30, 94, 64, 45]) == 3\nassert solution.beautifulSubarrays([76, 23, 61, 32, 57, 27, 14, 38]) == 1\nassert solution.beautifulSubarrays([32, 52, 90, 45, 86, 56, 70, 84]) == 0\nassert solution.beautifulSubarrays([15, 27, 80, 26, 92]) == 0\nassert solution.beautifulSubarrays([8, 81, 92, 13, 47]) == 1\nassert solution.beautifulSubarrays([75, 91]) == 0\nassert solution.beautifulSubarrays([100, 26, 46, 4, 98, 62, 74]) == 0\nassert solution.beautifulSubarrays([37, 70, 30, 2]) == 0\nassert solution.beautifulSubarrays([87, 15]) == 0\nassert solution.beautifulSubarrays([73, 21, 6, 56]) == 0\nassert solution.beautifulSubarrays([29, 85]) == 0\nassert solution.beautifulSubarrays([91, 55, 31, 100, 86, 81]) == 0\nassert solution.beautifulSubarrays([84, 79, 46, 57, 22, 48, 33, 3]) == 0\nassert solution.beautifulSubarrays([48, 11, 41, 14, 18]) == 0\nassert solution.beautifulSubarrays([60, 98, 46]) == 0\nassert solution.beautifulSubarrays([50, 18, 39]) == 0\nassert solution.beautifulSubarrays([93, 61, 72, 51, 28, 19]) == 0\nassert solution.beautifulSubarrays([70, 88]) == 0\nassert solution.beautifulSubarrays([57, 22]) == 0\nassert solution.beautifulSubarrays([30, 31, 71]) == 0\nassert solution.beautifulSubarrays([45, 38, 8, 26, 64, 40, 86, 74, 7]) == 0\nassert solution.beautifulSubarrays([72, 26, 73, 37, 66, 49, 89, 34, 33]) == 0\nassert solution.beautifulSubarrays([59, 93]) == 0\nassert solution.beautifulSubarrays([30, 79, 69, 84, 31]) == 0\nassert solution.beautifulSubarrays([70, 67, 11, 25, 76, 93, 44, 96, 85, 22]) == 0\nassert solution.beautifulSubarrays([3, 11, 100, 87, 37, 64, 32, 74, 91, 78]) == 0\nassert solution.beautifulSubarrays([8, 43, 72, 98, 84, 59, 5, 16, 76, 96]) == 0\nassert solution.beautifulSubarrays([16, 60, 86, 45, 76, 71]) == 0\nassert solution.beautifulSubarrays([31, 16, 98, 27]) == 0\nassert solution.beautifulSubarrays([80, 16]) == 0\nassert solution.beautifulSubarrays([25, 51]) == 0\nassert solution.beautifulSubarrays([21, 68, 29, 64, 48, 23, 83, 55]) == 0\nassert solution.beautifulSubarrays([100, 5, 38]) == 0\nassert solution.beautifulSubarrays([12, 5, 55, 79, 83, 96, 25, 65]) == 0\nassert solution.beautifulSubarrays([45, 40, 49, 19, 77]) == 0\nassert solution.beautifulSubarrays([100, 82, 67, 8]) == 0\nassert solution.beautifulSubarrays([21, 10, 76, 57, 53, 73, 52, 50, 26]) == 0\nassert solution.beautifulSubarrays([13, 1, 84, 70, 52]) == 0\nassert solution.beautifulSubarrays([37, 82]) == 0\nassert solution.beautifulSubarrays([12, 16, 66, 95, 81, 31, 26]) == 0\nassert solution.beautifulSubarrays([3, 1, 21, 41, 11]) == 0\nassert solution.beautifulSubarrays([7, 50, 66, 60, 79, 98]) == 0\nassert solution.beautifulSubarrays([20, 42, 89, 85, 76, 83, 15, 14, 5]) == 0\nassert solution.beautifulSubarrays([28, 95, 10, 68, 1, 83, 48, 23, 35, 78]) == 0\nassert solution.beautifulSubarrays([50, 45, 3, 31, 63, 49, 22, 28]) == 0\nassert solution.beautifulSubarrays([77, 22, 46, 33]) == 0\nassert solution.beautifulSubarrays([30, 99, 28, 33, 54, 8, 25]) == 0\nassert solution.beautifulSubarrays([71, 73, 67, 12, 52, 35]) == 0\nassert solution.beautifulSubarrays([38, 91, 80]) == 0\nassert solution.beautifulSubarrays([64, 45, 90, 97]) == 0\nassert solution.beautifulSubarrays([8, 40, 51, 46, 92, 48, 66, 35, 78, 6]) == 1\nassert solution.beautifulSubarrays([88, 75, 87, 66, 81]) == 0\nassert solution.beautifulSubarrays([84, 12, 48, 87, 28, 39, 83, 16, 55, 8]) == 0\nassert solution.beautifulSubarrays([1, 73, 27]) == 0\nassert solution.beautifulSubarrays([31, 15, 18, 30, 77, 38, 43, 69, 16]) == 0\nassert solution.beautifulSubarrays([91, 15, 4, 30, 9, 19, 50, 17, 67]) == 1\nassert solution.beautifulSubarrays([28, 6, 65, 22, 15, 40]) == 0\nassert solution.beautifulSubarrays([12, 52, 14, 42, 1]) == 0\nassert solution.beautifulSubarrays([83, 43, 10, 69, 93, 76, 82, 56]) == 0",
  "inefficient_solution": "class Solution:\n    def beautifulSubarrays(self, nums: List[int]) -> int:\n        original_nums = [x for x in nums]\n        nums = [bin(x)[2:] for x in nums]\n        bit_counts = {}\n        for num in nums:\n            bit_counts[num] = bit_counts.get(num, 0) + 1\n        original_nums.sort()\n        ans = 0\n        for i in range(len(original_nums)):\n            for j in range(i, len(original_nums)):\n                k = bin(original_nums[i] + original_nums[j])[2:]\n                if k in bit_counts:\n                    ans += bit_counts[k]\n        return ans",
  "is_python": true
}