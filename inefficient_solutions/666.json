{
  "problem_idx": 666,
  "task_name": "Path Sum IV",
  "markdown_description": "\nIf the depth of a tree is smaller than `5`, then this tree can be represented by an array of three-digit integers. For each integer in this array:\n\n\n* The hundreds digit represents the depth `d` of this node where `1 <= d <= 4`.\n* The tens digit represents the position `p` of this node in the level it belongs to where `1 <= p <= 8`. The position is the same as that in a full binary tree.\n* The units digit represents the value `v` of this node where `0 <= v <= 9`.\n\n\nGiven an array of **ascending** three-digit integers `nums` representing a binary tree with a depth smaller than `5`, return *the sum of all paths from the root towards the leaves*.\n\n\nIt is **guaranteed** that the given array represents a valid connected binary tree.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0666.Path%20Sum%20IV/images/pathsum4-1-tree.jpg)\n\n```\n\n**Input:** nums = [113,215,221]\n**Output:** 12\n**Explanation:** The tree that the list represents is shown.\nThe path sum is (3 + 5) + (3 + 1) = 12.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0666.Path%20Sum%20IV/images/pathsum4-2-tree.jpg)\n\n```\n\n**Input:** nums = [113,221]\n**Output:** 4\n**Explanation:** The tree that the list represents is shown. \nThe path sum is (3 + 1) = 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 15`\n* `110 <= nums[i] <= 489`\n* `nums` represents a valid binary tree with depth less than `5`.\n\n\n",
  "canonical_solution": "class Solution:\n    def pathSum(self, nums: List[int]) -> int:\n        def dfs(node, t):\n            if node not in mp:\n                return\n            t += mp[node]\n            d, p = divmod(node, 10)\n            l = (d + 1) * 10 + (p * 2) - 1\n            r = l + 1\n            nonlocal ans\n            if l not in mp and r not in mp:\n                ans += t\n                return\n            dfs(l, t)\n            dfs(r, t)\n\n        ans = 0\n        mp = {num // 10: num % 10 for num in nums}\n        dfs(11, 0)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def pathSum(self, nums):\n        def dfs(node, t):\n            if node not in mp:\n                return\n            t += mp[node]\n            d, p = divmod(node, 10)\n            l = (d + 1) * 10 + (p * 2) - 1\n            r = l + 1\n            nonlocal ans\n            if l not in mp and r not in mp:\n                ans += t\n                return\n            dfs(l, t)\n            dfs(r, t)\n\n        ans = 0\n        mp = {num // 10: num % 10 for num in nums}\n        dfs(11, 0)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(110, 490), random.randint(1, 15))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.pathSum(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.pathSum(nums) == expected_result\n        print(f\"assert solution.pathSum({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.pathSum({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.pathSum([381, 130, 305, 268, 345, 204, 129, 447, 149, 117, 274, 310, 322, 404]) == 7\nassert solution.pathSum([397, 114, 137, 420, 325]) == 4\nassert solution.pathSum([127, 436, 120, 482, 209, 473, 434, 430, 310, 324, 213]) == 0\nassert solution.pathSum([456, 295, 419, 309, 337, 149, 395, 294, 124, 468, 255]) == 0\nassert solution.pathSum([416, 489, 281, 151, 160, 408, 427, 263, 423]) == 0\nassert solution.pathSum([445, 454, 123, 224, 307, 431, 110, 145, 172, 245, 467, 203, 486, 113, 438]) == 7\nassert solution.pathSum([299, 261, 152, 135, 181, 115]) == 5\nassert solution.pathSum([464, 216, 166, 402]) == 0\nassert solution.pathSum([359, 276, 434, 302, 221, 382, 484, 209, 348, 305, 273]) == 0\nassert solution.pathSum([372, 351, 151, 267, 402, 357, 112, 322, 235, 184, 472, 328]) == 2\nassert solution.pathSum([147, 351, 393, 385, 140, 118, 225, 304, 158, 174]) == 13\nassert solution.pathSum([367, 340, 410, 165, 196, 259, 158, 170, 308, 250, 278]) == 0\nassert solution.pathSum([301]) == 0\nassert solution.pathSum([292, 190, 291, 206, 400, 167, 381, 319, 142, 367]) == 0\nassert solution.pathSum([389, 356, 445, 199, 172, 300, 468, 488, 378, 187, 484, 221]) == 0\nassert solution.pathSum([301, 197, 489, 247, 240, 435, 397, 304, 277, 261, 418]) == 0\nassert solution.pathSum([409, 481, 248, 169, 428, 313, 372, 187, 282, 415, 354, 394, 316, 327]) == 0\nassert solution.pathSum([483, 409, 131, 272, 407, 479, 389]) == 0\nassert solution.pathSum([355, 446, 332, 303, 279, 254, 246, 265, 158]) == 0\nassert solution.pathSum([238, 165, 250, 478, 382, 203]) == 0\nassert solution.pathSum([426, 294]) == 0\nassert solution.pathSum([445, 440, 455, 149, 348, 180, 137]) == 0\nassert solution.pathSum([253, 358, 390, 243, 129, 242, 480, 127, 244, 425, 473, 235, 294, 130]) == 0\nassert solution.pathSum([432, 248, 369, 193, 367, 343, 136, 292]) == 0\nassert solution.pathSum([488, 429, 197, 152, 308, 330, 466]) == 0\nassert solution.pathSum([387, 155, 189, 374, 113, 436, 342, 428, 239, 179]) == 3\nassert solution.pathSum([301, 311, 147]) == 0\nassert solution.pathSum([340, 391, 125, 402]) == 0\nassert solution.pathSum([434, 131, 191, 312, 348, 314, 186, 143, 397, 389]) == 0\nassert solution.pathSum([395]) == 0\nassert solution.pathSum([178, 331, 454, 226, 404, 464]) == 0\nassert solution.pathSum([336, 305, 151, 357, 146, 341]) == 0\nassert solution.pathSum([162, 399, 236, 407]) == 0\nassert solution.pathSum([306]) == 0\nassert solution.pathSum([433, 302, 449, 340, 118, 245, 467, 154, 381, 406, 485, 414, 324, 480]) == 8\nassert solution.pathSum([368, 257, 222, 258, 450, 250, 288, 394, 180, 312, 232, 148, 386, 275, 333]) == 0\nassert solution.pathSum([304, 479, 112, 293, 291, 341, 172, 348, 155, 280]) == 2\nassert solution.pathSum([328, 134]) == 0\nassert solution.pathSum([363, 485]) == 0\nassert solution.pathSum([419, 111, 445, 369]) == 1\nassert solution.pathSum([176, 183, 212, 275, 458, 481, 281, 413, 351, 269, 331, 267, 175, 158, 335]) == 0\nassert solution.pathSum([261, 179, 372, 148, 278, 403, 325, 112, 170, 297, 185]) == 2\nassert solution.pathSum([133, 480, 319, 397, 244, 213, 169, 442, 240, 338, 420, 330, 229, 302, 295]) == 0\nassert solution.pathSum([438, 453, 407, 334, 488, 447, 356, 142, 461, 281, 473]) == 0\nassert solution.pathSum([223, 305, 257, 340, 375, 137, 171, 139, 190, 220, 294, 334, 146, 224, 154]) == 0\nassert solution.pathSum([130, 349, 444, 335, 255, 471, 261, 305, 452]) == 0\nassert solution.pathSum([357, 292, 169, 378, 309, 225, 473, 289, 163, 400, 290, 340, 382, 326, 470]) == 0\nassert solution.pathSum([325, 238, 466, 348]) == 0\nassert solution.pathSum([399, 280, 189, 427]) == 0\nassert solution.pathSum([458, 199, 485, 404, 422, 119, 176, 481]) == 9\nassert solution.pathSum([476, 370, 422, 256, 348, 186, 235, 333]) == 0\nassert solution.pathSum([172, 192, 236, 441, 202]) == 0\nassert solution.pathSum([139, 355, 141, 169, 463, 234]) == 0\nassert solution.pathSum([306, 205, 487]) == 0\nassert solution.pathSum([329, 248]) == 0\nassert solution.pathSum([377]) == 0\nassert solution.pathSum([182, 241, 389, 208, 366, 164, 306]) == 0\nassert solution.pathSum([299, 286, 293, 472, 478, 171, 142, 284, 205, 359, 185, 351]) == 0\nassert solution.pathSum([406, 120, 260, 290, 474, 472, 396, 234, 198, 155, 235, 254, 391, 428]) == 0\nassert solution.pathSum([342, 293, 475]) == 0\nassert solution.pathSum([221]) == 0\nassert solution.pathSum([180, 127, 156, 354, 203, 365, 115, 413, 208, 290, 408]) == 5\nassert solution.pathSum([489, 360, 332, 150, 249]) == 0\nassert solution.pathSum([418, 170, 466, 289, 152, 302, 489, 116, 346]) == 6\nassert solution.pathSum([246, 206, 211, 408]) == 0\nassert solution.pathSum([353, 132, 177, 361, 445, 215, 233, 425, 405, 349, 133, 255]) == 0\nassert solution.pathSum([259, 182, 449, 402, 382, 428]) == 0\nassert solution.pathSum([325, 210, 250, 447, 280, 305, 460, 227, 483, 124, 258]) == 0\nassert solution.pathSum([151, 203, 208, 276, 469, 437, 454, 364]) == 0\nassert solution.pathSum([450, 195, 194]) == 0\nassert solution.pathSum([265, 352, 481, 473, 154, 277, 144, 269, 303, 321, 186, 358, 181, 230]) == 0\nassert solution.pathSum([231, 305]) == 0\nassert solution.pathSum([462, 313, 449, 215, 185, 283, 309, 441, 251, 460]) == 0\nassert solution.pathSum([221, 390, 143]) == 0\nassert solution.pathSum([196, 374]) == 0\nassert solution.pathSum([308, 236, 291, 198, 420, 345, 117, 386, 149, 225, 315, 300, 351]) == 17\nassert solution.pathSum([380, 364, 303, 133, 469, 483, 182, 116, 287, 232, 284]) == 6\nassert solution.pathSum([297, 214, 185, 120, 157, 254, 146, 416, 351, 180, 310]) == 0\nassert solution.pathSum([359, 203, 467, 465]) == 0\nassert solution.pathSum([432, 273, 327, 360, 328, 177, 341, 401, 137, 364, 198, 403]) == 0\nassert solution.pathSum([135, 224, 387, 271, 276, 407, 301]) == 0\nassert solution.pathSum([420, 274, 419, 382, 339]) == 0\nassert solution.pathSum([131, 391, 338, 266, 342, 361, 127, 298]) == 0\nassert solution.pathSum([241, 370, 347, 267, 452, 404, 189, 350, 125, 381, 162, 398]) == 0\nassert solution.pathSum([224, 219, 134, 276, 434, 238, 156, 291]) == 0\nassert solution.pathSum([424, 371, 290, 306, 225, 344, 182, 252, 386, 405, 228, 282, 197, 264]) == 0\nassert solution.pathSum([424, 396]) == 0\nassert solution.pathSum([335, 332, 139, 320, 392, 321, 228, 300, 341, 441, 394]) == 0\nassert solution.pathSum([131, 355, 452, 429, 111, 403, 176]) == 1\nassert solution.pathSum([212]) == 0\nassert solution.pathSum([357, 270, 399, 472, 186, 281, 262, 153, 157, 466, 327, 145, 178, 325, 463]) == 0\nassert solution.pathSum([376, 126, 153, 368, 292, 361, 147, 444, 371, 336]) == 0\nassert solution.pathSum([332, 141, 204, 214, 393, 278, 442, 242, 231, 138, 248, 126, 122, 301]) == 0\nassert solution.pathSum([191, 418, 410, 463, 252, 437, 113, 300]) == 3\nassert solution.pathSum([212, 317]) == 0\nassert solution.pathSum([475, 477, 456, 236, 352, 486, 339, 280, 295, 256, 374, 261, 213, 299, 331]) == 0\nassert solution.pathSum([267, 304, 428, 150, 488, 197, 250, 478, 480, 133, 211, 160]) == 0\nassert solution.pathSum([326, 127, 324, 390, 143, 174, 223, 384, 471, 181, 445, 158, 367, 206, 362]) == 0\nassert solution.pathSum([207, 221, 265, 458, 369, 339, 135, 227, 140, 219, 347]) == 0\nassert solution.pathSum([341, 314, 258, 475, 145, 112, 167, 220, 488, 194, 472, 464, 199]) == 16",
  "inefficient_solution": "class Solution:\n    def pathSum(self, nums: List[int]) -> int:\n        mem = {}\n        mem[11] = {}\n        for num in nums:\n            mem[11][num % 10] = num % 10\n\n        def dfs(node, t, visited):\n            if node not in mem:\n                return\n            if node in visited:\n                return\n            visited.add(node)\n            t += mem[node]\n            d, p = divmod(node, 10)\n            l = (d + 1) * 10 + (p * 2) - 1\n            r = l + 1\n            ans = t\n            if l not in mem and r not in mem:\n                ans += t\n            if l in mem:\n                ans += dfs(l, t, visited)\n            if r in mem:\n                ans += dfs(r, t, visited)\n            return ans\n\n        ans = 0\n        for i in range(2, 15):\n            mem[i] = {}\n            for num in nums:\n                d, p = divmod(num, 10)\n                if d == i and p <= 8:\n                    mem[i][p] = num % 10\n        visited = set()\n        for i in range(2, 15):\n            ans += dfs(i, 0, visited)\n        return ans",
  "is_python": true
}