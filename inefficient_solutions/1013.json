{
  "problem_idx": 1013,
  "task_name": "Partition Array Into Three Parts With Equal Sum",
  "markdown_description": "\nGiven an array of integers `arr`, return `true` if we can partition the array into three **non-empty** parts with equal sums.\n\n\nFormally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [0,2,1,-6,6,-7,9,1,2,0,1]\n**Output:** true\n**Explanation:** 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [0,2,1,-6,6,7,9,-1,2,0,1]\n**Output:** false\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [3,3,6,5,-2,2,5,1,-9,4]\n**Output:** true\n**Explanation:** 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= arr.length <= 5 * 104`\n* `-104 <= arr[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def canThreePartsEqualSum(self, arr: List[int]) -> bool:\n        s = sum(arr)\n        if s % 3 != 0:\n            return False\n        i, j = 0, len(arr) - 1\n        a = b = 0\n        while i < len(arr):\n            a += arr[i]\n            if a == s // 3:\n                break\n            i += 1\n        while ~j:\n            b += arr[j]\n            if b == s // 3:\n                break\n            j -= 1\n        return i < j - 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def canThreePartsEqualSum(self, arr):\n        s = sum(arr)\n        if s % 3 != 0:\n            return False\n        i, j = 0, len(arr) - 1\n        a = b = 0\n        while i < len(arr):\n            a += arr[i]\n            if a == s // 3:\n                break\n            i += 1\n        while ~j:\n            b += arr[j]\n            if b == s // 3:\n                break\n            j -= 1\n        return i < j - 1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(1, 101), random.randint(3, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.canThreePartsEqualSum(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.canThreePartsEqualSum(arr) == expected_result\n        print(f\"assert solution.canThreePartsEqualSum({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.canThreePartsEqualSum({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.canThreePartsEqualSum([21, 91, 16, 58, 73, 50, 24, 85]) == False\nassert solution.canThreePartsEqualSum([58, 80, 50, 31, 18, 75, 68, 15]) == False\nassert solution.canThreePartsEqualSum([34, 11, 3, 65]) == False\nassert solution.canThreePartsEqualSum([1, 39, 71, 42, 15, 59, 92, 47, 95]) == False\nassert solution.canThreePartsEqualSum([55, 26, 33, 52, 50, 39, 75, 16, 82, 22]) == False\nassert solution.canThreePartsEqualSum([87, 47, 22, 52, 37]) == False\nassert solution.canThreePartsEqualSum([32, 34, 13, 87, 6, 15, 21]) == False\nassert solution.canThreePartsEqualSum([56, 15, 60, 85, 99, 18, 75]) == False\nassert solution.canThreePartsEqualSum([78, 50, 67, 25, 42, 38, 39, 97, 28]) == False\nassert solution.canThreePartsEqualSum([22, 63, 75, 55, 12, 26, 87, 67, 11, 47]) == False\nassert solution.canThreePartsEqualSum([62, 87, 36]) == False\nassert solution.canThreePartsEqualSum([20, 91, 99]) == False\nassert solution.canThreePartsEqualSum([76, 61, 23, 87, 72]) == False\nassert solution.canThreePartsEqualSum([88, 52, 66, 67]) == False\nassert solution.canThreePartsEqualSum([98, 97, 6, 64, 33]) == False\nassert solution.canThreePartsEqualSum([100, 96, 34, 75, 2, 46, 23, 45, 57]) == False\nassert solution.canThreePartsEqualSum([71, 7, 74, 76, 55, 80, 13]) == False\nassert solution.canThreePartsEqualSum([1, 67, 2]) == False\nassert solution.canThreePartsEqualSum([29, 90, 62, 13, 95, 49]) == False\nassert solution.canThreePartsEqualSum([73, 57, 76]) == False\nassert solution.canThreePartsEqualSum([8, 5, 68, 55]) == False\nassert solution.canThreePartsEqualSum([33, 20, 99, 28, 63, 29]) == False\nassert solution.canThreePartsEqualSum([68, 30, 21]) == False\nassert solution.canThreePartsEqualSum([11, 68, 48, 15, 58, 36, 84, 80]) == False\nassert solution.canThreePartsEqualSum([55, 66, 99, 84, 46, 74]) == False\nassert solution.canThreePartsEqualSum([28, 97, 68, 98, 77, 72, 89]) == False\nassert solution.canThreePartsEqualSum([9, 37, 45, 69, 32, 40]) == False\nassert solution.canThreePartsEqualSum([94, 34, 31, 80, 56]) == False\nassert solution.canThreePartsEqualSum([30, 85, 72, 70, 29, 25, 56]) == False\nassert solution.canThreePartsEqualSum([52, 62, 98, 80, 83, 39, 25, 100, 21, 55]) == False\nassert solution.canThreePartsEqualSum([47, 69, 37, 41, 13]) == False\nassert solution.canThreePartsEqualSum([58, 24, 90]) == False\nassert solution.canThreePartsEqualSum([17, 85, 52, 80, 39, 96, 40, 78, 81]) == False\nassert solution.canThreePartsEqualSum([47, 62, 2, 95, 90, 33, 42, 12, 22]) == False\nassert solution.canThreePartsEqualSum([19, 94, 3, 27, 53, 36, 2]) == False\nassert solution.canThreePartsEqualSum([12, 59, 54, 2, 56]) == False\nassert solution.canThreePartsEqualSum([69, 58, 35, 27, 38, 53]) == False\nassert solution.canThreePartsEqualSum([20, 68, 72, 54, 81, 48, 77, 11, 21, 71]) == False\nassert solution.canThreePartsEqualSum([99, 7, 17, 90, 22, 84, 11, 70]) == False\nassert solution.canThreePartsEqualSum([34, 6, 54, 58, 19, 72, 52, 60, 70, 11]) == False\nassert solution.canThreePartsEqualSum([57, 4, 97, 11]) == False\nassert solution.canThreePartsEqualSum([12, 22, 87, 51, 57, 65, 98, 45, 42]) == False\nassert solution.canThreePartsEqualSum([13, 54, 28, 38, 37, 67, 59, 21, 52]) == False\nassert solution.canThreePartsEqualSum([12, 46, 13, 6, 83]) == False\nassert solution.canThreePartsEqualSum([99, 41, 6]) == False\nassert solution.canThreePartsEqualSum([57, 16, 82, 59, 37, 36, 24, 35]) == False\nassert solution.canThreePartsEqualSum([66, 18, 61, 70, 22]) == False\nassert solution.canThreePartsEqualSum([34, 16, 75, 94, 52]) == False\nassert solution.canThreePartsEqualSum([68, 34, 91, 19, 48, 89, 42, 75, 15]) == False\nassert solution.canThreePartsEqualSum([36, 11, 62, 90, 58, 100, 85, 68, 22]) == False\nassert solution.canThreePartsEqualSum([76, 68, 39, 24, 79, 16, 6]) == False\nassert solution.canThreePartsEqualSum([74, 46, 90, 31, 1, 5, 29]) == False\nassert solution.canThreePartsEqualSum([28, 71, 89, 68, 8, 57]) == False\nassert solution.canThreePartsEqualSum([84, 82, 6, 75, 96]) == False\nassert solution.canThreePartsEqualSum([15, 31, 57, 45, 3, 68, 97, 72, 64, 59]) == False\nassert solution.canThreePartsEqualSum([34, 47, 56]) == False\nassert solution.canThreePartsEqualSum([33, 83, 68, 98]) == False\nassert solution.canThreePartsEqualSum([24, 46, 39, 8, 58, 89, 98]) == False\nassert solution.canThreePartsEqualSum([88, 44, 16, 52, 67]) == False\nassert solution.canThreePartsEqualSum([18, 11, 22]) == False\nassert solution.canThreePartsEqualSum([39, 35, 64, 27, 85, 89, 86, 44, 46]) == False\nassert solution.canThreePartsEqualSum([96, 24, 72, 63, 41]) == False\nassert solution.canThreePartsEqualSum([50, 20, 45, 99, 15, 23, 57, 71]) == False\nassert solution.canThreePartsEqualSum([69, 29, 22, 70, 23, 73, 33, 65, 54]) == False\nassert solution.canThreePartsEqualSum([19, 17, 81, 24, 15, 32]) == False\nassert solution.canThreePartsEqualSum([15, 76, 1, 34, 67, 65, 63, 86, 88]) == False\nassert solution.canThreePartsEqualSum([35, 92, 88, 94, 70, 22, 90, 42, 3, 4]) == False\nassert solution.canThreePartsEqualSum([97, 58, 27, 20, 13, 62]) == False\nassert solution.canThreePartsEqualSum([51, 72, 99]) == False\nassert solution.canThreePartsEqualSum([87, 95, 25, 34, 48, 33, 26, 45, 62, 79]) == False\nassert solution.canThreePartsEqualSum([1, 55, 47, 81, 77, 70, 57, 13, 71, 5]) == False\nassert solution.canThreePartsEqualSum([86, 61, 44, 33, 54, 42, 40, 10]) == False\nassert solution.canThreePartsEqualSum([63, 21, 45, 32, 3, 37, 66, 97]) == False\nassert solution.canThreePartsEqualSum([80, 82, 90, 22, 94, 74, 9, 21]) == False\nassert solution.canThreePartsEqualSum([37, 22, 74, 39, 49, 10, 69, 45, 85, 100]) == False\nassert solution.canThreePartsEqualSum([68, 36, 78, 96, 34, 29, 69, 85]) == False\nassert solution.canThreePartsEqualSum([17, 47, 90, 94, 25, 95, 4, 10, 18]) == False\nassert solution.canThreePartsEqualSum([47, 72, 88, 61, 18, 20, 64, 99]) == False\nassert solution.canThreePartsEqualSum([39, 86, 84, 74, 90, 70, 69, 96, 1]) == False\nassert solution.canThreePartsEqualSum([16, 24, 51, 63, 97, 42, 39, 58]) == False\nassert solution.canThreePartsEqualSum([53, 5, 73, 12, 38, 72, 18]) == False\nassert solution.canThreePartsEqualSum([94, 44, 68, 48, 2, 27, 84, 67, 77]) == False\nassert solution.canThreePartsEqualSum([27, 46, 54, 1, 24, 11]) == False\nassert solution.canThreePartsEqualSum([23, 70, 91, 80, 27]) == False\nassert solution.canThreePartsEqualSum([45, 28, 46, 35, 25, 30, 41, 14, 99]) == False\nassert solution.canThreePartsEqualSum([14, 25, 3, 96]) == False\nassert solution.canThreePartsEqualSum([56, 70, 18, 17, 6]) == False\nassert solution.canThreePartsEqualSum([31, 66, 62, 59, 45]) == False\nassert solution.canThreePartsEqualSum([71, 69, 96, 86, 1]) == False\nassert solution.canThreePartsEqualSum([61, 66, 45, 14, 75, 86, 48, 69, 62]) == False\nassert solution.canThreePartsEqualSum([100, 53, 82, 12, 65, 6, 64, 52, 92, 14]) == False\nassert solution.canThreePartsEqualSum([67, 2, 55, 90, 20, 65, 23, 69]) == False\nassert solution.canThreePartsEqualSum([72, 11, 60, 30, 52, 62, 66, 76]) == False\nassert solution.canThreePartsEqualSum([48, 88, 68, 53, 54, 45, 13, 6]) == False\nassert solution.canThreePartsEqualSum([46, 69, 38]) == False\nassert solution.canThreePartsEqualSum([1, 7, 74, 2]) == False\nassert solution.canThreePartsEqualSum([86, 58, 4, 65, 13, 43, 31, 34, 28, 88]) == False\nassert solution.canThreePartsEqualSum([50, 94, 87, 66, 72, 92, 7, 95, 17, 41]) == False\nassert solution.canThreePartsEqualSum([66, 96, 44, 91, 6]) == False\nassert solution.canThreePartsEqualSum([8, 25, 64, 85]) == False",
  "inefficient_solution": "class Solution:\n    def canThreePartsEqualSum(self, arr: List[int]) -> bool:\n        s = sum(arr)\n        if s % 3 != 0:\n            return False\n        sums = []\n        total = 0\n        for num in arr:\n            total += num\n            sums.append(total)\n        i = 0\n        while i < len(sums):\n            sums.append(sums[i])\n            i += 1\n        i = 0\n        while i < len(sums):\n            sums.append(sums[i])\n            i += 1\n        i = 0\n        while i < len(sums):\n            sums.append(sums[i])\n            i += 1\n        a = b = c = 0\n        i = 0\n        while i < len(sums):\n            if sums[i] == s // 3:\n                a += 1\n            i += 1\n        i = 0\n        while i < len(sums):\n            if sums[i] == 2 * s // 3:\n                b += 1\n            i += 1\n        i = 0\n        while i < len(sums):\n            if sums[i] == 3 * s // 3:\n                c += 1\n            i += 1\n        return a == b == c == 1",
  "is_python": true
}