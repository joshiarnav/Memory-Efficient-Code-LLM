{
  "problem_idx": 169,
  "task_name": "Majority Element",
  "markdown_description": "\nGiven an array `nums` of size `n`, return *the majority element*.\n\n\nThe majority element is the element that appears more than `\u230an / 2\u230b` times. You may assume that the majority element always exists in the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** nums = [3,2,3]\n**Output:** 3\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** nums = [2,2,1,1,1,2,2]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 5 * 104`\n* `-109 <= nums[i] <= 109`\n\n\n\u00a0\n\n\n**Follow-up:** Could you solve the problem in linear time and in `O(1)` space?\n\n",
  "canonical_solution": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        cnt = m = 0\n        for x in nums:\n            if cnt == 0:\n                m, cnt = x, 1\n            else:\n                cnt += 1 if m == x else -1\n        return m\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def majorityElement(self, nums):\n        cnt = m = 0\n        for x in nums:\n            if cnt == 0:\n                m, cnt = x, 1\n            else:\n                cnt += 1 if m == x else -1\n        return m\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random list of integers\n    nums = random.choices(range(-10**9, 10**9+1), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.majorityElement(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.majorityElement(nums) == expected_result\n        print(f\"assert solution.majorityElement({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.majorityElement({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.majorityElement([-333320750, 212226173, 61610524, 349163757, 895402626, -621592369, 727238442, 358466046, 63314948]) == 63314948\nassert solution.majorityElement([893351, 298583766, 85318156, 707369031, -251365136, -218359545, -307150596, 496892140, 131957848, -52086255]) == 131957848\nassert solution.majorityElement([-172325014, -212042816, -181548064, -729805081, -16939371, 804980518, -328746979, 718450234, -144076671, 166686743]) == -144076671\nassert solution.majorityElement([858882741, -757413225, -369406033, 207483719, 241766005, -167649305, -893165832, -971930535, -872733330]) == -872733330\nassert solution.majorityElement([-153463141, 947996372, -511174044, -834629704, -697693396, -968637680, -783094895, 351516596]) == -783094895\nassert solution.majorityElement([835204291]) == 835204291\nassert solution.majorityElement([-514011997, 12567438, -704154740, 212603660, -711780599, -532685829, 922434253]) == 922434253\nassert solution.majorityElement([236431596, -42310555, -482652052, -48646018, -239215799, -930757107, 223378157, -591165656]) == 223378157\nassert solution.majorityElement([-106861793, -546563461, 790834036, -970150206, -867847443, -974843089, -460044148]) == -460044148\nassert solution.majorityElement([-597210190]) == -597210190\nassert solution.majorityElement([973208468, 667625822, 968745136, -865074244, 651202261, 4986498]) == 651202261\nassert solution.majorityElement([481901875, -633839453]) == 481901875\nassert solution.majorityElement([280119161, 834169818, 265516497, -931106394, 157558037, -741745498, -731857158, -476489330]) == -731857158\nassert solution.majorityElement([730513118, -942227512, -198732731, -947934425, 769575501]) == 769575501\nassert solution.majorityElement([33642318, -846734141]) == 33642318\nassert solution.majorityElement([-83077783, -979590441, -867945189, 480925592, -408700688, -411172664, -359556106, -180162928, 58926643]) == 58926643\nassert solution.majorityElement([859486676, 446171756, -703164895, 130964608, 542323877, 675316052]) == 542323877\nassert solution.majorityElement([-570397188, -789595263, -643822848, 785383833, -842470606, 414959970, -873240434, 512280036]) == -873240434\nassert solution.majorityElement([967767274]) == 967767274\nassert solution.majorityElement([139091853, -869973677, -122343781, -295042677, -811318870, 957677585, 157795859, -595844496]) == 157795859\nassert solution.majorityElement([-738643486, 960295041, -73214472, 772400066]) == -73214472\nassert solution.majorityElement([666061965, -589785329, 944732423, -332066595]) == 944732423\nassert solution.majorityElement([-681545705, -775911866, -361597959, -916336619, 832998761, -452834353]) == 832998761\nassert solution.majorityElement([830878523, 724904525, 309139621, 537292647, -862439804, -402927102, -90976808, -447110678, -130962996]) == -130962996\nassert solution.majorityElement([-180647709, 708578550, -799878572, -9268222, -975983969]) == -975983969\nassert solution.majorityElement([-785881856, -942719249, -43573458, 409103853]) == -43573458\nassert solution.majorityElement([797003811, 388323616, 438284203, 351725052]) == 438284203\nassert solution.majorityElement([-519996126]) == -519996126\nassert solution.majorityElement([-260704390, 376156398, 658364381, 385231385, -517981272]) == -517981272\nassert solution.majorityElement([-646289348, 543524955, 453219431, -312144819, 517008932, -771522304]) == 517008932\nassert solution.majorityElement([-444919219, -932035692, -525351457, -36100867, 26610922]) == 26610922\nassert solution.majorityElement([-683666203, -552108268]) == -683666203\nassert solution.majorityElement([27967160, 925305039, 877931764, -349268474, -978420040, 11524258, 859923753]) == 859923753\nassert solution.majorityElement([-494327371, 13855955, 960109209, -580758142, 244439352, 343321707, 833771765]) == 833771765\nassert solution.majorityElement([303196196, -75387666, -126292115, -721437357, -705482894, -195074941]) == -705482894\nassert solution.majorityElement([-464866296, 493799033, 396126337, 755843625, 261021328]) == 261021328\nassert solution.majorityElement([977269322, 858265995]) == 977269322\nassert solution.majorityElement([-522808392, -663567423, 709333080, 550133882, -117152827]) == -117152827\nassert solution.majorityElement([-498885601, 697834379, -403147483, 84015403, 437416773, -704344773]) == 437416773\nassert solution.majorityElement([828579799, -50296649, 451826705, -243026414, -406453548]) == -406453548\nassert solution.majorityElement([2380347, -556167749, -987359582, -813175391, -701914306, 249892412, 97873549, -423104290, -301946814]) == -301946814\nassert solution.majorityElement([-610305487, -915323570, 596310195, -638102346, -880195783, 701023367, 788623306, -44376564, -527400325]) == -527400325\nassert solution.majorityElement([801849609, -184747332, 292960041, -378238147]) == 292960041\nassert solution.majorityElement([-66693347, -630537670]) == -66693347\nassert solution.majorityElement([387124760, -432211633, -854770347]) == -854770347\nassert solution.majorityElement([-310697908, -272257052, -340782235, 407785256, -70622186, -645003005, -853303357]) == -853303357\nassert solution.majorityElement([-484017378, 441003415, 804830135, -583492893, 173844610, -273896691]) == 173844610\nassert solution.majorityElement([368820120, 419133288, -32202487, -664594161, -747600897, 525851365, -44695288]) == -44695288\nassert solution.majorityElement([66481858, 978593773, 171445951, 415960924, -561359985]) == -561359985\nassert solution.majorityElement([-694484039, -171965054, -733005508, -426545398]) == -733005508\nassert solution.majorityElement([-831591429, 333593382]) == -831591429\nassert solution.majorityElement([931585356, -495580387, 774587283]) == 774587283\nassert solution.majorityElement([748066951, -805835024, 886318105, -70982345, 549710810]) == 549710810\nassert solution.majorityElement([-875149967, -271427048, 820942252, 705619402]) == 820942252\nassert solution.majorityElement([718161316]) == 718161316\nassert solution.majorityElement([785572648, -87145130, -262937441, -239043713, -860291851, 25284791, 868198199, -475894486, 824031874, -703252462]) == 824031874\nassert solution.majorityElement([-156408748, 484655223]) == -156408748\nassert solution.majorityElement([-983002252, 322900850, 65256615, 854355835, -261157101, -634820957, -180516483, 304399709, 358339597, -991473030]) == 358339597\nassert solution.majorityElement([-38429279, 771224150]) == -38429279\nassert solution.majorityElement([973013650, -213002833, 446646141, -193636459]) == 446646141\nassert solution.majorityElement([-25302320, -296841314, 146443095, 262588023, 665324104]) == 665324104\nassert solution.majorityElement([-518394894, -301881042, -623549574, 120171958, 317190031]) == 317190031\nassert solution.majorityElement([-720014738, -571949656, -471109515, -406899700, -702620723]) == -702620723\nassert solution.majorityElement([-13868862, 991160338, 69137286]) == 69137286\nassert solution.majorityElement([-391044968, 678105077, 48114782, -648291748, -467638046]) == -467638046\nassert solution.majorityElement([-967885469, -359737629, -612714328, -215417376, -163383858, -107561768, 484314953, -702852431, -312267793, 670909464]) == -312267793\nassert solution.majorityElement([-460601733, -358918149, -737022999, 608382149, 513762097, 496273786]) == 513762097\nassert solution.majorityElement([-372913492, 527547759, -138314277, 898608251, -939609118, 675298592]) == -939609118\nassert solution.majorityElement([856119924, 213436528]) == 856119924\nassert solution.majorityElement([-857178348, 329568850, 288641837, -57770050]) == 288641837\nassert solution.majorityElement([-477061876, -193960212, 679120710, -116246797, 769439964, -123673462, 510442791, 250459077, -479667977]) == -479667977\nassert solution.majorityElement([985316172, -919635762]) == 985316172\nassert solution.majorityElement([194301204, 178006996, 915743525, -4692829, -496977392, -600652904, -53294099, -444225301, 542263996]) == 542263996\nassert solution.majorityElement([762675479, -727460984]) == 762675479\nassert solution.majorityElement([501103063, -841459641, 669417308, 198027909, 40597437, -259264236]) == 40597437\nassert solution.majorityElement([159656503, -105437236, 334691718]) == 334691718\nassert solution.majorityElement([793223009, 8491112, 642025860, -337798387, -589710177, 460715477, 836222574, -821813862, -40663890, 217268581]) == -40663890\nassert solution.majorityElement([-533431907, -63537298, 84127569, -455531869]) == 84127569\nassert solution.majorityElement([-752289133, 213430859]) == -752289133\nassert solution.majorityElement([960190713, -88631797, 345063388, 527035440, -520744011, -10248083]) == -520744011\nassert solution.majorityElement([47969443, 706500498, -233734536, 626776588, -989910604, 409188949, 939184025]) == 939184025\nassert solution.majorityElement([706761111, 914544741]) == 706761111\nassert solution.majorityElement([800904066, -343644571]) == 800904066\nassert solution.majorityElement([-128575692, -656383712, 761696929, -711130749, -180817779, -631411380]) == -180817779\nassert solution.majorityElement([174418606, -449903824, -472509774, -204727759]) == -472509774\nassert solution.majorityElement([-153640039, -365082486, 342052773, -617600105, 235181044, -409414378]) == 235181044\nassert solution.majorityElement([-367847073, -200269678, 18581025, -294039837, -936123013, 59572128]) == -936123013\nassert solution.majorityElement([698650674, 349310064, -280129091, -252957007]) == -280129091\nassert solution.majorityElement([907900278, 903087312, -370343774]) == -370343774\nassert solution.majorityElement([779552513, 435442736, 170260877, -495123667, -814571925]) == -814571925\nassert solution.majorityElement([919009807, 408885461, 974504977, 811613804, -807477341, -147212922, 486598358]) == 486598358\nassert solution.majorityElement([-183090812, 20173754, 536270791, 479742220]) == 536270791\nassert solution.majorityElement([-691705177, 127380025, -347287322, -427289322, 52571388]) == 52571388\nassert solution.majorityElement([726201011, 500404107, 156204885, -929263980, 621421051, -890580478]) == 621421051\nassert solution.majorityElement([-571384425, 57894312, -300713564, -246063347]) == -300713564\nassert solution.majorityElement([350977727]) == 350977727\nassert solution.majorityElement([730397286, -451179947, 659091144, -533253922, 880008188]) == 880008188\nassert solution.majorityElement([201429373, 780308916]) == 201429373\nassert solution.majorityElement([534430710, 793603041, -575662248, -937390780, -700679708, 220741672, 622277044]) == 622277044\nassert solution.majorityElement([-862412636]) == -862412636",
  "inefficient_solution": "class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        mem = {}\n        for x in nums:\n            mem[x] = mem.get(x, 0) + 1\n        max_cnt = max(mem.values())\n        return max(mem.keys(), key=lambda x: [k for k, v in mem.items() if v == max_cnt].count(x))",
  "is_python": true
}