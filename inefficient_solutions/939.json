{
  "problem_idx": 939,
  "task_name": "Minimum Area Rectangle",
  "markdown_description": "\nYou are given an array of points in the **X-Y** plane `points` where `points[i] = [xi, yi]`.\n\n\nReturn *the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes*. If there is not any such rectangle, return `0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0939.Minimum%20Area%20Rectangle/images/rec1.jpg)\n\n```\n\n**Input:** points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\n**Output:** 4\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0939.Minimum%20Area%20Rectangle/images/rec2.jpg)\n\n```\n\n**Input:** points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= points.length <= 500`\n* `points[i].length == 2`\n* `0 <= xi, yi <= 4 * 104`\n* All the given points are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:\n        d = defaultdict(list)\n        for x, y in points:\n            d[x].append(y)\n        pos = {}\n        ans = inf\n        for x in sorted(d):\n            ys = d[x]\n            ys.sort()\n            n = len(ys)\n            for i, y1 in enumerate(ys):\n                for y2 in ys[i + 1 :]:\n                    if (y1, y2) in pos:\n                        ans = min(ans, (x - pos[(y1, y2)]) * (y2 - y1))\n                    pos[(y1, y2)] = x\n        return 0 if ans == inf else ans\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\nfrom math import inf\n\nclass Solution:\n    def minAreaRect(self, points):\n        d = defaultdict(list)\n        for x, y in points:\n            d[x].append(y)\n        pos = {}\n        ans = inf\n        for x in sorted(d):\n            ys = d[x]\n            ys.sort()\n            n = len(ys)\n            for i, y1 in enumerate(ys):\n                for y2 in ys[i + 1 :]:\n                    if (y1, y2) in pos:\n                        ans = min(ans, (x - pos[(y1, y2)]) * (y2 - y1))\n                    pos[(y1, y2)] = x\n        return 0 if ans == inf else ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random points list\n    points = [[random.randint(0, 10000), random.randint(0, 10000)] for _ in range(random.randint(2, 50))]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minAreaRect(points)\n\n    return points, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        points, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minAreaRect(points) == expected_result\n        print(f\"assert solution.minAreaRect({points}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minAreaRect({points}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minAreaRect([[8160, 5826], [7061, 8960], [397, 3992], [5391, 356], [3754, 4842], [4693, 9796], [6909, 8777], [6816, 9922], [8133, 6947], [2240, 2173], [6261, 4964], [7931, 9423], [4795, 7317], [9336, 7152], [3668, 3997], [6030, 4658], [7582, 8480], [4480, 6760], [3728, 9063], [742, 6230], [6856, 9415], [7757, 2326], [1467, 9236], [1606, 3925], [6072, 2862], [2732, 4511], [2120, 5750], [2180, 4785], [826, 7925], [1135, 9483], [9549, 5318], [9223, 9443], [6080, 4023], [5379, 8300], [2704, 7589], [7865, 6234]]) == 0\nassert solution.minAreaRect([[6237, 180], [3930, 6835], [6436, 1256], [1426, 5269], [6052, 6109], [8412, 7738], [9062, 1704], [6049, 2973], [7907, 2175], [9411, 7085], [2999, 8989], [9219, 3503], [9609, 5516], [9256, 440], [6898, 2554], [8646, 8385], [179, 5094], [3330, 2754], [8202, 1663], [218, 4649], [9346, 5454], [5300, 9256], [8393, 7883], [2045, 5728], [1008, 6131], [7412, 5923], [5445, 2331], [7589, 116], [1271, 4090], [4916, 1356], [5579, 2849], [2015, 7636], [1145, 7628], [1765, 251], [7048, 8371], [3513, 4596], [3052, 7285], [2328, 4975], [349, 4039], [8350, 6401], [8321, 2231], [5497, 341], [5883, 2258]]) == 0\nassert solution.minAreaRect([[2564, 4341], [4422, 5202], [2762, 7462], [2786, 4267], [5799, 1712], [4363, 5033], [5069, 1242], [3097, 1476], [2457, 812], [6939, 3136], [4064, 5172], [6911, 3600], [2063, 1403], [1773, 6787], [2557, 309], [7729, 1597], [6093, 9295], [2504, 917], [912, 1088], [1674, 6616], [8179, 1892], [460, 1289], [7102, 51], [3216, 3068], [6038, 1134], [8102, 7684], [4712, 9641], [2733, 7065], [692, 707], [4075, 7496], [9065, 7499], [1292, 8029], [489, 1149], [4093, 8435], [7285, 1631], [1570, 1856], [4048, 5148], [4622, 9930], [3187, 8592], [3556, 8314], [8443, 9341]]) == 0\nassert solution.minAreaRect([[7595, 3239], [5097, 923], [8364, 6822], [6773, 9504], [679, 1332], [6113, 2483], [3807, 7818], [7038, 52], [5748, 9850], [5139, 5995], [4570, 93], [5387, 2957], [4908, 6156], [4887, 7725], [9036, 3297], [4264, 5810]]) == 0\nassert solution.minAreaRect([[9858, 2289], [8543, 7484], [8635, 7323], [3591, 2436], [8011, 9231], [3984, 7674], [1047, 4577], [4428, 2286], [9391, 4874], [9264, 9471], [1334, 2079], [5545, 9538], [5189, 7285], [8070, 8989], [431, 2329], [8438, 1448], [5588, 8768], [6729, 5419], [6203, 7556], [9512, 4432], [7438, 863], [9992, 8485], [5398, 7062], [8096, 8085], [5739, 657], [6392, 1383], [136, 3824], [9286, 50], [5422, 7814], [8988, 6067], [2892, 3941], [3361, 8118]]) == 0\nassert solution.minAreaRect([[9371, 102], [7901, 5551], [9680, 4367], [7632, 868], [7892, 3428], [2024, 1506], [778, 9262], [1230, 8254], [8570, 2531]]) == 0\nassert solution.minAreaRect([[8098, 538], [4299, 5965], [9493, 8081], [6575, 9514], [4067, 2330], [8309, 6822], [2600, 9905], [3440, 7123], [979, 3446], [8113, 3812], [399, 3358], [8937, 2768], [642, 8888], [4420, 1], [5739, 8708], [9619, 2218], [2849, 4248], [5840, 1665], [9792, 2855], [2298, 7512], [9875, 4381], [6430, 8997], [6465, 5826], [4658, 75], [3239, 954], [809, 7312], [6931, 7034], [1326, 1852], [7050, 363], [4273, 667], [6452, 6942], [159, 4838], [1477, 7], [7425, 2140], [4022, 1313], [6898, 942], [5324, 3589], [4998, 3138], [1202, 1438], [1726, 5402], [4249, 9943], [4601, 4898]]) == 0\nassert solution.minAreaRect([[2984, 3155], [5940, 2999], [5554, 5197], [3989, 7429], [3941, 3715], [934, 7313], [6018, 2833], [3186, 113], [2222, 2825], [6175, 9570], [5014, 42], [954, 9709], [6252, 4509], [1965, 1124], [5258, 273], [8644, 4317], [4936, 9983], [6619, 1975], [4333, 3258], [526, 9652], [456, 7434], [4377, 9307], [3143, 2446], [2857, 578], [5606, 8412], [968, 5701], [7536, 1515], [3730, 8346], [806, 9295], [3997, 1075], [2090, 9072], [2467, 5174], [1014, 2501], [7831, 8976], [7523, 9876], [1084, 5993], [3925, 1373], [7545, 17], [8830, 376], [2962, 9221], [2272, 8385], [549, 6469], [6014, 6273], [9821, 7414], [5418, 9106], [5936, 5283], [2203, 1110]]) == 0\nassert solution.minAreaRect([[1233, 3889], [6488, 9529], [3706, 2433], [180, 9410], [8277, 5693], [5176, 878], [6082, 881], [264, 7211], [8918, 4870], [770, 2212], [4429, 7040], [5333, 9776], [8981, 6830], [1960, 8500], [2459, 8710]]) == 0\nassert solution.minAreaRect([[6888, 7006], [3499, 4425], [5932, 908], [4171, 7275], [3409, 7510], [660, 8713], [1288, 1055], [4368, 1578], [5572, 9754], [5376, 2593], [4498, 5774], [9667, 2862], [4189, 7675], [8080, 1783], [2547, 9720], [3104, 984], [4463, 144], [4163, 5230], [2944, 2492], [697, 8146], [836, 9076], [6940, 5542], [1407, 6316], [5890, 1473], [3158, 4682], [8579, 1107], [5567, 5735], [5894, 1273], [9801, 5879], [9758, 7685], [6093, 3115], [6818, 4693], [8557, 5965], [1641, 919], [9851, 9896], [8333, 6714], [747, 782], [8111, 5467], [3020, 5564], [5220, 3921], [6248, 2703], [1773, 8701], [7529, 1417], [2511, 7988], [2735, 962], [2797, 8914], [8655, 3514]]) == 0\nassert solution.minAreaRect([[8975, 4205], [6393, 3753], [1427, 6172], [7441, 5335], [2731, 1393], [8752, 2284], [9081, 4436], [6812, 211], [4818, 4000], [3511, 9936], [6094, 4262], [2825, 4871], [6007, 4427], [3, 1252], [370, 7431], [5231, 5929], [1966, 2479], [6310, 3816], [8715, 4908], [1778, 9158], [9587, 9989], [620, 1218], [8368, 4927], [7402, 9091], [6078, 3663], [6005, 1695], [2129, 1906], [883, 5107], [5845, 6694], [409, 1635], [906, 8169], [4070, 982], [1601, 4698], [9313, 6865], [592, 7930], [5780, 3609], [1793, 504], [9962, 2399], [4685, 8534], [8233, 8175], [8160, 1101]]) == 0\nassert solution.minAreaRect([[5591, 8388], [2147, 6498], [1963, 7252]]) == 0\nassert solution.minAreaRect([[5786, 6076], [25, 1370], [5870, 3545], [7958, 8128], [6197, 4960], [6067, 858], [5600, 6112], [8379, 4268], [3298, 8855], [6660, 9579], [5854, 7136], [2811, 5280], [8804, 7128], [9658, 9335], [9568, 5662], [4968, 5361], [7206, 1297], [8354, 1875], [5787, 8481]]) == 0\nassert solution.minAreaRect([[8496, 4735], [7112, 6547], [2058, 2677], [7352, 4364], [4298, 3433], [4991, 4358], [418, 7689], [6365, 5893], [5973, 4927], [8524, 6920], [3109, 5666]]) == 0\nassert solution.minAreaRect([[4520, 1526], [5737, 2986], [8214, 4269]]) == 0\nassert solution.minAreaRect([[6902, 8485], [8623, 4091], [7103, 6189], [1684, 9552], [6904, 9401], [1657, 9746], [19, 9387], [160, 5225], [5496, 4388]]) == 0\nassert solution.minAreaRect([[1314, 3250], [8437, 7952], [7104, 8979], [1054, 8248], [578, 5269], [2991, 2507], [3741, 2369], [5479, 8260], [5540, 8229], [7158, 4910], [3367, 2874], [493, 895], [1315, 7113], [4029, 1679], [5952, 4033], [1967, 8105], [5614, 1650], [577, 7437], [7151, 2930], [1876, 2338], [9539, 5589], [4066, 6747], [3905, 2780], [2229, 4862], [9248, 9025], [8583, 3443], [7988, 9089], [7682, 5553], [9834, 6411], [5161, 6440]]) == 0\nassert solution.minAreaRect([[2171, 5313], [3141, 9643], [5742, 7433], [3063, 6881], [3624, 734], [2393, 3257], [7066, 7993], [4826, 8113], [3424, 8652], [6342, 6338], [7724, 9422], [6348, 4607], [7547, 5358], [6704, 2246], [4737, 1989], [6321, 7869], [2263, 8738], [6963, 1449], [140, 6657], [7525, 6702], [4711, 7211], [1336, 8259], [3857, 9288], [313, 1558], [6376, 2452], [2454, 8420], [8173, 4770], [4060, 449], [6513, 235], [5538, 4001], [8775, 1730], [7341, 4341], [5197, 55], [6859, 8671], [4952, 6723], [8975, 1557], [2538, 9997], [885, 8921], [525, 9819], [2650, 8584], [3241, 881], [8470, 144], [6665, 1866], [3006, 6929], [9413, 3847]]) == 0\nassert solution.minAreaRect([[278, 3214], [6255, 6653], [104, 2046], [284, 3839], [8074, 6324], [8525, 2620], [3822, 7403], [3275, 5835], [2676, 7452], [2778, 6799], [4420, 5599], [4595, 3146], [2100, 5511], [6352, 4969], [475, 9416], [5070, 3467], [1076, 3590]]) == 0\nassert solution.minAreaRect([[6380, 650], [6799, 230], [7606, 3333], [1217, 6620]]) == 0\nassert solution.minAreaRect([[1346, 7351], [6380, 97], [5626, 8756], [2221, 1], [9065, 5216], [1460, 4095]]) == 0\nassert solution.minAreaRect([[5867, 3857], [1856, 4778], [866, 284], [8587, 932], [9826, 520], [2540, 805], [8893, 5103], [2363, 4069], [1257, 4553], [3642, 9782], [5905, 6440], [451, 1470], [2945, 5727], [3471, 114], [9487, 2126], [6009, 8037], [613, 7305], [8157, 8178], [3239, 1349], [3842, 5204], [9272, 6543], [3851, 5063], [8486, 8387], [2519, 3453], [7811, 2476], [2346, 2752], [3765, 6065], [316, 2861], [8861, 603], [6974, 4082], [323, 8123]]) == 0\nassert solution.minAreaRect([[7781, 5060], [9123, 9828], [657, 6880], [6170, 9803], [1168, 8229], [9720, 7065], [8265, 3040], [6537, 6300], [2105, 3975], [5887, 5466], [1481, 8152], [6146, 7959], [2992, 190], [6024, 1398], [7104, 5203], [6065, 523], [6293, 7097], [1040, 9871], [7423, 5992], [8947, 3180], [8602, 3665], [7528, 8780], [2381, 9435], [2325, 5234], [6023, 8962], [6117, 6640], [6684, 3598], [1047, 4518], [2904, 4196], [1738, 7373], [8836, 6632], [6367, 8147], [5098, 367], [3366, 8776]]) == 0\nassert solution.minAreaRect([[6916, 1071], [7143, 9659], [4031, 8946], [6999, 4344], [2970, 9052], [713, 6627], [6172, 8195], [5099, 5171], [4398, 8755], [488, 4000], [7088, 490], [8883, 4031], [942, 1731], [5641, 1557], [8470, 7774], [5557, 9093], [2642, 8754], [2295, 2950], [6999, 6657]]) == 0\nassert solution.minAreaRect([[2012, 4122], [2360, 7167], [9816, 9463], [9643, 3300], [4860, 9763], [6184, 2481], [4012, 5130], [8378, 8587], [4609, 8967], [1198, 1745], [1095, 7719], [1326, 5503], [6240, 9197], [1077, 8248]]) == 0\nassert solution.minAreaRect([[8041, 4748], [4381, 1861], [8623, 290], [4165, 7592], [5734, 5586], [9293, 1698], [2418, 5191], [2074, 2207], [766, 2475], [646, 6407], [2847, 7190], [1501, 152], [1387, 9104], [9093, 1380], [1547, 1443], [6600, 7948], [4234, 9454], [4994, 3084], [3459, 5953], [4760, 3945], [8126, 6216]]) == 0\nassert solution.minAreaRect([[2747, 6160], [9756, 1373], [8283, 1554], [1813, 1650], [7418, 9712], [427, 4833], [5922, 7244], [6188, 7063], [8911, 8762], [1756, 5035], [7874, 7505], [1750, 7782], [848, 586], [7685, 535], [9487, 3654], [4149, 5209], [7477, 1181], [1663, 1676], [246, 5172], [8511, 1093], [588, 4237], [1252, 2389], [122, 2786], [2905, 5299], [2486, 7784], [6303, 3040], [7644, 4054], [1716, 9113], [9812, 8200], [6014, 3168], [4082, 8873], [4197, 1764], [5669, 7898], [3833, 3382], [8513, 7924]]) == 0\nassert solution.minAreaRect([[1890, 8682], [4067, 4866], [3755, 2764]]) == 0\nassert solution.minAreaRect([[8723, 3174], [7640, 3809], [40, 3993], [4525, 2217], [4993, 7002], [5721, 5182], [3321, 5280], [5196, 38], [1928, 7892], [7920, 1081], [1153, 4278], [8679, 9891], [6665, 3279], [1308, 3916], [2099, 30], [3964, 6193], [1297, 563], [263, 2736], [7425, 2612], [6227, 3786], [143, 7533], [117, 649], [8426, 4959], [4908, 7668]]) == 0\nassert solution.minAreaRect([[2441, 7217], [2835, 3961], [8461, 8488], [3380, 4375], [4003, 5022], [7778, 1558], [4238, 1455], [6375, 9007], [558, 1936], [520, 1554], [5261, 2209], [7041, 4209], [9735, 2203], [350, 3437], [7771, 6247], [5846, 1793], [497, 322], [9808, 8503], [1050, 4462], [3940, 3552], [6542, 3788], [6328, 8963], [8383, 4879], [7940, 2965], [795, 3179], [1119, 7716], [5227, 4349], [4357, 2274], [3925, 6932], [1796, 6364], [5917, 9999], [4885, 7495], [3483, 5525], [8889, 6720], [436, 4611], [4217, 1549], [6995, 5734], [9422, 1557], [3316, 8466], [4391, 5293], [5659, 4702], [8934, 3966], [7288, 4613], [6129, 8785], [3914, 1039]]) == 0\nassert solution.minAreaRect([[6575, 7177], [3866, 4829], [7646, 1505], [4258, 9901], [3209, 3160], [8447, 9561], [2144, 9401], [6162, 4755], [4016, 8935], [9257, 1753], [5589, 5646], [5530, 1562], [5302, 6757], [7953, 5726], [3130, 2173], [9009, 8796], [2254, 4106], [2524, 6336], [257, 8174], [1176, 2116], [4778, 9236], [5296, 115], [308, 8195], [5658, 3993], [4669, 5401], [5315, 1962], [496, 5765], [725, 1977]]) == 0\nassert solution.minAreaRect([[2680, 2830], [9606, 5457], [4002, 876], [4044, 2888], [2886, 1478], [4846, 1043], [4833, 120], [1800, 4405], [9410, 8299], [8711, 7967], [1590, 6516], [9049, 5475], [6472, 5553]]) == 0\nassert solution.minAreaRect([[9205, 2400], [8006, 9502], [1282, 6340], [9774, 5808], [8167, 5533], [8855, 4020], [1922, 2555], [5432, 5863], [9626, 2020], [8130, 1726], [4931, 9988], [7150, 5646], [1777, 450], [8323, 1709], [6994, 2601], [3455, 7858], [6415, 6762], [8973, 5717], [6551, 2550], [9823, 6589], [4092, 6230], [2122, 8485], [433, 4944], [7051, 5595], [2861, 3635], [4876, 1980], [9376, 8173]]) == 0\nassert solution.minAreaRect([[4615, 6109], [2584, 2620], [3629, 4129], [8612, 5797], [420, 3028], [5330, 1186], [3541, 908], [2461, 8775], [3985, 2192], [2711, 1853], [8338, 9246], [8720, 5440], [6397, 6404], [3777, 2642], [1939, 7520], [9698, 7530], [216, 2586], [5340, 8336], [5718, 7116], [5373, 2223], [9890, 8707], [5629, 5832], [9619, 2358], [9128, 987], [7275, 544], [4695, 1570], [3534, 1202], [4807, 1080], [4732, 1612], [6882, 8983], [7501, 5669], [8452, 626], [4429, 4358], [5885, 9708], [1603, 1764], [5366, 2732], [5505, 8657], [4943, 1833], [9858, 21], [8914, 2268]]) == 0\nassert solution.minAreaRect([[6616, 2861], [2682, 4566], [5307, 9367], [6634, 7261], [2807, 9421], [6299, 2518], [798, 1505], [4979, 6991], [3580, 7908], [7418, 7131], [6421, 6525]]) == 0\nassert solution.minAreaRect([[4236, 3928], [3261, 4094], [3513, 2690], [8717, 7475], [5923, 442], [4821, 5575], [7202, 2664], [9304, 9244], [6811, 3792], [9344, 5601], [7355, 6372], [9735, 514], [3035, 1476], [1544, 5323], [9177, 135], [9797, 3338], [297, 1652], [3463, 8788], [9102, 4095], [7137, 3165]]) == 0\nassert solution.minAreaRect([[2601, 7805], [6422, 1423], [459, 5771], [7717, 7292], [6252, 7519], [6086, 2652], [4785, 8658], [9038, 2269], [3210, 5716], [9860, 206], [2805, 3542], [1099, 7584], [3643, 2533], [9439, 5641]]) == 0\nassert solution.minAreaRect([[9404, 2494], [6701, 6195], [660, 8933], [5238, 5445], [7998, 5811], [3491, 4610], [9342, 16], [723, 7582], [7947, 5299], [1586, 2435], [4269, 4606], [1991, 8029], [9706, 6772], [8183, 3231], [3549, 6421], [4043, 1556], [4902, 8223], [9880, 74], [75, 1232], [5, 2977], [9984, 5159], [348, 8761], [2811, 4174], [4713, 7696], [2684, 402], [6010, 9428], [707, 2710], [9236, 7519], [1315, 2968], [9641, 3064], [1694, 5284], [5759, 1893], [7915, 3585], [9082, 7465]]) == 0\nassert solution.minAreaRect([[9216, 3273], [9994, 9712], [3719, 5068], [2630, 4382], [6996, 7719], [3936, 6887], [9073, 8328], [5990, 8804], [4133, 118], [5231, 7928], [4735, 9466], [6134, 3978], [5178, 904], [3117, 8271], [5819, 1125], [9559, 6464], [7860, 7566], [6669, 3319], [4892, 6731], [7338, 448], [3633, 6574], [4744, 8190], [4380, 7201], [6698, 7796], [761, 5187], [9494, 7028], [4078, 473], [5006, 7749], [2343, 6371], [79, 8466], [7535, 920], [8590, 3371], [4545, 7120], [181, 3236], [1122, 869]]) == 0\nassert solution.minAreaRect([[3550, 426], [1825, 2743], [7870, 9468], [9401, 4004], [1337, 7322], [6070, 1741], [225, 9854], [2646, 2544], [7526, 4458], [993, 7121], [5183, 1710], [4633, 459], [8237, 8160], [5456, 8229], [5384, 2417], [7525, 8407], [76, 4875], [9281, 337], [5637, 8750], [8881, 2999]]) == 0\nassert solution.minAreaRect([[2455, 7965], [4536, 183], [9599, 5423], [3567, 4063], [3828, 7143], [7894, 1062], [4872, 560], [780, 7246], [985, 9674], [7000, 8299], [8404, 1070], [8344, 2112], [9960, 817], [3761, 7343], [5180, 4973], [3014, 8042], [3733, 5100], [9195, 8434], [803, 4001], [4344, 7075], [9709, 1119], [1706, 5087], [3045, 9261], [6646, 3964], [4670, 8422], [8686, 5122], [8556, 7319], [4751, 1618], [1673, 1275], [8443, 94], [1942, 9169], [6644, 8527], [5174, 1681], [5492, 6275], [6463, 528], [9118, 8195]]) == 0\nassert solution.minAreaRect([[4171, 6210], [217, 9221], [3468, 9366], [9120, 2694], [7464, 8412], [5469, 3406], [4660, 5289], [9848, 6742], [3297, 549], [2375, 343], [5815, 9960], [2846, 6639], [2561, 1178], [7166, 8442], [2928, 2342], [6474, 570], [2294, 9013], [4721, 5167], [7101, 7471], [486, 5051], [6504, 5793], [104, 1626], [4692, 4471], [7899, 4527], [683, 1574], [6781, 2120], [9723, 8977], [6688, 1456], [1523, 6073], [8903, 7872], [6287, 5914], [6426, 4330], [4465, 3435], [9000, 7762], [5294, 4711], [9620, 6850], [2414, 156]]) == 0\nassert solution.minAreaRect([[3961, 4224], [3147, 4922], [4112, 1236], [629, 4563], [4611, 8053], [7041, 2999], [7764, 2765], [275, 4651], [1418, 2648], [7, 8649], [6301, 6223], [6977, 9445], [362, 3316], [2720, 8681], [2453, 584], [9182, 9277], [5774, 4891], [8318, 659], [8233, 6555], [525, 4447], [8361, 959], [8410, 4310], [9721, 9738], [658, 9650], [3971, 9025], [5394, 480], [8301, 6991], [5796, 9529], [5772, 5125], [4683, 4805], [2621, 9549], [5265, 1663]]) == 0\nassert solution.minAreaRect([[8859, 7018], [5654, 2622], [635, 8433], [2235, 955], [6287, 9900], [9632, 8208], [5855, 5658], [3457, 4948], [7603, 8959], [959, 9552], [608, 2743], [8964, 335], [1724, 7641], [6775, 5540], [1232, 4552], [9314, 8285], [6162, 7161], [7752, 9588], [2807, 9729], [9411, 5905], [6085, 1758], [9814, 5361], [4954, 173], [8678, 8699], [1976, 8587]]) == 0\nassert solution.minAreaRect([[1442, 260], [3561, 8315], [1736, 2504], [8093, 1927], [8396, 1421], [4141, 5458], [3933, 1078], [9327, 4532], [9794, 4754], [3452, 6721], [6352, 8854], [6851, 5070], [7824, 9664], [4801, 2571], [5850, 3204], [5022, 3476], [5402, 8099], [9288, 3668], [7978, 638]]) == 0\nassert solution.minAreaRect([[9790, 5417], [243, 2977], [1796, 7256], [1339, 6004], [2567, 3246], [3099, 6933], [6161, 1866], [8448, 1182], [3813, 9703], [5323, 9250], [1751, 8784], [5823, 5448], [77, 4782], [4937, 4265], [986, 5681]]) == 0\nassert solution.minAreaRect([[5146, 964], [9675, 5953], [3546, 3761], [8548, 7079], [7977, 803], [1198, 1354], [7109, 9634], [8305, 879], [4680, 2126], [2730, 6259], [8718, 9135], [2643, 6387], [1723, 8915], [3747, 8931], [8335, 6408], [9593, 9227], [1491, 2961], [1058, 3352], [9555, 7573], [4531, 2149], [1391, 3445], [8877, 6734], [1818, 8767], [5724, 984], [5163, 7858], [7504, 9325], [6886, 9373], [102, 6632], [5039, 8805], [2250, 6009], [9670, 5012], [4377, 1762], [7132, 3671], [7638, 3426], [5806, 8679], [2118, 3345], [551, 9607], [5163, 7002], [1871, 3469], [3870, 2840], [4947, 7489], [3030, 2901], [2448, 7906], [7710, 2435], [3996, 96], [649, 2179], [3431, 5635]]) == 0\nassert solution.minAreaRect([[672, 9866], [4034, 9460], [9907, 7756], [5571, 7465], [5339, 4715], [4243, 8453], [4306, 2694], [3885, 1991], [7282, 1889], [817, 4757], [7863, 9896], [9083, 7301], [5106, 2069], [962, 5657], [318, 3197], [7751, 1844], [5143, 3624], [6128, 1807], [1401, 9423]]) == 0\nassert solution.minAreaRect([[9301, 9578], [1320, 7922], [7205, 4408], [4329, 5941], [2909, 8588], [663, 8317], [5208, 5137], [8497, 4325], [7810, 1442], [6796, 8097], [5661, 573], [2176, 1626], [4487, 7091], [2743, 7310], [621, 1780], [5889, 9053], [2453, 6516], [1155, 7370], [9984, 9540], [9485, 8064], [2007, 8129], [3108, 4498], [6758, 6002], [7684, 6766], [3177, 2249], [7162, 127], [7884, 6469], [5449, 7389], [1763, 2591], [5838, 3231], [1440, 3981], [4364, 6364], [127, 691], [977, 7095], [8265, 1501], [5892, 2221], [7834, 3141]]) == 0\nassert solution.minAreaRect([[7275, 3017], [1278, 9102], [2099, 7439], [6573, 9742], [2787, 964], [6665, 5358], [7663, 808], [7988, 4362], [3684, 4558], [4927, 4792], [7398, 9008], [4043, 2338], [95, 4184], [4196, 6913], [2882, 9189], [5194, 7965]]) == 0\nassert solution.minAreaRect([[7594, 4642], [2675, 9829], [2902, 7790], [1208, 2537], [7709, 3173]]) == 0\nassert solution.minAreaRect([[4305, 3528], [7512, 926], [6524, 5320], [9797, 7582], [4353, 1039], [9032, 7465], [3315, 8976], [3092, 8428], [4096, 5955], [117, 6896], [4910, 8265], [970, 1448], [5617, 9194], [344, 8131], [5346, 8370], [8868, 112], [5827, 1416], [9247, 6536], [776, 8576], [7303, 5006], [3215, 5610], [6863, 3275], [7419, 5167], [8455, 9481], [6409, 8730], [2232, 9305], [5769, 7844], [7360, 8484], [8334, 4130], [742, 7402], [3640, 2052], [9463, 9175], [7214, 9608], [2830, 9467], [7531, 455], [3160, 1081]]) == 0\nassert solution.minAreaRect([[5328, 8831], [8379, 426], [5629, 6474], [1057, 6423], [4871, 393], [5594, 5077], [5976, 6114], [6441, 4688], [5943, 8439], [2979, 1517], [1285, 8390], [370, 9843], [5783, 7251], [9762, 1723], [9948, 5072], [967, 3028], [512, 8660], [2283, 838], [8280, 1319], [143, 816], [1468, 3994], [8514, 4317], [224, 287], [7870, 4863], [5135, 1149], [4827, 2251], [3157, 6939], [8785, 6893], [6085, 9162], [8003, 3099], [4933, 8174], [1851, 7549], [1268, 769], [7097, 905], [3927, 6279], [251, 7878], [1049, 2757], [6903, 5541], [8147, 3020], [2490, 792], [397, 85], [6469, 9819], [1584, 1935], [2693, 8841], [6007, 5547], [6072, 8874]]) == 0\nassert solution.minAreaRect([[9998, 5741], [4108, 7068], [3485, 5417], [3862, 2202], [6739, 177], [736, 647], [4944, 632], [5655, 8886], [9633, 5031], [7868, 5788], [5906, 7793], [3239, 8490], [8534, 9166], [9178, 9399], [5888, 6224], [7190, 5094], [7812, 4127], [2472, 7840], [9114, 3060], [2576, 5022], [8455, 5381], [9445, 3392], [7313, 5542]]) == 0\nassert solution.minAreaRect([[8970, 7443], [9688, 8863], [2876, 1144], [3747, 1726], [5166, 8262], [4260, 5989], [747, 2385], [4647, 9931], [2304, 4138], [1791, 6815], [111, 6196], [8723, 3145], [7746, 9261], [4076, 4355], [4529, 3997], [2396, 2565], [9210, 6043], [219, 9406], [6706, 1776], [804, 1087], [720, 3936], [7623, 5705], [3570, 9456], [2532, 3865], [4388, 7490], [2642, 8722], [7874, 5843], [3234, 3159], [4180, 7907], [3474, 1291], [8618, 9217], [526, 9346], [373, 7179], [7363, 6345], [6987, 4012], [8735, 2794], [4371, 2058], [1492, 3808], [6928, 6374], [1369, 4237]]) == 0\nassert solution.minAreaRect([[2892, 820], [1034, 3774], [7232, 7517], [3443, 4282], [4456, 9585], [8103, 6583], [2313, 4521], [8458, 7036], [8452, 7347], [1086, 904], [4155, 573], [4994, 6295], [5416, 6871], [4905, 8876], [9131, 8331], [8672, 5635], [8338, 9911], [1866, 6058], [5994, 5292], [9587, 8095], [6095, 2820], [8451, 4218], [5781, 3373], [2213, 9915]]) == 0\nassert solution.minAreaRect([[483, 4157], [6982, 2226], [9655, 8630], [4897, 9853], [8806, 2682], [2949, 8371]]) == 0\nassert solution.minAreaRect([[9166, 8139], [4873, 6631], [8872, 475], [6996, 4597], [3061, 6474], [9686, 3154], [1115, 4446], [9242, 7726], [9036, 2581], [2213, 7889], [9188, 9912], [3286, 1484], [4018, 74], [2677, 9958], [6726, 7484], [4547, 78], [5853, 6356], [4822, 6710], [3332, 5477], [5217, 1836], [3980, 7073], [1785, 1344], [1382, 3279], [444, 8519], [1543, 5249], [2136, 571], [7413, 6647], [3567, 9378], [4175, 4774], [4791, 4635], [1631, 6546], [4103, 3659], [6637, 8074], [4918, 9412], [9228, 5367], [2067, 9955], [5608, 2372], [2715, 1640], [6660, 9914], [5205, 3574], [3080, 7398], [3834, 2113], [4384, 3605], [1849, 1522], [1535, 2836], [8172, 9377], [3238, 1468], [4980, 8684], [9512, 9597]]) == 0\nassert solution.minAreaRect([[8204, 4407], [7275, 9345], [9284, 6444], [9159, 6521], [8971, 9881], [4774, 2751], [4725, 4], [4462, 8466], [1041, 5188], [6856, 7829], [7908, 3869], [6470, 618], [4928, 7982], [1926, 9290], [119, 4317], [7538, 4207], [6883, 1958], [2295, 8031], [390, 1097], [2276, 3105], [208, 1833], [7210, 39], [8047, 3039], [5879, 4665], [4340, 504], [5788, 1810], [8772, 2738], [2714, 1974], [7856, 2136]]) == 0\nassert solution.minAreaRect([[9517, 2180], [7017, 2611], [3565, 2895], [4350, 3755], [9492, 5084], [7275, 6765], [4150, 3000], [2404, 8565], [7162, 1452], [5264, 9719], [7509, 8739], [5466, 3404], [2796, 7042], [5364, 575], [6765, 9711], [3015, 7200], [9640, 5103], [6442, 5518], [2460, 141], [2906, 2418], [6639, 6195], [8288, 1403], [8199, 4731], [7359, 1422], [3170, 2532], [9188, 7658], [4233, 6940], [6146, 8064], [6329, 7644], [1602, 2052], [4741, 8346], [7142, 6344], [6884, 2410], [6823, 6467], [1859, 1497], [7214, 8481], [8739, 8441], [3129, 4921], [6892, 7428], [9345, 6915], [6582, 5368], [4189, 173], [7370, 491], [8534, 9696], [786, 9820], [2247, 1393]]) == 0\nassert solution.minAreaRect([[4478, 1786], [4850, 7039], [4960, 5282], [3603, 5433], [2766, 5496], [3492, 9018], [3881, 4988], [565, 7324], [4735, 6498], [9815, 1299], [7990, 7997], [1655, 6681], [7420, 6447], [4758, 1091], [4602, 3445], [9156, 1689], [601, 8351], [2996, 8597], [6478, 476], [9829, 2896], [4266, 146], [9959, 4814], [7683, 4815], [8911, 231], [4897, 9610], [684, 3211], [5927, 8624], [6659, 5612], [1794, 4018], [3468, 8039], [3559, 376], [6396, 1858], [2123, 6605], [331, 5152], [6281, 1919], [6263, 6957], [4888, 8927], [2288, 9546], [3880, 7974], [258, 2333], [4574, 5170], [5202, 2557], [1113, 8869], [6305, 1342], [6600, 1465], [1716, 9479]]) == 0\nassert solution.minAreaRect([[3340, 5314], [5487, 8942], [8333, 4886], [2261, 7537], [4001, 1764], [6847, 400], [681, 4590], [7039, 6715], [9619, 6338], [9523, 5143], [6352, 4593], [9207, 8673], [6138, 3946], [8341, 1932], [9005, 1437], [1855, 8889], [4464, 3379], [6767, 1597], [3824, 8215], [2501, 8905], [9586, 1189], [6427, 9242], [9259, 7309], [4634, 213], [8172, 9929], [9098, 8899], [1747, 9568], [453, 4372], [5642, 3533], [5317, 6859], [6221, 446], [895, 8511], [5098, 2335], [4978, 1757], [5505, 7315], [9013, 6676], [5399, 9851], [1663, 1390], [7994, 8970], [5152, 1713], [232, 2354], [3069, 5963], [8443, 8493], [3272, 1691]]) == 0\nassert solution.minAreaRect([[6514, 2471], [9576, 4451], [46, 2997], [325, 9252], [7869, 8161], [5852, 4413], [2019, 4600], [4568, 5828], [9292, 377], [8331, 4050], [71, 7981], [5301, 2004], [811, 8307], [3249, 716], [7663, 4405], [2269, 6930], [2311, 232], [1639, 2351], [6876, 1964], [2216, 5310], [2211, 6532]]) == 0\nassert solution.minAreaRect([[4932, 7823], [4241, 1197], [351, 7960], [1684, 8869], [9335, 9066], [7403, 1514], [7812, 800], [3822, 259], [4065, 7490], [5813, 322], [6286, 2], [5841, 8070], [1827, 4836], [6267, 7609], [6583, 5054], [1794, 7078]]) == 0\nassert solution.minAreaRect([[962, 1332], [1002, 2605], [5739, 9567], [2311, 413], [9306, 5771], [3514, 1012], [661, 6719], [2625, 4468], [5844, 2648], [7430, 5082], [1716, 3002], [742, 284], [2469, 2254], [8312, 4162], [887, 9290], [7716, 2176], [7823, 9417], [4004, 8635], [2732, 1005], [1348, 8775], [402, 7278], [2941, 7384], [3292, 5242], [8410, 5904], [7196, 7787], [7185, 7496], [5807, 1278], [1906, 9686], [2226, 7865], [7201, 2186], [9551, 7963], [4617, 8429], [5322, 5685], [9184, 6014], [1718, 4765], [2360, 6502], [3794, 2349], [6701, 6096], [2528, 1706]]) == 0\nassert solution.minAreaRect([[5532, 6374], [4693, 665], [7952, 7749], [6599, 6367], [6608, 2000], [7362, 2496], [2612, 4620], [4524, 6727], [320, 8141], [5096, 551], [1285, 5538], [8153, 7160], [4095, 5875], [7496, 1919], [7897, 7103], [4489, 8557], [3430, 293], [9214, 8509], [3257, 872], [5464, 5547], [4194, 5954], [9697, 7527], [3264, 858], [5271, 3536], [6619, 5808], [845, 7522], [1133, 1763], [2615, 3009], [6772, 8707], [6955, 7756], [5305, 9888], [2655, 243], [4292, 822], [3668, 6372], [9154, 8441], [8350, 9682], [6899, 5598], [1416, 3156], [2134, 6315], [321, 9828], [821, 3657], [4352, 4777], [6007, 5378], [6064, 8214], [5506, 6394], [1591, 2623], [4499, 3457]]) == 0\nassert solution.minAreaRect([[4662, 3549], [971, 9614], [8526, 9589], [5655, 4223], [4764, 6116], [4129, 5099], [294, 8869], [5881, 3210], [8571, 1703], [1803, 7828], [4138, 5519], [1435, 612], [5498, 4249], [9673, 2631], [5461, 4843], [1043, 855], [9739, 8016], [1540, 1186], [3797, 5984], [3903, 1196], [4592, 1286], [3672, 1047], [7456, 64], [4878, 8888], [7227, 5427], [9616, 167], [1475, 1939], [1035, 5386], [2334, 6752], [2314, 8320], [1855, 8320]]) == 0\nassert solution.minAreaRect([[9571, 3225], [9982, 1186], [5949, 420], [116, 2224], [6957, 3668], [187, 3524], [5548, 369], [988, 4914], [7664, 4333], [8719, 491], [8263, 3167], [3608, 4466], [3351, 9857], [2524, 5955], [3335, 6731], [3433, 1170], [4911, 8038], [1482, 10], [2452, 4072], [4645, 7214], [1415, 4647], [5683, 5212], [8232, 8944], [3175, 970], [453, 1726], [6108, 9388], [1223, 133], [3172, 15], [689, 1954], [2948, 6521], [8528, 7382], [7050, 6348], [7904, 6693], [2502, 9946], [8821, 2584]]) == 0\nassert solution.minAreaRect([[201, 5001], [5246, 3321], [4978, 1121], [5046, 6430], [662, 4519], [3361, 4237], [8843, 4660], [2338, 1146], [1011, 4766], [825, 7270], [7142, 8708], [5313, 2917], [7641, 4493], [6746, 5328], [8472, 9482], [5703, 9585], [8708, 5005], [4528, 3008], [8305, 8155], [8050, 4173], [1102, 7694], [564, 8766], [7142, 560], [3178, 9897], [7122, 1729], [2797, 9617], [2754, 8922], [6374, 872]]) == 0\nassert solution.minAreaRect([[1244, 8989], [7030, 7541], [6695, 2054], [2941, 9621], [9845, 2635], [3519, 1259], [1832, 7644], [1831, 6632], [1661, 3501], [5436, 1641], [9655, 5357], [2765, 9322], [9346, 7890], [1792, 9212], [7230, 3000], [3635, 7608], [5852, 5007], [4300, 8858], [2713, 7519], [8845, 7917], [6477, 9238], [5118, 2885], [9565, 2731], [2028, 8474], [6045, 344]]) == 0\nassert solution.minAreaRect([[5881, 2987], [2938, 7905], [6034, 3400], [2658, 9682], [2284, 696], [5376, 7567], [6015, 1543], [9209, 4615], [90, 356], [4458, 8621], [732, 6043], [6313, 177], [7027, 3571], [8901, 9552], [3629, 9218], [2617, 5868]]) == 0\nassert solution.minAreaRect([[591, 6169], [6704, 3910], [4881, 9741], [6604, 337], [1876, 4692], [2772, 6044], [6226, 1838], [9104, 6978], [6738, 2997], [6317, 7289], [6329, 9592], [2665, 8289], [2114, 5638], [7917, 1859], [5953, 6950], [5705, 8378], [1544, 2625], [1300, 925], [3833, 5910], [2489, 9865], [2482, 3978], [8824, 9844], [6038, 3009], [8159, 9485], [8415, 6101], [5637, 4198], [8285, 3120], [5722, 9992], [5053, 2895], [2025, 4101], [8610, 3764], [5773, 8031], [3670, 1334], [5926, 8405]]) == 0\nassert solution.minAreaRect([[9344, 7783], [57, 4475], [4339, 9339], [2040, 677], [7902, 5099], [202, 812], [2149, 1162], [7403, 838], [3722, 9196], [4666, 4080], [9572, 670], [955, 1524], [4831, 1362], [4852, 1012], [9627, 8495], [1406, 5813], [6872, 2809], [8736, 8753], [4076, 5639], [1340, 8838], [1374, 1885], [432, 9258], [3032, 6380], [9784, 3709], [2491, 3344], [2878, 8908], [6557, 4067], [2375, 3410], [1814, 258], [7932, 3], [2848, 6858], [4988, 2917], [1817, 803]]) == 0\nassert solution.minAreaRect([[6011, 7271], [1638, 3979], [6056, 6837], [6405, 9812], [7964, 971], [1146, 5777], [4746, 6877], [4520, 6119], [9770, 1250], [3312, 1069], [8909, 6212], [4892, 7641], [2472, 6778], [6955, 61], [475, 9363], [6652, 4923], [8523, 9941], [9986, 8408], [662, 8476], [9315, 5526], [7184, 8437], [5147, 9297], [8679, 5436], [3234, 7397], [4260, 6271], [3088, 1003], [531, 3573], [6971, 4489], [280, 9124], [1190, 8968], [1269, 1184]]) == 0\nassert solution.minAreaRect([[2648, 7617], [6980, 3842], [6580, 3161], [7746, 8889], [2506, 4988]]) == 0\nassert solution.minAreaRect([[4444, 3551], [9448, 409], [8271, 2922], [7415, 1924], [1837, 8650], [8937, 1872], [2205, 3443], [3009, 1602], [8192, 9505], [5020, 5275], [4909, 8062], [8796, 9153], [9290, 2487], [1709, 6853], [2203, 9545], [3900, 6911], [379, 7051], [7801, 7298], [5996, 4207], [4963, 4088], [8126, 3715], [9339, 8048], [6219, 8201], [3996, 9427], [4853, 1292], [3753, 1773], [4044, 3038], [9531, 8230], [5171, 8742], [6016, 603]]) == 0\nassert solution.minAreaRect([[729, 4509], [1800, 4413], [5709, 2342], [4065, 415], [8205, 8091], [3949, 7706], [1148, 3217], [8100, 4312], [1078, 3036], [3078, 7799], [7677, 293], [2404, 6630], [667, 3181]]) == 0\nassert solution.minAreaRect([[6336, 7018], [1143, 2664], [1338, 2563], [1776, 327], [8970, 302], [6123, 100], [9222, 811], [2825, 9287], [1411, 9981], [1240, 2037], [1972, 6671], [4505, 5678], [30, 6813], [3193, 2210], [2239, 9785], [6465, 3893], [862, 5229], [7614, 8160], [2658, 5304], [8460, 7861], [2495, 9789], [6903, 627], [1067, 9339], [6860, 9218], [2362, 741], [7903, 5155], [9013, 9271], [5819, 5447], [59, 1355], [6734, 4524], [4078, 3091], [6283, 3003], [2565, 5420], [3230, 540], [3307, 8970], [394, 3992], [7903, 6603], [4487, 2355], [5718, 9810], [8565, 9839], [342, 5519], [3047, 21], [4995, 7680], [978, 8959], [2747, 8605]]) == 0\nassert solution.minAreaRect([[7115, 3347], [6495, 723], [1683, 2206], [7787, 6930], [6162, 4849], [9038, 6898], [4377, 6912], [575, 5339], [368, 6732], [4363, 8675], [31, 475], [2790, 7826], [5990, 5776], [7761, 5518], [7511, 1307], [462, 3392], [5606, 6770], [1264, 1235], [619, 3353], [7884, 3902], [9362, 7715], [9055, 8853], [365, 7318], [2176, 7723], [2724, 5778], [690, 2030], [123, 5920], [2679, 4013], [8883, 4669], [8699, 3299], [3734, 2278], [2287, 8351], [3234, 157], [5371, 1686], [7664, 2978], [3369, 8000], [1778, 7629], [880, 6684], [3435, 8626], [3094, 4735]]) == 0\nassert solution.minAreaRect([[9522, 3019], [6261, 9505], [979, 5612], [8385, 5649]]) == 0\nassert solution.minAreaRect([[4560, 2558], [6420, 24], [6965, 2710], [8595, 7401], [4521, 5249], [374, 2403], [6910, 6215], [5662, 8372], [7515, 3720]]) == 0\nassert solution.minAreaRect([[7932, 9646], [6993, 2481], [3729, 2294], [5652, 6290], [1436, 1414], [1233, 816], [2963, 478], [3860, 1687], [1538, 7732], [6248, 1715], [8953, 7815], [2397, 6518], [6073, 4695], [5125, 7796], [4951, 3063], [5234, 356], [170, 5721], [6010, 7217], [4692, 207], [3073, 6145], [6718, 5741], [672, 6433], [8955, 8435], [4940, 5234], [1252, 4001], [7280, 3603]]) == 0\nassert solution.minAreaRect([[4263, 1026], [5916, 1558], [9001, 4432], [7143, 8155], [6935, 3144], [622, 3784], [8586, 9109], [2211, 1542], [7248, 2492], [10000, 2058], [8272, 2183], [36, 216], [1634, 9805]]) == 0\nassert solution.minAreaRect([[1232, 9086], [5593, 8657], [5171, 1224], [6145, 4527], [4225, 364], [2451, 7242], [2767, 5378], [1253, 186], [1969, 9231], [7078, 5360], [303, 471]]) == 0\nassert solution.minAreaRect([[7220, 2348], [8284, 2128], [1911, 9836], [77, 30], [7654, 7381], [298, 8261], [3358, 7338], [2184, 9214], [9117, 8779], [8953, 9580]]) == 0\nassert solution.minAreaRect([[3926, 5031], [4893, 3746], [4970, 9694], [1854, 7116], [3074, 654], [4843, 5314], [2657, 9431], [4392, 9752], [7892, 2961], [3612, 4302], [6620, 9616], [6180, 175], [5154, 225], [7155, 3271], [9488, 8378], [7290, 9209], [1619, 5396], [4434, 6229], [6200, 512], [6664, 3783], [1234, 6495], [7986, 8187], [8118, 9495], [4290, 2003], [9874, 875], [4106, 5746], [6346, 3509], [5530, 7394], [2842, 2], [4503, 3207], [4442, 6118], [1282, 1174], [262, 634], [5137, 8901], [4024, 1625], [8648, 5673], [1600, 3354], [2936, 6829], [3308, 9235], [8924, 7306], [6294, 5199], [5957, 9817], [3258, 3297], [3072, 1277], [9454, 6546]]) == 0\nassert solution.minAreaRect([[9786, 7432], [4924, 337], [600, 7280], [7375, 1261], [8726, 1324], [9377, 5176], [9057, 5886], [4170, 2371], [942, 5712], [1129, 388], [1068, 8958], [4180, 1084], [6565, 4167], [9097, 4608], [4476, 5807], [1915, 5112], [5557, 1427], [929, 6517], [6369, 1433], [3548, 8548], [8028, 7308], [288, 1412], [8609, 2151], [2888, 5441], [9402, 8663], [1737, 5458], [5295, 5280], [9091, 2247], [4253, 3528], [9952, 3708], [6268, 698], [4533, 2302], [1147, 244], [2637, 1784], [6025, 2609], [440, 794], [5636, 1265], [5565, 5504], [5658, 6868], [7290, 1549], [3369, 4975]]) == 0\nassert solution.minAreaRect([[8683, 8577], [6077, 8075], [4212, 1919], [5062, 1926], [8341, 8146], [9602, 9799], [736, 2304], [8699, 9868], [6473, 1982], [5786, 9440], [7970, 3961], [1125, 9671], [1576, 493], [2176, 5083], [9703, 7280], [7161, 3954], [9934, 5839], [4077, 8850], [9464, 1204], [6758, 1436]]) == 0\nassert solution.minAreaRect([[203, 6681], [3886, 2410], [6338, 2587], [9219, 7370], [685, 6401], [3112, 4269], [9202, 2615], [1599, 4745], [1375, 9425], [8501, 9903], [3126, 3777], [2184, 4721], [2052, 282], [4375, 8020], [6328, 2928], [2788, 7690], [1608, 5735], [1746, 8289]]) == 0\nassert solution.minAreaRect([[1005, 2577], [9270, 5880], [8159, 8196], [1280, 1775], [4231, 1528], [2960, 288], [6369, 1722], [2650, 6166], [2943, 8648]]) == 0\nassert solution.minAreaRect([[706, 5823], [1423, 973], [7124, 6799], [9575, 5124], [9374, 5170], [2893, 5516], [7076, 8198], [7656, 2834], [152, 1364], [871, 4843], [7640, 1579], [855, 8368], [9667, 1118], [2092, 5539], [1518, 7687], [2071, 2637]]) == 0\nassert solution.minAreaRect([[7277, 8492], [4319, 4955], [1778, 5427], [4006, 7336], [5443, 5038], [1638, 9557], [9260, 9499], [5692, 4394], [2719, 8313], [3869, 64], [1815, 4687], [592, 9656], [3873, 7808], [4790, 6916], [6000, 9879], [9740, 4410], [9542, 8967], [9663, 8515], [14, 2390], [9402, 9070], [689, 4045], [2473, 2209], [5036, 4267], [8059, 5803], [6242, 7350], [5330, 9979], [3348, 1720], [2928, 6009], [9137, 9066], [1022, 5687], [2501, 1086], [6889, 5030], [4691, 4630]]) == 0\nassert solution.minAreaRect([[6918, 9546], [2777, 1557], [398, 5971], [1433, 1644], [2283, 9992], [3508, 4000], [1450, 8210], [7558, 8105], [1379, 3293], [6265, 9015], [7388, 5491], [80, 4632], [7998, 6164], [2115, 3323], [9764, 9369], [8855, 2848], [4982, 7500], [4912, 4369], [1119, 5282], [2021, 5591], [6144, 6320], [5646, 1841], [80, 3541]]) == 0\nassert solution.minAreaRect([[6495, 8659], [2386, 6333], [7235, 6961], [424, 9819], [3096, 5802], [7807, 8165], [9437, 6543], [1577, 8326], [6498, 8813], [6937, 7504], [4200, 2468], [6552, 9473], [731, 5498], [7532, 9109], [2862, 5299], [7596, 2526], [8562, 1402], [8681, 169], [945, 5428], [4597, 8166], [4410, 7754], [4303, 5489], [770, 5198]]) == 0\nassert solution.minAreaRect([[3016, 4332], [1039, 7818], [2632, 6969], [7245, 9938], [6290, 2614], [7333, 2173], [3990, 1594], [8409, 3717], [756, 1028], [6362, 5427], [8024, 9330], [8324, 3198]]) == 0\nassert solution.minAreaRect([[7406, 9959], [5498, 4328], [9918, 5231], [9909, 2959], [39, 8501], [912, 3969], [5314, 9928], [9477, 4756], [821, 3365], [8281, 4719], [214, 6460], [3027, 1246], [2918, 1611], [7505, 2987], [2530, 8016], [3286, 921], [6777, 9911], [2557, 9912], [3748, 7540], [8751, 3629], [4470, 3393], [144, 971], [9354, 719], [1615, 510], [980, 4398], [8216, 7642], [7865, 3750], [7391, 5993], [5440, 6230], [4614, 8501], [8825, 8942], [1889, 3129], [6696, 1359], [9558, 6629], [7810, 4043], [9074, 2325], [601, 7839], [7901, 2563], [507, 3913], [8799, 7639], [2539, 6062], [1934, 9250], [9648, 609], [5046, 4804], [5461, 8839], [2219, 4356], [3487, 5931]]) == 0\nassert solution.minAreaRect([[361, 2191], [7356, 4556], [6588, 2615], [3733, 3254], [4164, 1335]]) == 0\nassert solution.minAreaRect([[725, 1254], [2953, 5609], [6130, 5742], [3163, 4439], [9837, 1824], [9025, 4766], [2956, 9905], [6865, 1543], [7876, 6675], [4864, 279], [5468, 6759], [5102, 4388], [6393, 115], [4486, 4319], [3426, 4745], [978, 6873], [7605, 6888], [154, 9755], [8884, 9659], [3286, 5291], [7236, 5539], [5708, 6793], [5070, 9252], [7615, 7057], [6161, 1543], [4680, 991], [6892, 2521], [8699, 3446], [2568, 7843], [760, 3532], [760, 9500], [8644, 4676], [8039, 2429], [9226, 3039], [8795, 8914], [1372, 3850], [4276, 9734], [279, 2311], [6400, 6224]]) == 0\nassert solution.minAreaRect([[3715, 6350], [3335, 8389], [3760, 3828], [1697, 1550], [3316, 3857], [448, 9284], [3101, 9051], [9143, 3747], [1912, 4229], [4312, 4490], [2533, 3462], [3850, 1701], [3060, 2784], [2491, 4502], [3264, 5326], [5370, 6277], [6703, 9549], [507, 2452], [8161, 8609], [3614, 1518], [9690, 5853], [538, 5680], [3299, 7028], [3625, 1681], [7019, 8261], [2140, 8068], [3401, 2260], [3406, 9965], [6576, 6319]]) == 0\nassert solution.minAreaRect([[8532, 3011], [9566, 5023], [9230, 4168], [9461, 2754], [2456, 1576], [5587, 7772], [3956, 8617], [6802, 9452], [8801, 7525], [3691, 4071], [1131, 6494], [8213, 9701], [9849, 4166], [1989, 2976], [9829, 1340], [5617, 544], [2, 7363], [4201, 1152], [5417, 8229], [5623, 9412], [4507, 5684], [736, 6095], [4838, 7468], [3657, 2867], [5643, 6394], [5507, 5341], [5025, 8566], [959, 3728], [9467, 9990], [9738, 2802], [256, 4128], [2861, 2452], [4006, 6542]]) == 0",
  "inefficient_solution": "class Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:\n        d = defaultdict(list)\n        for x, y in points:\n            d[str(x)].append(str(y))\n        ans = 1e9\n        for i, p1 in enumerate(points):\n            for j in range(i + 1, len(points)):\n                p2 = points[j]\n                if set([p1[0], p1[1]]) == set([p2[0], p2[1]]):\n                    continue\n                for x in range(min(p1[0], p2[0]), max(p1[0], p2[0]) + 1):\n                    for y in range(min(p1[1], p2[1]), max(p1[1], p2[1]) + 1):\n                        if [x, y] in d[str(p1[0])] and [x, y] in d[str(p2[0])]:\n                            ans = min(ans, abs(p1[0] - p2[0]) * abs(p1[1] - p2[1]))\n        return 0 if ans == 1e9 else ans",
  "is_python": true
}