{
  "problem_idx": 368,
  "task_name": "Largest Divisible Subset",
  "markdown_description": "\nGiven a set of **distinct** positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:\n\n\n* `answer[i] % answer[j] == 0`, or\n* `answer[j] % answer[i] == 0`\n\n\nIf there are multiple solutions, return any of them.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** [1,2]\n**Explanation:** [1,3] is also accepted.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,4,8]\n**Output:** [1,2,4,8]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 2 * 109`\n* All the integers in `nums` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        nums.sort()\n        n = len(nums)\n        f = [1] * n\n        k = 0\n        for i in range(n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0:\n                    f[i] = max(f[i], f[j] + 1)\n            if f[k] < f[i]:\n                k = i\n        m = f[k]\n        i = k\n        ans = []\n        while m:\n            if nums[k] % nums[i] == 0 and f[i] == m:\n                ans.append(nums[i])\n                k, m = i, m - 1\n            i -= 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def largestDivisibleSubset(self, nums):\n        nums.sort()\n        n = len(nums)\n        f = [1] * n\n        k = 0\n        for i in range(n):\n            for j in range(i):\n                if nums[i] % nums[j] == 0:\n                    f[i] = max(f[i], f[j] + 1)\n            if f[k] < f[i]:\n                k = i\n        m = f[k]\n        i = k\n        ans = []\n        while m:\n            if nums[k] % nums[i] == 0 and f[i] == m:\n                ans.append(nums[i])\n                k, m = i, m - 1\n            i -= 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 201), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestDivisibleSubset(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestDivisibleSubset(nums) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.largestDivisibleSubset({nums}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.largestDivisibleSubset({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestDivisibleSubset([68, 142, 144]) == [68]\nassert solution.largestDivisibleSubset([30, 37, 51, 124, 140, 163, 177]) == [30]\nassert solution.largestDivisibleSubset([12, 42, 44, 50, 63, 109, 133, 136]) == [12]\nassert solution.largestDivisibleSubset([54, 62, 83, 85, 112, 115, 120]) == [54]\nassert solution.largestDivisibleSubset([90, 100, 105, 129, 150]) == [90]\nassert solution.largestDivisibleSubset([14, 27, 40, 140, 199]) == [140, 14]\nassert solution.largestDivisibleSubset([12, 108, 169, 191]) == [108, 12]\nassert solution.largestDivisibleSubset([16, 40, 68, 78, 88, 112, 120, 123, 148, 171]) == [112, 16]\nassert solution.largestDivisibleSubset([46, 62, 96, 101, 130]) == [46]\nassert solution.largestDivisibleSubset([17, 112, 117, 160, 199]) == [17]\nassert solution.largestDivisibleSubset([23, 64, 67, 96, 141, 146]) == [23]\nassert solution.largestDivisibleSubset([2, 23, 79, 152, 168]) == [152, 2]\nassert solution.largestDivisibleSubset([19, 20, 32, 53, 64, 105, 107, 126, 141, 170]) == [64, 32]\nassert solution.largestDivisibleSubset([10, 13, 77, 88, 107, 116, 125, 128, 180, 186]) == [180, 10]\nassert solution.largestDivisibleSubset([36, 42, 62, 74, 115, 116, 154, 159]) == [36]\nassert solution.largestDivisibleSubset([98, 103, 125]) == [98]\nassert solution.largestDivisibleSubset([41, 43, 69, 87, 128]) == [41]\nassert solution.largestDivisibleSubset([23, 54, 69, 72, 73, 86, 126, 176, 187]) == [69, 23]\nassert solution.largestDivisibleSubset([29, 42, 62, 70, 72, 73, 86, 93, 140]) == [140, 70]\nassert solution.largestDivisibleSubset([10, 70, 98, 124, 152, 162, 195]) == [70, 10]\nassert solution.largestDivisibleSubset([17, 21, 62, 79, 125, 144, 147, 158, 179]) == [147, 21]\nassert solution.largestDivisibleSubset([1, 2, 24, 25, 35, 41, 76, 92, 118]) == [24, 2, 1]\nassert solution.largestDivisibleSubset([15, 20, 22, 47, 71, 76, 132, 159]) == [132, 22]\nassert solution.largestDivisibleSubset([117, 194]) == [117]\nassert solution.largestDivisibleSubset([59, 168]) == [59]\nassert solution.largestDivisibleSubset([5, 21, 47, 141, 182]) == [141, 47]\nassert solution.largestDivisibleSubset([13, 14, 85, 181]) == [13]\nassert solution.largestDivisibleSubset([15, 110, 130, 152, 155, 159, 192, 194]) == [15]\nassert solution.largestDivisibleSubset([18, 19, 22, 67, 68, 123, 127, 136, 152, 194]) == [136, 68]\nassert solution.largestDivisibleSubset([8, 21, 41, 90, 128, 151]) == [128, 8]\nassert solution.largestDivisibleSubset([15, 58, 111, 118, 177, 193]) == [15]\nassert solution.largestDivisibleSubset([22, 50, 80, 114, 153]) == [22]\nassert solution.largestDivisibleSubset([43, 53, 100]) == [43]\nassert solution.largestDivisibleSubset([61, 77, 109, 113, 129, 198]) == [61]\nassert solution.largestDivisibleSubset([24, 52, 114, 189]) == [24]\nassert solution.largestDivisibleSubset([1, 72, 77, 89, 197]) == [72, 1]\nassert solution.largestDivisibleSubset([69, 71, 107, 113, 166, 200]) == [69]\nassert solution.largestDivisibleSubset([11, 20, 34, 63, 163, 186]) == [11]\nassert solution.largestDivisibleSubset([10, 54, 62, 72, 106, 149, 192]) == [10]\nassert solution.largestDivisibleSubset([14, 16, 106]) == [14]\nassert solution.largestDivisibleSubset([10, 16, 51, 117, 118, 124, 157, 164, 185]) == [10]\nassert solution.largestDivisibleSubset([84, 99, 152]) == [84]\nassert solution.largestDivisibleSubset([12, 84, 126, 194]) == [84, 12]\nassert solution.largestDivisibleSubset([39, 127, 182]) == [39]\nassert solution.largestDivisibleSubset([14, 16, 168, 174, 183, 187]) == [168, 14]\nassert solution.largestDivisibleSubset([20, 59, 93, 117, 156]) == [20]\nassert solution.largestDivisibleSubset([17, 18, 23, 24, 54, 89, 194]) == [54, 18]\nassert solution.largestDivisibleSubset([27, 47, 50, 102, 113, 142, 199]) == [27]\nassert solution.largestDivisibleSubset([19, 27, 72, 79, 115, 125, 199, 200]) == [19]\nassert solution.largestDivisibleSubset([43, 62, 87, 122, 156]) == [43]\nassert solution.largestDivisibleSubset([4, 77, 103, 196]) == [196, 4]\nassert solution.largestDivisibleSubset([18, 24, 26, 88, 103, 170, 194, 200]) == [18]\nassert solution.largestDivisibleSubset([41, 109, 155, 167]) == [41]\nassert solution.largestDivisibleSubset([7, 128, 140]) == [140, 7]\nassert solution.largestDivisibleSubset([51, 129, 150, 157]) == [51]\nassert solution.largestDivisibleSubset([37, 42, 54, 69, 81, 101, 113, 185]) == [185, 37]\nassert solution.largestDivisibleSubset([7, 38, 55, 71, 72, 142, 147, 172, 176, 180]) == [142, 71]\nassert solution.largestDivisibleSubset([2, 17, 23, 31, 46, 181, 182, 190, 195]) == [46, 23]\nassert solution.largestDivisibleSubset([7, 109, 120, 121, 136]) == [7]\nassert solution.largestDivisibleSubset([61, 82, 113, 115, 118]) == [61]\nassert solution.largestDivisibleSubset([17, 19, 74, 120, 122, 164, 173, 175]) == [17]\nassert solution.largestDivisibleSubset([8, 26, 46, 67, 95, 103, 170, 172, 181]) == [8]\nassert solution.largestDivisibleSubset([13, 27, 33, 44, 45, 74, 118, 133, 142, 156]) == [156, 13]\nassert solution.largestDivisibleSubset([36, 50, 54, 85, 109, 116, 122, 125, 160]) == [36]\nassert solution.largestDivisibleSubset([64, 102, 128, 169]) == [128, 64]\nassert solution.largestDivisibleSubset([1, 8, 23, 35, 41, 91, 94, 121, 177]) == [8, 1]\nassert solution.largestDivisibleSubset([29, 44]) == [29]\nassert solution.largestDivisibleSubset([26, 27, 70, 87, 100, 141, 149, 175]) == [26]\nassert solution.largestDivisibleSubset([4, 57, 70, 80, 123]) == [80, 4]\nassert solution.largestDivisibleSubset([31, 43, 77, 89, 139, 165]) == [31]\nassert solution.largestDivisibleSubset([26, 43, 82, 123, 154]) == [26]\nassert solution.largestDivisibleSubset([60, 114, 134]) == [60]\nassert solution.largestDivisibleSubset([42, 67]) == [42]\nassert solution.largestDivisibleSubset([38, 92, 150, 198]) == [38]\nassert solution.largestDivisibleSubset([12, 46]) == [12]\nassert solution.largestDivisibleSubset([50, 189]) == [50]\nassert solution.largestDivisibleSubset([77, 168]) == [77]\nassert solution.largestDivisibleSubset([11, 52, 99, 166]) == [99, 11]\nassert solution.largestDivisibleSubset([23, 47, 109, 157]) == [23]\nassert solution.largestDivisibleSubset([14, 35, 71, 83, 124, 139, 148, 157, 166, 190]) == [166, 83]\nassert solution.largestDivisibleSubset([4, 18, 27, 156, 163, 184]) == [156, 4]\nassert solution.largestDivisibleSubset([10, 125, 129, 176]) == [10]\nassert solution.largestDivisibleSubset([9, 26, 30, 47, 66, 89, 110, 137, 181, 192]) == [9]\nassert solution.largestDivisibleSubset([71, 152]) == [71]\nassert solution.largestDivisibleSubset([75, 153]) == [75]\nassert solution.largestDivisibleSubset([60, 162]) == [60]\nassert solution.largestDivisibleSubset([77, 199]) == [77]\nassert solution.largestDivisibleSubset([1, 21, 39, 113, 150, 169]) == [21, 1]\nassert solution.largestDivisibleSubset([28, 37, 52, 61, 81, 120, 134, 190]) == [28]\nassert solution.largestDivisibleSubset([91, 107, 142]) == [91]\nassert solution.largestDivisibleSubset([45, 52, 63, 81, 92, 98, 114, 147, 172]) == [45]\nassert solution.largestDivisibleSubset([21, 34, 38, 70, 115, 142, 198]) == [21]\nassert solution.largestDivisibleSubset([26, 70, 78, 81, 142, 169]) == [78, 26]\nassert solution.largestDivisibleSubset([19, 29, 58, 66, 95, 145, 148]) == [58, 29]\nassert solution.largestDivisibleSubset([14, 22, 26, 43, 59, 74, 144, 172, 188, 195]) == [172, 43]\nassert solution.largestDivisibleSubset([5, 7, 14, 17, 44, 112, 151]) == [112, 14, 7]\nassert solution.largestDivisibleSubset([76, 121, 122]) == [76]\nassert solution.largestDivisibleSubset([6, 9, 18, 53, 61, 91, 133, 153, 185]) == [18, 9]\nassert solution.largestDivisibleSubset([51, 87, 117, 130, 132, 141, 178, 193]) == [51]\nassert solution.largestDivisibleSubset([1, 5, 73, 76, 82, 170, 175]) == [170, 5, 1]",
  "inefficient_solution": "class Solution:\n    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:\n        nums = nums[:]\n        for _ in range(1000):\n            nums = [n*2 for n in nums]\n        nums.sort()\n        f = [0] * (len(nums)*2)\n        for i in range(2*len(nums)):\n            for j in range(2*len(nums)):\n                if i != j and nums[i] % nums[j] == 0:\n                    f[i] = max(f[i], f[j] + 1)\n        k = 0\n        for i in range(2*len(nums)):\n            for j in range(2*len(nums)):\n                if i != j and nums[i] % nums[j] == 0:\n                    f[i] = max(f[i], f[j] + 1)\n            if f[k] < f[i]:\n                k = i\n        m = f[k]\n        i = k\n        ans = []\n        while m:\n            if nums[k] % nums[i] == 0 and f[i] == m:\n                ans.append(nums[i])\n                k, m = i, m - 1\n            i -= 1\n        return ans",
  "is_python": true
}