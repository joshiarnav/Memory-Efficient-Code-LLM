{
  "problem_idx": 1765,
  "task_name": "Map of Highest Peak",
  "markdown_description": "\nYou are given an integer matrix `isWater` of size `m x n` that represents a map of **land** and **water** cells.\n\n\n* If `isWater[i][j] == 0`, cell `(i, j)` is a **land** cell.\n* If `isWater[i][j] == 1`, cell `(i, j)` is a **water** cell.\n\n\nYou must assign each cell a height in a way that follows these rules:\n\n\n* The height of each cell must be non-negative.\n* If the cell is a **water** cell, its height must be `0`.\n* Any two adjacent cells must have an absolute height difference of **at most** `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\n\nFind an assignment of heights such that the maximum height in the matrix is **maximized**.\n\n\nReturn *an integer matrix* `height` *of size* `m x n` *where* `height[i][j]` *is cell* `(i, j)`*'s height. If there are multiple solutions, return **any** of them*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1765.Map%20of%20Highest%20Peak/images/screenshot-2021-01-11-at-82045-am.png)**\n\n\n\n```\n\n**Input:** isWater = [[0,1],[0,0]]\n**Output:** [[1,0],[2,1]]\n**Explanation:** The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1765.Map%20of%20Highest%20Peak/images/screenshot-2021-01-11-at-82050-am.png)**\n\n\n\n```\n\n**Input:** isWater = [[0,0,1],[1,0,0],[0,0,0]]\n**Output:** [[1,1,0],[0,1,1],[1,2,2]]\n**Explanation:** A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == isWater.length`\n* `n == isWater[i].length`\n* `1 <= m, n <= 1000`\n* `isWater[i][j]` is `0` or `1`.\n* There is at least **one** water cell.\n\n\n",
  "canonical_solution": "class Solution:\n    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:\n        m, n = len(isWater), len(isWater[0])\n        ans = [[-1] * n for _ in range(m)]\n        q = deque()\n        for i, row in enumerate(isWater):\n            for j, v in enumerate(row):\n                if v:\n                    q.append((i, j))\n                    ans[i][j] = 0\n        while q:\n            i, j = q.popleft()\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and ans[x][y] == -1:\n                    ans[x][y] = ans[i][j] + 1\n                    q.append((x, y))\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def highestPeak(self, isWater):\n        m, n = len(isWater), len(isWater[0])\n        ans = [[-1] * n for _ in range(m)]\n        q = deque()\n        for i, row in enumerate(isWater):\n            for j, v in enumerate(row):\n                if v:\n                    q.append((i, j))\n                    ans[i][j] = 0\n        while q:\n            i, j = q.popleft()\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and ans[x][y] == -1:\n                    ans[x][y] = ans[i][j] + 1\n                    q.append((x, y))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random isWater matrix\n    isWater = []\n    m = random.randint(1, 6)\n    n = random.randint(1, 6)\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(random.randint(0, 1))\n        isWater.append(row)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.highestPeak(isWater)\n\n    return isWater, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        isWater, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.highestPeak(isWater) == expected_result\n        print(f\"assert solution.highestPeak({isWater}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.highestPeak({isWater}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.highestPeak([[1, 1, 0]]) == [[0, 0, 1]]\nassert solution.highestPeak([[0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0]]) == [[1, 1, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 2], [0, 1, 1, 1, 2, 3], [0, 0, 0, 1, 2, 3]]\nassert solution.highestPeak([[1], [1], [1], [0], [1], [0]]) == [[0], [0], [0], [1], [0], [1]]\nassert solution.highestPeak([[1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0]]) == [[0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1]]\nassert solution.highestPeak([[1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 0]]) == [[0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 2, 1]]\nassert solution.highestPeak([[0]]) == [[-1]]\nassert solution.highestPeak([[0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0]]) == [[1, 1, 0, 0, 1, 2], [0, 0, 0, 0, 1, 2]]\nassert solution.highestPeak([[0, 0, 0, 0, 1]]) == [[4, 3, 2, 1, 0]]\nassert solution.highestPeak([[0, 0, 1], [1, 0, 0], [1, 0, 0]]) == [[1, 1, 0], [0, 1, 1], [0, 1, 2]]\nassert solution.highestPeak([[1, 1, 0, 1], [1, 1, 1, 0], [1, 0, 1, 0], [0, 1, 0, 0], [0, 1, 0, 0], [1, 0, 1, 1]]) == [[0, 0, 1, 0], [0, 0, 0, 1], [0, 1, 0, 1], [1, 0, 1, 2], [1, 0, 1, 1], [0, 1, 0, 0]]\nassert solution.highestPeak([[1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1], [1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 0]]) == [[0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 2, 1]]\nassert solution.highestPeak([[0, 0], [0, 0], [1, 0], [0, 0], [1, 0]]) == [[2, 3], [1, 2], [0, 1], [1, 2], [0, 1]]\nassert solution.highestPeak([[1, 0, 1, 0, 1], [1, 1, 0, 1, 1], [1, 0, 0, 1, 1]]) == [[0, 1, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 1, 0, 0]]\nassert solution.highestPeak([[1, 0, 0, 1, 1], [1, 0, 1, 1, 0], [0, 0, 1, 0, 0]]) == [[0, 1, 1, 0, 0], [0, 1, 0, 0, 1], [1, 1, 0, 1, 2]]\nassert solution.highestPeak([[0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0]]) == [[2, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0], [1, 0, 0, 1, 2, 1]]\nassert solution.highestPeak([[0, 0], [1, 0], [1, 1]]) == [[1, 2], [0, 1], [0, 0]]\nassert solution.highestPeak([[1, 1, 0, 0, 1], [1, 0, 0, 0, 0], [1, 0, 1, 0, 1]]) == [[0, 0, 1, 1, 0], [0, 1, 1, 2, 1], [0, 1, 0, 1, 0]]\nassert solution.highestPeak([[1, 0, 1], [1, 1, 1], [1, 0, 0]]) == [[0, 1, 0], [0, 0, 0], [0, 1, 1]]\nassert solution.highestPeak([[0, 0], [1, 1], [0, 0], [0, 0], [1, 1]]) == [[1, 1], [0, 0], [1, 1], [1, 1], [0, 0]]\nassert solution.highestPeak([[1, 0, 0], [1, 1, 1], [1, 1, 0]]) == [[0, 1, 1], [0, 0, 0], [0, 0, 1]]\nassert solution.highestPeak([[1, 1, 1, 1, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 1], [0, 0, 0, 1, 0]]) == [[0, 0, 0, 0, 1], [0, 0, 1, 0, 0], [1, 1, 1, 0, 1], [2, 1, 0, 0, 1], [2, 1, 0, 0, 0], [3, 2, 1, 0, 1]]\nassert solution.highestPeak([[1, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1]]) == [[0, 1, 1, 0, 0, 1], [0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0]]\nassert solution.highestPeak([[1, 0, 0, 0, 1], [1, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 1, 0, 0, 1]]) == [[0, 1, 1, 1, 0], [0, 1, 0, 1, 1], [1, 0, 1, 1, 2], [0, 0, 1, 0, 1], [1, 0, 1, 1, 0]]\nassert solution.highestPeak([[1, 1, 0, 0, 1], [0, 0, 0, 1, 0], [1, 1, 0, 0, 1], [1, 1, 0, 1, 0], [0, 0, 0, 1, 0]]) == [[0, 0, 1, 1, 0], [1, 1, 1, 0, 1], [0, 0, 1, 1, 0], [0, 0, 1, 0, 1], [1, 1, 1, 0, 1]]\nassert solution.highestPeak([[1, 0, 0, 1, 0], [0, 0, 0, 0, 1], [1, 1, 1, 1, 0], [0, 0, 1, 0, 0], [1, 1, 1, 0, 1]]) == [[0, 1, 1, 0, 1], [1, 1, 1, 1, 0], [0, 0, 0, 0, 1], [1, 1, 0, 1, 1], [0, 0, 0, 1, 0]]\nassert solution.highestPeak([[0, 1, 1, 0, 0, 1]]) == [[1, 0, 0, 1, 1, 0]]\nassert solution.highestPeak([[0], [0], [0]]) == [[-1], [-1], [-1]]\nassert solution.highestPeak([[1, 0, 0], [1, 0, 0], [0, 0, 0], [1, 1, 1], [1, 1, 1]]) == [[0, 1, 2], [0, 1, 2], [1, 1, 1], [0, 0, 0], [0, 0, 0]]\nassert solution.highestPeak([[0, 0, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 0, 1], [1, 1, 1, 1, 0], [1, 0, 0, 1, 0], [0, 0, 1, 0, 1]]) == [[3, 2, 1, 0, 1], [2, 1, 0, 0, 1], [1, 1, 0, 1, 0], [0, 0, 0, 0, 1], [0, 1, 1, 0, 1], [1, 1, 0, 1, 0]]\nassert solution.highestPeak([[1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0]]) == [[0, 1, 1, 2, 2, 1], [0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 2]]\nassert solution.highestPeak([[1, 1, 1, 1, 0], [1, 0, 0, 0, 1], [1, 0, 0, 0, 1]]) == [[0, 0, 0, 0, 1], [0, 1, 1, 1, 0], [0, 1, 2, 1, 0]]\nassert solution.highestPeak([[0, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 1, 1, 0], [1, 0, 1, 0, 1], [1, 1, 1, 1, 0]]) == [[2, 1, 1, 2, 3], [1, 0, 0, 1, 2], [1, 0, 0, 0, 1], [0, 1, 0, 1, 0], [0, 0, 0, 0, 1]]\nassert solution.highestPeak([[1], [0], [1], [1], [0], [0]]) == [[0], [1], [0], [0], [1], [2]]\nassert solution.highestPeak([[1, 1, 0, 1, 0], [1, 1, 0, 0, 1]]) == [[0, 0, 1, 0, 1], [0, 0, 1, 1, 0]]\nassert solution.highestPeak([[0, 0, 0, 1, 1], [0, 1, 0, 0, 1], [0, 1, 0, 0, 1], [0, 1, 1, 0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 0, 1]]) == [[2, 1, 1, 0, 0], [1, 0, 1, 1, 0], [1, 0, 1, 1, 0], [1, 0, 0, 1, 1], [1, 1, 0, 1, 1], [0, 0, 0, 1, 0]]\nassert solution.highestPeak([[0, 1, 1, 1, 0], [0, 1, 1, 0, 0]]) == [[1, 0, 0, 0, 1], [1, 0, 0, 1, 2]]\nassert solution.highestPeak([[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 0], [1, 1, 0]]) == [[2, 1, 0], [2, 1, 0], [2, 1, 0], [1, 1, 1], [0, 0, 1]]\nassert solution.highestPeak([[0, 0, 1], [1, 0, 0], [0, 1, 1], [0, 0, 1], [0, 0, 1], [1, 0, 1]]) == [[1, 1, 0], [0, 1, 1], [1, 0, 0], [2, 1, 0], [1, 1, 0], [0, 1, 0]]\nassert solution.highestPeak([[0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0]]) == [[1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0], [2, 1, 2, 1, 0, 1]]\nassert solution.highestPeak([[0, 1, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 1, 0, 1]]) == [[1, 0, 0, 0, 1], [0, 1, 0, 1, 1], [0, 1, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 0, 1, 0]]\nassert solution.highestPeak([[0], [0], [0], [1], [1], [0]]) == [[3], [2], [1], [0], [0], [1]]\nassert solution.highestPeak([[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]]) == [[4, 3, 2, 1], [3, 2, 1, 0], [3, 2, 1, 0]]\nassert solution.highestPeak([[0, 0, 0, 1], [1, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 0]]) == [[1, 1, 1, 0], [0, 0, 1, 0], [0, 1, 1, 0], [1, 1, 0, 0], [2, 2, 1, 0], [3, 3, 2, 1]]\nassert solution.highestPeak([[0, 0], [1, 1], [1, 1], [1, 0], [1, 0], [0, 0]]) == [[1, 1], [0, 0], [0, 0], [0, 1], [0, 1], [1, 2]]\nassert solution.highestPeak([[1, 1, 0, 0, 0], [1, 1, 1, 1, 0], [1, 1, 1, 0, 1], [0, 1, 0, 1, 0], [0, 0, 1, 0, 1], [0, 0, 0, 0, 1]]) == [[0, 0, 1, 1, 2], [0, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 0, 1, 0, 1], [2, 1, 0, 1, 0], [3, 2, 1, 1, 0]]\nassert solution.highestPeak([[0], [1], [0], [0]]) == [[1], [0], [1], [2]]\nassert solution.highestPeak([[0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1]]) == [[1, 0, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0]]\nassert solution.highestPeak([[0], [1], [1], [1], [1]]) == [[1], [0], [0], [0], [0]]\nassert solution.highestPeak([[0], [1], [1], [0], [1], [1]]) == [[1], [0], [0], [1], [0], [0]]\nassert solution.highestPeak([[0], [0], [1], [0], [1], [1]]) == [[2], [1], [0], [1], [0], [0]]\nassert solution.highestPeak([[1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1]]) == [[0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0], [1, 0, 1, 2, 1, 0]]\nassert solution.highestPeak([[0, 0, 1], [1, 1, 0], [1, 0, 0], [0, 1, 0], [0, 1, 0]]) == [[1, 1, 0], [0, 0, 1], [0, 1, 2], [1, 0, 1], [1, 0, 1]]\nassert solution.highestPeak([[0]]) == [[-1]]\nassert solution.highestPeak([[0, 0, 1], [1, 1, 0]]) == [[1, 1, 0], [0, 0, 1]]\nassert solution.highestPeak([[1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0], [1, 0, 0, 1], [1, 1, 0, 1]]) == [[0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 0, 1], [0, 1, 1, 0], [0, 0, 1, 0]]\nassert solution.highestPeak([[0, 0], [0, 1], [1, 1], [0, 1]]) == [[2, 1], [1, 0], [0, 0], [1, 0]]\nassert solution.highestPeak([[0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1]]) == [[1, 0, 1, 0, 0, 1], [2, 1, 0, 1, 0, 1], [2, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0]]\nassert solution.highestPeak([[0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0]]) == [[1, 0, 0, 1, 0, 1], [2, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0], [2, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1]]\nassert solution.highestPeak([[0, 0, 0], [1, 1, 0], [1, 1, 1], [1, 0, 0], [0, 0, 1]]) == [[1, 1, 2], [0, 0, 1], [0, 0, 0], [0, 1, 1], [1, 1, 0]]\nassert solution.highestPeak([[0, 1], [0, 0], [1, 0]]) == [[1, 0], [1, 1], [0, 1]]\nassert solution.highestPeak([[1, 0, 0]]) == [[0, 1, 2]]\nassert solution.highestPeak([[0]]) == [[-1]]\nassert solution.highestPeak([[0, 0, 0, 0], [1, 0, 0, 0], [1, 0, 1, 0], [1, 0, 1, 0], [1, 0, 0, 0], [0, 1, 1, 0]]) == [[1, 2, 2, 3], [0, 1, 1, 2], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 1, 2], [1, 0, 0, 1]]\nassert solution.highestPeak([[1, 1, 0, 1, 1]]) == [[0, 0, 1, 0, 0]]\nassert solution.highestPeak([[1, 1, 1, 0], [1, 0, 1, 0], [1, 1, 1, 1], [0, 1, 0, 0]]) == [[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0], [1, 0, 1, 1]]\nassert solution.highestPeak([[1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1]]) == [[0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0]]\nassert solution.highestPeak([[1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1]]) == [[0, 0, 0, 0, 1, 0], [1, 1, 0, 1, 2, 1], [0, 1, 1, 0, 1, 0]]\nassert solution.highestPeak([[0, 0, 0], [0, 1, 0], [1, 0, 0], [0, 0, 0], [0, 0, 1], [1, 0, 1]]) == [[2, 1, 2], [1, 0, 1], [0, 1, 2], [1, 2, 1], [1, 1, 0], [0, 1, 0]]\nassert solution.highestPeak([[0, 1, 0]]) == [[1, 0, 1]]\nassert solution.highestPeak([[0, 1, 0, 0, 1], [0, 1, 1, 0, 0], [1, 0, 1, 1, 1], [1, 0, 0, 0, 1], [0, 1, 1, 1, 0], [1, 1, 0, 1, 0]]) == [[1, 0, 1, 1, 0], [1, 0, 0, 1, 1], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [1, 0, 0, 0, 1], [0, 0, 1, 0, 1]]\nassert solution.highestPeak([[0], [0], [0], [0]]) == [[-1], [-1], [-1], [-1]]\nassert solution.highestPeak([[1, 0, 1], [0, 0, 0], [1, 0, 0]]) == [[0, 1, 0], [1, 2, 1], [0, 1, 2]]\nassert solution.highestPeak([[0, 1], [1, 0], [0, 1], [1, 1], [1, 0]]) == [[1, 0], [0, 1], [1, 0], [0, 0], [0, 1]]\nassert solution.highestPeak([[0, 1, 1], [0, 1, 1]]) == [[1, 0, 0], [1, 0, 0]]\nassert solution.highestPeak([[0, 1], [1, 1], [0, 1]]) == [[1, 0], [0, 0], [1, 0]]\nassert solution.highestPeak([[1, 0, 1, 0, 0, 0]]) == [[0, 1, 0, 1, 2, 3]]\nassert solution.highestPeak([[1, 0, 0], [0, 1, 1]]) == [[0, 1, 1], [1, 0, 0]]\nassert solution.highestPeak([[0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1]]) == [[1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0]]\nassert solution.highestPeak([[1, 0, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1]]) == [[0, 1, 0, 1, 2, 3], [0, 0, 0, 1, 1, 2], [1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0]]\nassert solution.highestPeak([[1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1]]) == [[0, 0, 1, 1, 2, 1], [1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0]]\nassert solution.highestPeak([[0, 1, 0, 0, 1], [1, 1, 1, 0, 0]]) == [[1, 0, 1, 1, 0], [0, 0, 0, 1, 1]]\nassert solution.highestPeak([[1, 1], [1, 1], [1, 0]]) == [[0, 0], [0, 0], [0, 1]]\nassert solution.highestPeak([[1, 0, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 1, 0, 1]]) == [[0, 1, 2, 1, 1], [1, 2, 1, 0, 0], [2, 1, 0, 1, 0]]\nassert solution.highestPeak([[1, 0], [0, 1], [0, 0]]) == [[0, 1], [1, 0], [2, 1]]\nassert solution.highestPeak([[1], [1], [0], [1]]) == [[0], [0], [1], [0]]\nassert solution.highestPeak([[1, 0, 0, 1, 1, 0]]) == [[0, 1, 1, 0, 0, 1]]\nassert solution.highestPeak([[0, 0, 1], [1, 0, 0]]) == [[1, 1, 0], [0, 1, 1]]\nassert solution.highestPeak([[1, 0, 1, 1, 1]]) == [[0, 1, 0, 0, 0]]\nassert solution.highestPeak([[1, 1, 1, 1], [1, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 0], [1, 1, 1, 1]]) == [[0, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0], [1, 1, 0, 1], [0, 0, 0, 0]]\nassert solution.highestPeak([[1, 1, 1, 0], [0, 0, 0, 0]]) == [[0, 0, 0, 1], [1, 1, 1, 2]]\nassert solution.highestPeak([[0, 0], [1, 0], [1, 1], [0, 0], [1, 0]]) == [[1, 2], [0, 1], [0, 0], [1, 1], [0, 1]]\nassert solution.highestPeak([[0, 0, 1, 1, 0]]) == [[2, 1, 0, 0, 1]]\nassert solution.highestPeak([[0, 0], [0, 0], [0, 0], [0, 1]]) == [[4, 3], [3, 2], [2, 1], [1, 0]]\nassert solution.highestPeak([[1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1]]) == [[0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0]]\nassert solution.highestPeak([[0, 1, 1], [0, 1, 1], [0, 1, 1], [1, 1, 0], [0, 1, 1]]) == [[1, 0, 0], [1, 0, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0]]\nassert solution.highestPeak([[1], [1], [1], [0], [0]]) == [[0], [0], [0], [1], [2]]\nassert solution.highestPeak([[1], [1], [1], [0], [0]]) == [[0], [0], [0], [1], [2]]\nassert solution.highestPeak([[0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1]]) == [[1, 0, 1, 0, 0, 0], [2, 1, 0, 0, 1, 0]]\nassert solution.highestPeak([[0], [0], [0]]) == [[-1], [-1], [-1]]\nassert solution.highestPeak([[0, 1, 0, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [1, 0, 1, 0, 0], [0, 0, 1, 0, 0]]) == [[1, 0, 1, 1, 0], [2, 1, 2, 1, 1], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 0, 1, 1], [1, 1, 0, 1, 2]]",
  "inefficient_solution": "class Solution:\n    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:\n        m, n = len(isWater), len(isWater[0])\n        ans = [[-1] * n for _ in range(m)]\n        q = deque()\n        for i, row in enumerate(isWater):\n            for j, v in enumerate(row):\n                if v:\n                    q.append((i, j, 0))  # Store height as 0\n                    ans[i][j] = 0\n                    for a, b in pairwise((-1, 0, 1, 0, -1)):\n                        x, y = i + a, j + b\n                        if 0 <= x < m and 0 <= y < n:\n                            q.append((x, y, 0))  # Initialize height for all adjacent cells as 0\n        while q:\n            i, j, height = q.popleft()\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and ans[x][y] == -1:\n                    ans[x][y] = height\n                    q.extend([(x, y, height + 1), (x, y, height + 2), (x, y, height + 3)])  # Push all possible heights\n        return ans",
  "is_python": true
}