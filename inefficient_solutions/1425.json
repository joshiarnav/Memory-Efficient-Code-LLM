{
  "problem_idx": 1425,
  "task_name": "Constrained Subsequence Sum",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, return the maximum sum of a **non-empty** subsequence of that array such that for every two **consecutive** integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied.\n\n\nA *subsequence* of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,2,-10,5,20], k = 2\n**Output:** 37\n**Explanation:** The subsequence is [10, 2, 5, 20].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,-2,-3], k = 1\n**Output:** -1\n**Explanation:** The subsequence must be non-empty, so we choose the largest number.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [10,-2,-10,-5,20], k = 2\n**Output:** 23\n**Explanation:** The subsequence is [10, -2, -5, 20].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 105`\n* `-104 <= nums[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp = [0] * n\n        ans = -inf\n        q = deque()\n        for i, v in enumerate(nums):\n            if q and i - q[0] > k:\n                q.popleft()\n            dp[i] = max(0, 0 if not q else dp[q[0]]) + v\n            while q and dp[q[-1]] <= dp[i]:\n                q.pop()\n            q.append(i)\n            ans = max(ans, dp[i])\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def constrainedSubsetSum(self, nums, k):\n        n = len(nums)\n        dp = [0] * n\n        ans = float('-inf')\n        q = deque()\n        for i, v in enumerate(nums):\n            if q and i - q[0] > k:\n                q.popleft()\n            dp[i] = max(0, 0 if not q else dp[q[0]]) + v\n            while q and dp[q[-1]] <= dp[i]:\n                q.pop()\n            q.append(i)\n            ans = max(ans, dp[i])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-10000, 10001), random.randint(1, 10))\n    \n    # Generate a random value for k\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.constrainedSubsetSum(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.constrainedSubsetSum(nums, k) == expected_result\n        print(f\"assert solution.constrainedSubsetSum({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.constrainedSubsetSum({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.constrainedSubsetSum([8973, -3696, -2096, 1850, 5286, -7459, 406, 158], 4) == 16673\nassert solution.constrainedSubsetSum([-9133, 3224, -5768, 1018, -7354, -7539, -8639], 6) == 4242\nassert solution.constrainedSubsetSum([-9332, 1810, 2491, 8836, 1854, 5661, -6729, 2472], 4) == 23124\nassert solution.constrainedSubsetSum([596, 7663, 8066, 1019, 4461, 9004], 6) == 30809\nassert solution.constrainedSubsetSum([-4250, 1259, -9386, -427, -6919, -4327, -4735], 1) == 1259\nassert solution.constrainedSubsetSum([-5740], 1) == -5740\nassert solution.constrainedSubsetSum([-6896, -564, 2767, -4157, 7195, -3400, 1660, -1334, 954], 6) == 12576\nassert solution.constrainedSubsetSum([-111, -4924, -9923, -2504], 3) == -111\nassert solution.constrainedSubsetSum([5393, 7126, 5934, 8274, 2034, -4803, 2617, -5442], 6) == 31378\nassert solution.constrainedSubsetSum([9295, 4481, -2692, 4175, 1227, 4723, -6179, 4993, -1796], 6) == 28894\nassert solution.constrainedSubsetSum([897, 5862, -4299], 2) == 6759\nassert solution.constrainedSubsetSum([1589, 633, -6352], 1) == 2222\nassert solution.constrainedSubsetSum([9471, -8769, -9289, 7952, -7509, 7835, -6429, -7152], 5) == 25258\nassert solution.constrainedSubsetSum([-5724, 1206, -8483], 1) == 1206\nassert solution.constrainedSubsetSum([-2708, 3398, -3067, -4371, 610], 3) == 4008\nassert solution.constrainedSubsetSum([7797, 274, 5976, 7386, 3272, 8346, -3937, -5836], 6) == 33051\nassert solution.constrainedSubsetSum([8041, 7864, -4485, -6273, 8703, -3055, 7162, 9408], 8) == 41178\nassert solution.constrainedSubsetSum([5991, 9076, 3138, -1106, -8037, -492, 9000, -9205, -5973, 5026], 6) == 32231\nassert solution.constrainedSubsetSum([-3625, -1841, -3980, 8947, -564, -1568, -1836], 5) == 8947\nassert solution.constrainedSubsetSum([-3133, -8263, 6561, -1210], 4) == 6561\nassert solution.constrainedSubsetSum([-4130, -3699, -6868, -7115, -2717, 5283, 156, -6377, 8041, -9232], 7) == 13480\nassert solution.constrainedSubsetSum([-6712], 1) == -6712\nassert solution.constrainedSubsetSum([-252, -3773, -3836], 3) == -252\nassert solution.constrainedSubsetSum([3578, -7051, 3861, -2291, -8456, 6692, -8730, 7438], 5) == 21569\nassert solution.constrainedSubsetSum([6751, -70, 5099, 8683, 2875, -611, 9443, 8560, -1297, -4728], 10) == 41411\nassert solution.constrainedSubsetSum([-6703, -3941, 8550, 3282], 3) == 11832\nassert solution.constrainedSubsetSum([-2213, 7204, 5806, -169, -5986, -5826, -8078], 4) == 13010\nassert solution.constrainedSubsetSum([-9276, 3796, 4546], 3) == 8342\nassert solution.constrainedSubsetSum([-1218, -5098, 4040, 3817, 1699, -6134, -8865, -6613], 5) == 9556\nassert solution.constrainedSubsetSum([2764, 5227, 9922, -6778, -5081, 1651], 5) == 19564\nassert solution.constrainedSubsetSum([2888], 1) == 2888\nassert solution.constrainedSubsetSum([-8809, 7514, 4650, -2123], 3) == 12164\nassert solution.constrainedSubsetSum([-49, 2941, -1150, 1622, 5373, -779, 780, -2645, 7392], 9) == 18108\nassert solution.constrainedSubsetSum([2472, 8947, -8754, 8846], 4) == 20265\nassert solution.constrainedSubsetSum([-44, -9042, 3664, -7977, 1645], 1) == 3664\nassert solution.constrainedSubsetSum([-6109, 7837], 2) == 7837\nassert solution.constrainedSubsetSum([-2423, -4610, 4710, -9295, 9140], 3) == 13850\nassert solution.constrainedSubsetSum([-1273, 706], 2) == 706\nassert solution.constrainedSubsetSum([3616, -6254, -6997, -2849, 440, -5553], 3) == 3616\nassert solution.constrainedSubsetSum([-5789, -5959, -8649, -2295, -8516, 6582, -2023, -6143, 9407, 2886], 1) == 12293\nassert solution.constrainedSubsetSum([6285, -7495, 9499, 6794, -6500, 9767], 4) == 32345\nassert solution.constrainedSubsetSum([6267, -2865, 6304, 5853, -4607, -2692, 6735, 5155], 1) == 20150\nassert solution.constrainedSubsetSum([-9748, -9415, 4594], 1) == 4594\nassert solution.constrainedSubsetSum([-3852, -5973, 8824, 1215, 8220], 1) == 18259\nassert solution.constrainedSubsetSum([7643, 8357, -1657], 3) == 16000\nassert solution.constrainedSubsetSum([7099, -1803, 851, -2022, 3740, -5904, -5597, 7544, -5785], 2) == 13637\nassert solution.constrainedSubsetSum([2959], 1) == 2959\nassert solution.constrainedSubsetSum([9082, -2207, 5870], 2) == 14952\nassert solution.constrainedSubsetSum([-4423, -2823], 1) == -2823\nassert solution.constrainedSubsetSum([9993, -9125], 1) == 9993\nassert solution.constrainedSubsetSum([-2362, 2379, 1137, -2779, 1070, 8727, -8417], 5) == 13313\nassert solution.constrainedSubsetSum([3364, -7673, -8039, -6728, 8419, 2194, 3801], 1) == 14414\nassert solution.constrainedSubsetSum([1542], 1) == 1542\nassert solution.constrainedSubsetSum([-7805, -8354, -5714, 7920, 1352, 6422, -9457, 9076, 3979, -8422], 2) == 28749\nassert solution.constrainedSubsetSum([8990, 4965, -6911, 4623, -9827, 452, -4587], 3) == 19030\nassert solution.constrainedSubsetSum([5196, -1870, -2028], 1) == 5196\nassert solution.constrainedSubsetSum([3754, -896, 8723, 8471, -981, 7429, -816, -2356], 5) == 28377\nassert solution.constrainedSubsetSum([3282, 1903, 2676, 2534, -1837, 4455, 7548, 9602, 3246], 6) == 35246\nassert solution.constrainedSubsetSum([4860, 7891, 419, -3386], 2) == 13170\nassert solution.constrainedSubsetSum([-1699, -1446, 1870, -9198, -6266, -8940, -9876, -5123], 4) == 1870\nassert solution.constrainedSubsetSum([-9395, 4844, 972, -9285, -4950], 4) == 5816\nassert solution.constrainedSubsetSum([-6292], 1) == -6292\nassert solution.constrainedSubsetSum([2433, -8135, -1767, 2148], 4) == 4581\nassert solution.constrainedSubsetSum([-5913, -4678, 2709, -5145, -3274, -3507, -847, -6170], 6) == 2709\nassert solution.constrainedSubsetSum([3674, 9832, -3083, 5883, -3062, 3872, 9978, -263], 2) == 33239\nassert solution.constrainedSubsetSum([1876, -8440, 5360, -2861], 2) == 7236\nassert solution.constrainedSubsetSum([-4092, 6970, -4347, 8254, 7917, 6602], 5) == 29743\nassert solution.constrainedSubsetSum([-6611, 1416, -7104, 7502, -2578], 3) == 8918\nassert solution.constrainedSubsetSum([6807], 1) == 6807\nassert solution.constrainedSubsetSum([8281, -936, -7090, -8104, 649, 5393, 9816], 4) == 24139\nassert solution.constrainedSubsetSum([-7920, 1231, 898, 6592], 4) == 8721\nassert solution.constrainedSubsetSum([2059, -9489], 2) == 2059\nassert solution.constrainedSubsetSum([7915, 4685, -4665, -5078, 7867, -6549, 9501, -5719, 2771, -7547], 5) == 32739\nassert solution.constrainedSubsetSum([3122, 5143, 9449, 5572, 4960], 4) == 28246\nassert solution.constrainedSubsetSum([-1299, -8766, -3460, 6910, -9290, -4182, -4985, 229, 9698, 1395], 7) == 18232\nassert solution.constrainedSubsetSum([5225, 5095, 8316, 8115, -8733, 8349, -211], 1) == 26751\nassert solution.constrainedSubsetSum([-8482, -7166, 6937, 4523, -6878], 1) == 11460\nassert solution.constrainedSubsetSum([-6533, 9354, 9201, -9044, -8620, 7778], 1) == 18555\nassert solution.constrainedSubsetSum([-7112, 6149, 5549, -4681, -4172, 6857, 2570, 9413, -3597, -8548], 10) == 30538\nassert solution.constrainedSubsetSum([-8074], 1) == -8074\nassert solution.constrainedSubsetSum([-3255, -2258, 5090, -4398, 4349, -8102], 4) == 9439\nassert solution.constrainedSubsetSum([-6670, -2345, -1884, 2062, 7285, -3064, 1462], 3) == 10809\nassert solution.constrainedSubsetSum([5099, -7309, -8569, 9638, 2855, -3426, 2829, -1022, -8571, 5601], 6) == 26022\nassert solution.constrainedSubsetSum([-5167, -6061, -7640, -9926, -2066, -3321, 1707, 9448, -2089, -6394], 2) == 11155\nassert solution.constrainedSubsetSum([-1187, 2860, -1915, -2686, -310, 7335, 9782, 6163, -285], 5) == 26140\nassert solution.constrainedSubsetSum([444, 2595, -4169, -3610, -1381, -7538, -3119], 5) == 3039\nassert solution.constrainedSubsetSum([4536, -2875, -7460, 9949, -7937, -8024, -2252, 2880, -5400, -1549], 4) == 17365\nassert solution.constrainedSubsetSum([1154, -5482, -1822, 899, -3917, 8434, 6893, 8237, -8760], 5) == 25617\nassert solution.constrainedSubsetSum([1112, -4369, -1493, 8842, -5000, 7099], 4) == 17053\nassert solution.constrainedSubsetSum([2758, -8606, -3737, 1737, 643, -6450, -4965], 5) == 5138\nassert solution.constrainedSubsetSum([-9186, -8960], 2) == -8960\nassert solution.constrainedSubsetSum([-6995], 1) == -6995\nassert solution.constrainedSubsetSum([-3793, 2587, -3954, 744, 6227, 4445], 4) == 14003\nassert solution.constrainedSubsetSum([-7535, 6142, -8189, 2367, -6412, 4579, 7978], 1) == 12557\nassert solution.constrainedSubsetSum([-9227, -8365], 1) == -8365\nassert solution.constrainedSubsetSum([9996, -9919, -9410, 5774, 8596, 1289, -874, -4009], 3) == 25655\nassert solution.constrainedSubsetSum([1921, -311], 1) == 1921\nassert solution.constrainedSubsetSum([567, 8006, 1886, 2884, -7919, -3327], 5) == 13343\nassert solution.constrainedSubsetSum([-7597, -3287], 2) == -3287\nassert solution.constrainedSubsetSum([1600, 6538, 9600], 3) == 17738",
  "inefficient_solution": "class Solution:\n    def constrainedSubsetSum(self, nums, k):\n        n = len(nums)\n        dp = [[0] * 1024 for _ in range(n)]\n        ans = float('-inf')\n        q = []\n        for i, v in enumerate(nums):\n            dp[i] = [0] * 1024\n            if q and i - q[0][0] > k:\n                q.remove(q[0])\n            dp[i][0] = max(0, 0 if not q or q[0][0] > i-k else dp[q[0][0]][0]) + v\n            while q and dp[q[-1][0]][0] <= dp[i][0]:\n                q.pop()\n            q.append([i, dp[i][0]])\n            for j in range(1, 1024):\n                dp[i][j] = dp[i][j-1]\n            ans = max(ans, dp[i][0])\n        return ans",
  "is_python": true
}