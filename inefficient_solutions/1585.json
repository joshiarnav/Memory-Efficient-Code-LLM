{
  "problem_idx": 1585,
  "task_name": "Check If String Is Transformable With Substring Sort Operations",
  "markdown_description": "\nGiven two strings `s` and `t`, transform string `s` into string `t` using the following operation any number of times:\n\n\n* Choose a **non-empty** substring in `s` and sort it in place so the characters are in **ascending order**.\n\t+ For example, applying the operation on the underlined substring in `\"14234\"` results in `\"12344\"`.\n\n\nReturn `true` if *it is possible to transform `s` into `t`*. Otherwise, return `false`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"84532\", t = \"34852\"\n**Output:** true\n**Explanation:** You can transform s into t using the following sort operations:\n\"84532\" (from index 2 to 3) -> \"84352\"\n\"84352\" (from index 0 to 2) -> \"34852\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"34521\", t = \"23415\"\n**Output:** true\n**Explanation:** You can transform s into t using the following sort operations:\n\"34521\" -> \"23451\"\n\"23451\" -> \"23415\"\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"12345\", t = \"12435\"\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `s.length == t.length`\n* `1 <= s.length <= 105`\n* `s` and `t` consist of only digits.\n\n\n",
  "canonical_solution": "class Solution:\n    def isTransformable(self, s: str, t: str) -> bool:\n        pos = defaultdict(deque)\n        for i, c in enumerate(s):\n            pos[int(c)].append(i)\n        for c in t:\n            x = int(c)\n            if not pos[x] or any(pos[i] and pos[i][0] < pos[x][0] for i in range(x)):\n                return False\n            pos[x].popleft()\n        return True\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isTransformable(self, s: str, t: str) -> bool:\n        pos = defaultdict(deque)\n        for i, c in enumerate(s):\n            pos[int(c)].append(i)\n        for c in t:\n            x = int(c)\n            if not pos[x] or any(pos[i] and pos[i][0] < pos[x][0] for i in range(x)):\n                return False\n            pos[x].popleft()\n        return True\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings s and t\n    s = ''.join([str(random.randint(0, 9)) for _ in range(random.randint(2, 10))])\n    t = ''.join([str(random.randint(0, 9)) for _ in range(len(s))])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isTransformable(s, t)\n\n    return s, t, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, t, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isTransformable(s, t) == expected_result\n        print(f\"assert solution.isTransformable('{s}', '{t}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isTransformable('{s}', '{t}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isTransformable('391610', '977057') == False\nassert solution.isTransformable('5504583429', '1616202139') == False\nassert solution.isTransformable('258911860', '732368042') == False\nassert solution.isTransformable('852557187', '653649080') == False\nassert solution.isTransformable('16486363', '66387255') == False\nassert solution.isTransformable('76', '33') == False\nassert solution.isTransformable('198', '308') == False\nassert solution.isTransformable('05', '66') == False\nassert solution.isTransformable('1854', '6861') == False\nassert solution.isTransformable('16548', '24829') == False\nassert solution.isTransformable('50782102', '71306412') == False\nassert solution.isTransformable('3751', '3035') == False\nassert solution.isTransformable('097801581', '865253978') == False\nassert solution.isTransformable('69926469', '66892785') == False\nassert solution.isTransformable('7418', '1256') == False\nassert solution.isTransformable('57', '12') == False\nassert solution.isTransformable('764669970', '083496520') == False\nassert solution.isTransformable('1371509877', '8751813591') == False\nassert solution.isTransformable('7172899825', '2587484579') == False\nassert solution.isTransformable('49384071', '98115276') == False\nassert solution.isTransformable('39', '24') == False\nassert solution.isTransformable('98', '40') == False\nassert solution.isTransformable('16', '81') == False\nassert solution.isTransformable('18', '73') == False\nassert solution.isTransformable('390', '699') == False\nassert solution.isTransformable('2015', '1250') == False\nassert solution.isTransformable('238330388', '619330390') == False\nassert solution.isTransformable('73382180', '61457637') == False\nassert solution.isTransformable('835126', '860478') == False\nassert solution.isTransformable('8879', '3510') == False\nassert solution.isTransformable('5047493', '4231123') == False\nassert solution.isTransformable('42372949', '92099277') == False\nassert solution.isTransformable('9073949789', '8203957596') == False\nassert solution.isTransformable('6611318646', '5871318062') == False\nassert solution.isTransformable('270224', '848388') == False\nassert solution.isTransformable('98499', '87200') == False\nassert solution.isTransformable('584186', '192703') == False\nassert solution.isTransformable('330', '120') == False\nassert solution.isTransformable('617327682', '778663400') == False\nassert solution.isTransformable('50258', '02245') == False\nassert solution.isTransformable('1165674263', '9222173852') == False\nassert solution.isTransformable('392', '152') == False\nassert solution.isTransformable('1347', '7739') == False\nassert solution.isTransformable('466311640', '552750572') == False\nassert solution.isTransformable('64682', '18662') == False\nassert solution.isTransformable('3526', '2570') == False\nassert solution.isTransformable('5277', '7842') == False\nassert solution.isTransformable('7144', '0399') == False\nassert solution.isTransformable('72171291', '76953016') == False\nassert solution.isTransformable('679816', '633105') == False\nassert solution.isTransformable('578349830', '574958598') == False\nassert solution.isTransformable('5893', '0252') == False\nassert solution.isTransformable('069870474', '159930636') == False\nassert solution.isTransformable('84', '96') == False\nassert solution.isTransformable('79823', '30573') == False\nassert solution.isTransformable('891516', '531119') == False\nassert solution.isTransformable('3675', '0728') == False\nassert solution.isTransformable('022568860', '905586411') == False\nassert solution.isTransformable('0807967', '3690624') == False\nassert solution.isTransformable('3768', '2795') == False\nassert solution.isTransformable('915040270', '045535035') == False\nassert solution.isTransformable('660162', '088643') == False\nassert solution.isTransformable('24355603', '70718944') == False\nassert solution.isTransformable('76124', '92208') == False\nassert solution.isTransformable('36743150', '74007448') == False\nassert solution.isTransformable('29', '37') == False\nassert solution.isTransformable('523666968', '643482755') == False\nassert solution.isTransformable('929532', '664996') == False\nassert solution.isTransformable('13654', '40818') == False\nassert solution.isTransformable('75', '10') == False\nassert solution.isTransformable('52', '30') == False\nassert solution.isTransformable('487', '628') == False\nassert solution.isTransformable('0043', '8936') == False\nassert solution.isTransformable('8436261', '3850054') == False\nassert solution.isTransformable('5783098', '6757885') == False\nassert solution.isTransformable('1866', '3681') == False\nassert solution.isTransformable('29305', '27120') == False\nassert solution.isTransformable('158258127', '842246664') == False\nassert solution.isTransformable('22203711', '57491738') == False\nassert solution.isTransformable('34', '21') == False\nassert solution.isTransformable('5089761', '1763986') == False\nassert solution.isTransformable('7094', '4392') == False\nassert solution.isTransformable('69414595', '86715007') == False\nassert solution.isTransformable('80463', '76710') == False\nassert solution.isTransformable('8999632925', '7671120124') == False\nassert solution.isTransformable('869', '560') == False\nassert solution.isTransformable('0400134', '8481983') == False\nassert solution.isTransformable('84642', '97735') == False\nassert solution.isTransformable('41881641', '01096959') == False\nassert solution.isTransformable('543', '233') == False\nassert solution.isTransformable('71115', '25885') == False\nassert solution.isTransformable('02', '71') == False\nassert solution.isTransformable('507523188', '064158297') == False\nassert solution.isTransformable('75688', '19630') == False\nassert solution.isTransformable('460754871', '293237692') == False\nassert solution.isTransformable('050638', '034437') == False\nassert solution.isTransformable('151851', '007752') == False\nassert solution.isTransformable('80760999', '47349663') == False\nassert solution.isTransformable('36527261', '82028216') == False\nassert solution.isTransformable('0722039', '9799885') == False",
  "inefficient_solution": "class Solution:\n    def isTransformable(self, s: str, t: str) -> bool:\n        s_list = list(s)\n        for i in range(len(s)):\n            s_list[i] = int(s_list[i])\n        t_list = list(t)\n        for i in range(len(t)):\n            t_list[i] = int(t_list[i])\n\n        for _ in range(len(s)):\n            for i in range(len(s)):\n                for j in range(i+1, len(s)):\n                    if s_list[i] > s_list[j]:\n                        s_list[i], s_list[j] = s_list[j], s_list[i]\n            if ''.join(map(str, s_list)) == ''.join(map(str, t_list)):\n                return True\n            s_list = s_list[:]\n        return False",
  "is_python": true
}