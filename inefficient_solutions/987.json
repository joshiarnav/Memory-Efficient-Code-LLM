{
  "problem_idx": 987,
  "task_name": "Vertical Order Traversal of a Binary Tree",
  "markdown_description": "\nGiven the `root` of a binary tree, calculate the **vertical order traversal** of the binary tree.\n\n\nFor each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`.\n\n\nThe **vertical order traversal** of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\n\n\nReturn *the **vertical order traversal** of the binary tree*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0987.Vertical%20Order%20Traversal%20of%20a%20Binary%20Tree/images/vtree1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** [[9],[3,15],[20],[7]]\n**Explanation:**\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0987.Vertical%20Order%20Traversal%20of%20a%20Binary%20Tree/images/vtree2.jpg)\n\n```\n\n**Input:** root = [1,2,3,4,5,6,7]\n**Output:** [[4],[2],[1,5,6],[3],[7]]\n**Explanation:**\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0987.Vertical%20Order%20Traversal%20of%20a%20Binary%20Tree/images/vtree3.jpg)\n\n```\n\n**Input:** root = [1,2,3,4,6,5,7]\n**Output:** [[4],[2],[1,5,6],[3],[7]]\n**Explanation:**\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 1000]`.\n* `0 <= Node.val <= 1000`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:\n        def dfs(root, i, j):\n            if root is None:\n                return\n            nodes.append((i, j, root.val))\n            dfs(root.left, i + 1, j - 1)\n            dfs(root.right, i + 1, j + 1)\n\n        nodes = []\n        dfs(root, 0, 0)\n        nodes.sort(key=lambda x: (x[1], x[0], x[2]))\n        ans = []\n        prev = -2000\n        for i, j, v in nodes:\n            if prev != j:\n                ans.append([])\n                prev = j\n            ans[-1].append(v)\n        return ans\n",
  "test_case_generator": "\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a binary tree\n    def generate_binary_tree(node, depth, max_depth):\n        if depth >= max_depth or random.randint(0, 1) == 0:\n            return\n        node.left = TreeNode(random.randint(0, 1000))\n        node.right = TreeNode(random.randint(0, 1000))\n        generate_binary_tree(node.left, depth + 1, max_depth)\n        generate_binary_tree(node.right, depth + 1, max_depth)\n\n    root = TreeNode(random.randint(0, 1000))\n    generate_binary_tree(root, 0, random.randint(1, 5))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.verticalTraversal(root)\n\n    return root, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.verticalTraversal(root) == expected_result\n        print(f\"assert solution.verticalTraversal({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.verticalTraversal({root}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30d50>) == [[641]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30dd0>) == [[592, 555], [146, 731], [553, 792, 577], [544, 345]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b31650>) == [[646]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30e50>) == [[822], [253, 516], [848, 370], [289], [275]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b31710>) == [[355], [111], [199]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30ed0>) == [[778, 231, 405], [178, 560, 91], [637, 778, 20, 476], [600, 421], [801]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32250>) == [[866]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30ed0>) == [[364], [552], [31]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b31ed0>) == [[404]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32250>) == [[847]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30e50>) == [[209]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b318d0>) == [[579]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32410>) == [[595]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32550>) == [[714]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b326d0>) == [[47]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32850>) == [[755]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b329d0>) == [[555], [811, 427], [159], [246]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33110>) == [[586], [721], [74]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32a90>) == [[36], [492], [409, 312, 717], [753], [481]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33ad0>) == [[878], [234, 363], [222], [593]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33350>) == [[592], [737, 895], [174, 157], [701], [543]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b34390>) == [[289], [785], [833, 205, 884], [657, 226, 781], [91, 44, 375, 552], [493, 511], [741]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b35150>) == [[966, 159], [946, 371], [127, 133, 564, 205, 609, 901], [505, 91, 820, 521, 913], [819, 724, 152, 384, 508], [264, 326], [364]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b36290>) == [[713]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b35f10>) == [[18]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b34dd0>) == [[667], [482], [662]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b36290>) == [[107]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b351d0>) == [[621], [375], [290]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b35650>) == [[122], [777], [465]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b35350>) == [[237], [653], [24]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b363d0>) == [[982]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b35310>) == [[465], [791, 197], [116], [114]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b36ad0>) == [[346], [262, 193], [376], [716]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b36ed0>) == [[907], [717], [230]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b36bd0>) == [[0, 168], [35, 16], [187, 252, 475, 609], [501, 844], [350]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b37bd0>) == [[239], [898], [862]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b36ed0>) == [[236]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b37c50>) == [[143], [254], [985]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33ed0>) == [[41]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33c10>) == [[440]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33810>) == [[382]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33110>) == [[921], [907], [417]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33c10>) == [[660]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b334d0>) == [[763, 630], [889, 409], [662, 101, 360, 565], [404, 922], [549, 367, 840], [498], [270]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33810>) == [[648]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33ed0>) == [[207], [517], [775]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b334d0>) == [[704], [840], [901, 712], [56, 756, 954], [718], [554]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33810>) == [[820], [840], [608, 192, 971, 987], [957, 347, 638], [966, 169, 314, 517], [772], [70]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33ed0>) == [[283]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33c10>) == [[876], [611], [89]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33810>) == [[512]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30dd0>) == [[268, 235], [695, 192], [442, 297], [607]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b37290>) == [[743], [643], [223, 512, 609], [978], [333]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30e90>) == [[579], [922], [904]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30dd0>) == [[514], [974], [420]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b334d0>) == [[762]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33ed0>) == [[957]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30e90>) == [[279], [595, 46], [84], [439]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b37290>) == [[611], [207, 400, 659], [634, 233], [344, 76, 779], [81], [11]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b326d0>) == [[229], [261], [573]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30e90>) == [[60], [762, 753], [568], [653]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33110>) == [[3], [137], [756]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b326d0>) == [[936]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32c50>) == [[291], [519], [247]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33110>) == [[725]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b329d0>) == [[449]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b326d0>) == [[550, 77], [574, 887], [602, 983, 552], [948, 814]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32c50>) == [[78, 988], [16, 817], [899, 358, 434], [183], [755]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30e90>) == [[482], [849, 463], [956], [95]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b37b90>) == [[7]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33110>) == [[90]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b30dd0>) == [[765], [415, 561], [896], [779]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b35350>) == [[935]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b329d0>) == [[872]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b35350>) == [[804], [707], [2, 109, 587], [16, 35, 72, 263], [464, 799, 932, 33, 764], [447, 218, 434, 641], [1, 373], [616]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b412d0>) == [[277]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b36bd0>) == [[378]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b37ed0>) == [[722], [218], [321, 535], [738]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b35350>) == [[334], [754], [539]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b37f90>) == [[449], [457], [650, 116], [151]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b41690>) == [[408], [898, 800], [319, 536], [147], [317]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b41d50>) == [[477]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b41690>) == [[253, 28], [838, 858], [420, 665, 102], [892, 190, 333], [731]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b42750>) == [[20, 396], [644, 89, 245], [238, 901, 984, 175], [725, 296, 300, 325, 305], [828, 153], [665, 207], [215]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b43650>) == [[925], [506], [728]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b42390>) == [[91], [774], [991]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b433d0>) == [[495]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b42810>) == [[357]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b43650>) == [[226], [96], [177]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b42910>) == [[29], [719], [735, 231, 570, 908], [330, 450, 483, 562], [542, 300, 318, 152, 800, 835], [977, 224, 793], [273, 457]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b326d0>) == [[340, 456], [754, 528], [769, 962, 185], [246, 356]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32c50>) == [[534], [918], [962]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b329d0>) == [[521], [959], [86]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b326d0>) == [[275]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33c10>) == [[456]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b32c50>) == [[192]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b329d0>) == [[617]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b326d0>) == [[301]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b33c10>) == [[632], [42, 103, 376], [306, 842, 945, 427, 579], [401, 673, 870, 907], [444, 712, 331, 478]]\nassert solution.verticalTraversal(<__main__.TreeNode object at 0x7f2331b329d0>) == [[299, 562], [348, 185], [445, 135, 393], [607], [93]]",
  "inefficient_solution": "",
  "is_python": true
}