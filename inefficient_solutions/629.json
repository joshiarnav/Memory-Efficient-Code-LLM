{
  "problem_idx": 629,
  "task_name": "K Inverse Pairs Array",
  "markdown_description": "\nFor an integer array `nums`, an **inverse pair** is a pair of integers `[i, j]` where `0 <= i < j < nums.length` and `nums[i] > nums[j]`.\n\n\nGiven two integers n and k, return the number of different arrays consist of numbers from `1` to `n` such that there are exactly `k` **inverse pairs**. Since the answer can be huge, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, k = 0\n**Output:** 1\n**Explanation:** Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, k = 1\n**Output:** 2\n**Explanation:** The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n* `0 <= k <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def kInversePairs(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [1] + [0] * k\n        s = [0] * (k + 2)\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                f[j] = (s[j + 1] - s[max(0, j - (i - 1))]) % mod\n            for j in range(1, k + 2):\n                s[j] = (s[j - 1] + f[j - 1]) % mod\n        return f[k]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def kInversePairs(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [1] + [0] * k\n        s = [0] * (k + 2)\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                f[j] = (s[j + 1] - s[max(0, j - (i - 1))]) % mod\n            for j in range(1, k + 2):\n                s[j] = (s[j - 1] + f[j - 1]) % mod\n        return f[k]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n and k\n    n = random.randint(1, 11)\n    k = random.randint(0, 6)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.kInversePairs(n, k)\n\n    return n, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.kInversePairs(n, k) == expected_result\n        print(f\"assert solution.kInversePairs({n}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.kInversePairs({n}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.kInversePairs(1, 2) == 0\nassert solution.kInversePairs(1, 0) == 1\nassert solution.kInversePairs(2, 2) == 0\nassert solution.kInversePairs(2, 2) == 0\nassert solution.kInversePairs(4, 3) == 6\nassert solution.kInversePairs(2, 0) == 1\nassert solution.kInversePairs(1, 3) == 0\nassert solution.kInversePairs(8, 2) == 27\nassert solution.kInversePairs(8, 2) == 27\nassert solution.kInversePairs(8, 5) == 343\nassert solution.kInversePairs(10, 5) == 1068\nassert solution.kInversePairs(3, 2) == 2\nassert solution.kInversePairs(4, 6) == 1\nassert solution.kInversePairs(5, 6) == 20\nassert solution.kInversePairs(9, 6) == 1230\nassert solution.kInversePairs(5, 1) == 4\nassert solution.kInversePairs(10, 5) == 1068\nassert solution.kInversePairs(10, 4) == 440\nassert solution.kInversePairs(5, 0) == 1\nassert solution.kInversePairs(10, 6) == 2298\nassert solution.kInversePairs(8, 6) == 602\nassert solution.kInversePairs(4, 4) == 5\nassert solution.kInversePairs(2, 2) == 0\nassert solution.kInversePairs(2, 0) == 1\nassert solution.kInversePairs(10, 3) == 155\nassert solution.kInversePairs(10, 5) == 1068\nassert solution.kInversePairs(9, 1) == 8\nassert solution.kInversePairs(6, 2) == 14\nassert solution.kInversePairs(8, 6) == 602\nassert solution.kInversePairs(11, 5) == 1717\nassert solution.kInversePairs(1, 4) == 0\nassert solution.kInversePairs(2, 0) == 1\nassert solution.kInversePairs(9, 5) == 628\nassert solution.kInversePairs(5, 4) == 20\nassert solution.kInversePairs(5, 1) == 4\nassert solution.kInversePairs(2, 0) == 1\nassert solution.kInversePairs(8, 6) == 602\nassert solution.kInversePairs(9, 0) == 1\nassert solution.kInversePairs(11, 4) == 649\nassert solution.kInversePairs(11, 3) == 209\nassert solution.kInversePairs(6, 2) == 14\nassert solution.kInversePairs(11, 3) == 209\nassert solution.kInversePairs(7, 5) == 169\nassert solution.kInversePairs(1, 2) == 0\nassert solution.kInversePairs(1, 6) == 0\nassert solution.kInversePairs(7, 0) == 1\nassert solution.kInversePairs(6, 4) == 49\nassert solution.kInversePairs(10, 1) == 9\nassert solution.kInversePairs(5, 2) == 9\nassert solution.kInversePairs(3, 6) == 0\nassert solution.kInversePairs(10, 1) == 9\nassert solution.kInversePairs(1, 5) == 0\nassert solution.kInversePairs(9, 6) == 1230\nassert solution.kInversePairs(5, 5) == 22\nassert solution.kInversePairs(10, 0) == 1\nassert solution.kInversePairs(2, 0) == 1\nassert solution.kInversePairs(7, 3) == 49\nassert solution.kInversePairs(4, 1) == 3\nassert solution.kInversePairs(1, 6) == 0\nassert solution.kInversePairs(9, 2) == 35\nassert solution.kInversePairs(3, 5) == 0\nassert solution.kInversePairs(10, 3) == 155\nassert solution.kInversePairs(11, 1) == 10\nassert solution.kInversePairs(10, 5) == 1068\nassert solution.kInversePairs(10, 0) == 1\nassert solution.kInversePairs(2, 4) == 0\nassert solution.kInversePairs(8, 2) == 27\nassert solution.kInversePairs(1, 2) == 0\nassert solution.kInversePairs(9, 5) == 628\nassert solution.kInversePairs(1, 3) == 0\nassert solution.kInversePairs(4, 5) == 3\nassert solution.kInversePairs(10, 3) == 155\nassert solution.kInversePairs(6, 3) == 29\nassert solution.kInversePairs(10, 0) == 1\nassert solution.kInversePairs(3, 0) == 1\nassert solution.kInversePairs(10, 4) == 440\nassert solution.kInversePairs(4, 3) == 6\nassert solution.kInversePairs(5, 6) == 20\nassert solution.kInversePairs(8, 1) == 7\nassert solution.kInversePairs(2, 4) == 0\nassert solution.kInversePairs(7, 6) == 259\nassert solution.kInversePairs(1, 4) == 0\nassert solution.kInversePairs(7, 2) == 20\nassert solution.kInversePairs(4, 6) == 1\nassert solution.kInversePairs(4, 5) == 3\nassert solution.kInversePairs(11, 5) == 1717\nassert solution.kInversePairs(4, 5) == 3\nassert solution.kInversePairs(9, 3) == 111\nassert solution.kInversePairs(2, 1) == 1\nassert solution.kInversePairs(3, 5) == 0\nassert solution.kInversePairs(8, 0) == 1\nassert solution.kInversePairs(5, 4) == 20\nassert solution.kInversePairs(10, 6) == 2298\nassert solution.kInversePairs(8, 4) == 174\nassert solution.kInversePairs(5, 5) == 22\nassert solution.kInversePairs(2, 1) == 1\nassert solution.kInversePairs(9, 0) == 1\nassert solution.kInversePairs(9, 3) == 111\nassert solution.kInversePairs(5, 3) == 15\nassert solution.kInversePairs(9, 3) == 111",
  "inefficient_solution": "class Solution:\n    def kInversePairs(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [[0]*1001 for _ in range(1001)]  # Initialize a 2000x2000 table\n        s = [[0]*1002 for _ in range(1002)]  # Initialize an 2000x2000 table\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                f[i][j] = (s[i][j + 1] - s[max(0, j - (i - 1))]) % mod\n            for j in range(1, k + 2):\n                s[i][j] = (s[i-1][j] + f[i][j - 1]) % mod\n        return f[n][k]",
  "is_python": true
}