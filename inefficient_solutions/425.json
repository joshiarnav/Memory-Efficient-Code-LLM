{
  "problem_idx": 425,
  "task_name": "Word Squares",
  "markdown_description": "\nGiven an array of **unique** strings `words`, return *all the* **[word squares](https://en.wikipedia.org/wiki/Word_square)** *you can build from* `words`. The same word from `words` can be used **multiple times**. You can return the answer in **any order**.\n\n\nA sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.\n\n\n* For example, the word sequence `[\"ball\",\"area\",\"lead\",\"lady\"]` forms a word square because each word reads the same both horizontally and vertically.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\n**Output:** [[\"ball\",\"area\",\"lead\",\"lady\"],[\"wall\",\"area\",\"lead\",\"lady\"]]\n**Explanation:**\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"abat\",\"baba\",\"atan\",\"atal\"]\n**Output:** [[\"baba\",\"abat\",\"baba\",\"atal\"],[\"baba\",\"abat\",\"baba\",\"atan\"]]\n**Explanation:**\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 1000`\n* `1 <= words[i].length <= 4`\n* All `words[i]` have the same length.\n* `words[i]` consists of only lowercase English letters.\n* All `words[i]` are **unique**.\n\n\n",
  "canonical_solution": "class Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.v = []\n\n    def insert(self, w, i):\n        node = self\n        for c in w:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n            node.v.append(i)\n\n    def search(self, w):\n        node = self\n        for c in w:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                return []\n            node = node.children[idx]\n        return node.v\n\n\nclass Solution:\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        def dfs(t):\n            if len(t) == len(words[0]):\n                ans.append(t[:])\n                return\n            idx = len(t)\n            pref = [v[idx] for v in t]\n            indexes = trie.search(''.join(pref))\n            for i in indexes:\n                t.append(words[i])\n                dfs(t)\n                t.pop()\n\n        trie = Trie()\n        ans = []\n        for i, w in enumerate(words):\n            trie.insert(w, i)\n        for w in words:\n            dfs([w])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.v = []\n\n    def insert(self, w, i):\n        node = self\n        for c in w:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n            node.v.append(i)\n\n    def search(self, w):\n        node = self\n        for c in w:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                return []\n            node = node.children[idx]\n        return node.v\n\n\nclass Solution:\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        def dfs(t):\n            if len(t) == len(words[0]):\n                ans.append(t[:])\n                return\n            idx = len(t)\n            pref = [v[idx] for v in t]\n            indexes = trie.search(''.join(pref))\n            for i in indexes:\n                t.append(words[i])\n                dfs(t)\n                t.pop()\n\n        trie = Trie()\n        ans = []\n        for i, w in enumerate(words):\n            trie.insert(w, i)\n        for w in words:\n            dfs([w])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random words list\n    words = random.sample(['area', 'lead', 'wall', 'lady', 'ball'], random.randint(2, 5))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.wordSquares(words)\n\n    return words, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.wordSquares(words) == expected_result\n        print(f\"assert solution.wordSquares({words}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.wordSquares({words}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.wordSquares(['lead', 'lady', 'ball', 'area', 'wall']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lady', 'wall', 'lead', 'ball']) == []\nassert solution.wordSquares(['lead', 'lady', 'area', 'ball']) == [['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'lady', 'area']) == []\nassert solution.wordSquares(['wall', 'area', 'lady', 'lead', 'ball']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'lady', 'lead']) == []\nassert solution.wordSquares(['area', 'lady']) == []\nassert solution.wordSquares(['area', 'ball', 'lady']) == []\nassert solution.wordSquares(['lady', 'wall']) == []\nassert solution.wordSquares(['wall', 'ball', 'lead', 'area']) == []\nassert solution.wordSquares(['lady', 'lead', 'ball']) == []\nassert solution.wordSquares(['lady', 'lead']) == []\nassert solution.wordSquares(['ball', 'lead', 'area', 'wall']) == []\nassert solution.wordSquares(['ball', 'lady', 'area', 'wall', 'lead']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['wall', 'ball', 'area', 'lead']) == []\nassert solution.wordSquares(['lead', 'area', 'lady', 'wall']) == [['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'wall']) == []\nassert solution.wordSquares(['lead', 'wall']) == []\nassert solution.wordSquares(['lead', 'area']) == []\nassert solution.wordSquares(['lady', 'lead', 'area', 'ball']) == [['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'area', 'lady']) == []\nassert solution.wordSquares(['lead', 'lady', 'wall', 'ball', 'area']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['wall', 'lead', 'lady']) == []\nassert solution.wordSquares(['ball', 'lead']) == []\nassert solution.wordSquares(['area', 'lead']) == []\nassert solution.wordSquares(['lead', 'ball', 'lady', 'wall', 'area']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['area', 'ball', 'lady']) == []\nassert solution.wordSquares(['ball', 'lead', 'area']) == []\nassert solution.wordSquares(['lead', 'area', 'lady', 'ball', 'wall']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'lead', 'lady']) == []\nassert solution.wordSquares(['area', 'lead']) == []\nassert solution.wordSquares(['ball', 'lead', 'area']) == []\nassert solution.wordSquares(['area', 'lady']) == []\nassert solution.wordSquares(['lady', 'wall', 'lead']) == []\nassert solution.wordSquares(['lady', 'ball', 'wall']) == []\nassert solution.wordSquares(['area', 'lady', 'ball']) == []\nassert solution.wordSquares(['ball', 'wall', 'lady', 'area']) == []\nassert solution.wordSquares(['lead', 'wall', 'ball', 'lady']) == []\nassert solution.wordSquares(['area', 'lead', 'ball', 'lady', 'wall']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'area', 'ball', 'lady']) == [['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['wall', 'ball']) == []\nassert solution.wordSquares(['lead', 'lady', 'area']) == []\nassert solution.wordSquares(['ball', 'wall', 'lead', 'area', 'lady']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'wall', 'area', 'lead', 'lady']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lady', 'lead', 'area']) == []\nassert solution.wordSquares(['lead', 'area', 'wall']) == []\nassert solution.wordSquares(['lady', 'area', 'lead', 'wall']) == [['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'area', 'lead', 'wall']) == []\nassert solution.wordSquares(['ball', 'lady', 'lead', 'wall']) == []\nassert solution.wordSquares(['lady', 'area', 'lead', 'wall', 'ball']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'area', 'ball', 'lady']) == [['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['wall', 'area', 'lead']) == []\nassert solution.wordSquares(['area', 'ball', 'lady', 'lead', 'wall']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lady', 'lead', 'area', 'wall', 'ball']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['area', 'lady']) == []\nassert solution.wordSquares(['lady', 'ball']) == []\nassert solution.wordSquares(['ball', 'lady', 'area', 'lead']) == [['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'lead', 'wall', 'area', 'lady']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['wall', 'ball', 'lead', 'lady']) == []\nassert solution.wordSquares(['lead', 'area', 'ball', 'wall', 'lady']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['area', 'lady']) == []\nassert solution.wordSquares(['lead', 'area', 'wall', 'ball']) == []\nassert solution.wordSquares(['lead', 'lady']) == []\nassert solution.wordSquares(['ball', 'lady', 'area', 'lead', 'wall']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'lady']) == []\nassert solution.wordSquares(['lead', 'ball', 'wall']) == []\nassert solution.wordSquares(['lady', 'area', 'wall']) == []\nassert solution.wordSquares(['wall', 'area', 'lady', 'lead']) == [['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['wall', 'ball', 'area']) == []\nassert solution.wordSquares(['wall', 'ball', 'lead', 'lady', 'area']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'area', 'ball', 'wall', 'lady']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['area', 'wall', 'lead', 'ball']) == []\nassert solution.wordSquares(['lead', 'wall', 'area', 'ball']) == []\nassert solution.wordSquares(['wall', 'area', 'ball', 'lady', 'lead']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['wall', 'lady', 'ball', 'lead', 'area']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'area', 'lady', 'lead', 'wall']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'lady', 'area', 'wall']) == []\nassert solution.wordSquares(['area', 'wall', 'ball', 'lead']) == []\nassert solution.wordSquares(['area', 'lead', 'wall', 'ball']) == []\nassert solution.wordSquares(['wall', 'area', 'lead']) == []\nassert solution.wordSquares(['wall', 'area', 'lead']) == []\nassert solution.wordSquares(['ball', 'wall', 'lead', 'lady']) == []\nassert solution.wordSquares(['area', 'wall']) == []\nassert solution.wordSquares(['ball', 'wall', 'area', 'lady', 'lead']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lady', 'area', 'lead', 'ball', 'wall']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['wall', 'ball', 'lady', 'lead']) == []\nassert solution.wordSquares(['wall', 'lead', 'area', 'ball', 'lady']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'wall', 'lady']) == []\nassert solution.wordSquares(['area', 'wall', 'lead', 'lady', 'ball']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'ball', 'area', 'wall']) == []\nassert solution.wordSquares(['wall', 'lead', 'lady', 'area', 'ball']) == [['wall', 'area', 'lead', 'lady'], ['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['ball', 'wall', 'lady', 'lead', 'area']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['area', 'ball', 'lady', 'wall']) == []\nassert solution.wordSquares(['lead', 'area', 'wall']) == []\nassert solution.wordSquares(['ball', 'lady', 'lead', 'area']) == [['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'ball']) == []\nassert solution.wordSquares(['lady', 'ball', 'area', 'wall']) == []\nassert solution.wordSquares(['lead', 'area', 'ball', 'lady']) == [['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'area', 'lady', 'ball']) == [['ball', 'area', 'lead', 'lady']]\nassert solution.wordSquares(['lead', 'ball', 'wall', 'lady', 'area']) == [['ball', 'area', 'lead', 'lady'], ['wall', 'area', 'lead', 'lady']]",
  "inefficient_solution": "import copy\nimport itertools\n\nclass Solution:\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        def dfs(t):\n            if len(t) == len(words[0]):\n                ans.append(copy.deepcopy(t))\n                return\n            idx = len(t)\n            pref = [v[idx] for v in t]\n            for w in words:\n                if w[:idx] == ''.join(pref):\n                    t.append(copy.deepcopy(w))\n                    dfs(t)\n                    t.pop()\n\n        ans = []\n        for i in range(len(words)):\n            for j in range(i+1, len(words)):\n                for k in range(j+1, len(words)):\n                    for last in range(k+1, len(words)):\n                        square = [words[i], words[j], words[k], words[last]]\n                        dfs(square)\n        return ans",
  "is_python": true
}