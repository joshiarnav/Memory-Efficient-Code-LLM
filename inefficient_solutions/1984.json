{
  "problem_idx": 1984,
  "task_name": "Minimum Difference Between Highest and Lowest of K Scores",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`, where `nums[i]` represents the score of the `ith` student. You are also given an integer `k`.\n\n\nPick the scores of any `k` students from the array so that the **difference** between the **highest** and the **lowest** of the `k` scores is **minimized**.\n\n\nReturn *the **minimum** possible difference*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [90], k = 1\n**Output:** 0\n**Explanation:** There is one way to pick score(s) of one student:\n- [**90**]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [9,4,1,7], k = 2\n**Output:** 2\n**Explanation:** There are six ways to pick score(s) of two students:\n- [**9**,**4**,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.\n- [**9**,4,**1**,7]. The difference between the highest and lowest score is 9 - 1 = 8.\n- [**9**,4,1,**7**]. The difference between the highest and lowest score is 9 - 7 = 2.\n- [9,**4**,**1**,7]. The difference between the highest and lowest score is 4 - 1 = 3.\n- [9,**4**,1,**7**]. The difference between the highest and lowest score is 7 - 4 = 3.\n- [9,4,**1**,**7**]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 1000`\n* `0 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        return min(nums[i + k - 1] - nums[i] for i in range(len(nums) - k + 1))\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        return min(nums[i + k - 1] - nums[i] for i in range(len(nums) - k + 1))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumDifference(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumDifference(nums, k) == expected_result\n        print(f\"assert solution.minimumDifference({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumDifference({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumDifference([3, 18, 40, 62, 66, 85], 2) == 4\nassert solution.minimumDifference([52, 85, 93, 98], 4) == 46\nassert solution.minimumDifference([1, 5, 6, 7, 11, 26, 34, 40, 61, 75], 9) == 60\nassert solution.minimumDifference([6, 18, 27, 31, 65, 71, 76], 6) == 58\nassert solution.minimumDifference([22, 35, 52], 2) == 13\nassert solution.minimumDifference([6, 19, 27, 28, 54, 66, 81, 96], 5) == 47\nassert solution.minimumDifference([22, 24, 34, 62, 71], 4) == 40\nassert solution.minimumDifference([52, 53, 64], 2) == 1\nassert solution.minimumDifference([6, 11, 18, 25, 26, 33, 39, 49, 91], 2) == 1\nassert solution.minimumDifference([15, 37], 1) == 0\nassert solution.minimumDifference([25, 31, 32, 90, 95], 3) == 7\nassert solution.minimumDifference([2, 14, 24, 31, 32, 40, 42, 56, 58, 80], 8) == 44\nassert solution.minimumDifference([30, 31, 33, 38, 48, 50, 68, 74], 1) == 0\nassert solution.minimumDifference([37, 73, 97], 2) == 24\nassert solution.minimumDifference([33, 84], 1) == 0\nassert solution.minimumDifference([11, 14, 37, 38, 57, 63, 70, 79, 98], 4) == 22\nassert solution.minimumDifference([15, 39, 47, 72], 3) == 32\nassert solution.minimumDifference([47, 48, 59, 65, 81, 85, 91], 2) == 1\nassert solution.minimumDifference([1, 6, 12, 21, 25, 26, 71, 89, 97], 3) == 5\nassert solution.minimumDifference([17, 44, 90], 3) == 73\nassert solution.minimumDifference([12, 25, 31, 36, 39, 62, 67, 73, 95], 3) == 8\nassert solution.minimumDifference([12, 17, 43], 1) == 0\nassert solution.minimumDifference([35, 55, 59], 2) == 4\nassert solution.minimumDifference([16, 19, 20, 23, 32, 44, 69], 3) == 4\nassert solution.minimumDifference([53, 73, 86], 2) == 13\nassert solution.minimumDifference([6, 7, 9, 14, 44, 52, 59, 71, 75, 96], 1) == 0\nassert solution.minimumDifference([23, 28, 57, 66, 88, 91, 95], 5) == 38\nassert solution.minimumDifference([4, 12, 25, 44, 71, 78, 93], 1) == 0\nassert solution.minimumDifference([13, 52, 54, 55, 61, 63, 66, 81], 6) == 14\nassert solution.minimumDifference([4, 19, 27, 38, 51, 62, 68, 75, 85], 6) == 47\nassert solution.minimumDifference([4, 32, 44, 54, 89], 1) == 0\nassert solution.minimumDifference([13, 16, 18, 19, 22, 39, 40, 74, 81, 84], 2) == 1\nassert solution.minimumDifference([4, 5, 41, 72], 1) == 0\nassert solution.minimumDifference([21, 38, 54, 59, 87, 90], 4) == 36\nassert solution.minimumDifference([17, 30, 36, 37, 92], 1) == 0\nassert solution.minimumDifference([24, 85, 86], 3) == 62\nassert solution.minimumDifference([7, 39], 2) == 32\nassert solution.minimumDifference([17, 49, 94], 3) == 77\nassert solution.minimumDifference([21, 40, 45, 51, 67, 100], 5) == 46\nassert solution.minimumDifference([31, 76, 87, 95], 4) == 64\nassert solution.minimumDifference([32, 87, 98], 1) == 0\nassert solution.minimumDifference([40, 45, 59, 63, 68], 5) == 28\nassert solution.minimumDifference([4, 11, 39, 41, 53, 74], 3) == 14\nassert solution.minimumDifference([5, 54, 57, 60, 71], 2) == 3\nassert solution.minimumDifference([16, 42, 44, 67], 4) == 51\nassert solution.minimumDifference([19, 61], 1) == 0\nassert solution.minimumDifference([17, 40, 62, 67, 75, 84, 99], 1) == 0\nassert solution.minimumDifference([37, 42, 48, 54, 82, 84], 4) == 17\nassert solution.minimumDifference([17, 25, 39, 46, 59, 66, 83, 85, 97], 4) == 26\nassert solution.minimumDifference([32, 45, 56, 58, 63, 80, 87, 89, 91], 1) == 0\nassert solution.minimumDifference([67, 75], 1) == 0\nassert solution.minimumDifference([11, 63, 89], 3) == 78\nassert solution.minimumDifference([6, 18, 25, 38, 43, 51, 60, 88], 2) == 5\nassert solution.minimumDifference([18, 21, 29, 73, 74, 80, 90], 2) == 1\nassert solution.minimumDifference([4, 12, 18, 32, 48, 59, 65, 72, 84], 8) == 68\nassert solution.minimumDifference([40, 57, 87], 1) == 0\nassert solution.minimumDifference([3, 12, 48, 63, 95], 2) == 9\nassert solution.minimumDifference([29, 47], 2) == 18\nassert solution.minimumDifference([30, 52, 89], 2) == 22\nassert solution.minimumDifference([18, 37, 69], 3) == 51\nassert solution.minimumDifference([19, 32, 52, 61, 91, 95], 4) == 42\nassert solution.minimumDifference([70, 83, 91, 97], 2) == 6\nassert solution.minimumDifference([6, 73, 78, 96], 4) == 90\nassert solution.minimumDifference([3, 15, 67], 2) == 12\nassert solution.minimumDifference([17, 22, 39, 40, 44, 52, 55, 56, 59, 91], 1) == 0\nassert solution.minimumDifference([30, 38, 52, 53, 54, 70, 81, 88, 94], 8) == 56\nassert solution.minimumDifference([22, 25, 27, 28, 29, 32, 36, 50, 74, 84], 3) == 2\nassert solution.minimumDifference([7, 9, 16, 19, 25, 30, 34, 46, 76, 87], 1) == 0\nassert solution.minimumDifference([7, 12, 27, 48, 49], 1) == 0\nassert solution.minimumDifference([4, 23, 38], 1) == 0\nassert solution.minimumDifference([27, 49, 52, 94, 97], 1) == 0\nassert solution.minimumDifference([12, 16, 17, 18, 20, 35, 63, 89, 91, 100], 6) == 23\nassert solution.minimumDifference([72, 92], 2) == 20\nassert solution.minimumDifference([12, 43], 1) == 0\nassert solution.minimumDifference([25, 26, 41, 43], 1) == 0\nassert solution.minimumDifference([7, 26, 47, 54, 63, 82], 5) == 56\nassert solution.minimumDifference([9, 12, 33, 47, 58, 72], 1) == 0\nassert solution.minimumDifference([29, 45, 49, 59, 69, 87, 97], 6) == 52\nassert solution.minimumDifference([14, 21, 36, 46, 50, 52, 56, 62, 82, 94], 6) == 26\nassert solution.minimumDifference([1, 5, 27, 29, 34, 60, 65, 85, 98], 7) == 64\nassert solution.minimumDifference([17, 34, 35, 46], 2) == 1\nassert solution.minimumDifference([3, 54, 76], 1) == 0\nassert solution.minimumDifference([47, 78, 83], 3) == 36\nassert solution.minimumDifference([22, 52], 1) == 0\nassert solution.minimumDifference([26, 45], 1) == 0\nassert solution.minimumDifference([11, 22, 24, 62, 86, 92, 97], 3) == 11\nassert solution.minimumDifference([11, 13, 14, 31, 58, 62, 68, 71, 85, 89], 1) == 0\nassert solution.minimumDifference([66, 72, 73, 74, 93], 5) == 27\nassert solution.minimumDifference([63, 75], 2) == 12\nassert solution.minimumDifference([16, 29, 32, 33, 45, 58, 97], 6) == 42\nassert solution.minimumDifference([64, 65], 1) == 0\nassert solution.minimumDifference([18, 25, 65, 70, 75, 87, 99], 3) == 10\nassert solution.minimumDifference([5, 21, 41, 54, 77, 86, 94], 2) == 8\nassert solution.minimumDifference([1, 8, 46, 77], 2) == 7\nassert solution.minimumDifference([18, 38, 46, 47, 66, 69, 72, 75, 81, 97], 5) == 15\nassert solution.minimumDifference([15, 23, 29, 32, 37, 57, 89], 1) == 0\nassert solution.minimumDifference([5, 22, 23, 28, 40, 68, 74, 91, 100], 4) == 18\nassert solution.minimumDifference([27, 65], 2) == 38\nassert solution.minimumDifference([6, 22, 52, 100], 1) == 0\nassert solution.minimumDifference([8, 10, 11, 46, 48, 100], 6) == 92",
  "inefficient_solution": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        total_scores = [num for num in nums for _ in range(k)]\n        all_combinations = []\n        for i in range(len(total_scores)):\n            for j in range(i, i + k):\n                combination = total_scores[i:j + 1]\n                all_combinations.append(combination)\n        all_combinations.sort(key=lambda x: max(x) - min(x))\n        min_diff = float('inf')\n        for combination in all_combinations:\n            diff = max(combination) - min(combination)\n            min_diff = min(min_diff, diff)\n        return min_diff",
  "is_python": true
}