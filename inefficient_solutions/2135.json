{
  "problem_idx": 2135,
  "task_name": "Count Words Obtained After Adding a Letter",
  "markdown_description": "\nYou are given two **0-indexed** arrays of strings `startWords` and `targetWords`. Each string consists of **lowercase English letters** only.\n\n\nFor each string in `targetWords`, check if it is possible to choose a string from `startWords` and perform a **conversion operation** on it to be equal to that from `targetWords`.\n\n\nThe **conversion operation** is described in the following two steps:\n\n\n1. **Append** any lowercase letter that is **not present** in the string to its end.\n\t* For example, if the string is `\"abc\"`, the letters `'d'`, `'e'`, or `'y'` can be added to it, but not `'a'`. If `'d'` is added, the resulting string will be `\"abcd\"`.\n2. **Rearrange** the letters of the new string in **any** arbitrary order.\n\t* For example, `\"abcd\"` can be rearranged to `\"acbd\"`, `\"bacd\"`, `\"cbda\"`, and so on. Note that it can also be rearranged to `\"abcd\"` itself.\n\n\nReturn *the **number of strings** in* `targetWords` *that can be obtained by performing the operations on **any** string of* `startWords`.\n\n\n**Note** that you will only be verifying if the string in `targetWords` can be obtained from a string in `startWords` by performing the operations. The strings in `startWords` **do not** actually change during this process.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]\n**Output:** 2\n**Explanation:**\n- In order to form targetWords[0] = \"tack\", we use startWords[1] = \"act\", append 'k' to it, and rearrange \"actk\" to \"tack\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"act\".\n  Note that \"act\" does exist in startWords, but we **must** append one letter to the string before rearranging it.\n- In order to form targetWords[2] = \"acti\", we use startWords[1] = \"act\", append 'i' to it, and rearrange \"acti\" to \"acti\" itself.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]\n**Output:** 1\n**Explanation:**\n- In order to form targetWords[0] = \"abc\", we use startWords[0] = \"ab\", add 'c' to it, and rearrange it to \"abc\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"abcd\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= startWords.length, targetWords.length <= 5 * 104`\n* `1 <= startWords[i].length, targetWords[j].length <= 26`\n* Each string of `startWords` and `targetWords` consists of lowercase English letters only.\n* No letter occurs more than once in any string of `startWords` or `targetWords`.\n\n\n",
  "canonical_solution": "class Solution:\n    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:\n        s = set()\n        for word in startWords:\n            mask = 0\n            for c in word:\n                mask |= 1 << (ord(c) - ord('a'))\n            s.add(mask)\n\n        ans = 0\n        for word in targetWords:\n            mask = 0\n            for c in word:\n                mask |= 1 << (ord(c) - ord('a'))\n            for c in word:\n                t = mask ^ (1 << (ord(c) - ord('a')))\n                if t in s:\n                    ans += 1\n                    break\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:\n        s = set()\n        for word in startWords:\n            mask = 0\n            for c in word:\n                mask |= 1 << (ord(c) - ord('a'))\n            s.add(mask)\n\n        ans = 0\n        for word in targetWords:\n            mask = 0\n            for c in word:\n                mask |= 1 << (ord(c) - ord('a'))\n            for c in word:\n                t = mask ^ (1 << (ord(c) - ord('a')))\n                if t in s:\n                    ans += 1\n                    break\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random startWords list\n    startWords = []\n    num_startWords = random.randint(1, 11) # generate random number of strings\n    for i in range(num_startWords):\n        startWord_len = random.randint(1, 11) # generate random length of string\n        startWord = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(startWord_len)) # generate random string with random letters\n        startWords.append(startWord)\n\n    # Generate random targetWords list\n    targetWords = []\n    num_targetWords = random.randint(1, 11) # generate random number of strings\n    for i in range(num_targetWords):\n        targetWord_len = random.randint(1, 11) # generate random length of string\n        targetWord = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(targetWord_len)) # generate random string with random letters\n        targetWords.append(targetWord)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.wordCount(startWords, targetWords)\n\n    return startWords, targetWords, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        startWords, targetWords, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.wordCount(startWords, targetWords) == expected_result\n        print(f\"assert solution.wordCount({startWords}, {targetWords}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.wordCount({startWords}, {targetWords}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.wordCount(['dakscnxv', 'adxdshe', 'lsjgrd', 'svbn', 'nyrngzjfh', 'aoqg', 'fghcocolipk', 'au'], ['c', 'mhhoubhf', 'hvylytsavyi', 'zg', 'oj', 'jcmupsd', 'xhnitrrauw', 'wufgdmxqwim', 'n', 'dadfc', 'nen']) == 0\nassert solution.wordCount(['tnx', 'gzikrtl', 'yosabeuk', 'nhqlbcvvtfo'], ['ngdikssxop', 'zv', 'xgreac', 'dhfmwng', 'icde', 'd', 'nqfdp', 'fabzvr', 'kozdxqg', 'hrsqzfhnxm', 'p']) == 0\nassert solution.wordCount(['pcfa'], ['kqbeokmvu', 'ihorkfgu', 'hfyodsbd', 'zeev', 'ay', 'enogxy', 'olnpygtgc', 'bh']) == 0\nassert solution.wordCount(['yabdtlj', 'offe', 'flktuwj', 'wgly', 'ichiuc'], ['jjloppat', 'kqezjrku', 'iioigorfk', 'fufpp']) == 0\nassert solution.wordCount(['xyn', 'jwuopov', 'qafoovqgd'], ['ptzkqnyudxx', 'gj', 'vnp', 'qxngnd', 'qsfggfbxmzq']) == 0\nassert solution.wordCount(['xitetysid', 'xwdbcegabf', 'qeaxrju', 'dibnjixns', 'yaso', 'pxhozk', 'wipf', 'fszmrafp', 'muwmgqk'], ['erdnuj']) == 0\nassert solution.wordCount(['qm', 'occsa', 'q', 'aum', 'cmcscltd', 'pahopxeynyc', 'rbuletocxof', 'mxyio', 'kiaxqewf', 'mk', 'onsfbutxl'], ['pm', 'tkluvymcs', 'nuecg', 'zzf']) == 0\nassert solution.wordCount(['p', 'qldnvqv', 'r', 'rofowetxxn', 'cijxviisvag', 'tnahyqgqqgt', 'qyvgrtmi', 'mhnlgyvjaz', 'ipqdfv'], ['dcueatw', 'uyul', 'odaposypjin', 'wm', 'fd', 'x', 'xbudr', 'byvps']) == 0\nassert solution.wordCount(['t', 'qqi', 'ppr', 'izshxwpbvg', 'abpvev', 'idtpyd', 'lbdwdczelr', 'hm', 'wlcziqzexsj', 'jarwwiyyzvd', 'b'], ['idoq', 'lp', 'vy', 'eb', 'yzzlcgwjj']) == 1\nassert solution.wordCount(['uf'], ['lszs', 'm', 'omnhr', 'syvnquod', 'bgz', 'i']) == 0\nassert solution.wordCount(['ypci', 'wgfw', 'ryrnsitvymb', 'luwwkdaxqd', 'cdo', 'n', 'xrgaevc', 'e', 'rhxlsxcybz'], ['swbiluzbj', 'mdo', 'gfvbtcbpb', 'dsii', 'yztqopo', 'n', 'igfngbpul']) == 0\nassert solution.wordCount(['koznab', 'emgzbyapd', 'jpwltkgk', 'lqwwr'], ['plkablwnvhs', 'gwuywxv', 'ukrqtv', 'n', 'fpyqqfwpti', 'u']) == 0\nassert solution.wordCount(['suqclqk', 'jdtqrj', 'qxnawg', 'kgdbobnfw', 'blrewbvwzye', 'bpvgkwp', 't', 'siq', 'qnbfujxr'], ['g', 'asgwsf', 'jnxwign', 'agzti', 'qyiqxadctb', 'gsmqdqviqa', 'cxwzomzmj']) == 0\nassert solution.wordCount(['nvnyfyi', 'iybpgl', 'clsob', 'd', 'oaccndmx', 'hoycri'], ['nqr', 'dnrmz', 'hlegxzlng', 'vnovlgoj', 'vkjtaozi', 'qwlq', 'or', 'q', 'bbfyw', 'rekkkbai', 'mwokpt']) == 0\nassert solution.wordCount(['cda', 'wcidyybcz', 'uj', 'ahf', 'emkdkhpxgo', 'h'], ['r', 'sgl', 'g', 'ouqrpw', 'vl']) == 0\nassert solution.wordCount(['win', 'fjdakm', 'h', 'mvlomrrvkq', 'hheggkp', 'xjihkhrm', 'sssanoe', 'ojrwmkpjgpy', 'wmdqnoshlu'], ['ryzx', 'ukqdugybw', 'rvlcxiec', 'xt', 'oyglzvhpcem', 'rfyzgjo', 'enbibgm', 'psbqnsceen', 't', 'xqtqonk']) == 0\nassert solution.wordCount(['ibvyp', 'qbqsyighvb', 'pgircfh', 'sa', 'zyrqlozvdak'], ['h', 'tnaznzqns', 'wforib', 'wr', 'afbcvaa', 'lrifmkkxwh', 'kzfmybn']) == 0\nassert solution.wordCount(['idflixbk', 'sgs', 'qkxrfnaq', 'dhvlitmhd', 'bfqse', 'j', 'ugymwkdxtag'], ['tpt', 'jllmj', 'wliqft', 'hkejpleqzsw', 'vgsrpkg', 'drf', 'hd', 'age', 'racd', 'mppicmdvd', 'urjkrgrltlf']) == 0\nassert solution.wordCount(['xkhn', 'cljhoan'], ['k', 'pkvytz', 'ltcfh', 'pityfo', 'sybdbywj', 'cny', 'xekdrecava', 'nep', 'topeqqwiw', 'j']) == 0\nassert solution.wordCount(['cdjpctoea', 'y', 'xfutonbbs', 'fiuovijtoai', 'jcfqaxacrk', 'e', 'tnh', 'irpfsy', 'fp', 'wgegke'], ['zq', 'uqlln', 'yenn']) == 0\nassert solution.wordCount(['doisibmvbzr'], ['upauwk', 'cqeeurfjjd', 'ylrlv', 'v', 'ywjjdgqc']) == 0\nassert solution.wordCount(['nxd', 'bviog', 'tbwsxocn', 'zj', 'vefdxbwsr', 'brqmytpoq'], ['xwfr', 'hdpggaxfr', 'vmh', 'kc', 'jkyrmcjnskf', 'tmyroleupcr', 'h', 'qsos']) == 0\nassert solution.wordCount(['ceire', 'benqfkt', 'jklkl'], ['ynicgw', 'xvndc', 'vaswqyhrerg', 'qkvrwemewbf']) == 0\nassert solution.wordCount(['lqjhfkxrbl', 'gglwlmrsrl', 'azflsk', 'ru'], ['bul', 'whznjwv', 'mixlvb', 'udbfnw', 'ipdmrxh', 'xeivh', 'qgywsrozhz', 'vmrtpbwrono', 'jyeeeaz', 'sml', 'uszm']) == 0\nassert solution.wordCount(['wggmrlsv'], ['gkopaf', 'ckseibazrn', 'amggqixdjt']) == 0\nassert solution.wordCount(['kzzwuy', 'pnmkmgqcz', 'wi', 'yryfwdi', 'wfw', 'xwdkhyyenpl', 'b', 'tjfkcgm', 'scpkt', 'o'], ['uhbg', 'xnkd', 'ts', 'n']) == 0\nassert solution.wordCount(['cfcyi', 'lsztlld', 'lhwblz', 'durjkw', 'nmcyx', 'huibgckydx'], ['y', 'nmdvwog', 'hu', 'janmrp', 'uxn']) == 0\nassert solution.wordCount(['kyzjbgvnxl', 'ngespwa'], ['jfsqh', 'qvtqmxsjpcc', 'ep', 'cxwwj']) == 0\nassert solution.wordCount(['r'], ['tonxjfe', 'brba', 'aonmycnaed', 'yphqgfwpxh', 'ctrkbfxz', 'aietf', 'tbsnhyhcjko', 'skbkkjjhv', 'xjs', 'xy']) == 0\nassert solution.wordCount(['ihrpazln', 'rjjdiomcir', 'htcca', 'girino', 'ujnifprwtvr', 'zzfwxk', 'zk', 'rpqh'], ['ojwxouyj', 'dsojynsqc', 'crqzgs', 'izy', 'z']) == 0\nassert solution.wordCount(['whiwkorcv', 'safdko', 'tlbzinlqaen', 'asmgwiuzgpr'], ['oczufecpe', 'mwfxo', 'shgbzktgu', 'vcat', 'z', 'vgmgrtsyupv', 'glbk', 'ffrzdo', 'j']) == 0\nassert solution.wordCount(['zvv', 'shtce', 'pqyzsyunwg', 'acbtzg', 'snyowchhz', 'uigum'], ['lcq', 'lcnlsaeqi', 'yizkwcxqv', 'cou', 'pac', 'kbqypfq', 'tm']) == 0\nassert solution.wordCount(['chqasl', 'wqgkjf'], ['igubk', 's', 'bhgh', 'qglvhklp', 'qiyiydqdyg', 'eezmudp']) == 0\nassert solution.wordCount(['eesyyanrgxz', 'xvkaxyoyiy', 'l', 'konrdt', 'pdanj'], ['yq', 'vhxhargne', 'zalvwzyz', 'afhgx']) == 0\nassert solution.wordCount(['d'], ['uebhizuucsb', 'eepysw', 's', 'abqszyc', 'ps', 'rqxgzuyqyw', 'wounotp', 'zelhaytrq', 'kgcsiyy', 'ucz', 'fsoasn']) == 0\nassert solution.wordCount(['mjmxgcuoasl', 'pzkqdhe', 'twrkeicyzj', 'c', 'wiygxctfoyh', 'ytbtzz', 'vica', 'wvfwtsrb'], ['nnhflvvjkez', 'idianksb']) == 0\nassert solution.wordCount(['oen', 'mjtaocaro', 'bm', 'ep', 'fkwakhrkac', 'nmutsgkpkgy', 'uirho', 'xnjcnrdhss'], ['vptkcy', 'kidzhn', 'lnf', 'afhopl', 'vexswar', 'zuvuqkfi', 'bgzzfbhgznw', 'iqn', 'jwve', 'ug']) == 0\nassert solution.wordCount(['esvtrp', 'l', 'cbfeuybu', 'fhvxmhceky', 'mogcbodsl', 'bibeldd', 'i', 'pwmboyj'], ['zjgkekuk', 'rrgbvxqa', 'oeyna', 'xdxvgnpzjtl', 'tyspdd', 'cerfkytpxw', 'xubygvm', 'l', 'ker', 'uzxief', 'qtiiym']) == 0\nassert solution.wordCount(['iytzvl', 'dwtps', 'slxzp', 'hnqfenxpqnw', 'ill', 'x', 'zqyog'], ['yhsma', 'cxl', 'acouc', 'cdp']) == 0\nassert solution.wordCount(['doe', 'sdfouva', 'ereer', 'fklobvnj', 'fstjzhlcmqd', 'jjlbkuio', 'krcdo'], ['gqus', 'nbjwbcahkdj', 'g', 'rcdsq', 'hzq', 'edkel']) == 0\nassert solution.wordCount(['qvkxoj', 'cbmokkrmhg', 'lajxegfxo', 'nonke', 'sgilmbn', 'tfkwgwao', 'lwmtrotcz', 'ijjinuevlyo'], ['evfjfrofli', 'gvkwzm']) == 0\nassert solution.wordCount(['tb', 'lalmyrkvd', 'jrcnbcwafr', 'vgad', 'botalajcc', 'jkh', 'zhcqcy', 'tjgmhc', 'nfmw', 'etoufwtvfjd', 'gf'], ['fqbspgsg']) == 0\nassert solution.wordCount(['esalwufhalp', 't', 'hylepccw', 'gejq', 'ereughtrgu', 'vzz', 'j', 'iktlidji'], ['hmqsep', 'tvcpme', 'gcxgzgjcfum', 'sf', 'jknhqdsdc']) == 0\nassert solution.wordCount(['rqytgh', 's', 'tnglfiaz', 'fegctodayy', 'pqxrrbeyyt', 'tkd', 'gfv', 'ikhdihqhzg'], ['yhtkohm', 'hnbvlbic', 'bqvs', 'hxakiv', 'pojuyyqdi', 'baleniize']) == 0\nassert solution.wordCount(['nmxjztxhu', 'gvywmh'], ['dc', 'rjqzgzussw', 'scbsaryf', 'succbubhhhd', 'lit', 'cwkqwery', 'melgzh', 'ywcjurlx', 'fjvlkmwmtp', 'pfuvjra']) == 0\nassert solution.wordCount(['wf', 'waojyxk'], ['llujzsxuei']) == 0\nassert solution.wordCount(['frfey', 'phvvdsltm', 'fqniqrpu', 'vn', 'wcdfi', 'tcboyn', 'ufgvgit', 'obgxdq', 'q', 'nohicjhgdp'], ['alvx', 'x', 'utfzzhorewp', 'cjfqtz', 'ptw', 'wburyiqn']) == 0\nassert solution.wordCount(['niflf', 'ksqkdvtpyw', 'kz', 'xpehq', 'bbrvofoiajh'], ['vpcqvmaoz', 'wcyflwoebyb', 'jjxudnuv', 'gelghbijfim', 'fwydks', 'qpknd']) == 0\nassert solution.wordCount(['pdzx', 'oam', 'bp', 'x', 'lxgrbgsa'], ['a', 'rl', 'i', 'cv', 'ksomciimab']) == 0\nassert solution.wordCount(['zcaoynyvp'], ['ztbc', 'ryriq', 'fgxyfwga', 'jzhnyfwok', 'ivr', 'tvnyxfxxad', 'jl', 'hyhuzt']) == 0\nassert solution.wordCount(['nanhoyusb', 'afeiohq', 'z', 'sbqqsnugl', 'ypaja', 'vd', 'nnw', 'fnccgp'], ['rzdoo', 'bembs', 'wagnqmf', 'whgwsrtcqi', 'vyixrgpz']) == 0\nassert solution.wordCount(['cmfvnmet', 'dmrksvd', 'i'], ['l', 'hbm', 'atjlosarzis', 'zovascbkiwg', 'ipkqe', 'u', 's', 'jal', 'mndew']) == 0\nassert solution.wordCount(['slgwuh', 'atxalce', 'gnkany', 'dwvdgslws', 'mgs'], ['hzgvvnyd', 'dlcgczqzi', 'rbsv', 'pbt', 'aaj', 'wgjnvqt', 'bx']) == 0\nassert solution.wordCount(['knltad'], ['gaqajprdltf']) == 0\nassert solution.wordCount(['ipebaujatby'], ['wtr', 'hkcpc']) == 0\nassert solution.wordCount(['nciwzzoatn', 'imsylsm', 'cpazzsvoryx', 'ps', 'im', 'v'], ['rnfuntbkfq', 'ohtov', 'arhpfic', 'dkfhw', 'n', 'woo', 'yxizi', 'vdqk']) == 0\nassert solution.wordCount(['tsnxwi', 'hhzzlfpp', 'sdfeelexu', 'amayh', 'xy'], ['pzvsrjgbfsg', 'm', 'mgqkrwrmpy', 'woqb', 'lutbeh', 'bogtswef', 'rg', 'emagi']) == 0\nassert solution.wordCount(['chbl'], ['bbh', 'gwvavvw', 'x', 'vzc', 'sffrzz', 'nxqbtzwuwjb', 'rgfkwscdgy', 'nmwl', 'ton', 'pmeg', 'feykvvlimhh']) == 0\nassert solution.wordCount(['bmlzvlacw'], ['scpapwdbvio', 'tuaomsyz', 'pxuslbn', 'uk', 'p']) == 0\nassert solution.wordCount(['myameutj'], ['sqyfvb', 'exfpddms', 'bxtmwifnewy', 'u']) == 0\nassert solution.wordCount(['tajbehi', 'wtsqiakmse', 'wfmyfely', 'rewfi', 'y', 'xg', 'bhcpluakqu'], ['xlxakinui', 'saho', 'wpjgvcfy', 'j']) == 0\nassert solution.wordCount(['bttfiww', 'wxalulnmmho', 'vvr'], ['xnmiwfzlm', 'tptve']) == 0\nassert solution.wordCount(['aotptx', 'hmmgeliism', 'lldagpm', 'bguzjoe', 'wyvmdjuzukr', 'clgboje', 'p', 'jfciznrmh', 'hidsf', 'bwsc', 'uvrabvdan'], ['dxzebgjp', 'ktidzpx', 'z', 'ekcfuk', 'aswxevyvjmt', 'aszhzwbgax', 'w', 'mqhbea', 'k', 'omhqjs', 'ppust']) == 0\nassert solution.wordCount(['j', 'gfzqmkka', 'pvgsjb', 'umbjkkned', 'pkkbkqv', 'pzzgjiunog', 'jxomvtkde'], ['diz', 'hosfqza', 'tkuodhbgb', 'qoxfz', 'ufsvtzequ', 'iwpan', 'nucfsigkr', 'vsiuv', 'syiqvdt', 'jzq']) == 0\nassert solution.wordCount(['nwjelmnirv', 'u', 'imgvpi', 'genjieddc', 'bobx', 's', 'qpqimncwj', 'oen', 'ankgltl'], ['rqspfz', 'cnfaoml', 'jqasuehni', 'sfrrlbuhdm', 'trkayda', 'varhuqiebbx', 'jeiuy', 'sriilvmxc', 'bhugfvs']) == 0\nassert solution.wordCount(['vcwpukce', 'macq', 'eliqov'], ['aibgrnqsz', 'uk', 'fidrmevqkzh', 'o']) == 0\nassert solution.wordCount(['wrl', 'msfeculeu', 'bau', 'bw', 'nt', 'pboyozxdzy', 'gpwlvh', 'j', 'x', 'xrwgjrhv', 'vjz'], ['pswloxlyw', 'qjk', 'i', 'zmdoyhb', 'xtomwgpcan', 'zyhdn', 'wdycamhf', 'hmuoooemy', 'ns']) == 0\nassert solution.wordCount(['xabbbn', 'mrrgde', 'mxphboqqq', 'nvxpdmdpd', 'rqaiad', 'khjsgz', 'qh', 'i', 'pfo', 'yfnrppfjkg', 'zuoccsvrns'], ['dtibytbdb', 'be', 'dakql', 'gwlbfnpubo', 'iglhkcu']) == 0\nassert solution.wordCount(['kmtt', 'ljieookd', 'cnuzj'], ['zhritnrxgp', 'fztn', 'xuhqldulsik', 'jouismspw', 'kewmuyyyzjt', 'rjzjzu', 'qlnuerej']) == 0\nassert solution.wordCount(['z', 'uf', 'pg', 'dys', 'fsyauks', 'h', 't'], ['v']) == 0\nassert solution.wordCount(['uxlr', 'oxgvc', 'h', 'y', 'up', 'nimqqni', 'kculixzk', 'jfzonaqytjx', 'fpgyi', 'dvfbtniq'], ['uysbjdu', 'yrlfcorta', 'aargr', 'u', 'fl', 'fyljull', 'scfnuwrtahy']) == 0\nassert solution.wordCount(['w'], ['hyusbaip', 'zqljurj', 'slrfrwwycs', 'skorzyi', 'yxpmtsuoo', 'fdah', 'ilq', 'oj']) == 0\nassert solution.wordCount(['vepmmqsgtxf', 'amlzlu', 'mu', 'dglqyjqr', 'yimcaso', 'dj', 'askeqltwe'], ['fmxu', 'loxy', 'iautf', 'tijzlmndpvc']) == 0\nassert solution.wordCount(['yjbljnj', 'llpvmnnasmm', 'hlisth', 'qcgflas'], ['uol', 'xhjqledkhmd', 'wsqizvc', 'kst', 'u', 'q', 'vdesyxh', 'dahf', 'koaxybj', 'fzbmu', 'nfxerpnjn']) == 0\nassert solution.wordCount(['vbt', 'jydahqqnv', 'ghisb', 'h', 'qv', 'zgjvgdkso', 'rklffpxxgm', 'szuamyely', 'hfdstaklhrt'], ['ocbythtlvbg', 'ditychp', 'dawvueui', 'osxs', 'dtr', 'nfsdb', 'bqnr']) == 0\nassert solution.wordCount(['meo', 'in', 'klsfqmr', 'hbotfw', 'du', 'mvr', 'nm', 'wjpqq', 'wetf', 'aywkbmas'], ['srcpbhn', 'lnakue', 'moiupjf', 'foe', 'xmdjkeaw', 'seogvnqdir', 'jmjnwvs', 'nwsgxjcnfaa', 'bjb', 'hobvmktwcg']) == 0\nassert solution.wordCount(['jwdkwy', 'xsjinjva', 'po', 'ixcielkbkd', 'cfbqtkkkak', 'g', 'ylfonrv', 'ryfzjy', 'uhqzq'], ['dhvxyjyyl']) == 0\nassert solution.wordCount(['kiwy', 'ndstmedr', 'tvtocim', 'c', 'mvxqvzx', 'ouqfyq', 'nuonloylbh', 'griwkk', 'nutvgloru'], ['sdvks', 'dnvgzf', 'che', 'etfm', 'jlujry', 'fkkhmfhym']) == 0\nassert solution.wordCount(['xn', 'lrlz', 'neioyexefp', 'akyq', 'crgxrt', 'uyafxbigjhy', 'kpxnbzcww', 'zdtjdxegz'], ['tmzplck', 'mrv', 'k', 'jjjy', 'uuhwuqvlwlr', 'lqkuyjxfo', 'kb', 'eqpa', 'jtdudc', 'pw']) == 0\nassert solution.wordCount(['mxefdulrcoc', 'co', 'scpc', 'mxaqswjnpgl', 'rusgdsz', 'iudxl', 'svaeltsrqoo', 'wz', 'diglzelkhq'], ['geytwf']) == 0\nassert solution.wordCount(['zpxtxqhy', 'lgnhptlqpze', 'wytlkcem'], ['tlivj', 'tsiowstrb', 'umhtd', 'qd', 'jmogx']) == 0\nassert solution.wordCount(['gtymocjum', 'ypifnua', 'fa', 'nfyingykqhg', 's', 'wvlmfmeswz'], ['vfwbbytwiov']) == 0\nassert solution.wordCount(['prtrwn', 'rffv', 'nenpyqbkg', 'vylat', 'dqmj', 'jg', 'kucmicibqp', 'kdjrzhg'], ['sftacjumkgi', 'mxwh', 'jircci', 'iojvexuf', 'uvvz', 'nuxpi']) == 0\nassert solution.wordCount(['ftfcgtr', 'dmyxennwvdo', 'atnjxna', 'bfnazvmazo', 'lgxcsfm', 'xvlbsdzmxxy', 'd', 'momqixijjqz', 'pwyjvslarhu'], ['fadowu', 'wsmn', 'bkhhy', 'zviqhmi', 'k', 'wzrpmskvq', 'kucrju', 'yjiiasj', 'bkd', 'jxjpubef', 'z']) == 0\nassert solution.wordCount(['fczpidko', 'vcvcb', 'zpk', 'nfcxmwexhu', 'ns', 'loqmd', 'xgdbjgro'], ['pt', 'sqahutdsohk', 'wuxj', 'emmyf', 'oyptcn', 'ygbwrewuzq', 'dyfakihottr', 'pgzq', 'gsjp', 'cuzjineo']) == 0\nassert solution.wordCount(['swszs'], ['bgyapn', 'li', 'kizosf', 'ypxkzaqd', 'asr', 'uahdyac']) == 0\nassert solution.wordCount(['zkwplnhf', 'ahuygvpvfj', 'qspxtlp', 'jarlam', 'spfxuj'], ['qycecbysxtr', 'jn', 'reqqot', 'pbpykfpb', 'jsnnytsv', 'iimcmntao', 'joaiipprn', 'dmh', 'wj', 'olhrlritz']) == 0\nassert solution.wordCount(['guyolberg'], ['bjauwgf']) == 0\nassert solution.wordCount(['b', 'sfyiamnwddh', 'jcaz', 'ayrve', 'rimhbi', 'edwjardxkr', 'q', 'c'], ['hfwxmsqjcp', 'typouedeg', 'dumrtf', 'sidjvfe', 'ndbnaxznqg', 'sxxntt', 'mcfdfii', 'pv', 'ls', 'gw']) == 0\nassert solution.wordCount(['mpcxtqs', 'njpwttxz', 'jaep', 'kls', 'yttdv'], ['ov', 'hnhhwujmd', 'mehlssvq', 'mb', 'zwgxq', 'cenvara']) == 0\nassert solution.wordCount(['cxf', 'qdhz', 'hd', 'oyx', 'yunujg', 'etkrpremfgi', 'cfvwpjjzxde', 'wgjxzr'], ['ssrsnbih', 'tfuhmsvabo', 'ftqvgoyb', 'jyqyxftwvv', 'k', 'qaeqezmbz', 'xwhwfg', 'wo', 'tkyuchy', 'vrsfrgsadxi']) == 0\nassert solution.wordCount(['hvjfiawsys', 'ukeuc', 'vqpvlglwjvl', 'zh', 'x', 'jpfwlvavfo', 'hnnfr', 'cih', 'x', 'v', 'sdt'], ['glealr', 'fqdu', 'qflcmwemhe', 'nupduurjke', 'xdlzjxixeqm', 'akybod', 'egfjqgmxy']) == 0\nassert solution.wordCount(['ug'], ['vczxriihjeg', 'gamtcyp', 'izrhkx']) == 0\nassert solution.wordCount(['bnytnzqmvp', 'e', 'lfmgztpw', 'hzzgnooufd', 'zfy'], ['sfbjvuyfl', 'yaivw', 'vfwkxaiwb', 'rel', 'asf', 'jtgdc', 'hbd', 'b']) == 0\nassert solution.wordCount(['rjb', 'butr', 'waohsad', 'sscqxeyqmwi'], ['vxeunzlacw', 'ltvlsbh', 'jqyrehrx', 'g', 't', 'gc', 'mskd', 'kohptgehlp', 'jva', 'gbzjxwvn']) == 0\nassert solution.wordCount(['tmcqqnaef', 'stxgw', 'mdhy'], ['ikbazqavxl']) == 0\nassert solution.wordCount(['ebevjdzls', 'vkhtkvtvhum', 'sykk'], ['wauqg', 'glmc', 'zununs', 'xnjrfg', 'upq', 'wmpfjahrihv', 'i', 'h', 'tvaunfbi']) == 0\nassert solution.wordCount(['kuzq', 'hxmjsxfze', 'z', 'j', 'kpvm', 'kcwoseis', 'sbu', 'qzsuptzdg'], ['n', 'byn']) == 0\nassert solution.wordCount(['sivd', 'vgagv', 'uxdmsgprxsj', 'fhsmnvqm', 'gdgdbxtqvh'], ['mciuuy', 'yhke']) == 0\nassert solution.wordCount(['wxepaa', 'asjftwmqkl', 'sbxhib', 'yxco', 'ms', 'vekpu', 'q', 'ty'], ['rjm', 'pnuzo', 'zh', 'kmz']) == 0",
  "inefficient_solution": "class Solution:\n    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:\n        s = set()\n        for word in startWords:\n            s.add(word)\n        s = [list(word) for word in s]\n\n        ans = 0\n        for word in targetWords:\n            t = []\n            for c in word:\n                t.append(c)\n            for c in word:\n                temp = t[:]\n                for i in range(len(temp)):\n                    for j in range(i, len(temp)):\n                        temp[i], temp[j] = temp[j], temp[i]\n                temp_str = ''.join(temp)\n                if temp_str in [str(w) for w in s]:\n                    ans += 1\n                    break\n        return ans",
  "is_python": true
}