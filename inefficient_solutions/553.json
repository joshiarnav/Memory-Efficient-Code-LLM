{
  "problem_idx": 553,
  "task_name": "Optimal Division",
  "markdown_description": "\nYou are given an integer array `nums`. The adjacent integers in `nums` will perform the float division.\n\n\n* For example, for `nums = [2,3,4]`, we will evaluate the expression `\"2/3/4\"`.\n\n\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\n\n\nReturn *the corresponding expression that has the maximum value in string format*.\n\n\n**Note:** your expression should not contain redundant parenthesis.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1000,100,10,2]\n**Output:** \"1000/(100/10/2)\"\n**Explanation:** 1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/(**(**100/10**)**/2)\" are redundant since they do not influence the operation priority.\nSo you should return \"1000/(100/10/2)\".\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,4]\n**Output:** \"2/(3/4)\"\n**Explanation:** (2/(3/4)) = 8/3 = 2.667\nIt can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 10`\n* `2 <= nums[i] <= 1000`\n* There is only one optimal division for the given input.\n\n\n",
  "canonical_solution": "class Solution:\n    def optimalDivision(self, nums: List[int]) -> str:\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        if n == 2:\n            return f'{nums[0]}/{nums[1]}'\n        return f'{nums[0]}/({\"/\".join(map(str, nums[1:]))})'\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def optimalDivision(self, nums):\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        if n == 2:\n            return f'{nums[0]}/{nums[1]}'\n        return f'{nums[0]}/({\"/\".join(map(str, nums[1:]))})'\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(2, 1001), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.optimalDivision(nums)\n\n    return nums, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.optimalDivision(nums) == expected_result\n        print(f\"assert solution.optimalDivision({nums}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.optimalDivision({nums}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.optimalDivision([23, 602, 46, 47]) == 23/(602/46/47)\nassert solution.optimalDivision([34, 234, 453, 759, 713, 240, 507]) == 34/(234/453/759/713/240/507)\nassert solution.optimalDivision([193, 867, 611, 659, 509, 779, 405, 616, 908]) == 193/(867/611/659/509/779/405/616/908)\nassert solution.optimalDivision([744, 590, 424, 154, 347, 969, 34]) == 744/(590/424/154/347/969/34)\nassert solution.optimalDivision([358, 405, 424, 897, 12, 253, 856, 89, 925, 78]) == 358/(405/424/897/12/253/856/89/925/78)\nassert solution.optimalDivision([295, 49, 74, 342, 450, 552, 189, 48]) == 295/(49/74/342/450/552/189/48)\nassert solution.optimalDivision([54, 690, 809, 935, 631, 284, 854, 341, 477]) == 54/(690/809/935/631/284/854/341/477)\nassert solution.optimalDivision([764, 464, 654]) == 764/(464/654)\nassert solution.optimalDivision([260, 979, 161, 852, 698]) == 260/(979/161/852/698)\nassert solution.optimalDivision([170, 442, 690, 949]) == 170/(442/690/949)\nassert solution.optimalDivision([274, 198, 605, 713]) == 274/(198/605/713)\nassert solution.optimalDivision([967, 533]) == 967/533\nassert solution.optimalDivision([465, 587, 374, 228, 582, 851, 924, 232]) == 465/(587/374/228/582/851/924/232)\nassert solution.optimalDivision([89, 863, 505, 395, 187, 330, 614, 98]) == 89/(863/505/395/187/330/614/98)\nassert solution.optimalDivision([763, 185, 125, 459, 135, 957]) == 763/(185/125/459/135/957)\nassert solution.optimalDivision([599, 788, 154, 10, 800]) == 599/(788/154/10/800)\nassert solution.optimalDivision([188, 133]) == 188/133\nassert solution.optimalDivision([716, 522, 851, 754]) == 716/(522/851/754)\nassert solution.optimalDivision([92, 974, 738, 48, 989, 70, 379, 339, 640]) == 92/(974/738/48/989/70/379/339/640)\nassert solution.optimalDivision([56, 709]) == 56/709\nassert solution.optimalDivision([35, 28, 671, 60, 819, 654]) == 35/(28/671/60/819/654)\nassert solution.optimalDivision([17, 757, 220, 177, 698, 348, 629]) == 17/(757/220/177/698/348/629)\nassert solution.optimalDivision([832, 195, 64, 301, 936, 806]) == 832/(195/64/301/936/806)\nassert solution.optimalDivision([909, 801]) == 909/801\nassert solution.optimalDivision([139]) == 139\nassert solution.optimalDivision([725]) == 725\nassert solution.optimalDivision([427, 13, 923, 437, 853, 230, 525, 699, 348, 453]) == 427/(13/923/437/853/230/525/699/348/453)\nassert solution.optimalDivision([496, 811, 586, 431]) == 496/(811/586/431)\nassert solution.optimalDivision([339, 688, 609, 258, 525, 321, 897]) == 339/(688/609/258/525/321/897)\nassert solution.optimalDivision([479, 169, 23, 245, 392, 912, 898, 423, 982, 889]) == 479/(169/23/245/392/912/898/423/982/889)\nassert solution.optimalDivision([568, 433, 351, 293, 85, 501]) == 568/(433/351/293/85/501)\nassert solution.optimalDivision([633, 83, 714, 789, 178, 803, 175, 793, 908, 261]) == 633/(83/714/789/178/803/175/793/908/261)\nassert solution.optimalDivision([300, 358, 517]) == 300/(358/517)\nassert solution.optimalDivision([648, 947, 640, 386]) == 648/(947/640/386)\nassert solution.optimalDivision([968, 224, 842, 807, 129]) == 968/(224/842/807/129)\nassert solution.optimalDivision([161, 181, 818, 55, 239, 778, 119, 605]) == 161/(181/818/55/239/778/119/605)\nassert solution.optimalDivision([739, 410, 19, 16]) == 739/(410/19/16)\nassert solution.optimalDivision([932, 348]) == 932/348\nassert solution.optimalDivision([502, 436, 583, 941, 926, 44, 596, 311, 209]) == 502/(436/583/941/926/44/596/311/209)\nassert solution.optimalDivision([658, 667]) == 658/667\nassert solution.optimalDivision([466, 646, 147, 49]) == 466/(646/147/49)\nassert solution.optimalDivision([799, 380, 451, 671]) == 799/(380/451/671)\nassert solution.optimalDivision([467]) == 467\nassert solution.optimalDivision([49, 596, 412, 825, 762]) == 49/(596/412/825/762)\nassert solution.optimalDivision([571, 462, 736, 401, 690, 443, 696, 408, 360, 332]) == 571/(462/736/401/690/443/696/408/360/332)\nassert solution.optimalDivision([783]) == 783\nassert solution.optimalDivision([736, 519, 650, 530, 940]) == 736/(519/650/530/940)\nassert solution.optimalDivision([377, 408, 591, 390, 865, 646]) == 377/(408/591/390/865/646)\nassert solution.optimalDivision([871, 729, 317, 220, 815, 601, 80, 477, 800, 813]) == 871/(729/317/220/815/601/80/477/800/813)\nassert solution.optimalDivision([628, 64, 151, 693, 250]) == 628/(64/151/693/250)\nassert solution.optimalDivision([110, 560]) == 110/560\nassert solution.optimalDivision([407, 146, 577, 840, 981, 839, 76, 977, 189]) == 407/(146/577/840/981/839/76/977/189)\nassert solution.optimalDivision([212, 269, 493, 111, 764]) == 212/(269/493/111/764)\nassert solution.optimalDivision([881, 593, 792, 117, 50, 174, 708, 102, 740]) == 881/(593/792/117/50/174/708/102/740)\nassert solution.optimalDivision([969, 961, 972, 449, 998, 119, 783, 423, 540]) == 969/(961/972/449/998/119/783/423/540)\nassert solution.optimalDivision([865, 925, 106, 182, 222, 216, 257, 560, 405, 718]) == 865/(925/106/182/222/216/257/560/405/718)\nassert solution.optimalDivision([749, 646, 321, 139]) == 749/(646/321/139)\nassert solution.optimalDivision([801, 399, 184, 921]) == 801/(399/184/921)\nassert solution.optimalDivision([217, 670, 380, 338]) == 217/(670/380/338)\nassert solution.optimalDivision([813, 370, 296, 67, 51, 439, 201, 581, 671]) == 813/(370/296/67/51/439/201/581/671)\nassert solution.optimalDivision([745, 72, 594, 558, 792, 103, 14, 43, 281]) == 745/(72/594/558/792/103/14/43/281)\nassert solution.optimalDivision([558, 763, 226, 221, 634, 484, 327, 494]) == 558/(763/226/221/634/484/327/494)\nassert solution.optimalDivision([944, 986, 395, 578, 925, 127]) == 944/(986/395/578/925/127)\nassert solution.optimalDivision([582, 764, 8, 964, 918, 808]) == 582/(764/8/964/918/808)\nassert solution.optimalDivision([489, 2, 184]) == 489/(2/184)\nassert solution.optimalDivision([317]) == 317\nassert solution.optimalDivision([681, 163, 763, 70, 208, 534]) == 681/(163/763/70/208/534)\nassert solution.optimalDivision([259, 663, 755, 45, 720, 10, 789, 434, 911, 339]) == 259/(663/755/45/720/10/789/434/911/339)\nassert solution.optimalDivision([555]) == 555\nassert solution.optimalDivision([987, 161, 471, 333, 303, 535]) == 987/(161/471/333/303/535)\nassert solution.optimalDivision([434, 895, 180, 816, 451, 379, 369, 577]) == 434/(895/180/816/451/379/369/577)\nassert solution.optimalDivision([908, 504, 267, 326, 706, 660, 241, 372]) == 908/(504/267/326/706/660/241/372)\nassert solution.optimalDivision([469, 291, 954, 508, 665, 359, 829, 307, 675, 556]) == 469/(291/954/508/665/359/829/307/675/556)\nassert solution.optimalDivision([322, 208, 415, 730, 202, 754, 669, 40]) == 322/(208/415/730/202/754/669/40)\nassert solution.optimalDivision([877, 673]) == 877/673\nassert solution.optimalDivision([844]) == 844\nassert solution.optimalDivision([801, 730, 446, 314, 352, 906, 332]) == 801/(730/446/314/352/906/332)\nassert solution.optimalDivision([543]) == 543\nassert solution.optimalDivision([340, 886, 610, 903, 60, 672, 6]) == 340/(886/610/903/60/672/6)\nassert solution.optimalDivision([612, 129, 445]) == 612/(129/445)\nassert solution.optimalDivision([731, 839, 757, 71, 326, 207, 458, 79]) == 731/(839/757/71/326/207/458/79)\nassert solution.optimalDivision([853, 339, 751, 759, 783, 208, 75, 355, 211]) == 853/(339/751/759/783/208/75/355/211)\nassert solution.optimalDivision([767, 475, 154, 118, 811, 449, 886]) == 767/(475/154/118/811/449/886)\nassert solution.optimalDivision([540, 413, 59, 225, 261, 284, 73]) == 540/(413/59/225/261/284/73)\nassert solution.optimalDivision([803, 990, 560, 572, 587]) == 803/(990/560/572/587)\nassert solution.optimalDivision([279, 919, 598, 859, 618, 612, 185]) == 279/(919/598/859/618/612/185)\nassert solution.optimalDivision([511, 643, 267, 616, 733, 976]) == 511/(643/267/616/733/976)\nassert solution.optimalDivision([82, 804, 505, 615, 698, 871, 535, 604]) == 82/(804/505/615/698/871/535/604)\nassert solution.optimalDivision([488, 578, 291]) == 488/(578/291)\nassert solution.optimalDivision([775, 191, 405, 264, 701]) == 775/(191/405/264/701)\nassert solution.optimalDivision([405, 941, 648, 349, 329, 207, 328]) == 405/(941/648/349/329/207/328)\nassert solution.optimalDivision([143, 107, 56, 70, 620, 834, 637, 772, 219]) == 143/(107/56/70/620/834/637/772/219)\nassert solution.optimalDivision([293, 815, 552, 391, 317, 101, 880]) == 293/(815/552/391/317/101/880)\nassert solution.optimalDivision([783, 271, 352, 470, 737, 247, 540, 139, 978]) == 783/(271/352/470/737/247/540/139/978)\nassert solution.optimalDivision([446, 763, 57]) == 446/(763/57)\nassert solution.optimalDivision([202, 158, 389, 483, 585, 782]) == 202/(158/389/483/585/782)\nassert solution.optimalDivision([716, 679, 939, 636, 347, 827, 739, 793, 179, 423]) == 716/(679/939/636/347/827/739/793/179/423)\nassert solution.optimalDivision([528, 481]) == 528/481\nassert solution.optimalDivision([87]) == 87\nassert solution.optimalDivision([765, 692, 558, 566, 822, 445, 225, 987, 264]) == 765/(692/558/566/822/445/225/987/264)",
  "inefficient_solution": "class Solution:\n    def optimalDivision(self, nums: List[int]) -> str:\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        if n == 2:\n            return str(nums[0]) + '/' + str(nums[1])\n        temp_str = ''\n        for i in range(n-1):\n            temp_str += str(nums[i]) + '/'\n        temp_str = temp_str[:-1] # remove the last '/'\n        parentheses = '(' * (n-2) + ')' * (n-2)\n        return str(nums[0]) + '/' + parentheses + temp_str",
  "is_python": true
}