{
  "problem_idx": 1647,
  "task_name": "Minimum Deletions to Make Character Frequencies Unique",
  "markdown_description": "\nA string `s` is called **good** if there are no two different characters in `s` that have the same **frequency**.\n\n\nGiven a string `s`, return *the **minimum** number of characters you need to delete to make* `s` ***good**.*\n\n\nThe **frequency** of a character in a string is the number of times it appears in the string. For example, in the string `\"aab\"`, the **frequency** of `'a'` is `2`, while the **frequency** of `'b'` is `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aab\"\n**Output:** 0\n**Explanation:** s is already good.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aaabbbcc\"\n**Output:** 2\n**Explanation:** You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"ceabaacb\"\n**Output:** 2\n**Explanation:** You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s`\u00a0contains only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minDeletions(self, s: str) -> int:\n        cnt = Counter(s)\n        ans, pre = 0, inf\n        for v in sorted(cnt.values(), reverse=True):\n            if pre == 0:\n                ans += v\n            elif v >= pre:\n                ans += v - pre + 1\n                pre -= 1\n            else:\n                pre = v\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom math import inf\n\nclass Solution:\n    def minDeletions(self, s: str) -> int:\n        cnt = Counter(s)\n        ans, pre = 0, inf\n        for v in sorted(cnt.values(), reverse=True):\n            if pre == 0:\n                ans += v\n            elif v >= pre:\n                ans += v - pre + 1\n                pre -= 1\n            else:\n                pre = v\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minDeletions(s)\n\n    return (s,), expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        inputs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minDeletions(*inputs) == expected_result\n        print(f\"assert solution.minDeletions{inputs} == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minDeletions{inputs} == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minDeletions('cvlbnrlr',) == 5\nassert solution.minDeletions('ufiw',) == 3\nassert solution.minDeletions('jkszvgrgfw',) == 7\nassert solution.minDeletions('gdkgo',) == 2\nassert solution.minDeletions('jnq',) == 2\nassert solution.minDeletions('ctwcinv',) == 4\nassert solution.minDeletions('lvqlm',) == 2\nassert solution.minDeletions('jp',) == 1\nassert solution.minDeletions('exmmojuta',) == 6\nassert solution.minDeletions('rb',) == 1\nassert solution.minDeletions('mlqqmqhltb',) == 4\nassert solution.minDeletions('dapbranh',) == 5\nassert solution.minDeletions('kjztdiuil',) == 6\nassert solution.minDeletions('wshwmr',) == 3\nassert solution.minDeletions('uha',) == 2\nassert solution.minDeletions('af',) == 1\nassert solution.minDeletions('goupdz',) == 5\nassert solution.minDeletions('ucekwft',) == 6\nassert solution.minDeletions('wwiurymh',) == 5\nassert solution.minDeletions('auup',) == 1\nassert solution.minDeletions('riq',) == 2\nassert solution.minDeletions('qeds',) == 3\nassert solution.minDeletions('nubu',) == 1\nassert solution.minDeletions('irgcigf',) == 4\nassert solution.minDeletions('m',) == 0\nassert solution.minDeletions('rdtklk',) == 3\nassert solution.minDeletions('xrxbnd',) == 3\nassert solution.minDeletions('mbdtu',) == 4\nassert solution.minDeletions('dnq',) == 2\nassert solution.minDeletions('ukr',) == 2\nassert solution.minDeletions('nnu',) == 0\nassert solution.minDeletions('c',) == 0\nassert solution.minDeletions('tqysy',) == 2\nassert solution.minDeletions('brwwkeeaqa',) == 7\nassert solution.minDeletions('jrmrnasbm',) == 6\nassert solution.minDeletions('j',) == 0\nassert solution.minDeletions('psmqx',) == 4\nassert solution.minDeletions('g',) == 0\nassert solution.minDeletions('inezcmyb',) == 7\nassert solution.minDeletions('kpmjstt',) == 4\nassert solution.minDeletions('t',) == 0\nassert solution.minDeletions('zmovwhrmi',) == 6\nassert solution.minDeletions('i',) == 0\nassert solution.minDeletions('hfnfzlqe',) == 5\nassert solution.minDeletions('y',) == 0\nassert solution.minDeletions('hkcymnrc',) == 5\nassert solution.minDeletions('lz',) == 1\nassert solution.minDeletions('r',) == 0\nassert solution.minDeletions('psutgbvu',) == 5\nassert solution.minDeletions('tplm',) == 3\nassert solution.minDeletions('ufs',) == 2\nassert solution.minDeletions('lbqjmku',) == 6\nassert solution.minDeletions('qrtmuqn',) == 4\nassert solution.minDeletions('oaa',) == 0\nassert solution.minDeletions('ahzgxiu',) == 6\nassert solution.minDeletions('bhsmqsqm',) == 5\nassert solution.minDeletions('enabg',) == 4\nassert solution.minDeletions('gtus',) == 3\nassert solution.minDeletions('jisqntoigl',) == 7\nassert solution.minDeletions('wwmrptres',) == 6\nassert solution.minDeletions('tmed',) == 3\nassert solution.minDeletions('znbhgfq',) == 6\nassert solution.minDeletions('c',) == 0\nassert solution.minDeletions('rqrc',) == 1\nassert solution.minDeletions('lniaq',) == 4\nassert solution.minDeletions('azhmraagxq',) == 6\nassert solution.minDeletions('beqkfkvv',) == 5\nassert solution.minDeletions('vhcumx',) == 5\nassert solution.minDeletions('bnj',) == 2\nassert solution.minDeletions('zefyp',) == 4\nassert solution.minDeletions('f',) == 0\nassert solution.minDeletions('fqmgj',) == 4\nassert solution.minDeletions('zbrxtytwlo',) == 7\nassert solution.minDeletions('gpeo',) == 3\nassert solution.minDeletions('bolyb',) == 2\nassert solution.minDeletions('x',) == 0\nassert solution.minDeletions('g',) == 0\nassert solution.minDeletions('wvizyxi',) == 4\nassert solution.minDeletions('aqdpaws',) == 4\nassert solution.minDeletions('xcqntbwcpd',) == 7\nassert solution.minDeletions('foewl',) == 4\nassert solution.minDeletions('dqkagcendq',) == 7\nassert solution.minDeletions('jcuiee',) == 3\nassert solution.minDeletions('znqbud',) == 5\nassert solution.minDeletions('xg',) == 1\nassert solution.minDeletions('rcijm',) == 4\nassert solution.minDeletions('w',) == 0\nassert solution.minDeletions('gjrpfx',) == 5\nassert solution.minDeletions('l',) == 0\nassert solution.minDeletions('wzdtraiand',) == 7\nassert solution.minDeletions('izxdspb',) == 6\nassert solution.minDeletions('qdvez',) == 4\nassert solution.minDeletions('qbjb',) == 1\nassert solution.minDeletions('yhimh',) == 2\nassert solution.minDeletions('rhn',) == 2\nassert solution.minDeletions('kbxddm',) == 3\nassert solution.minDeletions('flvq',) == 3\nassert solution.minDeletions('yscv',) == 3\nassert solution.minDeletions('gnbcnsz',) == 4\nassert solution.minDeletions('tircrttsbo',) == 4",
  "inefficient_solution": "class Solution:\n    def minDeletions(self, s: str) -> int:\n        char_freq = {}\n        for char in s:\n            if char in char_freq:\n                char_freq[char] += 1\n            else:\n                char_freq[char] = 1\n\n        max_freq = max(char_freq.values())\n\n        freq_list = []\n        for char in char_freq:\n            freq_list.append(char_freq[char])\n\n        freq_list.sort(reverse=True)\n\n        ans = 0\n        pre = float('inf')\n        for freq in freq_list:\n            if pre == 0:\n                ans += freq\n            elif freq >= pre:\n                ans += freq - pre + 1\n                pre -= 1\n            else:\n                pre = freq\n\n        return ans",
  "is_python": true
}