{
  "problem_idx": 1100,
  "task_name": "Find K",
  "markdown_description": "\nGiven a string `s` and an integer `k`, return *the number of substrings in* `s` *of length* `k` *with no repeated characters*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"havefunonleetcode\", k = 5\n**Output:** 6\n**Explanation:** There are 6 substrings they are: 'havef','avefu','vefun','efuno','etcod','tcode'.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"home\", k = 5\n**Output:** 0\n**Explanation:** Notice k can be larger than the length of s. In this case, it is not possible to find any substring.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s` consists of lowercase English letters.\n* `1 <= k <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def numKLenSubstrNoRepeats(self, s: str, k: int) -> int:\n        n = len(s)\n        if k > n or k > 26:\n            return 0\n        ans = j = 0\n        cnt = Counter()\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while cnt[c] > 1 or i - j + 1 > k:\n                cnt[s[j]] -= 1\n                j += 1\n            ans += i - j + 1 == k\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def numKLenSubstrNoRepeats(self, s: str, k: int) -> int:\n        n = len(s)\n        if k > n or k > 26:\n            return 0\n        ans = j = 0\n        cnt = Counter()\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while cnt[c] > 1 or i - j + 1 > k:\n                cnt[s[j]] -= 1\n                j += 1\n            ans += i - j + 1 == k\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    n = random.randint(1, 20)\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(n))\n\n    # Generate a random integer\n    k = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numKLenSubstrNoRepeats(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numKLenSubstrNoRepeats(s, k) == expected_result\n        print(f\"assert solution.numKLenSubstrNoRepeats('{s}', {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numKLenSubstrNoRepeats('{s}', {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numKLenSubstrNoRepeats('ucitdpvgtvl', 9) == 0\nassert solution.numKLenSubstrNoRepeats('chvze', 2) == 4\nassert solution.numKLenSubstrNoRepeats('zve', 4) == 0\nassert solution.numKLenSubstrNoRepeats('xohfu', 7) == 0\nassert solution.numKLenSubstrNoRepeats('c', 4) == 0\nassert solution.numKLenSubstrNoRepeats('btrtuaoktbhkfc', 2) == 13\nassert solution.numKLenSubstrNoRepeats('gsmky', 9) == 0\nassert solution.numKLenSubstrNoRepeats('pvhmstxtbcgqpvdvf', 2) == 16\nassert solution.numKLenSubstrNoRepeats('gapldpjmtl', 8) == 0\nassert solution.numKLenSubstrNoRepeats('ygbiapzcdwuujezuj', 2) == 15\nassert solution.numKLenSubstrNoRepeats('gngsulrypiib', 3) == 7\nassert solution.numKLenSubstrNoRepeats('lktyqz', 5) == 2\nassert solution.numKLenSubstrNoRepeats('yjw', 4) == 0\nassert solution.numKLenSubstrNoRepeats('inscmzhdvhatgbc', 7) == 5\nassert solution.numKLenSubstrNoRepeats('bfh', 8) == 0\nassert solution.numKLenSubstrNoRepeats('vxylrjurmdfkfv', 9) == 0\nassert solution.numKLenSubstrNoRepeats('qu', 7) == 0\nassert solution.numKLenSubstrNoRepeats('iqmml', 6) == 0\nassert solution.numKLenSubstrNoRepeats('zqhhbstceiuuwiliwaqt', 10) == 0\nassert solution.numKLenSubstrNoRepeats('riduihiz', 10) == 0\nassert solution.numKLenSubstrNoRepeats('lwqcgbytlhknxbi', 1) == 15\nassert solution.numKLenSubstrNoRepeats('qpwol', 9) == 0\nassert solution.numKLenSubstrNoRepeats('luik', 6) == 0\nassert solution.numKLenSubstrNoRepeats('vgftzmjgw', 3) == 7\nassert solution.numKLenSubstrNoRepeats('zhdgpjxxatj', 2) == 9\nassert solution.numKLenSubstrNoRepeats('wgdjanrl', 1) == 8\nassert solution.numKLenSubstrNoRepeats('zgpnmzdybxp', 4) == 8\nassert solution.numKLenSubstrNoRepeats('gqpcmrbmxzcnezfk', 4) == 12\nassert solution.numKLenSubstrNoRepeats('mbpavj', 3) == 4\nassert solution.numKLenSubstrNoRepeats('bwzrqrdr', 4) == 2\nassert solution.numKLenSubstrNoRepeats('svewmugxrs', 4) == 7\nassert solution.numKLenSubstrNoRepeats('malhs', 2) == 4\nassert solution.numKLenSubstrNoRepeats('lmezeooynf', 10) == 0\nassert solution.numKLenSubstrNoRepeats('wtwfrh', 4) == 2\nassert solution.numKLenSubstrNoRepeats('batx', 1) == 4\nassert solution.numKLenSubstrNoRepeats('qqi', 6) == 0\nassert solution.numKLenSubstrNoRepeats('skkrvaplhex', 3) == 7\nassert solution.numKLenSubstrNoRepeats('gkgabpxipjp', 10) == 0\nassert solution.numKLenSubstrNoRepeats('glug', 1) == 4\nassert solution.numKLenSubstrNoRepeats('jad', 2) == 2\nassert solution.numKLenSubstrNoRepeats('vh', 7) == 0\nassert solution.numKLenSubstrNoRepeats('mmjsanyoqxs', 7) == 4\nassert solution.numKLenSubstrNoRepeats('rpsmbsddle', 7) == 0\nassert solution.numKLenSubstrNoRepeats('iulygknvxjvecqdvqku', 6) == 7\nassert solution.numKLenSubstrNoRepeats('uazlwcafbmpisgqvljw', 8) == 10\nassert solution.numKLenSubstrNoRepeats('oorbormzohd', 3) == 8\nassert solution.numKLenSubstrNoRepeats('xl', 1) == 2\nassert solution.numKLenSubstrNoRepeats('dbxjz', 1) == 5\nassert solution.numKLenSubstrNoRepeats('oihrrfvhuuxgdvu', 8) == 0\nassert solution.numKLenSubstrNoRepeats('plejbp', 6) == 0\nassert solution.numKLenSubstrNoRepeats('yjw', 1) == 3\nassert solution.numKLenSubstrNoRepeats('kjirdatqespjjx', 5) == 8\nassert solution.numKLenSubstrNoRepeats('mwllcwomrg', 9) == 0\nassert solution.numKLenSubstrNoRepeats('guykhwlofyflemt', 7) == 4\nassert solution.numKLenSubstrNoRepeats('lkanprvcpi', 7) == 2\nassert solution.numKLenSubstrNoRepeats('nwmnoblbagmbgm', 6) == 1\nassert solution.numKLenSubstrNoRepeats('kxyuhptbscyluhsrwjt', 5) == 15\nassert solution.numKLenSubstrNoRepeats('biblxrmkumodohz', 9) == 0\nassert solution.numKLenSubstrNoRepeats('hsvxcobncuj', 9) == 0\nassert solution.numKLenSubstrNoRepeats('vmdxnwsmtmqikkt', 7) == 2\nassert solution.numKLenSubstrNoRepeats('jqabchlpuyxkcsujinpc', 9) == 7\nassert solution.numKLenSubstrNoRepeats('juesp', 10) == 0\nassert solution.numKLenSubstrNoRepeats('aezcebrofolqkal', 8) == 0\nassert solution.numKLenSubstrNoRepeats('opv', 4) == 0\nassert solution.numKLenSubstrNoRepeats('cdieef', 2) == 4\nassert solution.numKLenSubstrNoRepeats('iguiqfq', 5) == 1\nassert solution.numKLenSubstrNoRepeats('kwas', 2) == 3\nassert solution.numKLenSubstrNoRepeats('grucxzwmedjbtcsmupm', 4) == 15\nassert solution.numKLenSubstrNoRepeats('zastdrycqixqvxggzujn', 3) == 16\nassert solution.numKLenSubstrNoRepeats('xlpiuevpuvxlemk', 6) == 5\nassert solution.numKLenSubstrNoRepeats('sqvibkgpeibdl', 1) == 13\nassert solution.numKLenSubstrNoRepeats('bxxqyfts', 2) == 6\nassert solution.numKLenSubstrNoRepeats('plyluwowxcbwjemmx', 3) == 11\nassert solution.numKLenSubstrNoRepeats('ekrrinjltmch', 7) == 3\nassert solution.numKLenSubstrNoRepeats('p', 6) == 0\nassert solution.numKLenSubstrNoRepeats('ms', 8) == 0\nassert solution.numKLenSubstrNoRepeats('ptmcnhmccmhcmlaaszwq', 5) == 4\nassert solution.numKLenSubstrNoRepeats('nspzmbruinallc', 4) == 9\nassert solution.numKLenSubstrNoRepeats('atplcdvashzhvwtnrgc', 1) == 19\nassert solution.numKLenSubstrNoRepeats('wj', 4) == 0\nassert solution.numKLenSubstrNoRepeats('lsbhytlh', 9) == 0\nassert solution.numKLenSubstrNoRepeats('tpq', 9) == 0\nassert solution.numKLenSubstrNoRepeats('bfz', 5) == 0\nassert solution.numKLenSubstrNoRepeats('xkjwwvqcgtzwgvcg', 4) == 9\nassert solution.numKLenSubstrNoRepeats('cmnanhca', 5) == 0\nassert solution.numKLenSubstrNoRepeats('xwgsmucraaia', 1) == 12\nassert solution.numKLenSubstrNoRepeats('qaih', 5) == 0\nassert solution.numKLenSubstrNoRepeats('ozl', 5) == 0\nassert solution.numKLenSubstrNoRepeats('xaklklmzqksa', 5) == 4\nassert solution.numKLenSubstrNoRepeats('kogcajxncamqvixg', 7) == 7\nassert solution.numKLenSubstrNoRepeats('avbfavjluktg', 6) == 5\nassert solution.numKLenSubstrNoRepeats('tgspoff', 4) == 3\nassert solution.numKLenSubstrNoRepeats('w', 6) == 0\nassert solution.numKLenSubstrNoRepeats('eegijzcgkwz', 7) == 1\nassert solution.numKLenSubstrNoRepeats('ihafgltfye', 10) == 0\nassert solution.numKLenSubstrNoRepeats('wfsmd', 4) == 2\nassert solution.numKLenSubstrNoRepeats('if', 10) == 0\nassert solution.numKLenSubstrNoRepeats('pnh', 2) == 2\nassert solution.numKLenSubstrNoRepeats('rlamvdngvutamcjs', 9) == 3\nassert solution.numKLenSubstrNoRepeats('vqqhxunc', 4) == 3",
  "inefficient_solution": "class Solution:\n    def numKLenSubstrNoRepeats(self, s: str, k: int) -> int:\n        n = len(s)\n        if k > n or k > 26:\n            return 0\n        ans = j = 0\n        count = [0] * 26\n        for i in range(n):\n            for char in s:\n                index = ord(char) - ord('a')\n                count[index] = 1\n            if i - j + 1 > k:\n                count = [0] * 26\n                j = i - k + 1\n            for char in s[j:i+1]:\n                index = ord(char) - ord('a')\n                count[index] += 1\n            if all(i == 0 for i in count):\n                ans += 1\n        return ans",
  "is_python": true
}