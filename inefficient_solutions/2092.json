{
  "problem_idx": 2092,
  "task_name": "Find All People With Secret",
  "markdown_description": "\nYou are given an integer `n` indicating there are `n` people numbered from `0` to `n - 1`. You are also given a **0-indexed** 2D integer array `meetings` where `meetings[i] = [xi, yi, timei]` indicates that person `xi` and person `yi` have a meeting at `timei`. A person may attend **multiple meetings** at the same time. Finally, you are given an integer `firstPerson`.\n\n\nPerson `0` has a **secret** and initially shares the secret with a person `firstPerson` at time `0`. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person `xi` has the secret at `timei`, then they will share the secret with person `yi`, and vice versa.\n\n\nThe secrets are shared **instantaneously**. That is, a person may receive the secret and share it with people in other meetings within the same time frame.\n\n\nReturn *a list of all the people that have the secret after all the meetings have taken place.* You may return the answer in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1\n**Output:** [0,1,2,3,5]\n**Explanation:**At time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3\n**Output:** [0,1,3]\n**Explanation:**\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1\n**Output:** [0,1,2,3,4]\n**Explanation:**\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `1 <= meetings.length <= 105`\n* `meetings[i].length == 3`\n* `0 <= xi, yi <= n - 1`\n* `xi != yi`\n* `1 <= timei <= 105`\n* `1 <= firstPerson <= n - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def findAllPeople(\n        self, n: int, meetings: List[List[int]], firstPerson: int\n    ) -> List[int]:\n        vis = [False] * n\n        vis[0] = vis[firstPerson] = True\n        meetings.sort(key=lambda x: x[2])\n        i, m = 0, len(meetings)\n        while i < m:\n            j = i\n            while j + 1 < m and meetings[j + 1][2] == meetings[i][2]:\n                j += 1\n            s = set()\n            g = defaultdict(list)\n            for x, y, _ in meetings[i : j + 1]:\n                g[x].append(y)\n                g[y].append(x)\n                s.update([x, y])\n            q = deque([u for u in s if vis[u]])\n            while q:\n                u = q.popleft()\n                for v in g[u]:\n                    if not vis[v]:\n                        vis[v] = True\n                        q.append(v)\n            i = j + 1\n        return [i for i, v in enumerate(vis) if v]\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\nfrom collections import deque\n\n\nclass Solution:\n    def findAllPeople(\n        self, n: int, meetings: List[List[int]], firstPerson: int\n    ) -> List[int]:\n        vis = [False] * n\n        vis[0] = vis[firstPerson] = True\n        meetings.sort(key=lambda x: x[2])\n        i, m = 0, len(meetings)\n        while i < m:\n            j = i\n            while j + 1 < m and meetings[j + 1][2] == meetings[i][2]:\n                j += 1\n            s = set()\n            g = defaultdict(list)\n            for x, y, _ in meetings[i : j + 1]:\n                g[x].append(y)\n                g[y].append(x)\n                s.update([x, y])\n            q = deque([u for u in s if vis[u]])\n            while q:\n                u = q.popleft()\n                for v in g[u]:\n                    if not vis[v]:\n                        vis[v] = True\n                        q.append(v)\n            i = j + 1\n        return [i for i, v in enumerate(vis) if v]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate number of people (n)\n    n = random.randint(2, 20)\n    \n    # Generate random meetings list\n    meetings = []\n    for _ in range(random.randint(2, 10)):\n        x = random.randint(0, n - 1)\n        y = random.randint(0, n - 1)\n        if x != y:\n            time = random.randint(1, 100)\n            meetings.append([x, y, time])\n    \n    # Generate a random firstPerson\n    firstPerson = random.randint(0, n - 2)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findAllPeople(n, meetings, firstPerson)\n\n    return n, meetings, firstPerson, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, meetings, firstPerson, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findAllPeople(n, meetings, firstPerson) == expected_result\n        print(f\"assert solution.findAllPeople({n}, {meetings}, {firstPerson}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findAllPeople({n}, {meetings}, {firstPerson}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findAllPeople(3, [[2, 0, 35], [1, 0, 50], [2, 1, 73], [1, 2, 85], [2, 1, 86], [2, 1, 89]], 0) == [0, 1, 2]\nassert solution.findAllPeople(2, [[0, 1, 70]], 0) == [0, 1]\nassert solution.findAllPeople(18, [[4, 5, 14]], 8) == [0, 8]\nassert solution.findAllPeople(10, [[3, 5, 25], [9, 4, 35], [7, 2, 38], [7, 4, 39], [8, 3, 47]], 0) == [0]\nassert solution.findAllPeople(14, [[10, 9, 4], [13, 10, 8], [10, 6, 20], [4, 3, 38], [1, 0, 80], [3, 10, 84]], 8) == [0, 1, 8]\nassert solution.findAllPeople(7, [[0, 4, 7], [3, 4, 41], [3, 4, 58]], 5) == [0, 3, 4, 5]\nassert solution.findAllPeople(2, [[0, 1, 3], [0, 1, 23], [1, 0, 40], [1, 0, 83], [1, 0, 96]], 0) == [0, 1]\nassert solution.findAllPeople(7, [[4, 1, 20], [6, 3, 31], [6, 3, 84], [0, 4, 86], [2, 1, 92]], 2) == [0, 1, 2, 4]\nassert solution.findAllPeople(9, [[4, 8, 12], [6, 5, 14], [0, 8, 37], [8, 3, 56], [1, 5, 91]], 3) == [0, 3, 8]\nassert solution.findAllPeople(15, [[0, 14, 1], [7, 8, 15], [10, 3, 37], [10, 0, 43], [5, 9, 43], [2, 7, 45], [8, 2, 45], [11, 10, 46], [4, 3, 94]], 9) == [0, 5, 9, 10, 11, 14]\nassert solution.findAllPeople(15, [[9, 0, 21], [0, 9, 31], [3, 11, 34], [5, 14, 56], [1, 0, 64]], 5) == [0, 1, 5, 9, 14]\nassert solution.findAllPeople(17, [[7, 6, 22], [2, 16, 24], [12, 5, 36], [9, 1, 49], [10, 13, 68], [12, 5, 89], [4, 5, 89], [10, 16, 93]], 8) == [0, 8]\nassert solution.findAllPeople(19, [[1, 3, 7], [4, 18, 10], [2, 17, 37], [10, 6, 73], [14, 11, 92]], 6) == [0, 6, 10]\nassert solution.findAllPeople(12, [[1, 2, 5], [1, 9, 8], [2, 3, 9], [10, 1, 11], [8, 2, 17], [11, 5, 20], [3, 4, 58], [1, 7, 66]], 9) == [0, 1, 7, 9, 10]\nassert solution.findAllPeople(17, [[7, 3, 7], [13, 3, 7], [10, 2, 14], [10, 9, 16], [3, 4, 38], [6, 4, 49], [6, 16, 54], [14, 8, 74], [2, 10, 91], [2, 14, 96]], 7) == [0, 3, 4, 6, 7, 13, 16]\nassert solution.findAllPeople(5, [[0, 2, 20], [1, 3, 41], [4, 2, 48], [0, 4, 84], [3, 1, 93], [0, 2, 100]], 0) == [0, 2, 4]\nassert solution.findAllPeople(4, [[2, 0, 5], [2, 0, 26], [1, 0, 38], [3, 2, 45], [0, 3, 56], [0, 1, 86]], 2) == [0, 1, 2, 3]\nassert solution.findAllPeople(4, [[2, 1, 28], [3, 2, 66], [0, 1, 83]], 2) == [0, 1, 2, 3]\nassert solution.findAllPeople(7, [[1, 6, 15], [2, 0, 26], [4, 2, 40], [6, 2, 60], [5, 6, 62], [5, 0, 75], [2, 4, 87], [6, 1, 100]], 2) == [0, 1, 2, 4, 5, 6]\nassert solution.findAllPeople(8, [[4, 5, 50]], 1) == [0, 1]\nassert solution.findAllPeople(19, [[2, 7, 13], [4, 3, 33], [16, 8, 47], [14, 2, 64]], 16) == [0, 8, 16]\nassert solution.findAllPeople(13, [[7, 0, 31], [7, 2, 75], [5, 11, 86]], 8) == [0, 2, 7, 8]\nassert solution.findAllPeople(8, [[1, 2, 4], [6, 1, 8], [7, 1, 75]], 3) == [0, 3]\nassert solution.findAllPeople(15, [[5, 10, 1], [10, 11, 6], [12, 13, 41], [4, 11, 45], [7, 2, 49], [11, 2, 76], [6, 11, 76], [7, 2, 86], [12, 10, 97]], 11) == [0, 2, 4, 6, 7, 10, 11, 12]\nassert solution.findAllPeople(14, [[6, 8, 1], [11, 12, 32], [7, 3, 40], [0, 13, 49], [12, 7, 54], [13, 10, 57], [4, 11, 57], [6, 0, 69], [10, 9, 90], [11, 13, 97]], 6) == [0, 6, 8, 9, 10, 11, 13]\nassert solution.findAllPeople(2, [[1, 0, 2], [1, 0, 35], [0, 1, 36]], 0) == [0, 1]\nassert solution.findAllPeople(4, [[1, 0, 3], [1, 0, 20], [1, 2, 87], [0, 3, 97]], 2) == [0, 1, 2, 3]\nassert solution.findAllPeople(4, [[0, 2, 3], [2, 0, 42], [1, 0, 83], [0, 2, 99]], 2) == [0, 1, 2]\nassert solution.findAllPeople(5, [[1, 0, 16], [2, 3, 35], [0, 2, 43], [2, 0, 44], [2, 1, 45], [4, 0, 97]], 3) == [0, 1, 2, 3, 4]\nassert solution.findAllPeople(12, [[0, 5, 5], [4, 0, 15], [0, 10, 35], [7, 11, 50], [9, 7, 56], [8, 1, 60], [11, 1, 62], [1, 9, 89], [9, 3, 94]], 9) == [0, 1, 3, 4, 5, 7, 9, 10]\nassert solution.findAllPeople(19, [[0, 14, 78], [5, 4, 96]], 17) == [0, 14, 17]\nassert solution.findAllPeople(20, [[2, 16, 18], [5, 15, 21], [4, 5, 54], [11, 15, 56], [9, 19, 60], [16, 9, 92], [3, 17, 100]], 4) == [0, 4, 5]\nassert solution.findAllPeople(20, [[17, 13, 11], [0, 17, 28], [15, 18, 47], [7, 10, 56], [12, 6, 59], [12, 8, 90], [17, 0, 93]], 15) == [0, 15, 17, 18]\nassert solution.findAllPeople(18, [[7, 3, 11], [0, 17, 38]], 11) == [0, 11, 17]\nassert solution.findAllPeople(11, [[6, 7, 3], [9, 8, 10], [6, 5, 12], [3, 8, 43], [2, 5, 78]], 6) == [0, 2, 5, 6, 7]\nassert solution.findAllPeople(15, [[13, 9, 16], [14, 10, 42], [8, 7, 56], [3, 7, 63], [2, 13, 69], [10, 12, 71], [7, 0, 83], [14, 2, 97]], 4) == [0, 4, 7]\nassert solution.findAllPeople(4, [[3, 0, 21], [1, 2, 32], [0, 2, 57], [3, 0, 59], [3, 2, 60], [3, 0, 71], [2, 0, 83]], 2) == [0, 1, 2, 3]\nassert solution.findAllPeople(19, [[11, 17, 38], [12, 6, 69], [16, 14, 97]], 13) == [0, 13]\nassert solution.findAllPeople(19, [[1, 16, 30], [15, 16, 44], [3, 17, 48], [10, 3, 49], [13, 10, 53], [7, 16, 55], [18, 5, 64], [12, 13, 89]], 14) == [0, 14]\nassert solution.findAllPeople(18, [[11, 3, 2], [17, 11, 9], [5, 13, 30], [6, 15, 32], [8, 11, 36], [5, 17, 51]], 9) == [0, 9]\nassert solution.findAllPeople(4, [[1, 2, 5], [0, 3, 36], [1, 0, 79]], 2) == [0, 1, 2, 3]\nassert solution.findAllPeople(16, [[14, 11, 15], [4, 8, 17], [7, 8, 38], [13, 3, 49], [9, 6, 52], [7, 12, 74]], 14) == [0, 11, 14]\nassert solution.findAllPeople(12, [[2, 11, 3], [4, 9, 21], [7, 3, 89], [9, 6, 92], [4, 3, 93]], 0) == [0]\nassert solution.findAllPeople(18, [[16, 13, 9], [14, 17, 14], [8, 5, 33]], 6) == [0, 6]\nassert solution.findAllPeople(3, [[0, 1, 17], [1, 0, 26], [0, 2, 32], [2, 1, 84], [2, 1, 95]], 1) == [0, 1, 2]\nassert solution.findAllPeople(5, [[3, 2, 4], [0, 1, 40], [2, 4, 67], [1, 4, 84], [1, 3, 100]], 1) == [0, 1, 3, 4]\nassert solution.findAllPeople(17, [[3, 2, 24], [7, 14, 42], [6, 7, 46], [14, 13, 61], [10, 5, 80], [8, 1, 96]], 10) == [0, 5, 10]\nassert solution.findAllPeople(5, [[0, 1, 10], [1, 2, 11], [0, 4, 29], [1, 0, 83], [3, 0, 88], [4, 3, 91], [2, 1, 92]], 2) == [0, 1, 2, 3, 4]\nassert solution.findAllPeople(18, [[12, 14, 13], [10, 0, 19], [3, 13, 46], [11, 13, 52], [2, 5, 73], [6, 15, 82]], 9) == [0, 9, 10]\nassert solution.findAllPeople(16, [[12, 10, 24], [13, 2, 50], [4, 3, 84]], 10) == [0, 10, 12]\nassert solution.findAllPeople(8, [[5, 3, 33], [0, 4, 77]], 0) == [0, 4]\nassert solution.findAllPeople(14, [[7, 6, 7], [6, 2, 19], [6, 11, 26], [12, 7, 47], [11, 5, 64], [6, 11, 64], [5, 9, 70], [6, 8, 84]], 1) == [0, 1]\nassert solution.findAllPeople(7, [[5, 0, 4], [4, 5, 12], [5, 1, 16], [1, 2, 59], [4, 6, 69], [5, 0, 79]], 5) == [0, 1, 2, 4, 5, 6]\nassert solution.findAllPeople(9, [[0, 2, 13], [3, 4, 17], [0, 8, 44], [1, 5, 57], [1, 4, 65]], 6) == [0, 2, 6, 8]\nassert solution.findAllPeople(17, [[10, 4, 19], [13, 11, 58], [9, 2, 63], [8, 0, 67], [10, 2, 92]], 14) == [0, 8, 14]\nassert solution.findAllPeople(15, [[5, 7, 80], [6, 2, 85]], 11) == [0, 11]\nassert solution.findAllPeople(9, [[2, 6, 6], [3, 0, 52], [6, 4, 74], [4, 6, 77]], 3) == [0, 3]\nassert solution.findAllPeople(14, [[8, 11, 2], [4, 11, 14], [12, 9, 71]], 7) == [0, 7]\nassert solution.findAllPeople(3, [[0, 1, 3], [1, 0, 6], [2, 0, 17], [2, 0, 28], [0, 2, 32]], 1) == [0, 1, 2]\nassert solution.findAllPeople(20, [[7, 16, 45], [10, 4, 51], [7, 19, 94]], 6) == [0, 6]\nassert solution.findAllPeople(6, [[0, 3, 7], [5, 4, 13], [2, 0, 32], [1, 2, 32], [1, 2, 48], [3, 0, 49], [5, 1, 53], [2, 0, 68], [4, 3, 90]], 2) == [0, 1, 2, 3, 4, 5]\nassert solution.findAllPeople(12, [[5, 9, 3], [11, 5, 16], [9, 0, 36], [6, 10, 42], [10, 2, 48], [8, 3, 76], [9, 8, 83]], 9) == [0, 5, 8, 9, 11]\nassert solution.findAllPeople(14, [[6, 2, 41], [0, 5, 61], [13, 0, 71], [9, 3, 74]], 6) == [0, 2, 5, 6, 13]\nassert solution.findAllPeople(10, [[0, 2, 6], [9, 8, 42], [5, 0, 52], [6, 1, 96]], 2) == [0, 2, 5]\nassert solution.findAllPeople(16, [[3, 7, 9], [11, 7, 16], [15, 9, 32], [5, 15, 33], [12, 4, 60], [12, 6, 64], [9, 1, 70], [14, 7, 74], [8, 9, 99]], 3) == [0, 3, 7, 11, 14]\nassert solution.findAllPeople(15, [[5, 6, 2], [4, 13, 33], [8, 6, 79], [10, 5, 90], [0, 8, 99]], 12) == [0, 8, 12]\nassert solution.findAllPeople(15, [[6, 14, 7], [7, 8, 10], [10, 5, 42], [9, 2, 49], [4, 2, 66], [2, 13, 70], [6, 1, 73], [10, 6, 81], [10, 8, 90], [12, 2, 99]], 7) == [0, 7, 8, 10]\nassert solution.findAllPeople(7, [[0, 1, 24], [1, 5, 40]], 4) == [0, 1, 4, 5]\nassert solution.findAllPeople(2, [[1, 0, 85], [0, 1, 92]], 0) == [0, 1]\nassert solution.findAllPeople(3, [[2, 0, 3], [1, 2, 3], [2, 1, 17], [1, 2, 60], [0, 1, 83], [0, 2, 89]], 1) == [0, 1, 2]\nassert solution.findAllPeople(3, [[1, 2, 2], [2, 1, 11], [2, 1, 42], [2, 1, 56], [2, 0, 85], [2, 0, 88]], 1) == [0, 1, 2]\nassert solution.findAllPeople(20, [[5, 1, 45], [19, 9, 47], [0, 9, 57], [4, 2, 68], [0, 15, 98]], 5) == [0, 1, 5, 9, 15]\nassert solution.findAllPeople(20, [[15, 4, 76], [16, 18, 77]], 8) == [0, 8]\nassert solution.findAllPeople(10, [[6, 7, 1], [6, 4, 34], [6, 7, 42], [2, 9, 73]], 0) == [0]\nassert solution.findAllPeople(11, [[3, 9, 41], [10, 9, 50], [6, 8, 82], [5, 9, 86], [4, 3, 98]], 9) == [0, 3, 4, 5, 9, 10]\nassert solution.findAllPeople(2, [[1, 0, 11], [0, 1, 15], [1, 0, 43], [1, 0, 91], [0, 1, 92]], 0) == [0, 1]\nassert solution.findAllPeople(10, [[1, 0, 10], [0, 9, 68], [6, 3, 74], [6, 0, 84]], 2) == [0, 1, 2, 6, 9]\nassert solution.findAllPeople(10, [[4, 7, 45], [7, 3, 68], [9, 2, 100]], 5) == [0, 5]\nassert solution.findAllPeople(19, [[12, 7, 16], [10, 13, 67], [6, 1, 67], [11, 16, 95], [17, 6, 100]], 12) == [0, 7, 12]\nassert solution.findAllPeople(7, [[6, 2, 3], [5, 0, 7], [3, 2, 9], [5, 0, 82], [3, 2, 100]], 2) == [0, 2, 3, 5, 6]\nassert solution.findAllPeople(6, [[1, 5, 5], [4, 3, 9], [2, 1, 13], [2, 1, 35], [1, 3, 47], [1, 5, 96]], 0) == [0]\nassert solution.findAllPeople(2, [[1, 0, 65], [1, 0, 92]], 0) == [0, 1]\nassert solution.findAllPeople(14, [[0, 2, 3], [4, 6, 5], [3, 0, 8], [2, 7, 9], [0, 13, 42], [7, 11, 52], [12, 10, 58], [2, 10, 86], [11, 6, 92], [1, 8, 98]], 11) == [0, 2, 3, 6, 7, 10, 11, 13]\nassert solution.findAllPeople(17, [[1, 8, 38], [14, 1, 45], [14, 11, 47], [1, 8, 51], [5, 11, 55], [6, 4, 72], [15, 1, 83], [2, 0, 91], [1, 3, 96], [11, 1, 96]], 8) == [0, 1, 2, 3, 5, 8, 11, 14, 15]\nassert solution.findAllPeople(5, [[2, 0, 49], [3, 0, 58]], 2) == [0, 2, 3]\nassert solution.findAllPeople(14, [[8, 9, 22], [1, 5, 24], [5, 6, 36], [8, 1, 65], [10, 2, 75], [0, 1, 80], [5, 3, 99]], 8) == [0, 1, 8, 9]\nassert solution.findAllPeople(6, [[3, 0, 43], [1, 2, 69], [3, 0, 80]], 2) == [0, 1, 2, 3]\nassert solution.findAllPeople(14, [[3, 9, 33], [12, 6, 41], [8, 2, 60]], 0) == [0]\nassert solution.findAllPeople(8, [[0, 6, 21], [0, 4, 30], [4, 1, 40]], 2) == [0, 1, 2, 4, 6]\nassert solution.findAllPeople(5, [[0, 1, 68], [0, 3, 76], [0, 1, 83]], 3) == [0, 1, 3]\nassert solution.findAllPeople(17, [[4, 6, 13], [2, 11, 61], [11, 3, 67], [10, 9, 70], [11, 14, 78], [15, 0, 90]], 5) == [0, 5, 15]\nassert solution.findAllPeople(15, [[12, 7, 98]], 4) == [0, 4]\nassert solution.findAllPeople(16, [[13, 10, 25], [14, 3, 31], [5, 10, 33], [3, 6, 33], [3, 9, 41], [4, 5, 83], [7, 2, 84]], 14) == [0, 3, 6, 9, 14]\nassert solution.findAllPeople(13, [[10, 12, 6], [10, 2, 8], [2, 0, 14], [11, 8, 23], [7, 9, 32], [0, 1, 42], [1, 9, 56], [0, 10, 61], [2, 10, 67], [0, 11, 91]], 2) == [0, 1, 2, 9, 10, 11]\nassert solution.findAllPeople(8, [[2, 5, 47], [4, 1, 55]], 3) == [0, 3]\nassert solution.findAllPeople(16, [[5, 14, 22], [14, 7, 26], [1, 13, 31], [2, 1, 37], [13, 9, 45], [1, 7, 68], [9, 5, 86]], 2) == [0, 1, 2, 7]\nassert solution.findAllPeople(2, [[0, 1, 21], [0, 1, 26], [1, 0, 49], [0, 1, 91]], 0) == [0, 1]\nassert solution.findAllPeople(7, [], 1) == [0, 1]\nassert solution.findAllPeople(12, [[1, 10, 47], [7, 9, 92], [6, 3, 100]], 8) == [0, 8]\nassert solution.findAllPeople(6, [[4, 0, 21], [2, 0, 28], [1, 3, 30], [0, 5, 40], [1, 2, 64], [1, 0, 88], [5, 0, 99]], 2) == [0, 1, 2, 4, 5]",
  "inefficient_solution": "class Solution:\n    def findAllPeople(\n        self, n: int, meetings: List[List[int]], firstPerson: int\n    ) -> List[int]:\n        vis = [False] * n\n        vis[0] = vis[firstPerson] = True\n        meetings.sort(key=lambda x: x[2])\n        i, m = 0, len(meetings)\n        while i < m:\n            j = i\n            while j + 1 < m and meetings[j + 1][2] == meetings[i][2]:\n                j += 1\n            s = set()\n            g = defaultdict(list)\n            for x, y, _ in meetings[i : j + 1]:\n                g[x].append(y)\n                g[y].append(x)\n                s.update([x, y])\n            q = deque([u for u in s if vis[u]])\n            while q:\n                u = q.popleft()\n                for v in g[u]:\n                    vis[v] = True\n                    q.extend([v] * 1000)\n            i = j + 1\n        return [i for i, v in enumerate(vis) if v]",
  "is_python": true
}