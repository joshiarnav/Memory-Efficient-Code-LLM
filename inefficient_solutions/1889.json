{
  "problem_idx": 1889,
  "task_name": "Minimum Space Wasted From Packaging",
  "markdown_description": "\nYou have `n` packages that you are trying to place in boxes, **one package in each box**. There are `m` suppliers that each produce boxes of **different sizes** (with infinite supply). A package can be placed in a box if the size of the package is **less than or equal to** the size of the box.\n\n\nThe package sizes are given as an integer array `packages`, where `packages[i]` is the **size** of the `ith` package. The suppliers are given as a 2D integer array `boxes`, where `boxes[j]` is an array of **box sizes** that the `jth` supplier produces.\n\n\nYou want to choose a **single supplier** and use boxes from them such that the **total wasted space** is **minimized**. For each package in a box, we define the space **wasted** to be `size of the box - size of the package`. The **total wasted space** is the sum of the space wasted in **all** the boxes.\n\n\n* For example, if you have to fit packages with sizes `[2,3,5]` and the supplier offers boxes of sizes `[4,8]`, you can fit the packages of size-`2` and size-`3` into two boxes of size-`4` and the package with size-`5` into a box of size-`8`. This would result in a waste of `(4-2) + (4-3) + (8-5) = 6`.\n\n\nReturn *the **minimum total wasted space** by choosing the box supplier **optimally**, or* `-1` *if it is **impossible** to fit all the packages inside boxes.* Since the answer may be **large**, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** packages = [2,3,5], boxes = [[4,8],[2,8]]\n**Output:** 6\n**Explanation**: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]\n**Output:** -1\n**Explanation:** There is no box that the package of size 5 can fit in.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]\n**Output:** 9\n**Explanation:** It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == packages.length`\n* `m == boxes.length`\n* `1 <= n <= 105`\n* `1 <= m <= 105`\n* `1 <= packages[i] <= 105`\n* `1 <= boxes[j].length <= 105`\n* `1 <= boxes[j][k] <= 105`\n* `sum(boxes[j].length) <= 105`\n* The elements in `boxes[j]` are **distinct**.\n\n\n",
  "canonical_solution": "class Solution:\n    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:\n        mod = 10**9 + 7\n        ans = inf\n        packages.sort()\n        for box in boxes:\n            box.sort()\n            if packages[-1] > box[-1]:\n                continue\n            s = i = 0\n            for b in box:\n                j = bisect_right(packages, b, lo=i)\n                s += (j - i) * b\n                i = j\n            ans = min(ans, s)\n        if ans == inf:\n            return -1\n        return (ans - sum(packages)) % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minWastedSpace(self, packages, boxes):\n        mod = 10**9 + 7\n        ans = float('inf')\n        packages.sort()\n        for box in boxes:\n            box.sort()\n            if packages[-1] > box[-1]:\n                continue\n            s = i = 0\n            for b in box:\n                j = bisect_right(packages, b, lo=i)\n                s += (j - i) * b\n                i = j\n            ans = min(ans, s)\n        if ans == float('inf'):\n            return -1\n        return (ans - sum(packages)) % mod\n\ndef generate_test_case():\n    # Generate random packages and boxes lists\n    packages = random.sample(range(1, 101), random.randint(2, 10))\n    boxes = []\n    num_boxes = random.randint(1, 10)\n    for _ in range(num_boxes):\n        num_sizes = random.randint(1, 10)\n        box = random.sample(range(1, 101), num_sizes)\n        boxes.append(box)\n\n    # Calculate the expected result using the provided Solution class\n    solution = Solution()\n    expected_result = solution.minWastedSpace(packages, boxes)\n    \n    return packages, boxes, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        packages, boxes, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minWastedSpace(packages, boxes) == expected_result\n        print(f\"assert solution.minWastedSpace({packages}, {boxes}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minWastedSpace({packages}, {boxes}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minWastedSpace([11, 27, 57, 80], [[23, 31, 75, 83, 89, 97], [30, 54], [16, 36, 50, 55, 74, 88, 89, 92, 94], [30, 38, 41, 68, 85, 99], [10, 13, 20, 24, 36, 68, 84, 85, 95, 100], [35, 87], [66, 73], [17, 26, 63, 65, 76, 95]]) == 26\nassert solution.minWastedSpace([8, 39, 52, 62, 85, 92], [[8, 27, 31, 33, 57, 58, 83, 86], [5, 11, 23, 41, 47, 68, 72, 73, 76, 83], [28, 51, 52, 62, 71, 76, 83, 90, 98], [54, 96]]) == 43\nassert solution.minWastedSpace([11, 12, 61, 83, 95, 98], [[82], [12, 22, 40, 50, 65, 68, 83, 93]]) == -1\nassert solution.minWastedSpace([10, 22, 29, 58, 99], [[25, 33, 48, 52, 56, 78, 87, 96, 100], [17, 18, 26, 37, 56, 72]]) == 43\nassert solution.minWastedSpace([32, 54, 68, 85], [[17, 21, 23, 36, 42, 44, 45, 53, 59, 62]]) == -1\nassert solution.minWastedSpace([4, 55, 60, 71], [[3, 4, 15, 18, 23, 28, 38, 61], [9, 21, 74], [1, 6, 10, 24, 28, 30, 63, 69, 88], [3, 44, 61, 63, 68, 82, 84]]) == 30\nassert solution.minWastedSpace([6, 50, 68], [[3, 6, 9, 42, 61]]) == -1\nassert solution.minWastedSpace([8, 16, 18, 59, 72, 79, 82], [[66], [6, 19, 27, 37, 39, 49, 99], [5, 8, 41, 46, 57, 66, 89], [4, 17, 31, 46, 57, 62, 70, 93, 99, 100]]) == 72\nassert solution.minWastedSpace([47, 58, 73, 80, 97], [[2, 7, 12, 43, 46, 50, 62, 74, 86, 87], [40, 61], [6, 10, 14, 24, 71, 79, 80, 82, 83, 88], [4, 8, 46, 61], [7, 13, 26, 53, 75, 79, 98], [12, 14, 15, 26, 27, 33, 54, 70, 85, 92], [2, 49, 69, 82, 89, 90]]) == 44\nassert solution.minWastedSpace([4, 25, 26, 63, 64, 66, 69, 77, 91, 94], [[20, 59, 61, 94], [15, 28, 61, 66, 70, 85, 86, 90, 92, 95]]) == 32\nassert solution.minWastedSpace([26, 28, 29, 31, 41, 46, 62], [[15, 33, 36, 43, 72, 75, 76], [5], [56, 73, 100], [12, 21, 23, 47, 55, 67, 88], [19, 87, 100], [23]]) == 56\nassert solution.minWastedSpace([7, 40, 47, 67, 73, 74, 87], [[9, 29, 47, 52, 53, 76, 80, 84, 88, 95], [4, 6, 12, 25, 27, 64, 75], [13, 35]]) == 24\nassert solution.minWastedSpace([6, 9, 33, 46, 53, 62, 66], [[8, 16, 39, 86], [7, 8, 10, 21, 22, 44, 63, 96, 99]]) == 71\nassert solution.minWastedSpace([8, 41, 74, 95], [[16, 30, 37, 38, 45, 84, 85, 94, 98]]) == 25\nassert solution.minWastedSpace([22, 55, 61, 63, 88, 93, 98], [[99], [16, 23, 37]]) == 213\nassert solution.minWastedSpace([1, 42, 87], [[20]]) == -1\nassert solution.minWastedSpace([37, 51, 77, 79, 83], [[24, 39, 43, 59, 66, 78], [67, 84], [5, 8, 41], [23, 45, 46, 52, 66, 72, 78, 82, 83, 97], [75], [62, 73, 76, 94], [60, 82, 83, 94], [77], [22, 35, 36, 40, 60, 96]]) == 13\nassert solution.minWastedSpace([21, 22, 25, 32, 36, 41, 65, 68, 93], [[15, 28, 29, 39, 40, 46, 65, 70, 72, 91], [4, 31, 57, 90, 95], [30, 37, 38, 51, 69, 77, 95], [45], [3, 4, 17, 50], [100], [1, 13, 20, 23, 39, 49, 75, 91, 93], [14, 19, 56, 57, 79], [1, 6, 14, 15, 56, 71, 78, 98]]) == 45\nassert solution.minWastedSpace([10, 58], [[12, 21, 32, 66, 87, 96], [7, 21, 48, 58], [24, 68, 84], [25, 64, 96], [8, 56, 57, 96]]) == 10\nassert solution.minWastedSpace([19, 25, 82], [[30, 45, 60], [8, 9, 29, 34, 63, 84, 91, 95, 100], [47, 56, 95], [15, 25, 65, 67, 85, 86, 87]]) == 9\nassert solution.minWastedSpace([4, 19, 23, 44, 68, 97], [[33, 48, 66, 70, 80, 100], [29, 64, 71, 76, 93], [18, 26, 98, 99], [22, 47, 78], [3, 5, 11, 45, 49, 55, 56, 88, 94, 98], [25, 37, 48, 51, 53, 64, 80, 82, 90, 96], [9, 15, 30, 32, 47, 64, 72, 90, 93, 99], [19, 41, 88, 100], [1, 24, 60, 69, 71, 74, 75, 76]]) == 32\nassert solution.minWastedSpace([2, 17, 33, 38, 39, 56, 79, 96, 100], [[6, 14, 17, 26, 47, 86, 94, 99], [12, 33, 39, 42, 67, 78, 83, 97], [76, 81], [18, 50, 51, 69, 74, 75, 77, 81, 89, 92], [17, 23, 46, 48, 57, 75, 97], [32, 43, 59, 66, 83, 86, 88], [10, 23, 31, 35, 52, 83, 91], [13, 17, 20, 33, 59, 66, 76, 82, 95], [2, 4, 22, 31, 59, 69]]) == -1\nassert solution.minWastedSpace([40, 48, 59, 65, 66, 68, 73, 75, 91, 92], [[1, 17, 18, 34, 39, 59, 70, 88, 96, 99], [11, 77, 99]]) == 78\nassert solution.minWastedSpace([4, 11, 56, 57, 61, 95], [[16, 43, 48, 59, 70, 73, 96], [4, 6, 23, 39, 81], [11, 66, 86, 91, 94], [4, 56, 72, 76], [21, 36], [7, 16, 22, 24, 33, 36, 42, 72, 87], [4, 9, 10, 19, 20, 24, 40, 56, 79, 95], [13, 48, 58, 61, 64, 73]]) == 32\nassert solution.minWastedSpace([4, 9, 56, 99], [[20, 93]]) == -1\nassert solution.minWastedSpace([23, 39, 49, 53, 54, 55, 65, 71], [[5, 12, 25, 26, 42, 47, 54, 81, 86], [67, 79, 83, 85], [14, 34, 52, 67, 77, 87, 90, 93], [47], [9, 12, 23, 32, 93, 96, 100], [36, 64], [20, 52, 65, 71, 82, 84]]) == 63\nassert solution.minWastedSpace([24, 48, 76, 86, 90], [[2, 34, 50, 53, 57]]) == -1\nassert solution.minWastedSpace([12, 18, 24, 34, 56, 59, 61, 62], [[26, 36, 42, 51, 55, 64, 71, 85, 91], [98], [3, 22, 24, 43, 46, 55, 69, 81], [72], [8], [30, 81, 82, 87], [28, 69, 77, 84, 90, 97, 98], [13, 41], [76], [42, 86]]) == 44\nassert solution.minWastedSpace([23, 44, 68], [[1, 16, 41, 44, 59, 72, 86, 91, 92, 97], [59, 62, 67, 96, 98], [8, 10, 25, 39, 45, 61, 75, 77, 100], [1, 12, 89], [6, 10, 43, 75, 89, 93], [7, 39, 54, 92, 95], [10, 36, 41, 42, 45, 50, 62, 85, 95, 98], [9, 43, 51, 71, 86, 90], [24, 27, 45, 76, 85], [32, 37, 54, 86, 88]]) == 10\nassert solution.minWastedSpace([17, 29, 30, 32, 57, 67, 70, 95], [[3, 10, 19, 36, 45, 58, 62, 84, 85, 99], [6, 7, 76, 78, 80, 98, 100], [49, 55], [3, 14, 24, 27, 43, 75, 77, 91]]) == 55\nassert solution.minWastedSpace([74, 77, 87], [[16, 28, 46, 52, 80, 84, 99]]) == 21\nassert solution.minWastedSpace([12, 27, 50, 58, 71, 77, 78, 93, 98], [[36, 45, 50, 82, 92], [4, 12, 23, 29, 30, 38, 60, 72, 73, 81]]) == -1\nassert solution.minWastedSpace([5, 10, 16, 75, 84], [[42], [15, 19, 51, 53, 58, 81, 86, 92, 93, 100], [16, 23, 25, 29, 33, 35, 47, 59, 84, 93], [7, 9, 20, 69]]) == 26\nassert solution.minWastedSpace([9, 36, 43, 59, 90, 100], [[20, 76, 87], [25, 31, 44, 51, 56, 58, 78, 93, 96], [6, 57, 59]]) == -1\nassert solution.minWastedSpace([22, 66, 76, 79], [[13, 23, 27, 56, 58, 61, 66, 67], [33, 62, 70, 75, 82, 94]]) == 24\nassert solution.minWastedSpace([10, 12, 63, 67], [[16, 23, 71, 86], [10, 32, 66, 83, 89, 97], [45, 49, 52, 95], [8], [43], [87], [15, 84, 86, 90, 94], [29, 44, 47, 49, 66, 69]]) == 22\nassert solution.minWastedSpace([7, 22, 31, 45, 50, 82], [[5, 20, 68], [12, 15, 34, 45, 46, 52, 60, 91], [25], [44, 51, 87], [4, 11, 20, 30, 37, 49, 53, 60, 75, 96]]) == 31\nassert solution.minWastedSpace([15, 21, 26, 32, 51, 60, 67, 91, 94], [[1, 6, 12, 14, 24, 34, 86], [6, 27, 31], [21, 77], [40, 53, 68, 75, 80]]) == -1\nassert solution.minWastedSpace([12, 23, 60, 64, 68, 75, 99], [[11, 22, 24, 30, 37, 52, 76], [51], [58]]) == -1\nassert solution.minWastedSpace([7, 24, 33, 40, 62, 68, 76], [[6, 9, 17, 37, 38, 40, 49, 63, 73, 87], [40, 70, 78, 92, 97], [42, 61, 64, 89, 98], [5, 14, 19, 33, 50, 63, 83], [18, 35, 75]]) == 36\nassert solution.minWastedSpace([12, 17, 31, 62, 72], [[10, 28, 35, 45, 51, 60, 86, 97], [22, 38], [6, 32], [2, 8, 77, 96]]) == 69\nassert solution.minWastedSpace([11, 17, 18, 20, 21, 32, 85, 87], [[24, 82, 89], [9, 14, 23, 72, 74, 77, 99], [6, 11, 18, 47, 71, 80], [2, 23, 31, 33, 41, 45, 52, 56, 76, 79], [30, 55, 60, 61, 88], [2, 9, 33, 48, 56, 73, 88, 96], [14, 28, 36, 52, 84, 90], [1, 6, 26, 33, 41, 65, 71, 73, 88]]) == 48\nassert solution.minWastedSpace([7, 9, 22, 43], [[4, 37, 38, 47, 71, 79], [9, 30, 31, 34, 93], [33, 34, 35, 81, 95], [75, 81], [92]]) == 60\nassert solution.minWastedSpace([54, 62, 76, 83, 85, 89], [[50, 100], [35, 47, 89], [11, 24, 44, 59, 62, 77, 83, 89, 100], [42, 46, 76], [25, 51, 85], [3, 9, 20, 34, 37, 50, 65, 82, 96], [9, 11, 17, 29, 39, 64, 82], [3, 27, 46, 80], [6, 16, 25, 73, 91, 93]]) == 10\nassert solution.minWastedSpace([5, 6, 18, 41, 44, 56, 58, 59, 65, 82], [[44, 74]]) == -1\nassert solution.minWastedSpace([3, 4, 16, 30, 55], [[40, 60, 63, 65, 84, 99], [10, 23, 35, 45, 55, 68, 77, 88, 90, 100], [33, 39, 68], [3, 17, 32, 74, 84, 85, 97], [45, 99], [31, 52, 81], [13, 25, 39, 88, 98], [48, 54, 63, 82, 83, 91, 94], [3, 27, 60]]) == 25\nassert solution.minWastedSpace([18, 43, 52, 57, 64, 71], [[25, 84, 97], [13, 36, 38, 48, 63, 68, 71, 85, 95], [17, 23, 45, 52, 71, 75, 80, 90, 92]]) == 28\nassert solution.minWastedSpace([3, 5, 14, 20, 40, 41, 42, 75], [[3, 5, 6, 13, 16, 26, 51, 58, 71, 99], [7, 9, 40, 48, 62, 79], [11, 12, 16, 36, 59, 88, 93], [17, 19, 45, 96], [39, 62, 99]]) == 62\nassert solution.minWastedSpace([18, 22, 27, 30, 41, 53, 61, 88], [[4, 54, 61, 76, 84], [8, 33, 45, 99], [29, 37, 68], [13, 15, 50, 52, 70, 81, 96]]) == 134\nassert solution.minWastedSpace([26, 35, 84, 91], [[8, 61, 67, 68, 97], [19, 25, 39]]) == 80\nassert solution.minWastedSpace([67, 68, 84, 90, 96], [[5, 6, 15, 19, 36, 44, 77, 84, 86, 93], [10, 11, 35, 56, 62, 67, 73, 96, 100], [4, 26, 33, 52, 72]]) == 23\nassert solution.minWastedSpace([15, 99], [[3, 7, 37, 40], [8, 10, 20, 34, 40, 42, 68, 72, 94], [16, 17, 25, 32, 36, 60, 64, 84, 85, 100], [19, 50, 73, 95], [4, 5, 44, 57, 74, 88]]) == 2\nassert solution.minWastedSpace([23, 37, 49, 64, 72], [[8, 17, 31, 32, 41, 43, 49, 54, 57, 100], [9, 14, 16, 32, 37, 46, 49, 61, 71, 88]]) == 32\nassert solution.minWastedSpace([6, 10, 23, 39, 73, 93, 100], [[5, 11, 25, 35, 37, 39, 50, 72, 97, 100], [36, 52, 60, 66, 68, 71, 95], [14, 23, 37, 56, 96], [24, 36, 39, 46, 58], [6, 15, 24, 27, 47, 70, 73, 77], [21, 41, 45, 62, 77, 79, 99], [3, 4, 20, 31, 40, 86, 88, 89], [8, 29, 35, 47, 49, 62, 69, 89], [38, 68, 78], [36, 80, 98]]) == 36\nassert solution.minWastedSpace([46, 61, 83], [[9, 18, 35, 36, 64, 74, 94, 98], [25, 33, 38, 53, 66, 72, 84], [58, 99], [50]]) == 13\nassert solution.minWastedSpace([25, 29], [[5, 36, 37, 39, 63, 67, 69, 80], [2, 15, 16, 20, 48, 60, 83, 84, 89, 99], [21, 32, 51, 57, 93], [5, 9, 28, 36, 44, 45, 57, 88, 89, 97]]) == 10\nassert solution.minWastedSpace([26, 35, 87], [[55, 81, 94], [21, 31, 32, 69, 77, 96]]) == 48\nassert solution.minWastedSpace([2, 16, 21, 48, 65, 67, 75, 94], [[7], [9, 23, 28, 29, 38, 39, 59, 63, 75, 100], [10, 32, 35, 45, 59, 71, 80, 87], [1, 11, 19, 25, 30, 76, 83], [1, 15, 16, 38, 44, 51, 59, 64, 67, 93]]) == 51\nassert solution.minWastedSpace([1, 7, 30, 45, 74], [[1, 3, 14, 18, 20, 44, 46], [5, 7, 8, 41, 46, 54], [15, 58]]) == -1\nassert solution.minWastedSpace([15, 45, 52, 70, 77], [[13, 35, 62, 78, 87, 92], [40, 70, 98], [9, 37, 40, 52, 75], [18, 46, 88, 94]]) == 56\nassert solution.minWastedSpace([30, 54, 78, 84], [[15, 24, 66, 85]]) == 56\nassert solution.minWastedSpace([13, 30, 34, 47, 63, 77, 80, 91, 93, 95], [[4, 26, 37, 40, 49, 67, 70, 83, 84, 90], [17, 79], [29, 61, 79, 82, 99, 100], [16, 32, 47, 56, 66, 70, 76, 87, 90], [2, 7, 54, 73, 80, 95], [24], [44, 51, 52, 87, 92], [26, 38, 64, 76, 77, 80, 84, 93, 96]]) == 46\nassert solution.minWastedSpace([6, 10, 18, 38, 42, 83, 85], [[16, 19, 32, 33, 34, 44, 94], [10, 17, 40, 76], [3, 6, 14, 18, 39, 44, 89, 90, 93], [35, 56, 93], [9, 41, 88], [44, 78, 90], [16, 87, 95], [23, 66, 79, 80], [3, 5, 39]]) == 17\nassert solution.minWastedSpace([82, 85, 99], [[50, 63, 97], [9, 26, 35, 54, 63, 66], [1, 21, 23, 37, 43, 54], [18, 24, 33, 38, 70, 79], [23, 68, 77, 83, 96, 97], [1, 12, 21, 53, 72, 95], [78, 98], [5, 19, 22, 23, 25, 29, 77, 85], [40, 52]]) == -1\nassert solution.minWastedSpace([36, 75], [[42], [8, 14, 19, 25, 33, 43, 70, 72, 81, 88], [13, 22, 31, 32, 44, 49, 52, 95], [48, 64], [2, 6, 11, 23, 55, 57, 74, 75, 92, 93], [51, 76], [24]]) == 13\nassert solution.minWastedSpace([54, 57, 77, 78, 79, 100], [[9, 29, 36, 48, 94], [4, 5, 11, 33, 39, 48, 93]]) == -1\nassert solution.minWastedSpace([9, 13, 36, 65, 81], [[3, 9, 23, 24, 31, 45, 75, 85, 89], [33, 64, 72, 82, 83], [3, 69, 96, 100], [8, 53, 81], [19, 29, 38, 48, 49, 54, 56, 63, 69], [40, 79, 93], [32, 63, 81, 83, 86, 94], [1, 22, 29, 48, 51, 52, 65, 76, 99], [23, 68], [46, 86]]) == 33\nassert solution.minWastedSpace([9, 55, 66, 73], [[10, 17, 22, 53, 58, 80], [28, 92, 94], [7, 22, 73], [10, 21, 62, 85], [6, 13, 41, 77, 97], [20, 42, 68, 100], [8, 12, 19, 23, 32, 51, 58, 62, 65, 72], [67, 77, 81], [2, 6, 14, 19, 23, 25, 78, 93, 94, 99]]) == 25\nassert solution.minWastedSpace([45, 53, 57, 70, 85, 95, 100], [[35, 38], [19], [17, 49, 54, 65, 80, 99], [15, 31], [5, 13], [8, 95]]) == -1\nassert solution.minWastedSpace([12, 24, 39, 40, 44, 70, 93], [[41, 75, 92], [14, 40, 71, 73, 81, 93, 100], [5, 13, 29, 61, 70, 73, 84, 98, 100], [5, 43, 55, 73], [11, 14, 15, 32, 39, 67, 80]]) == 47\nassert solution.minWastedSpace([18, 26, 32, 66, 99], [[1, 8, 28, 37, 55, 68, 80], [21, 26, 27, 31, 47, 67, 80, 95], [11, 24, 34, 67, 79, 85], [4, 20, 31, 62, 66], [22, 35, 62, 81, 91]]) == -1\nassert solution.minWastedSpace([26, 50, 55, 56, 68, 74, 76, 83, 96, 98], [[3, 19, 24, 61, 74, 77, 91, 95, 100], [11, 27, 34, 41, 43, 64, 69, 85], [39, 54], [19, 46, 56, 57, 77, 94, 97, 100]]) == 54\nassert solution.minWastedSpace([31, 86, 95], [[2], [2, 16, 17, 37, 41, 48, 80, 84], [33, 57, 68, 75, 76, 90, 92, 97]]) == 8\nassert solution.minWastedSpace([20, 24, 36, 51, 70, 76, 80, 84, 86, 100], [[3], [11, 20, 22, 24, 26, 32, 51, 58, 94], [30, 34], [22, 32, 51, 77, 100]]) == 83\nassert solution.minWastedSpace([18, 46, 82, 84, 95, 100], [[54, 58], [8, 11, 20, 44, 49, 62, 72, 79, 88, 95], [5, 47, 54, 57, 68, 75, 91, 94, 100], [41, 77], [11, 59], [1, 17, 30, 43, 46, 55, 60, 70, 79, 88]]) == 51\nassert solution.minWastedSpace([12, 37, 60], [[55], [25, 34, 48, 65, 72, 77, 84, 92, 96], [33, 36, 95], [11, 43, 50, 60, 76, 78, 81, 83, 88, 90], [1, 5, 47, 60, 63], [6, 29, 37, 65]]) == 22\nassert solution.minWastedSpace([26, 57, 87, 97], [[22, 66, 70, 76, 95], [41, 44, 45, 55, 78, 79, 80], [57, 69, 78, 88, 98], [3, 14, 66, 70, 98]]) == 33\nassert solution.minWastedSpace([2, 32, 33, 66, 67, 80, 90], [[4, 6, 16, 26, 28, 50, 65, 77, 84, 89], [17], [19, 27, 31], [47], [49, 57, 94]]) == 153\nassert solution.minWastedSpace([10, 69, 70], [[3, 17, 18, 24, 46, 47, 65, 71, 77, 80], [12, 67], [45, 69, 70, 95], [3, 21, 27, 33, 50, 53, 56, 71, 86], [6, 90], [3, 4, 19, 20, 22, 27, 46, 83, 85, 99], [5, 6, 20, 44, 70, 85, 92, 99], [11, 22, 31, 38, 43, 49, 56, 66, 68], [5, 7, 46, 76, 86, 88, 95]]) == 10\nassert solution.minWastedSpace([7, 26, 45, 50, 53, 57, 60], [[86, 90, 91], [5, 9, 32, 33, 37, 61, 79, 80, 91], [4, 12, 23, 29, 52, 66, 76, 88, 91], [40, 42, 78], [23, 31, 60, 75, 77, 82, 89], [7, 14, 16, 22, 35, 61, 72, 84], [5, 29, 55, 75, 79, 81, 86]]) == 45\nassert solution.minWastedSpace([55, 65, 97], [[17, 50], [38, 59, 74], [4, 19, 28, 40, 43, 63, 75, 89], [6, 15, 16, 21, 26, 30, 48, 91, 93], [25, 29, 45, 85], [5, 47, 50, 77, 83, 86], [11, 16, 29, 40, 65, 69, 70, 82], [3, 55, 76], [1, 30, 34, 38, 41, 50, 82, 91], [40, 95]]) == -1\nassert solution.minWastedSpace([2, 7, 40, 51, 62, 64, 69, 78, 87], [[43, 96]]) == 245\nassert solution.minWastedSpace([3, 50, 53, 56, 77, 88, 99], [[9, 34, 47, 90], [21, 23, 52, 94, 96], [64, 91], [7, 13, 17, 64], [38]]) == -1\nassert solution.minWastedSpace([41, 43, 55, 95], [[13, 15, 51, 99], [3, 8, 16, 58, 67, 74, 77, 91, 99], [21, 26, 37, 50], [54, 94], [29, 39, 49, 55, 58, 74, 79, 96], [13, 37, 45, 59, 66, 79, 88, 94], [8, 22, 23, 56, 81, 83]]) == 15\nassert solution.minWastedSpace([15, 28, 32, 33, 58, 71, 80, 82, 99], [[7, 10, 15, 28, 65, 69, 93, 94], [76], [4, 5, 74, 75, 78], [10, 48, 51, 56, 97], [65, 96]]) == -1\nassert solution.minWastedSpace([5, 12, 20, 22, 34, 42, 57, 80, 86], [[58, 93, 97], [26, 50, 77, 94], [8, 14, 18, 48, 53, 56, 65, 71, 97], [14, 27, 41, 66, 93], [3, 6, 15, 21, 40, 52, 59, 76, 78, 89], [7, 22, 31, 37, 62, 73], [11, 25, 40, 47, 55, 59, 76, 83, 91]]) == 48\nassert solution.minWastedSpace([48, 92], [[22, 35, 36, 67, 73, 84, 91, 96, 97, 98]]) == 23\nassert solution.minWastedSpace([44, 52, 53, 71, 75, 81, 96, 97], [[5, 6, 42, 77], [8, 33]]) == -1\nassert solution.minWastedSpace([11, 49, 60, 81, 87], [[4, 35, 65], [10, 11, 18, 20, 26, 47, 62, 69, 73, 76], [10, 15, 47, 48, 49, 59, 72, 91, 95], [3, 16, 27, 63, 87, 92, 96, 98], [11, 46, 48]]) == 28\nassert solution.minWastedSpace([52, 88], [[27, 69, 79], [16, 22, 53, 55, 58, 60, 69, 86, 89, 98]]) == 2\nassert solution.minWastedSpace([7, 12, 24, 30, 62], [[41, 67, 78], [2, 13, 24, 48, 65, 68, 76, 93], [8, 38, 40, 52, 67, 97, 98], [7, 10, 17, 24, 25, 82], [22, 40, 48, 74, 78, 81, 97], [12, 18, 28, 40, 94], [8, 16, 39, 41, 49, 70, 73, 90], [3, 15, 16, 27, 58, 72, 85], [36, 40, 42, 80, 84], [2, 10, 12, 51, 62, 70, 84, 87, 100]]) == 28\nassert solution.minWastedSpace([3, 9, 29, 36, 58, 80, 89, 98], [[32, 34, 42, 59, 69, 86], [11, 14, 67, 79, 81, 86, 96, 98], [87, 100]]) == 96\nassert solution.minWastedSpace([88, 92, 97], [[4, 12, 39, 46, 50, 52, 53, 65, 84], [16, 19, 27, 38, 48, 50, 76, 86, 98], [22, 24, 61], [8, 32, 44, 62, 95, 96]]) == 17\nassert solution.minWastedSpace([11, 16, 54, 83, 95], [[4, 7, 47, 49, 53, 54, 61, 77, 82, 93], [6, 13, 24, 29, 36, 45, 50, 77, 98], [78, 96], [9, 10, 43, 55, 79, 99], [26, 29, 42, 75, 80, 89, 92, 94], [13, 24, 41, 69, 70, 71, 81], [37, 38, 60, 71, 84, 100], [11, 30, 31, 41, 60, 67, 87, 97]]) == 26\nassert solution.minWastedSpace([11, 13, 45, 50, 67, 80, 96], [[10, 12, 17, 21, 24, 63, 81, 82]]) == -1\nassert solution.minWastedSpace([11, 29, 35, 39, 74, 78], [[4, 16, 17, 42, 46, 55, 60, 64, 79, 95], [29, 62, 67, 82], [20, 23, 49, 53, 76, 96], [45, 65, 93], [9, 38, 81, 99, 100], [2, 14, 18, 31, 86], [47, 88], [4, 6, 17, 32, 51, 54, 78, 96]]) == 34\nassert solution.minWastedSpace([8, 61, 67, 72, 84, 85, 89, 97], [[5, 7, 35, 61, 82, 97], [27, 41, 42, 55, 71, 75, 87, 88, 96], [1, 5, 11, 20, 23, 45, 50, 70, 85], [5, 14, 16, 18, 37, 39, 62, 66, 70, 75], [57, 63, 87, 89], [12, 17, 18, 23, 40, 81, 100], [8, 47, 50, 91], [48, 52, 83], [26, 85], [1, 9, 19, 59, 62, 86, 93]]) == 85\nassert solution.minWastedSpace([5, 20, 27, 37, 47, 66, 76, 89, 90], [[7, 16, 28, 31, 33, 45, 54, 60, 65, 71], [6, 22, 31, 39, 69, 96], [6, 26, 36, 39, 68, 74, 78, 92], [2, 15, 28, 32, 35, 36, 41, 57, 80, 92], [16], [13, 46, 48], [18, 36, 45, 72, 83, 91], [6, 11, 12, 56, 57, 71, 99]]) == 48\nassert solution.minWastedSpace([1, 11, 23, 31, 35, 39, 49, 54, 98], [[9, 26]]) == -1\nassert solution.minWastedSpace([24, 47, 49, 65, 72, 77, 85], [[23, 57, 82], [15, 16, 34, 40, 43, 61, 94], [40], [3, 14, 24, 25, 43, 92, 95, 100], [3], [13, 20, 24, 31, 50, 61, 66, 82], [4, 6, 20, 44, 68, 83, 89], [73], [20, 35, 53, 56, 76], [10, 22, 30, 84]]) == 84",
  "inefficient_solution": "class Solution:\n    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:\n        mod = 10**9 + 7\n        max_package_size = max(packages)\n        max_box_size = max(max(box) for box in boxes)\n        if max_package_size > max_box_size:\n            return -1\n        ans = inf\n        for box in boxes:\n            box = sorted(box)\n            if max_package_size > box[-1]:\n                continue\n            s = i = 0\n            for b in box:\n                j = bisect_right(packages, b, lo=i)\n                if j == i:\n                    break\n                s += (j - i) * b\n                i = j\n            else:\n                ans = min(ans, s)\n                if ans == s:\n                    ans = min(ans, s - sum(packages[i:j]))\n        if ans == inf:\n            return -1\n        return (ans - sum(packages)) % mod\n\n        # To make it more memory inefficient, we can add more variables\n        # and operations, but still not affect the correctness.\n        for _ in range(100):\n            for _ in range(100):\n                for _ in range(100):\n                    for _ in range(100):\n                        for _ in range(100):\n                            pass\n        return (ans - sum(packages)) % mod",
  "is_python": true
}