{
  "problem_idx": 2814,
  "task_name": "Minimum Time Takes to Reach Destination Without Drowning",
  "markdown_description": "\nYou are given an `n * m` **0-indexed** grid of string `land`. Right now, you are standing at the cell that contains `\"S\"`, and you want to get to the cell containing `\"D\"`. There are three other types of cells in this land:\n\n\n* `\".\"`: These cells are empty.\n* `\"X\"`: These cells are stone.\n* `\"*\"`: These cells are flooded.\n\n\nAt each second, you can move to a cell that shares a side with your current cell (if it exists). Also, at each second, every **empty cell** that shares a side with a flooded cell becomes flooded as well.  \n\nThere are two problems ahead of your journey:\n\n\n* You can't step on stone cells.\n* You can't step on flooded cells since you will drown (also, you can't step on a cell that will be flooded at the same time as you step on it).\n\n\nReturn *the **minimum** time it takes you to reach the destination in seconds, or* `-1` *if it is impossible.*\n\n\n**Note** that the destination will never be flooded.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** land = [[\"D\",\".\",\"*\"],[\".\",\".\",\".\"],[\".\",\"S\",\".\"]]\n**Output:** 3\n**Explanation:** The picture below shows the simulation of the land second by second. The blue cells are flooded, and the gray cells are stone.\nPicture (0) shows the initial state and picture (3) shows the final state when we reach destination. As you see, it takes us 3 second to reach destination and the answer would be 3.\nIt can be shown that 3 is the minimum time needed to reach from S to D.\n\n```\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2800-2899/2814.Minimum%20Time%20Takes%20to%20Reach%20Destination%20Without%20Drowning/images/ex1.png)\n\n\n**Example 2:**\n\n\n\n```\n\n**Input:** land = [[\"D\",\"X\",\"*\"],[\".\",\".\",\".\"],[\".\",\".\",\"S\"]]\n**Output:** -1\n**Explanation:** The picture below shows the simulation of the land second by second. The blue cells are flooded, and the gray cells are stone.\nPicture (0) shows the initial state. As you see, no matter which paths we choose, we will drown at the 3rd\u00a0second. Also the minimum path takes us 4 seconds to reach from S to D.\nSo the answer would be -1.\n\n```\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2800-2899/2814.Minimum%20Time%20Takes%20to%20Reach%20Destination%20Without%20Drowning/images/ex2-2.png)\n\n\n**Example 3:**\n\n\n\n```\n\n**Input:** land = [[\"D\",\".\",\".\",\".\",\"*\",\".\"],[\".\",\"X\",\".\",\"X\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"S\",\".\"]]\n**Output:** 6\n**Explanation:** It can be shown that we can reach destination in 6 seconds. Also it can be shown that 6 is the minimum seconds one need to reach from S to D.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n, m <= 100`\n* `land`\u00a0consists only of\u00a0`\"S\"`, `\"D\"`, `\".\"`, `\"*\"` and\u00a0`\"X\"`.\n* **Exactly** one of the cells is equal to `\"S\"`.\n* **Exactly** one of the cells is equal to `\"D\"`.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumSeconds(self, land: List[List[str]]) -> int:\n        m, n = len(land), len(land[0])\n        vis = [[False] * n for _ in range(m)]\n        g = [[inf] * n for _ in range(m)]\n        q = deque()\n        si = sj = 0\n        for i, row in enumerate(land):\n            for j, c in enumerate(row):\n                match c:\n                    case \"*\":\n                        q.append((i, j))\n                    case \"S\":\n                        si, sj = i, j\n        dirs = (-1, 0, 1, 0, -1)\n        t = 0\n        while q:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                g[i][j] = t\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and not vis[x][y]\n                        and land[x][y] in \".S\"\n                    ):\n                        vis[x][y] = True\n                        q.append((x, y))\n            t += 1\n        t = 0\n        q = deque([(si, sj)])\n        vis = [[False] * n for _ in range(m)]\n        vis[si][sj] = True\n        while q:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                if land[i][j] == \"D\":\n                    return t\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and g[x][y] > t + 1\n                        and not vis[x][y]\n                        and land[x][y] in \".D\"\n                    ):\n                        vis[x][y] = True\n                        q.append((x, y))\n            t += 1\n        return -1\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\nfrom typing import List\n\n# Solution Class\nclass Solution:\n    def minimumSeconds(self, land: List[List[str]]) -> int:\n        m, n = len(land), len(land[0])\n        vis = [[False] * n for _ in range(m)]\n        g = [[inf] * n for _ in range(m)]\n        q = deque()\n        si = sj = 0\n        for i, row in enumerate(land):\n            for j, c in enumerate(row):\n                match c:\n                    case \"*\":\n                        q.append((i, j))\n                    case \"S\":\n                        si, sj = i, j\n        dirs = (-1, 0, 1, 0, -1)\n        t = 0\n        while q:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                g[i][j] = t\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and not vis[x][y]\n                        and land[x][y] in \".S\"\n                    ):\n                        vis[x][y] = True\n                        q.append((x, y))\n            t += 1\n        t = 0\n        q = deque([(si, sj)])\n        vis = [[False] * n for _ in range(m)]\n        vis[si][sj] = True\n        while q:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                if land[i][j] == \"D\":\n                    return t\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and g[x][y] > t + 1\n                        and not vis[x][y]\n                        and land[x][y] in \".D\"\n                    ):\n                        vis[x][y] = True\n                        q.append((x, y))\n            t += 1\n        return -1\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random land grid\n    m, n = random.randint(2, 10), random.randint(2, 10)\n    land = [[random.choice([\".\", \".\", \".\", \".\", \"*\", \"S\", \"D\", \"X\"]) for _ in range(n)] for _ in range(m)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumSeconds(land)\n\n    return land, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        land, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumSeconds(land) == expected_result\n        print(f\"assert solution.minimumSeconds({land}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumSeconds({land}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumSeconds([['.', 'X', 'D', '.', 'S', '.', '*', '.', '*'], ['.', '.', '*', '.', '.', '*', '.', 'S', '.'], ['*', '*', 'X', '.', 'X', 'D', '.', '.', '.'], ['*', '.', '.', '.', 'D', 'D', '.', 'D', 'D'], ['.', '.', 'S', '.', 'D', '.', '*', 'D', 'D'], ['.', 'D', 'X', 'S', '*', '.', '.', '.', '.'], ['S', '*', '.', '*', '.', '.', 'D', 'D', '.']]) == 2\nassert solution.minimumSeconds([['S', '.', '.', 'D', '.', '.'], ['*', '.', '.', '.', '.', '.'], ['.', '.', 'D', '*', '.', '.'], ['.', 'D', '*', '*', '.', '.'], ['.', '.', '.', '.', 'D', '.'], ['.', '.', 'S', 'S', '.', '*'], ['.', '*', '*', '.', '.', '*'], ['.', 'X', '.', 'X', '*', '.']]) == -1\nassert solution.minimumSeconds([['.', 'X', 'D', '*', 'X', '.', '*', '.', 'D', 'S'], ['.', '.', '.', '*', '.', 'X', '.', '.', '.', '.'], ['.', 'S', '*', 'D', '.', 'S', '.', '*', 'S', '.']]) == 2\nassert solution.minimumSeconds([['*', '*', 'X', 'S', '.', '*', '.', '.'], ['*', 'X', 'D', '*', 'X', '.', '.', '.'], ['*', '*', 'X', '.', '.', 'X', 'X', 'X']]) == -1\nassert solution.minimumSeconds([['.', 'X', '.', '.', '.', '.', '.', '.'], ['.', 'D', '*', '.', '.', '.', '*', '.'], ['.', 'S', '.', '.', 'S', 'D', '.', 'S'], ['.', '.', '.', 'X', '.', '*', '*', '.'], ['*', '.', '.', 'X', 'X', 'S', '.', 'D'], ['.', 'D', '.', 'S', '.', '*', '.', '.']]) == 2\nassert solution.minimumSeconds([['.', '.', '.', '.', '*', '.'], ['.', '.', '.', 'X', 'S', '*'], ['.', '.', '.', 'S', '.', '.'], ['D', '*', 'S', 'D', 'S', 'D'], ['.', 'X', 'S', '.', 'S', 'S'], ['.', 'D', 'D', 'D', '.', '.'], ['.', '.', '*', '.', '.', 'D'], ['.', '.', '*', 'S', 'S', '.'], ['.', 'S', '.', '*', '*', '.']]) == -1\nassert solution.minimumSeconds([['.', '.', '.', '.', '.', '*'], ['.', '*', '*', '.', 'S', 'S'], ['.', 'X', 'D', '.', 'S', 'D'], ['.', '.', 'S', 'D', '.', '.'], ['S', '.', '.', '.', '.', 'X'], ['*', '.', 'S', '.', '.', '.'], ['D', 'D', '.', '.', '.', '.'], ['D', '*', 'D', '*', 'S', '.'], ['.', '*', '*', 'D', '*', 'D']]) == 2\nassert solution.minimumSeconds([['.', '.', 'S', '*', '.', 'X'], ['.', '.', '*', 'X', '.', 'S']]) == -1\nassert solution.minimumSeconds([['.', '.', '.', '.', 'S', '.', '.', 'S', 'X'], ['.', 'D', '.', 'S', '.', '.', 'S', 'S', 'D'], ['.', 'X', '.', '.', '.', '*', '*', '.', '.'], ['.', 'D', 'X', '.', '.', '.', 'D', '.', '.'], ['.', '*', 'D', '.', 'S', '.', '.', 'D', '.'], ['D', '.', '*', '.', 'D', '.', 'D', 'D', '.'], ['.', 'S', '.', '.', 'S', 'D', '.', '*', 'S'], ['.', '.', 'D', 'S', 'S', '.', 'D', '.', '.']]) == 2\nassert solution.minimumSeconds([['.', 'X', 'X', '.', '.', 'S', '*', '.'], ['.', 'D', 'D', 'X', '.', '.', 'S', 'S'], ['*', '.', 'S', 'X', 'D', '.', 'D', '.'], ['.', '.', '.', '*', '.', 'S', '*', '.'], ['.', 'X', 'S', '.', 'X', '.', '*', 'S'], ['.', '.', 'X', '.', 'X', 'D', '.', '.'], ['*', 'X', '.', 'X', '.', 'X', '*', 'X'], ['.', 'X', '*', 'X', '.', '.', 'X', '.']]) == -1\nassert solution.minimumSeconds([['D', '.', 'S', '.', 'S', 'D', 'S', '.', 'D', '.'], ['.', '.', 'D', '.', '*', '.', 'S', '.', '*', 'X'], ['S', '*', 'D', 'S', 'D', 'D', 'D', '.', '*', '.'], ['.', '.', '.', 'X', 'X', '.', '*', 'D', '.', '.']]) == 1\nassert solution.minimumSeconds([['X', '.', 'X', '.', '.', '.', '*', '.', 'D', 'X'], ['.', 'S', '*', '.', 'S', 'D', 'S', 'S', '.', 'D'], ['.', 'D', 'S', 'D', '.', '.', '*', '.', 'D', '.'], ['X', '*', 'D', 'X', 'D', '.', 'S', '.', '.', '.'], ['D', '*', 'D', '.', 'D', '.', '.', 'X', 'X', 'X'], ['X', '.', '*', '*', '*', '.', '.', 'S', 'X', '*'], ['*', '.', '.', '*', '.', '*', 'D', 'S', '*', '.'], ['.', 'S', '.', 'D', 'D', 'X', '.', 'S', 'S', 'X'], ['.', '*', 'S', 'S', 'X', 'S', '*', 'D', 'S', '.'], ['.', '.', '.', '.', '*', 'X', '.', '.', '.', '.']]) == 1\nassert solution.minimumSeconds([['D', 'X', '*', '.', '.', '*', 'X', '.', '.'], ['S', 'D', '.', '.', '.', '.', 'D', '.', '.'], ['D', '.', '.', '*', 'X', '.', '.', '.', '.'], ['*', '*', 'X', '*', '*', '.', 'S', 'X', '.']]) == 2\nassert solution.minimumSeconds([['D', '.', 'D', 'X', '*', '.', 'D', 'S', 'X'], ['*', '.', '*', '.', '.', 'S', '.', 'D', '.'], ['.', '*', '.', '.', '.', '.', 'S', '.', 'D'], ['S', 'S', '.', 'X', 'D', '.', 'D', 'S', '.'], ['.', '.', '.', '*', '.', '.', '*', '.', 'X'], ['*', 'S', '.', '.', 'X', '.', '.', '.', 'X'], ['X', 'X', '.', '.', '.', 'D', 'X', '.', 'S'], ['D', 'X', '*', 'S', 'X', '.', '*', 'S', '.']]) == -1\nassert solution.minimumSeconds([['D', '.'], ['X', 'S'], ['X', '.'], ['X', 'S'], ['*', 'D']]) == 1\nassert solution.minimumSeconds([['.', 'X', '.', 'X', '*', '.', 'S', 'S', 'X'], ['.', '.', '.', 'D', 'D', 'D', 'D', '.', '*'], ['D', '.', 'X', '.', '.', 'X', '.', '.', '.'], ['D', '.', '.', 'S', '.', '.', '.', '.', '.'], ['.', 'X', '.', '*', 'S', '.', '.', '.', '.'], ['.', '.', '*', '.', '*', '*', '.', '.', '.'], ['.', 'S', '*', 'S', '*', 'S', '*', '*', 'S'], ['.', '.', '.', 'D', 'D', 'D', '.', 'X', '.'], ['X', '.', 'S', '.', '.', '.', '.', '*', '.']]) == 2\nassert solution.minimumSeconds([['.', '.'], ['D', '*'], ['*', '.'], ['.', 'D'], ['.', 'S'], ['S', '.'], ['.', '.'], ['.', '.'], ['*', 'S'], ['.', '*']]) == -1\nassert solution.minimumSeconds([['*', '.', 'S', '.'], ['.', 'S', 'S', '.'], ['.', 'D', '.', '.'], ['.', '*', '*', '.'], ['.', '*', '.', '.'], ['.', 'D', '*', '*']]) == -1\nassert solution.minimumSeconds([['*', 'D', '.', 'X', '.'], ['.', '.', '.', '.', '.'], ['.', 'D', '.', '.', '*'], ['*', '.', '*', '*', '.'], ['.', 'D', 'S', '.', 'S'], ['*', '*', '.', '.', '.'], ['.', '.', '*', '.', '.'], ['.', '.', '.', 'X', 'S']]) == -1\nassert solution.minimumSeconds([['D', '.', '.', '.', '.'], ['S', 'X', '.', '.', '*'], ['X', '.', '.', 'S', '.'], ['.', 'S', 'D', 'X', 'X'], ['.', '*', 'S', '.', '*'], ['.', 'X', 'X', '.', '.'], ['.', '.', '.', 'S', '.'], ['.', '.', '.', '.', 'X']]) == -1\nassert solution.minimumSeconds([['.', '.', '*', '*', 'D', 'D', 'D', 'X'], ['*', 'S', 'S', 'D', 'S', 'S', 'D', '.'], ['.', 'X', 'D', 'X', 'X', 'D', 'X', '.'], ['D', '.', '.', 'D', '.', 'D', 'D', '*']]) == 1\nassert solution.minimumSeconds([['.', 'D', '.', 'D'], ['.', 'X', 'X', 'D'], ['.', '.', '.', '.'], ['.', '.', '.', '*'], ['D', '.', '.', '.'], ['*', '.', 'D', '.'], ['.', '*', '.', '.'], ['*', '.', '.', '.'], ['.', 'D', '*', 'X']]) == 1\nassert solution.minimumSeconds([['D', '.', '.', '.', 'S', 'X', 'X', '.', '.', 'X'], ['S', '*', '.', 'D', '.', '*', 'S', '.', '*', 'D'], ['S', '*', '.', '.', '.', 'S', 'D', '*', '.', 'X'], ['S', '*', '.', '.', '.', '.', '.', 'D', '.', '*'], ['*', '.', 'X', '.', '*', '.', 'S', '.', '.', '.'], ['.', '.', '.', '.', 'S', 'S', '.', '.', '.', '*'], ['X', '*', '.', 'X', 'S', 'S', '.', '.', '.', 'X']]) == -1\nassert solution.minimumSeconds([['X', '.', '.', 'S', '*', '.', 'D', 'S'], ['.', '.', '.', 'D', 'S', '.', '.', 'D']]) == 1\nassert solution.minimumSeconds([['.', '.', 'D', 'S', 'D', 'S', '.', '.', '.', 'X'], ['.', '*', '.', 'S', 'S', '.', '.', 'X', 'X', '.'], ['.', '*', 'D', '*', 'D', '.', '*', 'X', '.', '.'], ['.', '.', 'X', '.', '.', 'D', 'S', '*', '.', 'S'], ['.', '.', '.', 'S', 'S', 'X', 'S', '.', '.', 'X'], ['.', 'D', 'X', 'X', 'X', 'S', 'S', 'S', '.', '.'], ['.', 'X', '.', '.', '*', '*', '*', '.', '.', 'X']]) == -1\nassert solution.minimumSeconds([['D', '.', 'S', '.', '.', 'X', '.', '.'], ['.', '.', 'X', '.', 'X', '.', 'X', 'D'], ['X', '.', 'S', 'S', 'S', 'S', '*', 'X'], ['.', '.', '.', '*', '.', 'D', 'X', '*'], ['D', '.', '.', '.', '*', 'S', '.', '.'], ['.', '.', '.', 'X', '.', '.', 'D', '.'], ['S', 'S', '.', '.', 'S', 'D', '.', '.'], ['.', 'D', '.', 'X', '.', '.', '.', 'X'], ['D', 'S', '.', '.', '.', '.', 'D', 'X']]) == 1\nassert solution.minimumSeconds([['.', '.', 'X', '.', '.', '.'], ['D', 'S', 'X', '.', 'X', '.'], ['.', '.', '.', '.', 'D', '*'], ['.', '.', '.', '.', '.', '*'], ['D', '.', '.', '*', '.', '*'], ['.', '.', '.', '.', '.', 'D'], ['.', '*', '.', '.', 'X', '.'], ['.', '.', 'D', 'S', '.', '*'], ['S', '.', '.', '.', 'S', 'D'], ['X', '.', '.', '.', 'D', 'S']]) == 1\nassert solution.minimumSeconds([['X', '.', '.', '.', '*'], ['.', '.', 'D', '.', 'S']]) == 2\nassert solution.minimumSeconds([['*', 'X', '.', '.', '.', '.'], ['X', '.', '.', '*', '.', '*'], ['.', 'X', 'S', '*', '.', '.']]) == -1\nassert solution.minimumSeconds([['S', '*'], ['.', '.']]) == -1\nassert solution.minimumSeconds([['S', '.', '*', '*', 'S', '*', 'S'], ['S', '.', 'X', 'D', '*', 'S', '.'], ['X', 'X', '*', '.', '.', '*', '.'], ['.', 'D', 'D', '*', '.', 'S', 'D'], ['.', '.', 'S', '.', 'D', '.', 'X'], ['.', 'S', 'S', 'X', '*', '.', '.'], ['.', '.', '.', '.', 'D', '.', 'D'], ['*', 'X', '.', '.', '.', '.', '.']]) == 3\nassert solution.minimumSeconds([['*', '.'], ['.', '.'], ['S', 'S'], ['S', '*'], ['S', 'D']]) == 1\nassert solution.minimumSeconds([['S', '*', 'S', 'S', '*', '.', 'X', 'D', '.'], ['.', '.', 'S', 'X', 'X', '*', 'X', '.', '.'], ['.', '.', '.', '*', '.', '.', 'S', 'X', '*'], ['X', '.', '.', 'D', '.', 'D', '.', '.', '.'], ['D', 'D', '.', '.', '.', '.', '*', '.', 'S'], ['.', 'S', 'S', 'D', '.', '*', '.', '.', 'D'], ['.', 'S', 'X', '.', '*', '.', '.', 'D', '.']]) == 3\nassert solution.minimumSeconds([['X', '.', '.', '*', '*', '.', '.'], ['D', 'S', 'X', '.', '*', '.', 'X'], ['S', 'X', '.', 'X', 'X', 'S', 'D'], ['X', '*', 'D', '.', '*', '.', '.'], ['*', '.', 'S', '.', '*', 'S', '*']]) == -1\nassert solution.minimumSeconds([['.', 'S', '.', 'S', 'X', 'X'], ['.', 'S', 'D', '.', '.', 'D'], ['.', '*', '*', '.', 'D', 'S'], ['S', '*', 'S', 'X', '.', '.'], ['.', '.', 'X', 'S', '.', '.'], ['*', '.', '.', 'S', '.', '.']]) == 4\nassert solution.minimumSeconds([['.', '.', 'X', 'D', 'D', '*', '*', '.', '.', 'S'], ['*', '.', '.', 'X', '.', '*', 'D', '.', 'S', 'S'], ['S', '.', 'D', '*', '.', '.', '.', '.', '.', 'X'], ['.', 'S', 'S', '.', '.', 'D', '.', 'S', '.', 'X'], ['D', '.', '.', '.', '.', 'X', '*', 'X', 'X', 'S']]) == -1\nassert solution.minimumSeconds([['S', 'D'], ['.', '.'], ['X', 'X'], ['D', 'D'], ['.', '.']]) == 1\nassert solution.minimumSeconds([['S', '.', '.', '.', 'D'], ['.', '.', '.', '.', 'S'], ['.', '.', '.', '.', '.'], ['.', '*', '.', '.', '*'], ['S', 'D', '.', 'D', 'X'], ['X', 'D', '*', '.', '.']]) == 1\nassert solution.minimumSeconds([['*', '.', '.', '.', '*', 'S', '.', '.', '*'], ['.', '.', 'X', '.', '.', 'S', '.', 'S', 'S'], ['D', 'D', '.', '.', 'X', '.', '.', '.', '.'], ['*', '.', 'D', '.', '.', '.', '.', '*', 'S'], ['D', '.', 'D', '*', '.', '*', '*', '.', '.'], ['*', '.', '.', '.', '*', '.', '.', '.', '*'], ['.', '.', 'X', '.', 'S', '.', 'S', 'S', '.'], ['S', 'S', '.', 'X', '.', '.', 'X', 'S', 'X'], ['.', 'D', 'D', 'D', '.', '.', '.', '.', '.'], ['*', '.', '.', '*', '.', '.', '.', '.', 'X']]) == -1\nassert solution.minimumSeconds([['.', 'D', '*', 'X', 'D', '.'], ['.', 'D', '*', '*', '.', '.'], ['D', 'X', '.', '.', '.', 'S']]) == 3\nassert solution.minimumSeconds([['X', 'S', 'X', '.', '.', 'X'], ['D', 'D', 'D', '.', '*', '.'], ['.', '.', 'S', 'S', '.', '.'], ['.', 'D', '*', '.', '.', '*'], ['S', '*', '*', '.', '.', '.'], ['.', 'D', '.', '*', 'S', '.'], ['*', '.', '.', '.', '.', '.'], ['X', 'S', '.', 'D', 'X', '*']]) == 2\nassert solution.minimumSeconds([['X', '.', 'D', '*', '.', '.', '.', '.'], ['.', 'S', '*', 'S', '.', '.', '.', 'D'], ['.', '.', 'D', 'X', 'D', '.', 'S', '*'], ['X', '.', '*', 'X', '*', 'X', 'X', '*'], ['.', '.', '.', 'D', '.', '.', '*', '.'], ['.', '*', 'X', 'D', '*', '.', '.', '*'], ['S', 'S', '.', '*', '.', 'X', 'D', '.'], ['D', '.', '.', '.', '.', '.', '.', '.'], ['D', '*', '.', 'X', 'S', 'D', '.', '.']]) == 1\nassert solution.minimumSeconds([['.', 'S', '*', '.', 'S', '.', '.', 'X', '.'], ['.', 'D', '.', '.', '.', 'X', '.', '.', '.'], ['*', 'D', '.', '.', 'X', '.', 'S', 'D', '.'], ['.', 'D', '.', '.', 'S', 'X', '.', 'S', '.'], ['D', '.', '.', '.', '.', '.', 'S', '.', 'X'], ['X', 'D', '.', 'D', '*', '*', '*', 'D', '*'], ['*', '.', '.', '.', 'D', '*', 'X', '.', '*'], ['.', '.', '*', '.', 'S', 'S', 'S', '.', 'S'], ['.', '.', '*', 'D', '.', '.', '.', '.', '.']]) == -1\nassert solution.minimumSeconds([['*', '*', '.', 'S', 'S', '.', 'X', '.'], ['*', 'X', '.', '.', '*', '.', 'S', '.'], ['S', 'S', '.', 'D', '.', 'X', '.', '.'], ['S', '.', 'D', '.', '.', '.', 'D', 'S'], ['S', '.', '.', 'S', '*', 'D', '.', '.'], ['.', 'X', '.', '.', '.', 'X', '.', '.'], ['*', 'X', '.', '.', '.', '.', 'D', '*'], ['S', '.', 'S', 'X', '.', '.', 'D', '.']]) == -1\nassert solution.minimumSeconds([['S', '.', '.', '.', '.', '.'], ['D', '*', 'S', 'S', '.', 'D'], ['.', '.', 'S', '.', 'X', '*'], ['.', 'D', 'X', 'D', '.', 'X'], ['.', '.', 'X', '.', 'X', 'X'], ['D', '.', '.', 'X', '.', 'S'], ['D', 'X', '.', 'X', 'X', '.'], ['.', 'D', '.', '*', '.', '.'], ['.', '.', '.', '.', '.', '.']]) == -1\nassert solution.minimumSeconds([['D', '.', '.', '.', 'S'], ['D', '*', '.', '*', '*'], ['.', '.', '.', '.', '.'], ['.', '.', 'S', 'D', '.'], ['*', 'S', '*', 'D', '.'], ['S', 'D', '.', '.', '.'], ['.', 'S', 'D', '.', 'D']]) == 1\nassert solution.minimumSeconds([['D', '.', 'D', 'S', '.', '.', '*'], ['*', '.', 'X', '.', '.', 'X', '*'], ['.', 'D', 'X', '.', 'D', '.', '.'], ['S', '*', '.', '.', 'D', 'D', '.'], ['.', '.', '.', 'D', '.', '.', '.'], ['.', 'D', 'D', '*', '*', '.', '*']]) == 3\nassert solution.minimumSeconds([['.', '.', '.'], ['*', '.', '.'], ['S', '.', 'S'], ['X', '.', '*']]) == -1\nassert solution.minimumSeconds([['.', '*', 'S', '.'], ['.', '*', '.', '.'], ['.', 'S', '.', 'X'], ['*', 'D', 'S', 'S'], ['.', 'S', '.', '*']]) == 1\nassert solution.minimumSeconds([['.', '.', 'S', 'S', '.', '.', '.', '*', 'D'], ['.', '.', '.', '.', 'D', 'S', 'D', 'D', 'D']]) == 1\nassert solution.minimumSeconds([['S', '.', 'X', '.', 'D', 'S'], ['D', '.', '.', '.', '.', '.'], ['D', 'X', '.', '.', '.', '.'], ['.', '.', 'X', '.', '.', 'D'], ['.', 'S', 'X', '.', 'S', '.'], ['.', 'X', '.', '.', '.', '.'], ['.', 'D', 'X', '.', '.', '.'], ['.', '.', 'S', 'D', '.', 'S'], ['.', '.', '*', '.', '.', '.'], ['*', 'X', '*', '.', '.', '.']]) == 2\nassert solution.minimumSeconds([['D', '.', '.', '*', 'X', '*', 'X', '.'], ['.', '.', '*', '.', 'X', 'X', 'X', '*'], ['X', '*', 'D', 'X', '.', 'X', 'S', '.'], ['S', 'X', '.', '.', '.', '.', 'X', 'D'], ['.', '.', '.', 'X', 'S', '.', 'D', 'D'], ['*', '.', 'X', 'X', 'S', 'D', '.', '.']]) == 1\nassert solution.minimumSeconds([['D', 'X', '.'], ['.', '.', '*'], ['.', '.', '.'], ['D', '*', 'D'], ['.', '.', '*'], ['.', '.', 'D'], ['*', '.', '.'], ['.', '.', 'D']]) == 0\nassert solution.minimumSeconds([['.', 'D', '.'], ['.', '.', '.'], ['.', '.', '.']]) == 1\nassert solution.minimumSeconds([['X', '.', 'X', 'S', '.', 'D', '.', '.'], ['.', 'S', '.', 'D', '.', '.', 'D', '.'], ['X', 'S', '*', 'X', 'X', '.', '.', '*'], ['X', '.', 'X', '.', '.', '*', '.', '.'], ['.', '.', 'S', 'S', 'S', '.', 'X', '*'], ['.', '.', '*', '.', 'S', '.', '.', 'S'], ['*', '.', 'D', '.', 'D', '.', 'S', '.'], ['*', 'D', '.', 'D', '*', '.', 'D', 'X']]) == 1\nassert solution.minimumSeconds([['.', '.', '.', 'X', 'D', '.', 'X', '*', 'X', 'X'], ['S', '.', '.', '.', 'X', 'D', '.', 'D', '*', '.'], ['.', '.', '.', 'X', 'X', 'D', 'X', '*', '.', '.'], ['S', '.', '*', '.', '.', 'S', 'D', '.', 'S', '.'], ['*', '.', '.', '.', '.', '.', '.', '*', 'S', '.'], ['.', '.', 'X', 'D', '.', '.', '.', '.', 'D', '.'], ['.', '.', 'X', '.', 'D', '.', 'D', 'X', '.', '.']]) == 1\nassert solution.minimumSeconds([['.', '*', '.', '*', '.', '.', '.', 'S'], ['.', '.', 'D', 'D', '*', 'D', 'D', '.'], ['X', '.', '.', '.', 'X', '*', '.', 'S'], ['S', '.', '.', 'X', 'S', 'D', 'D', '.'], ['.', '.', '*', '.', '.', '.', '*', 'S'], ['.', 'D', 'X', '.', 'X', '.', 'S', '.'], ['.', '.', '.', 'S', '.', '*', '*', '.'], ['.', 'S', '.', '.', '.', '.', 'X', '.']]) == 2\nassert solution.minimumSeconds([['.', '.', '.', '.'], ['X', 'S', '*', 'X'], ['D', '.', 'S', 'S'], ['X', 'X', '.', '*'], ['D', '*', 'D', '.'], ['.', '.', '.', 'S'], ['.', 'S', '.', 'X'], ['X', '.', '.', '*'], ['.', '.', '.', 'D'], ['S', '*', '.', 'D']]) == -1\nassert solution.minimumSeconds([['D', '.', '*', '.', 'X', '.', 'S'], ['.', 'D', '.', '.', '.', '.', '*'], ['D', '.', 'X', 'S', '.', '.', '*'], ['X', '.', 'D', '.', '.', '.', 'X'], ['.', '*', '.', 'D', '*', 'X', '.'], ['*', '.', 'S', '.', '.', '.', '.'], ['.', 'X', '.', 'X', 'D', 'S', '*'], ['*', '.', 'D', 'D', 'D', '.', 'D'], ['D', 'X', '.', '.', '.', 'S', 'D'], ['X', 'X', '*', 'X', 'S', '.', '.']]) == 2\nassert solution.minimumSeconds([['*', '.', '*', 'S', 'D', '.', 'X', '.'], ['.', 'S', '.', 'D', '.', '.', '.', 'S'], ['X', 'S', '.', '.', '*', '*', 'X', '.'], ['*', 'X', '*', 'S', '.', 'D', 'S', 'X']]) == 1\nassert solution.minimumSeconds([['.', '.', '.', '*', '.', '.', '.', 'X', '.', '.'], ['*', '.', '*', '*', '.', '*', '.', '.', 'S', '.'], ['.', '.', '.', '.', '*', '.', 'D', '.', '.', '*'], ['.', '*', 'D', '.', '*', '.', '*', '.', '.', 'S']]) == -1\nassert solution.minimumSeconds([['*', '.', '.', 'S', '.', '.', '*', '.', 'X', '.'], ['D', '.', '*', '.', 'S', '.', '.', '.', '.', '.']]) == -1\nassert solution.minimumSeconds([['.', 'D'], ['S', '*'], ['.', 'X']]) == 2\nassert solution.minimumSeconds([['*', '.', '.'], ['*', '*', '.'], ['.', 'S', '*'], ['.', '.', '*'], ['.', '.', 'X'], ['X', '.', '*']]) == -1\nassert solution.minimumSeconds([['X', 'S', '.', 'D'], ['D', 'D', '*', 'S']]) == 1\nassert solution.minimumSeconds([['*', '.', '.', 'D'], ['.', '.', '.', '*'], ['D', 'X', 'D', 'X'], ['X', 'X', '.', 'S'], ['.', '.', '.', 'D'], ['D', 'S', '*', '.'], ['.', '*', '.', '.'], ['.', '.', '*', '.']]) == 1\nassert solution.minimumSeconds([['*', 'X', 'S', '.', '.', '.', 'S', 'X', '.', 'D'], ['.', '*', 'X', '*', 'S', '*', '*', 'X', '*', '.']]) == -1\nassert solution.minimumSeconds([['X', '.', 'S', 'D', 'S', 'S', 'D', '.', 'X'], ['.', 'D', '.', '*', '.', '.', '*', '.', '.'], ['.', '.', '.', '*', 'X', '.', 'D', '*', 'D'], ['.', '.', '.', '.', 'X', '.', '.', '.', '.'], ['.', '*', '.', '.', '*', '.', '.', '.', '.'], ['S', '*', '.', 'S', '.', '*', 'X', '.', '.'], ['*', 'X', '*', '.', '.', 'D', 'S', '*', '*'], ['X', '.', '*', 'D', '.', '.', '.', '.', '*']]) == 1\nassert solution.minimumSeconds([['.', 'X', '.', 'S', '.', 'X', 'D', '.', '.', '.'], ['X', '.', 'D', '.', '.', 'S', 'S', 'S', 'X', '.'], ['.', '.', '.', '.', 'X', '.', 'S', '*', 'S', '.'], ['.', 'D', '.', 'X', '.', 'S', '.', '*', '*', 'S'], ['S', '.', '.', 'D', '*', '.', '.', '.', '.', '.'], ['X', 'X', 'D', 'D', '*', '.', '.', 'X', '*', '*'], ['*', '.', '.', 'S', '.', 'S', '.', '.', '.', 'D'], ['.', 'S', '.', 'S', 'X', '.', 'D', 'X', 'S', 'D']]) == 1\nassert solution.minimumSeconds([['*', '.', '.', 'S', 'D'], ['*', 'D', 'S', '.', '.'], ['.', '.', '.', '.', 'X'], ['X', '.', '*', 'D', '.'], ['X', 'X', 'S', '.', '.'], ['.', '*', 'S', '.', 'X'], ['.', '.', '.', '.', 'X'], ['X', '.', 'D', '.', '.']]) == 2\nassert solution.minimumSeconds([['*', '.', '.', '.', '.', 'D'], ['.', '*', '.', 'S', 'D', '.']]) == 1\nassert solution.minimumSeconds([['X', 'S', '*', 'S', 'S', 'S'], ['.', '.', '.', '*', '.', '*']]) == -1\nassert solution.minimumSeconds([['D', '.', 'X', 'D', '.', '.', 'D'], ['.', '.', 'D', '.', '.', 'S', 'X'], ['S', '.', '.', '*', '.', '.', 'S'], ['.', 'X', 'S', '*', '*', '.', 'D'], ['.', 'X', '.', '.', 'X', 'X', 'X'], ['.', 'D', '.', '.', 'X', '*', '.'], ['*', 'D', '*', '.', '.', 'D', '.']]) == -1\nassert solution.minimumSeconds([['D', '.', 'S', 'D', 'D', 'D', 'D', 'S'], ['*', '.', 'D', '.', '*', 'X', 'X', 'X'], ['D', 'D', '.', 'D', 'D', 'S', '.', 'S'], ['.', '.', 'X', 'D', '.', '.', 'X', '.']]) == -1\nassert solution.minimumSeconds([['S', '.', '.', 'S'], ['X', '.', '*', '.'], ['*', '.', '.', '.']]) == -1\nassert solution.minimumSeconds([['D', 'D', 'D', 'D', '.', '.', '.', 'X', 'D', '.'], ['.', '.', 'X', 'X', '.', '.', 'X', 'X', '.', '.'], ['X', 'S', 'S', '*', '.', '.', '.', 'D', '.', '*'], ['.', '.', '.', '.', '.', 'S', 'X', '.', '.', 'D'], ['.', 'D', '.', '.', 'D', '*', 'S', '*', '.', 'D'], ['S', '.', 'S', 'D', 'S', '.', '.', '.', 'X', '.'], ['*', '.', 'S', '*', '*', 'D', 'X', '.', '.', '*'], ['*', 'S', '.', '.', 'X', '*', '.', '.', 'X', 'X'], ['*', '.', 'D', '.', '.', '.', '.', 'X', '.', '.']]) == 2\nassert solution.minimumSeconds([['.', 'S', 'X', '.', '.', '.', 'D', '.', 'S'], ['*', '.', '.', 'X', 'S', 'D', '.', '*', '.'], ['X', '.', 'X', 'D', 'S', '.', '.', '.', '.'], ['.', '.', '*', 'X', 'D', 'D', '.', 'S', 'S'], ['.', '.', 'D', '.', 'S', 'X', '*', 'S', '*']]) == -1\nassert solution.minimumSeconds([['*', '.', '.', '.', 'X', '.', 'D', 'S', '.'], ['X', '.', '.', '.', 'X', '.', '.', '.', '.'], ['*', '.', 'X', 'X', '.', 'D', '.', 'S', '.'], ['.', '.', '.', '*', 'D', 'D', '.', 'S', '.'], ['.', 'D', '.', 'D', '.', 'D', '*', '.', '*']]) == -1\nassert solution.minimumSeconds([['D', 'S', '.'], ['X', '.', 'D']]) == 1\nassert solution.minimumSeconds([['D', '*', 'D', '.', '.', '*', '.'], ['*', '.', '.', '.', 'S', '.', '.'], ['.', '.', 'X', 'X', '.', '.', '.'], ['S', '.', 'X', '.', '.', 'S', 'S'], ['D', '.', '.', '.', '*', 'D', '.']]) == 2\nassert solution.minimumSeconds([['D', '.', 'X', '.', '.'], ['.', 'X', 'S', 'X', '.'], ['D', '.', '.', 'S', 'D'], ['X', '*', '.', '.', '.'], ['*', '.', '.', 'X', 'S'], ['D', 'X', 'D', '.', 'D'], ['X', '.', 'D', '.', '*']]) == 1\nassert solution.minimumSeconds([['S', 'D', 'S', 'S', '.'], ['.', '.', '.', '.', 'X'], ['*', '.', 'D', 'D', '.'], ['.', 'D', 'D', 'D', '.']]) == 2\nassert solution.minimumSeconds([['.', 'D', '*', 'S'], ['.', '.', '.', '.'], ['.', 'S', '.', 'X'], ['X', '*', '.', 'X'], ['S', '*', 'D', 'S'], ['.', '*', '*', '.'], ['.', 'X', '.', '.'], ['.', 'X', 'D', '.'], ['S', '*', 'S', '.'], ['X', '.', '.', 'D']]) == 1\nassert solution.minimumSeconds([['.', '.', 'X', '.', 'D', 'X', '*', 'X', '.'], ['*', '.', '.', '.', '.', '.', 'X', 'S', 'S'], ['D', '.', '*', '.', '.', '.', 'D', '.', '.']]) == 3\nassert solution.minimumSeconds([['.', 'S'], ['.', '*']]) == -1\nassert solution.minimumSeconds([['X', '.'], ['S', '.'], ['.', 'S'], ['X', 'S'], ['.', '.'], ['X', '*'], ['.', 'S']]) == -1\nassert solution.minimumSeconds([['.', '.'], ['.', '*']]) == -1\nassert solution.minimumSeconds([['X', '.', 'S', '*', 'S'], ['D', '*', 'D', '.', '*'], ['D', '.', 'X', 'X', '*'], ['.', '*', '.', 'S', '.'], ['.', 'S', '.', 'X', '.'], ['.', '.', 'X', '.', 'S']]) == -1\nassert solution.minimumSeconds([['.', 'X', '*', 'D', '.', 'S', 'S', 'X', 'S'], ['.', '*', 'S', '.', '*', '.', '.', '*', '.'], ['*', 'S', '.', '.', '.', '*', '.', 'D', '.']]) == -1\nassert solution.minimumSeconds([['.', '.', '.', '*', '.'], ['.', '.', '*', '.', '.'], ['X', 'S', '.', 'D', 'S'], ['X', '.', 'D', 'S', '.'], ['X', '.', '*', '.', 'S'], ['.', 'S', 'S', '.', '.'], ['.', 'X', '.', 'X', 'X'], ['D', '.', '*', '.', '.'], ['.', '.', '.', '.', '.']]) == -1\nassert solution.minimumSeconds([['X', '.', 'D', '.', 'X', '.', '.'], ['.', 'S', '.', 'D', '.', '.', '.'], ['X', '*', '.', '.', 'D', '.', 'X'], ['S', 'X', 'S', '.', '*', 'D', 'X'], ['S', 'D', 'S', 'X', '.', 'S', 'D'], ['.', 'D', '.', '*', 'X', '*', '.'], ['.', '*', '.', '.', '*', 'S', 'D']]) == 1\nassert solution.minimumSeconds([['.', '.', '.', '.'], ['D', '.', '*', '*'], ['.', '.', '.', '.'], ['.', '.', '.', '*']]) == 1\nassert solution.minimumSeconds([['X', '.'], ['D', '.'], ['.', '.'], ['S', '.']]) == 2\nassert solution.minimumSeconds([['.', '*', '.'], ['.', '.', 'D'], ['.', 'S', '.'], ['S', 'D', '.'], ['D', '.', 'D']]) == 1\nassert solution.minimumSeconds([['.', 'D', '.'], ['.', 'S', 'X'], ['.', '.', '.'], ['.', 'S', '.'], ['.', '.', '.'], ['.', 'S', '.'], ['.', 'X', '.'], ['*', 'X', 'D'], ['.', '.', '*']]) == 3\nassert solution.minimumSeconds([['D', '.', 'X', 'D', 'D'], ['D', '.', 'D', 'X', 'S'], ['S', '*', '.', 'S', '.'], ['.', '.', '.', '*', 'D'], ['.', 'X', 'S', '.', 'D'], ['*', '*', 'X', '.', '.'], ['D', 'S', 'D', 'D', '.'], ['X', '*', '.', 'D', 'D'], ['*', '*', '.', '.', '.'], ['.', 'D', '.', 'S', 'D']]) == 1\nassert solution.minimumSeconds([['X', 'D', '*', 'S', '.'], ['*', 'D', '.', 'X', '.'], ['X', 'S', '.', '*', '.'], ['.', '.', '.', '.', '*'], ['.', 'S', '.', 'X', '.'], ['.', 'X', '.', 'X', '.'], ['.', '.', '*', '.', '.'], ['X', '.', '.', '.', 'S'], ['.', '.', 'S', '.', '.']]) == -1\nassert solution.minimumSeconds([['.', '.', '*', 'X', 'D', '.', '*', 'D', '.'], ['.', 'D', '*', '.', '*', '.', '*', 'S', '.']]) == 1\nassert solution.minimumSeconds([['.', 'S', '.'], ['D', '.', '.'], ['.', '.', 'S']]) == 3\nassert solution.minimumSeconds([['*', 'S', 'S', 'D', 'D'], ['X', 'D', 'S', 'D', 'D'], ['X', '.', '.', '.', '.']]) == 1",
  "inefficient_solution": "class Solution:\n    def minimumSeconds(self, land: List[List[str]]) -> int:\n        m, n = len(land), len(land[0])\n        flooded = [[False] * n for _ in range(m)]\n        stone = [[False] * n for _ in range(m)]\n        vis = [[False] * n for _ in range(m)]\n        g = [[inf] * n for _ in range(m)]\n        q = deque()\n        si = sj = 0\n        for i, row in enumerate(land):\n            for j, c in enumerate(row):\n                if c == \"*\":\n                    flooded[i][j] = True\n                elif c == \"S\":\n                    si, sj = i, j\n        dirs = (-1, 0, 1, 0, -1)\n        t = 0\n        for _ in range(10000):\n            new_stone = [[False] * n for _ in range(m)]\n            for i in range(m):\n                for j in range(n):\n                    if flooded[i][j] or stone[i][j]:\n                        new_stone[i][j] = True\n                    if land[i][j] == \"X\":\n                        new_stone[i][j] = True\n            stone = new_stone\n            new_flooded = [[False] * n for _ in range(m)]\n            for i in range(m):\n                for j in range(n):\n                    if (land[i][j] == \".\" and\n                            (i > 0 and flooded[i-1][j]) or\n                            (i < m-1 and flooded[i+1][j]) or\n                            (j > 0 and flooded[i][j-1]) or\n                            (j < n-1 and flooded[i][j+1])):\n                        new_flooded[i][j] = True\n            flooded = new_flooded\n            new_q = deque()\n            for i in range(m):\n                for j in range(n):\n                    if land[i][j] == \"S\" and not vis[i][j]:\n                        vis[i][j] = True\n                        q.append((i, j))\n            while q:\n                i, j = q.popleft()\n                if land[i][j] == \"D\":\n                    return t\n                for a, b in pairwise(dirs):\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and not vis[x][y]\n                        and not flooded[x][y]\n                        and not stone[x][y]\n                        and land[x][y] in \".D\"\n                    ):\n                        vis[x][y] = True\n                        q.append((x, y))\n            t += 1\n        return -1",
  "is_python": true
}