{
  "problem_idx": 1619,
  "task_name": "Mean of Array After Removing Some Elements",
  "markdown_description": "\nGiven an integer array `arr`, return *the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements.*\n\n\nAnswers within `10-5` of the **actual answer** will be considered accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\n**Output:** 2.00000\n**Explanation:** After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\n**Output:** 4.00000\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\n**Output:** 4.77778\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `20 <= arr.length <= 1000`\n* `arr.length`**is a multiple** of `20`.\n* `0 <= arr[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def trimMean(self, arr: List[int]) -> float:\n        n = len(arr)\n        start, end = int(n * 0.05), int(n * 0.95)\n        arr.sort()\n        t = arr[start:end]\n        return round(sum(t) / len(t), 5)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def trimMean(self, arr):\n        n = len(arr)\n        start, end = int(n * 0.05), int(n * 0.95)\n        arr.sort()\n        t = arr[start:end]\n        return round(sum(t) / len(t), 5)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.choices(range(0, 100001), k=20)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.trimMean(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.trimMean(arr) == expected_result\n        test_case_generator_results.append(f\"assert solution.trimMean({arr}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.trimMean([13198, 16559, 19004, 30117, 30229, 34939, 41073, 41262, 43415, 46152, 57182, 65510, 67492, 80359, 90533, 92593, 92978, 93201, 96686, 98964]) == 57738.0\nassert solution.trimMean([2833, 10906, 16127, 17974, 25502, 26085, 28351, 36100, 41391, 43679, 50577, 52752, 55061, 57095, 65511, 66708, 66892, 68602, 73455, 76838]) == 44598.22222\nassert solution.trimMean([1314, 5371, 6289, 14407, 16993, 17108, 20421, 42159, 42937, 48628, 51096, 57309, 68291, 68294, 68348, 71291, 71774, 85520, 91635, 98066]) == 47103.94444\nassert solution.trimMean([598, 10932, 12294, 24248, 36860, 38707, 41954, 42599, 43092, 52936, 58152, 60527, 61186, 67683, 76168, 86314, 88423, 88664, 90347, 95078]) == 54504.77778\nassert solution.trimMean([13589, 19806, 21314, 26478, 38971, 47240, 49719, 55197, 61912, 66524, 68566, 71030, 72995, 78181, 80075, 85703, 93090, 98591, 99140, 99207]) == 63029.55556\nassert solution.trimMean([6415, 7181, 14799, 17636, 40553, 52051, 57491, 60023, 67458, 71744, 72483, 73166, 73794, 90821, 92850, 93766, 93983, 96661, 96927, 99804]) == 65188.16667\nassert solution.trimMean([697, 3002, 8322, 9081, 17650, 19737, 20456, 23289, 28145, 30259, 37135, 38969, 43340, 70766, 79090, 81747, 84646, 92637, 95834, 99347]) == 43561.38889\nassert solution.trimMean([9790, 11347, 16656, 19498, 24957, 25404, 36069, 36275, 41354, 45087, 55693, 59635, 63312, 72953, 73819, 83425, 86139, 89276, 90489, 94042]) == 51743.77778\nassert solution.trimMean([1676, 10928, 15990, 24709, 27113, 29301, 36946, 39149, 48879, 49989, 62526, 70250, 71629, 74940, 75486, 76947, 78862, 82811, 95409, 96018]) == 53992.44444\nassert solution.trimMean([752, 8016, 8813, 19098, 19318, 19520, 30339, 31547, 47533, 53459, 60755, 69154, 72640, 77688, 78786, 82290, 82978, 85066, 91997, 93714]) == 52166.5\nassert solution.trimMean([955, 5685, 8416, 10312, 15059, 18600, 29207, 41661, 56749, 61672, 66179, 69002, 70960, 72516, 72642, 74686, 75620, 77501, 83424, 90536]) == 50549.5\nassert solution.trimMean([6110, 7475, 11345, 14012, 29149, 34123, 35810, 43957, 45079, 54413, 57295, 58169, 61650, 64068, 64292, 69957, 72543, 95121, 95785, 96421]) == 50791.27778\nassert solution.trimMean([165, 25518, 32156, 36004, 39395, 42984, 44781, 45330, 47820, 50698, 51690, 56908, 57795, 63210, 70383, 77908, 88842, 93160, 94705, 95043]) == 56627.05556\nassert solution.trimMean([340, 3957, 13669, 15177, 16437, 17129, 20648, 27282, 28785, 40873, 50257, 55279, 58448, 63460, 69940, 71026, 75759, 78633, 92063, 92938]) == 44379.0\nassert solution.trimMean([59, 2753, 2755, 10020, 17027, 17828, 24107, 34084, 41657, 57812, 60600, 63346, 63490, 64296, 64771, 66312, 73639, 74149, 76697, 94913]) == 45296.83333\nassert solution.trimMean([12829, 14014, 18989, 19082, 31867, 35470, 53833, 57416, 66858, 69917, 75382, 76080, 77631, 82654, 83026, 84315, 86102, 87544, 93230, 96990]) == 61856.11111\nassert solution.trimMean([3378, 5251, 11401, 14982, 17774, 18763, 33313, 40323, 43467, 44088, 45952, 46826, 47730, 50536, 57216, 58017, 73607, 80644, 87975, 89776]) == 43214.72222\nassert solution.trimMean([343, 2541, 14554, 15674, 16401, 16871, 24379, 24518, 36323, 37799, 38125, 39316, 51384, 67615, 68242, 70690, 86457, 86751, 90288, 92569]) == 43773.77778\nassert solution.trimMean([3462, 4184, 11948, 18255, 30206, 33984, 45445, 56572, 57952, 65019, 66092, 69745, 75184, 75497, 88555, 88877, 89469, 92237, 97700, 99051]) == 59273.38889\nassert solution.trimMean([3066, 3619, 9779, 10561, 12646, 14206, 18844, 20938, 28485, 28767, 31235, 57248, 59013, 62380, 68072, 74387, 88495, 90385, 91886, 92386]) == 42830.33333\nassert solution.trimMean([86, 21503, 22027, 26131, 29386, 34324, 34515, 40483, 43645, 50380, 57388, 65284, 68187, 68668, 73981, 74146, 82118, 84609, 90419, 99903]) == 53733.0\nassert solution.trimMean([448, 10730, 11298, 18040, 19121, 21153, 23478, 29520, 31678, 31926, 35629, 37156, 43074, 64102, 65970, 72450, 74197, 83335, 90256, 93853]) == 42395.16667\nassert solution.trimMean([58, 9263, 9768, 15245, 22610, 26583, 28475, 36980, 44412, 48037, 51339, 61616, 67014, 68054, 68569, 80000, 89354, 94611, 98082, 98358]) == 51111.77778\nassert solution.trimMean([1826, 18262, 25290, 25772, 27091, 28586, 29188, 30961, 35973, 45857, 48067, 48556, 53562, 54841, 61899, 62501, 74445, 84722, 86990, 88138]) == 46809.05556\nassert solution.trimMean([4300, 8861, 10171, 14289, 21777, 21839, 29937, 30491, 31263, 31740, 32553, 49412, 53741, 57785, 74829, 84963, 93302, 93720, 94879, 98450]) == 46419.55556\nassert solution.trimMean([7421, 20329, 23705, 34058, 38600, 40574, 40753, 50397, 56434, 63557, 71789, 73586, 76956, 77576, 79018, 83181, 84490, 88108, 89266, 99229]) == 60687.61111\nassert solution.trimMean([3879, 8828, 10031, 11589, 16469, 19728, 26479, 30300, 45464, 47503, 49655, 66401, 69291, 73478, 79911, 82085, 89077, 89848, 91535, 95082]) == 50426.22222\nassert solution.trimMean([10163, 16090, 17753, 21901, 22737, 26508, 29318, 29710, 29935, 33744, 38982, 46352, 48995, 56429, 65019, 65823, 78392, 83138, 89430, 95001]) == 44458.66667\nassert solution.trimMean([9454, 9934, 11864, 17497, 19353, 20560, 31777, 34678, 37341, 41500, 42736, 46053, 55466, 61401, 73039, 77470, 78944, 80435, 92469, 97739]) == 46250.94444\nassert solution.trimMean([2913, 3352, 4583, 15226, 15397, 19190, 20483, 21005, 34261, 41953, 42396, 42503, 52272, 54278, 59676, 66987, 73836, 84801, 98356, 98828]) == 41697.5\nassert solution.trimMean([18244, 20713, 23763, 23863, 23866, 25063, 26339, 26789, 27337, 31437, 39916, 40321, 79262, 82209, 90850, 91069, 93816, 93859, 94623, 97605]) == 51949.72222\nassert solution.trimMean([4812, 6031, 15894, 17944, 31334, 35210, 35236, 35750, 46372, 50132, 51036, 60374, 62521, 75665, 78043, 83195, 90945, 91070, 91462, 93064]) == 53234.11111\nassert solution.trimMean([2158, 6332, 29519, 33729, 44445, 45003, 45070, 57609, 59367, 68229, 69206, 70149, 75786, 77006, 87584, 89420, 92744, 93302, 94377, 97332]) == 63270.94444\nassert solution.trimMean([3877, 7356, 7869, 8424, 10120, 25481, 29671, 33337, 36762, 38439, 48749, 51749, 63517, 65498, 82512, 83026, 86416, 91395, 95088, 98323]) == 48078.27778\nassert solution.trimMean([4349, 22093, 28033, 33318, 35187, 36083, 40268, 45874, 52468, 63770, 66754, 72875, 73915, 74891, 79282, 79957, 93139, 95348, 97065, 97620]) == 60573.33333\nassert solution.trimMean([3289, 6789, 10090, 13178, 24630, 27497, 27983, 40969, 57366, 59318, 65722, 68099, 69187, 69304, 81359, 81364, 81894, 96850, 98052, 98970]) == 54425.05556\nassert solution.trimMean([17797, 21928, 25101, 25504, 25719, 28518, 29051, 31142, 33920, 55064, 62466, 72023, 72712, 73386, 80599, 84565, 86326, 96560, 96608, 98788]) == 55621.77778\nassert solution.trimMean([598, 10033, 12122, 19627, 22500, 24010, 35581, 42714, 48083, 48512, 50872, 53396, 56413, 58795, 60418, 62332, 70177, 76568, 94013, 96400]) == 47009.22222\nassert solution.trimMean([844, 6478, 9256, 13520, 20270, 27106, 31177, 44299, 47596, 48336, 53938, 54334, 55862, 56035, 59296, 64574, 74568, 83742, 83944, 86249]) == 46351.72222\nassert solution.trimMean([6405, 10675, 12336, 15011, 20928, 30505, 35298, 36586, 39103, 39994, 51841, 54088, 60815, 70181, 78469, 88121, 92812, 96998, 97093, 99430]) == 51714.11111\nassert solution.trimMean([1976, 3953, 13428, 13622, 16104, 26049, 27318, 37509, 39585, 43272, 62337, 63261, 68565, 70173, 71005, 77612, 80849, 86364, 87446, 98283]) == 49358.44444\nassert solution.trimMean([549, 744, 7440, 8899, 24026, 27918, 31968, 34248, 38360, 39314, 46485, 54127, 65469, 71181, 72332, 74552, 75651, 78805, 81837, 95081]) == 46297.55556\nassert solution.trimMean([7248, 9086, 17791, 30154, 30837, 31718, 32592, 34021, 34966, 44209, 44963, 47434, 62188, 65235, 77526, 82823, 86454, 94981, 95018, 99814]) == 51222.0\nassert solution.trimMean([2508, 4314, 20286, 39534, 51085, 54187, 55362, 58227, 60497, 68293, 70403, 78018, 78092, 79187, 84031, 86203, 88627, 88739, 90309, 97441]) == 64188.55556\nassert solution.trimMean([3877, 6792, 16893, 19287, 21261, 25270, 35482, 38754, 39504, 48950, 60374, 61398, 62743, 66166, 68228, 73609, 82480, 89141, 89143, 93052]) == 50304.16667\nassert solution.trimMean([606, 1918, 3610, 7280, 9966, 21925, 25401, 28165, 30116, 40802, 40951, 56453, 66124, 68955, 79638, 85190, 89170, 89565, 90384, 90894]) == 46422.94444\nassert solution.trimMean([554, 5722, 12730, 16463, 19939, 39365, 51628, 51719, 54098, 58448, 64640, 70336, 72934, 73785, 84184, 89008, 90077, 90281, 95850, 99032]) == 57844.83333\nassert solution.trimMean([3636, 4469, 10057, 10571, 13206, 17438, 20146, 25026, 25135, 29736, 44384, 49589, 57961, 62597, 66549, 78829, 87300, 87807, 88950, 99805]) == 43319.44444\nassert solution.trimMean([3223, 9880, 12238, 26113, 27665, 31593, 41366, 42034, 58075, 58221, 61660, 67667, 78902, 79748, 81197, 85897, 89772, 93624, 97759, 99399]) == 57967.27778\nassert solution.trimMean([1192, 1274, 3118, 9533, 20206, 26941, 27869, 32990, 32991, 38566, 38981, 41105, 42209, 46666, 65952, 69761, 75290, 87627, 90424, 99680]) == 41750.16667\nassert solution.trimMean([4274, 11190, 12414, 26752, 28514, 31862, 36591, 37306, 42547, 46023, 48194, 48338, 58631, 63636, 69374, 70246, 70904, 81377, 83954, 94157]) == 48214.05556\nassert solution.trimMean([1520, 11371, 21647, 32782, 33314, 34076, 39983, 46888, 49462, 52565, 53264, 59025, 65823, 66587, 75195, 83813, 84160, 91240, 91365, 98474]) == 55142.22222\nassert solution.trimMean([3224, 4860, 6479, 8100, 20688, 25788, 28783, 32141, 43531, 45517, 53013, 53101, 57160, 59785, 60351, 77301, 77872, 81447, 85900, 87618]) == 45656.5\nassert solution.trimMean([332, 6838, 8027, 16263, 25412, 35794, 40981, 46942, 48179, 56561, 59484, 64277, 71737, 77629, 81306, 84133, 87914, 93920, 93922, 94845]) == 55517.72222\nassert solution.trimMean([15090, 16882, 19064, 23772, 26509, 39121, 41352, 42520, 43639, 54383, 55585, 57010, 65858, 69723, 82274, 83521, 86099, 87584, 95236, 96818]) == 55007.33333\nassert solution.trimMean([2035, 2498, 7982, 21779, 26597, 26804, 35555, 39016, 41507, 53198, 57853, 64943, 66446, 69649, 69750, 69790, 92119, 93605, 95779, 97302]) == 51937.22222\nassert solution.trimMean([5155, 6673, 7097, 10137, 17942, 21494, 28724, 43461, 51814, 58117, 61387, 67829, 68621, 69176, 78680, 79834, 83213, 86743, 87026, 93451]) == 51553.77778\nassert solution.trimMean([11119, 21734, 22991, 31545, 33104, 34327, 39401, 43557, 49631, 54545, 58479, 64983, 68840, 69162, 71650, 75395, 78236, 80363, 85344, 96935]) == 54627.05556\nassert solution.trimMean([1981, 7486, 7633, 7636, 9085, 13116, 14672, 20588, 39745, 42674, 48629, 54291, 62509, 73144, 74312, 81064, 88510, 96664, 98508, 99355]) == 46681.44444\nassert solution.trimMean([1433, 8931, 10519, 12629, 16800, 16814, 22062, 27059, 35708, 37441, 43204, 52626, 61795, 67040, 68324, 75228, 76820, 84017, 88674, 95613]) == 44760.61111\nassert solution.trimMean([1821, 2649, 4962, 5740, 7474, 17302, 19848, 24248, 29709, 50782, 54125, 55980, 66028, 69267, 70557, 76052, 77807, 79769, 90667, 92623]) == 44609.22222\nassert solution.trimMean([14814, 27593, 28881, 29869, 34077, 36619, 42842, 43238, 49229, 51342, 54785, 59802, 60248, 65800, 68378, 82247, 91838, 92393, 98930, 99183]) == 56561.72222\nassert solution.trimMean([795, 15861, 20441, 30030, 31509, 42325, 45315, 50421, 52581, 57589, 57792, 66320, 72860, 74141, 75345, 79198, 84878, 87249, 95322, 96803]) == 57732.05556\nassert solution.trimMean([5862, 13034, 20330, 26038, 27527, 33706, 36905, 38993, 40547, 51771, 53628, 61960, 67911, 72975, 77338, 80114, 85670, 86770, 91020, 97769]) == 53679.83333\nassert solution.trimMean([3570, 8297, 19553, 20070, 27007, 27229, 31098, 31210, 46644, 57036, 60479, 62380, 64075, 66020, 68952, 71731, 74979, 82992, 91951, 99666]) == 50650.16667\nassert solution.trimMean([14392, 16394, 16987, 17725, 19843, 27037, 34033, 50037, 51869, 53599, 57444, 63112, 65051, 72203, 74376, 75415, 75516, 83189, 87785, 91042]) == 52311.94444\nassert solution.trimMean([2821, 3302, 7509, 9709, 20530, 22046, 25512, 27869, 35981, 49094, 54536, 60332, 75655, 78015, 78868, 84116, 87829, 89849, 91267, 96384]) == 50112.16667\nassert solution.trimMean([5416, 7102, 12512, 19710, 22025, 25137, 26415, 26893, 34637, 35769, 41827, 43694, 55894, 59177, 60210, 66045, 66754, 72895, 73294, 87643]) == 41666.11111\nassert solution.trimMean([158, 4751, 12856, 14064, 15217, 16735, 20634, 21004, 21916, 45892, 48601, 49571, 65801, 66508, 69818, 73962, 81590, 82907, 91053, 93181]) == 44604.44444\nassert solution.trimMean([11278, 12278, 27471, 34847, 40254, 43065, 44195, 56791, 62586, 64996, 65273, 71382, 73735, 77446, 78156, 78756, 81290, 81771, 83956, 94774]) == 59902.66667\nassert solution.trimMean([3463, 6538, 9152, 23795, 27460, 32266, 35356, 40965, 45994, 46184, 59730, 62408, 68728, 68842, 75653, 78377, 79316, 89715, 94577, 98993]) == 52503.11111\nassert solution.trimMean([8779, 9214, 12456, 16270, 17620, 17801, 32436, 32807, 35732, 43902, 46306, 47618, 47981, 49215, 75316, 77479, 79255, 80862, 89341, 94135]) == 45089.5\nassert solution.trimMean([8985, 17468, 20315, 23551, 28399, 30744, 38842, 41699, 41956, 45228, 48658, 57270, 59451, 62765, 64036, 72324, 79622, 82167, 93441, 98679]) == 50440.88889\nassert solution.trimMean([6899, 7035, 8255, 9925, 21888, 26190, 29891, 36744, 38904, 39351, 41066, 42520, 56242, 57725, 61508, 62190, 68411, 76823, 77047, 97466]) == 42317.5\nassert solution.trimMean([3319, 7522, 12880, 15598, 16954, 20061, 28042, 30537, 45349, 51212, 52149, 57165, 60184, 64053, 68008, 74400, 75191, 77630, 79634, 86120]) == 46476.05556\nassert solution.trimMean([6833, 7486, 7986, 14111, 15921, 16655, 23790, 28708, 38600, 39852, 47413, 52113, 52729, 58730, 61431, 66250, 74209, 84494, 96637, 99047]) == 43728.61111\nassert solution.trimMean([15296, 26312, 33845, 33974, 34820, 39280, 47373, 47902, 50444, 58743, 62387, 62562, 63152, 64529, 64989, 65793, 69537, 78042, 92770, 96366]) == 55358.55556\nassert solution.trimMean([17433, 20504, 22774, 28628, 28908, 33481, 40639, 42651, 49218, 52385, 52558, 52806, 57606, 65974, 66023, 67486, 72076, 78435, 79336, 82399]) == 50638.22222\nassert solution.trimMean([5968, 7972, 12398, 12629, 19111, 22217, 27563, 31221, 36268, 36797, 38769, 73872, 75852, 78265, 85053, 90452, 94191, 95277, 95949, 99408]) == 51880.88889\nassert solution.trimMean([8201, 10971, 12304, 19884, 30466, 34387, 36700, 37993, 39002, 39681, 40651, 44470, 69988, 75247, 78663, 83957, 88366, 90507, 94506, 94812]) == 51541.27778\nassert solution.trimMean([555, 6919, 11187, 12446, 23634, 24757, 31725, 33596, 34899, 45300, 45571, 57709, 60742, 66412, 77156, 81212, 81837, 84877, 84885, 87017]) == 48048.0\nassert solution.trimMean([3151, 15055, 15467, 18514, 25348, 27955, 33780, 39903, 44966, 45779, 50273, 52241, 63429, 75682, 84154, 86555, 88093, 90044, 95121, 99995]) == 52908.83333\nassert solution.trimMean([3251, 9884, 20115, 24294, 32871, 37992, 38442, 53161, 55819, 56448, 58241, 59303, 64413, 70294, 71867, 81165, 81510, 81649, 90795, 93443]) == 54903.5\nassert solution.trimMean([3491, 10309, 15133, 19223, 26888, 30975, 34131, 38262, 43683, 44381, 51605, 55615, 59238, 60482, 63412, 76196, 78846, 84438, 88713, 99969]) == 48973.88889\nassert solution.trimMean([642, 16821, 22678, 23779, 28031, 28443, 29958, 33973, 41503, 44934, 46331, 55893, 61560, 64245, 72452, 73402, 78743, 80688, 85831, 97213]) == 49403.61111\nassert solution.trimMean([14720, 27575, 29063, 35253, 35327, 36079, 54447, 59751, 67015, 77525, 78364, 86162, 86965, 91741, 92705, 93869, 97667, 98072, 98097, 98586]) == 69204.27778\nassert solution.trimMean([6322, 13722, 27193, 31942, 33467, 39580, 53535, 54844, 67908, 77605, 80527, 84747, 86202, 90152, 93554, 94607, 95897, 96440, 97260, 98158]) == 67732.33333\nassert solution.trimMean([1088, 5820, 6794, 10842, 18297, 42577, 48501, 50280, 53939, 54929, 56870, 64849, 72385, 72867, 80643, 91166, 91569, 95017, 97618, 98511]) == 56386.83333\nassert solution.trimMean([13, 4516, 9790, 19547, 25351, 29671, 43026, 43834, 57963, 59588, 59593, 69308, 73670, 77583, 80512, 80840, 83054, 87431, 89146, 94820]) == 55245.72222\nassert solution.trimMean([5997, 7830, 9850, 11446, 13404, 13559, 25871, 35912, 40379, 49682, 50149, 51835, 55256, 59665, 63694, 71650, 72672, 75443, 80269, 99585]) == 43809.22222\nassert solution.trimMean([12683, 15331, 15383, 21609, 21615, 32764, 32830, 36832, 40456, 42745, 46881, 53525, 55563, 56737, 59222, 61820, 67585, 69977, 78592, 81253]) == 44970.38889\nassert solution.trimMean([7538, 11424, 11953, 16412, 17170, 17849, 22994, 26608, 27140, 28415, 31480, 32851, 38280, 40868, 43817, 47631, 56288, 60352, 72277, 83069]) == 33544.94444\nassert solution.trimMean([12833, 15398, 24622, 42629, 45661, 53553, 54736, 58581, 58996, 63030, 63206, 65798, 72187, 72306, 76493, 79692, 81228, 85455, 89343, 97713]) == 61273.0\nassert solution.trimMean([1691, 19553, 23079, 25918, 27427, 27481, 28543, 30834, 31662, 32987, 39095, 39976, 55134, 62638, 63079, 72435, 78409, 92578, 92823, 95670]) == 46869.5\nassert solution.trimMean([8112, 13843, 24346, 30262, 32271, 34892, 36281, 36805, 39501, 40551, 40792, 44989, 47185, 58890, 65457, 72497, 77233, 79558, 90768, 99674]) == 48117.83333\nassert solution.trimMean([3070, 13401, 15074, 18600, 26046, 36942, 42567, 47148, 48149, 48724, 55912, 60524, 81599, 83844, 84661, 86588, 88458, 96500, 96679, 98354]) == 57300.88889\nassert solution.trimMean([4537, 11149, 19322, 21018, 23425, 32802, 35135, 50825, 53582, 57802, 58135, 74781, 79134, 81365, 89719, 89770, 91525, 92279, 92743, 94179]) == 58583.94444\nassert solution.trimMean([2987, 3578, 5870, 6142, 7091, 7928, 11220, 34949, 46962, 50688, 51891, 56549, 62896, 65153, 72743, 75856, 76284, 76828, 77098, 93088]) == 43873.66667\nassert solution.trimMean([13571, 13761, 14877, 16946, 19435, 20333, 22160, 29110, 29344, 40573, 64116, 64261, 66229, 67233, 69833, 70311, 73534, 80152, 82155, 94588]) == 46909.05556\nassert solution.trimMean([3595, 4214, 8251, 11819, 12987, 16794, 17347, 21478, 22975, 24764, 28803, 41457, 46653, 65398, 70748, 73388, 77273, 81969, 90685, 94444]) == 39833.5",
  "inefficient_solution": "class Solution:\n    def trimMean(self, arr: List[int]) -> float:\n        n = len(arr)\n        threshold = int(n * 0.05)\n        removed = []\n        remaining = []\n        \n        for _ in range(threshold):\n            arr.remove(min(arr))\n            removed.append(min(arr))\n        \n        for _ in range(threshold):\n            arr.remove(max(arr))\n            removed.append(max(arr))\n        \n        for num in arr:\n            remaining.append(num)\n        \n        return round(sum(remaining) / len(remaining), 5)",
  "is_python": true
}