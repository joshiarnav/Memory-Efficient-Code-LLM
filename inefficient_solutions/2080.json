{
  "problem_idx": 2080,
  "task_name": "Range Frequency Queries",
  "markdown_description": "\nDesign a data structure to find the **frequency** of a given value in a given subarray.\n\n\nThe **frequency** of a value in a subarray is the number of occurrences of that value in the subarray.\n\n\nImplement the `RangeFreqQuery` class:\n\n\n* `RangeFreqQuery(int[] arr)` Constructs an instance of the class with the given **0-indexed** integer array `arr`.\n* `int query(int left, int right, int value)` Returns the **frequency** of `value` in the subarray `arr[left...right]`.\n\n\nA **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input**\n[\"RangeFreqQuery\", \"query\", \"query\"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]\n**Output**\n[null, 1, 2]\n\n**Explanation**\nRangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 105`\n* `1 <= arr[i], value <= 104`\n* `0 <= left <= right < arr.length`\n* At most `105` calls will be made to `query`\n\n\n",
  "canonical_solution": "class RangeFreqQuery:\n    def __init__(self, arr: List[int]):\n        self.mp = defaultdict(list)\n        for i, x in enumerate(arr):\n            self.mp[x].append(i)\n\n    def query(self, left: int, right: int, value: int) -> int:\n        if value not in self.mp:\n            return 0\n        arr = self.mp[value]\n        l, r = bisect_right(arr, left - 1), bisect_right(arr, right)\n        return r - l\n\n\n# Your RangeFreqQuery object will be instantiated and called as such:\n# obj = RangeFreqQuery(arr)\n# param_1 = obj.query(left,right,value)\n",
  "test_case_generator": "\nimport random\n\nclass RangeFreqQueryTest:\n    def __init__(self, arr):\n        self.arr = arr\n    \n    def generate_test_case(self):\n        # Generate random indices\n        left = random.randint(0, len(self.arr)-1)\n        right = random.randint(left, len(self.arr)-1)\n        \n        # Generate a random value\n        value = random.randint(1, 10001)\n        \n        # Calculate the expected result using the provided RangeFreqQuery class\n        freq_query = RangeFreqQuery(self.arr)\n        expected_result = freq_query.query(left, right, value)\n        \n        return left, right, value, expected_result\n    \n    def test_generated_test_cases(self, num_tests):\n        test_case_generator_results = []\n        for i in range(num_tests):\n            left, right, value, expected_result = self.generate_test_case()\n            freq_query = RangeFreqQuery(self.arr)\n            assert freq_query.query(left, right, value) == expected_result\n            print(f\"assert freq_query.query({left}, {right}, {value}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert freq_query.query({left}, {right}, {value}) == {expected_result}\")\n        return test_case_generator_results\n\nif __name__ == \"__main__\":\n    arr = [12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]  # You can change this to generate test cases for different arrays\n    num_tests = 100  # You can change this to generate more test cases\n    range_freq_query_test = RangeFreqQueryTest(arr)\n    test_case_generator_results = range_freq_query_test.test_generated_test_cases(num_tests)\n",
  "test_case": "assert freq_query.query(1, 5, 7455) == 0\nassert freq_query.query(6, 8, 3554) == 0\nassert freq_query.query(9, 10, 5950) == 0\nassert freq_query.query(1, 9, 9842) == 0\nassert freq_query.query(8, 8, 4281) == 0\nassert freq_query.query(8, 9, 592) == 0\nassert freq_query.query(0, 9, 4218) == 0\nassert freq_query.query(2, 9, 1132) == 0\nassert freq_query.query(9, 10, 7410) == 0\nassert freq_query.query(8, 9, 8343) == 0\nassert freq_query.query(9, 10, 5239) == 0\nassert freq_query.query(5, 5, 8433) == 0\nassert freq_query.query(7, 8, 1085) == 0\nassert freq_query.query(6, 9, 3356) == 0\nassert freq_query.query(7, 8, 8508) == 0\nassert freq_query.query(5, 6, 6994) == 0\nassert freq_query.query(7, 8, 5363) == 0\nassert freq_query.query(8, 8, 5724) == 0\nassert freq_query.query(10, 10, 9754) == 0\nassert freq_query.query(7, 8, 8541) == 0\nassert freq_query.query(4, 9, 5415) == 0\nassert freq_query.query(0, 8, 2181) == 0\nassert freq_query.query(6, 7, 1712) == 0\nassert freq_query.query(3, 5, 753) == 0\nassert freq_query.query(10, 10, 2393) == 0\nassert freq_query.query(7, 8, 3427) == 0\nassert freq_query.query(8, 11, 3063) == 0\nassert freq_query.query(2, 5, 9438) == 0\nassert freq_query.query(8, 11, 1802) == 0\nassert freq_query.query(4, 4, 5971) == 0\nassert freq_query.query(10, 10, 2045) == 0\nassert freq_query.query(6, 8, 3035) == 0\nassert freq_query.query(2, 5, 9970) == 0\nassert freq_query.query(1, 5, 8589) == 0\nassert freq_query.query(3, 3, 723) == 0\nassert freq_query.query(1, 4, 7067) == 0\nassert freq_query.query(2, 6, 738) == 0\nassert freq_query.query(9, 10, 8766) == 0\nassert freq_query.query(0, 2, 4105) == 0\nassert freq_query.query(1, 11, 8674) == 0\nassert freq_query.query(7, 7, 95) == 0\nassert freq_query.query(9, 9, 1948) == 0\nassert freq_query.query(1, 9, 8204) == 0\nassert freq_query.query(0, 4, 1307) == 0\nassert freq_query.query(3, 6, 4068) == 0\nassert freq_query.query(3, 9, 1699) == 0\nassert freq_query.query(0, 2, 3289) == 0\nassert freq_query.query(6, 6, 9846) == 0\nassert freq_query.query(4, 11, 8792) == 0\nassert freq_query.query(11, 11, 2764) == 0\nassert freq_query.query(8, 10, 6438) == 0\nassert freq_query.query(0, 8, 6533) == 0\nassert freq_query.query(4, 6, 8761) == 0\nassert freq_query.query(4, 4, 6748) == 0\nassert freq_query.query(7, 7, 6264) == 0\nassert freq_query.query(4, 10, 523) == 0\nassert freq_query.query(1, 1, 2779) == 0\nassert freq_query.query(5, 8, 6951) == 0\nassert freq_query.query(9, 11, 761) == 0\nassert freq_query.query(1, 5, 924) == 0\nassert freq_query.query(0, 8, 8716) == 0\nassert freq_query.query(11, 11, 1033) == 0\nassert freq_query.query(3, 11, 7633) == 0\nassert freq_query.query(0, 10, 9253) == 0\nassert freq_query.query(10, 10, 8910) == 0\nassert freq_query.query(5, 7, 4887) == 0\nassert freq_query.query(10, 11, 24) == 0\nassert freq_query.query(2, 3, 232) == 0\nassert freq_query.query(10, 11, 5820) == 0\nassert freq_query.query(11, 11, 1937) == 0\nassert freq_query.query(3, 6, 2693) == 0\nassert freq_query.query(0, 10, 7446) == 0\nassert freq_query.query(7, 10, 4622) == 0\nassert freq_query.query(6, 9, 819) == 0\nassert freq_query.query(4, 6, 8760) == 0\nassert freq_query.query(5, 6, 2788) == 0\nassert freq_query.query(11, 11, 7227) == 0\nassert freq_query.query(11, 11, 2236) == 0\nassert freq_query.query(8, 11, 4330) == 0\nassert freq_query.query(3, 3, 9823) == 0\nassert freq_query.query(1, 7, 3901) == 0\nassert freq_query.query(5, 7, 6555) == 0\nassert freq_query.query(3, 3, 5378) == 0\nassert freq_query.query(3, 9, 9262) == 0\nassert freq_query.query(1, 10, 4201) == 0\nassert freq_query.query(4, 6, 4169) == 0\nassert freq_query.query(11, 11, 348) == 0\nassert freq_query.query(6, 9, 5663) == 0\nassert freq_query.query(4, 4, 3024) == 0\nassert freq_query.query(0, 7, 5436) == 0\nassert freq_query.query(7, 8, 9925) == 0\nassert freq_query.query(9, 9, 3308) == 0\nassert freq_query.query(7, 9, 16) == 0\nassert freq_query.query(8, 8, 7269) == 0\nassert freq_query.query(11, 11, 2185) == 0\nassert freq_query.query(9, 11, 8483) == 0\nassert freq_query.query(2, 5, 4151) == 0\nassert freq_query.query(2, 9, 2128) == 0\nassert freq_query.query(0, 9, 4581) == 0\nassert freq_query.query(0, 6, 3111) == 0",
  "inefficient_solution": "from collections import defaultdict\nfrom bisect import bisect_right\n\nclass RangeFreqQuery:\n    def __init__(self, arr: list[int]):\n        self.arr = arr\n        self.mp = defaultdict(list)\n        for i, x in enumerate(arr):\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n            self.mp[x].append(i)\n\n    def query(self, left: int, right: int, value: int) -> int:\n        if value not in self.mp:\n            return 0\n        arr = self.mp[value]\n        l, r = bisect_right(arr, left - 1), bisect_right(arr, right)\n        return r - l",
  "is_python": true
}