{
  "problem_idx": 1201,
  "task_name": "Ugly Number III",
  "markdown_description": "\nAn **ugly number** is a positive integer that is divisible by `a`, `b`, or `c`.\n\n\nGiven four integers `n`, `a`, `b`, and `c`, return the `nth` **ugly number**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, a = 2, b = 3, c = 5\n**Output:** 4\n**Explanation:** The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, a = 2, b = 3, c = 4\n**Output:** 6\n**Explanation:** The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 5, a = 2, b = 11, c = 13\n**Output:** 10\n**Explanation:** The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, a, b, c <= 109`\n* `1 <= a * b * c <= 1018`\n* It is guaranteed that the result will be in range `[1, 2 * 109]`.\n\n\n",
  "canonical_solution": "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        ab = lcm(a, b)\n        bc = lcm(b, c)\n        ac = lcm(a, c)\n        abc = lcm(a, b, c)\n        l, r = 1, 2 * 10**9\n        while l < r:\n            mid = (l + r) >> 1\n            if (\n                mid // a\n                + mid // b\n                + mid // c\n                - mid // ab\n                - mid // bc\n                - mid // ac\n                + mid // abc\n                >= n\n            ):\n                r = mid\n            else:\n                l = mid + 1\n        return l\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        ab = lcm(a, b)\n        bc = lcm(b, c)\n        ac = lcm(a, c)\n        abc = lcm(a, b, c)\n        l, r = 1, 2 * 10**9\n        while l < r:\n            mid = (l + r) >> 1\n            if (\n                mid // a\n                + mid // b\n                + mid // c\n                - mid // ab\n                - mid // bc\n                - mid // ac\n                + mid // abc\n                >= n\n            ):\n                r = mid\n            else:\n                l = mid + 1\n        return l\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n, a, b, c\n    n = random.randint(1, 101)\n    a = random.randint(1, 1000000000)\n    b = random.randint(1, 1000000000)\n    c = random.randint(1, 1000000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.nthUglyNumber(n, a, b, c)\n\n    return n, a, b, c, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, a, b, c, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.nthUglyNumber(n, a, b, c) == expected_result\n        print(f\"assert solution.nthUglyNumber({n}, {a}, {b}, {c}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.nthUglyNumber({n}, {a}, {b}, {c}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.nthUglyNumber(19, 762600250, 659224358, 653150735) == 2000000000\nassert solution.nthUglyNumber(13, 35458762, 59978116, 66848981) == 239912464\nassert solution.nthUglyNumber(42, 377163970, 641690815, 667365781) == 2000000000\nassert solution.nthUglyNumber(66, 709636005, 501049543, 381288986) == 2000000000\nassert solution.nthUglyNumber(79, 452972346, 638613226, 951579848) == 2000000000\nassert solution.nthUglyNumber(25, 897277506, 444485647, 737623254) == 2000000000\nassert solution.nthUglyNumber(79, 425660738, 415442962, 640263974) == 2000000000\nassert solution.nthUglyNumber(97, 8493399, 184827962, 969459683) == 789886107\nassert solution.nthUglyNumber(35, 685239412, 723005508, 770165506) == 2000000000\nassert solution.nthUglyNumber(70, 239877610, 521421361, 186899270) == 2000000000\nassert solution.nthUglyNumber(37, 402295759, 154277596, 24621734) == 771387980\nassert solution.nthUglyNumber(55, 946274671, 463661700, 378353180) == 2000000000\nassert solution.nthUglyNumber(71, 850039782, 416764594, 504880863) == 2000000000\nassert solution.nthUglyNumber(74, 289624880, 112729298, 375738259) == 2000000000\nassert solution.nthUglyNumber(77, 986533704, 518254204, 139491092) == 2000000000\nassert solution.nthUglyNumber(53, 230733914, 352387259, 608698098) == 2000000000\nassert solution.nthUglyNumber(68, 29217816, 807607986, 545845113) == 1840722408\nassert solution.nthUglyNumber(51, 343966376, 787128495, 569624001) == 2000000000\nassert solution.nthUglyNumber(31, 332388806, 966989682, 333066203) == 2000000000\nassert solution.nthUglyNumber(51, 90285493, 326811798, 887196001) == 2000000000\nassert solution.nthUglyNumber(21, 314180204, 564722024, 486903843) == 2000000000\nassert solution.nthUglyNumber(77, 885299876, 60434062, 486244363) == 2000000000\nassert solution.nthUglyNumber(33, 332282466, 978490020, 322881907) == 2000000000\nassert solution.nthUglyNumber(71, 165450589, 801037022, 761654591) == 2000000000\nassert solution.nthUglyNumber(17, 648111253, 598932813, 223699693) == 2000000000\nassert solution.nthUglyNumber(30, 115353997, 595120493, 555304653) == 2000000000\nassert solution.nthUglyNumber(44, 942817641, 588797588, 502572550) == 2000000000\nassert solution.nthUglyNumber(21, 815772941, 871564594, 617645566) == 2000000000\nassert solution.nthUglyNumber(98, 55192809, 983474195, 765463518) == 2000000000\nassert solution.nthUglyNumber(61, 867921576, 682082068, 479783966) == 2000000000\nassert solution.nthUglyNumber(62, 594867771, 758061621, 888232931) == 2000000000\nassert solution.nthUglyNumber(44, 755004984, 150413737, 713367457) == 2000000000\nassert solution.nthUglyNumber(61, 56180123, 467390742, 482891033) == 2000000000\nassert solution.nthUglyNumber(44, 552504340, 447582182, 696106274) == 2000000000\nassert solution.nthUglyNumber(46, 619205797, 844412242, 435114902) == 2000000000\nassert solution.nthUglyNumber(24, 650377837, 623235318, 287618479) == 2000000000\nassert solution.nthUglyNumber(70, 644253989, 152741577, 31129489) == 1774380873\nassert solution.nthUglyNumber(1, 518370161, 984731934, 989204458) == 518370161\nassert solution.nthUglyNumber(39, 802211332, 786820465, 366854327) == 2000000000\nassert solution.nthUglyNumber(67, 974357424, 61163271, 749991875) == 2000000000\nassert solution.nthUglyNumber(61, 466499195, 179972250, 590616556) == 2000000000\nassert solution.nthUglyNumber(26, 277194757, 52406599, 644669303) == 1108779028\nassert solution.nthUglyNumber(69, 912909200, 908976894, 845474994) == 2000000000\nassert solution.nthUglyNumber(22, 614466883, 384207346, 199622569) == 2000000000\nassert solution.nthUglyNumber(25, 445786070, 658388502, 385784973) == 2000000000\nassert solution.nthUglyNumber(10, 220817117, 455386527, 820793355) == 1366159581\nassert solution.nthUglyNumber(85, 49076853, 946247801, 12267461) == 834306501\nassert solution.nthUglyNumber(39, 691430346, 185449442, 693024114) == 2000000000\nassert solution.nthUglyNumber(50, 8125985, 689996748, 884892784) == 406299250\nassert solution.nthUglyNumber(20, 842827122, 760599469, 906041857) == 2000000000\nassert solution.nthUglyNumber(38, 261383363, 929956942, 313989386) == 2000000000\nassert solution.nthUglyNumber(5, 558259747, 387781543, 717220456) == 1116519494\nassert solution.nthUglyNumber(80, 199960145, 754920646, 770937580) == 2000000000\nassert solution.nthUglyNumber(55, 789357779, 224412701, 307453086) == 2000000000\nassert solution.nthUglyNumber(64, 672861528, 180723463, 940733668) == 2000000000\nassert solution.nthUglyNumber(16, 348404625, 203354658, 243727405) == 1423482606\nassert solution.nthUglyNumber(97, 702339177, 622969026, 113690724) == 2000000000\nassert solution.nthUglyNumber(42, 124994692, 608977737, 497506204) == 2000000000\nassert solution.nthUglyNumber(77, 99407536, 294429168, 613997852) == 2000000000\nassert solution.nthUglyNumber(38, 954549782, 631897760, 573329947) == 2000000000\nassert solution.nthUglyNumber(57, 434758155, 46329384, 151694026) == 1899504744\nassert solution.nthUglyNumber(17, 906055348, 719988411, 887539546) == 2000000000\nassert solution.nthUglyNumber(53, 665348395, 390497319, 173429300) == 2000000000\nassert solution.nthUglyNumber(68, 523546104, 939174696, 826096415) == 2000000000\nassert solution.nthUglyNumber(18, 219899756, 298522674, 356192188) == 1780960940\nassert solution.nthUglyNumber(73, 695150181, 305397099, 134012549) == 2000000000\nassert solution.nthUglyNumber(97, 660661465, 976050540, 844425020) == 2000000000\nassert solution.nthUglyNumber(54, 510266541, 395197668, 680527394) == 2000000000\nassert solution.nthUglyNumber(55, 794536956, 791474271, 81866799) == 2000000000\nassert solution.nthUglyNumber(1, 771311186, 457202558, 301745890) == 301745890\nassert solution.nthUglyNumber(15, 677741462, 567275964, 120145861) == 1355482924\nassert solution.nthUglyNumber(97, 644089051, 33077037, 345116687) == 2000000000\nassert solution.nthUglyNumber(54, 422257967, 182300321, 468760274) == 2000000000\nassert solution.nthUglyNumber(22, 854271937, 935808827, 154128381) == 2000000000\nassert solution.nthUglyNumber(93, 922139324, 9382071, 975139206) == 872532603\nassert solution.nthUglyNumber(97, 427813415, 533454927, 224014880) == 2000000000\nassert solution.nthUglyNumber(21, 480025255, 687985386, 689352037) == 2000000000\nassert solution.nthUglyNumber(88, 619403114, 507183525, 289412427) == 2000000000\nassert solution.nthUglyNumber(81, 73028809, 720028505, 425245647) == 2000000000\nassert solution.nthUglyNumber(54, 300369388, 257379181, 705297864) == 2000000000\nassert solution.nthUglyNumber(37, 629571100, 370533113, 431819464) == 2000000000\nassert solution.nthUglyNumber(101, 86919180, 30445099, 542465872) == 2000000000\nassert solution.nthUglyNumber(72, 390206594, 926613224, 219435823) == 2000000000\nassert solution.nthUglyNumber(48, 47846712, 463832812, 96016187) == 1440242805\nassert solution.nthUglyNumber(52, 186076140, 828668017, 890720447) == 2000000000\nassert solution.nthUglyNumber(67, 108631205, 238123132, 751324350) == 2000000000\nassert solution.nthUglyNumber(94, 469232271, 235905240, 328785388) == 2000000000\nassert solution.nthUglyNumber(63, 919002241, 748979502, 506061139) == 2000000000\nassert solution.nthUglyNumber(46, 103752055, 164894848, 526145335) == 2000000000\nassert solution.nthUglyNumber(33, 176359708, 390912130, 862628809) == 2000000000\nassert solution.nthUglyNumber(15, 237592773, 460948254, 936156704) == 2000000000\nassert solution.nthUglyNumber(80, 93261539, 450294809, 787726961) == 2000000000\nassert solution.nthUglyNumber(33, 532031379, 948706397, 542871632) == 2000000000\nassert solution.nthUglyNumber(88, 771146124, 961355649, 967872532) == 2000000000\nassert solution.nthUglyNumber(95, 412237255, 157223476, 64637295) == 2000000000\nassert solution.nthUglyNumber(16, 986289586, 89233583, 744458420) == 1249270162\nassert solution.nthUglyNumber(64, 606373514, 257686666, 875961634) == 2000000000\nassert solution.nthUglyNumber(28, 594625104, 892510267, 921337804) == 2000000000\nassert solution.nthUglyNumber(17, 973847650, 839159382, 359837459) == 2000000000\nassert solution.nthUglyNumber(2, 882649784, 667221558, 960982159) == 882649784",
  "inefficient_solution": "class Solution:\n    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:\n        ugly_numbers = []\n        for i in range(1, 2 * 10**9):\n            if i % a == 0 or i % b == 0 or i % c == 0:\n                ugly_numbers.append(i)\n\n        ugly_numbers.sort()\n        return ugly_numbers[n - 1]",
  "is_python": true
}