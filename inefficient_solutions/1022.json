{
  "problem_idx": 1022,
  "task_name": "Sum of Root To Leaf Binary Numbers",
  "markdown_description": "\nYou are given the `root` of a binary tree where each node has a value `0` or `1`. Each root-to-leaf path represents a binary number starting with the most significant bit.\n\n\n* For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.\n\n\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return *the sum of these numbers*.\n\n\nThe test cases are generated so that the answer fits in a **32-bits** integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1022.Sum%20of%20Root%20To%20Leaf%20Binary%20Numbers/images/sum-of-root-to-leaf-binary-numbers.png)\n\n```\n\n**Input:** root = [1,0,1,0,1,0,1]\n**Output:** 22\n**Explanation:** (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [0]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 1000]`.\n* `Node.val` is `0` or `1`.\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def sumRootToLeaf(self, root: TreeNode) -> int:\n        def dfs(root, t):\n            if root is None:\n                return 0\n            t = (t << 1) | root.val\n            if root.left is None and root.right is None:\n                return t\n            return dfs(root.left, t) + dfs(root.right, t)\n\n        return dfs(root, 0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def sumRootToLeaf(self, root):\n        def dfs(root, t):\n            if root is None:\n                return 0\n            t = (t << 1) | root.val\n            if root.left is None and root.right is None:\n                return t\n            return dfs(root.left, t) + dfs(root.right, t)\n\n        return dfs(root, 0)\n\ndef generate_test_case():\n    # Generate random binary tree\n    nodes = random.sample(range(1, 101), random.randint(1, 10))\n    root = None\n    for val in nodes:\n        if root is None:\n            root = TreeNode(val)\n        else:\n            insert(root, val)\n\n    # Calculate the expected result using the provided Solution class\n    solution = Solution()\n    expected_result = solution.sumRootToLeaf(root)\n\n    return root, expected_result\n\ndef insert(root, val):\n    node = TreeNode(val)\n    if root is None:\n        root = node\n    else:\n        if val < root.val:\n            if root.left is None:\n                root.left = node\n            else:\n                insert(root.left, val)\n        else:\n            if root.right is None:\n                root.right = node \n            else:\n                insert(root.right, val)\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sumRootToLeaf(root) == expected_result\n        print(f\"assert solution.sumRootToLeaf({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.sumRootToLeaf({root}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 86\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 95\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 1641\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 570\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 17\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a3d0>) == 1611\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1453\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 766\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a3d0>) == 1530\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 2026\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 1402\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 58\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 4846\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 351\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 59\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 3826\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 572\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 7373\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 239\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 125\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1785\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 250\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 93\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 3987\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 616\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 63\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 8\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 850\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 2618\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1081\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 781\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 92\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1832\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 2172\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 2300\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 122\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 379\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 30\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 175\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 9923\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 642\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 51\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 2203\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 58\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 245\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 5164\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 753\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 2324\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 10233\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 3067\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 76\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 2486\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 185\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1138\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 873\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 1474\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 123\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 774\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 249\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 311\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 765\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 252\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1657\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 1003\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 1722\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1203\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 19180\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 561\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 446\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 1625\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 619\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1326\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 1956\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 124\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 501\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 248\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 5372\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 380\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 1262\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 90\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 26\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 1400\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 847\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1784\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 1020\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 941\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 245\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 315\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 2011\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 532\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 4091\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 142\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 991\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 405\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 88\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 1890\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 58\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fa1a7d0>) == 600\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704fb72550>) == 381\nassert solution.sumRootToLeaf(<__main__.TreeNode object at 0x7f704f9e3290>) == 1533",
  "inefficient_solution": "class Solution:\n    def sumRootToLeaf(self, root: TreeNode) -> int:\n        if root is None:\n            return 0\n        self.ans = 0\n        self.dfs(root, 0)\n        return self.ans\n\n    def dfs(self, root, t):\n        if root is None:\n            return\n        t = (t << 1) | root.val\n        if root.left is None and root.right is None:\n            self.ans += t\n        else:\n            self.dfs(root.left, t)\n            self.dfs(root.right, t)",
  "is_python": true
}