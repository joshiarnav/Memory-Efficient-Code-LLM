{
  "problem_idx": 1343,
  "task_name": "Number of Sub",
  "markdown_description": "\nGiven an array of integers `arr` and two integers `k` and `threshold`, return *the number of sub-arrays of size* `k` *and average greater than or equal to* `threshold`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n**Output:** 3\n**Explanation:** Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n**Output:** 6\n**Explanation:** The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 105`\n* `1 <= arr[i] <= 104`\n* `1 <= k <= arr.length`\n* `0 <= threshold <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        s = sum(arr[:k])\n        ans = int(s / k >= threshold)\n        for i in range(k, len(arr)):\n            s += arr[i]\n            s -= arr[i - k]\n            ans += int(s / k >= threshold)\n        return ans\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(1, 10001), random.randint(1, 10))\n\n    # Generate random k and threshold\n    k = random.randint(1, len(arr))\n    threshold = random.randint(0, 10001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numOfSubarrays(arr, k, threshold)\n\n    return arr, k, threshold, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, k, threshold, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numOfSubarrays(arr, k, threshold) == expected_result\n        print(f\"assert solution.numOfSubarrays({arr}, {k}, {threshold}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numOfSubarrays({arr}, {k}, {threshold}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.numOfSubarrays([9027, 4818], 1, 1537) == 2\nassert solution.numOfSubarrays([5132], 1, 6152) == 0\nassert solution.numOfSubarrays([8634], 1, 3551) == 1\nassert solution.numOfSubarrays([3923, 5369, 9471, 8685, 5426, 8496], 2, 9028) == 1\nassert solution.numOfSubarrays([2073, 2423], 1, 8693) == 0\nassert solution.numOfSubarrays([9312, 2080, 5911, 2841, 5354, 2535, 1304, 3616], 3, 3711) == 2\nassert solution.numOfSubarrays([5281], 1, 6131) == 0\nassert solution.numOfSubarrays([1726, 7665, 2035, 7517, 2358, 1397, 5582, 9742], 3, 6748) == 0\nassert solution.numOfSubarrays([2653, 4070, 4008], 2, 5484) == 0\nassert solution.numOfSubarrays([2652], 1, 1180) == 1\nassert solution.numOfSubarrays([848, 229, 1964, 7119, 9144, 3248], 3, 8194) == 0\nassert solution.numOfSubarrays([555, 337, 7296, 6585, 5390, 4197, 7062, 4732], 3, 5902) == 1\nassert solution.numOfSubarrays([4060, 8651, 4011, 68, 4464, 2816, 9908, 7176], 1, 5442) == 3\nassert solution.numOfSubarrays([8383, 5454, 2243], 3, 2607) == 1\nassert solution.numOfSubarrays([1942, 3713, 1100, 4212, 5895], 1, 4645) == 1\nassert solution.numOfSubarrays([7722, 3112, 9753, 9622, 5481, 2218, 694, 7137, 75], 2, 6433) == 2\nassert solution.numOfSubarrays([1833, 6975], 1, 6290) == 1\nassert solution.numOfSubarrays([1063, 6157, 7774, 505, 1961, 3947, 7823, 1518, 9443], 5, 8974) == 0\nassert solution.numOfSubarrays([7665, 735], 1, 4851) == 1\nassert solution.numOfSubarrays([21, 8867], 2, 8629) == 0\nassert solution.numOfSubarrays([6389, 4811, 758, 8567, 577, 6632, 3929], 4, 8074) == 0\nassert solution.numOfSubarrays([7086, 8408, 2692, 2514], 4, 1905) == 1\nassert solution.numOfSubarrays([9095, 3765, 4492, 7859, 734], 2, 4959) == 2\nassert solution.numOfSubarrays([1977, 1626, 2847, 9460, 2974, 8134, 729, 5645, 8540, 8601], 1, 793) == 9\nassert solution.numOfSubarrays([2771, 9373, 3354, 3197, 480, 3016, 6224, 1939, 7362, 6358], 3, 8560) == 0\nassert solution.numOfSubarrays([899, 2775, 2062], 3, 7121) == 0\nassert solution.numOfSubarrays([1584, 2987, 4936, 4522, 537, 9303], 3, 5875) == 0\nassert solution.numOfSubarrays([3218, 281, 6050, 9769], 3, 9303) == 0\nassert solution.numOfSubarrays([6871, 6175, 4147, 9156, 2449, 7456, 4552, 4199, 7318], 4, 4847) == 5\nassert solution.numOfSubarrays([5974], 1, 1177) == 1\nassert solution.numOfSubarrays([7647, 4446], 1, 7960) == 0\nassert solution.numOfSubarrays([8218, 8434, 3705, 1646, 8986, 1365, 6078, 6433, 3647, 3812], 5, 7445) == 0\nassert solution.numOfSubarrays([7466, 2305, 1848, 5296, 5848, 4724], 4, 4520) == 0\nassert solution.numOfSubarrays([227, 1466, 1997, 5395, 9724, 6921, 92, 4357, 6917], 6, 7252) == 0\nassert solution.numOfSubarrays([4040, 3170, 6299, 3882, 8486, 7822, 2052, 8861, 9515, 8703], 1, 564) == 10\nassert solution.numOfSubarrays([3660, 128, 2430, 4576, 4513, 3416, 4002, 2280, 24], 3, 5780) == 0\nassert solution.numOfSubarrays([5526, 4149, 6245, 3549, 8199, 7112, 6667, 3054, 5603], 7, 1466) == 3\nassert solution.numOfSubarrays([9634], 1, 3389) == 1\nassert solution.numOfSubarrays([2822, 1316, 7337], 2, 4424) == 0\nassert solution.numOfSubarrays([7355, 1159, 9053, 8740, 7220, 5896], 1, 9023) == 1\nassert solution.numOfSubarrays([167, 5629], 2, 6861) == 0\nassert solution.numOfSubarrays([3543, 248], 1, 1439) == 1\nassert solution.numOfSubarrays([3979, 2767], 1, 7118) == 0\nassert solution.numOfSubarrays([9027], 1, 9230) == 0\nassert solution.numOfSubarrays([3876, 6369, 997, 2090, 919, 7475, 3613, 2840], 2, 2044) == 5\nassert solution.numOfSubarrays([1359, 7777, 8652, 5531, 8964, 7366, 1431, 6985, 2606], 1, 736) == 9\nassert solution.numOfSubarrays([7356], 1, 5707) == 1\nassert solution.numOfSubarrays([5719, 1438, 4108, 5867, 9440], 4, 6665) == 0\nassert solution.numOfSubarrays([5524, 6114, 6655, 5251, 6194, 9923, 810, 6390, 9759, 7646], 6, 4624) == 5\nassert solution.numOfSubarrays([9930, 1111, 1590, 4656, 1271, 4059, 4735, 9535, 2653, 3930], 2, 5535) == 2\nassert solution.numOfSubarrays([338, 5985], 1, 8358) == 0\nassert solution.numOfSubarrays([2184, 5977, 9980, 7368, 3128, 1261, 5067, 2479], 6, 7120) == 0\nassert solution.numOfSubarrays([3146, 7249, 8199, 6445, 163, 4604, 3770, 6418, 7588], 5, 6567) == 0\nassert solution.numOfSubarrays([1176, 6261, 8976, 9820, 2373, 6807], 6, 4926) == 1\nassert solution.numOfSubarrays([1996, 7959], 1, 8989) == 0\nassert solution.numOfSubarrays([7196], 1, 6985) == 1\nassert solution.numOfSubarrays([8400, 4131], 1, 70) == 2\nassert solution.numOfSubarrays([9224], 1, 6575) == 1\nassert solution.numOfSubarrays([3107, 97, 4305, 9991, 3025, 7180, 2023, 6763, 8891], 8, 2149) == 2\nassert solution.numOfSubarrays([5468, 6003, 8774], 1, 7701) == 1\nassert solution.numOfSubarrays([8752, 4644, 1979, 3463, 8144, 7352, 1250], 1, 6644) == 3\nassert solution.numOfSubarrays([5554, 7929, 6498, 7132, 4838], 4, 1480) == 2\nassert solution.numOfSubarrays([457, 5058, 1669, 7214, 3707, 8203, 9444, 802, 766], 7, 9687) == 0\nassert solution.numOfSubarrays([5242, 7424, 3043, 4057], 3, 4678) == 2\nassert solution.numOfSubarrays([6516, 8829], 2, 1692) == 1\nassert solution.numOfSubarrays([334], 1, 7260) == 0\nassert solution.numOfSubarrays([1207, 3590, 8471, 7729, 2944], 1, 3216) == 3\nassert solution.numOfSubarrays([8550, 1998, 2424], 2, 3201) == 1\nassert solution.numOfSubarrays([3343, 9123], 1, 5501) == 1\nassert solution.numOfSubarrays([6077, 4414, 8834], 2, 8948) == 0\nassert solution.numOfSubarrays([5816, 170, 3995, 1676, 435, 3421, 875], 1, 8829) == 0\nassert solution.numOfSubarrays([9849, 4615, 4887, 7219, 7143, 4511, 146], 6, 3360) == 2\nassert solution.numOfSubarrays([9007, 8889, 4809, 7088, 5236, 4206, 3868], 2, 5208) == 4\nassert solution.numOfSubarrays([611, 9968, 4594, 7224, 4357, 4729, 1865, 3908], 1, 2017) == 6\nassert solution.numOfSubarrays([2492, 6925, 5642, 192, 960, 1940, 2973, 4690, 1659, 3360], 10, 2962) == 1\nassert solution.numOfSubarrays([7320, 8153, 3587], 1, 6628) == 2\nassert solution.numOfSubarrays([4941, 6467, 5518, 263, 2049, 6146, 392, 2591, 8517], 3, 198) == 7\nassert solution.numOfSubarrays([3491], 1, 5655) == 0\nassert solution.numOfSubarrays([5300, 3359], 2, 2653) == 1\nassert solution.numOfSubarrays([4379, 7515, 940, 1436, 9686, 8521, 4186], 3, 5764) == 2\nassert solution.numOfSubarrays([3902], 1, 4737) == 0\nassert solution.numOfSubarrays([1440, 985, 831, 5554, 5993, 1871, 2416, 2230, 3496, 7225], 7, 5710) == 0\nassert solution.numOfSubarrays([6288, 110, 4395, 9798, 8703, 2134, 5263], 7, 7168) == 0\nassert solution.numOfSubarrays([82, 9095, 8145, 9263, 299, 205, 4739, 1229], 8, 7911) == 0\nassert solution.numOfSubarrays([9208, 7019, 477, 6842, 7258, 5388, 4635, 8200, 1549], 4, 4785) == 6\nassert solution.numOfSubarrays([5368, 8087, 7951, 5186, 890, 8111], 3, 2411) == 4\nassert solution.numOfSubarrays([4195, 9222], 2, 3098) == 1\nassert solution.numOfSubarrays([1281, 5717, 9905, 8116, 9104, 862, 6492, 3130, 940], 8, 8026) == 0\nassert solution.numOfSubarrays([3692, 9033, 4252, 8476, 9365, 3922, 2025, 9825, 4555], 1, 7386) == 4\nassert solution.numOfSubarrays([709, 9694, 3391, 645, 950], 3, 6950) == 0\nassert solution.numOfSubarrays([1353, 3265, 6752, 4565, 7202, 5710], 5, 332) == 2\nassert solution.numOfSubarrays([5243, 148, 4187, 4360, 8824, 1443, 290], 3, 6581) == 0\nassert solution.numOfSubarrays([4474, 9117, 414, 5531, 4298], 3, 207) == 3\nassert solution.numOfSubarrays([513, 1536, 1397, 9509, 8137, 7919, 3119], 6, 9314) == 0\nassert solution.numOfSubarrays([3351, 4227], 2, 7863) == 0\nassert solution.numOfSubarrays([3470, 8093], 1, 9600) == 0\nassert solution.numOfSubarrays([517, 7954, 1156, 8025, 3797, 4788, 1742], 2, 2601) == 6\nassert solution.numOfSubarrays([9316, 9966, 889, 697, 2834, 5594, 8187, 9292], 6, 4761) == 1\nassert solution.numOfSubarrays([5870, 7621, 7905], 2, 6677) == 2\nassert solution.numOfSubarrays([5900], 1, 6193) == 0",
  "inefficient_solution": "class Solution:\n    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:\n        subarray_sums = {}\n        for i in range(len(arr) - k + 1):\n            window_sum = sum(arr[i:i+k])\n            subarray_sums[window_sum] = subarray_sums.get(window_sum, 0) + 1\n        total_count = 0\n        for window_sum in subarray_sums:\n            if window_sum / k >= threshold:\n                total_count += subarray_sums[window_sum]\n        return total_count",
  "is_python": true
}