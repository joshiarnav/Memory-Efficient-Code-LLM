{
  "problem_idx": 345,
  "task_name": "Reverse Vowels of a String",
  "markdown_description": "\nGiven a string `s`, reverse only all the vowels in the string and return it.\n\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both lower and upper cases, more than once.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"hello\"\n**Output:** \"holle\"\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"leetcode\"\n**Output:** \"leotcede\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 3 * 105`\n* `s` consist of **printable ASCII** characters.\n\n\n",
  "canonical_solution": "class Solution:\n    def reverseVowels(self, s: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        i, j = 0, len(s) - 1\n        cs = list(s)\n        while i < j:\n            while i < j and cs[i] not in vowels:\n                i += 1\n            while i < j and cs[j] not in vowels:\n                j -= 1\n            if i < j:\n                cs[i], cs[j] = cs[j], cs[i]\n                i, j = i + 1, j - 1\n        return \"\".join(cs)\n",
  "test_case_generator": "\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reverseVowels(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reverseVowels(s) == expected_result\n        print(f'assert solution.reverseVowels(\"{s}\") == \"{expected_result}\"')\n        test_case_generator_results.append(f'assert solution.reverseVowels(\"{s}\") == \"{expected_result}\"') # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    import random\n    import string\n    \n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.reverseVowels(\"RvbTNUV\") == \"RvbTNUV\"\nassert solution.reverseVowels(\"2p3Frc26\") == \"2p3Frc26\"\nassert solution.reverseVowels(\"ITz0evnP\") == \"eTz0IvnP\"\nassert solution.reverseVowels(\"4DI3IkulXN\") == \"4Du3IkIlXN\"\nassert solution.reverseVowels(\"noOHLF\") == \"nOoHLF\"\nassert solution.reverseVowels(\"cE9iCeG\") == \"ce9iCEG\"\nassert solution.reverseVowels(\"tncHuwS\") == \"tncHuwS\"\nassert solution.reverseVowels(\"fFMwgIL2k\") == \"fFMwgIL2k\"\nassert solution.reverseVowels(\"jyeGZnKj\") == \"jyeGZnKj\"\nassert solution.reverseVowels(\"S\") == \"S\"\nassert solution.reverseVowels(\"uyFSFgUq\") == \"UyFSFguq\"\nassert solution.reverseVowels(\"Czg\") == \"Czg\"\nassert solution.reverseVowels(\"DsKN\") == \"DsKN\"\nassert solution.reverseVowels(\"hpP\") == \"hpP\"\nassert solution.reverseVowels(\"EWt\") == \"EWt\"\nassert solution.reverseVowels(\"zORV5D\") == \"zORV5D\"\nassert solution.reverseVowels(\"TEAYcd\") == \"TAEYcd\"\nassert solution.reverseVowels(\"QJp\") == \"QJp\"\nassert solution.reverseVowels(\"5jDYawId\") == \"5jDYIwad\"\nassert solution.reverseVowels(\"OlO3Pvzx\") == \"OlO3Pvzx\"\nassert solution.reverseVowels(\"ys6Xopps\") == \"ys6Xopps\"\nassert solution.reverseVowels(\"ZQn6I\") == \"ZQn6I\"\nassert solution.reverseVowels(\"pHc\") == \"pHc\"\nassert solution.reverseVowels(\"44Sivz\") == \"44Sivz\"\nassert solution.reverseVowels(\"XozlHN\") == \"XozlHN\"\nassert solution.reverseVowels(\"R5\") == \"R5\"\nassert solution.reverseVowels(\"Db\") == \"Db\"\nassert solution.reverseVowels(\"t4\") == \"t4\"\nassert solution.reverseVowels(\"tH01CWkc\") == \"tH01CWkc\"\nassert solution.reverseVowels(\"QBwS8\") == \"QBwS8\"\nassert solution.reverseVowels(\"3DIlL6T\") == \"3DIlL6T\"\nassert solution.reverseVowels(\"nxsa2dg8Ox\") == \"nxsO2dg8ax\"\nassert solution.reverseVowels(\"IacRC\") == \"aIcRC\"\nassert solution.reverseVowels(\"7tJNYOPGD\") == \"7tJNYOPGD\"\nassert solution.reverseVowels(\"TR9YCXP\") == \"TR9YCXP\"\nassert solution.reverseVowels(\"65AS\") == \"65AS\"\nassert solution.reverseVowels(\"X2D0p\") == \"X2D0p\"\nassert solution.reverseVowels(\"CQov6FH\") == \"CQov6FH\"\nassert solution.reverseVowels(\"1n6NgkHJ\") == \"1n6NgkHJ\"\nassert solution.reverseVowels(\"lOdiBRjfc\") == \"lidOBRjfc\"\nassert solution.reverseVowels(\"Zerpne4\") == \"Zerpne4\"\nassert solution.reverseVowels(\"R5\") == \"R5\"\nassert solution.reverseVowels(\"cAPaxtU\") == \"cUPaxtA\"\nassert solution.reverseVowels(\"hjMiT\") == \"hjMiT\"\nassert solution.reverseVowels(\"PDx79iOc\") == \"PDx79Oic\"\nassert solution.reverseVowels(\"e\") == \"e\"\nassert solution.reverseVowels(\"xUzECH\") == \"xEzUCH\"\nassert solution.reverseVowels(\"PVNE\") == \"PVNE\"\nassert solution.reverseVowels(\"i\") == \"i\"\nassert solution.reverseVowels(\"qq9cnQjr\") == \"qq9cnQjr\"\nassert solution.reverseVowels(\"QWu1\") == \"QWu1\"\nassert solution.reverseVowels(\"vC1oG3Z9\") == \"vC1oG3Z9\"\nassert solution.reverseVowels(\"ccIww\") == \"ccIww\"\nassert solution.reverseVowels(\"SSC3QY\") == \"SSC3QY\"\nassert solution.reverseVowels(\"ObGhRiCeVX\") == \"ebGhRiCOVX\"\nassert solution.reverseVowels(\"MCewr\") == \"MCewr\"\nassert solution.reverseVowels(\"X9nK\") == \"X9nK\"\nassert solution.reverseVowels(\"rSJ\") == \"rSJ\"\nassert solution.reverseVowels(\"D5TpmpbcA\") == \"D5TpmpbcA\"\nassert solution.reverseVowels(\"d6tkvi\") == \"d6tkvi\"\nassert solution.reverseVowels(\"wbIUUj\") == \"wbUUIj\"\nassert solution.reverseVowels(\"R\") == \"R\"\nassert solution.reverseVowels(\"5b8zLAIp5g\") == \"5b8zLIAp5g\"\nassert solution.reverseVowels(\"wmEV3IMx\") == \"wmIV3EMx\"\nassert solution.reverseVowels(\"D2\") == \"D2\"\nassert solution.reverseVowels(\"UFXwdVl\") == \"UFXwdVl\"\nassert solution.reverseVowels(\"F725igGLlt\") == \"F725igGLlt\"\nassert solution.reverseVowels(\"RW\") == \"RW\"\nassert solution.reverseVowels(\"i4X\") == \"i4X\"\nassert solution.reverseVowels(\"8yOTh\") == \"8yOTh\"\nassert solution.reverseVowels(\"y9hGhPPt\") == \"y9hGhPPt\"\nassert solution.reverseVowels(\"yP\") == \"yP\"\nassert solution.reverseVowels(\"6RbmTmN\") == \"6RbmTmN\"\nassert solution.reverseVowels(\"RoXp1Cx\") == \"RoXp1Cx\"\nassert solution.reverseVowels(\"8yquns9I\") == \"8yqIns9u\"\nassert solution.reverseVowels(\"sooRri\") == \"sioRro\"\nassert solution.reverseVowels(\"D5c0K6DpN\") == \"D5c0K6DpN\"\nassert solution.reverseVowels(\"w\") == \"w\"\nassert solution.reverseVowels(\"2jw37rtp\") == \"2jw37rtp\"\nassert solution.reverseVowels(\"cx7WH8FZ\") == \"cx7WH8FZ\"\nassert solution.reverseVowels(\"w7KPh04f\") == \"w7KPh04f\"\nassert solution.reverseVowels(\"gB\") == \"gB\"\nassert solution.reverseVowels(\"1Ddi\") == \"1Ddi\"\nassert solution.reverseVowels(\"nDAaqeUra\") == \"nDaUqearA\"\nassert solution.reverseVowels(\"0nOJz024\") == \"0nOJz024\"\nassert solution.reverseVowels(\"Oz0G7VfbiG\") == \"iz0G7VfbOG\"\nassert solution.reverseVowels(\"hNHhXVY\") == \"hNHhXVY\"\nassert solution.reverseVowels(\"t6lts90v\") == \"t6lts90v\"\nassert solution.reverseVowels(\"d4i\") == \"d4i\"\nassert solution.reverseVowels(\"E4\") == \"E4\"\nassert solution.reverseVowels(\"263Iz9vHbK\") == \"263Iz9vHbK\"\nassert solution.reverseVowels(\"qImpYlZo\") == \"qompYlZI\"\nassert solution.reverseVowels(\"r\") == \"r\"\nassert solution.reverseVowels(\"YgG\") == \"YgG\"\nassert solution.reverseVowels(\"iJqNQs\") == \"iJqNQs\"\nassert solution.reverseVowels(\"ahvmYZM\") == \"ahvmYZM\"\nassert solution.reverseVowels(\"9dbeek2b\") == \"9dbeek2b\"\nassert solution.reverseVowels(\"eG\") == \"eG\"\nassert solution.reverseVowels(\"PrPIiVB\") == \"PrPiIVB\"\nassert solution.reverseVowels(\"4a\") == \"4a\"",
  "inefficient_solution": "class Solution:\n    def reverseVowels(self, s: str) -> str:\n        vowels = \"aeiouAEIOU\"\n        i, j = 0, len(s) - 1\n        s_list = list(s)\n        while i < j:\n            temp_i = i\n            while temp_i < j and s_list[temp_i] not in vowels:\n                temp_i += 1\n            temp_j = j\n            while temp_j > i and s_list[temp_j] not in vowels:\n                temp_j -= 1\n            if temp_i < temp_j:\n                s_list[i], s_list[temp_j] = s_list[temp_j], s_list[i]\n            i, j = i + 1, j - 1\n        return \"\".join(s_list)\n\n        s_inverted = s[::-1]\n        vowels_inverted = \"\"\n        for char in s_inverted:\n            if char in vowels:\n                vowels_inverted += char\n        vowels_inverted_list = list(vowels_inverted)\n        result = list(s)\n        i, j = 0, 0\n        while i < len(s) and j < len(vowels_inverted_list):\n            if s[i] not in vowels:\n                i += 1\n            elif vowels_inverted_list[j] not in vowels:\n                j += 1\n            else:\n                result[i] = vowels_inverted_list[j]\n                i += 1\n                j += 1\n        return \"\".join(result)\n\n        vowels_set = set(vowels)\n        vowels_list = list(vowels)\n        vowels_dict = {}\n        for i, vowel in enumerate(vowels_list):\n            vowels_dict[vowel] = (i, i)\n\n        s_set = set(s)\n        vowels_in_s = s_set.intersection(vowels_set)\n        vowels_in_s_list = list(vowels_in_s)\n        vowels_in_s_dict = {}\n        for i, vowel in enumerate(vowels_in_s_list):\n            vowels_in_s_dict[vowel] = i\n\n        vowels_reversed_dict = {}\n        for i, vowel in enumerate(vowels_list):\n            vowels_reversed_dict[vowel] = vowels_list[len(vowels_list) - i - 1]\n\n        vowels_reversed_set = set()\n        for vowel in vowels_reversed_dict:\n            vowels_reversed_set.add(vowels_reversed_dict[vowel])\n\n        result = \"\"\n        for char in s:\n            if char in vowels_set:\n                result += vowels_reversed_dict[char]\n            else:\n                result += char\n\n        return result",
  "is_python": true
}