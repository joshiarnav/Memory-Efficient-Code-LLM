{
  "problem_idx": 1040,
  "task_name": "Moving Stones Until Consecutive II",
  "markdown_description": "\nThere are some stones in different positions on the X-axis. You are given an integer array `stones`, the positions of the stones.\n\n\nCall a stone an **endpoint stone** if it has the smallest or largest position. In one move, you pick up an **endpoint stone** and move it to an unoccupied position so that it is no longer an **endpoint stone**.\n\n\n* In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position `5`, since moving it to any position (such as `0`, or `3`) will still keep that stone as an endpoint stone.\n\n\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\n\n\nReturn *an integer array* `answer` *of length* `2` *where*:\n\n\n* `answer[0]` *is the minimum number of moves you can play, and*\n* `answer[1]` *is the maximum number of moves you can play*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** stones = [7,4,9]\n**Output:** [1,2]\n**Explanation:** We can move 4 -> 8 for one move to finish the game.\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** stones = [6,5,4,3,10]\n**Output:** [2,3]\n**Explanation:** We can move 3 -> 8 then 10 -> 7 to finish the game.\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= stones.length <= 104`\n* `1 <= stones[i] <= 109`\n* All the values of `stones` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def numMovesStonesII(self, stones: List[int]) -> List[int]:\n        stones.sort()\n        mi = n = len(stones)\n        mx = max(stones[-1] - stones[1] + 1, stones[-2] - stones[0] + 1) - (n - 1)\n        i = 0\n        for j, x in enumerate(stones):\n            while x - stones[i] + 1 > n:\n                i += 1\n            if j - i + 1 == n - 1 and x - stones[i] == n - 2:\n                mi = min(mi, 2)\n            else:\n                mi = min(mi, n - (j - i + 1))\n        return [mi, mx]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def numMovesStonesII(self, stones: List[int]) -> List[int]:\n        stones.sort()\n        mi = n = len(stones)\n        mx = max(stones[-1] - stones[1] + 1, stones[-2] - stones[0] + 1) - (n - 1)\n        i = 0\n        for j, x in enumerate(stones):\n            while x - stones[i] + 1 > n:\n                i += 1\n            if j - i + 1 == n - 1 and x - stones[i] == n - 2:\n                mi = min(mi, 2)\n            else:\n                mi = min(mi, n - (j - i + 1))\n        return [mi, mx]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random stone positions\n    stones = sorted(random.sample(range(1, 101), random.randint(3, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numMovesStonesII(stones)\n\n    return stones, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        stones, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numMovesStonesII(stones) == expected_result\n        print(f\"assert solution.numMovesStonesII({stones}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numMovesStonesII({stones}) == {expected_result}\") # Save the test case in the desired format\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # Generate 100 test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numMovesStonesII([9, 13, 34, 55, 61, 69, 84, 85]) == [6, 69]\nassert solution.numMovesStonesII([20, 41, 58, 67, 69, 85, 86]) == [5, 60]\nassert solution.numMovesStonesII([6, 10, 41, 46, 55, 64, 65, 96]) == [6, 80]\nassert solution.numMovesStonesII([3, 39, 48, 96, 97]) == [3, 90]\nassert solution.numMovesStonesII([8, 14, 97]) == [2, 82]\nassert solution.numMovesStonesII([12, 37, 40, 44, 53, 63, 79, 92]) == [5, 61]\nassert solution.numMovesStonesII([19, 24, 32, 37, 46, 66, 85, 86, 89, 98]) == [7, 66]\nassert solution.numMovesStonesII([14, 16, 60, 74]) == [2, 56]\nassert solution.numMovesStonesII([1, 4, 6, 33, 39, 45, 56, 94, 96, 99]) == [7, 87]\nassert solution.numMovesStonesII([24, 84, 99]) == [2, 59]\nassert solution.numMovesStonesII([26, 43, 54, 63, 87]) == [4, 41]\nassert solution.numMovesStonesII([52, 94, 98, 100]) == [2, 44]\nassert solution.numMovesStonesII([11, 13, 53, 76]) == [2, 61]\nassert solution.numMovesStonesII([10, 14, 19, 21, 43, 52, 57, 59, 84, 86]) == [7, 66]\nassert solution.numMovesStonesII([30, 43, 64]) == [2, 20]\nassert solution.numMovesStonesII([15, 27, 33, 42, 68, 84]) == [5, 53]\nassert solution.numMovesStonesII([12, 38, 39, 40, 62, 74, 77, 86, 93]) == [6, 67]\nassert solution.numMovesStonesII([15, 47, 48, 69, 74, 87, 92]) == [5, 67]\nassert solution.numMovesStonesII([7, 26, 38, 45, 59]) == [4, 35]\nassert solution.numMovesStonesII([5, 21, 33, 47, 62, 85]) == [5, 60]\nassert solution.numMovesStonesII([4, 24, 37, 52, 59, 69, 90, 92]) == [6, 80]\nassert solution.numMovesStonesII([10, 19, 24, 29, 51, 80, 91, 94, 95]) == [6, 77]\nassert solution.numMovesStonesII([3, 49, 52, 54, 67, 80, 90]) == [4, 72]\nassert solution.numMovesStonesII([1, 3, 43, 53, 54, 67, 88]) == [5, 80]\nassert solution.numMovesStonesII([23, 27, 30, 88]) == [2, 59]\nassert solution.numMovesStonesII([22, 28, 29, 37, 38, 42, 45, 51]) == [5, 17]\nassert solution.numMovesStonesII([38, 65, 69]) == [2, 26]\nassert solution.numMovesStonesII([8, 9, 52, 74, 92]) == [3, 80]\nassert solution.numMovesStonesII([14, 18, 41, 71, 76, 77, 95]) == [4, 72]\nassert solution.numMovesStonesII([11, 25, 32, 51, 71, 88, 90]) == [5, 72]\nassert solution.numMovesStonesII([2, 4, 33, 47, 65, 74, 90]) == [5, 81]\nassert solution.numMovesStonesII([57, 60, 76, 77, 84, 95]) == [4, 31]\nassert solution.numMovesStonesII([7, 24, 31, 48, 54, 67, 79, 83]) == [6, 66]\nassert solution.numMovesStonesII([3, 14, 20, 47, 50, 65, 70, 73, 80, 88]) == [7, 69]\nassert solution.numMovesStonesII([19, 21, 52, 66, 68, 91]) == [4, 66]\nassert solution.numMovesStonesII([13, 25, 45, 70, 72, 94]) == [4, 65]\nassert solution.numMovesStonesII([15, 17, 24, 28, 58, 61, 66, 85, 89, 94]) == [7, 69]\nassert solution.numMovesStonesII([2, 5, 12, 20, 39, 42, 63, 84]) == [6, 73]\nassert solution.numMovesStonesII([25, 54, 56, 65, 72, 95]) == [4, 43]\nassert solution.numMovesStonesII([9, 10, 15, 18, 25, 34, 48, 64, 99]) == [6, 82]\nassert solution.numMovesStonesII([31, 48, 68, 72, 75, 86]) == [4, 40]\nassert solution.numMovesStonesII([1, 12, 20, 27, 37, 41, 42]) == [4, 35]\nassert solution.numMovesStonesII([28, 31, 39, 55, 64, 82]) == [4, 47]\nassert solution.numMovesStonesII([14, 32, 69, 79, 91, 97, 100]) == [5, 78]\nassert solution.numMovesStonesII([49, 52, 54, 67, 73, 79, 83, 92]) == [5, 34]\nassert solution.numMovesStonesII([16, 22, 36, 73, 75]) == [3, 54]\nassert solution.numMovesStonesII([3, 11, 20, 32, 34, 35, 45, 51, 54, 68]) == [7, 49]\nassert solution.numMovesStonesII([73, 85, 93]) == [2, 11]\nassert solution.numMovesStonesII([11, 20, 33, 37, 49, 52, 54]) == [4, 36]\nassert solution.numMovesStonesII([17, 36, 38, 50, 59, 73, 81, 100]) == [6, 58]\nassert solution.numMovesStonesII([12, 19, 38, 41, 47, 48, 82, 85, 93, 96]) == [7, 73]\nassert solution.numMovesStonesII([20, 26, 45, 50, 71, 74, 82, 100]) == [6, 68]\nassert solution.numMovesStonesII([8, 12, 21, 43, 48, 66, 67, 78, 86]) == [7, 67]\nassert solution.numMovesStonesII([10, 28, 33, 69, 74, 92]) == [4, 60]\nassert solution.numMovesStonesII([35, 68, 94]) == [2, 32]\nassert solution.numMovesStonesII([2, 75, 92]) == [2, 72]\nassert solution.numMovesStonesII([1, 12, 22, 29, 31, 36, 49, 67, 74, 87]) == [7, 67]\nassert solution.numMovesStonesII([13, 20, 29, 43, 46, 61, 84, 93, 94]) == [7, 73]\nassert solution.numMovesStonesII([1, 21, 24, 30, 41, 55, 82, 88]) == [6, 75]\nassert solution.numMovesStonesII([4, 10, 23, 35, 37, 46, 82, 88]) == [6, 72]\nassert solution.numMovesStonesII([22, 28, 30, 65, 66, 69, 82]) == [4, 49]\nassert solution.numMovesStonesII([5, 6, 27, 29, 32, 72, 82]) == [4, 71]\nassert solution.numMovesStonesII([6, 17, 24, 28, 30, 81, 86, 87, 94]) == [6, 74]\nassert solution.numMovesStonesII([45, 80, 93]) == [2, 34]\nassert solution.numMovesStonesII([17, 19, 20, 23, 51, 74, 96]) == [3, 72]\nassert solution.numMovesStonesII([3, 10, 13, 32, 36, 68, 94, 95, 96]) == [6, 85]\nassert solution.numMovesStonesII([1, 11, 12, 26, 47, 65, 91, 95]) == [6, 84]\nassert solution.numMovesStonesII([17, 92, 98]) == [2, 74]\nassert solution.numMovesStonesII([13, 23, 32, 39, 63, 95]) == [5, 68]\nassert solution.numMovesStonesII([22, 44, 47]) == [2, 21]\nassert solution.numMovesStonesII([8, 32, 55, 85, 87, 93, 97, 98, 99]) == [5, 83]\nassert solution.numMovesStonesII([1, 29, 54]) == [2, 27]\nassert solution.numMovesStonesII([37, 41, 68]) == [2, 26]\nassert solution.numMovesStonesII([6, 26, 35, 39, 42, 44, 47, 59, 68, 73]) == [6, 54]\nassert solution.numMovesStonesII([4, 29, 56, 77, 82, 98]) == [4, 74]\nassert solution.numMovesStonesII([24, 56, 87, 93, 97]) == [3, 66]\nassert solution.numMovesStonesII([6, 24, 40, 61, 65, 71, 84, 86, 91]) == [6, 73]\nassert solution.numMovesStonesII([4, 40, 65, 73, 81]) == [4, 66]\nassert solution.numMovesStonesII([1, 15, 22, 35]) == [3, 19]\nassert solution.numMovesStonesII([14, 17, 26, 97]) == [2, 78]\nassert solution.numMovesStonesII([8, 35, 39, 48, 52, 58, 70, 92, 93]) == [7, 77]\nassert solution.numMovesStonesII([2, 3, 25, 49, 61, 65, 75, 94]) == [6, 85]\nassert solution.numMovesStonesII([15, 28, 33, 43, 57, 69, 72, 78, 94]) == [7, 59]\nassert solution.numMovesStonesII([6, 17, 92, 100]) == [3, 84]\nassert solution.numMovesStonesII([2, 45, 74, 76, 77, 89]) == [3, 71]\nassert solution.numMovesStonesII([50, 63, 66, 73, 85, 94, 98]) == [5, 39]\nassert solution.numMovesStonesII([5, 12, 28, 36, 46, 61, 66, 67, 93, 99]) == [7, 80]\nassert solution.numMovesStonesII([23, 37, 54, 64, 70, 96]) == [5, 55]\nassert solution.numMovesStonesII([13, 20, 31, 38, 39, 45, 47, 49, 78, 92]) == [6, 64]\nassert solution.numMovesStonesII([3, 22, 28, 30, 35, 44, 47, 59, 64, 83]) == [7, 53]\nassert solution.numMovesStonesII([1, 21, 42, 43, 46, 55, 71, 73, 95]) == [6, 67]\nassert solution.numMovesStonesII([2, 25, 28, 32, 61, 89, 94]) == [5, 82]\nassert solution.numMovesStonesII([2, 3, 30, 48, 51, 75, 80, 82, 84, 99]) == [6, 88]\nassert solution.numMovesStonesII([3, 12, 37, 40, 42, 48, 55, 76, 81, 82]) == [7, 70]\nassert solution.numMovesStonesII([14, 17, 42]) == [2, 24]\nassert solution.numMovesStonesII([24, 62, 77]) == [2, 37]\nassert solution.numMovesStonesII([4, 28, 31, 40, 42, 46, 51, 53, 97]) == [6, 62]\nassert solution.numMovesStonesII([2, 41, 42, 76]) == [2, 38]\nassert solution.numMovesStonesII([33, 60, 92, 93, 94]) == [2, 57]\nassert solution.numMovesStonesII([2, 8, 28, 78, 87, 90]) == [4, 81]",
  "inefficient_solution": "class Solution:\n    def numMovesStonesII(self, stones):\n        stones = [0] + stones + [stones[-1] + 1]\n        n = len(stones)\n        stones.sort()\n        dp = [[float('inf')] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i, n):\n                if i == j:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = min(dp[i][j-1] + 1, dp[i-1][j] + 1)\n                if j > i and stones[j] - stones[i] + 1 == j - i:\n                    dp[i][j] = min(dp[i][j], dp[i+1][j-1] + 1)\n        moves = [0] * n\n        for i in range(n):\n            for j in range(i, n):\n                if stones[j] - stones[i] + 1 == j - i + 1:\n                    moves[i] = max(moves[i], j - i + 1)\n        return [min(min(moves[i:j]) for i, j in enumerate(dp) if j[-1] == float('inf')), max(dp[-1])]",
  "is_python": true
}