{
  "problem_idx": 1240,
  "task_name": "Tiling a Rectangle with the Fewest Squares",
  "markdown_description": "\nGiven a rectangle of size `n` x `m`, return *the minimum number of integer-sided squares that tile the rectangle*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1240.Tiling%20a%20Rectangle%20with%20the%20Fewest%20Squares/images/sample_11_1592.png)\n\n\n\n```\n\n**Input:** n = 2, m = 3\n**Output:** 3\n**Explanation:** 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1240.Tiling%20a%20Rectangle%20with%20the%20Fewest%20Squares/images/sample_22_1592.png)\n\n\n\n```\n\n**Input:** n = 5, m = 8\n**Output:** 5\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1240.Tiling%20a%20Rectangle%20with%20the%20Fewest%20Squares/images/sample_33_1592.png)\n\n\n\n```\n\n**Input:** n = 11, m = 13\n**Output:** 6\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, m <= 13`\n\n\n",
  "canonical_solution": "class Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        def dfs(i: int, j: int, t: int):\n            nonlocal ans\n            if j == m:\n                i += 1\n                j = 0\n            if i == n:\n                ans = t\n                return\n            if filled[i] >> j & 1:\n                dfs(i, j + 1, t)\n            elif t + 1 < ans:\n                r = c = 0\n                for k in range(i, n):\n                    if filled[k] >> j & 1:\n                        break\n                    r += 1\n                for k in range(j, m):\n                    if filled[i] >> k & 1:\n                        break\n                    c += 1\n                mx = min(r, c)\n                for x in range(i, i + mx):\n                    for y in range(j, j + mx):\n                        filled[x] |= 1 << y\n                for w in range(mx, 0, -1):\n                    dfs(i, j + w, t + 1)\n                    for k in range(w):\n                        filled[i + w - 1] ^= 1 << (j + k)\n                        if k < w - 1:\n                            filled[i + k] ^= 1 << (j + w - 1)\n\n        ans = n * m\n        filled = [0] * n\n        dfs(0, 0, 0)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        def dfs(i: int, j: int, t: int):\n            nonlocal ans\n            if j == m:\n                i += 1\n                j = 0\n            if i == n:\n                ans = t\n                return\n            if filled[i] >> j & 1:\n                dfs(i, j + 1, t)\n            elif t + 1 < ans:\n                r = c = 0\n                for k in range(i, n):\n                    if filled[k] >> j & 1:\n                        break\n                    r += 1\n                for k in range(j, m):\n                    if filled[i] >> k & 1:\n                        break\n                    c += 1\n                mx = min(r, c)\n                for x in range(i, i + mx):\n                    for y in range(j, j + mx):\n                        filled[x] |= 1 << y\n                for w in range(mx, 0, -1):\n                    dfs(i, j + w, t + 1)\n                    for k in range(w):\n                        filled[i + w - 1] ^= 1 << (j + k)\n                        if k < w - 1:\n                            filled[i + k] ^= 1 << (j + w - 1)\n\n        ans = n * m\n        filled = [0] * n\n        dfs(0, 0, 0)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random dimensions\n    n = random.randint(1, 13)\n    m = random.randint(1, 13)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.tilingRectangle(n, m)\n\n    return n, m, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, m, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.tilingRectangle(n, m) == expected_result\n        print(f\"assert solution.tilingRectangle({n}, {m}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.tilingRectangle({n}, {m}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.tilingRectangle(4, 5) == 5\nassert solution.tilingRectangle(7, 6) == 5\nassert solution.tilingRectangle(4, 7) == 5\nassert solution.tilingRectangle(7, 1) == 7\nassert solution.tilingRectangle(2, 12) == 6\nassert solution.tilingRectangle(7, 8) == 7\nassert solution.tilingRectangle(1, 2) == 2\nassert solution.tilingRectangle(11, 7) == 6\nassert solution.tilingRectangle(7, 1) == 7\nassert solution.tilingRectangle(13, 1) == 13\nassert solution.tilingRectangle(10, 3) == 6\nassert solution.tilingRectangle(8, 7) == 7\nassert solution.tilingRectangle(4, 2) == 2\nassert solution.tilingRectangle(6, 13) == 6\nassert solution.tilingRectangle(10, 5) == 2\nassert solution.tilingRectangle(12, 7) == 6\nassert solution.tilingRectangle(5, 13) == 6\nassert solution.tilingRectangle(9, 13) == 7\nassert solution.tilingRectangle(6, 10) == 4\nassert solution.tilingRectangle(7, 8) == 7\nassert solution.tilingRectangle(9, 13) == 7\nassert solution.tilingRectangle(12, 4) == 3\nassert solution.tilingRectangle(10, 10) == 1\nassert solution.tilingRectangle(12, 11) == 7\nassert solution.tilingRectangle(11, 2) == 7\nassert solution.tilingRectangle(3, 12) == 4\nassert solution.tilingRectangle(9, 8) == 7\nassert solution.tilingRectangle(2, 1) == 2\nassert solution.tilingRectangle(5, 4) == 5\nassert solution.tilingRectangle(5, 9) == 6\nassert solution.tilingRectangle(6, 1) == 6\nassert solution.tilingRectangle(2, 10) == 5\nassert solution.tilingRectangle(12, 5) == 6\nassert solution.tilingRectangle(9, 2) == 6\nassert solution.tilingRectangle(6, 1) == 6\nassert solution.tilingRectangle(12, 12) == 1\nassert solution.tilingRectangle(8, 12) == 3\nassert solution.tilingRectangle(1, 1) == 1\nassert solution.tilingRectangle(10, 8) == 5\nassert solution.tilingRectangle(11, 11) == 1\nassert solution.tilingRectangle(13, 8) == 6\nassert solution.tilingRectangle(10, 3) == 6\nassert solution.tilingRectangle(3, 9) == 3\nassert solution.tilingRectangle(6, 6) == 1\nassert solution.tilingRectangle(6, 5) == 5\nassert solution.tilingRectangle(6, 13) == 6\nassert solution.tilingRectangle(7, 7) == 1\nassert solution.tilingRectangle(12, 9) == 4\nassert solution.tilingRectangle(5, 11) == 6\nassert solution.tilingRectangle(8, 9) == 7\nassert solution.tilingRectangle(1, 1) == 1\nassert solution.tilingRectangle(3, 7) == 5\nassert solution.tilingRectangle(8, 6) == 4\nassert solution.tilingRectangle(13, 9) == 7\nassert solution.tilingRectangle(1, 11) == 11\nassert solution.tilingRectangle(5, 3) == 4\nassert solution.tilingRectangle(11, 8) == 6\nassert solution.tilingRectangle(4, 10) == 4\nassert solution.tilingRectangle(9, 13) == 7\nassert solution.tilingRectangle(4, 8) == 2\nassert solution.tilingRectangle(10, 9) == 6\nassert solution.tilingRectangle(13, 8) == 6\nassert solution.tilingRectangle(13, 7) == 6\nassert solution.tilingRectangle(2, 11) == 7\nassert solution.tilingRectangle(3, 13) == 7\nassert solution.tilingRectangle(12, 8) == 3\nassert solution.tilingRectangle(3, 10) == 6\nassert solution.tilingRectangle(3, 8) == 5\nassert solution.tilingRectangle(2, 13) == 8\nassert solution.tilingRectangle(8, 3) == 5\nassert solution.tilingRectangle(7, 5) == 5\nassert solution.tilingRectangle(1, 2) == 2\nassert solution.tilingRectangle(7, 1) == 7\nassert solution.tilingRectangle(9, 12) == 4\nassert solution.tilingRectangle(11, 7) == 6\nassert solution.tilingRectangle(2, 8) == 4\nassert solution.tilingRectangle(10, 5) == 2\nassert solution.tilingRectangle(12, 8) == 3\nassert solution.tilingRectangle(7, 7) == 1\nassert solution.tilingRectangle(3, 6) == 2\nassert solution.tilingRectangle(1, 5) == 5\nassert solution.tilingRectangle(13, 8) == 6\nassert solution.tilingRectangle(6, 7) == 5\nassert solution.tilingRectangle(4, 7) == 5\nassert solution.tilingRectangle(1, 6) == 6\nassert solution.tilingRectangle(5, 5) == 1\nassert solution.tilingRectangle(8, 1) == 8\nassert solution.tilingRectangle(9, 11) == 7\nassert solution.tilingRectangle(8, 3) == 5\nassert solution.tilingRectangle(1, 2) == 2\nassert solution.tilingRectangle(12, 11) == 7\nassert solution.tilingRectangle(10, 8) == 5\nassert solution.tilingRectangle(9, 3) == 3\nassert solution.tilingRectangle(10, 4) == 4\nassert solution.tilingRectangle(1, 2) == 2\nassert solution.tilingRectangle(6, 4) == 3\nassert solution.tilingRectangle(5, 10) == 2\nassert solution.tilingRectangle(12, 4) == 3\nassert solution.tilingRectangle(8, 2) == 4\nassert solution.tilingRectangle(1, 12) == 12",
  "inefficient_solution": "class Solution:\n    def tilingRectangle(self, n: int, m: int) -> int:\n        def dfs(i: int, j: int, t: int, cache):\n            nonlocal ans\n            if j == m:\n                i += 1\n                j = 0\n            if i == n:\n                ans = t\n                return\n            if cache.get((i, j), None) is not None:\n                return cache[(i, j)]\n            if filled[i] >> j & 1:\n                dfs(i, j + 1, t, cache)\n            elif t + 1 < ans:\n                r = c = 0\n                for k in range(i, n):\n                    if filled[k] >> j & 1:\n                        break\n                    r += 1\n                for k in range(j, m):\n                    if filled[i] >> k & 1:\n                        break\n                    c += 1\n                mx = min(r, c)\n                for x in range(i, i + mx):\n                    for y in range(j, j + mx):\n                        filled[x] |= 1 << y\n                for w in range(mx, 0, -1):\n                    dfs(i, j + w, t + 1, cache)\n                    for k in range(w):\n                        filled[i + w - 1] ^= 1 << (j + k)\n                        if k < w - 1:\n                            filled[i + k] ^= 1 << (j + w - 1)\n                return cache[(i, j)] = t + 1\n\n        ans = n * m\n        filled = [0] * (n * 10)\n        cache = {}\n        dfs(0, 0, 0, cache)\n        return ans",
  "is_python": true
}