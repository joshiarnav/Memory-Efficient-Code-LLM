{
  "problem_idx": 624,
  "task_name": "Maximum Distance in Arrays",
  "markdown_description": "\nYou are given `m` `arrays`, where each array is sorted in **ascending order**.\n\n\nYou can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`.\n\n\nReturn *the maximum distance*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arrays = [[1,2,3],[4,5],[1,2,3]]\n**Output:** 4\n**Explanation:** One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arrays = [[1],[1]]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == arrays.length`\n* `2 <= m <= 105`\n* `1 <= arrays[i].length <= 500`\n* `-104 <= arrays[i][j] <= 104`\n* `arrays[i]` is sorted in **ascending order**.\n* There will be at most `105` integers in all the arrays.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxDistance(self, arrays: List[List[int]]) -> int:\n        ans = 0\n        mi, mx = arrays[0][0], arrays[0][-1]\n        for arr in arrays[1:]:\n            a, b = abs(arr[0] - mx), abs(arr[-1] - mi)\n            ans = max(ans, a, b)\n            mi = min(mi, arr[0])\n            mx = max(mx, arr[-1])\n        return ans\n",
  "test_case_generator": "\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random arrays\n    arrays = []\n    for _ in range(random.randint(2, 10)):\n        size = random.randint(1, 20)\n        array = sorted(random.sample(range(-10000, 10001), size))\n        arrays.append(array)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxDistance(arrays)\n\n    return arrays, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arrays, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxDistance(arrays) == expected_result\n        print(f\"assert solution.maxDistance({arrays}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxDistance({arrays}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxDistance([[-8694, -8607, -8015, -7798, -5641, -3936, -106, 102, 221, 2271, 4738, 6721, 7096, 7858, 8704, 9190, 9350], [-9386, -7138, -7018, -5846, -4463, -3957, 4151, 4363, 5882, 6033, 8397, 9712], [-9570, -5240, -4934, -4788, -3817, -3402, -3327, -3172, -1769, 894, 5236, 6096, 6453, 8089, 8100, 8234], [-8666, -6356, -3423, -1351, -960, -46, 609, 2563], [-7849, -7731, -4494, -2884, -1890, -1498, -844, -54, 1700, 2842, 3693, 4289, 4580, 5649, 5696, 6133, 6699, 7228, 8847]]) == 19282\nassert solution.maxDistance([[-7610, -6588, -4738, 159, 1552, 1755, 2000, 3202, 3479, 5626, 6695, 7463, 7757, 9021], [-8186, -5820, -5476, -4962, -4591, -4514, -1875, -1801, -1704, -1680], [-9415, -8759, -7852, -6619, -4776, -4560, -3464, -3256, -2679, -662, 752, 856, 4617, 6695, 9632, 9865], [-9717, -6516, -6470, -5904, -5462, -2818, -1592, 689, 694, 1432, 3121, 5696, 6523, 9674], [-8118, -7907, -7884, -6051, -5042, -3994, -1604, -1595, -1170, -170, 832, 1337, 2351, 4026, 5051, 5239, 7435, 9786], [-9836, -8609, -7382, -7364, -5082, -4235, -3621, -2715, -1817, -1731, 831, 1783, 3823, 4754, 5218, 9422, 9835], [-8889, -1281, -728, 2727, 6779]]) == 19701\nassert solution.maxDistance([[-5581, -5440, -1583, 4185, 5369, 6600, 7716, 9139], [-7522, -5919, -4080, -4007, -3807, -3545, -2054, -1034, -484, 1961, 3285, 4685, 4883, 5135, 6278, 6927, 6989, 7374, 8473], [-9080, 2649], [-7890, -5642, -4402, -4223, -4098, -3032, -2079, -64, 1756, 4282, 6514, 8211, 8562, 9455, 9831], [-7811, -4764, -2086, -386, 5952], [-9745, -9080, -9006, -1934, 819, 1146, 1595, 2296, 4833, 5748, 6112, 6692, 6846, 8065, 8333, 9090, 9391]]) == 19576\nassert solution.maxDistance([[-9293, -8992, -8890, -7402, -7064, -7041, -3763, -3325, -2330, -1498, 503, 1909, 2132, 4620], [-6945, -3416, -2051, -471, -150, -109, 2521, 7984]]) == 17277\nassert solution.maxDistance([[-8079, -6099, -4505, -4303, -4046, -663, 3266, 3563, 4982, 7007, 7231, 7787], [-6635, -6459, -1857, 5250, 5697, 5964, 6882, 7147, 7872, 8031, 8292], [-9115, -9084, -8892, -7264, -6496, -4865, -4604, -4237, -3902, -3196, -3142, -979, 371, 1896, 2325, 2359, 2943, 6996, 7397], [-9366, -8110, -7088, -6607, -6062, -3108, -1775, -1645, -873, 1530, 3786, 3813, 5835, 8375, 8588, 8647, 9949], [-9398, -6715, -4953, -470, 580, 1077, 1868, 2159, 2464, 3171, 4348, 5817, 5838, 6822, 7284, 8355, 8419], [-8738, 4612]]) == 19347\nassert solution.maxDistance([[-7667, -6637, -4983, -2522, -1639, -1285, 949, 4637, 6654, 7871], [-8304, -6761, -6135, -4826, -2237, 1355, 1642, 3426, 5143, 6278], [-9362, -9073, -7379, -6113, -5606, -4185, -1218, -430, 66, 1217, 2418, 2947, 5480, 6506, 7542, 9605, 9886], [-9298, -5327, -4483, -3492, -2544, -1608, 220, 276, 292, 386, 1089, 1736, 3402, 5526, 6004, 6425, 7746], [-7076, -6174, -2906, -2293, -1725, -1131, 888]]) == 19184\nassert solution.maxDistance([[-4237, -568, 431, 588, 2779, 4202, 8037, 8383], [-2130, 1144, 2557, 4520, 9423], [-9938, -8609, -5824, -4610, -4445, -2567, -1202, -1157, 705, 2054, 4640, 4696, 4877, 5999, 8109, 9043], [-7402, -3028, -263, 771, 1666, 2414, 2844, 5021, 9395], [-1928, 192, 802, 5628, 5826, 6371, 6910, 7770], [-9217, -6126, -2875, -1595, -489, 933, 6482], [-7888, -7780, -7047, -6731, -6414, -3400, 1381, 6045, 7540, 7545, 8112], [-9758, -9170, -7524, -5184, -3985, -3340, -1408, -1186, -1034, 986, 6542], [-9021, -8178, -6636, -6279, -6151, -5133, -3398, -3002, -1914, -1474, -1182, 406, 1591, 3241, 4448, 4810, 4859, 7633, 7891, 9282]]) == 19361\nassert solution.maxDistance([[-9504, -8293, -7128, -5307, -5045, -4922, -4855, -3845, -1681, -1273, -798, -728, 2923, 3497, 3761, 7757, 9046], [-9596, -8214, -7929, -7888, -5999, -1876, -1490, -166, 1902, 2050, 3458, 3535, 3791, 3819, 4091, 5919, 8052], [-8954, -6058, -5590, -4896, -1877, 1762, 7520], [-8984, -6929, -6844, -6375, -5606, -3514, -3395, -3121, -1905, -1535, -444, 427, 2022, 2711], [-8986, -4970, -4777, -4726, -779, -763, 87, 1307, 3149], [-5713, -3935, -3607, 1803, 6714, 9771]]) == 19367\nassert solution.maxDistance([[-8416, -7811, -6947, -5610, -786, 302, 593, 838, 5941, 8197, 8699, 8887], [-9423, -7928, -7864, -3339, -2057], [-9979, -7674, 819, 878, 1167, 3933], [-6880, -4040, -1732, -687, 1023, 4429], [-35, 5867], [-9493, -8927, -2794, -2524, 5171, 6912], [453, 5041], [-9428, -3881, -2098, -1526, -305, 1557]]) == 18866\nassert solution.maxDistance([[-9855, -9249, -3311, 7671], [-7050, -1680, 1208, 2277, 2534, 2846, 6105], [-9888, -9406, -7896, -7798, -7635, -3512, -2978, -2864, -1688, -574, 2041, 3570, 4355, 4547, 4800, 5494, 8558, 9184], [-7317, -6448, -4859, -4410, -3544, -3469, -717, -335, 697, 1597, 1792, 3461, 5311, 6157, 7104, 7377], [-9758, -9753, -8820, -7649, -7178, -5801, -2790, -2347, -2106, -1489, 1814, 4701], [-7370, -2951, -2411, 3109, 6961, 7070, 7951, 9101], [-9841, -9151, -3835, -3567, -1449, -279, -231, 2463, 3204, 9715]]) == 19603\nassert solution.maxDistance([[-47], [-6097, -5869, -5172, -4860, -3341, -3242, -2125, -245, 525, 3926, 4165, 4970, 5224, 6032, 8179, 8566, 8818, 9816], [-9205, -3454, -183, 0, 1125, 2503, 3673, 4431, 5109, 5954, 8492], [-4947, -3265, 751, 1810, 3416, 3487, 9060], [-97], [-9161, -8163, -6478, -6170, -4563, -3788, -2710, -2156, -1109, -837, -198, -9, 343, 2843, 5083, 6000, 6483, 7020, 7262, 8826], [-7270, -6358, -5234, -3511, -3173, 631, 831, 1297, 1572, 3186, 3331, 3609, 5905], [2212, 6874], [-3530, -3145, -3077, -411]]) == 19021\nassert solution.maxDistance([[-8539, -6853, -1512], [-5378, -4560, -3237, -1210, -78, 3210, 3482, 3930, 4450, 4583, 6476, 9159, 9422, 9872], [-3934], [-7797, -7471, -4763, -4493, -3326, -3091, -2096, -1456, 2786, 2833, 4882, 6419, 6456]]) == 18411\nassert solution.maxDistance([[-7889, -7794, -7225, -7092, -5851, 1487, 2835, 6802, 7254, 8441, 8613, 9523, 9981], [-8473, -7157, -7085, -5888, -3260, -3075, -2686, -2330, 126, 3368, 5216, 5930, 6855, 8914, 9039, 9148], [-8738, -6127, -4204, -3667, -892, 1887, 4200, 8431, 9022], [-9992, -7754, -6009, -5733, -4954, -4740, -2735, -1574, -1252, -852, 819, 2260, 3397, 3759, 4677, 5479, 7611, 8681, 9485], [-8039, -7803, -6623, -5515, -4978, -4766, -3441, -3158, -2415, 2017, 2684, 4222, 9873], [-8646, 2171, 2376, 2827, 3650, 4829, 4988, 5562, 6728, 7874, 9543]]) == 19973\nassert solution.maxDistance([[-9954, -7024, -6489, -4666, -3940, -3009, -2196, -1344, 203, 1219, 1252, 2381, 3505, 3876, 7113, 7776, 8558, 9337], [-4596, -4475, -4181, -3464, 2371, 3962, 5313, 7133, 9915], [-8536, 808]]) == 19869\nassert solution.maxDistance([[-9931, -9113, -8856, -7847, -7521, -6051, -3649, -3373, -2292, -1621, -1382, -727, -623, 11, 2284, 4509, 6386, 7164, 9271], [-8772, -7322, -6497, -4736, -4147, -773, 1, 226, 1618, 1846, 2302, 2445, 3858, 4845, 4873, 5497, 7267, 9024], [-8612, -144, 9186], [-9826, -5061, -4925, -4489, -2958, -2705, 203, 224, 666, 1401, 1604, 3581, 3747, 5282, 5908, 6934], [-9619, -8047, -7902, -7274, -6653, -5010, -4450, -3794, -3265, -2563, -2436, -2351, -2168, -1169, 701, 3458, 4542, 8072, 8253, 8532]]) == 19117\nassert solution.maxDistance([[-8836, -4294, -2827, -2786, 8728, 9384], [611, 5890, 8294], [-3886, -823, -664, 8037], [-8824, -8365, -8000, -7603, -6815, -6598, -2714, -2233, -1728, -668, -525, 58, 868, 911, 3820, 5169, 6111, 6115, 8341, 8724], [-8858, -5640, -3741, -3396, -469, 753, 797, 1529, 1768, 2372, 2904, 3405, 5742, 5861], [-9551, -9271, -2540, 2143, 2154, 2273, 2559, 3798, 7170, 7605, 8957], [-6615, -1362, 3147], [-8187, -7738, -7499, -7337, -6508, -4546, -4259, -1741, -1648, 1517, 5094, 6447, 6517, 6674, 7216, 8565, 9048, 9976], [-9995, -7834, -5089, -4959, 900, 2580, 3564, 6402, 8918, 9524]]) == 19971\nassert solution.maxDistance([[-3381], [-7642, -6008, -4159, -2781, -2063, -1032, -109, 1273, 1316, 2833, 3092, 3759, 4741, 5006, 6399, 6606, 7383, 7570]]) == 10951\nassert solution.maxDistance([[6607, 7540, 9333], [-9404, -4032, -3960, -982, 755, 2682], [-5025, -4758, -3636, -2766, -2131, -547, 2079, 4746, 7439], [-2289, 1299, 3884, 6119, 7803], [-5714, -4946, -4370, 8747, 9266, 9805], [-9424, -8446, -7504, -4842, -3464, -3055, -952, -668, 3012, 4851, 6555, 7206, 7348, 7496, 9535]]) == 19229\nassert solution.maxDistance([[-9986, -8827, -6365, -5201, -4970, -4640, -3223, -3168, -3151, 1099, 1688, 3450, 4111, 5701, 6512, 6693, 7424, 7834], [-5881, -3185, -2227, -690, 4381, 4924, 6633, 7378, 8270, 8943], [-9355, -7170, -4965, -4820, -4416, -987, 37, 391, 5067], [-7222, -6970, -6848, -6653, -6573, -5945, -5648, -5575, -5081, -4604, -4028, -3248, 711, 3607, 4181, 6915, 8790, 9249], [-9840, -3141, -2986, 3257, 6205, 8958], [-6688, -5080], [-9536, -7623, -3734, -339, 344, 2374, 3525, 6570, 7679, 7730]]) == 19235\nassert solution.maxDistance([[-9328, -8229, -6839, -4658, -2747, -1386, 1817, 2102, 7546, 8677, 9125, 9486], [-6874], [-9941, -9908, -9440, -9343, -7241, -7045, -7009, -6070, -5273, -4875, -2328, -609, 660, 4567, 5167, 7366, 7556, 8994, 9039]]) == 19427\nassert solution.maxDistance([[-1016, 3014], [-7026, -5899, -4555, -1318, 6539], [-8916, -1686]]) == 15455\nassert solution.maxDistance([[-9666, -8112, -7559, -6349, -3587, -2369, 201, 773, 963, 1886, 2219, 5189, 5278, 6925, 9810], [-7797, -7231, -6779, -6226, -4320, 1545, 4899, 8690, 9453], [7310], [-1968, 6598], [-5930, -5517, -4211, -3179, -450, -263, 3386, 4874, 7337, 7647, 8509, 9193, 9290], [-7104, -6646, -1319, 247, 484, 3293, 3608, 4283, 5441, 5600, 7649, 9841], [-9523, -9506, -9153, -6485, -4403, -3867, -1850, 3667, 6396, 8640, 9424, 9498], [-9832, -3633, -1338, -513, 7778, 9078], [-9610, -7760, -6976, -4618, -1870, 546, 2084, 4171]]) == 19673\nassert solution.maxDistance([[-6681, -6639, -4461, -3567, -1093, 2711, 6561], [-8056, -5990, -5707, 4099, 5325, 9453, 9956], [-4340, -3271, -3027, -2433, -342, 3287, 3315, 3833, 4713, 6292, 7123, 8009], [-6314, -4946, -4292, -3281, 5925], [-9814, -9311, -8196, -7625, -6470, -6062, -4216, -3782, -3759, -2785, -1859, -1441, 2194, 3394, 3794, 4431, 4739, 5936, 8766], [-7704, 2448, 6994], [-8789, -8246, -7364, -6551, -5536, -2131, 267, 6246, 7151, 7432, 7575, 8058, 8172], [-7054, -2452, -1173, 4175, 5505, 6789], [-4191], [-7398, -6760, -4986, -3688, -2818, -1116, -365, 1021, 1482, 1981, 3037, 3124, 5556, 6393]]) == 19770\nassert solution.maxDistance([[-9563, -7355, 5503, 9789], [-9985, -2690, 3786], [-8168, -6431, -5791, -5300, -3729, -2557, -2482, -366, 421, 601, 778, 1351, 1439, 3708, 4880, 7961, 8058], [-9928, -9155, -7940, -3842, -3808, -2685, 159, 2384, 2855, 3292, 5462, 6103, 7704], [-9718, -9388, -8443, -4667, -3673, 337, 3261, 4780, 7314, 9478]]) == 19774\nassert solution.maxDistance([[-6063, -5643, -3205, 2174, 5467], [-5188, 3392, 7613, 7871, 8926], [-8313, -2201, 5873], [-9567, -1672, 1497, 4576]]) == 18493\nassert solution.maxDistance([[-7667, 5620, 7188], [-4633, -3707, -3472, -914], [-9996, -9462, -9435, -8566, -8451, -8145, -7208, -7029, -5346, -4690, -2697, -2688, -314, 1984, 2104, 3321, 3425, 3605, 5212, 8382], [-7156, -3974, -2598, -1107, -910, -652, 143, 1565, 2093, 2899, 4403, 5982], [-8941, -6731, -6420, -4496, -4066, -3969, -3765, -3411, -2095, -1806, -1724, 2978, 4047, 6377, 6662, 8002, 9278, 9425, 9917], [-5], [-4093, -2775, -358, 1340, 1533, 2056, 2169, 2324, 2828, 4799, 5775, 7551, 8027]]) == 19913\nassert solution.maxDistance([[-9010, -7130, -5582, -2189, 7872, 8163, 8451], [-3486], [-9943, -8297, -7592, -6819, -3529, -2244, -1246, 794, 3796, 3897, 4100, 8494, 8986, 9772], [-8661], [-8348, -6909, -5981, -5775, -5560, -4234, -3447, -2613, -2444, -2434, -2237, -2195, -1507, 1208, 2900, 6909, 7088, 9040], [-9926, -9537, -8305, -6772, -2206, 437, 964, 1091, 1502, 3109, 3634, 4408, 5502, 6676, 7059, 7476], [-8508, 9084], [-8175]]) == 19698\nassert solution.maxDistance([[-9909, -7500, -6791, -3739, -1590, 5824, 7136, 7285], [-7247, -6240, -5744, -2807, -1075, 1143, 3026, 3149, 5028, 6407], [-8502, -6381, -5018, -5009, -4432, -3317, -238, 3910, 5279, 5676, 5710, 5881, 6672, 7131, 7158, 7560, 8464, 9534, 9785], [7379, 7857], [-9082, -8907, -8336, -6583, -5913, -151, 109, 2825, 2904, 8361, 8598], [-8781, -7217, -2824, -2036, -1057, 1981, 2462, 2856, 3042, 4486, 6780, 8109, 9153], [-8600, -6787, -6204, -4716, -4377, -788, -57, 1379, 4985, 6249, 6587, 7965]]) == 19694\nassert solution.maxDistance([[-9393, -3747, 4738, 4898], [-9954, -9192, -7093, -5081, 3363, 4552, 4913], [-9941, -5603, -4640, -2516, -2386, -205, 6242, 8254, 8678, 9602], [-3346, 2114, 4987], [-6211, -5317, -2797, -261, 3985], [-5311, -2945, -356, 776], [-1795, -589, 976, 4019], [-8604, -8596, -7642, -3776, -3576, -2769, -1343, -692, 901, 3025, 3465, 4379, 4708, 4964, 6215, 7400, 8468, 8731, 9569]]) == 19556\nassert solution.maxDistance([[-7425, -6897, -5830, -3532, -1725, -781, -335, 3928, 4693, 9306], [-7838, -6837, -6415, -6156, -4670, -4485, -3528, 908, 1249, 1341, 1709, 1985, 2334, 3266, 3911, 4734, 5214, 5428, 6915, 7485]]) == 17144\nassert solution.maxDistance([[-9500, -8546, -8408, -7480, -7033, -5677, 4049, 4176, 6580, 7818, 9722], [-1004, -443, 1446, 1637, 3113, 3614, 4992, 6652, 6710, 9139, 9553], [-9955, -9781, -9066, -9006, -7842, -7459, -6028, -5987, -3032, -1523, 833, 2089, 2511, 5548, 6227, 8223], [-4731, -2421, -1866, 813, 1141, 1429, 5207, 7363, 9305], [-6984, -5587, -4333, 480, 5363], [-8690, -6356, -4052, -2775, -111, 1819, 4453, 5767, 7247, 9447]]) == 19677\nassert solution.maxDistance([[-9765, -7575, -7548, -5487, -4597, -2106, -1428, -124, 377, 880, 1463, 1842, 1930, 3520, 4277, 4743, 8809, 8964, 9477], [-7011, -6264, -1237, -680, 1512, 1978, 9805], [6643, 7400], [-9362, -8609, -7482, -6660, -6241, -5220, -1781, -955, -443, -166, 286, 850, 2460, 2508, 6292, 7139, 8405, 8689], [-8657, -7692, -4355, -2997, -626, 716, 1455, 4071, 5743, 5792, 5859, 7402], [-8038, -6961, -6889, -6247, -5896, -5607, -4671, -3784, -624, 923, 1837, 2204, 3917, 5212, 8739], [-9064, -8720, -6514, -6343, -6143, -5262, -4516, -4021, -1112, -699, 1898, 3426, 3950, 5764, 7356, 7383, 7833, 8449], [-9745, -9658, -8926, -7792, -6753, -6743, -5542, -4535, -4007, -389, 63, 1488, 3915, 4353, 4680, 6511, 6634, 7535, 9476, 9779], [-9363, -2927, 8479]]) == 19570\nassert solution.maxDistance([[-6229, 1976, 7840, 8490], [-8312, -7906, -5264, -4716, -3520, -2437, -1817, -218, 532, 863, 2027, 3840, 6189, 9192], [-8313, -8294, -7610, -3939, -3213, -3112, -815, 645, 1473, 1538, 5537, 5867, 8390, 8676], [-7130, -4062, -1367, 2797, 6307, 9653]]) == 17966\nassert solution.maxDistance([[-9347, -8648, -6863, -3472, -2774, -892, -755, 2295, 5227, 5334, 5490, 6187, 6226, 6237, 6492, 7830], [-8378, -7077, -6203, -5584, -5369, -3173, -2736, -1906, -359, -31, 1138, 1905, 3210, 4648, 5011, 6456], [-9662, -9516, -8388, -7993, -5541, -2372, -909, 380, 909, 1559, 1636, 1958, 2453, 4407, 4605, 7305, 7634, 7818], [9391], [-8251, -6050, -4706, -2772, 1429, 2701, 2903, 3130, 5052, 5441, 5902, 9306]]) == 19053\nassert solution.maxDistance([[-7569, -4846, -4345, -103, 5976], [-9803, -3811, 1494, 1825, 2938], [-2325], [-4705, 8753], [-7168, -6639, -5402, -3981, -454, 2796, 4071, 8085, 8665]]) == 18556\nassert solution.maxDistance([[-8888, -8336, -6981, -6551, -3377, -1030, -649, -406, 611, 929, 1623, 4297, 9579], [-8780, -8263, -8181, -7724, -6665, -5048, -4775, -3755, -1565, -1478, -611, 0, 306, 1616, 1746, 2309, 5069, 5206, 7425, 9038], [-9628, -9481, -9165, -8426, -8308, -8245, -5896, -5383, -1806, 1103, 4153, 5743, 5958, 6037, 6537, 6623, 7116, 7991, 9295], [-8952, -7761, -6333, 1228, 3331, 4055, 6352, 6406, 6536, 8508, 8685, 9334, 9933], [-9081, -8620, -8006, -7616, -7222, -5649, -2577, 2530, 4263, 4553, 8434, 9463], [-8769, 9469, 9595], [-4221, -3076, 233, 753, 1629, 2857, 7000, 8481, 8840], [188, 549, 2112, 8975]]) == 19561\nassert solution.maxDistance([[-8129, -7753, -6315, -4482, -4203, -2804, -1734, 858, 1776, 9966], [-9225, -6432, -6156, -5690, -4615, -2451, -1808, 2697, 3457, 3639, 3848, 7674]]) == 19191\nassert solution.maxDistance([[-7910, 2328, 8073], [-7589, -5179, -5115, -4890, -4411, -2808, -2345, -1794, -1640, -1502, 932, 3817, 6913, 7002, 7247], [-7229, 9348], [-1829, 2352, 3706, 5584, 6974, 8930], [-7792, -7213, -6881, -4687, -4354, -3071, -2505, 580, 3940, 4438, 4598, 5036, 7569, 8779, 9133], [-7858, -5006, -4271, -3121, -718, 2306, 2576, 3080, 8524, 8802], [-8107, -8101, -7794, -5326, -1171, -497, -197, 715, 985, 2608, 4367, 4529, 4788, 5917, 6066, 8327, 8706], [-8535, -7936, -2419, 155, 1638, 2078, 2602, 3187, 3200, 3232, 4737, 5032, 5815, 6681, 6784, 8149, 8853, 9458, 9643]]) == 17883\nassert solution.maxDistance([[-8913, -8814, -434, -290, 183, 1837, 3063, 4457, 4677, 4987, 5584], [-7950, -886, 6672, 6859, 7836], [-2070, 3217], [-8750, -8587, -6901, -6624, -6478, -5579, -4380, -4360, -2137, -1400, 4373, 8792, 8902, 9540], [-9827, -6572, -5721, -4949, -4448, -4109, -2655, -2222, 4946], [-9488, -5439, 659, 1137, 9887]]) == 19714\nassert solution.maxDistance([[3597, 7065], [-9186, -7821, -371, 177, 945, 1554, 1932, 2083, 2183, 2468, 3903, 9706, 9832], [-9509, -9187, -8396, -8340, -5768, -4788, -3694, -2228, -1991, 2937, 7537]]) == 19341\nassert solution.maxDistance([[1378, 3914, 5916, 7648], [-9537, -8616, -6364, -3197, -2217, -1621, 247, 970, 1113, 2069, 2711, 2791, 3386, 3861, 7183, 8739]]) == 17185\nassert solution.maxDistance([[-7030, -6660, -5846, -5774, -1485, 6678, 6939, 9410, 9841], [-9756, -9151, -8769, -8457, -8425, -5569, -3121, -2360, -1902, 803, 1921, 2594, 7483, 8316, 8366, 9744, 9948], [-7245, -4242, 682, 1284, 4456], [-9653, -9625, -5965, -4380, 1238, 5445, 6929, 7825, 9343], [-9925, -9151, -8195, -3515, -3288, -2726, -1690, 728, 1930, 4512, 4782, 5385, 6222, 6303, 7815, 8295, 9591, 9829], [-4130, 388, 5231], [-9999, -9537, -7485, -1491, -1233, 199, 758, 2571, 3066, 5232, 5528, 8055, 9659]]) == 19947\nassert solution.maxDistance([[549, 3535, 6064, 8263, 8886, 8899], [-7297, -4153, -1656, 8897], [-5747, -5178, -1042, 1768], [-7367, -6017], [-9312, -8407, -8397, -3550, -3328, -1172, 1105, 4472, 5013], [-9208, -8356, -7350, -6840, -6529, -6476, -2833, -963, 124, 1181, 3230, 4880, 5017, 7727, 8739, 9989], [-9589, -8015, -2207, -1774, -260, -4, 1275, 2696, 3123, 4704, 4830, 6189], [-7639, -6831, -5384, -4938, -4296, -3701, 2530, 2627, 2965, 3088, 7006, 8555, 9663, 9719]]) == 19578\nassert solution.maxDistance([[-9232, -1637, 1689, 3969, 8318], [-8515, -3038], [-3796, -1117, 918, 3427, 5748, 6978, 8217, 9596, 9613], [-8959, -7017, -3979, -2532, -1346, 774, 2472, 2817, 3067, 5046, 6951, 7348, 8434], [-482, 1196, 2283, 3019, 8437], [-4797, -3496, -1837, -1788, 9646], [-8431, -4558, 269, 1865, 3388, 3660, 3813, 5101, 6034, 8434], [-8789, -8104], [-6913, -6797, -6086, -1611, 507, 715, 857, 1429, 3312, 3336, 4750, 5349, 5426, 6160, 7444, 8018, 8474, 9484]]) == 18878\nassert solution.maxDistance([[-8454, -8336, 923, 3516, 6426, 7034, 8382], [-9755, -9474, -6622, 92, 412, 752, 1305, 1372, 2058, 2482, 3902, 6587, 7335, 9378, 9593], [-8653, -7543, -7308, -6666, -5927, -3620, -2521, -1059, 21, 852, 933, 2207, 3038, 3310, 4211, 4276, 4516, 9883]]) == 19638\nassert solution.maxDistance([[-1111, -906, 402, 5606, 7528], [-8029, -6698, -6412, 127, 766, 3557, 3606, 4205, 6781], [-9409, -9104, -8584, -7666, -6358, -6216, -6165, -5051, -3156, -676, 1416, 3683, 4406, 6360, 8350], [-5516, -3767, -534, 711], [-9591, -6398, -5106, 7539, 8151], [-6010, -4635, 3146, 5336]]) == 17941\nassert solution.maxDistance([[-8200, -7002, -5388, -4081, -3711, -2783, -229, 837, 1091, 1437, 1852, 2016, 3603, 4042, 4290, 6432, 7216, 7718, 7831], [-9457, -2842, 1041, 3371, 5198, 6449, 7779, 8015], [-9463, -6434, -6087, -3059, -2845, -1204, -271, 8407, 8480], [4661, 7069, 7590], [-9648, -9216, -8245, -4709, -4633, -2874, -1547, -1190, -857, 167, 586, 2177, 8786, 9004, 9114], [-7275, -6890, -6138, -5860, -5798, -4521, -2710, -2260, -2135, 201, 208, 555, 1559, 1790, 4229, 5356, 5480, 7276, 9253, 9391], [3310, 7031], [-6709, -4467, -3863, -2816, -764, -53, 575, 3387, 4249, 7767, 9118, 9186]]) == 19039\nassert solution.maxDistance([[-8971, -6468, -6340, -6121, -5670, -3775, -3527, -2832, -2176, -2062, -1153, -851, -147, 1502, 2585, 3001, 3738, 6108, 6761, 8343], [-8329, -3992, -1482, 3359, 4515, 9744], [-8857, -4840, -4717, 3423]]) == 18715\nassert solution.maxDistance([[-3589, -2254, 593, 1791], [-8121, -7997, -7308, -6042, -5809, -4173, -1225, -588, -157, 49, 2036, 2316, 6288, 7082, 8986, 9852], [-9561, -2929, 619, 1332, 1558, 2991, 3637, 4523, 7021], [-8886, -4367, -2326, -102, 2885, 3901, 9770], [-7738, -4962, -4642, -2784, -2398, 98], [-9953, -7260]]) == 19805\nassert solution.maxDistance([[-9015, -8551, -7637, -5390, -5068, -3312, -2861, -1061, 1051, 3083, 3943, 4070, 4114, 4619, 5510, 7843, 7862, 8034], [-6968, -5064, -1725, -1215, 919, 1227, 6240, 7623, 9339]]) == 18354\nassert solution.maxDistance([[-985], [-9478, -8337, -7093, -6360, -4944, -4613, -2843, -872, -319, 887, 1620, 2407, 2950, 2996, 3707, 4323], [-8548, -7320, -7082, -5600, -5346, -4416, -1323, 183, 819, 1366, 2742, 4636, 4965, 9867], [-9485, -8843, -6747, -5702, -5015, -4896, -3163, -2626, -2149, 124, 3024, 4450, 4682, 6018, 8943], [-9949, -871, 2057, 4746, 6794], [-9287, -8923, -8697, -8457, -7607, -6217, -5757, -5020, -3752, -3113, -2306, -1673, -1602, -856, -405, 463, 4018, 6431, 8655, 9933], [-6586, -5502, -598, 4308, 6306, 9754], [-5871, 2278, 4130], [-8703, -7693, -7685, -6639, -5652, -4738, -2940, -2294, -593, 1102, 6053, 6954, 7910, 8751, 8842]]) == 19882\nassert solution.maxDistance([[-9958, 1596, 8017, 8473], [-7484, -6192, -4570, -4174, -3837, -1856, -1777, 4683, 7187, 7845, 9501]]) == 19459\nassert solution.maxDistance([[-2798, 3790, 7762, 8928, 9466], [-9127, -8645, -8266, -5253, -5179, -4795, -3259, 2348, 4094, 5410, 7436, 7540, 7881, 8302, 8651], [-9450, -3585, -3206, -2694, -1298, -1072, 1780, 1948, 2688, 4502, 8114, 9288], [-9247, -7841, -5424, -4717, -1050, 2459, 3063, 5790, 7111, 8276]]) == 18916\nassert solution.maxDistance([[-9866, -9214, -3507, -1634, -1419, -975, -431, 140, 3892, 4772, 4861, 5308, 5320, 5814, 7562], [-5103, -4391, 1572]]) == 12665\nassert solution.maxDistance([[-3046, 776, 3588, 8721], [-2692, -2613, -1671, 4965, 7250, 8420], [-9491, -6773, -1891, -1027, 1616, 2692, 5744, 8077]]) == 18212\nassert solution.maxDistance([[-9498, -9042, -8669, -8644, -7920, -7848, -991, -171, -130, 1959, 4216, 5184, 5470, 5610, 5647, 7225, 7561, 9223], [-9685, -8501, -7578, -5856, -3777, -3006, -2737, -1236, -959, 38, 1278, 2095, 2603, 2771, 3622, 4257, 9597, 9684], [-8871, -3233, -1481, -839, -455, -178, 256, 677, 983, 1736, 2813, 3846, 5169, 6652, 7346, 7493, 9170], [-621, 9406, 9791], [-9233, -8236, -6892, -6495, -6315, -5959, -5081, -4396, -3318, -1637, 443, 1289, 1635, 1673, 6389, 6548, 6597, 6714, 6851], [-9713, -9191, 2512, 8025, 8662], [-8902, -5896, -3185, -1549, -1277, 101, 297, 1540, 2320, 2735, 2884, 2975, 3056, 3287, 5654, 6048, 9884], [-7695, -4040, -2094, -337, 473, 3612, 7789, 8966]]) == 19597\nassert solution.maxDistance([[-9222, -4631, -3983, -1022, 956, 3790, 4014, 5630, 9977], [-4277, -3524, -3230, 2284, 2657, 3944, 4893, 7604, 8276], [-9286, -5151, -2568, -1419, 1034, 7579, 8511], [-9623, 4672, 5194, 5419]]) == 19600\nassert solution.maxDistance([[-9510, -7198, -5108, -4791, -4352, -2998, -1297, 2336, 2514, 3555, 5580, 5632, 6339, 6413, 6763, 9779], [-9326, -8881, -8177, -6017, -2808, 4027, 4843, 4955, 9381, 9935], [-6665, -6660, -4763, 2178, 3133, 4527], [3307], [-9388, -6692, -4075, -2710, -2436, -1662, 1268, 2792, 3449, 5433, 5862, 6387, 6956, 7862, 9461, 9573, 9940], [-6233, -6006, -5649, -4405, -3773, -906, 1300, 1423, 3027, 3367, 3735, 6835, 7594, 7969, 8572]]) == 19450\nassert solution.maxDistance([[-8317, -7067, -5607, -5255, -4546, -1280, 1917, 3058, 4737, 6169, 7404, 7737, 9508, 9662, 9787], [-8885, -8593, -7892, -6049, -5519, -4931, -3576, 2466, 2494, 2638, 3919, 4776, 5377, 5604, 5642, 6225, 7125, 7466], [-9011, -7201, -2042], [-8903, -8407, -7181, -7144, -5196, -4929, -3635, -2273, -1216, -561, 47, 2111, 2733, 6165], [-9837, -5603, -5046, -4965, -4221, -2969, -289, 115, 937, 1927, 3987, 7872, 8201, 8203, 8751, 8999, 9417], [-9667, -9644, -8917, -4730, -3731, -3030, -3020, -2757, -2452, -1107, 214, 610, 3413, 3616, 3829, 4569, 6442, 6620, 9807]]) == 19644\nassert solution.maxDistance([[-8171, -7528, -7422, -7287, -5809, -5388, -4767, -2176, -1431, -58, 777, 1739, 1829, 1889, 2087, 3617, 4585, 7867, 8354], [-9980, -8320, -7570, -3435, -2751, -2235, -581, 2098, 5111, 5316, 8266, 8455, 9611, 9863], [-9037, -6406, -3809, -3207, -1183, 2954, 3845, 8323, 8334], [-9951, -8243], [-6348, -5731, -5648, -2318, -1078, -589, -466, 1229, 4024, 5457, 5463, 6653, 8104, 9091, 9825]]) == 19814\nassert solution.maxDistance([[-7896, -7829, -7708, -7271, -1947, 1640, 4193, 6317, 6829, 7542, 7773, 8570], [-8704, -2791, 86, 2531, 3711, 5352, 8834], [-9874, -5793, -4931, -3063, -927, 156, 584], [-8425, -5495, -4309, -541, -327, 7674, 7976]]) == 18708\nassert solution.maxDistance([[-5388, -4480, -690], [-7420, -7162, -5121, -2636, -2509, -760, -268, 1296, 2433, 2441, 5704, 7075, 8692, 8976], [-8933, -8591, -6625, -5807, 4438, 4780, 4907, 5761], [-5722], [-9839, -7897, -3832, -3330, -1945, -1207, -169, 2515, 3036, 5033, 5544, 6520, 7390, 7762, 8182, 9840], [-6296, -3777, -1, 2387, 4033], [-1144]]) == 18815\nassert solution.maxDistance([[1427], [-9597, -9458, -9112, -8920, -7666, -4304, -1261, 651, 2003, 3499, 9457], [-8976, -5439, -4189, -4036, -3233, 467, 751, 3831, 4160, 4247, 5083, 5727, 6184, 6244, 7602], [-8012, -3382, -2079, 99, 357, 2432, 2599, 5679]]) == 18433\nassert solution.maxDistance([[-8566, -8163, -6664, -6423, -1081, 837, 1940, 2748, 5894], [-8234], [-9417, -8244, -7259, -7237, -4648, -3883, -2344, -1745, 341, 559, 2428, 5056, 5365], [-9332, -8999, -6989, -6544, -5301, -4845, -4750, -4509, -2111, -340, 2596, 6908, 7277, 7288, 9020, 9332], [-2835, -239, 362, 3282], [-6209, -3129, -1736, 1457, 3432, 3529, 3539, 5721, 6933, 7828, 8190, 8538, 9165], [-9771, -3644, -1563, -1175, -1060, -195, 787, 4113, 4556, 6237, 6513, 7995, 8040, 9935]]) == 19352\nassert solution.maxDistance([[-8494, -8460, -2596, -2108, -1769, 3899, 6390, 7863, 9157], [-3354, -1715, -50, 2811, 2900, 5900], [-3289, 405, 7081, 8026], [-5586, -1460, -1059, -274, 742, 4278, 6541], [-7321, -7232, -7067, -6687, -6591, -6212, -1890, -1887, -879, -251, -221, 616, 1994, 3846, 4700, 5114, 5750, 7798, 9433]]) == 17927\nassert solution.maxDistance([[-9594, -8919, -4585, -3783, -3437, -2433, 230, 601, 2464, 3893, 4036, 5090, 5211, 6025, 6194, 7333, 8142, 8403, 9463], [-8479, -7821, -7231, -6531, -1433, -988, 7, 1397, 1492, 3967, 4687, 5634, 7129, 7392, 9963], [-8048, -7933, -7829, -7117, -6960, -6921, -6715, -4775, -4646, -3055, -2462, -2458, 4454, 4522, 5825, 7759, 8698, 8728, 9059], [-9782, -9346, -8843, -6338, -6112, -4323, -1698, -1253, 319, 4253, 6195, 6864, 7841, 8154, 8616, 9509]]) == 19745\nassert solution.maxDistance([[-8460, -5656, -3231, -3200, -2317, -2168, -253, 302, 1009, 2819, 4010, 4033, 6863, 9017, 9904], [-8199, -73, 1008, 2159, 4185], [-9061, -4448, 2826, 3416, 6148, 7812, 9019, 9507], [-9318, -7152, -5194, -3356, -1278, -1067, 823, 2330, 2948, 3361, 5809, 9225], [-7294, -5899, -4622, -816, -361, 3215, 4121, 4676], [-4636, 1381, 2551, 4846, 7202], [5465, 7259, 7366, 7906], [-7563, -2518, -323, 4090, 4444, 5369, 5481]]) == 19222\nassert solution.maxDistance([[-8805, -8086, -4125, -2406, -858, 8796], [-9208, -7969, -7820, -7358, -6657, -5928, -5288, -4624, -3565, -3422, -3348, -2149, -701, 2907, 4874, 5396, 8795, 9200], [-9548, -9109, -6721, -6415, -6017, -5024, -3507, 2586, 3382, 4268, 6122, 7202, 7965], [-9140, -6724, -6189, -6105, 2557, 3809], [-7747, -4593, -3957, -3874, -1365, 867, 1145, 1329, 1520, 8703, 9092], [-9727, -7493, -5510, 5279, 8172, 9420, 9937], [-9923, -7687, -5093, -4136, -3289, -2050, 7650, 8248], [-9798, -9389, -8039, 478, 2746], [-5673, 8031]]) == 19860\nassert solution.maxDistance([[-5624, -4684, -1415, 1278, 6221, 6763, 6940], [-8446], [-4799, -1467, -1177, -964, -423, 483, 931, 1159, 3130, 3228, 3394, 4808, 5188, 6266, 9228, 9539, 9866]]) == 18312\nassert solution.maxDistance([[-8625, -6913, -6373, -3222, -412, 709, 2373, 2555, 6934, 8940, 9928], [-9238, -8697, -8115, -7077, -6703, -6317, -5920, -4358, -540, 164, 806, 1365, 3096, 3277, 3674, 4201, 5392, 8129, 8671], [4427, 7090, 9808], [-9821, 3016, 5054], [-9781, -9473, -8066, -5979, -5203, -4704, -2838, -694, 4075], [1050], [-9910, -8566, -7310, -7289, -6196, -4226, -1122, 2561, 3244, 5377, 6208, 7244, 7368, 8662, 8959, 9289, 9611, 9672], [-7259, -4293, 465, 471, 3801, 9954], [-8667, -7167, -4430, -4415, -4028, -2573, -2245, -2164, -1722, -1599, -894, 1675, 2785, 3284, 3730, 4578, 8001, 8964]]) == 19864\nassert solution.maxDistance([[-8663, -5198, -340, -78, 1233, 2117, 2329, 4051, 6279], [101, 1749, 2637, 9076, 9669], [-7946, -3887, -69, 8037, 9014], [-9063, -7446, -7404, -4346, -4069, -4004, -3669, -3428, -3122, -1409, -1012, 587, 2216, 3423, 3988, 5102, 5247, 7141, 8690, 9363], [-6153, 102, 491]]) == 18732\nassert solution.maxDistance([[-7507, -4354, -1737, -617, 2898, 4054, 4974, 5626], [-8633, -7412, -6906, -4831, -3866, -839, -717, -597, 187, 224, 887, 2334, 2640, 3538, 7881, 8234, 8989, 9696, 9829]]) == 17336\nassert solution.maxDistance([[-9388, -9009, -8143, -6983, -5320, -3411, -2881, -2831, -2533, -551, -419, 1389, 2459, 7339, 7560, 7771, 7865, 7912, 9182], [-8578, -8426, -6906, -5993, -3821, -3309, -2332, -2189, -1243, -1129, 1583, 1730, 2125, 3495, 5736, 5896, 6606, 6956, 6969, 8571]]) == 17959\nassert solution.maxDistance([[-9899, -7415, -6427, -5172, -2952, -2944, 229, 516, 2106, 4210, 4751, 5733, 6449, 7190, 9662], [-7878, -2264, -1878, -1314, -120, -32, 2994, 5271, 5547, 6019, 6571, 6916, 6950], [-8362, -8141, -6877, -5869, -3808, -3378, -3142, -2588, 596, 5172, 7183, 7896, 8489, 9270, 9566]]) == 19465\nassert solution.maxDistance([[-8704, -8050, -7356, -5945, -2982, -1121, 461, 2146, 3425, 5088, 6498, 8837], [-7453, -1425, 1004, 2162, 5137, 5788], [-3881, -2374, -2213, 1586]]) == 16290\nassert solution.maxDistance([[-303, 1703, 3933, 6681], [9641], [-5617, -1173, -318, 279, 336, 2399, 4517, 4723, 5436, 5706, 8083, 8685], [-9010, 566, 6832, 7941], [-9679, -7286, -1638, -121, 418, 1614, 2208, 7802, 8103, 8463], [-9114, -5240, -4677, -2293, -1118, 669, 1480, 2346, 2552, 2611, 2736, 4126, 6922, 8924, 9083]]) == 19320\nassert solution.maxDistance([[-9235, -9046, -8337, -7345, -4808, -4726, -3813, 3404, 4646, 5123, 7430, 7925, 8760, 9389], [-9857, -7636, -7551, -1513, -1255, -240, -161, -8, 2648, 3258, 5891, 6442, 6654, 8873], [-9541, -9454, -8446, -7875, -7487, -6113, -4653, -3397, 2227, 3595, 4319, 5276]]) == 19246\nassert solution.maxDistance([[-9236, -6027, -5711, -5615, -5558, -5178, -4433, -3988, -3481, -3115, 42, 516, 3412, 4443, 7486, 8473, 9867], [-6227, -404, 9718], [-8609, -5471, -5238, -2463, -942, 112, 315, 3549, 3587, 5062, 5456, 8203], [-6419, -6191, -2348, 1222, 1895, 2736, 3882, 5323, 5410, 7575], [-1541, 812, 1477, 3863, 5340, 6200, 9798, 9898]]) == 19134\nassert solution.maxDistance([[-8864, -6240], [-8855, -6253, -3073, 5717], [-6550, -223, 2141, 5942], [-9255, -6342, -5852, -4466, -2190, -2181, -720, 1172, 3053, 3689, 4033, 5121, 5531, 8106, 8391]]) == 17255\nassert solution.maxDistance([[-9492, -5725, -5547, -5345, -4432, -3376, 1646, 4466, 4898, 6585], [-8229, -5773, -3978, -3367, -3147, -2465, -2241, -1573, 274, 308, 721, 1167, 7183, 7261, 8754, 8818], [-9353, -7842, -7530, -5039, -4788, -3262, -702, -538, 1180, 2083, 7116, 8653, 9290], [-6699, -5890, -3357, -2074, 4070, 6394]]) == 18782\nassert solution.maxDistance([[-9706, -9425, -9235, -7980, -6713, -6372, -6231, -5010, -3675, -2713, -29, 2742, 2907, 2970, 6183, 6389, 8001, 9919], [-6156, 8649]]) == 18355\nassert solution.maxDistance([[-8818, -6769, -5013, -3339, -1217, 3052, 4427, 5722, 6891, 7803, 9370], [-4491, -2618, -1088, 5658], [-8452, -7288, -5960, -2011, -1158, 3656, 4734, 4948, 6389]]) == 17822\nassert solution.maxDistance([[-8694, -5167, -4688, -3376, -2959, -1587, -124, 541, 598, 756, 1991, 4110, 5180, 6619, 7574, 8214, 8781, 9614], [-8489, -7466, -7076, -3114, -1298, 619, 6804, 8215, 8490], [-4100, -1184, 595, 5264, 7013, 7551, 8593], [-9805, -9561, -9284, -8591, -7988, -5787, -5626, -5541, -2817, -602, 191, 1412, 4762, 4815, 5821, 7213], [-9097, -7715, -3091, -1422, 446, 4140]]) == 19419\nassert solution.maxDistance([[2475, 3414], [-2807, 2380, 8740], [-7384, -5747, -4434, -2836, -2310, -1289, 708, 2436, 3565, 5588, 5794, 5915, 6817, 9184], [-8692, -814, 8586, 9464, 9905], [-9599, -6636], [-8242, -7981, -321], [-7545, -6549, -5353, -3859, -3674, -1591, 1992, 2512, 4437, 5882], [-4782], [-4568], [-8533, -8397, -7658, -7450, -7358, -6810, -6334, -2189, -839, -621, -590, 334, 1852, 6602, 7585, 7869, 9293]]) == 19504\nassert solution.maxDistance([[1848], [-9366, -8851, -4049, -2645, -690, 2574, 3978, 5041, 6586, 8322], [-9671, -5792, -2285, 2868, 5620, 7694]]) == 17993\nassert solution.maxDistance([[-8471, -4881, -2114, -1960, -1476, -960, 835, 1118, 5706, 7150, 8507, 8654, 9992], [-9063, -8176, -6100, -5290, -2884, -858, -365, 3517, 7795, 8617], [-7366, -5533, -3517, -3023, 5445, 9962], [-9694, -9013, -8231, -7504, -7074, -6832, -5967, -5921, -5132, -4221, -4026, -3851, -3170, -516, 2642, 3648, 4779, 4857, 5359, 5923], [-8551, -7868, -6605, -5019, -3285, -1732, -917, 1057, 3850, 4548, 6181, 6557, 7195, 7253, 7322, 7397, 7671, 7776, 8655, 9012], [-8275, -5855, -5718, -4082, -2305, 996, 1647, 2097, 5984, 6314, 6765, 7942], [-7540, -6448, -6306, -5527, 423, 1195, 1293, 1717, 3263, 4038, 7144, 8132, 8614], [-3789, -2140, -1204, -1170, 982, 1172, 1866, 3649, 6834, 7720, 8379, 8593]]) == 19686\nassert solution.maxDistance([[-9555, -9517, -3925, -2421, -2098, -1490, -1364, 164, 292, 1009, 1898, 3009, 4322, 5300, 6035, 7569, 8475, 9980], [-7721, -7026, -6439, -3816, -346, 3202, 3244, 3441, 4192, 4811, 5417, 7135, 7677], [-7283, -6143, -5789, -3226, -1623, 3479, 4740, 9449], [-8684, -7338, -6702, -6526, -6005, -2744, -2237, -1922, -771, 645, 1988, 3892, 3936, 4428, 4951, 5876, 8410, 9739], [-8108, -7812, -5140, 4953, 8678, 9894]]) == 19449\nassert solution.maxDistance([[-9623, -8664, -8463, -7833, -7032, -4077, -2126, 621, 795, 1938, 2088, 2541, 3754, 4121, 7213, 7780], [-3829], [-8699, -7420, -4878, -1410, -1014, 3648, 5856, 7171]]) == 16794\nassert solution.maxDistance([[-8132, -7195, -3804, -2618, 13, 2217, 7688, 9894], [-7492, 6779], [-904], [-9270, -8666, -6653, -4930, -4168, -2919, -2450, -2423, -515, -290, 2349, 2377, 2438, 7098, 7327, 8937]]) == 19164\nassert solution.maxDistance([[-9913, -6923, -6082, -6035, -5947, -4697, -3528, -1760, -809, -308, 3037, 7320, 7754, 8779], [-9036, -8101, -6781, -6751, -5929, -1410, -1095, 1257, 3799, 5768, 8247, 8663, 8981], [220, 254, 1396, 1816, 4635, 4746, 7654, 9899], [-9002, -8199, -5644, -4745, -3883, -3798, -3149, -2067, -1429, -756, 5635, 7270, 7647, 8980, 9489], [-9529, -9101, -8060, -5168, -3321, -2213, -1844, -724, -362, 67, 8826]]) == 19812\nassert solution.maxDistance([[-9183, -8948, -8627, -6960, -5324, -3403, -2835, -1352, 400, 2069, 2622, 3335, 3345, 7735, 8521, 8831], [-8932, 731, 6693, 8635], [-3242, 3908, 9239]]) == 18422\nassert solution.maxDistance([[-9447, -7948, -5906, -1394, -757, 1678, 3380, 3461, 5223, 5719, 7096, 9726, 9769], [9398], [-4827, -3418], [-8325, -7882, 607, 734, 1664, 3048, 3073, 4849, 9691], [-8466, 8210, 9171, 9334], [-9744, 2364, 2968, 5200, 9192], [-268, 33, 1188, 2841, 4283, 4401, 4656, 7993, 8573, 9759]]) == 19513\nassert solution.maxDistance([[-9940, -6554, -6348, -4962, -3760, -3194, -1732, -798, 3636, 6691, 7449, 7763, 8429, 8452, 8459, 8979], [-7018, -6735, -4961, -3813, -3329, -3086, 2628, 3637, 3882, 4714, 5555, 8928], [-9158, -8621, -6735, -5913, -5473, -4845, -4505, -2094, -2084, 1731, 1937, 2811, 2936, 2953, 3580, 4803, 5765, 6874, 9769], [-9693, -7987, -7427, -5436, -4983, -4699, -2687, -2613, -2320, 941, 1365, 2823, 4612, 7994], [-8900, -8868, -6683, -6467, -3846, -1483, 1556, 2261, 5745, 6224, 9179], [4961]]) == 19709\nassert solution.maxDistance([[-8616, -6589, -5319, -2910, 260, 674, 3841, 7209, 8588, 9113], [-8073, 3504], [-9523, -8143, -7833, -6540, -6162, -5435, -5039, -4412, -3970, -3201, -2592, -1292, -763, 3495, 4378, 4709, 5551, 6405, 6467, 9413], [-9814, -7698, -6508, -3658, -2076, -1373, -637, -215, 615, 1231, 2135, 4316, 5142, 7850, 8396]]) == 19227\nassert solution.maxDistance([[-9794, -9420, -8063, -3979, 197, 1300, 3210, 4363, 4600, 8430], [-9290, -4716, -1993, -139, 372, 3117, 3462, 6026, 6272], [-2230, -1785, -48, 28, 5010], [-9005, -7838, -7267, -5980, -5614, -3617, -2317, -1550, 466, 481, 1347, 2296, 3612, 4573, 5902], [-4776, 1667], [-7264, -6246, -5358, -3257, 1201, 5015, 8799], [-7128, -6192, -4906, -4320, -4094, -1161, -1055, 340, 1982, 2334, 4352, 4425, 4524, 6769, 8630], [-9484, -6069, -6037, -4267, -3177, -2521, -1337, -456, -183, 2458, 3131, 3246, 4395, 5236, 5809, 5872], [-7625, 9174, 9817]]) == 19611\nassert solution.maxDistance([[-6882, -6535, -5807, -5561, -4619, -3970, -3837, -3542, -1117, 702, 1822, 5806, 6819, 9189, 9494, 9773], [-8428, -6986, -6450, -4754, -1448, 789, 1977, 2352, 3395, 5834, 6285, 6993, 7977, 8451, 8991], [-6865, -4905, -4642, -2747, -884, -358, -11, 690, 2148, 4969, 5628, 6550, 7943, 8468], [-9623], [-9941, -5001, 2094, 4960, 5243], [-6148, -3713, -2458, -875, 3617, 5748, 8050, 9647], [-6730, -5418, -4569, -4096, -3400, -428, 908, 1619, 1771, 1871, 2448, 3515, 4136, 5561]]) == 19714\nassert solution.maxDistance([[-6844, -5918, -892, 334, 2859, 4704, 6942, 7169], [-9705, -9486, -7086, -6721, -4979, -4411, -2818, 2181, 2440, 7672], [-8225, -1759, 262, 5624, 6302, 7185], [-9050, -7253, -6042, -6037, -5765, -5017, -2228, -1803, 915, 2274, 2526, 3854, 4492, 5231, 6111, 6325], [-6217], [-9360, -4701, -2699, -364, 682, 857, 2254, 5013, 6440, 6744, 7873, 8080, 9831], [-9027, -7115, -6834, -6583, -6266, -4121, -2018, -1867, 142, 542, 1812, 2968, 3768, 4236, 5763, 6160, 6430, 6502, 8332, 9757], [-9818, -9249, -8991, -6909, -6345, -2111, -1243, -773, -266, 1387, 4698, 5509, 5946, 6824, 8036, 8865, 9667], [-7499, -468, 1542, 4875, 8015], [-9219, -8086, -6752, -5544, -5288, -4535, -2620, -1185, -593, -411, -144, 1238, 1268, 2028, 3640, 4042, 7846, 8683, 9224]]) == 19649\nassert solution.maxDistance([[-9614, -9289, -8596, -4956, -549, 5160, 6309, 7290, 7536, 8270, 8934, 8975], [-9932, -9848, -9688, -9104, -7699, -6917, -5929, -4342, -3959, -1822, 282, 531, 543, 3466, 4808, 5047, 5111, 9557, 9832], [-1100, 2481], [-9118, 6836, 8426, 9140], [-7308, -6645, -4620, -3507, -3275, -660, 1270, 2028, 4245, 5164, 6607, 6745, 9529], [-9608, -7146, -6015, -4692, -4643, -1538, 1120, 5151, 6083, 6349, 6388, 7830, 7994, 8329], [-9491, -6906, -5874, -5795, -4393, -3968, -2689, -1654, 662, 1223, 2209, 2264, 5250, 5319, 8430, 8699, 8845]]) == 19461\nassert solution.maxDistance([[-8469], [-9715, -7032, -7019, -6724, -4344, -3754, -3596, -3235, -1580, -456, 355, 1606, 1924, 3032, 3740, 5087, 5747, 9090, 9170], [-8042, -7744, -6867, -5633, -3910, -3464, -3427, -3392, -1907, -1469, -1438, -614, 2090, 3175, 3410, 3929, 4771, 4812, 9998], [-9930, -5010, -2756, 663, 2472, 2875, 3536, 6791, 7551, 8137], [-9195, -6003, -233, 1262, 3676, 4047, 4590, 5410, 6059, 6547, 9212], [-4807, 4092, 4497, 9763]]) == 19928\nassert solution.maxDistance([[-9814, -6515, -3656, -546, 1075], [-7817, -7058, -4873, -4662, -3440, -3223, -323, -269, 4041, 4331, 4655, 5238, 5353, 6429, 8006, 8803, 9236], [-8810, -8669, -6953, -6266, -4728, -4465, -3443, -188, 890, 1668, 4600, 5047, 5289, 5346, 6785, 7487, 8718, 9180], [-9770, -8956, -6785, -5397, -4515, -3400, -2703, -500, -35, 2486, 3042, 4158, 4604, 4856, 5169, 5622, 7987, 9019], [-9516, -9214, -2939, -2649, -1274, 6094, 6137, 9872]]) == 19686",
  "inefficient_solution": "class Solution:\n    def maxDistance(self, arrays: List[List[int]]) -> int:\n        ans = 0\n        maxes = []\n        mins = []\n        for arr in arrays:\n            maxes.append(max(arr))\n            mins.append(min(arr))\n        while True:\n            max_dist, min_dist = float('-inf'), float('inf')\n            for i, mx in enumerate(maxes):\n                for j, mn in enumerate(mins):\n                    if i != j:\n                        max_dist = max(max_dist, abs(mx - mn))\n                        min_dist = min(min_dist, abs(mx - mn))\n            ans = max(ans, max_dist, min_dist)\n            new_maxes = maxes[:]\n            new_mins = mins[:]\n            for i, mx in enumerate(maxes):\n                for j, mn in enumerate(mins):\n                    if i != j:\n                        new_maxes[i] = max(new_maxes[i], mn)\n                        new_mins[j] = min(new_mins[j], mx)\n            maxes, mins = new_maxes, new_mins\n            if len(maxes) == 0 or len(mins) == 0:\n                break\n        return ans",
  "is_python": true
}