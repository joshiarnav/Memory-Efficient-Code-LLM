{
  "problem_idx": 329,
  "task_name": "Longest Increasing Path in a Matrix",
  "markdown_description": "\nGiven an `m x n` integers `matrix`, return *the length of the longest increasing path in* `matrix`.\n\n\nFrom each cell, you can either move in four directions: left, right, up, or down. You **may not** move **diagonally** or move **outside the boundary** (i.e., wrap-around is not allowed).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0329.Longest%20Increasing%20Path%20in%20a%20Matrix/images/grid1.jpg)\n\n```\n\n**Input:** matrix = [[9,9,4],[6,6,8],[2,1,1]]\n**Output:** 4\n**Explanation:** The longest increasing path is [1, 2, 6, 9].\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0329.Longest%20Increasing%20Path%20in%20a%20Matrix/images/tmp-grid.jpg)\n\n```\n\n**Input:** matrix = [[3,4,5],[3,2,6],[2,2,1]]\n**Output:** 4\n**Explanation:** The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** matrix = [[1]]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == matrix.length`\n* `n == matrix[i].length`\n* `1 <= m, n <= 200`\n* `0 <= matrix[i][j] <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        @cache\n        def dfs(i: int, j: int) -> int:\n            ans = 0\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    ans = max(ans, dfs(x, y))\n            return ans + 1\n\n        m, n = len(matrix), len(matrix[0])\n        return max(dfs(i, j) for i in range(m) for j in range(n))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestIncreasingPath(self, matrix):\n        @cache\n        def dfs(i, j):\n            ans = 0\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    ans = max(ans, dfs(x, y))\n            return ans + 1\n\n        m, n = len(matrix), len(matrix[0])\n        return max(dfs(i, j) for i in range(m) for j in range(n))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random matrix\n    m, n = random.randint(1, 10), random.randint(1, 10)\n    matrix = [[random.randint(0, 100) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestIncreasingPath(matrix)\n\n    return matrix, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        matrix, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestIncreasingPath(matrix) == expected_result\n        print(f\"assert solution.longestIncreasingPath({matrix}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestIncreasingPath({matrix}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestIncreasingPath([[75, 97, 95, 7, 25, 56, 5, 5], [96, 58, 16, 71, 91, 91, 38, 68], [33, 47, 84, 25, 98, 60, 31, 33], [7, 93, 87, 77, 9, 82, 54, 73], [97, 19, 13, 33, 25, 69, 41, 47]]) == 6\nassert solution.longestIncreasingPath([[83, 19, 67, 69, 64, 90, 4, 74, 20], [91, 70, 51, 36, 76, 9, 53, 34, 24], [2, 44, 79, 0, 73, 88, 97, 13, 76], [76, 64, 56, 95, 15, 36, 29, 38, 30], [21, 59, 26, 35, 43, 24, 17, 14, 91]]) == 6\nassert solution.longestIncreasingPath([[17, 65, 60, 45, 98, 5, 95, 39, 11, 15]]) == 3\nassert solution.longestIncreasingPath([[3]]) == 1\nassert solution.longestIncreasingPath([[24, 68, 63, 53, 10, 56, 96, 70], [62, 38, 60, 60, 7, 94, 13, 77], [100, 45, 97, 60, 1, 94, 65, 3], [69, 4, 10, 9, 76, 80, 29, 94], [59, 98, 78, 60, 84, 53, 64, 32], [9, 18, 58, 88, 16, 57, 14, 38], [49, 66, 41, 7, 72, 26, 60, 81]]) == 6\nassert solution.longestIncreasingPath([[67, 70, 34, 15, 89, 1], [86, 70, 84, 88, 28, 6], [23, 36, 99, 69, 22, 53], [82, 67, 95, 62, 4, 76], [24, 70, 40, 82, 67, 55], [81, 89, 50, 100, 52, 85], [15, 31, 90, 80, 90, 65], [100, 82, 8, 36, 68, 86], [19, 42, 75, 71, 65, 56], [9, 77, 2, 17, 55, 42]]) == 6\nassert solution.longestIncreasingPath([[70, 62, 34, 30, 66, 9, 40, 73, 61, 34], [82, 43, 93, 92, 37, 44, 53, 55, 61, 31], [99, 49, 2, 48, 47, 57, 95, 47, 63, 85], [76, 38, 12, 53, 37, 70, 90, 76, 89, 20], [72, 75, 39, 26, 30, 51, 69, 61, 25, 68], [75, 13, 77, 50, 13, 68, 31, 52, 96, 98]]) == 8\nassert solution.longestIncreasingPath([[81, 57, 72, 67, 33, 58, 93, 48], [75, 36, 56, 26, 22, 72, 39, 27], [52, 15, 100, 76, 76, 53, 2, 40], [48, 80, 12, 34, 100, 53, 27, 3], [10, 84, 76, 90, 66, 31, 35, 28]]) == 5\nassert solution.longestIncreasingPath([[39, 67, 67, 13, 23], [17, 14, 21, 49, 42], [29, 32, 99, 13, 6], [21, 40, 85, 84, 8], [16, 99, 100, 95, 75]]) == 7\nassert solution.longestIncreasingPath([[19, 5, 95, 51, 71, 6, 43], [20, 4, 65, 60, 78, 22, 99], [20, 7, 78, 99, 61, 87, 1], [12, 25, 2, 16, 35, 48, 30], [2, 78, 40, 46, 70, 79, 16], [6, 6, 0, 46, 7, 97, 0], [35, 13, 80, 76, 2, 61, 92]]) == 6\nassert solution.longestIncreasingPath([[52, 27, 87, 17, 37, 39, 97, 63, 10], [15, 85, 76, 65, 44, 39, 4, 91, 47], [96, 65, 42, 73, 45, 70, 22, 13, 14], [66, 91, 37, 80, 42, 63, 52, 73, 10], [48, 97, 63, 26, 8, 38, 21, 68, 62], [31, 41, 93, 31, 85, 21, 82, 15, 16]]) == 6\nassert solution.longestIncreasingPath([[0], [48], [74]]) == 3\nassert solution.longestIncreasingPath([[65, 64], [1, 3], [69, 84], [78, 21], [43, 27]]) == 4\nassert solution.longestIncreasingPath([[98, 19, 84], [61, 25, 90], [33, 52, 40], [61, 60, 84], [94, 41, 81], [55, 21, 84], [0, 61, 92], [70, 75, 34], [45, 72, 35], [44, 95, 8]]) == 6\nassert solution.longestIncreasingPath([[2, 19, 30, 92]]) == 4\nassert solution.longestIncreasingPath([[40, 68, 13, 47, 59, 10, 18, 33], [75, 5, 52, 89, 62, 45, 91, 21], [90, 76, 98, 29, 19, 51, 73, 42]]) == 5\nassert solution.longestIncreasingPath([[52, 85], [84, 7], [39, 62], [25, 87], [79, 51], [78, 57], [57, 66], [82, 25]]) == 4\nassert solution.longestIncreasingPath([[19, 43, 76, 34, 55, 45, 77, 48, 3, 91], [84, 17, 6, 55, 77, 15, 98, 7, 21, 54], [95, 67, 54, 29, 82, 19, 42, 8, 91, 44], [61, 60, 1, 4, 86, 91, 88, 65, 4, 83], [81, 1, 70, 62, 13, 6, 10, 28, 52, 9], [46, 50, 69, 33, 33, 98, 29, 97, 1, 51]]) == 8\nassert solution.longestIncreasingPath([[86, 61, 13, 98, 22, 26, 92, 62, 32], [23, 91, 81, 46, 81, 81, 59, 82, 12], [31, 58, 83, 66, 57, 20, 31, 28, 29], [41, 93, 59, 40, 32, 45, 12, 2, 87]]) == 5\nassert solution.longestIncreasingPath([[73, 86, 28, 73, 94, 49, 62, 26, 8, 82], [3, 85, 18, 56, 52, 5, 61, 46, 4, 84], [54, 78, 11, 62, 27, 82, 52, 93, 42, 43], [2, 27, 42, 45, 19, 67, 41, 52, 12, 73], [85, 3, 98, 0, 85, 55, 60, 70, 33, 11], [40, 82, 37, 30, 82, 100, 81, 87, 16, 87], [16, 10, 73, 4, 18, 41, 0, 67, 83, 48]]) == 6\nassert solution.longestIncreasingPath([[13, 78, 35, 64, 67], [66, 4, 87, 12, 42], [28, 33, 64, 30, 32], [0, 89, 45, 24, 42], [43, 2, 84, 12, 97], [64, 42, 47, 80, 97], [72, 44, 14, 28, 35], [1, 14, 5, 29, 18], [61, 75, 39, 51, 3], [4, 31, 71, 20, 91]]) == 6\nassert solution.longestIncreasingPath([[20, 38, 44, 25], [29, 97, 13, 45], [94, 74, 90, 97], [94, 40, 5, 71], [60, 67, 73, 27], [38, 41, 32, 29], [95, 13, 1, 21]]) == 7\nassert solution.longestIncreasingPath([[41, 0, 86, 73, 55, 100], [18, 90, 1, 97, 18, 88]]) == 4\nassert solution.longestIncreasingPath([[33, 75, 88, 3, 86, 79, 37, 75, 80, 54], [100, 12, 88, 43, 53, 30, 34, 28, 85, 99], [98, 1, 43, 72, 65, 1, 60, 86, 33, 57], [76, 45, 96, 5, 7, 57, 3, 1, 69, 89], [96, 29, 0, 52, 22, 90, 74, 50, 50, 56]]) == 8\nassert solution.longestIncreasingPath([[35, 40, 8, 55], [73, 86, 18, 56], [1, 57, 23, 21], [50, 73, 53, 66], [58, 69, 84, 8], [85, 34, 67, 25], [35, 31, 0, 3], [64, 93, 73, 58]]) == 5\nassert solution.longestIncreasingPath([[25, 61, 7, 10], [74, 17, 23, 75], [77, 88, 54, 3], [53, 46, 32, 16], [29, 37, 12, 23], [55, 13, 55, 74], [24, 39, 56, 34], [75, 58, 38, 49]]) == 7\nassert solution.longestIncreasingPath([[64, 95, 27], [10, 29, 70], [64, 19, 54], [55, 15, 83]]) == 4\nassert solution.longestIncreasingPath([[3, 33, 37, 17, 3, 43, 28, 14]]) == 3\nassert solution.longestIncreasingPath([[52, 9, 43, 80, 24, 88], [87, 74, 85, 85, 78, 49], [92, 52, 52, 64, 72, 77]]) == 5\nassert solution.longestIncreasingPath([[61, 58, 17, 63, 22, 41, 80, 70, 40, 24], [39, 11, 50, 62, 94, 51, 53, 57, 79, 64], [90, 87, 40, 89, 70, 26, 67, 36, 16, 36]]) == 7\nassert solution.longestIncreasingPath([[56, 26, 65, 20, 63, 22, 34, 77, 74], [11, 87, 49, 17, 98, 23, 81, 30, 47], [48, 95, 42, 18, 3, 67, 73, 37, 8], [11, 54, 23, 76, 13, 95, 14, 71, 71], [93, 40, 24, 70, 27, 5, 89, 88, 30], [54, 31, 17, 94, 4, 54, 0, 13, 76], [89, 75, 97, 97, 35, 98, 39, 69, 19], [28, 94, 74, 95, 56, 27, 28, 0, 14]]) == 6\nassert solution.longestIncreasingPath([[18, 27, 71, 48, 77, 82, 63], [60, 54, 44, 30, 38, 65, 24], [84, 70, 23, 54, 18, 88, 90]]) == 5\nassert solution.longestIncreasingPath([[61, 37, 53], [81, 5, 77], [13, 42, 43], [64, 60, 66], [66, 4, 11], [39, 13, 23], [53, 89, 58], [91, 48, 61]]) == 5\nassert solution.longestIncreasingPath([[50, 25, 37, 15, 40, 29], [38, 66, 16, 100, 86, 21], [84, 60, 30, 63, 70, 81], [12, 34, 21, 51, 95, 83], [60, 22, 92, 71, 29, 20]]) == 7\nassert solution.longestIncreasingPath([[79, 88, 94, 50, 17, 90, 20, 72, 77], [13, 11, 47, 34, 78, 38, 26, 100, 68]]) == 5\nassert solution.longestIncreasingPath([[39, 91], [49, 18], [21, 50], [30, 54], [26, 91], [54, 79], [85, 21], [77, 70], [95, 57]]) == 4\nassert solution.longestIncreasingPath([[43, 89, 54, 26, 71, 37, 67, 86], [94, 20, 31, 6, 72, 70, 7, 84], [85, 6, 29, 28, 76, 31, 47, 99], [58, 91, 51, 19, 10, 71, 58, 59], [19, 3, 18, 74, 89, 91, 51, 69], [2, 3, 49, 11, 82, 91, 49, 41]]) == 7\nassert solution.longestIncreasingPath([[68], [35], [13]]) == 3\nassert solution.longestIncreasingPath([[49, 9], [32, 21], [21, 43], [92, 13]]) == 4\nassert solution.longestIncreasingPath([[20, 49], [91, 20], [39, 53], [80, 45]]) == 2\nassert solution.longestIncreasingPath([[28, 63, 33, 78, 75, 50, 67, 14, 56, 30]]) == 3\nassert solution.longestIncreasingPath([[93, 11, 76, 7], [15, 41, 18, 3], [43, 25, 56, 79], [9, 22, 12, 14], [39, 12, 51, 5]]) == 5\nassert solution.longestIncreasingPath([[40], [39], [25], [74], [70], [81], [48]]) == 3\nassert solution.longestIncreasingPath([[35, 79], [2, 16], [98, 33], [18, 97], [70, 90], [100, 21], [37, 40]]) == 4\nassert solution.longestIncreasingPath([[63, 1, 93], [26, 12, 15], [60, 72, 70], [98, 42, 97]]) == 5\nassert solution.longestIncreasingPath([[24, 95, 33, 4, 23], [9, 26, 54, 12, 73], [99, 3, 85, 37, 50], [65, 64, 99, 100, 10], [97, 46, 64, 63, 97]]) == 6\nassert solution.longestIncreasingPath([[22, 90, 9, 79, 9, 87, 96, 82], [14, 47, 2, 59, 24, 72, 51, 42], [100, 45, 51, 85, 28, 72, 66, 38], [79, 48, 52, 63, 81, 12, 0, 87]]) == 6\nassert solution.longestIncreasingPath([[95, 47], [86, 11], [0, 78], [8, 98], [53, 92], [71, 90], [18, 86], [37, 44]]) == 7\nassert solution.longestIncreasingPath([[6], [38], [79], [95], [79], [66]]) == 4\nassert solution.longestIncreasingPath([[70, 86, 67, 15, 2, 26]]) == 4\nassert solution.longestIncreasingPath([[65, 91, 30, 74, 5, 11, 3, 87], [85, 59, 74, 97, 77, 32, 2, 1], [46, 100, 4, 98, 20, 66, 64, 88], [100, 8, 5, 17, 36, 60, 3, 87], [17, 3, 8, 37, 48, 95, 30, 11], [77, 6, 0, 29, 23, 30, 55, 21], [56, 60, 4, 99, 14, 6, 59, 3]]) == 8\nassert solution.longestIncreasingPath([[1, 92, 66], [78, 78, 60], [60, 44, 16], [28, 68, 20]]) == 4\nassert solution.longestIncreasingPath([[19, 38], [40, 21], [85, 38], [52, 84], [54, 91], [65, 59]]) == 4\nassert solution.longestIncreasingPath([[69, 14, 89, 86, 22, 77, 63, 45], [76, 45, 96, 46, 12, 0, 91, 80], [94, 50, 28, 86, 75, 43, 64, 24], [2, 40, 68, 3, 64, 13, 94, 46], [18, 62, 41, 64, 64, 79, 98, 25], [2, 42, 62, 30, 99, 78, 24, 35], [42, 83, 58, 67, 75, 6, 61, 1], [70, 25, 43, 77, 52, 48, 73, 63]]) == 6\nassert solution.longestIncreasingPath([[100, 85, 43, 27, 40], [27, 92, 88, 5, 32], [59, 29, 87, 100, 15]]) == 5\nassert solution.longestIncreasingPath([[7, 54, 25, 31, 15, 94, 37, 94]]) == 2\nassert solution.longestIncreasingPath([[72, 77, 46, 56, 65, 7], [83, 4, 35, 61, 42, 67], [15, 17, 83, 70, 56, 5], [73, 75, 17, 31, 30, 96]]) == 7\nassert solution.longestIncreasingPath([[68, 26, 6, 1, 21, 7, 62, 31], [11, 83, 52, 89, 8, 16, 0, 66], [28, 35, 2, 74, 49, 71, 48, 70], [74, 54, 95, 65, 97, 8, 77, 37], [64, 0, 28, 28, 24, 28, 96, 16], [39, 37, 39, 13, 82, 64, 58, 92], [87, 89, 9, 15, 55, 4, 8, 8], [82, 28, 4, 100, 76, 60, 37, 39]]) == 6\nassert solution.longestIncreasingPath([[35, 42, 97, 34, 26, 22, 66, 76, 46], [51, 34, 99, 39, 58, 88, 30, 97, 99], [54, 21, 94, 12, 70, 12, 97, 95, 16], [89, 57, 64, 43, 53, 73, 98, 43, 10]]) == 6\nassert solution.longestIncreasingPath([[69, 73, 55, 40, 83, 10], [55, 46, 95, 29, 8, 90], [84, 57, 99, 62, 31, 95], [11, 91, 83, 84, 28, 86], [67, 9, 16, 93, 82, 33], [37, 81, 23, 92, 52, 64], [14, 47, 70, 22, 40, 41]]) == 6\nassert solution.longestIncreasingPath([[61, 93, 68, 20, 81, 12, 26, 80, 1], [82, 88, 41, 68, 50, 25, 38, 6, 51], [83, 19, 94, 16, 22, 49, 41, 8, 13], [62, 23, 7, 14, 78, 20, 39, 57, 90], [43, 71, 10, 69, 22, 54, 72, 47, 24], [100, 0, 28, 75, 77, 49, 91, 1, 34], [20, 69, 97, 49, 34, 47, 55, 23, 66]]) == 6\nassert solution.longestIncreasingPath([[8], [8], [39], [21]]) == 2\nassert solution.longestIncreasingPath([[13, 21, 10, 78, 95, 69, 94, 71], [11, 21, 98, 41, 10, 24, 11, 29]]) == 4\nassert solution.longestIncreasingPath([[82, 73, 63], [47, 83, 27], [41, 22, 34], [2, 99, 93], [10, 6, 38], [38, 62, 34], [56, 48, 43], [87, 21, 38], [91, 22, 76]]) == 7\nassert solution.longestIncreasingPath([[10, 52, 28, 72, 14, 67, 89, 67, 93, 98], [63, 84, 63, 43, 33, 77, 100, 27, 54, 52], [25, 68, 39, 79, 19, 60, 95, 62, 44, 70]]) == 5\nassert solution.longestIncreasingPath([[10, 37, 2], [14, 74, 8], [79, 70, 32], [94, 43, 15], [64, 65, 85], [59, 44, 97], [92, 5, 30], [53, 87, 12], [10, 17, 97]]) == 7\nassert solution.longestIncreasingPath([[7, 100, 14], [45, 43, 62], [56, 83, 10]]) == 4\nassert solution.longestIncreasingPath([[96, 27, 73, 30, 11, 97, 76, 82], [80, 14, 68, 28, 24, 74, 28, 40], [31, 30, 54, 83, 38, 29, 90, 30], [49, 68, 49, 7, 100, 47, 14, 1], [96, 20, 58, 15, 53, 78, 49, 57], [57, 58, 33, 93, 59, 76, 84, 92], [46, 20, 85, 79, 15, 85, 100, 76], [6, 32, 80, 5, 27, 82, 44, 23]]) == 7\nassert solution.longestIncreasingPath([[29, 73, 75, 37], [42, 55, 61, 44], [73, 0, 9, 8], [7, 34, 55, 5], [75, 60, 47, 76], [91, 68, 12, 9], [64, 26, 18, 38], [80, 85, 45, 62]]) == 7\nassert solution.longestIncreasingPath([[9, 3, 53], [13, 65, 9], [60, 84, 98], [10, 92, 26], [77, 76, 31], [69, 35, 99], [98, 79, 45]]) == 6\nassert solution.longestIncreasingPath([[87, 24, 81], [68, 84, 41], [13, 9, 76], [16, 29, 67], [12, 22, 39], [58, 97, 72], [53, 28, 69], [16, 36, 56], [71, 66, 40]]) == 6\nassert solution.longestIncreasingPath([[100, 48, 55, 70, 3, 27, 6, 58], [13, 58, 74, 97, 80, 31, 97, 82]]) == 5\nassert solution.longestIncreasingPath([[71, 44], [8, 60], [28, 14]]) == 2\nassert solution.longestIncreasingPath([[33, 49, 87], [48, 7, 38], [14, 32, 27], [59, 41, 13], [51, 2, 30], [25, 74, 61]]) == 5\nassert solution.longestIncreasingPath([[14, 23, 11, 67, 36], [62, 90, 98, 19, 3], [27, 68, 83, 1, 46], [1, 47, 43, 92, 50], [8, 78, 90, 6, 81]]) == 5\nassert solution.longestIncreasingPath([[4], [8], [25], [55], [69]]) == 5\nassert solution.longestIncreasingPath([[65, 39], [87, 87], [74, 13], [4, 78], [52, 7], [83, 11], [53, 34], [38, 14], [61, 91]]) == 5\nassert solution.longestIncreasingPath([[12, 74, 13, 40, 63, 27, 69, 91], [54, 60, 89, 91, 8, 36, 79, 43], [76, 2, 91, 4, 72, 33, 83, 88], [5, 81, 18, 20, 43, 17, 41, 77], [19, 100, 42, 30, 64, 72, 61, 55]]) == 6\nassert solution.longestIncreasingPath([[50, 78, 33, 76, 28, 22, 80, 56], [88, 99, 4, 3, 40, 83, 88, 41], [68, 39, 81, 87, 27, 9, 23, 44], [47, 19, 30, 70, 12, 26, 48, 8], [56, 33, 25, 37, 23, 38, 87, 43], [92, 99, 50, 85, 17, 39, 70, 100], [32, 60, 44, 90, 30, 44, 78, 75]]) == 6\nassert solution.longestIncreasingPath([[31, 72, 99, 96, 83, 38], [34, 19, 73, 15, 2, 65], [63, 58, 63, 13, 61, 44], [7, 26, 14, 43, 62, 11], [52, 100, 22, 93, 15, 8], [91, 97, 69, 24, 67, 26], [30, 52, 85, 75, 25, 72]]) == 6\nassert solution.longestIncreasingPath([[17, 74, 37, 51, 91, 8, 22], [40, 7, 98, 57, 44, 34, 26], [79, 30, 48, 13, 37, 95, 53], [40, 78, 44, 12, 88, 39, 94], [79, 1, 31, 47, 38, 63, 30], [66, 13, 76, 36, 13, 54, 44]]) == 7\nassert solution.longestIncreasingPath([[16, 10, 98, 19, 60, 0, 99, 68], [75, 75, 5, 53, 22, 93, 80, 61], [2, 0, 97, 89, 27, 29, 15, 79], [43, 76, 50, 39, 25, 70, 65, 19], [68, 36, 68, 47, 44, 35, 74, 0], [43, 10, 13, 11, 13, 75, 71, 88], [97, 67, 35, 49, 20, 61, 92, 54], [79, 57, 24, 66, 16, 17, 9, 13]]) == 5\nassert solution.longestIncreasingPath([[3, 68, 37, 81, 5, 30], [13, 48, 76, 97, 1, 44], [89, 45, 63, 68, 43, 48]]) == 5\nassert solution.longestIncreasingPath([[79, 37, 0, 6, 83, 2], [14, 23, 18, 3, 45, 43], [67, 77, 64, 28, 77, 50], [64, 14, 53, 88, 7, 48], [17, 62, 46, 3, 88, 72]]) == 5\nassert solution.longestIncreasingPath([[72, 83, 49, 59, 30, 1, 91], [41, 60, 55, 36, 97, 44, 76], [78, 83, 24, 66, 45, 88, 11], [65, 96, 60, 49, 76, 50, 60], [65, 76, 95, 94, 58, 22, 36], [78, 15, 2, 74, 32, 42, 20], [54, 45, 96, 92, 37, 86, 40], [99, 81, 87, 33, 75, 42, 92], [55, 16, 73, 88, 65, 16, 66], [23, 85, 29, 56, 86, 29, 53]]) == 6\nassert solution.longestIncreasingPath([[79, 35], [58, 8], [76, 32], [45, 2], [94, 60], [35, 18], [7, 78]]) == 3\nassert solution.longestIncreasingPath([[76, 37, 9, 94, 97, 34]]) == 3\nassert solution.longestIncreasingPath([[71, 92, 14, 60, 12, 75, 35, 37, 60], [24, 3, 0, 14, 97, 76, 16, 31, 86], [55, 12, 22, 24, 94, 39, 57, 79, 67]]) == 7\nassert solution.longestIncreasingPath([[78, 55, 48, 80, 58, 100]]) == 3\nassert solution.longestIncreasingPath([[9, 56, 75]]) == 3\nassert solution.longestIncreasingPath([[23, 23, 83, 27, 8, 54, 10], [41, 30, 57, 3, 57, 89, 6], [26, 100, 57, 19, 82, 87, 68], [91, 100, 24, 35, 39, 31, 17]]) == 7\nassert solution.longestIncreasingPath([[24, 64, 54, 38, 15, 77, 90]]) == 4\nassert solution.longestIncreasingPath([[92, 24], [8, 47], [49, 92], [5, 51], [82, 74], [38, 65], [78, 85]]) == 4\nassert solution.longestIncreasingPath([[86, 97, 66, 99, 60, 67, 75, 32, 83], [32, 8, 24, 38, 16, 34, 12, 90, 91], [9, 83, 80, 24, 30, 65, 35, 11, 4], [48, 44, 62, 66, 27, 43, 92, 36, 80], [98, 26, 34, 53, 41, 98, 34, 4, 20], [5, 77, 0, 92, 94, 0, 65, 79, 8], [88, 38, 94, 52, 69, 52, 52, 25, 31], [92, 45, 43, 0, 92, 14, 36, 81, 8], [33, 50, 2, 53, 93, 24, 39, 48, 56]]) == 5\nassert solution.longestIncreasingPath([[8, 93, 86, 79, 40, 16, 44, 59], [0, 36, 28, 74, 67, 90, 23, 21], [69, 15, 66, 92, 18, 50, 60, 48], [38, 11, 24, 48, 31, 75, 53, 41], [32, 50, 40, 29, 92, 21, 30, 56], [97, 81, 35, 38, 5, 79, 17, 90]]) == 7\nassert solution.longestIncreasingPath([[70, 44, 82, 37, 48], [53, 89, 48, 78, 80], [6, 11, 86, 71, 12], [46, 50, 30, 87, 72], [58, 86, 46, 47, 3], [14, 89, 47, 17, 42], [14, 83, 24, 80, 58], [86, 58, 59, 48, 71], [61, 6, 85, 28, 38], [83, 42, 85, 61, 3]]) == 5\nassert solution.longestIncreasingPath([[10, 1, 35, 36, 64, 72, 3, 3], [61, 66, 20, 53, 22, 45, 54, 8]]) == 5\nassert solution.longestIncreasingPath([[33, 4, 5], [73, 82, 10]]) == 4\nassert solution.longestIncreasingPath([[81, 23, 82, 84, 51], [4, 4, 97, 30, 61], [74, 55, 77, 48, 32], [96, 86, 43, 46, 34], [83, 36, 61, 77, 67], [65, 89, 2, 60, 59], [37, 1, 85, 47, 30], [6, 66, 86, 43, 59], [97, 59, 72, 44, 18]]) == 6\nassert solution.longestIncreasingPath([[6, 32], [6, 51], [36, 60], [94, 11], [63, 25], [50, 7], [95, 22], [77, 39]]) == 5",
  "inefficient_solution": "class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        m, n = len(matrix), len(matrix[0])\n        memo = [[{} for _ in range(n)] for _ in range(m)]\n        result = 0\n\n        for i in range(m):\n            for j in range(n):\n                visited = set()\n                paths = self.dfs(i, j, matrix, memo, visited)\n                result = max(result, len(paths))\n\n        return result\n\n    def dfs(self, i: int, j: int, matrix: List[List[int]], memo: List[List[Dict[int, int]]], visited: Set[Tuple[int, int]]) -> List[int]:\n        if (i, j) in visited:\n            return []\n\n        visited.add((i, j))\n        paths = []\n\n        for a, b in [(-1, 0), (0, -1), (1, 0), (0, 1)]:\n            x, y = i + a, j + b\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] > matrix[i][j]:\n                paths.extend(self.dfs(x, y, matrix, memo, visited))\n\n        paths.append(matrix[i][j])\n        memo[i][j] = paths\n        visited.remove((i, j))\n        return paths",
  "is_python": true
}