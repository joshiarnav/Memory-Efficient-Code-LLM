{
  "problem_idx": 1359,
  "task_name": "Count All Valid Pickup and Delivery Options",
  "markdown_description": "\nGiven `n` orders, each order consists of a pickup and a delivery service.\n\n\nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of\u00a0pickup(i).\u00a0\n\n\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a010^9 + 7.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 1\n**Explanation:** Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 6\n**Explanation:** All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 3\n**Output:** 90\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 500`\n\n\n",
  "canonical_solution": "class Solution:\n    def countOrders(self, n: int) -> int:\n        mod = 10**9 + 7\n        f = 1\n        for i in range(2, n + 1):\n            f = (f * i * (2 * i - 1)) % mod\n        return f\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countOrders(self, n: int) -> int:\n        mod = 10**9 + 7\n        f = 1\n        for i in range(2, n + 1):\n            f = (f * i * (2 * i - 1)) % mod\n        return f\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random input\n    n = random.randint(1, 50)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countOrders(n)\n\n    return n, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countOrders(n) == expected_result\n        print(f\"assert solution.countOrders({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countOrders({n}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countOrders(25) == 586091532\nassert solution.countOrders(5) == 113400\nassert solution.countOrders(42) == 92943393\nassert solution.countOrders(21) == 612965887\nassert solution.countOrders(13) == 951594128\nassert solution.countOrders(5) == 113400\nassert solution.countOrders(35) == 759432157\nassert solution.countOrders(39) == 679164517\nassert solution.countOrders(3) == 90\nassert solution.countOrders(21) == 612965887\nassert solution.countOrders(32) == 334868393\nassert solution.countOrders(5) == 113400\nassert solution.countOrders(3) == 90\nassert solution.countOrders(28) == 730986269\nassert solution.countOrders(36) == 108579705\nassert solution.countOrders(5) == 113400\nassert solution.countOrders(2) == 6\nassert solution.countOrders(25) == 586091532\nassert solution.countOrders(7) == 681080400\nassert solution.countOrders(17) == 416457700\nassert solution.countOrders(28) == 730986269\nassert solution.countOrders(17) == 416457700\nassert solution.countOrders(12) == 67543367\nassert solution.countOrders(9) == 636056472\nassert solution.countOrders(48) == 92490731\nassert solution.countOrders(44) == 603113806\nassert solution.countOrders(24) == 673131508\nassert solution.countOrders(3) == 90\nassert solution.countOrders(14) == 702577871\nassert solution.countOrders(39) == 679164517\nassert solution.countOrders(42) == 92943393\nassert solution.countOrders(44) == 603113806\nassert solution.countOrders(33) == 292697959\nassert solution.countOrders(42) == 92943393\nassert solution.countOrders(22) == 865725049\nassert solution.countOrders(10) == 850728840\nassert solution.countOrders(13) == 951594128\nassert solution.countOrders(7) == 681080400\nassert solution.countOrders(16) == 200385844\nassert solution.countOrders(35) == 759432157\nassert solution.countOrders(44) == 603113806\nassert solution.countOrders(44) == 603113806\nassert solution.countOrders(5) == 113400\nassert solution.countOrders(11) == 518360668\nassert solution.countOrders(20) == 580270580\nassert solution.countOrders(41) == 890732348\nassert solution.countOrders(43) == 708099042\nassert solution.countOrders(34) == 765945940\nassert solution.countOrders(30) == 920731808\nassert solution.countOrders(40) == 159858698\nassert solution.countOrders(31) == 103836741\nassert solution.countOrders(27) == 190734408\nassert solution.countOrders(27) == 190734408\nassert solution.countOrders(37) == 273781154\nassert solution.countOrders(19) == 949461892\nassert solution.countOrders(36) == 108579705\nassert solution.countOrders(45) == 470776125\nassert solution.countOrders(18) == 368349166\nassert solution.countOrders(5) == 113400\nassert solution.countOrders(50) == 784760423\nassert solution.countOrders(31) == 103836741\nassert solution.countOrders(40) == 159858698\nassert solution.countOrders(8) == 729647433\nassert solution.countOrders(16) == 200385844\nassert solution.countOrders(1) == 1\nassert solution.countOrders(27) == 190734408\nassert solution.countOrders(42) == 92943393\nassert solution.countOrders(39) == 679164517\nassert solution.countOrders(6) == 7484400\nassert solution.countOrders(4) == 2520\nassert solution.countOrders(28) == 730986269\nassert solution.countOrders(26) == 157365993\nassert solution.countOrders(12) == 67543367\nassert solution.countOrders(9) == 636056472\nassert solution.countOrders(17) == 416457700\nassert solution.countOrders(42) == 92943393\nassert solution.countOrders(7) == 681080400\nassert solution.countOrders(38) == 276283440\nassert solution.countOrders(39) == 679164517\nassert solution.countOrders(17) == 416457700\nassert solution.countOrders(36) == 108579705\nassert solution.countOrders(12) == 67543367\nassert solution.countOrders(40) == 159858698\nassert solution.countOrders(39) == 679164517\nassert solution.countOrders(22) == 865725049\nassert solution.countOrders(40) == 159858698\nassert solution.countOrders(11) == 518360668\nassert solution.countOrders(50) == 784760423\nassert solution.countOrders(47) == 523485199\nassert solution.countOrders(32) == 334868393\nassert solution.countOrders(20) == 580270580\nassert solution.countOrders(28) == 730986269\nassert solution.countOrders(15) == 621371750\nassert solution.countOrders(24) == 673131508\nassert solution.countOrders(37) == 273781154\nassert solution.countOrders(27) == 190734408\nassert solution.countOrders(5) == 113400\nassert solution.countOrders(44) == 603113806\nassert solution.countOrders(23) == 25419443\nassert solution.countOrders(5) == 113400",
  "inefficient_solution": "class Solution:\n    def countOrders(self, n: int) -> int:\n        mod = 10**9 + 7\n        f = [0] * (n + 1)\n        f[1] = 1\n        for i in range(2, n + 1):\n            g = [0] * (2 * i + 1)\n            for j in range(2 * i + 1):\n                for k in range(2 * i - 1, -1, -1):\n                    if j - k >= 0:\n                        g[j] += f[k]\n            f[i] = sum(g) % mod\n        return f[n]",
  "is_python": true
}