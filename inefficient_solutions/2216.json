{
  "problem_idx": 2216,
  "task_name": "Minimum Deletions to Make Array Beautiful",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`. The array `nums` is **beautiful** if:\n\n\n* `nums.length` is even.\n* `nums[i] != nums[i + 1]` for all `i % 2 == 0`.\n\n\nNote that an empty array is considered beautiful.\n\n\nYou can delete any number of elements from `nums`. When you delete an element, all the elements to the right of the deleted element will be **shifted one unit to the left** to fill the gap created and all the elements to the left of the deleted element will remain **unchanged**.\n\n\nReturn *the **minimum** number of elements to delete from* `nums` *to make it* *beautiful.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,2,3,5]\n**Output:** 1\n**Explanation:** You can delete either nums[0] or nums[1] to make nums = [1,2,3,5] which is beautiful. It can be proven you need at least 1 deletion to make nums beautiful.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,2,2,3,3]\n**Output:** 2\n**Explanation:** You can delete nums[0] and nums[5] to make nums = [1,2,2,3] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n        n = len(nums)\n        i = ans = 0\n        while i < n - 1:\n            if nums[i] == nums[i + 1]:\n                ans += 1\n                i += 1\n            else:\n                i += 2\n        ans += (n - ans) % 2\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n        n = len(nums)\n        i = ans = 0\n        while i < n - 1:\n            if nums[i] == nums[i + 1]:\n                ans += 1\n                i += 1\n            else:\n                i += 2\n        ans += (n - ans) % 2\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random list of integers\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minDeletion(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minDeletion(nums) == expected_result\n        print(f\"assert solution.minDeletion({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minDeletion({nums}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minDeletion([44, 74, 83, 27, 6]) == 1\nassert solution.minDeletion([4, 25]) == 0\nassert solution.minDeletion([100, 50, 96]) == 1\nassert solution.minDeletion([56, 53, 27, 38, 22, 8, 11, 12, 20, 88]) == 0\nassert solution.minDeletion([76, 25, 74, 51]) == 0\nassert solution.minDeletion([72, 62, 53, 34, 90, 12, 28]) == 1\nassert solution.minDeletion([25, 37, 11, 6, 73, 1, 89, 18]) == 0\nassert solution.minDeletion([23, 85, 75, 89]) == 0\nassert solution.minDeletion([2, 12, 20, 34, 17, 100, 14]) == 1\nassert solution.minDeletion([40, 90, 71, 29, 89, 43, 28, 10]) == 0\nassert solution.minDeletion([9, 25, 71, 82, 67, 59]) == 0\nassert solution.minDeletion([32, 89, 59, 72, 93, 52, 14, 60, 1, 86]) == 0\nassert solution.minDeletion([19, 66, 12, 67, 24, 56, 1, 74, 4]) == 1\nassert solution.minDeletion([10, 99]) == 0\nassert solution.minDeletion([96, 66, 12, 46, 7, 61, 91]) == 1\nassert solution.minDeletion([75, 80]) == 0\nassert solution.minDeletion([14, 93, 1, 7, 89, 68]) == 0\nassert solution.minDeletion([49, 29, 44]) == 1\nassert solution.minDeletion([29, 3, 28, 46, 86, 31, 12]) == 1\nassert solution.minDeletion([76, 25, 99, 53, 35, 22, 58, 24, 71, 6]) == 0\nassert solution.minDeletion([32, 91, 56, 65]) == 0\nassert solution.minDeletion([2, 94]) == 0\nassert solution.minDeletion([7, 41, 68, 11]) == 0\nassert solution.minDeletion([54, 1]) == 0\nassert solution.minDeletion([79, 16, 45, 4, 89, 67, 75, 19, 50, 56]) == 0\nassert solution.minDeletion([92, 82, 95, 69, 70, 49, 60, 59, 31]) == 1\nassert solution.minDeletion([8, 43, 15, 23, 55, 26]) == 0\nassert solution.minDeletion([67, 2, 24, 96, 88, 70, 76, 15]) == 0\nassert solution.minDeletion([95, 28, 38]) == 1\nassert solution.minDeletion([12, 46, 22]) == 1\nassert solution.minDeletion([85, 22, 23, 25, 4, 100, 50, 64, 41, 53]) == 0\nassert solution.minDeletion([88, 19, 97, 82, 66, 91, 76, 10]) == 0\nassert solution.minDeletion([51, 23, 46]) == 1\nassert solution.minDeletion([61, 34, 43, 45, 62, 21, 50]) == 1\nassert solution.minDeletion([23, 48, 86, 15, 37, 98, 44, 17, 72, 53]) == 0\nassert solution.minDeletion([87, 23, 32, 9, 70, 50]) == 0\nassert solution.minDeletion([27, 3, 24]) == 1\nassert solution.minDeletion([35, 20, 27, 42, 75, 37, 14, 82, 59, 61]) == 0\nassert solution.minDeletion([13, 92, 71, 28]) == 0\nassert solution.minDeletion([95, 31, 72]) == 1\nassert solution.minDeletion([59, 85, 28]) == 1\nassert solution.minDeletion([30, 59, 78, 17, 54, 92, 10, 95, 81]) == 1\nassert solution.minDeletion([58, 83, 53, 28, 34, 94]) == 0\nassert solution.minDeletion([33, 8, 18]) == 1\nassert solution.minDeletion([21, 59, 93, 58, 52, 33, 1, 25, 44, 4]) == 0\nassert solution.minDeletion([69, 27, 78]) == 1\nassert solution.minDeletion([1, 47, 74, 86, 6, 98, 61, 66, 31]) == 1\nassert solution.minDeletion([85, 37, 79, 22, 11, 76, 33]) == 1\nassert solution.minDeletion([57, 11, 2, 84, 33, 55, 49, 68, 53, 6]) == 0\nassert solution.minDeletion([73, 8, 94, 88, 54, 99, 67, 25, 3, 35]) == 0\nassert solution.minDeletion([31, 89, 73, 28, 95, 7, 77, 94, 42]) == 1\nassert solution.minDeletion([52, 95, 85, 74, 42, 37, 97, 84]) == 0\nassert solution.minDeletion([44, 75, 52, 9, 51]) == 1\nassert solution.minDeletion([11, 32, 87, 83, 7, 90, 49, 58]) == 0\nassert solution.minDeletion([67, 4]) == 0\nassert solution.minDeletion([87, 18, 12, 79]) == 0\nassert solution.minDeletion([7, 32, 92, 24, 45]) == 1\nassert solution.minDeletion([63, 37]) == 0\nassert solution.minDeletion([55, 12, 19, 40, 63, 89]) == 0\nassert solution.minDeletion([99, 22, 10, 74, 56, 18, 75, 39, 88]) == 1\nassert solution.minDeletion([68, 59, 97, 93, 63, 57]) == 0\nassert solution.minDeletion([85, 84, 25, 28, 55, 62, 68]) == 1\nassert solution.minDeletion([91, 29, 78, 99, 80, 74, 71, 11]) == 0\nassert solution.minDeletion([100, 48, 30]) == 1\nassert solution.minDeletion([78, 2, 70, 73, 25, 59, 100, 5, 15]) == 1\nassert solution.minDeletion([92, 79, 86]) == 1\nassert solution.minDeletion([49, 53, 27, 58, 78]) == 1\nassert solution.minDeletion([56, 49, 11, 52, 88, 57]) == 0\nassert solution.minDeletion([49, 100, 68, 27, 51, 60, 9, 58, 26, 91]) == 0\nassert solution.minDeletion([57, 75, 44, 90]) == 0\nassert solution.minDeletion([84, 56, 8, 20]) == 0\nassert solution.minDeletion([26, 73, 7]) == 1\nassert solution.minDeletion([25, 65, 26, 32, 6, 14, 89, 27, 40, 24]) == 0\nassert solution.minDeletion([87, 12, 29, 61, 51, 99, 2]) == 1\nassert solution.minDeletion([24, 57, 15, 38]) == 0\nassert solution.minDeletion([54, 76, 96, 41, 14, 67, 85, 63]) == 0\nassert solution.minDeletion([59, 44, 13, 49, 41, 11, 72]) == 1\nassert solution.minDeletion([41, 97, 47, 42, 67, 28]) == 0\nassert solution.minDeletion([74, 46, 62, 52, 91, 75]) == 0\nassert solution.minDeletion([89, 11, 45, 66, 73, 39, 48, 18, 80]) == 1\nassert solution.minDeletion([44, 83, 51, 39, 65, 49, 58, 97, 76]) == 1\nassert solution.minDeletion([79, 26, 6, 72, 69, 42, 48, 23, 35]) == 1\nassert solution.minDeletion([55, 69, 85, 20, 71, 25]) == 0\nassert solution.minDeletion([3, 18, 9, 86]) == 0\nassert solution.minDeletion([24, 30, 76, 82, 42]) == 1\nassert solution.minDeletion([32, 53, 95, 26, 73]) == 1\nassert solution.minDeletion([23, 66, 72, 43, 80, 67, 40, 93, 2, 8]) == 0\nassert solution.minDeletion([30, 93, 82, 59, 8, 68, 50, 53, 88]) == 1\nassert solution.minDeletion([88, 16, 8, 97, 48, 34, 24, 13, 51, 99]) == 0\nassert solution.minDeletion([49, 90, 92, 38, 16, 88, 6, 46]) == 0\nassert solution.minDeletion([26, 38, 2, 8, 60, 99, 31]) == 1\nassert solution.minDeletion([42, 7, 33, 20, 31, 50, 63, 10]) == 0\nassert solution.minDeletion([49, 37, 32, 21, 78, 62, 17, 40, 56]) == 1\nassert solution.minDeletion([26, 53, 12, 95, 75, 11, 98, 22, 55]) == 1\nassert solution.minDeletion([59, 15, 74, 8, 19, 24, 14, 3, 49]) == 1\nassert solution.minDeletion([34, 89, 65, 37, 17, 78]) == 0\nassert solution.minDeletion([61, 29, 42, 68, 6, 32, 56]) == 1\nassert solution.minDeletion([90, 39, 47, 79, 15, 58, 53]) == 1\nassert solution.minDeletion([97, 37, 95, 51, 68]) == 1\nassert solution.minDeletion([28, 36, 22, 89, 61, 79, 97]) == 1",
  "inefficient_solution": "class Solution:\n    def minDeletion(self, nums: List[int]) -> int:\n        n = len(nums)\n        pairs = []\n        for i in range(0, n, 2):\n            if i == n - 1 or nums[i] != nums[i + 1]:\n                pairs.append((nums[i], 1))\n            else:\n                pairs.append((nums[i], 2))\n        pairs.sort()\n        ans = 0\n        for pair in pairs:\n            if pair[1] > 1:\n                ans += pair[1] - 1\n        return ans + (n - ans) % 2",
  "is_python": true
}