{
  "problem_idx": 2179,
  "task_name": "Count Good Triplets in an Array",
  "markdown_description": "\nYou are given two **0-indexed** arrays `nums1` and `nums2` of length `n`, both of which are **permutations** of `[0, 1, ..., n - 1]`.\n\n\nA **good triplet** is a set of `3` **distinct** values which are present in **increasing order** by position both in `nums1` and `nums2`. In other words, if we consider `pos1v` as the index of the value `v` in `nums1` and `pos2v` as the index of the value `v` in `nums2`, then a good triplet will be a set `(x, y, z)` where `0 <= x, y, z <= n - 1`, such that `pos1x < pos1y < pos1z` and `pos2x < pos2y < pos2z`.\n\n\nReturn *the **total number** of good triplets*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,0,1,3], nums2 = [0,1,2,3]\n**Output:** 1\n**Explanation:** \nThere are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). \nOut of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]\n**Output:** 4\n**Explanation:** The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `3 <= n <= 105`\n* `0 <= nums1[i], nums2[i] <= n - 1`\n* `nums1` and `nums2` are permutations of `[0, 1, ..., n - 1]`.\n\n\n",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x > 0:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        pos = {v: i for i, v in enumerate(nums2, 1)}\n        ans = 0\n        n = len(nums1)\n        tree = BinaryIndexedTree(n)\n        for num in nums1:\n            p = pos[num]\n            left = tree.query(p)\n            right = n - p - (tree.query(n) - tree.query(p))\n            ans += left * right\n            tree.update(p, 1)\n        return ans\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\nclass BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x > 0:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        pos = {v: i for i, v in enumerate(nums2, 1)}\n        ans = 0\n        n = len(nums1)\n        tree = BinaryIndexedTree(n)\n        for num in nums1:\n            p = pos[num]\n            left = tree.query(p)\n            right = n - p - (tree.query(n) - tree.query(p))\n            ans += left * right\n            tree.update(p, 1)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random arrays\n    n = random.randint(3, 10)\n    nums1 = random.sample(range(n), n)\n    nums2 = random.sample(range(n), n)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.goodTriplets(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.goodTriplets(nums1, nums2) == expected_result\n        print(f\"assert solution.goodTriplets({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.goodTriplets({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.goodTriplets([3, 1, 2, 0], [2, 1, 3, 0]) == 0\nassert solution.goodTriplets([1, 3, 2, 0, 4], [3, 4, 0, 2, 1]) == 0\nassert solution.goodTriplets([9, 0, 4, 5, 3, 6, 1, 2, 7, 8], [1, 8, 5, 9, 3, 0, 4, 2, 7, 6]) == 22\nassert solution.goodTriplets([2, 6, 4, 1, 5, 0, 3], [6, 2, 0, 1, 4, 5, 3]) == 14\nassert solution.goodTriplets([8, 0, 3, 4, 1, 7, 5, 6, 2], [8, 5, 2, 4, 3, 6, 1, 7, 0]) == 11\nassert solution.goodTriplets([5, 4, 2, 0, 3, 1], [4, 5, 0, 1, 2, 3]) == 6\nassert solution.goodTriplets([5, 7, 3, 8, 6, 0, 1, 2, 9, 4], [5, 7, 0, 2, 3, 4, 9, 1, 6, 8]) == 32\nassert solution.goodTriplets([0, 6, 7, 2, 1, 3, 9, 5, 8, 4], [1, 4, 3, 2, 8, 6, 5, 0, 9, 7]) == 3\nassert solution.goodTriplets([4, 3, 7, 2, 1, 6, 5, 0], [4, 6, 0, 7, 5, 2, 3, 1]) == 8\nassert solution.goodTriplets([2, 4, 0, 1, 3], [0, 1, 4, 2, 3]) == 1\nassert solution.goodTriplets([5, 0, 3, 2, 4, 1], [5, 0, 2, 1, 3, 4]) == 10\nassert solution.goodTriplets([0, 2, 1], [1, 0, 2]) == 0\nassert solution.goodTriplets([3, 1, 2, 4, 0], [0, 4, 1, 3, 2]) == 0\nassert solution.goodTriplets([0, 2, 1, 3], [0, 3, 1, 2]) == 0\nassert solution.goodTriplets([6, 2, 4, 3, 7, 1, 0, 5], [7, 4, 0, 2, 5, 6, 1, 3]) == 2\nassert solution.goodTriplets([2, 3, 4, 9, 6, 8, 0, 1, 5, 7], [2, 4, 0, 7, 8, 3, 1, 6, 5, 9]) == 29\nassert solution.goodTriplets([5, 1, 3, 0, 4, 6, 2], [5, 6, 4, 3, 1, 0, 2]) == 9\nassert solution.goodTriplets([1, 0, 2], [0, 2, 1]) == 0\nassert solution.goodTriplets([4, 0, 1, 3, 2], [4, 1, 3, 0, 2]) == 5\nassert solution.goodTriplets([3, 0, 2, 6, 5, 9, 7, 8, 1, 4], [0, 7, 1, 5, 9, 6, 4, 2, 8, 3]) == 15\nassert solution.goodTriplets([2, 0, 3, 1], [3, 2, 1, 0]) == 0\nassert solution.goodTriplets([1, 2, 5, 6, 0, 4, 7, 8, 3], [8, 2, 3, 5, 0, 4, 1, 7, 6]) == 11\nassert solution.goodTriplets([1, 4, 5, 0, 3, 2], [5, 3, 0, 4, 2, 1]) == 2\nassert solution.goodTriplets([1, 4, 3, 2, 0], [1, 2, 3, 0, 4]) == 2\nassert solution.goodTriplets([0, 2, 1, 3], [1, 3, 0, 2]) == 0\nassert solution.goodTriplets([6, 4, 0, 2, 9, 8, 3, 7, 5, 1], [0, 7, 9, 6, 1, 5, 8, 4, 2, 3]) == 14\nassert solution.goodTriplets([5, 7, 2, 6, 1, 8, 0, 3, 4, 9], [7, 9, 5, 8, 6, 3, 4, 0, 2, 1]) == 20\nassert solution.goodTriplets([0, 3, 8, 1, 6, 7, 2, 4, 5], [5, 4, 7, 6, 3, 8, 2, 1, 0]) == 2\nassert solution.goodTriplets([1, 2, 0], [2, 1, 0]) == 0\nassert solution.goodTriplets([3, 4, 5, 2, 0, 1], [2, 5, 0, 3, 1, 4]) == 2\nassert solution.goodTriplets([5, 0, 1, 3, 2, 4], [1, 0, 5, 4, 2, 3]) == 0\nassert solution.goodTriplets([2, 4, 6, 0, 5, 3, 1], [0, 4, 6, 2, 3, 5, 1]) == 11\nassert solution.goodTriplets([1, 0, 2], [1, 0, 2]) == 1\nassert solution.goodTriplets([9, 4, 6, 3, 8, 0, 1, 5, 2, 7], [2, 7, 0, 8, 1, 6, 3, 9, 4, 5]) == 4\nassert solution.goodTriplets([4, 3, 0, 2, 5, 1], [0, 3, 4, 5, 2, 1]) == 6\nassert solution.goodTriplets([7, 4, 3, 1, 8, 2, 5, 0, 6], [6, 1, 7, 2, 8, 3, 0, 5, 4]) == 10\nassert solution.goodTriplets([4, 3, 1, 0, 2, 6, 5], [4, 1, 5, 3, 2, 0, 6]) == 13\nassert solution.goodTriplets([6, 2, 7, 3, 4, 1, 0, 5], [2, 4, 5, 7, 1, 3, 0, 6]) == 11\nassert solution.goodTriplets([0, 4, 1, 3, 2], [3, 1, 2, 0, 4]) == 0\nassert solution.goodTriplets([0, 2, 3, 5, 4, 7, 1, 6], [4, 7, 3, 2, 5, 0, 1, 6]) == 12\nassert solution.goodTriplets([0, 1, 2], [2, 0, 1]) == 0\nassert solution.goodTriplets([6, 4, 2, 3, 0, 5, 1], [1, 6, 3, 0, 2, 5, 4]) == 5\nassert solution.goodTriplets([2, 4, 0, 3, 1], [4, 2, 1, 0, 3]) == 2\nassert solution.goodTriplets([4, 5, 1, 2, 3, 0], [3, 2, 5, 4, 0, 1]) == 0\nassert solution.goodTriplets([4, 2, 1, 5, 0, 3], [0, 4, 3, 5, 2, 1]) == 1\nassert solution.goodTriplets([5, 3, 4, 9, 6, 7, 2, 1, 8, 0], [8, 9, 5, 2, 6, 0, 3, 7, 4, 1]) == 19\nassert solution.goodTriplets([1, 2, 3, 0], [2, 0, 1, 3]) == 0\nassert solution.goodTriplets([3, 0, 1, 4, 2, 5], [4, 0, 5, 2, 1, 3]) == 0\nassert solution.goodTriplets([4, 5, 0, 2, 6, 3, 1], [5, 0, 1, 6, 2, 3, 4]) == 8\nassert solution.goodTriplets([0, 6, 1, 7, 2, 8, 5, 3, 4], [6, 8, 2, 4, 0, 3, 1, 7, 5]) == 13\nassert solution.goodTriplets([0, 2, 3, 4, 1, 6, 7, 5, 8], [2, 5, 6, 3, 0, 8, 1, 7, 4]) == 10\nassert solution.goodTriplets([1, 4, 0, 3, 2], [1, 0, 3, 4, 2]) == 5\nassert solution.goodTriplets([0, 2, 1, 3, 4], [2, 4, 0, 3, 1]) == 0\nassert solution.goodTriplets([4, 0, 5, 7, 8, 3, 2, 1, 6], [5, 1, 4, 8, 2, 3, 0, 6, 7]) == 15\nassert solution.goodTriplets([5, 1, 2, 3, 4, 0], [3, 1, 2, 5, 0, 4]) == 2\nassert solution.goodTriplets([2, 5, 0, 6, 4, 3, 1], [1, 6, 4, 5, 0, 3, 2]) == 2\nassert solution.goodTriplets([1, 7, 6, 8, 4, 5, 3, 0, 2], [7, 6, 1, 4, 8, 3, 2, 5, 0]) == 45\nassert solution.goodTriplets([0, 4, 1, 6, 8, 5, 7, 3, 2], [5, 0, 3, 2, 4, 7, 8, 6, 1]) == 6\nassert solution.goodTriplets([3, 2, 5, 0, 1, 4], [0, 3, 4, 1, 2, 5]) == 1\nassert solution.goodTriplets([3, 0, 2, 4, 1, 5, 6], [4, 6, 0, 1, 5, 3, 2]) == 2\nassert solution.goodTriplets([5, 3, 6, 4, 0, 2, 7, 8, 1], [3, 5, 0, 1, 6, 7, 4, 8, 2]) == 26\nassert solution.goodTriplets([3, 4, 1, 5, 0, 2], [3, 1, 5, 4, 2, 0]) == 9\nassert solution.goodTriplets([0, 1, 5, 2, 7, 8, 6, 3, 4, 9], [8, 4, 5, 3, 7, 9, 6, 0, 2, 1]) == 5\nassert solution.goodTriplets([2, 1, 4, 0, 3], [1, 3, 4, 2, 0]) == 1\nassert solution.goodTriplets([3, 0, 2, 1], [0, 3, 1, 2]) == 0\nassert solution.goodTriplets([1, 7, 4, 0, 8, 9, 5, 2, 6, 3], [5, 9, 6, 4, 3, 8, 0, 1, 2, 7]) == 4\nassert solution.goodTriplets([4, 3, 2, 1, 5, 0, 6], [6, 0, 2, 4, 5, 3, 1]) == 1\nassert solution.goodTriplets([1, 0, 2], [2, 0, 1]) == 0\nassert solution.goodTriplets([3, 5, 2, 6, 0, 4, 1], [6, 5, 2, 4, 0, 1, 3]) == 9\nassert solution.goodTriplets([1, 0, 2], [0, 1, 2]) == 0\nassert solution.goodTriplets([5, 4, 1, 0, 2, 3], [5, 0, 2, 1, 4, 3]) == 6\nassert solution.goodTriplets([6, 5, 2, 8, 4, 7, 1, 3, 0], [3, 5, 8, 6, 0, 2, 4, 7, 1]) == 23\nassert solution.goodTriplets([5, 3, 2, 0, 4, 1], [5, 2, 4, 1, 3, 0]) == 6\nassert solution.goodTriplets([0, 1, 3, 2], [0, 2, 1, 3]) == 1\nassert solution.goodTriplets([2, 3, 1, 0], [1, 0, 3, 2]) == 0\nassert solution.goodTriplets([2, 0, 1], [2, 0, 1]) == 1\nassert solution.goodTriplets([1, 3, 4, 5, 0, 6, 2], [2, 3, 5, 4, 1, 0, 6]) == 8\nassert solution.goodTriplets([2, 1, 0, 3], [3, 2, 1, 0]) == 1\nassert solution.goodTriplets([1, 2, 0], [1, 0, 2]) == 0\nassert solution.goodTriplets([1, 2, 0, 4, 3], [3, 0, 4, 2, 1]) == 0\nassert solution.goodTriplets([0, 3, 1, 2, 4], [1, 0, 2, 4, 3]) == 2\nassert solution.goodTriplets([1, 0, 3, 6, 5, 2, 7, 4], [5, 2, 7, 3, 4, 1, 6, 0]) == 4\nassert solution.goodTriplets([0, 1, 2], [1, 2, 0]) == 0\nassert solution.goodTriplets([3, 2, 0, 1], [3, 1, 2, 0]) == 1\nassert solution.goodTriplets([5, 3, 4, 0, 2, 1], [2, 0, 4, 1, 3, 5]) == 0\nassert solution.goodTriplets([5, 4, 0, 2, 6, 3, 1, 7], [5, 2, 7, 0, 3, 1, 4, 6]) == 11\nassert solution.goodTriplets([5, 1, 0, 6, 3, 8, 2, 7, 4, 9], [5, 9, 7, 0, 4, 1, 2, 6, 8, 3]) == 16\nassert solution.goodTriplets([2, 1, 0, 5, 3, 4], [4, 1, 2, 0, 3, 5]) == 4\nassert solution.goodTriplets([1, 0, 2], [1, 2, 0]) == 0\nassert solution.goodTriplets([2, 0, 1], [0, 1, 2]) == 0\nassert solution.goodTriplets([1, 2, 3, 0], [0, 1, 3, 2]) == 0\nassert solution.goodTriplets([4, 2, 0, 5, 1, 3], [0, 4, 5, 2, 1, 3]) == 10\nassert solution.goodTriplets([1, 0, 3, 2], [1, 3, 0, 2]) == 2\nassert solution.goodTriplets([6, 0, 4, 5, 3, 1, 2, 7], [2, 4, 1, 3, 6, 5, 0, 7]) == 5\nassert solution.goodTriplets([4, 1, 3, 6, 5, 0, 2], [4, 0, 5, 6, 2, 3, 1]) == 3\nassert solution.goodTriplets([2, 1, 0, 3], [3, 0, 1, 2]) == 0\nassert solution.goodTriplets([4, 8, 5, 3, 1, 0, 2, 6, 7], [6, 8, 3, 0, 1, 4, 2, 5, 7]) == 19\nassert solution.goodTriplets([5, 6, 0, 1, 3, 2, 4, 7], [7, 5, 0, 6, 3, 4, 2, 1]) == 14\nassert solution.goodTriplets([0, 2, 1], [1, 0, 2]) == 0\nassert solution.goodTriplets([4, 3, 2, 0, 1], [3, 2, 0, 4, 1]) == 4",
  "inefficient_solution": "class Solution:\n    def goodTriplets(self, nums1, nums2):\n        n = len(nums1)\n        res = 0\n        poss = [0] * n\n        for i, num in enumerate(nums2):\n            poss[num] = i\n\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i < j:\n                    dp[j][i] = 1\n                else:\n                    dp[j][i] = 0\n\n        for num in nums1:\n            pos = poss[num]\n            max_pos = n - pos - 1\n            for i in range(n):\n                for j in range(n):\n                    if i < j:\n                        dp[j][i] *= dp[j][pos]\n                        dp[j][i] *= dp[max_pos][i]\n\n            for i in range(n):\n                for j in range(n):\n                    if i < j:\n                        res += dp[j][i]\n\n        return res",
  "is_python": true
}