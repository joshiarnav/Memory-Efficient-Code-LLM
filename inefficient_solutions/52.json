{
  "problem_idx": 52,
  "task_name": "N",
  "markdown_description": "\nThe **n-queens** puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.\n\n\nGiven an integer `n`, return *the number of distinct solutions to the\u00a0**n-queens puzzle***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0052.N-Queens%20II/images/queens.jpg)\n\n```\n\n**Input:** n = 4\n**Output:** 2\n**Explanation:** There are two distinct solutions to the 4-queens puzzle as shown.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 9`\n\n\n",
  "canonical_solution": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        def dfs(i):\n            if i == n:\n                nonlocal ans\n                ans += 1\n                return\n            for j in range(n):\n                a, b = i + j, i - j + n\n                if cols[j] or dg[a] or udg[b]:\n                    continue\n                cols[j] = dg[a] = udg[b] = True\n                dfs(i + 1)\n                cols[j] = dg[a] = udg[b] = False\n\n        cols = [False] * 10\n        dg = [False] * 20\n        udg = [False] * 20\n        ans = 0\n        dfs(0)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def totalNQueens(self, n: int) -> int:\n        def dfs(i):\n            if i == n:\n                nonlocal ans\n                ans += 1\n                return\n            for j in range(n):\n                a, b = i + j, i - j + n\n                if cols[j] or dg[a] or udg[b]:\n                    continue\n                cols[j] = dg[a] = udg[b] = True\n                dfs(i + 1)\n                cols[j] = dg[a] = udg[b] = False\n\n        cols = [False] * 10\n        dg = [False] * 20\n        udg = [False] * 20\n        ans = 0\n        dfs(0)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random value for n\n    n = random.randint(1, 9)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.totalNQueens(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.totalNQueens(n) == expected_result\n        print(f\"assert solution.totalNQueens({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.totalNQueens({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(8) == 92\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(8) == 92\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(8) == 92\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(8) == 92\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(8) == 92\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(3) == 0\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(8) == 92\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(7) == 40\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(8) == 92\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(9) == 352\nassert solution.totalNQueens(5) == 10\nassert solution.totalNQueens(4) == 2\nassert solution.totalNQueens(1) == 1\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(6) == 4\nassert solution.totalNQueens(8) == 92\nassert solution.totalNQueens(2) == 0\nassert solution.totalNQueens(4) == 2",
  "inefficient_solution": "class Solution:\n    def totalNQueens(self, n: int) -> int:\n        def dfs(i, cols, dg, udg, ans):\n            if i == n:\n                ans[0] += 1\n                return\n            for j in range(n):\n                a, b = i + j, i - j + n\n                for k in range(n):\n                    if cols[k] and (k == j or k == a or k == b):\n                        continue\n                cols[j] = dg[a] = udg[b] = True\n                dfs(i + 1, cols[:], dg[:], udg[:], ans)\n                cols[j] = dg[a] = udg[b] = False\n\n        cols = [False] * (n * 10)\n        dg = [False] * (n * 20)\n        udg = [False] * (n * 20)\n        ans = [0]\n        dfs(0, cols, dg, udg, ans)\n        return ans[0]",
  "is_python": true
}