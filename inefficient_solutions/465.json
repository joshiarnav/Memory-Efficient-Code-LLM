{
  "problem_idx": 465,
  "task_name": "Optimal Account Balancing",
  "markdown_description": "\nYou are given an array of transactions `transactions` where `transactions[i] = [fromi, toi, amounti]` indicates that the person with `ID = fromi` gave `amounti`  to the person with `ID = toi`.\n\n\nReturn *the minimum number of transactions required to settle the debt*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** transactions = [[0,1,10],[2,0,5]]\n**Output:** 2\n**Explanation:**\nPerson #0 gave person #1 10.\nPerson #2 gave person #0 5.\nTwo transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 5 each.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** transactions = [[0,1,10],[1,0,1],[1,2,5],[2,0,5]]\n**Output:** 1\n**Explanation:**\nPerson #0 gave person #1 10.\nPerson #1 gave person #0 1.\nPerson #1 gave person #2 5.\nPerson #2 gave person #0 5.\nTherefore, person #1 only need to give person #0 4, and all debt is settled.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= transactions.length <= 8`\n* `transactions[i].length == 3`\n* `0 <= fromi, toi < 12`\n* `fromi != toi`\n* `1 <= amounti <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minTransfers(self, transactions: List[List[int]]) -> int:\n        g = defaultdict(int)\n        for f, t, x in transactions:\n            g[f] -= x\n            g[t] += x\n        nums = [x for x in g.values() if x]\n        m = len(nums)\n        f = [inf] * (1 << m)\n        f[0] = 0\n        for i in range(1, 1 << m):\n            s = 0\n            for j, x in enumerate(nums):\n                if i >> j & 1:\n                    s += x\n            if s == 0:\n                f[i] = i.bit_count() - 1\n                j = (i - 1) & i\n                while j > 0:\n                    f[i] = min(f[i], f[j] + f[i ^ j])\n                    j = (j - 1) & i\n        return f[-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minTransfers(self, transactions: List[List[int]]) -> int:\n        g = defaultdict(int)\n        for f, t, x in transactions:\n            g[f] -= x\n            g[t] += x\n        nums = [x for x in g.values() if x]\n        m = len(nums)\n        f = [inf] * (1 << m)\n        f[0] = 0\n        for i in range(1, 1 << m):\n            s = 0\n            for j, x in enumerate(nums):\n                if i >> j & 1:\n                    s += x\n            if s == 0:\n                f[i] = i.bit_count() - 1\n                j = (i - 1) & i\n                while j > 0:\n                    f[i] = min(f[i], f[j] + f[i ^ j])\n                    j = (j - 1) & i\n        return f[-1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random transactions\n    transactions = []\n    num_transactions = random.randint(1, 9)\n    for i in range(num_transactions):\n        from_i = random.randint(0, 11)\n        to_i = random.randint(0, 11)\n        while to_i == from_i:\n            to_i = random.randint(0, 11)\n        amount_i = random.randint(1, 100)\n        transactions.append([from_i, to_i, amount_i])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minTransfers(transactions)\n\n    return transactions, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        transactions, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minTransfers(transactions) == expected_result\n        print(f\"assert solution.minTransfers({transactions}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minTransfers({transactions}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minTransfers([[4, 2, 21], [9, 8, 85], [9, 6, 2], [9, 8, 61], [1, 3, 41], [8, 3, 100], [4, 3, 43], [5, 2, 92]]) == 7\nassert solution.minTransfers([[5, 1, 78], [9, 2, 81], [10, 1, 63], [7, 5, 44], [2, 7, 89], [4, 9, 24], [1, 9, 91], [4, 7, 13]]) == 5\nassert solution.minTransfers([[4, 3, 56], [3, 5, 94], [6, 2, 27], [10, 2, 97], [4, 11, 24], [5, 2, 19], [5, 0, 36], [8, 0, 67]]) == 8\nassert solution.minTransfers([[5, 2, 43], [4, 0, 38], [5, 8, 15], [10, 5, 8], [9, 3, 91]]) == 5\nassert solution.minTransfers([[6, 2, 74], [1, 9, 9], [3, 2, 93], [6, 1, 5], [4, 11, 15], [8, 9, 3], [4, 8, 11], [2, 9, 96], [6, 8, 93]]) == 6\nassert solution.minTransfers([[8, 9, 42], [4, 10, 25], [5, 1, 16], [10, 8, 54], [2, 3, 40], [4, 11, 42]]) == 6\nassert solution.minTransfers([[5, 1, 3], [3, 9, 15], [1, 3, 87]]) == 3\nassert solution.minTransfers([[4, 8, 34], [1, 6, 8]]) == 2\nassert solution.minTransfers([[8, 10, 64], [10, 4, 45], [5, 7, 17], [10, 8, 76]]) == 3\nassert solution.minTransfers([[7, 8, 25], [9, 3, 45], [0, 2, 89]]) == 3\nassert solution.minTransfers([[2, 9, 56], [11, 8, 55], [10, 8, 76], [1, 11, 66], [7, 5, 43], [4, 10, 86], [11, 6, 55]]) == 7\nassert solution.minTransfers([[4, 10, 7], [8, 0, 88]]) == 2\nassert solution.minTransfers([[2, 11, 59], [3, 1, 50], [4, 1, 29], [5, 0, 94], [6, 1, 97], [2, 3, 33], [2, 1, 91]]) == 6\nassert solution.minTransfers([[0, 9, 63], [8, 7, 79], [2, 5, 15], [8, 4, 92], [5, 0, 74], [8, 9, 13]]) == 6\nassert solution.minTransfers([[2, 4, 90]]) == 1\nassert solution.minTransfers([[7, 8, 28], [8, 11, 80], [8, 5, 89], [9, 4, 50], [3, 6, 24], [4, 11, 61]]) == 5\nassert solution.minTransfers([[9, 4, 13], [4, 1, 84], [10, 6, 12], [6, 0, 72], [9, 7, 85], [8, 3, 3]]) == 6\nassert solution.minTransfers([[3, 11, 27], [11, 8, 95], [8, 0, 75]]) == 3\nassert solution.minTransfers([[1, 4, 36], [10, 0, 51]]) == 2\nassert solution.minTransfers([[9, 3, 87]]) == 1\nassert solution.minTransfers([[2, 6, 11], [5, 11, 27], [11, 7, 46], [2, 5, 95], [11, 2, 69]]) == 4\nassert solution.minTransfers([[7, 1, 19], [10, 5, 2]]) == 2\nassert solution.minTransfers([[0, 3, 92], [11, 7, 22], [3, 5, 78], [10, 3, 37], [10, 8, 73], [5, 2, 68]]) == 6\nassert solution.minTransfers([[11, 5, 67], [0, 9, 26], [11, 8, 89], [8, 7, 25], [2, 0, 61], [11, 0, 12], [6, 8, 95]]) == 7\nassert solution.minTransfers([[4, 10, 1], [10, 3, 12], [5, 4, 95], [5, 1, 46], [5, 2, 57]]) == 5\nassert solution.minTransfers([[8, 4, 34], [0, 8, 83], [10, 0, 64], [8, 7, 37], [3, 8, 81], [4, 11, 60], [0, 9, 99], [5, 11, 54], [7, 8, 46]]) == 7\nassert solution.minTransfers([[3, 7, 100], [5, 10, 45], [8, 4, 77], [3, 6, 5]]) == 4\nassert solution.minTransfers([[4, 0, 61], [11, 6, 38]]) == 2\nassert solution.minTransfers([[7, 2, 46], [9, 0, 64], [0, 1, 63]]) == 3\nassert solution.minTransfers([[8, 6, 13], [8, 6, 8], [7, 5, 12], [8, 2, 6], [6, 9, 28]]) == 4\nassert solution.minTransfers([[6, 9, 79], [9, 5, 92]]) == 2\nassert solution.minTransfers([[1, 4, 31], [1, 9, 60], [10, 9, 27], [5, 1, 92], [5, 9, 91], [11, 3, 90], [9, 7, 95], [2, 7, 71]]) == 7\nassert solution.minTransfers([[5, 1, 38], [1, 3, 32]]) == 2\nassert solution.minTransfers([[3, 0, 36], [3, 10, 85], [1, 4, 24], [10, 4, 5], [8, 6, 30]]) == 5\nassert solution.minTransfers([[0, 10, 22], [11, 1, 7], [6, 10, 93], [3, 11, 47], [0, 4, 94], [9, 7, 44], [2, 3, 95], [8, 9, 81], [1, 8, 30]]) == 9\nassert solution.minTransfers([[11, 4, 38], [6, 11, 69], [3, 2, 33]]) == 3\nassert solution.minTransfers([[6, 11, 93], [9, 3, 77], [3, 7, 87], [5, 3, 80], [0, 3, 70], [9, 5, 36], [4, 6, 93], [11, 8, 64]]) == 6\nassert solution.minTransfers([[5, 1, 22], [1, 9, 2], [7, 0, 92], [6, 11, 11], [6, 9, 64]]) == 5\nassert solution.minTransfers([[10, 6, 6], [7, 10, 71], [2, 6, 11], [9, 1, 88], [7, 6, 84], [10, 2, 17], [1, 0, 70]]) == 5\nassert solution.minTransfers([[1, 5, 28], [2, 9, 75], [9, 11, 44], [8, 1, 45], [3, 6, 12]]) == 5\nassert solution.minTransfers([[7, 6, 47], [2, 11, 24], [11, 6, 43]]) == 3\nassert solution.minTransfers([[8, 9, 9], [2, 9, 27], [1, 4, 6], [9, 4, 36], [1, 7, 79], [5, 11, 73], [0, 11, 71], [2, 3, 63], [7, 8, 50]]) == 7\nassert solution.minTransfers([[4, 1, 23], [4, 11, 18], [4, 8, 26], [8, 11, 81], [10, 3, 24], [4, 6, 5]]) == 5\nassert solution.minTransfers([[5, 4, 38]]) == 1\nassert solution.minTransfers([[6, 2, 8], [0, 6, 51], [2, 4, 60]]) == 3\nassert solution.minTransfers([[10, 4, 58], [1, 7, 93], [5, 6, 52], [8, 10, 39], [9, 1, 62], [8, 0, 100], [1, 6, 78], [1, 0, 87]]) == 8\nassert solution.minTransfers([[4, 9, 78], [0, 7, 76], [11, 7, 22], [5, 4, 21], [0, 11, 92], [2, 1, 61], [7, 3, 6], [0, 3, 16]]) == 6\nassert solution.minTransfers([[7, 11, 38], [2, 5, 97], [11, 10, 63], [10, 4, 80], [8, 11, 42], [5, 3, 12], [6, 8, 8]]) == 6\nassert solution.minTransfers([[9, 6, 8], [1, 3, 83], [9, 6, 55], [9, 6, 65], [2, 10, 95], [5, 8, 5]]) == 4\nassert solution.minTransfers([[7, 8, 49], [5, 7, 96]]) == 2\nassert solution.minTransfers([[3, 7, 83]]) == 1\nassert solution.minTransfers([[6, 8, 80], [2, 4, 19], [3, 5, 14], [0, 9, 60], [3, 6, 24], [3, 6, 40], [11, 0, 60]]) == 5\nassert solution.minTransfers([[10, 7, 90], [11, 4, 31]]) == 2\nassert solution.minTransfers([[3, 2, 47], [7, 4, 75], [3, 9, 17], [8, 6, 60], [5, 10, 18]]) == 5\nassert solution.minTransfers([[4, 10, 80], [3, 1, 57], [2, 11, 23], [10, 4, 77]]) == 3\nassert solution.minTransfers([[6, 3, 72], [2, 4, 36], [11, 4, 95]]) == 3\nassert solution.minTransfers([[10, 7, 48], [1, 3, 72], [3, 0, 46], [6, 4, 68], [11, 6, 8], [9, 0, 96], [5, 11, 87]]) == 7\nassert solution.minTransfers([[8, 9, 31], [6, 1, 56], [10, 4, 95], [1, 10, 4]]) == 4\nassert solution.minTransfers([[11, 7, 27], [1, 6, 100], [11, 7, 30], [11, 10, 13], [9, 11, 20], [2, 7, 81], [11, 8, 65], [2, 5, 5], [0, 7, 26]]) == 8\nassert solution.minTransfers([[8, 4, 28], [7, 9, 71], [9, 3, 66]]) == 3\nassert solution.minTransfers([[4, 8, 51], [1, 6, 9], [0, 7, 39], [3, 7, 85], [11, 7, 78], [6, 9, 90], [11, 0, 53]]) == 6\nassert solution.minTransfers([[0, 5, 95], [0, 5, 36], [8, 6, 34], [2, 0, 61], [11, 0, 6], [1, 3, 9], [1, 6, 51], [6, 8, 67]]) == 6\nassert solution.minTransfers([[9, 7, 47], [6, 9, 51]]) == 2\nassert solution.minTransfers([[8, 7, 9]]) == 1\nassert solution.minTransfers([[10, 4, 21], [3, 8, 36], [9, 11, 5], [8, 4, 82], [7, 4, 93], [9, 7, 68], [0, 6, 88]]) == 7\nassert solution.minTransfers([[9, 5, 60], [6, 5, 78], [2, 7, 86], [10, 1, 100], [4, 6, 15], [8, 5, 59], [9, 0, 7], [11, 8, 81]]) == 8\nassert solution.minTransfers([[3, 6, 99], [11, 8, 45], [9, 7, 63], [3, 4, 77], [2, 9, 84], [8, 3, 51]]) == 6\nassert solution.minTransfers([[8, 4, 91]]) == 1\nassert solution.minTransfers([[8, 6, 53], [2, 3, 30], [7, 2, 4], [6, 11, 35], [7, 11, 28]]) == 5\nassert solution.minTransfers([[2, 9, 27], [11, 4, 77], [2, 3, 50]]) == 3\nassert solution.minTransfers([[10, 1, 3], [1, 6, 46], [6, 10, 66], [1, 7, 47], [3, 2, 38]]) == 4\nassert solution.minTransfers([[2, 3, 18], [2, 11, 29], [6, 10, 84], [11, 10, 89], [9, 2, 71], [1, 8, 88]]) == 6\nassert solution.minTransfers([[0, 10, 80], [6, 11, 14], [1, 5, 34], [0, 10, 22], [4, 7, 68]]) == 4\nassert solution.minTransfers([[2, 9, 15]]) == 1\nassert solution.minTransfers([[3, 1, 20], [8, 1, 3], [0, 9, 63], [5, 6, 19], [2, 8, 73], [6, 1, 55]]) == 6\nassert solution.minTransfers([[11, 5, 53], [11, 8, 20], [1, 7, 26], [8, 4, 73], [7, 5, 73], [11, 7, 38], [2, 4, 30], [7, 9, 50], [4, 9, 98]]) == 7\nassert solution.minTransfers([[10, 9, 17], [7, 2, 90], [7, 5, 40], [1, 8, 38], [2, 8, 13], [10, 5, 64], [4, 0, 7], [7, 4, 76]]) == 8\nassert solution.minTransfers([[2, 7, 39], [2, 7, 83], [9, 3, 57], [2, 6, 59], [5, 8, 24], [0, 4, 90], [4, 2, 25], [8, 3, 8]]) == 7\nassert solution.minTransfers([[6, 4, 46], [5, 9, 57], [1, 6, 63], [5, 11, 98], [11, 9, 16], [8, 3, 65], [4, 10, 69]]) == 6\nassert solution.minTransfers([[6, 5, 12], [9, 3, 91], [5, 11, 39], [6, 5, 4], [8, 7, 50], [1, 10, 30], [8, 11, 43], [10, 6, 96]]) == 7\nassert solution.minTransfers([[0, 7, 93]]) == 1\nassert solution.minTransfers([[1, 11, 36], [9, 0, 45]]) == 2\nassert solution.minTransfers([[4, 10, 6]]) == 1\nassert solution.minTransfers([[4, 10, 20], [6, 0, 86], [4, 6, 88], [1, 3, 59], [1, 0, 98], [0, 5, 53], [3, 4, 41]]) == 6\nassert solution.minTransfers([[5, 0, 2], [5, 0, 18], [7, 11, 18], [0, 11, 94], [11, 8, 52]]) == 4\nassert solution.minTransfers([[9, 0, 60]]) == 1\nassert solution.minTransfers([[1, 3, 99]]) == 1\nassert solution.minTransfers([[8, 6, 78], [9, 6, 40], [8, 2, 90], [7, 10, 65], [5, 2, 38], [9, 6, 47]]) == 5\nassert solution.minTransfers([[3, 11, 53], [9, 3, 14], [8, 7, 99], [6, 5, 91]]) == 4\nassert solution.minTransfers([[3, 1, 1], [9, 0, 16], [11, 4, 83], [2, 11, 15], [8, 9, 13], [5, 6, 45], [3, 0, 32], [2, 11, 13], [7, 9, 35]]) == 7\nassert solution.minTransfers([[0, 7, 14], [9, 8, 28], [0, 6, 12], [0, 4, 48], [10, 3, 59], [11, 1, 26], [6, 8, 12], [10, 2, 90]]) == 7\nassert solution.minTransfers([[8, 4, 4], [6, 4, 58], [2, 10, 17], [3, 7, 20], [3, 7, 94], [5, 9, 75], [5, 1, 45], [9, 10, 47]]) == 7\nassert solution.minTransfers([[4, 7, 27]]) == 1\nassert solution.minTransfers([[3, 1, 70], [7, 8, 34]]) == 2\nassert solution.minTransfers([[2, 7, 81], [1, 9, 18], [5, 2, 51], [7, 0, 37], [3, 9, 22], [11, 4, 76]]) == 6\nassert solution.minTransfers([[6, 0, 90], [9, 10, 69], [7, 3, 25], [10, 3, 88], [9, 0, 15]]) == 5\nassert solution.minTransfers([[10, 3, 86], [1, 11, 27]]) == 2\nassert solution.minTransfers([[6, 5, 78], [9, 8, 20], [0, 9, 87], [7, 3, 81], [11, 2, 19], [4, 10, 13]]) == 6\nassert solution.minTransfers([[5, 3, 94], [4, 8, 61], [6, 1, 24], [8, 0, 40], [8, 1, 3], [7, 11, 31], [4, 2, 18], [7, 6, 95]]) == 8\nassert solution.minTransfers([[1, 5, 56], [2, 10, 83], [0, 6, 22], [2, 10, 5], [3, 6, 83], [0, 3, 11], [3, 9, 18], [0, 9, 40]]) == 5",
  "inefficient_solution": "class Solution:\n    def minTransfers(self, transactions):\n        g = {}\n        result = 0\n        for f, t, x in transactions:\n            if f not in g:\n                g[f] = 0\n            if t not in g:\n                g[t] = 0\n            g[f] -= x\n            g[t] += x\n        nums = [x for x in g.values() if x]\n        m = len(nums)\n        f = [float('inf')] * (1 << m)\n        for state in range(1 << m):\n            for j in range(m):\n                if state >> j & 1:\n                    s = 0\n                    for k in range(m):\n                        if not (state >> k & 1):\n                            s += nums[k]\n                    if s == 0:\n                        f[state] = min(f[state], j.bit_count() - 1)\n                        f[state] = min(f[state], f[state ^ (1 << j)] + j.bit_count())\n        return f[-1]",
  "is_python": true
}