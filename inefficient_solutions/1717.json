{
  "problem_idx": 1717,
  "task_name": "Maximum Score From Removing Substrings",
  "markdown_description": "\nYou are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times.\n\n\n* Remove substring `\"ab\"` and gain `x` points.\n\t+ For example, when removing `\"ab\"` from `\"cabxbae\"` it becomes `\"cxbae\"`.\n* Remove substring `\"ba\"` and gain `y` points.\n\t+ For example, when removing `\"ba\"` from `\"cabxbae\"` it becomes `\"cabxe\"`.\n\n\nReturn *the maximum points you can gain after applying the above operations on* `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"cdbcbbaaabab\", x = 4, y = 5\n**Output:** 19\n**Explanation:**\n- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aabbaaxybbaabb\", x = 5, y = 4\n**Output:** 20\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `1 <= x, y <= 104`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumGain(self, s: str, x: int, y: int) -> int:\n        if x < y:\n            return self.maximumGain(s[::-1], y, x)\n        ans = 0\n        stk1, stk2 = [], []\n        for c in s:\n            if c != 'b':\n                stk1.append(c)\n            else:\n                if stk1 and stk1[-1] == 'a':\n                    stk1.pop()\n                    ans += x\n                else:\n                    stk1.append(c)\n        while stk1:\n            c = stk1.pop()\n            if c != 'b':\n                stk2.append(c)\n            else:\n                if stk2 and stk2[-1] == 'a':\n                    stk2.pop()\n                    ans += y\n                else:\n                    stk2.append(c)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumGain(self, s: str, x: int, y: int) -> int:\n        if x < y:\n            return self.maximumGain(s[::-1], y, x)\n        ans = 0\n        stk1, stk2 = [], []\n        for c in s:\n            if c != 'b':\n                stk1.append(c)\n            else:\n                if stk1 and stk1[-1] == 'a':\n                    stk1.pop()\n                    ans += x\n                else:\n                    stk1.append(c)\n        while stk1:\n            c = stk1.pop()\n            if c != 'b':\n                stk2.append(c)\n            else:\n                if stk2 and stk2[-1] == 'a':\n                    stk2.pop()\n                    ans += y\n                else:\n                    stk2.append(c)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 11)))\n    \n    # Generate random values for x and y\n    x = random.randint(1, 10001)\n    y = random.randint(1, 10001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumGain(s, x, y)\n\n    return s, x, y, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, x, y, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumGain(s, x, y) == expected_result\n        print(f\"assert solution.maximumGain('{s}', {x}, {y}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumGain('{s}', {x}, {y}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumGain('lyopujjtvku', 2413, 1622) == 0\nassert solution.maximumGain('sixdfjkoi', 6640, 8012) == 0\nassert solution.maximumGain('lqmanyjecbo', 3130, 7077) == 0\nassert solution.maximumGain('ofoxg', 2013, 3217) == 0\nassert solution.maximumGain('hoexgprnl', 290, 1676) == 0\nassert solution.maximumGain('hniqbxsyrjp', 823, 9103) == 0\nassert solution.maximumGain('qulftuuo', 3981, 152) == 0\nassert solution.maximumGain('becdtntgtoi', 212, 9958) == 0\nassert solution.maximumGain('foth', 2243, 3772) == 0\nassert solution.maximumGain('vizkuqynznz', 9198, 2116) == 0\nassert solution.maximumGain('ndmd', 4459, 9466) == 0\nassert solution.maximumGain('wosngph', 4118, 2047) == 0\nassert solution.maximumGain('xqr', 4617, 3742) == 0\nassert solution.maximumGain('yhwd', 2578, 6654) == 0\nassert solution.maximumGain('iurrpdpow', 5336, 6134) == 0\nassert solution.maximumGain('ysapucfekth', 520, 3069) == 0\nassert solution.maximumGain('afhxnlmh', 5861, 1877) == 0\nassert solution.maximumGain('xrev', 7664, 7522) == 0\nassert solution.maximumGain('nlvlpye', 2729, 9092) == 0\nassert solution.maximumGain('mlcuuplavuz', 5011, 2727) == 0\nassert solution.maximumGain('dfha', 3171, 1525) == 0\nassert solution.maximumGain('lbabuomwdwj', 231, 2648) == 2648\nassert solution.maximumGain('qunfvjocvnu', 3188, 3968) == 0\nassert solution.maximumGain('fyjoddst', 7705, 9242) == 0\nassert solution.maximumGain('czpmvqc', 6095, 3854) == 0\nassert solution.maximumGain('ht', 7862, 8840) == 0\nassert solution.maximumGain('usuuebetrm', 9143, 7040) == 0\nassert solution.maximumGain('bnlmw', 5430, 9026) == 0\nassert solution.maximumGain('jiqswiz', 6482, 6344) == 0\nassert solution.maximumGain('jbzkmz', 1362, 6093) == 0\nassert solution.maximumGain('iaiebn', 6096, 2620) == 0\nassert solution.maximumGain('vqomiepvp', 7200, 1294) == 0\nassert solution.maximumGain('l', 5946, 8676) == 0\nassert solution.maximumGain('cujcyfujp', 5339, 7728) == 0\nassert solution.maximumGain('lpexvssbl', 577, 5309) == 0\nassert solution.maximumGain('jyyrtntvd', 5937, 6008) == 0\nassert solution.maximumGain('vtnuwjrjuba', 4810, 5231) == 5231\nassert solution.maximumGain('c', 767, 9182) == 0\nassert solution.maximumGain('tnaplojsdhk', 2042, 1871) == 0\nassert solution.maximumGain('of', 1032, 3981) == 0\nassert solution.maximumGain('heqjdamfst', 4389, 7335) == 0\nassert solution.maximumGain('ml', 9504, 3078) == 0\nassert solution.maximumGain('uvw', 7432, 7107) == 0\nassert solution.maximumGain('oceavbavhfg', 8089, 7543) == 7543\nassert solution.maximumGain('hxlmcryn', 2516, 3800) == 0\nassert solution.maximumGain('bd', 4289, 9015) == 0\nassert solution.maximumGain('vroavge', 2888, 4518) == 0\nassert solution.maximumGain('s', 9087, 1089) == 0\nassert solution.maximumGain('lwuskfcutq', 5312, 7433) == 0\nassert solution.maximumGain('gg', 5527, 7897) == 0\nassert solution.maximumGain('ezmczabyfxj', 4462, 9346) == 4462\nassert solution.maximumGain('j', 4497, 1217) == 0\nassert solution.maximumGain('ooqfihfnm', 2534, 4488) == 0\nassert solution.maximumGain('xhhk', 2069, 6577) == 0\nassert solution.maximumGain('htjnqqgydwv', 2625, 5369) == 0\nassert solution.maximumGain('mmj', 488, 6918) == 0\nassert solution.maximumGain('lxe', 5746, 5433) == 0\nassert solution.maximumGain('dxdr', 3603, 7454) == 0\nassert solution.maximumGain('ffutxwh', 7014, 9471) == 0\nassert solution.maximumGain('dfc', 473, 3637) == 0\nassert solution.maximumGain('hrwqq', 8349, 5255) == 0\nassert solution.maximumGain('jfefsyk', 9071, 4756) == 0\nassert solution.maximumGain('woku', 2078, 2093) == 0\nassert solution.maximumGain('schhzixu', 4691, 3307) == 0\nassert solution.maximumGain('piufdpu', 1250, 838) == 0\nassert solution.maximumGain('ndaaprqjbna', 5407, 9575) == 0\nassert solution.maximumGain('ahw', 1417, 4579) == 0\nassert solution.maximumGain('moedmwkj', 6110, 4323) == 0\nassert solution.maximumGain('q', 4409, 7994) == 0\nassert solution.maximumGain('zxowmvr', 8309, 1700) == 0\nassert solution.maximumGain('ti', 4659, 69) == 0\nassert solution.maximumGain('pnpvncjd', 5744, 7234) == 0\nassert solution.maximumGain('gelav', 920, 1204) == 0\nassert solution.maximumGain('g', 7161, 5998) == 0\nassert solution.maximumGain('rnhsdvriqh', 6867, 6937) == 0\nassert solution.maximumGain('mkb', 5903, 2134) == 0\nassert solution.maximumGain('jokhk', 6197, 9822) == 0\nassert solution.maximumGain('okw', 5349, 4379) == 0\nassert solution.maximumGain('lxt', 3682, 1238) == 0\nassert solution.maximumGain('qvciyupvzhc', 5297, 4222) == 0\nassert solution.maximumGain('tl', 1871, 4285) == 0\nassert solution.maximumGain('o', 9462, 1778) == 0\nassert solution.maximumGain('eubdqlcp', 283, 8806) == 0\nassert solution.maximumGain('qupae', 659, 402) == 0\nassert solution.maximumGain('e', 4534, 7324) == 0\nassert solution.maximumGain('mrkvkck', 6321, 9811) == 0\nassert solution.maximumGain('axjzk', 5143, 4053) == 0\nassert solution.maximumGain('rsys', 2230, 8894) == 0\nassert solution.maximumGain('lr', 5062, 4468) == 0\nassert solution.maximumGain('tojzyquol', 759, 4102) == 0\nassert solution.maximumGain('n', 385, 5085) == 0\nassert solution.maximumGain('sbvwt', 957, 3739) == 0\nassert solution.maximumGain('izy', 6959, 776) == 0\nassert solution.maximumGain('dkevdp', 6675, 4856) == 0\nassert solution.maximumGain('vkrnd', 8401, 8129) == 0\nassert solution.maximumGain('ismhtvoir', 8298, 414) == 0\nassert solution.maximumGain('wqtftoioks', 7033, 6438) == 0\nassert solution.maximumGain('jtlewflmawe', 3292, 9418) == 0\nassert solution.maximumGain('sbzshsfjuth', 2859, 8799) == 0\nassert solution.maximumGain('tkbgqtzjlgb', 7914, 8050) == 0",
  "inefficient_solution": "class Solution:\n    def maximumGain(self, s: str, x: int, y: int) -> int:\n        if x < y:\n            s = s[::-1]\n            x, y = y, x\n        ans = 0\n        trans = str.maketrans('ab', 'ba')\n        for _ in range(len(s)):\n            s = s.translate(trans)\n            if 'ab' in s:\n                s = s.replace('ab', '', 1)\n                ans += x\n            elif 'ba' in s:\n                s = s.replace('ba', '', 1)\n                ans += y\n        return ans",
  "is_python": true
}