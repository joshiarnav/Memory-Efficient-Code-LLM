{
  "problem_idx": 1058,
  "task_name": "Minimize Rounding Error to Meet Target",
  "markdown_description": "\nGiven an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `Roundi(pi)` so that the rounded array `[Round1(p1),Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` could be either `Floor(pi)` or `Ceil(pi)`.\n\n\nReturn the string `\"-1\"` if the rounded array is impossible to sum to `target`. Otherwise, return the smallest rounding error, which is defined as `\u03a3 |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prices = [\"0.700\",\"2.800\",\"4.900\"], target = 8\n**Output:** \"1.000\"\n**Explanation:**\nUse Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prices = [\"1.500\",\"2.500\",\"3.500\"], target = 10\n**Output:** \"-1\"\n**Explanation:** It is impossible to meet the target.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** prices = [\"1.500\",\"2.500\",\"3.500\"], target = 9\n**Output:** \"1.500\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prices.length <= 500`\n* Each string\u00a0`prices[i]` represents a real number in the range `[0.0, 1000.0]` and has exactly 3 decimal places.\n* `0 <= target <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimizeError(self, prices: List[str], target: int) -> str:\n        mi = 0\n        arr = []\n        for p in prices:\n            p = float(p)\n            mi += int(p)\n            if d := p - int(p):\n                arr.append(d)\n        if not mi <= target <= mi + len(arr):\n            return \"-1\"\n        d = target - mi\n        arr.sort(reverse=True)\n        ans = d - sum(arr[:d]) + sum(arr[d:])\n        return f'{ans:.3f}'\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimizeError(self, prices: List[str], target: int) -> str:\n        mi = 0\n        arr = []\n        for p in prices:\n            p = float(p)\n            mi += int(p)\n            if d := p - int(p):\n                arr.append(d)\n        if not mi <= target <= mi + len(arr):\n            return \"-1\"\n        d = target - mi\n        arr.sort(reverse=True)\n        ans = d - sum(arr[:d]) + sum(arr[d:])\n        return f'{ans:.3f}'\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random prices list\n    prices = [f\"{random.randint(0, 1000):.3f}\" for _ in range(random.randint(1, 11))]\n    \n    # Generate a random target sum\n    target = random.randint(0, 10**6)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimizeError(prices, target)\n\n    return prices, target, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        prices, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimizeError(prices, target) == expected_result\n        print(f\"assert solution.minimizeError({prices}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimizeError({prices}, {target}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimizeError(['130.000', '262.000', '795.000'], 802922) == -1\nassert solution.minimizeError(['820.000', '658.000', '205.000', '363.000'], 663218) == -1\nassert solution.minimizeError(['942.000', '760.000', '646.000', '941.000', '580.000'], 918904) == -1\nassert solution.minimizeError(['432.000', '28.000'], 916703) == -1\nassert solution.minimizeError(['880.000', '633.000', '147.000', '155.000', '827.000'], 410206) == -1\nassert solution.minimizeError(['168.000', '573.000', '105.000', '572.000', '152.000', '471.000', '995.000', '581.000', '900.000', '982.000', '611.000'], 601603) == -1\nassert solution.minimizeError(['853.000', '660.000', '158.000', '155.000', '176.000', '532.000', '617.000', '680.000', '914.000', '130.000', '395.000'], 124676) == -1\nassert solution.minimizeError(['497.000', '233.000', '767.000', '187.000', '789.000', '421.000', '102.000', '375.000'], 259586) == -1\nassert solution.minimizeError(['344.000', '310.000'], 674474) == -1\nassert solution.minimizeError(['970.000', '309.000'], 492631) == -1\nassert solution.minimizeError(['919.000', '134.000'], 304702) == -1\nassert solution.minimizeError(['533.000', '595.000', '859.000', '120.000'], 801363) == -1\nassert solution.minimizeError(['529.000', '454.000', '42.000', '579.000', '588.000', '231.000', '908.000', '427.000', '831.000', '51.000'], 499637) == -1\nassert solution.minimizeError(['796.000', '476.000', '769.000', '241.000', '697.000', '715.000', '595.000', '331.000', '606.000', '160.000'], 654216) == -1\nassert solution.minimizeError(['519.000', '355.000', '166.000', '354.000', '50.000', '72.000', '1.000'], 617846) == -1\nassert solution.minimizeError(['948.000', '672.000', '733.000', '991.000', '654.000'], 931835) == -1\nassert solution.minimizeError(['914.000', '794.000', '352.000', '370.000', '721.000'], 963614) == -1\nassert solution.minimizeError(['119.000', '483.000', '161.000', '537.000', '35.000', '665.000', '44.000', '608.000', '690.000', '564.000'], 882932) == -1\nassert solution.minimizeError(['381.000', '406.000', '902.000', '463.000', '812.000', '530.000'], 990720) == -1\nassert solution.minimizeError(['263.000', '773.000', '772.000', '822.000'], 863484) == -1\nassert solution.minimizeError(['771.000', '770.000', '214.000', '223.000', '645.000', '25.000', '743.000', '998.000', '545.000', '429.000', '334.000'], 429104) == -1\nassert solution.minimizeError(['392.000', '674.000', '56.000'], 44591) == -1\nassert solution.minimizeError(['965.000', '693.000', '477.000', '425.000', '875.000', '765.000'], 732203) == -1\nassert solution.minimizeError(['59.000', '746.000', '478.000'], 859747) == -1\nassert solution.minimizeError(['459.000', '723.000', '241.000', '307.000', '108.000', '931.000', '797.000', '348.000'], 485847) == -1\nassert solution.minimizeError(['313.000', '541.000', '326.000', '715.000', '468.000', '340.000'], 901861) == -1\nassert solution.minimizeError(['56.000', '642.000'], 135757) == -1\nassert solution.minimizeError(['896.000', '476.000'], 46922) == -1\nassert solution.minimizeError(['727.000'], 379249) == -1\nassert solution.minimizeError(['32.000'], 1332) == -1\nassert solution.minimizeError(['653.000', '174.000', '149.000', '148.000', '754.000', '421.000', '278.000', '419.000'], 847134) == -1\nassert solution.minimizeError(['76.000', '946.000', '509.000', '123.000', '479.000', '596.000', '919.000', '186.000', '643.000', '224.000'], 824912) == -1\nassert solution.minimizeError(['958.000', '183.000'], 722827) == -1\nassert solution.minimizeError(['314.000', '444.000', '128.000', '925.000', '955.000', '997.000', '660.000', '216.000', '929.000', '772.000', '392.000'], 75321) == -1\nassert solution.minimizeError(['123.000', '637.000', '490.000', '952.000', '587.000', '794.000', '79.000', '374.000', '616.000'], 444623) == -1\nassert solution.minimizeError(['972.000', '90.000', '367.000', '976.000', '133.000', '604.000', '770.000', '54.000'], 738256) == -1\nassert solution.minimizeError(['14.000'], 873821) == -1\nassert solution.minimizeError(['527.000'], 136768) == -1\nassert solution.minimizeError(['586.000', '98.000', '31.000', '495.000', '940.000', '949.000', '609.000', '31.000'], 104447) == -1\nassert solution.minimizeError(['374.000', '262.000', '741.000', '896.000'], 906927) == -1\nassert solution.minimizeError(['31.000', '947.000', '814.000'], 25514) == -1\nassert solution.minimizeError(['918.000', '28.000', '485.000', '814.000', '688.000', '461.000', '448.000'], 4037) == -1\nassert solution.minimizeError(['0.000', '415.000', '715.000', '806.000', '822.000', '213.000', '10.000', '759.000'], 6377) == -1\nassert solution.minimizeError(['365.000', '450.000', '432.000', '668.000', '987.000', '564.000', '350.000', '334.000', '978.000'], 87984) == -1\nassert solution.minimizeError(['160.000', '731.000', '686.000', '464.000', '292.000', '216.000'], 148402) == -1\nassert solution.minimizeError(['970.000', '201.000', '567.000', '481.000'], 502061) == -1\nassert solution.minimizeError(['451.000', '21.000', '241.000', '193.000', '531.000'], 669476) == -1\nassert solution.minimizeError(['885.000', '552.000', '735.000', '838.000', '886.000'], 278263) == -1\nassert solution.minimizeError(['627.000'], 771806) == -1\nassert solution.minimizeError(['239.000'], 898962) == -1\nassert solution.minimizeError(['813.000', '542.000', '195.000', '359.000'], 388319) == -1\nassert solution.minimizeError(['795.000', '179.000', '544.000', '748.000', '827.000', '81.000', '375.000'], 989097) == -1\nassert solution.minimizeError(['572.000'], 616313) == -1\nassert solution.minimizeError(['76.000'], 817942) == -1\nassert solution.minimizeError(['102.000'], 451500) == -1\nassert solution.minimizeError(['140.000', '285.000', '995.000', '938.000', '731.000', '773.000'], 166858) == -1\nassert solution.minimizeError(['77.000', '640.000', '677.000', '864.000', '684.000', '312.000', '798.000', '168.000'], 206712) == -1\nassert solution.minimizeError(['703.000', '165.000', '765.000', '854.000', '732.000', '752.000', '456.000', '662.000', '375.000', '447.000'], 708580) == -1\nassert solution.minimizeError(['88.000', '758.000', '104.000', '985.000', '422.000'], 387626) == -1\nassert solution.minimizeError(['680.000', '60.000', '501.000', '377.000', '493.000', '134.000', '196.000', '382.000'], 51320) == -1\nassert solution.minimizeError(['458.000', '960.000', '966.000', '610.000', '714.000', '569.000', '637.000', '747.000', '11.000', '521.000'], 692720) == -1\nassert solution.minimizeError(['813.000', '395.000', '818.000', '783.000', '692.000', '759.000'], 324316) == -1\nassert solution.minimizeError(['759.000', '842.000', '697.000', '610.000', '683.000', '594.000', '28.000', '347.000'], 564366) == -1\nassert solution.minimizeError(['599.000', '336.000', '393.000', '925.000', '93.000', '953.000', '424.000', '373.000', '494.000', '460.000', '718.000'], 544196) == -1\nassert solution.minimizeError(['9.000', '210.000', '56.000', '997.000', '672.000', '807.000', '276.000', '661.000', '37.000', '375.000', '487.000'], 15157) == -1\nassert solution.minimizeError(['184.000', '640.000', '870.000', '8.000', '427.000', '646.000', '167.000', '764.000', '542.000', '697.000'], 753070) == -1\nassert solution.minimizeError(['302.000', '546.000', '787.000', '527.000', '990.000', '960.000', '937.000', '201.000'], 808230) == -1\nassert solution.minimizeError(['506.000'], 220159) == -1\nassert solution.minimizeError(['310.000', '697.000', '208.000'], 296459) == -1\nassert solution.minimizeError(['113.000', '888.000', '183.000', '804.000', '930.000', '979.000', '409.000', '378.000', '867.000', '758.000', '866.000'], 579473) == -1\nassert solution.minimizeError(['83.000', '741.000', '750.000', '782.000'], 764860) == -1\nassert solution.minimizeError(['491.000', '586.000', '801.000', '665.000'], 17933) == -1\nassert solution.minimizeError(['562.000', '966.000', '855.000', '379.000', '499.000', '631.000'], 831996) == -1\nassert solution.minimizeError(['16.000', '751.000'], 755360) == -1\nassert solution.minimizeError(['615.000', '983.000', '809.000', '990.000', '264.000', '411.000', '786.000', '368.000', '820.000', '38.000', '75.000'], 106915) == -1\nassert solution.minimizeError(['668.000', '988.000', '534.000', '38.000', '47.000', '768.000', '677.000'], 401799) == -1\nassert solution.minimizeError(['199.000', '58.000', '544.000', '675.000', '393.000', '869.000', '166.000'], 203673) == -1\nassert solution.minimizeError(['861.000', '230.000', '15.000', '608.000', '111.000', '928.000', '786.000', '64.000', '644.000', '305.000', '236.000'], 972860) == -1\nassert solution.minimizeError(['803.000', '412.000', '444.000', '922.000'], 797973) == -1\nassert solution.minimizeError(['137.000', '285.000', '783.000'], 921736) == -1\nassert solution.minimizeError(['591.000', '253.000', '593.000', '24.000', '301.000', '711.000'], 875662) == -1\nassert solution.minimizeError(['350.000', '525.000', '25.000', '405.000', '878.000', '132.000'], 889594) == -1\nassert solution.minimizeError(['240.000', '402.000', '720.000', '717.000', '934.000', '499.000', '396.000', '875.000'], 208610) == -1\nassert solution.minimizeError(['685.000', '270.000', '936.000', '211.000', '678.000', '513.000', '774.000', '991.000', '493.000'], 150797) == -1\nassert solution.minimizeError(['200.000', '664.000'], 957025) == -1\nassert solution.minimizeError(['821.000', '137.000', '0.000'], 17803) == -1\nassert solution.minimizeError(['715.000', '442.000', '442.000', '714.000', '854.000', '54.000', '487.000'], 781942) == -1\nassert solution.minimizeError(['397.000', '177.000', '664.000', '936.000', '932.000'], 107266) == -1\nassert solution.minimizeError(['79.000', '786.000', '484.000', '934.000', '427.000', '169.000', '781.000', '143.000', '79.000', '999.000', '643.000'], 527794) == -1\nassert solution.minimizeError(['163.000', '122.000', '985.000', '920.000', '444.000', '403.000'], 690634) == -1\nassert solution.minimizeError(['403.000', '606.000', '2.000', '498.000'], 580362) == -1\nassert solution.minimizeError(['654.000', '914.000', '28.000'], 58029) == -1\nassert solution.minimizeError(['277.000', '61.000', '655.000', '604.000', '922.000', '887.000', '515.000', '968.000', '319.000', '155.000', '112.000'], 208275) == -1\nassert solution.minimizeError(['460.000', '978.000', '625.000', '440.000', '468.000', '587.000', '72.000', '251.000', '25.000', '989.000', '711.000'], 904047) == -1\nassert solution.minimizeError(['921.000', '586.000', '70.000'], 837786) == -1\nassert solution.minimizeError(['109.000', '823.000', '524.000', '269.000', '380.000', '48.000', '511.000', '874.000'], 421793) == -1\nassert solution.minimizeError(['417.000', '61.000', '659.000'], 599297) == -1\nassert solution.minimizeError(['411.000', '648.000', '277.000', '779.000', '121.000', '304.000', '452.000', '408.000', '445.000'], 941706) == -1\nassert solution.minimizeError(['305.000', '406.000'], 250936) == -1\nassert solution.minimizeError(['147.000', '812.000', '357.000', '142.000', '450.000', '660.000', '941.000'], 943362) == -1",
  "inefficient_solution": "class Solution:\n    def minimizeError(self, prices, target):\n        prices = [float(p) for p in prices]\n        max_mi = sum(prices)\n        min_mi = 0\n        while max_mi - min_mi > 0.00001:\n            mid_mi = (max_mi + min_mi) / 2\n            if sum(int(p) for p in prices) <= mid_mi <= sum(int(p) for p in prices) + len(prices):\n                max_mi = mid_mi\n            else:\n                min_mi = mid_mi\n        if not max_mi <= target <= sum(int(p) for p in prices) + len(prices):\n            return \"-1\"\n        arr = [p - int(p) for p in prices]\n        arr.sort(reverse=True)\n        d = target - sum(int(p) for p in prices)\n        ans = sum(abs(int(p) + (arr[i] if i < d else 0) - p) for i, p in enumerate(prices))\n        return f'{ans:.3f}'",
  "is_python": true
}