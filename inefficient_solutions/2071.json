{
  "problem_idx": 2071,
  "task_name": "Maximum Number of Tasks You Can Assign",
  "markdown_description": "\nYou have `n` tasks and `m` workers. Each task has a strength requirement stored in a **0-indexed** integer array `tasks`, with the `ith` task requiring `tasks[i]` strength to complete. The strength of each worker is stored in a **0-indexed** integer array `workers`, with the `jth` worker having `workers[j]` strength. Each worker can only be assigned to a **single** task and must have a strength **greater than or equal** to the task's strength requirement (i.e., `workers[j] >= tasks[i]`).\n\n\nAdditionally, you have `pills` magical pills that will **increase a worker's strength** by `strength`. You can decide which workers receive the magical pills, however, you may only give each worker **at most one** magical pill.\n\n\nGiven the **0-indexed** integer arrays `tasks` and `workers` and the integers `pills` and `strength`, return *the **maximum** number of tasks that can be completed.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tasks = [**3**,**2**,**1**], workers = [**0**,**3**,**3**], pills = 1, strength = 1\n**Output:** 3\n**Explanation:**\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 >= 1)\n- Assign worker 1 to task 1 (3 >= 2)\n- Assign worker 2 to task 0 (3 >= 3)\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tasks = [**5**,4], workers = [**0**,0,0], pills = 1, strength = 5\n**Output:** 1\n**Explanation:**\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 >= 5)\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** tasks = [**10**,**15**,30], workers = [**0**,**10**,10,10,10], pills = 3, strength = 10\n**Output:** 2\n**Explanation:**\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 >= 10)\n- Assign worker 1 to task 1 (10 + 10 >= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == tasks.length`\n* `m == workers.length`\n* `1 <= n, m <= 5 * 104`\n* `0 <= pills <= m`\n* `0 <= tasks[i], workers[j], strength <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxTaskAssign(\n        self, tasks: List[int], workers: List[int], pills: int, strength: int\n    ) -> int:\n        def check(x):\n            i = 0\n            q = deque()\n            p = pills\n            for j in range(m - x, m):\n                while i < x and tasks[i] <= workers[j] + strength:\n                    q.append(tasks[i])\n                    i += 1\n                if not q:\n                    return False\n                if q[0] <= workers[j]:\n                    q.popleft()\n                elif p == 0:\n                    return False\n                else:\n                    p -= 1\n                    q.pop()\n            return True\n\n        n, m = len(tasks), len(workers)\n        tasks.sort()\n        workers.sort()\n        left, right = 0, min(n, m)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxTaskAssign(\n        self, tasks: list, workers: list, pills: int, strength: int\n    ) -> int:\n        def check(x):\n            i = 0\n            q = deque()\n            p = pills\n            for j in range(m - x, m):\n                while i < x and tasks[i] <= workers[j] + strength:\n                    q.append(tasks[i])\n                    i += 1\n                if not q:\n                    return False\n                if q[0] <= workers[j]:\n                    q.popleft()\n                elif p == 0:\n                    return False\n                else:\n                    p -= 1\n                    q.pop()\n            return True\n\n        n, m = len(tasks), len(workers)\n        tasks.sort()\n        workers.sort()\n        left, right = 0, min(n, m)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random tasks list\n    tasks = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate random workers list\n    workers = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate random values for pills and strength\n    pills = random.randint(0, len(workers))\n    strength = random.randint(0, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxTaskAssign(tasks, workers, pills, strength)\n\n    return tasks, workers, pills, strength, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tasks, workers, pills, strength, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxTaskAssign(tasks, workers, pills, strength) == expected_result\n        print(f\"assert solution.maxTaskAssign({tasks}, {workers}, {pills}, {strength}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxTaskAssign({tasks}, {workers}, {pills}, {strength}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxTaskAssign([18, 37, 43, 49, 51, 56, 71, 73, 77, 85], [8, 33], 2, 30) == 2\nassert solution.maxTaskAssign([14, 23, 47, 62, 68], [12, 36, 39], 0, 25) == 2\nassert solution.maxTaskAssign([9, 58, 59], [35, 79, 81, 95], 0, 20) == 3\nassert solution.maxTaskAssign([1, 4, 21, 26, 41, 56, 58, 78, 85, 95], [45, 47, 53, 65, 71, 94], 5, 37) == 6\nassert solution.maxTaskAssign([28, 38, 44, 46, 56, 66, 71], [34, 36, 41, 92, 93], 0, 64) == 4\nassert solution.maxTaskAssign([25, 36, 43, 70, 75, 83, 84, 87, 88], [1, 8, 42, 49, 84, 95, 96], 4, 92) == 7\nassert solution.maxTaskAssign([1, 16, 31, 43, 62, 79, 99], [17, 74, 75], 1, 43) == 3\nassert solution.maxTaskAssign([6, 8, 34, 46, 82, 83, 84, 98], [3, 4, 5, 33, 47, 55, 69, 70, 74, 82], 4, 100) == 8\nassert solution.maxTaskAssign([40, 50], [14, 28, 83], 1, 79) == 2\nassert solution.maxTaskAssign([19, 23, 79, 80], [85, 93], 0, 1) == 2\nassert solution.maxTaskAssign([18, 27, 38, 55, 64, 70, 71, 95], [15, 36, 53, 57, 59, 62, 67, 74, 83], 0, 27) == 7\nassert solution.maxTaskAssign([6, 71, 72, 87, 90], [31, 55, 63], 3, 70) == 3\nassert solution.maxTaskAssign([8, 18, 27, 34, 64, 96], [1, 10, 13, 23, 25, 37, 43, 86, 93, 98], 8, 87) == 6\nassert solution.maxTaskAssign([14, 18, 28, 48, 57, 63, 65, 78, 81, 87], [49, 83, 96], 3, 5) == 3\nassert solution.maxTaskAssign([20, 26, 37, 49, 60, 66], [5, 11, 22, 33, 59, 82], 1, 26) == 5\nassert solution.maxTaskAssign([16, 24, 31, 91], [28, 31, 36, 66], 4, 69) == 4\nassert solution.maxTaskAssign([2, 9, 10, 25, 28, 42, 67], [38, 62, 63], 3, 73) == 3\nassert solution.maxTaskAssign([45, 57, 79, 97], [3, 19, 28, 37, 39, 50, 59, 84, 89], 5, 26) == 4\nassert solution.maxTaskAssign([3, 9, 15, 20, 23, 47, 73, 75], [21, 36, 53, 67, 97, 100], 4, 17) == 6\nassert solution.maxTaskAssign([16, 20, 23, 39, 52, 63, 72, 76, 93], [2, 4, 29, 88, 90, 96], 1, 10) == 4\nassert solution.maxTaskAssign([42, 53], [43, 66], 2, 30) == 2\nassert solution.maxTaskAssign([47, 93], [31, 42, 43, 71, 76, 91, 95], 0, 73) == 2\nassert solution.maxTaskAssign([13, 18, 28, 48, 50, 69, 87], [6, 22, 42, 52, 76, 79, 99], 4, 36) == 7\nassert solution.maxTaskAssign([10, 38, 47, 67], [13, 74, 86, 88], 2, 24) == 4\nassert solution.maxTaskAssign([12, 48, 53, 65, 70, 77, 94], [42, 100], 1, 9) == 2\nassert solution.maxTaskAssign([18, 24, 45, 83, 89], [6, 45, 63, 76, 82], 0, 37) == 3\nassert solution.maxTaskAssign([21, 42, 69, 79], [29, 61, 66, 67, 87, 91], 6, 68) == 4\nassert solution.maxTaskAssign([41, 88], [28, 86], 0, 18) == 1\nassert solution.maxTaskAssign([7, 13, 22, 31, 44, 65, 69, 82, 84], [13, 51, 65, 90, 95], 1, 27) == 5\nassert solution.maxTaskAssign([8, 46, 47, 73, 85], [4, 12, 30, 42, 43, 50, 91], 4, 42) == 5\nassert solution.maxTaskAssign([10, 28], [5, 80, 89], 0, 72) == 2\nassert solution.maxTaskAssign([2, 4, 13, 23, 50, 59, 60, 89, 98], [12, 32, 34, 37, 42, 43, 45], 0, 97) == 4\nassert solution.maxTaskAssign([25, 28, 30, 32, 65, 66, 80, 84, 97], [6, 10, 15, 58, 59, 64, 70, 72, 80, 97], 3, 93) == 9\nassert solution.maxTaskAssign([21, 23, 28], [3, 23, 27, 40, 51, 86, 88], 7, 37) == 3\nassert solution.maxTaskAssign([30, 47, 61, 68, 86, 90], [25, 60, 66, 94, 100], 3, 84) == 5\nassert solution.maxTaskAssign([21, 36, 41], [30, 34, 52, 61, 64, 84], 0, 6) == 3\nassert solution.maxTaskAssign([41, 72], [6, 13, 35, 43, 61, 84, 94], 2, 76) == 2\nassert solution.maxTaskAssign([2, 17], [14, 61], 2, 99) == 2\nassert solution.maxTaskAssign([26, 40, 65, 94], [35, 47, 57, 59, 61, 62, 97], 2, 88) == 4\nassert solution.maxTaskAssign([2, 4, 7, 12, 36, 50, 53, 59, 60], [3, 31, 39, 40, 45, 47, 65, 76, 97, 98], 0, 79) == 9\nassert solution.maxTaskAssign([7, 90], [9, 13, 37, 47, 49, 51, 53, 62, 66, 77], 3, 10) == 1\nassert solution.maxTaskAssign([16, 17, 18, 19, 26, 33, 44, 71, 76], [6, 39, 48, 53, 85], 1, 31) == 5\nassert solution.maxTaskAssign([54, 62], [19, 42, 65, 93], 3, 19) == 2\nassert solution.maxTaskAssign([12, 23, 54], [37, 39, 41, 51, 55, 57, 60, 81, 86], 1, 15) == 3\nassert solution.maxTaskAssign([13, 16, 31, 50, 65], [27, 35, 41], 1, 70) == 3\nassert solution.maxTaskAssign([19, 57, 61, 94, 99], [15, 28, 49, 54, 58, 66, 73, 84, 96], 7, 77) == 5\nassert solution.maxTaskAssign([57, 59], [11, 13, 31, 53, 73, 82], 3, 4) == 2\nassert solution.maxTaskAssign([15, 18, 24, 43, 46, 51], [16, 38, 91, 94], 2, 24) == 4\nassert solution.maxTaskAssign([61, 70, 73], [8, 15, 22, 53, 55, 72, 95], 7, 88) == 3\nassert solution.maxTaskAssign([15, 32], [19, 34, 82], 3, 65) == 2\nassert solution.maxTaskAssign([5, 20, 22, 27, 37, 54, 88, 93, 97], [29, 75], 2, 68) == 2\nassert solution.maxTaskAssign([27, 38, 44, 75, 88], [9, 14, 34, 37, 39, 48, 56, 81, 85], 5, 7) == 5\nassert solution.maxTaskAssign([6, 8, 14, 16, 37, 64, 74, 82, 93, 97], [17, 40, 65], 2, 3) == 3\nassert solution.maxTaskAssign([19, 22, 31, 37, 77, 84], [1, 63, 93, 96], 1, 10) == 3\nassert solution.maxTaskAssign([45, 60], [2, 7, 57, 73, 84, 86, 92, 99], 1, 82) == 2\nassert solution.maxTaskAssign([10, 41, 57], [11, 29, 56, 63, 68, 76, 79], 3, 36) == 3\nassert solution.maxTaskAssign([5, 8, 35, 48, 63, 66, 86, 95], [35, 39, 41, 96], 2, 57) == 4\nassert solution.maxTaskAssign([11, 19, 32, 61, 84, 94], [61, 67, 71], 2, 92) == 3\nassert solution.maxTaskAssign([12, 71], [8, 33], 0, 35) == 1\nassert solution.maxTaskAssign([13, 40, 44], [7, 11, 14, 18, 35, 83], 1, 41) == 3\nassert solution.maxTaskAssign([5, 13, 37, 49, 71, 93, 94], [33, 36, 66], 1, 89) == 3\nassert solution.maxTaskAssign([18, 19, 26, 44, 49, 55, 78, 89], [39, 55, 61, 67, 69, 73, 75], 7, 66) == 7\nassert solution.maxTaskAssign([7, 12, 16, 19, 20, 43, 62, 70, 81], [3, 12, 43, 66, 72, 87], 0, 42) == 5\nassert solution.maxTaskAssign([49, 51, 59, 68, 71, 82, 87], [23, 35, 79, 91, 92, 95, 96], 6, 41) == 7\nassert solution.maxTaskAssign([1, 73, 85], [16, 27, 29, 57, 77, 78], 6, 100) == 3\nassert solution.maxTaskAssign([9, 85, 96], [11, 27, 39, 47, 68, 87, 97], 7, 37) == 3\nassert solution.maxTaskAssign([24, 30, 45, 52, 71, 96, 100], [92, 94], 0, 91) == 2\nassert solution.maxTaskAssign([4, 10, 22, 36, 67, 74, 79, 84, 91], [6, 52, 55, 67], 4, 66) == 4\nassert solution.maxTaskAssign([4, 21], [49, 65, 97], 3, 92) == 2\nassert solution.maxTaskAssign([6, 59, 81, 83], [68, 82], 2, 93) == 2\nassert solution.maxTaskAssign([6, 19, 32, 34, 37, 84, 89], [15, 23, 29, 37, 47, 85, 88, 95], 4, 41) == 7\nassert solution.maxTaskAssign([80, 87], [17, 23, 28, 50], 3, 2) == 0\nassert solution.maxTaskAssign([1, 19, 25, 27], [14, 53, 67, 75, 78, 82], 6, 81) == 4\nassert solution.maxTaskAssign([14, 16, 23, 27, 49, 71, 94, 95], [75, 78], 0, 98) == 2\nassert solution.maxTaskAssign([3, 57], [1, 7, 15, 42, 45, 47, 50, 55, 93, 97], 5, 99) == 2\nassert solution.maxTaskAssign([3, 41, 52, 70, 74], [1, 20, 32, 36, 49, 61, 76, 77, 84, 96], 8, 94) == 5\nassert solution.maxTaskAssign([32, 67, 74], [9, 11, 21, 25, 65, 81, 85, 86, 87, 90], 10, 70) == 3\nassert solution.maxTaskAssign([42, 56, 70, 73, 99], [3, 11, 39, 51, 57, 64, 70, 90], 6, 16) == 5\nassert solution.maxTaskAssign([2, 14, 34, 51, 52, 60, 61, 67, 83, 85], [4, 17, 27, 43, 74, 92], 0, 43) == 5\nassert solution.maxTaskAssign([28, 48, 67, 69, 80], [2, 16, 25, 44, 55, 64, 70, 90], 6, 43) == 5\nassert solution.maxTaskAssign([73, 76, 87, 96], [24, 45, 92], 3, 67) == 3\nassert solution.maxTaskAssign([4, 6, 13, 37, 55, 87, 96, 100], [13, 18, 34, 43, 71, 75, 86, 96], 8, 46) == 8\nassert solution.maxTaskAssign([33, 50, 55, 60, 74, 88, 91, 93], [3, 4, 6, 35, 36, 40, 66], 1, 6) == 2\nassert solution.maxTaskAssign([5, 9, 54, 75, 77, 97], [8, 25, 29, 35, 53, 97, 98], 6, 39) == 6\nassert solution.maxTaskAssign([6, 17, 30, 69, 74], [2, 61], 1, 44) == 2\nassert solution.maxTaskAssign([2, 14, 57, 61, 84], [2, 10, 24, 36, 85, 86, 89], 2, 50) == 5\nassert solution.maxTaskAssign([14, 17, 18, 27, 65, 82, 84, 92], [25, 39, 54, 59], 1, 45) == 4\nassert solution.maxTaskAssign([2, 85, 99], [19, 39, 41, 44, 47, 66, 93], 3, 23) == 3\nassert solution.maxTaskAssign([97, 98], [10, 26, 40], 3, 84) == 2\nassert solution.maxTaskAssign([24, 28, 56, 58, 62, 64, 77, 91], [1, 3, 9, 19, 23, 67, 82, 95], 1, 37) == 4\nassert solution.maxTaskAssign([6, 13, 31, 41, 46, 71], [28, 40, 44, 57, 66], 5, 73) == 5\nassert solution.maxTaskAssign([1, 20, 29, 61, 82, 83, 89, 99], [25, 45, 57, 69], 3, 95) == 4\nassert solution.maxTaskAssign([24, 25, 26, 43, 55, 72], [9, 19, 48, 56, 67, 72, 82, 86, 98], 6, 56) == 6\nassert solution.maxTaskAssign([41, 44, 49, 55, 57, 86, 92, 99], [36, 60, 73, 79, 82, 87, 92], 5, 49) == 7\nassert solution.maxTaskAssign([14, 51, 53, 60, 62, 84], [30, 40, 55, 76, 88, 99], 2, 44) == 6\nassert solution.maxTaskAssign([17, 20, 22, 27, 48, 59, 68, 77], [64, 74], 0, 49) == 2\nassert solution.maxTaskAssign([2, 6, 7, 36, 65, 66, 76, 77, 81, 88], [29, 65, 93, 99], 0, 44) == 4\nassert solution.maxTaskAssign([12, 14, 18, 68, 69, 71, 79, 91], [13, 58, 66, 83, 89, 98], 6, 76) == 6\nassert solution.maxTaskAssign([8, 14, 25, 26, 29, 47, 62, 85], [72, 89], 1, 33) == 2\nassert solution.maxTaskAssign([16, 22, 51, 60, 79, 87, 90], [42, 58], 1, 0) == 2",
  "inefficient_solution": "class Solution:\n    def maxTaskAssign(\n        self, tasks: List[int], workers: List[int], pills: int, strength: int\n    ) -> int:\n        for _ in range(1000):\n            for i in range(len(tasks)):\n                tasks[i] *= 10\n            for j in range(len(workers)):\n                workers[j] *= 10\n        def check(x):\n            i = 0\n            q = deque()\n            p = pills\n            for j in range(m - x, m):\n                while i < x and tasks[i] <= workers[j] + strength:\n                    q.append(tasks[i])\n                    i += 1\n                if not q:\n                    return False\n                if q[0] <= workers[j]:\n                    q.popleft()\n                elif p == 0:\n                    return False\n                else:\n                    p -= 1\n                    q.pop()\n            return True\n\n        n, m = len(tasks), len(workers)\n        tasks.sort()\n        workers.sort()\n        left, right = 0, min(n, m)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
  "is_python": true
}