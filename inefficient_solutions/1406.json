{
  "problem_idx": 1406,
  "task_name": "Stone Game III",
  "markdown_description": "\nAlice and Bob continue their games with piles of stones. There are several stones **arranged in a row**, and each stone has an associated value which is an integer given in the array `stoneValue`.\n\n\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take `1`, `2`, or `3` stones from the **first** remaining stones in the row.\n\n\nThe score of each player is the sum of the values of the stones taken. The score of each player is `0` initially.\n\n\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\n\n\nAssume Alice and Bob **play optimally**.\n\n\nReturn `\"Alice\"` *if Alice will win,* `\"Bob\"` *if Bob will win, or* `\"Tie\"` *if they will end the game with the same score*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** stoneValue = [1,2,3,7]\n**Output:** \"Bob\"\n**Explanation:** Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** stoneValue = [1,2,3,-9]\n**Output:** \"Alice\"\n**Explanation:** Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** stoneValue = [1,2,3,6]\n**Output:** \"Tie\"\n**Explanation:** Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= stoneValue.length <= 5 * 104`\n* `-1000 <= stoneValue[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def stoneGameIII(self, stoneValue: List[int]) -> str:\n        @cache\n        def dfs(i: int) -> int:\n            if i >= n:\n                return 0\n            ans, s = -inf, 0\n            for j in range(3):\n                if i + j >= n:\n                    break\n                s += stoneValue[i + j]\n                ans = max(ans, s - dfs(i + j + 1))\n            return ans\n\n        n = len(stoneValue)\n        ans = dfs(0)\n        if ans == 0:\n            return 'Tie'\n        return 'Alice' if ans > 0 else 'Bob'\n",
  "test_case_generator": "\nimport random\nfrom functools import cache\nfrom typing import List\n\nclass Solution:\n    def stoneGameIII(self, stoneValue: List[int]) -> str:\n        @cache\n        def dfs(i: int) -> int:\n            if i >= n:\n                return 0\n            ans, s = -float('inf'), 0\n            for j in range(3):\n                if i + j >= n:\n                    break\n                s += stoneValue[i + j]\n                ans = max(ans, s - dfs(i + j + 1))\n            return ans\n\n        n = len(stoneValue)\n        ans = dfs(0)\n        if ans == 0:\n            return 'Tie'\n        return 'Alice' if ans > 0 else 'Bob'\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random stone values list\n    stoneValue = random.choices(range(-1000, 1001), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.stoneGameIII(stoneValue)\n\n    return stoneValue, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        stoneValue, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.stoneGameIII(stoneValue) == expected_result\n        print(f\"assert solution.stoneGameIII({stoneValue}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.stoneGameIII({stoneValue}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.stoneGameIII([519, -702, -273, -508, 484, -348, -105]) == Alice\nassert solution.stoneGameIII([-446]) == Bob\nassert solution.stoneGameIII([322, 153]) == Alice\nassert solution.stoneGameIII([-529, 574, -201]) == Alice\nassert solution.stoneGameIII([-627]) == Bob\nassert solution.stoneGameIII([-506, -703, -308, 369, 698, -700, 634, -107, -261]) == Alice\nassert solution.stoneGameIII([409, 518, -268, -563, 288, 610]) == Alice\nassert solution.stoneGameIII([-629, -555, 741, -537, 409, -21]) == Bob\nassert solution.stoneGameIII([901, 954, -572, -261, 2, -762]) == Alice\nassert solution.stoneGameIII([-444, 37]) == Bob\nassert solution.stoneGameIII([16]) == Alice\nassert solution.stoneGameIII([362, -777]) == Alice\nassert solution.stoneGameIII([872, 522, -318, -215, -976]) == Alice\nassert solution.stoneGameIII([158, -362, -595]) == Alice\nassert solution.stoneGameIII([501, -489, -586, -861, -937, -388]) == Alice\nassert solution.stoneGameIII([576, -719, -804, -148, 790, 861, -260, 669]) == Alice\nassert solution.stoneGameIII([756, 68, -740]) == Alice\nassert solution.stoneGameIII([-530]) == Bob\nassert solution.stoneGameIII([252, -598, 440, -379, 758]) == Alice\nassert solution.stoneGameIII([452, -735, 733, -66, -98]) == Alice\nassert solution.stoneGameIII([-207, -128, 405, 22, -303, 106, 90, -739]) == Alice\nassert solution.stoneGameIII([-456, -802, -784, -519, 739, 973, 823, -387, -269]) == Bob\nassert solution.stoneGameIII([-831, 952, 76, -547, -212, 192, -667, -951, 341]) == Alice\nassert solution.stoneGameIII([-938, -647, 58, -491, -290, 41, 160, 627, -7, -501]) == Bob\nassert solution.stoneGameIII([65, -198, 104, 952, -117, 738, 950]) == Alice\nassert solution.stoneGameIII([652, -176, 846, -344, -157, -709, 276, 686]) == Alice\nassert solution.stoneGameIII([-727, 148, 614, -226, 46, 57, -896]) == Bob\nassert solution.stoneGameIII([-88, 883]) == Alice\nassert solution.stoneGameIII([233]) == Alice\nassert solution.stoneGameIII([151]) == Alice\nassert solution.stoneGameIII([48, -601, -112, 256, -109, -665, 642, 942]) == Bob\nassert solution.stoneGameIII([-913, -475]) == Bob\nassert solution.stoneGameIII([-272, 301, -574]) == Alice\nassert solution.stoneGameIII([-825, -185, -511, 938, -814, 344, -478, 71, -424, 464]) == Bob\nassert solution.stoneGameIII([884]) == Alice\nassert solution.stoneGameIII([-609, 151, 481]) == Alice\nassert solution.stoneGameIII([17, -700]) == Alice\nassert solution.stoneGameIII([-348, 76, 645, -436, 867, -542, -22, -352]) == Bob\nassert solution.stoneGameIII([67]) == Alice\nassert solution.stoneGameIII([375, -78, -90, -565, 115, -617, 644, -11, -615, 70]) == Alice\nassert solution.stoneGameIII([646, -848, -208]) == Alice\nassert solution.stoneGameIII([-475, 116, 493, 519]) == Bob\nassert solution.stoneGameIII([851, 944, -747, 816, -777, -496, -882, -215, -108, -975]) == Alice\nassert solution.stoneGameIII([982]) == Alice\nassert solution.stoneGameIII([201, 731, -573, 65, -408, -997]) == Alice\nassert solution.stoneGameIII([-813, -261, -73, -606, 315, 575, -86, -395, -926, 821]) == Bob\nassert solution.stoneGameIII([-234, 43, -809, 893, 543, -32, -918, 43]) == Alice\nassert solution.stoneGameIII([261, 306, 548, -194]) == Alice\nassert solution.stoneGameIII([-867, -451, 794, 632]) == Bob\nassert solution.stoneGameIII([138]) == Alice\nassert solution.stoneGameIII([-343, -959, 869]) == Bob\nassert solution.stoneGameIII([558, -76]) == Alice\nassert solution.stoneGameIII([160, -42, 565, -262]) == Alice\nassert solution.stoneGameIII([-489, 770, -909, -336, 879]) == Alice\nassert solution.stoneGameIII([898, 652, 463, -193]) == Alice\nassert solution.stoneGameIII([418, 263, -488, -457, 732, 861, -224, 155, -169]) == Alice\nassert solution.stoneGameIII([176, -207]) == Alice\nassert solution.stoneGameIII([239]) == Alice\nassert solution.stoneGameIII([697, 463, 183, 824, -510, 78, -586, 102, 967, 60]) == Alice\nassert solution.stoneGameIII([-910, 329, 182, 414, 604, -741, -898]) == Bob\nassert solution.stoneGameIII([828, 381, 752, 213, -8]) == Alice\nassert solution.stoneGameIII([36, 209, 808, -150]) == Alice\nassert solution.stoneGameIII([593, -796, 281, -346, -354]) == Alice\nassert solution.stoneGameIII([537, -31]) == Alice\nassert solution.stoneGameIII([91, 285, -917, 659, 206]) == Alice\nassert solution.stoneGameIII([215, -136, -727, -63]) == Alice\nassert solution.stoneGameIII([873, -830, 876, 625, 345, -418, -574, -45]) == Alice\nassert solution.stoneGameIII([-28, 687, 723, 549, -954, -128, -764]) == Alice\nassert solution.stoneGameIII([578, 591, -120, -705, 780, 63, 969]) == Alice\nassert solution.stoneGameIII([60, 820, -576, -200, -336, -913]) == Alice\nassert solution.stoneGameIII([766, -458, -705, 926, -144]) == Alice\nassert solution.stoneGameIII([814, -336, -343, 234]) == Alice\nassert solution.stoneGameIII([213, 364, -703]) == Alice\nassert solution.stoneGameIII([-303, 912, -525, 31, -781, 812, -980, -472]) == Alice\nassert solution.stoneGameIII([-950, -886, -684, 655]) == Bob\nassert solution.stoneGameIII([934, 608, -490, 124, 380, -717, -763]) == Alice\nassert solution.stoneGameIII([-132]) == Bob\nassert solution.stoneGameIII([510, 652, -446, 765, -595, -861, -973]) == Alice\nassert solution.stoneGameIII([464, 287, -950, -700, 417, -955, 108]) == Alice\nassert solution.stoneGameIII([882, -183, 678, -753, 193, -853, 70]) == Alice\nassert solution.stoneGameIII([-692, -624, -22]) == Bob\nassert solution.stoneGameIII([-118, -736, 921, 227, 489, -651, -258, -213, -131, 261]) == Alice\nassert solution.stoneGameIII([844, 568, -903, 727, 751, -140, -436, 739]) == Alice\nassert solution.stoneGameIII([61, 862, 251, 147]) == Alice\nassert solution.stoneGameIII([-677, -845, 988, 358, 244, 316, -311, -283, 264]) == Bob\nassert solution.stoneGameIII([-918, -171, 255, -733, 712, -58]) == Bob\nassert solution.stoneGameIII([-84, 314, -104, -275, -798, 327, 150, 144]) == Alice\nassert solution.stoneGameIII([298, 800, -943, 971, 186, 545, 312, 508, 289, -366]) == Alice\nassert solution.stoneGameIII([696, -555, -174, -99, -38, -890, -741, -291, 670]) == Alice\nassert solution.stoneGameIII([179, -392, 823]) == Alice\nassert solution.stoneGameIII([413, 285, 6, -299, -91, -384, -521]) == Alice\nassert solution.stoneGameIII([-936, 413]) == Bob\nassert solution.stoneGameIII([21, 56, -716, -237, 969, 509, -979]) == Alice\nassert solution.stoneGameIII([-683, -196, -654, 361, -32]) == Bob\nassert solution.stoneGameIII([-494, 702, 142, 59, 381, -517, -418, 385, -572]) == Bob\nassert solution.stoneGameIII([-538, -507, -971, -458]) == Bob\nassert solution.stoneGameIII([561, -110, -368, -52, -403, -280, 330, -881, -804, -660]) == Alice\nassert solution.stoneGameIII([-996, -237, 647, 605, -148, 449, -91]) == Bob\nassert solution.stoneGameIII([-859, 913]) == Alice\nassert solution.stoneGameIII([-984]) == Bob",
  "inefficient_solution": "class Solution:\n    def stoneGameIII(self, stoneValue):\n        n = len(stoneValue)\n        dp = [[0]*n for _ in range(n)]\n        for i in range(n-1, -1, -1):\n            score = stoneValue[i]\n            for j in range(1, min(n-i, 3)):\n                score += stoneValue[i+j]\n                dp[i][j] = max((score-dp[i+j][0] if i+j < n else 0) for k in range(3))\n        if dp[0][0] == 0:\n            return 'Tie'\n        return 'Alice' if dp[0][0] > 0 else 'Bob'",
  "is_python": true
}