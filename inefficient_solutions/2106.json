{
  "problem_idx": 2106,
  "task_name": "Maximum Fruits Harvested After at Most K Steps",
  "markdown_description": "\nFruits are available at some positions on an infinite x-axis. You are given a 2D integer array `fruits` where `fruits[i] = [positioni, amounti]` depicts `amounti` fruits at the position `positioni`. `fruits` is already **sorted** by `positioni` in **ascending order**, and each `positioni` is **unique**.\n\n\nYou are also given an integer `startPos` and an integer `k`. Initially, you are at the position `startPos`. From any position, you can either walk to the **left or right**. It takes **one step** to move **one unit** on the x-axis, and you can walk **at most** `k` steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.\n\n\nReturn *the **maximum total number** of fruits you can harvest*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2106.Maximum%20Fruits%20Harvested%20After%20at%20Most%20K%20Steps/images/1.png)\n\n```\n\n**Input:** fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4\n**Output:** 9\n**Explanation:** \nThe optimal way is to:\n- Move right to position 6 and harvest 3 fruits\n- Move right to position 8 and harvest 6 fruits\nYou moved 3 steps and harvested 3 + 6 = 9 fruits in total.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2106.Maximum%20Fruits%20Harvested%20After%20at%20Most%20K%20Steps/images/2.png)\n\n```\n\n**Input:** fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4\n**Output:** 14\n**Explanation:** \nYou can move at most k = 4 steps, so you cannot reach position 0 nor 10.\nThe optimal way is to:\n- Harvest the 7 fruits at the starting position 5\n- Move left to position 4 and harvest 1 fruit\n- Move right to position 6 and harvest 2 fruits\n- Move right to position 7 and harvest 4 fruits\nYou moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2106.Maximum%20Fruits%20Harvested%20After%20at%20Most%20K%20Steps/images/3.png)\n\n```\n\n**Input:** fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2\n**Output:** 0\n**Explanation:**\nYou can move at most k = 2 steps and cannot reach any position with fruits.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= fruits.length <= 105`\n* `fruits[i].length == 2`\n* `0 <= startPos, positioni <= 2 * 105`\n* `positioni-1 < positioni` for any `i > 0`\u00a0(**0-indexed**)\n* `1 <= amounti <= 104`\n* `0 <= k <= 2 * 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:\n        ans = i = s = 0\n        for j, (pj, fj) in enumerate(fruits):\n            s += fj\n            while (\n                i <= j\n                and pj\n                - fruits[i][0]\n                + min(abs(startPos - fruits[i][0]), abs(startPos - fruits[j][0]))\n                > k\n            ):\n                s -= fruits[i][1]\n                i += 1\n            ans = max(ans, s)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:\n        ans = i = s = 0\n        for j, (pj, fj) in enumerate(fruits):\n            s += fj\n            while (\n                i <= j\n                and pj\n                - fruits[i][0]\n                + min(abs(startPos - fruits[i][0]), abs(startPos - fruits[j][0]))\n                > k\n            ):\n                s -= fruits[i][1]\n                i += 1\n            ans = max(ans, s)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    fruits = []\n    for _ in range(random.randint(2, 10)):\n        position = random.randint(0, 10)\n        amount = random.randint(1, 10)\n        fruits.append([position, amount])\n    \n    startPos = random.randint(0, 10)\n    k = random.randint(0, 10)\n\n    expected_result = solution.maxTotalFruits(fruits, startPos, k)\n\n    return fruits, startPos, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        fruits, startPos, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxTotalFruits(fruits, startPos, k) == expected_result\n        print(f\"assert solution.maxTotalFruits({fruits}, {startPos}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxTotalFruits({fruits}, {startPos}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxTotalFruits([[10, 10], [9, 4], [3, 10]], 10, 8) == 24\nassert solution.maxTotalFruits([[7, 4], [5, 4]], 6, 7) == 8\nassert solution.maxTotalFruits([[1, 1], [8, 7], [0, 3], [10, 4], [4, 2]], 10, 10) == 17\nassert solution.maxTotalFruits([[0, 3], [7, 10], [8, 1], [6, 1], [7, 3], [1, 8], [3, 4], [4, 3], [9, 5], [3, 4]], 6, 3) == 39\nassert solution.maxTotalFruits([[10, 10], [3, 7], [1, 6], [3, 7], [9, 8], [4, 3], [1, 4]], 3, 8) == 45\nassert solution.maxTotalFruits([[0, 7], [3, 1], [8, 4], [9, 4], [1, 1], [0, 9], [5, 10], [3, 10], [3, 2], [1, 10]], 8, 6) == 50\nassert solution.maxTotalFruits([[3, 10], [8, 2], [10, 7], [4, 7], [9, 5], [8, 2], [5, 2], [5, 10], [10, 2], [0, 6]], 9, 9) == 53\nassert solution.maxTotalFruits([[8, 9], [9, 2], [6, 8]], 10, 8) == 19\nassert solution.maxTotalFruits([[0, 10], [2, 7], [2, 1], [9, 7]], 5, 7) == 18\nassert solution.maxTotalFruits([[10, 5], [6, 6], [4, 3], [8, 8], [3, 7], [3, 3], [1, 1]], 7, 2) == 19\nassert solution.maxTotalFruits([[2, 6], [6, 6]], 2, 8) == 12\nassert solution.maxTotalFruits([[7, 9], [1, 6], [10, 4], [9, 3], [9, 6]], 9, 3) == 15\nassert solution.maxTotalFruits([[8, 3], [8, 4], [7, 2], [6, 3], [3, 6], [7, 7], [10, 1]], 6, 4) == 26\nassert solution.maxTotalFruits([[0, 1], [4, 6], [10, 5], [0, 2]], 9, 0) == 0\nassert solution.maxTotalFruits([[1, 5], [3, 7]], 6, 10) == 12\nassert solution.maxTotalFruits([[7, 1], [1, 8], [1, 1], [7, 9], [7, 1], [9, 2], [2, 7], [7, 2]], 6, 3) == 31\nassert solution.maxTotalFruits([[0, 8], [1, 10], [4, 10], [9, 1], [2, 4], [3, 9], [0, 5]], 7, 0) == 0\nassert solution.maxTotalFruits([[2, 9], [9, 1], [3, 2], [6, 5], [5, 6], [7, 9], [3, 2]], 0, 5) == 9\nassert solution.maxTotalFruits([[5, 7], [3, 8], [8, 5], [1, 7], [5, 8], [10, 8], [3, 3], [3, 6]], 3, 5) == 35\nassert solution.maxTotalFruits([[3, 4], [10, 1], [6, 6], [5, 4]], 9, 0) == 0\nassert solution.maxTotalFruits([[2, 7], [6, 7]], 7, 8) == 14\nassert solution.maxTotalFruits([[5, 7], [4, 5]], 3, 8) == 12\nassert solution.maxTotalFruits([[7, 3], [2, 10], [8, 9], [1, 1], [0, 9], [2, 7], [4, 6]], 1, 8) == 45\nassert solution.maxTotalFruits([[2, 7], [1, 9], [4, 7], [10, 8], [2, 6], [6, 5], [8, 3], [0, 4], [4, 5]], 4, 1) == 7\nassert solution.maxTotalFruits([[2, 4], [10, 5], [0, 1], [8, 5]], 7, 1) == 5\nassert solution.maxTotalFruits([[3, 5], [4, 7], [5, 5], [7, 4], [1, 8], [10, 9], [5, 1], [9, 9], [4, 9]], 3, 3) == 17\nassert solution.maxTotalFruits([[10, 9], [2, 1], [10, 6], [10, 1]], 3, 10) == 17\nassert solution.maxTotalFruits([[1, 3], [1, 8], [4, 6], [0, 1]], 3, 0) == 0\nassert solution.maxTotalFruits([[4, 8], [2, 7], [5, 5], [1, 4], [3, 9], [9, 8], [10, 1]], 8, 10) == 42\nassert solution.maxTotalFruits([[7, 6], [9, 8], [0, 7], [5, 2], [3, 8], [9, 9], [9, 2], [3, 8], [7, 7], [7, 2]], 1, 8) == 59\nassert solution.maxTotalFruits([[1, 5], [0, 3], [7, 6], [5, 5], [6, 6], [0, 9]], 4, 6) == 26\nassert solution.maxTotalFruits([[0, 6], [5, 4], [7, 9], [10, 10], [8, 2], [6, 6], [3, 8], [9, 5], [4, 9], [8, 8]], 2, 9) == 61\nassert solution.maxTotalFruits([[1, 6], [1, 2], [5, 3], [6, 5]], 7, 4) == 8\nassert solution.maxTotalFruits([[2, 6], [0, 8], [4, 8], [1, 10], [0, 1], [3, 6]], 1, 7) == 39\nassert solution.maxTotalFruits([[6, 10], [4, 2], [4, 3], [9, 10], [10, 6], [5, 1], [3, 5]], 0, 7) == 15\nassert solution.maxTotalFruits([[1, 2], [3, 10]], 1, 7) == 12\nassert solution.maxTotalFruits([[3, 5], [10, 6], [6, 8], [8, 7]], 5, 5) == 21\nassert solution.maxTotalFruits([[7, 5], [9, 7]], 5, 9) == 12\nassert solution.maxTotalFruits([[6, 8], [1, 10], [7, 1], [8, 8], [0, 7], [5, 3], [0, 2], [10, 1], [4, 6]], 3, 10) == 46\nassert solution.maxTotalFruits([[9, 2], [7, 8], [6, 6]], 3, 4) == 14\nassert solution.maxTotalFruits([[2, 10], [9, 2], [1, 2], [2, 9], [9, 1], [8, 9], [4, 8], [9, 1], [2, 2], [5, 4]], 7, 7) == 38\nassert solution.maxTotalFruits([[2, 1], [6, 7]], 2, 7) == 8\nassert solution.maxTotalFruits([[3, 4], [7, 3], [10, 4], [9, 4], [0, 7], [8, 7], [9, 2], [8, 1], [0, 5], [0, 2]], 10, 9) == 39\nassert solution.maxTotalFruits([[9, 2], [7, 9], [4, 10], [5, 3], [3, 8], [5, 1], [5, 8], [6, 6], [3, 4]], 5, 3) == 49\nassert solution.maxTotalFruits([[4, 3], [4, 9], [0, 9], [5, 7], [8, 4], [8, 10], [9, 3], [7, 10]], 7, 10) == 55\nassert solution.maxTotalFruits([[3, 7], [7, 7], [5, 6], [0, 6]], 8, 8) == 26\nassert solution.maxTotalFruits([[5, 2], [0, 10], [9, 9], [3, 7], [6, 3], [1, 1], [9, 10], [0, 4]], 10, 3) == 34\nassert solution.maxTotalFruits([[1, 7], [5, 4], [10, 4], [1, 2], [1, 6]], 0, 3) == 8\nassert solution.maxTotalFruits([[9, 10], [2, 8]], 6, 7) == 18\nassert solution.maxTotalFruits([[9, 1], [6, 8], [6, 6], [8, 5], [8, 1], [9, 9], [7, 8], [3, 8], [10, 2]], 5, 9) == 48\nassert solution.maxTotalFruits([[9, 5], [9, 7], [2, 2], [10, 1]], 8, 7) == 15\nassert solution.maxTotalFruits([[2, 9], [7, 2]], 9, 9) == 11\nassert solution.maxTotalFruits([[2, 6], [7, 1], [2, 9], [5, 10]], 0, 4) == 9\nassert solution.maxTotalFruits([[1, 3], [4, 2], [4, 6], [5, 1], [3, 1], [4, 2], [9, 7], [10, 1], [3, 3], [2, 2]], 2, 3) == 12\nassert solution.maxTotalFruits([[2, 9], [2, 7], [9, 4], [9, 7], [10, 10], [6, 10], [3, 3]], 4, 10) == 50\nassert solution.maxTotalFruits([[3, 10], [8, 1]], 10, 3) == 1\nassert solution.maxTotalFruits([[4, 7], [7, 7], [2, 3], [0, 3], [0, 10], [0, 7], [4, 7], [7, 10], [7, 10], [3, 7]], 1, 0) == 0\nassert solution.maxTotalFruits([[9, 4], [7, 3], [3, 4], [7, 2]], 10, 8) == 13\nassert solution.maxTotalFruits([[6, 6], [5, 2]], 5, 3) == 8\nassert solution.maxTotalFruits([[10, 5], [6, 1], [5, 1]], 8, 7) == 7\nassert solution.maxTotalFruits([[0, 3], [1, 10], [1, 3], [2, 8], [6, 6], [10, 8], [9, 6], [0, 3]], 9, 1) == 17\nassert solution.maxTotalFruits([[10, 9], [6, 9], [1, 2], [8, 10], [5, 4], [3, 6], [7, 4], [9, 8], [10, 4], [7, 8]], 7, 6) == 64\nassert solution.maxTotalFruits([[1, 2], [3, 4], [2, 2], [5, 5], [4, 5], [7, 3], [1, 4], [7, 3], [8, 6]], 6, 4) == 26\nassert solution.maxTotalFruits([[2, 3], [8, 3], [7, 8], [8, 5], [4, 3]], 6, 9) == 22\nassert solution.maxTotalFruits([[9, 5], [8, 6], [7, 8]], 5, 6) == 19\nassert solution.maxTotalFruits([[5, 4], [10, 10]], 5, 1) == 4\nassert solution.maxTotalFruits([[5, 1], [7, 4], [0, 8], [4, 9], [1, 9], [4, 7], [2, 8], [3, 8], [6, 2], [8, 4]], 3, 0) == 8\nassert solution.maxTotalFruits([[3, 6], [7, 9], [5, 10], [8, 1], [4, 8]], 7, 5) == 28\nassert solution.maxTotalFruits([[8, 5], [6, 7], [2, 10], [6, 6], [3, 4], [4, 6], [7, 4], [7, 8], [1, 7]], 0, 5) == 10\nassert solution.maxTotalFruits([[4, 3], [2, 9], [0, 1], [0, 3], [6, 5], [4, 8]], 8, 2) == 13\nassert solution.maxTotalFruits([[2, 8], [8, 10], [1, 8], [9, 10], [1, 5], [1, 4], [4, 10], [5, 8]], 9, 8) == 63\nassert solution.maxTotalFruits([[9, 1], [1, 6], [3, 7]], 0, 0) == 0\nassert solution.maxTotalFruits([[5, 8], [10, 10], [9, 8], [2, 10], [1, 9], [8, 10], [0, 6], [4, 4]], 8, 10) == 65\nassert solution.maxTotalFruits([[4, 1], [4, 9], [9, 7], [5, 3], [5, 7], [4, 9], [1, 8]], 6, 8) == 44\nassert solution.maxTotalFruits([[3, 8], [8, 5], [8, 1], [10, 8], [9, 8], [1, 3]], 0, 2) == 3\nassert solution.maxTotalFruits([[4, 8], [6, 3], [2, 3]], 4, 0) == 8\nassert solution.maxTotalFruits([[3, 9], [2, 9], [4, 3], [5, 4], [8, 6], [5, 2]], 1, 0) == 0\nassert solution.maxTotalFruits([[4, 6], [5, 7], [10, 3], [8, 6], [9, 6], [4, 3]], 9, 5) == 18\nassert solution.maxTotalFruits([[1, 3], [7, 6], [10, 6], [7, 7], [4, 5], [1, 9], [9, 4]], 10, 2) == 31\nassert solution.maxTotalFruits([[1, 8], [4, 3], [3, 2], [3, 6]], 2, 6) == 19\nassert solution.maxTotalFruits([[3, 5], [2, 7], [0, 1], [1, 8], [1, 4], [5, 7], [1, 5]], 5, 1) == 12\nassert solution.maxTotalFruits([[7, 10], [1, 3], [7, 3], [5, 1], [1, 4]], 5, 0) == 5\nassert solution.maxTotalFruits([[10, 7], [2, 6], [7, 8], [1, 6], [9, 7], [1, 1], [3, 7], [9, 4], [7, 7]], 5, 9) == 53\nassert solution.maxTotalFruits([[8, 6], [6, 1], [8, 3], [4, 9], [10, 10]], 9, 7) == 29\nassert solution.maxTotalFruits([[6, 3], [10, 2], [2, 8], [7, 3], [7, 4]], 4, 3) == 8\nassert solution.maxTotalFruits([[9, 5], [1, 4], [3, 10], [5, 3]], 7, 4) == 22\nassert solution.maxTotalFruits([[3, 1], [3, 6], [4, 3], [4, 2]], 4, 1) == 12\nassert solution.maxTotalFruits([[8, 7], [8, 1], [8, 7], [3, 4], [3, 9], [4, 10], [7, 8], [5, 4]], 0, 10) == 50\nassert solution.maxTotalFruits([[3, 6], [9, 10]], 3, 8) == 16\nassert solution.maxTotalFruits([[1, 2], [9, 7], [3, 2], [10, 9]], 2, 2) == 2\nassert solution.maxTotalFruits([[6, 9], [10, 6], [9, 8], [5, 6], [9, 10], [0, 10], [6, 1], [10, 6]], 9, 6) == 56\nassert solution.maxTotalFruits([[9, 5], [5, 8], [8, 7], [0, 6], [10, 10], [8, 4], [4, 4], [0, 2], [3, 4]], 9, 3) == 50\nassert solution.maxTotalFruits([[1, 2], [10, 10]], 6, 4) == 10\nassert solution.maxTotalFruits([[3, 2], [0, 3], [10, 6]], 9, 3) == 6\nassert solution.maxTotalFruits([[6, 9], [10, 3]], 10, 0) == 3\nassert solution.maxTotalFruits([[2, 10], [4, 7], [6, 7], [8, 7], [0, 4], [7, 3], [5, 4], [10, 2]], 3, 9) == 44\nassert solution.maxTotalFruits([[2, 3], [7, 8], [5, 7], [3, 9], [6, 8], [1, 1], [9, 8]], 9, 7) == 44\nassert solution.maxTotalFruits([[6, 5], [2, 10], [7, 5], [1, 6], [4, 10], [6, 1], [10, 1], [6, 8], [1, 8], [5, 9]], 1, 4) == 17\nassert solution.maxTotalFruits([[4, 10], [1, 3], [1, 10], [1, 5], [1, 8], [7, 8], [0, 6]], 6, 6) == 50\nassert solution.maxTotalFruits([[7, 1], [10, 8], [4, 4], [3, 6], [1, 5], [0, 1]], 2, 1) == 12",
  "inefficient_solution": "class Solution:\n    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:\n        n = len(fruits)\n        memo = [[0]*n for _ in range(2*n+1)]\n        for i in range(n):\n            for j in range(2*n+1):\n                memo[j][i] = -1\n        def dfs(pos, steps):\n            if pos < 0 or pos >= 2*n or steps < 0:\n                return 0\n            if memo[pos][steps] != -1:\n                return memo[pos][steps]\n            res = 0\n            if steps > 0:\n                res = dfs(pos-1, steps-1)\n            if steps > 0:\n                res = max(res, dfs(pos+1, steps-1))\n            for i in range(n):\n                if abs(pos-fruits[i][0]) <= steps:\n                    res = max(res, fruits[i][1] + dfs(pos-fruits[i][0], steps-2*abs(pos-fruits[i][0])))\n            memo[pos][steps] = res\n            return res\n        ans = 0\n        for i in range(n):\n            if abs(startPos-fruits[i][0]) <= k:\n                ans = max(ans, dfs(fruits[i][0], k-2*abs(startPos-fruits[i][0])))\n        return ans",
  "is_python": true
}