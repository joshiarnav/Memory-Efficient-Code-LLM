{
  "problem_idx": 1564,
  "task_name": "Put Boxes Into the Warehouse I",
  "markdown_description": "\nYou are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.\n\n\nBoxes are put into the warehouse by the following rules:\n\n\n* Boxes cannot be stacked.\n* You can rearrange the insertion order of the boxes.\n* Boxes can only be pushed into the warehouse from left to right only.\n* If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.\n\n\nReturn *the maximum number of boxes you can put into the warehouse.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1564.Put%20Boxes%20Into%20the%20Warehouse%20I/images/11.png)\n\n```\n\n**Input:** boxes = [4,3,4,1], warehouse = [5,3,3,4,1]\n**Output:** 3\n**Explanation:** \n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1564.Put%20Boxes%20Into%20the%20Warehouse%20I/images/12.png)\nWe can first put the box of height 1 in room 4. Then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. Lastly, we can put one box of height 4 in room 0.\nThere is no way we can fit all 4 boxes in the warehouse.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1564.Put%20Boxes%20Into%20the%20Warehouse%20I/images/21.png)\n\n```\n\n**Input:** boxes = [1,2,2,3,4], warehouse = [3,4,1,2]\n**Output:** 3\n**Explanation:** \n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1564.Put%20Boxes%20Into%20the%20Warehouse%20I/images/22.png)\nNotice that it's not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3.\nAlso, for the last two rooms, 2 and 3, only boxes of height 1 can fit.\nWe can fit 3 boxes maximum as shown above. The yellow box can also be put in room 2 instead.\nSwapping the orange and green boxes is also valid, or swapping one of them with the red box.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** boxes = [1,2,3], warehouse = [1,2,3,4]\n**Output:** 1\n**Explanation:** Since the first room in the warehouse is of height 1, we can only put boxes of height 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == warehouse.length`\n* `1 <= boxes.length, warehouse.length <= 105`\n* `1 <= boxes[i], warehouse[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        n = len(warehouse)\n        left = [warehouse[0]] * n\n        for i in range(1, n):\n            left[i] = min(left[i - 1], warehouse[i])\n        boxes.sort()\n        i, j = 0, n - 1\n        while i < len(boxes):\n            while j >= 0 and left[j] < boxes[i]:\n                j -= 1\n            if j < 0:\n                break\n            i, j = i + 1, j - 1\n        return i\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxBoxesInWarehouse(self, boxes, warehouse):\n        n = len(warehouse)\n        left = [warehouse[0]] * n\n        for i in range(1, n):\n            left[i] = min(left[i - 1], warehouse[i])\n        boxes.sort()\n        i, j = 0, n - 1\n        while i < len(boxes):\n            while j >= 0 and left[j] < boxes[i]:\n                j -= 1\n            if j < 0:\n                break\n            i, j = i + 1, j - 1\n        return i\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random boxes list\n    boxes = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate random warehouse list\n    warehouse = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxBoxesInWarehouse(boxes, warehouse)\n\n    return boxes, warehouse, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        boxes, warehouse, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxBoxesInWarehouse(boxes, warehouse) == expected_result\n        print(f\"assert solution.maxBoxesInWarehouse({boxes}, {warehouse}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxBoxesInWarehouse({boxes}, {warehouse}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxBoxesInWarehouse([25, 30, 31, 43, 50, 51, 73, 87, 89, 92], [37, 49]) == 2\nassert solution.maxBoxesInWarehouse([17, 18, 50, 58, 98], [92, 21]) == 2\nassert solution.maxBoxesInWarehouse([4, 41, 49, 52, 85, 88], [69, 9]) == 2\nassert solution.maxBoxesInWarehouse([31, 43, 53, 56, 68, 85, 96], [72, 91, 16, 84]) == 2\nassert solution.maxBoxesInWarehouse([19, 25, 83, 93], [36, 15, 22, 71, 26, 78, 35, 82]) == 1\nassert solution.maxBoxesInWarehouse([3, 59, 68, 72, 85], [10, 28, 36, 44]) == 1\nassert solution.maxBoxesInWarehouse([8, 56, 59, 67, 87], [71, 96, 4, 65, 55, 97, 25, 57]) == 2\nassert solution.maxBoxesInWarehouse([18, 21, 37, 57, 59, 71, 78], [28, 68, 43, 25, 44, 21]) == 2\nassert solution.maxBoxesInWarehouse([15, 22, 45, 62, 75, 85], [18, 92, 15, 12, 75, 6, 51, 24]) == 1\nassert solution.maxBoxesInWarehouse([69, 71, 85], [28, 83, 88]) == 0\nassert solution.maxBoxesInWarehouse([11, 13, 21, 53, 76, 85], [88, 4]) == 1\nassert solution.maxBoxesInWarehouse([38, 93], [57, 21, 31]) == 1\nassert solution.maxBoxesInWarehouse([2, 57, 64, 94], [58, 33, 32, 12, 77, 2, 9, 73, 67, 75]) == 2\nassert solution.maxBoxesInWarehouse([6, 47, 62, 84, 96], [58, 77, 9, 6, 63, 26, 8, 42, 46, 67]) == 2\nassert solution.maxBoxesInWarehouse([4, 37, 46], [100, 85, 54, 71]) == 3\nassert solution.maxBoxesInWarehouse([65, 69, 85], [27, 32, 83, 57, 53, 58]) == 0\nassert solution.maxBoxesInWarehouse([7, 18, 23, 28, 36, 41, 42, 61, 76, 88], [1, 2, 24, 75, 3, 89]) == 0\nassert solution.maxBoxesInWarehouse([45, 75, 80], [59, 79, 36, 58, 38, 4, 46, 87, 24, 70]) == 1\nassert solution.maxBoxesInWarehouse([8, 19, 35, 51, 73, 75, 83, 85, 97, 99], [41, 17, 3]) == 2\nassert solution.maxBoxesInWarehouse([48, 68], [93, 37, 2, 72, 71, 57, 18, 3, 5, 89]) == 1\nassert solution.maxBoxesInWarehouse([25, 64], [60, 77, 95]) == 1\nassert solution.maxBoxesInWarehouse([9, 34, 49, 68, 69, 89, 90], [63, 98, 37, 17, 41, 6, 8, 90, 84, 81]) == 3\nassert solution.maxBoxesInWarehouse([8, 24, 31, 43, 57], [97, 75, 36, 47]) == 4\nassert solution.maxBoxesInWarehouse([27, 36, 41, 48, 53, 86, 92, 94], [67, 21, 52, 16, 45, 100, 4]) == 1\nassert solution.maxBoxesInWarehouse([9, 38, 55, 69, 90, 100], [3, 55, 64, 61]) == 0\nassert solution.maxBoxesInWarehouse([2, 4, 20, 49, 55, 61, 65, 88, 92], [72, 41, 79, 24, 29, 73]) == 4\nassert solution.maxBoxesInWarehouse([23, 34, 63, 92], [19, 93, 66, 34, 43, 78, 72, 85, 88]) == 0\nassert solution.maxBoxesInWarehouse([4, 28, 34, 41, 65, 69, 77, 83], [24, 43, 5, 58, 68, 32, 67]) == 1\nassert solution.maxBoxesInWarehouse([3, 9, 33, 35, 38, 75, 77], [22, 100, 17]) == 2\nassert solution.maxBoxesInWarehouse([14, 25, 29, 37, 52, 54, 55, 84, 89], [60, 39, 68, 59, 57]) == 5\nassert solution.maxBoxesInWarehouse([18, 37, 39, 58, 63, 95], [45, 7, 86, 56, 78, 64]) == 1\nassert solution.maxBoxesInWarehouse([16, 52, 56, 72, 92], [100, 1, 37, 91]) == 1\nassert solution.maxBoxesInWarehouse([16, 24, 30, 49], [11, 64]) == 0\nassert solution.maxBoxesInWarehouse([1, 18, 20, 22, 55, 64, 69, 73, 99], [47, 18, 74, 91, 97, 72, 52, 9, 78]) == 3\nassert solution.maxBoxesInWarehouse([4, 5, 19, 28, 35, 40, 80, 89, 92, 93], [17, 38, 8, 68]) == 2\nassert solution.maxBoxesInWarehouse([47, 63, 100], [7, 63]) == 0\nassert solution.maxBoxesInWarehouse([7, 26, 51, 89], [93, 69, 88, 61, 78, 85, 8, 34, 29, 2]) == 4\nassert solution.maxBoxesInWarehouse([25, 45, 62, 93], [79, 22, 46, 43]) == 1\nassert solution.maxBoxesInWarehouse([11, 12, 26, 30, 32, 69, 78, 93, 100], [54, 4, 10, 87, 36]) == 1\nassert solution.maxBoxesInWarehouse([4, 11, 26, 52, 79, 82, 92], [51, 13, 2, 76, 20, 57, 70]) == 2\nassert solution.maxBoxesInWarehouse([14, 21, 56, 90], [55, 33, 73, 37, 47, 95, 2, 52]) == 2\nassert solution.maxBoxesInWarehouse([6, 25, 84], [3, 67]) == 0\nassert solution.maxBoxesInWarehouse([5, 36, 89, 99], [30, 80, 27, 24, 20]) == 1\nassert solution.maxBoxesInWarehouse([39, 59, 61, 74, 76, 92], [32, 74, 13]) == 0\nassert solution.maxBoxesInWarehouse([9, 17, 46, 59, 63, 69], [18, 45, 77, 23, 5, 28]) == 2\nassert solution.maxBoxesInWarehouse([9, 30, 43, 57, 59, 73], [62, 5, 4, 89, 76]) == 1\nassert solution.maxBoxesInWarehouse([50, 66, 71, 95], [88, 95, 13, 69, 91, 47, 27, 31]) == 2\nassert solution.maxBoxesInWarehouse([43, 92], [35, 83, 15, 92]) == 0\nassert solution.maxBoxesInWarehouse([7, 73], [46, 93, 55, 25, 57, 30, 53]) == 1\nassert solution.maxBoxesInWarehouse([11, 15, 36, 37, 59, 64, 72, 79, 94], [37, 15, 72, 28, 6, 1]) == 3\nassert solution.maxBoxesInWarehouse([41, 47, 61], [1, 91, 100, 22, 61, 39, 33, 45, 24]) == 0\nassert solution.maxBoxesInWarehouse([19, 22, 72, 84], [26, 79, 39, 100, 55, 21, 32, 91]) == 2\nassert solution.maxBoxesInWarehouse([1, 31, 35, 45, 58, 66, 75], [34, 85, 71, 100, 45, 83, 8, 13]) == 2\nassert solution.maxBoxesInWarehouse([32, 39], [82, 21, 20, 33, 27, 22, 37, 61]) == 1\nassert solution.maxBoxesInWarehouse([1, 20, 23, 30, 41, 45, 67, 71, 88, 91], [85, 59, 16, 12, 7]) == 3\nassert solution.maxBoxesInWarehouse([10, 67], [42, 56, 11, 93, 31, 75, 36, 61, 38]) == 1\nassert solution.maxBoxesInWarehouse([9, 12, 17, 23, 24, 45, 62, 98], [97, 19, 29, 32, 84]) == 4\nassert solution.maxBoxesInWarehouse([5, 50, 96], [49, 82, 42, 99, 22, 18]) == 1\nassert solution.maxBoxesInWarehouse([56, 64, 88, 100], [43, 70, 60, 41, 91, 99]) == 0\nassert solution.maxBoxesInWarehouse([1, 5, 9, 14, 42, 59, 67], [70, 19, 75]) == 3\nassert solution.maxBoxesInWarehouse([14, 39, 45, 46, 59, 69, 75, 85, 86, 90], [80, 100]) == 2\nassert solution.maxBoxesInWarehouse([9, 12, 21, 40, 42, 69, 75, 78, 93], [77, 28, 30]) == 3\nassert solution.maxBoxesInWarehouse([8, 25, 26, 29, 41, 44, 85, 87, 98, 99], [29, 90, 63, 61, 52, 11, 56]) == 4\nassert solution.maxBoxesInWarehouse([27, 52], [16, 72, 87, 46, 8, 80, 90, 66, 85]) == 0\nassert solution.maxBoxesInWarehouse([3, 4, 21, 57], [50, 9, 55, 8, 44, 36, 24]) == 3\nassert solution.maxBoxesInWarehouse([8, 28, 35, 41, 44, 64, 67, 93, 97], [48, 83]) == 2\nassert solution.maxBoxesInWarehouse([6, 50, 53], [58, 25, 18, 74, 87, 11, 46, 59, 70, 49]) == 2\nassert solution.maxBoxesInWarehouse([8, 27, 90, 98], [61, 47, 51, 83, 43, 32, 42, 98, 60]) == 2\nassert solution.maxBoxesInWarehouse([64, 99], [83, 6, 77, 75]) == 1\nassert solution.maxBoxesInWarehouse([6, 28, 46, 47, 55, 71, 74], [90, 29, 24, 21, 63, 92]) == 3\nassert solution.maxBoxesInWarehouse([1, 5, 6, 8, 13, 14, 15, 35, 39, 81], [85, 7, 98, 84, 71, 73, 24, 11]) == 4\nassert solution.maxBoxesInWarehouse([10, 11, 23, 51, 59], [27, 22, 11, 39]) == 3\nassert solution.maxBoxesInWarehouse([11, 24, 56, 62, 89, 92, 97], [30, 17]) == 2\nassert solution.maxBoxesInWarehouse([45, 55, 57], [10, 33, 82, 96, 4, 62, 75, 57]) == 0\nassert solution.maxBoxesInWarehouse([11, 12, 22, 41, 47, 48, 56, 61, 73, 96], [55, 8, 96, 6, 18]) == 1\nassert solution.maxBoxesInWarehouse([14, 24, 26, 88], [78, 86]) == 2\nassert solution.maxBoxesInWarehouse([9, 20, 22, 28, 34, 41, 52, 55, 80, 91], [83, 95]) == 2\nassert solution.maxBoxesInWarehouse([42, 69, 70], [100, 82, 15, 45, 72, 33, 8, 27, 91]) == 2\nassert solution.maxBoxesInWarehouse([1, 9, 21, 42, 43, 69, 74, 89], [62, 6, 40, 74, 43]) == 2\nassert solution.maxBoxesInWarehouse([14, 28, 51], [4, 32]) == 0\nassert solution.maxBoxesInWarehouse([79, 82, 85, 90], [9, 77, 6, 84, 73, 4, 15, 44, 27]) == 0\nassert solution.maxBoxesInWarehouse([20, 22, 38, 61, 72, 73, 75, 83, 97], [97, 14, 18, 7]) == 1\nassert solution.maxBoxesInWarehouse([38, 49, 82, 84, 88, 96], [65, 5, 93, 37, 19, 2, 17, 21, 47, 28]) == 1\nassert solution.maxBoxesInWarehouse([11, 13, 20, 24, 27, 65, 69, 77, 90, 97], [5, 61, 35, 17, 16, 97]) == 0\nassert solution.maxBoxesInWarehouse([14, 74, 87], [76, 48, 38, 64, 21, 74, 17]) == 2\nassert solution.maxBoxesInWarehouse([4, 17, 27, 43, 58, 78, 84, 90, 91], [33, 15, 16, 92, 25, 62]) == 2\nassert solution.maxBoxesInWarehouse([75, 80, 83], [23, 78, 69, 32]) == 0\nassert solution.maxBoxesInWarehouse([5, 75, 76, 94], [38, 74, 40, 75, 2, 32, 3, 89, 33, 65]) == 1\nassert solution.maxBoxesInWarehouse([1, 8, 18, 66, 71, 88, 96], [19, 62, 15]) == 3\nassert solution.maxBoxesInWarehouse([48, 58], [3, 42, 2, 30, 29, 7]) == 0\nassert solution.maxBoxesInWarehouse([14, 18, 20, 24, 55, 58, 79, 80], [24, 48, 30, 22, 36, 100, 65, 86, 11, 39]) == 4\nassert solution.maxBoxesInWarehouse([38, 52, 90, 95], [87, 95, 49, 48, 42, 80, 76, 46]) == 2\nassert solution.maxBoxesInWarehouse([15, 21, 26, 28, 46, 59, 90], [15, 94, 41]) == 1\nassert solution.maxBoxesInWarehouse([2, 21, 34, 39, 41, 72, 81, 89], [30, 37, 58, 18]) == 2\nassert solution.maxBoxesInWarehouse([25, 27, 38, 63, 95], [8, 41]) == 0\nassert solution.maxBoxesInWarehouse([53, 91], [76, 15, 27, 82, 1, 33, 35, 2, 98, 12]) == 1\nassert solution.maxBoxesInWarehouse([3, 13, 15, 32, 54, 81], [85, 53, 28, 76, 29, 49, 88]) == 5\nassert solution.maxBoxesInWarehouse([15, 31, 40, 62, 89, 96], [19, 69, 68, 66, 65, 58, 86]) == 1\nassert solution.maxBoxesInWarehouse([4, 7, 46, 73, 88, 89, 99], [99, 11, 2, 96]) == 2\nassert solution.maxBoxesInWarehouse([1, 10, 15, 19, 22, 29, 36, 74, 87], [57, 78, 41, 76, 81, 33, 30, 21]) == 7",
  "inefficient_solution": "class Solution:\n    def maxBoxesInWarehouse(self, boxes: List[int], warehouse: List[int]) -> int:\n        n = len(warehouse)\n        left = [warehouse[0]] * n\n        temp = [0] * n\n        for i in range(1, n):\n            left[i] = min(left[i - 1], warehouse[i])\n            temp[i] = warehouse[i]\n        boxes.sort()\n        i, j = 0, n - 1\n        arr1 = []\n        for k in range(n):\n            arr1.append(temp[k])\n        arr1.reverse()\n        arr2 = []\n        for k in range(n):\n            arr2.append(left[k])\n        arr2.reverse()\n        while i < len(boxes):\n            arr3 = []\n            while j >= 0 and arr2[j] < boxes[i]:\n                j -= 1\n            if j < 0:\n                break\n            arr3.append(arr1[j])\n            arr3.append(boxes[i])\n            arr3 += arr2[j + 1:]\n            arr3 += arr1[j + 1:]\n            arr1 = arr3\n            i, j = i + 1, j - 1\n        return i",
  "is_python": true
}