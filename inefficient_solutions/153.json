{
  "problem_idx": 153,
  "task_name": "Find Minimum in Rotated Sorted Array",
  "markdown_description": "\nSuppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:\n\n\n* `[4,5,6,7,0,1,2]` if it was rotated `4` times.\n* `[0,1,2,4,5,6,7]` if it was rotated `7` times.\n\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\n\nGiven the sorted rotated array `nums` of **unique** elements, return *the minimum element of this array*.\n\n\nYou must write an algorithm that runs in\u00a0`O(log n) time.`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,4,5,1,2]\n**Output:** 1\n**Explanation:** The original array was [1,2,3,4,5] rotated 3 times.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,5,6,7,0,1,2]\n**Output:** 0\n**Explanation:** The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [11,13,15,17]\n**Output:** 11\n**Explanation:** The original array was [11,13,15,17] and it was rotated 4 times. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 5000`\n* `-5000 <= nums[i] <= 5000`\n* All the integers of `nums` are **unique**.\n* `nums` is sorted and rotated between `1` and `n` times.\n\n\n",
  "canonical_solution": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        if nums[0] <= nums[-1]:\n            return nums[0]\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[0] <= nums[mid]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findMin(self, nums):\n        if nums[0] <= nums[-1]:\n            return nums[0]\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[0] <= nums[mid]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random sorted rotated array with unique elements\n    nums = random.sample(range(-5000, 5001), random.randint(1, 100))\n    nums.sort()\n    rotate_times = random.randint(1, len(nums))\n    nums = nums[rotate_times:] + nums[:rotate_times]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMin(nums)\n    \n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMin(nums) == expected_result\n        print(f\"assert solution.findMin({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMin({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMin([2677, 2789, 2877, 3076, 3099, 3305, 3353, 3439, 3840, 3965, 4360, 4398, 4694, 4730, -4764, -4700, -4634, -4427, -4199, -4112, -3842, -3032, -2999, -2783, -2738, -2406, -1428, -1303, -656, -194, -178, 447, 635, 943, 1163, 1559, 1674, 1686, 2405]) == -4764\nassert solution.findMin([338, 482, 516, 694, 761, 815, 902, 917, 923, 1077, 1194, 1284, 1298, 1372, 1586, 1961, 2110, 2630, 2735, 2843, 2981, 3510, 3615, 3755, 3783, 3789, 4155, 4403, 4426, 4472, 4681, 4777, 4807, 4873, -4998, -4972, -4832, -4828, -4787, -4660, -4604, -4381, -4362, -3983, -3798, -3763, -3732, -3543, -3437, -3427, -3239, -3091, -3003, -2898, -2783, -2696, -2602, -2561, -2384, -2113, -2110, -1557, -1264, -1143, -1131, -887, -336, -335, -193]) == -4998\nassert solution.findMin([-2290, -1963, -1906, -1872, -1571, -1459, -1267, -1071, -968, -923, -904, -845, -685, -653, -477, -230, -215, -162, -62, -26, 38, 72, 150, 177, 339, 357, 415, 866, 962, 1262, 1280, 1402, 1900, 1933, 1953, 2047, 2117, 2172, 2288, 2470, 2526, 2527, 2541, 2583, 2847, 2900, 2910, 2983, 3106, 3138, 3371, 3807, 3840, 3946, 4015, 4119, 4316, 4378, 4426, 4428, 4486, 4583, 4591, 4610, 4998, -4791, -4790, -4724, -4457, -4376, -4352, -4137, -4020, -3979, -3877, -3860, -3798, -3729, -3638, -3602, -3536, -3519, -3380, -3263, -3204, -3034, -2756, -2716, -2710, -2577, -2536, -2352, -2339]) == -4791\nassert solution.findMin([333, 344, 425, 595, 608, 811, 1058, 1141, 1211, 1297, 1352, 1423, 1724, 1741, 1973, 2215, 2336, 2347, 2692, 2715, 2810, 2894, 2934, 2959, 3475, 3767, 4046, 4363, 4710, 4897, 4946, -4899, -4474, -4434, -4432, -4430, -4388, -4220, -4210, -4018, -3992, -3922, -3907, -3866, -3180, -2778, -2577, -2480, -1949, -1870, -1043, -681, -651, -319, -91, -67, 266, 291]) == -4899\nassert solution.findMin([4324, 4410, -4921, -4590, -4537, -4526, -4264, -3780, -3404, -3182, -3002, -2773, -2572, -2260, -2173, -2096, -1807, -1783, -1230, -1229, -1108, -944, -494, -21, 29, 58, 226, 404, 681, 746, 939, 954, 1215, 1834, 1916, 2717, 2761, 3275, 3315, 3352, 3794, 3982, 4212, 4223, 4280]) == -4921\nassert solution.findMin([-3558, -3257, -2901, -2851, -2707, -2625, -2531, -2313, -2304, -2147, -1968, -1328, -1070, -581, -526, -478, -169, -148, -114, 350, 479, 742, 749, 1029, 1053, 1620, 1635, 1735, 2033, 2063, 2158, 2216, 2218, 2283, 2407, 3083, 3417, 3490, 3503, 3614, 4098, 4565, 4607, 4739, 4845, 4947, -4993, -4812, -4534, -4533, -4380, -4125, -3880, -3702]) == -4993\nassert solution.findMin([4536, 4649, 4723, 4769, 4792, -4768, -4740, -4539, -4538, -4057, -3918, -3496, -3244, -2752, -2697, -2532, -2501, -2056, -1916, -1719, -1555, -1147, -750, -742, 384, 572, 597, 1106, 1137, 1178, 1244, 1271, 1318, 1855, 2192, 2204, 2212, 2286, 2347, 2921, 3300, 3457, 3970, 4384, 4452]) == -4768\nassert solution.findMin([-4656, -4059, -3773, -3033, -2124, -1904, -1505, -1426, -151, 502, 1727, 2526, 3333]) == -4656\nassert solution.findMin([4766, -4821, -4446, -3756, -2352, -728, -437, 122, 719, 807, 960, 1588, 1904, 2638]) == -4821\nassert solution.findMin([-1412, -1411, -1353, -1159, -711, -656, -619, 134, 207, 437, 592, 771, 1027, 1047, 1209, 1224, 1287, 1360, 1526, 1749, 2234, 3746, 4525, -4382, -4070, -3614, -3474, -3169, -2969, -2816, -2064, -2043, -1967, -1832]) == -4382\nassert solution.findMin([-4721, -4693, -4646, -4634, -4566, -4526, -3963, -3699, -3423, -3071, -2977, -2661, -2409, -2169, -2064, -1974, -1782, -1759, -1725, -1717, -1616, -1514, -1492, -1477, -846, -812, -791, -528, -385, -373, -367, -305, -32, 4, 47, 659, 672, 781, 862, 1258, 1290, 1677, 1810, 1819, 1936, 1978, 2057, 2082, 2087, 2247, 2411, 2459, 2517, 2605, 3035, 3053, 3088, 3281, 3569, 3915, 4064, 4137, 4151, 4207, 4264, 4438, 4531, 4561, 4565, 4579, 4619, 4641, 4692, 4841, -4973, -4841, -4805, -4765, -4731]) == -4973\nassert solution.findMin([-2863, -2845, -2583, -2575, -2362, -2301, -2205, -2184, -2178, -1733, -1695, -1652, -1266, -1070, -738, -719, -565, -537, -536, -229, 65, 71, 89, 221, 434, 616, 628, 926, 938, 964, 1006, 1092, 1172, 1942, 2060, 2295, 2537, 2545, 2656, 2675, 2715, 3062, 3079, 3133, 3172, 3260, 3315, 3346, 3511, 3632, 3695, 3804, 4180, 4210, 4271, 4286, 4425, 4503, 4596, -4951, -4845, -4591, -4140, -4005, -3309]) == -4951\nassert solution.findMin([3596, 3814, 3978, 4608, 4719, 4994, -4745, -4661, -4509, -4505, -4223, -3932, -3712, -3081, -3067, -2841, -2509, -2453, -2367, -1753, -1311, -1234, -484, -281, -246, 189, 867, 940, 1029, 1043, 1197, 1221, 1418, 1587, 2327, 2657, 2723, 2800, 2840, 2922, 3238]) == -4745\nassert solution.findMin([-134, -59, 79, 739, 897, 931, 1025, 1361, 1470, 1745, 1921, 2035, 2102, 2331, 2661, 2952, 3161, 3502, 3539, 3869, 4155, 4355, 4544, 4597, -4822, -4586, -4416, -4346, -4090, -4047, -3934, -3837, -3834, -3795, -3168, -3041, -2974, -2580, -2484, -2418, -2082, -1946, -1761, -1719, -1675, -1583, -1535, -1434, -1162, -792, -779, -594, -349]) == -4822\nassert solution.findMin([2576, 2961, 2965, 3534, 3646, 3904, -4852, -4475, -4440, -4389, -3652, -3433, -3396, -3290, -3111, -3097, -2779, -2116, -1859, -1733, -1445, -414, 160, 191]) == -4852\nassert solution.findMin([-3970, -3809, -3693, -3176, -2918, -2893, -2880, -2827, -2661, -2401, -2383, -2376, -2152, -2044, -1879, -1844, -1792, -1768, -1727, -1670, -1590, -1279, -1167, -1155, -1129, -1062, -996, -969, -919, -734, -448, -421, -346, -329, -269, -204, 66, 388, 732, 1060, 1126, 1162, 1257, 1317, 1483, 1489, 1679, 1813, 1882, 1921, 2037, 2040, 2140, 2176, 2262, 2332, 2339, 2432, 2518, 2521, 2616, 2899, 3246, 3285, 3504, 3641, 3661, 3692, 3746, 3793, 3800, 4008, 4139, 4287, 4329, 4330, 4341, 4470, 4757, 4789, 4914, 4946, -4919, -4856, -4793, -4734, -4711, -4643, -4258, -4089, -3990]) == -4919\nassert solution.findMin([399, 905, 907, 988, 1289, 1450, 1574, 1837, 2066, 2245, 2272, 2390, 2627, 2684, 3101, 3444, 3676, 3804, 3988, 4002, 4049, 4068, 4198, 4459, 4773, 4814, 4891, 4970, -4918, -4861, -4841, -4615, -4559, -4452, -4450, -4314, -4227, -4035, -3949, -3657, -3578, -3530, -3321, -3294, -3126, -2926, -2907, -2504, -2476, -2136, -2043, -1917, -1820, -1685, -1562, -1527, -1444, -1307, -1133, -819, -637, -620, -567, -405, -92, 0, 71, 146]) == -4918\nassert solution.findMin([-699, -666, -513, -324, -316, -245, -135, 14, 68, 130, 138, 144, 191, 261, 747, 1081, 1121, 1263, 1397, 1570, 1599, 1771, 1862, 1870, 2036, 2138, 2360, 2387, 2390, 2443, 2445, 2602, 2611, 2822, 2975, 3208, 3251, 3551, 3570, 3810, 4178, 4742, 4754, 4775, 4818, 4845, 4850, 4898, -4972, -4876, -4824, -4718, -4695, -4678, -4664, -4622, -4555, -4540, -4182, -4107, -3962, -3926, -3901, -3864, -3791, -3704, -3507, -3492, -3345, -3245, -3117, -2873, -2789, -2749, -2686, -2404, -2395, -2391, -2232, -2203, -1877, -1859, -1754, -1476, -1418, -1390, -1379, -1014, -951, -870, -831, -778]) == -4972\nassert solution.findMin([2905, 3027, 3057, 3162, 3423, 3511, 3770, 4074, 4502, 4675, -4959, -4809, -4622, -4464, -4415, -4140, -4064, -3840, -3530, -3303, -3273, -3189, -2751, -2702, -2490, -2187, -1872, -1494, -943, -812, -597, -302, 673, 1231, 1453, 1587, 2097]) == -4959\nassert solution.findMin([99, 164, 1744, 1930, 1974, 2120, 2760, 3647, 4398, 4656, 4758, -3695, -3634, -2729, -2389, -2002, -1849, -1248, -1217, -851, -429, -227, -146, -28]) == -3695\nassert solution.findMin([838, 986, 1203, 2091, 2215, 2687, 2823, 3341, 4175, 4441, -4664, -3505, -3063, -3032, -2759, -2623, -2436, -2044, -1397, -1195, -1168, -228]) == -4664\nassert solution.findMin([-1988, -1986, -1920, -1800, -1760, -1523, -1467, -1108, -1064, -980, -893, -599, -23, 147, 199, 200, 341, 479, 493, 573, 784, 1050, 1080, 1184, 1482, 1566, 1638, 1772, 1811, 2053, 2211, 2212, 2263, 2417, 2482, 2547, 2712, 2958, 3216, 3288, 3375, 3380, 3387, 3412, 3579, 3736, 3996, 4257, 4298, 4346, 4569, 4580, 4738, 4827, -4807, -4515, -4513, -4395, -4288, -3929, -3924, -3747, -3661, -3659, -3566, -3487, -3475, -3362, -3300, -3241, -3227, -3183, -3037, -3034, -3032, -2956, -2930, -2767, -2720, -2696, -2633, -2628, -2591, -2502, -2475, -2363, -2348, -2256, -2201, -2074, -2067, -2034]) == -4807\nassert solution.findMin([1406, 1446, 1464, 1677, 1819, 2400, 2461, 2483, 2584, 2919, 3312, 3336, 3495, 3513, 3516, 3531, 3785, 3833, 4118, 4278, 4396, 4422, 4452, 4800, 4894, 4896, 4971, -4792, -4687, -4651, -4586, -4265, -4214, -4096, -4076, -3988, -3622, -3466, -2997, -2655, -2463, -2452, -2420, -2047, -2041, -1891, -1820, -1540, -1480, -1172, -1085, -1032, -982, -923, -342, 389, 434, 620, 934, 964, 1394]) == -4792\nassert solution.findMin([-442, -229, 85, 307, 463, 540, 936, 1007, 1407, 1625, 1845, 1917, 2700, 2782, 3294, 3576, 3580, 3987, 4317, 4356, 4677, 4776, 4871, 4937, -4870, -4453, -4024, -3934, -3344, -3278, -3210, -2781, -2760, -2513, -2303, -2181, -2058, -1640, -1148, -1091, -897]) == -4870\nassert solution.findMin([-1785, -1739, -1627, -1614, -1497, -1352, -1177, -942, -819, -712, -674, -551, -402, -316, -274, -197, -103, -90, 6, 27, 85, 229, 243, 337, 369, 443, 532, 576, 724, 785, 1026, 1275, 1363, 1482, 1484, 1543, 1803, 1836, 1939, 2165, 2174, 2189, 2838, 3068, 3119, 3293, 3332, 3453, 3715, 3969, 3983, 4194, 4195, 4285, 4449, 4501, 4516, 4606, -4686, -4559, -4421, -4364, -4257, -3992, -3825, -3635, -3625, -3586, -3310, -3075, -2931, -2812, -2745, -2728, -2670, -2589, -2588, -2417, -2338, -2296, -2202, -2103, -1889, -1839, -1835, -1833]) == -4686\nassert solution.findMin([3162, 3332, -4552, -3628, -2258, -1062, -803, -659, -306, -76, 135, 839, 1201, 2324]) == -4552\nassert solution.findMin([3004, 3220, 3452, 3453, 3583, 3593, 3667, 3962, 4141, 4208, 4274, 4374, 4384, 4392, 4616, 4641, 4813, 4823, 4879, 4916, 4971, -4972, -4903, -4850, -4669, -4614, -4606, -4484, -4141, -3945, -3858, -3671, -3581, -3262, -3164, -2908, -2557, -2529, -2384, -2327, -2132, -2098, -2024, -1632, -1551, -1445, -1443, -1439, -1290, -797, -773, -749, -388, -378, -1, 10, 16, 43, 124, 310, 397, 416, 581, 623, 797, 923, 990, 1312, 1359, 1377, 1771, 1821, 2093, 2228, 2235, 2252, 2511, 2563, 2614, 2765, 2772, 2799, 2880, 2957, 2979]) == -4972\nassert solution.findMin([-3879, -3774, -3174, -3162, -2732, -2730, -2168, -1493, -1446, -1318, 652, 1117, 2317, 3869, 4149, 4945, -4828, -4213]) == -4828\nassert solution.findMin([-4110, -3746, -3491, -3226, -3040, -2979, -2377, -2044, -1937, -1930, -1838, -1596, -1478, -950, -911, -847, -568, -554, -461, -228, -152, -54, 188, 633, 969, 1194, 1198, 1300, 1627, 1844, 2169, 2265, 2612, 2750, 3288, 3767, 4113, 4179, 4582, 4665, -4520]) == -4520\nassert solution.findMin([2133, 2426, 2482, 2493, 2554, 2575, 2592, 2646, 3103, 3104, 3182, 3290, 3575, 3623, 3981, 4057, 4588, 4990, -4972, -4841, -4835, -4785, -4483, -4384, -4240, -3725, -3355, -2825, -2803, -2712, -2470, -2244, -2230, -2228, -1905, -1716, -1679, -1651, -1461, -1446, -1213, -696, -695, -406, -324, -253, -194, -38, 155, 182, 595, 661, 699, 944, 1065, 1086, 1249, 1341, 1386, 1492, 2127]) == -4972\nassert solution.findMin([1895, 2720, 3302, 3328, 3367, 3703, 3781, 3974, 3979, 4385, 4875, 4969, -4962, -4613, -4487, -4175, -3839, -3217, -2841, -2436, -2268, -2151, -1590, -1556, -1332, -741, 107, 242, 386, 586, 596, 716, 1529, 1672]) == -4962\nassert solution.findMin([-1357, -1269, -1262, -1245, -1236, -1036, -869, -787, -714, -650, -375, -60, 27, 61, 73, 486, 489, 719, 762, 1050, 1223, 1335, 1341, 1410, 1610, 1709, 1917, 1971, 2167, 2221, 2226, 2242, 2268, 2319, 2483, 2562, 2922, 3006, 3106, 3118, 3246, 3428, 3488, 3570, 3732, 3784, 3946, 3947, 3958, 4399, -4683, -4666, -4637, -4586, -4309, -4110, -3667, -3658, -3557, -2947, -2776, -2724, -2489, -2320, -2310, -2086, -1989, -1831, -1777, -1772, -1455]) == -4683\nassert solution.findMin([-3975, -3295, -2944, -2819, -2801, -2235, -2190, -1953, -1783, -1303, -1194, -733, -731, -299, 488, 1111, 1190, 1600, 1745, 2041, 2218, 2257, 2624, 3046, 3246, 3411, 3745, 3756, 3757, 3828, 3900, 3998, 4044, 4261, 4308, 4737, 4826, -4076, -4067]) == -4076\nassert solution.findMin([3040, 3083, 3228, 3245, 3326, 3405, 3460, 3613, 3733, 3780, 3884, 4062, 4177, 4803, 4849, 4890, 4893, 4895, -4947, -4857, -4656, -4644, -4576, -4556, -4441, -4212, -4084, -4002, -3862, -3784, -3553, -3551, -3361, -3141, -3117, -3012, -2715, -2631, -2594, -2419, -2220, -2144, -1890, -1684, -1483, -1411, -1337, -1332, -1115, -1077, -1039, -861, -837, -726, -476, -369, -43, -41, 302, 309, 401, 440, 576, 586, 739, 757, 772, 791, 1131, 1141, 1268, 1288, 1478, 1513, 1626, 1810, 2016, 2025, 2079, 2081, 2107, 2320, 2454, 2474, 2528, 2531, 2919, 2942, 2949, 3029, 3035]) == -4947\nassert solution.findMin([3518, -4921, -3513, -1434, -317, 26, 922, 932, 1029, 1106, 1653, 2148, 3023]) == -4921\nassert solution.findMin([4649, -113, 1114, 3501]) == -113\nassert solution.findMin([-4219, -4149, -4111, -2960, 4751]) == -4219\nassert solution.findMin([-3280, -3203, -3054, -2603, -2438, -2342, -2271, -2142, -1857, -1826, -1809, -1721, -1681, -1557, -1498, -1425, -1321, -1208, -1021, -920, -835, -820, -796, -768, -134, -60, -21, 155, 159, 184, 301, 362, 373, 539, 656, 666, 814, 934, 1076, 1226, 1263, 1382, 1542, 1726, 1753, 1850, 1856, 1984, 2116, 2591, 2710, 3017, 3047, 3394, 3590, 3696, 3889, 3891, 4015, 4043, 4087, 4319, 4417, 4452, 4453, 4607, 4750, 4753, -4941, -4929, -4926, -4917, -4610, -4530, -4098, -3655, -3606, -3558, -3529, -3507]) == -4941\nassert solution.findMin([-4672, -4667, -4549, -4224, -3934, -3907, -3783, -3719, -3636, -3625, -3553, -3513, -3367, -3348, -3261, -3064, -2996, -2927, -2912, -2810, -2765, -2604, -2559, -2479, -2303, -2119, -2070, -2030, -1951, -1932, -1753, -1555, -1413, -1294, -1125, -1110, -1050, -711, -586, -505, -435, -382, -282, 111, 358, 668, 1023, 1087, 1178, 1184, 1249, 1387, 1504, 1511, 1736, 1839, 1929, 2182, 2218, 2233, 2260, 2652, 2793, 2961, 3053, 3095, 3192, 3287, 3375, 3400, 3514, 3519, 3661, 3702, 3756, 3765, 3828, 3939, 3943, 3993, 4084, 4089, 4098, 4103, 4120, 4171, 4361, 4510, 4562, -4981, -4925, -4912, -4879, -4760, -4709, -4684]) == -4981\nassert solution.findMin([-1119, 489, 825, 926, 1145, 1511, 1797, 1906, 1950, 1957, 2222, 2307, 2312, 2546, 2680, 2808, 2832, 2838, 2855, 2938, 2983, 3144, 3222, 3308, 3466, 4136, 4566, 4587, 4731, 4839, -4994, -4729, -4597, -4110, -3070, -2829, -2713, -2505, -2445, -2211, -2152, -2132, -2035, -1989, -1947, -1878, -1794, -1551, -1449]) == -4994\nassert solution.findMin([249, 1721, 4055, -4660, -3937, -3355, -1863, -1651, 92]) == -4660\nassert solution.findMin([-3377, -3348, -3332, -3184, -3182, -3160, -3045, -2979, -2957, -2921, -2869, -2693, -2130, -2066, -1951, -1815, -1728, -1676, -1492, -1283, -1254, -1022, -982, -930, -872, -764, -703, -700, -664, -640, -582, -559, -456, -424, -238, -105, -95, -35, 373, 468, 516, 584, 734, 784, 1249, 1273, 1333, 1337, 1341, 1446, 1627, 1818, 1832, 1863, 1867, 2158, 2168, 2203, 2321, 2326, 2424, 2465, 2511, 2539, 2588, 2647, 2674, 2761, 2807, 2879, 2929, 2976, 3107, 3134, 3146, 3581, 3622, 3810, 3948, 4272, 4274, 4503, 4537, 4561, 4707, 4756, 4921, 4944, -4912, -4777, -4580, -4116, -4095, -3952, -3870, -3634, -3583, -3532, -3481, -3462]) == -4912\nassert solution.findMin([3864, -40, 1776, 3368]) == -40\nassert solution.findMin([890, 897, 967, 1100, 1338, 1469, 1551, 1622, 1844, 1893, 2161, 2193, 2243, 2426, 2682, 2896, 2948, 2962, 3029, 3434, 3565, 3572, 3575, 3706, 3907, 4020, 4242, 4260, 4484, 4664, 4834, -4495, -4471, -4457, -4378, -4310, -4123, -4006, -4000, -3901, -3796, -3660, -3634, -3565, -3218, -3114, -2937, -2862, -2801, -2706, -2496, -2425, -2252, -2204, -2165, -2122, -2043, -2013, -1902, -1697, -1683, -1626, -1559, -1447, -1445, -1293, -1280, -1222, -1185, -1124, -1102, -1089, -1082, -1044, -1043, -961, -925, -922, -919, -812, -510, -343, -316, -114, -9, -4, 15, 119, 136, 254, 307, 598, 672, 724, 758, 864]) == -4495\nassert solution.findMin([3394, 3517, 3971, 4238, 4603, 4846, 4900, -4945, -4729, -4323, -4106, -3228, -1832, -578, -318, -273, -29, -9, 77, 393, 480, 954, 1247, 1575, 1845, 1909, 1970, 2603, 2936, 2949]) == -4945\nassert solution.findMin([-683, -19, 130, 3309, -4950, -4188, -4168, -1785, -927]) == -4950\nassert solution.findMin([-4700, -4513, -4035, -3512, -3311, -3078, -2624, -1904, -1747, -1612, -1597, -1393, -1322, -1041, -937, -832, -684, -102, -38, -11, 38, 54, 207, 265, 312, 1170, 1995, 2004, 2623, 2689, 3043, 3523, 3645, 3778, 4876, -4783]) == -4783\nassert solution.findMin([-1263, -1202, -1044, -873, -425, -160, -158, -149, -73, 105, 198, 226, 230, 1123, 1369, 1419, 1497, 1667, 2329, 2515, 2821, 3269, 3308, 3635, 3641, 4176, 4207, 4738, 4965, -4929, -4807, -4703, -4598, -4569, -4157, -3695, -3500, -3443, -3375, -3357, -3213, -3203, -3167, -2899, -2696, -2568, -2476, -2418, -2274, -2141, -2033, -2008, -1986, -1780, -1756, -1683, -1408, -1406, -1323, -1271]) == -4929\nassert solution.findMin([-1761, -263, -260, 217, 986, 1159, 1798, 2303, 2740, 3912, 3958, 4765, 4903, -4808, -4253, -3199, -1981]) == -4808\nassert solution.findMin([221, 366, 1067, 2100, 2221, 4582, -4893, -4684, -4603, -3682, -3376, -3171, -2959, -1927, -1243, -1042, -428]) == -4893\nassert solution.findMin([2629, 2719, 2805, 2890, 2899, 3639, 3670, 3870, 4031, 4201, 4460, 4484, 4506, 4581, 4614, 4848, 4966, -4959, -4901, -4282, -4047, -3621, -3410, -3399, -3219, -3192, -3144, -2375, -2293, -2116, -2115, -1696, -1611, -1142, -1102, -1060, -683, -629, -398, -50, 665, 705, 1304, 1420, 1540, 1543, 1656, 1872, 1944, 2249, 2278, 2283, 2320]) == -4959\nassert solution.findMin([3628, 3749, 3786, 3822, 3911, 4016, 4268, 4401, 4503, -4893, -4412, -3887, -3496, -3176, -3162, -2935, -2840, -2818, -2774, -2636, -2473, -2304, -2009, -1990, -1892, -1836, -1341, -1173, -1119, -1090, -1038, -867, -718, -542, -502, 78, 404, 446, 841, 1847, 1873, 1914, 1940, 2252, 2827]) == -4893\nassert solution.findMin([1528, 1608, 1706, 1722, 1794, 1906, 1934, 1980, 2289, 2301, 2517, 2560, 2602, 2689, 2791, 3162, 3192, 3553, 3659, 3780, 3800, 4104, 4165, 4384, 4426, 4523, 4598, 4653, 4808, 4839, 4926, -4845, -4793, -4723, -4687, -4506, -4497, -4414, -4408, -3968, -3867, -3760, -3747, -3518, -3495, -3402, -3354, -3269, -2985, -2943, -2882, -2777, -2766, -2716, -2645, -2640, -1950, -1813, -1717, -1316, -1279, -1271, -1183, -1168, -1150, -845, -777, -529, -475, -401, -343, -259, -94, -19, 60, 112, 352, 360, 382, 532, 594, 649, 859, 953, 1080, 1389, 1450, 1506]) == -4845\nassert solution.findMin([-4134, -4015, -3819, -3795, -3791, -3771, -3689, -3620, -3486, -3282, -2993, -2404, -2376, -2181, -1634, -1630, -1584, -1582, -1430, -1299, -1281, -905, -874, -854, -845, -302, -235, -18, 150, 291, 546, 785, 866, 944, 1013, 1100, 1185, 1316, 1444, 1470, 2128, 2215, 2466, 2564, 2766, 2778, 2823, 2900, 2940, 3025, 3208, 3394, 3544, 3680, 3718, 3776, 3930, 4087, 4290, 4414, 4555, -4979, -4925, -4893, -4557, -4523, -4474, -4298]) == -4979\nassert solution.findMin([-3938, -3561, -3428, -3421, -3313, -3283, -3168, -3141, -3105, -3039, -2972, -2778, -2660, -2563, -2534, -2313, -2091, -1984, -1708, -1685, -1646, -1425, -1342, -1093, -867, -856, -485, -375, -339, -179, -40, 490, 1214, 1244, 1569, 1913, 2100, 2143, 2461, 2550, 2628, 2796, 3093, 3208, 3741, 3796, 3802, 4162, 4301, 4490, 4674, 4843, -4948, -4938, -4728, -4698, -4635, -4492, -4379, -4268, -4152]) == -4948\nassert solution.findMin([-2065, -1947, -1913, -1652, -1599, -1592, -1473, -1461, -1025, -914, -807, -562, -521, -452, -411, -343, -136, 79, 224, 264, 280, 312, 396, 774, 1234, 1240, 1466, 1533, 1547, 1571, 1643, 1950, 2141, 2148, 2311, 2367, 2485, 2550, 2574, 2583, 2688, 2782, 2812, 2873, 2908, 2941, 3077, 3131, 3416, 3462, 3489, 3565, 3625, 3634, 3681, 4094, 4483, 4528, 4595, 4741, 4804, -4482, -4325, -4302, -4070, -4059, -4004, -3858, -3251, -2802, -2795, -2780, -2734, -2669, -2379, -2207, -2200]) == -4482\nassert solution.findMin([-1603, -1543, -1434, -1426, -1403, -1402, -1398, -1367, -1321, -1307, -1232, -1158, -1124, -1096, -907, -693, -682, -640, -523, -513, -164, -124, 171, 176, 205, 288, 312, 351, 387, 441, 497, 595, 734, 805, 993, 1120, 1238, 1301, 1365, 1446, 1684, 1826, 1829, 1847, 2064, 2216, 2344, 2766, 2799, 2988, 3040, 3209, 3353, 3471, 3524, 3567, 3835, 3943, 4032, 4118, 4239, 4265, 4275, 4310, 4466, 4533, 4535, 4626, 4685, 4928, -4918, -4908, -4851, -4600, -4535, -4371, -4286, -4013, -3933, -3523, -3487, -3410, -3342, -3295, -3233, -3157, -3146, -3052, -2935, -2668, -2549, -1980, -1905, -1627]) == -4918\nassert solution.findMin([-3766, -3660, -3567, -2896, -2717, -2144, -1954, -1648, -1527, -1196, -881, -762, 221, 483, 1227, 1483, 1599, 2323, 2613, 2954, 3555, 3860, 4844, -4933, -4858, -4702, -4619, -4045, -3814]) == -4933\nassert solution.findMin([943, 2045, 4451, -4339, -1794, -1757]) == -4339\nassert solution.findMin([791, 1326, 1683, 1725, 1915, 2120, 2800, 3031, 3289, 3830, 4139, -4938, -4830, -4350, -4273, -4104, -3835, -3833, -3763, -3374, -3236, -3173, -2577, -2122, -1866, -1787, -1618, -659, -528, -382, -217, 138, 215, 575]) == -4938\nassert solution.findMin([2134, 2301, 2390, 2448, 2458, 2613, 2972, 3030, 3168, 3491, 3525, 3634, 4024, 4079, 4290, 4386, 4412, 4525, 4612, 4702, 4864, 4939, -4914, -4883, -4691, -4669, -4457, -4392, -4388, -4225, -4014, -3538, -3470, -3461, -3448, -2793, -2486, -2427, -2372, -2223, -1833, -1825, -1664, -1225, -876, -869, -868, -727, -519, -256, 103, 435, 541, 583, 659, 784, 798, 799, 1013, 1026, 1207, 1239, 1603, 1717, 1780, 1950]) == -4914\nassert solution.findMin([2311, 2398, 2460, 2517, 2551, 2564, 3105, 3523, 3832, 4053, 4140, 4166, 4350, 4584, -4836, -4600, -4590, -4528, -4510, -4449, -4332, -4281, -4235, -4159, -4108, -3708, -3597, -3552, -3444, -2806, -2752, -2543, -2535, -2216, -1982, -1762, -1625, -1613, -1470, -1226, -1197, -1096, -1025, -954, -625, -241, -9, 95, 106, 133, 309, 645, 831, 1112, 1297, 1304, 1550, 2005, 2011, 2039, 2070, 2268]) == -4836\nassert solution.findMin([-388, 594, 3507, 3661, 4613, -4443, -3946, -3256]) == -4443\nassert solution.findMin([-1550, -818, -329, 45, 941, 1106, 1153, 1239, 1250, 1400, 1746, 1763, 1781, 2011, 2170, 2237, 2466, 2609, 2647, 2704, 3526, 3551, 3644, 4231, 4679, 4730, 4810, -4581, -4382, -3869, -3865, -3177, -2707, -2622, -2608, -2221, -2176, -2133]) == -4581\nassert solution.findMin([-876, 829, 904, 1044, 1134, 1430, 2290, 3011, 4482, -4911, -3703, -3060, -2202, -1689]) == -4911\nassert solution.findMin([-2247, -1347, -848, -586, -154, 1126, 1375, 3100, 3321, 4004, 4479, 4880, 4902, -3313, -2388, -2260]) == -3313\nassert solution.findMin([-4595, -4458, -4040, -4002, -3957, -3211, -2329, -1410, -668, -174, 189, 1362, 1508, 2062, 2541, 2867, 2959, 3766, 3850, 3870, 4845, -4865, -4720]) == -4865\nassert solution.findMin([-3946, -3078, -2881, -2516, -2141, -2031, -1884, -429, 628, 754, 801, 1039, 1152, 1260, 1493, 1655, 2496, 2568, 2591, 3204, 3305, 3695, -4710, -4397]) == -4710\nassert solution.findMin([-2656, -2426, -2381, -2323, -2313, -2273, -2157, -2099, -1761, -1432, -1305, -1200, -877, -774, -648, -559, -554, -384, -356, -63, 120, 215, 242, 265, 306, 530, 558, 814, 819, 1084, 1506, 1510, 1522, 1620, 1858, 1911, 1934, 2551, 2881, 3093, 3159, 3162, 3496, 3511, 3690, 4071, 4323, 4336, 4568, 4694, 4979, -4788, -4378, -4360, -4326, -3757, -3742, -3505, -3389, -3111, -2914]) == -4788\nassert solution.findMin([-4681, -4392, -4256, -3863, -3853, -3818, -3626, -3397, -3339, -3319, -3046, -2819, -2701, -2508, -2506, -2139, -2111, -1991, -1972, -1959, -1810, -1760, -1720, -1716, -1628, -1428, -957, -898, -768, -766, -689, -601, -494, -432, -389, -326, -277, 7, 99, 270, 317, 345, 922, 1012, 1120, 1339, 1609, 1734, 1743, 1757, 1881, 2101, 2105, 2335, 2481, 2594, 2770, 2847, 3328, 3497, 3745, 3845, 3877, 3900, 4038, 4083, 4084, 4154, 4349, 4407, 4485, 4578, 4650, 4903, -4977]) == -4977\nassert solution.findMin([536, 723, 760, 761, 1354, 1401, 1450, 1464, 1505, 1792, 1858, 2012, 2150, 2207, 2234, 2326, 2396, 2453, 2682, 2716, 2786, 2946, 3135, 3238, 3341, 3343, 3378, 3623, 3700, 3756, 3817, 3948, 4213, 4606, 4858, 4969, -4800, -4696, -4674, -4261, -4188, -4014, -3828, -3635, -3587, -3550, -3346, -3308, -3014, -2996, -2846, -2798, -2738, -2691, -2678, -2577, -2349, -2341, -2181, -2037, -2020, -1935, -1703, -1605, -1333, -1018, -778, -636, -623, -588, -489, -464, -265, -209, -200, -157, -96, 414]) == -4800\nassert solution.findMin([576, 732, 819, 1198, 1444, 1698, 1977, 2029, 2179, 2291, 2476, 2612, 2676, 2825, 3071, 3898, 4674, 4815, 4884, -4914, -4795, -4547, -4336, -4164, -3868, -3653, -3373, -3280, -3270, -2668, -2563, -2456, -2203, -2012, -1728, -1387, -1227, -730, -701, -557, 248, 499]) == -4914\nassert solution.findMin([-534, -459, -448, -437, -410, -166, -100, -78, -44, 81, 458, 480, 577, 587, 707, 790, 984, 985, 1039, 1166, 1292, 1322, 1455, 1534, 1601, 1784, 1954, 1994, 2135, 2171, 2293, 2306, 2593, 2778, 2960, 3126, 3193, 3349, 3426, 3434, 3506, 3515, 3531, 3881, 3903, 3939, 3962, 3998, 4142, 4350, 4404, 4663, 4813, 4890, 4905, 4913, -4801, -4737, -4553, -4495, -4428, -4311, -4194, -4099, -3921, -3894, -3677, -3542, -3510, -3296, -3259, -2987, -2864, -2816, -2806, -2592, -2514, -2457, -2417, -2412, -2376, -2190, -2163, -2139, -2133, -1980, -1782, -1727, -1518, -1337, -1216, -1179, -1135, -1069, -853, -683, -649, -582]) == -4801\nassert solution.findMin([1717, 1729, 1956, 1959, 2207, 2226, 2468, 2470, 2557, 2748, 2761, 2889, 3275, 3564, 3676, 3695, 3718, 3807, 4012, 4278, 4494, 4507, 4700, 4726, 4809, 4835, 4895, 4900, -4956, -4920, -4919, -4524, -4494, -4401, -4206, -4148, -4129, -4071, -4017, -3925, -3591, -3514, -3438, -3264, -3198, -3102, -2874, -2847, -2678, -2469, -2457, -2224, -2185, -2155, -1947, -1890, -1570, -1546, -1488, -988, -424, -360, -265, -241, -67, 322, 518, 1175, 1211, 1465, 1510]) == -4956\nassert solution.findMin([4922, -4951, -4844, -4718, -4705, -4580, -4562, -4443, -4228, -3936, -3213, -2863, -2770, -2647, -2638, -2573, -2423, -2369, -2334, -2266, -2232, -1951, -1935, -1803, -1785, -1701, -1670, -1640, -1611, -1494, -1492, -1372, -1178, -956, -793, -742, -689, -676, -600, -573, -498, -409, -177, 5, 165, 264, 526, 585, 663, 677, 741, 852, 857, 923, 1315, 1328, 1379, 1523, 1715, 1822, 1852, 2150, 2177, 2323, 2380, 2423, 2748, 2891, 2937, 2956, 3035, 3211, 3247, 3286, 3479, 3485, 3517, 3805, 3851, 3863, 3955, 4217, 4363, 4435, 4443, 4734, 4821, 4916]) == -4951\nassert solution.findMin([106, 402, 706, 1011, 1962, 2031, 2959, 4590, -3887, -2260, -1777, -1406, -1111, -1028, -344]) == -3887\nassert solution.findMin([-2460, -2359, -2220, -2214, -1932, -1863, -1151, -1074, -1051, -1039, -909, -813, -454, -144, 176, 1128, 1346, 1357, 1710, 1801, 1895, 2132, 2296, 2339, 2395, 2704, 2795, 2894, 3296, 3318, 3329, 3416, 3476, 3610, 4490, 4659, 4890, 4942, -4876, -4732, -4562, -4506, -4327, -4083, -3846, -3793, -3689, -3670, -3396, -3194, -3086, -3073, -2940, -2500]) == -4876\nassert solution.findMin([-1566, -1350, -1284, -1091, -1039, -999, -944, -692, -659, -477, -199, -50, 160, 193, 210, 510, 735, 915, 1019, 1025, 1455, 1514, 1551, 1666, 1763, 1841, 1981, 2079, 2204, 2558, 2575, 2806, 2958, 3067, 3070, 3080, 3246, 3479, 3557, 3580, 3972, 4036, 4064, 4147, 4169, 4596, 4663, 4687, 4963, -4891, -4630, -4112, -4108, -3880, -3862, -3805, -3753, -3652, -3190, -2845, -2776, -2416, -2337, -2184, -1954, -1722, -1598]) == -4891\nassert solution.findMin([-1689]) == -1689\nassert solution.findMin([1545, 1903, 2634, 3410, 3688, -764]) == -764\nassert solution.findMin([-1714, -1497, -891, -444, -21, 283, 571, 650, 892, 1543, 1727, 2307, 2790, 3018, 3232, 3395, 3401, 3470, 3696, 4058, 4485, -4751, -4292, -3890, -3852, -3715, -3119, -2829, -2763, -2749, -2443, -2393, -2061, -1804]) == -4751\nassert solution.findMin([-2218, -2010, -1103, -668, -188, 20, 749, 1045, 1367, 1750, 2551, 2608, 2718, 2990, 3838, 4287, 4909, -4541, -4142, -3964, -3840, -3215, -2934]) == -4541\nassert solution.findMin([-926, -864, -56, 198, 421, 499, 904, 1009, 1223, 1226, 1293, 1398, 1451, 1644, 1985, 2049, 2062, 2139, 3096, 3190, 3210, 3413, 3596, 3683, 3993, 4023, 4077, 4518, 4622, -4870, -4770, -4683, -4640, -4616, -4540, -3867, -3853, -3551, -3401, -3068, -1695, -1608, -1538, -1340, -1240, -1057, -934]) == -4870\nassert solution.findMin([4147, -4968, -3056, -2590, -1990, -1793, -1500, -1488, -1353, -1014, -497, 97, 916, 2114, 2239, 2678, 3416, 3509]) == -4968\nassert solution.findMin([-4739, -4726, -4569, -4411, -4392, -4329, -4295, -4287, -4018, -3902, -3750, -3696, -3605, -3106, -3015, -2936, -2925, -2683, -2509, -2456, -2372, -2300, -2275, -2153, -1834, -1803, -1801, -1497, -1495, -1277, -1069, -841, -201, -188, -98, 5, 150, 205, 228, 262, 308, 487, 797, 957, 1143, 1163, 1219, 1263, 1577, 1585, 1962, 2021, 2075, 2160, 2171, 2303, 2402, 2538, 2597, 2600, 2678, 2695, 2859, 2891, 2924, 3071, 3147, 3180, 3275, 3476, 3728, 3771, 3881, 4106, 4350, 4452, 4454, 4496, 4668, 4716, 4889, -4921, -4768, -4753]) == -4921\nassert solution.findMin([1549, 1640, 1777, 1818, 1882, 1925, 1996, 2049, 2375, 2563, 2755, 2808, 2836, 3307, 3364, 3408, 3414, 3714, 3817, 3881, 3914, 4041, 4148, 4290, 4314, 4535, 4568, -4929, -4881, -4498, -4236, -4038, -3915, -3907, -3706, -3576, -3565, -3475, -3456, -3429, -3363, -3296, -3014, -2917, -2616, -2571, -2441, -2420, -1969, -1956, -1938, -1811, -1783, -1470, -1356, -1203, -1089, -1050, -979, -858, -502, -501, -437, -419, -249, -243, -240, -218, 13, 53, 191, 304, 595, 941, 1011, 1044, 1312, 1532]) == -4929\nassert solution.findMin([1654, 1766, 1865, 1985, 2509, 2791, 3907, 4027, 4117, 4139, 4354, 4355, 4406, -4768, -3979, -3789, -3627, -3331, -2882, -2763, -1915, -1611, -1392, -1386, -1166, 415, 558, 1156, 1255, 1386, 1594, 1621]) == -4768\nassert solution.findMin([2952, 3006, 3301, 3350, 3377, 3404, 3677, 3757, 3772, 3867, 3917, 4387, 4504, 4526, 4572, 4887, 4990, -4922, -4629, -4335, -4325, -4265, -4263, -4158, -3924, -3910, -3816, -3551, -3167, -3056, -2985, -2977, -2578, -2551, -2436, -2381, -2028, -1958, -1920, -1725, -1595, -1526, -1447, -1355, -927, -784, -752, -555, -470, -262, -73, 20, 394, 478, 637, 825, 1066, 1142, 1332, 1341, 1464, 1523, 1598, 1840, 1849, 1938, 2035, 2132, 2148, 2306, 2343, 2353, 2433, 2492, 2515, 2539, 2628, 2861, 2939]) == -4922\nassert solution.findMin([-4877, -4754, -4716, -4452, -4337, -4321, -4112, -3923, -3781, -3593, -3495, -3306, -3297, -3173, -2962, -2936, -2848, -2638, -2626, -2327, -2323, -2248, -2190, -2052, -1798, -1769, -1726, -1673, -1492, -1362, -1044, -838, -775, -690, -542, -402, -256, 84, 120, 121, 649, 1283, 1368, 1514, 1606, 1888, 1937, 2022, 2392, 2980, 3158, 3372, 3401, 3511, 3594, 4185, 4988, -4878]) == -4878\nassert solution.findMin([-4958, 725, 1853]) == -4958\nassert solution.findMin([3157, 3186, 3682, 3946, 4014, 4315, 4646, 4682, -3834, -3735, -3668, -3655, -3574, -3201, -3175, -3166, -2654, -2583, -1966, -1928, -476, -169, 250, 311, 1323, 1506, 2169, 2468, 2652, 2868, 2985]) == -3834\nassert solution.findMin([2276, -3942, -3513]) == -3942\nassert solution.findMin([3659, 4293, 4664, 4706, 4890, -3794, -3460, -2830, -1965, -1808, -1684, -1049, 468, 538, 1439, 2004, 2726, 3138, 3317, 3432]) == -3794\nassert solution.findMin([1238, 1341, -4411, -3572, -1110]) == -4411\nassert solution.findMin([123, 353, 402, 666, 1005, 1080, 1269, 1299, 1328, 1706, 1738, 2139, 2177, 2196, 2240, 2367, 2382, 2638, 2707, 2708, 2767, 3134, 3302, 3432, 3482, 3505, 3695, 3800, 4187, 4300, 4330, 4437, 4474, 4755, 4912, -4780, -4666, -4470, -4403, -3927, -3848, -3806, -3564, -3513, -3500, -3459, -3414, -3391, -3315, -3155, -3114, -3082, -3009, -2960, -2908, -2815, -2679, -2637, -2516, -2511, -2385, -2186, -2169, -1866, -1620, -1580, -1537, -1504, -1430, -1429, -1393, -1263, -1180, -1092, -894, -759, -453, -313, -275, -8, 30, 37, 119]) == -4780\nassert solution.findMin([-1540, -1456, -1229, -985, -972, -656, -582, -434, -412, -408, -369, -285, -157, 12, 144, 303, 312, 318, 406, 474, 580, 761, 763, 1054, 1171, 1210, 1220, 1269, 1282, 1821, 2142, 2154, 2270, 2312, 2391, 2403, 2422, 2444, 2461, 2519, 2614, 2729, 2887, 2927, 3301, 3356, 3714, 3726, 3789, 3849, 4284, 4477, 4601, 4787, 4951, -4986, -4936, -4856, -4855, -4592, -4550, -4527, -4259, -4207, -4172, -4068, -4009, -3984, -3920, -3622, -3409, -3210, -3022, -2938, -2923, -2904, -2669, -2548, -2248, -2191, -2005, -1798, -1783, -1742, -1637]) == -4986\nassert solution.findMin([2731, 3149, 3552, 3722, 3730, 3789, 3881, 3911, 4067, 4110, 4195, 4369, 4671, 4680, 4758, 4777, 4896, 4965, 4989, -4888, -4809, -4651, -4491, -4447, -4430, -4247, -4229, -4105, -4103, -3939, -3867, -3865, -3844, -3778, -3734, -3731, -3691, -3659, -3452, -3312, -3245, -3237, -2873, -2649, -2505, -2403, -1936, -1903, -1865, -1809, -1680, -1525, -1344, -1292, -1249, -1166, -1099, -1075, -1053, -794, -515, -476, -377, -299, -268, -109, -95, 13, 52, 134, 201, 338, 593, 829, 856, 881, 1052, 1145, 1364, 1449, 1473, 1652, 1734, 1740, 1750, 1838, 2073, 2295, 2353, 2484, 2556]) == -4888\nassert solution.findMin([-4375, -4371, -3992, -3789, -3667, -3643, -3542, -3526, -3505, -3343, -3251, -3192, -3187, -2717, -2588, -2435, -2305, -2057, -2035, -2032, -1861, -1812, -1679, -1648, -1239, -935, -895, -657, -649, -551, -324, -303, -108, -44, 63, 116, 146, 401, 500, 582, 645, 877, 1052, 1069, 1293, 1296, 1366, 1447, 1452, 1685, 1785, 1870, 1905, 1934, 1968, 2217, 2284, 2313, 2328, 2439, 2489, 2522, 2835, 2870, 2906, 2912, 3293, 3375, 3393, 3432, 3571, 3698, 3810, 3873, 4121, 4146, 4201, 4233, 4283, 4413, 4444, 4621, 4730, -4824, -4752]) == -4824\nassert solution.findMin([1462, 1507, 1760, 1901, 2040, 2341, 2346, 2400, 3051, 3168, 3295, 3576, 3732, 3911, 4436, 4757, -4703, -4525, -4475, -4215, -4184, -4052, -3675, -3571, -3423, -3381, -3215, -2774, -2137, -2088, -1759, -1710, -1624, -1614, -1560, -1250, -946, -590, -166, -137, 206, 357, 457, 725, 987, 1194, 1404]) == -4703\nassert solution.findMin([-745, 306, 565, 3704, 3748, 4177, 4196, 4574, 4976, -4537, -4487, -4064, -3951, -3661, -3083, -2505, -2246, -2023, -1788]) == -4537",
  "inefficient_solution": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        num_arrays = [nums[i:i+500] for i in range(0, len(nums), 500)]\n        for num_array in num_arrays:\n            if num_array[0] <= num_array[-1]:\n                result = num_array[0]\n                break\n        else:\n            result = None\n        if result is None:\n            indices = [i for i, num_array in enumerate(num_arrays) if num_array[0] > num_array[-1]]\n            min_idx = min(indices)\n            min_array = num_arrays[min_idx]\n            result = min(min_array)\n        return result",
  "is_python": true
}