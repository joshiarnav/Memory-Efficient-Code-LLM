{
  "problem_idx": 625,
  "task_name": "Minimum Factorization",
  "markdown_description": "\nGiven a positive integer num, return *the smallest positive integer* `x` *whose multiplication of each digit equals* `num`. If there is no answer or the answer is not fit in **32-bit** signed integer, return `0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** num = 48\n**Output:** 68\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** num = 15\n**Output:** 35\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestFactorization(self, num: int) -> int:\n        if num < 2:\n            return num\n        ans, mul = 0, 1\n        for i in range(9, 1, -1):\n            while num % i == 0:\n                num //= i\n                ans = mul * i + ans\n                mul *= 10\n        return ans if num < 2 and ans <= 2**31 - 1 else 0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestFactorization(self, num: int) -> int:\n        if num < 2:\n            return num\n        ans, mul = 0, 1\n        for i in range(9, 1, -1):\n            while num % i == 0:\n                num //= i\n                ans = mul * i + ans\n                mul *= 10\n        return ans if num < 2 and ans <= 2**31 - 1 else 0\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random num\n    num = random.randint(1, 2**31 - 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestFactorization(num)\n\n    return num, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestFactorization(num) == expected_result\n        print(f\"assert solution.smallestFactorization({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.smallestFactorization({num}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestFactorization(622252082) == 0\nassert solution.smallestFactorization(1074079976) == 0\nassert solution.smallestFactorization(823609998) == 0\nassert solution.smallestFactorization(1553142118) == 0\nassert solution.smallestFactorization(334865280) == 0\nassert solution.smallestFactorization(1097525617) == 0\nassert solution.smallestFactorization(137758200) == 0\nassert solution.smallestFactorization(35181460) == 0\nassert solution.smallestFactorization(782478152) == 0\nassert solution.smallestFactorization(13154357) == 0\nassert solution.smallestFactorization(1698763221) == 0\nassert solution.smallestFactorization(755820585) == 0\nassert solution.smallestFactorization(342796552) == 0\nassert solution.smallestFactorization(1356858057) == 0\nassert solution.smallestFactorization(1987330521) == 0\nassert solution.smallestFactorization(43494178) == 0\nassert solution.smallestFactorization(1616297380) == 0\nassert solution.smallestFactorization(1596848572) == 0\nassert solution.smallestFactorization(1533809173) == 0\nassert solution.smallestFactorization(145103316) == 0\nassert solution.smallestFactorization(1661018278) == 0\nassert solution.smallestFactorization(1067417910) == 0\nassert solution.smallestFactorization(538430766) == 0\nassert solution.smallestFactorization(651443759) == 0\nassert solution.smallestFactorization(1371429936) == 0\nassert solution.smallestFactorization(1358921037) == 0\nassert solution.smallestFactorization(493852366) == 0\nassert solution.smallestFactorization(1949955086) == 0\nassert solution.smallestFactorization(624810600) == 0\nassert solution.smallestFactorization(2020179497) == 0\nassert solution.smallestFactorization(1730328353) == 0\nassert solution.smallestFactorization(2047035034) == 0\nassert solution.smallestFactorization(1970761551) == 0\nassert solution.smallestFactorization(1093191458) == 0\nassert solution.smallestFactorization(1797916059) == 0\nassert solution.smallestFactorization(1186751057) == 0\nassert solution.smallestFactorization(1546715151) == 0\nassert solution.smallestFactorization(142815899) == 0\nassert solution.smallestFactorization(1432154368) == 0\nassert solution.smallestFactorization(1701967169) == 0\nassert solution.smallestFactorization(1432653654) == 0\nassert solution.smallestFactorization(1146267441) == 0\nassert solution.smallestFactorization(1981092106) == 0\nassert solution.smallestFactorization(255181962) == 0\nassert solution.smallestFactorization(971705929) == 0\nassert solution.smallestFactorization(1066055181) == 0\nassert solution.smallestFactorization(1585193064) == 0\nassert solution.smallestFactorization(1714182840) == 0\nassert solution.smallestFactorization(85480955) == 0\nassert solution.smallestFactorization(1357532911) == 0\nassert solution.smallestFactorization(399965939) == 0\nassert solution.smallestFactorization(966451218) == 0\nassert solution.smallestFactorization(2023392340) == 0\nassert solution.smallestFactorization(536458819) == 0\nassert solution.smallestFactorization(508042507) == 0\nassert solution.smallestFactorization(1040177223) == 0\nassert solution.smallestFactorization(929568989) == 0\nassert solution.smallestFactorization(2010911240) == 0\nassert solution.smallestFactorization(377768794) == 0\nassert solution.smallestFactorization(375746875) == 0\nassert solution.smallestFactorization(2119952038) == 0\nassert solution.smallestFactorization(535719316) == 0\nassert solution.smallestFactorization(81832399) == 0\nassert solution.smallestFactorization(49581286) == 0\nassert solution.smallestFactorization(1693764421) == 0\nassert solution.smallestFactorization(1820134561) == 0\nassert solution.smallestFactorization(410813249) == 0\nassert solution.smallestFactorization(64744524) == 0\nassert solution.smallestFactorization(1682371006) == 0\nassert solution.smallestFactorization(614278205) == 0\nassert solution.smallestFactorization(1234258673) == 0\nassert solution.smallestFactorization(1986918614) == 0\nassert solution.smallestFactorization(359756183) == 0\nassert solution.smallestFactorization(476338558) == 0\nassert solution.smallestFactorization(1860132881) == 0\nassert solution.smallestFactorization(1954124043) == 0\nassert solution.smallestFactorization(1073805126) == 0\nassert solution.smallestFactorization(837623932) == 0\nassert solution.smallestFactorization(932971018) == 0\nassert solution.smallestFactorization(1284864352) == 0\nassert solution.smallestFactorization(1763862344) == 0\nassert solution.smallestFactorization(1087761895) == 0\nassert solution.smallestFactorization(1198217575) == 0\nassert solution.smallestFactorization(732430690) == 0\nassert solution.smallestFactorization(73051644) == 0\nassert solution.smallestFactorization(623441282) == 0\nassert solution.smallestFactorization(658615845) == 0\nassert solution.smallestFactorization(1380120087) == 0\nassert solution.smallestFactorization(893159258) == 0\nassert solution.smallestFactorization(1202124734) == 0\nassert solution.smallestFactorization(248043336) == 0\nassert solution.smallestFactorization(345398062) == 0\nassert solution.smallestFactorization(492965743) == 0\nassert solution.smallestFactorization(306273758) == 0\nassert solution.smallestFactorization(536601394) == 0\nassert solution.smallestFactorization(1649097877) == 0\nassert solution.smallestFactorization(1468971410) == 0\nassert solution.smallestFactorization(1872646324) == 0\nassert solution.smallestFactorization(404748532) == 0\nassert solution.smallestFactorization(711647971) == 0",
  "inefficient_solution": "class Solution:\n    def smallestFactorization(self, num: int) -> int:\n        if num < 2:\n            return num\n        ans = \"\"\n        mul = 1\n        for i in range(9, 1, -1):\n            while num % i == 0:\n                num //= i\n                ans += str(i)\n                mul *= 10\n        if not ans:\n            return 0\n        result = int(ans, 10)\n        if result > 2**31 - 1:\n            return 0\n        return result",
  "is_python": true
}