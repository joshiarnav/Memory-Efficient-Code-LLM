{
  "problem_idx": 2708,
  "task_name": "Maximum Strength of a Group",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` representing the score of students in an exam. The teacher would like to form one **non-empty** group of students with maximal **strength**, where the strength of a group of students of indices `i0`, `i1`, `i2`, ... , `ik` is defined as `nums[i0] * nums[i1] * nums[i2] * ... * nums[ik\u200b]`.\n\n\nReturn *the maximum strength of a group the teacher can create*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,-1,-5,2,5,-9]\n**Output:** 1350\n**Explanation:** One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-4,-5,-4]\n**Output:** 20\n**Explanation:** Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 13`\n* `-9 <= nums[i] <= 9`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if nums[1] == nums[-1] == 0:\n            return 0\n        ans, i = 1, 0\n        while i < n:\n            if nums[i] < 0 and i + 1 < n and nums[i + 1] < 0:\n                ans *= nums[i] * nums[i + 1]\n                i += 2\n            elif nums[i] <= 0:\n                i += 1\n            else:\n                ans *= nums[i]\n                i += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if nums[1] == nums[-1] == 0:\n            return 0\n        ans, i = 1, 0\n        while i < n:\n            if nums[i] < 0 and i + 1 < n and nums[i + 1] < 0:\n                ans *= nums[i] * nums[i + 1]\n                i += 2\n            elif nums[i] <= 0:\n                i += 1\n            else:\n                ans *= nums[i]\n                i += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(-9, 10), k=random.randint(1, 13))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxStrength(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxStrength(nums) == expected_result\n        test_case_generator_results.append(f\"assert solution.maxStrength({nums}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxStrength([-3, 4]) == 4\nassert solution.maxStrength([-8, -6, -2, -1, -1, 2, 3, 4, 6, 7]) == 96768\nassert solution.maxStrength([-7, -5, -5, 3, 3, 7, 9, 9]) == 178605\nassert solution.maxStrength([-9, -9, -6, -5, -1, 2, 2, 3, 9]) == 262440\nassert solution.maxStrength([-9, -9, -6, -4, -2, 0, 0, 1, 4, 5, 6, 8]) == 1866240\nassert solution.maxStrength([-1, 3, 6, 8]) == 144\nassert solution.maxStrength([-9, -5, -3, -2, 0, 1, 2, 6]) == 3240\nassert solution.maxStrength([-5, -4, -3, -2, -1, 3, 3, 4, 6, 6, 7]) == 1088640\nassert solution.maxStrength([-8, 2, 5]) == 10\nassert solution.maxStrength([-7, -5, -4, 1, 2, 2, 4, 4, 7, 8]) == 125440\nassert solution.maxStrength([-8, -6, -3, -1, 1, 3, 4, 5, 7, 8]) == 483840\nassert solution.maxStrength([-8, -7, -5, -2, 0, 1, 3, 5, 5, 7]) == 294000\nassert solution.maxStrength([-6, 0, 1, 2, 3, 3, 6, 6, 9]) == 5832\nassert solution.maxStrength([-9, -9, -8, 0, 1, 1, 4, 4, 7, 8]) == 72576\nassert solution.maxStrength([-4]) == -4\nassert solution.maxStrength([-8]) == -8\nassert solution.maxStrength([2]) == 2\nassert solution.maxStrength([-9, -8, -8, -8, -6, -5, 3, 4, 4, 7, 8, 8, 9]) == 26754416640\nassert solution.maxStrength([-9, -8, -5, -3, -2, -2, -1, 2, 4, 7, 9]) == 2177280\nassert solution.maxStrength([0, 2, 6]) == 12\nassert solution.maxStrength([-9, -8, -6, -5, -5, -2, -1, 0, 3, 7, 8]) == 3628800\nassert solution.maxStrength([-9, -8, -5, -4, -4, -2, 1, 2, 5]) == 115200\nassert solution.maxStrength([-9, -7, -5, -5, -3, -3, -3, -2, -2, 2, 5, 6, 9]) == 45927000\nassert solution.maxStrength([-9, -8, -1, 0, 2, 2, 4, 6]) == 6912\nassert solution.maxStrength([-8, -1, 5, 5, 6, 9]) == 10800\nassert solution.maxStrength([-8, -6, -5, -4, -3, -2, 0, 1, 3, 7, 8, 8, 8]) == 61931520\nassert solution.maxStrength([-8, -6, -5, -4, 4, 7, 7]) == 188160\nassert solution.maxStrength([-9, -8, -6, 2, 3, 4, 5, 7]) == 60480\nassert solution.maxStrength([-8, -7, -4, 1, 5, 9]) == 2520\nassert solution.maxStrength([-5, -1, 1, 1, 1, 2, 2]) == 20\nassert solution.maxStrength([-9, -8, -1, 3, 3, 8]) == 5184\nassert solution.maxStrength([-9, -7, -6, -4, -2, -2, -1, 1, 2, 7, 9]) == 762048\nassert solution.maxStrength([-7, -6, -5, 1, 2, 3, 5, 7, 8, 9]) == 635040\nassert solution.maxStrength([-9, 0, 3]) == 3\nassert solution.maxStrength([-9, -8, -7, -3, 1, 1, 3, 5, 6]) == 136080\nassert solution.maxStrength([-8, -7, 9]) == 504\nassert solution.maxStrength([-7, -6, 5, 8]) == 1680\nassert solution.maxStrength([-7, -7, -5, -4, -3, 0, 1, 2, 2, 3, 8, 9]) == 846720\nassert solution.maxStrength([-7, -6, 4, 7]) == 1176\nassert solution.maxStrength([-9, -6, -5, -2, 0, 6, 7, 8, 9, 9]) == 14696640\nassert solution.maxStrength([-9, -3, -3, 0, 2, 4, 5, 6, 6, 6, 7, 8]) == 13063680\nassert solution.maxStrength([-9, -4, -2, -1, 1, 1, 4, 4, 5, 5, 5, 7, 9]) == 9072000\nassert solution.maxStrength([-7, -4, -2, -1]) == 56\nassert solution.maxStrength([-9, -8, -8, -7, -5, -4, -4, -2, 0, 1, 5, 6, 7]) == 135475200\nassert solution.maxStrength([-6, -4, 4, 7, 7]) == 4704\nassert solution.maxStrength([-9, -7, -6, -1, 1, 3, 5, 7]) == 39690\nassert solution.maxStrength([-9, -8, -5, -4, -4, -1, 1, 1, 2, 4, 4]) == 184320\nassert solution.maxStrength([-8, -2, 0, 1, 3, 5, 9]) == 2160\nassert solution.maxStrength([-8, -3, 0, 1, 5, 6, 8]) == 5760\nassert solution.maxStrength([-7, -5, -4, 0, 2]) == 70\nassert solution.maxStrength([-8, -4, 3]) == 96\nassert solution.maxStrength([-8, -2, -2, 0, 0, 1, 3, 4, 5]) == 960\nassert solution.maxStrength([-8, -8, -7, -2, -2, -2, -1, 2]) == 7168\nassert solution.maxStrength([-7, -4, -3, 0, 3]) == 84\nassert solution.maxStrength([-8, -5]) == 40\nassert solution.maxStrength([-9, -5, -4, -3, -2, 2, 2, 3, 7, 7, 8, 8, 8]) == 162570240\nassert solution.maxStrength([-8, -4, -3, -2, -1, 1, 2, 5, 8, 9]) == 138240\nassert solution.maxStrength([-9, -3, -3, 9]) == 243\nassert solution.maxStrength([-8, -6, -5, -4, 1, 9, 9]) == 77760\nassert solution.maxStrength([5]) == 5\nassert solution.maxStrength([-3]) == -3\nassert solution.maxStrength([6]) == 6\nassert solution.maxStrength([-4, -4, -4, -3, 3, 3, 4, 6, 6, 7, 7, 9, 9]) == 987614208\nassert solution.maxStrength([-7, -5, -5, -4, -3, 2, 3, 5, 8]) == 168000\nassert solution.maxStrength([-7, -5, 0, 0, 0, 3, 4, 9, 9, 9]) == 306180\nassert solution.maxStrength([-4, -3, -1, 0, 0, 1, 5, 8]) == 480\nassert solution.maxStrength([-9, -4, -4, -3, 3, 3, 4, 5, 7, 7]) == 3810240\nassert solution.maxStrength([-5, -3, -2, -1, 4, 9]) == 1080\nassert solution.maxStrength([-7, -7, -6, -5, -4, -4, -3, -2, -1, -1, 2, 5, 6]) == 8467200\nassert solution.maxStrength([0, 0, 5, 5, 6, 6, 7, 9]) == 56700\nassert solution.maxStrength([-9, -7, -6, -4, -3, 2, 6, 6, 9]) == 979776\nassert solution.maxStrength([-8, -4, -1, 0, 1, 6, 9, 9, 9]) == 139968\nassert solution.maxStrength([-6, -2, -1, 6]) == 72\nassert solution.maxStrength([-9, -8, -5, -5, -1, 3, 4, 6]) == 129600\nassert solution.maxStrength([-4, -3, 0, 2, 8]) == 192\nassert solution.maxStrength([-9, -9, -8, -8, -8, -7, -7, -1, 3, 4, 7, 7, 9]) == 10754021376\nassert solution.maxStrength([-5]) == -5\nassert solution.maxStrength([-8, -5, -1, 0, 7]) == 280\nassert solution.maxStrength([-9, -8, -8, -3, -3, -2, -1, 1, 1, 2, 6]) == 124416\nassert solution.maxStrength([-9, -6, -4, -3, 0, 6]) == 3888\nassert solution.maxStrength([-9, -7, -4, -2, -1, -1, 2, 6, 6, 7]) == 254016\nassert solution.maxStrength([-6, -6, -5, -3, -2, 2, 6, 8, 9]) == 466560\nassert solution.maxStrength([-6, 0, 3, 7, 8, 8]) == 1344\nassert solution.maxStrength([-9, -9, -9, -5, -5, -1, 2, 3, 3]) == 328050\nassert solution.maxStrength([-7]) == -7\nassert solution.maxStrength([-7, -6, -4, -4, -1, 3, 8]) == 16128\nassert solution.maxStrength([0, 2, 5, 9]) == 90\nassert solution.maxStrength([-7, -6, -5, -4, 5, 8]) == 33600\nassert solution.maxStrength([2]) == 2\nassert solution.maxStrength([-8, -5, -3, -3, 5, 9]) == 16200\nassert solution.maxStrength([-7, -7, -6, -5, -1, 1, 2, 3]) == 8820\nassert solution.maxStrength([-9, -8, -5, -3, 0, 4, 5, 5, 7, 7, 8, 8, 9]) == 3048192000\nassert solution.maxStrength([-6, -4, -2, 2, 3, 3, 7, 9]) == 27216\nassert solution.maxStrength([-8, -8, -4, -3, -3, -2, -2, 2, 5, 6, 8, 9]) == 19906560\nassert solution.maxStrength([-7, -5, -3, -2, 1, 5]) == 1050\nassert solution.maxStrength([-9, -3, -2, -1, 1, 1, 1, 2, 2, 3, 3, 4, 8]) == 62208\nassert solution.maxStrength([-9, -6, -6, -6, -5, -4, 0, 0, 2, 3, 5, 7]) == 8164800\nassert solution.maxStrength([-9]) == -9\nassert solution.maxStrength([-6, -3, -1, 2, 6, 7]) == 1512\nassert solution.maxStrength([-1, 0, 0, 4]) == 4",
  "inefficient_solution": "class Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n        # Create a dictionary to store the frequency of each number\n        num_freq = {}\n        for num in nums:\n            if num not in num_freq:\n                num_freq[num] = 1\n            else:\n                num_freq[num] += 1\n\n        # Create a list to store all possible combinations of numbers\n        combinations = []\n        for num in num_freq:\n            temp = [num]\n            self.generate_combinations(temp, num_freq, combinations)\n\n        # Calculate the strength of each combination\n        strengths = []\n        for combination in combinations:\n            strength = 1\n            for num in combination:\n                strength *= num\n            strengths.append(strength)\n\n        # Return the maximum strength\n        return max(strengths)\n\n    def generate_combinations(self, current, num_freq, combinations):\n        if len(current) > 13:  # arbitrary limit\n            return\n        combinations.append(current[:])\n        for num in num_freq:\n            current.append(num)\n            self.generate_combinations(current, num_freq, combinations)\n            current.pop()",
  "is_python": true
}