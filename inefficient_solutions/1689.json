{
  "problem_idx": 1689,
  "task_name": "Partitioning Into Minimum Number Of Deci",
  "markdown_description": "\nA decimal number is called **deci-binary** if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are **deci-binary**, while `112` and `3001` are not.\n\n\nGiven a string `n` that represents a positive decimal integer, return *the **minimum** number of positive **deci-binary** numbers needed so that they sum up to* `n`*.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = \"32\"\n**Output:** 3\n**Explanation:** 10 + 11 + 11 = 32\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = \"82734\"\n**Output:** 8\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = \"27346209830709182346\"\n**Output:** 9\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n.length <= 105`\n* `n` consists of only digits.\n* `n` does not contain any leading zeros and represents a positive integer.\n\n\n",
  "canonical_solution": "class Solution:\n    def minPartitions(self, n: str) -> int:\n        return int(max(n))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minPartitions(self, n: str) -> int:\n        return int(max(n))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random positive decimal integer as n\n    n = random.randint(1, 100)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minPartitions(str(n))\n    \n    return str(n), expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minPartitions(n) == expected_result\n        print(f\"assert solution.minPartitions('{n}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minPartitions('{n}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minPartitions('35') == 5\nassert solution.minPartitions('57') == 7\nassert solution.minPartitions('14') == 4\nassert solution.minPartitions('5') == 5\nassert solution.minPartitions('73') == 7\nassert solution.minPartitions('70') == 7\nassert solution.minPartitions('32') == 3\nassert solution.minPartitions('41') == 4\nassert solution.minPartitions('84') == 8\nassert solution.minPartitions('55') == 5\nassert solution.minPartitions('17') == 7\nassert solution.minPartitions('45') == 5\nassert solution.minPartitions('76') == 7\nassert solution.minPartitions('51') == 5\nassert solution.minPartitions('66') == 6\nassert solution.minPartitions('13') == 3\nassert solution.minPartitions('55') == 5\nassert solution.minPartitions('23') == 3\nassert solution.minPartitions('54') == 5\nassert solution.minPartitions('38') == 8\nassert solution.minPartitions('5') == 5\nassert solution.minPartitions('9') == 9\nassert solution.minPartitions('63') == 6\nassert solution.minPartitions('64') == 6\nassert solution.minPartitions('44') == 4\nassert solution.minPartitions('97') == 9\nassert solution.minPartitions('42') == 4\nassert solution.minPartitions('2') == 2\nassert solution.minPartitions('92') == 9\nassert solution.minPartitions('54') == 5\nassert solution.minPartitions('50') == 5\nassert solution.minPartitions('61') == 6\nassert solution.minPartitions('55') == 5\nassert solution.minPartitions('1') == 1\nassert solution.minPartitions('83') == 8\nassert solution.minPartitions('77') == 7\nassert solution.minPartitions('3') == 3\nassert solution.minPartitions('20') == 2\nassert solution.minPartitions('57') == 7\nassert solution.minPartitions('81') == 8\nassert solution.minPartitions('35') == 5\nassert solution.minPartitions('28') == 8\nassert solution.minPartitions('15') == 5\nassert solution.minPartitions('67') == 7\nassert solution.minPartitions('90') == 9\nassert solution.minPartitions('41') == 4\nassert solution.minPartitions('20') == 2\nassert solution.minPartitions('48') == 8\nassert solution.minPartitions('92') == 9\nassert solution.minPartitions('97') == 9\nassert solution.minPartitions('92') == 9\nassert solution.minPartitions('28') == 8\nassert solution.minPartitions('73') == 7\nassert solution.minPartitions('86') == 8\nassert solution.minPartitions('56') == 6\nassert solution.minPartitions('96') == 9\nassert solution.minPartitions('5') == 5\nassert solution.minPartitions('64') == 6\nassert solution.minPartitions('34') == 4\nassert solution.minPartitions('60') == 6\nassert solution.minPartitions('50') == 5\nassert solution.minPartitions('68') == 8\nassert solution.minPartitions('13') == 3\nassert solution.minPartitions('20') == 2\nassert solution.minPartitions('24') == 4\nassert solution.minPartitions('32') == 3\nassert solution.minPartitions('35') == 5\nassert solution.minPartitions('90') == 9\nassert solution.minPartitions('15') == 5\nassert solution.minPartitions('5') == 5\nassert solution.minPartitions('71') == 7\nassert solution.minPartitions('95') == 9\nassert solution.minPartitions('98') == 9\nassert solution.minPartitions('4') == 4\nassert solution.minPartitions('58') == 8\nassert solution.minPartitions('79') == 9\nassert solution.minPartitions('66') == 6\nassert solution.minPartitions('100') == 1\nassert solution.minPartitions('23') == 3\nassert solution.minPartitions('57') == 7\nassert solution.minPartitions('35') == 5\nassert solution.minPartitions('50') == 5\nassert solution.minPartitions('2') == 2\nassert solution.minPartitions('3') == 3\nassert solution.minPartitions('63') == 6\nassert solution.minPartitions('91') == 9\nassert solution.minPartitions('88') == 8\nassert solution.minPartitions('1') == 1\nassert solution.minPartitions('2') == 2\nassert solution.minPartitions('96') == 9\nassert solution.minPartitions('52') == 5\nassert solution.minPartitions('89') == 9\nassert solution.minPartitions('38') == 8\nassert solution.minPartitions('12') == 2\nassert solution.minPartitions('28') == 8\nassert solution.minPartitions('72') == 7\nassert solution.minPartitions('28') == 8\nassert solution.minPartitions('60') == 6\nassert solution.minPartitions('6') == 6\nassert solution.minPartitions('38') == 8",
  "inefficient_solution": "class Solution:\n    def minPartitions(self, n: str) -> int:\n        s = str(n)\n        m = []\n        for i in range(len(s)):\n            for j in range(len(s)):\n                temp = s[:i] + str(int(s[i]) + int(s[j])) + s[i+1:]\n                m.append(temp)\n        count = 0\n        for i in m:\n            if int(i) == int(n):\n                count += 1\n        return count",
  "is_python": true
}