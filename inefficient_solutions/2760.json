{
  "problem_idx": 2760,
  "task_name": "Longest Even Odd Subarray With Threshold",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `threshold`.\n\n\nFind the length of the **longest subarray** of `nums` starting at index `l` and ending at index `r` `(0 <= l <= r < nums.length)` that satisfies the following conditions:\n\n\n* `nums[l] % 2 == 0`\n* For all indices `i` in the range `[l, r - 1]`, `nums[i] % 2 != nums[i + 1] % 2`\n* For all indices `i` in the range `[l, r]`, `nums[i] <= threshold`\n\n\nReturn *an integer denoting the length of the longest such subarray.*\n\n\n**Note:** A **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,5,4], threshold = 5\n**Output:** 3\n**Explanation:** In this example, we can select the subarray that starts at l = 1 and ends at r = 3 => [2,5,4]. This subarray satisfies the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2], threshold = 2\n**Output:** 1\n**Explanation:** In this example, we can select the subarray that starts at l = 1 and ends at r = 1 => [2]. \nIt satisfies all the conditions and we can show that 1 is the maximum possible achievable length.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,3,4,5], threshold = 4\n**Output:** 3\n**Explanation:** In this example, we can select the subarray that starts at l = 0 and ends at r = 2 => [2,3,4]. \nIt satisfies all the conditions.\nHence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `1 <= threshold <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestAlternatingSubarray(self, nums: List[int], threshold: int) -> int:\n        ans, l, n = 0, 0, len(nums)\n        while l < n:\n            if nums[l] % 2 == 0 and nums[l] <= threshold:\n                r = l + 1\n                while r < n and nums[r] % 2 != nums[r - 1] % 2 and nums[r] <= threshold:\n                    r += 1\n                ans = max(ans, r - l)\n                l = r\n            else:\n                l += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestAlternatingSubarray(self, nums, threshold):\n        ans, l, n = 0, 0, len(nums)\n        while l < n:\n            if nums[l] % 2 == 0 and nums[l] <= threshold:\n                r = l + 1\n                while r < n and nums[r] % 2 != nums[r - 1] % 2 and nums[r] <= threshold:\n                    r += 1\n                ans = max(ans, r - l)\n                l = r\n            else:\n                l += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random threshold\n    threshold = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestAlternatingSubarray(nums, threshold)\n\n    return nums, threshold, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, threshold, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestAlternatingSubarray(nums, threshold) == expected_result\n        print(f\"assert solution.longestAlternatingSubarray({nums}, {threshold}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestAlternatingSubarray({nums}, {threshold}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestAlternatingSubarray([90, 72], 41) == 0\nassert solution.longestAlternatingSubarray([64, 63, 47, 38, 23, 87, 32, 19], 76) == 2\nassert solution.longestAlternatingSubarray([17, 8, 36, 24, 23], 87) == 2\nassert solution.longestAlternatingSubarray([33, 86, 72, 54], 59) == 1\nassert solution.longestAlternatingSubarray([34, 79, 21, 61], 7) == 0\nassert solution.longestAlternatingSubarray([54, 82, 75, 3, 37, 42, 59, 50], 80) == 3\nassert solution.longestAlternatingSubarray([100, 45, 41, 95, 44, 57], 96) == 2\nassert solution.longestAlternatingSubarray([99, 51, 8, 46, 98, 1, 77], 8) == 1\nassert solution.longestAlternatingSubarray([10, 24, 40, 64], 50) == 1\nassert solution.longestAlternatingSubarray([84, 57, 73], 87) == 2\nassert solution.longestAlternatingSubarray([46, 66, 17, 27], 25) == 0\nassert solution.longestAlternatingSubarray([44, 96, 14, 85, 72, 62, 91, 42], 46) == 1\nassert solution.longestAlternatingSubarray([44, 79, 3, 64, 100], 9) == 0\nassert solution.longestAlternatingSubarray([66, 37, 51, 23, 18, 90, 28, 82, 83], 26) == 1\nassert solution.longestAlternatingSubarray([24, 52, 78, 33, 59, 64, 77, 61], 2) == 0\nassert solution.longestAlternatingSubarray([78, 16, 54, 75], 92) == 2\nassert solution.longestAlternatingSubarray([46, 19, 25, 8, 77], 72) == 2\nassert solution.longestAlternatingSubarray([16, 89, 9, 28, 64, 66, 82, 26, 38], 21) == 1\nassert solution.longestAlternatingSubarray([14, 48, 30, 11, 96, 37, 50, 51], 7) == 0\nassert solution.longestAlternatingSubarray([9, 8, 27, 18, 42, 59, 20, 33], 44) == 3\nassert solution.longestAlternatingSubarray([83, 23, 71, 39, 96, 55], 75) == 0\nassert solution.longestAlternatingSubarray([25, 8, 43, 63], 60) == 2\nassert solution.longestAlternatingSubarray([66, 21, 64, 71, 76, 4, 85, 25, 68], 49) == 1\nassert solution.longestAlternatingSubarray([23, 4, 40, 83, 63, 17, 61], 17) == 1\nassert solution.longestAlternatingSubarray([83, 33, 81, 91, 72, 70, 73, 99], 97) == 2\nassert solution.longestAlternatingSubarray([52, 66, 54, 61, 92, 22, 49, 29, 91, 63], 85) == 2\nassert solution.longestAlternatingSubarray([99, 54], 45) == 0\nassert solution.longestAlternatingSubarray([46, 55, 56, 5, 98, 32, 49, 3, 7], 85) == 4\nassert solution.longestAlternatingSubarray([25, 9, 86, 58, 93, 8, 42], 72) == 1\nassert solution.longestAlternatingSubarray([10, 13, 79], 78) == 2\nassert solution.longestAlternatingSubarray([95, 91, 35, 34, 7, 83, 15, 31], 7) == 0\nassert solution.longestAlternatingSubarray([36, 9, 22, 80, 82, 45, 97], 37) == 3\nassert solution.longestAlternatingSubarray([66, 16, 67, 79, 41, 46, 11, 10], 2) == 0\nassert solution.longestAlternatingSubarray([13, 76, 91, 42, 9, 40, 52], 45) == 3\nassert solution.longestAlternatingSubarray([48, 73, 54, 2, 94], 86) == 3\nassert solution.longestAlternatingSubarray([80, 62, 53, 85, 39, 18, 15, 10, 23], 76) == 4\nassert solution.longestAlternatingSubarray([32, 39, 71, 16, 46, 25], 65) == 2\nassert solution.longestAlternatingSubarray([69, 16], 27) == 1\nassert solution.longestAlternatingSubarray([46, 8, 98, 3, 74], 84) == 1\nassert solution.longestAlternatingSubarray([80, 31, 13, 42, 75, 92, 74], 18) == 0\nassert solution.longestAlternatingSubarray([13, 29, 41, 40, 89], 10) == 0\nassert solution.longestAlternatingSubarray([14, 81], 80) == 1\nassert solution.longestAlternatingSubarray([83, 90, 82, 80, 1, 48, 14], 48) == 1\nassert solution.longestAlternatingSubarray([91, 28, 19, 18, 31, 4, 70, 44, 84, 94], 31) == 5\nassert solution.longestAlternatingSubarray([25, 13, 56, 60, 91, 76, 92, 53, 100], 68) == 1\nassert solution.longestAlternatingSubarray([91, 83, 26, 100, 65, 13, 92, 68], 44) == 1\nassert solution.longestAlternatingSubarray([3, 48, 27, 57, 81, 97, 89, 35, 69, 55], 83) == 2\nassert solution.longestAlternatingSubarray([26, 81, 60, 73, 75], 74) == 2\nassert solution.longestAlternatingSubarray([14, 18, 52, 75, 10, 96, 95], 5) == 0\nassert solution.longestAlternatingSubarray([38, 42, 13, 3, 51, 88, 56, 93, 53], 60) == 2\nassert solution.longestAlternatingSubarray([51, 6, 56, 92, 60, 91, 48, 73, 32], 51) == 1\nassert solution.longestAlternatingSubarray([98, 8, 23, 7, 6, 92, 58], 59) == 2\nassert solution.longestAlternatingSubarray([38, 73, 75, 13, 22, 56, 44, 85], 17) == 0\nassert solution.longestAlternatingSubarray([39, 57], 39) == 0\nassert solution.longestAlternatingSubarray([38, 34, 54, 13, 27], 53) == 1\nassert solution.longestAlternatingSubarray([43, 28, 67, 55], 27) == 0\nassert solution.longestAlternatingSubarray([90, 92, 36], 63) == 1\nassert solution.longestAlternatingSubarray([51, 12], 62) == 1\nassert solution.longestAlternatingSubarray([60, 23, 11, 51, 16, 64, 73], 27) == 1\nassert solution.longestAlternatingSubarray([87, 47, 98, 12, 39, 19, 32, 66, 45, 20], 74) == 3\nassert solution.longestAlternatingSubarray([94, 87, 95, 74], 21) == 0\nassert solution.longestAlternatingSubarray([18, 57, 58, 74, 93, 86, 55], 58) == 3\nassert solution.longestAlternatingSubarray([45, 54, 14, 71, 44, 28, 82], 72) == 3\nassert solution.longestAlternatingSubarray([95, 74, 27, 62, 97, 8, 35, 65, 37], 17) == 1\nassert solution.longestAlternatingSubarray([67, 97, 100, 6, 3, 15, 66, 85], 84) == 2\nassert solution.longestAlternatingSubarray([58, 15, 50, 29, 95, 46], 56) == 2\nassert solution.longestAlternatingSubarray([56, 48, 75, 95, 58, 67, 88, 24], 80) == 2\nassert solution.longestAlternatingSubarray([55, 81, 85, 57], 100) == 0\nassert solution.longestAlternatingSubarray([46, 39, 60, 96, 71, 47, 84, 4, 15, 62], 74) == 3\nassert solution.longestAlternatingSubarray([15, 97, 76, 51, 58, 11], 33) == 0\nassert solution.longestAlternatingSubarray([87, 96, 25, 22, 55], 23) == 1\nassert solution.longestAlternatingSubarray([10, 76], 39) == 1\nassert solution.longestAlternatingSubarray([76, 69, 19, 90, 33, 68, 64, 41], 9) == 0\nassert solution.longestAlternatingSubarray([57, 26, 51, 33], 96) == 2\nassert solution.longestAlternatingSubarray([21, 25, 76, 46, 75, 99, 5, 61, 64], 55) == 1\nassert solution.longestAlternatingSubarray([67, 34, 33, 24, 91, 81], 58) == 3\nassert solution.longestAlternatingSubarray([3, 83, 98], 31) == 0\nassert solution.longestAlternatingSubarray([86, 41, 2, 57], 72) == 2\nassert solution.longestAlternatingSubarray([60, 84, 66, 69, 40, 51, 93, 79, 7, 37], 87) == 4\nassert solution.longestAlternatingSubarray([14, 50, 55, 45], 39) == 1\nassert solution.longestAlternatingSubarray([88, 56, 22, 15, 87], 70) == 2\nassert solution.longestAlternatingSubarray([81, 12, 22, 86, 78, 62, 75, 85], 30) == 1\nassert solution.longestAlternatingSubarray([12, 94, 57, 77, 60, 44, 36, 88, 20, 99], 21) == 1\nassert solution.longestAlternatingSubarray([44, 4, 18, 70, 42, 73, 1, 6, 57], 76) == 2\nassert solution.longestAlternatingSubarray([13, 96, 21, 59, 34, 25, 9, 43], 14) == 0\nassert solution.longestAlternatingSubarray([97, 9, 5, 4, 52, 46, 61, 40, 22], 37) == 1\nassert solution.longestAlternatingSubarray([75, 61, 49, 77, 63, 67, 10, 55, 96, 80], 89) == 2\nassert solution.longestAlternatingSubarray([98, 42, 86, 40], 82) == 1\nassert solution.longestAlternatingSubarray([35, 69, 73, 7], 96) == 0\nassert solution.longestAlternatingSubarray([70, 97, 40, 85, 35, 93, 11], 69) == 1\nassert solution.longestAlternatingSubarray([72, 90], 12) == 0\nassert solution.longestAlternatingSubarray([56, 47, 4, 83, 91, 89, 71], 57) == 3\nassert solution.longestAlternatingSubarray([53, 84, 91, 32, 62, 80], 48) == 1\nassert solution.longestAlternatingSubarray([90, 99, 53, 45, 85, 55, 29, 7, 80], 91) == 1\nassert solution.longestAlternatingSubarray([84, 27, 24, 99, 96, 54, 40, 55, 4], 30) == 1\nassert solution.longestAlternatingSubarray([40, 86, 61, 62, 73, 58, 98, 78, 95], 18) == 0\nassert solution.longestAlternatingSubarray([47, 71, 68, 85, 33, 86, 35, 27, 14], 75) == 1\nassert solution.longestAlternatingSubarray([59, 8, 33, 19, 43, 10, 97], 3) == 0\nassert solution.longestAlternatingSubarray([87, 17], 40) == 0\nassert solution.longestAlternatingSubarray([40, 57, 38, 83, 67, 59, 42], 69) == 3",
  "inefficient_solution": "class Solution:\n    def longestAlternatingSubarray(self, nums, threshold):\n        n = len(nums)\n        if n == 1:\n            return 1\n\n        max_len = 0\n        for i in range(n):\n            length = 1\n            flag = nums[i] % 2\n            for j in range(i + 1, n):\n                if nums[j] % 2 != flag and nums[j] <= threshold:\n                    length += 1\n                elif nums[j] % 2 == flag or nums[j] > threshold:\n                    break\n                else:\n                    flag = nums[j] % 2\n                    length += 1\n                max_len = max(max_len, length)\n\n        return max_len",
  "is_python": true
}