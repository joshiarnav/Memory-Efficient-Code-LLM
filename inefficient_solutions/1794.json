{
  "problem_idx": 1794,
  "task_name": "Count Pairs of Equal Substrings With Minimum Difference",
  "markdown_description": "\nYou are given two strings `firstString` and `secondString` that are **0-indexed** and consist only of lowercase English letters. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions:\n\n\n* `0 <= i <= j < firstString.length`\n* `0 <= a <= b < secondString.length`\n* The substring of `firstString` that starts at the `ith` character and ends at the `jth` character (inclusive) is **equal** to the substring of `secondString` that starts at the `ath` character and ends at the `bth` character (inclusive).\n* `j - a` is the **minimum** possible value among all quadruples that satisfy the previous conditions.\n\n\nReturn *the **number** of such quadruples*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** firstString = \"abcd\", secondString = \"bccda\"\n**Output:** 1\n**Explanation:** The quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** firstString = \"ab\", secondString = \"cd\"\n**Output:** 0\n**Explanation:** There are no quadruples satisfying all the conditions.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= firstString.length, secondString.length <= 2 * 105`\n* Both strings consist only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def countQuadruples(self, firstString: str, secondString: str) -> int:\n        last = {c: i for i, c in enumerate(secondString)}\n        ans, mi = 0, inf\n        for i, c in enumerate(firstString):\n            if c in last:\n                t = i - last[c]\n                if mi > t:\n                    mi = t\n                    ans = 1\n                elif mi == t:\n                    ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countQuadruples(self, firstString: str, secondString: str) -> int:\n        last = {c: i for i, c in enumerate(secondString)}\n        ans, mi = 0, float('inf')\n        for i, c in enumerate(firstString):\n            if c in last:\n                t = i - last[c]\n                if mi > t:\n                    mi = t\n                    ans = 1\n                elif mi == t:\n                    ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    firstString = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n    secondString = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countQuadruples(firstString, secondString)\n\n    return firstString, secondString, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        firstString, secondString, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countQuadruples(firstString, secondString) == expected_result\n        print(f\"assert solution.countQuadruples('{firstString}', '{secondString}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countQuadruples('{firstString}', '{secondString}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countQuadruples('kikdefwpz', 'hbf') == 1\nassert solution.countQuadruples('mu', 'mnifrf') == 1\nassert solution.countQuadruples('qaorxyvkq', 'vhouwrufgn') == 1\nassert solution.countQuadruples('saur', 'ytamlla') == 1\nassert solution.countQuadruples('mencqs', 'lutlks') == 1\nassert solution.countQuadruples('mggjqpxgkw', 'wcrgszo') == 1\nassert solution.countQuadruples('wcyx', 'vjoaqw') == 1\nassert solution.countQuadruples('pqknj', 'acmtoed') == 0\nassert solution.countQuadruples('m', 'fgc') == 0\nassert solution.countQuadruples('npasoh', 'tzusx') == 1\nassert solution.countQuadruples('ziiuvvnmfd', 'iye') == 1\nassert solution.countQuadruples('ayeiygdzk', 'jzlzmewyjq') == 1\nassert solution.countQuadruples('obv', 'vovn') == 1\nassert solution.countQuadruples('vyai', 'xnhpliulyd') == 1\nassert solution.countQuadruples('ewsd', 'dcaj') == 1\nassert solution.countQuadruples('usokck', 'bdqnloluyp') == 1\nassert solution.countQuadruples('moperz', 'nrlzh') == 1\nassert solution.countQuadruples('cqzjsnf', 'ktcnxdth') == 1\nassert solution.countQuadruples('bosc', 'fhfnk') == 0\nassert solution.countQuadruples('yvius', 'kxnnl') == 0\nassert solution.countQuadruples('ljs', 'pcyeuvrv') == 0\nassert solution.countQuadruples('nues', 'rs') == 1\nassert solution.countQuadruples('ycun', 'fccpxdbi') == 1\nassert solution.countQuadruples('ibjrystu', 'uptzsae') == 1\nassert solution.countQuadruples('r', 'udw') == 0\nassert solution.countQuadruples('sihj', 'vhu') == 1\nassert solution.countQuadruples('nym', 'bcijcsukk') == 0\nassert solution.countQuadruples('dguh', 's') == 0\nassert solution.countQuadruples('obstxefyce', 'jggaxn') == 1\nassert solution.countQuadruples('smiu', 'eaoffv') == 0\nassert solution.countQuadruples('mjdq', 'z') == 0\nassert solution.countQuadruples('xnfahwqwem', 'eqwoxathz') == 1\nassert solution.countQuadruples('oxvvgggw', 'gbkutmt') == 1\nassert solution.countQuadruples('mnmh', 'xjkstx') == 0\nassert solution.countQuadruples('iwomlktk', 'bidrotj') == 1\nassert solution.countQuadruples('zyfxycmmk', 'jpsil') == 0\nassert solution.countQuadruples('elxl', 'yn') == 0\nassert solution.countQuadruples('uv', 'jqdt') == 0\nassert solution.countQuadruples('ji', 'vfyzxo') == 0\nassert solution.countQuadruples('chsmepwifr', 'rgqrqb') == 1\nassert solution.countQuadruples('aplzjcwjek', 'nesqapba') == 1\nassert solution.countQuadruples('bhwoorv', 'bkyj') == 1\nassert solution.countQuadruples('wytvjmdhl', 'ezzqsbnsu') == 0\nassert solution.countQuadruples('g', 'lamntofoag') == 1\nassert solution.countQuadruples('ae', 'baibn') == 1\nassert solution.countQuadruples('lqcvyp', 'zs') == 0\nassert solution.countQuadruples('focutesds', 'aihluwjj') == 1\nassert solution.countQuadruples('p', 'cqqtuzftqh') == 0\nassert solution.countQuadruples('ncpmtpy', 'sqqlwmoqqa') == 1\nassert solution.countQuadruples('oli', 'bmcrnhzish') == 1\nassert solution.countQuadruples('stx', 'wpeyzowxmp') == 1\nassert solution.countQuadruples('ab', 'yso') == 0\nassert solution.countQuadruples('x', 'bgrvl') == 0\nassert solution.countQuadruples('yrjfzxj', 'mufzzugsf') == 1\nassert solution.countQuadruples('mgcywq', 'ywyuxozvwf') == 1\nassert solution.countQuadruples('odoijikdrr', 'ctoqdg') == 1\nassert solution.countQuadruples('vhl', 'r') == 0\nassert solution.countQuadruples('cshrrrbsk', 'gxksjovt') == 1\nassert solution.countQuadruples('fqla', 'a') == 1\nassert solution.countQuadruples('t', 'znxwm') == 0\nassert solution.countQuadruples('lnrg', 'vursyqf') == 1\nassert solution.countQuadruples('vmhiheo', 'm') == 1\nassert solution.countQuadruples('ww', 'mlzyfcnv') == 0\nassert solution.countQuadruples('sjsp', 'l') == 0\nassert solution.countQuadruples('trcwbzoo', 'oajojdkfha') == 1\nassert solution.countQuadruples('xvamj', 'zywoclut') == 0\nassert solution.countQuadruples('wbx', 'k') == 0\nassert solution.countQuadruples('vrxx', 'bnrnqu') == 1\nassert solution.countQuadruples('ydkiko', 'lcrmwgopzm') == 1\nassert solution.countQuadruples('f', 'x') == 0\nassert solution.countQuadruples('sgxkq', 'hyduekbzbj') == 1\nassert solution.countQuadruples('nlvxbsa', 'chit') == 0\nassert solution.countQuadruples('dsigyif', 'glqd') == 1\nassert solution.countQuadruples('nwaerz', 'hvaufajwi') == 1\nassert solution.countQuadruples('tjrwl', 'weumk') == 1\nassert solution.countQuadruples('frryod', 'fhekim') == 1\nassert solution.countQuadruples('fffgnrvk', 'xwtrkjojp') == 1\nassert solution.countQuadruples('wigtpmyoba', 'svxpigyxq') == 2\nassert solution.countQuadruples('qafvbconu', 'q') == 1\nassert solution.countQuadruples('fry', 'qkztn') == 0\nassert solution.countQuadruples('idwoc', 'ywyukqnv') == 1\nassert solution.countQuadruples('tookeojiej', 'jp') == 1\nassert solution.countQuadruples('fvl', 'ilavxw') == 1\nassert solution.countQuadruples('isnlshzbz', 'xpgphap') == 1\nassert solution.countQuadruples('fcuq', 'isyidjxskf') == 1\nassert solution.countQuadruples('dnvagim', 'yoypwxx') == 0\nassert solution.countQuadruples('oc', 'sy') == 0\nassert solution.countQuadruples('q', 'yhzf') == 0\nassert solution.countQuadruples('pnakymuh', 'ywh') == 1\nassert solution.countQuadruples('vmoeev', 'rq') == 0\nassert solution.countQuadruples('vrk', 'gaxy') == 0\nassert solution.countQuadruples('lwzd', 'tak') == 0\nassert solution.countQuadruples('hrr', 'cuczgxoyq') == 0\nassert solution.countQuadruples('xuqwipfjpq', 'elpo') == 1\nassert solution.countQuadruples('hqsbyzm', 'jivzx') == 1\nassert solution.countQuadruples('cpns', 'palxreaj') == 1\nassert solution.countQuadruples('ur', 'ry') == 1\nassert solution.countQuadruples('ofcsek', 'bcag') == 1\nassert solution.countQuadruples('up', 'm') == 0\nassert solution.countQuadruples('rdl', 'xjgor') == 1",
  "inefficient_solution": "class Solution:\n    def countQuadruples(self, firstString: str, secondString: str) -> int:\n        secondStringList = list(secondString)\n        length = len(secondString)\n        last = {}\n        for i in range(length):\n            last[secondStringList[i]] = i\n\n        firstStringList = list(firstString)\n        firstStringLength = len(firstString)\n        ans = 0\n        minDiff = float('inf')\n\n        for i in range(firstStringLength):\n            for j in range(i, firstStringLength):\n                for a in range(length):\n                    for b in range(a, length):\n                        if firstString[i:j+1] == secondString[a:b+1]:\n                            diff = j - a\n                            if diff < minDiff:\n                                minDiff = diff\n                                ans = 1\n                            elif diff == minDiff:\n                                ans += 1\n\n        return ans",
  "is_python": true
}