{
  "problem_idx": 2516,
  "task_name": "Take K of Each Character From Left and Right",
  "markdown_description": "\nYou are given a string `s` consisting of the characters `'a'`, `'b'`, and `'c'` and a non-negative integer `k`. Each minute, you may take either the **leftmost** character of `s`, or the **rightmost** character of `s`.\n\n\nReturn *the **minimum** number of minutes needed for you to take **at least*** `k` *of each character, or return* `-1` *if it is not possible to take* `k` *of each character.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aabaaaacaabc\", k = 2\n**Output:** 8\n**Explanation:** \nTake three characters from the left of s. You now have two 'a' characters, and one 'b' character.\nTake five characters from the right of s. You now have four 'a' characters, two 'b' characters, and two 'c' characters.\nA total of 3 + 5 = 8 minutes is needed.\nIt can be proven that 8 is the minimum number of minutes needed.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"a\", k = 1\n**Output:** -1\n**Explanation:** It is not possible to take one 'b' or 'c' so return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of only the letters `'a'`, `'b'`, and `'c'`.\n* `0 <= k <= s.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def takeCharacters(self, s: str, k: int) -> int:\n        cnt = Counter(s)\n        if any(cnt[c] < k for c in \"abc\"):\n            return -1\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] -= 1\n            while cnt[c] < k:\n                cnt[s[j]] += 1\n                j += 1\n            ans = max(ans, i - j + 1)\n        return len(s) - ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def takeCharacters(self, s: str, k: int) -> int:\n        cnt = Counter(s)\n        if any(cnt[c] < k for c in \"abc\"):\n            return -1\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] -= 1\n            while cnt[c] < k:\n                cnt[s[j]] += 1\n                j += 1\n            ans = max(ans, i - j + 1)\n        return len(s) - ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = random.choice(['a', 'b', 'c']) * random.randint(0, 10)\n    \n    # Generate a random k value\n    k = random.randint(0, len(s))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.takeCharacters(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.takeCharacters(s, k) == expected_result\n        print(f\"assert solution.takeCharacters('{s}', {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.takeCharacters('{s}', {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.takeCharacters('cccc', 0) == 0\nassert solution.takeCharacters('bbbbbbb', 1) == -1\nassert solution.takeCharacters('ccccccccc', 9) == -1\nassert solution.takeCharacters('cc', 2) == -1\nassert solution.takeCharacters('aaa', 0) == 0\nassert solution.takeCharacters('ccccccccc', 3) == -1\nassert solution.takeCharacters('aaaaaaa', 3) == -1\nassert solution.takeCharacters('aaaaa', 4) == -1\nassert solution.takeCharacters('aaaaaaa', 7) == -1\nassert solution.takeCharacters('bbbbb', 3) == -1\nassert solution.takeCharacters('ccccc', 1) == -1\nassert solution.takeCharacters('bbbbbbb', 3) == -1\nassert solution.takeCharacters('aaa', 0) == 0\nassert solution.takeCharacters('cc', 1) == -1\nassert solution.takeCharacters('ccccccc', 6) == -1\nassert solution.takeCharacters('bbbbb', 2) == -1\nassert solution.takeCharacters('cccccccccc', 2) == -1\nassert solution.takeCharacters('bbbbbbbb', 2) == -1\nassert solution.takeCharacters('b', 0) == 0\nassert solution.takeCharacters('aaaaaaaaaa', 1) == -1\nassert solution.takeCharacters('aaaaaaaaa', 4) == -1\nassert solution.takeCharacters('aaaaaaa', 4) == -1\nassert solution.takeCharacters('aaaaaaa', 3) == -1\nassert solution.takeCharacters('', 0) == 0\nassert solution.takeCharacters('ccc', 1) == -1\nassert solution.takeCharacters('cccccc', 0) == 0\nassert solution.takeCharacters('aaaaaaa', 1) == -1\nassert solution.takeCharacters('cccccccccc', 1) == -1\nassert solution.takeCharacters('aaaaa', 1) == -1\nassert solution.takeCharacters('aaaaaaaa', 2) == -1\nassert solution.takeCharacters('ccc', 2) == -1\nassert solution.takeCharacters('ccccccccc', 6) == -1\nassert solution.takeCharacters('cccc', 0) == 0\nassert solution.takeCharacters('bbbbbb', 6) == -1\nassert solution.takeCharacters('cccccccc', 7) == -1\nassert solution.takeCharacters('aaaaaaa', 1) == -1\nassert solution.takeCharacters('', 0) == 0\nassert solution.takeCharacters('bbbbbbbbb', 8) == -1\nassert solution.takeCharacters('aaaaaaa', 0) == 0\nassert solution.takeCharacters('aaaaaaaa', 3) == -1\nassert solution.takeCharacters('bbbbbbbbb', 6) == -1\nassert solution.takeCharacters('', 0) == 0\nassert solution.takeCharacters('c', 1) == -1\nassert solution.takeCharacters('cccccccc', 4) == -1\nassert solution.takeCharacters('aaaaaaaa', 8) == -1\nassert solution.takeCharacters('', 0) == 0\nassert solution.takeCharacters('bbbbbbbbb', 9) == -1\nassert solution.takeCharacters('cc', 1) == -1\nassert solution.takeCharacters('cccccc', 5) == -1\nassert solution.takeCharacters('aaaaaaaaa', 4) == -1\nassert solution.takeCharacters('cccccccc', 7) == -1\nassert solution.takeCharacters('bbb', 2) == -1\nassert solution.takeCharacters('cccc', 2) == -1\nassert solution.takeCharacters('aa', 0) == 0\nassert solution.takeCharacters('cccc', 3) == -1\nassert solution.takeCharacters('cccccc', 2) == -1\nassert solution.takeCharacters('bbbbbbbbb', 5) == -1\nassert solution.takeCharacters('bbbbbbbbbb', 8) == -1\nassert solution.takeCharacters('aaaaa', 5) == -1\nassert solution.takeCharacters('ccccccccc', 6) == -1\nassert solution.takeCharacters('b', 1) == -1\nassert solution.takeCharacters('bbbbbbbbb', 0) == 0\nassert solution.takeCharacters('a', 0) == 0\nassert solution.takeCharacters('', 0) == 0\nassert solution.takeCharacters('bb', 0) == 0\nassert solution.takeCharacters('c', 0) == 0\nassert solution.takeCharacters('bbbbbbbb', 5) == -1\nassert solution.takeCharacters('aaaaaaaaa', 0) == 0\nassert solution.takeCharacters('aaaa', 4) == -1\nassert solution.takeCharacters('aaaaaaaa', 4) == -1\nassert solution.takeCharacters('cccc', 0) == 0\nassert solution.takeCharacters('ccccccc', 5) == -1\nassert solution.takeCharacters('cccccc', 3) == -1\nassert solution.takeCharacters('bbbbbb', 4) == -1\nassert solution.takeCharacters('aaaaaaaaa', 2) == -1\nassert solution.takeCharacters('aaaa', 4) == -1\nassert solution.takeCharacters('b', 0) == 0\nassert solution.takeCharacters('bbbbbbbbbb', 7) == -1\nassert solution.takeCharacters('aa', 2) == -1\nassert solution.takeCharacters('bbbb', 0) == 0\nassert solution.takeCharacters('ccccc', 2) == -1\nassert solution.takeCharacters('aaaaaaaa', 3) == -1\nassert solution.takeCharacters('aaaaa', 5) == -1\nassert solution.takeCharacters('aaaaaaaaaa', 9) == -1\nassert solution.takeCharacters('bbbbbbbbbb', 3) == -1\nassert solution.takeCharacters('bb', 0) == 0\nassert solution.takeCharacters('', 0) == 0\nassert solution.takeCharacters('bbbbbbbbb', 0) == 0\nassert solution.takeCharacters('cccccccc', 4) == -1\nassert solution.takeCharacters('aaaaaaaa', 6) == -1\nassert solution.takeCharacters('cc', 1) == -1\nassert solution.takeCharacters('aaaaaaaa', 7) == -1\nassert solution.takeCharacters('cc', 1) == -1\nassert solution.takeCharacters('aa', 0) == 0\nassert solution.takeCharacters('ccccccccc', 4) == -1\nassert solution.takeCharacters('a', 0) == 0\nassert solution.takeCharacters('c', 1) == -1\nassert solution.takeCharacters('bbbbb', 2) == -1\nassert solution.takeCharacters('', 0) == 0\nassert solution.takeCharacters('bbbbbb', 6) == -1",
  "inefficient_solution": "class Solution:\n    def takeCharacters(self, s: str, k: int) -> int:\n        cnt = {c: 0 for c in \"abc\"}\n        for c in s:\n            cnt[c] += 1\n        if any(cnt[c] < k for c in \"abc\"):\n            return -1\n\n        min_minutes = float('inf')\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                left, right = set(), set()\n                for k in range(i, j + 1):\n                    left.add(s[k])\n                for k in range(j + 1, len(s)):\n                    right.add(s[k])\n                if len(left & {'a', 'b', 'c'}) >= k and len(right & {'a', 'b', 'c'}) >= k:\n                    min_minutes = min(min_minutes, len(s) - (j - i + 1))\n\n        return min_minutes if min_minutes != float('inf') else -1",
  "is_python": true
}