{
  "problem_idx": 2160,
  "task_name": "Minimum Sum of Four Digit Number After Splitting Digits",
  "markdown_description": "\nYou are given a **positive** integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the **digits** found in `num`. **Leading zeros** are allowed in `new1` and `new2`, and **all** the digits found in `num` must be used.\n\n\n* For example, given `num = 2932`, you have the following digits: two `2`'s, one `9` and one `3`. Some of the possible pairs `[new1, new2]` are `[22, 93]`, `[23, 92]`, `[223, 9]` and `[2, 329]`.\n\n\nReturn *the **minimum** possible sum of* `new1` *and* `new2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 2932\n**Output:** 52\n**Explanation:** Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 4009\n**Output:** 13\n**Explanation:** Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. \nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1000 <= num <= 9999`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumSum(self, num: int) -> int:\n        nums = []\n        while num:\n            nums.append(num % 10)\n            num //= 10\n        nums.sort()\n        return 10 * (nums[0] + nums[1]) + nums[2] + nums[3]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumSum(self, num: int) -> int:\n        nums = []\n        while num:\n            nums.append(num % 10)\n            num //= 10\n        nums.sort()\n        return 10 * (nums[0] + nums[1]) + nums[2] + nums[3]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random num\n    num = random.randint(1000, 9999)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumSum(num)\n\n    return num, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumSum(num) == expected_result\n        print(f\"assert solution.minimumSum({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumSum({num}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumSum(8537) == 95\nassert solution.minimumSum(3115) == 28\nassert solution.minimumSum(5306) == 41\nassert solution.minimumSum(9802) == 37\nassert solution.minimumSum(9343) == 73\nassert solution.minimumSum(6113) == 29\nassert solution.minimumSum(6503) == 41\nassert solution.minimumSum(9665) == 125\nassert solution.minimumSum(8111) == 29\nassert solution.minimumSum(1434) == 48\nassert solution.minimumSum(1651) == 31\nassert solution.minimumSum(5029) == 34\nassert solution.minimumSum(8122) == 40\nassert solution.minimumSum(3808) == 46\nassert solution.minimumSum(9002) == 11\nassert solution.minimumSum(7817) == 95\nassert solution.minimumSum(5890) == 67\nassert solution.minimumSum(6639) == 105\nassert solution.minimumSum(4139) == 53\nassert solution.minimumSum(7362) == 63\nassert solution.minimumSum(6055) == 61\nassert solution.minimumSum(8069) == 77\nassert solution.minimumSum(9859) == 148\nassert solution.minimumSum(1607) == 23\nassert solution.minimumSum(9030) == 12\nassert solution.minimumSum(1875) == 75\nassert solution.minimumSum(7372) == 64\nassert solution.minimumSum(9479) == 128\nassert solution.minimumSum(4753) == 82\nassert solution.minimumSum(2974) == 76\nassert solution.minimumSum(7869) == 147\nassert solution.minimumSum(4149) == 63\nassert solution.minimumSum(6964) == 115\nassert solution.minimumSum(4368) == 84\nassert solution.minimumSum(4967) == 116\nassert solution.minimumSum(8346) == 84\nassert solution.minimumSum(9700) == 16\nassert solution.minimumSum(4948) == 97\nassert solution.minimumSum(4580) == 53\nassert solution.minimumSum(1149) == 33\nassert solution.minimumSum(1977) == 96\nassert solution.minimumSum(8475) == 105\nassert solution.minimumSum(7547) == 104\nassert solution.minimumSum(5618) == 74\nassert solution.minimumSum(4108) == 22\nassert solution.minimumSum(7970) == 86\nassert solution.minimumSum(2708) == 35\nassert solution.minimumSum(1140) == 15\nassert solution.minimumSum(1027) == 19\nassert solution.minimumSum(1667) == 83\nassert solution.minimumSum(3640) == 40\nassert solution.minimumSum(2722) == 49\nassert solution.minimumSum(8578) == 136\nassert solution.minimumSum(7177) == 94\nassert solution.minimumSum(1466) == 62\nassert solution.minimumSum(1480) == 22\nassert solution.minimumSum(2568) == 84\nassert solution.minimumSum(5309) == 44\nassert solution.minimumSum(3717) == 54\nassert solution.minimumSum(3317) == 50\nassert solution.minimumSum(9933) == 78\nassert solution.minimumSum(8134) == 52\nassert solution.minimumSum(8982) == 117\nassert solution.minimumSum(8682) == 96\nassert solution.minimumSum(7389) == 117\nassert solution.minimumSum(7465) == 103\nassert solution.minimumSum(9616) == 85\nassert solution.minimumSum(3089) == 47\nassert solution.minimumSum(1982) == 47\nassert solution.minimumSum(9594) == 108\nassert solution.minimumSum(7939) == 118\nassert solution.minimumSum(9367) == 106\nassert solution.minimumSum(2156) == 41\nassert solution.minimumSum(7183) == 55\nassert solution.minimumSum(3887) == 116\nassert solution.minimumSum(1540) == 19\nassert solution.minimumSum(7782) == 105\nassert solution.minimumSum(5377) == 94\nassert solution.minimumSum(3507) == 42\nassert solution.minimumSum(9233) == 62\nassert solution.minimumSum(9523) == 64\nassert solution.minimumSum(2328) == 51\nassert solution.minimumSum(6183) == 54\nassert solution.minimumSum(2920) == 31\nassert solution.minimumSum(3529) == 64\nassert solution.minimumSum(8150) == 23\nassert solution.minimumSum(1697) == 86\nassert solution.minimumSum(5251) == 40\nassert solution.minimumSum(2294) == 53\nassert solution.minimumSum(2266) == 52\nassert solution.minimumSum(4074) == 51\nassert solution.minimumSum(6921) == 45\nassert solution.minimumSum(8670) == 75\nassert solution.minimumSum(2819) == 47\nassert solution.minimumSum(8032) == 31\nassert solution.minimumSum(9278) == 107\nassert solution.minimumSum(4234) == 58\nassert solution.minimumSum(3236) == 59\nassert solution.minimumSum(8817) == 96\nassert solution.minimumSum(7538) == 95",
  "inefficient_solution": "class Solution:\n    def minimumSum(self, num: int) -> int:\n        digits = []\n        for i in range(4):\n            digit = num % 10\n            digits.append(digit)\n            num //= 10\n        digits.sort()\n        new1 = 0\n        new2 = 0\n        for i in range(4):\n            if i % 2 == 0:\n                new1 = new1 * 10 + digits[i]\n            else:\n                new2 = new2 * 10 + digits[i]\n        return new1 + new2",
  "is_python": true
}