{
  "problem_idx": 1385,
  "task_name": "Find the Distance Value Between Two Arrays",
  "markdown_description": "\nGiven two integer arrays `arr1` and `arr2`, and the integer `d`, *return the distance value between the two arrays*.\n\n\nThe distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\n**Output:** 2\n**Explanation:** \nFor arr1[0]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1[1]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n**|8-10|=2 <= d=2**\n**|8-9|=1 <= d=2**\n|8-1|=7 > d=2\n**|8-8|=0 <= d=2**\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\n**Output:** 2\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr1.length, arr2.length <= 500`\n* `-1000 <= arr1[i], arr2[j] <= 1000`\n* `0 <= d <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        def check(a: int) -> bool:\n            i = bisect_left(arr2, a - d)\n            return i == len(arr2) or arr2[i] > a + d\n\n        arr2.sort()\n        return sum(check(a) for a in arr1)\n",
  "test_case_generator": "\nimport random\nfrom bisect import bisect_left\nfrom typing import List\n\nclass Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        def check(a: int) -> bool:\n            i = bisect_left(arr2, a - d)\n            return i == len(arr2) or arr2[i] > a + d\n\n        arr2.sort()\n        return sum(check(a) for a in arr1)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list for arr1\n    arr1 = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Generate random numbers list for arr2\n    arr2 = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Generate a random d value\n    d = random.randint(0, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findTheDistanceValue(arr1, arr2, d)\n\n    return arr1, arr2, d, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr1, arr2, d, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findTheDistanceValue(arr1, arr2, d) == expected_result\n        print(f\"assert solution.findTheDistanceValue({arr1}, {arr2}, {d}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findTheDistanceValue({arr1}, {arr2}, {d}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findTheDistanceValue([71, 15, 2, 77], [29, 34, 37, 52, 61, 73], 41) == 0\nassert solution.findTheDistanceValue([51], [2, 14, 30, 32, 55, 67, 72, 76, 79], 13) == 0\nassert solution.findTheDistanceValue([54, 98, 43, 85, 4, 89, 76, 26, 5, 64], [22, 27, 31, 33, 45], 74) == 0\nassert solution.findTheDistanceValue([3, 78, 56, 74, 84, 63, 90], [7, 47, 48, 79, 83, 84, 85, 86, 88], 81) == 0\nassert solution.findTheDistanceValue([58, 42, 86, 77, 55, 97, 74, 45, 87], [17, 27, 34], 28) == 5\nassert solution.findTheDistanceValue([19, 75, 91, 33, 52, 28, 93], [18, 27, 40, 59, 77, 88, 93], 36) == 0\nassert solution.findTheDistanceValue([78, 49], [8, 20, 23, 25, 37, 43, 62, 64, 89, 90], 62) == 0\nassert solution.findTheDistanceValue([73, 46, 36, 79, 39, 21, 68, 22, 57, 78], [16, 18, 19, 24, 26, 41, 53, 68, 69, 99], 84) == 0\nassert solution.findTheDistanceValue([27, 44, 55, 78, 65, 36, 93, 39, 94, 76], [40, 67], 39) == 0\nassert solution.findTheDistanceValue([92, 8, 38, 49], [11, 34, 52, 58, 85, 95], 68) == 0\nassert solution.findTheDistanceValue([68, 74, 9, 51, 13, 38, 37, 42, 60, 76], [19], 4) == 10\nassert solution.findTheDistanceValue([71], [29, 33, 36, 37, 46, 50, 65, 86, 96, 98], 9) == 0\nassert solution.findTheDistanceValue([27, 21, 74, 43], [5, 11, 13, 23, 28, 42, 48, 62], 45) == 0\nassert solution.findTheDistanceValue([95, 57, 25, 84, 38, 81, 27, 65], [8, 29, 36, 62, 72, 94, 97], 43) == 0\nassert solution.findTheDistanceValue([87, 75, 60], [27, 36, 55, 56, 62, 72, 73], 55) == 0\nassert solution.findTheDistanceValue([10, 41, 35, 88], [10, 35, 51], 93) == 0\nassert solution.findTheDistanceValue([32, 14, 33, 39, 31], [30, 41, 59, 66, 95], 9) == 1\nassert solution.findTheDistanceValue([98, 31, 28, 71, 93, 57, 39, 55], [9, 39, 88], 71) == 0\nassert solution.findTheDistanceValue([97, 44], [51, 92], 57) == 0\nassert solution.findTheDistanceValue([72, 48, 55, 6, 94, 40, 54], [44, 65, 72, 87, 90, 91], 72) == 0\nassert solution.findTheDistanceValue([18, 42, 54, 45, 46, 67, 89, 2, 91, 27], [17, 23, 46, 59, 70, 85], 32) == 0\nassert solution.findTheDistanceValue([50, 46, 25, 29, 77, 42, 64, 28, 14], [40, 43, 76, 77, 86, 88], 14) == 2\nassert solution.findTheDistanceValue([50, 46, 86, 1, 88], [4, 7, 24, 42, 81], 83) == 0\nassert solution.findTheDistanceValue([79, 94, 74, 93, 81, 85, 38, 80, 92, 53], [12, 17, 24, 28, 52, 54, 61, 71], 67) == 0\nassert solution.findTheDistanceValue([21], [2, 9, 15, 22, 31, 39, 45, 74, 78, 95], 10) == 0\nassert solution.findTheDistanceValue([77, 78, 48, 36, 56, 28, 29], [6, 52, 60, 66], 76) == 0\nassert solution.findTheDistanceValue([48, 93, 100, 89, 6, 38, 43, 37, 54, 84], [4, 16, 21, 22, 27, 50, 55, 81, 85, 98], 18) == 0\nassert solution.findTheDistanceValue([13, 21, 75, 65, 3], [11, 26, 44, 56, 81], 5) == 3\nassert solution.findTheDistanceValue([47, 11, 65, 53, 46, 80, 76, 7, 97, 6], [17, 36, 62, 63, 73, 81, 84, 88, 94, 95], 27) == 0\nassert solution.findTheDistanceValue([44, 6, 83, 19, 88, 2], [82, 91], 95) == 0\nassert solution.findTheDistanceValue([82], [5, 92, 100], 84) == 0\nassert solution.findTheDistanceValue([39, 95, 46, 21, 17, 64, 52, 70, 11], [3, 12, 65, 80], 22) == 1\nassert solution.findTheDistanceValue([93, 68, 82, 87, 35, 23, 59], [61, 87], 57) == 0\nassert solution.findTheDistanceValue([22, 26, 68, 32, 86, 18, 30, 63, 74, 40], [3, 23, 28, 34, 68, 87], 66) == 0\nassert solution.findTheDistanceValue([24], [48, 95], 48) == 0\nassert solution.findTheDistanceValue([74, 38, 72, 10, 45, 60, 33, 76, 28, 73], [34], 15) == 6\nassert solution.findTheDistanceValue([95, 72], [6, 10, 31, 53, 60, 71, 78, 81, 91, 92], 91) == 0\nassert solution.findTheDistanceValue([88, 14, 90, 47, 65, 78, 48, 57], [22, 26, 44, 48, 55, 58, 65, 75, 78, 92], 54) == 0\nassert solution.findTheDistanceValue([25, 2, 95, 89, 19, 88, 97, 54, 84, 93], [21, 52, 53, 54, 94, 95], 3) == 5\nassert solution.findTheDistanceValue([86], [1, 3, 5, 19, 32, 46, 61, 82, 97, 100], 101) == 0\nassert solution.findTheDistanceValue([24, 45, 65, 13, 4, 20, 61, 48], [1, 2, 14, 18, 38, 49, 60, 77, 88, 100], 34) == 0\nassert solution.findTheDistanceValue([100, 81, 97, 27, 41, 23, 33], [2, 16, 51, 88, 98], 43) == 0\nassert solution.findTheDistanceValue([81], [20, 37, 83], 92) == 0\nassert solution.findTheDistanceValue([50], [17, 36, 39, 65], 35) == 0\nassert solution.findTheDistanceValue([71, 5, 34, 81, 35, 8, 57, 37, 74], [9, 94], 74) == 0\nassert solution.findTheDistanceValue([31, 6, 30, 82, 4, 34], [56, 89], 55) == 0\nassert solution.findTheDistanceValue([73, 41, 95, 15], [8, 20, 29, 31, 33, 51, 72, 89, 97], 27) == 0\nassert solution.findTheDistanceValue([26, 82, 3, 77, 75], [7, 23, 26, 48, 50, 82], 23) == 0\nassert solution.findTheDistanceValue([44, 99, 78, 20, 40, 34, 87, 53, 7], [27, 33, 52, 84, 85, 87, 89, 98], 83) == 0\nassert solution.findTheDistanceValue([90, 21, 78], [26, 63, 64], 24) == 1\nassert solution.findTheDistanceValue([93, 42, 41, 15], [6, 20, 26, 41, 62, 65], 55) == 0\nassert solution.findTheDistanceValue([65, 17, 82, 30, 21, 27, 86, 12, 4], [17, 19, 25, 37, 40, 52, 78, 89, 90], 50) == 0\nassert solution.findTheDistanceValue([14, 65, 72, 55, 2, 45, 79, 56], [16, 29, 38, 42, 53, 81, 82, 84], 66) == 0\nassert solution.findTheDistanceValue([69, 6, 83, 94, 97, 5, 67, 2, 53, 9], [11, 37, 39, 65, 92], 30) == 0\nassert solution.findTheDistanceValue([42, 93, 60, 22], [9, 22, 30, 35, 39, 44, 51, 68, 90], 23) == 0\nassert solution.findTheDistanceValue([29, 57, 27, 40, 20, 83, 5], [11, 25, 40, 80, 84, 89], 89) == 0\nassert solution.findTheDistanceValue([59, 91, 10, 5, 13], [9, 29, 60, 68], 37) == 0\nassert solution.findTheDistanceValue([60, 67], [82], 82) == 0\nassert solution.findTheDistanceValue([87, 21, 30], [8, 44, 72, 86], 56) == 0\nassert solution.findTheDistanceValue([70, 16], [9, 28, 42, 100], 9) == 1\nassert solution.findTheDistanceValue([97, 38, 20, 100, 19, 94, 32, 67, 91, 60], [4, 12, 24, 85], 60) == 0\nassert solution.findTheDistanceValue([23, 37, 58, 52], [58], 73) == 0\nassert solution.findTheDistanceValue([75, 36, 28, 31], [3], 101) == 0\nassert solution.findTheDistanceValue([51, 65, 56, 23, 33, 82, 59, 58], [4, 18, 34, 41, 45, 59, 83], 9) == 0\nassert solution.findTheDistanceValue([95, 80, 68, 41, 30, 8, 63, 52, 21, 23], [15, 84], 20) == 3\nassert solution.findTheDistanceValue([10, 26, 100, 25], [2, 4, 28, 31, 34, 41, 69, 75, 80], 39) == 0\nassert solution.findTheDistanceValue([26, 28, 75, 90, 93, 79, 24, 1, 48], [6], 73) == 2\nassert solution.findTheDistanceValue([5, 66, 11, 34, 88, 15, 3, 36, 43, 20], [12, 59, 78, 85, 88, 99], 25) == 0\nassert solution.findTheDistanceValue([41, 80, 38, 67], [3, 12, 26, 37, 46, 61, 62, 99], 41) == 0\nassert solution.findTheDistanceValue([76, 97, 72, 31, 15, 66], [11, 53, 68, 78], 39) == 0\nassert solution.findTheDistanceValue([61, 77, 33, 6, 30], [93], 92) == 0\nassert solution.findTheDistanceValue([66, 88, 36, 40, 75, 10, 35, 12, 53], [96], 80) == 2\nassert solution.findTheDistanceValue([80, 76, 22, 88, 49], [21], 92) == 0\nassert solution.findTheDistanceValue([80, 33, 30], [21, 88], 76) == 0\nassert solution.findTheDistanceValue([86, 100, 59, 65, 38, 69, 61, 95], [33, 36, 53, 58, 76], 91) == 0\nassert solution.findTheDistanceValue([65, 51, 44], [48], 31) == 0\nassert solution.findTheDistanceValue([40, 63, 31, 19, 33, 21, 13, 43, 86, 46], [8, 34, 46, 59, 62, 81, 87], 42) == 0\nassert solution.findTheDistanceValue([41, 98, 10, 35, 22, 21], [32, 36, 49, 52, 54, 72, 73], 78) == 0\nassert solution.findTheDistanceValue([94, 26, 31, 49], [4, 16, 37, 56, 62, 79, 93, 99], 50) == 0\nassert solution.findTheDistanceValue([46, 16, 48, 22, 18], [68], 82) == 0\nassert solution.findTheDistanceValue([77, 37, 59, 7, 41], [50, 55, 70, 80], 89) == 0\nassert solution.findTheDistanceValue([38, 80, 61, 73, 44, 41], [36, 40, 59, 95], 52) == 0\nassert solution.findTheDistanceValue([31, 99, 91, 90], [20, 44, 47, 54, 58], 37) == 1\nassert solution.findTheDistanceValue([100, 94, 14, 64, 88, 83, 15], [38], 88) == 0\nassert solution.findTheDistanceValue([3], [21, 59, 81], 67) == 0\nassert solution.findTheDistanceValue([33, 48, 10, 49, 8, 14, 96], [54, 62, 65, 84], 98) == 0\nassert solution.findTheDistanceValue([26, 90, 49, 7, 76], [1, 10, 63, 64, 65], 16) == 1\nassert solution.findTheDistanceValue([89, 53, 36], [44], 75) == 0\nassert solution.findTheDistanceValue([34, 18, 43, 3, 12, 24, 68, 59], [11, 33, 39, 46, 62, 79, 98], 2) == 6\nassert solution.findTheDistanceValue([79, 42], [9, 29, 36, 52, 53, 60, 97], 43) == 0\nassert solution.findTheDistanceValue([67, 53, 43], [2, 22, 28], 83) == 0\nassert solution.findTheDistanceValue([53, 63, 86], [10, 17, 30], 63) == 0\nassert solution.findTheDistanceValue([87, 78, 52], [3, 17, 21, 38, 69], 86) == 0\nassert solution.findTheDistanceValue([66, 58, 26, 42, 93, 57, 14, 69, 95], [35, 48, 71, 73, 86, 89, 95], 40) == 0\nassert solution.findTheDistanceValue([44, 5, 87, 88, 61, 91, 11, 89, 59], [60, 71], 0) == 9\nassert solution.findTheDistanceValue([4], [5, 51, 55, 91], 28) == 0\nassert solution.findTheDistanceValue([88], [7, 44, 68, 76], 70) == 0\nassert solution.findTheDistanceValue([99, 86, 90, 24, 15, 37, 73, 65], [5, 16, 19, 22, 26, 30, 51, 74, 98, 99], 24) == 0\nassert solution.findTheDistanceValue([43, 98, 37, 100, 27, 42, 36], [1, 11, 36, 66, 81, 87], 46) == 0\nassert solution.findTheDistanceValue([20, 81, 22, 1, 3, 34, 35, 4, 63], [3, 26, 27, 52, 59, 60, 61, 83, 90, 96], 99) == 0",
  "inefficient_solution": "class Solution:\n    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:\n        arr2_set = set(arr2)\n        arr2_sorted = sorted(arr2)\n\n        def check(a: int) -> bool:\n            for j in range(len(arr2_sorted)):\n                if abs(a - arr2_sorted[j]) <= d:\n                    return False\n            return True\n\n        return sum(1 for a in arr1 if check(a))",
  "is_python": true
}