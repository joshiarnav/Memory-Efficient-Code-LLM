{
  "problem_idx": 1866,
  "task_name": "Number of Ways to Rearrange Sticks With K Sticks Visible",
  "markdown_description": "\nThere are `n` uniquely-sized sticks whose lengths are integers from `1` to `n`. You want to arrange the sticks such that **exactly** `k`\u00a0sticks are **visible** from the left. A stick\u00a0is **visible** from the left if there are no **longer**\u00a0sticks to the **left** of it.\n\n\n* For example, if the sticks are arranged `[1,3,2,5,4]`, then the sticks with lengths `1`, `3`, and `5` are visible from the left.\n\n\nGiven `n` and `k`, return *the **number** of such arrangements*. Since the answer may be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, k = 2\n**Output:** 3\n**Explanation:** [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, k = 5\n**Output:** 1\n**Explanation:** [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 20, k = 11\n**Output:** 647427950\n**Explanation:** There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1000`\n* `1 <= k <= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def rearrangeSticks(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [1] + [0] * k\n        for i in range(1, n + 1):\n            for j in range(k, 0, -1):\n                f[j] = (f[j] * (i - 1) + f[j - 1]) % mod\n            f[0] = 0\n        return f[k]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def rearrangeSticks(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [1] + [0] * k\n        for i in range(1, n + 1):\n            for j in range(k, 0, -1):\n                f[j] = (f[j] * (i - 1) + f[j - 1]) % mod\n            f[0] = 0\n        return f[k]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n and k within the constraints\n    n = random.randint(1, 10)\n    k = random.randint(1, n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.rearrangeSticks(n, k)\n    \n    return n, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.rearrangeSticks(n, k) == expected_result\n        print(f\"assert solution.rearrangeSticks({n}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.rearrangeSticks({n}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.rearrangeSticks(3, 2) == 3\nassert solution.rearrangeSticks(9, 5) == 22449\nassert solution.rearrangeSticks(9, 1) == 40320\nassert solution.rearrangeSticks(7, 4) == 735\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(8, 6) == 322\nassert solution.rearrangeSticks(4, 1) == 6\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(5, 1) == 24\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(4, 3) == 6\nassert solution.rearrangeSticks(8, 7) == 28\nassert solution.rearrangeSticks(6, 1) == 120\nassert solution.rearrangeSticks(7, 5) == 175\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(2, 2) == 1\nassert solution.rearrangeSticks(3, 3) == 1\nassert solution.rearrangeSticks(9, 7) == 546\nassert solution.rearrangeSticks(5, 4) == 10\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(10, 7) == 9450\nassert solution.rearrangeSticks(7, 2) == 1764\nassert solution.rearrangeSticks(5, 3) == 35\nassert solution.rearrangeSticks(3, 2) == 3\nassert solution.rearrangeSticks(5, 1) == 24\nassert solution.rearrangeSticks(2, 2) == 1\nassert solution.rearrangeSticks(4, 3) == 6\nassert solution.rearrangeSticks(8, 3) == 13132\nassert solution.rearrangeSticks(8, 5) == 1960\nassert solution.rearrangeSticks(8, 3) == 13132\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(8, 8) == 1\nassert solution.rearrangeSticks(1, 1) == 1\nassert solution.rearrangeSticks(9, 5) == 22449\nassert solution.rearrangeSticks(1, 1) == 1\nassert solution.rearrangeSticks(8, 3) == 13132\nassert solution.rearrangeSticks(4, 3) == 6\nassert solution.rearrangeSticks(10, 6) == 63273\nassert solution.rearrangeSticks(4, 1) == 6\nassert solution.rearrangeSticks(1, 1) == 1\nassert solution.rearrangeSticks(8, 4) == 6769\nassert solution.rearrangeSticks(9, 2) == 109584\nassert solution.rearrangeSticks(8, 8) == 1\nassert solution.rearrangeSticks(6, 2) == 274\nassert solution.rearrangeSticks(10, 7) == 9450\nassert solution.rearrangeSticks(5, 4) == 10\nassert solution.rearrangeSticks(1, 1) == 1\nassert solution.rearrangeSticks(5, 3) == 35\nassert solution.rearrangeSticks(2, 2) == 1\nassert solution.rearrangeSticks(4, 1) == 6\nassert solution.rearrangeSticks(9, 7) == 546\nassert solution.rearrangeSticks(5, 2) == 50\nassert solution.rearrangeSticks(4, 1) == 6\nassert solution.rearrangeSticks(3, 3) == 1\nassert solution.rearrangeSticks(4, 3) == 6\nassert solution.rearrangeSticks(9, 2) == 109584\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(6, 1) == 120\nassert solution.rearrangeSticks(3, 2) == 3\nassert solution.rearrangeSticks(6, 5) == 15\nassert solution.rearrangeSticks(1, 1) == 1\nassert solution.rearrangeSticks(6, 6) == 1\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(7, 2) == 1764\nassert solution.rearrangeSticks(5, 1) == 24\nassert solution.rearrangeSticks(10, 7) == 9450\nassert solution.rearrangeSticks(7, 7) == 1\nassert solution.rearrangeSticks(5, 5) == 1\nassert solution.rearrangeSticks(8, 7) == 28\nassert solution.rearrangeSticks(5, 2) == 50\nassert solution.rearrangeSticks(10, 2) == 1026576\nassert solution.rearrangeSticks(9, 4) == 67284\nassert solution.rearrangeSticks(2, 2) == 1\nassert solution.rearrangeSticks(8, 5) == 1960\nassert solution.rearrangeSticks(3, 3) == 1\nassert solution.rearrangeSticks(9, 3) == 118124\nassert solution.rearrangeSticks(6, 6) == 1\nassert solution.rearrangeSticks(10, 3) == 1172700\nassert solution.rearrangeSticks(3, 1) == 2\nassert solution.rearrangeSticks(8, 5) == 1960\nassert solution.rearrangeSticks(6, 3) == 225\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(10, 7) == 9450\nassert solution.rearrangeSticks(7, 1) == 720\nassert solution.rearrangeSticks(5, 3) == 35\nassert solution.rearrangeSticks(1, 1) == 1\nassert solution.rearrangeSticks(2, 1) == 1\nassert solution.rearrangeSticks(3, 2) == 3\nassert solution.rearrangeSticks(10, 7) == 9450\nassert solution.rearrangeSticks(6, 5) == 15\nassert solution.rearrangeSticks(2, 2) == 1\nassert solution.rearrangeSticks(4, 2) == 11\nassert solution.rearrangeSticks(5, 3) == 35\nassert solution.rearrangeSticks(9, 9) == 1\nassert solution.rearrangeSticks(3, 1) == 2\nassert solution.rearrangeSticks(6, 6) == 1\nassert solution.rearrangeSticks(3, 3) == 1\nassert solution.rearrangeSticks(1, 1) == 1\nassert solution.rearrangeSticks(1, 1) == 1",
  "inefficient_solution": "class Solution:\n    def rearrangeSticks(self, n: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(k, -1, -1):\n                for l in range(i):\n                    if j == 0 and l == 0:\n                        continue\n                    if j == 0:\n                        f[i][j] = (f[i - 1][j - 1] * l + f[i - 1][j]) % mod\n                    else:\n                        f[i][j] = (f[i - 1][j - 1] * l + f[i - 1][j]) % mod\n        return f[n][k]",
  "is_python": true
}