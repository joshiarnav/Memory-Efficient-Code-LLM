{
  "problem_idx": 103,
  "task_name": "Binary Tree Zigzag Level Order Traversal",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the zigzag level order traversal of its nodes' values*. (i.e., from left to right, then right to left for the next level and alternate between).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0103.Binary%20Tree%20Zigzag%20Level%20Order%20Traversal/images/tree1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** [[3],[20,9],[15,7]]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [1]\n**Output:** [[1]]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** []\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 2000]`.\n* `-100 <= Node.val <= 100`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        ans = []\n        left = 1\n        while q:\n            t = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                t.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t if left else t[::-1])\n            left ^= 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\nfrom typing import List, Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        ans = []\n        left = 1\n        while q:\n            t = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                t.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t if left else t[::-1])\n            left ^= 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Create a binary tree with random values\n    def create_binary_tree(arr):\n        if not arr:\n            return None\n        nodes = [TreeNode(val) if val is not None else None for val in arr]\n        n = len(nodes)\n        for i in range(n):\n            if nodes[i] is None:\n                continue\n            left_idx = 2 * i + 1\n            right_idx = 2 * i + 2\n            if left_idx < n:\n                nodes[i].left = nodes[left_idx]\n            if right_idx < n:\n                nodes[i].right = nodes[right_idx]\n        return nodes[0]\n    \n    # Generate random values for the binary tree nodes\n    # We generate a random number between -100 and 100 as the node value, and use None to represent null nodes\n    values = random.choices(range(-100, 101), k=random.randint(0, 10))\n    root = create_binary_tree(values)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.zigzagLevelOrder(root)\n\n    return root, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.zigzagLevelOrder(root) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.zigzagLevelOrder({root}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.zigzagLevelOrder({root}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0e90>) == [[73], [-100, -70], [-44, 1, -11, 11], [81, 33, -65]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1210>) == [[-78], [92, 86]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1050>) == [[-67], [0, 60], [90, 57, 84, 29]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1290>) == [[-84], [3, 82], [18, -18, 80, 50], [-57]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1090>) == [[-50], [-95, 72], [-64, 91, -25, 53], [-82]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d13d0>) == [[-71], [47, -82], [-80]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1290>) == [[-34], [-99, -97], [-15, -1, 30, 74], [81, -50]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1090>) == [[16], [63, -34]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d13d0>) == [[99], [1, 95]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1290>) == [[43], [-9, -52], [-25, -71, -23, -89]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1490>) == [[42], [-60, -86], [1, -20, 98, -75], [57, -83, -99]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f50>) == [[-32], [25, 47], [58, -96, -82, 90]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[93], [-17, 18], [27, 79, -92, 95], [39, 31, 98]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1490>) == [[-15], [-82]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f50>) == [[48], [58, 44], [-86]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[45], [99, 81], [34]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1490>) == [[37]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0e50>) == [[-6], [-55, -13], [42, 45, -81, -82], [78, 97, 27]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[67], [-27, 45], [-57]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1490>) == [[-18], [29, -29], [-8]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1310>) == [[-14], [-34, -76], [-59, -24, 27, 31], [-100]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1390>) == [[81]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1050>) == [[-49], [85, -43], [21, -28, -38, -85], [-60, 94, -65]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[-50], [-76, 41], [-82, -2, 35, -59], [26]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1050>) == [[-78], [-70, -62]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d12d0>) == [[64]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0ed0>) == [[-88], [16, -70], [40, 60, -35]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[17], [-23, -7], [88, 33, 35, 63], [-4]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1010>) == [[10], [45, -12], [59, 89]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1250>) == [[-93], [-46, 27], [95, 33, -22, -53], [-2]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[-65], [48]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d10d0>) == [[-81], [64, -76], [-23, 95, 5, -94]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1410>) == [[-9], [91, -1], [-72, 66]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1310>) == [[22], [-14, 84], [91, 100, -22, 61], [-10, 29, 45]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1390>) == [[92], [17, 25], [6, 94, -12, 74], [32, -84, 57]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f50>) == [[-92], [-21, 59], [20, -79, 21, -19]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1290>) == [[31], [7, -56], [2, 68, -2, 50]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1010>) == [[71], [-34, -89], [-11]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f50>) == [[-16], [7, -10], [-68, -95, 51, 60], [65, -21]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d12d0>) == [[65], [-20, 1], [-78, 39, 29]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[76], [-5, 10], [8, 58, -69, -57], [-57]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f50>) == [[22]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1090>) == [[60], [-36]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d12d0>) == [[-70], [-19, -30]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f50>) == [[86], [54, 37]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1090>) == [[-95], [45]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f90>) == [[80]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1210>) == [[22], [-4, -1]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1390>) == [[38], [26, 0], [-41, 74, 63, -53], [52]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d12d0>) == [[99], [-14, 38], [-35, 86, -91, 33], [-73]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d14d0>) == [[-96], [-28]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1490>) == [[50], [-93, -24], [-38, 12, -16, -95], [46]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1390>) == [[83], [77, -10], [0, 22, 49, -66]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1090>) == [[52], [1]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[37], [-99, -58], [-90, -78, -21]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1050>) == [[-5], [72, 100], [-13, -36, 12, -37], [-1, -85]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1210>) == [[-26], [46, -60], [-38, 85, -77, -36]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1490>) == [[-84]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1250>) == [[57]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1510>) == [[76], [-68, -67], [-13, 58, 76]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1490>) == [[-76], [14, -48]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0e50>) == [[-99], [100, 48], [75, 95, -19]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1510>) == [[-43], [-74]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0ed0>) == [[-49], [93, 72], [-55, 94]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1490>) == [[-82], [5, 29], [59, -98, -8]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1510>) == [[15], [88, 81], [0]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d14d0>) == [[69], [66, -85], [-63, -99, 44, 36]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[-5], [-17, 56], [-68, -45, -16, 3], [-100, -78]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1010>) == [[18], [-40, -53]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d13d0>) == [[87], [1, -9], [-33, -12, -39, 59], [97]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1210>) == [[15], [-20, 6], [-98]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1010>) == [[99]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d14d0>) == [[-56], [-84, 49]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1210>) == [[-79], [9, -33], [59, 11, -46, 19], [-80, 61, 65]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1010>) == [[0], [-64]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1510>) == [[-5], [72]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d14d0>) == [[-70], [80, -56], [90, 44, 55, 90], [-11]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1010>) == [[-48], [-9, -53]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0fd0>) == [[-18], [-90, -80], [58, -83, -2, -68]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f50>) == [[73], [53, 62], [69, -79, -99]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1210>) == [[67], [76, 85], [29, -43]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1250>) == [[47], [-9, -17]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0f50>) == [[43], [37, 50], [-93, 28, 19, -55], [75, -75]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d14d0>) == [[-15], [40, 97], [35, -58, 67]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1010>) == [[33], [-52, 2], [-30, 4]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0e50>) == [[67], [10, 93], [77, -55, 11, 56], [9]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d12d0>) == [[-27], [56, -22], [57, -96]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1010>) == [[45], [-46, 85], [-100, -14, 40, 26], [-76, 81, -97]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0e50>) == [[-72], [-49]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d14d0>) == [[-61], [-41, -72], [63, -11, -42, -46], [-53]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d12d0>) == [[29], [7, 90], [-30, 39]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0e50>) == [[-21], [23]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1510>) == [[22], [-47, 19], [-43]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d14d0>) == [[40], [-2, 77], [-20, 51, 38]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d0e50>) == [[-50]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1090>) == [[-71], [-29, 5], [-79, 53, 47, 0]]\nassert solution.zigzagLevelOrder(<__main__.TreeNode object at 0x7fa5ac1d1510>) == [[12], [-6, -7], [-38, 16]]",
  "inefficient_solution": "class Solution:\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        ans = []\n        if root is None:\n            return ans\n        q = deque([root])\n        ans = []\n        left = 1\n        levels = []\n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.popleft()\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                    levels.append(node.left)\n                if node.right:\n                    q.append(node.right)\n                    levels.append(node.right)\n            ans.append(level if left else level[::-1])\n            left ^= 1\n            for level_node in levels:\n                level_node.val *= -1\n                levels.remove(level_node)\n        return ans",
  "is_python": true
}