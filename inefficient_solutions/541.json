{
  "problem_idx": 541,
  "task_name": "Reverse String II",
  "markdown_description": "\nGiven a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.\n\n\nIf there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"abcdefg\", k = 2\n**Output:** \"bacdfeg\"\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"abcd\", k = 2\n**Output:** \"bacd\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s` consists of only lowercase English letters.\n* `1 <= k <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        t = list(s)\n        for i in range(0, len(t), k << 1):\n            t[i : i + k] = reversed(t[i : i + k])\n        return ''.join(t)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        t = list(s)\n        for i in range(0, len(t), k << 1):\n            t[i : i + k] = reversed(t[i : i + k])\n        return ''.join(t)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    \n    # Generate a random k value\n    k = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reverseStr(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reverseStr(s, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.reverseStr('{s}', {k}) == '{expected_result}'\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.reverseStr('yk', 4) == 'ky'\nassert solution.reverseStr('vfvz', 7) == 'zvfv'\nassert solution.reverseStr('u', 1) == 'u'\nassert solution.reverseStr('jrwox', 4) == 'owrjx'\nassert solution.reverseStr('yumbjzw', 5) == 'jbmuyzw'\nassert solution.reverseStr('ssp', 8) == 'pss'\nassert solution.reverseStr('tvtptwmy', 10) == 'ymwtptvt'\nassert solution.reverseStr('nwgq', 2) == 'wngq'\nassert solution.reverseStr('guafdboua', 4) == 'faugdboua'\nassert solution.reverseStr('gdgoxntblm', 7) == 'tnxogdgblm'\nassert solution.reverseStr('laulcecyk', 5) == 'clualecyk'\nassert solution.reverseStr('licajva', 5) == 'jacilva'\nassert solution.reverseStr('qx', 1) == 'qx'\nassert solution.reverseStr('xqft', 3) == 'fqxt'\nassert solution.reverseStr('jxbh', 8) == 'hbxj'\nassert solution.reverseStr('n', 6) == 'n'\nassert solution.reverseStr('irwnizqmkh', 10) == 'hkmqzinwri'\nassert solution.reverseStr('vedg', 3) == 'devg'\nassert solution.reverseStr('butai', 9) == 'iatub'\nassert solution.reverseStr('cgjw', 6) == 'wjgc'\nassert solution.reverseStr('fqgbqdu', 3) == 'gqfbqdu'\nassert solution.reverseStr('pk', 6) == 'kp'\nassert solution.reverseStr('nfmcfgj', 1) == 'nfmcfgj'\nassert solution.reverseStr('nicbpenxy', 2) == 'incbepnxy'\nassert solution.reverseStr('jz', 6) == 'zj'\nassert solution.reverseStr('ai', 8) == 'ia'\nassert solution.reverseStr('f', 4) == 'f'\nassert solution.reverseStr('faaw', 2) == 'afaw'\nassert solution.reverseStr('ksccxjdx', 2) == 'skccjxdx'\nassert solution.reverseStr('fsyutynbe', 3) == 'ysfutyebn'\nassert solution.reverseStr('cdkmqi', 7) == 'iqmkdc'\nassert solution.reverseStr('mkwnqxv', 6) == 'xqnwkmv'\nassert solution.reverseStr('elfkc', 8) == 'ckfle'\nassert solution.reverseStr('bnq', 4) == 'qnb'\nassert solution.reverseStr('atbrbo', 4) == 'rbtabo'\nassert solution.reverseStr('pmvhsbcxd', 9) == 'dxcbshvmp'\nassert solution.reverseStr('hewyvrgvkz', 5) == 'vywehrgvkz'\nassert solution.reverseStr('gih', 1) == 'gih'\nassert solution.reverseStr('dksmsdle', 7) == 'ldsmskde'\nassert solution.reverseStr('zjvnpnaa', 7) == 'anpnvjza'\nassert solution.reverseStr('pez', 9) == 'zep'\nassert solution.reverseStr('ggrus', 5) == 'surgg'\nassert solution.reverseStr('dgaeszrjip', 5) == 'seagdzrjip'\nassert solution.reverseStr('ttq', 3) == 'qtt'\nassert solution.reverseStr('jkuyrpq', 8) == 'qpryukj'\nassert solution.reverseStr('iyunkor', 6) == 'oknuyir'\nassert solution.reverseStr('zjhniej', 5) == 'inhjzej'\nassert solution.reverseStr('ggswzwuy', 6) == 'wzwsgguy'\nassert solution.reverseStr('cqth', 5) == 'htqc'\nassert solution.reverseStr('m', 2) == 'm'\nassert solution.reverseStr('uczubrbzg', 1) == 'uczubrbzg'\nassert solution.reverseStr('bawslz', 6) == 'zlswab'\nassert solution.reverseStr('gtkfaurtui', 1) == 'gtkfaurtui'\nassert solution.reverseStr('muua', 8) == 'auum'\nassert solution.reverseStr('yevad', 8) == 'davey'\nassert solution.reverseStr('dioopkescy', 8) == 'sekpooidcy'\nassert solution.reverseStr('msmepnqnq', 7) == 'qnpemsmnq'\nassert solution.reverseStr('cyigtwfmsr', 4) == 'giyctwfmrs'\nassert solution.reverseStr('igoolvgpa', 6) == 'vloogigpa'\nassert solution.reverseStr('zhkkgn', 4) == 'kkhzgn'\nassert solution.reverseStr('ncrvmwwmm', 10) == 'mmwwmvrcn'\nassert solution.reverseStr('bdokec', 4) == 'kodbec'\nassert solution.reverseStr('ovlm', 6) == 'mlvo'\nassert solution.reverseStr('wqedevd', 3) == 'eqwdevd'\nassert solution.reverseStr('pg', 1) == 'pg'\nassert solution.reverseStr('pknhrcsgc', 3) == 'nkphrccgs'\nassert solution.reverseStr('kt', 10) == 'tk'\nassert solution.reverseStr('nbcqeg', 7) == 'geqcbn'\nassert solution.reverseStr('nd', 9) == 'dn'\nassert solution.reverseStr('kxrxb', 4) == 'xrxkb'\nassert solution.reverseStr('vetylcohfl', 9) == 'fhoclytevl'\nassert solution.reverseStr('dcyqqa', 1) == 'dcyqqa'\nassert solution.reverseStr('vyioqnmpj', 3) == 'iyvoqnjpm'\nassert solution.reverseStr('v', 3) == 'v'\nassert solution.reverseStr('zng', 6) == 'gnz'\nassert solution.reverseStr('wljk', 9) == 'kjlw'\nassert solution.reverseStr('yz', 7) == 'zy'\nassert solution.reverseStr('dfyrkigv', 2) == 'fdyrikgv'\nassert solution.reverseStr('map', 9) == 'pam'\nassert solution.reverseStr('o', 8) == 'o'\nassert solution.reverseStr('ztn', 10) == 'ntz'\nassert solution.reverseStr('anfhbl', 4) == 'hfnabl'\nassert solution.reverseStr('qikq', 3) == 'kiqq'\nassert solution.reverseStr('gcmaes', 2) == 'cgmase'\nassert solution.reverseStr('cqtmfo', 7) == 'ofmtqc'\nassert solution.reverseStr('sjwrdjgurg', 4) == 'rwjsdjgugr'\nassert solution.reverseStr('ygm', 5) == 'mgy'\nassert solution.reverseStr('k', 9) == 'k'\nassert solution.reverseStr('rikbalb', 6) == 'labkirb'\nassert solution.reverseStr('tofid', 8) == 'difot'\nassert solution.reverseStr('iczwikk', 8) == 'kkiwzci'\nassert solution.reverseStr('zrza', 4) == 'azrz'\nassert solution.reverseStr('ydmzp', 3) == 'mdyzp'\nassert solution.reverseStr('ziwaapvjp', 6) == 'paawizvjp'\nassert solution.reverseStr('qpod', 3) == 'opqd'\nassert solution.reverseStr('tgpzsxltj', 8) == 'tlxszpgtj'\nassert solution.reverseStr('udcnz', 1) == 'udcnz'\nassert solution.reverseStr('daxecsncwp', 10) == 'pwcnscexad'\nassert solution.reverseStr('mlbmgnwikq', 9) == 'kiwngmblmq'\nassert solution.reverseStr('umhnblh', 6) == 'lbnhmuh'",
  "inefficient_solution": "class Solution:\n    def reverseStr(self, s: str, k: int) -> str:\n        t = [None] * len(s)\n        for i in range(0, len(s), k << 1):\n            temp = [None] * k\n            for j in range(i, min(i + k, len(s))):\n                temp[j - i] = s[j]\n            temp = temp[::-1]\n            for j in range(i, min(i + k, len(s))):\n                t[j] = temp[j - i]\n        return ''.join(t)",
  "is_python": true
}