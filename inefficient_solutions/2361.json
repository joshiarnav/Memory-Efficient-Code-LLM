{
  "problem_idx": 2361,
  "task_name": "Minimum Costs Using the Train Line",
  "markdown_description": "\nA train line going through a city has two routes, the regular route and the express route. Both routes go through the **same** `n + 1` stops labeled from `0` to `n`. Initially, you start on the regular route at stop `0`.\n\n\nYou are given two **1-indexed** integer arrays `regular` and `express`, both of length `n`. `regular[i]` describes the cost it takes to go from stop `i - 1` to stop `i` using the regular route, and `express[i]` describes the cost it takes to go from stop `i - 1` to stop `i` using the express route.\n\n\nYou are also given an integer `expressCost` which represents the cost to transfer from the regular route to the express route.\n\n\nNote that:\n\n\n* There is no cost to transfer from the express route back to the regular route.\n* You pay `expressCost` **every** time you transfer from the regular route to the express route.\n* There is no extra cost to stay on the express route.\n\n\nReturn *a **1-indexed** array* `costs` *of length* `n`*, where* `costs[i]` *is the **minimum** cost to reach stop* `i` *from stop* `0`.\n\n\nNote that a stop can be counted as **reached** from either route.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2361.Minimum%20Costs%20Using%20the%20Train%20Line/images/ex1drawio.png)\n\n```\n\n**Input:** regular = [1,6,9,5], express = [5,2,3,10], expressCost = 8\n**Output:** [1,7,14,19]\n**Explanation:** The diagram above shows how to reach stop 4 from stop 0 with minimum cost.\n- Take the regular route from stop 0 to stop 1, costing 1.\n- Take the express route from stop 1 to stop 2, costing 8 + 2 = 10.\n- Take the express route from stop 2 to stop 3, costing 3.\n- Take the regular route from stop 3 to stop 4, costing 5.\nThe total cost is 1 + 10 + 3 + 5 = 19.\nNote that a different route could be taken to reach the other stops with minimum cost.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2361.Minimum%20Costs%20Using%20the%20Train%20Line/images/ex2drawio.png)\n\n```\n\n**Input:** regular = [11,5,13], express = [7,10,6], expressCost = 3\n**Output:** [10,15,24]\n**Explanation:** The diagram above shows how to reach stop 3 from stop 0 with minimum cost.\n- Take the express route from stop 0 to stop 1, costing 3 + 7 = 10.\n- Take the regular route from stop 1 to stop 2, costing 5.\n- Take the express route from stop 2 to stop 3, costing 3 + 6 = 9.\nThe total cost is 10 + 5 + 9 = 24.\nNote that the expressCost is paid again to transfer back to the express route.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == regular.length == express.length`\n* `1 <= n <= 105`\n* `1 <= regular[i], express[i], expressCost <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumCosts(\n        self, regular: List[int], express: List[int], expressCost: int\n    ) -> List[int]:\n        n = len(regular)\n        f, g = 0, inf\n        cost = [0] * n\n        for i, (a, b) in enumerate(zip(regular, express), 1):\n            ff = min(f + a, g + a)\n            gg = min(f + expressCost + b, g + b)\n            f, g = ff, gg\n            cost[i - 1] = min(f, g)\n        return cost\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumCosts(self, regular, express, expressCost):\n        n = len(regular)\n        f, g = 0, float('inf')\n        cost = [0] * n\n        for i, (a, b) in enumerate(zip(regular, express), 1):\n            ff = min(f + a, g + a)\n            gg = min(f + expressCost + b, g + b)\n            f, g = ff, gg\n            cost[i - 1] = min(f, g)\n        return cost\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random regular and express route lists\n    regular = random.sample(range(1, 101), random.randint(2, 10))\n    express = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random expressCost\n    expressCost = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumCosts(regular, express, expressCost)\n\n    return regular, express, expressCost, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        regular, express, expressCost, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumCosts(regular, express, expressCost) == expected_result\n        print(f\"assert solution.minimumCosts({regular}, {express}, {expressCost}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumCosts({regular}, {express}, {expressCost}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumCosts([67, 51, 14, 69, 75, 56, 17, 68, 25, 45], [40, 87, 62, 70, 55, 41, 59, 65, 49, 69], 55) == [67, 118, 132, 201, 276, 332, 349, 417, 442, 487]\nassert solution.minimumCosts([82, 39, 45, 94, 15, 73, 98, 64, 14], [90, 65], 45) == [82, 121, 0, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([78, 55, 90, 100, 80], [68, 22, 42, 60, 34, 72], 93) == [78, 133, 223, 285, 319]\nassert solution.minimumCosts([98, 76, 11, 40, 73, 20], [25, 61, 86, 27, 43, 8], 100) == [98, 174, 185, 225, 298, 318]\nassert solution.minimumCosts([98, 50, 58, 67], [67, 52, 42, 17], 89) == [98, 148, 206, 267]\nassert solution.minimumCosts([86, 56, 26, 55], [90, 47, 10, 70, 29, 50, 66, 16, 53], 70) == [86, 142, 168, 223]\nassert solution.minimumCosts([66, 69, 6, 82, 89, 94, 96, 54, 40, 18], [59, 47], 48) == [66, 135, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([55, 72, 62, 18, 51, 56, 90], [16, 69, 3, 7, 39, 94, 95, 73, 2, 43], 97) == [55, 127, 185, 192, 231, 287, 377]\nassert solution.minimumCosts([79, 44, 94, 45, 98, 26, 7, 51, 59, 35], [83, 15, 40, 33, 91, 16, 98, 75, 42, 65], 83) == [79, 123, 217, 250, 341, 357, 364, 415, 474, 509]\nassert solution.minimumCosts([80, 87, 53, 77], [39, 69, 16, 67, 74, 26, 79, 94], 37) == [76, 145, 161, 228]\nassert solution.minimumCosts([46, 54, 66, 19, 69, 12], [91, 98, 39, 65, 31, 68], 95) == [46, 100, 166, 185, 254, 266]\nassert solution.minimumCosts([60, 33, 95, 44, 89], [65, 20], 82) == [60, 93, 0, 0, 0]\nassert solution.minimumCosts([1, 89, 69, 66, 61, 95, 23, 91, 70, 63], [2, 6, 79, 67, 55, 56, 75], 25) == [1, 32, 101, 167, 228, 289, 312, 0, 0, 0]\nassert solution.minimumCosts([90, 96, 83, 44, 2, 37, 72, 30], [97, 91, 78, 59, 92], 4) == [90, 185, 263, 307, 309, 0, 0, 0]\nassert solution.minimumCosts([17, 37, 61, 78], [82, 44, 87], 42) == [17, 54, 115, 0]\nassert solution.minimumCosts([90, 6, 85, 96, 81, 91, 2], [82, 41, 51, 58], 51) == [90, 96, 181, 256, 0, 0, 0]\nassert solution.minimumCosts([2, 38, 64, 89, 67], [26, 69, 80, 28, 74, 88, 82, 84], 78) == [2, 40, 104, 193, 260]\nassert solution.minimumCosts([4, 83, 96, 17, 12, 93, 30, 82], [83, 79, 39, 76], 99) == [4, 87, 183, 200, 0, 0, 0, 0]\nassert solution.minimumCosts([15, 31, 89, 42, 48, 50], [13, 96, 84, 47, 79, 71, 61, 37, 33], 40) == [15, 46, 135, 177, 225, 275]\nassert solution.minimumCosts([78, 79, 32, 90, 7, 40, 65, 37, 85], [11, 44, 25, 23, 34, 64, 63, 6, 54], 57) == [68, 112, 137, 160, 167, 207, 272, 309, 381]\nassert solution.minimumCosts([56, 50, 74, 99, 94, 34, 95, 90, 46, 57], [96, 86, 59, 47, 43, 91, 84], 8) == [56, 106, 173, 220, 263, 297, 389, 0, 0, 0]\nassert solution.minimumCosts([69, 97, 81, 94], [63, 49], 29) == [69, 141, 0, 0]\nassert solution.minimumCosts([60, 35, 80, 63, 62, 96], [38, 9, 10, 8, 11, 58, 96, 65], 46) == [60, 93, 103, 111, 122, 180]\nassert solution.minimumCosts([21, 58, 20, 68, 44], [21, 68, 7, 75, 53], 22) == [21, 79, 99, 167, 211]\nassert solution.minimumCosts([36, 77, 88], [34, 98, 37, 86, 25, 68, 44, 9, 8, 81], 29) == [36, 113, 179]\nassert solution.minimumCosts([91, 93, 37, 13, 70, 45, 80], [53, 20, 5, 37, 99, 15, 51, 95, 27], 96) == [91, 169, 174, 187, 257, 302, 376]\nassert solution.minimumCosts([80, 17, 7, 50, 28, 62, 63, 26], [53, 100, 74, 30], 56) == [80, 97, 104, 154, 0, 0, 0, 0]\nassert solution.minimumCosts([96, 1, 94, 58, 50, 42, 47, 76, 28], [91, 79, 59, 57, 30, 28, 93, 34, 17, 22], 30) == [96, 97, 186, 243, 273, 301, 348, 412, 429]\nassert solution.minimumCosts([21, 38, 69], [46, 81, 3, 18, 92, 22, 62, 42, 6, 74], 26) == [21, 59, 88]\nassert solution.minimumCosts([9, 88, 31, 94], [7, 65, 71], 40) == [9, 97, 128, 0]\nassert solution.minimumCosts([24, 30, 81, 5], [10, 78, 81, 16, 18, 62, 29], 100) == [24, 54, 135, 140]\nassert solution.minimumCosts([33, 10, 89, 63, 44, 92, 67, 72, 93, 54], [37, 75, 4, 19, 89], 2) == [33, 43, 49, 68, 112, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([43, 61, 57, 53], [74, 97, 18, 57, 7, 86], 47) == [43, 104, 161, 214]\nassert solution.minimumCosts([45, 18, 58, 38, 12], [6, 16, 99, 27, 13], 53) == [45, 63, 121, 159, 171]\nassert solution.minimumCosts([97, 22], [62, 13, 14, 95], 63) == [97, 119]\nassert solution.minimumCosts([95, 34, 76, 19, 21, 8], [66, 23, 89, 30, 100, 84, 93], 14) == [80, 103, 179, 198, 219, 227]\nassert solution.minimumCosts([95, 7, 6, 65, 32, 88, 68, 40, 57, 34], [72, 27, 55], 21) == [93, 100, 106, 0, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([68, 20, 60, 89, 86, 80, 95, 18, 9], [64, 16, 13, 20, 78, 15, 71, 7, 39], 67) == [68, 88, 148, 180, 258, 273, 344, 351, 360]\nassert solution.minimumCosts([22, 19, 71, 85, 16, 92, 69], [79, 3], 50) == [22, 41, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([92, 86, 17, 97, 16, 71, 31, 35, 59], [64, 77], 22) == [86, 163, 0, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([11, 95, 91], [45, 46, 66, 80, 98, 6, 30, 81, 13, 26], 16) == [11, 73, 139]\nassert solution.minimumCosts([73, 96, 36, 17, 99, 94, 100], [64, 52, 58, 17, 80, 73, 40], 21) == [73, 137, 173, 190, 289, 364, 404]\nassert solution.minimumCosts([84, 1, 18, 5, 39], [61, 75, 64, 51, 13, 25], 35) == [84, 85, 103, 108, 147]\nassert solution.minimumCosts([57, 47, 66], [30, 10, 11, 2, 62, 33, 12], 87) == [57, 104, 138]\nassert solution.minimumCosts([49, 43], [17, 80, 29, 28, 61, 95, 62, 10], 34) == [49, 92]\nassert solution.minimumCosts([80, 96, 17, 68], [41, 43, 87, 99, 94, 44], 52) == [80, 136, 153, 221]\nassert solution.minimumCosts([90, 97, 11, 89, 81, 29, 79, 35, 1, 58], [81, 3, 64, 54, 29, 53, 76], 49) == [90, 133, 144, 233, 276, 305, 384, 0, 0, 0]\nassert solution.minimumCosts([83, 69, 77, 73], [13, 91, 21, 67, 88, 59, 70], 73) == [83, 152, 198, 265]\nassert solution.minimumCosts([13, 83, 16, 87, 86, 80, 5], [65, 30, 17, 15, 40], 54) == [13, 96, 112, 129, 169, 0, 0]\nassert solution.minimumCosts([72, 97, 39], [73, 63, 97, 36, 43, 17, 71, 50, 65, 20], 60) == [72, 169, 208]\nassert solution.minimumCosts([24, 22, 90, 48, 33, 66, 60, 31], [80, 37, 13, 98, 1, 59], 8) == [24, 46, 67, 115, 124, 183, 0, 0]\nassert solution.minimumCosts([58, 64, 8, 54, 73, 53, 34], [79, 40, 38, 47, 7, 70, 48, 31], 13) == [58, 111, 119, 173, 186, 239, 273]\nassert solution.minimumCosts([98, 29], [27, 31, 82, 8, 46, 72, 25, 63], 83) == [98, 127]\nassert solution.minimumCosts([91, 96, 71, 1, 7, 77, 4], [83, 82, 84], 21) == [91, 186, 257, 0, 0, 0, 0]\nassert solution.minimumCosts([80, 29], [15, 63, 20], 35) == [50, 79]\nassert solution.minimumCosts([12, 88, 13], [71, 6, 25, 73, 26, 15, 37, 23, 77], 15) == [12, 33, 46]\nassert solution.minimumCosts([28, 87, 72, 43, 33], [72, 82, 51, 53, 91], 68) == [28, 115, 187, 230, 263]\nassert solution.minimumCosts([79, 61, 37, 21, 93, 22, 48], [23, 42, 77, 28, 35, 51, 15], 6) == [29, 71, 108, 129, 170, 192, 213]\nassert solution.minimumCosts([61, 21, 48, 4], [86, 22], 9) == [61, 82, 0, 0]\nassert solution.minimumCosts([37, 87, 28, 93, 17, 24, 40], [75, 44, 56, 42, 11, 24, 27], 66) == [37, 124, 152, 245, 256, 280, 307]\nassert solution.minimumCosts([90, 73, 75], [54, 11, 56, 70, 15, 34, 78, 99, 64, 43], 83) == [90, 148, 204]\nassert solution.minimumCosts([22, 13, 42, 46], [67, 87, 45, 39, 17, 61, 70, 83, 16, 66], 40) == [22, 35, 77, 123]\nassert solution.minimumCosts([93, 55, 86, 42, 56, 28, 19, 38, 57], [65, 92], 77) == [93, 148, 0, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([85, 13, 17, 15, 3, 24, 72], [64, 76, 1, 90, 14, 28, 95], 22) == [85, 98, 115, 130, 133, 157, 229]\nassert solution.minimumCosts([66, 15, 39, 31, 65, 99, 43, 79, 96], [15, 73], 33) == [48, 63, 0, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([97, 95], [75, 41, 58, 92], 45) == [97, 161]\nassert solution.minimumCosts([100, 43, 60, 93, 96, 88, 16, 85, 79], [30, 27, 16, 4], 88) == [100, 143, 161, 165, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([12, 51, 100, 35, 52, 11, 18], [55, 99], 32) == [12, 63, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([17, 22, 28, 84], [17, 24, 35, 49], 28) == [17, 39, 67, 144]\nassert solution.minimumCosts([78, 95, 13, 33, 52, 77, 7], [46, 93], 78) == [78, 173, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([1, 49, 79, 47, 100, 61, 65, 48, 52], [8, 18, 22, 30, 50, 33, 32, 63, 15, 14], 97) == [1, 50, 129, 168, 218, 251, 283, 331, 361]\nassert solution.minimumCosts([57, 9, 91, 72], [65, 94], 43) == [57, 66, 0, 0]\nassert solution.minimumCosts([90, 40, 39, 21, 28, 10, 1, 97, 4, 57], [6, 71, 27], 5) == [11, 51, 83, 0, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([84, 69, 48], [24, 19, 90], 89) == [84, 132, 180]\nassert solution.minimumCosts([32, 64, 78, 73], [28, 31, 96, 8], 69) == [32, 96, 174, 232]\nassert solution.minimumCosts([82, 42, 78, 3, 70, 2, 34, 81], [87, 45, 60, 20, 63, 57, 70, 86], 88) == [82, 124, 202, 205, 275, 277, 311, 392]\nassert solution.minimumCosts([74, 79, 28, 51, 32], [59, 43, 84, 11, 82, 81], 28) == [74, 130, 158, 197, 229]\nassert solution.minimumCosts([32, 81, 17, 46, 60, 5, 23, 43], [76, 51, 48], 48) == [32, 113, 130, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([34, 21, 10, 9, 6], [88, 46, 10, 36, 9], 71) == [34, 55, 65, 74, 80]\nassert solution.minimumCosts([43, 45, 86], [9, 30, 79, 84, 20, 76, 13, 43, 6, 3], 73) == [43, 88, 174]\nassert solution.minimumCosts([21, 75, 28, 84, 29, 43], [31, 35, 96, 36, 25, 14], 16) == [21, 72, 100, 152, 177, 191]\nassert solution.minimumCosts([83, 9, 71, 88, 57, 96, 53, 78], [8, 6], 90) == [83, 92, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([75, 35, 76, 5, 78, 6], [43, 17, 47, 81, 61], 8) == [51, 68, 115, 120, 189, 0]\nassert solution.minimumCosts([84, 61, 60, 73, 58, 70, 56, 97, 95, 62], [2, 49, 98, 88, 5, 86, 75, 65, 39, 23], 27) == [29, 78, 138, 211, 243, 313, 369, 461, 500, 523]\nassert solution.minimumCosts([78, 38, 81, 43, 40, 26, 98, 71], [37, 1, 74, 95, 22, 58, 33, 14, 27], 85) == [78, 116, 197, 240, 280, 306, 404, 419]\nassert solution.minimumCosts([60, 79, 20], [12, 56, 69, 18, 82, 81], 30) == [42, 98, 118]\nassert solution.minimumCosts([80, 65, 17, 30, 70], [36, 4, 13, 20, 70, 15, 6, 31], 52) == [80, 92, 105, 125, 195]\nassert solution.minimumCosts([12, 36, 27, 84, 68, 58, 21, 51, 97, 10], [7, 52, 30, 70, 93], 41) == [12, 48, 75, 159, 227, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([22, 46, 1, 71, 59, 13, 66], [80, 31, 69, 64, 54, 5], 97) == [22, 68, 69, 140, 199, 212, 0]\nassert solution.minimumCosts([85, 47, 63, 3, 51], [17, 78, 68, 30, 21], 7) == [24, 71, 134, 137, 165]\nassert solution.minimumCosts([56, 36, 28, 92, 12, 13], [53, 15, 91, 70, 43, 25, 100, 95], 92) == [56, 92, 120, 212, 224, 237]\nassert solution.minimumCosts([18, 38, 77, 75], [41, 50, 9, 1, 68, 43, 54], 95) == [18, 56, 133, 161]\nassert solution.minimumCosts([89, 97, 90, 65, 33, 37, 26, 31, 20], [64, 65, 85, 40, 42, 24, 37], 10) == [74, 139, 224, 264, 297, 330, 356, 0, 0]\nassert solution.minimumCosts([59, 26, 87, 60, 9, 28, 36, 58, 40, 18], [73, 91, 85], 41) == [59, 85, 172, 0, 0, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([46, 47, 18, 1, 81, 17], [58, 72, 10, 59, 47, 55, 30], 72) == [46, 93, 111, 112, 193, 210]\nassert solution.minimumCosts([97, 34, 38, 43, 51, 18, 23], [31, 65, 66, 3], 30) == [61, 95, 133, 166, 0, 0, 0]\nassert solution.minimumCosts([81, 3, 50, 22, 64, 60, 77], [74, 95], 6) == [80, 83, 0, 0, 0, 0, 0]\nassert solution.minimumCosts([97, 38, 2, 1, 49, 80, 25, 60, 52], [8, 55, 52, 65, 74, 64, 75], 10) == [18, 56, 58, 59, 108, 182, 207, 0, 0]\nassert solution.minimumCosts([22, 96, 91, 19], [95, 87, 17, 58, 50, 54, 91, 43], 25) == [22, 118, 151, 170]\nassert solution.minimumCosts([34, 40, 81, 11, 25, 66, 85, 62], [76, 46, 20, 54, 84, 62, 45, 58, 83, 52], 61) == [34, 74, 155, 166, 191, 257, 342, 404]",
  "inefficient_solution": "class Solution:\n    def minimumCosts(self, regular, express, expressCost):\n        n = len(regular)\n        dp1 = [0] * (n + 1)\n        dp2 = [0] * (n + 1)\n        dp1[1] = regular[0]\n        dp2[1] = express[0]\n        for i in range(2, n + 1):\n            dp1[i] = min(dp1[i-1] + regular[i-1], dp2[i-1] + expressCost + express[i-1])\n            dp2[i] = min(dp2[i-1] + express[i-1], dp1[i-1] + regular[i-1])\n        costs = [0] * n\n        for i in range(n):\n            costs[i] = min(dp1[i+1], dp2[i+1])\n        return costs",
  "is_python": true
}