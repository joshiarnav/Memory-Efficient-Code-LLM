{
  "problem_idx": 4,
  "task_name": "Median of Two Sorted Arrays",
  "markdown_description": "\nGiven two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return **the median** of the two sorted arrays.\n\n\nThe overall run time complexity should be `O(log (m+n))`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,3], nums2 = [2]\n**Output:** 2.00000\n**Explanation:** merged array = [1,2,3] and median is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,2], nums2 = [3,4]\n**Output:** 2.50000\n**Explanation:** merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `nums1.length == m`\n* `nums2.length == n`\n* `0 <= m <= 1000`\n* `0 <= n <= 1000`\n* `1 <= m + n <= 2000`\n* `-106 <= nums1[i], nums2[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        def f(i: int, j: int, k: int) -> int:\n            if i >= m:\n                return nums2[j + k - 1]\n            if j >= n:\n                return nums1[i + k - 1]\n            if k == 1:\n                return min(nums1[i], nums2[j])\n            p = k // 2\n            x = nums1[i + p - 1] if i + p - 1 < m else inf\n            y = nums2[j + p - 1] if j + p - 1 < n else inf\n            return f(i + p, j, k - p) if x < y else f(i, j + p, k - p)\n\n        m, n = len(nums1), len(nums2)\n        a = f(0, 0, (m + n + 1) // 2)\n        b = f(0, 0, (m + n + 2) // 2)\n        return (a + b) / 2\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom math import inf\n\n# Creating the Solution class\nclass Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        def f(i: int, j: int, k: int) -> int:\n            if i >= m:\n                return nums2[j + k - 1]\n            if j >= n:\n                return nums1[i + k - 1]\n            if k == 1:\n                return min(nums1[i], nums2[j])\n            p = k // 2\n            x = nums1[i + p - 1] if i + p - 1 < m else inf\n            y = nums2[j + p - 1] if j + p - 1 < n else inf\n            return f(i + p, j, k - p) if x < y else f(i, j + p, k - p)\n\n        m, n = len(nums1), len(nums2)\n        a = f(0, 0, (m + n + 1) // 2)\n        b = f(0, 0, (m + n + 2) // 2)\n        return (a + b) / 2\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers lists\n    nums1 = sorted(random.sample(range(1, 101), random.randint(2, 10)))\n    nums2 = sorted(random.sample(range(1, 101), random.randint(2, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMedianSortedArrays(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMedianSortedArrays(nums1, nums2) == expected_result\n        print(f\"assert solution.findMedianSortedArrays({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMedianSortedArrays({nums1}, {nums2}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMedianSortedArrays([20, 67], [37, 85]) == 52.0\nassert solution.findMedianSortedArrays([1, 2, 13, 22, 34, 46, 63, 86], [59, 80]) == 40.0\nassert solution.findMedianSortedArrays([8, 57, 82, 87], [8, 18, 20, 23, 40, 41, 54, 63, 72, 93]) == 47.5\nassert solution.findMedianSortedArrays([3, 36, 78], [13, 20, 28, 45, 59, 89]) == 36.0\nassert solution.findMedianSortedArrays([17, 34, 43, 48, 51, 53, 83, 88], [43, 48, 54, 78, 88]) == 51.0\nassert solution.findMedianSortedArrays([21, 28, 53, 63, 94], [6, 9, 25, 27, 31, 55, 60, 67, 78]) == 42.0\nassert solution.findMedianSortedArrays([17, 50, 54], [1, 20, 46, 52, 53, 62, 63, 66, 70]) == 52.5\nassert solution.findMedianSortedArrays([11, 13, 15, 27, 29, 55, 74, 89, 96], [9, 39, 72]) == 34.0\nassert solution.findMedianSortedArrays([21, 24, 26, 33, 50, 53, 68, 87, 100], [1, 6, 12, 14, 34, 64, 81, 92, 93]) == 42.0\nassert solution.findMedianSortedArrays([12, 29, 31, 38, 45, 47, 73, 76, 89, 92], [2, 22, 57, 85]) == 46.0\nassert solution.findMedianSortedArrays([17, 25, 36, 41, 43, 58, 90], [27, 58, 75, 77, 86]) == 50.5\nassert solution.findMedianSortedArrays([24, 28, 71, 96], [2, 8, 9, 16, 21, 53]) == 22.5\nassert solution.findMedianSortedArrays([9, 26, 32, 33, 36, 45, 56, 63], [66, 68]) == 40.5\nassert solution.findMedianSortedArrays([6, 17, 22, 24, 27, 48, 74, 75, 88], [16, 31, 39, 41, 70]) == 35.0\nassert solution.findMedianSortedArrays([4, 16, 18, 20, 26, 48, 92, 97], [12, 41, 70, 90]) == 33.5\nassert solution.findMedianSortedArrays([4, 6, 8, 11, 30, 36, 60, 76, 79, 88], [29, 45, 56]) == 36.0\nassert solution.findMedianSortedArrays([21, 22, 55, 61, 70, 73, 97], [2, 16, 34, 53]) == 53.0\nassert solution.findMedianSortedArrays([22, 44, 48, 98], [30, 32, 34, 50, 59, 62]) == 46.0\nassert solution.findMedianSortedArrays([3, 18, 31, 57, 100], [4, 8, 46, 69, 71, 81, 98]) == 51.5\nassert solution.findMedianSortedArrays([1, 8, 20, 46, 47, 62, 63, 77, 82, 100], [12, 21, 24, 41, 45, 71, 73, 88]) == 46.5\nassert solution.findMedianSortedArrays([4, 38, 49], [1, 5, 41]) == 21.5\nassert solution.findMedianSortedArrays([34, 56, 64, 76], [5, 15, 35, 42, 66, 83, 93]) == 56.0\nassert solution.findMedianSortedArrays([17, 33, 69], [12, 20, 30]) == 25.0\nassert solution.findMedianSortedArrays([6, 75], [45, 79, 94, 97]) == 77.0\nassert solution.findMedianSortedArrays([10, 27, 67, 72, 84, 92, 99], [55, 88]) == 72.0\nassert solution.findMedianSortedArrays([55, 58, 61, 62, 85, 94, 95, 97], [56, 67, 70]) == 67.0\nassert solution.findMedianSortedArrays([39, 42, 45, 53, 57, 65, 73], [4, 29, 45]) == 45.0\nassert solution.findMedianSortedArrays([29, 50, 79, 82], [1, 4, 9, 24, 26, 77, 84, 89, 94]) == 50.0\nassert solution.findMedianSortedArrays([23, 45, 49, 51, 83], [7, 10, 21, 27, 54, 89, 94]) == 47.0\nassert solution.findMedianSortedArrays([13, 14, 58, 76, 91], [17, 29, 67]) == 43.5\nassert solution.findMedianSortedArrays([7, 27, 30, 35, 48, 54, 80, 88], [1, 12, 41, 54, 61, 76]) == 44.5\nassert solution.findMedianSortedArrays([32, 53, 61, 73, 75, 78], [30, 37, 56, 98]) == 58.5\nassert solution.findMedianSortedArrays([55, 60, 83], [17, 23, 36, 40, 92]) == 47.5\nassert solution.findMedianSortedArrays([13, 17, 18, 33, 37, 46, 75, 86, 93], [35, 51, 56, 68, 75, 86, 89, 99]) == 56.0\nassert solution.findMedianSortedArrays([12, 30, 66, 68, 72, 76, 84, 90, 91, 100], [8, 14, 75]) == 72.0\nassert solution.findMedianSortedArrays([25, 35, 48, 79], [1, 5, 23, 29, 33, 36, 42, 80, 88, 100]) == 35.5\nassert solution.findMedianSortedArrays([22, 69, 100], [2, 7, 37, 43, 60, 74]) == 43.0\nassert solution.findMedianSortedArrays([15, 31, 36, 75, 88, 91], [18, 33, 36, 61, 80, 93]) == 48.5\nassert solution.findMedianSortedArrays([3, 19, 27, 72, 98, 100], [1, 11, 28, 29, 48, 58, 72, 90, 98]) == 48.0\nassert solution.findMedianSortedArrays([24, 46, 52, 55, 59, 62, 65, 73, 77, 100], [7, 23, 26, 32, 35, 50, 66, 78]) == 53.5\nassert solution.findMedianSortedArrays([23, 27, 74, 100], [40, 60, 67, 81]) == 63.5\nassert solution.findMedianSortedArrays([9, 23, 43, 74], [1, 3, 22, 28, 32, 61, 72, 73, 87, 93]) == 37.5\nassert solution.findMedianSortedArrays([21, 26, 29, 44, 49, 68], [9, 80]) == 36.5\nassert solution.findMedianSortedArrays([1, 13, 17, 19, 32, 43, 44, 51, 75, 95], [32, 37, 38, 98]) == 37.5\nassert solution.findMedianSortedArrays([16, 30, 45, 69, 86], [16, 42, 46, 52, 73, 92]) == 46.0\nassert solution.findMedianSortedArrays([1, 14, 23, 30, 31, 51, 78, 83, 95, 99], [5, 11, 20, 60, 74, 75, 81, 84, 94, 98]) == 67.0\nassert solution.findMedianSortedArrays([42, 75, 90], [35, 49, 60, 64]) == 60.0\nassert solution.findMedianSortedArrays([24, 48, 63, 69], [29, 41, 45, 50, 54, 63, 99]) == 50.0\nassert solution.findMedianSortedArrays([2, 66, 72], [13, 22, 45, 50, 71, 87, 93, 97, 99]) == 68.5\nassert solution.findMedianSortedArrays([34, 35], [14, 22, 37]) == 34.0\nassert solution.findMedianSortedArrays([4, 17, 37, 40, 66, 100], [3, 18, 58, 71, 86]) == 40.0\nassert solution.findMedianSortedArrays([9, 64, 67, 82], [41, 61, 73, 75, 93, 100]) == 70.0\nassert solution.findMedianSortedArrays([5, 21, 33, 36, 52, 56, 75, 91, 97], [43, 66, 93, 97]) == 56.0\nassert solution.findMedianSortedArrays([9, 32, 38, 53, 69, 96], [3, 10, 38, 39, 44, 53, 70]) == 39.0\nassert solution.findMedianSortedArrays([4, 61], [28, 36, 49, 62, 67, 69, 75]) == 61.0\nassert solution.findMedianSortedArrays([14, 16, 31, 36, 40, 52, 91], [37, 75, 95]) == 38.5\nassert solution.findMedianSortedArrays([19, 68], [7, 23, 27, 30, 47, 51, 73, 80, 95]) == 47.0\nassert solution.findMedianSortedArrays([2, 12, 44, 48, 55, 67, 75, 79, 81, 91], [16, 23, 38, 46, 74, 80, 93]) == 55.0\nassert solution.findMedianSortedArrays([4, 18, 60, 64, 65], [16, 62, 85, 98]) == 62.0\nassert solution.findMedianSortedArrays([6, 7, 15, 26, 42, 53, 77, 89], [5, 6, 10, 59, 63, 77, 86, 90, 93, 94]) == 56.0\nassert solution.findMedianSortedArrays([13, 34, 54, 65, 67, 71, 76, 85, 94], [39, 48, 55, 59, 61, 66, 69, 89, 93, 96]) == 66.0\nassert solution.findMedianSortedArrays([6, 11, 19, 28, 32, 79, 80, 94, 100], [1, 2, 3, 10, 31, 37, 75, 76, 84]) == 31.5\nassert solution.findMedianSortedArrays([18, 34], [24, 25, 44, 50, 52, 83, 87, 95]) == 47.0\nassert solution.findMedianSortedArrays([32, 48, 61, 77, 81, 94], [3, 19, 32, 36, 49, 59, 62, 64, 68, 100]) == 60.0\nassert solution.findMedianSortedArrays([34, 69, 72], [15, 32, 49, 70]) == 49.0\nassert solution.findMedianSortedArrays([17, 18, 32, 36, 43, 49, 51, 68, 70, 98], [1, 17, 37, 74]) == 40.0\nassert solution.findMedianSortedArrays([21, 25, 32, 49, 52, 56, 82, 88, 97, 98], [5, 21, 32, 44, 70, 87, 91]) == 52.0\nassert solution.findMedianSortedArrays([26, 56], [6, 20, 30, 42, 76]) == 30.0\nassert solution.findMedianSortedArrays([1, 3, 6, 38, 49, 56, 99], [72, 79]) == 49.0\nassert solution.findMedianSortedArrays([12, 46, 72], [4, 7, 20, 24, 51, 73, 91, 95]) == 46.0\nassert solution.findMedianSortedArrays([5, 27, 39, 40, 47, 56, 59, 73, 74], [6, 22, 95, 98]) == 47.0\nassert solution.findMedianSortedArrays([7, 24, 37, 53, 62, 69], [35, 42, 49, 84, 96, 100]) == 51.0\nassert solution.findMedianSortedArrays([8, 16, 18, 34, 37, 40, 53, 71, 82, 86], [30, 36, 37, 44, 49, 52, 69, 92]) == 42.0\nassert solution.findMedianSortedArrays([2, 3, 15, 20, 28, 33, 35, 37, 64], [18, 23, 47, 53, 64, 89, 95, 98]) == 35.0\nassert solution.findMedianSortedArrays([28, 38, 47, 88, 93, 95, 98], [12, 36, 45, 64, 72]) == 55.5\nassert solution.findMedianSortedArrays([17, 26, 30, 44, 56, 59, 80, 84, 90], [19, 21, 44, 48, 79, 92, 94, 95]) == 56.0\nassert solution.findMedianSortedArrays([19, 20, 37, 38, 91, 93, 98, 99], [27, 31, 42]) == 38.0\nassert solution.findMedianSortedArrays([8, 17, 27, 46, 51, 56, 61, 64, 80, 83], [13, 20, 22, 34, 48, 73, 82]) == 48.0\nassert solution.findMedianSortedArrays([5, 16, 30, 31, 81, 85, 94], [8, 9, 10, 36, 43, 52, 81, 86]) == 36.0\nassert solution.findMedianSortedArrays([4, 21, 25, 57, 76], [1, 15, 56]) == 23.0\nassert solution.findMedianSortedArrays([44, 51, 74, 77, 84, 94, 99], [8, 14, 16, 21, 49, 56, 93]) == 53.5\nassert solution.findMedianSortedArrays([12, 63, 67], [5, 72, 75, 89]) == 67.0\nassert solution.findMedianSortedArrays([15, 18, 39, 77, 82], [18, 22, 39, 42, 53, 61, 70, 86, 95, 99]) == 53.0\nassert solution.findMedianSortedArrays([2, 5, 13, 31, 62, 73, 79, 100], [3, 13, 28, 54, 57, 60, 75, 98, 100]) == 57.0\nassert solution.findMedianSortedArrays([10, 35, 61], [4, 42]) == 35.0\nassert solution.findMedianSortedArrays([3, 5, 23, 50, 65, 67, 76, 77, 92, 96], [6, 49, 50, 56, 74]) == 56.0\nassert solution.findMedianSortedArrays([3, 20, 79, 83], [2, 74, 89, 98]) == 76.5\nassert solution.findMedianSortedArrays([20, 30, 33, 57, 79, 98], [5, 52, 55, 65, 73, 89, 97]) == 57.0\nassert solution.findMedianSortedArrays([12, 39, 52, 53, 64, 75, 85, 100], [32, 74, 95]) == 64.0\nassert solution.findMedianSortedArrays([2, 12, 16, 23, 39, 57, 84, 97, 98], [16, 27, 28, 38, 41, 64, 71, 74, 85]) == 40.0\nassert solution.findMedianSortedArrays([6, 13, 67, 90, 100], [29, 42, 50, 60, 71]) == 55.0\nassert solution.findMedianSortedArrays([3, 15, 36, 41, 66, 70], [9, 14, 27, 44, 79]) == 36.0\nassert solution.findMedianSortedArrays([8, 45], [27, 80, 87]) == 45.0\nassert solution.findMedianSortedArrays([11, 14, 32, 36, 41, 75, 100], [1, 69, 76, 97]) == 41.0\nassert solution.findMedianSortedArrays([5, 9, 27, 40, 61, 84], [30, 34, 44]) == 34.0\nassert solution.findMedianSortedArrays([2, 15, 91, 92], [5, 14, 24, 34, 49, 62, 69, 80, 93]) == 49.0\nassert solution.findMedianSortedArrays([6, 9, 41, 56, 68, 74, 84, 95], [9, 17, 25, 44, 58, 64, 65]) == 56.0\nassert solution.findMedianSortedArrays([13, 20, 28, 55, 71, 78, 83, 90, 95], [12, 13, 38, 39, 78, 85, 86, 91, 95, 96]) == 78.0\nassert solution.findMedianSortedArrays([6, 44, 46, 69, 77], [3, 36, 66, 68, 93, 99]) == 66.0\nassert solution.findMedianSortedArrays([49, 96, 97], [48, 88]) == 88.0",
  "inefficient_solution": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        m, n = len(nums1), len(nums2)\n\n        # Create a large enough list to store all elements\n        big_list = [0] * (m + n)\n        for i, num in enumerate(nums1):\n            big_list[i] = num\n        for i, num in enumerate(nums2):\n            big_list[m + i] = num\n\n        # Sort the list\n        for i in range(m + n):\n            for j in range(i + 1, m + n):\n                if big_list[j] < big_list[i]:\n                    big_list[i], big_list[j] = big_list[j], big_list[i]\n\n        # Calculate the median\n        mid = (m + n - 1) // 2\n        if (m + n) % 2 == 0:\n            return (big_list[mid] + big_list[mid + 1]) / 2\n        else:\n            return big_list[mid + 1]",
  "is_python": true
}