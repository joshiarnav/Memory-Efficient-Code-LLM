{
  "problem_idx": 2137,
  "task_name": "Pour Water Between Buckets to Make Water Levels Equal",
  "markdown_description": "\nYou have `n` buckets each containing some gallons of water in it, represented by a **0-indexed** integer array `buckets`, where the `ith` bucket contains `buckets[i]` gallons of water. You are also given an integer `loss`.\n\n\nYou want to make the amount of water in each bucket equal. You can pour any amount of water from one bucket to another bucket (not necessarily an integer). However, every time you pour `k` gallons of water, you spill `loss` **percent** of `k`.\n\n\nReturn *the **maximum** amount of water in each bucket after making the amount of water equal.* Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** buckets = [1,2,7], loss = 80\n**Output:** 2.00000\n**Explanation:** Pour 5 gallons of water from buckets[2] to buckets[0].\n5 * 80% = 4 gallons are spilled and buckets[0] only receives 5 - 4 = 1 gallon of water.\nAll buckets have 2 gallons of water in them so return 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** buckets = [2,4,6], loss = 50\n**Output:** 3.50000\n**Explanation:** Pour 0.5 gallons of water from buckets[1] to buckets[0].\n0.5 * 50% = 0.25 gallons are spilled and buckets[0] only receives 0.5 - 0.25 = 0.25 gallons of water.\nNow, buckets = [2.25, 3.5, 6].\nPour 2.5 gallons of water from buckets[2] to buckets[0].\n2.5 * 50% = 1.25 gallons are spilled and buckets[0] only receives 2.5 - 1.25 = 1.25 gallons of water.\nAll buckets have 3.5 gallons of water in them so return 3.5.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** buckets = [3,3,3,3], loss = 40\n**Output:** 3.00000\n**Explanation:** All buckets already have the same amount of water in them.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= buckets.length <= 105`\n* `0 <= buckets[i] <= 105`\n* `0 <= loss <= 99`\n\n\n",
  "canonical_solution": "class Solution:\n    def equalizeWater(self, buckets: List[int], loss: int) -> float:\n        def check(v):\n            a = b = 0\n            for x in buckets:\n                if x >= v:\n                    a += x - v\n                else:\n                    b += (v - x) * 100 / (100 - loss)\n            return a >= b\n\n        l, r = 0, max(buckets)\n        while r - l > 1e-5:\n            mid = (l + r) / 2\n            if check(mid):\n                l = mid\n            else:\n                r = mid\n        return l\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def equalizeWater(self, buckets: List[int], loss: int) -> float:\n        def check(v):\n            a = b = 0\n            for x in buckets:\n                if x >= v:\n                    a += x - v\n                else:\n                    b += (v - x) * 100 / (100 - loss)\n            return a >= b\n\n        l, r = 0, max(buckets)\n        while r - l > 1e-5:\n            mid = (l + r) / 2\n            if check(mid):\n                l = mid\n            else:\n                r = mid\n        return l\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random buckets list\n    buckets = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Generate a random loss percentage\n    loss = random.randint(0, 99)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.equalizeWater(buckets, loss)\n\n    return buckets, loss, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        buckets, loss, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.equalizeWater(buckets, loss) == expected_result\n        print(f\"assert solution.equalizeWater({buckets}, {loss}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.equalizeWater({buckets}, {loss}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.equalizeWater([100, 95, 66, 46], 30) == 73.08823466300964\nassert solution.equalizeWater([50, 14, 17, 29, 24, 71], 45) == 29.519606113433838\nassert solution.equalizeWater([4, 9, 26, 15], 54) == 10.91095781326294\nassert solution.equalizeWater([82, 53, 39], 76) == 48.24323844909668\nassert solution.equalizeWater([41, 77, 55, 28, 95, 36, 64, 76, 49, 33], 93) == 36.95988088846207\nassert solution.equalizeWater([35, 61], 24) == 46.22726786136627\nassert solution.equalizeWater([43, 76, 54, 61, 20], 92) == 29.333330154418945\nassert solution.equalizeWater([76, 68, 7, 45], 32) == 44.578941345214844\nassert solution.equalizeWater([29, 28, 7, 2, 9, 32], 85) == 9.086952209472656\nassert solution.equalizeWater([64, 57, 58, 18, 66, 53, 10, 15, 80, 17], 35) == 38.69619369506836\nassert solution.equalizeWater([76, 79, 50, 47, 4, 42, 77, 97, 91, 71], 60) == 53.031247198581696\nassert solution.equalizeWater([2, 63, 23, 45, 58, 97, 40, 60, 22, 81], 35) == 44.25316375494003\nassert solution.equalizeWater([17, 89, 52, 56], 70) == 40.05263012647629\nassert solution.equalizeWater([67, 93, 3, 91, 70, 63, 79, 38], 58) == 52.09291595220566\nassert solution.equalizeWater([83, 79, 82, 41, 28, 50, 61, 87], 17) == 62.121582090854645\nassert solution.equalizeWater([95, 90, 83, 55, 21, 48, 2, 82, 13, 81], 76) == 35.07692098617554\nassert solution.equalizeWater([4, 34, 51, 89], 18) == 41.97801744937897\nassert solution.equalizeWater([42], 86) == 41.99999499320984\nassert solution.equalizeWater([39, 66, 53, 98, 42, 35, 25], 31) == 47.896207213401794\nassert solution.equalizeWater([1, 24], 26) == 10.781604766845703\nassert solution.equalizeWater([44, 6, 85, 40, 81, 22, 45, 75, 55, 59], 85) == 31.437496542930603\nassert solution.equalizeWater([27], 51) == 26.999993562698364\nassert solution.equalizeWater([46, 85, 13, 10, 56, 44, 75, 1], 96) == 10.607140958309174\nassert solution.equalizeWater([20, 48, 11, 29], 76) == 19.93022918701172\nassert solution.equalizeWater([52, 38, 40, 44, 43, 76], 72) == 44.04385423660278\nassert solution.equalizeWater([62, 25, 14, 98, 26, 39, 43, 12, 46], 93) == 19.971882343292236\nassert solution.equalizeWater([59, 54, 40, 18, 86, 98, 44], 78) == 42.9096736907959\nassert solution.equalizeWater([99, 44, 51, 52, 36, 93, 35, 90], 14) == 60.75461554527283\nassert solution.equalizeWater([51, 7, 45, 58, 92], 10) == 49.55318760871887\nassert solution.equalizeWater([100, 69], 49) == 79.47019338607788\nassert solution.equalizeWater([85, 19, 91, 71, 97, 48, 73, 62], 88) == 44.695650815963745\nassert solution.equalizeWater([93, 68, 40, 92, 21, 72], 81) == 44.47463607788086\nassert solution.equalizeWater([1, 89, 8, 69, 2, 82], 8) == 40.2430517077446\nassert solution.equalizeWater([81, 73, 85, 69], 88) == 71.82352811098099\nassert solution.equalizeWater([85, 83, 13, 72], 12) == 61.59340292215347\nassert solution.equalizeWater([98, 4, 20, 87, 54, 27], 10) == 46.684205174446106\nassert solution.equalizeWater([33, 23], 44) == 26.589738607406616\nassert solution.equalizeWater([22, 23, 67, 97], 4) == 51.64285320043564\nassert solution.equalizeWater([68, 38, 6, 59, 69, 17, 73], 4) == 46.672510623931885\nassert solution.equalizeWater([94, 9, 21, 83, 40, 79, 15, 17], 68) == 29.681816935539246\nassert solution.equalizeWater([89, 92, 86, 55, 62, 15, 32, 11, 95, 85], 66) == 46.423790752887726\nassert solution.equalizeWater([91, 65, 57, 77, 29], 46) == 58.51380878686905\nassert solution.equalizeWater([39, 11, 96, 43, 12, 72, 40, 33, 31], 15) == 40.391807556152344\nassert solution.equalizeWater([39, 53, 79, 7, 48, 25, 33], 40) == 36.370365142822266\nassert solution.equalizeWater([21], 44) == 20.99999499320984\nassert solution.equalizeWater([42], 33) == 41.99999499320984\nassert solution.equalizeWater([4], 25) == 3.9999923706054688\nassert solution.equalizeWater([21, 22, 80, 97, 84], 2) == 60.48177695274353\nassert solution.equalizeWater([26, 63, 85, 83, 11], 46) == 44.6795579791069\nassert solution.equalizeWater([90, 41, 8, 84, 6, 89, 44], 90) == 19.51999604701996\nassert solution.equalizeWater([96, 4, 10, 11, 19, 29, 9], 80) == 13.652172088623047\nassert solution.equalizeWater([14, 93, 40, 10, 83, 4, 65], 14) == 41.83282595872879\nassert solution.equalizeWater([53, 76, 82, 100], 92) == 59.38709378242493\nassert solution.equalizeWater([22, 51, 3, 31, 73, 71, 74, 82], 71) == 35.45842170715332\nassert solution.equalizeWater([73, 5, 36, 17, 44, 80, 20], 60) == 29.391298294067383\nassert solution.equalizeWater([51, 58, 73], 59) == 57.5329624414444\nassert solution.equalizeWater([91, 4, 17, 29, 31, 74, 5, 8, 26, 22], 83) == 15.823387444019318\nassert solution.equalizeWater([11, 9, 13, 50, 46, 38, 52], 58) == 23.743587970733643\nassert solution.equalizeWater([100, 76], 58) == 83.09859037399292\nassert solution.equalizeWater([90, 88], 53) == 88.63945484161377\nassert solution.equalizeWater([58, 17, 41, 91, 8, 84, 16, 83, 52, 79], 72) == 35.81451255083084\nassert solution.equalizeWater([28, 21], 16) == 24.19564723968506\nassert solution.equalizeWater([47], 9) == 46.99999439716339\nassert solution.equalizeWater([81, 39], 45) == 53.90322482585907\nassert solution.equalizeWater([30, 61, 20, 73, 13, 99, 60, 29, 23, 36], 53) == 36.63832068443298\nassert solution.equalizeWater([96, 29, 66, 53], 37) == 56.46011924743652\nassert solution.equalizeWater([93, 16, 28], 32) == 40.01492303609848\nassert solution.equalizeWater([41, 8, 25], 55) == 19.84210228919983\nassert solution.equalizeWater([36, 61, 37, 13, 41, 95, 45, 15], 48) == 37.30920821428299\nassert solution.equalizeWater([81, 87, 10, 11, 3, 73, 31, 78, 15, 2], 4) == 38.43902152776718\nassert solution.equalizeWater([83, 7, 77], 84) == 24.69696354866028\nassert solution.equalizeWater([23, 77, 21, 26, 91, 17, 46], 75) == 29.57894217967987\nassert solution.equalizeWater([72, 43, 96, 61, 71, 50], 38) == 62.17695236206055\nassert solution.equalizeWater([48, 41, 79, 54, 27, 12, 43, 19, 82], 65) == 35.18627142906189\nassert solution.equalizeWater([36, 39, 43, 23, 11, 91, 62, 4], 83) == 21.516555547714233\nassert solution.equalizeWater([19, 70, 61, 67, 30, 46, 5, 48, 99, 55], 38) == 45.0299688577652\nassert solution.equalizeWater([32, 2, 21, 30, 13, 22, 34], 90) == 10.749998092651367\nassert solution.equalizeWater([46], 10) == 45.99999451637268\nassert solution.equalizeWater([5, 78, 21, 7], 92) == 9.222217798233032\nassert solution.equalizeWater([17, 21, 19, 92], 7) == 36.27480888366699\nassert solution.equalizeWater([80, 62, 33, 13, 87, 61], 68) == 42.31707036495209\nassert solution.equalizeWater([55, 3, 82, 17, 57, 27, 12, 94, 37, 70], 38) == 39.25431931018829\nassert solution.equalizeWater([62, 9], 9) == 34.251305103302\nassert solution.equalizeWater([42, 97, 36, 35, 94], 76) == 45.643673837184906\nassert solution.equalizeWater([39, 56, 60, 11], 71) == 29.91978406906128\nassert solution.equalizeWater([64, 14, 79, 78, 46, 57, 71, 82, 62, 49], 34) == 57.00501894950867\nassert solution.equalizeWater([87, 76, 68, 91, 18, 17, 90, 95, 5, 28], 48) == 46.57864719629288\nassert solution.equalizeWater([84, 66, 25, 9, 48], 86) == 25.504128456115723\nassert solution.equalizeWater([88, 9, 87, 7, 84, 37, 25], 30) == 42.50819444656372\nassert solution.equalizeWater([3, 33, 90, 13, 51, 38, 64], 75) == 26.153844594955444\nassert solution.equalizeWater([86, 23, 2, 58, 80, 27, 85, 9], 1) == 46.09421730041504\nassert solution.equalizeWater([62], 88) == 61.99999260902405\nassert solution.equalizeWater([51, 95, 84], 16) == 75.13432711362839\nassert solution.equalizeWater([86, 57, 59, 39], 25) == 58.49999713897705\nassert solution.equalizeWater([24, 32, 14], 25) == 22.399993896484375\nassert solution.equalizeWater([30, 46, 60, 66], 15) == 49.486483097076416\nassert solution.equalizeWater([86], 73) == 85.99999487400055\nassert solution.equalizeWater([62, 55, 18, 33], 40) == 37.87499713897705\nassert solution.equalizeWater([89, 37, 94], 21) == 70.37596440315247\nassert solution.equalizeWater([72, 7, 71], 60) == 35.666659355163574",
  "inefficient_solution": "class Solution:\n    def equalizeWater(self, buckets, loss):\n        def check(v):\n            a = b = 0\n            for x in buckets:\n                if x >= v:\n                    a += x - v\n                else:\n                    b += (v - x) * 100 / (100 - loss)\n            return a >= b\n\n        l, r = 0, max(buckets)\n        while r - l > 1e-5:\n            mid = round((l + r) / 2)\n            if check(mid):\n                l = mid\n            else:\n                r = mid\n            for _ in range(10000):\n                if (l + r) / 2 > mid:\n                    l = (l + r) / 2\n                else:\n                    r = (l + r) / 2\n        return round(l, 5)",
  "is_python": true
}