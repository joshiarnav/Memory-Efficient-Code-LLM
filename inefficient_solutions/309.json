{
  "problem_idx": 309,
  "task_name": "Best Time to Buy and Sell Stock with Cooldown",
  "markdown_description": "\nYou are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\n\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\n\n\n* After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prices = [1,2,3,0,2]\n**Output:** 3\n**Explanation:** transactions = [buy, sell, cooldown, buy, sell]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prices = [1]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prices.length <= 5000`\n* `0 <= prices[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        f, f0, f1 = 0, 0, -prices[0]\n        for x in prices[1:]:\n            f, f0, f1 = f0, max(f0, f1 + x), max(f1, f - x)\n        return f0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxProfit(self, prices):\n        f, f0, f1 = 0, 0, -prices[0]\n        for x in prices[1:]:\n            f, f0, f1 = f0, max(f0, f1 + x), max(f1, f - x)\n        return f0\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random prices list\n    prices = random.sample(range(1, 1001), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxProfit(prices)\n\n    return prices, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        prices, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxProfit(prices) == expected_result\n        print(f\"assert solution.maxProfit({prices}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxProfit({prices}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.maxProfit([159, 142, 330, 463, 889]) == 747\nassert solution.maxProfit([825, 302, 593, 888, 79]) == 586\nassert solution.maxProfit([971, 924, 677, 397, 943]) == 546\nassert solution.maxProfit([240, 83, 244, 785, 215, 945, 591, 974, 684]) == 1085\nassert solution.maxProfit([176, 878, 485, 92, 158, 358, 927, 63, 89, 67]) == 1537\nassert solution.maxProfit([180, 969, 816, 105, 254, 53, 975, 984]) == 1720\nassert solution.maxProfit([352, 872, 69, 914, 97, 280, 440]) == 1005\nassert solution.maxProfit([247, 472, 115, 29, 477, 903]) == 1099\nassert solution.maxProfit([892, 202, 965, 703, 793]) == 763\nassert solution.maxProfit([170, 892, 662, 12, 561, 219, 89, 829, 247]) == 2011\nassert solution.maxProfit([554, 814]) == 260\nassert solution.maxProfit([263, 545, 835, 312, 107, 843]) == 1308\nassert solution.maxProfit([814, 446]) == 0\nassert solution.maxProfit([783, 291, 80, 745, 817, 773, 142, 229, 160, 336]) == 931\nassert solution.maxProfit([642, 756]) == 114\nassert solution.maxProfit([347, 638, 57, 762]) == 705\nassert solution.maxProfit([912, 136, 866, 636, 87, 518]) == 1161\nassert solution.maxProfit([410, 312, 947]) == 635\nassert solution.maxProfit([483, 847, 212, 805, 745, 564]) == 593\nassert solution.maxProfit([955, 268, 605, 778, 492, 447, 765, 199]) == 828\nassert solution.maxProfit([916, 852, 687, 469, 752, 867, 716]) == 398\nassert solution.maxProfit([451, 982, 743, 702, 118, 400]) == 813\nassert solution.maxProfit([604, 662, 428, 927, 92, 789, 42, 244, 543]) == 1054\nassert solution.maxProfit([409, 997, 614, 247, 139, 605, 755, 513, 815, 278]) == 1356\nassert solution.maxProfit([323, 641, 313, 336, 683, 890, 710, 196, 928, 375]) == 1604\nassert solution.maxProfit([606, 685, 546, 852, 937, 617, 52, 966, 400, 593]) == 1305\nassert solution.maxProfit([592, 139, 381, 963, 207, 255, 55, 796]) == 1565\nassert solution.maxProfit([801, 737, 739, 743, 397, 79, 41, 466, 814, 552]) == 779\nassert solution.maxProfit([439, 633, 991, 379, 719]) == 552\nassert solution.maxProfit([175, 850, 115, 834]) == 719\nassert solution.maxProfit([229, 170, 978, 495, 457]) == 808\nassert solution.maxProfit([264, 335, 435, 470, 441, 142, 986]) == 1050\nassert solution.maxProfit([908, 717, 865, 782, 275, 201, 315, 768, 981]) == 928\nassert solution.maxProfit([272, 547, 181, 858, 613]) == 677\nassert solution.maxProfit([958, 857, 722, 201]) == 0\nassert solution.maxProfit([376, 317, 562]) == 245\nassert solution.maxProfit([601, 478, 451, 522, 694, 735]) == 284\nassert solution.maxProfit([816, 870, 441, 175, 954, 327]) == 833\nassert solution.maxProfit([266, 666, 277, 780, 667, 124, 784]) == 1174\nassert solution.maxProfit([111, 109, 957, 968, 212, 582, 604]) == 1240\nassert solution.maxProfit([413, 317, 295, 505, 534, 24, 966, 807, 352, 126]) == 1152\nassert solution.maxProfit([986, 232, 35]) == 0\nassert solution.maxProfit([995, 963, 950, 609, 905, 475, 629, 90, 76, 363]) == 583\nassert solution.maxProfit([550, 199, 227, 610]) == 411\nassert solution.maxProfit([260, 777, 810]) == 550\nassert solution.maxProfit([396, 34, 219, 706, 411]) == 672\nassert solution.maxProfit([430, 755, 51, 235, 799]) == 889\nassert solution.maxProfit([115, 86, 361, 822, 397]) == 736\nassert solution.maxProfit([356, 320, 435, 813]) == 493\nassert solution.maxProfit([901, 933, 755, 743, 787, 808, 838]) == 127\nassert solution.maxProfit([615, 677, 904, 227, 44, 705, 638, 749]) == 994\nassert solution.maxProfit([527, 797]) == 270\nassert solution.maxProfit([717, 860, 299, 447, 618]) == 319\nassert solution.maxProfit([902, 639, 940, 633]) == 301\nassert solution.maxProfit([389, 213, 223, 467, 405, 355, 832]) == 731\nassert solution.maxProfit([651, 320, 866]) == 546\nassert solution.maxProfit([494, 882, 881, 653, 361]) == 388\nassert solution.maxProfit([627, 812, 5, 668, 691, 39]) == 686\nassert solution.maxProfit([974, 473, 996, 56]) == 523\nassert solution.maxProfit([714, 150, 474, 767, 559, 701, 832, 578, 180]) == 748\nassert solution.maxProfit([442, 911, 868, 615, 693, 595]) == 547\nassert solution.maxProfit([24, 487, 428, 347, 846, 248, 111, 226, 662, 848]) == 1699\nassert solution.maxProfit([816, 14, 505, 739, 394]) == 725\nassert solution.maxProfit([187, 551, 93, 395, 266, 981, 591, 844]) == 1079\nassert solution.maxProfit([598, 969, 420, 870, 25, 220, 837, 86]) == 1183\nassert solution.maxProfit([136, 791, 110, 726, 695, 651, 666, 724, 222]) == 728\nassert solution.maxProfit([252, 924, 691]) == 672\nassert solution.maxProfit([333, 546, 526, 54]) == 213\nassert solution.maxProfit([682, 74, 676, 303, 309, 449, 371]) == 742\nassert solution.maxProfit([982, 658, 94, 549, 804, 383, 461]) == 710\nassert solution.maxProfit([637, 529, 418, 195]) == 0\nassert solution.maxProfit([352, 243, 86, 55, 116, 830, 360, 383]) == 775\nassert solution.maxProfit([707, 326, 938, 528, 615, 992, 492, 330, 333]) == 992\nassert solution.maxProfit([664, 710, 354, 329, 845, 912, 602]) == 629\nassert solution.maxProfit([637, 887, 394, 202, 895, 523, 4, 540]) == 1479\nassert solution.maxProfit([348, 844, 249, 412, 617, 381, 236, 89, 874, 846]) == 1486\nassert solution.maxProfit([945, 238, 493]) == 255\nassert solution.maxProfit([355, 415, 622, 676, 800, 10, 657, 117, 596, 904]) == 1276\nassert solution.maxProfit([140, 878, 774, 460, 398, 299]) == 738\nassert solution.maxProfit([366, 288, 207, 893, 546, 20, 354]) == 1020\nassert solution.maxProfit([135, 931, 728, 626]) == 796\nassert solution.maxProfit([486, 180, 362, 138, 108, 446, 407, 895, 279, 174]) == 969\nassert solution.maxProfit([55, 760, 13, 715, 593, 560, 959, 833, 425, 587]) == 1266\nassert solution.maxProfit([791, 542, 163, 341, 795, 98, 531, 928]) == 1029\nassert solution.maxProfit([299, 839, 866, 938]) == 639\nassert solution.maxProfit([259, 754]) == 495\nassert solution.maxProfit([144, 78]) == 0\nassert solution.maxProfit([213, 449, 73, 535, 869, 846, 514, 666, 72, 212]) == 948\nassert solution.maxProfit([228, 978, 945]) == 750\nassert solution.maxProfit([493, 519, 784, 205, 76, 238, 178, 236]) == 453\nassert solution.maxProfit([512, 312, 182, 300]) == 118\nassert solution.maxProfit([861, 821, 756, 66, 435, 289, 634, 734]) == 668\nassert solution.maxProfit([537, 113, 738, 186, 111, 164, 485, 438, 141]) == 999\nassert solution.maxProfit([337, 829, 591, 297, 626, 594, 348]) == 821\nassert solution.maxProfit([829, 547]) == 0\nassert solution.maxProfit([242, 431]) == 189\nassert solution.maxProfit([326, 184, 461, 465, 135, 895]) == 1037\nassert solution.maxProfit([748, 663, 728, 618, 919, 446, 740, 515, 294]) == 359\nassert solution.maxProfit([635, 373, 239, 27, 896, 542]) == 869\nassert solution.maxProfit([977, 586, 32, 669, 341, 544, 493, 772, 535, 345]) == 916",
  "inefficient_solution": "class Solution:\n    def maxProfit(self, prices):\n        profits = []\n        cooldowns = []\n        for x in prices:\n            new_cooldowns = []\n            new_profits = []\n            for p, c in zip(profits, cooldowns):\n                new_profits.append(max(p, c + x))\n                new_cooldowns.append(max(c, p - x))\n            new_profits.append(0)\n            new_cooldowns.append(-x)\n            profits = new_profits\n            cooldowns = new_cooldowns\n        return max(profits)",
  "is_python": true
}