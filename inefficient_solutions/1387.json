{
  "problem_idx": 1387,
  "task_name": "Sort Integers by The Power Value",
  "markdown_description": "\nThe power of an integer `x` is defined as the number of steps needed to transform `x` into `1` using the following steps:\n\n\n* if `x` is even then `x = x / 2`\n* if `x` is odd then `x = 3 * x + 1`\n\n\nFor example, the power of `x = 3` is `7` because `3` needs `7` steps to become `1` (`3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1`).\n\n\nGiven three integers `lo`, `hi` and `k`. The task is to sort all integers in the interval `[lo, hi]` by the power value in **ascending order**, if two or more integers have **the same** power value sort them by **ascending order**.\n\n\nReturn the `kth` integer in the range `[lo, hi]` sorted by the power value.\n\n\nNotice that for any integer `x` `(lo <= x <= hi)` it is **guaranteed** that `x` will transform into `1` using these steps and that the power of `x` is will **fit** in a 32-bit signed integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** lo = 12, hi = 15, k = 2\n**Output:** 13\n**Explanation:** The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** lo = 7, hi = 11, k = 4\n**Output:** 7\n**Explanation:** The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= lo <= hi <= 1000`\n* `1 <= k <= hi - lo + 1`\n\n\n",
  "canonical_solution": "@cache\ndef f(x: int) -> int:\n    ans = 0\n    while x != 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            x = 3 * x + 1\n        ans += 1\n    return ans\n\n\nclass Solution:\n    def getKth(self, lo: int, hi: int, k: int) -> int:\n        return sorted(range(lo, hi + 1), key=f)[k - 1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def getKth(self, lo, hi, k):\n        @cache\n        def f(x):\n            ans = 0\n            while x != 1:\n                if x % 2 == 0:\n                    x //= 2\n                else:\n                    x = 3 * x + 1\n                ans += 1\n            return ans\n        \n        return sorted(range(lo, hi + 1), key=f)[k - 1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for lo, hi, and k\n    lo = random.randint(1, 501)\n    hi = random.randint(lo, 1000)\n    k = random.randint(1, hi - lo + 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getKth(lo, hi, k)\n\n    return lo, hi, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        lo, hi, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getKth(lo, hi, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.getKth({lo}, {hi}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getKth(125, 225, 31) == 198\nassert solution.getKth(7, 149, 18) == 48\nassert solution.getKth(82, 384, 208) == 263\nassert solution.getKth(321, 739, 173) == 431\nassert solution.getKth(257, 390, 11) == 300\nassert solution.getKth(422, 704, 200) == 447\nassert solution.getKth(364, 663, 88) == 633\nassert solution.getKth(317, 382, 35) == 329\nassert solution.getKth(461, 966, 45) == 483\nassert solution.getKth(478, 574, 58) == 569\nassert solution.getKth(63, 802, 566) == 284\nassert solution.getKth(427, 671, 161) == 595\nassert solution.getKth(349, 628, 223) == 496\nassert solution.getKth(463, 725, 250) == 619\nassert solution.getKth(410, 593, 142) == 572\nassert solution.getKth(264, 344, 8) == 280\nassert solution.getKth(151, 770, 367) == 319\nassert solution.getKth(148, 901, 181) == 882\nassert solution.getKth(100, 713, 517) == 221\nassert solution.getKth(182, 296, 71) == 283\nassert solution.getKth(126, 903, 56) == 605\nassert solution.getKth(392, 527, 72) == 427\nassert solution.getKth(101, 747, 172) == 261\nassert solution.getKth(188, 917, 231) == 847\nassert solution.getKth(70, 336, 8) == 170\nassert solution.getKth(35, 533, 455) == 195\nassert solution.getKth(417, 764, 105) == 460\nassert solution.getKth(14, 51, 25) == 36\nassert solution.getKth(251, 908, 34) == 544\nassert solution.getKth(255, 843, 251) == 271\nassert solution.getKth(487, 747, 39) == 642\nassert solution.getKth(157, 986, 148) == 715\nassert solution.getKth(57, 306, 169) == 283\nassert solution.getKth(3, 692, 287) == 118\nassert solution.getKth(295, 563, 218) == 501\nassert solution.getKth(7, 812, 620) == 430\nassert solution.getKth(66, 659, 542) == 388\nassert solution.getKth(358, 786, 287) == 466\nassert solution.getKth(274, 537, 52) == 326\nassert solution.getKth(182, 810, 221) == 472\nassert solution.getKth(178, 296, 75) == 283\nassert solution.getKth(108, 949, 419) == 747\nassert solution.getKth(277, 542, 27) == 402\nassert solution.getKth(276, 713, 128) == 357\nassert solution.getKth(492, 870, 161) == 562\nassert solution.getKth(184, 434, 246) == 235\nassert solution.getKth(89, 735, 196) == 571\nassert solution.getKth(236, 270, 13) == 269\nassert solution.getKth(82, 834, 98) == 805\nassert solution.getKth(38, 743, 14) == 52\nassert solution.getKth(105, 340, 177) == 243\nassert solution.getKth(210, 560, 76) == 397\nassert solution.getKth(356, 596, 200) == 437\nassert solution.getKth(350, 883, 215) == 841\nassert solution.getKth(180, 881, 665) == 617\nassert solution.getKth(271, 965, 371) == 439\nassert solution.getKth(348, 764, 119) == 693\nassert solution.getKth(240, 748, 482) == 459\nassert solution.getKth(121, 386, 82) == 133\nassert solution.getKth(298, 835, 30) == 604\nassert solution.getKth(7, 200, 185) == 145\nassert solution.getKth(489, 861, 301) == 580\nassert solution.getKth(63, 548, 482) == 417\nassert solution.getKth(113, 620, 412) == 250\nassert solution.getKth(116, 672, 511) == 257\nassert solution.getKth(56, 821, 507) == 444\nassert solution.getKth(286, 801, 91) == 713\nassert solution.getKth(326, 655, 79) == 525\nassert solution.getKth(177, 229, 9) == 184\nassert solution.getKth(139, 344, 134) == 167\nassert solution.getKth(243, 659, 365) == 598\nassert solution.getKth(485, 843, 304) == 782\nassert solution.getKth(59, 903, 276) == 357\nassert solution.getKth(234, 945, 577) == 881\nassert solution.getKth(414, 510, 14) == 488\nassert solution.getKth(357, 366, 10) == 366\nassert solution.getKth(467, 904, 303) == 548\nassert solution.getKth(16, 700, 454) == 111\nassert solution.getKth(96, 335, 168) == 155\nassert solution.getKth(172, 657, 214) == 409\nassert solution.getKth(86, 427, 32) == 277\nassert solution.getKth(408, 739, 62) == 433\nassert solution.getKth(306, 963, 318) == 481\nassert solution.getKth(379, 628, 2) == 384\nassert solution.getKth(154, 674, 288) == 359\nassert solution.getKth(128, 487, 260) == 274\nassert solution.getKth(313, 438, 66) == 375\nassert solution.getKth(302, 437, 43) == 349\nassert solution.getKth(125, 871, 55) == 604\nassert solution.getKth(295, 543, 246) == 543\nassert solution.getKth(271, 774, 205) == 422\nassert solution.getKth(213, 346, 102) == 284\nassert solution.getKth(274, 731, 378) == 437\nassert solution.getKth(304, 743, 405) == 690\nassert solution.getKth(98, 860, 231) == 178\nassert solution.getKth(346, 629, 206) == 550\nassert solution.getKth(212, 894, 303) == 563\nassert solution.getKth(155, 336, 129) == 311\nassert solution.getKth(294, 927, 96) == 642\nassert solution.getKth(66, 180, 107) == 109",
  "inefficient_solution": "from collections import defaultdict\n\ndef p(x: int) -> int:\n    result = []\n    while x != 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            x = 3 * x + 1\n        result.append(x)\n    result.append(1)\n    return result\n\n\nclass Solution:\n    def getKth(self, lo: int, hi: int, k: int) -> int:\n        power_dict = defaultdict(list)\n        for i in range(lo, hi + 1):\n            power_dict[p(i)].append(i)\n        \n        sorted_power_dict = []\n        for key, value in power_dict.items():\n            sorted_power_dict += sorted(value)\n        \n        return sorted_power_dict[k - 1]",
  "is_python": true
}