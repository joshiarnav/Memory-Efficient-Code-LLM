{
  "problem_idx": 2165,
  "task_name": "Smallest Value of the Rearranged Number",
  "markdown_description": "\nYou are given an integer `num.` **Rearrange** the digits of `num` such that its value is **minimized** and it does not contain **any** leading zeros.\n\n\nReturn *the rearranged number with minimal value*.\n\n\nNote that the sign of the number does not change after rearranging the digits.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 310\n**Output:** 103\n**Explanation:** The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = -7605\n**Output:** -7650\n**Explanation:** Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `-1015 <= num <= 1015`\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        cnt = [0] * 10\n        neg = num < 0\n        num = abs(num)\n        while num:\n            num, v = divmod(num, 10)\n            cnt[v] += 1\n        ans = \"\"\n        if neg:\n            for i in range(9, -1, -1):\n                if cnt[i]:\n                    ans += str(i) * cnt[i]\n            return -int(ans)\n        if cnt[0]:\n            for i in range(1, 10):\n                if cnt[i]:\n                    ans += str(i)\n                    cnt[i] -= 1\n                    break\n        for i in range(10):\n            if cnt[i]:\n                ans += str(i) * cnt[i]\n        return int(ans)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        cnt = [0] * 10\n        neg = num < 0\n        num = abs(num)\n        while num:\n            num, v = divmod(num, 10)\n            cnt[v] += 1\n        ans = \"\"\n        if neg:\n            for i in range(9, -1, -1):\n                if cnt[i]:\n                    ans += str(i) * cnt[i]\n            return -int(ans)\n        if cnt[0]:\n            for i in range(1, 10):\n                if cnt[i]:\n                    ans += str(i)\n                    cnt[i] -= 1\n                    break\n        for i in range(10):\n            if cnt[i]:\n                ans += str(i) * cnt[i]\n        return int(ans)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random number\n    num = random.randint(-1000000000000000, 1000000000000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestNumber(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestNumber(num) == expected_result\n        print(f\"assert solution.smallestNumber({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.smallestNumber({num}) == {expected_result}\") # You can see that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestNumber(-766346080263622) == -876666643322200\nassert solution.smallestNumber(16645940570386) == 10034455666789\nassert solution.smallestNumber(17195220170887) == 10011225777889\nassert solution.smallestNumber(65818088239343) == 10233345688889\nassert solution.smallestNumber(-392062700815657) == -987766553221000\nassert solution.smallestNumber(80028761670475) == 10002456677788\nassert solution.smallestNumber(38177896082342) == 10223346778889\nassert solution.smallestNumber(-790875449675029) == -999877765544200\nassert solution.smallestNumber(-921892166511346) == -998666543221111\nassert solution.smallestNumber(660487209366555) == 200345556666789\nassert solution.smallestNumber(-362676789712622) == -987776666322221\nassert solution.smallestNumber(-718590369187820) == -998887765321100\nassert solution.smallestNumber(471991152980945) == 101124455789999\nassert solution.smallestNumber(568793017659547) == 103455566777899\nassert solution.smallestNumber(514336300092199) == 100012333456999\nassert solution.smallestNumber(332767053444953) == 203333444556779\nassert solution.smallestNumber(-57808152997454) == -99887755544210\nassert solution.smallestNumber(516700969049596) == 100045566679999\nassert solution.smallestNumber(378317623983720) == 102233336777889\nassert solution.smallestNumber(323870838311155) == 101123333557888\nassert solution.smallestNumber(-499956386566468) == -999886666655443\nassert solution.smallestNumber(-71584253795296) == -99877655543221\nassert solution.smallestNumber(-124904595271720) == -997755442221100\nassert solution.smallestNumber(618192459969258) == 112245566889999\nassert solution.smallestNumber(-627799904834653) == -999877665443320\nassert solution.smallestNumber(-132425548362428) == -886554443322221\nassert solution.smallestNumber(-379534279191290) == -999977543322110\nassert solution.smallestNumber(287270238567814) == 102223456777888\nassert solution.smallestNumber(-514182351579464) == -987655544432111\nassert solution.smallestNumber(796261869397913) == 112336667789999\nassert solution.smallestNumber(-192525300421380) == -985543322211000\nassert solution.smallestNumber(-276041505398188) == -988876554321100\nassert solution.smallestNumber(-528635227647228) == -887766554322222\nassert solution.smallestNumber(-659013114057637) == -977665543311100\nassert solution.smallestNumber(-310790323158356) == -987655333321100\nassert solution.smallestNumber(-967645702817115) == -987776655421110\nassert solution.smallestNumber(-294398719621107) == -999877643221110\nassert solution.smallestNumber(405835570923878) == 200334555778889\nassert solution.smallestNumber(810363872490060) == 100002334667889\nassert solution.smallestNumber(-737381853790770) == -988777775333100\nassert solution.smallestNumber(531132578714532) == 111223334555778\nassert solution.smallestNumber(-215263807743572) == -877765543322210\nassert solution.smallestNumber(712867515471458) == 111244555677788\nassert solution.smallestNumber(7826758112414) == 1112244567788\nassert solution.smallestNumber(916819705537776) == 101355667777899\nassert solution.smallestNumber(-214749381771041) == -987774443211110\nassert solution.smallestNumber(-161838994950073) == -999887654331100\nassert solution.smallestNumber(-893999639274376) == -999998776643332\nassert solution.smallestNumber(-661821227449716) == -987766644222111\nassert solution.smallestNumber(-284077697305097) == -998777765432000\nassert solution.smallestNumber(-907777707909563) == -999777777653000\nassert solution.smallestNumber(255560285927265) == 202225555566789\nassert solution.smallestNumber(-688814234703529) == -988876544332210\nassert solution.smallestNumber(977398405472468) == 203444567778899\nassert solution.smallestNumber(322373297937262) == 222223333677799\nassert solution.smallestNumber(484295214524684) == 122244444556889\nassert solution.smallestNumber(319227238049841) == 101222334478899\nassert solution.smallestNumber(116458324458538) == 112334445556888\nassert solution.smallestNumber(-301493435985257) == -998755544333210\nassert solution.smallestNumber(-249021013157101) == -975432211111000\nassert solution.smallestNumber(135111017292013) == 100111112233579\nassert solution.smallestNumber(-7365298894675) == -9988776655432\nassert solution.smallestNumber(321339436291487) == 112233334467899\nassert solution.smallestNumber(-278901030851438) == -988875433211000\nassert solution.smallestNumber(-355460775881521) == -887765555432110\nassert solution.smallestNumber(-486276227971542) == -987776654422221\nassert solution.smallestNumber(-613638734266183) == -887666643333211\nassert solution.smallestNumber(84376076170527) == 10023456677778\nassert solution.smallestNumber(679236625315966) == 122335566666799\nassert solution.smallestNumber(-750844572404140) == -877554444421000\nassert solution.smallestNumber(470674827348575) == 203444556777788\nassert solution.smallestNumber(222255515633270) == 102222233555567\nassert solution.smallestNumber(570604907934661) == 100034456667799\nassert solution.smallestNumber(820274999336612) == 102223346678999\nassert solution.smallestNumber(346512812245487) == 112223444556788\nassert solution.smallestNumber(-581643442510387) == -887655444332110\nassert solution.smallestNumber(-223255873734136) == -877655433332221\nassert solution.smallestNumber(-190806213761006) == -987666321110000\nassert solution.smallestNumber(182391368106393) == 101123333668899\nassert solution.smallestNumber(246013775185540) == 100123445556778\nassert solution.smallestNumber(-195758258178818) == -988888775552111\nassert solution.smallestNumber(-176797218140451) == -987776544211110\nassert solution.smallestNumber(400904315641566) == 100013444556669\nassert solution.smallestNumber(-59087188654014) == -98887655441100\nassert solution.smallestNumber(-966134604441132) == -966644443321110\nassert solution.smallestNumber(589227598655306) == 202355556678899\nassert solution.smallestNumber(52809039262448) == 20022344568899\nassert solution.smallestNumber(290539562361419) == 101223345566999\nassert solution.smallestNumber(458289665967414) == 124445566678899\nassert solution.smallestNumber(665724163145601) == 101123445566667\nassert solution.smallestNumber(214609965933243) == 102233344566999\nassert solution.smallestNumber(-693027964973376) == -999777666433320\nassert solution.smallestNumber(-53827826957354) == -98877655543322\nassert solution.smallestNumber(451105104702146) == 100011124445567\nassert solution.smallestNumber(268345921978359) == 122334556788999\nassert solution.smallestNumber(381607022580043) == 100002233456788\nassert solution.smallestNumber(-120733533194206) == -976543333221100\nassert solution.smallestNumber(-311597462142576) == -977665544322111\nassert solution.smallestNumber(565473903025563) == 200333455556679\nassert solution.smallestNumber(54436999608574) == 30444556678999",
  "inefficient_solution": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        if num == 0:\n            return 0\n        neg = num < 0\n        num = abs(num)\n        digits = []\n        while num:\n            digits.append(num % 10)\n            num //= 10\n        digits.sort()\n        ans = []\n        if not neg and not digits[0]:\n            digits.pop(0)\n        for i in range(len(digits)):\n            if i and not ans:\n                ans.append(0)\n            ans.append(digits[i])\n        if neg:\n            ans = [-i for i in ans]\n        return int(''.join(map(str, ans)))",
  "is_python": true
}