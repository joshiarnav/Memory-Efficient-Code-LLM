{
  "problem_idx": 1876,
  "task_name": "Substrings of Size Three with Distinct Characters",
  "markdown_description": "\nA string is **good** if there are no repeated characters.\n\n\nGiven a string `s`\u200b\u200b\u200b\u200b\u200b, return *the number of **good substrings** of length **three** in* `s`\u200b\u200b\u200b\u200b\u200b\u200b.\n\n\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"xyzzaz\"\n**Output:** 1\n**Explanation:** There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\". \nThe only good substring of length 3 is \"xyz\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aababcabc\"\n**Output:** 4\n**Explanation:** There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s`\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count, n = 0, len(s)\n        for i in range(n - 2):\n            count += s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]\n        return count\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count, n = 0, len(s)\n        for i in range(n - 2):\n            count += s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]\n        return count\n        \ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random string\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 101)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countGoodSubstrings(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countGoodSubstrings(s) == expected_result\n        print(f\"assert solution.countGoodSubstrings('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countGoodSubstrings('{s}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countGoodSubstrings('znuhmqp') == 5\nassert solution.countGoodSubstrings('qjheyiekomgxdbosbjyldpsezpqffoqdvefwesivmjclxodiwrgeixgcipsu') == 56\nassert solution.countGoodSubstrings('bwdtoijqcwnsjsvkzzgkbslxoxznaybeobdsoxgluyodw') == 39\nassert solution.countGoodSubstrings('ifjzucqvpzwkzryabhpuntoqvkmgnszfzrezvzjmxlpsrwkpvmkvwqaxhpjadgmjrcw') == 63\nassert solution.countGoodSubstrings('nyhy') == 1\nassert solution.countGoodSubstrings('gqsjgfjghuuqgnexldhmgsysgkqyxsacedlaxigaeznkutjinmrgludxbluuifs') == 56\nassert solution.countGoodSubstrings('ohydsdvbjiuzvyzhfdchtjzdpidopicponrszuorvubbdpymfwighcglqxktdnujifkhdndnbahrvxnszsjvfeyysnbvxgx') == 84\nassert solution.countGoodSubstrings('mgrfteuiwredjjbmxkp') == 15\nassert solution.countGoodSubstrings('unamprmlopgnomeavwsoeretiiryujbemdyocekoycakgdnlsgjru') == 48\nassert solution.countGoodSubstrings('lmmiewwabdxiejyxyzwxqbvdqztlljdzgthjmybdoqjnbnxqubzsprlzvwgfejqulaetnkhfrmjidxkq') == 70\nassert solution.countGoodSubstrings('lstnrcgdqlusblpgiwetbntnkwbjlgktqslcewepdphdiniodbotubefkaqnzhbxjbaczkidektysjcqyngagrdiexetdo') == 86\nassert solution.countGoodSubstrings('peehfizobgfstiutzfyuiffinooyrqdmmtpydmrzskygldbchkihytnspganyferprujb') == 58\nassert solution.countGoodSubstrings('kvmphqqesswaxbzaqgzwhekitihjoafioejifcflsirdxvqjevwbymxdcvuspmtn') == 56\nassert solution.countGoodSubstrings('vexxbceuxwhh') == 7\nassert solution.countGoodSubstrings('huugikusdbgszqruz') == 13\nassert solution.countGoodSubstrings('psihtuldwhecdssvhizkabijiskejltgekjuwzudkvtdulncviguxdtgdrixwfszhszczlszuqqlkbl') == 71\nassert solution.countGoodSubstrings('wskrblflwwwaklmxefjbhzghifqanketzpbulmanuwpdfhhvcgynzuypsfrpqqbzpkkngwkkhozmwkqqntnmawkrfxaje') == 76\nassert solution.countGoodSubstrings('h') == 0\nassert solution.countGoodSubstrings('iptxynbjsxlwakpixhtistaywwxzrionhmfbstpvuczapdfc') == 44\nassert solution.countGoodSubstrings('xsbxetuhblieohvdveowzmmcozmiao') == 25\nassert solution.countGoodSubstrings('twpoluajynetnodmkzrtcotyeqwzbkvzmlcafefejxylcsxgpo') == 46\nassert solution.countGoodSubstrings('khkaexpcvcxttukbtpncxmnjgzfrwqktroplliodzhnmvenmjvlpin') == 46\nassert solution.countGoodSubstrings('fahbzaohtfxvjdqhwlqcveztqevcocyzvhuuqracvfkphgnnitxmujwavqhkguhbmjvcehgygxrvxoorjtfbculatcl') == 81\nassert solution.countGoodSubstrings('aviqmfqjgkbuffwfegnfuujifgutkxukprpiygbigpucqromtrfqfapzcquigfzfeyqpzmsbfkuttevowbjknlacdc') == 77\nassert solution.countGoodSubstrings('cwxdregafputlfkaqorjxpeiiznrzpzrqxqecjsfgandarhgapebtcibyagnvpnzszaijxzfjvacslcjgozqmx') == 79\nassert solution.countGoodSubstrings('m') == 0\nassert solution.countGoodSubstrings('nrwufjjbiyubwaktljvcafylaxtyvojcawjczpecglohpz') == 42\nassert solution.countGoodSubstrings('fslywratovonyxpdkccqbohbmrxyifey') == 27\nassert solution.countGoodSubstrings('gmvatfhajrwgghovxslqjcouexcpiizxwclgwqzrgynrvlxajj') == 43\nassert solution.countGoodSubstrings('bfzignarwapervhtgsdigtogxftpwuoairzjayjklzosfurwve') == 48\nassert solution.countGoodSubstrings('odgdmfcwfzbtsvquiorckdhldgipgdbsmhigfosuyetczbsjuruhibrmkszguuau') == 57\nassert solution.countGoodSubstrings('vxqwatsjncfopelqutezqyppnduyfrskwzuvrujrrahwtroiwvcezetdoeugklnxtcxchoagbalvbbuzjnpgeeukim') == 78\nassert solution.countGoodSubstrings('uqerwgbscuxucumv') == 12\nassert solution.countGoodSubstrings('ddrfvshagevcasisdhuauvbfulnxwmiilljlbtzgwjo') == 33\nassert solution.countGoodSubstrings('ugybkyncmnwzeahwahrt') == 18\nassert solution.countGoodSubstrings('zrpcwlbcnibkntspoywrqoqkcuxklzfaqlidyktddgrgwouwdpmfdvsfeuddeioyxgfepx') == 62\nassert solution.countGoodSubstrings('lntnvvze') == 3\nassert solution.countGoodSubstrings('fxdtjmfkdxpvzlupnxumfyphlofhgajiozvbccgiygd') == 39\nassert solution.countGoodSubstrings('etgtkhwborzfeumzsueiaug') == 20\nassert solution.countGoodSubstrings('euxfkolnbarx') == 10\nassert solution.countGoodSubstrings('trnrcmszpbfwyignwdodkrydmlxvewkmpnjmcbmezpakdhgoalfwsfyudtkghuesmmyadfccrnrqtusuhnjhb') == 75\nassert solution.countGoodSubstrings('mxnyggprbxbkvvwcbuymd') == 14\nassert solution.countGoodSubstrings('yfpsanfynebktlwopwncedkqfeazjctqmiihgjtyariurlngtvqlfmdllkdsosoghyoxdebwnwxs') == 67\nassert solution.countGoodSubstrings('nnuonamxhdxufnjblylwyypztnuqbppwpglaunvqcbkqkyk') == 36\nassert solution.countGoodSubstrings('koyabtflbzccpvwtskwifuwfthuskjrpmecqmcyvbyjpbbhsvsdtancceokdkgnrjoenkiqq') == 61\nassert solution.countGoodSubstrings('bmzvpdnxzdtlfhhfhgbtwyhfhboybohipatrtwfybcpkkojzmulxrjmimdwkgjbgmrguqonqwesfmiexe') == 70\nassert solution.countGoodSubstrings('wifrcyolkmkblmzkfrwadzhpbzvlqmdjnztaiazseodqfzwwvxmiybgsj') == 51\nassert solution.countGoodSubstrings('wsymadvebbruosxvkweahwqtymt') == 23\nassert solution.countGoodSubstrings('ywcxcln') == 4\nassert solution.countGoodSubstrings('oyvwixxtd') == 5\nassert solution.countGoodSubstrings('shs') == 0\nassert solution.countGoodSubstrings('uiuklrernzrvdwvsdpzvjohzrzfuytuiiinjqlggfcrkbmkcveewaecvqaourtxfhffukzhxhjkzgr') == 62\nassert solution.countGoodSubstrings('uailtdamewtlekuvsdatjznkpywyeaaothmtpvwbgzjtzzioposstotxijmnwm') == 51\nassert solution.countGoodSubstrings('igcsefcykguqyybhkujirpwytvwrxhmmkusklbmcdgfdprrcmoruxsqnkrkpporqvixehpitilccollevxcltyotwffeg') == 75\nassert solution.countGoodSubstrings('juyxfsuivealdeitbtotzvoookainvbgayxdkpwcnmxjidbhzbsngcroujpzgiugbch') == 60\nassert solution.countGoodSubstrings('wvwmnkenkwskctmwsfionojyuwbfkrhtmlhzesdcymxevgnhcmqccvurqwuxyxpzjmj') == 59\nassert solution.countGoodSubstrings('gfjcyulnogjuwqotjd') == 16\nassert solution.countGoodSubstrings('kgrwzgtmallblmewuffmxfjknbkynnrvsitqnorihsgdindmclnpjpwajqwzdzaggbwictbzsk') == 61\nassert solution.countGoodSubstrings('jjumywlwhdzng') == 9\nassert solution.countGoodSubstrings('halbtgopwnbponhipemmjvbghvueszjqvlwnbhdwsbnjbzktx') == 45\nassert solution.countGoodSubstrings('xqnnwafzzqnuhomwjpkzcorsk') == 19\nassert solution.countGoodSubstrings('bfenpzgabzplwbavixjzzjjrbzdqdzyfuopfvxuwdudzvbogzkidxgoqjegjtcmckavesglvymhmyppovnphouliuemarez') == 83\nassert solution.countGoodSubstrings('tbnvkqudeijeetvonusnvujifhyncnljmkay') == 31\nassert solution.countGoodSubstrings('xayhzvmjduvqprfnhnygspjbubljxrnsaaidrkmbxnijptp') == 40\nassert solution.countGoodSubstrings('qgzbavtcldsmydiffksnrameqaixtmwhdyfgmrekwbykhtjgkfznbnrgjactvtsmfncykqbfhhimlpnlpeevwxuoavuvc') == 82\nassert solution.countGoodSubstrings('vsglkexqxfqftynpoqcas') == 17\nassert solution.countGoodSubstrings('pbawwliafi') == 6\nassert solution.countGoodSubstrings('hmpmcmcnkoniwcqtgqazimlycsrzumrnfvxcicyxfirvwnfimzwabcaiudwylmqyswitfiuysngjfarovkwfyxycavjlxsvxji') == 91\nassert solution.countGoodSubstrings('uqvebyoqyczdlmgybfwsmsmrjwgxlcsqjyrccirpqhkyndmvgtrexmqhukjzbmcidmtvpitezrhjjjomtplnaepasovwymteyqp') == 90\nassert solution.countGoodSubstrings('oidreeaqj') == 5\nassert solution.countGoodSubstrings('ppggqfugfjyiqwqfzcfqwgszlmclxqmiemsbvegsmmzxcmvyzgoto') == 44\nassert solution.countGoodSubstrings('unfqrdzipsxqcnktiwacopxubeshbydydkebtamqzbgzhzsitdluddlstujfkafmtjoyjtfwrwiveslkgyyonhnokfewlzzujo') == 85\nassert solution.countGoodSubstrings('vapsqcrxrxqwtbdveczhfvejfigahnzgtvxvut') == 33\nassert solution.countGoodSubstrings('ax') == 0\nassert solution.countGoodSubstrings('fkvlxn') == 4\nassert solution.countGoodSubstrings('tfxkvkxpqgraexdjrojmoy') == 19\nassert solution.countGoodSubstrings('spbeefhwgnmzceaurkdeyvbsfgsuatpgdqtcotycpypajyqlmloiqkunf') == 51\nassert solution.countGoodSubstrings('bkydifaoekodudhuqjixyhzoxjgasueqrnclnxdzfoascymynjtznpreoacbwnbjatulcxbrihpqnogmik') == 78\nassert solution.countGoodSubstrings('joncyilajvadmlseasyomwsenmqzlfnjqhyrliqnjbxyehpfvuuthaybrwmofyxihhdzrybsjdzzrtwijotejtcmydngibrvynw') == 91\nassert solution.countGoodSubstrings('zqqesxdxqbpqpdmosfedfrucftsuofymxyojabqpuwlrmwkxbxxojqqahbehnmsdhaoifjqlcudktzdxpsswuqzuggiby') == 78\nassert solution.countGoodSubstrings('udfqgcsuvndrqlokdsuudscljpolkb') == 26\nassert solution.countGoodSubstrings('mbuabqbvxdjiksoumqrifgqhvsrfvpv') == 27\nassert solution.countGoodSubstrings('fzpjpacziesnqddqfxlhrqnhnosrcslkjbplwdbwawryqllfmfypfsbbdtkwzectcpvzhjuvgydxtuseotpqsjonizqoesajkw') == 85\nassert solution.countGoodSubstrings('bkxubwoovnmtchwno') == 13\nassert solution.countGoodSubstrings('urhmrgpurkynrhjmyyirbcmvwtrnuroauqpkdfwgtgotwi') == 41\nassert solution.countGoodSubstrings('pkznrfwmtdghigvvcwglfumwxxtezdvgspyptxevwuozpcensasoqbpdcfrjwiazohddueedskvnhnttiobsuyzulozknwceuc') == 83\nassert solution.countGoodSubstrings('chqwbihzsitosjddekkpgmakaxyhhmkypfhilbqscbdbfpmbd') == 39\nassert solution.countGoodSubstrings('vjbxsvxshqsfbclgjjophrihwdtaoxgtgrotp') == 32\nassert solution.countGoodSubstrings('mvauddvoluxakpidweblufhggbtnbskyalgwfzmneblrjibscbicmdnvfxogxynjkgf') == 61\nassert solution.countGoodSubstrings('kgloexjkjgnrhwkvegjsrjmonkqyvpndpuheedtnlxyaqofihgrhntjrqhddchikyuoffcsc') == 62\nassert solution.countGoodSubstrings('lyrqziagdwyueuibcytodakncmshxbtomr') == 31\nassert solution.countGoodSubstrings('qgxtfsqaxnzgcttxyplqtfrfkuavvxnwpxdjiufupalmfloqchcfzpvdngvjewblxsqjpqzcntdrfzujmhir') == 75\nassert solution.countGoodSubstrings('tzzamyxwyetsutwfwqbbmaysfykezrmiyspuckcahobqffzkqhevj') == 43\nassert solution.countGoodSubstrings('daumdivyvxozphlmogefmq') == 19\nassert solution.countGoodSubstrings('ppsa') == 1\nassert solution.countGoodSubstrings('gjubhqymrsuqqsoorjtkmgujouzv') == 22\nassert solution.countGoodSubstrings('wkzktjmnwoizspotdqsmaxh') == 20\nassert solution.countGoodSubstrings('lzufcbaobejljvicvulsibicsnocvsokm') == 29\nassert solution.countGoodSubstrings('flforuturgld') == 8\nassert solution.countGoodSubstrings('oswxxkobkmys') == 8",
  "inefficient_solution": "class Solution:\n    def countGoodSubstrings(self, s: str) -> int:\n        count = 0\n        for i in range(len(s) - 2):\n            substring = s[i:i+3]\n            substring_set = set(substring)\n            if len(substring_set) == 3:\n                count += 1\n        return count",
  "is_python": true
}