{
  "problem_idx": 1992,
  "task_name": "Find All Groups of Farmland",
  "markdown_description": "\nYou are given a **0-indexed** `m x n` binary matrix `land` where a `0` represents a hectare of forested land and a `1` represents a hectare of farmland.\n\n\nTo keep the land organized, there are designated rectangular areas of hectares that consist **entirely** of farmland. These rectangular areas are called **groups**. No two groups are adjacent, meaning farmland in one group is **not** four-directionally adjacent to another farmland in a different group.\n\n\n`land` can be represented by a coordinate system where the top left corner of `land` is `(0, 0)` and the bottom right corner of `land` is `(m-1, n-1)`. Find the coordinates of the top left and bottom right corner of each **group** of farmland. A **group** of farmland with a top left corner at `(r1, c1)` and a bottom right corner at `(r2, c2)` is represented by the 4-length array `[r1, c1, r2, c2].`\n\n\nReturn *a 2D array containing the 4-length arrays described above for each **group** of farmland in* `land`*. If there are no groups of farmland, return an empty array. You may return the answer in **any order***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1992.Find%20All%20Groups%20of%20Farmland/images/screenshot-2021-07-27-at-12-23-15-copy-of-diagram-drawio-diagrams-net.png)\n\n```\n\n**Input:** land = [[1,0,0],[0,1,1],[0,1,1]]\n**Output:** [[0,0,0,0],[1,1,2,2]]\n**Explanation:**\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].\nThe second group has a top left corner at land[1][1] and a bottom right corner at land[2][2].\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1992.Find%20All%20Groups%20of%20Farmland/images/screenshot-2021-07-27-at-12-30-26-copy-of-diagram-drawio-diagrams-net.png)\n\n```\n\n**Input:** land = [[1,1],[1,1]]\n**Output:** [[0,0,1,1]]\n**Explanation:**\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[1][1].\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1992.Find%20All%20Groups%20of%20Farmland/images/screenshot-2021-07-27-at-12-32-24-copy-of-diagram-drawio-diagrams-net.png)\n\n```\n\n**Input:** land = [[0]]\n**Output:** []\n**Explanation:**\nThere are no groups of farmland.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == land.length`\n* `n == land[i].length`\n* `1 <= m, n <= 300`\n* `land` consists of only `0`'s and `1`'s.\n* Groups of farmland are **rectangular** in shape.\n\n\n",
  "canonical_solution": "class Solution:\n    def findFarmland(self, land: List[List[int]]) -> List[List[int]]:\n        m, n = len(land), len(land[0])\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                if (\n                    land[i][j] == 0\n                    or (j > 0 and land[i][j - 1] == 1)\n                    or (i > 0 and land[i - 1][j] == 1)\n                ):\n                    continue\n                x, y = i, j\n                while x + 1 < m and land[x + 1][j] == 1:\n                    x += 1\n                while y + 1 < n and land[x][y + 1] == 1:\n                    y += 1\n                ans.append([i, j, x, y])\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findFarmland(self, land):\n        m, n = len(land), len(land[0])\n        ans = []\n        for i in range(m):\n            for j in range(n):\n                if (\n                    land[i][j] == 0\n                    or (j > 0 and land[i][j - 1] == 1)\n                    or (i > 0 and land[i - 1][j] == 1)\n                ):\n                    continue\n                x, y = i, j\n                while x + 1 < m and land[x + 1][j] == 1:\n                    x += 1\n                while y + 1 < n and land[x][y + 1] == 1:\n                    y += 1\n                ans.append([i, j, x, y])\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random land matrix\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    land = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findFarmland(land)\n\n    return land, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        land, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findFarmland(land) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.findFarmland({land}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.findFarmland({land}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findFarmland([[0, 0, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0]]) == [[0, 2, 0, 4], [0, 7, 0, 7], [1, 0, 1, 0], [1, 5, 1, 5]]\nassert solution.findFarmland([[0, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1]]) == [[0, 2, 0, 3], [0, 5, 0, 5], [1, 1, 1, 1], [1, 4, 1, 4], [1, 6, 4, 6], [2, 0, 2, 0], [3, 3, 3, 4], [4, 0, 5, 0], [4, 5, 4, 6], [6, 3, 6, 6], [7, 2, 8, 2], [8, 6, 8, 6]]\nassert solution.findFarmland([[1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 0, 0]]) == [[0, 0, 1, 3], [0, 2, 1, 3], [0, 7, 0, 8]]\nassert solution.findFarmland([[1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0]]) == [[0, 0, 0, 3], [0, 5, 0, 6], [0, 8, 1, 9], [2, 0, 3, 0], [3, 6, 3, 6], [3, 8, 3, 8], [4, 3, 5, 3], [4, 7, 4, 7], [4, 9, 4, 9], [5, 1, 8, 1], [6, 6, 7, 7], [8, 0, 8, 1], [8, 5, 8, 5]]\nassert solution.findFarmland([[0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0]]) == [[0, 2, 4, 3], [0, 6, 1, 6], [1, 0, 1, 0], [2, 1, 3, 2], [3, 5, 7, 5], [4, 0, 4, 0], [5, 4, 7, 5], [6, 2, 7, 2], [7, 1, 7, 2]]\nassert solution.findFarmland([[0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1]]) == [[0, 3, 4, 6], [1, 1, 1, 1], [2, 9, 2, 9], [3, 0, 5, 0], [3, 8, 5, 9], [5, 2, 5, 2]]\nassert solution.findFarmland([[0, 1, 1], [1, 1, 1], [0, 0, 0], [1, 1, 0], [1, 1, 1], [1, 1, 1]]) == [[0, 1, 1, 2], [1, 0, 1, 2], [3, 0, 5, 2]]\nassert solution.findFarmland([[0, 0, 0, 1, 1], [1, 1, 0, 0, 1], [1, 1, 0, 0, 0]]) == [[0, 3, 0, 4], [1, 0, 2, 1]]\nassert solution.findFarmland([[0, 1, 1, 0, 1], [0, 1, 0, 0, 0]]) == [[0, 1, 1, 1], [0, 4, 0, 4]]\nassert solution.findFarmland([[1, 1, 0, 0], [1, 0, 0, 1]]) == [[0, 0, 1, 0], [1, 3, 1, 3]]\nassert solution.findFarmland([[1, 1, 1], [1, 0, 0], [1, 0, 0], [0, 1, 1], [1, 0, 0], [0, 1, 0], [0, 0, 0]]) == [[0, 0, 2, 0], [3, 1, 3, 2], [4, 0, 4, 0], [5, 1, 5, 1]]\nassert solution.findFarmland([[1, 1, 0, 1, 0, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0]]) == [[0, 0, 2, 0], [0, 3, 0, 3], [0, 5, 1, 6], [1, 4, 2, 4], [2, 3, 4, 3], [3, 2, 8, 4], [3, 7, 5, 8], [4, 0, 4, 3], [5, 5, 7, 5], [6, 0, 6, 3], [7, 7, 8, 7], [9, 1, 9, 1], [9, 6, 9, 6]]\nassert solution.findFarmland([[1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1]]) == [[0, 0, 0, 0], [0, 2, 1, 3], [0, 6, 0, 9], [1, 1, 4, 3], [1, 5, 4, 5], [2, 0, 4, 3], [3, 3, 4, 3], [3, 7, 4, 7]]\nassert solution.findFarmland([[0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 1, 1]]) == [[0, 2, 0, 3], [1, 1, 1, 1], [2, 2, 3, 2], [3, 0, 3, 2], [5, 0, 5, 0], [5, 2, 5, 6]]\nassert solution.findFarmland([[0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 1, 0]]) == [[0, 4, 0, 4], [0, 6, 0, 7], [1, 1, 3, 1], [1, 5, 1, 5], [2, 0, 3, 1], [2, 3, 2, 4], [2, 8, 2, 8], [3, 7, 6, 7], [4, 6, 4, 7], [5, 1, 6, 5]]\nassert solution.findFarmland([[0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0]]) == [[0, 1, 3, 2], [0, 4, 4, 4], [0, 6, 1, 7], [1, 0, 1, 2], [2, 3, 2, 5], [3, 0, 3, 2], [4, 9, 5, 9], [5, 0, 5, 1], [5, 5, 7, 6], [5, 8, 5, 9], [6, 4, 6, 5], [6, 7, 6, 7], [7, 0, 7, 3], [7, 8, 7, 9]]\nassert solution.findFarmland([[1, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 0]]) == [[0, 0, 1, 1], [0, 2, 0, 2], [0, 4, 0, 4]]\nassert solution.findFarmland([[0, 0, 1, 1, 1], [0, 0, 0, 1, 1], [1, 1, 0, 1, 1], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 0], [1, 0, 1, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 0]]) == [[0, 2, 0, 4], [2, 0, 2, 1], [4, 0, 4, 0], [6, 0, 7, 0], [7, 4, 8, 4], [9, 0, 9, 3]]\nassert solution.findFarmland([[1, 1, 1, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1]]) == [[0, 0, 0, 3], [0, 5, 0, 5], [0, 8, 1, 9], [1, 6, 1, 6]]\nassert solution.findFarmland([[1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1]]) == [[0, 0, 2, 1], [4, 0, 4, 2], [4, 5, 4, 5], [6, 1, 6, 1], [7, 0, 7, 0], [7, 2, 7, 2], [7, 4, 7, 5]]\nassert solution.findFarmland([[1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0]]) == [[0, 0, 0, 1], [0, 3, 0, 4], [0, 6, 1, 6], [1, 2, 4, 3], [2, 0, 2, 0], [2, 5, 3, 6], [3, 1, 4, 3], [3, 4, 3, 6], [4, 0, 4, 3]]\nassert solution.findFarmland([[0, 1, 1, 0], [1, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 1], [1, 0, 0, 1]]) == [[0, 1, 0, 2], [1, 0, 2, 1], [1, 3, 1, 3], [3, 2, 3, 3], [4, 0, 4, 0]]\nassert solution.findFarmland([[0, 0, 0, 0, 1, 1], [0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1]]) == [[0, 4, 1, 5], [1, 1, 2, 1], [1, 3, 1, 5], [3, 0, 3, 0], [3, 2, 8, 2], [3, 5, 6, 5], [5, 0, 7, 0], [7, 4, 7, 4], [8, 5, 9, 5], [9, 1, 9, 1], [9, 3, 9, 5]]\nassert solution.findFarmland([[1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1, 0, 0]]) == [[0, 0, 1, 0], [0, 3, 1, 3], [2, 1, 3, 1], [2, 4, 2, 4], [2, 7, 3, 7], [3, 5, 4, 5], [4, 0, 4, 0], [4, 3, 4, 5]]\nassert solution.findFarmland([[0, 1, 0, 0], [0, 1, 1, 1], [0, 0, 0, 0], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 0]]) == [[0, 1, 1, 3], [3, 1, 4, 1], [3, 3, 4, 3]]\nassert solution.findFarmland([[0, 0, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0]]) == [[0, 3, 0, 3], [0, 5, 0, 6], [1, 0, 4, 0], [2, 5, 2, 6], [4, 3, 4, 6], [5, 1, 8, 2], [6, 0, 7, 2]]\nassert solution.findFarmland([[1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 0, 1, 0, 1]]) == [[0, 0, 2, 0], [0, 3, 1, 3], [1, 6, 1, 6], [2, 2, 4, 3], [2, 4, 3, 4], [3, 6, 3, 6], [4, 0, 4, 3], [4, 5, 4, 5], [4, 7, 4, 7]]\nassert solution.findFarmland([[0, 1, 0], [0, 1, 0]]) == [[0, 1, 1, 1]]\nassert solution.findFarmland([[0, 0, 0, 1, 1, 0, 1]]) == [[0, 3, 0, 4], [0, 6, 0, 6]]\nassert solution.findFarmland([[1, 0], [1, 0], [1, 0], [1, 0], [0, 1], [1, 1]]) == [[0, 0, 3, 0], [4, 1, 5, 1], [5, 0, 5, 1]]\nassert solution.findFarmland([[1, 1, 0, 1]]) == [[0, 0, 0, 1], [0, 3, 0, 3]]\nassert solution.findFarmland([[0, 1, 1, 0, 0], [0, 1, 1, 1, 1], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 1], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0]]) == [[0, 1, 2, 1], [2, 0, 2, 1], [3, 3, 4, 4], [4, 0, 5, 0], [5, 2, 5, 2], [6, 1, 6, 1], [6, 3, 6, 3]]\nassert solution.findFarmland([[0, 0, 1, 0], [0, 1, 1, 1], [1, 1, 1, 0], [1, 0, 1, 1]]) == [[0, 2, 3, 3], [1, 1, 2, 2], [2, 0, 3, 0]]\nassert solution.findFarmland([[1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0]]) == [[0, 0, 2, 0], [0, 2, 0, 3], [0, 5, 2, 5], [1, 4, 4, 4], [2, 3, 2, 5], [3, 1, 5, 3], [4, 0, 4, 4]]\nassert solution.findFarmland([[0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0]]) == [[0, 2, 0, 2], [0, 6, 0, 7], [1, 1, 2, 4], [1, 3, 2, 4], [1, 5, 1, 5], [2, 0, 2, 4]]\nassert solution.findFarmland([[1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0], [0, 0, 0, 1], [0, 0, 0, 0], [0, 0, 1, 1], [0, 1, 1, 1]]) == [[0, 0, 1, 1], [1, 3, 1, 3], [3, 3, 3, 3], [5, 2, 6, 3], [6, 1, 6, 3]]\nassert solution.findFarmland([[1, 0], [1, 1], [1, 1], [0, 0], [0, 0], [1, 0], [0, 1], [1, 1]]) == [[0, 0, 2, 1], [5, 0, 5, 0], [6, 1, 7, 1], [7, 0, 7, 1]]\nassert solution.findFarmland([[1, 1, 0, 0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1]]) == [[0, 0, 2, 0], [0, 4, 0, 4], [0, 6, 1, 8], [1, 3, 3, 4], [2, 9, 3, 9], [3, 1, 3, 4], [3, 6, 3, 6]]\nassert solution.findFarmland([[0, 0, 0, 0, 1], [1, 1, 1, 0, 1], [0, 1, 1, 0, 0], [1, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 1], [0, 0, 0, 0, 1], [1, 1, 0, 0, 0]]) == [[0, 4, 1, 4], [1, 0, 1, 2], [3, 0, 3, 1], [3, 3, 5, 4], [5, 1, 5, 4], [7, 0, 7, 1]]\nassert solution.findFarmland([[0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0]]) == [[1, 0, 1, 0], [1, 4, 1, 5], [2, 1, 2, 3]]\nassert solution.findFarmland([[0, 1, 1, 0, 0], [0, 1, 0, 1, 1], [0, 1, 1, 0, 0], [1, 0, 1, 1, 1], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 0, 1], [1, 1, 0, 0, 1], [0, 1, 0, 0, 0]]) == [[0, 1, 2, 2], [1, 3, 1, 4], [3, 0, 3, 0], [6, 2, 7, 2], [7, 0, 8, 1], [7, 4, 8, 4]]\nassert solution.findFarmland([[0], [1]]) == [[1, 0, 1, 0]]\nassert solution.findFarmland([[1, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 0, 0], [0, 1, 1, 0]]) == [[0, 0, 1, 1], [0, 3, 0, 3], [2, 2, 2, 3], [4, 1, 4, 2]]\nassert solution.findFarmland([[1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0]]) == [[0, 0, 0, 2], [1, 3, 1, 3], [1, 5, 2, 5], [3, 0, 4, 2], [3, 2, 4, 2]]\nassert solution.findFarmland([[0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1]]) == [[0, 2, 0, 2], [0, 5, 2, 5], [0, 8, 0, 9], [1, 0, 1, 1], [2, 4, 6, 5], [2, 7, 2, 9], [3, 0, 3, 0], [3, 3, 7, 3], [4, 2, 4, 4], [4, 6, 4, 6], [5, 9, 9, 9], [6, 0, 6, 0], [6, 2, 8, 2], [6, 7, 8, 7], [7, 1, 7, 3], [8, 0, 8, 0], [8, 4, 9, 6], [8, 6, 9, 6], [9, 8, 9, 9]]\nassert solution.findFarmland([[0, 1, 0, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0]]) == [[0, 1, 1, 1], [0, 5, 0, 6], [1, 0, 1, 1], [1, 4, 1, 4], [1, 7, 1, 8], [2, 2, 3, 4], [2, 6, 2, 6], [3, 0, 5, 2], [4, 7, 4, 7], [7, 0, 7, 0], [7, 3, 7, 3]]\nassert solution.findFarmland([[0, 0, 1], [0, 1, 0], [0, 0, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]) == [[0, 2, 0, 2], [1, 1, 1, 1], [3, 2, 3, 2], [5, 0, 5, 0]]\nassert solution.findFarmland([[0, 1, 1, 0, 1], [0, 0, 0, 0, 1], [0, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 1, 0]]) == [[0, 1, 0, 2], [0, 4, 1, 4], [2, 1, 3, 1], [3, 0, 3, 1], [3, 3, 4, 3], [4, 2, 4, 3]]\nassert solution.findFarmland([[1, 1, 1], [0, 0, 1]]) == [[0, 0, 0, 2]]\nassert solution.findFarmland([[0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1]]) == [[0, 1, 1, 3], [0, 3, 1, 3], [0, 6, 0, 6], [1, 0, 1, 3], [1, 8, 1, 9]]\nassert solution.findFarmland([[0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1]]) == [[0, 2, 1, 2], [0, 6, 2, 6], [1, 0, 1, 0], [1, 9, 2, 9], [2, 1, 2, 1]]\nassert solution.findFarmland([[1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0]]) == [[0, 0, 1, 0], [0, 3, 0, 6], [1, 2, 1, 2], [2, 1, 3, 2], [2, 3, 2, 3], [2, 5, 2, 5], [2, 7, 2, 7], [4, 5, 4, 7], [5, 0, 6, 2], [7, 3, 9, 6], [7, 6, 7, 6], [9, 0, 9, 0]]\nassert solution.findFarmland([[0, 1, 0, 1, 1, 1, 1, 0, 1, 0]]) == [[0, 1, 0, 1], [0, 3, 0, 6], [0, 8, 0, 8]]\nassert solution.findFarmland([[0, 0, 1, 0, 1, 0, 1, 1]]) == [[0, 2, 0, 2], [0, 4, 0, 4], [0, 6, 0, 7]]\nassert solution.findFarmland([[0, 1, 1, 0, 0], [0, 0, 1, 1, 1], [0, 0, 1, 0, 1], [0, 1, 0, 1, 1], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0]]) == [[0, 1, 0, 2], [3, 1, 5, 3], [3, 3, 5, 3], [4, 0, 5, 3]]\nassert solution.findFarmland([[0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1]]) == [[0, 3, 1, 3], [2, 2, 2, 2], [2, 4, 4, 4], [3, 0, 7, 0], [3, 3, 6, 3], [4, 6, 4, 6], [5, 5, 6, 6], [7, 4, 7, 4]]\nassert solution.findFarmland([[1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1]]) == [[0, 0, 0, 2], [0, 4, 0, 5], [3, 0, 4, 0], [4, 2, 4, 2], [4, 5, 5, 5], [5, 1, 8, 1], [5, 3, 5, 5], [6, 0, 8, 1], [7, 3, 8, 5]]\nassert solution.findFarmland([[0, 0], [1, 0], [0, 0], [1, 0]]) == [[1, 0, 1, 0], [3, 0, 3, 0]]\nassert solution.findFarmland([[0, 1, 1, 0, 0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0]]) == [[0, 1, 4, 1], [0, 5, 0, 8], [1, 0, 1, 2], [2, 4, 7, 5], [2, 6, 5, 7], [3, 0, 3, 1], [4, 8, 4, 9], [5, 3, 5, 7], [6, 0, 7, 1]]\nassert solution.findFarmland([[0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1]]) == [[0, 1, 2, 1], [1, 0, 1, 3], [1, 6, 1, 6], [2, 5, 3, 6], [3, 0, 3, 0], [3, 2, 3, 2], [3, 4, 3, 6], [4, 3, 4, 3]]\nassert solution.findFarmland([[0, 1, 1], [0, 0, 1], [1, 1, 1], [0, 0, 1], [1, 1, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 0], [0, 1, 0]]) == [[0, 1, 0, 2], [2, 0, 2, 2], [4, 0, 5, 1], [6, 2, 7, 2], [7, 0, 8, 1]]\nassert solution.findFarmland([[1, 1], [0, 1], [1, 1], [0, 1], [1, 1], [0, 0], [1, 1], [0, 1], [1, 1]]) == [[0, 0, 0, 1], [2, 0, 2, 1], [4, 0, 4, 1], [6, 0, 6, 1], [8, 0, 8, 1]]\nassert solution.findFarmland([[1, 0, 1, 1], [1, 1, 0, 0]]) == [[0, 0, 1, 1], [0, 2, 0, 3]]\nassert solution.findFarmland([[0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 0, 1]]) == [[0, 1, 0, 1], [1, 2, 1, 2], [3, 2, 3, 2]]\nassert solution.findFarmland([[1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 0]]) == [[0, 0, 0, 3], [0, 5, 3, 5], [0, 8, 3, 8], [1, 4, 1, 6], [2, 0, 4, 2], [3, 3, 3, 5], [3, 7, 3, 8]]\nassert solution.findFarmland([[0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 1, 1, 0], [0, 0, 0, 1]]) == [[1, 1, 1, 1], [2, 3, 2, 3], [3, 1, 3, 2], [4, 3, 4, 3]]\nassert solution.findFarmland([[1, 1, 0]]) == [[0, 0, 0, 1]]\nassert solution.findFarmland([[1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1]]) == [[0, 0, 1, 0], [0, 9, 1, 9]]\nassert solution.findFarmland([[1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0]]) == [[0, 0, 1, 3], [0, 4, 0, 5], [3, 0, 4, 0], [3, 2, 5, 5], [6, 0, 6, 0], [7, 1, 7, 4]]\nassert solution.findFarmland([[1, 1, 0, 0, 0], [0, 1, 0, 1, 1]]) == [[0, 0, 0, 1], [1, 3, 1, 4]]\nassert solution.findFarmland([[1, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1]]) == [[0, 0, 3, 0], [0, 5, 2, 6], [2, 4, 2, 6]]\nassert solution.findFarmland([[0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1]]) == [[0, 4, 0, 4], [1, 1, 1, 2], [1, 5, 1, 5], [3, 1, 3, 1], [5, 0, 5, 5], [7, 0, 7, 1]]\nassert solution.findFarmland([[1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 1, 1, 0]]) == [[0, 0, 1, 0], [0, 3, 0, 3], [0, 6, 0, 8], [1, 2, 3, 2], [1, 4, 7, 5], [3, 1, 3, 2], [3, 6, 4, 6], [5, 1, 5, 1], [5, 3, 7, 5], [6, 0, 8, 1], [6, 8, 6, 8], [7, 7, 8, 7]]\nassert solution.findFarmland([[1, 0], [1, 0], [1, 0], [0, 1], [1, 1], [0, 0], [1, 1], [1, 1], [1, 1], [1, 0]]) == [[0, 0, 2, 0], [3, 1, 4, 1], [4, 0, 4, 1], [6, 0, 9, 0]]\nassert solution.findFarmland([[1], [0], [0], [0], [1], [0], [0], [1]]) == [[0, 0, 0, 0], [4, 0, 4, 0], [7, 0, 7, 0]]\nassert solution.findFarmland([[0, 1, 0, 0, 0], [1, 0, 1, 0, 0]]) == [[0, 1, 0, 1], [1, 0, 1, 0], [1, 2, 1, 2]]\nassert solution.findFarmland([[1, 0]]) == [[0, 0, 0, 0]]\nassert solution.findFarmland([[0, 0, 0], [1, 0, 1], [1, 0, 0], [1, 0, 0], [1, 0, 1], [0, 1, 1]]) == [[1, 0, 4, 0], [1, 2, 1, 2], [4, 2, 5, 2], [5, 1, 5, 2]]\nassert solution.findFarmland([[1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1]]) == [[0, 0, 0, 0], [0, 2, 1, 2], [1, 1, 1, 2], [1, 5, 4, 5], [2, 0, 2, 0], [2, 4, 3, 5], [3, 1, 3, 5], [4, 0, 4, 0], [5, 4, 6, 5], [6, 0, 6, 0]]\nassert solution.findFarmland([[1, 0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0]]) == [[0, 0, 2, 8], [0, 3, 4, 3], [0, 6, 0, 6], [1, 5, 5, 5], [1, 7, 2, 8], [1, 9, 1, 9], [4, 1, 4, 3], [4, 7, 8, 8], [6, 0, 6, 0], [6, 3, 6, 3], [6, 9, 7, 9], [7, 1, 8, 1], [7, 6, 7, 9], [8, 0, 8, 1], [8, 3, 8, 3], [8, 5, 8, 5]]\nassert solution.findFarmland([[0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0]]) == [[0, 1, 4, 1], [1, 4, 1, 4], [2, 0, 3, 1], [3, 3, 3, 3], [4, 5, 5, 5], [6, 0, 7, 0]]\nassert solution.findFarmland([[1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0]]) == [[0, 0, 0, 2], [0, 7, 1, 7], [1, 3, 1, 7], [2, 0, 3, 2]]\nassert solution.findFarmland([[0, 0, 1, 1, 1, 0], [1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1]]) == [[0, 2, 3, 2], [1, 0, 1, 0], [1, 5, 2, 5], [2, 1, 2, 2], [2, 4, 2, 5], [3, 0, 3, 0], [4, 1, 7, 1], [4, 3, 6, 3], [5, 5, 5, 5], [6, 0, 7, 1], [7, 4, 7, 5], [8, 3, 9, 3], [9, 1, 9, 3], [9, 5, 9, 5]]\nassert solution.findFarmland([[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 0, 0]]) == [[0, 0, 0, 0], [0, 2, 0, 2], [1, 1, 1, 1], [3, 0, 3, 0], [3, 2, 4, 2], [4, 1, 4, 2]]\nassert solution.findFarmland([[0, 0], [1, 0]]) == [[1, 0, 1, 0]]\nassert solution.findFarmland([[0, 0, 0], [1, 0, 0]]) == [[1, 0, 1, 0]]\nassert solution.findFarmland([[1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0]]) == [[0, 0, 0, 2], [0, 4, 1, 4], [0, 6, 3, 6], [3, 1, 3, 1], [4, 0, 5, 0], [4, 2, 4, 5]]\nassert solution.findFarmland([[0, 0, 1], [1, 1, 0], [0, 0, 1], [1, 1, 0], [0, 1, 1], [1, 1, 0], [0, 0, 0], [0, 0, 0]]) == [[0, 2, 0, 2], [1, 0, 1, 1], [2, 2, 2, 2], [3, 0, 3, 1], [5, 0, 5, 1]]\nassert solution.findFarmland([[0, 0, 0, 1, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 1], [0, 0, 0, 0, 1], [1, 0, 0, 0, 0], [0, 1, 0, 0, 1]]) == [[0, 3, 1, 3], [1, 2, 2, 2], [2, 0, 2, 0], [2, 4, 3, 4], [4, 0, 4, 0], [5, 1, 5, 1], [5, 4, 5, 4]]\nassert solution.findFarmland([[1, 0], [0, 1], [1, 0], [0, 1], [1, 0], [1, 1], [1, 1], [1, 1], [0, 0]]) == [[0, 0, 0, 0], [1, 1, 1, 1], [2, 0, 2, 0], [3, 1, 3, 1], [4, 0, 7, 1]]\nassert solution.findFarmland([[1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1]]) == [[0, 0, 3, 1], [0, 4, 1, 4], [1, 2, 2, 2], [1, 6, 1, 6], [2, 5, 2, 5], [3, 4, 3, 4], [3, 6, 3, 6]]\nassert solution.findFarmland([[0, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1], [0, 1, 0], [1, 1, 1]]) == [[1, 1, 1, 1], [2, 2, 7, 2], [3, 0, 3, 2], [5, 0, 7, 2], [9, 0, 9, 2]]\nassert solution.findFarmland([[1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0]]) == [[0, 0, 1, 0], [0, 5, 0, 5], [1, 4, 1, 4]]\nassert solution.findFarmland([[0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [0, 0, 1, 0], [1, 1, 0, 0], [0, 1, 0, 1], [0, 0, 1, 1]]) == [[0, 2, 1, 3], [3, 1, 4, 3], [4, 0, 4, 3], [6, 0, 6, 1], [7, 3, 8, 3], [8, 2, 8, 3]]\nassert solution.findFarmland([[1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0]]) == [[0, 0, 2, 1], [0, 4, 0, 7], [2, 4, 2, 5], [4, 3, 4, 3], [4, 6, 4, 7], [5, 0, 5, 1], [5, 5, 5, 5]]\nassert solution.findFarmland([[1, 1], [1, 0], [1, 1], [1, 1], [0, 0], [0, 0], [1, 1], [1, 0], [1, 1], [1, 0]]) == [[0, 0, 3, 1], [6, 0, 9, 0]]\nassert solution.findFarmland([[1, 1, 1, 0, 0], [0, 1, 0, 0, 1], [1, 1, 0, 1, 0], [0, 1, 0, 0, 1], [1, 1, 1, 0, 0], [0, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0]]) == [[0, 0, 0, 2], [1, 4, 1, 4], [2, 0, 2, 1], [2, 3, 2, 3], [3, 4, 3, 4], [4, 0, 4, 2], [5, 4, 5, 4], [6, 1, 6, 1], [6, 3, 7, 3], [7, 2, 7, 3]]\nassert solution.findFarmland([[0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1]]) == [[0, 4, 2, 5], [1, 0, 1, 1], [4, 0, 4, 0], [4, 2, 5, 3], [5, 5, 5, 5], [6, 0, 6, 0], [7, 2, 7, 3], [7, 5, 7, 5]]",
  "inefficient_solution": "class Solution:\n    def findFarmland(self, land):\n        m, n = len(land), len(land[0])\n        result = []\n        visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if land[i][j] == 0 or visited[i][j]:\n                    continue\n                x, y = i, j\n                while x + 1 < m and land[x + 1][j] == 1 and not visited[x + 1][j]:\n                    x += 1\n                    visited[x][j] = True\n                while y + 1 < n and land[x][y + 1] == 1 and not visited[x][y + 1]:\n                    y += 1\n                    visited[x][y] = True\n                visited[i][j] = True\n                result.append([i, j, x, y])\n        new_visited = [[False for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if land[i][j] == 1 and not new_visited[i][j]:\n                    x, y = i, j\n                    while x + 1 < m and land[x + 1][j] == 1 and not new_visited[x + 1][j]:\n                        x += 1\n                        new_visited[x][j] = True\n                    while y + 1 < n and land[x][y + 1] == 1 and not new_visited[x][y + 1]:\n                        y += 1\n                        new_visited[x][y] = True\n        temp = []\n        for i in range(m):\n            for j in range(n):\n                if new_visited[i][j] and land[i][j] == 1:\n                    found = False\n                    for val in result:\n                        if val[1] == j and val[2] == i:\n                            found = True\n                            break\n                    if not found:\n                        temp.append([i, j, i, j])\n        result += temp\n        return result",
  "is_python": true
}