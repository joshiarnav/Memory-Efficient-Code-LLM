{
  "problem_idx": 712,
  "task_name": "Minimum ASCII Delete Sum for Two Strings",
  "markdown_description": "\nGiven two strings `s1` and\u00a0`s2`, return *the lowest **ASCII** sum of deleted characters to make two strings equal*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"sea\", s2 = \"eat\"\n**Output:** 231\n**Explanation:** Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"delete\", s2 = \"leet\"\n**Output:** 403\n**Explanation:** Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s1.length, s2.length <= 1000`\n* `s1` and `s2` consist of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        m, n = len(s1), len(s2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            f[i][0] = f[i - 1][0] + ord(s1[i - 1])\n        for j in range(1, n + 1):\n            f[0][j] = f[0][j - 1] + ord(s2[j - 1])\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1]\n                else:\n                    f[i][j] = min(\n                        f[i - 1][j] + ord(s1[i - 1]), f[i][j - 1] + ord(s2[j - 1])\n                    )\n        return f[m][n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        m, n = len(s1), len(s2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            f[i][0] = f[i - 1][0] + ord(s1[i - 1])\n        for j in range(1, n + 1):\n            f[0][j] = f[0][j - 1] + ord(s2[j - 1])\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1]\n                else:\n                    f[i][j] = min(\n                        f[i - 1][j] + ord(s1[i - 1]), f[i][j - 1] + ord(s2[j - 1])\n                    )\n        return f[m][n]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    s1 = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n    s2 = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumDeleteSum(s1, s2)\n\n    return s1, s2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s1, s2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumDeleteSum(s1, s2) == expected_result\n        test_case_generator_results.append(f\"assert solution.minimumDeleteSum('{s1}', '{s2}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.minimumDeleteSum('qsvv', 'hhvsjkcbyj') == 1306\nassert solution.minimumDeleteSum('ihbq', 'akwy') == 864\nassert solution.minimumDeleteSum('j', 'xsyaxorsur') == 1250\nassert solution.minimumDeleteSum('kbqnobwpby', 'ofwndi') == 1274\nassert solution.minimumDeleteSum('bthktne', 'vqljpiui') == 1636\nassert solution.minimumDeleteSum('mg', 'cuu') == 545\nassert solution.minimumDeleteSum('nst', 'ycqfmg') == 988\nassert solution.minimumDeleteSum('mfjcnnjdc', 'fxcjlbjytf') == 1391\nassert solution.minimumDeleteSum('av', 'fg') == 420\nassert solution.minimumDeleteSum('cwybrvbz', 'ndabbnsdtw') == 1560\nassert solution.minimumDeleteSum('iqtys', 'bbitbcm') == 851\nassert solution.minimumDeleteSum('lehnzedew', 'idmpluyj') == 1628\nassert solution.minimumDeleteSum('wkziu', 'd') == 670\nassert solution.minimumDeleteSum('s', 'cfxcwgkbld') == 1170\nassert solution.minimumDeleteSum('iy', 'rrpeo') == 778\nassert solution.minimumDeleteSum('qdwc', 'bpz') == 763\nassert solution.minimumDeleteSum('oug', 'hwgyrgxt') == 1025\nassert solution.minimumDeleteSum('k', 'jztjv') == 675\nassert solution.minimumDeleteSum('ieerlpzfrj', 'bpwfscy') == 1423\nassert solution.minimumDeleteSum('y', 'dvir') == 558\nassert solution.minimumDeleteSum('cbgg', 'nywxeycr') == 1110\nassert solution.minimumDeleteSum('g', 'wjexlain') == 969\nassert solution.minimumDeleteSum('xlk', 'vdg') == 656\nassert solution.minimumDeleteSum('hfuuktl', 'pumkwgijdr') == 1415\nassert solution.minimumDeleteSum('cczru', 'p') == 663\nassert solution.minimumDeleteSum('ebzmo', 'aulh') == 967\nassert solution.minimumDeleteSum('siopbghdwr', 'hxw') == 978\nassert solution.minimumDeleteSum('dugsy', 's') == 441\nassert solution.minimumDeleteSum('xiw', 'mtbxlxghzb') == 1202\nassert solution.minimumDeleteSum('jhze', 'jlnijkk') == 970\nassert solution.minimumDeleteSum('mk', 'vpb') == 544\nassert solution.minimumDeleteSum('grfg', 'zjnglkojif') == 1092\nassert solution.minimumDeleteSum('bzwihs', 'tzmmwbaid') == 946\nassert solution.minimumDeleteSum('erdafte', 'cca') == 832\nassert solution.minimumDeleteSum('xwnp', 'nwdwvrcup') == 1007\nassert solution.minimumDeleteSum('v', 'xqpzzvli') == 802\nassert solution.minimumDeleteSum('ochtzfew', 'ptqgpkh') == 1409\nassert solution.minimumDeleteSum('bwlkucslf', 'quwwphjls') == 1302\nassert solution.minimumDeleteSum('bri', 'jfeydae') == 1045\nassert solution.minimumDeleteSum('rqbbkmwylj', 'uericjtfsu') == 1745\nassert solution.minimumDeleteSum('khuvoufk', 'tvixhmqpd') == 1644\nassert solution.minimumDeleteSum('uj', 'sfohtho') == 986\nassert solution.minimumDeleteSum('ifltdgblvv', 'bcwksmdkzf') == 1950\nassert solution.minimumDeleteSum('hpsirgv', 'vuim') == 984\nassert solution.minimumDeleteSum('xmvidlrca', 'l') == 862\nassert solution.minimumDeleteSum('yygdnmoym', 'cnryn') == 1097\nassert solution.minimumDeleteSum('iv', 'iwb') == 335\nassert solution.minimumDeleteSum('zn', 'o') == 343\nassert solution.minimumDeleteSum('ilmom', 'qdshky') == 1202\nassert solution.minimumDeleteSum('ythhqg', 'repmp') == 1209\nassert solution.minimumDeleteSum('rmqf', 'ixmteu') == 888\nassert solution.minimumDeleteSum('tfh', 'auj') == 642\nassert solution.minimumDeleteSum('qugayp', 'kdziz') == 1219\nassert solution.minimumDeleteSum('c', 'tgydkyei') == 973\nassert solution.minimumDeleteSum('pmfvrp', 'd') == 767\nassert solution.minimumDeleteSum('ejtwl', 'nczvth') == 987\nassert solution.minimumDeleteSum('qkqx', 'ai') == 655\nassert solution.minimumDeleteSum('qcro', 'qzecjwcavy') == 1108\nassert solution.minimumDeleteSum('tmzop', 'cxqyr') == 1137\nassert solution.minimumDeleteSum('aotwqudjf', 'bemhctqru') == 1260\nassert solution.minimumDeleteSum('hvv', 'fdzrthfg') == 995\nassert solution.minimumDeleteSum('gxbyri', 'hqp') == 990\nassert solution.minimumDeleteSum('nwss', 'o') == 570\nassert solution.minimumDeleteSum('xlh', 'jjtto') == 887\nassert solution.minimumDeleteSum('hnw', 'uqavzsctiy') == 1456\nassert solution.minimumDeleteSum('e', 'rbpihb') == 732\nassert solution.minimumDeleteSum('cmkdhnimif', 'znouj') == 1396\nassert solution.minimumDeleteSum('qhu', 'bqjn') == 535\nassert solution.minimumDeleteSum('cctmbxui', 'cy') == 885\nassert solution.minimumDeleteSum('d', 'xyike') == 654\nassert solution.minimumDeleteSum('ldhivfuvj', 'kddvljhef') == 1276\nassert solution.minimumDeleteSum('nu', 'gqzcr') == 778\nassert solution.minimumDeleteSum('gbgzyeo', 'qmtucuqokk') == 1646\nassert solution.minimumDeleteSum('cfwvq', 'rdhgzm') == 1203\nassert solution.minimumDeleteSum('wxejifhqsd', 'ywqie') == 1180\nassert solution.minimumDeleteSum('qgazqvylvy', 'pxzefcu') == 1663\nassert solution.minimumDeleteSum('ksnrkw', 'xlww') == 900\nassert solution.minimumDeleteSum('gixvk', 'ign') == 661\nassert solution.minimumDeleteSum('rnaatuv', 'xpwamky') == 1360\nassert solution.minimumDeleteSum('e', 'tqhg') == 537\nassert solution.minimumDeleteSum('fic', 'wxnc') == 556\nassert solution.minimumDeleteSum('ccokhmo', 'fogxcekutw') == 1399\nassert solution.minimumDeleteSum('j', 'xktpnz') == 793\nassert solution.minimumDeleteSum('rezpo', 'rfqvo') == 668\nassert solution.minimumDeleteSum('otlzq', 'psmv') == 1024\nassert solution.minimumDeleteSum('kcqoxadj', 'ohgwld') == 1076\nassert solution.minimumDeleteSum('mlflxlqom', 'btw') == 1321\nassert solution.minimumDeleteSum('fkinfoc', 'nvnho') == 847\nassert solution.minimumDeleteSum('il', 'adznzo') == 875\nassert solution.minimumDeleteSum('ngma', 'frfe') == 838\nassert solution.minimumDeleteSum('enmgnuhof', 'l') == 1075\nassert solution.minimumDeleteSum('easfumypp', 'd') == 1086\nassert solution.minimumDeleteSum('ldpinpntnm', 'dznoblbh') == 1523\nassert solution.minimumDeleteSum('cfcrbbk', 'uxpji') == 1277\nassert solution.minimumDeleteSum('cpjlihlwg', 'u') == 1081\nassert solution.minimumDeleteSum('gksuza', 'j') == 767\nassert solution.minimumDeleteSum('sfiexxcaef', 'rbeiikgo') == 1696\nassert solution.minimumDeleteSum('zhlyhg', 'ulegrpks') == 1117\nassert solution.minimumDeleteSum('gku', 'hb') == 529\nassert solution.minimumDeleteSum('unuwnosp', 'azvlfltkd') == 1889",
  "inefficient_solution": "class Solution:\n    def minimumDeleteSum(self, s1: str, s2: str) -> int:\n        m, n = len(s1), len(s2)\n        dp = [[[0 for _ in range(n + 1)] for _ in range(m + 1)] for _ in range(2)]\n        for _ in range(2):\n            for i in range(m + 1):\n                for j in range(n + 1):\n                    if i == 0:\n                        dp[_][i][j] = dp[_][i][j - 1] + ord(s2[j - 1]) if j > 0 else 0\n                    elif j == 0:\n                        dp[_][i][j] = dp[_][i - 1][j] + ord(s1[i - 1]) if i > 0 else 0\n                    elif s1[i - 1] == s2[j - 1]:\n                        dp[_][i][j] = dp[_ ^ 1][i - 1][j - 1]\n                    else:\n                        dp[_][i][j] = min(\n                            dp[_][i - 1][j] + ord(s1[i - 1]), dp[_][i][j - 1] + ord(s2[j - 1])\n                        )\n        return dp[1][m][n]",
  "is_python": true
}