{
  "problem_idx": 2576,
  "task_name": "Find the Maximum Number of Marked Indices",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`.\n\n\nInitially, all of the indices are unmarked. You are allowed to make this operation any number of times:\n\n\n* Pick two **different unmarked** indices `i` and `j` such that `2 * nums[i] <= nums[j]`, then mark `i` and `j`.\n\n\nReturn *the maximum possible number of marked indices in `nums` using the above operation any number of times*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,5,2,4]\n**Output:** 2\n**Explanation:** In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.\nIt can be shown that there's no other valid operation so the answer is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [9,2,5,4]\n**Output:** 4\n**Explanation:** In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.\nIn the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.\nSince there is no other operation, the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [7,6,8]\n**Output:** 0\n**Explanation:** There is no valid operation to do, so the answer is 0.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n",
  "canonical_solution": "class Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        i, j = 0, (n + 1) // 2\n        ans = 0\n        while j < n:\n            while j < n and nums[i] * 2 > nums[j]:\n                j += 1\n            if j < n:\n                ans += 2\n            i, j = i + 1, j + 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxNumOfMarkedIndices(self, nums):\n        nums.sort()\n        n = len(nums)\n        i, j = 0, (n + 1) // 2\n        ans = 0\n        while j < n:\n            while j < n and nums[i] * 2 > nums[j]:\n                j += 1\n            if j < n:\n                ans += 2\n            i, j = i + 1, j + 1\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxNumOfMarkedIndices(nums)\n\n    return nums, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxNumOfMarkedIndices(nums) == expected_result\n        print(f\"assert solution.maxNumOfMarkedIndices({nums}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.maxNumOfMarkedIndices({nums}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.maxNumOfMarkedIndices([26, 27, 28, 50, 54, 65, 90, 92]) == 6\nassert solution.maxNumOfMarkedIndices([31, 35, 55, 73, 83]) == 4\nassert solution.maxNumOfMarkedIndices([35, 53, 68, 75, 90, 93]) == 2\nassert solution.maxNumOfMarkedIndices([1, 12, 46, 65, 66, 88, 90]) == 4\nassert solution.maxNumOfMarkedIndices([18, 59, 80, 81]) == 2\nassert solution.maxNumOfMarkedIndices([7, 36, 74, 91]) == 4\nassert solution.maxNumOfMarkedIndices([6, 22, 35, 51]) == 4\nassert solution.maxNumOfMarkedIndices([12, 15, 27, 61, 64, 97]) == 6\nassert solution.maxNumOfMarkedIndices([18, 23, 24, 43, 58, 77, 86]) == 6\nassert solution.maxNumOfMarkedIndices([17, 32]) == 0\nassert solution.maxNumOfMarkedIndices([23, 43, 52, 77]) == 2\nassert solution.maxNumOfMarkedIndices([6, 11, 17, 35, 57, 69, 85]) == 6\nassert solution.maxNumOfMarkedIndices([26, 76]) == 2\nassert solution.maxNumOfMarkedIndices([6, 18, 21, 25, 58, 70, 78, 85, 89]) == 8\nassert solution.maxNumOfMarkedIndices([13, 17, 18, 40, 71]) == 4\nassert solution.maxNumOfMarkedIndices([14, 22, 25, 26, 41, 56, 63, 71, 76]) == 8\nassert solution.maxNumOfMarkedIndices([3, 38, 47, 63, 64]) == 2\nassert solution.maxNumOfMarkedIndices([3, 15, 53, 74, 82, 91]) == 4\nassert solution.maxNumOfMarkedIndices([4, 10, 24, 44, 60, 65, 67, 74, 93, 96]) == 8\nassert solution.maxNumOfMarkedIndices([28, 46, 55, 85, 94]) == 4\nassert solution.maxNumOfMarkedIndices([23, 64]) == 2\nassert solution.maxNumOfMarkedIndices([26, 38, 40, 49, 56, 63, 67, 82, 90, 96]) == 6\nassert solution.maxNumOfMarkedIndices([4, 7, 15, 61, 68, 76, 88, 99]) == 6\nassert solution.maxNumOfMarkedIndices([6, 14, 24, 60, 64, 78]) == 6\nassert solution.maxNumOfMarkedIndices([11, 19, 23, 24, 35]) == 2\nassert solution.maxNumOfMarkedIndices([2, 21, 44, 55, 69, 80, 98]) == 6\nassert solution.maxNumOfMarkedIndices([11, 43, 46, 50, 51, 57, 62, 96]) == 4\nassert solution.maxNumOfMarkedIndices([34, 38, 92]) == 2\nassert solution.maxNumOfMarkedIndices([24, 56]) == 2\nassert solution.maxNumOfMarkedIndices([1, 69, 71]) == 2\nassert solution.maxNumOfMarkedIndices([34, 35]) == 0\nassert solution.maxNumOfMarkedIndices([34, 45, 51, 95]) == 2\nassert solution.maxNumOfMarkedIndices([1, 10, 13, 26]) == 4\nassert solution.maxNumOfMarkedIndices([29, 79]) == 2\nassert solution.maxNumOfMarkedIndices([8, 16, 21, 54]) == 4\nassert solution.maxNumOfMarkedIndices([3, 4, 7, 8, 27, 36, 49, 64, 68, 81]) == 10\nassert solution.maxNumOfMarkedIndices([17, 19, 21, 26, 42, 59, 79, 97, 99]) == 8\nassert solution.maxNumOfMarkedIndices([55, 83, 98]) == 0\nassert solution.maxNumOfMarkedIndices([23, 25, 69, 71]) == 4\nassert solution.maxNumOfMarkedIndices([4, 5, 7, 8, 15, 17, 30, 67, 68, 94]) == 10\nassert solution.maxNumOfMarkedIndices([5, 12, 44]) == 2\nassert solution.maxNumOfMarkedIndices([5, 8, 16, 21, 69, 72, 81, 99]) == 8\nassert solution.maxNumOfMarkedIndices([2, 15, 16, 17, 32, 39, 51, 82, 88]) == 8\nassert solution.maxNumOfMarkedIndices([11, 13, 24, 39, 57, 79, 89]) == 6\nassert solution.maxNumOfMarkedIndices([13, 43, 47, 55, 63, 74, 83]) == 2\nassert solution.maxNumOfMarkedIndices([10, 13, 29, 45, 63, 66, 82, 92, 97, 99]) == 8\nassert solution.maxNumOfMarkedIndices([8, 11, 21, 35, 48, 57, 62, 73]) == 8\nassert solution.maxNumOfMarkedIndices([10, 13, 18, 32, 39, 40, 48, 59, 88, 94]) == 10\nassert solution.maxNumOfMarkedIndices([21, 22, 40, 47, 52, 72, 85, 87]) == 6\nassert solution.maxNumOfMarkedIndices([11, 17, 24, 40, 45, 61, 66, 82, 100]) == 8\nassert solution.maxNumOfMarkedIndices([14, 15, 17, 26, 36, 47, 70, 91]) == 8\nassert solution.maxNumOfMarkedIndices([29, 34]) == 0\nassert solution.maxNumOfMarkedIndices([18, 46]) == 2\nassert solution.maxNumOfMarkedIndices([42, 50, 56, 57, 72, 78, 81]) == 0\nassert solution.maxNumOfMarkedIndices([16, 38, 42, 54, 69]) == 2\nassert solution.maxNumOfMarkedIndices([1, 39, 67, 68, 93, 95]) == 4\nassert solution.maxNumOfMarkedIndices([9, 26, 38, 43, 55, 68, 74, 94]) == 6\nassert solution.maxNumOfMarkedIndices([19, 36, 39, 51]) == 2\nassert solution.maxNumOfMarkedIndices([5, 7, 24, 31, 49, 54, 92, 100]) == 8\nassert solution.maxNumOfMarkedIndices([19, 22, 43, 60, 71, 72, 75, 77, 84, 98]) == 6\nassert solution.maxNumOfMarkedIndices([2, 18, 24, 43, 55, 73, 76, 79, 81, 87]) == 8\nassert solution.maxNumOfMarkedIndices([23, 26, 50, 63, 81]) == 4\nassert solution.maxNumOfMarkedIndices([20, 30, 35, 47, 54, 57, 60, 72, 83, 100]) == 8\nassert solution.maxNumOfMarkedIndices([29, 30, 43, 61, 73]) == 4\nassert solution.maxNumOfMarkedIndices([49, 74]) == 0\nassert solution.maxNumOfMarkedIndices([48, 51, 60]) == 0\nassert solution.maxNumOfMarkedIndices([4, 12, 35, 56, 65, 68, 75, 96]) == 6\nassert solution.maxNumOfMarkedIndices([14, 50, 91]) == 2\nassert solution.maxNumOfMarkedIndices([93, 98]) == 0\nassert solution.maxNumOfMarkedIndices([10, 35, 46, 73, 76, 91]) == 4\nassert solution.maxNumOfMarkedIndices([13, 25, 41, 44, 58, 98]) == 6\nassert solution.maxNumOfMarkedIndices([9, 28, 38, 45, 55, 57, 84, 86, 87, 97]) == 8\nassert solution.maxNumOfMarkedIndices([33, 41, 46, 59, 69, 76, 85]) == 4\nassert solution.maxNumOfMarkedIndices([20, 31, 54, 55, 64]) == 4\nassert solution.maxNumOfMarkedIndices([7, 26, 31, 53]) == 4\nassert solution.maxNumOfMarkedIndices([28, 34, 48, 61, 64, 66, 72]) == 4\nassert solution.maxNumOfMarkedIndices([24, 38, 39, 67, 70]) == 2\nassert solution.maxNumOfMarkedIndices([34, 54, 82, 95, 100]) == 2\nassert solution.maxNumOfMarkedIndices([20, 26, 32, 56, 60, 71, 76, 83, 90, 96]) == 6\nassert solution.maxNumOfMarkedIndices([47, 59, 66]) == 0\nassert solution.maxNumOfMarkedIndices([37, 68]) == 0\nassert solution.maxNumOfMarkedIndices([11, 22, 41, 48, 75]) == 4\nassert solution.maxNumOfMarkedIndices([42, 45, 48, 49, 72, 82, 84, 90]) == 4\nassert solution.maxNumOfMarkedIndices([32, 55, 72, 92]) == 2\nassert solution.maxNumOfMarkedIndices([6, 15, 75, 79, 82, 92]) == 4\nassert solution.maxNumOfMarkedIndices([4, 5, 20, 23, 36, 37, 39, 61, 81, 87]) == 10\nassert solution.maxNumOfMarkedIndices([1, 7, 12, 38, 48, 54, 78, 81, 96]) == 8\nassert solution.maxNumOfMarkedIndices([16, 19, 35, 39, 47, 65, 70, 76]) == 6\nassert solution.maxNumOfMarkedIndices([23, 29, 41, 51, 75, 86]) == 6\nassert solution.maxNumOfMarkedIndices([2, 27, 28, 81]) == 4\nassert solution.maxNumOfMarkedIndices([8, 15]) == 0\nassert solution.maxNumOfMarkedIndices([4, 34, 42, 64, 73, 84]) == 6\nassert solution.maxNumOfMarkedIndices([4, 8, 15, 18, 45, 55, 66, 86]) == 8\nassert solution.maxNumOfMarkedIndices([19, 20]) == 0\nassert solution.maxNumOfMarkedIndices([47, 92]) == 0\nassert solution.maxNumOfMarkedIndices([7, 13, 20, 44, 69, 79, 100]) == 6\nassert solution.maxNumOfMarkedIndices([24, 29, 30, 49, 84, 87]) == 6\nassert solution.maxNumOfMarkedIndices([14, 46, 65]) == 2\nassert solution.maxNumOfMarkedIndices([9, 10, 21, 39, 47, 52, 66, 90]) == 8\nassert solution.maxNumOfMarkedIndices([1, 27, 43, 65]) == 4",
  "inefficient_solution": "class Solution:\n    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:\n        nums_copy = nums[:]\n        nums_copy.sort()\n        n = len(nums_copy)\n        marked = [False] * n\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if 2 * nums_copy[i] <= nums_copy[j]:\n                    marked[i] = True\n                    marked[j] = True\n                    ans += 2\n                    break\n            if marked[i]:\n                break\n        return ans",
  "is_python": true
}