{
  "problem_idx": 643,
  "task_name": "Maximum Average Subarray I",
  "markdown_description": "\nYou are given an integer array `nums` consisting of `n` elements, and an integer `k`.\n\n\nFind a contiguous subarray whose **length is equal to** `k` that has the maximum average value and return *this value*. Any answer with a calculation error less than `10-5` will be accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,12,-5,-6,50,3], k = 4\n**Output:** 12.75000\n**Explanation:** Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5], k = 1\n**Output:** 5.00000\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= k <= n <= 105`\n* `-104 <= nums[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        s = sum(nums[:k])\n        ans = s\n        for i in range(k, len(nums)):\n            s += nums[i] - nums[i - k]\n            ans = max(ans, s)\n        return ans / k\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findMaxAverage(self, nums, k):\n        s = sum(nums[:k])\n        ans = s\n        for i in range(k, len(nums)):\n            s += nums[i] - nums[i - k]\n            ans = max(ans, s)\n        return ans / k\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(-10000, 10001), random.randint(1, 10))\n\n    # Generate a random value for k\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMaxAverage(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert abs(solution.findMaxAverage(nums, k) - expected_result) < 10 ** -5\n        print(f\"assert abs(solution.findMaxAverage({nums}, {k}) - {expected_result}) < 10 ** -5\")\n        test_case_generator_results.append(f\"assert abs(solution.findMaxAverage({nums}, {k}) - {expected_result}) < 10 ** -5\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert abs(solution.findMaxAverage([-678, -9470, 6128], 2) - -1671.0) < 10 ** -5\nassert abs(solution.findMaxAverage([2510, -591, 9568, -1895, 1721, -4821, -6264], 2) - 4488.5) < 10 ** -5\nassert abs(solution.findMaxAverage([9355, 8697, 7897, 5605, -6575, -7667, -5755, -5262], 1) - 9355.0) < 10 ** -5\nassert abs(solution.findMaxAverage([7297, 1630, 3669, -7099, 3944, -5763, 191, -4730, -6446, -4648], 4) - 1374.25) < 10 ** -5\nassert abs(solution.findMaxAverage([-9831, 5061, 7293], 2) - 6177.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-135, -7683, -526, 1236], 2) - 355.0) < 10 ** -5\nassert abs(solution.findMaxAverage([1270, 4204, -1036, -8239, 4724], 1) - 4724.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-1248], 1) - -1248.0) < 10 ** -5\nassert abs(solution.findMaxAverage([2499, -4629, -4163, -2592, 7543, 5271], 1) - 7543.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-6404, -1904, -4510, -4968, -8439, 5094], 1) - 5094.0) < 10 ** -5\nassert abs(solution.findMaxAverage([7821, 1274, 8592, -5106, -6706], 2) - 4933.0) < 10 ** -5\nassert abs(solution.findMaxAverage([1015, 5590, 6655, -4501, -623, -9633, -5978], 3) - 4420.0) < 10 ** -5\nassert abs(solution.findMaxAverage([3325, 6353, -4481, 4924, -9832, -1470, 7768, -573, 5347, 1544], 9) - 1262.3333333333333) < 10 ** -5\nassert abs(solution.findMaxAverage([4628, -1893, 3865, 8881], 3) - 3617.6666666666665) < 10 ** -5\nassert abs(solution.findMaxAverage([-7466], 1) - -7466.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-3249, 4846, -6979, -3554], 1) - 4846.0) < 10 ** -5\nassert abs(solution.findMaxAverage([8379, -4082, -8739, 844, -3624], 5) - -1444.4) < 10 ** -5\nassert abs(solution.findMaxAverage([-9490, -2427, -7050, 8786, 2749, -4892, 3418, -1894, 339], 3) - 2214.3333333333335) < 10 ** -5\nassert abs(solution.findMaxAverage([7308], 1) - 7308.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-3454, -4172, -9882, 272, -4228, -3064], 3) - -2340.0) < 10 ** -5\nassert abs(solution.findMaxAverage([1941, -7435, -3244, -8481, 5121, 60, 8508], 2) - 4284.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-9442, 5775, 4856, -4308, -2879, 2541, -8293, 5486, -5312], 3) - 2107.6666666666665) < 10 ** -5\nassert abs(solution.findMaxAverage([8182, -9473, 2856], 1) - 8182.0) < 10 ** -5\nassert abs(solution.findMaxAverage([5423, 7152], 2) - 6287.5) < 10 ** -5\nassert abs(solution.findMaxAverage([-5973, -258, -4614, -7865, -6873, -9578, -4215, 995, -3352, 146], 9) - -3957.1111111111113) < 10 ** -5\nassert abs(solution.findMaxAverage([-4560, -5497, 8745, 18, -762, -153, -4700, 2495, 9616, -9205], 3) - 2667.0) < 10 ** -5\nassert abs(solution.findMaxAverage([695, 9361], 1) - 9361.0) < 10 ** -5\nassert abs(solution.findMaxAverage([3285, -1348, -483, -9361, 5465, 2175, 7943, 9682, 1070], 5) - 5267.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-2893, 8837, 2943, 5103, 5787, -3338], 6) - 2739.8333333333335) < 10 ** -5\nassert abs(solution.findMaxAverage([639, -3489, -7719], 3) - -3523.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-2953], 1) - -2953.0) < 10 ** -5\nassert abs(solution.findMaxAverage([111, -4605, -4043, 6024, -4426, 1647], 6) - -882.0) < 10 ** -5\nassert abs(solution.findMaxAverage([3932, 2263, -7653, -5939, -7584, -6799], 4) - -1849.25) < 10 ** -5\nassert abs(solution.findMaxAverage([-4891, -2585, -1485, -6105, 7537], 5) - -1505.8) < 10 ** -5\nassert abs(solution.findMaxAverage([5952, 6032, -7380, 9534, 6814, -9867, -4520, -4561, -9901, 2804], 10) - -509.3) < 10 ** -5\nassert abs(solution.findMaxAverage([-9902, 2966, 1455, 1583, -7576, 9060, -1110, -6194, -7507], 8) - -915.375) < 10 ** -5\nassert abs(solution.findMaxAverage([-7544, 7833, 1123, 1077, 7958, 8273, -1426], 1) - 8273.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-853], 1) - -853.0) < 10 ** -5\nassert abs(solution.findMaxAverage([33, 847, -8714, 3076, -7131, -6153, -2923], 3) - -1597.0) < 10 ** -5\nassert abs(solution.findMaxAverage([9872, -5693, 9177, 916, -2628], 4) - 3568.0) < 10 ** -5\nassert abs(solution.findMaxAverage([2853, 5221, -6166, -134, -7643], 5) - -1173.8) < 10 ** -5\nassert abs(solution.findMaxAverage([5439, -8791], 2) - -1676.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-363], 1) - -363.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-656], 1) - -656.0) < 10 ** -5\nassert abs(solution.findMaxAverage([2229, -5171, -6692, -1516, 9885], 5) - -253.0) < 10 ** -5\nassert abs(solution.findMaxAverage([7880, -153], 2) - 3863.5) < 10 ** -5\nassert abs(solution.findMaxAverage([-1973], 1) - -1973.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-4066, -34, -4436, -8127], 1) - -34.0) < 10 ** -5\nassert abs(solution.findMaxAverage([4914, 4670, 8804, 8131, 2073, 9747, -520], 1) - 9747.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-2105, 478, -9930, -6834], 1) - 478.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-4858, -5450, 6504, -887, -2632], 3) - 995.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-576, 7804, -8221, -768, -8102, 9798, 7256, 6048, 4918], 1) - 9798.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-8588, 770], 1) - 770.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-9184, -6622, 4913, 8288, -8238, 6596, 1462, 116], 3) - 2724.6666666666665) < 10 ** -5\nassert abs(solution.findMaxAverage([4316, -6865, 2027, -8001], 4) - -2130.75) < 10 ** -5\nassert abs(solution.findMaxAverage([5296, 9937, 5850, 8038, 6166, 1954, -6236], 7) - 4429.285714285715) < 10 ** -5\nassert abs(solution.findMaxAverage([8075, 4401, -5224], 2) - 6238.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-771, -7793, -9500, 9982, 8445, 4104, 6390], 1) - 9982.0) < 10 ** -5\nassert abs(solution.findMaxAverage([2875, -501, -8195, -4611, -391], 4) - -2608.0) < 10 ** -5\nassert abs(solution.findMaxAverage([9842, -3279, -3139, -3606, -6662], 2) - 3281.5) < 10 ** -5\nassert abs(solution.findMaxAverage([-5626, -9592, 1981, 8912, -594], 1) - 8912.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-9006], 1) - -9006.0) < 10 ** -5\nassert abs(solution.findMaxAverage([2211, 1001, -3438, 7837, -5787, -2952, 7604, 7241], 6) - 1750.8333333333333) < 10 ** -5\nassert abs(solution.findMaxAverage([9607], 1) - 9607.0) < 10 ** -5\nassert abs(solution.findMaxAverage([3097, 3320, -3333, -564, -3965], 2) - 3208.5) < 10 ** -5\nassert abs(solution.findMaxAverage([2985, -9486, -2965, 4083, 9961, 9484, -4144, 9792, 6774], 3) - 7842.666666666667) < 10 ** -5\nassert abs(solution.findMaxAverage([3547, 9465, 2710, 5832, 7086, -1513], 6) - 4521.166666666667) < 10 ** -5\nassert abs(solution.findMaxAverage([-4388, -5578, 9154, -4817, -2115, 9811, -253, 7353, 9436], 7) - 4081.285714285714) < 10 ** -5\nassert abs(solution.findMaxAverage([8370], 1) - 8370.0) < 10 ** -5\nassert abs(solution.findMaxAverage([8941, 1729, -5648, -6784, -4079, -8162], 2) - 5335.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-7315], 1) - -7315.0) < 10 ** -5\nassert abs(solution.findMaxAverage([6191, 9184, 7670, 5829, 8738, 7873], 6) - 7580.833333333333) < 10 ** -5\nassert abs(solution.findMaxAverage([-7205, 2282, -7328, 4688, 2825, 1742, 5613, -1656], 6) - 1637.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-4449], 1) - -4449.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-6246], 1) - -6246.0) < 10 ** -5\nassert abs(solution.findMaxAverage([9385], 1) - 9385.0) < 10 ** -5\nassert abs(solution.findMaxAverage([3056, -4331, 7500, 1100, 6335, -8007, -572, -9196, -9176, 8192], 10) - -509.9) < 10 ** -5\nassert abs(solution.findMaxAverage([-2021], 1) - -2021.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-7965, 7310, -212, -2799], 1) - 7310.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-7880, -6943, 1193, 7127, 5868, 3521, -5432, -6615], 2) - 6497.5) < 10 ** -5\nassert abs(solution.findMaxAverage([-9263, 1067, 4790, 2040, 9847, -6375, -5497, -7050, -1376, -7830], 8) - -319.25) < 10 ** -5\nassert abs(solution.findMaxAverage([7226, -9814, -8929], 3) - -3839.0) < 10 ** -5\nassert abs(solution.findMaxAverage([2561], 1) - 2561.0) < 10 ** -5\nassert abs(solution.findMaxAverage([1877, -1430, 3230, 139, 5094, -5638, 3003, 7382, -4847, 8254], 3) - 3596.3333333333335) < 10 ** -5\nassert abs(solution.findMaxAverage([-7036, -5535, -7430, -347, -8496, -2720, 5669, 6808, -962], 2) - 6238.5) < 10 ** -5\nassert abs(solution.findMaxAverage([-6392, -6692, 9140], 2) - 1224.0) < 10 ** -5\nassert abs(solution.findMaxAverage([3808, -2390, 6595, -2240, 5186, 4893], 4) - 3608.5) < 10 ** -5\nassert abs(solution.findMaxAverage([-7414, -9673, 8704], 1) - 8704.0) < 10 ** -5\nassert abs(solution.findMaxAverage([3110, -8817, 4025, -1455], 2) - 1285.0) < 10 ** -5\nassert abs(solution.findMaxAverage([3668, -4784, -6877, 8578, -3234, 93], 3) - 1812.3333333333333) < 10 ** -5\nassert abs(solution.findMaxAverage([5057, -8104, 5351, 6478, 3184], 2) - 5914.5) < 10 ** -5\nassert abs(solution.findMaxAverage([5730, -7417, 9563], 1) - 9563.0) < 10 ** -5\nassert abs(solution.findMaxAverage([8895, 9684, -2284, 8521, -949, -4056], 1) - 9684.0) < 10 ** -5\nassert abs(solution.findMaxAverage([9630, -6586, -3916], 2) - 1522.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-4403, 6639, -3960, -4125, -8345, 1645], 3) - -482.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-2665, 5974, -8044], 1) - 5974.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-1762, 8995, 8269, -1038, 5620, 5607], 6) - 4281.833333333333) < 10 ** -5\nassert abs(solution.findMaxAverage([7179, -3731, 7263, 5434, -2513], 3) - 3570.3333333333335) < 10 ** -5\nassert abs(solution.findMaxAverage([352, -6769, 8400, 1797], 4) - 945.0) < 10 ** -5\nassert abs(solution.findMaxAverage([-9820, -2597, 8771, 9304, -7203, 1854, 4166, 2787, -4429, 7454], 9) - 2234.1111111111113) < 10 ** -5",
  "inefficient_solution": "class Solution:\n    def findMaxAverage(self, nums: List[int], k: int) -> float:\n        total = [0] * len(nums)\n        max_sum = [0] * len(nums)\n        max_avg = [0] * len(nums)\n        total[0] = nums[0]\n        for i in range(1, len(nums)):\n            total[i] = total[i-1] + nums[i]\n        for i in range(k-1, len(nums)):\n            max_sum[i] = max(total[i-k+1:i+1])\n        for i in range(len(nums)):\n            if i >= k-1:\n                max_avg[i] = max_sum[i] / k\n        return max(max_avg)",
  "is_python": true
}