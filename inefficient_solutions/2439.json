{
  "problem_idx": 2439,
  "task_name": "Minimize Maximum of Array",
  "markdown_description": "\nYou are given a **0-indexed** array `nums` comprising of `n` non-negative integers.\n\n\nIn one operation, you must:\n\n\n* Choose an integer `i` such that `1 <= i < n` and `nums[i] > 0`.\n* Decrease `nums[i]` by 1.\n* Increase `nums[i - 1]` by 1.\n\n\nReturn *the **minimum** possible value of the **maximum** integer of* `nums` *after performing **any** number of operations*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,7,1,6]\n**Output:** 5\n**Explanation:**\nOne set of optimal operations is as follows:\n1. Choose i = 1, and nums becomes [4,6,1,6].\n2. Choose i = 3, and nums becomes [4,6,2,5].\n3. Choose i = 1, and nums becomes [5,5,2,5].\nThe maximum integer of nums is 5. It can be shown that the maximum number cannot be less than 5.\nTherefore, we return 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,1]\n**Output:** 10\n**Explanation:**\nIt is optimal to leave nums as is, and since 10 is the maximum value, we return 10.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `2 <= n <= 105`\n* `0 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimizeArrayValue(self, nums: List[int]) -> int:\n        def check(mx):\n            d = 0\n            for x in nums[:0:-1]:\n                d = max(0, d + x - mx)\n            return nums[0] + d <= mx\n\n        left, right = 0, max(nums)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimizeArrayValue(self, nums):\n        def check(mx):\n            d = 0\n            for x in nums[:0:-1]:\n                d = max(0, d + x - mx)\n            return nums[0] + d <= mx\n\n        left, right = 0, max(nums)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimizeArrayValue(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimizeArrayValue(nums) == expected_result\n        print(f\"assert solution.minimizeArrayValue({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimizeArrayValue({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimizeArrayValue([60, 37, 69, 9, 24, 58]) == 60\nassert solution.minimizeArrayValue([17, 5, 51]) == 25\nassert solution.minimizeArrayValue([2, 59, 78, 42, 71, 1, 9, 84]) == 51\nassert solution.minimizeArrayValue([7, 89, 28, 100]) == 56\nassert solution.minimizeArrayValue([32, 77]) == 55\nassert solution.minimizeArrayValue([48, 98, 26, 35, 42, 78, 10]) == 73\nassert solution.minimizeArrayValue([100, 79, 50, 52, 12, 4]) == 100\nassert solution.minimizeArrayValue([20, 6, 8, 51, 1, 2, 26, 41]) == 22\nassert solution.minimizeArrayValue([64, 83, 67]) == 74\nassert solution.minimizeArrayValue([74, 45, 15]) == 74\nassert solution.minimizeArrayValue([64, 50, 65, 69, 2, 47, 93, 16, 77, 60]) == 64\nassert solution.minimizeArrayValue([15, 52, 88, 18, 19, 6, 10, 91, 92]) == 52\nassert solution.minimizeArrayValue([37, 87, 50, 15, 18, 5, 3]) == 62\nassert solution.minimizeArrayValue([76, 69, 46, 58, 15, 13, 32, 79, 94]) == 76\nassert solution.minimizeArrayValue([37, 13, 26, 46]) == 37\nassert solution.minimizeArrayValue([90, 14]) == 90\nassert solution.minimizeArrayValue([42, 4, 7, 85, 18]) == 42\nassert solution.minimizeArrayValue([86, 75, 30, 11, 29, 32, 64]) == 86\nassert solution.minimizeArrayValue([26, 61]) == 44\nassert solution.minimizeArrayValue([46, 2, 87, 21, 16, 58, 8, 83, 30, 100]) == 46\nassert solution.minimizeArrayValue([64, 58, 45, 27, 99, 55]) == 64\nassert solution.minimizeArrayValue([11, 23, 33, 22, 31, 16, 87, 2, 64, 10]) == 33\nassert solution.minimizeArrayValue([82, 4, 30, 55]) == 82\nassert solution.minimizeArrayValue([43, 88, 11, 18, 23, 39, 35, 68]) == 66\nassert solution.minimizeArrayValue([67, 93, 91, 11, 83, 98]) == 84\nassert solution.minimizeArrayValue([73, 77, 50, 38]) == 75\nassert solution.minimizeArrayValue([56, 15, 32, 54, 95, 53, 87, 6, 37]) == 56\nassert solution.minimizeArrayValue([84, 54, 24, 39, 40, 60, 21, 5, 10]) == 84\nassert solution.minimizeArrayValue([93, 87, 61, 3, 82, 90, 42, 32, 70]) == 93\nassert solution.minimizeArrayValue([44, 62, 90, 48, 43]) == 66\nassert solution.minimizeArrayValue([88, 21, 71, 36, 30, 86, 7, 63]) == 88\nassert solution.minimizeArrayValue([83, 71, 99, 5, 18, 69, 16, 32]) == 85\nassert solution.minimizeArrayValue([71, 100, 31, 69, 52, 1, 66, 21, 80, 58]) == 86\nassert solution.minimizeArrayValue([43, 40, 26, 38, 30]) == 43\nassert solution.minimizeArrayValue([16, 25, 41, 94, 82, 45, 68, 49, 100]) == 58\nassert solution.minimizeArrayValue([30, 70, 85]) == 62\nassert solution.minimizeArrayValue([45, 52, 21, 10, 68]) == 49\nassert solution.minimizeArrayValue([38, 26, 49, 1, 100, 92, 16, 90]) == 52\nassert solution.minimizeArrayValue([50, 16, 9, 41]) == 50\nassert solution.minimizeArrayValue([1, 88, 15, 95]) == 50\nassert solution.minimizeArrayValue([70, 62, 91, 2, 98, 64, 34, 4, 72]) == 75\nassert solution.minimizeArrayValue([1, 74, 93, 42, 25, 51, 8, 77, 40, 95]) == 56\nassert solution.minimizeArrayValue([61, 4, 75]) == 61\nassert solution.minimizeArrayValue([51, 3, 76]) == 51\nassert solution.minimizeArrayValue([34, 70]) == 52\nassert solution.minimizeArrayValue([81, 58, 71, 44, 23, 11, 46, 19, 40]) == 81\nassert solution.minimizeArrayValue([43, 7, 89, 88, 85, 50]) == 63\nassert solution.minimizeArrayValue([84, 22, 76]) == 84\nassert solution.minimizeArrayValue([50, 82, 81, 29, 52, 40, 38, 88]) == 71\nassert solution.minimizeArrayValue([54, 68, 30, 90, 28, 9, 58, 83]) == 61\nassert solution.minimizeArrayValue([87, 80, 1, 76, 96, 11, 42, 94]) == 87\nassert solution.minimizeArrayValue([64, 94, 67, 22, 3, 65]) == 79\nassert solution.minimizeArrayValue([20, 51, 83, 44]) == 52\nassert solution.minimizeArrayValue([65, 95, 34, 2]) == 80\nassert solution.minimizeArrayValue([86, 75, 9, 6, 1, 79]) == 86\nassert solution.minimizeArrayValue([4, 20, 73, 9, 31, 3]) == 33\nassert solution.minimizeArrayValue([17, 19, 99, 80, 75, 83, 34]) == 63\nassert solution.minimizeArrayValue([62, 25, 17, 12, 58, 100, 70, 65]) == 62\nassert solution.minimizeArrayValue([68, 55, 39, 95, 4, 79, 6, 56, 75]) == 68\nassert solution.minimizeArrayValue([5, 79]) == 42\nassert solution.minimizeArrayValue([5, 69, 57, 54]) == 47\nassert solution.minimizeArrayValue([1, 65, 21, 15, 20, 43, 2, 63, 16, 61]) == 33\nassert solution.minimizeArrayValue([56, 74, 41, 81, 50, 90]) == 66\nassert solution.minimizeArrayValue([60, 17, 83, 84]) == 61\nassert solution.minimizeArrayValue([13, 88, 30, 75, 45, 38, 62, 31]) == 52\nassert solution.minimizeArrayValue([76, 35, 86, 61, 80, 58, 12]) == 76\nassert solution.minimizeArrayValue([87, 65, 89, 72]) == 87\nassert solution.minimizeArrayValue([32, 84]) == 58\nassert solution.minimizeArrayValue([51, 82, 63]) == 67\nassert solution.minimizeArrayValue([3, 47, 5, 10, 76, 23]) == 29\nassert solution.minimizeArrayValue([46, 1]) == 46\nassert solution.minimizeArrayValue([69, 15, 35, 25]) == 69\nassert solution.minimizeArrayValue([68, 57, 96, 73]) == 74\nassert solution.minimizeArrayValue([74, 91, 95, 24, 28, 67, 71, 14, 68, 87]) == 87\nassert solution.minimizeArrayValue([98, 48, 52, 6, 90, 76]) == 98\nassert solution.minimizeArrayValue([34, 87, 65, 26, 33, 76, 45]) == 62\nassert solution.minimizeArrayValue([48, 76, 24, 35, 18, 91, 16, 89]) == 62\nassert solution.minimizeArrayValue([16, 81, 52]) == 50\nassert solution.minimizeArrayValue([63, 44, 6, 50, 48, 94, 64]) == 63\nassert solution.minimizeArrayValue([25, 67, 100]) == 64\nassert solution.minimizeArrayValue([97, 57, 68, 13, 2, 92]) == 97\nassert solution.minimizeArrayValue([100, 47, 93, 72, 45, 60]) == 100\nassert solution.minimizeArrayValue([98, 11, 41, 76]) == 98\nassert solution.minimizeArrayValue([76, 8, 20, 74, 48, 4, 43, 40, 23, 21]) == 76\nassert solution.minimizeArrayValue([43, 88, 40, 46, 31, 94, 98]) == 66\nassert solution.minimizeArrayValue([71, 20, 86, 82, 47, 48]) == 71\nassert solution.minimizeArrayValue([88, 18, 4, 55, 27]) == 88\nassert solution.minimizeArrayValue([34, 31, 24, 79, 78, 16, 76, 80, 53]) == 53\nassert solution.minimizeArrayValue([91, 1, 33, 8, 7, 49]) == 91\nassert solution.minimizeArrayValue([98, 95, 68, 33, 88, 85]) == 98\nassert solution.minimizeArrayValue([18, 61, 31, 6, 23, 88]) == 40\nassert solution.minimizeArrayValue([39, 9, 36]) == 39\nassert solution.minimizeArrayValue([39, 34, 74, 43, 47, 55]) == 49\nassert solution.minimizeArrayValue([44, 98, 95, 72, 97, 1]) == 82\nassert solution.minimizeArrayValue([70, 5]) == 70\nassert solution.minimizeArrayValue([67, 95, 39]) == 81\nassert solution.minimizeArrayValue([56, 8, 65, 12]) == 56\nassert solution.minimizeArrayValue([25, 98]) == 62\nassert solution.minimizeArrayValue([34, 63, 22, 80, 19, 21]) == 50\nassert solution.minimizeArrayValue([44, 70, 24, 23, 65]) == 57",
  "inefficient_solution": "class Solution:\n    def minimizeArrayValue(self, nums):\n        n = len(nums)\n        array = []\n        for i in range(n):\n            for j in range(nums[i]):\n                array.append(1)\n            array.append(nums[i])\n        \n        max_val = max(array)\n        for i in range(1, max_val + 1):\n            array = array.copy()\n            for j in range(n - 1):\n                if array[j] > 0:\n                    array[j] -= 1\n                    array[j + 1] += 1\n            max_val = max(array)\n            if nums[0] + array[0] <= i:\n                return i\n        return -1",
  "is_python": true
}