{
  "problem_idx": 2321,
  "task_name": "Maximum Score Of Spliced Array",
  "markdown_description": "\nYou are given two **0-indexed** integer arrays `nums1` and `nums2`, both of length `n`.\n\n\nYou can choose two integers `left` and `right` where `0 <= left <= right < n` and **swap** the subarray `nums1[left...right]` with the subarray `nums2[left...right]`.\n\n\n* For example, if `nums1 = [1,2,3,4,5]` and `nums2 = [11,12,13,14,15]` and you choose `left = 1` and `right = 2`, `nums1` becomes `[1,**12,13**,4,5]` and `nums2` becomes `[11,**2,3**,14,15]`.\n\n\nYou may choose to apply the mentioned operation **once** or not do anything.\n\n\nThe **score** of the arrays is the **maximum** of `sum(nums1)` and `sum(nums2)`, where `sum(arr)` is the sum of all the elements in the array `arr`.\n\n\nReturn *the **maximum possible score***.\n\n\nA **subarray** is a contiguous sequence of elements within an array. `arr[left...right]` denotes the subarray that contains the elements of `nums` between indices `left` and `right` (**inclusive**).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [60,60,60], nums2 = [10,90,10]\n**Output:** 210\n**Explanation:** Choosing left = 1 and right = 1, we have nums1 = [60,**90**,60] and nums2 = [10,**60**,10].\nThe score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]\n**Output:** 220\n**Explanation:** Choosing left = 3, right = 4, we have nums1 = [20,40,20,**40,20**] and nums2 = [50,20,50,**70,30**].\nThe score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [7,11,13], nums2 = [1,1,1]\n**Output:** 31\n**Explanation:** We choose not to swap any subarray.\nThe score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -> int:\n        def f(nums1, nums2):\n            d = [a - b for a, b in zip(nums1, nums2)]\n            t = mx = d[0]\n            for v in d[1:]:\n                if t > 0:\n                    t += v\n                else:\n                    t = v\n                mx = max(mx, t)\n            return mx\n\n        s1, s2 = sum(nums1), sum(nums2)\n        return max(s2 + f(nums1, nums2), s1 + f(nums2, nums1))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumsSplicedArray(self, nums1, nums2):\n        def f(nums1, nums2):\n            d = [a - b for a, b in zip(nums1, nums2)]\n            t = mx = d[0]\n            for v in d[1:]:\n                if t > 0:\n                    t += v\n                else:\n                    t = v\n                mx = max(mx, t)\n            return mx\n\n        s1, s2 = sum(nums1), sum(nums2)\n        return max(s2 + f(nums1, nums2), s1 + f(nums2, nums1))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    num_len = random.randint(1, 10)\n    \n    nums1 = []\n    nums2 = []\n    for i in range(num_len):\n        num1 = random.randint(1, 10000)\n        num2 = random.randint(1, 10000)\n        nums1.append(num1)\n        nums2.append(num2)\n    \n    expected_result = solution.maximumsSplicedArray(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumsSplicedArray(nums1, nums2) == expected_result\n        print(f\"assert solution.maximumsSplicedArray({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumsSplicedArray({nums1}, {nums2}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.maximumsSplicedArray([9955, 459, 874], [8454, 2012, 6826]) == 18793\nassert solution.maximumsSplicedArray([4230, 9359, 4447, 5556, 4084, 7803, 3076, 7905], [5256, 821, 166, 1788, 847, 7338, 5511, 5640]) == 48895\nassert solution.maximumsSplicedArray([2246], [181]) == 2246\nassert solution.maximumsSplicedArray([4459, 3180, 9649], [8295, 8689, 4374]) == 26633\nassert solution.maximumsSplicedArray([8954, 5807], [4493, 6366]) == 15320\nassert solution.maximumsSplicedArray([9576, 5870, 5452, 3916, 6830, 8843, 8942], [3464, 4717, 7931, 1144, 100, 3632, 5270]) == 51908\nassert solution.maximumsSplicedArray([2726, 5902, 4408, 3624, 8708], [21, 4042, 9847, 2900, 23]) == 30807\nassert solution.maximumsSplicedArray([7220, 384, 9863, 2220, 3232, 2901, 784, 6023, 2104, 199], [9645, 8579, 5123, 4607, 9040, 4863, 6853, 7365, 8525, 9663]) == 79003\nassert solution.maximumsSplicedArray([4376, 8296, 3469, 2293, 3470, 3214, 8715, 9780], [870, 9347, 8614, 8364, 3741, 1906, 6769, 5564]) == 56151\nassert solution.maximumsSplicedArray([1769, 4207, 8509, 8145, 1255, 3162, 2209, 7610], [3930, 7295, 7214, 9210, 6945, 2855, 7255, 896]) == 52314\nassert solution.maximumsSplicedArray([4696, 3626, 7682, 3594, 7870, 3450], [251, 9762, 9451, 1070, 9885, 6547]) == 41411\nassert solution.maximumsSplicedArray([5359, 7624, 5598, 2977, 7370], [4631, 816, 1916, 7200, 1178]) == 33151\nassert solution.maximumsSplicedArray([5900, 6629, 4594, 2011, 1132, 5522, 5555, 238, 1311], [9545, 9118, 6541, 2170, 7897, 2100, 7242, 9682, 3006]) == 60723\nassert solution.maximumsSplicedArray([3560, 3989, 363, 3776, 9334, 9677, 4616, 7376], [5322, 4751, 2713, 326, 2954, 4978, 1976, 5433]) == 47565\nassert solution.maximumsSplicedArray([5203, 5242, 240], [2627, 1658, 2533]) == 12978\nassert solution.maximumsSplicedArray([2288, 1817, 3896, 2974, 2818, 3505, 827, 2569], [2540, 383, 424, 9788, 6670, 5113, 7055, 1264]) == 39196\nassert solution.maximumsSplicedArray([3220, 465, 1764, 4329, 1921, 361, 3366, 7361, 5047], [2448, 1918, 1031, 8428, 7289, 4351, 1848, 325, 3951]) == 42011\nassert solution.maximumsSplicedArray([8153, 4680, 5126, 4917, 4327, 6431], [5737, 5074, 6298, 1872, 5318, 1357]) == 35200\nassert solution.maximumsSplicedArray([9851, 5608, 9349, 630, 8635], [2988, 2418, 835, 3986, 7115]) == 37429\nassert solution.maximumsSplicedArray([2105, 9293, 8201, 8645, 8651, 1885, 792], [5200, 2634, 3538, 9879, 5788, 3668, 7894]) == 51552\nassert solution.maximumsSplicedArray([4131, 7921, 9092, 1813, 606], [9529, 7012, 4440, 3848, 4954]) == 35344\nassert solution.maximumsSplicedArray([1665, 4573, 4280], [8129, 4433, 7057]) == 19759\nassert solution.maximumsSplicedArray([6118], [7211]) == 7211\nassert solution.maximumsSplicedArray([5409, 7156, 1055, 2389, 8066, 5479, 6077], [4169, 3104, 5169, 9981, 4157, 4985, 6977]) == 47337\nassert solution.maximumsSplicedArray([4100, 7330, 3644, 335, 2771, 6825, 1167, 2085, 5608], [8705, 4863, 8811, 381, 9783, 2883, 6904, 5644, 8694]) == 60610\nassert solution.maximumsSplicedArray([1614, 4586, 7617, 867, 5216, 9221, 1705, 6317, 1779], [3387, 7657, 8400, 5915, 3586, 8514, 8826, 9301, 6567]) == 64490\nassert solution.maximumsSplicedArray([6284, 1987, 5475, 6359, 6277, 6023, 7345, 8334], [2473, 5685, 3749, 9000, 7516, 5442, 321, 4380]) == 53936\nassert solution.maximumsSplicedArray([2951, 343, 5814, 4388], [8008, 7411, 7202, 6498]) == 29119\nassert solution.maximumsSplicedArray([2017, 5147, 2233, 1431, 7005], [8496, 9803, 9530, 7212, 8206]) == 43247\nassert solution.maximumsSplicedArray([1082, 2486, 9716, 9122, 8315, 2909, 5747, 7156], [9261, 3846, 1538, 3904, 9778, 2578, 5922, 7968]) == 58191\nassert solution.maximumsSplicedArray([352, 1600, 3521, 7777, 2131], [9388, 3294, 8284, 4446, 3770]) == 32513\nassert solution.maximumsSplicedArray([5598, 9053], [5730, 1877]) == 14783\nassert solution.maximumsSplicedArray([3489, 1635, 5204, 5814, 1448, 4799, 1615, 7132], [7303, 5026, 7931, 8865, 3826, 9164, 4163, 4602]) == 53410\nassert solution.maximumsSplicedArray([2383, 9516, 437, 499, 2155, 4684], [5961, 3472, 7537, 9465, 7912, 9058]) == 49449\nassert solution.maximumsSplicedArray([4745, 9199, 4600, 4304], [664, 8283, 4828, 7407]) == 26179\nassert solution.maximumsSplicedArray([2642, 748, 9169, 2731, 5178, 2731, 5804, 8034], [7435, 1587, 8477, 2264, 3822, 4134, 2743, 8712]) == 43347\nassert solution.maximumsSplicedArray([2763, 6861], [3340, 4009]) == 10201\nassert solution.maximumsSplicedArray([6736, 7427, 2107, 7174, 8673, 9745], [2073, 9951, 6827, 3809, 9801, 1639]) == 49106\nassert solution.maximumsSplicedArray([4577], [7180]) == 7180\nassert solution.maximumsSplicedArray([2674, 9071, 4297, 70, 1299, 3658, 4780, 5643, 3481], [7599, 894, 9000, 6149, 7437, 3787, 3168, 3685, 4953]) == 54849\nassert solution.maximumsSplicedArray([729, 8470, 3744, 1111, 7056, 7773, 9522], [7496, 3917, 3551, 1877, 4397, 9746, 7344]) == 45172\nassert solution.maximumsSplicedArray([4153, 9908, 8198, 1641], [6627, 3573, 738, 7495]) == 32228\nassert solution.maximumsSplicedArray([7916, 1193, 1931, 1232, 8386, 1391, 4486], [7326, 1967, 8694, 1469, 1238, 2077, 5695]) == 35614\nassert solution.maximumsSplicedArray([8672, 5323, 3349, 114, 9366, 7759], [8432, 9008, 4093, 2709, 7477, 1874]) == 41607\nassert solution.maximumsSplicedArray([8446, 8903, 6251, 447, 5775, 2330, 4017], [6950, 6115, 9043, 1239, 1970, 5667, 1559]) == 39753\nassert solution.maximumsSplicedArray([6466, 4098, 9614, 4080, 1404, 9437, 6572], [3283, 6936, 9181, 6823, 6496, 5930, 3275]) == 51911\nassert solution.maximumsSplicedArray([8825, 585], [9288, 568]) == 9873\nassert solution.maximumsSplicedArray([3447, 9592, 8480, 6487], [6117, 8063, 7664, 2646]) == 30676\nassert solution.maximumsSplicedArray([6399, 8867, 9680, 508, 7667, 2654], [4400, 9419, 3944, 4745, 8342, 3906]) == 41939\nassert solution.maximumsSplicedArray([9807, 7831, 5815, 1016, 3293, 5003], [4406, 3369, 9750, 8000, 7891, 3988]) == 48282\nassert solution.maximumsSplicedArray([3918, 5994], [1373, 6467]) == 10385\nassert solution.maximumsSplicedArray([1334, 891, 3078, 773, 8304], [7927, 6779, 466, 6085, 6864]) == 30733\nassert solution.maximumsSplicedArray([977, 7056, 7202, 6053, 9642, 1169, 9697, 4626, 3431, 2173], [5429, 3921, 9689, 1308, 6435, 9331, 3363, 7080, 2854, 9330]) == 67340\nassert solution.maximumsSplicedArray([869], [855]) == 869\nassert solution.maximumsSplicedArray([6561, 2896, 1450, 3294], [418, 1177, 1105, 8666]) == 19573\nassert solution.maximumsSplicedArray([4120, 9293, 9173, 6532, 4894, 9260], [4057, 3374, 1132, 7807, 2826, 5765]) == 44547\nassert solution.maximumsSplicedArray([4009, 8544, 3286], [7933, 123, 9426]) == 25903\nassert solution.maximumsSplicedArray([5543, 4572, 7816, 5611, 7204, 3755, 4539, 5314, 4429], [9997, 5196, 3613, 2849, 3746, 3541, 4828, 1239, 1376]) == 53861\nassert solution.maximumsSplicedArray([1241, 6410], [2849, 8348]) == 11197\nassert solution.maximumsSplicedArray([4291, 2411, 2120, 8624, 3118, 6843, 9988, 4407, 7815], [8998, 3625, 6041, 36, 3876, 3527, 8597, 8989, 5017]) == 61243\nassert solution.maximumsSplicedArray([3058, 7048, 5970, 8424, 8977, 8432, 4897, 4824], [2016, 9866, 217, 2200, 3637, 8674, 691, 9419]) == 58001\nassert solution.maximumsSplicedArray([9635, 7467, 4127, 2807, 7169, 9044, 7618, 4516, 147], [6159, 6565, 7489, 675, 7599, 7520, 2666, 340, 8602]) == 60985\nassert solution.maximumsSplicedArray([1209], [7535]) == 7535\nassert solution.maximumsSplicedArray([421, 5768, 3620, 5312, 5361, 3411, 7847, 3160, 696, 1650], [8842, 8810, 2123, 7986, 1444, 8141, 8775, 8986, 8190, 3004]) == 70218\nassert solution.maximumsSplicedArray([4868, 1155, 2427, 725, 1700, 9727], [7577, 6075, 8579, 4792, 6056, 8149]) == 42806\nassert solution.maximumsSplicedArray([1442, 9696], [2438, 9029]) == 12134\nassert solution.maximumsSplicedArray([6582, 9411, 9345, 8276, 3738], [6046, 7563, 1339, 7161, 8345]) == 41959\nassert solution.maximumsSplicedArray([8931, 3740], [7028, 917]) == 12671\nassert solution.maximumsSplicedArray([3598, 1443, 6955, 3854, 2152, 4177], [1005, 7558, 7188, 9255, 1157, 1134]) == 33928\nassert solution.maximumsSplicedArray([5590, 8552, 3878, 1474], [6841, 9365, 5644, 8969]) == 30819\nassert solution.maximumsSplicedArray([2309, 2092, 7995, 3895, 5125], [5239, 5100, 6235, 5202, 9775]) == 33311\nassert solution.maximumsSplicedArray([5449, 8261, 4069, 5387, 8507, 1101, 1095, 7127], [763, 676, 24, 104, 5869, 4953, 7180, 1755]) == 50933\nassert solution.maximumsSplicedArray([3418, 148, 2701, 8469, 4869, 6501, 4378, 7273, 2649, 3209], [2948, 2428, 798, 7495, 7532, 5718, 3884, 5925, 2787, 7121]) == 49513\nassert solution.maximumsSplicedArray([4582, 5945, 7823, 6536, 4822, 1488], [7678, 4445, 5179, 4373, 264, 5615]) == 38419\nassert solution.maximumsSplicedArray([2138, 2318, 7883, 2504], [6842, 6471, 2596, 1370]) == 23700\nassert solution.maximumsSplicedArray([7666, 1922, 6966, 3922], [7563, 6421, 3503, 4203]) == 25153\nassert solution.maximumsSplicedArray([2476], [7697]) == 7697\nassert solution.maximumsSplicedArray([1418, 7562, 9526, 260, 2700, 7161], [3627, 4701, 2997, 3653, 1740, 4416]) == 32020\nassert solution.maximumsSplicedArray([9307, 8876, 3045, 4125, 8128, 7935], [914, 1179, 4294, 8040, 9217, 1109]) == 47669\nassert solution.maximumsSplicedArray([735, 4419, 7321, 1287, 2467, 1057], [178, 7692, 1816, 9438, 4183, 7298]) == 36110\nassert solution.maximumsSplicedArray([153, 8968, 4, 1007, 4045, 9789, 2491, 4717, 8646, 6029], [5633, 3570, 6136, 5168, 1410, 5257, 6782, 2293, 6474, 8729]) == 58924\nassert solution.maximumsSplicedArray([8215, 7558, 4748], [4645, 8123, 6908]) == 23246\nassert solution.maximumsSplicedArray([3532, 5869, 9444], [5937, 5008, 1288]) == 21250\nassert solution.maximumsSplicedArray([4435, 5270], [4099, 3030]) == 9705\nassert solution.maximumsSplicedArray([2060, 3517, 5265], [2329, 4224, 3815]) == 11818\nassert solution.maximumsSplicedArray([1096], [9616]) == 9616\nassert solution.maximumsSplicedArray([3071, 5650, 8687, 6791, 9884, 4043], [5676, 5427, 6528, 8692, 6213, 8993]) == 45681\nassert solution.maximumsSplicedArray([5882, 8444, 2758, 6381, 6747], [1228, 5169, 9681, 8574, 3420]) == 39328\nassert solution.maximumsSplicedArray([5055, 6228, 2041, 7684, 454, 6206, 9655, 5590, 2126], [8309, 6793, 7315, 1494, 4657, 4113, 1929, 5637, 610]) == 54132\nassert solution.maximumsSplicedArray([4362, 8027, 7294, 8071, 8627, 1629, 3733], [8178, 6814, 2151, 9167, 464, 2907, 7149]) == 50253\nassert solution.maximumsSplicedArray([3723, 7816, 9588, 4423, 2857], [4336, 3289, 6022, 567, 1427]) == 29020\nassert solution.maximumsSplicedArray([4971], [1662]) == 4971\nassert solution.maximumsSplicedArray([1814, 9705, 9630, 3205], [2479, 3909, 9783, 859]) == 25019\nassert solution.maximumsSplicedArray([1444, 4207, 8791, 850, 2270], [3622, 296, 3888, 8010, 6641]) == 31271\nassert solution.maximumsSplicedArray([5708, 1809, 5080, 8553, 8349, 6310, 702], [4528, 3449, 4087, 6571, 8803, 7308, 4831]) == 42552\nassert solution.maximumsSplicedArray([1309, 2086, 5665, 5820, 4523, 1754, 9297, 8921], [5725, 2351, 8813, 1490, 8091, 8907, 3382, 6782]) == 53595\nassert solution.maximumsSplicedArray([6837, 8295, 4384, 8325, 4211, 384], [22, 1702, 1546, 8354, 4289, 4338]) == 36497\nassert solution.maximumsSplicedArray([8720, 6523, 1315, 1646, 4186, 5528], [8728, 1844, 848, 6217, 580, 2507]) == 32489\nassert solution.maximumsSplicedArray([6589, 9008, 1373, 2764, 4919, 2100, 5822, 2933, 5955, 1785], [4687, 679, 2264, 1465, 7045, 3329, 1002, 1274, 6332, 1771]) == 46603\nassert solution.maximumsSplicedArray([659, 237, 1319, 552, 5706, 8270, 6002, 6318, 2820], [6320, 6264, 8976, 1479, 9182, 9633, 7123, 3049, 8923]) == 64218",
  "inefficient_solution": "class Solution:\n    def maximumsSplicedArray(self, nums1: list[int], nums2: list[int]) -> int:\n        def f(nums1, nums2):\n            d = [a - b for a, b in zip(nums1, nums2)]\n            result = []\n            max_val = d[0]\n            for v in d[1:]:\n                if max_val > 0:\n                    max_val += v\n                    result.append(max_val)\n                else:\n                    max_val = v\n                    result.append(max_val)\n            return max(result)\n\n        s1, s2 = sum(nums1), sum(nums2)\n        result1 = s2 + f(nums1, nums2)\n        result2 = s1 + f(nums2, nums1)\n        result3 = s1 + s2\n        for i in range(len(nums1)):\n            temp_nums1 = nums1.copy()\n            temp_nums2 = nums2.copy()\n            for j in range(i, len(nums1)):\n                temp_nums1[i:j+1], temp_nums2[i:j+1] = temp_nums2[i:j+1], temp_nums1[i:j+1]\n                result3 = max(result3, sum(temp_nums1))\n                result3 = max(result3, sum(temp_nums2))\n        return max(result1, result2, result3)",
  "is_python": true
}