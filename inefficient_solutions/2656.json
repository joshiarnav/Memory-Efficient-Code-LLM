{
  "problem_idx": 2656,
  "task_name": "Maximum Sum With Exactly K Elements",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `k`. Your task is to perform the following operation **exactly** `k` times in order to maximize your score:\n\n\n1. Select an element `m` from `nums`.\n2. Remove the selected element `m` from the array.\n3. Add a new element with a value of `m + 1` to the array.\n4. Increase your score by `m`.\n\n\nReturn *the maximum score you can achieve after performing the operation exactly* `k` *times.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 3\n**Output:** 18\n**Explanation:** We need to choose exactly 3 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [1,2,3,4,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 and nums = [1,2,3,4,7]\nFor the third iteration, we choose 7. Then sum is 5 + 6 + 7 = 18 and nums = [1,2,3,4,8]\nSo, we will return 18.\nIt can be proven, that 18 is the maximum answer that we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,5,5], k = 2\n**Output:** 11\n**Explanation:** We need to choose exactly 2 elements from nums to maximize the sum.\nFor the first iteration, we choose 5. Then sum is 5 and nums = [5,5,6]\nFor the second iteration, we choose 6. Then sum is 5 + 6 = 11 and nums = [5,5,7]\nSo, we will return 11.\nIt can be proven, that 11 is the maximum answer that we can achieve.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 100`\n* `1 <= k <= 100`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n",
  "canonical_solution": "class Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n        x = max(nums)\n        return k * x + k * (k - 1) // 2\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    test_case_generator_results = []\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k\n    k = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximizeSum(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximizeSum(nums, k) == expected_result\n        print(f\"assert solution.maximizeSum({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximizeSum({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximizeSum([22, 78], 64) == 7008\nassert solution.maximizeSum([90, 50, 9], 69) == 8556\nassert solution.maximizeSum([64, 80, 26, 63], 97) == 12416\nassert solution.maximizeSum([38, 42, 76, 26, 3, 92, 21, 23, 37, 2], 76) == 9842\nassert solution.maximizeSum([96, 48], 76) == 10146\nassert solution.maximizeSum([53, 63, 61, 57], 50) == 4375\nassert solution.maximizeSum([26, 64, 30, 95, 70, 73, 67, 10, 14], 64) == 8096\nassert solution.maximizeSum([3, 19, 100, 5, 25, 81, 50, 37], 4) == 406\nassert solution.maximizeSum([58, 6, 45, 41], 50) == 4125\nassert solution.maximizeSum([39, 96, 75, 68, 34, 59, 2, 30], 1) == 96\nassert solution.maximizeSum([76, 31, 84, 40, 11, 68], 8) == 700\nassert solution.maximizeSum([30, 5, 70, 14, 78, 94, 25], 13) == 1300\nassert solution.maximizeSum([58, 59], 54) == 4617\nassert solution.maximizeSum([47, 72, 5, 39, 51], 51) == 4947\nassert solution.maximizeSum([32, 38, 68, 48, 15, 65, 23], 92) == 10442\nassert solution.maximizeSum([99, 10, 85, 84, 20], 12) == 1254\nassert solution.maximizeSum([69, 82, 83, 53, 27, 59, 44, 51], 74) == 8843\nassert solution.maximizeSum([34, 48, 43, 23, 6, 74], 73) == 8030\nassert solution.maximizeSum([50, 57, 92, 67, 52], 5) == 470\nassert solution.maximizeSum([22, 11, 100, 45, 24, 35, 25, 68], 97) == 14356\nassert solution.maximizeSum([27, 90, 56, 34, 67, 53, 6, 92], 53) == 6254\nassert solution.maximizeSum([79, 58, 43, 26, 25, 100, 75, 5, 6], 97) == 14356\nassert solution.maximizeSum([72, 64, 83], 42) == 4347\nassert solution.maximizeSum([81, 66, 84, 6, 59, 7, 65, 92, 76], 66) == 8217\nassert solution.maximizeSum([58, 2, 90, 96, 91, 94, 59, 84, 95, 13], 44) == 5170\nassert solution.maximizeSum([82, 94, 87, 30, 15, 14, 60, 66], 34) == 3757\nassert solution.maximizeSum([31, 43, 53, 40, 16, 58, 32, 7, 17], 93) == 9672\nassert solution.maximizeSum([79, 60], 90) == 11115\nassert solution.maximizeSum([56, 40, 67, 62], 30) == 2445\nassert solution.maximizeSum([95, 72, 81, 43, 1], 59) == 7316\nassert solution.maximizeSum([91, 64, 37], 61) == 7381\nassert solution.maximizeSum([94, 64, 34, 12, 25, 73], 22) == 2299\nassert solution.maximizeSum([89, 54, 24, 48, 67, 12], 83) == 10790\nassert solution.maximizeSum([12, 74], 47) == 4559\nassert solution.maximizeSum([41, 8, 29], 90) == 7695\nassert solution.maximizeSum([49, 46, 73], 12) == 942\nassert solution.maximizeSum([37, 4, 63, 1, 72, 31, 100, 29, 64, 81], 8) == 828\nassert solution.maximizeSum([45, 42], 93) == 8463\nassert solution.maximizeSum([72, 34], 16) == 1272\nassert solution.maximizeSum([51, 77, 61, 99, 65, 71, 82, 48, 64, 53], 77) == 10549\nassert solution.maximizeSum([8, 20, 26, 84, 37], 80) == 9880\nassert solution.maximizeSum([76, 94, 55, 8, 28, 36, 89, 1, 12, 24], 73) == 9490\nassert solution.maximizeSum([10, 23, 72, 79], 7) == 574\nassert solution.maximizeSum([70, 75, 61, 37], 23) == 1978\nassert solution.maximizeSum([6, 15, 63, 93, 67, 50, 66, 65, 47], 11) == 1078\nassert solution.maximizeSum([80, 8, 96], 22) == 2343\nassert solution.maximizeSum([100, 81, 52, 99, 91, 8, 48], 30) == 3435\nassert solution.maximizeSum([91, 90, 100, 61, 28, 29], 11) == 1155\nassert solution.maximizeSum([48, 64, 23, 91], 3) == 276\nassert solution.maximizeSum([63, 89, 65, 81, 47, 64], 52) == 5954\nassert solution.maximizeSum([99, 78], 99) == 14652\nassert solution.maximizeSum([45, 89, 62, 60, 10, 41], 52) == 5954\nassert solution.maximizeSum([79, 64, 12, 73, 15, 68, 67, 76, 91], 18) == 1791\nassert solution.maximizeSum([42, 100, 16, 28, 72, 85], 94) == 13771\nassert solution.maximizeSum([20, 84, 21, 99, 40], 27) == 3024\nassert solution.maximizeSum([38, 82, 72, 65, 71, 4, 36, 10, 32, 70], 22) == 2035\nassert solution.maximizeSum([78, 74, 15, 51, 39, 92, 36, 9], 31) == 3317\nassert solution.maximizeSum([65, 7, 86, 95, 46, 73, 32, 2], 62) == 7781\nassert solution.maximizeSum([77, 33, 62, 60], 89) == 10769\nassert solution.maximizeSum([26, 61, 62], 17) == 1190\nassert solution.maximizeSum([9, 8, 3, 27, 67], 89) == 9879\nassert solution.maximizeSum([66, 90, 70, 67, 4, 18, 45, 94, 25, 43], 39) == 4407\nassert solution.maximizeSum([37, 59, 25, 76, 95, 42], 65) == 8255\nassert solution.maximizeSum([77, 78], 19) == 1653\nassert solution.maximizeSum([63, 11, 53, 7, 41, 50, 26, 48, 84], 95) == 12445\nassert solution.maximizeSum([41, 50, 59, 52], 78) == 7605\nassert solution.maximizeSum([18, 27], 88) == 6204\nassert solution.maximizeSum([16, 44, 17, 82, 10, 58, 70, 69, 11, 75], 19) == 1729\nassert solution.maximizeSum([5, 87], 58) == 6699\nassert solution.maximizeSum([90, 5, 34, 19, 88, 75], 71) == 8875\nassert solution.maximizeSum([100, 90, 62, 9, 89, 94, 46, 75], 71) == 9585\nassert solution.maximizeSum([63, 40, 96, 15, 61], 67) == 8643\nassert solution.maximizeSum([58, 49, 81, 86], 34) == 3485\nassert solution.maximizeSum([97, 68, 55, 38, 36], 60) == 7590\nassert solution.maximizeSum([3, 6, 19, 27, 92, 14, 69], 16) == 1592\nassert solution.maximizeSum([93, 90, 3, 40, 98, 56, 10, 25, 38], 68) == 8942\nassert solution.maximizeSum([46, 5, 66, 13], 96) == 10896\nassert solution.maximizeSum([77, 88, 73, 9, 41, 3, 69, 8], 23) == 2277\nassert solution.maximizeSum([83, 67, 49, 26], 6) == 513\nassert solution.maximizeSum([68, 61, 34, 32, 65, 29, 35, 2, 33, 57], 40) == 3500\nassert solution.maximizeSum([9, 45, 75, 6, 23, 99, 2], 85) == 11985\nassert solution.maximizeSum([11, 42, 61, 9, 80, 57], 59) == 6431\nassert solution.maximizeSum([62, 57, 8, 71, 42, 76, 98, 22, 25], 47) == 5687\nassert solution.maximizeSum([45, 57, 9, 66, 78, 62], 30) == 2775\nassert solution.maximizeSum([9, 40, 15], 63) == 4473\nassert solution.maximizeSum([60, 49, 94, 100, 17, 14, 31, 4, 28, 40], 96) == 14160\nassert solution.maximizeSum([23, 74, 79, 28, 98], 101) == 14948\nassert solution.maximizeSum([70, 25, 64], 67) == 6901\nassert solution.maximizeSum([23, 53], 70) == 6125\nassert solution.maximizeSum([62, 15, 23, 52, 26, 75, 46, 13, 30, 79], 78) == 9165\nassert solution.maximizeSum([4, 42, 39, 86, 76, 97], 72) == 9540\nassert solution.maximizeSum([14, 46, 58, 21, 67, 40, 44, 18, 66], 50) == 4575\nassert solution.maximizeSum([79, 40, 10, 16, 85, 90, 93, 25], 92) == 12742\nassert solution.maximizeSum([53, 60, 42], 53) == 4558\nassert solution.maximizeSum([9, 86], 24) == 2340\nassert solution.maximizeSum([9, 20, 37, 50, 88, 55, 79], 25) == 2500\nassert solution.maximizeSum([26, 84, 75, 65, 100, 82], 4) == 406\nassert solution.maximizeSum([59, 55, 64, 51, 52, 17, 88], 32) == 3312\nassert solution.maximizeSum([29, 81, 71, 17, 2, 30, 70, 89, 53], 67) == 8174\nassert solution.maximizeSum([79, 87, 36, 68], 61) == 7137",
  "inefficient_solution": "class Solution:\n    def maximizeSum(self, nums: List[int], k: int) -> int:\n        count = {}\n        for i in nums:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        freq = sorted(count.keys())\n        max_val = max(freq)\n        res = 0\n        for i in range(k):\n            res += max_val\n            max_val += 1\n            for key, val in count.items():\n                if key == max_val:\n                    if val == 1:\n                        del count[key]\n                    else:\n                        count[key] -= 1\n                        count[key + 1] = count.get(key + 1, 0) + 1\n                    break\n        return res",
  "is_python": true
}