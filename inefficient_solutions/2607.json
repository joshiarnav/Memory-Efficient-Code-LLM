{
  "problem_idx": 2607,
  "task_name": "Make K",
  "markdown_description": "\nYou are given a **0-indexed** integer array `arr` and an integer `k`. The array `arr` is circular. In other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.\n\n\nYou can do the following operation any number of times:\n\n\n* Pick any element from `arr` and increase or decrease it by `1`.\n\n\nReturn *the minimum number of operations such that the sum of each **subarray** of length* `k` *is equal*.\n\n\nA **subarray** is a contiguous part of the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [1,4,1,3], k = 2\n**Output:** 1\n**Explanation:** we can do one operation on index 1 to make its value equal to 3.\nThe array after the operation is [1,3,1,3]\n- Subarray starts at index 0 is [1, 3], and its sum is 4 \n- Subarray starts at index 1 is [3, 1], and its sum is 4 \n- Subarray starts at index 2 is [1, 3], and its sum is 4 \n- Subarray starts at index 3 is [3, 1], and its sum is 4 \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [2,5,5,7], k = 3\n**Output:** 5\n**Explanation:** we can do three operations on index 0 to make its value equal to 5 and two operations on index 3 to make its value equal to 5.\nThe array after the operations is [5,5,5,5]\n- Subarray starts at index 0 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 1 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 2 is [5, 5, 5], and its sum is 15\n- Subarray starts at index 3 is [5, 5, 5], and its sum is 15 \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= arr.length <= 105`\n* `1 <= arr[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        g = gcd(n, k)\n        ans = 0\n        for i in range(g):\n            t = sorted(arr[i:n:g])\n            mid = t[len(t) >> 1]\n            ans += sum(abs(x - mid) for x in t)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom math import gcd\nfrom typing import List\n\nclass Solution:\n    def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        g = gcd(n, k)\n        ans = 0\n        for i in range(g):\n            t = sorted(arr[i:n:g])\n            mid = t[len(t) >> 1]\n            ans += sum(abs(x - mid) for x in t)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    arr = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random k value\n    k = random.randint(1, len(arr))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.makeSubKSumEqual(arr, k)\n\n    return arr, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.makeSubKSumEqual(arr, k) == expected_result\n        print(f\"assert solution.makeSubKSumEqual({arr}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.makeSubKSumEqual({arr}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.makeSubKSumEqual([48, 44, 96, 65, 7, 78, 16], 4) == 172\nassert solution.makeSubKSumEqual([77, 87, 79, 64, 26, 92, 32], 5) == 136\nassert solution.makeSubKSumEqual([28, 36, 2, 74], 1) == 80\nassert solution.makeSubKSumEqual([83, 10, 45], 3) == 0\nassert solution.makeSubKSumEqual([95, 23, 54, 70, 42, 77, 76, 44, 91], 9) == 0\nassert solution.makeSubKSumEqual([38, 52, 93, 76], 1) == 79\nassert solution.makeSubKSumEqual([100, 26, 12, 86, 65, 53, 73, 28], 5) == 205\nassert solution.makeSubKSumEqual([99, 32, 81, 9, 92, 85, 31, 88], 6) == 211\nassert solution.makeSubKSumEqual([86, 83], 1) == 3\nassert solution.makeSubKSumEqual([41, 74], 2) == 0\nassert solution.makeSubKSumEqual([86, 84, 2, 7, 29, 59], 1) == 191\nassert solution.makeSubKSumEqual([46, 69, 12, 57, 72, 6, 36, 76, 52], 9) == 0\nassert solution.makeSubKSumEqual([19, 38, 18, 98, 68, 96, 84, 4, 73, 86], 2) == 272\nassert solution.makeSubKSumEqual([33, 44, 15, 66], 1) == 62\nassert solution.makeSubKSumEqual([89, 76, 78, 95, 11, 73, 29, 99, 92, 36], 9) == 228\nassert solution.makeSubKSumEqual([15, 19, 56, 78], 3) == 100\nassert solution.makeSubKSumEqual([35, 11, 99, 31, 49, 40, 74, 62, 98], 6) == 153\nassert solution.makeSubKSumEqual([28, 70], 2) == 0\nassert solution.makeSubKSumEqual([48, 98, 52], 1) == 50\nassert solution.makeSubKSumEqual([61, 33], 1) == 28\nassert solution.makeSubKSumEqual([31, 78, 4, 50, 21, 3, 48, 13, 32, 37], 2) == 167\nassert solution.makeSubKSumEqual([29, 53, 50, 69, 90, 57, 20, 67, 42], 4) == 142\nassert solution.makeSubKSumEqual([83, 17, 52, 18, 44, 8, 51, 56, 43, 39], 8) == 118\nassert solution.makeSubKSumEqual([12, 46, 56, 94, 54, 26, 83, 100, 31, 11], 6) == 253\nassert solution.makeSubKSumEqual([87, 37], 1) == 50\nassert solution.makeSubKSumEqual([65, 98, 59], 3) == 0\nassert solution.makeSubKSumEqual([26, 62, 87, 32, 30, 15, 72, 97, 88, 37], 3) == 266\nassert solution.makeSubKSumEqual([60, 66, 85, 42, 99, 65], 3) == 71\nassert solution.makeSubKSumEqual([61, 75, 43, 96, 28, 2], 5) == 159\nassert solution.makeSubKSumEqual([22, 5, 34, 95, 25, 61, 48, 50, 18], 7) == 184\nassert solution.makeSubKSumEqual([94, 84, 59], 1) == 35\nassert solution.makeSubKSumEqual([25, 69, 26, 72, 12, 15, 29, 90, 58], 6) == 168\nassert solution.makeSubKSumEqual([59, 83, 41, 11, 53, 13, 3, 46, 9, 70], 2) == 229\nassert solution.makeSubKSumEqual([84, 68, 13, 37], 1) == 102\nassert solution.makeSubKSumEqual([21, 25, 100, 74, 98], 2) == 152\nassert solution.makeSubKSumEqual([90, 40, 75], 1) == 50\nassert solution.makeSubKSumEqual([73, 68, 51, 66, 2, 4, 47, 27, 38], 6) == 139\nassert solution.makeSubKSumEqual([6, 91, 18, 17, 54], 5) == 0\nassert solution.makeSubKSumEqual([18, 80, 36, 4, 91, 66, 1, 76], 3) == 254\nassert solution.makeSubKSumEqual([86, 52, 39, 38, 16, 55, 29, 73, 28, 40], 1) == 156\nassert solution.makeSubKSumEqual([31, 44], 2) == 0\nassert solution.makeSubKSumEqual([17, 42, 67], 1) == 50\nassert solution.makeSubKSumEqual([4, 94, 61, 32, 40], 3) == 119\nassert solution.makeSubKSumEqual([39, 27, 99, 42, 87, 36, 30], 2) == 135\nassert solution.makeSubKSumEqual([40, 38, 99], 3) == 0\nassert solution.makeSubKSumEqual([52, 24, 16], 3) == 0\nassert solution.makeSubKSumEqual([15, 98, 26, 82, 96, 59], 3) == 102\nassert solution.makeSubKSumEqual([61, 83, 87, 97, 69, 81, 39, 43], 7) == 136\nassert solution.makeSubKSumEqual([57, 18, 75, 55, 62, 61, 94], 7) == 0\nassert solution.makeSubKSumEqual([62, 64, 76, 82, 7, 77, 73, 83], 2) == 104\nassert solution.makeSubKSumEqual([85, 59], 2) == 0\nassert solution.makeSubKSumEqual([28, 25, 38, 6, 86, 89, 49, 95, 70], 6) == 164\nassert solution.makeSubKSumEqual([97, 76, 84], 1) == 21\nassert solution.makeSubKSumEqual([51, 34, 10, 80], 2) == 87\nassert solution.makeSubKSumEqual([93, 85, 49, 43, 23], 5) == 0\nassert solution.makeSubKSumEqual([79, 37, 10, 89, 88, 21, 61, 31], 2) == 170\nassert solution.makeSubKSumEqual([84, 52, 27, 44, 6, 12, 53, 20, 96], 4) == 220\nassert solution.makeSubKSumEqual([70, 10], 2) == 0\nassert solution.makeSubKSumEqual([36, 58, 57, 8, 55, 73, 72, 35, 19, 69], 5) == 98\nassert solution.makeSubKSumEqual([79, 5, 16, 44, 66, 29, 100, 45], 3) == 196\nassert solution.makeSubKSumEqual([43, 62, 15, 74], 4) == 0\nassert solution.makeSubKSumEqual([88, 13, 36, 89, 87, 93, 98, 45, 54, 14], 5) == 207\nassert solution.makeSubKSumEqual([97, 38, 63, 70, 39, 24, 45, 30], 2) == 130\nassert solution.makeSubKSumEqual([61, 67, 75, 71, 32, 91, 85], 3) == 91\nassert solution.makeSubKSumEqual([8, 21, 28, 56, 26, 67, 73, 86, 82], 7) == 225\nassert solution.makeSubKSumEqual([43, 42, 74], 1) == 32\nassert solution.makeSubKSumEqual([21, 51, 54, 88, 92, 31, 2, 83], 1) == 212\nassert solution.makeSubKSumEqual([100, 96, 46], 1) == 54\nassert solution.makeSubKSumEqual([72, 74, 64, 22, 100, 87], 4) == 101\nassert solution.makeSubKSumEqual([52, 17, 58, 96, 4, 76, 33, 18, 13, 77], 7) == 274\nassert solution.makeSubKSumEqual([41, 22, 16], 2) == 25\nassert solution.makeSubKSumEqual([96, 76], 1) == 20\nassert solution.makeSubKSumEqual([89, 12, 22, 64, 83, 69, 49, 82, 19], 2) == 221\nassert solution.makeSubKSumEqual([36, 77, 53, 13, 10, 17, 30], 6) == 126\nassert solution.makeSubKSumEqual([42, 83, 19, 75, 97, 1], 1) == 193\nassert solution.makeSubKSumEqual([5, 4, 76, 55, 91, 96, 72], 4) == 199\nassert solution.makeSubKSumEqual([56, 15, 81, 45, 44, 91, 98, 61], 4) == 121\nassert solution.makeSubKSumEqual([17, 85, 87], 3) == 0\nassert solution.makeSubKSumEqual([39, 89, 29, 38, 23, 68, 84, 24, 64], 6) == 151\nassert solution.makeSubKSumEqual([98, 73, 54, 31, 63, 11], 3) == 120\nassert solution.makeSubKSumEqual([62, 93, 99, 90, 77, 9, 8, 6, 35, 30], 3) == 333\nassert solution.makeSubKSumEqual([24, 51, 99, 65, 44, 54], 3) == 93\nassert solution.makeSubKSumEqual([34, 68, 29, 13, 74, 78, 79, 59], 6) == 164\nassert solution.makeSubKSumEqual([4, 29, 70, 46, 85], 1) == 122\nassert solution.makeSubKSumEqual([52, 42, 39, 94, 83, 60, 82], 4) == 126\nassert solution.makeSubKSumEqual([8, 29, 73], 1) == 65\nassert solution.makeSubKSumEqual([15, 47, 37, 65, 41], 5) == 0\nassert solution.makeSubKSumEqual([78, 33, 13, 42, 58], 5) == 0\nassert solution.makeSubKSumEqual([64, 65, 95, 28, 62, 51, 6, 73], 5) == 150\nassert solution.makeSubKSumEqual([23, 61, 57], 2) == 38\nassert solution.makeSubKSumEqual([44, 100, 84, 39, 86, 8], 5) == 179\nassert solution.makeSubKSumEqual([67, 55, 83, 29, 28, 63], 1) == 101\nassert solution.makeSubKSumEqual([28, 65, 77, 95, 56], 4) == 88\nassert solution.makeSubKSumEqual([81, 35, 82, 80, 20, 21, 60, 74, 85, 12], 1) == 254\nassert solution.makeSubKSumEqual([48, 27, 49, 59, 12, 1, 55, 77, 88, 28], 8) == 191\nassert solution.makeSubKSumEqual([48, 51, 79, 68, 4, 67], 6) == 0\nassert solution.makeSubKSumEqual([89, 45, 72], 2) == 44\nassert solution.makeSubKSumEqual([42, 84, 81, 28, 33], 5) == 0\nassert solution.makeSubKSumEqual([96, 38], 2) == 0\nassert solution.makeSubKSumEqual([38, 20, 74, 94, 19, 8, 60, 67, 93, 24], 4) == 243",
  "inefficient_solution": "class Solution:\n    def makeSubKSumEqual(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        ans = 0\n        for i in range(n):\n            temp = arr.copy()\n            while True:\n                temp[i] += 1\n                equal = True\n                for j in range(n):\n                    subarray_sum = sum(temp[max(0, j - k + 1):min(n, j + 1)])\n                    if subarray_sum != sum(temp[max(0, (j - k + 1) % n):min(n, (j + 1) % n)]):\n                        equal = False\n                        break\n                if equal:\n                    ans += temp[i] - arr[i]\n                    break\n                if temp[i] >= 10**9:\n                    temp[i] = 1\n        return ans",
  "is_python": true
}