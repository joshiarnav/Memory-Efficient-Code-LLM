{
  "problem_idx": 2436,
  "task_name": "Minimum Split Into Subarrays With GCD Greater Than One",
  "markdown_description": "\nYou are given an array `nums` consisting of positive integers.\n\n\nSplit the array into **one or more** disjoint subarrays such that:\n\n\n* Each element of the array belongs to **exactly one** subarray, and\n* The **GCD** of the elements of each subarray is strictly greater than `1`.\n\n\nReturn *the minimum number of subarrays that can be obtained after the split*.\n\n\n**Note** that:\n\n\n* The **GCD** of a subarray is the largest positive integer that evenly divides all the elements of the subarray.\n* A **subarray** is a contiguous part of the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [12,6,3,14,8]\n**Output:** 2\n**Explanation:** We can split the array into the subarrays: [12,6,3] and [14,8].\n- The GCD of 12, 6 and 3 is 3, which is strictly greater than 1.\n- The GCD of 14 and 8 is 2, which is strictly greater than 1.\nIt can be shown that splitting the array into one subarray will make the GCD = 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,12,6,14]\n**Output:** 1\n**Explanation:** We can split the array into only one subarray, which is the whole array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2000`\n* `2 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumSplits(self, nums: List[int]) -> int:\n        ans, g = 1, 0\n        for x in nums:\n            g = gcd(g, x)\n            if g == 1:\n                ans += 1\n                g = x\n        return ans\n",
  "test_case_generator": "\n\nimport random\nfrom math import gcd\n\nclass Solution:\n    def minimumSplits(self, nums):\n        ans, g = 1, 0\n        for x in nums:\n            g = gcd(g, x)\n            if g == 1:\n                ans += 1\n                g = x\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(2, 1000000000), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumSplits(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumSplits(nums) == expected_result\n        print(f\"assert solution.minimumSplits({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumSplits({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.minimumSplits([192090337, 504756289, 132065194, 611866705, 224385939]) == 5\nassert solution.minimumSplits([378240238, 694808858, 600744897]) == 2\nassert solution.minimumSplits([391885407, 860798318, 314269659]) == 3\nassert solution.minimumSplits([946452390, 215082207, 284518297, 124104315, 40133320, 754869671, 817024924, 388252916, 207066462]) == 5\nassert solution.minimumSplits([9305731, 37385962]) == 2\nassert solution.minimumSplits([143849229, 601430227, 344036105, 46545988, 743697489]) == 4\nassert solution.minimumSplits([56960009, 720001528, 700169928, 884152757, 160057177, 949512371, 615648983, 748447014]) == 7\nassert solution.minimumSplits([931345814, 664422529, 564938230, 843077589, 338190224, 510583491]) == 6\nassert solution.minimumSplits([652672073, 875365087, 187000039, 347026047, 415040490, 749243916, 672539899]) == 5\nassert solution.minimumSplits([997980701, 642972464, 692537432, 534619186, 434364680, 64292750, 62363732, 264811224, 222874761]) == 3\nassert solution.minimumSplits([932869542, 802628729, 789192747, 55806064, 633156455, 846389679]) == 5\nassert solution.minimumSplits([337389427, 784240324, 975108077, 771727599, 906820332, 743376915, 933162935, 775368798, 822975028]) == 6\nassert solution.minimumSplits([520409555, 346818895, 513008167, 116661630, 742664044, 704483451, 953887067, 907703398, 967068861, 424834042]) == 6\nassert solution.minimumSplits([771802291, 27724340, 960774007, 72360478, 517926348, 151131856, 6496865, 139977469, 587417215, 614705006]) == 8\nassert solution.minimumSplits([111647746, 218248212, 324479471, 49718154, 84032362, 110691845]) == 4\nassert solution.minimumSplits([514223497, 462823858, 350529738, 301083245]) == 3\nassert solution.minimumSplits([976862239, 905605136, 213641055, 189030262, 710070878, 152709917, 440647444]) == 6\nassert solution.minimumSplits([552655758, 517341028, 399919267, 551736296, 306942229, 834701437, 433238017, 508565430, 833315340]) == 7\nassert solution.minimumSplits([588724804, 869263130, 536951810, 719552391, 992366312, 950560939, 326516517]) == 5\nassert solution.minimumSplits([691595306, 81111263, 988212624, 161647798, 135049050, 919441707, 84212227]) == 5\nassert solution.minimumSplits([200428725, 911511607, 484046503, 483595124]) == 4\nassert solution.minimumSplits([659205489, 53200252, 167932827, 657670072]) == 4\nassert solution.minimumSplits([670653113, 358085934, 120800986, 816158006, 875039086, 500881116, 564864344, 350609238, 700231217]) == 3\nassert solution.minimumSplits([114988792, 270873294, 183414294, 817906951, 620990395, 974736606, 361355692]) == 4\nassert solution.minimumSplits([941880129, 658726576, 424451479, 947931414, 22855775, 32347033, 672676063, 212561232]) == 8\nassert solution.minimumSplits([719853824, 598695211, 131435217, 719495814, 690177274, 334623327]) == 5\nassert solution.minimumSplits([167334677, 943553188, 963630350, 984585175, 415812770, 504850900, 816941507]) == 4\nassert solution.minimumSplits([980121325, 963393704, 355791672, 790681530, 230217086, 852649769, 249597893, 995052255, 591636239]) == 6\nassert solution.minimumSplits([128031902, 353527284, 857731552, 160809299, 498653107, 237554874, 705512787, 362669784, 104821830, 722384829]) == 4\nassert solution.minimumSplits([7990370, 424394829, 345219653, 201339564, 715050508, 945019695, 724082111, 744533619, 237188395, 696533332]) == 9\nassert solution.minimumSplits([366100507, 76088203, 910560727, 331173320, 56560209, 579433560]) == 5\nassert solution.minimumSplits([162751684, 960160566, 356920047, 629716553]) == 3\nassert solution.minimumSplits([486420, 523545724, 233458770, 805469890, 164627156, 433046098]) == 1\nassert solution.minimumSplits([117826719, 768647072, 655822409, 278722678, 787078401, 71711103, 117758995, 372339754, 598696578, 297578265]) == 8\nassert solution.minimumSplits([515954615, 645328804, 827383293, 119719036]) == 4\nassert solution.minimumSplits([755943232, 517160140, 180569635, 446304760, 316537135, 23902139, 41750917]) == 4\nassert solution.minimumSplits([735792601, 60579688, 861857953, 903391551, 372697278, 130117432, 689809261, 978134971, 748913219]) == 8\nassert solution.minimumSplits([160960070, 895929735, 729825971, 482060836, 691789866, 989476769, 776627981]) == 5\nassert solution.minimumSplits([967769967, 71983582]) == 2\nassert solution.minimumSplits([581939515, 655456187, 519145096, 475348088, 573008339, 133293423, 302160351, 841259065, 452980016]) == 7\nassert solution.minimumSplits([954661906, 251416814]) == 1\nassert solution.minimumSplits([22779715, 177381980, 444545330, 708764852, 566749297, 547289628, 581828953, 862938056, 253854718]) == 6\nassert solution.minimumSplits([737177316, 737797289, 476939969, 368592099, 855068419, 685913530, 907064442, 737725927]) == 7\nassert solution.minimumSplits([94899769, 309944785, 299397446, 424587030, 859597302, 706452959, 445238652, 64798147]) == 6\nassert solution.minimumSplits([921889859, 840539858, 801600963, 265468595, 482861297, 410324317, 592415943, 624416187, 316796927]) == 8\nassert solution.minimumSplits([55191116, 58857753, 568290387, 692887618, 593283560, 765817682, 112931447, 287694465]) == 5\nassert solution.minimumSplits([7075959, 34982911, 718632750, 886659384, 864385542]) == 3\nassert solution.minimumSplits([742911585, 668274256, 307202182, 390747234, 541780218, 86557009, 440727850, 196481752, 180130406]) == 4\nassert solution.minimumSplits([651237741, 299263286, 419500974, 226210754, 673077090, 665004423, 628422440, 803076403]) == 5\nassert solution.minimumSplits([694463336, 798788585]) == 1\nassert solution.minimumSplits([849884000, 454394852]) == 1\nassert solution.minimumSplits([762181674, 838011214, 966383636, 514123353, 788225708, 932741972]) == 3\nassert solution.minimumSplits([431205223, 227247248, 439351736, 428487131, 246582788, 543296524, 631875074, 574010161, 387870789]) == 6\nassert solution.minimumSplits([475977146, 107973694, 936908916, 287764683, 786234581, 639622439, 836268982, 684877497, 144139179, 570397988]) == 7\nassert solution.minimumSplits([676875527, 670015342, 911235709, 357317315, 422186156, 453495520, 304425631, 77864529, 954961099]) == 8\nassert solution.minimumSplits([116905273, 767092883, 668601309, 519130955]) == 4\nassert solution.minimumSplits([840141006, 561901488]) == 1\nassert solution.minimumSplits([218868366, 117213185, 231554845, 797527790, 432700309, 572545593, 720907178, 775304454]) == 5\nassert solution.minimumSplits([896907505, 756781580]) == 1\nassert solution.minimumSplits([244355614, 454056393, 453725096, 556722446]) == 3\nassert solution.minimumSplits([185800368, 870456439, 316400948, 499074857, 279296911, 923112959, 151237558, 810758512, 241221474, 196518723]) == 8\nassert solution.minimumSplits([266106208, 787068625, 131315468, 224716866, 111560357]) == 4\nassert solution.minimumSplits([967428741, 209890861, 164069162, 395486022, 775992680, 955145410, 709113623]) == 4\nassert solution.minimumSplits([771778536, 526411477, 436035105, 186129370, 174947987, 74598104, 14200937]) == 6\nassert solution.minimumSplits([575799512, 248708504, 292389632, 957508211, 695325324, 271471793, 915209164, 959508873, 514896768]) == 6\nassert solution.minimumSplits([907120052, 492964977, 274729211, 51571066, 480049932, 387980565, 378368522, 306259407, 526027628, 207112341]) == 8\nassert solution.minimumSplits([989974409, 208479100, 442280051, 94524126, 80185568, 872557169, 260407962, 231091945]) == 7\nassert solution.minimumSplits([896836799, 507600539, 888983664]) == 3\nassert solution.minimumSplits([971514935, 736643362, 436981059, 536365897, 42456307, 90176237, 226576334, 762483445]) == 8\nassert solution.minimumSplits([455503067, 820627436, 523800856]) == 2\nassert solution.minimumSplits([292787713, 27850900, 407401781, 434290355, 290309353, 650707160, 353241095, 941124985, 980466937]) == 7\nassert solution.minimumSplits([639294789, 46865782, 20587346]) == 2\nassert solution.minimumSplits([143016234, 388575179, 348796661, 609908351, 152492924, 713296174, 324785100, 979749666, 309924963]) == 6\nassert solution.minimumSplits([602808135, 594495113, 568132489, 431660790, 27705223]) == 5\nassert solution.minimumSplits([482513477, 984448440, 206399980, 145778700, 296637684, 538146970, 446080955]) == 3\nassert solution.minimumSplits([621144207, 811596825]) == 1\nassert solution.minimumSplits([630214364, 888261333, 38218679, 844552738, 279510225, 643840606, 732031245, 5514718, 480098]) == 8\nassert solution.minimumSplits([667484786, 24344149, 115240526]) == 2\nassert solution.minimumSplits([306578168, 5214293, 714753650, 678601339, 641944252, 35322275]) == 5\nassert solution.minimumSplits([891726411, 789030566, 946020493, 336162823, 600179263]) == 5\nassert solution.minimumSplits([755720349, 416568919, 80534446, 101380403, 830170207, 809611016]) == 6\nassert solution.minimumSplits([902095429, 660609894, 959463543, 401628666, 707613060, 844816682]) == 3\nassert solution.minimumSplits([971061257, 613458602]) == 2\nassert solution.minimumSplits([766899804, 794793154, 500328816, 626179261, 481969520, 928642116, 519926225, 433930150]) == 4\nassert solution.minimumSplits([129719112, 858462279, 128521824, 605037726, 988517583, 756918955, 975110966, 707666684, 308522442, 950609079]) == 4\nassert solution.minimumSplits([640943519, 794199140, 636827907, 145418571]) == 3\nassert solution.minimumSplits([838826510, 600753896, 170175541, 724887286]) == 3\nassert solution.minimumSplits([81180162, 165787133, 391796864]) == 3\nassert solution.minimumSplits([603616906, 587004109, 158538617, 299945851, 516029074, 384512612]) == 5\nassert solution.minimumSplits([561280524, 317446688, 987284964]) == 1\nassert solution.minimumSplits([542602539, 597970368, 466830706, 546211980, 330648298]) == 2\nassert solution.minimumSplits([936933215, 148562952, 774425370, 160031605, 601530243, 83695515, 117717614, 795974262, 221587943, 661089073]) == 7\nassert solution.minimumSplits([330512803, 305798942, 160511906, 586848462, 172122614, 224978793, 693937394, 888271766, 156528053, 171221843]) == 6\nassert solution.minimumSplits([798814401, 425820157, 674894255, 694728954]) == 2\nassert solution.minimumSplits([129416710, 467540967, 330466431, 765896335]) == 3\nassert solution.minimumSplits([827685141, 498773750, 550290384, 699909449, 215949032, 16462006]) == 4\nassert solution.minimumSplits([566517207, 165577782, 656150008, 656377772, 138994, 972921208, 411696667]) == 3\nassert solution.minimumSplits([228619693, 370859205, 799789052, 208713375]) == 4\nassert solution.minimumSplits([576838296, 7908330]) == 1\nassert solution.minimumSplits([777407493, 564472323, 52036406, 796157146]) == 2",
  "inefficient_solution": "class Solution:\n    def minimumSplits(self, nums):\n        n = len(nums)\n        dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n        for i in range(n-1, -1, -1):\n            for j in range(i, n):\n                dp[i][j] = float('inf')\n                for k in range(i, j):\n                    gcd_val = self.gcd(nums[i], nums[k])\n                    if gcd_val > 1:\n                        dp[i][j] = min(dp[i][j], dp[i][k] + 1)\n                if nums[i] == 1:\n                    dp[i][j] = 0\n        return dp[0][n-1]\n\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        return self.gcd(b, a % b)",
  "is_python": true
}