{
  "problem_idx": 1663,
  "task_name": "Smallest String With A Given Numeric Value",
  "markdown_description": "\nThe **numeric value** of a **lowercase character** is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.\n\n\nThe **numeric value** of a **string** consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `\"abe\"` is equal to `1 + 2 + 5 = 8`.\n\n\nYou are given two integers `n` and `k`. Return *the **lexicographically smallest string** with **length** equal to `n` and **numeric value** equal to `k`.*\n\n\nNote that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, k = 27\n**Output:** \"aay\"\n**Explanation:** The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, k = 73\n**Output:** \"aaszz\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n* `n <= k <= 26 * n`\n\n\n",
  "canonical_solution": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = ['a'] * n\n        i, d = n - 1, k - n\n        while d > 25:\n            ans[i] = 'z'\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord(ans[i]) + d)\n        return ''.join(ans)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = ['a'] * n\n        i, d = n - 1, k - n\n        while d > 25:\n            ans[i] = 'z'\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord(ans[i]) + d)\n        return ''.join(ans)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random n and k values\n    n = random.randint(1, 10)\n    k = random.randint(n, 26 * n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getSmallestString(n, k)\n\n    return n, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getSmallestString(n, k) == expected_result\n        print(f\"assert solution.getSmallestString({n}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getSmallestString({n}, {k}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getSmallestString(1, 2) == b\nassert solution.getSmallestString(8, 83) == aaaaazzz\nassert solution.getSmallestString(3, 61) == izz\nassert solution.getSmallestString(10, 219) == ajzzzzzzzz\nassert solution.getSmallestString(8, 106) == aaaaxzzz\nassert solution.getSmallestString(9, 214) == fzzzzzzzz\nassert solution.getSmallestString(2, 32) == fz\nassert solution.getSmallestString(5, 47) == aaarz\nassert solution.getSmallestString(8, 80) == aaaaawzz\nassert solution.getSmallestString(7, 94) == aaamzzz\nassert solution.getSmallestString(2, 4) == ac\nassert solution.getSmallestString(9, 95) == aaaaalzzz\nassert solution.getSmallestString(1, 23) == w\nassert solution.getSmallestString(9, 223) == ozzzzzzzz\nassert solution.getSmallestString(2, 21) == at\nassert solution.getSmallestString(1, 10) == j\nassert solution.getSmallestString(3, 53) == azz\nassert solution.getSmallestString(4, 81) == czzz\nassert solution.getSmallestString(7, 113) == aagzzzz\nassert solution.getSmallestString(6, 123) == arzzzz\nassert solution.getSmallestString(10, 258) == xzzzzzzzzz\nassert solution.getSmallestString(9, 161) == aaczzzzzz\nassert solution.getSmallestString(5, 12) == aaaah\nassert solution.getSmallestString(6, 123) == arzzzz\nassert solution.getSmallestString(6, 32) == aaaabz\nassert solution.getSmallestString(8, 146) == aanzzzzz\nassert solution.getSmallestString(4, 91) == mzzz\nassert solution.getSmallestString(7, 165) == izzzzzz\nassert solution.getSmallestString(10, 95) == aaaaaakzzz\nassert solution.getSmallestString(5, 95) == apzzz\nassert solution.getSmallestString(3, 26) == aax\nassert solution.getSmallestString(6, 126) == auzzzz\nassert solution.getSmallestString(9, 177) == aaszzzzzz\nassert solution.getSmallestString(9, 211) == czzzzzzzz\nassert solution.getSmallestString(4, 41) == aamz\nassert solution.getSmallestString(9, 126) == aaaarzzzz\nassert solution.getSmallestString(8, 34) == aaaaaabz\nassert solution.getSmallestString(9, 190) == agzzzzzzz\nassert solution.getSmallestString(5, 36) == aaagz\nassert solution.getSmallestString(4, 81) == czzz\nassert solution.getSmallestString(6, 67) == aaalzz\nassert solution.getSmallestString(5, 46) == aaaqz\nassert solution.getSmallestString(3, 45) == arz\nassert solution.getSmallestString(2, 38) == lz\nassert solution.getSmallestString(6, 19) == aaaaan\nassert solution.getSmallestString(5, 109) == ezzzz\nassert solution.getSmallestString(5, 68) == aanzz\nassert solution.getSmallestString(10, 49) == aaaaaaaaoz\nassert solution.getSmallestString(8, 167) == ajzzzzzz\nassert solution.getSmallestString(10, 63) == aaaaaaadzz\nassert solution.getSmallestString(9, 185) == abzzzzzzz\nassert solution.getSmallestString(4, 36) == aahz\nassert solution.getSmallestString(1, 6) == f\nassert solution.getSmallestString(5, 128) == xzzzz\nassert solution.getSmallestString(5, 36) == aaagz\nassert solution.getSmallestString(4, 75) == avzz\nassert solution.getSmallestString(7, 148) == aqzzzzz\nassert solution.getSmallestString(3, 23) == aau\nassert solution.getSmallestString(5, 89) == ajzzz\nassert solution.getSmallestString(9, 118) == aaaajzzzz\nassert solution.getSmallestString(10, 170) == aaakzzzzzz\nassert solution.getSmallestString(4, 70) == aqzz\nassert solution.getSmallestString(7, 155) == axzzzzz\nassert solution.getSmallestString(5, 61) == aagzz\nassert solution.getSmallestString(8, 12) == aaaaaaae\nassert solution.getSmallestString(7, 9) == aaaaaac\nassert solution.getSmallestString(2, 25) == ax\nassert solution.getSmallestString(3, 54) == bzz\nassert solution.getSmallestString(4, 92) == nzzz\nassert solution.getSmallestString(10, 78) == aaaaaaaszz\nassert solution.getSmallestString(8, 19) == aaaaaaal\nassert solution.getSmallestString(8, 141) == aaizzzzz\nassert solution.getSmallestString(2, 39) == mz\nassert solution.getSmallestString(4, 65) == alzz\nassert solution.getSmallestString(10, 57) == aaaaaaaawz\nassert solution.getSmallestString(4, 77) == axzz\nassert solution.getSmallestString(8, 25) == aaaaaaar\nassert solution.getSmallestString(3, 67) == ozz\nassert solution.getSmallestString(8, 13) == aaaaaaaf\nassert solution.getSmallestString(7, 44) == aaaaamz\nassert solution.getSmallestString(2, 35) == iz\nassert solution.getSmallestString(6, 8) == aaaaac\nassert solution.getSmallestString(4, 5) == aaab\nassert solution.getSmallestString(10, 143) == aaaaizzzzz\nassert solution.getSmallestString(3, 73) == uzz\nassert solution.getSmallestString(8, 196) == nzzzzzzz\nassert solution.getSmallestString(3, 36) == aiz\nassert solution.getSmallestString(2, 6) == ae\nassert solution.getSmallestString(8, 189) == gzzzzzzz\nassert solution.getSmallestString(8, 72) == aaaaaozz\nassert solution.getSmallestString(8, 14) == aaaaaaag\nassert solution.getSmallestString(6, 23) == aaaaar\nassert solution.getSmallestString(5, 27) == aaaaw\nassert solution.getSmallestString(3, 41) == anz\nassert solution.getSmallestString(8, 80) == aaaaawzz\nassert solution.getSmallestString(8, 96) == aaaanzzz\nassert solution.getSmallestString(1, 25) == y\nassert solution.getSmallestString(5, 33) == aaadz\nassert solution.getSmallestString(4, 20) == aaaq\nassert solution.getSmallestString(10, 179) == aaatzzzzzz",
  "inefficient_solution": "class Solution:\n    def getSmallestString(self, n: int, k: int) -> str:\n        ans = []\n        for _ in range(n):\n            ans.append('a')\n        i, d = n - 1, k - n\n        while d > 25:\n            ans[i] = 'z'\n            ans.append('z')  # Excessive memory allocation\n            d -= 25\n            i -= 1\n        ans[i] = chr(ord(ans[i]) + d)\n        ans[0] = chr(97 + (ans[0] == 'a' and 1 or 0))  # Excessive memory allocation\n        return ''.join(ans)",
  "is_python": true
}