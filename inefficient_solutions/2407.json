{
  "problem_idx": 2407,
  "task_name": "Longest Increasing Subsequence II",
  "markdown_description": "\nYou are given an integer array `nums` and an integer `k`.\n\n\nFind the longest subsequence of `nums` that meets the following requirements:\n\n\n* The subsequence is **strictly increasing** and\n* The difference between adjacent elements in the subsequence is **at most** `k`.\n\n\nReturn *the length of the **longest** **subsequence** that meets the requirements.*\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,2,1,4,3,4,5,8,15], k = 3\n**Output:** 5\n**Explanation:**\nThe longest subsequence that meets the requirements is [1,3,4,5,8].\nThe subsequence has a length of 5, so we return 5.\nNote that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [7,4,5,1,8,12,4,7], k = 5\n**Output:** 4\n**Explanation:**\nThe longest subsequence that meets the requirements is [4,5,8,12].\nThe subsequence has a length of 4, so we return 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,5], k = 1\n**Output:** 1\n**Explanation:**\nThe longest subsequence that meets the requirements is [1].\nThe subsequence has a length of 1, so we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i], k <= 105`\n\n\n",
  "canonical_solution": "class Node:\n    def __init__(self):\n        self.l = 0\n        self.r = 0\n        self.v = 0\n\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.tr = [Node() for _ in range(4 * n)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l = l\n        self.tr[u].r = r\n        if l == r:\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n\n    def modify(self, u, x, v):\n        if self.tr[u].l == x and self.tr[u].r == x:\n            self.tr[u].v = v\n            return\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if x <= mid:\n            self.modify(u << 1, x, v)\n        else:\n            self.modify(u << 1 | 1, x, v)\n        self.pushup(u)\n\n    def pushup(self, u):\n        self.tr[u].v = max(self.tr[u << 1].v, self.tr[u << 1 | 1].v)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].v\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        v = 0\n        if l <= mid:\n            v = self.query(u << 1, l, r)\n        if r > mid:\n            v = max(v, self.query(u << 1 | 1, l, r))\n        return v\n\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        tree = SegmentTree(max(nums))\n        ans = 1\n        for v in nums:\n            t = tree.query(1, v - k, v - 1) + 1\n            ans = max(ans, t)\n            tree.modify(1, v, t)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Node:\n    def __init__(self):\n        self.l = 0\n        self.r = 0\n        self.v = 0\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.tr = [Node() for _ in range(4 * n)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l = l\n        self.tr[u].r = r\n        if l == r:\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n\n    def modify(self, u, x, v):\n        if self.tr[u].l == x and self.tr[u].r == x:\n            self.tr[u].v = v\n            return\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if x <= mid:\n            self.modify(u << 1, x, v)\n        else:\n            self.modify(u << 1 | 1, x, v)\n        self.pushup(u)\n\n    def pushup(self, u):\n        self.tr[u].v = max(self.tr[u << 1].v, self.tr[u << 1 | 1].v)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].v\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        v = 0\n        if l <= mid:\n            v = self.query(u << 1, l, r)\n        if r > mid:\n            v = max(v, self.query(u << 1 | 1, l, r))\n        return v\n\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int], k: int) -> int:\n        tree = SegmentTree(max(nums))\n        ans = 1\n        for v in nums:\n            t = tree.query(1, v - k, v - 1) + 1\n            ans = max(ans, t)\n            tree.modify(1, v, t)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    k = random.randint(1, 101)\n\n    expected_result = solution.lengthOfLIS(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lengthOfLIS(nums, k) == expected_result\n        print(f\"assert solution.lengthOfLIS({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.lengthOfLIS({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lengthOfLIS([88, 72, 90, 14, 60], 9) == 2\nassert solution.lengthOfLIS([31, 17, 93, 84, 16], 71) == 2\nassert solution.lengthOfLIS([61, 65, 54, 58, 62, 44, 71, 63, 75], 64) == 5\nassert solution.lengthOfLIS([93, 40, 16, 88, 36, 1], 40) == 2\nassert solution.lengthOfLIS([64, 11, 55, 12, 84, 91, 82, 71, 79, 73], 69) == 4\nassert solution.lengthOfLIS([52, 70], 66) == 2\nassert solution.lengthOfLIS([4, 27], 5) == 1\nassert solution.lengthOfLIS([64, 62, 18, 99, 1, 3], 43) == 2\nassert solution.lengthOfLIS([78, 86, 85, 70, 62], 14) == 2\nassert solution.lengthOfLIS([71, 98, 67, 43, 54, 19, 46], 82) == 2\nassert solution.lengthOfLIS([34, 24, 36, 41, 1, 87, 48, 71], 83) == 5\nassert solution.lengthOfLIS([17, 27, 9, 14, 20, 52, 11, 51, 63, 98], 6) == 3\nassert solution.lengthOfLIS([54, 29], 20) == 1\nassert solution.lengthOfLIS([98, 64, 83, 3, 86, 77, 4], 19) == 3\nassert solution.lengthOfLIS([88, 75, 67, 33, 58, 20], 32) == 2\nassert solution.lengthOfLIS([72, 34], 62) == 1\nassert solution.lengthOfLIS([36, 1, 63, 26, 42, 86, 68], 71) == 4\nassert solution.lengthOfLIS([59, 46, 58, 21, 51], 92) == 2\nassert solution.lengthOfLIS([44, 96, 61, 56, 49, 69, 93], 64) == 4\nassert solution.lengthOfLIS([65, 49, 71, 75, 4, 90, 93, 47, 85], 77) == 5\nassert solution.lengthOfLIS([34, 64], 10) == 1\nassert solution.lengthOfLIS([99, 45], 45) == 1\nassert solution.lengthOfLIS([24, 10, 32, 68, 16], 27) == 2\nassert solution.lengthOfLIS([42, 62, 1, 39, 45, 24, 98, 11], 71) == 4\nassert solution.lengthOfLIS([6, 90, 58, 62, 86, 14, 8, 46, 88], 27) == 4\nassert solution.lengthOfLIS([22, 8, 82, 52], 82) == 2\nassert solution.lengthOfLIS([18, 58, 21, 98], 26) == 2\nassert solution.lengthOfLIS([46, 38], 66) == 1\nassert solution.lengthOfLIS([76, 8, 78, 94, 75, 45, 53], 40) == 3\nassert solution.lengthOfLIS([66, 24, 46, 60, 70], 73) == 4\nassert solution.lengthOfLIS([18, 20], 43) == 2\nassert solution.lengthOfLIS([83, 48, 95, 2, 90, 73, 64], 44) == 2\nassert solution.lengthOfLIS([76, 50, 11, 27, 33, 71, 67], 14) == 2\nassert solution.lengthOfLIS([46, 89, 62, 1, 90, 36], 64) == 3\nassert solution.lengthOfLIS([16, 87], 80) == 2\nassert solution.lengthOfLIS([6, 62, 15, 31, 40, 50, 38, 65], 1) == 1\nassert solution.lengthOfLIS([15, 11], 24) == 1\nassert solution.lengthOfLIS([42, 1, 66, 33, 94], 78) == 3\nassert solution.lengthOfLIS([86, 67, 97], 55) == 2\nassert solution.lengthOfLIS([23, 1], 59) == 1\nassert solution.lengthOfLIS([7, 29], 16) == 1\nassert solution.lengthOfLIS([18, 25, 80, 65, 75], 59) == 4\nassert solution.lengthOfLIS([65, 96, 98, 97, 78, 68, 80, 17, 55, 37], 31) == 3\nassert solution.lengthOfLIS([13, 48, 69, 28, 76, 34, 2, 8], 20) == 3\nassert solution.lengthOfLIS([9, 79, 57, 25, 47, 12, 16, 97], 100) == 4\nassert solution.lengthOfLIS([57, 42, 7, 93], 101) == 2\nassert solution.lengthOfLIS([95, 48], 39) == 1\nassert solution.lengthOfLIS([27, 26, 69, 49], 92) == 2\nassert solution.lengthOfLIS([73, 68, 41, 1, 56, 49], 49) == 2\nassert solution.lengthOfLIS([48, 41, 55, 32, 25, 39], 78) == 2\nassert solution.lengthOfLIS([85, 64, 74, 32, 67, 11, 34, 92, 17, 24], 25) == 3\nassert solution.lengthOfLIS([47, 70, 6, 99, 37, 74, 43, 88, 66, 93], 8) == 2\nassert solution.lengthOfLIS([64, 72, 65, 50, 38, 29, 27, 23, 8], 65) == 2\nassert solution.lengthOfLIS([36, 32, 92, 37, 68, 30, 98, 41], 30) == 3\nassert solution.lengthOfLIS([64, 86, 54], 63) == 2\nassert solution.lengthOfLIS([76, 36, 41, 7, 67, 51, 61], 42) == 4\nassert solution.lengthOfLIS([94, 73, 31, 79, 7, 90, 66], 36) == 3\nassert solution.lengthOfLIS([63, 51, 88, 8, 67, 53], 46) == 2\nassert solution.lengthOfLIS([8, 14, 71, 57, 32, 82, 55], 25) == 4\nassert solution.lengthOfLIS([35, 73, 66], 76) == 2\nassert solution.lengthOfLIS([38, 66, 57, 5, 87, 13, 84, 75], 5) == 1\nassert solution.lengthOfLIS([75, 87, 81, 91, 14, 46, 48], 82) == 3\nassert solution.lengthOfLIS([99, 94, 30, 34, 11], 6) == 2\nassert solution.lengthOfLIS([52, 22, 64, 89, 82, 91], 64) == 4\nassert solution.lengthOfLIS([75, 96, 61, 90, 64, 56, 65], 55) == 3\nassert solution.lengthOfLIS([42, 28, 7, 13, 76, 15, 61, 79], 30) == 3\nassert solution.lengthOfLIS([25, 13, 22], 57) == 2\nassert solution.lengthOfLIS([94, 77, 41, 78, 18, 46, 2], 13) == 2\nassert solution.lengthOfLIS([74, 60, 37, 42, 38, 40, 61], 9) == 3\nassert solution.lengthOfLIS([23, 66, 17, 56, 4, 58], 34) == 3\nassert solution.lengthOfLIS([12, 63, 61, 74, 48, 73, 89], 60) == 4\nassert solution.lengthOfLIS([40, 6, 35, 11, 89, 3, 65, 33, 82, 41], 77) == 4\nassert solution.lengthOfLIS([25, 12, 85, 57, 87, 65, 71, 92, 21], 12) == 3\nassert solution.lengthOfLIS([71, 53, 43, 32], 72) == 1\nassert solution.lengthOfLIS([44, 62, 86], 89) == 3\nassert solution.lengthOfLIS([8, 85, 92, 67, 56, 6], 99) == 3\nassert solution.lengthOfLIS([76, 55, 11, 9, 16, 7, 66, 41, 59, 62], 43) == 5\nassert solution.lengthOfLIS([71, 6, 73, 46], 26) == 2\nassert solution.lengthOfLIS([35, 45, 53, 76, 95, 78], 78) == 5\nassert solution.lengthOfLIS([82, 48, 46], 25) == 1\nassert solution.lengthOfLIS([93, 52, 92, 63, 8, 61, 68], 46) == 3\nassert solution.lengthOfLIS([51, 66, 40, 27, 78, 67, 23, 42, 25], 27) == 3\nassert solution.lengthOfLIS([80, 22, 52], 78) == 2\nassert solution.lengthOfLIS([79, 56, 70, 7], 31) == 2\nassert solution.lengthOfLIS([32, 11, 35, 3, 97, 68, 85], 96) == 4\nassert solution.lengthOfLIS([13, 29], 82) == 2\nassert solution.lengthOfLIS([83, 82, 8, 15, 40], 67) == 3\nassert solution.lengthOfLIS([93, 21, 70, 5, 98, 66, 72, 68, 42], 76) == 3\nassert solution.lengthOfLIS([49, 78, 74, 87, 27, 75, 45, 55, 39], 94) == 3\nassert solution.lengthOfLIS([81, 88], 71) == 2\nassert solution.lengthOfLIS([71, 25, 65, 52, 24, 54, 28, 43], 38) == 3\nassert solution.lengthOfLIS([43, 86], 28) == 1\nassert solution.lengthOfLIS([22, 33, 96, 48, 27], 52) == 3\nassert solution.lengthOfLIS([39, 36, 3, 24, 84, 58, 49, 66, 8, 55], 31) == 4\nassert solution.lengthOfLIS([33, 12, 80, 52, 74, 85, 50, 24, 40], 94) == 4\nassert solution.lengthOfLIS([46, 89, 51, 29], 33) == 2\nassert solution.lengthOfLIS([19, 69, 3, 29, 93, 48, 100, 44], 72) == 4\nassert solution.lengthOfLIS([85, 98, 37, 75, 74, 62, 23, 31], 79) == 2\nassert solution.lengthOfLIS([34, 73], 25) == 1\nassert solution.lengthOfLIS([2, 93, 23], 76) == 2",
  "inefficient_solution": "class Solution:\n    def lengthOfLIS(self, nums, k):\n        table = {}\n        for i, v in enumerate(nums):\n            j = v - k\n            while j in table and table[j] < i:\n                j = table[j] + 1\n            table[v] = i\n            ans = 0\n            for u in table:\n                if u >= j:\n                    ans = max(ans, i - table[u])\n            ans = max(ans, 1)\n            table[v] = i - ans + 1\n        return max(table.values())",
  "is_python": true
}