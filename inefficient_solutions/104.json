{
  "problem_idx": 104,
  "task_name": "Maximum Depth of Binary Tree",
  "markdown_description": "\nGiven the `root` of a binary tree, return *its maximum depth*.\n\n\nA binary tree's **maximum depth**\u00a0is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0104.Maximum%20Depth%20of%20Binary%20Tree/images/tmp-tree.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** 3\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [1,null,2]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 104]`.\n* `-100 <= Node.val <= 100`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        if root is None:\n            return 0\n        l, r = self.maxDepth(root.left), self.maxDepth(root.right)\n        return 1 + max(l, r)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxDepth(self, root):\n        if root is None:\n            return 0\n        l, r = self.maxDepth(root.left), self.maxDepth(root.right)\n        return 1 + max(l, r)\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a binary tree\n    tree = generate_tree()\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxDepth(tree)\n\n    return tree, expected_result\n\ndef generate_tree():\n    nodes = [TreeNode(val=random.randint(-100, 100)) for _ in range(random.randint(1, 10))]\n    root = nodes[0]\n    for i in range(len(nodes)):\n        if 2*i+1 < len(nodes):\n            nodes[i].left = nodes[2*i+1]\n        if 2*i+2 < len(nodes):\n            nodes[i].right = nodes[2*i+2]\n    return root\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tree, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxDepth(tree) == expected_result\n        print(f\"assert solution.maxDepth({tree}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxDepth({tree}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf22cc50>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf22cc50>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf22ce10>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf22ce10>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf356590>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf356590>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf356590>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 1\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 1\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 1\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 1\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 1\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 1\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 1\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 1\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206890>) == 4\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 3\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206850>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206450>) == 2\nassert solution.maxDepth(<__main__.TreeNode object at 0x7f7caf206490>) == 4",
  "inefficient_solution": "",
  "is_python": true
}