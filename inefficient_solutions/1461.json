{
  "problem_idx": 1461,
  "task_name": "Check If a String Contains All Binary Codes of Size K",
  "markdown_description": "\nGiven a binary string `s` and an integer `k`, return `true` *if every binary code of length* `k` *is a substring of* `s`. Otherwise, return `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"00110110\", k = 2\n**Output:** true\n**Explanation:** The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"0110\", k = 1\n**Output:** true\n**Explanation:** The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"0110\", k = 2\n**Output:** false\n**Explanation:** The binary code \"00\" is of length 2 and does not exist in the array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 5 * 105`\n* `s[i]` is either `'0'` or `'1'`.\n* `1 <= k <= 20`\n\n\n",
  "canonical_solution": "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        ss = {s[i : i + k] for i in range(len(s) - k + 1)}\n        return len(ss) == 1 << k\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        ss = {s[i : i + k] for i in range(len(s) - k + 1)}\n        return len(ss) == 1 << k\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random string\n    s = \"\"\n    for _ in range(random.randint(1, 100)):\n        s += random.choice([\"0\", \"1\"])\n\n    # Generate a random k value\n    k = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.hasAllCodes(s, k)\n\n    return s, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.hasAllCodes(s, k) == expected_result\n        print(f\"assert solution.hasAllCodes('{s}', {k}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.hasAllCodes('{s}', {k}) == {expected_result}\"\n        )\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.hasAllCodes('0010111011001000', 9) == False\nassert solution.hasAllCodes('100000111', 4) == False\nassert solution.hasAllCodes('10101000110000110000011011011110111100100100001100111010001101001001000010110100101110110101100111', 8) == False\nassert solution.hasAllCodes('111001000000111000011111100101011100000010010010011100100010100111000101', 2) == True\nassert solution.hasAllCodes('11', 9) == False\nassert solution.hasAllCodes('000010101001', 3) == False\nassert solution.hasAllCodes('10011010000101110', 2) == True\nassert solution.hasAllCodes('100010000110010101101111111010011011111110101001100', 8) == False\nassert solution.hasAllCodes('0011100001100110011001110101110001010010100000101110001001101011001011101001111010011', 2) == True\nassert solution.hasAllCodes('00010100', 7) == False\nassert solution.hasAllCodes('110111010110000001110010101000001111000001100011100110100101011001110000000101000000001000', 2) == True\nassert solution.hasAllCodes('0110100110', 3) == False\nassert solution.hasAllCodes('011000010111010101011110110001000110111101001000110111110', 7) == False\nassert solution.hasAllCodes('1101000011101100101001101011110110111111000101011111011100000001101100001110101100001', 10) == False\nassert solution.hasAllCodes('111010101110000110000110001101010011101010110110000', 8) == False\nassert solution.hasAllCodes('0010010110110010010000', 3) == False\nassert solution.hasAllCodes('01100101001111100100110011110101001110011100000010', 5) == False\nassert solution.hasAllCodes('110010101010010100111101110000001110011010011101101110110101', 4) == True\nassert solution.hasAllCodes('100111100000001110011101000010010111001011011100111011010111001010110100111111011101100011111', 7) == False\nassert solution.hasAllCodes('00011100111110101100011001101110111100100101111011111', 1) == True\nassert solution.hasAllCodes('0001001011100110010000011100010000101110010010000010100001001111010110111110111110011100000101000', 4) == True\nassert solution.hasAllCodes('110101100010000000100100110001001011000010110', 5) == False\nassert solution.hasAllCodes('000111011010011110100001110101101011100111010100110011', 7) == False\nassert solution.hasAllCodes('0010111010100000011010001010011110110000', 7) == False\nassert solution.hasAllCodes('001', 3) == False\nassert solution.hasAllCodes('01110001011001100000110011010010100010001010100110110100111011010011011', 10) == False\nassert solution.hasAllCodes('101100101000010001100110', 8) == False\nassert solution.hasAllCodes('00011000111001111001100101100000110000011111000100011111110000101001010100011000', 5) == False\nassert solution.hasAllCodes('00001010', 5) == False\nassert solution.hasAllCodes('101111110010111110001100011111101111111011001000110010001000111', 7) == False\nassert solution.hasAllCodes('010101001111101111010100101011001100000000110001010101000110011010101000111', 2) == True\nassert solution.hasAllCodes('01100111110011000100111111110100011101010001011101110101110001111', 9) == False\nassert solution.hasAllCodes('10011110101100110110101110001010110011001101101011101110110111101110', 5) == False\nassert solution.hasAllCodes('01101111011001010010', 5) == False\nassert solution.hasAllCodes('110000001001001001110010011111001000011110010001111110110100111100101100010001001111000011000101001', 1) == True\nassert solution.hasAllCodes('01000100110011001011011101000000001', 8) == False\nassert solution.hasAllCodes('01001001001000111011011101101111010010110001010', 1) == True\nassert solution.hasAllCodes('100010111001011101001100000010100101001010', 5) == False\nassert solution.hasAllCodes('11100000010011010110111011001001010110100111110101100000001001', 7) == False\nassert solution.hasAllCodes('00000001110001010010010101010101110011100100110100010001010101011', 6) == False\nassert solution.hasAllCodes('000010100101', 7) == False\nassert solution.hasAllCodes('11101011111011001000101001100010111001101100000100100000011', 3) == True\nassert solution.hasAllCodes('101010111110101011111000111011001010111100100110100100100100101010100011010111000', 7) == False\nassert solution.hasAllCodes('0011110100001101010111010111011111100111101011010011101', 4) == False\nassert solution.hasAllCodes('000011110100110110010110010110001011100011110110111101100100110101000000101111', 7) == False\nassert solution.hasAllCodes('11000010000011000111001010111011101100110100010111000000001010101000010110001001111001111111110', 5) == True\nassert solution.hasAllCodes('1111111011000010001001000011000110010100000000011011000000101010111001100000101111001000110000010', 3) == True\nassert solution.hasAllCodes('010011101111101111001100010000011111', 2) == True\nassert solution.hasAllCodes('01100111101001000101100100010001111011111111111110101100101011000001011101010110111000101000000', 6) == False\nassert solution.hasAllCodes('01110000000101110101011010011111000101100', 4) == True\nassert solution.hasAllCodes('010011101000010101110100110110011010110101001000001111001', 9) == False\nassert solution.hasAllCodes('0010111010001100001000011001011001111110001111011011010000101110000010100001100001', 7) == False\nassert solution.hasAllCodes('00000001101010110001111000010110011000011100000101001', 4) == True\nassert solution.hasAllCodes('01101', 8) == False\nassert solution.hasAllCodes('111000001110010000000001000110011000110010101011000001110001010110100110110010', 8) == False\nassert solution.hasAllCodes('1110111010101011000001110100010010000000110010001010001111101110111001001001101001011110000010', 7) == False\nassert solution.hasAllCodes('0110010010110010001', 4) == False\nassert solution.hasAllCodes('100110110001101001011000011111010100010010110110011101111111110110111001110', 7) == False\nassert solution.hasAllCodes('11000111000100110011111011010110011101', 9) == False\nassert solution.hasAllCodes('111101110010010011010101001', 8) == False\nassert solution.hasAllCodes('011011110001000010101', 1) == True\nassert solution.hasAllCodes('011', 9) == False\nassert solution.hasAllCodes('01000111010000000001101000011011110001110101110111000101110100010000110', 10) == False\nassert solution.hasAllCodes('00100010100001100000110001010111000010100111110100011111110010110101101100010001101010111', 1) == True\nassert solution.hasAllCodes('000101011011110101000101010100001111111010111010100011001000010010100101110000010100111010110011101', 10) == False\nassert solution.hasAllCodes('0000001111110010000010001111011101101100001101100011011010110000111010101000011110000010111111011011', 5) == False\nassert solution.hasAllCodes('1001001011101000111001110001110001110010110101010111101010010110101011011111000010101110100111101001', 5) == False\nassert solution.hasAllCodes('100111', 6) == False\nassert solution.hasAllCodes('110010010110110100110111111101101111110101001001', 8) == False\nassert solution.hasAllCodes('00100110001010010010010101100011001101', 8) == False\nassert solution.hasAllCodes('0100000001101011101111000011000111000110011111101000011101101101', 9) == False\nassert solution.hasAllCodes('100010100101000110011001110111000111101010011000000010101100000101', 4) == True\nassert solution.hasAllCodes('000000100010110011111000001110110101010100011110', 9) == False\nassert solution.hasAllCodes('11110100010100111011011001010111011000000110010000001000101011001110000100001101', 2) == True\nassert solution.hasAllCodes('1101001011000111000', 2) == True\nassert solution.hasAllCodes('1111010100010101001010100100111111001000010011111101000111010101001010101001', 3) == True\nassert solution.hasAllCodes('101111111111100101101010000', 6) == False\nassert solution.hasAllCodes('0010001010101001110101111010111001011001011011100100010100000000110001100011', 2) == True\nassert solution.hasAllCodes('110001101001101110101011101110111001000101100101101101010001', 3) == True\nassert solution.hasAllCodes('10101111011110010111010110110000011010110010011001001000111111100100110111111', 1) == True\nassert solution.hasAllCodes('10100000001100010110111110000101010100000110011100101000001', 4) == True\nassert solution.hasAllCodes('1100001011011100111011', 10) == False\nassert solution.hasAllCodes('1100000100010110011110100001110100111010100001', 1) == True\nassert solution.hasAllCodes('1010011010010010000111100001001011010010000101011011100110100010110001101001010001100101001101000111', 4) == True\nassert solution.hasAllCodes('01100100011111110001101011100001100100000100010011100000000011001001111110001110111111001', 6) == False\nassert solution.hasAllCodes('11101010010010000011011110110011001111110001101001100011111001011111010110111111111011000', 10) == False\nassert solution.hasAllCodes('01', 5) == False\nassert solution.hasAllCodes('001010001000011011101101001101110000011', 4) == False\nassert solution.hasAllCodes('0000101000111001111110', 6) == False\nassert solution.hasAllCodes('110100111100010101100001001011111010001101000111000001101010101010101110010110000111010011100100', 9) == False\nassert solution.hasAllCodes('0000001011001110110111010101011111011110101111110011000000111111010111011011100111011101', 4) == False\nassert solution.hasAllCodes('1101010111011101000100101100001110110111101010110111010101111', 1) == True\nassert solution.hasAllCodes('100101101100000111000', 7) == False\nassert solution.hasAllCodes('00001000111010010010010', 7) == False\nassert solution.hasAllCodes('1001000100010111011100110101011101100000000100110001001011110100001001', 8) == False\nassert solution.hasAllCodes('10010110011101110111000010011111', 7) == False\nassert solution.hasAllCodes('1011001011000111000011001010100100', 8) == False\nassert solution.hasAllCodes('1011010011101001', 8) == False\nassert solution.hasAllCodes('100010101111101001111110000111100011100000010010010011100111100111010000000111110011100', 8) == False\nassert solution.hasAllCodes('1000010100111111010110111111010000101011010', 9) == False",
  "inefficient_solution": "class Solution:\n    def hasAllCodes(self, s: str, k: int) -> bool:\n        codes = []\n        for i in range(len(s) - k + 1):\n            codes.append([int(c) for c in s[i : i + k]])\n        return len(set(tuple(code) for code in codes)) == 1 << k",
  "is_python": true
}