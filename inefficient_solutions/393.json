{
  "problem_idx": 393,
  "task_name": "UTF",
  "markdown_description": "\nGiven an integer array `data` representing the data, return whether it is a valid **UTF-8** encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).\n\n\nA character in **UTF8** can be from **1 to 4 bytes** long, subjected to the following rules:\n\n\n1. For a **1-byte** character, the first bit is a `0`, followed by its Unicode code.\n2. For an **n-bytes** character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.\n\n\nThis is how the UTF-8 encoding would work:\n\n\n\n```\n\n     Number of Bytes   |        UTF-8 Octet Sequence\n                       |              (binary)\n   --------------------+-----------------------------------------\n            1          |   0xxxxxxx\n            2          |   110xxxxx 10xxxxxx\n            3          |   1110xxxx 10xxxxxx 10xxxxxx\n            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n```\n\n`x` denotes a bit in the binary form of a byte that may be either `0` or `1`.\n\n\n**Note:** The input is an array of integers. Only the **least significant 8 bits** of each integer is used to store the data. This means each integer represents only 1 byte of data.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** data = [197,130,1]\n**Output:** true\n**Explanation:** data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** data = [235,140,4]\n**Output:** false\n**Explanation:** data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= data.length <= 2 * 104`\n* `0 <= data[i] <= 255`\n\n\n",
  "canonical_solution": "class Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        n = 0\n        for v in data:\n            if n > 0:\n                if v >> 6 != 0b10:\n                    return False\n                n -= 1\n            elif v >> 7 == 0:\n                n = 0\n            elif v >> 5 == 0b110:\n                n = 1\n            elif v >> 4 == 0b1110:\n                n = 2\n            elif v >> 3 == 0b11110:\n                n = 3\n            else:\n                return False\n        return n == 0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        n = 0\n        for v in data:\n            if n > 0:\n                if v >> 6 != 0b10:\n                    return False\n                n -= 1\n            elif v >> 7 == 0:\n                n = 0\n            elif v >> 5 == 0b110:\n                n = 1\n            elif v >> 4 == 0b1110:\n                n = 2\n            elif v >> 3 == 0b11110:\n                n = 3\n            else:\n                return False\n        return n == 0\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Define the constraints\n    min_data_length = 1\n    max_data_length = 20\n    min_data_val = 0\n    max_data_val = 255\n    \n    # Generate random data list\n    data = [random.randint(min_data_val, max_data_val) for _ in range(random.randint(min_data_length, max_data_length))]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.validUtf8(data)\n\n    return data, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        data, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.validUtf8(data) == expected_result\n        print(f\"assert solution.validUtf8({data}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.validUtf8({data}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.validUtf8([53, 211, 61, 213, 1, 181, 166]) == False\nassert solution.validUtf8([76, 143, 141, 14, 232, 12, 66]) == False\nassert solution.validUtf8([140, 208, 23, 192, 38, 188, 37, 115, 207, 40, 177, 83, 11, 22, 32, 252]) == False\nassert solution.validUtf8([173, 178, 141, 243, 220, 119, 106, 98, 161, 185, 106, 151, 196, 108, 15]) == False\nassert solution.validUtf8([154]) == False\nassert solution.validUtf8([176, 253, 166, 52, 11, 197, 207, 252, 154, 136, 183, 110, 214, 228, 112, 129, 78, 29]) == False\nassert solution.validUtf8([181, 102, 78, 94, 132, 156, 106, 201, 171, 117, 31, 103, 166, 27, 88, 125, 211, 178, 122]) == False\nassert solution.validUtf8([165, 247]) == False\nassert solution.validUtf8([68, 237, 82, 173, 8, 122, 230, 100, 251, 162, 70, 19, 1, 213, 162, 54]) == False\nassert solution.validUtf8([16, 49, 222, 25, 111, 246, 187, 50, 158, 113, 205, 180, 143, 233, 117, 116, 227, 178, 155, 30]) == False\nassert solution.validUtf8([138, 227, 216, 249, 91, 98, 160, 5, 229, 253, 32, 174]) == False\nassert solution.validUtf8([81, 139, 113, 132, 96, 0, 12, 227, 164, 24, 51, 210, 163]) == False\nassert solution.validUtf8([179, 248, 255, 108, 70, 51]) == False\nassert solution.validUtf8([186, 118, 31, 18, 147]) == False\nassert solution.validUtf8([29, 251, 136, 245, 253, 193, 116, 205, 44, 40, 193, 161, 126, 252]) == False\nassert solution.validUtf8([226, 14, 26, 95, 3, 207, 159, 58, 192, 62, 86, 84, 255, 39, 40, 21, 141, 177, 159]) == False\nassert solution.validUtf8([91, 249, 148, 25, 186, 102, 98, 245, 121, 56, 134, 187, 182, 211, 120, 237, 147, 35]) == False\nassert solution.validUtf8([120, 88, 162, 113, 88, 235, 99, 237, 5, 246, 61, 130, 114]) == False\nassert solution.validUtf8([213, 37, 27]) == False\nassert solution.validUtf8([245, 182, 245, 251]) == False\nassert solution.validUtf8([171, 26, 77, 254, 110, 237, 93, 129, 155, 153, 205, 110, 233, 11, 191, 2]) == False\nassert solution.validUtf8([224, 38, 188, 157, 65, 42, 226, 73, 108, 130, 137, 232]) == False\nassert solution.validUtf8([178, 223, 51, 139, 58]) == False\nassert solution.validUtf8([86, 21, 73, 103, 210, 220]) == False\nassert solution.validUtf8([217, 221, 24, 15, 129, 4, 158, 49, 145, 194, 187, 143]) == False\nassert solution.validUtf8([46, 188, 161, 240, 254, 97, 252, 232, 177, 15, 86, 46, 251, 183, 231, 121, 76, 126, 138]) == False\nassert solution.validUtf8([106, 175, 112, 177, 7, 58, 221, 212, 110, 229, 88, 233]) == False\nassert solution.validUtf8([37, 32, 184, 13, 158, 206, 204]) == False\nassert solution.validUtf8([211, 192, 235, 15, 91]) == False\nassert solution.validUtf8([201, 51]) == False\nassert solution.validUtf8([247, 131, 237, 156, 18]) == False\nassert solution.validUtf8([25, 99, 226, 98, 39, 35, 26, 22, 205, 127, 235, 142, 0, 217, 77, 128, 198, 54]) == False\nassert solution.validUtf8([20, 99, 248, 44, 20, 144, 170, 61, 94, 5]) == False\nassert solution.validUtf8([175, 206, 79]) == False\nassert solution.validUtf8([154, 115, 130, 242, 235, 69, 108, 159, 125, 220, 188, 122, 221, 198, 37, 8, 116, 114, 223]) == False\nassert solution.validUtf8([150, 173, 228, 110, 7, 148, 1, 210, 252]) == False\nassert solution.validUtf8([31, 109, 164, 236, 142, 254, 251, 104]) == False\nassert solution.validUtf8([212, 205, 27, 183, 92, 88, 161, 167, 36, 244, 198, 27, 166, 145, 100, 71, 42, 14, 221]) == False\nassert solution.validUtf8([43, 99, 95, 141, 57, 72, 191, 93, 245]) == False\nassert solution.validUtf8([84, 210, 55, 57, 201, 18, 103, 243, 240, 244]) == False\nassert solution.validUtf8([200, 137, 46, 158, 145, 148]) == False\nassert solution.validUtf8([250, 131, 181, 77, 205, 47, 70, 26, 43, 142, 202, 187, 29, 152, 245, 235, 16, 69, 234, 94]) == False\nassert solution.validUtf8([161, 120, 117, 76, 254, 125]) == False\nassert solution.validUtf8([160, 253, 236, 143, 251, 119, 35, 61, 108, 87, 99, 227, 6, 112, 18, 246, 218, 219]) == False\nassert solution.validUtf8([46, 106, 141, 242, 196]) == False\nassert solution.validUtf8([116]) == True\nassert solution.validUtf8([151, 67, 138, 212, 137, 230, 41]) == False\nassert solution.validUtf8([222, 29, 97, 207, 153, 132, 156, 109, 239, 61, 56, 32, 219, 163, 33]) == False\nassert solution.validUtf8([252, 117, 123, 214, 234, 15, 206, 24, 250, 58, 187, 236, 194, 46, 177, 24, 104, 4, 73, 248]) == False\nassert solution.validUtf8([188, 109, 92, 159]) == False\nassert solution.validUtf8([207, 253, 88, 24, 104, 19, 71, 244, 72, 40, 149, 50, 11, 133, 40, 120, 71, 211, 11]) == False\nassert solution.validUtf8([26, 254, 164]) == False\nassert solution.validUtf8([59, 54, 70, 79, 120]) == True\nassert solution.validUtf8([146, 133, 251, 208, 96, 223, 116, 199, 3, 236, 165, 156, 43, 172, 144, 59, 119]) == False\nassert solution.validUtf8([211, 143, 61, 87, 188, 74, 43, 48, 118, 19, 180, 176, 237, 192, 68, 126, 15]) == False\nassert solution.validUtf8([75, 207, 180, 208, 50, 114, 95, 172, 172, 233, 153, 115, 130, 124, 132]) == False\nassert solution.validUtf8([137, 222, 110, 247, 128, 202, 44, 147, 1, 197, 179, 179, 147, 78]) == False\nassert solution.validUtf8([222, 59, 170, 62, 144]) == False\nassert solution.validUtf8([107, 203, 10, 94, 158, 100, 73, 21, 255, 84, 154, 8, 181, 246, 53, 126, 148]) == False\nassert solution.validUtf8([107, 230, 28, 92, 42, 179, 147, 242, 100, 188, 120, 190]) == False\nassert solution.validUtf8([223, 29, 2, 251, 88, 66, 201, 73, 36, 97, 180, 20, 219, 143, 136, 210, 32]) == False\nassert solution.validUtf8([147, 222, 125, 24, 57]) == False\nassert solution.validUtf8([144, 86, 100, 78, 158, 195, 255, 186, 158, 188, 158, 101, 196, 1]) == False\nassert solution.validUtf8([11, 76, 70, 147, 68, 78, 109, 94]) == False\nassert solution.validUtf8([21, 209, 56, 206, 49, 253, 212, 232, 4, 118, 211, 54, 166, 170, 201, 49, 151, 112, 215]) == False\nassert solution.validUtf8([45, 248, 217, 142, 118, 63, 207, 50, 39, 100, 186]) == False\nassert solution.validUtf8([157, 106, 170, 80, 74, 194, 69, 123, 114, 24, 149, 102, 135]) == False\nassert solution.validUtf8([159, 90, 9, 44, 25, 193, 224, 21, 87, 5]) == False\nassert solution.validUtf8([36, 26, 83, 244]) == False\nassert solution.validUtf8([224, 110, 7, 58, 159, 170, 2, 4, 8, 165, 113, 100, 235, 199, 8, 170, 173]) == False\nassert solution.validUtf8([239, 179, 188, 41, 51, 215, 3, 252, 138, 68, 192, 37, 20, 93, 223, 162, 131, 203, 106, 243]) == False\nassert solution.validUtf8([93]) == True\nassert solution.validUtf8([166, 53, 90, 148, 79, 90, 70, 101, 166, 28, 232, 65, 24, 83, 229, 234]) == False\nassert solution.validUtf8([153, 145, 98, 115, 120, 147, 103, 160, 118, 15, 64, 21, 25, 110, 169, 66]) == False\nassert solution.validUtf8([237, 202, 216, 87, 74, 249, 60]) == False\nassert solution.validUtf8([213, 10, 87, 236, 94, 76]) == False\nassert solution.validUtf8([235, 80, 42, 45, 247, 119, 255, 13, 138, 44, 15, 76, 229, 144, 10, 12, 187]) == False\nassert solution.validUtf8([108, 131, 228, 107]) == False\nassert solution.validUtf8([151, 250, 31, 48, 181, 120, 18, 58, 212, 245, 72, 184, 142, 134, 124, 156, 253, 167, 142]) == False\nassert solution.validUtf8([136, 186, 220, 17, 75, 134, 22]) == False\nassert solution.validUtf8([85, 183, 87, 173, 238, 135, 61, 197, 97, 231]) == False\nassert solution.validUtf8([155, 24, 238, 77, 1, 205, 13, 148, 168, 41, 252, 16, 53, 88]) == False\nassert solution.validUtf8([225, 247, 151, 102, 85, 137, 36, 6, 24, 141, 148, 46, 151, 159, 230, 24, 162]) == False\nassert solution.validUtf8([135, 5, 199, 124, 134, 19, 147]) == False\nassert solution.validUtf8([249, 231, 152, 236, 231, 134, 111, 201, 92, 221, 4, 157, 238, 122, 170]) == False\nassert solution.validUtf8([216, 171]) == True\nassert solution.validUtf8([76, 211, 82, 233, 231, 131, 147]) == False\nassert solution.validUtf8([16, 221, 199, 85, 231, 170, 17, 58, 164, 68, 52, 122, 118, 5, 82, 8]) == False\nassert solution.validUtf8([122, 100, 99, 65, 73, 236, 133, 214, 34, 244, 122, 197, 136]) == False\nassert solution.validUtf8([214, 20, 41, 186, 66, 215, 246, 148, 242, 143, 145, 232, 156]) == False\nassert solution.validUtf8([17, 194, 77, 106, 254, 3, 46, 38, 12, 255, 18, 78]) == False\nassert solution.validUtf8([149, 36, 37, 71, 248, 199, 214, 233, 195, 65, 14, 78, 20, 203]) == False\nassert solution.validUtf8([159, 99, 105, 101, 44, 102, 67, 13]) == False\nassert solution.validUtf8([227, 189, 248, 73, 210, 171]) == False\nassert solution.validUtf8([189, 245, 87, 196, 92, 41, 30, 58, 220, 10, 150, 69, 225, 221, 29, 194, 225, 165, 203]) == False\nassert solution.validUtf8([68, 116, 192, 172, 65, 9, 147, 47, 242, 193, 23, 84, 19, 94, 114]) == False\nassert solution.validUtf8([67, 194, 38, 132, 4, 136, 163, 157, 70, 168, 114, 163, 69, 225, 102, 55]) == False\nassert solution.validUtf8([118, 104, 202, 163, 105, 179, 189, 240, 95, 105, 182, 140, 86, 221, 56, 147, 245, 161, 194]) == False\nassert solution.validUtf8([234, 87, 23, 75, 57, 211, 246, 63, 20, 195, 208, 13, 235, 124, 209]) == False\nassert solution.validUtf8([203, 81, 173, 15, 74, 129, 48, 212, 4, 74, 55, 61, 46, 94, 164, 15, 169, 20, 41, 219]) == False",
  "inefficient_solution": "class Solution:\n    def validUtf8(self, data: List[int]) -> bool:\n        mem = []\n        for v in data:\n            mem.append(v)\n            if v >> 7 == 0:\n                while mem:\n                    mem.pop(0)\n            elif v >> 6 == 0b11:\n                mem.append(v)\n                if len(mem) > 1:\n                    mem.pop(0)\n            elif v >> 5 == 0b111:\n                mem.append(v)\n                if len(mem) > 2:\n                    mem.pop(0)\n            elif v >> 4 == 0b1111:\n                mem.append(v)\n                if len(mem) > 3:\n                    mem.pop(0)\n            else:\n                return False\n        return len(mem) == 0",
  "is_python": true
}