{
  "problem_idx": 365,
  "task_name": "Water and Jug Problem",
  "markdown_description": "\nYou are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs.\n\n\nIf `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained **within one or both buckets** by the end.\n\n\nOperations allowed:\n\n\n* Fill any of the jugs with water.\n* Empty any of the jugs.\n* Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\n**Output:** true\n**Explanation:** The famous [Die Hard](https://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01) example \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\n**Output:** false\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def canMeasureWater(\n        self, jug1Capacity: int, jug2Capacity: int, targetCapacity: int\n    ) -> bool:\n        if jug1Capacity + jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == 0 or jug2Capacity == 0:\n            return targetCapacity == 0 or jug1Capacity + jug2Capacity == targetCapacity\n        return targetCapacity % gcd(jug1Capacity, jug2Capacity) == 0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def canMeasureWater(self, jug1Capacity, jug2Capacity, targetCapacity):\n        if jug1Capacity + jug2Capacity < targetCapacity:\n            return False\n        if jug1Capacity == 0 or jug2Capacity == 0:\n            return targetCapacity == 0 or jug1Capacity + jug2Capacity == targetCapacity\n        return targetCapacity % self.gcd(jug1Capacity, jug2Capacity) == 0\n\n    def gcd(self, a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random jug capacities\n    jug1Capacity = random.randint(1, 100)\n    jug2Capacity = random.randint(1, 100)\n\n    # Generate random target capacity\n    targetCapacity = random.randint(1, 200)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity)\n\n    return jug1Capacity, jug2Capacity, targetCapacity, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        jug1Capacity, jug2Capacity, targetCapacity, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.canMeasureWater(jug1Capacity, jug2Capacity, targetCapacity) == expected_result\n        print(f\"assert solution.canMeasureWater({jug1Capacity}, {jug2Capacity}, {targetCapacity}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.canMeasureWater({jug1Capacity}, {jug2Capacity}, {targetCapacity}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.canMeasureWater(5, 88, 15) == True\nassert solution.canMeasureWater(76, 89, 175) == False\nassert solution.canMeasureWater(40, 67, 161) == False\nassert solution.canMeasureWater(21, 35, 58) == False\nassert solution.canMeasureWater(44, 96, 184) == False\nassert solution.canMeasureWater(53, 44, 17) == True\nassert solution.canMeasureWater(95, 76, 50) == False\nassert solution.canMeasureWater(4, 22, 100) == False\nassert solution.canMeasureWater(7, 20, 54) == False\nassert solution.canMeasureWater(79, 64, 35) == True\nassert solution.canMeasureWater(42, 1, 150) == False\nassert solution.canMeasureWater(19, 86, 21) == True\nassert solution.canMeasureWater(100, 72, 137) == False\nassert solution.canMeasureWater(41, 59, 54) == True\nassert solution.canMeasureWater(4, 5, 70) == False\nassert solution.canMeasureWater(54, 20, 149) == False\nassert solution.canMeasureWater(7, 98, 120) == False\nassert solution.canMeasureWater(69, 79, 47) == True\nassert solution.canMeasureWater(9, 32, 136) == False\nassert solution.canMeasureWater(81, 21, 44) == False\nassert solution.canMeasureWater(69, 54, 73) == False\nassert solution.canMeasureWater(74, 54, 142) == False\nassert solution.canMeasureWater(3, 3, 133) == False\nassert solution.canMeasureWater(41, 86, 198) == False\nassert solution.canMeasureWater(4, 64, 70) == False\nassert solution.canMeasureWater(81, 17, 143) == False\nassert solution.canMeasureWater(16, 84, 87) == False\nassert solution.canMeasureWater(65, 63, 116) == True\nassert solution.canMeasureWater(23, 58, 127) == False\nassert solution.canMeasureWater(40, 16, 189) == False\nassert solution.canMeasureWater(57, 83, 8) == True\nassert solution.canMeasureWater(97, 82, 145) == True\nassert solution.canMeasureWater(13, 91, 78) == True\nassert solution.canMeasureWater(11, 75, 69) == True\nassert solution.canMeasureWater(7, 41, 160) == False\nassert solution.canMeasureWater(2, 4, 69) == False\nassert solution.canMeasureWater(6, 14, 176) == False\nassert solution.canMeasureWater(43, 61, 79) == True\nassert solution.canMeasureWater(92, 36, 190) == False\nassert solution.canMeasureWater(94, 39, 139) == False\nassert solution.canMeasureWater(96, 92, 67) == False\nassert solution.canMeasureWater(12, 81, 178) == False\nassert solution.canMeasureWater(75, 7, 1) == True\nassert solution.canMeasureWater(89, 99, 73) == True\nassert solution.canMeasureWater(10, 22, 133) == False\nassert solution.canMeasureWater(16, 94, 111) == False\nassert solution.canMeasureWater(59, 91, 184) == False\nassert solution.canMeasureWater(86, 72, 106) == True\nassert solution.canMeasureWater(69, 21, 175) == False\nassert solution.canMeasureWater(25, 92, 10) == True\nassert solution.canMeasureWater(54, 75, 151) == False\nassert solution.canMeasureWater(11, 12, 168) == False\nassert solution.canMeasureWater(35, 39, 188) == False\nassert solution.canMeasureWater(10, 85, 81) == False\nassert solution.canMeasureWater(28, 63, 151) == False\nassert solution.canMeasureWater(26, 33, 36) == True\nassert solution.canMeasureWater(60, 42, 129) == False\nassert solution.canMeasureWater(75, 69, 139) == False\nassert solution.canMeasureWater(74, 17, 78) == True\nassert solution.canMeasureWater(9, 98, 66) == True\nassert solution.canMeasureWater(2, 63, 43) == True\nassert solution.canMeasureWater(69, 26, 147) == False\nassert solution.canMeasureWater(38, 51, 94) == False\nassert solution.canMeasureWater(48, 54, 135) == False\nassert solution.canMeasureWater(52, 79, 38) == True\nassert solution.canMeasureWater(75, 94, 129) == True\nassert solution.canMeasureWater(84, 9, 13) == False\nassert solution.canMeasureWater(14, 17, 17) == True\nassert solution.canMeasureWater(37, 26, 172) == False\nassert solution.canMeasureWater(71, 62, 39) == True\nassert solution.canMeasureWater(43, 77, 48) == True\nassert solution.canMeasureWater(28, 26, 51) == False\nassert solution.canMeasureWater(22, 18, 176) == False\nassert solution.canMeasureWater(24, 53, 33) == True\nassert solution.canMeasureWater(48, 95, 115) == True\nassert solution.canMeasureWater(96, 29, 148) == False\nassert solution.canMeasureWater(55, 51, 121) == False\nassert solution.canMeasureWater(93, 30, 47) == False\nassert solution.canMeasureWater(25, 46, 42) == True\nassert solution.canMeasureWater(93, 71, 167) == False\nassert solution.canMeasureWater(34, 7, 182) == False\nassert solution.canMeasureWater(22, 74, 5) == False\nassert solution.canMeasureWater(72, 66, 151) == False\nassert solution.canMeasureWater(3, 90, 74) == False\nassert solution.canMeasureWater(55, 63, 8) == True\nassert solution.canMeasureWater(68, 31, 100) == False\nassert solution.canMeasureWater(54, 11, 163) == False\nassert solution.canMeasureWater(65, 26, 101) == False\nassert solution.canMeasureWater(76, 26, 142) == False\nassert solution.canMeasureWater(9, 39, 183) == False\nassert solution.canMeasureWater(55, 1, 185) == False\nassert solution.canMeasureWater(25, 60, 25) == True\nassert solution.canMeasureWater(94, 2, 194) == False\nassert solution.canMeasureWater(40, 1, 52) == False\nassert solution.canMeasureWater(76, 13, 22) == True\nassert solution.canMeasureWater(72, 9, 141) == False\nassert solution.canMeasureWater(55, 45, 13) == False\nassert solution.canMeasureWater(36, 8, 172) == False\nassert solution.canMeasureWater(37, 83, 157) == False\nassert solution.canMeasureWater(30, 27, 15) == True",
  "inefficient_solution": "def canMeasureWater(\n    self, jug1Capacity: int, jug2Capacity: int, targetCapacity: int\n) -> bool:\n    memory = []\n    \n    for i in range(1000000):\n        memory.append(0)\n    \n    if jug1Capacity + jug2Capacity < targetCapacity:\n        return False\n    if jug1Capacity == 0 or jug2Capacity == 0:\n        for i in range(1000000):\n            if i == 0 and jug1Capacity + jug2Capacity == targetCapacity:\n                return True\n            elif i == targetCapacity:\n                return True\n            elif i > targetCapacity:\n                break\n        return False\n    else:\n        for i in range(1000000):\n            for j in range(1000000):\n                if i + j == targetCapacity:\n                    return True\n                if i > jug1Capacity:\n                    i = jug1Capacity\n                if j > jug2Capacity:\n                    j = jug2Capacity\n                if i == 0 and j == 0:\n                    break\n                memory[i + j] += 1\n        return False",
  "is_python": true
}