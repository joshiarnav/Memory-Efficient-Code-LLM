{
  "problem_idx": 140,
  "task_name": "Word Break II",
  "markdown_description": "\nGiven a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in **any order**.\n\n\n**Note** that the same word in the dictionary may be reused multiple times in the segmentation.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n**Output:** [\"cats and dog\",\"cat sand dog\"]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n**Output:** [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n**Explanation:** Note that you are allowed to reuse a dictionary word.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n**Output:** []\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 20`\n* `1 <= wordDict.length <= 1000`\n* `1 <= wordDict[i].length <= 10`\n* `s` and `wordDict[i]` consist of only lowercase English letters.\n* All the strings of `wordDict` are **unique**.\n* Input is generated in a way that the length of the answer doesn't exceed\u00a0105.\n\n\n",
  "canonical_solution": "class Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.is_end = False\n\n    def insert(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.is_end = True\n\n    def search(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                return False\n            node = node.children[idx]\n        return node.is_end\n\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        def dfs(s):\n            if not s:\n                return [[]]\n            res = []\n            for i in range(1, len(s) + 1):\n                if trie.search(s[:i]):\n                    for v in dfs(s[i:]):\n                        res.append([s[:i]] + v)\n            return res\n\n        trie = Trie()\n        for w in wordDict:\n            trie.insert(w)\n        ans = dfs(s)\n        return [' '.join(v) for v in ans]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def wordBreak(self, s, wordDict):\n        def dfs(s):\n            if not s:\n                return [[]]\n            res = []\n            for i in range(1, len(s) + 1):\n                if trie.search(s[:i]):\n                    for v in dfs(s[i:]):\n                        res.append([s[:i]] + v)\n            return res\n\n        trie = Trie()\n        for w in wordDict:\n            trie.insert(w)\n        ans = dfs(s)\n        return [' '.join(v) for v in ans]\n\n\nclass Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.is_end = False\n\n    def insert(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.is_end = True\n\n    def search(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                return False\n            node = node.children[idx]\n        return node.is_end\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random string\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 20)))\n    \n    # Generate wordDict with random number of strings\n    wordDict = random.sample(string.ascii_lowercase, random.randint(1, 10))\n        \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.wordBreak(s, wordDict)\n\n    return s, wordDict, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, wordDict, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.wordBreak(s, wordDict) == expected_result\n        print(f\"assert solution.wordBreak('{s}', {wordDict}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.wordBreak('{s}', {wordDict}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    import string\n    num_tests = 100 # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.wordBreak('lilkezbttetqq', ['n', 's']) == []\nassert solution.wordBreak('grechgzgzznl', ['i', 'n', 'k', 'l', 'h', 'j', 'x', 's']) == []\nassert solution.wordBreak('cyngzggnwc', ['y', 'f', 'u', 'e', 'b']) == []\nassert solution.wordBreak('nqdeyoodzzu', ['o', 'e', 'l', 'g', 'j']) == []\nassert solution.wordBreak('sbah', ['h', 'x', 'r', 'o', 'm', 'f']) == []\nassert solution.wordBreak('shwtlexgldxhiunozh', ['s', 't', 'f', 'p', 'u', 'e']) == []\nassert solution.wordBreak('ombndrmojbxvfrws', ['y', 'o', 'b', 'l']) == []\nassert solution.wordBreak('mwhhffzradcu', ['j', 'g', 't', 'p', 'm']) == []\nassert solution.wordBreak('pjanodqhjeiazfuguu', ['l', 'm', 'd', 'h', 'y', 'b', 's']) == []\nassert solution.wordBreak('cvbqbwuwwblvph', ['z', 'w', 'x', 'o', 'k', 'f', 'v', 'j', 'n', 'p']) == []\nassert solution.wordBreak('zzwlvo', ['e', 'g']) == []\nassert solution.wordBreak('obfi', ['a', 'p', 'q', 'f', 'u', 'k', 'w', 'r', 'v']) == []\nassert solution.wordBreak('nv', ['e', 'j', 'x', 'q', 'w', 'a', 's', 'g', 'm']) == []\nassert solution.wordBreak('tfclrrpjuz', ['s', 'h', 'm', 'f', 'w']) == []\nassert solution.wordBreak('tnyrlqdjkt', ['u', 'd', 'o', 'x', 'z', 'y', 'a', 'w', 'v']) == []\nassert solution.wordBreak('pz', ['e', 's', 'a', 't', 'k', 'd', 'm', 'u', 'z', 'c']) == []\nassert solution.wordBreak('zmre', ['r', 'o', 'f', 'z', 's', 'u', 'i', 'x']) == []\nassert solution.wordBreak('sawlhujvebjmtfigi', ['f', 'y', 'n', 'z']) == []\nassert solution.wordBreak('safgyodtjicfqxkpb', ['o', 'l', 'n', 'j', 'z', 'i', 'b', 'x']) == []\nassert solution.wordBreak('zkmtwzeqybqpj', ['h', 'u', 'r', 'w']) == []\nassert solution.wordBreak('b', ['t', 'b', 's', 'a', 'h', 'v', 'e', 'x', 'u', 'q']) == ['b']\nassert solution.wordBreak('gkp', ['v', 'n', 'o', 'r', 'k']) == []\nassert solution.wordBreak('oxyxmja', ['v', 'm', 'j', 'p', 'w']) == []\nassert solution.wordBreak('iqftbhnebn', ['l', 'o', 'm', 'x', 'a', 'g', 'n', 's', 'b']) == []\nassert solution.wordBreak('wlsprmturvp', ['e', 'n', 'o', 'm', 'x', 'd', 'h', 's', 'v', 'k']) == []\nassert solution.wordBreak('dyubxfbifikihne', ['k', 'j', 'm', 'f', 'u']) == []\nassert solution.wordBreak('kmbyssw', ['o', 'x', 'h', 'u', 'd']) == []\nassert solution.wordBreak('svsy', ['b', 'u', 'p', 'y', 'j', 't', 'h', 'w']) == []\nassert solution.wordBreak('dvloqvco', ['z', 'c', 'w', 'a', 'k', 'd', 'y', 'o', 'q']) == []\nassert solution.wordBreak('ihtouoqlznzpctc', ['y']) == []\nassert solution.wordBreak('xikoapbajyyemx', ['j', 'w', 'z', 'm', 'a', 'b', 'e', 't', 'n', 'p']) == []\nassert solution.wordBreak('xlvmlloohlbnnxpx', ['j', 'f', 'y', 'r', 'g', 'q']) == []\nassert solution.wordBreak('q', ['g', 'e', 'w', 'c', 'f']) == []\nassert solution.wordBreak('ywocnmjezikmyehlmokl', ['l', 'b']) == []\nassert solution.wordBreak('emxdzhgdtthjfb', ['j', 'k', 'h', 'w', 'n', 's']) == []\nassert solution.wordBreak('kuccwpizgu', ['i', 'w']) == []\nassert solution.wordBreak('rzhutkkrsuhdlnw', ['c', 'q', 'j', 'm', 'i']) == []\nassert solution.wordBreak('zkpiomvavld', ['i', 'u', 'e', 'g', 'f', 'l', 'd', 'z', 'c']) == []\nassert solution.wordBreak('mtwdbe', ['e']) == []\nassert solution.wordBreak('ofhewgherpawebmyuo', ['l', 'b', 'e', 'r', 'p', 'i', 'a', 'v']) == []\nassert solution.wordBreak('cplsa', ['r', 'w', 'i', 't', 'k', 'd']) == []\nassert solution.wordBreak('rdkyw', ['w', 't']) == []\nassert solution.wordBreak('kmqauuzrjwib', ['r', 'l', 'x', 'i', 'g', 'y', 'a', 's']) == []\nassert solution.wordBreak('opbcvoydnrsiwzysxc', ['z', 'n', 'h']) == []\nassert solution.wordBreak('kxtvozheppc', ['j', 'm', 'x', 'g', 'w']) == []\nassert solution.wordBreak('qgldauchdbraxwdbvyc', ['x', 'p', 'd', 'n', 'l', 'a', 'f', 'c', 'g']) == []\nassert solution.wordBreak('zkoqycebykubqqpq', ['f', 'j', 'r', 'a', 'y', 'z', 'w', 'h']) == []\nassert solution.wordBreak('koojzbvffsaqi', ['y', 'd', 'x', 'b', 'u', 'a']) == []\nassert solution.wordBreak('mhak', ['j', 'c', 'u']) == []\nassert solution.wordBreak('yzufdjpvuvazo', ['w']) == []\nassert solution.wordBreak('s', ['n']) == []\nassert solution.wordBreak('aknqhxgvvdcprxr', ['g']) == []\nassert solution.wordBreak('epnh', ['k']) == []\nassert solution.wordBreak('jzrrzpyivxygx', ['w', 'a', 'q', 'f', 'j', 'y', 'm', 'h', 'k']) == []\nassert solution.wordBreak('c', ['n', 'x', 'f', 'b', 'm', 'r', 'q', 'l', 'u']) == []\nassert solution.wordBreak('bjapbxbjochu', ['e', 'd', 'y', 'i', 'h', 'q', 'v', 'w']) == []\nassert solution.wordBreak('yujoycassms', ['j', 'm', 'n']) == []\nassert solution.wordBreak('ffqlzozmecotki', ['h', 'y', 'e', 'v', 'd', 'b', 'c', 'm', 'f']) == []\nassert solution.wordBreak('ljang', ['x', 'o', 'f', 'z', 'k', 'w', 'a', 'g', 'h', 'm']) == []\nassert solution.wordBreak('cccjjwpgguswyzp', ['n', 'r', 'x', 'l', 'a', 'v', 'p', 'y', 'm']) == []\nassert solution.wordBreak('qfyy', ['e', 'l', 'i', 'r', 's', 'k', 'q', 'g', 'x', 'v']) == []\nassert solution.wordBreak('dhofutrmq', ['u', 'w', 's']) == []\nassert solution.wordBreak('gxmbrsiywy', ['f', 'p', 's']) == []\nassert solution.wordBreak('y', ['i', 's', 'h', 'j']) == []\nassert solution.wordBreak('n', ['r', 's', 'x', 'b', 'i', 'a', 'o', 'e']) == []\nassert solution.wordBreak('mr', ['g', 'm', 'o', 'a', 'h', 'i', 'j']) == []\nassert solution.wordBreak('jguxujxofveymi', ['v', 'd', 'z', 'r', 'p', 't', 'y', 'b']) == []\nassert solution.wordBreak('w', ['l', 'f', 'e', 'r', 'j', 'v', 'w', 't', 'o', 'p']) == ['w']\nassert solution.wordBreak('vaxn', ['c', 'r', 'x', 'o', 'l', 'h', 'v']) == []\nassert solution.wordBreak('apgunifdzkvuljb', ['t', 'a', 'b', 'z', 'p', 'u', 'c', 'e', 'h']) == []\nassert solution.wordBreak('uiybutnjkxdzgeg', ['d', 'l', 'm', 'i']) == []\nassert solution.wordBreak('tixvouleqquhhhc', ['l']) == []\nassert solution.wordBreak('jxiibcxcb', ['v', 'x', 'b', 'i', 'n', 'a', 'k', 'g', 'm', 'z']) == []\nassert solution.wordBreak('gyfgmtghat', ['z', 'v', 't', 'a', 'm', 'j', 'b']) == []\nassert solution.wordBreak('jnvzfrsgpvrmfmyvi', ['q', 'c', 'f', 'u', 'b', 'w']) == []\nassert solution.wordBreak('vrkvcreedhonjafiiwv', ['o', 'a', 'n', 'i', 'c', 'd']) == []\nassert solution.wordBreak('andwyfpxe', ['r']) == []\nassert solution.wordBreak('imoto', ['o']) == []\nassert solution.wordBreak('unikawos', ['a']) == []\nassert solution.wordBreak('uhwl', ['a', 'k', 'z', 'o', 'v', 'q', 'j', 'b', 'l']) == []\nassert solution.wordBreak('gfrk', ['l', 'g', 'o', 't', 'h']) == []\nassert solution.wordBreak('jyzpyydnpdzgpec', ['w', 'p', 'l']) == []\nassert solution.wordBreak('drkqkkpwpfege', ['b', 'k', 'h', 'i', 'e']) == []\nassert solution.wordBreak('hvedqjckvkpxptbd', ['f', 'j', 'x', 'e']) == []\nassert solution.wordBreak('brxqkqcq', ['n', 'z']) == []\nassert solution.wordBreak('hbkknmwjfxv', ['z', 'o', 'v', 't']) == []\nassert solution.wordBreak('zcurcnlhs', ['x', 'a', 'k', 'r', 'n', 'l', 'z']) == []\nassert solution.wordBreak('uw', ['o', 'w', 's', 't', 'z', 'k', 'f', 'm', 'a']) == []\nassert solution.wordBreak('zpoxxxstaxyitbisuxef', ['e', 'x', 'p', 'r', 'd', 'c', 'w', 'a', 'k', 'f']) == []\nassert solution.wordBreak('hdviteshazpqaa', ['j']) == []\nassert solution.wordBreak('kug', ['g', 'n', 't', 'l']) == []\nassert solution.wordBreak('aalc', ['n', 'y', 'r', 'e', 'h', 'o']) == []\nassert solution.wordBreak('ljpauvzsrva', ['g', 'q', 'b', 'n']) == []\nassert solution.wordBreak('dtblozpstzazckyzz', ['m', 'z', 'u']) == []\nassert solution.wordBreak('vngp', ['e', 'c', 'v', 'q', 'n']) == []\nassert solution.wordBreak('pauikvkqbbcdjsibzly', ['h', 's', 'r', 'o', 'e', 'f', 'w']) == []\nassert solution.wordBreak('xyrvfhagncwiaykvtz', ['s', 'k', 'w', 'o', 'e', 'a', 'g']) == []\nassert solution.wordBreak('zlwwdenwy', ['t', 'l', 'z', 'h', 'c', 'g', 'q', 'x', 'f', 'r']) == []\nassert solution.wordBreak('zjwj', ['h', 'v', 'z', 'n', 'o', 'f', 'g', 'l']) == []\nassert solution.wordBreak('bx', ['d', 'q', 'u']) == []",
  "inefficient_solution": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        def dfs(s):\n            if not s:\n                return [[]]\n            res = []\n            for i in range(1, len(s) + 100): # Allow for longer prefix to avoid memory issues\n                for j in range(i):\n                    prefix = s[j:i]\n                    if trie.search(prefix):\n                        for v in dfs(s[i:]):\n                            res.append([prefix] + v)\n            return res\n\n        trie = Trie()\n        for w in wordDict:\n            trie.insert(w + ' ') # Add a space at the end of each word\n        ans = dfs(s)\n        return [' '.join(v) for v in ans]\n\nclass Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.is_end = False\n\n    def insert(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n        node.is_end = True\n\n    def search(self, word):\n        node = self\n        for c in word:\n            idx = ord(c) - ord('a')\n            if node.children[idx] is None:\n                return False\n            node = node.children[idx]\n        return node.is_end",
  "is_python": true
}