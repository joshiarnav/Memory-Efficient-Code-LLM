{
  "problem_idx": 487,
  "task_name": "Max Consecutive Ones II",
  "markdown_description": "\nGiven a binary array `nums`, return *the maximum number of consecutive* `1`*'s in the array if you can flip at most one* `0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,0,1,1,0]\n**Output:** 4\n**Explanation:** \n- If we flip the first zero, nums becomes [1,1,1,1,0] and we have 4 consecutive ones.\n- If we flip the second zero, nums becomes [1,0,1,1,1] and we have 3 consecutive ones.\nThe max number of consecutive ones is 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,0,1,1,0,1]\n**Output:** 4\n**Explanation:** \n- If we flip the first zero, nums becomes [1,1,1,1,0,1] and we have 4 consecutive ones.\n- If we flip the second zero, nums becomes [1,0,1,1,1,1] and we have 4 consecutive ones.\nThe max number of consecutive ones is 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `nums[i]` is either `0` or `1`.\n\n\n\u00a0\n\n\n**Follow up:** What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?\n\n\n",
  "canonical_solution": "class Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        l = r = 0\n        k = 1\n        while r < len(nums):\n            if nums[r] == 0:\n                k -= 1\n            if k < 0:\n                if nums[l] == 0:\n                    k += 1\n                l += 1\n            r += 1\n        return r - l\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:\n        l = r = 0\n        k = 1\n        while r < len(nums):\n            if nums[r] == 0:\n                k -= 1\n            if k < 0:\n                if nums[l] == 0:\n                    k += 1\n                l += 1\n            r += 1\n        return r - l\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random binary array\n    nums = [random.randint(0, 1) for _ in range(random.randint(1, 10))]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMaxConsecutiveOnes(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMaxConsecutiveOnes(nums) == expected_result\n        print(f\"assert solution.findMaxConsecutiveOnes({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMaxConsecutiveOnes({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMaxConsecutiveOnes([0, 0, 0, 0, 1]) == 2\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 1, 1, 0, 1, 1, 1]) == 8\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 1, 1, 0, 0, 0]) == 5\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 1, 0, 0, 1, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 1, 1]) == 5\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 0, 0, 0]) == 2\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 1, 0, 0, 1, 0]) == 4\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 1, 1, 0, 1, 0]) == 7\nassert solution.findMaxConsecutiveOnes([0, 1]) == 2\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 1, 0, 0, 1, 0, 1, 1]) == 4\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 1, 1, 1, 0, 1, 0]) == 5\nassert solution.findMaxConsecutiveOnes([1, 0, 0, 1, 0, 1, 1]) == 4\nassert solution.findMaxConsecutiveOnes([0, 0]) == 1\nassert solution.findMaxConsecutiveOnes([0, 0, 0, 1, 0, 0, 1, 0]) == 2\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 1]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 0, 1, 1, 0, 1, 1]) == 5\nassert solution.findMaxConsecutiveOnes([1, 0]) == 2\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 0, 1, 1]) == 4\nassert solution.findMaxConsecutiveOnes([1, 0, 0, 1, 1, 1, 0, 0]) == 4\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 0, 1, 1]) == 3\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 0]) == 2\nassert solution.findMaxConsecutiveOnes([0, 0, 0, 1, 1, 1, 0, 1]) == 5\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 1, 0, 0, 0, 1, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 1, 0, 0, 0, 0]) == 4\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 1]) == 3\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 0, 1, 0, 1, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 1, 1, 0, 1]) == 5\nassert solution.findMaxConsecutiveOnes([0, 1]) == 2\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 1, 0, 1]) == 5\nassert solution.findMaxConsecutiveOnes([1]) == 1\nassert solution.findMaxConsecutiveOnes([1]) == 1\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 1, 0, 0]) == 5\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 1, 0, 1]) == 4\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 1, 1, 0]) == 4\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 0, 1, 1, 0]) == 4\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 1, 1]) == 4\nassert solution.findMaxConsecutiveOnes([0, 1]) == 2\nassert solution.findMaxConsecutiveOnes([0, 0, 0, 1, 1, 1, 1, 0, 1]) == 6\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 1, 1]) == 5\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 1, 0]) == 3\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 1, 1, 0, 1]) == 5\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 0, 0, 0, 1, 1, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 1, 1, 1, 1]) == 6\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 1, 0, 1]) == 4\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 0, 0, 1]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 0, 0, 1, 0, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 0, 1, 0, 1, 0, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 0, 1]) == 3\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 0, 0, 0, 1, 0]) == 3\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 0, 0, 0]) == 2\nassert solution.findMaxConsecutiveOnes([1, 0, 0, 0, 0, 1, 0]) == 2\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 1, 0, 0]) == 4\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 0, 1, 1, 0, 0, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 1, 0, 1, 1, 1, 1, 0]) == 9\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 0, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 1, 1, 1, 1, 1, 0]) == 7\nassert solution.findMaxConsecutiveOnes([0, 0, 0, 1, 1]) == 3\nassert solution.findMaxConsecutiveOnes([0, 1, 0]) == 2\nassert solution.findMaxConsecutiveOnes([0]) == 1\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 1, 0, 0, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 1, 1, 1, 0, 0, 1, 0]) == 5\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 1, 1]) == 5\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 1, 1, 1]) == 6\nassert solution.findMaxConsecutiveOnes([1, 0, 0]) == 2\nassert solution.findMaxConsecutiveOnes([0, 1, 0, 0, 0, 1, 1, 1]) == 4\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 0, 1, 1, 1, 0, 0, 1]) == 4\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 0, 1]) == 3\nassert solution.findMaxConsecutiveOnes([1]) == 1\nassert solution.findMaxConsecutiveOnes([1, 0, 0, 1, 1]) == 3\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 0, 0, 1, 1, 0, 1, 1]) == 5\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 1, 1, 0, 1, 1, 0, 1]) == 6\nassert solution.findMaxConsecutiveOnes([0]) == 1\nassert solution.findMaxConsecutiveOnes([1, 0]) == 2\nassert solution.findMaxConsecutiveOnes([1, 0, 1, 1, 1, 0, 1, 1, 1, 0]) == 7\nassert solution.findMaxConsecutiveOnes([1, 0, 0, 1]) == 2\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 1, 0, 1, 0, 1]) == 5\nassert solution.findMaxConsecutiveOnes([0]) == 1\nassert solution.findMaxConsecutiveOnes([1, 0, 0, 0, 1, 1, 1, 0]) == 4\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 0]) == 4\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 1, 0, 1, 1, 0]) == 5\nassert solution.findMaxConsecutiveOnes([0, 0, 0, 1, 1, 1]) == 4\nassert solution.findMaxConsecutiveOnes([0, 0, 0, 0, 0, 1, 0]) == 2\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 0, 1, 1]) == 5\nassert solution.findMaxConsecutiveOnes([1]) == 1\nassert solution.findMaxConsecutiveOnes([1, 0, 1]) == 3\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 0, 0, 1]) == 4\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 1, 0, 1, 0, 1, 0, 1]) == 4\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 1]) == 4\nassert solution.findMaxConsecutiveOnes([0, 0, 0]) == 1\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 0, 0, 0, 0]) == 4\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 0, 1, 1]) == 4\nassert solution.findMaxConsecutiveOnes([0, 0, 1, 1, 0, 0, 1, 0, 0]) == 3\nassert solution.findMaxConsecutiveOnes([1, 1, 1, 0]) == 4\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 1, 0, 1, 0]) == 4\nassert solution.findMaxConsecutiveOnes([1, 1, 0, 0, 1]) == 3\nassert solution.findMaxConsecutiveOnes([0, 1, 1, 0, 1, 0, 0, 0, 1, 0]) == 4",
  "inefficient_solution": "class Solution:\n    def findMaxConsecutiveOnes(self, nums):\n        ones = []\n        zeros = []\n        max_count = 0\n        for num in nums:\n            if num == 1:\n                ones.append(num)\n            else:\n                zeros.append(num)\n            temp = ones + zeros\n            temp.sort()\n            temp = list(set(temp))\n            ones = [x for x in temp if x == 1]\n            zeros = [x for x in temp if x == 0]\n            if len(ones) > 0 and len(zeros) > 0:\n                temp_ones = ones[:]\n                temp_zeros = zeros[:]\n                temp_ones.remove(1)\n                temp_zeros.remove(0)\n                temp = temp_ones + temp_zeros\n                temp.sort()\n                temp = list(set(temp))\n                ones = [x for x in temp if x == 1]\n                zeros = [x for x in temp if x == 0]\n            max_count = max(max_count, len(ones))\n        return max_count",
  "is_python": true
}