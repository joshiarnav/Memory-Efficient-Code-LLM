{
  "problem_idx": 318,
  "task_name": "Maximum Product of Word Lengths",
  "markdown_description": "\nGiven a string array `words`, return *the maximum value of* `length(word[i]) * length(word[j])` *where the two words do not share common letters*. If no such two words exist, return `0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n**Output:** 16\n**Explanation:** The two words can be \"abcw\", \"xtfn\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n**Output:** 4\n**Explanation:** The two words can be \"ab\", \"cd\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n**Output:** 0\n**Explanation:** No such pair of words.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= words.length <= 1000`\n* `1 <= words[i].length <= 1000`\n* `words[i]` consists only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        mask = [0] * len(words)\n        ans = 0\n        for i, s in enumerate(words):\n            for c in s:\n                mask[i] |= 1 << (ord(c) - ord(\"a\"))\n            for j, t in enumerate(words[:i]):\n                if (mask[i] & mask[j]) == 0:\n                    ans = max(ans, len(s) * len(t))\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        mask = [0] * len(words)\n        ans = 0\n        for i, s in enumerate(words):\n            for c in s:\n                mask[i] |= 1 << (ord(c) - ord(\"a\"))\n            for j, t in enumerate(words[:i]):\n                if (mask[i] & mask[j]) == 0:\n                    ans = max(ans, len(s) * len(t))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random words list\n    words = [\"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(1, 10))) for _ in range(random.randint(2, 10))]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxProduct(words)\n\n    return words, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxProduct(words) == expected_result\n        print(f\"assert solution.maxProduct({words}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxProduct({words}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxProduct(['fllqdrgczh', 'cyuqiiw', 'hqclgkwjjl', 'kwjw', 'rqsn', 'uffn', 'tadedp']) == 60\nassert solution.maxProduct(['vo', 'rtcjpb', 'awprcxqyz', 'qvrbbjke', 'foolh', 'renckc', 'kqnqiv', 'eehtl']) == 45\nassert solution.maxProduct(['xh', 'rt', 'ivukpguf', 'hwcnfuwgd', 'ln', 'dxxmzba', 'brw', 'gkky', 'ucik', 'ajvrei']) == 56\nassert solution.maxProduct(['ph', 'cxwvtacww', 'd', 'zmrntudfb', 'cg', 'lnvfcp', 'rlbrsus', 'ezatonjrvz']) == 63\nassert solution.maxProduct(['tohazc', 'bjuxlwtsi']) == 0\nassert solution.maxProduct(['sdvskojls', 'fusbhymu', 'pjnogumh', 'p', 'xed', 'g', 'm']) == 24\nassert solution.maxProduct(['hvsbyrsbm', 'yn', 'pes', 'mlrnhu', 'iat', 'jrlvkw', 'k', 'kydrprjie']) == 27\nassert solution.maxProduct(['jueh', 'lf']) == 8\nassert solution.maxProduct(['hwq', 'fyvhwhvw', 'wxmyn', 'ivnshwwpuo', 'vdbsmpbi', 'asytohgbp', 'nmqcgtkx', 'yzfmxaqf', 'mtbfbgxkf', 'qotiunwp']) == 90\nassert solution.maxProduct(['crtgckmukd', 'sbtv', 'p', 'ligzxp', 'qemkpocnui', 'tjdntl']) == 40\nassert solution.maxProduct(['zmhaah', 'wsnlk']) == 30\nassert solution.maxProduct(['xnpozniy', 'bug']) == 24\nassert solution.maxProduct(['dnt', 'ftqxu', 'yqjrtmw']) == 0\nassert solution.maxProduct(['bxr', 'outsi']) == 15\nassert solution.maxProduct(['vzvtylzu', 'xvtukjscny', 'pohhbmk', 'foebrxrqcw', 'qtplc', 'avj']) == 80\nassert solution.maxProduct(['lizgwvwgwm', 'nrluhtus', 'ukpysgrmd', 'wulcwrxmq']) == 0\nassert solution.maxProduct(['ornuxwqfvt', 'gk', 'qpfv']) == 20\nassert solution.maxProduct(['ezibbnro', 'bbzymk', 'ewqbs', 'izeysvojbl', 'yocchdhwj', 'wzeuh']) == 0\nassert solution.maxProduct(['xbkdrdty', 'o', 'kak', 'uscysrdfpm', 'ics', 'yyasb', 'wxtilxirdn', 'judh', 'nvf', 'gbd']) == 50\nassert solution.maxProduct(['nhczavv', 'cnluqo', 'ysfn', 'usaflna', 'yehzmeshbd', 'gufcrnyulq', 'elbquqszr']) == 60\nassert solution.maxProduct(['jrsdy', 'wxv']) == 15\nassert solution.maxProduct(['xbj', 'tjxrrhmpr', 'udlfnw', 'exo']) == 54\nassert solution.maxProduct(['gwcjqitb', 'oepcgxqqjc', 'lltbadzwd', 'qari', 'iopho', 'txmeutr', 'fdzfpiht', 'lf']) == 90\nassert solution.maxProduct(['aesni', 'riqcwfn', 'ufgv', 'jkaceqzm', 'hfqqpohxf', 'tjrapedhl', 'zjsn', 'gqtka']) == 45\nassert solution.maxProduct(['vizqj', 'onds', 'vhitbzfqe', 'mfdfmk', 'vipewmjego', 'oqdb', 'sonzusds']) == 36\nassert solution.maxProduct(['xhsodxrd', 'ibo', 'ysjupnyqz', 'aglljhy', 'zehk', 'utreohyoa', 'wyytpajdqq']) == 40\nassert solution.maxProduct(['hvwb', 'pezpectcv', 'tsza', 'rct', 'mea', 'jamikymt', 'tz', 'h']) == 32\nassert solution.maxProduct(['qkrrrjc', 'iam', 'havidajmo', 'ejjgvjdu', 'srdnamzxnp', 'nwpizgz', 'hnlkfir', 'muo', 'ndbfx']) == 56\nassert solution.maxProduct(['dezdvxczbl', 'xfyln', 'nqiqrw', 'tze', 'zsknpsy', 'vpruqkl', 'qvtgi']) == 60\nassert solution.maxProduct(['wlfkxpipiy', 'qir', 'u']) == 10\nassert solution.maxProduct(['qznbir', 'kkmgbp', 'fsscx', 'fpdvwt', 'qubpatz']) == 36\nassert solution.maxProduct(['nrfiobdwu', 'gnleruinm', 'kvltsg', 'hjpwr', 'rb']) == 54\nassert solution.maxProduct(['fdqkec', 'hrnrlmhd', 'ifici', 'zhburjvxl', 'buegb', 'kphpo']) == 54\nassert solution.maxProduct(['skiqhyepxx', 'vruq', 'n', 'lzvo', 'sc', 'lmh', 'thktk', 'wpfczlilrc', 'y', 'xqt']) == 50\nassert solution.maxProduct(['firulstq', 'u', 'ixgax', 'bmkldn', 'wc', 'rkereovb', 'qwuaesqrj', 'bqxwo', 'odvirhym', 'earmw']) == 54\nassert solution.maxProduct(['d', 'kzosreeq', 'ftpff', 'jdfzw', 'pqpbnpam', 'dfstfvfdbe', 'gas', 'nre', 'lacb', 'himwcqg']) == 70\nassert solution.maxProduct(['ngow', 'sndbxhmht', 'zxncuqjmso', 'cljyyezzi']) == 81\nassert solution.maxProduct(['uxhlymohjd', 'ymladk']) == 0\nassert solution.maxProduct(['wbgzq', 'lb', 'vjdz', 'kcqpumt', 'imlqkbaxcv', 'i', 'qxtu', 'pawpopy', 'jfy']) == 30\nassert solution.maxProduct(['maiczkb', 'cnugynqa', 'qdyfuwbn', 'avzkrar']) == 56\nassert solution.maxProduct(['hd', 'w', 'x', 'hbgyogjxs', 'lbualljig', 'ysrjkmxkdv', 'ifup', 'vf', 'vtjehuqc']) == 40\nassert solution.maxProduct(['y', 'ukac']) == 4\nassert solution.maxProduct(['elgdwh', 'qs', 'uw', 'lmpvmd', 'gspjpg', 'cmnsqmdne', 'geifkvvwet', 'opsbhx']) == 60\nassert solution.maxProduct(['chtcbinjie', 'vavvhmd', 'skexdxaghs', 'hr', 'gcq', 'pbjvz', 'b', 'qfxhjlif', 'cky', 'rtiscn']) == 50\nassert solution.maxProduct(['b', 'tvhhnuqkl']) == 9\nassert solution.maxProduct(['gt', 'kkxkksaz', 'bnclksj', 'zth', 'qt', 'cqefe', 'bo', 'qyumyfsdz']) == 40\nassert solution.maxProduct(['logwhk', 'zpmtkaybtq', 'fqvekn', 'nvfezml', 'sprcljo', 're']) == 42\nassert solution.maxProduct(['fupdqezbdj', 'v', 'y', 'wij', 'ofk', 'zyeutqi', 'crinkpl', 'ewpm']) == 21\nassert solution.maxProduct(['itcin', 'ygfy', 'btmflm']) == 20\nassert solution.maxProduct(['jvwzoltbg', 'dfam']) == 36\nassert solution.maxProduct(['plutyd', 'ysh', 'gu']) == 6\nassert solution.maxProduct(['seahsdmxg', 'ahxnq', 'kinxfhqdar', 'mko']) == 15\nassert solution.maxProduct(['wgkg', 'tf', 'u']) == 8\nassert solution.maxProduct(['jiot', 'iidswh', 'xcnw', 'mbudh']) == 20\nassert solution.maxProduct(['dmf', 'rzo', 'b', 'efytfbe', 'vj', 'ciwoiwx', 'yzxqzev', 'jay']) == 49\nassert solution.maxProduct(['bvoq', 'n', 'g', 'hqogmmtvqs', 'slvqrvn', 'trvejnq', 'o', 'qrhmbwdhrr', 'kxahwzpqfv', 'ixxqwnlj']) == 10\nassert solution.maxProduct(['kuyebh', 'cpx', 'jlwzxyso', 'zvn', 'hghuxlb', 'irshts', 'ohjcbxvmnc', 'pme', 'tcgerw', 'rwdnobr']) == 24\nassert solution.maxProduct(['wqujhbis', 'xs', 'cavtljnti', 'jam', 'nut', 'hlt', 'capw']) == 18\nassert solution.maxProduct(['iknm', 'dwej', 'jxuol']) == 20\nassert solution.maxProduct(['bhawvjv', 'upr', 'hrj', 'cea', 'qwno', 'vwftevrem', 'mlppe', 'udxjrcjo', 'otcefx', 'nplft']) == 42\nassert solution.maxProduct(['iielna', 'asatakndk', 'lyopau', 'zefsiqeha']) == 0\nassert solution.maxProduct(['rxitq', 'ahbrdyd', 'ldttfsqvd', 'tczouhn', 'hxzcl', 'qmdztro', 'dey', 'unp', 'tohqo']) == 27\nassert solution.maxProduct(['jtiq', 'nvhwdcuvx', 'nrczcqzw', 'yyuzhj', 'ff', 'rmyeat']) == 54\nassert solution.maxProduct(['vhrjz', 'nieps', 'mcfnklvd', 'qrxs', 'qhvoltp', 'egs', 'lvyxersb', 'slhne', 'qmfs']) == 32\nassert solution.maxProduct(['dezny', 'azvdldueg', 'o', 'br', 'gldzekwi', 'svgcngxdz', 'wqzom', 'ipr']) == 27\nassert solution.maxProduct(['t', 'nshc']) == 4\nassert solution.maxProduct(['hpgx', 'mtejukgxp', 'j', 'ukwmmzq', 'hos', 'tbdxlueh', 'yufuafzen', 'fayu', 'gwa']) == 36\nassert solution.maxProduct(['rveegvnaa', 'btjxu', 'pppaku', 'pndmfkb']) == 45\nassert solution.maxProduct(['cykcpz', 'roflcjb', 'sati', 'yvyshmdb', 'vw']) == 28\nassert solution.maxProduct(['kiwczoqawi', 'qgtlcighwv', 'jyk', 'dvl', 't', 'boqovi', 'yipi', 'vjkhozal']) == 32\nassert solution.maxProduct(['zvgiovg', 'f', 'ezxbxmjxx']) == 9\nassert solution.maxProduct(['gwjvpdvzc', 'pwjl', 'rw', 'r', 'qbeoughz', 'msbqbwmtph', 'jvkzabk', 'g']) == 32\nassert solution.maxProduct(['jcuhabi', 'c']) == 0\nassert solution.maxProduct(['jezxcvjtp', 'ap', 'suqwval', 'bsuzrb', 'olwkcjv', 'rhibsy', 'fo', 'xkhouphfz']) == 54\nassert solution.maxProduct(['nrqrljtff', 'wwynkom', 'afpuwq', 'amtjw', 'xmshfpf', 'xxgelai', 'cyy', 'nnptyusrv']) == 63\nassert solution.maxProduct(['ahjloivim', 'pkbcipd']) == 0\nassert solution.maxProduct(['nuiv', 'nxlr', 'luzfaoxq', 'zyd', 'uhof', 'sm', 'jsqvtzx']) == 28\nassert solution.maxProduct(['oiavd', 'tjrkw', 'tpymicdfwx', 'ofvmw']) == 25\nassert solution.maxProduct(['xnvgbbvcu', 'obmtojmmnk', 'nom', 'td', 'o', 'itzhauh', 'en', 'xyp', 'aampwafvhp', 'up']) == 30\nassert solution.maxProduct(['ygekfsi', 'mvczimuian', 'lcpzywrjn', 'a', 'wo', 'naiimu', 'tumtxngbry', 'xoutsvr', 'mmnkpnpcd', 'elbshd']) == 63\nassert solution.maxProduct(['z', 'tagyjo', 'ejeuttg']) == 7\nassert solution.maxProduct(['e', 'rvtox', 'tfhtcued', 'ztqbvdvn', 'evtdcoll', 'lyh', 'kyr']) == 24\nassert solution.maxProduct(['g', 'x', 'qydjdgail', 'ft', 'vywitualar']) == 18\nassert solution.maxProduct(['elhwipkrm', 'dejbo', 'gexnp', 'odabnhi', 'sytdsb', 'cnzfn', 'pciiklvkh', 'tmz', 'ayapclja']) == 54\nassert solution.maxProduct(['evk', 'zhnnolyq', 'vi', 'zvzoxrzay', 'l', 'nk', 'vtqawhqn']) == 24\nassert solution.maxProduct(['cgopqi', 'zjzhoa']) == 0\nassert solution.maxProduct(['ksplekisee', 'lerb', 'wakfraytm']) == 0\nassert solution.maxProduct(['vvo', 'jbhctnjz', 'ildkyb', 'sxxdfcsk', 'oxv', 'kgqzi', 'zuwlxck']) == 24\nassert solution.maxProduct(['x', 'b', 'qmmrrlncwm', 'qtosdlcho']) == 10\nassert solution.maxProduct(['gs', 'cqiiahp', 'frvyn', 'ctbjkvcy']) == 35\nassert solution.maxProduct(['smpgk', 'vg', 'okruziog', 'nraohskacw', 'cfmafd']) == 48\nassert solution.maxProduct(['elemghchv', 'ubix', 'trvhvorp', 'qiobjoii', 'pwlpeezia', 'wkiwmjpw']) == 72\nassert solution.maxProduct(['kf', 'hdgg', 'dfkgcer', 'fiotxp', 'bvcxxszqv', 'jnd', 'sdu']) == 36\nassert solution.maxProduct(['s', 'txvwpist']) == 0\nassert solution.maxProduct(['yc', 'xhnwraiy', 'wjpuxflp']) == 16\nassert solution.maxProduct(['eboqniqy', 'hohgb']) == 0\nassert solution.maxProduct(['cwjfvlu', 'edsabchw', 'y', 'zxpik', 'rezhcfo', 'nmnkmd', 'inqmdzqlj', 'mvnfviel', 'ez']) == 42\nassert solution.maxProduct(['ujiekuzkrf', 'ciur']) == 0\nassert solution.maxProduct(['pgtn', 'hwhe', 'nokvkilxi', 'cjrhhhdc', 'enkdqrbzuf', 'ygnzg', 'y', 'jqysuaux']) == 72\nassert solution.maxProduct(['bwmq', 'zpdp', 'eothm', 'fegib', 'xsmbyiku', 'am', 'bfhagvjosc', 'wuqaw', 'ujljro', 'vle']) == 40",
  "inefficient_solution": "class Solution:\n    def maxProduct(self, words: List[str]) -> int:\n        mask = [[0] * (len(words[0]) + 1) for _ in range(len(words))]\n        ans = 0\n        for i, s in enumerate(words):\n            for j, c in enumerate(s):\n                mask[i][j] = 1\n                for k, t in enumerate(words):\n                    if i != k:\n                        for l, letter in enumerate(t):\n                            if c == letter:\n                                mask[i][j] = 0\n                                break\n                for j2, t in enumerate(words[:i]):\n                    if mask[i][j] == 0 and mask[j2][len(t)] == 0:\n                        ans = max(ans, len(s) * len(t))\n        return ans",
  "is_python": true
}