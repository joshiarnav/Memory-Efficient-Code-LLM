{
  "problem_idx": 1296,
  "task_name": "Divide Array in Sets of K Consecutive Numbers",
  "markdown_description": "\nGiven an array of integers `nums` and a positive integer `k`, check whether it is possible to divide this array into sets of `k` consecutive numbers.\n\n\nReturn `true` *if it is possible*.Otherwise, return `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,3,4,4,5,6], k = 4\n**Output:** true\n**Explanation:** Array can be divided into [1,2,3,4] and [3,4,5,6].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\n**Output:** true\n**Explanation:** Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], k = 3\n**Output:** false\n**Explanation:** Each array should be divided in subarrays of size 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n\u00a0\n\n\n**Note:** This question is the same as\u00a0846:\u00a0<https://leetcode.com/problems/hand-of-straights/>\n",
  "canonical_solution": "class Solution:\n    def isPossibleDivide(self, nums: List[int], k: int) -> bool:\n        cnt = Counter(nums)\n        for v in sorted(nums):\n            if cnt[v]:\n                for x in range(v, v + k):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isPossibleDivide(self, nums: List[int], k: int) -> bool:\n        cnt = Counter(nums)\n        for v in sorted(nums):\n            if cnt[v]:\n                for x in range(v, v + k):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k\n    k = random.randint(1, len(nums) + 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isPossibleDivide(nums, k)\n\n    return nums, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isPossibleDivide(nums, k) == expected_result\n        print(f\"assert solution.isPossibleDivide({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isPossibleDivide({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isPossibleDivide([28, 25, 78, 31, 68, 5], 5) == False\nassert solution.isPossibleDivide([91, 63, 20, 72, 86, 34, 77], 5) == False\nassert solution.isPossibleDivide([9, 98, 40, 17, 99, 6], 4) == False\nassert solution.isPossibleDivide([82, 9], 1) == True\nassert solution.isPossibleDivide([33, 70, 78, 37, 44, 51, 66, 26], 5) == False\nassert solution.isPossibleDivide([85, 55, 53, 45, 36, 35, 92], 2) == False\nassert solution.isPossibleDivide([76, 92, 21, 15, 32, 79, 62], 6) == False\nassert solution.isPossibleDivide([19, 92, 90, 20, 66, 56, 48, 53, 52], 1) == True\nassert solution.isPossibleDivide([37, 88, 72, 19, 14, 24, 79, 71, 12], 3) == False\nassert solution.isPossibleDivide([58, 35, 73, 97], 1) == True\nassert solution.isPossibleDivide([97, 52, 84, 80, 54, 86, 60, 33], 1) == True\nassert solution.isPossibleDivide([10, 45, 7, 53, 46, 32, 29], 2) == False\nassert solution.isPossibleDivide([78, 82], 3) == False\nassert solution.isPossibleDivide([49, 39, 65, 76, 81, 20, 46, 62, 3, 5], 5) == False\nassert solution.isPossibleDivide([77, 8, 69, 66, 9, 51], 2) == False\nassert solution.isPossibleDivide([56, 83, 11, 51, 67, 2, 22], 4) == False\nassert solution.isPossibleDivide([85, 68, 89], 1) == True\nassert solution.isPossibleDivide([39, 83, 37, 27, 79, 59, 100, 80, 9, 16], 10) == False\nassert solution.isPossibleDivide([55, 59, 69, 7, 73, 38, 12, 46, 47, 88], 6) == False\nassert solution.isPossibleDivide([96, 70, 41], 2) == False\nassert solution.isPossibleDivide([59, 25, 13, 39, 86, 7, 27, 80], 6) == False\nassert solution.isPossibleDivide([79, 5], 3) == False\nassert solution.isPossibleDivide([72, 70, 10, 32, 62, 37, 64, 27, 6, 83], 11) == False\nassert solution.isPossibleDivide([14, 91, 34, 64, 26, 23, 49], 5) == False\nassert solution.isPossibleDivide([50, 63, 49, 56, 57], 2) == False\nassert solution.isPossibleDivide([38, 1, 89, 20, 18, 5, 49], 5) == False\nassert solution.isPossibleDivide([64, 89, 38, 65, 98], 2) == False\nassert solution.isPossibleDivide([34, 30, 99, 5, 88, 14, 33, 25, 81], 1) == True\nassert solution.isPossibleDivide([59, 35, 33, 42, 9, 39, 10, 54], 9) == False\nassert solution.isPossibleDivide([36, 22], 1) == True\nassert solution.isPossibleDivide([47, 21, 56, 96, 68], 6) == False\nassert solution.isPossibleDivide([95, 26, 82], 3) == False\nassert solution.isPossibleDivide([19, 30, 5], 1) == True\nassert solution.isPossibleDivide([86, 50, 88, 87, 2, 35, 90, 20, 21], 8) == False\nassert solution.isPossibleDivide([48, 33, 26], 1) == True\nassert solution.isPossibleDivide([68, 5, 75, 38, 81], 3) == False\nassert solution.isPossibleDivide([6, 24, 5, 11, 82, 21, 35], 6) == False\nassert solution.isPossibleDivide([19, 17, 77, 45, 22, 16], 5) == False\nassert solution.isPossibleDivide([46, 16], 3) == False\nassert solution.isPossibleDivide([2, 9, 95, 37, 97, 27, 88, 61, 80], 5) == False\nassert solution.isPossibleDivide([91, 30, 84, 78, 31, 50, 77, 12, 5, 49], 1) == True\nassert solution.isPossibleDivide([29, 26, 97, 20, 90, 60, 25, 33, 31, 81], 10) == False\nassert solution.isPossibleDivide([84, 86, 79, 89, 47, 68, 56, 72, 1, 24], 3) == False\nassert solution.isPossibleDivide([18, 69, 28, 100, 30, 17, 82, 52], 4) == False\nassert solution.isPossibleDivide([19, 11, 35, 38, 85, 7, 89], 3) == False\nassert solution.isPossibleDivide([8, 15, 26], 4) == False\nassert solution.isPossibleDivide([36, 30, 12, 57, 9, 72, 25, 43, 54, 32], 5) == False\nassert solution.isPossibleDivide([56, 77, 50], 1) == True\nassert solution.isPossibleDivide([38, 65, 59, 54, 53, 94], 1) == True\nassert solution.isPossibleDivide([53, 35, 88, 47, 5, 90, 62, 1], 5) == False\nassert solution.isPossibleDivide([70, 6, 85], 1) == True\nassert solution.isPossibleDivide([52, 69], 2) == False\nassert solution.isPossibleDivide([54, 4], 2) == False\nassert solution.isPossibleDivide([5, 93, 84, 98], 2) == False\nassert solution.isPossibleDivide([65, 31, 12], 1) == True\nassert solution.isPossibleDivide([40, 47, 45, 1, 87, 64, 61, 72, 55, 29], 5) == False\nassert solution.isPossibleDivide([32, 45, 57, 15, 51], 3) == False\nassert solution.isPossibleDivide([17, 87, 75, 67, 5, 59], 6) == False\nassert solution.isPossibleDivide([29, 94, 35, 48, 41, 83, 42], 2) == False\nassert solution.isPossibleDivide([46, 41, 42], 2) == False\nassert solution.isPossibleDivide([4, 89], 1) == True\nassert solution.isPossibleDivide([63, 89, 67, 71, 75, 88, 11, 85, 84], 3) == False\nassert solution.isPossibleDivide([2, 82, 40, 84, 56, 70, 36, 32, 60, 27], 7) == False\nassert solution.isPossibleDivide([8, 32, 38, 74, 19, 30], 6) == False\nassert solution.isPossibleDivide([39, 100, 92, 81, 6, 58, 30, 48, 98, 4], 2) == False\nassert solution.isPossibleDivide([65, 47, 89, 26], 4) == False\nassert solution.isPossibleDivide([71, 52, 95, 97, 92, 70, 89], 7) == False\nassert solution.isPossibleDivide([89, 48, 49, 68], 3) == False\nassert solution.isPossibleDivide([63, 8, 90, 16, 89, 5, 56, 69, 2], 4) == False\nassert solution.isPossibleDivide([63, 34, 49, 69, 72, 33], 4) == False\nassert solution.isPossibleDivide([33, 77, 20, 24], 3) == False\nassert solution.isPossibleDivide([84, 4, 54, 69, 59], 2) == False\nassert solution.isPossibleDivide([88, 22, 60, 73, 36, 17, 77], 4) == False\nassert solution.isPossibleDivide([98, 71, 12, 62], 3) == False\nassert solution.isPossibleDivide([80, 22, 4, 58, 65, 9, 79, 92], 6) == False\nassert solution.isPossibleDivide([3, 73, 80], 3) == False\nassert solution.isPossibleDivide([78, 1, 44, 89, 41, 27, 98, 76], 3) == False\nassert solution.isPossibleDivide([47, 21], 3) == False\nassert solution.isPossibleDivide([86, 41, 15, 38, 53, 35, 82, 43, 4], 5) == False\nassert solution.isPossibleDivide([56, 80, 64, 87, 60, 35, 57, 89, 81, 7], 8) == False\nassert solution.isPossibleDivide([88, 29, 36, 57, 81, 10, 16, 77, 95, 19], 11) == False\nassert solution.isPossibleDivide([69, 16, 78, 54, 27], 2) == False\nassert solution.isPossibleDivide([5, 27, 79, 69, 22, 19, 34, 86], 9) == False\nassert solution.isPossibleDivide([50, 6, 26, 62, 49, 91, 43], 7) == False\nassert solution.isPossibleDivide([44, 20, 2, 45, 32, 57, 51, 12, 81, 79], 7) == False\nassert solution.isPossibleDivide([88, 45], 2) == False\nassert solution.isPossibleDivide([26, 65, 28, 88, 78, 92, 51, 73, 70], 2) == False\nassert solution.isPossibleDivide([62, 70, 36], 1) == True\nassert solution.isPossibleDivide([66, 33, 51, 35, 77], 4) == False\nassert solution.isPossibleDivide([99, 71, 81, 10], 4) == False\nassert solution.isPossibleDivide([87, 13, 41, 17, 2, 49, 61, 59, 71, 21], 8) == False\nassert solution.isPossibleDivide([71, 85], 2) == False\nassert solution.isPossibleDivide([90, 11, 76, 21, 39, 63, 3, 57], 6) == False\nassert solution.isPossibleDivide([26, 58, 8, 60, 38, 24, 63, 37, 18, 20], 1) == True\nassert solution.isPossibleDivide([52, 65, 16], 3) == False\nassert solution.isPossibleDivide([8, 90, 51, 4, 100, 48], 1) == True\nassert solution.isPossibleDivide([53, 21, 6, 38, 40, 15, 42, 34], 2) == False\nassert solution.isPossibleDivide([14, 99, 76, 22], 4) == False\nassert solution.isPossibleDivide([98, 83, 19, 50, 61, 67, 34, 6, 4, 11], 9) == False\nassert solution.isPossibleDivide([99, 52], 2) == False",
  "inefficient_solution": "class Solution:\n    def isPossibleDivide(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        nums_set = set(nums)\n        nums_copy = nums[:] * (n * k)\n        nums_copy.sort()\n        \n        i = 0\n        while i < len(nums_copy):\n            curr_set = set()\n            for j in range(i, i + k):\n                if nums_copy[j] in nums_set:\n                    curr_set.add(nums_copy[j])\n            if len(curr_set) != k:\n                return False\n            for num in curr_set:\n                nums_set.remove(num)\n            i += k\n        return True",
  "is_python": true
}