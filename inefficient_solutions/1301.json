{
  "problem_idx": 1301,
  "task_name": "Number of Paths with Max Score",
  "markdown_description": "\nYou are given a square `board`\u00a0of characters. You can move on the board starting at the bottom right square marked with the character\u00a0`'S'`.\n\n\nYou need\u00a0to reach the top left square marked with the character `'E'`. The rest of the squares are labeled either with a numeric character\u00a0`1, 2, ..., 9` or with an obstacle `'X'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\n\n\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, **taken modulo `10^9 + 7`**.\n\n\nIn case there is no path, return\u00a0`[0, 0]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** board = [\"E23\",\"2X2\",\"12S\"]\n**Output:** [7,1]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** board = [\"E12\",\"1X1\",\"21S\"]\n**Output:** [4,2]\n\n```\n**Example 3:**\n\n\n\n```\n**Input:** board = [\"E11\",\"XXX\",\"11S\"]\n**Output:** [0,0]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= board.length == board[i].length <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n        def update(i, j, x, y):\n            if x >= n or y >= n or f[x][y] == -1 or board[i][j] in \"XS\":\n                return\n            if f[x][y] > f[i][j]:\n                f[i][j] = f[x][y]\n                g[i][j] = g[x][y]\n            elif f[x][y] == f[i][j]:\n                g[i][j] += g[x][y]\n\n        n = len(board)\n        f = [[-1] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        f[-1][-1], g[-1][-1] = 0, 1\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                update(i, j, i + 1, j)\n                update(i, j, i, j + 1)\n                update(i, j, i + 1, j + 1)\n                if f[i][j] != -1 and board[i][j].isdigit():\n                    f[i][j] += int(board[i][j])\n        mod = 10**9 + 7\n        return [0, 0] if f[0][0] == -1 else [f[0][0], g[0][0] % mod]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n        def update(i, j, x, y):\n            if x >= n or y >= n or f[x][y] == -1 or board[i][j] in \"XS\":\n                return\n            if f[x][y] > f[i][j]:\n                f[i][j] = f[x][y]\n                g[i][j] = g[x][y]\n            elif f[x][y] == f[i][j]:\n                g[i][j] += g[x][y]\n\n        n = len(board)\n        f = [[-1] * n for _ in range(n)]\n        g = [[0] * n for _ in range(n)]\n        f[-1][-1], g[-1][-1] = 0, 1\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                update(i, j, i + 1, j)\n                update(i, j, i, j + 1)\n                update(i, j, i + 1, j + 1)\n                if f[i][j] != -1 and board[i][j].isdigit():\n                    f[i][j] += int(board[i][j])\n        mod = 10**9 + 7\n        return [0, 0] if f[0][0] == -1 else [f[0][0], g[0][0] % mod]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random board\n    n = random.randint(2, 10)\n    board = []\n    for _ in range(n):\n        row = \"\"\n        for _ in range(n):\n            cell = random.choice([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"X\"])\n            row += cell\n        board.append(row)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.pathsWithMaxScore(board)\n\n    return board, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        board, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.pathsWithMaxScore(board) == expected_result\n        print(f\"assert solution.pathsWithMaxScore({board}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.pathsWithMaxScore({board}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.pathsWithMaxScore(['9111589', 'X969X19', '9787637', 'X919943', '124X871', '221156X', 'XX99837']) == [90, 4]\nassert solution.pathsWithMaxScore(['45', '91']) == [14, 1]\nassert solution.pathsWithMaxScore(['11992', '43145', 'X7744', '29891', 'XX484']) == [53, 1]\nassert solution.pathsWithMaxScore(['21X9', '6281', 'X599', '1723']) == [39, 1]\nassert solution.pathsWithMaxScore(['1842', '4565', '2565', '5756']) == [37, 3]\nassert solution.pathsWithMaxScore(['8747XX18', '22872198', '98224735', '1852X998', '65941586', '27896816', '23X99X35', '93199136']) == [103, 4]\nassert solution.pathsWithMaxScore(['93X228555', '238564197', '88618268X', '123528455', '742433X15', '42745X661', 'X2613145X', '275666251', 'X724X5439']) == [95, 1]\nassert solution.pathsWithMaxScore(['272256', '981441', '929X55', '622863', '6X288X', '2X8861']) == [64, 2]\nassert solution.pathsWithMaxScore(['814', '112', '213']) == [18, 1]\nassert solution.pathsWithMaxScore(['873969', '185534', '546395', '4X3839', '916388', '589729']) == [77, 2]\nassert solution.pathsWithMaxScore(['8X6X91455', '359194996', '579415199', '15X778938', '965912X5X', '147898249', '584422376', '642239XX8', '68252X566']) == [114, 1]\nassert solution.pathsWithMaxScore(['88X189927', '6X9X56327', '574722423', '251352976', '291494X59', '357X5X365', '122576569', '869715578', '797489948']) == [112, 2]\nassert solution.pathsWithMaxScore(['11577', '7653X', '75193', 'X4658', '16753']) == [47, 1]\nassert solution.pathsWithMaxScore(['91698', '65984', '67654', '54663', '45886']) == [63, 1]\nassert solution.pathsWithMaxScore(['51', '22']) == [9, 1]\nassert solution.pathsWithMaxScore(['3576611', '99429X8', '991X711', '3968149', '5833277', '5367479', '2948814']) == [87, 8]\nassert solution.pathsWithMaxScore(['97X38689', '242X5325', '246X5989', '87819415', '67448612', '58887654', '727X5341', '137X6892']) == [99, 1]\nassert solution.pathsWithMaxScore(['91', '59']) == [23, 1]\nassert solution.pathsWithMaxScore(['2726694196', '1565X92X34', '4X8X67582X', '99695265X6', '4274XX7187', '9175438193', '238585X7X1', '9X5246X826', '7881549998', '6994646523']) == [122, 1]\nassert solution.pathsWithMaxScore(['3841552686', '842414X846', '186359395X', '54647X8813', '2644X14488', '181X6X55X5', '8153993242', 'X6967122X3', '4354X15273', '1194781296']) == [108, 2]\nassert solution.pathsWithMaxScore(['128', '922', '366']) == [25, 1]\nassert solution.pathsWithMaxScore(['28XX78', '65X225', '449493', '772128', '792433', '11X759']) == [64, 1]\nassert solution.pathsWithMaxScore(['XX3', '635', '561']) == [0, 0]\nassert solution.pathsWithMaxScore(['XX37', '1662', 'XX67', '7464']) == [0, 0]\nassert solution.pathsWithMaxScore(['897', '12X', '931']) == [23, 1]\nassert solution.pathsWithMaxScore(['833537', '465374', '186343', 'X258XX', '814669', '9358X4']) == [70, 1]\nassert solution.pathsWithMaxScore(['7957', '7959', '4713', 'X621']) == [43, 1]\nassert solution.pathsWithMaxScore(['XX9XX8', '955459', '771268', '772X69', '932982', '8222X5']) == [0, 0]\nassert solution.pathsWithMaxScore(['2X475', '124X5', '9797X', 'X1X88', '96273']) == [54, 1]\nassert solution.pathsWithMaxScore(['9X21334', '5543326', '4433989', 'X8785X9', '61X4417', '1866491', '7748X71']) == [77, 1]\nassert solution.pathsWithMaxScore(['91876727X', '46665X965', '62292X586', '649653557', '2X867682X', '2X9342751', '351X67865', '5X684X425', '528X5X338']) == [112, 3]\nassert solution.pathsWithMaxScore(['837', '419', '135']) == [32, 1]\nassert solution.pathsWithMaxScore(['43223', '87X44', '524X1', 'X6449', '5X971']) == [48, 1]\nassert solution.pathsWithMaxScore(['39511X378', '516289448', '939354452', '88X154X73', '26435XX25', '16222X552', '859437624', '7479X3895', '225684267']) == [109, 1]\nassert solution.pathsWithMaxScore(['5294', 'X6X6', '686X', '2138']) == [38, 1]\nassert solution.pathsWithMaxScore(['748318952', '768883574', '223153717', '575648446', 'X53732826', '875251558', '99194188X', '67X439325', '865892794']) == [109, 2]\nassert solution.pathsWithMaxScore(['98954328', '47249221', '22757593', '595976X9', '71837786', '56246316', 'X1395636', '2141349X']) == [98, 2]\nassert solution.pathsWithMaxScore(['873X329529', '6762377872', '1183622262', '3153756462', '3419494455', '113X692978', '5875933569', '7182885344', '885X9X2565', 'X59XX78758']) == [127, 2]\nassert solution.pathsWithMaxScore(['37X', '932', '413']) == [20, 2]\nassert solution.pathsWithMaxScore(['94421573', '961467X2', '99777117', 'X5759617', '24585551', '7X74X467', 'X3X75837', '1382X897']) == [113, 1]\nassert solution.pathsWithMaxScore(['28615', '5725X', '45752', '11914', '63961']) == [54, 1]\nassert solution.pathsWithMaxScore(['486155481', '772513471', '183237457', '61X526965', '135426X32', '8X5394248', '683X633X2', '249564899', '436757244']) == [99, 3]\nassert solution.pathsWithMaxScore(['36544', '63285', '57688', '74538', '21726']) == [57, 1]\nassert solution.pathsWithMaxScore(['X74', '618', '279']) == [0, 0]\nassert solution.pathsWithMaxScore(['388313X491', '642X89X4X1', '2771691154', '11689X8725', '424X512X77', '84921XX572', '413X35X311', '7826252477', '55312X3814', '4257598791']) == [107, 1]\nassert solution.pathsWithMaxScore(['X4X', '385', '768']) == [0, 0]\nassert solution.pathsWithMaxScore(['55697', '57898', '1178X', '67764', '12221']) == [53, 3]\nassert solution.pathsWithMaxScore(['135', '347', '637']) == [23, 1]\nassert solution.pathsWithMaxScore(['517', '794', '731']) == [26, 1]\nassert solution.pathsWithMaxScore(['1379635', '381855X', '7X29643', '7844662', '23329X1', '1696181', '5451132']) == [72, 1]\nassert solution.pathsWithMaxScore(['6995739X', '29X87522', 'X115543X', '857X7146', '17419358', '51X98425', '32119X23', '69X6278X']) == [99, 1]\nassert solution.pathsWithMaxScore(['17', '24']) == [12, 1]\nassert solution.pathsWithMaxScore(['69222', '9X443', '83981', '44196', '82253']) == [61, 1]\nassert solution.pathsWithMaxScore(['48', '45']) == [17, 1]\nassert solution.pathsWithMaxScore(['141', '599', '3X9']) == [33, 1]\nassert solution.pathsWithMaxScore(['691467268', 'X21356494', '181915661', '896899358', '456788141', '597212445', '3443X59XX', '1931464X5', '328X76689']) == [117, 1]\nassert solution.pathsWithMaxScore(['32752', '424X1', 'X3187', '13X96', '66133']) == [43, 1]\nassert solution.pathsWithMaxScore(['1188X256XX', '98847249XX', '21834315X7', '5X5975X63X', '1334948858', 'X458XXX1X7', '62323927X9', '2411878156', '379X359267', '8764398427']) == [133, 1]\nassert solution.pathsWithMaxScore(['98X968765', '384445699', '231386818', '3X9468849', '5469468X1', '267591324', '364959X5X', '323911X73', '36X498X26']) == [101, 3]\nassert solution.pathsWithMaxScore(['415', '979', '415']) == [34, 1]\nassert solution.pathsWithMaxScore(['89X44841X', '188282219', '719955175', '799157X64', '29467188X', '988X43939', '8X3357646', 'X87597X23', 'X31798848']) == [124, 1]\nassert solution.pathsWithMaxScore(['1555682', '9896132', '7869892', '9X35914', '4469237', '4677X27', '4735X94']) == [83, 2]\nassert solution.pathsWithMaxScore(['98XX79', '1X313X', '651272', '71X445', '86149X', '525361']) == [58, 1]\nassert solution.pathsWithMaxScore(['163X69', '583493', '9179X3', '864335', '983396', '497XX6']) == [67, 1]\nassert solution.pathsWithMaxScore(['446X52954', '883464763', '419454419', '912X6X28X', '5X8138571', '45539X593', '919769461', '23342275X', '637853991']) == [108, 1]\nassert solution.pathsWithMaxScore(['9892X3', '379273', 'X6X364', '816591', '97X9X9', '334281']) == [70, 1]\nassert solution.pathsWithMaxScore(['559183X33', '436X27273', '928452294', '56731X535', '65498X651', '219X53964', '12X52X714', '496843152', '7XX728726']) == [101, 1]\nassert solution.pathsWithMaxScore(['695X', '4716', 'X967', 'X7X8']) == [52, 1]\nassert solution.pathsWithMaxScore(['29', '53']) == [14, 1]\nassert solution.pathsWithMaxScore(['X4191', '33423', 'X71X2', '393X4', '4X341']) == [0, 0]\nassert solution.pathsWithMaxScore(['897249', '654352', '169735', '485223', '459985', '3964X2']) == [75, 2]\nassert solution.pathsWithMaxScore(['7137', '4289', '1357', '88X5']) == [42, 1]\nassert solution.pathsWithMaxScore(['5X', '57']) == [17, 1]\nassert solution.pathsWithMaxScore(['741', '523', '797']) == [35, 1]\nassert solution.pathsWithMaxScore(['6129495', '8832854', '426X482', '4X59987', '363816X', '91X1X51', '467X259']) == [87, 1]\nassert solution.pathsWithMaxScore(['428X7', 'X384X', '3X676', '27398', '56298']) == [61, 1]\nassert solution.pathsWithMaxScore(['439', '286', '1X9']) == [31, 1]\nassert solution.pathsWithMaxScore(['X8', 'X4']) == [0, 0]\nassert solution.pathsWithMaxScore(['351', 'X2X', '228']) == [20, 1]\nassert solution.pathsWithMaxScore(['357X16', '783586', '35266X', '6622X2', '71X661', '999815']) == [67, 1]\nassert solution.pathsWithMaxScore(['93136', '71451', '453X2', '21619', '78X39']) == [53, 1]\nassert solution.pathsWithMaxScore(['888X67', '418985', '29889X', '116458', '8421X9', '981X31']) == [81, 2]\nassert solution.pathsWithMaxScore(['512', '132', '298']) == [26, 2]\nassert solution.pathsWithMaxScore(['7983718', '183733X', '235968X', '1172269', '6212734', '9562239', '9187134']) == [89, 3]\nassert solution.pathsWithMaxScore(['X54', '359', '5X7']) == [0, 0]\nassert solution.pathsWithMaxScore(['546284', '419336', '884259', '997249', '87217X', '377931']) == [69, 1]\nassert solution.pathsWithMaxScore(['4632', '9836', 'X258', '5581']) == [39, 1]\nassert solution.pathsWithMaxScore(['3437', '2X34', 'X545', '5494']) == [30, 2]\nassert solution.pathsWithMaxScore(['366973997', '535XX2712', '133661X3X', '97X185783', '98X661897', '81787762X', '99X866954', '2183X8281', '27593322X']) == [95, 6]\nassert solution.pathsWithMaxScore(['3524919', '1X84112', '5557841', '4145743', '4181114', '7759X4X', '199X257']) == [66, 1]\nassert solution.pathsWithMaxScore(['7446XX5277', '862X59X244', '6451827918', '6979X46367', '8339521367', '1564X75396', '1211691839', '9212366516', '75X883X316', '5X4385351X']) == [119, 1]\nassert solution.pathsWithMaxScore(['X56', '959', '265']) == [0, 0]\nassert solution.pathsWithMaxScore(['9797411563', '34X47219XX', '9669X42966', '45X55X2282', '618982144X', '5X84485786', 'X684455524', '58375X6965', '5553897763', '6482815623']) == [124, 1]\nassert solution.pathsWithMaxScore(['2258', '3944', '8232', '7355']) == [33, 1]\nassert solution.pathsWithMaxScore(['5529292X', '6X24X5X6', '779573X5', '166374X7', '7856X354', '55495798', '67584339', '59297666']) == [104, 1]\nassert solution.pathsWithMaxScore(['2773', '5674', '5641', '5X21']) == [30, 1]\nassert solution.pathsWithMaxScore(['791126X32', '894337X15', '8598X5895', '184488149', '132819414', 'XX4779323', '478465X15', '667X68863', '698382271']) == [120, 1]\nassert solution.pathsWithMaxScore(['7X6768876', '572548X73', '298923153', '917761964', '5X525647X', '357424954', '64X544242', '1341764X5', '273856474']) == [104, 1]\nassert solution.pathsWithMaxScore(['XX91413', '43786X2', '326X373', '4441378', '2762XX6', '5915589', '8358185']) == [0, 0]\nassert solution.pathsWithMaxScore(['5682786351', '1632516772', 'X994269316', '17946X8618', '81X1422966', '9795543888', '3352934157', '1581741515', '6681459261', '3413626226']) == [123, 1]",
  "inefficient_solution": "class Solution:\n    def pathsWithMaxScore(self, board: List[str]) -> List[int]:\n        n = len(board)\n        mod = 10**9 + 7\n        dp = [[[0 for _ in range(2)] for _ in range(n)] for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j][0] = dp[i][j][1] = 0\n        dp[-1][-1][0], dp[-1][-1][1] = max_sum, 1\n        for i in range(n - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j][0] = max_sum\n                for ii in range(max(0, i + 1), n):\n                    for jj in range(max(0, j + 1), n):\n                        if board[i][j] == \"S\":\n                            dp[i][j][1] += 1\n                        if f[ii][jj] > dp[i][j][0]:\n                            dp[i][j][0] = f[ii][jj]\n                            dp[i][j][1] = dp[ii][jj][1]\n                        elif f[ii][jj] == dp[i][j][0]:\n                            dp[i][j][1] += dp[ii][jj][1]\n                if board[i][j].isdigit():\n                    dp[i][j][0] += int(board[i][j])\n        max_sum = 0\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == 'S':\n                    max_sum += int(board[i][j])\n        return [0, 0] if dp[0][0][0] == 0 else [dp[0][0][0], dp[0][0][1] % mod]",
  "is_python": true
}