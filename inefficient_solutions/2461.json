{
  "problem_idx": 2461,
  "task_name": "Maximum Sum of Distinct Subarrays With Length K",
  "markdown_description": "\nYou are given an integer array `nums` and an integer `k`. Find the maximum subarray sum of all the subarrays of `nums` that meet the following conditions:\n\n\n* The length of the subarray is `k`, and\n* All the elements of the subarray are **distinct**.\n\n\nReturn *the maximum subarray sum of all the subarrays that meet the conditions**.* If no subarray meets the conditions, return `0`.\n\n\n*A **subarray** is a contiguous non-empty sequence of elements within an array.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,5,4,2,9,9,9], k = 3\n**Output:** 15\n**Explanation:** The subarrays of nums with length 3 are:\n- [1,5,4] which meets the requirements and has a sum of 10.\n- [5,4,2] which meets the requirements and has a sum of 11.\n- [4,2,9] which meets the requirements and has a sum of 15.\n- [2,9,9] which does not meet the requirements because the element 9 is repeated.\n- [9,9,9] which does not meet the requirements because the element 9 is repeated.\nWe return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,4,4], k = 3\n**Output:** 0\n**Explanation:** The subarrays of nums with length 3 are:\n- [4,4,4] which does not meet the requirements because the element 4 is repeated.\nWe return 0 because no subarrays meet the conditions.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums[:k])\n        s = sum(nums[:k])\n        ans = s if len(cnt) == k else 0\n        for i in range(k, len(nums)):\n            cnt[nums[i]] += 1\n            s += nums[i]\n            cnt[nums[i - k]] -= 1\n            s -= nums[i - k]\n            if cnt[nums[i - k]] == 0:\n                del cnt[nums[i - k]]\n            if len(cnt) == k:\n                ans = max(ans, s)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n        cnt = Counter(nums[:k])\n        s = sum(nums[:k])\n        ans = s if len(cnt) == k else 0\n        for i in range(k, len(nums)):\n            cnt[nums[i]] += 1\n            s += nums[i]\n            cnt[nums[i - k]] -= 1\n            s -= nums[i - k]\n            if cnt[nums[i - k]] == 0:\n                del cnt[nums[i - k]]\n            if len(cnt) == k:\n                ans = max(ans, s)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumSubarraySum(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumSubarraySum(nums, k) == expected_result\n        print(f\"assert solution.maximumSubarraySum({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumSubarraySum({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumSubarraySum([34, 14], 1) == 34\nassert solution.maximumSubarraySum([50, 13], 1) == 50\nassert solution.maximumSubarraySum([24, 47, 40, 86, 38, 43], 6) == 278\nassert solution.maximumSubarraySum([25, 3, 10], 2) == 28\nassert solution.maximumSubarraySum([70, 98, 62, 39, 74, 60, 96, 42, 25, 71], 2) == 168\nassert solution.maximumSubarraySum([40, 42, 97, 74, 13, 96, 20, 14], 5) == 322\nassert solution.maximumSubarraySum([67, 95, 18, 19], 4) == 199\nassert solution.maximumSubarraySum([34, 91, 74, 45], 4) == 244\nassert solution.maximumSubarraySum([5, 96, 30, 82, 95, 100, 56], 3) == 277\nassert solution.maximumSubarraySum([75, 83, 68, 20, 6, 81, 66], 1) == 83\nassert solution.maximumSubarraySum([7, 70, 65], 3) == 142\nassert solution.maximumSubarraySum([57, 39, 89, 28, 76, 8], 5) == 289\nassert solution.maximumSubarraySum([18, 65, 13], 3) == 96\nassert solution.maximumSubarraySum([80, 78, 76, 56, 26, 6, 69, 48], 4) == 290\nassert solution.maximumSubarraySum([76, 41, 46, 7], 3) == 163\nassert solution.maximumSubarraySum([14, 11, 46, 5, 24, 54, 62, 70], 1) == 70\nassert solution.maximumSubarraySum([57, 13, 87, 48, 47, 99, 94], 1) == 99\nassert solution.maximumSubarraySum([11, 13, 81, 63, 12], 2) == 144\nassert solution.maximumSubarraySum([7, 21, 5, 91, 70, 68, 63, 78, 3], 3) == 229\nassert solution.maximumSubarraySum([3, 36, 97], 3) == 136\nassert solution.maximumSubarraySum([78, 26, 89, 96], 1) == 96\nassert solution.maximumSubarraySum([54, 40, 47, 82], 3) == 169\nassert solution.maximumSubarraySum([66, 83], 2) == 149\nassert solution.maximumSubarraySum([68, 93, 24, 53], 1) == 93\nassert solution.maximumSubarraySum([76, 26, 31, 64, 52, 59, 53, 34], 2) == 116\nassert solution.maximumSubarraySum([25, 86, 12], 2) == 111\nassert solution.maximumSubarraySum([94, 84, 97, 46, 65, 51, 38, 36, 67, 33], 5) == 386\nassert solution.maximumSubarraySum([90, 52, 1, 93, 95, 49, 19, 9], 6) == 380\nassert solution.maximumSubarraySum([15, 8, 80], 1) == 80\nassert solution.maximumSubarraySum([14, 2, 71], 3) == 87\nassert solution.maximumSubarraySum([75, 60], 2) == 135\nassert solution.maximumSubarraySum([8, 76, 27, 97, 11], 3) == 200\nassert solution.maximumSubarraySum([65, 89], 1) == 89\nassert solution.maximumSubarraySum([88, 82, 10, 64, 30, 46, 51, 22, 15, 25], 10) == 433\nassert solution.maximumSubarraySum([85, 20, 17], 3) == 122\nassert solution.maximumSubarraySum([46, 8, 19, 47], 2) == 66\nassert solution.maximumSubarraySum([97, 4, 72, 13, 78, 17, 53], 5) == 264\nassert solution.maximumSubarraySum([38, 82, 58, 86, 12, 67, 95], 4) == 264\nassert solution.maximumSubarraySum([39, 19, 35, 15, 80, 7, 76, 41, 8, 93], 2) == 117\nassert solution.maximumSubarraySum([11, 83, 16, 87, 75, 70, 26, 30, 29], 3) == 232\nassert solution.maximumSubarraySum([66, 27, 41, 24], 2) == 93\nassert solution.maximumSubarraySum([64, 98, 8], 3) == 170\nassert solution.maximumSubarraySum([20, 17, 42, 64], 1) == 64\nassert solution.maximumSubarraySum([51, 56, 7, 1, 32, 49], 5) == 147\nassert solution.maximumSubarraySum([35, 51, 26, 94, 31, 54, 59, 72], 1) == 94\nassert solution.maximumSubarraySum([100, 90, 58, 92], 3) == 248\nassert solution.maximumSubarraySum([53, 79, 9, 38, 81, 87], 6) == 347\nassert solution.maximumSubarraySum([28, 84, 12], 3) == 124\nassert solution.maximumSubarraySum([52, 83, 28, 24, 25, 51], 4) == 187\nassert solution.maximumSubarraySum([47, 90, 63, 6, 21, 93, 22, 23], 2) == 153\nassert solution.maximumSubarraySum([68, 40, 91, 66, 19], 5) == 284\nassert solution.maximumSubarraySum([49, 91, 37, 16, 59, 80], 3) == 177\nassert solution.maximumSubarraySum([84, 10, 1, 61, 31, 57, 100], 3) == 188\nassert solution.maximumSubarraySum([10, 16, 96, 95, 90, 40, 61], 4) == 321\nassert solution.maximumSubarraySum([19, 49, 54, 84, 34, 35], 4) == 221\nassert solution.maximumSubarraySum([41, 1, 76, 37, 10, 61, 6, 31, 23], 2) == 113\nassert solution.maximumSubarraySum([54, 19, 35, 31], 3) == 108\nassert solution.maximumSubarraySum([85, 1, 68, 41, 52, 72], 2) == 124\nassert solution.maximumSubarraySum([89, 91, 80, 74, 81], 1) == 91\nassert solution.maximumSubarraySum([9, 43, 94, 68], 3) == 205\nassert solution.maximumSubarraySum([63, 73, 84, 13, 95, 52, 78, 83], 8) == 541\nassert solution.maximumSubarraySum([87, 11], 1) == 87\nassert solution.maximumSubarraySum([7, 66, 94, 70, 87], 4) == 317\nassert solution.maximumSubarraySum([11, 62, 66, 6, 32, 45], 5) == 211\nassert solution.maximumSubarraySum([100, 77, 65, 91, 50, 97, 85, 68, 9], 6) == 480\nassert solution.maximumSubarraySum([62, 5, 95, 29, 63, 16], 4) == 203\nassert solution.maximumSubarraySum([60, 83, 48, 63, 16, 52], 4) == 254\nassert solution.maximumSubarraySum([21, 49], 1) == 49\nassert solution.maximumSubarraySum([71, 98, 54], 3) == 223\nassert solution.maximumSubarraySum([92, 26, 99, 49], 3) == 217\nassert solution.maximumSubarraySum([8, 38, 1, 46, 17, 27], 1) == 46\nassert solution.maximumSubarraySum([34, 67, 10, 48, 28], 1) == 67\nassert solution.maximumSubarraySum([95, 4, 60, 7, 93, 48, 59, 85, 44], 4) == 285\nassert solution.maximumSubarraySum([94, 31, 27, 42, 11, 53], 3) == 152\nassert solution.maximumSubarraySum([35, 36, 53, 81, 4], 3) == 170\nassert solution.maximumSubarraySum([33, 61, 84, 38, 5], 1) == 84\nassert solution.maximumSubarraySum([16, 59, 64], 3) == 139\nassert solution.maximumSubarraySum([20, 49, 96, 25, 60, 26, 93, 92, 5, 54], 2) == 185\nassert solution.maximumSubarraySum([33, 88, 40, 49], 4) == 210\nassert solution.maximumSubarraySum([52, 82, 62, 12, 91, 6, 60, 32], 2) == 144\nassert solution.maximumSubarraySum([90, 87, 85, 63, 78, 58, 57], 5) == 403\nassert solution.maximumSubarraySum([80, 33, 14, 7, 23, 1, 36], 7) == 194\nassert solution.maximumSubarraySum([86, 63, 24, 42, 94], 1) == 94\nassert solution.maximumSubarraySum([85, 45, 92, 40, 20, 48, 57], 2) == 137\nassert solution.maximumSubarraySum([13, 55, 5, 38, 62, 70], 4) == 175\nassert solution.maximumSubarraySum([54, 66, 99, 23, 89, 71, 60], 2) == 165\nassert solution.maximumSubarraySum([65, 45, 41, 10, 52, 86], 2) == 138\nassert solution.maximumSubarraySum([13, 91, 36, 92, 45, 4], 3) == 219\nassert solution.maximumSubarraySum([41, 99], 2) == 140\nassert solution.maximumSubarraySum([51, 76, 74, 85, 65, 79, 60], 5) == 379\nassert solution.maximumSubarraySum([8, 91, 9], 2) == 100\nassert solution.maximumSubarraySum([55, 8, 44, 25, 28], 4) == 132\nassert solution.maximumSubarraySum([6, 20, 73], 2) == 93\nassert solution.maximumSubarraySum([93, 58, 28, 29, 1, 65, 39], 2) == 151\nassert solution.maximumSubarraySum([13, 3], 2) == 16\nassert solution.maximumSubarraySum([59, 64, 86, 3, 43], 3) == 209\nassert solution.maximumSubarraySum([84, 31, 13, 60, 24, 76, 33, 16, 63, 92], 6) == 304\nassert solution.maximumSubarraySum([41, 11, 7, 80, 75, 90, 15, 51], 6) == 318\nassert solution.maximumSubarraySum([68, 96, 53, 11, 75], 2) == 164\nassert solution.maximumSubarraySum([7, 64, 9, 15, 38, 82], 1) == 82",
  "inefficient_solution": "class Solution:\n    def maximumSubarraySum(self, nums, k):\n        max_sum = 0\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i:i+k]\n            if len(set(subarray)) == k:\n                sum_subarray = sum(subarray)\n                max_sum = max(max_sum, sum_subarray)\n        max_sum_to_store = []\n        for _ in range(1000000):\n            max_sum_to_store.append(max_sum)\n        return max(max_sum_to_store)",
  "is_python": true
}