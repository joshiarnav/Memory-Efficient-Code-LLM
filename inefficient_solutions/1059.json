{
  "problem_idx": 1059,
  "task_name": "All Paths from Source Lead to Destination",
  "markdown_description": "\nGiven the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is:\n\n\n* At least one path exists from the `source` node to the `destination` node\n* If a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`.\n* The number of possible paths from `source` to `destination` is a finite number.\n\n\nReturn `true` if and only if all roads from `source` lead to `destination`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1059.All%20Paths%20from%20Source%20Lead%20to%20Destination/images/485_example_1.png)\n\n```\n\n**Input:** n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2\n**Output:** false\n**Explanation:** It is possible to reach and get stuck on both node 1 and node 2.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1059.All%20Paths%20from%20Source%20Lead%20to%20Destination/images/485_example_2.png)\n\n```\n\n**Input:** n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3\n**Output:** false\n**Explanation:** We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1059.All%20Paths%20from%20Source%20Lead%20to%20Destination/images/485_example_3.png)\n\n```\n\n**Input:** n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 104`\n* `0 <= edges.length <= 104`\n* `edges.length == 2`\n* `0 <= ai, bi <= n - 1`\n* `0 <= source <= n - 1`\n* `0 <= destination <= n - 1`\n* The given graph may have self-loops and parallel edges.\n\n\n",
  "canonical_solution": "class Solution:\n    def leadsToDestination(\n        self, n: int, edges: List[List[int]], source: int, destination: int\n    ) -> bool:\n        @cache\n        def dfs(i):\n            if i == destination:\n                return not g[i]\n            if i in vis or not g[i]:\n                return False\n            vis.add(i)\n            for j in g[i]:\n                if not dfs(j):\n                    return False\n            return True\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n        vis = set()\n        return dfs(source)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def leadsToDestination(self, n, edges, source, destination):\n        @cache\n        def dfs(i):\n            if i == destination:\n                return not g[i]\n            if i in vis or not g[i]:\n                return False\n            vis.add(i)\n            for j in g[i]:\n                if not dfs(j):\n                    return False\n            return True\n\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n        vis = set()\n        return dfs(source)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random number of nodes\n    n = random.randint(1, 10)\n\n    # Generate random number of edges\n    num_edges = random.randint(0, 10)\n    \n    edges = []\n    for _ in range(num_edges):\n        a = random.randint(0, n-1)\n        b = random.randint(0, n-1)\n        edges.append([a, b])\n\n    # Generate random source and destination\n    source = random.randint(0, n-1)\n    destination = random.randint(0, n-1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.leadsToDestination(n, edges, source, destination)\n\n    return n, edges, source, destination, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, edges, source, destination, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.leadsToDestination(n, edges, source, destination) == expected_result\n        print(f\"assert solution.leadsToDestination({n}, {edges}, {source}, {destination}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.leadsToDestination({n}, {edges}, {source}, {destination}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.leadsToDestination(8, [[2, 4], [6, 7], [3, 4], [6, 1], [2, 6], [1, 3]], 4, 2) == False\nassert solution.leadsToDestination(7, [[6, 2], [5, 5], [6, 2], [2, 6]], 1, 6) == False\nassert solution.leadsToDestination(7, [[4, 2]], 6, 4) == False\nassert solution.leadsToDestination(6, [[4, 1], [3, 3], [2, 5], [1, 2], [2, 3], [1, 0], [5, 2], [2, 1], [2, 2], [5, 5]], 4, 5) == False\nassert solution.leadsToDestination(3, [[1, 2], [1, 1], [2, 1], [0, 2], [0, 2], [2, 2]], 2, 0) == False\nassert solution.leadsToDestination(4, [], 2, 2) == True\nassert solution.leadsToDestination(6, [[0, 4], [2, 0]], 0, 0) == False\nassert solution.leadsToDestination(3, [[0, 0], [0, 2], [1, 0], [2, 0], [0, 2]], 1, 1) == False\nassert solution.leadsToDestination(8, [[4, 6], [0, 0], [2, 2], [1, 6], [4, 6], [6, 7]], 7, 5) == False\nassert solution.leadsToDestination(10, [[4, 6], [7, 6], [5, 2], [7, 7], [5, 1]], 8, 7) == False\nassert solution.leadsToDestination(8, [[2, 6], [3, 0], [1, 4], [2, 7], [7, 0], [1, 7], [4, 0], [4, 3]], 3, 5) == False\nassert solution.leadsToDestination(10, [[4, 0], [9, 2], [3, 0], [5, 6], [3, 8], [8, 1], [2, 1], [1, 8], [3, 4]], 5, 9) == False\nassert solution.leadsToDestination(7, [[4, 3]], 0, 2) == False\nassert solution.leadsToDestination(9, [[6, 3], [3, 8], [6, 6], [0, 4], [1, 6], [3, 2], [5, 1], [2, 0]], 5, 5) == False\nassert solution.leadsToDestination(9, [[5, 5], [0, 4], [3, 8]], 1, 5) == False\nassert solution.leadsToDestination(9, [[3, 2], [3, 1]], 4, 4) == True\nassert solution.leadsToDestination(10, [[0, 0], [7, 5], [7, 5], [8, 2], [0, 8], [2, 7], [1, 7], [6, 1], [1, 2], [4, 8]], 2, 1) == False\nassert solution.leadsToDestination(8, [[6, 1], [3, 2], [7, 4], [7, 7], [7, 1], [0, 1], [4, 0], [3, 5]], 7, 7) == False\nassert solution.leadsToDestination(2, [[0, 0], [0, 0], [1, 1], [0, 1], [0, 1], [0, 0]], 0, 0) == False\nassert solution.leadsToDestination(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], 0, 0) == False\nassert solution.leadsToDestination(3, [[1, 1], [0, 0], [2, 0], [1, 1]], 2, 2) == False\nassert solution.leadsToDestination(8, [[3, 0], [2, 3], [5, 2], [2, 0], [3, 7], [6, 1], [4, 4], [0, 4], [3, 5], [5, 0]], 3, 7) == False\nassert solution.leadsToDestination(5, [[4, 4], [4, 1], [1, 0], [4, 3], [3, 4]], 4, 1) == False\nassert solution.leadsToDestination(9, [[7, 2], [4, 7], [0, 8], [4, 2], [0, 5], [4, 2]], 4, 0) == False\nassert solution.leadsToDestination(5, [[4, 3], [4, 1], [3, 0], [1, 0], [4, 3]], 4, 0) == True\nassert solution.leadsToDestination(4, [[3, 2], [2, 1], [0, 2], [0, 3]], 2, 3) == False\nassert solution.leadsToDestination(7, [[0, 6], [6, 5], [3, 3], [5, 0]], 3, 6) == False\nassert solution.leadsToDestination(10, [], 7, 6) == False\nassert solution.leadsToDestination(4, [], 1, 0) == False\nassert solution.leadsToDestination(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], 0, 0) == False\nassert solution.leadsToDestination(8, [[6, 1], [4, 0]], 5, 5) == True\nassert solution.leadsToDestination(2, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 1], [1, 0]], 1, 0) == False\nassert solution.leadsToDestination(3, [[1, 1], [1, 0], [0, 1], [2, 2], [0, 0], [0, 1], [0, 2], [2, 0], [0, 0], [2, 1]], 1, 2) == False\nassert solution.leadsToDestination(1, [[0, 0], [0, 0], [0, 0]], 0, 0) == False\nassert solution.leadsToDestination(1, [], 0, 0) == True\nassert solution.leadsToDestination(5, [[2, 1], [3, 2], [1, 3], [2, 0], [4, 1], [0, 0], [0, 1], [3, 0], [0, 0], [3, 1]], 0, 0) == False\nassert solution.leadsToDestination(1, [[0, 0]], 0, 0) == False\nassert solution.leadsToDestination(5, [[3, 0], [0, 2], [4, 4], [2, 2]], 0, 3) == False\nassert solution.leadsToDestination(6, [[5, 1]], 0, 3) == False\nassert solution.leadsToDestination(10, [[5, 1], [6, 3], [6, 9], [9, 2], [0, 4], [3, 1]], 7, 5) == False\nassert solution.leadsToDestination(2, [[1, 1], [1, 0]], 0, 1) == False\nassert solution.leadsToDestination(3, [[0, 1], [1, 1], [1, 1], [0, 1], [1, 0], [0, 2], [1, 1], [2, 0]], 2, 0) == False\nassert solution.leadsToDestination(6, [], 5, 1) == False\nassert solution.leadsToDestination(2, [[1, 1], [0, 0], [1, 0], [1, 0], [0, 0], [0, 1], [1, 1], [0, 1], [1, 0], [0, 0]], 0, 1) == False\nassert solution.leadsToDestination(5, [[3, 0], [3, 0], [1, 1], [1, 1], [1, 3], [1, 3], [0, 3], [2, 3], [2, 1]], 4, 4) == True\nassert solution.leadsToDestination(9, [[6, 8], [4, 3], [1, 6], [4, 1], [5, 1], [5, 5], [0, 2], [0, 6]], 7, 6) == False\nassert solution.leadsToDestination(8, [[5, 3], [0, 1], [7, 0], [7, 5], [1, 2], [1, 7], [3, 3]], 5, 4) == False\nassert solution.leadsToDestination(7, [[6, 3], [6, 2], [3, 6], [1, 4], [3, 1], [3, 2], [3, 4]], 6, 0) == False\nassert solution.leadsToDestination(7, [[1, 0]], 2, 3) == False\nassert solution.leadsToDestination(6, [], 3, 3) == True\nassert solution.leadsToDestination(4, [[2, 0], [1, 3], [3, 1], [1, 2]], 0, 1) == False\nassert solution.leadsToDestination(5, [[0, 0]], 2, 1) == False\nassert solution.leadsToDestination(5, [[0, 2], [4, 4], [3, 2], [0, 4], [3, 1], [3, 2], [4, 0]], 3, 4) == False\nassert solution.leadsToDestination(7, [[2, 6], [2, 3], [4, 6], [3, 1], [5, 3]], 2, 1) == False\nassert solution.leadsToDestination(5, [[0, 4], [3, 3], [3, 0], [4, 0]], 3, 4) == False\nassert solution.leadsToDestination(6, [[4, 5], [4, 4], [2, 5], [5, 2], [0, 2], [4, 4], [0, 1], [1, 4]], 0, 5) == False\nassert solution.leadsToDestination(8, [[1, 6]], 7, 4) == False\nassert solution.leadsToDestination(6, [[4, 2], [1, 4], [1, 1], [0, 3], [5, 2], [5, 2], [3, 1]], 0, 5) == False\nassert solution.leadsToDestination(2, [[0, 1], [1, 0], [1, 1], [1, 1], [0, 0], [1, 1], [0, 0], [1, 1], [0, 1], [0, 1]], 0, 0) == False\nassert solution.leadsToDestination(7, [[2, 5]], 3, 6) == False\nassert solution.leadsToDestination(3, [[1, 1], [1, 0]], 2, 2) == True\nassert solution.leadsToDestination(4, [[2, 1], [3, 2], [1, 3], [0, 3], [0, 2], [3, 0], [0, 2], [3, 0], [3, 0]], 1, 2) == False\nassert solution.leadsToDestination(2, [[1, 1], [1, 1], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 1]], 0, 1) == False\nassert solution.leadsToDestination(3, [[2, 1]], 2, 2) == False\nassert solution.leadsToDestination(6, [], 5, 1) == False\nassert solution.leadsToDestination(10, [[5, 3], [6, 3], [4, 9], [5, 5], [1, 9], [6, 3], [7, 9]], 6, 6) == False\nassert solution.leadsToDestination(8, [[4, 6], [4, 6], [1, 1], [5, 1], [4, 5], [6, 5], [0, 0], [1, 7]], 3, 0) == False\nassert solution.leadsToDestination(5, [[0, 3], [1, 0]], 3, 1) == False\nassert solution.leadsToDestination(3, [[0, 1], [1, 1], [2, 2], [0, 0], [0, 0], [2, 2]], 1, 0) == False\nassert solution.leadsToDestination(10, [[4, 2]], 6, 9) == False\nassert solution.leadsToDestination(1, [[0, 0], [0, 0]], 0, 0) == False\nassert solution.leadsToDestination(9, [[0, 8], [0, 6], [6, 1]], 7, 8) == False\nassert solution.leadsToDestination(5, [[4, 3]], 2, 1) == False\nassert solution.leadsToDestination(2, [[0, 1], [1, 1], [1, 0], [1, 1], [1, 1]], 0, 0) == False\nassert solution.leadsToDestination(2, [[0, 1], [1, 0], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]], 0, 1) == False\nassert solution.leadsToDestination(3, [[2, 1], [0, 1], [0, 2], [0, 0]], 0, 2) == False\nassert solution.leadsToDestination(6, [], 4, 1) == False\nassert solution.leadsToDestination(8, [[7, 5], [4, 5], [3, 6], [5, 0]], 7, 3) == False\nassert solution.leadsToDestination(1, [], 0, 0) == True\nassert solution.leadsToDestination(4, [[0, 3], [3, 0], [0, 1], [3, 2], [0, 3], [2, 1], [1, 1], [1, 2]], 2, 2) == False\nassert solution.leadsToDestination(8, [[7, 6], [1, 5], [6, 3], [4, 2], [6, 2], [6, 7], [4, 5]], 2, 6) == False\nassert solution.leadsToDestination(3, [[1, 1], [1, 1], [1, 2], [2, 1], [2, 1], [1, 1], [2, 0], [1, 1], [1, 2]], 0, 2) == False\nassert solution.leadsToDestination(3, [[1, 1], [0, 2], [0, 1], [2, 0], [0, 1], [0, 0], [1, 1], [0, 2], [1, 2], [0, 1]], 0, 1) == False\nassert solution.leadsToDestination(5, [[3, 1], [4, 3], [3, 4], [1, 3], [3, 1]], 3, 3) == False\nassert solution.leadsToDestination(9, [[1, 4], [7, 2], [6, 1], [8, 2], [3, 4], [0, 8]], 6, 6) == False\nassert solution.leadsToDestination(10, [[4, 4], [9, 3], [3, 6], [7, 1], [3, 6]], 0, 3) == False\nassert solution.leadsToDestination(5, [[4, 2], [1, 4], [4, 0], [0, 4], [2, 4], [2, 1], [2, 3]], 0, 4) == False\nassert solution.leadsToDestination(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], 0, 0) == False\nassert solution.leadsToDestination(6, [[4, 1], [5, 4], [1, 4]], 2, 0) == False\nassert solution.leadsToDestination(5, [], 2, 4) == False\nassert solution.leadsToDestination(10, [[7, 2], [5, 1], [1, 1], [6, 5]], 5, 5) == False\nassert solution.leadsToDestination(2, [[0, 1], [1, 0], [1, 0], [1, 1], [1, 1], [0, 1], [0, 0], [1, 1], [1, 1]], 1, 1) == False\nassert solution.leadsToDestination(1, [[0, 0], [0, 0], [0, 0]], 0, 0) == False\nassert solution.leadsToDestination(5, [[0, 4], [2, 4], [4, 4], [1, 1], [2, 1], [1, 1], [0, 3], [2, 1]], 2, 3) == False\nassert solution.leadsToDestination(5, [[3, 3], [2, 1], [2, 4], [0, 1]], 2, 2) == False\nassert solution.leadsToDestination(3, [[0, 0], [2, 2], [2, 1], [1, 2], [0, 2], [2, 2], [2, 0], [0, 2]], 0, 2) == False\nassert solution.leadsToDestination(6, [[5, 4], [5, 3], [2, 5], [4, 2], [3, 3], [5, 5], [5, 0], [4, 1]], 3, 2) == False\nassert solution.leadsToDestination(2, [[1, 1]], 0, 1) == False\nassert solution.leadsToDestination(4, [[0, 2], [0, 0], [0, 3], [0, 0], [1, 2], [0, 3], [2, 1], [0, 2], [1, 1]], 0, 1) == False\nassert solution.leadsToDestination(7, [[1, 1], [1, 4], [2, 3], [6, 6], [6, 2], [5, 1], [3, 2], [6, 5]], 4, 1) == False",
  "inefficient_solution": "class Solution:\n    def leadsToDestination(\n        self, n: int, edges: List[List[int]], source: int, destination: int\n    ) -> bool:\n        g = [[] for _ in range(n)]\n        vis = [False] * n\n        stuck = [False] * n\n        paths = [[] for _ in range(n)]\n        for i in range(n):\n            paths[i] = [[] for _ in range(n)]\n        for a, b in edges:\n            g[a].append(b)\n            paths[a][b].append(1)\n        def dfs(i):\n            if i == destination:\n                return True\n            if stuck[i] or vis[i]:\n                return False\n            vis[i] = True\n            for j in g[i]:\n                if not dfs(j):\n                    return False\n                if len(paths[i][j]) == 0:\n                    stuck[i] = True\n            return True\n        return dfs(source)",
  "is_python": true
}