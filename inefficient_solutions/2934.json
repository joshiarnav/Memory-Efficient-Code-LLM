{
  "problem_idx": 2934,
  "task_name": "Minimum Operations to Maximize Last Elements in Arrays",
  "markdown_description": "\nYou are given two **0-indexed** integer arrays, `nums1` and `nums2`, both having length `n`.\n\n\nYou are allowed to perform a series of **operations** (**possibly none**).\n\n\nIn an operation, you select an index `i` in the range `[0, n - 1]` and **swap** the values of `nums1[i]` and `nums2[i]`.\n\n\nYour task is to find the **minimum** number of operations required to satisfy the following conditions:\n\n\n* `nums1[n - 1]` is equal to the **maximum value** among all elements of `nums1`, i.e., `nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1])`.\n* `nums2[n - 1]` is equal to the **maximum** **value** among all elements of `nums2`, i.e., `nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1])`.\n\n\nReturn *an integer denoting the **minimum** number of operations needed to meet **both** conditions*, *or* `-1` *if it is **impossible** to satisfy both conditions.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,7], nums2 = [4,5,3]\n**Output:** 1\n**Explanation:** In this example, an operation can be performed using index i = 2.\nWhen nums1[2] and nums2[2] are swapped, nums1 becomes [1,2,3] and nums2 becomes [4,5,7].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 1.\nSo, the answer is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,3,4,5,9], nums2 = [8,8,4,4,4]\n**Output:** 2\n**Explanation:** In this example, the following operations can be performed:\nFirst operation using index i = 4.\nWhen nums1[4] and nums2[4] are swapped, nums1 becomes [2,3,4,5,4], and nums2 becomes [8,8,4,4,9].\nAnother operation using index i = 3.\nWhen nums1[3] and nums2[3] are swapped, nums1 becomes [2,3,4,4,4], and nums2 becomes [8,8,4,5,9].\nBoth conditions are now satisfied.\nIt can be shown that the minimum number of operations needed to be performed is 2.\nSo, the answer is 2.   \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,5,4], nums2 = [2,5,3]\n**Output:** -1\n**Explanation:** In this example, it is not possible to satisfy both conditions. \nSo, the answer is -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == nums1.length == nums2.length <= 1000`\n* `1 <= nums1[i] <= 109`\n* `1 <= nums2[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        def f(x: int, y: int) -> int:\n            cnt = 0\n            for a, b in zip(nums1[:-1], nums2[:-1]):\n                if a <= x and b <= y:\n                    continue\n                if not (a <= y and b <= x):\n                    return -1\n                cnt += 1\n            return cnt\n\n        a, b = f(nums1[-1], nums2[-1]), f(nums2[-1], nums1[-1])\n        return -1 if a + b == -2 else min(a, b + 1)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        def f(x: int, y: int) -> int:\n            cnt = 0\n            for a, b in zip(nums1[:-1], nums2[:-1]):\n                if a <= x and b <= y:\n                    continue\n                if not (a <= y and b <= x):\n                    return -1\n                cnt += 1\n            return cnt\n\n        a, b = f(nums1[-1], nums2[-1]), f(nums2[-1], nums1[-1])\n        return -1 if a + b == -2 else min(a, b + 1)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list with length n\n    n = random.randint(2, 10)\n    nums1 = random.sample(range(1, 101), n)\n    nums2 = random.sample(range(1, 101), n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minOperations(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minOperations(nums1, nums2) == expected_result\n        print(f\"assert solution.minOperations({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minOperations({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minOperations([95, 24, 78, 71, 56, 10, 7, 5], [55, 65, 76, 28, 98, 63, 47, 44]) == -1\nassert solution.minOperations([12, 96, 92, 26], [1, 9, 44, 61]) == -1\nassert solution.minOperations([14, 21, 3, 98, 58], [57, 95, 47, 56, 75]) == -1\nassert solution.minOperations([31, 92, 40, 7, 11], [57, 8, 1, 53, 96]) == -1\nassert solution.minOperations([14, 1, 88, 72, 24, 20, 94, 70, 4, 79], [99, 58, 54, 21, 84, 34, 40, 35, 37, 59]) == -1\nassert solution.minOperations([75, 97], [70, 43]) == -1\nassert solution.minOperations([6, 31, 15, 37, 82, 95, 42], [52, 42, 76, 100, 7, 67, 77]) == -1\nassert solution.minOperations([65, 88, 83, 24, 14, 74, 58, 91], [59, 23, 51, 3, 83, 74, 26, 49]) == -1\nassert solution.minOperations([80, 10, 37, 34, 46, 54, 60], [90, 97, 31, 15, 92, 30, 5]) == -1\nassert solution.minOperations([43, 72, 82, 47, 57, 23], [9, 99, 44, 30, 15, 59]) == -1\nassert solution.minOperations([51, 61, 3, 82, 37], [77, 8, 49, 93, 53]) == -1\nassert solution.minOperations([91, 95, 84], [47, 45, 42]) == -1\nassert solution.minOperations([64, 32, 36], [31, 26, 76]) == 1\nassert solution.minOperations([11, 97, 76, 1, 29, 67], [25, 15, 11, 33, 68, 95]) == -1\nassert solution.minOperations([61, 79, 27, 70, 75, 56, 72, 2, 95], [92, 61, 82, 90, 3, 17, 22, 72, 79]) == 1\nassert solution.minOperations([76, 57, 75, 33, 44, 20, 15], [97, 25, 43, 62, 69, 99, 45]) == -1\nassert solution.minOperations([10, 23, 79, 66, 69, 5, 47, 95], [66, 74, 85, 31, 75, 40, 1, 94]) == 0\nassert solution.minOperations([34, 75, 93, 4, 5, 45, 64, 60, 78], [83, 34, 97, 65, 60, 44, 36, 51, 13]) == -1\nassert solution.minOperations([68, 63, 38, 65, 52, 80], [13, 58, 96, 77, 63, 74]) == -1\nassert solution.minOperations([2, 69, 48, 43, 61], [25, 22, 26, 10, 96]) == 1\nassert solution.minOperations([36, 72, 3], [56, 6, 87]) == -1\nassert solution.minOperations([3, 85, 1, 70, 32, 37], [4, 36, 70, 99, 92, 91]) == -1\nassert solution.minOperations([74, 94, 30, 14, 62, 84, 76, 56, 68], [9, 50, 82, 70, 5, 58, 35, 80, 30]) == -1\nassert solution.minOperations([69, 26, 84], [54, 100, 37]) == -1\nassert solution.minOperations([39, 91, 45, 62, 68, 38], [23, 79, 19, 85, 51, 27]) == -1\nassert solution.minOperations([96, 64], [40, 9]) == -1\nassert solution.minOperations([73, 43], [91, 14]) == -1\nassert solution.minOperations([68, 82, 54, 91, 33], [2, 9, 74, 60, 13]) == -1\nassert solution.minOperations([94, 69, 5, 7, 49, 40, 47, 64, 76, 65], [95, 66, 35, 67, 23, 4, 63, 89, 42, 96]) == -1\nassert solution.minOperations([17, 44, 25, 26, 18, 35, 1, 13], [30, 37, 15, 94, 75, 44, 77, 27]) == -1\nassert solution.minOperations([89, 16, 83, 91, 97, 18, 60, 28], [95, 97, 82, 62, 10, 37, 12, 55]) == -1\nassert solution.minOperations([94, 76, 43, 48, 22, 68], [30, 27, 37, 67, 29, 71]) == -1\nassert solution.minOperations([36, 90, 44, 74, 57, 42, 83, 22, 69], [46, 94, 66, 65, 27, 5, 11, 75, 16]) == -1\nassert solution.minOperations([2, 10, 54, 87, 67, 20, 93, 37, 18], [82, 90, 88, 92, 27, 29, 78, 60, 51]) == -1\nassert solution.minOperations([26, 11, 54, 69, 68, 63, 25, 66], [73, 41, 22, 97, 16, 40, 47, 67]) == -1\nassert solution.minOperations([61, 41, 5, 43, 100, 39, 15, 44, 36, 62], [15, 54, 78, 74, 77, 35, 56, 60, 50, 18]) == -1\nassert solution.minOperations([40, 74, 56, 47, 60, 9], [28, 2, 99, 19, 100, 84]) == -1\nassert solution.minOperations([100, 70, 83, 2, 7, 47, 72], [20, 84, 79, 65, 35, 11, 50]) == -1\nassert solution.minOperations([44, 13, 72, 38, 42, 4], [41, 50, 86, 27, 14, 63]) == -1\nassert solution.minOperations([83, 50, 45, 90, 26, 21, 61], [55, 21, 70, 82, 83, 4, 10]) == -1\nassert solution.minOperations([20, 34, 24, 43, 10], [9, 10, 71, 18, 63]) == -1\nassert solution.minOperations([52, 25, 80, 33, 84, 94, 76], [71, 72, 24, 29, 26, 59, 84]) == -1\nassert solution.minOperations([32, 2, 39], [69, 60, 53]) == -1\nassert solution.minOperations([70, 40], [72, 95]) == -1\nassert solution.minOperations([47, 16, 84, 88, 29, 17, 27, 14], [83, 12, 16, 55, 44, 54, 17, 99]) == -1\nassert solution.minOperations([80, 42, 19, 97, 25, 79, 5, 46, 78, 93], [35, 72, 73, 77, 83, 5, 99, 20, 76, 66]) == -1\nassert solution.minOperations([64, 35], [61, 99]) == -1\nassert solution.minOperations([96, 22, 8, 30], [25, 17, 30, 81]) == -1\nassert solution.minOperations([62, 2], [19, 41]) == -1\nassert solution.minOperations([14, 69, 61, 18, 2, 98, 1], [17, 33, 2, 88, 93, 74, 67]) == -1\nassert solution.minOperations([16, 36, 25, 86, 87, 89, 29, 72, 52, 58], [82, 13, 26, 74, 49, 20, 81, 54, 33, 21]) == -1\nassert solution.minOperations([12, 17, 15, 82, 68, 54, 1], [9, 15, 17, 18, 11, 64, 79]) == -1\nassert solution.minOperations([87, 31, 47], [1, 53, 65]) == -1\nassert solution.minOperations([46, 12, 57, 37, 36], [69, 60, 78, 10, 24]) == -1\nassert solution.minOperations([8, 80, 36], [53, 27, 50]) == -1\nassert solution.minOperations([83, 2, 42], [10, 95, 37]) == -1\nassert solution.minOperations([21, 88, 98, 89, 37, 31], [42, 19, 74, 11, 57, 3]) == -1\nassert solution.minOperations([80, 56], [95, 52]) == -1\nassert solution.minOperations([98, 6, 69, 35, 19], [92, 38, 13, 53, 71]) == -1\nassert solution.minOperations([13, 6, 71, 49, 77, 59, 5], [70, 49, 24, 28, 80, 10, 62]) == -1\nassert solution.minOperations([86, 13, 81, 25, 61, 20, 65], [78, 38, 17, 94, 61, 56, 85]) == -1\nassert solution.minOperations([64, 32, 91, 83, 40, 14], [3, 25, 47, 22, 68, 55]) == -1\nassert solution.minOperations([96, 16, 26, 36, 59, 75, 93], [7, 71, 36, 34, 32, 63, 25]) == -1\nassert solution.minOperations([17, 67, 50, 31, 42, 80, 34], [2, 84, 3, 32, 73, 11, 57]) == -1\nassert solution.minOperations([85, 45, 94, 88], [26, 14, 52, 2]) == -1\nassert solution.minOperations([45, 32, 89, 28, 80], [37, 11, 73, 35, 4]) == -1\nassert solution.minOperations([94, 96, 86, 43, 98, 6, 77, 53], [46, 96, 14, 6, 88, 36, 94, 69]) == -1\nassert solution.minOperations([84, 31, 12, 68], [100, 56, 96, 28]) == -1\nassert solution.minOperations([4, 20, 3, 25, 65, 10, 61], [9, 89, 27, 11, 94, 28, 46]) == -1\nassert solution.minOperations([17, 84, 20], [43, 89, 37]) == -1\nassert solution.minOperations([16, 70], [33, 79]) == 0\nassert solution.minOperations([45, 66, 84, 93, 23, 31, 52], [73, 10, 30, 74, 55, 20, 22]) == -1\nassert solution.minOperations([71, 78, 22, 30, 16, 59, 72], [46, 70, 56, 1, 48, 10, 40]) == -1\nassert solution.minOperations([90, 68, 89, 43, 31, 28, 17, 81, 4, 5], [80, 20, 72, 98, 48, 29, 15, 8, 50, 26]) == -1\nassert solution.minOperations([13, 27, 79, 70, 81, 94, 33], [60, 77, 96, 16, 83, 79, 91]) == -1\nassert solution.minOperations([55, 13, 48, 30, 12, 56, 7, 22, 54, 85], [82, 25, 66, 18, 52, 69, 14, 24, 11, 98]) == 0\nassert solution.minOperations([31, 30, 62, 80, 10, 95, 14, 59, 34], [60, 56, 57, 67, 21, 92, 100, 85, 24]) == -1\nassert solution.minOperations([51, 28, 96, 91, 7, 32, 80, 99, 100, 13], [50, 59, 55, 62, 3, 18, 9, 15, 83, 63]) == -1\nassert solution.minOperations([74, 67, 27, 42, 56, 93, 23, 28], [95, 21, 86, 88, 80, 27, 43, 3]) == -1\nassert solution.minOperations([65, 82, 2, 31, 42, 11, 50, 28], [12, 95, 98, 89, 82, 24, 47, 49]) == -1\nassert solution.minOperations([39, 26, 71, 30], [5, 66, 93, 21]) == -1\nassert solution.minOperations([3, 69, 58, 84, 57], [19, 17, 52, 27, 13]) == -1\nassert solution.minOperations([72, 39, 43], [92, 23, 38]) == -1\nassert solution.minOperations([42, 52, 66], [96, 50, 38]) == -1\nassert solution.minOperations([3, 52, 16, 45, 65], [91, 42, 95, 74, 3]) == -1\nassert solution.minOperations([51, 85], [44, 94]) == 0\nassert solution.minOperations([32, 75, 24, 48, 93, 69, 54, 63], [48, 95, 85, 73, 44, 16, 97, 47]) == -1\nassert solution.minOperations([52, 81, 39, 86], [82, 68, 81, 24]) == -1\nassert solution.minOperations([75, 92, 4, 55, 58], [44, 25, 78, 60, 65]) == -1\nassert solution.minOperations([36, 9, 91, 41, 29, 95], [82, 49, 11, 33, 85, 6]) == -1\nassert solution.minOperations([18, 11, 45, 2, 54, 41, 62, 93, 83, 12], [17, 94, 38, 44, 33, 86, 10, 15, 95, 1]) == -1\nassert solution.minOperations([100, 28, 51, 88, 6, 67], [91, 42, 70, 65, 31, 32]) == -1\nassert solution.minOperations([67, 15, 30, 76, 58, 35, 25, 27], [48, 17, 93, 70, 3, 21, 51, 87]) == -1\nassert solution.minOperations([34, 19], [34, 84]) == -1\nassert solution.minOperations([69, 59, 84, 24, 65, 53], [94, 56, 98, 66, 6, 61]) == -1\nassert solution.minOperations([85, 13, 93, 39, 7], [97, 76, 43, 84, 33]) == -1\nassert solution.minOperations([27, 72], [18, 83]) == 0\nassert solution.minOperations([28, 29, 58, 34], [78, 48, 39, 75]) == -1\nassert solution.minOperations([88, 40, 47, 17, 36, 87, 29, 27], [69, 72, 54, 87, 86, 62, 55, 37]) == -1\nassert solution.minOperations([93, 76, 15, 41, 79, 62, 51, 43, 54], [46, 100, 79, 99, 71, 10, 89, 88, 8]) == -1",
  "inefficient_solution": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        def f(x: int, y: int) -> int:\n            cnt = 0\n            temp1, temp2 = [0] * len(nums1), [0] * len(nums2)\n            for i, (a, b) in enumerate(zip(nums1[:-1], nums2[:-1])):\n                if a <= x and b <= y:\n                    temp1[i], temp2[i] = a, b\n                    continue\n                if not (a <= y and b <= x):\n                    return -1\n                cnt += 1\n                temp1[i], temp2[i] = max(a, x), max(b, y)\n            temp1[-1], temp2[-1] = nums1[-1], nums2[-1]\n            return cnt\n\n        a, b = f(nums1[-1], nums2[-1]), f(nums2[-1], nums1[-1])\n        return -1 if a + b == -2 else min(a, b + 1)",
  "is_python": true
}