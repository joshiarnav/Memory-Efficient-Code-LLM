{
  "problem_idx": 530,
  "task_name": "Minimum Absolute Difference in BST",
  "markdown_description": "\nGiven the `root` of a Binary Search Tree (BST), return *the minimum absolute difference between the values of any two different nodes in the tree*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/images/bst1.jpg)\n\n```\n\n**Input:** root = [4,2,6,1,3]\n**Output:** 1\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0530.Minimum%20Absolute%20Difference%20in%20BST/images/bst2.jpg)\n\n```\n\n**Input:** root = [1,0,48,null,null,12,49]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[2, 104]`.\n* `0 <= Node.val <= 105`\n\n\n\u00a0\n\n\n**Note:** This question is the same as 783: <https://leetcode.com/problems/minimum-distance-between-bst-nodes/>\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getMinimumDifference(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return\n            dfs(root.left)\n            nonlocal ans, prev\n            ans = min(ans, abs(prev - root.val))\n            prev = root.val\n            dfs(root.right)\n\n        ans = prev = inf\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def getMinimumDifference(self, root: TreeNode) -> int:\n        def dfs(root):\n            if root is None:\n                return\n            dfs(root.left)\n            nonlocal ans, prev\n            ans = min(ans, abs(prev - root.val))\n            prev = root.val\n            dfs(root.right)\n\n        ans = prev = inf\n        dfs(root)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random binary tree\n    root = generate_tree()\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getMinimumDifference(root)\n\n    return root, expected_result\n\ndef generate_tree():\n    # Generate a random binary tree\n    node_vals = random.sample(range(0, 101), random.randint(2, 10))\n    nodes = [TreeNode(val=val) for val in node_vals]\n    root = nodes[0]\n    for node in nodes[1:]:\n        insert_node(root, node)\n    return root\n\ndef insert_node(root, node):\n    if node.val < root.val:\n        if root.left is None:\n            root.left = node\n        else:\n            insert_node(root.left, node)\n    else:\n        if root.right is None:\n            root.right = node\n        else:\n            insert_node(root.right, node)\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getMinimumDifference(root) == expected_result\n        print(f\"assert solution.getMinimumDifference({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getMinimumDifference({root}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee707b2d0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8dd0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70b2410>) == 7\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70b2810>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70b2450>) == 4\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8dd0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee707b2d0>) == 5\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8dd0>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70b2850>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee707b2d0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70b2450>) == 10\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee721c990>) == 8\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70b2850>) == 5\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee707b2d0>) == 8\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8d90>) == 5\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8dd0>) == 6\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8e50>) == 4\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9190>) == 11\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9050>) == 4\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8d10>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8ed0>) == 80\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8c90>) == 6\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d90d0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d8e90>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d92d0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9450>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9650>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9490>) == 19\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d95d0>) == 35\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9210>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9290>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9410>) == 6\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9510>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9390>) == 49\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9790>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9010>) == 6\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d96d0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9950>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9710>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9990>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9bd0>) == 15\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9c10>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9a50>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9810>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9e90>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9ed0>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9ad0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9d10>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9d90>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d94d0>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da110>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9e10>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da0d0>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da010>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da090>) == 16\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da250>) == 9\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da050>) == 5\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9cd0>) == 81\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da510>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da410>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da210>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da350>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da290>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da5d0>) == 4\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da690>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70d9d50>) == 53\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da7d0>) == 10\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da650>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da750>) == 13\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da990>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da850>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da950>) == 5\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dab10>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daa90>) == 4\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dabd0>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da4d0>) == 34\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dad50>) == 7\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dacd0>) == 5\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dad90>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da590>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daa50>) == 4\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dab90>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70da390>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daf50>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dae50>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daf90>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70db050>) == 2\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dab50>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dad90>) == 17\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daf10>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dac10>) == 1\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daf50>) == 5\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70db050>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daf90>) == 6\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dae90>) == 5\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daf10>) == 18\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70db090>) == 19\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70db110>) == 3\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70daa50>) == 4\nassert solution.getMinimumDifference(<__main__.TreeNode object at 0x7fcee70dafd0>) == 2",
  "inefficient_solution": "",
  "is_python": true
}