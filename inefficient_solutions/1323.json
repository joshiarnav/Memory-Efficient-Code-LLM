{
  "problem_idx": 1323,
  "task_name": "Maximum ",
  "markdown_description": "\nYou are given a positive integer `num` consisting only of digits `6` and `9`.\n\n\nReturn *the maximum number you can get by changing **at most** one digit (*`6` *becomes* `9`*, and* `9` *becomes* `6`*)*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 9669\n**Output:** 9969\n**Explanation:** \nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 9996\n**Output:** 9999\n**Explanation:** Changing the last digit 6 to 9 results in the maximum number.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = 9999\n**Output:** 9999\n**Explanation:** It is better not to apply any change.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 104`\n* `num`\u00a0consists of only `6` and `9` digits.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximum69Number(self, num: int) -> int:\n        return int(str(num).replace(\"6\", \"9\", 1))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximum69Number(self, num: int) -> int:\n        return int(str(num).replace(\"6\", \"9\", 1))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random positive integer consisting only of digits 6 and 9\n    num = int(\"\".join(random.choices([\"6\", \"9\"], k=random.randint(1, 4))))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximum69Number(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximum69Number(num) == expected_result\n        print(f\"assert solution.maximum69Number({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximum69Number({num}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(669) == 969\nassert solution.maximum69Number(996) == 999\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(999) == 999\nassert solution.maximum69Number(99) == 99\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(699) == 999\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(996) == 999\nassert solution.maximum69Number(6999) == 9999\nassert solution.maximum69Number(99) == 99\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(9966) == 9996\nassert solution.maximum69Number(699) == 999\nassert solution.maximum69Number(696) == 996\nassert solution.maximum69Number(669) == 969\nassert solution.maximum69Number(6669) == 9669\nassert solution.maximum69Number(99) == 99\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(669) == 969\nassert solution.maximum69Number(99) == 99\nassert solution.maximum69Number(96) == 99\nassert solution.maximum69Number(669) == 969\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(666) == 966\nassert solution.maximum69Number(996) == 999\nassert solution.maximum69Number(9699) == 9999\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(969) == 999\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(699) == 999\nassert solution.maximum69Number(6666) == 9666\nassert solution.maximum69Number(66) == 96\nassert solution.maximum69Number(6696) == 9696\nassert solution.maximum69Number(9999) == 9999\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(9) == 9\nassert solution.maximum69Number(69) == 99\nassert solution.maximum69Number(6996) == 9996\nassert solution.maximum69Number(669) == 969\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(699) == 999\nassert solution.maximum69Number(9696) == 9996\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(699) == 999\nassert solution.maximum69Number(9696) == 9996\nassert solution.maximum69Number(669) == 969\nassert solution.maximum69Number(666) == 966\nassert solution.maximum69Number(6996) == 9996\nassert solution.maximum69Number(6966) == 9966\nassert solution.maximum69Number(966) == 996\nassert solution.maximum69Number(6666) == 9666\nassert solution.maximum69Number(969) == 999\nassert solution.maximum69Number(966) == 996\nassert solution.maximum69Number(999) == 999\nassert solution.maximum69Number(996) == 999\nassert solution.maximum69Number(9969) == 9999\nassert solution.maximum69Number(96) == 99\nassert solution.maximum69Number(696) == 996\nassert solution.maximum69Number(6696) == 9696\nassert solution.maximum69Number(969) == 999\nassert solution.maximum69Number(696) == 996\nassert solution.maximum69Number(9969) == 9999\nassert solution.maximum69Number(9699) == 9999\nassert solution.maximum69Number(66) == 96\nassert solution.maximum69Number(6669) == 9669\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(996) == 999\nassert solution.maximum69Number(9996) == 9999\nassert solution.maximum69Number(9999) == 9999\nassert solution.maximum69Number(669) == 969\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(9696) == 9996\nassert solution.maximum69Number(6) == 9\nassert solution.maximum69Number(666) == 966\nassert solution.maximum69Number(96) == 99\nassert solution.maximum69Number(69) == 99\nassert solution.maximum69Number(96) == 99\nassert solution.maximum69Number(966) == 996\nassert solution.maximum69Number(6996) == 9996\nassert solution.maximum69Number(66) == 96\nassert solution.maximum69Number(99) == 99\nassert solution.maximum69Number(6696) == 9696\nassert solution.maximum69Number(96) == 99\nassert solution.maximum69Number(969) == 999\nassert solution.maximum69Number(69) == 99\nassert solution.maximum69Number(696) == 996\nassert solution.maximum69Number(9669) == 9969\nassert solution.maximum69Number(969) == 999\nassert solution.maximum69Number(69) == 99\nassert solution.maximum69Number(9) == 9",
  "inefficient_solution": "class Solution:\n    def maximum69Number(self, num: int) -> int:\n        num_str = list(str(num))\n        max_diff = float('-inf')\n        max_index = -1\n        for i in range(len(num_str)):\n            new_num = int(''.join(num_str[:i] + ['9'] + num_str[i+1:]))\n            new_diff = abs(num - new_num)\n            if new_diff > max_diff:\n                max_diff = new_diff\n                max_index = i\n        num_str[max_index] = '9'\n        return int(''.join(num_str))",
  "is_python": true
}