{
  "problem_idx": 316,
  "task_name": "Remove Duplicate Letters",
  "markdown_description": "\nGiven a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is **the smallest in lexicographical order** among all possible results.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bcabc\"\n**Output:** \"abc\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"cbacdcbc\"\n**Output:** \"acdb\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s` consists of lowercase English letters.\n\n\n\u00a0\n\n\n**Note:** This question is the same as 1081: <https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/>\n\n\n",
  "canonical_solution": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                vis.remove(stk.pop())\n            stk.append(c)\n            vis.add(c)\n        return ''.join(stk)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                vis.remove(stk.pop())\n            stk.append(c)\n            vis.add(c)\n        return ''.join(stk)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.removeDuplicateLetters(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.removeDuplicateLetters(s) == expected_result\n        print(f\"assert solution.removeDuplicateLetters('{s}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.removeDuplicateLetters('{s}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.removeDuplicateLetters('ubcjtlppya') == 'ubcjtlpya'\nassert solution.removeDuplicateLetters('lr') == 'lr'\nassert solution.removeDuplicateLetters('uckut') == 'ckut'\nassert solution.removeDuplicateLetters('kqyz') == 'kqyz'\nassert solution.removeDuplicateLetters('mxflghr') == 'mxflghr'\nassert solution.removeDuplicateLetters('wvpbwarj') == 'vpbwarj'\nassert solution.removeDuplicateLetters('tpuntljsc') == 'puntljsc'\nassert solution.removeDuplicateLetters('fe') == 'fe'\nassert solution.removeDuplicateLetters('nbcdpcwk') == 'nbcdpwk'\nassert solution.removeDuplicateLetters('wdzbrbfp') == 'wdzbrfp'\nassert solution.removeDuplicateLetters('fmab') == 'fmab'\nassert solution.removeDuplicateLetters('zseli') == 'zseli'\nassert solution.removeDuplicateLetters('carbyalga') == 'carbylg'\nassert solution.removeDuplicateLetters('fvvtekodlx') == 'fvtekodlx'\nassert solution.removeDuplicateLetters('pafjoblbj') == 'pafjobl'\nassert solution.removeDuplicateLetters('qlvzsxlru') == 'qlvzsxru'\nassert solution.removeDuplicateLetters('v') == 'v'\nassert solution.removeDuplicateLetters('rjf') == 'rjf'\nassert solution.removeDuplicateLetters('jdlqltudh') == 'jdlqtuh'\nassert solution.removeDuplicateLetters('e') == 'e'\nassert solution.removeDuplicateLetters('boncju') == 'boncju'\nassert solution.removeDuplicateLetters('spkcjxowuu') == 'spkcjxowu'\nassert solution.removeDuplicateLetters('fkdtt') == 'fkdt'\nassert solution.removeDuplicateLetters('yq') == 'yq'\nassert solution.removeDuplicateLetters('gbmwxct') == 'gbmwxct'\nassert solution.removeDuplicateLetters('bnezkclhb') == 'bnezkclh'\nassert solution.removeDuplicateLetters('adctio') == 'adctio'\nassert solution.removeDuplicateLetters('cacpxw') == 'acpxw'\nassert solution.removeDuplicateLetters('wyidkxvd') == 'wyidkxv'\nassert solution.removeDuplicateLetters('dito') == 'dito'\nassert solution.removeDuplicateLetters('kpfft') == 'kpft'\nassert solution.removeDuplicateLetters('rzxztgwr') == 'rxztgw'\nassert solution.removeDuplicateLetters('vsknjprjep') == 'vsknjpre'\nassert solution.removeDuplicateLetters('rai') == 'rai'\nassert solution.removeDuplicateLetters('murqjmhplt') == 'murqjhplt'\nassert solution.removeDuplicateLetters('goifvub') == 'goifvub'\nassert solution.removeDuplicateLetters('uf') == 'uf'\nassert solution.removeDuplicateLetters('rnbipy') == 'rnbipy'\nassert solution.removeDuplicateLetters('n') == 'n'\nassert solution.removeDuplicateLetters('xnef') == 'xnef'\nassert solution.removeDuplicateLetters('axmxurtq') == 'amxurtq'\nassert solution.removeDuplicateLetters('dvwn') == 'dvwn'\nassert solution.removeDuplicateLetters('s') == 's'\nassert solution.removeDuplicateLetters('qbl') == 'qbl'\nassert solution.removeDuplicateLetters('fndtiiprh') == 'fndtiprh'\nassert solution.removeDuplicateLetters('kiitn') == 'kitn'\nassert solution.removeDuplicateLetters('gzdjjo') == 'gzdjo'\nassert solution.removeDuplicateLetters('tlvtnf') == 'lvtnf'\nassert solution.removeDuplicateLetters('ohcudd') == 'ohcud'\nassert solution.removeDuplicateLetters('clo') == 'clo'\nassert solution.removeDuplicateLetters('hjhwwq') == 'hjwq'\nassert solution.removeDuplicateLetters('vxtasmjrx') == 'vtasmjrx'\nassert solution.removeDuplicateLetters('zlcyuqxdn') == 'zlcyuqxdn'\nassert solution.removeDuplicateLetters('jiavamiir') == 'javmir'\nassert solution.removeDuplicateLetters('uqmznfx') == 'uqmznfx'\nassert solution.removeDuplicateLetters('jedbpzpoh') == 'jedbpzoh'\nassert solution.removeDuplicateLetters('vekdvsqv') == 'ekdsqv'\nassert solution.removeDuplicateLetters('w') == 'w'\nassert solution.removeDuplicateLetters('rrlukmwad') == 'rlukmwad'\nassert solution.removeDuplicateLetters('osg') == 'osg'\nassert solution.removeDuplicateLetters('qaxcrf') == 'qaxcrf'\nassert solution.removeDuplicateLetters('uepi') == 'uepi'\nassert solution.removeDuplicateLetters('efuchmeqb') == 'efuchmqb'\nassert solution.removeDuplicateLetters('xlwttha') == 'xlwtha'\nassert solution.removeDuplicateLetters('vy') == 'vy'\nassert solution.removeDuplicateLetters('gs') == 'gs'\nassert solution.removeDuplicateLetters('igensi') == 'gensi'\nassert solution.removeDuplicateLetters('yp') == 'yp'\nassert solution.removeDuplicateLetters('wtnaaijalq') == 'wtnaijlq'\nassert solution.removeDuplicateLetters('rrnnsc') == 'rnsc'\nassert solution.removeDuplicateLetters('qhfjrfsvj') == 'qhfjrsv'\nassert solution.removeDuplicateLetters('vh') == 'vh'\nassert solution.removeDuplicateLetters('wy') == 'wy'\nassert solution.removeDuplicateLetters('xrfegls') == 'xrfegls'\nassert solution.removeDuplicateLetters('gkxhoobl') == 'gkxhobl'\nassert solution.removeDuplicateLetters('qjkykkwav') == 'qjkywav'\nassert solution.removeDuplicateLetters('asfd') == 'asfd'\nassert solution.removeDuplicateLetters('rqyyzbug') == 'rqyzbug'\nassert solution.removeDuplicateLetters('gm') == 'gm'\nassert solution.removeDuplicateLetters('cgargnrbft') == 'cagnrbft'\nassert solution.removeDuplicateLetters('tpigylwnsk') == 'tpigylwnsk'\nassert solution.removeDuplicateLetters('bhybdmzfp') == 'bhydmzfp'\nassert solution.removeDuplicateLetters('hpfmostmnc') == 'hpfmostnc'\nassert solution.removeDuplicateLetters('rjeh') == 'rjeh'\nassert solution.removeDuplicateLetters('hxxzls') == 'hxzls'\nassert solution.removeDuplicateLetters('wcnwpans') == 'cnwpas'\nassert solution.removeDuplicateLetters('h') == 'h'\nassert solution.removeDuplicateLetters('ejzwbrjgrp') == 'ejzwbgrp'\nassert solution.removeDuplicateLetters('wszlail') == 'wszail'\nassert solution.removeDuplicateLetters('gixwhxv') == 'giwhxv'\nassert solution.removeDuplicateLetters('yufpxvgmw') == 'yufpxvgmw'\nassert solution.removeDuplicateLetters('mbndpai') == 'mbndpai'\nassert solution.removeDuplicateLetters('dptel') == 'dptel'\nassert solution.removeDuplicateLetters('xb') == 'xb'\nassert solution.removeDuplicateLetters('ldclc') == 'dcl'\nassert solution.removeDuplicateLetters('pyhep') == 'pyhe'\nassert solution.removeDuplicateLetters('io') == 'io'\nassert solution.removeDuplicateLetters('wtgyjqfqor') == 'wtgyjfqor'\nassert solution.removeDuplicateLetters('a') == 'a'\nassert solution.removeDuplicateLetters('lds') == 'lds'",
  "inefficient_solution": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                temp = [''] * len(stk)\n                for j, x in enumerate(stk):\n                    temp[j] = x\n                stk = []\n                for x in temp:\n                    if x not in vis:\n                        stk.append(x)\n                vis = set()\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                stk.pop()\n                temp = []\n                for x in stk:\n                    temp.append(x)\n                stk = temp\n            stk.append(c)\n            vis.add(c)\n        return ''.join(stk)",
  "is_python": true
}