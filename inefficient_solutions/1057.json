{
  "problem_idx": 1057,
  "task_name": "Campus Bikes",
  "markdown_description": "\nOn a campus represented on the X-Y plane, there are `n` workers and `m` bikes, with `n <= m`.\n\n\nYou are given an array `workers` of length `n` where `workers[i] = [xi, yi]` is the position of the `ith` worker. You are also given an array `bikes` of length `m` where `bikes[j] = [xj, yj]` is the position of the `jth` bike. All the given positions are **unique**.\n\n\nAssign a bike to each worker. Among the available bikes and workers, we choose the `(workeri, bikej)` pair with the shortest **Manhattan distance** between each other and assign the bike to that worker.\n\n\nIf there are multiple `(workeri, bikej)` pairs with the same shortest **Manhattan distance**, we choose the pair with **the smallest worker index**. If there are multiple ways to do that, we choose the pair with **the smallest bike index**. Repeat this process until there are no available workers.\n\n\nReturn *an array* `answer` *of length* `n`*, where* `answer[i]` *is the index (**0-indexed**) of the bike that the* `ith` *worker is assigned to*.\n\n\nThe **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1057.Campus%20Bikes/images/1261_example_1_v2.png)\n\n```\n\n**Input:** workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]\n**Output:** [1,0]\n**Explanation:** Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is [1, 0].\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1057.Campus%20Bikes/images/1261_example_2_v2.png)\n\n```\n\n**Input:** workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]\n**Output:** [0,2,1]\n**Explanation:** Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is [0,2,1].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == workers.length`\n* `m == bikes.length`\n* `1 <= n <= m <= 1000`\n* `workers[i].length == bikes[j].length == 2`\n* `0 <= xi, yi < 1000`\n* `0 <= xj, yj < 1000`\n* All worker and bike locations are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def assignBikes(\n        self, workers: List[List[int]], bikes: List[List[int]]\n    ) -> List[int]:\n        n, m = len(workers), len(bikes)\n        arr = []\n        for i, j in product(range(n), range(m)):\n            dist = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])\n            arr.append((dist, i, j))\n        arr.sort()\n        vis1 = [False] * n\n        vis2 = [False] * m\n        ans = [0] * n\n        for _, i, j in arr:\n            if not vis1[i] and not vis2[j]:\n                vis1[i] = vis2[j] = True\n                ans[i] = j\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def assignBikes(\n        self, workers, bikes\n    ):\n        n, m = len(workers), len(bikes)\n        arr = []\n        for i, j in product(range(n), range(m)):\n            dist = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])\n            arr.append((dist, i, j))\n        arr.sort()\n        vis1 = [False] * n\n        vis2 = [False] * m\n        ans = [0] * n\n        for _, i, j in arr:\n            if not vis1[i] and not vis2[j]:\n                vis1[i] = vis2[j] = True\n                ans[i] = j\n        return ans\n\ndef generate_test_case():\n    # Generate random workers list\n    workers = [[random.randint(0, 1000), random.randint(0, 1000)] for _ in range(random.randint(1, 11))]\n    \n    # Generate random bikes list\n    bikes = [[random.randint(0, 1000), random.randint(0, 1000)] for _ in range(len(workers))]\n\n    # Calculate the expected result using the provided Solution class\n    solution = Solution()\n    expected_result = solution.assignBikes(workers, bikes)\n\n    return workers, bikes, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        workers, bikes, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.assignBikes(workers, bikes) == expected_result\n        print(f\"assert solution.assignBikes({workers}, {bikes}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.assignBikes({workers}, {bikes}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.assignBikes([[435, 100], [8, 134]], [[632, 443], [627, 134]]) == [1, 0]\nassert solution.assignBikes([[134, 301], [975, 505], [267, 589], [470, 106]], [[523, 860], [169, 76], [771, 971], [102, 308]]) == [3, 2, 0, 1]\nassert solution.assignBikes([[636, 713], [272, 566], [330, 800], [582, 826], [621, 257], [551, 33]], [[503, 382], [194, 278], [517, 467], [130, 145], [851, 595], [299, 627]]) == [4, 5, 1, 2, 0, 3]\nassert solution.assignBikes([[366, 35], [969, 456], [378, 90], [748, 362], [992, 348], [79, 381], [677, 251], [6, 28], [833, 986], [546, 779], [710, 792]], [[789, 804], [704, 430], [526, 202], [599, 763], [199, 673], [913, 278], [313, 796], [281, 448], [684, 313], [602, 840], [739, 484]]) == [4, 10, 2, 1, 5, 7, 8, 6, 9, 3, 0]\nassert solution.assignBikes([[0, 534], [608, 784], [484, 862], [844, 781], [943, 161], [583, 46], [989, 798], [337, 931]], [[743, 820], [392, 567], [579, 746], [890, 875], [377, 626], [709, 257], [425, 648], [597, 998]]) == [1, 2, 7, 0, 5, 6, 3, 4]\nassert solution.assignBikes([[426, 98], [266, 262], [564, 0], [952, 310], [721, 597], [484, 403], [488, 431], [144, 468], [179, 278], [139, 59], [968, 331]], [[183, 901], [270, 304], [197, 961], [749, 545], [150, 600], [460, 279], [893, 748], [149, 207], [545, 12], [348, 658], [42, 355]]) == [0, 1, 8, 2, 3, 5, 9, 4, 7, 10, 6]\nassert solution.assignBikes([[139, 290], [727, 909]], [[957, 631], [764, 823]]) == [0, 1]\nassert solution.assignBikes([[319, 240]], [[797, 577]]) == [0]\nassert solution.assignBikes([[934, 410], [587, 866], [999, 621], [604, 6]], [[714, 317], [595, 842], [948, 689], [524, 517]]) == [0, 1, 2, 3]\nassert solution.assignBikes([[690, 784]], [[346, 43]]) == [0]\nassert solution.assignBikes([[293, 619], [502, 422], [927, 76], [398, 784], [786, 106], [377, 181], [605, 830], [575, 29], [817, 39]], [[408, 785], [671, 250], [358, 819], [416, 163], [181, 7], [271, 750], [644, 914], [146, 947], [936, 962]]) == [5, 2, 8, 0, 1, 3, 6, 4, 7]\nassert solution.assignBikes([[485, 366], [315, 874], [411, 380], [387, 647], [993, 471], [63, 638], [79, 794]], [[102, 214], [402, 39], [220, 439], [177, 491], [457, 850], [943, 255], [171, 365]]) == [6, 4, 2, 1, 5, 3, 0]\nassert solution.assignBikes([[37, 355], [741, 466], [139, 183], [468, 594], [242, 266], [190, 637], [991, 617], [341, 796], [503, 453], [964, 171], [473, 41]], [[958, 902], [36, 271], [625, 114], [5, 881], [837, 487], [489, 596], [683, 257], [344, 235], [572, 494], [687, 883], [560, 684]]) == [1, 4, 9, 5, 7, 3, 0, 10, 8, 6, 2]\nassert solution.assignBikes([[285, 850], [773, 715]], [[110, 370], [692, 451]]) == [0, 1]\nassert solution.assignBikes([[927, 480], [578, 973], [920, 216], [968, 569], [532, 176]], [[975, 745], [117, 47], [12, 204], [138, 776], [92, 907]]) == [3, 4, 2, 0, 1]\nassert solution.assignBikes([[47, 81], [64, 553], [710, 340], [932, 843], [773, 880]], [[764, 20], [836, 177], [561, 157], [399, 940], [722, 981]]) == [2, 0, 1, 3, 4]\nassert solution.assignBikes([[34, 146], [702, 676], [934, 994], [141, 688], [991, 480], [462, 333]], [[530, 927], [97, 750], [925, 697], [56, 494], [60, 905], [797, 675]]) == [3, 5, 0, 1, 2, 4]\nassert solution.assignBikes([[301, 390], [80, 107], [850, 626], [207, 999], [510, 855], [721, 514]], [[410, 140], [955, 296], [497, 141], [91, 228], [832, 913], [771, 819]]) == [0, 3, 5, 2, 4, 1]\nassert solution.assignBikes([[418, 320], [65, 695]], [[951, 309], [374, 754]]) == [0, 1]\nassert solution.assignBikes([[690, 188], [676, 673], [904, 146], [520, 193], [114, 966]], [[476, 46], [122, 618], [958, 951], [904, 689], [533, 629]]) == [2, 4, 3, 0, 1]\nassert solution.assignBikes([[553, 387], [101, 75], [389, 817]], [[393, 736], [925, 261], [806, 488]]) == [2, 1, 0]\nassert solution.assignBikes([[236, 794], [33, 229], [36, 974], [874, 935]], [[886, 553], [598, 118], [663, 390], [13, 18]]) == [2, 3, 1, 0]\nassert solution.assignBikes([[916, 864]], [[439, 731]]) == [0]\nassert solution.assignBikes([[536, 679], [789, 865], [839, 874]], [[417, 613], [544, 169], [526, 286]]) == [0, 2, 1]\nassert solution.assignBikes([[496, 256], [475, 682], [417, 477], [494, 163]], [[916, 71], [154, 675], [895, 716], [518, 645]]) == [2, 3, 1, 0]\nassert solution.assignBikes([[215, 668], [50, 150]], [[733, 807], [725, 109]]) == [0, 1]\nassert solution.assignBikes([[52, 834], [751, 753], [167, 168], [617, 461], [250, 305], [870, 453], [807, 807], [511, 660], [443, 315], [367, 970]], [[625, 279], [928, 494], [439, 254], [568, 519], [320, 92], [63, 385], [875, 754], [568, 94], [814, 977], [303, 999]]) == [7, 8, 4, 3, 5, 1, 6, 0, 2, 9]\nassert solution.assignBikes([[581, 83], [663, 990], [385, 312], [505, 638]], [[659, 902], [530, 374], [36, 5], [578, 186]]) == [3, 0, 1, 2]\nassert solution.assignBikes([[651, 793], [255, 516]], [[587, 802], [759, 533]]) == [0, 1]\nassert solution.assignBikes([[372, 991], [582, 301], [55, 785], [226, 693], [114, 302]], [[398, 201], [503, 345], [663, 7], [648, 167], [388, 47]]) == [3, 1, 2, 4, 0]\nassert solution.assignBikes([[490, 913], [426, 143]], [[41, 337], [35, 156]]) == [0, 1]\nassert solution.assignBikes([[882, 558], [257, 812], [571, 900], [62, 311], [228, 139], [774, 949], [533, 121], [866, 249], [934, 859], [421, 353], [540, 279]], [[596, 445], [993, 271], [847, 397], [205, 598], [231, 599], [110, 892], [559, 402], [548, 861], [156, 497], [946, 0], [267, 891]]) == [2, 10, 7, 8, 4, 5, 9, 1, 3, 0, 6]\nassert solution.assignBikes([[160, 291], [857, 121], [346, 922], [735, 968], [832, 646]], [[685, 325], [522, 853], [66, 812], [519, 18], [686, 489]]) == [2, 0, 1, 3, 4]\nassert solution.assignBikes([[439, 971], [365, 60], [91, 170]], [[245, 454], [301, 368], [874, 855]]) == [2, 1, 0]\nassert solution.assignBikes([[645, 442], [840, 434], [827, 463], [165, 553], [997, 689], [274, 51], [608, 55], [678, 105]], [[325, 204], [140, 616], [158, 698], [172, 241], [985, 328], [232, 532], [263, 528], [195, 624]]) == [6, 4, 5, 1, 2, 0, 3, 7]\nassert solution.assignBikes([[378, 361], [713, 99], [96, 532], [446, 160], [754, 450], [513, 364], [776, 856], [283, 155], [323, 99], [18, 496]], [[364, 140], [168, 237], [593, 161], [384, 518], [294, 180], [814, 537], [284, 713], [37, 105], [10, 249], [419, 291]]) == [9, 7, 1, 2, 5, 3, 6, 4, 0, 8]\nassert solution.assignBikes([[887, 594], [388, 659], [320, 780], [379, 991], [255, 395], [906, 554], [667, 224], [303, 760], [655, 795]], [[237, 160], [471, 876], [315, 204], [787, 656], [317, 609], [600, 714], [650, 784], [407, 202], [426, 403]]) == [3, 4, 2, 1, 8, 0, 7, 5, 6]\nassert solution.assignBikes([[736, 858], [59, 437], [618, 225]], [[397, 119], [275, 457], [830, 971]]) == [2, 1, 0]\nassert solution.assignBikes([[995, 885], [742, 519], [223, 51]], [[480, 77], [568, 388], [745, 850]]) == [2, 1, 0]\nassert solution.assignBikes([[39, 60], [811, 74], [658, 491], [60, 3], [620, 691], [349, 103], [790, 536]], [[387, 581], [566, 908], [852, 268], [335, 209], [534, 938], [666, 514], [234, 527]]) == [6, 2, 5, 4, 1, 3, 0]\nassert solution.assignBikes([[880, 317], [648, 92]], [[89, 941], [268, 40]]) == [0, 1]\nassert solution.assignBikes([[162, 750], [562, 217], [567, 336], [343, 255]], [[107, 187], [473, 149], [755, 35], [596, 203]]) == [0, 3, 2, 1]\nassert solution.assignBikes([[921, 126], [493, 877], [745, 25], [769, 663], [715, 410]], [[386, 596], [717, 117], [652, 704], [276, 202], [684, 727]]) == [3, 2, 1, 4, 0]\nassert solution.assignBikes([[317, 572], [384, 67], [581, 58], [908, 43], [440, 53], [360, 125], [788, 147], [128, 800], [631, 45], [1, 409]], [[910, 54], [623, 514], [911, 804], [899, 883], [846, 898], [366, 445], [153, 902], [245, 662], [799, 623], [19, 710]]) == [7, 3, 2, 0, 4, 5, 8, 6, 1, 9]\nassert solution.assignBikes([[830, 66], [362, 309], [987, 881], [599, 112], [570, 950]], [[816, 963], [612, 565], [44, 624], [993, 979], [680, 790]]) == [4, 2, 3, 1, 0]\nassert solution.assignBikes([[162, 205], [803, 828], [816, 687], [633, 492], [21, 261]], [[710, 25], [474, 541], [596, 424], [909, 422], [949, 192]]) == [0, 1, 3, 2, 4]\nassert solution.assignBikes([[75, 172]], [[382, 740]]) == [0]\nassert solution.assignBikes([[604, 77], [658, 777], [733, 544], [232, 748], [282, 814], [617, 685]], [[315, 641], [698, 157], [579, 761], [397, 387], [456, 825], [887, 906]]) == [1, 2, 3, 0, 4, 5]\nassert solution.assignBikes([[318, 590], [814, 921], [807, 988], [777, 381]], [[881, 913], [970, 791], [267, 456], [56, 356]]) == [2, 0, 1, 3]\nassert solution.assignBikes([[624, 96], [912, 761], [88, 726], [413, 873]], [[198, 436], [776, 59], [494, 954], [934, 788]]) == [1, 3, 0, 2]\nassert solution.assignBikes([[113, 787], [799, 619], [816, 147], [878, 104]], [[170, 565], [728, 560], [363, 517], [574, 726]]) == [0, 1, 3, 2]\nassert solution.assignBikes([[570, 707], [941, 815], [191, 542], [231, 646], [751, 967], [462, 903], [516, 433]], [[81, 368], [95, 76], [886, 598], [499, 143], [6, 192], [63, 858], [955, 493]]) == [6, 2, 0, 5, 1, 4, 3]\nassert solution.assignBikes([[27, 680], [298, 225]], [[701, 48], [699, 729]]) == [1, 0]\nassert solution.assignBikes([[155, 428], [464, 909], [550, 282], [46, 403], [723, 22], [335, 604], [463, 970], [870, 215], [203, 322], [868, 441], [758, 743]], [[640, 703], [972, 678], [909, 701], [878, 667], [653, 898], [111, 967], [786, 644], [31, 831], [379, 960], [483, 735], [949, 383]]) == [5, 9, 4, 7, 2, 0, 8, 3, 1, 10, 6]\nassert solution.assignBikes([[747, 464], [914, 376]], [[366, 117], [710, 486]]) == [1, 0]\nassert solution.assignBikes([[709, 253], [890, 608], [208, 946], [312, 514]], [[855, 828], [844, 667], [565, 437], [304, 114]]) == [2, 1, 0, 3]\nassert solution.assignBikes([[211, 725], [843, 949], [330, 544], [571, 872]], [[203, 480], [814, 217], [97, 747], [219, 637]]) == [3, 1, 0, 2]\nassert solution.assignBikes([[364, 738], [26, 912], [501, 614], [972, 393], [281, 873], [758, 176]], [[791, 112], [39, 503], [324, 715], [560, 49], [174, 77], [611, 940]]) == [2, 1, 3, 4, 5, 0]\nassert solution.assignBikes([[155, 372], [865, 974], [157, 8], [210, 251], [900, 394], [458, 444], [63, 672], [168, 705]], [[906, 598], [452, 742], [479, 966], [619, 100], [209, 435], [943, 294], [230, 23], [931, 586]]) == [4, 2, 6, 3, 5, 1, 7, 0]\nassert solution.assignBikes([[820, 139], [14, 765], [227, 454], [158, 76], [91, 401], [624, 328], [140, 133], [191, 487], [613, 108], [815, 945], [232, 425]], [[811, 956], [179, 307], [315, 929], [277, 377], [125, 269], [936, 17], [858, 838], [130, 208], [210, 654], [21, 689], [922, 442]]) == [5, 9, 1, 2, 4, 10, 7, 8, 6, 0, 3]\nassert solution.assignBikes([[733, 280], [925, 560], [94, 667], [604, 159], [450, 338], [93, 702], [507, 189], [910, 395], [182, 342], [323, 382]], [[537, 169], [523, 153], [266, 301], [358, 455], [360, 591], [901, 273], [558, 293], [989, 802], [977, 111], [870, 312]]) == [5, 7, 4, 1, 6, 8, 0, 9, 2, 3]\nassert solution.assignBikes([[834, 811], [988, 655], [28, 924], [994, 253], [517, 864], [531, 821], [666, 946], [757, 766], [60, 162]], [[557, 618], [277, 198], [284, 99], [727, 825], [419, 607], [656, 93], [478, 383], [542, 786], [145, 299]]) == [2, 6, 1, 5, 0, 7, 4, 3, 8]\nassert solution.assignBikes([[872, 466], [106, 477], [258, 893], [460, 405], [264, 252], [66, 859], [326, 386], [346, 16]], [[48, 899], [107, 523], [68, 43], [784, 988], [515, 639], [822, 782], [20, 371], [34, 69]]) == [5, 1, 3, 4, 7, 0, 6, 2]\nassert solution.assignBikes([[709, 186], [231, 872], [985, 707], [108, 198]], [[618, 695], [307, 635], [341, 236], [284, 28]]) == [3, 1, 0, 2]\nassert solution.assignBikes([[36, 486], [969, 711], [735, 570], [973, 131], [12, 92], [749, 589], [142, 420], [550, 349], [420, 607]], [[302, 821], [127, 882], [276, 669], [547, 724], [501, 805], [877, 230], [987, 325], [706, 866], [850, 59]]) == [0, 6, 3, 5, 8, 7, 1, 4, 2]\nassert solution.assignBikes([[795, 522], [135, 372], [384, 500], [740, 568], [470, 507], [805, 177], [930, 415], [988, 499]], [[607, 764], [852, 714], [821, 929], [996, 174], [348, 598], [930, 64], [233, 800], [54, 167]]) == [1, 7, 4, 0, 6, 3, 5, 2]\nassert solution.assignBikes([[285, 515], [527, 21], [39, 53], [799, 118]], [[711, 69], [517, 654], [543, 136], [77, 319]]) == [1, 2, 3, 0]\nassert solution.assignBikes([[990, 818], [602, 288], [950, 575], [530, 632], [804, 807], [706, 48], [210, 630], [909, 286]], [[928, 355], [443, 96], [153, 511], [581, 543], [556, 356], [389, 373], [677, 41], [257, 491]]) == [1, 4, 5, 3, 7, 6, 2, 0]\nassert solution.assignBikes([[798, 60], [919, 678], [763, 159], [480, 426], [638, 792], [883, 438]], [[972, 454], [271, 45], [189, 744], [848, 838], [464, 939], [35, 250]]) == [1, 3, 5, 2, 4, 0]\nassert solution.assignBikes([[716, 28], [102, 912], [755, 832], [151, 427], [986, 673], [548, 323], [142, 268], [306, 451]], [[930, 198], [6, 663], [495, 803], [285, 422], [850, 955], [318, 520], [527, 739], [923, 502]]) == [0, 1, 4, 5, 7, 6, 2, 3]\nassert solution.assignBikes([[49, 117]], [[517, 34]]) == [0]\nassert solution.assignBikes([[663, 640], [670, 699], [993, 75], [507, 673], [226, 983], [125, 89], [557, 85]], [[92, 404], [554, 609], [970, 1000], [340, 202], [627, 587], [749, 808], [373, 814]]) == [4, 5, 2, 1, 6, 3, 0]\nassert solution.assignBikes([[557, 792], [329, 685], [826, 285], [302, 854], [616, 55], [150, 505]], [[93, 163], [668, 390], [925, 837], [560, 514], [351, 856], [472, 845]]) == [5, 3, 1, 4, 2, 0]\nassert solution.assignBikes([[360, 806], [311, 939], [309, 181], [251, 171], [409, 724], [641, 439], [983, 542], [778, 627], [687, 13], [713, 393], [602, 985]], [[933, 600], [427, 525], [824, 982], [66, 58], [433, 128], [60, 536], [566, 331], [760, 306], [754, 710], [854, 896], [302, 745]]) == [10, 9, 4, 3, 1, 6, 0, 8, 5, 7, 2]\nassert solution.assignBikes([[927, 776], [528, 980], [234, 717], [471, 559], [136, 188], [672, 560], [85, 210], [989, 744], [158, 728]], [[640, 66], [858, 956], [622, 481], [964, 109], [611, 42], [851, 464], [801, 900], [59, 933], [757, 902]]) == [1, 8, 3, 5, 4, 2, 0, 6, 7]\nassert solution.assignBikes([[127, 120], [599, 780], [541, 469], [757, 89], [513, 97], [630, 450]], [[689, 482], [876, 399], [817, 277], [913, 833], [332, 918], [985, 931]]) == [5, 3, 1, 2, 4, 0]\nassert solution.assignBikes([[541, 628]], [[381, 808]]) == [0]\nassert solution.assignBikes([[485, 422], [113, 863], [303, 252], [320, 644]], [[823, 237], [843, 993], [996, 500], [102, 556]]) == [0, 1, 2, 3]\nassert solution.assignBikes([[319, 143], [523, 854]], [[78, 908], [173, 707]]) == [0, 1]\nassert solution.assignBikes([[624, 933], [798, 703], [882, 872], [431, 304], [77, 2], [255, 213], [318, 604], [56, 84], [750, 210], [138, 590]], [[853, 609], [607, 621], [760, 239], [261, 830], [546, 282], [787, 619], [80, 456], [849, 483], [306, 715], [147, 348]]) == [1, 5, 0, 4, 7, 9, 8, 3, 2, 6]\nassert solution.assignBikes([[253, 748], [111, 194], [864, 891], [327, 648]], [[546, 896], [963, 845], [544, 511], [981, 624]]) == [0, 3, 1, 2]\nassert solution.assignBikes([[65, 439], [295, 722], [724, 82], [24, 372], [560, 156], [259, 677], [455, 780], [609, 866], [226, 833], [897, 91], [445, 838]], [[700, 794], [82, 208], [260, 251], [505, 827], [186, 488], [626, 882], [111, 406], [845, 413], [780, 658], [795, 836], [844, 873]]) == [6, 8, 10, 1, 2, 4, 0, 5, 9, 7, 3]\nassert solution.assignBikes([[394, 557], [145, 135], [180, 174], [284, 162], [5, 950], [802, 802], [606, 195], [70, 147], [616, 9]], [[109, 95], [496, 534], [545, 573], [312, 85], [639, 777], [105, 58], [18, 591], [977, 129], [135, 622]]) == [1, 0, 8, 3, 6, 4, 7, 5, 2]\nassert solution.assignBikes([[56, 92]], [[451, 541]]) == [0]\nassert solution.assignBikes([[995, 433], [334, 467], [904, 921], [701, 64], [465, 829], [527, 954], [353, 939], [209, 559], [938, 135]], [[368, 493], [549, 321], [611, 258], [610, 272], [597, 259], [827, 929], [940, 306], [844, 965], [832, 890]]) == [3, 0, 5, 2, 8, 7, 4, 1, 6]\nassert solution.assignBikes([[580, 556], [988, 232], [484, 605], [197, 642], [13, 165], [313, 739]], [[33, 68], [408, 341], [475, 846], [871, 971], [574, 419], [954, 574]]) == [4, 5, 2, 3, 0, 1]\nassert solution.assignBikes([[703, 770], [565, 645], [706, 714], [871, 278], [418, 770], [827, 409]], [[516, 398], [874, 764], [559, 388], [611, 444], [99, 44], [575, 375]]) == [1, 3, 4, 2, 0, 5]\nassert solution.assignBikes([[646, 393], [426, 575], [472, 136], [598, 414], [666, 384], [237, 111], [776, 416], [471, 86]], [[37, 143], [354, 489], [790, 226], [551, 563], [606, 126], [707, 211], [910, 674], [198, 833]]) == [6, 3, 4, 1, 5, 0, 2, 7]\nassert solution.assignBikes([[812, 541], [49, 709], [234, 808]], [[601, 408], [709, 689], [474, 281]]) == [1, 2, 0]\nassert solution.assignBikes([[52, 117], [847, 262], [897, 286], [375, 633]], [[873, 972], [685, 349], [539, 608], [103, 869]]) == [3, 1, 0, 2]\nassert solution.assignBikes([[40, 741], [900, 398], [466, 759], [150, 788], [814, 48], [936, 122], [296, 336], [344, 298], [265, 337]], [[181, 546], [419, 721], [504, 400], [581, 927], [593, 572], [303, 67], [785, 425], [151, 489], [137, 639]]) == [0, 6, 1, 8, 4, 3, 5, 2, 7]\nassert solution.assignBikes([[208, 861], [342, 766], [462, 136], [326, 347], [642, 399]], [[233, 140], [698, 686], [572, 991], [22, 811], [170, 224]]) == [3, 2, 0, 4, 1]\nassert solution.assignBikes([[809, 42], [849, 9], [657, 121], [847, 604]], [[793, 203], [711, 535], [551, 305], [879, 423]]) == [0, 3, 2, 1]\nassert solution.assignBikes([[105, 507], [491, 373]], [[537, 728], [30, 640]]) == [1, 0]\nassert solution.assignBikes([[46, 986], [930, 307], [460, 25], [897, 401], [674, 194], [817, 879], [529, 153], [740, 363]], [[885, 571], [720, 716], [856, 439], [476, 403], [35, 662], [341, 817], [224, 408], [123, 500]]) == [4, 0, 7, 2, 5, 1, 3, 6]\nassert solution.assignBikes([[98, 340], [12, 894], [405, 278], [877, 838], [542, 508]], [[459, 910], [351, 209], [248, 838], [11, 603], [87, 536]]) == [4, 2, 1, 3, 0]\nassert solution.assignBikes([[470, 528], [854, 500], [866, 4], [621, 604], [750, 438], [567, 596]], [[949, 17], [277, 57], [6, 990], [288, 147], [691, 948], [67, 338]]) == [3, 2, 0, 4, 1, 5]\nassert solution.assignBikes([[144, 507], [283, 258], [471, 534], [344, 91], [298, 472], [707, 132], [738, 672], [483, 120], [312, 873], [335, 664], [128, 357]], [[329, 863], [100, 298], [776, 382], [862, 897], [825, 75], [998, 851], [714, 305], [793, 134], [49, 715], [276, 867], [229, 536]]) == [10, 3, 6, 5, 8, 7, 2, 4, 0, 9, 1]\nassert solution.assignBikes([[302, 285], [977, 980], [79, 596], [312, 77], [879, 527], [515, 453], [65, 491], [136, 585], [950, 520], [273, 996], [206, 159]], [[907, 490], [107, 221], [144, 158], [474, 884], [154, 345], [892, 227], [649, 410], [437, 375], [742, 572], [436, 10], [586, 198]]) == [4, 5, 10, 9, 0, 7, 1, 6, 8, 3, 2]\nassert solution.assignBikes([[723, 761], [796, 2], [233, 11], [671, 594], [968, 163]], [[524, 861], [542, 754], [908, 321], [195, 406], [136, 66]]) == [1, 3, 4, 0, 2]",
  "inefficient_solution": "class Solution:\n    def assignBikes(\n        self, workers: List[List[int]], bikes: List[List[int]]\n    ) -> List[int]:\n        n, m = len(workers), len(bikes)\n        dists = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                dist = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])\n                row.append((dist, i, j))\n            dists.append(row)\n        dists.sort(key=lambda x: (x[0], x[1], x[2]))\n        visited1 = [False] * n\n        visited2 = [False] * m\n        ans = [0] * n\n        for i in range(n):\n            row = dists[i]\n            for j in range(m):\n                if not visited1[i] and not visited2[j]:\n                    visited1[i] = visited2[j] = True\n                    ans[i] = j\n                    break\n        return ans",
  "is_python": true
}