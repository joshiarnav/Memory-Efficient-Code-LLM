{
  "problem_idx": 1682,
  "task_name": "Longest Palindromic Subsequence II",
  "markdown_description": "\nA subsequence of a string `s` is considered a **good palindromic subsequence** if:\n\n\n* It is a subsequence of `s`.\n* It is a palindrome (has the same value if reversed).\n* It has an **even** length.\n* No two consecutive characters are equal, except the two middle ones.\n\n\nFor example, if `s = \"abcabcabb\"`, then `\"abba\"` is considered a **good palindromic subsequence**, while `\"bcb\"` (not even length) and `\"bbbb\"` (has equal consecutive characters) are not.\n\n\nGiven a string `s`, return *the **length** of the **longest good palindromic subsequence** in* `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bbabab\"\n**Output:** 4\n**Explanation:** The longest good palindromic subsequence of s is \"baab\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"dcbccacdb\"\n**Output:** 4\n**Explanation:** The longest good palindromic subsequence of s is \"dccd\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 250`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        @cache\n        def dfs(i, j, x):\n            if i >= j:\n                return 0\n            if s[i] == s[j] and s[i] != x:\n                return dfs(i + 1, j - 1, s[i]) + 2\n            return max(dfs(i + 1, j, x), dfs(i, j - 1, x))\n\n        ans = dfs(0, len(s) - 1, '')\n        dfs.cache_clear()\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        @cache\n        def dfs(i, j, x):\n            if i >= j:\n                return 0\n            if s[i] == s[j] and s[i] != x:\n                return dfs(i + 1, j - 1, s[i]) + 2\n            return max(dfs(i + 1, j, x), dfs(i, j - 1, x))\n\n        ans = dfs(0, len(s) - 1, '')\n        dfs.cache_clear()\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestPalindromeSubseq(s)\n\n    return s, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestPalindromeSubseq(s) == expected_result\n        print(f\"assert solution.longestPalindromeSubseq('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestPalindromeSubseq('{s}') == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestPalindromeSubseq('rk') == 0\nassert solution.longestPalindromeSubseq('nhbctl') == 0\nassert solution.longestPalindromeSubseq('ycwxxkp') == 2\nassert solution.longestPalindromeSubseq('nv') == 0\nassert solution.longestPalindromeSubseq('lquexnseyp') == 2\nassert solution.longestPalindromeSubseq('penbfikqt') == 0\nassert solution.longestPalindromeSubseq('ufdkkhytwk') == 2\nassert solution.longestPalindromeSubseq('rhaqjtzk') == 0\nassert solution.longestPalindromeSubseq('caswwsnwx') == 4\nassert solution.longestPalindromeSubseq('odyhcw') == 0\nassert solution.longestPalindromeSubseq('bvjolndqgh') == 0\nassert solution.longestPalindromeSubseq('uvlt') == 0\nassert solution.longestPalindromeSubseq('qnpkelz') == 0\nassert solution.longestPalindromeSubseq('t') == 0\nassert solution.longestPalindromeSubseq('rgqgfszx') == 2\nassert solution.longestPalindromeSubseq('tdjkxjhljh') == 2\nassert solution.longestPalindromeSubseq('tv') == 0\nassert solution.longestPalindromeSubseq('wldvpzv') == 2\nassert solution.longestPalindromeSubseq('es') == 0\nassert solution.longestPalindromeSubseq('futbqw') == 0\nassert solution.longestPalindromeSubseq('bfpyyhfleb') == 6\nassert solution.longestPalindromeSubseq('mgljp') == 0\nassert solution.longestPalindromeSubseq('gxkbivj') == 0\nassert solution.longestPalindromeSubseq('hhlvn') == 2\nassert solution.longestPalindromeSubseq('t') == 0\nassert solution.longestPalindromeSubseq('krwdotq') == 0\nassert solution.longestPalindromeSubseq('dbn') == 0\nassert solution.longestPalindromeSubseq('rlb') == 0\nassert solution.longestPalindromeSubseq('tl') == 0\nassert solution.longestPalindromeSubseq('jowe') == 0\nassert solution.longestPalindromeSubseq('sacarq') == 2\nassert solution.longestPalindromeSubseq('sethd') == 0\nassert solution.longestPalindromeSubseq('trnlqzei') == 0\nassert solution.longestPalindromeSubseq('dkn') == 0\nassert solution.longestPalindromeSubseq('n') == 0\nassert solution.longestPalindromeSubseq('eztzssuqcb') == 2\nassert solution.longestPalindromeSubseq('hmgji') == 0\nassert solution.longestPalindromeSubseq('m') == 0\nassert solution.longestPalindromeSubseq('lltodnie') == 2\nassert solution.longestPalindromeSubseq('xvtuhhke') == 2\nassert solution.longestPalindromeSubseq('bpwjvb') == 2\nassert solution.longestPalindromeSubseq('ixnxndin') == 4\nassert solution.longestPalindromeSubseq('hgav') == 0\nassert solution.longestPalindromeSubseq('mqnqsfmh') == 4\nassert solution.longestPalindromeSubseq('nf') == 0\nassert solution.longestPalindromeSubseq('j') == 0\nassert solution.longestPalindromeSubseq('dadvuhhpzi') == 2\nassert solution.longestPalindromeSubseq('dlxht') == 0\nassert solution.longestPalindromeSubseq('bqufobe') == 2\nassert solution.longestPalindromeSubseq('lolyvmz') == 2\nassert solution.longestPalindromeSubseq('dk') == 0\nassert solution.longestPalindromeSubseq('bdd') == 2\nassert solution.longestPalindromeSubseq('ynunkh') == 2\nassert solution.longestPalindromeSubseq('hrndbo') == 0\nassert solution.longestPalindromeSubseq('fc') == 0\nassert solution.longestPalindromeSubseq('k') == 0\nassert solution.longestPalindromeSubseq('ldmevwu') == 0\nassert solution.longestPalindromeSubseq('dznvw') == 0\nassert solution.longestPalindromeSubseq('oicsuzxwi') == 2\nassert solution.longestPalindromeSubseq('p') == 0\nassert solution.longestPalindromeSubseq('n') == 0\nassert solution.longestPalindromeSubseq('tyosiitag') == 4\nassert solution.longestPalindromeSubseq('s') == 0\nassert solution.longestPalindromeSubseq('ndbhk') == 0\nassert solution.longestPalindromeSubseq('gog') == 2\nassert solution.longestPalindromeSubseq('gw') == 0\nassert solution.longestPalindromeSubseq('nw') == 0\nassert solution.longestPalindromeSubseq('s') == 0\nassert solution.longestPalindromeSubseq('wfbmclb') == 2\nassert solution.longestPalindromeSubseq('foqfwc') == 2\nassert solution.longestPalindromeSubseq('oyk') == 0\nassert solution.longestPalindromeSubseq('sbzqvpiuj') == 0\nassert solution.longestPalindromeSubseq('lqifzlslqa') == 4\nassert solution.longestPalindromeSubseq('fiifdp') == 4\nassert solution.longestPalindromeSubseq('ihojcnvup') == 0\nassert solution.longestPalindromeSubseq('etei') == 2\nassert solution.longestPalindromeSubseq('vpvqdqxz') == 2\nassert solution.longestPalindromeSubseq('ffox') == 2\nassert solution.longestPalindromeSubseq('x') == 0\nassert solution.longestPalindromeSubseq('ckbxgxwfra') == 2\nassert solution.longestPalindromeSubseq('claq') == 0\nassert solution.longestPalindromeSubseq('qfjf') == 2\nassert solution.longestPalindromeSubseq('ajl') == 0\nassert solution.longestPalindromeSubseq('pobu') == 0\nassert solution.longestPalindromeSubseq('lph') == 0\nassert solution.longestPalindromeSubseq('uncilszssu') == 4\nassert solution.longestPalindromeSubseq('up') == 0\nassert solution.longestPalindromeSubseq('vfa') == 0\nassert solution.longestPalindromeSubseq('rnsxt') == 0\nassert solution.longestPalindromeSubseq('fbuxtrmjnu') == 2\nassert solution.longestPalindromeSubseq('utfpyrbd') == 0\nassert solution.longestPalindromeSubseq('uaqqnkxqcl') == 2\nassert solution.longestPalindromeSubseq('mvwlovt') == 2\nassert solution.longestPalindromeSubseq('s') == 0\nassert solution.longestPalindromeSubseq('jzwt') == 0\nassert solution.longestPalindromeSubseq('imoo') == 2\nassert solution.longestPalindromeSubseq('bv') == 0\nassert solution.longestPalindromeSubseq('ie') == 0\nassert solution.longestPalindromeSubseq('jrzfit') == 0\nassert solution.longestPalindromeSubseq('kba') == 0",
  "inefficient_solution": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        def dfs(i, j):\n            if i >= j:\n                return 0\n            if s[i] == s[j]:\n                if i + 1 == j or s[i + 1] != s[j - 1]:\n                    return 1\n                else:\n                    return 2 + dfs(i + 1, j - 2)\n            return max(dfs(i + 1, j), dfs(i, j - 1))\n\n        ans = dfs(0, len(s) - 1)\n        return ans\n\n        # Now, we're going to create an unnecessary 2D array to store subproblems\n        dp = [[-1 for _ in range(len(s) + 1)] for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            for j in range(len(s) + 1):\n                if i >= j:\n                    dp[i][j] = 0\n                    continue\n                if s[i] == s[j]:\n                    if i + 1 == j or s[i + 1] != s[j - 1]:\n                        dp[i][j] = 1\n                    else:\n                        dp[i][j] = 2 + dp[i + 1][j - 2]\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n        ans = dp[0][-1]\n        return ans\n\n        # Now, we're going to create unnecessary dictionaries to store subproblems\n        subproblems = {}\n        def dfs(i, j):\n            key = (i, j)\n            if key in subproblems:\n                return subproblems[key]\n            if i >= j:\n                return 0\n            if s[i] == s[j]:\n                if i + 1 == j or s[i + 1] != s[j - 1]:\n                    res = 1\n                else:\n                    res = 2 + dfs(i + 1, j - 2)\n            else:\n                res = max(dfs(i + 1, j), dfs(i, j - 1))\n            subproblems[key] = res\n            return res\n\n        ans = dfs(0, len(s) - 1)\n        return ans",
  "is_python": true
}