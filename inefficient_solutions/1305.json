{
  "problem_idx": 1305,
  "task_name": "All Elements in Two Binary Search Trees",
  "markdown_description": "\nGiven two binary search trees `root1` and `root2`, return *a list containing all the integers from both trees sorted in **ascending** order*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1305.All%20Elements%20in%20Two%20Binary%20Search%20Trees/images/q2-e1.png)\n\n```\n\n**Input:** root1 = [2,1,4], root2 = [1,0,3]\n**Output:** [0,1,1,2,3,4]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1305.All%20Elements%20in%20Two%20Binary%20Search%20Trees/images/q2-e5-.png)\n\n```\n\n**Input:** root1 = [1,null,8], root2 = [8,1]\n**Output:** [1,1,8,8]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in each tree is in the range `[0, 5000]`.\n* `-105 <= Node.val <= 105`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n        def dfs(root, t):\n            if root is None:\n                return\n            dfs(root.left, t)\n            t.append(root.val)\n            dfs(root.right, t)\n\n        def merge(t1, t2):\n            ans = []\n            i = j = 0\n            while i < len(t1) and j < len(t2):\n                if t1[i] <= t2[j]:\n                    ans.append(t1[i])\n                    i += 1\n                else:\n                    ans.append(t2[j])\n                    j += 1\n            while i < len(t1):\n                ans.append(t1[i])\n                i += 1\n            while j < len(t2):\n                ans.append(t2[j])\n                j += 1\n            return ans\n\n        t1, t2 = [], []\n        dfs(root1, t1)\n        dfs(root2, t2)\n        return merge(t1, t2)\n",
  "test_case_generator": "\nimport random\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:\n        def dfs(root, t):\n            if root is None:\n                return\n            dfs(root.left, t)\n            t.append(root.val)\n            dfs(root.right, t)\n\n        def merge(t1, t2):\n            ans = []\n            i = j = 0\n            while i < len(t1) and j < len(t2):\n                if t1[i] <= t2[j]:\n                    ans.append(t1[i])\n                    i += 1\n                else:\n                    ans.append(t2[j])\n                    j += 1\n            while i < len(t1):\n                ans.append(t1[i])\n                i += 1\n            while j < len(t2):\n                ans.append(t2[j])\n                j += 1\n            return ans\n\n        t1, t2 = [], []\n        dfs(root1, t1)\n        dfs(root2, t2)\n        return merge(t1, t2)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random binary search trees\n    root1 = generate_binary_search_tree()\n    root2 = generate_binary_search_tree()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getAllElements(root1, root2)\n\n    return root1, root2, expected_result\n\n\ndef generate_binary_search_tree():\n    nums = random.sample(range(1, 101), random.randint(0, 10))\n\n    def build(nums):\n        if not nums:\n            return None\n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = build(nums[:mid])\n        root.right = build(nums[mid + 1:])\n        return root\n\n    return build(nums)\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root1, root2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getAllElements(root1, root2) == expected_result\n        test_case_generator_results.append(\n            f\"assert solution.getAllElements({inorder(root1)}, {inorder(root2)}) == {expected_result}\"\n        )\n    return test_case_generator_results\n\n\ndef inorder(root):\n    res = []\n\n    def helper(root):\n        if not root:\n            return\n        helper(root.left)\n        res.append(root.val)\n        helper(root.right)\n\n    helper(root)\n    return res\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.getAllElements([89], [14, 53, 5, 34, 78, 42, 12, 80, 39]) == [14, 53, 5, 34, 78, 42, 12, 80, 39, 89]\nassert solution.getAllElements([68, 67, 90, 61, 85, 53, 45], [8, 66]) == [8, 66, 68, 67, 90, 61, 85, 53, 45]\nassert solution.getAllElements([81, 51, 63, 47, 36, 50, 28, 12, 11], [58, 85, 61, 40, 56, 3, 46, 12]) == [58, 81, 51, 63, 47, 36, 50, 28, 12, 11, 85, 61, 40, 56, 3, 46, 12]\nassert solution.getAllElements([60, 1, 9, 43, 30, 86, 11], [12, 20, 50, 30, 71, 70, 47, 45]) == [12, 20, 50, 30, 60, 1, 9, 43, 30, 71, 70, 47, 45, 86, 11]\nassert solution.getAllElements([34, 4, 62, 35], [22, 93, 34, 24]) == [22, 34, 4, 62, 35, 93, 34, 24]\nassert solution.getAllElements([8, 47, 12, 16, 15, 87, 82, 79, 1, 66], [26, 50, 31, 63, 72, 74, 29, 25, 6, 96]) == [8, 26, 47, 12, 16, 15, 50, 31, 63, 72, 74, 29, 25, 6, 87, 82, 79, 1, 66, 96]\nassert solution.getAllElements([56, 63, 44, 64, 89, 66], [46, 73, 58, 47, 75, 84]) == [46, 56, 63, 44, 64, 73, 58, 47, 75, 84, 89, 66]\nassert solution.getAllElements([], [58, 86]) == [58, 86]\nassert solution.getAllElements([4, 76, 44, 21, 51, 47, 34, 54], [46, 23, 98, 28, 60, 19, 7, 99, 83]) == [4, 46, 23, 76, 44, 21, 51, 47, 34, 54, 98, 28, 60, 19, 7, 99, 83]\nassert solution.getAllElements([77], [34, 72, 90, 50]) == [34, 72, 77, 90, 50]\nassert solution.getAllElements([3, 24], [36, 23, 85, 46]) == [3, 24, 36, 23, 85, 46]\nassert solution.getAllElements([83, 71, 57, 73, 28, 61, 50, 40, 60, 29], [50, 8, 42, 88, 58, 43]) == [50, 8, 42, 83, 71, 57, 73, 28, 61, 50, 40, 60, 29, 88, 58, 43]\nassert solution.getAllElements([8, 31, 68, 22, 7, 91], []) == [8, 31, 68, 22, 7, 91]\nassert solution.getAllElements([95, 94, 44, 23, 6, 39, 26, 82], [80, 79, 50]) == [80, 79, 50, 95, 94, 44, 23, 6, 39, 26, 82]\nassert solution.getAllElements([57, 7, 3, 76, 18, 65], [78, 56, 14, 74, 100, 28, 10, 40]) == [57, 7, 3, 76, 18, 65, 78, 56, 14, 74, 100, 28, 10, 40]\nassert solution.getAllElements([42], [92, 65]) == [42, 92, 65]\nassert solution.getAllElements([64, 21], [26, 13, 56]) == [26, 13, 56, 64, 21]\nassert solution.getAllElements([85, 2, 74, 83, 50, 77, 63, 93, 95], [23, 78, 83, 91, 79]) == [23, 78, 83, 85, 2, 74, 83, 50, 77, 63, 91, 79, 93, 95]\nassert solution.getAllElements([85, 44, 76, 61, 19, 72, 1, 51], [32, 40, 58, 20, 70, 100, 95, 1, 27, 83]) == [32, 40, 58, 20, 70, 85, 44, 76, 61, 19, 72, 1, 51, 100, 95, 1, 27, 83]\nassert solution.getAllElements([47, 54, 91, 65, 40], []) == [47, 54, 91, 65, 40]\nassert solution.getAllElements([80, 4, 7, 18, 41], []) == [80, 4, 7, 18, 41]\nassert solution.getAllElements([75, 73, 58, 52, 55, 97, 98, 92], [66, 23, 33, 28, 75, 13]) == [66, 23, 33, 28, 75, 73, 58, 52, 55, 75, 13, 97, 98, 92]\nassert solution.getAllElements([15, 53, 20, 85, 9, 50, 28, 75], [35, 32, 4, 92, 1]) == [15, 35, 32, 4, 53, 20, 85, 9, 50, 28, 75, 92, 1]\nassert solution.getAllElements([], [7, 85, 15, 60, 58, 8, 87, 2, 66, 50]) == [7, 85, 15, 60, 58, 8, 87, 2, 66, 50]\nassert solution.getAllElements([16, 35], [77, 21]) == [16, 35, 77, 21]\nassert solution.getAllElements([96], [38, 28, 36, 14, 37]) == [38, 28, 36, 14, 37, 96]\nassert solution.getAllElements([38, 92, 88, 94, 65, 78, 12, 63], [37, 15, 72]) == [37, 15, 38, 72, 92, 88, 94, 65, 78, 12, 63]\nassert solution.getAllElements([37], [56, 48, 44, 34, 42, 47, 50, 17]) == [37, 56, 48, 44, 34, 42, 47, 50, 17]\nassert solution.getAllElements([98, 91], [28, 77, 14, 49, 83]) == [28, 77, 14, 49, 83, 98, 91]\nassert solution.getAllElements([36, 34], [64, 17, 10, 52, 98, 68, 93]) == [36, 34, 64, 17, 10, 52, 98, 68, 93]\nassert solution.getAllElements([60, 67, 35, 51, 5, 52, 25, 74], [85, 94, 71, 70, 35, 24]) == [60, 67, 35, 51, 5, 52, 25, 74, 85, 94, 71, 70, 35, 24]\nassert solution.getAllElements([88, 47, 86, 55, 15, 19, 74, 95, 5, 100], [95]) == [88, 47, 86, 55, 15, 19, 74, 95, 5, 95, 100]\nassert solution.getAllElements([62, 70, 51, 22, 43, 21, 82, 42, 96], []) == [62, 70, 51, 22, 43, 21, 82, 42, 96]\nassert solution.getAllElements([49, 37, 74, 83, 12, 100, 35], [5, 84, 71, 60, 38, 39, 92, 99]) == [5, 49, 37, 74, 83, 12, 84, 71, 60, 38, 39, 92, 99, 100, 35]\nassert solution.getAllElements([97, 99, 18, 45, 63, 76, 50, 23], [65, 6, 32, 72, 49, 19, 8, 20]) == [65, 6, 32, 72, 49, 19, 8, 20, 97, 99, 18, 45, 63, 76, 50, 23]\nassert solution.getAllElements([52, 70, 54, 58, 61, 24, 25, 48], [52, 46, 65]) == [52, 52, 46, 65, 70, 54, 58, 61, 24, 25, 48]\nassert solution.getAllElements([29, 23], [27, 58]) == [27, 29, 23, 58]\nassert solution.getAllElements([36, 8, 55, 86, 30, 49], [66, 41, 78, 69, 21, 45]) == [36, 8, 55, 66, 41, 78, 69, 21, 45, 86, 30, 49]\nassert solution.getAllElements([7, 33, 85, 39, 8, 13, 56, 81, 100], [1, 62, 42, 55]) == [1, 7, 33, 62, 42, 55, 85, 39, 8, 13, 56, 81, 100]\nassert solution.getAllElements([], [1]) == [1]\nassert solution.getAllElements([88, 18, 21, 48, 14, 77, 89, 67, 50, 19], [99]) == [88, 18, 21, 48, 14, 77, 89, 67, 50, 19, 99]\nassert solution.getAllElements([24, 62, 46, 91, 15, 51, 11, 96], [20, 86, 81, 76, 50, 8, 70]) == [20, 24, 62, 46, 86, 81, 76, 50, 8, 70, 91, 15, 51, 11, 96]\nassert solution.getAllElements([7, 81, 54], []) == [7, 81, 54]\nassert solution.getAllElements([2, 97, 17, 33, 79, 35, 75, 40, 71, 20], [94, 84, 88, 56]) == [2, 94, 84, 88, 56, 97, 17, 33, 79, 35, 75, 40, 71, 20]\nassert solution.getAllElements([31, 24, 97, 54, 6], [17, 69, 38, 86, 40, 61]) == [17, 31, 24, 69, 38, 86, 40, 61, 97, 54, 6]\nassert solution.getAllElements([51, 47, 31, 99, 79], [48, 11, 68, 34, 59, 32, 17, 61, 8, 21]) == [48, 11, 51, 47, 31, 68, 34, 59, 32, 17, 61, 8, 21, 99, 79]\nassert solution.getAllElements([52, 58, 3, 70, 68, 87], []) == [52, 58, 3, 70, 68, 87]\nassert solution.getAllElements([], []) == []\nassert solution.getAllElements([89, 69, 56, 26, 82, 62, 93, 9, 58, 34], [66, 29, 26, 36, 18, 11, 19, 100, 62]) == [66, 29, 26, 36, 18, 11, 19, 89, 69, 56, 26, 82, 62, 93, 9, 58, 34, 100, 62]\nassert solution.getAllElements([], [9, 90, 4, 68, 14]) == [9, 90, 4, 68, 14]\nassert solution.getAllElements([53, 43, 67, 41, 50, 23, 88, 74], []) == [53, 43, 67, 41, 50, 23, 88, 74]\nassert solution.getAllElements([9, 15, 1, 18, 80, 84, 58], [50, 56, 63, 39, 58, 74, 100, 85, 35]) == [9, 15, 1, 18, 50, 56, 63, 39, 58, 74, 80, 84, 58, 100, 85, 35]\nassert solution.getAllElements([17, 28, 96, 7, 49, 61], [6, 14, 5, 12]) == [6, 14, 5, 12, 17, 28, 96, 7, 49, 61]\nassert solution.getAllElements([35, 33], [89, 87, 31, 50, 34]) == [35, 33, 89, 87, 31, 50, 34]\nassert solution.getAllElements([83, 45, 54, 16, 69, 27, 64, 58, 67], [71, 15, 85, 83, 32]) == [71, 15, 83, 45, 54, 16, 69, 27, 64, 58, 67, 85, 83, 32]\nassert solution.getAllElements([87, 89, 77, 15, 19, 72, 52], [70, 63, 60, 78]) == [70, 63, 60, 78, 87, 89, 77, 15, 19, 72, 52]\nassert solution.getAllElements([53, 56, 29], [58, 82, 22, 74]) == [53, 56, 29, 58, 82, 22, 74]\nassert solution.getAllElements([18, 39, 58, 92, 24, 63, 72, 45], [98, 77, 43, 56, 99, 58, 4, 17, 90]) == [18, 39, 58, 92, 24, 63, 72, 45, 98, 77, 43, 56, 99, 58, 4, 17, 90]\nassert solution.getAllElements([9, 93, 72, 30, 28, 98, 41, 59], [4, 34, 81, 82, 54, 15, 20]) == [4, 9, 34, 81, 82, 54, 15, 20, 93, 72, 30, 28, 98, 41, 59]\nassert solution.getAllElements([43, 13, 99, 14, 71], [59, 70, 10, 3, 94, 68, 33]) == [43, 13, 59, 70, 10, 3, 94, 68, 33, 99, 14, 71]\nassert solution.getAllElements([98, 18], [58, 10, 14, 3, 61, 38]) == [58, 10, 14, 3, 61, 38, 98, 18]\nassert solution.getAllElements([], [53, 78, 18, 62, 30, 4, 89, 5, 32, 20]) == [53, 78, 18, 62, 30, 4, 89, 5, 32, 20]\nassert solution.getAllElements([85, 86], [45, 40, 67, 28]) == [45, 40, 67, 28, 85, 86]\nassert solution.getAllElements([62], [67, 41, 32, 3, 86, 55, 90, 34, 85, 18]) == [62, 67, 41, 32, 3, 86, 55, 90, 34, 85, 18]\nassert solution.getAllElements([17, 34, 56, 62, 78, 70, 6, 35, 63, 45], [49, 30]) == [17, 34, 49, 30, 56, 62, 78, 70, 6, 35, 63, 45]\nassert solution.getAllElements([36, 30, 58, 9, 40, 8, 55], [91, 27, 70, 55, 77]) == [36, 30, 58, 9, 40, 8, 55, 91, 27, 70, 55, 77]\nassert solution.getAllElements([97, 9, 83, 93, 46, 72], [67, 81, 98, 82, 66]) == [67, 81, 97, 9, 83, 93, 46, 72, 98, 82, 66]\nassert solution.getAllElements([98, 14, 96, 48, 92, 52, 46, 69], [90, 3, 7, 54, 76]) == [90, 3, 7, 54, 76, 98, 14, 96, 48, 92, 52, 46, 69]\nassert solution.getAllElements([], [25, 99, 85, 62, 72, 9, 19, 63, 39]) == [25, 99, 85, 62, 72, 9, 19, 63, 39]\nassert solution.getAllElements([], [36, 80]) == [36, 80]\nassert solution.getAllElements([61, 58, 81, 15, 94, 63], [21, 8, 50, 56, 89, 36]) == [21, 8, 50, 56, 61, 58, 81, 15, 89, 36, 94, 63]\nassert solution.getAllElements([5, 99, 90, 4, 37, 47], [70, 4, 69, 45, 77, 39, 26, 13]) == [5, 70, 4, 69, 45, 77, 39, 26, 13, 99, 90, 4, 37, 47]\nassert solution.getAllElements([37, 84, 71], [77]) == [37, 77, 84, 71]\nassert solution.getAllElements([89, 69, 72], [52, 65, 3, 8, 37, 5, 71]) == [52, 65, 3, 8, 37, 5, 71, 89, 69, 72]\nassert solution.getAllElements([21, 44, 70, 43, 5, 68, 24, 93, 84], [37, 76, 96, 25, 99, 27, 38, 8, 30, 66]) == [21, 37, 44, 70, 43, 5, 68, 24, 76, 93, 84, 96, 25, 99, 27, 38, 8, 30, 66]\nassert solution.getAllElements([9], [87, 4, 15, 71, 26, 34, 84, 64, 39, 42]) == [9, 87, 4, 15, 71, 26, 34, 84, 64, 39, 42]\nassert solution.getAllElements([83, 18, 77], [27, 84, 96, 19, 91, 58, 74]) == [27, 83, 18, 77, 84, 96, 19, 91, 58, 74]\nassert solution.getAllElements([57, 23, 81, 73, 55, 74, 68], [62, 13, 75, 43, 65, 77, 30, 95, 76, 25]) == [57, 23, 62, 13, 75, 43, 65, 77, 30, 81, 73, 55, 74, 68, 95, 76, 25]\nassert solution.getAllElements([3, 48, 63, 43, 97, 89, 29], []) == [3, 48, 63, 43, 97, 89, 29]\nassert solution.getAllElements([73, 8, 49, 40, 61, 24, 7, 29, 94], []) == [73, 8, 49, 40, 61, 24, 7, 29, 94]\nassert solution.getAllElements([80, 44, 52, 56, 99, 96, 66, 30, 22], []) == [80, 44, 52, 56, 99, 96, 66, 30, 22]\nassert solution.getAllElements([62, 81, 24, 64, 15, 39], [96, 37, 84, 68]) == [62, 81, 24, 64, 15, 39, 96, 37, 84, 68]\nassert solution.getAllElements([8, 43, 61], [95, 39, 87]) == [8, 43, 61, 95, 39, 87]\nassert solution.getAllElements([50], [44, 5, 45, 7, 54, 77, 18]) == [44, 5, 45, 7, 50, 54, 77, 18]\nassert solution.getAllElements([32, 53, 88, 97, 22, 55, 69, 83, 29], [47, 33, 48, 44, 91, 67, 40, 7, 22, 83]) == [32, 47, 33, 48, 44, 53, 88, 91, 67, 40, 7, 22, 83, 97, 22, 55, 69, 83, 29]\nassert solution.getAllElements([55, 43, 45, 66, 32, 91, 64], []) == [55, 43, 45, 66, 32, 91, 64]\nassert solution.getAllElements([7, 21, 41, 55, 46, 36, 35], [91, 2, 50, 45]) == [7, 21, 41, 55, 46, 36, 35, 91, 2, 50, 45]\nassert solution.getAllElements([83, 39, 41, 3, 42], [10, 47, 44, 7, 9, 90, 37, 39, 85]) == [10, 47, 44, 7, 9, 83, 39, 41, 3, 42, 90, 37, 39, 85]\nassert solution.getAllElements([50, 93, 90, 43, 67, 99, 35, 98, 30], []) == [50, 93, 90, 43, 67, 99, 35, 98, 30]\nassert solution.getAllElements([78, 34, 45, 88, 62, 19, 37], []) == [78, 34, 45, 88, 62, 19, 37]\nassert solution.getAllElements([82, 34, 87, 91, 49, 40, 4, 24, 28, 20], [76, 69, 4, 96]) == [76, 69, 4, 82, 34, 87, 91, 49, 40, 4, 24, 28, 20, 96]\nassert solution.getAllElements([], [5, 51, 12, 14, 63, 52, 32]) == [5, 51, 12, 14, 63, 52, 32]\nassert solution.getAllElements([27, 42, 71], [16, 99, 97, 8, 44]) == [16, 27, 42, 71, 99, 97, 8, 44]\nassert solution.getAllElements([20, 59, 67], [82, 68, 65, 100, 69, 38, 50, 57]) == [20, 59, 67, 82, 68, 65, 100, 69, 38, 50, 57]\nassert solution.getAllElements([60, 15, 71, 81], [75, 100, 9, 33]) == [60, 15, 71, 75, 81, 100, 9, 33]\nassert solution.getAllElements([59, 20, 16, 47, 30], [56, 2, 25]) == [56, 2, 25, 59, 20, 16, 47, 30]\nassert solution.getAllElements([99, 51, 32, 81, 68], [55, 30, 49, 96, 36, 50, 11]) == [55, 30, 49, 96, 36, 50, 11, 99, 51, 32, 81, 68]\nassert solution.getAllElements([20, 53, 28, 31], [54, 52, 3, 81, 94, 63, 47, 96]) == [20, 53, 28, 31, 54, 52, 3, 81, 94, 63, 47, 96]\nassert solution.getAllElements([74, 80, 7, 91, 86, 49, 44, 94], [74]) == [74, 74, 80, 7, 91, 86, 49, 44, 94]\nassert solution.getAllElements([79, 96, 43, 64, 90, 3, 84, 47, 18], [6, 23, 61, 45, 94, 86]) == [6, 23, 61, 45, 79, 94, 86, 96, 43, 64, 90, 3, 84, 47, 18]",
  "inefficient_solution": "",
  "is_python": true
}