{
  "problem_idx": 1851,
  "task_name": "Minimum Interval to Include Each Query",
  "markdown_description": "\nYou are given a 2D integer array `intervals`, where `intervals[i] = [lefti, righti]` describes the `ith` interval starting at `lefti` and ending at `righti` **(inclusive)**. The **size** of an interval is defined as the number of integers it contains, or more formally `righti - lefti + 1`.\n\n\nYou are also given an integer array `queries`. The answer to the `jth` query is the **size of the smallest interval** `i` such that `lefti <= queries[j] <= righti`. If no such interval exists, the answer is `-1`.\n\n\nReturn *an array containing the answers to the queries*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]\n**Output:** [3,3,1,4]\n**Explanation:** The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]\n**Output:** [2,-1,4,6]\n**Explanation:** The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= intervals.length <= 105`\n* `1 <= queries.length <= 105`\n* `intervals[i].length == 2`\n* `1 <= lefti <= righti <= 107`\n* `1 <= queries[j] <= 107`\n\n\n",
  "canonical_solution": "class Solution:\n    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:\n        n, m = len(intervals), len(queries)\n        intervals.sort()\n        queries = sorted((x, i) for i, x in enumerate(queries))\n        ans = [-1] * m\n        pq = []\n        i = 0\n        for x, j in queries:\n            while i < n and intervals[i][0] <= x:\n                a, b = intervals[i]\n                heappush(pq, (b - a + 1, b))\n                i += 1\n            while pq and pq[0][1] < x:\n                heappop(pq)\n            if pq:\n                ans[j] = pq[0][0]\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minInterval(self, intervals, queries):\n        n, m = len(intervals), len(queries)\n        intervals.sort()\n        queries = sorted((x, i) for i, x in enumerate(queries))\n        ans = [-1] * m\n        pq = []\n        i = 0\n        for x, j in queries:\n            while i < n and intervals[i][0] <= x:\n                a, b = intervals[i]\n                heappush(pq, (b - a + 1, b))\n                i += 1\n            while pq and pq[0][1] < x:\n                heappop(pq)\n            if pq:\n                ans[j] = pq[0][0]\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random intervals\n    intervals_length = random.randint(1, 11)\n    intervals = []\n    for _ in range(intervals_length):\n        left = random.randint(1, 100)\n        right = left + random.randint(1, 100)\n        intervals.append([left, right])\n    \n    # Generate random queries\n    queries_length = random.randint(1, 11)\n    queries = []\n    for _ in range(queries_length):\n        query = random.randint(1, 100)\n        queries.append(query)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minInterval(intervals, queries)\n\n    return intervals, queries, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        intervals, queries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minInterval(intervals, queries) == expected_result\n        print(f\"assert solution.minInterval({intervals}, {queries}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minInterval({intervals}, {queries}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minInterval([[4, 57], [6, 99], [7, 87], [8, 105], [26, 75], [36, 87], [67, 136], [75, 114], [80, 147]], [46, 5, 99, 16]) == [50, 54, 40, 54]\nassert solution.minInterval([[5, 11], [6, 26], [91, 179], [95, 172]], [51, 97, 28, 69, 37, 43, 83, 65, 18, 99, 58]) == [-1, 78, -1, -1, -1, -1, -1, -1, 21, 78, -1]\nassert solution.minInterval([[23, 76], [24, 70], [29, 108], [40, 58]], [13, 1, 16, 91, 58, 36, 44, 62]) == [-1, -1, -1, 80, 19, 47, 19, 47]\nassert solution.minInterval([[5, 78], [8, 80], [22, 28], [52, 129], [53, 97], [57, 59], [79, 81], [82, 84], [87, 98], [89, 162], [99, 103]], [63, 46, 29, 47, 31, 24, 51, 57, 34, 59, 94]) == [45, 73, 73, 73, 73, 7, 73, 3, 73, 3, 12]\nassert solution.minInterval([[1, 72], [21, 74], [24, 38], [52, 91], [87, 103], [98, 119]], [63, 32, 49, 54, 46, 66, 25]) == [40, 15, 54, 40, 54, 40, 15]\nassert solution.minInterval([[13, 112], [22, 62], [47, 91], [53, 74], [70, 71], [81, 158], [90, 153], [92, 99]], [52, 36, 9, 89, 86, 34, 58, 18, 20, 28]) == [41, 41, -1, 45, 45, 41, 22, 100, 100, 41]\nassert solution.minInterval([[11, 25], [25, 43], [48, 123], [52, 68], [52, 147]], [75]) == [76]\nassert solution.minInterval([[9, 13], [69, 99]], [43, 59, 65, 27, 6, 56, 48, 35, 73, 68]) == [-1, -1, -1, -1, -1, -1, -1, -1, 31, -1]\nassert solution.minInterval([[39, 124], [47, 76], [47, 90], [62, 93], [69, 162], [89, 159], [98, 138]], [18, 33, 29, 1, 96, 85, 43, 70, 65]) == [-1, -1, -1, -1, 71, 32, 86, 30, 30]\nassert solution.minInterval([[6, 26], [6, 65], [22, 116], [23, 121], [48, 122], [80, 133], [83, 112], [92, 99]], [11, 24, 62, 40]) == [21, 21, 60, 60]\nassert solution.minInterval([[83, 88]], [93, 25]) == [-1, -1]\nassert solution.minInterval([[2, 92], [6, 56], [22, 100], [27, 51], [49, 61], [54, 80], [63, 126], [69, 89], [88, 162], [96, 123]], [1, 36, 9, 42, 55, 69]) == [-1, 25, 51, 25, 13, 21]\nassert solution.minInterval([[14, 40], [21, 30], [47, 114], [61, 90], [63, 152], [80, 93], [81, 163], [95, 149], [95, 183]], [29, 65]) == [10, 30]\nassert solution.minInterval([[8, 85], [98, 183]], [19, 14, 51, 54, 20, 73, 58, 92, 81, 47, 36]) == [78, 78, 78, 78, 78, 78, 78, -1, 78, 78, 78]\nassert solution.minInterval([[3, 29], [18, 111], [20, 88], [39, 94], [43, 94], [46, 85], [47, 75], [48, 125], [69, 101], [85, 86]], [8, 61, 47]) == [27, 29, 29]\nassert solution.minInterval([[10, 18], [44, 76], [75, 114], [92, 165], [97, 175]], [40, 63, 52, 4, 44, 99, 88, 39, 56, 77, 57]) == [-1, 33, 33, -1, 33, 40, 40, -1, 33, 40, 33]\nassert solution.minInterval([[29, 85], [61, 73], [83, 85], [91, 130], [96, 107]], [61]) == [13]\nassert solution.minInterval([[17, 91]], [86, 71, 71, 36, 61, 68, 88, 61, 30, 81, 31]) == [75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75]\nassert solution.minInterval([[19, 38], [60, 160], [95, 155]], [15, 16, 1]) == [-1, -1, -1]\nassert solution.minInterval([[86, 112]], [3, 45, 30, 38, 84, 14]) == [-1, -1, -1, -1, -1, -1]\nassert solution.minInterval([[15, 54], [25, 64], [28, 41], [41, 69], [51, 115], [69, 169], [92, 141]], [55, 87, 45, 58, 45, 64, 23, 47]) == [29, 65, 29, 29, 29, 29, 40, 29]\nassert solution.minInterval([[3, 30], [6, 26], [7, 90], [13, 80], [21, 121], [37, 131], [41, 114], [84, 153], [90, 176], [99, 156]], [75, 2]) == [68, -1]\nassert solution.minInterval([[4, 95], [12, 60], [24, 61], [47, 130], [70, 163], [97, 150]], [5, 96, 34, 87]) == [92, 84, 38, 84]\nassert solution.minInterval([[1, 100], [8, 60], [13, 91], [19, 32], [22, 72], [49, 77], [77, 143]], [85, 78, 54, 64, 68, 69]) == [67, 67, 29, 29, 29, 29]\nassert solution.minInterval([[4, 70], [23, 105], [24, 25], [49, 52], [86, 119], [97, 191], [99, 145]], [96, 78, 57, 70, 4, 57, 96, 70, 33, 64]) == [34, 83, 67, 67, 67, 67, 34, 67, 67, 67]\nassert solution.minInterval([[12, 58], [27, 108], [43, 116], [51, 70], [74, 76], [81, 85], [97, 148], [97, 181]], [18, 38, 86, 24, 60, 4, 66, 81, 21, 73]) == [47, 47, 74, 47, 20, -1, 20, 5, 47, 74]\nassert solution.minInterval([[7, 35], [17, 108], [19, 95], [30, 127], [36, 78], [55, 116], [75, 143], [79, 128], [98, 189]], [12, 75, 94]) == [29, 43, 50]\nassert solution.minInterval([[52, 60], [57, 62]], [34, 95]) == [-1, -1]\nassert solution.minInterval([[19, 51], [40, 60], [50, 79]], [48, 11, 38, 64, 46, 82]) == [21, -1, 33, 30, 21, -1]\nassert solution.minInterval([[57, 86], [86, 104], [90, 154], [91, 119]], [95, 91, 35, 48, 35, 24, 65, 76, 87, 53, 89]) == [19, 19, -1, -1, -1, -1, 30, 30, 19, -1, 19]\nassert solution.minInterval([[15, 86], [39, 125], [43, 90], [49, 120], [51, 76], [62, 132], [79, 160], [86, 164]], [46, 91, 73, 86, 46]) == [48, 71, 26, 48, 48]\nassert solution.minInterval([[10, 81], [14, 30], [29, 47], [31, 95], [71, 101], [96, 119]], [43, 69, 13, 64, 89, 22, 41, 60, 21, 20, 54]) == [19, 65, 72, 65, 31, 17, 19, 65, 17, 17, 65]\nassert solution.minInterval([[14, 83], [28, 60], [46, 79], [76, 83], [81, 108]], [76, 52, 41, 14, 79, 70, 86]) == [8, 33, 33, 70, 8, 34, 28]\nassert solution.minInterval([[20, 32], [31, 35], [38, 78], [43, 101], [44, 59], [71, 131], [72, 130], [73, 157], [86, 182], [95, 122]], [36, 9, 87, 45, 94, 88, 34]) == [-1, -1, 59, 16, 59, 59, 5]\nassert solution.minInterval([[8, 38], [31, 75], [50, 92], [54, 89], [64, 121], [93, 94], [93, 113], [100, 194]], [37]) == [31]\nassert solution.minInterval([[15, 91], [20, 36], [25, 36], [27, 43], [29, 91], [38, 54], [60, 62], [72, 102], [90, 93], [91, 129]], [55, 56, 85, 13, 22]) == [63, 63, 31, -1, 17]\nassert solution.minInterval([[89, 152]], [73]) == [-1]\nassert solution.minInterval([[56, 132], [59, 76], [76, 117], [80, 82], [86, 153], [87, 132], [91, 189], [98, 131], [98, 182]], [89]) == [42]\nassert solution.minInterval([[6, 81], [9, 99], [26, 67], [55, 79], [98, 190]], [24, 48, 12, 78, 37, 49, 28]) == [76, 42, 76, 25, 42, 42, 42]\nassert solution.minInterval([[24, 38], [50, 91], [63, 126], [65, 83], [72, 116]], [62, 24]) == [42, 15]\nassert solution.minInterval([[11, 47], [44, 141], [58, 82], [63, 117], [74, 142], [81, 106], [98, 143]], [49, 16, 34, 31, 95, 23, 9, 35, 65, 11]) == [98, 37, 37, 37, 26, 37, -1, 37, 25, 37]\nassert solution.minInterval([[6, 44], [48, 129], [65, 103], [70, 113], [90, 143]], [3, 31, 65, 36, 56, 69, 20, 46, 96, 1, 92]) == [-1, 39, 39, 39, 82, 39, 39, -1, 39, -1, 39]\nassert solution.minInterval([[2, 29], [13, 65], [23, 102], [30, 128], [52, 104], [69, 79], [77, 131], [80, 101], [86, 163], [93, 120]], [89, 20, 36, 69, 23, 55, 18, 42, 70, 96, 60]) == [22, 28, 53, 11, 28, 53, 28, 53, 11, 22, 53]\nassert solution.minInterval([[10, 95], [18, 101], [19, 116], [23, 88], [25, 108], [31, 109], [37, 66], [39, 117], [50, 97], [75, 84], [97, 118]], [49, 69, 59, 26, 44, 20, 7, 20]) == [30, 48, 30, 66, 30, 84, -1, 84]\nassert solution.minInterval([[4, 72], [6, 42], [43, 101], [47, 55], [73, 116]], [16, 73, 85, 23, 65, 23, 72, 2, 89]) == [37, 44, 44, 37, 59, 37, 59, -1, 44]\nassert solution.minInterval([[28, 123], [29, 68], [35, 36], [37, 133], [38, 104], [48, 64], [61, 69], [63, 144], [88, 102], [95, 179]], [77, 74]) == [67, 67]\nassert solution.minInterval([[1, 38], [32, 75], [42, 45], [43, 85], [69, 103], [80, 102], [84, 85], [84, 141], [90, 105], [90, 114]], [14, 39, 10, 87, 39, 37, 29, 88, 4, 77]) == [38, 44, 38, 23, 44, 38, 38, 23, 38, 35]\nassert solution.minInterval([[28, 67], [43, 127], [63, 100], [84, 174]], [38, 40, 66, 98, 96]) == [40, 40, 38, 38, 38]\nassert solution.minInterval([[96, 112]], [25, 4, 52, 86, 55, 28, 69]) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.minInterval([[2, 95], [89, 93], [99, 128]], [59, 37, 79, 96, 86, 14, 6, 15]) == [94, 94, 94, -1, 94, 94, 94, 94]\nassert solution.minInterval([[9, 105], [10, 59], [48, 84], [50, 79], [53, 142], [54, 62], [74, 167], [88, 126], [88, 135], [95, 101], [100, 124]], [46, 25]) == [50, 50]\nassert solution.minInterval([[8, 20], [33, 125], [35, 40], [41, 67], [78, 115], [78, 116], [93, 105]], [66, 10, 92]) == [27, 13, 38]\nassert solution.minInterval([[22, 85], [40, 94], [49, 114], [52, 99], [75, 94]], [99, 68]) == [48, 48]\nassert solution.minInterval([[2, 13], [14, 103], [22, 68], [30, 99], [45, 137], [50, 94], [54, 150], [83, 95], [85, 107], [89, 163], [90, 167]], [60, 52, 37, 30, 10]) == [45, 45, 47, 47, 12]\nassert solution.minInterval([[5, 68], [38, 128], [43, 137], [46, 91], [68, 70], [86, 162]], [46, 77, 51, 33, 100, 2, 67, 35, 44]) == [46, 46, 46, 64, 77, -1, 46, 64, 64]\nassert solution.minInterval([[3, 99], [19, 51], [32, 118], [41, 124], [50, 133], [64, 142], [66, 101], [70, 117], [95, 168]], [4, 95, 9, 60, 35, 42, 57, 54]) == [97, 36, 97, 84, 33, 33, 84, 84]\nassert solution.minInterval([[28, 79], [62, 76], [87, 148]], [45, 53, 30, 63, 90, 68, 72]) == [52, 52, 52, 15, 62, 15, 15]\nassert solution.minInterval([[19, 33], [25, 61], [32, 104], [40, 57], [75, 100], [76, 136], [88, 132], [94, 111]], [16, 34, 66, 41, 29, 57]) == [-1, 37, 73, 18, 15, 18]\nassert solution.minInterval([[2, 79], [18, 105], [33, 129], [41, 69], [53, 62], [53, 79], [57, 81], [61, 87], [85, 94], [91, 109]], [92, 16, 26, 46]) == [10, 78, 78, 29]\nassert solution.minInterval([[37, 125], [65, 138], [95, 112]], [16, 15, 36, 80, 53, 92]) == [-1, -1, -1, 74, 89, 74]\nassert solution.minInterval([[35, 62]], [91, 8, 8, 94, 46, 2, 13, 26, 89]) == [-1, -1, -1, -1, 28, -1, -1, -1, -1]\nassert solution.minInterval([[22, 113], [42, 66], [48, 62], [96, 150]], [29, 77, 63, 22, 89, 49]) == [92, 92, 25, 92, 92, 15]\nassert solution.minInterval([[10, 108], [15, 42], [18, 109], [50, 103]], [51, 59, 59, 31, 80, 38, 52, 61]) == [54, 54, 54, 28, 54, 28, 54, 54]\nassert solution.minInterval([[3, 16], [6, 8], [18, 59], [29, 110], [36, 79], [40, 78], [44, 59], [74, 160], [81, 148], [89, 107], [98, 114]], [21, 62, 22]) == [42, 39, 42]\nassert solution.minInterval([[14, 53], [22, 57], [55, 65], [56, 110]], [4, 80, 52]) == [-1, 55, 36]\nassert solution.minInterval([[8, 59], [38, 79], [89, 180]], [61, 34, 9, 33, 53, 57, 42, 93, 34, 75]) == [42, 52, 52, 52, 42, 42, 42, 92, 52, 42]\nassert solution.minInterval([[100, 156]], [22, 17, 62, 97, 33, 46, 65, 39]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.minInterval([[42, 121], [89, 134]], [43, 89, 91, 45, 12, 57]) == [80, 46, 46, 80, -1, 80]\nassert solution.minInterval([[11, 66], [25, 27], [47, 83]], [79, 42, 14, 35, 31, 50, 93, 69, 39]) == [37, 56, 56, 56, 56, 37, -1, 37, 56]\nassert solution.minInterval([[20, 109], [49, 69], [69, 86], [79, 133]], [85, 21, 62, 73, 64, 2, 68, 30]) == [18, 90, 21, 18, 21, -1, 21, 90]\nassert solution.minInterval([[39, 52]], [67, 91, 25, 45, 46, 17]) == [-1, -1, -1, 14, 14, -1]\nassert solution.minInterval([[48, 109], [49, 135], [91, 149], [95, 185]], [40]) == [-1]\nassert solution.minInterval([[38, 116], [41, 78], [52, 86], [60, 74], [81, 125], [90, 131], [91, 120], [96, 103]], [72, 7, 82, 65, 48, 50]) == [15, -1, 35, 15, 38, 38]\nassert solution.minInterval([[47, 125], [67, 132], [71, 130], [77, 92], [82, 180], [84, 96], [97, 185]], [93, 100, 20, 44]) == [13, 60, -1, -1]\nassert solution.minInterval([[5, 13], [9, 49], [38, 59], [46, 119], [52, 118], [57, 125], [68, 149], [84, 148], [93, 103]], [44, 38, 6, 39, 68, 51, 40, 78]) == [22, 22, 9, 22, 67, 22, 22, 67]\nassert solution.minInterval([[2, 39], [8, 75], [10, 71], [17, 22], [43, 124], [58, 110], [64, 107], [65, 161], [82, 138], [96, 173], [98, 181]], [58, 46, 98, 44, 92, 16, 100]) == [53, 62, 44, 62, 44, 38, 44]\nassert solution.minInterval([[24, 56], [33, 73], [50, 93]], [36, 36, 84, 64, 30, 100, 6, 60, 83]) == [33, 33, 44, 41, 33, -1, -1, 41, 44]\nassert solution.minInterval([[5, 34], [22, 34], [39, 62], [53, 78], [92, 126], [94, 185]], [83, 48, 56, 58, 46, 1, 22, 54, 2, 10, 17]) == [-1, 24, 24, 24, 24, -1, 13, 24, -1, 30, 30]\nassert solution.minInterval([[9, 38], [20, 57], [39, 49], [47, 136], [48, 115], [52, 142], [69, 93], [70, 166], [71, 115], [87, 148]], [26, 42, 80, 78, 68, 48, 20, 92, 72, 26]) == [30, 11, 25, 25, 68, 11, 30, 25, 25, 30]\nassert solution.minInterval([[7, 17], [32, 83], [68, 85]], [6, 94, 87, 45, 6, 16, 51]) == [-1, -1, -1, 52, -1, 11, 52]\nassert solution.minInterval([[5, 40], [18, 113], [34, 71], [64, 150], [68, 81]], [83, 75, 50]) == [87, 14, 38]\nassert solution.minInterval([[96, 151]], [64, 59, 88, 4]) == [-1, -1, -1, -1]\nassert solution.minInterval([[16, 35], [26, 32], [58, 74], [100, 163]], [25, 96, 72, 42]) == [20, -1, 17, -1]\nassert solution.minInterval([[26, 63], [30, 72], [56, 90], [77, 117], [77, 132], [79, 98]], [76, 6, 55, 4, 7]) == [35, -1, 38, -1, -1]\nassert solution.minInterval([[19, 35]], [27, 11, 70, 76]) == [17, -1, -1, -1]\nassert solution.minInterval([[6, 59], [18, 93], [32, 72], [40, 122], [51, 67], [63, 154], [73, 126]], [88, 40, 68, 58, 51, 24, 53, 25, 53]) == [54, 41, 41, 17, 17, 54, 17, 54, 17]\nassert solution.minInterval([[67, 157], [74, 123]], [63, 39, 93, 41, 96, 98, 74, 10]) == [-1, -1, 50, -1, 50, 50, 50, -1]\nassert solution.minInterval([[32, 91], [52, 92], [96, 133]], [40]) == [60]\nassert solution.minInterval([[64, 93]], [86, 85, 68, 93, 42, 33, 53, 9]) == [30, 30, 30, 30, -1, -1, -1, -1]\nassert solution.minInterval([[7, 58], [41, 126], [44, 136], [53, 117], [68, 121], [81, 162], [86, 116], [88, 172], [90, 167], [98, 116], [98, 166]], [54, 15, 11, 58, 14, 72, 45, 41, 34, 33]) == [52, 52, 52, 52, 52, 54, 52, 52, 52, 52]\nassert solution.minInterval([[10, 55], [21, 101], [90, 155]], [83, 89, 75, 25, 33, 85, 61, 90]) == [81, 81, 81, 46, 46, 81, 81, 66]\nassert solution.minInterval([[41, 121], [55, 86], [68, 99], [99, 172]], [67]) == [32]\nassert solution.minInterval([[14, 70], [49, 114], [92, 141], [96, 126]], [18, 50, 58, 26, 63, 31, 52, 89, 38, 5]) == [57, 57, 57, 57, 57, 57, 57, 66, 57, -1]\nassert solution.minInterval([[49, 146], [59, 114], [89, 103], [96, 129]], [30, 90, 79, 41, 75, 95]) == [-1, 15, 56, -1, 56, 15]\nassert solution.minInterval([[81, 142]], [42, 56, 78, 3, 40, 76, 52, 14]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.minInterval([[4, 70], [20, 34], [23, 44], [27, 65], [33, 117], [75, 145], [76, 117], [99, 109]], [86, 17, 26, 73]) == [42, 67, 15, 85]\nassert solution.minInterval([[4, 60], [7, 85], [18, 101], [21, 70], [62, 142], [76, 100], [78, 84]], [25, 71, 38, 60, 89, 23]) == [50, 79, 50, 50, 25, 50]\nassert solution.minInterval([[23, 52], [56, 108], [63, 160], [75, 142], [78, 155]], [44, 35, 94, 14, 97]) == [30, 30, 53, -1, 53]\nassert solution.minInterval([[47, 124], [60, 115], [68, 152], [74, 94], [95, 173]], [77, 14, 6, 15, 79, 86, 17]) == [21, -1, -1, -1, 21, 21, -1]\nassert solution.minInterval([[10, 106], [15, 70], [97, 177]], [2, 73, 69]) == [-1, 97, 56]",
  "inefficient_solution": "class Solution:\n    def minInterval(self, intervals, queries):\n        n, m = len(intervals), len(queries)\n        intervals.sort()\n        queries = sorted((x, i) for i, x in enumerate(queries))\n        ans = [-1] * m\n        for x, j in queries:\n            pq = []\n            for a, b in intervals:\n                if a <= x <= b:\n                    pq.append((b - a + 1, b))\n            pq.sort(key=lambda x: x[1], reverse=True)\n            for i in range(len(pq)):\n                if pq[i][1] >= x:\n                    ans[j] = pq[i][0]\n                    break\n            if ans[j] == -1:\n                for a, b in intervals:\n                    if a <= x <= b:\n                        ans[j] = b - a + 1\n                        break\n        return ans",
  "is_python": true
}