{
  "problem_idx": 799,
  "task_name": "Champagne Tower",
  "markdown_description": "\nWe stack glasses in a pyramid, where the **first** row has `1` glass, the **second** row has `2` glasses, and so on until the 100th row.\u00a0 Each glass holds one cup\u00a0of champagne.\n\n\nThen, some champagne is poured into the first glass at the top.\u00a0 When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\u00a0 When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\u00a0 (A glass at the bottom row has its excess champagne fall on the floor.)\n\n\nFor example, after one cup of champagne is poured, the top most glass is full.\u00a0 After two cups of champagne are poured, the two glasses on the second row are half full.\u00a0 After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\u00a0 After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0799.Champagne%20Tower/images/tower.png)\n\n\nNow after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** poured = 1, query_row = 1, query_glass = 1\n**Output:** 0.00000\n**Explanation:** We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** poured = 2, query_row = 1, query_glass = 1\n**Output:** 0.50000\n**Explanation:** We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** poured = 100000009, query_row = 33, query_glass = 17\n**Output:** 1.00000\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <=\u00a0poured <= 109`\n* `0 <= query_glass <= query_row\u00a0< 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:\n        f = [[0] * 101 for _ in range(101)]\n        f[0][0] = poured\n        for i in range(query_row + 1):\n            for j in range(i + 1):\n                if f[i][j] > 1:\n                    half = (f[i][j] - 1) / 2\n                    f[i][j] = 1\n                    f[i + 1][j] += half\n                    f[i + 1][j + 1] += half\n        return f[query_row][query_glass]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:\n        f = [[0] * 101 for _ in range(101)]\n        f[0][0] = poured\n        for i in range(query_row + 1):\n            for j in range(i + 1):\n                if f[i][j] > 1:\n                    half = (f[i][j] - 1) / 2\n                    f[i][j] = 1\n                    f[i + 1][j] += half\n                    f[i + 1][j + 1] += half\n        return f[query_row][query_glass]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random inputs\n    poured = random.randint(0, 100)\n    query_row = random.randint(0, 99)\n    query_glass = random.randint(0, query_row)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.champagneTower(poured, query_row, query_glass)\n\n    return poured, query_row, query_glass, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        poured, query_row, query_glass, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.champagneTower(poured, query_row, query_glass) == expected_result\n        print(f\"assert solution.champagneTower({poured}, {query_row}, {query_glass}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.champagneTower({poured}, {query_row}, {query_glass}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.champagneTower(66, 29, 28) == 0\nassert solution.champagneTower(3, 87, 49) == 0\nassert solution.champagneTower(64, 96, 23) == 0\nassert solution.champagneTower(10, 16, 2) == 0\nassert solution.champagneTower(19, 39, 19) == 0\nassert solution.champagneTower(10, 99, 13) == 0\nassert solution.champagneTower(22, 36, 1) == 0\nassert solution.champagneTower(43, 52, 30) == 0\nassert solution.champagneTower(3, 0, 0) == 1\nassert solution.champagneTower(29, 16, 9) == 0\nassert solution.champagneTower(57, 18, 4) == 0\nassert solution.champagneTower(49, 99, 0) == 0\nassert solution.champagneTower(4, 29, 15) == 0\nassert solution.champagneTower(88, 9, 6) == 1\nassert solution.champagneTower(25, 72, 53) == 0\nassert solution.champagneTower(30, 22, 5) == 0\nassert solution.champagneTower(76, 9, 4) == 1\nassert solution.champagneTower(76, 90, 45) == 0\nassert solution.champagneTower(27, 97, 13) == 0\nassert solution.champagneTower(68, 86, 27) == 0\nassert solution.champagneTower(33, 98, 7) == 0\nassert solution.champagneTower(14, 28, 24) == 0\nassert solution.champagneTower(11, 37, 37) == 0\nassert solution.champagneTower(97, 4, 1) == 1\nassert solution.champagneTower(61, 84, 59) == 0\nassert solution.champagneTower(94, 12, 10) == 0\nassert solution.champagneTower(55, 3, 2) == 1\nassert solution.champagneTower(47, 0, 0) == 1\nassert solution.champagneTower(78, 59, 45) == 0\nassert solution.champagneTower(47, 41, 36) == 0\nassert solution.champagneTower(70, 86, 50) == 0\nassert solution.champagneTower(21, 24, 2) == 0\nassert solution.champagneTower(17, 56, 8) == 0\nassert solution.champagneTower(88, 81, 23) == 0\nassert solution.champagneTower(94, 12, 5) == 1\nassert solution.champagneTower(45, 78, 25) == 0\nassert solution.champagneTower(66, 44, 20) == 0\nassert solution.champagneTower(12, 47, 15) == 0\nassert solution.champagneTower(45, 31, 6) == 0\nassert solution.champagneTower(58, 68, 47) == 0\nassert solution.champagneTower(41, 26, 15) == 0\nassert solution.champagneTower(78, 28, 27) == 0\nassert solution.champagneTower(27, 28, 12) == 0\nassert solution.champagneTower(68, 10, 1) == 0\nassert solution.champagneTower(90, 67, 38) == 0\nassert solution.champagneTower(47, 36, 12) == 0\nassert solution.champagneTower(50, 31, 0) == 0\nassert solution.champagneTower(10, 61, 17) == 0\nassert solution.champagneTower(76, 18, 2) == 0\nassert solution.champagneTower(20, 75, 28) == 0\nassert solution.champagneTower(30, 28, 28) == 0\nassert solution.champagneTower(88, 52, 25) == 0\nassert solution.champagneTower(0, 49, 48) == 0\nassert solution.champagneTower(12, 82, 46) == 0\nassert solution.champagneTower(30, 36, 31) == 0\nassert solution.champagneTower(42, 39, 9) == 0\nassert solution.champagneTower(47, 68, 36) == 0\nassert solution.champagneTower(44, 29, 28) == 0\nassert solution.champagneTower(31, 29, 1) == 0\nassert solution.champagneTower(22, 59, 39) == 0\nassert solution.champagneTower(59, 72, 42) == 0\nassert solution.champagneTower(62, 57, 47) == 0\nassert solution.champagneTower(71, 28, 5) == 0\nassert solution.champagneTower(97, 60, 26) == 0\nassert solution.champagneTower(93, 19, 16) == 0\nassert solution.champagneTower(89, 21, 2) == 0\nassert solution.champagneTower(60, 52, 41) == 0\nassert solution.champagneTower(19, 77, 40) == 0\nassert solution.champagneTower(85, 38, 7) == 0\nassert solution.champagneTower(83, 27, 13) == 0\nassert solution.champagneTower(92, 25, 14) == 0\nassert solution.champagneTower(43, 31, 31) == 0\nassert solution.champagneTower(13, 25, 6) == 0\nassert solution.champagneTower(31, 93, 70) == 0\nassert solution.champagneTower(4, 46, 43) == 0\nassert solution.champagneTower(82, 51, 23) == 0\nassert solution.champagneTower(4, 7, 5) == 0\nassert solution.champagneTower(17, 56, 44) == 0\nassert solution.champagneTower(89, 13, 10) == 0\nassert solution.champagneTower(8, 56, 49) == 0\nassert solution.champagneTower(37, 46, 33) == 0\nassert solution.champagneTower(58, 14, 13) == 0\nassert solution.champagneTower(2, 42, 12) == 0\nassert solution.champagneTower(23, 31, 0) == 0\nassert solution.champagneTower(25, 47, 5) == 0\nassert solution.champagneTower(59, 94, 47) == 0\nassert solution.champagneTower(23, 44, 37) == 0\nassert solution.champagneTower(17, 69, 45) == 0\nassert solution.champagneTower(96, 0, 0) == 1\nassert solution.champagneTower(7, 7, 6) == 0\nassert solution.champagneTower(41, 14, 4) == 0\nassert solution.champagneTower(51, 8, 0) == 0\nassert solution.champagneTower(6, 93, 18) == 0\nassert solution.champagneTower(10, 24, 8) == 0\nassert solution.champagneTower(52, 38, 35) == 0\nassert solution.champagneTower(66, 23, 22) == 0\nassert solution.champagneTower(12, 28, 10) == 0\nassert solution.champagneTower(59, 53, 7) == 0\nassert solution.champagneTower(94, 13, 9) == 1\nassert solution.champagneTower(50, 37, 21) == 0",
  "inefficient_solution": "class Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:\n        f = [[0] * 121000 for _ in range(121000)]\n        f[0][0] = poured\n        for i in range(121000):\n            for j in range(121000):\n                if f[i][j] > 1:\n                    half = (f[i][j] - 1) / 2\n                    f[i][j] = 1\n                    f[i + 1][j] += half\n                    f[i + 1][j + 1] += half\n        return f[query_row][query_glass]",
  "is_python": true
}