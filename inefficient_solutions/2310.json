{
  "problem_idx": 2310,
  "task_name": "Sum of Numbers With Units Digit K",
  "markdown_description": "\nGiven two integers `num` and `k`, consider a set of positive integers with the following properties:\n\n\n* The units digit of each integer is `k`.\n* The sum of the integers is `num`.\n\n\nReturn *the **minimum** possible size of such a set, or* `-1` *if no such set exists.*\n\n\nNote:\n\n\n* The set can contain multiple instances of the same integer, and the sum of an empty set is considered `0`.\n* The **units digit** of a number is the rightmost digit of the number.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 58, k = 9\n**Output:** 2\n**Explanation:**\nOne valid set is [9,49], as the sum is 58 and each integer has a units digit of 9.\nAnother valid set is [19,39].\nIt can be shown that 2 is the minimum possible size of a valid set.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 37, k = 2\n**Output:** -1\n**Explanation:** It is not possible to obtain a sum of 37 using only integers that have a units digit of 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = 0, k = 7\n**Output:** 0\n**Explanation:** The sum of an empty set is considered 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= num <= 3000`\n* `0 <= k <= 9`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumNumbers(self, num: int, k: int) -> int:\n        if num == 0:\n            return 0\n        for i in range(1, num + 1):\n            if (t := num - k * i) >= 0 and t % 10 == 0:\n                return i\n        return -1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumNumbers(self, num: int, k: int) -> int:\n        if num == 0:\n            return 0\n        for i in range(1, num + 1):\n            if (t := num - k * i) >= 0 and t % 10 == 0:\n                return i\n        return -1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    num = random.randint(0, 3001)\n    k = random.randint(0, 10)\n    expected_result = solution.minimumNumbers(num, k)\n\n    return num, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumNumbers(num, k) == expected_result\n        print(f\"assert solution.minimumNumbers({num}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumNumbers({num}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumNumbers(1618, 2) == 4\nassert solution.minimumNumbers(634, 5) == -1\nassert solution.minimumNumbers(37, 6) == -1\nassert solution.minimumNumbers(2671, 7) == 3\nassert solution.minimumNumbers(2251, 8) == -1\nassert solution.minimumNumbers(719, 1) == 9\nassert solution.minimumNumbers(651, 0) == -1\nassert solution.minimumNumbers(1081, 5) == -1\nassert solution.minimumNumbers(2197, 7) == 1\nassert solution.minimumNumbers(2346, 9) == 4\nassert solution.minimumNumbers(687, 2) == -1\nassert solution.minimumNumbers(2668, 10) == -1\nassert solution.minimumNumbers(543, 8) == -1\nassert solution.minimumNumbers(171, 5) == -1\nassert solution.minimumNumbers(1286, 3) == 2\nassert solution.minimumNumbers(2189, 5) == -1\nassert solution.minimumNumbers(1514, 0) == -1\nassert solution.minimumNumbers(1447, 1) == 7\nassert solution.minimumNumbers(1388, 7) == 4\nassert solution.minimumNumbers(1193, 1) == 3\nassert solution.minimumNumbers(2291, 10) == -1\nassert solution.minimumNumbers(2576, 6) == 1\nassert solution.minimumNumbers(449, 2) == -1\nassert solution.minimumNumbers(83, 2) == -1\nassert solution.minimumNumbers(2740, 1) == 10\nassert solution.minimumNumbers(354, 0) == -1\nassert solution.minimumNumbers(865, 4) == -1\nassert solution.minimumNumbers(1050, 3) == 10\nassert solution.minimumNumbers(1132, 10) == -1\nassert solution.minimumNumbers(1254, 1) == 4\nassert solution.minimumNumbers(2434, 10) == -1\nassert solution.minimumNumbers(368, 6) == 3\nassert solution.minimumNumbers(491, 10) == -1\nassert solution.minimumNumbers(2443, 2) == -1\nassert solution.minimumNumbers(789, 2) == -1\nassert solution.minimumNumbers(1966, 2) == 3\nassert solution.minimumNumbers(1950, 4) == 5\nassert solution.minimumNumbers(1973, 7) == 9\nassert solution.minimumNumbers(1702, 6) == 2\nassert solution.minimumNumbers(1442, 8) == 4\nassert solution.minimumNumbers(1475, 0) == -1\nassert solution.minimumNumbers(46, 10) == -1\nassert solution.minimumNumbers(2483, 4) == -1\nassert solution.minimumNumbers(2034, 3) == 8\nassert solution.minimumNumbers(546, 6) == 1\nassert solution.minimumNumbers(1565, 7) == 5\nassert solution.minimumNumbers(122, 7) == 6\nassert solution.minimumNumbers(324, 9) == 6\nassert solution.minimumNumbers(1418, 9) == 2\nassert solution.minimumNumbers(2393, 3) == 1\nassert solution.minimumNumbers(1582, 0) == -1\nassert solution.minimumNumbers(2989, 4) == -1\nassert solution.minimumNumbers(1011, 6) == -1\nassert solution.minimumNumbers(1351, 6) == -1\nassert solution.minimumNumbers(26, 8) == 2\nassert solution.minimumNumbers(1481, 9) == 9\nassert solution.minimumNumbers(2046, 1) == 6\nassert solution.minimumNumbers(459, 4) == -1\nassert solution.minimumNumbers(2732, 10) == -1\nassert solution.minimumNumbers(2798, 9) == 2\nassert solution.minimumNumbers(778, 1) == 8\nassert solution.minimumNumbers(1230, 8) == 5\nassert solution.minimumNumbers(2858, 1) == 8\nassert solution.minimumNumbers(2050, 10) == 1\nassert solution.minimumNumbers(530, 1) == 10\nassert solution.minimumNumbers(763, 6) == -1\nassert solution.minimumNumbers(778, 5) == -1\nassert solution.minimumNumbers(764, 7) == 2\nassert solution.minimumNumbers(1819, 5) == -1\nassert solution.minimumNumbers(693, 0) == -1\nassert solution.minimumNumbers(373, 4) == -1\nassert solution.minimumNumbers(350, 3) == 10\nassert solution.minimumNumbers(1179, 3) == 3\nassert solution.minimumNumbers(734, 8) == 3\nassert solution.minimumNumbers(339, 4) == -1\nassert solution.minimumNumbers(2723, 10) == -1\nassert solution.minimumNumbers(952, 10) == -1\nassert solution.minimumNumbers(2321, 4) == -1\nassert solution.minimumNumbers(2240, 3) == 10\nassert solution.minimumNumbers(2073, 3) == 1\nassert solution.minimumNumbers(2657, 2) == -1\nassert solution.minimumNumbers(2455, 10) == -1\nassert solution.minimumNumbers(54, 3) == 8\nassert solution.minimumNumbers(1862, 4) == 3\nassert solution.minimumNumbers(1377, 4) == -1\nassert solution.minimumNumbers(2230, 4) == 5\nassert solution.minimumNumbers(2402, 10) == -1\nassert solution.minimumNumbers(2553, 9) == 7\nassert solution.minimumNumbers(2952, 0) == -1\nassert solution.minimumNumbers(1895, 7) == 5\nassert solution.minimumNumbers(1451, 5) == -1\nassert solution.minimumNumbers(304, 9) == 6\nassert solution.minimumNumbers(1018, 8) == 1\nassert solution.minimumNumbers(1701, 0) == -1\nassert solution.minimumNumbers(454, 5) == -1\nassert solution.minimumNumbers(782, 3) == 4\nassert solution.minimumNumbers(2262, 2) == 1\nassert solution.minimumNumbers(2572, 8) == 4\nassert solution.minimumNumbers(2513, 1) == 3\nassert solution.minimumNumbers(361, 6) == -1",
  "inefficient_solution": "class Solution:\n    def minimumNumbers(self, num: int, k: int) -> int:\n        if num == 0:\n            return 0\n        mem = {0: 0, 1: -1}\n        for i in range(2, num + 1):\n            mem[i] = -1\n            for j in range(1, i + 1):\n                if (t := num - k * j) >= 0 and t % 10 == 0:\n                    mem[i] = j\n                    break\n        return mem[num]",
  "is_python": true
}