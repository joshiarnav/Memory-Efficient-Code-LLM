{
  "problem_idx": 2713,
  "task_name": "Maximum Strictly Increasing Cells in a Matrix",
  "markdown_description": "\nGiven a **1-indexed**\u00a0`m x n` integer matrix `mat`, you can select any cell in the matrix as your **starting cell**.\n\n\nFrom the starting cell, you can move to any other cell **in the** **same row or column**, but only if the value of the destination cell is **strictly greater** than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.\n\n\nYour task is to find the **maximum number of cells** that you can visit in the matrix by starting from some cell.\n\n\nReturn *an integer denoting the maximum number of cells that can be visited.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2713.Maximum%20Strictly%20Increasing%20Cells%20in%20a%20Matrix/images/diag1drawio.png)**\n\n\n\n```\n\n**Input:** mat = [[3,1],[3,4]]\n**Output:** 2\n**Explanation:** The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2. \n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2713.Maximum%20Strictly%20Increasing%20Cells%20in%20a%20Matrix/images/diag3drawio.png)**\n\n\n\n```\n\n**Input:** mat = [[1,1],[1,1]]\n**Output:** 1\n**Explanation:** Since the cells must be strictly increasing, we can only visit one cell in this example. \n\n```\n\n**Example 3:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2713.Maximum%20Strictly%20Increasing%20Cells%20in%20a%20Matrix/images/diag4drawio.png)**\n\n\n\n```\n\n**Input:** mat = [[3,1,6],[-9,5,7]]\n**Output:** 4\n**Explanation:** The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == mat.length`\n* `n == mat[i].length`\n* `1 <= m, n <= 105`\n* `1 <= m * n <= 105`\n* `-105\u00a0<= mat[i][j] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxIncreasingCells(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        g = defaultdict(list)\n        for i in range(m):\n            for j in range(n):\n                g[mat[i][j]].append((i, j))\n        rowMax = [0] * m\n        colMax = [0] * n\n        ans = 0\n        for _, pos in sorted(g.items()):\n            mx = []\n            for i, j in pos:\n                mx.append(1 + max(rowMax[i], colMax[j]))\n                ans = max(ans, mx[-1])\n            for k, (i, j) in enumerate(pos):\n                rowMax[i] = max(rowMax[i], mx[k])\n                colMax[j] = max(colMax[j], mx[k])\n        return ans\n",
  "test_case_generator": "\nimport random\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random matrix dimensions\n    m = random.randint(1, 5)\n    n = random.randint(1, 5)\n\n    # Generate random matrix with values between -10^5 and 10^5\n    mat = [[random.randint(-10**5, 10**5) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxIncreasingCells(mat)\n\n    return mat, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        mat, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxIncreasingCells(mat) == expected_result\n        test_case_generator_results.append(f\"assert solution.maxIncreasingCells({mat}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxIncreasingCells([[-22213, -56788, -25257], [11110, -56073, 54580], [-65926, -4974, 69841], [4702, -73123, 58749]]) == 9\nassert solution.maxIncreasingCells([[87947], [70243], [25532], [-82619]]) == 4\nassert solution.maxIncreasingCells([[-86665], [57009], [-55848]]) == 3\nassert solution.maxIncreasingCells([[64220, -60675, -34819, 77849], [-51384, 66321, 98148, 93379], [71924, -40411, 11200, -31874], [19088, -29043, 86277, -5620], [-28707, -77045, 78371, -32515]]) == 10\nassert solution.maxIncreasingCells([[-80372], [-16667], [-33519], [-82952], [81557]]) == 5\nassert solution.maxIncreasingCells([[-29138], [21788], [27571]]) == 3\nassert solution.maxIncreasingCells([[-57823, -88950], [-13066, 43338], [26226, -65300], [74845, -40324], [73902, 22197]]) == 6\nassert solution.maxIncreasingCells([[-69431], [-58067], [39719], [-7577]]) == 4\nassert solution.maxIncreasingCells([[87948, 36414], [-34008, -66281], [79556, 4551], [-70337, -51247]]) == 5\nassert solution.maxIncreasingCells([[-71835, -16974, 94617], [97053, -15912, 33374], [42792, 48002, -21800]]) == 5\nassert solution.maxIncreasingCells([[-33402, -78363, 43793, -60360, 74403]]) == 5\nassert solution.maxIncreasingCells([[43544, -8641, 92443], [48170, 31870, 4405], [-34684, -63332, 629], [6883, -23347, -35542], [84332, -54171, 64277]]) == 7\nassert solution.maxIncreasingCells([[-36248, 95474, -41621, 73480], [75682, -80432, 6720, -90773], [29348, -79351, 53667, 22557], [34816, -72230, -69592, -4246]]) == 10\nassert solution.maxIncreasingCells([[93842, 36546, 93390, -7657, -84564]]) == 5\nassert solution.maxIncreasingCells([[-14722]]) == 1\nassert solution.maxIncreasingCells([[-7074, 62580, 56222, 76833], [-48430, 24401, -58676, 44318], [-14041, -6437, 83145, 1194]]) == 7\nassert solution.maxIncreasingCells([[-70531, -99874, 44548], [78659, 69142, 20965], [-30978, 24604, 23719]]) == 7\nassert solution.maxIncreasingCells([[-38609], [-51511], [-89843]]) == 3\nassert solution.maxIncreasingCells([[86274], [85560], [-71078]]) == 3\nassert solution.maxIncreasingCells([[-19836, -20098, -85491, -42401, -99438], [-72169, -90924, -84224, 55406, -66039], [-16259, -88563, -64050, 87595, 98579]]) == 8\nassert solution.maxIncreasingCells([[-87501, 44575, 14468, 10639], [92802, -25060, 41380, 88436]]) == 6\nassert solution.maxIncreasingCells([[91886, -78403, -21949, 67688]]) == 4\nassert solution.maxIncreasingCells([[-39951], [-44622], [83078], [82529]]) == 4\nassert solution.maxIncreasingCells([[25124, 26262, 98475], [20926, -78922, 90577], [-10707, 81542, 65439], [11540, -64097, -74262]]) == 7\nassert solution.maxIncreasingCells([[-80302, 93081], [-34126, -71010], [-26941, -15331]]) == 5\nassert solution.maxIncreasingCells([[-71937, -29972, -41223, 86029, 52560], [-36002, 14061, -18420, -26415, 46695], [25052, -82190, -86510, -5851, -987], [-65297, 17963, 57030, 15513, -27369]]) == 9\nassert solution.maxIncreasingCells([[27924, 98376, -98166, -12169, 32755], [-14261, -6545, -61389, -79131, -62265], [-23514, 45276, 18127, 78322, 73493], [32358, -72298, 55078, 94513, 93223]]) == 9\nassert solution.maxIncreasingCells([[83798, 87171], [-51940, -9864], [-9615, 87164], [-58608, 76148]]) == 6\nassert solution.maxIncreasingCells([[83027, -81684], [2153, -70066], [-63207, 32959]]) == 4\nassert solution.maxIncreasingCells([[5793, 53213, 19397, 53846, 50921], [66353, -60319, -28298, 96376, -67798], [24550, 80756, 70682, 37596, -12858], [-46733, 16409, 34634, 50467, -97438], [-23960, -14560, -81359, 30942, -89909]]) == 10\nassert solution.maxIncreasingCells([[66551, 32560], [49954, -45056], [58069, -88199]]) == 5\nassert solution.maxIncreasingCells([[94384, 54326, 44786], [76776, 66119, -87499], [-37833, 95265, -95706], [20752, 72903, 10283]]) == 8\nassert solution.maxIncreasingCells([[-8007, 66951]]) == 2\nassert solution.maxIncreasingCells([[-13410, -71584, 76389, 28983], [-56538, 13136, 50829, -39427], [94183, -72193, 89400, 21390]]) == 7\nassert solution.maxIncreasingCells([[15783, 49800, 91400], [96102, -3407, -76190]]) == 4\nassert solution.maxIncreasingCells([[63020, 53021, 18335, 31256, -99878]]) == 5\nassert solution.maxIncreasingCells([[-10596], [-76063]]) == 2\nassert solution.maxIncreasingCells([[-69585, 3129, -60967, -16955], [-42748, 92924, -21960, 34600], [10295, 95227, 27620, -39354]]) == 6\nassert solution.maxIncreasingCells([[49054], [-22866], [-39401]]) == 3\nassert solution.maxIncreasingCells([[-9118], [-16580]]) == 2\nassert solution.maxIncreasingCells([[63773, 11673, -42204, 29710], [4160, 26689, -15969, -48038], [-84362, 47678, -85571, -54233], [-5237, -17449, -10684, -2643], [-83981, -20498, 92615, -50627]]) == 11\nassert solution.maxIncreasingCells([[81312], [-95155], [-73698], [-52068], [98610]]) == 5\nassert solution.maxIncreasingCells([[84862, 5920, -89199, -69716], [-59862, 30244, 25438, 35900], [-93501, -22902, -56956, -35063], [-37729, -8983, -21211, 67484]]) == 9\nassert solution.maxIncreasingCells([[81753, -34185, -98295, -99497], [2263, -78799, 879, 83169]]) == 5\nassert solution.maxIncreasingCells([[-89067, -46633, -16448, 48713, 98164]]) == 5\nassert solution.maxIncreasingCells([[-23108, 23506, 64058, 80566], [36805, -58673, 11633, -66161], [47310, -31962, 56053, 14534], [-18497, -15839, -19183, 54772]]) == 8\nassert solution.maxIncreasingCells([[3244, 84451, 1255], [-1395, -85332, -36057], [-57536, 6972, -1847]]) == 6\nassert solution.maxIncreasingCells([[-39950, 42336], [86886, -99959], [-77427, -50948], [-13528, 84142], [-32815, -8696]]) == 6\nassert solution.maxIncreasingCells([[78451, 1545, -3778, -92121, 93598], [-12938, -80061, 60613, 36923, 60110]]) == 5\nassert solution.maxIncreasingCells([[-73406], [48208], [99215]]) == 3\nassert solution.maxIncreasingCells([[98474, -5973], [-49285, -70184], [76569, -59149], [46711, 37893]]) == 7\nassert solution.maxIncreasingCells([[89702], [-41759], [-10907], [-88197], [-49431]]) == 5\nassert solution.maxIncreasingCells([[-54427, 88451, 46633], [26731, -83107, -24124], [13958, -7969, -70806]]) == 4\nassert solution.maxIncreasingCells([[10140], [-60169], [-36576], [-33477], [83902]]) == 5\nassert solution.maxIncreasingCells([[85738, -55740, -41814], [-29693, 60506, -62195], [34631, -69436, 45474]]) == 4\nassert solution.maxIncreasingCells([[-95112, 3050, 24992, -6598], [3536, 96758, 49309, -16231], [62814, -7146, -64661, 1277], [-41951, 81354, 5653, -90111]]) == 7\nassert solution.maxIncreasingCells([[69411, 58989, 79811, -68565]]) == 4\nassert solution.maxIncreasingCells([[21209, 67255, -61089, -79372], [-60493, -53481, 2592, -17132], [-43571, -84187, -12878, -39472], [75591, -58548, -59216, 95965]]) == 7\nassert solution.maxIncreasingCells([[55978, -52731, 1700, 63115], [49301, 83598, 39269, -37724], [51800, 22674, -97238, -78346], [29730, -66828, -41481, -99021], [5496, -94847, 26994, -70151]]) == 10\nassert solution.maxIncreasingCells([[15643]]) == 1\nassert solution.maxIncreasingCells([[-85752, -8479, 96712, -65126], [-1420, -90720, 82673, 43418], [-62332, -64251, -15377, -17776], [-89360, 95986, 19717, -76468]]) == 8\nassert solution.maxIncreasingCells([[-58774, -69894, 41508, -68678], [91162, -49033, 47447, -56089]]) == 6\nassert solution.maxIncreasingCells([[-41870, 44279, -15637], [42526, 12842, 15470], [-2577, 54538, -1876], [90166, 9589, -22767]]) == 6\nassert solution.maxIncreasingCells([[22882, -17374, -36966, 90081]]) == 4\nassert solution.maxIncreasingCells([[-21627, -41704, 26994, 27862, -43141], [62158, -12343, -39761, 49011, -77013], [-32964, 12471, -74384, 54920, 36309], [-82843, -9531, -73190, -83901, 1084], [-43425, -17887, 94765, 49017, 28806]]) == 10\nassert solution.maxIncreasingCells([[31161], [-43222]]) == 2\nassert solution.maxIncreasingCells([[59466], [46584], [-59680], [35810], [-30351]]) == 5\nassert solution.maxIncreasingCells([[80243, 76515, -28776, -86800, 10504], [-42849, 88136, -915, -88362, -24655], [86834, -66319, 79840, -21134, 3946]]) == 8\nassert solution.maxIncreasingCells([[-74599, -53842, -73193]]) == 3\nassert solution.maxIncreasingCells([[-44487, 7353, -63601, -86451, 5937], [-50935, 19631, 3400, -53137, -47181], [95168, 55243, -71082, -77999, -6844], [30977, -78885, 62763, 50923, 63003], [91528, -94190, 1965, 26799, -1458]]) == 12\nassert solution.maxIncreasingCells([[-27408, -47462, 1403, -36679], [-47301, -63773, 47821, -55763], [83040, -9754, -93489, -93223]]) == 7\nassert solution.maxIncreasingCells([[-76038], [46956], [7777]]) == 3\nassert solution.maxIncreasingCells([[75459, 59868, -90735], [92827, 58611, 27121]]) == 6\nassert solution.maxIncreasingCells([[2582, 8564, -84421, -98096], [71976, 64697, 79346, -81647], [33150, -85001, -69278, 1199], [10765, 51533, -82286, 52020]]) == 8\nassert solution.maxIncreasingCells([[-14072, -3081], [-7028, -6362], [37178, -22107], [703, 72934], [-84417, -98544]]) == 7\nassert solution.maxIncreasingCells([[66834, 56584, -53475], [-15829, -5109, 20648], [35017, 37472, 42705], [77138, 72508, -27751]]) == 6\nassert solution.maxIncreasingCells([[-1144], [-81602], [31343]]) == 3\nassert solution.maxIncreasingCells([[89274, -21153], [84167, 32338], [53611, 62749]]) == 4\nassert solution.maxIncreasingCells([[-70347, 83676, 92857, -42464], [-94505, -57832, -49637, -52235]]) == 6\nassert solution.maxIncreasingCells([[26649, 81582, 46175]]) == 3\nassert solution.maxIncreasingCells([[41789, -11118], [9718, 7695], [-51296, 73593], [77482, 81059]]) == 6\nassert solution.maxIncreasingCells([[42271], [65595], [-35990], [-28658], [-38124]]) == 5\nassert solution.maxIncreasingCells([[11036, 16352], [5531, -98627], [2435, -76175], [-90896, 72570], [-59296, 32524]]) == 8\nassert solution.maxIncreasingCells([[-26511, -37494]]) == 2\nassert solution.maxIncreasingCells([[-26901, 7593, -73764, 77267, 89111], [-41360, -70732, -49130, -24175, -71684], [-49119, 18529, -84881, 65296, -93406]]) == 11\nassert solution.maxIncreasingCells([[53482, 14832, -39773, -69669, 87749], [83743, -7273, 43395, 23810, 52569], [-88403, 88153, 90880, 1839, 76800], [5694, -85241, 80221, 24386, -75232]]) == 8\nassert solution.maxIncreasingCells([[-55178, 80097], [-33419, 95930]]) == 3\nassert solution.maxIncreasingCells([[8141], [-77560], [59537], [-81889], [28783]]) == 5\nassert solution.maxIncreasingCells([[46045, 11582, -36640, 83966, 70624]]) == 5\nassert solution.maxIncreasingCells([[63865, 94495]]) == 2\nassert solution.maxIncreasingCells([[-7375]]) == 1\nassert solution.maxIncreasingCells([[14365, 23700], [-6645, 47375], [25247, -3535]]) == 4\nassert solution.maxIncreasingCells([[13545], [-97988]]) == 2\nassert solution.maxIncreasingCells([[-59114, 74665, -64205, -74627]]) == 4\nassert solution.maxIncreasingCells([[43109, -70725, 26889, -68800], [-92840, 32995, -41481, -53970]]) == 6\nassert solution.maxIncreasingCells([[4742, 11503, 71198, 61690], [20083, -43540, 58728, -46225], [86193, 44537, -32810, -62648]]) == 6\nassert solution.maxIncreasingCells([[67152, 1868, -87318, 72073, 26926]]) == 5\nassert solution.maxIncreasingCells([[57620, -29970, -16847, 94904]]) == 4\nassert solution.maxIncreasingCells([[-28358, 79956], [-75365, -75296], [99559, 90550]]) == 5\nassert solution.maxIncreasingCells([[34506, -4479, 86403], [-26040, 56925, 7537]]) == 3",
  "inefficient_solution": "class Solution:\n    def maxIncreasingCells(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        g = defaultdict(list)\n        for i in range(m):\n            for j in range(n):\n                g[mat[i][j]].append((i, j))\n        rowMax = [[0] * n for _ in range(m)]\n        colMax = [[0] * n for _ in range(m)]\n        ans = 0\n        for _, pos in sorted(g.items()):\n            mx = [[0] * n for _ in range(m)]\n            for i, j in pos:\n                for x in range(m):\n                    for y in range(n):\n                        if mat[x][y] < mat[i][j] and (x, y) in g:\n                            mx[x][y] = 1 + max(rowMax[x][y], colMax[x][y])\n                ans = max(ans, max(max(row) for row in mx))\n            for k, (i, j) in enumerate(pos):\n                rowMax[i][j] = max(rowMax[i][j], max(max(row) for row in mx))\n                colMax[i][j] = max(colMax[i][j], max(row[j] for row in mx))\n        return ans",
  "is_python": true
}