{
  "problem_idx": 1483,
  "task_name": "Kth Ancestor of a Tree Node",
  "markdown_description": "\nYou are given a tree with `n` nodes numbered from `0` to `n - 1` in the form of a parent array `parent` where `parent[i]` is the parent of `ith` node. The root of the tree is node `0`. Find the `kth` ancestor of a given node.\n\n\nThe `kth` ancestor of a tree node is the `kth` node in the path from that node to the root node.\n\n\nImplement the `TreeAncestor` class:\n\n\n* `TreeAncestor(int n, int[] parent)` Initializes the object with the number of nodes in the tree and the parent array.\n* `int getKthAncestor(int node, int k)` return the `kth` ancestor of the given node `node`. If there is no such ancestor, return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1483.Kth%20Ancestor%20of%20a%20Tree%20Node/images/1528_ex1.png)\n\n```\n\n**Input**\n[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]\n**Output**\n[null, 1, 0, -1]\n\n**Explanation**\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= n <= 5 * 104`\n* `parent.length == n`\n* `parent[0] == -1`\n* `0 <= parent[i] < n` for all `0 < i < n`\n* `0 <= node < n`\n* There will be at most `5 * 104` queries.\n\n\n",
  "canonical_solution": "class TreeAncestor:\n    def __init__(self, n: int, parent: List[int]):\n        self.p = [[-1] * 18 for _ in range(n)]\n        for i, fa in enumerate(parent):\n            self.p[i][0] = fa\n        for i in range(n):\n            for j in range(1, 18):\n                if self.p[i][j - 1] == -1:\n                    continue\n                self.p[i][j] = self.p[self.p[i][j - 1]][j - 1]\n\n    def getKthAncestor(self, node: int, k: int) -> int:\n        for i in range(17, -1, -1):\n            if k >> i & 1:\n                node = self.p[node][i]\n                if node == -1:\n                    break\n        return node\n\n\n# Your TreeAncestor object will be instantiated and called as such:\n# obj = TreeAncestor(n, parent)\n# param_1 = obj.getKthAncestor(node,k)\n",
  "test_case_generator": "\nimport random\n\nclass TreeAncestorGenerator:\n    def __init__(self, n):\n        self.n = n\n        self.parent = [-1]  # Initialize the parent array with -1 as the root node\n        self.generate_parent_array()  # Generate the parent array\n\n    def generate_parent_array(self):\n        for i in range(1, self.n):\n            parent = random.randint(0, i - 1)  # Generate a random parent for the current node\n            self.parent.append(parent)\n\n    def generate_test_case(self):\n        # Generate a random node and k values\n        node = random.randint(0, self.n - 1)\n        k = random.randint(1, self.n)\n\n        return node, k\n\n    def generate_expected_result(self, node, k):\n        ancestor = node\n        for i in range(k):\n            if ancestor == -1:\n                break\n            ancestor = self.parent[ancestor]\n        return ancestor\n\n    def generate_test_case_and_expected_result(self):\n        node, k = self.generate_test_case()\n        expected_result = self.generate_expected_result(node, k)\n        return node, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        generator = TreeAncestorGenerator(10)\n        node, k, expected_result = generator.generate_test_case_and_expected_result()\n        test_case_generator_results.append(f\"assert solution.getKthAncestor({node}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getKthAncestor(5, 4) == -1\nassert solution.getKthAncestor(5, 5) == -1\nassert solution.getKthAncestor(0, 9) == -1\nassert solution.getKthAncestor(7, 9) == -1\nassert solution.getKthAncestor(5, 9) == -1\nassert solution.getKthAncestor(9, 4) == -1\nassert solution.getKthAncestor(5, 6) == -1\nassert solution.getKthAncestor(1, 3) == -1\nassert solution.getKthAncestor(6, 8) == -1\nassert solution.getKthAncestor(9, 2) == 1\nassert solution.getKthAncestor(8, 5) == -1\nassert solution.getKthAncestor(0, 7) == -1\nassert solution.getKthAncestor(2, 10) == -1\nassert solution.getKthAncestor(9, 2) == 1\nassert solution.getKthAncestor(3, 9) == -1\nassert solution.getKthAncestor(1, 10) == -1\nassert solution.getKthAncestor(1, 9) == -1\nassert solution.getKthAncestor(4, 5) == -1\nassert solution.getKthAncestor(3, 2) == -1\nassert solution.getKthAncestor(1, 4) == -1\nassert solution.getKthAncestor(0, 6) == -1\nassert solution.getKthAncestor(9, 6) == -1\nassert solution.getKthAncestor(2, 2) == -1\nassert solution.getKthAncestor(3, 4) == -1\nassert solution.getKthAncestor(6, 1) == 4\nassert solution.getKthAncestor(1, 3) == -1\nassert solution.getKthAncestor(9, 10) == -1\nassert solution.getKthAncestor(8, 5) == -1\nassert solution.getKthAncestor(3, 7) == -1\nassert solution.getKthAncestor(4, 8) == -1\nassert solution.getKthAncestor(3, 6) == -1\nassert solution.getKthAncestor(5, 9) == -1\nassert solution.getKthAncestor(2, 7) == -1\nassert solution.getKthAncestor(9, 10) == -1\nassert solution.getKthAncestor(2, 3) == -1\nassert solution.getKthAncestor(2, 9) == -1\nassert solution.getKthAncestor(1, 5) == -1\nassert solution.getKthAncestor(4, 6) == -1\nassert solution.getKthAncestor(9, 5) == -1\nassert solution.getKthAncestor(8, 8) == -1\nassert solution.getKthAncestor(9, 4) == 0\nassert solution.getKthAncestor(1, 2) == -1\nassert solution.getKthAncestor(0, 8) == -1\nassert solution.getKthAncestor(8, 10) == -1\nassert solution.getKthAncestor(8, 9) == -1\nassert solution.getKthAncestor(9, 4) == 0\nassert solution.getKthAncestor(8, 7) == -1\nassert solution.getKthAncestor(3, 1) == 1\nassert solution.getKthAncestor(7, 2) == 0\nassert solution.getKthAncestor(0, 10) == -1\nassert solution.getKthAncestor(2, 8) == -1\nassert solution.getKthAncestor(1, 7) == -1\nassert solution.getKthAncestor(9, 6) == -1\nassert solution.getKthAncestor(5, 10) == -1\nassert solution.getKthAncestor(9, 2) == 2\nassert solution.getKthAncestor(7, 3) == 0\nassert solution.getKthAncestor(8, 8) == -1\nassert solution.getKthAncestor(1, 3) == -1\nassert solution.getKthAncestor(6, 10) == -1\nassert solution.getKthAncestor(6, 3) == -1\nassert solution.getKthAncestor(8, 8) == -1\nassert solution.getKthAncestor(9, 10) == -1\nassert solution.getKthAncestor(9, 10) == -1\nassert solution.getKthAncestor(7, 9) == -1\nassert solution.getKthAncestor(2, 4) == -1\nassert solution.getKthAncestor(9, 4) == -1\nassert solution.getKthAncestor(9, 10) == -1\nassert solution.getKthAncestor(1, 3) == -1\nassert solution.getKthAncestor(7, 7) == -1\nassert solution.getKthAncestor(2, 4) == -1\nassert solution.getKthAncestor(2, 2) == -1\nassert solution.getKthAncestor(1, 5) == -1\nassert solution.getKthAncestor(9, 8) == -1\nassert solution.getKthAncestor(3, 9) == -1\nassert solution.getKthAncestor(5, 7) == -1\nassert solution.getKthAncestor(4, 2) == -1\nassert solution.getKthAncestor(7, 4) == 0\nassert solution.getKthAncestor(1, 8) == -1\nassert solution.getKthAncestor(2, 4) == -1\nassert solution.getKthAncestor(6, 10) == -1\nassert solution.getKthAncestor(8, 10) == -1\nassert solution.getKthAncestor(7, 4) == -1\nassert solution.getKthAncestor(3, 1) == 2\nassert solution.getKthAncestor(8, 9) == -1\nassert solution.getKthAncestor(6, 7) == -1\nassert solution.getKthAncestor(4, 1) == 0\nassert solution.getKthAncestor(1, 8) == -1\nassert solution.getKthAncestor(6, 6) == -1\nassert solution.getKthAncestor(7, 8) == -1\nassert solution.getKthAncestor(4, 6) == -1\nassert solution.getKthAncestor(0, 7) == -1\nassert solution.getKthAncestor(4, 3) == -1\nassert solution.getKthAncestor(5, 1) == 4\nassert solution.getKthAncestor(0, 4) == -1\nassert solution.getKthAncestor(1, 6) == -1\nassert solution.getKthAncestor(9, 10) == -1\nassert solution.getKthAncestor(0, 6) == -1\nassert solution.getKthAncestor(2, 6) == -1\nassert solution.getKthAncestor(0, 4) == -1\nassert solution.getKthAncestor(5, 3) == -1",
  "inefficient_solution": "class TreeAncestor:\n    def __init__(self, n: int, parent: List[int]):\n        self.p = [[-1] * (n * 10) for _ in range(n)]\n        for i, fa in enumerate(parent):\n            self.p[i][0] = fa\n        for i in range(n):\n            for j in range(1, n * 10):\n                if j % 2 == 1:\n                    if self.p[i][j - 1] == -1:\n                        continue\n                    self.p[i][j] = self.p[self.p[i][j - 1]][j // 2]\n                else:\n                    self.p[i][j] = self.p[i][j - 2]\n\n    def getKthAncestor(self, node: int, k: int) -> int:\n        for i in range(k * 10 - 1, -1, -1):\n            if i % 2 == 1:\n                node = self.p[node][i]\n                if node == -1:\n                    break\n        return node",
  "is_python": true
}