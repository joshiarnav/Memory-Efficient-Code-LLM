{
  "problem_idx": 698,
  "task_name": "Partition to K Equal Sum Subsets",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, return `true` if it is possible to divide this array into `k` non-empty subsets whose sums are all equal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,3,5,2,1], k = 4\n**Output:** true\n**Explanation:** It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4], k = 3\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 16`\n* `1 <= nums[i] <= 104`\n* The frequency of each element is in the range `[1, 4]`.\n\n\n",
  "canonical_solution": "class Solution:\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                cur[j] += nums[i]\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        nums.sort(reverse=True)\n        return dfs(0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def canPartitionKSubsets(self, nums, k):\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                cur[j] += nums[i]\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        nums.sort(reverse=True)\n        return dfs(0)\n    \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 10001), random.randint(1, 16))\n    \n    # Generate a random k value\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.canPartitionKSubsets(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.canPartitionKSubsets(nums, k) == expected_result\n        print(f\"assert solution.canPartitionKSubsets({nums, k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.canPartitionKSubsets({nums, k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.canPartitionKSubsets(([3694, 7736, 3412, 3122, 1868, 808, 8778, 9688], 4)) == False\nassert solution.canPartitionKSubsets(([9469, 7562, 6204, 4647, 3686, 2745, 349], 3)) == False\nassert solution.canPartitionKSubsets(([7433, 9118, 6258, 6414, 9817, 3194, 9904, 8822], 7)) == False\nassert solution.canPartitionKSubsets(([5618, 9525, 154, 2416], 4)) == False\nassert solution.canPartitionKSubsets(([9980, 9461, 9173, 6328, 5650, 4518, 4433, 3803, 3146, 3017, 2161, 1047, 962], 7)) == False\nassert solution.canPartitionKSubsets(([9600, 4931, 2961, 3849, 5975, 1676, 6277, 1549, 803, 8559], 7)) == False\nassert solution.canPartitionKSubsets(([9937, 9455, 9250, 8969, 7743, 6847, 5120, 5022, 2299, 1661, 1540, 53], 4)) == False\nassert solution.canPartitionKSubsets(([2486, 390], 1)) == True\nassert solution.canPartitionKSubsets(([2239, 9890, 4838, 4185, 8107, 3464, 1237, 9763, 6981, 9518, 3165], 11)) == False\nassert solution.canPartitionKSubsets(([8030, 5241, 556], 1)) == True\nassert solution.canPartitionKSubsets(([9320, 5405, 5560, 2230, 8778, 6153, 4680, 6634, 2630, 7287], 7)) == False\nassert solution.canPartitionKSubsets(([9312, 5874, 5405, 5205, 3837, 2966, 802, 220], 1)) == True\nassert solution.canPartitionKSubsets(([5737, 8857, 95, 9561, 2391, 867, 7094, 7059, 8057], 9)) == False\nassert solution.canPartitionKSubsets(([2809, 9848, 3901, 3832, 7042, 7198, 1853, 9398, 559, 5738, 884], 11)) == False\nassert solution.canPartitionKSubsets(([5085, 2063, 1788, 4519], 2)) == False\nassert solution.canPartitionKSubsets(([7377, 5864, 5203], 3)) == False\nassert solution.canPartitionKSubsets(([9900, 8285, 7980, 4509, 3619, 2538, 2190, 128], 1)) == True\nassert solution.canPartitionKSubsets(([6692, 4750, 3044, 2406, 528, 488], 2)) == False\nassert solution.canPartitionKSubsets(([9043, 8150, 1568], 1)) == True\nassert solution.canPartitionKSubsets(([9530, 9380, 8193, 8007, 7888, 7545, 7155, 5816, 5766, 4900, 3557, 3402, 3159], 1)) == True\nassert solution.canPartitionKSubsets(([2582, 3255, 9327, 2165, 6326, 2480, 6708, 1081, 3814], 7)) == False\nassert solution.canPartitionKSubsets(([7136, 4352, 5438, 5556, 167, 4253, 3682, 4292, 482, 1754], 6)) == False\nassert solution.canPartitionKSubsets(([9221, 8927, 7724, 6507, 5901, 4640, 1738], 1)) == True\nassert solution.canPartitionKSubsets(([6319, 215, 9919, 191, 6746, 3142, 6640, 3115, 2818, 2501, 2592, 3041, 2635, 7222, 6864, 6848], 9)) == False\nassert solution.canPartitionKSubsets(([2365, 9114], 2)) == False\nassert solution.canPartitionKSubsets(([1908, 2758, 6706, 90], 3)) == False\nassert solution.canPartitionKSubsets(([9623, 6687, 5505, 5131, 4487, 4321, 2868, 2305, 1369, 981, 541], 6)) == False\nassert solution.canPartitionKSubsets(([6245, 9358, 7322, 574], 2)) == False\nassert solution.canPartitionKSubsets(([5506, 2913, 8685, 912, 1986, 3959, 1439, 6359, 545, 8780], 5)) == False\nassert solution.canPartitionKSubsets(([2380, 4668, 697, 852, 203, 3299, 371], 4)) == False\nassert solution.canPartitionKSubsets(([3147, 9837, 9711, 3338], 4)) == False\nassert solution.canPartitionKSubsets(([4651, 5615, 2434, 3703], 4)) == False\nassert solution.canPartitionKSubsets(([2807, 4861, 5200, 4447, 3207, 2987], 3)) == False\nassert solution.canPartitionKSubsets(([2102, 9546, 9671], 3)) == False\nassert solution.canPartitionKSubsets(([5092, 5479, 2748, 637, 9485, 62], 6)) == False\nassert solution.canPartitionKSubsets(([6283, 8622, 2385, 6124, 2665, 4044, 2140, 3221, 5111], 7)) == False\nassert solution.canPartitionKSubsets(([9180, 4003, 1987, 3806, 7270, 4771, 7598, 3033, 8061, 2808, 2027, 2202, 2784, 5344, 3728, 613], 12)) == False\nassert solution.canPartitionKSubsets(([7337, 6934, 3815, 3128, 2883, 2843, 2005], 1)) == True\nassert solution.canPartitionKSubsets(([5222, 5376, 3558, 2703, 6774, 3933, 4676, 6928, 6914, 8723, 4425, 2731, 6938, 9704, 833], 5)) == False\nassert solution.canPartitionKSubsets(([7100, 2997, 7769, 5668, 3485, 7281, 3739, 3286, 9951, 3341, 178, 7665, 8761, 2374], 3)) == False\nassert solution.canPartitionKSubsets(([9445, 8931, 8662, 8558, 8495, 3967, 3871, 2806, 2724, 2309, 2173, 1211, 973], 3)) == False\nassert solution.canPartitionKSubsets(([4822, 897, 1159, 3449, 6383, 4883, 6139, 8968, 525, 4399, 3126], 4)) == False\nassert solution.canPartitionKSubsets(([9675, 8203, 5347], 1)) == True\nassert solution.canPartitionKSubsets(([6531, 1032, 3247, 6528, 2858, 4682, 9114, 6108, 459, 1735, 2181], 10)) == False\nassert solution.canPartitionKSubsets(([9980, 8759, 7651, 3753, 2694, 2166], 1)) == True\nassert solution.canPartitionKSubsets(([5448, 2252, 8216, 5334], 3)) == False\nassert solution.canPartitionKSubsets(([6343, 6810, 380, 4398, 19, 978], 6)) == False\nassert solution.canPartitionKSubsets(([9849, 5157, 1504], 1)) == True\nassert solution.canPartitionKSubsets(([9170, 7070, 6101, 5258, 5225, 4478, 3883, 1746, 945], 7)) == False\nassert solution.canPartitionKSubsets(([2352, 6440, 3129, 9926, 4331, 5335, 5767, 6602, 7266], 7)) == False\nassert solution.canPartitionKSubsets(([490, 7791, 1886, 8777, 9692, 6397, 2711, 8805], 6)) == False\nassert solution.canPartitionKSubsets(([3364, 2983, 2470, 1869, 426], 3)) == False\nassert solution.canPartitionKSubsets(([9796, 9503, 8420, 8279, 7683, 7450, 5034, 4810, 4682, 3308, 3242, 2273, 780, 741, 670, 385], 16)) == False\nassert solution.canPartitionKSubsets(([8283, 3378, 6720, 9607, 2824, 6811, 1562, 7461, 8023, 7828, 1435], 8)) == False\nassert solution.canPartitionKSubsets(([9845, 6332, 6493, 7507, 2229, 351, 3591, 3906], 8)) == False\nassert solution.canPartitionKSubsets(([8640, 7670, 3980, 3633, 2073, 1505, 633], 1)) == True\nassert solution.canPartitionKSubsets(([6955], 1)) == True\nassert solution.canPartitionKSubsets(([7841, 2685, 1442, 1792, 8928, 888, 2683, 5495, 5953, 3468, 6527, 3416, 4132, 2119, 2920], 4)) == False\nassert solution.canPartitionKSubsets(([3130, 7169, 6898, 9657, 5810, 1848, 4688, 637, 1855, 6699, 5201, 9380, 7502], 3)) == False\nassert solution.canPartitionKSubsets(([9866, 8508, 7910, 7474, 7430, 7319, 6347, 3612, 3243, 3084, 2926, 2507, 1630, 1155], 3)) == False\nassert solution.canPartitionKSubsets(([3532], 1)) == True\nassert solution.canPartitionKSubsets(([9163, 4627, 8121, 2211, 227, 8620, 7187, 8828, 7903], 7)) == False\nassert solution.canPartitionKSubsets(([1766, 2677, 6292, 1478, 829, 5306, 4404, 7448, 946], 7)) == False\nassert solution.canPartitionKSubsets(([1934, 3059, 7125, 4933, 5198, 5539, 4984, 336, 4632, 3338, 4606, 7128, 7323, 6958, 1550, 3070], 6)) == False\nassert solution.canPartitionKSubsets(([9048, 8526, 5982, 5261, 3752, 2637, 2633], 3)) == False\nassert solution.canPartitionKSubsets(([2743, 3817, 6371, 9327, 3377, 2634, 712, 7131, 6356, 205, 2938, 6508], 4)) == False\nassert solution.canPartitionKSubsets(([7400, 1723, 3351, 9315, 3597, 5016, 9040, 8171, 5818], 2)) == False\nassert solution.canPartitionKSubsets(([2686, 2084, 2115, 9736, 8350, 6405, 8882, 9535, 849, 2210, 8931, 3842, 2075], 7)) == False\nassert solution.canPartitionKSubsets(([9773, 8184, 477], 2)) == False\nassert solution.canPartitionKSubsets(([6289, 5501, 9665, 2869, 8569, 9620, 3188, 6093, 4167], 8)) == False\nassert solution.canPartitionKSubsets(([6097, 1909, 1650, 1178, 939, 699], 2)) == False\nassert solution.canPartitionKSubsets(([9780, 9150, 8805, 8314, 6272, 3897, 51], 1)) == True\nassert solution.canPartitionKSubsets(([1819, 7254, 9884, 3626, 8038, 5688, 5131, 2016, 3471, 290, 8350, 2053, 9819], 3)) == False\nassert solution.canPartitionKSubsets(([935, 1028, 3019, 4275, 8873, 13, 9097, 8151, 3921, 3597, 9367], 10)) == False\nassert solution.canPartitionKSubsets(([5038, 6361, 3433, 7910, 7430, 3331, 8742, 9437, 7580, 6218, 3529, 5974, 6774, 3141, 2058], 9)) == False\nassert solution.canPartitionKSubsets(([5642, 4658, 5853], 2)) == False\nassert solution.canPartitionKSubsets(([4714, 6272, 9696, 5881, 5230, 2588, 810, 4865, 3551], 4)) == False\nassert solution.canPartitionKSubsets(([5020, 4393, 2809], 1)) == True\nassert solution.canPartitionKSubsets(([2324, 9860, 4083], 3)) == False\nassert solution.canPartitionKSubsets(([2381, 2625, 4693, 5439, 2605, 1632, 7795, 5102, 3994], 9)) == False\nassert solution.canPartitionKSubsets(([9256, 8728, 7603, 6491, 4887, 1606, 1008, 525], 1)) == True\nassert solution.canPartitionKSubsets(([4178, 4917, 8853, 7594, 3769, 9550, 9044, 850, 8679, 1257, 6623, 6953, 3670, 7395, 7798, 2245], 12)) == False\nassert solution.canPartitionKSubsets(([6557, 4885, 3054, 1636], 1)) == True\nassert solution.canPartitionKSubsets(([4843, 2002, 6060, 9048, 8185, 3645, 2409, 9135, 7879, 2460, 7286, 4649, 7783, 8788, 1416], 6)) == False\nassert solution.canPartitionKSubsets(([1128, 6229, 2611, 1266, 19, 70, 288, 433, 3117, 2751, 8157], 10)) == False\nassert solution.canPartitionKSubsets(([9976, 9398, 9297, 9067, 7317, 6053, 5694, 5403, 5079, 4580, 4371, 3786, 3347, 1130, 444], 2)) == True\nassert solution.canPartitionKSubsets(([5442, 4998, 4682, 3959, 3470, 1824, 1022, 503], 7)) == False\nassert solution.canPartitionKSubsets(([4350, 6023, 2055, 6319, 2601, 6731, 7984, 1765, 9978, 1484, 8142, 9341], 2)) == False\nassert solution.canPartitionKSubsets(([4831, 2541, 2431, 307], 3)) == False\nassert solution.canPartitionKSubsets(([8001, 6524, 4078, 8394, 9046, 6789, 1399, 2882, 635, 3942, 4102, 4263, 8985, 759], 10)) == False\nassert solution.canPartitionKSubsets(([9404, 8817, 8653, 7614, 6305, 5803, 5765, 5454, 5434, 2747, 1417, 975, 937, 487], 4)) == False\nassert solution.canPartitionKSubsets(([4030, 5311], 2)) == False\nassert solution.canPartitionKSubsets(([6777], 1)) == True\nassert solution.canPartitionKSubsets(([3369, 8024, 3244, 1386, 3418, 5839, 4419, 8127, 756, 1208, 1715, 509, 9212, 7639, 5283], 11)) == False\nassert solution.canPartitionKSubsets(([5414, 5687, 9496, 6960, 3785, 339, 2330, 793, 2577, 2254, 4852, 9057, 6513, 7465, 8334], 3)) == False\nassert solution.canPartitionKSubsets(([3705, 3969, 4528, 5414, 4431, 462, 6619, 5480, 5590, 7598, 493, 4095, 209], 5)) == False\nassert solution.canPartitionKSubsets(([1899, 3364, 7280, 3042, 1811, 6761], 6)) == False\nassert solution.canPartitionKSubsets(([4404, 6715, 1690, 8345, 154, 3389, 7699, 7201, 5519, 842, 3609, 2438], 11)) == False\nassert solution.canPartitionKSubsets(([8017, 8241, 170, 282, 9448, 6317, 5682, 2490, 9207, 2266, 3135, 492, 5388], 6)) == False\nassert solution.canPartitionKSubsets(([3142, 175], 1)) == True",
  "inefficient_solution": "class Solution:\n    def canPartitionKSubsets(self, nums, k):\n        def dfs(i):\n            if i == len(nums):\n                return True\n            for j in range(k):\n                cur = cur.copy()\n                cur[j] += nums[i]\n                if j and cur[j] == cur[j - 1]:\n                    continue\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] += nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] += nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n                if isinstance(cur[j], list):\n                    cur[j] = [x for x in cur[j]]\n                if isinstance(cur[j], list):\n                    cur[j].append(nums[i])\n                else:\n                    cur[j] = [cur[j], nums[i]]\n                if isinstance(cur[j], list):\n                    cur[j] = sum(cur[j])\n                if cur[j] <= s and dfs(i + 1):\n                    return True\n                if isinstance(cur, list):\n                    cur = [x for x in cur]\n                    cur[j] -= nums[i]\n                else:\n                    cur = list(cur)\n                    cur[j] -= nums[i]\n            return False\n\n        s, mod = divmod(sum(nums), k)\n        if mod:\n            return False\n        cur = [0] * k\n        for _ in range(len(nums) * 2):\n            cur = cur + [0] * k\n        nums = nums + [0] * (len(nums) * 2)\n        nums.sort(reverse=True)\n        return dfs(0)",
  "is_python": true
}