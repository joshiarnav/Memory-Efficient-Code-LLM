{
  "problem_idx": 1921,
  "task_name": "Eliminate Maximum Number of Monsters",
  "markdown_description": "\nYou are playing a video game where you are defending your city from a group of `n` monsters. You are given a **0-indexed** integer array `dist` of size `n`, where `dist[i]` is the **initial distance** in kilometers of the `ith` monster from the city.\n\n\nThe monsters walk toward the city at a **constant** speed. The speed of each monster is given to you in an integer array `speed` of size `n`, where `speed[i]` is the speed of the `ith` monster in kilometers per minute.\n\n\nYou have a weapon that, once fully charged, can eliminate a **single** monster. However, the weapon takes **one minute** to charge. The weapon is fully charged at the very start.\n\n\nYou lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a **loss**, and the game ends before you can use your weapon.\n\n\nReturn *the **maximum** number of monsters that you can eliminate before you lose, or* `n` *if you can eliminate all the monsters before they reach the city.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** dist = [1,3,4], speed = [1,1,1]\n**Output:** 3\n**Explanation:**\nIn the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are [X,X,2]. You eliminate the third monster.\nAll 3 monsters can be eliminated.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** dist = [1,1,2,3], speed = [1,1,1,1]\n**Output:** 1\n**Explanation:**\nIn the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,1,2], so you lose.\nYou can only eliminate 1 monster.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** dist = [3,2,4], speed = [5,3,2]\n**Output:** 1\n**Explanation:**\nIn the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,2], so you lose.\nYou can only eliminate 1 monster.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == dist.length == speed.length`\n* `1 <= n <= 105`\n* `1 <= dist[i], speed[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n        times = sorted((d - 1) // s for d, s in zip(dist, speed))\n        for i, t in enumerate(times):\n            if t < i:\n                return i\n        return len(times)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def eliminateMaximum(self, dist, speed):\n        times = sorted((d - 1) // s for d, s in zip(dist, speed))\n        for i, t in enumerate(times):\n            if t < i:\n                return i\n        return len(times)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random dist list\n    dist = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate random speed list\n    speed = random.sample(range(1, 101), len(dist))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.eliminateMaximum(dist, speed)\n\n    return dist, speed, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        dist, speed, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.eliminateMaximum(dist, speed) == expected_result\n        print(f\"assert solution.eliminateMaximum({dist}, {speed}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.eliminateMaximum({dist}, {speed}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.eliminateMaximum([21, 86], [76, 18]) == 2\nassert solution.eliminateMaximum([1, 38, 90, 26, 80, 89, 92], [65, 73, 98, 22, 26, 34, 1]) == 1\nassert solution.eliminateMaximum([98, 92, 5, 68, 13, 86, 31, 39, 17, 11], [6, 42, 94, 41, 20, 8, 71, 68, 88, 19]) == 1\nassert solution.eliminateMaximum([60, 58, 68, 19, 61, 29], [58, 16, 46, 31, 17, 53]) == 1\nassert solution.eliminateMaximum([55, 74, 40, 76, 82, 49], [67, 52, 82, 41, 36, 42]) == 1\nassert solution.eliminateMaximum([40, 66, 80, 13], [3, 45, 95, 50]) == 1\nassert solution.eliminateMaximum([76, 30, 23, 91, 66, 82, 85, 81, 89], [7, 95, 31, 35, 76, 53, 36, 59, 38]) == 1\nassert solution.eliminateMaximum([41, 83, 33, 50, 7, 79, 11, 17, 26], [50, 41, 74, 69, 58, 20, 8, 4, 29]) == 1\nassert solution.eliminateMaximum([52, 94, 58, 15, 49, 5], [79, 98, 85, 84, 31, 91]) == 1\nassert solution.eliminateMaximum([59, 32, 56, 33, 46], [100, 74, 45, 6, 12]) == 1\nassert solution.eliminateMaximum([83, 5, 57, 63, 78, 58, 85, 93, 55, 11], [100, 76, 18, 61, 42, 96, 43, 22, 60, 58]) == 1\nassert solution.eliminateMaximum([70, 82, 23, 5, 8, 95, 38, 10], [6, 92, 11, 66, 59, 67, 94, 41]) == 1\nassert solution.eliminateMaximum([77, 72], [73, 33]) == 2\nassert solution.eliminateMaximum([7, 47, 32, 40, 11, 44, 61], [64, 52, 31, 8, 99, 81, 35]) == 1\nassert solution.eliminateMaximum([59, 90, 47, 80], [61, 78, 51, 90]) == 1\nassert solution.eliminateMaximum([62, 27, 11, 2, 13, 76, 81, 65, 73], [43, 7, 29, 44, 65, 74, 10, 22, 80]) == 1\nassert solution.eliminateMaximum([65, 28, 64, 40, 86, 96, 34, 5, 47], [45, 93, 30, 54, 33, 2, 16, 26, 62]) == 1\nassert solution.eliminateMaximum([80, 39, 42, 50, 16, 62, 32, 51], [4, 26, 16, 86, 2, 38, 46, 5]) == 1\nassert solution.eliminateMaximum([30, 92, 24, 43], [50, 98, 49, 30]) == 1\nassert solution.eliminateMaximum([88, 70, 36, 11, 32, 52, 29, 3, 62, 6], [87, 39, 91, 52, 95, 78, 12, 26, 2, 69]) == 1\nassert solution.eliminateMaximum([58, 2], [28, 40]) == 2\nassert solution.eliminateMaximum([81, 74, 69, 99], [54, 5, 56, 9]) == 4\nassert solution.eliminateMaximum([25, 13, 11, 17, 35, 86, 2, 37, 12, 34], [79, 25, 41, 17, 46, 93, 20, 4, 37, 57]) == 1\nassert solution.eliminateMaximum([75, 71, 4, 40], [14, 42, 11, 29]) == 2\nassert solution.eliminateMaximum([23, 84, 56, 97, 95, 61, 88, 21, 41, 25], [85, 23, 32, 26, 5, 77, 95, 99, 97, 8]) == 1\nassert solution.eliminateMaximum([57, 13, 28, 94, 18, 49, 36, 86], [31, 86, 52, 2, 45, 17, 84, 26]) == 1\nassert solution.eliminateMaximum([100, 1, 30, 54, 17, 86], [64, 13, 58, 42, 88, 54]) == 1\nassert solution.eliminateMaximum([74, 24, 81, 33, 59, 96, 16, 53, 44], [58, 30, 40, 100, 4, 90, 88, 42, 69]) == 1\nassert solution.eliminateMaximum([14, 2, 27, 5, 12, 11], [81, 63, 22, 7, 26, 88]) == 1\nassert solution.eliminateMaximum([67, 42, 83], [27, 61, 45]) == 3\nassert solution.eliminateMaximum([55, 71, 82, 24, 29, 67, 21, 32, 97], [67, 53, 36, 77, 47, 97, 63, 88, 80]) == 1\nassert solution.eliminateMaximum([67, 90, 87, 38, 58, 55, 21], [7, 69, 91, 70, 9, 28, 25]) == 1\nassert solution.eliminateMaximum([45, 73], [75, 99]) == 1\nassert solution.eliminateMaximum([68, 44, 27, 7, 29, 13, 40], [45, 88, 22, 38, 71, 56, 60]) == 1\nassert solution.eliminateMaximum([6, 23, 84, 25, 77, 41, 87, 36], [25, 15, 4, 95, 23, 1, 10, 33]) == 1\nassert solution.eliminateMaximum([8, 4, 70], [74, 21, 86]) == 1\nassert solution.eliminateMaximum([43, 92], [70, 58]) == 2\nassert solution.eliminateMaximum([3, 57, 89, 48, 41], [43, 62, 27, 85, 34]) == 1\nassert solution.eliminateMaximum([38, 59, 39, 23, 87, 13, 16, 71], [75, 49, 39, 61, 83, 81, 20, 23]) == 1\nassert solution.eliminateMaximum([93, 25, 13, 29, 14], [75, 68, 100, 83, 25]) == 1\nassert solution.eliminateMaximum([42, 82, 37, 26, 45, 21, 16, 41, 46, 83], [82, 35, 96, 72, 89, 41, 90, 28, 30, 47]) == 1\nassert solution.eliminateMaximum([53, 91, 31, 77, 85, 78, 57, 2], [16, 48, 64, 77, 60, 12, 98, 35]) == 1\nassert solution.eliminateMaximum([20, 34, 62, 86, 93, 95, 45, 90, 35], [39, 79, 76, 15, 51, 85, 33, 18, 95]) == 1\nassert solution.eliminateMaximum([42, 43, 81], [66, 25, 81]) == 1\nassert solution.eliminateMaximum([75, 47], [13, 34]) == 2\nassert solution.eliminateMaximum([12, 30, 41, 82, 22, 55, 89, 42, 19], [36, 40, 51, 89, 48, 38, 22, 32, 80]) == 1\nassert solution.eliminateMaximum([36, 28, 89, 84, 42], [47, 1, 87, 29, 30]) == 2\nassert solution.eliminateMaximum([98, 90, 57, 77, 22, 7], [89, 45, 59, 91, 55, 52]) == 1\nassert solution.eliminateMaximum([83, 58, 31, 72, 5, 86], [8, 51, 57, 78, 61, 76]) == 1\nassert solution.eliminateMaximum([76, 21], [80, 18]) == 2\nassert solution.eliminateMaximum([30, 45, 98, 97, 14, 92, 76, 48], [42, 52, 91, 22, 18, 92, 71, 10]) == 1\nassert solution.eliminateMaximum([70, 77, 2, 45, 100, 80, 98, 44], [71, 81, 11, 52, 13, 50, 72, 89]) == 1\nassert solution.eliminateMaximum([97, 8, 100, 84, 95, 60], [59, 83, 53, 9, 96, 39]) == 1\nassert solution.eliminateMaximum([48, 43, 40, 33, 16, 94, 80, 20], [14, 12, 5, 86, 44, 72, 59, 77]) == 1\nassert solution.eliminateMaximum([55, 17, 33], [81, 100, 96]) == 1\nassert solution.eliminateMaximum([63, 58, 81, 42, 38, 72], [12, 50, 6, 51, 54, 5]) == 1\nassert solution.eliminateMaximum([75, 29, 79, 91, 33, 73, 53, 39, 9, 26], [11, 6, 50, 93, 49, 66, 22, 2, 57, 8]) == 1\nassert solution.eliminateMaximum([83, 81, 33, 2, 78], [71, 47, 100, 51, 95]) == 1\nassert solution.eliminateMaximum([73, 33, 82, 77, 1], [30, 78, 27, 58, 18]) == 1\nassert solution.eliminateMaximum([78, 49, 69, 36, 3, 64, 15, 54], [36, 17, 63, 50, 24, 93, 89, 82]) == 1\nassert solution.eliminateMaximum([89, 34, 91, 63, 97, 38, 8], [4, 15, 85, 50, 95, 54, 16]) == 1\nassert solution.eliminateMaximum([34, 2, 16, 64, 73, 82, 19, 54, 11, 79], [5, 58, 82, 63, 93, 64, 62, 13, 43, 96]) == 1\nassert solution.eliminateMaximum([82, 19, 41, 43, 57, 81, 2, 96, 44, 21], [46, 77, 36, 20, 78, 79, 59, 90, 14, 88]) == 1\nassert solution.eliminateMaximum([81, 5, 94, 54, 40, 6], [59, 31, 65, 85, 88, 35]) == 1\nassert solution.eliminateMaximum([26, 20], [59, 61]) == 1\nassert solution.eliminateMaximum([75, 50, 11, 12, 22, 36], [32, 98, 63, 61, 90, 82]) == 1\nassert solution.eliminateMaximum([56, 38, 99, 64], [90, 40, 77, 11]) == 1\nassert solution.eliminateMaximum([43, 32, 34, 58], [74, 14, 88, 68]) == 1\nassert solution.eliminateMaximum([71, 97, 19, 25, 63, 39], [76, 20, 74, 47, 18, 10]) == 1\nassert solution.eliminateMaximum([100, 35, 37, 45, 90, 21, 25], [46, 8, 70, 97, 3, 24, 71]) == 1\nassert solution.eliminateMaximum([97, 65, 9, 98, 84, 10, 100], [75, 79, 55, 42, 57, 96, 78]) == 1\nassert solution.eliminateMaximum([63, 85, 81, 82, 95], [42, 63, 4, 59, 7]) == 2\nassert solution.eliminateMaximum([50, 16, 94, 42, 56, 35, 63, 99], [16, 13, 87, 57, 78, 27, 46, 88]) == 1\nassert solution.eliminateMaximum([49, 80, 30, 25, 76, 74], [38, 70, 62, 96, 3, 11]) == 1\nassert solution.eliminateMaximum([3, 53], [49, 7]) == 2\nassert solution.eliminateMaximum([12, 94, 99, 58, 39, 56, 80, 60], [65, 76, 97, 28, 10, 56, 64, 41]) == 1\nassert solution.eliminateMaximum([7, 62, 56, 93, 41, 33, 43, 66], [81, 28, 66, 92, 10, 22, 23, 90]) == 1\nassert solution.eliminateMaximum([79, 61, 10, 18, 8], [47, 58, 2, 38, 63]) == 1\nassert solution.eliminateMaximum([37, 67, 89, 28, 27], [52, 16, 4, 41, 31]) == 1\nassert solution.eliminateMaximum([38, 23, 68, 37, 93, 89, 81], [4, 71, 24, 30, 61, 12, 66]) == 2\nassert solution.eliminateMaximum([97, 82, 44, 38, 16, 76, 37], [16, 79, 6, 24, 35, 88, 62]) == 1\nassert solution.eliminateMaximum([58, 44, 33, 21, 7, 94], [17, 65, 96, 63, 83, 56]) == 1\nassert solution.eliminateMaximum([89, 2, 71, 93, 10, 84, 21, 20], [60, 5, 27, 24, 47, 57, 67, 48]) == 1\nassert solution.eliminateMaximum([23, 71, 6, 92, 12, 59, 42, 75], [98, 25, 73, 52, 11, 76, 17, 7]) == 1\nassert solution.eliminateMaximum([55, 26, 32], [72, 79, 74]) == 1\nassert solution.eliminateMaximum([33, 67, 76, 99, 40, 95], [4, 96, 7, 45, 1, 2]) == 6\nassert solution.eliminateMaximum([82, 6], [73, 61]) == 2\nassert solution.eliminateMaximum([73, 60, 75], [93, 28, 60]) == 3\nassert solution.eliminateMaximum([87, 56, 5, 14, 47, 85], [98, 22, 10, 50, 57, 11]) == 1\nassert solution.eliminateMaximum([37, 43], [1, 67]) == 2\nassert solution.eliminateMaximum([57, 60, 67, 10, 93, 44, 28, 41], [69, 81, 31, 28, 97, 100, 32, 79]) == 1\nassert solution.eliminateMaximum([91, 42, 52, 66, 84, 21, 93], [15, 55, 93, 6, 64, 30, 46]) == 1\nassert solution.eliminateMaximum([81, 62, 86, 26, 68], [21, 93, 30, 17, 49]) == 2\nassert solution.eliminateMaximum([69, 77, 31], [52, 56, 5]) == 3\nassert solution.eliminateMaximum([71, 17], [67, 84]) == 2\nassert solution.eliminateMaximum([9, 57, 49], [3, 24, 83]) == 3\nassert solution.eliminateMaximum([10, 45, 48], [34, 57, 26]) == 1\nassert solution.eliminateMaximum([52, 87, 34, 68, 16, 66, 27], [50, 91, 28, 38, 73, 8, 26]) == 1\nassert solution.eliminateMaximum([55, 24, 32], [17, 42, 76]) == 1\nassert solution.eliminateMaximum([58, 92], [98, 43]) == 2",
  "inefficient_solution": "class Solution:\n    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:\n        times = []\n        for d, s in zip(dist, speed):\n            time = (d - 1) // s\n            for _ in range(time):\n                dist.remove(min(dist))\n                speed.remove(min(speed))\n            times.append(time)\n        for i, t in enumerate(times):\n            if t < i:\n                return i\n        return len(times)",
  "is_python": true
}