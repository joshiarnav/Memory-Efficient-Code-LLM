{
  "problem_idx": 1705,
  "task_name": "Maximum Number of Eaten Apples",
  "markdown_description": "\nThere is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`.\n\n\nYou decided to eat **at most** one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days.\n\n\nGiven two integer arrays `days` and `apples` of length `n`, return *the maximum number of apples you can eat.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** apples = [1,2,3,5,2], days = [3,2,1,4,2]\n**Output:** 7\n**Explanation:** You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]\n**Output:** 5\n**Explanation:** You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == apples.length == days.length`\n* `1 <= n <= 2 * 104`\n* `0 <= apples[i], days[i] <= 2 * 104`\n* `days[i] = 0` if and only if `apples[i] = 0`.\n\n\n",
  "canonical_solution": "class Solution:\n    def eatenApples(self, apples: List[int], days: List[int]) -> int:\n        n = len(days)\n        i = ans = 0\n        q = []\n        while i < n or q:\n            if i < n and apples[i]:\n                heappush(q, (i + days[i] - 1, apples[i]))\n            while q and q[0][0] < i:\n                heappop(q)\n            if q:\n                t, v = heappop(q)\n                v -= 1\n                ans += 1\n                if v and t > i:\n                    heappush(q, (t, v))\n            i += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def eatenApples(self, apples: List[int], days: List[int]) -> int:\n        n = len(days)\n        i = ans = 0\n        q = []\n        while i < n or q:\n            if i < n and apples[i]:\n                heappush(q, (i + days[i] - 1, apples[i]))\n            while q and q[0][0] < i:\n                heappop(q)\n            if q:\n                t, v = heappop(q)\n                v -= 1\n                ans += 1\n                if v and t > i:\n                    heappush(q, (t, v))\n            i += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random integers list\n    apples = random.choices(range(0, 201), k=random.randint(2, 10))\n    days = random.choices(range(0, 201), k=len(apples))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.eatenApples(apples, days)\n\n    return apples, days, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        apples, days, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.eatenApples(apples, days) == expected_result\n        print(f\"assert solution.eatenApples({apples}, {days}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.eatenApples({apples}, {days}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.eatenApples([70, 163, 195, 180, 101], [139, 146, 107, 137, 45]) == 147\nassert solution.eatenApples([4, 22, 150, 6, 120, 50, 145, 148, 120, 120], [158, 67, 120, 63, 30, 72, 102, 192, 151, 190]) == 199\nassert solution.eatenApples([112, 136, 178, 123, 33, 132], [46, 3, 139, 63, 67, 104]) == 141\nassert solution.eatenApples([125, 136, 106, 62, 117], [90, 106, 174, 93, 141]) == 176\nassert solution.eatenApples([66, 191, 22, 11, 83, 194, 127, 164], [22, 170, 155, 80, 175, 71, 75, 14]) == 179\nassert solution.eatenApples([72, 5, 8, 183, 119], [19, 128, 112, 174, 64]) == 177\nassert solution.eatenApples([118, 105, 54], [54, 129, 80]) == 130\nassert solution.eatenApples([33, 80], [67, 100]) == 101\nassert solution.eatenApples([107, 169, 134, 188, 46, 63, 113, 68, 5, 26], [57, 47, 52, 136, 174, 40, 193, 16, 154, 85]) == 199\nassert solution.eatenApples([88, 128, 164, 82], [184, 73, 59, 52]) == 161\nassert solution.eatenApples([181, 55, 3, 91, 42, 21, 83, 124, 92, 100], [149, 192, 174, 49, 130, 181, 26, 152, 154, 136]) == 193\nassert solution.eatenApples([78, 102, 34, 140], [37, 3, 50, 22]) == 52\nassert solution.eatenApples([144, 100], [8, 117]) == 108\nassert solution.eatenApples([63, 125, 9, 133, 52, 126, 42], [158, 78, 169, 127, 183, 22, 180]) == 187\nassert solution.eatenApples([46, 80, 0], [74, 92, 55]) == 93\nassert solution.eatenApples([161, 19, 14, 64, 58, 96], [168, 68, 3, 138, 157, 38]) == 168\nassert solution.eatenApples([99, 81, 44, 194, 7], [188, 101, 43, 1, 151]) == 188\nassert solution.eatenApples([68, 14, 171], [182, 185, 26]) == 108\nassert solution.eatenApples([61, 5, 73, 23, 195, 42, 2, 42, 129], [159, 44, 179, 199, 153, 199, 10, 75, 47]) == 204\nassert solution.eatenApples([125, 165, 125, 76, 84, 151, 66, 46, 54], [18, 191, 91, 131, 133, 92, 85, 136, 180]) == 192\nassert solution.eatenApples([83, 190], [177, 48]) == 131\nassert solution.eatenApples([15, 34, 188, 55, 145, 88, 107, 107, 56, 136], [35, 92, 114, 105, 84, 7, 75, 120, 14, 75]) == 127\nassert solution.eatenApples([160, 117, 103, 17, 23, 2, 98], [98, 166, 31, 159, 189, 66, 54]) == 190\nassert solution.eatenApples([92, 188, 7, 54, 88, 12, 89, 145, 141, 51], [76, 16, 51, 108, 42, 0, 83, 7, 19, 116]) == 125\nassert solution.eatenApples([162, 172, 158, 35, 177, 163], [97, 16, 13, 16, 8, 8]) == 97\nassert solution.eatenApples([129, 137, 37, 95, 59, 48], [104, 169, 123, 129, 102, 195]) == 200\nassert solution.eatenApples([166, 84, 144, 92, 33, 91, 9, 116, 191], [62, 20, 86, 154, 149, 141, 179, 167, 122]) == 183\nassert solution.eatenApples([32, 58, 150, 163, 83, 167, 176, 76, 98, 12], [123, 74, 86, 26, 173, 180, 56, 66, 159, 166]) == 185\nassert solution.eatenApples([169, 117, 100, 12], [174, 77, 146, 118]) == 174\nassert solution.eatenApples([16, 1, 141], [165, 61, 21]) == 38\nassert solution.eatenApples([20, 7, 76, 23, 26], [135, 181, 15, 29, 55]) == 83\nassert solution.eatenApples([15, 156, 1, 122], [67, 170, 179, 198]) == 201\nassert solution.eatenApples([168, 26, 182, 42, 28, 30, 146, 62, 37], [64, 93, 17, 177, 113, 56, 146, 75, 6]) == 180\nassert solution.eatenApples([86, 30, 90, 36, 98, 80, 82, 183, 66, 20], [117, 59, 191, 193, 37, 113, 108, 86, 23, 65]) == 196\nassert solution.eatenApples([11, 132, 126], [53, 180, 26]) == 169\nassert solution.eatenApples([53, 162, 76], [148, 161, 15]) == 162\nassert solution.eatenApples([86, 81, 86], [113, 27, 187]) == 189\nassert solution.eatenApples([53, 193, 12], [40, 3, 96]) == 52\nassert solution.eatenApples([178, 86, 5, 50, 68, 14, 103, 2], [163, 56, 41, 110, 164, 175, 46, 193]) == 182\nassert solution.eatenApples([96, 74, 83, 10, 166, 1, 66], [113, 71, 73, 161, 179, 175, 190]) == 196\nassert solution.eatenApples([124, 51, 17, 195, 137, 149, 118, 112, 60], [190, 41, 183, 69, 199, 117, 135, 151, 50]) == 203\nassert solution.eatenApples([23, 46, 43, 138, 155, 167], [127, 73, 73, 60, 110, 20]) == 127\nassert solution.eatenApples([142, 115, 119, 80, 75, 132, 25, 167, 70, 35], [186, 123, 161, 75, 44, 154, 184, 6, 64, 150]) == 190\nassert solution.eatenApples([40, 179], [2, 60]) == 61\nassert solution.eatenApples([109, 99, 141, 104, 45, 93, 28], [37, 173, 17, 86, 178, 194, 68]) == 199\nassert solution.eatenApples([136, 107, 102, 42], [71, 100, 146, 36]) == 148\nassert solution.eatenApples([34, 13, 0], [187, 182, 0]) == 47\nassert solution.eatenApples([57, 63, 116, 145, 102, 54, 122], [65, 107, 63, 66, 38, 79, 21]) == 108\nassert solution.eatenApples([37, 165, 185], [176, 26, 170]) == 176\nassert solution.eatenApples([135, 184, 74, 122, 73, 42, 83, 132, 35], [90, 170, 120, 122, 15, 177, 42, 69, 59]) == 182\nassert solution.eatenApples([64, 164, 31, 134, 85, 65, 162], [199, 155, 166, 163, 39, 120, 71]) == 199\nassert solution.eatenApples([149, 143, 107, 156], [134, 76, 185, 191]) == 194\nassert solution.eatenApples([160, 83, 38, 24, 161, 22], [87, 10, 41, 130, 103, 28]) == 131\nassert solution.eatenApples([106, 30, 13, 92], [103, 25, 74, 188]) == 191\nassert solution.eatenApples([108, 87, 141, 173, 191, 139, 11, 73], [2, 65, 116, 121, 80, 15, 187, 47]) == 135\nassert solution.eatenApples([137, 193, 169, 178, 114], [74, 148, 125, 117, 138]) == 149\nassert solution.eatenApples([116, 192, 51, 157, 183, 101], [11, 180, 3, 92, 175, 9]) == 181\nassert solution.eatenApples([35, 112, 38, 69, 34, 156, 62, 162, 87], [25, 190, 106, 79, 118, 103, 115, 98, 180]) == 191\nassert solution.eatenApples([27, 97, 62, 70, 8, 118], [95, 18, 49, 166, 120, 19]) == 155\nassert solution.eatenApples([191, 79, 89, 88, 22, 3, 50, 8], [99, 153, 160, 142, 114, 191, 54, 115]) == 165\nassert solution.eatenApples([161, 89, 137, 84, 136, 123, 164], [193, 33, 131, 2, 10, 22, 105]) == 193\nassert solution.eatenApples([111, 84, 127, 100, 12], [107, 51, 147, 106, 98]) == 149\nassert solution.eatenApples([121, 2, 181, 41, 169], [200, 123, 154, 199, 0]) == 202\nassert solution.eatenApples([134, 54, 24, 177, 145, 41], [56, 23, 49, 147, 178, 102]) == 182\nassert solution.eatenApples([44, 101, 107, 67], [68, 2, 15, 140]) == 127\nassert solution.eatenApples([135, 115, 160, 141, 1, 54, 164, 66], [189, 29, 153, 45, 89, 96, 127, 6]) == 189\nassert solution.eatenApples([139, 108, 134, 109, 2, 109, 2, 30], [56, 7, 97, 86, 154, 31, 79, 83]) == 101\nassert solution.eatenApples([152, 124, 141, 194, 18, 55], [188, 114, 148, 70, 138, 141]) == 188\nassert solution.eatenApples([174, 58, 169, 144, 105], [149, 110, 182, 67, 167]) == 184\nassert solution.eatenApples([53, 29, 33, 66, 38, 152], [51, 183, 133, 121, 58, 97]) == 164\nassert solution.eatenApples([72, 127, 174, 97], [41, 67, 53, 139]) == 142\nassert solution.eatenApples([194, 56, 70, 4, 99, 124, 182, 176, 121, 190], [109, 78, 54, 178, 69, 112, 54, 121, 82, 60]) == 132\nassert solution.eatenApples([171, 38, 188, 60, 189, 187, 196, 25, 174, 161], [120, 143, 61, 107, 131, 34, 179, 117, 75, 165]) == 185\nassert solution.eatenApples([194, 61, 28, 73, 26, 180, 13, 12, 193, 59], [15, 194, 188, 117, 143, 101, 19, 187, 74, 9]) == 195\nassert solution.eatenApples([53, 77, 118, 144, 119, 22, 163], [90, 194, 146, 190, 101, 13, 139]) == 195\nassert solution.eatenApples([156, 31, 106], [60, 106, 122]) == 124\nassert solution.eatenApples([23, 117, 58, 109, 56, 195, 85], [100, 54, 68, 105, 174, 46, 141]) == 178\nassert solution.eatenApples([116, 75, 64, 61, 86, 179, 96, 41, 131], [24, 172, 83, 43, 2, 24, 38, 158, 1]) == 173\nassert solution.eatenApples([73, 116, 64], [139, 2, 76]) == 139\nassert solution.eatenApples([193, 151, 58, 104, 59, 55, 175, 31, 147, 121], [63, 1, 185, 87, 72, 179, 180, 18, 40, 43]) == 187\nassert solution.eatenApples([61, 138, 139, 58, 131, 77, 94], [62, 41, 129, 73, 151, 152, 146]) == 157\nassert solution.eatenApples([66, 104, 149, 54, 109, 100, 160], [173, 69, 68, 196, 51, 170, 91]) == 199\nassert solution.eatenApples([167, 54, 23, 63], [10, 193, 121, 96]) == 150\nassert solution.eatenApples([62, 130, 29, 185, 192, 79, 46, 75, 30], [5, 133, 33, 28, 198, 191, 21, 41, 132]) == 202\nassert solution.eatenApples([23, 121, 156, 92, 64, 146, 110, 53], [128, 41, 100, 117, 62, 153, 17, 101]) == 158\nassert solution.eatenApples([153, 18, 58, 184, 86, 177], [57, 39, 148, 165, 48, 93]) == 168\nassert solution.eatenApples([184, 177, 105, 95, 98, 145, 173], [115, 158, 74, 94, 144, 180, 189]) == 195\nassert solution.eatenApples([30, 65, 181, 99, 168, 74], [92, 187, 167, 170, 99, 154]) == 188\nassert solution.eatenApples([119, 131, 1, 37, 28, 135, 80, 126, 190], [2, 108, 170, 92, 164, 76, 74, 51, 0]) == 138\nassert solution.eatenApples([187, 80, 6, 156, 187, 41, 180, 74], [46, 33, 199, 81, 61, 80, 196, 158]) == 202\nassert solution.eatenApples([165, 145, 145, 5, 68], [119, 9, 85, 37, 170]) == 174\nassert solution.eatenApples([167, 28, 117, 155, 52, 184, 182, 39, 8], [183, 187, 109, 156, 192, 104, 136, 53, 72]) == 196\nassert solution.eatenApples([101, 37, 189, 149, 121, 87, 167], [108, 96, 37, 114, 112, 39, 33]) == 117\nassert solution.eatenApples([15, 115, 197, 57, 78, 13, 153, 6], [4, 159, 119, 190, 45, 6, 20, 7]) == 193\nassert solution.eatenApples([89, 78, 47, 48, 134, 4], [23, 8, 14, 115, 175, 19]) == 179\nassert solution.eatenApples([189, 140, 109, 14, 148, 63, 123], [21, 70, 160, 66, 169, 16, 141]) == 173\nassert solution.eatenApples([53, 157, 170], [85, 107, 89]) == 108\nassert solution.eatenApples([7, 168], [8, 63]) == 64\nassert solution.eatenApples([159, 9, 106, 49, 86, 11, 157, 200, 157], [93, 51, 123, 87, 185, 65, 122, 154, 99]) == 189\nassert solution.eatenApples([99, 100, 52, 143, 99], [0, 176, 174, 90, 92]) == 176",
  "inefficient_solution": "class Solution:\n    def eatenApples(self, apples: List[int], days: List[int]) -> int:\n        n = len(days)\n        i = ans = 0\n        q = []\n        trees = [0] * (n + 10)\n        fruits = [0] * (n + 10)\n        while i < n or q:\n            for j in range(i, min(i + 10, n)):\n                if apples[j]:\n                    trees[j] = j + days[j]\n                    fruits[j] = apples[j]\n            while q and q[0][0] < i:\n                q.pop(0)\n            if q:\n                t, v = q[0]\n                v -= 1\n                ans += 1\n                if v and t > i:\n                    q.insert(0, (t, v))\n            i += 1\n            for j in range(len(q)):\n                t, v = q[j]\n                if t <= i:\n                    fruits[t] -= 1\n                    if fruits[t] == 0:\n                        fruits[t] = 0\n                    if v <= 1:\n                        fruits[t] = 0\n                    if fruits[t] and t > i:\n                        q[j] = (t, v)\n            for j in range(i, min(i + 10, n)):\n                if fruits[j]:\n                    q.append((trees[j], fruits[j]))\n            q.sort()\n        return ans",
  "is_python": true
}