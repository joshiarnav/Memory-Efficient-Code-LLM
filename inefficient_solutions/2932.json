{
  "problem_idx": 2932,
  "task_name": "Maximum Strong Pair XOR I",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`. A pair of integers `x` and `y` is called a **strong** pair if it satisfies the condition:\n\n\n* `|x - y| <= min(x, y)`\n\n\nYou need to select two integers from `nums` such that they form a strong pair and their bitwise `XOR` is the **maximum** among all strong pairs in the array.\n\n\nReturn *the **maximum*** `XOR` *value out of all possible strong pairs in the array* `nums`.\n\n\n**Note** that you can pick the same integer twice to form a pair.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 7\n**Explanation:** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,100]\n**Output:** 0\n**Explanation:** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,6,25,30]\n**Output:** 7\n**Explanation:** There are 6 strong pairs in the array nums: (5, 5), (5, 6), (6, 6), (25, 25), (25, 30) and (30, 30).\nThe maximum XOR possible from these pairs is 25 XOR 30 = 7 since the only other non-zero XOR value is 5 XOR 6 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50`\n* `1 <= nums[i] <= 100`\n\n\n",
  "canonical_solution": "class Trie:\n    __slots__ = (\"children\", \"cnt\")\n\n    def __init__(self):\n        self.children: List[Trie | None] = [None, None]\n        self.cnt = 0\n\n    def insert(self, x: int):\n        node = self\n        for i in range(7, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n            node.cnt += 1\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(7, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1] and node.children[v ^ 1].cnt:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            else:\n                node = node.children[v]\n        return ans\n\n    def remove(self, x: int):\n        node = self\n        for i in range(7, -1, -1):\n            v = x >> i & 1\n            node = node.children[v]\n            node.cnt -= 1\n\n\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n        nums.sort()\n        tree = Trie()\n        ans = i = 0\n        for y in nums:\n            tree.insert(y)\n            while y > nums[i] * 2:\n                tree.remove(nums[i])\n                i += 1\n            ans = max(ans, tree.search(y))\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import namedtuple\n\nTestCase = namedtuple(\"TestCase\", [\"nums\", \"expected_result\"])\n\ndef generate_test_case() -> TestCase:\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 51), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumStrongPairXor(nums)\n\n    return TestCase(nums, expected_result)\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        test_case = generate_test_case()\n        if len(test_case.nums) > 1:\n            print(f\"assert solution.maximumStrongPairXor({test_case.nums}) == {test_case.expected_result}\")\n            test_case_generator_results.append(f\"assert solution.maximumStrongPairXor({test_case.nums}) == {test_case.expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumStrongPairXor([5, 13, 14, 23, 24, 30, 34, 36]) == 60\nassert solution.maximumStrongPairXor([3, 6, 14, 27, 28, 29, 34, 40, 41, 48]) == 63\nassert solution.maximumStrongPairXor([9, 42]) == 0\nassert solution.maximumStrongPairXor([7, 14, 16, 30, 40]) == 54\nassert solution.maximumStrongPairXor([3, 10, 13, 22, 26, 29, 42, 43]) == 61\nassert solution.maximumStrongPairXor([14, 26, 29, 34, 43]) == 63\nassert solution.maximumStrongPairXor([2, 13, 29, 37, 45, 46]) == 56\nassert solution.maximumStrongPairXor([3, 4, 8, 15, 18, 24, 31, 37, 48]) == 61\nassert solution.maximumStrongPairXor([21, 24, 33, 46]) == 57\nassert solution.maximumStrongPairXor([12, 14, 17, 20, 25, 35, 37, 39, 48, 49]) == 62\nassert solution.maximumStrongPairXor([13, 24, 25, 33, 35, 43]) == 59\nassert solution.maximumStrongPairXor([2, 5, 10, 17, 18, 26, 32, 35, 44]) == 58\nassert solution.maximumStrongPairXor([1, 37, 48]) == 21\nassert solution.maximumStrongPairXor([3, 12, 15, 33]) == 3\nassert solution.maximumStrongPairXor([9, 10, 16, 19, 20, 23, 32, 38, 46, 50]) == 57\nassert solution.maximumStrongPairXor([9, 28, 44]) == 48\nassert solution.maximumStrongPairXor([4, 10, 13, 17, 27, 31, 38, 47, 50]) == 61\nassert solution.maximumStrongPairXor([4, 9, 14, 20, 36, 42]) == 48\nassert solution.maximumStrongPairXor([16, 18, 38]) == 2\nassert solution.maximumStrongPairXor([1, 8, 15, 16, 20, 22, 25, 28, 37]) == 60\nassert solution.maximumStrongPairXor([23, 27, 36, 43, 47, 48]) == 63\nassert solution.maximumStrongPairXor([11, 15, 18, 27, 32]) == 59\nassert solution.maximumStrongPairXor([3, 19, 20, 24, 36, 42, 47]) == 60\nassert solution.maximumStrongPairXor([15, 17, 19, 31, 38, 45]) == 57\nassert solution.maximumStrongPairXor([9, 24, 41]) == 49\nassert solution.maximumStrongPairXor([1, 11, 18, 26, 35, 48, 50]) == 57\nassert solution.maximumStrongPairXor([1, 4, 5, 15, 22, 27, 30, 41, 49]) == 63\nassert solution.maximumStrongPairXor([30, 34, 45]) == 60\nassert solution.maximumStrongPairXor([1, 2, 8, 13, 42, 44, 45]) == 7\nassert solution.maximumStrongPairXor([14, 20, 25, 32, 35, 44]) == 58\nassert solution.maximumStrongPairXor([7, 11, 18]) == 25\nassert solution.maximumStrongPairXor([4, 44]) == 0\nassert solution.maximumStrongPairXor([4, 20, 26, 27, 42, 43, 46]) == 53\nassert solution.maximumStrongPairXor([5, 8, 9, 29, 31, 40, 43, 45, 46]) == 55\nassert solution.maximumStrongPairXor([4, 16, 20, 33, 39, 46, 50]) == 53\nassert solution.maximumStrongPairXor([6, 12, 20, 41, 48]) == 25\nassert solution.maximumStrongPairXor([21, 43]) == 0\nassert solution.maximumStrongPairXor([1, 27]) == 0\nassert solution.maximumStrongPairXor([6, 48]) == 0\nassert solution.maximumStrongPairXor([8, 13, 14, 26, 29, 36, 39, 41]) == 62\nassert solution.maximumStrongPairXor([9, 10, 15]) == 6\nassert solution.maximumStrongPairXor([3, 4, 6, 11, 17, 23, 31, 43]) == 60\nassert solution.maximumStrongPairXor([12, 36]) == 0\nassert solution.maximumStrongPairXor([11, 38]) == 0\nassert solution.maximumStrongPairXor([2, 7]) == 0\nassert solution.maximumStrongPairXor([2, 3, 4, 6, 7, 16, 17, 33, 46, 49]) == 48\nassert solution.maximumStrongPairXor([14, 24, 37, 38]) == 62\nassert solution.maximumStrongPairXor([5, 11, 21, 50]) == 30\nassert solution.maximumStrongPairXor([10, 19, 26, 31, 34, 44]) == 61\nassert solution.maximumStrongPairXor([1, 8, 13, 32, 41, 43]) == 11\nassert solution.maximumStrongPairXor([3, 18, 20, 26, 30, 31, 34, 41, 49]) == 61\nassert solution.maximumStrongPairXor([10, 15, 28, 36, 39, 42, 43]) == 59\nassert solution.maximumStrongPairXor([16, 17, 19, 26, 35, 36, 39, 44]) == 62\nassert solution.maximumStrongPairXor([7, 10, 11, 17, 23, 33, 34, 36, 41]) == 62\nassert solution.maximumStrongPairXor([28, 41, 46]) == 53\nassert solution.maximumStrongPairXor([1, 6, 8, 26, 30, 40]) == 54\nassert solution.maximumStrongPairXor([10, 16, 18, 25, 28, 33, 42, 44, 49]) == 61\nassert solution.maximumStrongPairXor([1, 17, 27, 37, 38, 39, 49]) == 62\nassert solution.maximumStrongPairXor([7, 10, 12, 17, 20, 32, 41, 44]) == 52\nassert solution.maximumStrongPairXor([4, 7, 16, 32, 42]) == 48\nassert solution.maximumStrongPairXor([1, 4, 10, 13, 16, 28, 36, 47]) == 56\nassert solution.maximumStrongPairXor([22, 44]) == 58\nassert solution.maximumStrongPairXor([1, 37, 42, 46]) == 15\nassert solution.maximumStrongPairXor([2, 4, 14, 18, 20, 32, 33, 38, 44, 49]) == 53\nassert solution.maximumStrongPairXor([4, 20, 27, 29, 40, 44, 49]) == 60\nassert solution.maximumStrongPairXor([10, 14, 16, 19, 20, 27, 28, 35, 36, 47]) == 63\nassert solution.maximumStrongPairXor([1, 6, 14, 16, 19, 27, 33, 43]) == 58\nassert solution.maximumStrongPairXor([19, 22, 27]) == 13\nassert solution.maximumStrongPairXor([6, 10, 13, 14, 16, 18, 24, 25, 39, 44]) == 63\nassert solution.maximumStrongPairXor([17, 21, 27, 40]) == 61\nassert solution.maximumStrongPairXor([2, 4, 12, 17]) == 29\nassert solution.maximumStrongPairXor([2, 9, 13, 16, 21, 29, 33, 38, 45, 50]) == 60\nassert solution.maximumStrongPairXor([8, 19, 23, 25, 26, 32, 36, 45, 49]) == 62\nassert solution.maximumStrongPairXor([4, 20, 40, 44]) == 60\nassert solution.maximumStrongPairXor([2, 3, 6, 38]) == 5\nassert solution.maximumStrongPairXor([10, 24, 43, 44, 46]) == 54\nassert solution.maximumStrongPairXor([9, 19, 25, 27, 29, 37, 46, 47, 48, 50]) == 62\nassert solution.maximumStrongPairXor([1, 7, 16, 23, 33, 41, 48]) == 62\nassert solution.maximumStrongPairXor([1, 6, 7, 8, 11, 20]) == 31\nassert solution.maximumStrongPairXor([6, 9, 10, 11, 20, 22, 24, 40]) == 62\nassert solution.maximumStrongPairXor([6, 10, 17, 20, 30, 49]) == 47\nassert solution.maximumStrongPairXor([16, 17, 37, 41, 44, 49, 50]) == 30\nassert solution.maximumStrongPairXor([1, 22, 23, 26, 31, 50]) == 45\nassert solution.maximumStrongPairXor([2, 3, 13, 25, 50]) == 43\nassert solution.maximumStrongPairXor([26, 38]) == 60\nassert solution.maximumStrongPairXor([6, 8, 15, 17, 26, 33, 37, 42, 43, 45]) == 63\nassert solution.maximumStrongPairXor([1, 9, 15, 20, 28, 33, 39, 46, 47, 48]) == 61\nassert solution.maximumStrongPairXor([15, 30, 38]) == 56\nassert solution.maximumStrongPairXor([7, 9]) == 14\nassert solution.maximumStrongPairXor([9, 16, 17, 20, 26, 43, 46]) == 52\nassert solution.maximumStrongPairXor([1, 2, 45]) == 3\nassert solution.maximumStrongPairXor([27, 29, 33, 34, 39]) == 63\nassert solution.maximumStrongPairXor([4, 29, 30, 33, 40, 45]) == 63\nassert solution.maximumStrongPairXor([17, 23, 30]) == 15\nassert solution.maximumStrongPairXor([8, 18, 23, 42]) == 61\nassert solution.maximumStrongPairXor([11, 13, 14, 19, 21, 32, 33, 36, 49]) == 55\nassert solution.maximumStrongPairXor([8, 10, 29]) == 2\nassert solution.maximumStrongPairXor([7, 15, 18, 25, 29, 30, 35, 38, 45, 47]) == 63\nassert solution.maximumStrongPairXor([5, 10, 34, 50]) == 16\nassert solution.maximumStrongPairXor([2, 4, 5, 19, 26, 27, 43, 46, 50]) == 53",
  "inefficient_solution": "class Trie:\n    def __init__(self):\n        self.children = [{}, {}]\n        self.cnt = 0\n\n    def insert(self, x):\n        node = self\n        for i in range(31, -1, -1):\n            v = x >> i & 1\n            if v not in node['children']:\n                node['children'][v] = {}\n                node['children'][v]['children'] = [{} for _ in range(2)]\n            node = node['children'][v]\n            node['cnt'] += 1\n\n    def search(self, x):\n        node = self\n        ans = 0\n        for i in range(31, -1, -1):\n            v = x >> i & 1\n            if v ^ 1 in node['children'] and node['children'][v ^ 1]['cnt']:\n                ans |= 1 << i\n                node = node['children'][v ^ 1]\n            else:\n                node = node['children'][v]\n        return ans\n\n    def remove(self, x):\n        node = self\n        for i in range(31, -1, -1):\n            v = x >> i & 1\n            node = node['children'][v]\n            node['cnt'] -= 1\n\n\nclass Solution:\n    def maximumStrongPairXor(self, nums):\n        nums = [x for x in nums for _ in range(x)]\n        nums.sort()\n        tree = Trie()\n        ans = i = 0\n        for y in nums:\n            tree.insert(y)\n            while y > nums[i] * 2:\n                tree.remove(nums[i])\n                i += 1\n            ans = max(ans, tree.search(y))\n        return ans",
  "is_python": true
}