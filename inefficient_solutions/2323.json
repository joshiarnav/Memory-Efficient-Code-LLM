{
  "problem_idx": 2323,
  "task_name": "Find Minimum Time to Finish All Jobs II",
  "markdown_description": "\nYou are given two **0-indexed** integer arrays `jobs` and `workers` of **equal** length, where `jobs[i]` is the amount of time needed to complete the `ith` job, and `workers[j]` is the amount of time the `jth` worker can work each day.\n\n\nEach job should be assigned to **exactly** one worker, such that each worker completes **exactly** one job.\n\n\nReturn *the **minimum** number of days needed to complete all the jobs after assignment.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** jobs = [5,2,4], workers = [1,7,5]\n**Output:** 2\n**Explanation:**\n- Assign the 2nd worker to the 0th job. It takes them 1 day to finish the job.\n- Assign the 0th worker to the 1st job. It takes them 2 days to finish the job.\n- Assign the 1st worker to the 2nd job. It takes them 1 day to finish the job.\nIt takes 2 days for all the jobs to be completed, so return 2.\nIt can be proven that 2 days is the minimum number of days needed.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** jobs = [3,18,15,9], workers = [6,5,1,3]\n**Output:** 3\n**Explanation:**\n- Assign the 2nd worker to the 0th job. It takes them 3 days to finish the job.\n- Assign the 0th worker to the 1st job. It takes them 3 days to finish the job.\n- Assign the 1st worker to the 2nd job. It takes them 3 days to finish the job.\n- Assign the 3rd worker to the 3rd job. It takes them 3 days to finish the job.\nIt takes 3 days for all the jobs to be completed, so return 3.\nIt can be proven that 3 days is the minimum number of days needed.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == jobs.length == workers.length`\n* `1 <= n <= 105`\n* `1 <= jobs[i], workers[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumTime(self, jobs: List[int], workers: List[int]) -> int:\n        jobs.sort()\n        workers.sort()\n        return max((a + b - 1) // b for a, b in zip(jobs, workers))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumTime(self, jobs, workers):\n        jobs.sort()\n        workers.sort()\n        return max((a + b - 1) // b for a, b in zip(jobs, workers))\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random jobs list\n    jobs = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate random workers list\n    workers = random.sample(range(1, 101), len(jobs))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumTime(jobs, workers)\n\n    return jobs, workers, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        jobs, workers, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumTime(jobs, workers) == expected_result\n        print(f\"assert solution.minimumTime({jobs}, {workers}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumTime({jobs}, {workers}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumTime([47, 96], [21, 35]) == 3\nassert solution.minimumTime([19, 23, 24, 38, 54, 68, 89, 94], [11, 20, 34, 39, 60, 64, 76, 93]) == 2\nassert solution.minimumTime([45, 59, 74, 75], [9, 39, 53, 58]) == 5\nassert solution.minimumTime([10, 19, 26, 55, 80, 83, 86, 100], [5, 12, 40, 41, 73, 76, 85, 96]) == 2\nassert solution.minimumTime([1, 10, 46, 48, 49, 81, 85], [17, 33, 51, 57, 77, 88, 96]) == 1\nassert solution.minimumTime([18, 88], [6, 91]) == 3\nassert solution.minimumTime([18, 31, 74, 86], [17, 29, 50, 94]) == 2\nassert solution.minimumTime([50, 51, 77, 93, 97], [8, 11, 39, 61, 69]) == 7\nassert solution.minimumTime([11, 28, 43, 59, 66, 77, 85, 91, 100], [1, 7, 31, 34, 55, 70, 75, 87, 96]) == 11\nassert solution.minimumTime([11, 14, 63, 89, 95, 99], [15, 24, 27, 32, 38, 62]) == 3\nassert solution.minimumTime([1, 6, 24, 46, 53], [4, 17, 26, 52, 72]) == 1\nassert solution.minimumTime([16, 37, 42, 51, 55, 59, 61, 76, 82, 91], [6, 46, 56, 65, 68, 70, 83, 84, 89, 99]) == 3\nassert solution.minimumTime([17, 57], [74, 78]) == 1\nassert solution.minimumTime([19, 26, 41, 48, 57, 69, 70, 75], [10, 13, 21, 66, 77, 82, 90, 99]) == 2\nassert solution.minimumTime([24, 34, 43, 70, 80, 88], [29, 50, 54, 71, 85, 97]) == 1\nassert solution.minimumTime([2, 50, 63, 96, 98, 99], [26, 38, 39, 71, 93, 98]) == 2\nassert solution.minimumTime([3, 6, 24, 25, 54, 60, 69, 88, 90, 95], [3, 5, 25, 30, 34, 36, 42, 65, 67, 91]) == 2\nassert solution.minimumTime([2, 13, 22, 48, 50, 61, 67, 76, 79], [17, 31, 38, 39, 49, 50, 56, 74, 85]) == 2\nassert solution.minimumTime([9, 52, 72, 90], [22, 62, 79, 90]) == 1\nassert solution.minimumTime([20, 22, 29, 36, 56, 69, 73], [9, 34, 35, 51, 57, 72, 89]) == 3\nassert solution.minimumTime([20, 24, 44, 60, 71, 99], [14, 15, 20, 39, 83, 97]) == 3\nassert solution.minimumTime([23, 28, 32, 43, 58, 68, 87, 94], [8, 47, 50, 54, 55, 57, 72, 83]) == 3\nassert solution.minimumTime([41, 42], [20, 52]) == 3\nassert solution.minimumTime([5, 30, 33], [24, 57, 92]) == 1\nassert solution.minimumTime([12, 37, 57, 96], [17, 39, 76, 99]) == 1\nassert solution.minimumTime([21, 27, 35, 38, 46, 50, 59, 79], [17, 38, 49, 55, 64, 65, 71, 88]) == 2\nassert solution.minimumTime([47, 58, 62, 69, 78], [23, 55, 57, 73, 99]) == 3\nassert solution.minimumTime([17, 77], [49, 84]) == 1\nassert solution.minimumTime([2, 21, 26, 34, 57, 99], [37, 43, 56, 66, 70, 78]) == 2\nassert solution.minimumTime([4, 24, 47, 69, 71, 75, 76, 90, 98], [11, 17, 37, 43, 44, 60, 72, 75, 91]) == 2\nassert solution.minimumTime([41, 48, 61, 66, 69, 86, 97, 98], [11, 23, 36, 56, 69, 74, 78, 98]) == 4\nassert solution.minimumTime([2, 3, 16, 23, 28, 34, 44, 45, 80, 98], [14, 16, 25, 26, 50, 52, 62, 63, 65, 69]) == 2\nassert solution.minimumTime([34, 45, 50, 64, 69, 74, 95, 96], [5, 8, 22, 24, 27, 42, 61, 95]) == 7\nassert solution.minimumTime([12, 28, 56, 82], [1, 60, 69, 75]) == 12\nassert solution.minimumTime([10, 27, 29, 43, 47, 73, 84, 96], [10, 33, 43, 44, 65, 67, 69, 78]) == 2\nassert solution.minimumTime([8, 21, 71, 82], [17, 26, 50, 73]) == 2\nassert solution.minimumTime([38, 47, 52, 72, 75, 81, 100], [13, 19, 26, 51, 53, 83, 88]) == 3\nassert solution.minimumTime([36, 46, 50, 62, 69, 85], [1, 19, 26, 61, 73, 91]) == 36\nassert solution.minimumTime([29, 31, 40, 54, 67], [59, 60, 69, 90, 94]) == 1\nassert solution.minimumTime([7, 8, 38, 45, 65, 76], [42, 75, 77, 78, 90, 95]) == 1\nassert solution.minimumTime([3, 4, 17, 79, 84, 97], [9, 57, 59, 63, 65, 78]) == 2\nassert solution.minimumTime([13, 21, 26, 29, 40, 53, 93, 96, 98, 99], [6, 12, 13, 30, 32, 42, 45, 61, 75, 92]) == 3\nassert solution.minimumTime([42, 75, 81, 82], [18, 45, 68, 81]) == 3\nassert solution.minimumTime([3, 63, 64, 66, 69, 83, 95], [20, 22, 34, 38, 68, 70, 80]) == 3\nassert solution.minimumTime([3, 14, 92, 96], [30, 33, 62, 66]) == 2\nassert solution.minimumTime([10, 91], [18, 98]) == 1\nassert solution.minimumTime([4, 15, 19, 26, 39, 71, 73, 78, 97], [19, 43, 54, 67, 76, 79, 84, 90, 100]) == 1\nassert solution.minimumTime([5, 18, 19, 36, 56, 60, 68, 89, 95], [8, 30, 37, 55, 62, 76, 87, 90, 95]) == 1\nassert solution.minimumTime([1, 10, 13, 28, 33, 39, 60, 66, 77, 85], [9, 33, 39, 40, 41, 43, 49, 54, 58, 82]) == 2\nassert solution.minimumTime([21, 69], [4, 91]) == 6\nassert solution.minimumTime([8, 22, 24, 25, 26, 42, 68], [11, 26, 42, 59, 66, 74, 95]) == 1\nassert solution.minimumTime([23, 30, 55, 88], [15, 48, 75, 84]) == 2\nassert solution.minimumTime([24, 32, 51, 61, 67, 77, 82, 83], [8, 26, 31, 51, 59, 85, 92, 96]) == 3\nassert solution.minimumTime([29, 59, 90], [1, 3, 60]) == 29\nassert solution.minimumTime([22, 24, 35, 40, 53, 56, 72, 86, 97, 99], [25, 29, 37, 38, 56, 72, 73, 81, 83, 97]) == 2\nassert solution.minimumTime([12, 33], [56, 80]) == 1\nassert solution.minimumTime([17, 24, 44, 72, 95], [3, 20, 58, 82, 84]) == 6\nassert solution.minimumTime([12, 21, 25, 33, 40, 55, 81], [5, 8, 32, 50, 77, 80, 85]) == 3\nassert solution.minimumTime([31, 34, 70], [4, 70, 79]) == 8\nassert solution.minimumTime([6, 13, 27, 33, 44, 46, 52, 76, 80, 88], [39, 45, 46, 54, 60, 68, 77, 78, 82, 85]) == 2\nassert solution.minimumTime([3, 6, 32, 42, 52, 80, 83, 87, 95, 100], [27, 34, 37, 49, 67, 73, 76, 80, 90, 93]) == 2\nassert solution.minimumTime([13, 14, 20, 23, 39, 50, 57, 60, 76, 92], [1, 4, 5, 32, 34, 68, 76, 81, 88, 90]) == 13\nassert solution.minimumTime([8, 43, 80, 89, 96, 100], [40, 49, 69, 75, 93, 99]) == 2\nassert solution.minimumTime([2, 13, 16, 22, 76, 91, 97], [19, 29, 39, 42, 72, 73, 81]) == 2\nassert solution.minimumTime([21, 35, 43, 66, 68], [24, 34, 69, 79, 94]) == 2\nassert solution.minimumTime([10, 18, 36, 37, 67, 80], [29, 69, 70, 81, 92, 94]) == 1\nassert solution.minimumTime([9, 34, 42, 69, 73], [60, 71, 72, 87, 94]) == 1\nassert solution.minimumTime([18, 22, 41, 62, 78], [2, 16, 23, 48, 61]) == 9\nassert solution.minimumTime([3, 23, 50, 58, 84], [6, 28, 38, 49, 98]) == 2\nassert solution.minimumTime([1, 5, 11, 19, 33, 64, 68, 82, 84, 91], [8, 9, 26, 34, 39, 61, 62, 73, 82, 100]) == 2\nassert solution.minimumTime([4, 27, 31, 40, 42, 54, 59, 63, 65, 89], [1, 8, 17, 33, 42, 47, 66, 73, 84, 87]) == 4\nassert solution.minimumTime([6, 60, 74, 75, 77, 80, 93], [8, 13, 40, 50, 57, 59, 60]) == 5\nassert solution.minimumTime([18, 44, 100], [1, 23, 93]) == 18\nassert solution.minimumTime([41, 48, 49, 55, 60, 87, 89, 96], [12, 13, 18, 26, 42, 43, 87, 98]) == 4\nassert solution.minimumTime([3, 8, 10, 51, 67, 73, 93], [1, 6, 10, 41, 46, 75, 82]) == 3\nassert solution.minimumTime([14, 39, 40, 58, 62, 65, 69, 74, 81], [4, 5, 31, 43, 49, 59, 65, 68, 81]) == 8\nassert solution.minimumTime([1, 31, 54, 72], [10, 16, 72, 93]) == 2\nassert solution.minimumTime([1, 3, 29, 37, 73, 82, 93, 98], [3, 6, 29, 38, 40, 51, 71, 88]) == 2\nassert solution.minimumTime([12, 16, 32, 35, 39, 53, 70, 81, 82, 90], [2, 6, 8, 10, 23, 34, 38, 40, 80, 82]) == 6\nassert solution.minimumTime([12, 13, 14, 32, 36, 37, 47, 57], [21, 42, 46, 50, 64, 65, 73, 76]) == 1\nassert solution.minimumTime([27, 47, 52, 59, 68, 84, 86, 90, 97], [9, 13, 17, 24, 64, 74, 81, 89, 92]) == 4\nassert solution.minimumTime([9, 70, 84, 97], [4, 10, 52, 83]) == 7\nassert solution.minimumTime([45, 50, 63, 82, 90], [2, 13, 41, 55, 92]) == 23\nassert solution.minimumTime([4, 6, 38, 57, 73, 89], [5, 22, 25, 34, 53, 67]) == 2\nassert solution.minimumTime([1, 21, 41, 67], [19, 47, 59, 81]) == 1\nassert solution.minimumTime([9, 32, 76], [38, 48, 88]) == 1\nassert solution.minimumTime([3, 16, 32], [2, 74, 98]) == 2\nassert solution.minimumTime([11, 32, 36, 44, 61, 66, 67, 76, 81, 97], [5, 27, 39, 42, 50, 60, 63, 69, 83, 95]) == 3\nassert solution.minimumTime([2, 13, 33, 47, 69], [45, 47, 51, 59, 98]) == 1\nassert solution.minimumTime([46, 87], [35, 47]) == 2\nassert solution.minimumTime([8, 18], [14, 55]) == 1\nassert solution.minimumTime([20, 31, 44, 59, 61, 69, 88, 98], [4, 17, 37, 49, 73, 76, 85, 91]) == 5\nassert solution.minimumTime([27, 49, 86, 94], [42, 56, 59, 64]) == 2\nassert solution.minimumTime([12, 27, 34, 35, 46, 67, 75], [6, 25, 29, 65, 76, 82, 86]) == 2\nassert solution.minimumTime([4, 25, 64, 79, 86, 89], [31, 46, 53, 55, 65, 81]) == 2\nassert solution.minimumTime([3, 26, 44, 49, 81, 91], [1, 39, 50, 67, 79, 93]) == 3\nassert solution.minimumTime([15, 28, 45, 48, 49], [10, 30, 40, 60, 80]) == 2\nassert solution.minimumTime([14, 21, 31, 44, 61, 92], [3, 13, 58, 66, 83, 94]) == 5\nassert solution.minimumTime([27, 74, 94], [28, 45, 47]) == 2\nassert solution.minimumTime([85, 95], [18, 25]) == 5",
  "inefficient_solution": "class Solution:\n    def minimumTime(self, jobs: List[int], workers: List[int]) -> int:\n        job_assignments = [[] for _ in range(len(workers))]\n        for i, job in enumerate(jobs):\n            for j, worker in enumerate(workers):\n                job_assignments[j].append((worker, job))\n        jobs_per_day = [0] * len(workers)\n        for i, assignment in enumerate(job_assignments):\n            assignment.sort(key=lambda x: x[1])\n            for j, (_, job) in enumerate(assignment):\n                days = (job + i) // workers[i]\n                jobs_per_day[i] = max(jobs_per_day[i], days)\n        return max(jobs_per_day)",
  "is_python": true
}