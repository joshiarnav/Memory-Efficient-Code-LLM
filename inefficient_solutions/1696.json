{
  "problem_idx": 1696,
  "task_name": "Jump Game VI",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nYou are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` **inclusive**.\n\n\nYou want to reach the last index of the array (index `n - 1`). Your **score** is the **sum** of all `nums[j]` for each index `j` you visited in the array.\n\n\nReturn *the **maximum score** you can get*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,-1,-2,4,-7,3], k = 2\n**Output:** 7\n**Explanation:** You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,-5,-2,4,0,3], k = 3\n**Output:** 17\n**Explanation:** You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,-5,-20,4,-1,3,-6,-3], k = 2\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, k <= 105`\n* `-104 <= nums[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxResult(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        f = [0] * n\n        q = deque([0])\n        for i in range(n):\n            if i - q[0] > k:\n                q.popleft()\n            f[i] = nums[i] + f[q[0]]\n            while q and f[q[-1]] <= f[i]:\n                q.pop()\n            q.append(i)\n        return f[-1]\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-10000, 10001), random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(1, 100001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxResult(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxResult(nums, k) == expected_result\n        print(f\"assert solution.maxResult({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxResult({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxResult([-3420, -3926, -377], 14633) == -3797\nassert solution.maxResult([3140, 5747, 1037, 369, -4713, -5655, -5631, 8511, -5331, -1014], 81916) == 17790\nassert solution.maxResult([-4401, -1524, 198, 4468, -7261, 4617, 8822, -9512, 2302], 63494) == 16006\nassert solution.maxResult([-8304, 8455, 6954, 2515, -1255], 95152) == 8365\nassert solution.maxResult([4560, 7248, 7315, -5883], 21250) == 13240\nassert solution.maxResult([-6593, -588, -9482, -867, 441, -369, 155], 14356) == -5997\nassert solution.maxResult([1922, 7642, 926], 14597) == 10490\nassert solution.maxResult([8326, 255, 8642, -5644, 7062, -7248, -891, 3894, -6898, -5461], 16361) == 22718\nassert solution.maxResult([6845, -1356, 8404], 81102) == 15249\nassert solution.maxResult([2854, 2566, -9643, 3432, -8268, -9498, 3864], 66943) == 12716\nassert solution.maxResult([1186, -4228, -2040, -2265, 7644, 6951], 2651) == 15781\nassert solution.maxResult([4327, -8380], 36301) == -4053\nassert solution.maxResult([3226, 1327, 8373, -602, -3792, 91, 264], 64088) == 13281\nassert solution.maxResult([8627, 6511, -8475, -4769, -9084, -6240, -5230], 41395) == 9908\nassert solution.maxResult([8667, -9407, -4627, 2210, 9903, -7944, 1483, -1520], 43559) == 20743\nassert solution.maxResult([-4038, -4876], 85936) == -8914\nassert solution.maxResult([-6690, -4917, 9216, 2035], 7227) == 4561\nassert solution.maxResult([-3029, -1596], 86795) == -4625\nassert solution.maxResult([4580, 7469, 9628, 5696], 55990) == 27373\nassert solution.maxResult([8259, 7256, 2428, -2854, 3398], 84879) == 21341\nassert solution.maxResult([8729, -768, -7202, 6532, -603, 8551], 38094) == 23812\nassert solution.maxResult([9510, -7787, 1992, -48, 830], 8496) == 12332\nassert solution.maxResult([-2511, 5461, -9135, 6807, -2106, -5668, 8891, 762, -9960, 1977], 16878) == 21387\nassert solution.maxResult([8194, 7303, -9563, 504, -5452, -7989, -5370, -5147], 55267) == 10854\nassert solution.maxResult([-8993, -1117, 1749, 4156], 22117) == -3088\nassert solution.maxResult([-2188, 6173, 7920, 3282, -4575, -2113, 8033], 16261) == 23220\nassert solution.maxResult([1057, 6497, -2661, 5879, 7591], 70572) == 21024\nassert solution.maxResult([1815, -8956, 9959, 4377, 6212, 794], 6662) == 23157\nassert solution.maxResult([6452, 3122], 31487) == 9574\nassert solution.maxResult([4075, -8090, -2508, -606, 9041, -1694, -8337, 6149, -8798, -9196], 88865) == 10069\nassert solution.maxResult([-2306, -1786, -8344, 9559, -1667, 3571, 990, -1222], 42889) == 10592\nassert solution.maxResult([9770, 4891, 4477, 2263, -9684, -2534], 613) == 18867\nassert solution.maxResult([5872, 7004, 4768, -2607, 9592, -8362, -9260, 7895, -953, -1623], 59339) == 33508\nassert solution.maxResult([-6933, -5662, 8481, 3886], 68688) == 5434\nassert solution.maxResult([8166, -9216, -9234, -3784, -5931, -568, -8224, 8264, 9464, -8891], 17161) == 17003\nassert solution.maxResult([7234, 4834, 1159, 1287, 5490, 6217], 49596) == 26221\nassert solution.maxResult([-9277, -5916, 4533], 35739) == -4744\nassert solution.maxResult([4854, 7507, -6257, -7502, -9725, 2249, 1016], 75544) == 15626\nassert solution.maxResult([2038, 9602, 1884, -3574, -6854], 69557) == 6670\nassert solution.maxResult([-8157, 5449, 6865, -5955], 23312) == -1798\nassert solution.maxResult([-6108, -3972, 2761, -2716, 5175, -6846], 290) == -5018\nassert solution.maxResult([8703, -4148], 6178) == 4555\nassert solution.maxResult([2736, -6277, -9542], 6090) == -6806\nassert solution.maxResult([5239, 5858, 3848, 7080, 1470], 43931) == 23495\nassert solution.maxResult([-119, -1671, 5380], 95292) == 5261\nassert solution.maxResult([-8014, -788, -3055], 45835) == -11069\nassert solution.maxResult([-3250, 795, -9969, -4864, -4158], 11174) == -6613\nassert solution.maxResult([-6074, 4119, 3888, 7080, -7187, -4572, 9581], 44249) == 18594\nassert solution.maxResult([-3342, 4222, -3017], 55639) == -2137\nassert solution.maxResult([9991, 7888], 13619) == 17879\nassert solution.maxResult([-9044, -6419, 6401, -8336, -5587, -489, 3561, -8779, 6672, -7184], 63538) == 406\nassert solution.maxResult([1874, -1328, 9688, -3121, -5962, 8737, -9481], 59673) == 10818\nassert solution.maxResult([-1283, -2043, -5778, 1548, 603, -1940], 97825) == -1072\nassert solution.maxResult([-1008, 2058, -2960, 854, 4689, -1557], 53390) == 5036\nassert solution.maxResult([4454, 5575], 79472) == 10029\nassert solution.maxResult([7861, -5673, -1347, 8601, -8842, 2882], 1886) == 19344\nassert solution.maxResult([2571, -4353, -565, -9131, 6676, 9734, -2016], 56628) == 16965\nassert solution.maxResult([-3051, -1723, -6281, -3465, 3972, -9602, 4453, -6445, 7890, -2606], 43019) == 10658\nassert solution.maxResult([7755, -7217, -4932, 3402, -6593, 7796, 2948], 41891) == 21901\nassert solution.maxResult([-9968, -5647, 4531], 95147) == -5437\nassert solution.maxResult([-3521, 7342, -5562, -6854, -1169, -2300], 50361) == 1521\nassert solution.maxResult([807, -3695, -5126, 1838, 5767, 3948, -213], 17107) == 12147\nassert solution.maxResult([887, -5453, -6516, -753, -6182, -9004, 2045, 5766], 6309) == 8698\nassert solution.maxResult([5590, 2630, 4532, -196], 58784) == 12556\nassert solution.maxResult([-9654, -1577], 24517) == -11231\nassert solution.maxResult([-6125, -6029, 9788, 9876, -7388, 8974, 6344, -9073], 61707) == 19784\nassert solution.maxResult([6308, 9162, -9155, 2550, -5967, -8859, -3382], 9901) == 14638\nassert solution.maxResult([-1119, -2100, 1703, -5870, 478, -243, 8899], 18947) == 9961\nassert solution.maxResult([1800, 5631, -5131], 35940) == 2300\nassert solution.maxResult([-6235, -6892, -1031, 456, 1914], 9171) == -3865\nassert solution.maxResult([8899, -8438, 7942, 7070], 85862) == 23911\nassert solution.maxResult([973, -3895, -5136, -8983, -7574, -561, 1733, 8677, -8837], 10479) == 2546\nassert solution.maxResult([-4382, 2436, 1959, 9954], 31046) == 9967\nassert solution.maxResult([1239, 1234], 30232) == 2473\nassert solution.maxResult([-4739, -2405, 9270, 4663, -6468, 8205, -9200], 87036) == 8199\nassert solution.maxResult([-9834, -2310], 65726) == -12144\nassert solution.maxResult([-5775, -3038, -6348, 9648, -403, 8183, 2583, 9457], 85794) == 24096\nassert solution.maxResult([3909, 7279], 11959) == 11188\nassert solution.maxResult([2932, -1023, 7253, -1657, 3621, 3705, 6056, 4496], 51076) == 28063\nassert solution.maxResult([7238, -8566, 9439, -1425, 6060, -3372, 8891, -4584, 290], 98599) == 31918\nassert solution.maxResult([2323, -1531, -4808], 34191) == -2485\nassert solution.maxResult([7580, -7229, 5484, -9500, -9890, -9575], 78508) == 3489\nassert solution.maxResult([-6318, 3201, 1274, 9023, -3974, 8436, 3810, 1070, 7539], 20258) == 28035\nassert solution.maxResult([-7796, 7808, 4317, -5835], 68765) == -1506\nassert solution.maxResult([-6984, -8162, 1610, 4969, -2049, 1541, -7629, -8081], 84411) == -6945\nassert solution.maxResult([-1818, 4488, 7687, 9658, 3634, 3690, -579, -3674], 84767) == 23665\nassert solution.maxResult([4047, 9459, -5123, -5924, 909, 8653, 9275, 5602, 7767, 8266], 67361) == 53978\nassert solution.maxResult([-4818, -1243], 69841) == -6061\nassert solution.maxResult([-2884, 8101, 4939, 1405, -7530, 6523], 36965) == 18084\nassert solution.maxResult([-9436, -3697, 6268], 69482) == -3168\nassert solution.maxResult([5890, 9900, 1474, 5480, 3148], 32471) == 25892\nassert solution.maxResult([-6642, -1372, -8312, 4603, 1657, 351, -8053, -1937, -5507], 912) == -5538\nassert solution.maxResult([-3052, -3045, -2952, -8595, -9976], 93784) == -13028\nassert solution.maxResult([-3984, 6086, 4006, 5045, 6689, -3838], 73076) == 14004\nassert solution.maxResult([-9976, 7177, 8734, 4055, 4232, 4462, 8523, 1295, -1632, -8066], 14132) == 20436\nassert solution.maxResult([-2275, -2725, -6010, 276, 3702, 2866, 7593, -1411, 6041, -8598], 80444) == 9605\nassert solution.maxResult([-9008, 9790, 6870, -736, -3039, 731, 8334], 90711) == 16717\nassert solution.maxResult([7588, 5437, 674, -3560, -431, -1663, -1426], 28640) == 12273\nassert solution.maxResult([3955, 9821, 4657, -7433, -5060], 85668) == 13373\nassert solution.maxResult([8733, 3056, 6405, 6076], 84970) == 24270",
  "inefficient_solution": "class Solution:\n    def maxResult(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        f = [[-1 for _ in range(k + 1)] for _ in range(n)]\n        q = [[] for _ in range(n)]\n        for i in range(n):\n            for j in range(1, min(k + 1, i + 1)):\n                if i - j < 0:\n                    f[i][j] = nums[i]\n                else:\n                    f[i][j] = nums[i] + f[i-j][j]\n            for j in range(1, min(k + 1, i + 1)):\n                while q[i-j] and f[i-j][j] <= f[i][j]:\n                    q[i-j].pop()\n                q[i-j].append(f[i][j])\n        ans = float('-inf')\n        for i in range(n):\n            for j in range(1, min(k + 1, i + 1)):\n                ans = max(ans, f[i][j])\n        return ans",
  "is_python": true
}