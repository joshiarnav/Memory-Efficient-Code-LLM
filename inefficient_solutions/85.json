{
  "problem_idx": 85,
  "task_name": "Maximal Rectangle",
  "markdown_description": "\nGiven a `rows x cols`\u00a0binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return *its area*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0085.Maximal%20Rectangle/images/maximal.jpg)\n\n```\n\n**Input:** matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n**Output:** 6\n**Explanation:** The maximal rectangle is shown in the above picture.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** matrix = [[\"0\"]]\n**Output:** 0\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** matrix = [[\"1\"]]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `rows == matrix.length`\n* `cols == matrix[i].length`\n* `1 <= row, cols <= 200`\n* `matrix[i][j]` is `'0'` or `'1'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        heights = [0] * len(matrix[0])\n        ans = 0\n        for row in matrix:\n            for j, v in enumerate(row):\n                if v == \"1\":\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            ans = max(ans, self.largestRectangleArea(heights))\n        return ans\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        stk = []\n        left = [-1] * n\n        right = [n] * n\n        for i, h in enumerate(heights):\n            while stk and heights[stk[-1]] >= h:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            h = heights[i]\n            while stk and heights[stk[-1]] >= h:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        return max(h * (right[i] - left[i] - 1) for i, h in enumerate(heights))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximalRectangle(self, matrix):\n        heights = [0] * len(matrix[0])\n        ans = 0\n        for row in matrix:\n            for j, v in enumerate(row):\n                if v == \"1\":\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            ans = max(ans, self.largestRectangleArea(heights))\n        return ans\n\n    def largestRectangleArea(self, heights):\n        n = len(heights)\n        stk = []\n        left = [-1] * n\n        right = [n] * n\n        for i, h in enumerate(heights):\n            while stk and heights[stk[-1]] >= h:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        stk = []\n        for i in range(n - 1, -1, -1):\n            h = heights[i]\n            while stk and heights[stk[-1]] >= h:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        return max(h * (right[i] - left[i] - 1) for i, h in enumerate(heights))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random matrix\n    rows = random.randint(1, 10)\n    cols = random.randint(1, 10)\n    matrix = [[random.choice([\"0\", \"1\"]) for _ in range(cols)] for _ in range(rows)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximalRectangle(matrix)\n\n    return matrix, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        matrix, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximalRectangle(matrix) == expected_result\n        print(f\"assert solution.maximalRectangle({matrix}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximalRectangle({matrix}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximalRectangle([['1', '0', '1', '1', '0']]) == 2\nassert solution.maximalRectangle([['0', '0', '0', '0', '0', '1', '0', '1', '1', '0'], ['1', '0', '1', '1', '1', '1', '0', '0', '0', '1']]) == 4\nassert solution.maximalRectangle([['1', '0', '1', '0', '0', '1', '0', '1', '0', '1'], ['0', '1', '1', '0', '1', '1', '0', '0', '0', '1'], ['1', '0', '0', '0', '1', '0', '0', '0', '1', '1'], ['1', '0', '0', '1', '0', '1', '0', '0', '0', '1'], ['1', '1', '0', '0', '1', '1', '0', '0', '0', '0'], ['1', '0', '0', '1', '0', '1', '0', '0', '0', '1'], ['0', '0', '1', '0', '0', '0', '1', '0', '1', '1'], ['0', '0', '1', '1', '0', '0', '0', '1', '1', '1']]) == 4\nassert solution.maximalRectangle([['0', '0', '1', '0', '1', '0', '1', '0'], ['1', '1', '1', '0', '0', '1', '0', '1'], ['1', '1', '1', '1', '1', '1', '0', '0'], ['0', '1', '1', '1', '0', '1', '1', '1'], ['1', '0', '1', '0', '1', '0', '1', '0'], ['1', '0', '1', '0', '1', '0', '0', '0'], ['1', '1', '1', '0', '1', '0', '1', '1'], ['0', '0', '0', '1', '0', '0', '1', '1'], ['1', '0', '1', '0', '1', '1', '0', '1']]) == 7\nassert solution.maximalRectangle([['1', '1', '0'], ['0', '0', '1'], ['0', '1', '1'], ['0', '1', '1'], ['0', '0', '1'], ['0', '1', '0'], ['0', '0', '1']]) == 4\nassert solution.maximalRectangle([['1', '1', '1', '0', '1', '1', '1'], ['1', '0', '1', '0', '0', '1', '1'], ['1', '0', '0', '1', '1', '0', '0'], ['0', '1', '1', '0', '1', '1', '1'], ['0', '1', '0', '0', '0', '0', '0']]) == 4\nassert solution.maximalRectangle([['0', '1', '1'], ['1', '1', '0'], ['0', '1', '1']]) == 3\nassert solution.maximalRectangle([['0', '1', '1', '1', '0', '0', '0', '0', '1', '0'], ['0', '0', '1', '1', '1', '0', '0', '1', '0', '1'], ['1', '1', '1', '0', '1', '1', '1', '0', '0', '1'], ['1', '0', '1', '0', '1', '1', '0', '0', '1', '1'], ['1', '1', '0', '0', '0', '0', '0', '1', '1', '1'], ['1', '1', '0', '0', '0', '1', '0', '1', '0', '1'], ['1', '0', '1', '0', '1', '0', '1', '0', '1', '0'], ['1', '0', '0', '1', '0', '0', '0', '0', '1', '0']]) == 6\nassert solution.maximalRectangle([['0', '0', '1'], ['0', '1', '1'], ['0', '1', '0'], ['1', '0', '1'], ['0', '1', '1'], ['0', '0', '1'], ['1', '1', '1']]) == 4\nassert solution.maximalRectangle([['0', '0', '0', '0', '0', '0'], ['1', '1', '0', '0', '0', '0'], ['1', '1', '0', '1', '1', '1'], ['0', '0', '0', '1', '0', '1'], ['0', '0', '1', '0', '0', '1'], ['0', '0', '1', '0', '0', '0'], ['1', '0', '1', '1', '0', '1']]) == 4\nassert solution.maximalRectangle([['1', '0', '1', '0', '1'], ['0', '1', '0', '0', '1'], ['1', '0', '1', '0', '1']]) == 3\nassert solution.maximalRectangle([['0', '1', '1', '0'], ['1', '1', '0', '1'], ['1', '0', '0', '1'], ['0', '0', '1', '1'], ['1', '0', '1', '0'], ['0', '1', '1', '1'], ['0', '0', '0', '0'], ['0', '0', '1', '1']]) == 3\nassert solution.maximalRectangle([['0', '0', '1']]) == 1\nassert solution.maximalRectangle([['1', '0', '0', '1', '1', '1'], ['0', '0', '1', '0', '0', '0'], ['1', '0', '1', '1', '0', '1'], ['0', '0', '0', '1', '1', '0'], ['1', '1', '1', '1', '0', '1'], ['1', '1', '1', '1', '0', '0'], ['0', '0', '1', '0', '0', '0']]) == 8\nassert solution.maximalRectangle([['0', '0', '1', '0', '1', '0', '1', '0'], ['0', '1', '0', '0', '0', '0', '1', '0'], ['1', '1', '0', '0', '0', '1', '0', '1'], ['0', '1', '0', '1', '1', '1', '1', '1'], ['0', '0', '1', '1', '0', '0', '1', '0'], ['0', '0', '0', '0', '0', '1', '0', '0'], ['1', '1', '0', '0', '1', '0', '0', '0'], ['0', '1', '1', '1', '1', '1', '0', '0']]) == 5\nassert solution.maximalRectangle([['1', '1', '1', '1'], ['0', '1', '0', '1']]) == 4\nassert solution.maximalRectangle([['1', '0', '1', '1', '0', '1', '1'], ['1', '1', '0', '0', '1', '0', '0'], ['1', '1', '0', '1', '0', '1', '0'], ['1', '1', '0', '1', '1', '0', '1'], ['1', '1', '0', '1', '0', '0', '0'], ['0', '1', '1', '1', '0', '1', '1'], ['1', '1', '1', '1', '0', '0', '1'], ['1', '1', '0', '1', '1', '0', '1'], ['0', '0', '0', '0', '1', '1', '1']]) == 8\nassert solution.maximalRectangle([['0'], ['0'], ['1']]) == 1\nassert solution.maximalRectangle([['1', '1', '1', '0', '0', '1', '0', '0'], ['0', '1', '0', '0', '1', '1', '1', '1'], ['0', '1', '0', '0', '0', '0', '0', '1'], ['0', '0', '1', '1', '1', '1', '1', '1'], ['1', '0', '0', '1', '0', '0', '1', '0'], ['1', '1', '1', '0', '1', '1', '0', '0']]) == 6\nassert solution.maximalRectangle([['1', '0', '0', '0', '0', '1', '1', '0'], ['0', '0', '0', '1', '0', '1', '1', '1'], ['0', '0', '1', '0', '0', '0', '1', '0']]) == 4\nassert solution.maximalRectangle([['1', '1', '0', '0', '1', '1'], ['0', '1', '1', '1', '0', '0']]) == 3\nassert solution.maximalRectangle([['1', '0', '0'], ['1', '1', '1'], ['1', '1', '1'], ['1', '0', '1'], ['0', '1', '0'], ['0', '0', '0'], ['1', '0', '1'], ['0', '0', '0'], ['1', '1', '0']]) == 6\nassert solution.maximalRectangle([['1', '1', '1', '1', '1', '0', '1', '1', '1'], ['0', '0', '1', '1', '0', '0', '0', '0', '1'], ['0', '1', '0', '0', '1', '0', '1', '1', '1']]) == 5\nassert solution.maximalRectangle([['0', '0', '1', '0', '0', '0', '1', '1'], ['1', '1', '0', '1', '1', '0', '1', '0'], ['0', '0', '1', '1', '0', '0', '0', '1'], ['1', '0', '0', '0', '0', '1', '1', '1']]) == 3\nassert solution.maximalRectangle([['0', '1', '0', '1', '1', '0'], ['0', '1', '0', '0', '0', '0'], ['0', '0', '0', '0', '1', '1'], ['1', '1', '1', '0', '0', '0'], ['1', '1', '0', '0', '0', '1'], ['0', '1', '0', '1', '0', '0'], ['0', '1', '1', '0', '1', '0'], ['1', '0', '1', '1', '0', '1']]) == 4\nassert solution.maximalRectangle([['1', '1', '0'], ['1', '1', '0'], ['1', '1', '1'], ['0', '0', '0']]) == 6\nassert solution.maximalRectangle([['1', '1', '0', '0'], ['1', '0', '1', '0']]) == 2\nassert solution.maximalRectangle([['0', '1', '0', '0', '1'], ['1', '0', '0', '1', '1'], ['1', '1', '1', '1', '0'], ['1', '1', '1', '1', '0'], ['1', '1', '1', '1', '0'], ['1', '1', '1', '1', '1'], ['0', '1', '1', '1', '1'], ['1', '0', '0', '0', '1'], ['1', '1', '0', '0', '0'], ['0', '0', '0', '0', '1']]) == 16\nassert solution.maximalRectangle([['0', '1'], ['0', '0'], ['0', '0']]) == 1\nassert solution.maximalRectangle([['0'], ['0'], ['0'], ['1'], ['0'], ['1'], ['1'], ['1']]) == 3\nassert solution.maximalRectangle([['0'], ['0'], ['1'], ['1'], ['0'], ['0'], ['1'], ['0'], ['0']]) == 2\nassert solution.maximalRectangle([['0', '0', '0', '0', '1']]) == 1\nassert solution.maximalRectangle([['0', '0', '0', '1', '0', '1', '0', '1'], ['1', '0', '0', '0', '0', '0', '1', '0'], ['1', '1', '0', '1', '0', '0', '0', '1'], ['0', '1', '1', '0', '0', '1', '0', '0'], ['1', '0', '0', '0', '1', '1', '0', '1'], ['0', '0', '0', '1', '1', '0', '0', '0'], ['0', '0', '0', '1', '0', '1', '1', '0'], ['1', '1', '0', '0', '1', '0', '0', '1']]) == 2\nassert solution.maximalRectangle([['0', '0', '0', '1', '0', '0', '0'], ['1', '1', '1', '1', '1', '1', '1'], ['1', '0', '0', '0', '0', '0', '1']]) == 7\nassert solution.maximalRectangle([['0', '1', '1', '0', '1'], ['0', '0', '1', '1', '0'], ['1', '0', '0', '0', '0'], ['0', '0', '1', '1', '1'], ['0', '1', '1', '0', '0'], ['0', '0', '0', '1', '1']]) == 3\nassert solution.maximalRectangle([['1', '0', '0', '1', '1', '0', '0', '0', '0', '1'], ['0', '0', '0', '0', '1', '0', '1', '1', '1', '0'], ['1', '1', '0', '1', '0', '0', '0', '1', '1', '0'], ['1', '0', '0', '0', '1', '1', '0', '0', '1', '0'], ['0', '0', '0', '0', '1', '0', '0', '1', '0', '1'], ['0', '0', '1', '1', '0', '1', '1', '0', '1', '0'], ['1', '0', '1', '0', '1', '0', '1', '1', '0', '0']]) == 4\nassert solution.maximalRectangle([['1', '1'], ['1', '1'], ['0', '1'], ['0', '1'], ['1', '0'], ['1', '1']]) == 4\nassert solution.maximalRectangle([['0', '0', '1'], ['1', '1', '1'], ['1', '0', '1'], ['0', '1', '0']]) == 3\nassert solution.maximalRectangle([['1', '0', '1', '0', '1', '1'], ['0', '1', '1', '1', '0', '0']]) == 3\nassert solution.maximalRectangle([['0', '1', '1'], ['0', '0', '1'], ['1', '1', '1'], ['0', '0', '0'], ['0', '1', '0']]) == 3\nassert solution.maximalRectangle([['1', '0', '1', '0', '1', '1', '0', '0', '0']]) == 2\nassert solution.maximalRectangle([['1', '1', '1', '1', '0'], ['1', '0', '1', '0', '0'], ['0', '0', '1', '0', '1']]) == 4\nassert solution.maximalRectangle([['0', '1', '1', '0']]) == 2\nassert solution.maximalRectangle([['1'], ['0'], ['0'], ['0'], ['1'], ['0'], ['1']]) == 1\nassert solution.maximalRectangle([['0', '1'], ['0', '1'], ['0', '0'], ['0', '0'], ['0', '1']]) == 2\nassert solution.maximalRectangle([['0', '1', '0', '1'], ['1', '0', '1', '1'], ['1', '1', '1', '0'], ['0', '1', '1', '1'], ['1', '1', '1', '0']]) == 6\nassert solution.maximalRectangle([['1', '1', '0', '0', '1', '1']]) == 2\nassert solution.maximalRectangle([['0', '0', '1', '0', '1', '0'], ['0', '1', '0', '0', '0', '0'], ['0', '0', '0', '1', '0', '1'], ['1', '0', '0', '1', '0', '1']]) == 2\nassert solution.maximalRectangle([['1', '1'], ['0', '0'], ['0', '0'], ['0', '1'], ['0', '0'], ['1', '0'], ['0', '1']]) == 2\nassert solution.maximalRectangle([['1', '0', '0', '1']]) == 1\nassert solution.maximalRectangle([['0', '1', '1'], ['1', '0', '1'], ['1', '0', '0'], ['0', '1', '1'], ['1', '0', '1'], ['1', '0', '0'], ['1', '1', '1'], ['0', '1', '0'], ['0', '0', '1'], ['0', '0', '1']]) == 3\nassert solution.maximalRectangle([['1', '0', '1', '1', '1', '0'], ['0', '0', '1', '0', '1', '1'], ['1', '0', '1', '0', '0', '1']]) == 3\nassert solution.maximalRectangle([['1', '1', '0', '1'], ['1', '1', '1', '1'], ['1', '1', '0', '0']]) == 6\nassert solution.maximalRectangle([['0', '0', '0', '0'], ['0', '0', '0', '0'], ['1', '0', '1', '0']]) == 1\nassert solution.maximalRectangle([['0', '1', '0', '0', '0', '0', '1', '0'], ['0', '1', '0', '1', '0', '0', '0', '0'], ['0', '1', '1', '1', '1', '0', '0', '0'], ['0', '0', '1', '0', '0', '0', '0', '0'], ['1', '0', '0', '0', '1', '1', '1', '0'], ['0', '1', '0', '0', '0', '0', '0', '0']]) == 4\nassert solution.maximalRectangle([['1', '0', '0'], ['0', '1', '0']]) == 1\nassert solution.maximalRectangle([['0', '1', '0', '0', '1', '1', '0', '0', '0', '1'], ['0', '1', '1', '1', '0', '0', '1', '0', '0', '0']]) == 3\nassert solution.maximalRectangle([['0', '0', '1'], ['0', '0', '1']]) == 2\nassert solution.maximalRectangle([['0', '0', '1', '0', '0', '0', '1', '1', '0', '1'], ['1', '0', '1', '1', '0', '0', '0', '1', '1', '0'], ['0', '0', '0', '0', '1', '0', '1', '0', '0', '0']]) == 2\nassert solution.maximalRectangle([['1', '1', '1', '1'], ['0', '1', '1', '1'], ['0', '0', '1', '1'], ['0', '0', '0', '0'], ['0', '0', '1', '0'], ['0', '0', '0', '1'], ['1', '1', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0']]) == 6\nassert solution.maximalRectangle([['0', '0'], ['0', '1']]) == 1\nassert solution.maximalRectangle([['1', '0', '1'], ['1', '1', '0'], ['1', '1', '0'], ['0', '0', '1'], ['0', '0', '1'], ['1', '0', '1'], ['1', '0', '1'], ['0', '1', '1'], ['0', '1', '0'], ['1', '1', '1']]) == 5\nassert solution.maximalRectangle([['0', '0', '1', '1', '0', '1', '1', '1', '1'], ['0', '1', '0', '1', '0', '0', '0', '0', '0'], ['0', '1', '1', '1', '1', '0', '0', '0', '0'], ['0', '1', '1', '0', '0', '1', '1', '0', '1'], ['0', '0', '1', '1', '0', '0', '1', '0', '1']]) == 4\nassert solution.maximalRectangle([['0', '1', '1', '0'], ['0', '1', '1', '1'], ['1', '1', '1', '1'], ['1', '1', '0', '1'], ['0', '1', '1', '0'], ['1', '1', '1', '0'], ['0', '0', '0', '0']]) == 6\nassert solution.maximalRectangle([['0', '1', '1', '0', '1', '0', '1', '0', '0', '1'], ['1', '1', '0', '1', '1', '0', '0', '1', '0', '0'], ['0', '1', '0', '0', '1', '1', '1', '1', '1', '1'], ['0', '0', '1', '0', '1', '1', '0', '1', '1', '0'], ['1', '1', '0', '1', '0', '1', '1', '0', '0', '1'], ['0', '1', '0', '1', '1', '1', '1', '1', '1', '1'], ['1', '0', '0', '0', '0', '1', '0', '1', '0', '1']]) == 7\nassert solution.maximalRectangle([['1', '0', '0', '0'], ['0', '0', '1', '1']]) == 2\nassert solution.maximalRectangle([['0', '0'], ['0', '1'], ['1', '0'], ['1', '1'], ['1', '1'], ['0', '0'], ['0', '0'], ['1', '0'], ['1', '1'], ['0', '0']]) == 4\nassert solution.maximalRectangle([['0', '1', '1', '1', '1'], ['0', '0', '1', '0', '1'], ['1', '1', '1', '1', '0'], ['1', '1', '0', '0', '0'], ['1', '1', '0', '0', '1'], ['1', '1', '1', '0', '0'], ['0', '0', '1', '1', '1'], ['1', '0', '1', '0', '1'], ['0', '0', '1', '0', '0']]) == 8\nassert solution.maximalRectangle([['0', '1', '1']]) == 2\nassert solution.maximalRectangle([['0', '0', '0', '1', '0'], ['0', '1', '0', '1', '0'], ['0', '0', '1', '1', '1'], ['1', '0', '0', '0', '0'], ['0', '1', '1', '0', '1'], ['0', '1', '1', '0', '1'], ['0', '1', '0', '0', '1']]) == 4\nassert solution.maximalRectangle([['1', '1', '1', '1', '1', '1', '0', '1', '0', '1'], ['1', '1', '0', '0', '1', '1', '0', '1', '0', '1'], ['0', '0', '1', '0', '1', '0', '0', '1', '0', '0'], ['1', '0', '1', '1', '1', '0', '0', '0', '1', '0']]) == 6\nassert solution.maximalRectangle([['1', '0', '0', '0', '1', '0', '0', '1'], ['0', '1', '1', '1', '0', '1', '0', '1'], ['1', '1', '0', '1', '1', '1', '0', '0'], ['1', '1', '0', '0', '1', '0', '1', '0']]) == 4\nassert solution.maximalRectangle([['1', '1'], ['1', '0'], ['1', '0'], ['0', '0'], ['1', '1'], ['0', '0'], ['0', '0'], ['1', '1'], ['1', '0']]) == 3\nassert solution.maximalRectangle([['0', '0', '1', '0', '1', '1', '1'], ['0', '0', '0', '1', '1', '1', '1'], ['0', '0', '0', '0', '1', '1', '1'], ['1', '0', '0', '1', '0', '1', '1'], ['0', '1', '0', '0', '1', '1', '0']]) == 9\nassert solution.maximalRectangle([['0', '0', '1', '1'], ['1', '0', '0', '0'], ['0', '1', '1', '0'], ['0', '0', '1', '1']]) == 2\nassert solution.maximalRectangle([['1', '1', '1', '0', '0', '0'], ['0', '1', '0', '1', '1', '0']]) == 3\nassert solution.maximalRectangle([['1', '1', '1', '0', '1', '0'], ['1', '0', '1', '0', '0', '0'], ['1', '0', '0', '1', '0', '1'], ['0', '1', '0', '0', '0', '1']]) == 3\nassert solution.maximalRectangle([['0', '1', '1', '1', '1', '1'], ['1', '1', '0', '0', '0', '1'], ['0', '1', '0', '0', '0', '1'], ['0', '1', '0', '1', '0', '1'], ['0', '0', '0', '1', '0', '1'], ['0', '0', '0', '0', '0', '0'], ['0', '1', '0', '1', '1', '0'], ['0', '0', '1', '0', '0', '1'], ['1', '0', '0', '0', '1', '1']]) == 5\nassert solution.maximalRectangle([['0', '1', '0', '1']]) == 1\nassert solution.maximalRectangle([['0', '1', '0', '0'], ['0', '1', '1', '0'], ['0', '0', '0', '0']]) == 2\nassert solution.maximalRectangle([['0', '1', '0', '1', '1', '0', '1'], ['0', '1', '1', '0', '0', '1', '0'], ['1', '1', '0', '0', '0', '1', '1'], ['0', '1', '0', '0', '0', '0', '0'], ['0', '1', '0', '1', '0', '1', '0'], ['0', '0', '1', '0', '0', '1', '1'], ['0', '1', '0', '0', '0', '0', '1'], ['0', '0', '0', '1', '1', '0', '1']]) == 5\nassert solution.maximalRectangle([['0', '1', '1', '0', '0', '0'], ['0', '1', '1', '0', '1', '0']]) == 4\nassert solution.maximalRectangle([['1', '1', '1', '0', '1', '1', '0', '1', '0', '1'], ['0', '0', '1', '0', '0', '1', '1', '0', '1', '0'], ['1', '1', '0', '0', '1', '1', '0', '0', '0', '0'], ['1', '0', '1', '1', '1', '1', '0', '0', '1', '1'], ['0', '1', '1', '1', '0', '1', '1', '0', '0', '1'], ['1', '1', '1', '1', '1', '0', '1', '0', '1', '1'], ['0', '1', '1', '1', '0', '1', '0', '0', '1', '0']]) == 9\nassert solution.maximalRectangle([['1', '1', '0', '0', '1', '1'], ['0', '1', '1', '0', '0', '0'], ['1', '0', '1', '0', '0', '1'], ['1', '0', '1', '0', '1', '0']]) == 3\nassert solution.maximalRectangle([['0', '1', '1'], ['1', '0', '1'], ['0', '0', '1']]) == 3\nassert solution.maximalRectangle([['1', '0', '0', '1', '1', '1'], ['1', '0', '1', '1', '0', '0'], ['1', '0', '1', '0', '0', '0'], ['0', '1', '0', '0', '0', '1'], ['1', '0', '0', '1', '0', '1'], ['0', '1', '0', '1', '1', '0']]) == 3\nassert solution.maximalRectangle([['0', '0', '0', '1', '1', '0', '1', '1'], ['1', '1', '1', '0', '0', '1', '0', '0'], ['0', '1', '1', '0', '0', '1', '0', '0'], ['1', '1', '1', '0', '1', '0', '1', '1'], ['1', '1', '0', '1', '0', '1', '0', '0'], ['0', '0', '1', '0', '1', '0', '1', '1']]) == 6\nassert solution.maximalRectangle([['0', '1', '1', '1', '1', '0', '0', '1', '0'], ['0', '1', '1', '0', '0', '0', '0', '1', '1'], ['1', '0', '0', '0', '0', '0', '1', '1', '0'], ['0', '1', '0', '0', '0', '0', '1', '1', '1'], ['1', '0', '1', '0', '1', '1', '0', '1', '0'], ['1', '0', '0', '1', '0', '1', '1', '1', '0'], ['0', '0', '0', '0', '0', '1', '1', '1', '0']]) == 7\nassert solution.maximalRectangle([['1', '1', '0'], ['1', '0', '0'], ['0', '0', '0'], ['1', '1', '0'], ['1', '1', '1'], ['1', '0', '0'], ['1', '0', '0']]) == 4\nassert solution.maximalRectangle([['0', '0', '1', '1', '0', '1', '0'], ['0', '1', '1', '0', '0', '1', '1'], ['0', '1', '0', '1', '0', '1', '0'], ['0', '0', '1', '1', '0', '0', '0'], ['0', '1', '0', '1', '1', '0', '1'], ['0', '1', '1', '0', '0', '1', '0'], ['0', '0', '0', '1', '0', '0', '0']]) == 3\nassert solution.maximalRectangle([['0', '0', '0'], ['1', '1', '1']]) == 3\nassert solution.maximalRectangle([['1', '0', '0'], ['0', '0', '1'], ['0', '0', '1'], ['1', '0', '0']]) == 2\nassert solution.maximalRectangle([['0', '1', '0', '0', '0', '0'], ['0', '1', '1', '1', '0', '1'], ['1', '0', '1', '0', '1', '0'], ['1', '0', '0', '0', '0', '0'], ['0', '1', '1', '0', '1', '0'], ['0', '0', '1', '1', '1', '0'], ['0', '0', '0', '0', '1', '0']]) == 3\nassert solution.maximalRectangle([['1', '0', '1', '0', '0', '0', '0', '0', '0', '1'], ['0', '0', '0', '1', '0', '1', '0', '1', '0', '0'], ['1', '1', '1', '0', '0', '0', '1', '0', '1', '0'], ['0', '1', '0', '0', '1', '0', '1', '1', '1', '0'], ['1', '0', '1', '1', '1', '1', '0', '0', '0', '1'], ['1', '0', '0', '1', '0', '1', '0', '1', '0', '1'], ['1', '1', '1', '0', '1', '0', '0', '0', '1', '1'], ['1', '0', '1', '0', '1', '1', '1', '0', '0', '0'], ['1', '0', '0', '0', '0', '0', '0', '0', '0', '0'], ['1', '1', '0', '0', '0', '0', '1', '1', '1', '1']]) == 6\nassert solution.maximalRectangle([['1', '1', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '1', '0', '1', '1', '0', '1', '0'], ['1', '1', '1', '0', '0', '0', '0', '1', '1'], ['0', '0', '1', '0', '1', '0', '1', '0', '0'], ['0', '0', '1', '1', '0', '0', '1', '1', '1'], ['1', '1', '1', '1', '1', '0', '0', '0', '0'], ['1', '1', '1', '1', '0', '0', '0', '1', '0'], ['1', '1', '0', '0', '1', '0', '0', '0', '1'], ['0', '1', '0', '0', '1', '0', '0', '1', '1']]) == 8\nassert solution.maximalRectangle([['1', '1', '0', '0', '0'], ['1', '1', '1', '1', '1'], ['0', '0', '1', '0', '1'], ['0', '0', '1', '0', '0'], ['0', '1', '0', '1', '0'], ['1', '0', '0', '0', '1'], ['1', '1', '1', '0', '0']]) == 5\nassert solution.maximalRectangle([['1', '0', '0', '0', '1', '0', '0', '1', '1', '0']]) == 2\nassert solution.maximalRectangle([['1', '0', '0', '1', '1', '1', '0', '1', '1', '0'], ['0', '0', '0', '1', '0', '1', '0', '1', '0', '0']]) == 3\nassert solution.maximalRectangle([['1', '0', '0', '0', '1', '1', '0'], ['0', '1', '0', '1', '0', '0', '0'], ['0', '0', '0', '0', '0', '1', '1'], ['1', '0', '0', '1', '0', '1', '1'], ['1', '1', '1', '1', '1', '1', '0'], ['1', '1', '0', '0', '1', '1', '0'], ['1', '1', '1', '1', '0', '1', '1'], ['0', '0', '1', '1', '0', '0', '0']]) == 6\nassert solution.maximalRectangle([['0'], ['1']]) == 1",
  "inefficient_solution": "class Solution:\n    def maximalRectangle(self, matrix: List[List[str]]) -> int:\n        ans = 0\n        for row in matrix:\n            heights = [0] * len(row)\n            for j, v in enumerate(row):\n                if v == \"1\":\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            ans = max(ans, self.largestRectangleArea(heights))\n        return ans\n\n    def largestRectangleArea(self, heights: List[int]) -> int:\n        n = len(heights)\n        areas = []\n        for i in range(n):\n            area = heights[i]\n            for j in range(i, n):\n                area = max(area, heights[j])\n                areas.append(area)\n        max_area = 0\n        for i in range(len(areas)):\n            for j in range(i + 1, len(areas)):\n                max_area = max(max_area, areas[i] * areas[j])\n        return max_area",
  "is_python": true
}