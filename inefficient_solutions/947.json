{
  "problem_idx": 947,
  "task_name": "Most Stones Removed with Same Row or Column",
  "markdown_description": "\nOn a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.\n\n\nA stone can be removed if it shares either **the same row or the same column** as another stone that has not been removed.\n\n\nGiven an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return *the largest possible number of stones that can be removed*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\n**Output:** 5\n**Explanation:** One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\n**Output:** 3\n**Explanation:** One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** stones = [[0,0]]\n**Output:** 0\n**Explanation:** [0,0] is the only stone on the plane, so you cannot remove it.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= stones.length <= 1000`\n* `0 <= xi, yi <= 104`\n* No two stones are at the same coordinate point.\n\n\n",
  "canonical_solution": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = 10010\n        p = list(range(n << 1))\n        for x, y in stones:\n            p[find(x)] = find(y + n)\n\n        s = {find(x) for x, _ in stones}\n        return len(stones) - len(s)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\n# Generate random test cases\ndef generate_test_case() -> (List[List[int]], int):\n    solution = Solution()\n\n    # Generate random stones list\n    stones = [[random.randint(0, 10000), random.randint(0, 10000)] for _ in range(random.randint(1, 10))]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.removeStones(stones)\n    \n    return stones, expected_result\n\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    \n    for i in range(num_tests):\n        stones, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.removeStones(stones) == expected_result\n        print(f\"assert solution.removeStones({stones}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.removeStones({stones}) == {expected_result}\")\n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.removeStones([[5794, 9204], [2083, 6760], [1835, 1676], [9441, 9320], [9033, 1215], [9032, 8451]]) == 0\nassert solution.removeStones([[4528, 2725]]) == 0\nassert solution.removeStones([[9560, 1002]]) == 0\nassert solution.removeStones([[4336, 8444], [9369, 4961], [1908, 3047], [6609, 4107], [779, 9445], [6976, 1478], [4166, 3403], [3422, 3670], [9815, 6247]]) == 0\nassert solution.removeStones([[8237, 2930], [34, 3895]]) == 0\nassert solution.removeStones([[1557, 679], [8846, 5913], [4479, 8259], [4345, 6063], [8242, 3100], [2041, 294]]) == 0\nassert solution.removeStones([[5923, 5789], [5689, 5694], [8460, 6541], [7455, 6642]]) == 0\nassert solution.removeStones([[7936, 4703], [1711, 7839], [3775, 9808], [8268, 7283], [9582, 534]]) == 0\nassert solution.removeStones([[5640, 7997], [5959, 6667], [4595, 324], [9237, 4965], [2868, 219], [610, 8313]]) == 0\nassert solution.removeStones([[2324, 1777], [5872, 4593], [6206, 2297], [8033, 2359], [212, 3930], [9749, 2863], [1142, 9761], [3377, 1705], [7835, 6592]]) == 0\nassert solution.removeStones([[8988, 1205], [8363, 8385], [8011, 3712], [9204, 7471], [4763, 2680], [3390, 6887], [4741, 871], [3375, 6391], [6795, 8194]]) == 0\nassert solution.removeStones([[904, 1638], [8861, 6070]]) == 0\nassert solution.removeStones([[8813, 6123], [1522, 6737], [5832, 630], [8863, 4503], [8312, 182], [8897, 7536], [9050, 9050], [8061, 8621], [699, 9033], [8318, 2423]]) == 0\nassert solution.removeStones([[9822, 3139], [8442, 9251]]) == 0\nassert solution.removeStones([[2518, 5937], [2924, 8225], [6461, 2987], [624, 2972], [2082, 7389], [3811, 2525], [5447, 1473], [7223, 4373], [7525, 7207], [7629, 3143]]) == 0\nassert solution.removeStones([[9054, 7325], [7223, 535]]) == 0\nassert solution.removeStones([[1475, 1587], [2398, 246], [7496, 8778], [1480, 5138], [5625, 7800], [8304, 8858], [6921, 361], [441, 4802], [6936, 3518]]) == 0\nassert solution.removeStones([[6854, 1890], [9736, 8769], [9531, 3403], [111, 2862], [2851, 3536], [6399, 5383], [1419, 5137], [8862, 9368], [1582, 4783]]) == 0\nassert solution.removeStones([[9317, 751], [2641, 6571], [6773, 8947], [3256, 2956], [9652, 8944]]) == 0\nassert solution.removeStones([[206, 6017], [7436, 2179], [2348, 3142], [7851, 4486], [4152, 5085], [4514, 6603], [9755, 9637], [7004, 4458], [5741, 2876], [5442, 5722]]) == 0\nassert solution.removeStones([[1040, 9921], [5252, 88]]) == 0\nassert solution.removeStones([[6, 2863], [1373, 926], [5749, 1506], [4775, 9460], [2119, 430]]) == 0\nassert solution.removeStones([[2891, 9726], [8261, 7140]]) == 0\nassert solution.removeStones([[1795, 4334], [5042, 9696], [9477, 1022], [5827, 7417], [7827, 2977], [5335, 900]]) == 0\nassert solution.removeStones([[916, 2022], [4701, 5182], [3366, 1110], [7005, 6070], [9840, 2814], [4604, 100], [6790, 1448], [5761, 8940], [632, 7484], [736, 8975]]) == 0\nassert solution.removeStones([[7759, 1658], [884, 7320], [3463, 8937], [2631, 5595], [3992, 1938], [1584, 1387]]) == 0\nassert solution.removeStones([[4089, 9912], [9731, 2502], [1038, 2830], [7683, 2038], [4760, 5407], [7919, 7754]]) == 0\nassert solution.removeStones([[7536, 3731], [416, 8922], [1561, 2681], [566, 1018]]) == 0\nassert solution.removeStones([[5658, 7528], [6973, 5814], [8004, 5091]]) == 0\nassert solution.removeStones([[4169, 8792], [9516, 5708], [7768, 3613]]) == 0\nassert solution.removeStones([[1284, 5538]]) == 0\nassert solution.removeStones([[414, 1662], [5211, 4772], [7232, 1462], [5622, 7913], [6050, 8316], [7378, 301]]) == 0\nassert solution.removeStones([[8867, 5224], [9827, 4650], [3967, 7217], [1730, 2755], [767, 7914], [1692, 4812], [5085, 4490]]) == 0\nassert solution.removeStones([[7421, 955], [4099, 5715], [386, 8811]]) == 0\nassert solution.removeStones([[6713, 1114], [2840, 8631], [4803, 2665], [4675, 3316]]) == 0\nassert solution.removeStones([[2219, 5900], [9084, 3613], [8498, 8594], [6034, 9654], [7605, 5123]]) == 0\nassert solution.removeStones([[7817, 1910], [7108, 7306], [6910, 4591], [1975, 7570], [984, 6493], [7233, 8159]]) == 0\nassert solution.removeStones([[7788, 9584]]) == 0\nassert solution.removeStones([[5856, 1117], [8708, 8746], [3162, 5616], [6773, 6195], [5014, 7695], [3711, 2210]]) == 0\nassert solution.removeStones([[7894, 9837], [7598, 2803], [3694, 267], [6813, 2779], [8431, 9780]]) == 0\nassert solution.removeStones([[2967, 1321], [3511, 3792], [1699, 5425], [1139, 9530], [4435, 6690], [6113, 3980], [2876, 9305]]) == 0\nassert solution.removeStones([[6703, 109], [3835, 7881], [8362, 3092], [170, 9242], [757, 9086], [634, 54]]) == 0\nassert solution.removeStones([[1082, 8102], [3067, 609], [6478, 6623], [2817, 8922]]) == 0\nassert solution.removeStones([[4370, 4781], [6918, 6014], [3927, 8767], [7830, 5596], [3913, 5971], [6518, 8585], [4366, 7455], [8087, 2533], [1777, 6258]]) == 0\nassert solution.removeStones([[5437, 6365], [9391, 8077], [485, 3728], [813, 5473], [3333, 3221], [1151, 9922], [8804, 2943]]) == 0\nassert solution.removeStones([[5344, 6838], [1004, 5623], [3724, 6915], [9381, 5065], [6445, 1361]]) == 0\nassert solution.removeStones([[6998, 3044], [8254, 8964]]) == 0\nassert solution.removeStones([[2498, 587], [4387, 4758], [4297, 1399], [7252, 6763], [3311, 7048], [5650, 3393], [1708, 3928], [9605, 3615]]) == 0\nassert solution.removeStones([[5067, 7361], [1569, 2952], [4414, 7977], [7618, 9812]]) == 0\nassert solution.removeStones([[55, 4052], [270, 8294], [9547, 54], [9669, 886], [4389, 817], [1861, 4041], [9563, 2089], [4579, 4299], [242, 9996], [3190, 9268]]) == 0\nassert solution.removeStones([[9385, 4186], [4978, 7598]]) == 0\nassert solution.removeStones([[8384, 8275], [2515, 2227], [2197, 4281], [2906, 5677]]) == 0\nassert solution.removeStones([[923, 1113], [133, 7811]]) == 0\nassert solution.removeStones([[6292, 3604], [1933, 3289], [8768, 3843], [2592, 3175], [400, 639], [2646, 3112], [917, 1879], [7272, 6223], [9735, 6393]]) == 0\nassert solution.removeStones([[6049, 8866], [1444, 5076], [9382, 351], [6635, 6990]]) == 0\nassert solution.removeStones([[9022, 8321], [3376, 7667], [8195, 4978], [367, 7586]]) == 0\nassert solution.removeStones([[4712, 6373], [9666, 9795]]) == 0\nassert solution.removeStones([[6618, 5493], [5715, 1257]]) == 0\nassert solution.removeStones([[4095, 2691], [9269, 3369], [8699, 375], [3658, 4135], [7941, 2214], [8984, 9756], [3041, 812], [1394, 3229]]) == 0\nassert solution.removeStones([[6803, 3449]]) == 0\nassert solution.removeStones([[2726, 3909], [5553, 2285], [735, 4363], [8276, 9759]]) == 0\nassert solution.removeStones([[6154, 8125]]) == 0\nassert solution.removeStones([[8712, 6518]]) == 0\nassert solution.removeStones([[4659, 8139], [8933, 9806], [5663, 5731], [6338, 4174], [438, 2784], [3119, 1825], [1612, 6632]]) == 0\nassert solution.removeStones([[2997, 5286], [3294, 2094], [3127, 9531], [9003, 4894], [5319, 1849]]) == 0\nassert solution.removeStones([[441, 1496], [1209, 8961], [6148, 263], [3778, 538], [4083, 3883], [3643, 7327], [4486, 2850], [1671, 1876], [5177, 1404]]) == 0\nassert solution.removeStones([[2125, 9858], [4888, 3772], [302, 7989]]) == 0\nassert solution.removeStones([[8393, 7833], [1055, 2156], [759, 3227], [598, 5148], [7777, 2419], [5042, 424]]) == 0\nassert solution.removeStones([[64, 5872], [3498, 9380], [614, 4115], [555, 5549], [2737, 9733], [8428, 8369], [4199, 876], [6341, 4540], [8215, 3267], [501, 4179]]) == 0\nassert solution.removeStones([[684, 5253], [3657, 8368], [5899, 9578], [4532, 1074]]) == 0\nassert solution.removeStones([[5529, 3577], [6279, 9460], [2141, 3095], [1041, 6758], [5966, 6106], [1149, 9730], [2613, 8269], [5755, 2311], [6145, 7149], [533, 5054]]) == 0\nassert solution.removeStones([[480, 350], [6700, 4776], [8678, 887], [3751, 6362], [4204, 3377], [6839, 4841]]) == 0\nassert solution.removeStones([[3149, 6343], [4017, 9196], [1461, 2386], [2774, 3133]]) == 0\nassert solution.removeStones([[7610, 2963], [6023, 7313], [30, 4411], [9885, 9973], [7775, 4282], [7572, 2799], [6476, 5004]]) == 0\nassert solution.removeStones([[6664, 1183], [1842, 1417], [3221, 3565], [1639, 2859]]) == 0\nassert solution.removeStones([[9319, 4135], [9676, 4716], [1979, 2270], [4051, 3719], [2640, 7578], [4278, 2799]]) == 0\nassert solution.removeStones([[8224, 8890], [7125, 4]]) == 0\nassert solution.removeStones([[6572, 1592], [8975, 5777], [6428, 3679], [7730, 3755], [8676, 8748], [9175, 8341], [8758, 8937], [2216, 4632], [4772, 7967]]) == 0\nassert solution.removeStones([[7713, 2341], [7417, 6525], [5404, 179], [1045, 8219], [1619, 2689], [8881, 3417], [9145, 3413], [9434, 6951], [153, 4676]]) == 0\nassert solution.removeStones([[1933, 950], [8925, 3966], [3977, 8135], [9609, 4498], [2543, 6172]]) == 0\nassert solution.removeStones([[9468, 5967], [833, 5619], [6221, 2934], [7437, 1988], [2729, 8232]]) == 0\nassert solution.removeStones([[4821, 3986], [3339, 4196], [6652, 1917], [8280, 4587], [7492, 4655], [3184, 9053]]) == 0\nassert solution.removeStones([[3646, 5506], [984, 7012], [8438, 2910], [9474, 7031], [7334, 8290], [7833, 8723], [8365, 5926], [7715, 3107]]) == 0\nassert solution.removeStones([[9324, 6209], [1142, 2976], [3136, 2906], [4511, 2888], [5983, 8265], [3381, 729], [7183, 2827]]) == 0\nassert solution.removeStones([[9176, 648], [7485, 33], [8255, 3354], [6536, 3885], [9292, 8999], [5296, 7564], [7657, 3420], [5860, 6838], [7013, 6919]]) == 0\nassert solution.removeStones([[7976, 1563], [5279, 8460], [8343, 9717], [3301, 7639], [3639, 9229]]) == 0\nassert solution.removeStones([[410, 3598], [7224, 8695], [7095, 683], [96, 3238], [3720, 7677], [1486, 2841], [3199, 1632]]) == 0\nassert solution.removeStones([[1671, 6484], [8206, 9614], [1308, 5065], [3119, 7543], [3533, 926], [5188, 9949], [5392, 9492], [639, 2339], [8154, 1957]]) == 0\nassert solution.removeStones([[4798, 4358], [4678, 8075], [3390, 4485]]) == 0\nassert solution.removeStones([[1988, 89], [9040, 9996], [4885, 4114], [7996, 1], [6025, 1867], [1036, 1840]]) == 0\nassert solution.removeStones([[2198, 5536], [7496, 2850]]) == 0\nassert solution.removeStones([[5090, 5900], [5250, 8276], [7146, 2947], [1255, 5008], [4781, 1236], [7614, 5327]]) == 0\nassert solution.removeStones([[6874, 583], [8485, 1975]]) == 0\nassert solution.removeStones([[8350, 6938], [1986, 121], [9611, 4787], [8964, 3627]]) == 0\nassert solution.removeStones([[1151, 3510], [3949, 3328], [9943, 9313], [5922, 8710], [9464, 9721]]) == 0\nassert solution.removeStones([[2394, 9599], [6724, 205], [3538, 9975], [6740, 9937], [2323, 293], [5165, 778], [3009, 8303], [9358, 467], [6657, 9499]]) == 0\nassert solution.removeStones([[5349, 5795], [8850, 1224], [9261, 2969]]) == 0\nassert solution.removeStones([[2480, 9359], [3496, 4557], [5555, 2375], [2746, 6628], [8432, 9883], [7149, 2775], [241, 3173], [2433, 4882], [4624, 7748], [1007, 7651]]) == 0\nassert solution.removeStones([[9169, 8367], [9332, 7647], [7319, 2753], [1519, 8888], [7762, 179], [6259, 4350], [4621, 4743], [9454, 3638]]) == 0\nassert solution.removeStones([[417, 5554], [6248, 4448], [6544, 7377], [5530, 6578], [8883, 7297], [5393, 3762], [2990, 4253], [9008, 7175], [5452, 2067], [7945, 8393]]) == 0",
  "inefficient_solution": "class Solution:\n    def removeStones(self, stones: List[List[int]]) -> int:\n        n = len(stones)\n        res = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1]:\n                    stones[j][0] = -1\n                    stones[j][1] = -1\n                    res += 1\n        return len([stone for stone in stones if stone[0] != -1 and stone[1] != -1])",
  "is_python": true
}