{
  "problem_idx": 409,
  "task_name": "Longest Palindrome",
  "markdown_description": "\nGiven a string `s` which consists of lowercase or uppercase letters, return *the length of the **longest palindrome***\u00a0that can be built with those letters.\n\n\nLetters are **case sensitive**, for example,\u00a0`\"Aa\"` is not considered a palindrome here.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abccccdd\"\n**Output:** 7\n**Explanation:** One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"a\"\n**Output:** 1\n**Explanation:** The longest palindrome that can be built is \"a\", whose length is 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2000`\n* `s` consists of lowercase **and/or** uppercase English\u00a0letters only.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        cnt = Counter(s)\n        ans = 0\n        for v in cnt.values():\n            ans += v - (v & 1)\n            ans += (ans & 1 ^ 1) and (v & 1)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> int:\n        cnt = Counter(s)\n        ans = 0\n        for v in cnt.values():\n            ans += v - (v & 1)\n            ans += (ans & 1 ^ 1) and (v & 1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestPalindrome(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestPalindrome(s) == expected_result\n        print(f'assert solution.longestPalindrome(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.longestPalindrome(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestPalindrome(\"GxyDLlAh\") == 1\nassert solution.longestPalindrome(\"HcEbNV\") == 1\nassert solution.longestPalindrome(\"DNQeW\") == 1\nassert solution.longestPalindrome(\"Rm\") == 1\nassert solution.longestPalindrome(\"aMOqIUDZZ\") == 3\nassert solution.longestPalindrome(\"WHtu\") == 1\nassert solution.longestPalindrome(\"IKOqqJaucR\") == 3\nassert solution.longestPalindrome(\"ig\") == 1\nassert solution.longestPalindrome(\"LeUzsYoEbT\") == 1\nassert solution.longestPalindrome(\"XgZSa\") == 1\nassert solution.longestPalindrome(\"YVxpSr\") == 1\nassert solution.longestPalindrome(\"uTSVyofy\") == 3\nassert solution.longestPalindrome(\"oENUy\") == 1\nassert solution.longestPalindrome(\"f\") == 1\nassert solution.longestPalindrome(\"E\") == 1\nassert solution.longestPalindrome(\"fzNDsJ\") == 1\nassert solution.longestPalindrome(\"mN\") == 1\nassert solution.longestPalindrome(\"rI\") == 1\nassert solution.longestPalindrome(\"oBbosiCYs\") == 5\nassert solution.longestPalindrome(\"pK\") == 1\nassert solution.longestPalindrome(\"dNw\") == 1\nassert solution.longestPalindrome(\"pdGJJclhF\") == 3\nassert solution.longestPalindrome(\"hLfgZ\") == 1\nassert solution.longestPalindrome(\"sVKmuaeuQG\") == 3\nassert solution.longestPalindrome(\"suYnZmKrt\") == 1\nassert solution.longestPalindrome(\"WAG\") == 1\nassert solution.longestPalindrome(\"kG\") == 1\nassert solution.longestPalindrome(\"ih\") == 1\nassert solution.longestPalindrome(\"iB\") == 1\nassert solution.longestPalindrome(\"gpu\") == 1\nassert solution.longestPalindrome(\"mVQsrMf\") == 1\nassert solution.longestPalindrome(\"Ld\") == 1\nassert solution.longestPalindrome(\"gRu\") == 1\nassert solution.longestPalindrome(\"utBH\") == 1\nassert solution.longestPalindrome(\"gLcMUCH\") == 1\nassert solution.longestPalindrome(\"QuuAaPQJ\") == 5\nassert solution.longestPalindrome(\"nWqtUfCs\") == 1\nassert solution.longestPalindrome(\"NNrGZ\") == 3\nassert solution.longestPalindrome(\"YeBA\") == 1\nassert solution.longestPalindrome(\"B\") == 1\nassert solution.longestPalindrome(\"g\") == 1\nassert solution.longestPalindrome(\"csCBgple\") == 1\nassert solution.longestPalindrome(\"ruKYUiZyF\") == 1\nassert solution.longestPalindrome(\"Mct\") == 1\nassert solution.longestPalindrome(\"UtJbblK\") == 3\nassert solution.longestPalindrome(\"PNDtlcAPLM\") == 3\nassert solution.longestPalindrome(\"wbgB\") == 1\nassert solution.longestPalindrome(\"F\") == 1\nassert solution.longestPalindrome(\"FvFi\") == 3\nassert solution.longestPalindrome(\"esERdj\") == 1\nassert solution.longestPalindrome(\"cAxNAht\") == 3\nassert solution.longestPalindrome(\"dgBRVk\") == 1\nassert solution.longestPalindrome(\"vaGRLv\") == 3\nassert solution.longestPalindrome(\"vZp\") == 1\nassert solution.longestPalindrome(\"vkfXfx\") == 3\nassert solution.longestPalindrome(\"vwuHH\") == 3\nassert solution.longestPalindrome(\"ZYfi\") == 1\nassert solution.longestPalindrome(\"T\") == 1\nassert solution.longestPalindrome(\"IzdYDFaQV\") == 1\nassert solution.longestPalindrome(\"ZKSocSBIHS\") == 3\nassert solution.longestPalindrome(\"r\") == 1\nassert solution.longestPalindrome(\"RIM\") == 1\nassert solution.longestPalindrome(\"hwtyCpSr\") == 1\nassert solution.longestPalindrome(\"B\") == 1\nassert solution.longestPalindrome(\"ngF\") == 1\nassert solution.longestPalindrome(\"KBiuCkFQJ\") == 1\nassert solution.longestPalindrome(\"ESginoagsp\") == 3\nassert solution.longestPalindrome(\"x\") == 1\nassert solution.longestPalindrome(\"UGeMpu\") == 1\nassert solution.longestPalindrome(\"oM\") == 1\nassert solution.longestPalindrome(\"zhAzOTU\") == 3\nassert solution.longestPalindrome(\"rm\") == 1\nassert solution.longestPalindrome(\"W\") == 1\nassert solution.longestPalindrome(\"wTf\") == 1\nassert solution.longestPalindrome(\"Uh\") == 1\nassert solution.longestPalindrome(\"NVMTWj\") == 1\nassert solution.longestPalindrome(\"xllqx\") == 5\nassert solution.longestPalindrome(\"mSYqucQZ\") == 1\nassert solution.longestPalindrome(\"nc\") == 1\nassert solution.longestPalindrome(\"NmEdWL\") == 1\nassert solution.longestPalindrome(\"ji\") == 1\nassert solution.longestPalindrome(\"mTng\") == 1\nassert solution.longestPalindrome(\"MWB\") == 1\nassert solution.longestPalindrome(\"p\") == 1\nassert solution.longestPalindrome(\"lOZdZD\") == 3\nassert solution.longestPalindrome(\"ZRPmTOObzh\") == 3\nassert solution.longestPalindrome(\"iD\") == 1\nassert solution.longestPalindrome(\"eaARO\") == 1\nassert solution.longestPalindrome(\"GoGSCG\") == 3\nassert solution.longestPalindrome(\"Hki\") == 1\nassert solution.longestPalindrome(\"YQjMohunH\") == 1\nassert solution.longestPalindrome(\"mXaURIS\") == 1\nassert solution.longestPalindrome(\"v\") == 1\nassert solution.longestPalindrome(\"iTTzsg\") == 3\nassert solution.longestPalindrome(\"QAC\") == 1\nassert solution.longestPalindrome(\"cCW\") == 1\nassert solution.longestPalindrome(\"SyR\") == 1\nassert solution.longestPalindrome(\"uCKQvx\") == 1\nassert solution.longestPalindrome(\"UVtYfIQsyU\") == 3\nassert solution.longestPalindrome(\"VAGueWdib\") == 1",
  "inefficient_solution": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        n = len(s)\n        char_count_array = [0] * 52  # 26 lowercase + 26 uppercase\n        for char in s:\n            ascii_offset = 97 if char.islower() else 65\n            char_code = ord(char) - ascii_offset\n            char_count_array[char_code] += 1\n\n        char_count_dict = dict()\n        for count in char_count_array:\n            if count > 0:\n                char_count_dict[chr(97 + count // 2)] = count\n\n        palindrome_length = 0\n        for count in char_count_dict.values():\n            palindrome_length += count // 2 * 2\n        if len(char_count_dict) > 0:\n            palindrome_length += 1\n\n        return palindrome_length",
  "is_python": true
}