{
  "problem_idx": 2600,
  "task_name": "K Items With the Maximum Sum",
  "markdown_description": "\nThere is a bag that consists of items, each item\u00a0has a number `1`, `0`, or `-1` written on it.\n\n\nYou are given four **non-negative** integers `numOnes`, `numZeros`, `numNegOnes`, and `k`.\n\n\nThe bag initially contains:\n\n\n* `numOnes` items with `1`s written on them.\n* `numZeroes` items with `0`s written on them.\n* `numNegOnes` items with `-1`s written on them.\n\n\nWe want to pick exactly `k` items among the available items. Return *the **maximum** possible sum of numbers written on the items*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\n**Output:** 2\n**Explanation:** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\n**Output:** 3\n**Explanation:** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= numOnes, numZeros, numNegOnes <= 50`\n* `0 <= k <= numOnes + numZeros + numNegOnes`\n\n\n",
  "canonical_solution": "class Solution:\n    def kItemsWithMaximumSum(\n        self, numOnes: int, numZeros: int, numNegOnes: int, k: int\n    ) -> int:\n        if numOnes >= k:\n            return k\n        if numZeros >= k - numOnes:\n            return numOnes\n        return numOnes - (k - numOnes - numZeros)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def kItemsWithMaximumSum(\n        self, numOnes: int, numZeros: int, numNegOnes: int, k: int\n    ) -> int:\n        if numOnes >= k:\n            return k\n        if numZeros >= k - numOnes:\n            return numOnes\n        return numOnes - (k - numOnes - numZeros)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers for numOnes, numZeros, and numNegOnes\n    numOnes = random.randint(0, 10)\n    numZeros = random.randint(0, 10)\n    numNegOnes = random.randint(0, 10)\n    \n    # Generate a random k value\n    k = random.randint(0, numOnes + numZeros + numNegOnes)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.kItemsWithMaximumSum(numOnes, numZeros, numNegOnes, k)\n\n    return numOnes, numZeros, numNegOnes, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        numOnes, numZeros, numNegOnes, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.kItemsWithMaximumSum(numOnes, numZeros, numNegOnes, k) == expected_result\n        print(f\"assert solution.kItemsWithMaximumSum({numOnes}, {numZeros}, {numNegOnes}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.kItemsWithMaximumSum({numOnes}, {numZeros}, {numNegOnes}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.kItemsWithMaximumSum(8, 10, 8, 10) == 8\nassert solution.kItemsWithMaximumSum(6, 3, 9, 15) == 0\nassert solution.kItemsWithMaximumSum(3, 4, 5, 11) == -1\nassert solution.kItemsWithMaximumSum(1, 4, 7, 3) == 1\nassert solution.kItemsWithMaximumSum(9, 2, 6, 11) == 9\nassert solution.kItemsWithMaximumSum(1, 3, 10, 3) == 1\nassert solution.kItemsWithMaximumSum(6, 3, 3, 2) == 2\nassert solution.kItemsWithMaximumSum(6, 10, 5, 2) == 2\nassert solution.kItemsWithMaximumSum(7, 0, 5, 12) == 2\nassert solution.kItemsWithMaximumSum(3, 6, 1, 3) == 3\nassert solution.kItemsWithMaximumSum(8, 6, 5, 10) == 8\nassert solution.kItemsWithMaximumSum(8, 1, 3, 4) == 4\nassert solution.kItemsWithMaximumSum(5, 10, 7, 21) == -1\nassert solution.kItemsWithMaximumSum(6, 3, 10, 15) == 0\nassert solution.kItemsWithMaximumSum(8, 2, 5, 11) == 7\nassert solution.kItemsWithMaximumSum(4, 10, 6, 19) == -1\nassert solution.kItemsWithMaximumSum(9, 3, 8, 5) == 5\nassert solution.kItemsWithMaximumSum(5, 2, 4, 9) == 3\nassert solution.kItemsWithMaximumSum(10, 5, 5, 15) == 10\nassert solution.kItemsWithMaximumSum(7, 3, 0, 8) == 7\nassert solution.kItemsWithMaximumSum(7, 10, 10, 24) == 0\nassert solution.kItemsWithMaximumSum(1, 0, 2, 0) == 0\nassert solution.kItemsWithMaximumSum(9, 6, 5, 8) == 8\nassert solution.kItemsWithMaximumSum(8, 10, 10, 8) == 8\nassert solution.kItemsWithMaximumSum(0, 4, 6, 10) == -6\nassert solution.kItemsWithMaximumSum(6, 0, 10, 5) == 5\nassert solution.kItemsWithMaximumSum(2, 7, 6, 3) == 2\nassert solution.kItemsWithMaximumSum(2, 1, 10, 3) == 2\nassert solution.kItemsWithMaximumSum(4, 2, 6, 11) == -1\nassert solution.kItemsWithMaximumSum(9, 5, 4, 10) == 9\nassert solution.kItemsWithMaximumSum(10, 1, 3, 5) == 5\nassert solution.kItemsWithMaximumSum(5, 3, 4, 2) == 2\nassert solution.kItemsWithMaximumSum(9, 0, 3, 0) == 0\nassert solution.kItemsWithMaximumSum(5, 3, 1, 3) == 3\nassert solution.kItemsWithMaximumSum(4, 1, 7, 0) == 0\nassert solution.kItemsWithMaximumSum(9, 6, 4, 7) == 7\nassert solution.kItemsWithMaximumSum(1, 5, 10, 0) == 0\nassert solution.kItemsWithMaximumSum(6, 4, 5, 14) == 2\nassert solution.kItemsWithMaximumSum(10, 2, 1, 12) == 10\nassert solution.kItemsWithMaximumSum(1, 8, 7, 11) == -1\nassert solution.kItemsWithMaximumSum(2, 1, 5, 2) == 2\nassert solution.kItemsWithMaximumSum(4, 4, 6, 3) == 3\nassert solution.kItemsWithMaximumSum(5, 0, 2, 7) == 3\nassert solution.kItemsWithMaximumSum(8, 9, 7, 13) == 8\nassert solution.kItemsWithMaximumSum(2, 2, 7, 1) == 1\nassert solution.kItemsWithMaximumSum(6, 8, 1, 4) == 4\nassert solution.kItemsWithMaximumSum(0, 6, 0, 6) == 0\nassert solution.kItemsWithMaximumSum(5, 5, 5, 4) == 4\nassert solution.kItemsWithMaximumSum(5, 3, 5, 12) == 1\nassert solution.kItemsWithMaximumSum(4, 2, 3, 8) == 2\nassert solution.kItemsWithMaximumSum(9, 2, 4, 6) == 6\nassert solution.kItemsWithMaximumSum(4, 5, 7, 5) == 4\nassert solution.kItemsWithMaximumSum(1, 5, 7, 8) == -1\nassert solution.kItemsWithMaximumSum(0, 4, 9, 6) == -2\nassert solution.kItemsWithMaximumSum(0, 2, 7, 4) == -2\nassert solution.kItemsWithMaximumSum(7, 2, 3, 8) == 7\nassert solution.kItemsWithMaximumSum(4, 3, 7, 12) == -1\nassert solution.kItemsWithMaximumSum(6, 1, 6, 5) == 5\nassert solution.kItemsWithMaximumSum(9, 10, 1, 8) == 8\nassert solution.kItemsWithMaximumSum(1, 4, 3, 7) == -1\nassert solution.kItemsWithMaximumSum(8, 7, 3, 5) == 5\nassert solution.kItemsWithMaximumSum(8, 10, 8, 15) == 8\nassert solution.kItemsWithMaximumSum(5, 6, 5, 12) == 4\nassert solution.kItemsWithMaximumSum(10, 4, 1, 5) == 5\nassert solution.kItemsWithMaximumSum(10, 6, 2, 3) == 3\nassert solution.kItemsWithMaximumSum(7, 0, 3, 8) == 6\nassert solution.kItemsWithMaximumSum(1, 3, 7, 2) == 1\nassert solution.kItemsWithMaximumSum(9, 9, 6, 13) == 9\nassert solution.kItemsWithMaximumSum(3, 0, 7, 9) == -3\nassert solution.kItemsWithMaximumSum(4, 0, 0, 3) == 3\nassert solution.kItemsWithMaximumSum(9, 4, 8, 16) == 6\nassert solution.kItemsWithMaximumSum(10, 5, 5, 13) == 10\nassert solution.kItemsWithMaximumSum(9, 10, 10, 22) == 6\nassert solution.kItemsWithMaximumSum(8, 0, 0, 0) == 0\nassert solution.kItemsWithMaximumSum(5, 5, 4, 10) == 5\nassert solution.kItemsWithMaximumSum(10, 8, 0, 9) == 9\nassert solution.kItemsWithMaximumSum(7, 0, 6, 7) == 7\nassert solution.kItemsWithMaximumSum(2, 6, 6, 5) == 2\nassert solution.kItemsWithMaximumSum(3, 3, 4, 10) == -1\nassert solution.kItemsWithMaximumSum(2, 10, 4, 6) == 2\nassert solution.kItemsWithMaximumSum(5, 6, 3, 2) == 2\nassert solution.kItemsWithMaximumSum(4, 10, 6, 5) == 4\nassert solution.kItemsWithMaximumSum(10, 7, 2, 16) == 10\nassert solution.kItemsWithMaximumSum(6, 9, 8, 0) == 0\nassert solution.kItemsWithMaximumSum(6, 4, 4, 2) == 2\nassert solution.kItemsWithMaximumSum(7, 3, 8, 11) == 6\nassert solution.kItemsWithMaximumSum(2, 5, 5, 7) == 2\nassert solution.kItemsWithMaximumSum(10, 3, 4, 13) == 10\nassert solution.kItemsWithMaximumSum(7, 8, 6, 2) == 2\nassert solution.kItemsWithMaximumSum(9, 1, 5, 5) == 5\nassert solution.kItemsWithMaximumSum(1, 4, 5, 6) == 0\nassert solution.kItemsWithMaximumSum(8, 1, 0, 5) == 5\nassert solution.kItemsWithMaximumSum(9, 3, 9, 18) == 3\nassert solution.kItemsWithMaximumSum(7, 9, 2, 5) == 5\nassert solution.kItemsWithMaximumSum(0, 9, 8, 16) == -7\nassert solution.kItemsWithMaximumSum(10, 3, 2, 2) == 2\nassert solution.kItemsWithMaximumSum(7, 5, 10, 21) == -2\nassert solution.kItemsWithMaximumSum(4, 6, 7, 10) == 4\nassert solution.kItemsWithMaximumSum(4, 4, 6, 12) == 0\nassert solution.kItemsWithMaximumSum(3, 0, 6, 5) == 1",
  "inefficient_solution": "class Solution:\n    def kItemsWithMaximumSum(\n        self, numOnes: int, numZeros: int, numNegOnes: int, k: int\n    ) -> int:\n        # create a list to store all the items\n        items = [1] * numOnes + [0] * numZeros + [-1] * numNegOnes\n        \n        # create a list to store all possible sums\n        sums = []\n        \n        # generate all possible combinations of k items\n        from itertools import combinations\n        for combination in combinations(items, k):\n            # calculate the sum of the current combination\n            current_sum = sum(combination)\n            \n            # add the current sum to the list of sums\n            sums.append(current_sum)\n        \n        # return the maximum sum\n        return max(sums)",
  "is_python": true
}