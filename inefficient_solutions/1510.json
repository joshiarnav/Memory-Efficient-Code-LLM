{
  "problem_idx": 1510,
  "task_name": "Stone Game IV",
  "markdown_description": "\nAlice and Bob take turns playing a game, with Alice starting first.\n\n\nInitially, there are `n` stones in a pile. On each player's turn, that player makes a *move* consisting of removing **any** non-zero **square number** of stones in the pile.\n\n\nAlso, if a player cannot make a move, he/she loses the game.\n\n\nGiven a positive integer `n`, return `true` if and only if Alice wins the game otherwise return `false`, assuming both players play optimally.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** true\n**Explanation:** Alice can remove 1 stone winning the game because Bob doesn't have any moves.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** false\n**Explanation:** Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 4\n**Output:** true\n**Explanation:** n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        @cache\n        def dfs(i: int) -> bool:\n            if i == 0:\n                return False\n            j = 1\n            while j * j <= i:\n                if not dfs(i - j * j):\n                    return True\n                j += 1\n            return False\n\n        return dfs(n)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        @cache\n        def dfs(i: int) -> bool:\n            if i == 0:\n                return False\n            j = 1\n            while j * j <= i:\n                if not dfs(i - j * j):\n                    return True\n                j += 1\n            return False\n\n        return dfs(n)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random positive integer\n    n = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.winnerSquareGame(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.winnerSquareGame(n) == expected_result\n        print(f\"assert solution.winnerSquareGame({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.winnerSquareGame({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.winnerSquareGame(96) == True\nassert solution.winnerSquareGame(80) == True\nassert solution.winnerSquareGame(47) == True\nassert solution.winnerSquareGame(9) == True\nassert solution.winnerSquareGame(89) == True\nassert solution.winnerSquareGame(34) == False\nassert solution.winnerSquareGame(17) == False\nassert solution.winnerSquareGame(63) == True\nassert solution.winnerSquareGame(54) == True\nassert solution.winnerSquareGame(79) == True\nassert solution.winnerSquareGame(84) == True\nassert solution.winnerSquareGame(52) == False\nassert solution.winnerSquareGame(71) == True\nassert solution.winnerSquareGame(84) == True\nassert solution.winnerSquareGame(83) == True\nassert solution.winnerSquareGame(19) == True\nassert solution.winnerSquareGame(10) == False\nassert solution.winnerSquareGame(95) == False\nassert solution.winnerSquareGame(26) == True\nassert solution.winnerSquareGame(81) == True\nassert solution.winnerSquareGame(40) == True\nassert solution.winnerSquareGame(5) == False\nassert solution.winnerSquareGame(41) == True\nassert solution.winnerSquareGame(78) == True\nassert solution.winnerSquareGame(63) == True\nassert solution.winnerSquareGame(44) == False\nassert solution.winnerSquareGame(16) == True\nassert solution.winnerSquareGame(1) == True\nassert solution.winnerSquareGame(52) == False\nassert solution.winnerSquareGame(97) == True\nassert solution.winnerSquareGame(82) == True\nassert solution.winnerSquareGame(32) == True\nassert solution.winnerSquareGame(20) == False\nassert solution.winnerSquareGame(64) == True\nassert solution.winnerSquareGame(36) == True\nassert solution.winnerSquareGame(77) == True\nassert solution.winnerSquareGame(98) == True\nassert solution.winnerSquareGame(11) == True\nassert solution.winnerSquareGame(57) == False\nassert solution.winnerSquareGame(34) == False\nassert solution.winnerSquareGame(44) == False\nassert solution.winnerSquareGame(58) == True\nassert solution.winnerSquareGame(39) == False\nassert solution.winnerSquareGame(98) == True\nassert solution.winnerSquareGame(4) == True\nassert solution.winnerSquareGame(54) == True\nassert solution.winnerSquareGame(35) == True\nassert solution.winnerSquareGame(8) == True\nassert solution.winnerSquareGame(61) == True\nassert solution.winnerSquareGame(63) == True\nassert solution.winnerSquareGame(8) == True\nassert solution.winnerSquareGame(53) == True\nassert solution.winnerSquareGame(84) == True\nassert solution.winnerSquareGame(79) == True\nassert solution.winnerSquareGame(67) == False\nassert solution.winnerSquareGame(34) == False\nassert solution.winnerSquareGame(38) == True\nassert solution.winnerSquareGame(9) == True\nassert solution.winnerSquareGame(5) == False\nassert solution.winnerSquareGame(72) == False\nassert solution.winnerSquareGame(64) == True\nassert solution.winnerSquareGame(85) == False\nassert solution.winnerSquareGame(40) == True\nassert solution.winnerSquareGame(24) == True\nassert solution.winnerSquareGame(75) == True\nassert solution.winnerSquareGame(72) == False\nassert solution.winnerSquareGame(72) == False\nassert solution.winnerSquareGame(51) == True\nassert solution.winnerSquareGame(92) == True\nassert solution.winnerSquareGame(12) == False\nassert solution.winnerSquareGame(78) == True\nassert solution.winnerSquareGame(58) == True\nassert solution.winnerSquareGame(27) == True\nassert solution.winnerSquareGame(57) == False\nassert solution.winnerSquareGame(96) == True\nassert solution.winnerSquareGame(101) == True\nassert solution.winnerSquareGame(52) == False\nassert solution.winnerSquareGame(84) == True\nassert solution.winnerSquareGame(37) == True\nassert solution.winnerSquareGame(99) == True\nassert solution.winnerSquareGame(4) == True\nassert solution.winnerSquareGame(80) == True\nassert solution.winnerSquareGame(57) == False\nassert solution.winnerSquareGame(51) == True\nassert solution.winnerSquareGame(4) == True\nassert solution.winnerSquareGame(8) == True\nassert solution.winnerSquareGame(53) == True\nassert solution.winnerSquareGame(60) == True\nassert solution.winnerSquareGame(65) == False\nassert solution.winnerSquareGame(75) == True\nassert solution.winnerSquareGame(96) == True\nassert solution.winnerSquareGame(13) == True\nassert solution.winnerSquareGame(35) == True\nassert solution.winnerSquareGame(53) == True\nassert solution.winnerSquareGame(17) == False\nassert solution.winnerSquareGame(94) == True\nassert solution.winnerSquareGame(80) == True\nassert solution.winnerSquareGame(92) == True\nassert solution.winnerSquareGame(37) == True\nassert solution.winnerSquareGame(2) == False",
  "inefficient_solution": "class Solution:\n    def winnerSquareGame(self, n: int) -> bool:\n        dp = [False] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(1, int(i ** 0.5) + 1):\n                if i - j * j >= 0 and not dp[i - j * j]:\n                    dp[i] = True\n                    break\n        return dp[n]",
  "is_python": true
}