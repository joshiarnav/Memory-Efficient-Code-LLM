{
  "problem_idx": 1994,
  "task_name": "The Number of Good Subsets",
  "markdown_description": "\nYou are given an integer array `nums`. We call a subset of `nums` **good** if its product can be represented as a product of one or more **distinct prime** numbers.\n\n\n* For example, if `nums = [1, 2, 3, 4]`:\n\t+ `[2, 3]`, `[1, 2, 3]`, and `[1, 3]` are **good** subsets with products `6 = 2*3`, `6 = 2*3`, and `3 = 3` respectively.\n\t+ `[1, 4]` and `[4]` are not **good** subsets with products `4 = 2*2` and `4 = 2*2` respectively.\n\n\nReturn *the number of different **good** subsets in* `nums` ***modulo*** `109 + 7`.\n\n\nA **subset** of `nums` is any array that can be obtained by deleting some (possibly none or all) elements from `nums`. Two subsets are different if and only if the chosen indices to delete are different.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 6\n**Explanation:** The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,2,3,15]\n**Output:** 5\n**Explanation:** The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 30`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = pow(2, cnt[1])\n        for x in range(2, 31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod\n        return sum(f[i] for i in range(1, 1 << n)) % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfGoodSubsets(self, nums):\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [0] * (1 << n)\n        f[0] = pow(2, cnt[1])\n        for x in range(2, 31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[state] = (f[state] + cnt[x] * f[state ^ mask]) % mod\n        return sum(f[i] for i in range(1, 1 << n)) % mod\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 31), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfGoodSubsets(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfGoodSubsets(nums) == expected_result\n        print(f\"assert solution.numberOfGoodSubsets({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfGoodSubsets({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfGoodSubsets([6, 26, 20]) == 2\nassert solution.numberOfGoodSubsets([16, 4, 10, 20, 22, 15, 19, 9, 23]) == 19\nassert solution.numberOfGoodSubsets([7, 19]) == 3\nassert solution.numberOfGoodSubsets([14, 8, 26]) == 2\nassert solution.numberOfGoodSubsets([20, 7, 10, 17]) == 7\nassert solution.numberOfGoodSubsets([2, 10, 1, 25, 21, 3]) == 16\nassert solution.numberOfGoodSubsets([4, 25, 20, 12, 18, 30, 6, 24, 23, 10]) == 7\nassert solution.numberOfGoodSubsets([17, 20, 3, 28, 24, 1, 5, 26]) == 30\nassert solution.numberOfGoodSubsets([10, 2, 21, 11]) == 11\nassert solution.numberOfGoodSubsets([29, 23, 21]) == 7\nassert solution.numberOfGoodSubsets([19, 1]) == 2\nassert solution.numberOfGoodSubsets([9]) == 0\nassert solution.numberOfGoodSubsets([23]) == 1\nassert solution.numberOfGoodSubsets([23, 3, 4, 24]) == 3\nassert solution.numberOfGoodSubsets([6, 17, 23, 5, 9, 14, 29, 27]) == 47\nassert solution.numberOfGoodSubsets([9, 27, 30, 17, 11, 15, 22, 12]) == 15\nassert solution.numberOfGoodSubsets([1, 9, 28, 24, 21, 22, 25, 30]) == 8\nassert solution.numberOfGoodSubsets([7]) == 1\nassert solution.numberOfGoodSubsets([7, 10, 23, 8, 27, 13, 4, 1]) == 30\nassert solution.numberOfGoodSubsets([26, 27, 23, 2, 3, 7, 5]) == 47\nassert solution.numberOfGoodSubsets([30, 18, 7, 3, 10, 1]) == 18\nassert solution.numberOfGoodSubsets([9, 22, 26]) == 2\nassert solution.numberOfGoodSubsets([29, 7, 4, 30]) == 7\nassert solution.numberOfGoodSubsets([3, 13, 19, 15]) == 11\nassert solution.numberOfGoodSubsets([29]) == 1\nassert solution.numberOfGoodSubsets([29, 23, 4, 13, 16, 17, 27]) == 15\nassert solution.numberOfGoodSubsets([2, 16, 13, 6, 21, 11, 10, 9, 14, 5]) == 55\nassert solution.numberOfGoodSubsets([6, 15, 11, 21, 8, 3]) == 9\nassert solution.numberOfGoodSubsets([26]) == 1\nassert solution.numberOfGoodSubsets([18, 2, 21, 23, 11]) == 15\nassert solution.numberOfGoodSubsets([21]) == 1\nassert solution.numberOfGoodSubsets([13, 14, 2, 6, 4, 30, 18, 11]) == 19\nassert solution.numberOfGoodSubsets([22, 19]) == 3\nassert solution.numberOfGoodSubsets([29, 13, 22, 11, 23]) == 23\nassert solution.numberOfGoodSubsets([14, 23]) == 3\nassert solution.numberOfGoodSubsets([6, 28, 9]) == 1\nassert solution.numberOfGoodSubsets([5, 15, 25]) == 2\nassert solution.numberOfGoodSubsets([13, 21, 8, 22, 16, 25, 24, 4]) == 7\nassert solution.numberOfGoodSubsets([7, 18, 10]) == 3\nassert solution.numberOfGoodSubsets([19, 18, 2, 17]) == 7\nassert solution.numberOfGoodSubsets([11, 26, 15, 23, 21, 17]) == 47\nassert solution.numberOfGoodSubsets([29, 13]) == 3\nassert solution.numberOfGoodSubsets([23, 5, 18, 24, 27]) == 3\nassert solution.numberOfGoodSubsets([15, 24]) == 1\nassert solution.numberOfGoodSubsets([21, 25, 8, 4, 15, 24, 19]) == 5\nassert solution.numberOfGoodSubsets([22, 21, 20, 11, 18, 15, 13, 30]) == 21\nassert solution.numberOfGoodSubsets([9, 12, 20, 7]) == 1\nassert solution.numberOfGoodSubsets([19]) == 1\nassert solution.numberOfGoodSubsets([3, 15, 30, 26, 28, 13, 14]) == 16\nassert solution.numberOfGoodSubsets([12]) == 0\nassert solution.numberOfGoodSubsets([15, 30]) == 2\nassert solution.numberOfGoodSubsets([4, 5, 20, 24, 9, 8, 6, 11]) == 7\nassert solution.numberOfGoodSubsets([27]) == 0\nassert solution.numberOfGoodSubsets([16, 21, 8, 11, 27, 14, 23]) == 11\nassert solution.numberOfGoodSubsets([25, 6, 8]) == 1\nassert solution.numberOfGoodSubsets([17, 3, 13, 23, 15, 22]) == 47\nassert solution.numberOfGoodSubsets([30, 17, 15, 22, 5, 12, 4, 16, 11, 23]) == 43\nassert solution.numberOfGoodSubsets([5, 27, 12, 8, 13, 10, 14, 15, 1]) == 26\nassert solution.numberOfGoodSubsets([20, 27, 28, 12, 13]) == 1\nassert solution.numberOfGoodSubsets([18, 19, 26, 16, 23]) == 7\nassert solution.numberOfGoodSubsets([23, 27, 5, 25, 3, 14, 30, 15]) == 21\nassert solution.numberOfGoodSubsets([27, 26]) == 1\nassert solution.numberOfGoodSubsets([28, 1]) == 0\nassert solution.numberOfGoodSubsets([26, 14, 15]) == 5\nassert solution.numberOfGoodSubsets([16, 26, 7, 30, 24]) == 5\nassert solution.numberOfGoodSubsets([1, 6, 30, 4, 20, 8, 15, 5]) == 10\nassert solution.numberOfGoodSubsets([12, 25, 17, 24, 6, 2, 9, 22, 4]) == 7\nassert solution.numberOfGoodSubsets([16, 3, 4, 6, 2]) == 4\nassert solution.numberOfGoodSubsets([20, 7, 16, 28, 11, 3, 30]) == 11\nassert solution.numberOfGoodSubsets([2, 10, 15]) == 4\nassert solution.numberOfGoodSubsets([19, 28]) == 1\nassert solution.numberOfGoodSubsets([10, 2, 14, 25, 22, 30, 8, 4]) == 5\nassert solution.numberOfGoodSubsets([17, 18, 2]) == 3\nassert solution.numberOfGoodSubsets([7, 18, 6, 19, 28, 22, 16, 13]) == 23\nassert solution.numberOfGoodSubsets([9, 24, 29]) == 1\nassert solution.numberOfGoodSubsets([3, 30]) == 2\nassert solution.numberOfGoodSubsets([3, 23, 18]) == 3\nassert solution.numberOfGoodSubsets([10, 12, 14, 19, 2, 1, 8, 5, 9]) == 26\nassert solution.numberOfGoodSubsets([19, 16, 4, 11, 12]) == 3\nassert solution.numberOfGoodSubsets([9, 20, 15, 24, 2, 6, 7, 10, 22]) == 15\nassert solution.numberOfGoodSubsets([1, 19, 17, 18, 23, 4]) == 14\nassert solution.numberOfGoodSubsets([27, 17, 11, 19, 15, 2, 23, 30, 10]) == 95\nassert solution.numberOfGoodSubsets([26, 21, 20, 10, 2, 3, 27, 24, 7, 12]) == 19\nassert solution.numberOfGoodSubsets([5, 30, 12, 14, 26, 17, 23, 29, 2]) == 71\nassert solution.numberOfGoodSubsets([18, 17, 14, 13]) == 7\nassert solution.numberOfGoodSubsets([14, 25, 8, 10]) == 2\nassert solution.numberOfGoodSubsets([23, 19, 13]) == 7\nassert solution.numberOfGoodSubsets([10, 7, 17]) == 7\nassert solution.numberOfGoodSubsets([4, 21]) == 1\nassert solution.numberOfGoodSubsets([10, 15, 29, 1]) == 10\nassert solution.numberOfGoodSubsets([13, 30, 1, 17, 28]) == 14\nassert solution.numberOfGoodSubsets([15, 28, 4, 5, 3, 7]) == 9\nassert solution.numberOfGoodSubsets([10, 6, 11, 14, 30, 25]) == 9\nassert solution.numberOfGoodSubsets([11, 10, 24]) == 3\nassert solution.numberOfGoodSubsets([10, 23, 25, 6, 12, 15]) == 7\nassert solution.numberOfGoodSubsets([22, 27, 2, 28]) == 2\nassert solution.numberOfGoodSubsets([9]) == 0\nassert solution.numberOfGoodSubsets([5]) == 1\nassert solution.numberOfGoodSubsets([13, 22, 5, 11, 3, 9, 2, 28, 29]) == 79\nassert solution.numberOfGoodSubsets([23, 22, 6]) == 5",
  "inefficient_solution": "class Solution:\n    def numberOfGoodSubsets(self, nums: List[int]) -> int:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n        cnt = Counter(nums)\n        mod = 10**9 + 7\n        n = len(primes)\n        f = [[0 for _ in range(1 << n)] for _ in range(31)]\n        for x in range(31):\n            if cnt[x] == 0 or x % 4 == 0 or x % 9 == 0 or x % 25 == 0:\n                continue\n            mask = 0\n            for i, p in enumerate(primes):\n                if x % p == 0:\n                    mask |= 1 << i\n            for state in range((1 << n) - 1, 0, -1):\n                if state & mask == mask:\n                    f[x][state] = (f[x][state] + cnt[x] * f[x][state ^ mask]) % mod\n            f[x][0] = (f[x][0] + cnt[x] * f[x][0]) % mod\n        ans = 0\n        for x in range(31):\n            if cnt[x] != 0:\n                for state in range(1 << n):\n                    ans = (ans + f[x][state] * pow(2, state)) % mod\n        return ans",
  "is_python": true
}