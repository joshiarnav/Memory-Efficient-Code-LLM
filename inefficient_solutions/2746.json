{
  "problem_idx": 2746,
  "task_name": "Decremental String Concatenation",
  "markdown_description": "\nYou are given a **0-indexed** array `words` containing `n` strings.\n\n\nLet's define a **join** operation `join(x, y)` between two strings `x` and `y` as concatenating them into `xy`. However, if the last character of `x` is equal to the first character of `y`, one of them is **deleted**.\n\n\nFor example `join(\"ab\", \"ba\") = \"aba\"` and `join(\"ab\", \"cde\") = \"abcde\"`.\n\n\nYou are to perform `n - 1` **join** operations. Let `str0 = words[0]`. Starting from `i = 1` up to `i = n - 1`, for the `ith` operation, you can do one of the following:\n\n\n* Make `stri = join(stri - 1, words[i])`\n* Make `stri = join(words[i], stri - 1)`\n\n\nYour task is to **minimize** the length of `strn - 1`.\n\n\nReturn *an integer denoting the minimum possible length of* `strn - 1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"aa\",\"ab\",\"bc\"]\n**Output:** 4\n**Explanation:** In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aa\"\nstr1 = join(str0, \"ab\") = \"aab\"\nstr2 = join(str1, \"bc\") = \"aabc\" \nIt can be shown that the minimum possible length of str2 is 4.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"ab\",\"b\"]\n**Output:** 2\n**Explanation:** In this example, str0 = \"ab\", there are two ways to get str1: \njoin(str0, \"b\") = \"ab\" or join(\"b\", str0) = \"bab\". \nThe first string, \"ab\", has the minimum length. Hence, the answer is 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"aaa\",\"c\",\"aba\"]\n**Output:** 6\n**Explanation:** In this example, we can perform join operations in the following order to minimize the length of str2: \nstr0 = \"aaa\"\nstr1 = join(str0, \"c\") = \"aaac\"\nstr2 = join(\"aba\", str1) = \"abaaac\"\nIt can be shown that the minimum possible length of str2 is 6.\n\n```\n\n\u00a0\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 1000`\n* `1 <= words[i].length <= 50`\n* Each character in `words[i]` is an English lowercase letter\n\n\n",
  "canonical_solution": "class Solution:\n    def minimizeConcatenatedLength(self, words: List[str]) -> int:\n        @cache\n        def dfs(i: int, a: str, b: str) -> int:\n            if i >= len(words):\n                return 0\n            s = words[i]\n            x = dfs(i + 1, a, s[-1]) - int(s[0] == b)\n            y = dfs(i + 1, s[0], b) - int(s[-1] == a)\n            return len(s) + min(x, y)\n\n        return len(words[0]) + dfs(1, words[0][0], words[0][-1])\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimizeConcatenatedLength(self, words):\n        @cache\n        def dfs(i, a, b):\n            if i >= len(words):\n                return 0\n            s = words[i]\n            x = dfs(i + 1, a, s[-1]) - int(s[0] == b)\n            y = dfs(i + 1, s[0], b) - int(s[-1] == a)\n            return len(s) + min(x, y)\n\n        return len(words[0]) + dfs(1, words[0][0], words[0][-1])\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random words list\n    words = []\n    for _ in range(random.randint(1, 10)):\n        length = random.randint(1, 10)\n        word = \"\"\n        for _ in range(length):\n            character = chr(random.randint(ord('a'), ord('z')))\n            word += character\n        words.append(word)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimizeConcatenatedLength(words)\n\n    return words, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimizeConcatenatedLength(words) == expected_result\n        print(f\"assert solution.minimizeConcatenatedLength({words}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimizeConcatenatedLength({words}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimizeConcatenatedLength(['zdzrkipi', 'mocpnmlzma', 'mxrdfqeaj', 'ehx', 'dqtufbfql', 'kgh']) == 42\nassert solution.minimizeConcatenatedLength(['lcuy', 'nbbktxm', 'o', 'nlrrduhfut', 'psehys', 'mqrxllvajd', 'rarnykml', 'b', 'ldlbccmstd']) == 55\nassert solution.minimizeConcatenatedLength(['clk', 'ttpuwvlxjp', 'gkh', 'a', 'pez']) == 19\nassert solution.minimizeConcatenatedLength(['krek', 'fo', 'decoaflqqq', 'ovtqttohrl']) == 25\nassert solution.minimizeConcatenatedLength(['oiqkq', 'ae', 'flpgexnc', 'aovnfw', 'oowzbrgdy']) == 30\nassert solution.minimizeConcatenatedLength(['alza', 'itlylya', 'td', 'qlgitd', 'gg', 'mkllam', 'yd', 'ecqjjzkyp', 'i', 'jdzidjnhr']) == 46\nassert solution.minimizeConcatenatedLength(['fgyigje', 'e', 'yyhxu', 'oiy']) == 14\nassert solution.minimizeConcatenatedLength(['lfjmznyold', 'hvwvqrbqgp', 'gd', 'yu', 'xnrby', 'jspksc', 'hqoaaohvg', 'ithrmrcwu', 'tfghh', 'ejvm']) == 60\nassert solution.minimizeConcatenatedLength(['o', 'jxp', 'lcs', 'lprkonfm', 'htggadrfau', 'sprtbw', 'uqmdoyf', 'wgpb']) == 40\nassert solution.minimizeConcatenatedLength(['qvzcerbube', 'e', 'ofscbxca', 'nazvfo', 'xwvqbjocx', 'c', 'woxrniz', 'levqhqwgw', 'jzepfzp']) == 55\nassert solution.minimizeConcatenatedLength(['fcbnurb']) == 7\nassert solution.minimizeConcatenatedLength(['zscwsc', 'qlqc', 'qbjt', 'l', 'sbrenakeq', 'w', 'vazovv', 'gav', 'vhylv']) == 37\nassert solution.minimizeConcatenatedLength(['lpexsbto', 'mlofs', 'i']) == 14\nassert solution.minimizeConcatenatedLength(['qjeaxwqey', 'kuwwuc', 'ahq', 'iehmbmzqna']) == 26\nassert solution.minimizeConcatenatedLength(['iftwvycii', 'e', 'ocb', 'bptj', 'nemiuo', 'mb', 'aucjq', 'dwth', 'rfghmosjjp', 'yp']) == 45\nassert solution.minimizeConcatenatedLength(['nfmrp', 'd', 'eczzmrxd', 'giyfnbcmwz', 'pmqk', 'grgjehmcu', 'wdvyzpk', 'vhbzciy', 'sxngitb']) == 56\nassert solution.minimizeConcatenatedLength(['johwprrwj', 'dc']) == 11\nassert solution.minimizeConcatenatedLength(['pqnxi', 'vmvy', 'otrqlwq', 'eo', 'ndq']) == 20\nassert solution.minimizeConcatenatedLength(['slzgqanm', 'brhb', 'zlpb', 'l', 'v', 'vftrvhaxut', 'govmeo', 'qqxkf', 'uk']) == 39\nassert solution.minimizeConcatenatedLength(['ackzciba', 'ac', 'tewbko']) == 15\nassert solution.minimizeConcatenatedLength(['joronudab', 'ndncflwbq', 'ko', 'qkiapwnqe', 'gdangelwb', 'kankm', 'kdz', 'rweew']) == 50\nassert solution.minimizeConcatenatedLength(['garsvsxjer', 'yuxblpzsd', 'kixtvndih', 'oa', 'qzuwoln', 'u']) == 38\nassert solution.minimizeConcatenatedLength(['zoqbmmw', 'mptc', 'ybwctasf', 'esrmqcd', 'ttdaefy', 'eonsge']) == 38\nassert solution.minimizeConcatenatedLength(['b', 'zfudohs', 'isgrfjrkx', 'hzym', 'ufrqtbcry', 'gwqg', 'ml', 'g', 'fcbmxda']) == 42\nassert solution.minimizeConcatenatedLength(['eklafnja']) == 8\nassert solution.minimizeConcatenatedLength(['upm', 'iuk', 'betrv', 's', 'gj', 'fcplelegu']) == 22\nassert solution.minimizeConcatenatedLength(['txgatrsyfj', 'qubss', 'yqjath', 'lxj', 'ztwq', 'mlqrhttbo', 'xyfkeb', 'fvjlmzgvez']) == 51\nassert solution.minimizeConcatenatedLength(['brpyl', 'exuqxna', 'newzrir', 'ha', 'yohjtqv', 'blovqfbwk', 'mzkremxrh', 'qtebvgqk', 'osycwwhm']) == 60\nassert solution.minimizeConcatenatedLength(['elvkuyy']) == 7\nassert solution.minimizeConcatenatedLength(['fva', 'b']) == 4\nassert solution.minimizeConcatenatedLength(['k', 'fdtls', 'rnwztwz', 'bzygrlyzl', 'sdhusb', 'dwbwlbtu', 'oeblitwfxd', 'jdnb', 'ujupezl']) == 55\nassert solution.minimizeConcatenatedLength(['hadazczv', 'phcikopxk', 'sbdhpaxbt', 'sdoc', 'xmggy']) == 35\nassert solution.minimizeConcatenatedLength(['tqpn', 'grnzrqggvn', 'cjvkfau', 'abmfinyj', 'rjwf', 'al']) == 35\nassert solution.minimizeConcatenatedLength(['ihmwzcyt', 'h', 'h', 'gotwfbasbi', 'vlmam']) == 23\nassert solution.minimizeConcatenatedLength(['kfgnel', 'uztafegi']) == 14\nassert solution.minimizeConcatenatedLength(['njspfebn', 'hwnpsyaedb', 'bwembc', 'tyaejs']) == 29\nassert solution.minimizeConcatenatedLength(['g', 'abhqergxfa', 'ypz', 'i', 'p']) == 16\nassert solution.minimizeConcatenatedLength(['kkxqmidlr', 'fdevkk', 'irlcbzqept', 'yv']) == 26\nassert solution.minimizeConcatenatedLength(['jgpfrxmxfg', 'kyauli', 'nz', 'fzgd', 'doklt', 'bjudt', 'dxkpjerdr', 'bazdkqinf', 'kbpdnl', 'nneqhtor']) == 63\nassert solution.minimizeConcatenatedLength(['b']) == 1\nassert solution.minimizeConcatenatedLength(['rsuncls', 'qivjnoetk', 'qqquhaj', 'ibfueydu', 'udfkcxtefi', 'dhp', 'uzsim', 'vlbzpyrudl']) == 58\nassert solution.minimizeConcatenatedLength(['y', 'qgsrmgm', 'rvdzit']) == 14\nassert solution.minimizeConcatenatedLength(['ss', 'mclvfmyup', 'akkyxu', 'iaaeixntrw', 'wpj']) == 29\nassert solution.minimizeConcatenatedLength(['cishi']) == 5\nassert solution.minimizeConcatenatedLength(['sdmkdbkhy', 'bjf', 'msgrigow', 'ghnfmjgqhz', 'qlx', 'll', 'ykxs', 'gcvo']) == 42\nassert solution.minimizeConcatenatedLength(['gzwtdeho', 'ghzsepzngz', 'nopmafth', 'lcfdbmu', 'tyw']) == 36\nassert solution.minimizeConcatenatedLength(['fikqvqt', 'secnhm', 'dyezuc', 'ijssqflx', 'zmcnl', 'z', 'idtx']) == 36\nassert solution.minimizeConcatenatedLength(['qteeqxcbtw', 'h', 'g', 'timkulalih', 'oyysbxb', 'tc', 'jybtxkyqfx', 'gm']) == 41\nassert solution.minimizeConcatenatedLength(['ynmwlwng', 'xzbqmftpf', 'zhhjehcx', 'wsj', 'bwxzp', 'rdh', 'trwjbr']) == 40\nassert solution.minimizeConcatenatedLength(['er', 'agsepxf', 'wbe', 'eurmep', 'authiz', 'xqhnk', 'xykxkqibk', 'dbiijge', 'rzplzvqqb']) == 52\nassert solution.minimizeConcatenatedLength(['ldzmffc', 'kzkbtajn', 'nvurqhuw']) == 22\nassert solution.minimizeConcatenatedLength(['qxkqjatfn', 'ky', 'poxcb', 'bm', 'wjscms', 'hkwckielza', 'bhghlint', 'xj']) == 43\nassert solution.minimizeConcatenatedLength(['scdrjuqwh', 'snmsphuzba', 'qsgahyvxrm', 'tluj', 'bknhmjdw', 'pv', 'jvsm', 'ofrtjm']) == 52\nassert solution.minimizeConcatenatedLength(['iawkycuro', 'lw', 'tri', 'mhg']) == 16\nassert solution.minimizeConcatenatedLength(['rpc']) == 3\nassert solution.minimizeConcatenatedLength(['uljtp', 'ojgt', 'tzvgm', 'lhhjsb']) == 19\nassert solution.minimizeConcatenatedLength(['dceiwsciy', 'bth', 'xj']) == 14\nassert solution.minimizeConcatenatedLength(['guuppyhuah', 'ypzkzck', 'sieuzud']) == 24\nassert solution.minimizeConcatenatedLength(['mjqakvf', 'tg', 'yferrfzsdu', 'rfeyprnaxe', 'hu', 'ghwfwnnpm']) == 39\nassert solution.minimizeConcatenatedLength(['vzxemtqi', 'xyhrzxytb', 'ucagtmnx', 'ozyorioqzz', 'mxumrokyx', 'fz', 'abzjgtol', 'xvavwzk', 'ukqoxzidsb', 'yzikvuh']) == 76\nassert solution.minimizeConcatenatedLength(['rzj']) == 3\nassert solution.minimizeConcatenatedLength(['cvyfmszzo', 'uw', 'urkk', 'llzhqr', 'uvl', 'cjxgm', 'lazmjm', 'kqtj']) == 37\nassert solution.minimizeConcatenatedLength(['gv', 'bfeaht', 'oxtkjolyw', 'hjy', 'fubk', 'ymxbdoq', 'zxhiplduo', 'emr']) == 42\nassert solution.minimizeConcatenatedLength(['haa', 'xcijz', 'qtyivn', 'jwhsmvredg', 'fo', 'xotztouycb', 'iqrqtdjhe', 'k']) == 46\nassert solution.minimizeConcatenatedLength(['hqqdqksrh', 'dy', 'cb', 'za', 'znw', 'ao', 'cbzgjzee', 'mzrsn', 'tnbhzumb', 'xyrn']) == 44\nassert solution.minimizeConcatenatedLength(['gzfecod', 'phgi', 'ibtpjlgt', 'jnrhaw', 'a', 'esky']) == 29\nassert solution.minimizeConcatenatedLength(['grmk', 'qsbuofl', 'fxxzmlurwj']) == 21\nassert solution.minimizeConcatenatedLength(['yejqhjgl', 'xix', 'rpmhuiyghy', 'piii', 'zrcvgmvvrs', 'cuuvv']) == 39\nassert solution.minimizeConcatenatedLength(['azyup', 'u', 'ukku', 'qvkuhra', 'ty', 'q', 'kbtdaepxtp', 'xsrqye', 'otkqs', 'guql']) == 42\nassert solution.minimizeConcatenatedLength(['blxkdsrvi', 'bodedanoqs', 'xcnzpubcgh', 'peferplnuq', 'd', 'bxc']) == 43\nassert solution.minimizeConcatenatedLength(['jdcjh', 'xgmvl', 'jyuzb']) == 15\nassert solution.minimizeConcatenatedLength(['baoxsy', 'tvczt', 'wvxfoffo', 'o', 'kzsdyus', 'irflaxnd', 'zetdzjsugc', 'sfbkhvfo', 'zv', 'jelinhgjg']) == 62\nassert solution.minimizeConcatenatedLength(['foxhe', 'sgkohpvpkr', 'dtfjiwdhxs', 'zxpwu', 'ksryxglc']) == 37\nassert solution.minimizeConcatenatedLength(['zyge', 'xnwvtsxs', 'p']) == 13\nassert solution.minimizeConcatenatedLength(['ijbykylcy', 'qmilydkuxb', 'h', 'yvdezoqa', 'ocr', 'qwsctfysrd', 'nwaztgcpg', 'ehjhkogah', 'tgepor', 'plcmuere']) == 70\nassert solution.minimizeConcatenatedLength(['c']) == 1\nassert solution.minimizeConcatenatedLength(['rew', 'vumctthqp', 'cvg', 'mmsyhij', 'cdqjp']) == 27\nassert solution.minimizeConcatenatedLength(['kyid', 'sskpcaofh']) == 13\nassert solution.minimizeConcatenatedLength(['hqmflopvul']) == 10\nassert solution.minimizeConcatenatedLength(['jgclz', 'nbhbjcatn', 'bxrisfqc', 'vjbd', 'vxuqhn']) == 31\nassert solution.minimizeConcatenatedLength(['b']) == 1\nassert solution.minimizeConcatenatedLength(['wowbw', 'nt', 'aghwgdh', 'ojoqtjd', 'bzhrch']) == 27\nassert solution.minimizeConcatenatedLength(['qrjkutdu', 'tu', 'auhumtyitm', 'uuig', 'faqxqsj', 'gg', 'wql']) == 34\nassert solution.minimizeConcatenatedLength(['jzghcyr', 'pke', 'i']) == 11\nassert solution.minimizeConcatenatedLength(['jbnyqbp', 'vsygh']) == 12\nassert solution.minimizeConcatenatedLength(['lpznnba', 'lofmnqqb', 'd', 'kwth', 'cszlogh']) == 27\nassert solution.minimizeConcatenatedLength(['xeosmmhi', 'm', 'ycicp', 'bjmz', 'a']) == 19\nassert solution.minimizeConcatenatedLength(['rlgxqy', 'kutfqemmzh', 'fvknsrstnw', 'qljcoc', 'ktoievnua', 'fqgajrtnjh', 'zgztpourv', 'wbzmq']) == 64\nassert solution.minimizeConcatenatedLength(['iynx', 'jhz', 'wi', 'shvkdt', 'cvdxb', 'ba', 'hiybtoi', 'gjdrbp']) == 33\nassert solution.minimizeConcatenatedLength(['lmahhwhau', 'sohfns', 'prgsxc', 'aujalh']) == 27\nassert solution.minimizeConcatenatedLength(['yrnixnfx', 'ner', 'tbaqqjzj', 'rgaxlck', 'vusmzchh', 'yicrzr', 'bzwfub', 'aadpzphlel', 'cbjsovgf', 'xqgyhit']) == 69\nassert solution.minimizeConcatenatedLength(['wfmwo', 'ewztuxjmkh', 'iw', 'kbemikodvx', 'gxsbki', 'lknnjfcy', 'tn']) == 41\nassert solution.minimizeConcatenatedLength(['ecx', 'alnb', 'jhpnx', 'zwl', 'eptuvhafwl', 'ontvbifdx', 'hffg']) == 38\nassert solution.minimizeConcatenatedLength(['eub', 'eloh', 'vncjsyjacy', 'hhaxuxpw', 'pkfpwt']) == 30\nassert solution.minimizeConcatenatedLength(['dbdh', 'qcdkp', 'ugjfqj', 'xn', 'zzsqvcjv']) == 25\nassert solution.minimizeConcatenatedLength(['dxnaysb', 'mswdujh', 'qvrfhc']) == 20\nassert solution.minimizeConcatenatedLength(['h']) == 1\nassert solution.minimizeConcatenatedLength(['vq', 'jm', 'vc', 'g', 'ehknicm']) == 14\nassert solution.minimizeConcatenatedLength(['bljrvfs']) == 7\nassert solution.minimizeConcatenatedLength(['dnjsivms', 'gu', 'un', 'ehet', 'ertcnx', 'mjh', 'axfxp', 'eudugk', 'obupwan']) == 42",
  "inefficient_solution": "class Solution:\n    def minimizeConcatenatedLength(self, words: List[str]) -> int:\n        @functools.lru_cache(None)\n        def dfs(i: int, a: str, b: str, memo = {}) -> int:\n            if i >= len(words):\n                return 0\n\n            key = (i, a, b)\n            if key in memo:\n                return memo[key]\n\n            s = words[i]\n            x = dfs(i + 1, a, s[-1]) - int(s[0] == b) + [1, len(words[i])][s[0] == b]\n            y = dfs(i + 1, s[0], b) - int(s[-1] == a) + [1, len(words[i])][s[-1] == a]\n            memo[key] = len(s) + min(x, y)\n            return memo[key]\n\n        return len(words[0]) + dfs(1, words[0][0], words[0][-1])",
  "is_python": true
}