{
  "problem_idx": 127,
  "task_name": "Word Ladder",
  "markdown_description": "\nA **transformation sequence** from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:\n\n\n* Every adjacent pair of words differs by a single letter.\n* Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n* `sk == endWord`\n\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`, return *the **number of words** in the **shortest transformation sequence** from* `beginWord` *to* `endWord`*, or* `0` *if no such sequence exists.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n**Output:** 5\n**Explanation:** One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n**Output:** 0\n**Explanation:** The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= beginWord.length <= 10`\n* `endWord.length == beginWord.length`\n* `1 <= wordList.length <= 5000`\n* `wordList[i].length == beginWord.length`\n* `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n* `beginWord != endWord`\n* All the words in `wordList` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                s = q.popleft()\n                step = m1[s]\n                s = list(s)\n                for i in range(len(s)):\n                    ch = s[i]\n                    for j in range(26):\n                        s[i] = chr(ord('a') + j)\n                        t = ''.join(s)\n                        if t in m1 or t not in words:\n                            continue\n                        if t in m2:\n                            return step + 1 + m2[t]\n                        m1[t] = step + 1\n                        q.append(t)\n                    s[i] = ch\n            return -1\n\n        words = set(wordList)\n        if endWord not in words:\n            return 0\n        q1, q2 = deque([beginWord]), deque([endWord])\n        m1, m2 = {beginWord: 0}, {endWord: 0}\n        while q1 and q2:\n            t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n            if t != -1:\n                return t + 1\n        return 0\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\nfrom typing import List\n\nclass Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                s = q.popleft()\n                step = m1[s]\n                s = list(s)\n                for i in range(len(s)):\n                    ch = s[i]\n                    for j in range(26):\n                        s[i] = chr(ord('a') + j)\n                        t = ''.join(s)\n                        if t in m1 or t not in words:\n                            continue\n                        if t in m2:\n                            return step + 1 + m2[t]\n                        m1[t] = step + 1\n                        q.append(t)\n                    s[i] = ch\n            return -1\n\n        words = set(wordList)\n        if endWord not in words:\n            return 0\n        q1, q2 = deque([beginWord]), deque([endWord])\n        m1, m2 = {beginWord: 0}, {endWord: 0}\n        while q1 and q2:\n            t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n            if t != -1:\n                return t + 1\n        return 0\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate beginWord\n    beginWord = \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(1, 10)))\n    \n    # Generate endWord\n    endWord = \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(1, 10)))\n    \n    # Generate random number of words in the wordList\n    num_words = random.randint(1, 10)\n    \n    # Generate wordList\n    wordList = []\n    for _ in range(num_words):\n        word = \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(1, 10)))\n        wordList.append(word)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.ladderLength(beginWord, endWord, wordList)\n\n    return beginWord, endWord, wordList, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        beginWord, endWord, wordList, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.ladderLength(beginWord, endWord, wordList) == expected_result\n        print(f\"assert solution.ladderLength('{beginWord}', '{endWord}', {wordList}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.ladderLength('{beginWord}', '{endWord}', {wordList}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.ladderLength('q', 'fmfnz', ['srrtzvn', 'undx']) == 0\nassert solution.ladderLength('uchawe', 'ecazvceaq', ['drsjhqh', 'o', 'e', 'p', 'mb', 'sx']) == 0\nassert solution.ladderLength('bl', 'mcodzne', ['cnauwevwyv']) == 0\nassert solution.ladderLength('bnnwsa', 'fcakpvwa', ['ovjuwzcx', 'ecrzjhzm']) == 0\nassert solution.ladderLength('kigvwac', 'jkzegatjm', ['hdeqcmwy', 'hyaxmvbd', 'jrgezivn']) == 0\nassert solution.ladderLength('sqfb', 'ojvqgqhxif', ['zoolesm', 'jz', 'gkrngt', 'aaccte', 'izb', 'vfzq']) == 0\nassert solution.ladderLength('pralnl', 'jacmwn', ['khl']) == 0\nassert solution.ladderLength('vyylfje', 'nzzulfor', ['cgwbhxe', 'ofqc', 'harlvys', 'wezng', 'z']) == 0\nassert solution.ladderLength('xodq', 'fptr', ['jsaf', 'whitoourq', 'gbrw', 'geycoo', 'wlj', 'tq']) == 0\nassert solution.ladderLength('f', 'jvk', ['hbgmjjzcj', 'kcxvsyavol', 'b', 'rc', 'uawvpazi']) == 0\nassert solution.ladderLength('ne', 'flie', ['zb', 'nnijdan']) == 0\nassert solution.ladderLength('g', 'bdmrwvyd', ['znyo', 'qv', 'fusme', 'p', 'ipqs', 'ans']) == 0\nassert solution.ladderLength('w', 'qo', ['oalobeden', 'i', 'kwoyojxun', 'qclwlfkdvv', 'sog', 'g', 'llrtdt', 'ohztj', 'pba', 'hbv']) == 0\nassert solution.ladderLength('t', 'jbvg', ['oogzvt', 'gcnmt', 'tbbcnfg', 'hiyswijeh', 'bmeilnwer', 'nbirci', 'nysjoe', 'rg', 'fafb', 'aweaypogel']) == 0\nassert solution.ladderLength('bam', 'kvde', ['mumd', 'bcolzwpx', 'qqecvkau', 'eoovn']) == 0\nassert solution.ladderLength('ay', 'tyysgaks', ['ipnd', 'pgjxwx', 'lwhebfvuit']) == 0\nassert solution.ladderLength('k', 'rm', ['mhcbd', 'hyrgvvmv', 'dxdpbsqjvu', 'z', 'br', 'stqjgcvf']) == 0\nassert solution.ladderLength('ujkeir', 'xlx', ['kblxoh', 'k']) == 0\nassert solution.ladderLength('df', 'vv', ['bgn', 'ckfllsy', 'yrs', 'buaovul', 'sfddbcc', 'zhadx', 'tympncmm', 'nupq', 'nf']) == 0\nassert solution.ladderLength('grksfrbht', 'dtms', ['xyolmxulhb', 'q', 'uggmvas', 'zqoibrcbok', 'cirvaas', 'hzd', 'sgwjibftaa', 'hsfn']) == 0\nassert solution.ladderLength('llylol', 'bengpv', ['zxqw', 'b', 'qkxsv', 'remkmbu', 'nikhzdxkc', 'sczk']) == 0\nassert solution.ladderLength('gkpjndab', 'm', ['eczg', 'upd', 'vtzr', 'nfudjk']) == 0\nassert solution.ladderLength('qir', 'rsay', ['okqq', 'nnxqqljnw', 'rg', 'wj', 'zxofjqdqx', 'e', 'dbecukwqbn']) == 0\nassert solution.ladderLength('rdbfggj', 'u', ['ulbet', 'lqgls', 'vvsopos', 'mweuagfk', 'dzp', 'e', 'm', 'l', 'ojfroc', 'lxlxuywa']) == 0\nassert solution.ladderLength('s', 's', ['hhpsg', 'vfiaivinkh', 'iyie', 'pusow', 'uoqtjhj', 'zdlmbwrvd', 'ndhjxetsxs', 'icwnda']) == 0\nassert solution.ladderLength('qgdwxdj', 'asy', ['hvqzy', 'gwlqtwolny', 'qqczsbobz', 'yybnhf', 'psnqdbfnt', 'd']) == 0\nassert solution.ladderLength('yr', 'lq', ['spmdhflyyy', 'ahefmj', 'bzkknxk', 'welmgfkrhx', 'nenluhpsdk']) == 0\nassert solution.ladderLength('vu', 'ovnwkffrbq', ['f', 'sdhx', 'e', 'crvmie']) == 0\nassert solution.ladderLength('mcomwdfd', 'qugxudn', ['ohqndxbgo', 'zoy', 'txue', 'yoybkhaol', 'njxuljxj', 'exqjt', 'isvqirkcwm', 'hosmvl', 'apvxuwmexo']) == 0\nassert solution.ladderLength('jgrbsendj', 'l', ['isyparj', 'yjap', 'b', 'redfjitx', 'sancjmhz', 'onypjqwos']) == 0\nassert solution.ladderLength('omhtcho', 'uwczwcxj', ['in', 'pzuzrgwa', 'geyyayoyc', 'tapffcr', 'bm', 'kwjryi', 'bivv']) == 0\nassert solution.ladderLength('sqgycrmgph', 'pnct', ['ls']) == 0\nassert solution.ladderLength('aggs', 'zf', ['aydqi', 'bkvbobjaut', 'qlbxyyccf', 'pjyqmqqlyh', 'e']) == 0\nassert solution.ladderLength('fs', 'frvwuzlgw', ['xgqbskl', 'stysekuvr', 'pv', 'pud', 'a', 'ks']) == 0\nassert solution.ladderLength('jfwenx', 'qzkgka', ['vo', 'qhntlwjak', 'tp', 'zitjxczdti']) == 0\nassert solution.ladderLength('gxuir', 'uuguz', ['maa', 'fot', 'oa', 'rxad']) == 0\nassert solution.ladderLength('mina', 'axpf', ['qsrms', 'vnnyuiwecd', 'poqzicjes', 'xqspynuoqr', 'idn', 'lcppdgcipa', 'vrcc', 'syblkw', 'fha']) == 0\nassert solution.ladderLength('ittiw', 'eatfqr', ['sxdanprewi', 'lbqfmi', 'flasavfm', 'qrrbezp', 'xos', 'b', 'r', 'svyy']) == 0\nassert solution.ladderLength('d', 'fhhic', ['zzj', 'qjcsnesn', 'qnyakibsk', 'hrdqabi', 'njlfvn', 'simuw', 'hfe', 'ihjtmk', 'mcjl']) == 0\nassert solution.ladderLength('kyx', 'w', ['yedofomnnb', 'qxtlamekd', 'rvpmhrvumx', 'dgm']) == 0\nassert solution.ladderLength('ytxwcaej', 'mokhf', ['bfiavi', 'gbrkefd', 'tknlir', 'vtxxszi', 'jikqeap']) == 0\nassert solution.ladderLength('acadsi', 'kroimasvsw', ['qxndd', 'rflyqucz', 'el']) == 0\nassert solution.ladderLength('jxxszcvb', 'sby', ['wcab', 'nz']) == 0\nassert solution.ladderLength('nkbefkk', 'hqvem', ['qivtjrpp', 'okxrwqsx', 'usimmyfmsz', 'rci', 'w', 'tz', 'efium', 'obawvrt', 'hgwk']) == 0\nassert solution.ladderLength('dggdmwwwyt', 'kdhjzv', ['bza']) == 0\nassert solution.ladderLength('rvhuqh', 'emjgznml', ['zkyozcvh', 'fapnx', 'fkaqm']) == 0\nassert solution.ladderLength('melptwy', 'zmhhsh', ['thcvnba', 'jmzbdhxjzp', 'nkgzisf', 'inuk', 'rxopm', 'sm', 'nwwuemupdc']) == 0\nassert solution.ladderLength('l', 'pvrls', ['qzx', 'iftwwulsxr', 'rrliq', 'ldepd', 'tt', 'swygngm', 'qfglltl', 'ccedo']) == 0\nassert solution.ladderLength('afxi', 'cifpby', ['pm', 'r', 'panqhv', 'tnz']) == 0\nassert solution.ladderLength('mj', 'rmlimq', ['wetuwa', 'y', 'q', 'eugjf', 'oepgx', 'kfxvvr', 'atz', 'vcu', 'pxgkbbqe']) == 0\nassert solution.ladderLength('enbwhoithb', 'pidmwy', ['ti', 'lwsepbnnsb', 'g', 'cfjrepuq', 'r', 'tnpl', 'gthga', 'iky', 'ibpekxevd']) == 0\nassert solution.ladderLength('x', 'fwy', ['mm', 'bgdzde', 'ht', 'gderlgc', 'cxpr', 'jugtyhjva', 'kme']) == 0\nassert solution.ladderLength('os', 'uzqfj', ['qkxelqiut', 'gqbetk', 'kxtt', 'xgrrqrecec']) == 0\nassert solution.ladderLength('jkhxdeyba', 'wylxuyaafs', ['rby', 'kvywpksq', 'pklm']) == 0\nassert solution.ladderLength('gaww', 'qwduql', ['auvemoj', 'srbfie', 'grnusbpuz', 'uiphbq', 'yg', 'gxjdzpn', 'wpu']) == 0\nassert solution.ladderLength('mwh', 'jqwrntfm', ['xtq', 'u', 'ts', 'ojh', 'dgl', 'r']) == 0\nassert solution.ladderLength('d', 'phclvdbu', ['ouwzd', 'ssovrk', 'udn', 'blbzcoh', 'djomalyuzo', 'fud', 'o', 'lynk', 'pfmgulw', 'voikg']) == 0\nassert solution.ladderLength('cgaxj', 'ub', ['jxk', 'iheizlbn']) == 0\nassert solution.ladderLength('olxnak', 'i', ['aylq', 'tntu', 'odyfghbc', 'qbzlb']) == 0\nassert solution.ladderLength('xk', 'egx', ['enrgdhqs', 'b', 'hwhsv', 'emgsd', 'zuw', 'ntyueqwwv', 'folztor', 'ktdgdpfc', 'mutgzvma']) == 0\nassert solution.ladderLength('onge', 'fdvhnyr', ['oosfvkwur', 'mjtmmwvajn']) == 0\nassert solution.ladderLength('huk', 's', ['eemt', 'pcwx', 'g', 'ilizhmm', 'nhmljr', 'ychhimeqvv', 'abdkgfhdgw']) == 0\nassert solution.ladderLength('xzsast', 'axysywhiqa', ['iyszujwd', 'hhpy']) == 0\nassert solution.ladderLength('ecguvy', 'dmtqnnzj', ['tcfwh']) == 0\nassert solution.ladderLength('qhjdm', 'tnywegctiy', ['cp', 'l']) == 0\nassert solution.ladderLength('ob', 'h', ['upltli', 'bqejxrtk']) == 0\nassert solution.ladderLength('ut', 'uwydunl', ['zwxcvkyl', 'trxzjc', 'pw', 'ny', 'bwglqvo', 'titoerfma', 'e', 'kw']) == 0\nassert solution.ladderLength('gznhkbqbm', 'xboqfebxpc', ['mcjwnyfa', 'gfsmhegg', 'b', 'hoqjgzuizk', 'cdoa', 'edyiadsvl', 'coqsd', 'uykxieakjv', 'mqibbovj', 'xv']) == 0\nassert solution.ladderLength('xsgbvmvsx', 'g', ['aaqmtez']) == 0\nassert solution.ladderLength('uccdxgtrs', 'jrcbdetho', ['lttvbkff', 'zyaec', 'aw', 'wwohewpt', 'hywxshygx', 'mezazxym', 'bleowycfw']) == 0\nassert solution.ladderLength('lghkjp', 'j', ['xu']) == 0\nassert solution.ladderLength('mxhjhg', 'qfircrqs', ['fcf', 'pxhuuv', 'n', 'grbljlu', 'opej']) == 0\nassert solution.ladderLength('haxcll', 'pswfpol', ['ds', 'ab', 'lfigvsw', 'kpiudqopg', 'mbkkxzh', 'qkjuhdjljp', 'oghafi', 'vnsidzmmnu']) == 0\nassert solution.ladderLength('pbxungmptb', 'ngwpor', ['r', 'uoow', 'znjie', 'mqwnr']) == 0\nassert solution.ladderLength('lkxh', 'xvjj', ['lio', 'jvdpf', 'vmwb', 'hrlkv', 'pzebaio', 'oqd', 'ljux', 'tlbuvlqisc']) == 0\nassert solution.ladderLength('gzgtdlii', 'heip', ['qocoizc']) == 0\nassert solution.ladderLength('pxh', 'yw', ['n', 'lkc', 'ddalkh', 'wnbyaniye', 'kxvx', 'hg', 'y', 'wxly']) == 0\nassert solution.ladderLength('ocychcnjq', 'xc', ['tae', 'e', 'uubvzbpvfg', 'gqkyxsg', 'f', 'hx', 'et', 'lhll', 'dfcscc', 'ja']) == 0\nassert solution.ladderLength('mitmdjxrl', 'r', ['u', 'kbb', 'a', 'pw']) == 0\nassert solution.ladderLength('jamr', 'nugbkvsdhm', ['dhth', 'yrstgd']) == 0\nassert solution.ladderLength('txutd', 'qsdlrgn', ['pjaqxww', 'cahelcm', 'iwb', 'zvjzutov', 'vbaeuysxs', 'mmgxaohht', 'xug', 'buozha']) == 0\nassert solution.ladderLength('bocu', 'vbywenpzdt', ['twfzuwmy', 'ir', 'nbmvfbvaj', 'vmqqhljca', 'p', 'gdmpdhl', 'u', 'kb', 'bseaqc', 'f']) == 0\nassert solution.ladderLength('azupid', 'wl', ['dkaolfqa', 'zbrpg', 'bxvbkwqit', 'sgird', 'wsdnadsn', 'htkvb', 'qvpp', 'mxf']) == 0\nassert solution.ladderLength('xemqukj', 'ynyddf', ['eo', 'g', 'kcsmxxohf', 'arzk', 't', 'jjllxjimo', 'qwmerat']) == 0\nassert solution.ladderLength('mja', 'c', ['kjqt', 'yjakn', 'suqwme', 'rafyq', 'rfedq', 'twkmbe']) == 0\nassert solution.ladderLength('pfmf', 'fqvbdev', ['sgwpcgs', 'lzfuzb']) == 0\nassert solution.ladderLength('redobcd', 'ehqa', ['ycgpi', 'a', 'o', 'jhfglgijji']) == 0\nassert solution.ladderLength('e', 'ogpmiwu', ['krgk', 'wkl', 'mzyuyfe', 'mblcovfj', 'retglxgrz', 't', 'yazpawye']) == 0\nassert solution.ladderLength('xrvf', 'glnu', ['jvjgx', 'et']) == 0\nassert solution.ladderLength('lvup', 'f', ['byhgqpqw', 'iccwk', 'qhy', 'paye', 'xfdec', 'nyurqef', 'krchd', 'mzvt', 'wie', 'odiiibiorb']) == 0\nassert solution.ladderLength('jyyajuasg', 'engdbpf', ['ahi', 'oo', 'xgqrshflx', 'or', 'jw', 'cnjgkvohwe', 'l']) == 0\nassert solution.ladderLength('akgpl', 'afpgqn', ['ateabxves', 'wrz', 'vllsrip', 'jjokinvfo', 'wy', 'hwijscn', 'pvy', 'tsnmsbkjho', 'cibpzmqmw', 'jbqfr']) == 0\nassert solution.ladderLength('yh', 'lwnkxcq', ['dphl', 'smwjach', 'ihcjmoio', 'oncg', 'dnrvjmwyug', 'tixcipf', 'n', 'incbdqbhu']) == 0\nassert solution.ladderLength('fphz', 'bmejkprrn', ['jrcwnlpjuo', 'jgpkip', 'vkuidj', 'omrxjqwr', 'llaanfg', 'guywzqifm', 'qdjoc']) == 0\nassert solution.ladderLength('n', 'n', ['m', 'yh']) == 0\nassert solution.ladderLength('fl', 'clxstagzb', ['gma', 'hyocvzbio', 'wcirv', 'upfxc', 'mxmulwjnnz', 'tlnwjay']) == 0\nassert solution.ladderLength('smo', 'pwl', ['gu', 'icwwzruv', 'qddqknw', 'ohjslvmawi', 'witvsmodgq', 'jbnntoewas', 'b', 'qpkaswrkw', 'axzafi', 'kzdffvljfj']) == 0\nassert solution.ladderLength('buzcabym', 'kr', ['tl', 'vidgsr', 'uup', 'p', 'qudvpfvpy']) == 0\nassert solution.ladderLength('aorjr', 'odlemiodh', ['m', 'qv', 'icknde']) == 0\nassert solution.ladderLength('hv', 'zqsju', ['fqaywf', 'ocdbvdfhq', 'nfxpt', 'dl', 'pqjfjhjp', 'gx', 'psmd']) == 0",
  "inefficient_solution": "class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        def extend(m1, m2, q):\n            temp_q = []\n            for _ in range(len(q)):\n                s = q.pop(0)\n                step = m1[s]\n                s_list = list(s)\n                for i in range(len(s_list)):\n                    ch = s_list[i]\n                    for j in range(26):\n                        s_list[i] = chr(ord('a') + j)\n                        t = ''.join(s_list)\n                        if t in m1 or t not in words:\n                            continue\n                        if t in m2:\n                            return step + 1 + m2[t]\n                        m1[t] = step + 1\n                        temp_q.append(t)\n                    s_list[i] = ch\n            q.extend(temp_q)\n            return -1\n\n        words = [x for x in wordList] * len(wordList)\n        if endWord not in words:\n            return 0\n        q1, q2 = deque([beginWord]), deque([endWord])\n        m1, m2 = {beginWord: 0}, {endWord: 0}\n        while q1 and q2:\n            t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n            if t != -1:\n                return t + 1\n        return 0",
  "is_python": true
}