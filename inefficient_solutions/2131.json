{
  "problem_idx": 2131,
  "task_name": "Longest Palindrome by Concatenating Two Letter Words",
  "markdown_description": "\nYou are given an array of strings `words`. Each element of `words` consists of **two** lowercase English letters.\n\n\nCreate the **longest possible palindrome** by selecting some elements from `words` and concatenating them in **any order**. Each element can be selected **at most once**.\n\n\nReturn *the **length** of the longest palindrome that you can create*. If it is impossible to create any palindrome, return `0`.\n\n\nA **palindrome** is a string that reads the same forward and backward.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"lc\",\"cl\",\"gg\"]\n**Output:** 6\n**Explanation:** One longest palindrome is \"lc\" + \"gg\" + \"cl\" = \"lcggcl\", of length 6.\nNote that \"clgglc\" is another longest palindrome that can be created.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"]\n**Output:** 8\n**Explanation:** One longest palindrome is \"ty\" + \"lc\" + \"cl\" + \"yt\" = \"tylcclyt\", of length 8.\nNote that \"lcyttycl\" is another longest palindrome that can be created.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"cc\",\"ll\",\"xx\"]\n**Output:** 2\n**Explanation:** One longest palindrome is \"cc\", of length 2.\nNote that \"ll\" is another longest palindrome that can be created, and so is \"xx\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 105`\n* `words[i].length == 2`\n* `words[i]` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestPalindrome(self, words: List[str]) -> int:\n        cnt = Counter(words)\n        ans = x = 0\n        for k, v in cnt.items():\n            if k[0] == k[1]:\n                x += v & 1\n                ans += v // 2 * 2 * 2\n            else:\n                ans += min(v, cnt[k[::-1]]) * 2\n        ans += 2 if x else 0\n        return ans\n",
  "test_case_generator": "\nfrom typing import List\nfrom collections import Counter\nimport random\n\nclass Solution:\n    def longestPalindrome(self, words: List[str]) -> int:\n        cnt = Counter(words)\n        ans = x = 0\n        for k, v in cnt.items():\n            if k[0] == k[1]:\n                x += v & 1\n                ans += v // 2 * 2 * 2\n            else:\n                ans += min(v, cnt[k[::-1]]) * 2\n        ans += 2 if x else 0\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random words list\n    words = [chr(random.randint(ord('a'), ord('z'))) + chr(random.randint(ord('a'), ord('z'))) for _ in range(random.randint(2, 10))]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestPalindrome(words)\n\n    return words, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestPalindrome(words) == expected_result\n        print(f\"assert solution.longestPalindrome({words}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestPalindrome({words}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestPalindrome(['tm', 'zz', 'mb', 'db', 'sp']) == 2\nassert solution.longestPalindrome(['hd', 'xc', 'lg']) == 0\nassert solution.longestPalindrome(['rl', 'di', 'gy']) == 0\nassert solution.longestPalindrome(['kj', 'rq', 'uc', 'ci']) == 0\nassert solution.longestPalindrome(['yb', 'zj', 'mo', 'hz', 'pw', 'kg', 'ws']) == 0\nassert solution.longestPalindrome(['rf', 'xa', 'mu', 'cu', 'dx', 'rw', 'ha', 'ik', 'nt', 'xr']) == 0\nassert solution.longestPalindrome(['cq', 'dj', 'rs', 'yq']) == 0\nassert solution.longestPalindrome(['mz', 'nc', 'zg', 'uq', 'jt']) == 0\nassert solution.longestPalindrome(['gi', 'is', 'gg', 'hg', 'tm']) == 2\nassert solution.longestPalindrome(['lf', 'na', 'cb', 'mv']) == 0\nassert solution.longestPalindrome(['au', 'ce', 'vn', 'rd', 'pn', 'pl', 'zp', 'co', 'ez', 'kd']) == 0\nassert solution.longestPalindrome(['gz', 'js', 'fu', 'tn', 'jf', 'ft', 'pa', 'ig']) == 0\nassert solution.longestPalindrome(['mz', 'yo', 'sr', 'zx', 'as', 'tu', 'mt']) == 0\nassert solution.longestPalindrome(['mi', 'gr', 'er', 'wc']) == 0\nassert solution.longestPalindrome(['jr', 'no', 'ah', 'pk']) == 0\nassert solution.longestPalindrome(['cv', 'mf', 'oc']) == 0\nassert solution.longestPalindrome(['iz', 'ss', 'yq', 'ag', 'wx', 'ey', 'kd', 'qt', 'lp']) == 2\nassert solution.longestPalindrome(['eq', 'ur', 'ge', 'dx', 'uq', 'cd']) == 0\nassert solution.longestPalindrome(['ff', 'xf', 'xq', 'xo', 'rm', 'sy', 'nf', 'ea']) == 2\nassert solution.longestPalindrome(['ms', 'eq', 'in', 'vy']) == 0\nassert solution.longestPalindrome(['qx', 'xx', 'zv', 'xn', 'by']) == 2\nassert solution.longestPalindrome(['vl', 'io', 'sb', 'pi', 'tb']) == 0\nassert solution.longestPalindrome(['ys', 'wk', 'gz', 'cw', 'qw']) == 0\nassert solution.longestPalindrome(['ua', 'if', 'zb', 'ns']) == 0\nassert solution.longestPalindrome(['ak', 'pd', 'fp']) == 0\nassert solution.longestPalindrome(['qf', 'ku']) == 0\nassert solution.longestPalindrome(['xb', 'hh', 'ox']) == 2\nassert solution.longestPalindrome(['kq', 'oz', 'pc']) == 0\nassert solution.longestPalindrome(['rb', 'cx', 'wl', 'vt', 'qj', 'bf', 'ew']) == 0\nassert solution.longestPalindrome(['sa', 'be', 'qx', 'uy', 'pi', 'my', 'sm']) == 0\nassert solution.longestPalindrome(['ht', 'bd', 'ww', 'er', 'kg', 'ai', 'yp', 'mv']) == 2\nassert solution.longestPalindrome(['wz', 'of', 'nn', 'ps', 'aa']) == 2\nassert solution.longestPalindrome(['oa', 'wm', 'rh', 'en']) == 0\nassert solution.longestPalindrome(['nu', 'ya', 'iv', 'wl', 'go', 'ka']) == 0\nassert solution.longestPalindrome(['eu', 'rk', 'od']) == 0\nassert solution.longestPalindrome(['sc', 'we', 'aj', 'ni', 'kc', 'sk', 'to', 'pc']) == 0\nassert solution.longestPalindrome(['po', 'xa']) == 0\nassert solution.longestPalindrome(['yq', 'vm', 'mc', 'oy', 'ia']) == 0\nassert solution.longestPalindrome(['ij', 'cv', 'bg', 'jz', 'ag', 'uq', 'qf', 'dj', 'az']) == 0\nassert solution.longestPalindrome(['ui', 'wb', 'kf', 'gd', 'ye', 'th', 'hb', 'ab', 'qs']) == 0\nassert solution.longestPalindrome(['br', 'cd', 'ed', 'nz', 'bp', 'kc']) == 0\nassert solution.longestPalindrome(['vc', 'xd', 'ti']) == 0\nassert solution.longestPalindrome(['fg', 'ui', 'zp', 'du', 'id']) == 0\nassert solution.longestPalindrome(['sr', 'mq']) == 0\nassert solution.longestPalindrome(['du', 'ix']) == 0\nassert solution.longestPalindrome(['st', 'bp', 'vg', 'vy', 'jk', 'jf']) == 0\nassert solution.longestPalindrome(['ls', 'bo']) == 0\nassert solution.longestPalindrome(['ne', 'cn', 'ij', 'er', 'mc', 'tr', 'sr']) == 0\nassert solution.longestPalindrome(['jk', 'il', 'kh', 'mb', 'xl', 'os', 'jm']) == 0\nassert solution.longestPalindrome(['ce', 'nx', 'wq', 'oj']) == 0\nassert solution.longestPalindrome(['st', 'ph', 'nm', 'nu', 'rg', 'bn', 'tl']) == 0\nassert solution.longestPalindrome(['sk', 'xa', 'jd', 'pw', 'pp', 'wy', 'xo', 'rb', 'ji', 'vb']) == 2\nassert solution.longestPalindrome(['es', 'jh']) == 0\nassert solution.longestPalindrome(['kw', 'wn', 'af', 'fi', 'yj', 'qq']) == 2\nassert solution.longestPalindrome(['rq', 'dw', 'dn', 'zd', 'af']) == 0\nassert solution.longestPalindrome(['fm', 'ss', 'oj', 'ae', 'lc', 'gw', 'uu', 'sj']) == 2\nassert solution.longestPalindrome(['nd', 'gh', 've', 'vn', 'va', 'bt', 'cy']) == 0\nassert solution.longestPalindrome(['vn', 'ih', 'ul', 'yp', 'ob']) == 0\nassert solution.longestPalindrome(['mp', 'xg', 'be', 'tv', 'js']) == 0\nassert solution.longestPalindrome(['qr', 'wi', 'ma']) == 0\nassert solution.longestPalindrome(['ls', 'ta', 'jf']) == 0\nassert solution.longestPalindrome(['rn', 'bu', 'gb', 'xt']) == 0\nassert solution.longestPalindrome(['ew', 'ks', 'lm', 'em', 'vr', 'ed', 'tq']) == 0\nassert solution.longestPalindrome(['hi', 'pz', 'sy', 'rc', 'no', 'mf', 'qp']) == 0\nassert solution.longestPalindrome(['iz', 'lm', 'ml', 'df', 'tp', 'bm', 'ub']) == 4\nassert solution.longestPalindrome(['dp', 'jg', 'rq', 'pw', 'za', 'el']) == 0\nassert solution.longestPalindrome(['dy', 'uw', 'ph', 'hx']) == 0\nassert solution.longestPalindrome(['yd', 'xd', 'yh', 'jo', 'et', 'fw', 'hz']) == 0\nassert solution.longestPalindrome(['nu', 'vt', 'lr']) == 0\nassert solution.longestPalindrome(['rc', 'aq', 'uk', 'gr', 'ap', 'ox', 'dm']) == 0\nassert solution.longestPalindrome(['sm', 'bv']) == 0\nassert solution.longestPalindrome(['gy', 'nh', 'xl', 'jz', 'po', 'dm', 'ga', 'gl', 'zz', 'cd']) == 2\nassert solution.longestPalindrome(['uu', 'fj']) == 2\nassert solution.longestPalindrome(['vu', 'nf', 'oe', 'ao']) == 0\nassert solution.longestPalindrome(['qc', 'uy', 'tt', 'ms']) == 2\nassert solution.longestPalindrome(['ji', 'je', 'od', 'na', 'kz', 'ff', 'ld', 'vv', 'qf', 'wc']) == 2\nassert solution.longestPalindrome(['ra', 'zk', 'se', 'nv', 'az', 'ny', 'ju', 'tb', 'va']) == 0\nassert solution.longestPalindrome(['fn', 'xn']) == 0\nassert solution.longestPalindrome(['lv', 'de', 'kx', 'kb']) == 0\nassert solution.longestPalindrome(['qs', 'tk', 'vq', 'qo', 'yy', 'tq']) == 2\nassert solution.longestPalindrome(['aa', 'dj']) == 2\nassert solution.longestPalindrome(['am', 'my', 'yn', 'nj']) == 0\nassert solution.longestPalindrome(['ey', 'bd', 'qs', 'df', 'zf']) == 0\nassert solution.longestPalindrome(['fg', 'di', 'bw', 'jr', 'kj', 'ar']) == 0\nassert solution.longestPalindrome(['mm', 'hr', 'ri', 'wy', 'ko']) == 2\nassert solution.longestPalindrome(['tw', 'qc', 'cn', 'kn', 'py', 'vc', 'rn', 'ak', 'zh', 'tm']) == 0\nassert solution.longestPalindrome(['bv', 'zy', 'sp', 'oq', 'ni']) == 0\nassert solution.longestPalindrome(['ih', 'ro']) == 0\nassert solution.longestPalindrome(['ni', 'iu', 'sa', 'fz', 'ic', 'jd', 'lt', 'kt', 'rb']) == 0\nassert solution.longestPalindrome(['oj', 'vc', 'sq', 'fo', 'no']) == 0\nassert solution.longestPalindrome(['ir', 'fs', 'hk', 'jt', 'hm', 'sz', 'bp', 'gq']) == 0\nassert solution.longestPalindrome(['hb', 'qz', 'je']) == 0\nassert solution.longestPalindrome(['br', 'ws', 'xm']) == 0\nassert solution.longestPalindrome(['ce', 'nn', 'cb', 'oq', 'ai']) == 2\nassert solution.longestPalindrome(['lp', 'et']) == 0\nassert solution.longestPalindrome(['mc', 'qg', 'qj', 'oq', 'zi', 'hr', 'bz', 'of']) == 0\nassert solution.longestPalindrome(['qi', 'tr', 'ib', 'sc', 'od', 'sv', 'ra', 'ex', 'lj']) == 0\nassert solution.longestPalindrome(['um', 'oh', 'cb', 'rf', 'yy', 'ps', 'uo']) == 2\nassert solution.longestPalindrome(['ga', 'kl', 'eo', 'cy', 'rl', 'ta']) == 0\nassert solution.longestPalindrome(['he', 'rk', 'ts', 'gi', 'zp', 'ni', 'bc', 'wj']) == 0",
  "inefficient_solution": "class Solution:\n    def longestPalindrome(self, words: List[str]) -> int:\n        cnt = {}\n        for word in words:\n            if word not in cnt:\n                cnt[word] = 0\n            cnt[word] += 1\n\n        rev_words = {}\n        for word in words:\n            if word[::-1] not in rev_words:\n                rev_words[word[::-1]] = 0\n            rev_words[word[::-1]] += 1\n\n        ans = 0\n        x = 0\n        for word, freq in cnt.items():\n            if word[0] == word[1]:\n                ans += freq * 2\n                x += freq & 1\n            else:\n                if freq > rev_words.get(word[::-1], 0):\n                    ans += freq * 2\n                else:\n                    ans += freq * 2\n                    rev_words[word[::-1]] -= freq\n        for word, freq in rev_words.items():\n            if freq % 2 != 0:\n                x += 1\n        ans += 2 if x else 0\n        return ans",
  "is_python": true
}