{
  "problem_idx": 1641,
  "task_name": "Count Sorted Vowel Strings",
  "markdown_description": "\nGiven an integer `n`, return *the number of strings of length* `n` *that consist only of vowels (*`a`*,* `e`*,* `i`*,* `o`*,* `u`*) and are **lexicographically sorted**.*\n\n\nA string `s` is **lexicographically sorted** if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 5\n**Explanation:** The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 15\n**Explanation:** The 15 sorted strings that consist of vowels only are\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\nNote that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 33\n**Output:** 66045\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 50`\n\n\n",
  "canonical_solution": "class Solution:\n    def countVowelStrings(self, n: int) -> int:\n        f = [1] * 5\n        for _ in range(n - 1):\n            s = 0\n            for j in range(5):\n                s += f[j]\n                f[j] = s\n        return sum(f)\n",
  "test_case_generator": "\nclass Solution:\n    def countVowelStrings(self, n: int) -> int:\n        f = [1] * 5\n        for _ in range(n - 1):\n            s = 0\n            for j in range(5):\n                s += f[j]\n                f[j] = s\n        return sum(f)\n\ndef generate_test_case():\n    solution = Solution()\n    n = random.randint(1, 50)\n    expected_result = solution.countVowelStrings(n)\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countVowelStrings(n) == expected_result\n        test_case_generator_results.append(f\"assert solution.countVowelStrings({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countVowelStrings(20) == 10626\nassert solution.countVowelStrings(12) == 1820\nassert solution.countVowelStrings(13) == 2380\nassert solution.countVowelStrings(12) == 1820\nassert solution.countVowelStrings(23) == 17550\nassert solution.countVowelStrings(2) == 15\nassert solution.countVowelStrings(2) == 15\nassert solution.countVowelStrings(47) == 249900\nassert solution.countVowelStrings(13) == 2380\nassert solution.countVowelStrings(41) == 148995\nassert solution.countVowelStrings(29) == 40920\nassert solution.countVowelStrings(10) == 1001\nassert solution.countVowelStrings(14) == 3060\nassert solution.countVowelStrings(5) == 126\nassert solution.countVowelStrings(32) == 58905\nassert solution.countVowelStrings(15) == 3876\nassert solution.countVowelStrings(44) == 194580\nassert solution.countVowelStrings(6) == 210\nassert solution.countVowelStrings(26) == 27405\nassert solution.countVowelStrings(20) == 10626\nassert solution.countVowelStrings(6) == 210\nassert solution.countVowelStrings(15) == 3876\nassert solution.countVowelStrings(47) == 249900\nassert solution.countVowelStrings(24) == 20475\nassert solution.countVowelStrings(18) == 7315\nassert solution.countVowelStrings(31) == 52360\nassert solution.countVowelStrings(34) == 73815\nassert solution.countVowelStrings(10) == 1001\nassert solution.countVowelStrings(41) == 148995\nassert solution.countVowelStrings(1) == 5\nassert solution.countVowelStrings(14) == 3060\nassert solution.countVowelStrings(2) == 15\nassert solution.countVowelStrings(6) == 210\nassert solution.countVowelStrings(38) == 111930\nassert solution.countVowelStrings(20) == 10626\nassert solution.countVowelStrings(27) == 31465\nassert solution.countVowelStrings(45) == 211876\nassert solution.countVowelStrings(31) == 52360\nassert solution.countVowelStrings(36) == 91390\nassert solution.countVowelStrings(28) == 35960\nassert solution.countVowelStrings(30) == 46376\nassert solution.countVowelStrings(49) == 292825\nassert solution.countVowelStrings(9) == 715\nassert solution.countVowelStrings(35) == 82251\nassert solution.countVowelStrings(2) == 15\nassert solution.countVowelStrings(29) == 40920\nassert solution.countVowelStrings(48) == 270725\nassert solution.countVowelStrings(39) == 123410\nassert solution.countVowelStrings(9) == 715\nassert solution.countVowelStrings(19) == 8855\nassert solution.countVowelStrings(24) == 20475\nassert solution.countVowelStrings(11) == 1365\nassert solution.countVowelStrings(21) == 12650\nassert solution.countVowelStrings(16) == 4845\nassert solution.countVowelStrings(21) == 12650\nassert solution.countVowelStrings(39) == 123410\nassert solution.countVowelStrings(30) == 46376\nassert solution.countVowelStrings(32) == 58905\nassert solution.countVowelStrings(29) == 40920\nassert solution.countVowelStrings(41) == 148995\nassert solution.countVowelStrings(44) == 194580\nassert solution.countVowelStrings(48) == 270725\nassert solution.countVowelStrings(33) == 66045\nassert solution.countVowelStrings(24) == 20475\nassert solution.countVowelStrings(39) == 123410\nassert solution.countVowelStrings(10) == 1001\nassert solution.countVowelStrings(48) == 270725\nassert solution.countVowelStrings(18) == 7315\nassert solution.countVowelStrings(4) == 70\nassert solution.countVowelStrings(19) == 8855\nassert solution.countVowelStrings(46) == 230300\nassert solution.countVowelStrings(15) == 3876\nassert solution.countVowelStrings(40) == 135751\nassert solution.countVowelStrings(38) == 111930\nassert solution.countVowelStrings(2) == 15\nassert solution.countVowelStrings(44) == 194580\nassert solution.countVowelStrings(41) == 148995\nassert solution.countVowelStrings(18) == 7315\nassert solution.countVowelStrings(30) == 46376\nassert solution.countVowelStrings(31) == 52360\nassert solution.countVowelStrings(34) == 73815\nassert solution.countVowelStrings(39) == 123410\nassert solution.countVowelStrings(42) == 163185\nassert solution.countVowelStrings(50) == 316251\nassert solution.countVowelStrings(47) == 249900\nassert solution.countVowelStrings(15) == 3876\nassert solution.countVowelStrings(22) == 14950\nassert solution.countVowelStrings(34) == 73815\nassert solution.countVowelStrings(22) == 14950\nassert solution.countVowelStrings(15) == 3876\nassert solution.countVowelStrings(20) == 10626\nassert solution.countVowelStrings(8) == 495\nassert solution.countVowelStrings(6) == 210\nassert solution.countVowelStrings(2) == 15\nassert solution.countVowelStrings(2) == 15\nassert solution.countVowelStrings(26) == 27405\nassert solution.countVowelStrings(28) == 35960\nassert solution.countVowelStrings(2) == 15\nassert solution.countVowelStrings(16) == 4845\nassert solution.countVowelStrings(50) == 316251",
  "inefficient_solution": "class Solution:\n    def countVowelStrings(self, n: int) -> int:\n        def generate_strings(vowels, length, result, current_string):\n            if length == 0:\n                result.append(\"\".join(current_string))\n            else:\n                for vowel in vowels:\n                    current_string.append(vowel)\n                    generate_strings(vowels, length - 1, result, current_string)\n                    current_string.pop()\n\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        result = []\n        for i in range(5 ** n):\n            current_string = []\n            generate_strings(vowels, n, result, current_string)\n\n        vowels_count = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n        for string in result:\n            vowels_count[string[0]] += 1\n\n        output = []\n        for string in result:\n            if all(vowels_count[v] >= 1 for v in string) and all(vowels_count[v] >= 1 and vowels.index(v) <= vowels.index(string[i + 1]) for i, v in enumerate(string[:-1])):\n                output.append(string)\n\n        return len(output)",
  "is_python": true
}