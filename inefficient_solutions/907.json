{
  "problem_idx": 907,
  "task_name": "Sum of Subarray Minimums",
  "markdown_description": "\nGiven an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [3,1,2,4]\n**Output:** 17\n**Explanation:** \nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [11,81,94,43,3]\n**Output:** 444\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 3 * 104`\n* `1 <= arr[i] <= 3 * 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n        n = len(arr)\n        left = [-1] * n\n        right = [n] * n\n        stk = []\n        for i, v in enumerate(arr):\n            while stk and arr[stk[-1]] >= v:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and arr[stk[-1]] > arr[i]:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        mod = 10**9 + 7\n        return sum((i - left[i]) * (right[i] - i) * v for i, v in enumerate(arr)) % mod\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n        n = len(arr)\n        left = [-1] * n\n        right = [n] * n\n        stk = []\n        for i, v in enumerate(arr):\n            while stk and arr[stk[-1]] >= v:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n\n        stk = []\n        for i in range(n - 1, -1, -1):\n            while stk and arr[stk[-1]] > arr[i]:\n                stk.pop()\n            if stk:\n                right[i] = stk[-1]\n            stk.append(i)\n        mod = 10**9 + 7\n        return sum((i - left[i]) * (right[i] - i) * v for i, v in enumerate(arr)) % mod\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(1, 30), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.sumSubarrayMins(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sumSubarrayMins(arr) == expected_result\n        print(f\"assert solution.sumSubarrayMins({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.sumSubarrayMins({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sumSubarrayMins([7, 24]) == 38\nassert solution.sumSubarrayMins([28, 25, 27, 9, 4, 8, 1]) == 246\nassert solution.sumSubarrayMins([21, 3]) == 27\nassert solution.sumSubarrayMins([27, 6, 16, 28, 14]) == 177\nassert solution.sumSubarrayMins([5, 3, 8, 22, 29, 18]) == 194\nassert solution.sumSubarrayMins([22, 7, 13, 6, 24, 27, 8, 15, 20]) == 404\nassert solution.sumSubarrayMins([25, 3]) == 31\nassert solution.sumSubarrayMins([4, 5, 3]) == 22\nassert solution.sumSubarrayMins([26, 21, 3, 20, 14, 28]) == 208\nassert solution.sumSubarrayMins([9, 17, 26, 6, 2, 18, 11, 8, 20]) == 269\nassert solution.sumSubarrayMins([21, 15]) == 51\nassert solution.sumSubarrayMins([17, 13, 2, 23, 15, 9, 3, 11]) == 194\nassert solution.sumSubarrayMins([16, 9, 12, 27, 28]) == 206\nassert solution.sumSubarrayMins([9, 27, 4, 6, 15, 19, 23, 26, 21]) == 451\nassert solution.sumSubarrayMins([12, 25]) == 49\nassert solution.sumSubarrayMins([2, 26, 14, 25, 13, 24, 15]) == 331\nassert solution.sumSubarrayMins([5, 16, 2, 12, 25]) == 93\nassert solution.sumSubarrayMins([20, 16, 26, 6, 23, 21, 18, 2, 9, 10]) == 401\nassert solution.sumSubarrayMins([2, 13, 16]) == 48\nassert solution.sumSubarrayMins([23, 6, 21, 24, 18, 17, 25, 10, 1]) == 457\nassert solution.sumSubarrayMins([21, 11, 5, 19]) == 92\nassert solution.sumSubarrayMins([26, 25, 14, 10]) == 158\nassert solution.sumSubarrayMins([13, 4, 3]) == 30\nassert solution.sumSubarrayMins([9, 29, 3, 12, 22, 13, 23, 19, 1, 7]) == 347\nassert solution.sumSubarrayMins([23, 10, 28, 25, 18, 21, 12, 19, 6, 16]) == 633\nassert solution.sumSubarrayMins([26, 29, 19]) == 138\nassert solution.sumSubarrayMins([22, 10, 3, 24, 26, 15, 4, 12]) == 259\nassert solution.sumSubarrayMins([23, 19, 27, 4, 14, 20, 26]) == 298\nassert solution.sumSubarrayMins([11, 10, 26, 7, 19, 27, 6, 22, 24]) == 420\nassert solution.sumSubarrayMins([27, 12, 10, 29, 5, 6, 2, 9, 15]) == 271\nassert solution.sumSubarrayMins([19, 20, 6]) == 76\nassert solution.sumSubarrayMins([1, 22, 15, 29, 25, 21, 12, 16, 19, 24]) == 692\nassert solution.sumSubarrayMins([19, 3, 4, 29, 2, 25, 8]) == 145\nassert solution.sumSubarrayMins([22, 28, 2, 29, 25]) == 169\nassert solution.sumSubarrayMins([3, 20, 24, 9, 8, 18, 13]) == 252\nassert solution.sumSubarrayMins([17, 21]) == 55\nassert solution.sumSubarrayMins([26, 20, 28, 13, 25, 9, 7, 6]) == 414\nassert solution.sumSubarrayMins([3, 4, 28, 23, 1, 14, 18, 26, 8, 10]) == 306\nassert solution.sumSubarrayMins([26, 9, 18, 6, 29, 4, 24, 15, 3]) == 310\nassert solution.sumSubarrayMins([19, 9, 27, 7, 22, 23, 2]) == 247\nassert solution.sumSubarrayMins([4, 25, 19, 2, 10]) == 101\nassert solution.sumSubarrayMins([12, 22]) == 46\nassert solution.sumSubarrayMins([26, 6, 12, 19, 9, 21]) == 204\nassert solution.sumSubarrayMins([4, 24, 5, 19, 22, 20, 27]) == 307\nassert solution.sumSubarrayMins([7, 17, 20, 4]) == 91\nassert solution.sumSubarrayMins([23, 12, 3, 22]) == 87\nassert solution.sumSubarrayMins([2, 11, 24, 10, 12]) == 128\nassert solution.sumSubarrayMins([3, 20, 19, 1, 12, 27, 24, 15, 7]) == 294\nassert solution.sumSubarrayMins([3, 16, 15, 5, 4, 7, 8, 21, 13]) == 267\nassert solution.sumSubarrayMins([3, 4, 8, 11, 16, 20, 10, 27, 26, 15]) == 499\nassert solution.sumSubarrayMins([23, 16, 4, 25, 17, 12]) == 198\nassert solution.sumSubarrayMins([3, 20, 17]) == 63\nassert solution.sumSubarrayMins([17, 18, 28, 2, 3, 10, 9, 25]) == 238\nassert solution.sumSubarrayMins([24, 17]) == 58\nassert solution.sumSubarrayMins([24, 1, 16, 13, 22, 12, 2, 23]) == 219\nassert solution.sumSubarrayMins([26, 11, 1, 25, 17, 13, 27, 4]) == 250\nassert solution.sumSubarrayMins([13, 3, 8, 25, 26, 27, 9]) == 279\nassert solution.sumSubarrayMins([16, 11, 14]) == 74\nassert solution.sumSubarrayMins([18, 7, 10]) == 56\nassert solution.sumSubarrayMins([18, 21, 26, 24, 17, 7, 3, 13]) == 391\nassert solution.sumSubarrayMins([25, 28]) == 78\nassert solution.sumSubarrayMins([4, 6, 9, 17]) == 69\nassert solution.sumSubarrayMins([9, 17, 15, 25, 23, 19, 12, 1]) == 408\nassert solution.sumSubarrayMins([5, 19, 11, 25, 12, 10, 13, 9, 1, 24]) == 392\nassert solution.sumSubarrayMins([11, 6, 27, 20, 1, 14, 29, 13, 8]) == 267\nassert solution.sumSubarrayMins([10, 29]) == 49\nassert solution.sumSubarrayMins([4, 5]) == 13\nassert solution.sumSubarrayMins([3, 11, 22, 5, 8, 18, 1, 12, 21]) == 207\nassert solution.sumSubarrayMins([9, 18, 12, 29, 23, 8, 2]) == 272\nassert solution.sumSubarrayMins([17, 28, 19, 7, 3, 23, 16, 11, 14, 5]) == 395\nassert solution.sumSubarrayMins([17, 10, 21, 24, 9, 1, 12, 26, 18, 5]) == 336\nassert solution.sumSubarrayMins([7, 18, 13, 28, 17, 26, 3]) == 307\nassert solution.sumSubarrayMins([12, 17, 24, 9, 28, 26, 10, 7, 14, 15]) == 559\nassert solution.sumSubarrayMins([8, 28, 5, 17, 13, 23, 12, 22]) == 344\nassert solution.sumSubarrayMins([21, 18, 17, 6, 25, 23, 28, 7, 12, 22]) == 551\nassert solution.sumSubarrayMins([13, 12, 16]) == 77\nassert solution.sumSubarrayMins([15, 7, 23, 12]) == 104\nassert solution.sumSubarrayMins([26, 7, 17, 23, 28]) == 207\nassert solution.sumSubarrayMins([28, 17, 5, 14, 20, 3]) == 173\nassert solution.sumSubarrayMins([16, 4, 3, 24, 6, 27]) == 135\nassert solution.sumSubarrayMins([9, 5, 19]) == 48\nassert solution.sumSubarrayMins([10, 25, 11]) == 77\nassert solution.sumSubarrayMins([27, 9, 24, 29, 15, 18, 14]) == 390\nassert solution.sumSubarrayMins([28, 12, 8, 6, 22, 17, 4, 18]) == 278\nassert solution.sumSubarrayMins([11, 27, 19, 10, 21, 29, 16, 25, 28, 13]) == 749\nassert solution.sumSubarrayMins([16, 14, 6, 18, 20, 17, 2]) == 237\nassert solution.sumSubarrayMins([11, 28, 14, 5, 26, 29, 16]) == 298\nassert solution.sumSubarrayMins([1, 29, 23, 28, 17, 2, 9]) == 253\nassert solution.sumSubarrayMins([22, 21, 16, 2, 29, 15, 27, 8]) == 300\nassert solution.sumSubarrayMins([12, 16]) == 40\nassert solution.sumSubarrayMins([20, 8, 19, 1, 17, 22]) == 139\nassert solution.sumSubarrayMins([12, 17, 22, 1, 26, 16]) == 162\nassert solution.sumSubarrayMins([3, 6, 12, 16, 27, 28, 13, 24]) == 396\nassert solution.sumSubarrayMins([3, 29]) == 35\nassert solution.sumSubarrayMins([16, 10, 12, 5, 24, 18, 7, 2, 17]) == 278\nassert solution.sumSubarrayMins([28, 6, 5, 29, 4, 20, 3]) == 180\nassert solution.sumSubarrayMins([8, 22, 17]) == 80\nassert solution.sumSubarrayMins([2, 28, 21, 17, 15, 10]) == 243\nassert solution.sumSubarrayMins([16, 9, 2, 10, 1, 25, 12]) == 120\nassert solution.sumSubarrayMins([3, 18, 1, 4, 29, 12]) == 101",
  "inefficient_solution": "class Solution:\n    def sumSubarrayMins(self, arr: List[int]) -> int:\n        n = len(arr)\n        left = [0] * (n * n)\n        right = [0] * (n * n)\n        stack = []\n        for i, v in enumerate(arr):\n            temp = []\n            while stack and arr[stack[-1]] >= v:\n                temp.append(stack.pop())\n            for j in temp:\n                left[i * n + j] = 1\n            left[i * n + i] = -1\n            stack.append(i * n + i)\n\n        stack = []\n        for i in range(n * n - 1, -1, -1):\n            temp = []\n            while stack and arr[stack[-1] // n] > arr[i // n]:\n                temp.append(stack.pop())\n            for j in temp:\n                right[j] = 1\n            right[i] = 0\n            stack.append(i)\n\n        mod = 10**9 + 7\n        total = 0\n        for i, v in enumerate(arr):\n            for j in range(n):\n                total += (i * n + j - 1) * (right[i * n + j]) * (left[i * n + j]) * (v % mod)\n                total %= mod\n        return total",
  "is_python": true
}