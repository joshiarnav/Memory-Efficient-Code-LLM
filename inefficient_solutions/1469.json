{
  "problem_idx": 1469,
  "task_name": "Find All The Lonely Nodes",
  "markdown_description": "\nIn a binary tree, a **lonely** node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.\n\n\nGiven the `root` of a binary tree, return *an array containing the values of all lonely nodes* in the tree. Return the list **in any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1469.Find%20All%20The%20Lonely%20Nodes/images/e1.png)\n\n```\n\n**Input:** root = [1,2,3,null,4]\n**Output:** [4]\n**Explanation:** Light blue node is the only lonely node.\nNode 1 is the root and is not lonely.\nNodes 2 and 3 have the same parent and are not lonely.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1469.Find%20All%20The%20Lonely%20Nodes/images/e2.png)\n\n```\n\n**Input:** root = [7,1,4,6,null,5,3,null,null,null,null,null,2]\n**Output:** [6,2]\n**Explanation:** Light blue nodes are lonely nodes.\nPlease remember that order doesn't matter, [2,6] is also an acceptable answer.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1469.Find%20All%20The%20Lonely%20Nodes/images/tree.png)\n\n```\n\n**Input:** root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]\n**Output:** [77,55,33,66,44,22]\n**Explanation:** Nodes 99 and 88 share the same parent. Node 11 is the root.\nAll other nodes are lonely.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the `tree` is in the range `[1, 1000].`\n* `1 <= Node.val <= 106`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getLonelyNodes(self, root: Optional[TreeNode]) -> List[int]:\n        def dfs(root):\n            if root is None or (root.left is None and root.right is None):\n                return\n            if root.left is None:\n                ans.append(root.right.val)\n            if root.right is None:\n                ans.append(root.left.val)\n            dfs(root.left)\n            dfs(root.right)\n\n        ans = []\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\n\n# Test case generator for the given task\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a binary tree with random values\n    root = generate_binary_tree()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getLonelyNodes(root)\n\n    return root, expected_result\n\n# Helper function to generate a binary tree\ndef generate_binary_tree():\n    # Generate a random number between 1 and 1000 for the number of nodes\n    num_nodes = random.randint(1, 1000)\n\n    # Generate random values for the nodes\n    values = random.sample(range(1, 1000001), num_nodes)\n\n    # Create TreeNode objects for each value\n    nodes = [TreeNode(val) for val in values]\n\n    # Connect the nodes to create a binary tree\n    for i in range(num_nodes):\n        if i * 2 + 1 < num_nodes:\n            nodes[i].left = nodes[i * 2 + 1]\n        if i * 2 + 2 < num_nodes:\n            nodes[i].right = nodes[i * 2 + 2]\n\n    # Return the root of the binary tree\n    return nodes[0]\n\n# Test function that generates and tests multiple test cases\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n\n        # Construct the test case in the desired format\n        test_case = f\"assert solution.getLonelyNodes({root}) == {expected_result}\"\n\n        # Print the test case for reference\n        print(test_case)\n\n        # Append the test case to the list\n        test_case_generator_results.append(test_case)\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    # Number of test cases to generate\n    num_tests = 100\n\n    # Generate and test the test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec48ed0>) == [672978]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5bcd0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec48ed0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5bd50>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5e390>) == [823605]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5bf50>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5e310>) == [366440]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec6c850>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec680d0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec6ca10>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec49610>) == [750238]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5bf50>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5e090>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5e150>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5e2d0>) == [12893]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4bed0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8ed50>) == [743065]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeea469d0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec77550>) == [315960]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5f290>) == [751313]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeeb88150>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5efd0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8ed50>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec613d0>) == [962905]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeea4c6d0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeea4cad0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f610>) == [17359]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec49a90>) == [372820]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4bed0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec49a90>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4a150>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed9a450>) == [951767]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f590>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed98b50>) == [11365]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f6d0>) == [464251]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4b810>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4b490>) == [708093]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4a590>) == [814842]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f4d0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5d990>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5f8d0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5ff50>) == [861266]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb36d0>) == [217872]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4b150>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f6d0>) == [55640]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec6bb50>) == [988425]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed983d0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb3810>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed9b290>) == [314766]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeeb88150>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f250>) == [209271]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb0b10>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec6a110>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4a010>) == [497658]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeeb88150>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4bf10>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec53650>) == [790053]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec53790>) == [333919]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb1350>) == [424713]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8ed50>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb1350>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb1450>) == [143541]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb3e50>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed99cd0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb05d0>) == [191810]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5cc50>) == [444078]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb3810>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f890>) == [746425]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeeb88050>) == [270304]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb0910>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec53dd0>) == [573429]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4b950>) == [10364]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4a050>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed9ab90>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4a690>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeedb37d0>) == [323765]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeea4d890>) == [386861]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed86590>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed9a790>) == [739931]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeea4d8d0>) == [687569]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeeb88050>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f250>) == [257971]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4af50>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec64890>) == [526848]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec64910>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec646d0>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed98a50>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeeb88050>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed98a50>) == [599502]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed99050>) == [865997]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5de90>) == [541757]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f510>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4b1d0>) == [121176]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f590>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeed8f610>) == [14090]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec5e910>) == []\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeeb88150>) == [708509]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4ff50>) == [424595]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec57dd0>) == [174228]\nassert solution.getLonelyNodes(<__main__.TreeNode object at 0x7efeeec4a090>) == []",
  "inefficient_solution": "",
  "is_python": true
}