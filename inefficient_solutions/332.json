{
  "problem_idx": 332,
  "task_name": "Reconstruct Itinerary",
  "markdown_description": "\nYou are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\n\n\nAll of the tickets belong to a man who departs from `\"JFK\"`, thus, the itinerary must begin with `\"JFK\"`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\n\n\n* For example, the itinerary `[\"JFK\", \"LGA\"]` has a smaller lexical order than `[\"JFK\", \"LGB\"]`.\n\n\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0332.Reconstruct%20Itinerary/images/itinerary1-graph.jpg)\n\n```\n\n**Input:** tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n**Output:** [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0332.Reconstruct%20Itinerary/images/itinerary2-graph.jpg)\n\n```\n\n**Input:** tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\n**Output:** [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n**Explanation:** Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= tickets.length <= 300`\n* `tickets[i].length == 2`\n* `fromi.length == 3`\n* `toi.length == 3`\n* `fromi` and `toi` consist of uppercase English letters.\n* `fromi != toi`\n\n\n",
  "canonical_solution": "class Solution:\n    def findItinerary(self, tickets: List[List[str]]) -> List[str]:\n        graph = defaultdict(list)\n\n        for src, dst in sorted(tickets, reverse=True):\n            graph[src].append(dst)\n\n        itinerary = []\n\n        def dfs(airport):\n            while graph[airport]:\n                dfs(graph[airport].pop())\n            itinerary.append(airport)\n\n        dfs(\"JFK\")\n\n        return itinerary[::-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findItinerary(self, tickets):\n        graph = defaultdict(list)\n\n        for src, dst in sorted(tickets, reverse=True):\n            graph[src].append(dst)\n\n        itinerary = []\n\n        def dfs(airport):\n            while graph[airport]:\n                dfs(graph[airport].pop())\n            itinerary.append(airport)\n\n        dfs(\"JFK\")\n\n        return itinerary[::-1]\n\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    tickets = []\n    num_tickets = random.randint(1, 10)\n    for _ in range(num_tickets):\n        from_ = ''.join(random.choices(string.ascii_uppercase, k=3))\n        to = ''.join(random.choices(string.ascii_uppercase, k=3))\n        tickets.append([from_, to])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findItinerary(tickets)\n\n    return tickets, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tickets, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findItinerary(tickets) == expected_result\n        print(f\"assert solution.findItinerary({tickets}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findItinerary({tickets}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findItinerary([['BEC', 'HJD'], ['ZKO', 'IIL'], ['YVG', 'IOR'], ['YBD', 'BJE'], ['YSV', 'IXN'], ['DPO', 'VLR']]) == ['JFK']\nassert solution.findItinerary([['SAL', 'HRA'], ['IUY', 'RPW'], ['GCZ', 'LZY'], ['FAL', 'SOR'], ['ETN', 'SQV'], ['ZQD', 'YGO'], ['ACT', 'LHK'], ['FQQ', 'GVN']]) == ['JFK']\nassert solution.findItinerary([['XVX', 'PFI'], ['LLN', 'VWE'], ['JFD', 'GXT']]) == ['JFK']\nassert solution.findItinerary([['UJF', 'MNH'], ['POA', 'DUF'], ['UTD', 'JIZ']]) == ['JFK']\nassert solution.findItinerary([['AEN', 'QJU'], ['PNX', 'HKP'], ['NNP', 'WPR'], ['ERV', 'RMK'], ['ORG', 'CKD'], ['AWF', 'SEA'], ['DZA', 'BKB'], ['KGB', 'TGN']]) == ['JFK']\nassert solution.findItinerary([['EIX', 'PRV'], ['PFV', 'TVL'], ['TBA', 'WBF'], ['ULW', 'CUZ'], ['ASL', 'UJH'], ['XKY', 'RUS'], ['EWT', 'ETR'], ['AVC', 'OTE'], ['MYV', 'GTW'], ['NMT', 'PXF']]) == ['JFK']\nassert solution.findItinerary([['KVF', 'LFW'], ['JHS', 'JOL'], ['HZK', 'LZC'], ['DRT', 'YYK'], ['HGB', 'HAZ']]) == ['JFK']\nassert solution.findItinerary([['CLT', 'UHX'], ['XTF', 'MMU'], ['HOG', 'ZXG'], ['UYR', 'VJX']]) == ['JFK']\nassert solution.findItinerary([['ARV', 'VGV'], ['KKZ', 'SWP'], ['SJZ', 'TSW'], ['ZPP', 'JFN'], ['GIJ', 'XVA'], ['QZZ', 'FPN'], ['DXM', 'REF'], ['GAK', 'ORX']]) == ['JFK']\nassert solution.findItinerary([['LSF', 'VKT'], ['XOP', 'ALN'], ['JOJ', 'HFM'], ['ISE', 'XNN'], ['FUP', 'JOY']]) == ['JFK']\nassert solution.findItinerary([['PBD', 'WRV'], ['CKP', 'PZB'], ['AXH', 'TKV'], ['BEN', 'MRJ'], ['YZW', 'DIC'], ['DVY', 'IDA']]) == ['JFK']\nassert solution.findItinerary([['KCG', 'ESP'], ['OAP', 'VXT'], ['HWN', 'IVW'], ['XPQ', 'WQZ'], ['LRN', 'XPY'], ['VPR', 'VYN'], ['XQE', 'EVM'], ['LZL', 'OOI']]) == ['JFK']\nassert solution.findItinerary([['EWW', 'WRC'], ['DIT', 'HAE'], ['SOV', 'BWW'], ['NEC', 'RCJ'], ['WWW', 'LUC'], ['PMI', 'USB'], ['YGK', 'JFY'], ['PIR', 'GYH'], ['IET', 'OVE'], ['SYL', 'NTA']]) == ['JFK']\nassert solution.findItinerary([['HOW', 'TES'], ['ITX', 'BWD'], ['RPO', 'WIG']]) == ['JFK']\nassert solution.findItinerary([['PTL', 'GTU'], ['PEI', 'WMY'], ['NLN', 'DTK'], ['YOZ', 'USL'], ['SOP', 'XCR']]) == ['JFK']\nassert solution.findItinerary([['HEU', 'ESY'], ['GVG', 'JBD'], ['SZS', 'DGH'], ['IGV', 'CVB'], ['OIU', 'HPV']]) == ['JFK']\nassert solution.findItinerary([['YSQ', 'GIC'], ['JMI', 'LJG'], ['QCV', 'UIH'], ['FWR', 'NUO'], ['HAV', 'FXO'], ['KDT', 'JAD'], ['UUX', 'JAH']]) == ['JFK']\nassert solution.findItinerary([['RAE', 'WSB'], ['BPO', 'GDG'], ['VQZ', 'YAY'], ['JOG', 'WPH'], ['WQW', 'DVY'], ['CHW', 'IWM'], ['MED', 'BVP'], ['WSV', 'YLA'], ['CLB', 'GLT'], ['RVY', 'HII']]) == ['JFK']\nassert solution.findItinerary([['WTK', 'BXP'], ['FOR', 'DCR'], ['FUI', 'BAJ']]) == ['JFK']\nassert solution.findItinerary([['SIC', 'DHK'], ['WYX', 'JES'], ['EOM', 'UGQ'], ['HYT', 'KHE'], ['TTQ', 'FWV'], ['NJI', 'YTK'], ['HJP', 'RNJ'], ['QAZ', 'QQY'], ['HQV', 'RUQ']]) == ['JFK']\nassert solution.findItinerary([['YPU', 'CYF'], ['MUB', 'XPW'], ['VPN', 'VLR'], ['PDF', 'AUG'], ['SGF', 'CAE'], ['CDL', 'JDV']]) == ['JFK']\nassert solution.findItinerary([['VEF', 'RIP'], ['CGV', 'KST']]) == ['JFK']\nassert solution.findItinerary([['QCI', 'JPY'], ['CZJ', 'ABC']]) == ['JFK']\nassert solution.findItinerary([['DMH', 'JII'], ['ZUB', 'BPE'], ['TKV', 'TSG'], ['MLK', 'KKM'], ['FBZ', 'WCH'], ['LWY', 'PBT'], ['HTM', 'PPJ'], ['EJW', 'SUG'], ['GFS', 'NZS'], ['NJV', 'IDO']]) == ['JFK']\nassert solution.findItinerary([['KWN', 'BHH'], ['AFU', 'YVK'], ['GEH', 'KTX'], ['FCC', 'GZR'], ['YDU', 'WJU'], ['KJN', 'ZBP'], ['HZC', 'RQY'], ['NLQ', 'JSJ'], ['IWK', 'XHR']]) == ['JFK']\nassert solution.findItinerary([['VFP', 'SBI'], ['MWC', 'QOI']]) == ['JFK']\nassert solution.findItinerary([['SVU', 'OIJ'], ['TLN', 'NTJ'], ['EXO', 'GFM'], ['AFU', 'FUB'], ['NUD', 'ZLC'], ['CRZ', 'DMO']]) == ['JFK']\nassert solution.findItinerary([['EYU', 'DRM'], ['DGW', 'QAZ'], ['QCJ', 'WZK'], ['VBO', 'SOR'], ['PQB', 'WOT'], ['HGW', 'GEI'], ['BKT', 'IUS'], ['WBX', 'YXD'], ['KXL', 'AHE']]) == ['JFK']\nassert solution.findItinerary([['FCW', 'CBN'], ['NUN', 'DWE'], ['HHF', 'VDT'], ['UCR', 'QAP'], ['OHV', 'RMW'], ['RIR', 'OKF']]) == ['JFK']\nassert solution.findItinerary([['ACO', 'MVV'], ['BFB', 'YMD'], ['FMP', 'XWR'], ['HZO', 'WVW'], ['DNM', 'BXS']]) == ['JFK']\nassert solution.findItinerary([['EWK', 'BET'], ['RMU', 'BOM']]) == ['JFK']\nassert solution.findItinerary([['UMX', 'AKT'], ['MGT', 'ABO'], ['OGA', 'ZJS']]) == ['JFK']\nassert solution.findItinerary([['KLM', 'OZX'], ['KGP', 'SAW'], ['EYY', 'KTX'], ['MTB', 'CMF'], ['VCS', 'WRG'], ['DUX', 'SCZ'], ['FJV', 'KAM'], ['GXK', 'LWB']]) == ['JFK']\nassert solution.findItinerary([['AII', 'KYE'], ['GXC', 'MII']]) == ['JFK']\nassert solution.findItinerary([['QJW', 'FMW'], ['DWP', 'QKA'], ['TIJ', 'IOU'], ['GNP', 'NTA'], ['PPJ', 'RQT']]) == ['JFK']\nassert solution.findItinerary([['MGQ', 'ZWE'], ['WLP', 'WPM'], ['WKC', 'AIU'], ['YEG', 'FQK'], ['ZTV', 'LGF']]) == ['JFK']\nassert solution.findItinerary([['ZNS', 'CVR'], ['VBL', 'CAC'], ['OXI', 'ODS'], ['QLS', 'YWW'], ['HLA', 'QBR'], ['XYR', 'QKP'], ['LZD', 'MMP'], ['QLU', 'EVE'], ['SNO', 'HFI'], ['QLT', 'MKX']]) == ['JFK']\nassert solution.findItinerary([['ROK', 'WWI'], ['UGN', 'BMU'], ['NWI', 'WHB'], ['JOX', 'GBC'], ['HZN', 'UWG'], ['AVJ', 'ATT'], ['CXE', 'DPN'], ['AHN', 'HOB']]) == ['JFK']\nassert solution.findItinerary([['ESQ', 'ITI'], ['PBM', 'DBL'], ['LJJ', 'FEU']]) == ['JFK']\nassert solution.findItinerary([['YKA', 'UXG'], ['CXD', 'NIZ'], ['VMY', 'HDN'], ['LPV', 'EWL'], ['QDC', 'CQI'], ['IFB', 'LKO']]) == ['JFK']\nassert solution.findItinerary([['BAB', 'DMY'], ['EDM', 'HAM']]) == ['JFK']\nassert solution.findItinerary([['CBT', 'FWT'], ['FES', 'KDT'], ['CPX', 'DSD'], ['QQS', 'RPC'], ['SMS', 'VGF'], ['IAX', 'ECP'], ['YBL', 'ODH'], ['GAO', 'OGY'], ['OUY', 'PDP']]) == ['JFK']\nassert solution.findItinerary([['BLP', 'IZV'], ['JQA', 'OPL'], ['EPV', 'NET'], ['NOZ', 'MML'], ['IMX', 'JFI'], ['VTL', 'IDT']]) == ['JFK']\nassert solution.findItinerary([['HTP', 'CRO'], ['WXH', 'MHX'], ['XME', 'FSC'], ['KRZ', 'TLX']]) == ['JFK']\nassert solution.findItinerary([['TRA', 'MUI'], ['IAX', 'PKA'], ['XHD', 'MRV'], ['YOB', 'HVI'], ['SAX', 'INC'], ['TBN', 'VWU']]) == ['JFK']\nassert solution.findItinerary([['OPY', 'UGG'], ['AYB', 'OGC'], ['BYF', 'GBJ'], ['XVG', 'WNH'], ['OOS', 'UMP'], ['HMY', 'UAV'], ['CWZ', 'NOM']]) == ['JFK']\nassert solution.findItinerary([['EIL', 'DKF'], ['JCR', 'BZP'], ['MRA', 'EFS'], ['FPC', 'XQC'], ['ZDC', 'HKA']]) == ['JFK']\nassert solution.findItinerary([['ZBB', 'XCP'], ['SUY', 'USQ']]) == ['JFK']\nassert solution.findItinerary([['YGI', 'ULC'], ['OHK', 'DKE'], ['EGQ', 'EKE'], ['TBZ', 'OQD'], ['UHD', 'GTM'], ['MYN', 'ZXG'], ['MPM', 'MIC'], ['GRJ', 'WGA']]) == ['JFK']\nassert solution.findItinerary([['MOS', 'SLO'], ['PNF', 'HBH'], ['MRB', 'XPD'], ['PQK', 'NWX'], ['RCI', 'JEC'], ['BAI', 'KMF'], ['IPN', 'IUW'], ['FWV', 'VAV'], ['JII', 'XTG']]) == ['JFK']\nassert solution.findItinerary([['IWC', 'GNU'], ['QWC', 'ENI'], ['FVB', 'PPX'], ['MDK', 'DUW'], ['AMS', 'YZF']]) == ['JFK']\nassert solution.findItinerary([['DQY', 'NSU']]) == ['JFK']\nassert solution.findItinerary([['CJW', 'ZCB'], ['RBO', 'IWY'], ['PGQ', 'FGE'], ['GPF', 'DVT'], ['OFU', 'NZA'], ['GEX', 'VUC'], ['EZM', 'KOA'], ['FYT', 'RJB'], ['WJG', 'BYH']]) == ['JFK']\nassert solution.findItinerary([['OYJ', 'DRQ'], ['BLH', 'RBY'], ['ZZQ', 'OGT'], ['QIE', 'IUR'], ['KFE', 'AHL'], ['UFF', 'FZN'], ['UQS', 'JPM'], ['VKA', 'BAU'], ['GEV', 'UFZ'], ['OCQ', 'HIV']]) == ['JFK']\nassert solution.findItinerary([['GBW', 'IVA']]) == ['JFK']\nassert solution.findItinerary([['AYU', 'OBY']]) == ['JFK']\nassert solution.findItinerary([['HWZ', 'IAY'], ['RYR', 'NIW']]) == ['JFK']\nassert solution.findItinerary([['RHL', 'IVU'], ['QFT', 'CGF'], ['CQE', 'IRP'], ['QOC', 'XUV'], ['PPK', 'BCY'], ['XEX', 'NKN'], ['NVR', 'KNM'], ['GXF', 'WHY'], ['UVY', 'HLF']]) == ['JFK']\nassert solution.findItinerary([['UGI', 'HHF'], ['NDT', 'CKD']]) == ['JFK']\nassert solution.findItinerary([['OKT', 'EXG']]) == ['JFK']\nassert solution.findItinerary([['DFH', 'WDR']]) == ['JFK']\nassert solution.findItinerary([['BKP', 'OBW'], ['ZDF', 'COF'], ['VQE', 'ZRG']]) == ['JFK']\nassert solution.findItinerary([['ZZN', 'AJB'], ['EYN', 'IZD'], ['QTS', 'FRL'], ['HDV', 'POF'], ['DFE', 'TWP'], ['UKH', 'TPO'], ['HDG', 'JBY'], ['JOZ', 'AAQ'], ['MVO', 'LFG'], ['URW', 'SGD']]) == ['JFK']\nassert solution.findItinerary([['MIJ', 'XRC'], ['AIE', 'LIA'], ['DQL', 'CVF'], ['OUP', 'GAP']]) == ['JFK']\nassert solution.findItinerary([['JXQ', 'AXD'], ['OYS', 'RWF'], ['YVN', 'KGJ'], ['ISR', 'JAS'], ['XGS', 'VWL'], ['NQX', 'OQJ']]) == ['JFK']\nassert solution.findItinerary([['ZWE', 'NSL'], ['WBE', 'PCH']]) == ['JFK']\nassert solution.findItinerary([['YPV', 'BZK'], ['HNL', 'PQA'], ['LAP', 'CAA'], ['FQB', 'VTK'], ['YOU', 'NRK'], ['BVU', 'DYB']]) == ['JFK']\nassert solution.findItinerary([['RCU', 'CYE'], ['NBF', 'FYQ'], ['ALS', 'IZL'], ['ZWP', 'HDP'], ['SSL', 'AUX'], ['UXG', 'GUA'], ['OBI', 'MWX']]) == ['JFK']\nassert solution.findItinerary([['LHO', 'WWQ'], ['UWR', 'FKM'], ['CBE', 'ANH'], ['LIT', 'ILQ'], ['NJK', 'MQU'], ['RRG', 'NRU'], ['IIL', 'JIE'], ['TIY', 'VGJ']]) == ['JFK']\nassert solution.findItinerary([['CRV', 'FBL'], ['UYE', 'FJA'], ['FBZ', 'XYR'], ['QIJ', 'IEQ'], ['VIU', 'BYT'], ['FRP', 'XCD']]) == ['JFK']\nassert solution.findItinerary([['CNZ', 'ZRA'], ['KAK', 'JJS']]) == ['JFK']\nassert solution.findItinerary([['QZV', 'MPC'], ['RYU', 'HYV'], ['LPV', 'NBP']]) == ['JFK']\nassert solution.findItinerary([['FMG', 'HGI'], ['SOL', 'MVX'], ['WSD', 'VDP'], ['BBA', 'EGV']]) == ['JFK']\nassert solution.findItinerary([['UVA', 'GLB'], ['YUS', 'QAW'], ['LOC', 'HGQ'], ['TBU', 'EEQ']]) == ['JFK']\nassert solution.findItinerary([['AFA', 'CHK'], ['VYZ', 'LVU'], ['FMS', 'MVQ'], ['YZK', 'NJW'], ['FTQ', 'ZMU']]) == ['JFK']\nassert solution.findItinerary([['BCS', 'JTC'], ['MGL', 'KZA'], ['VEV', 'RNQ'], ['KYG', 'VQN'], ['JZC', 'TKP'], ['RQP', 'RUB'], ['QUN', 'PTX'], ['BDH', 'IQM'], ['FYD', 'AFS'], ['JSU', 'JXK']]) == ['JFK']\nassert solution.findItinerary([['ERY', 'FPX'], ['GYT', 'DBA'], ['MYG', 'QJI'], ['NII', 'MJJ'], ['FUI', 'WTN'], ['OYW', 'AFM'], ['SII', 'FQB'], ['TWB', 'VEZ']]) == ['JFK']\nassert solution.findItinerary([['DOH', 'DDM'], ['KJX', 'XBJ'], ['NKN', 'MBN'], ['FZK', 'QTC'], ['ODU', 'YCV'], ['SKI', 'VVJ'], ['TPN', 'EDH'], ['MXL', 'XNB'], ['PTQ', 'RRR']]) == ['JFK']\nassert solution.findItinerary([['FQU', 'DZH'], ['SVG', 'ICE'], ['UCL', 'BRW']]) == ['JFK']\nassert solution.findItinerary([['TQD', 'YQG'], ['AAK', 'LLX'], ['DBU', 'TVF'], ['AHV', 'EZS']]) == ['JFK']\nassert solution.findItinerary([['TMQ', 'DYD'], ['TCV', 'EAD'], ['BUQ', 'BYK'], ['PZD', 'LNW'], ['TVB', 'EIF'], ['XAA', 'RKT'], ['BAE', 'WTQ'], ['CQS', 'WBA'], ['XOX', 'MDV'], ['PCX', 'VGJ']]) == ['JFK']\nassert solution.findItinerary([['HTM', 'YNB'], ['YOW', 'QFC'], ['FVQ', 'QNG'], ['BCG', 'UJX'], ['VES', 'YYK'], ['PUI', 'ALU']]) == ['JFK']\nassert solution.findItinerary([['DXL', 'DSG'], ['AKG', 'TMF']]) == ['JFK']\nassert solution.findItinerary([['GLJ', 'SUZ'], ['ULM', 'PTK'], ['IJG', 'BFO'], ['JCY', 'NAB'], ['MGK', 'WOU'], ['FTQ', 'JBN'], ['EWC', 'STG'], ['WFD', 'EPF'], ['MMD', 'WSZ']]) == ['JFK']\nassert solution.findItinerary([['WWR', 'DZB'], ['QQA', 'DAH'], ['JHM', 'INN'], ['WGP', 'WDO'], ['DUD', 'SSK'], ['EAG', 'UWF'], ['OYV', 'OFI'], ['ZXH', 'KEM'], ['BEN', 'JRV']]) == ['JFK']\nassert solution.findItinerary([['XVY', 'VVW'], ['LLY', 'KPE']]) == ['JFK']\nassert solution.findItinerary([['TTC', 'COC'], ['XDN', 'FOS'], ['NUT', 'UGG'], ['NMD', 'IRB'], ['TCI', 'KDJ']]) == ['JFK']\nassert solution.findItinerary([['QFF', 'BJB'], ['PVE', 'CTP'], ['NOT', 'QEJ'], ['ZBZ', 'JEJ'], ['QXP', 'SZV'], ['TBX', 'SSL'], ['MZC', 'NXW'], ['TTF', 'PWK'], ['KAP', 'EDS'], ['JQX', 'LCX']]) == ['JFK']\nassert solution.findItinerary([['POD', 'JZK']]) == ['JFK']\nassert solution.findItinerary([['OTA', 'STO'], ['XXR', 'XRK'], ['WEE', 'YMF'], ['UHO', 'XUX'], ['TBT', 'OMQ'], ['TNN', 'EAC'], ['CPO', 'QLR'], ['ZLI', 'VUW']]) == ['JFK']\nassert solution.findItinerary([['NUU', 'FXE'], ['SWN', 'MZF'], ['MTP', 'KFF'], ['ONZ', 'DIJ'], ['GDC', 'NDV'], ['XXY', 'GBL'], ['EAS', 'YXA'], ['SFH', 'VPI'], ['AAB', 'NYY'], ['KFT', 'PZU']]) == ['JFK']\nassert solution.findItinerary([['UOZ', 'GCE'], ['BQX', 'HDM'], ['MQD', 'UHY'], ['YGU', 'CFD'], ['OGT', 'MWG'], ['MLG', 'VDA'], ['HMI', 'EEY'], ['BWS', 'EHJ'], ['VLI', 'SNF'], ['QZR', 'SVE']]) == ['JFK']\nassert solution.findItinerary([['YAP', 'WCM'], ['YYG', 'YDV'], ['HOF', 'OTF'], ['PMX', 'MIR'], ['CIR', 'YGR'], ['HPL', 'HLX'], ['XLL', 'XYE'], ['TTP', 'QXF'], ['MDU', 'NOZ']]) == ['JFK']\nassert solution.findItinerary([['DWH', 'QUI'], ['XEQ', 'UAF'], ['NLH', 'TTM'], ['MLA', 'JAS'], ['BMF', 'SCH'], ['UHC', 'EDE'], ['VSL', 'CVT'], ['NNM', 'HVL'], ['ZLC', 'XTL'], ['TMW', 'JLK']]) == ['JFK']\nassert solution.findItinerary([['JGV', 'SJE'], ['FCF', 'RIZ'], ['QUI', 'WTO'], ['USC', 'HSQ'], ['XLD', 'MME'], ['TIJ', 'ZDA']]) == ['JFK']\nassert solution.findItinerary([['WCJ', 'SJZ']]) == ['JFK']\nassert solution.findItinerary([['UWB', 'AAK'], ['DQQ', 'DBJ'], ['KVB', 'PTH'], ['ITK', 'AZH'], ['OMV', 'PBS'], ['GBA', 'TBD'], ['NYF', 'LRJ'], ['NAU', 'POS'], ['FUL', 'LVF'], ['VYV', 'FGY']]) == ['JFK']\nassert solution.findItinerary([['MTN', 'IUP']]) == ['JFK']\nassert solution.findItinerary([['AQE', 'XFT'], ['DJT', 'VQW'], ['TEQ', 'PMJ']]) == ['JFK']\nassert solution.findItinerary([['ZQJ', 'NRE'], ['UWT', 'MGD'], ['UNL', 'YEW'], ['HTN', 'WWT'], ['KVS', 'YDG'], ['NUM', 'NWT']]) == ['JFK']",
  "inefficient_solution": "class Solution:\n    def findItinerary(self, tickets):\n        graph = {}\n        for src, dst in sorted(tickets, reverse=True):\n            if src not in graph:\n                graph[src] = []\n            graph[src].append(dst)\n\n        itinerary = []\n\n        def dfs(airport, visited):\n            visited = visited[:]\n            if len(visited) == len(tickets) + 1:\n                return True\n            if airport not in graph:\n                return False\n            airports = graph[airport][:]\n            for i in range(len(airports)):\n                new_airport = airports[i]\n                airports[i] = airports[-1]\n                airports[-1] = new_airport\n                if dfs(new_airport, visited + [airport]):\n                    itinerary.append(airport)\n                    return True\n                airports[-1] = new_airport\n                airports[i] = new_airport\n            return False\n\n        dfs(\"JFK\", [])\n        return itinerary[::-1]",
  "is_python": true
}