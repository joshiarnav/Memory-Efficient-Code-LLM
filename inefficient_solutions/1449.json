{
  "problem_idx": 1449,
  "task_name": "Form Largest Integer With Digits That Add up to Target",
  "markdown_description": "\nGiven an array of integers `cost` and an integer `target`, return *the **maximum** integer you can paint under the following rules*:\n\n\n* The cost of painting a digit `(i + 1)` is given by `cost[i]` (**0-indexed**).\n* The total cost used must be equal to `target`.\n* The integer does not have `0` digits.\n\n\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return `\"0\"`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** cost = [4,3,2,5,6,7,2,5,5], target = 9\n**Output:** \"7772\"\n**Explanation:** The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\n**Digit cost**\n  1  ->   4\n  2  ->   3\n  3  ->   2\n  4  ->   5\n  5  ->   6\n  6  ->   7\n  7  ->   2\n  8  ->   5\n  9  ->   5\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cost = [7,6,5,5,5,6,8,7,8], target = 12\n**Output:** \"85\"\n**Explanation:** The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** cost = [2,4,6,2,4,6,4,4,4], target = 5\n**Output:** \"0\"\n**Explanation:** It is impossible to paint any integer with total cost equal to target.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `cost.length == 9`\n* `1 <= cost[i], target <= 5000`\n\n\n",
  "canonical_solution": "class Solution:\n    def largestNumber(self, cost: List[int], target: int) -> str:\n        f = [[-inf] * (target + 1) for _ in range(10)]\n        f[0][0] = 0\n        g = [[0] * (target + 1) for _ in range(10)]\n        for i, c in enumerate(cost, 1):\n            for j in range(target + 1):\n                if j < c or f[i][j - c] + 1 < f[i - 1][j]:\n                    f[i][j] = f[i - 1][j]\n                    g[i][j] = j\n                else:\n                    f[i][j] = f[i][j - c] + 1\n                    g[i][j] = j - c\n        if f[9][target] < 0:\n            return \"0\"\n        ans = []\n        i, j = 9, target\n        while i:\n            if j == g[i][j]:\n                i -= 1\n            else:\n                ans.append(str(i))\n                j = g[i][j]\n        return \"\".join(ans)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def largestNumber(self, cost, target):\n        # Implementation of the provided Solution class\n        f = [[-float('inf')] * (target + 1) for _ in range(10)]\n        f[0][0] = 0\n        g = [[0] * (target + 1) for _ in range(10)]\n        for i, c in enumerate(cost, 1):\n            for j in range(target + 1):\n                if j < c or f[i][j - c] + 1 < f[i - 1][j]:\n                    f[i][j] = f[i - 1][j]\n                    g[i][j] = j\n                else:\n                    f[i][j] = f[i][j - c] + 1\n                    g[i][j] = j - c\n        if f[9][target] < 0:\n            return \"0\"\n        ans = []\n        i, j = 9, target\n        while i:\n            if j == g[i][j]:\n                i -= 1\n            else:\n                ans.append(str(i))\n                j = g[i][j]\n        return \"\".join(ans)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random cost list\n    cost = random.sample(range(1, 10), 9)\n    \n    # Generate a random target sum\n    target = random.randint(1, 50)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestNumber(cost, target)\n\n    return cost, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        cost, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestNumber(cost, target) == expected_result\n        print(f\"assert solution.largestNumber({cost}, {target}) == \\\"{expected_result}\\\"\")\n        test_case_generator_results.append(f\"assert solution.largestNumber({cost}, {target}) == \\\"{expected_result}\\\"\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestNumber([4, 8, 7, 2, 5, 6, 9, 1, 3], 18) == \"888888888888888888\"\nassert solution.largestNumber([3, 8, 9, 5, 7, 6, 2, 1, 4], 26) == \"88888888888888888888888888\"\nassert solution.largestNumber([5, 7, 4, 3, 2, 8, 9, 1, 6], 10) == \"8888888888\"\nassert solution.largestNumber([7, 3, 8, 2, 4, 9, 6, 5, 1], 37) == \"9999999999999999999999999999999999999\"\nassert solution.largestNumber([9, 5, 3, 7, 6, 8, 4, 2, 1], 15) == \"999999999999999\"\nassert solution.largestNumber([2, 6, 9, 7, 3, 5, 4, 8, 1], 42) == \"999999999999999999999999999999999999999999\"\nassert solution.largestNumber([7, 5, 9, 8, 6, 1, 3, 4, 2], 23) == \"66666666666666666666666\"\nassert solution.largestNumber([4, 1, 9, 2, 8, 5, 6, 3, 7], 42) == \"222222222222222222222222222222222222222222\"\nassert solution.largestNumber([6, 8, 5, 7, 1, 3, 9, 4, 2], 36) == \"555555555555555555555555555555555555\"\nassert solution.largestNumber([5, 1, 6, 3, 4, 7, 2, 9, 8], 9) == \"222222222\"\nassert solution.largestNumber([3, 2, 9, 5, 4, 1, 7, 8, 6], 29) == \"66666666666666666666666666666\"\nassert solution.largestNumber([5, 8, 1, 2, 4, 7, 9, 6, 3], 25) == \"3333333333333333333333333\"\nassert solution.largestNumber([4, 7, 5, 9, 6, 1, 2, 8, 3], 34) == \"6666666666666666666666666666666666\"\nassert solution.largestNumber([5, 7, 8, 9, 4, 1, 3, 6, 2], 33) == \"666666666666666666666666666666666\"\nassert solution.largestNumber([5, 6, 9, 8, 1, 7, 4, 2, 3], 22) == \"5555555555555555555555\"\nassert solution.largestNumber([4, 6, 8, 3, 7, 1, 2, 9, 5], 27) == \"666666666666666666666666666\"\nassert solution.largestNumber([3, 4, 7, 5, 8, 9, 1, 2, 6], 18) == \"777777777777777777\"\nassert solution.largestNumber([4, 8, 7, 1, 6, 5, 2, 9, 3], 2) == \"44\"\nassert solution.largestNumber([1, 3, 4, 9, 6, 8, 2, 5, 7], 8) == \"11111111\"\nassert solution.largestNumber([1, 2, 8, 5, 7, 6, 9, 4, 3], 33) == \"111111111111111111111111111111111\"\nassert solution.largestNumber([7, 3, 4, 2, 1, 5, 9, 8, 6], 1) == \"5\"\nassert solution.largestNumber([1, 7, 5, 3, 4, 6, 8, 9, 2], 10) == \"1111111111\"\nassert solution.largestNumber([7, 6, 9, 2, 5, 3, 4, 8, 1], 30) == \"999999999999999999999999999999\"\nassert solution.largestNumber([2, 3, 9, 4, 5, 6, 8, 1, 7], 21) == \"888888888888888888888\"\nassert solution.largestNumber([7, 9, 4, 5, 1, 2, 8, 6, 3], 33) == \"555555555555555555555555555555555\"\nassert solution.largestNumber([9, 8, 3, 5, 2, 6, 7, 4, 1], 7) == \"9999999\"\nassert solution.largestNumber([6, 1, 8, 3, 2, 5, 7, 4, 9], 43) == \"2222222222222222222222222222222222222222222\"\nassert solution.largestNumber([9, 2, 1, 6, 8, 7, 4, 5, 3], 45) == \"333333333333333333333333333333333333333333333\"\nassert solution.largestNumber([8, 3, 1, 7, 6, 5, 4, 2, 9], 2) == \"33\"\nassert solution.largestNumber([2, 1, 7, 9, 3, 5, 6, 4, 8], 47) == \"22222222222222222222222222222222222222222222222\"\nassert solution.largestNumber([7, 8, 1, 4, 2, 5, 9, 3, 6], 40) == \"3333333333333333333333333333333333333333\"\nassert solution.largestNumber([6, 7, 9, 8, 1, 5, 3, 4, 2], 12) == \"555555555555\"\nassert solution.largestNumber([6, 9, 7, 2, 8, 5, 1, 4, 3], 24) == \"777777777777777777777777\"\nassert solution.largestNumber([4, 6, 8, 2, 5, 7, 3, 1, 9], 36) == \"888888888888888888888888888888888888\"\nassert solution.largestNumber([4, 7, 9, 1, 3, 2, 8, 5, 6], 33) == \"444444444444444444444444444444444\"\nassert solution.largestNumber([6, 3, 8, 2, 5, 1, 9, 7, 4], 25) == \"6666666666666666666666666\"\nassert solution.largestNumber([8, 7, 1, 6, 5, 3, 4, 9, 2], 9) == \"333333333\"\nassert solution.largestNumber([8, 5, 1, 2, 7, 4, 6, 3, 9], 32) == \"33333333333333333333333333333333\"\nassert solution.largestNumber([6, 5, 7, 3, 1, 4, 8, 9, 2], 37) == \"5555555555555555555555555555555555555\"\nassert solution.largestNumber([5, 1, 2, 4, 6, 3, 8, 9, 7], 14) == \"22222222222222\"\nassert solution.largestNumber([1, 8, 2, 4, 6, 9, 7, 3, 5], 33) == \"111111111111111111111111111111111\"\nassert solution.largestNumber([8, 5, 3, 1, 6, 7, 9, 2, 4], 38) == \"44444444444444444444444444444444444444\"\nassert solution.largestNumber([3, 1, 4, 6, 8, 2, 7, 9, 5], 8) == \"22222222\"\nassert solution.largestNumber([2, 6, 9, 8, 3, 7, 4, 1, 5], 32) == \"88888888888888888888888888888888\"\nassert solution.largestNumber([1, 9, 8, 2, 3, 4, 5, 7, 6], 23) == \"11111111111111111111111\"\nassert solution.largestNumber([1, 9, 7, 8, 2, 5, 4, 3, 6], 8) == \"11111111\"\nassert solution.largestNumber([9, 6, 4, 7, 8, 2, 5, 3, 1], 4) == \"9999\"\nassert solution.largestNumber([1, 9, 2, 4, 8, 7, 6, 5, 3], 16) == \"1111111111111111\"\nassert solution.largestNumber([3, 5, 9, 1, 6, 7, 2, 4, 8], 17) == \"44444444444444444\"\nassert solution.largestNumber([7, 6, 3, 1, 5, 9, 8, 2, 4], 11) == \"44444444444\"\nassert solution.largestNumber([9, 1, 4, 3, 7, 6, 5, 2, 8], 24) == \"222222222222222222222222\"\nassert solution.largestNumber([1, 7, 6, 5, 3, 4, 9, 8, 2], 34) == \"1111111111111111111111111111111111\"\nassert solution.largestNumber([4, 7, 9, 3, 8, 5, 2, 6, 1], 16) == \"9999999999999999\"\nassert solution.largestNumber([5, 4, 6, 2, 9, 8, 1, 7, 3], 42) == \"777777777777777777777777777777777777777777\"\nassert solution.largestNumber([3, 9, 7, 5, 4, 1, 2, 8, 6], 3) == \"666\"\nassert solution.largestNumber([6, 8, 1, 2, 4, 9, 7, 3, 5], 38) == \"33333333333333333333333333333333333333\"\nassert solution.largestNumber([2, 9, 3, 6, 1, 8, 5, 7, 4], 13) == \"5555555555555\"\nassert solution.largestNumber([6, 5, 3, 2, 1, 8, 7, 9, 4], 49) == \"5555555555555555555555555555555555555555555555555\"\nassert solution.largestNumber([4, 1, 7, 3, 8, 9, 6, 5, 2], 13) == \"2222222222222\"\nassert solution.largestNumber([2, 7, 1, 4, 5, 6, 9, 8, 3], 42) == \"333333333333333333333333333333333333333333\"\nassert solution.largestNumber([4, 2, 1, 9, 3, 8, 7, 5, 6], 17) == \"33333333333333333\"\nassert solution.largestNumber([6, 7, 9, 2, 1, 4, 8, 3, 5], 48) == \"555555555555555555555555555555555555555555555555\"\nassert solution.largestNumber([6, 8, 5, 7, 3, 9, 4, 2, 1], 14) == \"99999999999999\"\nassert solution.largestNumber([6, 3, 4, 8, 5, 9, 7, 1, 2], 18) == \"888888888888888888\"\nassert solution.largestNumber([3, 8, 9, 5, 2, 6, 1, 7, 4], 23) == \"77777777777777777777777\"\nassert solution.largestNumber([3, 5, 8, 6, 4, 2, 1, 9, 7], 33) == \"777777777777777777777777777777777\"\nassert solution.largestNumber([8, 5, 6, 2, 9, 4, 7, 3, 1], 47) == \"99999999999999999999999999999999999999999999999\"\nassert solution.largestNumber([6, 1, 4, 2, 3, 7, 8, 9, 5], 28) == \"2222222222222222222222222222\"\nassert solution.largestNumber([3, 9, 1, 4, 6, 2, 7, 8, 5], 9) == \"333333333\"\nassert solution.largestNumber([4, 8, 1, 3, 2, 6, 7, 5, 9], 35) == \"33333333333333333333333333333333333\"\nassert solution.largestNumber([6, 5, 7, 2, 4, 3, 1, 9, 8], 33) == \"777777777777777777777777777777777\"\nassert solution.largestNumber([1, 3, 4, 2, 9, 8, 6, 7, 5], 11) == \"11111111111\"\nassert solution.largestNumber([8, 6, 3, 9, 4, 1, 7, 5, 2], 26) == \"66666666666666666666666666\"\nassert solution.largestNumber([5, 8, 4, 1, 2, 9, 6, 3, 7], 8) == \"44444444\"\nassert solution.largestNumber([2, 8, 4, 3, 1, 7, 5, 9, 6], 47) == \"55555555555555555555555555555555555555555555555\"\nassert solution.largestNumber([6, 5, 1, 8, 7, 9, 2, 3, 4], 28) == \"3333333333333333333333333333\"\nassert solution.largestNumber([6, 2, 1, 9, 5, 7, 4, 8, 3], 11) == \"33333333333\"\nassert solution.largestNumber([7, 5, 8, 4, 2, 3, 9, 1, 6], 10) == \"8888888888\"\nassert solution.largestNumber([8, 6, 9, 1, 7, 2, 5, 4, 3], 31) == \"4444444444444444444444444444444\"\nassert solution.largestNumber([3, 5, 2, 6, 1, 4, 7, 8, 9], 3) == \"555\"\nassert solution.largestNumber([6, 2, 7, 5, 1, 9, 8, 3, 4], 29) == \"55555555555555555555555555555\"\nassert solution.largestNumber([3, 8, 7, 4, 9, 6, 1, 2, 5], 8) == \"77777777\"\nassert solution.largestNumber([9, 8, 7, 1, 5, 6, 3, 2, 4], 29) == \"44444444444444444444444444444\"\nassert solution.largestNumber([3, 8, 7, 9, 5, 2, 6, 4, 1], 10) == \"9999999999\"\nassert solution.largestNumber([1, 8, 4, 7, 3, 6, 5, 9, 2], 35) == \"11111111111111111111111111111111111\"\nassert solution.largestNumber([9, 8, 1, 5, 6, 2, 4, 3, 7], 18) == \"333333333333333333\"\nassert solution.largestNumber([2, 3, 9, 6, 7, 1, 5, 4, 8], 9) == \"666666666\"\nassert solution.largestNumber([5, 4, 3, 2, 7, 1, 6, 8, 9], 44) == \"66666666666666666666666666666666666666666666\"\nassert solution.largestNumber([7, 8, 6, 2, 9, 1, 5, 3, 4], 44) == \"66666666666666666666666666666666666666666666\"\nassert solution.largestNumber([4, 6, 5, 8, 3, 2, 7, 9, 1], 4) == \"9999\"\nassert solution.largestNumber([9, 5, 4, 8, 1, 6, 3, 2, 7], 5) == \"55555\"\nassert solution.largestNumber([7, 2, 5, 9, 6, 3, 4, 1, 8], 10) == \"8888888888\"\nassert solution.largestNumber([2, 1, 9, 4, 6, 8, 5, 3, 7], 43) == \"2222222222222222222222222222222222222222222\"\nassert solution.largestNumber([4, 7, 1, 5, 3, 6, 8, 2, 9], 15) == \"333333333333333\"\nassert solution.largestNumber([1, 2, 5, 9, 4, 8, 6, 3, 7], 42) == \"111111111111111111111111111111111111111111\"\nassert solution.largestNumber([9, 7, 5, 4, 1, 2, 6, 8, 3], 20) == \"55555555555555555555\"\nassert solution.largestNumber([6, 9, 4, 2, 8, 3, 1, 7, 5], 48) == \"777777777777777777777777777777777777777777777777\"\nassert solution.largestNumber([3, 4, 5, 7, 1, 9, 6, 2, 8], 48) == \"555555555555555555555555555555555555555555555555\"\nassert solution.largestNumber([5, 2, 7, 3, 8, 4, 1, 9, 6], 25) == \"7777777777777777777777777\"\nassert solution.largestNumber([6, 9, 3, 4, 5, 1, 8, 7, 2], 43) == \"6666666666666666666666666666666666666666666\"",
  "inefficient_solution": "class Solution:\n    def largestNumber(self, cost, target):\n        max_len = 1000\n        dp = [[-1] * (target + 1) for _ in range(max_len)]\n        for i in range(max_len):\n            dp[i][0] = 0\n\n        for i in range(max_len):\n            for j in range(target + 1):\n                for k in range(1, 10):\n                    if j < cost[k - 1] or dp[i][j - cost[k - 1]] == -1:\n                        dp[i][j] = -1\n                    else:\n                        dp[i][j] = i + 1\n                        break\n                if dp[i][j] == -1:\n                    for k in range(j):\n                        dp[i][j] = max(dp[i][k], dp[i][j - k])\n                        if dp[i][k] != -1 and dp[i][j - k] != -1:\n                            break\n\n        if dp[max_len - 1][target] == -1:\n            return \"0\"\n\n        digits = []\n        i, j = max_len - 1, target\n        while i > 0:\n            for k in range(j):\n                if dp[i][k] != -1 and dp[i][j - k] != -1:\n                    digits.append(str(i))\n                    j = k\n                    break\n            i -= 1\n\n        return \"\".join(digits[::-1])",
  "is_python": true
}