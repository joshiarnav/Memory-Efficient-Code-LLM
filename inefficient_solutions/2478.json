{
  "problem_idx": 2478,
  "task_name": "Number of Beautiful Partitions",
  "markdown_description": "\nYou are given a string `s` that consists of the digits `'1'` to `'9'` and two integers `k` and `minLength`.\n\n\nA partition of `s` is called **beautiful** if:\n\n\n* `s` is partitioned into `k` non-intersecting substrings.\n* Each substring has a length of **at least** `minLength`.\n* Each substring starts with a **prime** digit and ends with a **non-prime** digit. Prime digits are `'2'`, `'3'`, `'5'`, and `'7'`, and the rest of the digits are non-prime.\n\n\nReturn *the number of **beautiful** partitions of* `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"23542185131\", k = 3, minLength = 2\n**Output:** 3\n**Explanation:** There exists three ways to create a beautiful partition:\n\"2354 | 218 | 5131\"\n\"2354 | 21851 | 31\"\n\"2354218 | 51 | 31\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"23542185131\", k = 3, minLength = 3\n**Output:** 1\n**Explanation:** There exists one way to create a beautiful partition: \"2354 | 218 | 5131\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"3312958\", k = 3, minLength = 1\n**Output:** 1\n**Explanation:** There exists one way to create a beautiful partition: \"331 | 29 | 58\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k, minLength <= s.length <= 1000`\n* `s` consists of the digits `'1'` to `'9'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        f = [[0] * (k + 1) for _ in range(n + 1)]\n        g = [[0] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = g[0][0] = 1\n        for i, c in enumerate(s, 1):\n            if i >= minLength and c not in primes and (i == n or s[i] in primes):\n                for j in range(1, k + 1):\n                    f[i][j] = g[i - minLength][j - 1]\n            for j in range(k + 1):\n                g[i][j] = (g[i - 1][j] + f[i][j]) % mod\n        return f[n][k]\n",
  "test_case_generator": "\nimport random\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    digits = random.choices([str(i) for i in range(1, 10)], k=random.randint(1, 10))\n    s = \"\".join(digits)\n    \n    # Generate random values for k and minLength\n    k = random.randint(1, 5)\n    minLength = random.randint(1, len(s))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.beautifulPartitions(s, k, minLength)\n\n    return s, k, minLength, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, minLength, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.beautifulPartitions(s, k, minLength) == expected_result\n        print(f\"assert solution.beautifulPartitions('{s}', {k}, {minLength}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.beautifulPartitions('{s}', {k}, {minLength}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.beautifulPartitions('89896921', 1, 6) == 0\nassert solution.beautifulPartitions('6259413', 2, 1) == 0\nassert solution.beautifulPartitions('91443', 5, 4) == 0\nassert solution.beautifulPartitions('6338684824', 4, 10) == 0\nassert solution.beautifulPartitions('27429', 3, 1) == 0\nassert solution.beautifulPartitions('4553956', 2, 5) == 0\nassert solution.beautifulPartitions('386', 1, 1) == 1\nassert solution.beautifulPartitions('885493', 4, 2) == 0\nassert solution.beautifulPartitions('8', 4, 1) == 0\nassert solution.beautifulPartitions('25814972', 2, 1) == 0\nassert solution.beautifulPartitions('19635', 2, 1) == 0\nassert solution.beautifulPartitions('8', 5, 1) == 0\nassert solution.beautifulPartitions('4535', 4, 3) == 0\nassert solution.beautifulPartitions('9887', 1, 4) == 0\nassert solution.beautifulPartitions('8837466461', 5, 7) == 0\nassert solution.beautifulPartitions('1731647894', 2, 6) == 0\nassert solution.beautifulPartitions('928', 1, 1) == 0\nassert solution.beautifulPartitions('24', 2, 2) == 0\nassert solution.beautifulPartitions('37373269', 4, 3) == 0\nassert solution.beautifulPartitions('78126776', 5, 5) == 0\nassert solution.beautifulPartitions('9951212', 2, 3) == 0\nassert solution.beautifulPartitions('13383142', 2, 5) == 0\nassert solution.beautifulPartitions('8669322', 4, 3) == 0\nassert solution.beautifulPartitions('8221341', 1, 5) == 0\nassert solution.beautifulPartitions('39663439', 4, 3) == 0\nassert solution.beautifulPartitions('672793', 1, 2) == 0\nassert solution.beautifulPartitions('362329', 3, 2) == 0\nassert solution.beautifulPartitions('6712687', 1, 6) == 0\nassert solution.beautifulPartitions('831', 4, 3) == 0\nassert solution.beautifulPartitions('9', 4, 1) == 0\nassert solution.beautifulPartitions('4964953989', 1, 2) == 0\nassert solution.beautifulPartitions('66975124', 2, 5) == 0\nassert solution.beautifulPartitions('96479', 4, 2) == 0\nassert solution.beautifulPartitions('27813263', 2, 4) == 0\nassert solution.beautifulPartitions('92', 3, 1) == 0\nassert solution.beautifulPartitions('4751522981', 3, 1) == 0\nassert solution.beautifulPartitions('6', 1, 1) == 0\nassert solution.beautifulPartitions('29461815', 4, 2) == 0\nassert solution.beautifulPartitions('81', 3, 2) == 0\nassert solution.beautifulPartitions('3463591896', 5, 2) == 0\nassert solution.beautifulPartitions('97142', 2, 1) == 0\nassert solution.beautifulPartitions('4', 1, 1) == 0\nassert solution.beautifulPartitions('34713126', 2, 7) == 0\nassert solution.beautifulPartitions('997551', 3, 2) == 0\nassert solution.beautifulPartitions('361631', 1, 4) == 1\nassert solution.beautifulPartitions('6526231', 2, 4) == 0\nassert solution.beautifulPartitions('3', 1, 1) == 0\nassert solution.beautifulPartitions('4', 5, 1) == 0\nassert solution.beautifulPartitions('6658', 4, 3) == 0\nassert solution.beautifulPartitions('6476', 1, 3) == 0\nassert solution.beautifulPartitions('87367', 4, 5) == 0\nassert solution.beautifulPartitions('339718', 5, 3) == 0\nassert solution.beautifulPartitions('61', 4, 2) == 0\nassert solution.beautifulPartitions('891453672', 4, 8) == 0\nassert solution.beautifulPartitions('42', 2, 2) == 0\nassert solution.beautifulPartitions('269524735', 5, 9) == 0\nassert solution.beautifulPartitions('156', 1, 1) == 0\nassert solution.beautifulPartitions('16369483', 4, 6) == 0\nassert solution.beautifulPartitions('244', 2, 3) == 0\nassert solution.beautifulPartitions('59872373', 3, 3) == 0\nassert solution.beautifulPartitions('1792511', 1, 7) == 0\nassert solution.beautifulPartitions('46', 2, 2) == 0\nassert solution.beautifulPartitions('39649652', 3, 5) == 0\nassert solution.beautifulPartitions('65367568', 4, 4) == 0\nassert solution.beautifulPartitions('1154313231', 1, 8) == 0\nassert solution.beautifulPartitions('6223', 2, 1) == 0\nassert solution.beautifulPartitions('537', 2, 3) == 0\nassert solution.beautifulPartitions('6827389743', 4, 8) == 0\nassert solution.beautifulPartitions('246991663', 2, 8) == 0\nassert solution.beautifulPartitions('58793659', 3, 4) == 0\nassert solution.beautifulPartitions('1637944', 3, 5) == 0\nassert solution.beautifulPartitions('721', 4, 3) == 0\nassert solution.beautifulPartitions('8347825457', 5, 1) == 0\nassert solution.beautifulPartitions('2299171217', 4, 8) == 0\nassert solution.beautifulPartitions('12789984', 3, 7) == 0\nassert solution.beautifulPartitions('2', 1, 1) == 0\nassert solution.beautifulPartitions('5598681', 5, 1) == 0\nassert solution.beautifulPartitions('988124615', 5, 7) == 0\nassert solution.beautifulPartitions('64315', 3, 5) == 0\nassert solution.beautifulPartitions('4536942', 4, 5) == 0\nassert solution.beautifulPartitions('537', 2, 3) == 0\nassert solution.beautifulPartitions('44353452', 4, 4) == 0\nassert solution.beautifulPartitions('1', 5, 1) == 0\nassert solution.beautifulPartitions('2594', 4, 1) == 0\nassert solution.beautifulPartitions('2', 4, 1) == 0\nassert solution.beautifulPartitions('386', 4, 1) == 0\nassert solution.beautifulPartitions('15', 1, 1) == 0\nassert solution.beautifulPartitions('599', 5, 2) == 0\nassert solution.beautifulPartitions('165844315', 1, 8) == 0\nassert solution.beautifulPartitions('261', 5, 3) == 0\nassert solution.beautifulPartitions('419261922', 2, 7) == 0\nassert solution.beautifulPartitions('165', 5, 3) == 0\nassert solution.beautifulPartitions('872646211', 2, 5) == 0\nassert solution.beautifulPartitions('151831', 1, 6) == 0\nassert solution.beautifulPartitions('7', 2, 1) == 0\nassert solution.beautifulPartitions('575583', 1, 4) == 0\nassert solution.beautifulPartitions('2215738', 1, 1) == 1\nassert solution.beautifulPartitions('299994', 1, 3) == 1\nassert solution.beautifulPartitions('4113', 3, 1) == 0\nassert solution.beautifulPartitions('4727', 5, 1) == 0",
  "inefficient_solution": "class Solution:\n    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:\n        primes = '2357'\n        if s[0] not in primes or s[-1] in primes:\n            return 0\n        mod = 10**9 + 7\n        n = len(s)\n        f = dict()\n        for i in range(n+1):\n            for j in range(k+1):\n                f[(i, j)] = 0\n        f[(0, 0)] = 1\n        g = dict()\n        for i in range(n+1):\n            for j in range(k+1):\n                g[(i, j)] = 0\n        for i, c in enumerate(s, 1):\n            for j in range(1, k + 1):\n                temp = []\n                for x in range(i - minLength + 1, i + 1):\n                    for y in range(1, k + 1):\n                        if (x, y) in f:\n                            temp.append(f[(x, y)])\n                f[(i, j)] = sum(temp)\n            for j in range(k + 1):\n                g[(i, j)] = (g[(i-1, j)] + f[(i, j)]) % mod\n        return f[(n, k)]",
  "is_python": true
}