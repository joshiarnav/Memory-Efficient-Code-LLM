{
  "problem_idx": 1223,
  "task_name": "Dice Roll Simulation",
  "markdown_description": "\nA die simulator generates a random number from `1` to `6` for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (**1-indexed**) consecutive times.\n\n\nGiven an array of integers `rollMax` and an integer `n`, return *the number of distinct sequences that can be obtained with exact* `n` *rolls*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\nTwo sequences are considered different if at least one element differs from each other.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2, rollMax = [1,1,2,2,2,3]\n**Output:** 34\n**Explanation:** There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, rollMax = [1,1,1,1,1,1]\n**Output:** 30\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 3, rollMax = [1,1,1,2,2,3]\n**Output:** 181\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 5000`\n* `rollMax.length == 6`\n* `1 <= rollMax[i] <= 15`\n\n\n",
  "canonical_solution": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        @cache\n        def dfs(i, j, x):\n            if i >= n:\n                return 1\n            ans = 0\n            for k in range(1, 7):\n                if k != j:\n                    ans += dfs(i + 1, k, 1)\n                elif x < rollMax[j - 1]:\n                    ans += dfs(i + 1, j, x + 1)\n            return ans % (10**9 + 7)\n\n        return dfs(0, 0, 0)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        @cache\n        def dfs(i, j, x):\n            if i >= n:\n                return 1\n            ans = 0\n            for k in range(1, 7):\n                if k != j:\n                    ans += dfs(i + 1, k, 1)\n                elif x < rollMax[j - 1]:\n                    ans += dfs(i + 1, j, x + 1)\n            return ans % (10**9 + 7)\n\n        return dfs(0, 0, 0)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n and rollMax\n    n = random.randint(1, 11)\n    rollMax = [random.randint(1, 6) for _ in range(6)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.dieSimulator(n, rollMax)\n\n    return n, rollMax, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, rollMax, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.dieSimulator(n, rollMax) == expected_result\n        print(f\"assert solution.dieSimulator({n}, {rollMax}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.dieSimulator({n}, {rollMax}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.dieSimulator(2, [6, 2, 3, 6, 5, 2]) == 36\nassert solution.dieSimulator(10, [4, 1, 1, 3, 3, 5]) == 37514282\nassert solution.dieSimulator(1, [3, 1, 5, 5, 2, 2]) == 6\nassert solution.dieSimulator(6, [5, 6, 5, 5, 1, 1]) == 35951\nassert solution.dieSimulator(3, [6, 6, 3, 1, 4, 4]) == 205\nassert solution.dieSimulator(1, [1, 1, 5, 4, 5, 4]) == 6\nassert solution.dieSimulator(1, [2, 3, 5, 1, 2, 6]) == 6\nassert solution.dieSimulator(2, [6, 2, 3, 4, 6, 1]) == 35\nassert solution.dieSimulator(1, [5, 5, 1, 3, 3, 5]) == 6\nassert solution.dieSimulator(4, [5, 5, 6, 3, 5, 3]) == 1294\nassert solution.dieSimulator(6, [3, 2, 3, 6, 2, 4]) == 44943\nassert solution.dieSimulator(5, [6, 2, 5, 5, 4, 1]) == 6930\nassert solution.dieSimulator(1, [5, 2, 2, 4, 2, 6]) == 6\nassert solution.dieSimulator(9, [2, 2, 2, 2, 4, 1]) == 7270394\nassert solution.dieSimulator(8, [4, 3, 1, 6, 6, 3]) == 1398121\nassert solution.dieSimulator(5, [5, 5, 6, 2, 3, 4]) == 7668\nassert solution.dieSimulator(11, [2, 6, 4, 1, 4, 3]) == 269751518\nassert solution.dieSimulator(1, [3, 6, 1, 5, 5, 5]) == 6\nassert solution.dieSimulator(7, [1, 5, 4, 6, 5, 3]) == 239909\nassert solution.dieSimulator(2, [2, 2, 4, 5, 4, 6]) == 36\nassert solution.dieSimulator(4, [1, 1, 5, 5, 3, 1]) == 1013\nassert solution.dieSimulator(1, [6, 3, 1, 1, 3, 6]) == 6\nassert solution.dieSimulator(9, [3, 3, 6, 1, 1, 1]) == 5237841\nassert solution.dieSimulator(4, [5, 4, 2, 4, 6, 4]) == 1285\nassert solution.dieSimulator(4, [6, 3, 3, 2, 6, 3]) == 1282\nassert solution.dieSimulator(3, [5, 3, 3, 1, 3, 5]) == 205\nassert solution.dieSimulator(1, [4, 6, 2, 2, 1, 3]) == 6\nassert solution.dieSimulator(6, [6, 1, 5, 3, 3, 1]) == 35769\nassert solution.dieSimulator(2, [4, 3, 5, 6, 6, 2]) == 36\nassert solution.dieSimulator(6, [3, 5, 1, 3, 6, 3]) == 40842\nassert solution.dieSimulator(1, [3, 3, 6, 2, 5, 6]) == 6\nassert solution.dieSimulator(5, [1, 1, 4, 1, 4, 5]) == 5617\nassert solution.dieSimulator(3, [3, 6, 2, 1, 1, 5]) == 193\nassert solution.dieSimulator(1, [1, 4, 1, 2, 5, 5]) == 6\nassert solution.dieSimulator(5, [1, 2, 2, 3, 6, 3]) == 6815\nassert solution.dieSimulator(11, [3, 1, 2, 1, 5, 4]) == 205828247\nassert solution.dieSimulator(10, [3, 6, 1, 3, 2, 3]) == 45904404\nassert solution.dieSimulator(9, [3, 1, 3, 2, 1, 4]) == 6372604\nassert solution.dieSimulator(8, [5, 1, 3, 5, 2, 1]) == 1130437\nassert solution.dieSimulator(5, [2, 2, 3, 6, 4, 5]) == 7572\nassert solution.dieSimulator(6, [5, 3, 4, 3, 3, 5]) == 46355\nassert solution.dieSimulator(9, [3, 2, 3, 6, 5, 1]) == 7928317\nassert solution.dieSimulator(9, [4, 3, 5, 6, 6, 4]) == 10025349\nassert solution.dieSimulator(3, [2, 1, 1, 1, 5, 4]) == 182\nassert solution.dieSimulator(9, [4, 4, 6, 2, 2, 2]) == 9240186\nassert solution.dieSimulator(10, [3, 5, 6, 5, 4, 6]) == 60133441\nassert solution.dieSimulator(8, [5, 4, 1, 4, 2, 2]) == 1334935\nassert solution.dieSimulator(1, [2, 2, 5, 1, 1, 4]) == 6\nassert solution.dieSimulator(4, [2, 6, 6, 1, 4, 3]) == 1188\nassert solution.dieSimulator(4, [4, 5, 1, 2, 6, 6]) == 1189\nassert solution.dieSimulator(8, [3, 2, 5, 1, 4, 4]) == 1365983\nassert solution.dieSimulator(1, [1, 6, 2, 1, 6, 6]) == 6\nassert solution.dieSimulator(1, [5, 1, 1, 3, 1, 4]) == 6\nassert solution.dieSimulator(8, [4, 1, 4, 3, 2, 5]) == 1365983\nassert solution.dieSimulator(11, [4, 4, 4, 4, 4, 3]) == 359487625\nassert solution.dieSimulator(6, [2, 1, 6, 2, 6, 1]) == 34572\nassert solution.dieSimulator(10, [2, 6, 3, 2, 5, 5]) == 56405707\nassert solution.dieSimulator(3, [2, 3, 4, 1, 4, 6]) == 204\nassert solution.dieSimulator(8, [1, 6, 2, 2, 5, 4]) == 1335644\nassert solution.dieSimulator(3, [4, 6, 3, 3, 3, 4]) == 216\nassert solution.dieSimulator(10, [2, 3, 5, 4, 4, 2]) == 56333171\nassert solution.dieSimulator(5, [4, 4, 1, 2, 1, 1]) == 5527\nassert solution.dieSimulator(10, [3, 5, 4, 1, 5, 1]) == 37730265\nassert solution.dieSimulator(4, [1, 6, 5, 6, 4, 4]) == 1200\nassert solution.dieSimulator(3, [5, 2, 1, 2, 2, 6]) == 202\nassert solution.dieSimulator(11, [2, 5, 3, 6, 6, 5]) == 348034381\nassert solution.dieSimulator(7, [3, 4, 3, 1, 3, 6]) == 238483\nassert solution.dieSimulator(10, [2, 5, 1, 3, 5, 6]) == 46385546\nassert solution.dieSimulator(2, [1, 4, 1, 5, 2, 3]) == 34\nassert solution.dieSimulator(3, [1, 5, 3, 1, 4, 3]) == 194\nassert solution.dieSimulator(3, [2, 2, 1, 3, 5, 1]) == 192\nassert solution.dieSimulator(6, [3, 1, 2, 6, 3, 4]) == 40202\nassert solution.dieSimulator(9, [2, 5, 4, 4, 2, 3]) == 9471995\nassert solution.dieSimulator(2, [3, 1, 6, 5, 3, 2]) == 35\nassert solution.dieSimulator(4, [2, 5, 6, 3, 4, 3]) == 1283\nassert solution.dieSimulator(3, [2, 4, 1, 1, 5, 5]) == 193\nassert solution.dieSimulator(6, [1, 1, 1, 4, 6, 4]) == 31115\nassert solution.dieSimulator(8, [4, 5, 2, 1, 3, 4]) == 1365983\nassert solution.dieSimulator(7, [2, 1, 2, 5, 5, 2]) == 225074\nassert solution.dieSimulator(3, [5, 4, 4, 6, 6, 5]) == 216\nassert solution.dieSimulator(6, [6, 2, 6, 4, 6, 1]) == 40390\nassert solution.dieSimulator(4, [5, 2, 6, 1, 3, 3]) == 1187\nassert solution.dieSimulator(9, [6, 3, 2, 6, 2, 2]) == 9212045\nassert solution.dieSimulator(7, [3, 4, 3, 1, 3, 2]) == 233240\nassert solution.dieSimulator(5, [2, 6, 4, 6, 2, 5]) == 7583\nassert solution.dieSimulator(7, [6, 6, 6, 6, 5, 1]) == 240735\nassert solution.dieSimulator(6, [1, 6, 5, 4, 4, 5]) == 41101\nassert solution.dieSimulator(3, [5, 5, 4, 2, 5, 5]) == 215\nassert solution.dieSimulator(11, [2, 4, 5, 5, 3, 2]) == 335265643\nassert solution.dieSimulator(5, [6, 5, 4, 6, 5, 6]) == 7775\nassert solution.dieSimulator(9, [1, 5, 6, 1, 3, 2]) == 6409679\nassert solution.dieSimulator(8, [6, 4, 4, 6, 4, 1]) == 1407181\nassert solution.dieSimulator(4, [6, 5, 3, 1, 1, 5]) == 1105\nassert solution.dieSimulator(4, [1, 3, 1, 2, 3, 3]) == 1092\nassert solution.dieSimulator(1, [6, 4, 1, 2, 3, 5]) == 6\nassert solution.dieSimulator(5, [3, 3, 5, 2, 5, 2]) == 7562\nassert solution.dieSimulator(11, [3, 5, 5, 4, 1, 2]) == 269930106\nassert solution.dieSimulator(2, [6, 2, 6, 2, 3, 6]) == 36\nassert solution.dieSimulator(9, [4, 1, 4, 5, 1, 2]) == 6433060\nassert solution.dieSimulator(5, [3, 1, 3, 5, 1, 4]) == 6283",
  "inefficient_solution": "class Solution:\n    def dieSimulator(self, n: int, rollMax: List[int]) -> int:\n        MOD = 10**9 + 7\n        dp = [[[0]*16 for _ in range(6)] for _ in range(n+1)]\n\n        for i in range(6):\n            dp[1][i][1] = 1\n\n        for i in range(1, n):\n            for j in range(6):\n                for k in range(16):\n                    for m in range(1, 7):\n                        if m != j:\n                            dp[i+1][m][1] += dp[i][j][k]\n                        else:\n                            if k < rollMax[j]:\n                                dp[i+1][m][k+1] += dp[i][j][k]\n\n        ans = 0\n        for i in range(6):\n            for j in range(16):\n                ans += dp[n][i][j]\n\n        return ans % MOD",
  "is_python": true
}