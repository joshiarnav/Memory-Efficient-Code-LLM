{
  "problem_idx": 2312,
  "task_name": "Selling Pieces of Wood",
  "markdown_description": "\nYou are given two integers `m` and `n` that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array `prices`, where `prices[i] = [hi, wi, pricei]` indicates you can sell a rectangular piece of wood of height `hi` and width `wi` for `pricei` dollars.\n\n\nTo cut a piece of wood, you must make a vertical or horizontal cut across the **entire** height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to `prices`. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you **cannot** rotate a piece to swap its height and width.\n\n\nReturn *the **maximum** money you can earn after cutting an* `m x n` *piece of wood*.\n\n\nNote that you can cut the piece of wood as many times as you want.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2312.Selling%20Pieces%20of%20Wood/images/ex1.png)\n\n```\n\n**Input:** m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]\n**Output:** 19\n**Explanation:** The diagram above shows a possible scenario. It consists of:\n- 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14.\n- 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 14 + 3 + 2 = 19 money earned.\nIt can be shown that 19 is the maximum amount of money that can be earned.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2312.Selling%20Pieces%20of%20Wood/images/ex2new.png)\n\n```\n\n**Input:** m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]\n**Output:** 32\n**Explanation:** The diagram above shows a possible scenario. It consists of:\n- 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30.\n- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.\nThis obtains a total of 30 + 2 = 32 money earned.\nIt can be shown that 32 is the maximum amount of money that can be earned.\nNotice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= m, n <= 200`\n* `1 <= prices.length <= 2 * 104`\n* `prices[i].length == 3`\n* `1 <= hi <= m`\n* `1 <= wi <= n`\n* `1 <= pricei <= 106`\n* All the shapes of wood `(hi, wi)` are pairwise **distinct**.\n\n\n",
  "canonical_solution": "class Solution:\n    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:\n        @cache\n        def dfs(h, w):\n            ans = d[h].get(w, 0)\n            for i in range(1, h // 2 + 1):\n                ans = max(ans, dfs(i, w) + dfs(h - i, w))\n            for i in range(1, w // 2 + 1):\n                ans = max(ans, dfs(h, i) + dfs(h, w - i))\n            return ans\n\n        d = defaultdict(dict)\n        for h, w, p in prices:\n            d[h][w] = p\n        return dfs(m, n)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:\n        @cache\n        def dfs(h, w):\n            ans = d[h].get(w, 0)\n            for i in range(1, h // 2 + 1):\n                ans = max(ans, dfs(i, w) + dfs(h - i, w))\n            for i in range(1, w // 2 + 1):\n                ans = max(ans, dfs(h, i) + dfs(h, w - i))\n            return ans\n\n        d = defaultdict(dict)\n        for h, w, p in prices:\n            d[h][w] = p\n        return dfs(m, n)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers\n    m = random.randint(1, 21)\n    n = random.randint(1, 21)\n    num_prices = random.randint(1, 21)\n    prices = []\n    for i in range(num_prices):\n        h = random.randint(1, m + 1)\n        w = random.randint(1, n + 1)\n        p = random.randint(1, 101)\n        prices.append([h, w, p])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.sellingWood(m, n, prices)\n\n    return m, n, prices, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        m, n, prices, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sellingWood(m, n, prices) == expected_result\n        print(f\"assert solution.sellingWood({m}, {n}, {prices}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.sellingWood({m}, {n}, {prices}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sellingWood(15, 19, [[4, 3, 61], [16, 10, 76], [2, 3, 30], [13, 12, 82], [1, 13, 83], [8, 17, 8], [7, 5, 97], [4, 13, 80], [7, 5, 34], [16, 17, 101], [16, 6, 72], [10, 7, 38], [7, 3, 55], [2, 14, 88], [8, 3, 63], [6, 16, 23], [14, 1, 63], [11, 14, 41], [14, 5, 65]]) == 1671\nassert solution.sellingWood(21, 12, [[2, 3, 75]]) == 3000\nassert solution.sellingWood(2, 18, [[2, 14, 96], [2, 14, 30], [2, 11, 51], [3, 2, 73], [1, 14, 45]]) == 90\nassert solution.sellingWood(17, 15, [[10, 10, 85]]) == 85\nassert solution.sellingWood(18, 19, [[11, 2, 12], [17, 18, 9], [5, 2, 56], [11, 20, 23], [7, 9, 53], [8, 14, 33], [14, 15, 44], [7, 20, 56], [16, 13, 54], [7, 6, 51], [4, 14, 61], [4, 13, 23], [18, 17, 53], [17, 15, 38], [8, 11, 53], [7, 6, 18], [17, 7, 18], [7, 3, 60]]) == 1516\nassert solution.sellingWood(3, 5, [[4, 3, 99], [2, 5, 95], [4, 5, 14], [2, 2, 18]]) == 95\nassert solution.sellingWood(4, 2, [[1, 3, 40], [5, 3, 69], [3, 1, 52], [2, 3, 33], [4, 2, 92], [4, 1, 40], [1, 2, 24], [2, 2, 62], [4, 2, 92], [2, 3, 94], [4, 2, 94], [5, 3, 15], [5, 1, 79], [3, 2, 70], [3, 2, 83], [2, 2, 49], [2, 3, 46], [1, 2, 43], [4, 1, 51]]) == 172\nassert solution.sellingWood(5, 9, [[1, 1, 77], [2, 1, 61], [6, 8, 77], [6, 10, 33], [3, 5, 79], [4, 3, 26], [3, 10, 69], [6, 6, 93], [6, 7, 75]]) == 3465\nassert solution.sellingWood(15, 4, [[1, 3, 44], [11, 3, 26], [10, 2, 52], [11, 5, 80], [2, 2, 21], [13, 4, 1], [14, 4, 15], [10, 3, 19], [9, 3, 12], [8, 5, 20], [5, 5, 81], [6, 2, 92], [1, 4, 84]]) == 1260\nassert solution.sellingWood(16, 16, [[17, 13, 80]]) == 0\nassert solution.sellingWood(1, 10, [[1, 4, 41], [2, 5, 59], [2, 4, 92], [1, 11, 10], [2, 7, 18], [1, 2, 82], [1, 11, 29], [1, 5, 44], [2, 5, 80], [1, 11, 44], [1, 1, 44], [1, 3, 10], [2, 1, 34], [2, 2, 96], [1, 5, 19], [1, 8, 57], [1, 11, 14], [1, 11, 97], [1, 7, 30], [2, 3, 91], [2, 8, 91]]) == 440\nassert solution.sellingWood(1, 18, [[1, 6, 94], [2, 14, 42], [1, 15, 3], [1, 7, 21], [1, 3, 22], [1, 12, 53], [2, 12, 10], [1, 8, 4], [1, 5, 8], [2, 17, 26], [1, 6, 51]]) == 153\nassert solution.sellingWood(21, 19, [[9, 9, 30], [17, 20, 9], [20, 19, 4], [14, 18, 37]]) == 120\nassert solution.sellingWood(17, 8, [[3, 7, 70], [11, 5, 59]]) == 350\nassert solution.sellingWood(19, 14, [[10, 1, 68], [15, 10, 3], [16, 2, 77], [17, 3, 7], [5, 10, 47], [11, 3, 7], [2, 4, 22], [13, 6, 51], [20, 7, 21], [18, 7, 39], [4, 3, 63]]) == 1456\nassert solution.sellingWood(7, 16, [[1, 5, 87], [6, 5, 13], [3, 11, 24], [8, 13, 71], [6, 14, 94], [2, 1, 20], [1, 12, 33], [4, 9, 40], [8, 15, 78], [6, 3, 31], [6, 4, 34]]) == 1887\nassert solution.sellingWood(8, 16, [[6, 6, 16], [7, 8, 36], [3, 15, 62], [6, 17, 50], [5, 9, 60], [7, 15, 68], [8, 13, 94], [5, 16, 57], [5, 9, 46], [9, 10, 37], [8, 14, 9]]) == 124\nassert solution.sellingWood(1, 12, [[1, 1, 8], [1, 6, 30], [1, 12, 2], [1, 6, 4], [1, 12, 92], [2, 9, 69]]) == 96\nassert solution.sellingWood(4, 5, [[2, 1, 66], [5, 3, 76], [1, 4, 80], [1, 2, 88], [3, 6, 49], [2, 1, 88], [2, 4, 37], [2, 1, 56], [5, 3, 3], [3, 3, 88], [3, 5, 37]]) == 816\nassert solution.sellingWood(3, 7, [[2, 2, 7], [2, 7, 4], [2, 7, 69], [2, 6, 39], [4, 3, 43], [2, 8, 16], [4, 6, 62], [4, 7, 33], [2, 1, 89]]) == 623\nassert solution.sellingWood(13, 2, [[3, 3, 73], [11, 2, 56], [1, 1, 73], [10, 1, 4], [6, 3, 97], [1, 1, 24], [5, 1, 63], [12, 1, 79], [10, 3, 6], [12, 2, 71], [3, 3, 91], [11, 3, 88], [13, 2, 101], [11, 1, 78], [1, 3, 1], [2, 1, 18], [5, 2, 94], [7, 2, 97]]) == 624\nassert solution.sellingWood(3, 16, [[3, 9, 7], [2, 1, 85], [2, 16, 100], [2, 16, 7], [3, 9, 42], [4, 11, 28], [1, 6, 9], [2, 11, 57]]) == 1378\nassert solution.sellingWood(20, 9, [[3, 4, 24], [15, 6, 70], [20, 3, 1], [21, 10, 18], [1, 9, 57], [15, 2, 96]]) == 1140\nassert solution.sellingWood(9, 20, [[9, 21, 31], [8, 12, 56], [9, 5, 92], [5, 2, 59], [9, 19, 35], [6, 9, 85], [8, 8, 37], [7, 6, 78], [4, 5, 55], [3, 21, 76], [9, 8, 87], [10, 14, 53], [9, 5, 56], [10, 7, 74], [2, 14, 21], [6, 3, 30], [3, 18, 1], [6, 21, 40]]) == 810\nassert solution.sellingWood(16, 17, [[2, 14, 37], [3, 3, 7], [13, 11, 48], [1, 4, 29], [10, 17, 75], [1, 14, 84], [13, 13, 1], [5, 9, 34], [4, 13, 100], [2, 15, 26], [4, 18, 76], [9, 7, 73], [14, 9, 29], [12, 10, 6], [15, 8, 30], [7, 11, 17], [17, 16, 87], [8, 4, 68]]) == 1856\nassert solution.sellingWood(13, 4, [[3, 2, 38], [12, 1, 11], [14, 4, 51], [7, 3, 83], [1, 2, 22], [3, 5, 80], [3, 5, 66], [8, 2, 87], [3, 2, 57], [8, 5, 55]]) == 572\nassert solution.sellingWood(9, 7, [[7, 4, 60], [8, 2, 55], [8, 5, 77], [6, 8, 90], [9, 4, 19], [10, 1, 85], [10, 4, 16], [6, 8, 98], [1, 6, 36], [9, 8, 95], [6, 8, 59], [8, 6, 5], [3, 3, 25], [7, 1, 36], [4, 7, 33], [3, 6, 9], [2, 4, 28]]) == 360\nassert solution.sellingWood(5, 5, [[3, 1, 65], [6, 1, 101], [1, 2, 7], [3, 6, 89], [3, 2, 29], [4, 6, 83], [1, 6, 63], [1, 5, 38], [5, 2, 88], [5, 3, 55], [2, 3, 93]]) == 432\nassert solution.sellingWood(7, 1, [[3, 2, 57], [3, 1, 1], [8, 1, 80], [3, 2, 89], [4, 2, 63], [2, 2, 45], [7, 2, 52], [5, 2, 13], [8, 2, 54], [6, 2, 62], [3, 1, 94], [4, 1, 88], [1, 2, 89], [6, 2, 86], [8, 1, 52], [7, 1, 64], [2, 1, 68], [3, 1, 28], [1, 1, 19]]) == 223\nassert solution.sellingWood(15, 4, [[15, 1, 14], [11, 5, 36], [3, 4, 27], [8, 2, 69], [2, 1, 46], [13, 5, 73], [6, 4, 32], [8, 4, 40]]) == 1288\nassert solution.sellingWood(13, 7, [[11, 5, 15], [10, 4, 15], [13, 4, 69], [12, 7, 28], [3, 6, 61], [14, 2, 68], [14, 7, 53], [13, 4, 49], [10, 6, 97], [3, 2, 17], [1, 6, 84], [2, 2, 91], [2, 5, 12], [5, 1, 58], [11, 4, 87], [8, 3, 16], [13, 7, 46], [14, 1, 67], [9, 3, 2]]) == 1838\nassert solution.sellingWood(3, 11, [[1, 7, 18], [3, 4, 77], [4, 11, 20], [3, 12, 59], [2, 4, 92], [1, 1, 83], [1, 5, 19], [3, 2, 74], [3, 5, 87], [3, 2, 15], [1, 4, 43], [3, 11, 24], [2, 3, 55], [4, 10, 38], [2, 10, 91], [3, 11, 69], [2, 9, 42], [4, 9, 25], [4, 11, 45]]) == 2739\nassert solution.sellingWood(8, 8, [[7, 8, 77], [5, 2, 61], [5, 2, 86], [7, 3, 96], [5, 4, 16]]) == 344\nassert solution.sellingWood(3, 2, [[3, 1, 37], [4, 2, 86], [3, 1, 96], [3, 2, 68], [1, 3, 88], [1, 3, 99], [1, 2, 26], [2, 3, 70], [1, 3, 61], [4, 2, 50], [4, 2, 35], [3, 2, 28], [1, 1, 43], [1, 2, 52], [2, 1, 12], [2, 3, 90], [2, 3, 95]]) == 258\nassert solution.sellingWood(1, 7, [[1, 7, 9], [1, 5, 55], [2, 5, 73]]) == 55\nassert solution.sellingWood(20, 20, [[5, 21, 79], [21, 21, 62], [16, 6, 1], [4, 4, 13], [3, 5, 85], [14, 13, 7], [12, 12, 93], [19, 20, 30], [19, 7, 52], [1, 5, 34]]) == 2720\nassert solution.sellingWood(19, 13, [[9, 6, 10]]) == 40\nassert solution.sellingWood(5, 12, [[4, 8, 28], [1, 12, 41], [1, 13, 26]]) == 205\nassert solution.sellingWood(20, 8, [[1, 1, 89], [19, 6, 49], [10, 3, 55], [16, 4, 27], [13, 6, 93], [10, 1, 49], [10, 2, 41], [16, 3, 35], [21, 9, 70]]) == 14240\nassert solution.sellingWood(15, 19, [[4, 12, 7], [11, 7, 66], [9, 15, 62], [1, 19, 58], [14, 3, 11], [7, 14, 94], [10, 18, 32], [7, 15, 92], [12, 16, 72], [5, 4, 7], [15, 15, 2], [11, 3, 24], [15, 10, 26], [11, 2, 35]]) == 870\nassert solution.sellingWood(4, 10, [[1, 2, 2], [1, 4, 32], [4, 9, 19], [4, 9, 84], [4, 7, 48], [2, 6, 80], [5, 8, 19]]) == 288\nassert solution.sellingWood(8, 18, [[9, 14, 16], [3, 8, 16], [8, 10, 82], [9, 3, 57], [5, 9, 92], [8, 7, 1], [3, 11, 79], [2, 1, 32], [5, 11, 72], [8, 2, 67], [3, 14, 5], [2, 17, 8], [5, 11, 5], [2, 8, 54], [3, 1, 98], [4, 18, 90], [1, 3, 39], [8, 15, 53], [7, 1, 70]]) == 4104\nassert solution.sellingWood(20, 5, [[4, 2, 61], [7, 3, 101], [5, 3, 62], [8, 5, 34], [9, 4, 46], [13, 1, 40], [14, 2, 43], [15, 4, 54], [5, 1, 36], [12, 3, 89], [6, 6, 31], [1, 2, 32], [1, 5, 20], [15, 2, 64], [7, 4, 35], [4, 2, 24], [12, 1, 101], [2, 4, 58], [18, 4, 81]]) == 1424\nassert solution.sellingWood(8, 21, [[6, 2, 40], [9, 11, 3], [5, 17, 93], [2, 17, 70], [1, 4, 12], [8, 6, 42], [3, 2, 25], [4, 6, 25]]) == 620\nassert solution.sellingWood(11, 15, [[2, 3, 10], [10, 14, 66], [4, 14, 45], [12, 5, 80], [2, 9, 94], [10, 13, 55], [2, 4, 17], [11, 3, 6], [5, 10, 64], [4, 7, 84], [12, 11, 75], [6, 16, 10], [11, 6, 56], [10, 10, 82]]) == 570\nassert solution.sellingWood(9, 18, [[6, 11, 39], [9, 17, 79], [1, 14, 10], [5, 7, 33], [9, 9, 44], [2, 8, 97], [1, 6, 56], [6, 16, 82], [3, 1, 9], [5, 8, 55], [6, 13, 23], [2, 7, 72], [5, 4, 93]]) == 1512\nassert solution.sellingWood(12, 12, [[6, 10, 4], [4, 4, 48], [7, 9, 35], [5, 12, 43]]) == 432\nassert solution.sellingWood(17, 11, [[10, 1, 8], [2, 10, 87], [18, 4, 85], [11, 9, 17], [3, 7, 41], [8, 9, 57], [7, 1, 53], [1, 12, 53], [8, 3, 12], [9, 1, 11], [4, 11, 31], [13, 12, 64], [6, 1, 33], [18, 11, 37], [9, 8, 101], [6, 1, 7], [3, 4, 96], [18, 5, 30], [17, 10, 16], [10, 1, 76], [8, 4, 70]]) == 1427\nassert solution.sellingWood(6, 16, [[7, 13, 13], [4, 12, 65], [4, 5, 40], [6, 5, 62], [3, 3, 85], [7, 4, 96], [4, 10, 52], [6, 15, 26], [1, 15, 100], [1, 6, 54], [6, 3, 52], [7, 9, 8], [7, 5, 51], [5, 6, 72], [1, 14, 100], [2, 14, 73], [2, 13, 84], [4, 17, 48]]) == 850\nassert solution.sellingWood(5, 17, [[4, 17, 79], [1, 2, 90], [2, 18, 32], [6, 18, 84]]) == 3600\nassert solution.sellingWood(19, 17, [[20, 17, 52], [2, 3, 90], [3, 10, 88], [5, 6, 45], [2, 18, 71], [17, 2, 50], [4, 12, 15], [7, 1, 96], [7, 4, 7], [13, 1, 48], [16, 10, 70], [6, 11, 41], [2, 12, 20], [18, 6, 8], [5, 6, 37], [16, 16, 32], [9, 12, 23]]) == 4524\nassert solution.sellingWood(20, 17, [[14, 5, 75], [9, 18, 3], [9, 13, 88], [11, 16, 46], [6, 1, 4], [19, 4, 97], [20, 12, 95], [2, 12, 16], [17, 3, 30], [2, 3, 32], [14, 9, 16], [17, 10, 72], [12, 11, 41], [4, 13, 61], [11, 11, 19], [13, 6, 92], [12, 11, 20], [16, 15, 30], [14, 14, 7], [7, 7, 34], [21, 1, 70]]) == 1624\nassert solution.sellingWood(9, 19, [[7, 18, 57], [10, 4, 40], [2, 19, 77], [4, 16, 94], [8, 7, 44], [5, 14, 26], [8, 2, 91], [6, 16, 101], [5, 17, 26], [10, 1, 78]]) == 819\nassert solution.sellingWood(7, 5, [[4, 2, 17], [4, 2, 30], [1, 2, 60], [5, 3, 21], [2, 3, 77], [2, 6, 36], [8, 1, 101], [6, 1, 31]]) == 871\nassert solution.sellingWood(19, 1, [[17, 2, 32], [6, 1, 32], [7, 2, 72], [19, 1, 74], [16, 2, 41], [2, 2, 30], [3, 1, 43], [17, 2, 60], [18, 2, 100], [5, 1, 67], [20, 2, 74], [2, 1, 66], [17, 1, 99], [18, 2, 18], [18, 1, 79]]) == 594\nassert solution.sellingWood(1, 17, [[2, 17, 56], [2, 6, 23], [1, 6, 59], [2, 2, 94], [2, 18, 55]]) == 118\nassert solution.sellingWood(5, 3, [[5, 2, 29], [2, 3, 87], [1, 2, 67], [2, 2, 1], [5, 1, 68], [1, 1, 31], [6, 4, 22], [6, 1, 1], [1, 4, 45], [5, 2, 88], [6, 2, 83], [3, 1, 87], [3, 3, 73], [5, 4, 84], [5, 3, 34], [4, 2, 24], [3, 3, 15]]) == 490\nassert solution.sellingWood(20, 16, [[10, 6, 83], [18, 12, 2]]) == 332\nassert solution.sellingWood(15, 1, [[13, 2, 64], [15, 1, 59], [7, 2, 17], [8, 1, 95], [4, 1, 67], [15, 2, 54]]) == 201\nassert solution.sellingWood(2, 20, [[3, 14, 39], [1, 2, 101]]) == 2020\nassert solution.sellingWood(21, 7, [[1, 1, 59], [3, 6, 67], [17, 2, 54], [21, 6, 73]]) == 8673\nassert solution.sellingWood(9, 7, [[7, 3, 74], [10, 6, 65], [5, 4, 8], [6, 7, 78], [7, 4, 4], [3, 1, 13], [4, 5, 13], [7, 5, 49], [4, 1, 39], [9, 5, 94], [5, 2, 38], [9, 1, 12], [1, 8, 92], [9, 2, 10], [7, 3, 67], [9, 3, 60], [2, 2, 51], [10, 6, 65], [6, 1, 2], [7, 8, 29], [3, 5, 62]]) == 690\nassert solution.sellingWood(18, 10, [[17, 8, 73], [17, 5, 17], [2, 10, 100], [18, 7, 53], [7, 8, 54], [12, 7, 40], [16, 2, 84], [7, 5, 52], [5, 11, 59], [14, 4, 45], [13, 8, 78], [7, 11, 38], [3, 1, 1]]) == 900\nassert solution.sellingWood(11, 21, [[6, 12, 69]]) == 69\nassert solution.sellingWood(21, 11, [[14, 3, 7], [9, 9, 98], [6, 3, 71], [10, 8, 47], [1, 12, 18], [18, 12, 49], [22, 11, 99], [9, 8, 22]]) == 639\nassert solution.sellingWood(11, 4, [[2, 4, 96], [12, 2, 88], [3, 4, 84], [8, 4, 54], [3, 2, 82], [5, 2, 27]]) == 588\nassert solution.sellingWood(16, 8, [[11, 8, 11], [9, 4, 48], [8, 6, 80], [15, 5, 86], [16, 5, 84], [11, 4, 16], [4, 2, 31], [15, 6, 83]]) == 496\nassert solution.sellingWood(3, 10, [[4, 10, 33], [4, 3, 39], [4, 9, 5], [2, 9, 9], [2, 5, 19], [4, 3, 2], [4, 9, 24], [3, 8, 77], [1, 6, 72], [3, 8, 23], [4, 6, 60], [4, 4, 8], [3, 9, 76], [2, 10, 63]]) == 216\nassert solution.sellingWood(1, 14, [[1, 13, 42], [2, 10, 53], [1, 3, 36], [2, 6, 12], [1, 11, 67], [1, 5, 34], [1, 10, 22], [1, 15, 51], [2, 11, 16], [2, 13, 98], [2, 1, 84], [1, 3, 78], [2, 14, 28], [1, 3, 19]]) == 91\nassert solution.sellingWood(7, 17, [[5, 16, 34], [7, 17, 26], [3, 9, 26], [2, 11, 3], [4, 4, 53], [3, 7, 31], [1, 8, 28], [2, 12, 65], [4, 7, 68], [7, 5, 62], [2, 10, 99], [4, 4, 22], [8, 7, 65]]) == 434\nassert solution.sellingWood(15, 5, [[9, 5, 93]]) == 93\nassert solution.sellingWood(8, 2, [[8, 1, 29], [3, 3, 14], [7, 3, 85], [7, 2, 70], [3, 3, 9], [3, 3, 23], [8, 1, 68], [5, 1, 45], [9, 1, 56], [5, 2, 86], [5, 2, 15], [4, 3, 61], [2, 2, 93], [8, 2, 80], [6, 3, 40], [5, 1, 79], [4, 1, 22], [9, 3, 89], [8, 1, 13]]) == 372\nassert solution.sellingWood(9, 12, [[6, 8, 7], [9, 13, 89], [6, 9, 12], [2, 13, 53]]) == 12\nassert solution.sellingWood(20, 1, [[8, 1, 19], [15, 1, 86], [4, 2, 96], [7, 2, 69], [14, 1, 73], [10, 1, 85], [8, 1, 41], [7, 1, 7], [15, 1, 46], [16, 1, 60], [18, 1, 91], [12, 2, 46], [4, 2, 101], [9, 1, 25], [19, 1, 72], [19, 1, 72], [5, 2, 89]]) == 170\nassert solution.sellingWood(5, 16, [[5, 15, 86], [6, 2, 101], [4, 1, 28], [4, 3, 38], [1, 4, 77], [2, 15, 38], [1, 12, 88], [1, 17, 13]]) == 1540\nassert solution.sellingWood(17, 20, [[1, 8, 28], [12, 14, 72], [10, 10, 32], [8, 5, 83], [5, 21, 52], [15, 14, 2], [5, 9, 98], [2, 9, 55], [6, 14, 28], [5, 13, 65], [2, 8, 26], [13, 14, 89], [16, 16, 57], [9, 6, 49], [7, 18, 99], [9, 18, 80]]) == 952\nassert solution.sellingWood(12, 15, [[3, 2, 65], [10, 9, 87], [12, 11, 46], [6, 14, 1], [4, 8, 15], [3, 2, 63], [5, 15, 21], [7, 6, 81], [2, 12, 47]]) == 1764\nassert solution.sellingWood(1, 15, [[1, 8, 75], [1, 5, 101], [1, 6, 12], [1, 5, 71], [1, 9, 81], [2, 3, 32], [1, 14, 66], [1, 2, 41], [2, 4, 87], [1, 16, 4], [2, 12, 79], [1, 3, 64], [1, 9, 77], [1, 13, 71], [1, 5, 97], [1, 15, 2], [2, 15, 36], [2, 10, 84], [2, 8, 64], [2, 5, 52]]) == 320\nassert solution.sellingWood(1, 5, [[2, 5, 2], [2, 2, 33], [1, 1, 101], [2, 4, 63], [2, 1, 25]]) == 505\nassert solution.sellingWood(3, 20, [[1, 1, 23], [4, 18, 42], [3, 16, 98]]) == 1380\nassert solution.sellingWood(7, 2, [[1, 1, 14], [7, 3, 94], [1, 3, 82], [6, 3, 87], [1, 3, 60], [3, 3, 40], [7, 2, 24], [5, 2, 66], [3, 3, 9], [3, 1, 85], [6, 1, 91], [2, 3, 80], [1, 2, 83]]) == 581\nassert solution.sellingWood(15, 14, [[4, 11, 87]]) == 261\nassert solution.sellingWood(4, 19, [[5, 5, 81]]) == 0\nassert solution.sellingWood(18, 21, [[2, 6, 5], [12, 12, 38], [8, 18, 74], [18, 11, 30], [12, 19, 66]]) == 163\nassert solution.sellingWood(17, 21, [[12, 4, 49], [12, 8, 50], [7, 21, 97], [6, 4, 71], [5, 8, 87], [14, 21, 7], [11, 13, 33], [14, 7, 76], [10, 4, 44], [10, 4, 1], [6, 3, 20], [2, 13, 97], [8, 17, 22], [3, 13, 83], [4, 8, 18], [13, 3, 100], [8, 5, 84], [13, 1, 81], [10, 16, 88], [4, 19, 32], [18, 8, 21]]) == 1913\nassert solution.sellingWood(9, 10, [[5, 7, 73], [1, 7, 71], [8, 6, 52], [6, 11, 76], [4, 10, 7], [5, 10, 16], [7, 9, 17], [7, 10, 14]]) == 639\nassert solution.sellingWood(5, 6, [[5, 7, 78], [4, 7, 22], [3, 2, 19], [6, 7, 2], [1, 2, 39], [3, 5, 84], [4, 3, 8], [4, 6, 59], [3, 1, 9], [2, 7, 79], [2, 1, 75], [1, 4, 100], [1, 7, 65], [4, 5, 10], [4, 4, 69], [2, 2, 31], [3, 3, 69], [5, 5, 30], [3, 5, 35], [3, 5, 43], [5, 2, 70]]) == 1039\nassert solution.sellingWood(13, 2, [[7, 3, 82], [3, 2, 6], [13, 3, 70], [11, 2, 32]]) == 32\nassert solution.sellingWood(5, 15, [[1, 1, 5], [4, 15, 41], [2, 1, 39]]) == 1245\nassert solution.sellingWood(2, 1, [[2, 2, 63], [1, 2, 91], [3, 1, 35], [1, 2, 5], [2, 2, 25], [2, 1, 95], [3, 1, 59], [1, 1, 18], [2, 1, 86], [1, 1, 2], [3, 1, 54], [3, 1, 11], [2, 2, 97], [3, 1, 21], [2, 2, 42], [2, 1, 8], [1, 1, 62], [3, 2, 12]]) == 124\nassert solution.sellingWood(19, 13, [[8, 5, 85], [3, 1, 22], [7, 13, 43], [11, 7, 41], [12, 10, 39], [15, 4, 22], [10, 13, 62], [17, 9, 16], [20, 13, 18], [1, 5, 25]]) == 1766\nassert solution.sellingWood(8, 12, [[2, 12, 43], [5, 8, 43], [4, 4, 20], [2, 8, 39], [4, 11, 68], [3, 5, 48], [6, 10, 68], [5, 10, 54], [6, 13, 10], [9, 5, 12], [9, 2, 71], [6, 11, 72], [2, 1, 20], [7, 9, 80], [8, 2, 56], [9, 2, 78], [1, 10, 42], [8, 1, 11]]) == 960\nassert solution.sellingWood(2, 6, [[1, 1, 72]]) == 864\nassert solution.sellingWood(20, 15, [[8, 1, 32], [7, 9, 94]]) == 960\nassert solution.sellingWood(17, 18, [[7, 17, 15], [10, 2, 80], [18, 3, 5]]) == 735\nassert solution.sellingWood(7, 16, [[8, 4, 40], [3, 1, 62], [1, 6, 41], [6, 14, 97], [2, 7, 31], [3, 11, 21], [3, 9, 74], [3, 6, 28], [3, 3, 83], [6, 12, 13], [5, 9, 75]]) == 2066\nassert solution.sellingWood(3, 20, [[3, 18, 78], [2, 13, 85], [1, 4, 37], [3, 21, 47], [1, 6, 94], [4, 3, 64], [3, 17, 21], [1, 15, 8], [1, 1, 63], [1, 16, 38], [2, 5, 57], [3, 17, 30], [3, 10, 79], [1, 7, 88], [4, 11, 22], [4, 14, 56], [2, 4, 39], [3, 14, 51], [1, 2, 5]]) == 3780\nassert solution.sellingWood(8, 8, [[5, 3, 70], [8, 2, 81], [4, 3, 10], [4, 2, 46], [8, 2, 15], [4, 8, 24], [7, 6, 25], [1, 8, 2], [6, 1, 13], [9, 7, 31], [4, 1, 57]]) == 912\nassert solution.sellingWood(16, 21, [[9, 3, 61], [4, 6, 31], [10, 9, 72], [14, 6, 38], [3, 2, 13], [7, 10, 84], [13, 11, 50]]) == 687\nassert solution.sellingWood(12, 4, [[2, 4, 41], [12, 2, 35], [11, 4, 56], [13, 2, 48], [2, 2, 55], [2, 3, 33], [9, 1, 47], [8, 3, 66], [10, 1, 71], [2, 2, 60], [12, 4, 52], [5, 3, 75], [11, 3, 56], [6, 5, 92], [11, 2, 33], [9, 5, 56], [5, 5, 22], [11, 4, 73], [6, 2, 11], [5, 2, 38]]) == 720",
  "inefficient_solution": "class Solution:\n    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:\n        self.d = {}\n        self.cache = {}\n        self.cache2 = {}\n        self.cache3 = {}\n        self.cache4 = {}\n        self.prices = prices\n        \n        def dfs(h, w):\n            if h == 0 and w == 0:\n                return 0\n            if (h, w) in self.cache:\n                return self.cache[(h, w)]\n            if (h, w) in self.cache2:\n                return self.cache2[(h, w)]\n            if (h, w) in self.cache3:\n                return self.cache3[(h, w)]\n            if (h, w) in self.cache4:\n                return self.cache4[(h, w)]\n            \n            if (h, w) not in self.d:\n                self.d[h] = {}\n            for i in range(1, h // 2 + 1):\n                self.d[h][w] = max(self.d[h][w], dfs(i, w) + dfs(h - i, w))\n            for i in range(1, w // 2 + 1):\n                self.d[h][w] = max(self.d[h][w], dfs(h, i) + dfs(h, w - i))\n            \n            self.cache[(h, w)] = self.d[h][w]\n            self.cache2[(h // 2, w)] = self.d[h // 2][w]\n            self.cache3[(h, w // 2)] = self.d[h][w // 2]\n            self.cache4[(h // 2, w // 2)] = self.d[h // 2][w // 2]\n            \n            return self.d[h][w]\n        \n        for h, w, p in prices:\n            self.d[h] = self.d.get(h, {})\n            self.d[h][w] = p\n        \n        return dfs(m, n)",
  "is_python": true
}