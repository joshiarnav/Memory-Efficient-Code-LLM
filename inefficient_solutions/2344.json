{
  "problem_idx": 2344,
  "task_name": "Minimum Deletions to Make Array Divisible",
  "markdown_description": "\nYou are given two positive integer arrays `nums` and `numsDivide`. You can delete any number of elements from `nums`.\n\n\nReturn *the **minimum** number of deletions such that the **smallest** element in* `nums` ***divides** all the elements of* `numsDivide`. If this is not possible, return `-1`.\n\n\nNote that an integer `x` divides `y` if `y % x == 0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]\n**Output:** 2\n**Explanation:** \nThe smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.\nWe use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].\nThe smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.\nIt can be shown that 2 is the minimum number of deletions needed.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,3,6], numsDivide = [8,2,6,10]\n**Output:** -1\n**Explanation:** \nWe want the smallest element in nums to divide all the elements of numsDivide.\nThere is no way to delete elements from nums to allow this.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, numsDivide.length <= 105`\n* `1 <= nums[i], numsDivide[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n        x = gcd(*numsDivide)\n        y = min((v for v in nums if x % v == 0), default=0)\n        return sum(v < y for v in nums) if y else -1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minOperations(self, nums, numsDivide):\n        x = gcd(*numsDivide)\n        y = min((v for v in nums if x % v == 0), default=0)\n        return sum(v < y for v in nums) if y else -1\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate random numsDivide list\n    numsDivide = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minOperations(nums, numsDivide)\n\n    return nums, numsDivide, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, numsDivide, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minOperations(nums, numsDivide) == expected_result\n        test_case = f\"assert solution.minOperations({nums}, {numsDivide}) == {expected_result}\"\n        test_case_generator_results.append(test_case)\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minOperations([94, 17, 64], [85, 13, 14, 59, 8, 29]) == -1\nassert solution.minOperations([39, 55, 61, 49, 12, 71, 5, 99], [24, 17, 93, 30, 21, 59, 74, 79, 57, 95]) == -1\nassert solution.minOperations([95, 21, 100, 65, 45, 80], [60, 87, 12, 59, 63]) == -1\nassert solution.minOperations([92, 85], [50, 78, 55, 83]) == -1\nassert solution.minOperations([89, 8], [74, 36, 14, 45, 73, 13]) == -1\nassert solution.minOperations([84, 39, 63, 7, 64], [90, 96, 3, 24, 89, 81, 33]) == -1\nassert solution.minOperations([30, 35, 91, 43], [94, 42, 97, 43, 39]) == -1\nassert solution.minOperations([31, 74, 14, 97, 25, 60, 100], [40, 9, 1, 34, 39, 61, 96, 66, 50, 80]) == -1\nassert solution.minOperations([4, 10, 100], [99, 16, 44]) == -1\nassert solution.minOperations([96, 52, 39, 11, 45, 35, 73, 9], [40, 70, 100, 99, 96, 11, 4, 3, 1]) == -1\nassert solution.minOperations([93, 76, 30, 33, 87, 6], [15, 57, 47, 19, 94, 92, 88, 62]) == -1\nassert solution.minOperations([90, 22, 31, 48, 43, 87, 88, 37, 51, 73], [1, 46, 38]) == -1\nassert solution.minOperations([8, 61, 1, 56, 78, 29], [33, 78, 30, 20, 55, 21, 63, 37, 94, 47]) == 0\nassert solution.minOperations([47, 30], [74, 23, 99, 55]) == -1\nassert solution.minOperations([54, 8, 74, 32, 13, 47, 75, 71, 77], [99, 95, 21, 51, 80, 18, 96]) == -1\nassert solution.minOperations([13, 95, 81, 24, 34, 51, 63, 50], [66, 69, 74, 79, 87]) == -1\nassert solution.minOperations([13, 58, 8, 20, 31, 97, 45, 65, 28], [100, 43, 45, 2, 81, 24, 35, 31]) == -1\nassert solution.minOperations([27, 84, 83, 100, 68, 47, 39, 38, 91], [71, 73, 93, 50, 91, 74, 55, 4, 9]) == -1\nassert solution.minOperations([31, 66, 36, 100, 68], [22, 96, 69, 32, 89, 46, 66, 75, 91, 44]) == -1\nassert solution.minOperations([46, 88, 13, 60, 65, 49, 45, 7, 33, 15], [23, 25, 24]) == -1\nassert solution.minOperations([26, 52, 17, 18, 87], [9, 19, 23, 71, 70]) == -1\nassert solution.minOperations([40, 85, 23, 7, 73, 71, 63, 32, 87, 64], [56, 68, 72, 85, 32]) == -1\nassert solution.minOperations([3, 11, 19, 13, 58, 75, 16, 92, 30, 71], [77, 94, 57, 81, 39]) == -1\nassert solution.minOperations([18, 67, 89, 81, 23, 88], [41, 21, 32, 72]) == -1\nassert solution.minOperations([55, 15, 51, 74], [47, 56]) == -1\nassert solution.minOperations([55, 21], [41, 56, 25, 63, 3, 31, 83, 96, 72]) == -1\nassert solution.minOperations([93, 80, 92, 63, 96], [17, 55, 45, 52, 32, 91]) == -1\nassert solution.minOperations([73, 65], [72, 69, 77, 92, 60, 47, 59, 87]) == -1\nassert solution.minOperations([93, 42, 15, 71, 32, 12, 77, 61, 57, 91], [98, 55, 22, 46, 27]) == -1\nassert solution.minOperations([50, 83, 1], [11, 99, 36, 59, 16, 98, 40, 2, 34, 10]) == 0\nassert solution.minOperations([12, 73, 7, 91, 41, 34, 74, 69, 85], [61, 99, 28, 74, 94]) == -1\nassert solution.minOperations([7, 81, 32, 55, 71, 46, 4], [20, 76, 73, 34, 31, 82, 81]) == -1\nassert solution.minOperations([69, 32, 99, 15], [37, 36, 35, 12, 21, 75, 90]) == -1\nassert solution.minOperations([78, 89, 99, 6, 23], [6, 82]) == -1\nassert solution.minOperations([27, 21, 95, 68, 50, 30, 64, 11], [76, 27, 60, 100]) == -1\nassert solution.minOperations([80, 81, 22, 96, 95], [13, 85, 57]) == -1\nassert solution.minOperations([26, 57, 91, 85, 96], [49, 98, 27, 30, 87]) == -1\nassert solution.minOperations([42, 88, 33, 36, 30, 99, 86, 35, 17], [52, 100, 51, 54, 29]) == -1\nassert solution.minOperations([14, 28, 51, 64, 43], [74, 88, 81, 2, 33, 57, 5, 96, 56, 72]) == -1\nassert solution.minOperations([69, 30, 60, 87], [13, 61, 79, 28, 38, 48, 31, 42, 6]) == -1\nassert solution.minOperations([58, 68, 62, 36, 21, 41], [63, 16, 82, 88, 72, 53]) == -1\nassert solution.minOperations([64, 9, 74, 89, 81, 57, 30, 3, 69], [6, 55, 78, 30, 85, 45]) == -1\nassert solution.minOperations([76, 60, 75, 63, 73, 64, 77, 25, 15], [8, 2, 78]) == -1\nassert solution.minOperations([49, 97, 33, 19, 87, 38, 56, 40, 37, 59], [20, 19, 46, 21, 78, 83]) == -1\nassert solution.minOperations([90, 54], [79, 26, 70, 3, 57, 22]) == -1\nassert solution.minOperations([45, 82, 72, 9, 17, 33, 5, 88, 11], [14, 49, 5, 79, 53, 24, 31, 26]) == -1\nassert solution.minOperations([97, 77], [1, 36, 79, 25, 70, 44, 76, 12]) == -1\nassert solution.minOperations([93, 17, 95, 40, 16, 66, 44], [60, 68, 4, 69]) == -1\nassert solution.minOperations([98, 53], [79, 5]) == -1\nassert solution.minOperations([12, 30, 73], [94, 40, 93, 20, 1, 41, 52, 12, 36]) == -1\nassert solution.minOperations([58, 4, 85, 20, 45, 18, 28, 55, 70], [3, 9, 36, 45]) == -1\nassert solution.minOperations([12, 35, 82, 93, 66, 27, 40, 70, 9], [3, 9]) == -1\nassert solution.minOperations([83, 1, 44], [88, 70, 61]) == 0\nassert solution.minOperations([40, 83, 97, 28, 88], [60, 71, 19, 85, 86, 91, 25, 87]) == -1\nassert solution.minOperations([4, 11, 47, 72, 75, 68, 52, 14, 55, 56], [90, 63, 69, 1, 67, 93, 56, 64]) == -1\nassert solution.minOperations([35, 79, 89, 2, 68, 53, 97, 52, 70, 10], [56, 29, 80, 24, 2, 67, 21, 1]) == -1\nassert solution.minOperations([66, 6, 8, 81, 58, 84, 43, 30, 19, 78], [65, 62, 86]) == -1\nassert solution.minOperations([25, 16, 99], [11, 52, 49, 2, 90]) == -1\nassert solution.minOperations([54, 77, 10, 48, 32, 18, 60, 86, 40, 11], [25, 46, 78, 39]) == -1\nassert solution.minOperations([10, 19, 8, 86, 59], [55, 70, 85, 78]) == -1\nassert solution.minOperations([85, 71, 79, 74, 62, 11, 23], [42, 27, 48, 65, 67, 94, 69, 58, 78]) == -1\nassert solution.minOperations([100, 95, 87, 61, 60, 98], [74, 87, 72, 69, 1, 90, 95, 54]) == -1\nassert solution.minOperations([85, 55, 27, 97, 57], [50, 100, 66, 29, 36, 33]) == -1\nassert solution.minOperations([42, 34, 53, 69, 58, 96], [24, 38, 20]) == -1\nassert solution.minOperations([57, 98, 27, 22, 70, 30, 11, 39, 7, 88], [35, 42, 45, 28, 67, 18, 54]) == -1\nassert solution.minOperations([31, 35, 24, 22, 99, 58, 15, 47], [56, 46, 84, 99, 32, 19, 55, 11, 1, 33]) == -1\nassert solution.minOperations([58, 84, 45], [12, 96, 47, 32, 73, 22, 49, 95]) == -1\nassert solution.minOperations([83, 5, 91, 14, 61, 86, 49, 62, 98, 36], [38, 71, 10, 83, 98, 18, 56, 45, 53]) == -1\nassert solution.minOperations([6, 80, 11, 100, 66, 16, 20, 94, 98], [25, 12]) == -1\nassert solution.minOperations([44, 72, 80, 35, 7, 58, 87], [12, 58, 72, 5, 8, 31]) == -1\nassert solution.minOperations([19, 78, 42], [52, 23, 70, 78, 50, 92, 14]) == -1\nassert solution.minOperations([68, 97, 6, 88, 95, 39, 54], [99, 70, 27, 45, 89, 86, 26, 85]) == -1\nassert solution.minOperations([87, 52, 49], [77, 93, 47, 26, 6, 27, 40, 45, 12, 4]) == -1\nassert solution.minOperations([90, 44], [84, 52, 34, 27, 5, 54, 42, 78, 87, 37]) == -1\nassert solution.minOperations([22, 73, 35, 31, 69], [24, 96, 58, 3, 84, 41]) == -1\nassert solution.minOperations([30, 29, 74, 43, 8, 89], [86, 72, 6, 97, 12, 36, 24, 25]) == -1\nassert solution.minOperations([29, 65, 89, 78, 75], [45, 26, 7, 51, 64, 80]) == -1\nassert solution.minOperations([17, 70], [67, 71, 86, 44, 29]) == -1\nassert solution.minOperations([32, 53], [22, 23, 59, 70, 42, 27, 100, 7, 25]) == -1\nassert solution.minOperations([14, 79, 36, 10, 20, 94, 11], [47, 73, 33, 59, 30, 66]) == -1\nassert solution.minOperations([21, 38, 56, 59, 57], [62, 35, 74, 22, 4, 9, 3]) == -1\nassert solution.minOperations([55, 45, 51, 30, 61, 47, 38, 7, 71, 39], [31, 26, 70, 25, 59, 7, 19]) == -1\nassert solution.minOperations([27, 55, 19, 99, 75], [36, 90, 99, 52]) == -1\nassert solution.minOperations([38, 91, 44, 92, 36, 51, 29, 22, 72], [61, 54, 34, 76, 29, 65]) == -1\nassert solution.minOperations([27, 90, 68, 88, 17], [91, 18]) == -1\nassert solution.minOperations([34, 54, 17, 31, 30, 90], [19, 8, 11, 18, 38, 82, 71]) == -1\nassert solution.minOperations([14, 79, 82, 22, 71, 94, 10, 24, 25], [84, 14, 40, 94, 4]) == -1\nassert solution.minOperations([15, 27, 52], [3, 41, 65, 99]) == -1\nassert solution.minOperations([45, 100, 78, 41, 32, 38, 20], [5, 34, 65]) == -1\nassert solution.minOperations([23, 7, 25], [24, 79, 4, 82, 35, 90, 21, 98, 85]) == -1\nassert solution.minOperations([40, 86, 62, 27, 13], [81, 47, 11, 100, 38, 71, 15, 75, 8]) == -1\nassert solution.minOperations([93, 75, 71, 95, 60, 11], [82, 49, 60, 48, 73, 59]) == -1\nassert solution.minOperations([7, 30, 25], [48, 67, 6, 47, 77, 18, 86, 93, 81]) == -1\nassert solution.minOperations([67, 85, 33], [41, 47, 45, 58, 28, 54]) == -1\nassert solution.minOperations([67, 14, 85, 37, 79, 13, 24, 32, 78, 38], [64, 81, 5]) == -1\nassert solution.minOperations([36, 91, 89, 65, 31, 62, 17], [90, 17, 87, 23, 66, 61]) == -1\nassert solution.minOperations([6, 53, 63, 70, 10, 74, 46, 85], [91, 78, 79, 43, 80, 75]) == -1\nassert solution.minOperations([59, 7, 35, 51, 2, 24, 41, 20, 62, 76], [6, 80]) == 0\nassert solution.minOperations([31, 10, 17, 35, 22], [52, 95]) == -1\nassert solution.minOperations([50, 87, 51], [57, 81]) == -1",
  "inefficient_solution": "class Solution:\n    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:\n        numsDivide = [str(num) + '_' for num in numsDivide]\n        counted_nums = []\n        for num in nums:\n            counted_nums.extend([str(num) + '_' for _ in range(num)])\n        counted_nums_dict = {k:counted_nums.count(k) for k in counted_nums}\n        numsDivide_dict = {k:numsDivide.count(k) for k in numsDivide}\n        result = []\n        for k in counted_nums_dict:\n            if k in numsDivide_dict:\n                gcd_val = 0\n                for div in [int(k.split('_')[0]) for k in numsDivide if k == k.split('_')[0] + '_']:\n                    gcd_val = self.gcd(gcd_val, div)\n                found = False\n                for v in [int(k.split('_')[0]) for k in nums if k == k.split('_')[0] + '_']:\n                    if v % gcd_val == 0:\n                        if k == k.split('_')[0] + '_':\n                            result.append(counted_nums_dict[k] - numsDivide_dict[k])\n                        else:\n                            result.append(counted_nums_dict[k])\n                        found = True\n                        break\n                if not found:\n                    result.append(0)\n        if len(result) == 0:\n            return -1\n        else:\n            return min(result)\n\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        else:\n            return self.gcd(b, a % b)",
  "is_python": true
}