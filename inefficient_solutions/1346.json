{
  "problem_idx": 1346,
  "task_name": "Check If N and Its Double Exist",
  "markdown_description": "\nGiven an array `arr` of integers, check if there exist two indices `i` and `j` such that :\n\n\n* `i != j`\n* `0 <= i, j < arr.length`\n* `arr[i] == 2 * arr[j]`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [10,2,5,3]\n**Output:** true\n**Explanation:** For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [3,1,7,11]\n**Output:** false\n**Explanation:** There is no i and j that satisfy the conditions.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= arr.length <= 500`\n* `-103 <= arr[i] <= 103`\n\n\n",
  "canonical_solution": "class Solution:\n    def checkIfExist(self, arr: List[int]) -> bool:\n        m = {v: i for i, v in enumerate(arr)}\n        return any(v << 1 in m and m[v << 1] != i for i, v in enumerate(arr))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def checkIfExist(self, arr):\n        m = {v: i for i, v in enumerate(arr)}\n        return any(v << 1 in m and m[v << 1] != i for i, v in enumerate(arr))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-1000, 1001), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.checkIfExist(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.checkIfExist(nums) == expected_result\n        print(f\"assert solution.checkIfExist({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.checkIfExist({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.checkIfExist([-937, 684, -76, -888, -360, 325, -514, 41, 118, -990]) == False\nassert solution.checkIfExist([43, 978, -412, 674, 100, 528, 19, 78, -296, 325]) == False\nassert solution.checkIfExist([-641, 176, -788, -471, -815]) == False\nassert solution.checkIfExist([-150, -858, 115, 666, -213, 518, 238]) == False\nassert solution.checkIfExist([-136, 471]) == False\nassert solution.checkIfExist([-384, -677]) == False\nassert solution.checkIfExist([-647, 950, -501, 625, -682, 609, -237, -732, 842, 297]) == False\nassert solution.checkIfExist([302, 18, -90, 682, 48, 528, -59, 0]) == False\nassert solution.checkIfExist([-417, -444, 644]) == False\nassert solution.checkIfExist([-184, -338, -361, -84, -153, 493, 376, 887, -37]) == False\nassert solution.checkIfExist([409, 760, -207, -148]) == False\nassert solution.checkIfExist([132, 705]) == False\nassert solution.checkIfExist([911, 88, 607]) == False\nassert solution.checkIfExist([43, 125, -797, -304, 997, -321]) == False\nassert solution.checkIfExist([-816, 976, 218, -548, 565, 318]) == False\nassert solution.checkIfExist([-619, -515, 303, -686, -122, 751, 218, -699]) == False\nassert solution.checkIfExist([-385, -536, -558, -410, 60, 953, 120, -12]) == True\nassert solution.checkIfExist([-93, -849, 783, 868, 232, 841]) == False\nassert solution.checkIfExist([-65, -861, 246, -172, 187]) == False\nassert solution.checkIfExist([508, -640, 765, 593, -57, -46, 852, -645, -374, -69]) == False\nassert solution.checkIfExist([352, 17, 618]) == False\nassert solution.checkIfExist([280, -110, 889, 724, 632, 254]) == False\nassert solution.checkIfExist([491, 377, 306, 568, -468, 641]) == False\nassert solution.checkIfExist([889, -525, 843, -735, -509]) == False\nassert solution.checkIfExist([-732, -414, 504, -239, 522, 483, -927]) == False\nassert solution.checkIfExist([556, -857, -572, -631, 150, -833]) == False\nassert solution.checkIfExist([-444, 388]) == False\nassert solution.checkIfExist([815, -34, 589, -630, 5, -938, -247, 106, 583, -261]) == False\nassert solution.checkIfExist([-247, -979, -740, -291, 497, 351, 699]) == False\nassert solution.checkIfExist([989, 573, 500, -857, -975, -167]) == False\nassert solution.checkIfExist([944, 426, -848, -787, -595, -403, 476]) == False\nassert solution.checkIfExist([663, -846, -204, 542]) == False\nassert solution.checkIfExist([-245, 567]) == False\nassert solution.checkIfExist([29, -653, 675, -886, -636, -986]) == False\nassert solution.checkIfExist([12, -82, 875, 795, 801, 631, 745, -98]) == False\nassert solution.checkIfExist([670, 347, -768]) == False\nassert solution.checkIfExist([883, -306, -887, -609, -300, 696]) == False\nassert solution.checkIfExist([302, 958]) == False\nassert solution.checkIfExist([634, 994, -904, 647]) == False\nassert solution.checkIfExist([-516, -775, -367]) == False\nassert solution.checkIfExist([863, 152, -132, 502, -822, 66, -446, 538, -724, 606]) == False\nassert solution.checkIfExist([-368, -326, -583, 465, -923, 269, 763]) == False\nassert solution.checkIfExist([-254, -94, -53, 572, -590, -142, -457]) == False\nassert solution.checkIfExist([860, 924, -555, 779, 450, -83]) == False\nassert solution.checkIfExist([855, -984, -617, -137]) == False\nassert solution.checkIfExist([271, -589, -76, -884, 74, 698, -857, -896]) == False\nassert solution.checkIfExist([-657, -274, -607, 64, -69, -926, -418, 864]) == False\nassert solution.checkIfExist([936, -632, 964, 15, -325, 65, -194, -722]) == False\nassert solution.checkIfExist([-430, -994, -520, 207, 473, -438, 674]) == False\nassert solution.checkIfExist([-407, -469, -838, -615, 338, -857, -801, -525, -434]) == False\nassert solution.checkIfExist([1, -355, -125, 839, -522, -144, 221, 50]) == False\nassert solution.checkIfExist([-355, -882, 877, 510, -197, 655, -558]) == False\nassert solution.checkIfExist([-400, -440]) == False\nassert solution.checkIfExist([-499, -43, -985, 667]) == False\nassert solution.checkIfExist([-736, 345, -521, -410, -611, -230, -285, 694]) == False\nassert solution.checkIfExist([-437, 337, -871, 486, -458, 457, -82, -291, 373]) == False\nassert solution.checkIfExist([883, -857, 61, -95, -336, -949, 399, -388]) == False\nassert solution.checkIfExist([706, 633, -977, 85, -271, -11]) == False\nassert solution.checkIfExist([888, -636, -552, -14, 727, 828, 860, -556]) == False\nassert solution.checkIfExist([-852, 389, -440, -173, 997, 212, -130]) == False\nassert solution.checkIfExist([-538, 214, -9, 555, 527, -422, -466, -257, 769, -880]) == False\nassert solution.checkIfExist([-579, 598, -975, -296, -660]) == False\nassert solution.checkIfExist([-270, 175, -926, -904, 65]) == False\nassert solution.checkIfExist([-152, -575, 469, 174, 99, 170, -449, -20, -558, -923]) == False\nassert solution.checkIfExist([-121, -486, 428, 994]) == False\nassert solution.checkIfExist([210, 131, -843, 109, 631, -330, -970, -902]) == False\nassert solution.checkIfExist([-310, -256, -624, -593, 183, -186, 704, -134, 456, 201]) == False\nassert solution.checkIfExist([311, 772, -993, -975, 59, 550, 623, 488, -252, 600]) == False\nassert solution.checkIfExist([-495, -14, 952, 602, 806]) == False\nassert solution.checkIfExist([57, 183]) == False\nassert solution.checkIfExist([476, -118, 399, 312, -224]) == False\nassert solution.checkIfExist([942, -42, 662, 145, -332, -164, 956, -695, 738]) == False\nassert solution.checkIfExist([-550, 953]) == False\nassert solution.checkIfExist([823, -26, 906]) == False\nassert solution.checkIfExist([-236, -543, 203, 257, -285, 843]) == False\nassert solution.checkIfExist([143, -146, -183, -60, -596, -242, 782, -614, -759, 563]) == False\nassert solution.checkIfExist([727, 662, 352, -649, -351, 881, -267]) == False\nassert solution.checkIfExist([-160, -797, 544, 954, 137, 337, -733, -652, 702]) == False\nassert solution.checkIfExist([476, 195, 602, -709, 628, 216]) == False\nassert solution.checkIfExist([-56, -250, 559, 762, 528]) == False\nassert solution.checkIfExist([411, -212, -252, 613, 934, -672, 801, 379]) == False\nassert solution.checkIfExist([933, 713, -219, 504, 689, 494, -690, 657]) == False\nassert solution.checkIfExist([786, 520, -391, -555, -312, 71, -475, 813]) == False\nassert solution.checkIfExist([401, -345, -591, -77, 241, 888, -42]) == False\nassert solution.checkIfExist([980, 808]) == False\nassert solution.checkIfExist([564, -457, 444, -538]) == False\nassert solution.checkIfExist([-203, -677, -946, -482, -888, -461, -369, 793]) == False\nassert solution.checkIfExist([984, -316, 751]) == False\nassert solution.checkIfExist([306, -817, 858]) == False\nassert solution.checkIfExist([285, -632, -844, 523, -650, -613]) == False\nassert solution.checkIfExist([-346, 920, -220, -956, -732]) == False\nassert solution.checkIfExist([-96, 461, 468, -754, -790, -610]) == False\nassert solution.checkIfExist([415, 279, -989, -582]) == False\nassert solution.checkIfExist([31, 704, 563, -458, -454, 953, 625]) == False\nassert solution.checkIfExist([55, 603, 943, -863, 658, -159, 118, -486]) == False\nassert solution.checkIfExist([584, -291, 645, 58, 849]) == False\nassert solution.checkIfExist([962, -942, -608, 799, 509, -869, -366, -152, 870, -903]) == False\nassert solution.checkIfExist([31, -390]) == False\nassert solution.checkIfExist([325, 332]) == False\nassert solution.checkIfExist([997, -965]) == False",
  "inefficient_solution": "class Solution:\n    def checkIfExist(self, arr: List[int]) -> bool:\n        n = len(arr)\n        double_arr = [arr[i] << 1 for i in range(n)]\n        reversed_arr = arr[::-1]\n        tripled_arr = [arr[i] << 1 for i in range(n)]\n        quadrupled_arr = [arr[i] << 2 for i in range(n)]\n        doubled_reversed_arr = [reversed_arr[i] << 1 for i in range(n)]\n        tripled_reversed_arr = [reversed_arr[i] << 1 for i in range(n)]\n        quadrupled_reversed_arr = [reversed_arr[i] << 2 for i in range(n)]\n        all_arrs = arr + double_arr + reversed_arr + tripled_arr + quadrupled_arr + doubled_reversed_arr + tripled_reversed_arr + quadrupled_reversed_arr\n        all_arrs.sort()\n        return any(all_arrs[i] == all_arrs[j] for i in range(n) for j in range(i+1, n))",
  "is_python": true
}