{
  "problem_idx": 1027,
  "task_name": "Longest Arithmetic Subsequence",
  "markdown_description": "\nGiven an array `nums` of integers, return *the length of the longest arithmetic subsequence in* `nums`.\n\n\n**Note** that:\n\n\n* A **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n* A sequence `seq` is arithmetic if `seq[i + 1] - seq[i]` are all the same value (for `0 <= i < seq.length - 1`).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,6,9,12]\n**Output:** 4\n**Explanation:**  The whole array is an arithmetic sequence with steps of length = 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [9,4,7,2,10]\n**Output:** 3\n**Explanation:**  The longest arithmetic subsequence is [4,7,10].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [20,1,15,3,10,5,8]\n**Output:** 4\n**Explanation:**  The longest arithmetic subsequence is [20,15,10,5].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 1000`\n* `0 <= nums[i] <= 500`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestArithSeqLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[1] * 1001 for _ in range(n)]\n        ans = 0\n        for i in range(1, n):\n            for k in range(i):\n                j = nums[i] - nums[k] + 500\n                f[i][j] = max(f[i][j], f[k][j] + 1)\n                ans = max(ans, f[i][j])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def longestArithSeqLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[1] * 1001 for _ in range(n)]\n        ans = 0\n        for i in range(1, n):\n            for k in range(i):\n                j = nums[i] - nums[k] + 500\n                f[i][j] = max(f[i][j], f[k][j] + 1)\n                ans = max(ans, f[i][j])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(2, 501), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestArithSeqLength(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestArithSeqLength(nums) == expected_result\n        print(f\"assert solution.longestArithSeqLength({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestArithSeqLength({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestArithSeqLength([78, 382, 71, 273, 346, 192, 218, 264, 185]) == 2\nassert solution.longestArithSeqLength([388, 292, 322]) == 2\nassert solution.longestArithSeqLength([252, 388, 481, 498, 393, 199, 58, 500, 336]) == 2\nassert solution.longestArithSeqLength([387, 466]) == 2\nassert solution.longestArithSeqLength([46, 255, 160, 378, 393]) == 2\nassert solution.longestArithSeqLength([131, 329, 490, 336, 305, 38, 348, 415, 225, 352]) == 2\nassert solution.longestArithSeqLength([57, 255, 191]) == 2\nassert solution.longestArithSeqLength([151, 345, 442, 78]) == 2\nassert solution.longestArithSeqLength([269, 426, 306, 324, 79, 430, 236, 266]) == 2\nassert solution.longestArithSeqLength([496, 201, 430, 350, 119, 303, 368, 70, 406]) == 2\nassert solution.longestArithSeqLength([350, 184, 173, 470]) == 2\nassert solution.longestArithSeqLength([382, 198, 62, 201, 321, 311, 293, 340, 331]) == 3\nassert solution.longestArithSeqLength([76, 156, 33, 341, 496, 132, 88, 10, 178, 155]) == 2\nassert solution.longestArithSeqLength([260, 191, 177, 426, 139, 15]) == 2\nassert solution.longestArithSeqLength([434, 460, 394, 175]) == 2\nassert solution.longestArithSeqLength([97, 282, 161, 269, 446, 103, 421, 364]) == 2\nassert solution.longestArithSeqLength([122, 91]) == 2\nassert solution.longestArithSeqLength([53, 11, 487, 164, 216, 130, 264, 359, 16, 211]) == 2\nassert solution.longestArithSeqLength([61, 143, 247, 99, 102, 381]) == 2\nassert solution.longestArithSeqLength([320, 97, 236, 114, 209, 477, 252]) == 2\nassert solution.longestArithSeqLength([41, 487, 19, 491, 422]) == 2\nassert solution.longestArithSeqLength([472, 440, 19, 57, 311, 36, 495, 3, 442]) == 2\nassert solution.longestArithSeqLength([250, 136, 75, 141, 79, 257]) == 2\nassert solution.longestArithSeqLength([98, 185]) == 2\nassert solution.longestArithSeqLength([366, 301, 212, 158]) == 2\nassert solution.longestArithSeqLength([65, 90, 423, 190, 352, 200, 206, 162]) == 2\nassert solution.longestArithSeqLength([352, 320, 259, 272, 458, 56, 158, 302, 298, 52]) == 2\nassert solution.longestArithSeqLength([49, 181, 497, 299]) == 2\nassert solution.longestArithSeqLength([267, 78, 454]) == 2\nassert solution.longestArithSeqLength([238, 444, 88, 35, 15, 82, 131, 400, 319]) == 2\nassert solution.longestArithSeqLength([176, 61, 277, 23]) == 2\nassert solution.longestArithSeqLength([226, 122]) == 2\nassert solution.longestArithSeqLength([460, 194, 184, 423, 248, 421, 139, 98]) == 2\nassert solution.longestArithSeqLength([85, 79, 322, 84, 248, 412]) == 3\nassert solution.longestArithSeqLength([115, 264, 498, 64, 334, 96]) == 2\nassert solution.longestArithSeqLength([22, 265, 289, 312, 27, 499, 17, 470]) == 2\nassert solution.longestArithSeqLength([321, 208, 79, 385]) == 2\nassert solution.longestArithSeqLength([159, 16, 45, 243, 74, 48, 287, 271, 68]) == 3\nassert solution.longestArithSeqLength([383, 138, 367, 21, 87, 208]) == 2\nassert solution.longestArithSeqLength([394, 33, 273, 452, 194, 372, 59]) == 2\nassert solution.longestArithSeqLength([35, 149]) == 2\nassert solution.longestArithSeqLength([326, 74, 179, 228, 467, 22, 457, 44, 20, 169]) == 2\nassert solution.longestArithSeqLength([113, 37, 360, 432, 322, 440, 96, 180, 62, 330]) == 2\nassert solution.longestArithSeqLength([100, 325, 278, 289, 470, 306]) == 2\nassert solution.longestArithSeqLength([371, 374, 414, 450, 201, 468, 94]) == 2\nassert solution.longestArithSeqLength([317, 277, 424, 489]) == 2\nassert solution.longestArithSeqLength([278, 332, 261, 178, 124]) == 2\nassert solution.longestArithSeqLength([417, 220, 236, 5, 390]) == 2\nassert solution.longestArithSeqLength([67, 42, 352, 344, 321]) == 2\nassert solution.longestArithSeqLength([80, 217, 188, 425, 28, 461, 285, 429]) == 2\nassert solution.longestArithSeqLength([70, 377, 440, 383, 293, 308]) == 2\nassert solution.longestArithSeqLength([368, 127, 398, 370, 100, 477, 369, 94, 332, 138]) == 2\nassert solution.longestArithSeqLength([62, 71, 290, 212, 420, 307]) == 2\nassert solution.longestArithSeqLength([121, 13, 137, 395, 296, 50]) == 2\nassert solution.longestArithSeqLength([322, 386, 435, 306, 39]) == 2\nassert solution.longestArithSeqLength([166, 342, 498, 473, 78, 139, 426]) == 2\nassert solution.longestArithSeqLength([81, 120, 420, 277]) == 2\nassert solution.longestArithSeqLength([241, 213, 435, 272, 230]) == 2\nassert solution.longestArithSeqLength([158, 408]) == 2\nassert solution.longestArithSeqLength([33, 375, 37, 418, 476]) == 2\nassert solution.longestArithSeqLength([44, 291, 78, 356, 8, 455, 96]) == 2\nassert solution.longestArithSeqLength([404, 187, 105, 324, 173, 109, 94, 214]) == 2\nassert solution.longestArithSeqLength([12, 484, 261, 183]) == 2\nassert solution.longestArithSeqLength([474, 42, 349, 465, 121]) == 2\nassert solution.longestArithSeqLength([221, 55, 202, 273, 50, 218]) == 2\nassert solution.longestArithSeqLength([171, 313, 412]) == 2\nassert solution.longestArithSeqLength([60, 185, 143, 45, 493, 233]) == 2\nassert solution.longestArithSeqLength([332, 444, 86, 12, 315, 362, 52, 174]) == 2\nassert solution.longestArithSeqLength([70, 201, 481, 304, 157, 79, 313, 94, 52]) == 2\nassert solution.longestArithSeqLength([500, 234, 477, 259, 264, 84, 454, 409, 301]) == 3\nassert solution.longestArithSeqLength([397, 95, 401]) == 2\nassert solution.longestArithSeqLength([413, 253, 119, 159, 288, 185, 427, 371]) == 2\nassert solution.longestArithSeqLength([100, 371, 293, 144, 96]) == 2\nassert solution.longestArithSeqLength([384, 88, 227, 245, 156, 45, 188, 369]) == 2\nassert solution.longestArithSeqLength([40, 318, 325]) == 2\nassert solution.longestArithSeqLength([310, 425, 486]) == 2\nassert solution.longestArithSeqLength([270, 137, 430, 365]) == 2\nassert solution.longestArithSeqLength([425, 181, 479, 88, 472]) == 2\nassert solution.longestArithSeqLength([438, 448, 274]) == 2\nassert solution.longestArithSeqLength([181, 412, 418, 156]) == 2\nassert solution.longestArithSeqLength([411, 440, 6]) == 2\nassert solution.longestArithSeqLength([386, 174, 447, 417, 222, 172]) == 2\nassert solution.longestArithSeqLength([212, 148, 462, 349]) == 2\nassert solution.longestArithSeqLength([378, 159, 63, 252, 169, 424, 41, 51]) == 2\nassert solution.longestArithSeqLength([286, 396, 470]) == 2\nassert solution.longestArithSeqLength([189, 404, 87, 135]) == 2\nassert solution.longestArithSeqLength([312, 209, 20, 33, 40, 264, 355, 494]) == 2\nassert solution.longestArithSeqLength([329, 106, 147, 103, 353, 292, 108, 160]) == 2\nassert solution.longestArithSeqLength([408, 100, 57, 397, 145, 484, 2, 240, 407, 450]) == 2\nassert solution.longestArithSeqLength([176, 108, 375, 19]) == 2\nassert solution.longestArithSeqLength([260, 334, 165, 330, 355, 289, 432]) == 2\nassert solution.longestArithSeqLength([245, 232, 242]) == 2\nassert solution.longestArithSeqLength([75, 40, 327, 319, 44, 132, 104, 451, 445]) == 2\nassert solution.longestArithSeqLength([321, 59, 186, 90, 364, 169, 361, 152]) == 3\nassert solution.longestArithSeqLength([384, 428]) == 2\nassert solution.longestArithSeqLength([475, 327]) == 2\nassert solution.longestArithSeqLength([126, 234, 471, 116, 203, 202, 34]) == 2\nassert solution.longestArithSeqLength([439, 165, 145, 222]) == 2\nassert solution.longestArithSeqLength([261, 296, 447, 65, 237, 395, 181, 198, 294, 394]) == 2\nassert solution.longestArithSeqLength([449, 316, 190, 310, 168, 156, 15]) == 2",
  "inefficient_solution": "class Solution:\n    def longestArithSeqLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        f = [[1] * 1001 for _ in range(n)]  # O(n*500) memory allocation\n        ans = 0\n        for i in range(1, n):\n            temp_dict = {}  # O(1) lookup, O(n) memory allocation\n            for k in range(i):\n                j = nums[i] - nums[k] + 500\n                f[i][j] = max(f[i][j], f[k][j] + 1)\n                ans = max(ans, f[i][j])\n                temp_list = []  # O(1) lookup, O(n) memory allocation\n                for key in temp_dict:\n                    temp_list.append(key)\n                for key in temp_list:\n                    try:\n                        temp_dict[key + 1] += 1  # O(1) lookup, O(1) update\n                    except:\n                        temp_dict[key + 1] = 1  # O(1) lookup, O(1) update\n                temp_dict[temp_list[-1]] -= 1  # O(1) lookup, O(1) update\n                if temp_dict[temp_list[-1]] == 0:\n                    del temp_dict[temp_list[-1]]  # O(1) lookup, O(1) update\n        return ans",
  "is_python": true
}