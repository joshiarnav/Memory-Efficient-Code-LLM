{
  "problem_idx": 730,
  "task_name": "Count Different Palindromic Subsequences",
  "markdown_description": "\nGiven a string s, return *the number of different non-empty palindromic subsequences in* `s`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\nA subsequence of a string is obtained by deleting zero or more characters from the string.\n\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\n\nTwo sequences `a1, a2, ...` and `b1, b2, ...` are different if there is some `i` for which `ai != bi`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bccb\"\n**Output:** 6\n**Explanation:** The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"\n**Output:** 104860361\n**Explanation:** There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s[i]` is either `'a'`, `'b'`, `'c'`, or `'d'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        dp = [[[0] * 4 for _ in range(n)] for _ in range(n)]\n        for i, c in enumerate(s):\n            dp[i][i][ord(c) - ord('a')] = 1\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                j = i + l - 1\n                for c in 'abcd':\n                    k = ord(c) - ord('a')\n                    if s[i] == s[j] == c:\n                        dp[i][j][k] = 2 + sum(dp[i + 1][j - 1])\n                    elif s[i] == c:\n                        dp[i][j][k] = dp[i][j - 1][k]\n                    elif s[j] == c:\n                        dp[i][j][k] = dp[i + 1][j][k]\n                    else:\n                        dp[i][j][k] = dp[i + 1][j - 1][k]\n        return sum(dp[0][-1]) % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        dp = [[[0] * 4 for _ in range(n)] for _ in range(n)]\n        for i, c in enumerate(s):\n            dp[i][i][ord(c) - ord('a')] = 1\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                j = i + l - 1\n                for c in 'abcd':\n                    k = ord(c) - ord('a')\n                    if s[i] == s[j] == c:\n                        dp[i][j][k] = 2 + sum(dp[i + 1][j - 1])\n                    elif s[i] == c:\n                        dp[i][j][k] = dp[i][j - 1][k]\n                    elif s[j] == c:\n                        dp[i][j][k] = dp[i + 1][j][k]\n                    else:\n                        dp[i][j][k] = dp[i + 1][j - 1][k]\n        return sum(dp[0][-1]) % mod\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = \"\".join(random.choices(\"abcd\", k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countPalindromicSubsequences(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countPalindromicSubsequences(s) == expected_result\n        print(f'assert solution.countPalindromicSubsequences(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.countPalindromicSubsequences(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countPalindromicSubsequences(\"adada\") == 9\nassert solution.countPalindromicSubsequences(\"c\") == 1\nassert solution.countPalindromicSubsequences(\"acddabb\") == 10\nassert solution.countPalindromicSubsequences(\"ad\") == 2\nassert solution.countPalindromicSubsequences(\"ad\") == 2\nassert solution.countPalindromicSubsequences(\"ddbdd\") == 7\nassert solution.countPalindromicSubsequences(\"abadc\") == 6\nassert solution.countPalindromicSubsequences(\"dcac\") == 5\nassert solution.countPalindromicSubsequences(\"bbdaaaaa\") == 8\nassert solution.countPalindromicSubsequences(\"bdadccc\") == 8\nassert solution.countPalindromicSubsequences(\"cccdacba\") == 12\nassert solution.countPalindromicSubsequences(\"abcbbabbcd\") == 25\nassert solution.countPalindromicSubsequences(\"abba\") == 6\nassert solution.countPalindromicSubsequences(\"bdcdc\") == 7\nassert solution.countPalindromicSubsequences(\"caaabccbb\") == 15\nassert solution.countPalindromicSubsequences(\"abcdcdaad\") == 20\nassert solution.countPalindromicSubsequences(\"cdbd\") == 5\nassert solution.countPalindromicSubsequences(\"ddacdcc\") == 10\nassert solution.countPalindromicSubsequences(\"ccdaa\") == 5\nassert solution.countPalindromicSubsequences(\"baccab\") == 14\nassert solution.countPalindromicSubsequences(\"dadcbcdab\") == 28\nassert solution.countPalindromicSubsequences(\"aa\") == 2\nassert solution.countPalindromicSubsequences(\"cbdcda\") == 9\nassert solution.countPalindromicSubsequences(\"db\") == 2\nassert solution.countPalindromicSubsequences(\"cddabc\") == 10\nassert solution.countPalindromicSubsequences(\"bbaadca\") == 9\nassert solution.countPalindromicSubsequences(\"aacc\") == 4\nassert solution.countPalindromicSubsequences(\"ddbbbdc\") == 10\nassert solution.countPalindromicSubsequences(\"cca\") == 3\nassert solution.countPalindromicSubsequences(\"dabbdca\") == 14\nassert solution.countPalindromicSubsequences(\"baac\") == 4\nassert solution.countPalindromicSubsequences(\"dbcadbaa\") == 16\nassert solution.countPalindromicSubsequences(\"dcaab\") == 5\nassert solution.countPalindromicSubsequences(\"dbdaaaca\") == 10\nassert solution.countPalindromicSubsequences(\"adbaa\") == 7\nassert solution.countPalindromicSubsequences(\"d\") == 1\nassert solution.countPalindromicSubsequences(\"bd\") == 2\nassert solution.countPalindromicSubsequences(\"abacccccac\") == 17\nassert solution.countPalindromicSubsequences(\"cdcdcc\") == 11\nassert solution.countPalindromicSubsequences(\"c\") == 1\nassert solution.countPalindromicSubsequences(\"acbdc\") == 7\nassert solution.countPalindromicSubsequences(\"cabbbd\") == 6\nassert solution.countPalindromicSubsequences(\"bccaab\") == 10\nassert solution.countPalindromicSubsequences(\"cbcdab\") == 10\nassert solution.countPalindromicSubsequences(\"aaa\") == 3\nassert solution.countPalindromicSubsequences(\"bbb\") == 3\nassert solution.countPalindromicSubsequences(\"ccaacbccba\") == 26\nassert solution.countPalindromicSubsequences(\"dbadaacc\") == 11\nassert solution.countPalindromicSubsequences(\"bababaca\") == 16\nassert solution.countPalindromicSubsequences(\"bdcd\") == 5\nassert solution.countPalindromicSubsequences(\"adcdabdbc\") == 25\nassert solution.countPalindromicSubsequences(\"dbadadcbcd\") == 35\nassert solution.countPalindromicSubsequences(\"dadcbccadd\") == 36\nassert solution.countPalindromicSubsequences(\"d\") == 1\nassert solution.countPalindromicSubsequences(\"baddddaccb\") == 26\nassert solution.countPalindromicSubsequences(\"cad\") == 3\nassert solution.countPalindromicSubsequences(\"ddaadd\") == 10\nassert solution.countPalindromicSubsequences(\"bcacbcb\") == 15\nassert solution.countPalindromicSubsequences(\"da\") == 2\nassert solution.countPalindromicSubsequences(\"dd\") == 2\nassert solution.countPalindromicSubsequences(\"dcbbacc\") == 10\nassert solution.countPalindromicSubsequences(\"cdbbcda\") == 13\nassert solution.countPalindromicSubsequences(\"adadacbccd\") == 22\nassert solution.countPalindromicSubsequences(\"bccbdac\") == 12\nassert solution.countPalindromicSubsequences(\"cdddac\") == 10\nassert solution.countPalindromicSubsequences(\"d\") == 1\nassert solution.countPalindromicSubsequences(\"cccdbdcbcb\") == 26\nassert solution.countPalindromicSubsequences(\"caadd\") == 5\nassert solution.countPalindromicSubsequences(\"add\") == 3\nassert solution.countPalindromicSubsequences(\"aacacbccd\") == 13\nassert solution.countPalindromicSubsequences(\"dcddcc\") == 9\nassert solution.countPalindromicSubsequences(\"cadcadbddb\") == 20\nassert solution.countPalindromicSubsequences(\"bd\") == 2\nassert solution.countPalindromicSubsequences(\"acdcaccac\") == 23\nassert solution.countPalindromicSubsequences(\"a\") == 1\nassert solution.countPalindromicSubsequences(\"badcaaacb\") == 26\nassert solution.countPalindromicSubsequences(\"daabb\") == 5\nassert solution.countPalindromicSubsequences(\"c\") == 1\nassert solution.countPalindromicSubsequences(\"d\") == 1\nassert solution.countPalindromicSubsequences(\"accb\") == 4\nassert solution.countPalindromicSubsequences(\"d\") == 1\nassert solution.countPalindromicSubsequences(\"bcada\") == 6\nassert solution.countPalindromicSubsequences(\"abdbbdc\") == 10\nassert solution.countPalindromicSubsequences(\"adcd\") == 5\nassert solution.countPalindromicSubsequences(\"dbadcd\") == 9\nassert solution.countPalindromicSubsequences(\"ca\") == 2\nassert solution.countPalindromicSubsequences(\"bdbaacacc\") == 12\nassert solution.countPalindromicSubsequences(\"bdbd\") == 6\nassert solution.countPalindromicSubsequences(\"cac\") == 4\nassert solution.countPalindromicSubsequences(\"dbacacadcc\") == 29\nassert solution.countPalindromicSubsequences(\"dddaba\") == 7\nassert solution.countPalindromicSubsequences(\"dddacd\") == 8\nassert solution.countPalindromicSubsequences(\"cadaabcdbc\") == 31\nassert solution.countPalindromicSubsequences(\"dabbb\") == 5\nassert solution.countPalindromicSubsequences(\"dbdcabaac\") == 19\nassert solution.countPalindromicSubsequences(\"cdccdddca\") == 17\nassert solution.countPalindromicSubsequences(\"acccaddaba\") == 18\nassert solution.countPalindromicSubsequences(\"b\") == 1\nassert solution.countPalindromicSubsequences(\"a\") == 1\nassert solution.countPalindromicSubsequences(\"dcd\") == 4",
  "inefficient_solution": "class Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        dp = [[[0 for _ in range(4)] for _ in range(n)] for _ in range(n)]\n        for i, c in enumerate(s):\n            dp[i][i] = [[0] * 4 for _ in range(1000)]\n            for k in range(4):\n                if c == chr(ord('a') + k):\n                    dp[i][i][k] = 1\n                dp[i][i][k].append(0)\n                dp[i][i][k].append(0)\n        for l in range(2, n + 1):\n            for i in range(n - l + 1):\n                j = i + l - 1\n                for c in 'abcd':\n                    k = ord(c) - ord('a')\n                    tmp = [0] * 1000\n                    for d in 'abcd':\n                        if d == c:\n                            tmp[0] += dp[i + 1][j - 1][ord(d) - ord('a')]\n                        else:\n                            tmp[0] += dp[i + 1][j - 1][ord(d) - ord('a')][0]\n                    for d in 'abcd':\n                        if d == c:\n                            tmp[1] += dp[i][j - 1][ord(d) - ord('a')]\n                        else:\n                            tmp[1] += dp[i][j - 1][ord(d) - ord('a')][0]\n                    for d in 'abcd':\n                        if d == c:\n                            tmp[2] += dp[i + 1][j][ord(d) - ord('a')]\n                        else:\n                            tmp[2] += dp[i + 1][j][ord(d) - ord('a')][0]\n                    if c == s[i] == s[j]:\n                        dp[i][j][k] = 2 + sum(tmp)\n                    elif s[i] == c:\n                        dp[i][j][k] = sum(tmp)\n                    elif s[j] == c:\n                        dp[i][j][k] = sum(tmp)\n                    else:\n                        dp[i][j][k] = sum(tmp)\n                    for c2 in 'abcd':\n                        k2 = ord(c2) - ord('a')\n                        dp[i][j][k][0] += dp[i + 1][j - 1][k2][0]\n                        dp[i][j][k][1] += dp[i][j - 1][k2][0]\n                        dp[i][j][k][2] += dp[i + 1][j][k2][0]\n                        dp[i][j][k][3] += dp[i + 1][j - 1][k2][1]\n                        dp[i][j][k][4] += dp[i][j - 1][k2][1]\n                        dp[i][j][k][5] += dp[i + 1][j][k2][1]\n        return sum(dp[0][-1][0]) % mod",
  "is_python": true
}