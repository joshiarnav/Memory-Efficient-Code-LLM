{
  "problem_idx": 659,
  "task_name": "Split Array into Consecutive Subsequences",
  "markdown_description": "\nYou are given an integer array `nums` that is **sorted in non-decreasing order**.\n\n\nDetermine if it is possible to split `nums` into **one or more subsequences** such that **both** of the following conditions are true:\n\n\n* Each subsequence is a **consecutive increasing sequence** (i.e. each integer is **exactly one** more than the previous integer).\n* All subsequences have a length of `3` **or more**.\n\n\nReturn `true` *if you can split* `nums` *according to the above conditions, or* `false` *otherwise*.\n\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., `[1,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,3,2]` is not).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,3,4,5]\n**Output:** true\n**Explanation:** nums can be split into the following subsequences:\n[**1**,**2**,**3**,3,4,5] --> 1, 2, 3\n[1,2,3,**3**,**4**,**5**] --> 3, 4, 5\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,3,4,4,5,5]\n**Output:** true\n**Explanation:** nums can be split into the following subsequences:\n[**1**,**2**,**3**,3,**4**,4,**5**,5] --> 1, 2, 3, 4, 5\n[1,2,3,**3**,4,**4**,5,**5**] --> 3, 4, 5\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,4,5]\n**Output:** false\n**Explanation:** It is impossible to split nums into consecutive increasing subsequences of length 3 or more.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-1000 <= nums[i] <= 1000`\n* `nums` is sorted in **non-decreasing** order.\n\n\n",
  "canonical_solution": "class Solution:\n    def isPossible(self, nums: List[int]) -> bool:\n        d = defaultdict(list)\n        for v in nums:\n            if h := d[v - 1]:\n                heappush(d[v], heappop(h) + 1)\n            else:\n                heappush(d[v], 1)\n        return all(not v or v and v[0] > 2 for v in d.values())\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def isPossible(self, nums):\n        d = defaultdict(list)\n        for v in nums:\n            if h := d[v - 1]:\n                heappush(d[v], heappop(h) + 1)\n            else:\n                heappush(d[v], 1)\n        return all(not v or v and v[0] > 2 for v in d.values())\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a sorted list of integers in non-decreasing order\n    nums = sorted(random.sample(range(-1000, 1001), random.randint(1, 11)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isPossible(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isPossible(nums) == expected_result\n        print(f\"assert solution.isPossible({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isPossible({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isPossible([-956, -750, -738, -655, -562, -210, 157, 190, 234, 267, 802]) == False\nassert solution.isPossible([663]) == False\nassert solution.isPossible([-715, -487, -473, -316, -252, -103, 644, 749, 895, 998]) == False\nassert solution.isPossible([-935, -679, -535, -396, -138, 377, 504, 726, 861]) == False\nassert solution.isPossible([-993, -873, -832, -85, -76, -16, 409, 853]) == False\nassert solution.isPossible([-154, 343]) == False\nassert solution.isPossible([-518, 22, 256, 750]) == False\nassert solution.isPossible([-230, -65, 890]) == False\nassert solution.isPossible([-984, -800, -380, -347, -198, -117, 17, 377, 419, 458, 696]) == False\nassert solution.isPossible([-719]) == False\nassert solution.isPossible([-871, -693, -43, -16, 131, 252, 276, 702, 750]) == False\nassert solution.isPossible([-985, -375, -234, -229, 193, 550, 932]) == False\nassert solution.isPossible([-867, -628, -537, -482, 281, 571, 637, 721, 737, 851, 859]) == False\nassert solution.isPossible([-710, -699, -585, -526, -439, -379, 561, 569, 862, 988]) == False\nassert solution.isPossible([-151]) == False\nassert solution.isPossible([-274]) == False\nassert solution.isPossible([-440, -437, -166, -157, 39, 504, 681, 771, 936]) == False\nassert solution.isPossible([-874, 98, 519]) == False\nassert solution.isPossible([-530, -334, -109, 101, 141, 174, 228, 311, 498, 798]) == False\nassert solution.isPossible([-932, -928, -865, -843, -769, -529, -377, -127, 343, 568, 756]) == False\nassert solution.isPossible([-434, -93]) == False\nassert solution.isPossible([183]) == False\nassert solution.isPossible([-831, -679, -595, 93, 149, 371, 405, 844]) == False\nassert solution.isPossible([-316, 591]) == False\nassert solution.isPossible([-896, -755, -741, -706, -87, 927]) == False\nassert solution.isPossible([407]) == False\nassert solution.isPossible([-1000, -928, -794, -611, -57, 32, 384, 525, 653]) == False\nassert solution.isPossible([-868, -813, -797, -692, -651, 263, 648, 959]) == False\nassert solution.isPossible([-682, -641, -577, -422, 44, 157, 301, 457, 577, 584, 646]) == False\nassert solution.isPossible([-526, -517, 200, 378, 397]) == False\nassert solution.isPossible([-684, -350, -185, 32, 882]) == False\nassert solution.isPossible([-628, -224, 40, 183, 324, 602, 615, 676]) == False\nassert solution.isPossible([-665, -581, -179, -78, 32, 124, 517, 988]) == False\nassert solution.isPossible([-987, -914, -567, -549, -398, -303]) == False\nassert solution.isPossible([886]) == False\nassert solution.isPossible([-804, -579, 337, 562]) == False\nassert solution.isPossible([-772, -205, 60, 290, 358, 392, 430]) == False\nassert solution.isPossible([-889, 12]) == False\nassert solution.isPossible([-827, 498, 601]) == False\nassert solution.isPossible([-951, -950, 41, 261, 459, 510, 635, 907, 912]) == False\nassert solution.isPossible([-165]) == False\nassert solution.isPossible([-862, -817, -562, -530, -495, 85, 641, 768]) == False\nassert solution.isPossible([-476, 691]) == False\nassert solution.isPossible([-993, -761, -668, -313, 131, 144, 289, 324, 753]) == False\nassert solution.isPossible([651]) == False\nassert solution.isPossible([-952, -648, -625, -396, 81, 291, 379, 813]) == False\nassert solution.isPossible([-482, -288]) == False\nassert solution.isPossible([-68, 191]) == False\nassert solution.isPossible([-422, -276, 898]) == False\nassert solution.isPossible([-796, -428, -403, -301, -203, 342, 464, 788]) == False\nassert solution.isPossible([-288, -125, 539]) == False\nassert solution.isPossible([699, 788, 849]) == False\nassert solution.isPossible([-423, 83, 158, 374, 422, 937, 962]) == False\nassert solution.isPossible([-658, -489, -107, 191, 438, 563, 643, 820, 825, 874]) == False\nassert solution.isPossible([-863, -623, -146, -130, -120, 4, 146, 241, 804]) == False\nassert solution.isPossible([-776, 427, 558, 777, 901]) == False\nassert solution.isPossible([-988, -518, -300, -85, -77, -15, 510, 765, 912, 919]) == False\nassert solution.isPossible([-573, -391]) == False\nassert solution.isPossible([-192, -188, 481, 691]) == False\nassert solution.isPossible([-694, -602, 161, 237, 548, 570, 790, 846, 881]) == False\nassert solution.isPossible([-758, -374, 996]) == False\nassert solution.isPossible([-922, -608, -313, 385, 645, 951]) == False\nassert solution.isPossible([-926, -668, -464, -293, -280, -19, 58, 309, 679]) == False\nassert solution.isPossible([-783, -475, -346, 285, 728]) == False\nassert solution.isPossible([-760, -552, -335, -209, 11, 57, 95, 158, 288, 968]) == False\nassert solution.isPossible([-692, -429]) == False\nassert solution.isPossible([-690, -620, -525, -398, -240, -121, 394, 479, 663, 760, 859]) == False\nassert solution.isPossible([-669, -655, -587, -397, 336, 642, 713]) == False\nassert solution.isPossible([-972, -823, -242, -86, -48, -18, 305, 355, 592, 866, 897]) == False\nassert solution.isPossible([-673, -378, 34, 80, 190, 385, 556, 789, 835]) == False\nassert solution.isPossible([-139, 25, 317, 321, 811, 816, 885, 915]) == False\nassert solution.isPossible([-696, -534, -394, -232, 64, 65, 220, 336, 596, 636, 779]) == False\nassert solution.isPossible([-174, -14, 82, 882]) == False\nassert solution.isPossible([-998, -765, -740, 360]) == False\nassert solution.isPossible([-840, -490, -433, -269, -171, 490, 815, 826, 840]) == False\nassert solution.isPossible([-896, -878, -812, -376, 547]) == False\nassert solution.isPossible([-387, -345, 123, 987]) == False\nassert solution.isPossible([-910, -884, -332, 114, 167, 827, 992]) == False\nassert solution.isPossible([-663, -580, -562, -490, -183, 65, 213]) == False\nassert solution.isPossible([-532, -412, -294, -175, -36, 376, 736, 982]) == False\nassert solution.isPossible([-489, -324, -264, -76, 9, 145, 277, 443, 890]) == False\nassert solution.isPossible([-829, -708, -236, -136, 301, 309, 760, 841]) == False\nassert solution.isPossible([-966, -936, -653, -508, -483, -214, 108, 199, 497, 503]) == False\nassert solution.isPossible([-156, 104, 401]) == False\nassert solution.isPossible([-832, -588, -450]) == False\nassert solution.isPossible([-121, 3, 997]) == False\nassert solution.isPossible([-852, -644, -549, -280, 696]) == False\nassert solution.isPossible([-915, -598, -412, -27, 167, 328, 409, 458]) == False\nassert solution.isPossible([16]) == False\nassert solution.isPossible([-998, -527, -221, 99, 337, 985]) == False\nassert solution.isPossible([151, 368, 404, 442, 479, 541, 947]) == False\nassert solution.isPossible([-652, -435, -428, 24, 623, 718, 721]) == False\nassert solution.isPossible([-888, -375, -311, -272, 94, 538]) == False\nassert solution.isPossible([-827, -729, 149, 304, 423, 968, 992]) == False\nassert solution.isPossible([-960, -917, -902, -785, -234, -147, 123, 257, 732]) == False\nassert solution.isPossible([-33, 977]) == False\nassert solution.isPossible([-533, -239, -233, 149, 202, 538, 635, 761, 931]) == False\nassert solution.isPossible([-996, -959, -816, -573, -338, -214, 155, 313, 491]) == False\nassert solution.isPossible([-811, -138, -129, 164, 177, 188, 690, 733, 956]) == False\nassert solution.isPossible([-972, -837, -793, -521, -42, -27, 81, 216, 302, 362, 884]) == False",
  "inefficient_solution": "class Solution:\n    def isPossible(self, nums: List[int]) -> bool:\n        d = defaultdict(list)\n        for v in nums:\n            tmp = []\n            for h in d[v - 1][:]:\n                if h > 2:\n                    heappush(tmp, h + 1)\n                else:\n                    break\n            for h in tmp:\n                heappush(d[v], h)\n            if not d[v - 1]:\n                heappush(d[v], 1)\n            else:\n                heappush(d[v], heappop(d[v - 1]) + 1)\n            if d[v - 1]:\n                heappush(d[v], heappop(d[v - 1]) + 1)\n            else:\n                heappush(d[v], 1)\n        return all(not v or v and v[0] > 2 for v in d.values())",
  "is_python": true
}