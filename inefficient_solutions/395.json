{
  "problem_idx": 395,
  "task_name": "Longest Substring with At Least K Repeating Characters",
  "markdown_description": "\nGiven a string `s` and an integer `k`, return *the length of the longest substring of* `s` *such that the frequency of each character in this substring is greater than or equal to* `k`.\n\n\nif no such substring exists, return 0.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aaabb\", k = 3\n**Output:** 3\n**Explanation:** The longest substring is \"aaa\", as 'a' is repeated 3 times.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ababbc\", k = 2\n**Output:** 5\n**Explanation:** The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s` consists of only lowercase English letters.\n* `1 <= k <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        def dfs(l, r):\n            cnt = Counter(s[l : r + 1])\n            split = next((c for c, v in cnt.items() if v < k), '')\n            if not split:\n                return r - l + 1\n            i = l\n            ans = 0\n            while i <= r:\n                while i <= r and s[i] == split:\n                    i += 1\n                if i >= r:\n                    break\n                j = i\n                while j <= r and s[j] != split:\n                    j += 1\n                t = dfs(i, j - 1)\n                ans = max(ans, t)\n                i = j\n            return ans\n\n        return dfs(0, len(s) - 1)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        def dfs(l, r):\n            cnt = Counter(s[l : r + 1])\n            split = next((c for c, v in cnt.items() if v < k), '')\n            if not split:\n                return r - l + 1\n            i = l\n            ans = 0\n            while i <= r:\n                while i <= r and s[i] == split:\n                    i += 1\n                if i >= r:\n                    break\n                j = i\n                while j <= r and s[j] != split:\n                    j += 1\n                t = dfs(i, j - 1)\n                ans = max(ans, t)\n                i = j\n            return ans\n\n        return dfs(0, len(s) - 1)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n\n    # Generate a random k value\n    k = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestSubstring(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestSubstring(s, k) == expected_result\n        print(f\"assert solution.longestSubstring('{s}', {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestSubstring('{s}', {k}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestSubstring('frtov', 8) == 0\nassert solution.longestSubstring('nagbsejbv', 10) == 0\nassert solution.longestSubstring('aswgmotakn', 10) == 0\nassert solution.longestSubstring('bugw', 10) == 0\nassert solution.longestSubstring('mfewvxgikt', 3) == 0\nassert solution.longestSubstring('meobcqe', 4) == 0\nassert solution.longestSubstring('hduakdz', 2) == 0\nassert solution.longestSubstring('if', 5) == 0\nassert solution.longestSubstring('abryhlxp', 2) == 0\nassert solution.longestSubstring('jpnxzmsrax', 1) == 10\nassert solution.longestSubstring('pjonkfp', 7) == 0\nassert solution.longestSubstring('ixq', 6) == 0\nassert solution.longestSubstring('lcnuvmf', 10) == 0\nassert solution.longestSubstring('j', 7) == 0\nassert solution.longestSubstring('coxo', 6) == 0\nassert solution.longestSubstring('ncarttopqd', 9) == 0\nassert solution.longestSubstring('wstzgrecp', 1) == 9\nassert solution.longestSubstring('mt', 3) == 0\nassert solution.longestSubstring('zmx', 8) == 0\nassert solution.longestSubstring('gryfsnaqh', 10) == 0\nassert solution.longestSubstring('ocogzhamhq', 3) == 0\nassert solution.longestSubstring('hppfczaie', 9) == 0\nassert solution.longestSubstring('ppwau', 6) == 0\nassert solution.longestSubstring('qpzlk', 3) == 0\nassert solution.longestSubstring('youizvk', 3) == 0\nassert solution.longestSubstring('gakblcfmpu', 5) == 0\nassert solution.longestSubstring('p', 1) == 1\nassert solution.longestSubstring('jphwpp', 6) == 0\nassert solution.longestSubstring('mxdhtobps', 4) == 0\nassert solution.longestSubstring('oduvg', 6) == 0\nassert solution.longestSubstring('ieuuy', 1) == 5\nassert solution.longestSubstring('czzt', 1) == 4\nassert solution.longestSubstring('xgf', 4) == 0\nassert solution.longestSubstring('nqugv', 5) == 0\nassert solution.longestSubstring('ypultuze', 5) == 0\nassert solution.longestSubstring('ggujoxpcm', 7) == 0\nassert solution.longestSubstring('ry', 10) == 0\nassert solution.longestSubstring('lgrnvw', 1) == 6\nassert solution.longestSubstring('ymz', 8) == 0\nassert solution.longestSubstring('srdnywz', 8) == 0\nassert solution.longestSubstring('arkqijva', 8) == 0\nassert solution.longestSubstring('bzee', 6) == 0\nassert solution.longestSubstring('ndiojr', 4) == 0\nassert solution.longestSubstring('grubcomvq', 4) == 0\nassert solution.longestSubstring('mjuxzoju', 2) == 0\nassert solution.longestSubstring('uqaby', 1) == 5\nassert solution.longestSubstring('hgfpcr', 6) == 0\nassert solution.longestSubstring('yezc', 9) == 0\nassert solution.longestSubstring('ay', 5) == 0\nassert solution.longestSubstring('qd', 8) == 0\nassert solution.longestSubstring('ubms', 10) == 0\nassert solution.longestSubstring('scqoduoax', 5) == 0\nassert solution.longestSubstring('frwnz', 9) == 0\nassert solution.longestSubstring('mwzaoct', 6) == 0\nassert solution.longestSubstring('hodxor', 3) == 0\nassert solution.longestSubstring('sfdbxt', 10) == 0\nassert solution.longestSubstring('lev', 5) == 0\nassert solution.longestSubstring('sax', 8) == 0\nassert solution.longestSubstring('stqzlkwza', 6) == 0\nassert solution.longestSubstring('dvdzkqyut', 2) == 0\nassert solution.longestSubstring('dae', 7) == 0\nassert solution.longestSubstring('lvg', 6) == 0\nassert solution.longestSubstring('smzwwfk', 5) == 0\nassert solution.longestSubstring('hxskmk', 7) == 0\nassert solution.longestSubstring('bfejplmy', 8) == 0\nassert solution.longestSubstring('n', 5) == 0\nassert solution.longestSubstring('dxlfg', 9) == 0\nassert solution.longestSubstring('tbwyslhy', 4) == 0\nassert solution.longestSubstring('pejao', 1) == 5\nassert solution.longestSubstring('wngv', 2) == 0\nassert solution.longestSubstring('ksprhkb', 7) == 0\nassert solution.longestSubstring('huwxrkox', 9) == 0\nassert solution.longestSubstring('txcsdzr', 10) == 0\nassert solution.longestSubstring('iujk', 4) == 0\nassert solution.longestSubstring('u', 5) == 0\nassert solution.longestSubstring('andqrjc', 7) == 0\nassert solution.longestSubstring('vszvqzdxn', 7) == 0\nassert solution.longestSubstring('fjeonvvt', 4) == 0\nassert solution.longestSubstring('n', 10) == 0\nassert solution.longestSubstring('ilbfmpoe', 8) == 0\nassert solution.longestSubstring('zqmxklrhc', 4) == 0\nassert solution.longestSubstring('zwpb', 1) == 4\nassert solution.longestSubstring('jgqpffxai', 5) == 0\nassert solution.longestSubstring('dgloz', 5) == 0\nassert solution.longestSubstring('rwapc', 5) == 0\nassert solution.longestSubstring('lkgs', 1) == 4\nassert solution.longestSubstring('lhz', 1) == 3\nassert solution.longestSubstring('pwnhlpazw', 7) == 0\nassert solution.longestSubstring('urjm', 9) == 0\nassert solution.longestSubstring('stdq', 8) == 0\nassert solution.longestSubstring('ylhdwh', 5) == 0\nassert solution.longestSubstring('rsfshi', 10) == 0\nassert solution.longestSubstring('ovp', 10) == 0\nassert solution.longestSubstring('wq', 6) == 0\nassert solution.longestSubstring('etwrn', 2) == 0\nassert solution.longestSubstring('mqiviopw', 6) == 0\nassert solution.longestSubstring('tkpbt', 4) == 0\nassert solution.longestSubstring('kupgumpjy', 6) == 0\nassert solution.longestSubstring('onuovgg', 10) == 0\nassert solution.longestSubstring('negwajz', 4) == 0",
  "inefficient_solution": "class Solution:\n    def longestSubstring(self, s: str, k: int) -> int:\n        def dfs(l, r):\n            cnt = {c: 0 for c in set(s[l : r + 1])}\n            for c in s[l : r + 1]:\n                cnt[c] += 1\n            split = next((c for c, v in cnt.items() if v < k), '')\n            if not split:\n                return r - l + 1\n            i = l\n            ans = 0\n            while i <= r:\n                while i <= r and s[i] == split:\n                    i += 1\n                if i >= r:\n                    break\n                j = i\n                seen = set()\n                while j <= r and s[j] != split:\n                    seen.add(s[j])\n                    j += 1\n                t = dfs(i, j - 1)\n                ans = max(ans, t)\n                i = j\n            return ans\n\n        cache = {}\n        def helper(idx):\n            if idx in cache:\n                return cache[idx]\n            result = dfs(idx, len(s) - 1)\n            cache[idx] = result\n            return result\n\n        result = 0\n        for i in range(len(s)):\n            result = max(result, helper(i))\n        return result",
  "is_python": true
}