{
  "problem_idx": 2491,
  "task_name": "Divide Players Into Teams of Equal Skill",
  "markdown_description": "\nYou are given a positive integer array `skill` of **even** length `n` where `skill[i]` denotes the skill of the `ith` player. Divide the players into `n / 2` teams of size `2` such that the total skill of each team is **equal**.\n\n\nThe **chemistry** of a team is equal to the **product** of the skills of the players on that team.\n\n\nReturn *the sum of the **chemistry** of all the teams, or return* `-1` *if there is no way to divide the players into teams such that the total skill of each team is equal.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** skill = [3,2,5,1,3,4]\n**Output:** 22\n**Explanation:** \nDivide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.\nThe sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** skill = [3,4]\n**Output:** 12\n**Explanation:** \nThe two players form a team with a total skill of 7.\nThe chemistry of the team is 3 * 4 = 12.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** skill = [1,1,2,3]\n**Output:** -1\n**Explanation:** \nThere is no way to divide the players into teams such that the total skill of each team is equal.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= skill.length <= 105`\n* `skill.length` is even.\n* `1 <= skill[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def dividePlayers(self, skill: List[int]) -> int:\n        skill.sort()\n        t = skill[0] + skill[-1]\n        i, j = 0, len(skill) - 1\n        ans = 0\n        while i < j:\n            if skill[i] + skill[j] != t:\n                return -1\n            ans += skill[i] * skill[j]\n            i, j = i + 1, j - 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def dividePlayers(self, skill: List[int]) -> int:\n        skill.sort()\n        t = skill[0] + skill[-1]\n        i, j = 0, len(skill) - 1\n        ans = 0\n        while i < j:\n            if skill[i] + skill[j] != t:\n                return -1\n            ans += skill[i] * skill[j]\n            i, j = i + 1, j - 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    skill = random.sample(range(1, 1001), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.dividePlayers(skill)\n\n    return skill, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        skill, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.dividePlayers(skill) == expected_result\n        if expected_result != -1:\n            print(f\"assert solution.dividePlayers({skill}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.dividePlayers({skill}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.dividePlayers([609, 730]) == 444570\nassert solution.dividePlayers([524, 592, 897]) == 470028\nassert solution.dividePlayers([161, 704]) == 113344\nassert solution.dividePlayers([91, 724]) == 65884\nassert solution.dividePlayers([424, 465, 841]) == 356584\nassert solution.dividePlayers([624, 807]) == 503568\nassert solution.dividePlayers([793, 887]) == 703391\nassert solution.dividePlayers([161, 756, 829]) == 133469\nassert solution.dividePlayers([574, 905]) == 519470\nassert solution.dividePlayers([43, 688, 961]) == 41323\nassert solution.dividePlayers([161, 813]) == 130893\nassert solution.dividePlayers([454, 557, 597]) == 271038\nassert solution.dividePlayers([291, 300, 511]) == 148701\nassert solution.dividePlayers([15, 134, 970]) == 14550\nassert solution.dividePlayers([70, 617]) == 43190\nassert solution.dividePlayers([317, 684]) == 216828\nassert solution.dividePlayers([526, 588]) == 309288\nassert solution.dividePlayers([642, 852]) == 546984\nassert solution.dividePlayers([596, 681, 782]) == 466072\nassert solution.dividePlayers([807, 832]) == 671424\nassert solution.dividePlayers([405, 829]) == 335745\nassert solution.dividePlayers([576, 685, 819]) == 471744\nassert solution.dividePlayers([32, 151]) == 4832\nassert solution.dividePlayers([723, 996]) == 720108\nassert solution.dividePlayers([636, 705, 951]) == 604836\nassert solution.dividePlayers([6, 585]) == 3510\nassert solution.dividePlayers([55, 93, 435]) == 23925\nassert solution.dividePlayers([30, 976]) == 29280\nassert solution.dividePlayers([254, 353, 814]) == 206756",
  "inefficient_solution": "class Solution:\n    def dividePlayers(self, skill: List[int]) -> int:\n        skill.sort()\n        teamCount = len(skill) // 2\n        teamSize = 2\n        teamSkills = [[] for _ in range(teamCount)]\n        chemistries = []\n        \n        for i in range(len(skill) - 1, -1, -1):\n            for j in range(i - 1, -1, -1):\n                totalSkill = skill[i] + skill[j]\n                if totalSkill == 2 * (skill[0] + skill[-1]):\n                    teamSkills[i // 2].append(skill[j])\n                    teamSkills[i // 2].append(skill[i])\n                    chemistries.append(skill[j] * skill[i])\n                    break\n            else:\n                continue\n            break\n        else:\n            return -1\n        \n        sumChemistries = 0\n        for team in teamSkills:\n            team.sort()\n            if team[0] + team[-1] != 2 * (skill[0] + skill[-1]):\n                return -1\n            sumChemistries += team[0] * team[-1]\n        \n        return sumChemistries",
  "is_python": true
}