{
  "problem_idx": 2412,
  "task_name": "Minimum Money Required Before Transactions",
  "markdown_description": "\nYou are given a **0-indexed** 2D integer array `transactions`, where `transactions[i] = [costi, cashbacki]`.\n\n\nThe array describes transactions, where each transaction must be completed exactly once in **some order**. At any given moment, you have a certain amount of `money`. In order to complete transaction `i`, `money >= costi` must hold true. After performing a transaction, `money` becomes `money - costi + cashbacki`.\n\n\nReturn *the minimum amount of* `money` *required before any transaction so that all of the transactions can be completed **regardless of the order** of the transactions.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** transactions = [[2,1],[5,0],[4,2]]\n**Output:** 10\n**Explanation:**Starting with money = 10, the transactions can be performed in any order.\nIt can be shown that starting with money < 10 will fail to complete all transactions in some order.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** transactions = [[3,0],[0,3]]\n**Output:** 3\n**Explanation:**\n- If transactions are in the order [[3,0],[0,3]], the minimum money required to complete the transactions is 3.\n- If transactions are in the order [[0,3],[3,0]], the minimum money required to complete the transactions is 0.\nThus, starting with money = 3, the transactions can be performed in any order.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= transactions.length <= 105`\n* `transactions[i].length == 2`\n* `0 <= costi, cashbacki <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumMoney(self, transactions: List[List[int]]) -> int:\n        s = sum(max(0, a - b) for a, b in transactions)\n        ans = 0\n        for a, b in transactions:\n            if a > b:\n                ans = max(ans, s + b)\n            else:\n                ans = max(ans, s + a)\n        return ans\n",
  "test_case_generator": "\nimport random\n\n# Define the Solution class\nclass Solution:\n    def minimumMoney(self, transactions):\n        s = sum(max(0, a - b) for a, b in transactions)\n        ans = 0\n        for a, b in transactions:\n            if a > b:\n                ans = max(ans, s + b)\n            else:\n                ans = max(ans, s + a)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random transactions list\n    transactions = []\n    for _ in range(random.randint(1, 10)):\n        cost = random.randint(0, 100)\n        cashback = random.randint(0, 100)\n        transactions.append([cost, cashback])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumMoney(transactions)\n\n    return transactions, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        transactions, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumMoney(transactions) == expected_result\n        print(f\"assert solution.minimumMoney({transactions}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumMoney({transactions}) == {expected_result}\") # Construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # Generate 100 test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumMoney([[12, 28], [69, 23], [94, 56]]) == 140\nassert solution.minimumMoney([[3, 51], [8, 9], [16, 30], [31, 42], [72, 10], [55, 70], [70, 45], [90, 47], [99, 5]]) == 279\nassert solution.minimumMoney([[89, 23], [23, 63], [79, 100], [39, 41], [29, 8], [44, 13], [26, 63], [10, 69], [84, 88], [17, 75]]) == 202\nassert solution.minimumMoney([[49, 36], [99, 69], [20, 54], [31, 47], [57, 72], [69, 11]]) == 170\nassert solution.minimumMoney([[27, 40], [46, 38], [66, 5], [58, 7], [50, 42], [89, 52]]) == 217\nassert solution.minimumMoney([[57, 95], [42, 95], [11, 55], [47, 3], [4, 89], [55, 27], [27, 80]]) == 129\nassert solution.minimumMoney([[73, 6], [40, 86], [85, 19], [37, 62], [35, 10], [10, 27], [88, 99]]) == 246\nassert solution.minimumMoney([[49, 61], [78, 79], [81, 7], [64, 49], [72, 60], [29, 64], [51, 65]]) == 179\nassert solution.minimumMoney([[39, 24]]) == 39\nassert solution.minimumMoney([[45, 9], [16, 98], [86, 43], [81, 2], [93, 50], [93, 99]]) == 294\nassert solution.minimumMoney([[47, 98]]) == 47\nassert solution.minimumMoney([[56, 48], [16, 74], [47, 52], [40, 47], [100, 16], [16, 32]]) == 140\nassert solution.minimumMoney([[20, 7], [39, 90]]) == 52\nassert solution.minimumMoney([[56, 40], [86, 29], [21, 100], [77, 30], [8, 48], [2, 3], [30, 11], [48, 15], [26, 38], [99, 60]]) == 271\nassert solution.minimumMoney([[62, 20], [89, 76], [53, 68], [32, 20], [38, 99], [6, 41], [14, 85], [80, 77]]) == 147\nassert solution.minimumMoney([[89, 65], [17, 9], [16, 27], [29, 97], [48, 13], [83, 57], [9, 54], [90, 43]]) == 205\nassert solution.minimumMoney([[43, 93]]) == 43\nassert solution.minimumMoney([[59, 27], [62, 18], [24, 29], [48, 92], [46, 20], [93, 89], [40, 44], [79, 66]]) == 208\nassert solution.minimumMoney([[35, 54], [9, 55]]) == 35\nassert solution.minimumMoney([[63, 5], [26, 24], [40, 89], [69, 86], [27, 21]]) == 135\nassert solution.minimumMoney([[35, 92], [88, 45], [86, 15], [99, 80], [47, 9], [32, 10], [4, 94], [70, 18], [17, 99]]) == 325\nassert solution.minimumMoney([[22, 81], [24, 34], [94, 95], [43, 12], [4, 59], [43, 38]]) == 130\nassert solution.minimumMoney([[57, 51], [50, 37], [4, 76], [63, 37], [80, 55], [50, 87]]) == 125\nassert solution.minimumMoney([[25, 100], [43, 63]]) == 43\nassert solution.minimumMoney([[43, 16], [49, 6], [75, 22]]) == 145\nassert solution.minimumMoney([[85, 43], [22, 29], [3, 46], [81, 0], [46, 1]]) == 211\nassert solution.minimumMoney([[67, 0], [77, 94], [34, 12], [9, 13], [72, 57], [47, 53]]) == 181\nassert solution.minimumMoney([[65, 82]]) == 65\nassert solution.minimumMoney([[14, 26], [8, 6], [73, 36], [85, 23], [12, 23], [78, 94], [47, 80], [27, 64], [59, 35]]) == 203\nassert solution.minimumMoney([[77, 15], [2, 39], [46, 87], [86, 78]]) == 148\nassert solution.minimumMoney([[13, 24], [8, 44], [37, 6]]) == 44\nassert solution.minimumMoney([[81, 49], [66, 0], [96, 5], [27, 56], [13, 27]]) == 238\nassert solution.minimumMoney([[57, 49], [27, 44]]) == 57\nassert solution.minimumMoney([[45, 73], [68, 15], [97, 11], [53, 87], [37, 8], [75, 99], [71, 49], [57, 53]]) == 269\nassert solution.minimumMoney([[100, 56], [39, 92]]) == 100\nassert solution.minimumMoney([[96, 13]]) == 96\nassert solution.minimumMoney([[8, 2]]) == 8\nassert solution.minimumMoney([[39, 70], [7, 1], [67, 36], [38, 51], [44, 63], [99, 26], [31, 36]]) == 154\nassert solution.minimumMoney([[86, 77], [62, 37], [93, 89], [18, 3], [43, 12], [87, 98], [73, 28], [95, 83]]) == 230\nassert solution.minimumMoney([[23, 61]]) == 23\nassert solution.minimumMoney([[38, 0], [63, 43], [20, 12]]) == 109\nassert solution.minimumMoney([[29, 43]]) == 29\nassert solution.minimumMoney([[86, 58], [0, 16], [31, 74], [72, 8], [82, 67], [35, 7]]) == 202\nassert solution.minimumMoney([[93, 39], [98, 84], [73, 40]]) == 185\nassert solution.minimumMoney([[61, 96], [24, 33], [70, 51], [33, 56], [75, 35], [42, 89], [30, 57], [94, 63], [65, 76], [48, 89]]) == 155\nassert solution.minimumMoney([[52, 18], [75, 58], [32, 78], [51, 91], [20, 2], [4, 90], [77, 87], [7, 13]]) == 146\nassert solution.minimumMoney([[61, 90], [59, 16], [75, 19], [99, 68]]) == 198\nassert solution.minimumMoney([[45, 76]]) == 45\nassert solution.minimumMoney([[38, 16], [33, 23], [32, 20], [28, 60], [95, 76], [7, 16]]) == 139\nassert solution.minimumMoney([[25, 80], [71, 6], [99, 35], [46, 77], [69, 45], [66, 25]]) == 240\nassert solution.minimumMoney([[63, 32], [48, 19], [79, 62], [2, 84], [51, 84], [2, 37], [80, 56], [0, 7], [100, 80]]) == 201\nassert solution.minimumMoney([[72, 56], [26, 73], [34, 37], [30, 65], [52, 95], [7, 13], [54, 20], [8, 82], [99, 53]]) == 152\nassert solution.minimumMoney([[91, 32], [6, 89], [27, 46], [43, 1], [45, 60], [12, 98]]) == 146\nassert solution.minimumMoney([[90, 92], [80, 84], [95, 28], [44, 69], [70, 89]]) == 157\nassert solution.minimumMoney([[65, 97], [33, 83], [49, 82], [39, 52], [42, 80], [2, 63]]) == 65\nassert solution.minimumMoney([[64, 62], [36, 93], [50, 28]]) == 86\nassert solution.minimumMoney([[34, 25], [62, 91], [58, 13], [61, 24], [65, 50], [7, 85], [77, 48], [44, 13], [79, 81], [5, 67]]) == 245\nassert solution.minimumMoney([[95, 20], [85, 25], [98, 52], [66, 20]]) == 279\nassert solution.minimumMoney([[64, 1], [31, 51], [15, 41], [6, 27], [95, 28], [32, 17], [9, 35], [43, 88], [78, 17], [6, 66]]) == 249\nassert solution.minimumMoney([[94, 97], [62, 15], [5, 28], [35, 71], [65, 31], [44, 2], [98, 24], [99, 7], [61, 48], [94, 18]]) == 472\nassert solution.minimumMoney([[35, 26], [78, 56], [58, 35], [95, 52], [100, 92], [16, 50], [44, 59], [38, 68], [34, 98], [99, 24]]) == 272\nassert solution.minimumMoney([[58, 29], [40, 89], [97, 37]]) == 129\nassert solution.minimumMoney([[53, 40], [17, 30], [21, 77], [37, 39], [96, 2], [85, 35]]) == 197\nassert solution.minimumMoney([[58, 49], [77, 61], [83, 93]]) == 108\nassert solution.minimumMoney([[63, 22], [51, 70], [30, 87], [40, 60], [60, 54], [70, 11], [37, 52], [8, 68]]) == 160\nassert solution.minimumMoney([[36, 100], [48, 58], [74, 20], [83, 74], [78, 39], [59, 44], [80, 94], [68, 43], [7, 97], [72, 46]]) == 248\nassert solution.minimumMoney([[97, 62], [1, 59], [46, 3], [98, 62], [87, 94], [45, 84], [99, 54], [41, 31]]) == 256\nassert solution.minimumMoney([[70, 20], [40, 72], [91, 49], [39, 69], [30, 53], [20, 17], [4, 94], [70, 13]]) == 201\nassert solution.minimumMoney([[81, 12], [37, 11], [63, 66], [90, 18]]) == 230\nassert solution.minimumMoney([[0, 80], [69, 58], [17, 96], [79, 27], [0, 81], [52, 75], [100, 92], [54, 14]]) == 203\nassert solution.minimumMoney([[95, 6], [73, 86], [100, 65], [59, 77], [16, 62], [25, 54], [26, 92]]) == 197\nassert solution.minimumMoney([[3, 19], [8, 3]]) == 8\nassert solution.minimumMoney([[21, 82], [34, 76], [32, 97], [57, 34], [93, 8]]) == 142\nassert solution.minimumMoney([[99, 82], [10, 42], [60, 53], [9, 11], [34, 50], [81, 58], [63, 87], [64, 25]]) == 168\nassert solution.minimumMoney([[25, 2], [40, 88], [21, 19], [43, 95], [38, 7], [46, 37], [66, 30], [2, 47], [39, 66]]) == 144\nassert solution.minimumMoney([[42, 62], [99, 29], [42, 22]]) == 132\nassert solution.minimumMoney([[84, 57], [56, 90], [89, 68], [88, 43], [51, 95], [3, 88], [51, 46]]) == 166\nassert solution.minimumMoney([[26, 72], [44, 87], [18, 76]]) == 44\nassert solution.minimumMoney([[49, 48], [6, 14]]) == 49\nassert solution.minimumMoney([[22, 53], [4, 87], [60, 49], [32, 63], [32, 16], [94, 17], [55, 37], [57, 35], [27, 80], [86, 83]]) == 230\nassert solution.minimumMoney([[29, 43], [22, 92]]) == 29\nassert solution.minimumMoney([[97, 73], [66, 57], [6, 88], [70, 71], [19, 47], [54, 31], [98, 79], [76, 71], [31, 32]]) == 159\nassert solution.minimumMoney([[82, 21], [92, 89], [46, 73], [85, 6], [41, 65], [32, 51], [44, 100]]) == 232\nassert solution.minimumMoney([[32, 79], [88, 84], [7, 75]]) == 88\nassert solution.minimumMoney([[11, 23], [28, 14], [30, 92]]) == 44\nassert solution.minimumMoney([[88, 47], [49, 32], [28, 7], [84, 39], [90, 73], [45, 22]]) == 237\nassert solution.minimumMoney([[25, 84], [14, 12], [44, 35], [63, 76], [0, 83], [82, 73], [70, 14], [47, 95], [59, 17], [5, 42]]) == 191\nassert solution.minimumMoney([[87, 39], [68, 28], [68, 43]]) == 156\nassert solution.minimumMoney([[56, 46], [84, 23]]) == 117\nassert solution.minimumMoney([[64, 12], [20, 51], [70, 49], [63, 70], [68, 97], [61, 81], [19, 65], [24, 100], [9, 89], [97, 40]]) == 198\nassert solution.minimumMoney([[12, 26], [36, 30]]) == 36\nassert solution.minimumMoney([[78, 26], [78, 89], [74, 92], [8, 46], [3, 64], [81, 75], [0, 66], [97, 40], [15, 18], [4, 51]]) == 193\nassert solution.minimumMoney([[13, 38], [76, 51], [81, 11], [73, 66], [71, 50], [99, 6], [56, 85], [56, 84], [50, 36], [86, 81]]) == 316\nassert solution.minimumMoney([[71, 55], [99, 15], [9, 86], [13, 60], [1, 74], [29, 80], [57, 37]]) == 175\nassert solution.minimumMoney([[27, 86], [32, 50]]) == 32\nassert solution.minimumMoney([[64, 42], [94, 48], [1, 60]]) == 116\nassert solution.minimumMoney([[49, 47], [40, 43], [82, 18], [84, 45], [52, 39], [37, 55], [80, 27], [0, 34], [100, 68]]) == 271\nassert solution.minimumMoney([[45, 46], [36, 51], [7, 27], [26, 94], [49, 53], [92, 37], [15, 58]]) == 104\nassert solution.minimumMoney([[6, 87], [84, 66], [54, 94], [9, 41], [62, 9]]) == 137\nassert solution.minimumMoney([[39, 56]]) == 39",
  "inefficient_solution": "class Solution:\n    def minimumMoney(self, transactions):\n        transactions_copy = transactions[:]\n\n        transaction_count = len(transactions_copy)\n\n        # Step 1: Create a copy of the input array\n        transactions_copy_copy = transactions_copy[:]\n\n        # Step 2: Calculate the sum of the differences between costs and cashbacks\n        total_difference = 0\n        for transaction in transactions_copy_copy:\n            total_difference += max(0, transaction[0] - transaction[1])\n\n        # Step 3: Initialize the min money needed\n        min_money_needed = 0\n\n        # Step 4: Iterate through the array, updating the min money needed\n        for transaction in transactions_copy_copy:\n            if transaction[0] > transaction[1]:\n                min_money_needed = max(min_money_needed, total_difference + transaction[1])\n            else:\n                min_money_needed = max(min_money_needed, total_difference + transaction[0])\n\n        return min_money_needed",
  "is_python": true
}