{
  "problem_idx": 475,
  "task_name": "Heaters",
  "markdown_description": "\nWinter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\n\n\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\u00a0\n\n\nGiven the positions of `houses` and `heaters` on a horizontal line, return *the minimum radius standard of heaters\u00a0so that those heaters could cover all houses.*\n\n\n**Notice** that\u00a0all the `heaters` follow your radius standard, and the warm radius will the same.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** houses = [1,2,3], heaters = [2]\n**Output:** 1\n**Explanation:** The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** houses = [1,2,3,4], heaters = [1,4]\n**Output:** 1\n**Explanation:** The two heaters were placed at positions 1 and 4. We need to use a radius 1 standard, then all the houses can be warmed.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** houses = [1,5], heaters = [2]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= houses.length, heaters.length <= 3 * 104`\n* `1 <= houses[i], heaters[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        houses.sort()\n        heaters.sort()\n\n        def check(r):\n            m, n = len(houses), len(heaters)\n            i = j = 0\n            while i < m:\n                if j >= n:\n                    return False\n                mi = heaters[j] - r\n                mx = heaters[j] + r\n                if houses[i] < mi:\n                    return False\n                if houses[i] > mx:\n                    j += 1\n                else:\n                    i += 1\n            return True\n\n        left, right = 0, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        houses.sort()\n        heaters.sort()\n\n        def check(r):\n            m, n = len(houses), len(heaters)\n            i = j = 0\n            while i < m:\n                if j >= n:\n                    return False\n                mi = heaters[j] - r\n                mx = heaters[j] + r\n                if houses[i] < mi:\n                    return False\n                if houses[i] > mx:\n                    j += 1\n                else:\n                    i += 1\n            return True\n\n        left, right = 0, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers lists\n    houses = random.sample(range(1, 101), random.randint(2, 10))\n    heaters = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findRadius(houses, heaters)\n\n    return houses, heaters, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        houses, heaters, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findRadius(houses, heaters) == expected_result\n        print(f\"assert solution.findRadius({houses}, {heaters}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findRadius({houses}, {heaters}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.findRadius([6, 23, 27, 43, 53, 91], [6, 14, 17, 19, 64, 66, 80, 83, 87, 99]) == 21\nassert solution.findRadius([11, 21, 26, 28, 45, 85, 92], [67, 68]) == 56\nassert solution.findRadius([5, 17, 82, 83], [3, 25, 33, 93, 100]) == 11\nassert solution.findRadius([13, 23, 58, 67], [2, 42, 44, 47, 93, 95]) == 20\nassert solution.findRadius([7, 18, 21, 22, 25, 75, 99], [7, 32, 42, 59, 96]) == 16\nassert solution.findRadius([2, 10, 11, 15, 43, 66, 67, 79, 88, 100], [6, 28, 37, 42, 50, 54, 63, 90, 99]) == 11\nassert solution.findRadius([11, 13, 17, 27, 55, 68, 77, 79, 82, 93], [9, 29, 36, 40, 41, 48, 61, 62, 78]) == 15\nassert solution.findRadius([9, 60, 80, 95], [3, 6, 25, 37, 56, 72, 85, 88, 94]) == 5\nassert solution.findRadius([6, 7, 8, 27, 50, 66, 73, 93], [2, 18, 36, 49, 57, 59, 75, 81]) == 12\nassert solution.findRadius([1, 4, 18, 22, 50, 70, 79, 82, 92, 98], [6, 9, 11, 23, 27, 28, 44, 51, 70]) == 28\nassert solution.findRadius([26, 41, 44, 63, 68, 69, 82, 99], [9, 18, 29, 60, 71, 86, 94]) == 15\nassert solution.findRadius([7, 11, 36, 47, 50, 85, 89], [35, 38, 41, 72, 79, 88]) == 28\nassert solution.findRadius([5, 30, 38, 43, 68, 78, 83, 91, 93], [18, 27, 30, 59, 78, 81]) == 13\nassert solution.findRadius([38, 80], [6, 39, 50, 52, 61, 67, 78, 88]) == 2\nassert solution.findRadius([6, 34, 51, 53, 63, 64, 66, 77, 81], [1, 11, 36, 44, 63, 65, 82, 84, 90]) == 9\nassert solution.findRadius([25, 26, 35, 37, 68, 75, 81, 86, 92, 98], [10, 64, 83]) == 27\nassert solution.findRadius([12, 20, 26, 27, 33, 42, 68, 81, 93], [11, 41, 59, 78, 80, 82]) == 15\nassert solution.findRadius([51, 72, 83], [19, 31, 33, 43, 46, 79]) == 7\nassert solution.findRadius([32, 39], [3, 8, 36, 45, 52, 53, 59, 67, 69]) == 4\nassert solution.findRadius([14, 27, 46, 73, 89, 91], [6, 17, 24, 45, 55, 83]) == 10\nassert solution.findRadius([6, 8, 17, 21, 40, 49, 52, 60], [6, 12, 86]) == 37\nassert solution.findRadius([14, 19, 58, 89], [7, 20, 28, 39, 44, 59, 63, 84]) == 6\nassert solution.findRadius([8, 11, 38, 44, 74], [3, 59, 87]) == 21\nassert solution.findRadius([15, 19, 27, 51, 54, 85, 90], [18, 47, 61, 94, 95, 96]) == 9\nassert solution.findRadius([48, 86], [5, 27, 40, 58, 67, 73, 77, 79]) == 8\nassert solution.findRadius([5, 14, 16, 28, 48, 55, 60, 85, 95], [44, 55, 72, 94]) == 39\nassert solution.findRadius([14, 43, 63, 74, 80, 81, 84], [11, 38, 54]) == 30\nassert solution.findRadius([22, 68], [10, 23, 32]) == 36\nassert solution.findRadius([7, 15, 21, 27, 49, 65, 66, 71, 75, 95], [3, 21, 41, 46, 51, 64, 70, 73, 87]) == 8\nassert solution.findRadius([11, 78], [22, 45, 51, 53, 67, 76, 78, 96]) == 11\nassert solution.findRadius([48, 51], [38, 61, 65, 95, 98]) == 10\nassert solution.findRadius([12, 33, 38, 56, 57, 74, 76, 96], [17, 23, 30, 58, 67, 74, 86, 98]) == 8\nassert solution.findRadius([12, 17, 23, 27, 28, 32, 72, 73, 80, 96], [9, 81, 85, 94]) == 23\nassert solution.findRadius([4, 13, 54, 61, 62, 71, 77, 90], [9, 13, 15, 33, 38, 41, 44, 54, 80]) == 10\nassert solution.findRadius([5, 19, 36, 37, 56, 64, 75, 76, 91, 98], [11, 56, 86]) == 20\nassert solution.findRadius([23, 35, 38, 40, 47, 59], [13, 15, 16, 22, 40, 82, 90, 100]) == 19\nassert solution.findRadius([14, 21, 85], [7, 14, 16, 25, 32, 35, 61, 64]) == 21\nassert solution.findRadius([8, 34, 78, 96], [24, 34, 76, 83, 85, 93]) == 16\nassert solution.findRadius([33, 53], [8, 77, 93]) == 25\nassert solution.findRadius([51, 57], [24, 48, 50, 51, 53, 65, 66, 70]) == 4\nassert solution.findRadius([24, 39, 44, 52, 57, 59, 61, 67, 84, 94], [55, 57, 68]) == 31\nassert solution.findRadius([31, 68, 79, 93], [55, 89]) == 24\nassert solution.findRadius([3, 17, 44, 87, 92], [5, 63]) == 29\nassert solution.findRadius([11, 24, 25, 33], [5, 62, 92]) == 28\nassert solution.findRadius([10, 35, 48, 64, 70, 82, 99], [4, 84]) == 36\nassert solution.findRadius([36, 58, 64, 77, 94], [31, 55, 60, 85]) == 9\nassert solution.findRadius([8, 81, 98], [5, 7, 26, 51, 55, 66, 71, 81, 95]) == 3\nassert solution.findRadius([16, 64, 66, 79], [16, 54, 90, 98]) == 12\nassert solution.findRadius([1, 20, 30, 32, 33, 57, 58, 95, 99], [36, 37, 42, 52, 65, 71, 75, 92, 95]) == 35\nassert solution.findRadius([15, 70, 85, 87, 93, 96], [2, 45, 55, 56, 69, 90]) == 13\nassert solution.findRadius([10, 26, 63, 73], [4, 19, 26, 32, 73, 75, 77]) == 10\nassert solution.findRadius([12, 17, 19, 21, 36, 55, 83, 89, 90, 96], [50, 71, 93]) == 38\nassert solution.findRadius([2, 8, 17, 20], [5, 16, 17, 46, 53, 94, 95, 97]) == 3\nassert solution.findRadius([13, 37, 64, 71, 79, 86, 89], [58, 91]) == 45\nassert solution.findRadius([2, 10, 12, 16, 37, 38, 50, 75, 100], [29, 30, 37, 50, 79, 86, 93]) == 27\nassert solution.findRadius([31, 76], [25, 29, 56, 57, 62, 65]) == 11\nassert solution.findRadius([3, 7, 100], [23, 29, 51, 52, 55, 57, 64, 85, 92]) == 20\nassert solution.findRadius([31, 45, 57, 68, 89], [1, 2, 19, 21, 60, 83, 86, 97]) == 15\nassert solution.findRadius([44, 58, 90], [9, 35, 52, 87]) == 8\nassert solution.findRadius([4, 11, 47, 53, 62, 63, 70, 83, 91, 94], [60, 86]) == 56\nassert solution.findRadius([16, 25, 42, 46, 52, 63], [16, 19, 63]) == 21\nassert solution.findRadius([3, 16, 47, 51, 62, 83, 88], [11, 27, 28, 39, 42, 53, 84, 91]) == 9\nassert solution.findRadius([37, 51, 99], [13, 16, 50, 59, 72, 80, 90]) == 13\nassert solution.findRadius([13, 21, 32, 66, 71, 92], [8, 9, 28, 58, 65, 72, 78, 90, 94]) == 7\nassert solution.findRadius([4, 8, 14, 18, 37, 42, 52, 57, 61, 74], [12, 19]) == 55\nassert solution.findRadius([8, 22, 41, 48, 54, 80], [11, 25, 44]) == 36\nassert solution.findRadius([3, 25, 38, 58], [19, 21, 50, 58, 74, 82, 85, 99]) == 16\nassert solution.findRadius([1, 3, 6, 8, 39, 76, 84, 96, 98, 99], [30, 57]) == 42\nassert solution.findRadius([36, 59, 67, 90, 91], [5, 44, 47, 50, 56, 63, 84, 85]) == 8\nassert solution.findRadius([9, 24, 37, 38, 55, 63, 66, 77, 79, 92], [76, 89]) == 67\nassert solution.findRadius([13, 33, 40, 43, 44, 45, 61, 66, 95, 99], [3, 10, 11, 25, 26, 33, 34, 55, 84]) == 15\nassert solution.findRadius([38, 46, 51, 59, 64, 74, 78, 90, 91, 100], [16, 18, 45, 57, 59, 66, 68, 83]) == 17\nassert solution.findRadius([1, 14, 26, 30, 43, 50, 69, 77, 81, 99], [17, 71, 93]) == 26\nassert solution.findRadius([7, 88], [3, 21, 78]) == 10\nassert solution.findRadius([47, 80, 98], [4, 7, 32, 39, 44, 57, 60, 61, 75, 78]) == 20\nassert solution.findRadius([23, 36, 47, 74, 91, 99], [12, 38, 40, 45, 46, 59, 73, 97]) == 11\nassert solution.findRadius([8, 19, 26, 27, 36, 37, 63], [7, 10, 26, 35, 74, 89, 95, 96, 97, 98]) == 11\nassert solution.findRadius([7, 9, 37, 56, 70, 77, 86, 99], [14, 66]) == 33\nassert solution.findRadius([8, 10], [57, 72, 97]) == 49\nassert solution.findRadius([18, 23, 27, 34, 63, 85, 95, 100], [30, 34, 45, 48, 49, 71, 85, 95, 97]) == 12\nassert solution.findRadius([16, 37, 44], [41, 59, 87]) == 25\nassert solution.findRadius([36, 74, 79], [20, 25, 26]) == 53\nassert solution.findRadius([47, 68, 91], [7, 12, 27, 35, 41, 58, 62, 70, 80, 92]) == 6\nassert solution.findRadius([31, 39, 42, 73, 78, 94], [14, 56, 58, 86]) == 17\nassert solution.findRadius([1, 7, 15, 18, 26, 86, 87, 89, 92], [12, 15, 28, 54, 57, 83]) == 11\nassert solution.findRadius([34, 45, 57, 97], [29, 42, 47, 56, 70, 71, 78, 80, 87]) == 10\nassert solution.findRadius([17, 28, 37, 40, 51, 70, 73, 74, 81, 82], [44, 46, 83, 93]) == 27\nassert solution.findRadius([7, 28, 29, 31, 39, 43, 58, 65, 67, 98], [5, 25, 31, 48, 64, 66, 86]) == 12\nassert solution.findRadius([15, 23], [8, 12, 13, 25, 29, 50, 56, 64, 70, 88]) == 2\nassert solution.findRadius([5, 19, 24, 27, 70, 78], [10, 15, 45, 52, 73, 95]) == 12\nassert solution.findRadius([14, 26, 40, 56, 68, 80, 83, 93], [50, 80]) == 36\nassert solution.findRadius([37, 64, 67, 70, 84, 96], [1, 12, 29, 48, 66, 73, 92, 97, 99]) == 8\nassert solution.findRadius([6, 8, 16, 19, 24, 27, 44, 94], [34, 35, 41, 73, 98, 100]) == 28\nassert solution.findRadius([9, 12, 22, 42], [36, 60, 62, 78, 89, 95]) == 27\nassert solution.findRadius([12, 58, 60], [9, 13, 40, 90]) == 20\nassert solution.findRadius([4, 32, 34, 47, 63, 70], [7, 35, 72, 88, 90, 98]) == 12\nassert solution.findRadius([3, 5, 32, 48, 63, 73, 77, 89, 98, 100], [28, 34, 35, 51, 59, 75, 97, 99]) == 25\nassert solution.findRadius([37, 63], [6, 7, 22, 75, 89, 92]) == 15\nassert solution.findRadius([14, 16, 19, 24, 29, 30, 78, 84, 86, 100], [18, 53, 86]) == 14\nassert solution.findRadius([5, 40, 76, 86], [5, 22, 56, 60, 67, 89]) == 16",
  "inefficient_solution": "class Solution:\n    def findRadius(self, houses: List[int], heaters: List[int]) -> int:\n        houses = {house: True for house in houses}\n        heaters = {heater: True for heater in heaters}\n\n        def check(r):\n            m, n = len(houses), len(heaters)\n            i = j = 0\n            while i < m:\n                if j >= n:\n                    return False\n                mi = heaters[j] - r\n                mx = heaters[j] + r\n                if houses[i] < mi:\n                    return False\n                if houses[i] > mx:\n                    j += 1\n                else:\n                    i += 1\n            return True\n\n        left, right = 0, int(1e9)\n        while left < right:\n            mid = (left + right) >> 1\n            temp_houses = {house: True for house in houses}\n            for heater in heaters:\n                for i in range(heater - mid, heater + mid + 1):\n                    if i in temp_houses:\n                        del temp_houses[i]\n            if check(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left",
  "is_python": true
}