{
  "problem_idx": 417,
  "task_name": "Pacific Atlantic Water Flow",
  "markdown_description": "\nThere is an `m x n` rectangular island that borders both the **Pacific Ocean** and **Atlantic Ocean**. The **Pacific Ocean** touches the island's left and top edges, and the **Atlantic Ocean** touches the island's right and bottom edges.\n\n\nThe island is partitioned into a grid of square cells. You are given an `m x n` integer matrix `heights` where `heights[r][c]` represents the **height above sea level** of the cell at coordinate `(r, c)`.\n\n\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is **less than or equal to** the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\n\n\nReturn *a **2D list** of grid coordinates* `result` *where* `result[i] = [ri, ci]` *denotes that rain water can flow from cell* `(ri, ci)` *to **both** the Pacific and Atlantic oceans*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0417.Pacific%20Atlantic%20Water%20Flow/images/waterflow-grid.jpg)\n\n```\n\n**Input:** heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n**Output:** [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n**Explanation:** The following cells can flow to the Pacific and Atlantic oceans, as shown below:\n[0,4]: [0,4] -> Pacific Ocean \n\u00a0      [0,4] -> Atlantic Ocean\n[1,3]: [1,3] -> [0,3] -> Pacific Ocean \n\u00a0      [1,3] -> [1,4] -> Atlantic Ocean\n[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean \n\u00a0      [1,4] -> Atlantic Ocean\n[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean \n\u00a0      [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean\n[3,0]: [3,0] -> Pacific Ocean \n\u00a0      [3,0] -> [4,0] -> Atlantic Ocean\n[3,1]: [3,1] -> [3,0] -> Pacific Ocean \n\u00a0      [3,1] -> [4,1] -> Atlantic Ocean\n[4,0]: [4,0] -> Pacific Ocean \n       [4,0] -> Atlantic Ocean\nNote that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** heights = [[1]]\n**Output:** [[0,0]]\n**Explanation:** The water can flow from the only cell to the Pacific and Atlantic oceans.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == heights.length`\n* `n == heights[r].length`\n* `1 <= m, n <= 200`\n* `0 <= heights[r][c] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:\n        def bfs(q, vis):\n            while q:\n                for _ in range(len(q)):\n                    i, j = q.popleft()\n                    for a, b in [[0, -1], [0, 1], [1, 0], [-1, 0]]:\n                        x, y = i + a, j + b\n                        if (\n                            0 <= x < m\n                            and 0 <= y < n\n                            and (x, y) not in vis\n                            and heights[x][y] >= heights[i][j]\n                        ):\n                            vis.add((x, y))\n                            q.append((x, y))\n\n        m, n = len(heights), len(heights[0])\n        vis1, vis2 = set(), set()\n        q1 = deque()\n        q2 = deque()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    vis1.add((i, j))\n                    q1.append((i, j))\n                if i == m - 1 or j == n - 1:\n                    vis2.add((i, j))\n                    q2.append((i, j))\n        bfs(q1, vis1)\n        bfs(q2, vis2)\n        return [\n            (i, j)\n            for i in range(m)\n            for j in range(n)\n            if (i, j) in vis1 and (i, j) in vis2\n        ]\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\n\nclass Solution:\n    def pacificAtlantic(self, heights):\n        def bfs(q, vis):\n            while q:\n                for _ in range(len(q)):\n                    i, j = q.popleft()\n                    for a, b in [[0, -1], [0, 1], [1, 0], [-1, 0]]:\n                        x, y = i + a, j + b\n                        if (\n                            0 <= x < m\n                            and 0 <= y < n\n                            and (x, y) not in vis\n                            and heights[x][y] >= heights[i][j]\n                        ):\n                            vis.add((x, y))\n                            q.append((x, y))\n\n        m, n = len(heights), len(heights[0])\n        vis1, vis2 = set(), set()\n        q1 = deque()\n        q2 = deque()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    vis1.add((i, j))\n                    q1.append((i, j))\n                if i == m - 1 or j == n - 1:\n                    vis2.add((i, j))\n                    q2.append((i, j))\n        bfs(q1, vis1)\n        bfs(q2, vis2)\n        return [\n            (i, j)\n            for i in range(m)\n            for j in range(n)\n            if (i, j) in vis1 and (i, j) in vis2\n        ]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random m value\n    m = random.randint(1, 5)\n    \n    # Generate random n value\n    n = random.randint(1, 5)\n\n    # Generate random height matrix\n    heights = []\n    for _ in range(m):\n        heights.append(random.choices(range(0, 101), k=n))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.pacificAtlantic(heights)\n\n    return heights, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        heights, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.pacificAtlantic(heights) == expected_result\n        print(f\"assert solution.pacificAtlantic({heights}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.pacificAtlantic({heights}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.pacificAtlantic([[54, 38, 33, 72, 56], [21, 52, 44, 47, 99], [29, 34, 68, 39, 44], [99, 32, 40, 15, 95]]) == [(0, 3), (0, 4), (1, 1), (1, 3), (1, 4), (2, 1), (2, 2), (3, 0)]\nassert solution.pacificAtlantic([[54, 36, 85, 9], [20, 82, 83, 6], [100, 18, 60, 69]]) == [(0, 2), (0, 3), (1, 1), (1, 2), (2, 0)]\nassert solution.pacificAtlantic([[17, 76, 77, 95, 36], [1, 90, 76, 79, 76], [54, 33, 29, 94, 46], [44, 57, 11, 15, 33], [27, 52, 72, 1, 5]]) == [(0, 3), (0, 4), (1, 3), (1, 4), (2, 0), (2, 3), (3, 0), (3, 1), (4, 0), (4, 1), (4, 2)]\nassert solution.pacificAtlantic([[57, 98]]) == [(0, 0), (0, 1)]\nassert solution.pacificAtlantic([[85, 85, 36, 43]]) == [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert solution.pacificAtlantic([[98, 52, 28, 31, 52]]) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]\nassert solution.pacificAtlantic([[87, 4, 1, 16], [92, 36, 18, 55], [53, 19, 0, 65], [24, 26, 33, 89], [90, 73, 17, 22]]) == [(0, 3), (1, 3), (2, 3), (3, 2), (3, 3), (4, 0), (4, 1)]\nassert solution.pacificAtlantic([[88, 86]]) == [(0, 0), (0, 1)]\nassert solution.pacificAtlantic([[26], [54], [41], [46], [8]]) == [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[79, 16, 34, 42, 61], [2, 9, 30, 46, 78], [33, 40, 88, 25, 90], [85, 57, 71, 59, 6]]) == [(0, 4), (1, 4), (2, 2), (2, 4), (3, 0), (3, 1), (3, 2)]\nassert solution.pacificAtlantic([[28, 21, 97, 19], [7, 18, 18, 77], [36, 12, 59, 2], [93, 48, 95, 72]]) == [(0, 2), (0, 3), (1, 3), (2, 2), (3, 0), (3, 2)]\nassert solution.pacificAtlantic([[59, 21, 43], [71, 56, 87]]) == [(0, 2), (1, 0), (1, 1), (1, 2)]\nassert solution.pacificAtlantic([[58, 2, 69, 84], [6, 7, 39, 47], [38, 17, 60, 77]]) == [(0, 3), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]\nassert solution.pacificAtlantic([[72, 58, 78], [91, 99, 64], [29, 90, 47]]) == [(0, 2), (1, 0), (1, 1), (2, 0), (2, 1)]\nassert solution.pacificAtlantic([[32, 86, 87, 83], [73, 7, 60, 54], [59, 95, 76, 50], [26, 15, 85, 55]]) == [(0, 2), (0, 3), (1, 0), (2, 0), (2, 1), (3, 0)]\nassert solution.pacificAtlantic([[61, 43], [13, 55]]) == [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[100, 68, 10, 24, 22], [51, 36, 60, 55, 79], [98, 57, 100, 36, 43], [4, 82, 40, 40, 94]]) == [(0, 3), (0, 4), (1, 2), (1, 3), (1, 4), (2, 0), (2, 2), (3, 0), (3, 1)]\nassert solution.pacificAtlantic([[76], [55], [69]]) == [(0, 0), (1, 0), (2, 0)]\nassert solution.pacificAtlantic([[24, 84, 23, 83, 67], [98, 45, 79, 44, 24], [14, 85, 99, 15, 13]]) == [(0, 3), (0, 4), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]\nassert solution.pacificAtlantic([[85, 18, 99, 78, 93], [1, 57, 58, 46, 20], [58, 46, 57, 36, 56], [12, 38, 91, 69, 13]]) == [(0, 2), (0, 3), (0, 4), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2)]\nassert solution.pacificAtlantic([[55, 70, 22, 56, 70]]) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]\nassert solution.pacificAtlantic([[16, 68, 55], [29, 66, 51], [3, 57, 61], [87, 88, 85], [95, 39, 34]]) == [(0, 1), (0, 2), (1, 1), (2, 2), (3, 1), (3, 2), (4, 0)]\nassert solution.pacificAtlantic([[69, 32, 43, 65], [88, 40, 20, 76], [14, 53, 6, 60], [76, 13, 59, 75], [34, 53, 86, 17]]) == [(0, 3), (1, 3), (3, 0), (4, 0), (4, 1), (4, 2)]\nassert solution.pacificAtlantic([[89, 45], [87, 97], [75, 70], [10, 32]]) == [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)]\nassert solution.pacificAtlantic([[52, 3, 57], [6, 12, 21]]) == [(0, 0), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert solution.pacificAtlantic([[56, 1, 83, 87], [68, 49, 64, 87], [42, 56, 0, 88], [27, 74, 60, 78]]) == [(0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1)]\nassert solution.pacificAtlantic([[73], [87]]) == [(0, 0), (1, 0)]\nassert solution.pacificAtlantic([[64, 98], [12, 95], [48, 68]]) == [(0, 1), (1, 1), (2, 0), (2, 1)]\nassert solution.pacificAtlantic([[78], [40], [29], [0], [86]]) == [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[41], [54]]) == [(0, 0), (1, 0)]\nassert solution.pacificAtlantic([[88, 28, 79, 23], [46, 20, 66, 34], [46, 83, 19, 60], [74, 19, 57, 74]]) == [(0, 2), (0, 3), (1, 2), (1, 3), (2, 1), (2, 3), (3, 0), (3, 3)]\nassert solution.pacificAtlantic([[15, 75, 73, 41, 94], [84, 41, 54, 30, 70]]) == [(0, 1), (0, 2), (0, 3), (0, 4), (1, 0)]\nassert solution.pacificAtlantic([[54, 95], [76, 65], [48, 18], [48, 61], [32, 56]]) == [(0, 1), (1, 0), (2, 0), (3, 0), (3, 1), (4, 0), (4, 1)]\nassert solution.pacificAtlantic([[80, 56], [93, 100]]) == [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[63, 34, 61]]) == [(0, 0), (0, 1), (0, 2)]\nassert solution.pacificAtlantic([[37, 73, 1], [20, 95, 21], [90, 30, 14], [74, 15, 71]]) == [(0, 1), (0, 2), (1, 1), (1, 2), (2, 0), (3, 0)]\nassert solution.pacificAtlantic([[100, 55], [13, 29], [93, 14], [50, 85]]) == [(0, 0), (0, 1), (1, 1), (2, 0), (3, 0), (3, 1)]\nassert solution.pacificAtlantic([[4, 7], [39, 68]]) == [(0, 1), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[29], [24], [51]]) == [(0, 0), (1, 0), (2, 0)]\nassert solution.pacificAtlantic([[16, 2, 29, 20, 14]]) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]\nassert solution.pacificAtlantic([[35], [82], [81]]) == [(0, 0), (1, 0), (2, 0)]\nassert solution.pacificAtlantic([[34], [51], [49], [36], [7]]) == [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[91, 56, 57], [51, 58, 56], [43, 70, 79], [86, 27, 18], [89, 20, 46]]) == [(0, 2), (1, 1), (2, 1), (2, 2), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[41, 69], [76, 59], [26, 82], [78, 42]]) == [(0, 1), (1, 0), (2, 1), (3, 0)]\nassert solution.pacificAtlantic([[4, 76, 37, 5, 1], [87, 98, 4, 10, 52]]) == [(0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 3), (1, 4)]\nassert solution.pacificAtlantic([[40], [86]]) == [(0, 0), (1, 0)]\nassert solution.pacificAtlantic([[56, 75, 51, 47, 94], [18, 20, 34, 24, 82], [54, 34, 86, 93, 27]]) == [(0, 4), (2, 0), (2, 1), (2, 2), (2, 3)]\nassert solution.pacificAtlantic([[51, 49]]) == [(0, 0), (0, 1)]\nassert solution.pacificAtlantic([[71, 90], [28, 37]]) == [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[87, 21, 18, 69], [63, 33, 21, 86], [96, 14, 20, 55]]) == [(0, 0), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0)]\nassert solution.pacificAtlantic([[44], [58], [45], [99], [56]]) == [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[99, 100, 46, 34, 69], [49, 19, 40, 51, 14]]) == [(0, 0), (0, 1), (0, 2), (0, 4), (1, 0), (1, 3)]\nassert solution.pacificAtlantic([[70, 98], [83, 37]]) == [(0, 1), (1, 0)]\nassert solution.pacificAtlantic([[30, 88, 31, 97], [47, 3, 23, 100], [61, 74, 35, 73]]) == [(0, 3), (1, 3), (2, 0), (2, 1)]\nassert solution.pacificAtlantic([[15, 76, 82, 12], [51, 25, 22, 48]]) == [(0, 1), (0, 2), (0, 3), (1, 0), (1, 3)]\nassert solution.pacificAtlantic([[44, 16, 84], [18, 89, 25]]) == [(0, 0), (0, 2), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[66, 66, 20, 52, 39], [80, 94, 69, 64, 94], [88, 35, 92, 10, 14], [69, 38, 15, 63, 90], [56, 13, 5, 35, 38]]) == [(0, 3), (0, 4), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 2), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[64, 26, 22], [27, 3, 52], [24, 100, 53], [71, 42, 54]]) == [(0, 0), (0, 1), (0, 2), (1, 2), (2, 1), (2, 2), (3, 0), (3, 2)]\nassert solution.pacificAtlantic([[38, 100, 69, 14]]) == [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert solution.pacificAtlantic([[10], [17], [70], [44]]) == [(0, 0), (1, 0), (2, 0), (3, 0)]\nassert solution.pacificAtlantic([[33], [63], [8], [17]]) == [(0, 0), (1, 0), (2, 0), (3, 0)]\nassert solution.pacificAtlantic([[88, 5, 79, 9]]) == [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert solution.pacificAtlantic([[43, 1, 73, 98], [38, 63, 37, 12]]) == [(0, 0), (0, 2), (0, 3), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[60], [81]]) == [(0, 0), (1, 0)]\nassert solution.pacificAtlantic([[32, 65, 89, 56], [0, 9, 68, 23]]) == [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2)]\nassert solution.pacificAtlantic([[100, 43, 94, 38, 99]]) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]\nassert solution.pacificAtlantic([[47, 26], [51, 54], [99, 22], [38, 25], [97, 21]]) == [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[43, 46, 49, 62, 77], [15, 43, 63, 70, 28], [5, 34, 82, 1, 52], [73, 52, 21, 97, 54]]) == [(0, 4), (1, 3), (2, 2), (3, 0), (3, 1)]\nassert solution.pacificAtlantic([[91, 44, 17]]) == [(0, 0), (0, 1), (0, 2)]\nassert solution.pacificAtlantic([[34, 67], [94, 76]]) == [(0, 1), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[56, 14, 11]]) == [(0, 0), (0, 1), (0, 2)]\nassert solution.pacificAtlantic([[57, 35, 85, 66, 49], [2, 64, 63, 1, 79], [50, 3, 88, 72, 80], [29, 82, 69, 69, 93], [64, 26, 51, 25, 85]]) == [(0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 1), (3, 4), (4, 0)]\nassert solution.pacificAtlantic([[55], [8], [56], [61], [98]]) == [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[25, 16, 67, 15]]) == [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert solution.pacificAtlantic([[51], [58], [96], [38], [47]]) == [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[31, 1], [59, 71]]) == [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[41, 46], [20, 19]]) == [(0, 0), (0, 1), (1, 0)]\nassert solution.pacificAtlantic([[79, 32, 20, 10, 24], [81, 3, 47, 33, 93], [74, 89, 44, 32, 55], [63, 67, 90, 0, 34]]) == [(0, 4), (1, 0), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (3, 0), (3, 1), (3, 2)]\nassert solution.pacificAtlantic([[1, 94, 95, 86]]) == [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert solution.pacificAtlantic([[73, 7, 58], [24, 92, 95], [75, 30, 32], [36, 7, 1], [63, 30, 89]]) == [(0, 2), (1, 1), (1, 2), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[0, 80, 23, 63], [16, 36, 22, 58], [42, 20, 71, 12], [44, 24, 5, 66]]) == [(0, 3), (3, 0)]\nassert solution.pacificAtlantic([[54], [87], [70], [38], [18]]) == [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]\nassert solution.pacificAtlantic([[72, 47, 41, 47]]) == [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert solution.pacificAtlantic([[54, 25, 68, 80], [50, 30, 83, 35], [32, 88, 28, 21], [19, 90, 88, 7]]) == [(0, 0), (0, 3), (1, 0), (1, 2), (2, 0), (2, 1), (3, 0), (3, 1)]\nassert solution.pacificAtlantic([[50, 0, 85], [72, 16, 8]]) == [(0, 2), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[75, 38, 42], [79, 10, 82], [64, 0, 99], [19, 50, 92], [90, 37, 17]]) == [(0, 2), (1, 2), (2, 2), (3, 1), (3, 2), (4, 0)]\nassert solution.pacificAtlantic([[10], [52], [18], [66]]) == [(0, 0), (1, 0), (2, 0), (3, 0)]\nassert solution.pacificAtlantic([[1, 12, 16, 49]]) == [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert solution.pacificAtlantic([[63, 92, 96, 16], [22, 50, 100, 30], [51, 52, 36, 56]]) == [(0, 2), (0, 3), (1, 2), (1, 3), (2, 0), (2, 1), (2, 3)]\nassert solution.pacificAtlantic([[42, 70, 85], [57, 72, 90], [65, 36, 64], [56, 74, 77]]) == [(0, 2), (1, 2), (2, 0), (3, 0), (3, 1), (3, 2)]\nassert solution.pacificAtlantic([[84, 50, 39], [42, 56, 67], [34, 96, 75]]) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\nassert solution.pacificAtlantic([[73, 91, 80, 85, 18]]) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)]\nassert solution.pacificAtlantic([[78, 82, 100, 37, 82], [68, 61, 57, 2, 31], [52, 14, 37, 8, 23], [14, 89, 21, 26, 6]]) == [(0, 0), (0, 1), (0, 2), (0, 4), (1, 0), (2, 0), (3, 0), (3, 1)]\nassert solution.pacificAtlantic([[100, 25, 37, 83, 84], [18, 84, 87, 41, 20]]) == [(0, 0), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2)]\nassert solution.pacificAtlantic([[57, 8], [45, 5], [69, 25]]) == [(0, 0), (0, 1), (1, 0), (2, 0)]\nassert solution.pacificAtlantic([[6, 80, 55, 43, 97], [29, 46, 10, 84, 64], [94, 16, 100, 35, 32], [51, 74, 36, 84, 30], [0, 64, 33, 51, 13]]) == [(0, 4), (1, 3), (2, 0), (3, 0), (3, 1), (4, 0), (4, 1)]\nassert solution.pacificAtlantic([[28, 15], [21, 73]]) == [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert solution.pacificAtlantic([[73, 45, 52], [89, 96, 92], [61, 77, 44], [7, 38, 99], [13, 35, 0]]) == [(0, 2), (1, 1), (1, 2), (2, 1), (3, 1), (3, 2), (4, 0), (4, 1)]\nassert solution.pacificAtlantic([[61, 38], [82, 13], [27, 54], [72, 26]]) == [(0, 0), (0, 1), (1, 0), (2, 1), (3, 0)]\nassert solution.pacificAtlantic([[47, 99], [63, 78], [51, 92], [34, 34]]) == [(0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)]",
  "inefficient_solution": "class Solution:\n    def pacificAtlantic(self, heights):\n        m, n = len(heights), len(heights[0])\n        vis1 = [[[] for _ in range(n)] for _ in range(m)]\n        vis2 = [[[] for _ in range(n)] for _ in range(m)]\n        q1 = deque()\n        q2 = deque()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    vis1[i][j] = [i, j]\n                    q1.append([i, j])\n                if i == m - 1 or j == n - 1:\n                    vis2[i][j] = [i, j]\n                    q2.append([i, j])\n\n        directions = [[0, 1], [1, 0], [0, -1], [-1, 0]]\n        while q1:\n            for _ in range(len(q1)):\n                i, j = q1.popleft()\n                for a, b in directions:\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and [x, y] not in vis1[i][j]\n                        and heights[x][y] >= heights[i][j]\n                    ):\n                        vis1[i][j].append([x, y])\n                        q1.append([x, y])\n        while q2:\n            for _ in range(len(q2)):\n                i, j = q2.popleft()\n                for a, b in directions:\n                    x, y = i + a, j + b\n                    if (\n                        0 <= x < m\n                        and 0 <= y < n\n                        and [x, y] not in vis2[i][j]\n                        and heights[x][y] >= heights[i][j]\n                    ):\n                        vis2[i][j].append([x, y])\n                        q2.append([x, y])\n\n        result = []\n        for i in range(m):\n            for j in range(n):\n                if vis1[i][j] and vis2[i][j]:\n                    result.append([i, j])\n\n        return result",
  "is_python": true
}