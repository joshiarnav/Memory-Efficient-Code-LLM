{
  "problem_idx": 1766,
  "task_name": "Tree of Coprimes",
  "markdown_description": "\nThere is a tree (i.e.,\u00a0a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the **root** of the tree is node `0`.\n\n\nTo represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.\n\n\nTwo values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)` is the **greatest common divisor** of `x` and `y`.\n\n\nAn ancestor of a node `i` is any other node on the shortest path from node `i` to the **root**. A node is **not** considered an ancestor of itself.\n\n\nReturn *an array* `ans` *of size* `n`, *where* `ans[i]` *is the closest ancestor to node* `i` *such that* `nums[i]` *and* `nums[ans[i]]` are **coprime**, or `-1` *if there is no such ancestor*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1766.Tree%20of%20Coprimes/images/untitled-diagram.png)**\n\n\n\n```\n\n**Input:** nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\n**Output:** [-1,0,0,1]\n**Explanation:** In the above figure, each node's value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's\n  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n  closest valid ancestor.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1766.Tree%20of%20Coprimes/images/untitled-diagram1.png)\n\n\n\n```\n\n**Input:** nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\n**Output:** [-1,0,-1,0,0,0,-1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `nums.length == n`\n* `1 <= nums[i] <= 50`\n* `1 <= n <= 105`\n* `edges.length == n - 1`\n* `edges[j].length == 2`\n* `0 <= uj, vj < n`\n* `uj != vj`\n\n\n",
  "canonical_solution": "class Solution:\n    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:\n        def dfs(i, fa, depth):\n            t = k = -1\n            for v in f[nums[i]]:\n                stk = stks[v]\n                if stk and stk[-1][1] > k:\n                    t, k = stk[-1]\n            ans[i] = t\n            for j in g[i]:\n                if j != fa:\n                    stks[nums[i]].append((i, depth))\n                    dfs(j, i, depth + 1)\n                    stks[nums[i]].pop()\n\n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        f = defaultdict(list)\n        for i in range(1, 51):\n            for j in range(1, 51):\n                if gcd(i, j) == 1:\n                    f[i].append(j)\n        stks = defaultdict(list)\n        ans = [-1] * len(nums)\n        dfs(0, -1, 0)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:\n        def dfs(i, fa, depth):\n            t = k = -1\n            for v in f[nums[i]]:\n                stk = stks[v]\n                if stk and stk[-1][1] > k:\n                    t, k = stk[-1]\n            ans[i] = t\n            for j in g[i]:\n                if j != fa:\n                    stks[nums[i]].append((i, depth))\n                    dfs(j, i, depth + 1)\n                    stks[nums[i]].pop()\n\n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        f = defaultdict(list)\n        for i in range(1, 51):\n            for j in range(1, 51):\n                if gcd(i, j) == 1:\n                    f[i].append(j)\n        stks = defaultdict(list)\n        ans = [-1] * len(nums)\n        dfs(0, -1, 0)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random nums list\n    nums = random.choices(range(1, 51), k=random.randint(2, 10))\n    \n    # Generate random edges list\n    edges = []\n    for i in range(len(nums) - 1):\n        u = i\n        v = i + 1\n        edges.append([u, v])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getCoprimes(nums, edges)\n\n    return nums, edges, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, edges, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getCoprimes(nums, edges) == expected_result\n        print(f\"assert solution.getCoprimes({nums}, {edges}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getCoprimes({nums}, {edges}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getCoprimes([41, 44, 7, 20, 15, 12, 16, 15, 27], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 2, 2, 2, 4, 6, 6]\nassert solution.getCoprimes([22, 36, 33, 2], [[0, 1], [1, 2], [2, 3]]) == [-1, -1, -1, 2]\nassert solution.getCoprimes([15, 47, 18, 33, 6, 23], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, 0, 1, 1, 1, 4]\nassert solution.getCoprimes([2, 21, 19, 27, 24, 23, 49, 23, 24], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 2, 2, 4, 5, 6, 7]\nassert solution.getCoprimes([43, 37, 38, 6, 33, 4], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, 0, 1, 1, 2, 4]\nassert solution.getCoprimes([18, 10], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([25, 49, 21, 48], [[0, 1], [1, 2], [2, 3]]) == [-1, 0, 0, 1]\nassert solution.getCoprimes([47, 14, 22], [[0, 1], [1, 2]]) == [-1, 0, 0]\nassert solution.getCoprimes([48, 8, 19, 43, 44, 41, 42, 24, 37, 39], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, -1, 1, 2, 3, 4, 5, 5, 7, 8]\nassert solution.getCoprimes([44, 30], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([35, 43], [[0, 1]]) == [-1, 0]\nassert solution.getCoprimes([47, 33, 30, 45, 24, 22, 32], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) == [-1, 0, 0, 0, 0, 3, 3]\nassert solution.getCoprimes([47, 5, 22, 19, 36, 45, 20], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) == [-1, 0, 1, 2, 3, 3, 3]\nassert solution.getCoprimes([36, 40], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([24, 23], [[0, 1]]) == [-1, 0]\nassert solution.getCoprimes([13, 1], [[0, 1]]) == [-1, 0]\nassert solution.getCoprimes([49, 18, 37, 10, 10, 15, 44, 36], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 1, 2, 2, 2, 5, 2]\nassert solution.getCoprimes([13, 15, 30, 49, 9, 4, 24, 18, 45, 47], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, 0, 0, 2, 3, 4, 3, 3, 5, 8]\nassert solution.getCoprimes([22, 35, 17, 19, 20, 2], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, 0, 1, 2, 3, 3]\nassert solution.getCoprimes([36, 21, 11, 41, 42, 39, 44, 10], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, -1, 1, 2, 3, 3, 5, 5]\nassert solution.getCoprimes([37, 42, 46, 4, 32, 37, 1, 4, 24, 38], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, 0, 0, 0, 0, 4, 5, 6, 6, 6]\nassert solution.getCoprimes([7, 20, 32], [[0, 1], [1, 2]]) == [-1, 0, 0]\nassert solution.getCoprimes([9, 8], [[0, 1]]) == [-1, 0]\nassert solution.getCoprimes([46, 14], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([3, 24, 11], [[0, 1], [1, 2]]) == [-1, -1, 1]\nassert solution.getCoprimes([8, 45, 7], [[0, 1], [1, 2]]) == [-1, 0, 1]\nassert solution.getCoprimes([5, 25, 10, 47], [[0, 1], [1, 2], [2, 3]]) == [-1, -1, -1, 2]\nassert solution.getCoprimes([37, 23, 39, 45, 8, 30, 5, 23], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 1, 1, 3, 1, 4, 6]\nassert solution.getCoprimes([43, 13, 5, 9], [[0, 1], [1, 2], [2, 3]]) == [-1, 0, 1, 2]\nassert solution.getCoprimes([28, 1, 18, 28, 39, 14, 13, 12, 37], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 1, 3, 4, 5, 6, 7]\nassert solution.getCoprimes([4, 23, 49, 25, 34, 26], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, 0, 1, 2, 3, 3]\nassert solution.getCoprimes([40, 17, 35, 39, 3], [[0, 1], [1, 2], [2, 3], [3, 4]]) == [-1, 0, 1, 2, 2]\nassert solution.getCoprimes([26, 12, 17, 38], [[0, 1], [1, 2], [2, 3]]) == [-1, -1, 1, 2]\nassert solution.getCoprimes([45, 22, 32, 6, 5, 5], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, 0, 0, -1, 3, 3]\nassert solution.getCoprimes([27, 14, 46, 12, 2, 5, 12, 31, 5, 30], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, 0, 0, -1, 0, 4, 5, 6, 7, 7]\nassert solution.getCoprimes([6, 29, 27, 44, 29, 20, 50, 8, 33], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 2, 3, 4, 4, 4, 7]\nassert solution.getCoprimes([38, 19, 13, 2], [[0, 1], [1, 2], [2, 3]]) == [-1, -1, 1, 2]\nassert solution.getCoprimes([18, 28, 38, 43, 43, 41], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, -1, -1, 2, 2, 4]\nassert solution.getCoprimes([13, 23, 38], [[0, 1], [1, 2]]) == [-1, 0, 1]\nassert solution.getCoprimes([5, 39], [[0, 1]]) == [-1, 0]\nassert solution.getCoprimes([41, 49, 9, 11, 35, 9, 28, 43], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 1, 2, 3, 4, 5, 6]\nassert solution.getCoprimes([30, 24, 22, 50, 37, 44, 48, 18, 11, 4], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, -1, -1, -1, 3, 4, 4, 4, 7, 8]\nassert solution.getCoprimes([35, 47, 50, 38, 32, 23, 15], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) == [-1, 0, 1, 1, 1, 4, 5]\nassert solution.getCoprimes([16, 30, 22, 16, 17, 42, 33, 29, 49], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, -1, -1, -1, 3, 4, 4, 6, 7]\nassert solution.getCoprimes([31, 10, 28, 6, 49, 34, 25, 35, 48, 28], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, 0, 0, 0, 3, 4, 5, 5, 7, 6]\nassert solution.getCoprimes([42, 9, 4, 10, 2, 35, 11, 39, 11], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, -1, 1, 1, 1, 4, 5, 6, 7]\nassert solution.getCoprimes([34, 5, 32, 20, 23, 35], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, 0, 1, -1, 3, 4]\nassert solution.getCoprimes([1, 20, 1, 9, 21, 7, 9, 4, 32, 34], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, 0, 1, 2, 2, 3, 5, 6, 6, 6]\nassert solution.getCoprimes([35, 21, 16, 27, 34, 8, 48, 47, 44, 48], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, -1, 1, 2, 3, 3, 0, 6, 7, 7]\nassert solution.getCoprimes([45, 45, 15], [[0, 1], [1, 2]]) == [-1, -1, -1]\nassert solution.getCoprimes([41, 15, 11, 27, 20, 41, 32, 20, 24], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 2, 3, 4, 5, 5, 5]\nassert solution.getCoprimes([43, 24, 26, 42, 16, 37, 25, 1], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 0, 0, 0, 4, 5, 6]\nassert solution.getCoprimes([33, 27, 24, 23, 31, 23, 15, 40], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, -1, -1, 2, 3, 4, 5, 5]\nassert solution.getCoprimes([5, 29, 11, 25, 5, 4, 17, 39, 1], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 2, 2, 4, 5, 6, 7]\nassert solution.getCoprimes([43, 12, 49, 21], [[0, 1], [1, 2], [2, 3]]) == [-1, 0, 1, 0]\nassert solution.getCoprimes([34, 48], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([37, 36, 31, 12], [[0, 1], [1, 2], [2, 3]]) == [-1, 0, 1, 2]\nassert solution.getCoprimes([19, 37, 29, 33, 30, 18, 1, 21, 11, 48], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, 0, 1, 2, 2, 2, 5, 6, 7, 8]\nassert solution.getCoprimes([37, 2, 40, 44, 12, 19, 48, 30, 6], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 0, 0, 0, 4, 5, 5, 5]\nassert solution.getCoprimes([3, 19, 28, 16, 32, 13, 17, 49], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 1, 1, 1, 4, 5, 6]\nassert solution.getCoprimes([29, 3, 34, 5, 15, 1, 48, 25, 21, 32], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, 0, 1, 2, 2, 4, 5, 6, 7, 8]\nassert solution.getCoprimes([43, 39, 18, 29, 48], [[0, 1], [1, 2], [2, 3], [3, 4]]) == [-1, 0, 0, 2, 3]\nassert solution.getCoprimes([43, 10], [[0, 1]]) == [-1, 0]\nassert solution.getCoprimes([50, 16], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([8, 19, 29], [[0, 1], [1, 2]]) == [-1, 0, 1]\nassert solution.getCoprimes([23, 48, 24, 33, 36], [[0, 1], [1, 2], [2, 3], [3, 4]]) == [-1, 0, 0, 0, 0]\nassert solution.getCoprimes([48, 23], [[0, 1]]) == [-1, 0]\nassert solution.getCoprimes([23, 42, 37], [[0, 1], [1, 2]]) == [-1, 0, 1]\nassert solution.getCoprimes([42, 40, 37, 21], [[0, 1], [1, 2], [2, 3]]) == [-1, -1, 1, 2]\nassert solution.getCoprimes([10, 2, 16, 38, 21, 10], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, -1, -1, -1, 3, 4]\nassert solution.getCoprimes([10, 32, 45, 50, 5, 13], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, -1, 1, -1, 1, 4]\nassert solution.getCoprimes([26, 3, 1, 18, 9, 40, 44, 16], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 1, 2, 2, 4, 4, 4]\nassert solution.getCoprimes([50, 47, 33, 41, 36, 4, 33, 44], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 1, 2, 3, 3, 5, 3]\nassert solution.getCoprimes([5, 45, 49, 27, 39, 7, 18, 10], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, -1, 1, 2, 2, 4, 5, 5]\nassert solution.getCoprimes([13, 10, 34], [[0, 1], [1, 2]]) == [-1, 0, 0]\nassert solution.getCoprimes([28, 35], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([20, 16, 1], [[0, 1], [1, 2]]) == [-1, -1, 1]\nassert solution.getCoprimes([36, 28, 9, 1, 19, 40], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, -1, 1, 2, 3, 4]\nassert solution.getCoprimes([31, 13, 7], [[0, 1], [1, 2]]) == [-1, 0, 1]\nassert solution.getCoprimes([16, 17, 25, 46], [[0, 1], [1, 2], [2, 3]]) == [-1, 0, 1, 2]\nassert solution.getCoprimes([44, 7, 5, 12, 1, 11, 9, 33, 40], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 2, 3, 4, 5, 4, 7]\nassert solution.getCoprimes([28, 14, 12, 14, 22], [[0, 1], [1, 2], [2, 3], [3, 4]]) == [-1, -1, -1, -1, -1]\nassert solution.getCoprimes([29, 41], [[0, 1]]) == [-1, 0]\nassert solution.getCoprimes([43, 38, 40, 43, 22, 27, 12, 45, 10], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 0, 2, 3, 4, 3, 4, 5]\nassert solution.getCoprimes([18, 38, 33, 33, 13, 16, 37, 31, 5, 16], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, -1, 1, 1, 3, 4, 5, 6, 7, 8]\nassert solution.getCoprimes([15, 12, 48, 14, 15, 40, 38], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) == [-1, -1, -1, 0, 3, -1, 4]\nassert solution.getCoprimes([32, 2, 37], [[0, 1], [1, 2]]) == [-1, -1, 1]\nassert solution.getCoprimes([44, 47, 25, 5], [[0, 1], [1, 2], [2, 3]]) == [-1, 0, 1, 1]\nassert solution.getCoprimes([38, 24, 48, 32, 21, 32], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]) == [-1, -1, -1, -1, 3, 4]\nassert solution.getCoprimes([17, 32, 10, 37, 8, 10, 23, 26], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 0, 2, 3, 3, 5, 6]\nassert solution.getCoprimes([12, 45], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([2, 19, 4, 12], [[0, 1], [1, 2], [2, 3]]) == [-1, 0, 1, 1]\nassert solution.getCoprimes([7, 20, 27, 44, 47, 24, 40], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) == [-1, 0, 1, 2, 3, 4, 4]\nassert solution.getCoprimes([32, 5, 11, 49, 44, 32, 31, 34, 7], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 2, 3, 3, 5, 6, 7]\nassert solution.getCoprimes([9, 14, 3], [[0, 1], [1, 2]]) == [-1, 0, 1]\nassert solution.getCoprimes([2, 31, 25, 7, 9, 39, 3, 29], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 1, 2, 3, 3, 3, 6]\nassert solution.getCoprimes([32, 41, 42, 35, 11, 47, 7, 50], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) == [-1, 0, 1, 1, 3, 4, 5, 6]\nassert solution.getCoprimes([28, 35, 40, 21, 47, 46, 40, 10, 12, 47], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]]) == [-1, -1, -1, 2, 3, 4, 4, 4, 4, 8]\nassert solution.getCoprimes([12, 26], [[0, 1]]) == [-1, -1]\nassert solution.getCoprimes([46, 21, 29, 13, 31, 2, 37, 41, 43], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]) == [-1, 0, 1, 2, 3, 4, 5, 6, 7]",
  "inefficient_solution": "import math\nfrom collections import defaultdict\n\nclass Solution:\n    def getCoprimes(self, nums, edges):\n        def dfs(i, fa, depth):\n            t = k = -1\n            for v in f[nums[i]]:\n                stk = stks[v]\n                if stk and stk[-1][1] > k:\n                    t, k = stk[-1]\n            ans[i] = t\n            for j in g[i]:\n                if j != fa:\n                    stks[nums[i]].append((i, depth))\n                    dfs(j, i, depth + 1)\n                    stks[nums[i]].append((i, depth + 1))\n                    stks[nums[i]].pop()\n            stks[nums[i]].append((i, depth))\n        \n        g = defaultdict(list)\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        f = defaultdict(list)\n        for i in range(1, 51):\n            for j in range(1, 51):\n                if gcd(i, j) == 1:\n                    f[i].append(j)\n        stks = defaultdict(list)\n        for v in range(1, 51):\n            stks[v] = []\n        ans = [-1] * len(nums)\n        dfs(0, -1, 0)\n        return ans\n\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        return self.gcd(b, a % b)\n\n    def dfs2(self, i, fa, depth, stks, ans, g, f):\n        t = k = -1\n        for v in f[nums[i]]:\n            stk = stks[v]\n            if stk and stk[-1][1] > k:\n                t, k = stk[-1]\n        ans[i] = t\n        for j in g[i]:\n            if j != fa:\n                stks[nums[i]].append((i, depth))\n                self.dfs2(j, i, depth + 1, stks, ans, g, f)\n                stks[nums[i]].append((i, depth + 1))\n                stks[nums[i]].pop()\n\n    def dfs3(self, i, fa, depth, stks, ans, g, f):\n        t = k = -1\n        for v in f[nums[i]]:\n            stk = stks[v]\n            if stk and stk[-1][1] > k:\n                t, k = stk[-1]\n        ans[i] = t\n        for j in g[i]:\n            if j != fa:\n                stks[nums[i]].append((i, depth))\n                self.dfs2(j, i, depth + 1, stks, ans, g, f)\n                stks[nums[i]].append((i, depth + 1))\n                stks[nums[i]].pop()\n\n    def dfs4(self, i, fa, depth, stks, ans, g, f, temp):\n        t = k = -1\n        for v in f[nums[i]]:\n            stk = stks[v]\n            if stk and stk[-1][1] > k:\n                t, k = stk[-1]\n        ans[i] = t\n        for j in g[i]:\n            if j != fa:\n                temp.append((i, depth))\n                self.dfs4(j, i, depth + 1, stks, ans, g, f, temp)\n                temp.append((i, depth + 1))\n                temp.pop()\n\ng = defaultdict(list)\nfor u, v in edges:\n    g[u].append(v)\n    g[v].append(u)\nf = defaultdict(list)\nfor i in range(1, 51):\n    for j in range(1, 51):\n        if gcd(i, j) == 1:\n            f[i].append(j)\nstks = defaultdict(list)\nfor v in range(1, 51):\n    stks[v] = []\nans = [-1] * len(nums)\ntemp = []\nself.dfs2(0, -1, 0, stks, ans, g, f)\nself.dfs3(0, -1, 0, stks, ans, g, f)\nself.dfs4(0, -1, 0, stks, ans, g, f, temp)",
  "is_python": true
}