{
  "problem_idx": 2912,
  "task_name": "Number of Ways to Reach Destination in the Grid",
  "markdown_description": "\nYou are given two integers `n` and `m` which represent the size of a **1-indexed** grid. You are also given an integer `k`, a **1-indexed** integer array `source` and a **1-indexed** integer array `dest`, where `source` and `dest` are in the form `[x, y]` representing a cell on the given grid.\n\n\nYou can move through the grid in the following way:\n\n\n* You can go from cell `[x1, y1]` to cell `[x2, y2]` if either `x1 == x2` or `y1 == y2`.\n* Note that you **can't** move to the cell you are already in e.g. `x1 == x2` and `y1 == y2`.\n\n\nReturn *the number of ways you can reach* `dest` *from* `source` *by moving through the grid* **exactly** `k` *times.*\n\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, m = 2, k = 2, source = [1,1], dest = [2,2]\n**Output:** 2\n**Explanation:** There are 2 possible sequences of reaching [2,2] from [1,1]:\n- [1,1] -> [1,2] -> [2,2]\n- [1,1] -> [2,1] -> [2,2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3, m = 4, k = 3, source = [1,2], dest = [2,3]\n**Output:** 9\n**Explanation:** There are 9 possible sequences of reaching [2,3] from [1,2]:\n- [1,2] -> [1,1] -> [1,3] -> [2,3]\n- [1,2] -> [1,1] -> [2,1] -> [2,3]\n- [1,2] -> [1,3] -> [3,3] -> [2,3]\n- [1,2] -> [1,4] -> [1,3] -> [2,3]\n- [1,2] -> [1,4] -> [2,4] -> [2,3]\n- [1,2] -> [2,2] -> [2,1] -> [2,3]\n- [1,2] -> [2,2] -> [2,4] -> [2,3]\n- [1,2] -> [3,2] -> [2,2] -> [2,3]\n- [1,2] -> [3,2] -> [3,3] -> [2,3]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n, m <= 109`\n* `1 <= k\u00a0<= 105`\n* `source.length == dest.length == 2`\n* `1 <= source[1], dest[1] <= n`\n* `1 <= source[2], dest[2] <= m`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfWays(\n        self, n: int, m: int, k: int, source: List[int], dest: List[int]\n    ) -> int:\n        mod = 10**9 + 7\n        f = [1, 0, 0, 0]\n        for _ in range(k):\n            g = [0] * 4\n            g[0] = ((n - 1) * f[1] + (m - 1) * f[2]) % mod\n            g[1] = (f[0] + (n - 2) * f[1] + (m - 1) * f[3]) % mod\n            g[2] = (f[0] + (m - 2) * f[2] + (n - 1) * f[3]) % mod\n            g[3] = (f[1] + f[2] + (n - 2) * f[3] + (m - 2) * f[3]) % mod\n            f = g\n        if source[0] == dest[0]:\n            return f[0] if source[1] == dest[1] else f[2]\n        return f[1] if source[1] == dest[1] else f[3]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def numberOfWays(\n        self, n: int, m: int, k: int, source: List[int], dest: List[int]\n    ) -> int:\n        mod = 10**9 + 7\n        f = [1, 0, 0, 0]\n        for _ in range(k):\n            g = [0] * 4\n            g[0] = ((n - 1) * f[1] + (m - 1) * f[2]) % mod\n            g[1] = (f[0] + (n - 2) * f[1] + (m - 1) * f[3]) % mod\n            g[2] = (f[0] + (m - 2) * f[2] + (n - 1) * f[3]) % mod\n            g[3] = (f[1] + f[2] + (n - 2) * f[3] + (m - 2) * f[3]) % mod\n            f = g\n        if source[0] == dest[0]:\n            return f[0] if source[1] == dest[1] else f[2]\n        return f[1] if source[1] == dest[1] else f[3]\n\n\n\n\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers for n, m, k\n    n = random.randint(2, 100)\n    m = random.randint(2, 100)\n    k = random.randint(1, 100)\n\n    # Generate random source and dest lists\n    source = [random.randint(1, n), random.randint(1, m)]\n    dest = [random.randint(1, n), random.randint(1, m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfWays(n, m, k, source, dest)\n\n    return n, m, k, source, dest, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, m, k, source, dest, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfWays(n, m, k, source, dest) == expected_result\n        print(f\"assert solution.numberOfWays({n}, {m}, {k}, {source}, {dest}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfWays({n}, {m}, {k}, {source}, {dest}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.numberOfWays(37, 12, 51, [1, 11], [36, 4]) == 1033132\nassert solution.numberOfWays(76, 87, 3, [30, 45], [6, 28]) == 477\nassert solution.numberOfWays(99, 84, 52, [44, 83], [38, 36]) == 552298148\nassert solution.numberOfWays(27, 88, 50, [4, 80], [25, 68]) == 575561423\nassert solution.numberOfWays(2, 92, 97, [2, 87], [2, 61]) == 975793998\nassert solution.numberOfWays(65, 65, 96, [10, 43], [34, 55]) == 496014906\nassert solution.numberOfWays(93, 5, 2, [8, 3], [51, 4]) == 2\nassert solution.numberOfWays(42, 47, 47, [7, 33], [30, 8]) == 85460821\nassert solution.numberOfWays(30, 45, 22, [22, 11], [21, 11]) == 899110459\nassert solution.numberOfWays(25, 53, 82, [22, 35], [9, 11]) == 997556296\nassert solution.numberOfWays(6, 46, 36, [4, 31], [6, 2]) == 496131833\nassert solution.numberOfWays(3, 18, 59, [2, 15], [1, 10]) == 734904803\nassert solution.numberOfWays(69, 48, 13, [11, 17], [43, 39]) == 185616500\nassert solution.numberOfWays(70, 44, 71, [5, 43], [70, 13]) == 97586168\nassert solution.numberOfWays(90, 87, 8, [43, 35], [15, 71]) == 810708974\nassert solution.numberOfWays(43, 36, 7, [17, 1], [13, 9]) == 207522955\nassert solution.numberOfWays(26, 69, 52, [19, 61], [15, 11]) == 774701197\nassert solution.numberOfWays(78, 12, 98, [40, 7], [76, 5]) == 645425654\nassert solution.numberOfWays(50, 65, 86, [15, 61], [47, 27]) == 995308204\nassert solution.numberOfWays(44, 23, 52, [18, 19], [40, 10]) == 65383233\nassert solution.numberOfWays(20, 29, 29, [9, 4], [7, 2]) == 478359390\nassert solution.numberOfWays(4, 44, 53, [2, 30], [1, 40]) == 943212799\nassert solution.numberOfWays(86, 46, 94, [43, 30], [38, 3]) == 706607528\nassert solution.numberOfWays(31, 35, 21, [7, 19], [14, 6]) == 583378679\nassert solution.numberOfWays(66, 98, 83, [35, 21], [38, 83]) == 850551330\nassert solution.numberOfWays(74, 27, 80, [17, 18], [26, 10]) == 365713769\nassert solution.numberOfWays(27, 88, 3, [5, 35], [14, 46]) == 333\nassert solution.numberOfWays(82, 40, 8, [10, 21], [7, 40]) == 371926420\nassert solution.numberOfWays(87, 24, 37, [11, 13], [34, 10]) == 137799318\nassert solution.numberOfWays(46, 2, 20, [45, 2], [31, 1]) == 907439131\nassert solution.numberOfWays(85, 82, 78, [63, 29], [38, 82]) == 98533224\nassert solution.numberOfWays(73, 61, 89, [28, 61], [56, 60]) == 925317910\nassert solution.numberOfWays(29, 41, 40, [23, 29], [26, 38]) == 102826100\nassert solution.numberOfWays(93, 77, 80, [16, 50], [34, 60]) == 876025484\nassert solution.numberOfWays(50, 44, 3, [23, 42], [47, 32]) == 270\nassert solution.numberOfWays(52, 40, 57, [34, 33], [44, 16]) == 200054173\nassert solution.numberOfWays(2, 72, 26, [2, 23], [1, 68]) == 397602585\nassert solution.numberOfWays(69, 48, 4, [68, 24], [41, 33]) == 45372\nassert solution.numberOfWays(68, 59, 27, [26, 24], [6, 4]) == 946520528\nassert solution.numberOfWays(25, 92, 40, [14, 53], [14, 65]) == 950746452\nassert solution.numberOfWays(74, 29, 4, [50, 5], [28, 17]) == 35720\nassert solution.numberOfWays(42, 32, 21, [35, 6], [12, 5]) == 925894508\nassert solution.numberOfWays(30, 5, 99, [18, 4], [22, 4]) == 758640812\nassert solution.numberOfWays(91, 23, 96, [72, 1], [28, 16]) == 316639811\nassert solution.numberOfWays(51, 93, 57, [43, 33], [21, 36]) == 236424297\nassert solution.numberOfWays(92, 90, 20, [25, 61], [66, 21]) == 286628155\nassert solution.numberOfWays(44, 26, 94, [20, 22], [38, 17]) == 553853376\nassert solution.numberOfWays(96, 52, 83, [90, 36], [77, 43]) == 63425700\nassert solution.numberOfWays(11, 3, 10, [8, 3], [2, 3]) == 87603955\nassert solution.numberOfWays(56, 36, 60, [5, 20], [56, 26]) == 645542164\nassert solution.numberOfWays(100, 8, 61, [91, 8], [17, 3]) == 385936866\nassert solution.numberOfWays(79, 38, 35, [48, 23], [17, 21]) == 586037994\nassert solution.numberOfWays(87, 17, 87, [48, 9], [33, 4]) == 618978728\nassert solution.numberOfWays(8, 29, 83, [7, 5], [2, 11]) == 226337798\nassert solution.numberOfWays(34, 50, 80, [18, 30], [4, 27]) == 70134334\nassert solution.numberOfWays(81, 69, 47, [17, 16], [21, 27]) == 321088136\nassert solution.numberOfWays(25, 75, 78, [2, 42], [10, 59]) == 545243796\nassert solution.numberOfWays(27, 79, 84, [13, 16], [8, 62]) == 372393809\nassert solution.numberOfWays(56, 12, 1, [12, 12], [7, 6]) == 0\nassert solution.numberOfWays(65, 93, 4, [19, 61], [33, 63]) == 84022\nassert solution.numberOfWays(11, 45, 42, [6, 16], [1, 42]) == 749223969\nassert solution.numberOfWays(87, 60, 22, [71, 42], [40, 37]) == 114187922\nassert solution.numberOfWays(3, 87, 46, [3, 67], [2, 64]) == 397535940\nassert solution.numberOfWays(84, 87, 40, [84, 70], [20, 19]) == 338551618\nassert solution.numberOfWays(55, 83, 30, [10, 13], [10, 80]) == 583583755\nassert solution.numberOfWays(59, 49, 3, [41, 31], [26, 37]) == 312\nassert solution.numberOfWays(52, 14, 18, [16, 4], [32, 5]) == 530583369\nassert solution.numberOfWays(36, 12, 41, [36, 8], [35, 11]) == 823274735\nassert solution.numberOfWays(53, 56, 41, [21, 23], [27, 55]) == 432814475\nassert solution.numberOfWays(8, 25, 98, [1, 17], [3, 10]) == 472189861\nassert solution.numberOfWays(18, 76, 43, [11, 6], [7, 4]) == 665252273\nassert solution.numberOfWays(90, 95, 78, [11, 67], [88, 17]) == 730908580\nassert solution.numberOfWays(95, 48, 38, [13, 34], [32, 12]) == 411285400\nassert solution.numberOfWays(64, 8, 95, [8, 4], [22, 5]) == 615208977\nassert solution.numberOfWays(3, 33, 14, [3, 14], [1, 30]) == 415353427\nassert solution.numberOfWays(64, 94, 6, [14, 42], [6, 75]) == 285508498\nassert solution.numberOfWays(23, 50, 66, [1, 8], [7, 13]) == 561539516\nassert solution.numberOfWays(46, 58, 86, [16, 36], [6, 41]) == 471730283\nassert solution.numberOfWays(24, 52, 84, [6, 50], [15, 26]) == 295654938\nassert solution.numberOfWays(34, 97, 69, [24, 59], [6, 48]) == 11395797\nassert solution.numberOfWays(57, 21, 79, [34, 1], [36, 4]) == 791011316\nassert solution.numberOfWays(47, 26, 21, [18, 19], [29, 14]) == 368067715\nassert solution.numberOfWays(45, 100, 99, [34, 74], [21, 17]) == 484805512\nassert solution.numberOfWays(51, 80, 100, [49, 47], [1, 38]) == 305003364\nassert solution.numberOfWays(28, 44, 34, [17, 11], [14, 8]) == 167185786\nassert solution.numberOfWays(24, 50, 50, [21, 14], [3, 30]) == 788856617\nassert solution.numberOfWays(3, 84, 94, [1, 73], [2, 42]) == 154355516\nassert solution.numberOfWays(19, 84, 38, [19, 74], [15, 42]) == 278723949\nassert solution.numberOfWays(68, 38, 37, [67, 19], [51, 27]) == 371237258\nassert solution.numberOfWays(51, 56, 68, [49, 6], [34, 5]) == 890261284\nassert solution.numberOfWays(51, 69, 33, [15, 12], [13, 50]) == 255765641\nassert solution.numberOfWays(56, 34, 72, [29, 34], [29, 21]) == 32238569\nassert solution.numberOfWays(2, 74, 30, [1, 70], [2, 47]) == 199382860\nassert solution.numberOfWays(54, 21, 13, [36, 19], [32, 1]) == 927220064\nassert solution.numberOfWays(95, 25, 2, [44, 17], [89, 15]) == 2\nassert solution.numberOfWays(46, 55, 92, [5, 37], [13, 25]) == 107146096\nassert solution.numberOfWays(19, 37, 19, [5, 17], [14, 34]) == 185268664\nassert solution.numberOfWays(30, 23, 81, [9, 15], [21, 15]) == 41494284\nassert solution.numberOfWays(42, 65, 65, [1, 11], [24, 23]) == 588925995\nassert solution.numberOfWays(38, 17, 53, [10, 10], [15, 7]) == 143741941",
  "inefficient_solution": "class Solution:\n    def numberOfWays(\n        self, n: int, m: int, k: int, source: List[int], dest: List[int]\n    ) -> int:\n        mod = 10**9 + 7\n        f = [1, 0, 0, 0]\n        for _ in range(k):\n            g = [0] * 250000\n            for i in range(4):\n                for j in range(4):\n                    for x in range(n):\n                        for y in range(m):\n                            if (i == 0 and x != source[0] and x != dest[0]) or \\\n                               (i == 1 and x == source[0] and x != dest[0]) or \\\n                               (i == 2 and x != source[0] and x == dest[0]) or \\\n                               (i == 3 and x == source[0] and x == dest[0]):\n                                continue\n                            if (j == 0 and y != source[1] and y != dest[1]) or \\\n                               (j == 1 and y == source[1] and y != dest[1]) or \\\n                               (j == 2 and y != source[1] and y == dest[1]) or \\\n                               (j == 3 and y == source[1] and y == dest[1]):\n                                continue\n                            if (j == 0 and x == source[0] and x != dest[0]) or \\\n                               (j == 1 and x == source[0] and x == dest[0]) or \\\n                               (j == 2 and x != source[0] and x == dest[0]) or \\\n                               (j == 3 and x == source[0] and x == dest[0]):\n                                continue\n                            if (i == 0 and y == source[1] and y != dest[1]) or \\\n                               (i == 1 and y == source[1] and y == dest[1]) or \\\n                               (i == 2 and y != source[1] and y == dest[1]) or \\\n                               (i == 3 and y == source[1] and y == dest[1]):\n                                continue\n                            g[(i*4)+j] = ((n-1)*(f[(i*4)+1]) + (m-1)*(f[(i*4)+2])) % mod \\\n                                        if i == 0 else \\\n                                        ((n-2)*(f[(i*4)+1]) + (m-1)*(f[(i*4)+3])) % mod \\\n                                        if i == 1 else \\\n                                        ((n-1)*(f[(i*4)+2]) + (m-2)*(f[(i*4)+3])) % mod \\\n                                        if i == 2 else \\\n                                        ((n-2)*(f[(i*4)+1]) + (m-2)*(f[(i*4)+3])) % mod\n            f = g\n        if source[0] == dest[0]:\n            return f[(0*4)+1] if source[1] == dest[1] else f[(0*4)+2]\n        return f[(1*4)+1] if source[1] == dest[1] else f[(3*4)+3]",
  "is_python": true
}