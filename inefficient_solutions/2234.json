{
  "problem_idx": 2234,
  "task_name": "Maximum Total Beauty of the Gardens",
  "markdown_description": "\nAlice is a caretaker of `n` gardens and she wants to plant flowers to maximize the total beauty of all her gardens.\n\n\nYou are given a **0-indexed** integer array `flowers` of size `n`, where `flowers[i]` is the number of flowers already planted in the `ith` garden. Flowers that are already planted **cannot** be removed. You are then given another integer `newFlowers`, which is the **maximum** number of flowers that Alice can additionally plant. You are also given the integers `target`, `full`, and `partial`.\n\n\nA garden is considered **complete** if it has **at least** `target` flowers. The **total beauty** of the gardens is then determined as the **sum** of the following:\n\n\n* The number of **complete** gardens multiplied by `full`.\n* The **minimum** number of flowers in any of the **incomplete** gardens multiplied by `partial`. If there are no incomplete gardens, then this value will be `0`.\n\n\nReturn *the **maximum** total beauty that Alice can obtain after planting at most* `newFlowers` *flowers.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1\n**Output:** 14\n**Explanation:** Alice can plant\n- 2 flowers in the 0th garden\n- 3 flowers in the 1st garden\n- 1 flower in the 2nd garden\n- 1 flower in the 3rd garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6\n**Output:** 30\n**Explanation:** Alice can plant\n- 3 flowers in the 0th garden\n- 0 flowers in the 1st garden\n- 0 flowers in the 2nd garden\n- 2 flowers in the 3rd garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= flowers.length <= 105`\n* `1 <= flowers[i], target <= 105`\n* `1 <= newFlowers <= 1010`\n* `1 <= full, partial <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumBeauty(\n        self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int\n    ) -> int:\n        flowers.sort()\n        n = len(flowers)\n        s = list(accumulate(flowers, initial=0))\n        ans, i = 0, n - bisect_left(flowers, target)\n        for x in range(i, n + 1):\n            newFlowers -= 0 if x == 0 else max(target - flowers[n - x], 0)\n            if newFlowers < 0:\n                break\n            l, r = 0, n - x - 1\n            while l < r:\n                mid = (l + r + 1) >> 1\n                if flowers[mid] * (mid + 1) - s[mid + 1] <= newFlowers:\n                    l = mid\n                else:\n                    r = mid - 1\n            y = 0\n            if r != -1:\n                cost = flowers[l] * (l + 1) - s[l + 1]\n                y = min(flowers[l] + (newFlowers - cost) // (l + 1), target - 1)\n            ans = max(ans, x * full + y * partial)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom itertools import accumulate\nfrom bisect import bisect_left\nfrom typing import List\n\n# Task solution class\nclass Solution:\n    def maximumBeauty(\n        self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int\n    ) -> int:\n        flowers.sort()\n        n = len(flowers)\n        s = list(accumulate(flowers, initial=0))\n        ans, i = 0, n - bisect_left(flowers, target)\n        for x in range(i, n + 1):\n            newFlowers -= 0 if x == 0 else max(target - flowers[n - x], 0)\n            if newFlowers < 0:\n                break\n            l, r = 0, n - x - 1\n            while l < r:\n                mid = (l + r + 1) >> 1\n                if flowers[mid] * (mid + 1) - s[mid + 1] <= newFlowers:\n                    l = mid\n                else:\n                    r = mid - 1\n            y = 0\n            if r != -1:\n                cost = flowers[l] * (l + 1) - s[l + 1]\n                y = min(flowers[l] + (newFlowers - cost) // (l + 1), target - 1)\n            ans = max(ans, x * full + y * partial)\n        return ans\n\n# Test case generator\nclass TestCaseGenerator:\n    def __init__(self):\n        self.solution = Solution()\n\n    def generate_test_case(self):\n        # Generate random numbers list\n        flowers = random.sample(range(1, 101), random.randint(2, 10))\n\n        # Generate the maximum number of new flowers that Alice can plant\n        newFlowers = random.randint(1, 101)\n\n        # Generate the target number of flowers for completeness\n        target = random.randint(1, 101)\n\n        # Generate random values for full and partial beauty\n        full = random.randint(1, 101)\n        partial = random.randint(1, 101)\n\n        # Calculate the expected result using the provided Solution class\n        expected_result = self.solution.maximumBeauty(flowers, newFlowers, target, full, partial)\n\n        return flowers, newFlowers, target, full, partial, expected_result\n\n    def test_generated_test_cases(self, num_tests):\n        test_case_generator_results = []\n        for i in range(num_tests):\n            flowers, newFlowers, target, full, partial, expected_result = self.generate_test_case()\n            solution = Solution()\n            assert solution.maximumBeauty(flowers, newFlowers, target, full, partial) == expected_result\n            print(f\"assert solution.maximumBeauty({flowers}, {newFlowers}, {target}, {full}, {partial}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.maximumBeauty({flowers}, {newFlowers}, {target}, {full}, {partial}) == {expected_result}\")\n        return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator = TestCaseGenerator()\n    test_case_generator_results = test_case_generator.test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumBeauty([1, 6, 29, 53, 54, 85, 91, 93, 96, 100], 3, 56, 22, 46) == 294\nassert solution.maximumBeauty([20, 50, 60, 68], 6, 31, 39, 94) == 2561\nassert solution.maximumBeauty([13, 44, 54, 74, 77, 79, 91], 43, 73, 88, 57) == 3202\nassert solution.maximumBeauty([2, 6, 41, 51, 80], 72, 1, 30, 38) == 150\nassert solution.maximumBeauty([5, 26, 34, 51, 77, 87, 88], 91, 73, 48, 67) == 3561\nassert solution.maximumBeauty([9, 14, 19, 41, 66, 73, 80, 81, 90], 39, 79, 39, 59) == 1710\nassert solution.maximumBeauty([10, 28, 29, 37, 42, 50, 57, 91, 92], 12, 20, 62, 61) == 1655\nassert solution.maximumBeauty([13, 18, 68], 73, 20, 98, 25) == 671\nassert solution.maximumBeauty([4, 35, 38, 69], 81, 86, 82, 63) == 3276\nassert solution.maximumBeauty([2, 5, 24, 37, 41, 48, 50, 69, 78], 96, 20, 9, 46) == 946\nassert solution.maximumBeauty([2, 9, 16, 17, 23, 37, 39, 77, 82, 95], 47, 28, 34, 78) == 1886\nassert solution.maximumBeauty([3, 74], 97, 56, 35, 65) == 3610\nassert solution.maximumBeauty([3, 5, 7, 36, 72, 87, 100], 75, 51, 10, 82) == 2490\nassert solution.maximumBeauty([79, 100], 54, 92, 63, 62) == 5705\nassert solution.maximumBeauty([9, 19, 50, 58, 69, 71, 75, 78, 84, 93], 31, 53, 60, 41) == 1628\nassert solution.maximumBeauty([9, 17, 28, 52, 57, 65, 89, 96, 98], 3, 58, 87, 94) == 1476\nassert solution.maximumBeauty([1, 9, 26, 27, 29, 56, 61, 77, 92, 98], 67, 5, 83, 76) == 1051\nassert solution.maximumBeauty([4, 32, 53, 59, 61, 65, 75, 76, 81, 88], 96, 77, 96, 15) == 1326\nassert solution.maximumBeauty([38, 44, 46, 60], 91, 15, 79, 3) == 316\nassert solution.maximumBeauty([31, 37, 65, 72, 73, 94], 33, 27, 33, 23) == 198\nassert solution.maximumBeauty([32, 48, 50, 57, 68, 72, 78], 57, 101, 8, 4) == 244\nassert solution.maximumBeauty([24, 36, 76], 35, 30, 37, 92) == 2742\nassert solution.maximumBeauty([69, 99], 52, 101, 7, 15) == 1507\nassert solution.maximumBeauty([14, 23, 25, 53, 72], 47, 19, 101, 65) == 1574\nassert solution.maximumBeauty([12, 32, 47, 58, 69], 78, 13, 61, 20) == 484\nassert solution.maximumBeauty([61, 74], 92, 96, 16, 53) == 5051\nassert solution.maximumBeauty([6, 13, 19, 30, 36, 89, 91, 95, 96], 93, 72, 67, 28) == 1360\nassert solution.maximumBeauty([1, 16, 41, 66, 72], 55, 32, 36, 86) == 2810\nassert solution.maximumBeauty([21, 54, 74, 78], 4, 77, 24, 100) == 2524\nassert solution.maximumBeauty([67, 89], 30, 83, 33, 11) == 935\nassert solution.maximumBeauty([15, 23, 38, 45, 49, 56, 57, 73, 82], 47, 9, 84, 17) == 756\nassert solution.maximumBeauty([15, 21, 34, 44, 54, 96], 82, 60, 81, 9) == 639\nassert solution.maximumBeauty([62, 68], 55, 99, 45, 54) == 4968\nassert solution.maximumBeauty([24, 42, 45, 52, 57, 98], 80, 34, 8, 76) == 2548\nassert solution.maximumBeauty([37, 92], 34, 84, 30, 98) == 6988\nassert solution.maximumBeauty([37, 54, 78, 80, 89, 96], 12, 41, 12, 21) == 900\nassert solution.maximumBeauty([21, 38, 56, 58, 73, 82, 91, 99, 100], 63, 50, 84, 88) == 4984\nassert solution.maximumBeauty([12, 15, 19, 39, 44, 76, 98], 40, 80, 11, 78) == 2195\nassert solution.maximumBeauty([8, 19, 33, 50, 66, 70, 76, 82, 89, 96], 77, 90, 72, 75) == 3519\nassert solution.maximumBeauty([1, 5, 10, 13, 23, 29, 31, 32, 53, 72], 37, 19, 9, 2) == 100\nassert solution.maximumBeauty([14, 42, 53], 1, 7, 82, 95) == 246\nassert solution.maximumBeauty([6, 18, 25, 43, 47, 67], 83, 74, 96, 93) == 3999\nassert solution.maximumBeauty([3, 40, 73, 89, 97], 73, 59, 54, 97) == 5788\nassert solution.maximumBeauty([2, 21, 25, 46, 53, 57, 62], 46, 67, 43, 64) == 1984\nassert solution.maximumBeauty([29, 44, 59, 61, 83, 86, 92], 77, 58, 45, 29) == 1923\nassert solution.maximumBeauty([26, 92, 100], 39, 33, 57, 6) == 306\nassert solution.maximumBeauty([1, 10, 12, 36, 44, 52, 63, 95], 29, 62, 92, 36) == 796\nassert solution.maximumBeauty([14, 51, 65, 99], 80, 3, 38, 25) == 152\nassert solution.maximumBeauty([25, 46], 86, 51, 88, 73) == 3738\nassert solution.maximumBeauty([17, 74, 93], 94, 91, 63, 88) == 8046\nassert solution.maximumBeauty([12, 26, 34, 36, 39, 50, 51, 61, 72, 99], 53, 41, 76, 17) == 1296\nassert solution.maximumBeauty([24, 27, 43, 54, 69, 89, 90, 97, 98], 31, 52, 85, 25) == 1535\nassert solution.maximumBeauty([41, 46, 48, 55, 60, 71, 98], 59, 21, 18, 37) == 126\nassert solution.maximumBeauty([9, 43], 85, 23, 37, 94) == 2105\nassert solution.maximumBeauty([6, 14, 30, 37, 38, 43, 95], 41, 35, 44, 67) == 2186\nassert solution.maximumBeauty([6, 56, 86, 88], 76, 40, 6, 83) == 3255\nassert solution.maximumBeauty([21, 37, 86, 92, 96], 7, 75, 97, 80) == 2531\nassert solution.maximumBeauty([5, 28, 39, 46, 50, 62, 68, 71, 96], 101, 77, 71, 64) == 3470\nassert solution.maximumBeauty([22, 35, 36, 50, 100], 68, 96, 92, 6) == 412\nassert solution.maximumBeauty([4, 9, 32, 42, 66, 72, 73, 82], 9, 75, 72, 93) == 1095\nassert solution.maximumBeauty([2, 10, 11, 32, 46, 48, 64, 74, 79, 93], 12, 83, 94, 23) == 418\nassert solution.maximumBeauty([3, 22, 26, 31, 33, 37, 79, 86, 87], 7, 75, 62, 54) == 726\nassert solution.maximumBeauty([4, 14, 29, 41, 48, 50, 64, 67, 69], 52, 15, 49, 90) == 1652\nassert solution.maximumBeauty([65, 94], 88, 65, 34, 35) == 68\nassert solution.maximumBeauty([1, 4, 48, 55, 74, 94], 36, 65, 51, 10) == 303\nassert solution.maximumBeauty([20, 65], 90, 98, 73, 23) == 2001\nassert solution.maximumBeauty([10, 56], 100, 64, 22, 68) == 4306\nassert solution.maximumBeauty([32, 67], 2, 96, 17, 3) == 102\nassert solution.maximumBeauty([1, 17, 60, 69, 76], 10, 45, 19, 62) == 739\nassert solution.maximumBeauty([10, 19, 55, 59, 60, 64, 67], 90, 21, 64, 99) == 2364\nassert solution.maximumBeauty([11, 14, 32, 39, 66, 85], 85, 84, 64, 95) == 4339\nassert solution.maximumBeauty([28, 32, 36, 37, 44, 68, 72, 97, 99], 58, 87, 72, 49) == 2447\nassert solution.maximumBeauty([37, 52, 54, 61, 63, 65, 84, 86, 89, 100], 34, 60, 14, 6) == 468\nassert solution.maximumBeauty([13, 32, 48, 67, 72, 73, 99], 20, 12, 39, 81) == 273\nassert solution.maximumBeauty([11, 25, 48, 57, 63, 64, 70, 76, 95], 1, 93, 24, 97) == 1188\nassert solution.maximumBeauty([70, 75, 78], 73, 97, 65, 14) == 1474\nassert solution.maximumBeauty([32, 98], 13, 8, 55, 34) == 110\nassert solution.maximumBeauty([3, 15, 29, 37, 58, 69, 74, 76, 99], 13, 9, 87, 25) == 896\nassert solution.maximumBeauty([4, 25, 45, 60, 67, 79, 91, 92], 28, 65, 70, 63) == 2044\nassert solution.maximumBeauty([9, 36, 39, 44, 64, 67, 78, 85], 51, 61, 49, 35) == 1736\nassert solution.maximumBeauty([16, 28, 31, 38, 41, 71, 80], 12, 86, 61, 69) == 1932\nassert solution.maximumBeauty([32, 87], 45, 66, 25, 57) == 3730\nassert solution.maximumBeauty([7, 18, 35, 37, 47, 51, 59, 82, 90, 92], 78, 62, 89, 58) == 2850\nassert solution.maximumBeauty([35, 36, 49, 60, 63, 87, 92, 99], 96, 75, 38, 74) == 5072\nassert solution.maximumBeauty([11, 21, 22, 53, 83], 36, 98, 26, 13) == 390\nassert solution.maximumBeauty([2, 28, 30, 40, 47, 49, 50, 58, 72], 82, 97, 9, 35) == 1575\nassert solution.maximumBeauty([86, 94], 68, 49, 71, 89) == 142\nassert solution.maximumBeauty([14, 22, 23, 35, 46, 49, 54, 57, 85, 93], 62, 37, 75, 11) == 1071\nassert solution.maximumBeauty([8, 27, 34, 46, 56], 50, 61, 56, 49) == 1918\nassert solution.maximumBeauty([7, 23, 75], 15, 73, 11, 28) == 627\nassert solution.maximumBeauty([3, 15, 31, 49, 55, 56, 64, 68, 97], 19, 57, 75, 7) == 527\nassert solution.maximumBeauty([63, 65, 74], 56, 7, 77, 18) == 231\nassert solution.maximumBeauty([9, 12, 20, 30, 68, 73, 82], 81, 89, 78, 92) == 3496\nassert solution.maximumBeauty([74, 86], 5, 66, 26, 96) == 52\nassert solution.maximumBeauty([12, 19, 26, 31, 38, 44, 57, 62, 70], 49, 31, 7, 60) == 1856\nassert solution.maximumBeauty([1, 58, 69, 74, 76], 61, 31, 77, 11) == 638\nassert solution.maximumBeauty([9, 81], 52, 60, 87, 81) == 4866\nassert solution.maximumBeauty([61, 71, 79], 37, 70, 2, 67) == 4627\nassert solution.maximumBeauty([65, 71], 8, 67, 12, 41) == 2718\nassert solution.maximumBeauty([1, 32, 38, 61, 81, 83], 11, 73, 26, 5) == 112",
  "inefficient_solution": "class Solution:\n    def maximumBeauty(\n        self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int\n    ) -> int:\n        n = len(flowers)\n        max_beauty = 0\n        for i in range(newFlowers + 1):\n            num_completions = 0\n            min_flowers = 1000000\n            for j in range(n):\n                min_flowers = min(min_flowers, flowers[j])\n                cost = target - flowers[j]\n                if cost <= 0:\n                    num_completions += 1\n                else:\n                    if i >= cost:\n                        num_completions += 1\n                        cost = 0\n                    else:\n                        cost -= i\n                        flowers[j] += i\n                        i = 0\n                        min_flowers = min(min_flowers, flowers[j])\n            if i == 0:\n                max_beauty = max(max_beauty, num_completions * full + min_flowers * partial)\n        return max_beauty",
  "is_python": true
}