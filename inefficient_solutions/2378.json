{
  "problem_idx": 2378,
  "task_name": "Choose Edges to Maximize Score in a Tree",
  "markdown_description": "\nYou are given a **weighted** tree consisting of `n` nodes numbered from `0` to `n - 1`.\n\n\nThe tree is **rooted** at node `0` and represented with a **2D** array `edges` of size `n` where `edges[i] = [pari, weighti]` indicates that node `pari` is the **parent** of node `i`, and the edge between them has a weight equal to `weighti`. Since the root does **not** have a parent, you have `edges[0] = [-1, -1]`.\n\n\nChoose some edges from the tree such that no two chosen edges are **adjacent** and the **sum** of the weights of the chosen edges is maximized.\n\n\nReturn *the **maximum** sum of the chosen edges*.\n\n\n**Note**:\n\n\n* You are allowed to **not** choose any edges in the tree, the sum of weights in this case will be `0`.\n* Two edges `Edge1` and `Edge2` in the tree are **adjacent** if they have a **common** node.\n\t+ In other words, they are adjacent if `Edge1` connects nodes `a` and `b` and `Edge2` connects nodes `b` and `c`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2378.Choose%20Edges%20to%20Maximize%20Score%20in%20a%20Tree/images/treedrawio.png)\n\n```\n\n**Input:** edges = [[-1,-1],[0,5],[0,10],[2,6],[2,4]]\n**Output:** 11\n**Explanation:** The above diagram shows the edges that we have to choose colored in red.\nThe total score is 5 + 6 = 11.\nIt can be shown that no better score can be obtained.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2378.Choose%20Edges%20to%20Maximize%20Score%20in%20a%20Tree/images/treee1293712983719827.png)\n\n```\n\n**Input:** edges = [[-1,-1],[0,5],[0,-6],[0,7]]\n**Output:** 7\n**Explanation:** We choose the edge with weight 7.\nNote that we cannot choose more than one edge because all edges are adjacent to each other.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == edges.length`\n* `1 <= n <= 105`\n* `edges[i].length == 2`\n* `par0 == weight0 == -1`\n* `0 <= pari <= n - 1` for all `i >= 1`.\n* `pari != i`\n* `-106 <= weighti <= 106` for all `i >= 1`.\n* `edges` represents a valid tree.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxScore(self, edges: List[List[int]]) -> int:\n        def dfs(i):\n            a = b = t = 0\n            for j, w in g[i]:\n                x, y = dfs(j)\n                a += y\n                b += y\n                t = max(t, x - y + w)\n            b += t\n            return a, b\n\n        g = defaultdict(list)\n        for i, (p, w) in enumerate(edges[1:], 1):\n            g[p].append((i, w))\n        return dfs(0)[1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxScore(self, edges):\n        def dfs(i):\n            a = b = t = 0\n            for j, w in g[i]:\n                x, y = dfs(j)\n                a += y\n                b += y\n                t = max(t, x - y + w)\n            b += t\n            return a, b\n\n        g = defaultdict(list)\n        for i, (p, w) in enumerate(edges[1:], 1):\n            g[p].append((i, w))\n        return dfs(0)[1]\n\ndef generate_test_case():\n    solution = Solution()\n    edges = [[-1, -1]]  # Add the first edge to the edges list\n    \n    # Generate random edges with weights\n    for i in range(1, random.randint(2, 10)):\n        parent = random.randint(0, i - 1)\n        weight = random.randint(-10**6, 10**6)\n        edges.append([parent, weight])\n    \n    expected_result = solution.maxScore(edges)\n    return edges, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        edges, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxScore(edges) == expected_result\n        print(f\"assert solution.maxScore({edges}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxScore({edges}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxScore([[-1, -1], [0, 171176], [1, -668758], [1, 809968], [2, -544480], [2, 979717], [1, -190835], [2, 187932]]) == 1789685\nassert solution.maxScore([[-1, -1], [0, -82289], [0, -184885], [0, 709419], [3, 480959], [4, -534993], [1, -901820], [6, 563844], [4, -58369], [4, -503156]]) == 1273263\nassert solution.maxScore([[-1, -1], [0, -766194], [1, 354129], [0, 225590], [3, -937060]]) == 579719\nassert solution.maxScore([[-1, -1], [0, 542541], [0, 825102], [0, -515906], [0, -70352], [3, -82599], [5, 613511]]) == 1438613\nassert solution.maxScore([[-1, -1], [0, 95351], [1, 68806], [0, 174364], [0, -780783], [3, 154372]]) == 249723\nassert solution.maxScore([[-1, -1], [0, -789255], [0, -216822], [0, -569297], [1, -311467], [4, 311083], [4, 806124], [0, 774793], [4, 506765]]) == 1580917\nassert solution.maxScore([[-1, -1], [0, -268764], [0, -16707], [0, -792303], [2, -865640]]) == 0\nassert solution.maxScore([[-1, -1], [0, 534992], [1, 86836], [0, -484874], [1, -146550], [4, 145149], [4, -662521], [2, 503772], [7, 936835], [8, 697804]]) == 1881717\nassert solution.maxScore([[-1, -1], [0, -211354], [1, -359616], [2, -15351], [0, -513548]]) == 0\nassert solution.maxScore([[-1, -1], [0, 727505]]) == 727505\nassert solution.maxScore([[-1, -1], [0, 95775], [0, -667800], [2, -880964], [0, -781348]]) == 95775\nassert solution.maxScore([[-1, -1], [0, 56918], [0, -359414], [0, 237787], [2, 817756]]) == 1055543\nassert solution.maxScore([[-1, -1], [0, -321164], [1, -329856], [0, 453437], [0, 761264], [1, 900578], [0, 575432], [0, -278564], [5, 256504]]) == 1661842\nassert solution.maxScore([[-1, -1], [0, -417412], [0, 633325], [2, -459284], [2, -254400]]) == 633325\nassert solution.maxScore([[-1, -1], [0, 730279], [1, 332804], [0, -448213], [1, 632758], [3, -787230], [5, -686820]]) == 730279\nassert solution.maxScore([[-1, -1], [0, -284890], [1, 604313], [2, -799539], [2, -988250], [4, 949862]]) == 1554175\nassert solution.maxScore([[-1, -1], [0, 381651], [0, -941522]]) == 381651\nassert solution.maxScore([[-1, -1], [0, 912075], [0, 823523], [2, -802240], [1, 384889], [4, -715737], [2, -757273], [0, -293793], [2, 759973], [2, -751845]]) == 1672048\nassert solution.maxScore([[-1, -1], [0, 715319]]) == 715319\nassert solution.maxScore([[-1, -1], [0, -383050], [1, -306595], [0, -226615], [2, 380722]]) == 380722\nassert solution.maxScore([[-1, -1], [0, -116886], [1, 377287], [0, -499288], [1, 757386], [0, 939967], [5, -222719]]) == 1697353\nassert solution.maxScore([[-1, -1], [0, 14897], [1, -648764], [2, -442952], [1, -133117]]) == 14897\nassert solution.maxScore([[-1, -1], [0, 282127], [0, 491313], [0, -652805], [3, 220407], [1, -978372], [4, -793337], [1, -441537]]) == 711720\nassert solution.maxScore([[-1, -1], [0, -900896], [1, 677265], [1, 140300], [1, 99529], [2, -661526], [0, -255349], [2, 820706], [5, 385185]]) == 1346191\nassert solution.maxScore([[-1, -1], [0, 928889], [1, -870298]]) == 928889\nassert solution.maxScore([[-1, -1], [0, -786500], [0, -214008], [2, -672124], [3, -443981], [4, 355159]]) == 355159\nassert solution.maxScore([[-1, -1], [0, -945258], [0, 349188], [2, -444375], [0, -825370], [0, 252511], [0, -749952], [1, -472360], [7, 80386], [5, -168574]]) == 429574\nassert solution.maxScore([[-1, -1], [0, 786839], [0, 734818], [0, -847776], [3, 517755], [0, 566764], [3, -869124]]) == 1304594\nassert solution.maxScore([[-1, -1], [0, -810269], [0, 480514], [2, 380258], [3, 342832], [3, -148103], [0, 483427], [3, -822651], [2, -564519], [1, 660230]]) == 1523915\nassert solution.maxScore([[-1, -1], [0, 997529], [1, -959906], [0, 874828]]) == 997529\nassert solution.maxScore([[-1, -1], [0, -847890], [1, -75770], [1, -248918]]) == 0\nassert solution.maxScore([[-1, -1], [0, 235363], [1, 115662]]) == 235363\nassert solution.maxScore([[-1, -1], [0, -802168], [0, -72501], [0, 222970], [3, -612359], [1, 190965], [1, -70208], [3, 251758], [4, 364286], [2, 359289]]) == 1166298\nassert solution.maxScore([[-1, -1], [0, 735985], [1, -902912], [1, 536710], [1, -997448], [4, 314445], [1, -734988], [0, 97510], [1, 309553], [4, -102722]]) == 1050430\nassert solution.maxScore([[-1, -1], [0, 664904], [1, -279427], [1, 256903], [0, 385829], [3, 262883], [5, 879651]]) == 1544555\nassert solution.maxScore([[-1, -1], [0, 648907], [1, -878148], [1, 98791], [3, 303567], [2, 575641], [1, 129056], [5, -230833], [1, 745502], [0, -528857]]) == 1624710\nassert solution.maxScore([[-1, -1], [0, 301111], [1, 968517], [1, 332075], [3, 405937], [3, 204290], [1, -30053], [1, 18151], [3, 156655], [4, -769782]]) == 1374454\nassert solution.maxScore([[-1, -1], [0, -108318], [1, -481952], [2, -350861], [2, -825836]]) == 0\nassert solution.maxScore([[-1, -1], [0, -834282], [1, -839196], [0, 457051], [1, -247134], [3, -62060], [3, 586333], [1, -822030], [7, 955062]]) == 1541395\nassert solution.maxScore([[-1, -1], [0, -281050], [0, 194760], [0, -484926], [3, 845498], [0, 785899], [3, 977825], [3, -482752], [6, -653600], [0, 359694]]) == 1763724\nassert solution.maxScore([[-1, -1], [0, -594109], [1, -711036], [2, -982539], [3, 355707], [4, 541007], [5, 85141], [0, 743136]]) == 1284143\nassert solution.maxScore([[-1, -1], [0, -674564], [1, 8054], [0, 486972], [1, 591582], [0, 50539]]) == 1078554\nassert solution.maxScore([[-1, -1], [0, 117111], [1, -64465]]) == 117111\nassert solution.maxScore([[-1, -1], [0, 801969], [1, -895164], [2, -730539], [0, -130895], [4, -650965]]) == 801969\nassert solution.maxScore([[-1, -1], [0, -912118], [1, -732728], [2, 939534], [3, 553784], [3, -951700], [4, 106197], [4, 323860], [1, 288963]]) == 1552357\nassert solution.maxScore([[-1, -1], [0, -890506]]) == 0\nassert solution.maxScore([[-1, -1], [0, 390927], [0, -531019], [2, 249418], [3, 135567], [1, 114943], [5, -322612], [2, 637438], [2, 726428]]) == 1252922\nassert solution.maxScore([[-1, -1], [0, 584884], [0, -514630], [0, -983190], [1, 589589], [3, -198862], [1, -762268], [0, -730494], [3, 770814]]) == 1360403\nassert solution.maxScore([[-1, -1], [0, -37670], [0, 915717], [0, 691822], [0, -346653], [1, 845883], [5, 737952]]) == 1761600\nassert solution.maxScore([[-1, -1], [0, 586380], [1, 446642], [1, 367395], [3, -436476], [2, -172896], [1, -473482], [4, -806356], [3, 506347]]) == 1092727\nassert solution.maxScore([[-1, -1], [0, 396076], [1, -79280], [1, 536428], [1, -736106], [3, -219371], [2, -896693], [6, 222332]]) == 758760\nassert solution.maxScore([[-1, -1], [0, 115849]]) == 115849\nassert solution.maxScore([[-1, -1], [0, 666906], [0, 418283], [0, 537378], [3, -5525]]) == 666906\nassert solution.maxScore([[-1, -1], [0, -589648], [0, 800760], [1, -484984], [1, -3094], [3, -138523], [5, -304752], [6, -184937], [5, 164467]]) == 965227\nassert solution.maxScore([[-1, -1], [0, 692520], [0, -479482], [2, -929914]]) == 692520\nassert solution.maxScore([[-1, -1], [0, -876486], [0, 854941], [0, -464204], [1, -353130], [3, -618828], [3, -675410], [4, 197527], [1, -935220], [7, -759836]]) == 1052468\nassert solution.maxScore([[-1, -1], [0, 843820], [0, -903052], [1, 286755], [0, -712097], [4, 595766], [1, 977014], [5, 582695], [0, -974302]]) == 1572780\nassert solution.maxScore([[-1, -1], [0, 156992], [1, -157642], [1, 369024]]) == 369024\nassert solution.maxScore([[-1, -1], [0, -518170], [1, -147056]]) == 0\nassert solution.maxScore([[-1, -1], [0, 63789], [0, 452717], [0, -730147], [2, -627242], [2, -347287], [5, -957949], [1, 206254], [7, -670985], [1, 485129]]) == 937846\nassert solution.maxScore([[-1, -1], [0, 706170], [1, 33737], [2, -189637], [2, -43819], [0, -321170], [4, -287746]]) == 706170\nassert solution.maxScore([[-1, -1], [0, -466336], [1, -711175], [0, -220854], [1, -355157], [2, 487239], [1, -141387], [0, -89580], [7, 984969]]) == 1472208\nassert solution.maxScore([[-1, -1], [0, -925473], [1, -102756], [0, 581272], [2, -883413]]) == 581272\nassert solution.maxScore([[-1, -1], [0, 243519], [1, 734930]]) == 734930\nassert solution.maxScore([[-1, -1], [0, 867330], [1, -935155], [0, 453304], [1, -392126], [3, -511800], [4, -352740]]) == 867330\nassert solution.maxScore([[-1, -1], [0, -828355], [1, 121980], [2, -879011], [3, 784451], [0, -402839], [5, -525700], [5, 982187]]) == 1888618\nassert solution.maxScore([[-1, -1], [0, -671047], [0, 652134], [1, 919784], [3, -962243]]) == 1571918\nassert solution.maxScore([[-1, -1], [0, 746390], [0, 491041], [1, -543711], [1, 37448], [3, 582280]]) == 1328670\nassert solution.maxScore([[-1, -1], [0, -590481], [0, 859519], [0, 415961], [0, 725275], [2, -725279], [0, 408301], [2, 325917], [7, 476815]]) == 1336334\nassert solution.maxScore([[-1, -1], [0, 238728], [0, 560256], [2, 892114], [1, 596015], [2, 232952], [0, 28755]]) == 1516884\nassert solution.maxScore([[-1, -1], [0, 431066], [1, 524491]]) == 524491\nassert solution.maxScore([[-1, -1], [0, -776441], [1, 582635]]) == 582635\nassert solution.maxScore([[-1, -1], [0, -583157], [0, 167841], [2, 714465], [3, 749230], [2, 410320]]) == 1159550\nassert solution.maxScore([[-1, -1], [0, 856240], [0, -590771], [0, 229129], [1, 436904], [0, 847501], [0, -672042], [6, -6427], [1, 826210], [7, 58192]]) == 1731903\nassert solution.maxScore([[-1, -1], [0, 703098], [1, 187913], [1, -62958], [3, -719550], [2, -763538], [3, -135458]]) == 703098\nassert solution.maxScore([[-1, -1], [0, 552047], [1, -206547], [2, -887628], [2, -919683], [1, 979768], [5, 348183], [2, 807568], [1, -504496], [3, -469336]]) == 1787336\nassert solution.maxScore([[-1, -1], [0, 553997], [0, 934665], [0, -147520], [3, -440681], [0, 164074], [3, -561561], [2, -573482], [0, 791022]]) == 934665\nassert solution.maxScore([[-1, -1], [0, -198493], [0, 431951], [0, -658928], [3, 631429], [2, 945273], [2, 444217], [4, 163935], [1, 69407], [5, 496414]]) == 1646109\nassert solution.maxScore([[-1, -1], [0, 271111], [1, 416606], [2, 215733], [0, 533382], [3, 935700], [0, -541605], [6, 156946]]) == 2042634\nassert solution.maxScore([[-1, -1], [0, 854453], [1, -867468], [0, 330444], [2, 788346], [0, 321120], [0, 309054], [5, 724773], [1, -319737]]) == 2367572\nassert solution.maxScore([[-1, -1], [0, 621569], [1, 206629], [2, -14359], [0, -668984]]) == 621569\nassert solution.maxScore([[-1, -1], [0, -603370], [1, -854798], [2, -719577], [2, -216069], [3, 741357], [1, 180588], [0, -146686], [3, -158861], [2, 931928]]) == 1853873\nassert solution.maxScore([[-1, -1], [0, 840419]]) == 840419\nassert solution.maxScore([[-1, -1], [0, 282700], [0, -114834], [0, 792838]]) == 792838\nassert solution.maxScore([[-1, -1], [0, 99353], [0, 414431], [1, -219449]]) == 414431\nassert solution.maxScore([[-1, -1], [0, 463383], [0, 134097]]) == 463383\nassert solution.maxScore([[-1, -1], [0, -749967], [0, 896036], [1, 727991], [0, 511172]]) == 1624027\nassert solution.maxScore([[-1, -1], [0, 5222], [0, 262486], [1, -251393], [0, 794046], [3, 850935], [5, -83607], [6, -67691], [7, 240198], [8, 738933]]) == 2383914\nassert solution.maxScore([[-1, -1], [0, 285155]]) == 285155\nassert solution.maxScore([[-1, -1], [0, -578725], [0, -290845], [0, 598920], [1, -209453], [0, 916475], [1, 320028], [3, -825278], [4, -946335]]) == 1236503\nassert solution.maxScore([[-1, -1], [0, -138515], [0, -99772], [2, 954484], [1, -140866], [0, 981114], [5, -814642], [1, 193303], [1, 404419], [5, 231766]]) == 2340017\nassert solution.maxScore([[-1, -1], [0, 70565], [1, -521479], [2, -222891], [3, -628474]]) == 70565\nassert solution.maxScore([[-1, -1], [0, 763299], [0, 387497], [1, -643524]]) == 763299\nassert solution.maxScore([[-1, -1], [0, 705838]]) == 705838\nassert solution.maxScore([[-1, -1], [0, 506304], [0, -531974], [2, 326383]]) == 832687\nassert solution.maxScore([[-1, -1], [0, -376745], [1, -917262], [0, -475145], [1, -400232], [0, -998799], [3, -381039], [3, -147952], [7, 310675], [8, 447738]]) == 447738\nassert solution.maxScore([[-1, -1], [0, 669671], [1, -172313], [1, -215625], [1, 958406], [1, 260247], [4, -185521], [6, -740009], [0, -943854], [2, 744995]]) == 1703401\nassert solution.maxScore([[-1, -1], [0, -635592], [0, -284188]]) == 0\nassert solution.maxScore([[-1, -1], [0, 514912]]) == 514912\nassert solution.maxScore([[-1, -1], [0, -95438], [0, -570209], [1, -197620]]) == 0",
  "inefficient_solution": "class Solution:\n    def maxScore(self, edges: List[List[int]]) -> int:\n        def dfs(i, path, visited, memo):\n            if i == -1:\n                return 0\n            if (i, tuple(path)) in memo:\n                return memo[(i, tuple(path))]\n            a = b = t = 0\n            for j, w in edges[i+1:]:\n                x = dfs(j, path + (j,), visited | {i}, memo)\n                if not visited & {j}:\n                    y = dfs(j, path + (j,), visited | {i}, memo)\n                else:\n                    y = 0\n                a += y\n                b += y\n                t = max(t, x - y + w)\n            b += t\n            memo[(i, tuple(path))] = b\n            return b\n\n        visited = set()\n        visited.add(0)\n        memo = {}\n        return dfs(0, (), visited, memo)",
  "is_python": true
}