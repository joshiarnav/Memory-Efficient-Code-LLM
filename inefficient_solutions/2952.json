{
  "problem_idx": 2952,
  "task_name": "Minimum Number of Coins to be Added",
  "markdown_description": "\nYou are given a **0-indexed** integer array `coins`, representing the values of the coins available, and an integer `target`.\n\n\nAn integer `x` is **obtainable** if there exists a subsequence of `coins` that sums to `x`.\n\n\nReturn *the **minimum** number of coins **of any value** that need to be added to the array so that every integer in the range* `[1, target]` *is **obtainable***.\n\n\nA **subsequence** of an array is a new **non-empty** array that is formed from the original array by deleting some (**possibly none**) of the elements without disturbing the relative positions of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** coins = [1,4,10], target = 19\n**Output:** 2\n**Explanation:** We need to add coins 2 and 8. The resulting array will be [1,2,4,8,10].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 2 is the minimum number of coins that need to be added to the array. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** coins = [1,4,10,5,7,19], target = 19\n**Output:** 1\n**Explanation:** We only need to add the coin 2. The resulting array will be [1,2,4,5,7,10,19].\nIt can be shown that all integers from 1 to 19 are obtainable from the resulting array, and that 1 is the minimum number of coins that need to be added to the array. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** coins = [1,1,1], target = 20\n**Output:** 3\n**Explanation:** We need to add coins 4, 8, and 16. The resulting array will be [1,1,1,4,8,16].\nIt can be shown that all integers from 1 to 20 are obtainable from the resulting array, and that 3 is the minimum number of coins that need to be added to the array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= target <= 105`\n* `1 <= coins.length <= 105`\n* `1 <= coins[i] <= target`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumAddedCoins(self, coins: List[int], target: int) -> int:\n        coins.sort()\n        s = 1\n        ans = i = 0\n        while s <= target:\n            if i < len(coins) and coins[i] <= s:\n                s += coins[i]\n                i += 1\n            else:\n                s <<= 1\n                ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minimumAddedCoins(self, coins: List[int], target: int) -> int:\n        coins.sort()\n        s = 1\n        ans = i = 0\n        while s <= target:\n            if i < len(coins) and coins[i] <= s:\n                s += coins[i]\n                i += 1\n            else:\n                s <<= 1\n                ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    coins = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Generate a random target sum\n    target = random.randint(1, 100001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumAddedCoins(coins, target)\n\n    return coins, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        coins, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumAddedCoins(coins, target) == expected_result\n        print(f\"assert solution.minimumAddedCoins({coins}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumAddedCoins({coins}, {target}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumAddedCoins([13, 26, 62, 82, 85], 62369) == 13\nassert solution.minimumAddedCoins([2, 8, 10, 79, 83, 85, 89], 60037) == 12\nassert solution.minimumAddedCoins([87, 90], 56934) == 15\nassert solution.minimumAddedCoins([12, 57, 71, 98], 34088) == 13\nassert solution.minimumAddedCoins([10, 12, 17, 24, 33, 34, 57, 68], 42918) == 12\nassert solution.minimumAddedCoins([28, 44, 80], 31804) == 13\nassert solution.minimumAddedCoins([14, 44, 71, 84, 85, 87, 96], 64672) == 12\nassert solution.minimumAddedCoins([10, 19, 27, 37, 38, 68, 71, 72, 74, 100], 6041) == 8\nassert solution.minimumAddedCoins([22, 25, 47, 77, 80, 81, 89, 91, 95, 99], 35151) == 11\nassert solution.minimumAddedCoins([16, 62, 82, 90], 39639) == 13\nassert solution.minimumAddedCoins([9, 26, 42, 72, 74], 70250) == 14\nassert solution.minimumAddedCoins([5, 9, 13, 38, 41, 42, 44, 52, 55, 74], 300) == 4\nassert solution.minimumAddedCoins([13, 30, 39, 56, 59, 81, 98], 62884) == 13\nassert solution.minimumAddedCoins([45, 83], 52040) == 15\nassert solution.minimumAddedCoins([12, 37, 41, 51, 57, 59, 68, 75, 96], 4145) == 8\nassert solution.minimumAddedCoins([22, 33, 34, 38, 39, 73, 74, 79, 86], 23134) == 11\nassert solution.minimumAddedCoins([32, 35, 43, 53], 88495) == 14\nassert solution.minimumAddedCoins([65, 77, 82, 88, 91], 44024) == 14\nassert solution.minimumAddedCoins([4, 14, 23, 27, 37, 41, 53, 57, 73, 78], 82019) == 11\nassert solution.minimumAddedCoins([66], 62063) == 16\nassert solution.minimumAddedCoins([63, 68, 76, 83], 75285) == 14\nassert solution.minimumAddedCoins([68, 69, 79, 99], 66006) == 15\nassert solution.minimumAddedCoins([57, 61, 62], 80960) == 15\nassert solution.minimumAddedCoins([25, 49, 66, 74, 78, 82, 93], 7497) == 9\nassert solution.minimumAddedCoins([15, 90, 99], 4806) == 10\nassert solution.minimumAddedCoins([18, 20, 33, 52, 55, 90], 93529) == 14\nassert solution.minimumAddedCoins([12, 22, 38, 44, 59, 68, 89, 95], 6913) == 8\nassert solution.minimumAddedCoins([26, 31, 50, 77], 98326) == 14\nassert solution.minimumAddedCoins([3, 66, 72], 82001) == 15\nassert solution.minimumAddedCoins([16, 63, 78], 17887) == 12\nassert solution.minimumAddedCoins([43, 76], 24399) == 14\nassert solution.minimumAddedCoins([3, 11, 12, 16, 33, 44, 51, 76, 89, 95], 2197) == 6\nassert solution.minimumAddedCoins([21, 23, 31, 36, 37, 46, 54, 63], 14363) == 11\nassert solution.minimumAddedCoins([32, 73, 95], 76318) == 15\nassert solution.minimumAddedCoins([8, 16, 27, 36, 58, 88, 93, 94], 93410) == 11\nassert solution.minimumAddedCoins([3, 33, 82, 93, 95], 39793) == 12\nassert solution.minimumAddedCoins([49, 58, 67], 8625) == 12\nassert solution.minimumAddedCoins([15, 38, 41, 45, 47, 49, 54], 22481) == 12\nassert solution.minimumAddedCoins([23, 47, 56, 61, 64, 76, 90, 95, 96], 92526) == 13\nassert solution.minimumAddedCoins([31, 38, 66, 90, 95, 99], 83161) == 13\nassert solution.minimumAddedCoins([5, 11, 36], 26766) == 13\nassert solution.minimumAddedCoins([32, 34, 61, 79, 81, 100], 89110) == 13\nassert solution.minimumAddedCoins([72], 13939) == 14\nassert solution.minimumAddedCoins([33, 93], 76448) == 15\nassert solution.minimumAddedCoins([73], 26294) == 15\nassert solution.minimumAddedCoins([9, 11, 39, 58, 62, 71, 78], 84872) == 13\nassert solution.minimumAddedCoins([9], 95452) == 16\nassert solution.minimumAddedCoins([31], 54926) == 15\nassert solution.minimumAddedCoins([9, 23, 36, 52, 58, 68, 82, 88, 92, 96], 7334) == 8\nassert solution.minimumAddedCoins([27, 48, 58, 67, 86, 88, 94, 96, 97], 35542) == 11\nassert solution.minimumAddedCoins([35], 95043) == 16\nassert solution.minimumAddedCoins([15, 21, 25, 36, 38, 72, 99], 56544) == 12\nassert solution.minimumAddedCoins([10, 32, 53, 55, 57, 61, 70, 82, 93], 87643) == 13\nassert solution.minimumAddedCoins([6, 33, 34, 46, 54, 69, 73, 79, 93, 99], 15738) == 10\nassert solution.minimumAddedCoins([3, 16, 41, 75, 79, 86, 91], 35911) == 11\nassert solution.minimumAddedCoins([23, 25, 50, 60, 69, 81, 88], 22611) == 11\nassert solution.minimumAddedCoins([40, 71], 24417) == 14\nassert solution.minimumAddedCoins([3, 10, 28, 38, 48, 88], 20526) == 11\nassert solution.minimumAddedCoins([10, 13, 36, 51, 61, 72, 79], 28467) == 11\nassert solution.minimumAddedCoins([15, 25, 42, 44, 45, 89], 15806) == 10\nassert solution.minimumAddedCoins([12, 16, 27, 75, 80], 23211) == 12\nassert solution.minimumAddedCoins([28, 33, 36, 40, 44, 63, 67, 92], 72319) == 13\nassert solution.minimumAddedCoins([2, 49, 74, 75, 95], 57346) == 13\nassert solution.minimumAddedCoins([9, 16, 42, 63, 74, 84, 86, 96, 99], 15101) == 10\nassert solution.minimumAddedCoins([5, 15, 66, 79, 81], 68796) == 13\nassert solution.minimumAddedCoins([15, 23, 45, 47, 63, 69, 74, 80, 82], 56540) == 11\nassert solution.minimumAddedCoins([14, 36, 39, 40, 50, 54, 76, 94], 45274) == 12\nassert solution.minimumAddedCoins([53], 97826) == 16\nassert solution.minimumAddedCoins([27, 64], 27166) == 14\nassert solution.minimumAddedCoins([7, 10, 29, 44, 47, 53, 61, 71, 80, 87], 83363) == 12\nassert solution.minimumAddedCoins([85, 93], 56998) == 15\nassert solution.minimumAddedCoins([39, 57, 67, 69, 89], 38785) == 13\nassert solution.minimumAddedCoins([10, 23, 29, 52, 65, 75, 79, 81], 44918) == 11\nassert solution.minimumAddedCoins([1, 21, 38, 57, 64, 66, 71], 75283) == 12\nassert solution.minimumAddedCoins([5, 21, 27, 50, 70, 75, 80], 40213) == 11\nassert solution.minimumAddedCoins([3, 29, 35, 39, 59, 84], 33199) == 12\nassert solution.minimumAddedCoins([2, 26, 32, 51, 55], 44464) == 12\nassert solution.minimumAddedCoins([7, 96], 96505) == 15\nassert solution.minimumAddedCoins([39], 81503) == 16\nassert solution.minimumAddedCoins([7, 60, 82, 92], 119) == 5\nassert solution.minimumAddedCoins([15, 20, 45, 48, 60, 67, 70, 93], 82622) == 12\nassert solution.minimumAddedCoins([29, 71, 92], 11982) == 12\nassert solution.minimumAddedCoins([11, 24, 25, 34, 45, 57, 60, 79, 92, 95], 23477) == 10\nassert solution.minimumAddedCoins([1, 19, 38, 65], 69256) == 13\nassert solution.minimumAddedCoins([12, 13, 22, 29, 37, 87, 100], 23162) == 11\nassert solution.minimumAddedCoins([1, 14, 15, 25, 26, 47, 52, 61], 81629) == 12\nassert solution.minimumAddedCoins([4], 94848) == 16\nassert solution.minimumAddedCoins([22, 52, 90], 53947) == 14\nassert solution.minimumAddedCoins([34], 46577) == 15\nassert solution.minimumAddedCoins([10, 62, 78, 100], 85581) == 14\nassert solution.minimumAddedCoins([31, 32, 35, 50, 56, 57, 66, 77, 83, 98], 29623) == 11\nassert solution.minimumAddedCoins([3, 20, 28, 38, 55, 62, 72, 91], 6776) == 9\nassert solution.minimumAddedCoins([6, 7, 10, 37, 41, 70, 76, 92, 100], 37428) == 11\nassert solution.minimumAddedCoins([18, 30, 32, 37, 41, 49, 55, 56, 62, 92], 35400) == 12\nassert solution.minimumAddedCoins([77, 95], 82018) == 16\nassert solution.minimumAddedCoins([92], 90063) == 16\nassert solution.minimumAddedCoins([25], 36523) == 15\nassert solution.minimumAddedCoins([20, 48, 53, 67, 92, 99, 100], 18964) == 11\nassert solution.minimumAddedCoins([1, 41, 60, 79, 80], 41849) == 13\nassert solution.minimumAddedCoins([9, 14, 20, 46, 75, 96], 73310) == 13",
  "inefficient_solution": "class Solution:\n    def minimumAddedCoins(self, coins: List[int], target: int) -> int:\n        coins.sort()\n        ans = 0\n        for s in range(1, target + 1):\n            i = 0\n            arr = []\n            while i < len(coins):\n                if s > coins[i]:\n                    arr.append(coins[i])\n                    s += coins[i]\n                    i += 1\n                elif s == coins[i]:\n                    arr.append(coins[i])\n                    s = 0\n                    i += 1\n                    break\n                else:\n                    break\n            while s < 2 ** len(arr):\n                arr.append(2 ** len(arr))\n                s = 2 ** len(arr)\n            ans = max(ans, len(arr))\n        return ans",
  "is_python": true
}