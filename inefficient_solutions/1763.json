{
  "problem_idx": 1763,
  "task_name": "Longest Nice Substring",
  "markdown_description": "\nA string `s` is **nice** if, for every letter of the alphabet that `s` contains, it appears **both** in uppercase and lowercase. For example, `\"abABB\"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `\"abA\"` is not because `'b'` appears, but `'B'` does not.\n\n\nGiven a string `s`, return *the longest **substring** of `s` that is **nice**. If there are multiple, return the substring of the **earliest** occurrence. If there are none, return an empty string*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"YazaAay\"\n**Output:** \"aAa\"\n**Explanation:** \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n\"aAa\" is the longest nice substring.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"Bb\"\n**Output:** \"Bb\"\n**Explanation:** \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"c\"\n**Output:** \"\"\n**Explanation:** There are no nice substrings.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` consists of uppercase and lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestNiceSubstring(self, s: str) -> str:\n        n = len(s)\n        ans = ''\n        for i in range(n):\n            lower = upper = 0\n            for j in range(i, n):\n                if s[j].islower():\n                    lower |= 1 << (ord(s[j]) - ord('a'))\n                else:\n                    upper |= 1 << (ord(s[j]) - ord('A'))\n                if lower == upper and len(ans) < j - i + 1:\n                    ans = s[i : j + 1]\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestNiceSubstring(self, s: str) -> str:\n        n = len(s)\n        ans = ''\n        for i in range(n):\n            lower = upper = 0\n            for j in range(i, n):\n                if s[j].islower():\n                    lower |= 1 << (ord(s[j]) - ord('a'))\n                else:\n                    upper |= 1 << (ord(s[j]) - ord('A'))\n                if lower == upper and len(ans) < j - i + 1:\n                    ans = s[i : j + 1]\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string for testing\n    s = ''.join(random.choices(string.ascii_lowercase + string.ascii_uppercase, k=random.randint(1, 100)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestNiceSubstring(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestNiceSubstring(s) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.longestNiceSubstring('{s}') == '{expected_result}'\")\n            test_case_generator_results.append(f\"assert solution.longestNiceSubstring('{s}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestNiceSubstring('rRQWNyJtYTfNemxlpxdskVAwoPqVMQaporpvbjpfjmkDeJqqnVttZPfTlxlVgRooFaogwLJTPNuXCCXcrwuUgJPIKem') == 'rR'\nassert solution.longestNiceSubstring('AVicBwcQBztyueCOXXJPmjCdDGrWiTEPbpckTvoeyHPlBfgLKdoCXVDGsffeWnATDlnCesJMDlDmzTthYEAbddouDMfBJao') == 'dD'\nassert solution.longestNiceSubstring('UzFLTSjhWrXwIWrcORuFiyrdajwBeayOWfZVBdMQYGsmajOZOfxXhdvemlPJAnKimpccQgXFhmRcTx') == 'xX'\nassert solution.longestNiceSubstring('qpVOZerUspgjFAjWVKCXLuleUWQhXlrRjfGGiHZrmNyhAwWLxqDidpZxuIHItgQbuzQfz') == 'rR'\nassert solution.longestNiceSubstring('wKpKxiReFzkqxRiLTCosaAklXXtcyuqrUoLAaUpdUZkWsNnbVUhb') == 'aA'\nassert solution.longestNiceSubstring('lWdGtScArtuksHKcTUCUWqMhLVwgbPuDLUSILXwJYriQuqQEksprXNdsbmIJycMtfjxfzcGTo') == 'qQ'\nassert solution.longestNiceSubstring('DAeqPQYXHrNFZAlgTozZhDCvyYIeZrpDGlixcDksRQxmDmgMLkMlBaFFmoqsudeYrNuDLUhzlNxPERlzcEyUamUHNTmd') == 'zZ'\nassert solution.longestNiceSubstring('AanCdauMzmylcEpmeIvpwOiZdrGkuKIRBvjLfIgKLYEIbEAdNkN') == 'Aa'\nassert solution.longestNiceSubstring('xLlRohUyAwdTTyCoAU') == 'Ll'\nassert solution.longestNiceSubstring('aokYMJthyaukObglezNUSKyWVYnWLzyuMmtamwewZorAMBDlndoVBUiDDO') == 'Mm'\nassert solution.longestNiceSubstring('qspGNIKkDrQYmgejSZMQ') == 'Kk'\nassert solution.longestNiceSubstring('oeYwBUspFPnsWwYUfOOSwVZMZefZCRUxNNXjNmHbcVgfcszTxKPdFRhvtFqaIhwKeAzeFiuYctDQRpWwQetZgkwmRflDrOLG') == 'Ww'\nassert solution.longestNiceSubstring('AGBRhpnSlalwDlIzhutJupOBoYZHUsAafytZDfqtALVABX') == 'Aa'\nassert solution.longestNiceSubstring('SUMGycANcYNODnSKpHIThcbhBqoUsNpeqSksQgGHpMIRnWbF') == 'gG'\nassert solution.longestNiceSubstring('PIBoKGGSAerPkZQEOALlPzWPUPOGoQNYchlTlimcXhLTIUCGguNhuGeYBZMvcmoKCfPEJwnhHkvf') == 'Ll'\nassert solution.longestNiceSubstring('VcYzUSzlvwCLgrxLpTblOMSTSprzdDUJpXVZvQBWXqhLnMvkIqyroSOczdXKbxXfpRVgkVYmWCFDRLNwcetPKMvlDkVSfAIg') == 'dD'\nassert solution.longestNiceSubstring('teDeCwplnMPOxYGKKHxoGYOzXXCKVtblQHyXiQreCEfbqBkskZJjqMZDrLUrcdzaRnTQsRKUqznyfgfYgVDRQOZoGAmyOtLLSC') == 'Jj'\nassert solution.longestNiceSubstring('OfmiReLxFCPnBmHSvsggbSilltgzZNWpKmhZYLuAqxwxAPhIZNmhCvpisSNc') == 'zZ'\nassert solution.longestNiceSubstring('oBrVMiGqmzGPLXIpfhMFyXxvvdhRSSKSIUtXevVjvKypzDcHaIAgBebNXXYFpIg') == 'Xx'\nassert solution.longestNiceSubstring('jUaPvBuOpvHJctLASSbiznwbfAItXxhTorihvscrvlD') == 'Xx'\nassert solution.longestNiceSubstring('IehxhxeFvccRusfRcQUuzeNJyNpblUZsdamrtBJXLvfnbCmgjZXAfzRIT') == 'Uu'\nassert solution.longestNiceSubstring('wKEzTGDHOPafIgzenPxrPqIDnjBiWMklwabiMbQuhJoFxfRecWHcHcBCpPHLYquwuxEhnud') == 'pP'\nassert solution.longestNiceSubstring('OGaJJIrnbpUnEQnVNpwFDXIobCwoqmQMNTfFbfGYzexU') == 'qmQM'\nassert solution.longestNiceSubstring('wbSHvfysUYXCEOoJHwiCHhzGqoZWEcJXgLTMtJEHaNmjXe') == 'Oo'\nassert solution.longestNiceSubstring('VgHtLpAiaAsYsIYBvwgIHKMcltnLILoXvPuYCZIfBZumIVHXlBMpBdUuJUncoY') == 'aA'\nassert solution.longestNiceSubstring('raVCsuvstvVukVEfGNWLhRlcbgCyrcbfKRqqpGskDTYkDNzfSpactjGnnMcC') == 'vV'\nassert solution.longestNiceSubstring('mvRaUSXdcpuAinhUHKyrqhJFZzMzvcfVNbworCXQhHiGyhNoigTZzEO') == 'Zz'\nassert solution.longestNiceSubstring('SyTRhSxOYnCKkTLVzWZXZlnpmguEXvZowGsiucbpXXyJdVscSazoVYuvpbtJifDdYTfkASeHkBqIRVGjAiWHnovoCKxOOzOn') == 'Kk'\nassert solution.longestNiceSubstring('eGGJDqtLNuzrHwWrYzFcGYWWAjfSIASqmTNBuC') == 'wW'\nassert solution.longestNiceSubstring('XuSAYoaKhwaruoKxCNcVARUjoToPAPFkrXDSzmWTdglfmsZCQqbONNqa') == 'Qq'\nassert solution.longestNiceSubstring('vASxCcPyfdZbgWyZTjMskMbUoUbvpHBSiZGQGMiR') == 'Cc'\nassert solution.longestNiceSubstring('XWBUXXqOrLXGvjbiJcRHTDNcPiqRrcNLZPhpHoNIIMZUWnDTYVud') == 'PhpH'\nassert solution.longestNiceSubstring('mlhnOruoCCGCulpgRztYZZVLBILfEYVfICCpyLIIMEJXkChfKozVvPOnKAtJYix') == 'Vv'\nassert solution.longestNiceSubstring('kpavvvOzAgIoOzGXZGBfGJAeUTYkQNVSzTxTDHWxPwhCZipDiuULUN') == 'oO'\nassert solution.longestNiceSubstring('knDTIkIVcPegauGuJPYryYxnwpEJwNDtmerWeRtMNgg') == 'yY'\nassert solution.longestNiceSubstring('ELTVHkkbjyxictJBcpJWgtxZfomclEmEabcPSuHLyKuGDZpiYZWNmM') == 'mM'\nassert solution.longestNiceSubstring('UwMAuKPAzaYbKICOCrjNKfLOaAvUXymkCRQGXGfdFIynLZQtXgqoOkJyHisHCihXeJegeWClELNtuUDJuLygNFrXiFw') == 'aA'\nassert solution.longestNiceSubstring('ynObOXlqEDCwHpHSziXBeNfSObzIcThAIgeAZotSUPWkoajFPKarGUrKsgkPsfhgRjsDvUBjKaQxrIjjauxtWGgtnzd') == 'Gg'\nassert solution.longestNiceSubstring('MATaaIKnqHryCOsehjQybjovflICPPwAaZvzEuSDTWNjQNHxTRHbahuNgfPtJUlVCDmc') == 'Aa'\nassert solution.longestNiceSubstring('lxqQwwoAzASEULedlf') == 'qQ'\nassert solution.longestNiceSubstring('MpkwKCONzcQtnWOZodtCfoPcXVfqAfgGOAwcnBHRiSXHcloiHARxjNIYIEcZjG') == 'gG'\nassert solution.longestNiceSubstring('atVzKMQkzVRqxWeZoDkcGSjcmMaarOLFAVhZuPxeFjYv') == 'mM'\nassert solution.longestNiceSubstring('BOivhIgxjsNmdToMfqASYdFidaniPJyYsrYoMGAozyxaXZiZuI') == 'yY'\nassert solution.longestNiceSubstring('TmGXHPSiOAjWbErphFgFlseFhiInjfQiOGjI') == 'iI'\nassert solution.longestNiceSubstring('GxwSdkWIUVLZktTMPGRrWeSyrNgtpCNIRepqaFgvNOcVW') == 'tT'\nassert solution.longestNiceSubstring('MaOCvVeBfYFXkLARGUInRGqFBunyxmJntxnjwVuoRgKoXjgJmpqvdfsWp') == 'vV'\nassert solution.longestNiceSubstring('vxAUqrDGdfqoHsvkxKvPGikKQyYAgxsoXMOLAzdbcLDrBbHWeCnWaowmBSkOcHLGAWsNRIXtbcyeYVVdStWBzpfwBw') == 'kK'\nassert solution.longestNiceSubstring('zhPkhGHsGJRJiDUVajpVwjHcFfkMGdVZMxeKdSVUBSltMoHgRapxbSPLLfRl') == 'Ff'\nassert solution.longestNiceSubstring('CyBbIfekcCHmEGqR') == 'Bb'\nassert solution.longestNiceSubstring('fBbDYA') == 'Bb'\nassert solution.longestNiceSubstring('VtoNgDvcCxQllcxcABunOYoQIgYQeEChWf') == 'cC'\nassert solution.longestNiceSubstring('uOPECHScetsUWwAjSYsWFQcbwVOTDeaaulbgzvYRvnuZNlJ') == 'Ww'\nassert solution.longestNiceSubstring('ETtcbDOhoawZoNuWMacMIQgWHwXWzXnrYrMSeTiuKYGDWFdeAVxV') == 'Tt'\nassert solution.longestNiceSubstring('JoNTUWTbCBZqtyoQdLEHcXkdZNjFbeEunjyKLknsqgXBfyqwrRrWLnUFRlofuUqTeVMOBLnWYWyCUYzGjoFsrNNVUVHyafv') == 'wrRrW'\nassert solution.longestNiceSubstring('FJEMoTBwFKVZZPGlaopbDlMQzKxbofWjDYyPcnNAAy') == 'Yy'\nassert solution.longestNiceSubstring('ukakxjnSAHogjZJMCDeIMFyvFfIPnlHfKkOeyegukZaxCskjQxootzsYfzbhGIfOMDyzYUqIxMUGdaKvhHVvpdTOjAhPQJMgGxkI') == 'vhHVv'\nassert solution.longestNiceSubstring('vsqcDYUWqgAqCLrZsmyLJCzxhTWzHKFhCcQQBufozIXfVlpWwzoAVftuNhgtTfhtMyH') == 'Cc'\nassert solution.longestNiceSubstring('giMgHsDeKXTHuqtTlOEZowpFroafNwuwHGKvzNhwvvIqmwcnzpgkXsYrRXRrvpHHpulQrHRcntcoSEVgcfBkIDSoF') == 'tT'\nassert solution.longestNiceSubstring('cadqyfMwdhHzSPdmxsUruGUirZDuaAHHXKeShOYgeAvHbMBIWcapFQqSKT') == 'hH'\nassert solution.longestNiceSubstring('zDbsKPsMBghKdDKxILUrRPergyfQqtpVMwHtxcuLyaXLHJhBfeUvUeNahvJJwFbKnGYWCUSA') == 'dD'\nassert solution.longestNiceSubstring('kqsGiKhHVNkDKlgItyVeusdoJ') == 'hH'\nassert solution.longestNiceSubstring('THcEDnhLHGxNmUePQwrbFOCdGIMPdRnLKKKUZyjHlOGhKNyxXdDrHmaEGFHvKctvPzeYUKiB') == 'xXdD'\nassert solution.longestNiceSubstring('GFKHLBcpcgUPwIyyUrlXokelNlguCcdSrpJsJmGhZaTALvgFciVZQXNZreryZrwmIDNEbvLTc') == 'Cc'\nassert solution.longestNiceSubstring('gfSjmVEEOXSdedRgYvpaMFoevYHXvUvGJRzlTsUmtHWUHVyiJzJTjGRiugQAbKHLRWwtoKWsnKTjDlibVwPFLJeeFd') == 'Ww'\nassert solution.longestNiceSubstring('iPbtKnGewQCGeRPGwfAWvNsdwAxXr') == 'xX'",
  "inefficient_solution": "class Solution:\n    def longestNiceSubstring(self, s: str) -> str:\n        n = len(s)\n        visited = set()\n        max_len = 0\n        max_substring = \"\"\n        for i in range(n):\n            for j in range(i, n):\n                substring = s[i:j+1]\n                unique_chars = set(substring)\n                is_nice = True\n                for char in unique_chars:\n                    if char.lower() in substring and char.upper() not in substring:\n                        is_nice = False\n                        break\n                    if char.lower() not in substring and char.upper() in substring:\n                        is_nice = False\n                        break\n                if is_nice and len(substring) > max_len:\n                    max_len = len(substring)\n                    max_substring = substring\n        return max_substring",
  "is_python": true
}