{
  "problem_idx": 802,
  "task_name": "Find Eventual Safe States",
  "markdown_description": "\nThere is a directed graph of `n` nodes with each node labeled from `0` to `n - 1`. The graph is represented by a **0-indexed** 2D integer array `graph` where `graph[i]` is an integer array of nodes adjacent to node `i`, meaning there is an edge from node `i` to each node in `graph[i]`.\n\n\nA node is a **terminal node** if there are no outgoing edges. A node is a **safe node** if every possible path starting from that node leads to a **terminal node** (or another safe node).\n\n\nReturn *an array containing all the **safe nodes** of the graph*. The answer should be sorted in **ascending** order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![Illustration of graph](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0802.Find%20Eventual%20Safe%20States/images/picture1.png)\n\n```\n\n**Input:** graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n**Output:** [2,4,5,6]\n**Explanation:** The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\n**Output:** [4]\n**Explanation:**\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == graph.length`\n* `1 <= n <= 104`\n* `0 <= graph[i].length <= n`\n* `0 <= graph[i][j] <= n - 1`\n* `graph[i]` is sorted in a strictly increasing order.\n* The graph may contain self-loops.\n* The number of edges in the graph will be in the range `[1, 4 * 104]`.\n\n\n",
  "canonical_solution": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        def dfs(i):\n            if color[i]:\n                return color[i] == 2\n            color[i] = 1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            color[i] = 2\n            return True\n\n        n = len(graph)\n        color = [0] * n\n        return [i for i in range(n) if dfs(i)]\n",
  "test_case_generator": "\nimport random\n\n# Task description\nclass Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        def dfs(i):\n            if color[i]:\n                return color[i] == 2\n            color[i] = 1\n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            color[i] = 2\n            return True\n\n        n = len(graph)\n        color = [0] * n\n        return [i for i in range(n) if dfs(i)]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random graph\n    num_nodes = random.randint(1, 11)\n    graph = []\n    for _ in range(num_nodes):\n        adj_nodes = random.sample(range(num_nodes), random.randint(0, num_nodes-1))\n        graph.append(sorted(adj_nodes))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.eventualSafeNodes(graph)\n\n    return graph, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        graph, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.eventualSafeNodes(graph) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.eventualSafeNodes({graph}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.eventualSafeNodes({graph}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.eventualSafeNodes([[]]) == [0]\nassert solution.eventualSafeNodes([[0, 1, 4, 5, 7, 8, 9, 10], [0, 1, 10], [0, 1, 2, 3, 5, 8, 9, 10], [0, 4, 7], [0, 1, 3, 4, 5, 7], [3, 5, 7, 8], [], [0, 1, 2, 5, 6, 7, 8, 9, 10], [0, 1, 7, 9], [], [2, 4]]) == [6, 9]\nassert solution.eventualSafeNodes([[1], [0], []]) == [2]\nassert solution.eventualSafeNodes([[], [], [0, 1]]) == [0, 1, 2]\nassert solution.eventualSafeNodes([[1, 3, 8, 9], [], [1, 2, 3, 4, 6], [0, 2, 3, 8], [0, 1, 2, 4, 6, 9], [1, 2, 4, 7, 8, 9], [0, 2, 3, 5, 6, 8], [2], [0, 6, 8, 9], [3, 4, 5, 6, 7, 9]]) == [1]\nassert solution.eventualSafeNodes([[0, 1, 2], [], [0, 2], [0, 3]]) == [1]\nassert solution.eventualSafeNodes([[1], [2], []]) == [0, 1, 2]\nassert solution.eventualSafeNodes([[], [1], [0, 1]]) == [0]\nassert solution.eventualSafeNodes([[0, 4, 5, 7], [1, 2, 3, 4, 5, 7], [0, 3, 4, 7], [0, 2, 3, 5, 6, 7], [], [0, 1, 4, 5], [5, 6], [0, 1, 2, 3, 4, 6, 7]]) == [4]\nassert solution.eventualSafeNodes([[0, 1, 2, 4, 5, 6, 7, 8, 9, 10], [0, 1, 2, 3, 4, 6, 7, 8, 9, 10], [0, 1, 3, 5, 7], [0, 1, 2, 3, 7, 8], [1, 3, 4, 5, 6, 8], [0, 1, 2, 3, 4, 5, 6, 8, 9, 10], [], [], [], [0, 1, 2, 3, 4, 5, 6], []]) == [6, 7, 8, 10]\nassert solution.eventualSafeNodes([[3], [], [0, 1, 2], [1, 2]]) == [1]\nassert solution.eventualSafeNodes([[0], [], [1]]) == [1, 2]\nassert solution.eventualSafeNodes([[1, 6], [1, 2, 5, 6], [1, 3, 4, 5, 6], [0, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5], [], [3, 6]]) == [5]\nassert solution.eventualSafeNodes([[], [0]]) == [0, 1]\nassert solution.eventualSafeNodes([[5, 9], [3, 4, 6, 8], [2, 4, 5, 9], [0, 1, 2, 4, 5, 7, 8], [], [], [0, 1, 4, 6], [4, 9], [1, 3, 7], [0, 2, 3, 4, 6, 8]]) == [4, 5]\nassert solution.eventualSafeNodes([[0, 1, 3, 4], [], [0, 1, 3, 4], [0, 2, 3, 4], [2, 3, 4]]) == [1]\nassert solution.eventualSafeNodes([[0, 1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 9], [0, 1, 2, 3, 5, 7, 9], [5, 7, 9], [], [1, 3, 5, 7, 8], [1, 2, 3, 4, 6], [9], [0, 1, 2, 3, 5, 6, 7, 8], [0, 2, 3, 4, 5, 6, 8, 9]]) == [4]\nassert solution.eventualSafeNodes([[0, 1, 2, 3, 5, 6, 7, 8], [0, 1, 2, 3, 5, 6, 7, 8], [], [0, 1, 2, 3, 4, 5, 7, 8], [0, 1, 2, 5, 6], [3, 4, 5, 7], [1, 2, 4, 5, 7, 8], [8], [0]]) == [2]\nassert solution.eventualSafeNodes([[], [5], [0, 1, 2, 4, 5], [2, 3], [4], [0, 1, 2, 3, 5]]) == [0]\nassert solution.eventualSafeNodes([[]]) == [0]\nassert solution.eventualSafeNodes([[0, 1, 2, 3], [3], [2, 3], [], []]) == [1, 3, 4]\nassert solution.eventualSafeNodes([[]]) == [0]\nassert solution.eventualSafeNodes([[], [2], [0, 1, 2, 4], [0, 1, 5], [1, 5], []]) == [0, 5]\nassert solution.eventualSafeNodes([[1], []]) == [0, 1]\nassert solution.eventualSafeNodes([[0, 1, 3], [], [0, 2, 3, 4], [1], [0, 2, 3]]) == [1, 3]\nassert solution.eventualSafeNodes([[], []]) == [0, 1]\nassert solution.eventualSafeNodes([[3, 4], [], [0, 3, 4], [0, 1, 2], [1, 2]]) == [1]\nassert solution.eventualSafeNodes([[], [3, 4, 6], [3, 6], [], [1, 3, 6, 7], [6, 7], [0, 2, 3, 5, 7, 8, 9], [4, 8, 9], [0, 1, 3, 4, 5, 6, 7, 8], [2, 3, 6, 9]]) == [0, 3]\nassert solution.eventualSafeNodes([[2, 4, 5], [], [0, 4, 5], [0, 1, 2, 5], [0, 2, 3, 4, 5], [1, 2, 4]]) == [1]\nassert solution.eventualSafeNodes([[1, 2], [0, 3, 4], [], [], [0, 1, 2]]) == [2, 3]\nassert solution.eventualSafeNodes([[1], []]) == [0, 1]\nassert solution.eventualSafeNodes([[0, 2, 3, 5], [0, 1, 3, 5], [0, 2, 3], [2], [5], []]) == [4, 5]\nassert solution.eventualSafeNodes([[]]) == [0]\nassert solution.eventualSafeNodes([[], [0, 1], []]) == [0, 2]\nassert solution.eventualSafeNodes([[1], [], [0, 1, 2], [1, 3]]) == [0, 1]\nassert solution.eventualSafeNodes([[], [0, 2, 3, 4, 5, 6, 7], [0, 1, 2, 3, 5, 6, 7], [2, 3, 7], [1, 2, 3, 7], [0, 1, 2, 4, 5, 6, 7], [0, 6], [6]]) == [0]\nassert solution.eventualSafeNodes([[0, 2, 3, 4, 5, 6, 8, 9, 10], [0, 1, 2, 3, 4, 5, 7, 8, 9, 10], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 8], [0, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 1, 3, 6, 7, 8, 10], [2, 10], [], [0, 1, 2, 3, 5, 7, 8, 9, 10], [0, 1, 5, 8, 10], [3, 5, 7]]) == [7]\nassert solution.eventualSafeNodes([[2, 4, 6], [], [2, 3, 5], [0, 1, 3, 5], [0], [0, 1], [0, 3, 5, 6]]) == [1]\nassert solution.eventualSafeNodes([[0, 2, 3], [1, 2, 4], [1, 3, 4], [], []]) == [3, 4]\nassert solution.eventualSafeNodes([[]]) == [0]\nassert solution.eventualSafeNodes([[], []]) == [0, 1]\nassert solution.eventualSafeNodes([[0, 3], [], [2], []]) == [1, 3]\nassert solution.eventualSafeNodes([[2, 5], [3, 4, 5, 6], [], [2, 3], [0, 1, 2, 4, 5, 6], [0, 1, 2, 4, 6], [1, 6]]) == [2]\nassert solution.eventualSafeNodes([[1, 2, 3, 4, 5, 6, 7], [1, 3, 6, 7, 8, 9], [5, 8], [0, 1, 2, 3, 4, 5, 7, 8], [0, 3, 4, 5, 7], [2, 7], [], [0, 4, 7, 8], [], [1, 3, 4, 6]]) == [6, 8]\nassert solution.eventualSafeNodes([[0, 1], [0, 2], []]) == [2]\nassert solution.eventualSafeNodes([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [], [1, 7], [2, 10], [0, 1, 4, 5, 8, 9], [0, 1, 4, 7, 9], [], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 1, 4, 7], [1, 2, 4, 9], [1]]) == [1, 6, 10]\nassert solution.eventualSafeNodes([[1, 2, 4], [], [1, 2, 3], [0, 2, 4], []]) == [1, 4]\nassert solution.eventualSafeNodes([[1, 3, 4, 5, 7, 8], [0, 3, 4, 5], [], [0, 1, 2, 3, 8], [1, 3, 4, 5, 6, 7], [], [0, 1, 2, 4, 5, 6, 7, 8], [4, 5], [0, 1, 2, 8]]) == [2, 5]\nassert solution.eventualSafeNodes([[0, 1, 3], [3], [0, 1, 2], []]) == [1, 3]\nassert solution.eventualSafeNodes([[0, 1, 2, 4], [1, 2, 4], [1, 2, 3, 4], [1], []]) == [4]\nassert solution.eventualSafeNodes([[], [0, 1, 2, 3, 5, 6, 7, 8, 9, 10], [1, 3, 4, 9], [0, 1, 2, 4, 5, 6, 8, 9, 10], [2, 3, 7, 9], [0, 3, 4, 6, 7, 8, 9, 10], [2, 4, 5, 7], [4, 5, 9, 10], [0, 2, 3, 6, 7, 8, 9, 10], [1, 3, 4, 5, 9, 10], []]) == [0, 10]\nassert solution.eventualSafeNodes([[0, 1, 3, 5, 6, 7], [2, 3, 4, 5, 6, 7], [], [3, 6, 8], [1, 2, 5, 6, 7, 8], [8], [6], [2, 4, 8], []]) == [2, 5, 8]\nassert solution.eventualSafeNodes([[0, 2, 3, 4, 5, 6, 7, 8, 9, 10], [0, 2, 3, 5, 6, 10], [], [0, 1, 2, 9], [1, 2, 3, 5, 7, 8, 10], [0, 1, 2, 3, 4, 5, 6, 7, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10], [7], [0, 1, 2, 3, 4, 5, 7, 8, 10], [1, 3, 4, 5, 6, 9, 10], [0, 3, 5, 6, 9, 10]]) == [2]\nassert solution.eventualSafeNodes([[4, 6, 7], [1, 3, 5, 6, 7], [3, 5], [0, 2], [2], [0, 3, 6, 7], [], [1, 2, 3, 4, 5, 6]]) == [6]\nassert solution.eventualSafeNodes([[0, 1, 3, 5, 6], [0, 1, 2, 3, 4, 6], [2, 6], [1], [], [0, 1, 3, 4, 5, 6], [0, 1, 3, 4, 5]]) == [4]\nassert solution.eventualSafeNodes([[1, 2], [1, 2, 3], [0, 2, 3], []]) == [3]\nassert solution.eventualSafeNodes([[], [], [0, 2]]) == [0, 1]\nassert solution.eventualSafeNodes([[], [1]]) == [0]\nassert solution.eventualSafeNodes([[1, 3], [1, 3, 4], [], [0, 1, 4], [1, 5], [1, 2, 3, 4, 5]]) == [2]\nassert solution.eventualSafeNodes([[], [0, 2], [0, 1]]) == [0]\nassert solution.eventualSafeNodes([[], []]) == [0, 1]\nassert solution.eventualSafeNodes([[]]) == [0]\nassert solution.eventualSafeNodes([[0, 1, 3], [0, 1, 3], [0], []]) == [3]\nassert solution.eventualSafeNodes([[], [2, 3, 9], [0, 1, 2, 3, 5, 6, 7, 8, 9], [0, 1, 3, 4, 5, 6, 7, 8, 9], [1, 4, 5], [], [1, 4, 5, 8], [1, 2, 5, 6, 7, 8, 9], [0, 1, 2, 4, 5, 6, 7, 8, 9], [0, 1, 3, 4, 5, 6, 7, 8, 9]]) == [0, 5]\nassert solution.eventualSafeNodes([[], [0, 1, 4, 5, 6], [6], [0, 1, 2, 3, 4], [0, 6], [0, 1, 4, 6], []]) == [0, 2, 4, 6]\nassert solution.eventualSafeNodes([[], [4, 6], [2, 4, 5, 6], [0, 1, 2, 3, 4, 7], [1, 3, 4, 5, 6], [3, 4, 5, 7], [0, 1, 4, 6, 7], [1, 6]]) == [0]\nassert solution.eventualSafeNodes([[]]) == [0]\nassert solution.eventualSafeNodes([[1, 4, 6], [1, 2, 4, 5, 6], [], [1, 5], [0, 1, 3, 4, 5, 6], [0], [0, 4, 6]]) == [2]\nassert solution.eventualSafeNodes([[], [0, 2, 3], [0, 1], [0, 3]]) == [0]\nassert solution.eventualSafeNodes([[0, 1, 3, 5], [0, 4, 6], [0, 2, 3, 4, 6], [], [], [3, 5, 6], [2, 5]]) == [3, 4]\nassert solution.eventualSafeNodes([[], []]) == [0, 1]\nassert solution.eventualSafeNodes([[0, 1], [], [1, 2]]) == [1]\nassert solution.eventualSafeNodes([[0, 2, 4, 5, 6, 7], [0, 2, 5], [0, 1, 2, 3, 5, 6, 7], [1, 2, 3, 4, 6, 7], [5], [0, 1, 4, 5, 7], [0, 1, 2, 3, 4, 6, 7], []]) == [7]\nassert solution.eventualSafeNodes([[]]) == [0]\nassert solution.eventualSafeNodes([[4, 5, 6, 7, 8, 9], [0, 3, 5, 8], [0, 1, 3, 7, 9], [0, 1, 2, 3, 4, 6, 7, 8, 9], [3, 4, 6, 7, 8], [7], [], [0, 4], [0, 3, 4, 5, 7, 9], [1, 2, 3, 4, 6, 8, 9]]) == [6]",
  "inefficient_solution": "class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        def dfs(i):\n            color = [0] * len(graph)\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                if color[node]:\n                    return color[node] == 2\n                color[node] = 1\n                for j in graph[node]:\n                    if not dfs(j):\n                        return False\n                color[node] = 2\n                stack.extend(graph[node])\n            return True\n\n        n = len(graph)\n        color = [0] * n\n        return [i for i in range(n) if dfs(i)]",
  "is_python": true
}