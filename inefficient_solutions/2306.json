{
  "problem_idx": 2306,
  "task_name": "Naming a Company",
  "markdown_description": "\nYou are given an array of strings `ideas` that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:\n\n\n1. Choose 2 **distinct** names from `ideas`, call them `ideaA` and `ideaB`.\n2. Swap the first letters of `ideaA` and `ideaB` with each other.\n3. If **both** of the new names are not found in the original `ideas`, then the name `ideaA ideaB` (the **concatenation** of `ideaA` and `ideaB`, separated by a space) is a valid company name.\n4. Otherwise, it is not a valid name.\n\n\nReturn *the number of **distinct** valid names for the company*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ideas = [\"coffee\",\"donuts\",\"time\",\"toffee\"]\n**Output:** 6\n**Explanation:** The following selections are valid:\n- (\"coffee\", \"donuts\"): The company name created is \"doffee conuts\".\n- (\"donuts\", \"coffee\"): The company name created is \"conuts doffee\".\n- (\"donuts\", \"time\"): The company name created is \"tonuts dime\".\n- (\"donuts\", \"toffee\"): The company name created is \"tonuts doffee\".\n- (\"time\", \"donuts\"): The company name created is \"dime tonuts\".\n- (\"toffee\", \"donuts\"): The company name created is \"doffee tonuts\".\nTherefore, there are a total of 6 distinct company names.\n\nThe following are some examples of invalid selections:\n- (\"coffee\", \"time\"): The name \"toffee\" formed after swapping already exists in the original array.\n- (\"time\", \"toffee\"): Both names are still the same after swapping and exist in the original array.\n- (\"coffee\", \"toffee\"): Both names formed after swapping already exist in the original array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ideas = [\"lack\",\"back\"]\n**Output:** 0\n**Explanation:** There are no valid selections. Therefore, 0 is returned.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= ideas.length <= 5 * 104`\n* `1 <= ideas[i].length <= 10`\n* `ideas[i]` consists of lowercase English letters.\n* All the strings in `ideas` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def distinctNames(self, ideas: List[str]) -> int:\n        s = set(ideas)\n        f = [[0] * 26 for _ in range(26)]\n        for v in ideas:\n            i = ord(v[0]) - ord('a')\n            t = list(v)\n            for j in range(26):\n                t[0] = chr(ord('a') + j)\n                if ''.join(t) not in s:\n                    f[i][j] += 1\n        ans = 0\n        for v in ideas:\n            i = ord(v[0]) - ord('a')\n            t = list(v)\n            for j in range(26):\n                t[0] = chr(ord('a') + j)\n                if ''.join(t) not in s:\n                    ans += f[j][i]\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n    \nclass Solution:\n    def distinctNames(self, ideas: List[str]) -> int:\n        s = set(ideas)\n        f = [[0] * 26 for _ in range(26)]\n        for v in ideas:\n            i = ord(v[0]) - ord('a')\n            t = list(v)\n            for j in range(26):\n                t[0] = chr(ord('a') + j)\n                if ''.join(t) not in s:\n                    f[i][j] += 1\n        ans = 0\n        for v in ideas:\n            i = ord(v[0]) - ord('a')\n            t = list(v)\n            for j in range(26):\n                t[0] = chr(ord('a') + j)\n                if ''.join(t) not in s:\n                    ans += f[j][i]\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random list of strings\n    ideas = random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.distinctNames(ideas)\n\n    return ideas, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        ideas, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.distinctNames(ideas) == expected_result\n        print(f\"assert solution.distinctNames({ideas}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.distinctNames({ideas}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.distinctNames(['s', 'm', 'f', 's', 'q', 'q']) == 0\nassert solution.distinctNames(['a', 'j', 'f', 'q']) == 0\nassert solution.distinctNames(['p', 't', 'f', 'w', 'b', 'l', 'f', 'g']) == 0\nassert solution.distinctNames(['c', 'v', 'a', 'g', 'h', 'q', 'f', 'j', 'j']) == 0\nassert solution.distinctNames(['g', 'c', 'u', 'u', 'e', 'm', 'o', 'd', 'j', 'y']) == 0\nassert solution.distinctNames(['g', 'z', 'd', 'u', 'i', 'd', 's', 'u', 'e']) == 0\nassert solution.distinctNames(['o', 'w', 'y', 't', 'l', 'b']) == 0\nassert solution.distinctNames(['z', 'l', 'v', 'w']) == 0\nassert solution.distinctNames(['n', 'w', 'b']) == 0\nassert solution.distinctNames(['c', 'v', 'l', 'u', 'p', 'd', 'b', 'v', 'h']) == 0\nassert solution.distinctNames(['p', 'k', 'h', 'f', 't', 'i', 'l', 'o', 'h', 'y']) == 0\nassert solution.distinctNames(['d', 'r', 'l', 'k', 'j', 'k', 'y', 'p', 'n']) == 0\nassert solution.distinctNames(['k', 'f', 'g', 'u', 'd']) == 0\nassert solution.distinctNames(['p', 'd', 'b', 'r', 'u', 'q']) == 0\nassert solution.distinctNames(['p', 'z', 'c', 'e', 'w', 'h', 'k']) == 0\nassert solution.distinctNames(['y', 'b', 's', 'g', 'p', 'p', 'k', 'a']) == 0\nassert solution.distinctNames(['c', 'p', 'k']) == 0\nassert solution.distinctNames(['e', 'l', 'x', 'f', 'b', 'y', 'v', 'k']) == 0\nassert solution.distinctNames(['q', 'r', 'j']) == 0\nassert solution.distinctNames(['z', 't', 'j', 'd', 'a', 'w']) == 0\nassert solution.distinctNames(['l', 'a', 'y', 'r', 'o', 'u', 'w']) == 0\nassert solution.distinctNames(['a', 'h', 'w']) == 0\nassert solution.distinctNames(['d', 'h', 'y', 'o', 'r']) == 0\nassert solution.distinctNames(['p', 'h', 'm', 'q', 'i', 'h', 'b', 'a']) == 0\nassert solution.distinctNames(['r', 's', 'w', 'm', 'c']) == 0\nassert solution.distinctNames(['x', 'p', 'd']) == 0\nassert solution.distinctNames(['o', 'z', 'q', 'z', 'h', 'n', 'b', 'u', 'b']) == 0\nassert solution.distinctNames(['q', 'u', 'o', 'l', 'h', 'x', 'm']) == 0\nassert solution.distinctNames(['x', 'v']) == 0\nassert solution.distinctNames(['o', 'k', 'l']) == 0\nassert solution.distinctNames(['d', 'c', 'm', 'd', 'd', 'k', 't', 'p', 'l']) == 0\nassert solution.distinctNames(['y', 'r', 't', 'd', 's', 'y', 'w', 'k']) == 0\nassert solution.distinctNames(['d', 'c', 't', 'a', 'e', 'j', 'p', 'o', 's']) == 0\nassert solution.distinctNames(['i', 'n', 'u', 'q', 'z', 'c']) == 0\nassert solution.distinctNames(['l', 'm', 's', 'i', 't', 'j', 'z', 'h']) == 0\nassert solution.distinctNames(['q', 'n', 'c', 'b', 'm', 'p', 'a', 'v', 'u', 'y']) == 0\nassert solution.distinctNames(['e', 'v', 'y', 'k', 'z', 'l', 'y', 'i']) == 0\nassert solution.distinctNames(['t', 'w']) == 0\nassert solution.distinctNames(['y', 'l', 'z', 'q', 'n']) == 0\nassert solution.distinctNames(['j', 'b', 'm', 't', 'b']) == 0\nassert solution.distinctNames(['b', 'z', 'e']) == 0\nassert solution.distinctNames(['u', 'h', 'm', 'c', 'j', 'c', 'i', 'd', 'i']) == 0\nassert solution.distinctNames(['f', 'x', 'b']) == 0\nassert solution.distinctNames(['x', 'm', 'q', 'p', 'w', 'p', 'k', 'm', 'w', 'y']) == 0\nassert solution.distinctNames(['v', 'u', 'z', 'h']) == 0\nassert solution.distinctNames(['x', 'h', 'd', 'y']) == 0\nassert solution.distinctNames(['t', 'p', 't', 'g', 'j']) == 0\nassert solution.distinctNames(['j', 'z', 'u', 'v', 'x', 'h']) == 0\nassert solution.distinctNames(['j', 'y', 'w', 'l', 'c', 'i', 'x', 'm', 's', 'm']) == 0\nassert solution.distinctNames(['o', 'o', 's']) == 0\nassert solution.distinctNames(['l', 'z', 'y', 'a', 'z', 'q', 'w', 'l', 'm', 'd']) == 0\nassert solution.distinctNames(['j', 't', 'y', 'y', 'f', 'v', 'a', 'z']) == 0\nassert solution.distinctNames(['r', 'f', 'l', 'w', 'y', 't', 't', 'r']) == 0\nassert solution.distinctNames(['w', 'o', 'o', 'e', 'w', 'i', 's', 'd', 'r', 'p']) == 0\nassert solution.distinctNames(['p', 'u', 'b']) == 0\nassert solution.distinctNames(['q', 'v', 'o', 'u', 'r', 'p', 'n']) == 0\nassert solution.distinctNames(['d', 'g', 'v', 'g', 'y', 'x']) == 0\nassert solution.distinctNames(['b', 'o', 't', 'r']) == 0\nassert solution.distinctNames(['p', 'l', 'z', 'p', 'q', 'b']) == 0\nassert solution.distinctNames(['e', 'l', 'a', 'y', 'y', 'v']) == 0\nassert solution.distinctNames(['q', 'g', 'q']) == 0\nassert solution.distinctNames(['v', 'o', 'z', 'v', 'i', 't']) == 0\nassert solution.distinctNames(['d', 'h', 'k']) == 0\nassert solution.distinctNames(['h', 'x', 'j']) == 0\nassert solution.distinctNames(['v', 'd', 'q', 'l', 'l', 'w']) == 0\nassert solution.distinctNames(['l', 'm', 'u', 'q']) == 0\nassert solution.distinctNames(['k', 'l', 'y', 'o', 'n']) == 0\nassert solution.distinctNames(['y', 'x', 'a', 'a', 'j', 'k', 'h', 't', 'x']) == 0\nassert solution.distinctNames(['f', 'x', 'm', 'a']) == 0\nassert solution.distinctNames(['x', 'l', 'h', 'b', 'd']) == 0\nassert solution.distinctNames(['g', 'y', 'z', 'j']) == 0\nassert solution.distinctNames(['k', 'f', 't', 'e', 'e']) == 0\nassert solution.distinctNames(['x', 't', 'f', 'h', 'f', 'i', 'x', 'x', 'c', 'f']) == 0\nassert solution.distinctNames(['n', 't', 'a', 't', 'q', 'j', 'i']) == 0\nassert solution.distinctNames(['x', 'r', 'x', 'o', 'd']) == 0\nassert solution.distinctNames(['o', 'u', 'c', 'k']) == 0\nassert solution.distinctNames(['e', 'o', 'u', 'u', 'k']) == 0\nassert solution.distinctNames(['j', 'f', 'e', 'i']) == 0\nassert solution.distinctNames(['b', 'l']) == 0\nassert solution.distinctNames(['a', 'e', 'y', 'w', 'p', 'm', 'z', 'c']) == 0\nassert solution.distinctNames(['b', 'x', 'i', 'v', 'y', 'z']) == 0\nassert solution.distinctNames(['y', 'h']) == 0\nassert solution.distinctNames(['i', 't', 'n', 'z', 'f', 'f', 'k']) == 0\nassert solution.distinctNames(['l', 'f']) == 0\nassert solution.distinctNames(['h', 'b', 'w', 'c']) == 0\nassert solution.distinctNames(['w', 'w', 'o', 'r', 'p', 'i', 'v', 'd', 'g', 'p']) == 0\nassert solution.distinctNames(['u', 'e', 'u', 'x', 'r']) == 0\nassert solution.distinctNames(['y', 'h']) == 0\nassert solution.distinctNames(['j', 'f']) == 0\nassert solution.distinctNames(['g', 'l', 'v', 'd', 'p', 'r']) == 0\nassert solution.distinctNames(['v', 'y', 'c']) == 0\nassert solution.distinctNames(['z', 'x', 'p', 'e', 'j', 'k']) == 0\nassert solution.distinctNames(['l', 'v', 'x', 'b', 'q', 'p', 'n', 'j']) == 0\nassert solution.distinctNames(['s', 'l', 'a', 'g']) == 0\nassert solution.distinctNames(['d', 's', 'w', 's', 'k', 'z', 'e']) == 0\nassert solution.distinctNames(['n', 'k', 'k', 'k']) == 0\nassert solution.distinctNames(['d', 'b', 'g', 'd', 'z', 'w', 'e', 'm']) == 0\nassert solution.distinctNames(['c', 'k', 'm', 'f', 'd', 'g', 'b', 'w', 'v', 'i']) == 0\nassert solution.distinctNames(['e', 'd', 'b', 'k', 'g', 'k', 'k']) == 0\nassert solution.distinctNames(['n', 'e', 'v', 't', 'j', 'o', 'o']) == 0",
  "inefficient_solution": "class Solution:\n    def distinctNames(self, ideas: List[str]) -> int:\n        s = set(ideas)\n        f = [[0 for _ in range(26 * 10**6)] for _ in range(26)]\n        for v in ideas:\n            i = ord(v[0]) - ord('a')\n            t = list(v)\n            for j in range(26):\n                t[0] = chr(ord('a') + j)\n                t_str = ''.join(t)\n                if t_str not in s:\n                    f[i][j] += 1\n        ans = 0\n        for v in ideas:\n            i = ord(v[0]) - ord('a')\n            t = list(v)\n            for j in range(26):\n                t[0] = chr(ord('a') + j)\n                t_str = ''.join(t)\n                if t_str not in s:\n                    for k in range(26 * 10**6):\n                        if f[k][i] > 0:\n                            ans += f[k][i]\n        return ans",
  "is_python": true
}