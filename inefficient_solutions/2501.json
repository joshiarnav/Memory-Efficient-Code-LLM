{
  "problem_idx": 2501,
  "task_name": "Longest Square Streak in an Array",
  "markdown_description": "\nYou are given an integer array `nums`. A subsequence of `nums` is called a **square streak** if:\n\n\n* The length of the subsequence is at least `2`, and\n* **after** sorting the subsequence, each element (except the first element) is the **square** of the previous number.\n\n\nReturn *the length of the **longest square streak** in* `nums`*, or return* `-1` *if there is no **square streak**.*\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,6,16,8,2]\n**Output:** 3\n**Explanation:** Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].\n- 4 = 2 * 2.\n- 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,5,6,7]\n**Output:** -1\n**Explanation:** There is no square streak in nums so return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `2 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            while v in s:\n                v *= v\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestSquareStreak(self, nums):\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            while v in s:\n                v *= v\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(2, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestSquareStreak(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestSquareStreak(nums) == expected_result\n        print(f\"assert solution.longestSquareStreak({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestSquareStreak({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestSquareStreak([99, 38, 9, 63, 45, 22, 5, 89, 87]) == -1\nassert solution.longestSquareStreak([87, 62, 49, 70, 82, 14, 79]) == -1\nassert solution.longestSquareStreak([69, 86, 85, 68, 75]) == -1\nassert solution.longestSquareStreak([87, 90, 71, 20, 65, 16, 51, 96]) == -1\nassert solution.longestSquareStreak([2, 31, 11, 51, 59, 17, 50, 54, 91, 30]) == -1\nassert solution.longestSquareStreak([2, 96, 81, 8, 57, 44, 58]) == -1\nassert solution.longestSquareStreak([20, 69, 62, 15, 87, 16, 12, 21, 11, 26]) == -1\nassert solution.longestSquareStreak([38, 23]) == -1\nassert solution.longestSquareStreak([72, 8, 11, 57, 97, 31, 92, 9, 14]) == -1\nassert solution.longestSquareStreak([86, 18, 99, 33, 2, 3, 47, 38, 23, 75]) == -1\nassert solution.longestSquareStreak([94, 2, 27, 80, 41, 7, 66, 70]) == -1\nassert solution.longestSquareStreak([89, 26]) == -1\nassert solution.longestSquareStreak([97, 37, 66, 22, 43, 76]) == -1\nassert solution.longestSquareStreak([57, 65]) == -1\nassert solution.longestSquareStreak([54, 57, 71, 81, 10, 13, 19, 60, 29, 96]) == -1\nassert solution.longestSquareStreak([52, 86, 75, 42, 56, 91]) == -1\nassert solution.longestSquareStreak([6, 3, 87]) == -1\nassert solution.longestSquareStreak([15, 42, 95, 64, 77]) == -1\nassert solution.longestSquareStreak([43, 5, 26, 87, 30, 31, 63]) == -1\nassert solution.longestSquareStreak([16, 9, 82, 85]) == -1\nassert solution.longestSquareStreak([39, 50, 27, 98, 5, 2]) == -1\nassert solution.longestSquareStreak([76, 88, 7, 46, 48]) == -1\nassert solution.longestSquareStreak([67, 64, 43, 90, 88, 16]) == -1\nassert solution.longestSquareStreak([65, 53, 4, 82, 55]) == -1\nassert solution.longestSquareStreak([70, 30, 65, 59, 25]) == -1\nassert solution.longestSquareStreak([84, 46, 73, 43, 29, 99]) == -1\nassert solution.longestSquareStreak([60, 62, 90, 72, 19, 64, 79, 11]) == -1\nassert solution.longestSquareStreak([100, 93, 41, 90, 49, 18, 28]) == -1\nassert solution.longestSquareStreak([16, 9, 70, 63, 57]) == -1\nassert solution.longestSquareStreak([19, 13]) == -1\nassert solution.longestSquareStreak([51, 77, 43]) == -1\nassert solution.longestSquareStreak([100, 34]) == -1\nassert solution.longestSquareStreak([67, 66]) == -1\nassert solution.longestSquareStreak([24, 80]) == -1\nassert solution.longestSquareStreak([36, 99, 92, 53, 35, 47, 54, 31]) == -1\nassert solution.longestSquareStreak([37, 31, 18, 19, 39, 81, 60, 43, 24, 3]) == -1\nassert solution.longestSquareStreak([76, 43, 48, 8, 14, 95, 100, 73]) == -1\nassert solution.longestSquareStreak([8, 24, 84, 80, 16, 26, 10, 2]) == -1\nassert solution.longestSquareStreak([81, 71, 11, 90, 70, 6, 36]) == 2\nassert solution.longestSquareStreak([7, 49, 81, 97, 88, 61]) == 2\nassert solution.longestSquareStreak([9, 69]) == -1\nassert solution.longestSquareStreak([29, 87, 90]) == -1\nassert solution.longestSquareStreak([10, 11, 93, 23, 98, 81, 86, 74, 52, 3]) == -1\nassert solution.longestSquareStreak([87, 4, 96]) == -1\nassert solution.longestSquareStreak([3, 24, 86, 75, 16, 7]) == -1\nassert solution.longestSquareStreak([6, 22]) == -1\nassert solution.longestSquareStreak([70, 88, 25, 14, 41, 66, 8, 69]) == -1\nassert solution.longestSquareStreak([52, 39, 66, 60, 48, 5, 89, 70, 62]) == -1\nassert solution.longestSquareStreak([25, 74, 17, 32, 60, 22, 86, 4, 87, 73]) == -1\nassert solution.longestSquareStreak([100, 32, 7, 63, 31, 82, 29, 75]) == -1\nassert solution.longestSquareStreak([100, 45, 63, 81]) == -1\nassert solution.longestSquareStreak([23, 91, 98, 53, 47, 92, 13]) == -1\nassert solution.longestSquareStreak([30, 32, 79, 20, 98, 82, 31, 95, 39]) == -1\nassert solution.longestSquareStreak([8, 4, 43, 53, 89, 36, 68, 39, 88]) == -1\nassert solution.longestSquareStreak([5, 25, 17, 24]) == 2\nassert solution.longestSquareStreak([10, 32, 3, 97, 4, 83, 63, 25, 59]) == -1\nassert solution.longestSquareStreak([46, 36, 54, 93, 63, 95, 29, 11, 56, 84]) == -1\nassert solution.longestSquareStreak([87, 66]) == -1\nassert solution.longestSquareStreak([5, 82, 29, 52, 94, 81, 96, 10, 7]) == -1\nassert solution.longestSquareStreak([74, 12, 87, 38, 15, 41]) == -1\nassert solution.longestSquareStreak([13, 35, 43, 49]) == -1\nassert solution.longestSquareStreak([98, 33, 32]) == -1\nassert solution.longestSquareStreak([24, 93, 72, 85, 33, 84]) == -1\nassert solution.longestSquareStreak([29, 10, 92, 34, 80]) == -1\nassert solution.longestSquareStreak([64, 80, 62, 49, 70, 14]) == -1\nassert solution.longestSquareStreak([80, 20]) == -1\nassert solution.longestSquareStreak([50, 84]) == -1\nassert solution.longestSquareStreak([79, 14, 13, 8]) == -1\nassert solution.longestSquareStreak([36, 68, 96, 40, 8, 31]) == -1\nassert solution.longestSquareStreak([50, 68, 37, 33, 54, 96, 3, 100, 18]) == -1\nassert solution.longestSquareStreak([62, 23, 14, 61, 37, 54, 87, 63, 88]) == -1\nassert solution.longestSquareStreak([16, 82, 30, 19, 66, 47, 88, 27, 99]) == -1\nassert solution.longestSquareStreak([57, 37, 92, 61, 73, 32, 67]) == -1\nassert solution.longestSquareStreak([27, 24, 85, 32, 15, 44, 14, 39, 98]) == -1\nassert solution.longestSquareStreak([8, 25, 37, 74, 49, 76, 96, 70]) == -1\nassert solution.longestSquareStreak([62, 66, 79]) == -1\nassert solution.longestSquareStreak([7, 44, 13, 3, 99, 40]) == -1\nassert solution.longestSquareStreak([78, 63, 59, 85, 18, 26]) == -1\nassert solution.longestSquareStreak([4, 88, 18, 90, 6, 21]) == -1\nassert solution.longestSquareStreak([89, 34, 82]) == -1\nassert solution.longestSquareStreak([59, 23, 13, 90, 67, 41, 80, 82]) == -1\nassert solution.longestSquareStreak([49, 23, 99, 30, 18, 86, 77, 68, 51, 69]) == -1\nassert solution.longestSquareStreak([60, 66, 31, 58, 90]) == -1\nassert solution.longestSquareStreak([27, 7, 40, 6, 82, 73, 43, 74, 64, 3]) == -1\nassert solution.longestSquareStreak([61, 43, 53]) == -1\nassert solution.longestSquareStreak([93, 82, 95]) == -1\nassert solution.longestSquareStreak([29, 16, 99, 48]) == -1\nassert solution.longestSquareStreak([58, 61, 52, 45, 100, 82, 18]) == -1\nassert solution.longestSquareStreak([30, 63, 23, 95, 21, 34, 44, 5]) == -1\nassert solution.longestSquareStreak([49, 38, 98, 73, 68, 11]) == -1\nassert solution.longestSquareStreak([83, 98, 42]) == -1\nassert solution.longestSquareStreak([66, 50]) == -1\nassert solution.longestSquareStreak([12, 76, 11, 38, 60, 69]) == -1\nassert solution.longestSquareStreak([53, 75, 98, 10, 90, 37, 52, 69]) == -1\nassert solution.longestSquareStreak([59, 40, 17, 87]) == -1\nassert solution.longestSquareStreak([57, 37, 89, 86, 96, 97, 38, 63, 55, 8]) == -1\nassert solution.longestSquareStreak([82, 41, 65, 78]) == -1\nassert solution.longestSquareStreak([95, 53, 99, 13]) == -1\nassert solution.longestSquareStreak([57, 2, 94, 82, 41, 31, 56, 3, 91]) == -1\nassert solution.longestSquareStreak([21, 66, 92, 61, 80, 75, 37, 47, 20]) == -1",
  "inefficient_solution": "class Solution:\n    def longestSquareStreak(self, nums: List[int]) -> int:\n        s = set(nums)\n        ans = -1\n        for v in nums:\n            t = 0\n            prev_v = v\n            while v in s:\n                v *= v\n                s.add(v)\n                t += 1\n            if t > 1:\n                ans = max(ans, t)\n            else:\n                v = prev_v\n            prev_v = v\n        return ans",
  "is_python": true
}