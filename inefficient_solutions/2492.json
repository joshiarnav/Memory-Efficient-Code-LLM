{
  "problem_idx": 2492,
  "task_name": "Minimum Score of a Path Between Two Cities",
  "markdown_description": "\nYou are given a positive integer `n` representing `n` cities numbered from `1` to `n`. You are also given a **2D** array `roads` where `roads[i] = [ai, bi, distancei]` indicates that there is a **bidirectional** road between cities `ai` and `bi` with a distance equal to `distancei`. The cities graph is not necessarily connected.\n\n\nThe **score** of a path between two cities is defined as the **minimum** distance of a road in this path.\n\n\nReturn *the **minimum** possible score of a path between cities* `1` *and* `n`.\n\n\n**Note**:\n\n\n* A path is a sequence of roads between two cities.\n* It is allowed for a path to contain the same road **multiple** times, and you can visit cities `1` and `n` multiple times along the path.\n* The test cases are generated such that there is **at least** one path between `1` and `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2492.Minimum%20Score%20of%20a%20Path%20Between%20Two%20Cities/images/graph11.png)\n\n```\n\n**Input:** n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]\n**Output:** 5\n**Explanation:** The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 4. The score of this path is min(9,5) = 5.\nIt can be shown that no other path has less score.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2492.Minimum%20Score%20of%20a%20Path%20Between%20Two%20Cities/images/graph22.png)\n\n```\n\n**Input:** n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]\n**Output:** 2\n**Explanation:** The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 1 -> 3 -> 4. The score of this path is min(2,2,4,7) = 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `1 <= roads.length <= 105`\n* `roads[i].length == 3`\n* `1 <= ai, bi <= n`\n* `ai != bi`\n* `1 <= distancei <= 104`\n* There are no repeated edges.\n* There is at least one path between `1` and `n`.\n\n\n",
  "canonical_solution": "class Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n        def dfs(i):\n            nonlocal ans\n            for j, d in g[i]:\n                ans = min(ans, d)\n                if not vis[j]:\n                    vis[j] = True\n                    dfs(j)\n\n        g = defaultdict(list)\n        for a, b, d in roads:\n            g[a].append((b, d))\n            g[b].append((a, d))\n        vis = [False] * (n + 1)\n        ans = inf\n        dfs(1)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n        def dfs(i):\n            nonlocal ans\n            for j, d in g[i]:\n                ans = min(ans, d)\n                if not vis[j]:\n                    vis[j] = True\n                    dfs(j)\n\n        g = defaultdict(list)\n        for a, b, d in roads:\n            g[a].append((b, d))\n            g[b].append((a, d))\n        vis = [False] * (n + 1)\n        ans = float('inf')\n        dfs(1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random values for n\n    n = random.randint(2, 11)\n\n    # Generate random values for roads\n    roads = []\n    for _ in range(n-1):\n        a = random.randint(1, n)\n        b = random.randint(1, n)\n        while a == b:\n            b = random.randint(1, n)\n        d = random.randint(1, 101)\n        roads.append([a, b, d])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minScore(n, roads)\n\n    return n, roads, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, roads, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minScore(n, roads) == expected_result\n        print(f\"assert solution.minScore({n}, {roads}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minScore({n}, {roads}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.minScore(4, [[3, 2, 6], [4, 3, 23], [2, 3, 6]]) == inf\nassert solution.minScore(8, [[6, 2, 74], [2, 4, 4], [6, 1, 72], [4, 8, 12], [7, 4, 7], [3, 2, 33], [8, 2, 86]]) == 4\nassert solution.minScore(5, [[1, 3, 72], [4, 3, 59], [1, 2, 72], [5, 3, 48]]) == 48\nassert solution.minScore(10, [[7, 4, 6], [1, 3, 69], [7, 4, 38], [2, 7, 94], [3, 4, 45], [10, 9, 79], [7, 2, 64], [9, 4, 80], [10, 5, 14]]) == 6\nassert solution.minScore(6, [[2, 3, 4], [1, 4, 41], [2, 5, 32], [5, 3, 56], [3, 5, 81]]) == 41\nassert solution.minScore(4, [[2, 3, 4], [2, 4, 50], [1, 2, 33]]) == 4\nassert solution.minScore(11, [[11, 9, 4], [11, 7, 18], [6, 2, 15], [7, 10, 98], [11, 10, 92], [7, 5, 70], [7, 11, 16], [11, 7, 83], [6, 1, 68], [9, 5, 50]]) == 15\nassert solution.minScore(7, [[6, 2, 49], [7, 3, 78], [1, 2, 29], [5, 4, 98], [4, 7, 96], [5, 4, 17]]) == 29\nassert solution.minScore(10, [[1, 2, 74], [7, 8, 40], [6, 1, 3], [4, 5, 19], [8, 6, 83], [7, 9, 53], [8, 7, 52], [1, 3, 62], [7, 8, 92]]) == 3\nassert solution.minScore(2, [[1, 2, 98]]) == 98\nassert solution.minScore(10, [[2, 6, 59], [1, 2, 63], [3, 5, 52], [7, 1, 6], [1, 2, 94], [8, 1, 63], [3, 2, 13], [3, 1, 24], [1, 5, 48]]) == 6\nassert solution.minScore(11, [[10, 1, 84], [7, 6, 69], [9, 11, 37], [11, 6, 75], [11, 10, 14], [11, 6, 43], [6, 10, 35], [9, 6, 29], [7, 3, 59], [5, 10, 52]]) == 14\nassert solution.minScore(2, [[2, 1, 93]]) == 93\nassert solution.minScore(2, [[2, 1, 87]]) == 87\nassert solution.minScore(8, [[4, 8, 20], [7, 1, 65], [5, 1, 66], [2, 6, 21], [5, 3, 23], [3, 6, 21], [3, 8, 38]]) == 20\nassert solution.minScore(2, [[2, 1, 88]]) == 88\nassert solution.minScore(8, [[5, 7, 38], [2, 3, 71], [7, 3, 86], [3, 7, 58], [2, 4, 17], [5, 6, 16], [8, 1, 56]]) == 56\nassert solution.minScore(9, [[5, 3, 41], [2, 4, 36], [4, 5, 6], [4, 8, 26], [6, 3, 31], [7, 9, 99], [2, 6, 34], [8, 3, 79]]) == inf\nassert solution.minScore(4, [[2, 3, 13], [2, 4, 75], [4, 3, 38]]) == inf\nassert solution.minScore(2, [[1, 2, 8]]) == 8\nassert solution.minScore(8, [[2, 4, 44], [7, 4, 21], [2, 1, 96], [1, 5, 84], [3, 7, 74], [4, 2, 47], [7, 4, 23]]) == 21\nassert solution.minScore(6, [[4, 2, 34], [3, 4, 94], [3, 1, 98], [5, 6, 81], [1, 6, 53]]) == 34\nassert solution.minScore(8, [[1, 3, 79], [2, 3, 3], [7, 8, 52], [3, 6, 18], [5, 2, 78], [6, 4, 95], [1, 3, 36]]) == 3\nassert solution.minScore(9, [[2, 5, 57], [8, 7, 69], [4, 6, 49], [9, 7, 22], [7, 9, 19], [4, 5, 95], [7, 6, 14], [6, 1, 101]]) == 14\nassert solution.minScore(10, [[4, 1, 99], [10, 9, 30], [2, 10, 84], [1, 3, 33], [7, 1, 72], [8, 10, 89], [6, 10, 74], [7, 3, 45], [2, 9, 93]]) == 33\nassert solution.minScore(2, [[2, 1, 3]]) == 3\nassert solution.minScore(10, [[5, 9, 59], [9, 5, 19], [4, 7, 82], [10, 4, 88], [1, 8, 40], [5, 10, 80], [3, 9, 7], [5, 7, 7], [10, 4, 75]]) == 40\nassert solution.minScore(5, [[3, 2, 33], [3, 5, 63], [5, 2, 1], [4, 1, 31]]) == 31\nassert solution.minScore(11, [[10, 11, 31], [8, 1, 48], [5, 3, 81], [3, 5, 94], [2, 7, 5], [7, 4, 45], [8, 4, 66], [2, 6, 33], [4, 7, 70], [11, 6, 93]]) == 5\nassert solution.minScore(6, [[1, 3, 75], [4, 5, 67], [6, 5, 92], [2, 4, 19], [4, 3, 56]]) == 19\nassert solution.minScore(8, [[7, 2, 23], [1, 7, 69], [7, 6, 95], [1, 3, 21], [5, 3, 6], [5, 6, 65], [4, 1, 20]]) == 6\nassert solution.minScore(11, [[1, 3, 91], [1, 5, 84], [3, 7, 33], [9, 1, 48], [11, 4, 77], [3, 7, 28], [11, 2, 49], [11, 10, 31], [4, 5, 8], [2, 10, 41]]) == 8\nassert solution.minScore(3, [[1, 2, 61], [2, 3, 62]]) == 61\nassert solution.minScore(8, [[4, 3, 42], [5, 4, 46], [4, 3, 30], [1, 3, 83], [8, 2, 1], [5, 8, 15], [7, 2, 68]]) == 1\nassert solution.minScore(4, [[3, 2, 67], [2, 4, 99], [2, 3, 80]]) == inf\nassert solution.minScore(10, [[9, 5, 1], [4, 8, 22], [8, 2, 71], [6, 9, 91], [4, 5, 54], [5, 8, 38], [7, 8, 23], [5, 3, 16], [4, 5, 29]]) == inf\nassert solution.minScore(10, [[1, 3, 36], [3, 6, 60], [8, 9, 54], [10, 9, 65], [5, 2, 81], [3, 8, 21], [6, 2, 96], [5, 3, 88], [7, 2, 89]]) == 21\nassert solution.minScore(9, [[7, 1, 48], [3, 5, 47], [3, 5, 31], [6, 7, 3], [1, 2, 2], [3, 1, 58], [7, 6, 81], [1, 2, 29]]) == 2\nassert solution.minScore(2, [[2, 1, 49]]) == 49\nassert solution.minScore(4, [[3, 4, 59], [2, 3, 50], [2, 3, 90]]) == inf\nassert solution.minScore(4, [[4, 3, 94], [4, 2, 63], [1, 3, 34]]) == 34\nassert solution.minScore(8, [[3, 7, 15], [3, 6, 37], [3, 1, 3], [6, 2, 101], [8, 6, 54], [2, 6, 63], [7, 4, 84]]) == 3\nassert solution.minScore(9, [[8, 3, 28], [3, 1, 40], [8, 1, 99], [9, 2, 61], [2, 9, 49], [8, 6, 57], [3, 8, 18], [7, 5, 65]]) == 18\nassert solution.minScore(9, [[3, 4, 7], [7, 9, 46], [9, 3, 79], [3, 8, 68], [4, 2, 16], [1, 8, 20], [9, 4, 79], [8, 2, 80]]) == 7\nassert solution.minScore(4, [[2, 1, 60], [3, 2, 30], [4, 3, 98]]) == 30\nassert solution.minScore(7, [[6, 7, 11], [3, 6, 64], [3, 2, 47], [1, 2, 64], [5, 1, 23], [7, 6, 1]]) == 1\nassert solution.minScore(2, [[1, 2, 66]]) == 66\nassert solution.minScore(6, [[6, 1, 99], [1, 6, 4], [5, 6, 89], [4, 3, 72], [2, 3, 42]]) == 4\nassert solution.minScore(4, [[4, 2, 76], [4, 2, 56], [3, 2, 3]]) == inf\nassert solution.minScore(4, [[4, 2, 27], [4, 3, 47], [2, 3, 22]]) == inf\nassert solution.minScore(2, [[1, 2, 45]]) == 45\nassert solution.minScore(8, [[5, 6, 5], [3, 2, 21], [8, 6, 3], [6, 2, 39], [5, 4, 91], [2, 6, 70], [3, 1, 39]]) == 3\nassert solution.minScore(11, [[6, 1, 41], [9, 5, 29], [4, 10, 5], [6, 4, 51], [7, 9, 77], [11, 10, 54], [9, 5, 101], [4, 9, 26], [6, 5, 6], [4, 11, 80]]) == 5\nassert solution.minScore(6, [[1, 4, 28], [1, 2, 63], [3, 6, 97], [1, 6, 26], [3, 4, 61]]) == 26\nassert solution.minScore(6, [[4, 1, 93], [5, 6, 42], [3, 5, 88], [2, 6, 65], [2, 5, 29]]) == 93\nassert solution.minScore(2, [[1, 2, 52]]) == 52\nassert solution.minScore(7, [[2, 4, 74], [2, 3, 57], [3, 2, 15], [7, 1, 50], [4, 7, 44], [5, 4, 56]]) == 15\nassert solution.minScore(2, [[1, 2, 99]]) == 99\nassert solution.minScore(9, [[8, 1, 17], [3, 5, 29], [7, 3, 79], [7, 6, 32], [5, 7, 101], [6, 4, 15], [4, 6, 11], [2, 9, 74]]) == 17\nassert solution.minScore(6, [[4, 6, 84], [2, 3, 70], [5, 3, 89], [1, 4, 26], [2, 5, 20]]) == 26\nassert solution.minScore(5, [[1, 2, 32], [3, 1, 99], [4, 2, 32], [2, 5, 7]]) == 7\nassert solution.minScore(4, [[4, 1, 7], [4, 3, 12], [1, 4, 74]]) == 7\nassert solution.minScore(5, [[1, 2, 89], [4, 5, 13], [4, 1, 75], [2, 3, 90]]) == 13\nassert solution.minScore(3, [[2, 1, 1], [2, 3, 93]]) == 1\nassert solution.minScore(11, [[4, 5, 92], [4, 11, 29], [5, 8, 28], [3, 1, 8], [9, 8, 94], [2, 8, 35], [2, 9, 59], [7, 5, 41], [6, 10, 38], [6, 10, 45]]) == 8\nassert solution.minScore(11, [[1, 3, 79], [7, 5, 25], [8, 10, 85], [10, 2, 12], [8, 5, 19], [8, 7, 36], [10, 11, 84], [2, 6, 12], [11, 7, 63], [11, 7, 100]]) == 79\nassert solution.minScore(9, [[2, 8, 99], [5, 6, 83], [3, 2, 78], [9, 7, 41], [8, 6, 87], [2, 8, 10], [5, 3, 35], [5, 6, 43]]) == inf\nassert solution.minScore(7, [[7, 4, 97], [1, 4, 52], [5, 6, 79], [6, 4, 22], [5, 2, 30], [6, 2, 71]]) == 22\nassert solution.minScore(6, [[5, 6, 58], [6, 5, 90], [6, 2, 76], [6, 4, 74], [3, 1, 99]]) == 99\nassert solution.minScore(9, [[2, 3, 99], [1, 9, 29], [3, 6, 22], [6, 9, 46], [5, 1, 85], [3, 6, 89], [4, 2, 66], [4, 9, 55]]) == 22\nassert solution.minScore(9, [[4, 1, 75], [2, 6, 39], [5, 3, 8], [7, 5, 19], [7, 5, 46], [4, 8, 64], [4, 7, 61], [8, 5, 39]]) == 8\nassert solution.minScore(11, [[4, 5, 85], [5, 11, 1], [8, 4, 32], [9, 7, 8], [8, 9, 18], [2, 4, 46], [1, 9, 86], [1, 8, 83], [8, 6, 36], [9, 8, 39]]) == 1\nassert solution.minScore(5, [[2, 4, 49], [5, 1, 28], [3, 4, 40], [4, 2, 40]]) == 28\nassert solution.minScore(11, [[4, 5, 72], [6, 9, 101], [8, 10, 23], [8, 7, 35], [11, 1, 97], [10, 8, 84], [8, 4, 46], [5, 7, 87], [7, 11, 36], [7, 6, 49]]) == 23\nassert solution.minScore(8, [[5, 3, 45], [8, 2, 100], [7, 4, 61], [1, 3, 41], [1, 8, 54], [7, 1, 72], [1, 8, 32]]) == 32\nassert solution.minScore(6, [[1, 4, 3], [5, 2, 79], [4, 3, 50], [3, 5, 42], [1, 3, 45]]) == 3\nassert solution.minScore(7, [[5, 3, 71], [2, 7, 76], [4, 3, 50], [2, 4, 60], [7, 5, 68], [7, 2, 69]]) == inf\nassert solution.minScore(9, [[9, 2, 19], [9, 3, 46], [2, 8, 99], [7, 2, 23], [3, 7, 41], [6, 9, 7], [4, 6, 96], [7, 2, 87]]) == inf\nassert solution.minScore(10, [[10, 8, 54], [7, 9, 47], [8, 1, 16], [8, 7, 31], [1, 4, 76], [9, 10, 78], [10, 1, 39], [10, 9, 88], [5, 1, 78]]) == 16\nassert solution.minScore(2, [[2, 1, 62]]) == 62\nassert solution.minScore(10, [[5, 8, 80], [9, 1, 24], [3, 7, 67], [9, 5, 90], [2, 7, 58], [9, 1, 48], [3, 6, 20], [4, 1, 78], [1, 5, 80]]) == 24\nassert solution.minScore(6, [[6, 1, 45], [5, 6, 69], [2, 3, 60], [3, 2, 16], [4, 3, 62]]) == 45\nassert solution.minScore(4, [[1, 3, 99], [3, 2, 33], [4, 3, 35]]) == 33\nassert solution.minScore(3, [[3, 2, 65], [2, 3, 56]]) == inf\nassert solution.minScore(10, [[4, 3, 89], [7, 5, 42], [5, 6, 37], [1, 8, 55], [4, 1, 63], [8, 1, 2], [3, 7, 39], [10, 4, 77], [6, 2, 97]]) == 2\nassert solution.minScore(9, [[9, 7, 97], [8, 6, 4], [7, 9, 17], [1, 5, 54], [8, 5, 19], [5, 4, 93], [3, 5, 14], [1, 7, 12]]) == 4\nassert solution.minScore(5, [[4, 2, 57], [3, 5, 72], [1, 2, 55], [2, 5, 18]]) == 18\nassert solution.minScore(4, [[2, 3, 70], [4, 3, 16], [3, 1, 82]]) == 16\nassert solution.minScore(7, [[2, 7, 95], [6, 7, 85], [6, 3, 87], [7, 1, 66], [4, 1, 30], [5, 6, 27]]) == 27\nassert solution.minScore(3, [[3, 2, 3], [3, 2, 90]]) == inf\nassert solution.minScore(10, [[8, 6, 40], [1, 6, 47], [6, 5, 56], [6, 5, 78], [9, 7, 92], [1, 10, 81], [3, 1, 75], [1, 10, 64], [2, 5, 60]]) == 40\nassert solution.minScore(3, [[3, 1, 63], [2, 3, 24]]) == 24\nassert solution.minScore(3, [[1, 2, 56], [2, 1, 100]]) == 56\nassert solution.minScore(4, [[2, 4, 8], [1, 2, 76], [2, 3, 26]]) == 8\nassert solution.minScore(6, [[4, 1, 51], [2, 3, 31], [4, 3, 24], [2, 1, 46], [4, 5, 48]]) == 24\nassert solution.minScore(10, [[3, 2, 72], [4, 5, 54], [6, 3, 73], [1, 6, 90], [4, 7, 99], [6, 9, 48], [7, 10, 38], [6, 2, 56], [5, 9, 56]]) == 38\nassert solution.minScore(9, [[8, 7, 65], [1, 3, 98], [7, 4, 74], [6, 2, 5], [7, 3, 62], [8, 1, 31], [2, 9, 70], [3, 5, 97]]) == 31\nassert solution.minScore(10, [[9, 4, 59], [10, 6, 95], [2, 1, 37], [3, 8, 52], [1, 5, 24], [7, 1, 42], [7, 5, 93], [4, 9, 13], [5, 10, 1]]) == 1\nassert solution.minScore(10, [[3, 6, 97], [2, 7, 29], [1, 6, 51], [6, 7, 3], [8, 5, 64], [10, 8, 33], [9, 7, 89], [7, 9, 98], [8, 5, 89]]) == 3\nassert solution.minScore(4, [[3, 4, 26], [2, 3, 4], [3, 4, 62]]) == inf",
  "inefficient_solution": "class Solution:\n    def minScore(self, n: int, roads: List[List[int]]) -> int:\n        def dfs(i):\n            for j, d in g[i]:\n                if not vis[j]:\n                    vis[j] = True\n                    ans = min(ans, d)\n                    dfs(j)\n\n        g = [[] for _ in range(n + 1)] * 2\n        for _ in range(1000):\n            for a, b, d in roads:\n                g[a].append((b, d))\n                g[b].append((a, d))\n        vis = [False] * (n + 1) * 1000\n        ans = 1000000\n        vis[1] = True\n        dfs(1)\n        return ans",
  "is_python": true
}