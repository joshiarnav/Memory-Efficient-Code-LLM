{
  "problem_idx": 2383,
  "task_name": "Minimum Hours of Training to Win a Competition",
  "markdown_description": "\nYou are entering a competition, and are given two **positive** integers `initialEnergy` and `initialExperience` denoting your initial energy and initial experience respectively.\n\n\nYou are also given two **0-indexed** integer arrays `energy` and `experience`, both of length `n`.\n\n\nYou will face `n` opponents **in order**. The energy and experience of the `ith` opponent is denoted by `energy[i]` and `experience[i]` respectively. When you face an opponent, you need to have both **strictly** greater experience and energy to defeat them and move to the next opponent if available.\n\n\nDefeating the `ith` opponent **increases** your experience by `experience[i]`, but **decreases** your energy by `energy[i]`.\n\n\nBefore starting the competition, you can train for some number of hours. After each hour of training, you can **either** choose to increase your initial experience by one, or increase your initial energy by one.\n\n\nReturn *the **minimum** number of training hours required to defeat all* `n` *opponents*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]\n**Output:** 8\n**Explanation:** You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.\nYou face the opponents in the following order:\n- You have more energy and experience than the 0th opponent so you win.\n  Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.\n- You have more energy and experience than the 1st opponent so you win.\n  Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.\n- You have more energy and experience than the 2nd opponent so you win.\n  Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.\n- You have more energy and experience than the 3rd opponent so you win.\n  Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.\nYou did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.\nIt can be proven that no smaller answer exists.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]\n**Output:** 0\n**Explanation:** You do not need any additional energy or experience to win the competition, so we return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == energy.length == experience.length`\n* `1 <= n <= 100`\n* `1 <= initialEnergy, initialExperience, energy[i], experience[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minNumberOfHours(\n        self,\n        initialEnergy: int,\n        initialExperience: int,\n        energy: List[int],\n        experience: List[int],\n    ) -> int:\n        ans = 0\n        for a, b in zip(energy, experience):\n            if initialEnergy <= a:\n                ans += a - initialEnergy + 1\n                initialEnergy = a + 1\n            if initialExperience <= b:\n                ans += b - initialExperience + 1\n                initialExperience = b + 1\n            initialEnergy -= a\n            initialExperience += b\n        return ans\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random initial energy\n    initialEnergy = random.randint(1, 6)\n    \n    # Generate random initial experience\n    initialExperience = random.randint(1, 6)\n\n    # Generate random energy list\n    energy = random.choices(range(1, 6), k=random.randint(1, 10))\n    \n    # Generate random experience list\n    experience = random.choices(range(1, 6), k=random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minNumberOfHours(initialEnergy, initialExperience, energy, experience)\n\n    return initialEnergy, initialExperience, energy, experience, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        initialEnergy, initialExperience, energy, experience, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minNumberOfHours(initialEnergy, initialExperience, energy, experience) == expected_result\n        print(f\"assert solution.minNumberOfHours({initialEnergy}, {initialExperience}, {energy}, {experience}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minNumberOfHours({initialEnergy}, {initialExperience}, {energy}, {experience}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minNumberOfHours(4, 1, [1, 5, 2, 3, 3, 1, 4], [1, 3, 4, 3, 4, 5, 2]) == 18\nassert solution.minNumberOfHours(4, 1, [4, 2, 1, 3, 5, 1, 2, 4, 3], [5, 5, 2, 4]) == 12\nassert solution.minNumberOfHours(2, 3, [4, 5, 1, 5, 4, 1, 4, 1], [5, 1, 3, 5, 4, 2, 4, 3]) == 27\nassert solution.minNumberOfHours(3, 3, [3, 3, 1, 2, 1, 2, 2, 2], [3, 4, 3, 5, 1, 5, 2]) == 13\nassert solution.minNumberOfHours(6, 5, [4, 1, 2, 2, 3], [2, 2]) == 0\nassert solution.minNumberOfHours(5, 3, [4, 1, 4, 5, 3, 1, 1, 5, 5, 3], [1, 2, 1]) == 5\nassert solution.minNumberOfHours(4, 2, [2, 3, 3, 4, 5, 4, 1], [3, 4, 5, 3, 2, 5]) == 20\nassert solution.minNumberOfHours(1, 3, [2, 4], [2, 2, 2]) == 6\nassert solution.minNumberOfHours(5, 6, [1, 2, 3, 4, 5, 1, 3, 3, 3], [2, 2, 3, 1, 3, 2, 4]) == 15\nassert solution.minNumberOfHours(6, 6, [5, 4, 1, 3, 4, 3, 5, 3], [5, 3, 1, 5, 2, 1, 3, 5, 3, 4]) == 23\nassert solution.minNumberOfHours(2, 2, [2, 2, 2, 1, 4, 5, 5, 3], [4, 5, 5, 1, 1]) == 13\nassert solution.minNumberOfHours(1, 4, [2, 5, 5, 4, 1, 5], [4, 2, 4, 3]) == 17\nassert solution.minNumberOfHours(1, 1, [3, 5, 5, 5, 2, 3, 5], [1, 5, 4, 5, 4, 4, 2, 1, 3]) == 32\nassert solution.minNumberOfHours(4, 6, [3, 4, 1, 5, 1, 3, 4, 4], [1, 2, 5, 1, 5, 1, 2, 4, 5, 3]) == 22\nassert solution.minNumberOfHours(4, 3, [5, 1, 2, 3, 4], [2, 5, 3, 4]) == 9\nassert solution.minNumberOfHours(2, 3, [2, 4, 5, 4], [5, 5, 2, 5, 5, 2, 2, 3, 1, 3]) == 17\nassert solution.minNumberOfHours(5, 3, [1, 2, 1, 5, 2, 2, 1, 5, 1, 5], [5, 5, 5, 4, 4, 5, 4, 1]) == 18\nassert solution.minNumberOfHours(3, 5, [5], [5, 1]) == 4\nassert solution.minNumberOfHours(4, 4, [3, 3, 2, 2], [4, 3, 2, 3, 1, 5, 4]) == 8\nassert solution.minNumberOfHours(2, 3, [4, 5, 1, 2, 5, 4, 1, 5], [1, 1, 2, 5, 4, 2]) == 20\nassert solution.minNumberOfHours(4, 2, [3, 4], [2, 1]) == 5\nassert solution.minNumberOfHours(5, 4, [5, 2, 1, 5, 5, 4, 5], [2, 4, 2]) == 4\nassert solution.minNumberOfHours(4, 6, [5, 1, 2, 4], [1, 4, 1, 3, 2, 4, 5, 3, 5]) == 9\nassert solution.minNumberOfHours(5, 3, [4], [4, 3, 3]) == 2\nassert solution.minNumberOfHours(6, 3, [1, 4, 2, 5, 4], [1, 2, 5, 5, 1, 5, 2, 2]) == 11\nassert solution.minNumberOfHours(6, 4, [2, 2, 1], [1, 3, 1, 1, 5, 3, 4, 3, 1, 4]) == 0\nassert solution.minNumberOfHours(2, 5, [1, 1, 2, 3, 5, 2], [3, 2, 2, 1, 3, 5, 4, 4]) == 13\nassert solution.minNumberOfHours(4, 2, [5], [5, 5, 1, 1, 4]) == 6\nassert solution.minNumberOfHours(6, 4, [4, 3, 5, 5, 5, 1, 2, 2, 4], [2, 4, 2, 2, 3, 2]) == 18\nassert solution.minNumberOfHours(6, 4, [3, 4, 5, 4, 3, 4, 5, 3, 5, 2], [5, 4, 1, 4, 4, 4, 4, 1, 4, 3]) == 35\nassert solution.minNumberOfHours(2, 3, [3, 3, 5], [4, 3, 2, 5, 1, 5, 1, 4, 1]) == 12\nassert solution.minNumberOfHours(4, 4, [3, 5, 1, 3, 4, 1, 3, 5, 4], [2, 5, 2, 4, 1]) == 13\nassert solution.minNumberOfHours(1, 2, [4, 2, 5, 3], [4, 4, 1, 5, 5, 1, 5, 4, 3]) == 17\nassert solution.minNumberOfHours(2, 4, [4, 2, 3], [2]) == 3\nassert solution.minNumberOfHours(6, 2, [5, 3, 4, 5, 2, 4, 5, 1, 2, 1], [2, 4, 1, 1, 4, 4, 1, 4, 2]) == 27\nassert solution.minNumberOfHours(1, 2, [5, 2, 4], [5, 2, 3, 1, 1, 3]) == 15\nassert solution.minNumberOfHours(3, 5, [3, 5, 1, 3], [5, 4, 2, 2, 1, 1, 3]) == 11\nassert solution.minNumberOfHours(3, 4, [2], [3, 2, 5]) == 0\nassert solution.minNumberOfHours(4, 3, [4, 5, 5, 1, 1, 2, 2, 4], [1, 3, 5, 5, 2]) == 13\nassert solution.minNumberOfHours(5, 1, [4, 3, 5], [4, 2, 5]) == 12\nassert solution.minNumberOfHours(6, 2, [4, 5, 4, 1, 4, 4], [5, 5, 4, 4, 1]) == 17\nassert solution.minNumberOfHours(5, 1, [3, 1, 4, 1, 4], [5, 1, 1, 5]) == 10\nassert solution.minNumberOfHours(2, 5, [5, 3], [5, 3, 2, 2, 4, 5, 1, 3, 4]) == 8\nassert solution.minNumberOfHours(4, 5, [5], [5, 2, 3, 1]) == 3\nassert solution.minNumberOfHours(4, 1, [1, 1, 4], [2, 5, 3, 5]) == 6\nassert solution.minNumberOfHours(3, 5, [4, 4, 3, 4, 1, 3, 5, 4, 4, 2], [1, 4]) == 6\nassert solution.minNumberOfHours(5, 2, [3, 5, 5, 2, 5], [2, 4, 1, 2, 5]) == 17\nassert solution.minNumberOfHours(3, 3, [3, 5, 1, 2, 5, 3], [3, 3, 2, 3, 5, 4, 5, 3]) == 18\nassert solution.minNumberOfHours(5, 1, [1, 4, 1, 5], [3, 5, 5, 2, 3, 5, 1, 4]) == 10\nassert solution.minNumberOfHours(5, 3, [1], [5, 1, 4, 5, 4, 5, 5, 1, 3, 4]) == 3\nassert solution.minNumberOfHours(3, 1, [5, 2, 2, 5], [2, 3, 3, 3]) == 14\nassert solution.minNumberOfHours(5, 3, [2, 5, 3], [3, 5, 2, 2, 1, 5]) == 7\nassert solution.minNumberOfHours(1, 6, [1, 1, 4, 1, 1], [2, 1, 2, 3, 4, 5]) == 8\nassert solution.minNumberOfHours(6, 1, [2, 2, 1, 1, 2, 1, 3, 5], [1, 5, 2, 1, 3, 5, 1, 3]) == 16\nassert solution.minNumberOfHours(1, 1, [1, 2, 4, 1], [5, 2]) == 8\nassert solution.minNumberOfHours(5, 4, [4, 2], [4, 5, 2, 3, 2, 5, 2, 1]) == 3\nassert solution.minNumberOfHours(2, 4, [5, 4, 2, 4, 1, 3, 2], [4, 4, 5, 4, 3, 5, 2, 5, 4]) == 21\nassert solution.minNumberOfHours(2, 2, [5, 4, 4, 2, 2, 1, 5], [1, 2, 2, 5, 3, 1, 1, 4]) == 22\nassert solution.minNumberOfHours(4, 3, [4, 1, 4], [1, 3, 2, 4]) == 6\nassert solution.minNumberOfHours(4, 5, [5, 1, 5, 2, 3, 1, 1], [5]) == 3\nassert solution.minNumberOfHours(6, 6, [1, 2, 3, 4], [1, 5, 2, 1]) == 5\nassert solution.minNumberOfHours(2, 2, [5, 4, 5, 5, 3, 1], [1]) == 4\nassert solution.minNumberOfHours(2, 1, [3, 5, 4, 2, 3, 2, 3], [4, 3, 1, 5, 2, 4, 1]) == 25\nassert solution.minNumberOfHours(3, 2, [1, 5, 2, 5], [3, 1, 4, 2]) == 13\nassert solution.minNumberOfHours(3, 5, [4, 2], [2, 5, 3, 2, 2, 4]) == 4\nassert solution.minNumberOfHours(6, 1, [3, 3, 2, 3, 5, 4, 5], [4, 1, 5, 4, 2, 2]) == 19\nassert solution.minNumberOfHours(3, 1, [1, 5, 2, 2, 3, 1], [5, 1, 5, 1, 1, 3, 4, 2]) == 17\nassert solution.minNumberOfHours(2, 3, [5, 1, 5, 2, 4], [2, 3, 2, 5, 2, 4, 1]) == 16\nassert solution.minNumberOfHours(6, 4, [4, 3, 2], [2, 5, 4, 2, 5, 1, 2, 2]) == 4\nassert solution.minNumberOfHours(3, 2, [5, 1, 5, 1, 4, 2, 3, 2, 2], [5, 1, 2, 3, 1, 4, 4, 5]) == 25\nassert solution.minNumberOfHours(5, 5, [4, 1, 5, 4, 2, 3, 5, 3], [5, 2, 3, 3, 1, 4, 1]) == 21\nassert solution.minNumberOfHours(5, 2, [1, 1, 4, 5, 5, 5, 1, 3, 1, 4], [1, 2, 5, 2, 2, 2, 1]) == 19\nassert solution.minNumberOfHours(1, 3, [4, 1, 3, 5, 1, 4, 5, 5], [5, 4]) == 8\nassert solution.minNumberOfHours(4, 3, [3, 1, 4, 2], [1]) == 0\nassert solution.minNumberOfHours(4, 6, [2, 5, 2, 1], [5, 2, 3, 4, 3, 2, 4, 2]) == 7\nassert solution.minNumberOfHours(3, 6, [5, 1, 2, 5, 4, 4, 1, 5], [3, 3, 1]) == 6\nassert solution.minNumberOfHours(2, 1, [2, 5, 5, 5, 2, 2], [5, 4, 4, 4, 3]) == 23\nassert solution.minNumberOfHours(5, 4, [4, 5, 5, 2, 1, 2, 3, 5, 2, 5], [2, 2, 5, 1]) == 12\nassert solution.minNumberOfHours(4, 1, [2, 2, 2, 2, 1, 3], [2, 4, 1, 2, 5]) == 8\nassert solution.minNumberOfHours(1, 5, [4, 5], [5, 4, 3, 2, 4, 1, 5, 5]) == 10\nassert solution.minNumberOfHours(3, 5, [1, 5, 3, 2, 2, 1], [5, 1, 5, 1, 2, 5, 2, 4]) == 13\nassert solution.minNumberOfHours(4, 6, [2, 3, 2, 4, 4], [2, 3]) == 2\nassert solution.minNumberOfHours(4, 1, [4, 3, 4, 3, 2], [3, 1, 1, 1, 3]) == 16\nassert solution.minNumberOfHours(2, 1, [1, 2, 4, 2, 3, 1, 2, 1, 3], [1, 4, 5]) == 9\nassert solution.minNumberOfHours(4, 2, [2, 2, 5, 1], [2, 2, 1, 2, 3, 4, 4, 5]) == 8\nassert solution.minNumberOfHours(3, 2, [4, 1, 4, 2], [1, 5, 5, 2, 1, 3, 2, 5, 5, 4]) == 12\nassert solution.minNumberOfHours(5, 1, [3, 1], [5, 1, 1, 3, 2, 1, 3, 3, 3, 5]) == 5\nassert solution.minNumberOfHours(2, 5, [5, 3], [1, 3, 4, 3, 1, 2, 2, 4, 1, 2]) == 7\nassert solution.minNumberOfHours(6, 4, [1, 4, 5, 5], [1, 4, 5, 5, 3, 1, 5]) == 10\nassert solution.minNumberOfHours(5, 5, [3, 3, 1], [1, 2, 1, 1, 4]) == 3\nassert solution.minNumberOfHours(4, 2, [2, 4, 4, 4], [3, 4, 5, 5, 4, 1, 5, 2, 5, 4]) == 13\nassert solution.minNumberOfHours(4, 2, [2, 5, 4, 5, 3, 1, 3, 4], [3, 2]) == 6\nassert solution.minNumberOfHours(1, 2, [5, 3, 2, 1], [1, 2, 4, 3, 1, 4, 1, 3]) == 11\nassert solution.minNumberOfHours(4, 5, [3, 4, 3, 5, 1, 4], [1]) == 0\nassert solution.minNumberOfHours(2, 5, [2, 2], [5, 3, 3]) == 4\nassert solution.minNumberOfHours(5, 3, [1], [3, 1, 5, 5, 1]) == 1\nassert solution.minNumberOfHours(3, 6, [4, 5, 2, 2], [3, 3, 2]) == 9\nassert solution.minNumberOfHours(2, 1, [1, 2, 3, 1, 3, 5, 5, 5, 5], [3, 4]) == 5\nassert solution.minNumberOfHours(6, 3, [2, 1, 4, 3, 3, 3, 4, 1], [4, 4, 2, 5, 4, 2]) == 13\nassert solution.minNumberOfHours(3, 3, [5, 5], [4, 4]) == 10",
  "inefficient_solution": "class Solution:\n    def minNumberOfHours(\n        self,\n        initialEnergy: int,\n        initialExperience: int,\n        energy: List[int],\n        experience: List[int],\n    ) -> int:\n        ans = []\n        for a, b in zip(energy, experience):\n            temp = []\n            if initialEnergy <= a:\n                for _ in range(a - initialEnergy + 1):\n                    temp.append(1)\n                initialEnergy = a + 1\n            if initialExperience <= b:\n                for _ in range(b - initialExperience + 1):\n                    temp.append(1)\n                initialExperience = b + 1\n            temp.append(initialEnergy - a)\n            temp.append(initialExperience + b)\n            ans.extend(temp)\n        import copy\n        ans = copy.deepcopy(ans)\n        return len(ans)",
  "is_python": true
}