{
  "problem_idx": 1962,
  "task_name": "Remove Stones to Minimize the Total",
  "markdown_description": "\nYou are given a **0-indexed** integer array `piles`, where `piles[i]` represents the number of stones in the `ith` pile, and an integer `k`. You should apply the following operation **exactly** `k` times:\n\n\n* Choose any `piles[i]` and **remove** `floor(piles[i] / 2)` stones from it.\n\n\n**Notice** that you can apply the operation on the **same** pile more than once.\n\n\nReturn *the **minimum** possible total number of stones remaining after applying the* `k` *operations*.\n\n\n`floor(x)` is the **greatest** integer that is **smaller** than or **equal** to `x` (i.e., rounds `x` down).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** piles = [5,4,9], k = 2\n**Output:** 12\n**Explanation:**\u00a0Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [5,4,5].\n- Apply the operation on pile 0. The resulting piles are [3,4,5].\nThe total number of stones in [3,4,5] is 12.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** piles = [4,3,6,7], k = 3\n**Output:** 12\n**Explanation:**\u00a0Steps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [4,3,3,7].\n- Apply the operation on pile 3. The resulting piles are [4,3,3,4].\n- Apply the operation on pile 0. The resulting piles are [2,3,3,4].\nThe total number of stones in [2,3,3,4] is 12.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= piles.length <= 105`\n* `1 <= piles[i] <= 104`\n* `1 <= k <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minStoneSum(self, piles: List[int], k: int) -> int:\n        pq = [-x for x in piles]\n        heapify(pq)\n        for _ in range(k):\n            heapreplace(pq, pq[0] // 2)\n        return -sum(pq)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom heapq import heapify, heapreplace\n\nclass Solution:\n    def minStoneSum(self, piles: List[int], k: int) -> int:\n        pq = [-x for x in piles]\n        heapify(pq)\n        for _ in range(k):\n            heapreplace(pq, pq[0] // 2)\n        return -sum(pq)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    piles = random.choices(range(1, 10001), k=random.randint(1, 4))\n    \n    # Generate a random k\n    k = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minStoneSum(piles, k)\n\n    return piles, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        piles, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minStoneSum(piles, k) == expected_result\n        print(f\"assert solution.minStoneSum({piles}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minStoneSum({piles}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minStoneSum([4614, 9147], 91) == 2\nassert solution.minStoneSum([5096, 1506, 9954, 5095], 65) == 4\nassert solution.minStoneSum([9235, 2073, 4027, 159], 64) == 4\nassert solution.minStoneSum([459, 3889, 4360, 8997], 92) == 4\nassert solution.minStoneSum([8067, 9910, 9982], 73) == 3\nassert solution.minStoneSum([2759, 1974, 7222, 9957], 27) == 171\nassert solution.minStoneSum([8154, 5940], 86) == 2\nassert solution.minStoneSum([2739], 72) == 1\nassert solution.minStoneSum([8788], 13) == 2\nassert solution.minStoneSum([3359, 3578, 6449], 97) == 3\nassert solution.minStoneSum([5410, 3659, 9067], 47) == 3\nassert solution.minStoneSum([3643], 63) == 1\nassert solution.minStoneSum([2422, 9637, 6628, 4397], 84) == 4\nassert solution.minStoneSum([3182], 6) == 50\nassert solution.minStoneSum([6107], 78) == 1\nassert solution.minStoneSum([2330], 53) == 1\nassert solution.minStoneSum([768, 6835], 20) == 5\nassert solution.minStoneSum([8195, 5836], 7) == 1243\nassert solution.minStoneSum([8717, 9590, 585], 39) == 3\nassert solution.minStoneSum([3548, 4845, 7496, 1702], 40) == 17\nassert solution.minStoneSum([5654, 2117], 96) == 2\nassert solution.minStoneSum([8629, 7535, 1650, 2713], 2) == 12446\nassert solution.minStoneSum([3167], 64) == 1\nassert solution.minStoneSum([9549, 4299, 1845], 29) == 18\nassert solution.minStoneSum([1451, 145], 65) == 2\nassert solution.minStoneSum([5488, 2152, 7469, 1171], 28) == 105\nassert solution.minStoneSum([6458, 4473, 4646], 20) == 158\nassert solution.minStoneSum([4253], 49) == 1\nassert solution.minStoneSum([3158, 440], 16) == 11\nassert solution.minStoneSum([5408], 7) == 43\nassert solution.minStoneSum([9048, 2481, 7426, 4684], 81) == 4\nassert solution.minStoneSum([3849], 41) == 1\nassert solution.minStoneSum([7509], 2) == 1878\nassert solution.minStoneSum([7339], 73) == 1\nassert solution.minStoneSum([9997], 90) == 1\nassert solution.minStoneSum([3273], 57) == 1\nassert solution.minStoneSum([3495], 9) == 7\nassert solution.minStoneSum([9975, 5478, 5864, 8692], 10) == 5170\nassert solution.minStoneSum([832, 8310], 39) == 2\nassert solution.minStoneSum([1555, 3826], 18) == 11\nassert solution.minStoneSum([2918, 9852, 7663], 71) == 3\nassert solution.minStoneSum([8720], 32) == 1\nassert solution.minStoneSum([1174], 9) == 3\nassert solution.minStoneSum([3837, 4283, 8900], 76) == 3\nassert solution.minStoneSum([7622, 8368], 50) == 2\nassert solution.minStoneSum([934, 8710, 6181], 63) == 3\nassert solution.minStoneSum([4725, 9712, 3642], 22) == 104\nassert solution.minStoneSum([4931, 5304, 4407, 2881], 80) == 4\nassert solution.minStoneSum([6963], 87) == 1\nassert solution.minStoneSum([1658, 3602], 83) == 2\nassert solution.minStoneSum([2264], 79) == 1\nassert solution.minStoneSum([6198, 4963, 3496], 43) == 3\nassert solution.minStoneSum([2298, 9838], 69) == 2\nassert solution.minStoneSum([6603], 43) == 1\nassert solution.minStoneSum([444, 2021], 4) == 475\nassert solution.minStoneSum([2246, 8630], 70) == 2\nassert solution.minStoneSum([5715, 3781, 6149, 8411], 33) == 80\nassert solution.minStoneSum([2651, 5325], 42) == 2\nassert solution.minStoneSum([5076, 4049], 52) == 2\nassert solution.minStoneSum([8368, 4598], 91) == 2\nassert solution.minStoneSum([6235], 55) == 1\nassert solution.minStoneSum([5799, 2784], 19) == 12\nassert solution.minStoneSum([5984, 2647], 53) == 2\nassert solution.minStoneSum([7547, 7427, 664, 1570], 45) == 6\nassert solution.minStoneSum([990, 4921], 71) == 2\nassert solution.minStoneSum([6415, 7104, 1504], 8) == 1998\nassert solution.minStoneSum([8382], 95) == 1\nassert solution.minStoneSum([2020, 6363, 3286, 2756], 3) == 8010\nassert solution.minStoneSum([7107], 7) == 56\nassert solution.minStoneSum([3481, 4976, 4680, 3439], 37) == 29\nassert solution.minStoneSum([6190], 40) == 1\nassert solution.minStoneSum([9929], 22) == 1\nassert solution.minStoneSum([9113, 2444, 3762], 89) == 3\nassert solution.minStoneSum([5229, 3014, 2584, 5642], 65) == 4\nassert solution.minStoneSum([5678, 3496, 8429, 4502], 1) == 17891\nassert solution.minStoneSum([5389], 7) == 43\nassert solution.minStoneSum([3274, 6847, 4204, 8500], 37) == 38\nassert solution.minStoneSum([3608], 77) == 1\nassert solution.minStoneSum([384, 6477, 6940, 9947], 41) == 14\nassert solution.minStoneSum([4838, 2640, 4708, 8198], 45) == 11\nassert solution.minStoneSum([1430, 6450, 6526], 91) == 3\nassert solution.minStoneSum([7424], 82) == 1\nassert solution.minStoneSum([9010, 8067, 9316], 39) == 5\nassert solution.minStoneSum([5554, 4424, 4997, 8809], 21) == 608\nassert solution.minStoneSum([6731, 3801, 4321, 4297], 42) == 16\nassert solution.minStoneSum([7858, 3973, 9123], 89) == 3\nassert solution.minStoneSum([7774, 2404, 1212], 72) == 3\nassert solution.minStoneSum([2975, 6140, 3099, 7506], 32) == 76\nassert solution.minStoneSum([3695, 8235, 3263, 2227], 95) == 4\nassert solution.minStoneSum([1482, 9739, 5779], 74) == 3\nassert solution.minStoneSum([4308, 3933, 7024], 12) == 955\nassert solution.minStoneSum([8170, 2878, 7188, 993], 96) == 4\nassert solution.minStoneSum([7034], 23) == 1\nassert solution.minStoneSum([6984, 7884, 2263, 5282], 88) == 4\nassert solution.minStoneSum([3991, 8831, 7395], 23) == 96\nassert solution.minStoneSum([2339, 7629], 60) == 2\nassert solution.minStoneSum([2906, 4461, 3869], 27) == 23\nassert solution.minStoneSum([5077, 7659, 6947, 3314], 34) == 62\nassert solution.minStoneSum([9007, 6403, 807, 3320], 18) == 648\nassert solution.minStoneSum([6484, 9565], 99) == 2",
  "inefficient_solution": "class Solution:\n    def minStoneSum(self, piles: List[int], k: int) -> int:\n        piles_with_index = [(i, -x) for i, x in enumerate(piles)]\n        results = []\n        for _ in range(k):\n            results.append(piles_with_index[0][1])\n            piles_with_index[0] = (piles_with_index[0][0], piles_with_index[0][1] // 2)\n            for i in range(1, len(piles_with_index)):\n                if piles_with_index[i][1] // 2 > piles_with_index[i-1][1] // 2:\n                    piles_with_index[i] = (piles_with_index[i][0], piles_with_index[i][1] // 2)\n                else:\n                    break\n        return -sum(x[1] for x in piles_with_index) + sum(results)",
  "is_python": true
}