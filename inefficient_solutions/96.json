{
  "problem_idx": 96,
  "task_name": "Unique Binary Search Trees",
  "markdown_description": "\nGiven an integer `n`, return *the number of structurally unique **BST'**s (binary search trees) which has exactly* `n` *nodes of unique values from* `1` *to* `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0096.Unique%20Binary%20Search%20Trees/images/uniquebstn3.jpg)\n\n```\n\n**Input:** n = 3\n**Output:** 5\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 19`\n\n\n",
  "canonical_solution": "class Solution:\n    def numTrees(self, n: int) -> int:\n        f = [1] + [0] * n\n        for i in range(n + 1):\n            for j in range(i):\n                f[i] += f[j] * f[i - j - 1]\n        return f[n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numTrees(self, n: int) -> int:\n        f = [1] + [0] * n\n        for i in range(n + 1):\n            for j in range(i):\n                f[i] += f[j] * f[i - j - 1]\n        return f[n]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random integer n\n    n = random.randint(1, 19)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numTrees(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numTrees(n) == expected_result\n        print(f\"assert solution.numTrees({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numTrees({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numTrees(16) == 35357670\nassert solution.numTrees(8) == 1430\nassert solution.numTrees(16) == 35357670\nassert solution.numTrees(8) == 1430\nassert solution.numTrees(14) == 2674440\nassert solution.numTrees(15) == 9694845\nassert solution.numTrees(3) == 5\nassert solution.numTrees(12) == 208012\nassert solution.numTrees(12) == 208012\nassert solution.numTrees(15) == 9694845\nassert solution.numTrees(13) == 742900\nassert solution.numTrees(2) == 2\nassert solution.numTrees(14) == 2674440\nassert solution.numTrees(11) == 58786\nassert solution.numTrees(15) == 9694845\nassert solution.numTrees(18) == 477638700\nassert solution.numTrees(15) == 9694845\nassert solution.numTrees(10) == 16796\nassert solution.numTrees(2) == 2\nassert solution.numTrees(15) == 9694845\nassert solution.numTrees(17) == 129644790\nassert solution.numTrees(8) == 1430\nassert solution.numTrees(8) == 1430\nassert solution.numTrees(1) == 1\nassert solution.numTrees(14) == 2674440\nassert solution.numTrees(2) == 2\nassert solution.numTrees(17) == 129644790\nassert solution.numTrees(16) == 35357670\nassert solution.numTrees(13) == 742900\nassert solution.numTrees(2) == 2\nassert solution.numTrees(14) == 2674440\nassert solution.numTrees(19) == 1767263190\nassert solution.numTrees(6) == 132\nassert solution.numTrees(11) == 58786\nassert solution.numTrees(5) == 42\nassert solution.numTrees(2) == 2\nassert solution.numTrees(15) == 9694845\nassert solution.numTrees(6) == 132\nassert solution.numTrees(11) == 58786\nassert solution.numTrees(19) == 1767263190\nassert solution.numTrees(1) == 1\nassert solution.numTrees(12) == 208012\nassert solution.numTrees(6) == 132\nassert solution.numTrees(17) == 129644790\nassert solution.numTrees(18) == 477638700\nassert solution.numTrees(2) == 2\nassert solution.numTrees(5) == 42\nassert solution.numTrees(14) == 2674440\nassert solution.numTrees(7) == 429\nassert solution.numTrees(15) == 9694845\nassert solution.numTrees(9) == 4862\nassert solution.numTrees(12) == 208012\nassert solution.numTrees(6) == 132\nassert solution.numTrees(18) == 477638700\nassert solution.numTrees(1) == 1\nassert solution.numTrees(3) == 5\nassert solution.numTrees(1) == 1\nassert solution.numTrees(7) == 429\nassert solution.numTrees(8) == 1430\nassert solution.numTrees(8) == 1430\nassert solution.numTrees(14) == 2674440\nassert solution.numTrees(10) == 16796\nassert solution.numTrees(7) == 429\nassert solution.numTrees(5) == 42\nassert solution.numTrees(8) == 1430\nassert solution.numTrees(9) == 4862\nassert solution.numTrees(19) == 1767263190\nassert solution.numTrees(2) == 2\nassert solution.numTrees(11) == 58786\nassert solution.numTrees(17) == 129644790\nassert solution.numTrees(2) == 2\nassert solution.numTrees(9) == 4862\nassert solution.numTrees(17) == 129644790\nassert solution.numTrees(1) == 1\nassert solution.numTrees(19) == 1767263190\nassert solution.numTrees(13) == 742900\nassert solution.numTrees(6) == 132\nassert solution.numTrees(1) == 1\nassert solution.numTrees(4) == 14\nassert solution.numTrees(12) == 208012\nassert solution.numTrees(2) == 2\nassert solution.numTrees(18) == 477638700\nassert solution.numTrees(16) == 35357670\nassert solution.numTrees(14) == 2674440\nassert solution.numTrees(10) == 16796\nassert solution.numTrees(7) == 429\nassert solution.numTrees(19) == 1767263190\nassert solution.numTrees(17) == 129644790\nassert solution.numTrees(3) == 5\nassert solution.numTrees(9) == 4862\nassert solution.numTrees(12) == 208012\nassert solution.numTrees(17) == 129644790\nassert solution.numTrees(19) == 1767263190\nassert solution.numTrees(19) == 1767263190\nassert solution.numTrees(12) == 208012\nassert solution.numTrees(19) == 1767263190\nassert solution.numTrees(16) == 35357670\nassert solution.numTrees(4) == 14\nassert solution.numTrees(7) == 429\nassert solution.numTrees(7) == 429",
  "inefficient_solution": "class Solution:\n    def numTrees(self, n: int) -> int:\n        f = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            f[i][0] = 1\n        for j in range(1, n + 1):\n            for i in range(j):\n                for k in range(i):\n                    for l in range(k + 1):\n                        f[j][i] += f[l][k] * f[k + 1][i - k - 1]\n        return f[n][n]",
  "is_python": true
}