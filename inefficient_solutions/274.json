{
  "problem_idx": 274,
  "task_name": "H",
  "markdown_description": "\nGiven an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return *the researcher's h-index*.\n\n\nAccording to the [definition of h-index on Wikipedia](https://en.wikipedia.org/wiki/H-index): The h-index is defined as the maximum value of `h` such that the given researcher has published at least `h` papers that have each been cited at least `h` times.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** citations = [3,0,6,1,5]\n**Output:** 3\n**Explanation:** [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** citations = [1,3,1]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == citations.length`\n* `1 <= n <= 5000`\n* `0 <= citations[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        n = len(citations)\n        cnt = [0] * (n + 1)\n        for x in citations:\n            cnt[min(x, n)] += 1\n        s = 0\n        for h in range(n, -1, -1):\n            s += cnt[h]\n            if s >= h:\n                return h\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        n = len(citations)\n        cnt = [0] * (n + 1)\n        for x in citations:\n            cnt[min(x, n)] += 1\n        s = 0\n        for h in range(n, -1, -1):\n            s += cnt[h]\n            if s >= h:\n                return h\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random citations list\n    citations = random.choices(range(0, 1001), k=random.randint(1, 51))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.hIndex(citations)\n\n    return citations, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        citations, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.hIndex(citations) == expected_result\n        print(f\"assert solution.hIndex({citations}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.hIndex({citations}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.hIndex([152, 49, 320, 918, 286, 61]) == 6\nassert solution.hIndex([117, 971, 352, 513, 320, 120, 32, 712, 16, 743, 637, 208, 971, 105, 805, 164, 221, 666, 927, 95, 19, 185, 844, 850, 411, 345, 749, 685, 162, 26]) == 27\nassert solution.hIndex([28, 751, 217, 147, 128, 442, 332, 168, 34, 472, 303]) == 11\nassert solution.hIndex([492, 595, 994, 37, 648]) == 5\nassert solution.hIndex([581, 874, 377, 939, 555, 480, 403, 81, 848, 613, 521, 619, 491, 982, 363, 601, 192, 512, 635, 404, 409, 34, 588, 529, 821, 611, 14, 874, 72, 247, 362, 33]) == 31\nassert solution.hIndex([200, 359, 846, 68]) == 4\nassert solution.hIndex([205, 789, 957, 287, 675, 871, 798, 458, 470, 404, 704, 205, 490, 133, 110, 337, 460, 834, 157, 699, 391, 43, 76, 138, 453, 216, 868, 352, 219, 958, 755, 923, 989, 383]) == 34\nassert solution.hIndex([42, 265, 431, 689, 993, 667, 779, 693, 746, 889, 99, 367, 992, 553, 711, 411, 589, 271, 324, 292, 829, 608, 970, 63, 914, 663]) == 26\nassert solution.hIndex([75, 752, 538, 814, 997, 944, 11, 11, 433, 449, 556, 435, 809, 251, 821, 991, 976, 209, 714, 850, 178, 995, 702, 582, 63, 408, 403, 846, 941, 188, 851, 328, 840, 428]) == 32\nassert solution.hIndex([785, 206, 509, 289, 103, 167, 172, 980, 774, 852, 577, 251, 298, 549, 683, 992, 279]) == 17\nassert solution.hIndex([734, 63, 167, 563, 279, 599, 261, 297, 406, 994, 495, 209, 768, 219, 111, 386, 952, 25]) == 18\nassert solution.hIndex([181, 527, 539, 615, 264, 376, 476, 139, 178, 621, 441, 610]) == 12\nassert solution.hIndex([324, 736, 724, 940, 923, 854, 633, 985, 933, 493, 374, 679, 551, 401, 694, 765, 822, 952, 790, 454, 184, 134, 267, 891, 558, 195, 161, 430, 977, 583, 180, 34, 921, 441, 764, 761, 361, 304, 166, 918, 936, 750]) == 41\nassert solution.hIndex([246, 213, 560, 63, 999, 708, 329, 33, 142, 723, 463, 854, 577]) == 13\nassert solution.hIndex([246, 101, 654, 585, 120, 829, 110, 433, 558, 699, 108, 107, 874, 599, 225, 780, 560, 500]) == 18\nassert solution.hIndex([346, 355, 485, 817, 654, 574, 996, 128, 316, 632, 114, 898, 60, 980, 833, 320, 280, 283]) == 18\nassert solution.hIndex([199, 725, 475, 826, 727, 71, 684, 603, 540, 414, 310, 662, 563, 635, 296, 599, 733, 829, 669, 421, 229, 567, 680, 521, 66, 310, 878, 46, 877, 949, 453]) == 31\nassert solution.hIndex([231, 633, 346, 254, 419, 118, 185, 253, 221, 93, 365, 657, 86, 496, 424, 681, 874, 876, 822, 740, 742, 555, 184, 695, 47, 959, 1000, 253, 363, 648, 106, 435, 179, 868, 279, 522, 685, 71, 556, 736, 517, 521, 335, 514, 293, 845, 754, 695, 454, 108]) == 49\nassert solution.hIndex([162, 822, 601, 449]) == 4\nassert solution.hIndex([354, 421, 429, 981, 881, 405, 269, 728, 644, 804, 749, 833, 481, 850, 633, 296, 269, 49, 781, 854, 351, 478, 507, 259, 580, 976, 850, 391, 440, 867]) == 30\nassert solution.hIndex([691, 862, 391, 125, 465, 741, 504, 89, 748, 419, 962, 283, 778, 610, 561, 103, 907, 843, 863, 535, 854, 143, 101, 423, 990, 627, 385, 905, 238, 641, 180]) == 31\nassert solution.hIndex([546, 790, 18, 842, 718, 19, 585, 57, 841, 600, 212, 125, 219, 605, 749, 41, 527, 176, 99, 745, 123, 906, 809, 462, 971, 747, 385, 533, 55, 294, 758, 442, 694, 232, 995, 360, 126, 753, 970, 574, 747, 385, 851]) == 41\nassert solution.hIndex([318, 90, 68, 4, 487, 204, 572, 432, 32, 255, 390, 601, 698, 69, 775, 152, 631, 502, 861, 168, 264, 887, 843, 135, 990, 364, 784]) == 26\nassert solution.hIndex([852, 529, 691, 532, 818, 728, 981, 175, 549, 383, 149, 511, 466, 114, 15, 889, 760, 131, 852, 806, 486, 141, 781, 736, 962, 328, 883, 578, 613, 777, 136, 166, 105, 53, 474, 351, 427, 810, 82, 304, 581, 765, 669, 869, 84]) == 44\nassert solution.hIndex([986, 748, 961, 946, 162, 176, 371, 189, 644]) == 9\nassert solution.hIndex([423, 200, 136, 160, 559, 796, 914, 962, 237, 620, 86, 347, 151, 713, 315, 25, 70, 516]) == 18\nassert solution.hIndex([673, 175, 553, 622, 374, 698, 840, 837, 701, 315, 847, 134, 313, 326, 717, 884, 508, 382, 812, 954, 0, 125, 307, 818, 367, 366, 429, 880, 98, 563, 445]) == 30\nassert solution.hIndex([150, 399, 39, 977, 745, 368, 563, 429, 384, 118, 209, 261, 528, 547, 230, 852, 356, 612, 548, 796, 64, 777, 532, 90, 802, 202, 543, 609, 501, 715, 694]) == 31\nassert solution.hIndex([823, 347, 840, 98, 357, 393, 816, 645, 774, 585, 238]) == 11\nassert solution.hIndex([122, 776, 382, 93, 939, 638, 182, 525, 45, 406, 216, 785, 463, 790, 254, 872, 650, 898, 950, 753, 126, 262, 677, 464, 304, 422, 957, 2, 328, 768]) == 29\nassert solution.hIndex([642, 778, 296, 646, 504, 369, 136, 764]) == 8\nassert solution.hIndex([396, 665, 810, 800, 18, 610, 207]) == 7\nassert solution.hIndex([25, 208, 988, 703, 171, 692, 842, 154, 248, 597, 654, 685, 356, 151, 646, 786, 99, 669]) == 18\nassert solution.hIndex([671, 223, 898, 516, 906, 403, 727, 339, 980, 495, 395, 853, 926, 330, 752, 13, 555, 273, 552, 30, 717, 322, 77, 742, 210]) == 24\nassert solution.hIndex([445, 319, 181, 16, 944, 619, 667, 616, 870, 299, 642, 677, 411, 85, 454, 191, 204, 744, 686, 634, 994, 329, 184, 738, 801, 900, 681, 746, 650, 628, 420, 610, 121, 972, 227]) == 34\nassert solution.hIndex([601, 55, 322, 29, 280, 319, 784, 827, 59]) == 9\nassert solution.hIndex([815, 577, 406, 933, 858, 404, 774, 714, 222, 315, 166, 444, 911, 975, 126, 271, 601, 207, 431, 181, 904, 299, 192, 528, 455, 492, 0, 425, 681, 135, 543, 619, 982, 334, 249, 650, 437, 286, 911, 180, 753, 249, 106, 463, 594, 292]) == 45\nassert solution.hIndex([730, 397, 703, 550, 412, 356, 207, 293, 549, 68, 901, 397, 992, 393]) == 14\nassert solution.hIndex([170, 477, 968, 259, 596, 638, 751, 21, 263, 775]) == 10\nassert solution.hIndex([874, 370, 960, 434, 869, 435, 301, 573, 705, 110, 567, 261, 104, 509, 899, 998, 968, 165, 319, 160, 228, 206]) == 22\nassert solution.hIndex([803, 525, 745, 728, 580, 581]) == 6\nassert solution.hIndex([672, 79, 116, 694, 109, 846, 578, 413, 780, 259, 16, 454, 752, 862, 312, 135, 659, 47, 53, 437, 536, 254, 86, 143, 697, 15, 661, 781, 962, 541, 484, 590, 151, 818, 171, 785, 627, 458, 694, 381, 489, 60, 266]) == 41\nassert solution.hIndex([824, 574, 49, 97, 34, 971, 124, 296, 915, 467, 866, 913, 954, 728, 794, 908, 499, 633, 793, 931, 350, 530]) == 22\nassert solution.hIndex([667, 255, 395, 429, 428, 958, 344, 123, 637, 707, 601, 928, 831, 448, 108, 690, 769, 554, 440, 177, 86, 676, 620, 906, 539, 541, 106, 935, 845, 573, 638, 315, 206, 455, 76, 58, 754, 664]) == 38\nassert solution.hIndex([330, 625, 375, 896, 48, 507, 658, 630, 729, 44, 946, 535, 831, 915, 197, 530, 536, 503, 494, 270, 551, 332, 305, 816, 118, 536, 589, 880, 476, 141, 418, 674, 801, 655, 466, 532, 858, 814, 384]) == 39\nassert solution.hIndex([947, 89, 224, 957, 157, 585, 845, 342, 750, 760, 358, 860, 830, 103]) == 14\nassert solution.hIndex([811, 940, 261, 461, 76, 196, 27, 355, 217, 133, 629, 2, 413, 571, 117, 179, 257, 350, 917, 40, 114, 148, 478, 718, 968, 321, 793, 682, 479, 820, 568, 692, 207, 503, 602]) == 33\nassert solution.hIndex([227, 215, 597, 824, 301, 861, 873, 13, 888]) == 9\nassert solution.hIndex([952, 102, 970, 783, 306, 623, 554, 395, 909, 195, 370, 900, 394, 669, 199, 956, 598, 121, 369, 643]) == 20\nassert solution.hIndex([646, 340, 362, 918, 696, 545, 925, 476, 841, 9, 57, 630, 704, 599, 818, 835, 194, 166, 103, 366, 379, 677, 84, 930, 409, 520, 720, 804, 288, 466, 497]) == 30\nassert solution.hIndex([70, 573, 312, 630, 953, 799, 92, 570, 877, 323, 372, 578, 568, 282, 605, 998, 962, 662, 94, 903, 933, 710, 289, 582, 674, 491, 349, 201, 674, 405, 462, 299, 881, 462, 192, 94]) == 36\nassert solution.hIndex([579, 497, 612, 423]) == 4\nassert solution.hIndex([582, 829, 822, 974, 975, 230, 530, 590]) == 8\nassert solution.hIndex([775, 410, 536, 318, 593, 169, 500, 952, 194, 330, 486, 968, 235, 658]) == 14\nassert solution.hIndex([764, 971, 838, 193, 239, 492, 910, 656, 947, 165, 724, 111, 157, 381, 599, 233, 383, 257, 780, 744, 414, 37, 995, 320, 645, 500, 837, 138, 425, 637, 545, 916, 563, 717, 953, 583, 455, 250, 987, 850, 479, 465, 354]) == 42\nassert solution.hIndex([380, 51, 770, 470, 625, 19, 517, 169, 637, 847, 799, 75]) == 12\nassert solution.hIndex([962, 699, 99, 395, 620, 724, 764, 969, 600, 419, 804, 979, 886, 562, 271, 655, 643, 571, 910, 112, 130, 756, 981, 98, 225, 925]) == 26\nassert solution.hIndex([903, 327, 699, 946, 118, 12, 389, 635, 25, 406, 823, 208, 254, 321, 741, 625, 404, 927, 568, 735, 126, 837, 491, 645, 836, 381, 125, 582, 550, 281, 35, 956, 663, 26, 186, 785, 926, 392, 193, 129, 422, 193, 841, 914, 492]) == 41\nassert solution.hIndex([489, 833, 996]) == 3\nassert solution.hIndex([43, 901, 266, 866, 675, 381, 974, 5, 811, 145, 183, 488, 608, 408, 679, 94, 222, 953, 724, 37, 478, 173, 832, 930, 114, 200, 334, 182, 108, 414, 297, 736, 3, 843, 151, 534, 68, 259, 280, 391, 164, 23, 933, 689, 183, 683]) == 42\nassert solution.hIndex([107, 418, 249, 322, 930, 539, 999, 594, 901, 797, 219, 465, 590, 837, 692, 36, 201, 19, 665, 25, 81, 234, 449, 563, 117, 412, 476, 115, 426, 520, 419, 93, 737, 249, 689, 352, 715, 671, 266, 265, 665, 582]) == 39\nassert solution.hIndex([347, 752, 121, 915, 669, 987, 311, 693, 873, 544, 273, 458, 592, 725, 150, 772, 238, 979, 717, 863, 826, 11, 248, 741, 189, 349, 837, 503, 927]) == 28\nassert solution.hIndex([31, 395, 254, 625, 818, 7, 625, 748, 476, 371, 394, 262, 868, 651, 231, 240, 868, 470, 101, 214, 761, 746, 26, 613, 618, 551, 792, 971, 258, 511, 552, 616, 43, 484, 496, 546, 798, 974, 805, 48, 244, 325, 213, 651, 14, 996, 746, 512, 501, 429, 388]) == 46\nassert solution.hIndex([682, 97, 582, 391, 704, 49, 515, 536, 903, 197, 130, 167, 903, 837, 875, 206, 913, 243, 308, 689]) == 20\nassert solution.hIndex([240, 119, 939, 975, 455, 812, 21, 374, 201, 556, 749, 318, 944, 220, 597, 54, 450, 590, 688, 61, 821, 284, 841, 143, 844, 681, 964, 964, 43, 166, 59, 629, 838, 154, 865, 112]) == 35\nassert solution.hIndex([160, 409, 947, 71, 826, 887, 87, 151, 786]) == 9\nassert solution.hIndex([437, 937, 523, 550, 290, 35, 57, 387, 221, 365, 193, 651, 523]) == 13\nassert solution.hIndex([726, 563, 96, 14, 630, 425, 154, 207, 893, 742, 81, 424, 224, 886, 355, 671, 60, 190, 619, 645, 157, 516, 171, 776, 882, 335, 430, 489, 358, 989, 947, 401, 655, 299, 742, 715, 547]) == 36\nassert solution.hIndex([768, 114, 150, 9, 769, 907, 371, 586, 32, 20, 71, 761, 489, 376, 1, 183, 585, 957, 2, 997, 718, 540, 654, 388]) == 20\nassert solution.hIndex([275, 501, 750, 117, 803, 809, 407, 559, 609, 410, 36, 448, 193, 89, 608, 168, 322, 849, 531, 717, 970]) == 21\nassert solution.hIndex([240, 442, 878, 638, 361, 175, 299, 93, 682, 959, 465, 692, 688, 994, 793, 129, 810, 980, 321, 129, 989, 709, 717, 503, 649, 597, 961, 398, 832, 583, 177, 690, 39, 276, 652, 467, 881, 348, 185, 469, 337, 551, 506, 163, 118, 237, 266, 538]) == 47\nassert solution.hIndex([884, 786, 767, 639, 492, 605, 409, 800, 741, 218, 836, 618, 447, 266, 314, 398, 80, 922, 740, 795, 937, 789, 355, 807, 645, 210, 448, 968]) == 28\nassert solution.hIndex([16, 684, 483, 517, 558, 539, 81, 890, 507, 930, 621, 276, 584, 193, 538, 195, 317, 583, 348, 765, 457, 521, 456, 688, 453]) == 24\nassert solution.hIndex([116, 997, 971, 514, 162]) == 5\nassert solution.hIndex([250, 463, 44, 565]) == 4\nassert solution.hIndex([182, 714, 937, 617, 437, 909, 581, 647, 422, 103, 169, 609, 826, 271, 477, 182, 901, 0, 927, 939, 508, 712, 388, 90, 876, 997, 797, 846, 555, 143, 369, 852, 416, 954, 935, 130, 439, 549, 690, 43, 195, 505]) == 41\nassert solution.hIndex([397, 801, 736, 465, 452, 615, 319, 739, 892, 30, 982, 859, 345, 837, 459, 140, 335, 534, 562, 601, 430, 693, 956, 24, 380, 997, 881, 731, 741, 909, 684, 236, 777, 108, 836, 887, 598, 274, 153, 498]) == 38\nassert solution.hIndex([830, 106, 3, 335, 666, 869, 732, 5, 18, 745, 473, 283, 191, 127, 32, 656, 347, 391, 928, 662, 354, 225, 182, 297, 355, 74, 927, 835, 593, 419, 628, 246]) == 29\nassert solution.hIndex([375, 346, 680, 297, 780, 414, 246, 168, 268, 585, 138, 564, 470, 936, 712, 853, 681, 714, 457, 631, 434, 96, 738, 797, 524, 826, 196, 607, 720, 95, 451, 799, 717, 888, 276, 735, 533, 148, 552]) == 39\nassert solution.hIndex([243, 995, 82, 315, 946, 743, 793, 834, 958, 452, 250, 814, 291, 883, 950, 193, 381, 623, 855, 90, 529, 418, 676, 223, 310, 609, 22, 734, 164, 111, 819, 762, 456, 497, 846, 484, 506]) == 36\nassert solution.hIndex([490, 86, 612, 950, 353, 677, 95, 670, 392, 126, 470, 890, 897, 17, 116, 125, 368, 30, 506, 150, 361, 159, 961, 784, 682, 400, 730, 271, 539, 383, 215, 129, 119, 296, 456, 935, 37, 538, 695, 214, 938, 918, 292, 436, 613, 231, 733]) == 44\nassert solution.hIndex([218, 907, 482, 253, 831, 51, 315, 597, 693, 260, 873, 608, 162, 992, 620, 475, 873, 95, 864, 654, 510, 318, 783, 484, 227, 365, 814, 340, 78, 261, 793, 112, 900, 24, 105, 473, 214, 959, 318, 266, 564, 567, 413, 58, 766, 261, 539, 669, 806, 91]) == 49\nassert solution.hIndex([253, 221, 261, 475, 610, 474, 434, 157, 642, 632, 52, 370, 261, 802, 530, 297, 422, 419, 450, 450, 772, 228, 503, 621, 397, 825, 307, 830, 240, 756, 800, 98, 907, 851, 168, 548, 123, 725, 787, 233, 180, 346, 708, 903]) == 44\nassert solution.hIndex([183, 505, 691, 830, 848, 474, 879, 160, 116, 861, 769, 307, 388, 255]) == 14\nassert solution.hIndex([903, 174, 368, 291, 355, 211]) == 6\nassert solution.hIndex([442, 726, 556, 979, 373, 696, 518, 585, 457, 793, 286, 344, 907, 541, 617, 540, 54, 641, 885, 509, 471, 38, 686, 638, 728, 24]) == 25\nassert solution.hIndex([903, 112, 831, 940, 854, 905, 949, 935, 815, 402, 925, 832, 273, 596, 540, 744, 395, 204, 725, 318, 8, 757, 511, 234, 538, 41, 517, 978, 251, 699, 352, 965, 953, 712, 525, 18, 82, 294, 607, 83, 862, 276, 460, 111, 189, 117, 815, 627, 3, 865]) == 46\nassert solution.hIndex([222, 608, 837, 254, 695, 983, 163, 757, 238, 882, 732, 486, 920, 50, 972, 479, 905, 69, 42, 552, 738, 280, 22, 500, 446, 474, 226, 206, 797, 703, 860, 239, 383, 953, 355, 556, 990, 167, 45, 445, 613, 845, 517, 681, 835, 974, 654, 393, 760, 415]) == 47\nassert solution.hIndex([655, 89, 883, 43, 388, 863, 705, 559, 617, 491, 180, 116, 281, 901, 661, 412, 78, 636, 220, 438, 358, 372, 930, 88, 508, 170, 547, 779, 252, 118, 928, 375, 928, 296, 429, 864, 422, 739, 860, 487, 285, 164, 100, 981, 333]) == 44\nassert solution.hIndex([432, 26, 544, 61, 447, 493, 458, 216, 522, 113, 131, 851, 920, 636, 355, 163, 852, 876, 447, 102, 46, 215, 864, 956, 202, 976, 569, 3, 42, 385, 631, 758, 742, 906, 239, 383, 748, 564, 297, 753, 661, 747, 98, 527]) == 42\nassert solution.hIndex([487, 705, 546, 202, 509, 23, 648, 796, 438, 134, 668, 633, 845, 197, 325, 757, 77, 539, 999, 277, 683, 643, 571, 174, 798, 918, 772, 42, 155, 719, 963, 994, 427, 714]) == 33\nassert solution.hIndex([738, 976, 131, 653, 31, 81, 437, 249, 952, 99, 361, 797, 960, 391, 500, 938, 950, 740, 853, 231, 633, 949, 772, 184, 82, 864, 304, 135, 980, 726]) == 30\nassert solution.hIndex([88, 306, 717, 378, 392, 919, 986, 761, 874, 784, 281, 622, 291, 834, 194, 119, 770, 530, 625, 743, 341, 153, 172, 623, 747]) == 25\nassert solution.hIndex([145, 694, 380, 471, 856, 54, 195, 678, 41, 465, 469, 619, 403, 27, 430, 166, 439, 56, 641, 688, 168, 733, 824, 366, 713, 362, 464, 935, 18, 468, 319, 359, 124, 429, 389]) == 33\nassert solution.hIndex([935, 608, 670, 234, 203, 555, 48, 121, 825, 218, 292, 72, 711, 166, 811, 455, 853, 352, 444, 758, 825, 385, 463, 284, 660, 568, 951, 77, 74, 278]) == 30\nassert solution.hIndex([261, 247, 139, 299, 553, 327, 990, 836, 802, 149, 209, 564, 220, 376, 932, 907, 943, 306, 820, 281, 242, 816, 771, 139, 968, 170, 68, 30, 958, 714, 756, 91, 383, 13, 883, 208, 258, 710, 817, 98, 41]) == 39\nassert solution.hIndex([333, 392, 34, 472, 358, 219, 49, 199, 925, 399, 220, 645, 215, 890, 850, 431, 773, 491, 40, 602, 282, 199, 831, 250, 105, 1, 545]) == 26\nassert solution.hIndex([945, 864, 535, 886, 377]) == 5\nassert solution.hIndex([352, 119, 254, 448, 506, 339, 749, 593, 717, 240, 188, 12, 25, 169, 838, 324, 950, 13, 422, 771, 354, 497, 931, 453, 464, 285, 370, 869, 277, 25, 836, 9, 640, 869, 76, 14, 209, 724, 992, 810, 374, 595, 861]) == 37\nassert solution.hIndex([378, 233, 305, 140, 342, 415, 10, 598, 351, 449, 126, 337, 820, 690, 528, 922]) == 15",
  "inefficient_solution": "class Solution:\n    def hIndex(self, citations: List[int]) -> int:\n        n = len(citations)\n        big_list = []\n        for x in citations:\n            big_list.append(x)\n            for i in range(n):\n                big_list.append(i)\n            big_list.append(0)\n        big_list = list(set(big_list))\n        cnt = {}\n        for x in big_list:\n            if x in cnt:\n                cnt[x] += 1\n            else:\n                cnt[x] = 1\n        s = [0] * (n + 1)\n        for h in range(n, -1, -1):\n            for x in cnt:\n                if x >= h:\n                    s[h] += cnt[x]\n            if s[h] >= h:\n                return h",
  "is_python": true
}