{
  "problem_idx": 1363,
  "task_name": "Largest Multiple of Three",
  "markdown_description": "\nGiven an array of digits `digits`, return *the largest multiple of **three** that can be formed by concatenating some of the given digits in **any order***. If there is no answer return an empty string.\n\n\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** digits = [8,1,9]\n**Output:** \"981\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** digits = [8,6,7,1,0]\n**Output:** \"8760\"\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** digits = [1]\n**Output:** \"\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= digits.length <= 104`\n* `0 <= digits[i] <= 9`\n\n\n",
  "canonical_solution": "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        digits.sort()\n        n = len(digits)\n        f = [[-inf] * 3 for _ in range(n + 1)]\n        f[0][0] = 0\n        for i, x in enumerate(digits, 1):\n            for j in range(3):\n                f[i][j] = max(f[i - 1][j], f[i - 1][(j - x % 3 + 3) % 3] + 1)\n        if f[n][0] <= 0:\n            return \"\"\n        arr = []\n        j = 0\n        for i in range(n, 0, -1):\n            k = (j - digits[i - 1] % 3 + 3) % 3\n            if f[i - 1][k] + 1 == f[i][j]:\n                arr.append(digits[i - 1])\n                j = k\n        i = 0\n        while i < len(arr) - 1 and arr[i] == 0:\n            i += 1\n        return \"\".join(map(str, arr[i:]))\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        digits.sort()\n        n = len(digits)\n        f = [[-float('inf')] * 3 for _ in range(n + 1)]\n        f[0][0] = 0\n        for i, x in enumerate(digits, 1):\n            for j in range(3):\n                f[i][j] = max(f[i - 1][j], f[i - 1][(j - x % 3 + 3) % 3] + 1)\n        if f[n][0] <= 0:\n            return \"\"\n        arr = []\n        j = 0\n        for i in range(n, 0, -1):\n            k = (j - digits[i - 1] % 3 + 3) % 3\n            if f[i - 1][k] + 1 == f[i][j]:\n                arr.append(digits[i - 1])\n                j = k\n        i = 0\n        while i < len(arr) - 1 and arr[i] == 0:\n            i += 1\n        return \"\".join(map(str, arr[i:]))\n\n\ndef generate_test_case():\n    solution = Solution()\n    digits = random.choices(range(10), k=random.randint(1, 100))\n    expected_result = solution.largestMultipleOfThree(digits)\n    return digits, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        digits, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestMultipleOfThree(digits) == expected_result\n        if expected_result != \"\":\n            print(f\"assert solution.largestMultipleOfThree({digits}) == '{expected_result}'\")\n            test_case_generator_results.append(f\"assert solution.largestMultipleOfThree({digits}) == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '9999999999999988888888887777776666665555555555444444444333333333222222222211111111100000000'\nassert solution.largestMultipleOfThree([0, 1, 2, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9]) == '98877665555554443222210'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '9999999999888888887777777777777777777666666666655555554444433333333222222222211111111110000000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999988888888887777777776666666666665555555555544444333333322222221111100000000'\nassert solution.largestMultipleOfThree([0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9]) == '9999888877777666666555444443322211100'\nassert solution.largestMultipleOfThree([1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9]) == '999988876666655555444433222111'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999998888888887777776666666666666555555544444444433333333222222222222222111111111100000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '9999999998888888888777777776666555544444333332222222211100000000'\nassert solution.largestMultipleOfThree([1, 1, 1, 2, 2, 5, 6, 7, 8, 9, 9]) == '99876522111'\nassert solution.largestMultipleOfThree([0, 0, 1, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 8, 9, 9, 9, 9, 9]) == '9999986666665554433200'\nassert solution.largestMultipleOfThree([0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9]) == '99998888877777776665555555443332222211000'\nassert solution.largestMultipleOfThree([1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9]) == '999988887777765443333222211'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999888877777777766666666665555554444444444444443333332222222211111111100000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999998888888887777777777666666655555555444444444443333333332222222222111111111111000000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9]) == '99999998887666655544444432221100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7, 7, 8, 8, 9, 9]) == '99887776555443333332220000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999999999888888888887777666666666655555544444444333333333222222222222221111111111111000000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9]) == '9988887776666555444443322211111000'\nassert solution.largestMultipleOfThree([0, 0, 1, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 8]) == '8766666544433100'\nassert solution.largestMultipleOfThree([3, 4, 6, 8, 9, 9]) == '998643'\nassert solution.largestMultipleOfThree([0, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9]) == '9988887766665444333222222210'\nassert solution.largestMultipleOfThree([0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9]) == '999888887777776666555555544433333322200'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999999998888888877777666666655555555444444433333322222211110000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9]) == '999888877766666655555444333333222221100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9]) == '9999999888877777777777766666666666666655555555555544444433333333322222222222211111110000000000000'\nassert solution.largestMultipleOfThree([0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 9]) == '998777655554443332221100'\nassert solution.largestMultipleOfThree([0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 9]) == '98877666655433332211100'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9]) == '999998888777766666555555544333332222222222211110000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9]) == '988887777777777666665544444433333222211100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9]) == '999999888888777776666666665555444443333222222222211110000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9]) == '99999998888888887777766666655555544444444444333333332222222111111000000000'\nassert solution.largestMultipleOfThree([0, 0, 2, 3, 4, 6, 8]) == '864300'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 5, 7, 7, 9]) == '97753333332210000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9]) == '9999988777777655555544333333222211111110000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999888888888776666655555444444333333332222111111111100000'\nassert solution.largestMultipleOfThree([0, 0, 1, 1, 1, 2, 3, 4, 4, 6, 7, 8, 8, 8, 8, 8, 9, 9]) == '998888876443211100'\nassert solution.largestMultipleOfThree([0, 2, 8]) == '0'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9]) == '99999988877777776665554444444333322222221111100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999998888888888888888888777777777777666666666555555554444443333322222221111000000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 8, 8, 9, 9]) == '998888766554444433332211000'\nassert solution.largestMultipleOfThree([0, 1, 4, 5, 7, 8, 9, 9]) == '9987540'\nassert solution.largestMultipleOfThree([0, 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 6, 6, 6, 6, 6, 7, 7]) == '776666655333322221000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999999988888888877777777766666666666665555554444444443333332222222111111100000000000'\nassert solution.largestMultipleOfThree([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9]) == '98877776666666555444433221100'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9]) == '999998888887777777766655555555444444433333221111000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9]) == '99998888888887777777777766666666666655555444444444443333322222221111111100000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9]) == '99999888777666665555554444322222111100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999999988888777777777777666666666666555555555444444444333333333333333322222222222111100000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999999998888888888777777777776666666666555555555555444444433333332221111111000000'\nassert solution.largestMultipleOfThree([0, 1, 2, 2, 4, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8]) == '88888876544220'\nassert solution.largestMultipleOfThree([0, 0, 0, 1, 1, 2, 4, 4, 5, 6, 6, 7, 8, 8]) == '8876654421000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '9999999999998888888888777777777777666666666655555555555444444443333332222222222211111111111100000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9]) == '99998888877777666655554444444444433333222222222211111100000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999988888888877777777776666666666666555555555554444444444333333222222211111110000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999998888888888777777777766665555555544444444433333333222222222211111111100000'\nassert solution.largestMultipleOfThree([0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 8, 9]) == '986665443210'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999988888888888777777777777766666666666665555555544444444333333333322222221111111100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9]) == '9999988888888887777777766666665555555555444444444433333222222222211111111100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 8, 8, 9, 9, 9]) == '99988666665544433322210000'\nassert solution.largestMultipleOfThree([0, 0, 1, 1, 1, 3, 3, 3, 3, 3, 3, 4, 6, 6, 6, 6, 7, 7, 8, 9, 9]) == '99776666433333311100'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9]) == '99999998888888887777776666666665555555444333333333332222222221111111000000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999999988888887777777777777666666555555554444443333333333322222222221111111110000000000000'\nassert solution.largestMultipleOfThree([0, 1, 2, 3, 4, 4, 6, 9]) == '9644310'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9]) == '99999888887777777777777776666666665555555444444433333333333333222221111111000000000000'\nassert solution.largestMultipleOfThree([0, 7, 9]) == '90'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9]) == '99999998888777666666655554444443333333221000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 1, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8]) == '8766655444431000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9]) == '999999888888877776666655554444444443333333333222221111110000'\nassert solution.largestMultipleOfThree([1, 8, 8]) == '81'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999888888877777666665555555555444444444433333333333332222111111000000'\nassert solution.largestMultipleOfThree([1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 9, 9]) == '99877776655554333321111'\nassert solution.largestMultipleOfThree([0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 8, 8, 9]) == '9886655444333332222110'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9]) == '999988888877777776666666666665555544444444443222222222211111111110000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9]) == '99999988888887777777776666655544444443333332222211111000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '9999999999988888887777777666666666666666555544444444444433333333333222221110000000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999988888887777766666655555554444444444443333333322222222111111111110000000000'\nassert solution.largestMultipleOfThree([0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999998888777666666655555555544444443333322222211111100'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9]) == '999999888777777777777766665555555443333333333322221111100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999988777777666666655555555444444444444333333333333333222222222111111100000000000'\nassert solution.largestMultipleOfThree([0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 9, 9]) == '9999877665544332211110'\nassert solution.largestMultipleOfThree([0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 7, 7, 8, 8, 9, 9]) == '998877554444433333222222221100'\nassert solution.largestMultipleOfThree([0, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 8, 9, 9, 9]) == '999866554444332211110'\nassert solution.largestMultipleOfThree([6]) == '6'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999998888888777777777766666666555555544444444433333333222222111100000000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999988888887777776666666665555555555554444444444433333333322222221111111111110000000000000'\nassert solution.largestMultipleOfThree([0, 0, 1, 2, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9]) == '98766655544100'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999998888888777777766666666555444444333332222222222222111100000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9]) == '99999998888888888777777777766666555544444444333333222222211111111100000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '99999999999998888888887777776666555555555544444444443333322222221111111111111000000000'\nassert solution.largestMultipleOfThree([1, 1, 1, 3, 6, 7, 8, 8]) == '8763111'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9]) == '99999988887777666655554433332222111000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9]) == '9988887777776666666666666555554444444444332222222111111000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9]) == '9999888766654443332220000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9]) == '9999888888888888887777766666666666555555555444444433333333333333222222222111110000000000000'\nassert solution.largestMultipleOfThree([0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 9, 9, 9, 9]) == '999987666665444322210'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9]) == '9999998888888887777777666666666666655555444444443333333333322222222111111111100000000'\nassert solution.largestMultipleOfThree([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == '999999999988888888877777666666666655555554444444444333333222222222211111111111000000000'\nassert solution.largestMultipleOfThree([0, 2, 3, 4, 4, 6, 6]) == '664320'\nassert solution.largestMultipleOfThree([1, 1, 2, 2, 2, 3, 3, 3, 4, 6, 8, 8, 9, 9, 9, 9]) == '999988643332221'",
  "inefficient_solution": "class Solution:\n    def largestMultipleOfThree(self, digits: List[int]) -> str:\n        digits.sort()\n        n = len(digits)\n        dp = [[[0] * 10 for _ in range(n + 1)] for _ in range(3)]\n        for i, x in enumerate(digits, 1):\n            for j in range(3):\n                for k in range(10):\n                    dp[i][j][k] = -1\n        for i, x in enumerate(digits, 1):\n            for j in range(3):\n                if x % 3 == j:\n                    for k in range(10):\n                        if dp[i - 1][j][k] != -1:\n                            dp[i][j][k] = dp[i - 1][j][k]\n                        else:\n                            dp[i][j][k] = -1\n                else:\n                    for k in range(10):\n                        if dp[i - 1][(j - x % 3 + 3) % 3][k] != -1:\n                            dp[i][j][k] = dp[i - 1][(j - x % 3 + 3) % 3][k] + 1\n                        else:\n                            dp[i][j][k] = -1\n        if dp[n][0][0] <= 0:\n            return \"\"\n        result = []\n        j = 0\n        for i in range(n, 0, -1):\n            k = (j - digits[i - 1] % 3 + 3) % 3\n            max_val = -1\n            max_k = -1\n            for x in range(10):\n                if dp[i - 1][k][x] != -1:\n                    if dp[i - 1][k][x] > max_val:\n                        max_val = dp[i - 1][k][x]\n                        max_k = x\n            if max_val == -1:\n                return \"\"\n            result.append(max_k)\n            j = k\n        i = 0\n        while i < len(result) - 1 and result[i] == 0:\n            i += 1\n        return \"\".join(map(str, result[i:]))",
  "is_python": true
}