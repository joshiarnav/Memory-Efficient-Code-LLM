{
  "problem_idx": 2090,
  "task_name": "K Radius Subarray Averages",
  "markdown_description": "\nYou are given a **0-indexed** array `nums` of `n` integers, and an integer `k`.\n\n\nThe **k-radius average** for a subarray of `nums` **centered** at some index `i` with the **radius** `k` is the average of **all** elements in `nums` between the indices `i - k` and `i + k` (**inclusive**). If there are less than `k` elements before **or** after the index `i`, then the **k-radius average** is `-1`.\n\n\nBuild and return *an array* `avgs` *of length* `n` *where* `avgs[i]` *is the **k-radius average** for the subarray centered at index* `i`.\n\n\nThe **average** of `x` elements is the sum of the `x` elements divided by `x`, using **integer division**. The integer division truncates toward zero, which means losing its fractional part.\n\n\n* For example, the average of four elements `2`, `3`, `1`, and `5` is `(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75`, which truncates to `2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2090.K%20Radius%20Subarray%20Averages/images/eg1.png)\n\n```\n\n**Input:** nums = [7,4,3,9,1,8,5,2,6], k = 3\n**Output:** [-1,-1,-1,5,4,4,-1,-1,-1]\n**Explanation:**\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements **before** each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\n  Using **integer division**, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements **after** each index.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [100000], k = 0\n**Output:** [100000]\n**Explanation:**\n- The sum of the subarray centered at index 0 with radius 0 is: 100000.\n  avg[0] = 100000 / 1 = 100000.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [8], k = 100000\n**Output:** [-1]\n**Explanation:** \n- avg[0] is -1 because there are less than k elements before and after index 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `0 <= nums[i], k <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        s = 0\n        ans = [-1] * len(nums)\n        for i, v in enumerate(nums):\n            s += v\n            if i >= k * 2:\n                ans[i - k] = s // (k * 2 + 1)\n                s -= nums[i - k * 2]\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        s = 0\n        ans = [-1] * len(nums)\n        for i, v in enumerate(nums):\n            s += v\n            if i >= k * 2:\n                ans[i - k] = s // (k * 2 + 1)\n                s -= nums[i - k * 2]\n        return ans\n\ndef generate_test_case():\n    # Instantiate the solution class\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(0, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getAverages(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getAverages(nums, k) == expected_result\n        print(f\"assert solution.getAverages({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getAverages({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getAverages([48, 91, 16, 49, 73, 31], 57) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([52, 41, 61, 23, 40, 24, 30], 31) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([90, 92], 98) == [-1, -1]\nassert solution.getAverages([9, 89, 76, 40, 32, 65, 72, 96, 53], 63) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([49, 87, 40, 13, 5], 92) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([23, 25, 97, 48, 100], 43) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([91, 69], 66) == [-1, -1]\nassert solution.getAverages([45, 97, 40, 54, 31], 88) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([2, 40, 11, 10, 57, 87], 51) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([60, 22, 43, 20, 86, 1], 5) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([33, 78, 55, 10, 91, 44, 62, 67], 44) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([91, 43, 92, 60, 70, 80, 98, 99, 39, 33], 17) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([56, 17, 95, 79, 21, 67, 14], 86) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([20, 2, 60, 82, 61, 55, 30, 27, 93, 29], 73) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([73, 70, 88, 42, 17], 55) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([59, 100], 5) == [-1, -1]\nassert solution.getAverages([78, 71, 100, 93, 98, 72], 25) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([64, 59, 56, 41, 27, 87, 90, 1], 64) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([6, 37, 94, 82, 25, 60, 69], 37) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([44, 71, 38, 39, 6, 60, 35, 91, 3], 29) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([27, 76, 16, 91, 53, 98, 48], 91) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([31, 9, 79, 69, 38], 0) == [31, 9, 79, 69, 38]\nassert solution.getAverages([82, 70, 47, 24, 29, 51, 75, 69, 4], 56) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([84, 60, 20, 29, 71, 75, 13], 88) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([62, 4, 97, 100, 69, 94, 41, 59], 33) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([66, 80, 1, 19, 14, 36], 41) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([88, 79, 98, 14, 49, 18, 67, 84, 30], 85) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([40, 45, 14, 6, 94, 90, 1, 26, 82], 23) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([90, 30, 23], 76) == [-1, -1, -1]\nassert solution.getAverages([99, 97, 35], 53) == [-1, -1, -1]\nassert solution.getAverages([82, 32, 97, 20, 68, 52, 57, 8, 22, 80], 10) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([59, 95, 72, 39, 61, 25, 28], 97) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([1, 32, 56, 99, 7, 98, 60], 89) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([17, 29, 51, 10, 54, 62, 26, 5, 41], 42) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([42, 17, 54, 85, 66, 41, 71, 92, 100], 4) == [-1, -1, -1, -1, 63, -1, -1, -1, -1]\nassert solution.getAverages([20, 80, 96, 27, 36, 42, 64, 66], 89) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([34, 5, 38, 97, 79, 87], 13) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([12, 41, 52, 31, 97, 57, 88, 74], 26) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([83, 57], 34) == [-1, -1]\nassert solution.getAverages([57, 16, 94, 80, 8, 29, 97, 1], 12) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([90, 52], 28) == [-1, -1]\nassert solution.getAverages([93, 80, 57], 46) == [-1, -1, -1]\nassert solution.getAverages([51, 89, 16, 50, 54], 37) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([98, 24, 71, 81, 61, 4, 84, 38], 60) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([40, 52, 90, 77, 99], 40) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([63, 16, 77, 82, 93], 12) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([65, 32, 33, 31, 74, 61], 92) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([35, 97, 45, 82, 27, 57], 40) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([55, 92, 98, 13, 16, 40, 86], 29) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([69, 25, 15, 29, 18, 1, 88, 30], 28) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([22, 42, 2, 88, 69, 64], 65) == [-1, -1, -1, -1, -1, -1]\nassert solution.getAverages([87, 1, 67], 53) == [-1, -1, -1]\nassert solution.getAverages([3, 65, 23, 44], 58) == [-1, -1, -1, -1]\nassert solution.getAverages([55, 35, 25], 59) == [-1, -1, -1]\nassert solution.getAverages([41, 43, 26, 73, 16, 34, 23, 1, 20], 49) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([30, 90, 47, 5, 80, 24, 35, 97], 68) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([75, 63, 27, 22, 50, 19, 20, 23, 40], 61) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([22, 56, 100, 32, 29, 98, 23, 40, 88], 57) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([59, 34, 15, 20, 27, 98, 31, 61, 96], 97) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([60, 8, 16, 17, 95, 10, 73, 38, 46, 87], 43) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([94, 15, 68, 67], 78) == [-1, -1, -1, -1]\nassert solution.getAverages([74, 82, 3, 59, 62, 30, 38, 17, 75, 91], 14) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([65, 47, 13], 73) == [-1, -1, -1]\nassert solution.getAverages([83, 99, 84, 64, 7], 58) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([68, 67, 13], 78) == [-1, -1, -1]\nassert solution.getAverages([6, 19, 99, 37, 77, 76, 43, 36, 30, 4], 3) == [-1, -1, -1, 51, 55, 56, 43, -1, -1, -1]\nassert solution.getAverages([37, 64, 27, 41, 54, 14, 77], 13) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([31, 96, 94, 40], 24) == [-1, -1, -1, -1]\nassert solution.getAverages([49, 73, 7, 22], 49) == [-1, -1, -1, -1]\nassert solution.getAverages([67, 47, 53, 51, 2, 7, 52, 35, 33], 61) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([25, 31, 88, 56, 81, 86, 22, 83, 17], 39) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([62, 2], 69) == [-1, -1]\nassert solution.getAverages([51, 29, 70], 72) == [-1, -1, -1]\nassert solution.getAverages([26, 70], 55) == [-1, -1]\nassert solution.getAverages([54, 57, 96, 28], 42) == [-1, -1, -1, -1]\nassert solution.getAverages([7, 22, 93, 2, 6, 41, 3], 90) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([27, 51], 82) == [-1, -1]\nassert solution.getAverages([14, 94, 31, 76, 28, 96, 46, 55, 93, 80], 13) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([50, 69, 90, 6], 47) == [-1, -1, -1, -1]\nassert solution.getAverages([14, 60, 19, 6, 26, 21, 8, 92, 52], 59) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([67, 47, 18, 35, 60, 100, 82, 21, 25, 70], 88) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([24, 84, 47, 2, 30, 96, 7, 77, 66], 3) == [-1, -1, -1, 41, 49, 46, -1, -1, -1]\nassert solution.getAverages([95, 28, 13, 51, 52, 66, 54, 83, 86], 75) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([47, 3, 63, 12, 21, 51, 44, 84], 69) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([43, 54, 99, 10, 64, 81, 73], 3) == [-1, -1, -1, 60, -1, -1, -1]\nassert solution.getAverages([33, 91, 46, 44, 76, 34, 99, 51, 67, 52], 61) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([88, 79, 75, 84], 96) == [-1, -1, -1, -1]\nassert solution.getAverages([4, 75, 38, 22], 21) == [-1, -1, -1, -1]\nassert solution.getAverages([41, 60, 46, 30, 16, 81, 8, 39], 93) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([99, 96, 38, 88, 36], 90) == [-1, -1, -1, -1, -1]\nassert solution.getAverages([93, 1, 30, 47, 95, 58, 64, 19], 15) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([55, 99, 49, 26], 12) == [-1, -1, -1, -1]\nassert solution.getAverages([90, 50, 78, 68, 56, 77, 52, 41, 32, 62], 57) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([52, 8, 21, 63, 77, 31, 36, 92], 89) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([29, 18, 51, 49, 55, 50, 98], 16) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([3, 38, 62, 1, 34, 74, 27, 64], 61) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([82, 52, 46], 5) == [-1, -1, -1]\nassert solution.getAverages([38, 55, 58, 21, 37, 53, 31], 45) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.getAverages([97, 69, 73, 78], 79) == [-1, -1, -1, -1]\nassert solution.getAverages([51, 65, 70, 57, 3], 75) == [-1, -1, -1, -1, -1]",
  "inefficient_solution": "class Solution:\n    def getAverages(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        total = [0] * n\n        prefix_sum = [0] * (n + 1)\n        \n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n            total[i] = prefix_sum[i + 1] - prefix_sum[i - k]\n        \n        ans = [0] * n\n        for i in range(k, n - k):\n            if total[i] == 0:\n                ans[i] = -1\n            else:\n                ans[i] = total[i] // (2 * k + 1)\n        \n        return ans",
  "is_python": true
}