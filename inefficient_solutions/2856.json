{
  "problem_idx": 2856,
  "task_name": "Minimum Array Length After Pair Removals",
  "markdown_description": "\nYou are given a **0-indexed** **sorted** array of integers `nums`.\n\n\nYou can perform the following operation any number of times:\n\n\n* Choose **two** indices, `i` and `j`, where `i < j`, such that `nums[i] < nums[j]`.\n* Then, remove the elements at indices `i` and `j` from `nums`. The remaining elements retain their original order, and the array is re-indexed.\n\n\nReturn *an integer that denotes the **minimum** length of* `nums` *after performing the operation any number of times (**including zero**).*\n\n\nNote that `nums` is sorted in **non-decreasing** order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,4,9]\n**Output:** 0\n**Explanation:** Initially, nums = [1, 3, 4, 9].\nIn the first operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 1 < 3.\nRemove indices 0 and 1, and nums becomes [4, 9].\nFor the next operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 4 < 9.\nRemove indices 0 and 1, and nums becomes an empty array [].\nHence, the minimum length achievable is 0.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,6,9]\n**Output:** 0\n**Explanation:** Initially, nums = [2, 3, 6, 9]. \nIn the first operation, we can choose index 0 and 2 because nums[0] < nums[2] <=> 2 < 6. \nRemove indices 0 and 2, and nums becomes [3, 9]. \nFor the next operation, we can choose index 0 and 1 because nums[0] < nums[1] <=> 3 < 9. \nRemove indices 0 and 1, and nums becomes an empty array []. \nHence, the minimum length achievable is 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,1,2]\n**Output:** 1\n**Explanation:** Initially, nums = [1, 1, 2].\nIn an operation, we can choose index 0 and 2 because nums[0] < nums[2] <=> 1 < 2. \nRemove indices 0 and 2, and nums becomes [1]. \nIt is no longer possible to perform an operation on the array. \nHence, the minimum achievable length is 1. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `nums` is sorted in **non-decreasing** order.\n\n\n",
  "canonical_solution": "class Solution:\n    def minLengthAfterRemovals(self, nums: List[int]) -> int:\n        cnt = Counter(nums)\n        pq = [-x for x in cnt.values()]\n        heapify(pq)\n        ans = len(nums)\n        while len(pq) > 1:\n            x, y = -heappop(pq), -heappop(pq)\n            x -= 1\n            y -= 1\n            if x > 0:\n                heappush(pq, -x)\n            if y > 0:\n                heappush(pq, -y)\n            ans -= 2\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import Counter\nfrom heapq import heappush, heappop, heapify\n\nclass Solution:\n    def minLengthAfterRemovals(self, nums: List[int]) -> int:\n        cnt = Counter(nums)\n        pq = [-x for x in cnt.values()]\n        heapify(pq)\n        ans = len(nums)\n        while len(pq) > 1:\n            x, y = -heappop(pq), -heappop(pq)\n            x -= 1\n            y -= 1\n            if x > 0:\n                heappush(pq, -x)\n            if y > 0:\n                heappush(pq, -y)\n            ans -= 2\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = sorted(random.sample(range(1, 101), random.randint(2, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minLengthAfterRemovals(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minLengthAfterRemovals(nums) == expected_result\n        print(f\"assert solution.minLengthAfterRemovals({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minLengthAfterRemovals({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minLengthAfterRemovals([12, 21, 95]) == 1\nassert solution.minLengthAfterRemovals([19, 20, 26, 36, 37, 82, 87]) == 1\nassert solution.minLengthAfterRemovals([44, 52]) == 0\nassert solution.minLengthAfterRemovals([19, 26, 35, 42, 48, 53, 61, 63, 84]) == 1\nassert solution.minLengthAfterRemovals([1, 5, 16, 67, 77, 82, 97]) == 1\nassert solution.minLengthAfterRemovals([1, 13, 22, 79, 97]) == 1\nassert solution.minLengthAfterRemovals([6, 12, 18, 77, 88, 89, 97]) == 1\nassert solution.minLengthAfterRemovals([17, 26, 66, 98]) == 0\nassert solution.minLengthAfterRemovals([4, 12, 41, 47, 60, 72, 79, 87, 100]) == 1\nassert solution.minLengthAfterRemovals([12, 17]) == 0\nassert solution.minLengthAfterRemovals([4, 21, 27, 43, 45, 80, 89, 94, 99]) == 1\nassert solution.minLengthAfterRemovals([5, 20, 31, 51, 79, 94, 96]) == 1\nassert solution.minLengthAfterRemovals([32, 49, 78, 87, 97]) == 1\nassert solution.minLengthAfterRemovals([11, 18, 22, 36, 68, 75, 95]) == 1\nassert solution.minLengthAfterRemovals([46, 72, 73, 77, 83, 96]) == 0\nassert solution.minLengthAfterRemovals([7, 19, 25, 48, 52, 59, 60, 65]) == 0\nassert solution.minLengthAfterRemovals([37, 46, 87]) == 1\nassert solution.minLengthAfterRemovals([8, 19, 25, 28, 31, 41, 57, 62, 65, 92]) == 0\nassert solution.minLengthAfterRemovals([1, 4, 20, 26, 39, 58, 68, 71, 99]) == 1\nassert solution.minLengthAfterRemovals([1, 20, 33, 43, 51, 68, 77, 82]) == 0\nassert solution.minLengthAfterRemovals([8, 25, 26, 32, 45, 63, 77, 85]) == 0\nassert solution.minLengthAfterRemovals([5, 20, 51]) == 1\nassert solution.minLengthAfterRemovals([55, 96]) == 0\nassert solution.minLengthAfterRemovals([8, 91]) == 0\nassert solution.minLengthAfterRemovals([27, 30, 40, 55, 66, 79, 86, 87]) == 0\nassert solution.minLengthAfterRemovals([20, 77]) == 0\nassert solution.minLengthAfterRemovals([23, 49, 87]) == 1\nassert solution.minLengthAfterRemovals([22, 41, 43, 52, 68, 89]) == 0\nassert solution.minLengthAfterRemovals([19, 36, 54, 60, 63, 64, 77, 90, 94, 95]) == 0\nassert solution.minLengthAfterRemovals([29, 46, 48, 49, 69, 76, 85, 95]) == 0\nassert solution.minLengthAfterRemovals([60, 67, 73]) == 1\nassert solution.minLengthAfterRemovals([17, 24, 50, 67, 75, 78, 92]) == 1\nassert solution.minLengthAfterRemovals([18, 22, 31, 39, 47, 57, 74, 88, 92, 96]) == 0\nassert solution.minLengthAfterRemovals([23, 37, 38, 63, 71, 74, 86, 88, 94, 99]) == 0\nassert solution.minLengthAfterRemovals([5, 27, 62, 73]) == 0\nassert solution.minLengthAfterRemovals([4, 13, 29, 30, 68, 99]) == 0\nassert solution.minLengthAfterRemovals([2, 7, 47, 78]) == 0\nassert solution.minLengthAfterRemovals([11, 13, 18, 24, 46, 52, 62, 89, 93, 95]) == 0\nassert solution.minLengthAfterRemovals([14, 18, 24, 30, 39, 40, 43, 62, 74, 100]) == 0\nassert solution.minLengthAfterRemovals([3, 7, 12, 34, 35, 42, 71, 73]) == 0\nassert solution.minLengthAfterRemovals([15, 19, 25, 32, 36, 45, 50, 62, 79, 81]) == 0\nassert solution.minLengthAfterRemovals([33, 39, 46, 51, 55, 78]) == 0\nassert solution.minLengthAfterRemovals([19, 22, 29, 66, 96]) == 1\nassert solution.minLengthAfterRemovals([2, 9, 42, 63, 76, 83]) == 0\nassert solution.minLengthAfterRemovals([3, 21, 55, 61, 88, 97, 100]) == 1\nassert solution.minLengthAfterRemovals([20, 35, 36, 64, 97]) == 1\nassert solution.minLengthAfterRemovals([3, 8, 32, 36, 62, 63, 75, 92]) == 0\nassert solution.minLengthAfterRemovals([22, 33, 52, 53, 86, 94]) == 0\nassert solution.minLengthAfterRemovals([83, 92]) == 0\nassert solution.minLengthAfterRemovals([2, 21, 31, 45]) == 0\nassert solution.minLengthAfterRemovals([23, 33, 44, 46, 58, 63, 77, 82, 92]) == 1\nassert solution.minLengthAfterRemovals([19, 24, 31, 75, 78, 83, 93, 100]) == 0\nassert solution.minLengthAfterRemovals([1, 9, 23, 42, 49, 53, 64, 92, 95, 100]) == 0\nassert solution.minLengthAfterRemovals([4, 40, 68]) == 1\nassert solution.minLengthAfterRemovals([55, 88]) == 0\nassert solution.minLengthAfterRemovals([18, 27, 32, 50, 88, 94, 100]) == 1\nassert solution.minLengthAfterRemovals([8, 10, 12, 16, 23, 35, 36, 67]) == 0\nassert solution.minLengthAfterRemovals([8, 9, 11, 55, 62, 68, 76, 78, 82, 89]) == 0\nassert solution.minLengthAfterRemovals([11, 38, 40, 42, 63, 71]) == 0\nassert solution.minLengthAfterRemovals([25, 58, 61, 74, 80, 95, 98]) == 1\nassert solution.minLengthAfterRemovals([79, 96]) == 0\nassert solution.minLengthAfterRemovals([10, 16, 19, 31, 39, 68, 76, 83]) == 0\nassert solution.minLengthAfterRemovals([19, 36]) == 0\nassert solution.minLengthAfterRemovals([4, 24, 70, 79, 84, 100]) == 0\nassert solution.minLengthAfterRemovals([12, 17, 20, 28, 40, 46, 55, 80]) == 0\nassert solution.minLengthAfterRemovals([11, 18, 28]) == 1\nassert solution.minLengthAfterRemovals([38, 48, 68, 80, 83, 84, 85, 89, 90, 93]) == 0\nassert solution.minLengthAfterRemovals([13, 16, 30, 72, 96]) == 1\nassert solution.minLengthAfterRemovals([4, 14, 33, 48, 55, 69, 75]) == 1\nassert solution.minLengthAfterRemovals([1, 15, 27, 53, 68, 81, 82, 85]) == 0\nassert solution.minLengthAfterRemovals([6, 11, 38, 65, 69, 81]) == 0\nassert solution.minLengthAfterRemovals([70, 71, 72, 75, 95]) == 1\nassert solution.minLengthAfterRemovals([10, 36, 37, 71, 78, 94]) == 0\nassert solution.minLengthAfterRemovals([6, 70, 92]) == 1\nassert solution.minLengthAfterRemovals([2, 24, 38, 46, 68, 71]) == 0\nassert solution.minLengthAfterRemovals([13, 18, 20, 36, 39, 64, 65, 96]) == 0\nassert solution.minLengthAfterRemovals([53, 65, 66, 74, 88]) == 1\nassert solution.minLengthAfterRemovals([13, 18, 27, 46, 65, 73, 83, 85, 94, 98]) == 0\nassert solution.minLengthAfterRemovals([10, 50, 54, 79]) == 0\nassert solution.minLengthAfterRemovals([4, 45, 51, 57, 70, 92]) == 0\nassert solution.minLengthAfterRemovals([27, 28, 32, 43, 50, 70, 71, 99]) == 0\nassert solution.minLengthAfterRemovals([3, 35, 43, 49, 61, 80]) == 0\nassert solution.minLengthAfterRemovals([8, 24, 36, 50, 84, 92, 99]) == 1\nassert solution.minLengthAfterRemovals([14, 16, 23, 40, 52, 96, 99]) == 1\nassert solution.minLengthAfterRemovals([12, 37, 43, 57, 66, 76]) == 0\nassert solution.minLengthAfterRemovals([6, 90]) == 0\nassert solution.minLengthAfterRemovals([31, 51, 64, 65, 68, 91, 95]) == 1\nassert solution.minLengthAfterRemovals([14, 15, 24, 42, 50, 52, 59]) == 1\nassert solution.minLengthAfterRemovals([20, 22, 23, 40, 50, 63, 65, 97]) == 0\nassert solution.minLengthAfterRemovals([10, 24, 41, 43, 52, 55, 61, 66, 87, 93]) == 0\nassert solution.minLengthAfterRemovals([5, 7, 32, 48, 94]) == 1\nassert solution.minLengthAfterRemovals([46, 62]) == 0\nassert solution.minLengthAfterRemovals([37, 47, 49, 75, 79, 90, 94, 99]) == 0\nassert solution.minLengthAfterRemovals([1, 5]) == 0\nassert solution.minLengthAfterRemovals([5, 11, 30, 60, 62]) == 1\nassert solution.minLengthAfterRemovals([15, 26, 32]) == 1\nassert solution.minLengthAfterRemovals([29, 45, 59, 67, 100]) == 1\nassert solution.minLengthAfterRemovals([14, 19, 29, 45, 72, 90, 96, 97]) == 0\nassert solution.minLengthAfterRemovals([5, 14, 16, 29, 33, 48, 68, 75, 93]) == 1\nassert solution.minLengthAfterRemovals([8, 10, 13, 14, 20, 26, 33, 81, 96]) == 1",
  "inefficient_solution": "class Solution:\n    def minLengthAfterRemovals(self, nums: List[int]) -> int:\n        # Create a mapping of numbers to lists of their indices\n        num_to_indices = {}\n        for i, num in enumerate(nums):\n            if num not in num_to_indices:\n                num_to_indices[num] = []\n            num_to_indices[num].append(i)\n\n        # Create a list of lists containing the indices of all numbers\n        indices = []\n        for indices_list in num_to_indices.values():\n            for _ in range(len(indices_list)):\n                indices.append(indices_list[:])\n\n        # Initialize the minimum length to the length of the input array\n        min_length = len(nums)\n\n        # Iterate over all possible pairs of indices\n        for i in range(len(indices)):\n            for j in range(i + 1, len(indices)):\n                # Remove the elements at indices i and j from the list of indices\n                indices[i] = indices[i][:len(indices[i]) - 1]\n                indices[j] = indices[j][:len(indices[j]) - 1]\n\n                # Update the minimum length if necessary\n                min_length = min(min_length, len(nums) - 2)\n\n                # Re-add the removed elements to their original positions in the list of indices\n                indices[i].append(i)\n                indices[j].append(j)\n\n        return min_length",
  "is_python": true
}