{
  "problem_idx": 1467,
  "task_name": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
  "markdown_description": "\nGiven `2n` balls of `k` distinct colors. You will be given an integer array `balls` of size `k` where `balls[i]` is the number of balls of color `i`.\n\n\nAll the balls will be **shuffled uniformly at random**, then we will distribute the first `n` balls to the first box and the remaining `n` balls to the other box (Please read the explanation of the second example carefully).\n\n\nPlease note that the two boxes are considered different. For example, if we have two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the distribution `[a] (b)` is considered different than the distribution `[b] (a)` (Please read the explanation of the first example carefully).\n\n\nReturn *the probability* that the two boxes have the same number of distinct balls. Answers within `10-5` of the actual value will be accepted as correct.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** balls = [1,1]\n**Output:** 1.00000\n**Explanation:** Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** balls = [2,1,1]\n**Output:** 0.66667\n**Explanation:** We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** balls = [1,2,1,2]\n**Output:** 0.60000\n**Explanation:** The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= balls.length <= 8`\n* `1 <= balls[i] <= 6`\n* `sum(balls)` is even.\n\n\n",
  "canonical_solution": "class Solution:\n    def getProbability(self, balls: List[int]) -> float:\n        @cache\n        def dfs(i: int, j: int, diff: int) -> float:\n            if i >= k:\n                return 1 if j == 0 and diff == 0 else 0\n            if j < 0:\n                return 0\n            ans = 0\n            for x in range(balls[i] + 1):\n                y = 1 if x == balls[i] else (-1 if x == 0 else 0)\n                ans += dfs(i + 1, j - x, diff + y) * comb(balls[i], x)\n            return ans\n\n        n = sum(balls) >> 1\n        k = len(balls)\n        return dfs(0, n, 0) / comb(n << 1, n)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom math import comb\n\nclass Solution:\n    def getProbability(self, balls: List[int]) -> float:\n        @cache\n        def dfs(i: int, j: int, diff: int) -> float:\n            if i >= k:\n                return 1 if j == 0 and diff == 0 else 0\n            if j < 0:\n                return 0\n            ans = 0\n            for x in range(balls[i] + 1):\n                y = 1 if x == balls[i] else (-1 if x == 0 else 0)\n                ans += dfs(i + 1, j - x, diff + y) * comb(balls[i], x)\n            return ans\n\n        n = sum(balls) >> 1\n        k = len(balls)\n        return dfs(0, n, 0) / comb(n << 1, n)\n\ndef generate_balls():\n    balls = []\n    k = random.randint(1, 8)\n    for _ in range(k):\n        balls.append(random.randint(1, 6))\n    while sum(balls) % 2 != 0: \n        k = random.randint(1, 8)\n        balls = []\n        for _ in range(k):\n            balls.append(random.randint(1, 6))\n    return balls\n\ndef generate_test_case():\n    solution = Solution()\n    balls = generate_balls()\n    expected_result = solution.getProbability(balls)\n    return balls, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        balls, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getProbability(balls) == expected_result\n        test_case_generator_results.append(f\"assert solution.getProbability({balls}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getProbability([6, 1, 2, 6, 6, 2, 4, 3]) == 0.2748095250620304\nassert solution.getProbability([5, 2, 6, 1, 4]) == 0.27568901686548747\nassert solution.getProbability([4]) == 1.0\nassert solution.getProbability([6]) == 1.0\nassert solution.getProbability([5, 4, 2, 5, 5, 1]) == 0.2763072840472221\nassert solution.getProbability([6]) == 1.0\nassert solution.getProbability([2, 4, 6, 3, 5]) == 0.4961570936803135\nassert solution.getProbability([2, 6, 6, 4]) == 0.5271904566022213\nassert solution.getProbability([4, 3, 1, 6, 4, 3, 4, 5]) == 0.24594921321588947\nassert solution.getProbability([1, 4, 3, 6, 4, 5, 5, 4]) == 0.21883321463872743\nassert solution.getProbability([3, 6, 4, 2, 4, 3]) == 0.4732079066444391\nassert solution.getProbability([2, 4, 5, 6, 6, 4, 5]) == 0.47952125671576146\nassert solution.getProbability([3, 5, 6]) == 0.8088578088578089\nassert solution.getProbability([1, 1, 5, 4, 3, 6]) == 0.3972699127497889\nassert solution.getProbability([2, 5, 4, 1, 4, 3, 1, 4]) == 0.2803070532913042\nassert solution.getProbability([4, 3, 3, 6]) == 0.6820512820512821\nassert solution.getProbability([3, 4, 1, 6]) == 0.15034965034965034\nassert solution.getProbability([2]) == 1.0\nassert solution.getProbability([1, 3, 3, 5, 3, 2, 6, 1]) == 0.2716522271644092\nassert solution.getProbability([5, 2, 1, 3, 5]) == 0.2868686868686869\nassert solution.getProbability([6, 2, 1, 4, 1, 4]) == 0.29197860962566846\nassert solution.getProbability([3, 3, 1, 3, 4, 5, 5]) == 0.2562056331069657\nassert solution.getProbability([2, 1, 6, 4, 1, 2, 1, 1]) == 0.22854792266556972\nassert solution.getProbability([6, 3, 2, 5, 2, 4, 3, 3]) == 0.38872327166310205\nassert solution.getProbability([2, 5, 6, 1]) == 0.2727272727272727\nassert solution.getProbability([6, 4, 2, 4, 4, 4, 4]) == 0.47700901871045903\nassert solution.getProbability([1, 4, 5, 2]) == 0.28354978354978355\nassert solution.getProbability([6]) == 1.0\nassert solution.getProbability([4, 1, 3, 1, 3, 2, 3, 5]) == 0.28644575239002484\nassert solution.getProbability([5, 6, 2, 3, 2]) == 0.4306869600987248\nassert solution.getProbability([2, 6, 5, 2, 3, 6, 2]) == 0.3612503124819722\nassert solution.getProbability([1, 1, 4, 5, 3]) == 0.4393939393939394\nassert solution.getProbability([3, 1]) == 0.0\nassert solution.getProbability([6]) == 1.0\nassert solution.getProbability([3, 4, 4, 3, 1, 6, 3]) == 0.26003381461720404\nassert solution.getProbability([3, 2, 6, 3, 2, 2, 4, 6]) == 0.35705538355693156\nassert solution.getProbability([1, 1, 6, 6, 6]) == 0.5146246941912577\nassert solution.getProbability([6, 1, 4, 1, 1, 2, 3]) == 0.230275606746195\nassert solution.getProbability([4, 3, 1, 2, 2]) == 0.3398268398268398\nassert solution.getProbability([1, 4, 1, 5, 6, 2, 3]) == 0.277832590526089\nassert solution.getProbability([3, 4, 3, 6, 6, 2, 2]) == 0.3938153568063381\nassert solution.getProbability([5, 3]) == 0.8571428571428571\nassert solution.getProbability([4, 1, 3, 6, 6, 2]) == 0.2797689926172898\nassert solution.getProbability([5, 6, 6, 3, 1, 3, 1, 5]) == 0.3304602600660454\nassert solution.getProbability([5, 1, 1, 2, 3, 2, 4]) == 0.2835047305635541\nassert solution.getProbability([2, 5, 5, 6, 1, 3]) == 0.2788532417015389\nassert solution.getProbability([3, 3, 5, 3, 1, 1, 2]) == 0.29962978198272316\nassert solution.getProbability([2, 6, 1, 5]) == 0.2727272727272727\nassert solution.getProbability([6, 6, 6, 1, 5, 4, 2, 2]) == 0.2730158540024904\nassert solution.getProbability([1, 6, 2, 5]) == 0.2727272727272727\nassert solution.getProbability([3, 6, 2, 1, 2]) == 0.30885780885780884\nassert solution.getProbability([3, 4, 3]) == 0.8095238095238095\nassert solution.getProbability([3, 5, 3, 5, 2]) == 0.49823118058412175\nassert solution.getProbability([6]) == 1.0\nassert solution.getProbability([6, 1, 3, 2, 4]) == 0.28997668997668996\nassert solution.getProbability([4]) == 1.0\nassert solution.getProbability([3, 6, 3, 2, 5, 3, 2]) == 0.4020433732373428\nassert solution.getProbability([6, 4, 6, 1, 6, 5]) == 0.09505022858367858\nassert solution.getProbability([4, 2, 1, 4, 1]) == 0.33766233766233766\nassert solution.getProbability([5, 1]) == 0.0\nassert solution.getProbability([6, 6]) == 1.0\nassert solution.getProbability([3, 1, 6, 2, 2]) == 0.30885780885780884\nassert solution.getProbability([1, 6, 2, 1]) == 0.31746031746031744\nassert solution.getProbability([3, 3, 4, 3, 4, 3, 4, 4]) == 0.5181178863612569\nassert solution.getProbability([3, 3, 6, 4, 2, 6]) == 0.45821099078603456\nassert solution.getProbability([5, 5]) == 1.0\nassert solution.getProbability([2, 4, 3, 3, 1, 5]) == 0.3006581653640477\nassert solution.getProbability([3, 5, 3, 4, 1, 6]) == 0.22089443064675263\nassert solution.getProbability([4]) == 1.0\nassert solution.getProbability([2, 2, 5, 4, 3]) == 0.46293706293706294\nassert solution.getProbability([4]) == 1.0\nassert solution.getProbability([3, 3, 4]) == 0.8095238095238095\nassert solution.getProbability([3, 6, 3, 1, 5, 4]) == 0.22089443064675263\nassert solution.getProbability([4]) == 1.0\nassert solution.getProbability([3, 3]) == 1.0\nassert solution.getProbability([2, 5, 5, 6]) == 0.5347593582887701\nassert solution.getProbability([5, 3, 2, 4]) == 0.5431235431235432\nassert solution.getProbability([6, 6]) == 1.0\nassert solution.getProbability([3, 3, 3, 5]) == 0.6713286713286714\nassert solution.getProbability([5, 2, 3, 6, 3, 6, 5]) == 0.44246411366040406\nassert solution.getProbability([3, 5]) == 0.8571428571428571\nassert solution.getProbability([4]) == 1.0\nassert solution.getProbability([5, 1, 6]) == 0.012987012987012988\nassert solution.getProbability([4, 6, 6]) == 0.9202797202797203\nassert solution.getProbability([3, 5, 6, 6, 2, 1, 4, 3]) == 0.27844859819832085\nassert solution.getProbability([3, 3]) == 1.0\nassert solution.getProbability([4, 6, 2, 4, 6]) == 0.5086925458442486\nassert solution.getProbability([1, 6, 3]) == 0.11904761904761904\nassert solution.getProbability([4, 2]) == 0.6\nassert solution.getProbability([4, 3, 4, 3]) == 0.7296037296037297\nassert solution.getProbability([2, 6, 6, 6]) == 0.5297256922643919\nassert solution.getProbability([4, 6, 4, 3, 4, 3]) == 0.6002168513946681\nassert solution.getProbability([5, 6, 4, 5]) == 0.8724046850981836\nassert solution.getProbability([2, 6, 3, 2, 3, 6, 4]) == 0.3938153568063381\nassert solution.getProbability([6, 4, 6]) == 0.9202797202797203\nassert solution.getProbability([3, 1]) == 0.0\nassert solution.getProbability([3, 4, 2, 1]) == 0.30952380952380953\nassert solution.getProbability([3, 5]) == 0.8571428571428571\nassert solution.getProbability([4]) == 1.0\nassert solution.getProbability([4, 6, 2, 6]) == 0.5271904566022213",
  "inefficient_solution": "class Solution:\n    def getProbability(self, balls: List[int]) -> float:\n        k = len(balls)\n        total_balls = sum(balls)\n        n = total_balls // 2\n\n        # Initialize a 2D array to store the number of ways to distribute the balls\n        dp = [[[0 for _ in range(n + 1)] for _ in range(n + 1)] for _ in range(k + 1)]\n\n        # Initialize the base case where there are no balls left\n        for i in range(k + 1):\n            dp[i][0][0] = 1\n\n        # Calculate the number of ways to distribute the balls\n        for i in range(1, k + 1):\n            for j in range(1, n + 1):\n                for x in range(balls[i - 1] + 1):\n                    dp[i][j][x] = dp[i - 1][j - x][x] if x <= j else 0\n\n        # Calculate the total number of ways to distribute the balls\n        total_ways = sum(sum(row) for row in dp[k])\n\n        # Initialize a 2D array to store the number of ways to have the same number of distinct balls\n        same_distinct = [[[0 for _ in range(n + 1)] for _ in range(n + 1)] for _ in range(k + 1)]\n\n        # Calculate the number of ways to have the same number of distinct balls\n        for i in range(k + 1):\n            for j in range(1, n + 1):\n                for x in range(balls[i - 1] + 1):\n                    if i == 0:\n                        same_distinct[i][j][x] = 0 if j < 1 else 1\n                    else:\n                        same_distinct[i][j][x] = same_distinct[i - 1][j - x][x] if x <= j else 0\n\n        # Calculate the number of ways to have the same number of distinct balls\n        same_distinct_ways = sum(sum(sum(row) for row in col) for col in same_distinct)\n\n        # Return the probability\n        return same_distinct_ways / total_ways",
  "is_python": true
}