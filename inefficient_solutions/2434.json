{
  "problem_idx": 2434,
  "task_name": "Using a Robot to Print the Lexicographically Smallest String",
  "markdown_description": "\nYou are given a string `s` and a robot that currently holds an empty string `t`. Apply one of the following operations until `s` and `t` **are both empty**:\n\n\n* Remove the **first** character of a string `s` and give it to the robot. The robot will append this character to the string `t`.\n* Remove the **last** character of a string `t` and give it to the robot. The robot will write this character on paper.\n\n\nReturn *the lexicographically smallest string that can be written on the paper.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"zza\"\n**Output:** \"azz\"\n**Explanation:** Let p denote the written string.\nInitially p=\"\", s=\"zza\", t=\"\".\nPerform first operation three times p=\"\", s=\"\", t=\"zza\".\nPerform second operation three times p=\"azz\", s=\"\", t=\"\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"bac\"\n**Output:** \"abc\"\n**Explanation:** Let p denote the written string.\nPerform first operation twice p=\"\", s=\"c\", t=\"ba\". \nPerform second operation twice p=\"ab\", s=\"c\", t=\"\". \nPerform first operation p=\"ab\", s=\"\", t=\"c\". \nPerform second operation p=\"abc\", s=\"\", t=\"\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"bdda\"\n**Output:** \"addb\"\n**Explanation:** Let p denote the written string.\nInitially p=\"\", s=\"bdda\", t=\"\".\nPerform first operation four times p=\"\", s=\"\", t=\"bdda\".\nPerform second operation four times p=\"addb\", s=\"\", t=\"\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of only English lowercase letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def robotWithString(self, s: str) -> str:\n        cnt = Counter(s)\n        ans = []\n        stk = []\n        mi = 'a'\n        for c in s:\n            cnt[c] -= 1\n            while mi < 'z' and cnt[mi] == 0:\n                mi = chr(ord(mi) + 1)\n            stk.append(c)\n            while stk and stk[-1] <= mi:\n                ans.append(stk.pop())\n        return ''.join(ans)\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def robotWithString(self, s: str) -> str:\n        cnt = Counter(s)\n        ans = []\n        stk = []\n        mi = 'a'\n        for c in s:\n            cnt[c] -= 1\n            while mi < 'z' and cnt[mi] == 0:\n                mi = chr(ord(mi) + 1)\n            stk.append(c)\n            while stk and stk[-1] <= mi:\n                ans.append(stk.pop())\n        return ''.join(ans)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 11)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.robotWithString(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.robotWithString(s) == expected_result\n        print(f\"assert solution.robotWithString('{s}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.robotWithString('{s}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.robotWithString('xdetr') == 'dertx'\nassert solution.robotWithString('v') == 'v'\nassert solution.robotWithString('lf') == 'fl'\nassert solution.robotWithString('bbnfo') == 'bbfno'\nassert solution.robotWithString('ugjyuf') == 'fuyjgu'\nassert solution.robotWithString('vn') == 'nv'\nassert solution.robotWithString('m') == 'm'\nassert solution.robotWithString('glshpvumh') == 'ghhmuvpsl'\nassert solution.robotWithString('brmcbegql') == 'bbceglqmr'\nassert solution.robotWithString('slambmvozis') == 'abiszovmmls'\nassert solution.robotWithString('dqdeds') == 'dddeqs'\nassert solution.robotWithString('kpdsqddc') == 'cddqsdpk'\nassert solution.robotWithString('gagtkfxwdpx') == 'adpwxfktggx'\nassert solution.robotWithString('korcbkxoq') == 'bckoqxrok'\nassert solution.robotWithString('dbjeekoliji') == 'bdeeiijlokj'\nassert solution.robotWithString('tdmig') == 'dgimt'\nassert solution.robotWithString('cib') == 'bic'\nassert solution.robotWithString('uez') == 'euz'\nassert solution.robotWithString('xg') == 'gx'\nassert solution.robotWithString('qlhuc') == 'cuhlq'\nassert solution.robotWithString('fodb') == 'bdof'\nassert solution.robotWithString('dg') == 'dg'\nassert solution.robotWithString('gfevktf') == 'efftkvg'\nassert solution.robotWithString('hivcudlahds') == 'adhldsucvih'\nassert solution.robotWithString('uvepvrctnz') == 'cntrvpevuz'\nassert solution.robotWithString('kpofvoneyzw') == 'enovfopkwzy'\nassert solution.robotWithString('zktpv') == 'kptvz'\nassert solution.robotWithString('xvizsbsrahn') == 'ahnrsbszivx'\nassert solution.robotWithString('myumvjtuw') == 'jtuvmuwym'\nassert solution.robotWithString('hy') == 'hy'\nassert solution.robotWithString('shtijy') == 'hijtsy'\nassert solution.robotWithString('qvdrkejhh') == 'dehhjkrvq'\nassert solution.robotWithString('txiljh') == 'hjlixt'\nassert solution.robotWithString('aqwrh') == 'ahrwq'\nassert solution.robotWithString('ianejx') == 'aejnix'\nassert solution.robotWithString('eihrorjiay') == 'aijrorhiey'\nassert solution.robotWithString('bfelmyb') == 'bbymlef'\nassert solution.robotWithString('ijqh') == 'hqji'\nassert solution.robotWithString('waxntcxkla') == 'aalkxctnxw'\nassert solution.robotWithString('xjisvjuj') == 'ijjjuvsx'\nassert solution.robotWithString('govgisx') == 'ggisvox'\nassert solution.robotWithString('mtioyoexl') == 'elxoyoitm'\nassert solution.robotWithString('dfsv') == 'dfsv'\nassert solution.robotWithString('wka') == 'akw'\nassert solution.robotWithString('krtvuqhph') == 'hhpquvtrk'\nassert solution.robotWithString('gcqun') == 'cgnuq'\nassert solution.robotWithString('cdkvh') == 'cdhvk'\nassert solution.robotWithString('hh') == 'hh'\nassert solution.robotWithString('hosnl') == 'hlnso'\nassert solution.robotWithString('hiyamfybbck') == 'abbckyfmyih'\nassert solution.robotWithString('yiqobllidu') == 'bdilloqiuy'\nassert solution.robotWithString('luetsu') == 'estulu'\nassert solution.robotWithString('zw') == 'wz'\nassert solution.robotWithString('lnzihlcm') == 'clhimznl'\nassert solution.robotWithString('vlzeecdls') == 'cdeelszlv'\nassert solution.robotWithString('sbuitwjbi') == 'bbijwtius'\nassert solution.robotWithString('vddrteev') == 'ddeetrvv'\nassert solution.robotWithString('rzewrv') == 'ervwzr'\nassert solution.robotWithString('ws') == 'sw'\nassert solution.robotWithString('eqiuzrm') == 'eimrzuq'\nassert solution.robotWithString('w') == 'w'\nassert solution.robotWithString('rprhishvimq') == 'hhimqvsirpr'\nassert solution.robotWithString('ksw') == 'ksw'\nassert solution.robotWithString('czrmf') == 'cfmrz'\nassert solution.robotWithString('xbevwice') == 'bceiwvex'\nassert solution.robotWithString('eyx') == 'exy'\nassert solution.robotWithString('ddntsxu') == 'ddnstux'\nassert solution.robotWithString('ecrsvf') == 'cefvsr'\nassert solution.robotWithString('cnexenfjoc') == 'ccojfnexen'\nassert solution.robotWithString('vcwhgmv') == 'cghmvwv'\nassert solution.robotWithString('mhekqaaboof') == 'aabfooqkehm'\nassert solution.robotWithString('hqeanemp') == 'aeemnpqh'\nassert solution.robotWithString('usapnx') == 'anpsux'\nassert solution.robotWithString('buvleeylyrx') == 'beellrxyyvu'\nassert solution.robotWithString('d') == 'd'\nassert solution.robotWithString('ghkaajd') == 'aadjkhg'\nassert solution.robotWithString('kgd') == 'dgk'\nassert solution.robotWithString('bsbbq') == 'bbbqs'\nassert solution.robotWithString('wnj') == 'jnw'\nassert solution.robotWithString('g') == 'g'\nassert solution.robotWithString('kaoqhi') == 'ahiqok'\nassert solution.robotWithString('uzdztk') == 'dktzzu'\nassert solution.robotWithString('pazkpcypmlt') == 'aclmptypkzp'\nassert solution.robotWithString('mz') == 'mz'\nassert solution.robotWithString('frlkthdbk') == 'bdhktklrf'\nassert solution.robotWithString('vwiervy') == 'eirvwvy'\nassert solution.robotWithString('wfjdepqibpi') == 'biipqpedjfw'\nassert solution.robotWithString('j') == 'j'\nassert solution.robotWithString('sy') == 'sy'\nassert solution.robotWithString('nvkecsolb') == 'bloscekvn'\nassert solution.robotWithString('g') == 'g'\nassert solution.robotWithString('mguifupcfc') == 'ccfpufiugm'\nassert solution.robotWithString('nwzk') == 'kzwn'\nassert solution.robotWithString('gtoroifsivd') == 'dvisfiorotg'\nassert solution.robotWithString('bdbjtymvaq') == 'aqvmytjbdb'\nassert solution.robotWithString('cqco') == 'ccoq'\nassert solution.robotWithString('dzcn') == 'cnzd'\nassert solution.robotWithString('yo') == 'oy'\nassert solution.robotWithString('ywlel') == 'ellwy'\nassert solution.robotWithString('salwoifrcy') == 'acrfiowlsy'",
  "inefficient_solution": "class Solution:\n    def robotWithString(self, s: str) -> str:\n        n = len(s)\n        char_count = [0] * 26\n        for c in s:\n            char_count[ord(c) - ord('a')] += 1\n        ans = []\n        stack = []\n        min_char = 'a'\n        for i in range(n):\n            char_count[ord(s[i]) - ord('a')] -= 1\n            while min_char < 'z' and char_count[ord(min_char) - ord('a')] == 0:\n                min_char = chr(ord(min_char) + 1)\n            stack.append(s[i])\n            while stack and stack[-1] <= min_char:\n                ans.append(stack.pop())\n        return ''.join(ans)",
  "is_python": true
}