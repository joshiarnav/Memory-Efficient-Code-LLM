{
  "problem_idx": 1707,
  "task_name": "Maximum XOR With an Element From Array",
  "markdown_description": "\nYou are given an array `nums` consisting of non-negative integers. You are also given a `queries` array, where `queries[i] = [xi, mi]`.\n\n\nThe answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and any element of `nums` that does not exceed `mi`. In other words, the answer is `max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements in `nums` are larger than `mi`, then the answer is `-1`.\n\n\nReturn *an integer array* `answer` *where* `answer.length == queries.length` *and* `answer[i]` *is the answer to the* `ith` *query.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]\n**Output:** [3,3,7]\n**Explanation:**\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]\n**Output:** [15,-1,5]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, queries.length <= 105`\n* `queries[i].length == 2`\n* `0 <= nums[j], xi, mi <= 109`\n\n\n",
  "canonical_solution": "class Trie:\n    __slots__ = [\"children\"]\n\n    def __init__(self):\n        self.children = [None] * 2\n\n    def insert(self, x: int):\n        node = self\n        for i in range(30, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(30, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1]:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            elif node.children[v]:\n                node = node.children[v]\n            else:\n                return -1\n        return ans\n\n\nclass Solution:\n    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        trie = Trie()\n        nums.sort()\n        j, n = 0, len(queries)\n        ans = [-1] * n\n        for i, (x, m) in sorted(zip(range(n), queries), key=lambda x: x[1][1]):\n            while j < len(nums) and nums[j] <= m:\n                trie.insert(nums[j])\n                j += 1\n            ans[i] = trie.search(x)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Trie:\n    __slots__ = [\"children\"]\n\n    def __init__(self):\n        self.children = [None] * 2\n\n    def insert(self, x: int):\n        node = self\n        for i in range(30, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(30, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1]:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            elif node.children[v]:\n                node = node.children[v]\n            else:\n                return -1\n        return ans\n\n\nclass Solution:\n    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        trie = Trie()\n        nums.sort()\n        j, n = 0, len(queries)\n        ans = [-1] * n\n        for i, (x, m) in sorted(zip(range(n), queries), key=lambda x: x[1][1]):\n            while j < len(nums) and nums[j] <= m:\n                trie.insert(nums[j])\n                j += 1\n            ans[i] = trie.search(x)\n        return ans\n\ndef generate_test_case():\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate random queries\n    queries = []\n    for _ in range(random.randint(2, 10)):\n        x = random.randint(0, 100)\n        m = random.randint(0, 100)\n        queries.append([x, m])\n\n    # Calculate the expected result using the provided Solution class\n    solution = Solution()\n    expected_result = solution.maximizeXor(nums, queries)\n\n    return nums, queries, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, queries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximizeXor(nums, queries) == expected_result\n        print(f\"assert solution.maximizeXor({nums}, {queries}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximizeXor({nums}, {queries}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximizeXor([27, 31, 67, 75, 81, 85, 90], [[28, 100], [10, 100], [63, 46], [47, 47]]) == [95, 95, 36, 52]\nassert solution.maximizeXor([31, 56, 63, 64, 89, 92], [[74, 32], [85, 1], [76, 34], [58, 16], [4, 16], [90, 35], [95, 21], [83, 41], [67, 68]]) == [85, -1, 83, -1, -1, 69, -1, 76, 124]\nassert solution.maximizeXor([9, 10, 26, 45, 64, 67, 73], [[75, 36], [13, 80], [37, 72]]) == [81, 78, 102]\nassert solution.maximizeXor([10, 14, 19, 35, 38], [[96, 5], [30, 49], [79, 44]]) == [-1, 61, 108]\nassert solution.maximizeXor([3, 5, 26, 27, 46, 94, 99], [[3, 81], [70, 80], [57, 66], [11, 66], [7, 27], [47, 86], [64, 87]]) == [45, 104, 60, 37, 29, 53, 110]\nassert solution.maximizeXor([21, 26, 48, 51, 84, 90, 94, 98], [[96, 99], [15, 25], [75, 5], [26, 91], [93, 63]]) == [122, 26, -1, 78, 110]\nassert solution.maximizeXor([15, 17, 32, 34, 38, 77, 79, 99], [[92, 4], [19, 50], [99, 29], [61, 91], [42, 97], [29, 45], [77, 29], [24, 62], [50, 47], [95, 61]]) == [-1, 53, 114, 114, 103, 63, 92, 62, 61, 127]\nassert solution.maximizeXor([2, 18, 41, 45, 56, 78], [[28, 43], [46, 95], [98, 94], [80, 56], [68, 21], [29, 69], [96, 79]]) == [53, 96, 112, 125, 86, 52, 114]\nassert solution.maximizeXor([4, 11, 13, 14, 34, 43, 51, 74, 93, 94], [[14, 91], [36, 78], [68, 71], [45, 42], [100, 21]]) == [68, 110, 119, 41, 111]\nassert solution.maximizeXor([10, 12, 45, 50, 53, 66, 88, 92, 93, 98], [[88, 25], [38, 18], [41, 80], [3, 18], [53, 48], [55, 74], [82, 19], [97, 24]]) == [84, 44, 107, 15, 63, 117, 94, 109]\nassert solution.maximizeXor([32, 42, 44, 47, 60, 68, 71, 77, 85, 100], [[72, 1], [70, 64], [44, 28]]) == [-1, 122, -1]\nassert solution.maximizeXor([15, 26, 42, 45, 53, 67, 92, 99], [[5, 5], [97, 34], [90, 43], [84, 16], [79, 94], [30, 14], [91, 5]]) == [-1, 123, 112, 91, 122, -1, -1]\nassert solution.maximizeXor([14, 57, 83, 89], [[7, 32], [6, 59], [85, 87], [22, 15], [85, 14], [89, 91], [71, 33], [43, 64], [5, 67]]) == [9, 63, 108, 24, 91, 96, 73, 37, 60]\nassert solution.maximizeXor([1, 29, 42], [[33, 74], [90, 10], [51, 80], [62, 32], [42, 74], [24, 3], [26, 85]]) == [60, 91, 50, 63, 55, 25, 48]\nassert solution.maximizeXor([10, 40, 75, 93], [[48, 64], [84, 58], [14, 20], [53, 0], [96, 60], [14, 48]]) == [58, 124, 4, -1, 106, 38]\nassert solution.maximizeXor([49, 94], [[70, 58], [83, 67], [13, 90], [59, 95], [4, 6], [44, 3], [3, 6]]) == [119, 98, 60, 101, -1, -1, -1]\nassert solution.maximizeXor([1, 4, 9, 10, 15, 20, 68, 69, 70, 92], [[48, 33], [64, 21]]) == [63, 84]\nassert solution.maximizeXor([12, 26, 63, 64, 79, 99], [[88, 89], [61, 17]]) == [103, 49]\nassert solution.maximizeXor([58, 60], [[28, 58], [81, 87], [19, 19]]) == [38, 109, -1]\nassert solution.maximizeXor([9, 16, 37, 45, 54, 58, 98], [[41, 86], [80, 57], [7, 3], [76, 37], [64, 76], [66, 85]]) == [57, 125, -1, 105, 122, 120]\nassert solution.maximizeXor([6, 77], [[40, 65], [96, 66], [30, 50], [80, 32], [17, 87], [27, 42], [1, 1]]) == [46, 102, 24, 86, 92, 29, -1]\nassert solution.maximizeXor([11, 33, 44, 67, 80, 81], [[82, 61], [47, 99], [68, 73], [61, 49], [90, 0]]) == [126, 127, 104, 54, -1]\nassert solution.maximizeXor([18, 35, 51, 82], [[29, 27], [11, 71], [40, 74], [79, 62], [95, 100], [63, 3], [38, 33]]) == [15, 56, 58, 124, 124, -1, 52]\nassert solution.maximizeXor([24, 27, 35, 76], [[33, 75], [13, 90], [45, 51], [39, 19]]) == [58, 65, 54, -1]\nassert solution.maximizeXor([1, 17, 20, 25, 32, 41, 44, 54, 72], [[58, 28], [35, 7], [48, 24], [98, 61], [80, 29], [63, 1], [36, 49], [79, 83], [25, 54], [9, 27]]) == [59, 34, 49, 123, 81, 62, 61, 121, 57, 29]\nassert solution.maximizeXor([25, 29, 39, 62, 64, 81, 91], [[65, 26], [25, 74]]) == [88, 89]\nassert solution.maximizeXor([14, 21, 34, 40, 41, 69, 80], [[72, 48], [19, 9], [10, 81], [21, 50]]) == [106, -1, 90, 61]\nassert solution.maximizeXor([35, 39, 93], [[14, 58], [60, 41], [88, 63], [23, 6], [54, 40], [79, 67], [56, 5], [64, 61]]) == [45, 31, 127, -1, 21, 108, -1, 103]\nassert solution.maximizeXor([48, 97, 99], [[37, 49], [46, 45], [47, 58], [13, 80], [52, 76], [63, 11], [90, 80], [98, 46], [2, 84]]) == [21, -1, 31, 61, 4, -1, 106, -1, 50]\nassert solution.maximizeXor([16, 21, 26, 27, 37, 43, 69, 95], [[37, 0], [70, 37], [48, 59]]) == [-1, 99, 43]\nassert solution.maximizeXor([6, 26], [[25, 93], [26, 78]]) == [31, 28]\nassert solution.maximizeXor([14, 87], [[75, 81], [74, 79], [26, 45]]) == [69, 68, 20]\nassert solution.maximizeXor([7, 32, 64, 67, 77, 85], [[26, 48], [8, 57], [34, 55], [45, 52], [78, 23]]) == [58, 40, 37, 42, 73]\nassert solution.maximizeXor([3, 6, 8, 9, 18, 38, 65, 68, 97], [[80, 88], [70, 7], [55, 13], [34, 96], [96, 56], [95, 13]]) == [118, 69, 63, 102, 114, 92]\nassert solution.maximizeXor([7, 33, 52, 81, 85], [[15, 7], [40, 32], [90, 97], [78, 23], [80, 94], [84, 39], [94, 79], [3, 41]]) == [8, 47, 123, 73, 113, 117, 127, 34]\nassert solution.maximizeXor([42, 51, 58, 74], [[26, 64], [57, 17], [43, 68], [65, 3], [71, 37], [92, 4], [63, 14], [22, 80], [83, 62], [86, 45]]) == [48, -1, 24, -1, -1, -1, -1, 92, 121, 124]\nassert solution.maximizeXor([79, 80, 90, 94], [[11, 12], [17, 88], [89, 97], [62, 51], [100, 2], [15, 29], [57, 96], [55, 55], [73, 46], [16, 24]]) == [-1, 94, 22, -1, -1, -1, 118, -1, -1, -1]\nassert solution.maximizeXor([10, 99], [[10, 34], [86, 68], [97, 9]]) == [0, 92, -1]\nassert solution.maximizeXor([5, 14, 38, 45, 50, 54, 69, 75, 84], [[50, 94], [83, 5], [32, 53]]) == [121, 86, 46]\nassert solution.maximizeXor([9, 37, 52, 67, 91], [[9, 84], [50, 78], [74, 11]]) == [74, 113, 67]\nassert solution.maximizeXor([62, 66, 76], [[62, 13], [52, 25], [12, 27], [27, 38], [62, 25], [66, 2], [0, 60]]) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.maximizeXor([42, 54], [[10, 11], [62, 42], [48, 84], [23, 8], [13, 77], [31, 64], [22, 50]]) == [-1, 20, 26, -1, 59, 53, 60]\nassert solution.maximizeXor([22, 26, 34, 51, 82], [[6, 76], [49, 1], [11, 92], [83, 57], [10, 41], [81, 39], [28, 66]]) == [53, -1, 89, 113, 40, 115, 62]\nassert solution.maximizeXor([34, 41, 47, 52, 61, 84], [[13, 100], [18, 1], [73, 93], [53, 75], [69, 60], [32, 12], [16, 71]]) == [89, -1, 125, 28, 113, -1, 63]\nassert solution.maximizeXor([20, 65, 66, 72, 75, 80, 87, 89, 90], [[32, 59], [13, 35], [50, 80], [66, 33], [19, 90], [40, 25], [90, 79], [50, 57], [76, 65]]) == [52, 25, 122, 86, 91, 60, 78, 38, 88]\nassert solution.maximizeXor([5, 20, 38, 46, 63, 68, 87], [[93, 17], [1, 45], [79, 25], [81, 30], [78, 38], [78, 87], [59, 54], [43, 96]]) == [88, 39, 91, 84, 104, 113, 62, 124]\nassert solution.maximizeXor([1, 60, 63, 70, 71, 79, 83], [[61, 52], [95, 43]]) == [60, 94]\nassert solution.maximizeXor([44, 53, 58, 90], [[8, 20], [26, 62], [18, 68], [54, 39]]) == [-1, 54, 62, -1]\nassert solution.maximizeXor([26, 35, 54, 83], [[78, 98], [33, 32], [28, 60], [33, 100], [88, 37], [92, 77]]) == [120, 59, 63, 114, 123, 127]\nassert solution.maximizeXor([4, 10, 20, 74, 77, 91], [[5, 57], [29, 84], [7, 72], [41, 76], [81, 44], [57, 66], [6, 79], [13, 16]]) == [17, 87, 19, 99, 91, 61, 76, 9]\nassert solution.maximizeXor([1, 6, 12, 21, 25, 37, 39, 40, 66, 81], [[63, 38], [10, 4], [29, 29], [60, 79], [85, 86], [45, 27], [78, 96], [66, 39], [36, 99], [46, 98]]) == [62, 11, 28, 126, 125, 56, 107, 103, 117, 127]\nassert solution.maximizeXor([16, 38, 64, 65, 99], [[22, 14], [77, 77], [39, 30], [15, 70], [38, 54], [60, 16], [23, 69], [31, 88], [81, 6], [45, 16]]) == [-1, 107, 55, 79, 54, 44, 87, 95, -1, 61]\nassert solution.maximizeXor([13, 28, 68, 69, 73, 90], [[18, 70], [54, 70], [24, 13], [80, 52], [2, 76], [2, 56], [86, 51], [41, 11]]) == [87, 115, 21, 93, 75, 30, 91, -1]\nassert solution.maximizeXor([13, 16, 45, 49, 97], [[86, 26], [73, 84], [1, 47], [1, 66], [100, 70]]) == [91, 120, 44, 48, 116]\nassert solution.maximizeXor([3, 14, 35, 51, 73, 85, 87, 89], [[27, 60], [84, 24], [40, 5]]) == [56, 90, 43]\nassert solution.maximizeXor([24, 34, 38, 50, 53, 56, 66, 78, 79, 85], [[72, 15], [0, 23], [52, 4], [62, 59]]) == [-1, -1, -1, 38]\nassert solution.maximizeXor([16, 30, 40, 54, 66, 88], [[86, 14], [77, 40], [16, 86], [34, 28], [44, 82], [71, 92], [95, 60]]) == [-1, 101, 82, 50, 110, 113, 119]\nassert solution.maximizeXor([10, 14, 38, 50, 62, 72, 78, 79, 91], [[72, 19], [86, 66], [31, 70], [35, 97], [51, 99], [87, 59], [23, 45], [58, 97], [36, 1], [65, 37]]) == [70, 112, 57, 120, 125, 113, 49, 117, -1, 79]\nassert solution.maximizeXor([27, 48, 71, 73, 83, 95], [[38, 94], [4, 80]]) == [117, 77]\nassert solution.maximizeXor([5, 6, 13, 16, 21, 53, 57, 74, 79], [[74, 97], [87, 65], [60, 55], [40, 24], [28, 25]]) == [127, 110, 58, 61, 26]\nassert solution.maximizeXor([14, 19, 27, 34, 40, 41, 62, 65, 79, 83], [[39, 96], [44, 83], [51, 60]]) == [116, 127, 61]\nassert solution.maximizeXor([7, 17, 22, 38, 41, 42, 48, 74, 86], [[30, 54], [27, 33], [67, 96], [89, 40], [51, 4], [2, 2], [44, 100], [82, 46], [38, 30], [73, 0]]) == [56, 28, 115, 127, -1, -1, 122, 123, 55, -1]\nassert solution.maximizeXor([16, 18, 47, 48, 70, 99], [[3, 34], [7, 8], [7, 76], [52, 28], [84, 84], [18, 97], [28, 7], [39, 47]]) == [19, -1, 65, 38, 123, 84, -1, 55]\nassert solution.maximizeXor([1, 8, 20, 52, 54, 63, 87, 88], [[100, 89], [41, 46], [85, 90], [75, 33], [84, 77], [6, 85], [94, 36], [8, 12], [22, 64]]) == [112, 61, 106, 95, 107, 57, 95, 9, 41]\nassert solution.maximizeXor([22, 24, 26, 62, 69], [[42, 27], [36, 84], [63, 41], [59, 59], [92, 60]]) == [60, 97, 41, 45, 74]\nassert solution.maximizeXor([6, 23, 31, 69, 98], [[38, 68], [4, 62], [63, 87], [51, 41], [11, 69], [52, 79], [87, 20], [25, 74], [27, 92], [40, 41]]) == [57, 27, 122, 53, 78, 113, 81, 92, 94, 63]\nassert solution.maximizeXor([3, 25, 30, 51, 71, 73], [[100, 54], [51, 13], [92, 30], [6, 4], [79, 72], [0, 77], [21, 20], [42, 86], [75, 58]]) == [125, 48, 95, 5, 124, 73, 22, 109, 120]\nassert solution.maximizeXor([18, 33, 42, 67, 74, 83], [[77, 5], [31, 77], [8, 18], [73, 55], [2, 50], [79, 71], [57, 85]]) == [-1, 92, 26, 104, 40, 110, 122]\nassert solution.maximizeXor([4, 9, 85, 88], [[36, 22], [12, 6], [9, 69], [92, 12], [71, 55], [6, 59], [9, 97], [12, 62], [34, 45], [73, 79]]) == [45, 8, 13, 88, 78, 15, 92, 8, 43, 77]\nassert solution.maximizeXor([8, 12, 26, 40, 75, 84], [[91, 72], [16, 84], [73, 30], [62, 32], [41, 86], [42, 1], [26, 50], [41, 24]]) == [115, 91, 83, 54, 125, -1, 50, 37]\nassert solution.maximizeXor([28, 35, 82, 93, 98], [[70, 50], [32, 78], [33, 60], [99, 39], [12, 45], [45, 41]]) == [101, 60, 61, 127, 47, 49]\nassert solution.maximizeXor([23, 26, 38, 50, 60, 61, 71, 96], [[86, 50], [84, 47], [67, 99], [73, 92], [27, 59]]) == [112, 114, 127, 123, 61]\nassert solution.maximizeXor([36, 57, 67], [[83, 79], [41, 96], [54, 76], [97, 44], [100, 71]]) == [119, 106, 117, 69, 93]\nassert solution.maximizeXor([6, 18, 19, 26, 40, 47], [[65, 66], [44, 51], [36, 6], [88, 3], [38, 78], [83, 57], [0, 42]]) == [110, 63, 34, -1, 60, 124, 40]\nassert solution.maximizeXor([6, 35, 61, 67, 78, 81, 90, 97], [[4, 78], [32, 50], [67, 82]]) == [74, 38, 126]\nassert solution.maximizeXor([2, 4, 10, 39, 41, 70, 71, 91], [[42, 50], [64, 46], [76, 67], [30, 14]]) == [46, 105, 107, 28]\nassert solution.maximizeXor([42, 69], [[23, 2], [65, 37], [69, 56], [29, 29], [14, 0]]) == [-1, -1, 111, -1, -1]\nassert solution.maximizeXor([71, 82], [[40, 8], [79, 73]]) == [-1, 8]\nassert solution.maximizeXor([2, 89], [[26, 76], [55, 98], [24, 18], [94, 19], [14, 0], [91, 5], [24, 66], [65, 50]]) == [24, 110, 26, 92, -1, 89, 26, 67]\nassert solution.maximizeXor([10, 29, 41, 42, 61, 62, 83, 86, 89], [[14, 85], [96, 10], [39, 84], [7, 74], [85, 50], [14, 17], [42, 49], [59, 100], [99, 2], [68, 22]]) == [93, 106, 116, 58, 127, 4, 55, 109, -1, 78]\nassert solution.maximizeXor([24, 40, 54, 59, 67, 79, 94], [[91, 41], [87, 54], [53, 4], [68, 86], [59, 97], [52, 57], [76, 35], [78, 87], [61, 86]]) == [115, 127, -1, 127, 120, 44, 84, 120, 126]\nassert solution.maximizeXor([15, 46, 78, 87, 92, 97], [[46, 57], [26, 25], [27, 56], [9, 62], [45, 96], [39, 22], [62, 0], [10, 34], [50, 43]]) == [33, 21, 53, 39, 122, 40, -1, 5, 61]\nassert solution.maximizeXor([31, 51], [[78, 29], [13, 87], [22, 23], [73, 66]]) == [-1, 62, -1, 122]\nassert solution.maximizeXor([9, 33, 34, 58, 62], [[10, 63], [52, 65]]) == [52, 61]\nassert solution.maximizeXor([63, 91], [[57, 91], [96, 32], [68, 25]]) == [98, -1, -1]\nassert solution.maximizeXor([48, 51, 67, 71], [[3, 15], [64, 82], [31, 68], [7, 62], [64, 27], [81, 83], [40, 100]]) == [-1, 115, 92, 55, -1, 98, 111]\nassert solution.maximizeXor([3, 47, 89, 96], [[80, 57], [32, 13]]) == [127, 35]\nassert solution.maximizeXor([20, 47, 50, 59, 69, 77, 79, 81], [[15, 75], [97, 67], [12, 2], [28, 4], [98, 36]]) == [74, 117, -1, -1, 118]\nassert solution.maximizeXor([17, 31, 68, 71], [[3, 92], [64, 36], [91, 71], [74, 42], [29, 51]]) == [71, 95, 74, 91, 12]\nassert solution.maximizeXor([32, 63, 69, 72, 80], [[91, 41], [49, 43]]) == [123, 17]\nassert solution.maximizeXor([18, 79], [[33, 76], [8, 56], [25, 42], [100, 76]]) == [51, 26, 11, 118]\nassert solution.maximizeXor([42, 49], [[25, 78], [75, 99]]) == [51, 122]\nassert solution.maximizeXor([8, 9, 18, 21, 44, 48, 58, 98], [[46, 100], [27, 53], [61, 72], [52, 19], [12, 74]]) == [76, 55, 53, 61, 60]\nassert solution.maximizeXor([25, 26, 27, 48, 80], [[67, 69], [37, 7], [93, 33], [99, 20]]) == [115, -1, 71, -1]\nassert solution.maximizeXor([23, 33, 59, 63, 80], [[28, 12], [81, 41], [94, 24], [33, 55], [16, 98], [7, 2], [34, 91]]) == [-1, 112, 73, 54, 64, -1, 114]\nassert solution.maximizeXor([12, 13, 42, 86, 97], [[56, 27], [7, 77], [57, 66], [80, 23], [2, 63], [79, 82], [68, 7]]) == [53, 45, 53, 93, 40, 101, -1]\nassert solution.maximizeXor([1, 17, 32, 44, 50, 55, 64, 68, 87, 96], [[33, 17], [19, 73], [60, 28]]) == [48, 87, 61]\nassert solution.maximizeXor([14, 18, 50, 51, 62, 74], [[48, 72], [50, 75], [61, 45], [56, 14], [70, 44], [11, 92], [13, 85], [48, 46], [34, 15], [43, 72]]) == [62, 120, 51, 54, 84, 65, 71, 62, 44, 57]\nassert solution.maximizeXor([32, 44, 63, 65, 70, 77], [[2, 80], [35, 44]]) == [79, 15]\nassert solution.maximizeXor([13, 28, 31, 32, 42, 45, 47, 70, 79], [[24, 89], [90, 77], [82, 98], [24, 79], [3, 24], [85, 56], [77, 73], [3, 78]]) == [94, 122, 127, 94, 14, 127, 109, 69]",
  "inefficient_solution": "class Solution:\n    def maximizeXor(self, nums, queries):\n        n = len(queries)\n        ans = [-1] * n\n        for i in range(n):\n            trie = Trie()\n            for j in range(len(nums)):\n                if nums[j] <= queries[i][1]:\n                    trie.insert(nums[j])\n            for bit in range(30, -1, -1):\n                v = queries[i][0] >> bit & 1\n                if bit == 0:\n                    ans[i] = v\n                    break\n                elif queries[i][0] >> bit & 1:\n                    ans[i] |= 1 << bit\n                else:\n                    if trie.search(queries[i][0] ^ 1 << bit) != -1:\n                        ans[i] |= 1 << bit\n        return ans\n\n\nclass Trie:\n    def __init__(self):\n        self.children = [None, None]\n\n    def insert(self, num):\n        node = self\n        for i in range(30, -1, -1):\n            v = num >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n\n    def search(self, num):\n        node = self\n        ans = 0\n        for i in range(30, -1, -1):\n            v = num >> i & 1\n            if node.children[v ^ 1] is not None:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            elif node.children[v] is not None:\n                node = node.children[v]\n            else:\n                return -1\n        return ans",
  "is_python": true
}