{
  "problem_idx": 764,
  "task_name": "Largest Plus Sign",
  "markdown_description": "\nYou are given an integer `n`. You have an `n x n` binary grid `grid` with all values initially `1`'s except for some indices given in the array `mines`. The `ith` element of the array `mines` is defined as `mines[i] = [xi, yi]` where `grid[xi][yi] == 0`.\n\n\nReturn *the order of the largest **axis-aligned** plus sign of* 1*'s contained in* `grid`. If there is none, return `0`.\n\n\nAn **axis-aligned plus sign** of `1`'s of order `k` has some center `grid[r][c] == 1` along with four arms of length `k - 1` going up, down, left, and right, and made of `1`'s. Note that there could be `0`'s or `1`'s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for `1`'s.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0764.Largest%20Plus%20Sign/images/plus1-grid.jpg)\n\n```\n\n**Input:** n = 5, mines = [[4,2]]\n**Output:** 2\n**Explanation:** In the above grid, the largest plus sign can only be of order 2. One of them is shown.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0764.Largest%20Plus%20Sign/images/plus2-grid.jpg)\n\n```\n\n**Input:** n = 1, mines = [[0,0]]\n**Output:** 0\n**Explanation:** There is no plus sign, so return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 500`\n* `1 <= mines.length <= 5000`\n* `0 <= xi, yi < n`\n* All the pairs `(xi, yi)` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:\n        dp = [[n] * n for _ in range(n)]\n        for x, y in mines:\n            dp[x][y] = 0\n        for i in range(n):\n            left = right = up = down = 0\n            for j, k in zip(range(n), reversed(range(n))):\n                left = left + 1 if dp[i][j] else 0\n                right = right + 1 if dp[i][k] else 0\n                up = up + 1 if dp[j][i] else 0\n                down = down + 1 if dp[k][i] else 0\n                dp[i][j] = min(dp[i][j], left)\n                dp[i][k] = min(dp[i][k], right)\n                dp[j][i] = min(dp[j][i], up)\n                dp[k][i] = min(dp[k][i], down)\n        return max(max(v) for v in dp)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:\n        dp = [[n] * n for _ in range(n)]\n        for x, y in mines:\n            dp[x][y] = 0\n        for i in range(n):\n            left = right = up = down = 0\n            for j, k in zip(range(n), reversed(range(n))):\n                left = left + 1 if dp[i][j] else 0\n                right = right + 1 if dp[i][k] else 0\n                up = up + 1 if dp[j][i] else 0\n                down = down + 1 if dp[k][i] else 0\n                dp[i][j] = min(dp[i][j], left)\n                dp[i][k] = min(dp[i][k], right)\n                dp[j][i] = min(dp[j][i], up)\n                dp[k][i] = min(dp[k][i], down)\n        return max(max(v) for v in dp)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random n\n    n = random.randint(1, 10)\n    \n    # Generate random number of mines\n    num_mines = random.randint(1, 10)\n    \n    # Generate random coordinates for mines\n    mines = [[random.randint(0, n-1), random.randint(0, n-1)] for _ in range(num_mines)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.orderOfLargestPlusSign(n, mines)\n\n    return n, mines, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, mines, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.orderOfLargestPlusSign(n, mines) == expected_result\n        print(f\"assert solution.orderOfLargestPlusSign({n}, {mines}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.orderOfLargestPlusSign({n}, {mines}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.orderOfLargestPlusSign(5, [[4, 4], [1, 3], [2, 3]]) == 2\nassert solution.orderOfLargestPlusSign(7, [[5, 6], [4, 3]]) == 3\nassert solution.orderOfLargestPlusSign(5, [[2, 3]]) == 2\nassert solution.orderOfLargestPlusSign(9, [[1, 0], [2, 5], [7, 3], [4, 7]]) == 4\nassert solution.orderOfLargestPlusSign(5, [[0, 0], [1, 0], [0, 4], [2, 1], [4, 1]]) == 2\nassert solution.orderOfLargestPlusSign(4, [[3, 1]]) == 2\nassert solution.orderOfLargestPlusSign(9, [[7, 5], [2, 0], [0, 7]]) == 5\nassert solution.orderOfLargestPlusSign(10, [[6, 7], [9, 3], [5, 0], [4, 1]]) == 5\nassert solution.orderOfLargestPlusSign(2, [[1, 1], [0, 0], [1, 1], [1, 0], [0, 0], [1, 1], [1, 0], [0, 1]]) == 0\nassert solution.orderOfLargestPlusSign(9, [[2, 8], [6, 1], [3, 3], [5, 5], [1, 4], [5, 2], [2, 7], [0, 6], [6, 3]]) == 3\nassert solution.orderOfLargestPlusSign(2, [[1, 0], [0, 1], [0, 1], [0, 0], [0, 1]]) == 1\nassert solution.orderOfLargestPlusSign(2, [[0, 1]]) == 1\nassert solution.orderOfLargestPlusSign(10, [[8, 1], [6, 9]]) == 5\nassert solution.orderOfLargestPlusSign(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(6, [[1, 5], [4, 0], [3, 0], [3, 3], [0, 3], [4, 4], [1, 1]]) == 3\nassert solution.orderOfLargestPlusSign(4, [[0, 3], [3, 3], [1, 0], [1, 3], [0, 0], [1, 0], [2, 3], [2, 3], [0, 0]]) == 2\nassert solution.orderOfLargestPlusSign(3, [[0, 2]]) == 2\nassert solution.orderOfLargestPlusSign(5, [[2, 1], [4, 0], [4, 1], [3, 3], [1, 0], [3, 0], [4, 0], [3, 2], [3, 0]]) == 2\nassert solution.orderOfLargestPlusSign(6, [[5, 0], [5, 5], [1, 3]]) == 3\nassert solution.orderOfLargestPlusSign(8, [[4, 3], [4, 6], [7, 5], [2, 5]]) == 4\nassert solution.orderOfLargestPlusSign(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(3, [[2, 0], [0, 0], [2, 1], [2, 0], [1, 2], [0, 1]]) == 1\nassert solution.orderOfLargestPlusSign(6, [[2, 3], [4, 5], [3, 1]]) == 2\nassert solution.orderOfLargestPlusSign(4, [[3, 0], [1, 1], [1, 3], [2, 2], [3, 3], [0, 0], [1, 2], [2, 3], [2, 2]]) == 1\nassert solution.orderOfLargestPlusSign(2, [[1, 1]]) == 1\nassert solution.orderOfLargestPlusSign(10, [[8, 6]]) == 5\nassert solution.orderOfLargestPlusSign(4, [[0, 0], [0, 2], [3, 3], [0, 1], [2, 2], [3, 3], [2, 2], [0, 2], [1, 1]]) == 1\nassert solution.orderOfLargestPlusSign(8, [[2, 4], [2, 1], [3, 5], [7, 6], [3, 2], [5, 7], [6, 7], [7, 1]]) == 4\nassert solution.orderOfLargestPlusSign(6, [[1, 0], [0, 2], [1, 4], [3, 3], [5, 4], [0, 5], [5, 1], [4, 2]]) == 2\nassert solution.orderOfLargestPlusSign(10, [[1, 9], [5, 1], [3, 3], [7, 6], [8, 6], [1, 8], [4, 1], [3, 6], [3, 2]]) == 4\nassert solution.orderOfLargestPlusSign(5, [[4, 3], [4, 1]]) == 3\nassert solution.orderOfLargestPlusSign(5, [[3, 4], [4, 0], [4, 4], [4, 3], [2, 2], [4, 1], [4, 4], [3, 3], [1, 0]]) == 2\nassert solution.orderOfLargestPlusSign(2, [[1, 0]]) == 1\nassert solution.orderOfLargestPlusSign(9, [[0, 4], [5, 1], [8, 2], [2, 2], [0, 8], [5, 1], [7, 0], [0, 5]]) == 4\nassert solution.orderOfLargestPlusSign(7, [[5, 4], [3, 5], [2, 4], [5, 1], [1, 6], [1, 2]]) == 3\nassert solution.orderOfLargestPlusSign(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(5, [[2, 0], [3, 0], [4, 3], [4, 2], [4, 4], [0, 0], [3, 2], [1, 3]]) == 2\nassert solution.orderOfLargestPlusSign(3, [[1, 0]]) == 1\nassert solution.orderOfLargestPlusSign(3, [[0, 1], [0, 1], [0, 0], [2, 1], [2, 2]]) == 1\nassert solution.orderOfLargestPlusSign(7, [[3, 3], [5, 5], [6, 1], [4, 2], [5, 0], [0, 1], [5, 6], [1, 0], [0, 3]]) == 3\nassert solution.orderOfLargestPlusSign(6, [[4, 3], [1, 0], [3, 0], [3, 3]]) == 3\nassert solution.orderOfLargestPlusSign(1, [[0, 0], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(8, [[3, 7], [5, 6], [3, 6], [4, 3], [4, 1]]) == 3\nassert solution.orderOfLargestPlusSign(2, [[0, 1], [1, 0], [0, 0], [1, 1]]) == 0\nassert solution.orderOfLargestPlusSign(3, [[2, 0]]) == 2\nassert solution.orderOfLargestPlusSign(10, [[4, 4], [9, 7]]) == 5\nassert solution.orderOfLargestPlusSign(5, [[1, 4], [2, 0], [2, 4], [0, 1], [2, 4], [2, 2]]) == 2\nassert solution.orderOfLargestPlusSign(7, [[6, 1], [5, 0], [1, 3], [6, 6]]) == 3\nassert solution.orderOfLargestPlusSign(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(10, [[1, 2]]) == 5\nassert solution.orderOfLargestPlusSign(7, [[0, 4], [0, 3]]) == 3\nassert solution.orderOfLargestPlusSign(4, [[2, 3], [0, 3], [2, 1], [2, 1], [3, 2], [1, 3], [3, 1]]) == 1\nassert solution.orderOfLargestPlusSign(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(6, [[4, 0], [5, 5], [5, 2], [0, 4], [3, 5], [4, 1]]) == 3\nassert solution.orderOfLargestPlusSign(2, [[0, 0], [0, 1], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1]]) == 1\nassert solution.orderOfLargestPlusSign(2, [[0, 0], [0, 0], [0, 1], [1, 0], [0, 0], [0, 1], [0, 0], [1, 1]]) == 0\nassert solution.orderOfLargestPlusSign(8, [[2, 0], [0, 2], [7, 5], [3, 6], [5, 0], [3, 0], [7, 5]]) == 4\nassert solution.orderOfLargestPlusSign(6, [[0, 4], [1, 4], [1, 5], [1, 0], [2, 4], [0, 5], [3, 5]]) == 3\nassert solution.orderOfLargestPlusSign(9, [[7, 8], [0, 6], [6, 7], [6, 4], [0, 6], [0, 6], [5, 0], [2, 0], [5, 4]]) == 4\nassert solution.orderOfLargestPlusSign(3, [[1, 1], [0, 1], [1, 2], [1, 0], [0, 0], [0, 1]]) == 1\nassert solution.orderOfLargestPlusSign(10, [[6, 1], [6, 4], [2, 2], [1, 4], [8, 6], [8, 1], [0, 9], [4, 8], [1, 0]]) == 5\nassert solution.orderOfLargestPlusSign(4, [[2, 2], [0, 1], [3, 3], [3, 2], [3, 2]]) == 1\nassert solution.orderOfLargestPlusSign(10, [[5, 3], [5, 7], [1, 4], [8, 6]]) == 5\nassert solution.orderOfLargestPlusSign(1, [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(2, [[1, 0], [0, 0], [1, 0]]) == 1\nassert solution.orderOfLargestPlusSign(3, [[2, 1], [1, 0], [2, 2], [1, 0], [0, 1], [1, 1], [1, 2], [1, 2]]) == 1\nassert solution.orderOfLargestPlusSign(3, [[2, 2], [1, 2], [1, 0], [1, 0], [1, 0], [0, 1], [2, 2]]) == 1\nassert solution.orderOfLargestPlusSign(4, [[1, 3], [0, 1]]) == 2\nassert solution.orderOfLargestPlusSign(9, [[1, 2], [1, 2]]) == 5\nassert solution.orderOfLargestPlusSign(6, [[3, 2], [3, 0], [3, 5], [1, 4], [4, 5], [0, 2], [0, 0], [1, 0]]) == 3\nassert solution.orderOfLargestPlusSign(10, [[3, 9]]) == 5\nassert solution.orderOfLargestPlusSign(10, [[5, 0], [0, 1]]) == 5\nassert solution.orderOfLargestPlusSign(5, [[1, 3], [3, 0], [0, 2], [2, 4], [2, 4], [3, 1]]) == 2\nassert solution.orderOfLargestPlusSign(10, [[2, 2], [8, 6], [1, 5], [7, 0]]) == 5\nassert solution.orderOfLargestPlusSign(10, [[2, 0], [7, 0], [1, 3], [3, 3], [8, 2], [7, 9], [9, 8], [2, 1]]) == 5\nassert solution.orderOfLargestPlusSign(9, [[7, 2]]) == 5\nassert solution.orderOfLargestPlusSign(6, [[1, 5], [3, 3], [5, 3], [2, 4], [4, 4], [2, 0], [5, 3]]) == 2\nassert solution.orderOfLargestPlusSign(7, [[1, 5]]) == 4\nassert solution.orderOfLargestPlusSign(4, [[2, 0]]) == 2\nassert solution.orderOfLargestPlusSign(5, [[0, 4], [0, 4], [3, 1], [1, 1], [4, 4], [4, 4], [0, 2], [1, 1]]) == 2\nassert solution.orderOfLargestPlusSign(7, [[6, 6], [5, 2], [2, 5], [1, 3], [2, 1], [2, 5], [4, 5]]) == 3\nassert solution.orderOfLargestPlusSign(6, [[1, 0], [2, 4], [3, 4], [5, 0]]) == 2\nassert solution.orderOfLargestPlusSign(8, [[7, 5], [7, 4], [0, 5], [5, 7], [6, 1]]) == 4\nassert solution.orderOfLargestPlusSign(4, [[2, 1], [2, 1], [3, 2], [3, 0], [0, 1]]) == 2\nassert solution.orderOfLargestPlusSign(5, [[4, 0], [2, 3], [0, 3], [0, 0], [2, 2], [3, 0], [2, 1], [4, 4]]) == 1\nassert solution.orderOfLargestPlusSign(2, [[1, 0], [1, 1]]) == 1\nassert solution.orderOfLargestPlusSign(5, [[1, 1], [2, 3], [4, 4], [0, 4], [4, 4]]) == 2\nassert solution.orderOfLargestPlusSign(2, [[1, 0], [1, 0], [0, 1], [0, 1], [0, 1], [1, 0], [0, 1], [1, 1], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(9, [[8, 2]]) == 5\nassert solution.orderOfLargestPlusSign(2, [[0, 1], [0, 1], [1, 0], [1, 0], [1, 1], [0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(7, [[6, 6], [0, 3]]) == 3\nassert solution.orderOfLargestPlusSign(4, [[1, 3], [1, 1], [1, 2], [2, 3], [2, 0], [3, 3], [3, 1], [3, 3], [3, 0], [3, 3]]) == 1\nassert solution.orderOfLargestPlusSign(8, [[3, 1], [2, 3]]) == 4\nassert solution.orderOfLargestPlusSign(4, [[3, 1], [2, 1], [3, 3], [0, 2], [2, 0], [2, 2], [0, 0], [3, 2], [3, 3], [0, 1]]) == 1\nassert solution.orderOfLargestPlusSign(7, [[4, 6], [3, 2], [3, 2], [5, 0], [0, 1], [6, 1], [3, 1], [1, 5], [2, 2]]) == 3\nassert solution.orderOfLargestPlusSign(4, [[0, 0], [1, 1], [1, 2], [3, 0], [1, 3], [3, 2], [0, 3], [3, 3], [0, 1], [2, 1]]) == 1\nassert solution.orderOfLargestPlusSign(1, [[0, 0]]) == 0\nassert solution.orderOfLargestPlusSign(9, [[4, 8], [0, 3], [3, 8]]) == 4\nassert solution.orderOfLargestPlusSign(10, [[2, 9], [5, 8], [5, 2], [0, 8], [5, 0], [0, 3], [7, 3]]) == 5",
  "inefficient_solution": "class Solution:\n    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:\n        dp = [[n for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = 0\n        for x, y in mines:\n            dp[x][y] = -1\n        for i in range(n):\n            left = right = up = down = 0\n            for j in range(n):\n                left = left + 1 if dp[i][j] != -1 else 0\n                right = right + 1 if dp[i][n - 1 - j] != -1 else 0\n                up = up + 1 if dp[n - 1 - j][i] != -1 else 0\n                down = down + 1 if dp[j][i] != -1 else 0\n                dp[i][j] = min(dp[i][j], left)\n                dp[i][n - 1 - j] = min(dp[i][n - 1 - j], right)\n                dp[n - 1 - j][i] = min(dp[n - 1 - j][i], up)\n                dp[j][i] = min(dp[j][i], down)\n        max_order = 0\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] != -1:\n                    max_order = max(max_order, min(dp[i][j], min(dp[i][j] + 1, min(dp[i][j] + 2, min(dp[i][j] + 3, min(dp[i][j] + 4))))))\n        return max_order",
  "is_python": true
}