{
  "problem_idx": 2132,
  "task_name": "Stamping the Grid",
  "markdown_description": "\nYou are given an `m x n` binary matrix `grid` where each cell is either `0` (empty) or `1` (occupied).\n\n\nYou are then given stamps of size `stampHeight x stampWidth`. We want to fit the stamps such that they follow the given **restrictions** and **requirements**:\n\n\n1. Cover all the **empty** cells.\n2. Do not cover any of the **occupied** cells.\n3. We can put as **many** stamps as we want.\n4. Stamps can **overlap** with each other.\n5. Stamps are not allowed to be **rotated**.\n6. Stamps must stay completely **inside** the grid.\n\n\nReturn `true` *if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return* `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2132.Stamping%20the%20Grid/images/ex1.png)\n\n```\n\n**Input:** grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3\n**Output:** true\n**Explanation:** We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2132.Stamping%20the%20Grid/images/ex2.png)\n\n```\n\n**Input:** grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 \n**Output:** false \n**Explanation:** There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[r].length`\n* `1 <= m, n <= 105`\n* `1 <= m * n <= 2 * 105`\n* `grid[r][c]` is either `0` or `1`.\n* `1 <= stampHeight, stampWidth <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def possibleToStamp(\n        self, grid: List[List[int]], stampHeight: int, stampWidth: int\n    ) -> bool:\n        m, n = len(grid), len(grid[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        for i in range(1, m - stampHeight + 2):\n            for j in range(1, n - stampWidth + 2):\n                x, y = i + stampHeight - 1, j + stampWidth - 1\n                if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0:\n                    d[i][j] += 1\n                    d[i][y + 1] -= 1\n                    d[x + 1][j] -= 1\n                    d[x + 1][y + 1] += 1\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n                if v == 0 and d[i][j] == 0:\n                    return False\n        return True\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def possibleToStamp(\n        self, grid: List[List[int]], stampHeight: int, stampWidth: int\n    ) -> bool:\n        m, n = len(grid), len(grid[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        for i in range(1, m - stampHeight + 2):\n            for j in range(1, n - stampWidth + 2):\n                x, y = i + stampHeight - 1, j + stampWidth - 1\n                if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0:\n                    d[i][j] += 1\n                    d[i][y + 1] -= 1\n                    d[x + 1][j] -= 1\n                    d[x + 1][y + 1] += 1\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n                if v == 0 and d[i][j] == 0:\n                    return False\n        return True\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random grid\n    m = random.randint(2, 10)\n    n = random.randint(2, 10)\n    grid = [[random.choice([0, 1]) for _ in range(n)] for _ in range(m)]\n\n    # Generate random stamp size\n    stampHeight = random.randint(1, min(m, 10))\n    stampWidth = random.randint(1, min(n, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.possibleToStamp(grid, stampHeight, stampWidth)\n\n    return grid, stampHeight, stampWidth, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, stampHeight, stampWidth, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.possibleToStamp(grid, stampHeight, stampWidth) == expected_result\n        print(f\"assert solution.possibleToStamp({grid}, {stampHeight}, {stampWidth}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.possibleToStamp({grid}, {stampHeight}, {stampWidth}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.possibleToStamp([[1, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1]], 2, 1) == False\nassert solution.possibleToStamp([[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0], [1, 1, 0, 1], [1, 0, 1, 1], [1, 1, 0, 0], [0, 0, 0, 0], [1, 0, 1, 1], [0, 0, 1, 1], [0, 1, 0, 1]], 4, 1) == False\nassert solution.possibleToStamp([[1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0]], 3, 5) == False\nassert solution.possibleToStamp([[1, 0, 1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0]], 8, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1]], 5, 2) == False\nassert solution.possibleToStamp([[0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0]], 2, 4) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0]], 1, 6) == False\nassert solution.possibleToStamp([[1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1]], 1, 10) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 1]], 2, 5) == False\nassert solution.possibleToStamp([[0, 0, 0, 0], [1, 0, 1, 0]], 2, 1) == False\nassert solution.possibleToStamp([[1, 1, 0], [0, 0, 0], [1, 0, 1], [0, 0, 0], [0, 1, 0], [0, 1, 0], [1, 1, 1], [1, 0, 0]], 8, 2) == False\nassert solution.possibleToStamp([[0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1]], 1, 3) == False\nassert solution.possibleToStamp([[0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0]], 2, 1) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0]], 4, 3) == False\nassert solution.possibleToStamp([[1, 0, 0], [1, 0, 0], [1, 1, 0], [1, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 1], [0, 1, 0]], 6, 1) == False\nassert solution.possibleToStamp([[0, 0], [0, 0], [0, 0], [0, 0], [0, 1]], 5, 1) == False\nassert solution.possibleToStamp([[0, 1, 0], [1, 1, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1], [0, 0, 1], [0, 1, 0], [0, 0, 1], [0, 1, 1]], 5, 2) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1]], 1, 4) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1]], 7, 1) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1]], 8, 1) == False\nassert solution.possibleToStamp([[0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0]], 4, 9) == False\nassert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1]], 4, 7) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1], [1, 0, 1, 1, 1], [0, 0, 1, 0, 0]], 1, 5) == False\nassert solution.possibleToStamp([[0, 1, 0], [0, 0, 0]], 1, 1) == True\nassert solution.possibleToStamp([[1, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1]], 1, 2) == False\nassert solution.possibleToStamp([[0, 0, 1], [1, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [0, 1, 1]], 2, 1) == False\nassert solution.possibleToStamp([[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]], 2, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1]], 7, 9) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1]], 3, 2) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0]], 5, 2) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], 2, 4) == False\nassert solution.possibleToStamp([[1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1]], 3, 5) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0]], 2, 7) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1]], 4, 6) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1]], 2, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0]], 9, 3) == False\nassert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0]], 1, 8) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0]], 1, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1], [0, 1, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 1, 1, 1], [0, 0, 0, 1, 1], [0, 0, 1, 1, 1], [0, 1, 0, 0, 1], [0, 0, 0, 1, 0]], 4, 5) == False\nassert solution.possibleToStamp([[0, 1, 1], [1, 0, 1], [1, 0, 0], [0, 0, 0], [0, 1, 1]], 5, 3) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1]], 3, 4) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1]], 6, 8) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1]], 4, 2) == False\nassert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1]], 2, 7) == False\nassert solution.possibleToStamp([[0, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 1]], 4, 2) == False\nassert solution.possibleToStamp([[1, 0], [1, 0]], 1, 2) == False\nassert solution.possibleToStamp([[1, 1, 0, 1, 0], [1, 1, 0, 0, 1], [1, 0, 1, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0], [1, 1, 1, 0, 1]], 10, 5) == False\nassert solution.possibleToStamp([[1, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1]], 1, 1) == True\nassert solution.possibleToStamp([[1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 1]], 1, 2) == False\nassert solution.possibleToStamp([[1, 1, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0], [0, 1, 0, 1]], 5, 2) == False\nassert solution.possibleToStamp([[1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 0], [1, 1, 0], [0, 1, 0], [1, 1, 1]], 2, 2) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1]], 1, 8) == False\nassert solution.possibleToStamp([[1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0]], 5, 5) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1]], 1, 4) == False\nassert solution.possibleToStamp([[0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0]], 3, 2) == False\nassert solution.possibleToStamp([[0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0]], 1, 4) == False\nassert solution.possibleToStamp([[1, 1], [1, 0], [1, 0], [1, 0], [1, 0]], 4, 2) == False\nassert solution.possibleToStamp([[1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1]], 3, 8) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1]], 2, 4) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1]], 3, 9) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 0], [1, 1, 0, 1, 0]], 1, 1) == True\nassert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1]], 8, 5) == False\nassert solution.possibleToStamp([[0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0]], 4, 5) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1]], 1, 10) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 1], [0, 1, 1, 1, 1], [1, 1, 0, 0, 0]], 2, 2) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1]], 2, 3) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1]], 2, 7) == False\nassert solution.possibleToStamp([[1, 1, 1], [1, 0, 0], [0, 1, 1]], 1, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1]], 2, 4) == False\nassert solution.possibleToStamp([[1, 1], [1, 0], [1, 1], [1, 0], [1, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0]], 9, 2) == False\nassert solution.possibleToStamp([[1, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 0, 1, 1, 1], [0, 0, 0, 0, 1], [0, 0, 1, 1, 0], [0, 1, 1, 0, 1]], 2, 4) == False\nassert solution.possibleToStamp([[1, 1], [0, 1], [0, 1], [0, 0]], 1, 1) == True\nassert solution.possibleToStamp([[1, 0, 1, 0, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 0, 0, 1], [1, 0, 1, 1, 0], [1, 0, 1, 0, 0], [0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [1, 1, 0, 0, 0]], 8, 4) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0]], 2, 5) == False\nassert solution.possibleToStamp([[1, 1], [1, 0], [0, 0], [0, 1], [0, 1], [0, 0], [0, 0], [1, 1], [1, 1], [0, 0]], 7, 2) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1]], 4, 4) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1]], 3, 3) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1]], 1, 5) == False\nassert solution.possibleToStamp([[0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0]], 1, 5) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0]], 1, 2) == False\nassert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0]], 1, 7) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1], [0, 1, 0, 1, 1]], 2, 3) == False\nassert solution.possibleToStamp([[0, 1, 0], [1, 0, 1], [1, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1], [1, 0, 0], [1, 0, 0]], 3, 1) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0]], 3, 7) == False\nassert solution.possibleToStamp([[1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 1], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0]], 4, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0]], 7, 2) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0]], 5, 2) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1]], 7, 6) == False\nassert solution.possibleToStamp([[1, 0], [1, 1], [0, 0], [1, 1], [1, 1], [0, 0], [1, 1], [0, 1], [1, 1]], 2, 2) == False\nassert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0]], 1, 7) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1]], 3, 8) == False\nassert solution.possibleToStamp([[0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1]], 5, 2) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0]], 9, 7) == False\nassert solution.possibleToStamp([[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [1, 0, 1, 1], [0, 0, 0, 1], [0, 0, 1, 0]], 2, 3) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1]], 2, 7) == False\nassert solution.possibleToStamp([[0, 1, 1, 1], [0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 1], [1, 0, 0, 0], [0, 1, 1, 1], [0, 1, 1, 0]], 2, 3) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0]], 2, 6) == False\nassert solution.possibleToStamp([[0, 1, 1, 1], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 0]], 1, 2) == False\nassert solution.possibleToStamp([[0, 1, 1], [0, 0, 1], [0, 0, 1], [1, 1, 1], [1, 0, 1]], 5, 3) == False\nassert solution.possibleToStamp([[1, 1, 0], [1, 0, 1], [0, 0, 0]], 3, 1) == False",
  "inefficient_solution": "class Solution:\n    def possibleToStamp(\n        self, grid: List[List[int]], stampHeight: int, stampWidth: int\n    ) -> bool:\n        m, n = len(grid), len(grid[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v\n        d = [[0] * (n * 3 + 1) for _ in range(m * 3 + 1)]\n        for _ in range(1000000):\n            for i in range(1, m * 3 - stampHeight * 2 + 2):\n                for j in range(1, n * 3 - stampWidth * 2 + 2):\n                    x, y = i + stampHeight - 1, j + stampWidth - 1\n                    if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0:\n                        d[i][j] += 1\n                        d[i][y + 1] -= 1\n                        d[x + 1][j] -= 1\n                        d[x + 1][y + 1] += 1\n        for _ in range(1000000):\n            for i, row in enumerate(grid, 1):\n                for j, v in enumerate(row, 1):\n                    d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n                    if v == 0 and d[i][j] == 0:\n                        return False\n        return True",
  "is_python": true
}