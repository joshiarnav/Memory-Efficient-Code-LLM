{
  "problem_idx": 2533,
  "task_name": "Number of Good Binary Strings",
  "markdown_description": "\nYou are given four integers `minLength`, `maxLength`, `oneGroup` and `zeroGroup`.\n\n\nA binary string is **good** if it satisfies the following conditions:\n\n\n* The length of the string is in the range `[minLength, maxLength]`.\n* The size of each block of consecutive `1`'s is a multiple of `oneGroup`.\n\t+ For example in a binary string `00110111100` sizes of each block of consecutive ones are `[2,4]`.\n* The size of each block of consecutive `0`'s is a multiple of `zeroGroup`.\n\t+ For example, in a binary string `00110111100` sizes of each block of consecutive zeros are `[2,1,2]`.\n\n\nReturn *the number of **good** binary strings*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n**Note** that `0` is considered a multiple of all the numbers.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** minLength = 2, maxLength = 3, oneGroup = 1, zeroGroup = 2\n**Output:** 5\n**Explanation:** There are 5 good binary strings in this example: \"00\", \"11\", \"001\", \"100\", and \"111\".\nIt can be proven that there are only 5 good strings satisfying all conditions.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** minLength = 4, maxLength = 4, oneGroup = 4, zeroGroup = 3\n**Output:** 1\n**Explanation:** There is only 1 good binary string in this example: \"1111\".\nIt can be proven that there is only 1 good string satisfying all conditions.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= minLength <= maxLength <= 105`\n* `1 <= oneGroup, zeroGroup <= maxLength`\n\n\n",
  "canonical_solution": "class Solution:\n    def goodBinaryStrings(\n        self, minLength: int, maxLength: int, oneGroup: int, zeroGroup: int\n    ) -> int:\n        mod = 10**9 + 7\n        f = [1] + [0] * maxLength\n        for i in range(1, len(f)):\n            if i - oneGroup >= 0:\n                f[i] += f[i - oneGroup]\n            if i - zeroGroup >= 0:\n                f[i] += f[i - zeroGroup]\n            f[i] %= mod\n        return sum(f[minLength:]) % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def goodBinaryStrings(self, minLength, maxLength, oneGroup, zeroGroup):\n        mod = 10 ** 9 + 7\n        f = [1] + [0] * maxLength\n        for i in range(1, len(f)):\n            if i - oneGroup >= 0:\n                f[i] += f[i - oneGroup]\n            if i - zeroGroup >= 0:\n                f[i] += f[i - zeroGroup]\n            f[i] %= mod\n        return sum(f[minLength:]) % mod\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random values for the input parameters\n    minLength = random.randint(1, 5)\n    maxLength = random.randint(minLength, 10)\n    oneGroup = random.randint(1, maxLength)\n    zeroGroup = random.randint(1, maxLength)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.goodBinaryStrings(\n        minLength, maxLength, oneGroup, zeroGroup\n    )\n\n    return minLength, maxLength, oneGroup, zeroGroup, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        # Generate the test case\n        (\n            minLength,\n            maxLength,\n            oneGroup,\n            zeroGroup,\n            expected_result\n        ) = generate_test_case()\n\n        # Construct the test case in the required format\n        test_case = (\n            f\"assert solution.goodBinaryStrings({minLength}, {maxLength}, {oneGroup}, {zeroGroup}) == \"\n            f\"{expected_result}\"\n        )\n\n        # Print and save the test case\n        print(test_case)\n        test_case_generator_results.append(test_case)\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.goodBinaryStrings(3, 8, 2, 7) == 4\nassert solution.goodBinaryStrings(1, 8, 3, 6) == 3\nassert solution.goodBinaryStrings(5, 9, 6, 8) == 2\nassert solution.goodBinaryStrings(1, 1, 1, 1) == 2\nassert solution.goodBinaryStrings(2, 3, 3, 2) == 2\nassert solution.goodBinaryStrings(2, 7, 2, 3) == 10\nassert solution.goodBinaryStrings(5, 5, 3, 5) == 1\nassert solution.goodBinaryStrings(3, 8, 4, 8) == 3\nassert solution.goodBinaryStrings(1, 4, 3, 3) == 2\nassert solution.goodBinaryStrings(1, 7, 4, 4) == 2\nassert solution.goodBinaryStrings(1, 8, 4, 2) == 11\nassert solution.goodBinaryStrings(5, 5, 5, 4) == 1\nassert solution.goodBinaryStrings(5, 6, 5, 4) == 1\nassert solution.goodBinaryStrings(1, 8, 6, 8) == 2\nassert solution.goodBinaryStrings(1, 8, 4, 8) == 3\nassert solution.goodBinaryStrings(2, 10, 8, 2) == 8\nassert solution.goodBinaryStrings(3, 3, 2, 2) == 0\nassert solution.goodBinaryStrings(4, 8, 1, 8) == 6\nassert solution.goodBinaryStrings(5, 7, 6, 7) == 2\nassert solution.goodBinaryStrings(4, 9, 7, 4) == 3\nassert solution.goodBinaryStrings(4, 8, 5, 3) == 4\nassert solution.goodBinaryStrings(5, 9, 2, 7) == 5\nassert solution.goodBinaryStrings(2, 4, 4, 4) == 2\nassert solution.goodBinaryStrings(3, 3, 3, 1) == 2\nassert solution.goodBinaryStrings(3, 10, 2, 8) == 7\nassert solution.goodBinaryStrings(5, 5, 1, 4) == 3\nassert solution.goodBinaryStrings(5, 10, 6, 4) == 4\nassert solution.goodBinaryStrings(4, 5, 1, 4) == 5\nassert solution.goodBinaryStrings(3, 4, 4, 2) == 2\nassert solution.goodBinaryStrings(2, 8, 2, 3) == 14\nassert solution.goodBinaryStrings(5, 9, 3, 6) == 5\nassert solution.goodBinaryStrings(2, 5, 5, 5) == 2\nassert solution.goodBinaryStrings(4, 6, 5, 2) == 3\nassert solution.goodBinaryStrings(3, 10, 2, 1) == 228\nassert solution.goodBinaryStrings(4, 8, 4, 4) == 6\nassert solution.goodBinaryStrings(1, 5, 3, 4) == 2\nassert solution.goodBinaryStrings(1, 7, 7, 2) == 4\nassert solution.goodBinaryStrings(2, 10, 6, 4) == 5\nassert solution.goodBinaryStrings(5, 5, 2, 3) == 2\nassert solution.goodBinaryStrings(5, 8, 6, 1) == 10\nassert solution.goodBinaryStrings(1, 10, 5, 6) == 3\nassert solution.goodBinaryStrings(4, 7, 4, 6) == 2\nassert solution.goodBinaryStrings(3, 4, 1, 4) == 3\nassert solution.goodBinaryStrings(4, 5, 2, 4) == 2\nassert solution.goodBinaryStrings(2, 7, 3, 6) == 3\nassert solution.goodBinaryStrings(2, 5, 5, 1) == 5\nassert solution.goodBinaryStrings(4, 6, 4, 4) == 2\nassert solution.goodBinaryStrings(2, 8, 3, 8) == 3\nassert solution.goodBinaryStrings(4, 4, 3, 3) == 0\nassert solution.goodBinaryStrings(3, 7, 3, 6) == 3\nassert solution.goodBinaryStrings(3, 3, 2, 1) == 3\nassert solution.goodBinaryStrings(3, 3, 1, 2) == 3\nassert solution.goodBinaryStrings(3, 3, 1, 2) == 3\nassert solution.goodBinaryStrings(5, 9, 3, 8) == 3\nassert solution.goodBinaryStrings(4, 4, 2, 1) == 5\nassert solution.goodBinaryStrings(3, 4, 4, 2) == 2\nassert solution.goodBinaryStrings(2, 2, 1, 2) == 2\nassert solution.goodBinaryStrings(3, 8, 1, 7) == 9\nassert solution.goodBinaryStrings(4, 9, 7, 1) == 12\nassert solution.goodBinaryStrings(1, 9, 5, 8) == 2\nassert solution.goodBinaryStrings(5, 7, 7, 5) == 2\nassert solution.goodBinaryStrings(2, 3, 2, 1) == 5\nassert solution.goodBinaryStrings(5, 7, 7, 1) == 4\nassert solution.goodBinaryStrings(5, 8, 6, 5) == 2\nassert solution.goodBinaryStrings(4, 8, 7, 2) == 4\nassert solution.goodBinaryStrings(3, 8, 4, 7) == 3\nassert solution.goodBinaryStrings(3, 4, 3, 2) == 2\nassert solution.goodBinaryStrings(5, 6, 1, 6) == 3\nassert solution.goodBinaryStrings(1, 7, 4, 1) == 17\nassert solution.goodBinaryStrings(5, 7, 2, 3) == 7\nassert solution.goodBinaryStrings(1, 2, 1, 2) == 3\nassert solution.goodBinaryStrings(3, 3, 1, 3) == 2\nassert solution.goodBinaryStrings(4, 10, 2, 5) == 11\nassert solution.goodBinaryStrings(4, 5, 2, 4) == 2\nassert solution.goodBinaryStrings(3, 4, 2, 1) == 8\nassert solution.goodBinaryStrings(1, 5, 4, 5) == 2\nassert solution.goodBinaryStrings(4, 4, 2, 3) == 1\nassert solution.goodBinaryStrings(5, 7, 6, 3) == 2\nassert solution.goodBinaryStrings(4, 10, 7, 2) == 7\nassert solution.goodBinaryStrings(5, 9, 5, 8) == 2\nassert solution.goodBinaryStrings(5, 8, 8, 4) == 2\nassert solution.goodBinaryStrings(4, 5, 4, 4) == 2\nassert solution.goodBinaryStrings(5, 5, 3, 4) == 0\nassert solution.goodBinaryStrings(5, 8, 1, 5) == 14\nassert solution.goodBinaryStrings(1, 8, 1, 1) == 510\nassert solution.goodBinaryStrings(3, 5, 2, 5) == 2\nassert solution.goodBinaryStrings(4, 5, 4, 3) == 1\nassert solution.goodBinaryStrings(4, 8, 7, 4) == 3\nassert solution.goodBinaryStrings(2, 2, 1, 1) == 4\nassert solution.goodBinaryStrings(4, 6, 1, 1) == 112\nassert solution.goodBinaryStrings(2, 6, 6, 1) == 6\nassert solution.goodBinaryStrings(5, 9, 1, 7) == 11\nassert solution.goodBinaryStrings(3, 5, 4, 5) == 2\nassert solution.goodBinaryStrings(2, 7, 7, 5) == 2\nassert solution.goodBinaryStrings(4, 10, 4, 1) == 45\nassert solution.goodBinaryStrings(4, 9, 1, 3) == 54\nassert solution.goodBinaryStrings(1, 10, 5, 6) == 3\nassert solution.goodBinaryStrings(5, 10, 3, 2) == 23\nassert solution.goodBinaryStrings(4, 6, 2, 5) == 3\nassert solution.goodBinaryStrings(5, 9, 7, 9) == 2",
  "inefficient_solution": "class Solution:\n    def goodBinaryStrings(\n        self, minLength: int, maxLength: int, oneGroup: int, zeroGroup: int\n    ) -> int:\n        mod = 10**9 + 7\n        f = [0] * (maxLength + 1)\n        for _ in range(10**6):\n            f_new = [0] * (maxLength + 1)\n            for i in range(1, len(f)):\n                if i - oneGroup >= 0:\n                    f_new[i] += f[i - oneGroup]\n                if i - zeroGroup >= 0:\n                    f_new[i] += f[i - zeroGroup]\n                f_new[i] %= mod\n            f = f_new\n        return sum(f[minLength:]) % mod",
  "is_python": true
}