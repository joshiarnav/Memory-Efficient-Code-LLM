{
  "problem_idx": 2466,
  "task_name": "Count Ways To Build Good Strings",
  "markdown_description": "\nGiven the integers `zero`, `one`, `low`, and `high`, we can construct a string by starting with an empty string, and then at each step perform either of the following:\n\n\n* Append the character `'0'` `zero` times.\n* Append the character `'1'` `one` times.\n\n\nThis can be performed any number of times.\n\n\nA **good** string is a string constructed by the above process having a **length** between `low` and `high` (**inclusive**).\n\n\nReturn *the number of **different** good strings that can be constructed satisfying these properties.* Since the answer can be large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** low = 3, high = 3, zero = 1, one = 1\n**Output:** 8\n**Explanation:** \nOne possible valid good string is \"011\". \nIt can be constructed as follows: \"\" -> \"0\" -> \"01\" -> \"011\". \nAll binary strings from \"000\" to \"111\" are good strings in this example.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** low = 2, high = 3, zero = 1, one = 2\n**Output:** 5\n**Explanation:** The good strings are \"00\", \"11\", \"000\", \"110\", and \"011\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= low\u00a0<= high\u00a0<= 105`\n* `1 <= zero, one <= low`\n\n\n",
  "canonical_solution": "class Solution:\n    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:\n        @cache\n        def dfs(i):\n            if i > high:\n                return 0\n            ans = 0\n            if low <= i <= high:\n                ans += 1\n            ans += dfs(i + zero) + dfs(i + one)\n            return ans % mod\n\n        mod = 10**9 + 7\n        return dfs(0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:\n        @cache\n        def dfs(i):\n            if i > high:\n                return 0\n            ans = 0\n            if low <= i <= high:\n                ans += 1\n            ans += dfs(i + zero) + dfs(i + one)\n            return ans % mod\n\n        mod = 10**9 + 7\n        return dfs(0)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random values for low, high, zero, and one\n    low = random.randint(1, 100)\n    high = random.randint(low, 100)\n    zero = random.randint(1, low)\n    one = random.randint(1, low)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countGoodStrings(low, high, zero, one)\n\n    return low, high, zero, one, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        low, high, zero, one, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countGoodStrings(low, high, zero, one) == expected_result\n\n        print(f\"assert solution.countGoodStrings({low}, {high}, {zero}, {one}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.countGoodStrings({low}, {high}, {zero}, {one}) == {expected_result}\")\n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.countGoodStrings(30, 77, 1, 20) == 17569\nassert solution.countGoodStrings(29, 76, 16, 6) == 279\nassert solution.countGoodStrings(23, 82, 21, 1) == 23206\nassert solution.countGoodStrings(25, 76, 2, 8) == 413871\nassert solution.countGoodStrings(38, 42, 38, 21) == 2\nassert solution.countGoodStrings(83, 95, 41, 27) == 3\nassert solution.countGoodStrings(94, 97, 6, 47) == 11\nassert solution.countGoodStrings(56, 76, 2, 18) == 3222\nassert solution.countGoodStrings(97, 99, 64, 28) == 0\nassert solution.countGoodStrings(55, 95, 30, 4) == 305\nassert solution.countGoodStrings(2, 49, 1, 1) == 898961327\nassert solution.countGoodStrings(69, 96, 27, 57) == 3\nassert solution.countGoodStrings(60, 72, 49, 37) == 0\nassert solution.countGoodStrings(44, 51, 7, 10) == 58\nassert solution.countGoodStrings(45, 68, 38, 3) == 68\nassert solution.countGoodStrings(31, 92, 31, 18) == 18\nassert solution.countGoodStrings(3, 37, 2, 1) == 102334150\nassert solution.countGoodStrings(94, 94, 12, 58) == 4\nassert solution.countGoodStrings(1, 22, 1, 1) == 8388606\nassert solution.countGoodStrings(34, 64, 17, 15) == 20\nassert solution.countGoodStrings(41, 76, 3, 5) == 1133996\nassert solution.countGoodStrings(72, 95, 66, 5) == 23\nassert solution.countGoodStrings(78, 84, 26, 11) == 7\nassert solution.countGoodStrings(57, 58, 49, 9) == 2\nassert solution.countGoodStrings(95, 97, 88, 48) == 1\nassert solution.countGoodStrings(94, 97, 42, 49) == 0\nassert solution.countGoodStrings(93, 95, 39, 51) == 0\nassert solution.countGoodStrings(44, 95, 43, 23) == 9\nassert solution.countGoodStrings(86, 89, 55, 51) == 0\nassert solution.countGoodStrings(56, 65, 27, 21) == 1\nassert solution.countGoodStrings(51, 61, 44, 43) == 0\nassert solution.countGoodStrings(4, 39, 1, 2) == 267914288\nassert solution.countGoodStrings(76, 90, 43, 48) == 1\nassert solution.countGoodStrings(69, 92, 30, 11) == 23\nassert solution.countGoodStrings(54, 62, 42, 1) == 162\nassert solution.countGoodStrings(21, 69, 17, 4) == 352\nassert solution.countGoodStrings(35, 91, 30, 23) == 12\nassert solution.countGoodStrings(16, 92, 15, 2) == 47712\nassert solution.countGoodStrings(82, 86, 48, 11) == 0\nassert solution.countGoodStrings(28, 81, 24, 21) == 12\nassert solution.countGoodStrings(72, 100, 71, 33) == 1\nassert solution.countGoodStrings(62, 73, 44, 27) == 2\nassert solution.countGoodStrings(83, 92, 73, 27) == 0\nassert solution.countGoodStrings(78, 83, 3, 30) == 101\nassert solution.countGoodStrings(89, 89, 54, 76) == 0\nassert solution.countGoodStrings(61, 99, 35, 55) == 3\nassert solution.countGoodStrings(67, 82, 44, 17) == 4\nassert solution.countGoodStrings(17, 18, 15, 13) == 0\nassert solution.countGoodStrings(68, 89, 33, 56) == 2\nassert solution.countGoodStrings(28, 52, 15, 27) == 4\nassert solution.countGoodStrings(95, 99, 48, 95) == 2\nassert solution.countGoodStrings(97, 97, 11, 54) == 0\nassert solution.countGoodStrings(80, 82, 75, 71) == 0\nassert solution.countGoodStrings(43, 62, 7, 12) == 125\nassert solution.countGoodStrings(93, 93, 75, 15) == 0\nassert solution.countGoodStrings(71, 85, 35, 54) == 0\nassert solution.countGoodStrings(11, 57, 1, 5) == 18831242\nassert solution.countGoodStrings(18, 21, 5, 15) == 3\nassert solution.countGoodStrings(87, 92, 62, 12) == 0\nassert solution.countGoodStrings(95, 99, 3, 53) == 33\nassert solution.countGoodStrings(76, 96, 45, 75) == 1\nassert solution.countGoodStrings(62, 93, 54, 60) == 0\nassert solution.countGoodStrings(21, 91, 17, 14) == 82\nassert solution.countGoodStrings(70, 76, 44, 51) == 0\nassert solution.countGoodStrings(62, 62, 55, 62) == 1\nassert solution.countGoodStrings(24, 84, 1, 15) == 278931\nassert solution.countGoodStrings(66, 76, 22, 5) == 87\nassert solution.countGoodStrings(40, 75, 5, 15) == 567\nassert solution.countGoodStrings(77, 91, 66, 7) == 10\nassert solution.countGoodStrings(33, 51, 23, 14) == 7\nassert solution.countGoodStrings(79, 80, 7, 35) == 0\nassert solution.countGoodStrings(73, 94, 31, 38) == 2\nassert solution.countGoodStrings(66, 68, 33, 34) == 4\nassert solution.countGoodStrings(9, 54, 4, 1) == 71850102\nassert solution.countGoodStrings(68, 72, 15, 25) == 4\nassert solution.countGoodStrings(91, 95, 63, 21) == 0\nassert solution.countGoodStrings(44, 88, 9, 17) == 207\nassert solution.countGoodStrings(12, 98, 6, 11) == 6275\nassert solution.countGoodStrings(19, 62, 8, 11) == 145\nassert solution.countGoodStrings(53, 69, 40, 46) == 0\nassert solution.countGoodStrings(92, 94, 81, 55) == 0\nassert solution.countGoodStrings(41, 61, 34, 8) == 11\nassert solution.countGoodStrings(3, 31, 1, 3) == 269538\nassert solution.countGoodStrings(62, 82, 56, 50) == 0\nassert solution.countGoodStrings(58, 97, 50, 38) == 3\nassert solution.countGoodStrings(75, 97, 1, 35) == 5244\nassert solution.countGoodStrings(3, 81, 1, 2) == 692862589\nassert solution.countGoodStrings(64, 99, 12, 30) == 38\nassert solution.countGoodStrings(87, 96, 19, 65) == 1\nassert solution.countGoodStrings(63, 75, 47, 13) == 4\nassert solution.countGoodStrings(38, 71, 11, 37) == 12\nassert solution.countGoodStrings(52, 53, 15, 8) == 4\nassert solution.countGoodStrings(96, 100, 55, 31) == 0\nassert solution.countGoodStrings(50, 52, 25, 24) == 1\nassert solution.countGoodStrings(77, 100, 10, 12) == 703\nassert solution.countGoodStrings(98, 98, 88, 42) == 0\nassert solution.countGoodStrings(69, 85, 15, 38) == 6\nassert solution.countGoodStrings(75, 93, 59, 58) == 0\nassert solution.countGoodStrings(28, 99, 22, 17) == 44\nassert solution.countGoodStrings(35, 40, 27, 6) == 4",
  "inefficient_solution": "class Solution:\n    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:\n        mod = 10**9 + 7\n        dp = [0] * (high + 1)\n        dp[0] = 1\n        for i in range(1, high + 1):\n            if low <= i:\n                dp[i] = (dp[i] + dp[i - 1]) % mod\n            if i - zero >= 0:\n                dp[i] = (dp[i] + dp[i - zero]) % mod\n            if i - one >= 0:\n                dp[i] = (dp[i] + dp[i - one]) % mod\n        return sum(dp[low:]) % mod",
  "is_python": true
}