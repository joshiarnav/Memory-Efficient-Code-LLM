{
  "problem_idx": 2684,
  "task_name": "Maximum Number of Moves in a Grid",
  "markdown_description": "\nYou are given a **0-indexed** `m x n` matrix `grid` consisting of **positive** integers.\n\n\nYou can start at **any** cell in the first column of the matrix, and traverse the grid in the following way:\n\n\n* From a cell `(row, col)`, you can move to any of the cells: `(row - 1, col + 1)`, `(row, col + 1)` and `(row + 1, col + 1)` such that the value of the cell you move to, should be **strictly** bigger than the value of the current cell.\n\n\nReturn *the **maximum** number of **moves** that you can perform.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2600-2699/2684.Maximum%20Number%20of%20Moves%20in%20a%20Grid/images/yetgriddrawio-10.png)\n\n```\n\n**Input:** grid = [[2,4,3,5],[5,4,9,3],[3,4,2,11],[10,9,13,15]]\n**Output:** 3\n**Explanation:** We can start at the cell (0, 0) and make the following moves:\n- (0, 0) -> (0, 1).\n- (0, 1) -> (1, 2).\n- (1, 2) -> (2, 3).\nIt can be shown that it is the maximum number of moves that can be made.\n```\n\n**Example 2:**\n\n\n\n```\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2600-2699/2684.Maximum%20Number%20of%20Moves%20in%20a%20Grid/images/yetgrid4drawio.png)\n**Input:** grid = [[3,2,4],[2,1,9],[1,1,7]]\n**Output:** 0\n**Explanation:** Starting from any cell in the first column we cannot perform any moves.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `2 <= m, n <= 1000`\n* `4 <= m * n <= 105`\n* `1 <= grid[i][j] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxMoves(self, grid: List[List[int]]) -> int:\n        dirs = ((-1, 1), (0, 1), (1, 1))\n        m, n = len(grid), len(grid[0])\n        q = deque((i, 0) for i in range(m))\n        dist = [[0] * n for _ in range(m)]\n        ans = 0\n        while q:\n            i, j = q.popleft()\n            for a, b in dirs:\n                x, y = i + a, j + b\n                if (\n                    0 <= x < m\n                    and 0 <= y < n\n                    and grid[x][y] > grid[i][j]\n                    and dist[x][y] < dist[i][j] + 1\n                ):\n                    dist[x][y] = dist[i][j] + 1\n                    ans = max(ans, dist[x][y])\n                    q.append((x, y))\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\n\nclass Solution:\n    def maxMoves(self, grid: List[List[int]]) -> int:\n        dirs = ((-1, 1), (0, 1), (1, 1))\n        m, n = len(grid), len(grid[0])\n        q = deque((i, 0) for i in range(m))\n        dist = [[0] * n for _ in range(m)]\n        ans = 0\n        while q:\n            i, j = q.popleft()\n            for a, b in dirs:\n                x, y = i + a, j + b\n                if (\n                    0 <= x < m\n                    and 0 <= y < n\n                    and grid[x][y] > grid[i][j]\n                    and dist[x][y] < dist[i][j] + 1\n                ):\n                    dist[x][y] = dist[i][j] + 1\n                    ans = max(ans, dist[x][y])\n                    q.append((x, y))\n        return ans\n    \n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(2, 10)\n    n = random.randint(2, 10)\n    grid = [[random.randint(1, 10**6) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxMoves(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxMoves(grid) == expected_result\n        print(f\"assert solution.maxMoves({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxMoves({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxMoves([[682825, 701138, 207447, 524792, 32556, 428367, 998864], [99507, 486447, 127104, 910715, 842745, 383444, 75512], [13274, 674423, 836623, 633128, 668555, 735305, 238788], [600420, 913333, 292709, 329733, 887613, 211881, 393245], [108868, 725095, 783574, 794039, 428605, 570134, 87410], [532042, 329697, 616704, 633230, 18653, 866275, 332148], [785901, 415800, 51322, 537298, 111792, 686763, 893109], [671130, 670624, 792138, 644828, 373205, 690131, 537344], [38337, 704763, 39259, 531055, 588787, 404300, 718523]]) == 4\nassert solution.maxMoves([[82439, 915303, 106625, 301390, 454319, 723460, 33633], [481422, 451278, 658198, 188454, 534435, 524835, 848760]]) == 2\nassert solution.maxMoves([[903100, 395183, 416285, 831518, 170943, 507066, 966864, 699491, 391197, 644245], [381836, 9479, 247385, 487883, 405651, 593753, 268992, 549200, 312907, 649357], [243825, 390561, 193521, 192828, 343108, 586953, 229549, 296334, 139269, 899457], [421243, 976157, 964540, 643692, 404151, 639560, 477000, 259362, 12923, 966486], [121160, 698726, 608136, 973667, 836333, 607621, 288426, 220975, 298486, 184369], [519588, 678233, 65264, 507460, 60341, 478729, 503790, 848902, 981993, 983677], [568021, 593361, 182641, 627632, 21630, 416354, 527983, 837120, 492777, 339206]]) == 3\nassert solution.maxMoves([[865819, 194386, 391288, 939477, 120908], [363858, 585754, 618617, 71796, 511092], [311979, 346798, 710088, 768893, 270660], [124706, 280240, 434490, 62372, 226210], [966332, 55833, 676589, 457844, 47932]]) == 3\nassert solution.maxMoves([[396423, 518824, 711588, 558218, 827987, 426794, 537688, 359834], [130965, 702457, 92045, 917755, 148953, 503627, 96329, 919545], [561248, 297229, 171958, 972699, 717946, 609, 449616, 653379], [249856, 558145, 363987, 424435, 449928, 583487, 19094, 840460], [414864, 719009, 181343, 929509, 998218, 650989, 184360, 68296], [317573, 203996, 864994, 482617, 103665, 196750, 528656, 890927], [832838, 629734, 950874, 965998, 31, 171574, 970762, 77512], [973908, 279336, 223633, 997813, 883377, 997339, 846170, 556706], [765954, 838102, 79679, 633173, 504263, 253742, 570856, 400276], [731988, 596312, 500194, 487349, 767838, 754573, 285825, 564552]]) == 5\nassert solution.maxMoves([[454645, 519324, 233785, 36616, 671580, 573987, 319596, 631002, 515133], [244516, 332828, 821149, 166839, 402341, 286074, 362656, 74857, 887205], [871743, 537224, 997854, 107544, 783364, 532057, 327535, 9099, 834576]]) == 2\nassert solution.maxMoves([[462588, 954967, 182465, 123670, 884682, 960495, 755429, 579592, 106881, 143748], [940576, 258605, 958589, 631846, 716677, 852112, 700327, 422671, 90153, 11844], [8134, 939697, 735734, 257464, 28537, 58229, 631650, 631342, 205842, 789977], [749263, 774574, 415342, 485992, 337997, 75957, 118461, 617820, 89727, 251788], [880603, 529051, 12078, 845531, 602487, 356927, 166855, 219957, 471529, 991754]]) == 2\nassert solution.maxMoves([[179422, 666551, 501207, 448126, 794853, 974941, 689207, 828600, 840955], [708633, 573448, 543481, 490067, 147445, 733211, 135542, 827621, 491187]]) == 1\nassert solution.maxMoves([[498733, 971424, 415525, 33247, 782898, 372112, 224734, 845715, 568501, 931384], [323690, 993487, 443170, 901351, 661477, 951505, 982675, 35814, 220987, 791853], [984923, 703080, 510497, 68826, 996423, 694897, 84300, 782766, 75488, 901108], [778474, 296221, 160023, 358191, 419527, 530180, 602182, 172425, 777474, 660819], [37280, 933366, 699561, 482272, 798359, 250728, 638470, 465884, 259564, 65848], [655074, 748664, 160131, 662517, 798358, 200144, 881526, 949239, 583652, 461507], [182381, 707942, 986650, 633129, 531020, 579007, 975053, 168650, 899664, 244187], [304997, 280274, 736343, 71721, 715551, 865218, 239086, 890886, 517951, 65880], [954742, 344923, 701657, 91558, 877853, 865197, 178103, 19123, 916827, 406266]]) == 4\nassert solution.maxMoves([[133392, 142886, 819645, 21809, 530933, 162025, 140952, 382808], [481379, 356790, 757073, 662980, 560220, 655422, 244468, 313602], [960921, 688360, 442397, 45941, 99893, 138061, 183378, 960020], [545409, 703022, 16773, 916092, 508599, 109564, 26140, 224321], [308963, 478888, 94178, 249135, 973014, 555483, 970751, 418354]]) == 4\nassert solution.maxMoves([[929507, 608027, 219732, 590653, 2311, 666822, 734746], [318419, 986398, 363183, 211098, 772640, 837113, 426877]]) == 1\nassert solution.maxMoves([[755196, 958863, 674042, 577401, 544800, 209782, 460894, 976670, 737283], [858079, 152619, 628583, 136286, 964261, 815619, 888467, 523857, 396708], [202981, 303313, 546351, 40010, 616712, 734645, 831640, 522119, 94985], [731781, 803344, 686204, 780378, 386788, 165081, 985425, 74346, 22251], [919426, 807848, 385012, 112829, 130847, 307326, 12319, 220539, 630183], [1229, 443789, 205139, 956174, 35834, 755597, 345921, 568984, 429229]]) == 3\nassert solution.maxMoves([[938920, 266930, 183076, 355975, 534179], [728445, 408701, 890444, 357943, 834430], [591611, 886352, 59367, 983367, 686223], [705822, 953917, 148731, 182205, 259889], [321634, 686367, 885539, 374908, 853937]]) == 3\nassert solution.maxMoves([[63951, 513359, 400999, 852944, 595759, 926103], [411894, 351001, 266910, 463663, 542343, 541359], [262047, 139392, 884837, 300891, 203055, 431971], [877229, 31623, 797239, 456434, 177096, 197053], [682122, 795161, 691117, 45871, 188021, 50915]]) == 5\nassert solution.maxMoves([[864517, 683139, 709856, 170802, 666657, 590341, 646838], [552714, 808509, 813566, 689985, 12999, 496794, 724225], [381952, 792609, 539972, 935305, 3395, 686490, 880188], [497938, 964163, 22317, 50458, 286984, 41676, 857201], [945905, 683939, 842105, 498260, 125868, 512214, 148979], [625967, 152100, 884335, 481479, 440559, 987468, 611520], [940371, 736642, 97206, 633436, 711215, 660761, 833803]]) == 3\nassert solution.maxMoves([[633492, 512388], [290607, 455664], [807584, 284806], [693949, 829276], [972470, 78163], [475278, 394590], [780466, 151714]]) == 1\nassert solution.maxMoves([[799167, 721993, 26574, 918281], [463333, 493677, 13534, 368098]]) == 1\nassert solution.maxMoves([[955898, 663025, 830872, 750395, 149363, 772643, 964234, 668870, 453800, 602209], [55816, 53054, 539154, 385422, 152354, 254609, 788406, 275776, 920629, 985131], [86130, 447654, 352907, 769961, 517692, 538034, 256076, 234437, 405672, 997095], [46156, 107357, 728585, 836070, 538087, 185967, 760026, 971527, 706749, 999750], [713390, 546034, 155493, 613308, 291825, 755863, 12278, 383215, 576161, 104239], [894115, 871501, 620478, 587401, 346365, 944620, 130797, 738510, 995288, 521748], [977121, 141080, 373404, 575945, 47471, 498793, 969820, 188912, 715161, 997612]]) == 7\nassert solution.maxMoves([[468300, 342950, 585759, 1809, 418660], [987005, 597084, 678060, 147030, 343962], [731546, 283892, 746239, 527041, 404369], [414753, 655177, 819220, 762638, 812001], [706561, 982181, 772256, 359428, 896030], [626818, 479111, 173238, 930537, 124940], [950660, 352585, 248387, 241173, 572455], [137827, 123198, 700244, 119069, 112891], [874302, 61427, 211401, 910443, 844469]]) == 4\nassert solution.maxMoves([[396840, 302401, 276518, 261988, 44037], [220813, 147503, 296187, 227068, 536950], [557365, 749255, 253775, 864861, 462935], [314844, 744966, 855888, 96348, 868216], [261930, 830055, 998936, 635734, 731979]]) == 4\nassert solution.maxMoves([[659183, 652511, 453250, 883390, 366120, 677882, 930294], [487084, 597135, 959550, 731289, 257503, 87150, 424054], [697240, 372486, 419226, 449630, 317126, 79008, 995950], [361766, 387133, 532758, 292448, 781607, 400336, 230606], [84270, 706856, 655012, 238232, 665376, 476315, 836088], [382845, 440529, 584749, 276801, 734591, 467695, 707272], [512156, 42620, 101708, 428495, 523761, 410389, 535954], [185282, 641401, 251890, 348917, 833909, 86775, 956055], [100972, 750349, 322640, 805863, 403872, 416510, 37215]]) == 4\nassert solution.maxMoves([[956053, 755924, 48750, 123014], [753263, 834604, 544782, 819989], [707936, 428190, 213115, 613628], [457435, 949789, 357297, 780061], [282971, 17314, 255609, 705705], [253717, 594801, 908527, 381497]]) == 2\nassert solution.maxMoves([[844236, 73667, 657536, 451267, 42378], [879008, 114758, 555636, 985687, 582656], [309853, 922929, 727312, 920320, 959812], [512583, 523675, 916304, 319188, 182488]]) == 4\nassert solution.maxMoves([[813332, 799446, 956271, 686779, 166811, 483073, 890476], [282162, 415468, 895181, 439513, 879525, 718818, 716236], [819142, 394427, 975980, 307210, 287047, 343609, 576591], [210518, 807135, 196780, 170734, 775959, 637581, 456361]]) == 2\nassert solution.maxMoves([[671082, 604523, 975904, 576597, 895550, 191067, 69993, 906606, 203211], [794167, 746618, 76979, 674609, 550128, 593943, 296633, 163348, 137383], [928301, 837590, 8141, 598946, 127584, 41536, 785584, 914272, 685295], [309377, 408378, 157506, 112262, 380690, 427236, 222404, 460275, 466701], [372024, 696773, 648698, 924545, 559434, 913720, 165550, 455441, 813594], [208157, 479144, 109342, 799242, 913942, 113261, 723664, 822014, 995471], [642393, 152758, 801007, 442452, 203062, 134094, 235586, 664759, 308785], [694914, 134864, 717796, 142931, 580261, 949770, 885859, 664731, 370280], [713877, 927828, 942758, 879410, 111592, 895478, 676005, 34885, 171587], [974666, 365428, 124651, 106094, 848112, 800606, 199270, 708287, 906518]]) == 4\nassert solution.maxMoves([[165354, 411491, 191524, 635657, 718988], [949774, 960381, 530151, 21275, 363730], [34357, 359585, 889564, 4308, 810388], [53278, 143216, 282289, 746717, 711412]]) == 4\nassert solution.maxMoves([[392399, 201243, 968152, 706716, 611570, 157565], [316955, 276996, 682012, 354508, 809653, 706251], [954072, 465417, 481207, 337181, 677924, 341827]]) == 4\nassert solution.maxMoves([[422736, 895883], [834994, 228595], [179035, 538946], [4746, 306546], [227376, 885958], [612645, 533403]]) == 1\nassert solution.maxMoves([[260959, 265427, 416304, 504615, 609832, 835395, 972742, 590129, 604450], [859524, 357526, 689912, 313317, 627125, 835465, 422085, 686485, 112611], [596370, 315206, 551011, 798007, 526268, 185379, 147993, 517103, 356885], [801090, 59961, 324759, 230226, 999703, 146792, 359142, 564365, 953700], [583132, 928063, 317909, 121617, 21308, 283008, 396408, 560737, 909674], [726304, 817488, 62297, 623691, 305343, 397397, 253425, 81110, 904653], [353259, 518618, 148745, 785787, 369712, 665025, 632422, 145167, 480390], [79726, 784793, 871975, 503843, 891388, 366980, 525773, 434972, 118021], [239231, 623035, 148394, 914936, 435390, 735601, 440439, 617784, 349134], [482528, 751095, 270210, 40949, 800669, 479424, 680413, 67296, 277411]]) == 6\nassert solution.maxMoves([[106009, 498536, 757856], [274301, 386589, 38362], [183855, 715850, 449393], [647488, 356870, 731464], [493957, 687073, 461024], [151205, 818583, 549837], [533408, 504212, 681916]]) == 2\nassert solution.maxMoves([[82636, 812295, 621058, 199956, 959227, 349672, 303490, 284305], [648964, 705146, 573292, 220762, 424158, 873257, 419399, 337938], [675332, 86060, 913750, 594840, 856726, 153792, 189674, 369583]]) == 2\nassert solution.maxMoves([[44761, 768064, 214963, 327575, 945527, 611572, 562412, 212067, 602327, 659218], [157384, 841351, 681965, 672082, 424712, 352767, 60324, 930310, 487235, 130542]]) == 1\nassert solution.maxMoves([[611130, 915786, 908857], [380585, 808413, 898775], [524267, 929254, 386452], [140732, 976638, 590700], [605075, 765909, 902113], [405958, 235453, 402857]]) == 2\nassert solution.maxMoves([[184719, 701277, 118692, 80239, 723458, 400569, 823396, 407881, 880890], [441577, 351430, 875131, 5229, 484479, 833894, 887052, 622002, 729308], [660185, 331752, 502809, 8629, 54319, 952298, 93699, 580273, 528956], [976101, 538476, 799031, 980290, 91167, 843242, 548099, 465758, 50591], [542485, 112572, 932916, 347955, 866521, 815979, 874695, 248512, 428941], [6350, 590027, 5565, 386308, 176565, 51693, 591131, 830167, 106012], [385240, 581636, 398495, 772155, 61572, 972153, 37546, 116663, 101652], [453844, 409813, 914132, 45851, 382868, 573030, 718784, 883992, 797492], [87978, 414525, 924384, 285976, 879838, 548171, 87749, 692562, 48572]]) == 3\nassert solution.maxMoves([[871758, 78771], [452136, 534123], [123128, 899799], [90162, 340790]]) == 1\nassert solution.maxMoves([[745152, 835859, 72655], [93203, 892389, 127388], [169038, 227405, 616547], [13909, 546728, 634258], [285088, 350632, 697751], [184691, 574881, 86122], [563000, 998359, 674288], [108955, 559581, 505988], [536677, 246235, 912464]]) == 2\nassert solution.maxMoves([[867343, 227207, 434906, 430759], [762909, 848800, 43968, 669427], [84923, 62610, 830564, 987257], [37586, 513337, 975538, 375258], [549805, 55649, 510387, 653501], [895630, 640251, 515529, 209777]]) == 3\nassert solution.maxMoves([[447301, 184661, 821847, 997246, 727877, 96348, 531645, 518784, 710280, 838304], [198219, 829042, 979753, 602276, 258825, 364549, 976787, 296665, 348286, 473427], [603559, 272391, 254960, 495061, 179548, 62365, 97943, 990248, 638795, 767883], [310919, 586159, 557820, 10057, 416803, 195353, 837070, 229819, 415500, 838133], [103263, 703132, 10708, 876819, 631144, 805792, 408650, 17624, 642507, 242164], [116079, 355063, 601285, 248383, 90070, 576185, 713030, 756006, 242519, 325190], [544405, 957804, 100430, 151414, 714112, 688742, 87039, 169226, 164410, 963801], [799619, 749593, 705576, 638821, 527224, 484075, 354151, 604745, 250635, 332666], [981851, 946305, 153226, 68315, 317985, 729804, 509300, 996614, 715457, 10332]]) == 3\nassert solution.maxMoves([[297264, 650239], [765538, 760439], [670501, 906770], [935260, 172865], [425846, 181813]]) == 1\nassert solution.maxMoves([[560949, 899684], [932753, 59552], [331270, 501438], [386799, 848030], [275963, 629995], [493312, 812069], [479928, 823103], [875966, 17308], [245829, 464924], [596669, 881614]]) == 1\nassert solution.maxMoves([[653668, 172451, 911030, 703065, 464702, 744112], [582425, 382864, 189091, 395964, 965312, 407084], [536109, 794085, 71657, 486636, 394461, 806541], [978863, 508974, 995716, 99869, 324231, 617050], [446732, 268589, 93198, 619900, 656855, 510149], [739102, 441244, 716874, 922629, 957478, 621991], [367737, 459480, 577295, 382291, 243756, 226801], [905439, 903002, 589510, 29524, 531361, 855343], [906139, 391993, 224873, 278443, 539184, 302958]]) == 4\nassert solution.maxMoves([[338274, 87134, 265577, 414559, 660377, 739278, 13586, 870463, 494648, 679170], [554168, 320228, 521995, 668430, 989234, 700846, 47001, 384152, 994026, 91156], [447426, 784130, 76662, 532386, 417078, 766976, 194403, 78083, 603468, 154235], [619353, 174811, 190705, 558551, 569565, 886811, 447494, 341454, 931317, 583151], [37183, 305998, 717933, 81984, 171809, 183784, 816405, 790764, 613609, 753266], [638398, 598680, 381119, 391863, 931865, 166375, 362213, 156748, 740742, 600271], [226963, 298243, 964774, 80389, 56224, 489998, 54413, 821867, 901569, 564322]]) == 5\nassert solution.maxMoves([[205359, 647637, 387472, 109685, 101583, 177523, 673072, 404822, 320549, 848564], [489428, 269070, 572070, 432750, 222379, 115956, 575790, 250120, 688563, 295876], [963211, 305540, 796334, 311896, 209031, 438511, 314691, 212954, 160411, 609125], [345525, 197318, 38241, 125593, 188187, 977305, 930540, 860200, 98894, 458522], [703687, 735298, 179401, 301212, 693713, 740270, 107774, 790661, 129656, 978025], [188864, 777493, 782607, 655305, 531379, 232722, 971449, 363932, 223034, 655896]]) == 3\nassert solution.maxMoves([[821711, 153575, 150900, 755315, 149734, 366855, 527499, 444429], [138024, 865548, 519386, 557272, 976784, 948891, 163378, 799157]]) == 4\nassert solution.maxMoves([[794737, 653894, 987441, 459533, 509647, 999101, 947240], [188190, 997662, 936008, 103884, 668234, 831588, 576873], [87115, 948194, 936269, 468545, 787146, 139789, 953668], [683344, 643891, 128664, 102519, 659992, 204990, 228156], [362032, 776998, 386836, 841879, 47642, 334796, 342935], [585903, 499278, 715313, 31774, 147252, 588993, 70611], [758021, 589577, 761699, 774516, 588745, 769751, 539475]]) == 3\nassert solution.maxMoves([[844581, 844812, 363379, 242399, 833306, 152157], [271683, 741417, 758066, 249129, 636682, 814263], [848644, 926839, 405949, 751220, 286775, 83436], [692646, 918482, 931105, 11636, 772595, 176367], [910027, 322484, 520149, 667899, 947257, 878512]]) == 2\nassert solution.maxMoves([[834156, 4753, 283160, 829856, 681190, 452949, 526874, 622620, 214436, 136578], [911305, 992440, 862559, 227929, 179960, 478858, 703215, 68274, 858989, 612396], [37148, 729754, 173124, 712590, 379359, 137851, 903984, 479552, 963610, 293633], [779874, 343139, 697800, 876702, 345928, 918470, 721733, 485904, 912439, 199168], [650359, 198309, 689989, 455909, 820396, 359715, 502789, 190597, 333082, 970913], [64478, 83308, 102853, 985357, 27119, 111597, 304770, 68771, 869321, 779012], [406498, 486452, 744790, 365135, 697800, 659427, 39992, 64659, 944068, 332422]]) == 5\nassert solution.maxMoves([[349699, 633904, 365884], [783311, 194582, 544153], [737537, 930741, 240196], [829258, 763333, 417702], [227406, 21063, 448768], [922789, 989808, 997661], [84709, 471317, 824012], [110605, 536765, 735123]]) == 2\nassert solution.maxMoves([[296581, 853068, 488660, 562513, 900742, 34985, 49008, 898605, 349180], [238410, 614669, 339228, 757643, 956000, 48507, 687267, 291324, 704590], [452489, 553884, 723811, 913298, 722709, 583508, 689801, 891639, 710124], [783451, 186008, 730325, 430687, 285114, 962364, 287902, 210665, 166246], [598971, 995741, 727896, 435276, 460704, 331362, 842748, 153298, 760027], [717930, 526995, 481726, 676928, 598945, 992928, 781818, 685795, 557219], [183160, 852916, 38856, 663106, 792835, 19801, 949198, 252709, 379005], [514300, 63387, 411242, 682665, 104050, 597052, 807491, 348967, 10492]]) == 4\nassert solution.maxMoves([[324135, 510228, 614861, 586958, 794387], [924100, 418812, 259225, 348413, 175145], [354613, 334595, 586453, 731181, 162639], [407988, 181277, 197110, 642188, 952118], [294970, 602539, 268600, 539749, 817997], [672920, 480229, 974890, 109358, 883866], [348917, 366853, 592494, 383096, 87182], [31011, 101710, 958239, 694890, 989242]]) == 4\nassert solution.maxMoves([[301347, 260089, 490045, 71413, 787736, 267394, 537247, 705505, 237188], [276299, 764820, 891686, 530861, 901728, 761068, 547518, 271729, 230784], [898430, 602305, 88988, 543898, 382235, 981276, 193666, 872000, 106434], [780825, 490094, 487718, 113406, 457418, 562894, 727214, 183934, 563231], [847593, 474051, 500298, 582654, 829624, 394008, 112918, 793202, 191057], [994986, 263057, 629494, 986771, 246997, 437033, 663040, 822458, 558445], [19455, 461383, 303658, 17835, 770892, 326297, 341258, 137430, 987790], [683370, 54818, 541303, 478469, 428293, 987152, 163784, 742768, 847569]]) == 5\nassert solution.maxMoves([[281615, 45768], [490102, 342105], [597262, 49244]]) == 1\nassert solution.maxMoves([[615864, 721532, 928492], [634177, 802905, 758764], [797491, 321116, 389778], [453861, 123025, 202979]]) == 2\nassert solution.maxMoves([[841765, 157240, 18026, 776244, 909524], [468972, 990100, 911399, 572069, 284609], [951939, 231043, 109876, 548756, 109575], [948914, 54185, 359645, 571630, 128140], [300285, 198970, 874751, 173077, 80991], [514569, 690324, 720083, 158510, 111811], [912868, 540984, 147781, 667518, 466165], [462729, 419162, 886164, 442180, 995010], [527014, 640081, 126956, 183838, 30613], [858974, 731766, 53445, 641717, 924068]]) == 2\nassert solution.maxMoves([[387752, 111392, 583659, 589030, 51103, 457501, 346990, 35030], [778010, 376619, 251557, 278392, 625833, 353017, 36690, 757426], [762632, 93921, 455190, 737479, 727395, 985365, 166562, 192579]]) == 0\nassert solution.maxMoves([[190288, 13489], [766384, 195863], [757317, 968484], [299877, 995936], [603495, 51624]]) == 1\nassert solution.maxMoves([[794684, 485913, 990602, 163783, 927038, 766886], [337566, 269517, 249233, 29217, 316756, 183547], [270453, 775143, 810521, 316061, 577271, 335258], [962471, 114526, 271521, 657041, 239020, 182364], [135530, 991321, 812447, 568863, 703877, 253912], [709174, 379259, 87357, 903473, 850408, 303300], [831790, 100974, 774857, 359759, 539713, 996553], [775572, 333672, 866321, 442051, 51223, 178275]]) == 3\nassert solution.maxMoves([[497150, 332489], [329252, 456234], [24673, 970566], [800825, 374650], [473754, 986434], [926428, 738526], [615485, 841559], [218547, 296378]]) == 1\nassert solution.maxMoves([[414431, 350344, 948332, 962113, 95146, 452760, 192456, 316621, 383676], [5002, 303254, 770999, 323481, 327784, 532561, 447288, 936720, 897418], [794825, 926664, 101995, 166260, 34376, 897699, 83736, 519820, 116320]]) == 3\nassert solution.maxMoves([[954286, 647679, 946431, 534437, 511286, 23394, 45183, 422049], [745362, 638067, 18445, 401792, 551664, 449925, 936682, 857085], [745850, 131135, 681470, 884051, 208883, 249817, 351909, 803313], [188575, 514778, 423481, 490816, 400034, 815100, 79880, 499859], [498233, 101817, 901189, 176219, 407770, 533150, 403572, 721598], [711104, 63552, 109916, 406053, 839990, 176905, 553628, 25361], [313998, 47947, 413528, 417758, 869084, 811716, 814589, 113752], [13427, 605057, 914644, 223220, 522093, 804713, 879763, 547890], [39296, 875323, 379304, 464123, 396394, 794170, 641078, 642312], [446471, 61202, 362829, 288162, 692145, 99790, 260524, 841039]]) == 7\nassert solution.maxMoves([[136581, 611653, 561298, 827630], [997929, 194405, 304535, 742831], [926953, 493832, 792428, 660604], [180744, 736101, 574961, 244329], [674223, 47166, 698432, 77696], [989064, 240785, 662542, 105758], [139525, 446372, 216636, 843445]]) == 3\nassert solution.maxMoves([[129040, 829978, 230009, 361466], [648617, 467989, 203690, 661877]]) == 1\nassert solution.maxMoves([[17994, 930064, 515355], [390627, 510428, 319878]]) == 2\nassert solution.maxMoves([[762782, 647108, 972393, 419789], [901491, 353455, 524387, 597757], [610628, 146706, 145204, 803870], [470624, 707221, 665819, 832987], [324852, 312598, 17849, 776856], [820829, 575654, 805088, 749501], [968654, 952601, 443519, 70393], [355652, 401182, 748042, 158106]]) == 3\nassert solution.maxMoves([[535534, 793431], [378718, 162501], [311107, 832204], [392525, 21210], [342461, 853341], [776916, 941505]]) == 1\nassert solution.maxMoves([[958262, 510028, 426545, 299642, 925827, 84999, 659753], [89396, 324398, 584628, 271141, 817287, 316078, 49854], [285919, 578755, 212892, 575680, 508077, 230899, 556328], [463823, 40949, 246563, 613825, 764576, 534464, 241198], [53057, 427951, 279441, 504600, 703686, 76202, 707461], [362167, 222340, 592358, 750872, 914547, 105602, 380629], [55231, 227383, 97529, 399919, 73990, 176470, 932099]]) == 4\nassert solution.maxMoves([[583124, 923903, 636805, 139963, 79752, 805127], [247271, 834298, 443239, 815377, 241701, 200534], [460557, 52548, 893859, 673418, 336128, 24223], [817325, 644570, 410621, 147131, 782415, 813021], [823418, 633749, 741646, 426326, 206423, 486936], [382883, 370256, 387494, 554664, 585034, 930661]]) == 2\nassert solution.maxMoves([[296143, 533731, 16611], [242383, 826742, 441217], [258807, 663482, 44660], [560922, 598618, 179466], [256491, 873993, 593051], [846586, 497488, 185703]]) == 2\nassert solution.maxMoves([[789050, 939608, 101393, 131172, 701708, 217665, 92283, 411871], [823782, 840013, 19251, 805075, 115667, 513929, 930454, 800174], [820936, 329868, 121495, 303860, 651608, 957761, 87224, 239409], [516956, 879404, 2766, 57154, 266942, 429593, 29126, 165651], [656720, 4102, 455247, 643013, 671444, 713718, 753337, 728882]]) == 1\nassert solution.maxMoves([[776401, 902391, 344692, 501745, 191097, 706628, 628673, 770494, 435632], [175760, 846311, 940656, 996720, 895980, 485288, 271081, 492837, 248632], [912799, 394350, 440760, 768607, 723353, 312732, 422874, 616120, 625123], [127067, 969931, 339603, 753593, 339139, 522948, 287249, 32503, 199761], [99767, 997509, 567436, 970698, 504502, 5248, 861866, 910794, 132654], [864094, 84807, 737791, 965882, 427900, 257756, 749121, 542665, 438886], [111197, 61274, 98527, 73589, 113458, 515912, 559600, 163871, 395878], [296484, 230144, 798739, 854505, 329254, 567462, 937434, 333474, 554051], [563808, 555678, 284192, 811833, 357642, 126734, 587906, 555388, 429085]]) == 4\nassert solution.maxMoves([[570450, 128381, 662862, 201556], [982912, 328705, 361519, 534464], [402999, 786659, 749887, 880197], [559864, 831944, 381916, 67790]]) == 1\nassert solution.maxMoves([[967738, 922370, 684944, 341076, 427560, 487772, 522616, 471032], [752937, 276992, 879431, 688701, 223805, 296899, 215533, 530721], [535515, 977, 62964, 618590, 59385, 435158, 344430, 529938], [141827, 447132, 626083, 871443, 983936, 735233, 646311, 840969], [824132, 218951, 266400, 659335, 569267, 211617, 482951, 542352], [327576, 309041, 752397, 271238, 959030, 660658, 526835, 77338], [42232, 370254, 729806, 510837, 820995, 185881, 756635, 220430], [119689, 904569, 115097, 42534, 210883, 578069, 994915, 364122]]) == 6\nassert solution.maxMoves([[681146, 311011], [5364, 500580]]) == 1\nassert solution.maxMoves([[234950, 608400, 884961, 426685, 468906], [919783, 394012, 588971, 354531, 511705], [354206, 342089, 727525, 564862, 397952], [367837, 462840, 406481, 999480, 498913], [343106, 975497, 313708, 493246, 992053], [56174, 86206, 786079, 865539, 789640], [458422, 739797, 730740, 482371, 982736], [153864, 205939, 893767, 914049, 444123], [289023, 65178, 810737, 924665, 597331]]) == 4\nassert solution.maxMoves([[555500, 195391, 844352, 294122, 386587, 451900, 747549], [233856, 265319, 94463, 319847, 392914, 422703, 269576], [551555, 466847, 582763, 270884, 504311, 111950, 861326], [459651, 599244, 558713, 743163, 414786, 159842, 606121], [75571, 629182, 474452, 825260, 459377, 662101, 612908], [721616, 399396, 176949, 717998, 738690, 317140, 816269], [319070, 611586, 448280, 575967, 315326, 66557, 656368]]) == 4\nassert solution.maxMoves([[43205, 934835, 298426, 831457, 422480, 149240, 728851, 401378, 118273, 458560], [461104, 42950, 392221, 88357, 394122, 74939, 110357, 46928, 852712, 524984], [863500, 686125, 673905, 246815, 876328, 386421, 746933, 605190, 709121, 474964]]) == 1\nassert solution.maxMoves([[498551, 679753, 764973, 985284, 918021, 537486, 813864, 432643, 813888, 96750], [184881, 64095, 640831, 748208, 242765, 896135, 202357, 241473, 392481, 498388]]) == 3\nassert solution.maxMoves([[569010, 222621, 575963, 648770, 290883, 485700, 453224, 860635], [544410, 167726, 892744, 507109, 39155, 623767, 185780, 61732], [200086, 252817, 556005, 718431, 267732, 491978, 835524, 717542], [813606, 602999, 258038, 282593, 812314, 904542, 471456, 299139], [274854, 853815, 171984, 261306, 45791, 852101, 47453, 236025]]) == 5\nassert solution.maxMoves([[760841, 765887, 188763, 355641, 669730], [604487, 422500, 537142, 393144, 528280], [614057, 89056, 571524, 867821, 319504], [967775, 368953, 752189, 635138, 589388]]) == 1\nassert solution.maxMoves([[945322, 747949, 832190, 373599], [819974, 251288, 934298, 465776], [902385, 955799, 197473, 429989], [26036, 706146, 757223, 916623], [113860, 386288, 488609, 536084], [595907, 479771, 312322, 305638], [788003, 536386, 292260, 272370], [177307, 404279, 205258, 233519], [290229, 910229, 699998, 716209]]) == 3\nassert solution.maxMoves([[544071, 714761, 256038], [110655, 16531, 381671], [48987, 921390, 329568], [686994, 685139, 975750], [316462, 876490, 923465], [8763, 623916, 292467]]) == 2\nassert solution.maxMoves([[358250, 442165, 955152, 472648, 796545, 17358, 120763], [752333, 425515, 441514, 370648, 855540, 297539, 436656], [748485, 452962, 134990, 265787, 939549, 712443, 474913], [337055, 494736, 77444, 346307, 996508, 890194, 409337], [11926, 232762, 665081, 93848, 299505, 62398, 233282], [569114, 881322, 488289, 26376, 784403, 40068, 999645]]) == 4\nassert solution.maxMoves([[41265, 310415, 23273, 690125, 864652, 568038], [826532, 657224, 360653, 376518, 599244, 335050], [728056, 241645, 673706, 706161, 809862, 619662], [180204, 892436, 670729, 74783, 465983, 723439]]) == 5\nassert solution.maxMoves([[894450, 822023, 567186, 787540, 619639], [534009, 620467, 693140, 160890, 902540], [496966, 282315, 927558, 259049, 545002], [40782, 148179, 754706, 802613, 393172], [203757, 272873, 581387, 212461, 201318], [510011, 364965, 378347, 598493, 792074], [701038, 274734, 86567, 359730, 572193], [690731, 835425, 247350, 141694, 189688], [623549, 26417, 821409, 889107, 692713], [628836, 46007, 927531, 7120, 686015]]) == 4\nassert solution.maxMoves([[305805, 640054, 594425, 723149, 716787, 381126, 629273, 233217, 445270], [461005, 33218, 851757, 633579, 483790, 751154, 226340, 911650, 765541], [954405, 421305, 673815, 510113, 77260, 269927, 282926, 803311, 630841], [451724, 542646, 447327, 584696, 634674, 134452, 961528, 426524, 324189]]) == 2\nassert solution.maxMoves([[992797, 912578, 80127, 234994, 525768], [950199, 872232, 373641, 858344, 2511], [461087, 181048, 190363, 804702, 665762], [136000, 290864, 660968, 912402, 887714], [627784, 124549, 27218, 854220, 924925]]) == 4\nassert solution.maxMoves([[781894, 366161, 848630, 889368, 570064, 476513, 949722, 882126, 716323, 677018], [755122, 780344, 843548, 903307, 133199, 46555, 743404, 11586, 472778, 866278]]) == 3\nassert solution.maxMoves([[755494, 422355, 947492], [438166, 157785, 377545], [231000, 867150, 494432], [81128, 785947, 559178], [752944, 696476, 387159], [984874, 366157, 948394]]) == 2\nassert solution.maxMoves([[627556, 668056, 349373, 664569, 5653, 92941], [173665, 893501, 969350, 345070, 666660, 281202], [990439, 596886, 412631, 909851, 456031, 191289]]) == 2\nassert solution.maxMoves([[206601, 431855, 99657, 132612, 684396, 135130, 895296, 798887, 788585, 587343], [893894, 794568, 662222, 78187, 690867, 869036, 921419, 190950, 668989, 822800], [861259, 203964, 336002, 809930, 830344, 842296, 139297, 293866, 569128, 702249], [280329, 954395, 979324, 526759, 760590, 148776, 679812, 654923, 343034, 695669], [457478, 988889, 478519, 630672, 435963, 781793, 72502, 621100, 379814, 957689], [811140, 271231, 896748, 67909, 272046, 920624, 661474, 685125, 97980, 906497], [99527, 148750, 513196, 516540, 109639, 379620, 884144, 144073, 477810, 536435], [685813, 476636, 11934, 441925, 838253, 662899, 514515, 694529, 606101, 447215]]) == 6\nassert solution.maxMoves([[176164, 814103, 155665, 652536, 418908, 32178, 917923, 933079, 536457], [533235, 620641, 814671, 48090, 442459, 87938, 837500, 505148, 854879]]) == 2\nassert solution.maxMoves([[14166, 258662, 889515, 329338, 418303, 452153], [286202, 887902, 463511, 300621, 392081, 886850]]) == 2\nassert solution.maxMoves([[733312, 448054, 803709, 186391, 307267, 275465, 564990, 594475], [243235, 632571, 288373, 63775, 390710, 731336, 493616, 835122]]) == 2\nassert solution.maxMoves([[807281, 968452, 321528, 813872, 135389, 142074], [412650, 394526, 25301, 158403, 250931, 586733], [488908, 560959, 42090, 742364, 65817, 976393], [876893, 126225, 646213, 675929, 902220, 605719], [38166, 830336, 444525, 31734, 112710, 840538], [794855, 659906, 475516, 536777, 375596, 212146], [286450, 625758, 643888, 966649, 829551, 617104], [90724, 184121, 44806, 858283, 564643, 481513], [854535, 444926, 470463, 361145, 201999, 394970], [312748, 824830, 176423, 433671, 800535, 201280]]) == 5\nassert solution.maxMoves([[442032, 239204, 226573, 546072, 782760, 440087, 763790, 209449, 81140], [486870, 902701, 119005, 75020, 128980, 42362, 5315, 935315, 642508], [714052, 157542, 611526, 282912, 545047, 749872, 660644, 318721, 761175], [467573, 919915, 653461, 813833, 457583, 969385, 559221, 339047, 741522], [998089, 856938, 204462, 714880, 708850, 450006, 365421, 857515, 994198], [166981, 711222, 577483, 504362, 963916, 873176, 847148, 77493, 216597], [340920, 183175, 651857, 206340, 630324, 71268, 577222, 928043, 473678]]) == 4\nassert solution.maxMoves([[909218, 151917, 213040, 849116], [777790, 947069, 711477, 235890], [164438, 507099, 867474, 227482], [856596, 695608, 626540, 337208], [641642, 697702, 996535, 665921], [221870, 825234, 965879, 173863], [412429, 906236, 748696, 558282], [387713, 671549, 53543, 916494]]) == 3\nassert solution.maxMoves([[149443, 739125, 950729, 383083, 43528, 61477], [640153, 800942, 172411, 997277, 571307, 608961]]) == 3\nassert solution.maxMoves([[60869, 614490, 435569, 758455], [700841, 234373, 762670, 158755], [392892, 578074, 966310, 443801], [102977, 628376, 449566, 746807], [110555, 345785, 362423, 73195], [589157, 736339, 279324, 711982], [41528, 630880, 344985, 837788], [499910, 394755, 512026, 363335], [50271, 549079, 852779, 806237], [353645, 978364, 158476, 738693]]) == 3\nassert solution.maxMoves([[878610, 136555, 703547, 761131, 380166], [574569, 787860, 583448, 410765, 966747], [102068, 906676, 294089, 863686, 572851], [997630, 979943, 971392, 761061, 124202]]) == 2\nassert solution.maxMoves([[570498, 778727, 165357], [30315, 704504, 359163], [315814, 65264, 483054], [581010, 780469, 330746]]) == 2",
  "inefficient_solution": "class Solution:\n    def maxMoves(self, grid):\n        dirs = ((-1, 1), (0, 1), (1, 1))\n        m, n = len(grid), len(grid[0])\n        q = []\n        for i in range(m):\n            for j in range(n):\n                q.append((i, j))\n        dist = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dist[i][j] = -1\n        ans = 0\n        while q:\n            i, j = q.pop(0)\n            for a, b in dirs:\n                x, y = i + a, j + b\n                if (\n                    0 <= x < m\n                    and 0 <= y < n\n                    and grid[x][y] > grid[i][j]\n                    and dist[x][y] < dist[i][j] + 1\n                ):\n                    dist[x][y] = dist[i][j] + 1\n                    for k in range(x - 1, x + 2):\n                        if 0 <= k < m:\n                            q.append((k, y))\n                    for k in range(y - 1, y + 2):\n                        if 0 <= k < n:\n                            q.append((x, k))\n                    ans = max(ans, dist[x][y])\n        return ans",
  "is_python": true
}