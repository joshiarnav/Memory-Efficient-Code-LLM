{
  "problem_idx": 2808,
  "task_name": "Minimum Seconds to Equalize a Circular Array",
  "markdown_description": "\nYou are given a **0-indexed** array `nums` containing `n` integers.\n\n\nAt each second, you perform the following operation on the array:\n\n\n* For every index `i` in the range `[0, n - 1]`, replace `nums[i]` with either `nums[i]`, `nums[(i - 1 + n) % n]`, or `nums[(i + 1) % n]`.\n\n\n**Note** that all the elements get replaced simultaneously.\n\n\nReturn *the **minimum** number of seconds needed to make all elements in the array* `nums` *equal*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,2]\n**Output:** 1\n**Explanation:** We can equalize the array in 1 second in the following way:\n- At 1st second, replace values at each index with [nums[3],nums[1],nums[3],nums[3]]. After replacement, nums = [2,2,2,2].\nIt can be proven that 1 second is the minimum amount of seconds needed for equalizing the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,3,2]\n**Output:** 2\n**Explanation:** We can equalize the array in 2 seconds in the following way:\n- At 1st second, replace values at each index with [nums[0],nums[2],nums[2],nums[2],nums[3]]. After replacement, nums = [2,3,3,3,3].\n- At 2nd second, replace values at each index with [nums[1],nums[1],nums[2],nums[3],nums[4]]. After replacement, nums = [3,3,3,3,3].\nIt can be proven that 2 seconds is the minimum amount of seconds needed for equalizing the array.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,5,5,5]\n**Output:** 0\n**Explanation:** We don't need to perform any operations as all elements in the initial array are the same.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -> int:\n        d = defaultdict(list)\n        for i, x in enumerate(nums):\n            d[x].append(i)\n        ans = inf\n        n = len(nums)\n        for idx in d.values():\n            t = idx[0] + n - idx[-1]\n            for i, j in pairwise(idx):\n                t = max(t, j - i)\n            ans = min(ans, t // 2)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumSeconds(self, nums):\n        d = defaultdict(list)\n        for i, x in enumerate(nums):\n            d[x].append(i)\n        ans = inf\n        n = len(nums)\n        for idx in d.values():\n            t = idx[0] + n - idx[-1]\n            for i, j in pairwise(idx):\n                t = max(t, j - i)\n            ans = min(ans, t // 2)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 11), random.randint(4, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumSeconds(nums)\n\n    return nums, expected_result\n\ndef pairwise(iterable):\n    a, b = itertools.tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumSeconds(nums) == expected_result\n        if len(nums) != 0:\n            print(f\"assert solution.minimumSeconds({nums}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.minimumSeconds({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumSeconds([3, 1, 7, 6, 10, 8, 4, 9, 5, 2]) == 5\nassert solution.minimumSeconds([2, 3, 8, 5, 10, 9, 4]) == 3\nassert solution.minimumSeconds([10, 6, 5, 7, 2, 9]) == 3\nassert solution.minimumSeconds([1, 2, 10, 3, 5, 6, 4, 8, 9]) == 4\nassert solution.minimumSeconds([9, 2, 8, 6]) == 2\nassert solution.minimumSeconds([3, 1, 2, 4, 7]) == 2\nassert solution.minimumSeconds([5, 7, 1, 4, 10, 2, 3]) == 3\nassert solution.minimumSeconds([6, 2, 5, 9]) == 2\nassert solution.minimumSeconds([1, 5, 10, 8, 9, 2, 4, 7, 3, 6]) == 5\nassert solution.minimumSeconds([6, 5, 4, 3, 8, 2, 1, 9, 7, 10]) == 5\nassert solution.minimumSeconds([5, 7, 6, 4, 9, 1, 8]) == 3\nassert solution.minimumSeconds([4, 7, 1, 3, 6, 10, 2]) == 3\nassert solution.minimumSeconds([10, 6, 1, 4, 5, 2]) == 3\nassert solution.minimumSeconds([6, 4, 3, 2]) == 2\nassert solution.minimumSeconds([10, 8, 7, 4, 6, 5, 9, 3, 2]) == 4\nassert solution.minimumSeconds([10, 6, 5, 4, 3, 2, 9, 8, 7, 1]) == 5\nassert solution.minimumSeconds([1, 8, 6, 7, 2, 10, 3, 9]) == 4\nassert solution.minimumSeconds([6, 5, 9, 1, 7, 2, 4, 10]) == 4\nassert solution.minimumSeconds([9, 3, 1, 5, 8, 7]) == 3\nassert solution.minimumSeconds([2, 6, 9, 8]) == 2\nassert solution.minimumSeconds([6, 9, 7, 4, 1, 8]) == 3\nassert solution.minimumSeconds([9, 5, 3, 6, 10, 4]) == 3\nassert solution.minimumSeconds([3, 6, 5, 8, 9, 4, 1, 2, 7, 10]) == 5\nassert solution.minimumSeconds([3, 6, 5, 8, 7, 4]) == 3\nassert solution.minimumSeconds([5, 10, 8, 7, 3, 1, 6, 2, 9]) == 4\nassert solution.minimumSeconds([8, 4, 1, 6, 3, 9, 5, 10, 2]) == 4\nassert solution.minimumSeconds([3, 8, 1, 9, 5, 4, 6, 10, 7]) == 4\nassert solution.minimumSeconds([6, 5, 1, 3, 9, 2, 8]) == 3\nassert solution.minimumSeconds([2, 1, 8, 6, 10, 4]) == 3\nassert solution.minimumSeconds([6, 3, 4, 2, 7, 9, 10]) == 3\nassert solution.minimumSeconds([4, 10, 6, 5, 7, 9, 3, 2]) == 4\nassert solution.minimumSeconds([7, 9, 1, 4, 8]) == 2\nassert solution.minimumSeconds([6, 5, 10, 9, 8, 4, 2, 3, 7, 1]) == 5\nassert solution.minimumSeconds([1, 5, 7, 2, 3, 6, 4, 10]) == 4\nassert solution.minimumSeconds([1, 9, 3, 4, 7, 10, 5]) == 3\nassert solution.minimumSeconds([5, 10, 7, 9, 2, 6, 8, 1, 4, 3]) == 5\nassert solution.minimumSeconds([3, 1, 5, 7, 2, 4]) == 3\nassert solution.minimumSeconds([1, 4, 5, 8, 3, 10, 6]) == 3\nassert solution.minimumSeconds([2, 4, 1, 6, 3, 10, 7, 9, 8]) == 4\nassert solution.minimumSeconds([2, 4, 1, 9, 8, 10, 6]) == 3\nassert solution.minimumSeconds([5, 7, 10, 4, 8, 3, 6, 2, 1]) == 4\nassert solution.minimumSeconds([3, 9, 5, 4]) == 2\nassert solution.minimumSeconds([6, 7, 9, 4, 2]) == 2\nassert solution.minimumSeconds([3, 1, 4, 7, 10, 2, 6, 8]) == 4\nassert solution.minimumSeconds([9, 5, 2, 4, 3, 1, 10]) == 3\nassert solution.minimumSeconds([4, 2, 8, 9, 5, 10, 6, 7, 1, 3]) == 5\nassert solution.minimumSeconds([6, 9, 4, 10, 3, 1, 7, 5, 2, 8]) == 5\nassert solution.minimumSeconds([6, 9, 4, 2, 8, 10]) == 3\nassert solution.minimumSeconds([6, 3, 10, 9, 1, 2, 7, 8, 4]) == 4\nassert solution.minimumSeconds([5, 1, 9, 7, 8, 3, 4, 10]) == 4\nassert solution.minimumSeconds([4, 5, 7, 10, 2, 3]) == 3\nassert solution.minimumSeconds([4, 7, 6, 5]) == 2\nassert solution.minimumSeconds([9, 1, 3, 8, 4, 2, 7, 10, 6]) == 4\nassert solution.minimumSeconds([6, 1, 2, 4]) == 2\nassert solution.minimumSeconds([1, 2, 4, 3, 6, 10, 9, 7, 5, 8]) == 5\nassert solution.minimumSeconds([8, 1, 7, 4, 2, 3, 10]) == 3\nassert solution.minimumSeconds([2, 9, 7, 4, 5, 1, 10]) == 3\nassert solution.minimumSeconds([9, 8, 4, 2]) == 2\nassert solution.minimumSeconds([6, 1, 9, 8, 10]) == 2\nassert solution.minimumSeconds([1, 9, 4, 7, 6, 5, 3]) == 3\nassert solution.minimumSeconds([10, 9, 6, 1, 3, 7, 8, 2]) == 4\nassert solution.minimumSeconds([6, 1, 3, 8, 4, 5, 2, 10, 7, 9]) == 5\nassert solution.minimumSeconds([2, 4, 5, 10, 1, 7, 9]) == 3\nassert solution.minimumSeconds([1, 2, 8, 4, 6]) == 2\nassert solution.minimumSeconds([3, 7, 4, 5, 6, 10, 9, 8, 2, 1]) == 5\nassert solution.minimumSeconds([3, 4, 10, 2]) == 2\nassert solution.minimumSeconds([2, 4, 1, 10, 7, 5, 6, 9, 3, 8]) == 5\nassert solution.minimumSeconds([9, 3, 4, 7, 10, 2]) == 3\nassert solution.minimumSeconds([8, 9, 10, 5, 4, 3, 7]) == 3\nassert solution.minimumSeconds([1, 8, 6, 9, 10, 3, 2, 4, 5, 7]) == 5\nassert solution.minimumSeconds([9, 1, 8, 5, 4, 7, 3, 10, 2]) == 4\nassert solution.minimumSeconds([5, 1, 3, 2, 8, 6, 7, 10]) == 4\nassert solution.minimumSeconds([5, 7, 9, 1, 10, 2, 6, 8]) == 4\nassert solution.minimumSeconds([7, 3, 1, 10, 2, 6]) == 3\nassert solution.minimumSeconds([6, 8, 3, 1, 2, 10, 9, 4, 5, 7]) == 5\nassert solution.minimumSeconds([7, 6, 1, 3, 8, 5, 10, 4]) == 4\nassert solution.minimumSeconds([9, 1, 8, 4, 7, 5, 3]) == 3\nassert solution.minimumSeconds([4, 7, 6, 10, 3, 8]) == 3\nassert solution.minimumSeconds([2, 3, 10, 9, 4, 6, 8, 7, 1]) == 4\nassert solution.minimumSeconds([2, 4, 10, 1, 5, 9, 7, 6]) == 4\nassert solution.minimumSeconds([9, 1, 4, 8, 6, 10, 7, 5]) == 4\nassert solution.minimumSeconds([8, 7, 3, 5, 10, 1, 4, 2, 6, 9]) == 5\nassert solution.minimumSeconds([4, 6, 9, 5, 10, 1, 2, 8, 3, 7]) == 5\nassert solution.minimumSeconds([4, 9, 1, 7, 5, 6, 8]) == 3\nassert solution.minimumSeconds([3, 4, 2, 5, 7, 8, 10]) == 3\nassert solution.minimumSeconds([4, 1, 8, 3, 7, 2, 6]) == 3\nassert solution.minimumSeconds([4, 8, 1, 7, 6, 2]) == 3\nassert solution.minimumSeconds([10, 4, 7, 5, 8, 1]) == 3\nassert solution.minimumSeconds([1, 10, 2, 3, 7, 6, 4, 9, 5]) == 4\nassert solution.minimumSeconds([1, 5, 8, 9, 4, 10, 3, 6]) == 4\nassert solution.minimumSeconds([4, 6, 1, 8, 7, 5, 10]) == 3\nassert solution.minimumSeconds([1, 7, 10, 5, 2, 6, 9]) == 3\nassert solution.minimumSeconds([5, 9, 3, 10, 1, 8, 4, 2]) == 4\nassert solution.minimumSeconds([9, 1, 3, 5, 10, 2, 7, 4, 6, 8]) == 5\nassert solution.minimumSeconds([10, 3, 2, 9, 6, 1, 8]) == 3\nassert solution.minimumSeconds([5, 4, 10, 2]) == 2\nassert solution.minimumSeconds([7, 2, 8, 1, 4, 10, 5, 3, 9]) == 4\nassert solution.minimumSeconds([5, 4, 6, 3, 9, 2, 8, 7, 10, 1]) == 5\nassert solution.minimumSeconds([10, 9, 5, 6, 1, 7, 4, 8, 2, 3]) == 5\nassert solution.minimumSeconds([6, 2, 1, 4, 5, 9, 10, 3, 8, 7]) == 5",
  "inefficient_solution": "class Solution:\n    def minimumSeconds(self, nums: List[int]) -> int:\n        max_num = max(nums)\n        memo = {}\n        for _ in range(max_num * len(nums)):\n            for i in range(len(nums)):\n                for j in range(3):\n                    temp = nums[:]\n                    temp[i] = (temp[(i - 1 + len(nums)) % len(nums)] if j == 0 else (\n                        temp[(i + 1) % len(nums)] if j == 1 else temp[i]))\n                    if tuple(temp) not in memo:\n                        memo[tuple(temp)] = 1\n                    else:\n                        memo[tuple(temp)] += 1\n        return min([v for v in memo.values()])",
  "is_python": true
}