{
  "problem_idx": 26,
  "task_name": "Remove Duplicates from Sorted Array",
  "markdown_description": "\nGiven an integer array `nums` sorted in **non-decreasing order**, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return *the number of unique elements in* `nums`.\n\n\nConsider the number of unique elements of `nums` to be `k`, to get accepted, you need to do the following things:\n\n\n* Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`.\n* Return `k`.\n\n\n**Custom Judge:**\n\n\nThe judge will test your solution with the following code:\n\n\n\n```\n\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n\n```\n\nIf all assertions pass, then your solution will be **accepted**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,2]\n**Output:** 2, nums = [1,2,_]\n**Explanation:** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,0,1,1,1,2,2,3,3,4]\n**Output:** 5, nums = [0,1,2,3,4,_,_,_,_,_]\n**Explanation:** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 3 * 104`\n* `-100 <= nums[i] <= 100`\n* `nums` is sorted in **non-decreasing** order.\n\n\n",
  "canonical_solution": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        k = 0\n        for x in nums:\n            if k == 0 or x != nums[k - 1]:\n                nums[k] = x\n                k += 1\n        return k\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        k = 0\n        for x in nums:\n            if k == 0 or x != nums[k - 1]:\n                nums[k] = x\n                k += 1\n        return k\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = sorted(random.sample(list(range(-100, 101)), random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.removeDuplicates(nums)\n\n    return nums, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.removeDuplicates(nums) == expected_result\n        print(f\"assert solution.removeDuplicates({nums}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.removeDuplicates({nums}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.removeDuplicates([-40]) == 1\nassert solution.removeDuplicates([-84, -61, -46, -35, -28, 39, 55, 73, 81]) == 9\nassert solution.removeDuplicates([-78]) == 1\nassert solution.removeDuplicates([-85, -35, -31, -9, 29, 84, 85, 97]) == 8\nassert solution.removeDuplicates([20, 22, 57, 92]) == 4\nassert solution.removeDuplicates([-89, -87, 15, 70]) == 4\nassert solution.removeDuplicates([-33, 42, 47, 49, 72, 89, 98]) == 7\nassert solution.removeDuplicates([-32, 24, 66, 90, 94]) == 5\nassert solution.removeDuplicates([-95, -92, -85, -79, -74, -36, -20, 47, 78, 97]) == 10\nassert solution.removeDuplicates([-38, -31, -25, 13, 96]) == 5\nassert solution.removeDuplicates([-76, -13, -1, 95]) == 4\nassert solution.removeDuplicates([-98, -95, -80, -58, -43, -37, -15, 11]) == 8\nassert solution.removeDuplicates([-96, -93, -62, -50, 53, 73]) == 6\nassert solution.removeDuplicates([-91, -59, -43, 49, 85, 96]) == 6\nassert solution.removeDuplicates([-95, -94, -60, -46, -10, 51]) == 6\nassert solution.removeDuplicates([-75, -74, -46, -21, -20, -14, 9, 69]) == 8\nassert solution.removeDuplicates([-68, -56, 56, 71]) == 4\nassert solution.removeDuplicates([-44, -42, -12, 21, 87]) == 5\nassert solution.removeDuplicates([-92, -90, -82, -74, -32, 12, 19, 33, 38, 45]) == 10\nassert solution.removeDuplicates([-88, -60, -38, -34, -19, -4, 10, 40]) == 8\nassert solution.removeDuplicates([-73, -57, -41, -39, 1, 61, 94]) == 7\nassert solution.removeDuplicates([-23, 23, 38]) == 3\nassert solution.removeDuplicates([-93, -91, -73, -53, -51, -30, 75]) == 7\nassert solution.removeDuplicates([-25, -1, 50, 84]) == 4\nassert solution.removeDuplicates([-81, -56, -31, -21, -10, -3, 12, 30]) == 8\nassert solution.removeDuplicates([-96, -81, -48, 20, 28, 32, 37, 83]) == 8\nassert solution.removeDuplicates([-66]) == 1\nassert solution.removeDuplicates([-63, 32]) == 2\nassert solution.removeDuplicates([-77, -37, -5, 6, 7, 59, 70, 84]) == 8\nassert solution.removeDuplicates([-40, -25, 29]) == 3\nassert solution.removeDuplicates([-99, -79, 32]) == 3\nassert solution.removeDuplicates([-77, -23, -14, 11, 26, 61, 74]) == 7\nassert solution.removeDuplicates([-84, -72, -71, 35, 54, 63]) == 6\nassert solution.removeDuplicates([-100, -60, 96]) == 3\nassert solution.removeDuplicates([81]) == 1\nassert solution.removeDuplicates([-95, -15, -13, 55, 89, 98]) == 6\nassert solution.removeDuplicates([-51, -37, -21, -14, -10, 11, 43, 47, 86]) == 9\nassert solution.removeDuplicates([-79, -11, 49, 52, 65]) == 5\nassert solution.removeDuplicates([0, 46]) == 2\nassert solution.removeDuplicates([-96, -95, -86, -84, -70, -18, 29, 84]) == 8\nassert solution.removeDuplicates([-87, -73, -70, -64, -36, -29, 3, 48, 85, 95]) == 10\nassert solution.removeDuplicates([-90, -68, -67, 7, 58, 60, 94]) == 7\nassert solution.removeDuplicates([-87, -28, -8, 62, 70]) == 5\nassert solution.removeDuplicates([-15]) == 1\nassert solution.removeDuplicates([-81, -45]) == 2\nassert solution.removeDuplicates([-98, -90, -86, -80, 16, 32]) == 6\nassert solution.removeDuplicates([-98, -27, -22, -13, -11, 17, 94, 98]) == 8\nassert solution.removeDuplicates([-78, -72, -56, -33, -27, 3, 10, 46, 55]) == 9\nassert solution.removeDuplicates([-82, 7, 77]) == 3\nassert solution.removeDuplicates([-94, -91, -62, -37, 66, 100]) == 6\nassert solution.removeDuplicates([-73, -46, 53, 68]) == 4\nassert solution.removeDuplicates([-70, -52, -32, -28, -11, 9, 25, 55, 67, 80]) == 10\nassert solution.removeDuplicates([-71, -66, -49, -9, 67, 85, 97]) == 7\nassert solution.removeDuplicates([51]) == 1\nassert solution.removeDuplicates([-98, -52, -42, -28, -27, 8, 22, 87, 94, 98]) == 10\nassert solution.removeDuplicates([-92, -39, -28, -22, -15, -12, 66, 72]) == 8\nassert solution.removeDuplicates([-89, -37, -36, -7, 3, 15, 16, 23, 25, 49]) == 10\nassert solution.removeDuplicates([-98, -43, 6, 34, 47, 49, 81, 88]) == 8\nassert solution.removeDuplicates([-81, -76, -71, -64, -51, -19, 14, 20, 65, 91]) == 10\nassert solution.removeDuplicates([-90, 8]) == 2\nassert solution.removeDuplicates([0, 41, 45]) == 3\nassert solution.removeDuplicates([-96, -84, -57, -51, -39, -5, 26, 50]) == 8\nassert solution.removeDuplicates([-49, 5, 38, 80]) == 4\nassert solution.removeDuplicates([-75, -72, -42, -33, -26, 22, 49, 54, 93, 97]) == 10\nassert solution.removeDuplicates([-78, -44, -29, 16, 33, 52]) == 6\nassert solution.removeDuplicates([-62, -55, -5, 38, 56, 59, 62, 75, 89]) == 9\nassert solution.removeDuplicates([-76, -37, -2, 65]) == 4\nassert solution.removeDuplicates([-74, -69, -34, 9, 11, 47, 67, 87, 93]) == 9\nassert solution.removeDuplicates([-50, -44, -35, -33, 27, 66]) == 6\nassert solution.removeDuplicates([-65, 53]) == 2\nassert solution.removeDuplicates([-91, -51, -22, -8, 9, 28, 63, 87, 96]) == 9\nassert solution.removeDuplicates([-100, -86, -59, -46, 3, 7, 23, 31]) == 8\nassert solution.removeDuplicates([-14, 69]) == 2\nassert solution.removeDuplicates([-44]) == 1\nassert solution.removeDuplicates([-55, 18, 20, 23, 33, 38, 47]) == 7\nassert solution.removeDuplicates([-97, -48, -45, -37, -31, -29, -9, 0, 57]) == 9\nassert solution.removeDuplicates([-29, 80]) == 2\nassert solution.removeDuplicates([-96, -64, -50, -26, 1, 24, 32, 49, 99]) == 9\nassert solution.removeDuplicates([-85]) == 1\nassert solution.removeDuplicates([-71, -46, -15, -10, 8, 25, 44, 72, 87, 89]) == 10\nassert solution.removeDuplicates([-92, -84, -22, -10, 17, 34, 55, 69]) == 8\nassert solution.removeDuplicates([4, 48, 78]) == 3\nassert solution.removeDuplicates([-32, -21, -3, -1, 7, 38, 48]) == 7\nassert solution.removeDuplicates([-64, -41, -37, -29, 21, 32, 38, 63, 70, 74]) == 10\nassert solution.removeDuplicates([-83, -79, -21, -12, 5, 44, 68, 75, 100]) == 9\nassert solution.removeDuplicates([44, 55, 60, 82]) == 4\nassert solution.removeDuplicates([100]) == 1\nassert solution.removeDuplicates([-85, 45, 54]) == 3\nassert solution.removeDuplicates([-94, 12]) == 2\nassert solution.removeDuplicates([-82, -62, -33, -22, -14, 8, 16, 66, 76]) == 9\nassert solution.removeDuplicates([-86, -37, -27, 3, 54, 60, 69]) == 7\nassert solution.removeDuplicates([-94, -88, -26, -21, 35, 47, 72]) == 7\nassert solution.removeDuplicates([-10, 3, 21, 52]) == 4\nassert solution.removeDuplicates([19]) == 1\nassert solution.removeDuplicates([-43, -3, 48, 62, 97]) == 5\nassert solution.removeDuplicates([-91, -90, -74, -67, -54, -28, -25, 15, 70, 73]) == 10\nassert solution.removeDuplicates([-47, 9, 22, 36, 73]) == 5\nassert solution.removeDuplicates([-55, -45, -42, -16, -7, -5, 10, 39, 48, 59]) == 10\nassert solution.removeDuplicates([-71, -69, -39, -12, 34, 58, 67]) == 7\nassert solution.removeDuplicates([-97, -2, 33, 74]) == 4",
  "inefficient_solution": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        k = 0\n        nums_copy = list(nums)\n        nums_copy += [0] * 1000000  # allocate extra memory\n        nums_copy = [x for x in nums_copy if x]  # remove zeros\n        nums_copy = [x for i, x in enumerate(nums_copy) if i == 0 or x != nums_copy[i - 1]]  # remove duplicates\n        for i, x in enumerate(nums):\n            nums[i] = nums_copy[i]\n        return len(nums_copy)",
  "is_python": true
}