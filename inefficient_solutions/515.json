{
  "problem_idx": 515,
  "task_name": "Find Largest Value in Each Tree Row",
  "markdown_description": "\nGiven the `root` of a binary tree, return *an array of the largest value in each row* of the tree **(0-indexed)**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0515.Find%20Largest%20Value%20in%20Each%20Tree%20Row/images/largest_e1.jpg)\n\n```\n\n**Input:** root = [1,3,2,5,3,null,9]\n**Output:** [1,3,9]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [1,2,3]\n**Output:** [1,3]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree will be in the range `[0, 104]`.\n* `-231 <= Node.val <= 231 - 1`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -> List[int]:\n        if root is None:\n            return []\n        q = deque([root])\n        ans = []\n        while q:\n            t = -inf\n            for _ in range(len(q)):\n                node = q.popleft()\n                t = max(t, node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\nfrom typing import List, Optional\nfrom math import inf\n\n#Definition for a binary tree node.\nclass TreeNode:\n     def __init__(self, val=0, left=None, right=None):\n         self.val = val\n         self.left = left\n         self.right = right\n\nclass Solution:\n    def largestValues(self, root: Optional[TreeNode]) -> List[int]:\n        if root is None:\n            return []\n        q = deque([root])\n        ans = []\n        while q:\n            t = -inf\n            for _ in range(len(q)):\n                node = q.popleft()\n                t = max(t, node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            ans.append(t)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a binary tree with random values\n    def generate_tree() -> Optional[TreeNode]:\n        node_list = []\n        num_nodes = random.randint(0, 10)\n        for i in range(num_nodes):\n            node_list.append(TreeNode(i))\n        \n        if num_nodes == 0:\n            return None\n        \n        for i in range(num_nodes):\n            if i * 2 + 1 < num_nodes:\n                node_list[i].left = node_list[i * 2 + 1]\n            if i * 2 + 2 < num_nodes:\n                node_list[i].right = node_list[i * 2 + 2]\n        \n        return node_list[0]\n\n    # Generate a random binary tree\n    tree = generate_tree()\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestValues(tree)\n\n    return tree, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tree, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestValues(tree) == expected_result\n        print(f\"assert solution.largestValues({tree}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.largestValues({tree}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7930f90>) == [0, 2, 6, 7]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7930f50>) == [0, 2, 6, 9]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931010>) == [0]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7930f50>) == [0, 2, 6, 7]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931290>) == [0, 2, 6, 8]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931310>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931110>) == [0, 2, 6, 8]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931210>) == [0, 2, 6, 8]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931210>) == [0, 2]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79312d0>) == [0, 2, 5]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931210>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6, 9]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931050>) == [0, 2, 6, 9]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931190>) == [0, 2, 5]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79311d0>) == [0, 1]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6, 9]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931050>) == [0, 1]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931190>) == [0, 1]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6, 8]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79311d0>) == [0, 2, 6, 9]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931390>) == [0, 2, 6, 7]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931150>) == [0, 2, 6, 7]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79312d0>) == [0]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931150>) == [0, 2, 6]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7930f90>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6, 8]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931010>) == [0, 2, 6, 7]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6, 8]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79312d0>) == [0, 2, 6, 8]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6, 9]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931210>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0, 2, 6, 7]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79313d0>) == [0, 2, 6]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79310d0>) == [0, 2, 5]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 4]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7930f10>) == [0]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 1]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79310d0>) == [0, 2, 5]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931050>) == [0]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79310d0>) == [0, 2, 6, 9]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 6]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931190>) == [0, 1]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 5]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7930f10>) == [0, 2, 6]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 5]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931090>) == [0, 2, 6, 9]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931210>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931190>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 6, 8]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79313d0>) == [0, 2, 5]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 6]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79312d0>) == [0, 2]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931150>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb79313d0>) == [0]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 3]\nassert solution.largestValues(None) == []\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931150>) == [0, 2, 6, 7]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931150>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931310>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 1]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931210>) == [0, 2, 4]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 6, 9]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931350>) == [0]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 6, 8]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931210>) == [0, 2, 6, 8]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931410>) == [0, 2, 3]\nassert solution.largestValues(<__main__.TreeNode object at 0x7fceb7931250>) == [0, 2, 3]",
  "inefficient_solution": "",
  "is_python": true
}