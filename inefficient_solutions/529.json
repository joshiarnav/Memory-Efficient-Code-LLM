{
  "problem_idx": 529,
  "task_name": "Minesweeper",
  "markdown_description": "\nLet's play the minesweeper game ([Wikipedia](https://en.wikipedia.org/wiki/Minesweeper_(video_game)), [online game](http://minesweeperonline.com))!\n\n\nYou are given an `m x n` char matrix `board` representing the game board where:\n\n\n* `'M'` represents an unrevealed mine,\n* `'E'` represents an unrevealed empty square,\n* `'B'` represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\n* digit (`'1'` to `'8'`) represents how many mines are adjacent to this revealed square, and\n* `'X'` represents a revealed mine.\n\n\nYou are also given an integer array `click` where `click = [clickr, clickc]` represents the next click position among all the unrevealed squares (`'M'` or `'E'`).\n\n\nReturn *the board after revealing this position according to the following rules*:\n\n\n1. If a mine `'M'` is revealed, then the game is over. You should change it to `'X'`.\n2. If an empty square `'E'` with no adjacent mines is revealed, then change it to a revealed blank `'B'` and all of its adjacent unrevealed squares should be revealed recursively.\n3. If an empty square `'E'` with at least one adjacent mine is revealed, then change it to a digit (`'1'` to `'8'`) representing the number of adjacent mines.\n4. Return the board when no more squares will be revealed.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0529.Minesweeper/images/untitled.jpeg)\n\n```\n\n**Input:** board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\n**Output:** [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0529.Minesweeper/images/untitled-2.jpeg)\n\n```\n\n**Input:** board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\n**Output:** [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == board.length`\n* `n == board[i].length`\n* `1 <= m, n <= 50`\n* `board[i][j]` is either `'M'`, `'E'`, `'B'`, or a digit from `'1'` to `'8'`.\n* `click.length == 2`\n* `0 <= clickr < m`\n* `0 <= clickc < n`\n* `board[clickr][clickc]` is either `'M'` or `'E'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:\n        def dfs(i: int, j: int):\n            cnt = 0\n            for x in range(i - 1, i + 2):\n                for y in range(j - 1, j + 2):\n                    if 0 <= x < m and 0 <= y < n and board[x][y] == \"M\":\n                        cnt += 1\n            if cnt:\n                board[i][j] = str(cnt)\n            else:\n                board[i][j] = \"B\"\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < m and 0 <= y < n and board[x][y] == \"E\":\n                            dfs(x, y)\n\n        m, n = len(board), len(board[0])\n        i, j = click\n        if board[i][j] == \"M\":\n            board[i][j] = \"X\"\n        else:\n            dfs(i, j)\n        return board\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:\n        def dfs(i: int, j: int):\n            cnt = 0\n            for x in range(i - 1, i + 2):\n                for y in range(j - 1, j + 2):\n                    if 0 <= x < m and 0 <= y < n and board[x][y] == \"M\":\n                        cnt += 1\n            if cnt:\n                board[i][j] = str(cnt)\n            else:\n                board[i][j] = \"B\"\n                for x in range(i - 1, i + 2):\n                    for y in range(j - 1, j + 2):\n                        if 0 <= x < m and 0 <= y < n and board[x][y] == \"E\":\n                            dfs(x, y)\n\n        m, n = len(board), len(board[0])\n        i, j = click\n        if board[i][j] == \"M\":\n            board[i][j] = \"X\"\n        else:\n            dfs(i, j)\n        return board\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random board\n    m = random.randint(1, 6)\n    n = random.randint(1, 6)\n    board = []\n    for _ in range(m):\n        row = []\n        for _ in range(n):\n            rand_int = random.randint(0, 3)\n            if rand_int == 0:\n                row.append(\"M\")\n            else:\n                row.append(\"E\")\n        board.append(row)\n\n    # Generate random click position\n    click = [random.randint(0, m-1), random.randint(0, n-1)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.updateBoard(board, click)\n\n    return board, click, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        board, click, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.updateBoard(board, click) == expected_result\n        print(f\"assert solution.updateBoard({board}, {click}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.updateBoard({board}, {click}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.updateBoard([['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E', 'E'], ['M', 'E', 'M', 'E', 'E', 'M'], ['E', 'E', '1', 'E', 'M', 'E']], [3, 2]) == [['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E', 'E'], ['M', 'E', 'M', 'E', 'E', 'M'], ['E', 'E', '1', 'E', 'M', 'E']]\nassert solution.updateBoard([['E', 'E', 'M', 'M', '2'], ['E', 'E', 'E', 'E', 'M'], ['E', 'E', 'M', 'E', 'M'], ['E', 'M', 'E', 'E', 'E'], ['E', 'E', 'E', 'M', 'E']], [0, 4]) == [['E', 'E', 'M', 'M', '2'], ['E', 'E', 'E', 'E', 'M'], ['E', 'E', 'M', 'E', 'M'], ['E', 'M', 'E', 'E', 'E'], ['E', 'E', 'E', 'M', 'E']]\nassert solution.updateBoard([['B', 'B', 'B', 'B', '1', 'M'], ['1', '1', 'B', 'B', '1', '1'], ['M', '1', 'B', 'B', 'B', 'B'], ['E', '1', 'B', 'B', 'B', 'B']], [0, 0]) == [['B', 'B', 'B', 'B', '1', 'M'], ['1', '1', 'B', 'B', '1', '1'], ['M', '1', 'B', 'B', 'B', 'B'], ['E', '1', 'B', 'B', 'B', 'B']]\nassert solution.updateBoard([['B', 'B', 'B', 'B', 'B']], [0, 0]) == [['B', 'B', 'B', 'B', 'B']]\nassert solution.updateBoard([['B', 'B'], ['1', '1'], ['E', 'M'], ['E', 'E']], [0, 0]) == [['B', 'B'], ['1', '1'], ['E', 'M'], ['E', 'E']]\nassert solution.updateBoard([['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', '1'], ['E', 'E', 'E', 'E', 'M'], ['E', 'E', 'E', 'E', 'M'], ['E', 'E', 'E', 'E', 'E']], [2, 4]) == [['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', '1'], ['E', 'E', 'E', 'E', 'M'], ['E', 'E', 'E', 'E', 'M'], ['E', 'E', 'E', 'E', 'E']]\nassert solution.updateBoard([['B']], [0, 0]) == [['B']]\nassert solution.updateBoard([['B'], ['B'], ['B'], ['B']], [2, 0]) == [['B'], ['B'], ['B'], ['B']]\nassert solution.updateBoard([['B', '1', 'E', 'E'], ['B', '1', 'M', 'E']], [0, 0]) == [['B', '1', 'E', 'E'], ['B', '1', 'M', 'E']]\nassert solution.updateBoard([['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'M', 'E', 'E'], ['E', 'E', 'M', '3', 'E', 'E'], ['E', 'E', 'E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E', 'E', 'E']], [3, 3]) == [['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'M', 'E', 'E'], ['E', 'E', 'M', '3', 'E', 'E'], ['E', 'E', 'E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E', 'E', 'E']]\nassert solution.updateBoard([['E', 'M', 'M', 'E'], ['E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E'], ['E', 'M', 'M', '1'], ['M', 'E', 'E', 'E']], [3, 3]) == [['E', 'M', 'M', 'E'], ['E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E'], ['E', 'M', 'M', '1'], ['M', 'E', 'E', 'E']]\nassert solution.updateBoard([['E', 'E', 'E', 'M', '2', 'B'], ['E', 'E', 'E', 'M', '2', 'B'], ['E', 'E', 'E', '2', '1', 'B'], ['E', 'E', 'M', '1', 'B', 'B'], ['E', 'E', 'E', '3', '1', 'B'], ['E', 'E', 'M', 'M', '1', 'B']], [5, 5]) == [['E', 'E', 'E', 'M', '2', 'B'], ['E', 'E', 'E', 'M', '2', 'B'], ['E', 'E', 'E', '2', '1', 'B'], ['E', 'E', 'M', '1', 'B', 'B'], ['E', 'E', 'E', '3', '1', 'B'], ['E', 'E', 'M', 'M', '1', 'B']]\nassert solution.updateBoard([['E', 'M', 'E', 'E', 'E', 'E'], ['M', 'M', 'E', 'E', 'M', 'M'], ['E', 'E', 'E', '1', 'E', 'E']], [2, 3]) == [['E', 'M', 'E', 'E', 'E', 'E'], ['M', 'M', 'E', 'E', 'M', 'M'], ['E', 'E', 'E', '1', 'E', 'E']]\nassert solution.updateBoard([['M', 'E', 'E'], ['E', 'E', 'E'], ['M', 'M', 'M'], ['E', 'E', '2'], ['E', 'E', 'E']], [3, 2]) == [['M', 'E', 'E'], ['E', 'E', 'E'], ['M', 'M', 'M'], ['E', 'E', '2'], ['E', 'E', 'E']]\nassert solution.updateBoard([['B']], [0, 0]) == [['B']]\nassert solution.updateBoard([['B'], ['B']], [1, 0]) == [['B'], ['B']]\nassert solution.updateBoard([['M', '1', 'E', 'M', 'E', 'E']], [0, 1]) == [['M', '1', 'E', 'M', 'E', 'E']]\nassert solution.updateBoard([['E', 'E'], ['M', '2'], ['M', 'E'], ['M', 'M'], ['E', 'E']], [1, 1]) == [['E', 'E'], ['M', '2'], ['M', 'E'], ['M', 'M'], ['E', 'E']]\nassert solution.updateBoard([['M', 'E'], ['M', 'E'], ['1', '1'], ['B', 'B']], [3, 1]) == [['M', 'E'], ['M', 'E'], ['1', '1'], ['B', 'B']]\nassert solution.updateBoard([['B', 'B', 'B', 'B', 'B', 'B'], ['2', '2', '2', '1', '1', 'B'], ['M', 'M', 'E', 'M', '1', 'B']], [0, 1]) == [['B', 'B', 'B', 'B', 'B', 'B'], ['2', '2', '2', '1', '1', 'B'], ['M', 'M', 'E', 'M', '1', 'B']]\nassert solution.updateBoard([['E', 'E', 'E', 'E', 'M', 'E'], ['2', 'E', 'E', 'E', 'E', 'E'], ['M', 'M', 'M', 'M', 'E', 'E'], ['E', 'E', 'E', 'E', 'E', 'E'], ['M', 'E', 'M', 'E', 'E', 'E']], [1, 0]) == [['E', 'E', 'E', 'E', 'M', 'E'], ['2', 'E', 'E', 'E', 'E', 'E'], ['M', 'M', 'M', 'M', 'E', 'E'], ['E', 'E', 'E', 'E', 'E', 'E'], ['M', 'E', 'M', 'E', 'E', 'E']]\nassert solution.updateBoard([['1', 'M', 'M', 'E', 'E']], [0, 0]) == [['1', 'M', 'M', 'E', 'E']]\nassert solution.updateBoard([['M', '1', 'E']], [0, 1]) == [['M', '1', 'E']]\nassert solution.updateBoard([['E'], ['E'], ['M'], ['E'], ['1'], ['M']], [4, 0]) == [['E'], ['E'], ['M'], ['E'], ['1'], ['M']]\nassert solution.updateBoard([['M', 'M'], ['2', 'E'], ['E', 'E']], [1, 0]) == [['M', 'M'], ['2', 'E'], ['E', 'E']]\nassert solution.updateBoard([['M', '2', 'B', 'B'], ['M', '2', 'B', 'B']], [0, 2]) == [['M', '2', 'B', 'B'], ['M', '2', 'B', 'B']]\nassert solution.updateBoard([['M', 'E'], ['E', 'E'], ['E', '1'], ['E', 'M']], [2, 1]) == [['M', 'E'], ['E', 'E'], ['E', '1'], ['E', 'M']]\nassert solution.updateBoard([['M', 'M'], ['2', '2'], ['B', 'B'], ['B', 'B'], ['1', '1'], ['E', 'M']], [2, 1]) == [['M', 'M'], ['2', '2'], ['B', 'B'], ['B', 'B'], ['1', '1'], ['E', 'M']]\nassert solution.updateBoard([['B'], ['B'], ['B'], ['B']], [1, 0]) == [['B'], ['B'], ['B'], ['B']]\nassert solution.updateBoard([['B'], ['B'], ['B']], [2, 0]) == [['B'], ['B'], ['B']]\nassert solution.updateBoard([['E', 'M', 'E'], ['E', '2', 'E'], ['E', 'M', 'E'], ['M', 'M', 'M']], [1, 1]) == [['E', 'M', 'E'], ['E', '2', 'E'], ['E', 'M', 'E'], ['M', 'M', 'M']]\nassert solution.updateBoard([['B'], ['B'], ['B'], ['B'], ['B'], ['B']], [3, 0]) == [['B'], ['B'], ['B'], ['B'], ['B'], ['B']]\nassert solution.updateBoard([['E', 'M', '2'], ['E', 'E', 'M'], ['E', 'E', 'E'], ['E', 'E', 'E'], ['M', 'E', 'E']], [0, 2]) == [['E', 'M', '2'], ['E', 'E', 'M'], ['E', 'E', 'E'], ['E', 'E', 'E'], ['M', 'E', 'E']]\nassert solution.updateBoard([['M', '1', 'B', 'B', 'B']], [0, 2]) == [['M', '1', 'B', 'B', 'B']]\nassert solution.updateBoard([['E', 'M', 'E', 'E', 'M'], ['M', 'E', 'E', 'E', 'E'], ['M', 'M', 'M', 'E', 'E'], ['E', '4', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E']], [3, 1]) == [['E', 'M', 'E', 'E', 'M'], ['M', 'E', 'E', 'E', 'E'], ['M', 'M', 'M', 'E', 'E'], ['E', '4', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E']]\nassert solution.updateBoard([['E', 'M', 'E', 'E', 'E', 'M'], ['E', 'M', 'E', 'E', '1', 'E'], ['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E']], [1, 4]) == [['E', 'M', 'E', 'E', 'E', 'M'], ['E', 'M', 'E', 'E', '1', 'E'], ['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E']]\nassert solution.updateBoard([['B', 'B', 'B']], [0, 2]) == [['B', 'B', 'B']]\nassert solution.updateBoard([['E', 'E', 'E', 'E', 'E', 'E'], ['E', 'E', '1', 'E', 'M', 'M'], ['E', 'E', 'M', 'E', 'E', 'M'], ['E', 'E', 'M', 'E', 'E', 'E']], [1, 2]) == [['E', 'E', 'E', 'E', 'E', 'E'], ['E', 'E', '1', 'E', 'M', 'M'], ['E', 'E', 'M', 'E', 'E', 'M'], ['E', 'E', 'M', 'E', 'E', 'E']]\nassert solution.updateBoard([['B', 'B', 'B'], ['B', 'B', 'B'], ['1', '2', '1'], ['M', 'E', 'M']], [0, 2]) == [['B', 'B', 'B'], ['B', 'B', 'B'], ['1', '2', '1'], ['M', 'E', 'M']]\nassert solution.updateBoard([['E', 'E'], ['M', 'M'], ['E', '2']], [2, 1]) == [['E', 'E'], ['M', 'M'], ['E', '2']]\nassert solution.updateBoard([['E', 'E', 'E', 'M'], ['E', 'M', 'M', 'E'], ['1', 'E', 'M', 'E'], ['E', 'E', 'E', 'E']], [2, 0]) == [['E', 'E', 'E', 'M'], ['E', 'M', 'M', 'E'], ['1', 'E', 'M', 'E'], ['E', 'E', 'E', 'E']]\nassert solution.updateBoard([['E', 'E', 'E', 'E'], ['E', 'E', 'M', 'E'], ['E', '1', 'E', 'E']], [2, 1]) == [['E', 'E', 'E', 'E'], ['E', 'E', 'M', 'E'], ['E', '1', 'E', 'E']]\nassert solution.updateBoard([['B', 'B', 'B', 'B']], [0, 2]) == [['B', 'B', 'B', 'B']]\nassert solution.updateBoard([['E', 'E'], ['M', 'E'], ['M', 'E'], ['E', 'E'], ['M', 'M'], ['2', 'E']], [5, 0]) == [['E', 'E'], ['M', 'E'], ['M', 'E'], ['E', 'E'], ['M', 'M'], ['2', 'E']]\nassert solution.updateBoard([['B', '1', 'M', 'M', 'E', 'M'], ['B', '1', '2', '2', '3', 'E'], ['B', 'B', 'B', 'B', '1', 'M']], [2, 1]) == [['B', '1', 'M', 'M', 'E', 'M'], ['B', '1', '2', '2', '3', 'E'], ['B', 'B', 'B', 'B', '1', 'M']]\nassert solution.updateBoard([['E', 'M'], ['M', '2'], ['E', 'E']], [1, 1]) == [['E', 'M'], ['M', '2'], ['E', 'E']]\nassert solution.updateBoard([['B', 'B', 'B', '1', 'M']], [0, 2]) == [['B', 'B', 'B', '1', 'M']]\nassert solution.updateBoard([['E', 'M', 'E', 'E'], ['M', 'E', 'M', 'E'], ['E', 'E', '1', 'E']], [2, 2]) == [['E', 'M', 'E', 'E'], ['M', 'E', 'M', 'E'], ['E', 'E', '1', 'E']]\nassert solution.updateBoard([['E', 'E', 'M'], ['M', 'E', 'E'], ['1', 'E', 'E'], ['E', 'E', 'E']], [2, 0]) == [['E', 'E', 'M'], ['M', 'E', 'E'], ['1', 'E', 'E'], ['E', 'E', 'E']]\nassert solution.updateBoard([['E', 'E', 'M'], ['E', 'E', '2'], ['E', 'E', 'M']], [1, 2]) == [['E', 'E', 'M'], ['E', 'E', '2'], ['E', 'E', 'M']]\nassert solution.updateBoard([['M', '2', 'B'], ['M', '2', 'B'], ['1', '1', 'B'], ['B', 'B', 'B'], ['B', 'B', 'B'], ['B', 'B', 'B']], [3, 0]) == [['M', '2', 'B'], ['M', '2', 'B'], ['1', '1', 'B'], ['B', 'B', 'B'], ['B', 'B', 'B'], ['B', 'B', 'B']]\nassert solution.updateBoard([['M', 'E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E'], ['E', '1', 'E', 'E', 'E'], ['M', 'E', 'E', 'E', 'M'], ['M', 'M', 'E', 'E', 'M']], [3, 1]) == [['M', 'E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E', 'E'], ['E', '1', 'E', 'E', 'E'], ['M', 'E', 'E', 'E', 'M'], ['M', 'M', 'E', 'E', 'M']]\nassert solution.updateBoard([['B', 'B', 'B', 'B', 'B', 'B']], [0, 2]) == [['B', 'B', 'B', 'B', 'B', 'B']]\nassert solution.updateBoard([['E', 'E', 'E', 'E', 'E'], ['E', '1', 'M', 'E', 'E'], ['E', 'E', 'E', 'M', 'E']], [1, 1]) == [['E', 'E', 'E', 'E', 'E'], ['E', '1', 'M', 'E', 'E'], ['E', 'E', 'E', 'M', 'E']]\nassert solution.updateBoard([['M', 'E', 'M'], ['E', 'E', '1']], [1, 2]) == [['M', 'E', 'M'], ['E', 'E', '1']]\nassert solution.updateBoard([['E', 'M', 'M', 'M', 'E'], ['1', 'E', 'M', 'M', 'E']], [1, 0]) == [['E', 'M', 'M', 'M', 'E'], ['1', 'E', 'M', 'M', 'E']]\nassert solution.updateBoard([['M', '1', 'B']], [0, 2]) == [['M', '1', 'B']]\nassert solution.updateBoard([['1', 'E'], ['M', 'E']], [0, 0]) == [['1', 'E'], ['M', 'E']]\nassert solution.updateBoard([['E', 'E', 'E', 'M'], ['M', '1', 'E', 'E']], [1, 1]) == [['E', 'E', 'E', 'M'], ['M', '1', 'E', 'E']]\nassert solution.updateBoard([['M', '1', 'E', 'E']], [0, 1]) == [['M', '1', 'E', 'E']]\nassert solution.updateBoard([['E', 'M', 'E'], ['E', 'E', '2'], ['E', 'E', 'M'], ['M', 'E', 'E'], ['E', 'E', 'E'], ['M', 'E', 'E']], [1, 2]) == [['E', 'M', 'E'], ['E', 'E', '2'], ['E', 'E', 'M'], ['M', 'E', 'E'], ['E', 'E', 'E'], ['M', 'E', 'E']]\nassert solution.updateBoard([['B', '2', 'M', 'E', 'E'], ['B', '2', 'M', 'M', 'M'], ['B', '1', '2', '4', 'M'], ['B', 'B', 'B', '1', '1'], ['1', '1', 'B', 'B', 'B'], ['M', '1', 'B', 'B', 'B']], [4, 3]) == [['B', '2', 'M', 'E', 'E'], ['B', '2', 'M', 'M', 'M'], ['B', '1', '2', '4', 'M'], ['B', 'B', 'B', '1', '1'], ['1', '1', 'B', 'B', 'B'], ['M', '1', 'B', 'B', 'B']]\nassert solution.updateBoard([['B'], ['B'], ['B'], ['B']], [2, 0]) == [['B'], ['B'], ['B'], ['B']]\nassert solution.updateBoard([['E', 'E', 'E', 'M', '2', 'B'], ['E', 'M', 'E', 'M', '2', 'B'], ['E', 'M', 'M', 'E', '1', 'B'], ['E', 'E', 'E', 'E', '1', 'B'], ['E', 'E', 'E', 'M', '3', '1'], ['E', 'M', 'E', 'M', 'M', 'E']], [1, 5]) == [['E', 'E', 'E', 'M', '2', 'B'], ['E', 'M', 'E', 'M', '2', 'B'], ['E', 'M', 'M', 'E', '1', 'B'], ['E', 'E', 'E', 'E', '1', 'B'], ['E', 'E', 'E', 'M', '3', '1'], ['E', 'M', 'E', 'M', 'M', 'E']]\nassert solution.updateBoard([['B', 'B', 'B']], [0, 1]) == [['B', 'B', 'B']]\nassert solution.updateBoard([['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'M', 'M', 'E'], ['E', 'E', 'M', 'E', 'E'], ['M', 'E', 'E', 'E', 'E'], ['1', 'E', 'M', 'E', 'E']], [4, 0]) == [['E', 'E', 'E', 'E', 'E'], ['E', 'E', 'M', 'M', 'E'], ['E', 'E', 'M', 'E', 'E'], ['M', 'E', 'E', 'E', 'E'], ['1', 'E', 'M', 'E', 'E']]\nassert solution.updateBoard([['M'], ['1'], ['B'], ['B'], ['B']], [4, 0]) == [['M'], ['1'], ['B'], ['B'], ['B']]\nassert solution.updateBoard([['M', 'M', 'E', 'E'], ['M', 'E', 'E', 'E'], ['E', 'E', 'E', 'E'], ['1', 'E', 'E', 'M'], ['E', 'M', 'E', 'M'], ['M', 'E', 'E', 'E']], [3, 0]) == [['M', 'M', 'E', 'E'], ['M', 'E', 'E', 'E'], ['E', 'E', 'E', 'E'], ['1', 'E', 'E', 'M'], ['E', 'M', 'E', 'M'], ['M', 'E', 'E', 'E']]\nassert solution.updateBoard([['B']], [0, 0]) == [['B']]\nassert solution.updateBoard([['M', 'E', 'M', 'E', 'M'], ['E', 'E', '2', 'E', 'M'], ['E', 'E', 'E', 'M', 'E']], [1, 2]) == [['M', 'E', 'M', 'E', 'M'], ['E', 'E', '2', 'E', 'M'], ['E', 'E', 'E', 'M', 'E']]\nassert solution.updateBoard([['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E'], ['M', '2', 'E', 'M', 'E', 'E'], ['E', 'E', 'E', 'M', 'M', 'E'], ['E', 'E', 'M', 'E', 'E', 'E']], [3, 1]) == [['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E'], ['M', '2', 'E', 'M', 'E', 'E'], ['E', 'E', 'E', 'M', 'M', 'E'], ['E', 'E', 'M', 'E', 'E', 'E']]\nassert solution.updateBoard([['E', 'E', 'E'], ['E', 'E', 'E'], ['E', 'E', '1'], ['M', 'E', 'M'], ['M', 'E', 'E']], [2, 2]) == [['E', 'E', 'E'], ['E', 'E', 'E'], ['E', 'E', '1'], ['M', 'E', 'M'], ['M', 'E', 'E']]\nassert solution.updateBoard([['E', 'E'], ['M', 'M'], ['E', '2']], [2, 1]) == [['E', 'E'], ['M', 'M'], ['E', '2']]\nassert solution.updateBoard([['B', 'B'], ['B', 'B'], ['B', 'B']], [2, 0]) == [['B', 'B'], ['B', 'B'], ['B', 'B']]\nassert solution.updateBoard([['E', 'E', 'E', 'E'], ['E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E'], ['E', 'M', 'E', 'M'], ['M', 'E', 'E', 'E'], ['E', 'M', '2', 'M']], [5, 2]) == [['E', 'E', 'E', 'E'], ['E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E'], ['E', 'M', 'E', 'M'], ['M', 'E', 'E', 'E'], ['E', 'M', '2', 'M']]\nassert solution.updateBoard([['E', 'M', 'E', 'E', 'E', 'E'], ['M', 'M', 'M', 'E', 'E', 'M'], ['E', 'E', 'E', 'E', '1', 'E'], ['M', 'E', 'E', 'E', 'E', 'E']], [2, 4]) == [['E', 'M', 'E', 'E', 'E', 'E'], ['M', 'M', 'M', 'E', 'E', 'M'], ['E', 'E', 'E', 'E', '1', 'E'], ['M', 'E', 'E', 'E', 'E', 'E']]\nassert solution.updateBoard([['E', 'M', 'E', 'M', 'M'], ['E', 'E', 'E', 'E', 'M'], ['M', 'E', 'E', 'E', 'M'], ['E', 'M', 'E', 'E', 'E'], ['2', 'E', 'M', 'E', 'E'], ['M', 'E', 'M', 'E', 'E']], [4, 0]) == [['E', 'M', 'E', 'M', 'M'], ['E', 'E', 'E', 'E', 'M'], ['M', 'E', 'E', 'E', 'M'], ['E', 'M', 'E', 'E', 'E'], ['2', 'E', 'M', 'E', 'E'], ['M', 'E', 'M', 'E', 'E']]\nassert solution.updateBoard([['E', 'E', '1', 'M', 'E', 'M']], [0, 2]) == [['E', 'E', '1', 'M', 'E', 'M']]\nassert solution.updateBoard([['B', 'B']], [0, 0]) == [['B', 'B']]\nassert solution.updateBoard([['E', 'E', 'E'], ['E', 'E', 'E'], ['E', 'E', 'E'], ['E', '2', 'M'], ['M', 'E', 'E']], [3, 1]) == [['E', 'E', 'E'], ['E', 'E', 'E'], ['E', 'E', 'E'], ['E', '2', 'M'], ['M', 'E', 'E']]\nassert solution.updateBoard([['E', 'E', 'E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'M', 'E', 'E'], ['E', 'E', 'E', 'M', 'E', 'E'], ['E', 'E', 'E', 'E', '1', 'E']], [5, 4]) == [['E', 'E', 'E', 'E', 'M', 'E'], ['E', 'E', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'M', 'E', 'E'], ['E', 'E', 'E', 'M', 'E', 'E'], ['E', 'E', 'E', 'E', '1', 'E']]\nassert solution.updateBoard([['M', 'E', 'E', 'E'], ['1', 'E', 'E', 'E']], [1, 0]) == [['M', 'E', 'E', 'E'], ['1', 'E', 'E', 'E']]\nassert solution.updateBoard([['B', 'B', 'B']], [0, 0]) == [['B', 'B', 'B']]\nassert solution.updateBoard([['1', 'M', 'E']], [0, 0]) == [['1', 'M', 'E']]\nassert solution.updateBoard([['E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E'], ['E', 'E', 'M', 'M'], ['M', 'E', 'M', '4'], ['E', 'E', 'E', 'M']], [3, 3]) == [['E', 'E', 'E', 'E'], ['E', 'E', 'E', 'E'], ['E', 'E', 'M', 'M'], ['M', 'E', 'M', '4'], ['E', 'E', 'E', 'M']]\nassert solution.updateBoard([['E', 'E', '1', 'M']], [0, 2]) == [['E', 'E', '1', 'M']]\nassert solution.updateBoard([['B', 'B', 'B']], [0, 0]) == [['B', 'B', 'B']]\nassert solution.updateBoard([['E', 'M', 'E'], ['E', 'E', '1'], ['E', 'E', 'E'], ['M', 'E', 'M'], ['E', 'E', 'E'], ['E', 'E', 'M']], [1, 2]) == [['E', 'M', 'E'], ['E', 'E', '1'], ['E', 'E', 'E'], ['M', 'E', 'M'], ['E', 'E', 'E'], ['E', 'E', 'M']]\nassert solution.updateBoard([['M', 'E', 'E'], ['E', 'M', 'E'], ['E', '1', 'E'], ['E', 'E', 'E']], [2, 1]) == [['M', 'E', 'E'], ['E', 'M', 'E'], ['E', '1', 'E'], ['E', 'E', 'E']]\nassert solution.updateBoard([['E', 'E', 'E'], ['E', 'M', '1'], ['E', 'E', 'E']], [1, 2]) == [['E', 'E', 'E'], ['E', 'M', '1'], ['E', 'E', 'E']]\nassert solution.updateBoard([['E', 'M', 'M'], ['E', 'E', 'E'], ['M', 'E', 'M'], ['E', 'E', '2'], ['M', 'M', 'E']], [3, 2]) == [['E', 'M', 'M'], ['E', 'E', 'E'], ['M', 'E', 'M'], ['E', 'E', '2'], ['M', 'M', 'E']]\nassert solution.updateBoard([['1', 'E', 'E'], ['E', 'M', 'M'], ['E', 'M', 'E'], ['E', 'E', 'M'], ['E', 'E', 'E'], ['M', 'M', 'E']], [0, 0]) == [['1', 'E', 'E'], ['E', 'M', 'M'], ['E', 'M', 'E'], ['E', 'E', 'M'], ['E', 'E', 'E'], ['M', 'M', 'E']]\nassert solution.updateBoard([['M', 'M', 'M', 'E', 'E'], ['M', 'E', 'E', 'E', 'M'], ['E', 'E', 'M', '3', 'E'], ['E', 'E', 'E', 'M', 'E']], [2, 3]) == [['M', 'M', 'M', 'E', 'E'], ['M', 'E', 'E', 'E', 'M'], ['E', 'E', 'M', '3', 'E'], ['E', 'E', 'E', 'M', 'E']]\nassert solution.updateBoard([['E', 'E', 'M', 'E', '1', 'M']], [0, 4]) == [['E', 'E', 'M', 'E', '1', 'M']]\nassert solution.updateBoard([['M', '2'], ['M', 'E'], ['M', 'E'], ['M', 'M']], [0, 1]) == [['M', '2'], ['M', 'E'], ['M', 'E'], ['M', 'M']]\nassert solution.updateBoard([['M'], ['2'], ['M'], ['E'], ['M'], ['E']], [1, 0]) == [['M'], ['2'], ['M'], ['E'], ['M'], ['E']]\nassert solution.updateBoard([['E', 'M'], ['1', '1'], ['B', 'B']], [2, 1]) == [['E', 'M'], ['1', '1'], ['B', 'B']]\nassert solution.updateBoard([['E', 'E', '2', 'E', 'E'], ['E', 'M', 'E', 'M', 'E'], ['E', 'E', 'E', 'E', 'E']], [0, 2]) == [['E', 'E', '2', 'E', 'E'], ['E', 'M', 'E', 'M', 'E'], ['E', 'E', 'E', 'E', 'E']]\nassert solution.updateBoard([['E', 'E', 'M', 'E', 'M', 'E'], ['M', 'E', 'M', 'M', 'E', 'M'], ['E', 'E', 'E', 'E', 'E', 'M'], ['E', 'E', 'M', 'M', 'E', 'E'], ['E', '2', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E']], [4, 1]) == [['E', 'E', 'M', 'E', 'M', 'E'], ['M', 'E', 'M', 'M', 'E', 'M'], ['E', 'E', 'E', 'E', 'E', 'M'], ['E', 'E', 'M', 'M', 'E', 'E'], ['E', '2', 'E', 'E', 'E', 'E'], ['E', 'M', 'E', 'E', 'E', 'E']]\nassert solution.updateBoard([['M', '1', 'E']], [0, 1]) == [['M', '1', 'E']]",
  "inefficient_solution": "class Solution:\n    def updateBoard(self, board, click):\n        def dfs(i, j):\n            cnt = 0\n            adjacent = []\n            for x in range(i - 1, i + 2):\n                for y in range(j - 1, j + 2):\n                    adjacent.append((x, y))\n            for x, y in adjacent:\n                if 0 <= x < m and 0 <= y < n:\n                    if board[x][y] == \"M\":\n                        cnt += 1\n            if cnt:\n                board[i][j] = str(cnt)\n            else:\n                board[i][j] = \"B\"\n                for x, y in adjacent:\n                    if 0 <= x < m and 0 <= y < n and board[x][y] == \"E\":\n                        board[x][y] = \"E\"\n                        dfs(x, y)\n            return\n\n        m, n = len(board), len(board[0])\n        i, j = click\n        temp_board = [[cell for cell in row] for row in board]\n        temp_board[i][j] = \"T\"  # create a temporary board to avoid modifying the original board\n        dfs(i, j)\n        board = [[temp_board[row][col] for col in range(n)] for row in range(m)]\n        if board[i][j] == \"T\":\n            board[i][j] = board[i][j + 1]  # restore the original board\n            for x in range(m):\n                for y in range(n - 1):\n                    if board[x][y] == board[x][y + 1]:\n                        board[x][y] = board[x][y + 1]\n        return board",
  "is_python": true
}