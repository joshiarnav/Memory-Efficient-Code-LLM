{
  "problem_idx": 260,
  "task_name": "Single Number III",
  "markdown_description": "\nGiven an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in **any order**.\n\n\nYou must write an\u00a0algorithm that runs in linear runtime complexity and uses\u00a0only constant extra space.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,3,2,5]\n**Output:** [3,5]\n**Explanation:**  [5, 3] is also a valid answer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,0]\n**Output:** [-1,0]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [0,1]\n**Output:** [1,0]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 3 * 104`\n* `-231 <= nums[i] <= 231 - 1`\n* Each integer in `nums` will appear twice, only two integers will appear once.\n\n\n",
  "canonical_solution": "class Solution:\n    def singleNumber(self, nums: List[int]) -> List[int]:\n        xs = reduce(xor, nums)\n        a = 0\n        lb = xs & -xs\n        for x in nums:\n            if x & lb:\n                a ^= x\n        b = xs ^ a\n        return [a, b]\n",
  "test_case_generator": "\nimport random\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-10**9, 10**9), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.singleNumber(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.singleNumber(nums) == expected_result\n        print(f\"assert solution.singleNumber({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.singleNumber({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.singleNumber([-625144850, -873514343, -853513285, -936990690, 177875003, -875216337, 957789889]) == [-23687689, 312189936]\nassert solution.singleNumber([290353971, -142404249, 158666464]) == [-142404249, 406552019]\nassert solution.singleNumber([609955961, -684561830, 638907447, -833381868, -531994773, -355500203, 446060445, -345985919, 436532468]) == [292354310, -348792112]\nassert solution.singleNumber([-629116694, -229912742, -956774832, -722600583, 909591929, -993686828]) == [-993686828, 216646112]\nassert solution.singleNumber([-246063816, -608646110, 351189807, 874266791, 727859414, -652381725, -616584354, -116435200]) == [-101741973, 599731602]\nassert solution.singleNumber([331187373, -832320520, 211661248, -659918239, 754655171, 59670525]) == [754655171, 174584585]\nassert solution.singleNumber([785910764, 993495007, -253023198, -760032071]) == [-950183798, -253023198]\nassert solution.singleNumber([-5262401, 82073299, 667473392]) == [-5262401, 590119715]\nassert solution.singleNumber([242428170, 150214806, -935855543, 351111360, 418125030]) == [-935855543, 176598458]\nassert solution.singleNumber([398434897, 976418033, 829417741, 414570464, 216974705, 912890586, 905105424, -443392698, -211479196]) == [664314159, 978128635]\nassert solution.singleNumber([-692379597, 661014059, 252861899, -981987348]) == [-19973165, -981987348]\nassert solution.singleNumber([161389774, 584071160, 95219307, 243322683, 392102184, -961409420, -165035314, 59248991, -346343377, -188447722]) == [-393424330, -214091612]\nassert solution.singleNumber([-461308798, 596156194, -557182706, 406088875, -208305201, 823122094, -315739065, -241008418, -561711496]) == [110091043, 132897958]\nassert solution.singleNumber([-383984464, 664449791, -410548635, -728827830]) == [687990826, -728827830]\nassert solution.singleNumber([314903882, -64972484, 487129287, 465965072, -956772211, 51438232, -742008013, -812380632]) == [137628537, 967272662]\nassert solution.singleNumber([830363727, 375469678, 382092506, -587153497, 377470602]) == [-89773098, 0]\nassert solution.singleNumber([778371167, -858725804, 606140767, 544653081, -886073826, -325780200]) == [708003353, -345274030]\nassert solution.singleNumber([342361237, 616717553, -762840169, 894547597]) == [-762840169, 100396777]\nassert solution.singleNumber([25137429, -545210408, 655406917, 47073669, 71367179, -549229906, 149934056, 709587978]) == [-246881105, -204595227]\nassert solution.singleNumber([715639453, 19093050]) == [715639453, 19093050]\nassert solution.singleNumber([902358674, 493405796, 32257419]) == [32257419, 681582838]\nassert solution.singleNumber([583952805, 545949371, -4927751, 682482048, 874914398, -932864087, -59758975, -403800618, 449446696]) == [-907700017, -508590816]\nassert solution.singleNumber([-315857919, 20737183, -598717593, -439266753, 511981398]) == [-93779466, 830222182]\nassert solution.singleNumber([832667646, 374613461, 112997371, -244952871]) == [-510769417, 832667646]\nassert solution.singleNumber([-528564677, 777562565, 78123230, -117025058]) == [500234299, 777562565]\nassert solution.singleNumber([873299348, 18943606, 472232958, -134023825, -997000193, -975714664, 566438591, -410251669, -207265533]) == [159009607, -320993660]\nassert solution.singleNumber([-326740179, -379711979, -311582587]) == [-390727235, 0]\nassert solution.singleNumber([-779891290, -123653800, -241629364, -998709217, -331802834, 620679030, 360527678, 455947124, 495219192, 376725741]) == [-935212321, 434443381]\nassert solution.singleNumber([-305029049, 956602008, -115954386, 487847291, 362882229, -32917963]) == [164952082, -760478696]\nassert solution.singleNumber([872228483, 595448656, 624511110, 725300214]) == [872228483, 763340832]\nassert solution.singleNumber([778892000, 134596152, 599391876, 94884433, -322282568, -558509847, -552067112, 175056104, 72662066]) == [72662066, -411064212]\nassert solution.singleNumber([-828327705, 493508491, 495363094, 96137518, 132415510, -363952597, -531033411, -982937289, 250174274]) == [481618637, 288460396]\nassert solution.singleNumber([-482525566, 195384547, -999479705, -122197003]) == [931076465, -482525566]\nassert solution.singleNumber([-472108971, -444616778, 741675632, -964001733]) == [-964001733, 714509715]\nassert solution.singleNumber([932155800, -308146825, 41797603, -45759257, 975406811]) == [-535946700, -13106428]\nassert solution.singleNumber([-265161248, 268551292, -390787637, 664980620, 397930183]) == [538240567, 411367467]\nassert solution.singleNumber([407487828, 602815012, -140584631, 805950344, 752563822, 452277976, 854660568, -84230645, -642115068, 962650984]) == [13779660, -501357196]\nassert solution.singleNumber([-653139674, -246318983, 417086132, -757602843, -722239423, -540282835, -329790935, 371037674, -85449479, 692362009]) == [390436921, -674214280]\nassert solution.singleNumber([-211311569, -353222894, -941787694, -597408641, -973775525, -200255725, -499680137]) == [-53373329, 758074048]\nassert solution.singleNumber([692686592, 900721802, 47111404, 641936218, -185803831, 26746627, -920224992, 186922581, 566567443]) == [211959580, 578420876]\nassert solution.singleNumber([-910885385, -662603420, 48207534, -359481232, -635070024]) == [-910885385, -353782270]\nassert solution.singleNumber([437844989, 530459303, -155310759, 543539249]) == [530459303, -859627883]\nassert solution.singleNumber([841193603, -781681777, -466011133, -470205642, 624795860, 676274463]) == [-859519706, 624795860]\nassert solution.singleNumber([429357313, -84643111, -548496080, -424372108, 139985956]) == [-84643111, 674592865]\nassert solution.singleNumber([-741941201, -392132442, 417830586, -996979648, 92882700, 428370961, -996603613, 133149881]) == [1055862661, 109710193]\nassert solution.singleNumber([66850360, -560865607]) == [-560865607, 66850360]\nassert solution.singleNumber([-377971982, 686710705, 893287935, -815892060, -36427574, 787858863, 802812093]) == [563269575, -425979129]\nassert solution.singleNumber([542286446, -569775946, 42057490, -616301554, -777950085]) == [-777950085, 664340932]\nassert solution.singleNumber([325435839, 712444436, 242859479, -735245425, 284187605, -873205597, 286368163]) == [332605159, 981946817]\nassert solution.singleNumber([240593197, 463604168, 209601073, 86589332, -737579908, 958761731, 964550992, 247030255, -68916961]) == [-833492753, -201344144]\nassert solution.singleNumber([-770271025, 120857926, -190952904, -244586037, 593141144, -2265983, -451193392]) == [-593486459, 904636214]\nassert solution.singleNumber([-20056196, -218069731, 425465819, 70145190, 539878684, 984196820, 136778128, 202846404, 825535504, -625030801]) == [820140969, -714904234]\nassert solution.singleNumber([-843284802, 820575557, 58573167, 523157290, 632171607, -177636326]) == [372969597, 670809486]\nassert solution.singleNumber([468810524, -323402696, 198070260, 327511699, 929882048, 945500735]) == [677643991, -934218389]\nassert solution.singleNumber([-373033053, 911534747, -412760446, 313875631, -520699833, 437305836]) == [-894351534, 437305836]\nassert solution.singleNumber([975964649, -46884369, 863330898, 164439861, -314516875]) == [431580335, 156855227]\nassert solution.singleNumber([-158616262, 794008274, -105214071]) == [-105214071, -640143384]\nassert solution.singleNumber([-896294358, 75151784, 978624457, -761727340]) == [978624457, 477228310]\nassert solution.singleNumber([353662, 520289992, -838816996, 165193417, -862058859, -153860516, 910596755, 539567889, -923565355, -604834907]) == [772526143, -906966425]\nassert solution.singleNumber([448064555, 171668378, 930475503, 363969979, 521786246, 374462106, -872602173, 558093873, -854999764, 106715331]) == [-446332091, -7512159]\nassert solution.singleNumber([539340325, -592868717, 416137708, 259292652, 589772630, -471146761, -351262498, -325917511, 560773633, 246401960]) == [-761748231, -786339808]\nassert solution.singleNumber([897464108, -989961384]) == [897464108, -989961384]\nassert solution.singleNumber([845240933, -119731938, 465129734, -952350202, 361186047]) == [62786180, 0]\nassert solution.singleNumber([789179441, 454345545, 13096503]) == [886765903, 0]\nassert solution.singleNumber([74752474, 141050539, -865030078, -451816811, -736023348, -400066307, -977910369, -21870542]) == [-77046114, -652769628]\nassert solution.singleNumber([996327363, 703709549, 345585017, 823505232, -568760430, -265135528]) == [101338071, 524192922]\nassert solution.singleNumber([546190352, 102430530, 829105763, 753843514, -498906060, -28236577, -999996647]) == [190792101, -398904740]\nassert solution.singleNumber([-421723742, 104817436, 474802946, -77215295]) == [-77215295, -55670340]\nassert solution.singleNumber([-917820260, -789417622, 430306865, 88048845, 798723864]) == [-789417622, -95760008]\nassert solution.singleNumber([-401656149, 341517505, 388967814, -190913819, -891026174, 497929751, -890619785]) == [-544405777, -573888380]\nassert solution.singleNumber([-836589195, 857784468, -848505525, 918553482, -661022632, -896363126, 542699403]) == [588682165, 401329868]\nassert solution.singleNumber([165031144, -837250490]) == [-837250490, 165031144]\nassert solution.singleNumber([388302750, -626034751, -902143100, 662182852, 441807922, 306701809, -93996934, 580704946, -520892160]) == [-93880354, -357083702]\nassert solution.singleNumber([425584943, -254498989]) == [425584943, -254498989]\nassert solution.singleNumber([-423635074, 185421366, -681682513, 563785488, 203826838]) == [-681682513, -1072820018]\nassert solution.singleNumber([-579674400, -887363723, -87418687]) == [-887363723, 666420769]\nassert solution.singleNumber([-380728233, -852777767, -85896627, -761665786, -440586502, 692885402]) == [-561743165, 510156390]\nassert solution.singleNumber([867201497, -636392184, 354146199, -71438460, 168757047, 234264473, 769509230, 760223675, 768436716]) == [201466203, 565980174]\nassert solution.singleNumber([658752353, 208768929]) == [658752353, 208768929]\nassert solution.singleNumber([842828154, 563451553]) == [563451553, 842828154]\nassert solution.singleNumber([-328936190, -874931210, 99795287, 867466155, 784331214, 135946254, -662992440, -413890618, -856767803]) == [-89622471, 1043845434]\nassert solution.singleNumber([-92861828, 286307117, -326862623, -299416890, 638183906, -978776393, 508228000, 150423170, -739821722, -451487362]) == [943572347, 303429730]\nassert solution.singleNumber([642940316, 385375036, -619835877, 661947306, -643458539]) == [-384844619, -59077199]\nassert solution.singleNumber([724483743, -523913828, -468691841, -374305865, -569524565, -98041900]) == [1013721887, -569524565]\nassert solution.singleNumber([507189237, 320956245]) == [507189237, 320956245]\nassert solution.singleNumber([-595422688, -463150349, 316893501, 758173752, -247364456, -568476159, -847024305, 158992580]) == [-702935370, 982162034]\nassert solution.singleNumber([-886216686, -912025448, -458182157, -13726101, -481242043, 840921550]) == [-120656931, 814842180]\nassert solution.singleNumber([-441600176, -808508033]) == [-808508033, -441600176]\nassert solution.singleNumber([870541721, -944730319, 338701137]) == [-530330119, 0]\nassert solution.singleNumber([-886589068, -650025777, -176383676, 912662822, -929522989, -156905457, 82155620]) == [-411292141, 215521650]\nassert solution.singleNumber([6800572, -117366013, -35891107, -116658749, -19061605, 536654829, -930611245, 954636514, 322194517]) == [-951799187, 948001886]\nassert solution.singleNumber([-713384359, 850532236, -127781527]) == [850532236, 756591408]\nassert solution.singleNumber([412935188, -7221984, -376722428, 682431876, 48871123, 23462864, -621855859, 657507246]) == [610641335, -65112029]\nassert solution.singleNumber([-852997402, -485674939]) == [-485674939, -852997402]\nassert solution.singleNumber([-280926351, 130054242, -402017620]) == [-280926351, -271988018]\nassert solution.singleNumber([-591549287, 734432598, 617531880, -326035095, 493567889]) == [759663201, 252200126]\nassert solution.singleNumber([-581856241, 94280390, 767112808, 887678360]) == [-581856241, 483346742]\nassert solution.singleNumber([-683384102, 787417826, -220382676, 236877527, 212659944, -263786395]) == [-139125009, 238494881]\nassert solution.singleNumber([515281299, 182735008]) == [515281299, 182735008]\nassert solution.singleNumber([-565864721, -570367357, -418877933, -827779571, 433201253, 823463673, 65289004, -396221098, -260719079]) == [-245981961, -343531910]",
  "inefficient_solution": "class Solution:\n    def singleNumber(self, nums):\n        num_set = set()\n        result = []\n        \n        def find_single(nums):\n            for num in nums:\n                if num not in num_set:\n                    num_set.add(num)\n                else:\n                    num_set.remove(num)\n        \n        for _ in range(len(nums)):\n            find_single(nums)\n        \n        for num in nums:\n            if num not in num_set:\n                result.append(num)\n        \n        return result",
  "is_python": true
}