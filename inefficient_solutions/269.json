{
  "problem_idx": 269,
  "task_name": "Alien Dictionary",
  "markdown_description": "\nThere is a new alien language that uses the English alphabet. However, the order of the letters is unknown to you.\n\n\nYou are given a list of strings `words` from the alien language's dictionary. Now it is claimed that the strings in `words` are **sorted lexicographically** by the rules of this new language.\n\n\nIf this claim is incorrect, and the given arrangement of string in\u00a0`words`\u00a0cannot correspond to any order of letters,\u00a0return\u00a0`\"\".`\n\n\nOtherwise, return *a string of the unique letters in the new alien language sorted in **lexicographically increasing order** by the new language's rules**.* If there are multiple solutions, return ***any of them***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]\n**Output:** \"wertf\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"z\",\"x\"]\n**Output:** \"zx\"\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** words = [\"z\",\"x\",\"z\"]\n**Output:** \"\"\n**Explanation:** The order is invalid, so return \"\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 100`\n* `1 <= words[i].length <= 100`\n* `words[i]` consists of only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        g = [[False] * 26 for _ in range(26)]\n        s = [False] * 26\n        cnt = 0\n        n = len(words)\n        for i in range(n - 1):\n            for c in words[i]:\n                if cnt == 26:\n                    break\n                o = ord(c) - ord('a')\n                if not s[o]:\n                    cnt += 1\n                    s[o] = True\n            m = len(words[i])\n            for j in range(m):\n                if j >= len(words[i + 1]):\n                    return ''\n                c1, c2 = words[i][j], words[i + 1][j]\n                if c1 == c2:\n                    continue\n                o1, o2 = ord(c1) - ord('a'), ord(c2) - ord('a')\n                if g[o2][o1]:\n                    return ''\n                g[o1][o2] = True\n                break\n        for c in words[n - 1]:\n            if cnt == 26:\n                break\n            o = ord(c) - ord('a')\n            if not s[o]:\n                cnt += 1\n                s[o] = True\n\n        indegree = [0] * 26\n        for i in range(26):\n            for j in range(26):\n                if i != j and s[i] and s[j] and g[i][j]:\n                    indegree[j] += 1\n        q = deque()\n        ans = []\n        for i in range(26):\n            if s[i] and indegree[i] == 0:\n                q.append(i)\n        while q:\n            t = q.popleft()\n            ans.append(chr(t + ord('a')))\n            for i in range(26):\n                if s[i] and i != t and g[t][i]:\n                    indegree[i] -= 1\n                    if indegree[i] == 0:\n                        q.append(i)\n        return '' if len(ans) < cnt else ''.join(ans)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def alienOrder(self, words):\n        g = [[False] * 26 for _ in range(26)]\n        s = [False] * 26\n        cnt = 0\n        n = len(words)\n        for i in range(n - 1):\n            for c in words[i]:\n                if cnt == 26:\n                    break\n                o = ord(c) - ord('a')\n                if not s[o]:\n                    cnt += 1\n                    s[o] = True\n            m = len(words[i])\n            for j in range(m):\n                if j >= len(words[i + 1]):\n                    return ''\n                c1, c2 = words[i][j], words[i + 1][j]\n                if c1 == c2:\n                    continue\n                o1, o2 = ord(c1) - ord('a'), ord(c2) - ord('a')\n                if g[o2][o1]:\n                    return ''\n                g[o1][o2] = True\n                break\n        for c in words[n - 1]:\n            if cnt == 26:\n                break\n            o = ord(c) - ord('a')\n            if not s[o]:\n                cnt += 1\n                s[o] = True\n\n        indegree = [0] * 26\n        for i in range(26):\n            for j in range(26):\n                if i != j and s[i] and s[j] and g[i][j]:\n                    indegree[j] += 1\n        q = deque()\n        ans = []\n        for i in range(26):\n            if s[i] and indegree[i] == 0:\n                q.append(i)\n        while q:\n            t = q.popleft()\n            ans.append(chr(t + ord('a')))\n            for i in range(26):\n                if s[i] and i != t and g[t][i]:\n                    indegree[i] -= 1\n                    if indegree[i] == 0:\n                        q.append(i)\n        return '' if len(ans) < cnt else ''.join(ans)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random words list\n    words = [\"\".join(random.choices(string.ascii_lowercase, k=random.randint(1, 10))) for _ in range(random.randint(2, 10))]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.alienOrder(words)\n\n    return words, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.alienOrder(words) == expected_result\n        if expected_result != '':\n            print(f\"assert solution.alienOrder({words}) == '{expected_result}'\")\n            test_case_generator_results.append(f\"assert solution.alienOrder({words}) == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.alienOrder(['zlp', 'fklfbpuru', 'berj', 'pfxlqpkozs', 'gf', 'qvhlz', 'qfnw', 'mvesyuml']) == 'ehjklnorsuvwxyzfbpgqm'\nassert solution.alienOrder(['crjectbcwz', 'ymgtd', 'hgfzw']) == 'bcdefgjmrtwzyh'\nassert solution.alienOrder(['tpbkmsigk', 'snnlijlm', 'j']) == 'bgiklmnptsj'\nassert solution.alienOrder(['dwlmlmsv', 'mectkzovvn', 'vhnbl', 'ijkhwauy', 'hbnasrhp']) == 'abcdejklnoprstuwyzmvih'\nassert solution.alienOrder(['navzerb', 'x', 'twkuaabxk']) == 'abeknruvwzxt'\nassert solution.alienOrder(['ectggae', 'nkzgily', 'opyn', 'ivpodm', 'hyifvhgn', 'mv']) == 'acdefgklptvyznoihm'\nassert solution.alienOrder(['opgouj', 'asy', 'glgcgdsad', 'p', 'nginjyjvf', 'meqygwyu', 'dwwh']) == 'cefhijloqsuvwyagpnmd'\nassert solution.alienOrder(['bfgcrn', 'zehfcasxr']) == 'abcefghnrsxz'\nassert solution.alienOrder(['err', 'vknzpr', 'ageoll', 'sgsgu']) == 'egklnopruzvas'\nassert solution.alienOrder(['nhigubc', 'kejtaaeowc', 'lzx', 'mdvatx', 'q']) == 'abcdeghijnotuvwxzklmq'\nassert solution.alienOrder(['g', 'cgrltc', 'rxleymqu']) == 'eglmqtuxycr'\nassert solution.alienOrder(['dymgrecz', 'e', 'imazlvtk']) == 'acdgklmrtvyzei'\nassert solution.alienOrder(['hvrx', 'nz', 'ydzjg', 'juxvomw', 'teujp', 'kshhzuulj', 'rikjwctbi']) == 'bcdeghilmopsuvwxznyjtkr'\nassert solution.alienOrder(['uytkdmyzs', 'e', 'e', 'ifggaioir']) == 'adfgkmorstuyzei'\nassert solution.alienOrder(['vrvgfscj', 'ot', 'fsjh', 'pvudse', 'xaowje']) == 'acdeghjrstuvwofpx'\nassert solution.alienOrder(['uizq', 'ztqyvrozgp', 'bqdwjggij']) == 'dgijopqrtuvwyzb'\nassert solution.alienOrder(['g', 'xpzlmz', 'hsiulsxj', 'u', 'bpmhangd', 'dpui']) == 'agijlmnpszxhubd'\nassert solution.alienOrder(['tjf', 'g', 'uiblxpnthz', 'rsx', 'sfsfq']) == 'bfhijlnpqtxzgurs'\nassert solution.alienOrder(['fqzgs', 'k', 'vre', 'emoi', 'bfyiyveeo', 'bwfgkefzt', 'dpifamsb']) == 'afgimopqrstyzkwvebd'\nassert solution.alienOrder(['bycfuq', 'xzsozsnmr', 'tke', 'ngxx', 'lx']) == 'bcefgkmoqrsuyzxtnl'\nassert solution.alienOrder(['clyftgguct', 'nodjrqmn']) == 'cdfgjlmoqrtuyn'\nassert solution.alienOrder(['nqbrimz', 'uwxdh', 'qlzgrwoq', 'a', 'ibaacao', 'pgxo', 'sqtanppz', 'saaz', 'hlcqlwgacl', 'hzoadxfnyk']) == 'bcdfgklmnortwxyzuqaipsh'\nassert solution.alienOrder(['lkbqstnyft', 'h', 'bbsuzmn', 'xqwuphbq', 'mrx', 'qzqdsjrhs', 'jedzgd', 'yymcfpq']) == 'cdefgklnprstuwzhbxmqjy'\nassert solution.alienOrder(['tuxwrs', 'o']) == 'rstuwxo'\nassert solution.alienOrder(['hsfx', 'm', 'khlsdcicp', 'a', 'd', 'emizyyptf', 'jhqy', 'whaeum', 'voiq']) == 'cfhilopqstuxyzmkadejwv'\nassert solution.alienOrder(['vmecyfpvu', 'iqzky', 'ezkzzkgliz', 'flowbzd', 'uldv', 'mpsrbgdtyj', 'mtiya', 'gzywkgn', 'b', 'tqcyg']) == 'acdjklnopqrsvwyziefumgbt'\nassert solution.alienOrder(['w', 'xi', 'fjyv', 'nhpsxhyd', 'e', 'ojdxmriasn', 'a']) == 'dhijmprsvwyxfneoa'\nassert solution.alienOrder(['gxd', 'qymalv']) == 'adglmvxyq'\nassert solution.alienOrder(['fb', 'csutdvezcn', 'gzbhiwpdkr', 'xbb']) == 'bdefhiknprstuvwzcgx'\nassert solution.alienOrder(['gxuvlt', 'jjut', 'pssz', 'pmb', 'natg', 'z']) == 'abglstuvxjmpnz'\nassert solution.alienOrder(['hyulohbyi', 'xx', 'lwztixrhtd', 'iooyt', 'bfps', 'dopsmzec']) == 'cefhmoprstuwyzxlibd'\nassert solution.alienOrder(['xpf', 'o', 'rrbswmtsiz', 'pwgthhfv', 'icguhzbh', 'ftnonwa', 'kg', 'ujcnuhiogj', 'hrd', 'wokswiedis']) == 'abcdegjmnstvxzorpifkuhw'\nassert solution.alienOrder(['brpsbprao', 'wm']) == 'abmoprsw'\nassert solution.alienOrder(['baxdslnrnr', 'gaxguhwy', 'dnebp', 'knaqk', 'ohjasfn', 'eeanuogys', 'xxrvjwjztr', 'nuorxej']) == 'abfhjlpqrstuvwyzgdkoexn'\nassert solution.alienOrder(['iah', 'ohxnjqh', 'moedwogemp', 'jehoacvym', 'sel', 'bdbqioxsqq']) == 'acdeghilnpqvwxyomjsb'\nassert solution.alienOrder(['rhmydpi', 'kxlpnmbnlm', 'tvc', 'dsyzrnervk']) == 'bcehilmnprsvxyzktd'\nassert solution.alienOrder(['ijtm', 'tbpyxd', 'ymosr', 'sk', 'zupdv']) == 'bdijkmopruvxtysz'\nassert solution.alienOrder(['ndenlt', 'i', 'vsksbeecxz', 'a', 'klfrm', 'xq', 'xgx', 'oavz']) == 'bcdeflmnqrstzigvakxo'\nassert solution.alienOrder(['ou', 'miuc', 'r']) == 'cioumr'\nassert solution.alienOrder(['cgk', 'dcvfmx']) == 'cfgkmvxd'\nassert solution.alienOrder(['kzfdldcyg', 'uroymqmtas', 'pxtcv', 'ejcddnqgg', 'xrgoa', 'txgs', 'iqh']) == 'acdfghjklmnoqrsvyzupexti'\nassert solution.alienOrder(['chsxa', 'gkkh', 'ovyioul', 'rag', 'qouute', 'em', 'lfzdsor']) == 'acdfhikmstuvxyzgorqel'\nassert solution.alienOrder(['ewrtlzttkd', 'byz']) == 'deklrtwyzb'\nassert solution.alienOrder(['hta', 'oz', 'yvmfuha']) == 'afhmtuvzoy'\nassert solution.alienOrder(['rzpwlcl', 'd', 'a', 'j', 'p']) == 'clrwzdajp'\nassert solution.alienOrder(['kwhdwonqy', 'doufoa', 'higjkxjwc', 'c', 'a', 'pwow', 'bcq', 'zccyi', 'jfqivh']) == 'fgiknoquvwxydhcapbzj'\nassert solution.alienOrder(['glpcyjbnd', 'jjjuuz', 'z', 'mc', 'ejp']) == 'bcdglnpuyjzme'\nassert solution.alienOrder(['ictrgh', 'v']) == 'cghirtv'\nassert solution.alienOrder(['oibacbz', 'vdaunn', 'd', 'flsmewlwn', 'lbp', 'jrkmlesb']) == 'abceikmnoprsuwzvdflj'\nassert solution.alienOrder(['uvmdm', 'guuljtoq', 'yigegsmc', 'haxzwvajg', 'mmyhpqzd', 'xgt', 'vnyxhbpbx', 'i']) == 'abcdejlnopqstuwzgyhmxvi'\nassert solution.alienOrder(['xun', 'gugsddm', 'hefe']) == 'defmnsuxgh'\nassert solution.alienOrder(['bmz', 'dhmbijljal']) == 'abhijlmzd'\nassert solution.alienOrder(['dtzz', 'mlilxhetdm', 'hl', 'nii']) == 'deiltxzmhn'\nassert solution.alienOrder(['entlrvbod', 'jlrqmbcwnj']) == 'bcdelmnoqrtvwj'\nassert solution.alienOrder(['tkvwuwab', 'wmgyu', 'dnepvm']) == 'abegkmnptuvywd'\nassert solution.alienOrder(['ez', 'yxmbh', 'qcatj', 'ghtmauqmg', 'jwtm', 'lbn']) == 'abcehmntuwxzyqgjl'\nassert solution.alienOrder(['qcbajgtdzt', 'qtbj', 'gah', 'rjr', 'nizuz', 't', 'xsjfnmef', 'ikxv', 'owrwpbavdz']) == 'abcdefhjkmpqsuvwzgrntxio'\nassert solution.alienOrder(['lurisbvksc', 'rimdszvruh', 'dicffrrzp', 'dc', 'cnc']) == 'bfhiklmnpsuvzrdc'\nassert solution.alienOrder(['fkczi', 'htfxpghzve']) == 'cefgikptvxzh'\nassert solution.alienOrder(['hw', 'nplv', 'qum']) == 'hlmpuvwnq'\nassert solution.alienOrder(['fws', 'z', 'zeegblar', 'l', 'ojnlnem', 'dyjnhkykfl', 'iqddchxy', 'xrxhe']) == 'abcefghjkmnqrswyzlodix'\nassert solution.alienOrder(['bn', 'ybk', 'sxca', 'qkce', 'wngy', 'lcj', 'kxkc', 'kbwe']) == 'acegjnxbysqwlk'\nassert solution.alienOrder(['sdzkbmjigy', 'kd', 'kpyaddmr']) == 'abdgijmrsyzpk'\nassert solution.alienOrder(['z', 'ztxrsn']) == 'nrstxz'\nassert solution.alienOrder(['oyfssjai', 'hftmt']) == 'afijmostyh'",
  "inefficient_solution": "class Solution:\n    def alienOrder(self, words: List[str]) -> str:\n        counts = {i: 0 for i in range(26)}\n        for w in words:\n            for c in w:\n                counts[ord(c) - ord('a')] += 1\n\n        g = [[0] * 26 for _ in range(26)]\n        for i in range(len(words) - 1):\n            for j in range(min(len(words[i]), len(words[i + 1]))):\n                g1, g2 = ord(words[i][j]) - ord('a'), ord(words[i + 1][j]) - ord('a')\n                g[g1][g2] = 1\n                counts[g1] += 1\n                if words[i][j] != words[i + 1][j]:\n                    break\n            else:\n                counts[ord(words[i][-1]) - ord('a')] += 1\n\n        for i in range(26):\n            if counts[i] == 0 and chr(i + ord('a')) in ''.join(words):\n                return \"\"\n\n        indegree = [0] * 26\n        for i in range(26):\n            for j in range(26):\n                if g[i][j] == 1:\n                    indegree[j] += 1\n\n        q = deque()\n        for i in range(26):\n            if indegree[i] == 0 and chr(i + ord('a')) in ''.join(words):\n                q.append(i)\n\n        ans = []\n        while q:\n            t = q.popleft()\n            ans.append(chr(t + ord('a')))\n            for i in range(26):\n                if g[t][i] == 1:\n                    indegree[i] -= 1\n                    if indegree[i] == 0 and chr(i + ord('a')) in ''.join(words):\n                        q.append(i)\n\n        return ''.join(ans)",
  "is_python": true
}