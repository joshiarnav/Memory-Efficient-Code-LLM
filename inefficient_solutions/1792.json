{
  "problem_idx": 1792,
  "task_name": "Maximum Average Pass Ratio",
  "markdown_description": "\nThere is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.\n\n\nYou are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are **guaranteed** to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that **maximizes** the **average** pass ratio across **all** the classes.\n\n\nThe **pass ratio** of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The **average pass ratio** is the sum of pass ratios of all the classes divided by the number of the classes.\n\n\nReturn *the **maximum** possible average pass ratio after assigning the* `extraStudents` *students.* Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** classes = [[1,2],[3,5],[2,2]], extraStudents = 2\n**Output:** 0.78333\n**Explanation:** You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4\n**Output:** 0.53485\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= classes.length <= 105`\n* `classes[i].length == 2`\n* `1 <= passi <= totali <= 105`\n* `1 <= extraStudents <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\n        h = [(a / b - (a + 1) / (b + 1), a, b) for a, b in classes]\n        heapify(h)\n        for _ in range(extraStudents):\n            _, a, b = heappop(h)\n            a, b = a + 1, b + 1\n            heappush(h, (a / b - (a + 1) / (b + 1), a, b))\n        return sum(v[1] / v[2] for v in h) / len(classes)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxAverageRatio(self, classes, extraStudents):\n        h = [(a / b - (a + 1) / (b + 1), a, b) for a, b in classes]\n        heapify(h)\n        for _ in range(extraStudents):\n            _, a, b = heappop(h)\n            a, b = a + 1, b + 1\n            heappush(h, (a / b - (a + 1) / (b + 1), a, b))\n        return sum(v[1] / v[2] for v in h) / len(classes)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random classes list\n    classes = []\n    for i in range(random.randint(1, 11)):\n        pass_i = random.randint(1, 101)\n        total_i = random.randint(pass_i, 101)\n        classes.append([pass_i, total_i])\n    \n    # Generate a random number of extra students\n    extraStudents = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxAverageRatio(classes, extraStudents)\n\n    return classes, extraStudents, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        classes, extraStudents, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxAverageRatio(classes, extraStudents) == expected_result\n        print(f\"assert solution.maxAverageRatio({classes}, {extraStudents}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxAverageRatio({classes}, {extraStudents}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxAverageRatio([[20, 48], [55, 61], [101, 101]], 67) == 0.8860536944642433\nassert solution.maxAverageRatio([[7, 13], [91, 99]], 39) == 0.9019036519036518\nassert solution.maxAverageRatio([[10, 59], [90, 94], [60, 90], [15, 24], [49, 80], [94, 96], [30, 81], [27, 94]], 63) == 0.6521848503663211\nassert solution.maxAverageRatio([[19, 23], [79, 83], [20, 23], [93, 96], [77, 87]], 75) == 0.9384063175780042\nassert solution.maxAverageRatio([[24, 61], [93, 101]], 83) == 0.8319238173817383\nassert solution.maxAverageRatio([[35, 47], [13, 44], [96, 98], [63, 97], [52, 82]], 73) == 0.7546778080303447\nassert solution.maxAverageRatio([[31, 72], [48, 59], [72, 92], [17, 33], [36, 63], [83, 99], [87, 97], [52, 68]], 90) == 0.7691243464113967\nassert solution.maxAverageRatio([[68, 98], [89, 97]], 40) == 0.8500672344240251\nassert solution.maxAverageRatio([[71, 86], [38, 92]], 42) == 0.7112981603609858\nassert solution.maxAverageRatio([[71, 94], [78, 95], [94, 94], [92, 94], [57, 87], [5, 5], [5, 73], [31, 31], [9, 10], [65, 86]], 16) == 0.8102445188415549\nassert solution.maxAverageRatio([[50, 62], [37, 83]], 72) == 0.75808599695586\nassert solution.maxAverageRatio([[91, 93]], 96) == 0.9894179894179894\nassert solution.maxAverageRatio([[41, 67], [63, 87], [80, 86], [82, 97], [21, 29], [74, 94], [66, 93], [55, 100], [97, 100], [43, 44], [73, 97]], 97) == 0.8154194800031618\nassert solution.maxAverageRatio([[25, 46], [16, 79]], 65) == 0.5874999999999999\nassert solution.maxAverageRatio([[34, 54], [85, 99], [89, 91], [82, 101], [71, 73]], 77) == 0.894610602817869\nassert solution.maxAverageRatio([[29, 76], [68, 95], [35, 64], [2, 97], [49, 94], [4, 23], [14, 39], [53, 57], [42, 58], [32, 35], [49, 99]], 71) == 0.6040479152575401\nassert solution.maxAverageRatio([[62, 86], [72, 74], [100, 100], [51, 82], [20, 70], [38, 52], [4, 10], [27, 76], [10, 74], [20, 66], [70, 91]], 91) == 0.6621672451342596\nassert solution.maxAverageRatio([[95, 97], [47, 76], [22, 95], [50, 85], [66, 91], [25, 47], [2, 20], [100, 100], [54, 61], [23, 77], [87, 88]], 21) == 0.6734877754583152\nassert solution.maxAverageRatio([[52, 81]], 80) == 0.8198757763975155\nassert solution.maxAverageRatio([[46, 76], [18, 48]], 40) == 0.6341463414634146\nassert solution.maxAverageRatio([[22, 46], [12, 22], [33, 53], [43, 81], [92, 96], [86, 87], [32, 75]], 101) == 0.7513460496481599\nassert solution.maxAverageRatio([[16, 27], [95, 100], [83, 100], [31, 64], [42, 68], [37, 55], [33, 85], [94, 94], [51, 86], [46, 58], [24, 39]], 73) == 0.731871370683601\nassert solution.maxAverageRatio([[95, 100]], 81) == 0.9723756906077348\nassert solution.maxAverageRatio([[43, 91], [77, 87], [82, 90], [68, 77], [51, 81], [14, 43], [5, 89], [12, 83], [34, 98], [11, 37], [46, 96]], 21) == 0.5200001405245436\nassert solution.maxAverageRatio([[96, 97], [61, 65], [3, 86], [69, 87], [86, 90], [59, 100], [25, 99], [100, 100]], 5) == 0.7009060755474728\nassert solution.maxAverageRatio([[65, 76], [25, 45], [56, 87], [46, 95], [79, 88], [88, 91], [101, 101], [40, 62], [87, 101]], 46) == 0.7968592382150456\nassert solution.maxAverageRatio([[38, 70], [74, 89], [6, 36], [18, 43], [76, 96], [21, 96], [81, 92], [26, 95], [69, 93], [83, 96]], 93) == 0.657962211982741\nassert solution.maxAverageRatio([[86, 90], [23, 78], [97, 100], [39, 65]], 27) == 0.7510473764767782\nassert solution.maxAverageRatio([[65, 88], [75, 76], [62, 78], [84, 90], [2, 72], [38, 51]], 78) == 0.7900948071677149\nassert solution.maxAverageRatio([[32, 59]], 69) == 0.7890625\nassert solution.maxAverageRatio([[87, 101], [59, 84]], 100) == 0.865935834255255\nassert solution.maxAverageRatio([[99, 99], [94, 99], [23, 32], [46, 62], [66, 86], [74, 77], [68, 97]], 26) == 0.8529502932325385\nassert solution.maxAverageRatio([[97, 99]], 57) == 0.9871794871794872\nassert solution.maxAverageRatio([[70, 82]], 26) == 0.8888888888888888\nassert solution.maxAverageRatio([[21, 60], [40, 49], [40, 65], [3, 24]], 11) == 0.5454277864992151\nassert solution.maxAverageRatio([[51, 73], [45, 66], [69, 95], [35, 92], [75, 88]], 74) == 0.7301389089962583\nassert solution.maxAverageRatio([[40, 65], [12, 30], [14, 64], [57, 68], [92, 95], [47, 90], [11, 66], [17, 86], [27, 101], [35, 55], [8, 22]], 34) == 0.5188884261721658\nassert solution.maxAverageRatio([[60, 96]], 19) == 0.6869565217391305\nassert solution.maxAverageRatio([[31, 73], [12, 70], [36, 93], [19, 27], [10, 22], [49, 54], [34, 88]], 52) == 0.5681523710948699\nassert solution.maxAverageRatio([[3, 88], [71, 74], [92, 96], [42, 65], [11, 72], [74, 76], [100, 100], [49, 52], [78, 95], [67, 79]], 91) == 0.7995453892636687\nassert solution.maxAverageRatio([[42, 49], [67, 101], [55, 96], [36, 73], [15, 35], [85, 88], [14, 87], [88, 88], [47, 73]], 15) == 0.6621864696352682\nassert solution.maxAverageRatio([[86, 94], [45, 88], [40, 93], [63, 91]], 42) == 0.6871373697447563\nassert solution.maxAverageRatio([[70, 73]], 44) == 0.9743589743589743\nassert solution.maxAverageRatio([[67, 71], [86, 101], [31, 79], [70, 73]], 101) == 0.8718461408170529\nassert solution.maxAverageRatio([[55, 61]], 10) == 0.9154929577464789\nassert solution.maxAverageRatio([[6, 27], [50, 59], [6, 46], [42, 96]], 12) == 0.47132444079326646\nassert solution.maxAverageRatio([[13, 69], [19, 100], [20, 41], [69, 92], [4, 94]], 81) == 0.4650744388679319\nassert solution.maxAverageRatio([[7, 99], [72, 93], [26, 42], [64, 70], [92, 96]], 55) == 0.7408567720747922\nassert solution.maxAverageRatio([[95, 98], [82, 98], [17, 62]], 81) == 0.8304790447647591\nassert solution.maxAverageRatio([[8, 60], [98, 99], [78, 87], [61, 65], [47, 80], [67, 76]], 11) == 0.7602661389449495\nassert solution.maxAverageRatio([[76, 91], [55, 76], [23, 29], [46, 92], [100, 101]], 49) == 0.8098951320373462\nassert solution.maxAverageRatio([[17, 31], [59, 100], [91, 91], [46, 83], [59, 80], [4, 10], [16, 46], [85, 93], [34, 42]], 21) == 0.7049277340444393\nassert solution.maxAverageRatio([[60, 97]], 85) == 0.7967032967032966\nassert solution.maxAverageRatio([[68, 70], [64, 75], [46, 49], [80, 90], [74, 96], [27, 33], [4, 58], [31, 54], [45, 79]], 22) == 0.7455706425120732\nassert solution.maxAverageRatio([[34, 69], [3, 66], [78, 80], [76, 81], [52, 53], [3, 74], [62, 88], [5, 30]], 36) == 0.609518049594017\nassert solution.maxAverageRatio([[17, 60], [54, 96], [78, 97], [27, 33], [38, 47], [12, 77], [76, 76], [43, 99], [75, 91], [14, 22], [4, 80]], 36) == 0.6147372396688737\nassert solution.maxAverageRatio([[96, 99]], 79) == 0.9831460674157303\nassert solution.maxAverageRatio([[58, 61], [69, 93], [65, 80], [15, 78], [74, 74], [15, 78], [59, 77]], 44) == 0.7159269888908402\nassert solution.maxAverageRatio([[47, 97], [56, 80], [74, 76], [68, 78], [55, 57]], 51) == 0.8363912953047079\nassert solution.maxAverageRatio([[60, 80], [90, 95]], 11) == 0.8637941006362059\nassert solution.maxAverageRatio([[91, 100], [37, 101], [30, 74]], 8) == 0.5799170892699026\nassert solution.maxAverageRatio([[64, 82], [5, 35], [72, 74], [77, 91], [9, 64], [52, 78], [86, 96], [95, 101], [100, 100], [66, 66]], 82) == 0.8184252139954264\nassert solution.maxAverageRatio([[23, 41], [52, 76], [3, 23], [89, 96], [98, 100], [22, 91]], 41) == 0.6855066763547525\nassert solution.maxAverageRatio([[75, 84], [69, 69], [84, 97], [46, 52], [29, 61]], 30) == 0.8583607114534949\nassert solution.maxAverageRatio([[26, 63]], 61) == 0.7016129032258065\nassert solution.maxAverageRatio([[51, 98]], 60) == 0.7025316455696202\nassert solution.maxAverageRatio([[73, 90], [81, 85], [6, 11], [88, 88], [13, 86], [75, 95], [88, 91], [91, 98], [36, 92]], 21) == 0.7617228485787249\nassert solution.maxAverageRatio([[51, 90], [80, 88], [55, 86]], 72) == 0.7821412401565073\nassert solution.maxAverageRatio([[35, 40]], 29) == 0.927536231884058\nassert solution.maxAverageRatio([[6, 9], [10, 19], [72, 76], [13, 35], [12, 99]], 8) == 0.5635871070196012\nassert solution.maxAverageRatio([[42, 89], [92, 94], [45, 84], [92, 98], [64, 76], [56, 82], [43, 73]], 57) == 0.7576423070405449\nassert solution.maxAverageRatio([[75, 83], [47, 94], [17, 81], [9, 17], [2, 100], [66, 76], [25, 49], [9, 84], [15, 21], [38, 95], [4, 29]], 17) == 0.4782471472524985\nassert solution.maxAverageRatio([[49, 94], [69, 75]], 1) == 0.7231578947368421\nassert solution.maxAverageRatio([[71, 71]], 50) == 1.0\nassert solution.maxAverageRatio([[32, 91]], 59) == 0.6066666666666667\nassert solution.maxAverageRatio([[46, 95], [91, 94], [52, 54], [24, 50], [20, 21], [33, 36], [13, 81], [53, 86]], 22) == 0.7170649935904521\nassert solution.maxAverageRatio([[83, 86], [46, 61], [83, 95], [63, 63], [4, 18], [50, 93], [97, 101], [79, 91], [11, 60], [98, 100]], 70) == 0.8159413730692364\nassert solution.maxAverageRatio([[58, 89], [22, 22], [80, 99], [24, 73], [74, 99], [89, 92], [3, 33]], 67) == 0.7535343959830411\nassert solution.maxAverageRatio([[93, 96], [68, 93], [54, 92], [38, 64]], 96) == 0.8005209666944058\nassert solution.maxAverageRatio([[1, 35], [53, 97], [9, 91], [97, 97], [99, 101], [34, 52], [46, 82]], 69) == 0.6580149458106622\nassert solution.maxAverageRatio([[99, 101], [55, 69], [98, 100], [100, 100], [12, 37], [59, 87], [51, 79]], 39) == 0.8217324364691769\nassert solution.maxAverageRatio([[42, 64], [58, 71], [68, 71], [90, 94], [97, 98], [51, 67], [63, 85], [67, 87], [16, 75]], 49) == 0.7978048219962849\nassert solution.maxAverageRatio([[8, 33], [89, 96], [90, 91], [96, 99]], 54) == 0.8996087425505529\nassert solution.maxAverageRatio([[20, 77]], 61) == 0.5869565217391305\nassert solution.maxAverageRatio([[13, 68]], 29) == 0.4329896907216495\nassert solution.maxAverageRatio([[15, 33], [8, 33], [9, 78], [45, 75], [72, 88], [60, 75], [85, 87], [4, 59]], 27) == 0.5605832103779025\nassert solution.maxAverageRatio([[83, 100], [91, 98], [30, 61]], 72) == 0.8418295739348371\nassert solution.maxAverageRatio([[22, 76], [78, 97], [30, 83], [71, 80], [81, 87], [5, 21], [35, 73], [60, 80]], 38) == 0.6575310410586952\nassert solution.maxAverageRatio([[34, 55], [75, 91], [6, 69], [67, 73], [26, 26], [86, 92], [58, 75], [22, 24]], 21) == 0.785618558778922\nassert solution.maxAverageRatio([[84, 98], [11, 93]], 73) == 0.6815834767641996\nassert solution.maxAverageRatio([[2, 47], [75, 76], [57, 60], [62, 64], [26, 33], [39, 59], [6, 101], [68, 73], [81, 96], [40, 52], [97, 100]], 40) == 0.7662458200517168\nassert solution.maxAverageRatio([[54, 76], [81, 101], [58, 100], [18, 30], [45, 48], [19, 80], [88, 100], [67, 88], [82, 90], [83, 89], [13, 77]], 80) == 0.7385158308686868\nassert solution.maxAverageRatio([[7, 63], [17, 66], [63, 66], [55, 65], [10, 28], [42, 43], [94, 97], [56, 90], [45, 57], [81, 88]], 47) == 0.7359698084381916\nassert solution.maxAverageRatio([[57, 81], [9, 27]], 85) == 0.7834951456310679\nassert solution.maxAverageRatio([[91, 92], [1, 27], [32, 99], [24, 51]], 58) == 0.6339521891152325\nassert solution.maxAverageRatio([[93, 98], [101, 101], [50, 64], [29, 75], [93, 94], [77, 88], [2, 79], [26, 88], [65, 92], [94, 96], [20, 66]], 48) == 0.7014582015964408\nassert solution.maxAverageRatio([[93, 99], [84, 90], [6, 89], [50, 67], [74, 78], [48, 97], [6, 66], [50, 93]], 15) == 0.6160986206642856\nassert solution.maxAverageRatio([[84, 93], [31, 84], [55, 73], [98, 98], [84, 99], [87, 92], [25, 75], [87, 88], [34, 75]], 3) == 0.735642129041714\nassert solution.maxAverageRatio([[31, 33], [28, 49], [19, 83], [44, 65], [56, 74], [38, 66], [9, 88], [89, 98]], 43) == 0.6380203434307302\nassert solution.maxAverageRatio([[67, 67]], 37) == 1.0",
  "inefficient_solution": "class Solution:\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\n        ratios = []\n        for i, (passi, totali) in enumerate(classes):\n            ratios.append((passi / totali, i))\n        for _ in range(extraStudents):\n            ratios.sort(key=lambda x: x[0])\n            passi, totali = classes[ratios[0][1]]\n            new_passi, new_totali = passi + 1, totali + 1\n            classes[ratios[0][1]] = [new_passi, new_totali]\n            ratios[0] = (new_passi / new_totali, ratios[0][1])\n        ratios.sort(key=lambda x: x[0], reverse=True)\n        return sum(classes[ratio[1]][0] / classes[ratio[1]][1] for ratio in ratios[:len(classes)]) / len(classes)",
  "is_python": true
}