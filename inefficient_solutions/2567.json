{
  "problem_idx": 2567,
  "task_name": "Minimum Score by Changing Two Elements",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`.\n\n\n* The **low** score of `nums` is the minimum value of `|nums[i]\u00a0- nums[j]|` over all `0 <= i < j < nums.length`.\n* The **high** score of\u00a0`nums` is the maximum value of `|nums[i]\u00a0- nums[j]|` over all `0 <= i < j < nums.length`.\n* The **score** of `nums` is the sum of the **high** and **low** scores of nums.\n\n\nTo minimize the score of `nums`, we can change the value of **at most two** elements of `nums`.\n\n\nReturn *the **minimum** possible **score** after changing\u00a0the value of **at most two** elements o*f `nums`.\n\n\nNote that `|x|` denotes the absolute value of `x`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,4,3]\n**Output:** 0\n**Explanation:** Change value of nums[1] and nums[2] to 1 so that nums becomes [1,1,1]. Now, the value of |nums[i] - nums[j]| is always equal to 0, so we return 0 + 0 = 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,7,8,5]\n**Output:** 3\n**Explanation:** Change nums[0] and nums[1] to be 6. Now nums becomes [6,6,7,8,5].\nOur low score is achieved when i = 0 and j = 1, in which case |nums[i] - nums[j]| = |6 - 6| = 0.\nOur high score is achieved when i = 3 and j = 4, in which case |nums[i] - nums[j]| = |8 - 5| = 3.\nThe sum of our high and low score is 3, which we can prove to be minimal.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimizeSum(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(nums[-1] - nums[2], nums[-2] - nums[1], nums[-3] - nums[0])\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimizeSum(self, nums):\n        nums.sort()\n        return min(nums[-1] - nums[2], nums[-2] - nums[1], nums[-3] - nums[0])\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 1000000001), random.randint(3, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimizeSum(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimizeSum(nums) == expected_result\n        print(f\"assert solution.minimizeSum({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimizeSum({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimizeSum([121776611, 133995765, 321943614, 429066421, 431719421, 585058303, 757056148, 822602738, 864270881]) == 542327267\nassert solution.minimizeSum([46272261, 110867081, 194363010, 243650955, 464936748, 623146118, 664386037, 874070466]) == 553518956\nassert solution.minimizeSum([207156821, 370631107, 443126995, 720981898, 924209195]) == 235970174\nassert solution.minimizeSum([103104396, 374283054, 462607854, 647761956]) == 88324800\nassert solution.minimizeSum([291680658, 383614118, 611561551, 625520830, 731712620, 840620976, 932389381]) == 320827830\nassert solution.minimizeSum([203974445, 481416074, 684952260, 696599783, 726035311]) == 41083051\nassert solution.minimizeSum([400454340, 447527253, 610967729, 631244835, 874130346]) == 183717582\nassert solution.minimizeSum([187116484, 195513863, 224763496, 387484944, 427336228, 465507140, 628214485, 635177885, 801864107, 818132423]) == 448061401\nassert solution.minimizeSum([165528176, 293484048, 294083638, 452427134, 692823818, 730180812]) == 286898958\nassert solution.minimizeSum([84601246, 127047308, 467399079, 714538240]) == 42446062\nassert solution.minimizeSum([79956185, 104276499, 324948695, 405203206, 536821313, 652491015, 712064866, 831041143]) == 506092448\nassert solution.minimizeSum([59753694, 90038000, 253451897, 436537145, 469568664, 480600055, 494480351, 843864852]) == 404442351\nassert solution.minimizeSum([19109392, 35501294, 36875748, 71029150, 174249580, 238298915, 398290623, 569205858, 855605320, 978649562]) == 550096466\nassert solution.minimizeSum([424500639, 440676804, 876287393, 926662862, 938034906]) == 61747513\nassert solution.minimizeSum([64820396, 109617689, 538044044]) == 0\nassert solution.minimizeSum([133137142, 210113512, 394217474, 520851585, 969524681]) == 261080332\nassert solution.minimizeSum([197009020, 224069945, 314795766, 417543094, 452791619, 856474947, 944724902]) == 255782599\nassert solution.minimizeSum([72546007, 179815193, 432991615]) == 0\nassert solution.minimizeSum([66949129, 205950061, 328418780, 437448791, 467109725, 591956685, 641183665, 914543037]) == 435233604\nassert solution.minimizeSum([22446575, 59675887, 66193153, 167954482, 263141069, 302068413, 384739213, 557993014, 758868823]) == 362292638\nassert solution.minimizeSum([436822070, 444153435, 471238935, 808258429, 870904950, 912281311]) == 371436359\nassert solution.minimizeSum([145330250, 294041584, 502507544]) == 0\nassert solution.minimizeSum([84227647, 228431178, 300258233, 307273775, 422246727, 698506812, 783011629, 867103830]) == 554580451\nassert solution.minimizeSum([46936898, 213073473, 298578388, 358628139, 460622164, 661152270, 734466442, 988821760]) == 521392969\nassert solution.minimizeSum([238879032, 530370288, 563975493]) == 0\nassert solution.minimizeSum([47838146, 409619020, 654458307, 728585161, 894345962]) == 239887655\nassert solution.minimizeSum([85267242, 85614049, 675471440, 718109214, 765542970, 961638431]) == 286166991\nassert solution.minimizeSum([367635820, 428223210, 437257605, 472911539]) == 9034395\nassert solution.minimizeSum([82034869, 666011884, 692595976, 753171410, 918038582, 924178059, 943735340, 964270946, 980707535]) == 288111559\nassert solution.minimizeSum([41015503, 208099346, 304730982, 480343809, 826675730]) == 263715479\nassert solution.minimizeSum([3307863, 362271075, 398948420, 470785770, 627707339, 737441220, 813895815, 885975058, 996195853]) == 523703983\nassert solution.minimizeSum([122294939, 331831049, 521908986, 571103656, 930639294, 980406199]) == 448808717\nassert solution.minimizeSum([222992294, 387251301, 551235606, 680759643, 713115271]) == 161879665\nassert solution.minimizeSum([219721089, 229914646, 379925703, 419240520, 425966262, 481498221, 670626116, 941358343, 988284982]) == 450905027\nassert solution.minimizeSum([44228132, 252007498, 429198441, 506848541, 739778231, 746410078, 970816398]) == 494402580\nassert solution.minimizeSum([7333212, 29394639, 220757852, 260004509, 269849185, 275685448, 478612341, 642252595, 664724816, 780407749]) == 559649897\nassert solution.minimizeSum([22940382, 102550101, 117781256, 463258772, 562818453, 586101000, 771107898, 841585415]) == 563160618\nassert solution.minimizeSum([136767335, 298627937, 454722377, 790855478, 920059895, 942613784]) == 487891407\nassert solution.minimizeSum([83929608, 142703575, 416857966, 458216731, 534500218, 539180665, 598826578, 677059809, 679717404, 691307721]) == 274449755\nassert solution.minimizeSum([21752645, 174877686, 213223500, 231505489, 248546976, 511383025, 617296957, 647020176, 777686251, 944795799]) == 602808565\nassert solution.minimizeSum([89106047, 292386656, 471563664, 754410508, 822427143, 983001384]) == 511437720\nassert solution.minimizeSum([13695229, 357165189, 487217939, 729226350, 736077984, 891887984]) == 378912795\nassert solution.minimizeSum([197734783, 203535265, 211109174, 316243182, 578252323, 621958457]) == 118508399\nassert solution.minimizeSum([2656902, 109273429, 704510822, 850672912]) == 106616527\nassert solution.minimizeSum([75628949, 214695445, 685437522]) == 0\nassert solution.minimizeSum([182800598, 449113027, 707132652, 716292345, 905454363]) == 198321711\nassert solution.minimizeSum([26469128, 64885593, 131538815, 200240964, 200299006, 209365914, 298133908, 565994569, 622947800]) == 271664780\nassert solution.minimizeSum([338490635, 338620818, 470010909, 747587484]) == 130183\nassert solution.minimizeSum([222484928, 360505126, 420792310, 623221771, 636912134, 667003689, 725332507, 788670918, 943051751, 961183446]) == 540391136\nassert solution.minimizeSum([247251724, 298802412, 377388458, 534688771, 582877687]) == 130136734\nassert solution.minimizeSum([104916012, 131271440, 217629329, 446858995, 895899580, 954588333]) == 341942983\nassert solution.minimizeSum([98267990, 306841467, 418369980, 491374983, 535506187, 558906150, 619778355, 658979739, 698807972]) == 280437992\nassert solution.minimizeSum([38890771, 566256546, 616020112, 732753645, 760905398, 894751635, 914661506]) == 298641394\nassert solution.minimizeSum([24561007, 141520909, 168656709, 339372157, 372113958, 582606257, 668941803, 777071769, 829639830]) == 635550860\nassert solution.minimizeSum([25267155, 593886633, 640065351, 724886076, 748119100, 785760701, 987413909, 995329936]) == 355264585\nassert solution.minimizeSum([13336608, 366682659, 499841733, 705706874, 890179555]) == 339024215\nassert solution.minimizeSum([5368030, 40760333, 118445665, 320361722, 445929969, 786194334, 794033041]) == 440561939\nassert solution.minimizeSum([7106793, 241394992, 704970856, 712898518, 776320803, 980807108]) == 275836252\nassert solution.minimizeSum([96767781, 404601363, 484556699, 671225265, 706218317, 772419618, 940549181]) == 367818255\nassert solution.minimizeSum([129690782, 137447709, 362872562, 418582459, 612295840, 645860802, 752794337, 878516550]) == 515643988\nassert solution.minimizeSum([112239228, 139069166, 151641555, 347906202, 384200873, 518825938, 552544617, 970051226]) == 406586710\nassert solution.minimizeSum([80748677, 352862374, 390591328, 648224932, 671296309]) == 280704981\nassert solution.minimizeSum([231981511, 261659004, 266196716, 287517462, 575437966, 624410346, 860072895, 864256256, 971435824]) == 602597252\nassert solution.minimizeSum([314617047, 338389816, 587457094, 746712949, 801437223, 839993978]) == 252536884\nassert solution.minimizeSum([559497960, 789449730, 813618012, 890662545]) == 24168282\nassert solution.minimizeSum([10372513, 105002206, 317656161, 379589143, 581610503, 734114145, 744305249, 898986865]) == 581330704\nassert solution.minimizeSum([170178199, 240617283, 325558536, 496595693, 667361493, 975102352]) == 326417494\nassert solution.minimizeSum([94973775, 283306774, 327869514, 370106755, 381181023, 424475660, 521510368, 544351217, 621321032, 798812917]) == 338014258\nassert solution.minimizeSum([98328903, 371689515, 629443408, 639777368, 706737341]) == 77293933\nassert solution.minimizeSum([84236565, 124474080, 227442654, 289893273, 380203632, 386243658, 722911277, 749717659, 758166146]) == 530723492\nassert solution.minimizeSum([366212599, 430761769, 577714968, 770721271, 913740598]) == 211502369\nassert solution.minimizeSum([11843724, 40923574, 65714090, 467711953, 495291132, 580460684, 700960049, 822856980, 924362975]) == 689116325\nassert solution.minimizeSum([342957840, 623472161, 737079634, 861405716]) == 113607473\nassert solution.minimizeSum([199997100, 445085794, 591588471, 741929674, 748719961, 817650771]) == 226062300\nassert solution.minimizeSum([305603129, 435792810, 637797454, 826865591]) == 130189681\nassert solution.minimizeSum([165596863, 167759847, 179443546, 290104726, 377646368, 475145142, 693023656, 835674972, 994580145, 994742818]) == 670078109\nassert solution.minimizeSum([228745091, 390149561, 474734424, 567199945, 718604545, 811620759, 844762578, 908959880]) == 434225456\nassert solution.minimizeSum([262566033, 303528190, 561627582, 681394699, 691610953, 786864764]) == 225237182\nassert solution.minimizeSum([129052079, 167587225, 239679191, 688235848, 713945461, 780956238]) == 541277047\nassert solution.minimizeSum([740598, 84647357, 146677417, 632467413, 782382663, 840270016, 869759943, 914413858]) == 767736441\nassert solution.minimizeSum([19439507, 124405602, 345818520, 542353981]) == 104966095\nassert solution.minimizeSum([215304097, 566758182, 736252523]) == 0\nassert solution.minimizeSum([105688203, 237401246, 252217438, 295010677, 537255914, 683509959, 778084686, 905300167, 963890226, 988469327]) == 726488980\nassert solution.minimizeSum([25756707, 49734363, 72365757, 76984574, 413691943, 555346827, 606731327, 791524961, 890877292, 919557433]) == 765768254\nassert solution.minimizeSum([353315999, 392975174, 430062819, 436323159, 468038115, 656638486, 966913635]) == 114722116\nassert solution.minimizeSum([71548000, 239154719, 283713853, 285411347, 377500471, 439550974, 644022292, 661124788, 941766798]) == 421970069\nassert solution.minimizeSum([179017239, 238385068, 271895271, 280141131, 404687907, 416399987, 527122313, 562864814, 953942921, 963259006]) == 383847575\nassert solution.minimizeSum([403591860, 428705677, 692551621, 736734168, 820760273, 843146436]) == 150594815\nassert solution.minimizeSum([66969023, 98866669, 134596978, 233045803, 233644776, 531273155, 532707503, 548676327, 624326000]) == 449809658\nassert solution.minimizeSum([65476840, 88175150, 118314676, 406739479, 437204375, 595134601, 673326334, 878564486, 930796080]) == 607849494\nassert solution.minimizeSum([159795852, 223159880, 361828469, 373187631, 509994018, 699889447, 948428674, 948831822, 984233254, 990594331]) == 628765862\nassert solution.minimizeSum([284827669, 577812061, 905611820]) == 0\nassert solution.minimizeSum([5310067, 290590580, 449187821]) == 0\nassert solution.minimizeSum([2811632, 103142480, 185704508, 511875332, 564308503, 564402484, 624871211, 724294000, 899459580, 945548482]) == 721482368\nassert solution.minimizeSum([32051362, 123317787, 201551283, 343330630, 374475011, 398503985, 947821820]) == 275186198\nassert solution.minimizeSum([54955385, 152342943, 197365858, 607192965, 768410292, 821354564, 892689709, 898576988]) == 701211130\nassert solution.minimizeSum([117567441, 292705405, 307738242, 381818745, 423340920, 472981726, 599652235, 993814744]) == 306946830\nassert solution.minimizeSum([329379341, 337873512, 690408836, 860474308, 960282567]) == 269873731\nassert solution.minimizeSum([40558247, 91055364, 404291479, 472122874, 572733041, 619923939]) == 215632460\nassert solution.minimizeSum([70768202, 164151126, 313391441, 390898322, 411517098, 536962037, 538518013, 802007894, 865660372, 967095031]) == 653703590",
  "inefficient_solution": "class Solution:\n    def minimizeSum(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        min1 = float('inf')\n        min2 = float('inf')\n        for i in range(n):\n            for j in range(i + 1, n):\n                min1 = min(min1, nums[j] - nums[i])\n                for k in range(j + 1, n):\n                    min2 = min(min2, nums[k] - nums[j])\n        return min(min1 + nums[-1] - nums[2], min1 + nums[-2] - nums[1], min1 + nums[-3] - nums[0], min2 + nums[-1] - nums[2], min2 + nums[-2] - nums[1], min2 + nums[-3] - nums[0])",
  "is_python": true
}