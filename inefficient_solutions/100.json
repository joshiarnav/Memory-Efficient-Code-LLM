{
  "problem_idx": 100,
  "task_name": "Same Tree",
  "markdown_description": "\nGiven the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0100.Same%20Tree/images/ex1.jpg)\n\n```\n\n**Input:** p = [1,2,3], q = [1,2,3]\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0100.Same%20Tree/images/ex2.jpg)\n\n```\n\n**Input:** p = [1,2], q = [1,null,2]\n**Output:** false\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0100.Same%20Tree/images/ex3.jpg)\n\n```\n\n**Input:** p = [1,2,1], q = [1,1,2]\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in both trees is in the range `[0, 100]`.\n* `-104 <= Node.val <= 104`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if p == q:\n            return True\n        if p is None or q is None or p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n",
  "test_case_generator": "\nimport random\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate binary tree nodes\n    def generate_tree(nums):\n        if not nums:\n            return None\n        nodes = [TreeNode(val) if val is not None else None for val in nums]\n        for i, node in enumerate(nodes):\n            left_idx = 2 * i + 1\n            right_idx = 2 * i + 2\n            if left_idx < len(nodes):\n                node.left = nodes[left_idx]\n            if right_idx < len(nodes):\n                node.right = nodes[right_idx]\n        return nodes[0]\n\n    # Generate random values for p and q\n    p_values = random.choices(range(-10, 11), k=random.randint(0, 5))\n    q_values = random.choices(range(-10, 11), k=random.randint(0, 5))\n\n    # Generate binary trees p and q\n    p = generate_tree(p_values)\n    q = generate_tree(q_values)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isSameTree(p, q)\n\n    return p, q, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        p, q, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isSameTree(p, q) == expected_result\n        print(f\"assert solution.isSameTree(p, q) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isSameTree(p, q) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == True\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == True\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == True\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False\nassert solution.isSameTree(p, q) == False",
  "inefficient_solution": "class Solution:\n    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:\n        if p is None:\n            temp1 = [q.val] if q else []\n        elif q is None:\n            temp1 = [p.val]\n        else:\n            temp1 = [p.val, q.val]\n        if p is None:\n            temp2 = []\n        elif q is None:\n            temp2 = [p.val]\n        else:\n            temp2 = [p.val, q.val]\n        \n        if p is None:\n            temp3 = [q.left] if q else [None]\n        elif q is None:\n            temp3 = [p.left]\n        else:\n            temp3 = [p.left, q.left]\n        if p is None:\n            temp4 = []\n        elif q is None:\n            temp4 = [p.left]\n        else:\n            temp4 = [p.left, q.left]\n        \n        if p is None:\n            temp5 = [q.right] if q else [None]\n        elif q is None:\n            temp5 = [p.right]\n        else:\n            temp5 = [p.right, q.right]\n        if p is None:\n            temp6 = []\n        elif q is None:\n            temp6 = [p.right]\n        else:\n            temp6 = [p.right, q.right]\n        \n        if p is None:\n            temp7 = [q.left.left] if q is not None and q.left is not None else [None]\n        elif q is None:\n            temp7 = [p.left.left]\n        else:\n            temp7 = [p.left.left, q.left.left]\n        if p is None:\n            temp8 = []\n        elif q is None:\n            temp8 = [p.left.left]\n        else:\n            temp8 = [p.left.left, q.left.left]\n        \n        if p is None:\n            temp9 = [q.left.right] if q is not None and q.left is not None else [None]\n        elif q is None:\n            temp9 = [p.left.right]\n        else:\n            temp9 = [p.left.right, q.left.right]\n        if p is None:\n            temp10 = []\n        elif q is None:\n            temp10 = [p.left.right]\n        else:\n            temp10 = [p.left.right, q.left.right]\n        \n        if p is None:\n            temp11 = [q.right.left] if q is not None and q.right is not None else [None]\n        elif q is None:\n            temp11 = [p.right.left]\n        else:\n            temp11 = [p.right.left, q.right.left]\n        if p is None:\n            temp12 = []\n        elif q is None:\n            temp12 = [p.right.left]\n        else:\n            temp12 = [p.right.left, q.right.left]\n        \n        if p is None:\n            temp13 = [q.right.right] if q is not None and q.right is not None else [None]\n        elif q is None:\n            temp13 = [p.right.right]\n        else:\n            temp13 = [p.right.right, q.right.right]\n        if p is None:\n            temp14 = []\n        elif q is None:\n            temp14 = [p.right.right]\n        else:\n            temp14 = [p.right.right, q.right.right]\n        \n        if temp1 == temp2 and temp3 == temp4 and temp5 == temp6 and temp7 == temp8 and temp9 == temp10 and temp11 == temp12 and temp13 == temp14:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)\n        return False",
  "is_python": true
}