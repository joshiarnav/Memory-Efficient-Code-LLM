{
  "problem_idx": 738,
  "task_name": "Monotone Increasing Digits",
  "markdown_description": "\nAn integer has **monotone increasing digits** if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`.\n\n\nGiven an integer `n`, return *the largest number that is less than or equal to* `n` *with **monotone increasing digits***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 9\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 1234\n**Output:** 1234\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 332\n**Output:** 299\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        s = list(str(n))\n        i = 1\n        while i < len(s) and s[i - 1] <= s[i]:\n            i += 1\n        if i < len(s):\n            while i and s[i - 1] > s[i]:\n                s[i - 1] = str(int(s[i - 1]) - 1)\n                i -= 1\n            i += 1\n            while i < len(s):\n                s[i] = '9'\n                i += 1\n        return int(''.join(s))\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random number\n    n = random.randint(0, 10**9)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.monotoneIncreasingDigits(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.monotoneIncreasingDigits(n) == expected_result\n        print(f\"assert solution.monotoneIncreasingDigits({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.monotoneIncreasingDigits({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.monotoneIncreasingDigits(506999537) == 499999999\nassert solution.monotoneIncreasingDigits(968807014) == 899999999\nassert solution.monotoneIncreasingDigits(519188952) == 499999999\nassert solution.monotoneIncreasingDigits(268048001) == 267999999\nassert solution.monotoneIncreasingDigits(621093809) == 599999999\nassert solution.monotoneIncreasingDigits(639333425) == 599999999\nassert solution.monotoneIncreasingDigits(448540704) == 447999999\nassert solution.monotoneIncreasingDigits(940739576) == 899999999\nassert solution.monotoneIncreasingDigits(296756729) == 289999999\nassert solution.monotoneIncreasingDigits(522769239) == 499999999\nassert solution.monotoneIncreasingDigits(567531065) == 566999999\nassert solution.monotoneIncreasingDigits(412381626) == 399999999\nassert solution.monotoneIncreasingDigits(476483194) == 469999999\nassert solution.monotoneIncreasingDigits(510194197) == 499999999\nassert solution.monotoneIncreasingDigits(458280747) == 457999999\nassert solution.monotoneIncreasingDigits(780814183) == 779999999\nassert solution.monotoneIncreasingDigits(776131458) == 699999999\nassert solution.monotoneIncreasingDigits(231799893) == 229999999\nassert solution.monotoneIncreasingDigits(378759585) == 377999999\nassert solution.monotoneIncreasingDigits(191282714) == 189999999\nassert solution.monotoneIncreasingDigits(26776204) == 26699999\nassert solution.monotoneIncreasingDigits(591354524) == 589999999\nassert solution.monotoneIncreasingDigits(103965061) == 99999999\nassert solution.monotoneIncreasingDigits(358777465) == 357999999\nassert solution.monotoneIncreasingDigits(628167141) == 599999999\nassert solution.monotoneIncreasingDigits(961476782) == 899999999\nassert solution.monotoneIncreasingDigits(707727743) == 699999999\nassert solution.monotoneIncreasingDigits(105472165) == 99999999\nassert solution.monotoneIncreasingDigits(35798948) == 35789999\nassert solution.monotoneIncreasingDigits(258657659) == 257999999\nassert solution.monotoneIncreasingDigits(283546049) == 279999999\nassert solution.monotoneIncreasingDigits(268927406) == 268899999\nassert solution.monotoneIncreasingDigits(162604420) == 159999999\nassert solution.monotoneIncreasingDigits(767000983) == 699999999\nassert solution.monotoneIncreasingDigits(371647964) == 369999999\nassert solution.monotoneIncreasingDigits(899067992) == 889999999\nassert solution.monotoneIncreasingDigits(228304495) == 227999999\nassert solution.monotoneIncreasingDigits(364445956) == 359999999\nassert solution.monotoneIncreasingDigits(415830710) == 399999999\nassert solution.monotoneIncreasingDigits(84072221) == 79999999\nassert solution.monotoneIncreasingDigits(635991957) == 599999999\nassert solution.monotoneIncreasingDigits(138368327) == 137999999\nassert solution.monotoneIncreasingDigits(746651319) == 699999999\nassert solution.monotoneIncreasingDigits(296144659) == 289999999\nassert solution.monotoneIncreasingDigits(216821641) == 199999999\nassert solution.monotoneIncreasingDigits(250677509) == 249999999\nassert solution.monotoneIncreasingDigits(686824336) == 679999999\nassert solution.monotoneIncreasingDigits(74623728) == 69999999\nassert solution.monotoneIncreasingDigits(20384924) == 19999999\nassert solution.monotoneIncreasingDigits(614662159) == 599999999\nassert solution.monotoneIncreasingDigits(877840777) == 799999999\nassert solution.monotoneIncreasingDigits(690161378) == 689999999\nassert solution.monotoneIncreasingDigits(489845570) == 488999999\nassert solution.monotoneIncreasingDigits(785031591) == 779999999\nassert solution.monotoneIncreasingDigits(447506069) == 446999999\nassert solution.monotoneIncreasingDigits(738842517) == 699999999\nassert solution.monotoneIncreasingDigits(842558079) == 799999999\nassert solution.monotoneIncreasingDigits(114910132) == 114899999\nassert solution.monotoneIncreasingDigits(843703266) == 799999999\nassert solution.monotoneIncreasingDigits(478157200) == 477999999\nassert solution.monotoneIncreasingDigits(42580153) == 39999999\nassert solution.monotoneIncreasingDigits(180384836) == 179999999\nassert solution.monotoneIncreasingDigits(1625427) == 1599999\nassert solution.monotoneIncreasingDigits(851242406) == 799999999\nassert solution.monotoneIncreasingDigits(99293733) == 89999999\nassert solution.monotoneIncreasingDigits(358466084) == 357999999\nassert solution.monotoneIncreasingDigits(89512426) == 88999999\nassert solution.monotoneIncreasingDigits(943837424) == 899999999\nassert solution.monotoneIncreasingDigits(203005733) == 199999999\nassert solution.monotoneIncreasingDigits(9899476) == 8999999\nassert solution.monotoneIncreasingDigits(293897637) == 289999999\nassert solution.monotoneIncreasingDigits(633423044) == 599999999\nassert solution.monotoneIncreasingDigits(86233965) == 79999999\nassert solution.monotoneIncreasingDigits(636110272) == 599999999\nassert solution.monotoneIncreasingDigits(206490620) == 199999999\nassert solution.monotoneIncreasingDigits(768982886) == 699999999\nassert solution.monotoneIncreasingDigits(331108408) == 299999999\nassert solution.monotoneIncreasingDigits(269472027) == 268999999\nassert solution.monotoneIncreasingDigits(94391404) == 89999999\nassert solution.monotoneIncreasingDigits(792364798) == 789999999\nassert solution.monotoneIncreasingDigits(394588481) == 389999999\nassert solution.monotoneIncreasingDigits(950719395) == 899999999\nassert solution.monotoneIncreasingDigits(656057294) == 599999999\nassert solution.monotoneIncreasingDigits(215636463) == 199999999\nassert solution.monotoneIncreasingDigits(434802526) == 399999999\nassert solution.monotoneIncreasingDigits(558978101) == 558899999\nassert solution.monotoneIncreasingDigits(202141756) == 199999999\nassert solution.monotoneIncreasingDigits(342608970) == 339999999\nassert solution.monotoneIncreasingDigits(987115750) == 899999999\nassert solution.monotoneIncreasingDigits(877593305) == 799999999\nassert solution.monotoneIncreasingDigits(61053844) == 59999999\nassert solution.monotoneIncreasingDigits(617031722) == 599999999\nassert solution.monotoneIncreasingDigits(789608183) == 788999999\nassert solution.monotoneIncreasingDigits(307768094) == 299999999\nassert solution.monotoneIncreasingDigits(25578905) == 25578899\nassert solution.monotoneIncreasingDigits(223491192) == 223489999\nassert solution.monotoneIncreasingDigits(780836864) == 779999999\nassert solution.monotoneIncreasingDigits(94482685) == 89999999\nassert solution.monotoneIncreasingDigits(105394261) == 99999999\nassert solution.monotoneIncreasingDigits(104188583) == 99999999",
  "inefficient_solution": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        s = [str(i) for i in range(10)] * 1000  # allocate 1000 extra slots\n        for num in range(10000):\n            digits = list(str(num))\n            if num >= n:\n                break\n            for i in range(len(digits) - 1):\n                if digits[i] > digits[i + 1]:\n                    break\n            else:\n                continue\n            for i in range(len(digits) - 1, 0, -1):\n                if digits[i - 1] < digits[i]:\n                    digits[i] = '9'\n                    digits[i - 1] = str(int(digits[i - 1]) - 1)\n                    break\n            else:\n                digits[0] = '0'\n            max_val = int(''.join(digits))\n            if max_val <= n:\n                s = [str(i) for i in range(10)] * 1000  # allocate 1000 extra slots again\n                s[num] = max_val\n        return max(s)",
  "is_python": true
}