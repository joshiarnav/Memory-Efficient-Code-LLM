{
  "problem_idx": 1035,
  "task_name": "Uncrossed Lines",
  "markdown_description": "\nYou are given two integer arrays `nums1` and `nums2`. We write the integers of `nums1` and `nums2` (in the order they are given) on two separate horizontal lines.\n\n\nWe may draw connecting lines: a straight line connecting two numbers `nums1[i]` and `nums2[j]` such that:\n\n\n* `nums1[i] == nums2[j]`, and\n* the line we draw does not intersect any other connecting (non-horizontal) line.\n\n\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\n\n\nReturn *the maximum number of connecting lines we can draw in this way*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1035.Uncrossed%20Lines/images/142.png)\n\n```\n\n**Input:** nums1 = [1,4,2], nums2 = [1,2,4]\n**Output:** 2\n**Explanation:** We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]\n**Output:** 3\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 500`\n* `1 <= nums1[i], nums2[j] <= 2000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n + 1) for i in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def generate_test_case(self):\n        test_cases = []\n        for _ in range(100):\n            # Generate random numbers list for nums1 and nums2\n            nums1 = random.sample(range(1, 201), random.randint(1, 10))\n            nums2 = random.sample(range(1, 201), random.randint(1, 10))\n            \n            # Calculate the expected result using the provided Solution class\n            expected_result = self.maxUncrossedLines(nums1, nums2)\n            \n            test_cases.append((nums1, nums2, expected_result))\n        \n        return test_cases\n    \n    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n + 1) for i in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n\nsolution = Solution()\ntest_cases = solution.generate_test_case()\n\n# Save the test cases in the required format\ntest_case_generator_results = []\nfor nums1, nums2, expected_result in test_cases:\n    test_case_generator_results.append(f\"assert solution.maxUncrossedLines({nums1}, {nums2}) == {expected_result}\")\n",
  "test_case": "assert solution.maxUncrossedLines([104, 189, 26, 115], [32, 191, 11, 159, 116]) == 0\nassert solution.maxUncrossedLines([167, 135, 120, 191, 122], [156, 193]) == 0\nassert solution.maxUncrossedLines([162, 107, 27], [53, 48, 168, 36, 16, 72, 71, 65, 6]) == 0\nassert solution.maxUncrossedLines([197, 67, 166, 57, 191, 33, 60, 168, 126, 185], [168, 158, 184, 16, 40, 110, 164, 183, 179, 18]) == 1\nassert solution.maxUncrossedLines([187, 55, 200, 16, 78, 77, 62, 102, 54], [145, 89, 167, 113, 103, 193, 156]) == 0\nassert solution.maxUncrossedLines([198, 66, 70, 65, 28, 166, 146], [139, 61, 70, 33, 133, 148]) == 1\nassert solution.maxUncrossedLines([131], [82, 53, 32, 156, 26, 162, 9]) == 0\nassert solution.maxUncrossedLines([92, 119, 181, 130, 148, 177, 34], [128, 109, 100, 5]) == 0\nassert solution.maxUncrossedLines([15, 79, 122, 140, 18, 22, 40, 100], [188, 175, 72, 114, 162, 150, 149, 159]) == 0\nassert solution.maxUncrossedLines([173, 74, 30, 61, 56, 195, 42], [141, 81, 137, 136, 60, 134, 165, 199, 7, 144]) == 0\nassert solution.maxUncrossedLines([196, 160, 35, 190, 116, 195, 159], [99, 130, 170]) == 0\nassert solution.maxUncrossedLines([167, 129, 102, 32, 30], [64, 105, 85, 10, 181, 81, 174, 153, 136, 139]) == 0\nassert solution.maxUncrossedLines([121, 137, 187, 25, 94, 147, 46, 161], [87, 34, 165]) == 0\nassert solution.maxUncrossedLines([21, 12, 33, 176], [182, 106, 180, 49, 104, 144, 192, 33]) == 1\nassert solution.maxUncrossedLines([80, 166, 125, 34, 38, 107, 63, 130, 52, 62], [160, 35, 112, 96, 64]) == 0\nassert solution.maxUncrossedLines([107, 36, 148, 83, 96, 165, 50, 60], [119, 54, 16, 115, 132, 45, 183]) == 0\nassert solution.maxUncrossedLines([167, 57], [188, 113, 118]) == 0\nassert solution.maxUncrossedLines([46, 81, 192, 28, 27, 197, 156, 164, 178], [182, 166, 24, 57, 105, 112, 54]) == 0\nassert solution.maxUncrossedLines([88, 183, 66, 100, 120, 58, 14, 69, 150], [188, 191, 168]) == 0\nassert solution.maxUncrossedLines([42, 103, 59, 83, 141, 150, 25], [92, 62]) == 0\nassert solution.maxUncrossedLines([89, 3, 94, 109, 188], [143, 146, 172, 99, 108, 22, 132, 5, 180]) == 0\nassert solution.maxUncrossedLines([145], [158, 44]) == 0\nassert solution.maxUncrossedLines([147, 103, 64, 83, 74, 125, 194], [98, 26, 181, 189, 179, 124, 68]) == 0\nassert solution.maxUncrossedLines([127, 170, 168, 181, 22, 112], [5]) == 0\nassert solution.maxUncrossedLines([85, 158], [162, 193]) == 0\nassert solution.maxUncrossedLines([33, 44, 31, 198, 116, 87, 140, 109, 113, 100], [29, 72, 154, 39]) == 0\nassert solution.maxUncrossedLines([67], [11, 99, 105, 25]) == 0\nassert solution.maxUncrossedLines([158, 75, 59, 64, 155, 87], [76, 72, 70, 54, 152, 32, 2, 121]) == 0\nassert solution.maxUncrossedLines([131], [178, 33, 160, 76, 114, 21]) == 0\nassert solution.maxUncrossedLines([149, 121, 152, 66], [6, 143, 179, 122, 41, 72, 117, 44, 89]) == 0\nassert solution.maxUncrossedLines([45, 92, 98], [61]) == 0\nassert solution.maxUncrossedLines([195, 27], [190]) == 0\nassert solution.maxUncrossedLines([96, 166, 191, 172, 97], [34]) == 0\nassert solution.maxUncrossedLines([87, 77, 134, 140, 136, 107], [93, 102, 70, 45, 1]) == 0\nassert solution.maxUncrossedLines([2], [96, 152, 36]) == 0\nassert solution.maxUncrossedLines([74, 110, 134, 23, 67, 172, 164, 12, 99, 8], [104, 125, 143, 40, 86, 197, 37, 74]) == 1\nassert solution.maxUncrossedLines([49, 64], [121, 140, 84, 122, 60, 104, 4, 94, 116, 157]) == 0\nassert solution.maxUncrossedLines([76, 168, 123, 51, 197, 175, 62, 189, 110], [33, 26, 36, 117]) == 0\nassert solution.maxUncrossedLines([14, 78, 17, 46, 104, 138, 145], [144, 58, 184]) == 0\nassert solution.maxUncrossedLines([139], [89, 6, 163, 144, 184, 15, 149]) == 0\nassert solution.maxUncrossedLines([71, 194, 21, 128, 1, 115, 15], [52, 29, 44, 28, 37, 139, 188]) == 0\nassert solution.maxUncrossedLines([113, 114, 84, 32], [61, 36, 4, 154]) == 0\nassert solution.maxUncrossedLines([39, 195, 15, 111, 182, 99, 94, 23, 1], [41]) == 0\nassert solution.maxUncrossedLines([187], [133, 63, 126, 38, 85, 177, 190, 103, 28, 52]) == 0\nassert solution.maxUncrossedLines([141, 75, 52, 80, 109, 24, 180, 44], [81, 22, 195, 178, 67, 148, 149, 141, 3]) == 1\nassert solution.maxUncrossedLines([71, 1, 155, 191, 61], [9, 32, 22]) == 0\nassert solution.maxUncrossedLines([23, 73, 170], [165]) == 0\nassert solution.maxUncrossedLines([35, 139], [142, 27, 128, 21, 156, 18, 176, 124, 114, 20]) == 0\nassert solution.maxUncrossedLines([126, 104, 23, 6, 26], [54, 76, 197, 196, 52, 77, 18, 74, 178, 51]) == 0\nassert solution.maxUncrossedLines([128, 78, 146], [175, 108, 49, 193, 115, 14, 99, 4]) == 0\nassert solution.maxUncrossedLines([145, 120, 125, 24], [136, 118, 106, 200, 130]) == 0\nassert solution.maxUncrossedLines([40, 102, 192, 92], [183]) == 0\nassert solution.maxUncrossedLines([58, 99], [17, 174, 82]) == 0\nassert solution.maxUncrossedLines([172, 59, 142, 155], [13, 66, 61, 192, 1, 146, 39]) == 0\nassert solution.maxUncrossedLines([137, 49], [174, 193, 4, 29, 67, 78, 187, 103]) == 0\nassert solution.maxUncrossedLines([10, 37, 74, 92, 137, 187, 182, 129, 199], [163, 185, 170, 83, 123]) == 0\nassert solution.maxUncrossedLines([88, 200, 87, 174, 190], [72, 127, 100]) == 0\nassert solution.maxUncrossedLines([75, 102, 177, 10, 32, 165, 15, 195, 124], [70, 25]) == 0\nassert solution.maxUncrossedLines([162, 122, 95, 155, 65, 8], [68]) == 0\nassert solution.maxUncrossedLines([70, 91, 122, 170, 164, 185, 20, 64], [137, 33, 36]) == 0\nassert solution.maxUncrossedLines([153, 120, 49, 174, 59, 17, 109], [75, 120, 158, 50, 196, 20, 198, 57]) == 1\nassert solution.maxUncrossedLines([15, 19, 27, 175, 152, 170, 145, 140, 196], [107, 44, 177, 173, 58, 92, 102, 167]) == 0\nassert solution.maxUncrossedLines([16, 57, 40, 45, 167, 140, 2, 168, 146, 103], [36, 162, 174, 25, 197, 193, 60, 195, 117, 160]) == 0\nassert solution.maxUncrossedLines([115, 30, 40, 118, 139, 18], [54, 125, 16, 167, 162, 165]) == 0\nassert solution.maxUncrossedLines([14, 200, 133, 196, 68, 151, 13], [66, 137, 153, 84, 93, 97, 197, 190, 60]) == 0\nassert solution.maxUncrossedLines([155, 153, 28, 185, 174, 16, 35, 29, 165], [171, 89]) == 0\nassert solution.maxUncrossedLines([27, 4, 43], [122, 18]) == 0\nassert solution.maxUncrossedLines([101, 4], [152, 15]) == 0\nassert solution.maxUncrossedLines([148, 12, 100, 117, 107, 129, 5, 162], [49, 7, 112, 30, 146, 144]) == 0\nassert solution.maxUncrossedLines([133, 87, 25, 95], [58, 161, 88, 70]) == 0\nassert solution.maxUncrossedLines([66, 31, 81, 164], [116, 186, 47, 175, 126]) == 0\nassert solution.maxUncrossedLines([150, 122, 91, 112, 60, 72, 188], [14, 94]) == 0\nassert solution.maxUncrossedLines([196, 161, 190, 99, 43, 132, 82, 2], [30, 180, 96, 183, 149, 77, 135, 199, 61, 10]) == 0\nassert solution.maxUncrossedLines([136, 167, 30, 36, 58, 200, 156], [81, 35, 196, 97, 4, 89, 87]) == 0\nassert solution.maxUncrossedLines([99, 136], [147, 178, 11, 194, 143, 39, 12]) == 0\nassert solution.maxUncrossedLines([130], [174, 63]) == 0\nassert solution.maxUncrossedLines([193, 121, 191, 184, 198, 64, 195], [101, 7, 113]) == 0\nassert solution.maxUncrossedLines([128, 9], [149, 81]) == 0\nassert solution.maxUncrossedLines([52, 59, 45, 83, 184, 179, 49, 76], [80, 129, 5, 96, 67]) == 0\nassert solution.maxUncrossedLines([191, 58, 75, 13, 60, 7, 99, 32, 162], [39, 81, 97, 68]) == 0\nassert solution.maxUncrossedLines([197, 51, 95], [49, 38, 67, 4, 142]) == 0\nassert solution.maxUncrossedLines([65, 30, 19], [131, 10, 173, 98, 109, 28, 7, 178, 108, 145]) == 0\nassert solution.maxUncrossedLines([146, 156, 199, 42, 31], [171, 133, 19, 70, 8, 16, 130, 95, 31, 41]) == 1\nassert solution.maxUncrossedLines([1, 8, 30, 32, 192, 121, 148, 96], [127, 123]) == 0\nassert solution.maxUncrossedLines([73, 65, 138], [168]) == 0\nassert solution.maxUncrossedLines([66, 138, 187, 179, 48], [161, 117, 22, 20]) == 0\nassert solution.maxUncrossedLines([30, 39, 5, 117, 53, 27], [113]) == 0\nassert solution.maxUncrossedLines([122, 5, 104, 27, 22, 197, 84, 125, 141, 89], [196, 75, 53, 166]) == 0\nassert solution.maxUncrossedLines([16, 106, 131, 197, 103, 190, 51, 130, 91], [55, 149, 32, 10, 161, 170, 112, 102, 114]) == 0\nassert solution.maxUncrossedLines([71, 187, 11, 129, 121, 82, 192, 172, 70, 51], [126, 160, 21, 185, 35, 151, 200, 101, 117, 106]) == 0\nassert solution.maxUncrossedLines([109, 175, 76, 95], [143, 10, 89, 31, 5, 106, 91]) == 0\nassert solution.maxUncrossedLines([139, 166], [52, 105, 36, 106, 75, 60]) == 0\nassert solution.maxUncrossedLines([130, 52], [140, 85, 14, 105, 77, 66, 136, 13, 145, 164]) == 0\nassert solution.maxUncrossedLines([10, 54, 16], [195, 50, 136, 7, 13, 78, 99, 191]) == 0\nassert solution.maxUncrossedLines([90, 84, 98, 86, 94, 47], [158, 178, 47, 60, 155, 132, 67, 27]) == 1\nassert solution.maxUncrossedLines([153, 75, 190, 65, 7, 111, 45, 27, 66, 26], [49, 29, 101, 25, 122, 85, 76]) == 0\nassert solution.maxUncrossedLines([107, 79, 181, 54, 48, 57, 76, 166, 17, 6], [145, 102, 109]) == 0\nassert solution.maxUncrossedLines([66, 36, 46, 153, 44, 13, 189, 139, 67], [24, 143, 105, 182, 36, 93, 17, 32]) == 1\nassert solution.maxUncrossedLines([8, 20, 68, 194, 24, 54, 127], [151]) == 0\nassert solution.maxUncrossedLines([155, 16, 107, 138, 198, 116, 81], [145, 19, 101, 144, 38, 105, 56, 28, 61]) == 0",
  "inefficient_solution": "class Solution:\n    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        line_counts = {i: {} for i in range(m)}\n        for i in range(m):\n            for j in range(n):\n                if nums1[i] == nums2[j]:\n                    line_counts[i][j] = 1\n                else:\n                    line_counts[i][j] = 0\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m or j == n:\n                    continue\n                line_counts[i][j] = max(line_counts[i + 1][j], line_counts[i][j + 1])\n                if nums1[i] == nums2[j]:\n                    line_counts[i][j] = max(line_counts[i][j], line_counts[i + 1][j + 1] + 1)\n        return max(line_counts[0].values())",
  "is_python": true
}