{
  "problem_idx": 518,
  "task_name": "Coin Change II",
  "markdown_description": "\nYou are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.\n\n\nReturn *the number of combinations that make up that amount*. If that amount of money cannot be made up by any combination of the coins, return `0`.\n\n\nYou may assume that you have an infinite number of each kind of coin.\n\n\nThe answer is **guaranteed** to fit into a signed **32-bit** integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** amount = 5, coins = [1,2,5]\n**Output:** 4\n**Explanation:** there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** amount = 3, coins = [2]\n**Output:** 0\n**Explanation:** the amount of 3 cannot be made up just with coins of 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** amount = 10, coins = [10]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= coins.length <= 300`\n* `1 <= coins[i] <= 5000`\n* All the values of `coins` are **unique**.\n* `0 <= amount <= 5000`\n\n\n",
  "canonical_solution": "class Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        dp = [0] * (amount + 1)\n        dp[0] = 1\n        for coin in coins:\n            for j in range(coin, amount + 1):\n                dp[j] += dp[j - coin]\n        return dp[-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def change(self, amount, coins):\n        dp = [0] * (amount + 1)\n        dp[0] = 1\n        for coin in coins:\n            for j in range(coin, amount + 1):\n                dp[j] += dp[j - coin]\n        return dp[-1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random coins list\n    coins = random.sample(range(1, 501), random.randint(1, 10))\n    \n    # Generate a random amount\n    amount = random.randint(0, 5001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.change(amount, coins)\n\n    return amount, coins, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        amount, coins, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.change(amount, coins) == expected_result\n        print(f\"assert solution.change({amount}, {coins}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.change({amount}, {coins}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.change(286, [164, 197, 260, 157, 25, 103, 345, 332]) == 0\nassert solution.change(436, [122, 389, 466]) == 0\nassert solution.change(1528, [259]) == 0\nassert solution.change(1966, [95]) == 0\nassert solution.change(1207, [249, 473, 171, 278]) == 0\nassert solution.change(10, [441, 381, 91, 299]) == 0\nassert solution.change(1271, [340, 73, 375, 64, 336, 161, 217, 4]) == 880\nassert solution.change(686, [49, 447, 230, 132]) == 1\nassert solution.change(2745, [268]) == 0\nassert solution.change(793, [439, 262, 230, 205, 239, 19]) == 1\nassert solution.change(4707, [64, 446, 376, 10, 210, 346, 151, 328, 372]) == 203376\nassert solution.change(1456, [292, 100, 30, 272, 35, 310, 359, 134, 37, 332]) == 3704\nassert solution.change(186, [211, 240, 379, 310, 286, 407, 321, 107, 227, 377]) == 0\nassert solution.change(1649, [420]) == 0\nassert solution.change(584, [79, 499]) == 0\nassert solution.change(3236, [264, 180, 491, 31, 323, 133]) == 245\nassert solution.change(3153, [181, 279, 216, 5, 428, 297, 365, 456]) == 4107\nassert solution.change(376, [492, 448, 384, 358, 444, 239]) == 0\nassert solution.change(1348, [446, 462, 356, 315, 21]) == 3\nassert solution.change(3511, [236, 438, 34, 45, 490, 421, 179, 328, 280]) == 10635\nassert solution.change(4961, [75, 14, 453, 389, 54, 378, 449, 132, 417]) == 508842\nassert solution.change(1055, [251, 335, 408, 151, 200, 261, 346]) == 2\nassert solution.change(1133, [405, 204, 298, 157, 345, 393]) == 0\nassert solution.change(124, [14, 455, 38, 355, 212, 477, 210, 92, 334]) == 0\nassert solution.change(3280, [123, 113, 280]) == 1\nassert solution.change(3111, [154, 235, 327, 105, 354, 443, 285, 296, 46]) == 3074\nassert solution.change(2235, [71, 194, 461, 442, 263, 299, 143]) == 39\nassert solution.change(104, [282, 142, 44, 197, 401, 35, 216, 38, 405, 199]) == 0\nassert solution.change(4566, [132, 150, 491, 320, 192, 372, 250, 368]) == 2363\nassert solution.change(1714, [192, 296, 70, 73, 106]) == 30\nassert solution.change(4707, [257, 30]) == 0\nassert solution.change(668, [212, 248, 463, 81, 449]) == 0\nassert solution.change(536, [10, 458, 142, 446, 113, 17, 9, 292]) == 397\nassert solution.change(1544, [24, 456, 346, 477, 378, 385]) == 2\nassert solution.change(3717, [282, 433, 115]) == 1\nassert solution.change(633, [437, 456, 2, 83, 395]) == 9\nassert solution.change(1349, [119, 450, 49, 273]) == 0\nassert solution.change(1055, [377, 372]) == 0\nassert solution.change(4007, [208, 286, 148, 433, 250, 179]) == 117\nassert solution.change(229, [70, 138, 314]) == 0\nassert solution.change(2448, [212, 398, 343, 427, 351, 140, 431]) == 11\nassert solution.change(4694, [137, 14, 387, 186, 345, 212, 314, 111, 155]) == 438673\nassert solution.change(2685, [450]) == 0\nassert solution.change(4750, [157, 107, 318, 236, 371, 101, 432, 407, 486]) == 10497\nassert solution.change(4345, [411, 201, 117, 127, 463, 328, 140, 338]) == 2889\nassert solution.change(121, [119, 145, 104, 61, 181]) == 0\nassert solution.change(4050, [430, 259, 59, 71, 175, 120, 384]) == 4412\nassert solution.change(1095, [416, 139, 227, 410, 337, 264, 431, 427]) == 0\nassert solution.change(3476, [89, 134]) == 1\nassert solution.change(1571, [329, 396, 324, 431]) == 0\nassert solution.change(4304, [40, 141, 18, 280, 304, 358, 16, 186]) == 1744354\nassert solution.change(3306, [409, 237, 8, 149, 36, 324, 460, 418]) == 20398\nassert solution.change(491, [288]) == 0\nassert solution.change(3964, [59, 355, 69]) == 4\nassert solution.change(4312, [259, 432, 304, 410]) == 0\nassert solution.change(2778, [470, 431, 413, 142, 127, 364, 398]) == 26\nassert solution.change(3545, [427, 257, 78, 486, 128, 393]) == 71\nassert solution.change(3733, [481, 225, 158, 96, 195, 408, 258, 22, 495, 418]) == 37865\nassert solution.change(3586, [388]) == 0\nassert solution.change(1090, [128, 386, 228, 489, 329, 359, 236, 212, 291]) == 2\nassert solution.change(4709, [18, 367, 348, 252, 391, 489, 241]) == 1842\nassert solution.change(1306, [447, 357]) == 0\nassert solution.change(974, [154, 142]) == 0\nassert solution.change(1769, [407, 299, 322, 84, 448, 362, 463]) == 2\nassert solution.change(2752, [397, 79, 391, 488, 326]) == 3\nassert solution.change(1438, [219, 424, 227, 185, 34, 349]) == 6\nassert solution.change(4666, [324, 29, 157]) == 8\nassert solution.change(4411, [183, 225, 420, 16, 243, 438]) == 1024\nassert solution.change(154, [222, 373, 22]) == 1\nassert solution.change(1204, [21, 161]) == 2\nassert solution.change(682, [489, 382, 68, 144, 335, 346, 301, 218]) == 0\nassert solution.change(2981, [28, 394, 59, 149, 398]) == 170\nassert solution.change(881, [310, 487, 188, 218]) == 0\nassert solution.change(4766, [157, 328, 17, 7, 127, 134, 119, 222]) == 8579966\nassert solution.change(2705, [417, 87, 337, 211]) == 3\nassert solution.change(520, [478, 158, 194, 418, 161, 92, 379]) == 0\nassert solution.change(1021, [248, 328, 217, 453]) == 0\nassert solution.change(1757, [188, 242, 233, 38, 459, 490, 381, 439, 467, 139]) == 84\nassert solution.change(3417, [11, 236, 251, 158, 60, 39, 227, 404, 402]) == 311601\nassert solution.change(1938, [155, 111, 191, 321, 394, 488, 324]) == 12\nassert solution.change(1548, [450, 181, 16, 141, 179]) == 20\nassert solution.change(615, [294, 463, 353, 345, 348, 244, 392, 191]) == 0\nassert solution.change(2802, [439, 151, 263, 373, 126]) == 7\nassert solution.change(2322, [498, 296, 129, 89, 24, 200]) == 224\nassert solution.change(3237, [327, 46, 390, 235, 19, 283]) == 979\nassert solution.change(4036, [449, 418, 89, 365, 186, 244, 280, 316, 181]) == 3248\nassert solution.change(2508, [77, 173, 123, 366, 171]) == 32\nassert solution.change(543, [49, 82, 272, 316, 24, 492, 254, 174, 366, 475]) == 5\nassert solution.change(1724, [380, 394, 215, 358, 231, 8, 51, 227, 450, 185]) == 1859\nassert solution.change(2507, [36]) == 0\nassert solution.change(3029, [273, 421, 150, 302, 282]) == 2\nassert solution.change(3806, [262, 236, 500, 316]) == 6\nassert solution.change(175, [60, 124, 300, 28, 351, 241, 472, 61, 250, 123]) == 0\nassert solution.change(2545, [322, 144, 378, 450, 472, 308, 9]) == 270\nassert solution.change(4002, [439, 10, 83, 1, 184, 14, 112, 498]) == 177060309\nassert solution.change(1728, [295, 154, 169, 38, 420, 486, 21, 3, 387, 174]) == 86480\nassert solution.change(4991, [156, 485, 103, 336, 113, 193, 320]) == 2977\nassert solution.change(87, [318, 10, 490, 107]) == 0\nassert solution.change(2586, [131, 383, 334, 387]) == 1\nassert solution.change(2585, [428]) == 0",
  "inefficient_solution": "class Solution:\n    def change(self, amount: int, coins: List[int]) -> int:\n        # Create a list to store the intermediate results\n        temp_results = []\n        for _ in range(amount + 1):\n            temp_results.append([0] * len(coins))\n        \n        # Create another list to store the final results\n        dp = [0] * (amount + 1)\n        dp[0] = 1\n        \n        # Iterate over the amount\n        for i in range(1, amount + 1):\n            # Iterate over the coins\n            for j in range(len(coins)):\n                # Create a new list to store the temporary results for the current coin\n                temp_results[i].append([0] * len(coins))\n                # Iterate over the remaining amounts\n                for k in range(coins[j], i + 1):\n                    # If the current coin can make up the remaining amount\n                    if k >= coins[j]:\n                        # If the remaining amount cannot be made up by any other coin, skip it\n                        if i - coins[j] == 0:\n                            continue\n                        # If the remaining amount can be made up by any other coin, use the intermediate result\n                        else:\n                            dp[k] = temp_results[k - coins[j]][j] + dp[k]\n        \n        # Return the final result\n        return dp[-1]",
  "is_python": true
}