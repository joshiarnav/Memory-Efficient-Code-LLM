{
  "problem_idx": 2826,
  "task_name": "Sorting Three Groups",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` of length `n`.  \n\n  \n\nThe numbers from `0` to `n - 1` are divided into three groups numbered from `1` to `3`, where number `i` belongs to group `nums[i]`. Notice that some groups may be **empty**.  \n\n  \n\nYou are allowed to perform this operation any number of times:\n\n\n* Pick number `x` and change its group. More formally, change `nums[x]` to any number from `1` to `3`.\n\n\nA new array `res` is constructed using the following procedure:\n\n\n1. Sort the numbers in each group independently.\n2. Append the elements of groups `1`, `2`, and `3` to `res` **in this order**.\n\n\nArray `nums` is called a **beautiful array** if the constructed array `res` is sorted in **non-decreasing** order.\n\n\nReturn *the **minimum** number of operations to make* `nums` *a **beautiful array***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,3,2,1]\n**Output:** 3\n**Explanation:** It's optimal to perform three operations:\n1. change nums[0] to 1.\n2. change nums[2] to 1.\n3. change nums[3] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3,4] and group 2 and group 3 become empty. Hence, res is equal to [0,1,2,3,4] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than three operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,1,3,3]\n**Output:** 2\n**Explanation:** It's optimal to perform two operations:\n1. change nums[1] to 1.\n2. change nums[2] to 1.\nAfter performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3], group 2 becomes empty, and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\nIt can be proven that there is no valid sequence of less than two operations.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,2,2,2,3,3]\n**Output:** 0\n**Explanation:** It's optimal to not perform operations.\nAfter sorting the numbers in each group, group 1 becomes empty, group 2 becomes equal to [0,1,2,3] and group 3 becomes equal to [4,5]. Hence, res is equal to [0,1,2,3,4,5] which is sorted in non-decreasing order.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `1 <= nums[i] <= 3`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        f = [0] * 3\n        for x in nums:\n            g = [0] * 3\n            if x == 1:\n                g[0] = f[0]\n                g[1] = min(f[:2]) + 1\n                g[2] = min(f) + 1\n            elif x == 2:\n                g[0] = f[0] + 1\n                g[1] = min(f[:2])\n                g[2] = min(f) + 1\n            else:\n                g[0] = f[0] + 1\n                g[1] = min(f[:2]) + 1\n                g[2] = min(f)\n            f = g\n        return min(f)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumOperations(self, nums):\n        f = [0] * 3\n        for x in nums:\n            g = [0] * 3\n            if x == 1:\n                g[0] = f[0]\n                g[1] = min(f[:2]) + 1\n                g[2] = min(f) + 1\n            elif x == 2:\n                g[0] = f[0] + 1\n                g[1] = min(f[:2])\n                g[2] = min(f) + 1\n            else:\n                g[0] = f[0] + 1\n                g[1] = min(f[:2]) + 1\n                g[2] = min(f)\n            f = g\n        return min(f)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.choices([1, 2, 3], k=random.randint(1, 101))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumOperations(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumOperations(nums) == expected_result\n        print(f\"assert solution.minimumOperations({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumOperations({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumOperations([3, 2, 2, 2, 3, 2, 1, 2, 2, 3, 1, 2, 1, 1, 1, 2, 1, 3, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 1, 2, 2, 2, 3, 2, 1, 2, 1, 2, 3, 3, 3, 3, 3, 1, 1]) == 21\nassert solution.minimumOperations([1, 3, 1, 3, 1, 2, 2, 3, 2, 1, 2, 2, 3, 3, 1, 2, 2, 1, 1, 3, 1, 2, 1, 1, 1, 3, 1, 2, 3, 2, 3, 1, 2, 1, 2, 2, 3, 2, 3, 1, 1]) == 22\nassert solution.minimumOperations([2, 1, 1, 2, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 2, 3, 3, 2, 2, 1, 1, 3, 1, 3, 1, 1, 3, 3, 2, 1, 3, 2, 1, 1, 1, 3, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 1, 2, 2, 2, 1, 3, 3, 2, 1, 2, 3, 1, 2, 2, 3, 3, 1, 3, 3]) == 46\nassert solution.minimumOperations([3, 1, 3, 3, 3, 1, 1, 3, 1, 1, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 1, 3, 1, 2, 3, 2, 1, 3, 2, 2, 1, 3, 3, 2, 2, 1, 3, 2, 1, 1, 2, 2, 1, 2, 3, 2, 2, 3, 1, 3, 2, 3, 3, 2, 3, 1, 3, 2, 2, 3, 1, 2, 3]) == 30\nassert solution.minimumOperations([1, 2, 3, 1, 1, 2, 1, 3, 1, 3, 3, 3, 1, 2, 1, 1, 1, 1, 3, 3, 3, 1, 3, 3, 1, 2, 2, 2, 2, 3, 1, 3, 3, 2, 3]) == 15\nassert solution.minimumOperations([3, 3, 1, 2, 2, 2, 3, 3, 1, 1, 2]) == 5\nassert solution.minimumOperations([1, 3, 2, 1, 3, 3, 1, 3, 2, 3, 1, 2, 1, 2, 1, 1, 3, 1, 3, 3, 2, 1, 2, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 3, 1, 1, 2, 2, 2, 1, 2, 1, 3, 3, 2, 2, 3, 3, 1, 1, 3, 3, 2, 3, 2, 3, 3, 2, 3, 1, 3, 1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 1, 2, 2, 3, 2, 3, 2, 1, 3, 1, 1, 2, 3, 3, 3, 2, 3, 1, 2, 3, 1, 3]) == 49\nassert solution.minimumOperations([1, 1, 2, 3, 3, 2, 3, 1, 3, 2, 3, 3, 3, 3, 3, 1, 3, 3, 1, 1, 2, 1, 2, 1, 3, 2, 3, 2, 3, 2, 3, 1, 1, 3, 2, 1, 2, 3, 1, 2, 3, 2, 2, 1, 2, 2, 1, 2, 3, 2, 3, 1, 3, 3, 1, 1, 1, 3, 1, 3, 1, 2, 2, 1, 2, 3, 2, 1, 1, 2, 1, 1, 3, 2, 3]) == 45\nassert solution.minimumOperations([2, 1, 2, 1, 1, 1, 3, 2, 2, 2, 2, 3, 1, 3, 1, 3, 2, 3, 2, 2, 1, 3, 1, 1, 1, 3, 3, 2, 1, 2, 3, 1, 2, 2, 1, 2, 2, 2, 1, 3, 3, 1, 2, 1, 3, 1, 2, 3, 1, 2, 3, 1, 1, 3, 2, 3, 2, 3, 2, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 3, 2, 3, 1, 1, 3]) == 45\nassert solution.minimumOperations([2, 1, 3, 1, 3, 1, 1, 1, 1, 2, 3, 1, 1, 3, 3, 3, 3, 2, 2, 1, 1, 1, 3, 2, 1, 2, 3, 1, 3, 2, 3, 1, 3, 3, 3, 3, 2, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 2, 3, 2, 3, 2, 1, 3, 3, 2, 3, 3, 2, 3, 3, 2, 2, 1, 3, 3, 3, 3, 2, 2, 3, 1, 3, 1, 3, 1, 2, 1, 3, 2, 1, 1, 3, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2]) == 58\nassert solution.minimumOperations([3, 1, 3, 2, 1, 2, 3, 1, 3, 3, 2, 1, 3, 2, 2, 3, 1, 3, 2, 1, 2, 3, 1, 1, 3, 1, 1, 3, 2, 2, 1, 3, 1, 2, 2, 2, 1, 3, 1, 3, 1, 2, 2, 2, 2, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1, 1, 3, 1, 3, 1, 2, 1, 1, 3, 2, 3, 2, 1, 1, 3, 2, 3, 2, 2, 3, 1, 1, 2, 2]) == 48\nassert solution.minimumOperations([3, 1, 3, 2, 3, 2, 3, 2, 3, 3, 2, 3, 1, 1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 3, 3, 3, 2, 3, 2, 2, 2, 1, 2, 3, 3, 2, 3, 2]) == 22\nassert solution.minimumOperations([1, 3, 3, 2, 3, 2, 2, 3, 1, 3, 3, 1, 3, 2, 1]) == 7\nassert solution.minimumOperations([2, 2, 3, 1, 1, 1, 1]) == 3\nassert solution.minimumOperations([3, 3, 1, 1, 1, 1, 2, 1, 2, 2, 1, 3, 2, 2, 3, 1, 1, 3, 3, 1, 2, 2, 3, 3, 1, 3, 1, 3, 1, 2, 1, 1, 2, 3, 1, 1, 2, 1, 3, 3, 1, 1, 1, 2, 2]) == 23\nassert solution.minimumOperations([3, 2, 2, 2, 1, 1, 1, 3, 3, 2, 3, 1, 1, 3, 1, 2, 2, 3, 1, 2, 2, 3, 2, 2, 3, 3, 2, 2, 1, 3, 1, 3, 3, 2, 3, 2, 1, 3]) == 19\nassert solution.minimumOperations([2, 3, 2, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 2, 2, 1, 2, 3, 1, 3, 1, 3, 2, 1, 3, 1, 3, 1, 2, 3, 2, 1, 2, 3, 3, 3, 2, 2, 2, 2, 1, 3, 3, 3, 2, 2, 2, 1, 1, 3, 3, 2, 2, 1, 1]) == 30\nassert solution.minimumOperations([2, 2, 3, 2, 2, 1, 2, 3, 2, 1, 2, 2, 3, 2, 1, 3, 3, 2, 1, 1, 2, 3, 1, 2, 2, 2, 2, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 1, 1, 2, 2, 1, 3, 3, 2, 2, 3, 3, 1, 2, 1, 1, 3, 3, 3, 3, 1, 2, 2, 2]) == 29\nassert solution.minimumOperations([1, 3, 1, 1, 3, 3]) == 1\nassert solution.minimumOperations([2, 3, 2, 2, 2, 2, 3, 2, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1]) == 10\nassert solution.minimumOperations([1, 1, 1, 1, 3, 2, 3, 2, 3, 3, 1, 2, 1, 1, 1, 3, 2, 3, 2, 3, 2, 1, 1, 3, 3, 1, 1, 1, 2, 3, 3, 1, 1, 1, 1, 1, 2, 1, 1, 2, 3, 2, 2, 2, 1, 2, 1, 2, 3, 1, 3, 1, 1, 1, 1, 2, 1, 3, 1, 2, 2, 2, 1, 3, 2, 2, 3, 3, 2, 3, 1, 2, 2, 3, 2, 2, 3, 2, 1, 1, 1, 3, 1, 3, 3, 3, 2, 2, 1]) == 45\nassert solution.minimumOperations([2, 2, 1, 2, 3, 1, 2, 2, 1, 3, 3, 1, 2, 1, 3, 1, 1, 1, 3, 3, 3, 1, 2, 1, 1, 2, 2, 2, 2]) == 14\nassert solution.minimumOperations([2, 2, 2, 3, 1, 2, 3, 1, 2, 1, 3, 3, 1, 1, 3, 2, 2, 3, 1, 1, 2, 1, 3, 2, 2, 2, 1, 1, 2, 3, 3, 2, 1, 3, 1, 2, 3, 1, 3, 3, 1, 1, 1, 2, 1, 3, 3, 2, 3, 3, 1, 3, 3, 1, 1, 3, 3, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 3, 2, 2, 2, 1, 2, 3, 3, 3, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 3, 3, 1, 1, 3, 1]) == 51\nassert solution.minimumOperations([3, 3, 1, 3, 2, 2, 1, 1, 1, 2, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 2, 2, 3, 1, 3, 3, 1, 2, 3, 1, 2, 3, 1, 1, 2, 2, 3, 1, 3, 1, 1, 1, 1, 2, 1, 3, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1, 3, 1, 2, 1, 2, 3, 3, 3, 3, 1, 2, 3, 3, 2, 1, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 2, 3, 2, 1, 2, 3, 1, 2, 2, 3, 2, 3, 2, 1]) == 54\nassert solution.minimumOperations([2, 1, 3, 3, 3, 1, 2, 3, 2, 2, 2, 3, 2, 3, 1]) == 7\nassert solution.minimumOperations([3, 1, 3, 1, 1, 2, 3, 1, 2, 1, 1, 3, 2, 2, 3, 1, 2, 1, 1, 1, 2, 2, 3, 1, 3, 1, 3, 3, 3, 3, 2, 2, 3, 2, 2, 3, 1, 3, 2, 1, 3, 1, 1, 2, 2, 3, 2, 3, 1, 2, 2, 3, 2, 3, 1, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1]) == 37\nassert solution.minimumOperations([2, 3, 3, 3, 1, 2, 2, 3, 1]) == 4\nassert solution.minimumOperations([1, 1, 1, 3, 2, 2, 2, 2, 2, 1, 2, 3, 1, 1, 1, 2, 2, 1, 3, 2, 1, 1, 1, 1, 2, 1, 2, 3, 2, 3, 2, 2, 1, 3, 3, 3, 1, 2, 3, 2, 1, 3, 2, 2, 1, 1, 1, 1, 3, 3, 2, 3, 1, 3, 3, 1, 1, 3, 3, 1, 2, 3, 1, 1, 2, 2, 2, 3, 2, 1, 1, 1, 2, 2, 1, 2, 2, 2, 2, 3, 3, 2, 1, 2]) == 46\nassert solution.minimumOperations([2, 2, 3, 3, 3, 2, 1, 1, 3, 3, 1, 1, 3, 2, 1, 1, 2, 3, 3, 1, 1, 2, 3, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 1, 2, 1, 3, 2, 3, 1, 1, 2, 3, 2, 3, 3, 1, 2, 2, 2, 3, 1, 1, 3, 1, 2, 2, 2, 1, 2, 2, 3, 1, 1, 2, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 2, 3, 2, 2, 2, 1, 2, 2, 3, 2, 3]) == 56\nassert solution.minimumOperations([2, 2, 3, 2, 2, 3, 3, 2, 1, 3, 3, 3, 2, 2, 3, 3, 2, 2, 2, 3, 2, 2, 1]) == 11\nassert solution.minimumOperations([3, 3, 1, 3, 2, 2, 3, 3, 3, 2, 1, 3, 3, 3, 1, 1, 2, 1, 1]) == 10\nassert solution.minimumOperations([3, 3, 1, 2, 3, 1, 2, 2, 2, 2, 1, 2, 2, 1, 3, 2, 2, 3, 1, 3, 2, 2]) == 10\nassert solution.minimumOperations([3, 3, 3, 2, 1, 1, 1, 2, 1, 3, 2, 1, 3, 3, 2, 1, 3, 2, 2, 3, 1, 2, 2, 3, 2, 3, 1, 2, 2, 1, 2, 3, 3, 3, 2, 3, 1, 2, 2, 3, 3, 3, 1, 1, 2, 3, 1, 3, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 3, 2]) == 34\nassert solution.minimumOperations([1, 1, 3, 3, 2, 3, 1]) == 2\nassert solution.minimumOperations([3, 3, 1, 2, 2, 1, 3, 3, 3, 1, 3, 2, 2, 2, 2, 3, 3, 2, 1, 2, 1, 1, 3, 3, 1, 3, 3, 1, 3, 2, 1, 1, 1, 3, 3, 2, 3, 1, 1, 1, 1, 2, 2, 2, 1, 3, 1, 3, 2, 1, 2, 2, 2, 1, 3, 2, 2, 2, 3, 1, 1, 1, 3, 1, 1, 3, 2, 1, 3, 2, 2, 3, 1, 1, 1, 3, 1, 3, 3, 1, 3, 2, 2, 2, 2, 1]) == 52\nassert solution.minimumOperations([3, 3, 2, 1, 3, 2, 1, 1, 3, 1, 1, 1, 3, 3, 1, 3, 3, 3, 2, 1, 1, 3, 2, 1, 1, 1, 1, 3, 1, 3, 3, 3, 1, 2, 1, 3, 3, 1, 1, 3, 2, 2, 3, 1, 1, 3, 1, 2, 2, 3, 1, 3, 2, 2, 2, 2, 3, 3, 1, 2, 3, 2, 3, 3, 2, 3, 3, 3, 1, 1, 3, 3, 3, 1, 1]) == 37\nassert solution.minimumOperations([1, 2, 2, 2, 2, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 1, 1, 1, 3, 3, 3, 1, 2, 3, 3, 1, 2, 1, 1, 1, 1, 2, 1, 3, 2, 3, 1, 2, 2, 1, 2, 3, 2, 3, 2, 2, 3, 1, 3, 2, 3, 1, 3, 2, 3, 2, 1, 1, 2, 2, 3, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 3, 1, 1, 3, 3, 3, 3, 3]) == 41\nassert solution.minimumOperations([1, 1, 3, 1, 3, 3, 1, 2, 2, 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 1, 2, 2, 3, 1, 2, 3, 3, 1, 2, 2, 1, 2, 2, 3, 3, 3, 2, 3, 1, 1, 3, 2, 1, 3, 1, 2, 2, 2, 2, 1, 1, 2, 3, 1, 2, 3, 3, 2, 3, 1, 2, 1, 2, 2, 1, 3, 2, 1, 1, 1, 3, 2, 3, 1, 2, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 2, 3]) == 48\nassert solution.minimumOperations([2, 1, 1, 3, 1, 3, 1, 3, 2, 3, 2, 1, 3, 3, 2, 1, 2, 2, 3, 2, 1, 1, 3, 3, 3, 1, 1, 1, 2, 3, 3, 1, 3, 1, 2, 2, 3, 2]) == 21\nassert solution.minimumOperations([1, 3, 3, 2, 3, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 1, 3, 3, 2, 3, 2, 1, 1, 2, 1, 2, 2, 3, 1, 1, 2, 2, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 3, 1, 3, 2, 2, 1]) == 26\nassert solution.minimumOperations([3, 2, 3, 2, 2, 2, 1, 1, 3, 3, 2, 2, 2, 1, 1, 3, 2, 1, 1, 1, 3, 2, 1, 3, 3, 3, 1, 3, 2, 2, 2, 3, 2, 3, 3, 2, 1, 2, 2, 3, 1, 1, 3, 3, 2, 1, 2, 1, 2, 3, 3, 1, 3, 2, 1, 1, 1, 3, 2, 2, 1, 3, 2, 1, 2, 1, 1, 2, 2, 2, 2, 3, 2, 2, 1, 1, 3, 2, 3, 2, 2, 2, 1, 3, 1, 3, 2, 1, 2, 1, 2, 2, 1, 3, 2, 3, 2, 2]) == 57\nassert solution.minimumOperations([2, 1, 1, 2, 2, 2, 3, 1, 1, 2, 1, 1, 2, 1, 3, 2, 1, 3, 2, 3, 1, 2, 1, 3, 2, 2, 3, 2, 1, 3, 1, 1, 3, 2, 2, 1, 2, 3]) == 21\nassert solution.minimumOperations([2, 3, 3, 1, 2, 2, 2, 1, 1, 1, 3, 1, 1, 2, 1, 2, 2, 1, 1]) == 10\nassert solution.minimumOperations([1, 3, 1, 3, 2, 1, 2, 3, 3, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1, 3, 3, 2, 1, 1, 2, 3, 2, 3, 2, 1, 1]) == 16\nassert solution.minimumOperations([2, 3, 2, 1, 2, 3, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 1, 2, 1, 1, 2, 1, 1, 2, 3, 3, 3, 1, 3, 3, 2, 2, 1, 3, 1, 2, 1, 2, 1, 1, 3, 1, 1, 2, 2, 3, 3, 1, 1, 1, 3, 1, 3, 2, 1, 3, 1, 3, 2, 3, 2, 2, 2, 1, 1, 2, 1, 2, 3, 1, 1]) == 41\nassert solution.minimumOperations([1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 3, 1, 1, 3, 2, 2, 2, 1, 1, 2, 2, 1, 3, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 3, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 3, 1, 1, 1, 3, 3, 2, 1, 3, 2, 2, 2, 1, 3, 3, 1, 3, 1, 1, 3, 3, 1, 3, 2, 3, 1, 2, 1, 1, 3, 2, 2, 3, 2, 3, 1, 2, 1, 1, 3, 2, 3, 1, 3, 3, 1, 2, 3, 1, 2, 2]) == 50\nassert solution.minimumOperations([2, 2, 3, 2, 2, 1, 3, 2, 1, 2, 3, 3, 1, 2, 3, 3, 3, 1, 1, 3, 3, 2, 3, 3, 3, 3, 2, 1, 1, 3, 3, 2, 3, 2, 1, 1, 2, 3, 2, 3, 1, 3, 3, 2, 1, 2, 3, 2, 2, 1, 2, 2, 3]) == 27\nassert solution.minimumOperations([2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 3, 2, 2, 3, 3, 1, 2, 3, 1, 1, 3, 2, 2, 2, 2, 1, 3, 3, 3, 2, 3, 2, 1, 1, 2, 3, 2, 1, 3, 2, 1, 3, 1, 2, 3, 3, 2, 1, 1, 3, 1, 3, 2, 3, 1, 3, 3, 2, 2, 3, 1, 2, 3, 3, 2, 3, 1, 1, 2, 2, 1, 1, 2, 1, 1, 3, 2, 3, 1, 2, 2, 3, 3]) == 50\nassert solution.minimumOperations([1, 1, 1, 3, 2, 1, 2, 3, 1, 1, 1, 1]) == 4\nassert solution.minimumOperations([2, 1, 3, 3, 2, 2, 2, 2, 1, 1, 2, 1, 3, 2, 1, 3, 2, 1, 2, 1, 1, 1, 3, 3, 3, 1, 1, 3, 2, 3, 3, 1, 1, 1, 1, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 3, 2, 1, 2, 1, 2, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 2, 2, 1, 2, 2, 1, 1, 1, 1, 3, 2, 2, 2, 1, 1, 3, 2, 3, 3]) == 44\nassert solution.minimumOperations([1, 2, 1, 3, 1, 3, 1, 1, 1, 2, 2, 3, 1, 2, 1, 3, 3, 2, 3, 1, 3, 1, 1, 3, 1, 2, 1, 1, 2, 3, 3, 1, 2, 2, 2, 3, 3, 2, 2, 1, 2, 2, 3, 2, 3, 1, 1, 2, 2, 2, 3, 1, 2, 2, 1, 2, 3, 2, 3, 1, 2, 3, 3, 1, 3, 2, 3, 2, 2, 3, 2, 2, 1, 1]) == 38\nassert solution.minimumOperations([1, 2, 3, 3, 2, 3, 2, 1, 3, 3, 3, 2, 2, 2, 3, 2, 2, 2, 1, 1, 3, 1, 3, 3, 2, 2, 1, 2, 3, 1, 3, 1, 1, 1, 2, 3, 1, 3, 1, 3, 2, 3, 3, 1, 2, 2, 2, 3, 2, 2, 3, 2, 3, 2, 3, 1, 3, 1, 1, 3, 3, 1, 1, 3, 1, 1, 3, 2, 2, 2, 1, 1, 2, 3, 1, 3, 3, 2, 3, 2, 1, 3]) == 48\nassert solution.minimumOperations([3, 1, 1, 1, 2, 2, 1, 3, 1, 2, 1, 2, 2, 2, 3, 3, 2, 3, 1, 1, 3, 2, 1, 3, 2, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 2, 2, 1, 3, 2, 2, 3, 3, 3, 3, 1, 1, 2, 3, 1]) == 29\nassert solution.minimumOperations([1, 1, 3, 3, 2, 1, 3, 2, 2, 3, 3, 3, 2, 3, 3, 2, 1, 3, 2, 2, 2, 2, 1, 1, 2, 2, 3, 2, 2, 2, 3, 1, 1, 2, 2, 2, 2, 1, 3, 2, 1, 2, 1, 1, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 3, 2, 1, 1, 2, 2, 1, 2, 3, 2, 1, 2, 2, 1, 1, 2, 3, 3, 3, 1, 2, 2]) == 44\nassert solution.minimumOperations([2, 3, 1, 1, 1, 1, 1, 3, 2, 3, 3, 3, 3, 2, 1, 3, 3, 1, 2, 1, 1, 3, 1, 2, 3, 1, 3, 1, 3, 3, 2, 3, 3, 1, 1, 2, 3, 2, 3, 1, 2, 1, 3, 2, 1, 1, 1, 2, 3, 2, 3, 1, 3, 1, 2, 3, 3, 2, 2, 1, 1, 1, 2, 1, 2, 2, 3, 3, 1, 1, 2, 3, 3, 2, 2, 1, 2, 1, 1, 1, 2, 1, 2, 3, 1, 1, 2, 2, 2, 2, 1, 2, 2, 3]) == 53\nassert solution.minimumOperations([2, 2, 1, 2, 3, 1, 3, 2, 2, 3, 2, 1, 1, 1, 2, 3, 1, 3, 1, 3, 1, 2, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 2, 2, 3, 1, 3, 3, 1, 1, 1, 3, 1, 1, 3, 1, 3, 2, 3, 3, 2, 1, 1, 2, 3, 3]) == 28\nassert solution.minimumOperations([3, 2, 1, 2, 3, 2, 3, 1, 2, 1, 3, 1, 1, 3, 1, 2, 3, 3, 3, 3, 2, 3, 1, 1, 2, 3, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 2, 3, 2, 2, 1, 2, 3, 3, 1, 2, 2, 1, 3, 1, 2, 1, 3, 1, 2]) == 34\nassert solution.minimumOperations([1, 3, 2, 1, 1, 2, 2, 3, 3, 3, 2, 1, 3, 3, 2, 2, 2, 1, 2, 1, 3, 2, 3, 3, 3, 3, 2, 3, 2, 2, 2, 1, 3, 2, 2, 3, 1, 1, 3, 3, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2]) == 31\nassert solution.minimumOperations([3, 3, 1, 1, 1, 2, 1, 3, 3, 1, 1, 3, 1, 2, 1, 3, 3, 3, 2, 3, 2, 3, 1, 3, 1, 3, 1, 3, 3, 2, 2, 2, 3, 3, 3, 1, 3, 3, 2, 2, 2, 1, 3, 1, 2, 1, 1, 2]) == 25\nassert solution.minimumOperations([3, 3, 3, 2, 3, 2, 3, 2, 1, 2, 1, 3, 3, 1, 2, 2, 3, 2, 2, 1, 3, 2, 1, 1, 3, 1, 3, 2, 2, 3, 3, 1, 3, 3, 1, 3, 2, 2, 3, 3, 1, 1, 1, 3, 2, 3, 1, 2, 3, 3, 2, 3, 1, 2, 3, 3, 3, 3, 1, 3, 3, 3, 2, 2, 3, 1, 2, 2, 3, 2]) == 38\nassert solution.minimumOperations([1, 3, 2, 2, 2, 1, 3, 3, 1, 2, 3, 1, 3, 3, 1, 1, 2, 3, 3, 3, 2, 3, 1, 2, 3, 3, 3, 3, 3]) == 11\nassert solution.minimumOperations([3, 3, 1, 3, 2, 3, 1, 2, 1, 2, 1, 3, 1, 3, 3, 2, 2, 1, 2, 3, 2, 2, 3, 2, 1, 2, 1, 1, 2, 3, 2, 1, 1, 2, 3, 2, 2, 1, 3, 2, 2, 3, 1, 2, 3, 3, 3, 3, 3, 1, 3, 2, 3, 2, 1, 1, 2, 3, 3, 3, 2, 2, 3, 2, 3, 3, 3, 1, 1, 2, 3, 3, 3, 3, 1, 1, 2, 2, 1, 2, 3, 3, 1, 1, 1, 1, 1, 3, 1, 1, 2, 2, 1, 3, 2, 1, 1]) == 55\nassert solution.minimumOperations([2, 1, 2, 2, 2, 1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 2, 1, 1, 1, 1]) == 11\nassert solution.minimumOperations([1, 1, 1, 2, 3, 2, 1, 1, 1, 1, 1, 3, 2, 1, 1, 3, 1, 2, 2, 3, 1, 2, 2, 1, 1, 2, 3, 2, 1, 3, 1, 2, 2, 1, 2, 3, 1, 2, 2, 1, 2, 1, 3, 2, 1, 2, 2, 1, 3, 1, 2, 1, 2, 2, 2, 2, 1, 3, 2, 1, 1, 3, 1, 2, 3, 3, 3, 2, 3, 1, 3, 3, 1, 2, 1, 3, 3, 2, 3, 1, 3, 1, 1]) == 40\nassert solution.minimumOperations([1, 1, 3]) == 0\nassert solution.minimumOperations([3, 2, 3, 3, 1, 3, 2, 2, 2, 2, 3, 1, 2, 2, 3, 3, 3, 3, 2, 3, 3, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 2, 3, 1, 2, 3, 2, 3, 3, 1, 3, 2, 3, 1, 2, 1, 1, 3, 1, 2, 2]) == 28\nassert solution.minimumOperations([3, 1, 1, 3]) == 1\nassert solution.minimumOperations([3, 2, 3, 3, 1, 3, 2, 3, 2, 1, 1, 1, 1, 3, 3, 2, 2, 3, 1, 2, 2, 3, 2, 2, 2, 3, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 1, 3, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 3, 3, 1, 1, 3, 3, 3, 2, 2, 3, 1, 2, 2, 2, 1, 2, 2, 3, 3, 1, 1, 3, 3, 3, 1, 1, 3, 2, 1, 1, 3, 1, 3, 3, 2, 1, 1, 3, 3, 1, 1]) == 53\nassert solution.minimumOperations([2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 1, 2, 2, 2, 2, 3, 1, 1, 3, 3, 3, 3, 1, 2, 1, 2, 1, 3, 3, 2, 3, 3, 3, 3, 2, 3, 1, 2, 3, 3, 2, 3, 2, 2, 2, 2, 1, 1, 2, 3, 3, 1, 2, 1, 1, 2, 2, 3, 2, 3, 2, 1, 3, 2, 3, 3, 3, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1, 1, 3, 1]) == 45\nassert solution.minimumOperations([3, 1, 2, 1, 3, 3, 3, 2, 3, 2, 3, 1, 2, 1, 3, 1, 3, 1, 3, 3, 1, 1, 1, 1, 3, 3, 2, 2, 2, 1, 3, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 3, 2, 2, 3, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 2, 3, 1, 2, 1, 2, 3, 3, 3, 3, 3, 3, 1, 3, 2, 3, 1, 3, 1, 2, 2, 3, 2, 1, 3, 2]) == 42\nassert solution.minimumOperations([3, 2, 1, 2, 2, 3, 3, 2, 1, 1, 1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 3, 3, 3, 1, 1, 2, 1, 3, 2, 3, 2, 1, 3, 2, 3, 3, 2, 1, 3, 3, 1, 3, 3, 2, 2, 2, 3, 1, 2, 2, 2, 3, 2, 1, 1, 1, 2, 3, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 2, 1, 3, 3, 3, 3, 3, 2, 1, 2, 1, 1, 2, 1]) == 48\nassert solution.minimumOperations([2, 2, 2, 3, 2, 2, 2, 3, 3, 3, 1, 2, 2, 1, 2, 1, 1, 2, 3, 2, 3, 1, 3, 3, 1, 3, 3, 2, 3, 3, 1, 1, 3, 1, 3, 3, 2, 2, 1, 1, 1, 3, 1, 1, 2, 1, 3, 1, 3, 3, 3]) == 25\nassert solution.minimumOperations([3, 2, 3, 3, 2, 3, 1, 3, 2, 2, 3, 3, 3, 1, 3, 1, 3, 1, 1, 2, 2, 2, 2, 1, 3, 1, 2, 3, 3, 2, 2, 3, 3, 1, 1, 2, 3, 3, 3, 1, 2, 3, 3, 2, 1, 1, 3, 1, 3, 1, 3, 3, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 2, 1]) == 47\nassert solution.minimumOperations([1, 2, 1, 2, 1, 3, 1, 3, 2, 3, 1, 2, 3, 2, 2, 2, 1, 2, 2, 1, 1, 2, 3, 3, 1, 1, 2, 2, 2, 3, 3, 2, 3, 1, 3, 2, 3, 2, 1, 2, 2, 2, 3, 2, 1, 1, 2, 3, 2, 3, 2, 2, 1, 3, 3, 2, 2, 2, 1, 1, 2, 3, 2, 1, 3, 2, 2, 2, 2, 3, 3, 3, 2]) == 35\nassert solution.minimumOperations([3, 1, 3, 3, 1, 1, 2, 1, 1, 3, 1, 1, 1, 3, 3, 2, 3, 1, 3, 3, 3, 1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 3, 3, 1, 2, 1, 1, 3, 1, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 3, 3, 2, 2, 1, 2, 2, 2, 1, 1, 2, 3, 3, 1, 3, 2, 1, 2, 3, 1, 1, 3, 3, 2, 1, 2]) == 42\nassert solution.minimumOperations([2, 2, 1, 3, 3, 3, 1, 3, 1, 2, 3, 2, 2, 2, 3, 2, 3, 2, 1, 2, 3, 1, 2, 3, 3, 3, 2, 2, 2, 2, 2, 3, 1, 2, 3, 1, 1, 2, 2, 1, 3, 1, 2, 1, 3, 1, 1, 2, 1, 3, 1, 1, 2, 3, 2, 2, 3, 1, 2, 1, 3, 3, 1, 1, 2, 3, 3, 2, 1, 1, 2, 1, 3, 2, 1, 3, 3]) == 45\nassert solution.minimumOperations([3, 3, 2, 1, 1, 3, 2, 3, 3, 1, 2, 1, 2, 2, 1, 1, 2, 1, 3, 2, 1, 2, 3, 2, 1, 1, 2, 1, 2, 3, 1, 3, 2, 2, 3, 2, 3, 1, 3, 2, 2, 1, 2, 3, 2, 2, 3, 2, 3, 3, 3, 3, 1, 2]) == 29\nassert solution.minimumOperations([1, 3, 2, 1, 3, 3, 1, 2, 1, 2, 2, 1, 2, 3, 2, 3, 3, 1, 2, 2, 3, 1, 3, 3]) == 11\nassert solution.minimumOperations([2, 2, 2, 1, 2, 2, 3, 3, 1, 3, 2, 2, 2]) == 5\nassert solution.minimumOperations([3, 3, 3, 1, 3, 3, 3, 2, 1, 1, 2, 3, 3, 1, 1, 1, 3, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 3, 1, 2, 3, 3, 1, 2, 2, 2, 3, 2, 2, 2, 3, 3, 2, 2, 3, 1, 3, 2, 1, 3, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 3, 3, 1, 1, 3, 2]) == 37\nassert solution.minimumOperations([1, 2, 1, 1, 3, 2, 1, 2, 3, 1]) == 4\nassert solution.minimumOperations([2, 1, 2, 1, 1, 3, 1, 2, 3, 3, 1, 1, 2, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1, 1, 3, 1, 1, 3, 2, 3, 3, 3, 1, 2, 2, 1, 3, 1, 1, 1, 3, 2, 3, 3, 3, 2, 1, 1, 3, 3, 1, 3, 3, 1, 3]) == 29\nassert solution.minimumOperations([3, 3, 2, 1, 1, 2, 2, 2, 1, 2, 2, 1, 3, 2, 1, 1, 2, 2, 1, 2, 2, 2, 2, 1, 1, 3, 1, 1, 3, 1, 3, 1, 1, 3, 2, 2, 2, 3, 1, 3, 2, 1, 3, 1, 1, 1, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 3, 2, 1, 2, 3, 2, 3, 3, 1, 1, 2]) == 37\nassert solution.minimumOperations([3, 1, 2, 2, 2, 3, 3, 3, 2, 2, 2, 1, 2, 3, 2, 1, 2, 1, 2, 2, 3, 3, 1, 1, 1, 2, 3, 3, 3, 2, 2, 2, 2, 1, 3, 2, 3, 1, 1, 1, 2, 1, 1, 1, 3, 1, 3, 3, 1, 3, 2, 1, 2, 3, 1, 2, 1, 1]) == 34\nassert solution.minimumOperations([2, 1, 1, 1, 3, 1, 1, 2, 3, 2, 2, 1, 2, 2, 3, 2, 2, 3, 3, 2, 2]) == 7\nassert solution.minimumOperations([2, 1, 1, 1, 2, 1, 3, 2, 3, 2, 3, 3, 2, 3, 3, 1, 3, 1, 1, 3, 1, 2, 2, 1, 3, 1, 1, 3, 1, 2, 3, 2, 2, 2, 1, 3, 3, 2, 2, 1, 3, 3, 2, 3, 2, 2, 2, 1, 2, 3, 3, 2, 3, 2, 1, 3, 2, 3, 3, 3, 2, 1, 1, 2, 3, 2, 3, 3, 2, 2, 1, 1, 1, 3, 1, 3, 3, 2, 3]) == 42\nassert solution.minimumOperations([1, 1, 3, 3, 1, 1, 3, 2, 1, 1, 2, 1, 2, 3, 3, 1, 3, 1, 2, 3, 2, 1, 3, 1, 1, 1, 1, 3, 2, 2, 3, 3, 1, 3, 3, 3, 3, 1, 1, 2, 1, 3, 2, 2, 3, 2, 2, 3, 1, 1, 2, 1, 1, 3, 2, 1, 1, 3, 3, 1, 3, 1, 3, 2, 2, 2, 2, 3, 3, 1, 1, 2, 1, 2, 3]) == 42\nassert solution.minimumOperations([1, 1, 3, 3, 2, 2, 3, 1, 3, 3, 3, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 1, 2, 3, 3, 3, 2, 1, 2, 1, 3, 1, 2, 3, 1, 1, 1]) == 22\nassert solution.minimumOperations([1, 2, 2, 3, 1, 2, 3, 3, 2, 3, 1, 3, 1, 1, 1, 3, 1, 2, 2, 1, 3, 3, 2, 1, 2, 1, 1, 2, 3, 2, 3, 3, 1, 2, 2, 3, 2, 3, 1, 3, 2, 1, 3, 2, 1, 2, 1, 1, 3, 1, 1, 1, 2, 3, 1, 1, 2, 2, 1, 2, 3, 1, 2, 1, 3, 2]) == 39\nassert solution.minimumOperations([3, 3, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 3, 3, 3, 2, 3, 2, 1, 1, 2, 3, 3, 2, 3, 2, 1, 3, 2, 3, 1, 1, 1, 3, 3, 2, 1, 3, 2, 3, 3]) == 21\nassert solution.minimumOperations([1, 3, 1, 1, 2, 1, 2, 3, 3, 3, 1, 1, 2, 1, 2, 2, 1, 3, 3, 2, 1, 2, 3, 3, 2, 1, 2, 2, 2, 2, 2, 3, 3, 3, 1, 2, 2, 1, 2, 2, 1, 2, 3, 2, 2, 1, 2, 2, 1, 3, 1, 2, 2, 3, 1, 3, 3, 1, 3, 1, 3, 2, 1, 1, 2, 1, 1, 1, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2]) == 42\nassert solution.minimumOperations([2, 1, 1, 1, 3, 3, 1, 1, 2, 2, 2, 1, 3, 3, 2, 1, 2, 1, 3, 3, 3, 2, 1, 1, 2, 2, 1, 2, 1, 3, 2, 1, 3, 2, 3, 1, 1, 1, 3, 2, 1, 3, 2, 1, 3, 3, 2, 1, 2]) == 28\nassert solution.minimumOperations([2, 3, 3, 1, 1, 3, 2, 1, 2, 2, 3, 2, 1, 1, 1, 2, 3, 3, 2, 2, 3, 2, 1, 3, 3, 1, 3, 3, 2, 3, 2, 2, 2, 3, 2, 2, 2, 1, 2, 3, 2, 3, 2, 3, 2, 3, 1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 1, 3, 3, 2, 3, 1, 3, 2, 1, 2, 2, 2, 1, 1, 3]) == 40\nassert solution.minimumOperations([1, 2, 1, 3, 3, 3, 2, 1, 1, 1, 1, 3, 1, 2, 3, 1, 2, 1, 1, 1, 3, 1, 2, 1, 2, 3, 2, 3, 3, 2, 2, 3, 2, 3, 2, 2, 1, 3, 3, 3, 2, 1, 1, 1, 3, 1, 2, 2]) == 24\nassert solution.minimumOperations([2, 3, 3, 2, 2, 3, 3, 3, 1, 3, 2, 2, 3, 3, 3, 3, 1, 3, 2, 1, 2, 1, 2, 1, 1, 2, 3, 2, 1, 1, 1, 1, 1, 1, 2, 3, 3, 2, 2, 2, 2, 2, 1, 2, 3, 2, 1, 3, 2, 3, 2, 2, 3, 3, 2, 1, 2, 2, 3, 2, 1, 2, 1, 2, 2, 1, 2, 3]) == 36\nassert solution.minimumOperations([3, 3, 1, 2, 2, 3, 1, 3, 3, 2, 2, 2, 3, 1, 1, 2, 2, 1, 2, 3, 1, 1, 1, 3, 1, 3, 1, 1, 1, 3, 3, 1, 1, 1, 3, 2, 2, 2, 1, 1, 3, 3, 3, 2]) == 23\nassert solution.minimumOperations([1, 3, 2, 1, 1, 3, 3, 1, 1, 2, 2, 3]) == 4\nassert solution.minimumOperations([2, 2, 1, 3, 2, 3, 1, 2, 2, 1, 2, 2, 3, 2, 3, 2, 1, 3, 1, 2, 2, 3, 2, 3, 1, 3, 2, 2, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 1, 3]) == 28\nassert solution.minimumOperations([3, 1, 1, 3, 2, 1, 2, 3, 1, 1, 3, 1, 3, 1, 3, 2, 1, 1, 1, 3, 2, 3, 1, 3, 3, 1, 2, 2, 3, 3, 1, 2, 2, 3]) == 17\nassert solution.minimumOperations([3, 1, 2, 1, 1, 3]) == 2",
  "inefficient_solution": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        groups = [[] for _ in range(3)]\n        for i, x in enumerate(nums):\n            groups[x-1].append(i)\n        group_sizes = [len(g) for g in groups]\n        min_ops = float('inf')\n        for group1_idx in range(3):\n            for group2_idx in range(3):\n                for group3_idx in range(3):\n                    if group1_idx != group2_idx and group1_idx != group3_idx and group2_idx != group3_idx:\n                        ops = 0\n                        res = []\n                        for i, g in enumerate(groups):\n                            res.extend(sorted([v for v in g if i == group1_idx]))\n                            res.extend(sorted([v for v in g if i == group2_idx]))\n                            res.extend(sorted([v for v in g if i == group3_idx]))\n                            if i == group1_idx:\n                                ops += 0\n                            elif i == group2_idx:\n                                ops += sum(1 for v in g if v < res[0])\n                            else:\n                                ops += sum(1 for v in g if v < res[len(res)//2])\n                        if res == sorted(res):\n                            min_ops = min(min_ops, ops)\n        return min_ops",
  "is_python": true
}