{
  "problem_idx": 973,
  "task_name": "K Closest Points to Origin",
  "markdown_description": "\nGiven an array of `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.\n\n\nThe distance between two points on the **X-Y** plane is the Euclidean distance (i.e., `\u221a(x1 - x2)2 + (y1 - y2)2`).\n\n\nYou may return the answer in **any order**. The answer is **guaranteed** to be **unique** (except for the order that it is in).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0973.K%20Closest%20Points%20to%20Origin/images/closestplane1.jpg)\n\n```\n\n**Input:** points = [[1,3],[-2,2]], k = 1\n**Output:** [[-2,2]]\n**Explanation:**\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** points = [[3,3],[5,-1],[-2,4]], k = 2\n**Output:** [[3,3],[-2,4]]\n**Explanation:** The answer [[-2,4],[3,3]] would also be accepted.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= points.length <= 104`\n* `-104 <= xi, yi <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        points.sort(key=lambda p: p[0] * p[0] + p[1] * p[1])\n        return points[:k]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def kClosest(self, points, k):\n        points.sort(key=lambda p: p[0] * p[0] + p[1] * p[1])\n        return points[:k]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random points list\n    points = [[random.randint(-10000, 10000), random.randint(-10000, 10000)] for _ in range(random.randint(2, 10))]\n    \n    # Generate a random k value\n    k = random.randint(1, len(points))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.kClosest(points, k)\n\n    return points, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        points, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.kClosest(points, k) == expected_result\n        print(f\"assert solution.kClosest({points}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.kClosest({points}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.kClosest([[-4210, 4675], [-7630, -849], [7859, 490], [-2145, 7931], [468, 8812], [-731, -9295], [-8540, 4716], [-8023, 8271], [-9491, 7537]], 5) == [[-4210, 4675], [-7630, -849], [7859, 490], [-2145, 7931], [468, 8812]]\nassert solution.kClosest([[2231, -1750], [-2523, -2055], [2574, -2576], [5292, -894], [-5657, 6282], [6622, 5518], [8644, 29], [-5389, 8578]], 1) == [[2231, -1750]]\nassert solution.kClosest([[1189, 2463], [-1650, -2706], [-7609, 3379], [-7543, 6413]], 1) == [[1189, 2463]]\nassert solution.kClosest([[6776, -4202], [956, -9147], [3847, 9657], [5672, 9379], [-8910, -6854]], 4) == [[6776, -4202], [956, -9147], [3847, 9657], [5672, 9379]]\nassert solution.kClosest([[3373, 3288], [1827, -4932], [-6002, 374], [5848, 5521], [-4560, 6850], [7672, -4032], [-7758, -8029]], 4) == [[3373, 3288], [1827, -4932], [-6002, 374], [5848, 5521]]\nassert solution.kClosest([[-232, 1610], [-2166, -1020], [-3332, 627], [-2865, -5039], [8419, -4945], [9540, 2190], [5824, 8925]], 5) == [[-232, 1610], [-2166, -1020], [-3332, 627], [-2865, -5039], [8419, -4945]]\nassert solution.kClosest([[-1486, -1822], [-6177, -337], [-6463, 4412], [2064, 7644], [1469, 8055], [2447, -7814], [-8428, 1093], [-4522, -7695], [-9005, 6900]], 7) == [[-1486, -1822], [-6177, -337], [-6463, 4412], [2064, 7644], [1469, 8055], [2447, -7814], [-8428, 1093]]\nassert solution.kClosest([[639, -64], [1964, 3849], [4861, 510], [-3901, -7251], [-9770, -8925]], 3) == [[639, -64], [1964, 3849], [4861, 510]]\nassert solution.kClosest([[-651, 5154], [-5330, -4820], [-6858, -2809], [-8944, 7949]], 1) == [[-651, 5154]]\nassert solution.kClosest([[994, -591], [-2831, 1368], [-5633, -1243], [-6413, 1821], [6321, -7362], [4541, 9568], [-6575, 8968]], 6) == [[994, -591], [-2831, 1368], [-5633, -1243], [-6413, 1821], [6321, -7362], [4541, 9568]]\nassert solution.kClosest([[2494, -1851], [-3888, 3370], [-5719, -1010], [4600, 5249], [-8848, -5879], [-9105, -9000]], 6) == [[2494, -1851], [-3888, 3370], [-5719, -1010], [4600, 5249], [-8848, -5879], [-9105, -9000]]\nassert solution.kClosest([[8881, 1613], [1659, 9413], [-8976, -6099]], 1) == [[8881, 1613]]\nassert solution.kClosest([[2592, -5205], [6398, -1579], [-8337, 1314], [-8434, -2581], [-9686, 2806], [-5360, 8651], [9979, 4268]], 2) == [[2592, -5205], [6398, -1579]]\nassert solution.kClosest([[-231, -5917], [5540, -5512], [6887, -5130], [9508, -3342]], 3) == [[-231, -5917], [5540, -5512], [6887, -5130]]\nassert solution.kClosest([[-6407, -7863], [9277, 9224]], 1) == [[-6407, -7863]]\nassert solution.kClosest([[-2024, 54], [-732, -5516], [-3285, 6341], [-2539, -7896], [4578, 7144], [-3755, -9162], [-3377, -9385], [7682, -7466], [5476, 9652], [-8662, 9317]], 7) == [[-2024, 54], [-732, -5516], [-3285, 6341], [-2539, -7896], [4578, 7144], [-3755, -9162], [-3377, -9385]]\nassert solution.kClosest([[727, -1720], [1155, 3418], [3904, -1310], [3656, -7195], [-74, 8549], [8455, -4167], [-7590, 5816]], 7) == [[727, -1720], [1155, 3418], [3904, -1310], [3656, -7195], [-74, 8549], [8455, -4167], [-7590, 5816]]\nassert solution.kClosest([[-3664, 7806], [5591, -7329]], 2) == [[-3664, 7806], [5591, -7329]]\nassert solution.kClosest([[2288, 664], [2208, -6375], [7139, 4590]], 3) == [[2288, 664], [2208, -6375], [7139, 4590]]\nassert solution.kClosest([[-441, -5416], [-5680, 2671], [-2998, 5811], [-7424, 941], [-1350, -8767], [5061, -8620], [9769, -4703], [-6637, -9771]], 3) == [[-441, -5416], [-5680, 2671], [-2998, 5811]]\nassert solution.kClosest([[-5910, 6321], [-1747, 9777]], 1) == [[-5910, 6321]]\nassert solution.kClosest([[1197, 1821], [-2974, -1665], [-3422, 2299], [-6299, 3769], [5960, 4968], [-6599, 5076], [-6725, 7764]], 5) == [[1197, 1821], [-2974, -1665], [-3422, 2299], [-6299, 3769], [5960, 4968]]\nassert solution.kClosest([[-2649, -4908], [-3811, -4269], [-2257, 7753], [-5868, 7212], [8522, 8115], [9069, 7540]], 5) == [[-2649, -4908], [-3811, -4269], [-2257, 7753], [-5868, 7212], [8522, 8115]]\nassert solution.kClosest([[143, -3933], [-3589, -1784], [-4017, 5506], [2966, -9517], [-9393, -6646]], 3) == [[143, -3933], [-3589, -1784], [-4017, 5506]]\nassert solution.kClosest([[-5925, 1989], [-1315, 6601], [6903, -1285], [-7833, -5664], [9220, -7520]], 2) == [[-5925, 1989], [-1315, 6601]]\nassert solution.kClosest([[-1436, -138], [-5603, 2684], [-6188, 3157], [-1488, 9901]], 2) == [[-1436, -138], [-5603, 2684]]\nassert solution.kClosest([[1244, -96], [960, -5507], [4008, -8260], [8800, 9100]], 2) == [[1244, -96], [960, -5507]]\nassert solution.kClosest([[1466, -2703], [-3127, 274], [-1798, -3872], [1335, -6149], [-3648, -6482], [7524, -4043], [5532, 8183], [-7060, -7262]], 8) == [[1466, -2703], [-3127, 274], [-1798, -3872], [1335, -6149], [-3648, -6482], [7524, -4043], [5532, 8183], [-7060, -7262]]\nassert solution.kClosest([[-1434, -713], [1013, 1875]], 2) == [[-1434, -713], [1013, 1875]]\nassert solution.kClosest([[-1634, 2663], [-5054, -2124], [7269, -651], [-391, 9078], [5067, -8303], [7555, 6318], [3694, -9564]], 1) == [[-1634, 2663]]\nassert solution.kClosest([[2104, 2607], [-8121, 1561], [2320, -8394], [3975, 8669], [2583, 9402], [-9737, 1724], [8583, 4977], [-2782, -9701], [-7921, -7839]], 3) == [[2104, 2607], [-8121, 1561], [2320, -8394]]\nassert solution.kClosest([[-2438, -341], [-4046, -2604], [6732, -3895], [5637, -5969], [-1296, 8175], [-8482, -540], [-3650, 7827], [9526, 2216]], 6) == [[-2438, -341], [-4046, -2604], [6732, -3895], [5637, -5969], [-1296, 8175], [-8482, -540]]\nassert solution.kClosest([[-392, -2209], [-243, 2938], [5504, 2105], [-7423, 466], [-5768, 9267], [8633, 7663], [8001, -8486], [-9273, 7693]], 2) == [[-392, -2209], [-243, 2938]]\nassert solution.kClosest([[5314, -2716], [5840, 2044], [-3173, 6300], [7705, -1073], [7013, 4069], [8634, -6206], [5578, 9425]], 7) == [[5314, -2716], [5840, 2044], [-3173, 6300], [7705, -1073], [7013, 4069], [8634, -6206], [5578, 9425]]\nassert solution.kClosest([[-347, 1379], [-1647, 76], [-2379, 2968], [6254, -3455], [7713, 2424], [-5182, -6509], [-9172, 6199], [-7311, -9464], [-9644, 9922]], 2) == [[-347, 1379], [-1647, 76]]\nassert solution.kClosest([[6225, 4797], [-8878, -3847], [-7693, -7634]], 2) == [[6225, 4797], [-8878, -3847]]\nassert solution.kClosest([[2079, -1363], [5090, -1831], [-2055, 5186], [-6058, -7080], [-7093, -7407], [3695, -9700], [-7696, 7117]], 6) == [[2079, -1363], [5090, -1831], [-2055, 5186], [-6058, -7080], [-7093, -7407], [3695, -9700]]\nassert solution.kClosest([[-1126, 995], [-1543, 634], [-2087, 78], [5476, -315], [-4251, -3580], [-3365, -4658], [1920, 7065], [8808, 4966]], 7) == [[-1126, 995], [-1543, 634], [-2087, 78], [5476, -315], [-4251, -3580], [-3365, -4658], [1920, 7065]]\nassert solution.kClosest([[-4623, -2818], [6144, 6337], [-8576, -5669], [5562, -8692], [-7048, 8362], [-6315, 9426], [-7860, -8853]], 2) == [[-4623, -2818], [6144, 6337]]\nassert solution.kClosest([[2103, -5554], [-7665, 1923], [8267, -5323], [-9732, 3875]], 1) == [[2103, -5554]]\nassert solution.kClosest([[1259, 698], [-114, 3037], [1871, -6230], [7529, 3904], [-9703, 2590], [4370, -9606], [9375, 6186], [9808, -8870]], 3) == [[1259, 698], [-114, 3037], [1871, -6230]]\nassert solution.kClosest([[1588, 2272], [-5524, 2695], [-5935, -2982], [6412, 2076], [5200, -5123], [3723, -8441], [-9828, -2392], [-5553, -8583], [6187, -9765], [9991, -6397]], 6) == [[1588, 2272], [-5524, 2695], [-5935, -2982], [6412, 2076], [5200, -5123], [3723, -8441]]\nassert solution.kClosest([[-3723, 573], [-4048, -3946], [1491, -7661], [-8104, -3598], [-8733, 3034]], 4) == [[-3723, 573], [-4048, -3946], [1491, -7661], [-8104, -3598]]\nassert solution.kClosest([[6452, -1055], [-5860, 4180], [3296, 6614], [7676, -7848], [5628, -9713]], 2) == [[6452, -1055], [-5860, 4180]]\nassert solution.kClosest([[-4677, -6750], [-4079, -7853], [8319, -3815], [-5547, -8133], [-9923, 646]], 3) == [[-4677, -6750], [-4079, -7853], [8319, -3815]]\nassert solution.kClosest([[1956, -3716], [573, 5418], [6307, 3259], [-3148, 6468]], 4) == [[1956, -3716], [573, 5418], [6307, 3259], [-3148, 6468]]\nassert solution.kClosest([[-189, -2932], [-3697, 1286], [4245, 1558], [-1125, -6324], [1518, -6555], [7112, -3514], [5856, -6400], [-9203, -809], [-440, -9914], [-9732, -3007]], 2) == [[-189, -2932], [-3697, 1286]]\nassert solution.kClosest([[-6379, 5599], [3579, -9640]], 1) == [[-6379, 5599]]\nassert solution.kClosest([[319, -1735], [-3585, -289], [1981, 3311], [-4249, -330], [2010, 5144], [1399, -7833], [-8234, 2005], [-9114, -597], [9321, 226]], 5) == [[319, -1735], [-3585, -289], [1981, 3311], [-4249, -330], [2010, 5144]]\nassert solution.kClosest([[1320, 5701], [-4169, -4795], [-6459, -4311], [1646, 9080], [9538, 6203]], 2) == [[1320, 5701], [-4169, -4795]]\nassert solution.kClosest([[3092, -1595], [85, 3508], [-7277, 2602], [-9381, -4257]], 4) == [[3092, -1595], [85, 3508], [-7277, 2602], [-9381, -4257]]\nassert solution.kClosest([[-3592, 2017], [-3577, -2125], [5499, 1406], [9561, -5274], [8814, -7700]], 2) == [[-3592, 2017], [-3577, -2125]]\nassert solution.kClosest([[-734, -5409], [2444, 7229], [6103, -4701], [-1300, -7609], [7616, -2839], [-6611, 5347], [5741, 7444], [4749, -9975], [-9075, 8225]], 1) == [[-734, -5409]]\nassert solution.kClosest([[2203, -5619], [7069, -2205]], 2) == [[2203, -5619], [7069, -2205]]\nassert solution.kClosest([[1360, -2591], [-4221, 559], [286, -4380], [-2143, 4230], [809, 5633], [4819, -4608], [4746, 6802], [-9081, 226], [-7308, 6449]], 7) == [[1360, -2591], [-4221, 559], [286, -4380], [-2143, 4230], [809, 5633], [4819, -4608], [4746, 6802]]\nassert solution.kClosest([[-694, 5284], [5531, -4142], [5175, 7076]], 3) == [[-694, 5284], [5531, -4142], [5175, 7076]]\nassert solution.kClosest([[3627, -110], [4707, 6757], [2503, 8084], [2837, 8982], [-9518, 3722], [4625, -9151], [5994, -8831], [9629, 5668], [9267, 7141]], 7) == [[3627, -110], [4707, 6757], [2503, 8084], [2837, 8982], [-9518, 3722], [4625, -9151], [5994, -8831]]\nassert solution.kClosest([[464, 4348], [2274, 4051], [2708, -4969], [5089, -3252], [5826, 5921], [7852, -4207], [9710, -9007]], 3) == [[464, 4348], [2274, 4051], [2708, -4969]]\nassert solution.kClosest([[-5470, -4656], [8166, 4667], [-8923, 3982], [6545, -8973]], 3) == [[-5470, -4656], [8166, 4667], [-8923, 3982]]\nassert solution.kClosest([[1120, -437], [-1078, 2425], [2655, 3], [6161, 678], [5971, -2132], [1530, 6781], [7735, 4405], [-6592, -6170], [-4737, -7793], [-8588, -5865]], 10) == [[1120, -437], [-1078, 2425], [2655, 3], [6161, 678], [5971, -2132], [1530, 6781], [7735, 4405], [-6592, -6170], [-4737, -7793], [-8588, -5865]]\nassert solution.kClosest([[6218, 25], [9087, 1658], [9447, 889], [7865, -9513]], 2) == [[6218, 25], [9087, 1658]]\nassert solution.kClosest([[-1359, -961], [4041, 1611], [-2069, 8630], [1270, -8898], [-9171, -322], [-5397, 8682]], 2) == [[-1359, -961], [4041, 1611]]\nassert solution.kClosest([[-3774, 5738], [8712, 3276]], 1) == [[-3774, 5738]]\nassert solution.kClosest([[-3423, 3401], [2998, -4584], [-5973, 2996], [-3209, -7464]], 1) == [[-3423, 3401]]\nassert solution.kClosest([[2509, -1151], [-5772, -6136], [-5693, 6430], [8394, -2242], [-8289, 4536]], 1) == [[2509, -1151]]\nassert solution.kClosest([[-934, -1514], [-5662, -5064], [-5755, 6088]], 3) == [[-934, -1514], [-5662, -5064], [-5755, 6088]]\nassert solution.kClosest([[-542, 2641], [-1471, -3285], [-863, 3788], [5770, -2717], [6887, 1015], [-3607, -8232], [-4449, -9332], [-8292, 9846]], 3) == [[-542, 2641], [-1471, -3285], [-863, 3788]]\nassert solution.kClosest([[-5748, -3554], [-4377, -8491]], 1) == [[-5748, -3554]]\nassert solution.kClosest([[-1017, 3261], [-2170, -3984], [-4604, 739], [-32, -6586], [5484, -5767], [8406, 1064], [-7566, 3876], [8692, -2121]], 6) == [[-1017, 3261], [-2170, -3984], [-4604, 739], [-32, -6586], [5484, -5767], [8406, 1064]]\nassert solution.kClosest([[2534, -460], [3198, 825], [788, 6587], [9037, 2432]], 4) == [[2534, -460], [3198, 825], [788, 6587], [9037, 2432]]\nassert solution.kClosest([[-1375, -619], [-9278, -739]], 2) == [[-1375, -619], [-9278, -739]]\nassert solution.kClosest([[-5016, -2523], [-5259, 3063]], 1) == [[-5016, -2523]]\nassert solution.kClosest([[-3673, -410], [-4688, 3201], [-1202, 6823], [5300, -4710], [5532, -4843], [7957, 2213], [-9520, -831], [8593, 8865]], 8) == [[-3673, -410], [-4688, 3201], [-1202, 6823], [5300, -4710], [5532, -4843], [7957, 2213], [-9520, -831], [8593, 8865]]\nassert solution.kClosest([[115, -5721], [-2601, 5844], [4485, 5037], [-5744, -3842], [6751, -2242], [8552, -7755]], 1) == [[115, -5721]]\nassert solution.kClosest([[4399, -7487], [8818, -3277], [-5616, 9902]], 1) == [[4399, -7487]]\nassert solution.kClosest([[2701, 4541], [7074, -5185], [-8772, 1707], [-3276, -8808], [5537, -7835], [4933, -8335], [1360, -9712], [9297, 8833]], 3) == [[2701, 4541], [7074, -5185], [-8772, 1707]]\nassert solution.kClosest([[2406, 1543], [1107, -5789], [-618, -8105], [-103, 8208], [-6862, -7918], [-9863, 4389], [-9499, -5363], [9066, 6250], [8206, -7419]], 2) == [[2406, 1543], [1107, -5789]]\nassert solution.kClosest([[628, 4006], [6074, -465], [3001, 6267], [-2305, 6755], [3534, -6659], [-4014, -8955], [6341, 7844], [5000, -8902]], 8) == [[628, 4006], [6074, -465], [3001, 6267], [-2305, 6755], [3534, -6659], [-4014, -8955], [6341, 7844], [5000, -8902]]\nassert solution.kClosest([[-4902, 2367], [488, 6109], [-8272, 1191], [-67, 8624], [-7504, -5170], [-5246, 7879], [4648, 8922], [9947, -3300]], 3) == [[-4902, 2367], [488, 6109], [-8272, 1191]]\nassert solution.kClosest([[-6155, 4192], [8151, 807], [-2110, 8821], [-1285, 9862]], 4) == [[-6155, 4192], [8151, 807], [-2110, 8821], [-1285, 9862]]\nassert solution.kClosest([[-2131, 3038], [-2194, 4748], [-1604, 7734], [-8168, -9432]], 1) == [[-2131, 3038]]\nassert solution.kClosest([[-1266, 331], [-3698, 664], [4347, -3273], [-5830, 4407], [-6600, -3292], [1750, -8752], [-5796, 8939], [9592, 5826], [9162, -9244]], 6) == [[-1266, 331], [-3698, 664], [4347, -3273], [-5830, 4407], [-6600, -3292], [1750, -8752]]\nassert solution.kClosest([[-6631, -1712], [7872, -7602]], 2) == [[-6631, -1712], [7872, -7602]]\nassert solution.kClosest([[-8860, 667], [-7013, 5704]], 2) == [[-8860, 667], [-7013, 5704]]\nassert solution.kClosest([[-1417, 3929], [-3710, -2422], [-6732, -3849], [-2976, 8146], [6057, 6700], [3431, 9085]], 6) == [[-1417, 3929], [-3710, -2422], [-6732, -3849], [-2976, 8146], [6057, 6700], [3431, 9085]]\nassert solution.kClosest([[1855, 4925], [-1719, 7719], [-872, 7864], [8605, 8726]], 1) == [[1855, 4925]]\nassert solution.kClosest([[2874, -787], [726, 3606], [2531, 3520], [660, 9271], [8917, 6704], [8260, -8108]], 2) == [[2874, -787], [726, 3606]]\nassert solution.kClosest([[-2133, -22], [-1324, -2202], [2901, -811], [2925, 3503], [223, 4866], [-7624, 5092], [-5287, -8381], [9053, 4072], [-9630, 6483]], 4) == [[-2133, -22], [-1324, -2202], [2901, -811], [2925, 3503]]\nassert solution.kClosest([[-1539, 3438], [-6144, -3061], [3656, 6043], [-6710, 6548], [9513, -4586]], 2) == [[-1539, 3438], [-6144, -3061]]\nassert solution.kClosest([[-3098, -1153], [7357, 3737], [-9794, 3428], [-4741, 9779], [9230, 6032]], 5) == [[-3098, -1153], [7357, 3737], [-9794, 3428], [-4741, 9779], [9230, 6032]]\nassert solution.kClosest([[187, -793], [-3864, -7451], [-6909, -5951], [8361, -5628], [-9731, -4228], [9139, -8892]], 4) == [[187, -793], [-3864, -7451], [-6909, -5951], [8361, -5628]]\nassert solution.kClosest([[697, 2853], [-1580, -2858], [4272, 3641], [651, -5771], [3713, -6631], [-4939, 6820], [5713, 7576], [4032, -8600], [9495, 2169], [-9553, -2064]], 5) == [[697, 2853], [-1580, -2858], [4272, 3641], [651, -5771], [3713, -6631]]\nassert solution.kClosest([[-1676, -509], [-3585, 245], [-4258, 3763], [6747, -3524], [5052, -6257], [-2105, 7843], [2270, 7948], [5151, 6660], [9499, -3711]], 7) == [[-1676, -509], [-3585, 245], [-4258, 3763], [6747, -3524], [5052, -6257], [-2105, 7843], [2270, 7948]]\nassert solution.kClosest([[1823, -965], [3045, -3369], [5894, -6248], [-7718, -3775], [-9203, 171], [-8731, 6960], [8871, -9703]], 1) == [[1823, -965]]\nassert solution.kClosest([[1166, -993], [2763, 3459], [-4675, 808], [-7444, -2220], [5701, 6800], [-8548, -3499], [-6691, -7446], [-5358, 8458], [7263, 7523]], 5) == [[1166, -993], [2763, 3459], [-4675, 808], [-7444, -2220], [5701, 6800]]\nassert solution.kClosest([[1353, -2811], [7552, 261], [-5951, 7749]], 3) == [[1353, -2811], [7552, 261], [-5951, 7749]]\nassert solution.kClosest([[3429, 259], [-6198, 2440], [7959, 618], [6319, -6670], [4267, -8478], [-9437, -3755], [9881, -9818]], 5) == [[3429, 259], [-6198, 2440], [7959, 618], [6319, -6670], [4267, -8478]]\nassert solution.kClosest([[59, 2541], [-105, 2867], [-3326, 91], [-1109, 4214], [-2313, -5376], [7212, 5700], [8805, -4262], [1976, -9946], [-7064, -8921]], 9) == [[59, 2541], [-105, 2867], [-3326, 91], [-1109, 4214], [-2313, -5376], [7212, 5700], [8805, -4262], [1976, -9946], [-7064, -8921]]\nassert solution.kClosest([[-3054, 3887], [8900, 2518], [5304, 9812], [8550, -9783], [9626, 9228]], 3) == [[-3054, 3887], [8900, 2518], [5304, 9812]]\nassert solution.kClosest([[-5058, 3333], [130, 6854], [7849, -3159], [-9061, 3773], [-6322, -8247]], 2) == [[-5058, 3333], [130, 6854]]",
  "inefficient_solution": "class Solution:\n    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:\n        distances = {}\n        for point in points:\n            distance = point[0] * point[0] + point[1] * point[1]\n            distances[distance] = point\n        sorted_distances = sorted(distances.keys())\n        result = []\n        for dist in sorted_distances:\n            result.append(distances[dist])\n            if len(result) == k:\n                break\n        return result",
  "is_python": true
}