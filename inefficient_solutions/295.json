{
  "problem_idx": 295,
  "task_name": "Find Median from Data Stream",
  "markdown_description": "\nThe **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.\n\n\n* For example, for `arr = [2,3,4]`, the median is `3`.\n* For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`.\n\n\nImplement the MedianFinder class:\n\n\n* `MedianFinder()` initializes the `MedianFinder` object.\n* `void addNum(int num)` adds the integer `num` from the data stream to the data structure.\n* `double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input**\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\n**Output**\n[null, null, null, 1.5, null, 2.0]\n\n**Explanation**\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `-105 <= num <= 105`\n* There will be at least one element in the data structure before calling `findMedian`.\n* At most `5 * 104` calls will be made to `addNum` and `findMedian`.\n\n\n\u00a0\n\n\n**Follow up:**\n\n\n* If all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?\n* If `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?\n\n\n",
  "canonical_solution": "class MedianFinder:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.h1 = []\n        self.h2 = []\n\n    def addNum(self, num: int) -> None:\n        heappush(self.h1, num)\n        heappush(self.h2, -heappop(self.h1))\n        if len(self.h2) - len(self.h1) > 1:\n            heappush(self.h1, -heappop(self.h2))\n\n    def findMedian(self) -> float:\n        if len(self.h2) > len(self.h1):\n            return -self.h2[0]\n        return (self.h1[0] - self.h2[0]) / 2\n\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()\n",
  "test_case_generator": "\nimport random\nfrom heapq import heappush, heappop\n\nclass MedianFinder:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.h1 = []\n        self.h2 = []\n\n    def addNum(self, num: int) -> None:\n        heappush(self.h1, num)\n        heappush(self.h2, -heappop(self.h1))\n        if len(self.h2) - len(self.h1) > 1:\n            heappush(self.h1, -heappop(self.h2))\n\n    def findMedian(self) -> float:\n        if len(self.h2) > len(self.h1):\n            return -self.h2[0]\n        return (self.h1[0] - self.h2[0]) / 2\n\n\n# Test case generator\ndef generate_test_case():\n    obj = MedianFinder()\n    test_case = []\n\n    for _ in range(random.randint(1, 100)):\n        num = random.randint(-10**5, 10**5)\n        obj.addNum(num)\n        test_case.append(num)\n        expected_result = obj.findMedian()\n\n        assert obj.findMedian() == expected_result\n        print(f\"obj.addNum({num})\")\n        print(f\"assert obj.findMedian() == {expected_result}\")\n\n        test_case.append(f\"obj.addNum({num})\")\n        test_case.append(f\"assert obj.findMedian() == {expected_result}\")\n\n    return test_case\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        test_case = generate_test_case()\n        test_case_generator_results += test_case\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "",
  "inefficient_solution": "class MedianFinder:\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.all_nums = []\n\n    def addNum(self, num: int) -> None:\n        self.all_nums.append(num)\n\n    def findMedian(self) -> float:\n        self.all_nums.sort()\n        n = len(self.all_nums)\n        if n % 2 == 1:\n            return self.all_nums[n // 2]\n        else:\n            return (self.all_nums[n // 2 - 1] + self.all_nums[n // 2]) / 2",
  "is_python": true
}