{
  "problem_idx": 2393,
  "task_name": "Count Strictly Increasing Subarrays",
  "markdown_description": "\nYou are given an array `nums` consisting of **positive** integers.\n\n\nReturn *the number of **subarrays** of* `nums` *that are in **strictly increasing** order.*\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,5,4,4,6]\n**Output:** 10\n**Explanation:** The strictly increasing subarrays are the following:\n- Subarrays of length 1: [1], [3], [5], [4], [4], [6].\n- Subarrays of length 2: [1,3], [3,5], [4,6].\n- Subarrays of length 3: [1,3,5].\nThe total number of subarrays is 6 + 3 + 1 = 10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 15\n**Explanation:** Every subarray is strictly increasing. There are 15 possible subarrays that we can take.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def countSubarrays(self, nums: List[int]) -> int:\n        ans = i = 0\n        while i < len(nums):\n            j = i + 1\n            while j < len(nums) and nums[j] > nums[j - 1]:\n                j += 1\n            cnt = j - i\n            ans += (1 + cnt) * cnt // 2\n            i = j\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def countSubarrays(self, nums: List[int]) -> int:\n        ans = i = 0\n        while i < len(nums):\n            j = i + 1\n            while j < len(nums) and nums[j] > nums[j - 1]:\n                j += 1\n            cnt = j - i\n            ans += (1 + cnt) * cnt // 2\n            i = j\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 1000001), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countSubarrays(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countSubarrays(nums) == expected_result\n        print(f\"assert solution.countSubarrays({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countSubarrays({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countSubarrays([444316]) == 1\nassert solution.countSubarrays([870687, 697869, 82598, 33723, 502186]) == 6\nassert solution.countSubarrays([210940, 814857, 749704, 147635, 655669]) == 7\nassert solution.countSubarrays([653444]) == 1\nassert solution.countSubarrays([260309, 364051, 782115, 718193, 755076, 642108]) == 10\nassert solution.countSubarrays([221367, 292448, 768517, 865488, 980662, 281757, 413596, 498595, 87491, 871353]) == 24\nassert solution.countSubarrays([570453, 924067, 434425, 865573, 983328, 135168, 858831, 916460, 518728, 883401]) == 18\nassert solution.countSubarrays([660346, 830908, 156848, 495971, 412331, 511441, 915484, 690026]) == 13\nassert solution.countSubarrays([263833]) == 1\nassert solution.countSubarrays([485155, 840837, 980898, 866683, 913381, 948343, 911120, 913905, 178299, 545753]) == 18\nassert solution.countSubarrays([798425, 404365, 653214, 89366, 409724, 691310, 152748]) == 11\nassert solution.countSubarrays([31825, 100452, 52566, 501072, 127724, 704797, 388978]) == 10\nassert solution.countSubarrays([134137, 950511, 514349, 406217]) == 5\nassert solution.countSubarrays([587003, 604216, 925997, 848414, 805783, 302665]) == 9\nassert solution.countSubarrays([426421, 439641, 684334, 929167, 690590, 351467, 979253, 483843, 720095, 316928]) == 18\nassert solution.countSubarrays([161363, 271]) == 2\nassert solution.countSubarrays([177761, 610922, 996676, 130665]) == 7\nassert solution.countSubarrays([838989, 270273]) == 2\nassert solution.countSubarrays([770317, 538153, 818932, 513642, 909435, 697558]) == 8\nassert solution.countSubarrays([689862]) == 1\nassert solution.countSubarrays([533625, 238008, 977905, 583144, 641602]) == 7\nassert solution.countSubarrays([630278, 252319]) == 2\nassert solution.countSubarrays([922408, 304968, 958266, 709500, 409243, 107731, 143869, 408343]) == 12\nassert solution.countSubarrays([605559, 581250, 100052]) == 3\nassert solution.countSubarrays([752596, 736005, 99911, 575709, 913690, 905879, 903037]) == 10\nassert solution.countSubarrays([789558, 812444, 853307, 659863]) == 7\nassert solution.countSubarrays([610884, 339162]) == 2\nassert solution.countSubarrays([22289, 72923, 889459, 310573, 965443]) == 9\nassert solution.countSubarrays([849616, 297863, 965383]) == 4\nassert solution.countSubarrays([149475, 513905, 968810, 555436, 191700, 337219, 445382, 573220, 841000, 252430]) == 23\nassert solution.countSubarrays([608025, 110721, 729550]) == 4\nassert solution.countSubarrays([444685, 163155, 682672, 54651, 173519, 131377, 734234, 614437, 46562]) == 12\nassert solution.countSubarrays([405027, 955209, 559856, 327658]) == 5\nassert solution.countSubarrays([676968, 614592, 832870, 785489, 804403]) == 7\nassert solution.countSubarrays([800072, 288386, 319235, 797459, 765397]) == 8\nassert solution.countSubarrays([424962, 288740, 891456]) == 4\nassert solution.countSubarrays([816625, 299060, 798693, 172976, 835889, 849749]) == 10\nassert solution.countSubarrays([421829, 817708, 337009]) == 4\nassert solution.countSubarrays([514210, 857725, 571071, 796729, 163165, 457723, 107026, 982480, 191413]) == 13\nassert solution.countSubarrays([917956, 204138, 790971, 381243, 705540, 179446]) == 8\nassert solution.countSubarrays([204085, 938094, 510515, 263847, 198825, 833992, 8511]) == 9\nassert solution.countSubarrays([312182, 278102, 982514, 431508, 382714, 342800, 97931, 454646, 968388, 149409]) == 14\nassert solution.countSubarrays([380476, 242591, 122625, 863386, 360853]) == 6\nassert solution.countSubarrays([711460, 540082, 435602, 377515, 631638, 969925, 925365, 756193, 56334]) == 12\nassert solution.countSubarrays([542199, 652639, 205119, 597917, 829513, 312324, 89177, 710168]) == 13\nassert solution.countSubarrays([251004]) == 1\nassert solution.countSubarrays([839957, 42984, 117768, 906080, 812602, 554609, 222423]) == 10\nassert solution.countSubarrays([128288]) == 1\nassert solution.countSubarrays([723956, 316449, 733646, 496045, 610454, 159327, 396236]) == 10\nassert solution.countSubarrays([43414, 777301, 315369, 935047, 526426, 36509, 300363, 438982]) == 13\nassert solution.countSubarrays([346694, 351094, 824682, 422837]) == 7\nassert solution.countSubarrays([202314, 863966]) == 3\nassert solution.countSubarrays([934551, 371895, 910893, 799153, 314243, 714896, 592603]) == 9\nassert solution.countSubarrays([905482, 822868, 635465]) == 3\nassert solution.countSubarrays([598065, 731807, 870404, 237160, 949827, 229333]) == 10\nassert solution.countSubarrays([376849, 896476, 903398, 8981, 388236, 920506]) == 12\nassert solution.countSubarrays([638518, 465584, 783477]) == 4\nassert solution.countSubarrays([55190, 963898, 424041, 64180, 844247, 937987]) == 10\nassert solution.countSubarrays([207916]) == 1\nassert solution.countSubarrays([528146, 849111]) == 3\nassert solution.countSubarrays([815340, 749848, 461170, 414443, 49787]) == 5\nassert solution.countSubarrays([880313]) == 1\nassert solution.countSubarrays([777729, 200703, 754175, 229482, 868918, 649023, 208611, 206824]) == 10\nassert solution.countSubarrays([886375, 899449, 7842, 50999]) == 6\nassert solution.countSubarrays([980656, 197759, 192350, 931517, 669922, 531129, 104986, 947369]) == 10\nassert solution.countSubarrays([494733]) == 1\nassert solution.countSubarrays([632049, 772801, 102781, 442363]) == 6\nassert solution.countSubarrays([692863, 920548]) == 3\nassert solution.countSubarrays([825054, 532414]) == 2\nassert solution.countSubarrays([221222]) == 1\nassert solution.countSubarrays([341111, 837773, 91898, 382042, 854160, 773623, 778415, 211677, 782485, 249540]) == 16\nassert solution.countSubarrays([724972, 2573, 512716, 152002, 851328, 748383, 825177]) == 10\nassert solution.countSubarrays([227868, 221250, 544399, 774555, 610725, 568273]) == 9\nassert solution.countSubarrays([262073, 258038, 274645, 521048, 360351, 4725, 121466, 72904, 320643, 144642]) == 15\nassert solution.countSubarrays([640145, 817937]) == 3\nassert solution.countSubarrays([459879]) == 1\nassert solution.countSubarrays([819104]) == 1\nassert solution.countSubarrays([891087, 452981]) == 2\nassert solution.countSubarrays([485911, 223584]) == 2\nassert solution.countSubarrays([212794]) == 1\nassert solution.countSubarrays([582615, 454745]) == 2\nassert solution.countSubarrays([495593, 613019, 215582, 124442, 347639, 390992]) == 10\nassert solution.countSubarrays([637541, 302647, 165659, 949085, 458572, 449165]) == 7\nassert solution.countSubarrays([68093]) == 1\nassert solution.countSubarrays([263347]) == 1\nassert solution.countSubarrays([690689, 31377, 885970, 117629, 515902, 120620, 357498, 306397, 234047, 71734]) == 13\nassert solution.countSubarrays([52853, 745435]) == 3\nassert solution.countSubarrays([822717, 67524, 495644, 338239, 311801]) == 6\nassert solution.countSubarrays([31045, 712473, 992398, 464077, 775811, 889625]) == 12\nassert solution.countSubarrays([976606]) == 1\nassert solution.countSubarrays([662912, 409753]) == 2\nassert solution.countSubarrays([1676, 250484]) == 3\nassert solution.countSubarrays([417467, 963540, 896186, 422297, 831641, 430756, 717738, 632932]) == 11\nassert solution.countSubarrays([437774, 183956, 753549, 959406, 344573, 768015, 697950]) == 11\nassert solution.countSubarrays([577862, 933911, 83883, 538718, 38136, 294002, 717787]) == 12\nassert solution.countSubarrays([254083, 742044, 869408, 739487, 380441, 122856, 733109]) == 11\nassert solution.countSubarrays([55969, 919002, 56676, 407359, 669521, 297810, 937456]) == 12\nassert solution.countSubarrays([457431, 223283, 227918, 942848, 748689, 135316]) == 9\nassert solution.countSubarrays([551381, 456548, 275053]) == 3\nassert solution.countSubarrays([590001, 587760, 658672, 563791, 648295, 189353, 29981, 707243]) == 11",
  "inefficient_solution": "class Solution:\n    def countSubarrays(self, nums: List[int]) -> int:\n        ans = []\n        for i in range(len(nums)):\n            temp = []\n            for j in range(i, len(nums)):\n                flag = 0\n                for k in range(j - 1, -1, -1):\n                    if nums[k] < nums[k + 1]:\n                        flag += 1\n                    else:\n                        break\n                if flag == j - i:\n                    temp.append(j - i + 1)\n            ans.extend(temp)\n        return sum(ans)",
  "is_python": true
}