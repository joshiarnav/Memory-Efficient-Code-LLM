{
  "problem_idx": 474,
  "task_name": "Ones and Zeroes",
  "markdown_description": "\nYou are given an array of binary strings `strs` and two integers `m` and `n`.\n\n\nReturn *the size of the largest subset of `strs` such that there are **at most*** `m``0`*'s and* `n``1`*'s in the subset*.\n\n\nA set `x` is a **subset** of a set `y` if all elements of `x` are also elements of `y`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\n**Output:** 4\n**Explanation:** The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\n**Output:** 2\n**Explanation:** The largest subset is {\"0\", \"1\"}, so the answer is 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= strs.length <= 600`\n* `1 <= strs[i].length <= 100`\n* `strs[i]` consists only of digits `'0'` and `'1'`.\n* `1 <= m, n <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for s in strs:\n            a, b = s.count(\"0\"), s.count(\"1\")\n            for i in range(m, a - 1, -1):\n                for j in range(n, b - 1, -1):\n                    f[i][j] = max(f[i][j], f[i - a][j - b] + 1)\n        return f[m][n]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for s in strs:\n            a, b = s.count(\"0\"), s.count(\"1\")\n            for i in range(m, a - 1, -1):\n                for j in range(n, b - 1, -1):\n                    f[i][j] = max(f[i][j], f[i - a][j - b] + 1)\n        return f[m][n]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings list\n    strs = [\"\".join(random.choice([\"0\", \"1\"]) for _ in range(random.randint(1, 10))) for _ in range(random.randint(1, 10))]\n    \n    # Generate random values for m and n\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMaxForm(strs, m, n)\n\n    return strs, m, n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        strs, m, n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMaxForm(strs, m, n) == expected_result\n        print(f\"assert solution.findMaxForm({strs}, {m}, {n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMaxForm({strs}, {m}, {n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMaxForm(['000011', '11', '1', '001010110', '0101111', '10101'], 4, 6) == 3\nassert solution.findMaxForm(['0101', '11011', '0', '011010'], 8, 2) == 2\nassert solution.findMaxForm(['110101100', '11', '1011000000', '10101111'], 6, 7) == 2\nassert solution.findMaxForm(['00110000', '01000111', '1', '01000010', '100101', '01', '01010111', '11100011'], 4, 2) == 2\nassert solution.findMaxForm(['0001010', '0000111', '1111001101', '10000010', '000101000', '10011', '100'], 1, 3) == 0\nassert solution.findMaxForm(['010', '100100010', '101001'], 8, 8) == 2\nassert solution.findMaxForm(['100010010', '010', '1111000000', '1110011010', '01101', '0'], 4, 7) == 2\nassert solution.findMaxForm(['011100', '10', '00010110', '001', '1100', '000101', '1110000', '110101110'], 10, 7) == 4\nassert solution.findMaxForm(['1010011', '00'], 5, 2) == 1\nassert solution.findMaxForm(['01010'], 4, 1) == 0\nassert solution.findMaxForm(['1', '110', '00011010', '101', '1000'], 8, 6) == 4\nassert solution.findMaxForm(['1', '011101', '11'], 7, 2) == 1\nassert solution.findMaxForm(['0110111', '100100100', '01101000', '11'], 7, 8) == 2\nassert solution.findMaxForm(['010110', '0'], 4, 4) == 2\nassert solution.findMaxForm(['0011', '0110011001', '000', '110', '100100', '000010'], 9, 10) == 3\nassert solution.findMaxForm(['1011011', '110011100', '11111000', '0011'], 3, 10) == 1\nassert solution.findMaxForm(['01011', '0000', '001', '110111011', '1101010111', '10011', '1101', '111111'], 7, 8) == 3\nassert solution.findMaxForm(['011011100', '100'], 1, 3) == 0\nassert solution.findMaxForm(['011011011', '01', '1000101101', '10'], 5, 1) == 1\nassert solution.findMaxForm(['1010010000'], 6, 9) == 0\nassert solution.findMaxForm(['0', '011', '101010', '1000011', '10000', '110110'], 3, 9) == 2\nassert solution.findMaxForm(['0', '1111', '11010', '100000', '100011', '10'], 9, 6) == 4\nassert solution.findMaxForm(['00111100', '110000111', '0100', '00', '0', '0100'], 4, 3) == 2\nassert solution.findMaxForm(['100100', '110', '100010', '01'], 2, 6) == 2\nassert solution.findMaxForm(['01001', '010', '101', '00', '110101010'], 6, 1) == 2\nassert solution.findMaxForm(['000111111', '1001111', '00100010', '1001110011'], 5, 3) == 0\nassert solution.findMaxForm(['1100', '101', '00'], 9, 5) == 3\nassert solution.findMaxForm(['011', '010000', '0011', '0'], 7, 4) == 3\nassert solution.findMaxForm(['0', '0101100111', '011', '0', '0110011001', '1011010110'], 3, 8) == 3\nassert solution.findMaxForm(['100', '1', '0100110111', '0', '01011', '00'], 6, 5) == 4\nassert solution.findMaxForm(['01'], 9, 2) == 1\nassert solution.findMaxForm(['01111101', '11', '0011101', '10', '0010000011', '0010100110', '0', '11000', '1001010101', '0011'], 3, 2) == 2\nassert solution.findMaxForm(['1100100', '11110', '100111', '00100', '010'], 5, 8) == 2\nassert solution.findMaxForm(['1001110', '11', '100101010', '1', '100111', '01011010'], 4, 6) == 2\nassert solution.findMaxForm(['11', '11011', '0', '11', '1100', '0010101', '1001000', '1001', '00100'], 2, 3) == 2\nassert solution.findMaxForm(['11010010', '011110100', '1010', '10001001', '1011101'], 2, 6) == 1\nassert solution.findMaxForm(['000001'], 3, 7) == 0\nassert solution.findMaxForm(['00'], 4, 1) == 1\nassert solution.findMaxForm(['1011', '10', '11', '10001101', '1110000', '111110', '1110011'], 6, 10) == 4\nassert solution.findMaxForm(['0', '0'], 3, 7) == 2\nassert solution.findMaxForm(['011001110', '0000100111', '101'], 10, 6) == 2\nassert solution.findMaxForm(['11000001', '0011', '01', '110110', '1010001', '10', '1011011000', '00111011', '11100', '111'], 5, 4) == 3\nassert solution.findMaxForm(['111111', '10100010', '1010', '110', '101', '1110110'], 5, 7) == 3\nassert solution.findMaxForm(['000011', '1011101', '0', '100111100', '0011110011', '101100', '00011', '1'], 2, 10) == 2\nassert solution.findMaxForm(['010', '111001110', '1111011000', '1100000110', '110010111', '011010001'], 6, 6) == 1\nassert solution.findMaxForm(['000000', '100', '110011001'], 3, 9) == 1\nassert solution.findMaxForm(['1110011111', '1001000000', '00011010', '1100', '0', '101000101', '10', '101111001'], 2, 2) == 2\nassert solution.findMaxForm(['0110011', '0111', '011011001', '001100111'], 6, 2) == 0\nassert solution.findMaxForm(['10101', '011', '011001', '011', '110', '101001', '0000111111'], 1, 6) == 1\nassert solution.findMaxForm(['1001', '10', '1111100', '010011010', '010'], 1, 7) == 1\nassert solution.findMaxForm(['1', '100100', '1010011'], 8, 7) == 3\nassert solution.findMaxForm(['100', '1', '010111010', '11111011', '11', '101', '10', '0', '101100001'], 3, 5) == 4\nassert solution.findMaxForm(['00010101', '01', '000000', '011000', '100101', '0'], 8, 9) == 3\nassert solution.findMaxForm(['1', '0111', '1001', '001', '100110', '1111110100', '1000000', '100111110', '0'], 8, 7) == 5\nassert solution.findMaxForm(['0', '111001', '01'], 5, 4) == 2\nassert solution.findMaxForm(['1110101001', '1010', '0010011111', '111100101', '11001111'], 10, 6) == 1\nassert solution.findMaxForm(['11', '10000110', '0110010101', '01'], 6, 4) == 2\nassert solution.findMaxForm(['1010010100', '0', '1110', '0001', '0110', '1101', '011011111', '0111110010', '001010011', '0010001'], 10, 7) == 4\nassert solution.findMaxForm(['1000', '1110010111', '100011'], 8, 7) == 2\nassert solution.findMaxForm(['10000011', '011000', '101110'], 8, 6) == 2\nassert solution.findMaxForm(['0010', '1110', '11111100', '00110'], 4, 5) == 2\nassert solution.findMaxForm(['111111', '00', '001001001', '00110010', '000110', '0', '100000', '1', '10'], 2, 1) == 2\nassert solution.findMaxForm(['10', '0010111', '101000111', '1', '01011010', '110', '1000011', '01111', '000', '011111000'], 6, 7) == 4\nassert solution.findMaxForm(['11110111', '00011110', '1100', '110', '11', '101101000', '001'], 2, 7) == 2\nassert solution.findMaxForm(['1', '0100001', '00101', '0011010100', '10010110', '010110001'], 4, 5) == 2\nassert solution.findMaxForm(['0011011', '01011', '1111', '1010010011', '010010', '01000', '0100100010', '1100111111'], 8, 9) == 3\nassert solution.findMaxForm(['1100', '1010000', '1', '1100111', '001110', '01'], 5, 4) == 3\nassert solution.findMaxForm(['1110'], 7, 9) == 1\nassert solution.findMaxForm(['110', '011011'], 7, 9) == 2\nassert solution.findMaxForm(['010', '0000', '0001', '00001', '111', '0'], 1, 8) == 2\nassert solution.findMaxForm(['1', '1100', '1010011', '0110', '1', '10111'], 4, 2) == 2\nassert solution.findMaxForm(['0100', '0', '00000', '100111', '101', '10011', '1110', '10101101', '100001010', '111111101'], 7, 10) == 4\nassert solution.findMaxForm(['00', '110111', '11000', '0', '010000', '10', '0', '00010000', '1101'], 4, 10) == 4\nassert solution.findMaxForm(['100101', '1000', '111110', '010101', '0011110100', '1111101'], 2, 2) == 0\nassert solution.findMaxForm(['10101010', '1', '01', '01', '1100000101', '1', '101101100', '1', '01111', '1000011000'], 5, 9) == 6\nassert solution.findMaxForm(['01', '1111'], 10, 5) == 2\nassert solution.findMaxForm(['000', '00110', '1', '00110001', '110010', '1010', '0101', '01', '001', '011'], 4, 3) == 3\nassert solution.findMaxForm(['10110', '11001001', '00100110', '0011011', '0010', '11111', '1111'], 7, 3) == 1\nassert solution.findMaxForm(['00110', '11011001', '10101010', '1011', '101111', '00100', '1'], 8, 6) == 3\nassert solution.findMaxForm(['0011', '010010011', '00100110', '0101001100', '01110000', '1001', '1100', '101', '1100010'], 6, 7) == 3\nassert solution.findMaxForm(['01110', '00', '00111011'], 7, 5) == 2\nassert solution.findMaxForm(['0', '10', '1011', '001100'], 6, 4) == 3\nassert solution.findMaxForm(['000011', '0000101100', '010100110', '111010', '01011000', '00001110', '00000'], 4, 7) == 1\nassert solution.findMaxForm(['110101010', '100111010', '001', '1', '1101100100', '001011010'], 7, 7) == 3\nassert solution.findMaxForm(['1011110101', '111100', '111', '0101001', '01001011', '1000010', '011', '100111100', '01000010'], 5, 7) == 2\nassert solution.findMaxForm(['00110010'], 3, 3) == 0\nassert solution.findMaxForm(['11011010', '00000', '10010000', '100011', '0', '011', '101101', '111'], 7, 8) == 4\nassert solution.findMaxForm(['110010', '1010010110', '1011', '0', '0100110000', '110011', '01110011', '10101110', '000010'], 3, 6) == 2\nassert solution.findMaxForm(['0110011', '1100', '1', '0', '100', '001', '0011110', '01000111'], 9, 9) == 5\nassert solution.findMaxForm(['01110111'], 4, 5) == 0\nassert solution.findMaxForm(['010', '10', '00110', '0011000101', '101001110'], 10, 2) == 2\nassert solution.findMaxForm(['0000111'], 6, 9) == 1\nassert solution.findMaxForm(['1001110', '001100001', '110', '00100', '100000000', '10010010', '101111', '0001110111', '10010'], 8, 9) == 3\nassert solution.findMaxForm(['101111110', '1111110', '000000011', '000011001', '00111', '011101111', '101', '011011', '11010110', '1111011100'], 4, 5) == 2\nassert solution.findMaxForm(['10', '10101', '0010001001', '10101000'], 1, 4) == 1\nassert solution.findMaxForm(['011110', '010001000', '0101000', '10', '01011111', '01110', '101010', '1', '100111', '0'], 3, 1) == 2\nassert solution.findMaxForm(['11', '000000110', '101100010', '001000001', '1110010'], 10, 4) == 2\nassert solution.findMaxForm(['101', '01', '0100', '01110', '0100000110', '01', '000'], 8, 10) == 5\nassert solution.findMaxForm(['00001', '00011', '1111', '000000000', '00010', '01', '1011100', '11010100'], 6, 4) == 2\nassert solution.findMaxForm(['10011', '110', '11', '110111', '01010', '11110'], 5, 10) == 4",
  "inefficient_solution": "class Solution:\n    def findMaxForm(self, strs, m, n):\n        dp = [[0] * (n + 1) for _ in range(m + 1) for _ in range(2**len(strs))]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                for k in range(2**len(strs)):\n                    for l, s in enumerate(strs):\n                        a, b = s.count(\"0\"), s.count(\"1\")\n                        if k & (1 << l):\n                            if i >= a and j >= b:\n                                dp[i][j][k] = max(dp[i][j][k], dp[i - a][j - b][(1 << l) - 1] + 1)\n        return max(dp[m][n])",
  "is_python": true
}