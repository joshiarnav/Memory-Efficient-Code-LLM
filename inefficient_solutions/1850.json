{
  "problem_idx": 1850,
  "task_name": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
  "markdown_description": "\nYou are given a string `num`, representing a large integer, and an integer `k`.\n\n\nWe call some integer **wonderful** if it is a **permutation** of the digits in `num` and is **greater in value** than `num`. There can be many wonderful integers. However, we only care about the **smallest-valued** ones.\n\n\n* For example, when `num = \"5489355142\"`:\n\t+ The 1st smallest wonderful integer is `\"5489355214\"`.\n\t+ The 2nd smallest wonderful integer is `\"5489355241\"`.\n\t+ The 3rd smallest wonderful integer is `\"5489355412\"`.\n\t+ The 4th smallest wonderful integer is `\"5489355421\"`.\n\n\nReturn *the **minimum number of adjacent digit swaps** that needs to be applied to* `num` *to reach the* `kth` ***smallest wonderful** integer*.\n\n\nThe tests are generated in such a way that `kth`\u00a0smallest wonderful integer exists.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"5489355142\", k = 4\n**Output:** 2\n**Explanation:** The 4th smallest wonderful number is \"5489355421\". To get this number:\n- Swap index 7 with index 8: \"5489355142\" -> \"5489355412\"\n- Swap index 8 with index 9: \"5489355412\" -> \"5489355421\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"11112\", k = 4\n**Output:** 4\n**Explanation:** The 4th smallest wonderful number is \"21111\". To get this number:\n- Swap index 3 with index 4: \"11112\" -> \"11121\"\n- Swap index 2 with index 3: \"11121\" -> \"11211\"\n- Swap index 1 with index 2: \"11211\" -> \"12111\"\n- Swap index 0 with index 1: \"12111\" -> \"21111\"\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"00123\", k = 1\n**Output:** 1\n**Explanation:** The 1st smallest wonderful number is \"00132\". To get this number:\n- Swap index 3 with index 4: \"00123\" -> \"00132\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= num.length <= 1000`\n* `1 <= k <= 1000`\n* `num` only consists of digits.\n\n\n",
  "canonical_solution": "class Solution:\n    def getMinSwaps(self, num: str, k: int) -> int:\n        def next_permutation(nums: List[str]) -> bool:\n            n = len(nums)\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                return False\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n            return True\n\n        s = list(num)\n        for _ in range(k):\n            next_permutation(s)\n        d = [[] for _ in range(10)]\n        idx = [0] * 10\n        n = len(s)\n        for i, c in enumerate(num):\n            j = ord(c) - ord(\"0\")\n            d[j].append(i)\n        arr = [0] * n\n        for i, c in enumerate(s):\n            j = ord(c) - ord(\"0\")\n            arr[i] = d[j][idx[j]]\n            idx[j] += 1\n        return sum(arr[j] > arr[i] for i in range(n) for j in range(i))\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def getMinSwaps(self, num: str, k: int) -> int:\n        def next_permutation(nums: List[str]) -> bool:\n            n = len(nums)\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                return False\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n            return True\n\n        s = list(num)\n        for _ in range(k):\n            next_permutation(s)\n        d = [[] for _ in range(10)]\n        idx = [0] * 10\n        n = len(s)\n        for i, c in enumerate(num):\n            j = ord(c) - ord(\"0\")\n            d[j].append(i)\n        arr = [0] * n\n        for i, c in enumerate(s):\n            j = ord(c) - ord(\"0\")\n            arr[i] = d[j][idx[j]]\n            idx[j] += 1\n        return sum(arr[j] > arr[i] for i in range(n) for j in range(i))\n\ndef generate_test_case(k):\n    num = ''.join([random.choice('0123456789') for _ in range(random.randint(2, 20))])\n    return num, k\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, k = generate_test_case(i+1)\n        solution = Solution()\n        expected_result = solution.getMinSwaps(num, k)\n        test_case = f'assert solution.getMinSwaps(\"{num}\", {k}) == {expected_result}'\n        test_case_generator_results.append(test_case)\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getMinSwaps(\"527088937780982\", 1) == 4\nassert solution.getMinSwaps(\"028942239610964\", 2) == 3\nassert solution.getMinSwaps(\"359073\", 3) == 1\nassert solution.getMinSwaps(\"00505\", 4) == 3\nassert solution.getMinSwaps(\"3345524405\", 5) == 4\nassert solution.getMinSwaps(\"2707570712643259775\", 6) == 2\nassert solution.getMinSwaps(\"74144421\", 7) == 5\nassert solution.getMinSwaps(\"003568231365439985\", 8) == 5\nassert solution.getMinSwaps(\"598315532998\", 9) == 3\nassert solution.getMinSwaps(\"639079990101\", 10) == 11\nassert solution.getMinSwaps(\"99328\", 11) == 2\nassert solution.getMinSwaps(\"321\", 12) == 0\nassert solution.getMinSwaps(\"874956385227\", 13) == 5\nassert solution.getMinSwaps(\"8691040\", 14) == 5\nassert solution.getMinSwaps(\"907123395\", 15) == 2\nassert solution.getMinSwaps(\"9142464209518908\", 16) == 2\nassert solution.getMinSwaps(\"743646996013814\", 17) == 3\nassert solution.getMinSwaps(\"397626\", 18) == 9\nassert solution.getMinSwaps(\"844754508\", 19) == 7\nassert solution.getMinSwaps(\"7595127161234\", 20) == 4\nassert solution.getMinSwaps(\"495\", 21) == 2\nassert solution.getMinSwaps(\"35569132570622879\", 22) == 3\nassert solution.getMinSwaps(\"741\", 23) == 0\nassert solution.getMinSwaps(\"05618631522\", 24) == 17\nassert solution.getMinSwaps(\"073887243701\", 25) == 4\nassert solution.getMinSwaps(\"884238643131763\", 26) == 4\nassert solution.getMinSwaps(\"1431932012\", 27) == 8\nassert solution.getMinSwaps(\"403118326773\", 28) == 5\nassert solution.getMinSwaps(\"714636553889939711\", 29) == 14\nassert solution.getMinSwaps(\"4449\", 30) == 3\nassert solution.getMinSwaps(\"242119497873\", 31) == 6\nassert solution.getMinSwaps(\"71657009431007146\", 32) == 6\nassert solution.getMinSwaps(\"517\", 33) == 2\nassert solution.getMinSwaps(\"2257557537810217\", 34) == 6\nassert solution.getMinSwaps(\"9388371\", 35) == 8\nassert solution.getMinSwaps(\"44038122589475819\", 36) == 7\nassert solution.getMinSwaps(\"183859588262\", 37) == 8\nassert solution.getMinSwaps(\"1800\", 38) == 1\nassert solution.getMinSwaps(\"2130396231770\", 39) == 7\nassert solution.getMinSwaps(\"18284\", 40) == 4\nassert solution.getMinSwaps(\"4411362402718\", 41) == 3\nassert solution.getMinSwaps(\"54667309123\", 42) == 7\nassert solution.getMinSwaps(\"3008421231476\", 43) == 4\nassert solution.getMinSwaps(\"80394990268587709703\", 44) == 5\nassert solution.getMinSwaps(\"9693485133277412\", 45) == 5\nassert solution.getMinSwaps(\"485410473\", 46) == 3\nassert solution.getMinSwaps(\"7466706811411480\", 47) == 9\nassert solution.getMinSwaps(\"444\", 48) == 0\nassert solution.getMinSwaps(\"82986889795\", 49) == 7\nassert solution.getMinSwaps(\"635886598\", 50) == 5\nassert solution.getMinSwaps(\"1136\", 51) == 5\nassert solution.getMinSwaps(\"426550121120\", 52) == 2\nassert solution.getMinSwaps(\"78714565737191716304\", 53) == 4\nassert solution.getMinSwaps(\"4827297069644\", 54) == 8\nassert solution.getMinSwaps(\"891245868835573601\", 55) == 8\nassert solution.getMinSwaps(\"33145\", 56) == 7\nassert solution.getMinSwaps(\"1667196857829\", 57) == 5\nassert solution.getMinSwaps(\"99\", 58) == 0\nassert solution.getMinSwaps(\"21163\", 59) == 6\nassert solution.getMinSwaps(\"06675003875116675220\", 60) == 1\nassert solution.getMinSwaps(\"33119841580\", 61) == 6\nassert solution.getMinSwaps(\"478455747304105738\", 62) == 5\nassert solution.getMinSwaps(\"9740990060447868864\", 63) == 7\nassert solution.getMinSwaps(\"66581774708\", 64) == 11\nassert solution.getMinSwaps(\"45663\", 65) == 5\nassert solution.getMinSwaps(\"1397672\", 66) == 8\nassert solution.getMinSwaps(\"38402258\", 67) == 6\nassert solution.getMinSwaps(\"8785\", 68) == 1\nassert solution.getMinSwaps(\"55463\", 69) == 3\nassert solution.getMinSwaps(\"13009\", 70) == 5\nassert solution.getMinSwaps(\"52636646633674986\", 71) == 3\nassert solution.getMinSwaps(\"2634307823364993\", 72) == 3\nassert solution.getMinSwaps(\"53\", 73) == 0\nassert solution.getMinSwaps(\"07903678053\", 74) == 8\nassert solution.getMinSwaps(\"518983\", 75) == 5\nassert solution.getMinSwaps(\"3573874\", 76) == 8\nassert solution.getMinSwaps(\"72610755564590356413\", 77) == 7\nassert solution.getMinSwaps(\"7322901873\", 78) == 6\nassert solution.getMinSwaps(\"10342094\", 79) == 4\nassert solution.getMinSwaps(\"888\", 80) == 0\nassert solution.getMinSwaps(\"630857457\", 81) == 13\nassert solution.getMinSwaps(\"9241268958\", 82) == 12\nassert solution.getMinSwaps(\"3013284027152980581\", 83) == 12\nassert solution.getMinSwaps(\"3259095150915\", 84) == 4\nassert solution.getMinSwaps(\"5401903764830\", 85) == 10\nassert solution.getMinSwaps(\"5004647146\", 86) == 7\nassert solution.getMinSwaps(\"35450889339747309076\", 87) == 12\nassert solution.getMinSwaps(\"36746371\", 88) == 8\nassert solution.getMinSwaps(\"542086\", 89) == 10\nassert solution.getMinSwaps(\"98851528420486\", 90) == 8\nassert solution.getMinSwaps(\"510865947736\", 91) == 14\nassert solution.getMinSwaps(\"86430002483\", 92) == 7\nassert solution.getMinSwaps(\"468772542752083048\", 93) == 4\nassert solution.getMinSwaps(\"75880417602757\", 94) == 9\nassert solution.getMinSwaps(\"125029114241228498\", 95) == 6\nassert solution.getMinSwaps(\"252\", 96) == 1\nassert solution.getMinSwaps(\"3335939967\", 97) == 12\nassert solution.getMinSwaps(\"09801870906584069\", 98) == 5\nassert solution.getMinSwaps(\"8274\", 99) == 2\nassert solution.getMinSwaps(\"20938848959135\", 100) == 11",
  "inefficient_solution": "class Solution:\n    def getMinSwaps(self, num: str, k: int) -> int:\n        def next_permutation(nums: list[str]) -> None:\n            n = len(nums)\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                nums[:] = sorted(nums)\n                return\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n\n        s = list(num)\n        for _ in range(k):\n            next_permutation(s)\n\n        d = [0] * 10\n        for c in num:\n            j = ord(c) - ord(\"0\")\n            d[j] = []\n\n        n = len(s)\n        for i, c in enumerate(num):\n            j = ord(c) - ord(\"0\")\n            d[j].append(i)\n\n        for i in range(10):\n            d[i].sort()\n\n        arr = list(range(n))\n\n        for c in s:\n            j = ord(c) - ord(\"0\")\n            idx = 0\n            for i in range(10):\n                if i == j:\n                    idx = len(d[i]) - 1\n                arr[d[i][idx]] = d[i][idx + 1]\n                idx += 1\n\n        return sum(arr[j] > arr[i] for i in range(n) for j in range(i + 1, n))",
  "is_python": true
}