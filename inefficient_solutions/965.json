{
  "problem_idx": 965,
  "task_name": "Univalued Binary Tree",
  "markdown_description": "\nA binary tree is **uni-valued** if every node in the tree has the same value.\n\n\nGiven the `root` of a binary tree, return `true` *if the given tree is **uni-valued**, or* `false` *otherwise.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0965.Univalued%20Binary%20Tree/images/unival_bst_1.png)\n\n```\n\n**Input:** root = [1,1,1,1,1,null,1]\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0965.Univalued%20Binary%20Tree/images/unival_bst_2.png)\n\n```\n\n**Input:** root = [2,2,2,5,2]\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 100]`.\n* `0 <= Node.val < 100`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isUnivalTree(self, root: TreeNode) -> bool:\n        def dfs(node):\n            if node is None:\n                return True\n            return node.val == root.val and dfs(node.left) and dfs(node.right)\n\n        return dfs(root)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isUnivalTree(self, root):\n        def dfs(node):\n            if node is None:\n                return True\n            return node.val == root.val and dfs(node.left) and dfs(node.right)\n\n        return dfs(root)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random tree\n    tree = generate_tree()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isUnivalTree(tree)\n\n    return tree, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        tree, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isUnivalTree(tree) == expected_result\n        print(f\"assert solution.isUnivalTree({tree}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isUnivalTree({tree}) == {expected_result}\")\n    return test_case_generator_results\n\ndef generate_tree():\n    class TreeNode:\n        def __init__(self, val=0, left=None, right=None):\n            self.val = val\n            self.left = left\n            self.right = right\n    \n    def build_tree(nodes):\n        if not nodes:\n            return None\n        node_values = nodes\n        queue = [TreeNode(node_values[0])]\n        i = 1\n        while queue and i < len(node_values):\n            current_node = queue.pop(0)\n            if node_values[i] is not None:\n                left_node = TreeNode(node_values[i])\n                current_node.left = left_node\n                queue.append(left_node)\n            i += 1\n            if i < len(node_values) and node_values[i] is not None:\n                right_node = TreeNode(node_values[i])\n                current_node.right = right_node\n                queue.append(right_node)\n            i += 1\n        return queue[0]\n    \n    # Generate random node values\n    node_values = random.choices(range(100), k=random.randint(1, 10))\n    \n    # Build the tree from the random node values\n    tree = build_tree(node_values)\n    \n    return tree\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb926750>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d150>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d290>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d350>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26ebbb4c50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d110>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d290>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d4d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d650>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d7d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94da10>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94db90>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ddd0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ded0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e110>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e2d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e4d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e5d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e710>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e990>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94eb50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ec50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ee10>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94efd0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f1d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f310>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f4d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f6d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f950>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94fa50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94fc10>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94fe10>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958090>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958190>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958310>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958590>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958750>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958890>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958a50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958c90>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958dd0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26ebbdb490>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959110>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959350>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959490>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959610>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ffd0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94fc10>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94fad0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26ebbdb4d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94fa50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f5d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f4d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f3d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94f1d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ee90>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ed90>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ecd0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e8d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e850>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e710>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eba6b750>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e5d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e390>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e110>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ded0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94e0d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94ddd0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94da10>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94dad0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d650>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d4d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d090>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb94d110>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb926b50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959490>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959290>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959190>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959110>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958e50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958c10>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958950>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958b90>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958750>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958590>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb9583d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958310>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb958090>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb9598d0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959b50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959c50>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959ed0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb959fd0>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb95a190>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb95a350>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb95a510>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb95a650>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb95a810>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26eb95aa10>) == True\nassert solution.isUnivalTree(<__main__.generate_tree.<locals>.TreeNode object at 0x7f26ebbb4c50>) == True",
  "inefficient_solution": "",
  "is_python": true
}