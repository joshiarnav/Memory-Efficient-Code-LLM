{
  "problem_idx": 750,
  "task_name": "Number Of Corner Rectangles",
  "markdown_description": "\nGiven an `m x n` integer matrix `grid` where each entry is only `0` or `1`, return *the number of **corner rectangles***.\n\n\nA **corner rectangle** is four distinct `1`'s on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value `1`. Also, all four `1`'s used must be distinct.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0750.Number%20Of%20Corner%20Rectangles/images/cornerrec1-grid.jpg)\n\n```\n\n**Input:** grid = [[1,0,0,1,0],[0,0,1,0,1],[0,0,0,1,0],[1,0,1,0,1]]\n**Output:** 1\n**Explanation:** There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0750.Number%20Of%20Corner%20Rectangles/images/cornerrec2-grid.jpg)\n\n```\n\n**Input:** grid = [[1,1,1],[1,1,1],[1,1,1]]\n**Output:** 9\n**Explanation:** There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0750.Number%20Of%20Corner%20Rectangles/images/cornerrec3-grid.jpg)\n\n```\n\n**Input:** grid = [[1,1,1,1]]\n**Output:** 0\n**Explanation:** Rectangles must have four distinct corners.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 200`\n* `grid[i][j]` is either `0` or `1`.\n* The number of `1`'s in the grid is in the range `[1, 6000]`.\n\n\n",
  "canonical_solution": "class Solution:\n    def countCornerRectangles(self, grid: List[List[int]]) -> int:\n        ans = 0\n        cnt = Counter()\n        n = len(grid[0])\n        for row in grid:\n            for i, c1 in enumerate(row):\n                if c1:\n                    for j in range(i + 1, n):\n                        if row[j]:\n                            ans += cnt[(i, j)]\n                            cnt[(i, j)] += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\n# Copy the Solution class here\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    grid = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countCornerRectangles(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countCornerRectangles(grid) == expected_result\n        print(f\"assert solution.countCornerRectangles({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countCornerRectangles({grid}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countCornerRectangles([[1, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0]]) == 9\nassert solution.countCornerRectangles([[0, 0, 1], [1, 1, 0], [1, 1, 1], [0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 0, 1], [0, 0, 0], [1, 0, 1]]) == 5\nassert solution.countCornerRectangles([[1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1]]) == 74\nassert solution.countCornerRectangles([[0, 0, 1, 1, 0, 1, 1, 1, 0]]) == 0\nassert solution.countCornerRectangles([[0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0]]) == 0\nassert solution.countCornerRectangles([[1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0]]) == 49\nassert solution.countCornerRectangles([[0, 1, 0, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0]]) == 48\nassert solution.countCornerRectangles([[1], [1]]) == 0\nassert solution.countCornerRectangles([[0, 0, 0], [0, 0, 0], [1, 0, 0], [0, 1, 1]]) == 0\nassert solution.countCornerRectangles([[1, 1, 0, 1, 0], [0, 0, 1, 1, 1], [0, 0, 1, 1, 0]]) == 1\nassert solution.countCornerRectangles([[1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0]]) == 246\nassert solution.countCornerRectangles([[0, 0, 0], [0, 0, 0], [0, 0, 1], [0, 1, 1]]) == 0\nassert solution.countCornerRectangles([[0, 0, 0, 0, 1], [1, 0, 0, 0, 1], [0, 1, 0, 0, 1], [0, 1, 0, 0, 1]]) == 1\nassert solution.countCornerRectangles([[1, 0, 1, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 1, 1, 0], [1, 0, 1, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1]]) == 13\nassert solution.countCornerRectangles([[1, 0, 1, 0], [1, 1, 1, 1]]) == 1\nassert solution.countCornerRectangles([[0, 1, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1]]) == 122\nassert solution.countCornerRectangles([[0, 0, 0], [1, 1, 1]]) == 0\nassert solution.countCornerRectangles([[1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1, 1]]) == 28\nassert solution.countCornerRectangles([[0, 0], [0, 1], [0, 0], [0, 0]]) == 0\nassert solution.countCornerRectangles([[0], [1], [0], [0]]) == 0\nassert solution.countCornerRectangles([[0, 1, 0, 1, 1], [0, 0, 0, 1, 0], [1, 1, 0, 0, 1], [0, 1, 1, 0, 1], [0, 1, 0, 0, 1], [0, 0, 1, 1, 0]]) == 6\nassert solution.countCornerRectangles([[1, 1, 0, 1], [1, 1, 0, 1], [0, 1, 1, 0], [0, 0, 0, 0], [0, 1, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 0, 0], [0, 0, 1, 1]]) == 17\nassert solution.countCornerRectangles([[0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1]]) == 70\nassert solution.countCornerRectangles([[0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1]]) == 51\nassert solution.countCornerRectangles([[0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1]]) == 107\nassert solution.countCornerRectangles([[0, 1, 0], [1, 1, 1], [0, 1, 1], [1, 1, 0], [1, 0, 1], [0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0], [0, 0, 0]]) == 5\nassert solution.countCornerRectangles([[0, 1], [0, 1], [1, 1], [1, 1], [0, 0], [0, 1]]) == 1\nassert solution.countCornerRectangles([[1, 0, 1, 0, 1, 0, 1]]) == 0\nassert solution.countCornerRectangles([[1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 1]]) == 37\nassert solution.countCornerRectangles([[1, 0, 0], [1, 1, 1], [0, 0, 1], [0, 1, 0], [0, 1, 0], [1, 1, 0]]) == 1\nassert solution.countCornerRectangles([[0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0]]) == 7\nassert solution.countCornerRectangles([[0], [0], [0], [0], [1], [0], [1]]) == 0\nassert solution.countCornerRectangles([[0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0]]) == 0\nassert solution.countCornerRectangles([[1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1]]) == 5\nassert solution.countCornerRectangles([[1, 0, 0, 1, 1], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [0, 1, 1, 0, 1], [1, 0, 0, 0, 1]]) == 12\nassert solution.countCornerRectangles([[0, 1, 0, 0], [0, 0, 1, 1]]) == 0\nassert solution.countCornerRectangles([[1, 0, 1, 0, 0], [0, 1, 1, 0, 1], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]]) == 7\nassert solution.countCornerRectangles([[0], [0], [0], [1], [0], [1], [0], [0], [1], [0]]) == 0\nassert solution.countCornerRectangles([[0, 1, 0, 1, 1], [1, 1, 0, 1, 0], [0, 0, 1, 0, 1], [1, 1, 1, 1, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 0], [1, 0, 1, 0, 1]]) == 17\nassert solution.countCornerRectangles([[1, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 0, 0, 0, 0]]) == 18\nassert solution.countCornerRectangles([[1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1]]) == 41\nassert solution.countCornerRectangles([[1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0]]) == 64\nassert solution.countCornerRectangles([[0, 1, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 0, 1, 1, 1]]) == 3\nassert solution.countCornerRectangles([[1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0]]) == 57\nassert solution.countCornerRectangles([[0, 0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1]]) == 25\nassert solution.countCornerRectangles([[0, 1, 1, 0, 0, 1, 0, 0, 1]]) == 0\nassert solution.countCornerRectangles([[1, 1, 1, 0], [1, 0, 1, 0]]) == 1\nassert solution.countCornerRectangles([[0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1]]) == 238\nassert solution.countCornerRectangles([[0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1]]) == 122\nassert solution.countCornerRectangles([[0, 0, 1, 0, 0, 1], [1, 1, 0, 1, 1, 0]]) == 0\nassert solution.countCornerRectangles([[1, 0, 0, 0, 0], [1, 1, 1, 0, 0]]) == 0\nassert solution.countCornerRectangles([[1, 0], [1, 0], [1, 1], [0, 1], [0, 0], [1, 1], [1, 0], [1, 1]]) == 3\nassert solution.countCornerRectangles([[1, 0, 1, 0, 0], [1, 0, 0, 1, 0]]) == 0\nassert solution.countCornerRectangles([[1, 1, 1, 1, 0], [0, 1, 0, 0, 1]]) == 0\nassert solution.countCornerRectangles([[0], [0], [1], [0], [0], [1], [1], [0]]) == 0\nassert solution.countCornerRectangles([[0], [1], [1], [0], [1], [1]]) == 0\nassert solution.countCornerRectangles([[0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1]]) == 77\nassert solution.countCornerRectangles([[0, 0], [1, 1], [1, 1], [1, 0], [0, 1]]) == 1\nassert solution.countCornerRectangles([[0, 0, 0, 1, 1, 1, 1]]) == 0\nassert solution.countCornerRectangles([[0, 1, 0, 1], [0, 0, 1, 1], [1, 1, 0, 1]]) == 1\nassert solution.countCornerRectangles([[0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0]]) == 0\nassert solution.countCornerRectangles([[1, 1, 0, 1]]) == 0\nassert solution.countCornerRectangles([[1, 0, 0], [0, 0, 1], [0, 1, 0], [1, 1, 1], [1, 1, 1], [1, 0, 1], [1, 1, 1]]) == 12\nassert solution.countCornerRectangles([[1, 1, 0]]) == 0\nassert solution.countCornerRectangles([[1, 0, 1, 1, 0], [0, 1, 0, 1, 0], [1, 1, 0, 0, 1], [0, 1, 1, 1, 1], [1, 0, 0, 0, 1], [0, 1, 1, 0, 1], [1, 1, 0, 1, 1], [1, 0, 1, 1, 1], [0, 0, 0, 1, 0]]) == 30\nassert solution.countCornerRectangles([[1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1]]) == 26\nassert solution.countCornerRectangles([[1, 1, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0], [1, 1, 0, 0], [1, 1, 0, 1]]) == 3\nassert solution.countCornerRectangles([[1, 1, 1, 0], [0, 0, 1, 0], [1, 0, 0, 1], [1, 1, 0, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 1, 0, 1]]) == 12\nassert solution.countCornerRectangles([[0, 1, 0, 1], [1, 1, 0, 1], [0, 1, 0, 1], [0, 1, 1, 0]]) == 3\nassert solution.countCornerRectangles([[0, 1, 0, 1, 0, 0], [1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0]]) == 1\nassert solution.countCornerRectangles([[1, 0, 0]]) == 0\nassert solution.countCornerRectangles([[0, 0, 0, 1, 1], [0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1], [1, 1, 1, 1, 1]]) == 16\nassert solution.countCornerRectangles([[0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]]) == 3\nassert solution.countCornerRectangles([[0, 1, 0], [1, 1, 1], [1, 1, 1], [1, 0, 1], [1, 1, 0]]) == 7\nassert solution.countCornerRectangles([[1], [0], [0], [1], [1], [1], [0], [0]]) == 0\nassert solution.countCornerRectangles([[1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1]]) == 81\nassert solution.countCornerRectangles([[0, 0, 1, 1, 1], [1, 0, 0, 0, 1], [0, 1, 1, 0, 1], [1, 0, 0, 1, 1], [1, 0, 1, 1, 1]]) == 11\nassert solution.countCornerRectangles([[0, 1], [0, 1], [1, 0], [0, 0], [0, 1], [1, 0], [0, 1], [1, 1], [1, 1]]) == 1\nassert solution.countCornerRectangles([[1, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 0, 0, 1, 1]]) == 3\nassert solution.countCornerRectangles([[1], [1], [0], [1], [1], [0], [1], [0], [1]]) == 0\nassert solution.countCornerRectangles([[0, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0]]) == 73\nassert solution.countCornerRectangles([[1, 1, 1, 1, 0]]) == 0\nassert solution.countCornerRectangles([[1, 0, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 0, 0, 1, 0]]) == 0\nassert solution.countCornerRectangles([[0, 0, 1, 0, 1, 1, 1, 0]]) == 0\nassert solution.countCornerRectangles([[1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0]]) == 30\nassert solution.countCornerRectangles([[1, 1], [1, 1], [0, 1], [1, 1], [1, 1], [1, 1]]) == 10\nassert solution.countCornerRectangles([[0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0]]) == 3\nassert solution.countCornerRectangles([[1], [1], [0]]) == 0\nassert solution.countCornerRectangles([[1, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1]]) == 80\nassert solution.countCornerRectangles([[0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1]]) == 52\nassert solution.countCornerRectangles([[0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]) == 7\nassert solution.countCornerRectangles([[0, 0, 1, 1, 1], [1, 1, 1, 1, 0], [0, 1, 1, 1, 1], [1, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 1], [0, 1, 1, 1, 1]]) == 30\nassert solution.countCornerRectangles([[0, 1, 1], [1, 0, 0], [1, 0, 1], [0, 0, 1], [0, 0, 1], [1, 1, 1], [1, 0, 0]]) == 2\nassert solution.countCornerRectangles([[0, 1, 0, 1, 1, 0, 1, 1, 0]]) == 0\nassert solution.countCornerRectangles([[0, 0], [0, 0], [1, 0], [0, 1], [1, 0], [1, 1], [0, 1], [1, 0], [1, 1]]) == 1\nassert solution.countCornerRectangles([[1, 0, 0, 1, 1], [0, 1, 0, 0, 0], [0, 0, 1, 1, 1], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 1, 1, 1]]) == 11\nassert solution.countCornerRectangles([[0, 1], [1, 1], [0, 0], [0, 0], [1, 1]]) == 1\nassert solution.countCornerRectangles([[1, 1], [0, 1]]) == 0\nassert solution.countCornerRectangles([[1, 1, 0, 0, 0, 1, 0]]) == 0\nassert solution.countCornerRectangles([[1, 0, 1, 0], [1, 0, 0, 1], [0, 1, 0, 1], [1, 1, 1, 0], [0, 0, 0, 1], [1, 1, 0, 1], [1, 1, 1, 0], [0, 0, 0, 1], [0, 1, 0, 1], [1, 0, 0, 0]]) == 11",
  "inefficient_solution": "class Solution:\n    def countCornerRectangles(self, grid: List[List[int]]) -> int:\n        ans = 0\n        full_grid_copy = []\n        for row in grid:\n            new_row = row[:]\n            full_grid_copy.append(new_row)\n        full_grid_copy_copy = []\n        for row in full_grid_copy:\n            new_row = row[:]\n            full_grid_copy_copy.append(new_row)\n        temp_grid = []\n        for row in full_grid_copy_copy:\n            new_row = row[:]\n            temp_grid.append(new_row)\n        n = len(grid[0])\n        m = len(grid)\n        counters = []\n        for _ in range(n):\n            counter = Counter()\n            counters.append(counter)\n        for row in full_grid_copy_copy:\n            for i, c1 in enumerate(row):\n                if c1:\n                    for j in range(i + 1, n):\n                        if row[j]:\n                            ans += counters[j][j]\n                            counters[j][j] += 1\n                            temp_grid[i][j] = 0\n        for row in temp_grid:\n            for c in row:\n                c = 0\n        return ans",
  "is_python": true
}