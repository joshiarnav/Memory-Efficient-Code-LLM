{
  "problem_idx": 2598,
  "task_name": "Smallest Missing Non",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `value`.\n\n\nIn one operation, you can add or subtract `value` from any element of `nums`.\n\n\n* For example, if `nums = [1,2,3]` and `value = 2`, you can choose to subtract `value` from `nums[0]` to make `nums = [-1,2,3]`.\n\n\nThe MEX (minimum excluded) of an array is the smallest missing **non-negative** integer in it.\n\n\n* For example, the MEX of `[-1,2,3]` is `0` while the MEX of `[1,0,3]` is `2`.\n\n\nReturn *the maximum MEX of* `nums` *after applying the mentioned operation **any number of times***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,-10,7,13,6,8], value = 5\n**Output:** 4\n**Explanation:** One can achieve this result by applying the following operations:\n- Add value to nums[1] twice to make nums = [1,**0**,7,13,6,8]\n- Subtract value from nums[2] once to make nums = [1,0,**2**,13,6,8]\n- Subtract value from nums[3] twice to make nums = [1,0,2,**3**,6,8]\nThe MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,-10,7,13,6,8], value = 7\n**Output:** 2\n**Explanation:** One can achieve this result by applying the following operation:\n- subtract value from nums[2] once to make nums = [1,-10,**0**,13,6,8]\nThe MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length, value <= 105`\n* `-109 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def findSmallestInteger(self, nums: List[int], value: int) -> int:\n        cnt = Counter(x % value for x in nums)\n        for i in range(len(nums) + 1):\n            if cnt[i % value] == 0:\n                return i\n            cnt[i % value] -= 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findSmallestInteger(self, nums: List[int], value: int) -> int:\n        cnt = Counter(x % value for x in nums)\n        for i in range(len(nums) + 1):\n            if cnt[i % value] == 0:\n                return i\n            cnt[i % value] -= 1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-1000000000, 1000000001), random.randint(1, 10))\n    \n    # Generate a random value\n    value = random.randint(1, 100001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findSmallestInteger(nums, value)\n\n    return nums, value, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, value, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findSmallestInteger(nums, value) == expected_result\n        print(f\"assert solution.findSmallestInteger({nums}, {value}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findSmallestInteger({nums}, {value}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findSmallestInteger([-764678985, -721435259, -599066458, -571482991, -420171116, 891472178], 64419) == 0\nassert solution.findSmallestInteger([173491247], 80009) == 0\nassert solution.findSmallestInteger([48215533, 351455753, 183932585, 929069235, -407966470], 96100) == 0\nassert solution.findSmallestInteger([832144049, -89680677, 188502925], 37905) == 0\nassert solution.findSmallestInteger([363670251, -25855499, -451452206, -652592569, -667489388, -459611198, -135522877, -415585908, 49193516, -531686562], 67688) == 0\nassert solution.findSmallestInteger([-117142645, 776374709], 84787) == 0\nassert solution.findSmallestInteger([804137785, -447695078, -321481406, -238549484, -223165644, 764692026, -907063771, 984732449], 3189) == 0\nassert solution.findSmallestInteger([136407145, 288192552, 774558776, 200918741, -976995542, 265721532, -667929163, 527587584], 26649) == 0\nassert solution.findSmallestInteger([964428899, -443551343, -462408039, 681050573, 595718246, -960226714, -223426462, 426581695, 67835323], 15888) == 0\nassert solution.findSmallestInteger([-720000404], 85092) == 0\nassert solution.findSmallestInteger([282843375, -855294210, -534411825, 518821354, -132866948, -807946334, 533009308, -489910536, -517512026, -407160764], 49929) == 0\nassert solution.findSmallestInteger([-986826756, -30162981, 15667085, 751378677, 856703384, 874892509, -442917995, -413539152, 46029833, 922637533], 58327) == 0\nassert solution.findSmallestInteger([658610816, 866270866, 350330416, -6192831, 522721768, -160664650], 33289) == 0\nassert solution.findSmallestInteger([-252406804, -670915838, 15462582], 16963) == 0\nassert solution.findSmallestInteger([-976609655, -176202026, 6177530], 19750) == 0\nassert solution.findSmallestInteger([-971488555], 7018) == 0\nassert solution.findSmallestInteger([-810896785, -881070867, -475564685, -721725797, -468654491, 779231248, 430112933, 254238823], 65362) == 0\nassert solution.findSmallestInteger([550518444, 296646872, -177048874, -841640405, 292931172, -648196827], 22140) == 0\nassert solution.findSmallestInteger([989026127, 165955987, 377640108, 199508500, 538084659, -486160027, 577291687, 407938893], 46858) == 0\nassert solution.findSmallestInteger([632813234, -441046805, 43380051, 340043522, -211012054, -279134967, 336953507, 918595908, 443840461, 791749721], 80842) == 0\nassert solution.findSmallestInteger([646604993, 755761141, -709144034, -422796353], 35571) == 0\nassert solution.findSmallestInteger([-577294634, -319507174, -677782502, -593262164, -723742507, -241181396, 662416727], 81290) == 0\nassert solution.findSmallestInteger([-647465139, -567220985], 61) == 0\nassert solution.findSmallestInteger([897569647, 925189965, 97219794, -951475495, 577895137], 2688) == 0\nassert solution.findSmallestInteger([-632673610], 58396) == 0\nassert solution.findSmallestInteger([122326979, -960829313], 79759) == 0\nassert solution.findSmallestInteger([529888016, 4619159, -633354943, 315466100, 347752889, -416103228, -295610387, -706404790], 70109) == 0\nassert solution.findSmallestInteger([-718130242], 66430) == 0\nassert solution.findSmallestInteger([-830964767, -687302042, 346459548, -163103204, 110269878, -906476347, 495727368, 631078728], 70204) == 0\nassert solution.findSmallestInteger([309557777, 579072509, -882726312, 412618811, 149471617, 686880774, -371570608, -563163785], 75407) == 0\nassert solution.findSmallestInteger([870044255, -351415306, 666469630, 778263061, -224327203, 797128433], 3740) == 0\nassert solution.findSmallestInteger([764063510], 77647) == 0\nassert solution.findSmallestInteger([-305502845, 748309326, -441088281, -812913265, 518940882, -643435106, 932743694, -919336433, -641950648, -432165392], 55150) == 0\nassert solution.findSmallestInteger([-659929976, -276277915, -700878553, -396067109], 6186) == 0\nassert solution.findSmallestInteger([-497260830, -369226331], 14081) == 0\nassert solution.findSmallestInteger([6754268, -83281753, 235846879, -594420686, -149877961, 340962789], 23849) == 0\nassert solution.findSmallestInteger([695791324, 698336797, 93637006, 536401165, 37574745, 497609883, -743960980, 301917444], 53100) == 0\nassert solution.findSmallestInteger([-491081274, -662861687, 98266801], 63514) == 0\nassert solution.findSmallestInteger([-91613478, -529727622, 442926774, 10222409, -555992630, -726345674, 137722920, -742391261, -768917990], 28926) == 0\nassert solution.findSmallestInteger([90736131, 27951937, 905932178, -501869936, 951574851, 363231595, -310879870], 70540) == 0\nassert solution.findSmallestInteger([-660076092, -909617321, -486756154, 269185544, -300327016, -818756399, -725063860, -277297233, -174368247, 414924382], 56514) == 0\nassert solution.findSmallestInteger([787434934, 114257526, 212529562, -219828629, 77869507, -651348254, -413536747], 79054) == 0\nassert solution.findSmallestInteger([-794532416, 33521844], 90023) == 0\nassert solution.findSmallestInteger([-384524566, -999039834], 31046) == 0\nassert solution.findSmallestInteger([248262309, 110090794, 108118614, 43877484, 224488484, -510802849, -80507293], 46452) == 0\nassert solution.findSmallestInteger([419855985, -611130669, -497658815, -192233633, -211050510], 66058) == 0\nassert solution.findSmallestInteger([52040088, 322555254, -899870377, -286368871, 310560477, -396624983, 70076832, -706681737, 671889505], 70472) == 0\nassert solution.findSmallestInteger([-881862210, 916701446], 72895) == 0\nassert solution.findSmallestInteger([-721802900, -522595824, -195516364, -893338500, 236697184, -381369402], 80522) == 0\nassert solution.findSmallestInteger([259159597, -164302686, -377986878, -94378685, 732946995, -704232369, 813846439, 3065924, -703933986, 487906115], 45935) == 0\nassert solution.findSmallestInteger([606967794, 193120794, -715798209, -62531968, 636603022, 155582753, 549986589, -994683209], 14012) == 0\nassert solution.findSmallestInteger([648260637, -382537317, -943505747, 396121440, 541353428, 271840748, 74970234, -182660665, 763423901], 8865) == 0\nassert solution.findSmallestInteger([-980639721, 275575105, 417646253, 321042469], 2067) == 0\nassert solution.findSmallestInteger([-471654101, -45434115, -13493854, -212101887, -623709653, -128805606, -734275131, -706199602, -777445518, -243293093], 57638) == 0\nassert solution.findSmallestInteger([799747847, 622115072, -347828549, -543919774, -101830597, -23462574, -760736709], 571) == 0\nassert solution.findSmallestInteger([-449965396], 24145) == 0\nassert solution.findSmallestInteger([626169007, -926974386, -759674306, 187681522], 33899) == 0\nassert solution.findSmallestInteger([12673568, -526287559, -532110330, 918513707, 135598062, 338280375, 220491085, 598829124, 180272285], 4634) == 0\nassert solution.findSmallestInteger([-806463515, 349073949, 185650680, 607796187, 65153400, 487461719], 27315) == 0\nassert solution.findSmallestInteger([-241119868, 307736189, 606469140, 923015023, 646582564, 718697811, 986737239], 67677) == 0\nassert solution.findSmallestInteger([-671765589, 833426836, 855273431], 27225) == 0\nassert solution.findSmallestInteger([-507748525, 849570981, -72335310, 250064560, -850340005, -979591574, 594829210, 485085374], 10718) == 0\nassert solution.findSmallestInteger([139251849, -497908818, 844308270], 82858) == 0\nassert solution.findSmallestInteger([684970047, 368520002, -907150293, 456313106, -269156822, 652703839, 972319069], 91189) == 0\nassert solution.findSmallestInteger([-351538192, 628838913, -130672435], 63249) == 0\nassert solution.findSmallestInteger([-533412745, 469148666], 41408) == 0\nassert solution.findSmallestInteger([42625340, 950704453], 72909) == 0\nassert solution.findSmallestInteger([-660657493, -267003994, -770343623, -717648035, -944999684, 949082242, 147536104, -765135223], 18949) == 0\nassert solution.findSmallestInteger([438901450, 405764426], 69395) == 0\nassert solution.findSmallestInteger([-231335385, 633928038, 658786888, -795211694, -730827478, 236379878, 61371567, 67406245], 13302) == 0\nassert solution.findSmallestInteger([-64809035, -233252827, 257269078, 76025873, 104085327, -604441485], 87119) == 0\nassert solution.findSmallestInteger([563423820, 854589579, 903059592, -353197555, -418093257, -119692532, 689239629], 48160) == 0\nassert solution.findSmallestInteger([836325668, 421929946, 326784355, 143228621, 832345841, 416245022, 353070072, 78298535, 170751525, 355381714], 50113) == 0\nassert solution.findSmallestInteger([319361975, 90681588, 279125779], 87269) == 0\nassert solution.findSmallestInteger([-266866603, -981199274, -45482782, 571829911, -384524787], 43126) == 0\nassert solution.findSmallestInteger([-329957370, -609659023, 271150509, 495321666], 78424) == 0\nassert solution.findSmallestInteger([-476182741, 704686941, 624853101, 79133389, 475553544], 59702) == 0\nassert solution.findSmallestInteger([-820896235, -60943888, -640440755, -351456009, 100802365, -977580494], 71524) == 0\nassert solution.findSmallestInteger([-362538228, -269495842, 459350399, 378335003, 54902825, 263750471, -474396593, 727709355, -492310547], 9942) == 0\nassert solution.findSmallestInteger([-459447521, -724492640, 834324182, 835220777, -484103778, -195887093, -552699957, 376724269, -373095971, -898873811], 14577) == 0\nassert solution.findSmallestInteger([389569196, -80438771, 525794088, -43674261, -775465265, -424037124, -257836612, -478983286], 37395) == 0\nassert solution.findSmallestInteger([-978892937, -975853412, -231444252, -386120057], 19548) == 0\nassert solution.findSmallestInteger([-398232025, 497295391, 739707506, -779375324, 595907549, 959142470], 90274) == 0\nassert solution.findSmallestInteger([589486986, 435210721, 968544162, -333256653, 81059881, 995223466, -548328791], 24720) == 0\nassert solution.findSmallestInteger([807346951, -622232136], 17894) == 0\nassert solution.findSmallestInteger([-749773955, 645330255, 80191762, -623919663, 728734893, 19260841, -538018341, 325740499, 665926008, -678670644], 72617) == 0\nassert solution.findSmallestInteger([815140357], 60737) == 0\nassert solution.findSmallestInteger([99201250, 622764708, 912084143, -43190205, 723552992, 334138235, 648131479, 310703542], 7162) == 0\nassert solution.findSmallestInteger([-173587600, -248523459, 625798666, 458523966, 75513333, 313012550], 14430) == 0\nassert solution.findSmallestInteger([-847249451, -208998562, -629586725, 961516659, 866555161], 24567) == 0\nassert solution.findSmallestInteger([-157962409, 160697463], 85494) == 0\nassert solution.findSmallestInteger([-340520411], 15778) == 0\nassert solution.findSmallestInteger([729718031, -566998766, -754602432, 135351287, -985268400], 80152) == 0\nassert solution.findSmallestInteger([645980417, 376098889, -537015915, 716300047], 9312) == 0\nassert solution.findSmallestInteger([-741130136, 724483133], 63536) == 0\nassert solution.findSmallestInteger([445526653, -335801558, -897663154, -318094639], 58816) == 0\nassert solution.findSmallestInteger([391570410, 614881385, -931747281, -668364007, -762073169, 980261736, -355163794, 348828890, -111764719], 11261) == 0\nassert solution.findSmallestInteger([-969452240, -162282898, -224624813, 90815833, 669602959, -946644540, -899000360], 51245) == 0\nassert solution.findSmallestInteger([-677114788, 551437582, 302958209, -480940165, 24788245], 52342) == 0\nassert solution.findSmallestInteger([581966740, -87502505, 79836342, 845803663, 358104161, 207013631, -519945703, 230205819], 36709) == 0",
  "inefficient_solution": "class Solution:\n    def findSmallestInteger(self, nums: List[int], value: int) -> int:\n        counts = {}\n        for num in nums:\n            remainder = num % value\n            if remainder not in counts:\n                counts[remainder] = []\n            counts[remainder].append(num)\n        max_mex = float('-inf')\n        for remainder in range(value):\n            count = []\n            if remainder in counts:\n                count = counts[remainder]\n            for i in range(len(nums)):\n                if len(count) > 0 and count[0] == nums[i]:\n                    del count[0]\n                else:\n                    max_mex = max(max_mex, i // value)\n        return max_mex",
  "is_python": true
}