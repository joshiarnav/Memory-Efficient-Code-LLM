{
  "problem_idx": 1820,
  "task_name": "Maximum Number of Accepted Invitations",
  "markdown_description": "\nThere are `m` boys and `n` girls in a class attending an upcoming party.\n\n\nYou are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most **one girl**, and a girl can accept at most **one invitation** from a boy.\n\n\nReturn *the **maximum** possible number of accepted invitations.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grid = [[1,1,1],\n               [1,0,1],\n               [0,0,1]]\n**Output:** 3**Explanation:** The invitations are sent as follows:\n- The 1st boy invites the 2nd girl.\n- The 2nd boy invites the 1st girl.\n- The 3rd boy invites the 3rd girl.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[1,0,1,0],\n               [1,0,0,0],\n               [0,0,1,0],\n               [1,1,1,0]]\n**Output:** 3\n**Explanation:** The invitations are sent as follows:\n-The 1st boy invites the 3rd girl.\n-The 2nd boy invites the 1st girl.\n-The 3rd boy invites no one.\n-The 4th boy invites the 2nd girl.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `grid.length == m`\n* `grid[i].length == n`\n* `1 <= m, n <= 200`\n* `grid[i][j]` is either `0` or `1`.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumInvitations(self, grid: List[List[int]]) -> int:\n        def find(i):\n            for j, v in enumerate(grid[i]):\n                if v and j not in vis:\n                    vis.add(j)\n                    if match[j] == -1 or find(match[j]):\n                        match[j] = i\n                        return True\n            return False\n\n        m, n = len(grid), len(grid[0])\n        match = [-1] * n\n        ans = 0\n        for i in range(m):\n            vis = set()\n            ans += find(i)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumInvitations(self, grid):\n        def find(i):\n            for j, v in enumerate(grid[i]):\n                if v and j not in vis:\n                    vis.add(j)\n                    if match[j] == -1 or find(match[j]):\n                        match[j] = i\n                        return True\n            return False\n\n        m, n = len(grid), len(grid[0])\n        match = [-1] * n\n        ans = 0\n        for i in range(m):\n            vis = set()\n            ans += find(i)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random grid dimensions\n    m = random.randint(1, 11)\n    n = random.randint(1, 11)\n\n    # Generate random grid with 0s and 1s\n    grid = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumInvitations(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumInvitations(grid) == expected_result\n        print(f\"assert solution.maximumInvitations({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumInvitations({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumInvitations([[0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1]]) == 7\nassert solution.maximumInvitations([[0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1]]) == 7\nassert solution.maximumInvitations([[0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1]]) == 4\nassert solution.maximumInvitations([[0, 0, 1], [1, 1, 0], [1, 1, 1], [1, 0, 1], [0, 0, 1], [1, 0, 0]]) == 3\nassert solution.maximumInvitations([[0, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1, 1, 1]]) == 9\nassert solution.maximumInvitations([[1, 1, 0, 0, 1], [1, 1, 0, 1, 1], [0, 0, 0, 0, 1], [0, 1, 1, 1, 1], [0, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 1, 0, 0], [0, 0, 0, 1, 1], [0, 1, 1, 0, 1], [1, 1, 0, 0, 1], [0, 1, 0, 0, 1]]) == 5\nassert solution.maximumInvitations([[0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1, 0]]) == 7\nassert solution.maximumInvitations([[0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1]]) == 6\nassert solution.maximumInvitations([[0, 0, 1], [0, 1, 0], [1, 1, 1], [0, 0, 0], [1, 0, 0]]) == 3\nassert solution.maximumInvitations([[1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0]]) == 10\nassert solution.maximumInvitations([[1, 0, 1, 1, 1], [1, 1, 1, 0, 0], [0, 1, 1, 0, 1], [0, 1, 0, 1, 1], [0, 0, 1, 0, 1], [0, 1, 1, 1, 1], [0, 0, 1, 0, 1], [1, 1, 0, 1, 1], [0, 1, 1, 1, 1]]) == 5\nassert solution.maximumInvitations([[1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0]]) == 3\nassert solution.maximumInvitations([[0, 0, 0, 0], [1, 0, 1, 1], [1, 1, 0, 0], [1, 0, 1, 1]]) == 3\nassert solution.maximumInvitations([[0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1]]) == 10\nassert solution.maximumInvitations([[0], [1], [1], [1]]) == 1\nassert solution.maximumInvitations([[0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1]]) == 2\nassert solution.maximumInvitations([[1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0]]) == 7\nassert solution.maximumInvitations([[1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0]]) == 9\nassert solution.maximumInvitations([[0, 0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1]]) == 2\nassert solution.maximumInvitations([[0, 0, 0, 0], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [1, 0, 0, 1], [0, 1, 1, 1], [1, 0, 0, 1]]) == 4\nassert solution.maximumInvitations([[0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 1]]) == 2\nassert solution.maximumInvitations([[1, 0, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0], [1, 1, 1], [0, 0, 1], [1, 1, 1], [0, 1, 1], [0, 1, 1]]) == 3\nassert solution.maximumInvitations([[1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1]]) == 4\nassert solution.maximumInvitations([[0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1]]) == 2\nassert solution.maximumInvitations([[0], [0], [0]]) == 0\nassert solution.maximumInvitations([[1, 1, 1, 1], [1, 1, 1, 0], [0, 0, 1, 1], [0, 1, 1, 0], [1, 1, 0, 1]]) == 4\nassert solution.maximumInvitations([[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 1, 1], [1, 1, 0, 0], [1, 1, 1, 0], [1, 0, 1, 0], [1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 0], [1, 1, 1, 1]]) == 4\nassert solution.maximumInvitations([[0, 0, 1, 0], [1, 0, 1, 0]]) == 2\nassert solution.maximumInvitations([[0, 1, 1, 0, 0]]) == 1\nassert solution.maximumInvitations([[0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0]]) == 6\nassert solution.maximumInvitations([[0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1]]) == 6\nassert solution.maximumInvitations([[1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1]]) == 4\nassert solution.maximumInvitations([[1, 0]]) == 1\nassert solution.maximumInvitations([[0, 0, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0]]) == 7\nassert solution.maximumInvitations([[1, 1, 1, 1, 0, 0, 1, 1, 0, 0]]) == 1\nassert solution.maximumInvitations([[1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 0]]) == 7\nassert solution.maximumInvitations([[0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1]]) == 9\nassert solution.maximumInvitations([[0, 0, 1, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0]]) == 8\nassert solution.maximumInvitations([[0, 1, 1, 0, 0], [1, 0, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0]]) == 5\nassert solution.maximumInvitations([[0, 0, 1, 1, 0], [0, 1, 0, 1, 1], [0, 1, 0, 1, 1]]) == 3\nassert solution.maximumInvitations([[1, 0, 1, 0, 0], [0, 0, 1, 1, 1], [1, 1, 0, 0, 1], [0, 1, 0, 0, 1], [0, 1, 1, 1, 0], [1, 1, 1, 1, 0]]) == 5\nassert solution.maximumInvitations([[0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0]]) == 10\nassert solution.maximumInvitations([[1, 0], [1, 0], [0, 0]]) == 1\nassert solution.maximumInvitations([[0, 1], [0, 1], [1, 1], [1, 0], [0, 1], [1, 1], [1, 1], [1, 0], [0, 1], [0, 1]]) == 2\nassert solution.maximumInvitations([[1, 0, 1, 0, 1], [1, 0, 0, 1, 0], [1, 0, 1, 1, 0], [0, 0, 1, 0, 0], [0, 1, 1, 0, 1], [1, 1, 1, 1, 1], [0, 1, 1, 0, 1], [0, 1, 0, 1, 0], [0, 0, 0, 1, 1], [1, 1, 1, 0, 0], [1, 1, 0, 0, 0]]) == 5\nassert solution.maximumInvitations([[1, 1, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0]]) == 7\nassert solution.maximumInvitations([[1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1]]) == 4\nassert solution.maximumInvitations([[0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1]]) == 10\nassert solution.maximumInvitations([[0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0]]) == 3\nassert solution.maximumInvitations([[1, 0, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0], [0, 1, 1], [1, 0, 0], [1, 1, 0], [1, 0, 0], [0, 0, 1]]) == 3\nassert solution.maximumInvitations([[1, 0, 1, 0, 0], [0, 0, 1, 1, 0], [1, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 1, 1, 0], [0, 1, 0, 1, 0], [1, 0, 1, 0, 1], [1, 0, 1, 0, 1], [1, 0, 1, 1, 0]]) == 5\nassert solution.maximumInvitations([[1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0]]) == 6\nassert solution.maximumInvitations([[0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1, 0]]) == 7\nassert solution.maximumInvitations([[1, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0]]) == 4\nassert solution.maximumInvitations([[1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0]]) == 11\nassert solution.maximumInvitations([[1, 0], [1, 0], [1, 1], [1, 1], [0, 1], [1, 0], [0, 0], [1, 1], [1, 0], [1, 0], [1, 0]]) == 2\nassert solution.maximumInvitations([[0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 1, 0, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 1]]) == 5\nassert solution.maximumInvitations([[1, 0], [0, 1]]) == 2\nassert solution.maximumInvitations([[0, 0], [0, 0], [0, 1], [0, 1], [0, 0], [1, 1], [0, 1], [1, 0], [0, 0], [0, 1], [1, 1]]) == 2\nassert solution.maximumInvitations([[1, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0], [0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [1, 0, 0, 0, 0]]) == 4\nassert solution.maximumInvitations([[1, 1], [1, 0], [0, 0], [1, 0], [0, 0]]) == 2\nassert solution.maximumInvitations([[0, 1], [0, 0], [0, 0], [0, 1], [1, 1], [1, 0], [0, 0], [0, 0], [1, 0]]) == 2\nassert solution.maximumInvitations([[0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0]]) == 9\nassert solution.maximumInvitations([[1, 1, 0], [0, 0, 0], [0, 1, 1], [1, 1, 0], [1, 0, 0], [0, 1, 0]]) == 3\nassert solution.maximumInvitations([[0, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0]]) == 7\nassert solution.maximumInvitations([[1, 0], [0, 1], [1, 1], [1, 1]]) == 2\nassert solution.maximumInvitations([[0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 0, 0]]) == 10\nassert solution.maximumInvitations([[1, 0, 0, 0, 1], [1, 1, 0, 0, 1], [1, 0, 1, 1, 1]]) == 3\nassert solution.maximumInvitations([[1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0]]) == 6\nassert solution.maximumInvitations([[0, 0, 1, 1], [1, 1, 1, 0], [1, 1, 0, 0], [1, 1, 0, 0], [1, 0, 0, 1]]) == 4\nassert solution.maximumInvitations([[1], [0]]) == 1\nassert solution.maximumInvitations([[0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1]]) == 10\nassert solution.maximumInvitations([[1, 1]]) == 1\nassert solution.maximumInvitations([[1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0]]) == 3\nassert solution.maximumInvitations([[1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0]]) == 6\nassert solution.maximumInvitations([[0, 0, 1, 1], [1, 0, 0, 0], [0, 1, 1, 0], [0, 0, 1, 0], [1, 1, 0, 1], [1, 1, 1, 0], [0, 1, 0, 1], [1, 0, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0], [0, 0, 0, 0]]) == 4\nassert solution.maximumInvitations([[0, 0, 0]]) == 0\nassert solution.maximumInvitations([[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1]]) == 3\nassert solution.maximumInvitations([[1, 0, 1, 1], [1, 1, 0, 0], [0, 1, 1, 1], [0, 1, 1, 0]]) == 4\nassert solution.maximumInvitations([[1], [1], [1], [1], [1], [0], [0], [1], [0], [1], [0]]) == 1\nassert solution.maximumInvitations([[1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0]]) == 1\nassert solution.maximumInvitations([[1, 0, 0, 1, 0, 1, 0, 0, 0]]) == 1\nassert solution.maximumInvitations([[0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1]]) == 6\nassert solution.maximumInvitations([[0, 0, 0, 1, 1, 0, 0, 1, 1]]) == 1\nassert solution.maximumInvitations([[1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0]]) == 3\nassert solution.maximumInvitations([[0, 0, 0, 1, 1, 0, 0, 0, 0, 0]]) == 1\nassert solution.maximumInvitations([[1, 0], [0, 0], [1, 1], [0, 0], [0, 1], [1, 1], [1, 0], [0, 1], [1, 1], [0, 0], [0, 0]]) == 2\nassert solution.maximumInvitations([[1, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 1, 0, 0, 1], [1, 0, 0, 0, 1], [1, 1, 0, 1, 1], [1, 1, 0, 0, 0]]) == 4\nassert solution.maximumInvitations([[1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0]]) == 7\nassert solution.maximumInvitations([[0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0], [1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1]]) == 7\nassert solution.maximumInvitations([[0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0]]) == 2\nassert solution.maximumInvitations([[1, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0]]) == 4\nassert solution.maximumInvitations([[1, 1, 0], [1, 1, 1], [1, 1, 1], [1, 1, 0], [1, 1, 0], [1, 1, 0], [0, 0, 1], [1, 1, 0], [0, 0, 1], [1, 0, 1], [0, 1, 1]]) == 3\nassert solution.maximumInvitations([[0, 1, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 1, 1]]) == 6\nassert solution.maximumInvitations([[1, 1, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]) == 2\nassert solution.maximumInvitations([[1, 0, 1, 1, 1], [1, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 1, 1, 0], [0, 1, 1, 1, 1], [1, 1, 1, 1, 0], [1, 0, 0, 1, 0]]) == 5\nassert solution.maximumInvitations([[0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1]]) == 4\nassert solution.maximumInvitations([[1, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1]]) == 6\nassert solution.maximumInvitations([[0, 0, 0, 1], [1, 1, 0, 1]]) == 2\nassert solution.maximumInvitations([[1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0]]) == 2",
  "inefficient_solution": "class Solution:\n    def maximumInvitations(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        match = [-1] * (m * n)\n        visited = [[] for _ in range(m * n)]\n        ans = 0\n\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    for k in range(m * n):\n                        if k not in visited[i] and k not in visited[j] and match[k] == -1:\n                            match[k] = i * n + j\n                            visited[i].append(k)\n                            visited[j].append(k)\n                            ans += 1\n                            break\n\n        for i in range(m * n):\n            if match[i] != -1:\n                for j in range(m * n):\n                    if match[j] == -1 and j not in visited[i]:\n                        visited[i].append(j)\n                        match[j] = i\n                        ans += 1\n                        break\n\n        return ans",
  "is_python": true
}