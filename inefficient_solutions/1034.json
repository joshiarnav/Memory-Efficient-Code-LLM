{
  "problem_idx": 1034,
  "task_name": "Coloring A Border",
  "markdown_description": "\nYou are given an `m x n` integer matrix `grid`, and three integers `row`, `col`, and `color`. Each value in the grid represents the color of the grid square at that location.\n\n\nTwo squares are called **adjacent** if they are next to each other in any of the 4 directions.\n\n\nTwo squares belong to the same **connected component** if they have the same color and they are adjacent.\n\n\nThe **border of a connected component** is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column).\n\n\nYou should color the **border** of the **connected component** that contains the square `grid[row][col]` with `color`.\n\n\nReturn *the final grid*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** grid = [[1,1],[1,2]], row = 0, col = 0, color = 3\n**Output:** [[3,3],[3,2]]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3\n**Output:** [[1,3,3],[2,3,3]]\n\n```\n**Example 3:**\n\n\n\n```\n**Input:** grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2\n**Output:** [[2,2,2],[2,1,2],[2,2,2]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 50`\n* `1 <= grid[i][j], color <= 1000`\n* `0 <= row < m`\n* `0 <= col < n`\n\n\n",
  "canonical_solution": "class Solution:\n    def colorBorder(\n        self, grid: List[List[int]], row: int, col: int, color: int\n    ) -> List[List[int]]:\n        def dfs(i: int, j: int, c: int) -> None:\n            vis[i][j] = True\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    if not vis[x][y]:\n                        if grid[x][y] == c:\n                            dfs(x, y, c)\n                        else:\n                            grid[i][j] = color\n                else:\n                    grid[i][j] = color\n\n        m, n = len(grid), len(grid[0])\n        vis = [[False] * n for _ in range(m)]\n        dfs(row, col, grid[row][col])\n        return grid\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def colorBorder(\n        self, grid: List[List[int]], row: int, col: int, color: int\n    ) -> List[List[int]]:\n        def dfs(i: int, j: int, c: int) -> None:\n            vis[i][j] = True\n            for a, b in pairwise((-1, 0, 1, 0, -1)):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    if not vis[x][y]:\n                        if grid[x][y] == c:\n                            dfs(x, y, c)\n                        else:\n                            grid[i][j] = color\n                else:\n                    grid[i][j] = color\n\n        m, n = len(grid), len(grid[0])\n        vis = [[False] * n for _ in range(m)]\n        dfs(row, col, grid[row][col])\n        return grid\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(1, 6)\n    n = random.randint(1, 6)\n    grid = [[random.randint(1, 1000) for _ in range(n)] for _ in range(m)]\n    \n    # Generate random row and col\n    row = random.randint(0, m-1)\n    col = random.randint(0, n-1)\n    \n    # Generate random color\n    color = random.randint(1, 1000)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.colorBorder(grid, row, col, color)\n\n    return grid, row, col, color, expected_result\n\ndef create_test_case_string(grid, row, col, color, expected_result):\n    grid_str = \"[\"\n    for row in grid:\n        row_str = \"[\" + \", \".join([str(num) for num in row]) + \"]\"\n        grid_str += row_str + \",\"\n    grid_str = grid_str.rstrip(\",\") + \"]\"\n    \n    test_case_string = f\"assert solution.colorBorder({grid_str}, {row}, {col}, {color}) == {expected_result}\"\n    return test_case_string\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, row, col, color, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.colorBorder(grid, row, col, color) == expected_result\n        test_case_string = create_test_case_string(grid, row, col, color, expected_result)\n        print(test_case_string)\n        test_case_generator_results.append(test_case_string)\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.colorBorder([[572, 516],[646, 653]], [646, 653], 0, 646) == [[572, 516], [646, 653]]\nassert solution.colorBorder([[138],[752]], [752], 0, 138) == [[138], [752]]\nassert solution.colorBorder([[730],[78],[455]], [455], 0, 730) == [[730], [78], [455]]\nassert solution.colorBorder([[82],[356],[976]], [976], 0, 976) == [[82], [356], [976]]\nassert solution.colorBorder([[278, 160],[114, 740]], [114, 740], 0, 114) == [[278, 160], [114, 740]]\nassert solution.colorBorder([[73, 37, 541, 494, 681, 843],[878, 154, 204, 548, 806, 276],[896, 478, 397, 957, 56, 56]], [896, 478, 397, 957, 56, 56], 3, 494) == [[73, 37, 541, 494, 681, 843], [878, 154, 204, 548, 806, 276], [896, 478, 397, 957, 56, 56]]\nassert solution.colorBorder([[991, 776, 406, 831, 144, 250],[631, 384, 301, 174, 487, 855],[666, 457, 384, 700, 823, 527],[910, 433, 687, 296, 862, 182],[519, 375, 666, 427, 401, 393],[263, 906, 118, 57, 112, 951]], [263, 906, 118, 57, 112, 951], 4, 862) == [[991, 776, 406, 831, 144, 250], [631, 384, 301, 174, 487, 855], [666, 457, 384, 700, 823, 527], [910, 433, 687, 296, 862, 182], [519, 375, 666, 427, 401, 393], [263, 906, 118, 57, 112, 951]]\nassert solution.colorBorder([[722],[919],[667],[444]], [444], 0, 919) == [[722], [919], [667], [444]]\nassert solution.colorBorder([[600, 165, 322, 647, 380],[244, 795, 531, 504, 898],[874, 208, 3, 65, 479],[461, 892, 933, 130, 175]], [461, 892, 933, 130, 175], 3, 504) == [[600, 165, 322, 647, 380], [244, 795, 531, 504, 898], [874, 208, 3, 65, 479], [461, 892, 933, 130, 175]]\nassert solution.colorBorder([[889, 286],[672, 939],[742, 282],[747, 668]], [747, 668], 0, 742) == [[889, 286], [672, 939], [742, 282], [747, 668]]\nassert solution.colorBorder([[92, 918, 273, 896, 638],[655, 161, 679, 717, 577],[301, 197, 320, 745, 819],[235, 696, 21, 542, 825],[280, 745, 519, 270, 646]], [280, 745, 519, 270, 646], 2, 679) == [[92, 918, 273, 896, 638], [655, 161, 679, 717, 577], [301, 197, 320, 745, 819], [235, 696, 21, 542, 825], [280, 745, 519, 270, 646]]\nassert solution.colorBorder([[94, 367, 915, 455],[529, 40, 905, 296],[649, 763, 119, 998],[328, 602, 369, 551],[606, 344, 561, 923],[83, 772, 929, 715]], [83, 772, 929, 715], 0, 328) == [[94, 367, 915, 455], [529, 40, 905, 296], [649, 763, 119, 998], [328, 602, 369, 551], [606, 344, 561, 923], [83, 772, 929, 715]]\nassert solution.colorBorder([[414, 511, 138, 172, 121, 791],[304, 651, 266, 375, 556, 184],[477, 868, 134, 82, 886, 807],[342, 388, 22, 812, 781, 472]], [342, 388, 22, 812, 781, 472], 3, 375) == [[414, 511, 138, 172, 121, 791], [304, 651, 266, 375, 556, 184], [477, 868, 134, 82, 886, 807], [342, 388, 22, 812, 781, 472]]\nassert solution.colorBorder([[314, 259],[242, 557],[776, 847],[648, 947],[560, 408]], [560, 408], 1, 847) == [[314, 259], [242, 557], [776, 847], [648, 947], [560, 408]]\nassert solution.colorBorder([[375]], [375], 0, 375) == [[375]]\nassert solution.colorBorder([[415, 75, 874, 724, 961]], [415, 75, 874, 724, 961], 2, 874) == [[415, 75, 874, 724, 961]]\nassert solution.colorBorder([[386, 537],[915, 378],[260, 180],[381, 372],[485, 280],[930, 384]], [930, 384], 0, 485) == [[386, 537], [915, 378], [260, 180], [381, 372], [485, 280], [930, 384]]\nassert solution.colorBorder([[205],[46],[699],[191],[704]], [704], 0, 191) == [[205], [46], [699], [191], [704]]\nassert solution.colorBorder([[670, 195, 764, 432, 300, 678],[215, 588, 725, 176, 301, 712],[317, 882, 505, 397, 621, 716],[856, 196, 756, 296, 480, 238],[720, 611, 475, 647, 606, 919],[14, 58, 491, 541, 361, 763]], [14, 58, 491, 541, 361, 763], 5, 716) == [[670, 195, 764, 432, 300, 678], [215, 588, 725, 176, 301, 712], [317, 882, 505, 397, 621, 716], [856, 196, 756, 296, 480, 238], [720, 611, 475, 647, 606, 919], [14, 58, 491, 541, 361, 763]]\nassert solution.colorBorder([[276, 506, 359, 661],[484, 655, 908, 173],[561, 172, 911, 874],[858, 177, 211, 776]], [858, 177, 211, 776], 1, 177) == [[276, 506, 359, 661], [484, 655, 908, 173], [561, 172, 911, 874], [858, 177, 211, 776]]\nassert solution.colorBorder([[346, 483, 909, 270],[848, 232, 941, 279],[282, 920, 238, 321],[711, 972, 371, 572]], [711, 972, 371, 572], 1, 972) == [[346, 483, 909, 270], [848, 232, 941, 279], [282, 920, 238, 321], [711, 972, 371, 572]]\nassert solution.colorBorder([[125, 968, 898],[16, 966, 355],[886, 787, 286],[613, 256, 65],[279, 408, 860],[32, 50, 14]], [32, 50, 14], 2, 355) == [[125, 968, 898], [16, 966, 355], [886, 787, 286], [613, 256, 65], [279, 408, 860], [32, 50, 14]]\nassert solution.colorBorder([[31, 73, 289, 996, 725, 682],[826, 931, 633, 760, 288, 407],[271, 237, 546, 610, 438, 352],[880, 951, 892, 373, 866, 854],[616, 760, 960, 130, 855, 390]], [616, 760, 960, 130, 855, 390], 4, 288) == [[31, 73, 289, 996, 725, 682], [826, 931, 633, 760, 288, 407], [271, 237, 546, 610, 438, 352], [880, 951, 892, 373, 866, 854], [616, 760, 960, 130, 855, 390]]\nassert solution.colorBorder([[186, 943, 701, 142, 697, 546],[287, 733, 855, 682, 733, 647],[894, 722, 410, 911, 429, 840],[530, 88, 73, 973, 530, 166],[250, 37, 255, 295, 140, 819]], [250, 37, 255, 295, 140, 819], 2, 255) == [[186, 943, 701, 142, 697, 546], [287, 733, 855, 682, 733, 647], [894, 722, 410, 911, 429, 840], [530, 88, 73, 973, 530, 166], [250, 37, 255, 295, 140, 819]]\nassert solution.colorBorder([[909, 194, 348],[489, 60, 162],[390, 416, 398]], [390, 416, 398], 2, 162) == [[909, 194, 348], [489, 60, 162], [390, 416, 398]]\nassert solution.colorBorder([[917, 941, 440],[193, 302, 420],[602, 891, 137],[352, 477, 497],[584, 551, 52]], [584, 551, 52], 0, 193) == [[917, 941, 440], [193, 302, 420], [602, 891, 137], [352, 477, 497], [584, 551, 52]]\nassert solution.colorBorder([[811, 459],[268, 346],[68, 597],[735, 114],[959, 677]], [959, 677], 0, 268) == [[811, 459], [268, 346], [68, 597], [735, 114], [959, 677]]\nassert solution.colorBorder([[753],[265],[975],[102],[457]], [457], 0, 265) == [[753], [265], [975], [102], [457]]\nassert solution.colorBorder([[13, 541, 815, 191, 879],[24, 650, 365, 743, 216],[621, 702, 969, 610, 179]], [621, 702, 969, 610, 179], 0, 24) == [[13, 541, 815, 191, 879], [24, 650, 365, 743, 216], [621, 702, 969, 610, 179]]\nassert solution.colorBorder([[142],[122],[243],[656]], [656], 0, 656) == [[142], [122], [243], [656]]\nassert solution.colorBorder([[813],[201]], [201], 0, 813) == [[813], [201]]\nassert solution.colorBorder([[134, 76, 766, 783, 431, 285],[37, 420, 328, 543, 803, 397],[789, 597, 548, 91, 176, 602]], [789, 597, 548, 91, 176, 602], 0, 134) == [[134, 76, 766, 783, 431, 285], [37, 420, 328, 543, 803, 397], [789, 597, 548, 91, 176, 602]]\nassert solution.colorBorder([[743, 527, 524],[686, 797, 139],[751, 173, 594],[133, 690, 314]], [133, 690, 314], 0, 743) == [[743, 527, 524], [686, 797, 139], [751, 173, 594], [133, 690, 314]]\nassert solution.colorBorder([[259, 330, 644, 719, 548],[813, 301, 379, 409, 864],[218, 491, 158, 30, 593]], [218, 491, 158, 30, 593], 1, 491) == [[259, 330, 644, 719, 548], [813, 301, 379, 409, 864], [218, 491, 158, 30, 593]]\nassert solution.colorBorder([[550]], [550], 0, 550) == [[550]]\nassert solution.colorBorder([[82, 307, 447],[969, 114, 462]], [969, 114, 462], 0, 82) == [[82, 307, 447], [969, 114, 462]]\nassert solution.colorBorder([[437, 539, 53],[997, 251, 729],[111, 518, 304],[147, 535, 869],[303, 389, 467]], [303, 389, 467], 1, 539) == [[437, 539, 53], [997, 251, 729], [111, 518, 304], [147, 535, 869], [303, 389, 467]]\nassert solution.colorBorder([[356]], [356], 0, 356) == [[356]]\nassert solution.colorBorder([[702, 259, 708],[823, 896, 489]], [823, 896, 489], 0, 823) == [[702, 259, 708], [823, 896, 489]]\nassert solution.colorBorder([[21, 41, 15]], [21, 41, 15], 1, 41) == [[21, 41, 15]]\nassert solution.colorBorder([[202, 549, 20, 624, 607],[16, 643, 124, 441, 528],[764, 143, 949, 523, 588]], [764, 143, 949, 523, 588], 1, 549) == [[202, 549, 20, 624, 607], [16, 643, 124, 441, 528], [764, 143, 949, 523, 588]]\nassert solution.colorBorder([[191, 280],[208, 712]], [208, 712], 1, 712) == [[191, 280], [208, 712]]\nassert solution.colorBorder([[608, 838, 456, 891, 916, 98]], [608, 838, 456, 891, 916, 98], 2, 456) == [[608, 838, 456, 891, 916, 98]]\nassert solution.colorBorder([[912, 921, 894],[458, 493, 592],[507, 392, 670],[167, 834, 97],[660, 361, 118]], [660, 361, 118], 2, 118) == [[912, 921, 894], [458, 493, 592], [507, 392, 670], [167, 834, 97], [660, 361, 118]]\nassert solution.colorBorder([[694, 564, 845],[160, 551, 153]], [160, 551, 153], 2, 845) == [[694, 564, 845], [160, 551, 153]]\nassert solution.colorBorder([[115, 265, 331, 487, 195, 416],[705, 176, 709, 362, 541, 878],[644, 481, 488, 585, 279, 571],[193, 58, 240, 677, 918, 44]], [193, 58, 240, 677, 918, 44], 0, 115) == [[115, 265, 331, 487, 195, 416], [705, 176, 709, 362, 541, 878], [644, 481, 488, 585, 279, 571], [193, 58, 240, 677, 918, 44]]\nassert solution.colorBorder([[757, 754, 862, 5],[990, 71, 422, 46],[884, 670, 645, 264],[410, 355, 154, 250],[488, 201, 20, 794],[673, 529, 304, 827]], [673, 529, 304, 827], 1, 201) == [[757, 754, 862, 5], [990, 71, 422, 46], [884, 670, 645, 264], [410, 355, 154, 250], [488, 201, 20, 794], [673, 529, 304, 827]]\nassert solution.colorBorder([[997, 941, 702, 200],[750, 220, 455, 102]], [750, 220, 455, 102], 1, 941) == [[997, 941, 702, 200], [750, 220, 455, 102]]\nassert solution.colorBorder([[912, 149, 956, 917, 31, 430],[132, 631, 961, 32, 601, 486],[474, 84, 962, 743, 947, 231]], [474, 84, 962, 743, 947, 231], 5, 486) == [[912, 149, 956, 917, 31, 430], [132, 631, 961, 32, 601, 486], [474, 84, 962, 743, 947, 231]]\nassert solution.colorBorder([[290, 314, 735, 34]], [290, 314, 735, 34], 1, 314) == [[290, 314, 735, 34]]\nassert solution.colorBorder([[685, 297],[415, 729]], [415, 729], 0, 415) == [[685, 297], [415, 729]]\nassert solution.colorBorder([[650, 702, 363, 955, 253, 895],[981, 302, 836, 974, 429, 974]], [981, 302, 836, 974, 429, 974], 1, 302) == [[650, 702, 363, 955, 253, 895], [981, 302, 836, 974, 429, 974]]\nassert solution.colorBorder([[332, 482, 267, 714, 420],[362, 191, 536, 214, 572],[654, 298, 982, 67, 276],[315, 501, 350, 772, 810],[125, 512, 390, 565, 610],[358, 337, 844, 157, 455]], [358, 337, 844, 157, 455], 4, 810) == [[332, 482, 267, 714, 420], [362, 191, 536, 214, 572], [654, 298, 982, 67, 276], [315, 501, 350, 772, 810], [125, 512, 390, 565, 610], [358, 337, 844, 157, 455]]\nassert solution.colorBorder([[807],[299],[207],[922],[558],[190]], [190], 0, 558) == [[807], [299], [207], [922], [558], [190]]\nassert solution.colorBorder([[714, 804, 133, 120, 364, 611],[538, 108, 786, 858, 248, 752]], [538, 108, 786, 858, 248, 752], 3, 858) == [[714, 804, 133, 120, 364, 611], [538, 108, 786, 858, 248, 752]]\nassert solution.colorBorder([[952, 602, 527, 844, 304]], [952, 602, 527, 844, 304], 1, 602) == [[952, 602, 527, 844, 304]]\nassert solution.colorBorder([[409, 642, 331, 329, 200, 532],[82, 422, 400, 805, 590, 279],[108, 800, 684, 378, 569, 774],[400, 584, 436, 530, 837, 189]], [400, 584, 436, 530, 837, 189], 5, 279) == [[409, 642, 331, 329, 200, 532], [82, 422, 400, 805, 590, 279], [108, 800, 684, 378, 569, 774], [400, 584, 436, 530, 837, 189]]\nassert solution.colorBorder([[317, 131, 61, 815, 798],[336, 105, 676, 659, 92]], [336, 105, 676, 659, 92], 2, 61) == [[317, 131, 61, 815, 798], [336, 105, 676, 659, 92]]\nassert solution.colorBorder([[289, 952, 124, 734, 649, 377],[119, 30, 980, 58, 126, 936],[432, 248, 579, 61, 705, 546],[789, 852, 932, 835, 939, 793],[323, 23, 416, 673, 768, 80],[613, 273, 978, 152, 613, 860]], [613, 273, 978, 152, 613, 860], 5, 860) == [[289, 952, 124, 734, 649, 377], [119, 30, 980, 58, 126, 936], [432, 248, 579, 61, 705, 546], [789, 852, 932, 835, 939, 793], [323, 23, 416, 673, 768, 80], [613, 273, 978, 152, 613, 860]]\nassert solution.colorBorder([[841, 899, 939, 500],[885, 236, 577, 66],[172, 651, 440, 790],[614, 76, 894, 518],[618, 709, 787, 723],[274, 911, 195, 678]], [274, 911, 195, 678], 3, 518) == [[841, 899, 939, 500], [885, 236, 577, 66], [172, 651, 440, 790], [614, 76, 894, 518], [618, 709, 787, 723], [274, 911, 195, 678]]\nassert solution.colorBorder([[648, 46, 342],[978, 751, 159]], [978, 751, 159], 0, 648) == [[648, 46, 342], [978, 751, 159]]\nassert solution.colorBorder([[474, 584, 135],[635, 234, 909],[228, 224, 499],[93, 540, 370]], [93, 540, 370], 2, 370) == [[474, 584, 135], [635, 234, 909], [228, 224, 499], [93, 540, 370]]\nassert solution.colorBorder([[833, 890, 446, 55],[543, 571, 802, 986],[99, 40, 74, 850]], [99, 40, 74, 850], 3, 850) == [[833, 890, 446, 55], [543, 571, 802, 986], [99, 40, 74, 850]]\nassert solution.colorBorder([[450, 706],[736, 779],[414, 706],[104, 491],[509, 832],[216, 22]], [216, 22], 0, 450) == [[450, 706], [736, 779], [414, 706], [104, 491], [509, 832], [216, 22]]\nassert solution.colorBorder([[803, 709, 471, 624],[345, 420, 845, 415],[982, 484, 587, 103],[993, 333, 133, 587],[507, 727, 457, 104],[262, 724, 412, 572]], [262, 724, 412, 572], 2, 587) == [[803, 709, 471, 624], [345, 420, 845, 415], [982, 484, 587, 103], [993, 333, 133, 587], [507, 727, 457, 104], [262, 724, 412, 572]]\nassert solution.colorBorder([[847, 810, 623, 158],[530, 403, 535, 771],[515, 458, 258, 796]], [515, 458, 258, 796], 1, 458) == [[847, 810, 623, 158], [530, 403, 535, 771], [515, 458, 258, 796]]\nassert solution.colorBorder([[658, 913, 456],[559, 626, 89],[198, 269, 419],[313, 149, 776],[332, 589, 932],[638, 487, 390]], [638, 487, 390], 1, 149) == [[658, 913, 456], [559, 626, 89], [198, 269, 419], [313, 149, 776], [332, 589, 932], [638, 487, 390]]\nassert solution.colorBorder([[209, 845, 295, 471],[923, 436, 985, 38]], [923, 436, 985, 38], 2, 295) == [[209, 845, 295, 471], [923, 436, 985, 38]]\nassert solution.colorBorder([[391, 326, 807],[554, 496, 698],[544, 93, 723],[474, 159, 576],[854, 761, 110]], [854, 761, 110], 2, 723) == [[391, 326, 807], [554, 496, 698], [544, 93, 723], [474, 159, 576], [854, 761, 110]]\nassert solution.colorBorder([[974, 183, 864, 775, 223]], [974, 183, 864, 775, 223], 3, 775) == [[974, 183, 864, 775, 223]]\nassert solution.colorBorder([[46, 532, 940, 248, 969, 924],[672, 924, 280, 631, 755, 901],[835, 629, 704, 178, 557, 346],[474, 675, 299, 692, 86, 83],[464, 291, 780, 553, 709, 875],[466, 264, 350, 34, 319, 340]], [466, 264, 350, 34, 319, 340], 3, 631) == [[46, 532, 940, 248, 969, 924], [672, 924, 280, 631, 755, 901], [835, 629, 704, 178, 557, 346], [474, 675, 299, 692, 86, 83], [464, 291, 780, 553, 709, 875], [466, 264, 350, 34, 319, 340]]\nassert solution.colorBorder([[943, 309, 273],[565, 560, 166]], [565, 560, 166], 0, 565) == [[943, 309, 273], [565, 560, 166]]\nassert solution.colorBorder([[212],[620],[584],[257],[207]], [207], 0, 257) == [[212], [620], [584], [257], [207]]\nassert solution.colorBorder([[487, 296, 381, 375, 41],[538, 149, 127, 536, 441],[319, 693, 348, 477, 556],[308, 540, 115, 368, 346],[957, 533, 891, 716, 789],[89, 4, 170, 905, 652]], [89, 4, 170, 905, 652], 2, 348) == [[487, 296, 381, 375, 41], [538, 149, 127, 536, 441], [319, 693, 348, 477, 556], [308, 540, 115, 368, 346], [957, 533, 891, 716, 789], [89, 4, 170, 905, 652]]\nassert solution.colorBorder([[175, 232, 285]], [175, 232, 285], 1, 232) == [[175, 232, 285]]\nassert solution.colorBorder([[685, 746, 568],[168, 49, 519],[702, 899, 75],[971, 664, 546]], [971, 664, 546], 1, 664) == [[685, 746, 568], [168, 49, 519], [702, 899, 75], [971, 664, 546]]\nassert solution.colorBorder([[574]], [574], 0, 574) == [[574]]\nassert solution.colorBorder([[974, 456, 670],[182, 84, 30],[283, 169, 700]], [283, 169, 700], 2, 30) == [[974, 456, 670], [182, 84, 30], [283, 169, 700]]\nassert solution.colorBorder([[912, 912, 971, 957, 350, 417],[817, 5, 793, 332, 238, 313],[849, 44, 975, 59, 285, 453]], [849, 44, 975, 59, 285, 453], 4, 350) == [[912, 912, 971, 957, 350, 417], [817, 5, 793, 332, 238, 313], [849, 44, 975, 59, 285, 453]]\nassert solution.colorBorder([[128, 498],[220, 816],[969, 309],[669, 542],[308, 191]], [308, 191], 0, 969) == [[128, 498], [220, 816], [969, 309], [669, 542], [308, 191]]\nassert solution.colorBorder([[171, 91, 132, 717],[887, 819, 833, 905],[229, 240, 679, 789],[857, 837, 614, 731],[562, 240, 795, 718]], [562, 240, 795, 718], 3, 905) == [[171, 91, 132, 717], [887, 819, 833, 905], [229, 240, 679, 789], [857, 837, 614, 731], [562, 240, 795, 718]]\nassert solution.colorBorder([[323, 297, 216, 502, 812],[136, 1, 891, 521, 411],[15, 512, 775, 61, 727],[185, 464, 611, 611, 436],[770, 805, 658, 100, 471]], [770, 805, 658, 100, 471], 3, 61) == [[323, 297, 216, 502, 812], [136, 1, 891, 521, 411], [15, 512, 775, 61, 727], [185, 464, 611, 611, 436], [770, 805, 658, 100, 471]]\nassert solution.colorBorder([[575, 702, 136, 711],[139, 104, 227, 977],[943, 97, 480, 764],[795, 64, 353, 872],[504, 173, 929, 481]], [504, 173, 929, 481], 0, 575) == [[575, 702, 136, 711], [139, 104, 227, 977], [943, 97, 480, 764], [795, 64, 353, 872], [504, 173, 929, 481]]\nassert solution.colorBorder([[703, 164],[749, 189],[207, 529],[618, 745]], [618, 745], 1, 189) == [[703, 164], [749, 189], [207, 529], [618, 745]]\nassert solution.colorBorder([[763],[68],[533],[847]], [847], 0, 763) == [[763], [68], [533], [847]]\nassert solution.colorBorder([[611, 59, 49, 49],[137, 489, 681, 46],[243, 751, 300, 587]], [243, 751, 300, 587], 2, 49) == [[611, 59, 49, 49], [137, 489, 681, 46], [243, 751, 300, 587]]\nassert solution.colorBorder([[877, 820]], [877, 820], 1, 820) == [[877, 820]]\nassert solution.colorBorder([[170, 25, 517, 764]], [170, 25, 517, 764], 0, 170) == [[170, 25, 517, 764]]\nassert solution.colorBorder([[621, 427, 875, 408, 34, 945],[320, 798, 646, 606, 353, 706],[362, 320, 756, 579, 310, 513],[499, 52, 606, 90, 759, 447],[470, 305, 799, 606, 779, 523],[900, 392, 10, 234, 69, 568]], [900, 392, 10, 234, 69, 568], 1, 392) == [[621, 427, 875, 408, 34, 945], [320, 798, 646, 606, 353, 706], [362, 320, 756, 579, 310, 513], [499, 52, 606, 90, 759, 447], [470, 305, 799, 606, 779, 523], [900, 392, 10, 234, 69, 568]]\nassert solution.colorBorder([[228, 912, 576, 3],[838, 979, 701, 402]], [838, 979, 701, 402], 3, 402) == [[228, 912, 576, 3], [838, 979, 701, 402]]\nassert solution.colorBorder([[565]], [565], 0, 565) == [[565]]\nassert solution.colorBorder([[923, 21, 10],[427, 866, 791],[712, 886, 653],[297, 928, 717]], [297, 928, 717], 1, 21) == [[923, 21, 10], [427, 866, 791], [712, 886, 653], [297, 928, 717]]\nassert solution.colorBorder([[346, 696, 536, 422, 573, 668],[752, 186, 360, 485, 447, 428],[218, 37, 414, 661, 536, 648],[367, 608, 25, 972, 765, 418]], [367, 608, 25, 972, 765, 418], 5, 648) == [[346, 696, 536, 422, 573, 668], [752, 186, 360, 485, 447, 428], [218, 37, 414, 661, 536, 648], [367, 608, 25, 972, 765, 418]]\nassert solution.colorBorder([[426, 551],[476, 456],[718, 766],[683, 197],[246, 607],[578, 562]], [578, 562], 0, 718) == [[426, 551], [476, 456], [718, 766], [683, 197], [246, 607], [578, 562]]\nassert solution.colorBorder([[712, 357, 472, 73, 76],[711, 717, 847, 932, 353]], [711, 717, 847, 932, 353], 1, 717) == [[712, 357, 472, 73, 76], [711, 717, 847, 932, 353]]\nassert solution.colorBorder([[86, 796, 43],[383, 853, 815],[652, 7, 868],[727, 517, 990],[512, 959, 635]], [512, 959, 635], 1, 7) == [[86, 796, 43], [383, 853, 815], [652, 7, 868], [727, 517, 990], [512, 959, 635]]\nassert solution.colorBorder([[756, 364, 530, 63],[7, 329, 33, 703],[453, 147, 757, 535]], [453, 147, 757, 535], 0, 7) == [[756, 364, 530, 63], [7, 329, 33, 703], [453, 147, 757, 535]]\nassert solution.colorBorder([[531, 648, 999, 35, 777, 9],[893, 754, 551, 829, 156, 8],[963, 987, 558, 44, 844, 249],[160, 595, 332, 108, 140, 915],[479, 203, 678, 706, 928, 587],[499, 154, 29, 312, 889, 131]], [499, 154, 29, 312, 889, 131], 1, 203) == [[531, 648, 999, 35, 777, 9], [893, 754, 551, 829, 156, 8], [963, 987, 558, 44, 844, 249], [160, 595, 332, 108, 140, 915], [479, 203, 678, 706, 928, 587], [499, 154, 29, 312, 889, 131]]\nassert solution.colorBorder([[277, 851, 774, 537, 695],[398, 264, 743, 957, 239]], [398, 264, 743, 957, 239], 2, 774) == [[277, 851, 774, 537, 695], [398, 264, 743, 957, 239]]\nassert solution.colorBorder([[855, 799, 850, 876],[286, 117, 476, 188]], [286, 117, 476, 188], 2, 476) == [[855, 799, 850, 876], [286, 117, 476, 188]]",
  "inefficient_solution": "class Solution:\n    def colorBorder(self, grid, row, col, color):\n        m, n = len(grid), len(grid[0])\n        def dfs(i, j, c):\n            queue = [(i, j)]\n            vis = [[False]*n for _ in range(m)]\n            while queue:\n                x, y = queue.pop(0)\n                if (x, y) != (row, col):\n                    grid[x][y] = color\n                for a, b in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + a, y + b\n                    if 0 <= nx < m and 0 <= ny < n:\n                        if not vis[nx][ny]:\n                            if grid[nx][ny] == c:\n                                queue.append((nx, ny))\n                            vis[nx][ny] = True\n        vis = [[False]*n for _ in range(m)]\n        dfs(row, col, grid[row][col])\n        return grid",
  "is_python": true
}