{
  "problem_idx": 2054,
  "task_name": "Two Best Non",
  "markdown_description": "\nYou are given a **0-indexed** 2D integer array of `events` where `events[i] = [startTimei, endTimei, valuei]`. The `ith` event starts at `startTimei`and ends at `endTimei`, and if you attend this event, you will receive a value of `valuei`. You can choose **at most** **two** **non-overlapping** events to attend such that the sum of their values is **maximized**.\n\n\nReturn *this **maximum** sum.*\n\n\nNote that the start time and end time is **inclusive**: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time `t`, the next event must start at or after `t + 1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2054.Two%20Best%20Non-Overlapping%20Events/images/picture5.png)\n\n```\n\n**Input:** events = [[1,3,2],[4,5,2],[2,4,3]]\n**Output:** 4\n**Explanation:** Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.\n\n```\n\n**Example 2:**\n\n\n![Example 1 Diagram](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2054.Two%20Best%20Non-Overlapping%20Events/images/picture1.png)\n\n```\n\n**Input:** events = [[1,3,2],[4,5,2],[1,5,5]]\n**Output:** 5\n**Explanation:** Choose event 2 for a sum of 5.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2054.Two%20Best%20Non-Overlapping%20Events/images/picture3.png)\n\n```\n\n**Input:** events = [[1,5,3],[1,5,1],[6,6,5]]\n**Output:** 8\n**Explanation:** Choose events 0 and 2 for a sum of 3 + 5 = 8.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= events.length <= 105`\n* `events[i].length == 3`\n* `1 <= startTimei <= endTimei <= 109`\n* `1 <= valuei <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxTwoEvents(self, events: List[List[int]]) -> int:\n        events.sort()\n        n = len(events)\n        f = [events[-1][2]] * n\n        for i in range(n - 2, -1, -1):\n            f[i] = max(f[i + 1], events[i][2])\n        ans = 0\n        for _, e, v in events:\n            idx = bisect_right(events, e, key=lambda x: x[0])\n            if idx < n:\n                v += f[idx]\n            ans = max(ans, v)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxTwoEvents(self, events):\n        events.sort()\n        n = len(events)\n        f = [events[-1][2]] * n\n        for i in range(n - 2, -1, -1):\n            f[i] = max(f[i + 1], events[i][2])\n        ans = 0\n        for _, e, v in events:\n            idx = bisect_right(events, e, key=lambda x: x[0])\n            if idx < n:\n                v += f[idx]\n            ans = max(ans, v)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random events list\n    events = []\n    for _ in range(random.randint(2, 10)):\n        start_time = random.randint(1, 20)\n        end_time = start_time + random.randint(1, 10)\n        value = random.randint(1, 10)\n        events.append([start_time, end_time, value])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxTwoEvents(events)\n\n    return events, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        events, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxTwoEvents(events) == expected_result\n        print(f\"assert solution.maxTwoEvents({events}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxTwoEvents({events}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxTwoEvents([[5, 14, 6], [9, 18, 4], [10, 16, 4], [19, 20, 2]]) == 8\nassert solution.maxTwoEvents([[5, 14, 8], [7, 11, 8], [7, 17, 4], [10, 17, 1]]) == 8\nassert solution.maxTwoEvents([[13, 22, 8], [14, 16, 5], [15, 23, 3]]) == 8\nassert solution.maxTwoEvents([[1, 2, 8], [1, 4, 6], [7, 8, 3], [7, 13, 5], [9, 14, 5], [16, 24, 1], [18, 27, 1], [18, 27, 7], [19, 21, 5], [19, 27, 5]]) == 15\nassert solution.maxTwoEvents([[4, 7, 4], [9, 17, 6], [11, 14, 7], [17, 20, 8]]) == 15\nassert solution.maxTwoEvents([[3, 7, 10], [9, 18, 4], [13, 15, 5], [18, 19, 4], [19, 25, 8]]) == 18\nassert solution.maxTwoEvents([[4, 9, 10], [4, 14, 10], [9, 10, 6], [15, 20, 9], [15, 21, 1], [16, 26, 1]]) == 19\nassert solution.maxTwoEvents([[5, 9, 6], [12, 20, 2], [13, 14, 5], [15, 23, 7]]) == 13\nassert solution.maxTwoEvents([[6, 10, 9], [6, 11, 3], [7, 16, 4], [9, 14, 4], [15, 22, 1]]) == 10\nassert solution.maxTwoEvents([[2, 5, 5], [3, 11, 7], [6, 16, 1], [9, 18, 6], [13, 18, 3], [17, 20, 5], [17, 26, 1], [18, 23, 9], [19, 22, 10], [20, 29, 2]]) == 17\nassert solution.maxTwoEvents([[2, 3, 2], [2, 10, 2], [3, 6, 3], [4, 12, 7], [5, 6, 4], [10, 18, 8], [13, 14, 6], [13, 14, 7], [19, 28, 5]]) == 14\nassert solution.maxTwoEvents([[5, 8, 4], [5, 10, 9], [16, 22, 7], [18, 24, 5]]) == 16\nassert solution.maxTwoEvents([[2, 6, 8], [5, 9, 2], [7, 14, 8], [11, 12, 3], [11, 13, 8], [11, 14, 1], [12, 17, 5], [13, 16, 2], [16, 19, 6], [18, 21, 7]]) == 16\nassert solution.maxTwoEvents([[5, 6, 1], [7, 16, 8], [10, 16, 3], [11, 12, 2], [15, 16, 4], [18, 21, 5]]) == 13\nassert solution.maxTwoEvents([[1, 11, 7], [3, 13, 4], [7, 9, 3], [8, 17, 1], [11, 20, 7], [13, 20, 2]]) == 10\nassert solution.maxTwoEvents([[3, 10, 8], [8, 9, 9], [11, 19, 2], [16, 24, 1], [16, 24, 6], [17, 21, 4], [17, 25, 5]]) == 15\nassert solution.maxTwoEvents([[4, 9, 9], [7, 9, 3], [13, 20, 4], [15, 16, 6], [15, 23, 10], [17, 25, 4], [17, 26, 3], [18, 19, 3]]) == 19\nassert solution.maxTwoEvents([[2, 4, 3], [11, 13, 1], [17, 22, 4], [18, 20, 6], [19, 29, 3]]) == 9\nassert solution.maxTwoEvents([[3, 6, 7], [4, 6, 7], [4, 8, 8], [4, 10, 5], [4, 11, 9], [9, 14, 2], [10, 11, 5], [10, 20, 1], [16, 26, 5], [18, 25, 2]]) == 14\nassert solution.maxTwoEvents([[2, 9, 4], [3, 9, 8], [6, 10, 3], [12, 16, 4]]) == 12\nassert solution.maxTwoEvents([[12, 18, 7], [17, 20, 5], [19, 27, 8]]) == 15\nassert solution.maxTwoEvents([[3, 6, 7], [14, 15, 9], [17, 20, 1], [17, 24, 4]]) == 16\nassert solution.maxTwoEvents([[1, 7, 3], [1, 11, 9], [3, 12, 7], [4, 14, 7], [8, 14, 2], [9, 13, 4], [9, 17, 1], [10, 20, 7], [11, 19, 10]]) == 13\nassert solution.maxTwoEvents([[1, 2, 5], [7, 8, 3], [10, 13, 4], [11, 17, 2], [12, 17, 4], [12, 21, 1], [17, 19, 1], [18, 22, 3], [18, 28, 8]]) == 13\nassert solution.maxTwoEvents([[9, 15, 3], [17, 21, 4], [17, 25, 5], [18, 27, 9], [20, 29, 4]]) == 12\nassert solution.maxTwoEvents([[12, 13, 10], [12, 20, 10], [16, 20, 5]]) == 15\nassert solution.maxTwoEvents([[4, 13, 8], [6, 15, 7], [8, 18, 10], [12, 16, 3], [12, 22, 5], [15, 19, 4], [19, 21, 5]]) == 15\nassert solution.maxTwoEvents([[17, 22, 6], [19, 23, 4]]) == 6\nassert solution.maxTwoEvents([[2, 12, 4], [4, 9, 5], [7, 9, 7], [7, 9, 8], [10, 14, 6], [11, 21, 1], [12, 16, 9], [15, 19, 10], [20, 28, 3]]) == 18\nassert solution.maxTwoEvents([[3, 4, 2], [12, 13, 7]]) == 9\nassert solution.maxTwoEvents([[1, 2, 9], [1, 11, 9], [9, 14, 5], [10, 14, 8], [13, 23, 6], [14, 16, 10], [17, 26, 7]]) == 19\nassert solution.maxTwoEvents([[1, 4, 8], [3, 9, 1], [6, 12, 6], [8, 14, 6], [11, 18, 5], [20, 27, 10]]) == 18\nassert solution.maxTwoEvents([[1, 8, 6], [10, 17, 2], [12, 20, 1], [14, 20, 3], [15, 25, 4], [17, 24, 8]]) == 14\nassert solution.maxTwoEvents([[3, 10, 7], [9, 17, 4], [17, 27, 4]]) == 11\nassert solution.maxTwoEvents([[1, 5, 4], [5, 12, 8], [6, 7, 8], [8, 12, 10], [8, 15, 7], [11, 15, 8], [12, 14, 2], [15, 20, 7], [15, 24, 5], [16, 25, 2]]) == 18\nassert solution.maxTwoEvents([[2, 10, 2], [4, 8, 5], [9, 16, 1], [12, 17, 7], [12, 17, 10], [17, 26, 4]]) == 15\nassert solution.maxTwoEvents([[4, 14, 8], [7, 14, 5], [7, 17, 4], [13, 14, 9], [13, 19, 1], [15, 16, 7], [15, 24, 9], [17, 18, 6]]) == 18\nassert solution.maxTwoEvents([[1, 2, 7], [1, 6, 8], [2, 4, 9], [4, 6, 7], [7, 8, 4], [11, 12, 6], [12, 16, 9], [12, 22, 4], [16, 23, 6]]) == 18\nassert solution.maxTwoEvents([[1, 8, 7], [3, 5, 2], [6, 15, 6], [7, 13, 9], [7, 14, 1], [13, 22, 4], [13, 23, 10]]) == 17\nassert solution.maxTwoEvents([[2, 12, 1], [8, 11, 9], [11, 21, 4], [12, 17, 1], [15, 18, 1]]) == 10\nassert solution.maxTwoEvents([[4, 11, 7], [8, 11, 5], [8, 16, 7], [11, 14, 7], [12, 15, 1], [12, 17, 3], [13, 15, 8]]) == 15\nassert solution.maxTwoEvents([[4, 9, 4], [8, 9, 5], [10, 12, 7], [17, 26, 10], [19, 25, 10]]) == 17\nassert solution.maxTwoEvents([[2, 5, 6], [5, 11, 6], [7, 12, 2], [8, 13, 8], [10, 16, 7], [14, 16, 5], [14, 17, 4], [14, 23, 8], [17, 19, 4]]) == 16\nassert solution.maxTwoEvents([[12, 20, 3], [15, 25, 3], [16, 26, 1], [18, 22, 9]]) == 9\nassert solution.maxTwoEvents([[2, 5, 5], [4, 7, 1], [5, 7, 5], [9, 14, 2], [13, 16, 4], [15, 22, 2], [16, 17, 4], [16, 23, 9], [18, 22, 5]]) == 14\nassert solution.maxTwoEvents([[4, 9, 1], [6, 14, 8], [9, 17, 8], [16, 24, 3]]) == 11\nassert solution.maxTwoEvents([[2, 12, 7], [5, 6, 4], [6, 11, 9], [6, 12, 5], [10, 11, 10], [10, 12, 1], [12, 20, 9], [13, 16, 2], [16, 23, 10], [19, 26, 10]]) == 20\nassert solution.maxTwoEvents([[1, 4, 3], [1, 4, 8], [4, 12, 2], [5, 8, 10], [8, 14, 9], [9, 19, 2], [11, 13, 2], [13, 16, 5], [17, 23, 3]]) == 18\nassert solution.maxTwoEvents([[4, 9, 7], [14, 22, 2], [17, 18, 4]]) == 11\nassert solution.maxTwoEvents([[9, 12, 6], [13, 21, 10], [14, 21, 5], [15, 16, 6], [15, 24, 1], [17, 27, 5], [18, 25, 10], [20, 28, 7]]) == 16\nassert solution.maxTwoEvents([[1, 3, 6], [2, 4, 8], [8, 18, 10], [17, 22, 5], [19, 29, 4]]) == 18\nassert solution.maxTwoEvents([[2, 5, 3], [2, 7, 4], [6, 13, 4], [8, 12, 5], [10, 14, 10], [11, 13, 9], [11, 20, 3], [12, 20, 6], [16, 25, 4]]) == 14\nassert solution.maxTwoEvents([[1, 8, 7], [14, 15, 9], [19, 25, 2]]) == 16\nassert solution.maxTwoEvents([[5, 6, 6], [6, 16, 8], [12, 20, 2]]) == 8\nassert solution.maxTwoEvents([[2, 7, 7], [4, 9, 10], [7, 17, 2], [9, 12, 3], [10, 19, 7], [13, 18, 1], [19, 23, 10], [20, 23, 9]]) == 20\nassert solution.maxTwoEvents([[1, 11, 3], [2, 10, 8], [3, 10, 2], [4, 11, 8], [5, 12, 8], [6, 12, 8], [6, 13, 6], [10, 14, 1], [18, 20, 3]]) == 11\nassert solution.maxTwoEvents([[6, 9, 4], [6, 12, 5], [16, 22, 6], [17, 23, 6], [20, 27, 6]]) == 11\nassert solution.maxTwoEvents([[4, 12, 9], [7, 17, 6], [12, 16, 3], [15, 22, 5], [18, 25, 5], [20, 27, 5], [20, 30, 10]]) == 19\nassert solution.maxTwoEvents([[5, 15, 2], [11, 14, 7], [11, 18, 4], [14, 15, 6], [14, 17, 1], [14, 17, 9], [15, 16, 5], [16, 20, 2], [16, 21, 4]]) == 12\nassert solution.maxTwoEvents([[18, 26, 9], [20, 23, 6]]) == 9\nassert solution.maxTwoEvents([[2, 7, 6], [9, 19, 1], [11, 19, 9], [11, 19, 10], [13, 20, 1], [19, 25, 8], [19, 29, 10]]) == 16\nassert solution.maxTwoEvents([[2, 5, 9], [4, 12, 8], [5, 12, 4], [7, 12, 1], [8, 18, 5], [14, 23, 8], [15, 24, 7], [18, 20, 8], [19, 28, 6], [20, 26, 7]]) == 17\nassert solution.maxTwoEvents([[1, 5, 8], [16, 21, 5]]) == 13\nassert solution.maxTwoEvents([[10, 11, 7], [11, 17, 9], [12, 13, 2], [14, 24, 6], [20, 24, 6]]) == 15\nassert solution.maxTwoEvents([[4, 7, 9], [11, 19, 1], [12, 16, 10], [12, 19, 4], [17, 18, 5], [17, 19, 5], [18, 21, 7], [19, 21, 1], [20, 24, 6], [20, 26, 7]]) == 19\nassert solution.maxTwoEvents([[5, 7, 2], [5, 9, 4], [5, 9, 6], [15, 17, 10], [16, 24, 9], [17, 19, 7], [17, 25, 7], [20, 26, 2], [20, 29, 1], [20, 29, 6]]) == 16\nassert solution.maxTwoEvents([[1, 8, 9], [1, 9, 6], [6, 16, 5], [13, 14, 3], [14, 17, 4], [14, 23, 7], [15, 24, 4], [17, 19, 6], [20, 28, 1]]) == 16\nassert solution.maxTwoEvents([[2, 8, 7], [7, 12, 2], [10, 14, 8], [14, 21, 3], [17, 27, 7]]) == 15\nassert solution.maxTwoEvents([[1, 2, 1], [1, 3, 5], [5, 14, 5], [8, 9, 5], [9, 16, 6], [10, 13, 3], [12, 20, 7], [12, 22, 4], [17, 24, 10]]) == 16\nassert solution.maxTwoEvents([[8, 12, 10], [15, 18, 2], [16, 20, 7]]) == 17\nassert solution.maxTwoEvents([[1, 11, 6], [3, 10, 8], [5, 12, 4], [14, 20, 6], [15, 25, 9]]) == 17\nassert solution.maxTwoEvents([[1, 5, 3], [3, 4, 1], [4, 5, 4], [12, 15, 2], [15, 22, 4], [18, 19, 3], [18, 28, 9], [19, 24, 5]]) == 13\nassert solution.maxTwoEvents([[1, 11, 1], [8, 11, 4]]) == 4\nassert solution.maxTwoEvents([[2, 8, 9], [13, 19, 7], [13, 22, 5], [17, 26, 6], [18, 23, 2], [20, 21, 4], [20, 23, 2]]) == 16\nassert solution.maxTwoEvents([[2, 8, 1], [14, 23, 3], [16, 17, 5], [18, 27, 2], [20, 23, 8]]) == 13\nassert solution.maxTwoEvents([[11, 19, 3], [12, 19, 7]]) == 7\nassert solution.maxTwoEvents([[2, 11, 4], [2, 12, 9], [3, 9, 4], [4, 7, 6], [5, 14, 7], [6, 11, 6], [9, 17, 8], [12, 18, 5], [14, 16, 10]]) == 19\nassert solution.maxTwoEvents([[3, 12, 7], [8, 9, 7], [8, 9, 9], [14, 19, 5], [16, 21, 9], [17, 21, 1], [17, 25, 7], [18, 28, 10], [20, 26, 6]]) == 19\nassert solution.maxTwoEvents([[3, 11, 1], [6, 16, 1], [8, 12, 7], [10, 19, 7], [13, 21, 8], [16, 23, 3], [18, 27, 8], [19, 29, 6]]) == 15\nassert solution.maxTwoEvents([[2, 5, 7], [2, 8, 1], [7, 11, 9], [14, 19, 4], [15, 18, 8], [15, 19, 2], [17, 18, 3], [19, 23, 10], [20, 22, 2]]) == 19\nassert solution.maxTwoEvents([[1, 10, 8], [2, 9, 9], [8, 15, 3], [10, 12, 5], [12, 15, 5], [12, 19, 8], [13, 19, 7], [13, 20, 2], [16, 24, 1], [18, 19, 7]]) == 17\nassert solution.maxTwoEvents([[4, 14, 4], [6, 8, 3], [11, 18, 2], [12, 19, 10], [13, 18, 2], [13, 18, 10]]) == 13\nassert solution.maxTwoEvents([[9, 16, 4], [10, 15, 7], [15, 21, 4], [18, 24, 6]]) == 13\nassert solution.maxTwoEvents([[3, 8, 1], [4, 14, 7], [15, 22, 8], [17, 27, 8]]) == 15\nassert solution.maxTwoEvents([[3, 9, 1], [5, 13, 6], [12, 14, 1], [13, 17, 5], [18, 26, 7]]) == 13\nassert solution.maxTwoEvents([[1, 11, 1], [4, 9, 10], [7, 8, 7], [8, 12, 1], [9, 17, 4], [14, 18, 2], [18, 24, 5], [18, 28, 1]]) == 15\nassert solution.maxTwoEvents([[1, 2, 10], [18, 28, 7]]) == 17\nassert solution.maxTwoEvents([[8, 14, 8], [10, 17, 2], [11, 18, 3], [12, 19, 2], [14, 17, 4]]) == 8\nassert solution.maxTwoEvents([[2, 7, 7], [6, 10, 4], [18, 26, 3], [19, 28, 10]]) == 17\nassert solution.maxTwoEvents([[1, 2, 4], [1, 5, 8], [8, 9, 4], [8, 10, 10], [19, 28, 2]]) == 18\nassert solution.maxTwoEvents([[6, 10, 2], [7, 15, 6], [11, 19, 6]]) == 8\nassert solution.maxTwoEvents([[6, 11, 9], [14, 15, 4], [16, 19, 1]]) == 13\nassert solution.maxTwoEvents([[6, 15, 8], [14, 21, 6], [18, 22, 7], [18, 25, 3]]) == 15\nassert solution.maxTwoEvents([[4, 8, 2], [6, 16, 7], [12, 13, 7], [19, 22, 10], [19, 25, 6]]) == 17\nassert solution.maxTwoEvents([[2, 4, 5], [4, 12, 10], [5, 14, 4], [8, 11, 2], [10, 15, 7], [10, 20, 4], [12, 20, 7], [17, 25, 6], [20, 29, 8]]) == 18\nassert solution.maxTwoEvents([[2, 5, 4], [17, 19, 3]]) == 7\nassert solution.maxTwoEvents([[5, 6, 2], [5, 9, 6], [9, 19, 7], [10, 12, 5], [13, 14, 10]]) == 16\nassert solution.maxTwoEvents([[5, 15, 4], [6, 13, 1], [7, 10, 1], [7, 12, 7], [18, 28, 5], [19, 20, 6]]) == 13\nassert solution.maxTwoEvents([[10, 19, 7], [15, 22, 7], [18, 22, 4], [19, 26, 3], [19, 29, 2], [20, 24, 2]]) == 9\nassert solution.maxTwoEvents([[5, 12, 4], [6, 9, 7], [13, 17, 4], [14, 18, 5], [14, 19, 4], [14, 21, 7], [16, 23, 4], [17, 24, 6], [19, 27, 7], [19, 28, 1]]) == 14",
  "inefficient_solution": "class Solution:\n    def maxTwoEvents(self, events: List[List[int]]) -> int:\n        n = len(events)\n        events_copy = []\n        for _ in range(n * 5):\n            events_copy.extend(events)\n        events_copy.sort()\n        f = [0] * (n * 4)\n        for _ in range(4):\n            for i in range(n * 4):\n                f[i] = events_copy[i][2]\n            for i in range(n * 4 - 2, -1, -1):\n                f[i] = max(f[i + 1], events_copy[i][2])\n        ans = 0\n        for i in range(n * 4):\n            _, e, v = events_copy[i]\n            idx = self.bisect_right(events_copy, e, key=lambda x: x[0])\n            if idx < n * 4:\n                v += f[idx]\n            ans = max(ans, v)\n        return ans\n\n    def bisect_right(self, a, x, key):\n        lo, hi = 0, len(a)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if key(a[mid]) < x:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo",
  "is_python": true
}