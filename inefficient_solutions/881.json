{
  "problem_idx": 881,
  "task_name": "Boats to Save People",
  "markdown_description": "\nYou are given an array `people` where `people[i]` is the weight of the `ith` person, and an **infinite number of boats** where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.\n\n\nReturn *the minimum number of boats to carry every given person*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** people = [1,2], limit = 3\n**Output:** 1\n**Explanation:** 1 boat (1, 2)\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** people = [3,2,2,1], limit = 3\n**Output:** 3\n**Explanation:** 3 boats (1, 2), (2) and (3)\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** people = [3,5,3,4], limit = 5\n**Output:** 4\n**Explanation:** 4 boats (3), (3), (4), (5)\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= people.length <= 5 * 104`\n* `1 <= people[i] <= limit <= 3 * 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        ans = 0\n        i, j = 0, len(people) - 1\n        while i <= j:\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n            ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        ans = 0\n        i, j = 0, len(people) - 1\n        while i <= j:\n            if people[i] + people[j] <= limit:\n                i += 1\n            j -= 1\n            ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    people = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random limit\n    limit = random.randint(1, 201)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numRescueBoats(people, limit)\n\n    return people, limit, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        people, limit, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numRescueBoats(people, limit) == expected_result\n        print(f\"assert solution.numRescueBoats({people}, {limit}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numRescueBoats({people}, {limit}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numRescueBoats([20, 31, 38, 54, 75], 117) == 3\nassert solution.numRescueBoats([41, 72, 73], 29) == 3\nassert solution.numRescueBoats([1, 17, 44, 52, 90], 27) == 4\nassert solution.numRescueBoats([22, 29, 37, 43, 73, 98], 95) == 4\nassert solution.numRescueBoats([6, 10, 48, 67, 73], 196) == 3\nassert solution.numRescueBoats([46, 93], 101) == 2\nassert solution.numRescueBoats([1, 42, 45, 52, 55, 58, 70, 72, 76, 96], 71) == 9\nassert solution.numRescueBoats([11, 54, 63, 65, 82, 83, 90], 36) == 7\nassert solution.numRescueBoats([16, 28, 30, 32, 67, 70, 84, 89, 94], 93) == 7\nassert solution.numRescueBoats([33, 68, 72, 87, 90, 92], 95) == 6\nassert solution.numRescueBoats([3, 29, 31, 58, 63, 68, 81], 61) == 5\nassert solution.numRescueBoats([13, 32, 85], 30) == 3\nassert solution.numRescueBoats([23, 25, 47, 70, 96], 17) == 5\nassert solution.numRescueBoats([17, 61, 81], 130) == 2\nassert solution.numRescueBoats([2, 16, 17, 25], 141) == 2\nassert solution.numRescueBoats([11, 42, 76, 83], 48) == 4\nassert solution.numRescueBoats([14, 23, 35, 59, 62, 71, 77, 92], 75) == 6\nassert solution.numRescueBoats([6, 10, 12, 42, 54, 56, 57, 64, 90], 119) == 5\nassert solution.numRescueBoats([7, 30, 31, 43, 45, 59, 66, 84, 100], 174) == 5\nassert solution.numRescueBoats([21, 35, 51, 58, 84], 140) == 3\nassert solution.numRescueBoats([3, 17, 34, 35, 61], 9) == 5\nassert solution.numRescueBoats([4, 17, 56, 71, 76, 77, 87], 40) == 6\nassert solution.numRescueBoats([12, 14, 31, 34, 35, 46, 62, 76, 94, 99], 102) == 6\nassert solution.numRescueBoats([14, 56, 86, 91], 169) == 2\nassert solution.numRescueBoats([5, 11, 34, 53, 62], 166) == 3\nassert solution.numRescueBoats([8, 24, 52, 64, 85], 53) == 4\nassert solution.numRescueBoats([24, 38, 63], 69) == 2\nassert solution.numRescueBoats([1, 11, 14, 46, 54, 68, 75], 118) == 4\nassert solution.numRescueBoats([12, 23, 67, 68, 79], 20) == 5\nassert solution.numRescueBoats([24, 44], 15) == 2\nassert solution.numRescueBoats([13, 63], 152) == 1\nassert solution.numRescueBoats([27, 28, 40, 58, 65, 92, 95, 98, 100], 62) == 8\nassert solution.numRescueBoats([41, 65, 66, 67, 78, 80], 188) == 3\nassert solution.numRescueBoats([2, 5, 10, 29, 35, 47, 56, 74, 87, 88], 71) == 7\nassert solution.numRescueBoats([10, 19, 31, 39, 50, 89, 91], 131) == 4\nassert solution.numRescueBoats([10, 11, 27, 32, 36, 45, 64, 66, 77, 90], 47) == 8\nassert solution.numRescueBoats([12, 17, 29, 83], 148) == 2\nassert solution.numRescueBoats([11, 24, 27, 30, 50, 61, 72, 85, 92], 95) == 6\nassert solution.numRescueBoats([3, 9, 15, 51, 56, 57, 61, 75], 32) == 7\nassert solution.numRescueBoats([5, 8, 42, 53, 66, 83], 132) == 3\nassert solution.numRescueBoats([4, 5, 27, 46, 77, 81, 89, 96, 97], 112) == 6\nassert solution.numRescueBoats([10, 95], 77) == 2\nassert solution.numRescueBoats([23, 93], 110) == 2\nassert solution.numRescueBoats([5, 27, 30, 42, 46, 52, 78], 201) == 4\nassert solution.numRescueBoats([15, 59, 76, 99], 142) == 2\nassert solution.numRescueBoats([4, 66, 94, 95, 100], 39) == 5\nassert solution.numRescueBoats([1, 26, 33, 61, 66, 76, 93], 180) == 4\nassert solution.numRescueBoats([39, 42, 58, 67, 75, 91, 93, 95, 97, 99], 70) == 10\nassert solution.numRescueBoats([3, 16, 18, 24, 38, 49, 65, 76], 16) == 8\nassert solution.numRescueBoats([40, 41, 55, 67, 73, 79, 88, 94], 179) == 4\nassert solution.numRescueBoats([21, 35], 163) == 1\nassert solution.numRescueBoats([80, 90], 89) == 2\nassert solution.numRescueBoats([11, 18, 76], 18) == 3\nassert solution.numRescueBoats([10, 47, 89, 92, 96], 13) == 5\nassert solution.numRescueBoats([1, 6, 20, 22, 28, 30, 35, 58, 94], 67) == 5\nassert solution.numRescueBoats([10, 16, 62, 69], 82) == 2\nassert solution.numRescueBoats([7, 9, 10, 28, 42, 78], 110) == 3\nassert solution.numRescueBoats([15, 19, 62, 73], 115) == 2\nassert solution.numRescueBoats([50, 68, 74, 91], 89) == 4\nassert solution.numRescueBoats([9, 13, 48, 64, 70, 77], 98) == 4\nassert solution.numRescueBoats([2, 3, 26, 49, 55, 77, 80, 88], 131) == 4\nassert solution.numRescueBoats([23, 30, 33, 39, 67, 74, 78, 85, 86, 92], 139) == 6\nassert solution.numRescueBoats([15, 21, 40, 41, 48, 82, 92, 97, 100], 30) == 9\nassert solution.numRescueBoats([4, 17, 19, 23, 26, 78, 87, 91, 97, 99], 26) == 9\nassert solution.numRescueBoats([9, 16, 33, 48, 51, 53, 62, 63, 71, 89], 164) == 5\nassert solution.numRescueBoats([15, 20, 33, 45, 46, 48, 60, 83], 29) == 8\nassert solution.numRescueBoats([15, 36], 101) == 1\nassert solution.numRescueBoats([1, 2, 24, 41, 46, 77, 94, 95], 20) == 7\nassert solution.numRescueBoats([5, 11, 26, 30, 44, 53, 63, 79, 86, 93], 192) == 5\nassert solution.numRescueBoats([28, 38], 157) == 1\nassert solution.numRescueBoats([12, 14, 41, 68, 77], 157) == 3\nassert solution.numRescueBoats([6, 13, 22, 34, 39, 45, 56], 140) == 4\nassert solution.numRescueBoats([2, 4, 5, 6, 26], 9) == 3\nassert solution.numRescueBoats([9, 15, 37, 66, 68, 69, 71, 88], 166) == 4\nassert solution.numRescueBoats([19, 28, 29, 57, 60, 61, 63, 98, 100], 197) == 5\nassert solution.numRescueBoats([13, 29, 61, 63, 77, 79, 98], 76) == 6\nassert solution.numRescueBoats([29, 41, 48, 59, 62, 87, 88, 94], 143) == 4\nassert solution.numRescueBoats([7, 20, 24, 33, 60, 70, 78, 90], 15) == 8\nassert solution.numRescueBoats([13, 27, 31, 49, 50, 63, 79, 84, 98], 200) == 5\nassert solution.numRescueBoats([3, 15, 17, 18, 22, 32, 43, 47, 69, 97], 59) == 6\nassert solution.numRescueBoats([8, 28, 33, 34, 48, 83], 5) == 6\nassert solution.numRescueBoats([17, 20, 27, 30, 33, 37, 50, 51, 87], 61) == 6\nassert solution.numRescueBoats([58, 73, 99], 50) == 3\nassert solution.numRescueBoats([13, 30, 40, 41, 47, 72, 74, 80, 83, 95], 183) == 5\nassert solution.numRescueBoats([7, 27, 30, 33, 35, 36, 57, 65], 35) == 7\nassert solution.numRescueBoats([6, 11, 14, 31, 41, 47], 94) == 3\nassert solution.numRescueBoats([2, 19, 23, 37, 56, 68, 79, 85], 157) == 4\nassert solution.numRescueBoats([7, 10, 21, 24, 32, 57, 67, 79, 87, 94], 47) == 8\nassert solution.numRescueBoats([9, 37, 38, 44, 61, 62, 74, 81, 83, 99], 51) == 9\nassert solution.numRescueBoats([29, 38, 46, 51, 58, 75, 90, 98], 6) == 8\nassert solution.numRescueBoats([14, 15, 60, 95], 21) == 4\nassert solution.numRescueBoats([19, 21, 98], 26) == 3\nassert solution.numRescueBoats([21, 36, 81], 101) == 2\nassert solution.numRescueBoats([2, 34, 77, 96], 179) == 2\nassert solution.numRescueBoats([2, 60, 95], 164) == 2\nassert solution.numRescueBoats([1, 16, 17, 37, 40, 49, 82, 91], 145) == 4\nassert solution.numRescueBoats([7, 42, 46, 51, 66, 80], 16) == 6\nassert solution.numRescueBoats([6, 28, 33, 67, 97], 113) == 3\nassert solution.numRescueBoats([1, 11, 74, 76, 78, 88, 90, 91], 137) == 6\nassert solution.numRescueBoats([5, 18, 25, 49, 58, 60, 100], 158) == 4",
  "inefficient_solution": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people_copy = people[:]  # create a copy of the list\n        people_copy.sort()  # sort the copy\n        ans = 0\n        boats = []\n        current_boat = []\n        for i in range(len(people_copy)):\n            new_boat = False\n            for j in range(len(boats)):\n                if sum(boats[j]) + people_copy[i] <= limit:\n                    current_boat = boats[j] + [people_copy[i]]\n                    boats[j] = current_boat\n                    new_boat = True\n                    break\n            if not new_boat:\n                current_boat = [people_copy[i]]\n                boats.append(current_boat)\n        ans = len(boats)\n        return ans",
  "is_python": true
}