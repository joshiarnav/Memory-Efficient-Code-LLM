{
  "problem_idx": 1182,
  "task_name": "Shortest Distance to Target Color",
  "markdown_description": "\nYou are given an array `colors`, in which there are three colors: `1`, `2` and\u00a0`3`.\n\n\nYou are also given some queries. Each query consists of two integers `i`\u00a0and `c`, return\u00a0the shortest distance between the given index\u00a0`i` and the target color `c`. If there is no solution return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]\n**Output:** [3,0,3]\n**Explanation:** \nThe nearest 3 from index 1 is at index 4 (3 steps away).\nThe nearest 2 from index 2 is at index 2 itself (0 steps away).\nThe nearest 1 from index 6 is at index 3 (3 steps away).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** colors = [1,2], queries = [[0,3]]\n**Output:** [-1]\n**Explanation:** There is no 3 in the array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= colors.length <= 5*10^4`\n* `1 <= colors[i] <= 3`\n* `1\u00a0<= queries.length <= 5*10^4`\n* `queries[i].length == 2`\n* `0 <= queries[i][0] <\u00a0colors.length`\n* `1 <= queries[i][1] <= 3`\n\n\n",
  "canonical_solution": "class Solution:\n    def shortestDistanceColor(\n        self, colors: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        n = len(colors)\n        right = [[inf] * 3 for _ in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            for j in range(3):\n                right[i][j] = right[i + 1][j]\n            right[i][colors[i] - 1] = i\n        left = [[-inf] * 3 for _ in range(n + 1)]\n        for i, c in enumerate(colors, 1):\n            for j in range(3):\n                left[i][j] = left[i - 1][j]\n            left[i][c - 1] = i - 1\n        ans = []\n        for i, c in queries:\n            d = min(i - left[i + 1][c - 1], right[i][c - 1] - i)\n            ans.append(-1 if d > n else d)\n        return ans\n",
  "test_case_generator": "\nimport random\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random colors list\n    colors = random.choices(range(1, 4), k=random.randint(1, 10))\n    \n    # Generate a random number of queries\n    num_queries = random.randint(1, 10)\n    queries = []\n    for _ in range(num_queries):\n        # Generate a random index\n        i = random.randint(0, len(colors) - 1)\n        \n        # Generate a random color\n        c = random.randint(1, 3)\n        \n        queries.append([i, c])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.shortestDistanceColor(colors, queries)\n    \n    return colors, queries, expected_result\n\n# Function to run the generated test cases\ndef run_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        colors, queries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.shortestDistanceColor(colors, queries) == expected_result\n        test_case = f\"assert solution.shortestDistanceColor({colors}, {queries}) == {expected_result}\"\n        print(test_case)\n        test_case_generator_results.append(test_case)\n    return test_case_generator_results\n\n# Generate and run the test cases\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = run_test_cases(num_tests)\n",
  "test_case": "assert solution.shortestDistanceColor([2, 3, 2], [[2, 2], [0, 1], [0, 1]]) == [0, -1, -1]\nassert solution.shortestDistanceColor([2, 2, 1, 3], [[3, 3], [3, 2], [3, 1], [0, 1]]) == [0, 2, 1, 2]\nassert solution.shortestDistanceColor([2, 1], [[0, 2], [1, 2]]) == [0, 1]\nassert solution.shortestDistanceColor([2, 3, 3, 2], [[2, 3], [3, 3], [3, 2]]) == [0, 1, 0]\nassert solution.shortestDistanceColor([1, 1], [[0, 1], [1, 2], [1, 1], [0, 3], [0, 1], [0, 3], [0, 3], [0, 3]]) == [0, -1, 0, -1, 0, -1, -1, -1]\nassert solution.shortestDistanceColor([2, 3, 2], [[0, 2], [2, 3], [0, 3]]) == [0, 1, 1]\nassert solution.shortestDistanceColor([1, 2, 3, 3, 2, 2, 1, 1, 2], [[0, 2], [5, 1], [7, 2], [1, 1], [4, 3], [2, 2], [2, 1], [1, 1], [7, 2], [3, 2]]) == [1, 1, 1, 1, 1, 1, 2, 1, 1, 1]\nassert solution.shortestDistanceColor([3, 3, 1, 3, 1, 1], [[3, 2], [4, 3], [3, 2], [1, 2], [0, 2], [4, 2], [4, 2]]) == [-1, 1, -1, -1, -1, -1, -1]\nassert solution.shortestDistanceColor([2, 2, 1, 2, 3, 1, 2, 2, 2], [[1, 1], [7, 1]]) == [1, 2]\nassert solution.shortestDistanceColor([3], [[0, 2], [0, 3], [0, 1], [0, 1], [0, 2], [0, 2], [0, 2], [0, 1]]) == [-1, 0, -1, -1, -1, -1, -1, -1]\nassert solution.shortestDistanceColor([2], [[0, 1], [0, 2], [0, 3], [0, 3], [0, 3], [0, 1]]) == [-1, 0, -1, -1, -1, -1]\nassert solution.shortestDistanceColor([1, 3, 1, 1, 3, 1, 1, 3], [[4, 2], [2, 1], [6, 1], [0, 2], [5, 3], [4, 2], [6, 2]]) == [-1, 0, 0, -1, 1, -1, -1]\nassert solution.shortestDistanceColor([3, 1, 1, 1, 2, 1], [[4, 3], [3, 1], [2, 2], [4, 2]]) == [4, 0, 2, 0]\nassert solution.shortestDistanceColor([3, 1, 1], [[0, 2], [1, 2], [2, 1], [2, 2], [2, 3], [2, 2], [0, 2], [2, 2], [0, 3], [0, 3]]) == [-1, -1, 0, -1, 2, -1, -1, -1, 0, 0]\nassert solution.shortestDistanceColor([2, 2, 3, 2, 3, 1], [[4, 3]]) == [0]\nassert solution.shortestDistanceColor([2, 3, 2, 2, 3], [[0, 3], [4, 3], [3, 2]]) == [1, 0, 0]\nassert solution.shortestDistanceColor([1], [[0, 1], [0, 1], [0, 2], [0, 1], [0, 3], [0, 2]]) == [0, 0, -1, 0, -1, -1]\nassert solution.shortestDistanceColor([1, 3, 2, 1, 2, 2, 3, 3], [[4, 2], [7, 1], [4, 1], [3, 3], [6, 3], [5, 1], [5, 3], [5, 1]]) == [0, 4, 1, 2, 0, 2, 1, 2]\nassert solution.shortestDistanceColor([1], [[0, 2], [0, 2]]) == [-1, -1]\nassert solution.shortestDistanceColor([2, 1, 2, 1, 3, 3, 2, 1, 3], [[7, 3], [8, 1], [8, 1], [3, 3], [4, 3], [3, 2], [6, 1]]) == [1, 1, 1, 1, 0, 1, 1]\nassert solution.shortestDistanceColor([3, 3, 1, 2, 2], [[3, 1], [2, 3]]) == [1, 1]\nassert solution.shortestDistanceColor([3, 3, 2, 2, 1, 3, 1, 1], [[2, 1], [3, 1], [4, 1], [4, 1], [5, 2]]) == [2, 1, 0, 0, 2]\nassert solution.shortestDistanceColor([2, 2, 1, 2, 2, 1, 2, 1, 2, 2], [[8, 1], [7, 3], [7, 2], [0, 2], [9, 2], [7, 2], [1, 3], [3, 2], [2, 1]]) == [1, -1, 1, 0, 0, 1, -1, 0, 0]\nassert solution.shortestDistanceColor([3, 1], [[0, 2], [1, 1], [0, 1]]) == [-1, 0, 1]\nassert solution.shortestDistanceColor([1, 3, 1], [[1, 3], [0, 1], [0, 2], [0, 2]]) == [0, 0, -1, -1]\nassert solution.shortestDistanceColor([2, 2, 3], [[2, 3], [2, 2], [2, 2], [0, 3], [0, 1], [1, 1], [1, 1], [2, 3]]) == [0, 1, 1, 2, -1, -1, -1, 0]\nassert solution.shortestDistanceColor([1], [[0, 3], [0, 3], [0, 3], [0, 3], [0, 1], [0, 2], [0, 3], [0, 1], [0, 2], [0, 1]]) == [-1, -1, -1, -1, 0, -1, -1, 0, -1, 0]\nassert solution.shortestDistanceColor([3, 2, 1], [[2, 1], [2, 2], [1, 2]]) == [0, 1, 0]\nassert solution.shortestDistanceColor([1, 2, 2, 3, 3, 2, 2], [[1, 3], [5, 2], [6, 2], [4, 1], [6, 1], [2, 3], [4, 2]]) == [2, 0, 0, 4, 6, 1, 1]\nassert solution.shortestDistanceColor([2, 3, 1, 1, 1, 1, 3, 2, 3], [[7, 2], [8, 1]]) == [0, 3]\nassert solution.shortestDistanceColor([2, 2, 3, 3, 2], [[1, 1], [2, 1], [1, 2], [1, 2], [2, 2], [2, 2], [3, 1], [4, 1]]) == [-1, -1, 0, 0, 1, 1, -1, -1]\nassert solution.shortestDistanceColor([1, 2, 2, 1, 1, 2], [[4, 2], [5, 1], [0, 3]]) == [1, 1, -1]\nassert solution.shortestDistanceColor([1, 3, 3, 2, 2, 1], [[1, 1], [3, 2], [2, 2], [3, 3], [5, 2], [5, 1]]) == [1, 0, 1, 1, 1, 0]\nassert solution.shortestDistanceColor([3, 3, 3, 3, 1, 1, 3, 1, 2], [[3, 1], [1, 3], [0, 2], [8, 2], [8, 3], [7, 3], [1, 3]]) == [1, 0, 8, 0, 2, 1, 0]\nassert solution.shortestDistanceColor([2, 1, 1], [[0, 2], [0, 1]]) == [0, 1]\nassert solution.shortestDistanceColor([1, 1, 3, 1, 1, 1], [[0, 1], [0, 3]]) == [0, 2]\nassert solution.shortestDistanceColor([2, 1, 1, 3], [[2, 2], [2, 1], [3, 1], [3, 3], [2, 1]]) == [2, 0, 1, 0, 0]\nassert solution.shortestDistanceColor([2, 2, 2, 2, 2], [[1, 1], [1, 1], [2, 3], [1, 3], [4, 2], [1, 3]]) == [-1, -1, -1, -1, 0, -1]\nassert solution.shortestDistanceColor([1, 2, 2, 3], [[2, 2], [0, 3], [1, 2]]) == [0, 3, 0]\nassert solution.shortestDistanceColor([1, 3, 3], [[1, 3], [1, 3], [2, 1], [1, 2]]) == [0, 0, 2, -1]\nassert solution.shortestDistanceColor([1, 2, 2, 2, 3, 1, 2, 1], [[3, 1], [2, 3], [3, 1], [3, 2], [2, 2], [4, 3], [0, 1]]) == [2, 2, 2, 0, 0, 0, 0]\nassert solution.shortestDistanceColor([2, 1, 1, 3, 2, 2, 3], [[0, 1], [1, 2], [5, 2], [5, 3], [4, 1], [3, 3], [1, 3], [3, 1]]) == [1, 1, 0, 1, 2, 0, 2, 1]\nassert solution.shortestDistanceColor([3], [[0, 2], [0, 3], [0, 3], [0, 3], [0, 3], [0, 2], [0, 1], [0, 1]]) == [-1, 0, 0, 0, 0, -1, -1, -1]\nassert solution.shortestDistanceColor([3, 1, 3, 3, 1, 1], [[5, 1], [5, 1], [3, 1], [0, 2], [0, 3], [1, 3], [5, 2]]) == [0, 0, 1, -1, 0, 1, -1]\nassert solution.shortestDistanceColor([3, 3, 1, 2], [[2, 3], [2, 3], [2, 1], [2, 2]]) == [1, 1, 0, 1]\nassert solution.shortestDistanceColor([2, 2, 1], [[2, 1], [1, 3], [1, 3], [2, 1]]) == [0, -1, -1, 0]\nassert solution.shortestDistanceColor([3, 3, 3, 3, 3, 2, 1, 3], [[5, 3], [3, 1], [6, 1], [7, 3], [6, 3], [0, 1], [0, 2]]) == [1, 3, 0, 0, 1, 6, 5]\nassert solution.shortestDistanceColor([3, 3, 1, 2, 2], [[3, 1], [3, 3], [0, 2], [4, 3], [3, 1], [2, 1], [2, 3], [1, 1], [0, 3]]) == [1, 2, 3, 3, 1, 0, 1, 1, 0]\nassert solution.shortestDistanceColor([2, 1, 2, 3, 2, 1, 3, 3, 3, 1], [[8, 2], [6, 1], [2, 3], [8, 1]]) == [4, 1, 1, 1]\nassert solution.shortestDistanceColor([3], [[0, 1], [0, 2]]) == [-1, -1]\nassert solution.shortestDistanceColor([3, 3, 3, 3, 2, 2, 2, 3, 2], [[1, 2], [7, 2]]) == [3, 1]\nassert solution.shortestDistanceColor([2, 2, 1, 2, 1], [[0, 3], [3, 2], [0, 1], [2, 2], [4, 1], [2, 2]]) == [-1, 0, 2, 1, 0, 1]\nassert solution.shortestDistanceColor([1, 2, 3, 3, 3, 2, 3, 3, 3], [[2, 1], [6, 1]]) == [2, 6]\nassert solution.shortestDistanceColor([1, 1, 2, 1, 1, 3, 1, 3, 3], [[0, 3], [4, 1], [0, 2], [2, 2], [4, 3], [4, 1], [4, 3], [8, 2], [0, 3], [3, 2]]) == [5, 0, 2, 0, 1, 0, 1, 6, 5, 1]\nassert solution.shortestDistanceColor([3, 1, 3, 3, 3, 1, 3, 1, 1, 1], [[5, 2], [6, 1], [8, 2], [4, 3]]) == [-1, 1, -1, 0]\nassert solution.shortestDistanceColor([1, 3, 1, 1, 1], [[2, 1], [4, 2], [4, 3], [2, 1], [2, 3], [4, 2], [4, 1], [3, 3], [0, 3]]) == [0, -1, 3, 0, 1, -1, 0, 2, 1]\nassert solution.shortestDistanceColor([1, 2, 2, 1, 1, 3, 1], [[2, 3], [6, 2], [5, 3]]) == [3, 4, 0]\nassert solution.shortestDistanceColor([3, 1, 3, 3, 2, 1, 2], [[5, 2], [6, 1], [0, 3], [4, 2], [5, 3], [3, 2]]) == [1, 1, 0, 0, 2, 1]\nassert solution.shortestDistanceColor([1, 3, 3, 3, 2, 1, 1], [[1, 3], [2, 3], [3, 2], [1, 2], [0, 1], [2, 3]]) == [0, 0, 1, 3, 0, 0]\nassert solution.shortestDistanceColor([1], [[0, 2], [0, 1], [0, 2]]) == [-1, 0, -1]\nassert solution.shortestDistanceColor([3, 2, 1, 2, 1, 2, 3, 1, 3, 3], [[8, 1], [2, 1], [3, 2], [0, 1], [4, 2], [5, 3], [7, 2], [2, 1], [8, 1]]) == [1, 0, 0, 2, 1, 1, 2, 0, 1]\nassert solution.shortestDistanceColor([1, 2, 2, 2, 1, 2], [[2, 1], [0, 1], [3, 2], [2, 1], [1, 1], [2, 2]]) == [2, 0, 0, 2, 1, 0]\nassert solution.shortestDistanceColor([3, 1, 2, 3], [[2, 3], [0, 3]]) == [1, 0]\nassert solution.shortestDistanceColor([1, 2, 1], [[0, 3], [1, 1], [2, 2]]) == [-1, 1, 1]\nassert solution.shortestDistanceColor([2], [[0, 3], [0, 2], [0, 2]]) == [-1, 0, 0]\nassert solution.shortestDistanceColor([3, 1, 1, 1], [[3, 1]]) == [0]\nassert solution.shortestDistanceColor([3, 2, 2, 3, 3, 1, 3], [[3, 2], [3, 1], [5, 2], [0, 2], [3, 2], [3, 1], [2, 2]]) == [1, 2, 3, 1, 1, 2, 0]\nassert solution.shortestDistanceColor([1, 3, 1, 1, 2], [[4, 2], [4, 2], [1, 1], [0, 1]]) == [0, 0, 1, 0]\nassert solution.shortestDistanceColor([3, 3, 3, 1, 2, 3, 1], [[0, 3], [2, 1], [1, 3], [6, 1], [4, 3], [3, 1], [4, 2], [6, 1], [5, 1], [5, 2]]) == [0, 1, 0, 0, 1, 0, 0, 0, 1, 1]\nassert solution.shortestDistanceColor([2, 2, 2, 3, 3, 3, 3, 1], [[6, 3], [6, 1], [5, 2], [4, 3], [0, 1], [7, 1]]) == [0, 1, 3, 0, 7, 0]\nassert solution.shortestDistanceColor([3, 2, 1, 2, 3, 3], [[2, 1], [3, 1], [3, 2]]) == [0, 1, 0]\nassert solution.shortestDistanceColor([1, 2, 3, 3, 3, 3, 3, 2, 1, 3], [[6, 1], [2, 3], [7, 2], [0, 3], [1, 3]]) == [2, 0, 0, 2, 1]\nassert solution.shortestDistanceColor([2, 1, 2, 1, 1, 3, 2], [[6, 1], [1, 3]]) == [2, 4]\nassert solution.shortestDistanceColor([3, 3], [[0, 2], [0, 1], [0, 1], [1, 3]]) == [-1, -1, -1, 0]\nassert solution.shortestDistanceColor([3], [[0, 1], [0, 2], [0, 2], [0, 3]]) == [-1, -1, -1, 0]\nassert solution.shortestDistanceColor([3, 3, 3, 3], [[0, 3], [0, 1], [0, 1], [3, 1], [3, 3], [0, 3], [1, 3], [0, 1], [3, 3], [1, 1]]) == [0, -1, -1, -1, 0, 0, 0, -1, 0, -1]\nassert solution.shortestDistanceColor([3, 1, 1, 2], [[3, 3], [0, 2], [0, 3], [1, 3], [2, 2], [0, 1], [0, 3], [0, 3], [0, 3]]) == [3, 3, 0, 1, 1, 1, 0, 0, 0]\nassert solution.shortestDistanceColor([2, 2, 1, 3, 3, 2, 1, 1], [[7, 3], [3, 1]]) == [3, 1]\nassert solution.shortestDistanceColor([1, 3], [[1, 2], [0, 3], [0, 3], [1, 1], [0, 3]]) == [-1, 1, 1, 1, 1]\nassert solution.shortestDistanceColor([1, 2, 1, 3, 1, 3, 3, 2], [[3, 2], [4, 2], [1, 2], [6, 2], [4, 1], [5, 2], [6, 3], [0, 3]]) == [2, 3, 0, 1, 0, 2, 0, 3]\nassert solution.shortestDistanceColor([2, 3, 1, 1, 2], [[3, 2], [4, 2], [2, 3], [2, 3], [2, 3], [4, 3], [3, 3], [1, 1]]) == [1, 0, 1, 1, 1, 3, 2, 1]\nassert solution.shortestDistanceColor([1, 1, 3, 1, 3, 1], [[4, 3], [1, 2], [4, 3], [5, 2], [0, 2]]) == [0, -1, 0, -1, -1]\nassert solution.shortestDistanceColor([3, 3], [[1, 2], [0, 2], [0, 2], [0, 2], [1, 1], [1, 1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.shortestDistanceColor([1, 3, 3, 1, 2, 3, 3, 2, 2], [[0, 1], [2, 2], [4, 2], [6, 3]]) == [0, 2, 0, 0]\nassert solution.shortestDistanceColor([2, 2, 3, 3, 3, 2], [[5, 1], [5, 3], [0, 2], [0, 1], [0, 3]]) == [-1, 1, 0, -1, 2]\nassert solution.shortestDistanceColor([2, 2, 1, 3, 3], [[3, 2], [2, 3], [4, 2], [1, 1], [2, 1], [2, 2], [0, 2], [4, 1], [3, 1], [3, 2]]) == [2, 1, 3, 1, 0, 1, 0, 2, 1, 2]\nassert solution.shortestDistanceColor([1, 2, 3, 3, 3, 2, 3, 2, 1], [[0, 1], [4, 2], [3, 3], [4, 1], [7, 3], [5, 2], [8, 3], [4, 2], [3, 3], [8, 3]]) == [0, 1, 0, 4, 1, 0, 2, 1, 0, 2]\nassert solution.shortestDistanceColor([1, 2, 2, 2, 3], [[2, 1], [2, 2]]) == [2, 0]\nassert solution.shortestDistanceColor([2, 2, 2, 1, 2, 2, 2, 1], [[1, 3], [0, 1], [7, 1], [1, 3], [3, 2], [4, 1], [4, 2], [7, 2]]) == [-1, 3, 0, -1, 1, 1, 0, 1]\nassert solution.shortestDistanceColor([2, 2, 3, 1, 2, 2, 3], [[2, 1], [3, 2], [6, 1], [5, 1], [0, 2], [0, 1], [1, 2]]) == [1, 1, 3, 2, 0, 3, 0]\nassert solution.shortestDistanceColor([1, 2, 3, 3, 2, 3, 2, 1], [[3, 2], [5, 3], [2, 2], [4, 3], [7, 3], [2, 3], [7, 1], [4, 2], [5, 2]]) == [1, 0, 1, 1, 2, 0, 0, 0, 1]\nassert solution.shortestDistanceColor([2, 3, 1], [[1, 3], [0, 3], [0, 3], [0, 1], [0, 3]]) == [0, 1, 1, 2, 1]\nassert solution.shortestDistanceColor([3, 2, 1, 2, 3, 1], [[3, 1], [5, 2], [0, 2]]) == [1, 2, 1]\nassert solution.shortestDistanceColor([3], [[0, 3], [0, 2], [0, 2], [0, 1], [0, 1], [0, 3], [0, 3]]) == [0, -1, -1, -1, -1, 0, 0]\nassert solution.shortestDistanceColor([1, 3, 3, 1], [[3, 3], [2, 1], [0, 2], [1, 3], [0, 1], [0, 1], [1, 3], [0, 3], [3, 1], [1, 3]]) == [1, 1, -1, 0, 0, 0, 0, 1, 0, 0]\nassert solution.shortestDistanceColor([3, 3, 3, 2], [[3, 3], [1, 1]]) == [1, -1]\nassert solution.shortestDistanceColor([1, 1, 3, 3, 1, 3, 2, 1], [[7, 2], [7, 1], [3, 2], [7, 1], [3, 1], [2, 3], [3, 2], [3, 3], [7, 2]]) == [1, 0, 3, 0, 1, 0, 3, 0, 1]\nassert solution.shortestDistanceColor([1, 2, 1, 1, 3, 1, 3], [[5, 3], [4, 3], [6, 3], [0, 1], [6, 3], [0, 1], [2, 1]]) == [1, 0, 0, 0, 0, 0, 0]\nassert solution.shortestDistanceColor([1, 1], [[0, 3]]) == [-1]\nassert solution.shortestDistanceColor([2, 1, 3, 3], [[2, 3], [1, 2], [1, 2]]) == [0, 1, 1]",
  "inefficient_solution": "class Solution:\n    def shortestDistanceColor(self, colors, queries):\n        n = len(colors)\n        right = [[float('inf')] * 3 for _ in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            for j in range(3):\n                right[i][j] = right[i + 1][j]\n            right[i][colors[i] - 1] = i\n        left = [[float('-inf')] * 3 for _ in range(n + 1)]\n        for i, c in enumerate(colors, 1):\n            for j in range(3):\n                left[i][j] = left[i - 1][j]\n            left[i][c - 1] = i - 1\n        ans = []\n        for i, c in queries:\n            d = float('inf')\n            for j in range(i, n):\n                if colors[j] == c:\n                    d = min(d, j - i)\n                    break\n            for j in range(i - 1, -1, -1):\n                if colors[j] == c:\n                    d = min(d, i - j)\n                    break\n            if d > n:\n                ans.append(-1)\n            else:\n                ans.append(d)\n        return ans",
  "is_python": true
}