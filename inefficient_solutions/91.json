{
  "problem_idx": 91,
  "task_name": "Decode Ways",
  "markdown_description": "\nA message containing letters from `A-Z` can be **encoded** into numbers using the following mapping:\n\n\n\n```\n\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\n```\n\nTo **decode** an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `\"11106\"` can be mapped into:\n\n\n* `\"AAJF\"` with the grouping `(1 1 10 6)`\n* `\"KJF\"` with the grouping `(11 10 6)`\n\n\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped into `'F'` since `\"6\"` is different from `\"06\"`.\n\n\nGiven a string `s` containing only digits, return *the **number** of ways to **decode** it*.\n\n\nThe test cases are generated so that the answer fits in a **32-bit** integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"12\"\n**Output:** 2\n**Explanation:** \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"226\"\n**Output:** 3\n**Explanation:** \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"06\"\n**Output:** 0\n**Explanation:** \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 100`\n* `s` contains only digits and may contain leading zero(s).\n\n\n",
  "canonical_solution": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        f, g = 0, 1\n        for i, c in enumerate(s, 1):\n            h = g if c != \"0\" else 0\n            if i > 1 and s[i - 2] != \"0\" and int(s[i - 2 : i]) <= 26:\n                h += f\n            f, g = g, h\n        return g\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        f, g = 0, 1\n        for i, c in enumerate(s, 1):\n            h = g if c != \"0\" else 0\n            if i > 1 and s[i - 2] != \"0\" and int(s[i - 2 : i]) <= 26:\n                h += f\n            f, g = g, h\n        return g\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string containing only digits\n    s = \"\"\n    length = random.randint(1, 10)\n    for _ in range(length):\n        s += str(random.randint(0, 9))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numDecodings(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numDecodings(s) == expected_result\n        print(f\"assert solution.numDecodings('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numDecodings('{s}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numDecodings('8764189') == 2\nassert solution.numDecodings('461') == 1\nassert solution.numDecodings('33071943') == 0\nassert solution.numDecodings('56948') == 1\nassert solution.numDecodings('302690') == 0\nassert solution.numDecodings('55666097') == 0\nassert solution.numDecodings('17203') == 2\nassert solution.numDecodings('05518') == 0\nassert solution.numDecodings('63') == 1\nassert solution.numDecodings('16618166') == 8\nassert solution.numDecodings('4311330975') == 0\nassert solution.numDecodings('9318083') == 0\nassert solution.numDecodings('8008835') == 0\nassert solution.numDecodings('033') == 0\nassert solution.numDecodings('689932') == 1\nassert solution.numDecodings('557636913') == 2\nassert solution.numDecodings('7921') == 2\nassert solution.numDecodings('95651467') == 2\nassert solution.numDecodings('4024541139') == 0\nassert solution.numDecodings('9612') == 2\nassert solution.numDecodings('13180') == 0\nassert solution.numDecodings('1') == 1\nassert solution.numDecodings('2451372503') == 0\nassert solution.numDecodings('0910512') == 0\nassert solution.numDecodings('96593') == 1\nassert solution.numDecodings('60938240') == 0\nassert solution.numDecodings('51') == 1\nassert solution.numDecodings('938215294') == 3\nassert solution.numDecodings('591') == 1\nassert solution.numDecodings('42815') == 2\nassert solution.numDecodings('9338') == 1\nassert solution.numDecodings('66') == 1\nassert solution.numDecodings('18067609') == 0\nassert solution.numDecodings('2330311611') == 0\nassert solution.numDecodings('44450540') == 0\nassert solution.numDecodings('462972933') == 1\nassert solution.numDecodings('337') == 1\nassert solution.numDecodings('7452') == 1\nassert solution.numDecodings('164552260') == 0\nassert solution.numDecodings('75106') == 1\nassert solution.numDecodings('8216943') == 3\nassert solution.numDecodings('23') == 2\nassert solution.numDecodings('49') == 1\nassert solution.numDecodings('49') == 1\nassert solution.numDecodings('306124116') == 0\nassert solution.numDecodings('2') == 1\nassert solution.numDecodings('359494') == 1\nassert solution.numDecodings('59') == 1\nassert solution.numDecodings('915888528') == 2\nassert solution.numDecodings('0385') == 0\nassert solution.numDecodings('994') == 1\nassert solution.numDecodings('527') == 1\nassert solution.numDecodings('953282338') == 2\nassert solution.numDecodings('618') == 2\nassert solution.numDecodings('7') == 1\nassert solution.numDecodings('8017009') == 0\nassert solution.numDecodings('0') == 0\nassert solution.numDecodings('41538') == 2\nassert solution.numDecodings('399591268') == 3\nassert solution.numDecodings('178') == 2\nassert solution.numDecodings('56') == 1\nassert solution.numDecodings('670314') == 0\nassert solution.numDecodings('490089') == 0\nassert solution.numDecodings('31893275') == 2\nassert solution.numDecodings('200') == 0\nassert solution.numDecodings('79432') == 1\nassert solution.numDecodings('89') == 1\nassert solution.numDecodings('406683216') == 0\nassert solution.numDecodings('649') == 1\nassert solution.numDecodings('6594982098') == 1\nassert solution.numDecodings('2820540637') == 0\nassert solution.numDecodings('6771907') == 0\nassert solution.numDecodings('5471319') == 4\nassert solution.numDecodings('65455311') == 2\nassert solution.numDecodings('09958186') == 0\nassert solution.numDecodings('7') == 1\nassert solution.numDecodings('1523') == 4\nassert solution.numDecodings('1') == 1\nassert solution.numDecodings('8175') == 2\nassert solution.numDecodings('1686') == 2\nassert solution.numDecodings('9') == 1\nassert solution.numDecodings('37655') == 1\nassert solution.numDecodings('63604784') == 0\nassert solution.numDecodings('524762891') == 2\nassert solution.numDecodings('1187882') == 3\nassert solution.numDecodings('07766612') == 0\nassert solution.numDecodings('399') == 1\nassert solution.numDecodings('137751') == 2\nassert solution.numDecodings('842642092') == 2\nassert solution.numDecodings('9594044') == 0\nassert solution.numDecodings('8') == 1\nassert solution.numDecodings('1') == 1\nassert solution.numDecodings('7908027') == 0\nassert solution.numDecodings('7253370') == 0\nassert solution.numDecodings('4') == 1\nassert solution.numDecodings('6') == 1\nassert solution.numDecodings('8434755') == 1\nassert solution.numDecodings('56') == 1\nassert solution.numDecodings('05544515') == 0\nassert solution.numDecodings('698') == 1",
  "inefficient_solution": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        if len(s) < 1:\n            return 0\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        for i in range(len(s)):\n            if s[i] != \"0\":\n                dp[i + 1] += dp[i]\n            if i > 0 and int(s[i - 1:i + 1]) <= 26 and s[i - 1] != \"0\":\n                dp[i + 1] += dp[i - 1]\n        return dp[-1]",
  "is_python": true
}