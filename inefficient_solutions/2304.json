{
  "problem_idx": 2304,
  "task_name": "Minimum Path Cost in a Grid",
  "markdown_description": "\nYou are given a **0-indexed** `m x n` integer matrix `grid` consisting of **distinct** integers from `0` to `m * n - 1`. You can move in this matrix from a cell to any other cell in the **next** row. That is, if you are in cell `(x, y)` such that `x < m - 1`, you can move to any of the cells `(x + 1, 0)`, `(x + 1, 1)`, ..., `(x + 1, n - 1)`. **Note** that it is not possible to move from cells in the last row.\n\n\nEach possible move has a cost given by a **0-indexed** 2D array `moveCost` of size `(m * n) x n`, where `moveCost[i][j]` is the cost of moving from a cell with value `i` to a cell in column `j` of the next row. The cost of moving from cells in the last row of `grid` can be ignored.\n\n\nThe cost of a path in `grid` is the **sum** of all values of cells visited plus the **sum** of costs of all the moves made. Return *the **minimum** cost of a path that starts from any cell in the **first** row and ends at any cell in the **last** row.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2304.Minimum%20Path%20Cost%20in%20a%20Grid/images/griddrawio-2.png)\n\n```\n\n**Input:** grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]\n**Output:** 17\n**Explanation:** The path with the minimum possible cost is the path 5 -> 0 -> 1.\n- The sum of the values of cells visited is 5 + 0 + 1 = 6.\n- The cost of moving from 5 to 0 is 3.\n- The cost of moving from 0 to 1 is 8.\nSo the total cost of the path is 6 + 3 + 8 = 17.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]\n**Output:** 6\n**Explanation:** The path with the minimum possible cost is the path 2 -> 3.\n- The sum of the values of cells visited is 2 + 3 = 5.\n- The cost of moving from 2 to 3 is 1.\nSo the total cost of this path is 5 + 1 = 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `2 <= m, n <= 50`\n* `grid` consists of distinct integers from `0` to `m * n - 1`.\n* `moveCost.length == m * n`\n* `moveCost[i].length == n`\n* `1 <= moveCost[i][j] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = grid[0]\n        for i in range(1, m):\n            g = [inf] * n\n            for j in range(n):\n                for k in range(n):\n                    g[j] = min(g[j], f[k] + moveCost[grid[i - 1][k]][j] + grid[i][j])\n            f = g\n        return min(f)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minPathCost(self, grid, moveCost):\n        m, n = len(grid), len(grid[0])\n        f = grid[0]\n        for i in range(1, m):\n            g = [float('inf')] * n\n            for j in range(n):\n                for k in range(n):\n                    g[j] = min(g[j], f[k] + moveCost[grid[i - 1][k]][j] + grid[i][j])\n            f = g\n        return min(f)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random grid\n    m = random.randint(2, 6)\n    n = random.randint(2, 6)\n    grid = [[random.randint(0, m * n - 1) for _ in range(n)] for _ in range(m)]\n\n    # Generate random moveCost\n    moveCost = [[random.randint(1, 100) for _ in range(n)] for _ in range(m * n)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minPathCost(grid, moveCost)\n\n    return grid, moveCost, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, moveCost, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minPathCost(grid, moveCost) == expected_result\n        print(f\"grid = {grid}, moveCost = {moveCost}\")\n        test_case_generator_results.append(f\"assert solution.minPathCost({grid}, {moveCost}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minPathCost([[7, 3, 3], [10, 8, 2], [11, 14, 13], [6, 16, 12], [8, 7, 16], [14, 10, 0]], [[20, 83, 77], [38, 40, 90], [24, 69, 12], [40, 62, 16], [63, 80, 68], [49, 58, 69], [49, 10, 10], [45, 87, 74], [14, 39, 98], [12, 47, 15], [30, 4, 69], [83, 97, 68], [55, 76, 79], [39, 21, 74], [48, 66, 6], [47, 68, 8], [97, 2, 94], [45, 46, 40]]) == 129\nassert solution.minPathCost([[0, 18, 19, 16, 9], [25, 13, 12, 11, 18], [18, 12, 15, 3, 18], [14, 16, 18, 13, 21], [20, 17, 24, 4, 13], [3, 14, 27, 16, 3]], [[2, 72, 91, 24, 17], [40, 15, 80, 15, 37], [50, 12, 45, 10, 74], [30, 93, 84, 64, 57], [81, 7, 92, 9, 18], [47, 68, 3, 39, 12], [40, 73, 80, 39, 48], [88, 28, 6, 29, 42], [85, 35, 47, 36, 93], [93, 98, 88, 46, 46], [74, 24, 65, 81, 1], [54, 69, 9, 82, 70], [99, 62, 90, 7, 60], [11, 56, 77, 29, 82], [80, 95, 12, 15, 70], [71, 97, 40, 34, 82], [41, 47, 47, 65, 65], [39, 76, 44, 9, 50], [21, 80, 82, 28, 57], [81, 6, 11, 1, 42], [65, 59, 75, 33, 99], [75, 3, 5, 8, 31], [13, 80, 4, 28, 95], [63, 5, 53, 71, 33], [88, 75, 52, 37, 27], [72, 44, 52, 71, 58], [34, 73, 55, 47, 98], [50, 13, 51, 29, 42], [54, 65, 35, 97, 69], [10, 11, 65, 35, 10]]) == 136\nassert solution.minPathCost([[15, 1, 12, 4, 17, 13], [11, 7, 13, 13, 5, 2], [3, 6, 0, 0, 15, 13]], [[22, 76, 79, 9, 95, 88], [63, 66, 35, 63, 83, 84], [23, 46, 14, 39, 64, 94], [26, 54, 87, 23, 94, 46], [81, 97, 76, 54, 9, 36], [19, 23, 55, 47, 26, 6], [99, 81, 93, 7, 78, 14], [60, 85, 93, 33, 37, 95], [21, 72, 53, 18, 17, 86], [1, 64, 94, 6, 98, 82], [92, 76, 43, 53, 20, 57], [80, 99, 99, 29, 99, 10], [77, 92, 2, 26, 81, 37], [92, 23, 95, 20, 89, 70], [69, 50, 89, 93, 61, 43], [1, 85, 46, 65, 23, 52], [64, 81, 78, 53, 80, 4], [74, 6, 51, 85, 32, 10]]) == 37\nassert solution.minPathCost([[3, 2], [4, 0], [3, 4]], [[71, 66], [6, 63], [55, 24], [33, 35], [95, 16], [13, 65]]) == 60\nassert solution.minPathCost([[1, 2, 7], [10, 0, 2], [11, 5, 2], [5, 1, 4]], [[86, 88, 20], [47, 80, 13], [20, 37, 85], [8, 76, 74], [27, 82, 31], [26, 48, 78], [74, 59, 79], [67, 78, 34], [68, 73, 61], [42, 2, 100], [24, 88, 42], [60, 58, 67]]) == 86\nassert solution.minPathCost([[3, 0], [2, 2], [5, 0]], [[52, 4], [71, 39], [6, 59], [22, 43], [11, 25], [40, 14]]) == 17\nassert solution.minPathCost([[6, 26, 25, 14, 15, 4], [25, 14, 16, 14, 9, 31], [32, 13, 9, 2, 35, 2], [8, 10, 9, 34, 27, 25], [0, 27, 34, 0, 27, 4], [4, 27, 16, 1, 8, 23]], [[76, 95, 34, 93, 83, 69], [88, 86, 48, 62, 41, 3], [59, 77, 24, 48, 51, 1], [88, 18, 89, 8, 78, 77], [60, 80, 98, 68, 71, 22], [49, 32, 44, 29, 8, 95], [77, 53, 79, 12, 53, 3], [17, 33, 64, 83, 14, 53], [77, 31, 27, 56, 95, 79], [46, 63, 27, 48, 1, 65], [26, 91, 58, 55, 10, 73], [61, 69, 66, 91, 90, 5], [85, 84, 2, 81, 45, 54], [1, 100, 25, 63, 28, 84], [53, 45, 33, 50, 32, 5], [4, 48, 71, 26, 35, 8], [94, 51, 57, 65, 23, 65], [16, 83, 5, 92, 45, 100], [78, 53, 87, 20, 61, 51], [25, 11, 81, 9, 34, 48], [10, 58, 77, 84, 50, 55], [10, 53, 26, 31, 2, 94], [100, 35, 8, 53, 26, 95], [36, 53, 75, 44, 26, 20], [94, 45, 59, 92, 24, 22], [57, 6, 70, 92, 36, 74], [74, 67, 64, 91, 12, 60], [78, 27, 85, 48, 40, 26], [70, 25, 64, 71, 39, 40], [18, 28, 94, 60, 55, 60], [85, 95, 75, 93, 41, 71], [35, 86, 58, 88, 52, 51], [50, 66, 14, 7, 81, 45], [15, 63, 19, 36, 84, 73], [33, 96, 97, 18, 32, 24], [9, 35, 15, 67, 4, 51]]) == 146\nassert solution.minPathCost([[10, 0], [9, 8], [10, 7], [11, 6], [0, 8], [3, 4]], [[82, 73], [19, 52], [34, 54], [90, 12], [42, 1], [9, 66], [61, 51], [23, 88], [61, 42], [46, 86], [31, 9], [82, 16]]) == 180\nassert solution.minPathCost([[6, 12, 25, 13, 27, 21], [26, 18, 26, 14, 14, 18], [32, 3, 14, 0, 8, 16], [20, 4, 32, 17, 10, 2], [19, 8, 5, 3, 9, 19], [0, 3, 3, 11, 16, 23]], [[51, 31, 6, 30, 31, 47], [98, 29, 38, 54, 83, 91], [26, 14, 5, 95, 16, 11], [88, 14, 2, 56, 96, 85], [49, 41, 38, 62, 28, 18], [15, 80, 42, 11, 83, 57], [72, 53, 67, 80, 13, 85], [8, 95, 83, 75, 59, 97], [28, 10, 19, 44, 56, 80], [5, 34, 35, 94, 80, 77], [5, 49, 20, 18, 60, 28], [9, 78, 67, 7, 27, 97], [20, 79, 16, 35, 85, 18], [24, 83, 20, 1, 51, 8], [100, 68, 29, 71, 4, 86], [54, 81, 94, 37, 95, 18], [22, 25, 45, 20, 63, 69], [53, 18, 18, 13, 61, 50], [82, 61, 74, 65, 51, 8], [47, 81, 46, 48, 23, 28], [28, 11, 32, 99, 22, 10], [4, 56, 22, 44, 6, 94], [56, 65, 83, 57, 49, 44], [75, 45, 35, 18, 93, 10], [57, 77, 10, 72, 63, 21], [84, 43, 51, 57, 57, 84], [92, 29, 42, 57, 29, 36], [22, 9, 79, 98, 88, 72], [28, 53, 52, 56, 20, 44], [86, 36, 64, 82, 18, 30], [25, 35, 30, 93, 65, 31], [11, 52, 35, 59, 99, 27], [43, 53, 11, 46, 63, 55], [68, 66, 20, 79, 30, 99], [98, 4, 55, 76, 62, 64], [86, 60, 54, 93, 67, 40]]) == 96\nassert solution.minPathCost([[21, 9, 13, 26, 20], [14, 10, 24, 5, 29], [5, 13, 20, 17, 14], [16, 8, 9, 28, 12], [15, 20, 15, 20, 29], [16, 1, 27, 7, 13]], [[51, 35, 20, 47, 65], [33, 18, 65, 44, 26], [96, 33, 53, 76, 75], [79, 37, 51, 50, 48], [72, 29, 73, 55, 79], [83, 63, 51, 85, 10], [90, 85, 75, 18, 22], [1, 1, 65, 90, 78], [65, 24, 37, 16, 88], [70, 10, 72, 4, 69], [48, 52, 81, 79, 52], [18, 76, 49, 46, 10], [90, 92, 51, 22, 10], [53, 3, 6, 74, 90], [35, 100, 93, 21, 51], [16, 46, 60, 84, 48], [55, 100, 59, 88, 74], [100, 21, 17, 67, 6], [30, 46, 65, 26, 29], [20, 49, 32, 38, 100], [23, 37, 43, 37, 37], [72, 45, 60, 25, 65], [84, 44, 9, 82, 51], [37, 7, 54, 74, 40], [31, 59, 3, 73, 89], [80, 47, 20, 65, 51], [71, 90, 27, 39, 99], [77, 26, 2, 86, 19], [20, 71, 21, 83, 7], [78, 55, 39, 36, 25]]) == 158\nassert solution.minPathCost([[10, 4, 5], [7, 7, 1], [3, 11, 6], [4, 10, 8]], [[10, 21, 98], [75, 46, 95], [41, 92, 33], [89, 41, 29], [31, 92, 36], [96, 35, 48], [68, 25, 27], [37, 8, 65], [25, 87, 68], [42, 32, 54], [8, 87, 21], [54, 67, 82]]) == 102\nassert solution.minPathCost([[9, 1], [9, 7], [1, 6], [9, 9], [3, 7]], [[30, 41], [26, 47], [38, 24], [39, 66], [8, 44], [63, 1], [93, 100], [79, 20], [41, 95], [63, 50]]) == 192\nassert solution.minPathCost([[23, 9, 16, 1], [15, 6, 4, 18], [12, 23, 19, 17], [14, 3, 1, 9], [23, 19, 11, 15], [3, 6, 22, 3]], [[47, 42, 28, 37], [13, 95, 67, 95], [59, 74, 1, 75], [80, 36, 60, 92], [72, 33, 40, 45], [15, 22, 9, 41], [28, 33, 62, 82], [51, 61, 5, 1], [21, 30, 67, 17], [58, 14, 26, 8], [18, 52, 93, 83], [67, 23, 11, 48], [36, 5, 25, 86], [69, 31, 12, 43], [65, 69, 73, 61], [9, 84, 78, 67], [77, 99, 53, 89], [89, 45, 97, 24], [66, 23, 16, 54], [1, 8, 83, 86], [71, 27, 72, 29], [48, 14, 81, 3], [39, 78, 9, 80], [14, 41, 87, 45]]) == 117\nassert solution.minPathCost([[0, 2], [0, 3]], [[60, 5], [60, 95], [87, 84], [93, 50]]) == 8\nassert solution.minPathCost([[2, 3], [0, 2]], [[99, 13], [5, 31], [51, 91], [9, 53]]) == 12\nassert solution.minPathCost([[3, 10, 6, 10], [10, 11, 2, 9], [12, 3, 19, 5], [22, 23, 4, 4], [9, 18, 11, 18], [16, 22, 0, 6]], [[69, 78, 87, 59], [16, 37, 1, 3], [89, 55, 1, 43], [81, 46, 71, 13], [64, 69, 67, 63], [41, 97, 11, 90], [37, 60, 48, 94], [48, 82, 70, 42], [96, 83, 79, 74], [4, 10, 69, 96], [37, 90, 82, 92], [32, 79, 35, 16], [80, 49, 20, 8], [77, 31, 3, 98], [69, 1, 92, 11], [79, 41, 81, 57], [65, 60, 8, 58], [86, 56, 37, 6], [37, 6, 95, 55], [43, 82, 48, 33], [44, 23, 65, 13], [33, 91, 30, 1], [25, 68, 21, 65], [93, 75, 64, 16]]) == 146\nassert solution.minPathCost([[11, 9, 4, 9, 10, 7], [3, 0, 6, 1, 11, 9]], [[60, 8, 77, 54, 29, 5], [62, 53, 15, 26, 56, 25], [60, 94, 92, 65, 77, 72], [39, 10, 32, 76, 27, 45], [44, 33, 90, 63, 66, 78], [46, 53, 90, 33, 38, 97], [67, 95, 18, 98, 58, 53], [42, 61, 52, 70, 89, 90], [8, 47, 62, 92, 1, 12], [46, 10, 65, 81, 99, 60], [90, 81, 58, 66, 76, 34], [96, 18, 97, 79, 1, 86]]) == 19\nassert solution.minPathCost([[5, 4, 3], [2, 5, 1]], [[23, 6, 97], [98, 68, 94], [55, 86, 74], [46, 88, 78], [91, 25, 73], [63, 74, 85]]) == 34\nassert solution.minPathCost([[1, 1], [3, 1]], [[6, 11], [75, 95], [56, 24], [68, 80]]) == 79\nassert solution.minPathCost([[18, 18, 17, 10, 7], [8, 19, 9, 6, 9], [17, 10, 5, 11, 8], [10, 11, 11, 3, 4]], [[41, 83, 70, 17, 40], [91, 21, 45, 30, 82], [22, 19, 73, 64, 88], [36, 50, 62, 5, 4], [16, 29, 100, 51, 100], [14, 14, 55, 16, 80], [19, 100, 6, 86, 34], [83, 31, 77, 12, 56], [94, 11, 32, 46, 95], [72, 26, 15, 85, 100], [94, 44, 53, 97, 65], [16, 67, 26, 63, 89], [90, 76, 96, 28, 87], [24, 48, 65, 41, 59], [39, 33, 26, 98, 13], [27, 37, 67, 52, 22], [87, 80, 30, 26, 46], [12, 64, 41, 51, 72], [56, 11, 39, 22, 95], [85, 8, 32, 76, 7]]) == 55\nassert solution.minPathCost([[10, 1, 2, 9, 0, 10], [5, 4, 7, 6, 10, 10]], [[54, 42, 66, 85, 74, 91], [37, 67, 10, 87, 35, 95], [37, 3, 29, 89, 46, 70], [41, 10, 49, 23, 5, 54], [18, 26, 97, 58, 60, 71], [76, 95, 70, 56, 62, 15], [73, 68, 91, 10, 90, 34], [79, 11, 11, 96, 66, 66], [93, 35, 37, 81, 68, 20], [9, 70, 27, 60, 100, 9], [54, 81, 33, 34, 53, 65], [6, 96, 53, 84, 81, 24]]) == 9\nassert solution.minPathCost([[0, 8, 5], [6, 2, 4], [0, 0, 1]], [[45, 81, 68], [69, 3, 39], [80, 52, 68], [47, 20, 33], [51, 54, 23], [50, 97, 79], [99, 38, 31], [86, 100, 34], [3, 91, 71]]) == 49\nassert solution.minPathCost([[11, 1, 5], [2, 9, 8], [15, 12, 6], [4, 17, 3], [15, 12, 11], [12, 14, 8]], [[79, 95, 61], [9, 81, 69], [3, 42, 65], [68, 93, 98], [5, 54, 39], [20, 8, 45], [33, 100, 1], [62, 2, 55], [11, 38, 60], [85, 56, 55], [50, 71, 55], [8, 99, 37], [55, 21, 27], [35, 27, 67], [70, 51, 99], [80, 39, 75], [16, 59, 6], [23, 79, 23]]) == 140\nassert solution.minPathCost([[13, 3, 3, 10, 19], [19, 18, 12, 10, 26], [28, 10, 9, 3, 2], [4, 15, 9, 9, 25], [19, 19, 23, 6, 26], [9, 3, 11, 6, 26]], [[26, 39, 28, 79, 78], [88, 79, 79, 1, 99], [95, 63, 21, 75, 27], [60, 75, 95, 61, 7], [50, 72, 67, 32, 19], [85, 3, 58, 84, 92], [100, 26, 6, 21, 82], [87, 43, 56, 44, 40], [83, 34, 49, 98, 46], [66, 91, 72, 93, 34], [65, 33, 89, 23, 86], [60, 88, 22, 55, 58], [71, 32, 98, 87, 37], [73, 63, 36, 4, 92], [16, 50, 82, 59, 81], [78, 64, 59, 16, 7], [37, 2, 17, 83, 1], [76, 62, 98, 20, 13], [66, 70, 14, 23, 3], [56, 76, 52, 31, 100], [92, 91, 41, 28, 9], [63, 31, 15, 90, 84], [95, 49, 83, 76, 86], [69, 48, 28, 82, 59], [60, 73, 57, 53, 22], [54, 90, 96, 52, 87], [65, 99, 90, 76, 63], [39, 30, 55, 45, 20], [70, 90, 9, 53, 4], [23, 21, 79, 76, 64]]) == 157\nassert solution.minPathCost([[5, 11, 18, 14], [4, 2, 7, 6], [4, 3, 0, 10], [13, 11, 0, 12], [9, 0, 12, 6]], [[82, 4, 55, 86], [85, 48, 38, 23], [44, 49, 29, 99], [36, 98, 10, 31], [22, 88, 26, 72], [49, 49, 71, 14], [42, 54, 26, 42], [54, 46, 53, 88], [19, 9, 56, 74], [80, 53, 49, 35], [31, 87, 74, 93], [74, 67, 53, 30], [93, 62, 24, 29], [70, 41, 30, 3], [32, 93, 58, 73], [88, 34, 61, 28], [82, 56, 95, 9], [8, 36, 25, 30], [59, 22, 69, 65], [67, 37, 41, 37]]) == 96\nassert solution.minPathCost([[5, 14, 19, 7, 11, 1], [11, 15, 16, 22, 0, 10], [8, 21, 13, 8, 5, 20], [7, 16, 4, 23, 4, 9]], [[75, 4, 99, 33, 10, 42], [51, 81, 85, 32, 51, 55], [79, 67, 63, 72, 60, 33], [85, 65, 84, 34, 37, 51], [36, 16, 73, 54, 19, 74], [29, 63, 31, 80, 89, 50], [28, 71, 15, 5, 66, 7], [10, 98, 92, 59, 35, 99], [81, 12, 25, 97, 8, 74], [80, 49, 41, 62, 53, 22], [61, 88, 94, 77, 44, 68], [28, 89, 88, 10, 46, 22], [33, 28, 56, 78, 90, 77], [63, 96, 86, 66, 54, 62], [54, 30, 51, 66, 62, 59], [91, 20, 17, 42, 99, 45], [36, 53, 47, 88, 11, 12], [55, 46, 9, 47, 20, 89], [87, 32, 17, 6, 89, 49], [57, 20, 73, 81, 52, 68], [3, 71, 70, 51, 53, 26], [43, 78, 10, 6, 74, 80], [64, 91, 34, 61, 37, 37], [95, 29, 2, 51, 78, 19]]) == 58\nassert solution.minPathCost([[6, 1, 1, 3], [7, 6, 6, 3]], [[68, 41, 18, 79], [83, 57, 24, 32], [42, 40, 73, 63], [87, 74, 42, 86], [50, 96, 54, 79], [39, 33, 54, 11], [52, 68, 32, 5], [13, 70, 39, 67]]) == 14\nassert solution.minPathCost([[2, 3, 13], [12, 10, 1], [1, 3, 12], [9, 4, 14], [3, 1, 3]], [[55, 29, 99], [100, 45, 21], [98, 60, 69], [12, 17, 92], [17, 58, 4], [44, 32, 69], [43, 28, 52], [1, 52, 56], [7, 46, 61], [40, 3, 70], [21, 30, 11], [48, 83, 1], [92, 24, 92], [79, 59, 36], [17, 61, 20]]) == 79\nassert solution.minPathCost([[2, 5, 2], [3, 3, 2]], [[17, 99, 79], [3, 16, 90], [84, 94, 83], [62, 42, 36], [38, 31, 58], [21, 100, 77]]) == 29\nassert solution.minPathCost([[0, 6, 5], [1, 1, 1], [0, 0, 2]], [[67, 5, 13], [93, 62, 96], [95, 41, 9], [80, 42, 5], [68, 55, 52], [15, 21, 79], [88, 58, 14], [16, 82, 23], [52, 47, 68]]) == 68\nassert solution.minPathCost([[0, 10, 8, 29, 11], [26, 12, 15, 14, 29], [11, 11, 27, 10, 21], [2, 14, 20, 24, 0], [3, 11, 9, 15, 13], [23, 20, 8, 12, 1]], [[94, 24, 64, 70, 22], [62, 35, 86, 50, 93], [47, 85, 29, 51, 19], [71, 5, 94, 3, 19], [22, 6, 7, 46, 97], [58, 61, 17, 23, 71], [1, 3, 3, 89, 95], [43, 55, 17, 27, 59], [52, 62, 81, 7, 82], [78, 52, 97, 21, 79], [61, 83, 87, 56, 19], [44, 47, 77, 12, 74], [75, 23, 29, 92, 11], [12, 37, 46, 23, 55], [37, 81, 89, 68, 97], [46, 98, 58, 9, 23], [58, 92, 93, 62, 14], [27, 85, 75, 52, 68], [44, 32, 95, 50, 12], [73, 86, 96, 34, 6], [6, 69, 1, 60, 30], [42, 96, 49, 91, 62], [12, 80, 57, 57, 76], [58, 48, 10, 10, 28], [8, 15, 66, 36, 60], [7, 30, 4, 41, 46], [50, 26, 51, 23, 31], [35, 79, 98, 69, 89], [15, 51, 53, 81, 7], [86, 84, 92, 8, 79]]) == 132\nassert solution.minPathCost([[3, 11, 9, 23, 10], [3, 12, 11, 18, 12], [0, 4, 12, 10, 10], [10, 21, 12, 22, 19], [4, 1, 24, 9, 3]], [[99, 29, 74, 66, 100], [41, 20, 27, 91, 89], [26, 24, 11, 99, 65], [58, 16, 66, 93, 8], [45, 10, 30, 41, 75], [74, 74, 99, 14, 18], [32, 50, 50, 47, 81], [99, 54, 6, 37, 29], [32, 24, 15, 85, 26], [87, 94, 99, 75, 46], [47, 78, 10, 70, 67], [26, 67, 41, 79, 61], [80, 39, 87, 92, 68], [51, 45, 18, 14, 98], [10, 8, 100, 65, 50], [64, 17, 85, 99, 62], [59, 2, 61, 92, 32], [81, 64, 45, 28, 51], [98, 16, 25, 30, 8], [38, 13, 79, 15, 35], [27, 12, 92, 35, 56], [4, 62, 99, 50, 45], [81, 83, 27, 70, 91], [31, 32, 29, 96, 95], [64, 44, 47, 90, 62]]) == 99\nassert solution.minPathCost([[7, 1], [7, 3], [1, 5], [1, 6]], [[56, 39], [10, 49], [98, 12], [24, 15], [64, 36], [29, 49], [90, 46], [75, 79]]) == 89\nassert solution.minPathCost([[3, 9, 8], [8, 5, 7], [10, 4, 1], [2, 6, 1]], [[48, 34, 21], [20, 62, 88], [75, 18, 41], [90, 64, 31], [66, 48, 91], [51, 16, 18], [71, 4, 35], [2, 64, 29], [84, 15, 61], [4, 74, 37], [55, 96, 98], [29, 40, 19]]) == 69\nassert solution.minPathCost([[2, 21, 22, 8, 16, 16], [4, 8, 16, 17, 16, 23], [16, 14, 3, 13, 2, 1], [13, 19, 4, 1, 15, 10]], [[83, 64, 91, 58, 75, 46], [74, 47, 73, 70, 96, 86], [28, 69, 35, 38, 37, 67], [62, 70, 29, 62, 66, 90], [10, 65, 41, 80, 22, 97], [36, 34, 14, 20, 88, 36], [45, 43, 13, 86, 31, 33], [34, 76, 54, 29, 39, 33], [54, 23, 86, 62, 72, 31], [53, 22, 55, 69, 18, 82], [7, 16, 12, 5, 70, 87], [74, 86, 13, 71, 33, 82], [74, 61, 90, 84, 30, 81], [10, 52, 30, 32, 16, 73], [91, 12, 31, 97, 21, 99], [21, 14, 85, 23, 55, 1], [29, 52, 77, 90, 12, 16], [92, 68, 69, 54, 18, 88], [5, 63, 19, 90, 49, 55], [15, 81, 78, 40, 31, 79], [90, 52, 94, 58, 23, 58], [23, 74, 64, 58, 8, 39], [24, 23, 53, 19, 52, 68], [26, 10, 31, 42, 68, 2]]) == 86\nassert solution.minPathCost([[0, 3, 1], [8, 7, 3], [7, 3, 4]], [[52, 34, 46], [39, 100, 52], [13, 99, 83], [79, 50, 17], [34, 1, 3], [52, 3, 53], [30, 90, 78], [86, 87, 100], [61, 32, 26]]) == 44\nassert solution.minPathCost([[3, 0, 4, 1], [5, 4, 6, 5]], [[39, 14, 80, 70], [53, 71, 22, 22], [30, 29, 36, 51], [47, 99, 62, 35], [16, 98, 16, 87], [60, 34, 72, 19], [73, 16, 79, 97], [54, 99, 51, 10]]) == 18\nassert solution.minPathCost([[2, 23, 1, 9, 11, 3], [12, 4, 8, 3, 21, 7], [23, 5, 7, 15, 4, 23], [11, 14, 22, 9, 10, 1]], [[2, 61, 94, 60, 67, 86], [62, 65, 29, 72, 87, 3], [21, 68, 49, 10, 44, 44], [84, 41, 64, 9, 1, 18], [44, 22, 12, 32, 18, 84], [23, 74, 84, 54, 42, 52], [56, 53, 69, 78, 89, 7], [65, 49, 86, 13, 32, 72], [20, 29, 19, 54, 29, 35], [12, 26, 8, 37, 36, 71], [31, 17, 63, 32, 2, 9], [65, 34, 17, 59, 11, 78], [22, 76, 57, 85, 67, 12], [5, 25, 62, 37, 70, 13], [50, 4, 99, 59, 70, 65], [52, 25, 83, 10, 73, 55], [15, 84, 94, 96, 85, 47], [19, 81, 23, 34, 77, 47], [9, 57, 14, 45, 54, 62], [2, 41, 30, 60, 85, 50], [5, 42, 1, 2, 1, 57], [13, 30, 86, 59, 94, 73], [42, 52, 58, 18, 46, 47], [23, 77, 50, 82, 94, 45]]) == 48\nassert solution.minPathCost([[18, 15, 15, 11], [17, 9, 0, 10], [18, 3, 12, 12], [1, 0, 17, 0], [19, 0, 12, 9]], [[8, 76, 14, 81], [32, 28, 61, 82], [85, 30, 26, 78], [21, 81, 30, 48], [33, 31, 84, 65], [85, 67, 40, 74], [94, 92, 58, 57], [69, 29, 45, 51], [26, 93, 55, 9], [68, 33, 64, 99], [44, 21, 97, 38], [36, 14, 96, 57], [41, 45, 9, 98], [81, 12, 29, 32], [50, 4, 4, 85], [54, 74, 61, 79], [82, 44, 12, 69], [31, 57, 73, 39], [6, 84, 96, 18], [53, 45, 18, 11]]) == 120\nassert solution.minPathCost([[4, 9, 4, 9, 9], [5, 8, 6, 6, 9]], [[48, 31, 44, 95, 54], [15, 69, 2, 81, 52], [96, 12, 53, 56, 65], [54, 76, 55, 61, 3], [95, 3, 85, 39, 93], [66, 84, 42, 51, 74], [42, 68, 1, 43, 84], [68, 82, 58, 38, 34], [77, 16, 34, 74, 79], [46, 63, 45, 29, 62]]) == 15\nassert solution.minPathCost([[5, 0, 2], [1, 4, 4]], [[99, 61, 43], [100, 90, 71], [58, 95, 97], [17, 40, 27], [88, 25, 78], [100, 38, 55]]) == 47\nassert solution.minPathCost([[14, 6, 1, 14, 10, 10], [4, 8, 17, 12, 16, 0], [0, 2, 8, 17, 9, 12]], [[43, 74, 28, 36, 90, 14], [68, 42, 35, 95, 1, 94], [70, 16, 40, 6, 26, 81], [3, 30, 46, 4, 71, 92], [100, 43, 54, 49, 60, 1], [91, 69, 24, 77, 59, 39], [21, 42, 27, 56, 43, 34], [68, 80, 55, 11, 87, 48], [94, 4, 42, 31, 13, 61], [100, 5, 25, 24, 32, 30], [47, 17, 61, 47, 56, 65], [60, 1, 97, 39, 94, 100], [19, 15, 25, 63, 91, 45], [53, 80, 19, 87, 38, 76], [23, 25, 24, 22, 43, 66], [99, 98, 81, 25, 78, 61], [59, 67, 3, 67, 64, 79], [82, 37, 35, 18, 84, 10]]) == 29\nassert solution.minPathCost([[5, 11, 2, 8], [8, 1, 3, 5], [4, 8, 8, 9]], [[100, 21, 33, 63], [55, 84, 23, 49], [43, 70, 98, 26], [78, 77, 99, 67], [85, 86, 52, 6], [7, 9, 89, 2], [76, 91, 95, 49], [7, 99, 71, 86], [1, 14, 92, 95], [13, 25, 60, 77], [41, 40, 48, 84], [4, 15, 5, 73]]) == 22\nassert solution.minPathCost([[8, 7, 2], [5, 7, 2], [7, 5, 8]], [[20, 62, 3], [72, 75, 47], [26, 56, 95], [58, 32, 42], [45, 10, 4], [39, 27, 75], [77, 29, 88], [44, 53, 7], [14, 38, 26]]) == 49\nassert solution.minPathCost([[1, 21, 13, 9, 20, 17], [0, 13, 9, 9, 11, 20], [15, 8, 20, 16, 12, 31], [26, 5, 5, 18, 7, 23], [21, 6, 32, 27, 5, 0], [17, 17, 21, 12, 27, 15]], [[18, 97, 38, 27, 18, 67], [91, 29, 17, 13, 11, 43], [1, 70, 55, 63, 7, 62], [90, 83, 91, 93, 10, 61], [7, 55, 30, 62, 41, 52], [55, 92, 73, 1, 22, 43], [48, 8, 25, 32, 72, 96], [17, 12, 10, 54, 56, 20], [38, 43, 83, 45, 88, 97], [9, 6, 73, 5, 81, 68], [39, 12, 35, 92, 35, 39], [57, 60, 2, 60, 65, 62], [12, 2, 36, 81, 7, 9], [72, 9, 21, 92, 10, 98], [86, 58, 55, 12, 90, 11], [11, 49, 88, 61, 96, 2], [4, 96, 61, 92, 26, 74], [80, 66, 42, 32, 42, 24], [79, 4, 2, 59, 25, 94], [53, 36, 19, 32, 65, 8], [20, 31, 41, 97, 86, 55], [91, 58, 45, 65, 46, 98], [36, 68, 20, 53, 64, 71], [100, 38, 76, 50, 62, 50], [94, 12, 95, 88, 62, 59], [29, 33, 5, 14, 58, 33], [40, 4, 23, 30, 16, 91], [21, 46, 33, 98, 70, 41], [83, 15, 99, 39, 40, 70], [39, 72, 34, 94, 58, 66], [22, 20, 12, 68, 28, 64], [55, 35, 91, 67, 82, 68], [47, 85, 66, 93, 90, 54], [45, 80, 24, 51, 73, 63], [53, 33, 72, 50, 17, 100], [39, 92, 23, 25, 81, 51]]) == 95\nassert solution.minPathCost([[1, 13, 6], [5, 2, 13], [0, 14, 6], [0, 0, 12], [13, 6, 0]], [[46, 91, 78], [55, 61, 81], [97, 38, 1], [21, 30, 15], [15, 8, 76], [44, 13, 1], [97, 89, 51], [97, 28, 24], [26, 1, 83], [55, 99, 78], [19, 83, 65], [50, 18, 19], [74, 75, 81], [22, 58, 25], [57, 6, 86]]) == 132\nassert solution.minPathCost([[3, 2], [5, 4], [4, 7], [6, 6]], [[9, 5], [3, 2], [57, 31], [33, 1], [56, 5], [70, 44], [5, 2], [37, 60]]) == 63\nassert solution.minPathCost([[8, 4, 1, 14, 1], [3, 14, 1, 10, 6], [10, 5, 5, 9, 6]], [[62, 65, 11, 14, 24], [18, 7, 22, 42, 53], [49, 83, 85, 36, 21], [82, 4, 14, 45, 42], [71, 38, 35, 46, 80], [79, 7, 75, 32, 26], [99, 37, 36, 70, 60], [3, 10, 50, 36, 61], [40, 11, 71, 24, 90], [26, 2, 48, 23, 85], [84, 63, 7, 84, 2], [95, 89, 66, 85, 12], [52, 23, 96, 44, 59], [27, 15, 83, 18, 76], [76, 5, 6, 48, 43]]) == 31\nassert solution.minPathCost([[3, 5], [3, 0], [2, 5]], [[68, 42], [11, 9], [10, 51], [58, 63], [69, 97], [79, 48]]) == 100\nassert solution.minPathCost([[16, 10, 2, 12, 12, 13], [7, 16, 12, 10, 14, 6], [4, 14, 14, 4, 3, 5]], [[41, 31, 86, 80, 16, 52], [52, 21, 36, 55, 55, 14], [63, 59, 27, 83, 85, 20], [14, 61, 20, 88, 54, 87], [67, 31, 48, 79, 6, 91], [36, 28, 43, 81, 48, 99], [32, 39, 21, 39, 81, 11], [70, 18, 96, 69, 3, 3], [18, 76, 14, 12, 37, 83], [33, 11, 31, 61, 71, 44], [26, 31, 83, 69, 54, 32], [77, 80, 65, 38, 10, 14], [17, 31, 5, 88, 9, 82], [52, 34, 19, 55, 90, 84], [24, 52, 11, 25, 60, 99], [77, 76, 49, 97, 91, 82], [50, 86, 4, 88, 45, 45], [2, 69, 96, 94, 12, 75]]) == 41\nassert solution.minPathCost([[7, 3], [6, 7], [1, 0], [4, 3]], [[81, 45], [6, 38], [33, 78], [53, 29], [92, 55], [8, 89], [79, 28], [89, 89]]) == 138\nassert solution.minPathCost([[13, 1, 13, 3], [10, 11, 6, 16], [0, 5, 0, 4], [17, 0, 2, 3], [10, 5, 16, 17]], [[46, 3, 54, 91], [10, 90, 80, 1], [83, 26, 78, 84], [75, 77, 90, 57], [34, 69, 72, 33], [99, 4, 12, 14], [6, 16, 99, 40], [19, 27, 1, 17], [12, 79, 87, 9], [96, 14, 11, 65], [54, 40, 52, 1], [26, 93, 4, 14], [9, 88, 25, 99], [67, 29, 100, 76], [29, 8, 64, 58], [47, 95, 73, 95], [48, 8, 77, 99], [90, 34, 81, 68], [89, 63, 63, 37], [94, 18, 68, 62]]) == 43\nassert solution.minPathCost([[1, 19, 7, 7, 5], [10, 18, 2, 3, 1], [3, 18, 2, 1, 4], [13, 1, 5, 6, 17]], [[93, 43, 67, 42, 13], [58, 37, 5, 35, 12], [46, 68, 6, 82, 17], [93, 59, 92, 83, 44], [57, 75, 5, 70, 83], [74, 40, 94, 35, 16], [86, 22, 88, 74, 95], [41, 92, 33, 27, 46], [70, 91, 46, 54, 63], [74, 42, 52, 86, 14], [37, 78, 85, 60, 44], [47, 56, 63, 13, 10], [56, 36, 82, 29, 16], [93, 40, 92, 85, 47], [87, 66, 94, 17, 64], [77, 54, 34, 82, 20], [80, 76, 91, 98, 72], [37, 2, 98, 60, 85], [37, 40, 21, 28, 38], [33, 31, 75, 58, 87]]) == 27\nassert solution.minPathCost([[6, 3], [0, 5], [2, 3], [5, 2]], [[53, 5], [27, 45], [13, 43], [5, 58], [55, 37], [42, 31], [57, 7], [18, 64]]) == 26\nassert solution.minPathCost([[1, 0, 0], [2, 0, 4]], [[55, 60, 53], [28, 51, 95], [39, 84, 91], [35, 77, 72], [45, 85, 72], [23, 48, 59]]) == 31\nassert solution.minPathCost([[5, 0, 0], [0, 3, 1]], [[27, 79, 17], [53, 51, 64], [95, 99, 68], [43, 56, 32], [45, 51, 49], [60, 51, 18]]) == 18\nassert solution.minPathCost([[30, 2, 17, 22, 1, 13], [34, 31, 6, 9, 10, 3], [3, 26, 32, 10, 31, 0], [12, 29, 16, 27, 17, 22], [29, 25, 23, 34, 1, 35], [21, 0, 30, 21, 24, 9]], [[34, 29, 33, 24, 68, 27], [11, 39, 17, 84, 96, 68], [18, 70, 75, 79, 92, 99], [87, 92, 28, 82, 35, 23], [57, 55, 49, 31, 49, 8], [78, 75, 66, 51, 72, 13], [84, 95, 29, 4, 35, 20], [94, 49, 33, 42, 21, 11], [97, 93, 82, 33, 94, 60], [72, 73, 92, 31, 89, 64], [73, 33, 1, 6, 41, 80], [86, 54, 71, 72, 59, 71], [68, 28, 50, 49, 11, 3], [58, 66, 84, 45, 48, 15], [11, 79, 3, 13, 84, 40], [34, 77, 85, 77, 21, 6], [99, 82, 19, 15, 98, 80], [39, 17, 97, 44, 41, 48], [48, 16, 67, 91, 29, 69], [99, 66, 9, 88, 48, 39], [26, 95, 27, 85, 52, 69], [78, 17, 15, 75, 32, 28], [99, 9, 23, 24, 26, 30], [32, 55, 86, 10, 58, 67], [32, 14, 80, 15, 61, 72], [48, 34, 52, 91, 71, 89], [63, 73, 19, 6, 68, 5], [67, 76, 2, 47, 84, 99], [33, 41, 1, 40, 94, 8], [24, 92, 45, 99, 26, 8], [37, 83, 83, 81, 39, 43], [9, 13, 80, 69, 24, 79], [10, 3, 76, 35, 69, 76], [28, 99, 74, 100, 55, 14], [30, 84, 5, 59, 36, 100], [95, 21, 76, 2, 44, 33]]) == 127\nassert solution.minPathCost([[10, 11], [10, 5], [4, 4], [7, 6], [8, 4], [2, 3]], [[77, 15], [35, 72], [93, 95], [80, 46], [19, 29], [49, 74], [93, 92], [67, 3], [96, 81], [15, 77], [23, 73], [27, 81]]) == 124\nassert solution.minPathCost([[7, 8], [6, 0], [9, 4], [11, 2], [0, 4], [8, 6]], [[86, 6], [80, 33], [11, 45], [44, 41], [2, 39], [84, 85], [3, 16], [52, 39], [32, 4], [70, 18], [60, 79], [76, 90]]) == 86\nassert solution.minPathCost([[5, 1, 5, 3], [3, 4, 7, 0]], [[26, 2, 30, 25], [81, 48, 15, 65], [45, 24, 88, 94], [97, 57, 42, 43], [98, 71, 90, 24], [28, 29, 38, 95], [57, 69, 20, 14], [83, 26, 53, 58]]) == 23\nassert solution.minPathCost([[16, 10, 5, 6], [17, 11, 8, 19], [3, 4, 11, 7], [19, 6, 11, 12], [17, 19, 14, 18]], [[46, 12, 3, 64], [14, 56, 84, 11], [45, 93, 27, 2], [44, 92, 67, 22], [20, 69, 62, 17], [11, 67, 76, 59], [45, 87, 29, 84], [95, 49, 89, 3], [21, 50, 97, 82], [46, 63, 33, 92], [1, 36, 39, 16], [85, 53, 82, 56], [28, 46, 74, 13], [50, 86, 54, 51], [75, 98, 85, 67], [30, 88, 7, 4], [18, 54, 1, 52], [83, 82, 73, 33], [84, 51, 83, 59], [31, 59, 19, 10]]) == 108\nassert solution.minPathCost([[4, 9, 8, 3, 6, 11], [2, 1, 9, 9, 9, 6]], [[67, 31, 82, 73, 70, 100], [17, 23, 93, 40, 71, 55], [20, 74, 85, 67, 51, 50], [92, 74, 38, 70, 93, 45], [94, 89, 95, 32, 57, 47], [56, 83, 36, 33, 10, 80], [20, 76, 60, 46, 36, 80], [98, 80, 17, 27, 67, 2], [75, 46, 12, 29, 14, 45], [78, 75, 23, 60, 78, 39], [24, 1, 97, 67, 45, 15], [25, 75, 65, 46, 10, 28]]) == 28\nassert solution.minPathCost([[1, 5, 0], [6, 9, 3], [9, 1, 17], [4, 17, 2], [5, 14, 17], [4, 0, 16]], [[1, 36, 83], [8, 63, 24], [30, 91, 61], [88, 91, 55], [42, 1, 42], [95, 84, 84], [46, 16, 2], [44, 42, 19], [64, 76, 23], [18, 87, 36], [37, 26, 20], [33, 6, 62], [91, 40, 60], [97, 47, 70], [79, 9, 89], [97, 72, 58], [36, 52, 65], [47, 63, 20]]) == 60\nassert solution.minPathCost([[11, 4, 13, 17, 11], [17, 18, 17, 7, 6], [6, 1, 9, 5, 0], [4, 17, 6, 9, 19]], [[48, 73, 53, 91, 100], [45, 92, 21, 41, 12], [55, 47, 60, 5, 25], [48, 13, 64, 33, 85], [93, 56, 81, 53, 3], [88, 41, 51, 98, 74], [81, 66, 37, 58, 5], [75, 78, 30, 51, 88], [40, 55, 32, 27, 39], [51, 23, 8, 20, 71], [89, 85, 35, 77, 53], [41, 51, 7, 7, 33], [96, 69, 9, 73, 21], [65, 64, 74, 91, 16], [97, 36, 64, 39, 58], [90, 51, 96, 97, 19], [24, 5, 91, 27, 62], [75, 22, 50, 88, 50], [94, 97, 61, 49, 47], [37, 35, 27, 82, 19]]) == 70\nassert solution.minPathCost([[6, 7, 8, 2], [2, 6, 0, 3], [12, 0, 8, 2], [15, 4, 12, 15]], [[43, 66, 83, 11], [49, 81, 87, 11], [47, 64, 69, 81], [10, 88, 67, 73], [68, 2, 85, 77], [26, 74, 20, 96], [20, 85, 59, 2], [72, 19, 2, 8], [100, 10, 8, 21], [22, 88, 13, 25], [19, 73, 31, 78], [41, 68, 91, 84], [52, 61, 28, 88], [57, 72, 4, 95], [19, 27, 35, 19], [4, 8, 24, 66]]) == 73\nassert solution.minPathCost([[4, 7, 4, 5], [3, 0, 1, 5]], [[19, 97, 31, 83], [88, 13, 100, 3], [32, 42, 75, 68], [9, 35, 70, 33], [86, 8, 45, 79], [84, 5, 45, 84], [22, 87, 15, 46], [18, 89, 95, 12]]) == 10\nassert solution.minPathCost([[5, 2, 1], [0, 5, 3]], [[2, 2, 60], [19, 64, 36], [100, 9, 4], [57, 10, 25], [89, 90, 25], [53, 58, 29]]) == 9\nassert solution.minPathCost([[2, 2, 13], [16, 5, 0], [4, 4, 6], [3, 3, 8], [7, 0, 4], [0, 7, 0]], [[82, 14, 97], [20, 1, 77], [63, 16, 62], [41, 1, 33], [85, 48, 40], [14, 100, 9], [84, 27, 30], [99, 92, 83], [22, 84, 76], [24, 90, 21], [99, 55, 76], [4, 77, 95], [33, 20, 37], [55, 98, 78], [53, 92, 29], [39, 80, 5], [62, 69, 59], [67, 22, 9]]) == 90\nassert solution.minPathCost([[6, 10, 12, 11, 6], [2, 11, 1, 3, 10], [6, 2, 14, 4, 13]], [[26, 71, 86, 34, 20], [90, 76, 42, 73, 99], [24, 51, 71, 89, 49], [67, 19, 64, 33, 14], [92, 88, 59, 37, 28], [40, 68, 79, 33, 76], [47, 19, 41, 53, 71], [23, 99, 23, 28, 92], [37, 38, 59, 22, 10], [25, 14, 88, 21, 52], [77, 51, 33, 91, 31], [15, 20, 31, 7, 84], [39, 42, 40, 78, 4], [2, 96, 99, 86, 20], [65, 96, 20, 100, 65]]) == 42\nassert solution.minPathCost([[6, 5, 5, 7], [1, 5, 1, 6]], [[75, 98, 55, 77], [75, 82, 32, 73], [11, 21, 14, 3], [75, 5, 65, 66], [43, 26, 11, 35], [38, 61, 93, 68], [96, 37, 9, 74], [37, 7, 94, 33]]) == 16\nassert solution.minPathCost([[2, 1], [0, 4], [4, 4], [5, 8], [7, 1]], [[98, 1], [44, 37], [82, 65], [82, 7], [53, 70], [51, 74], [6, 37], [16, 24], [35, 67], [64, 55]]) == 166\nassert solution.minPathCost([[2, 1], [3, 0]], [[33, 53], [28, 15], [99, 42], [91, 42]]) == 16\nassert solution.minPathCost([[17, 13, 16, 19, 11], [19, 6, 19, 6, 13], [17, 4, 10, 10, 17], [1, 16, 19, 1, 18]], [[69, 55, 94, 10, 63], [62, 78, 88, 49, 82], [28, 30, 13, 66, 58], [67, 11, 86, 82, 45], [23, 69, 81, 42, 11], [56, 37, 33, 38, 6], [30, 83, 68, 57, 6], [5, 79, 64, 29, 13], [75, 54, 93, 71, 44], [37, 1, 2, 31, 43], [74, 18, 9, 98, 13], [88, 97, 22, 83, 68], [63, 71, 96, 88, 77], [15, 57, 94, 9, 94], [13, 33, 13, 93, 97], [47, 17, 99, 66, 100], [71, 48, 37, 26, 21], [75, 12, 33, 16, 97], [29, 67, 23, 58, 1], [60, 27, 36, 41, 71]]) == 68\nassert solution.minPathCost([[6, 11], [6, 1], [1, 5], [10, 4], [10, 3], [7, 8]], [[82, 66], [98, 30], [49, 31], [82, 54], [82, 2], [72, 99], [24, 69], [71, 85], [59, 95], [96, 10], [11, 18], [81, 35]]) == 162\nassert solution.minPathCost([[3, 2, 2, 0, 4], [9, 9, 7, 1, 7]], [[60, 43, 1, 11, 90], [86, 91, 38, 97, 30], [1, 20, 75, 48, 59], [82, 82, 13, 20, 24], [90, 65, 84, 77, 75], [40, 7, 54, 6, 84], [23, 95, 7, 81, 95], [53, 67, 21, 27, 20], [80, 67, 40, 37, 82], [30, 22, 17, 47, 99]]) == 8\nassert solution.minPathCost([[6, 1, 5, 12, 10, 1], [8, 4, 0, 15, 13, 8], [9, 5, 6, 7, 7, 10]], [[50, 15, 97, 49, 87, 47], [6, 47, 54, 9, 88, 89], [14, 19, 91, 83, 30, 61], [44, 31, 29, 37, 97, 29], [41, 73, 23, 57, 45, 76], [57, 49, 3, 79, 4, 92], [96, 83, 23, 28, 17, 68], [70, 77, 85, 81, 57, 89], [94, 64, 34, 4, 30, 3], [45, 52, 97, 84, 13, 8], [10, 47, 82, 6, 78, 25], [77, 45, 59, 17, 26, 97], [91, 23, 27, 31, 79, 8], [1, 68, 14, 74, 74, 5], [55, 58, 2, 66, 74, 100], [72, 65, 25, 55, 64, 65], [67, 5, 96, 55, 45, 84], [49, 94, 92, 42, 40, 30]]) == 26\nassert solution.minPathCost([[0, 11, 6], [14, 4, 16], [5, 12, 5], [8, 0, 8], [16, 10, 5], [1, 16, 10]], [[23, 32, 4], [90, 59, 58], [30, 41, 42], [69, 87, 11], [61, 89, 91], [73, 57, 68], [98, 75, 89], [51, 57, 46], [11, 42, 55], [3, 46, 65], [15, 17, 2], [51, 62, 51], [85, 56, 47], [84, 61, 45], [32, 74, 100], [24, 1, 51], [5, 25, 1], [73, 25, 61]]) == 128\nassert solution.minPathCost([[15, 26, 16, 12, 1], [24, 20, 4, 18, 19], [3, 12, 24, 1, 13], [23, 11, 18, 6, 12], [24, 16, 7, 16, 14], [15, 9, 19, 11, 26]], [[31, 5, 6, 63, 72], [35, 36, 90, 36, 88], [75, 50, 25, 26, 76], [97, 10, 6, 22, 50], [76, 56, 15, 38, 47], [91, 55, 13, 14, 74], [25, 75, 40, 59, 27], [92, 52, 90, 10, 61], [99, 40, 53, 32, 15], [100, 60, 43, 12, 11], [41, 13, 55, 70, 77], [71, 21, 95, 35, 32], [44, 80, 69, 25, 26], [97, 62, 99, 88, 5], [21, 12, 53, 84, 24], [4, 32, 23, 60, 28], [4, 87, 50, 69, 84], [76, 89, 38, 13, 52], [23, 5, 35, 16, 86], [18, 46, 26, 21, 42], [31, 41, 34, 12, 100], [64, 63, 82, 62, 16], [55, 12, 59, 54, 51], [55, 86, 31, 12, 18], [68, 54, 17, 16, 75], [62, 9, 40, 51, 31], [52, 57, 2, 24, 30], [21, 51, 30, 38, 9], [78, 26, 88, 8, 8], [70, 47, 6, 98, 6]]) == 142\nassert solution.minPathCost([[16, 5, 2, 2, 7, 10], [9, 0, 13, 15, 0, 3], [13, 0, 13, 15, 11, 16]], [[37, 1, 60, 2, 15, 39], [10, 60, 72, 36, 94, 26], [12, 66, 84, 46, 69, 50], [88, 90, 60, 28, 72, 7], [93, 67, 16, 41, 12, 5], [36, 73, 3, 70, 58, 82], [69, 83, 44, 24, 36, 1], [9, 67, 23, 42, 52, 18], [95, 12, 57, 74, 56, 28], [95, 32, 81, 41, 18, 30], [67, 73, 99, 19, 100, 20], [13, 50, 78, 20, 25, 13], [35, 6, 37, 27, 81, 21], [6, 34, 53, 68, 78, 57], [61, 8, 61, 15, 51, 25], [40, 16, 66, 28, 18, 79], [7, 34, 46, 69, 61, 84], [56, 82, 37, 18, 80, 75]]) == 40\nassert solution.minPathCost([[7, 8], [4, 9], [8, 0], [0, 7], [6, 5]], [[6, 16], [51, 92], [22, 3], [66, 86], [78, 97], [75, 66], [12, 7], [83, 57], [87, 30], [65, 8]]) == 73\nassert solution.minPathCost([[19, 12, 0, 5, 8], [19, 19, 11, 2, 16], [16, 5, 13, 18, 0], [0, 18, 19, 16, 7]], [[36, 43, 17, 1, 14], [31, 38, 29, 71, 51], [17, 65, 13, 70, 13], [48, 74, 55, 48, 26], [33, 98, 55, 39, 1], [48, 4, 17, 79, 32], [83, 72, 67, 81, 60], [95, 34, 57, 31, 78], [14, 7, 47, 3, 50], [23, 82, 22, 93, 64], [35, 12, 29, 42, 15], [8, 14, 86, 66, 47], [78, 72, 2, 30, 63], [44, 91, 85, 35, 23], [40, 54, 64, 53, 49], [39, 74, 3, 73, 79], [68, 88, 9, 81, 30], [86, 18, 34, 64, 40], [87, 23, 70, 63, 57], [78, 53, 97, 63, 70]]) == 33\nassert solution.minPathCost([[9, 2, 9, 8, 7], [3, 6, 9, 5, 3]], [[99, 81, 16, 43, 8], [19, 20, 99, 75, 88], [41, 90, 38, 12, 46], [3, 57, 20, 22, 97], [96, 90, 99, 63, 52], [25, 10, 38, 67, 43], [58, 70, 54, 21, 59], [100, 35, 67, 7, 23], [16, 94, 92, 87, 41], [86, 85, 44, 5, 54]]) == 19\nassert solution.minPathCost([[9, 3, 11, 17, 1, 12], [13, 5, 17, 3, 11, 11], [0, 13, 16, 7, 0, 3]], [[59, 88, 59, 56, 85, 84], [72, 63, 1, 32, 35, 46], [38, 14, 76, 39, 15, 66], [48, 82, 38, 86, 74, 76], [86, 34, 46, 56, 48, 6], [92, 56, 51, 35, 63, 41], [13, 100, 18, 74, 38, 42], [72, 14, 16, 91, 27, 99], [52, 90, 61, 82, 17, 12], [67, 35, 8, 31, 46, 44], [72, 67, 95, 77, 77, 91], [95, 12, 99, 68, 90, 95], [22, 65, 74, 42, 1, 36], [43, 30, 44, 30, 91, 64], [95, 4, 56, 70, 6, 14], [80, 86, 82, 97, 38, 57], [29, 67, 15, 38, 83, 67], [23, 53, 46, 68, 68, 74]]) == 42\nassert solution.minPathCost([[8, 6, 13, 3, 16], [18, 10, 12, 29, 25], [29, 28, 24, 25, 11], [20, 11, 11, 14, 4], [24, 15, 10, 1, 24], [8, 22, 26, 15, 2]], [[19, 82, 6, 20, 18], [99, 55, 75, 60, 34], [30, 14, 57, 34, 23], [64, 82, 32, 22, 96], [12, 65, 28, 59, 27], [15, 97, 81, 55, 20], [71, 71, 34, 80, 4], [14, 26, 17, 10, 37], [27, 78, 61, 12, 71], [4, 46, 65, 18, 45], [17, 51, 35, 59, 97], [57, 13, 35, 45, 55], [33, 10, 54, 35, 75], [79, 99, 13, 64, 21], [74, 77, 97, 1, 30], [63, 73, 88, 84, 64], [93, 86, 11, 25, 30], [61, 36, 68, 98, 99], [51, 8, 46, 28, 89], [2, 80, 83, 83, 85], [64, 6, 77, 62, 45], [72, 3, 61, 99, 67], [29, 87, 99, 12, 18], [30, 62, 83, 47, 69], [75, 12, 68, 82, 87], [18, 99, 98, 57, 33], [46, 11, 20, 95, 1], [26, 56, 37, 21, 90], [98, 72, 46, 40, 58], [26, 42, 24, 33, 15]]) == 164\nassert solution.minPathCost([[24, 10, 4, 27, 22, 12], [9, 2, 14, 19, 14, 9], [1, 3, 9, 1, 6, 21], [20, 7, 8, 29, 29, 0], [22, 16, 29, 21, 6, 2]], [[96, 12, 38, 29, 11, 55], [83, 91, 9, 6, 8, 89], [6, 17, 72, 70, 61, 46], [20, 84, 38, 46, 72, 39], [87, 59, 12, 29, 98, 79], [73, 20, 20, 18, 88, 46], [52, 36, 67, 20, 25, 82], [45, 59, 65, 74, 43, 77], [87, 70, 75, 21, 48, 83], [73, 34, 31, 17, 29, 45], [3, 48, 100, 39, 60, 25], [40, 2, 42, 38, 45, 51], [2, 63, 40, 34, 79, 13], [82, 85, 64, 93, 36, 53], [10, 7, 32, 89, 62, 21], [5, 89, 69, 3, 47, 85], [50, 56, 12, 15, 34, 83], [62, 28, 48, 67, 95, 22], [36, 2, 49, 10, 36, 21], [64, 93, 61, 88, 3, 50], [6, 96, 52, 32, 19, 68], [62, 45, 54, 32, 68, 93], [81, 17, 13, 4, 40, 15], [90, 51, 41, 49, 8, 31], [31, 64, 89, 37, 19, 60], [51, 27, 32, 74, 41, 91], [82, 61, 6, 95, 87, 28], [100, 95, 3, 30, 43, 61], [27, 12, 11, 65, 50, 97], [7, 49, 80, 64, 22, 79]]) == 96\nassert solution.minPathCost([[12, 11, 1, 12], [13, 8, 6, 8], [6, 6, 8, 3], [0, 13, 12, 9]], [[86, 48, 79, 43], [15, 29, 56, 2], [10, 59, 60, 36], [21, 96, 42, 2], [10, 14, 41, 6], [51, 61, 87, 16], [72, 100, 43, 58], [98, 70, 22, 72], [83, 93, 61, 32], [28, 46, 62, 18], [41, 72, 28, 82], [88, 69, 62, 74], [70, 73, 33, 24], [54, 45, 73, 81], [16, 59, 64, 7], [51, 7, 14, 91]]) == 57\nassert solution.minPathCost([[0, 14, 18, 15, 5], [3, 5, 5, 8, 9], [3, 15, 16, 12, 11], [17, 19, 16, 15, 17]], [[29, 25, 24, 98, 33], [41, 8, 21, 99, 21], [64, 47, 84, 62, 82], [93, 44, 19, 15, 17], [92, 90, 97, 11, 89], [21, 91, 48, 89, 78], [84, 42, 4, 27, 73], [85, 34, 69, 56, 10], [62, 81, 89, 6, 53], [81, 99, 3, 7, 85], [62, 80, 15, 1, 46], [40, 67, 48, 84, 4], [34, 46, 84, 18, 43], [86, 15, 9, 52, 7], [72, 9, 88, 30, 39], [9, 48, 93, 58, 63], [55, 16, 61, 11, 56], [18, 8, 69, 30, 72], [95, 9, 84, 7, 11], [21, 30, 89, 52, 67]]) == 76\nassert solution.minPathCost([[6, 1, 7, 0], [0, 5, 0, 1]], [[68, 52, 49, 77], [3, 10, 69, 7], [26, 98, 31, 58], [15, 72, 90, 2], [60, 99, 20, 93], [29, 28, 65, 8], [39, 46, 52, 93], [2, 50, 70, 8]]) == 4\nassert solution.minPathCost([[3, 2, 15, 4], [6, 9, 15, 13], [12, 14, 10, 15], [8, 5, 2, 7]], [[48, 97, 47, 19], [6, 78, 80, 79], [22, 84, 52, 24], [74, 32, 34, 100], [98, 35, 48, 24], [89, 81, 92, 79], [77, 77, 15, 64], [89, 58, 19, 73], [61, 31, 20, 36], [38, 74, 77, 79], [90, 39, 33, 43], [75, 33, 41, 54], [89, 67, 28, 19], [19, 24, 87, 51], [21, 49, 30, 32], [83, 30, 73, 5]]) == 84\nassert solution.minPathCost([[8, 13, 11, 16, 5, 14], [15, 7, 11, 7, 5, 17], [16, 12, 1, 14, 14, 10]], [[86, 91, 94, 94, 11, 97], [73, 49, 73, 12, 63, 58], [89, 84, 90, 93, 17, 16], [2, 3, 40, 35, 9, 74], [99, 31, 43, 64, 57, 41], [56, 10, 66, 60, 12, 39], [25, 15, 67, 29, 39, 73], [70, 13, 77, 41, 11, 31], [88, 72, 44, 65, 60, 60], [69, 68, 64, 72, 69, 69], [65, 76, 27, 27, 80, 52], [77, 77, 32, 93, 31, 58], [18, 95, 1, 88, 68, 33], [55, 76, 26, 59, 10, 75], [81, 56, 69, 41, 41, 41], [26, 24, 19, 99, 78, 45], [5, 46, 38, 100, 87, 25], [89, 58, 25, 39, 83, 36]]) == 44\nassert solution.minPathCost([[11, 9, 8, 0, 10, 9], [7, 8, 8, 4, 11, 6]], [[43, 9, 92, 20, 10, 88], [48, 50, 64, 82, 5, 83], [94, 20, 87, 36, 53, 25], [99, 74, 100, 9, 26, 90], [50, 90, 36, 51, 65, 81], [29, 5, 69, 78, 89, 10], [78, 54, 43, 100, 93, 73], [61, 36, 66, 35, 28, 15], [60, 14, 98, 33, 50, 68], [42, 17, 38, 13, 78, 43], [12, 58, 34, 84, 34, 100], [20, 67, 33, 86, 35, 68]]) == 17\nassert solution.minPathCost([[3, 8], [0, 4], [3, 4], [8, 2], [3, 7], [9, 11]], [[78, 20], [65, 41], [17, 46], [78, 3], [83, 13], [7, 57], [67, 71], [93, 46], [16, 24], [46, 69], [24, 34], [29, 21]]) == 76\nassert solution.minPathCost([[2, 14, 7], [13, 9, 9], [2, 8, 12], [3, 12, 14], [4, 6, 0]], [[61, 49, 48], [44, 2, 13], [86, 76, 5], [48, 19, 82], [21, 57, 87], [25, 40, 44], [73, 69, 97], [36, 17, 93], [44, 76, 77], [23, 53, 44], [22, 27, 14], [16, 79, 97], [40, 17, 64], [82, 67, 73], [91, 64, 26]]) == 86\nassert solution.minPathCost([[11, 10, 7, 14, 2], [7, 11, 0, 1, 16], [18, 16, 2, 2, 10], [19, 12, 10, 6, 5]], [[46, 78, 73, 18, 48], [33, 35, 79, 54, 67], [7, 67, 5, 45, 96], [83, 94, 25, 61, 49], [71, 4, 65, 98, 27], [71, 74, 70, 73, 69], [85, 79, 81, 70, 73], [97, 37, 9, 83, 44], [3, 15, 58, 6, 90], [51, 16, 84, 42, 46], [80, 42, 45, 85, 11], [51, 39, 72, 54, 70], [15, 100, 63, 42, 21], [10, 13, 60, 98, 4], [39, 97, 32, 49, 83], [40, 62, 81, 48, 92], [23, 18, 45, 10, 67], [87, 19, 6, 20, 19], [1, 18, 61, 53, 10], [5, 18, 87, 30, 30]]) == 42\nassert solution.minPathCost([[6, 5, 2], [8, 5, 8], [7, 1, 3]], [[93, 88, 82], [50, 39, 47], [43, 42, 23], [70, 38, 90], [48, 79, 6], [20, 62, 2], [53, 85, 37], [94, 31, 27], [93, 7, 80]]) == 23\nassert solution.minPathCost([[1, 4, 4, 7], [5, 3, 4, 7]], [[48, 35, 45, 34], [14, 98, 94, 92], [6, 28, 22, 84], [23, 59, 77, 81], [35, 71, 96, 94], [61, 44, 78, 36], [8, 76, 83, 45], [16, 92, 20, 88]]) == 20\nassert solution.minPathCost([[9, 7, 4, 8], [7, 11, 5, 6], [4, 2, 6, 6]], [[89, 14, 87, 33], [95, 86, 2, 83], [90, 64, 27, 10], [1, 35, 92, 7], [69, 75, 86, 83], [100, 10, 48, 15], [60, 78, 80, 82], [47, 4, 92, 39], [5, 22, 51, 90], [11, 74, 51, 78], [44, 94, 26, 58], [95, 50, 42, 35]]) == 26\nassert solution.minPathCost([[9, 2, 1, 2, 6], [1, 8, 4, 9, 5]], [[94, 2, 60, 90, 42], [30, 77, 24, 19, 94], [60, 89, 29, 43, 19], [83, 19, 79, 99, 68], [12, 78, 85, 26, 37], [99, 68, 9, 13, 38], [12, 50, 57, 75, 13], [88, 40, 58, 55, 71], [50, 92, 36, 83, 45], [89, 20, 54, 18, 29]]) == 19\nassert solution.minPathCost([[2, 0, 7, 5, 7], [7, 8, 0, 1, 7]], [[57, 12, 58, 18, 99], [77, 17, 13, 79, 53], [43, 44, 95, 21, 56], [49, 58, 25, 65, 24], [36, 82, 93, 31, 32], [99, 36, 9, 15, 45], [18, 58, 34, 56, 38], [65, 94, 46, 49, 15], [58, 43, 9, 82, 23], [50, 1, 5, 37, 92]]) == 14\nassert solution.minPathCost([[21, 3, 15, 5], [16, 14, 19, 21], [4, 15, 1, 10], [15, 5, 19, 6], [1, 23, 20, 4], [18, 8, 11, 20]], [[64, 8, 72, 35], [47, 85, 34, 74], [43, 42, 52, 21], [54, 25, 19, 86], [67, 47, 29, 8], [34, 76, 65, 98], [3, 41, 27, 84], [84, 17, 26, 7], [59, 43, 34, 16], [70, 66, 90, 84], [19, 51, 23, 74], [39, 25, 4, 86], [67, 79, 55, 16], [92, 76, 54, 22], [7, 58, 16, 29], [66, 80, 42, 4], [5, 73, 71, 20], [87, 1, 33, 51], [54, 34, 33, 87], [79, 2, 78, 25], [85, 3, 59, 11], [16, 58, 74, 41], [37, 56, 52, 94], [2, 67, 25, 79]]) == 116",
  "inefficient_solution": "class Solution:\n    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        f = [[0] * 1000 for _ in range(n)]\n        for i in range(n):\n            f[i] = [inf] * n\n        for _ in range(m - 1):\n            g = [[inf] * n for _ in range(n)]\n            for j in range(n):\n                for k in range(n):\n                    for p in range(n):\n                        g[j][p] = min(g[j][p], f[k][p] + moveCost[grid[m - 2][k]][j] + grid[m - 1][j])\n            f = g\n        return min(min(row) for row in f)",
  "is_python": true
}