{
  "problem_idx": 413,
  "task_name": "Arithmetic Slices",
  "markdown_description": "\nAn integer array is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same.\n\n\n* For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.\n\n\nGiven an integer array `nums`, return *the number of arithmetic **subarrays** of* `nums`.\n\n\nA **subarray** is a contiguous subsequence of the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 3\n**Explanation:** We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5000`\n* `-1000 <= nums[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        ans = cnt = 0\n        d = 3000\n        for a, b in pairwise(nums):\n            if b - a == d:\n                cnt += 1\n            else:\n                d = b - a\n                cnt = 0\n            ans += cnt\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfArithmeticSlices(self, nums):\n        ans = cnt = 0\n        d = 3000\n        for a, b in pairwise(nums):\n            if b - a == d:\n                cnt += 1\n            else:\n                d = b - a\n                cnt = 0\n            ans += cnt\n        return ans\n\ndef pairwise(iterable):\n    a = iter(iterable)\n    return zip(a, a)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(-1000, 1001), random.randint(3, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfArithmeticSlices(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfArithmeticSlices(nums) == expected_result\n        print(f\"assert solution.numberOfArithmeticSlices({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfArithmeticSlices({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfArithmeticSlices([654, 137, -581]) == 0\nassert solution.numberOfArithmeticSlices([608, 508, 276, -101]) == 0\nassert solution.numberOfArithmeticSlices([815, 394, -880, 638, 90, 867, 425, 391, 509, -170]) == 0\nassert solution.numberOfArithmeticSlices([-803, -145, 398]) == 0\nassert solution.numberOfArithmeticSlices([-402, 314, 727, -782, 291, -506, -998]) == 0\nassert solution.numberOfArithmeticSlices([748, 610, -822, -820, 506, -752]) == 0\nassert solution.numberOfArithmeticSlices([-169, 787, 224, 188, -334, 486, 888]) == 0\nassert solution.numberOfArithmeticSlices([444, 125, -872, -578, -10, -957]) == 0\nassert solution.numberOfArithmeticSlices([-17, -399, 99, -867, -286, -461, -862, 260, -561]) == 0\nassert solution.numberOfArithmeticSlices([322, -167, 922, -324]) == 0\nassert solution.numberOfArithmeticSlices([-842, -732, 197]) == 0\nassert solution.numberOfArithmeticSlices([37, 128, -997, -297, 285]) == 0\nassert solution.numberOfArithmeticSlices([403, 561, -130, -418, 635]) == 0\nassert solution.numberOfArithmeticSlices([454, 743, -1000, -683]) == 0\nassert solution.numberOfArithmeticSlices([-808, -727, -349, -171, 692, 431, -636, 41]) == 0\nassert solution.numberOfArithmeticSlices([-305, 937, 253, -781, 832, -481, -754, 61, 424]) == 0\nassert solution.numberOfArithmeticSlices([-861, -406, 260, -430, 884, -586, -134, 855, -938, 334]) == 0\nassert solution.numberOfArithmeticSlices([-567, 212, -603]) == 0\nassert solution.numberOfArithmeticSlices([-908, 82, -968, -867, -877, -315, -103, 2, 598, -805]) == 0\nassert solution.numberOfArithmeticSlices([-2, 495, -75, 50, 45, -838, -623, -463, 262]) == 0\nassert solution.numberOfArithmeticSlices([-387, -529, 361, -82, 461, -778, 773, -328, -611]) == 0\nassert solution.numberOfArithmeticSlices([-565, -445, -546, -948, 678, -608, -33, 383, 820]) == 0\nassert solution.numberOfArithmeticSlices([-885, -610, 725, 204, -472, -208, -977, 940]) == 0\nassert solution.numberOfArithmeticSlices([268, -944, -589, -999]) == 0\nassert solution.numberOfArithmeticSlices([488, 975, 623, 68, -590, -281, 443]) == 0\nassert solution.numberOfArithmeticSlices([65, -683, 987, 464, -287]) == 0\nassert solution.numberOfArithmeticSlices([428, 939, -785]) == 0\nassert solution.numberOfArithmeticSlices([-177, -51, 832, -31, 889, 73]) == 0\nassert solution.numberOfArithmeticSlices([941, -904, 811, -53, 327, -849, 239, -320, 528]) == 0\nassert solution.numberOfArithmeticSlices([972, 49, -471, 311, 341, -438]) == 0\nassert solution.numberOfArithmeticSlices([-438, -918, -382, 977, 818, -135, -898, 44]) == 0\nassert solution.numberOfArithmeticSlices([-990, 276, -786]) == 0\nassert solution.numberOfArithmeticSlices([-789, 98, -203]) == 0\nassert solution.numberOfArithmeticSlices([-7, -98, -947, -560, 457, 716, 506, 414, -282, 495]) == 0\nassert solution.numberOfArithmeticSlices([-759, -705, -425, -985, -975, -41, 449]) == 0\nassert solution.numberOfArithmeticSlices([-624, 9, 492, -895, 857, 680, -283, -129]) == 0\nassert solution.numberOfArithmeticSlices([133, 429, -844, 135, -744]) == 0\nassert solution.numberOfArithmeticSlices([157, 657, -541, 895, 523, -37, 992, -12, -311]) == 0\nassert solution.numberOfArithmeticSlices([-771, -165, 972, 796, -825, -884, -62, 529, 405]) == 0\nassert solution.numberOfArithmeticSlices([-193, -451, 303, -523]) == 0\nassert solution.numberOfArithmeticSlices([620, -39, 269, 958, 544, -121]) == 0\nassert solution.numberOfArithmeticSlices([-571, 98, -307, 127]) == 0\nassert solution.numberOfArithmeticSlices([-84, -359, 783, -504]) == 0\nassert solution.numberOfArithmeticSlices([-602, -114, -694, -403, 576, 721, -455, -600]) == 0\nassert solution.numberOfArithmeticSlices([-391, 893, -900]) == 0\nassert solution.numberOfArithmeticSlices([-153, 36, 465, -855, 187, -130, -53, -347, 265, 962]) == 0\nassert solution.numberOfArithmeticSlices([545, -893, -898, 718, 532, 60, -21, 47, -920, -105]) == 0\nassert solution.numberOfArithmeticSlices([-124, -399, -577, -50, 577]) == 0\nassert solution.numberOfArithmeticSlices([-263, 378, 471, -445, 24]) == 0\nassert solution.numberOfArithmeticSlices([94, -476, 524]) == 0\nassert solution.numberOfArithmeticSlices([204, -979, -652, -8, -924]) == 0\nassert solution.numberOfArithmeticSlices([403, -237, -85, 612, -305, 8, 308]) == 0\nassert solution.numberOfArithmeticSlices([-166, -804, 515, -847, -791, -363, -223, 376, -994, 247]) == 0\nassert solution.numberOfArithmeticSlices([-153, -721, -352, 452]) == 0\nassert solution.numberOfArithmeticSlices([-979, -198, -810]) == 0\nassert solution.numberOfArithmeticSlices([-950, -408, -523, -378, 146, 842, -35, 473]) == 0\nassert solution.numberOfArithmeticSlices([200, -88, 684, -17, -582, 406, 451, 507, -991, 665]) == 0\nassert solution.numberOfArithmeticSlices([-918, -1, -500, -82, 650, 370]) == 0\nassert solution.numberOfArithmeticSlices([607, 280, -698, -501, -875, -792, -870, 51]) == 0\nassert solution.numberOfArithmeticSlices([-481, 162, 155]) == 0\nassert solution.numberOfArithmeticSlices([687, 543, -526, 220, -655, 661, 239, 787]) == 0\nassert solution.numberOfArithmeticSlices([947, 424, -169, -155, 742, 401, 515, 542, -85, -455]) == 0\nassert solution.numberOfArithmeticSlices([-341, -688, 272, -724, 575]) == 0\nassert solution.numberOfArithmeticSlices([203, -175, -444, 527, 166, 824]) == 0\nassert solution.numberOfArithmeticSlices([1000, -232, 998, 539, -55, 726, -987, 33]) == 0\nassert solution.numberOfArithmeticSlices([-658, 637, 327]) == 0\nassert solution.numberOfArithmeticSlices([595, -16, 853, -836, 830]) == 0\nassert solution.numberOfArithmeticSlices([471, -426, 5, -698, -562, 805, 808, 458]) == 0\nassert solution.numberOfArithmeticSlices([-225, 812, -838, -865, 281, -954]) == 0\nassert solution.numberOfArithmeticSlices([-23, 307, 905, -46, 478, 979, -955, -784]) == 0\nassert solution.numberOfArithmeticSlices([-801, 867, 211, 284, 897, -924]) == 0\nassert solution.numberOfArithmeticSlices([-42, 346, 188, -457, -248]) == 0\nassert solution.numberOfArithmeticSlices([-366, -472, -946, -296]) == 0\nassert solution.numberOfArithmeticSlices([-209, 756, 133, -642, 757, -553, -812, 996]) == 0\nassert solution.numberOfArithmeticSlices([-297, -578, 11, -42, -215, -658, 754, 172]) == 0\nassert solution.numberOfArithmeticSlices([-208, -996, -749, -992]) == 0\nassert solution.numberOfArithmeticSlices([-104, 309, -465]) == 0\nassert solution.numberOfArithmeticSlices([719, 544, 156, -606, 285, -975, -13, 187]) == 0\nassert solution.numberOfArithmeticSlices([521, -650, -368, 333]) == 0\nassert solution.numberOfArithmeticSlices([-757, 20, -373, -578, -833, -308, 806]) == 0\nassert solution.numberOfArithmeticSlices([150, -189, -41, -607, 653, 575]) == 0\nassert solution.numberOfArithmeticSlices([343, 946, -552]) == 0\nassert solution.numberOfArithmeticSlices([58, -529, 227, -728, -273, 523, 324, -868]) == 0\nassert solution.numberOfArithmeticSlices([290, -396, -946]) == 0\nassert solution.numberOfArithmeticSlices([339, -717, -946]) == 0\nassert solution.numberOfArithmeticSlices([243, -551, 203, 84, -952]) == 0\nassert solution.numberOfArithmeticSlices([-779, -460, -554, 834, 441, -232]) == 0\nassert solution.numberOfArithmeticSlices([-939, -297, 884]) == 0\nassert solution.numberOfArithmeticSlices([-956, 832, -341]) == 0\nassert solution.numberOfArithmeticSlices([248, 273, -100, 358, 343, 545, -756, 896, 521, -312]) == 0\nassert solution.numberOfArithmeticSlices([-647, 585, -617, -531, -602]) == 0\nassert solution.numberOfArithmeticSlices([120, -268, -334, -234, -894, -968]) == 0\nassert solution.numberOfArithmeticSlices([-460, -738, -186, 50, -972, -564, -147]) == 0\nassert solution.numberOfArithmeticSlices([-727, 425, 277, -434]) == 0\nassert solution.numberOfArithmeticSlices([-146, -649, -828]) == 0\nassert solution.numberOfArithmeticSlices([390, -854, -248, -730, -46, -414, 757]) == 0\nassert solution.numberOfArithmeticSlices([-955, -67, 324, -883]) == 0\nassert solution.numberOfArithmeticSlices([-818, 689, -574, -84, -648, 596, -124, -891, -618, -480]) == 0\nassert solution.numberOfArithmeticSlices([-491, -671, 250, -713, -522, 662, 638, -745]) == 0\nassert solution.numberOfArithmeticSlices([-44, 158, -359, 453, 991, 255, 6, -950]) == 0",
  "inefficient_solution": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        ans = 0\n        slices = []\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                for k in range(j + 1, len(nums)):\n                    diff = nums[j] - nums[i]\n                    if nums[k] - nums[j] == diff:\n                        slices.append((nums[i], nums[j], nums[k]))\n                        if len(slices) == 1:\n                            ans += 1\n                        else:\n                            for slice in slices[:-1]:\n                                if (slice[1] - slice[0]) == diff and (slice[2] - slice[1]) == diff:\n                                    ans += 1\n                                    break\n        return ans",
  "is_python": true
}