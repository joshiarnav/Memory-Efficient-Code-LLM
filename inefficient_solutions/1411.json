{
  "problem_idx": 1411,
  "task_name": "Number of Ways to Paint N ",
  "markdown_description": "\nYou have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: **Red**, **Yellow,** or **Green** while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\n\n\nGiven `n` the number of rows of the grid, return *the number of ways* you can paint this `grid`. As the answer may grow large, the answer **must be** computed modulo `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1411.Number%20of%20Ways%20to%20Paint%20N%20%C3%97%203%20Grid/images/e1.png)\n\n```\n\n**Input:** n = 1\n**Output:** 12\n**Explanation:** There are 12 possible way to paint the grid as shown.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5000\n**Output:** 30228214\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length`\n* `1 <= n <= 5000`\n\n\n",
  "canonical_solution": "class Solution:\n    def numOfWays(self, n: int) -> int:\n        mod = 10**9 + 7\n        f0 = f1 = 6\n        for _ in range(n - 1):\n            g0 = (3 * f0 + 2 * f1) % mod\n            g1 = (2 * f0 + 2 * f1) % mod\n            f0, f1 = g0, g1\n        return (f0 + f1) % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numOfWays(self, n: int) -> int:\n        mod = 10**9 + 7\n        f0 = f1 = 6\n        for _ in range(n - 1):\n            g0 = (3 * f0 + 2 * f1) % mod\n            g1 = (2 * f0 + 2 * f1) % mod\n            f0, f1 = g0, g1\n        return (f0 + f1) % mod\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random n\n    n = random.randint(1, 1000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numOfWays(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numOfWays(n) == expected_result\n        print(f\"assert solution.numOfWays({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numOfWays({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numOfWays(644) == 634585042\nassert solution.numOfWays(925) == 938238060\nassert solution.numOfWays(972) == 614377264\nassert solution.numOfWays(18) == 806705896\nassert solution.numOfWays(546) == 939897266\nassert solution.numOfWays(17) == 386335237\nassert solution.numOfWays(617) == 275426838\nassert solution.numOfWays(921) == 933135183\nassert solution.numOfWays(602) == 459174401\nassert solution.numOfWays(734) == 310533710\nassert solution.numOfWays(855) == 498835621\nassert solution.numOfWays(738) == 768909293\nassert solution.numOfWays(697) == 792674330\nassert solution.numOfWays(405) == 734214073\nassert solution.numOfWays(544) == 601799639\nassert solution.numOfWays(21) == 932697716\nassert solution.numOfWays(158) == 50098143\nassert solution.numOfWays(429) == 646941995\nassert solution.numOfWays(904) == 754789275\nassert solution.numOfWays(811) == 940460413\nassert solution.numOfWays(139) == 895882306\nassert solution.numOfWays(715) == 297390119\nassert solution.numOfWays(914) == 540173601\nassert solution.numOfWays(726) == 706047215\nassert solution.numOfWays(822) == 406612256\nassert solution.numOfWays(766) == 693174361\nassert solution.numOfWays(154) == 307695939\nassert solution.numOfWays(906) == 849849299\nassert solution.numOfWays(96) == 72823635\nassert solution.numOfWays(494) == 19880933\nassert solution.numOfWays(284) == 701182073\nassert solution.numOfWays(597) == 372240017\nassert solution.numOfWays(400) == 57827788\nassert solution.numOfWays(449) == 752621839\nassert solution.numOfWays(33) == 582967850\nassert solution.numOfWays(878) == 842433481\nassert solution.numOfWays(643) == 266478328\nassert solution.numOfWays(628) == 179119499\nassert solution.numOfWays(6) == 23346\nassert solution.numOfWays(731) == 671910186\nassert solution.numOfWays(17) == 386335237\nassert solution.numOfWays(846) == 672133656\nassert solution.numOfWays(183) == 619038653\nassert solution.numOfWays(727) == 870442228\nassert solution.numOfWays(361) == 233762094\nassert solution.numOfWays(509) == 959953557\nassert solution.numOfWays(980) == 578487537\nassert solution.numOfWays(763) == 945572210\nassert solution.numOfWays(816) == 910125287\nassert solution.numOfWays(574) == 51444140\nassert solution.numOfWays(15) == 963045241\nassert solution.numOfWays(309) == 561913289\nassert solution.numOfWays(118) == 491714893\nassert solution.numOfWays(53) == 228056708\nassert solution.numOfWays(104) == 42082654\nassert solution.numOfWays(349) == 762049196\nassert solution.numOfWays(767) == 9509990\nassert solution.numOfWays(847) == 754355844\nassert solution.numOfWays(217) == 804248223\nassert solution.numOfWays(85) == 689678616\nassert solution.numOfWays(93) == 539285700\nassert solution.numOfWays(477) == 83425384\nassert solution.numOfWays(386) == 573445277\nassert solution.numOfWays(990) == 971405664\nassert solution.numOfWays(229) == 72945556\nassert solution.numOfWays(976) == 511336086\nassert solution.numOfWays(114) == 50996783\nassert solution.numOfWays(525) == 425090838\nassert solution.numOfWays(114) == 50996783\nassert solution.numOfWays(791) == 161438895\nassert solution.numOfWays(741) == 966118723\nassert solution.numOfWays(635) == 389835170\nassert solution.numOfWays(826) == 201059454\nassert solution.numOfWays(668) == 49606110\nassert solution.numOfWays(160) == 236654923\nassert solution.numOfWays(797) == 175139139\nassert solution.numOfWays(421) == 144445971\nassert solution.numOfWays(112) == 45165228\nassert solution.numOfWays(980) == 578487537\nassert solution.numOfWays(66) == 418507293\nassert solution.numOfWays(837) == 212159608\nassert solution.numOfWays(821) == 402696240\nassert solution.numOfWays(624) == 554254908\nassert solution.numOfWays(871) == 24278201\nassert solution.numOfWays(47) == 641388668\nassert solution.numOfWays(877) == 43570879\nassert solution.numOfWays(935) == 222003192\nassert solution.numOfWays(257) == 64975886\nassert solution.numOfWays(508) == 559967089\nassert solution.numOfWays(800) == 314710698\nassert solution.numOfWays(742) == 969182220\nassert solution.numOfWays(638) == 509028429\nassert solution.numOfWays(469) == 78322082\nassert solution.numOfWays(486) == 625414346\nassert solution.numOfWays(423) == 368540473\nassert solution.numOfWays(706) == 546055292\nassert solution.numOfWays(827) == 664777926\nassert solution.numOfWays(435) == 713802055\nassert solution.numOfWays(987) == 393696858\nassert solution.numOfWays(539) == 693288584",
  "inefficient_solution": "class Solution:\n    def numOfWays(self, n: int) -> int:\n        mod = 10**9 + 7\n        f0 = f1 = 6\n        memo = {}\n        for _ in range(n - 1):\n            g0 = g1 = 0\n            if (0, 0) in memo:\n                g0 = memo[(0, 0)]\n            if (1, 0) in memo:\n                g0 += memo[(1, 0)]\n            if (0, 1) in memo:\n                g1 = memo[(0, 1)]\n            if (1, 1) in memo:\n                g1 += memo[(1, 1)]\n            memo[(0, 0)] = (3 * f0 + 2 * f1) % mod\n            memo[(1, 0)] = (2 * f0 + 2 * f1) % mod\n            memo[(0, 1)] = (2 * f0 + 2 * f1) % mod\n            memo[(1, 1)] = (3 * f0 + 2 * f1) % mod\n            f0, f1 = memo[(0, 0)], memo[(1, 0)]\n        return (f0 + f1) % mod",
  "is_python": true
}