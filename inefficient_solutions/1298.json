{
  "problem_idx": 1298,
  "task_name": "Maximum Candies You Can Get from Boxes",
  "markdown_description": "\nYou have `n` boxes labeled from `0` to `n - 1`. You are given four arrays: `status`, `candies`, `keys`, and `containedBoxes` where:\n\n\n* `status[i]` is `1` if the `ith` box is open and `0` if the `ith` box is closed,\n* `candies[i]` is the number of candies in the `ith` box,\n* `keys[i]` is a list of the labels of the boxes you can open after opening the `ith` box.\n* `containedBoxes[i]` is a list of the boxes you found inside the `ith` box.\n\n\nYou are given an integer array `initialBoxes` that contains the labels of the boxes you initially have. You can take all the candies in **any open box** and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\n\n\nReturn *the maximum number of candies you can get following the rules above*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\n**Output:** 16\n**Explanation:** You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\n**Output:** 6\n**Explanation:** You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == status.length == candies.length == keys.length == containedBoxes.length`\n* `1 <= n <= 1000`\n* `status[i]` is either `0` or `1`.\n* `1 <= candies[i] <= 1000`\n* `0 <= keys[i].length <= n`\n* `0 <= keys[i][j] < n`\n* All values of `keys[i]` are **unique**.\n* `0 <= containedBoxes[i].length <= n`\n* `0 <= containedBoxes[i][j] < n`\n* All values of `containedBoxes[i]` are unique.\n* Each box is contained in one box at most.\n* `0 <= initialBoxes.length <= n`\n* `0 <= initialBoxes[i] < n`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxCandies(\n        self,\n        status: List[int],\n        candies: List[int],\n        keys: List[List[int]],\n        containedBoxes: List[List[int]],\n        initialBoxes: List[int],\n    ) -> int:\n        q = deque([i for i in initialBoxes if status[i] == 1])\n        ans = sum(candies[i] for i in initialBoxes if status[i] == 1)\n        has = set(initialBoxes)\n        took = {i for i in initialBoxes if status[i] == 1}\n\n        while q:\n            i = q.popleft()\n            for k in keys[i]:\n                status[k] = 1\n                if k in has and k not in took:\n                    ans += candies[k]\n                    took.add(k)\n                    q.append(k)\n            for j in containedBoxes[i]:\n                has.add(j)\n                if status[j] and j not in took:\n                    ans += candies[j]\n                    took.add(j)\n                    q.append(j)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\nfrom typing import List\n\nclass Solution:\n    def maxCandies(\n        self,\n        status: List[int],\n        candies: List[int],\n        keys: List[List[int]],\n        containedBoxes: List[List[int]],\n        initialBoxes: List[int],\n    ) -> int:\n        q = deque([i for i in initialBoxes if status[i] == 1])\n        ans = sum(candies[i] for i in initialBoxes if status[i] == 1)\n        has = set(initialBoxes)\n        took = {i for i in initialBoxes if status[i] == 1}\n\n        while q:\n            i = q.popleft()\n            for k in keys[i]:\n                status[k] = 1\n                if k in has and k not in took:\n                    ans += candies[k]\n                    took.add(k)\n                    q.append(k)\n            for j in containedBoxes[i]:\n                has.add(j)\n                if status[j] and j not in took:\n                    ans += candies[j]\n                    took.add(j)\n                    q.append(j)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random inputs\n    n = random.randint(1, 11)\n    status = [random.randint(0, 1) for _ in range(n)]\n    candies = [random.randint(1, 1001) for _ in range(n)]\n    keys = [[] for _ in range(n)]\n    for i in range(n):\n        num_keys = random.randint(1, n)\n        keys[i] = random.sample(range(n), num_keys)\n    containedBoxes = [[] for _ in range(n)]\n    for i in range(n):\n        num_boxes = random.randint(0, n)\n        containedBoxes[i] = random.sample(range(n), num_boxes)\n    num_initialBoxes = random.randint(0, n)\n    initialBoxes = random.sample(range(n), num_initialBoxes)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxCandies(status, candies, keys, containedBoxes, initialBoxes)\n    \n    return status, candies, keys, containedBoxes, initialBoxes, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        status, candies, keys, containedBoxes, initialBoxes, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxCandies(status, candies, keys, containedBoxes, initialBoxes) == expected_result\n        print(f\"assert solution.maxCandies({status}, {candies}, {keys}, {containedBoxes}, {initialBoxes}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxCandies({status}, {candies}, {keys}, {containedBoxes}, {initialBoxes}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxCandies([1, 1, 0, 0, 0], [893, 910, 238, 400, 779], [[1, 3, 0], [4, 0, 2], [4, 1, 0, 3, 2], [1, 4, 0], [0, 2, 4, 3]], [[0, 4, 1, 2, 3], [3, 2, 4], [3, 2, 1], [4, 3], [3]], []) == 0\nassert solution.maxCandies([0, 0, 0, 0, 1], [688, 798, 8, 112, 899], [[3, 1, 0], [4, 1], [2, 0], [4, 0, 2], [2, 3, 0]], [[4, 1], [2, 4, 3], [1], [2, 0, 4, 3], []], [3, 0]) == 0\nassert solution.maxCandies([1, 1, 1, 1], [884, 28, 225, 885], [[2, 1, 3, 0], [1, 3], [1, 3, 0, 2], [0, 3]], [[0, 3], [], [3, 2, 1], [3]], [0, 2]) == 2022\nassert solution.maxCandies([1, 1, 1, 1, 1, 1], [789, 724, 4, 591, 374, 737], [[5], [0, 3, 2, 1, 4, 5], [0, 2, 3, 5, 1], [5, 3, 0, 4, 1], [4, 3, 0, 5, 2], [3, 1]], [[3, 1, 0, 4], [1, 3, 5], [2, 0, 5, 4], [1], [1, 3, 0, 5, 2], [2, 3, 1, 4, 5]], [0]) == 3219\nassert solution.maxCandies([0, 1, 0], [656, 244, 993], [[2], [0, 1, 2], [1, 0, 2]], [[1], [1, 0, 2], []], []) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1], [844, 651, 842, 208, 43, 663, 568, 608, 926], [[0, 4, 8, 6], [1, 7, 6, 5, 2, 8, 4, 0], [3, 7], [7, 0, 6, 3, 4, 1], [5, 3, 2, 6, 4, 7, 0, 8], [4, 0, 1, 5, 3], [3, 6, 2, 8, 5, 7], [5, 7], [3, 1]], [[2, 4, 6, 0, 3, 1], [7, 5], [3, 2], [6, 1, 5, 7, 3, 0, 4, 8, 2], [6, 2], [5, 0, 4, 1, 6], [1], [], [5, 2, 7, 8, 6, 4]], [2, 8, 3, 0, 1, 5, 6, 4, 7]) == 5353\nassert solution.maxCandies([1, 1], [355, 495], [[0], [0, 1]], [[1, 0], [1]], [0]) == 850\nassert solution.maxCandies([0, 0, 0, 0], [777, 854, 409, 919], [[1], [3, 0, 1], [0, 2, 1], [0]], [[], [1, 2], [], []], [1]) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1], [220, 969, 761, 325, 11], [[0, 2, 1], [3], [1, 4], [2, 3, 4], [1, 0, 4, 3, 2]], [[2, 4, 3], [4, 3, 1], [4, 3], [], []], [1, 4]) == 1305\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1], [474, 801, 192, 352, 985, 262, 489], [[0, 1, 4], [1], [2, 5, 3, 4], [5, 0, 2, 4], [3], [1, 5, 3, 2, 6, 4, 0], [6, 5, 2, 0, 4, 3]], [[1, 0, 5, 3, 6, 2, 4], [], [1], [5, 4, 1, 2, 0, 6, 3], [1, 0, 4, 2, 5, 3], [5], [3]], [3, 1, 2, 0]) == 3555\nassert solution.maxCandies([1, 1, 1, 1, 1], [61, 21, 272, 112, 631], [[1, 4, 3], [3, 2, 1, 0], [0, 1, 2], [4, 3, 1, 0, 2], [3, 2, 0, 1]], [[2, 4], [3, 1, 0, 4, 2], [0, 2], [2, 4, 3], []], [3, 1, 2, 4, 0]) == 1097\nassert solution.maxCandies([0, 1], [518, 350], [[1], [1, 0]], [[], []], []) == 0\nassert solution.maxCandies([1, 1, 1], [512, 337, 703], [[0, 2], [0, 1], [0, 1, 2]], [[2, 0, 1], [], [2]], [1, 0]) == 1552\nassert solution.maxCandies([0, 1, 0], [418, 431, 508], [[1, 0, 2], [1, 2], [2]], [[2, 0], [0, 2], [1, 0, 2]], [0]) == 0\nassert solution.maxCandies([1, 1, 1], [56, 787, 741], [[2, 1], [0, 1, 2], [0]], [[0, 1], [2, 0], [0]], [2, 1, 0]) == 1584\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [663, 893, 216, 354, 202, 668, 711, 207, 942, 544, 187], [[5, 0, 8, 4, 3, 10, 6, 1, 9, 7, 2], [4, 3, 1, 6, 9, 8, 7, 0, 5], [7, 3, 10, 8, 0, 9, 4, 1], [3], [0, 3, 6, 10, 8, 5, 7, 2, 9, 1], [2, 0, 9, 6], [7, 4, 10, 3, 2, 6, 0, 9, 5], [10, 7, 1, 3, 0, 5, 8], [8, 10, 2], [3], [10, 7]], [[10, 0, 4], [0, 4, 7, 6], [], [], [1, 5, 3, 9, 7, 2], [1, 6, 8, 9], [], [4], [2, 3, 8], [10, 8, 4, 5, 6, 9, 0, 3], [5, 4, 8, 10, 9, 7, 6, 1, 2, 3]], [4, 8, 2, 1, 3, 6, 9, 5, 10]) == 5587\nassert solution.maxCandies([1, 1], [449, 709], [[1], [0]], [[0], []], [1, 0]) == 1158\nassert solution.maxCandies([1, 1, 1, 1, 1], [586, 666, 791, 686, 840], [[4, 0, 1, 3, 2], [4], [4], [0, 1, 4, 2], [2, 3, 1, 4]], [[3, 2, 0, 1], [2], [3, 2], [0, 2], [1]], [3]) == 2729\nassert solution.maxCandies([1, 1, 1, 1, 1], [789, 480, 899, 398, 594], [[4, 1, 0], [2], [2], [2, 3, 4, 1], [1, 4, 0, 2, 3]], [[0, 3, 1], [2, 1, 4, 3], [4, 3, 1, 2], [0, 1, 3, 2, 4], [0, 1, 2]], [4, 3, 0, 1, 2]) == 3160\nassert solution.maxCandies([1, 0, 0], [969, 579, 145], [[1, 2], [0, 1], [0]], [[0, 1, 2], [2, 0], []], []) == 0\nassert solution.maxCandies([1], [688], [[0]], [[0]], []) == 0\nassert solution.maxCandies([1, 0, 1, 1, 0, 1, 0, 1], [831, 867, 411, 871, 872, 408, 987, 45], [[6, 3], [0, 2, 6, 5, 7, 1], [2, 7, 4, 6, 3, 1], [5], [1, 6, 0, 3, 2, 5, 7], [1, 2, 0], [7, 6, 2], [4]], [[], [7, 6, 0, 4, 2, 3, 5, 1], [2, 7, 1, 6, 0, 5, 4], [2, 7], [], [1], [2, 6], [3, 2, 7, 6, 0, 1, 5, 4]], []) == 0\nassert solution.maxCandies([0, 0, 0, 1], [787, 325, 977, 44], [[2, 0], [1, 0, 2, 3], [2, 0, 1], [2, 0, 1]], [[], [1, 2, 0, 3], [1], []], [0]) == 0\nassert solution.maxCandies([1, 1, 1], [654, 758, 671], [[1, 2, 0], [0, 2], [1, 0]], [[2, 1, 0], [], []], [1]) == 758\nassert solution.maxCandies([0, 0, 0, 0], [202, 973, 996, 126], [[2, 1, 3, 0], [2], [3], [1]], [[0, 1, 3, 2], [0, 1, 2], [], []], [3, 1, 2]) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [939, 405, 847, 979, 512, 910, 223, 808, 215, 627, 513], [[7], [9, 1, 3], [1, 6, 9, 10, 8, 4, 7, 2, 3, 0, 5], [2, 8, 5, 6, 4, 10, 3, 1], [4, 8, 9, 3, 5, 1, 6, 10, 2, 0, 7], [5, 3, 10, 0, 8, 6, 2, 9, 7], [9, 6, 5, 2, 4], [3, 6, 5], [2, 4, 9, 1, 3, 7], [2, 6, 5, 3, 7, 9, 10], [3, 8]], [[8, 7, 5, 3, 9, 0], [], [6, 7, 3, 8, 1, 10, 2, 5], [6, 5], [9, 4, 3, 6, 7, 8, 0, 1, 5, 10], [2, 4, 6, 8, 1, 7, 3], [7, 5, 10, 0, 3, 8, 1, 2, 9, 4, 6], [4, 6, 3, 2, 9], [0, 5, 10, 7, 8], [8], [5, 7, 10, 2, 3, 9, 0, 6]], [9, 10, 8, 6, 2, 0, 4, 5, 3, 1, 7]) == 6978\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [971, 992, 881, 321, 687, 322, 138, 331], [[5, 7, 3, 6, 1], [5], [1, 0], [0, 1, 2, 4], [3, 0], [1], [2, 5, 0, 7, 6, 1, 4], [1, 2, 0, 6, 7, 5]], [[], [6, 3, 7, 4, 0, 1, 5, 2], [], [1, 7, 3, 4, 6, 2, 5, 0], [7, 2, 1, 6, 4, 3, 5], [0, 1, 5], [4, 0, 6, 2, 7], [3, 0, 5, 7, 1, 6, 2]], [7, 4, 5, 1]) == 4643\nassert solution.maxCandies([1, 0], [318, 145], [[0], [1, 0]], [[0, 1], [1, 0]], [1, 0]) == 318\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [889, 254, 523, 897, 384, 562, 447, 822, 63, 358, 480], [[3, 9, 6, 2, 5, 1, 4, 0], [6, 0, 8, 7, 5], [10, 0, 4, 1], [9, 2, 3, 7, 6, 5, 10, 8, 4, 0], [2, 0, 6, 5, 7, 4, 9, 10, 3, 8], [10, 9, 7, 3, 1, 0, 4, 8], [0, 4, 6, 1, 7, 2, 9], [3, 5, 6, 9, 10, 2, 0, 4], [7], [4, 2, 6, 1, 0, 7, 5, 10, 9, 8, 3], [4, 5, 1, 9, 6, 0, 7, 10, 3, 8]], [[6, 1, 7, 2], [0, 10, 1, 7, 6, 3, 2, 9, 4, 8, 5], [1, 9, 3, 8, 2, 6, 4], [9, 5, 3, 8, 2, 10, 7, 0, 6, 1, 4], [5, 7, 0, 8, 2, 6, 1, 3, 4], [2, 1, 10, 6], [8, 2, 5, 10, 1, 0], [0], [8, 1, 5, 0, 4, 6, 10, 2, 7, 9], [7, 9, 5, 2], [4, 8, 2, 6, 7, 5, 1]], [1, 7, 2, 8, 9, 5, 3, 6, 0, 10, 4]) == 5679\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [272, 811, 307, 736, 794, 723, 139, 942, 736, 179], [[1, 3, 6, 2, 4, 9, 7, 8, 0, 5], [7, 8, 2, 4, 5], [4, 9, 5, 6, 3, 0, 7, 8, 2], [1, 2, 9, 7, 3, 4, 0, 5, 6], [7, 4, 2, 9, 0, 6], [4, 8, 9, 0, 7, 6, 1, 2, 3, 5], [7, 4, 3], [9, 8, 0, 1, 6], [5, 8, 7, 6, 9], [1, 0, 2, 5, 8, 4, 7, 3]], [[2, 4, 1, 9, 7, 0, 6, 8, 5], [2, 6, 9, 8, 1, 4, 7, 5, 3], [2, 4, 9, 5, 0, 7, 6], [0, 2, 7, 3], [8, 3, 1], [8, 3, 4, 5, 6, 0], [1, 3, 8, 7, 4], [6, 0, 2, 4, 8, 9, 3, 7], [4, 1, 6, 9, 5, 3, 0, 8, 2, 7], [5, 2, 7, 9, 6, 4, 1, 0, 8, 3]], [2, 8, 4]) == 5639\nassert solution.maxCandies([1, 1, 1], [559, 973, 49], [[1, 2, 0], [1, 0], [2]], [[0, 2], [1, 2], []], [0, 2, 1]) == 1581\nassert solution.maxCandies([1, 1, 1], [426, 682, 212], [[1, 0], [0], [0, 2]], [[], [1, 2, 0], [0, 1]], [0, 1]) == 1320\nassert solution.maxCandies([0], [298], [[0]], [[]], []) == 0\nassert solution.maxCandies([1, 1, 1], [10, 987, 392], [[0, 2, 1], [2, 0], [1, 2]], [[0], [], []], [2, 0]) == 402\nassert solution.maxCandies([1], [908], [[0]], [[]], [0]) == 908\nassert solution.maxCandies([1, 1, 1, 1], [874, 48, 398, 741], [[3, 1, 0], [1], [1, 0, 2, 3], [0, 3, 1, 2]], [[3, 0, 1, 2], [], [0, 3, 2], []], [3, 1, 0, 2]) == 2061\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [129, 819, 406, 107, 125, 539, 243, 101], [[7, 3, 5, 6, 1], [6], [4, 0], [5, 4, 1, 7, 3, 2, 6], [5], [5, 1, 4, 2, 0, 6, 3, 7], [0], [7]], [[2, 6, 3, 4, 5], [7, 4, 1, 5, 3, 6], [], [7, 0], [1], [1, 4, 6, 2, 3, 5, 0, 7], [4, 0, 2, 6, 5, 7, 3], []], [4, 1, 3, 5, 0, 7, 6]) == 2469\nassert solution.maxCandies([1, 1, 1, 1, 1], [19, 969, 399, 351, 1], [[0, 3, 1, 2, 4], [1], [0], [4], [4, 3, 2, 0]], [[3, 0, 1, 4, 2], [3, 0, 4, 1, 2], [1, 0, 3, 4, 2], [4, 0], [1]], [4, 2]) == 1739\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [941, 121, 516, 9, 772, 582, 152, 302], [[3, 0, 7, 1, 4, 2], [1, 2, 7, 6, 0, 5], [1], [2, 0, 5, 6, 3, 4, 1, 7], [6, 2, 0, 7, 1, 5, 3], [0, 5, 3], [6, 3, 0, 4, 7, 5, 1], [1]], [[3, 5, 1], [7, 4], [1, 7, 5, 6], [1, 4, 7, 5, 3, 2, 6, 0], [0, 2], [4, 2, 0, 6, 5, 7], [3, 5], [3, 4, 1]], [1, 6, 3, 0, 4, 5]) == 3395\nassert solution.maxCandies([1, 1, 1, 0, 1, 1, 1], [22, 530, 470, 294, 984, 27, 569], [[4, 1, 5, 0, 3, 2], [6, 3, 0, 1, 2], [4, 0, 5, 6], [2, 1, 4, 3], [4, 5, 3], [0, 6, 5], [1, 5, 4, 6, 2, 0, 3]], [[6, 3, 1, 2, 4], [], [5, 0, 2], [0, 4, 5, 3], [5, 1, 0, 4], [3], [0, 2, 4, 1, 3]], [5, 3]) == 27\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1], [266, 69, 729, 851, 31, 350, 713], [[6, 0, 1, 2, 4, 5, 3], [1, 5, 6, 4, 0, 3], [2, 4, 1, 3, 6], [5, 2, 4, 0, 3, 1, 6], [2, 4, 0, 6, 5, 3, 1], [3, 2, 0], [4, 2, 1, 6, 0, 5]], [[2, 5, 1, 4, 0], [4, 3, 6, 1, 0], [3, 6, 4], [0, 1, 4, 3], [0, 6, 3, 1, 4], [0, 6, 5], [1]], [3, 1, 5, 0, 2, 4, 6]) == 3009\nassert solution.maxCandies([1, 1, 1, 1], [578, 6, 343, 431], [[2, 1, 3, 0], [1, 3], [3, 0], [1, 2, 0, 3]], [[2, 1, 0, 3], [], [2, 0, 1, 3], [3]], [3, 1]) == 437\nassert solution.maxCandies([0], [617], [[0]], [[0]], [0]) == 0\nassert solution.maxCandies([1, 1], [577, 567], [[0, 1], [1, 0]], [[], [1, 0]], [0, 1]) == 1144\nassert solution.maxCandies([0, 0, 1], [695, 873, 157], [[0, 2], [1, 0], [1, 2]], [[0, 2, 1], [0, 1, 2], []], []) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [189, 992, 601, 523, 511, 423, 605, 617, 796, 113, 743], [[1, 0, 3, 4, 6, 2], [6, 9, 2, 4, 0, 3, 1], [10, 4, 1, 7, 0, 8, 2, 9, 6, 5], [2, 10, 1, 4, 9, 5, 3], [9, 4, 8, 0, 5, 6, 10, 7, 1], [6, 5, 4, 1, 8, 2, 7, 3, 10, 9], [5, 9, 3, 2, 8, 10, 6, 0], [4], [8, 2, 0, 4, 10, 1, 3, 7, 6, 5], [3, 8, 2, 10, 5, 4, 6, 1, 7, 0, 9], [0, 2, 6, 5]], [[5, 9, 10, 1, 4], [3, 1, 6, 10, 7, 2, 4, 9, 8, 5], [1, 8, 9, 0, 2, 5, 4, 3], [7, 5, 0, 6, 8, 2, 4, 9, 10, 3], [3, 9, 10, 5, 8, 7, 4, 0, 2, 6, 1], [5, 2, 7, 0, 10, 8, 6, 9, 3], [], [10, 4, 3, 6, 0, 9, 5, 8, 2, 1, 7], [1], [5, 2, 3, 1, 0, 9], [4]], [6, 5, 3, 4, 9, 7, 1, 0, 8, 2]) == 6113\nassert solution.maxCandies([1], [146], [[0]], [[0]], []) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [258, 952, 365, 477, 157, 678, 587, 127, 656, 28], [[2, 7, 8], [7, 0, 4, 6, 9], [7], [4, 9, 7, 0, 6], [2, 5, 0], [2, 0, 9, 1, 6, 4, 7, 3, 5, 8], [9, 4, 5, 6, 7, 2, 1, 8, 0], [2, 6], [7, 8, 4, 6, 9, 0, 2, 5, 1], [9, 4]], [[5, 8, 0, 7, 2, 9, 4, 1, 3, 6], [4, 6, 0, 5, 1], [3, 1, 6, 0, 8, 5, 7, 9, 4], [8], [9, 5, 4, 1, 3, 0, 8, 2], [2], [3, 8, 7, 2, 1, 0, 6, 9, 5], [8, 4, 1, 6, 2, 3, 0, 7], [3, 8, 5, 1, 4, 9, 7], [0]], [3, 9, 1, 8, 2, 4]) == 4285\nassert solution.maxCandies([0, 0, 1, 1, 0, 1, 1, 1, 0], [431, 276, 461, 115, 381, 397, 610, 598, 342], [[8, 5, 6, 3, 7, 4, 0], [5, 2, 7, 6, 4], [6, 0, 8], [0], [4, 0, 7, 6, 2, 5], [3, 1, 2, 0], [4, 5, 3], [2, 6, 1, 3, 7], [0, 6, 3, 4, 5, 1, 2, 8, 7]], [[0, 2, 1, 4, 3, 8, 5, 6], [0, 8], [5, 6, 4, 3, 1], [8, 1, 0, 6, 7, 2, 5], [0, 3, 7, 1, 8, 2, 4], [2, 3], [7, 6, 0, 1], [3, 7, 2, 1, 8, 5, 4, 0, 6], [4, 3]], []) == 0\nassert solution.maxCandies([0, 0, 1, 1, 1, 1], [589, 607, 539, 657, 130, 587], [[3, 0, 4, 1], [5, 0, 2], [2, 1, 3, 0], [4, 1, 3], [5, 4, 1], [5, 4, 1, 2, 3, 0]], [[0, 3, 5, 2, 1, 4], [3, 2, 4, 5], [], [4, 5], [4, 1], [4, 5]], []) == 0\nassert solution.maxCandies([0, 1, 1, 0, 1, 1, 0], [777, 542, 368, 752, 994, 220, 989], [[2, 6, 4, 3, 5, 1, 0], [2], [3, 5], [4, 3, 5, 2], [2, 6, 5, 0, 3, 4], [4, 6, 1, 0], [3, 5, 6, 1]], [[1, 6, 0, 5, 3], [], [4, 3, 0, 6, 2, 1, 5], [4, 6, 0], [], [], [5, 2]], []) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [9, 816, 342, 962, 106, 884, 407, 231], [[2, 0, 1, 3, 7, 4, 5], [6, 5], [4, 7, 5, 3, 2, 0, 6], [5, 2, 3, 0, 7, 4, 6], [1, 2, 5, 3, 0, 7, 6, 4], [2, 4, 0, 6, 3], [2], [1, 6, 2, 4, 7, 5]], [[6, 4, 2], [2], [3, 4, 0, 2, 1, 6, 5], [3, 2, 1, 6], [4, 7, 3, 2, 0, 1, 5], [2, 1, 3], [5], [4, 5]], [7, 6, 1, 2, 4]) == 3757\nassert solution.maxCandies([0, 0, 1, 1, 0, 1, 1], [457, 519, 940, 781, 476, 959, 15], [[2, 6, 4, 0], [4], [1, 3, 2, 4, 5], [3, 6, 5, 2, 0, 4, 1], [0], [1, 5, 2, 3], [1, 0, 6, 5, 4, 3]], [[2, 0, 3, 4, 1, 5], [1, 4], [4], [5], [3, 6, 5, 1, 0, 4], [2, 5, 4, 6], []], [0]) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [789, 299, 483, 124, 701, 598, 763, 714, 695, 195, 386], [[4], [10, 9, 3, 7], [1, 9, 6, 7, 4, 3, 8, 0, 5], [9, 0, 5, 10, 6, 2, 8, 7, 4], [4, 7, 0, 10, 9, 5, 6, 2, 3, 1], [9, 10, 3, 7, 4, 5, 0], [2, 5, 9, 7, 1, 10, 3, 0, 4, 8, 6], [6, 1, 0, 3], [4, 3, 2, 0, 5, 8, 1, 10, 6, 9], [3, 7, 1, 10, 5], [4, 9, 0, 3, 6, 10, 8, 1, 2, 5]], [[4, 9], [0, 7, 8, 1], [0, 9, 4, 1, 5, 10], [10, 9, 0, 6, 5], [3, 8], [6, 1, 3, 5, 2, 10], [9], [10], [0, 1, 7, 4, 2, 10], [0, 8, 2, 9, 1, 3, 6, 4, 7], [4, 8]], [6, 4, 2, 1, 7, 0]) == 5747\nassert solution.maxCandies([0], [160], [[0]], [[]], [0]) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1], [106, 20, 646, 751, 244, 115, 787, 355, 779], [[3, 0, 1, 7, 2, 6], [0, 8, 2, 5, 3], [3, 7, 8, 5], [7, 1, 0, 4, 6, 5, 2, 8, 3], [3, 4, 0, 5, 6, 7], [5, 3, 4, 1, 8], [1, 8, 3, 4], [2, 5, 1, 7, 3, 8, 4, 6], [3, 8, 0, 6]], [[1, 6, 0, 2, 4, 7, 8, 5, 3], [], [], [4, 8, 5, 0, 1, 3, 6, 7], [0, 6, 8, 1, 7, 3, 4], [6, 5], [4, 0, 7], [1, 2, 3, 8, 0, 5, 4, 7], [0, 1, 7]], [4, 3, 6, 0, 2, 1, 8, 7, 5]) == 3803\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1], [494, 19, 350, 615, 392, 171, 663, 151, 926], [[4, 8, 5, 1], [1, 4, 3, 8, 2, 6], [3, 2, 4, 1, 0], [3, 5], [3, 6, 1, 0, 8, 7, 4, 5, 2], [5], [7, 2, 8, 3, 1, 5, 6, 0, 4], [5, 4, 1, 2, 8], [0, 8]], [[6, 8, 4, 5, 7], [1, 2, 7, 5, 4, 8], [6, 7, 0], [8, 7, 0], [6, 4], [], [5, 7, 2, 8, 4, 1, 3, 0], [6, 4, 1, 5, 8], [5, 7, 2, 0, 8]], [1, 8, 4, 7, 3, 2, 0]) == 3781\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [327, 852, 243, 488, 696, 43, 375, 58], [[1, 2, 3], [4, 1, 3, 7, 0, 5, 6, 2], [2, 1, 5], [1, 4, 7, 3], [2, 0, 6], [5, 6, 0, 3, 1, 2, 7, 4], [7], [2, 6, 3, 1, 7, 0, 4, 5]], [[4, 7, 1, 2, 5, 6], [6, 2], [0, 5, 1], [6], [1, 3, 7, 0, 4], [6, 0], [1, 5, 3, 7, 0], [3, 1, 5]], [6, 1, 0, 4, 2, 5]) == 3082\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1], [516, 968, 713, 816, 476, 640, 637], [[5, 4, 3], [4, 6], [2, 6, 5, 0, 1, 4], [3, 2], [6], [3, 4, 0], [6, 1, 0]], [[5, 2, 0, 1], [], [1, 2], [4, 6], [4, 6], [1, 5], [3, 4]], [2, 3, 4, 6, 5]) == 4250\nassert solution.maxCandies([1, 0], [773, 712], [[0, 1], [0]], [[0], [1, 0]], [1]) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1], [945, 670, 374, 902, 387, 538], [[4], [0, 4, 2], [1], [0, 4, 5, 2, 1, 3], [2, 4, 5, 0, 3, 1], [4, 1, 3, 5, 0, 2]], [[5, 2, 0, 1, 4, 3], [4, 3, 2, 1, 5, 0], [4, 5, 0, 2], [3, 0, 1, 2, 4, 5], [1, 0, 3], [1, 2]], [0, 4, 3, 1]) == 3816\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [867, 620, 341, 23, 978, 758, 433, 979], [[1, 7, 4, 5, 6, 2, 0], [7, 5, 3, 2, 0, 4, 6, 1], [1, 2, 4, 3, 5, 6, 7, 0], [5, 2, 6, 4, 7, 3, 0, 1], [5, 4, 6, 1, 0, 2], [6], [2, 4, 6, 1, 0, 3, 7], [5, 7, 0, 1, 3, 2, 6, 4]], [[7, 1, 6, 2, 0, 4, 5], [6, 1, 0, 7, 2, 3, 5], [0, 7, 3, 1, 2, 4, 6, 5], [6, 5, 0, 7], [7, 3, 1, 4], [0, 4, 2, 3, 5, 1], [], [0, 3, 4, 5]], [5]) == 4999\nassert solution.maxCandies([1], [326], [[0]], [[]], [0]) == 326\nassert solution.maxCandies([1, 1, 1, 1, 1], [445, 3, 648, 666, 328], [[3, 1, 2], [3, 1], [2, 4, 3], [1, 0], [4]], [[2], [2, 4, 1, 3, 0], [1, 2, 0, 4, 3], [], [0, 2]], [0, 2, 1, 4]) == 2090\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [399, 180, 175, 106, 82, 401, 594, 770, 164, 701], [[5], [7, 8, 9, 5, 0, 4, 3, 2, 1, 6], [1, 8, 6, 5, 0, 9, 3], [6, 1, 0, 7, 2, 4, 8, 9], [1, 8, 6, 2, 3, 7, 0, 4], [3], [1, 9, 0, 8, 2, 6, 3], [1, 9], [3, 8, 5, 6, 1, 9, 0], [6, 9, 7, 2, 1, 0, 5, 3, 8]], [[0], [4, 8, 7, 0], [4, 5, 6], [6, 8, 1, 7, 5, 2, 3, 9], [8, 7, 0, 2, 6, 9, 1, 3, 5], [3, 8, 1], [6], [3, 1], [1, 6, 8, 2, 4, 3, 9, 5, 7, 0], [7, 5, 9, 0, 1, 8, 4, 6]], [9, 2, 3, 6]) == 3572\nassert solution.maxCandies([0, 0, 0, 1, 1, 0, 1], [494, 899, 1000, 557, 951, 262, 965], [[5, 1, 6, 2, 3], [4, 1, 6], [5, 1, 4, 0], [4, 3, 1], [6], [4, 3, 2, 1, 5], [1, 0, 2, 3, 6, 4]], [[], [5, 2, 0], [1, 6], [6], [1, 5, 4, 0, 2, 6, 3], [4, 6, 1, 2], [5, 0]], [5]) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [760, 681, 788, 192, 92, 252, 828, 641], [[7, 2, 6, 4, 3], [0, 3, 1, 6, 5, 2], [3, 5], [2, 7, 4, 6, 1, 5], [7, 0, 3, 1, 6, 5, 4, 2], [5, 2, 7, 0, 1, 4, 6, 3], [6, 4, 0], [3, 6]], [[7, 0, 5, 4, 1], [6, 7, 5, 2, 3, 1], [5, 3, 1, 0, 6, 4, 7, 2], [0, 4, 3, 1, 5, 7], [7, 0, 5], [3, 6, 4], [3], [2, 3, 0]], [7, 4, 6, 2, 5, 1]) == 4234\nassert solution.maxCandies([1, 1], [124, 963], [[1, 0], [1, 0]], [[0], [1, 0]], [0]) == 124\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [973, 176, 470, 537, 323, 288, 831, 288, 860, 703], [[6, 2, 1, 8, 5, 4, 9, 7, 0], [5, 3, 1, 7], [1, 7, 3, 4, 9, 2], [4, 2, 6, 1, 0, 8, 3, 5], [3, 9, 1], [5], [2, 3], [6, 7, 5, 8], [4, 0], [4, 1, 8, 3, 2, 9]], [[6], [3], [2, 5, 7, 6, 9, 4, 1, 3, 0, 8], [1, 5], [5, 7, 4, 6, 1, 9, 2, 8], [8], [7, 9, 1], [8, 2, 9, 3, 5, 0, 4], [7, 2, 1, 0, 5, 6, 4, 9], [5, 7, 9, 1, 3]], [2, 6, 8, 0, 7, 9]) == 5449\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [934, 785, 832, 385, 616, 420, 852, 817], [[7, 0, 4], [1, 5], [1, 0, 7, 4, 6, 3, 5, 2], [3, 5, 1, 0, 4, 6, 7], [2, 6], [6], [1], [4]], [[0, 3, 4, 6], [7, 5, 2, 6], [4], [7, 6, 1, 5, 2, 0, 3], [6, 4, 7, 5, 3, 0, 1], [5, 0], [5, 0], [1, 4, 3, 7, 2, 0, 6]], [4]) == 5641\nassert solution.maxCandies([1, 0, 1], [342, 637, 308], [[2, 1, 0], [0], [0, 2]], [[2], [2, 1, 0], [2]], [1, 2]) == 308\nassert solution.maxCandies([0, 0], [399, 287], [[1, 0], [1]], [[1, 0], []], [0]) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [601, 435, 565, 512, 83, 369, 245, 407, 958, 36, 904], [[10, 8, 7, 9, 5], [9, 2, 7, 0, 4, 1, 3, 8, 5], [5, 9, 3, 10, 6, 4, 1, 2, 7, 8], [2, 4, 5, 10, 8, 0], [10, 1, 2, 8, 7, 6, 5, 9], [6, 10, 8, 1, 2], [10, 8, 4, 9, 1, 2, 0, 6, 5, 3, 7], [7, 3, 5], [7, 3, 1, 5, 4, 8, 0, 6, 2, 10, 9], [5], [6, 2]], [[9, 6], [9, 0, 7], [6, 0, 2, 4], [7], [8, 1, 9, 10, 2, 7, 3, 6, 4, 0, 5], [7, 6, 0, 5, 8, 1, 4, 10, 2, 3, 9], [7, 4, 0, 6], [7, 1, 0, 9], [4, 3, 8, 6, 5, 10], [9, 8, 2, 10, 3, 0, 1], [10]], [10, 4, 2, 8, 5, 3, 9, 1, 6, 7, 0]) == 5115\nassert solution.maxCandies([1, 1, 1, 1, 1, 1], [434, 960, 941, 130, 121, 72], [[5, 0, 4, 1, 2], [1, 4, 0, 5, 2], [0, 2], [2], [2, 0], [0, 5, 3, 2]], [[2, 5], [1, 4, 0, 3], [4, 0, 3, 2, 5, 1], [2, 1, 4], [3, 1, 2, 4, 5], [5, 3, 1, 0]], [1, 2]) == 2658\nassert solution.maxCandies([0, 1, 1], [695, 560, 330], [[1, 0], [1, 2], [1, 2, 0]], [[], [], [1, 0]], []) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [774, 165, 199, 497, 412, 190, 125, 30, 297, 411, 465], [[6], [8, 10, 2, 9], [4, 10, 3, 7, 5, 8, 2, 6, 0, 1, 9], [5, 1, 6, 9, 2, 10], [3, 2, 0, 8, 9, 5, 7, 4], [10, 4, 2, 5, 0, 1, 3, 7, 6, 8, 9], [0, 6, 10, 4, 3, 8, 5], [9], [4, 9, 2, 6], [3, 7, 0, 6, 2, 8, 10, 1, 9, 4, 5], [4, 7, 8, 10, 0, 3]], [[4, 2, 7], [0, 5, 8], [3, 7, 6, 1, 4, 10, 9, 8, 5], [8, 5, 3, 2, 0], [0, 10, 1, 3, 4], [], [2, 6, 1, 7, 3, 10, 0, 8, 4, 9], [0, 6, 1, 5, 4, 3, 8, 7], [1, 3, 6, 10, 2, 4, 9, 5, 8, 7], [7, 9, 10], [8, 6, 7, 4, 9, 5, 0]], [4, 7, 6, 1, 5, 9, 10, 3, 2]) == 3565\nassert solution.maxCandies([1, 1], [183, 283], [[1], [1, 0]], [[1], [0, 1]], [1, 0]) == 466\nassert solution.maxCandies([1, 1, 1, 1, 1], [736, 645, 650, 189, 964], [[0, 1, 3], [4, 2, 3, 1], [2, 3, 0, 1], [4, 2, 3, 1], [2]], [[4], [], [0], [], [0, 2]], [2, 1, 3]) == 3184\nassert solution.maxCandies([1, 1, 1, 1, 1], [239, 39, 122, 661, 632], [[2, 0, 3, 4, 1], [3, 0, 4, 1, 2], [3, 2, 4, 1, 0], [2, 3, 4, 0], [1, 4, 2]], [[1, 3, 4, 0, 2], [1, 0, 3], [4, 3, 0], [3, 2, 4, 1], [0, 3, 2]], [4, 3, 1, 0, 2]) == 1693\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [796, 915, 913, 48, 940, 97, 971, 955, 113, 240], [[5, 6, 1, 9, 7], [6, 2, 8, 0, 7, 9], [4, 8, 3, 2], [9, 2, 3, 8, 0, 4, 7, 5], [1, 2], [8, 1, 4, 3, 0, 2], [9, 4, 5, 0, 2, 6, 1, 7], [0, 3, 2, 9, 5], [1, 5, 0, 3], [9, 2, 4, 8, 6, 3]], [[5, 2, 7, 3, 8, 9], [0, 9], [2, 8, 6, 1, 0, 7, 3], [], [3, 0, 6], [0, 2, 3, 7, 4, 6, 1, 9, 8, 5], [1, 2, 3, 8], [7, 5, 0, 9, 2, 3, 4], [5, 9, 7, 4, 3, 8, 2, 0, 6], [5, 2, 7, 1, 6, 0, 4, 9]], [0, 1, 2, 3, 7, 4, 6, 8, 9]) == 5988\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [727, 347, 560, 56, 778, 668, 826, 545, 777, 601], [[3], [5, 3, 1], [0, 8, 1, 4, 7, 3], [3, 9, 6, 7, 1], [7], [5, 4, 8, 9, 3, 0, 2, 6, 1], [1, 6, 8, 0, 4, 5, 2], [7, 1], [1, 4, 5, 2], [6]], [[4, 3, 8, 0, 5, 1, 7], [5, 2, 9, 7], [6, 0, 1, 2, 8, 9, 4, 3], [9, 8, 4], [0, 4], [4, 2, 7, 0, 8, 9], [0, 9, 1, 4, 6, 7, 2, 3, 8, 5], [5, 7, 8, 4, 0, 3, 6, 9, 1, 2], [3], [1, 9, 6]], [6, 4, 9]) == 5885\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1], [596, 194, 913, 190, 323, 448, 691], [[1, 5], [1, 6], [3, 1, 5, 2, 0], [3, 0, 2, 1, 6, 4], [2, 4, 0], [4, 5, 0, 3, 6, 1], [6, 2, 3, 0, 5, 4, 1]], [[5, 3, 2, 6, 1, 4, 0], [2, 3, 0, 6, 1], [2, 3], [2, 1, 4, 3, 5, 6, 0], [2, 6, 5, 0, 4, 1], [1, 5, 0, 2], [6]], [4, 3, 1, 2, 0, 6, 5]) == 3355\nassert solution.maxCandies([1, 1, 1, 1, 1, 1], [902, 564, 397, 565, 566, 424], [[5, 1, 3, 0], [2, 0, 3, 4, 5, 1], [2], [1, 0, 4, 2, 5, 3], [1, 3, 0, 2], [4, 1, 2, 5]], [[], [2, 0, 4], [1, 4, 0], [], [], [1, 0, 4, 5, 3]], [5, 0, 4, 3, 2]) == 3418\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1], [408, 757, 195, 562, 623, 17, 667], [[2, 6, 5, 3, 1, 0, 4], [5, 0, 1, 6, 4, 2], [4], [0, 5, 3, 4], [2, 5, 4, 0, 1, 3], [4, 1, 2, 0, 6], [3]], [[2], [], [4, 6], [6, 1, 5, 3, 4, 2, 0], [6, 3, 5, 1, 2], [1, 0, 2, 6], []], [4, 2, 6, 3, 0, 1, 5]) == 3229\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [220, 908, 354, 742, 57, 142, 269, 880, 296, 123, 140], [[1, 3, 8, 10, 2, 7, 0], [6, 7, 2, 9, 5, 4, 3], [1, 10, 8], [9, 3, 1, 6, 4], [10], [2, 5, 1, 7, 4, 10, 0, 3], [0, 7, 4, 8, 2, 1], [7, 0, 9, 1, 4, 8, 2], [6, 1], [6, 3, 1, 7, 5, 10, 0], [2, 3, 10, 8, 4]], [[9, 1, 10, 5, 3, 6], [7, 1, 3, 2, 6, 4, 8, 5, 10], [10, 9, 4, 8], [3], [0, 1, 5, 2, 7, 8, 10, 9, 4, 3, 6], [5, 3, 9, 7, 4, 10], [9, 3, 7, 1, 0, 4, 2, 10], [2, 9, 4], [10, 1, 4, 8, 5, 6, 9, 2], [2, 4], [2, 10, 0, 8, 3, 9, 5, 6, 1, 7]], [5, 7, 2, 4, 8, 10, 9, 3, 0, 6, 1]) == 4131\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1], [655, 484, 776, 583, 422, 429, 225, 170], [[1, 7, 6, 4, 0], [1, 2, 7, 3], [3, 2, 6, 7, 5, 0, 4], [2, 6, 0], [2, 1, 3, 7, 4], [2], [4], [7]], [[], [7, 4, 0, 2, 1, 6], [1, 2], [6, 0, 7, 5, 1], [3, 1], [2, 4, 0, 7, 6, 1, 3, 5], [6, 4, 3, 1, 0, 5, 2, 7], [7, 5]], [2, 6, 0, 4, 3, 5, 1]) == 3744\nassert solution.maxCandies([0, 0, 1, 0, 0, 0], [417, 54, 417, 634, 241, 74], [[4, 5, 1, 3, 0], [4, 0], [2], [3], [0, 4, 5], [4]], [[4], [3, 4, 1, 5, 0], [3], [1, 3, 5, 0], [4, 3, 1, 2, 0, 5], [0, 2, 1, 5, 3, 4]], [4, 1]) == 0\nassert solution.maxCandies([1, 1], [586, 132], [[1], [1, 0]], [[1, 0], [0, 1]], [0]) == 718\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [39, 608, 857, 142, 997, 774, 63, 132, 358, 183, 375], [[10, 2, 1, 0, 6, 5, 3, 9, 8], [8, 7, 5, 1, 2, 6, 9, 3, 10], [1, 2, 9, 4, 0], [3, 10, 1, 6, 9, 7, 2, 4, 5], [0, 2], [7, 3, 1], [0, 3], [2, 0, 7], [0, 9, 10, 7, 3, 2, 1, 5, 6], [1, 6, 9, 5, 10, 0, 4, 7, 2, 3, 8], [8, 3, 2, 6, 7, 0, 9, 5]], [[2, 1, 8, 6, 4, 10, 7], [0, 3, 5, 4, 2, 6, 9], [3, 7, 4, 10, 0, 6, 8, 5, 9, 1, 2], [4, 1, 3, 6], [1, 4, 8, 3, 5, 6, 9, 10], [], [1, 4, 6, 8, 10, 5, 0, 3, 7, 2], [2, 6], [1, 8, 5, 0, 4, 6, 9, 3, 2, 7], [7, 2], [9, 7, 4, 8, 3, 10]], [8, 7, 10]) == 4528\nassert solution.maxCandies([1, 1, 1], [700, 775, 369], [[0, 1, 2], [1], [0, 2]], [[], [1, 2, 0], [0]], [2, 1]) == 1844\nassert solution.maxCandies([1, 1, 1, 1, 1], [700, 533, 269, 378, 972], [[4, 1, 0], [0, 1], [0, 1], [1, 0], [2, 1, 0, 3, 4]], [[1, 0, 2], [3, 0], [1, 3, 2, 0, 4], [2, 3, 0, 4, 1], [4, 0, 2, 3]], [2, 4, 3, 1, 0]) == 2852\nassert solution.maxCandies([1, 1, 1, 1, 1], [9, 622, 115, 415, 746], [[4, 3], [4, 1, 0], [2, 3, 1], [1], [1, 0, 2, 4, 3]], [[3, 0, 4], [4, 2, 3, 1, 0], [1, 0, 2, 3], [0, 2, 3, 1, 4], [1, 3, 2]], [4, 0, 2, 1, 3]) == 1907\nassert solution.maxCandies([0, 0], [427, 683], [[0, 1], [0, 1]], [[1, 0], []], []) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1], [451, 151, 703, 99, 658, 110, 490, 342, 78], [[0], [6, 0, 4, 1, 7, 2, 8, 5], [6], [5, 2, 4, 7, 0, 1, 6, 3], [8, 1, 6, 0, 5], [8, 0, 6], [7, 6, 0, 4, 8, 5, 1, 3], [1, 7], [4, 3, 1, 5, 7, 6, 8, 2]], [[3, 8, 2], [4], [5, 3, 4, 7, 2, 6, 8, 1, 0], [1, 0, 6, 7, 4, 5, 2, 3], [7], [7, 0, 3, 8], [6, 7, 8, 0, 3, 1, 2, 5, 4], [3, 1, 5, 6, 0], [5, 6]], [6, 0, 8, 3, 1]) == 3082\nassert solution.maxCandies([0, 0], [957, 583], [[0], [1]], [[], [1, 0]], []) == 0\nassert solution.maxCandies([1, 0, 1, 0, 0, 0, 0], [500, 428, 121, 40, 445, 66, 784], [[1, 6, 5, 3, 4], [2, 4, 3, 6, 1, 5, 0], [5, 4, 3], [1], [2, 0, 3], [4], [5]], [[], [6, 4, 3], [0, 2, 3, 6, 1, 4, 5], [2, 4, 1, 6, 0], [2, 0, 4, 6, 1, 5], [1, 2], [1, 6, 3, 5, 2, 0, 4]], [4]) == 0\nassert solution.maxCandies([0], [12], [[0]], [[0]], []) == 0\nassert solution.maxCandies([1, 1, 1, 1, 1, 1, 1, 1, 1], [256, 298, 251, 154, 424, 185, 646, 107, 328], [[3, 0, 2, 7, 4, 8], [7, 3, 6, 4], [0, 2, 4, 8, 5, 6], [5, 2, 7, 6], [5, 4, 2], [1, 2, 0, 5, 6], [8, 1], [8, 6], [8, 5, 4, 1, 3, 2]], [[], [3, 1, 6, 5], [5, 0, 1, 2, 7], [5, 4], [2, 5, 3, 0, 8], [7, 8, 0, 3, 2, 4, 5, 1, 6], [3, 1, 2, 8, 4], [5, 2, 0, 3, 7, 4, 8], [4, 8, 2, 3, 1]], [0, 6, 8, 1, 5, 2, 3]) == 2649\nassert solution.maxCandies([1, 1, 0], [241, 531, 450], [[2, 1], [2], [2, 0]], [[], [2, 0, 1], []], []) == 0\nassert solution.maxCandies([0], [734], [[0]], [[0]], []) == 0",
  "inefficient_solution": "class Solution:\n    def maxCandies(\n        self,\n        status: List[int],\n        candies: List[int],\n        keys: List[List[int]],\n        containedBoxes: List[List[int]],\n        initialBoxes: List[int],\n    ) -> int:\n        boxes = {}\n        q = deque()\n        \n        for i in range(len(status)):\n            boxes[i] = {'status': status[i], 'candies': candies[i], 'keys': keys[i], 'containedBoxes': containedBoxes[i]}\n        \n        for i in initialBoxes:\n            if boxes[i]['status'] == 1:\n                q.append(i)\n        \n        ans = 0\n        has = set()\n        took = set()\n        \n        while q:\n            i = q.popleft()\n            ans += boxes[i]['candies']\n            if boxes[i]['status'] == 1 and boxes[i]['candies'] not in took:\n                took.add(boxes[i]['candies'])\n            for k in boxes[i]['keys']:\n                if boxes[k]['status'] == 0:\n                    boxes[k]['status'] = 1\n                if boxes[k]['status'] == 1 and boxes[k]['candies'] not in took:\n                    took.add(boxes[k]['candies'])\n                    q.append(k)\n            for j in boxes[i]['containedBoxes']:\n                if boxes[j]['status'] == 1 and boxes[j]['candies'] not in took:\n                    took.add(boxes[j]['candies'])\n                    q.append(j)\n                has.add(j)\n        \n        for i in range(len(status)):\n            if boxes[i]['status'] == 0 and boxes[i]['candies'] in took:\n                ans += boxes[i]['candies']\n        \n        return ans",
  "is_python": true
}