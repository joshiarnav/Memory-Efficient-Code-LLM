{
  "problem_idx": 1234,
  "task_name": "Replace the Substring for Balanced String",
  "markdown_description": "\nYou are given a string s of length `n` containing only four kinds of characters: `'Q'`, `'W'`, `'E'`, and `'R'`.\n\n\nA string is said to be **balanced**if each of its characters appears `n / 4` times where `n` is the length of the string.\n\n\nReturn *the minimum length of the substring that can be replaced with **any** other string of the same length to make* `s` ***balanced***. If s is already **balanced**, return `0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"QWER\"\n**Output:** 0\n**Explanation:** s is already balanced.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"QQWE\"\n**Output:** 1\n**Explanation:** We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"QQQW\"\n**Output:** 2\n**Explanation:** We can replace the first \"QQ\" to \"ER\". \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == s.length`\n* `4 <= n <= 105`\n* `n` is a multiple of `4`.\n* `s` contains only `'Q'`, `'W'`, `'E'`, and `'R'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def balancedString(self, s: str) -> int:\n        cnt = Counter(s)\n        n = len(s)\n        if all(v <= n // 4 for v in cnt.values()):\n            return 0\n        ans, j = n, 0\n        for i, c in enumerate(s):\n            cnt[c] -= 1\n            while j <= i and all(v <= n // 4 for v in cnt.values()):\n                ans = min(ans, i - j + 1)\n                cnt[s[j]] += 1\n                j += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def balancedString(self, s: str) -> int:\n        cnt = Counter(s)\n        n = len(s)\n        if all(v <= n // 4 for v in cnt.values()):\n            return 0\n        ans, j = n, 0\n        for i, c in enumerate(s):\n            cnt[c] -= 1\n            while j <= i and all(v <= n // 4 for v in cnt.values()):\n                ans = min(ans, i - j + 1)\n                cnt[s[j]] += 1\n                j += 1\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    s = ''.join(random.choices(['Q', 'W', 'E', 'R'], k=random.randint(4, 100)))\n    expected_result = solution.balancedString(s)\n\n    return s, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.balancedString(s) == expected_result\n        print(f\"assert solution.balancedString('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.balancedString('{s}') == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.balancedString('EEEQQWEQEQEWWQWQWRWRWEEQEWERWERWRWWQWWQEQRWEERWWWRQEEEEQWQEQQREWWQWWQQERWWQRWE') == 14\nassert solution.balancedString('WREQEWEWWWREEEQQQEEWQRWWEEWRWERWQWQEEWQQERQEWRQQQWRRREEEQEWWWEWWWQE') == 11\nassert solution.balancedString('WRRQEWREQRWWERQWWQWWRWRWEE') == 6\nassert solution.balancedString('EREWWREWQEWQQREEQRWRRQREEWWEEREQQRREREWRERWWQQRQREWWWQEQQQWWWQQQEWRREWRWQ') == 1\nassert solution.balancedString('QQQEQQEEE') == 5\nassert solution.balancedString('QERQRRQEREWWWERQWREWRWWEEEQWQWQRWEREWEWRWWWWRRQWQQWRQWRRQRWERRRQQQEQREWQERWRWWRRQ') == 10\nassert solution.balancedString('RQQWWRWWWWRWQWRWEWWWRWQWERRWWRRWWRWEEWRRRQW') == 16\nassert solution.balancedString('WRWEQQQQQWEEWQWRQWRRWQRREWWWWREEEEEREQWQEQERQQWWRWREEREQEEERRERRRREQRR') == 6\nassert solution.balancedString('QERQEEEEEEERWRQWQQRQQEQWWRQWWRRWREQRQQEQERRWWEEEQRQEWQWRQ') == 5\nassert solution.balancedString('EEQERRQQQRQRRQRWWRRWQQWWWQEERWRERRWWWRQRQRWEEWEE') == 4\nassert solution.balancedString('EWWWRRRWWQWEW') == 6\nassert solution.balancedString('WQRQWERQRRRRRRRWQQWRQQWWQREEWQEQERRQQEWQWQEQWRRQQWRQWRRWQWWREEEEWRWEQQ') == 9\nassert solution.balancedString('EQWQQEWQWWQ') == 6\nassert solution.balancedString('EERRWEWQRRWW') == 2\nassert solution.balancedString('ERQQEQRWRQEQEEQWERREQEQQQWQRWEERERERRREERRREWQRWRQWQRRRWQQRWQRERERRRWQEEWWQQ') == 10\nassert solution.balancedString('QRQQEWRRREQEEQEREQEEQWEQWRRWRQREQRQQWRERRQRRRWRQWWWQWRQWEQQQRWQREWERQEQWEEWREWRRRRWRQREERRRRWRWREQ') == 14\nassert solution.balancedString('WQEQWRQWRWEW') == 3\nassert solution.balancedString('WQQQEWEWWQEQEWQWWRWWRRRRERERRREREWW') == 5\nassert solution.balancedString('QWERRREQWQRRQWWEEQRQRQRQEWWWQQERRWQWQEWEEEQWQEQEWWEWREWRWQEQQWWWREWRRRERRWWEQQQREQ') == 4\nassert solution.balancedString('QRRWQEREQWEQQRRRQQRQEERR') == 5\nassert solution.balancedString('QEWRWRWEQWREQERWQEWWQEEQERWQRRQQREERWQREERWWRQWQWQWRQR') == 3\nassert solution.balancedString('RRQEQWRRWEEWWEEWWQWRQWQEEERWWQQEWEQWWQQRRQWWE') == 6\nassert solution.balancedString('WRQRRQREQWRQWEWEEWEEERRWEQWWRRWRRQRER') == 5\nassert solution.balancedString('WRQEERWRERQERWRRWRQQRQQEEQWERWWQEQRQERWWQQRQQWQE') == 4\nassert solution.balancedString('RQQRERRQQEQQRRQEQQQQEEERWQEEEQQEQ') == 11\nassert solution.balancedString('EEWWQREEWEWEQQQWEEQEEQRERQQREQWEEWQQWRQRQEE') == 12\nassert solution.balancedString('EWQQRREREQQRQEREQRREERRREWQEWW') == 5\nassert solution.balancedString('RWQRQQRQWWWW') == 3\nassert solution.balancedString('WEQQWWWRWQREWWEWWEWWWWE') == 10\nassert solution.balancedString('QQWQRERQRQREREQQQEQRWWWWREEQRWEERRRRWRRWQEERQEQQREQQQERRQRWQQRWQQEEEEWERQQREEQQWQQEQRWWQEQRQWQRQ') == 19\nassert solution.balancedString('EEWRRWRQEERQWWQQEQEWEWEEQRWWWEERWEQERREQEWWREEWQRWEWREWWQWRRWERQQRQEEREQRWQQ') == 6\nassert solution.balancedString('WQRWRRQREWWEWEQREQRQWRQQQWWWRQERREE') == 4\nassert solution.balancedString('QRQQQQWWRREQRWRWRWQQREWEQRQWQRQWREQEWQRWEWEREQEQEERQEQEQRWEQRREQWRWWRWRERWREWRRERQQQWEEQREWEREQRQRRW') == 7\nassert solution.balancedString('QQQQWRQWQEQWQQEQREQRREWRERWWQEEEEWEWWQEEERRRWQEQEEWRREREREQRRQEQWQRQWEWREQREWW') == 9\nassert solution.balancedString('RRQRRQEEQEEWRQQEQERQWWQWQREWEWERERQQQQRWWWRWREQRWQERRREQQEWQWQRWRWRREQRRQWRQWRWRWRQEQREWR') == 11\nassert solution.balancedString('QWREQRREQWWREREEWQEEQWREQQQWERWWQREQQEWWWEEWRQQQQWQWEQR') == 7\nassert solution.balancedString('QWEEWEWRQRRRRWEQEWQWRWWEE') == 3\nassert solution.balancedString('RERWQRREQWRQREQRWEQEWQQWQEQWWQEQQQRWRREQEEQWWEQRQREERQQQRQRWQRQQERQRRRRWERREQQEQEWREREW') == 12\nassert solution.balancedString('WEEWEQRQRRQEQREWRWQQQREWREEQEQWEWEWQERQWRRWQQWE') == 4\nassert solution.balancedString('WRQEQRERRWQQEREQWQEWEEEREWRQQRWEERRRQREERREERWWWQEEWQWRWRRWQWREWWEWWQREWWQWERRQEQEQRQEEEERQ') == 9\nassert solution.balancedString('QERQQQQEEWWQWQRQREWWWEQEREERRWQWWERQRRQQRR') == 4\nassert solution.balancedString('RWQEQEWRRWWEERQWQRQ') == 3\nassert solution.balancedString('ERRWREQRWERWRQQ') == 4\nassert solution.balancedString('QRWWWQEREEQEEEQWERQEQRE') == 5\nassert solution.balancedString('RQREWQQRWWWERWRERRQERRWRRWEWEWWQE') == 5\nassert solution.balancedString('QEEWEWREWWEEQRWEQWWQQEEWQRQQEQEWQEQERREWWQWWEWEWRRERRQRERWREEWQQRWWWERRQERQWQEEERRWQRRRQWQQWRWEE') == 4\nassert solution.balancedString('WRWEWQQEQRQQRWEERWWWRWWQWWWQRQEEQEWERQEWEEQWRRREWEWRWQQERQWEQRWRQRERQQQERWRERREQWERWRREWW') == 4\nassert solution.balancedString('EERERWERQQQEWWEEWWQRWERRERERRRQQEREEEQQQWQQRQQRQQEQWRRRWQRQWE') == 7\nassert solution.balancedString('RRWWWQREWWRWQREWQEWWQWQWERWERRRRERWERERREQQQEQRWRRQWEQRRRRWEWRWEWERWEQEWQRWWWWEEERWERERWQEEERQR') == 13\nassert solution.balancedString('QRQRQRQQREWWQWWEEQE') == 4\nassert solution.balancedString('WWRERQERRRRWWWQEQREEQRRWEEERRQQQWWEEERRERWWERWWQERRWQWQQWQWQRR') == 5\nassert solution.balancedString('REQWQRWRWQRRREEWQWRERRERWERRRRWWEQQEQEEQEREEEWQRRRQWEEQQR') == 8\nassert solution.balancedString('EWWQRRWQWRWQWREQWQQQWERWRERQRWQQREWWREQWRWQRRRWQWQEWREWRR') == 9\nassert solution.balancedString('WERRWEERRWQQEQWWWEEEWEW') == 6\nassert solution.balancedString('WRQWWQWEEWRRWRRRQEQQQRQQWRWRREQERWWREQQE') == 3\nassert solution.balancedString('RREQWQREWQWERQREEWWEEQRWWRWQRWWRQEWRWRREEQWW') == 4\nassert solution.balancedString('RERWEQQQRWERWEQERRWEQEWRQWWWRQRRWRWWEWREEWWQQRRERRWR') == 7\nassert solution.balancedString('WWEQREQREWQWWWWRQWQEQWQWWEQQRQQQWEREWRREQRQRRERRWRRQQWREQQEEEWRWRWQWRERQRRWEERQQREEEQWQERQERQERRQQ') == 9\nassert solution.balancedString('WWRRQEWWERWQRQRRRQEERERQQQQEREQWWQWEERWRQQRWREWWQWQEQQQRRRERQQEWEREQQEQEWWEWQERERRREWR') == 5\nassert solution.balancedString('QREEQQQQWRQWRRRRRRERRWEWERWEQQRWREEQRQERREQRWRWQWQQ') == 10\nassert solution.balancedString('QEERWRWWWEQWEEWWRWWQWQEWQERWWEQQEERQWQEEQWQRRRQRWEQEQWQQQWWQRWEERRRQRERWEEERRQRQEWQERQEQRR') == 3\nassert solution.balancedString('WWEQQEQWQEQEQQWRWWREQRRWEQQQQRRWRRQRQWWWWRRQWQQWRRWQREEQERWQQQWQQRQWEQREQQQWQWEWWQQRRWWEW') == 17\nassert solution.balancedString('RRQEWWWWWWQWEWWQRRRQWRQQQWQRWWEWQQRREQE') == 8\nassert solution.balancedString('RWQQEEQQRQEREQEQEEQRQRWRQWR') == 7\nassert solution.balancedString('QQQWEEWQRQWQWQWEEERQQQWEWEQ') == 10\nassert solution.balancedString('RERWERQRWR') == 5\nassert solution.balancedString('RQERREEEQQRRWRRQWWEQRQEQQQEERW') == 5\nassert solution.balancedString('RREQRRQWWWQWRQEQWEWRWWRWEEQ') == 4\nassert solution.balancedString('WEQWEWQQQQQQWQERRQWEWQWRWWRWW') == 11\nassert solution.balancedString('WQQEEWWQWERWRWWWRWWWQRQQEWERRWRQEEWREEQRWRWRQRW') == 7\nassert solution.balancedString('QEWRERQQWQRQQRWQWWRRWQEEWEWWQRQQQQQEQERRQQEE') == 7\nassert solution.balancedString('RWWQEWWEQ') == 2\nassert solution.balancedString('WWQRWQWRWRQRWEEEERREEQWWWWWEQQQQQEREWQEWWQWQERQRRERQRWWQWW') == 6\nassert solution.balancedString('EQEEWEQQQWRWWWRRQWRQQRERRQRQWRQREEWEEEQQEWWRRWQRQEEREEQEWR') == 4\nassert solution.balancedString('EWWWWRWEREWRRWWERQQEREWEWWRRREWREQWEERRWRRQQQQEQQRQEQREWEQQQWQRQRWQEWQQRQRWERQWQRWEWQQ') == 5\nassert solution.balancedString('WWRREEWQWRQRQWRRQRWRERWWQEEWREQ') == 6\nassert solution.balancedString('REEREREWQREEWWQQREQQRERWEWWQRREQQEQWQQRQERRWWWE') == 4\nassert solution.balancedString('EQWWRRERQEQQQRRRQEWQEQRRRRRWWQWEWQ') == 5\nassert solution.balancedString('EWWWRWWRRWRQRERQQWQRWQEQQEEQER') == 3\nassert solution.balancedString('QREWQRWRREEQEWQREWEWERQRRWEWQRWEEQREQQEQEWWQERWQEEQREERQQWQQWREWQRQEW') == 6\nassert solution.balancedString('ERWWQWQQREQREEQWQRWRWEEWRQQWW') == 3\nassert solution.balancedString('RREQEQREWRWQ') == 1\nassert solution.balancedString('QRQRREWQRREWRWQEEREQRRRWERRERWERRQQEQREQEEEERQQERRQEQ') == 11\nassert solution.balancedString('QEREQEEWWEREWQRRRWREQRWWQQERREERQREWRWRE') == 5\nassert solution.balancedString('EWRRREWWQQEWEWQEWEWRWWEQEWEQEQWRWWQQRREEEQEEEEWERREERRWWWRRQQRQWRRRQRWQWRWWRWWQRWQQE') == 5\nassert solution.balancedString('QERQQWEEEQWWRRWWWEWWREQWEEQWWREQQEERREEWERWRQWQEEQEEERQWQQWEQWQWEWRERWWQRQRRWQEEEEWEWWEERWQQEQQW') == 9\nassert solution.balancedString('WRQREWWQ') == 1\nassert solution.balancedString('RQQQWREEWQWWEWREWQEEQREEEWWQQ') == 4\nassert solution.balancedString('ERWEEEQREEERQRRWWERQRQEQERWR') == 5\nassert solution.balancedString('EQQWEQQERWRRQWRRWWQWWWQRRWRQRQEEWRWRRQEREQWRWRQRREWEQQWEEQERQRE') == 6\nassert solution.balancedString('RRRERWEWRQWQREQRRWWWRQRRREQQRRRERRWQEQREQRREREQWQQWQQQWQEQEREEWEWQWRRQEQEWWWQR') == 9\nassert solution.balancedString('EQQRWEWRQWRQ') == 1\nassert solution.balancedString('WRWRQRWRQRQQEQQRRERWQQRWQEQQWWRE') == 5\nassert solution.balancedString('QQQWEQQRRWWWWREQRWRRQERQRRRRQRWRRWEQRERWEQEERWRQEERRWRWQWERWQQE') == 9\nassert solution.balancedString('EWEWERQWQQWEREWQWEEQQQEQQWWRQWQWR') == 5\nassert solution.balancedString('WQERRWEQWRRRQEQQEQRWQWQWWRWQEQWRRERQEQWEERWQRQWERWQWEEE') == 3\nassert solution.balancedString('WQREEEWERRWWQWQEWRQEEQEQRRQRWERREEQWWEWQWEQREEWRRRQRR') == 4\nassert solution.balancedString('QWWWRQWRQQWEEWQWWQWEQREQRQR') == 7\nassert solution.balancedString('RERWQRQWEEREREQREQEQRQ') == 5\nassert solution.balancedString('RRQRRQEQRQWWRWEWRQRWRRQQEERREEEEWWERQQQQ') == 4",
  "inefficient_solution": "class Solution:\n    def balancedString(self, s: str) -> int:\n        cnt = [0] * 4\n        for c in s:\n            cnt[ord(c) - ord('Q')] += 1\n        n = len(s)\n        if all(v <= n // 4 for v in cnt):\n            return 0\n        ans = n\n        for i in range(n):\n            for j in range(i, n):\n                temp = list(cnt)\n                for k in range(i, j + 1):\n                    temp[ord(s[k]) - ord('Q')] -= 1\n                for k in range(4):\n                    temp[k] = abs(temp[k])\n                if all(v <= n // 4 for v in temp):\n                    ans = min(ans, j - i + 1)\n        return ans",
  "is_python": true
}