{
  "problem_idx": 1736,
  "task_name": "Latest Time by Replacing Hidden Digits",
  "markdown_description": "\nYou are given a string `time` in the form of  `hh:mm`, where some of the digits in the string are hidden (represented by `?`).\n\n\nThe valid times are those inclusively between `00:00` and `23:59`.\n\n\nReturn *the latest valid time you can get from* `time` *by replacing the hidden* *digits*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** time = \"2?:?0\"\n**Output:** \"23:50\"\n**Explanation:** The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** time = \"0?:3?\"\n**Output:** \"09:39\"\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** time = \"1?:22\"\n**Output:** \"19:22\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `time` is in the format `hh:mm`.\n* It is guaranteed that you can produce a valid time from the given string.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumTime(self, time: str) -> str:\n        t = list(time)\n        if t[0] == '?':\n            t[0] = '1' if '4' <= t[1] <= '9' else '2'\n        if t[1] == '?':\n            t[1] = '3' if t[0] == '2' else '9'\n        if t[3] == '?':\n            t[3] = '5'\n        if t[4] == '?':\n            t[4] = '9'\n        return ''.join(t)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumTime(self, time: str) -> str:\n        t = list(time)\n        if t[0] == '?':\n            t[0] = '1' if '4' <= t[1] <= '9' else '2'\n        if t[1] == '?':\n            t[1] = '3' if t[0] == '2' else '9'\n        if t[3] == '?':\n            t[3] = '5'\n        if t[4] == '?':\n            t[4] = '9'\n        return ''.join(t)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random time string with hidden digits\n    time = \"\"\n    for i in range(5):\n        if i == 2:\n            time += \":\"\n        else:\n            if random.random() < 0.5:\n                time += str(random.randint(0, 9))\n            else:\n                time += \"?\"\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumTime(time)\n\n    return time, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        time, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumTime(time) == expected_result\n        print(f\"assert solution.maximumTime('{time}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.maximumTime('{time}') == '{expected_result}'\")  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumTime('?3:?3') == '23:53'\nassert solution.maximumTime('??:??') == '23:59'\nassert solution.maximumTime('8?:??') == '89:59'\nassert solution.maximumTime('?3:0?') == '23:09'\nassert solution.maximumTime('5?:??') == '59:59'\nassert solution.maximumTime('3?:9?') == '39:99'\nassert solution.maximumTime('0?:44') == '09:44'\nassert solution.maximumTime('84:5?') == '84:59'\nassert solution.maximumTime('25:?9') == '25:59'\nassert solution.maximumTime('4?:??') == '49:59'\nassert solution.maximumTime('13:??') == '13:59'\nassert solution.maximumTime('??:?7') == '23:57'\nassert solution.maximumTime('?6:?0') == '16:50'\nassert solution.maximumTime('?8:22') == '18:22'\nassert solution.maximumTime('34:3?') == '34:39'\nassert solution.maximumTime('?6:60') == '16:60'\nassert solution.maximumTime('??:??') == '23:59'\nassert solution.maximumTime('??:??') == '23:59'\nassert solution.maximumTime('3?:60') == '39:60'\nassert solution.maximumTime('?9:??') == '19:59'\nassert solution.maximumTime('??:05') == '23:05'\nassert solution.maximumTime('??:5?') == '23:59'\nassert solution.maximumTime('4?:43') == '49:43'\nassert solution.maximumTime('?1:41') == '21:41'\nassert solution.maximumTime('?9:08') == '19:08'\nassert solution.maximumTime('??:1?') == '23:19'\nassert solution.maximumTime('89:??') == '89:59'\nassert solution.maximumTime('?4:?9') == '14:59'\nassert solution.maximumTime('6?:34') == '69:34'\nassert solution.maximumTime('?4:?8') == '14:58'\nassert solution.maximumTime('??:4?') == '23:49'\nassert solution.maximumTime('??:??') == '23:59'\nassert solution.maximumTime('?0:?8') == '20:58'\nassert solution.maximumTime('51:?6') == '51:56'\nassert solution.maximumTime('3?:?3') == '39:53'\nassert solution.maximumTime('39:6?') == '39:69'\nassert solution.maximumTime('4?:??') == '49:59'\nassert solution.maximumTime('??:93') == '23:93'\nassert solution.maximumTime('76:??') == '76:59'\nassert solution.maximumTime('?7:??') == '17:59'\nassert solution.maximumTime('??:?5') == '23:55'\nassert solution.maximumTime('??:5?') == '23:59'\nassert solution.maximumTime('3?:88') == '39:88'\nassert solution.maximumTime('0?:?5') == '09:55'\nassert solution.maximumTime('58:??') == '58:59'\nassert solution.maximumTime('?6:61') == '16:61'\nassert solution.maximumTime('63:?4') == '63:54'\nassert solution.maximumTime('3?:?1') == '39:51'\nassert solution.maximumTime('59:0?') == '59:09'\nassert solution.maximumTime('??:?7') == '23:57'\nassert solution.maximumTime('??:4?') == '23:49'\nassert solution.maximumTime('?8:3?') == '18:39'\nassert solution.maximumTime('?1:2?') == '21:29'\nassert solution.maximumTime('?4:11') == '14:11'\nassert solution.maximumTime('1?:18') == '19:18'\nassert solution.maximumTime('9?:??') == '99:59'\nassert solution.maximumTime('??:63') == '23:63'\nassert solution.maximumTime('7?:44') == '79:44'\nassert solution.maximumTime('??:4?') == '23:49'\nassert solution.maximumTime('?6:??') == '16:59'\nassert solution.maximumTime('??:??') == '23:59'\nassert solution.maximumTime('??:?6') == '23:56'\nassert solution.maximumTime('55:?7') == '55:57'\nassert solution.maximumTime('??:0?') == '23:09'\nassert solution.maximumTime('?9:0?') == '19:09'\nassert solution.maximumTime('83:8?') == '83:89'\nassert solution.maximumTime('39:5?') == '39:59'\nassert solution.maximumTime('??:?7') == '23:57'\nassert solution.maximumTime('?6:34') == '16:34'\nassert solution.maximumTime('32:55') == '32:55'\nassert solution.maximumTime('59:??') == '59:59'\nassert solution.maximumTime('?2:??') == '22:59'\nassert solution.maximumTime('??:??') == '23:59'\nassert solution.maximumTime('??:??') == '23:59'\nassert solution.maximumTime('95:??') == '95:59'\nassert solution.maximumTime('45:?7') == '45:57'\nassert solution.maximumTime('88:??') == '88:59'\nassert solution.maximumTime('??:?0') == '23:50'\nassert solution.maximumTime('?5:??') == '15:59'\nassert solution.maximumTime('??:?2') == '23:52'\nassert solution.maximumTime('5?:??') == '59:59'\nassert solution.maximumTime('3?:19') == '39:19'\nassert solution.maximumTime('95:86') == '95:86'\nassert solution.maximumTime('?7:8?') == '17:89'\nassert solution.maximumTime('64:04') == '64:04'\nassert solution.maximumTime('6?:9?') == '69:99'\nassert solution.maximumTime('49:82') == '49:82'\nassert solution.maximumTime('?7:?0') == '17:50'\nassert solution.maximumTime('?5:??') == '15:59'\nassert solution.maximumTime('??:6?') == '23:69'\nassert solution.maximumTime('41:8?') == '41:89'\nassert solution.maximumTime('41:?8') == '41:58'\nassert solution.maximumTime('??:53') == '23:53'\nassert solution.maximumTime('?7:??') == '17:59'\nassert solution.maximumTime('7?:27') == '79:27'\nassert solution.maximumTime('?1:?1') == '21:51'\nassert solution.maximumTime('?7:9?') == '17:99'\nassert solution.maximumTime('55:74') == '55:74'\nassert solution.maximumTime('49:7?') == '49:79'\nassert solution.maximumTime('??:20') == '23:20'",
  "inefficient_solution": "class Solution:\n    def maximumTime(self, time: str) -> str:\n        t = list(time)\n        hours = []\n        minutes = []\n        if t[0] == '?':\n            for hour in range(24):\n                hours.append(str(hour).zfill(2))\n        else:\n            hours.append(t[0])\n        if t[1] == '?':\n            for minute in range(60):\n                if str(minute).zfill(2)[0] <= '3':\n                    minutes.append(str(minute).zfill(2))\n                else:\n                    minutes.append(str(minute).zfill(2)[1:])\n        else:\n            minutes.append(t[1])\n        if t[3] == '?':\n            for minute in range(60):\n                if str(minute).zfill(2)[-1] == '5':\n                    minutes.append(str(minute).zfill(2))\n        else:\n            minutes.append(t[3])\n        if t[4] == '?':\n            for minute in range(60):\n                if str(minute).zfill(2)[-1] == '9':\n                    minutes.append(str(minute).zfill(2))\n        else:\n            minutes.append(t[4])\n        hours_result = []\n        minutes_result = []\n        for hour in hours:\n            for minute in minutes:\n                if hour[0] == '2' and minute[0] == '3':\n                    continue\n                time_result = hour + \":\" + minute\n                hours_result.append(time_result)\n        time_result = max(hours_result)\n        return time_result",
  "is_python": true
}