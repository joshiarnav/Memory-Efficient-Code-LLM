{
  "problem_idx": 1710,
  "task_name": "Maximum Units on a Truck",
  "markdown_description": "\nYou are assigned to put some amount of boxes onto **one truck**. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:\n\n\n* `numberOfBoxesi` is the number of boxes of type `i`.\n* `numberOfUnitsPerBoxi`is the number of units in each box of the type `i`.\n\n\nYou are also given an integer `truckSize`, which is the **maximum** number of **boxes** that can be put on the truck. You can choose any boxes to put on the truck as long as the number\u00a0of boxes does not exceed `truckSize`.\n\n\nReturn *the **maximum** total number of **units** that can be put on the truck.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\n**Output:** 8\n**Explanation:** There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\n**Output:** 91\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= boxTypes.length <= 1000`\n* `1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`\n* `1 <= truckSize <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:\n        ans = 0\n        for a, b in sorted(boxTypes, key=lambda x: -x[1]):\n            ans += b * min(truckSize, a)\n            truckSize -= a\n            if truckSize <= 0:\n                break\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:\n        ans = 0\n        for a, b in sorted(boxTypes, key=lambda x: -x[1]):\n            ans += b * min(truckSize, a)\n            truckSize -= a\n            if truckSize <= 0:\n                break\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random boxTypes list\n    boxTypes = []\n    n = random.randint(1, 6) # number of box types\n    for _ in range(n):\n        numberOfBoxes_i = random.randint(1, 11) # number of boxes for each type i\n        numberOfUnitsPerBox_i = random.randint(1, 101) # number of units per box for each type i\n        boxTypes.append([numberOfBoxes_i, numberOfUnitsPerBox_i])\n    \n    # Generate a random truck size\n    truckSize = random.randint(1, 1001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumUnits(boxTypes, truckSize)\n\n    return boxTypes, truckSize, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        boxTypes, truckSize, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumUnits(boxTypes, truckSize) == expected_result\n        print(f\"assert solution.maximumUnits({boxTypes}, {truckSize}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumUnits({boxTypes}, {truckSize}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumUnits([[4, 27], [5, 13], [4, 20], [8, 42], [5, 15], [5, 39]], 926) == 859\nassert solution.maximumUnits([[10, 78], [5, 92], [7, 76]], 811) == 1772\nassert solution.maximumUnits([[11, 44], [11, 70], [1, 91]], 948) == 1345\nassert solution.maximumUnits([[9, 91]], 479) == 819\nassert solution.maximumUnits([[4, 84]], 515) == 336\nassert solution.maximumUnits([[11, 3], [6, 74], [8, 47]], 330) == 853\nassert solution.maximumUnits([[5, 55]], 502) == 275\nassert solution.maximumUnits([[7, 49], [5, 88]], 262) == 783\nassert solution.maximumUnits([[5, 88], [4, 74]], 224) == 736\nassert solution.maximumUnits([[3, 57], [1, 26], [2, 23]], 650) == 243\nassert solution.maximumUnits([[1, 66], [5, 71], [11, 17], [10, 77]], 93) == 1378\nassert solution.maximumUnits([[6, 20], [7, 69], [11, 36]], 793) == 999\nassert solution.maximumUnits([[8, 40], [3, 15], [2, 76], [10, 86], [11, 1], [1, 56]], 751) == 1444\nassert solution.maximumUnits([[4, 42], [1, 55], [6, 88], [8, 74], [7, 42], [6, 6]], 22) == 1469\nassert solution.maximumUnits([[1, 37], [7, 5], [10, 47], [7, 99]], 428) == 1235\nassert solution.maximumUnits([[5, 73], [4, 86], [5, 41], [6, 17]], 284) == 1016\nassert solution.maximumUnits([[10, 66], [6, 87], [10, 94], [6, 29]], 15) == 1375\nassert solution.maximumUnits([[2, 71], [8, 68], [8, 69], [6, 28]], 991) == 1406\nassert solution.maximumUnits([[9, 50], [6, 21], [10, 64]], 219) == 1216\nassert solution.maximumUnits([[9, 61], [5, 75], [11, 21], [6, 66], [4, 10]], 713) == 1591\nassert solution.maximumUnits([[9, 101], [7, 95]], 454) == 1574\nassert solution.maximumUnits([[8, 89], [7, 7], [11, 80]], 426) == 1641\nassert solution.maximumUnits([[1, 67], [7, 13], [3, 16], [1, 11], [9, 24], [6, 74]], 447) == 877\nassert solution.maximumUnits([[2, 69], [11, 3], [8, 93], [4, 96]], 416) == 1299\nassert solution.maximumUnits([[10, 25], [2, 72]], 744) == 394\nassert solution.maximumUnits([[2, 71]], 322) == 142\nassert solution.maximumUnits([[11, 23], [11, 77]], 141) == 1100\nassert solution.maximumUnits([[7, 85], [11, 96], [3, 79], [5, 65]], 888) == 2213\nassert solution.maximumUnits([[5, 49]], 743) == 245\nassert solution.maximumUnits([[6, 46], [6, 73], [7, 14], [7, 49], [11, 73]], 55) == 1958\nassert solution.maximumUnits([[6, 91], [9, 62], [1, 71], [10, 5], [5, 93], [7, 97]], 674) == 2369\nassert solution.maximumUnits([[11, 25], [4, 16], [3, 95], [9, 81], [8, 59]], 71) == 1825\nassert solution.maximumUnits([[8, 46]], 100) == 368\nassert solution.maximumUnits([[1, 64]], 471) == 64\nassert solution.maximumUnits([[7, 18], [6, 96], [4, 52]], 88) == 910\nassert solution.maximumUnits([[10, 2], [4, 50], [5, 46], [11, 99], [4, 34], [8, 91]], 627) == 2403\nassert solution.maximumUnits([[8, 51], [5, 24], [1, 41], [8, 93]], 607) == 1313\nassert solution.maximumUnits([[2, 19], [10, 34], [11, 52]], 869) == 950\nassert solution.maximumUnits([[8, 84], [7, 73], [11, 45], [5, 89], [3, 48], [10, 59]], 937) == 2857\nassert solution.maximumUnits([[8, 82]], 663) == 656\nassert solution.maximumUnits([[11, 97], [9, 89], [7, 9], [10, 27]], 222) == 2201\nassert solution.maximumUnits([[3, 29], [6, 32], [10, 71], [3, 99], [7, 100]], 808) == 1986\nassert solution.maximumUnits([[3, 6], [2, 54]], 395) == 126\nassert solution.maximumUnits([[3, 16], [8, 81], [9, 39]], 266) == 1047\nassert solution.maximumUnits([[9, 48], [10, 54], [8, 14], [11, 98], [4, 6], [7, 60]], 937) == 2606\nassert solution.maximumUnits([[3, 5], [10, 96], [8, 68], [10, 21], [3, 10]], 83) == 1759\nassert solution.maximumUnits([[4, 22], [3, 55]], 121) == 253\nassert solution.maximumUnits([[7, 42], [6, 14], [8, 69]], 268) == 930\nassert solution.maximumUnits([[11, 99], [8, 39]], 679) == 1401\nassert solution.maximumUnits([[7, 43], [6, 57]], 498) == 643\nassert solution.maximumUnits([[4, 26], [7, 88], [4, 3], [8, 84], [7, 43]], 501) == 1705\nassert solution.maximumUnits([[8, 8], [9, 35], [4, 96], [7, 96]], 103) == 1435\nassert solution.maximumUnits([[3, 37], [4, 98]], 424) == 503\nassert solution.maximumUnits([[5, 36], [9, 64], [3, 74], [8, 7], [8, 22]], 671) == 1210\nassert solution.maximumUnits([[5, 69], [3, 69], [8, 45], [3, 47]], 375) == 1053\nassert solution.maximumUnits([[10, 13]], 159) == 130\nassert solution.maximumUnits([[9, 28], [6, 68], [8, 31], [6, 39]], 596) == 1142\nassert solution.maximumUnits([[7, 69], [5, 10], [10, 52], [3, 17], [5, 43], [2, 60]], 313) == 1439\nassert solution.maximumUnits([[9, 88], [1, 18]], 869) == 810\nassert solution.maximumUnits([[10, 43], [2, 59], [8, 3]], 140) == 572\nassert solution.maximumUnits([[4, 29]], 464) == 116\nassert solution.maximumUnits([[1, 76], [10, 25], [11, 11], [10, 22]], 423) == 667\nassert solution.maximumUnits([[2, 99], [11, 40], [9, 99], [6, 94], [8, 53], [4, 98]], 847) == 2909\nassert solution.maximumUnits([[4, 9], [11, 8], [10, 28], [3, 7], [10, 2]], 602) == 445\nassert solution.maximumUnits([[3, 46], [2, 70], [5, 4], [4, 76], [5, 93], [2, 68]], 710) == 1203\nassert solution.maximumUnits([[1, 33], [6, 101], [5, 40]], 592) == 839\nassert solution.maximumUnits([[5, 68], [10, 56], [8, 61], [8, 35], [11, 88]], 103) == 2636\nassert solution.maximumUnits([[4, 96], [6, 13], [10, 32], [3, 60]], 495) == 962\nassert solution.maximumUnits([[10, 72], [7, 61], [5, 56], [11, 92]], 423) == 2439\nassert solution.maximumUnits([[1, 32], [7, 62], [6, 63]], 695) == 844\nassert solution.maximumUnits([[2, 99], [2, 42], [8, 59]], 464) == 754\nassert solution.maximumUnits([[5, 54], [2, 83], [10, 63]], 506) == 1066\nassert solution.maximumUnits([[3, 81], [9, 76], [2, 91], [1, 93], [10, 81]], 998) == 2012\nassert solution.maximumUnits([[3, 12], [7, 43], [7, 18], [3, 85], [11, 40]], 424) == 1158\nassert solution.maximumUnits([[9, 62], [10, 26], [6, 91], [11, 94]], 266) == 2398\nassert solution.maximumUnits([[10, 97], [5, 57], [5, 97], [1, 9], [5, 24], [5, 31]], 964) == 2024\nassert solution.maximumUnits([[7, 91], [7, 18], [2, 73]], 567) == 909\nassert solution.maximumUnits([[4, 39], [7, 53]], 632) == 527\nassert solution.maximumUnits([[8, 86], [6, 65], [2, 42], [3, 32], [5, 58], [9, 34]], 186) == 1854\nassert solution.maximumUnits([[11, 82], [3, 5], [4, 85], [2, 17]], 10) == 832\nassert solution.maximumUnits([[4, 28]], 143) == 112\nassert solution.maximumUnits([[1, 84], [6, 41]], 376) == 330\nassert solution.maximumUnits([[8, 20], [5, 79], [10, 49]], 156) == 1045\nassert solution.maximumUnits([[11, 83], [11, 67]], 568) == 1650\nassert solution.maximumUnits([[9, 50], [8, 8]], 174) == 514\nassert solution.maximumUnits([[1, 90], [10, 67], [11, 18], [6, 71]], 982) == 1384\nassert solution.maximumUnits([[4, 77], [3, 60], [3, 7], [7, 29]], 702) == 712\nassert solution.maximumUnits([[1, 28], [10, 7]], 542) == 98\nassert solution.maximumUnits([[7, 48], [10, 72], [8, 93], [2, 5], [8, 58]], 182) == 2274\nassert solution.maximumUnits([[6, 55]], 367) == 330\nassert solution.maximumUnits([[3, 7], [11, 25], [4, 78], [3, 63], [11, 52]], 652) == 1369\nassert solution.maximumUnits([[5, 101]], 307) == 505\nassert solution.maximumUnits([[2, 39], [7, 63], [10, 45], [5, 3], [8, 27]], 414) == 1200\nassert solution.maximumUnits([[1, 42], [8, 38], [5, 93], [3, 79], [1, 92], [1, 11]], 532) == 1151\nassert solution.maximumUnits([[5, 48], [11, 20], [7, 82]], 192) == 1034\nassert solution.maximumUnits([[2, 22]], 421) == 44\nassert solution.maximumUnits([[3, 77], [5, 77]], 947) == 616\nassert solution.maximumUnits([[6, 93]], 17) == 558\nassert solution.maximumUnits([[4, 48], [5, 74], [2, 79]], 500) == 720\nassert solution.maximumUnits([[1, 3], [2, 8], [6, 20], [10, 3], [6, 64]], 205) == 553",
  "inefficient_solution": "class Solution:\n    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:\n        total_units = 0\n        boxes = []\n        for i, box in enumerate(boxTypes):\n            boxes.append([i, box[0], box[1]])\n        \n        for box in boxes[:]:\n            for _ in range(box[1]):\n                total_units += box[2]\n                box[1] -= 1\n                if box[1] == 0:\n                    boxes.remove(box)\n        \n        boxes.sort(key=lambda x: x[2], reverse=True)\n        for box in boxes[:truckSize]:\n            total_units += box[2]\n        \n        return total_units",
  "is_python": true
}