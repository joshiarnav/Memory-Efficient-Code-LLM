{
  "problem_idx": 1567,
  "task_name": "Maximum Length of Subarray With Positive Product",
  "markdown_description": "\nGiven an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.\n\n\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\n\n\nReturn *the maximum length of a subarray with positive product*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,-2,-3,4]\n**Output:** 4\n**Explanation:** The array nums already has a positive product of 24.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,1,-2,-3,-4]\n**Output:** 3\n**Explanation:** The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [-1,-2,-3,0,1]\n**Output:** 2\n**Explanation:** The longest subarray with positive product is [-1,-2] or [-2,-3].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-109 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def getMaxLen(self, nums: List[int]) -> int:\n        f1 = 1 if nums[0] > 0 else 0\n        f2 = 1 if nums[0] < 0 else 0\n        res = f1\n        for num in nums[1:]:\n            pf1, pf2 = f1, f2\n            if num > 0:\n                f1 += 1\n                if f2 > 0:\n                    f2 += 1\n                else:\n                    f2 = 0\n            elif num < 0:\n                pf1, pf2 = f1, f2\n                f2 = pf1 + 1\n                if pf2 > 0:\n                    f1 = pf2 + 1\n                else:\n                    f1 = 0\n            else:\n                f1 = 0\n                f2 = 0\n            res = max(res, f1)\n        return res\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def getMaxLen(self, nums):\n        f1 = 1 if nums[0] > 0 else 0\n        f2 = 1 if nums[0] < 0 else 0\n        res = f1\n        for num in nums[1:]:\n            pf1, pf2 = f1, f2\n            if num > 0:\n                f1 += 1\n                if f2 > 0:\n                    f2 += 1\n                else:\n                    f2 = 0\n            elif num < 0:\n                pf1, pf2 = f1, f2\n                f2 = pf1 + 1\n                if pf2 > 0:\n                    f1 = pf2 + 1\n                else:\n                    f1 = 0\n            else:\n                f1 = 0\n                f2 = 0\n            res = max(res, f1)\n        return res\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices([0, 1, -1], k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getMaxLen(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getMaxLen(nums) == expected_result\n        print(f\"assert solution.getMaxLen({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getMaxLen({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getMaxLen([-1, -1, 1]) == 3\nassert solution.getMaxLen([-1, 0, 0, 0, 1, 0, 1, 1, 0]) == 2\nassert solution.getMaxLen([1, 1, 1, -1, 0, 1, 1, 1, 1]) == 4\nassert solution.getMaxLen([-1, -1, 0, 1]) == 2\nassert solution.getMaxLen([0, 0]) == 0\nassert solution.getMaxLen([0, 1, -1, 0, 1]) == 1\nassert solution.getMaxLen([0, -1, 1, -1, -1]) == 3\nassert solution.getMaxLen([1]) == 1\nassert solution.getMaxLen([-1, 0]) == 0\nassert solution.getMaxLen([0, 0]) == 0\nassert solution.getMaxLen([-1, -1, -1]) == 2\nassert solution.getMaxLen([-1, 1, 1, 1, -1, -1, -1, 0]) == 7\nassert solution.getMaxLen([1, 0, 0, -1, 1, 0, 1]) == 1\nassert solution.getMaxLen([1, 1, -1]) == 2\nassert solution.getMaxLen([-1, 0, 0, 1, 1, 1]) == 3\nassert solution.getMaxLen([1, 1, -1]) == 2\nassert solution.getMaxLen([0, -1, -1, 0, -1, 1, -1, -1, 1, 1]) == 5\nassert solution.getMaxLen([1, 1, -1, 1, -1, 0]) == 5\nassert solution.getMaxLen([0, 1, 0, 0, 0, 1, 0, 0, 0]) == 1\nassert solution.getMaxLen([1, 1, 0, 1, -1, 0]) == 2\nassert solution.getMaxLen([-1, 0, 0, -1, 1, -1, 1, 1]) == 5\nassert solution.getMaxLen([1, 1, -1, 1]) == 2\nassert solution.getMaxLen([0, -1, 1, 1, -1]) == 4\nassert solution.getMaxLen([1, 1, 0, 0, -1]) == 2\nassert solution.getMaxLen([0, -1, 0, -1, -1, -1, 0, -1, 0, 1]) == 2\nassert solution.getMaxLen([1, 0, -1, 1, 1, -1, 0, -1]) == 4\nassert solution.getMaxLen([-1, 0, 1, -1]) == 1\nassert solution.getMaxLen([0, 0, -1, 0, -1, 1, 1, 1, 0, 1]) == 3\nassert solution.getMaxLen([1, 1, -1, 1, -1, 0, 0, -1, -1, 1]) == 5\nassert solution.getMaxLen([0, 1, 1, 1, -1, -1, 0, 1]) == 5\nassert solution.getMaxLen([1, 1, -1, 1, 1, -1, 1]) == 7\nassert solution.getMaxLen([-1, 1, 1]) == 2\nassert solution.getMaxLen([0, -1, 1, 0, 0, 1, 0]) == 1\nassert solution.getMaxLen([0, 0, 1, 0, 1, 0, -1, 1]) == 1\nassert solution.getMaxLen([0, -1, 0, -1, -1, 1, -1]) == 3\nassert solution.getMaxLen([-1, 1, -1]) == 3\nassert solution.getMaxLen([1, 0, -1, -1, 0, -1, 0, -1]) == 2\nassert solution.getMaxLen([0, 1, 1, 0, 1, 1, 1]) == 3\nassert solution.getMaxLen([-1]) == 0\nassert solution.getMaxLen([-1, 0, 0, 1]) == 1\nassert solution.getMaxLen([0, 0, -1]) == 0\nassert solution.getMaxLen([0, 0, 1, -1, 1, 0, 0, 0]) == 1\nassert solution.getMaxLen([1, 1, 0, 0, 1, 0, 0, -1, -1, 1]) == 3\nassert solution.getMaxLen([-1, -1, 1, -1, 1, -1, 0]) == 6\nassert solution.getMaxLen([1, -1, 1, -1]) == 4\nassert solution.getMaxLen([-1, 1, 0, 0]) == 1\nassert solution.getMaxLen([0, -1, 1, 1]) == 2\nassert solution.getMaxLen([-1, 1, 0, 1, 0]) == 1\nassert solution.getMaxLen([1, -1, 0, 0, 1, 1]) == 2\nassert solution.getMaxLen([-1, -1, 0, 0, 1, 1, 1, 0, 1, 0]) == 3\nassert solution.getMaxLen([0, -1, -1, 0]) == 2\nassert solution.getMaxLen([0]) == 0\nassert solution.getMaxLen([0, -1, -1, -1, 1]) == 3\nassert solution.getMaxLen([-1, 1, 1, -1, 0]) == 4\nassert solution.getMaxLen([0, 0]) == 0\nassert solution.getMaxLen([1, -1, 0]) == 1\nassert solution.getMaxLen([1, 1, 1, 1, -1, 0, 0, -1]) == 4\nassert solution.getMaxLen([0, 0, 0, 0, -1, 1, 0, -1]) == 1\nassert solution.getMaxLen([0, 1, 1]) == 2\nassert solution.getMaxLen([-1, 1, -1, -1, 1, 0]) == 4\nassert solution.getMaxLen([-1]) == 0\nassert solution.getMaxLen([-1, 1, 1, 0]) == 2\nassert solution.getMaxLen([1, 1, 0, 0, 0, -1, 0]) == 2\nassert solution.getMaxLen([0, 0, 0, 1, 0, 0, 0, 1, -1, 1]) == 1\nassert solution.getMaxLen([0, 1, -1, 1, -1]) == 4\nassert solution.getMaxLen([-1, -1, 0, 0, -1]) == 2\nassert solution.getMaxLen([0]) == 0\nassert solution.getMaxLen([0]) == 0\nassert solution.getMaxLen([1, 1, -1, 0, -1, -1, -1]) == 2\nassert solution.getMaxLen([1, 1, 1, -1, 0, 0]) == 3\nassert solution.getMaxLen([1, 1, 1, 1, 1, 0, 1, 0, 0, 0]) == 5\nassert solution.getMaxLen([-1, 1]) == 1\nassert solution.getMaxLen([1, -1, 1, 1, -1, 0, 1]) == 5\nassert solution.getMaxLen([-1, -1, -1, 0, 0, -1, -1]) == 2\nassert solution.getMaxLen([0, -1, -1, 1, 1]) == 4\nassert solution.getMaxLen([0]) == 0\nassert solution.getMaxLen([-1, -1]) == 2\nassert solution.getMaxLen([-1, 0, 1, -1, -1, 0, 0, -1]) == 3\nassert solution.getMaxLen([0]) == 0\nassert solution.getMaxLen([-1, 1, 0, -1, 0]) == 1\nassert solution.getMaxLen([-1, 0, -1, 0, 1, 1]) == 2\nassert solution.getMaxLen([1, 0, 1, 0, 1, 0, 1, -1]) == 1\nassert solution.getMaxLen([1, 0, 1, 0]) == 1\nassert solution.getMaxLen([-1, -1]) == 2\nassert solution.getMaxLen([1, 1, 0]) == 2\nassert solution.getMaxLen([0]) == 0\nassert solution.getMaxLen([0, 0, 1, 1, 1]) == 3\nassert solution.getMaxLen([0, 1, 1, -1, 1, -1, -1, 0, 1]) == 5\nassert solution.getMaxLen([1, 1, 0, 0, -1, 1]) == 2\nassert solution.getMaxLen([0, -1, 0, 1, 1, -1, 0, 0]) == 2\nassert solution.getMaxLen([0]) == 0\nassert solution.getMaxLen([-1, 1, -1, 1, -1, 1, -1, -1, 0, 1]) == 7\nassert solution.getMaxLen([-1, 0, -1, 0, 1, -1, 1, -1, 1]) == 5\nassert solution.getMaxLen([-1]) == 0\nassert solution.getMaxLen([1, 0, -1, -1, -1, 1, -1]) == 5\nassert solution.getMaxLen([-1, 1, 1, -1]) == 4\nassert solution.getMaxLen([-1]) == 0\nassert solution.getMaxLen([0, -1]) == 0\nassert solution.getMaxLen([1, 0, 0, 0]) == 1\nassert solution.getMaxLen([-1, -1, 1, 1, 0, 0]) == 4",
  "inefficient_solution": "class Solution:\n    def getMaxLen(self, nums):\n        max_len = []\n        min_len = []\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                max_len.append(1)\n                min_len.append(0)\n            elif nums[i] < 0:\n                max_len.append(0)\n                min_len.append(1)\n            else:\n                max_len.append(0)\n                min_len.append(0)\n        max_len = [0] * len(nums)\n        min_len = [0] * len(nums)\n        for i in range(1, len(nums)):\n            if nums[i] > 0:\n                max_len[i] = max_len[i-1] + 1\n                max_len[i] = max(max_len[i], max_len[i-1])\n                min_len[i] = min_len[i-1]\n            elif nums[i] < 0:\n                max_len[i] = min_len[i-1] + 1\n                min_len[i] = min_len[i-1]\n            else:\n                max_len[i] = 0\n                min_len[i] = 0\n        max_len = [0] * len(nums)\n        for i in range(len(nums)):\n            max_len[i] = max(max_len[i], max_len[i-1])\n        max_product = 1\n        res = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                max_product = 1\n                res = max(res, i)\n                continue\n            max_product *= nums[i]\n            if max_product > 0:\n                res = max(res, i + 1)\n            else:\n                res = max(res, i - max_len[i] + 1)\n        return res",
  "is_python": true
}