{
  "problem_idx": 2290,
  "task_name": "Minimum Obstacle Removal to Reach Corner",
  "markdown_description": "\nYou are given a **0-indexed** 2D integer array `grid` of size `m x n`. Each cell has one of two values:\n\n\n* `0` represents an **empty** cell,\n* `1` represents an **obstacle** that may be removed.\n\n\nYou can move up, down, left, or right from and to an empty cell.\n\n\nReturn *the **minimum** number of **obstacles** to **remove** so you can move from the upper left corner* `(0, 0)` *to the lower right corner* `(m - 1, n - 1)`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2290.Minimum%20Obstacle%20Removal%20to%20Reach%20Corner/images/example1drawio-1.png)\n\n```\n\n**Input:** grid = [[0,1,1],[1,1,0],[1,1,0]]\n**Output:** 2\n**Explanation:** We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).\nIt can be shown that we need to remove at least 2 obstacles, so we return 2.\nNote that there may be other ways to remove 2 obstacles to create a path.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2290.Minimum%20Obstacle%20Removal%20to%20Reach%20Corner/images/example1drawio.png)\n\n```\n\n**Input:** grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]\n**Output:** 0\n**Explanation:** We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 105`\n* `2 <= m * n <= 105`\n* `grid[i][j]` is either `0` **or** `1`.\n* `grid[0][0] == grid[m - 1][n - 1] == 0`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumObstacles(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        q = deque([(0, 0, 0)])\n        vis = set()\n        dirs = (-1, 0, 1, 0, -1)\n        while 1:\n            i, j, k = q.popleft()\n            if i == m - 1 and j == n - 1:\n                return k\n            if (i, j) in vis:\n                continue\n            vis.add((i, j))\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    if grid[x][y] == 0:\n                        q.appendleft((x, y, k))\n                    else:\n                        q.append((x, y, k + 1))\n",
  "test_case_generator": "\nfrom collections import deque\nfrom typing import List\n\n\ndef generate_test_case() -> Tuple[List[List[int]], int]:\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(2, 6)\n    n = random.randint(2, 6)\n    grid = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumObstacles(grid)\n\n    return grid, expected_result\n\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumObstacles(grid) == expected_result\n        test_case_generator_results.append(f\"assert solution.minimumObstacles({grid}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumObstacles([[0, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0]]) == 2\nassert solution.minimumObstacles([[1, 1], [0, 0]]) == 0\nassert solution.minimumObstacles([[0, 0, 0, 0, 0], [1, 0, 1, 1, 1], [1, 1, 0, 0, 0], [1, 1, 1, 1, 0], [0, 1, 1, 1, 1]]) == 2\nassert solution.minimumObstacles([[1, 0, 0, 0, 1], [1, 0, 1, 1, 0], [1, 0, 0, 1, 1], [1, 1, 1, 1, 1], [1, 1, 0, 0, 0]]) == 1\nassert solution.minimumObstacles([[0, 1, 1], [1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1]]) == 2\nassert solution.minimumObstacles([[0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [0, 1, 0, 1, 0], [1, 1, 0, 1, 0]]) == 2\nassert solution.minimumObstacles([[1, 1], [0, 0], [0, 0], [1, 1], [0, 0], [1, 0]]) == 1\nassert solution.minimumObstacles([[1, 0], [1, 0]]) == 0\nassert solution.minimumObstacles([[1, 0, 1], [0, 0, 0], [0, 0, 1], [0, 0, 1], [1, 1, 1]]) == 2\nassert solution.minimumObstacles([[0, 1, 0, 1, 1], [0, 1, 0, 0, 0], [1, 1, 1, 1, 0]]) == 1\nassert solution.minimumObstacles([[0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0]]) == 1\nassert solution.minimumObstacles([[1, 0, 0, 1, 1], [0, 1, 0, 0, 1]]) == 1\nassert solution.minimumObstacles([[0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1]]) == 4\nassert solution.minimumObstacles([[0, 0, 1, 1, 0], [1, 1, 1, 0, 1], [1, 0, 1, 0, 1], [1, 1, 1, 0, 1], [1, 1, 0, 0, 0]]) == 2\nassert solution.minimumObstacles([[1, 1, 1, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]]) == 1\nassert solution.minimumObstacles([[1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1]]) == 4\nassert solution.minimumObstacles([[1, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0]]) == 2\nassert solution.minimumObstacles([[0, 1, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 1, 1, 1], [1, 1, 0, 1]]) == 3\nassert solution.minimumObstacles([[0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1]]) == 2\nassert solution.minimumObstacles([[1, 0], [1, 1], [0, 1], [0, 1]]) == 2\nassert solution.minimumObstacles([[1, 0, 0], [1, 1, 1], [1, 0, 1], [0, 0, 0], [0, 1, 1], [1, 1, 1]]) == 3\nassert solution.minimumObstacles([[1, 0, 1, 0], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]]) == 2\nassert solution.minimumObstacles([[1, 0], [0, 0], [1, 0], [0, 1], [1, 1], [1, 0]]) == 2\nassert solution.minimumObstacles([[1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 0, 0]]) == 0\nassert solution.minimumObstacles([[0, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0]]) == 1\nassert solution.minimumObstacles([[1, 1, 1], [1, 0, 0], [0, 0, 0], [1, 0, 0], [0, 1, 1]]) == 2\nassert solution.minimumObstacles([[1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0]]) == 1\nassert solution.minimumObstacles([[1, 0, 0, 0, 1], [1, 1, 1, 0, 0], [0, 1, 0, 0, 1], [0, 0, 0, 1, 0]]) == 1\nassert solution.minimumObstacles([[0, 1, 1, 0, 1], [0, 1, 1, 0, 1], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1]]) == 4\nassert solution.minimumObstacles([[0, 1, 1, 1, 0], [1, 1, 1, 0, 0]]) == 3\nassert solution.minimumObstacles([[0, 1, 0], [1, 1, 1], [1, 1, 0]]) == 2\nassert solution.minimumObstacles([[0, 1, 1], [0, 0, 1]]) == 1\nassert solution.minimumObstacles([[1, 1, 1], [0, 0, 0], [1, 0, 0], [0, 0, 1]]) == 1\nassert solution.minimumObstacles([[1, 1, 0, 1], [0, 1, 1, 0], [0, 0, 1, 1]]) == 2\nassert solution.minimumObstacles([[0, 0, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0]]) == 1\nassert solution.minimumObstacles([[0, 1], [1, 1], [1, 1]]) == 3\nassert solution.minimumObstacles([[1, 1], [1, 1], [1, 1]]) == 3\nassert solution.minimumObstacles([[1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0]]) == 0\nassert solution.minimumObstacles([[1, 0], [0, 0], [1, 0], [0, 1]]) == 1\nassert solution.minimumObstacles([[0, 1], [0, 1]]) == 1\nassert solution.minimumObstacles([[1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0]]) == 3\nassert solution.minimumObstacles([[0, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0]]) == 3\nassert solution.minimumObstacles([[0, 0], [1, 0], [0, 0], [1, 1]]) == 1\nassert solution.minimumObstacles([[1, 0, 0, 1], [1, 0, 0, 0]]) == 0\nassert solution.minimumObstacles([[0, 0], [0, 0]]) == 0\nassert solution.minimumObstacles([[0, 0], [1, 1], [0, 0], [1, 0], [0, 1], [1, 1]]) == 3\nassert solution.minimumObstacles([[1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0]]) == 1\nassert solution.minimumObstacles([[1, 0, 1], [1, 0, 0]]) == 0\nassert solution.minimumObstacles([[1, 1, 1, 1], [1, 1, 1, 0]]) == 3\nassert solution.minimumObstacles([[1, 0], [1, 0], [0, 1]]) == 1\nassert solution.minimumObstacles([[0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1]]) == 2\nassert solution.minimumObstacles([[1, 0], [0, 1], [0, 0], [1, 0], [1, 0], [0, 0]]) == 0\nassert solution.minimumObstacles([[1, 0, 0, 1, 0], [0, 0, 1, 0, 0], [1, 0, 1, 1, 0], [1, 1, 1, 1, 1], [0, 1, 1, 1, 1]]) == 3\nassert solution.minimumObstacles([[1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0]]) == 2\nassert solution.minimumObstacles([[0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0]]) == 0\nassert solution.minimumObstacles([[1, 1, 0, 0, 1], [1, 0, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 1], [0, 1, 1, 0, 0]]) == 2\nassert solution.minimumObstacles([[0, 0, 0, 0, 1], [1, 0, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 0, 1, 1], [1, 0, 0, 0, 1]]) == 2\nassert solution.minimumObstacles([[0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 0]]) == 1\nassert solution.minimumObstacles([[0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1]]) == 1\nassert solution.minimumObstacles([[1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1]]) == 2\nassert solution.minimumObstacles([[1, 1, 1], [1, 0, 0], [1, 0, 0], [1, 1, 1], [1, 1, 0]]) == 2\nassert solution.minimumObstacles([[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0]]) == 2\nassert solution.minimumObstacles([[0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 1]]) == 2\nassert solution.minimumObstacles([[0, 1], [0, 1]]) == 1\nassert solution.minimumObstacles([[0, 1, 0, 1], [1, 1, 1, 1]]) == 3\nassert solution.minimumObstacles([[0, 1, 0, 1], [0, 0, 0, 0], [1, 1, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 0, 1]]) == 2\nassert solution.minimumObstacles([[0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1]]) == 2\nassert solution.minimumObstacles([[1, 0, 1, 0, 1], [0, 1, 0, 1, 1]]) == 3\nassert solution.minimumObstacles([[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 1, 1]]) == 2\nassert solution.minimumObstacles([[0, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 0], [1, 0, 1, 1]]) == 2\nassert solution.minimumObstacles([[1, 0], [0, 0], [0, 0], [0, 1]]) == 1\nassert solution.minimumObstacles([[1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 0, 0]]) == 0\nassert solution.minimumObstacles([[1, 1, 1], [0, 0, 1], [1, 0, 1], [0, 0, 1], [0, 1, 1]]) == 2\nassert solution.minimumObstacles([[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 1]]) == 2\nassert solution.minimumObstacles([[1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0]]) == 0\nassert solution.minimumObstacles([[0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0]]) == 2\nassert solution.minimumObstacles([[1, 1, 1], [1, 0, 1], [1, 0, 0], [1, 1, 0], [0, 1, 1]]) == 2\nassert solution.minimumObstacles([[1, 1, 1], [0, 0, 1], [1, 0, 1], [0, 1, 1]]) == 2\nassert solution.minimumObstacles([[1, 1, 0, 1, 1], [1, 0, 1, 0, 0], [0, 0, 0, 1, 1], [1, 0, 1, 0, 0]]) == 2\nassert solution.minimumObstacles([[1, 1], [0, 1], [1, 0], [1, 0], [1, 0], [0, 1]]) == 2\nassert solution.minimumObstacles([[1, 1, 0, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 0, 0, 0]]) == 1\nassert solution.minimumObstacles([[0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0]]) == 2\nassert solution.minimumObstacles([[1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1]]) == 1\nassert solution.minimumObstacles([[0, 0], [0, 0], [0, 1], [0, 1], [0, 0], [1, 1]]) == 1\nassert solution.minimumObstacles([[1, 1, 1, 1, 0], [0, 1, 0, 0, 1], [0, 1, 0, 0, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0]]) == 1\nassert solution.minimumObstacles([[1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0]]) == 1\nassert solution.minimumObstacles([[0, 1], [0, 1], [1, 0], [0, 0], [1, 0], [0, 0]]) == 1\nassert solution.minimumObstacles([[1, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 1, 0, 0], [0, 0, 1, 0, 1], [1, 1, 0, 1, 1]]) == 4\nassert solution.minimumObstacles([[1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1]]) == 1\nassert solution.minimumObstacles([[1, 1, 0, 0, 1], [0, 0, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0]]) == 1\nassert solution.minimumObstacles([[0, 1, 1], [1, 0, 1]]) == 2\nassert solution.minimumObstacles([[1, 0], [0, 0], [1, 1], [0, 1], [0, 0]]) == 1\nassert solution.minimumObstacles([[1, 1, 1, 0], [1, 0, 0, 1]]) == 2\nassert solution.minimumObstacles([[0, 1, 1, 1, 0], [1, 1, 1, 0, 1], [0, 0, 0, 1, 0], [1, 1, 1, 0, 0], [0, 1, 1, 0, 0]]) == 2\nassert solution.minimumObstacles([[0, 0, 0, 0], [1, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0]]) == 0\nassert solution.minimumObstacles([[0, 1, 0, 0], [0, 0, 1, 1]]) == 2\nassert solution.minimumObstacles([[0, 1], [0, 0], [0, 1], [1, 1], [0, 0], [1, 1]]) == 2\nassert solution.minimumObstacles([[1, 1], [1, 1], [1, 0]]) == 2\nassert solution.minimumObstacles([[0, 0, 1, 1, 1], [0, 1, 0, 0, 1], [0, 0, 1, 0, 1]]) == 2\nassert solution.minimumObstacles([[0, 0], [0, 1], [1, 1]]) == 2",
  "inefficient_solution": "class Solution:\n    def minimumObstacles(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        visited = [[] for _ in range(m * n)]\n        for i in range(m * n):\n            visited[i].extend([[] for _ in range(n * 2)])\n        q = []\n        for i in range(m):\n            for j in range(n):\n                if (i, j) == (0, 0):\n                    q.append((i, j, 0))\n        while q:\n            x, y, k = q.pop(0)\n            if x == m - 1 and y == n - 1:\n                return k\n            for i in range(5):\n                if i < 2:\n                    xx, yy = x + i // 2, y + (i % 2) * 2\n                else:\n                    xx, yy = x + (i % 2), y + (i // 2) * 2\n                if 0 <= xx < m and 0 <= yy < n:\n                    if grid[xx][yy] == 0:\n                        q.append((xx, yy, k))\n                    else:\n                        q.append((xx, yy, k + 1))",
  "is_python": true
}