{
  "problem_idx": 1345,
  "task_name": "Jump Game IV",
  "markdown_description": "\nGiven an array of\u00a0integers `arr`, you are initially positioned at the first index of the array.\n\n\nIn one step you can jump from index `i` to index:\n\n\n* `i + 1` where:\u00a0`i + 1 < arr.length`.\n* `i - 1` where:\u00a0`i - 1 >= 0`.\n* `j` where: `arr[i] == arr[j]` and `i != j`.\n\n\nReturn *the minimum number of steps* to reach the **last index** of the array.\n\n\nNotice that you can not jump outside of the array at any time.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [100,-23,-23,404,100,23,23,23,3,404]\n**Output:** 3\n**Explanation:** You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [7]\n**Output:** 0\n**Explanation:** Start index is the last index. You do not need to jump.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [7,6,9,6,9,6,9,7]\n**Output:** 1\n**Explanation:** You can jump directly from index 0 to index 7 which is last index of the array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 5 * 104`\n* `-108 <= arr[i] <= 108`\n\n\n",
  "canonical_solution": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        idx = defaultdict(list)\n        for i, v in enumerate(arr):\n            idx[v].append(i)\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            i, step = q.popleft()\n            if i == len(arr) - 1:\n                return step\n            v = arr[i]\n            step += 1\n            for j in idx[v]:\n                if j not in vis:\n                    vis.add(j)\n                    q.append((j, step))\n            del idx[v]\n            if i + 1 < len(arr) and (i + 1) not in vis:\n                vis.add(i + 1)\n                q.append((i + 1, step))\n            if i - 1 >= 0 and (i - 1) not in vis:\n                vis.add(i - 1)\n                q.append((i - 1, step))\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        idx = defaultdict(list)\n        for i, v in enumerate(arr):\n            idx[v].append(i)\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            i, step = q.popleft()\n            if i == len(arr) - 1:\n                return step\n            v = arr[i]\n            step += 1\n            for j in idx[v]:\n                if j not in vis:\n                    vis.add(j)\n                    q.append((j, step))\n            del idx[v]\n            if i + 1 < len(arr) and (i + 1) not in vis:\n                vis.add(i + 1)\n                q.append((i + 1, step))\n            if i - 1 >= 0 and (i - 1) not in vis:\n                vis.add(i - 1)\n                q.append((i - 1, step))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(-10**8, 10**8+1), random.randint(1, 100))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minJumps(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minJumps(arr) == expected_result\n        print(f\"assert solution.minJumps({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minJumps({arr}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minJumps([11237371, -29060105, 75680819, -28226003, 87093426, 57972748, 21294335, 80890297, 62505358, 96215778, -91437652, 2603603, 44678457, -57956127, 25994956, -31480481, -61664714, 14525242, 12198753, 10700099, 52944235, 24435980, 54721336, 40571300, -5831248, -90301601, -83999001, -84480856, -2512776, -15968975, -89358802, -99556607, 54285419, 72959629, 64633246, -73379528, 19051357, 16188177, -60816769, -46153288, 68417235, -84054780, 75870990, -72220160, -92449832, 56204144, -52635251, -35133967, -29953592, 12933765, 69357009, -97071414, -92679995, 61431741, -82030231, -46245568, -66220083, -17438312, 68804912, -72537215, 40426327, -4613137, -91746489, -31451286, 35206466, -42812738, -71690150, 18495656, 7793281, -71457032, -47700810, -17085336, -81534279, 22902509, 63160328]) == 74\nassert solution.minJumps([7665461, 91846443]) == 1\nassert solution.minJumps([-84259216, -80351856, 23818227, -43634547, 19743039, -18402530, -34634132, -46931809, 70976832, 32159997, 71505893, -53087779, -12059231, 52820933, 7662410, 89093458, -34891056, -85246691, 33728, 90721865, -61332383, 87062027, -32030769, 46888126, -87177199, 91543606, 34739252, -76286487, -6509404, -5095207, 75368114, 95519831, 5386605, -26674026, -10743114, 20190414, -84137903, 30488920, 29679550, 24314168, 74712178, 22508600, 84410418, -44794278, -88164265, 55708017, 99929906, -96532501, 76853917, -32087054, 26062881, -89576189, 25197200, 7528800, -57163158, 49130395, -95165733, 73240838, -23842478, -70197190, 61240339, -1154885, -53152420, -21537540, 70710155, -11399547, -3601317, 45209140]) == 67\nassert solution.minJumps([-4102577, 49108995, 76980191, 39044921, 66227535, -26272940, -15915849, -62617200, 78596355, -40648180, 57766578, 84519121, 29363997, -24663002, -8888453, 89039952, 59382595, -52271142, 56668207, -71789148, 39144308, 11592921, 79326429]) == 22\nassert solution.minJumps([-2272510, 86261655, -97965747, -70969040, 18060976, 37992278, -34610642, 40833238, -94584174, 61800211, -97183248, -6986551, -52141340, 98002290, 84016530, 19071584, -27862827, 2833879, 85886163, -51407236, 18687890, -86604154, 47513164, -85681478, 7003655, -81436235, 34868974, -69755750, 31947301, -93659183, 10199036, -59767883, -43944213, -41483601, -37516655, 29130959, -73417593, -94095772, 3864867, 30040785, -20564022, 4191066, -85557783, 66583518, -18503076, -95547703, 96808666, -67538378, -81548745, -91018848, -87438502, -10781682, -51080269, -40548227, -47910749, 3495652, 39401608, 66348268, 82454638, -27630876, 70902465, 78168966, 40555184, 93411132, -43488144, -19322421]) == 65\nassert solution.minJumps([93863821, -274134, 40673772, 51995049, -57714850, 67484491, 90103199, -42098445, -27655154, -83064256, 34593606, -28112142, 23141319, -75365670, 69217535, -92320114, 86829275, 32638188, -84992240, 4142759, -46825453, -86988256, -49647401, -19735320, 13708795, -41364563, 73866746, 53479057, 72328669, -53956533, -79095652, 41634046, -23175524, -71709380]) == 33\nassert solution.minJumps([80930156]) == 0\nassert solution.minJumps([46455185, 77085116, -40111030, 27980870, 10279246, -78063578, 63734715, -52450934, -41587845, -42905064, 54685852, -41262494, 56518663, 8651149, 6924104, 50153611, -5207891, -84058567, 31770255, -64645159, 28037617, -84951777, 16921237, -45458928, 91248957, 97356849, 61820758, 99628603, 20560738, 22597475, -82453979, 54887972, -2314303, -32273934, 14793435, -95777514, -48046983, -85380939, -41607761, -47138818, 53354352, -56535097, -22153626, -42473745, -98892613, -67333403, -61192297, -23509827, 13118961, 10019509, -84416396, 35791813, -8051667]) == 52\nassert solution.minJumps([19412140, -84216439, -18370944, -1114846, 60955611, -97665228, -35003335, -22086480, 78153659, -38472857, -15517048, -4774425, 42074352, -99463802, 64820167, 10135029, -44464473, -33298363, 7847667, -59410938, -81456702, -41877826, -37038261, 68902292, 16512406, -52825600, 83780827, 12641319, -27729153, -44824630, 58503362, -80446875, 51901830, -35854817]) == 33\nassert solution.minJumps([-33957862, 90846769, 52841060, 72992885, 36065695, -7798764, -29596835, 70421128, 95215086, 61686870, -15679773, 93451365, 37893107, -74261247, 92665411, 69717811, 20333884, 74293390, -84212407, 63762640, 1167598, -30187797, -28043315, 69313344, -34347593, -75204832, -37255217, -92009925, 60940559, 21437826, -13582569, -7265422, -53697892, -23175323, -51937319, -88566246, 79686958, -81177118, 41787321, -76421725, -63794931, -55029936, 30377696, 48868229, -77075397, -26665776, 46649103, -46183097]) == 47\nassert solution.minJumps([30533412, -72725402, -65381525, 30244942, 80919670, -4026219, 43546566, 86789885, -67892984, -47304618, 7784804, 56248888, 98487961, -90361086, -50164889, 54573922, 33148038, -62352825, 52582981, 12592152, 50815410, 41023971, 2361907, 15929482, 64730857, -56430708, -5280292, -72846479, 28705132, -78378370, -49419803, 20004766, 25327198, -14510853, 43593009, -59751261, 36989720, 8591635, 39465068, -47981947, -77932362, 19396230, 49949294, 87904138, -22468777, -95258313, -75152769, 18228560, 89993992, 35832559, -5526362, -61769102, 54906419, -95038695, -43762930, 13293746, 63894229, 28468523, -4010565, -84986488, -34643759, -94069942, -21181813, 7797313]) == 63\nassert solution.minJumps([82532450, 80079709, -99623485, 75471971, -97768786, -15619299, -97654839, 74996428, -41717178, 55445375, 63531144, 23017189, -81773686, 79516492, -85705090, 99108148, 26794855, -73001413, 69368210, -44179813, -3292998, -78747534, 38225783, -22197845, 83650849, -47879182, -25544710, 87762074, -50168156, 92094724, 85870459, 67902035, -10747940, 18401726, -22871381, 10181383]) == 35\nassert solution.minJumps([-96832200, -37232603, -8168242, -49888510, 12119981, -89895033, -67603358, -94409709, 19322829, 80197525, -86204713, 21256022, -5620294, 28897131, -41483862, -81358403, 70083725, -81683945, 41243256, -27863006, 74972814, -35311002, 83732758, -96257681, -37860358, -87250251, 69088695, 94712762, -78699919, 68169955, 9468478, 59819082, -58739012, -31190046, -16289717, 33447438, -45227746, -68721430, 17007161, 55793651, -22400490, 57013232, 54408263, 3525320, 87179772, -79557221, -61831631, 67632197, -40482598, 58168055, -6993359, -26551308, -62461209, -37507761, -1986900, 14255154, -23648833, -12425698, -43406957, -89662023, 93778595, 94349788, 95137737, -57937910, 94046913, -6698889, 39971652, 81271899, -14949181, -85254412, -55598760, -29895556, -95182342, -13409990, -92574456, 11942548, 4147414, -20105867, -54293043, 32840697, -52436147, 98708664, 89890739, -77064633, 37469546, 78920746, -81634702, -95310944, -50749649, -39485058, -96766682, 19405455, -43414593]) == 92\nassert solution.minJumps([-41840125, 84371815, -33497565, -75349168, -24384979, -77814496, -36130453, -7139884, -93834304, 48549303, 92141300, 28283366, -6255522, 84059931, 52297792, 67135662]) == 15\nassert solution.minJumps([-72942308, -56982748, -35585650, 39123060, -30675077, 3309096]) == 5\nassert solution.minJumps([95147816, 79929875, 66389449, 95642759]) == 3\nassert solution.minJumps([-39458791, 39138756, -7904122, -69100083, -57107722, 52196261, 55734348, 98496564, -43683218, -88549450, 34387649, -52400942, 96941564, 76686793]) == 13\nassert solution.minJumps([73634899, 52304983, -6496184, -47541705, -15751534, -75661882, -46744927, -50907140, -60577717, -8321942, -98242138, -10670172, -11936423, -34925269, 23229049, 88992511, 50564984, -34392720, 1647947, -89387338, -96571540, 21885717, 94476565, -99932144, -34391105, -32793902, -59384207, -62576721, 90761435, 76287290, -70255734, 29810212, 66447989, 19190967, -85579146, -58823601, -2752948, 42859110, 12159300, -87322543, -82646239, -82288972, 60899539, -69117544, 39715467, -96294326, 29182710, 70185025, -25251440, -74865035, 33858920, 97855505, 26654436, -81849289, 95983350, -97437578]) == 55\nassert solution.minJumps([-57291761, 59819614, -33194401, -48471291, -14827050, -65582807, -42224146, 5532429, 11717907, 38742227, -39623251, -75676026, -37274725, 81812058, -30341978, 72408342, 42696107, 77706106, -87752751]) == 18\nassert solution.minJumps([-23713019, 22836006, 41715382, -1165090, 35995466, 17074361, 45446670, 25085671, 70483316, 89053427, 16258722, 4520049, -7723050, -79922133, -3635257, -62758302, 76329068, -29776973, 7844398, -38079013, -46125085, 98827536, -26122265, -32631363, -23019297, -95972551, -51560316, 65013099, 14765038, 19977825, 52794617, 57680703, 50046590, 27950586, -99543435, -44237180, -610961, -62300446, 90485462, -69891787, -63923831, 15049510, -94670875, 6140090, 29164049, -11382513, 94168561, 32480339, -94879839, 32574527, 10701466, 7424870, -33597879, 98970873, -33281404, 47292424, 61469285, -11061179, -21791416, 86948832, 99855090, -15751942, -90605140, -14426428, -71965514]) == 64\nassert solution.minJumps([69667811, -96356045, -57338431, -64794895, 21356805, -59027476, 98855810, 28357049, 78335834, -57275487, -77087762, -68564016, -72541210, -33082765, -42651199, 94262450, -919999, -51798609, 3448909]) == 18\nassert solution.minJumps([-10043775, -3299337, -62380658, -76579969, -47831850, -51766720, -35076736, -7186617, -33019929, 99644833, 52300224]) == 10\nassert solution.minJumps([-17516313, 145130, 1430111, -26142523, 43974245, 8091169, 82194531, -70115945, -33607656, -81073925, -78660742, -2144597, -24115228, 92527183, -94540219, -83806109, -98080619, 36843983, -41148953, -51746077, -37887172, 23956222, -3835399, -96446743, -56247553, -82338376, -2036814, -2271309, -16585364, -37145235, -78704527, -90982517, -5688668, 50355363, -41251710]) == 34\nassert solution.minJumps([-41012483, -37337126, 15512897, 4473492, 90909848, 48908010, 40466649, -9826501, -98176867, -16874535, 72603186, 27895873, 60230078, 12600273, -78245959, -81478440, -7903248, -52338906, -93730945, 34429971, -317467, 28784224, -8587695, 70377920, 43769044, -95518305, -63400789, 90236301, -36033572, 47000516, -14933382, -99068762, 71667178, -53862162, 68388265, 57446720, -28887046]) == 36\nassert solution.minJumps([66640208, -11602006, 44955948, 9397517, 82391320, 51396649, 60291376, 95390903, -86136188, -84016590, 1660753, 72187090, -17669596, -98971348, -39094521, -23547853, -66656768, -69214321, 66776721, -43846001, 69420924, 38745593, 71427089, -42174019, 65362353, 50260189, 11030600, 29135359, 21914769, 95102590, 69711060, -87650113, 53348195, 63392150, -7613358, -13338666, 35530811, -22443982, -13786856, -84943777, 94601430, 94714966, 78763160, -20339115, -97912537, -60791161, -7065362, -66707589, 35612825, -16427799, 20551510, 21756397, -33084239, 4338202, -54202347, 84784053, -6696796, -36180417, 51888881, 84247842, -30289505, -93004931, -64229945, -81012976, 90052362, -71787399, -88131565, 13512063, -91413845, -36120931, -54309814, 56320035, -89019134, 74148802, 41002970, -10386212, -4104352, -19489637, -53344575, -72152876, -68378343, -93382090, -85801587, -39822397, -4178537, -36957247, 50949196, -79459489, 49138822, 25254211, -72704291, 67080541, -36614842]) == 92\nassert solution.minJumps([-63358977, 74243782, -11906621, 30103097, -87975752, -97975353, -62465905, -47894138, 54338474, -6312847, -77863113, -14709060, -59574072, -40144636, 84824689, 58226262, -18256385, -84695004, -38651718, 84357213, 27705450, 94234997, -86068521, 45360879, -29426038, -86519922, 36791741, 62282587, 83975746, 69191818, -76787009, -50180008, -44540683, -17639903, -28034121, -46831787, 32446327, -56878240, 70753135, -48823572, 85599333, 28013181, 47781690, -66520327, -82851823, -66357486, 55153743, 59367225, -79175777, 2052593, 13645984, -36368487, 64028694, 45002339, 67741374, 14650780, 31185565, 37809053, 71707892, -89791103, 86562048, 10463894, -35426019, 41977840, 98812117, -65456293, -33811218, -26759129, -15721528, 5120976, 54529538, -78679652, 29105740, 14988148, 35022034]) == 74\nassert solution.minJumps([-20120485, -17847160, 83886314, 86205380, -76253220, 10289448, 85315649, -14744458, 34346368, -84015859, -19435110, -60421046, -72171142, 7765339, -93554174, 60984171, -57783269, 99417874, 68002464, -22622763, -99257167, 55096297, -91035180, 11884021, -10235680, 84807459, 82430637, 69696170, -40551172, 6977238, 45654267, 19050028, -34047975, -8635774, -52932951, 20148138, 10982349, 3096745, 10412574, 84851112, 86070403, -24414456, -26658600, 48979535, 18150941, -81076142, -25038970, 81924848, 48377585, 49305274, -11682365, 15186217, 13666282, 22553290, 33775167, 25017364, -73759235, 30982035, 11076200, 44645709, 35320357, -86516628]) == 61\nassert solution.minJumps([45110249, 45161712, 83343100, 70045987, -94271065, -71732744, 71993920, 82788877, 96031363, 43145283, -72668432, -39500043, 36746087, 68407257, 24227163, 53197006, 11798732, 89057338, 2876482, -43490697, -73619055, 29475587, 99543397, 43604055, 68588218, 71647336, 5640168, -79063073, 47112931, -39486096, 89120702, -24800417, 39726245, 79263265, -61335904, 48072725, -33738448, 94861355, 57780958, -31297663, 30173823, 14995300, -4039456, -26644349, 80800458, -8797361, -71674442, -3470962, -26925041, 39025436, 14940091, 99246336, 52775714, -97510715, -79596274, -15027609, 58470617, -44440217, 38012927, 62226170, -14007339, 43033263, -92893926]) == 62\nassert solution.minJumps([56782909, -36722959, -14503864, 47201679, -76307813, 19831102]) == 5\nassert solution.minJumps([-18174795, -84304206, 25752952, 77270875, -52157155, 69652898, 26070175, -59259163, 89885017, -83088465, -26066998]) == 10\nassert solution.minJumps([12395181, -14476614, -43345838, 98822641, 24054474, -68433725, -13109263, -18055940, -91827222, -60913654]) == 9\nassert solution.minJumps([63189176, 20522746, -14263600, 81324882, -30407113, 76324056, 41879073, 80022591, -30442416, 71213644, -61275152, -60549706, 10552422, 54851892, 56077638, -56526428, -23787286]) == 16\nassert solution.minJumps([-47259676, 64345389, -84628212, 55221335, -47552320, 43350999, -89456877, -98778367, 7036479, -80630773, 74784969, 19551759, 48352882, 42834276, -49656113, 77879368, 94630780, -63811921, 30821624, 95572008, 6610046, 42379292, -80287663, 62235045, -64589606, 91361575, 65060170, 17179270, -7590032, 51491317, 65935919, 84759644, 67771299, -65935561, 82548595, -97860215, 45234479, 2205985, -9490413, -28081279, -39243586, 87433818, 7975782, 10976724, 28662023, 17618607, 48092224, -48254363, 60320867, -52673033, -18438948, -69321978, -94160134, -56189488, -92037167, 20775796, -64757236, 91665673, -58890617, 70678763, 94058626, -94406769, -12234267, 22853155, 93861071, 7422594, -35444124, -31371646, 79225242, -71479476, 19433779]) == 70\nassert solution.minJumps([-3983601, -32274651, -58590957, 9260518, -60191701, 15176179, -19939948, 88054454, 55977096, 74754023, -23008625, 83184031, 95428668, -91937290, -28668134, -81876234, -56709163, -21128505, -91053017, 70948234, 73618769, -18311962, 85336705, -60100097, -52836389, -67824019, 65103771, 87555439, -87821561, 83863235, -90536963, -4054981, 66623441, 75565538, -38061527, -49444803, -87230800, -11755289, 23604311, 38218092]) == 39\nassert solution.minJumps([-16323132, -35269100, -89796305, -75021437, -88025279, -92844057, -45213656, 5154246, -40370051, 52739183, -77795126, 54325171, 39796109, -62141354, -30431184, -66006117, -22498443, -90432328, -82071759, 55918653, 326078, -94755441, -71459870, 892121, 95149064, 45367066, 32558106, 15231779, 85108806, 52507618, 10606472, -89738324, 64118495, -7583116, -42272423, -80468967, -52012091, -3795295, 41477394, 51098236, -70270714, -39368975, 20514347, -27029873, 46557950, -56018178, -34214695, -18854238, -71872526, -17228306, -25414144, 67170625, -17452739, -34740786, -3491550, 48879346, 94383120, -11985046, -67588961, 88376967, 51842088, -11762235, -65874016, -31049727, -47557255, -5899648, 80619941, 18271026, 2746883, -50332607, -68875827]) == 70\nassert solution.minJumps([-84953583, -42589189, 99403787, -95086727, 38254476, 3978706, -60580357, 12286685, 96395389, 73271369, -29708292, 25675079, -59654156, 48436557, 65919220, 81171620, -93029737, 70300005, 63875776, -35307544, -51125252, 51035992, -47391184, -72095625, 33973799, -65620697, -7320837, -24360919, 19466744, 91642677, -35376393, 38557217, -97723612, -48081868, -61155196, -32403632, 61592285, 24899095, 46133244, -19034671, 48040652, -64575201, -20084796, -44676746, -5621691, 79850317, -68263565, 91986323, -81168597, 35396085]) == 49\nassert solution.minJumps([-30523008, -11271486, -48691123, 17648454, 317835, 6655530, 93986097, 44273095, -48485815, 13329172, 58320708, 37955683, 53002908, -96246114, -83527142, -95624444, -99545892, 17629470]) == 17\nassert solution.minJumps([25372713, 85971776]) == 1\nassert solution.minJumps([37951200, -30966252, 71957505, -23949074, 96495546]) == 4\nassert solution.minJumps([-77121781, 70165124, -19378658, 67056318, -99620055, -77272261, -81413092, -32910006, -19738368, -14411752, 61706731, -60436357, 64522223, 18636772, 88684218, 89813000, -49137702, -90506188, -41411787, 3745936, 55117342, 29758829, -55819005, 70426823, 40344590, 62728220, -65891887, 29991439, -17594116, 29804133, -14566544, -18320604, -86279129, 46214108, 49038501, 38314793, 27580361, -729228, 48949371, -17967381, -19791238, -91232382, 88157590, 95814872, -78471585, 76468790, -21113875, -53482812, 83651028, -80435414, -66012880, -61031159, 39692022, -58111407, -82716524, 28235914, 47986577, 48504331, -86989679, 94552222, -86556065, -82504156, 39909048, 25425186, -89137129, 67722526, -83482254, 845888, -76892518, -19828400, 70938201, -84687930, -54959560, 23320013, -49491900, -17770476, 34042567, -43891670, -12178652, -86457312, -86898273, 87397171, 46543553, -72353923]) == 83\nassert solution.minJumps([-99285727, 29781592, -42400545, -51703444, -81752320, -20955929, 30080440, -18774522, -53543575, 67993853, -8059283, 68233500, 40668539, -32100793, 95884656, 12770432, 46484832, 40907612, 76064451, 19686587, -13015257, -28518525, 17116405, 1825047, 61636836, 59362603, 14323276, -87142352, 58544801, 44132234, -36979234, 76458687, -45914241, -4843426, -9911179, 52517115, 38046898]) == 36\nassert solution.minJumps([45176212]) == 0\nassert solution.minJumps([-41755765, 18790834, 96407517, 71191152, -47834421, 1702587, -68509967, 85664842, -89935238, -71812426, -72199834, 35163440, 44030389, -11669536, -48849479, -70840215, -86398164, 30219680, -96263045, 71318389, -76435626, -37704110, 86006561, -49117330, -16781255, -5264496, 21852494, 77753620]) == 27\nassert solution.minJumps([-2569586, -94285454, -67577713, 97992460, -80150550, 85945545, 63941994, -94761786, 23476926, 3018518, 8521100, 38851180, -37834478, -59346456, -87217903, -23243708, 17898082, 36233837, 75568603, 67428051, -26372806, 76404470, -86801030, 85675437, 62969072, 73692620, 55623738, -2792218, -15362988, -24570753, -5462225, -21764929, -24141724, 73149783, 40879658, -82448658, 89284536, -80160506, 37585135, -31806913, -8702634, -83007355, -7648833, 72705981, 91185864, 41774473, 54460437, 58058328, -230066, -96711164, -34932049, 37829322]) == 51\nassert solution.minJumps([-58929511, 5448979, 65040291, -89309260, -50487558, 42086313, -42960133, 18781242, -80891571, -64058818, 21400718, 83931724, 66141203, -65581132, 19873941, 17935172, -81381477, 14755885, -41310327, 37514047, -65418265, 47541587, -57153167, -33309011, 76517275, 17512411, -20652023, -12838020, 9935379, 79970161, 5896390, -99442020, 72622861, -35786929, 69364276, -32503665, 11012984, -41365292, -47546678, 42392640, 60551829, -67063429, -77505254, 97189201, -67995680, -9893768, -2826299, 46564901, 15191817, -96757146, -81769734, -56691873, -85063823, 80128445, 74987389, -51165278, 41428612, -4470589, -47890041, 99456714, -80975297, 17060759, 53170469, 75905811, -50421588, 95783206, -70693717, 71319140]) == 67\nassert solution.minJumps([-97937774, -94262070, 7436696, 31573682, -74207192, 28667184, 28838902, 50226279, 71781483, 83206148, -90197093, -81149603, -51715981, 25536579, 80620310, 61765560, 26279111, 18762940, 70293370, 46379414, -81742134, 11829017, -93806466, 80057376, -98144176, 2147099, 92493461, 25141971, 33769437, -64517064, -4354885, 36080043, -41408075, 58311082, -1476693, 25914186, 64281034, -39790505, 86178733, -10493232, 97896670, 15302475, 57309636, 80664362, -27029010, -35209857, 48066716, -44404706, -18794431, -74656444, 65475655, 91688072, -76111867, 66784874, -28765349, 11642501, -16373977, 58530858, 77519149, -36933197, -5573628, -98169786, -61532519, 7905360, -84749325, -88764316, 63737557, 79128132, -94093061, -45117144, -28606221, 43070455, 75670398, -59751206, 9430265, -82235524, -88617914, 95410825, 46936253, 69150269, -62871689, -81764468, -33892184]) == 82\nassert solution.minJumps([-37400223, -25486286, -87164125, -30351730, -2244809, 63621678, 70671699, -32189223, 85583815, 70253500, -62954592, -13152700, -88480593, 1893466, -86886212, -67459721, 92747443, -33227684, 33379502, 91713010, 33477607, -54985599, 47613080, -50550018, 31173596, -25818142, 26449455, 2941904, 33837612, 50383402, 76690632, -907327, -61035006, -75029316, -17628740, -53265281, -32171504, -21950579, 47410794, 93758177, -33504527, 11480659, 13323389, 67649789, -90703241, -44713066, -37758119, -85378266, -10076810, 25755752, 23926907, -2157010, 71444745, 52216549, 43937329, 13247506, -98510954, 44133765, 31166811, -84925627]) == 59\nassert solution.minJumps([-48332734, -12337475, -46114310, 95149075, -62178305, 78540430, -70350669, 8608783, 13152748, -48188513, -52471562, -48126439, 39795430, -59992723, 2633664, 86263114, -74253838, -83714600, -38989263, 24639484, 46446443, -9540248, -507927, -80299887, 25732093, -81575752, -24388838, -18297931, -88849696, -24006862, 9046425, 35722893, -32025072, 82030101, 42818754, 91473722, -73651566, 23224896, -1766336, -66219875, -24788287, -57447270, -97132077, -41751054, 81571537, 98160535, 76716301, -75463545, -64579851, 60073440, -1042204, -44790680, 97464609, 99330933, -70177086, -1613163, -97757949, 38653615, -57112772, -74755368, -42618553, -41292125, -40722954, -42200292, 84038287, -12245180, -4939256, 81725904, -89745070, 57617935, -83733506, -66393815, -51117916, -13078949, -43916378, -92798902, -62702493, -77514718, -57651240, 57454205, -6817270, 58068843, -70939621, -97647168, -77313354, 23460547, 44678738, -73533201, -46229785, -40159883, -95978814]) == 90\nassert solution.minJumps([3259088, -50251676, -16686462, -40800383, -32091267, -16164390, 71704366, 11912778, 55555917, -85354952, 61606936, 7590278, -63690847, -64186514, 46250940, -40890969, 13244530, -31525749, -41956198, -64982065, 30827775, 2426179, 83350200, -54501304, -95094129, -39641746, -47200714, 45924436, 47844090, -13411904, -70681107, -75968150, -95539174, -27542226, -61960582, -81423907, -34928990, -79576278, 29347050, 29792018, -19894923, -67200786, -60226091, -21778046, -88618118, 22357970, 49697822, 20792046, -93744287, -27525930, -82255832, 65134404, 22142170, -34655267, 27658694, 36497902, -34772666, 12784918, -92396967, 36534225, 99887805, -22793464, 31260066, 85099569, 25841969, 38787557, -55479464, 89757176, -70600457, 95366724, 57338193]) == 70\nassert solution.minJumps([82438476, -76792357, 68665324, 78424645, 80712030, -51398189, -76716299, -98851621, -16333923, 61218093, 70957319, 84998488, 50768818, -80398248, -15773948, 62643397, -58139104, -59395809, 64368678]) == 18\nassert solution.minJumps([85982201]) == 0\nassert solution.minJumps([3223089, -21486960, -39406255, -21581635, 70675487, 7585991, -51073920, 26061414, 73776311, 57155767, 47814475, -20888415, -76655886, 57653056, -6686747, -53420320, -24986146, 72978828, -78533619, 54718361, 95856235, -27517894, -69216568, -77239133, -26398888, -91558513, -47473413, -23979990, -37414462, -20069416, 76832567, -94857583, -20436864, 72553019, 41922805, 17675081, 33936223, -1537586, 80126485, -99776258, 12123525, -33838923, 97775758, -81683664, 35041082, -91291136, 30218436, 2442961, 1102281, 22357953, 87877166, -59867231, 57938557, -67477734, 40245528, -3145479, 39364142, 23219637, -91689764, -97859770, -54753258, 71035460, -28411761, 85556615, 21152892, -2642393, -84565012, 20205763, -61992498, 19877484, -86780480]) == 70\nassert solution.minJumps([-98324451, -42928863, -97592466, -29760772, -69144433, -55458115, -96682328, -51369808, 25839957, 55857867, 95194131, -38566809, 12464743, -24397462, -1311763, -905989, 63410641, -47860971, 52584099, -68454094, 92986397, 6239183, -35680701, 35467794, 97543809, 53182846, -2678649, -53291137, 99796502, 62131967, -74252070, 63315744, -99312804, -41927401, 32533693, 28184596, -73577397, 7115536, 95948544, 61734840, 77431533, -67945682, 14288120, 14582753]) == 43\nassert solution.minJumps([65707523, 31042216, -88793454, -95133769, 21279399, 27772479, 13818855, -53819134, 50288721, 60029688, -28141191, -32151970, -8640802, -43826707, -41126155, 93940174, -79650009, 34491733, 36982769, 78304508, 47117203, 19059156, -53786326, -56278303, 48778341, -46405187, 98632501, 66721437, 2028005, 38588549, 54564562, 2831822, 61983755, -18762220, -76931117, -80560341, 84670260, 97790620, 8277727, 77049116, 44649069, 49595001, 94077442, -31274609, 23163129, -28209643, 13490765, 49120928, -13587891, -43810231, 70282831, -43907229]) == 51\nassert solution.minJumps([82814313, -34525581, -29339921, -14609609, 44836557, -10611408, -18155019, -45512398, 33397205, 22104271, -17768398, -70880466, -76002643, 99890501, -31247315, 62934922, 67573989, 78520448, -26608029, -69756804]) == 19\nassert solution.minJumps([-97467374, 44685330, -37369888, -31864377, 76958985, 9299306, -83841943, 89769229, 87396105, -33969673, -48297415, -78854868, 34597129, 45477328, 5834772, -71719538, 80627025, 65491172, 78797396, 13238743, 88612276, -95865588, -82537283, -4675010, -31142622, -45900810, -47718120, 79766312, 45406324, 22991322, -42966188, 20623564, 71113, 84632304, 74289057, 56376599, 10535107, 50413133, -5098964, 34102855, -56908362, -39953134, 20514398, -89398005, -82247981, -21318980, 47817035, -47868396, -54427008, 59121220]) == 49\nassert solution.minJumps([-5977189, 26961813]) == 1\nassert solution.minJumps([75730021, 84040056, -6609892, -870943, 1057500, 72972660, 21781906, 10306804, 14305102, -98840815, -51623001, -61700112, -79505699, -40857794, 39218717, 63393557, 34019618, -11623239, 54834331, -57709423, 41822790, -4836534, 48294383, -83039117, -30122182, 77595154, -22983518, -85314141, -16625489, 22026380, 73153986, 5000591, -30312343, -35356641, -32917248, 62248461, 40339259, 43441298, 95063326, 89343193, -44509745, 53409052, 84764968, 58452208, -59056414, -66677412, -22050912, -78944783, -50208301, -39794345, 83000627, 44171918, -44495769, -51245367, -30895796, 54481711, -23366672, -34499931, -12167585, 2973682, -26186077, 47743666, -34142139]) == 62\nassert solution.minJumps([64344756, 85122447, 6227423, 37722021, 34439050, 50167417, 2728029, 87237951, -79962484, 6081919, -19264463, -97714497, -28090320, -53239940, 2543097, -15224839, 20607879, -93426622, -27245701, 8173761, 15430113, 35144062, 87897497, -10531416, 92980987, -71278307, -50010631, 97065998, -62242258, 9875266, -86207296, 65071101, -50890499, 94259323, 86602593, 32924806, -63186554]) == 36\nassert solution.minJumps([40572921, 94201575, -50623657, 83003792, 48036972, 59774963, 39742750, 50968010, -78216746, -35855794, -46255944, 35594187, -74694640, 29828676, 63662818, -76891271, 69580757, 34268286, -37421789, -78632438, -25357768, -52042053, -93377044, -39137177, -86454232, -97527115, -97561808, 19826017, -46089381, -45279746, 23255087, -44506818]) == 31\nassert solution.minJumps([-5827728, 14829773, 6803451, 64951697, -44803357, -8993096, 47166095, 78547786, -34864398, 39777500, 53097712, -48579935, 8707973, 55240472, -69736916, -65563999, -41076913, 10375759, 70089930, 22223486, -74517520, -56913002, -72011251, 63152321, 19545298, 82036829, 5544969, -83381397, 16624176, 73224090, -4941617, 55107899, -79607000, -53490261, 46111878, -44663717, 30343106, -43170634, -13668876, 17034837, -53716587, 53793536, 59763751, -82454660, 7136287, -44500082, -26602838, -11207727, -56285722, 64540952, -10682786, 25914888, 82663239, -10550014, -72618944, 73936149, 35785912, 31879171, 43352801, 63770916, -78383374, -75897472, 52786877, -25993979, 31502532, -73882036, 82889217, -32807875, 69918021, -5374611, -18299495, -51876763, -65118592, -80923878, -2729656, 88669361, -98289326, -30174005, -15687187, 94512754, -98658236, -26609133, 47876825, 86856884, -52281345, 27727214, -30437285, -46942377, 66300544, 81390382, -37093841]) == 90\nassert solution.minJumps([89334192, -36150174, 92969870, -94742098, 65405378, -73184579, 65981621, 2936926, 69326439, 2307460, -830424, 2338618, -70535744, -95082408, 73438703, 20242652, -3961616, 32858370, -60080547, 67505303, 75594720, -98345205, -94341817, -60148030, 42191402, -37219210, 431628, 45563561, -90853497, -29985287, 59475337, 92691915, 82556055, -98344940, -9755686, -89813464, -34793105, -9847216, -11796611, 72214683, -97127471, 79115481, -29002967, 11608631, -5307316, 59623762, 79077653, -41682290, -27902869, 89992844, -95383704, 56379561, 73566753, -38529999, -15956507, -78971491, -50583391, -30770289, 11226500, 55316270, -89473096, 51395608, -46352578, -97310513, -79606550, -83288707, 15246338, -67394768, 2812713, -2941340, 64450418, -69785460, -2009529, -62353662, 91117025, -12200090, 95524227, -57906977, -81734213, -23228730, 51274180, 96878879, 66246508, -80362938, -88141024, 8823067, 66790568]) == 86\nassert solution.minJumps([-83513309, 25582392, -80919979, 85683674, 69123418, 76509198, -89030604, -19232476, -37062104, -36695080, 66464788, -92999102, 36585408, -15424781, 43395935, 274700, -55904038, 98347253, 63093792, -96156453, 28303846, 88650172, 54693897, 61180345, 35260100, 55769386, -98727306, -62340676, 42172254, -6405444, 55797836, 35238629, 42284310, 38282963, -21704691, 19238862, -94121000, -78788088, 64007756, -99524463, -25656837, -62035535, 35144367, -85568647, 35686196, 94866755, -26432983, 91024565, 73936669, -80927332, -98584258, -15890552, -69962558, -73073126, 4028701, 46275321]) == 55\nassert solution.minJumps([-59568961, -4774126, -74138539, 30625289, 64477756, -88353351, 35716744, -80480654, -16341918, -79556249, 70872551, -58461362, -36765302, 61445122, -94512376, -28351386, -21759794, -64674499, 4369783, 488077, 70418721, 62462867, -65636492, -82924397, -15333779, -24239185, 22992027, -27299964, -34702249, 99562552, 38728906, 57169131, -40068315, 71055415, -48458557, -96802384, -38884511, 82144719, 20070915, -81018308, -86014726, -52847482, -94224728, -47698314, -26126927, 30154198, -74916166, 82710059, -90399468, 92431409]) == 49\nassert solution.minJumps([34264341, -13895976, 41403095, -37203800, 87883446, -33736723, -21090829, -89653792, -17850975, 73199389, -11862033, 57291929, -4269931, -98554791, -49022206, -16325864, 90618046, 72388534, -84475085, 24025308, 92600405, -49941710, 74489203, -89692019, 81862548, -56763053, -90235379, -18546772, 95539460, 70653595, 61080048, 78765080, -45612866, 76516595, 43724914, -37313099, -98574971, 1182508, -16140389, -911739, -72170123, 32710153, 87094652, -46587993, -91737690, 46845941, -96743203, 45037360, 70291185, -75771347, 8693762, -1183426, -69179791, -1058732, -93236724, -92664477, -76599573, 23000826, -15542155, 38762126, -57997837, -7265289, 25172015, -79259093, -7846925, -66394590, -17049465, -79149302, 68161926, 73048020, 98432413, 85342741, 79454945, 49146343, -14936329, 88097677, 38389046, -29812390, 46644948, -86381704, -60486061, 59960012, -68121379, 3734395]) == 83\nassert solution.minJumps([19165006, -11421148, 89822224, -55379176, -99424889, 63510478, 78758859, -10973322, -69619608, -50930467, -60510021, 46442052, -34223247, -42206848, -10304421, -55661538, 81536071, 93895179, -24224752, -52833759, 54935491, -19288868, 93159747, 69639765, -592041, -73209244, 68463998, 25898224, 17557375, -12542497, 10691080, -25862863, 84376597, -74016900, 71130732, 10885298, 67992110, 63022602, 84917953, 95422779, 98140723, -35097535, -53201018, 74776984, -20835430, 52853010, 9596304, 86773670, 23425788, -97063642, -87400772, -32206266, 26459085, -90438873, -3433039, 34038977, 12076585, -67809931, -10976839, 70238351, 47794861, -919566, -77369277, 67090319, 29806440, 61916127, -10566105, 17107651, 38036090, 52490839, 12032199, 90370332, -47723282, 26164938, -84079151, -84792801, 7242058, 29971306, -68543123, -64287100, -8306095, 78340460, 5741196, 87375191, 35010655, 27637341, 42221926]) == 86\nassert solution.minJumps([-49827618, -1179360, -71933554, 23599076, 76748955, 62305644, -85757267, -20284308, 80948440, 96573677, -44606998, 84636593, 81698325, 40890800, 75583576, 83729282, -13361211, 33807538, 87644025, -81776751, -61801998, 11001192, -43652020, -38088404, 91282352, -77319289, 36526823, -40457668, 39682796, -29661733, -42727406, 10994041]) == 31\nassert solution.minJumps([-64672134, -29148870, -56915371, 54770126, -26588958, -95515196, -78351326, -98268654, -31118759, -22852714, -36294715, -30596775, -31483684, 55474087, 78790849, -2444248, -15305026, -29999743, 10811806, -79791347, -31550820, -57352070, 95403341, -41588458, -24829868, 75025192, -74620886, -13062786, -11943687, -76983002, 83019192, 13363107, -60155858, 81945669, 36881568, 9750959, -89180158, -45228283, 61402194, 73687776, 83425352, 87240310, -1099749, -71016899, -17733793, -73396140, 81629770, 42460876, 96370902, -4718715, -60412895, -26905403, 81918991, -66195635, 66650691, -91077601, 53061865, 98728754, 22168359, -41004035, 97930829, 12041497, 22626309, 31251393, 26834622, -78096437, -88747018, -91967348, -98019320, -83554200, 58746569, -12855306, -68050600, -93846232, 21193522, -2673459, -65824841, -4241307, 48512001, 30394558, 80418273, 99249247, 51324172, -12630719, -95851717, 74817232, -74116256, 53980320, -66383284, -60745425, 64556418, 2299363, -50087884, 54890599, 81195527]) == 94\nassert solution.minJumps([8986065, 56244396, 76065656, -13318101, 70542227, 43757892, -97301816, 77669595, -35828984, 99943553, -71480148, -99111281, -79338031, -73315564, -59773999, -59359239, -85502700, 29413492, 21773134]) == 18\nassert solution.minJumps([-1336033, -32561063, 13857132, -75565660, 69193726, 45201669, 59903382, 94035499, 13425466, 42908433, 93478016, -24025611, 1219121, -32896025, 24311754, -25409131, 95322974, 71388542, -87705949, -50874146, -45495593, -15211495, 23637892, 54791920, -37615508, 63754641, 83400173, 93928039, 23104490, -60164473, -31953598, -37117695, 66954595, 7644229, 54903189, -43530781, 7742216, 14238480, 87768595, 28887977, 20893023, 93241258, 26165205, -15425516, -83262633, -94545444, 85559395, 88128176, 8533472, 78129941, 77263051, -40205947, 31810197, 87010782, 68782401, 63167368, 10321216, 38723308, -309577, 18863381, -30257097, 75324534, 98024193, -63811020, -34869546, 11489181, 68853272, 8940144, -86283443, 7032286, -23058343, -17110756, 14794204, -32402583, 23140111, 9532227, -19729937, -35058285, -7205770, 58171711, 373515, -58417766, -55888083, 95153417]) == 83\nassert solution.minJumps([36423853, 81267459, -69246372, 64809258, 22436685, -24588562, -37051951, 46193581, -14625535, 15737497, 12934778, 71442873, -96120723, 54134376, 60150088, -84450323, 65395462, -38473566, -93545190, -68309469, 12567431, 25191401, 43453975, -58024573, 60207451, -48883125, 36453734, -96040305, -73293486, 78254164, -15559474]) == 30\nassert solution.minJumps([83838010, -87205539, 59728297, 6105056, 2131000, 24516943, -63986365, -13405952, -55660877, -75950765, 75920284, -77391229, -21306907, 56988816, 17304150, -69856778]) == 15\nassert solution.minJumps([-19355401, -59244038, -19680125, -50537281, -32507180, -45824304, 90668425, -86149570, 5368618, 50511698, 16196635, 61940436, 39355958, 31609447, -12027660, 97219099, -60776717, 3785669, 3576603, -71013735, -35374710, -28158557, -30229680, -16726982, 45011903]) == 24\nassert solution.minJumps([-32260307, -52817625, -59521038, 50663845, 27372346, -8167535, -91863574, -26114478, -2362806, -76814538, -91384123, 45301079, -29610458, 30814416, -45630180, 73723760, 63943392, 39364236, 52354063, -38937371, 78788906, 96411123, -76548396, 37816361, 21875909, -94085473, 18191295, -26654901, -47228982, -88831821, 21415348]) == 30\nassert solution.minJumps([-30152086, 67754449, -46802227, 55144030, 3776025, -84897786, -61820487, -27442397, 82025665, 48808563, -87214651, -45914747, -87221481, -18051390, 91958476, -19391338, 47279326, 39103171, 11004938, 7775543, -72291536, 45364299, 34276681, 9295341]) == 23\nassert solution.minJumps([-36934726, 35821655, 30740185, 45827905, 3700866, -80655393, -5924490, -97483278, -3924308, -11213107, 16556402, -50060120, -94395361, -54439040, -16643935, 73114133, 69927199, 46842346, 65796052, -55964983, 62989470, 76630558, 30237075, 99563683, -32413442, 79349794, -64867011, -68944093, 76395239, -151291, 49958662, 67528144, 2073339, -97056610, 66349666, -35899040, -47215750, -94743201, 63146574, -71522478, -55110954, 58868558, -99391614, 49925578, -37157169, -5549164, -35397082, 79473373, 91652232, -27694228, 76365022, 68482518, -39153361, 89744803, 43167003, -20359640, -2441415, 42066143, 74167727, 88228485, -25741245, 56651944, 36358131, 95315926, 31869591, -29759750, 3870876, 95997474, -32361721, 15713960, -81507054, 74279280, -8654722, -1392065, 38570762, -46389446, 77108771, -6351853, 96021050, -1705298, -22383716, -6879761, 22796846, 13638586]) == 83\nassert solution.minJumps([-9832899, 44044436, 74894554, 69189063, 1095531, -89576703, 76415763, 85564908, 60493639, 35675160, 60484303, 1010496, 57036723, 24314108, 61125118, 82049402, -25561794, 96690101, 56309873, 17585966, 66773084]) == 20\nassert solution.minJumps([-82009901, -84943267, -72805604, 4450391, 99340966, -88509101, 24441237, 38337162, 62759263, -65303225, 7971300, -95330328, -7065193, 55821393, 46000794, -30105249, -71287820, -7020772, -6281607, 38567072, -74043609, -10062763, 84891455, -88214953, -40741997, -46330143, 30971007, -25087338, -99096885, -99984375, -54914681, -10468086, -18905356, 61241890, 63728908, -93998754, -63352866, -38012879, -53610281, 81069289, -32503804, -62553925, 60622712, 90592849, 35682840, -44761468, 41505433, -35531575, -63679982, -89987984, -18159227, 14207887, -20256094, 50871897, 53455988, 37338336, -20347382, -7714299, 50872496, -5291247, -43494421, 22868370, -85262554, 23977640, -388501, -64416726, 72900997, -31566163, -52869052, -5057880, -47079343, 18642010, 85726487, -65245009, -96387849, 1142154]) == 75\nassert solution.minJumps([-82984431, 426071, 62008377, -38882891, 15519980, -9096355, -9446481, -52075275, 32941405, -57843734, 90249500, -43247595, -27195591, -70201321, 12751070, 88683607, 21893143, -48961443, -19939211, -18419464, -11050712, 98464949, 81936607, 3196584, 96336618, -55977791, 18747200, 56045538, -86409743, -39101008, -42874756, -51466746, -41586650, -78681910, 87409679, 77573045, -91073385, -71333567, 65178054, 57212983, 706289, -96157195, 30843644, 49909622, 5040770, -88887822, 43981946, -20865262, 80572978, 93052548, -86096160, 77352571, -10417705, 8997845, -659837, -25760529, -67734872, -95485012, -5086011, -25177127, -35063059, -37285094, -13383620, -5641430, 16816372, 87160328, -3440898, 27660865, -47599856, -1469537, 57326765, 89320034, -19953697, 80423006, -27069657, -50434355, -32166244, -61778828, -86917182, 58267196, 65885488, 17133826, 66730027, 63161090, -47642197, 40042335, -52148187, 5930128]) == 87\nassert solution.minJumps([79237890, -15697897, -58080571, 23398867, 87918774, 27611607, -28114079, 93491, -84765263, -4074595, 97353870, -48292546, -81476939, 50970878, 17565175, 63329514, -35992965, -53240499, 29920406, 71595249, -36167843, 50621034, 65226160, -35085157, 90396446, 20052340, -83327892, 36626488, 21478924, 91474043, 24104725, -99047354, 47154847, -64983072, -78320914, 73447751, -87761142, 7786728, 22308245, -66298681, 21885972, -20160550, -6250733, 51588617, 77063514, -30276125, 63343236, -37259040, -57970646, 31784385, -21899669, 85931472, 66583331, -36954521, 34816747, 17595479, 41422618, 31380796, -84051704, -2180199, 56546400]) == 60\nassert solution.minJumps([18839751, 2053210, -58457282, 73466007, 44468857, -2838195, 76053665, 43488276, 95905607, 44286147, -22731045, -51507308, -48274602]) == 12\nassert solution.minJumps([-33879868, 58602778, -75528449, 60335570, 19104867, -97623900, -43305839, -62758808, -13183470, -73493706, 21105994, -51668058, 82042234, 10359675, -15596249, 16225492, -19297497, -62750834, 83501958, -98799415, 58117402, 97237298, 25621154, 13932471, -25738458, -91467860, 12812571, -47970063, -24318367, 11871531, 87253828, 90488913, 35179373, 87784197, -52645822, -6207761, -10093285, 14155673, -1764375, 10254536, -40653624, 49284955, 9256256, 38160743, 30180913, 65954315, -80237021, -16895580, 67067173, 93078272, 56313663, -16774199, -88323017, -1356687, 49065409, 64625797]) == 55\nassert solution.minJumps([-77545149, 61361617, 5257471, 32490100, -46881283, 29106284, 96493883, 76178570, -7026828, 72837859, 54686968, 8692763, 497235, -22848884, -78276774, -3180658, 26493637, -97601140, 13932486, 74969497, 9132642, 78353728, 27196826]) == 22\nassert solution.minJumps([-35306377, -27488880, -46445927, 86527257, 69961291, -62062918, -29165453, 82657750, -54539828, -34841489, -84356106, 2257275, 49733004, 77087667, -45927023, -71801101, 56742324, -97031510, 11432815, -36211540, -40221419, 36604903, 70863220, -87398779, -22330074, 49433509, -1524903, -68102690, -46652789, -47859805, 59566974, -5932132, -1847304, -93442890, 44333900, 87498934, -59620898, 30224091, -96052092, -90692519, 9094589, -49382000, -82744465, 30560347, -95473832, -125627, -24656052, -6848436, 47127720, -81930192, 6124052, -39489916, 27589780, -43218920, -3899253, 50313937, -84732445, 67124815, 34089288, 17289653, -12028174, 55661096, 29983437, -87299584, 47962268, 77217239, 60179774, 58163361, -57648668, 63669309, -74015192, -86997080, 82064651, 1257958, 12688926, 3331226, 12691983]) == 76\nassert solution.minJumps([-69601473, 87067387, 56787537, -2265842, -91206440, -84632776, 14452202, -31990173, -60510721, -9489454, 53582701, 52393653, 97652727, -67648044, -96646469, -76842031, 9148724, 94579260, 55685296, 6865372, 78613298, 22602662, -445386, -17763601, -11453809, 23002181, -55543407, -48903262, -97289554, -5983598, 50512311, 7517049, -24716202, -41647341, 6328063, -98569548, 21988801, -98025576, -71736511, 67465856, 58082155, 40691515, 84454220, 84519996, -63475023, -13244648, 21490402, -29637563, -22551296, 20893874, 466306, -91327159, 91123977, 67843808, -23503344, 61802729, 36094604, 6629558, -55872349]) == 58\nassert solution.minJumps([49916501, -52500148, -21111333, -56129529, 61472955, -34750976, 11314837, -67221810, 77563422, 79850164, 64047337, -61516248, 27127008, 83572514, -49566659, 57226960, 25809762, -32284428, 1939565, 41964769, 7233962, 87061857, -15182542, -68457062, -38017800, 96328325, -48096357, -98437032, -95698262, 80474452, 50982274, -37587189]) == 31\nassert solution.minJumps([-299842, 68692727, -94465634, 88475837, -94412302, -77828304, -25915800, 80661168, -59314843, -86037079, 27004887, 53572202, -41031621, 30700384, -15897873, 78332303, -53834384, 6732282, -98295622, 66582090, 22899935, -39213142, -69417256, 81452541, 10373797, -79132710, 36732621, 50413881, -58783944, 51616688, 30713904, 35603804, 9502920, 32453404, 80690116, -63826557, -59434621, 21042886, 27768082, -46376909, -5512739, 8093716, -57870866, -99964870, 20985151, 23051268, -2118390, 66826243, -33004689, 35013172, -28780028]) == 50\nassert solution.minJumps([8553618, -42266268, -13188036, -2466698, -68993036, 53659822, 79987559, 97578204, -72060154, 70163699, 85616650, -32559206, 13431698, -56209510, -75034834, 75399304, -30665585, -96871119, -62607939, 12510297, 37207166, 65178238, -67474509, -37360474, 33474833, 32674755, 73984906, -23424923, 49235385, -54726392, -74255714, -1062540, 27472481, 84663720, -70307880, 90809706, 62611675, -46431011, -60003571, -33153347, 86754828, 37644510, 9110074, -39248994, -81875973, -66433526, 82984791, -87494230, 63819687, -6170920, -36532110, 45600261, -39107337, 34369244, 76802782, -25483140, -66635115, 12646045, 89810773, 21817798, 34783821, -195280, -23292605, 3004671, 61378297, 99325582, -1457374, -5706319, -14544473]) == 68\nassert solution.minJumps([36682473, 94915832, -93752008, 91520147, -60101005, -7665349, 33783383, 99833622, 52941877, -27848505, -28842012, 35200200, -49927005, -7358007, -13996153, 75526836, -29918626, -62100089, -35150071, 57419320, 16851741, -42713048, 44905348, -70542488, -23159831, 39818938, -69551075, 67469419, -84459196, -34977107, -9636759, -17792088, -66005323, 13322327, -30050220, 46891100, 474728, -59689151, 49580628, -80915915, 23940371, -85673082, -72058500, -650514]) == 43\nassert solution.minJumps([-57439040, -80941153, 71552863, 32601841, 88222932, 21037091, -5021338, -44623347, 48633744, 27869970, 80231387, 497177, -70022630, -46244797, -88197127, 2081030, -31893469, -39502950, -71213873, 53721931, 18540052, -80309438, 53135787, -86934162, -15167199, -5090553, -84017284, -15137613, 32045882, -11148374, 5471511, -73279957, 38234814, -14296103, -29577593, 35416806, 54806914, 4064158, -67879965, 32652772, 61002754, 40393271, -54463076, -19532264, 23297325, -2842477, -52253583, -78890146, 21997978, -65810619, 78527591, -18289276, 99009262, -93168575, -5908375, -35317796, -69283662, 54735728, -96100903, -17213897, 79576100, -65449533, -88199151, -61660628, 97516102, -13831674, 96333835, 84301661, -87712127, -76161188, 25438048, 76454327]) == 71\nassert solution.minJumps([-64704885, 52284764, -59953776, 21761550, -31519983, 62052923, -61318832, 36171879, -52528440, 7578482, -78940945, -64471741, 87118538, -87845427, 35925206, -99101897, 45793775, 86745938, 46517641, -1852132, -57144615, -73059853, -39488482]) == 22\nassert solution.minJumps([32856272, -79195996, 8374051, 45307868, -52572274, 61290187, 40486823, -85187752, -47151640, -3093855, 20687331, 8376499, -11449597, -86486377, -15714163, -7327894, -98155517, -91967724, 58544461, -8055038, 6603050, 40922215, 24113685, 5236523, -98904363, -5146979, 62431630, 32014928, -17661647, -96427010, 69072298, -20522548, -92136096, 36225853, -54103957, -44949290, -15054840, 36354203, 38768278, 35427606, 54857738, -63973064, -1893488, 76506490, -85290996, -58115214, 9138768, -97002283, -8180130, 30983702, -45086969, 77670079, -98514615, 733047, -76896990, -13160898, 83217547, 46829191, -40342606, -7204407, -90304118, -25063336, -34327919, -93738017, 3505587, 90199510, 81796085, 27195291, -57783873, 63311274, -74730109, -76161641, 59288196, 37228167, 11839676, 15073593, -14617473, 65427588, -14608892, 42843050, 92746075, 85147980, -89030972, -75052009, -3670342, -64779580, 11534687, -9068529, -37750382, -23147110, -89105772, -31709542, 15927332, 31806416]) == 93\nassert solution.minJumps([51013444, 81636040, -68940331, -13474834, 21961566, -33291677, 35302594]) == 6\nassert solution.minJumps([58497265, -91550294, 27128663, 24752930, 33063123, -17655277, 28510422, 78660819, 46241334, -28511044, -33331988, -7132699, -90271617, -79265066, -94031832, -81683347, -77374084, 29425281, 65996871, -80300854, -75805290, 59965072, 74448138, -83990595, -501335, 26935131, -45915113, -63615947, 20728564, 98511554, -87158809, 15974778, -89296391, -39504112, 53299594, 7515578, 90355967, 4712455, -37367531, -87036346, 69363665, 89863049, -58280270, -84890700, -17665130, -70631663, -61776355, 53872784, -23201543, 63505744, 75736010, -61779045, -81392515, -99413789, -34614441, -88000123, -42389264, 83250727, -98722963, -35838768, -10619584, -91272870, 90426700, -35772910, 44559084, 96510764, -20726847, -74651108, 11621812, -71987847, -30651371, 5085069, -11002047, -85613820, -49852969, -20117622, -55887521, 79817233, 28148318]) == 78\nassert solution.minJumps([13339145, -49709286, -87617972, -42960790, 81354708, -82873262, 57808189, 84288761, -82320275, 86733326, 78294102, -93204722, -38912626, -56366683, -36958362, -27595666, 50207725, 97611688, -3839742, 47265381, -60194943, -89971996, -20580849, 77566042, 52698165, -86563484, -74331978, -37926851, 30540930, 52519963, 97645224, 68482144, -95469072, -64571544, -90344153, 68248430, 24394666, -42065974, 39389227, -68290406, -75737475, -9774199, -99545974, -57536055, -33658538, 65513999, -55557882, -1749338, 61057124, -89203143, 87826708, -66118091, -54311561, -66609528, -25181286, 12203556, 39205807, -62388518, 90292633, 51798025, 62702468, 30404015, -57592095, 47650121, 48869769, 43192039, 90411231, -79148452, -56396651, -45940641, -73058467, 59635451, 72234728, 82363941, -54689839, -78709718, 13031258]) == 76\nassert solution.minJumps([-67536816, -73582377, 28279485, -90846072, 14861660, 53973476, -95767519, 21077782, 25997939, 29668593, 56185895, -89050949, -98309827, -18521510, -42835925, 28444894, -32543900, 49581495, 45477360, -91983460, -93670685, 22382295, 29388953, 58250690, -24083111, -9285087, -55086896, 81271378, -93877775, -30500396, -98971296, -93885765, -12704601, 6520700, 14715150, -323641, -42462228, 21835243, -54008359, 98034391, -83902880, -41864384, 77575921, 16585788, 784374, -86195188, -6262686, -75991354, 44447428, -12666324, 79379264, 21867285, -85798897, -63374107, -20599322, -11062755, -4755380, -15744546, 68737729, 89099315, -13385445, 8287121, -39425541, -71562568, -78300834, -73037614, -52871139, 56914733, 31950751, -72074766, 75094028, 21874035, 31519634, -87789702, -49701289, -26420374, 56972478, 199265, 89857578, 18831687, -74739110, -1130816, -96743982, -93113807, -39323045, 2773000]) == 85\nassert solution.minJumps([79636680, 26783466, 67243282, -6379004, 44163539, 56062160, -81334164, 49189202, 51150524, 19390002, -99773292, -25455011, 60638450, 74483701, 97603116, -96024280, 2584400, -89606163, 12719180, -35783117, 68531901, -64605798, 79771478, 1505011, 16931432, -49763684, 64216500, -4530260, 49238795, 49660502, 77690074]) == 30\nassert solution.minJumps([-76056352, -78811500, -8780971, 24083732, 51831551, -48201777, -79821057, -40409390, 1733675, 5052959, 22220015, 91904098, -5773518, 63255095, 70098801, 30701055, 71062076, 82431885, 78926104, -99653902, -14779381, 63608309, 71340724, 8305078, -9089483, -129050, 21345624, -55743516, -81731094, 90529048, -57174757, -79125271, 27972214, -73432167, 54351251, 62554681, -90521536, -91513028, -31241248, 6774001, 48320927]) == 40\nassert solution.minJumps([-62807246, 63233377, -94900725, 69179585, -68431742, -97743210, 350899, -13476338, 43188020, 86641847, 137710, -54131162, -81738603, 7123894, 89181363, 32073983, 33646139, 47862863, -68550577, 32658980, -32916680, -66578345, 92649794, -50647351, -4266420, -9868923, -15368915, 65317716]) == 27\nassert solution.minJumps([37283544, 63107300, -84632529, -15464601, 6885758, -92954979, -85227754, -87616317, 99594466, -13534697, -84816931, 34118039, -69896674, -25878536, 39151177, -36297930, 14258349, 84936649, 36442055, -28866227, 78361756, 57452910, 4381459, 50831125, 80083660, -87850480, -71258271, 59400787, -69861433, -67281135, -32768751, 93577547, 42132089, 10649904, 16928252, -59700945, 35172951, 12642682, 78508350, 60130324, -20484362, 1807446, 90368939, 39390949, -34699408, -93074259, -49265194, -46989310, -98406521, 49473515, -76614697, -27526585, -68411673, -13130609, 68331609, -47174481, 26807847, 27904559, 59344791, -85298432, 43463001, -84379637, 45234850, -41449786, 2475972, 27527794, -10432058, 59187210, 99739036, -98941006, -9847106, 96539715, -41244715, -94205592, -24258107, -42596607, -5494061, 94026557, 9493163, -70406240, -23222830, 46419479, -9201126, 71021189, -1190828, -36287421, -31006857, -23410538, -6821643, -55783967]) == 89",
  "inefficient_solution": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        n = len(arr)\n        jumps = [n] * n\n        jumps[0] = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n            for j in range(n):\n                if arr[i] == arr[j]:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n        return jumps[-1]",
  "is_python": true
}