{
  "problem_idx": 841,
  "task_name": "Keys and Rooms",
  "markdown_description": "\nThere are `n` rooms labeled from `0` to `n - 1`\u00a0and all the rooms are locked except for room `0`. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\n\n\nWhen you visit a room, you may find a set of **distinct keys** in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\n\n\nGiven an array `rooms` where `rooms[i]` is the set of keys that you can obtain if you visited room `i`, return `true` *if you can visit **all** the rooms, or* `false` *otherwise*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** rooms = [[1],[2],[3],[]]\n**Output:** true\n**Explanation:** \nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** rooms = [[1,3],[3,0,1],[2],[0]]\n**Output:** false\n**Explanation:** We can not enter room number 2 since the only key that unlocks it is in that room.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == rooms.length`\n* `2 <= n <= 1000`\n* `0 <= rooms[i].length <= 1000`\n* `1 <= sum(rooms[i].length) <= 3000`\n* `0 <= rooms[i][j] < n`\n* All the values of `rooms[i]` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        def dfs(u):\n            if u in vis:\n                return\n            vis.add(u)\n            for v in rooms[u]:\n                dfs(v)\n\n        vis = set()\n        dfs(0)\n        return len(vis) == len(rooms)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        def dfs(u):\n            if u in vis:\n                return\n            vis.add(u)\n            for v in rooms[u]:\n                dfs(v)\n\n        vis = set()\n        dfs(0)\n        return len(vis) == len(rooms)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random rooms list\n    n = random.randint(2, 10)\n    rooms = []\n    for i in range(n):\n        keys = random.sample(range(n), random.randint(0, n - 1))\n        rooms.append(keys)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.canVisitAllRooms(rooms)\n\n    return rooms, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        rooms, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.canVisitAllRooms(rooms) == expected_result\n        print(f\"assert solution.canVisitAllRooms({rooms}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.canVisitAllRooms({rooms}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.canVisitAllRooms([[], []]) == False\nassert solution.canVisitAllRooms([[0, 2], [5, 3, 4, 0], [4, 1], [3, 6, 0], [4], [], [2]]) == True\nassert solution.canVisitAllRooms([[5], [0, 7, 2, 1], [4, 6, 2, 0], [6, 3], [0, 6, 5, 1], [2, 6, 4, 3, 7, 0, 1], [1, 2, 4, 6, 5, 0], [0]]) == True\nassert solution.canVisitAllRooms([[4], [3, 0, 5, 8, 2], [4, 5, 6], [4, 5], [1, 5, 0, 8], [1, 0, 2, 3, 7, 4, 6, 8], [0, 1, 7, 5, 3, 2, 8, 4], [5, 7, 1, 0], [6, 2, 4, 0, 8, 5, 3, 1]]) == True\nassert solution.canVisitAllRooms([[2, 6, 4, 0, 3, 9, 5], [8, 4, 1, 9, 2], [4, 8, 2, 6, 5, 3, 1], [2, 8, 3, 0, 6, 7], [1, 9, 0, 3, 2, 4], [6, 9, 7, 1], [2, 6, 7, 1, 8, 3, 5], [9, 2, 5, 4, 3, 7, 1, 6], [0, 7, 4, 6, 9, 8], []]) == True\nassert solution.canVisitAllRooms([[1, 2, 9, 5, 8, 4, 0, 3, 7], [7], [0, 6, 7, 8, 2, 1], [9, 5, 0, 3, 7, 4, 2], [7, 0, 8, 6], [8, 1, 0], [1, 7, 9, 6, 4, 3, 0], [5, 6, 8, 0, 2, 7, 4, 3], [9, 0, 8, 2, 5], [6, 4, 1, 2, 0, 7, 5, 8, 3]]) == True\nassert solution.canVisitAllRooms([[5, 1, 0, 4, 3, 6], [], [2, 5, 1, 3, 0], [2], [1, 4, 3], [4, 5, 0, 3, 2], [4, 6, 1, 2]]) == True\nassert solution.canVisitAllRooms([[], [3, 1, 9, 4, 8, 6], [1, 2], [5, 1, 3], [3, 0, 8], [8, 9, 7, 3, 2, 0, 1, 5], [0, 9, 8, 7, 5, 3, 2, 6], [1, 5, 4, 0, 9, 6], [8, 1, 5, 0, 4, 2, 7, 9], [6, 4, 8, 1, 7, 5]]) == False\nassert solution.canVisitAllRooms([[3], [2, 1, 5, 4], [7, 6, 0, 2, 1], [], [], [], [5, 3, 1, 4, 0], [3, 6, 0]]) == False\nassert solution.canVisitAllRooms([[4], [3, 4, 6, 1], [2, 4, 3], [6, 1], [3, 0, 4, 1, 6], [1, 7], [7, 2, 0, 3, 4], [5]]) == True\nassert solution.canVisitAllRooms([[8], [4, 2], [4], [], [5, 8, 3, 0, 2, 7, 4], [6, 7, 8, 3, 5, 1, 4], [], [1, 4, 5], [7, 0, 4, 1, 3, 2, 5]]) == True\nassert solution.canVisitAllRooms([[], [1, 2], [1]]) == False\nassert solution.canVisitAllRooms([[3], [0, 1, 2], [3, 0, 1], [3, 1, 2]]) == True\nassert solution.canVisitAllRooms([[0, 5, 4], [6, 2, 0], [2, 4, 3], [0, 3, 4, 2, 5, 1], [5, 4, 6], [4, 0, 3, 2, 1], [3]]) == True\nassert solution.canVisitAllRooms([[5, 1, 2, 0, 3], [2, 1, 0, 6, 3], [5, 3, 2], [0, 3, 4, 5, 6, 8], [7, 5, 8, 0, 6, 1], [2, 3, 6, 4, 1], [7, 2], [5, 2, 1], [2, 7, 6, 5, 8, 4, 3, 1]]) == True\nassert solution.canVisitAllRooms([[], [4, 0, 3, 5], [5], [0, 5, 2, 1], [1, 0, 5], [3, 5, 0, 4, 2]]) == False\nassert solution.canVisitAllRooms([[5, 3], [0, 5, 4, 6, 2], [5, 4], [4, 2, 6], [1, 2, 6, 4], [3, 6, 1], [0, 1]]) == True\nassert solution.canVisitAllRooms([[3], [], [0, 2, 3], [1, 3, 2]]) == True\nassert solution.canVisitAllRooms([[3, 1, 5, 6, 4], [], [1, 7], [6, 3], [1, 7, 5, 0, 6, 4, 3, 2], [7, 2, 9, 0, 5, 1, 8], [6, 5, 0, 4, 9, 7], [0, 8, 5, 1, 9, 7], [3], [0, 8, 5, 7, 6]]) == True\nassert solution.canVisitAllRooms([[2, 0, 3], [3, 1, 2], [2, 3], [1, 0, 2]]) == True\nassert solution.canVisitAllRooms([[0, 1, 4, 2], [], [4, 3], [], [2, 4, 0, 3]]) == True\nassert solution.canVisitAllRooms([[1], [0]]) == True\nassert solution.canVisitAllRooms([[3, 0, 5], [3, 1], [3, 1], [3, 1, 2, 4, 5], [3, 0, 2, 1, 5], [5]]) == True\nassert solution.canVisitAllRooms([[2], [1, 0], [2, 0], [1, 3, 0]]) == False\nassert solution.canVisitAllRooms([[], []]) == False\nassert solution.canVisitAllRooms([[4, 2, 5], [1, 3, 4, 2, 5], [2], [3, 0, 5, 2, 4], [2, 3, 5], [0, 3, 1]]) == True\nassert solution.canVisitAllRooms([[1, 0], [2], [], []]) == False\nassert solution.canVisitAllRooms([[3, 1], [], [3, 4, 0, 2], [0, 2, 1], [4, 2, 3]]) == True\nassert solution.canVisitAllRooms([[0, 2, 4, 3], [1, 0, 3, 4], [4, 2, 3, 0], [4, 2, 1, 3], [1]]) == True\nassert solution.canVisitAllRooms([[], [1, 6, 4, 2, 5], [3, 2, 6, 4, 5, 1], [], [4, 5, 3, 2, 1], [3, 1, 6, 4], [2, 0, 6]]) == False\nassert solution.canVisitAllRooms([[4, 0], [5, 0, 2, 3], [2, 4], [3, 4, 0, 1, 2], [0, 2], [5, 1, 4, 0]]) == False\nassert solution.canVisitAllRooms([[8, 1, 2, 7, 4, 5, 3], [9, 3, 0, 5], [9, 1, 7, 3, 2, 6, 8], [6], [0, 6, 7, 9, 2, 5, 8], [5, 0], [5, 6, 7, 9, 1, 4, 0, 2, 8], [1, 0, 9, 4], [1, 0, 8, 4, 3, 7, 5], [7, 0, 2]]) == True\nassert solution.canVisitAllRooms([[0], [5, 1, 2], [5, 3, 2, 1, 4], [2, 0, 1, 3, 4], [2, 1, 5], []]) == False\nassert solution.canVisitAllRooms([[2, 1, 3], [], [6, 5, 4, 3, 2], [6, 5, 1, 4], [], [2], [5, 6, 2]]) == True\nassert solution.canVisitAllRooms([[2, 1, 8, 6, 5], [7, 2, 8, 6, 4], [4, 9], [2, 9], [9, 0, 5, 1, 4, 7, 3], [], [0, 8, 4, 1, 9, 3, 5, 2, 6], [0, 7, 9, 6, 5, 8, 3], [0, 5, 1, 2, 8, 7], [3, 2, 4, 6, 0, 7, 5]]) == True\nassert solution.canVisitAllRooms([[4, 0, 6, 7], [7, 0, 2, 5, 6], [1, 7, 0], [4, 6, 1, 3, 5, 7, 0], [6], [4, 3], [], [3, 5, 6, 0, 2]]) == True\nassert solution.canVisitAllRooms([[3, 2, 0], [], [], [4, 2], [3, 0, 2]]) == False\nassert solution.canVisitAllRooms([[1, 6, 5, 4, 8, 7, 3], [6], [], [1, 4, 7, 3], [8, 4, 3, 1, 0, 9], [], [7, 1, 9], [2, 6, 4, 8, 1], [], [9, 1, 4, 5, 7, 2, 6, 3, 0]]) == True\nassert solution.canVisitAllRooms([[4], [1, 4], [3, 5, 0], [], [5, 0, 3, 1, 2], [], [0, 1, 4, 7, 5], [7, 1, 4, 6, 0]]) == False\nassert solution.canVisitAllRooms([[2, 5], [1, 0, 5, 4], [7], [6, 5, 0, 1, 2, 4, 7], [0, 1, 6, 2], [0, 2, 1, 6, 3, 4, 5], [4, 6, 1, 0, 7, 3, 5], [7, 6, 2, 4, 5, 3]]) == True\nassert solution.canVisitAllRooms([[1], []]) == True\nassert solution.canVisitAllRooms([[2, 5, 6, 3], [3, 5, 4, 6, 0, 1, 7], [8, 1, 5, 2, 6, 7], [2], [6, 8, 7, 2, 0, 1], [3, 2, 5, 6, 1, 0, 8], [6, 0], [2, 1], [5, 3]]) == True\nassert solution.canVisitAllRooms([[4, 3], [], [3, 5], [0], [2, 0], [0, 4, 3, 1, 2]]) == True\nassert solution.canVisitAllRooms([[4], [2, 3, 5, 0], [5, 0, 4], [2, 1, 3], [1, 2, 3], [3, 0, 4, 5]]) == True\nassert solution.canVisitAllRooms([[], [1, 2], [2, 0, 1], [0, 1]]) == False\nassert solution.canVisitAllRooms([[1, 0], [], [0, 2]]) == False\nassert solution.canVisitAllRooms([[5, 8, 2, 0], [2, 3, 7, 8, 1, 5, 0, 4], [7, 6, 5, 8, 4, 0, 1], [5, 8, 7, 0, 4, 6, 2, 3], [7, 2, 6], [6, 4, 3, 1, 7, 0, 8], [8, 6, 2, 5], [5, 8, 3, 7], [5, 2, 8, 3, 6]]) == True\nassert solution.canVisitAllRooms([[2, 4, 1, 3], [4, 2, 3], [4], [2, 3], [0]]) == True\nassert solution.canVisitAllRooms([[], [1, 4, 6, 7, 3], [1, 6, 4], [], [4], [], [0, 7, 2, 3, 6], [2, 7, 6]]) == False\nassert solution.canVisitAllRooms([[4], [0, 1, 6, 7, 2, 4, 5], [2, 4, 0, 3, 5, 7], [7, 6, 2, 4, 0, 5, 1], [4, 3, 7, 5, 1, 6, 2], [6, 2, 3, 7, 0], [4, 2, 5], [5, 1, 3, 0, 6, 7]]) == True\nassert solution.canVisitAllRooms([[4, 2, 0], [2, 0], [2, 0, 3, 1], [], [1, 0]]) == True\nassert solution.canVisitAllRooms([[0], [0]]) == False\nassert solution.canVisitAllRooms([[6, 4], [6, 2, 9, 7, 0, 4, 1, 3], [0, 1, 5, 9], [], [], [9, 0, 4], [3], [9, 6, 4, 5, 0], [9, 1, 3, 6, 5], [0, 6]]) == False\nassert solution.canVisitAllRooms([[1], []]) == True\nassert solution.canVisitAllRooms([[], [1, 0], [0, 3], []]) == False\nassert solution.canVisitAllRooms([[], [1], [1]]) == False\nassert solution.canVisitAllRooms([[], [2, 0], [1]]) == False\nassert solution.canVisitAllRooms([[2], [], [0, 1]]) == True\nassert solution.canVisitAllRooms([[2, 3, 1, 5, 0, 4], [], [2, 5, 0, 3], [0, 3, 2, 1, 6, 4], [6, 4], [2, 6, 3, 0], [4, 5, 0, 3, 2]]) == True\nassert solution.canVisitAllRooms([[0], []]) == False\nassert solution.canVisitAllRooms([[], [0, 1, 2], [], [4, 2, 0, 3], [3, 1, 5], []]) == False\nassert solution.canVisitAllRooms([[0, 6, 3], [0, 3, 6], [1, 4], [6], [3, 4, 2, 6, 1, 5], [5, 4, 2, 6], []]) == False\nassert solution.canVisitAllRooms([[0], [3, 5], [2, 4, 0], [4, 5, 1, 2, 0, 6], [0, 6], [6, 5, 4, 1, 2], [0, 2]]) == False\nassert solution.canVisitAllRooms([[2], [], [0, 9, 5, 4, 1, 3, 6, 2], [8, 5, 4, 0, 2, 1, 7], [9, 0, 6, 5], [1, 3], [6, 5, 3, 9, 8, 1, 4, 0, 7], [5, 0, 9, 6, 8], [], [7, 6, 4, 2, 5, 0]]) == True\nassert solution.canVisitAllRooms([[], [], [1, 2]]) == False\nassert solution.canVisitAllRooms([[5, 0, 9, 8, 6, 1, 3], [6, 3, 2, 9, 8], [8, 9], [1, 3, 2, 6, 9, 4], [4], [5, 4, 3, 8, 2], [4, 8, 6, 1, 7, 5, 2, 0, 9], [5, 0, 9, 3, 8, 6], [2, 6, 1, 0, 4], [0, 9, 1, 4, 7, 6, 8, 5]]) == True\nassert solution.canVisitAllRooms([[1], [1, 0, 6, 2], [3, 4, 5], [1, 4], [1, 6, 3], [0], [6, 3]]) == True\nassert solution.canVisitAllRooms([[0, 2, 3], [1, 3, 0], [0, 1], []]) == True\nassert solution.canVisitAllRooms([[4, 2], [5, 0, 4, 7], [3], [6, 1, 3, 0, 5, 7, 2], [], [5, 1], [0, 4, 1, 2, 7, 5, 6], [7, 2]]) == True\nassert solution.canVisitAllRooms([[], [], []]) == False\nassert solution.canVisitAllRooms([[2], [1], []]) == False\nassert solution.canVisitAllRooms([[7], [5, 8, 2], [7, 8, 9, 0], [7, 2], [8, 9], [8, 3, 5, 2, 4, 7, 9, 0, 6], [0, 6, 1, 4, 8, 5, 2], [], [1], [6, 9, 3, 4, 1, 7, 5, 2]]) == False\nassert solution.canVisitAllRooms([[2, 1, 3], [], [1, 2, 3, 4], [2, 1, 3], [0, 3]]) == True\nassert solution.canVisitAllRooms([[2, 3, 1], [6, 1, 9], [9, 2, 1, 7, 0], [6], [5, 2, 0, 7, 3, 6, 9, 8, 4], [3, 4, 2, 7], [1, 8, 3], [], [5, 1, 2, 0], [6, 1, 0, 2, 4, 5, 7]]) == True\nassert solution.canVisitAllRooms([[2, 3, 0], [1, 2, 0], [2, 3, 1], [0, 1, 3]]) == True\nassert solution.canVisitAllRooms([[7, 4, 1, 8, 6, 2], [], [0, 3, 7, 2, 1], [0, 2, 1, 5, 7, 3, 4, 8], [1, 6, 7, 0, 5, 8, 3], [4, 5], [0], [2, 4], [6, 0, 1]]) == True\nassert solution.canVisitAllRooms([[], [0, 1, 7], [0, 5, 1, 7], [0, 4], [], [6, 2, 5, 7, 4, 3], [2, 4, 7, 0, 5], [5, 4, 3, 7, 1]]) == False\nassert solution.canVisitAllRooms([[0, 4, 3], [1], [], [2, 0], [0], [5, 3, 0, 2, 1]]) == False\nassert solution.canVisitAllRooms([[1, 7, 6, 4], [3, 0, 2, 6, 5, 4, 7], [5, 7, 0, 2, 1, 6, 3, 9, 8], [5, 0, 3], [7, 0, 8, 1, 5], [0, 6], [3, 1, 2, 4], [7, 4, 5, 0], [3, 4, 2], [8, 7, 2, 1, 9, 3, 0]]) == True\nassert solution.canVisitAllRooms([[3, 2, 6, 7, 0], [6, 1, 7, 2], [5, 1, 6, 2, 4], [2, 7, 0, 4], [], [2, 3, 7, 0, 1], [7, 6, 5, 1, 2], [6, 0, 7]]) == True\nassert solution.canVisitAllRooms([[8, 4, 5, 2], [7, 1, 6, 8, 5, 2, 3, 0], [2, 5], [], [4, 3, 6, 1], [9, 2, 5, 3, 8, 6, 4], [5, 9, 1, 7, 6], [9, 5, 0, 2, 4], [1, 0, 3, 8, 6, 7, 9, 5, 4], [0, 8, 9, 6, 5, 7, 4, 2, 1]]) == True\nassert solution.canVisitAllRooms([[0, 1], [], [1]]) == False\nassert solution.canVisitAllRooms([[2], [0], []]) == False\nassert solution.canVisitAllRooms([[4], [], [1, 3, 2, 5, 4], [0, 2], [1], [1, 4]]) == False\nassert solution.canVisitAllRooms([[4, 2], [4], [4], [4, 3], [0, 2, 3, 1]]) == True\nassert solution.canVisitAllRooms([[2, 4, 3, 1, 5], [1, 4, 5], [], [3, 5, 1, 0, 2], [1], [0, 3, 1, 5]]) == True\nassert solution.canVisitAllRooms([[4, 5, 6], [3, 1, 2, 4, 0], [0, 5, 6, 2, 1, 4], [2, 6, 1, 4, 5, 0], [], [0, 4, 3, 6, 1], [2, 0, 6, 1, 5, 3]]) == True\nassert solution.canVisitAllRooms([[1], [2, 1, 0, 5], [4], [2, 4], [4, 0, 5, 2], [5, 3, 1, 0]]) == True\nassert solution.canVisitAllRooms([[], []]) == False\nassert solution.canVisitAllRooms([[4, 0, 6, 3, 1, 2, 5, 8], [7, 0, 3, 2, 5, 8, 4, 6], [2], [4, 7], [3, 8, 2, 6], [4, 2], [5, 6, 0, 7, 1], [3, 2, 1, 8], [3, 2, 0, 5]]) == True\nassert solution.canVisitAllRooms([[2, 8, 5, 1], [8], [], [0], [2, 3, 8], [5, 8, 2, 0, 3, 6], [0, 7, 1, 6], [7, 1, 0, 2, 8, 5, 4], [5, 8, 0, 6, 3, 7, 2]]) == True\nassert solution.canVisitAllRooms([[], [2, 1], [1, 0]]) == False\nassert solution.canVisitAllRooms([[], [7, 1, 3, 4], [4, 7], [0], [5, 4, 0, 3, 6], [6, 4, 5, 0, 7], [1, 3, 6], [6, 2, 4, 0]]) == False\nassert solution.canVisitAllRooms([[5, 1, 7, 6, 3, 0], [3, 0, 2], [4, 2, 6, 1, 3], [], [3], [2, 6], [], [2, 5]]) == True\nassert solution.canVisitAllRooms([[], [1], [3], [4], [3, 4, 1, 5, 0], []]) == False\nassert solution.canVisitAllRooms([[0, 1, 4, 2], [4, 0], [0, 4, 2, 3], [4, 2], [2, 1, 4]]) == True\nassert solution.canVisitAllRooms([[7, 2, 1], [0, 9, 3, 5], [3, 2, 4, 9, 1, 6], [5, 0, 1, 8, 3, 4], [1, 0], [3, 6, 7], [8, 0, 7, 4, 9, 1, 6], [0, 3, 2, 7, 4, 9, 8, 1, 5], [1], [7, 9]]) == True\nassert solution.canVisitAllRooms([[0, 4], [0, 5, 3, 1, 2], [1, 5, 0, 4], [], [0, 4, 2, 3, 5], []]) == True\nassert solution.canVisitAllRooms([[7, 1, 3, 4, 6], [7, 3], [6, 7, 5, 0, 1, 4, 8, 3], [5, 8], [2, 0, 7, 5, 6, 3, 4, 8], [1, 4, 8, 5, 2], [], [7, 3], [3]]) == True\nassert solution.canVisitAllRooms([[3, 4, 5, 9], [0, 6, 9, 5, 4], [9, 6, 0, 3, 1, 2], [1, 4, 6, 8, 7, 5, 9, 3], [6, 3, 9, 1, 4, 5, 7, 8, 0], [9, 0, 6], [0, 3, 4, 6, 5, 1, 2, 8], [6, 5, 0, 2, 3, 9, 7], [0, 8, 9, 5, 2, 7, 6, 1, 4], [3, 7, 9, 0, 2, 8]]) == True",
  "inefficient_solution": "class Solution:\n    def canVisitAllRooms(self, rooms):\n        visited = set()\n        paths = []\n        self.dfs(0, visited, paths)\n\n        for i in range(len(rooms)):\n            if i not in visited:\n                return False\n        return True\n\n    def dfs(self, u, visited, paths):\n        visited.add(u)\n        for v in rooms[u]:\n            if v not in visited:\n                self.dfs(v, visited, paths)\n        paths.append(u)",
  "is_python": true
}