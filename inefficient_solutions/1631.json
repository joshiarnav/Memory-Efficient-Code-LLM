{
  "problem_idx": 1631,
  "task_name": "Path With Minimum Effort",
  "markdown_description": "\nYou are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e.,\u00a0**0-indexed**). You can move **up**, **down**, **left**, or **right**, and you wish to find a route that requires the minimum **effort**.\n\n\nA route's **effort** is the **maximum absolute difference**in heights between two consecutive cells of the route.\n\n\nReturn *the minimum **effort** required to travel from the top-left cell to the bottom-right cell.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1631.Path%20With%20Minimum%20Effort/images/ex1.png)\n\n\n\n```\n\n**Input:** heights = [[1,2,2],[3,8,2],[5,3,5]]\n**Output:** 2\n**Explanation:** The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1631.Path%20With%20Minimum%20Effort/images/ex2.png)\n\n\n\n```\n\n**Input:** heights = [[1,2,3],[3,8,4],[5,3,5]]\n**Output:** 1\n**Explanation:** The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1631.Path%20With%20Minimum%20Effort/images/ex3.png)\n\n```\n\n**Input:** heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]\n**Output:** 0\n**Explanation:** This route does not require any effort.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `rows == heights.length`\n* `columns == heights[i].length`\n* `1 <= rows, columns <= 100`\n* `1 <= heights[i][j] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        m, n = len(heights), len(heights[0])\n        dist = [[inf] * n for _ in range(m)]\n        dist[0][0] = 0\n        dirs = (-1, 0, 1, 0, -1)\n        q = [(0, 0, 0)]\n        while q:\n            t, i, j = heappop(q)\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if (\n                    0 <= x < m\n                    and 0 <= y < n\n                    and (d := max(t, abs(heights[i][j] - heights[x][y]))) < dist[x][y]\n                ):\n                    dist[x][y] = d\n                    heappush(q, (d, x, y))\n        return int(dist[-1][-1])\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumEffortPath(self, heights):\n        m, n = len(heights), len(heights[0])\n        dist = [[float('inf')] * n for _ in range(m)]\n        dist[0][0] = 0\n        dirs = (-1, 0, 1, 0, -1)\n        q = [(0, 0, 0)]\n        while q:\n            t, i, j = q.pop(0)\n            for a, b in zip(dirs, dirs[1:]):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    d = max(t, abs(heights[i][j] - heights[x][y]))\n                    if d < dist[x][y]:\n                        dist[x][y] = d\n                        q.append((d, x, y))\n        return dist[-1][-1]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random heights list\n    rows = random.randint(1, 10)\n    cols = random.randint(1, 10)\n    heights = [[random.randint(1, 10**6) for _ in range(cols)] for _ in range(rows)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumEffortPath(heights)\n\n    return heights, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        heights, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumEffortPath(heights) == expected_result\n        print(f\"assert solution.minimumEffortPath({heights}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumEffortPath({heights}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumEffortPath([[681257, 565197, 529290, 477551], [852566, 669172, 333657, 231364], [198188, 781685, 539737, 60378], [19153, 647815, 412790, 38992], [844214, 267826, 794331, 748828], [13776, 456157, 404690, 351997], [49209, 337725, 974433, 181962], [844277, 991212, 940463, 717943], [717815, 318931, 373542, 314306], [953504, 608745, 251693, 405226]]) == 535981\nassert solution.minimumEffortPath([[18794, 436900, 209723, 296044, 755116, 503374], [811517, 536502, 74300, 185719, 82003, 354089], [404772, 495970, 64335, 111178, 929707, 573953], [631805, 803302, 172673, 451816, 139836, 741911]]) == 418106\nassert solution.minimumEffortPath([[49660, 658656, 803983, 34037, 897348], [88759, 102836, 448838, 652602, 958074], [905382, 2716, 663948, 707221, 595413], [714973, 441648, 16838, 187830, 332594], [450586, 191807, 539154, 374465, 977290], [906896, 573059, 676435, 232606, 497492], [195530, 628437, 702618, 151739, 303283]]) == 346002\nassert solution.minimumEffortPath([[86724, 850274, 11223, 108803, 735958, 171699, 294767], [622318, 647585, 292861, 661145, 331308, 433829, 288410], [124934, 928688, 547087, 268207, 57653, 965649, 680074], [690417, 108219, 115747, 89387, 946740, 47960, 50711], [529962, 737081, 931686, 996929, 380106, 851833, 222976], [766860, 99441, 601166, 345649, 146527, 213676, 359351]]) == 565483\nassert solution.minimumEffortPath([[889568, 355203], [920697, 212077], [394277, 887776], [112522, 315076], [526688, 731608]]) == 526420\nassert solution.minimumEffortPath([[314860], [184232], [299729], [396060], [49496], [987422], [239973], [387787], [40976], [620527]]) == 937926\nassert solution.minimumEffortPath([[34144, 834157, 186150, 155844, 76421, 641650, 672352, 174453, 47106, 918250], [833393, 781239, 942389, 53054, 899171, 211674, 962548, 53764, 398600, 172004], [950123, 501065, 102485, 628213, 751484, 311287, 543157, 848259, 668246, 705322], [16001, 19874, 11573, 858586, 521699, 329142, 420061, 885951, 427786, 128303], [238053, 653341, 446508, 525874, 467966, 84548, 771570, 372373, 640541, 657682], [798242, 180554, 523690, 708507, 896334, 464664, 119109, 993363, 291566, 904240], [763340, 145402, 356596, 851713, 397212, 981476, 805792, 564171, 432818, 947488]]) == 799249\nassert solution.minimumEffortPath([[856097, 770219, 602723], [580297, 984886, 902035], [127873, 248664, 7045], [133142, 251334, 497742], [688127, 610526, 667109], [298325, 358735, 250705], [520658, 420640, 955645]]) == 535005\nassert solution.minimumEffortPath([[556252, 357599, 844235, 13013, 754294, 799456]]) == 831222\nassert solution.minimumEffortPath([[620417, 678463, 63113, 756081, 764924, 340393], [413699, 152383, 287830, 885389, 133450, 925662], [723767, 247515, 110293, 677693, 875722, 872887], [47898, 597068, 820787, 554190, 229429, 606532], [904402, 201958, 522814, 502429, 165647, 289026], [82528, 557054, 715429, 987270, 143677, 829957], [969067, 514058, 421173, 500290, 637145, 356578], [368228, 462058, 960064, 888114, 857796, 581218]]) == 349553\nassert solution.minimumEffortPath([[479970, 585925, 441219], [928136, 708023, 44222], [349106, 780177, 68986], [257785, 505056, 887667], [31206, 369162, 560422], [892209, 945047, 670906]]) == 275121\nassert solution.minimumEffortPath([[823893, 410209, 465996, 1553, 981911, 289129, 423274], [655611, 877054, 520276, 285235, 630171, 399648, 831379], [763686, 21204, 613692, 568540, 879012, 324182, 783656], [203143, 222111, 254459, 698518, 272427, 470149, 499612], [539675, 384698, 762661, 715212, 213353, 536923, 329634], [332629, 752728, 511245, 730500, 720820, 639963, 850853], [771571, 401728, 702716, 245329, 958142, 202059, 556992], [710598, 463308, 359466, 417300, 99197, 484599, 965293]]) == 408301\nassert solution.minimumEffortPath([[105650], [279749], [674001], [261565], [555683], [288934]]) == 412436\nassert solution.minimumEffortPath([[450003, 398539, 104397, 271297, 456294, 157483], [82196, 327082, 908281, 186659, 276136, 464029], [516455, 432397, 800479, 869582, 604938, 98087], [690120, 526474, 165552, 143651, 19535, 242922], [644381, 535786, 919744, 481168, 527848, 67423]]) == 360922\nassert solution.minimumEffortPath([[48341, 167757, 560972, 830450, 765903, 634696, 89399, 45476], [911616, 656935, 237122, 206672, 368441, 893470, 195165, 15894], [177745, 12677, 503096, 713868, 851571, 515106, 593166, 10245], [226377, 636155, 703087, 559507, 7981, 792585, 571400, 650589], [194761, 262415, 632592, 723545, 144285, 556896, 583228, 940215]]) == 393215\nassert solution.minimumEffortPath([[44865, 981949, 113765, 707338, 404517, 275263, 284576, 489098], [559741, 154585, 832619, 43967, 106648, 54886, 226904, 126446], [226140, 495352, 201106, 48626, 690437, 957444, 239932, 225366], [325338, 366823, 264142, 416054, 549620, 600356, 477497, 745869], [470840, 519640, 800647, 398682, 470682, 803140, 916347, 555277], [400325, 211076, 937055, 613962, 584690, 676181, 632452, 973767], [567836, 419336, 60667, 902493, 483794, 41430, 467622, 253201], [381320, 568788, 902524, 725926, 526165, 928395, 226132, 811779], [969468, 454363, 591619, 811653, 680415, 584673, 332108, 456387]]) == 514876\nassert solution.minimumEffortPath([[711554, 722134, 783854, 205523, 862291, 682820, 457009, 969617, 732358, 322301], [933173, 812230, 510741, 533686, 82412, 498810, 725543, 358087, 158588, 385941], [498001, 613919, 240042, 617261, 899000, 866233, 949848, 738931, 480249, 669049], [727679, 879116, 759590, 922728, 267905, 665758, 667100, 199131, 501072, 708732], [292040, 478014, 702369, 377861, 765489, 373397, 561391, 62384, 669155, 313747], [510966, 119388, 987510, 66609, 918173, 291270, 59322, 174337, 324914, 523275]]) == 281739\nassert solution.minimumEffortPath([[803249, 126153, 332224, 492752, 827226, 802602, 997519, 875493, 679294], [46851, 956001, 190287, 269656, 673245, 620323, 592677, 195242, 431685], [387315, 965684, 24115, 731751, 327259, 659532, 264687, 967644, 824839], [157539, 635341, 799184, 31095, 60265, 109278, 277941, 790137, 330030], [366481, 853177, 585832, 390804, 194063, 616457, 375223, 209574, 70974], [742388, 688497, 936289, 931134, 421410, 98006, 187663, 790214, 492850]]) == 677096\nassert solution.minimumEffortPath([[274925, 785443, 808480, 83115], [727004, 600780, 179965, 213847], [595423, 40185, 842014, 762779], [545016, 797484, 818799, 34821], [712512, 504169, 529409, 277351], [13275, 793014, 767820, 426984], [139838, 316672, 458847, 541419], [508571, 246744, 584949, 28050]]) == 513369\nassert solution.minimumEffortPath([[529048, 627385, 511126, 957609, 677139, 55994, 98654, 516727]]) == 621145\nassert solution.minimumEffortPath([[400853, 626045, 282323, 199411, 797049, 844055, 643595, 439441, 447108, 639566], [730065, 381580, 338855, 221407, 539124, 827348, 711955, 271226, 280250, 596416], [892765, 870822, 380222, 723910, 723555, 810379, 776755, 521438, 801628, 382267]]) == 317717\nassert solution.minimumEffortPath([[375132, 325823, 466841, 788824, 623557, 914865], [973134, 670506, 236963, 732054, 693020, 56276], [753852, 612080, 93539, 533607, 376099, 806424], [635463, 944717, 389574, 158251, 402739, 338606], [563902, 973940, 231711, 462249, 239159, 467238], [135189, 293910, 885088, 33510, 948957, 446828], [992344, 682550, 233838, 592030, 908567, 419097]]) == 296035\nassert solution.minimumEffortPath([[731987, 312264, 769925, 831535, 881635, 262205, 940657, 372968, 683874, 606427], [341111, 35475, 736224, 22943, 923728, 207757, 193169, 387592, 490388, 693990], [699758, 492290, 234084, 852644, 327907, 178956, 884625, 678594, 647003, 248591], [469944, 136025, 189352, 556421, 443600, 265646, 88051, 95993, 671219, 863088], [455456, 350377, 949878, 118994, 117403, 719519, 442219, 983090, 130822, 496526], [830025, 559881, 479486, 217594, 582155, 544291, 626405, 881310, 684088, 787274]]) == 390876\nassert solution.minimumEffortPath([[324510, 258720, 349472, 295852, 990527, 523820, 877071, 215549, 825729], [569468, 910005, 539583, 601500, 575175, 874417, 929180, 936666, 324666], [248729, 633216, 332405, 628348, 745647, 828837, 33811, 984728, 479399], [324122, 910853, 72940, 193245, 490986, 306061, 831328, 566121, 878532], [151801, 900390, 785952, 955290, 902038, 750441, 700998, 101427, 179190], [517588, 18994, 879652, 176350, 475797, 863432, 793386, 713022, 941796]]) == 300811\nassert solution.minimumEffortPath([[955801, 921001, 632134, 508335, 877234, 604161, 763463, 518826, 575357]]) == 368899\nassert solution.minimumEffortPath([[949285, 157839, 710788, 101988, 456103], [623137, 676630, 883170, 938390, 296310], [821036, 818619, 398730, 793623, 55051], [299690, 528700, 399661, 493008, 233216], [401262, 885310, 847306, 220211, 288334], [115649, 588683, 264875, 592132, 231910], [232040, 301221, 556790, 642218, 319743], [998447, 869823, 303247, 500403, 135050], [772529, 926275, 580405, 943431, 576179]]) == 367252\nassert solution.minimumEffortPath([[274125, 569651, 616979, 418156, 767754, 829168], [641804, 713068, 390071, 167026, 18693, 182225], [988010, 603068, 935357, 2057, 467688, 55317], [915212, 56076, 173789, 646791, 200049, 495624], [339187, 614347, 370945, 770362, 153484, 159187], [940825, 649170, 772230, 80574, 722339, 72757], [169250, 918301, 298330, 378393, 595131, 648578]]) == 473900\nassert solution.minimumEffortPath([[540302]]) == 0\nassert solution.minimumEffortPath([[680490, 417210, 811293, 689580, 272423, 344648, 984787, 597760], [962520, 960844, 245204, 666505, 138246, 278031, 634454, 544390], [849157, 83330, 986284, 999954, 365334, 367645, 363328, 647478], [627337, 702521, 731617, 936090, 727544, 471291, 156251, 145721], [228239, 894260, 803931, 550166, 604015, 438918, 219529, 826002], [689670, 464494, 945921, 873262, 664873, 321809, 311935, 869545], [121532, 894591, 253497, 944749, 165593, 899971, 674713, 399932], [747230, 182078, 709664, 563802, 89818, 801422, 467137, 623519]]) == 362778\nassert solution.minimumEffortPath([[454796, 588428, 140855, 294000, 902610, 170000, 552984, 739202], [845616, 568512, 643517, 382800, 842450, 137954, 340242, 293972], [160506, 712147, 520618, 286383, 116789, 341230, 220501, 92578], [149981, 440898, 356057, 815184, 417095, 312777, 192296, 698519], [815720, 477792, 490902, 58871, 837025, 128548, 802863, 572498]]) == 506223\nassert solution.minimumEffortPath([[328283, 702504, 177431, 874156, 664853, 811481, 329544, 577314, 949078, 234186], [141306, 105510, 521502, 370880, 334845, 912043, 292591, 568055, 776295, 226341], [116379, 924291, 321959, 348258, 905331, 263002, 565656, 294934, 914997, 658959], [229969, 267245, 660471, 264743, 305937, 436127, 717867, 719193, 307662, 156425], [85947, 798276, 608045, 541863, 322475, 583009, 477537, 364086, 389760, 994925], [536136, 415700, 894163, 518121, 640664, 219237, 2992, 347413, 991630, 266206], [983078, 294951, 986569, 196573, 774249, 307072, 925154, 445141, 792136, 293372], [789277, 988675, 6079, 652638, 675785, 947649, 916821, 442590, 5069, 337937], [835153, 419737, 327728, 661967, 652247, 115032, 342382, 130289, 125186, 354211]]) == 393226\nassert solution.minimumEffortPath([[168678, 789596, 322796], [730836, 55161, 669336], [527505, 832749, 964948], [160444, 18964, 831774], [393105, 667874, 756454]]) == 562158\nassert solution.minimumEffortPath([[515906, 853071, 558815, 365617], [263144, 761815, 319601, 482558]]) == 337165\nassert solution.minimumEffortPath([[709401, 857102, 530963], [993388, 656607, 953934], [534700, 808031, 15337], [950498, 580016, 618225], [772669, 775927, 789263]]) == 228015\nassert solution.minimumEffortPath([[537185, 549811, 374276, 48705, 82324, 859010, 607801, 356415], [748525, 719731, 142239, 333405, 644486, 174144, 371234, 601332]]) == 470342\nassert solution.minimumEffortPath([[210787, 251140, 900472, 634071, 240630, 237774, 844049], [115512, 425422, 338318, 340943, 947856, 129187, 19801], [247615, 66571, 749827, 56046, 356745, 710550, 74129]]) == 393441\nassert solution.minimumEffortPath([[9913, 443211, 128559, 714690, 703583, 530584, 684939, 470559, 221247, 512353], [819853, 827007, 513320, 776247, 94245, 677773, 988431, 218150, 508649, 362289], [270095, 586044, 98475, 902674, 933861, 425695, 549918, 225192, 755917, 852623], [172101, 529547, 506977, 761794, 580457, 345835, 244381, 711950, 80048, 375025], [520623, 215311, 316202, 572073, 493039, 747071, 55720, 338326, 531758, 138739], [74496, 77841, 558494, 740345, 432434, 248908, 167444, 707539, 972987, 994910]]) == 433298\nassert solution.minimumEffortPath([[688189, 44513], [69990, 779976], [734992, 28686], [483267, 204903], [20931, 118890], [119583, 335020]]) == 665002\nassert solution.minimumEffortPath([[806081, 320073, 711824, 661178, 465254, 132534, 211472, 548732]]) == 486008\nassert solution.minimumEffortPath([[414559, 802394, 458269, 341067, 560188, 282059, 436607, 360233, 8673], [96442, 289081, 245646, 921881, 507836, 993151, 126038, 782270, 218810], [412997, 265745, 19884, 279185, 778482, 397005, 623472, 245311, 173429], [389923, 743153, 882947, 924462, 707788, 95291, 49703, 928794, 852528], [67786, 456526, 766646, 14462, 424944, 141995, 728181, 896017, 142306]]) == 710222\nassert solution.minimumEffortPath([[294419, 733883, 191963, 881931, 778357], [195717, 774027, 417063, 818898, 535470], [949498, 9926, 884829, 98547, 496966], [879037, 783802, 565037, 338709, 29372]]) == 439464\nassert solution.minimumEffortPath([[836131], [357142]]) == 478989\nassert solution.minimumEffortPath([[917381, 515905, 65033, 426287, 758999, 73537, 230478, 763540], [166777, 635894, 323352, 502181, 421204, 200204, 807037, 136763]]) == 626777\nassert solution.minimumEffortPath([[823915, 143599, 458211, 703480, 424684, 983545, 730814, 648310, 317725, 622880], [438022, 577999, 664309, 760462, 405003, 883716, 555579, 165573, 17768, 820846], [85287, 65417, 648297, 113734, 2539, 271571, 360877, 1085, 234796, 153618], [371058, 88459, 590327, 846007, 29517, 506697, 737588, 596389, 692803, 292769], [345758, 566685, 12017, 469081, 958994, 835988, 58387, 336956, 87070, 773126], [397372, 359705, 16677, 624759, 634305, 231336, 519943, 321326, 321290, 455749], [608234, 208399, 676393, 113755, 322088, 827155, 750042, 618966, 404639, 398305], [462078, 926163, 45517, 825, 966613, 25329, 774037, 2576, 261744, 589345], [72313, 867620, 568566, 474801, 362851, 440978, 770941, 465747, 841251, 347001], [627631, 140844, 998978, 757202, 722721, 505565, 656209, 776530, 519228, 960609]]) == 441381\nassert solution.minimumEffortPath([[707454], [990375], [527522], [425566], [9658], [401695], [265711], [371767]]) == 462853\nassert solution.minimumEffortPath([[978519], [657710], [617096], [399601]]) == 320809\nassert solution.minimumEffortPath([[653587, 845555, 463707, 565762, 640848, 661140, 998780], [788661, 165385, 466952, 87457, 442819, 10722, 221934], [890876, 650999, 317436, 150085, 597710, 924337, 291994], [132351, 236262, 267092, 317231, 54106, 883044, 48016]]) == 432097\nassert solution.minimumEffortPath([[393264, 240732, 131810, 688412], [272922, 211679, 984133, 161866], [824106, 731854, 430046, 525540], [46684, 938402, 419680, 334926], [627718, 624578, 998040, 172135]]) == 520175\nassert solution.minimumEffortPath([[804495], [628816], [31140], [147990], [218966], [954997], [86242], [852499], [914247]]) == 868755\nassert solution.minimumEffortPath([[608563, 720700, 695136, 884963], [754613, 598075, 309893, 256996]]) == 288182\nassert solution.minimumEffortPath([[581491, 985077, 579395, 978980, 781051], [645796, 339653, 867773, 394772, 931374], [624279, 562535, 230193, 434427, 404791], [856763, 460305, 843495, 793838, 729874], [155749, 560828, 405462, 626689, 503664], [934176, 421399, 962133, 207289, 988221], [403509, 201380, 172895, 468315, 41335], [431010, 479150, 850667, 25736, 525086]]) == 483751\nassert solution.minimumEffortPath([[302765, 868684, 640787, 670591, 53971, 916262, 644200, 237890, 61483], [464942, 250273, 321816, 858475, 820089, 360812, 993417, 436431, 723873], [608879, 770545, 22293, 913363, 709077, 131935, 295986, 956605, 947751], [564784, 781240, 125606, 813250, 901290, 5217, 90889, 331173, 103871]]) == 459277\nassert solution.minimumEffortPath([[115393, 585447], [130502, 550964], [621168, 541346], [342353, 831496], [983938, 313973], [281628, 971886], [381310, 364695], [32702, 895022], [448038, 121703]]) == 657913\nassert solution.minimumEffortPath([[419724, 158251, 322255, 824024, 438420, 742104, 833407, 559121, 195594, 111077], [273323, 136742, 821713, 764226, 520614, 228085, 586405, 749888, 994850, 509018], [264690, 874688, 475227, 700872, 373442, 384859, 920503, 940415, 360606, 160658], [194961, 482234, 987734, 562705, 101169, 141344, 231006, 942853, 694366, 832698], [55151, 178368, 467337, 254752, 238811, 976316, 72516, 809585, 741862, 422284], [289536, 852649, 822886, 12326, 95262, 202339, 823770, 139251, 792728, 838533], [187555, 886068, 584014, 16601, 614557, 624448, 76871, 401874, 471592, 639801], [83156, 350505, 303335, 85697, 417889, 743159, 142269, 850224, 754269, 355990]]) == 303684\nassert solution.minimumEffortPath([[29403, 907824, 736036, 519321, 656708, 474078, 223588, 976139, 589381], [228699, 697742, 65182, 841381, 529981, 124340, 159824, 794525, 495862], [700148, 270073, 48847, 602255, 195611, 860502, 260757, 67776, 42140], [367095, 429636, 677912, 214353, 600206, 440464, 363995, 458618, 531509], [280189, 440206, 256433, 599438, 593433, 446610, 380374, 101683, 265564], [905119, 780177, 759646, 398628, 860487, 105785, 906197, 599513, 636288]]) == 469043\nassert solution.minimumEffortPath([[306208, 47956, 602744, 604698, 552857, 301296, 779656, 724975, 846420], [944964, 208477, 559040, 869127, 498901, 252306, 383766, 686809, 4562], [297942, 19740, 138562, 371472, 34197, 250788, 443396, 34570, 748131], [358966, 818877, 229725, 462528, 450015, 758593, 664086, 606171, 21958], [420005, 142321, 640904, 518433, 333593, 525580, 991349, 589541, 877391]]) == 287850\nassert solution.minimumEffortPath([[352179], [328721], [809446], [343699]]) == 480725\nassert solution.minimumEffortPath([[499006, 584444, 233284, 323582], [432595, 317032, 973952, 673259], [552853, 473616, 887138, 679001], [76539, 411475, 612512, 263751], [616348, 346476, 179742, 115599], [345855, 792671, 688371, 672412], [191080, 545174, 893123, 863754], [991331, 815319, 214297, 582976]]) == 354094\nassert solution.minimumEffortPath([[885506, 769545, 642828, 19768, 202653, 112754, 680141, 38432, 885914], [998771, 149169, 242046, 682202, 948539, 51338, 214644, 253836, 718587], [395821, 352772, 81235, 603933, 756631, 522656, 914163, 774731, 898613], [592857, 456415, 66541, 59541, 799931, 909840, 347882, 395591, 803956], [86577, 232316, 310993, 17745, 798419, 862020, 999610, 252171, 577197], [534588, 768430, 508737, 40229, 117387, 733191, 672801, 171438, 225034], [974148, 381863, 279100, 27799, 180075, 418537, 532078, 182295, 671203]]) == 446169\nassert solution.minimumEffortPath([[425184, 489087, 992852, 525209, 2862, 300598, 190467, 474078, 317300, 927564], [332788, 203380, 538506, 989430, 722249, 370844, 16466, 230729, 782902, 126168], [552949, 284842, 922461, 259643, 24960, 261550, 722638, 592897, 534140, 653642]]) == 450924\nassert solution.minimumEffortPath([[522888], [990262], [274707], [829365], [766196], [892722]]) == 715555\nassert solution.minimumEffortPath([[119163, 788913, 599010], [944767, 296642, 340881]]) == 669750\nassert solution.minimumEffortPath([[276303, 276855, 515439, 750347, 822546], [178289, 212481, 619562, 223316, 701024], [227974, 914623, 475169, 336803, 737435], [503854, 743219, 544558, 142007, 731689], [342981, 437592, 651766, 832523, 495078], [623030, 565610, 371076, 61060, 818409], [348756, 229375, 413955, 586603, 387921], [806182, 411437, 280995, 532821, 561840], [121270, 373694, 672192, 660969, 197879]]) == 363961\nassert solution.minimumEffortPath([[588380, 222414, 417434, 639887, 290502, 626163], [311074, 24236, 531566, 74591, 704678, 253979], [494381, 80832, 592937, 117893, 432873, 374540], [949115, 770163, 871399, 552557, 446468, 149570], [959961, 868533, 12228, 978155, 825156, 849379], [347726, 372696, 567314, 723972, 806350, 638230], [297576, 192267, 543431, 628250, 790561, 8948], [370372, 834731, 350891, 879020, 735279, 667135], [990691, 739757, 344908, 322088, 40339, 761438]]) == 378688\nassert solution.minimumEffortPath([[365831, 461734], [123151, 918818], [187983, 231311], [100018, 414200], [790766, 806278], [668168, 710440], [205643, 411543], [376740, 298857]]) == 392078\nassert solution.minimumEffortPath([[752792, 691630, 506977, 49278, 123899, 410553, 563315, 712461], [920532, 231377, 458360, 975210, 89395, 159812, 616253, 732916], [810337, 415535, 234772, 271524, 361911, 500037, 474803, 116645], [728748, 104511, 463646, 38668, 734139, 587886, 116235, 201604], [625254, 934466, 839903, 980296, 648686, 626268, 459134, 655546]]) == 223588\nassert solution.minimumEffortPath([[219921, 887331], [726848, 199135], [298421, 55534], [642243, 123484]]) == 506927\nassert solution.minimumEffortPath([[6621, 931198, 678452], [767845, 31301, 471367], [855095, 907850, 760055], [579928, 635598, 623983]]) == 761224\nassert solution.minimumEffortPath([[925053, 989655, 946204, 197149, 623562], [711606, 34927, 797198, 364993, 107503], [958791, 392344, 457067, 936549, 441426], [144018, 612482, 240089, 337620, 635596], [241434, 926413, 649065, 594703, 61550], [869556, 621068, 945309, 491773, 260951], [583931, 186859, 415073, 808280, 264816], [16575, 506197, 758262, 608599, 464634], [374199, 376669, 207523, 630395, 114014]]) == 350620\nassert solution.minimumEffortPath([[130136, 210951, 422140, 125194, 954225, 443178, 349248], [549054, 964534, 863097, 774051, 900897, 422299, 375165], [12576, 921825, 688699, 366006, 696597, 753171, 960168], [87670, 666598, 587071, 915456, 785452, 890213, 432585], [754522, 703875, 245509, 567672, 520745, 582868, 272686], [16648, 255793, 469743, 651209, 349385, 139060, 346379], [615120, 452144, 165776, 828613, 421456, 50451, 468641], [523264, 634717, 400119, 571172, 205130, 840644, 684461], [325337, 687916, 233994, 742804, 451048, 226339, 37806]]) == 418918\nassert solution.minimumEffortPath([[53726, 915368, 285212, 902159, 116847, 729124], [963683, 69192, 579787, 442475, 832224, 759158], [314431, 371470, 870213, 584227, 858576, 212194], [207238, 218674, 421502, 262648, 228192, 243449], [186256, 441247, 789125, 869442, 818620, 935350], [377216, 733062, 949931, 759017, 628424, 88569], [318662, 173457, 568887, 792504, 236831, 987362]]) == 861642\nassert solution.minimumEffortPath([[713357, 129629], [963185, 402221], [751639, 679882], [95877, 254134], [262237, 628023], [200314, 926298], [995785, 273586], [873373, 365714]]) == 652712\nassert solution.minimumEffortPath([[202548, 716026, 377835, 497770, 679242, 517803, 731783], [354617, 614876, 623647, 773773, 99478, 967994, 455839], [70575, 639727, 521049, 159379, 988995, 144925, 832872], [846743, 166175, 436221, 537229, 245534, 674268, 688767], [295015, 26079, 198067, 820192, 505889, 279074, 58330], [227042, 148956, 920852, 676053, 122820, 610973, 462049], [423348, 528733, 171672, 686619, 162924, 295162, 917563], [249803, 704587, 637732, 910185, 786571, 890960, 962181], [1130, 827599, 745807, 15850, 449018, 478774, 654047], [546135, 520, 574783, 432862, 956450, 911456, 971987]]) == 317940\nassert solution.minimumEffortPath([[757661, 971379, 881878, 692374, 352652, 299681], [58544, 896543, 598616, 524298, 155631, 433446], [322509, 373751, 383899, 738487, 71353, 501578], [167089, 29521, 860864, 210704, 941386, 211451], [667330, 114870, 906419, 569126, 80592, 747038], [163368, 661846, 864484, 337835, 229907, 14770]]) == 476965\nassert solution.minimumEffortPath([[978717, 152495, 824670, 368136, 594091, 4423, 871888, 807918, 694285], [885581, 621269, 805913, 278480, 597351, 914830, 864529, 460656, 106490], [172848, 868532, 391552, 667596, 73000, 14391, 86505, 551848, 237181], [958959, 693141, 99052, 927762, 205887, 753027, 669083, 31333, 815739]]) == 578558\nassert solution.minimumEffortPath([[917459], [558873], [668777], [268690]]) == 400087\nassert solution.minimumEffortPath([[99428, 492395, 298137, 336432, 488045, 25269, 982597], [59411, 979946, 677181, 770312, 832974, 189701, 718103]]) == 528402\nassert solution.minimumEffortPath([[862691, 508314, 756817], [561528, 768392, 515821], [22634, 954123, 169932], [117531, 243130, 533971], [806124, 704190, 680177], [404717, 823044, 973628], [275640, 29904, 104156]]) == 401407\nassert solution.minimumEffortPath([[107785, 335883, 286130, 925912, 165242], [261843, 118128, 685429, 637207, 594946], [249243, 712502, 777896, 879988, 144046], [945754, 771219, 615524, 684494, 245221]]) == 439273\nassert solution.minimumEffortPath([[940517, 954858, 542229]]) == 412629\nassert solution.minimumEffortPath([[924474, 924991, 543508, 991339], [657135, 876803, 308651, 77909], [189475, 835402, 914779, 133092], [169994, 69230, 704875, 101378]]) == 381483\nassert solution.minimumEffortPath([[913499, 242769, 264141, 803046, 695189], [281014, 875916, 218527, 999459, 10275], [615122, 873374, 915325, 781647, 561147], [895157, 145047, 453322, 545325, 344195], [543003, 848117, 936173, 829986, 81380], [94659, 522906, 815675, 435262, 588259], [400950, 673260, 17686, 974665, 52047], [937117, 277930, 702359, 901683, 125809], [979765, 611247, 585395, 487814, 670686]]) == 632485\nassert solution.minimumEffortPath([[728249, 755116, 703604], [637656, 780686, 715461], [855445, 202376, 580884], [917592, 94418, 706328], [421064, 749584, 54573], [403588, 305655, 557290], [93253, 374373, 247669], [409573, 494843, 806349], [563542, 391387, 993874], [887414, 532272, 220279]]) == 496528\nassert solution.minimumEffortPath([[381891, 415920, 223950, 649955, 31169, 732353]]) == 701184\nassert solution.minimumEffortPath([[792520, 864988, 314796, 828528, 223876, 52952], [516669, 301668, 224617, 424823, 724528, 735947], [732511, 561856, 58285, 264383, 618853, 442232], [238640, 83627, 562959, 821624, 414463, 20917], [112935, 356643, 777134, 467622, 72736, 694874], [256613, 571764, 278567, 631179, 499528, 974634]]) == 475106\nassert solution.minimumEffortPath([[107025, 507612, 524809, 242233, 800768], [836628, 171, 153211, 496746, 784341]]) == 400587\nassert solution.minimumEffortPath([[119357, 480550, 696694, 296534, 71040], [67330, 908207, 625638, 682287, 834706], [266885, 761434, 940283, 656802, 64679], [126170, 176190, 544784, 912382, 505925], [378133, 23797, 216280, 733837, 302680], [731912, 269956, 910084, 379741, 723095], [665647, 670233, 501848, 474117, 804111], [457247, 869969, 983151, 752381, 754658], [960586, 603879, 559599, 425051, 71720]]) == 353779\nassert solution.minimumEffortPath([[50646, 775130, 859157, 743743, 675736, 801473, 869856, 846724, 757406], [100928, 180504, 668606, 722115, 721322, 550844, 483779, 134467, 594321], [870538, 361601, 515757, 2746, 364448, 988426, 206, 275554, 529443], [959633, 829396, 939136, 485340, 798985, 705116, 462622, 913436, 386351], [95705, 752999, 706700, 804981, 965380, 71240, 497030, 651622, 882490], [403217, 130138, 16053, 487823, 894738, 690213, 19769, 295384, 681731], [576690, 985724, 84176, 554657, 383664, 814527, 136680, 374379, 754040], [475162, 202807, 574283, 469207, 136710, 761023, 43369, 219173, 698204], [505861, 770044, 272921, 78803, 756193, 42770, 966268, 436053, 479872], [958211, 681489, 609574, 597013, 719946, 767564, 557814, 591979, 232378]]) == 423379\nassert solution.minimumEffortPath([[974558, 63909], [853064, 987025]]) == 133961\nassert solution.minimumEffortPath([[781799, 799894, 866113, 369156, 686019, 275185, 239085, 550247], [935371, 396778, 987120, 367124, 220208, 365641, 337917, 461516], [661990, 453707, 964516, 864755, 877633, 257077, 414270, 706895]]) == 496957\nassert solution.minimumEffortPath([[522793, 323399, 312261, 81126, 841391, 59673, 711216], [292213, 278112, 40847, 463377, 447654, 272546, 306377], [378826, 575584, 361521, 767248, 568761, 8458, 27044]]) == 382251\nassert solution.minimumEffortPath([[620530, 105728, 360321], [155382, 386013, 722268], [555140, 976222, 372713], [141050, 19536, 826455], [559781, 703706, 676368], [179281, 739795, 169210], [55017, 989756, 987306], [973185, 363140, 238447]]) == 626616\nassert solution.minimumEffortPath([[759744, 535581, 962908, 951547], [574425, 756215, 185940, 698066], [517879, 419100, 629246, 176117], [289135, 524661, 48732, 39416], [10262, 954569, 523925, 651354], [89584, 142624, 814204, 279402], [941618, 177097, 539793, 583155], [221049, 445374, 387528, 913163], [966237, 839681, 565043, 315688]]) == 278873\nassert solution.minimumEffortPath([[647278, 781870, 688075, 140465], [350920, 919561, 67149, 712074], [282439, 823080, 390182, 896227], [225454, 844151, 541707, 832713], [457264, 817448, 659838, 106467], [388936, 199678, 675593, 939998], [408918, 670046, 644220, 656122], [846945, 504277, 93341, 149556], [77084, 770125, 727062, 304193]]) == 410936\nassert solution.minimumEffortPath([[451810], [358037], [414103]]) == 93773\nassert solution.minimumEffortPath([[877582, 191927, 422374, 379115, 702290], [522562, 120308, 726832, 347835, 308377], [76373, 257519, 452390, 888762, 725484], [931715, 935447, 655375, 440398, 58735]]) == 402254\nassert solution.minimumEffortPath([[312305, 312814, 770639, 523101, 443321], [466807, 239652, 959116, 468540, 376595], [473418, 731288, 600271, 582968, 249331], [556545, 708893, 181267, 905484, 904137], [544217, 198901, 495657, 999758, 56203], [358186, 309902, 6001, 888424, 560354], [818371, 82444, 676879, 712880, 601836], [954923, 239046, 608286, 992070, 274628]]) == 327208\nassert solution.minimumEffortPath([[190617, 781328, 212151, 213357], [45562, 345025, 826185, 884729], [684404, 417238, 88775, 279819], [820548, 480364, 730103, 797023], [484797, 274808, 480937, 65785], [930447, 317459, 910903, 460302], [391967, 417547, 452941, 558261]]) == 299463\nassert solution.minimumEffortPath([[96512, 211383, 600077, 965957, 315310, 199698], [756084, 666323, 225063, 894015, 423776, 441532], [332082, 148171, 259190, 978395, 31042, 990389], [804334, 113049, 447640, 284012, 646262, 319842], [602564, 827156, 647558, 957360, 747838, 484758]]) == 388694\nassert solution.minimumEffortPath([[79181, 274575, 323725, 282336, 443476, 475636, 219055], [287637, 673569, 308973, 959762, 144463, 762995, 482518], [586388, 174374, 469644, 457694, 994017, 662892, 13966], [596721, 581609, 429366, 337019, 522962, 482079, 583696]]) == 195394",
  "inefficient_solution": "class Solution:\n    def minimumEffortPath(self, heights):\n        m, n = len(heights), len(heights[0])\n        dist = [[[inf for _ in range(n)] for _ in range(m)] for _ in range(m * n)]\n        for i in range(m):\n            for j in range(n):\n                dist[i][j] = [inf] * n\n                dist[i][j][i] = [inf] * m\n        dist[0][0][0][0] = 0\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        queue = [(0, 0, 0, 0)]\n        visited = [[[False for _ in range(n)] for _ in range(m)] for _ in range(m * n)]\n        while queue:\n            effort, i, j, k = heappop(queue)\n            if visited[i][j][k]:\n                continue\n            visited[i][j][k] = True\n            for dx, dy in directions:\n                x, y = i + dx, j + dy\n                if 0 <= x < m and 0 <= y < n:\n                    max_effort = max(effort, abs(heights[i][j] - heights[x][y]))\n                    for z in range(m * n):\n                        if max_effort < dist[x][y][z][k] and not visited[x][y][z]:\n                            dist[x][y][z][k] = max_effort\n                            heappush(queue, (max_effort, x, y, z))\n        return min(min(dist[m - 1][n - 1][i][j] for i in range(m * n)) for j in range(m * n))",
  "is_python": true
}