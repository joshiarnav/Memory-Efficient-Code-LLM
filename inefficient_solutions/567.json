{
  "problem_idx": 567,
  "task_name": "Permutation in String",
  "markdown_description": "\nGiven two strings `s1` and `s2`, return `true` *if* `s2` *contains a permutation of* `s1`*, or* `false` *otherwise*.\n\n\nIn other words, return `true` if one of `s1`'s permutations is the substring of `s2`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s1 = \"ab\", s2 = \"eidbaooo\"\n**Output:** true\n**Explanation:** s2 contains one permutation of s1 (\"ba\").\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"ab\", s2 = \"eidboaoo\"\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s1.length, s2.length <= 104`\n* `s1` and `s2` consist of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:\n        n, m = len(s1), len(s2)\n        if n > m:\n            return False\n        cnt = Counter()\n        for a, b in zip(s1, s2):\n            cnt[a] -= 1\n            cnt[b] += 1\n        diff = sum(x != 0 for x in cnt.values())\n        if diff == 0:\n            return True\n        for i in range(n, m):\n            a, b = s2[i - n], s2[i]\n\n            if cnt[b] == 0:\n                diff += 1\n            cnt[b] += 1\n            if cnt[b] == 0:\n                diff -= 1\n\n            if cnt[a] == 0:\n                diff += 1\n            cnt[a] -= 1\n            if cnt[a] == 0:\n                diff -= 1\n\n            if diff == 0:\n                return True\n        return False\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:\n        n, m = len(s1), len(s2)\n        if n > m:\n            return False\n        cnt = Counter()\n        for a, b in zip(s1, s2):\n            cnt[a] -= 1\n            cnt[b] += 1\n        diff = sum(x != 0 for x in cnt.values())\n        if diff == 0:\n            return True\n        for i in range(n, m):\n            a, b = s2[i - n], s2[i]\n\n            if cnt[b] == 0:\n                diff += 1\n            cnt[b] += 1\n            if cnt[b] == 0:\n                diff -= 1\n\n            if cnt[a] == 0:\n                diff += 1\n            cnt[a] -= 1\n            if cnt[a] == 0:\n                diff -= 1\n\n            if diff == 0:\n                return True\n        return False\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    s1 = \"\".join(random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 5)))\n    s2 = \"\".join(random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.checkInclusion(s1, s2)\n\n    return s1, s2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s1, s2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.checkInclusion(s1, s2) == expected_result\n        print(f\"assert solution.checkInclusion('{s1}', '{s2}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.checkInclusion('{s1}', '{s2}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.checkInclusion('mnd', 'rbhmo') == False\nassert solution.checkInclusion('xqeh', 'lgnaoko') == False\nassert solution.checkInclusion('zg', 'wtddauif') == False\nassert solution.checkInclusion('regng', 'mtmqco') == False\nassert solution.checkInclusion('p', 'uocgmszit') == False\nassert solution.checkInclusion('wc', 'hdj') == False\nassert solution.checkInclusion('oepw', 'wrdamaqj') == False\nassert solution.checkInclusion('txwes', 'x') == False\nassert solution.checkInclusion('rzrbx', 'nec') == False\nassert solution.checkInclusion('c', 'wyamhobw') == False\nassert solution.checkInclusion('u', 'syouyi') == True\nassert solution.checkInclusion('rd', 'anwuwiae') == False\nassert solution.checkInclusion('gtuq', 'djzjcghc') == False\nassert solution.checkInclusion('ww', 'pleik') == False\nassert solution.checkInclusion('xhbn', 'iiihjxq') == False\nassert solution.checkInclusion('nesed', 'uwzzzdkr') == False\nassert solution.checkInclusion('gigxf', 'kxmhizj') == False\nassert solution.checkInclusion('n', 'eyw') == False\nassert solution.checkInclusion('bjgk', 'hcsn') == False\nassert solution.checkInclusion('cyg', 'ngezu') == False\nassert solution.checkInclusion('hr', 'wuybjkn') == False\nassert solution.checkInclusion('sm', 'scujywbfr') == False\nassert solution.checkInclusion('ymsxf', 'f') == False\nassert solution.checkInclusion('ihgwz', 'ismclyvkyk') == False\nassert solution.checkInclusion('au', 'kcrxrfmv') == False\nassert solution.checkInclusion('x', 'w') == False\nassert solution.checkInclusion('omr', 'snib') == False\nassert solution.checkInclusion('crlyl', 'ndopdsxm') == False\nassert solution.checkInclusion('ivec', 'fn') == False\nassert solution.checkInclusion('g', 'xliwvf') == False\nassert solution.checkInclusion('lxbo', 'vncunbvf') == False\nassert solution.checkInclusion('bunqo', 'a') == False\nassert solution.checkInclusion('sucl', 'coykgngw') == False\nassert solution.checkInclusion('pstj', 'hnxs') == False\nassert solution.checkInclusion('wuavm', 'i') == False\nassert solution.checkInclusion('dx', 'sfxampjj') == False\nassert solution.checkInclusion('lp', 'fsdvwujr') == False\nassert solution.checkInclusion('if', 'll') == False\nassert solution.checkInclusion('oceon', 'whfhqqoras') == False\nassert solution.checkInclusion('p', 'ejjyaxlex') == False\nassert solution.checkInclusion('zkgv', 'sw') == False\nassert solution.checkInclusion('ede', 'fkytvza') == False\nassert solution.checkInclusion('mhhzj', 'r') == False\nassert solution.checkInclusion('bzqh', 'hkrw') == False\nassert solution.checkInclusion('vusk', 'amozimh') == False\nassert solution.checkInclusion('ast', 're') == False\nassert solution.checkInclusion('jvo', 'vidfaqailg') == False\nassert solution.checkInclusion('ze', 'vqaeafoksd') == False\nassert solution.checkInclusion('shnq', 'lloggj') == False\nassert solution.checkInclusion('zzrmo', 'hkc') == False\nassert solution.checkInclusion('lmxv', 'awngbvkrji') == False\nassert solution.checkInclusion('hy', 'ot') == False\nassert solution.checkInclusion('lsse', 'y') == False\nassert solution.checkInclusion('o', 'd') == False\nassert solution.checkInclusion('gmso', 'yhjwoepq') == False\nassert solution.checkInclusion('mbhsg', 'nzfdjh') == False\nassert solution.checkInclusion('mfxer', 'qwxixnrdn') == False\nassert solution.checkInclusion('dfofn', 'pgxnfcl') == False\nassert solution.checkInclusion('b', 'eowprvr') == False\nassert solution.checkInclusion('i', 'awopesgs') == False\nassert solution.checkInclusion('tda', 'jpzp') == False\nassert solution.checkInclusion('yrffi', 'sxlb') == False\nassert solution.checkInclusion('cx', 'efvjh') == False\nassert solution.checkInclusion('gswv', 'qhoyajvt') == False\nassert solution.checkInclusion('cj', 'o') == False\nassert solution.checkInclusion('fvvv', 'nc') == False\nassert solution.checkInclusion('xmjuy', 'tm') == False\nassert solution.checkInclusion('hjgy', 'xu') == False\nassert solution.checkInclusion('ecmuv', 'j') == False\nassert solution.checkInclusion('zr', 'tsbqptpp') == False\nassert solution.checkInclusion('m', 'rxl') == False\nassert solution.checkInclusion('rx', 'bao') == False\nassert solution.checkInclusion('hf', 'sxrysxosdj') == False\nassert solution.checkInclusion('b', 'c') == False\nassert solution.checkInclusion('jbz', 'vtbnkq') == False\nassert solution.checkInclusion('ra', 'b') == False\nassert solution.checkInclusion('gviv', 'rrc') == False\nassert solution.checkInclusion('izdoa', 'gxjqlhwcc') == False\nassert solution.checkInclusion('slps', 'na') == False\nassert solution.checkInclusion('mfeu', 'cbnj') == False\nassert solution.checkInclusion('frxt', 'ceiyktoc') == False\nassert solution.checkInclusion('t', 'zwfznvw') == False\nassert solution.checkInclusion('aafk', 'e') == False\nassert solution.checkInclusion('wmw', 'gzns') == False\nassert solution.checkInclusion('ugk', 'yuczg') == False\nassert solution.checkInclusion('vprk', 'wefqpe') == False\nassert solution.checkInclusion('jir', 'bb') == False\nassert solution.checkInclusion('brcwg', 'htukivyzl') == False\nassert solution.checkInclusion('n', 'c') == False\nassert solution.checkInclusion('sqe', 'gnggfho') == False\nassert solution.checkInclusion('rw', 'oqucb') == False\nassert solution.checkInclusion('adeh', 'jkqedub') == False\nassert solution.checkInclusion('jw', 'o') == False\nassert solution.checkInclusion('njkh', 'emcgrrp') == False\nassert solution.checkInclusion('nuyjq', 'm') == False\nassert solution.checkInclusion('ru', 'gyc') == False\nassert solution.checkInclusion('tyk', 'get') == False\nassert solution.checkInclusion('vi', 'otzixrbe') == False\nassert solution.checkInclusion('jzw', 'mta') == False\nassert solution.checkInclusion('if', 'bhpvqtnzx') == False",
  "inefficient_solution": "class Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:\n        n, m = len(s1), len(s2)\n        if n > m:\n            return False\n        s1_set = set(s1)\n        s2_list = [None] * m\n        for i in range(m):\n            if s2[i] in s1_set:\n                s2_list[i] = {'s1': s1_set, 's2': set(s2[i])}\n        for i in range(m - n + 1):\n            window = [None] * n\n            for j in range(n):\n                window[j] = {'s2': set(s2[i + j])}\n            for s2_str in s2_list[i:i + n]:\n                for key, value in s2_str.items():\n                    for j in range(n):\n                        window[j][key] = value\n            if self.is_perm(window, s1_set):\n                return True\n        return False\n\n    def is_perm(self, window, s1_set):\n        for i in range(len(window)):\n            for key, value in window[i].items():\n                if key == 's1':\n                    if value != s1_set:\n                        return False\n                else:\n                    if len(value) != 1 or list(value)[0] not in s1_set:\n                        return False\n        return True",
  "is_python": true
}