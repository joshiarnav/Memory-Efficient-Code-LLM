{
  "problem_idx": 562,
  "task_name": "Longest Line of Consecutive One in Matrix",
  "markdown_description": "\nGiven an `m x n` binary matrix `mat`, return *the length of the longest line of consecutive one in the matrix*.\n\n\nThe line could be horizontal, vertical, diagonal, or anti-diagonal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0562.Longest%20Line%20of%20Consecutive%20One%20in%20Matrix/images/long1-grid.jpg)\n\n```\n\n**Input:** mat = [[0,1,1,0],[0,1,1,0],[0,0,0,1]]\n**Output:** 3\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0562.Longest%20Line%20of%20Consecutive%20One%20in%20Matrix/images/long2-grid.jpg)\n\n```\n\n**Input:** mat = [[1,1,1,1],[0,1,1,0],[0,0,0,1]]\n**Output:** 4\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == mat.length`\n* `n == mat[i].length`\n* `1 <= m, n <= 104`\n* `1 <= m * n <= 104`\n* `mat[i][j]` is either `0` or `1`.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        a = [[0] * (n + 2) for _ in range(m + 2)]\n        b = [[0] * (n + 2) for _ in range(m + 2)]\n        c = [[0] * (n + 2) for _ in range(m + 2)]\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = mat[i - 1][j - 1]\n                if v:\n                    a[i][j] = a[i - 1][j] + 1\n                    b[i][j] = b[i][j - 1] + 1\n                    c[i][j] = c[i - 1][j - 1] + 1\n                    d[i][j] = d[i - 1][j + 1] + 1\n                    ans = max(ans, a[i][j], b[i][j], c[i][j], d[i][j])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        a = [[0] * (n + 2) for _ in range(m + 2)]\n        b = [[0] * (n + 2) for _ in range(m + 2)]\n        c = [[0] * (n + 2) for _ in range(m + 2)]\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = mat[i - 1][j - 1]\n                if v:\n                    a[i][j] = a[i - 1][j] + 1\n                    b[i][j] = b[i][j - 1] + 1\n                    c[i][j] = c[i - 1][j - 1] + 1\n                    d[i][j] = d[i - 1][j + 1] + 1\n                    ans = max(ans, a[i][j], b[i][j], c[i][j], d[i][j])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    m, n = random.randint(1, 10), random.randint(1, 10)\n    \n    mat = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n    \n    expected_result = solution.longestLine(mat)\n\n    return mat, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        mat, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestLine(mat) == expected_result\n        print(f\"assert solution.longestLine({mat}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestLine({mat}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestLine([[1, 0, 1, 0, 1], [0, 1, 1, 1, 0], [1, 0, 0, 1, 1], [1, 1, 1, 1, 0], [0, 1, 1, 1, 1], [0, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 1, 0, 0, 1], [1, 1, 1, 1, 1], [0, 1, 0, 1, 0]]) == 7\nassert solution.longestLine([[1, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0]]) == 4\nassert solution.longestLine([[0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0]]) == 3\nassert solution.longestLine([[1, 1, 0, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 1, 0], [0, 1, 0, 1, 1], [1, 0, 0, 1, 1]]) == 5\nassert solution.longestLine([[0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1], [0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 0, 0, 1]]) == 4\nassert solution.longestLine([[1, 1, 1], [0, 1, 1], [0, 1, 0], [0, 0, 0], [1, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]) == 3\nassert solution.longestLine([[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 1, 1], [1, 0, 1], [0, 1, 1], [0, 1, 0], [1, 0, 0]]) == 5\nassert solution.longestLine([[0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1]]) == 6\nassert solution.longestLine([[0, 1, 1, 0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1]]) == 3\nassert solution.longestLine([[1], [1]]) == 2\nassert solution.longestLine([[0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1]]) == 5\nassert solution.longestLine([[1, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1]]) == 3\nassert solution.longestLine([[1, 0], [1, 0], [1, 1], [1, 0], [1, 1], [0, 1]]) == 5\nassert solution.longestLine([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1]]) == 3\nassert solution.longestLine([[1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0]]) == 6\nassert solution.longestLine([[1], [1], [1], [0], [1], [0], [1], [1], [1], [1]]) == 4\nassert solution.longestLine([[1, 0, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 0]]) == 3\nassert solution.longestLine([[1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0]]) == 7\nassert solution.longestLine([[0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1]]) == 3\nassert solution.longestLine([[1], [1]]) == 2\nassert solution.longestLine([[1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0]]) == 8\nassert solution.longestLine([[0, 0, 0, 1, 1], [0, 1, 0, 0, 1], [0, 0, 1, 1, 1], [1, 0, 1, 0, 0], [0, 0, 0, 0, 0]]) == 3\nassert solution.longestLine([[1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1]]) == 2\nassert solution.longestLine([[1, 1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0, 1, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1]]) == 7\nassert solution.longestLine([[1], [0], [0], [0], [0], [1], [1], [1], [1], [1]]) == 5\nassert solution.longestLine([[1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1]]) == 3\nassert solution.longestLine([[0, 1, 0, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1]]) == 5\nassert solution.longestLine([[1, 1, 1, 0, 0], [0, 0, 1, 1, 1], [0, 0, 1, 0, 1], [0, 1, 0, 0, 1]]) == 3\nassert solution.longestLine([[0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0]]) == 2\nassert solution.longestLine([[0, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1]]) == 4\nassert solution.longestLine([[0, 1, 1, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1]]) == 5\nassert solution.longestLine([[0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1], [1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0]]) == 6\nassert solution.longestLine([[1, 1, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0], [1, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1]]) == 8\nassert solution.longestLine([[1], [1]]) == 2\nassert solution.longestLine([[1, 1, 0, 1, 0], [0, 0, 0, 1, 1], [1, 0, 0, 0, 0], [0, 0, 1, 1, 1]]) == 3\nassert solution.longestLine([[0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1]]) == 6\nassert solution.longestLine([[0, 1, 1], [1, 0, 0]]) == 2\nassert solution.longestLine([[1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 1, 1, 1], [1, 1, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 1]]) == 5\nassert solution.longestLine([[1, 0], [0, 0], [0, 0], [1, 0], [1, 0], [0, 1], [0, 0], [1, 0], [1, 1], [1, 0]]) == 3\nassert solution.longestLine([[0, 1, 0, 0, 1, 1, 1, 0]]) == 3\nassert solution.longestLine([[1, 1]]) == 2\nassert solution.longestLine([[1, 1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0]]) == 7\nassert solution.longestLine([[1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0]]) == 10\nassert solution.longestLine([[1], [1], [1], [0], [0], [0], [1]]) == 3\nassert solution.longestLine([[0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0]]) == 3\nassert solution.longestLine([[1, 1, 0, 0, 1, 1, 0]]) == 2\nassert solution.longestLine([[1], [1]]) == 2\nassert solution.longestLine([[1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0]]) == 5\nassert solution.longestLine([[1, 0, 1, 1], [1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0]]) == 3\nassert solution.longestLine([[1, 0, 1], [0, 1, 1], [1, 1, 0], [0, 0, 0], [0, 1, 0]]) == 3\nassert solution.longestLine([[1, 1, 0, 0, 1, 1]]) == 2\nassert solution.longestLine([[0, 0, 0, 1, 0, 1, 1]]) == 2\nassert solution.longestLine([[0, 0, 0, 1], [1, 0, 1, 0], [1, 1, 1, 0], [1, 0, 1, 1], [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 0, 1], [1, 1, 1, 0]]) == 4\nassert solution.longestLine([[1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1]]) == 3\nassert solution.longestLine([[1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1]]) == 6\nassert solution.longestLine([[0, 1, 0, 1, 0, 0]]) == 1\nassert solution.longestLine([[1], [1], [1], [1], [0], [1], [0], [1]]) == 4\nassert solution.longestLine([[1, 1, 1], [0, 0, 0], [1, 1, 1], [1, 0, 0], [1, 1, 1], [1, 1, 0], [0, 0, 1], [1, 0, 0]]) == 4\nassert solution.longestLine([[1, 1, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1]]) == 3\nassert solution.longestLine([[0, 1, 1, 0, 0], [0, 0, 1, 0, 1], [0, 1, 0, 1, 0]]) == 3\nassert solution.longestLine([[0, 1, 0, 1, 0], [1, 1, 0, 1, 0], [0, 1, 1, 1, 1], [0, 1, 1, 0, 0], [0, 0, 0, 1, 0], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0]]) == 5\nassert solution.longestLine([[0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0]]) == 6\nassert solution.longestLine([[0, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1]]) == 4\nassert solution.longestLine([[0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 1]]) == 2\nassert solution.longestLine([[1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1]]) == 2\nassert solution.longestLine([[1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 1, 0, 1, 1]]) == 4\nassert solution.longestLine([[1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0]]) == 7\nassert solution.longestLine([[0]]) == 0\nassert solution.longestLine([[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 0, 0], [0, 1, 1], [1, 0, 1]]) == 3\nassert solution.longestLine([[0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 0, 1, 0, 0]]) == 7\nassert solution.longestLine([[1, 1, 1, 0, 0], [0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [0, 1, 1, 0, 1], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]]) == 3\nassert solution.longestLine([[1, 1, 1, 0], [1, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 0], [1, 0, 0, 1], [0, 1, 0, 0], [0, 1, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]]) == 4\nassert solution.longestLine([[1, 0, 0, 0, 0], [1, 1, 1, 0, 0], [1, 0, 0, 1, 0], [0, 0, 0, 1, 1], [0, 1, 0, 1, 1]]) == 3\nassert solution.longestLine([[0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1]]) == 6\nassert solution.longestLine([[0, 1, 0, 1]]) == 1\nassert solution.longestLine([[1, 0], [0, 1], [1, 0], [0, 1], [1, 0], [1, 0], [1, 0], [0, 0], [0, 1]]) == 3\nassert solution.longestLine([[1, 1], [1, 1], [0, 0]]) == 2\nassert solution.longestLine([[1, 1, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0]]) == 7\nassert solution.longestLine([[0, 0], [0, 1]]) == 1\nassert solution.longestLine([[1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 0, 0, 1]]) == 6\nassert solution.longestLine([[1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1]]) == 7\nassert solution.longestLine([[1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1, 1, 1, 0]]) == 6\nassert solution.longestLine([[1, 0, 1], [1, 1, 1], [1, 0, 1], [0, 0, 0], [1, 1, 0], [0, 1, 1], [0, 0, 0], [0, 0, 0]]) == 3\nassert solution.longestLine([[0, 0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1]]) == 4\nassert solution.longestLine([[0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1]]) == 3\nassert solution.longestLine([[1, 1, 0, 1, 1, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 0, 1, 0]]) == 5\nassert solution.longestLine([[0, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0]]) == 4\nassert solution.longestLine([[1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1]]) == 5\nassert solution.longestLine([[0, 1, 1, 1, 1, 1]]) == 5\nassert solution.longestLine([[0, 0], [1, 1], [1, 1], [0, 0], [0, 0], [1, 1], [0, 1]]) == 2\nassert solution.longestLine([[1], [0], [1], [0], [1], [0], [0], [0], [1], [0]]) == 1\nassert solution.longestLine([[0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1]]) == 6\nassert solution.longestLine([[0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0]]) == 4\nassert solution.longestLine([[1], [0], [1], [0]]) == 1\nassert solution.longestLine([[1, 1, 1, 0, 1, 1], [1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0]]) == 5\nassert solution.longestLine([[1, 1], [0, 1], [0, 0], [1, 1], [0, 0], [1, 1], [1, 0], [1, 1], [0, 1]]) == 3\nassert solution.longestLine([[0], [1], [0], [0], [1], [1], [1]]) == 3\nassert solution.longestLine([[1, 0, 0, 1, 1], [1, 0, 0, 1, 1], [0, 1, 0, 0, 1], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0]]) == 3\nassert solution.longestLine([[0, 0, 0], [1, 1, 0], [0, 0, 0], [1, 0, 0], [0, 1, 1], [1, 0, 1], [0, 0, 0], [0, 0, 1]]) == 3\nassert solution.longestLine([[1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1]]) == 5",
  "inefficient_solution": "class Solution:\n    def longestLine(self, mat: List[List[int]]) -> int:\n        m, n = len(mat), len(mat[0])\n        a = [[0] * (n + 2) for _ in range(m * 10 + 2)]\n        b = [[0] * (n * 10 + 2) for _ in range(m + 2)]\n        c = [[0] * (n + 2) for _ in range(m * 100 + 2)]\n        d = [[0] * (n + 2) for _ in range(m * 1000 + 2)]\n        e = [[0] * (n + 2) for _ in range(m * 10000 + 2)]\n        f = [[0] * (n + 2) for _ in range(m * 100000 + 2)]\n        g = [[0] * (n + 2) for _ in range(m * 1000000 + 2)]\n        h = [[0] * (n + 2) for _ in range(m * 10000000 + 2)]\n        i = [[0] * (n + 2) for _ in range(m * 100000000 + 2)]\n        j = [[0] * (n + 2) for _ in range(m * 1000000000 + 2)]\n        k = [[0] * (n + 2) for _ in range(m * 10000000000 + 2)]\n        ans = 0\n        for _ in range(100000):\n            for i in range(1, m + 1):\n                for j in range(1, n + 1):\n                    v = mat[i - 1][j - 1]\n                    if v:\n                        a[i][j] = a[i - 1][j] + 1\n                        b[i][j] = b[i][j - 1] + 1\n                        c[i][j] = c[i - 1][j - 1] + 1\n                        d[i][j] = d[i - 1][j + 1] + 1\n                        ans = max(ans, a[i][j], b[i][j], c[i][j], d[i][j])\n        return ans",
  "is_python": true
}