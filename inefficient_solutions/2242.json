{
  "problem_idx": 2242,
  "task_name": "Maximum Score of a Node Sequence",
  "markdown_description": "\nThere is an **undirected** graph with `n` nodes, numbered from `0` to `n - 1`.\n\n\nYou are given a **0-indexed** integer array `scores` of length `n` where `scores[i]` denotes the score of node `i`. You are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi`.\n\n\nA node sequence is **valid** if it meets the following conditions:\n\n\n* There is an edge connecting every pair of **adjacent** nodes in the sequence.\n* No node appears more than once in the sequence.\n\n\nThe score of a node sequence is defined as the **sum** of the scores of the nodes in the sequence.\n\n\nReturn *the **maximum score** of a valid node sequence with a length of* `4`*.* If no such sequence exists, return`-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2242.Maximum%20Score%20of%20a%20Node%20Sequence/images/ex1new3.png)\n\n```\n\n**Input:** scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]\n**Output:** 24\n**Explanation:** The figure above shows the graph and the chosen node sequence [0,1,2,3].\nThe score of the node sequence is 5 + 2 + 9 + 8 = 24.\nIt can be shown that no other node sequence has a score of more than 24.\nNote that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24.\nThe sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2242.Maximum%20Score%20of%20a%20Node%20Sequence/images/ex2.png)\n\n```\n\n**Input:** scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]\n**Output:** -1\n**Explanation:** The figure above shows the graph.\nThere are no valid node sequences of length 4, so we return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == scores.length`\n* `4 <= n <= 5 * 104`\n* `1 <= scores[i] <= 108`\n* `0 <= edges.length <= 5 * 104`\n* `edges[i].length == 2`\n* `0 <= ai, bi <= n - 1`\n* `ai != bi`\n* There are no duplicate edges.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        for k in g.keys():\n            g[k] = nlargest(3, g[k], key=lambda x: scores[x])\n        ans = -1\n        for a, b in edges:\n            for c in g[a]:\n                for d in g[b]:\n                    if b != c != d != a:\n                        t = scores[a] + scores[b] + scores[c] + scores[d]\n                        ans = max(ans, t)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumScore(self, scores, edges):\n        g = defaultdict(list)\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        for k in g.keys():\n            g[k] = nlargest(3, g[k], key=lambda x: scores[x])\n        ans = -1\n        for a, b in edges:\n            for c in g[a]:\n                for d in g[b]:\n                    if b != c != d != a:\n                        t = scores[a] + scores[b] + scores[c] + scores[d]\n                        ans = max(ans, t)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate n random scores\n    n = random.randint(4, 10)\n    scores = [random.randint(1, 10**8) for _ in range(n)]\n\n    # Generate random edges\n    edges = []\n    num_edges = random.randint(0, 10)\n    for _ in range(num_edges):\n        a = random.randint(0, n-1)\n        b = random.randint(0, n-1)\n        if a != b and [a, b] not in edges and [b, a] not in edges:\n            edges.append([a, b])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumScore(scores, edges)\n\n    return scores, edges, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        scores, edges, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumScore(scores, edges) == expected_result\n        print(f\"assert solution.maximumScore({scores}, {edges}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumScore({scores}, {edges}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumScore([43570861, 17202449, 58745422, 74247526, 38419508, 84670086], [[4, 5]]) == -1\nassert solution.maximumScore([71072840, 11411340, 71709426, 72362791, 58261716, 80705952, 42685684, 82385388], [[3, 1], [2, 0], [2, 7]]) == -1\nassert solution.maximumScore([51189939, 31114516, 96430841, 52619448, 22453039, 37408843], [[0, 2], [3, 1], [1, 4]]) == -1\nassert solution.maximumScore([25478300, 87341149, 27264990, 78715977], [[1, 3], [3, 0]]) == -1\nassert solution.maximumScore([78292092, 49136055, 27736366, 74635477, 87806531, 49747765, 24050377, 23162960, 6833891, 62165284], [[9, 4], [3, 1], [0, 8], [8, 4], [5, 2], [2, 6], [6, 3]]) == 235097798\nassert solution.maximumScore([83841424, 65524352, 27712319, 52841906, 69975674, 15735919], [[0, 2], [5, 4], [3, 5], [4, 3]]) == -1\nassert solution.maximumScore([37288904, 87840927, 5434222, 60361854, 4921468, 70147760, 66327006, 17513557, 39934333], [[3, 2], [5, 0], [4, 1], [7, 3], [7, 1], [1, 3], [4, 8], [7, 5]]) == 235864098\nassert solution.maximumScore([1341780, 81999302, 4607347, 4355357, 39509224, 63573229, 70953195], [[1, 2], [4, 0], [2, 4], [1, 5], [3, 0], [1, 3]]) == 189689102\nassert solution.maximumScore([56812898, 25693022, 27907467, 96450937, 18791808, 805142], [[1, 4], [5, 3], [5, 1], [1, 2], [5, 2]]) == 150856568\nassert solution.maximumScore([82937800, 78682115, 21418819, 60074046, 24678160, 98380234, 88093866, 60277542, 58339431], [[8, 1], [5, 8], [6, 5], [6, 4], [1, 3], [7, 3], [0, 4], [4, 8]]) == 323495646\nassert solution.maximumScore([26414022, 73376892, 84805256, 75878718, 28537212, 57413325, 72563840, 53204329], [[0, 6], [1, 2], [3, 6], [5, 1]]) == -1\nassert solution.maximumScore([41002017, 42405607, 84712726, 26558705, 17788952, 53525881, 4872202], []) == -1\nassert solution.maximumScore([27760287, 29406303, 53026215, 19356913, 10824249, 95239521, 61896977, 89426610], [[3, 7], [7, 5], [6, 1]]) == -1\nassert solution.maximumScore([37645865, 42543447, 68419757, 18189007, 9498365, 30992433, 84676069, 25583762, 56955175], [[0, 6], [3, 8], [2, 3], [3, 7], [5, 8]]) == 174556372\nassert solution.maximumScore([46463443, 51635199, 649694, 75584410, 66376406, 55675455], [[3, 2], [4, 0], [0, 5], [2, 1], [1, 4], [5, 4]]) == 220150503\nassert solution.maximumScore([83490700, 75459813, 55887159, 73160582, 54469245, 29724117, 6223276, 12521771, 49455226], [[3, 7], [7, 2], [5, 2], [6, 4]]) == 171293629\nassert solution.maximumScore([34456147, 44765585, 89995474, 2710611], []) == -1\nassert solution.maximumScore([40651212, 50926223, 67065826, 87272914], [[0, 1], [2, 0], [3, 1], [1, 2], [0, 3]]) == 245916175\nassert solution.maximumScore([23546380, 36430843, 1459474, 34410199, 32664361, 98619315], [[2, 3], [2, 5], [2, 0]]) == -1\nassert solution.maximumScore([35649424, 28426587, 95033255, 35514892, 35173500, 45639329, 17423211, 99333542, 11780812], [[1, 5], [1, 0], [6, 2]]) == -1\nassert solution.maximumScore([57021892, 87985130, 79336013, 66674557, 68351765, 83102430, 40985394], [[4, 3], [6, 1], [4, 5], [1, 5], [6, 2], [3, 5], [6, 0], [0, 5]]) == 306113882\nassert solution.maximumScore([82881158, 76271191, 90880352, 98708045, 79724770, 80469044, 49560519], [[4, 1], [5, 1]]) == -1\nassert solution.maximumScore([73350760, 92691304, 71290411, 30871826, 11589582, 29422363, 33379886, 33498168, 28152927], [[2, 3], [4, 7]]) == -1\nassert solution.maximumScore([52255255, 73774670, 38871847, 38030612, 70109408, 72484227, 77008196, 81670846, 7333973, 22350267], [[7, 8]]) == -1\nassert solution.maximumScore([35824893, 57261627, 29491632, 90547055, 42186476, 2653922, 64624906, 1272223, 81212699], [[3, 1], [7, 2]]) == -1\nassert solution.maximumScore([18744817, 38814097, 99304006, 80579875, 73460427, 69903640, 89041254, 16065244], [[6, 0]]) == -1\nassert solution.maximumScore([21793149, 57678643, 5723123, 73851258, 88770571, 16474709, 36264627], [[5, 4]]) == -1\nassert solution.maximumScore([48893826, 56478767, 32368011, 57726892, 49215481, 1595774, 90141655, 69872335], [[5, 0], [3, 0], [5, 2], [1, 4], [5, 1]]) == 164695259\nassert solution.maximumScore([28124006, 25120951, 68780734, 298566, 84948489, 65919788], [[2, 0], [2, 4], [5, 4], [4, 0], [0, 5], [5, 2], [3, 2], [1, 3], [2, 1], [3, 4]]) == 247773017\nassert solution.maximumScore([75484374, 20175082, 84923841, 45379585, 92516847, 74457757, 80983286], [[1, 3], [4, 1], [4, 3]]) == -1\nassert solution.maximumScore([6310087, 21866193, 51358578, 97499454, 59281422, 28420421], [[0, 2], [5, 0]]) == -1\nassert solution.maximumScore([98092185, 21440321, 26436487, 87847076, 8896515], [[4, 3], [2, 4], [0, 2], [0, 3], [2, 3], [1, 0], [4, 0]]) == 233816069\nassert solution.maximumScore([79076894, 91072824, 69018380, 33678223, 79885356, 58943867, 99344835, 19183112], [[5, 0], [0, 7], [4, 0], [6, 0], [6, 7]]) == 277490197\nassert solution.maximumScore([93601166, 62216980, 93902599, 99433817, 16435624, 58844575, 94555341, 96437627, 43238480], [[3, 1], [2, 7], [2, 4], [7, 4], [3, 8]]) == -1\nassert solution.maximumScore([71072317, 4763564, 62213043, 96576042], []) == -1\nassert solution.maximumScore([22749502, 75663815, 48406327, 30934878], [[0, 3]]) == -1\nassert solution.maximumScore([89346077, 20910269, 13543992, 32021730, 80197838, 79646429], [[5, 3], [3, 1], [5, 0], [2, 0]]) == 221924505\nassert solution.maximumScore([95455170, 95862055, 36804084, 40894568, 52314822, 11103698, 23737689], [[1, 3], [4, 2], [5, 0], [5, 3], [1, 2], [1, 4], [1, 0]]) == 280436131\nassert solution.maximumScore([11305156, 16768810, 28362668, 90796580, 12474945, 50644952, 95233311], [[6, 5], [2, 3], [0, 6]]) == -1\nassert solution.maximumScore([58354600, 52978309, 85787578, 34211138, 33102723], [[1, 4]]) == -1\nassert solution.maximumScore([86653509, 71165966, 35604066, 72912876, 57143357, 79474258, 30075879, 30354531, 65020835, 69184422], [[9, 2], [4, 5]]) == -1\nassert solution.maximumScore([83699994, 60550380, 50365117, 11866222, 8006595, 28688966], [[1, 3], [0, 1], [2, 5], [2, 1], [1, 5], [4, 2], [0, 4]]) == 223304457\nassert solution.maximumScore([66077702, 66148460, 52455539, 99349325, 56580772, 6318602], [[1, 2], [3, 0], [0, 5], [5, 2], [3, 4], [3, 5], [0, 4]]) == 228326401\nassert solution.maximumScore([64131960, 18374853, 6756583, 70621884, 54043543, 2257145, 52430405, 14031827], [[0, 4], [6, 5], [2, 1], [3, 0]]) == -1\nassert solution.maximumScore([45658218, 21328032, 56219773, 68999050, 58605705, 31628532, 86981089, 9424896, 27613002], [[7, 4], [2, 6], [7, 3], [3, 0], [3, 2], [7, 6], [0, 8], [6, 3], [1, 0], [2, 4]]) == 270805617\nassert solution.maximumScore([44612285, 84689543, 41516119, 83921859, 21172873, 24621113, 91951281, 19761648], [[7, 5], [2, 3], [6, 0], [1, 7], [7, 6], [7, 3], [1, 3], [4, 1]]) == 280324331\nassert solution.maximumScore([9140786, 55360632, 67506438, 46293244], [[3, 1], [2, 0], [2, 1], [2, 3]]) == 178301100\nassert solution.maximumScore([71753918, 22977585, 2305892, 75520195, 73969597, 31268617], [[2, 4]]) == -1\nassert solution.maximumScore([59348815, 90815329, 78994065, 8709316, 94382187], [[1, 0]]) == -1\nassert solution.maximumScore([74413618, 47176382, 22970110, 35439353, 39546603], [[2, 4], [3, 0], [2, 1], [1, 3], [0, 1], [1, 4], [0, 4]]) == 196575956\nassert solution.maximumScore([89501137, 75725054, 21855240, 63536105, 27218306, 89774276, 6563842, 97347383, 47755911, 42856871], [[9, 8], [7, 3], [2, 7]]) == -1\nassert solution.maximumScore([34689128, 56800691, 35983567, 6212133, 96792195, 53272889, 89516383, 64147104, 87803620], [[8, 0], [1, 4]]) == -1\nassert solution.maximumScore([11209145, 19761222, 7892115, 84039508, 58715905, 97025943], [[0, 2], [4, 3], [4, 0], [5, 3]]) == 250990501\nassert solution.maximumScore([17032001, 1609933, 16579092, 47558444], [[3, 1], [3, 0], [2, 1]]) == 82779470\nassert solution.maximumScore([25281103, 80383109, 38223151, 69470108, 10738941, 28378368, 41357311], [[6, 0], [2, 4], [4, 3], [0, 4]]) == 146847463\nassert solution.maximumScore([10998211, 63138014, 64730977, 80172755, 1575250, 83224226], [[1, 3], [2, 4], [5, 3], [5, 4]]) == 229703208\nassert solution.maximumScore([63912459, 39465976, 93263377, 29358829, 62211068, 44579754, 70277702, 1891352], [[2, 7], [2, 5], [4, 7], [0, 2], [5, 1], [4, 3], [3, 0]]) == 248745733\nassert solution.maximumScore([85425495, 35507261, 72475632, 48130180, 82180745, 11587221, 43602823, 86231787, 22283033], []) == -1\nassert solution.maximumScore([72530578, 13775013, 91390790, 65401044, 79457964, 69828186, 32040399, 30106191, 14634880], [[8, 2], [0, 4], [1, 3], [0, 2], [4, 5], [6, 8]]) == 313207518\nassert solution.maximumScore([66090758, 8895063, 93147713, 9383728, 57532396, 611619, 15772988, 96969664, 13812696], [[3, 4]]) == -1\nassert solution.maximumScore([62960770, 28744389, 87588099, 62750056], [[2, 0]]) == -1\nassert solution.maximumScore([4308046, 39291404, 2824321, 64497441, 4254365, 34226288, 39445291], [[4, 3], [3, 1], [6, 4], [3, 2]]) == 147488501\nassert solution.maximumScore([20484279, 3180283, 49187616, 48811876, 19028555, 20979701, 87221544, 77690964, 98685703], [[4, 3], [2, 5], [8, 3], [3, 6], [4, 5], [5, 7], [6, 1], [2, 8]]) == 283906739\nassert solution.maximumScore([44890249, 71601635, 77008314, 58418324, 42363519, 27828117, 16960539, 48077178], [[3, 4], [2, 4], [5, 1], [3, 0], [6, 3], [1, 2]]) == 249391792\nassert solution.maximumScore([63929878, 87729808, 41635380, 26186839, 10048960, 10274854, 87403973, 60172257, 43577034], [[2, 3]]) == -1\nassert solution.maximumScore([95072124, 87541420, 95793247, 75578061], [[2, 3], [0, 3], [1, 3]]) == -1\nassert solution.maximumScore([72282508, 97519247, 26710117, 14309785, 94690972, 21321230, 15553037, 44909958], [[2, 0], [2, 6], [7, 2], [1, 5], [1, 3], [3, 7]]) == 183449107\nassert solution.maximumScore([80044772, 61249027, 69925953, 28729544, 38466581], [[3, 1], [1, 0]]) == -1\nassert solution.maximumScore([43110390, 819510, 16413638, 30741003, 61751104], [[0, 4], [1, 2], [0, 3]]) == -1\nassert solution.maximumScore([87660891, 67054840, 121400, 24787476], []) == -1\nassert solution.maximumScore([62091087, 88197807, 75234898, 69882449], [[0, 2]]) == -1\nassert solution.maximumScore([15711213, 87939273, 49362886, 69718503, 60999933, 5482973, 21408677, 49925435, 31993893, 24959455], [[1, 6], [9, 3], [3, 4]]) == -1\nassert solution.maximumScore([14409898, 3656954, 65184207, 51584765], []) == -1\nassert solution.maximumScore([25263597, 10696101, 63083275, 57106968, 72876044, 55950846, 78861858, 93229819, 86161734], [[3, 2], [8, 5], [8, 6], [2, 5], [7, 5]]) == 314204257\nassert solution.maximumScore([8650120, 21601068, 6357555, 4493654, 46131869, 28739592, 57462650, 38675790, 8516489, 28435650], [[8, 6], [1, 5], [3, 9]]) == -1\nassert solution.maximumScore([56417655, 85904577, 43654936, 3134151], [[3, 2]]) == -1\nassert solution.maximumScore([17941638, 78934017, 40279411, 64453977, 76431630], [[1, 2], [4, 2]]) == -1\nassert solution.maximumScore([79509537, 19688536, 69397574, 5780260, 61292797], []) == -1\nassert solution.maximumScore([46233449, 73255351, 11481665, 45889672, 97896365, 45938393, 57118133, 17025485, 61534451], [[6, 5], [6, 7], [7, 1], [4, 3], [7, 2], [7, 4], [7, 3]]) == 234066873\nassert solution.maximumScore([851102, 89290914, 14782263, 33227814, 88360008], [[2, 4]]) == -1\nassert solution.maximumScore([5174868, 20734053, 51974063, 4450140], []) == -1\nassert solution.maximumScore([83413032, 64519221, 63321687, 56691369, 85898322, 58024385, 76007551, 63152039], [[7, 1], [5, 6], [4, 1]]) == -1\nassert solution.maximumScore([56144844, 41081688, 57112516, 50891986, 42790906, 87288784, 8387106, 67551753], [[2, 1], [6, 1], [3, 0]]) == -1\nassert solution.maximumScore([20841481, 2371998, 40274270, 64036697, 3514396, 39571105, 34406342, 86130766], [[7, 3], [6, 0], [4, 5], [0, 7], [6, 5], [4, 1]]) == 205415286\nassert solution.maximumScore([34235246, 23632218, 52994336, 40906913, 14917221, 3563177, 63043034, 91843827, 65057903, 53995241], [[2, 0], [7, 9], [8, 7], [9, 1], [8, 6]]) == 273940005\nassert solution.maximumScore([22164843, 93417195, 88366207, 99605279, 43477414, 83844567], [[5, 0], [1, 2], [1, 3]]) == -1\nassert solution.maximumScore([365829, 83342458, 13550746, 60265293, 96964864], [[1, 2], [0, 3]]) == -1\nassert solution.maximumScore([62243035, 6654202, 54532977, 46160385], [[2, 0], [1, 2], [3, 2], [1, 0], [0, 3]]) == 169590599\nassert solution.maximumScore([87915066, 68780468, 12074520, 3679802, 61525030, 75229478], []) == -1\nassert solution.maximumScore([34859845, 89158085, 62245871, 23804730, 85934141, 81747226, 55992519, 19246789, 22984079], [[0, 3], [8, 1], [0, 4], [7, 1]]) == -1\nassert solution.maximumScore([81901633, 51280586, 65259217, 2178115, 65338646], [[1, 4]]) == -1\nassert solution.maximumScore([55430361, 14771399, 5748600, 67867769, 70285667, 36989013, 91382466, 37388439, 96102433], [[1, 3], [6, 8], [7, 0], [2, 7]]) == -1\nassert solution.maximumScore([13244480, 77067430, 48599838, 35397132, 69381764, 63784004, 34719007, 53172380], [[4, 1], [2, 1], [7, 4], [6, 5], [5, 4], [1, 7], [6, 4], [2, 7]]) == 263405578\nassert solution.maximumScore([47496122, 82789336, 30372576, 26522426, 59085363, 67597759, 2341487, 97528712], []) == -1\nassert solution.maximumScore([90348929, 46078256, 95592941, 95867713, 23057984, 67280536], [[4, 5], [3, 0], [2, 1], [4, 1], [2, 5]]) == 232009717\nassert solution.maximumScore([14616489, 49425678, 79508571, 76763383, 67627309, 43752457, 26427045, 55118601, 67740272], [[7, 4], [5, 1], [7, 3], [0, 6]]) == -1\nassert solution.maximumScore([65751967, 41440464, 25815799, 76575390, 54587850, 97793376, 40925140, 12597910, 3093852, 57604520], [[8, 0]]) == -1\nassert solution.maximumScore([43726293, 44815630, 34555010, 64335739, 50457187, 98484676, 48695354], [[5, 0], [1, 3], [4, 1], [0, 2], [6, 3], [6, 4]]) == 208303910\nassert solution.maximumScore([58636875, 66648249, 97857, 38499117, 64669127, 60863479, 24686847, 34893984, 79656719], []) == -1\nassert solution.maximumScore([77205714, 62435078, 6425729, 83390587], [[3, 1], [2, 3], [2, 0], [1, 0]]) == 229457108",
  "inefficient_solution": "class Solution:\n    def maximumScore(self, scores, edges):\n        n = len(scores)\n        adj_list = [[] for _ in range(n)]\n        degree = [0] * n\n        score_array = [0] * n\n        adj_edge = {}\n        for a, b in edges:\n            adj_list[a].append(b)\n            adj_list[b].append(a)\n            degree[a] += 1\n            degree[b] += 1\n            if a not in adj_edge:\n                adj_edge[a] = []\n            if b not in adj_edge:\n                adj_edge[b] = []\n            adj_edge[a].append((b, (a, b)))\n            adj_edge[b].append((a, (b, a)))\n        for i in range(n):\n            score_array[i] = scores[i]\n        \n        ans = float('-inf')\n        for a in range(n):\n            for b in adj_list[a]:\n                for c in adj_list[a]:\n                    if b != c:\n                        for d in adj_list[b]:\n                            if d != a and d != c:\n                                for e in adj_list[b]:\n                                    if e != a and e != d and e != c:\n                                        for f in adj_list[d]:\n                                            if f != a and f != b and f != d and f != e and f != c:\n                                                for g in adj_list[d]:\n                                                    if g != a and g != b and g != d and g != e and g != f and g != c:\n                                                        for h in adj_list[d]:\n                                                            if h != a and h != b and h != d and h != e and h != f and h != g and h != c:\n                                                                for i in adj_list[d]:\n                                                                    if i != a and i != b and i != d and i != e and i != f and i != g and i != h and i != c:\n                                                                        t = score_array[a] + score_array[b] + score_array[c] + score_array[d] + score_array[e] + score_array[f] + score_array[g] + score_array[h] + score_array[i]\n                                                                        ans = max(ans, t)\n        if ans == float('-inf'):\n            return -1\n        return ans",
  "is_python": true
}