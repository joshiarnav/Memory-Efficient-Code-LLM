{
  "problem_idx": 1722,
  "task_name": "Minimize Hamming Distance After Swap Operations",
  "markdown_description": "\nYou are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` **(0-indexed)** of array `source`. Note that you can swap elements at a specific pair of indices **multiple** times and in **any** order.\n\n\nThe **Hamming distance** of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` **(0-indexed)**.\n\n\nReturn *the **minimum Hamming distance** of* `source` *and* `target` *after performing **any** amount of swap operations on array* `source`*.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]\n**Output:** 1\n**Explanation:** source can be transformed the following way:\n- Swap indices 0 and 1: source = [2,1,3,4]\n- Swap indices 2 and 3: source = [2,1,4,3]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []\n**Output:** 2\n**Explanation:** There are no allowed swaps.\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == source.length == target.length`\n* `1 <= n <= 105`\n* `1 <= source[i], target[i] <= 105`\n* `0 <= allowedSwaps.length <= 105`\n* `allowedSwaps[i].length == 2`\n* `0 <= ai, bi <= n - 1`\n* `ai != bi`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumHammingDistance(\n        self, source: List[int], target: List[int], allowedSwaps: List[List[int]]\n    ) -> int:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(source)\n        p = list(range(n))\n        for a, b in allowedSwaps:\n            p[find(a)] = find(b)\n        cnt = defaultdict(Counter)\n        for i, x in enumerate(source):\n            j = find(i)\n            cnt[j][x] += 1\n        ans = 0\n        for i, x in enumerate(target):\n            j = find(i)\n            cnt[j][x] -= 1\n            ans += cnt[j][x] < 0\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumHammingDistance(\n        self, source: List[int], target: List[int], allowedSwaps: List[List[int]]\n    ) -> int:\n        def find(x: int) -> int:\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(source)\n        p = list(range(n))\n        for a, b in allowedSwaps:\n            p[find(a)] = find(b)\n        cnt = defaultdict(Counter)\n        for i, x in enumerate(source):\n            j = find(i)\n            cnt[j][x] += 1\n        ans = 0\n        for i, x in enumerate(target):\n            j = find(i)\n            cnt[j][x] -= 1\n            ans += cnt[j][x] < 0\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random source list\n    source = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate random target list\n    target = random.sample(range(1, 101), len(source))\n\n    # Generate random allowedSwaps list\n    num_swaps = random.randint(0, 10)\n    allowedSwaps = []\n    for _ in range(num_swaps):\n        a = random.randint(0, len(source) - 1)\n        b = random.randint(0, len(source) - 1)\n        allowedSwaps.append([a, b])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumHammingDistance(source, target, allowedSwaps)\n\n    return source, target, allowedSwaps, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        source, target, allowedSwaps, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumHammingDistance(source, target, allowedSwaps) == expected_result\n        print(f\"assert solution.minimumHammingDistance({source}, {target}, {allowedSwaps}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumHammingDistance({source}, {target}, {allowedSwaps}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumHammingDistance([75, 29, 33, 96, 24, 20, 97, 54, 19, 61], [10, 76, 5, 68, 75, 90, 78, 58, 46, 69], [[4, 9], [4, 7], [3, 2], [4, 5], [5, 3]]) == 10\nassert solution.minimumHammingDistance([27, 68, 59], [11, 94, 13], [[2, 0], [1, 2]]) == 3\nassert solution.minimumHammingDistance([72, 14, 65, 36, 96], [82, 70, 1, 93, 71], [[0, 0], [3, 2], [4, 3], [2, 3], [2, 2], [4, 2], [2, 0], [3, 0], [3, 4]]) == 5\nassert solution.minimumHammingDistance([11, 42, 17, 33, 20, 13, 73, 70, 50, 46], [98, 94, 30, 90, 43, 68, 13, 89, 66, 58], [[1, 3], [8, 5], [3, 3], [3, 9], [7, 4], [7, 2], [2, 4], [3, 7]]) == 10\nassert solution.minimumHammingDistance([59, 39, 75, 60, 54, 21, 1, 14], [35, 17, 59, 29, 27, 49, 73, 12], [[5, 0], [1, 1], [4, 1], [2, 2], [5, 1]]) == 8\nassert solution.minimumHammingDistance([97, 89, 68, 6, 24, 30, 21, 76, 82, 14], [89, 61, 41, 94, 10, 15, 26, 1, 6, 45], []) == 10\nassert solution.minimumHammingDistance([80, 71, 13, 19, 90, 43, 27], [57, 95, 43, 84, 78, 28, 82], [[1, 2], [2, 4]]) == 7\nassert solution.minimumHammingDistance([8, 56, 18, 61, 30, 17, 53], [80, 46, 2, 74, 59, 27, 42], [[0, 3], [6, 1], [4, 3], [2, 5]]) == 7\nassert solution.minimumHammingDistance([14, 57, 1, 19, 94, 99, 85, 15], [65, 37, 13, 83, 36, 59, 8, 95], [[4, 3], [6, 0], [5, 0], [1, 6], [3, 3], [5, 4], [7, 5]]) == 8\nassert solution.minimumHammingDistance([99, 45, 12, 68, 37, 2], [78, 60, 82, 90, 46, 13], [[2, 2], [0, 5], [3, 4], [3, 3]]) == 6\nassert solution.minimumHammingDistance([25, 38, 70], [35, 88, 93], [[1, 1], [0, 1], [1, 2]]) == 3\nassert solution.minimumHammingDistance([63, 32, 59, 33, 48, 75, 15, 17], [83, 21, 69, 86, 72, 9, 30, 84], [[1, 3], [2, 7], [4, 4], [7, 0], [0, 1], [3, 1], [4, 2], [7, 7]]) == 8\nassert solution.minimumHammingDistance([91, 93, 87, 13, 81, 14, 75, 86], [34, 7, 50, 29, 59, 95, 33, 3], [[2, 2]]) == 8\nassert solution.minimumHammingDistance([49, 70, 50, 43, 10, 14, 80], [22, 9, 80, 28, 68, 5, 54], [[2, 0], [0, 2], [3, 6]]) == 7\nassert solution.minimumHammingDistance([49, 77, 34, 62, 56, 66, 65], [16, 30, 34, 19, 91, 67, 4], [[5, 2], [4, 1], [0, 5], [1, 5]]) == 6\nassert solution.minimumHammingDistance([79, 82, 43, 99, 65], [8, 89, 79, 61, 1], [[2, 2], [0, 0], [2, 0], [2, 1]]) == 4\nassert solution.minimumHammingDistance([51, 4, 9], [39, 20, 83], [[0, 1], [1, 1], [2, 2], [1, 0], [1, 0], [1, 1], [1, 0], [2, 2], [2, 1]]) == 3\nassert solution.minimumHammingDistance([72, 11, 78, 6, 31, 65, 80, 77], [43, 32, 50, 61, 80, 52, 58, 37], [[3, 7], [0, 5], [5, 5], [7, 0], [2, 4]]) == 8\nassert solution.minimumHammingDistance([57, 11, 36, 81, 46, 63, 7], [69, 26, 21, 32, 83, 43, 66], [[5, 6], [0, 6], [1, 2]]) == 7\nassert solution.minimumHammingDistance([84, 8, 19, 49, 82, 17, 70, 95], [79, 72, 12, 81, 70, 89, 71, 1], [[2, 4], [2, 6], [7, 6], [0, 6], [6, 6]]) == 7\nassert solution.minimumHammingDistance([56, 92, 4, 31, 25], [66, 85, 79, 89, 45], [[0, 3], [0, 1], [3, 1], [3, 1]]) == 5\nassert solution.minimumHammingDistance([54, 11, 99, 97, 2, 37, 50, 79, 9], [5, 90, 99, 86, 76, 34, 35, 1, 24], [[4, 3], [1, 2], [7, 1], [6, 0], [5, 2], [6, 5], [4, 7], [7, 3], [1, 0], [3, 2]]) == 8\nassert solution.minimumHammingDistance([68, 51, 95, 89, 73, 34, 44, 55, 78, 36], [12, 43, 48, 37, 78, 47, 67, 26, 74, 99], [[0, 4], [5, 5], [4, 7], [9, 8], [6, 0], [1, 4]]) == 10\nassert solution.minimumHammingDistance([20, 86, 81, 70, 1, 66, 41], [71, 55, 52, 23, 70, 16, 53], [[4, 0], [4, 1], [5, 0], [1, 3], [6, 2], [3, 3], [6, 0], [6, 5]]) == 6\nassert solution.minimumHammingDistance([18, 14, 6, 35, 17, 55, 49], [2, 74, 29, 44, 50, 69, 15], [[4, 5], [2, 4], [2, 1], [2, 5], [6, 2], [3, 5]]) == 7\nassert solution.minimumHammingDistance([44, 52, 14, 33, 24, 43, 2, 69], [82, 24, 71, 80, 86, 29, 27, 4], [[1, 0], [5, 0], [2, 4]]) == 8\nassert solution.minimumHammingDistance([44, 87, 86, 62], [46, 78, 19, 36], [[3, 1], [2, 1], [3, 1], [0, 2], [0, 1], [3, 2], [2, 3], [0, 3], [1, 2], [0, 3]]) == 4\nassert solution.minimumHammingDistance([22, 20, 69], [79, 35, 6], [[0, 0], [2, 2], [1, 2], [2, 2], [0, 1], [2, 0], [1, 1], [1, 0]]) == 3\nassert solution.minimumHammingDistance([43, 95, 23, 9, 1], [61, 38, 43, 91, 15], [[0, 3]]) == 5\nassert solution.minimumHammingDistance([17, 12, 3, 95, 87, 29], [93, 78, 88, 55, 38, 32], []) == 6\nassert solution.minimumHammingDistance([7, 37, 75, 97, 91, 79], [1, 89, 25, 5, 43, 31], [[3, 2], [0, 0], [5, 0], [3, 5], [2, 4]]) == 6\nassert solution.minimumHammingDistance([77, 10, 6, 9, 76, 44, 42, 56, 29, 68], [63, 7, 72, 98, 20, 74, 100, 55, 87, 29], [[9, 4], [2, 8], [1, 6]]) == 10\nassert solution.minimumHammingDistance([6, 31, 96, 46, 68], [28, 3, 52, 49, 33], [[1, 3], [4, 1], [1, 0], [2, 3], [2, 0], [2, 4], [2, 0], [4, 4], [2, 0], [2, 1]]) == 5\nassert solution.minimumHammingDistance([22, 92, 86, 98, 48, 38, 59], [10, 34, 2, 75, 51, 14, 40], [[3, 0], [6, 2], [6, 2]]) == 7\nassert solution.minimumHammingDistance([87, 62, 95], [55, 15, 13], [[2, 2], [1, 1]]) == 3\nassert solution.minimumHammingDistance([58, 50, 5, 15, 16], [90, 25, 75, 8, 20], [[4, 4]]) == 5\nassert solution.minimumHammingDistance([97, 47, 19, 18, 17, 83, 56, 80, 31], [56, 23, 64, 80, 54, 68, 53, 1, 4], [[8, 0], [1, 3], [0, 5], [2, 3], [4, 3], [0, 7]]) == 9\nassert solution.minimumHammingDistance([11, 97, 45, 71, 25, 41, 73, 65, 40, 94], [49, 64, 71, 68, 100, 89, 54, 19, 62, 32], [[9, 2], [4, 0], [9, 7], [7, 1], [0, 1], [2, 9], [6, 9], [0, 5]]) == 10\nassert solution.minimumHammingDistance([85, 50, 3, 16, 71, 23], [9, 45, 99, 93, 46, 51], [[1, 4], [0, 3], [4, 1], [0, 5]]) == 6\nassert solution.minimumHammingDistance([88, 17, 46, 43, 26, 38, 18], [40, 87, 4, 72, 9, 34, 98], [[1, 5], [0, 4], [2, 0]]) == 7\nassert solution.minimumHammingDistance([77, 3, 68], [79, 98, 38], [[1, 2], [1, 0], [2, 0], [2, 2], [0, 1], [0, 2], [1, 1], [1, 1], [1, 2], [0, 0]]) == 3\nassert solution.minimumHammingDistance([34, 23], [87, 28], [[0, 1], [1, 0], [0, 0], [1, 0], [0, 1], [0, 0], [1, 1], [1, 0]]) == 2\nassert solution.minimumHammingDistance([77, 7], [73, 3], [[1, 0], [0, 0], [1, 1], [1, 1], [1, 0], [1, 1], [0, 1], [1, 0], [1, 1], [0, 0]]) == 2\nassert solution.minimumHammingDistance([40, 14, 91, 39, 58, 86, 36], [19, 60, 85, 71, 26, 96, 92], [[3, 3], [5, 4], [2, 4], [0, 5], [0, 5], [5, 3], [4, 4]]) == 7\nassert solution.minimumHammingDistance([5, 98, 50, 48], [64, 35, 55, 63], [[1, 0], [0, 0], [3, 0], [0, 1], [3, 2], [1, 3], [3, 3], [2, 0], [1, 1]]) == 4\nassert solution.minimumHammingDistance([31, 70, 73, 72, 8, 83, 75, 10], [64, 74, 43, 56, 13, 3, 37, 70], [[1, 3], [6, 3], [1, 2], [5, 3], [5, 0], [3, 6], [5, 0], [1, 6]]) == 8\nassert solution.minimumHammingDistance([26, 47, 13, 19, 18, 61], [32, 21, 80, 55, 14, 15], [[3, 1], [4, 3], [0, 2], [1, 5], [3, 0], [0, 3]]) == 6\nassert solution.minimumHammingDistance([14, 63, 43], [37, 67, 55], [[0, 1], [2, 1], [1, 1], [0, 1], [0, 1], [0, 0]]) == 3\nassert solution.minimumHammingDistance([19, 31, 86, 26, 70, 30, 76, 48, 56], [96, 15, 38, 35, 75, 93, 59, 31, 13], [[2, 8], [5, 5], [1, 5], [6, 6], [3, 6], [7, 4], [8, 0]]) == 9\nassert solution.minimumHammingDistance([77, 42, 31, 1, 80, 32, 28], [32, 87, 59, 38, 6, 49, 76], [[1, 2], [2, 0], [2, 6], [6, 2], [4, 2], [6, 0], [0, 4], [3, 2], [2, 1]]) == 7\nassert solution.minimumHammingDistance([98, 94, 44, 63, 75], [60, 77, 61, 93, 13], [[1, 3], [2, 4], [4, 2], [2, 3], [0, 1], [1, 4], [0, 3], [4, 3], [0, 2]]) == 5\nassert solution.minimumHammingDistance([19, 83, 13, 41, 60, 88], [50, 26, 20, 51, 16, 27], [[0, 3], [4, 2], [1, 3], [1, 2], [5, 5]]) == 6\nassert solution.minimumHammingDistance([91, 4, 69], [2, 45, 22], [[0, 0], [2, 2], [0, 0], [1, 2], [2, 0], [2, 1], [1, 1], [1, 2]]) == 3\nassert solution.minimumHammingDistance([77, 4, 72, 13], [18, 29, 11, 34], [[1, 1], [3, 3], [3, 3], [0, 2], [3, 2], [3, 2], [3, 2]]) == 4\nassert solution.minimumHammingDistance([77, 56, 18, 33], [65, 22, 13, 57], [[2, 2], [3, 2], [0, 1], [2, 1], [3, 3], [1, 3], [1, 2], [3, 1], [0, 2]]) == 4\nassert solution.minimumHammingDistance([78, 59, 64, 39, 2, 32, 38], [32, 52, 90, 45, 43, 4, 66], [[3, 4]]) == 7\nassert solution.minimumHammingDistance([42, 65, 83, 17, 87, 97, 24, 93, 51], [24, 86, 39, 61, 79, 15, 35, 42, 59], [[5, 4], [3, 3], [1, 8], [6, 5], [0, 7], [5, 3]]) == 8\nassert solution.minimumHammingDistance([43, 80, 81, 99, 16, 38, 67, 8], [44, 13, 84, 32, 73, 17, 59, 90], []) == 8\nassert solution.minimumHammingDistance([23, 77, 88, 95, 52, 83, 40, 94, 90], [17, 8, 60, 27, 30, 21, 51, 23, 54], []) == 9\nassert solution.minimumHammingDistance([88, 24, 30, 54, 94], [3, 98, 59, 17, 11], [[0, 2], [0, 2], [4, 1], [1, 3], [3, 0], [4, 4], [0, 0], [0, 4]]) == 5\nassert solution.minimumHammingDistance([18, 54, 75, 63, 86, 26, 6, 30, 80], [85, 2, 75, 32, 78, 25, 83, 29, 62], [[8, 0], [2, 1], [8, 0], [4, 2], [8, 6], [3, 1], [4, 6], [6, 7], [1, 5], [2, 4]]) == 8\nassert solution.minimumHammingDistance([22, 47, 65, 75], [42, 56, 7, 6], [[1, 2], [2, 0], [2, 2]]) == 4\nassert solution.minimumHammingDistance([96, 90, 83, 79, 86], [90, 81, 93, 7, 73], [[1, 4], [4, 4], [0, 4]]) == 4\nassert solution.minimumHammingDistance([70, 43, 93, 65, 96], [59, 63, 69, 1, 64], [[1, 3], [1, 1], [4, 0], [3, 4], [3, 4], [4, 2], [2, 1], [0, 2]]) == 5\nassert solution.minimumHammingDistance([23, 64, 55, 69, 30, 34, 33, 41, 96], [78, 4, 27, 26, 62, 7, 11, 45, 85], [[1, 4], [6, 2], [5, 4], [0, 7], [7, 4], [7, 4], [1, 2], [4, 1]]) == 9\nassert solution.minimumHammingDistance([13, 71, 24, 19, 53, 77], [39, 20, 54, 3, 18, 99], [[4, 0], [4, 0], [5, 4], [2, 3], [5, 1]]) == 6\nassert solution.minimumHammingDistance([18, 83, 17, 19, 70, 91, 87, 58], [69, 48, 35, 23, 85, 99, 38, 26], [[3, 2], [1, 4], [7, 3], [2, 6], [5, 3], [2, 3], [3, 6]]) == 8\nassert solution.minimumHammingDistance([57, 23, 48, 77, 45], [33, 84, 6, 59, 32], [[3, 3], [4, 3], [2, 0], [1, 4], [1, 2], [0, 2]]) == 5\nassert solution.minimumHammingDistance([66, 100, 7, 71, 26, 98, 23, 49, 21], [17, 100, 45, 70, 16, 93, 89, 10, 31], [[6, 2]]) == 8\nassert solution.minimumHammingDistance([48, 28], [51, 60], [[1, 1]]) == 2\nassert solution.minimumHammingDistance([59, 57, 38, 9, 73, 79, 55, 97, 32], [72, 46, 89, 99, 94, 86, 13, 16, 41], [[6, 1], [5, 2], [1, 6]]) == 9\nassert solution.minimumHammingDistance([53, 98, 68, 71, 96], [39, 70, 87, 67, 74], []) == 5\nassert solution.minimumHammingDistance([74, 42], [44, 51], [[0, 0], [1, 0], [0, 0], [1, 0], [0, 1], [0, 1], [0, 1]]) == 2\nassert solution.minimumHammingDistance([9, 85], [14, 91], [[1, 1], [1, 1], [1, 1], [1, 0], [0, 1], [1, 0], [0, 1]]) == 2\nassert solution.minimumHammingDistance([18, 25, 64], [57, 26, 37], [[1, 2], [1, 1], [2, 0], [2, 1], [0, 0], [0, 1], [2, 1], [1, 1], [2, 0]]) == 3\nassert solution.minimumHammingDistance([99, 77, 60], [57, 29, 76], []) == 3\nassert solution.minimumHammingDistance([87, 52, 16], [34, 87, 70], [[2, 1]]) == 3\nassert solution.minimumHammingDistance([83, 60, 67, 47], [32, 10, 83, 27], [[2, 3], [3, 3], [0, 1], [3, 2], [3, 0], [2, 3], [3, 3], [3, 2]]) == 3\nassert solution.minimumHammingDistance([92, 59, 46, 89, 35, 87, 18, 4, 63], [30, 21, 6, 10, 14, 39, 23, 68, 31], [[2, 4], [2, 4], [6, 4], [4, 5], [0, 6], [3, 0], [0, 1], [6, 6], [6, 7]]) == 9\nassert solution.minimumHammingDistance([81, 77, 10, 32, 7, 90, 83, 49, 92], [53, 29, 40, 84, 28, 60, 77, 93, 97], [[6, 5], [8, 5]]) == 9\nassert solution.minimumHammingDistance([21, 1, 80, 14, 93, 34, 47, 8, 78, 26], [57, 80, 92, 41, 84, 72, 8, 29, 51, 21], [[8, 7], [9, 3], [6, 8], [8, 4], [8, 7], [9, 9], [0, 9], [1, 3]]) == 8\nassert solution.minimumHammingDistance([72, 16, 95, 96], [70, 29, 36, 13], [[0, 0], [3, 3], [1, 3], [1, 2], [0, 2], [3, 0]]) == 4\nassert solution.minimumHammingDistance([48, 10, 69], [62, 91, 7], [[2, 2], [0, 2], [2, 1], [0, 2]]) == 3\nassert solution.minimumHammingDistance([60, 24, 45, 6], [91, 76, 63, 19], [[1, 0], [1, 3]]) == 4\nassert solution.minimumHammingDistance([91, 79], [2, 22], [[0, 0], [1, 0], [1, 1], [1, 0], [0, 1], [1, 1], [1, 0], [1, 0], [0, 0]]) == 2\nassert solution.minimumHammingDistance([94, 32, 77, 48, 67, 84, 26, 85, 30], [49, 3, 64, 86, 37, 44, 35, 38, 36], [[2, 5], [0, 2], [0, 3], [3, 7], [1, 7], [6, 4], [1, 5]]) == 9\nassert solution.minimumHammingDistance([7, 37, 32, 48], [43, 26, 13, 61], [[2, 1], [2, 0], [1, 3], [3, 1], [1, 1]]) == 4\nassert solution.minimumHammingDistance([42, 64, 39, 80], [74, 28, 54, 9], []) == 4\nassert solution.minimumHammingDistance([62, 83, 68, 89, 88], [60, 61, 31, 69, 4], [[1, 0], [0, 2], [2, 2]]) == 5\nassert solution.minimumHammingDistance([89, 5, 58, 2, 62, 39], [89, 58, 44, 19, 76, 7], [[4, 2], [5, 2], [3, 3], [4, 1], [3, 4]]) == 4\nassert solution.minimumHammingDistance([29, 27, 84, 2, 7, 37, 39], [9, 72, 30, 42, 67, 11, 4], [[1, 2], [2, 6], [5, 3], [5, 1]]) == 7\nassert solution.minimumHammingDistance([24, 27, 93, 95, 22], [53, 30, 58, 49, 65], [[1, 4], [1, 4], [4, 0], [4, 1], [3, 3], [3, 1], [3, 3]]) == 5\nassert solution.minimumHammingDistance([40, 26, 59, 84, 16, 17, 29, 7, 74], [63, 74, 57, 18, 68, 44, 59, 13, 7], [[3, 3], [1, 4], [5, 6], [3, 3]]) == 9\nassert solution.minimumHammingDistance([51, 32, 37, 76], [63, 62, 65, 22], [[1, 0], [3, 1], [1, 1]]) == 4\nassert solution.minimumHammingDistance([9, 95], [37, 33], [[0, 0], [0, 0], [1, 1]]) == 2\nassert solution.minimumHammingDistance([34, 45, 83, 53, 38, 52, 23, 42], [88, 72, 22, 12, 24, 68, 55, 77], [[5, 3], [6, 5], [6, 5], [4, 2], [3, 4], [7, 6]]) == 8\nassert solution.minimumHammingDistance([39, 54, 6, 43, 95], [90, 52, 70, 15, 45], [[3, 4], [2, 4], [4, 2], [1, 2], [4, 4]]) == 5\nassert solution.minimumHammingDistance([69, 20, 10, 86, 27], [36, 70, 61, 38, 51], [[4, 3], [0, 4], [0, 1], [2, 2], [0, 1]]) == 5\nassert solution.minimumHammingDistance([48, 17, 82, 99, 87, 77, 41], [73, 3, 78, 10, 51, 24, 90], [[6, 3], [1, 2], [2, 6], [0, 3], [6, 1], [5, 3], [4, 1], [6, 1]]) == 7\nassert solution.minimumHammingDistance([51, 71, 84, 33, 10], [71, 4, 97, 51, 69], []) == 5",
  "inefficient_solution": "class Solution:\n    def minimumHammingDistance(self, source, target, allowedSwaps):\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(source)\n        p = list(range(n))\n        for a, b in allowedSwaps:\n            p[find(a)] = find(b)\n        cnt = [{} for _ in range(n)]\n        for i, x in enumerate(source):\n            j = find(i)\n            cnt[j][x] = cnt[j].get(x, 0) + 1\n        ans = 0\n        for i, x in enumerate(target):\n            j = find(i)\n            cnt[j][x] = cnt[j].get(x, 0) - 1\n            ans += cnt[j][x] < 0\n        return ans",
  "is_python": true
}