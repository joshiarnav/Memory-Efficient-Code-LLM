{
  "problem_idx": 1143,
  "task_name": "Longest Common Subsequence",
  "markdown_description": "\nGiven two strings `text1` and `text2`, return *the length of their longest **common subsequence**.* If there is no **common subsequence**, return `0`.\n\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n\n* For example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\n\nA **common subsequence** of two strings is a subsequence that is common to both strings.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** text1 = \"abcde\", text2 = \"ace\" \n**Output:** 3  \n**Explanation:** The longest common subsequence is \"ace\" and its length is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** text1 = \"abc\", text2 = \"abc\"\n**Output:** 3\n**Explanation:** The longest common subsequence is \"abc\" and its length is 3.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** text1 = \"abc\", text2 = \"def\"\n**Output:** 0\n**Explanation:** There is no such common subsequence, so the result is 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= text1.length, text2.length <= 1000`\n* `text1` and `text2` consist of only lowercase English characters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                else:\n                    f[i][j] = max(f[i - 1][j], f[i][j - 1])\n        return f[m][n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if text1[i - 1] == text2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                else:\n                    f[i][j] = max(f[i - 1][j], f[i][j - 1])\n        return f[m][n]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    text1 = ''.join(random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 11)))\n    text2 = ''.join(random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 11)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestCommonSubsequence(text1, text2)\n\n    return text1, text2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        text1, text2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestCommonSubsequence(text1, text2) == expected_result\n        if expected_result != 0:\n            print(f\"assert solution.longestCommonSubsequence('{text1}', '{text2}') == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.longestCommonSubsequence('{text1}', '{text2}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestCommonSubsequence('mjplkxulhle', 'aftvdelw') == 1\nassert solution.longestCommonSubsequence('vipjrkexhdv', 'imgvokrnxcz') == 3\nassert solution.longestCommonSubsequence('zidsjwjhapl', 'dh') == 2\nassert solution.longestCommonSubsequence('bglxei', 'vuekfm') == 1\nassert solution.longestCommonSubsequence('lvp', 'cjguzhytp') == 1\nassert solution.longestCommonSubsequence('znesmbpcjp', 'bmsf') == 1\nassert solution.longestCommonSubsequence('kecvwtat', 'lkbbkdnua') == 2\nassert solution.longestCommonSubsequence('oueohgxzctw', 'huxuoebsjbl') == 2\nassert solution.longestCommonSubsequence('e', 'slgelx') == 1\nassert solution.longestCommonSubsequence('ydvz', 'isihd') == 1\nassert solution.longestCommonSubsequence('bxjpfydxb', 'p') == 1\nassert solution.longestCommonSubsequence('ssvyowwzqp', 'ougjclmk') == 1\nassert solution.longestCommonSubsequence('lpbeaijmotd', 'vmdbajt') == 4\nassert solution.longestCommonSubsequence('d', 'ydqmd') == 1\nassert solution.longestCommonSubsequence('zt', 'th') == 1\nassert solution.longestCommonSubsequence('gxbsuyhjasv', 'eepydncfjj') == 2\nassert solution.longestCommonSubsequence('bowlgnnxy', 'nynsrijnqbz') == 2\nassert solution.longestCommonSubsequence('cmxldll', 'qpgqeslwx') == 1\nassert solution.longestCommonSubsequence('bdbgw', 'daelxsfn') == 1\nassert solution.longestCommonSubsequence('tcjqur', 'sdqeolbz') == 1\nassert solution.longestCommonSubsequence('xivdfgso', 'auyyg') == 1\nassert solution.longestCommonSubsequence('gnj', 'guil') == 1\nassert solution.longestCommonSubsequence('mtoravafc', 'fbepzfdew') == 1\nassert solution.longestCommonSubsequence('hnw', 'wnjezpouzy') == 1\nassert solution.longestCommonSubsequence('xoplyu', 'llk') == 1\nassert solution.longestCommonSubsequence('ialxbvttnsi', 'fte') == 1\nassert solution.longestCommonSubsequence('coazrytyhfw', 'xpt') == 1\nassert solution.longestCommonSubsequence('crc', 'rnjdzhkd') == 1\nassert solution.longestCommonSubsequence('qbqj', 'mtxubidvvc') == 1\nassert solution.longestCommonSubsequence('cupnhaurtlc', 'thkuwmr') == 3\nassert solution.longestCommonSubsequence('lefx', 'fe') == 1\nassert solution.longestCommonSubsequence('hclu', 'oacyfuvtayx') == 2\nassert solution.longestCommonSubsequence('pinpnp', 'zfpochjcz') == 1\nassert solution.longestCommonSubsequence('mdufd', 'nmflmzpa') == 2\nassert solution.longestCommonSubsequence('lpnlrwgjxc', 'kmpum') == 1\nassert solution.longestCommonSubsequence('ofq', 'uqqqsknhoh') == 1\nassert solution.longestCommonSubsequence('akdeouhaki', 'buwyvv') == 1\nassert solution.longestCommonSubsequence('bnmx', 'bgljn') == 2\nassert solution.longestCommonSubsequence('wislfea', 'fsnxknls') == 2\nassert solution.longestCommonSubsequence('wmsvtznyp', 'dvmnuoigfqj') == 2\nassert solution.longestCommonSubsequence('kybfeez', 'htyu') == 1\nassert solution.longestCommonSubsequence('bbwhilyo', 'cqmclzysnm') == 2\nassert solution.longestCommonSubsequence('zzvnwwfg', 'lmpagp') == 1\nassert solution.longestCommonSubsequence('jipxdu', 'vigafgrjvzw') == 1\nassert solution.longestCommonSubsequence('vrzbjqrrj', 'msgzfcfykph') == 1\nassert solution.longestCommonSubsequence('swfi', 'zvzwiolmw') == 2\nassert solution.longestCommonSubsequence('mdshb', 'jvsk') == 1\nassert solution.longestCommonSubsequence('hsvhme', 'ckdofsff') == 1\nassert solution.longestCommonSubsequence('vkdsykkxcmd', 'vzszjoozr') == 2\nassert solution.longestCommonSubsequence('gipxc', 'yyfgaiqc') == 3\nassert solution.longestCommonSubsequence('d', 'tzhsoafdhg') == 1\nassert solution.longestCommonSubsequence('jfjzxoedf', 'rimnqmifaug') == 1\nassert solution.longestCommonSubsequence('uvdfg', 'vuxlqvu') == 2\nassert solution.longestCommonSubsequence('fchlwjhcfx', 'hvhihzyzsug') == 2\nassert solution.longestCommonSubsequence('jzuwnlz', 'dfl') == 1\nassert solution.longestCommonSubsequence('pvpuhlg', 'zualzaoux') == 2\nassert solution.longestCommonSubsequence('ij', 'rmojt') == 1\nassert solution.longestCommonSubsequence('smfzmcaxvy', 'lmlhuk') == 1\nassert solution.longestCommonSubsequence('xcvelityoq', 'vzfgbxlpsfa') == 2\nassert solution.longestCommonSubsequence('naxykcp', 'osysairptbs') == 2\nassert solution.longestCommonSubsequence('dbxp', 'gttfdozy') == 1\nassert solution.longestCommonSubsequence('higxiygihu', 'tgja') == 1\nassert solution.longestCommonSubsequence('alytefoteo', 'gpyebqynx') == 2\nassert solution.longestCommonSubsequence('pvzgaenfkzl', 'annmoasxg') == 2\nassert solution.longestCommonSubsequence('fgazxy', 'yzfsptpgwa') == 3\nassert solution.longestCommonSubsequence('bngl', 'ksfnlu') == 2\nassert solution.longestCommonSubsequence('oawagjay', 'bvhpino') == 1\nassert solution.longestCommonSubsequence('ccdxwse', 'gxh') == 1",
  "inefficient_solution": "class Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        f = []\n        for _ in range(m):\n            f.append([])\n            for _ in range(n):\n                f[-1].append(0)\n        for i in range(m):\n            f[i] = f[i][:n]\n            for j in range(n):\n                if i == j == 0:\n                    f[i][j] = 0\n                elif i == 0:\n                    f[i][j] = max(f[i][j-1], 0)\n                elif j == 0:\n                    f[i][j] = max(f[i-1][j], 0)\n                elif text1[i] == text2[j]:\n                    f[i][j] = f[i-1][j-1] + 1\n                elif f[i-1][j] > f[i][j-1]:\n                    f[i][j] = f[i-1][j]\n                else:\n                    f[i][j] = f[i][j-1]\n        return f[m-1][n-1]\n\n    def longestCommonSubsequenceList(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        f = []\n        for i in range(m):\n            f.append([])\n            for j in range(n):\n                if text1[i] == text2[j]:\n                    if i == 0 or j == 0:\n                        f[i].append(1)\n                    else:\n                        f[i].append(f[i-1][j-1] + 1)\n                else:\n                    f[i].append(0)\n        return max(f[m-1])\n\n    def longestCommonSubsequenceDict(self, text1: str, text2: str) -> int:\n        m, n = len(text1), len(text2)\n        d = {}\n        for i in range(m):\n            d[i] = {}\n            for j in range(n):\n                if text1[i] == text2[j]:\n                    if i == 0 or j == 0:\n                        d[i][j] = 1\n                    else:\n                        d[i][j] = d[i-1][j-1] + 1\n                else:\n                    d[i][j] = 0\n        max_len = 0\n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, d[i][j])\n        return max_len",
  "is_python": true
}