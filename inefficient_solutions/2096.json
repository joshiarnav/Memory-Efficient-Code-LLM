{
  "problem_idx": 2096,
  "task_name": "Step",
  "markdown_description": "\nYou are given the `root` of a **binary tree** with `n` nodes. Each node is uniquely assigned a value from `1` to `n`. You are also given an integer `startValue` representing the value of the start node `s`, and a different integer `destValue` representing the value of the destination node `t`.\n\n\nFind the **shortest path** starting from node `s` and ending at node `t`. Generate step-by-step directions of such path as a string consisting of only the **uppercase** letters `'L'`, `'R'`, and `'U'`. Each letter indicates a specific direction:\n\n\n* `'L'` means to go from a node to its **left child** node.\n* `'R'` means to go from a node to its **right child** node.\n* `'U'` means to go from a node to its **parent** node.\n\n\nReturn *the step-by-step directions of the **shortest path** from node* `s` *to node* `t`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2096.Step-By-Step%20Directions%20From%20a%20Binary%20Tree%20Node%20to%20Another/images/eg1.png)\n\n```\n\n**Input:** root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6\n**Output:** \"UURL\"\n**Explanation:** The shortest path is: 3 \u2192 1 \u2192 5 \u2192 2 \u2192 6.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2096.Step-By-Step%20Directions%20From%20a%20Binary%20Tree%20Node%20to%20Another/images/eg2.png)\n\n```\n\n**Input:** root = [2,1], startValue = 2, destValue = 1\n**Output:** \"L\"\n**Explanation:** The shortest path is: 2 \u2192 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is `n`.\n* `2 <= n <= 105`\n* `1 <= Node.val <= n`\n* All the values in the tree are **unique**.\n* `1 <= startValue, destValue <= n`\n* `startValue != destValue`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def getDirections(\n        self, root: Optional[TreeNode], startValue: int, destValue: int\n    ) -> str:\n        edges = defaultdict(list)\n        ans = None\n        visited = set()\n\n        def traverse(root):\n            if not root:\n                return\n            if root.left:\n                edges[root.val].append([root.left.val, 'L'])\n                edges[root.left.val].append([root.val, 'U'])\n            if root.right:\n                edges[root.val].append([root.right.val, 'R'])\n                edges[root.right.val].append([root.val, 'U'])\n            traverse(root.left)\n            traverse(root.right)\n\n        def dfs(start, dest, t):\n            nonlocal ans\n            if start in visited:\n                return\n            if start == dest:\n                if ans is None or len(ans) > len(t):\n                    ans = ''.join(t)\n                return\n            visited.add(start)\n            for d, k in edges[start]:\n                t.append(k)\n                dfs(d, dest, t)\n                t.pop()\n\n        traverse(root)\n        dfs(startValue, destValue, [])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List, Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def getDirections(\n        self, root: Optional[TreeNode], startValue: int, destValue: int\n    ) -> str:\n        edges = defaultdict(list)\n        ans = None\n        visited = set()\n\n        def traverse(root):\n            if not root:\n                return\n            if root.left:\n                edges[root.val].append([root.left.val, 'L'])\n                edges[root.left.val].append([root.val, 'U'])\n            if root.right:\n                edges[root.val].append([root.right.val, 'R'])\n                edges[root.right.val].append([root.val, 'U'])\n            traverse(root.left)\n            traverse(root.right)\n\n        def dfs(start, dest, t):\n            nonlocal ans\n            if start in visited:\n                return\n            if start == dest:\n                if ans is None or len(ans) > len(t):\n                    ans = ''.join(t)\n                return\n            visited.add(start)\n            for d, k in edges[start]:\n                t.append(k)\n                dfs(d, dest, t)\n                t.pop()\n\n        traverse(root)\n        dfs(startValue, destValue, [])\n        return ans\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Create a binary tree with random values\n    def create_tree(arr):\n        nodes = {}\n        for i in range(len(arr)):\n            if arr[i] is None:\n                nodes[i] = None\n            else:\n                nodes[i] = TreeNode(arr[i])\n        \n        # Connect the nodes to form a binary tree\n        for i in range(len(arr)):\n            if nodes[i] is not None:\n                if 2*i+1 < len(arr):\n                    nodes[i].left = nodes[2*i+1]\n                if 2*i+2 < len(arr):\n                    nodes[i].right = nodes[2*i+2]\n        \n        return nodes[0]\n    \n    # Randomly generate values for the binary tree nodes\n    tree_values = random.choices(range(1, 101), k=random.randint(2, 10))\n    \n    # Randomly choose start and destination values\n    start_value = random.choice(tree_values)\n    dest_value = random.choice(tree_values)\n    while dest_value == start_value:\n        dest_value = random.choice(tree_values)\n    \n    # Create the binary tree\n    binary_tree = create_tree(tree_values)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getDirections(binary_tree, start_value, dest_value)\n    \n    return binary_tree, start_value, dest_value, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        binary_tree, start_value, dest_value, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getDirections(binary_tree, start_value, dest_value) == expected_result\n        print(f\"assert solution.getDirections({binary_tree}, {start_value}, {dest_value}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getDirections({binary_tree}, {start_value}, {dest_value}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386d090>, 15, 28) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43980c50>, 47, 36) == UL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386da50>, 2, 72) == UL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386dc50>, 83, 100) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386e850>, 93, 45) == UL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386f810>, 53, 56) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386ead0>, 66, 43) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf438745d0>, 78, 93) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43874bd0>, 18, 16) == UULR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43875c10>, 63, 7) == UULR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf438763d0>, 85, 31) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876310>, 11, 83) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876850>, 13, 58) == URR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43877390>, 6, 94) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43877690>, 6, 96) == R\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43877c50>, 100, 71) == URL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf438779d0>, 37, 82) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43877d90>, 8, 95) == UUL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43877210>, 2, 1) == ULR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876b90>, 65, 67) == LL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876610>, 46, 37) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876150>, 33, 3) == UURL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43874650>, 24, 64) == UULLL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43874810>, 43, 47) == UUR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386ff50>, 82, 29) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf438743d0>, 30, 6) == LL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386da50>, 61, 37) == UUR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386e550>, 49, 3) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43880510>, 28, 79) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43881010>, 7, 29) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43881710>, 59, 50) == UUL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386f710>, 72, 1) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386ddd0>, 84, 49) == UUUR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386ed10>, 89, 37) == UUR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386f250>, 3, 87) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386ef50>, 73, 8) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386f350>, 36, 70) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386e950>, 48, 81) == UU\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43874450>, 63, 92) == UU\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43874110>, 6, 58) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43874050>, 71, 63) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43875610>, 18, 60) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876e10>, 69, 59) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf438758d0>, 97, 30) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf438766d0>, 24, 85) == UURR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43881a90>, 49, 91) == UUR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43881610>, 23, 80) == UU\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876f10>, 34, 40) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876fd0>, 41, 89) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf438758d0>, 62, 11) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876ed0>, 70, 83) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43877d90>, 64, 33) == LLR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43875b10>, 99, 76) == UL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876110>, 57, 52) == RL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43875fd0>, 60, 85) == UULR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43875b90>, 19, 65) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386d8d0>, 6, 7) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386fc90>, 24, 44) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386fe50>, 20, 4) == R\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386ef10>, 75, 35) == RL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43880cd0>, 44, 36) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386d790>, 63, 12) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43882150>, 59, 33) == UUR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386dbd0>, 15, 39) == UU\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386ddd0>, 27, 26) == UU\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386d6d0>, 39, 93) == ULR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386fe90>, 97, 88) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386f610>, 79, 9) == UUURL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43874210>, 70, 61) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43875290>, 6, 56) == LLR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43875390>, 28, 24) == ULLL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43881190>, 55, 10) == UURL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43881550>, 84, 54) == UURR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43881410>, 41, 19) == LL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43882bd0>, 34, 32) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43882f50>, 91, 58) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876e10>, 68, 93) == UUUR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876a50>, 55, 69) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43876d90>, 58, 17) == RL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43874a90>, 71, 81) == ULLR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43875f10>, 27, 69) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf438744d0>, 76, 14) == UU\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43877750>, 63, 89) == UULL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386f890>, 43, 33) == UURL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386d9d0>, 24, 22) == R\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386f050>, 23, 37) == ULL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43882c10>, 52, 69) == UL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43882e10>, 24, 2) == ULL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43882510>, 14, 33) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43880c90>, 77, 96) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf43882610>, 2, 98) == LL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386d7d0>, 98, 85) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386e0d0>, 67, 76) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386e250>, 23, 60) == L\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386f350>, 9, 94) == UL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386fd50>, 93, 61) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386d390>, 85, 12) == ULL\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386d550>, 46, 75) == U\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf4386ff90>, 84, 14) == UR\nassert solution.getDirections(<__main__.TreeNode object at 0x7fcf437f2410>, 19, 69) == UR",
  "inefficient_solution": "",
  "is_python": true
}