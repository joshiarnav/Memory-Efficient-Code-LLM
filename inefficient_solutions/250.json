{
  "problem_idx": 250,
  "task_name": "Count Univalue Subtrees",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the number of **uni-value*** *subtrees*.\n\n\nA **uni-value subtree** means all nodes of the subtree have the same value.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0200-0299/0250.Count%20Univalue%20Subtrees/images/unival_e1.jpg)\n\n```\n\n**Input:** root = [5,1,5,5,5,null,5]\n**Output:** 4\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** 0\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [5,5,5,5,5,null,5]\n**Output:** 6\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of the node in the tree will be in the range `[0, 1000]`.\n* `-1000 <= Node.val <= 1000`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countUnivalSubtrees(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root is None:\n                return True\n            l, r = dfs(root.left), dfs(root.right)\n            if not l or not r:\n                return False\n            a = root.val if root.left is None else root.left.val\n            b = root.val if root.right is None else root.right.val\n            if a == b == root.val:\n                nonlocal ans\n                ans += 1\n                return True\n            return False\n\n        ans = 0\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countUnivalSubtrees(self, root):\n        def dfs(root):\n            if root is None:\n                return True\n            l, r = dfs(root.left), dfs(root.right)\n            if not l or not r:\n                return False\n            a = root.val if root.left is None else root.left.val\n            b = root.val if root.right is None else root.right.val\n            if a == b == root.val:\n                nonlocal ans\n                ans += 1\n                return True\n            return False\n\n        ans = 0\n        dfs(root)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate the binary tree\n    # The tree consists of nodes with values from -1000 to 1000\n    node_values = random.choices(range(-1000, 1001), k=random.randint(0, 1000))\n    nodes = [TreeNode(val) for val in node_values]\n    # Connect the nodes in a binary tree structure\n    for i in range(len(nodes) // 2):\n        if 2 * i + 1 < len(nodes):\n            nodes[i].left = nodes[2 * i + 1]\n        if 2 * i + 2 < len(nodes):\n            nodes[i].right = nodes[2 * i + 2]\n    root = nodes[0]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countUnivalSubtrees(root)\n\n    return root, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countUnivalSubtrees(root) == expected_result\n        result_str = \"None\" if root is None else \"TreeNode\"\n        if expected_result is not None:\n            print(f\"assert solution.countUnivalSubtrees({result_str}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.countUnivalSubtrees({result_str}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countUnivalSubtrees(TreeNode) == 393\nassert solution.countUnivalSubtrees(TreeNode) == 116\nassert solution.countUnivalSubtrees(TreeNode) == 254\nassert solution.countUnivalSubtrees(TreeNode) == 416\nassert solution.countUnivalSubtrees(TreeNode) == 228\nassert solution.countUnivalSubtrees(TreeNode) == 415\nassert solution.countUnivalSubtrees(TreeNode) == 117\nassert solution.countUnivalSubtrees(TreeNode) == 394\nassert solution.countUnivalSubtrees(TreeNode) == 254\nassert solution.countUnivalSubtrees(TreeNode) == 428\nassert solution.countUnivalSubtrees(TreeNode) == 404\nassert solution.countUnivalSubtrees(TreeNode) == 325\nassert solution.countUnivalSubtrees(TreeNode) == 7\nassert solution.countUnivalSubtrees(TreeNode) == 129\nassert solution.countUnivalSubtrees(TreeNode) == 332\nassert solution.countUnivalSubtrees(TreeNode) == 356\nassert solution.countUnivalSubtrees(TreeNode) == 291\nassert solution.countUnivalSubtrees(TreeNode) == 70\nassert solution.countUnivalSubtrees(TreeNode) == 205\nassert solution.countUnivalSubtrees(TreeNode) == 203\nassert solution.countUnivalSubtrees(TreeNode) == 422\nassert solution.countUnivalSubtrees(TreeNode) == 442\nassert solution.countUnivalSubtrees(TreeNode) == 337\nassert solution.countUnivalSubtrees(TreeNode) == 84\nassert solution.countUnivalSubtrees(TreeNode) == 210\nassert solution.countUnivalSubtrees(TreeNode) == 214\nassert solution.countUnivalSubtrees(TreeNode) == 439\nassert solution.countUnivalSubtrees(TreeNode) == 174\nassert solution.countUnivalSubtrees(TreeNode) == 177\nassert solution.countUnivalSubtrees(TreeNode) == 208\nassert solution.countUnivalSubtrees(TreeNode) == 340\nassert solution.countUnivalSubtrees(TreeNode) == 455\nassert solution.countUnivalSubtrees(TreeNode) == 291\nassert solution.countUnivalSubtrees(TreeNode) == 48\nassert solution.countUnivalSubtrees(TreeNode) == 391\nassert solution.countUnivalSubtrees(TreeNode) == 230\nassert solution.countUnivalSubtrees(TreeNode) == 36\nassert solution.countUnivalSubtrees(TreeNode) == 84\nassert solution.countUnivalSubtrees(TreeNode) == 191\nassert solution.countUnivalSubtrees(TreeNode) == 176\nassert solution.countUnivalSubtrees(TreeNode) == 373\nassert solution.countUnivalSubtrees(TreeNode) == 226\nassert solution.countUnivalSubtrees(TreeNode) == 412\nassert solution.countUnivalSubtrees(TreeNode) == 170\nassert solution.countUnivalSubtrees(TreeNode) == 247\nassert solution.countUnivalSubtrees(TreeNode) == 153\nassert solution.countUnivalSubtrees(TreeNode) == 123\nassert solution.countUnivalSubtrees(TreeNode) == 393\nassert solution.countUnivalSubtrees(TreeNode) == 37\nassert solution.countUnivalSubtrees(TreeNode) == 334\nassert solution.countUnivalSubtrees(TreeNode) == 55\nassert solution.countUnivalSubtrees(TreeNode) == 464\nassert solution.countUnivalSubtrees(TreeNode) == 291\nassert solution.countUnivalSubtrees(TreeNode) == 172\nassert solution.countUnivalSubtrees(TreeNode) == 488\nassert solution.countUnivalSubtrees(TreeNode) == 169\nassert solution.countUnivalSubtrees(TreeNode) == 358\nassert solution.countUnivalSubtrees(TreeNode) == 310\nassert solution.countUnivalSubtrees(TreeNode) == 129\nassert solution.countUnivalSubtrees(TreeNode) == 205\nassert solution.countUnivalSubtrees(TreeNode) == 451\nassert solution.countUnivalSubtrees(TreeNode) == 160\nassert solution.countUnivalSubtrees(TreeNode) == 270\nassert solution.countUnivalSubtrees(TreeNode) == 180\nassert solution.countUnivalSubtrees(TreeNode) == 195\nassert solution.countUnivalSubtrees(TreeNode) == 270\nassert solution.countUnivalSubtrees(TreeNode) == 212\nassert solution.countUnivalSubtrees(TreeNode) == 86\nassert solution.countUnivalSubtrees(TreeNode) == 352\nassert solution.countUnivalSubtrees(TreeNode) == 111\nassert solution.countUnivalSubtrees(TreeNode) == 289\nassert solution.countUnivalSubtrees(TreeNode) == 16\nassert solution.countUnivalSubtrees(TreeNode) == 476\nassert solution.countUnivalSubtrees(TreeNode) == 69\nassert solution.countUnivalSubtrees(TreeNode) == 167\nassert solution.countUnivalSubtrees(TreeNode) == 202\nassert solution.countUnivalSubtrees(TreeNode) == 363\nassert solution.countUnivalSubtrees(TreeNode) == 251\nassert solution.countUnivalSubtrees(TreeNode) == 279\nassert solution.countUnivalSubtrees(TreeNode) == 11\nassert solution.countUnivalSubtrees(TreeNode) == 485\nassert solution.countUnivalSubtrees(TreeNode) == 211\nassert solution.countUnivalSubtrees(TreeNode) == 14\nassert solution.countUnivalSubtrees(TreeNode) == 354\nassert solution.countUnivalSubtrees(TreeNode) == 478\nassert solution.countUnivalSubtrees(TreeNode) == 47\nassert solution.countUnivalSubtrees(TreeNode) == 308\nassert solution.countUnivalSubtrees(TreeNode) == 105\nassert solution.countUnivalSubtrees(TreeNode) == 205\nassert solution.countUnivalSubtrees(TreeNode) == 76\nassert solution.countUnivalSubtrees(TreeNode) == 214\nassert solution.countUnivalSubtrees(TreeNode) == 383\nassert solution.countUnivalSubtrees(TreeNode) == 75\nassert solution.countUnivalSubtrees(TreeNode) == 314\nassert solution.countUnivalSubtrees(TreeNode) == 76\nassert solution.countUnivalSubtrees(TreeNode) == 165\nassert solution.countUnivalSubtrees(TreeNode) == 106\nassert solution.countUnivalSubtrees(TreeNode) == 314\nassert solution.countUnivalSubtrees(TreeNode) == 426\nassert solution.countUnivalSubtrees(TreeNode) == 438",
  "inefficient_solution": "",
  "is_python": true
}