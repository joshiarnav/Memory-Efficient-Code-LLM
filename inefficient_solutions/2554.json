{
  "problem_idx": 2554,
  "task_name": "Maximum Number of Integers to Choose From a Range I",
  "markdown_description": "\nYou are given an integer array `banned` and two integers `n` and `maxSum`. You are choosing some number of integers following the below rules:\n\n\n* The chosen integers have to be in the range `[1, n]`.\n* Each integer can be chosen **at most once**.\n* The chosen integers should not be in the array `banned`.\n* The sum of the chosen integers should not exceed `maxSum`.\n\n\nReturn *the **maximum** number of integers you can choose following the mentioned rules*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** banned = [1,6,5], n = 5, maxSum = 6\n**Output:** 2\n**Explanation:** You can choose the integers 2 and 4.\n2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1\n**Output:** 0\n**Explanation:** You cannot choose any integer while following the mentioned conditions.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** banned = [11], n = 7, maxSum = 50\n**Output:** 7\n**Explanation:** You can choose the integers 1, 2, 3, 4, 5, 6, and 7.\nThey are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= banned.length <= 104`\n* `1 <= banned[i], n <= 104`\n* `1 <= maxSum <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        ans = s = 0\n        ban = set(banned)\n        for i in range(1, n + 1):\n            if s + i > maxSum:\n                break\n            if i not in ban:\n                ans += 1\n                s += i\n        return ans\n",
  "test_case_generator": "\n\nimport random\n\nclass Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        ans = s = 0\n        ban = set(banned)\n        for i in range(1, n + 1):\n            if s + i > maxSum:\n                break\n            if i not in ban:\n                ans += 1\n                s += i\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random list of banned numbers\n    banned = random.sample(range(1, 10001), random.randint(1, 100))\n\n    # Generate a random integer value for n\n    n = random.randint(1, 10001)\n\n    # Generate a random integer value for maxSum\n    maxSum = random.randint(1, 1000000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxCount(banned, n, maxSum)\n\n    return banned, n, maxSum, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        banned, n, maxSum, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxCount(banned, n, maxSum) == expected_result\n        print(f\"assert solution.maxCount({banned}, {n}, {maxSum}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxCount({banned}, {n}, {maxSum}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxCount([4060, 4474, 9319, 5243, 6712, 791, 9408, 7451, 1268, 840, 7793, 888, 1727, 8518, 3174, 8981, 6474, 5458, 3762, 2429, 1003, 305, 742, 2315, 6070, 6492, 4275, 6208, 2947, 7588, 978, 4387, 8949, 9285, 3997, 7250, 8409, 9273, 6721, 8655, 3302, 2423, 7743, 551, 8092, 6609, 3898, 1884, 94, 1548, 1686, 4809, 5132, 225, 9003, 3211, 4747, 7212, 7019, 3419, 3341, 6570, 9461, 3235, 1127, 6954, 6860], 4311, 798775522) == 4280\nassert solution.maxCount([2028, 4361, 3255, 9048, 8308, 7942, 9244, 9204, 7622, 5450, 7105, 1673, 3446, 4306, 6355, 5936, 6227, 2329, 1507, 8014, 2291, 1626, 4709, 753, 3576, 8662, 6795, 88, 6105], 4261, 490696287) == 4250\nassert solution.maxCount([8606, 9789, 2455, 2165, 7682, 5288, 634, 3120, 2397, 4724, 9240, 1582, 1020, 1251, 4421, 4756, 5356, 6868, 6447, 9132, 3963, 1054, 1826, 4730, 8564, 4990, 9316, 9612, 3906, 7257, 9411, 7713, 509, 4774, 83, 5715, 1931, 425, 8860, 2844, 9395, 5162, 800, 2639, 7383, 9119, 5347, 1854, 6228, 4542, 6133, 3534, 973, 3362, 2814, 6071, 477, 9666, 6118, 1522, 4449, 4754, 791, 7745, 5596, 4723, 7587, 2158, 5009, 6021, 4897, 1038, 9245, 2875, 6561, 2747, 5549, 5319, 6835, 7384, 3705, 726, 9887, 7332, 2119, 6786, 4732, 3633, 7220, 8950, 9772, 103, 5517, 169, 3244], 9806, 893150417) == 9712\nassert solution.maxCount([7140, 1555, 146, 4720, 6119, 1077, 1644, 8863, 8418, 4826, 9595, 8529, 3764, 219, 7187, 6328, 9450], 4822, 194353742) == 4815\nassert solution.maxCount([1011, 9639, 9828, 3300, 6046, 1648, 4095, 4815, 6910, 5865, 9934, 4078, 4532, 8736, 856, 3922, 5124, 2041, 1102, 7432, 3472, 3441, 1915, 7065, 5126, 5888, 6078, 6544, 4984, 1392, 3607, 2458, 8800, 757, 4255, 8819, 5221, 1491, 4280, 3060, 2644, 5362, 6787, 9113, 5250, 5128, 2382, 4747, 4473, 9311, 9619, 9102, 3622, 9506, 5626, 2359, 329, 1394, 5380, 4919, 9335, 6651, 4107, 7554, 4740, 620, 270, 5478, 8297, 4248, 9342, 3347, 2015, 7238, 78, 6365, 7557, 6539, 9398, 4904, 9083, 3981, 3454], 8601, 922973678) == 8533\nassert solution.maxCount([378, 9939, 8543, 6075], 275, 323332932) == 275\nassert solution.maxCount([2089, 1768, 3111, 380, 450, 4084, 3866, 5922, 9410, 6548, 8629, 1193, 5079, 7093, 5425, 8953, 4827, 163, 9272, 4280, 8530, 2532, 4086, 6165, 3960, 2878, 991, 3758, 1423, 7150, 7159, 4970, 39, 977, 2018, 4828, 7703, 6418, 1628, 5761, 5952, 155, 9009, 6411, 1511], 4601, 809033200) == 4578\nassert solution.maxCount([1897, 2494, 7388, 5174, 1591, 3749, 7514, 7495, 8245, 3092, 8991, 4596, 5932, 558, 4531, 7773, 6449, 3002, 7200, 52, 6897, 3737], 8912, 443435445) == 8891\nassert solution.maxCount([7331, 721, 6990, 6657, 2137, 3665, 3021, 3578, 9652, 4380, 40, 574, 198, 5840, 6097, 8287, 9431, 9399, 3464, 3203, 3352, 8624, 2750, 4148, 8263, 1990, 2807, 9155, 3720, 324, 1673, 6003, 6413, 5912, 7109, 2138, 2464, 2055, 1390, 9290, 9862, 1352, 1580, 6982, 3330, 4761, 3993, 7553, 1915, 8526, 6179, 7309, 7478], 1607, 913456342) == 1599\nassert solution.maxCount([6836, 8650, 9475, 5496, 5685, 1941, 1873, 4962, 9632, 3368, 1442, 7851, 7043, 9718, 675], 4139, 832974089) == 4134\nassert solution.maxCount([8665, 1974, 8057, 1749, 5571, 927, 2658, 6369, 9084, 6626, 1834, 1353, 6513, 9701, 476, 6664, 4111, 8019, 5838, 6227, 5156, 826, 2076, 1512, 9689, 201, 8471, 4476, 4151, 2425, 8803, 7960, 5444, 9678, 6311, 4557, 618, 1615, 4704, 9102, 684, 7920, 9806, 6671, 2893, 951, 1736, 5322, 7501, 2605, 9521, 2907, 8453, 836, 7826, 3525, 8290, 6331, 435, 5448, 7743, 2265, 5385, 9828, 8812, 9579, 5725, 8751, 1720, 8757, 8792, 8861, 3808, 6028, 6726, 6047, 6423, 281, 2776, 3685, 5185], 4912, 491448731) == 4878\nassert solution.maxCount([5440, 3206, 7875, 9830, 5900, 3230, 2769, 3026, 6308, 4154, 1267, 3324, 6152, 1552, 5526, 1334, 1236, 9392, 7996, 4352, 8674, 3293, 5920, 8630, 5474, 3117, 103, 2720, 1900, 1434, 4310, 8541, 2977, 1162, 3767, 1441, 3197, 8302, 8308, 6929, 7306, 5531, 8927, 3522, 6948, 7477, 9047, 1791, 7767, 6340, 4132, 4254, 6829, 5502, 8145, 7227, 8797, 4915, 3535, 9338, 7971, 8045, 3366, 1873, 6131, 2957, 1864, 4691, 1071, 4650, 7031, 3620, 5500, 8547, 8658, 6454, 3403, 6522, 6945], 3345, 174330677) == 3321\nassert solution.maxCount([1119, 5885, 5552, 6356, 161, 4485, 1974, 3205, 9398, 9230, 4235, 5595, 3387, 1628, 8766, 4461, 3828, 7461, 4340, 2137, 2364, 352, 9826, 9156, 8009, 2096, 2628, 599, 1251, 4564, 947, 4424], 1499, 658786599) == 1493\nassert solution.maxCount([5332, 6732, 6761, 7568, 4328, 1374, 8365, 1771, 6154, 7240, 3351, 1342, 6219, 19, 4129, 4605, 5857, 2132, 4697, 2153, 8673, 6727, 2688, 1464, 6861, 2999, 8973, 2372, 3188, 6582, 1889, 8457, 9907, 1168, 5984], 4902, 770371130) == 4884\nassert solution.maxCount([4759, 9513, 3976, 1119, 8180, 9995, 1232, 1089, 1485, 1115, 8344, 8696, 8452, 3968, 4791, 6167, 2671, 7231, 1018, 7147, 2717, 4639, 8725, 5335, 25, 6164, 6545, 6488, 4784, 4179, 7692, 1655, 977, 9446, 2788, 5961, 2695, 5849, 4230, 3411, 8812, 9077, 1175, 3663, 7078, 8375, 7717, 2206, 7645, 6765, 2377, 3560, 6344, 3587, 3328, 6759, 4632], 5688, 480967955) == 5657\nassert solution.maxCount([6103, 1428, 1117, 3373, 8878, 4570, 4067, 8879, 9262, 9703, 63, 6066, 4955, 224, 6465, 3346, 2260, 4000, 5009, 888, 8732, 6558, 8051, 3650, 5905, 8948, 9182, 663, 5380, 2156, 5160, 9968, 8260, 9194, 943, 4738, 7084, 558, 2398, 3286, 6409, 9600, 3528, 4027, 436, 6898, 5924, 8133], 7469, 861292977) == 7434\nassert solution.maxCount([3076, 7490, 4157, 6926, 6590, 1845, 7913, 5853, 5298, 9856, 5822, 1653, 1764, 2717, 5778, 3547, 861, 3801, 580, 9498, 2109, 1291, 9059, 6640, 9995, 7693, 518, 7205, 3404, 3309, 466, 5980, 9998, 7765, 299, 9818, 2040, 8642, 8707, 3028, 6045, 4343, 4254, 5153, 6257, 2219, 7058, 6464, 1255, 5606, 568, 5174, 4879, 4586, 2287, 8816, 4036, 7588, 7164, 1211, 8048, 6568, 1359, 208, 3940, 8535, 8267, 8287, 8753, 4836, 828], 8978, 228356539) == 8913\nassert solution.maxCount([3241, 6529, 6432, 6150, 1832, 9838, 769, 6380, 4245, 2225, 7254, 6400, 3762, 9513, 1730, 6212, 4051, 1799, 6364, 9139, 3237, 2912, 6559, 2154, 8, 2635, 8052, 7940, 8498, 8662, 8550, 8471, 6683, 2251, 8482, 3520, 4175, 4931, 7411, 3268, 982, 9096, 8360, 4143], 7277, 247777961) == 7246\nassert solution.maxCount([4952, 7738, 2390, 8362, 6647, 2247, 9124, 4183, 6248, 6253, 3225, 1771, 7799, 4044], 3064, 626610904) == 3061\nassert solution.maxCount([5107, 6618, 2455, 340, 1002, 8298, 1389, 2469, 9823, 479, 2392, 1984, 8499, 1817, 4343, 9129, 2716, 7496, 4467, 6691, 2834, 8126, 1432, 1327, 6645, 6502, 6874, 9264, 6476, 7354, 304, 6357, 9914, 2381, 4898, 4985, 2096, 2715, 7105, 2664, 6943, 5273, 1411, 5057, 7532, 5220, 2955, 6371, 59, 9257, 9173, 9380, 5251, 5130, 9441, 169, 2395], 182, 372660895) == 180\nassert solution.maxCount([6823, 9667, 7987, 7371, 9543, 2819, 4739, 5031, 3487, 667, 2116, 201, 4980], 6360, 131380754) == 6352\nassert solution.maxCount([4232, 9616, 4769, 5370, 1179, 9940, 3111, 9844, 3177, 3754, 1969, 9586], 3047, 541840590) == 3045\nassert solution.maxCount([5305, 9436, 1822, 385, 7563, 7967, 9365, 5602, 8632, 9182, 5081, 7604, 3241, 3056, 3078, 7408, 3744, 5452, 2378, 9009, 8945, 2262, 8448, 3567, 8436, 2586, 7419, 5957, 4762, 535, 3700, 927, 6491, 1443, 7545, 2673, 5044, 1759, 3780, 6901, 6333, 5628, 6964, 6819, 8402, 9872, 5613, 2950, 5394, 8612, 6398, 1486, 5665, 2438, 5272, 4709, 2202, 942, 3220, 7094, 359, 8147, 4647, 9711, 1276, 8050, 9923, 3301, 6143, 2486, 7611, 5146, 3663, 2260, 9184, 3519, 5177, 5529, 3075, 5770, 1736, 5981, 186, 4482, 9469, 4368, 5329, 1336, 8741, 7426, 6481, 632, 7444, 9379, 3123, 1847, 7425, 6697], 1449, 810092417) == 1439\nassert solution.maxCount([7515, 1195, 7283, 9302, 2775, 2509, 9006, 1969, 5500, 3118, 8975, 4978, 7377, 4289, 9722, 9802, 4943, 9205, 910, 2153, 9846, 6071, 7023, 3370, 1288, 5622, 3765, 484, 9894, 5916, 9438, 1925, 3944, 2436], 9460, 525081873) == 9430\nassert solution.maxCount([6879, 6864, 2378, 7586, 6947, 4853, 3949, 3016, 8072, 1159, 9392, 8948, 4169, 9776, 251, 1513, 629, 319, 4328, 48, 9904, 919, 6442, 8006, 8031, 7153, 667, 5314, 3323, 608, 6878, 4623, 21, 5901, 1352, 3986, 3828, 9775, 4887, 1612, 5732, 8027, 5340, 9110, 9419, 3868, 5382, 9539, 9846, 5788, 6118, 2772, 6232, 5885, 518, 4922, 6633, 2083, 2290, 2810, 5758, 9991, 9271, 1278, 1239, 3144, 4948, 8819, 2236, 1523, 696, 4635, 9501, 8471, 8993, 1867, 4621, 3407, 60, 7360, 725, 7827, 6251, 4188], 5691, 918007268) == 5644\nassert solution.maxCount([152, 580, 9915, 2186, 143, 6178, 5700, 2762, 9148, 3656, 8919, 7311, 5191, 3756, 2260, 6569, 2875], 1631, 52315670) == 1628\nassert solution.maxCount([8081, 8625, 6340, 5239, 6741, 8143, 7564, 8077, 8493, 1220, 9907, 5612, 5728, 586, 4852, 375, 3518, 6118, 3498, 6999, 7241, 6384, 7378, 821, 8641, 7067, 9995, 9376, 9408, 1071, 1247, 7481, 9125, 1827, 2449, 1184, 7877, 4920, 8591, 7602, 2017, 554, 5075, 2418, 8703, 1993, 4556, 9187, 7587, 2979, 2480, 3979, 392, 6532, 6681, 452, 9866, 2439, 1448, 10000, 1447, 1678, 8511, 6835, 8888, 6456, 8892, 3677, 7357, 2814, 7596, 5132, 2939, 5723, 308, 2670, 4705, 4502, 650, 3097, 3768, 6485, 8617, 8869, 1966, 3586, 286, 7592], 3763, 594057005) == 3730\nassert solution.maxCount([6948, 3110, 2416, 9464, 8037, 2082, 5910, 6199, 6863, 1347, 1651, 8870, 7241, 8858, 7936, 3910, 7674, 7865, 5465, 6267, 2947, 4065, 632, 4832, 1799, 553, 8217, 620, 5538], 996, 343616696) == 993\nassert solution.maxCount([8089, 4614, 3269, 3914, 9767, 2255, 1878, 8955, 1821, 7393, 8788, 2018, 6604, 5905, 6399, 6253, 8865, 5965, 3263, 649, 4418, 6512, 8431, 3389, 556, 7215, 4036], 9028, 987038336) == 9002\nassert solution.maxCount([3596, 1821, 3583, 7435, 4558, 5170, 7502, 7651, 6765, 4713, 9791, 4743, 8005, 618, 170, 2018, 2462, 921, 2993, 1506, 2786, 1984, 1765, 6171, 247, 6682, 5242, 11, 4330, 8638, 1882, 6852, 4837, 3561, 3089, 7543, 8521, 4204, 3843, 3329, 1453, 2007, 8779, 5496, 6958, 5738, 3299, 2967, 8274, 5889, 5680, 2127, 3954, 7878, 963, 4895], 108, 467261687) == 107\nassert solution.maxCount([3217, 1358, 5098, 305, 6846, 4380, 1439, 7403, 2645, 8851, 6712, 9370, 6258, 1911, 1907, 7772, 7266, 9315, 2820, 3350, 8883, 8753, 5832, 9726, 4827, 6868, 1740, 8873, 9861, 5683, 5166, 9239, 8036, 8241, 3798, 2343, 2351, 1023, 182, 7459, 1721, 2238], 2355, 950608254) == 2343\nassert solution.maxCount([9528, 3388, 3999, 8252, 3263, 1495, 8441, 6960, 6441, 43, 8347, 8237, 5269, 790, 2531, 1508, 6175, 3580, 9491, 7419, 7972, 5133, 6094, 3174, 3728, 5415, 3686, 613, 9148, 1166, 7360, 2037, 9676, 2281, 3640, 1380, 5387, 7453, 3208, 5174, 8583, 7425, 5777, 9977, 5061, 3215, 7185, 7430, 6168, 9736, 4330, 3837, 9580, 4133, 4367, 2989, 3637, 9262, 4856, 760, 9958, 1277, 1994, 3812, 3613, 9926, 1139, 5113, 998, 5286, 3844, 317, 3324, 9920, 5965, 9294, 3870, 8174, 2473, 556, 9746, 5932, 5926, 1973, 9221, 1261, 7275, 7203, 785, 3077, 7279, 2937, 7277, 5194, 3011, 848, 4263, 2756, 33], 3510, 846502715) == 3476\nassert solution.maxCount([9582, 6211, 9772, 5193, 2847, 4204, 8504, 8651, 871, 7908, 5906, 8267, 7800, 3219, 4632, 2674, 42, 1070, 1051, 1391, 9392, 8940, 6705, 9905, 9356, 5772, 6092, 5711, 4932, 7825], 4604, 284015634) == 4595\nassert solution.maxCount([8337, 7926, 8714, 5159, 9707, 7602, 7251, 6054, 1282, 4552, 2545, 6622, 3196, 9749, 5692, 9930, 6575, 117, 1072, 2015, 8199, 6538, 7485, 5292, 1015, 4359, 7707, 9076, 7225, 9298, 4884, 9927, 6375, 4429, 4897, 6298, 4570, 2562, 9433, 887, 3329, 3503, 2092, 8945, 4040, 1080, 4867, 9257, 7196, 254, 8489, 3399, 4436, 8598, 538, 8491], 3291, 461953664) == 3278\nassert solution.maxCount([7881, 2551, 8158, 2339, 4195, 3793, 4049, 5511, 6484, 9637, 5842, 7673, 2559, 2592, 4771, 7444, 7106, 1467, 3123, 8316, 3925, 9289, 5769, 5955, 6136, 6699, 8000, 8904, 759, 5295, 1607, 390, 9219, 575, 4972, 9425, 6797, 4426, 1161, 3803, 1446, 5112, 8636, 3587, 9365, 391, 3952, 454, 1950, 2713, 7651, 6061], 8047, 839986779) == 8004\nassert solution.maxCount([4924, 4148, 9285, 8868, 7495, 6019, 1104, 8092, 9301, 1282, 45, 9610, 319, 8912, 8386, 1498, 5826, 6239, 9404, 5900, 5158, 6487, 6902, 1759, 7364, 9568, 9475, 1513, 9617, 393, 7981, 5655, 3995, 8424, 2485, 4083, 1459], 161, 119269327) == 160\nassert solution.maxCount([8115, 1688, 8773, 4907, 2276, 3263, 3116, 4455, 8444, 1029, 9564, 2469, 4047, 8069, 9704, 1090, 7710, 6013, 7207, 2579, 4697, 8960, 4830, 4541, 7764, 8510, 7131, 1674, 871, 9841, 273, 4663, 7807, 5083, 7247, 1787, 4561, 1031, 4449, 7209, 4313, 2155, 7495, 4701, 6134, 2280, 3181, 8319, 2169, 5501, 2824, 197, 2533, 7791, 2041, 7384, 9237, 5514, 4108, 9308, 1921, 2999, 1785, 1895, 3686, 7735, 8290, 8746, 185, 5373, 3222, 8587, 2994, 4311, 1807, 3364, 9350, 1706, 607, 8326, 2334, 1530, 9093, 8141, 5466, 9747, 6925, 609], 4749, 499464121) == 4702\nassert solution.maxCount([618, 7247, 5017, 9220, 3844, 6093, 1706, 7067, 9120, 255, 6272, 7384, 603, 3193, 366, 9741, 6580], 1974, 883210805) == 1969\nassert solution.maxCount([4214, 490, 3223, 1079, 1249, 3022, 7728, 4870, 3479, 570, 7692, 3771, 2033, 7180, 3257, 7348, 4387], 7961, 140077331) == 7944\nassert solution.maxCount([403, 5487, 7328, 8837, 1799, 5455, 9453, 3205, 8284, 8373, 6985, 988, 6322, 2253, 8248, 5571, 9796, 5998, 1927, 4481, 5387, 1648, 7258, 7654, 2883, 6278, 5936, 8517, 8856, 3428, 5317, 6737, 9402, 1180, 7390, 9497, 6085, 4700, 1428, 5993, 3806, 3670, 9633, 5586, 1570, 6830, 15, 6047, 5419, 1503, 6798, 1156], 2716, 571710349) == 2704\nassert solution.maxCount([466, 8429, 7399, 7189, 8215, 6699, 7346, 2469, 7897, 5380, 6297, 5929, 7154, 2338, 6599, 4954, 8166, 7704, 346, 272, 8183, 5890, 4192, 5132, 8236, 9861, 628, 4539, 658, 7969, 667, 352, 8345, 85, 1898, 3685, 2693, 6427, 3163, 6010, 7239, 2328, 7504, 7446, 4025, 3957, 1527, 2051, 7393, 1311, 5400, 9, 2526, 3973, 5247, 9035, 7054, 5342, 7761, 7583, 8823, 7402, 2653, 9384, 1548, 6209, 4155, 74, 780, 831, 2241, 483, 3218, 9753, 3070, 4319], 8257, 607198740) == 8188\nassert solution.maxCount([9611, 4522, 2226, 4919, 7989, 2383, 9441, 8241, 6533, 6311, 5303, 6836, 4090, 4325, 2535, 5684, 2759, 8607, 6106, 1770, 6457, 7693, 6642, 7039, 5660, 1634, 9312, 6658, 107, 2566, 5057, 7558, 5225, 5849, 2686, 4316, 6289, 5523, 462, 9048, 6070, 2994, 150, 8572, 9352, 3427, 6800, 9034, 8748, 5537, 1368, 8254, 4237, 9284, 5780, 3379, 8954, 9177, 9072, 1569, 2847, 5598, 5531, 1238, 2188, 7427, 275, 4909, 8953], 1710, 367933817) == 1702\nassert solution.maxCount([3355, 4779, 6638, 7052, 5425, 1581, 6877, 4189, 3015, 9378, 2219, 5578, 965, 7668, 9182, 3273, 3223, 2749, 7230, 6152, 6169, 7078, 5918, 3816, 7428, 7470, 1182, 1569, 7784, 1883, 5073, 9537, 5890, 9074, 8572], 5126, 959292784) == 5111\nassert solution.maxCount([326, 81, 7354, 7218, 2004, 1735, 2800, 9567, 1007, 1247, 4534, 2231, 2237, 9277, 531, 9636, 3539, 4606, 8125, 288, 5018, 2519, 8326, 9797, 4539, 7956, 1806, 3234, 6354, 6572, 7969, 8737, 8190, 8225, 9099, 5965, 3414, 6793, 4967, 7784, 482, 7781, 5106, 1991, 4365, 5885, 5019], 983, 56444100) == 978\nassert solution.maxCount([2044, 7277, 9333, 2024, 4279, 3473, 1399, 6933, 5527, 6621, 1171, 9713, 3972, 2962, 146, 5836, 4372, 967, 5470, 5324, 824, 6282, 519, 3484, 525, 1403, 9920, 5072, 1262, 7253, 7154, 3827, 3493, 2613, 2228, 9265, 743], 1518, 609785168) == 1508\nassert solution.maxCount([6269], 8415, 598251100) == 8414\nassert solution.maxCount([9226, 2180, 5839, 6851, 7742, 1627, 9119, 1730, 290, 6213, 6387, 1939, 8273, 9198, 1428, 7310, 2523, 9282, 3123, 5829, 791, 7884, 1301, 2013, 9436, 3981], 4483, 155404727) == 4471\nassert solution.maxCount([8078, 4479, 6212, 7908, 8460, 4738, 6457, 9779, 3031, 6928, 6650, 6769, 4727, 4935, 7849, 5927, 4511, 3934, 6045, 2716, 8373, 4265, 4924, 1800, 5044, 9040, 7772, 3932, 7054, 9600, 7189, 9531, 9125, 1347, 8288, 2297, 7711, 2919, 9607, 9160, 7499, 7506, 2591, 3609, 8606, 3811, 4035, 851, 2851, 6747, 150, 3705, 1248, 2893, 4558, 278, 9630, 9114, 5773, 8214, 6914, 3259, 9201, 6661, 8712, 544, 3667, 1949, 4039, 998, 6216, 4090, 2071, 4243, 2672, 8999, 9982, 5792, 1895, 5576, 8430, 8363, 9669, 156, 4783, 9992, 7575, 3221, 7680, 5391, 1187, 8653, 1366], 1924, 164616077) == 1912\nassert solution.maxCount([7265, 5250, 2162, 2859, 8957, 6481, 5185, 948, 75, 4270, 1724, 268, 7206, 1061, 9954, 1270, 186, 7918, 1998, 2724, 7670, 6620, 5243, 3046, 2056, 4613, 3239, 6983, 8673, 5744, 4643, 6309, 5808, 5563, 6345, 289, 6593, 5177, 4889, 4485, 8739, 8626, 3691, 7480, 9037, 3122, 9803, 7850, 1852, 9662, 3557, 7308, 1385, 9077, 2324, 3314, 2597, 5672, 6528, 7946, 5467, 8526, 6245, 1165, 7189, 8594, 6490, 1149, 4680, 7087, 2905, 7874, 6431, 6598, 8833, 4540, 2539, 14, 9056, 2625, 9277, 2184, 9956, 21, 276, 74, 7553, 8110, 8880, 4659, 2753, 8186, 5122, 6352], 3494, 181159713) == 3462\nassert solution.maxCount([8357, 1954, 8090, 3118, 3926, 6964, 1397, 6171, 576, 5548, 890], 8161, 263255706) == 8151\nassert solution.maxCount([8376, 2748, 5769, 5634, 8558, 5649, 8259, 2178, 4059, 7664, 1192, 9843, 7124], 4880, 752243021) == 4876\nassert solution.maxCount([9265, 7156, 8132, 8599, 283, 9829, 7152, 1232, 8326, 5401, 2419, 512, 9900, 5748, 3277, 8500, 4855, 71, 859, 596, 4184, 7425, 1137, 7181, 9306, 4431, 9360, 8433, 9984, 1556, 4537, 3337, 1456, 112, 8712, 9598, 8817, 7503, 6445, 6277, 6809, 978, 9281, 3343, 6173, 2150, 254, 9214, 5239, 2392, 7371, 8778, 7206, 6883, 1824, 1963, 2040, 4752, 5348, 4406, 4843, 3838, 5780, 4395, 3884, 2962, 250, 4768, 1347, 918, 8951, 2190, 3544, 5483, 9379, 5065, 8475, 9599, 6497, 2296, 1329, 4444, 9414, 9400, 7679, 9274, 7203, 5860], 7198, 685532033) == 7140\nassert solution.maxCount([91, 5186, 7411, 8241, 6798, 6484, 3433, 2518, 395, 7826, 226, 5212, 2083, 970, 6449, 465, 3010, 6817, 3535, 8428, 4641, 8308, 9479, 1688, 4564, 7175, 8051, 1707, 4522, 8012, 625, 7315, 7040, 3683, 2623, 7208, 6332, 6213, 4752, 5618, 3083, 3394, 4168, 5059, 4329, 8837, 6266, 3895, 5874, 7890, 4437, 9816, 5714, 7100, 4895, 4899, 6557, 1717, 9388], 9930, 83001389) == 9871\nassert solution.maxCount([1804, 614, 7075, 3603, 7303, 5351, 7885, 4139, 1919, 6603, 5711, 9867, 4692, 8791, 3415, 9713, 7960, 5685, 5386, 186, 3344, 9988], 116, 326576308) == 116\nassert solution.maxCount([210, 4034, 7021, 9932, 2784, 7252, 8675, 3332, 7799, 7944, 3770, 3699, 5265, 3930], 247, 170232022) == 246\nassert solution.maxCount([4399, 1704, 3531, 8645, 4452, 7148, 3884, 9555, 7365, 9693, 945, 6279, 3134, 7271, 2341, 495, 3835, 1853, 6936, 4667, 6542, 8762, 8315, 9633, 7736, 2320, 7745, 1623, 4401, 8307, 4265, 2201, 9209, 9726, 2700, 143, 4773, 1633, 6361, 5211, 2745, 7996, 3187, 189, 381, 313, 1897, 6613, 9461, 519, 1667, 278, 3406, 9189, 8224, 608, 3251, 7563, 2690, 4524, 4888, 3744, 9489, 3168, 9739, 958, 1010, 2951, 1807, 1444, 5108, 7391, 9734, 5237, 9070, 2454, 1884, 8156, 3149, 8570, 8862, 3609, 2733, 7293, 7033, 4391, 5396, 266, 9323, 1425, 6170, 2524, 520, 559, 4971, 85, 7600], 1869, 347965935) == 1846\nassert solution.maxCount([3875, 5711, 690, 6176, 790, 3304, 6623, 6178, 8198, 9068, 4355, 3459, 5408, 2600, 238, 3579, 2102, 268, 2699, 2577, 8476, 7718, 9436, 1922, 6889, 675, 5755, 5974, 4808, 9197, 9287, 3929, 9944, 2084, 6410, 7923, 3844, 2812, 8792, 8571, 4531, 2892, 3905, 2647, 4018, 1242, 2304, 1322, 9914, 688, 7673, 4895, 5179, 3575, 4689, 7642, 7763, 8174, 5938, 4017, 1591, 5853, 3767, 3634, 10000, 2691, 7082, 3245, 5119, 4660, 9779, 1836, 4856, 2532, 1043, 2309, 3808, 8789, 5439, 7838, 7672, 86], 9715, 119298559) == 9637\nassert solution.maxCount([5923, 8791, 1674, 6371, 6758, 6577, 8180, 4742, 8837, 645, 7975, 2258, 7775, 3626, 8116, 9569, 9641, 3308, 3340, 7436, 8759, 2816, 1626, 9769, 5031, 4384, 5699, 1684, 9732, 5997, 4166, 7021, 3858, 9657, 8541, 2992, 1602, 8410, 3053, 1434, 9911, 803, 6862, 7366, 4385, 5284, 7937, 9714, 1344, 8401, 1506, 6263, 5979, 9246, 9333, 3449, 2329, 4903, 5686, 6726, 3492, 9964, 1041, 2303, 8610, 9799, 294, 7083, 7921, 9564, 396, 1107, 6972, 9017, 5999, 8599, 8422, 7771, 4231, 4942, 3155, 8735, 8329, 9984, 6060, 3296, 7157, 2585, 1397, 8601], 5007, 344817261) == 4971\nassert solution.maxCount([3920, 1730, 3765, 4551, 8064, 9434, 5410, 8347, 1931], 4557, 87322231) == 4552\nassert solution.maxCount([1427, 8365, 3175, 6413, 8807, 8752, 6790, 1806, 5885, 9737, 945, 9029, 2490, 621, 8387, 5946, 7427, 4598, 8890, 4341, 7400, 1405, 7966, 4193, 9193, 6526, 8735, 2814, 8456, 1212, 500, 5486, 121, 8213, 7216, 7148, 7339, 3961, 3129, 6085, 6175, 3348, 8179, 5517, 8240, 1635, 529, 4829, 9236, 9886, 2720, 3206, 1572, 1254, 8972, 3364, 5796, 4040, 5207, 6506, 7180, 2437, 6749, 3066, 4329, 7486, 4445, 7506, 8123, 6695, 1078, 1376, 4414, 8124, 3895, 8002, 1823, 2082, 9249, 9936, 9100, 8569, 7413, 6825, 7652, 8475, 4057, 9215, 4289, 7719, 9568, 8953], 6284, 452741062) == 6238\nassert solution.maxCount([7675, 3007, 6956, 6465, 5352, 9109, 191, 7998, 2871, 2528, 3991, 5516, 4103, 9009, 9784, 6858, 3220, 8008, 7536, 5643, 2836, 2810, 8358, 1370, 17, 4100, 7432, 2611, 6068, 8243, 2142, 7500, 1232, 2137, 1943, 706, 3352, 6016, 619, 8916, 358, 8835, 5221, 6382, 6306, 3178, 8806, 7217, 6827, 3293, 5040, 8675, 3382, 1899, 7028, 7548, 7510, 9096, 8834, 8287, 4652, 5330, 9611, 7980, 1746, 8897, 3532], 3423, 138832142) == 3400\nassert solution.maxCount([8893, 7464, 784, 3367, 1834, 584, 8025, 1819, 5284, 4661, 4324, 4026, 372, 6614, 4676, 4482, 3221, 5691, 5567, 5154, 2552, 3189, 6905, 4641, 7910, 7146, 2175, 201, 6493, 5811, 9216, 8556, 7610, 945, 2591, 1802, 5398, 9883, 1837, 8361, 2125, 1506, 2335, 4766, 8616, 2222, 3079, 9303, 8838, 7178, 504, 1311, 7196, 2161, 4441, 5486, 399, 6313, 9970, 6020, 1563, 2970, 5278, 6623, 7220, 4769, 1403, 7449, 495, 566, 7895, 70, 5286, 726, 5221, 1898, 988, 1235, 3239, 3985, 9704, 7911, 7227], 6193, 989316748) == 6137\nassert solution.maxCount([1182, 4223, 1515, 8305, 451, 9227, 1462, 1925, 195, 3673, 2189, 8542, 8415, 7827, 5774], 7545, 23526002) == 6852\nassert solution.maxCount([3042, 4893, 3753, 4307, 3210, 3697, 3595, 522, 6602, 8827, 5914, 174, 4709, 5331, 1660, 2703, 4606, 7287, 6144, 2759, 7257, 5360, 3104, 2665, 4870, 8332, 7583, 6679, 4547, 545, 6989], 3297, 132745314) == 3287\nassert solution.maxCount([2685, 4973, 1166, 2600, 4349, 4345, 464, 5402, 1687, 2618, 6046, 1175, 8832, 7181, 2629, 4717, 8423, 4137, 5522, 6413, 1360, 4078, 5625, 4276, 6163, 7243, 8825, 5191, 739, 3350, 5183, 5029, 3392, 2533, 4494, 6729, 8613, 4576, 94, 8837, 4918, 7605, 984, 9706, 8763, 7675, 7460, 4317, 5405, 1895, 3998, 8630, 3352, 1581, 934, 1589, 536, 8422, 4768, 3800, 6441, 4491, 3913, 989, 4506, 4239, 7358, 9446, 3541, 1950, 2123, 2076, 7546], 1415, 884929635) == 1405\nassert solution.maxCount([8323, 5455, 3371, 767, 9780, 6545, 7990, 9554, 5680, 9111, 2859, 1492, 478, 1381, 434, 1559, 4111, 1142, 8133, 263, 5385, 1548, 2715, 8968, 3191, 7470, 9102, 514, 1075, 3099, 5495, 3602, 4788, 9509, 8718, 3419, 3851, 9237, 7035, 3663, 4374, 4726, 5498, 335, 3737, 9730, 1435, 2527, 7694, 7869, 7419, 2115, 1640, 7639, 2412, 5239, 6499, 35, 6113, 8612, 510, 1873, 831, 7508, 8826, 3777, 8014, 2339, 1307, 5585, 5954, 4050, 217], 974, 705935791) == 964\nassert solution.maxCount([1569, 8277, 4115, 725, 2593, 4873, 2913, 140, 5825, 7961, 5965, 7258, 7071, 5047, 4617, 6117, 1486, 680, 3075, 6950, 4805, 2170, 9309, 2333, 9828, 5403, 949, 5733, 8510, 400, 2688, 9066, 1338, 1918, 7521, 1394, 1718, 5769, 6161, 2520, 6779, 4328, 8740, 4302, 4644, 9756, 2079, 2794, 5743, 6655, 672, 7811, 8644, 2130], 3321, 568494614) == 3299\nassert solution.maxCount([708, 7608, 627, 2184, 5833, 6558, 9030, 8003, 6121, 2479, 6233, 3252, 4297, 1513, 3032, 8274, 7580, 6719, 2217, 8432, 4957, 5008, 2961, 7348, 5382, 5139, 3801, 2585, 2950, 450, 5689, 3862, 8623, 1374, 2713, 9319, 2295, 5133, 7082, 5281, 9957, 5998, 8001, 7655, 6879, 6984, 5243, 6072, 9115, 7050, 5844, 4209, 8181, 4083, 8852, 3140, 5305, 322, 4144, 8392, 483, 9924, 5424, 8058, 7190, 3322, 4949, 3313, 571, 5041, 9105, 7538, 8457, 3424, 5378, 8645, 768], 7572, 207403537) == 7515\nassert solution.maxCount([374, 2425, 4406, 5350, 471, 7427, 6108, 9646, 9111, 2934, 5071, 6467, 4656, 7035, 9706, 8869, 3253, 2144, 1051, 9713, 7802, 8443, 6554, 50, 1263, 6499, 6330, 268, 296, 9274, 7185, 9097, 7082, 3070, 80, 5416, 6516, 2403, 8201, 3841, 7165, 2779, 7180, 678, 8122, 8532, 8269, 6686, 1211, 7706, 1178, 5960, 1744, 9631, 4113, 6620, 9283, 3734, 7809, 6169, 1203, 1727], 6610, 12516322) == 4987\nassert solution.maxCount([4962, 4218, 859, 7889, 5151, 6500, 4487, 6816, 7534, 7880, 7997, 8672, 1899, 1790, 4512, 897, 4256, 9755, 7127, 2761, 9012, 4622, 777, 5410, 9295, 6640, 4977, 8458], 2931, 80582728) == 2925\nassert solution.maxCount([972, 6709, 8132, 2142], 2797, 210541225) == 2795\nassert solution.maxCount([3329, 1427, 3459, 1936, 2490, 6003, 3426, 3295, 8624, 2403, 3526, 6262, 2506, 8547, 9096, 8301, 990, 5814, 2187, 5508, 216, 7434, 553, 4368, 1878, 7200, 6201, 3562, 685, 7798, 388, 1092, 9723, 8670, 4787, 2507, 6116, 9148, 3403, 9762, 5715, 8680, 9223, 4919, 8597, 967, 3008, 4801, 1209, 1900, 7359, 4191, 3250, 3648, 9777, 5135, 876, 107, 5938, 6381, 2274, 3131, 5140, 9410, 4352, 9268, 6890, 2491, 1242, 8580, 2681, 3492, 2132, 8791, 5274, 9308], 5208, 544097578) == 5164\nassert solution.maxCount([1433, 2707, 5232, 9360, 5839, 165, 1384, 7720, 4543, 4877, 2236, 7718, 8634, 4146, 7937, 7372, 5939, 8060, 3017, 5664, 2246, 3248, 2082, 8867, 2235, 4135, 9182, 1901, 7701, 5448, 1319, 8279, 1699, 5983, 5101, 7311, 3882, 7883, 8098, 6803, 8680, 7822, 4422, 9828, 8581, 1430, 4633, 4823, 7033, 8878, 810, 7697, 1076, 867, 9689, 5481, 2574, 7732, 3079, 4966, 8737, 4296, 9535, 3998, 6033, 8477, 7837, 3673, 2394, 470, 7240, 9735, 6809, 2797, 9728, 681, 1719, 1298, 8992, 8215, 8249, 8419, 7510, 3586, 3099, 11, 4452, 8516, 9948, 1688, 4319, 8189, 8152, 8653, 400], 4957, 952826315) == 4914\nassert solution.maxCount([1132, 266, 3531, 6790, 6025, 1008, 5967, 5355, 6364, 3283, 157, 4047, 8670, 2232, 4611, 1996, 3413, 1551, 9039, 1305, 4551, 9961, 9481, 1155, 2438, 4757, 9212, 172, 1762, 391, 4179, 9509, 2783, 5010, 7437, 555, 6542, 9506, 2947, 7736, 418, 7554, 3031, 4572, 5571, 8821, 9985, 8974, 112, 8641, 2034, 3096, 6720, 8353, 2753, 1135, 8290, 664, 4568, 4290, 7477, 1146, 8311, 4402, 6571, 242, 8137, 2016, 6043, 700, 465, 7868, 7514, 7952, 1395, 9347, 1182, 126, 9614, 9868, 8051], 2715, 138839014) == 2688\nassert solution.maxCount([1881, 5263, 3776, 5574, 3319, 2102, 4287, 232, 3116, 8109, 4648, 1136, 6233, 2207, 1517, 1607, 6120, 4936, 6927, 7742, 3144, 1123, 6521, 2376, 3612, 7285, 6168, 4775, 4828, 7250, 8524], 4350, 801175516) == 4335\nassert solution.maxCount([5117, 3706, 9839, 7187, 7024, 8568, 853, 4841, 2643, 4267, 1129, 7001, 5462, 4634, 87, 7966, 7076, 4622, 9038, 3551, 3379, 445, 4883, 6204, 273, 4873, 2653, 2594, 1933, 7344, 3942, 1208, 9110, 3123, 4852, 4655, 139, 6669, 2171, 1748, 8972, 8056, 9259, 8776, 36, 6254, 3140, 8525, 7975, 2368, 9618, 5145, 8365, 7200, 9385, 9544, 3898, 1288, 8350, 7625, 5363, 4672, 8093, 3307, 400, 9303, 9427, 9048, 6455, 4276, 1099, 305, 3185, 5884, 2120, 9599, 5385, 9634, 1807, 2931, 2412, 9221, 634, 7067, 8494, 7569, 8068, 1760, 4476, 1803, 4508, 1140, 119, 5756], 4406, 362983530) == 4367\nassert solution.maxCount([9919, 3082, 2679, 7348, 7162, 8261, 5516, 8530, 3689, 3680, 478, 6210, 9386, 690, 4917, 5579, 347, 232, 6468, 2489, 9512, 8793, 5137, 7742, 8755, 2593, 5154, 3441, 9231, 1494, 934], 4788, 776398512) == 4775\nassert solution.maxCount([1081, 8492, 5902, 9100, 8493, 836, 8981, 6316, 8596, 1469, 6106, 6440, 611, 8171, 1203, 6345, 3850, 3233, 606, 3363, 647, 5614, 344, 314, 679, 9382, 8199, 4526, 5987, 1529, 5893, 4064, 9925, 5883, 8165, 8422, 4451, 3293, 4684, 1185, 1618, 4186, 8024, 7930, 8026, 2865, 7496, 8817, 6098, 6685, 4111, 4830, 9563, 5196, 2390, 9512, 4801, 7784, 6378, 8756, 508, 9162, 9300, 1817, 7846, 8187, 2724, 100, 5864, 2157, 4142, 3469, 1221, 6879, 7065, 6912], 2711, 137735235) == 2692\nassert solution.maxCount([1338, 6441, 622, 9686, 9420, 5631, 3375, 3285], 3787, 929034305) == 3783\nassert solution.maxCount([9750, 8741, 2872, 4869, 4000, 6122, 3280, 3173, 4425, 8956, 6713, 5093, 2974, 5516, 670, 3897, 8246, 5273, 9825, 1710, 2051, 6466, 5030, 9795, 5484, 5435, 4305, 3668, 1225, 6188, 606, 6653, 144, 4650, 3902, 8621, 9800, 882, 4497, 5165, 5731, 9726, 4790, 7674, 9152, 5145, 9737, 9092, 7227, 4575, 4478, 8971, 2662, 6781, 2191, 77, 1420, 250, 8492, 8042, 4899, 2491, 7898, 1202, 5725, 7081, 4440, 2855, 5181, 2567, 540, 7931, 9641, 5612, 3892, 64, 6433, 837, 1547, 9036, 1307, 3847, 91, 477, 18, 1636, 1778, 3587, 9145, 8415, 5278, 4707, 3740, 4795, 9362, 3553], 4492, 134237607) == 4449\nassert solution.maxCount([3792, 4328, 5991, 5643, 580, 5176, 7323, 4618, 3068, 1071, 3022, 3480, 6172], 5478, 824007183) == 5469\nassert solution.maxCount([7142, 605, 3956, 2685, 9059, 3086, 2701, 2361, 673, 3215, 7699, 9779, 4546, 2304, 2961, 2356, 1382, 7785, 7842, 2284, 2567, 7684, 7865, 2387, 1909, 7003, 1994, 3534, 510, 6241, 8595, 2786, 4572, 6746, 484, 238, 6944, 6219, 8497, 4437], 778, 632698137) == 773\nassert solution.maxCount([2726, 3600, 4862, 984, 3501, 6225, 4454, 2976, 2703, 7763, 983, 3997, 4515, 6345, 8948, 3130, 5935, 1331, 5760, 1978, 9099, 2099, 4684, 8302, 482, 107, 8478, 2954, 4327, 3190, 2358, 4643, 584, 2786, 255, 2948, 6067, 4341, 7161, 728, 4925, 6348, 8289, 6112, 540, 9770, 5036, 1973, 7697, 2474, 9841, 7219, 1703, 8715, 980, 4417, 1585, 5887, 2123, 9847, 3963, 5959, 5740, 9564, 6972], 3753, 241332696) == 3725\nassert solution.maxCount([9624, 4099, 3714, 4231, 1500, 1030, 1665, 8387, 1590, 4895, 7849, 3241, 2081, 1886, 9776, 2353, 9905, 9479, 9275, 6512, 9287, 4169, 7850, 8789, 7087, 8999, 2251, 3146, 5785, 1545, 6804, 1123, 6507, 3740, 8383, 9029, 5568, 2658, 8450, 9598, 2389, 1063, 6402, 3814, 1319, 6658, 1561, 4912, 8912, 2433, 5039, 5037, 9308, 4609, 8188, 5422], 8287, 149291584) == 8246\nassert solution.maxCount([1639, 1931, 359, 8433, 533, 6481, 9096, 7331, 5177, 7213, 925, 6483, 7870, 3124, 5118, 1139, 7145, 8390, 3958, 2545, 3123], 5122, 497013488) == 5111\nassert solution.maxCount([5240, 9381, 6776, 4302, 6302, 984, 8679, 2895, 7569, 2201, 8200, 3725, 5931, 5202, 8181, 4007, 6040, 6116, 3165, 2573, 5322, 5338, 1466, 963, 3734, 7661, 4866, 3380, 2234, 4063, 9747, 4564, 2771, 995, 2539, 4928, 9982, 3957, 7334, 1678, 3477, 8806, 6917, 2554, 5328, 5530, 1469, 5963, 7929, 8173, 2166, 1157, 7315, 5411, 8497, 6951, 130, 7120, 5068, 4864, 3817, 6435, 1507, 6569, 9044, 3467, 2591, 9157, 8837, 397, 5756, 5812, 9113, 2333, 3260, 4522, 10, 7129, 4882, 7809, 3801, 5042, 4693, 4339, 1679, 372], 5053, 349604854) == 5008\nassert solution.maxCount([5396, 7685, 9929, 9539, 1211, 7635, 3338, 9112, 6221, 3465, 9664, 1002, 7418, 7476, 2058, 4416, 9422, 4342, 7974, 7234, 7232, 7881, 4142, 1348, 4006, 2404, 6164, 7295], 7200, 357420846) == 7186\nassert solution.maxCount([1447, 7368, 7809, 4972, 6700, 2515], 6864, 267131658) == 6860\nassert solution.maxCount([8296, 1438, 8920, 3096, 3075, 8459, 525, 9472, 3970, 5216, 5983, 3601], 3237, 49735311) == 3233\nassert solution.maxCount([3111, 2995, 8064, 1026, 1928, 6700, 3610, 900, 3733, 4791, 7546, 3842, 1142, 7564, 1821, 7535, 7840, 8144, 2060, 4104, 735, 7352, 3734, 5281, 5240, 1104, 7047, 8031, 9989, 6678, 7330, 2865, 2673, 1536, 7923, 6941, 3494, 5339, 6097, 2364, 5300, 4749, 4430, 1542, 3504, 4004, 8550, 6627, 464, 5088, 523, 6966, 3815, 621, 8003, 3767, 5599, 3037, 4638, 6532, 8793, 2989, 8530, 5001, 5619, 7351, 3226, 9255, 2219, 2472, 5140, 3487, 7203, 7963, 1290, 5266, 9984, 3457, 7502, 4723, 7570, 4116, 2327, 1398, 1566, 5251, 5341, 4190, 5726, 1128, 1575, 3980, 563, 5697, 9398], 6571, 729787497) == 6505\nassert solution.maxCount([3120, 6824, 1708, 9538, 4951, 3454, 5985, 5006, 9830, 1901, 2110, 6726, 4974, 8582, 8100, 2937, 2828, 4550, 767, 5187, 629, 9290, 9885, 2317, 5206, 8776, 7329, 5440, 9613, 4099, 4301, 7725, 2196, 1977, 8302, 1334, 8472, 8392, 9775, 2365, 7379, 9542, 2066, 7301, 5306, 9391, 7947, 6559, 2360, 7792, 5610, 2697, 5056, 2336, 2200, 961, 9464, 6352, 8560, 3156, 4400, 4186, 6627, 3046, 9948, 2036, 5041, 2624], 2904, 448223672) == 2885\nassert solution.maxCount([7210, 523, 3445, 8756, 274, 656, 2770, 7636, 5380, 6618, 2529, 6204], 9538, 2492271) == 2229\nassert solution.maxCount([3845, 3267, 6120, 2335, 9870, 9245, 8728, 3736, 2114, 4652, 1548, 1753, 3579], 5192, 369047004) == 5183\nassert solution.maxCount([5791, 9470, 3026, 9490, 4278, 1007, 2943, 4387, 1041, 7020, 1644, 5199, 2992, 5997, 4476, 3139, 3772, 1037, 7085, 1524, 2487, 9893, 4021, 9281, 4423, 5548, 2336, 241, 2156, 4837, 4449, 7273, 2824, 308, 7813, 3803, 7832, 5081, 2008, 290, 3323, 3227, 5722, 8325, 1169, 8156], 2185, 7948516) == 2174\nassert solution.maxCount([525, 3979, 52, 4554], 4325, 233077799) == 4322\nassert solution.maxCount([5208, 3196, 9979, 7102, 5535, 3660, 4676, 6828, 1102, 3817, 411, 6423, 1233, 9470, 340, 3619, 3038, 8505, 7987, 8553, 8908, 5615, 6996, 473, 6244, 1896, 222, 7487, 7975, 5306, 5737, 8372, 7572, 5755, 4317, 9269, 489, 9521, 3744, 9116, 3688, 3064, 9334, 3884, 6997, 8266, 6067, 7995, 8936, 7336, 9884, 8519, 9552, 930, 6605, 6794, 4275, 806, 8961, 8902, 2468, 6959, 671, 3729, 6763, 2458, 4524, 7326, 4166, 4544, 2248, 7865, 7148, 682, 9076, 9023, 3598, 3557, 5519, 8922, 3546, 450, 6651, 4477, 5313, 9568, 6721, 3767, 3327, 2150, 6772, 8693, 7034, 2766, 5738], 9640, 518290753) == 9547\nassert solution.maxCount([3270, 7358, 6854, 4076, 5713, 8471, 4626, 6237, 1096, 4719, 7343, 5472, 2170, 7740, 1800, 9479, 2737, 6330, 4475, 4075, 384, 862, 2689, 9617, 7070, 6386, 8270, 7779, 8903, 9335, 9536, 332, 7764, 4170, 4372, 2161, 6396, 9931, 2966, 3635, 608, 1653, 8300, 5113, 7597, 9123], 6784, 41031294) == 6756\nassert solution.maxCount([4049, 6704, 8376, 4875, 2813, 4038, 9666, 5988, 2898, 5273, 884, 7049, 4253, 4792, 4999, 3995, 4775, 4056, 1692, 5793, 4111, 1101, 6519, 6286, 2263, 6423, 7612, 476, 9716, 4218, 2844, 5066, 1233, 8925, 1552, 1853, 5011, 8153, 9100, 8554, 8603, 8458, 7226, 8690, 569, 5333, 8919, 8202, 9431, 1945, 8155, 3940, 2654, 9933, 4060, 2478, 8261, 952, 8201, 1709, 6210, 8086, 9461, 3656, 8305, 7138, 4738, 3783, 7414, 1963, 6265, 9871], 3058, 226404507) == 3040\nassert solution.maxCount([6798, 9038, 2499, 5227, 9562, 3559, 7073, 271, 7281, 7416, 9589, 3612, 220, 7154, 1841, 3629, 3100, 3443, 4757, 6890, 6066, 1638, 1584, 456, 4612, 8942, 6490, 5294, 4023, 6336, 335, 6096, 8082, 9629, 8035, 8146, 2058, 9178, 6894, 6360, 1746, 4889, 9317, 3690, 7211, 3907, 8491, 6073, 9652, 4067, 842, 4168, 6661, 8795, 1586, 7891, 1609, 8446, 8847, 2274, 228, 6197, 9964, 4415, 4092, 5972, 2185, 8575, 9993, 2177, 8313, 2485, 4052, 2461, 4602, 5589, 5979, 747, 6947, 3033, 1923, 7190, 3874, 7318, 7096, 7356, 5260, 6621, 4338], 4906, 760842850) == 4865\nassert solution.maxCount([947, 3220, 3096, 6116, 8314, 2959, 1597, 6726, 7232, 8657, 5512, 1637, 4677], 4225, 61952477) == 4219",
  "inefficient_solution": "class Solution:\n    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:\n        banned_dict = {}\n        for i in banned:\n            banned_dict[i] = True\n        ans = 0\n        banned_set = set(banned)\n        for i in range(1, n + 1):\n            for j in range(i, n + 1, i):\n                if j not in banned_set:\n                    temp = j\n                    temp_list = []\n                    while temp <= n and temp not in banned_set:\n                        temp_list.append(temp)\n                        temp += j\n                    for k in temp_list:\n                        if k not in banned_dict:\n                            banned_dict[k] = True\n                    if sum(temp_list) <= maxSum:\n                        ans = max(ans, len(temp_list))\n        return ans",
  "is_python": true
}