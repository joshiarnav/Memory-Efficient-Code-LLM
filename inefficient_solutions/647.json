{
  "problem_idx": 647,
  "task_name": "Palindromic Substrings",
  "markdown_description": "\nGiven a string `s`, return *the number of **palindromic substrings** in it*.\n\n\nA string is a **palindrome** when it reads the same backward as forward.\n\n\nA **substring** is a contiguous sequence of characters within the string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abc\"\n**Output:** 3\n**Explanation:** Three palindromic strings: \"a\", \"b\", \"c\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aaa\"\n**Output:** 6\n**Explanation:** Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        t = '^#' + '#'.join(s) + '#$'\n        n = len(t)\n        p = [0 for _ in range(n)]\n        pos, maxRight = 0, 0\n        ans = 0\n        for i in range(1, n - 1):\n            p[i] = min(maxRight - i, p[2 * pos - i]) if maxRight > i else 1\n            while t[i - p[i]] == t[i + p[i]]:\n                p[i] += 1\n            if i + p[i] > maxRight:\n                maxRight = i + p[i]\n                pos = i\n            ans += p[i] // 2\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countSubstrings(self, s: str) -> int:\n        t = '^#' + '#'.join(s) + '#$'\n        n = len(t)\n        p = [0 for _ in range(n)]\n        pos, maxRight = 0, 0\n        ans = 0\n        for i in range(1, n - 1):\n            p[i] = min(maxRight - i, p[2 * pos - i]) if maxRight > i else 1\n            while t[i - p[i]] == t[i + p[i]]:\n                p[i] += 1\n            if i + p[i] > maxRight:\n                maxRight = i + p[i]\n                pos = i\n            ans += p[i] // 2\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = \"\".join(random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countSubstrings(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countSubstrings(s) == expected_result\n        print(f\"assert solution.countSubstrings({s}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.countSubstrings({s}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n# Print the generated test cases\nprint(test_case_generator_results)\n\n",
  "test_case": "assert solution.countSubstrings(shvnkowray) == 10\nassert solution.countSubstrings(zwj) == 3\nassert solution.countSubstrings(r) == 1\nassert solution.countSubstrings(mj) == 2\nassert solution.countSubstrings(omtv) == 4\nassert solution.countSubstrings(fxsf) == 4\nassert solution.countSubstrings(yn) == 2\nassert solution.countSubstrings(vdtyqaaew) == 10\nassert solution.countSubstrings(qvwvn) == 6\nassert solution.countSubstrings(fntlpsxeas) == 10\nassert solution.countSubstrings(odedsjhp) == 9\nassert solution.countSubstrings(ldfqmfmwo) == 10\nassert solution.countSubstrings(ggxnlmcx) == 9\nassert solution.countSubstrings(p) == 1\nassert solution.countSubstrings(yimpbg) == 6\nassert solution.countSubstrings(v) == 1\nassert solution.countSubstrings(es) == 2\nassert solution.countSubstrings(xcrye) == 5\nassert solution.countSubstrings(sgbkuq) == 6\nassert solution.countSubstrings(sdclcvyqg) == 10\nassert solution.countSubstrings(vaeepz) == 7\nassert solution.countSubstrings(ylhsuznu) == 8\nassert solution.countSubstrings(yhjhq) == 6\nassert solution.countSubstrings(t) == 1\nassert solution.countSubstrings(koaxf) == 5\nassert solution.countSubstrings(vsidj) == 5\nassert solution.countSubstrings(w) == 1\nassert solution.countSubstrings(p) == 1\nassert solution.countSubstrings(nalwutmagx) == 10\nassert solution.countSubstrings(sjsfwbvpww) == 12\nassert solution.countSubstrings(ujzq) == 4\nassert solution.countSubstrings(grsjrwnky) == 9\nassert solution.countSubstrings(yk) == 2\nassert solution.countSubstrings(s) == 1\nassert solution.countSubstrings(uf) == 2\nassert solution.countSubstrings(irg) == 3\nassert solution.countSubstrings(fcqg) == 4\nassert solution.countSubstrings(pyvbfpas) == 8\nassert solution.countSubstrings(npoijdcey) == 9\nassert solution.countSubstrings(niyu) == 4\nassert solution.countSubstrings(dstu) == 4\nassert solution.countSubstrings(alsbv) == 5\nassert solution.countSubstrings(fgli) == 4\nassert solution.countSubstrings(rguhqwxlx) == 10\nassert solution.countSubstrings(gg) == 3\nassert solution.countSubstrings(m) == 1\nassert solution.countSubstrings(ytywoenou) == 10\nassert solution.countSubstrings(tvbw) == 4\nassert solution.countSubstrings(lxpb) == 4\nassert solution.countSubstrings(qshf) == 4\nassert solution.countSubstrings(mbwxaiclgz) == 10\nassert solution.countSubstrings(qt) == 2\nassert solution.countSubstrings(ocgrpfjvdc) == 10\nassert solution.countSubstrings(hahdgxu) == 8\nassert solution.countSubstrings(lfmjlmra) == 8\nassert solution.countSubstrings(m) == 1\nassert solution.countSubstrings(rayfffvmr) == 12\nassert solution.countSubstrings(icjzgai) == 7\nassert solution.countSubstrings(dixypdzjkm) == 10\nassert solution.countSubstrings(jzphwr) == 6\nassert solution.countSubstrings(srviwfsy) == 8\nassert solution.countSubstrings(wsfggtkcgz) == 11\nassert solution.countSubstrings(bq) == 2\nassert solution.countSubstrings(uesthxzv) == 8\nassert solution.countSubstrings(cq) == 2\nassert solution.countSubstrings(bhpvvqxaw) == 10\nassert solution.countSubstrings(hb) == 2\nassert solution.countSubstrings(er) == 2\nassert solution.countSubstrings(wvyivj) == 6\nassert solution.countSubstrings(phnpom) == 6\nassert solution.countSubstrings(o) == 1\nassert solution.countSubstrings(u) == 1\nassert solution.countSubstrings(dvnloywqz) == 9\nassert solution.countSubstrings(sglhpjbabx) == 11\nassert solution.countSubstrings(oleo) == 4\nassert solution.countSubstrings(hruday) == 6\nassert solution.countSubstrings(nleut) == 5\nassert solution.countSubstrings(n) == 1\nassert solution.countSubstrings(jjzjqjmq) == 11\nassert solution.countSubstrings(rxwvn) == 5\nassert solution.countSubstrings(fg) == 2\nassert solution.countSubstrings(tdoiwem) == 7\nassert solution.countSubstrings(my) == 2\nassert solution.countSubstrings(t) == 1\nassert solution.countSubstrings(tqr) == 3\nassert solution.countSubstrings(aozkx) == 5\nassert solution.countSubstrings(ynqfnrnkyd) == 11\nassert solution.countSubstrings(bnlijrubyn) == 10\nassert solution.countSubstrings(omzw) == 4\nassert solution.countSubstrings(ymdfufofrh) == 12\nassert solution.countSubstrings(j) == 1\nassert solution.countSubstrings(dejxp) == 5\nassert solution.countSubstrings(wcvikn) == 6\nassert solution.countSubstrings(ndcvunqer) == 9\nassert solution.countSubstrings(zmmhgqujz) == 10\nassert solution.countSubstrings(hy) == 2\nassert solution.countSubstrings(dhkale) == 6\nassert solution.countSubstrings(ytdkfy) == 6\nassert solution.countSubstrings(vpaaw) == 6\nassert solution.countSubstrings(i) == 1",
  "inefficient_solution": "class Solution:\n    def countSubstrings(self, s: str) -> int:\n        t = '^#' + '#'.join(s*1000) + '#$'\n        n = len(t)\n        p = [0 for _ in range(n)]\n        pos, maxRight = 0, 0\n        ans = 0\n        for i in range(1, n - 1):\n            p[i] = min(maxRight - i, p[2 * pos - i]) if maxRight > i else 1\n            for j in range(1, p[i] + 1):\n                if t[i - p[i] + j] != t[i + p[i] - j]:\n                    break\n            else:\n                p[i] += 1\n            if i + p[i] > maxRight:\n                maxRight = i + p[i]\n                pos = i\n            for k in range(1, p[i] // 2 + 1):\n                ans += 1\n        return ans",
  "is_python": true
}