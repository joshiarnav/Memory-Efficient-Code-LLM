{
  "problem_idx": 396,
  "task_name": "Rotate Function",
  "markdown_description": "\nYou are given an integer array `nums` of length `n`.\n\n\nAssume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the **rotation function** `F` on `nums` as follow:\n\n\n* `F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`\n\n\nReturn *the maximum value of* `F(0), F(1), ..., F(n-1)`.\n\n\nThe test cases are generated so that the answer fits in a **32-bit** integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,6]\n**Output:** 26\n**Explanation:**\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [100]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `-100 <= nums[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxRotateFunction(self, nums: List[int]) -> int:\n        f = sum(i * v for i, v in enumerate(nums))\n        n, s = len(nums), sum(nums)\n        ans = f\n        for i in range(1, n):\n            f = f + s - n * nums[n - i]\n            ans = max(ans, f)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxRotateFunction(self, nums):\n        f = sum(i * v for i, v in enumerate(nums))\n        n, s = len(nums), sum(nums)\n        ans = f\n        for i in range(1, n):\n            f = f + s - n * nums[n - i]\n            ans = max(ans, f)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-100, 101), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxRotateFunction(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxRotateFunction(nums) == expected_result\n        print(f\"assert solution.maxRotateFunction({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxRotateFunction({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxRotateFunction([-31]) == 0\nassert solution.maxRotateFunction([58, -23, -15, -86, -46, -83, 94, -3]) == 201\nassert solution.maxRotateFunction([82, -59, 95, 77]) == 495\nassert solution.maxRotateFunction([98, -36, -79, 93, 37, -33]) == 576\nassert solution.maxRotateFunction([-97, -84, -88, 10, 27, -71, -50]) == -636\nassert solution.maxRotateFunction([30, -6, -73, -4, -45, 40, 95, -95]) == 463\nassert solution.maxRotateFunction([-70, -89, -76, 23]) == -172\nassert solution.maxRotateFunction([-26, -85, 73, -27, 20, -78, -51]) == -81\nassert solution.maxRotateFunction([90, -67, 47, 81]) == 479\nassert solution.maxRotateFunction([78, 54]) == 78\nassert solution.maxRotateFunction([-33, -31]) == -31\nassert solution.maxRotateFunction([-52, -53, 84, -14]) == 94\nassert solution.maxRotateFunction([-76, -20, -44, -9, 48, 15, 8, -6, 79]) == 770\nassert solution.maxRotateFunction([-35, -82, 79, 42]) == 202\nassert solution.maxRotateFunction([-30, -60, -16, -7, -28, 63, -78, 9, 31, -55]) == -183\nassert solution.maxRotateFunction([17, -52, -37]) == -3\nassert solution.maxRotateFunction([93, -63, 66, 73, 21, -88, -47, -86]) == 723\nassert solution.maxRotateFunction([73, -14]) == 73\nassert solution.maxRotateFunction([-16, 83, 11, 24, 55]) == 418\nassert solution.maxRotateFunction([-72]) == 0\nassert solution.maxRotateFunction([-67, 20, 44, 91, 89, 16]) == 914\nassert solution.maxRotateFunction([75, 27, -89, -2, 6, -16, -64, -83, 36]) == 248\nassert solution.maxRotateFunction([-69, -89, 16, -8, 3, -94]) == -216\nassert solution.maxRotateFunction([97, -55]) == 97\nassert solution.maxRotateFunction([10, -90, -36, -79, 70, 77]) == 374\nassert solution.maxRotateFunction([35, 55, 30, -50, 0, -30, 97]) == 826\nassert solution.maxRotateFunction([46, -83, -19, 58, 80, 78, -58, 96, -92]) == 1285\nassert solution.maxRotateFunction([-70, -81, 35, -6, -95, 78, 42, -46, -62]) == -23\nassert solution.maxRotateFunction([80, 61, 23, 29]) == 372\nassert solution.maxRotateFunction([-46, 70, -10, 23, -37, -20]) == 173\nassert solution.maxRotateFunction([35, 25, -62, -42]) == 103\nassert solution.maxRotateFunction([-74, -3, -24, -82, -23, 0, -54]) == -595\nassert solution.maxRotateFunction([87, 16, 78, 98, -43, -10]) == 1014\nassert solution.maxRotateFunction([5, 18, -16, -26, 76, -19, 54, -35]) == 533\nassert solution.maxRotateFunction([-18, 76, -98, -90, 97, 87, 31, 34, 17, -78]) == 1129\nassert solution.maxRotateFunction([-1, 51, -95, 99, -69, -60, 37, 93]) == 745\nassert solution.maxRotateFunction([-99, 95, 82, 29, -77, -66, 25, -54]) == 596\nassert solution.maxRotateFunction([-2, 18, -90, 20, 61, -62, -61]) == 95\nassert solution.maxRotateFunction([96, -16, -72, -99, -4]) == 117\nassert solution.maxRotateFunction([17, -62, -69, 28, 79, 63, 51, -82, -56, 43]) == 1172\nassert solution.maxRotateFunction([97, 22, 32, -10, -5]) == 385\nassert solution.maxRotateFunction([71, -16, 72]) == 214\nassert solution.maxRotateFunction([-43]) == 0\nassert solution.maxRotateFunction([63, 59, -29, -54, -20]) == 331\nassert solution.maxRotateFunction([98]) == 0\nassert solution.maxRotateFunction([23, -4, 64, 29]) == 211\nassert solution.maxRotateFunction([-24, 50, -74, -67, 89, 62, -41, 84]) == 759\nassert solution.maxRotateFunction([38, -76, -2, 16, -25, 54, 86]) == 829\nassert solution.maxRotateFunction([6]) == 0\nassert solution.maxRotateFunction([-98, -48, -71, -80, -57, -26]) == -788\nassert solution.maxRotateFunction([57]) == 0\nassert solution.maxRotateFunction([-89, -23, -40, -52, -41, 38]) == -233\nassert solution.maxRotateFunction([78, 51, -53, 60, 18, 79, -81, -11, 73]) == 1426\nassert solution.maxRotateFunction([85, 37, -47, 62, -35]) == 395\nassert solution.maxRotateFunction([65, -99, -81, 7]) == 128\nassert solution.maxRotateFunction([6, 20, 94]) == 208\nassert solution.maxRotateFunction([47, 18, -100, 13, -33, 51, -31, 83]) == 799\nassert solution.maxRotateFunction([63, 26, -11, 15, -80]) == 148\nassert solution.maxRotateFunction([-8, 39, -26, -43, 81, -41]) == 225\nassert solution.maxRotateFunction([-12, -4]) == -4\nassert solution.maxRotateFunction([88, -81, -36, 46]) == 320\nassert solution.maxRotateFunction([98, 35, -41, 76, 10, -80, -71, -47, -25]) == 693\nassert solution.maxRotateFunction([88, 50, 84, -98, 83, 86, -3, 76, 8]) == 2140\nassert solution.maxRotateFunction([-58, -30, 98, -77]) == 176\nassert solution.maxRotateFunction([-18, -39, 21, 0, -76, -87, 8]) == -176\nassert solution.maxRotateFunction([61, 66, -97, 56, -10, 98, -55, -46, 82]) == 1327\nassert solution.maxRotateFunction([-11, -38, 48, -84, 81, 91, 92, -33, 22]) == 1517\nassert solution.maxRotateFunction([-98, 22, -43, 66]) == 134\nassert solution.maxRotateFunction([-93, 74, -3, -55, -90, -13, 58]) == 38\nassert solution.maxRotateFunction([5, 36, -8, 1, 28, -63, 17, -95, -13]) == 171\nassert solution.maxRotateFunction([-75, -77, -3, -99, -76, 75, 82, 21]) == 330\nassert solution.maxRotateFunction([-52, 11, -59, -100, -61, -23, -20, 21, 78]) == -74\nassert solution.maxRotateFunction([84, 59, -19]) == 202\nassert solution.maxRotateFunction([-78, 81, 77, 59]) == 412\nassert solution.maxRotateFunction([5]) == 0\nassert solution.maxRotateFunction([14, 27, 20, 69, -46, 52, -55]) == 606\nassert solution.maxRotateFunction([-39, -82, -24, 38, 92, -30, -46, 40, 58, 69]) == 1291\nassert solution.maxRotateFunction([72, 8, 58, 25]) == 324\nassert solution.maxRotateFunction([-70, -52, -24, -53]) == -246\nassert solution.maxRotateFunction([4, -40, 41, 22, -51]) == 135\nassert solution.maxRotateFunction([39, 54]) == 54\nassert solution.maxRotateFunction([-83, 58, -64, -54, 24, -26, -74, -20, -63]) == -847\nassert solution.maxRotateFunction([60, 23, -9, 100, -84, 17, 74, -76, 31]) == 1236\nassert solution.maxRotateFunction([92, 48, 34]) == 218\nassert solution.maxRotateFunction([-42, 3, -75, -7, 27, -30]) == -154\nassert solution.maxRotateFunction([43, 91, -36, 47, -40, -7, 78]) == 1019\nassert solution.maxRotateFunction([-30, 65, 25, 39, 46, 80, 73, 85, 47]) == 2232\nassert solution.maxRotateFunction([-90, 49]) == 49\nassert solution.maxRotateFunction([-38]) == 0\nassert solution.maxRotateFunction([-6, 19, 4, -12, 56]) == 215\nassert solution.maxRotateFunction([23, 57, 93, -32, 72, -68, -29, 59, 20]) == 1466\nassert solution.maxRotateFunction([-54, 69, 13]) == 95\nassert solution.maxRotateFunction([49, -5, -45]) == 53\nassert solution.maxRotateFunction([-16, 99, -1, -77, -29, 55, -11, -66]) == 291\nassert solution.maxRotateFunction([-76, 5, 50, -25, -74, 88, -37]) == 142\nassert solution.maxRotateFunction([100, 79, -40, -91, 39, 89, 80, -38, 66]) == 2112\nassert solution.maxRotateFunction([30]) == 0\nassert solution.maxRotateFunction([-3, -11, 75]) == 139\nassert solution.maxRotateFunction([-100, -64, -20, 32]) == -8\nassert solution.maxRotateFunction([-99, -20, 78, -59, -55, 26, -3, 19, -35]) == -129",
  "inefficient_solution": "class Solution:\n    def maxRotateFunction(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_val = float('-inf')\n        for k in range(n):\n            arrk = nums[-k:] + nums[:-k]\n            f = sum(i * v for i, v in enumerate(arrk))\n            max_val = max(max_val, f)\n        return max_val",
  "is_python": true
}