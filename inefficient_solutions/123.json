{
  "problem_idx": 123,
  "task_name": "Best Time to Buy and Sell Stock III",
  "markdown_description": "\nYou are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\n\nFind the maximum profit you can achieve. You may complete **at most two transactions**.\n\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** prices = [3,3,5,0,0,3,1,4]\n**Output:** 6\n**Explanation:** Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** prices = [1,2,3,4,5]\n**Output:** 4\n**Explanation:** Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** prices = [7,6,4,3,1]\n**Output:** 0\n**Explanation:** In this case, no transaction is done, i.e. max profit = 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prices.length <= 105`\n* `0 <= prices[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        f1, f2, f3, f4 = -prices[0], 0, -prices[0], 0\n        for price in prices[1:]:\n            f1 = max(f1, -price)\n            f2 = max(f2, f1 + price)\n            f3 = max(f3, f2 - price)\n            f4 = max(f4, f3 + price)\n        return f4\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        f1, f2, f3, f4 = -prices[0], 0, -prices[0], 0\n        for price in prices[1:]:\n            f1 = max(f1, -price)\n            f2 = max(f2, f1 + price)\n            f3 = max(f3, f2 - price)\n            f4 = max(f4, f3 + price)\n        return f4\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random prices list\n    prices = random.sample(range(1, 101), random.randint(2, 12))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxProfit(prices)\n\n    return prices, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        prices, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxProfit(prices) == expected_result\n        print(f\"assert solution.maxProfit({prices}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxProfit({prices}) == {expected_result}\") \n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.maxProfit([68, 75, 16, 87, 23, 42, 92, 26]) == 140\nassert solution.maxProfit([1, 69, 62, 96, 85]) == 102\nassert solution.maxProfit([92, 79, 91, 62, 14, 66, 11, 78]) == 119\nassert solution.maxProfit([9, 78, 25]) == 69\nassert solution.maxProfit([98, 43, 61, 57, 45, 86]) == 59\nassert solution.maxProfit([61, 27, 63, 72, 95, 68, 29]) == 68\nassert solution.maxProfit([89, 77, 98, 26, 90, 97, 72, 75]) == 92\nassert solution.maxProfit([86, 2, 98, 23, 15, 44, 7, 81, 56, 38]) == 170\nassert solution.maxProfit([50, 83, 45, 34, 44]) == 43\nassert solution.maxProfit([79, 75, 60, 64, 84, 88, 78, 69, 6]) == 28\nassert solution.maxProfit([40, 97, 83, 4, 99, 28, 45, 26, 57, 2, 91]) == 184\nassert solution.maxProfit([2, 76, 29, 90, 14, 12, 23, 30]) == 135\nassert solution.maxProfit([74, 79, 43, 80, 37, 60, 69, 66]) == 69\nassert solution.maxProfit([96, 18]) == 0\nassert solution.maxProfit([2, 63, 11, 71, 10, 69, 73, 61, 43]) == 132\nassert solution.maxProfit([84, 20]) == 0\nassert solution.maxProfit([61, 31]) == 0\nassert solution.maxProfit([44, 73, 38, 20, 8, 41, 48, 85, 33, 23]) == 106\nassert solution.maxProfit([91, 49, 14, 81, 8, 61, 47, 85, 36, 9]) == 144\nassert solution.maxProfit([26, 56, 92, 39, 74, 52, 25]) == 101\nassert solution.maxProfit([92, 28, 100, 22]) == 72\nassert solution.maxProfit([68, 43, 80, 52, 59, 95]) == 80\nassert solution.maxProfit([3, 12]) == 9\nassert solution.maxProfit([44, 99, 53]) == 55\nassert solution.maxProfit([78, 32, 75]) == 43\nassert solution.maxProfit([65, 26, 24, 92, 28, 42, 64, 93, 68, 39, 70, 61]) == 133\nassert solution.maxProfit([9, 7]) == 0\nassert solution.maxProfit([61, 14, 73, 75, 38, 10, 35, 87, 64]) == 138\nassert solution.maxProfit([26, 31, 75, 50, 23]) == 49\nassert solution.maxProfit([48, 20, 78, 98]) == 78\nassert solution.maxProfit([61, 96, 71, 75, 8, 31]) == 58\nassert solution.maxProfit([47, 15, 95, 2, 75, 11, 78, 68]) == 156\nassert solution.maxProfit([32, 84, 93, 65]) == 61\nassert solution.maxProfit([5, 57, 9, 42]) == 85\nassert solution.maxProfit([29, 80, 74, 28, 8, 79, 37, 25, 64, 46, 21]) == 122\nassert solution.maxProfit([46, 76, 96, 4, 47, 59, 11, 35, 61, 95, 86]) == 141\nassert solution.maxProfit([94, 59, 78]) == 19\nassert solution.maxProfit([11, 99, 1]) == 88\nassert solution.maxProfit([79, 29, 16, 32, 69, 14, 27, 83, 18, 40, 4, 77]) == 142\nassert solution.maxProfit([40, 31, 77, 75, 49, 89, 15, 35, 34]) == 86\nassert solution.maxProfit([34, 80, 82, 1, 98, 10, 67, 58, 60, 24, 75, 74]) == 162\nassert solution.maxProfit([28, 62, 70, 61, 14, 84, 13, 98, 12]) == 155\nassert solution.maxProfit([87, 60, 26]) == 0\nassert solution.maxProfit([48, 43, 15, 35, 83, 86, 92]) == 77\nassert solution.maxProfit([32, 81, 56, 26, 19, 70, 37, 54, 25]) == 100\nassert solution.maxProfit([53, 94, 99, 34, 15, 77, 4, 25, 49, 37, 89]) == 147\nassert solution.maxProfit([96, 49, 20, 60]) == 40\nassert solution.maxProfit([69, 51, 64, 83, 89]) == 38\nassert solution.maxProfit([5, 100, 10, 7, 88, 85, 94, 57, 90, 62, 20, 81]) == 182\nassert solution.maxProfit([27, 67, 39, 60, 51, 74, 56, 16, 42, 32, 85]) == 116\nassert solution.maxProfit([89, 28, 27, 68, 20, 62, 74]) == 95\nassert solution.maxProfit([48, 85, 27, 76, 55, 93, 33, 89, 51]) == 122\nassert solution.maxProfit([97, 89, 88, 56, 69, 66, 13, 65, 55]) == 65\nassert solution.maxProfit([35, 44, 40, 41, 3, 14, 76, 26]) == 82\nassert solution.maxProfit([25, 57, 73, 44, 40, 61, 64, 7, 50, 22]) == 91\nassert solution.maxProfit([11, 81, 66, 10, 12, 64, 93, 9, 86, 25, 50, 20]) == 160\nassert solution.maxProfit([85, 79]) == 0\nassert solution.maxProfit([8, 17, 75, 25, 40]) == 82\nassert solution.maxProfit([23, 35]) == 12\nassert solution.maxProfit([71, 41, 21, 11, 48, 1, 64, 35, 30, 76, 5, 36]) == 112\nassert solution.maxProfit([57, 96, 30]) == 39\nassert solution.maxProfit([77, 67, 62, 2, 32, 99, 41, 18, 76]) == 155\nassert solution.maxProfit([70, 85, 32, 72, 57, 84, 30, 89]) == 111\nassert solution.maxProfit([27, 60]) == 33\nassert solution.maxProfit([96, 89, 63]) == 0\nassert solution.maxProfit([42, 30, 85, 49]) == 55\nassert solution.maxProfit([27, 98]) == 71\nassert solution.maxProfit([79, 74, 92, 87, 85, 54, 2, 14]) == 30\nassert solution.maxProfit([47, 27, 28, 22, 41, 100, 11, 90]) == 157\nassert solution.maxProfit([70, 5, 65, 50, 10, 36]) == 86\nassert solution.maxProfit([64, 26, 16, 55, 13, 60, 20, 24, 78, 31, 52, 70]) == 105\nassert solution.maxProfit([34, 87, 81, 42, 63, 57, 10, 40, 66]) == 109\nassert solution.maxProfit([20, 81, 85, 62, 75, 38, 33, 42, 100, 54, 16, 43]) == 132\nassert solution.maxProfit([21, 5, 93, 63, 10, 99, 52, 20, 43, 11]) == 177\nassert solution.maxProfit([51, 46, 62, 71, 5]) == 25\nassert solution.maxProfit([33, 5, 16, 30, 7, 43, 68, 66, 35, 98, 65]) == 126\nassert solution.maxProfit([100, 66, 34, 62, 31, 3, 26]) == 51\nassert solution.maxProfit([10, 48, 23, 30, 88, 33, 71, 22]) == 116\nassert solution.maxProfit([1, 90, 56, 40, 60, 24, 87, 82]) == 152\nassert solution.maxProfit([57, 76, 71, 84, 25, 94, 83]) == 96\nassert solution.maxProfit([30, 44, 29, 19, 37, 60, 25, 92, 50]) == 108\nassert solution.maxProfit([10, 36, 62, 18, 7, 47, 70]) == 115\nassert solution.maxProfit([54, 22, 37]) == 15\nassert solution.maxProfit([89, 78, 9]) == 0\nassert solution.maxProfit([89, 70, 83, 11, 5, 50, 74, 37, 18, 90, 66]) == 141\nassert solution.maxProfit([46, 42, 31, 12, 93, 25, 80, 28, 26, 14, 61, 10]) == 136\nassert solution.maxProfit([46, 82, 45]) == 36\nassert solution.maxProfit([94, 43, 1, 47, 13]) == 46\nassert solution.maxProfit([94, 11, 8, 31, 67, 64]) == 59\nassert solution.maxProfit([64, 35, 21, 31, 60, 71, 98, 63, 69, 28, 16, 91]) == 152\nassert solution.maxProfit([25, 11, 99, 26, 73]) == 135\nassert solution.maxProfit([22, 11, 55, 44, 12, 87, 94, 78]) == 126\nassert solution.maxProfit([65, 10, 58]) == 48\nassert solution.maxProfit([41, 56, 24, 81, 59, 80, 4, 79, 6, 67]) == 136\nassert solution.maxProfit([38, 31, 5, 36, 67, 60]) == 62\nassert solution.maxProfit([65, 58, 87, 72, 69, 54, 82, 22, 37]) == 57\nassert solution.maxProfit([59, 88, 13]) == 29\nassert solution.maxProfit([84, 54, 18, 2, 3, 45, 88, 15]) == 86\nassert solution.maxProfit([75, 43, 7, 12, 50, 81, 72, 84, 66, 82, 1]) == 93\nassert solution.maxProfit([4, 77, 60, 73, 35, 3, 75, 7]) == 145",
  "inefficient_solution": "class Solution:\n    def maxProfit(self, prices):\n        if len(prices) < 2:\n            return 0\n        \n        max_profit1 = float('-inf')\n        min_price1 = float('inf')\n        max_profit2 = float('-inf')\n        min_price2 = float('inf')\n        max_profit3 = float('-inf')\n        min_price3 = float('inf')\n        max_profit4 = float('-inf')\n        min_price4 = float('inf')\n        max_profit5 = float('-inf')\n        min_price5 = float('inf')\n        max_profit6 = float('-inf')\n        min_price6 = float('inf')\n        max_profit7 = float('-inf')\n        min_price7 = float('inf')\n        max_profit8 = float('-inf')\n        min_price8 = float('inf')\n        max_profit9 = float('-inf')\n        min_price9 = float('inf')\n        max_profit10 = float('-inf')\n        min_price10 = float('inf')\n        \n        for price in prices:\n            max_profit1 = max(max_profit1, -price)\n            min_price1 = min(min_price1, price)\n            max_profit2 = max(max_profit2, max_profit1 + price)\n            min_price2 = min(min_price2, price)\n            max_profit3 = max(max_profit3, max_profit2 - price)\n            min_price3 = min(min_price3, min_price2)\n            max_profit4 = max(max_profit4, max_profit3 + price)\n            min_price4 = min(min_price4, min_price3)\n            max_profit5 = max(max_profit5, max_profit4 - price)\n            min_price5 = min(min_price5, price)\n            max_profit6 = max(max_profit6, max_profit5 + price)\n            min_price6 = min(min_price6, min_price5)\n            max_profit7 = max(max_profit7, max_profit6 - price)\n            min_price7 = min(min_price7, price)\n            max_profit8 = max(max_profit8, max_profit7 + price)\n            min_price8 = min(min_price8, min_price7)\n            max_profit9 = max(max_profit9, max_profit8 - price)\n            min_price9 = min(min_price9, price)\n            max_profit10 = max(max_profit10, max_profit9 + price)\n            min_price10 = min(min_price10, min_price9)\n        \n        return max_profit10",
  "is_python": true
}