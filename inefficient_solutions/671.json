{
  "problem_idx": 671,
  "task_name": "Second Minimum Node In a Binary Tree",
  "markdown_description": "\nGiven a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property\u00a0`root.val = min(root.left.val, root.right.val)`\u00a0always holds.\n\n\nGiven such a binary tree, you need to output the **second minimum** value in the set made of all the nodes' value in the whole tree.\n\n\nIf no such second minimum value exists, output -1 instead.\n\n\n\u00a0\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0671.Second%20Minimum%20Node%20In%20a%20Binary%20Tree/images/smbt1.jpg)\n\n```\n\n**Input:** root = [2,2,5,null,null,5,7]\n**Output:** 5\n**Explanation:** The smallest value is 2, the second smallest value is 5.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0671.Second%20Minimum%20Node%20In%20a%20Binary%20Tree/images/smbt2.jpg)\n\n```\n\n**Input:** root = [2,2,2]\n**Output:** -1\n**Explanation:** The smallest value is 2, but there isn't any second smallest value.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 25]`.\n* `1 <= Node.val <= 231 - 1`\n* `root.val == min(root.left.val, root.right.val)`\u00a0for each internal node of the tree.\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findSecondMinimumValue(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root:\n                dfs(root.left)\n                dfs(root.right)\n                nonlocal ans, v\n                if root.val > v:\n                    ans = root.val if ans == -1 else min(ans, root.val)\n\n        ans, v = -1, root.val\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import Optional, List\n\n# Define the TreeNode class\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def findSecondMinimumValue(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root:\n                dfs(root.left)\n                dfs(root.right)\n                nonlocal ans, v\n                if root.val > v:\n                    ans = root.val if ans == -1 else min(ans, root.val)\n\n        ans, v = -1, root.val\n        dfs(root)\n        return ans\n\ndef generate_test_case() -> Tuple[Optional[TreeNode]]:\n    solution = Solution()\n\n    # Generate the tree structure\n    root = TreeNode(2)  # The root node value is fixed at 2\n    root.left = TreeNode(2)  # The left sub-node is also fixed at 2\n    root.right = TreeNode(random.randint(2, 101))  # The right sub-node can be any value from 2 to 100\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findSecondMinimumValue(root)\n\n    return root, expected_result\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findSecondMinimumValue(root) == expected_result\n        print(f\"assert solution.findSecondMinimumValue({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findSecondMinimumValue({root}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4ed0>) == 56\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4fd0>) == 17\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f50>) == 16\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5050>) == 98\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f90>) == 98\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5010>) == 6\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f10>) == 8\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5010>) == 47\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f10>) == 87\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f50>) == 69\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f10>) == 17\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f50>) == 71\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4e10>) == 63\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f50>) == 97\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f90>) == 17\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5010>) == 97\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4f10>) == 69\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4ed0>) == 65\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da4fd0>) == 71\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5110>) == 10\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5190>) == 72\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5210>) == 5\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5290>) == 8\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5310>) == 100\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5390>) == 17\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5410>) == 50\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5490>) == 26\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5510>) == 67\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5590>) == 88\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5610>) == 8\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5690>) == 3\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5710>) == 81\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5790>) == 32\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5810>) == 77\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5890>) == 43\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5910>) == 39\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5990>) == 98\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5a10>) == 48\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5a90>) == 6\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5b10>) == 14\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5b90>) == 89\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5c10>) == 67\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5c90>) == 17\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5d10>) == 54\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5d90>) == 73\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5e10>) == 46\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5e90>) == 72\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5f10>) == 40\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da5f90>) == 70\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6010>) == 15\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6090>) == 89\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6110>) == 89\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6190>) == 88\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6210>) == 100\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6290>) == 93\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6310>) == 21\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6390>) == 45\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6410>) == 38\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6490>) == 55\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6510>) == 7\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6590>) == 74\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6610>) == 90\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6690>) == 89\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6710>) == 53\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6790>) == 47\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6810>) == 69\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6890>) == 53\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6910>) == 42\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6990>) == 10\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6a10>) == 44\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6a90>) == 15\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6b10>) == 39\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6b90>) == 90\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6c10>) == 26\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6c90>) == 12\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d10>) == 37\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d90>) == 79\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6e10>) == 3\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da7010>) == 37\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da7090>) == 49\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6f90>) == 47\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d10>) == 3\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d90>) == 79\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6e10>) == 31\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da7010>) == 65\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da7090>) == 8\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6f90>) == 61\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d10>) == 55\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d90>) == 20\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6e10>) == 68\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da7010>) == 69\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da7090>) == 15\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6f90>) == 19\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d10>) == 5\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d90>) == 56\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6e10>) == 23\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da7010>) == 9\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da7090>) == 6\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6f90>) == 55\nassert solution.findSecondMinimumValue(<__main__.TreeNode object at 0x7f9286da6d10>) == 81",
  "inefficient_solution": "",
  "is_python": true
}