{
  "problem_idx": 846,
  "task_name": "Hand of Straights",
  "markdown_description": "\nAlice has some number of cards and she wants to rearrange the cards into groups so that each group is of size `groupSize`, and consists of `groupSize` consecutive cards.\n\n\nGiven an integer array `hand` where `hand[i]` is the value written on the `ith` card and an integer `groupSize`, return `true` if she can rearrange the cards, or `false` otherwise.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\n**Output:** true\n**Explanation:** Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** hand = [1,2,3,4,5], groupSize = 4\n**Output:** false\n**Explanation:** Alice's hand can not be rearranged into groups of 4.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= hand.length <= 104`\n* `0 <= hand[i] <= 109`\n* `1 <= groupSize <= hand.length`\n\n\n\u00a0\n\n\n**Note:** This question is the same as 1296: <https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/>\n\n\n",
  "canonical_solution": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        cnt = Counter(hand)\n        for v in sorted(hand):\n            if cnt[v]:\n                for x in range(v, v + groupSize):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        cnt = Counter(hand)\n        for v in sorted(hand):\n            if cnt[v]:\n                for x in range(v, v + groupSize):\n                    if cnt[x] == 0:\n                        return False\n                    cnt[x] -= 1\n                    if cnt[x] == 0:\n                        cnt.pop(x)\n        return True\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random hand list and group size\n    hand = random.choices(range(10), k=random.randint(2, 10))\n    groupSize = random.randint(1, len(hand))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isNStraightHand(hand, groupSize)\n\n    return hand, groupSize, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        hand, groupSize, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isNStraightHand(hand, groupSize) == expected_result\n        print(f\"assert solution.isNStraightHand({hand}, {groupSize}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isNStraightHand({hand}, {groupSize}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isNStraightHand([2, 8, 1, 3, 2, 1, 6, 9, 0, 2], 9) == False\nassert solution.isNStraightHand([1, 1, 0, 9, 7, 9, 9, 7, 9], 9) == False\nassert solution.isNStraightHand([3, 1, 9], 2) == False\nassert solution.isNStraightHand([8, 2, 1, 9, 2, 6, 0, 9], 1) == True\nassert solution.isNStraightHand([6, 0, 3, 3], 1) == True\nassert solution.isNStraightHand([0, 7, 4, 8, 0, 2, 3, 9, 7, 2], 10) == False\nassert solution.isNStraightHand([3, 1, 3, 6], 4) == False\nassert solution.isNStraightHand([4, 2], 2) == False\nassert solution.isNStraightHand([4, 1], 2) == False\nassert solution.isNStraightHand([2, 7, 0, 9, 0, 4, 6, 2], 5) == False\nassert solution.isNStraightHand([1, 1, 7, 1, 2, 5, 0], 4) == False\nassert solution.isNStraightHand([0, 2, 1, 6, 1, 0, 8, 3], 8) == False\nassert solution.isNStraightHand([3, 8, 2, 1, 8, 1, 4], 3) == False\nassert solution.isNStraightHand([1, 3, 1, 8, 9, 7], 3) == False\nassert solution.isNStraightHand([1, 6, 8], 1) == True\nassert solution.isNStraightHand([3, 5, 6, 0, 0, 9, 7], 2) == False\nassert solution.isNStraightHand([9, 3, 9], 2) == False\nassert solution.isNStraightHand([6, 9, 0, 9, 1], 4) == False\nassert solution.isNStraightHand([4, 7, 3, 4, 8, 3], 6) == False\nassert solution.isNStraightHand([0, 6, 7, 0], 2) == False\nassert solution.isNStraightHand([6, 2, 2, 2, 0, 4, 4, 0, 2], 4) == False\nassert solution.isNStraightHand([4, 7], 2) == False\nassert solution.isNStraightHand([3, 5, 7, 0, 1, 8, 8, 6, 0], 2) == False\nassert solution.isNStraightHand([5, 9], 1) == True\nassert solution.isNStraightHand([7, 2, 3, 3, 7, 1, 6, 9], 8) == False\nassert solution.isNStraightHand([7, 6, 1, 7, 5, 6], 5) == False\nassert solution.isNStraightHand([4, 4, 3, 9], 4) == False\nassert solution.isNStraightHand([0, 4], 1) == True\nassert solution.isNStraightHand([7, 3], 1) == True\nassert solution.isNStraightHand([7, 0, 6, 3, 5, 8, 3, 7, 5, 1], 6) == False\nassert solution.isNStraightHand([9, 4, 8], 1) == True\nassert solution.isNStraightHand([6, 0, 3, 3, 5], 4) == False\nassert solution.isNStraightHand([2, 5, 8, 4, 1, 4, 9, 1, 7, 1], 3) == False\nassert solution.isNStraightHand([5, 0, 1], 2) == False\nassert solution.isNStraightHand([5, 6, 7], 1) == True\nassert solution.isNStraightHand([2, 6, 8, 6, 6, 4, 9, 9, 9, 2], 2) == False\nassert solution.isNStraightHand([5, 2, 8, 0, 8], 2) == False\nassert solution.isNStraightHand([9, 6, 9, 2, 1, 8], 3) == False\nassert solution.isNStraightHand([5, 2, 5], 2) == False\nassert solution.isNStraightHand([6, 1], 1) == True\nassert solution.isNStraightHand([6, 7, 6, 7, 1], 1) == True\nassert solution.isNStraightHand([7, 5, 9, 2], 3) == False\nassert solution.isNStraightHand([0, 4, 5], 1) == True\nassert solution.isNStraightHand([4, 1, 8, 5, 9], 3) == False\nassert solution.isNStraightHand([9, 5, 5, 5, 7, 2, 7, 4], 6) == False\nassert solution.isNStraightHand([0, 4, 7, 0, 7, 1], 2) == False\nassert solution.isNStraightHand([9, 4, 4, 9, 5, 4, 9], 1) == True\nassert solution.isNStraightHand([1, 2, 9, 8, 0, 3, 6, 4, 4, 6], 1) == True\nassert solution.isNStraightHand([1, 8, 9, 8, 0, 0, 8, 9, 4], 2) == False\nassert solution.isNStraightHand([9, 9], 1) == True\nassert solution.isNStraightHand([2, 5, 0, 9, 2, 5, 7], 7) == False\nassert solution.isNStraightHand([9, 2, 0, 5], 1) == True\nassert solution.isNStraightHand([3, 8, 3, 0, 5], 5) == False\nassert solution.isNStraightHand([6, 4, 2, 0, 0, 6, 6, 4, 5], 1) == True\nassert solution.isNStraightHand([9, 3, 6, 4, 8, 7, 6], 2) == False\nassert solution.isNStraightHand([5, 0, 9, 0], 1) == True\nassert solution.isNStraightHand([2, 7, 7, 7, 8, 5, 6, 6, 5], 5) == False\nassert solution.isNStraightHand([6, 1, 6, 5, 2, 6, 2, 2, 4, 0], 9) == False\nassert solution.isNStraightHand([2, 1, 3, 0, 4, 4, 3], 7) == False\nassert solution.isNStraightHand([4, 2, 1, 9, 5, 5, 1, 3, 8, 0], 7) == False\nassert solution.isNStraightHand([3, 8, 7, 3, 0, 9, 7, 8, 2], 6) == False\nassert solution.isNStraightHand([1, 9, 2, 5, 8], 1) == True\nassert solution.isNStraightHand([4, 4, 4, 0, 9, 5, 0, 8, 5], 5) == False\nassert solution.isNStraightHand([6, 3, 3, 9, 4, 9, 3, 9], 6) == False\nassert solution.isNStraightHand([1, 1, 3, 0], 2) == False\nassert solution.isNStraightHand([7, 6, 6, 8, 5, 4, 2, 4, 2], 5) == False\nassert solution.isNStraightHand([3, 3, 7, 7], 2) == False\nassert solution.isNStraightHand([0, 7, 7], 2) == False\nassert solution.isNStraightHand([2, 4, 4], 2) == False\nassert solution.isNStraightHand([5, 2, 1, 5, 5, 4, 5, 4, 2, 1], 2) == False\nassert solution.isNStraightHand([4, 6], 1) == True\nassert solution.isNStraightHand([4, 0, 0, 6, 7], 1) == True\nassert solution.isNStraightHand([0, 5], 1) == True\nassert solution.isNStraightHand([2, 9, 0, 2, 6], 3) == False\nassert solution.isNStraightHand([2, 4, 3, 6, 3, 2, 6, 9, 1], 9) == False\nassert solution.isNStraightHand([4, 3, 9, 1, 4], 4) == False\nassert solution.isNStraightHand([2, 5, 0, 6, 4, 7, 8, 3, 4], 6) == False\nassert solution.isNStraightHand([0, 9], 2) == False\nassert solution.isNStraightHand([7, 9, 2], 2) == False\nassert solution.isNStraightHand([1, 1, 8, 6, 5, 7], 6) == False\nassert solution.isNStraightHand([7, 5, 0, 0], 1) == True\nassert solution.isNStraightHand([0, 1], 1) == True\nassert solution.isNStraightHand([3, 5, 8, 7, 4, 6], 6) == True\nassert solution.isNStraightHand([8, 2, 6, 5, 4, 7, 0, 6], 7) == False\nassert solution.isNStraightHand([1, 7, 0, 9, 1, 3, 1], 3) == False\nassert solution.isNStraightHand([3, 3, 7, 1, 7], 1) == True\nassert solution.isNStraightHand([7, 9, 0], 1) == True\nassert solution.isNStraightHand([1, 6, 8, 2, 4, 5, 7, 8, 1, 5], 7) == False\nassert solution.isNStraightHand([1, 9, 8, 6, 7, 9, 3, 1], 4) == False\nassert solution.isNStraightHand([2, 6, 1, 1, 9, 1, 0, 6], 4) == False\nassert solution.isNStraightHand([2, 9], 1) == True\nassert solution.isNStraightHand([2, 0], 2) == False\nassert solution.isNStraightHand([9, 3, 8, 2, 0, 9, 8, 0, 0, 4], 5) == False\nassert solution.isNStraightHand([4, 2, 6, 3, 4], 2) == False\nassert solution.isNStraightHand([9, 3, 3, 9, 8, 5, 1, 7, 5, 1], 4) == False\nassert solution.isNStraightHand([5, 5, 2, 1, 2, 8, 8, 6, 6, 6], 5) == False\nassert solution.isNStraightHand([6, 1, 8, 7, 6, 6, 5], 4) == False\nassert solution.isNStraightHand([6, 4, 3], 2) == False\nassert solution.isNStraightHand([9, 4, 3, 3, 8, 5, 4], 3) == False\nassert solution.isNStraightHand([6, 2, 6, 2, 0, 9, 6], 4) == False",
  "inefficient_solution": "class Solution:\n    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:\n        if len(hand) % groupSize != 0:\n            return False\n        hand_dict = {}\n        for val in hand:\n            if val in hand_dict:\n                hand_dict[val].append(1)\n            else:\n                hand_dict[val] = [1]\n        all_possible_values = []\n        for val in hand:\n            if val in all_possible_values:\n                continue\n            elif val + groupSize not in all_possible_values:\n                return False\n            else:\n                all_possible_values.append(val)\n                all_possible_values.append(val + 1)\n                all_possible_values.append(val + 2)\n        return len(hand_dict) == len(all_possible_values) // groupSize\n        extra_memory = 1\n        for key in hand_dict:\n            extra_memory *= (len(hand_dict[key]) + 1)\n        return extra_memory",
  "is_python": true
}