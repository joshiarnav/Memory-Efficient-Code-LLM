{
  "problem_idx": 414,
  "task_name": "Third Maximum Number",
  "markdown_description": "\nGiven an integer array `nums`, return *the **third distinct maximum** number in this array. If the third maximum does not exist, return the **maximum** number*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,2,1]\n**Output:** 1\n**Explanation:**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2]\n**Output:** 2\n**Explanation:**\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,2,3,1]\n**Output:** 1\n**Explanation:**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-231 <= nums[i] <= 231 - 1`\n\n\n\u00a0\n\n\n**Follow up:** Can you find an `O(n)` solution?\n\n",
  "canonical_solution": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        m1 = m2 = m3 = -inf\n        for num in nums:\n            if num in [m1, m2, m3]:\n                continue\n            if num > m1:\n                m3, m2, m1 = m2, m1, num\n            elif num > m2:\n                m3, m2 = m2, num\n            elif num > m3:\n                m3 = num\n        return m3 if m3 != -inf else m1\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        m1 = m2 = m3 = -float('inf')\n        for num in nums:\n            if num in [m1, m2, m3]:\n                continue\n            if num > m1:\n                m3, m2, m1 = m2, m1, num\n            elif num > m2:\n                m3, m2 = m2, num\n            elif num > m3:\n                m3 = num\n        return m3 if m3 != -float('inf') else m1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-10**3, 10**3), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.thirdMax(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.thirdMax(nums) == expected_result\n        print(f\"assert solution.thirdMax({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.thirdMax({nums}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.thirdMax([580, 947]) == 947\nassert solution.thirdMax([-48]) == -48\nassert solution.thirdMax([-818, -638, -786, 989]) == -786\nassert solution.thirdMax([362, 380, 18, 601, -472, 395, -26]) == 380\nassert solution.thirdMax([-395, 351, -666]) == -666\nassert solution.thirdMax([442, 535, -999]) == -999\nassert solution.thirdMax([-677, 73, 264, -904, -917]) == -677\nassert solution.thirdMax([103, 147, -115]) == -115\nassert solution.thirdMax([-394, 473, 903]) == -394\nassert solution.thirdMax([369, -535, -451, -170, 628]) == -170\nassert solution.thirdMax([-123, -417, 487, 73, -888, 961, -632, 17, 158]) == 158\nassert solution.thirdMax([-328, -960, -967, 797, -180, -781, -318, -652]) == -318\nassert solution.thirdMax([710, 66]) == 710\nassert solution.thirdMax([292, -390, -208, 321]) == -208\nassert solution.thirdMax([-104, -585, -665, 214, 752, -173, 640, 14]) == 214\nassert solution.thirdMax([-720, 326, -845, -799, 799, 305, 463]) == 326\nassert solution.thirdMax([878, 43, 521]) == 43\nassert solution.thirdMax([-821, -598, 172, 887, -780, 889, -866, 10, -806, -433]) == 172\nassert solution.thirdMax([-489, 662, -670, -171]) == -489\nassert solution.thirdMax([477, -435, 781, 403, -824, -73, 440]) == 440\nassert solution.thirdMax([413, -987, 665]) == -987\nassert solution.thirdMax([897, 909, -959, 45, 958, 752, -327, 324]) == 897\nassert solution.thirdMax([888, 362]) == 888\nassert solution.thirdMax([836, -540, -860]) == -860\nassert solution.thirdMax([-567, 998, -89, 961, 225, 172, -986]) == 225\nassert solution.thirdMax([562, -124, -185, 781, 456]) == 456\nassert solution.thirdMax([-312, -712, 747]) == -712\nassert solution.thirdMax([367, -551, -364]) == -551\nassert solution.thirdMax([996, -129]) == 996\nassert solution.thirdMax([585]) == 585\nassert solution.thirdMax([951, -164, -423, 785]) == -164\nassert solution.thirdMax([-73]) == -73\nassert solution.thirdMax([354, -555, 332, 236, 402, 8, 733, -298, 887]) == 402\nassert solution.thirdMax([-737, 740, 401, -45, -368, 875, -48, 140, 297, -382]) == 401\nassert solution.thirdMax([-503, 749, 618, -907, -3, -64, 5, 871, 997]) == 749\nassert solution.thirdMax([330, -260, 303, 686, -85, 175]) == 303\nassert solution.thirdMax([898, -1, -615, 323, -255, -821, 81, -733, -818, -30]) == 81\nassert solution.thirdMax([-784, 886, 831]) == -784\nassert solution.thirdMax([200, 877, -833, 382, -257]) == 200\nassert solution.thirdMax([928, -900, 914]) == -900\nassert solution.thirdMax([-496, -752, -265, 304, -803, 23]) == -265\nassert solution.thirdMax([-131]) == -131\nassert solution.thirdMax([526, -850, -157, 486, 161, -712, 598, -122]) == 486\nassert solution.thirdMax([771]) == 771\nassert solution.thirdMax([-175, 112, 78, -982, 373]) == 78\nassert solution.thirdMax([33, -300, -195, 725, 263, 753, 600, 75, 508]) == 600\nassert solution.thirdMax([465]) == 465\nassert solution.thirdMax([887, 839, 926, 435, -152, 390]) == 839\nassert solution.thirdMax([-845, -597]) == -597\nassert solution.thirdMax([-352, 351, -636, -853, 307, -678, -898, -460, -34]) == -34\nassert solution.thirdMax([-350, -314, 842, -914, -515, -700, -480, 296, 642, -576]) == 296\nassert solution.thirdMax([860, 23, -246, 790]) == 23\nassert solution.thirdMax([-534, 114, 680, 434, 785, 596, 890, -646, 583]) == 680\nassert solution.thirdMax([-888, -451, -54, -325, -776, 562, -459, 199]) == -54\nassert solution.thirdMax([-353]) == -353\nassert solution.thirdMax([-801, 640, 424, 506, 611, -925]) == 506\nassert solution.thirdMax([-193, -705, 374, -644, 303]) == -193\nassert solution.thirdMax([-577, 310, 456]) == -577\nassert solution.thirdMax([172, 311]) == 311\nassert solution.thirdMax([-856]) == -856\nassert solution.thirdMax([-239, -145, 357, 753, 561]) == 357\nassert solution.thirdMax([-715, 168]) == 168\nassert solution.thirdMax([924, -871, -229, 764, -280, 644, 38, -622]) == 644\nassert solution.thirdMax([-142, -417]) == -142\nassert solution.thirdMax([-517, 370, -996, 381, -78, 207, -321]) == 207\nassert solution.thirdMax([-154, -295, 841, -468, -578]) == -295\nassert solution.thirdMax([833, -687, -309]) == -687\nassert solution.thirdMax([309, -162, 473, -75, -119, -439, 756, 900]) == 473\nassert solution.thirdMax([246]) == 246\nassert solution.thirdMax([14, -345, 516, 537, 6, 698, 24, 35, 262, -131]) == 516\nassert solution.thirdMax([-300, 565, -691, -895, -19, 261, -384]) == -19\nassert solution.thirdMax([123, -574, 417, 364, 428, 306, 267, 630, 310, -468]) == 417\nassert solution.thirdMax([287, 81, 322, 645, 758, -217, 254, 5, -380]) == 322\nassert solution.thirdMax([6, 105, -198, 540, -794, 51, -906, -842, -768]) == 51\nassert solution.thirdMax([-871, 907, -426, 533, 842, -98, 13]) == 533\nassert solution.thirdMax([-223]) == -223\nassert solution.thirdMax([456, -801, -367, 149, -777, -968, -308, -55, 209, 758]) == 209\nassert solution.thirdMax([105, 276, -720, 148, 290, 123, -832, 911, 530, -264]) == 290\nassert solution.thirdMax([488, -827, -129, 80, 645, -979, -522, -704, 169, -274]) == 169\nassert solution.thirdMax([-387, -591]) == -387\nassert solution.thirdMax([-128, -432, 838, 150, 856, -493, 912, -776, 272, -464]) == 838\nassert solution.thirdMax([-689, 127, -208, 59, 246, -949, -127]) == 59\nassert solution.thirdMax([-190, 101, -537, 891, -948]) == -190\nassert solution.thirdMax([696, 651, 871, -937, -691, -33, -812, 712, 117]) == 696\nassert solution.thirdMax([314, 758, -817, -104, 427]) == 314\nassert solution.thirdMax([-203, 604, 846, 275, -53, -549, 857]) == 604\nassert solution.thirdMax([448]) == 448\nassert solution.thirdMax([649, 61, 651, 530, 685, 712, 875, 776]) == 712\nassert solution.thirdMax([-404, 870, 452, 116, 140]) == 140\nassert solution.thirdMax([566, -638, -863, 465, -618, 23]) == 23\nassert solution.thirdMax([-706, 606, 285, -322, -1, 489, -538, 719, -344]) == 489\nassert solution.thirdMax([973, 37, -233]) == -233\nassert solution.thirdMax([805, 248, -958, -950, 576]) == 248\nassert solution.thirdMax([424, -576, 863, -642, -607]) == -576\nassert solution.thirdMax([-746, -357, 929, -474, -512, 64, -44, -695]) == -44\nassert solution.thirdMax([-719, 512, 149, -988, 274, -229, 307, -255]) == 274\nassert solution.thirdMax([857, 387, 735, 583, 214]) == 583\nassert solution.thirdMax([342, 689, 364, -140, 649, -267, -64, 43, 40]) == 364\nassert solution.thirdMax([-10, 959, -26, -391]) == -26\nassert solution.thirdMax([747, -520, 677, 96, 43, 228]) == 228",
  "inefficient_solution": "class Solution:\n    def thirdMax(self, nums: List[int]) -> int:\n        max_dict = {}\n        for num in nums:\n            max_dict[num] = None\n        max_nums = list(max_dict.keys())\n        max_nums.sort(reverse=True)\n        if len(max_nums) < 3:\n            return max_nums[0]\n        else:\n            return max_nums[2]",
  "is_python": true
}