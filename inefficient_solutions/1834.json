{
  "problem_idx": 1834,
  "task_name": "Single",
  "markdown_description": "\nYou are given `n`\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from `0` to `n - 1` represented by a 2D integer array `tasks`, where `tasks[i] = [enqueueTimei, processingTimei]` means that the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b task will be available to process at `enqueueTimei` and will take `processingTimei`to finish processing.\n\n\nYou have a single-threaded CPU that can process **at most one** task at a time and will act in the following way:\n\n\n* If the CPU is idle and there are no available tasks to process, the CPU remains idle.\n* If the CPU is idle and there are available tasks, the CPU will choose the one with the **shortest processing time**. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.\n* Once a task is started, the CPU will **process the entire task** without stopping.\n* The CPU can finish a task then start a new one instantly.\n\n\nReturn *the order in which the CPU will process the tasks.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tasks = [[1,2],[2,4],[3,2],[4,1]]\n**Output:** [0,2,3,1]\n**Explanation:** The events go as follows: \n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\n**Output:** [4,3,2,0,1]\n**Explanation****:** The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `tasks.length == n`\n* `1 <= n <= 105`\n* `1 <= enqueueTimei, processingTimei <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        for i, task in enumerate(tasks):\n            task.append(i)\n        tasks.sort()\n        ans = []\n        q = []\n        n = len(tasks)\n        i = t = 0\n        while q or i < n:\n            if not q:\n                t = max(t, tasks[i][0])\n            while i < n and tasks[i][0] <= t:\n                heappush(q, (tasks[i][1], tasks[i][2]))\n                i += 1\n            pt, j = heappop(q)\n            ans.append(j)\n            t += pt\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom heapq import heappush, heappop\n\n# Task description\nclass Solution:\n    def getOrder(self, tasks: List[List[int]]) -> List[int]:\n        for i, task in enumerate(tasks):\n            task.append(i)\n        tasks.sort()\n        ans = []\n        q = []\n        n = len(tasks)\n        i = t = 0\n        while q or i < n:\n            if not q:\n                t = max(t, tasks[i][0])\n            while i < n and tasks[i][0] <= t:\n                heappush(q, (tasks[i][1], tasks[i][2]))\n                i += 1\n            pt, j = heappop(q)\n            ans.append(j)\n            t += pt\n        return ans\n\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random tasks\n    tasks = []\n    for _ in range(random.randint(1, 10)):\n        enqueueTime = random.randint(1, 100)\n        processingTime = random.randint(1, 10)\n        tasks.append([enqueueTime, processingTime])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getOrder(tasks)\n\n    return tasks, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tasks, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getOrder(tasks) == expected_result\n        print(f\"assert solution.getOrder({tasks}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getOrder({tasks}) == {expected_result}\")  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getOrder([[14, 10, 5, 0], [28, 4, 1, 1], [44, 9, 0, 2], [49, 7, 9, 3], [59, 1, 4, 4], [69, 6, 2, 5], [72, 6, 6, 6], [74, 2, 3, 7], [76, 1, 7, 8], [100, 10, 8, 9]]) == [5, 1, 0, 9, 4, 2, 3, 7, 6, 8]\nassert solution.getOrder([[46, 10, 0, 0], [51, 6, 2, 1], [91, 4, 1, 2]]) == [0, 2, 1]\nassert solution.getOrder([[7, 8, 2, 0], [52, 2, 0, 1], [69, 6, 1, 2]]) == [2, 0, 1]\nassert solution.getOrder([[21, 8, 0, 0], [37, 9, 1, 1], [39, 8, 4, 2], [42, 4, 3, 3], [58, 3, 2, 4]]) == [0, 1, 3, 4, 2]\nassert solution.getOrder([[8, 5, 0, 0], [19, 8, 1, 1], [40, 6, 5, 2], [55, 1, 4, 3], [64, 3, 2, 4], [81, 4, 3, 5]]) == [0, 1, 5, 4, 2, 3]\nassert solution.getOrder([[1, 7, 2, 0], [14, 2, 1, 1], [34, 9, 4, 2], [53, 3, 0, 3], [82, 7, 9, 4], [84, 7, 7, 5], [85, 9, 3, 6], [90, 4, 8, 7], [94, 6, 5, 8], [98, 2, 6, 9]]) == [2, 1, 4, 0, 9, 7, 8, 6, 5, 3]\nassert solution.getOrder([[49, 1, 1, 0], [67, 4, 0, 1]]) == [1, 0]\nassert solution.getOrder([[19, 6, 8, 0], [22, 7, 1, 1], [45, 1, 3, 2], [47, 6, 2, 3], [57, 7, 5, 4], [67, 10, 0, 5], [69, 5, 4, 6], [82, 8, 7, 7], [100, 1, 6, 8]]) == [8, 1, 3, 2, 5, 0, 4, 7, 6]\nassert solution.getOrder([[35, 6, 3, 0], [46, 2, 2, 1], [52, 3, 1, 2], [62, 6, 4, 3], [77, 3, 0, 4]]) == [3, 2, 1, 4, 0]\nassert solution.getOrder([[8, 7, 1, 0], [16, 2, 0, 1], [23, 1, 5, 2], [35, 7, 7, 3], [39, 6, 3, 4], [40, 2, 4, 5], [75, 10, 6, 6], [83, 3, 2, 7]]) == [1, 0, 5, 7, 4, 3, 6, 2]\nassert solution.getOrder([[5, 5, 1, 0], [22, 9, 6, 1], [33, 2, 3, 2], [40, 8, 0, 3], [57, 10, 9, 4], [58, 2, 5, 5], [67, 1, 4, 6], [77, 10, 8, 7], [85, 9, 7, 8], [97, 8, 2, 9]]) == [1, 6, 3, 0, 9, 4, 5, 8, 7, 2]\nassert solution.getOrder([[7, 9, 2, 0], [13, 3, 4, 1], [14, 7, 1, 2], [47, 2, 3, 3], [50, 5, 0, 4], [54, 3, 5, 5], [55, 5, 6, 6]]) == [2, 4, 1, 3, 0, 5, 6]\nassert solution.getOrder([[4, 5, 6, 0], [27, 9, 7, 1], [39, 2, 3, 2], [55, 2, 4, 3], [66, 10, 2, 4], [76, 3, 1, 5], [88, 9, 5, 6], [90, 5, 0, 7], [98, 2, 8, 8]]) == [6, 7, 3, 4, 2, 1, 5, 0, 8]\nassert solution.getOrder([[9, 5, 2, 0], [16, 5, 3, 1], [24, 8, 4, 2], [41, 3, 1, 3], [59, 6, 5, 4], [63, 3, 0, 5], [96, 10, 6, 6]]) == [2, 3, 4, 1, 5, 0, 6]\nassert solution.getOrder([[13, 10, 2, 0], [25, 1, 4, 1], [38, 1, 1, 2], [62, 10, 5, 3], [69, 7, 3, 4], [87, 9, 0, 5]]) == [2, 4, 1, 5, 3, 0]\nassert solution.getOrder([[63, 2, 0, 0]]) == [0]\nassert solution.getOrder([[13, 1, 0, 0], [95, 4, 1, 1]]) == [0, 1]\nassert solution.getOrder([[2, 6, 4, 0], [8, 10, 1, 1], [9, 9, 2, 2], [60, 1, 0, 3], [98, 10, 3, 4]]) == [4, 1, 2, 0, 3]\nassert solution.getOrder([[4, 6, 0, 0]]) == [0]\nassert solution.getOrder([[26, 8, 0, 0], [47, 9, 1, 1]]) == [0, 1]\nassert solution.getOrder([[8, 7, 1, 0], [20, 8, 8, 1], [21, 9, 2, 2], [21, 10, 4, 3], [24, 4, 5, 4], [33, 8, 0, 5], [35, 4, 3, 6], [35, 4, 6, 7], [90, 5, 7, 8]]) == [1, 8, 5, 2, 3, 6, 0, 4, 7]\nassert solution.getOrder([[9, 2, 9, 0], [12, 2, 8, 1], [27, 8, 0, 2], [31, 5, 4, 3], [34, 10, 7, 4], [58, 6, 2, 5], [62, 1, 5, 6], [75, 5, 1, 7], [75, 5, 3, 8], [81, 7, 6, 9]]) == [9, 8, 0, 4, 7, 2, 5, 1, 3, 6]\nassert solution.getOrder([[4, 4, 5, 0], [6, 1, 2, 1], [10, 5, 7, 2], [27, 10, 3, 3], [35, 7, 4, 4], [37, 3, 0, 5], [51, 10, 1, 6], [83, 9, 6, 7]]) == [5, 2, 7, 3, 0, 4, 1, 6]\nassert solution.getOrder([[16, 9, 2, 0], [27, 9, 0, 1], [69, 3, 3, 2], [78, 7, 4, 3], [95, 4, 1, 4]]) == [2, 0, 3, 4, 1]\nassert solution.getOrder([[42, 10, 0, 0], [99, 6, 1, 1]]) == [0, 1]\nassert solution.getOrder([[33, 3, 3, 0], [45, 7, 0, 1], [51, 10, 2, 2], [64, 7, 4, 3], [68, 3, 1, 4], [90, 7, 5, 5]]) == [3, 0, 2, 4, 1, 5]\nassert solution.getOrder([[25, 1, 3, 0], [31, 5, 4, 1], [53, 5, 0, 2], [90, 4, 1, 3], [96, 4, 2, 4], [98, 7, 5, 5], [98, 10, 6, 6]]) == [3, 4, 0, 1, 2, 5, 6]\nassert solution.getOrder([[12, 7, 5, 0], [22, 6, 0, 1], [25, 7, 3, 2], [64, 8, 2, 3], [78, 10, 1, 4], [82, 7, 6, 5], [95, 10, 4, 6]]) == [5, 0, 3, 2, 1, 6, 4]\nassert solution.getOrder([[9, 3, 5, 0], [24, 8, 0, 1], [44, 3, 2, 2], [63, 10, 1, 3], [79, 10, 4, 4], [90, 2, 3, 5], [98, 9, 6, 6]]) == [5, 0, 2, 1, 4, 3, 6]\nassert solution.getOrder([[29, 3, 1, 0], [47, 5, 0, 1]]) == [1, 0]\nassert solution.getOrder([[4, 3, 4, 0], [9, 4, 8, 1], [12, 4, 2, 2], [20, 10, 7, 3], [23, 4, 6, 4], [29, 10, 0, 5], [50, 2, 3, 6], [54, 1, 1, 7], [63, 7, 5, 8]]) == [4, 8, 2, 7, 6, 0, 3, 1, 5]\nassert solution.getOrder([[35, 1, 2, 0], [35, 5, 0, 1], [54, 3, 3, 2], [76, 5, 1, 3]]) == [2, 0, 3, 1]\nassert solution.getOrder([[3, 5, 0, 0], [13, 8, 2, 1], [30, 6, 4, 2], [43, 4, 5, 3], [91, 7, 3, 4], [93, 4, 1, 5]]) == [0, 2, 4, 5, 3, 1]\nassert solution.getOrder([[11, 7, 2, 0], [16, 1, 9, 1], [22, 1, 4, 2], [28, 5, 1, 3], [37, 5, 7, 4], [50, 4, 5, 5], [54, 6, 3, 6], [57, 5, 0, 7], [80, 1, 6, 8], [88, 8, 8, 9]]) == [2, 9, 4, 1, 7, 5, 3, 0, 6, 8]\nassert solution.getOrder([[79, 9, 0, 0]]) == [0]\nassert solution.getOrder([[1, 3, 7, 0], [16, 10, 2, 1], [21, 2, 1, 2], [37, 3, 3, 3], [58, 8, 5, 4], [75, 5, 8, 5], [78, 8, 4, 6], [87, 3, 0, 7], [100, 9, 6, 8]]) == [7, 2, 1, 3, 5, 8, 4, 0, 6]\nassert solution.getOrder([[13, 1, 4, 0], [23, 2, 5, 1], [29, 2, 2, 2], [38, 9, 0, 3], [51, 2, 6, 4], [78, 5, 3, 5], [78, 7, 1, 6]]) == [4, 5, 2, 0, 6, 3, 1]\nassert solution.getOrder([[13, 6, 0, 0], [15, 1, 4, 1], [29, 4, 1, 2], [48, 1, 3, 3], [64, 4, 5, 4], [66, 4, 2, 5]]) == [0, 4, 1, 3, 5, 2]\nassert solution.getOrder([[3, 4, 1, 0], [39, 7, 4, 1], [67, 6, 0, 2], [70, 4, 3, 3], [95, 6, 2, 4]]) == [1, 4, 0, 3, 2]\nassert solution.getOrder([[6, 4, 4, 0], [22, 9, 2, 1], [23, 2, 1, 2], [70, 5, 3, 3], [75, 3, 0, 4], [81, 10, 5, 5]]) == [4, 2, 1, 3, 0, 5]\nassert solution.getOrder([[3, 7, 1, 0], [26, 5, 2, 1], [38, 2, 0, 2], [42, 3, 3, 3], [56, 5, 4, 4]]) == [1, 2, 0, 3, 4]\nassert solution.getOrder([[15, 6, 7, 0], [22, 5, 1, 1], [27, 8, 9, 2], [35, 5, 4, 3], [68, 5, 5, 4], [72, 3, 6, 5], [81, 3, 2, 6], [82, 2, 8, 7], [90, 6, 0, 8], [97, 6, 3, 9]]) == [7, 1, 9, 4, 5, 6, 2, 8, 0, 3]\nassert solution.getOrder([[56, 1, 0, 0], [61, 3, 2, 1], [69, 9, 1, 2]]) == [0, 2, 1]\nassert solution.getOrder([[11, 1, 4, 0], [29, 9, 0, 1], [49, 5, 5, 2], [57, 4, 3, 3], [59, 6, 2, 4], [98, 5, 1, 5]]) == [4, 0, 5, 3, 2, 1]\nassert solution.getOrder([[21, 10, 0, 0]]) == [0]\nassert solution.getOrder([[20, 3, 3, 0], [31, 3, 2, 1], [40, 9, 1, 2], [42, 6, 6, 3], [46, 2, 5, 4], [77, 2, 0, 5], [90, 4, 4, 6], [96, 2, 7, 7]]) == [3, 2, 1, 5, 6, 0, 4, 7]\nassert solution.getOrder([[48, 8, 0, 0], [51, 9, 1, 1]]) == [0, 1]\nassert solution.getOrder([[3, 4, 3, 0], [16, 1, 4, 1], [24, 1, 5, 2], [45, 4, 1, 3], [57, 3, 0, 4], [85, 10, 2, 5]]) == [3, 4, 5, 1, 0, 2]\nassert solution.getOrder([[36, 3, 0, 0]]) == [0]\nassert solution.getOrder([[62, 5, 0, 0], [95, 4, 1, 1]]) == [0, 1]\nassert solution.getOrder([[15, 9, 0, 0], [86, 2, 1, 1]]) == [0, 1]\nassert solution.getOrder([[19, 5, 1, 0], [23, 7, 6, 1], [39, 7, 3, 2], [42, 10, 8, 3], [56, 7, 7, 4], [65, 6, 5, 5], [66, 2, 0, 6], [67, 6, 2, 7], [89, 8, 9, 8], [98, 1, 4, 9]]) == [1, 6, 3, 8, 7, 5, 0, 2, 9, 4]\nassert solution.getOrder([[20, 2, 0, 0], [21, 9, 3, 1], [36, 3, 5, 2], [40, 2, 6, 3], [58, 9, 1, 4], [75, 4, 4, 5], [86, 10, 2, 6]]) == [0, 3, 5, 6, 1, 4, 2]\nassert solution.getOrder([[7, 3, 1, 0], [13, 10, 3, 1], [28, 10, 0, 2], [36, 5, 4, 3], [92, 1, 2, 4], [94, 4, 5, 5], [100, 7, 6, 6]]) == [1, 3, 0, 4, 2, 5, 6]\nassert solution.getOrder([[38, 3, 0, 0]]) == [0]\nassert solution.getOrder([[37, 7, 1, 0], [53, 5, 0, 1], [67, 3, 2, 2]]) == [1, 0, 2]\nassert solution.getOrder([[29, 3, 3, 0], [49, 2, 0, 1], [68, 6, 4, 2], [69, 5, 2, 3], [69, 9, 6, 4], [94, 6, 1, 5], [97, 9, 5, 6]]) == [3, 0, 4, 2, 6, 1, 5]\nassert solution.getOrder([[22, 4, 0, 0], [96, 9, 1, 1]]) == [0, 1]\nassert solution.getOrder([[28, 1, 7, 0], [40, 7, 1, 1], [46, 7, 4, 2], [59, 5, 0, 3], [72, 4, 6, 4], [78, 1, 2, 5], [89, 1, 3, 6], [92, 3, 5, 7]]) == [7, 1, 4, 0, 6, 2, 3, 5]\nassert solution.getOrder([[15, 7, 3, 0], [35, 5, 5, 1], [48, 2, 4, 2], [57, 2, 1, 3], [58, 6, 0, 4], [82, 4, 2, 5], [91, 2, 6, 6]]) == [3, 5, 4, 1, 0, 2, 6]\nassert solution.getOrder([[9, 3, 1, 0], [50, 4, 0, 1], [50, 5, 5, 2], [61, 6, 3, 3], [85, 8, 4, 4], [94, 6, 2, 5]]) == [1, 0, 5, 3, 4, 2]\nassert solution.getOrder([[23, 9, 1, 0], [29, 4, 6, 1], [30, 8, 7, 2], [51, 4, 0, 3], [55, 8, 3, 4], [81, 2, 8, 5], [82, 9, 4, 6], [84, 10, 2, 7], [91, 9, 9, 8], [93, 6, 5, 9]]) == [1, 6, 7, 0, 3, 8, 4, 9, 5, 2]\nassert solution.getOrder([[4, 9, 7, 0], [9, 2, 4, 1], [19, 6, 0, 2], [20, 5, 6, 3], [22, 7, 5, 4], [32, 7, 3, 5], [42, 7, 2, 6], [79, 8, 1, 7]]) == [7, 4, 0, 6, 5, 3, 2, 1]\nassert solution.getOrder([[14, 1, 3, 0], [41, 6, 0, 1], [44, 5, 7, 2], [51, 2, 1, 3], [56, 5, 4, 4], [67, 7, 2, 5], [71, 3, 6, 6], [83, 9, 8, 7], [95, 8, 5, 8]]) == [3, 0, 7, 1, 4, 2, 6, 8, 5]\nassert solution.getOrder([[45, 10, 2, 0], [61, 7, 1, 1], [67, 5, 0, 2]]) == [2, 1, 0]\nassert solution.getOrder([[85, 4, 0, 0]]) == [0]\nassert solution.getOrder([[10, 3, 0, 0]]) == [0]\nassert solution.getOrder([[4, 3, 2, 0], [38, 9, 3, 1], [39, 5, 0, 2], [40, 2, 4, 3], [90, 1, 1, 4]]) == [2, 3, 4, 0, 1]\nassert solution.getOrder([[8, 5, 4, 0], [38, 7, 6, 1], [45, 6, 3, 2], [52, 5, 1, 3], [70, 10, 0, 4], [74, 4, 5, 5], [83, 8, 2, 6]]) == [4, 6, 3, 1, 0, 5, 2]\nassert solution.getOrder([[80, 2, 0, 0]]) == [0]\nassert solution.getOrder([[8, 4, 0, 0], [33, 5, 2, 1], [55, 6, 1, 2]]) == [0, 2, 1]\nassert solution.getOrder([[7, 1, 0, 0], [17, 9, 1, 1]]) == [0, 1]\nassert solution.getOrder([[23, 7, 4, 0], [30, 7, 3, 1], [55, 4, 0, 2], [58, 10, 6, 3], [70, 8, 2, 4], [88, 7, 1, 5], [91, 3, 5, 6]]) == [4, 3, 0, 6, 2, 1, 5]\nassert solution.getOrder([[39, 6, 0, 0], [73, 10, 1, 1]]) == [0, 1]\nassert solution.getOrder([[22, 6, 0, 0], [44, 3, 1, 1], [57, 9, 2, 2], [72, 3, 3, 3]]) == [0, 1, 2, 3]\nassert solution.getOrder([[14, 1, 6, 0], [23, 9, 8, 1], [36, 5, 1, 2], [41, 5, 0, 3], [51, 10, 3, 4], [88, 5, 5, 5], [90, 2, 2, 6], [95, 7, 4, 7], [99, 3, 7, 8]]) == [6, 8, 1, 0, 3, 5, 2, 4, 7]\nassert solution.getOrder([[31, 10, 1, 0], [63, 2, 0, 1]]) == [1, 0]\nassert solution.getOrder([[87, 9, 0, 0], [98, 5, 1, 1]]) == [0, 1]\nassert solution.getOrder([[5, 5, 3, 0], [14, 1, 1, 1], [25, 8, 2, 2], [81, 1, 0, 3]]) == [3, 1, 2, 0]\nassert solution.getOrder([[22, 4, 2, 0], [61, 1, 1, 1], [70, 5, 0, 2]]) == [2, 1, 0]\nassert solution.getOrder([[32, 2, 3, 0], [40, 9, 0, 1], [41, 10, 4, 2], [69, 5, 1, 3], [85, 8, 2, 4]]) == [3, 0, 4, 1, 2]\nassert solution.getOrder([[47, 3, 5, 0], [59, 4, 0, 1], [59, 5, 6, 2], [74, 2, 7, 3], [75, 3, 3, 4], [80, 4, 2, 5], [91, 4, 1, 6], [92, 9, 4, 7]]) == [5, 0, 6, 7, 3, 2, 1, 4]\nassert solution.getOrder([[28, 10, 3, 0], [41, 6, 1, 1], [43, 3, 0, 2], [51, 9, 2, 3]]) == [3, 1, 0, 2]\nassert solution.getOrder([[2, 7, 4, 0], [18, 9, 5, 1], [68, 4, 3, 2], [72, 5, 0, 3], [86, 9, 1, 4], [91, 2, 2, 5]]) == [4, 5, 3, 0, 1, 2]\nassert solution.getOrder([[5, 5, 1, 0], [77, 5, 2, 1], [78, 6, 0, 2]]) == [1, 2, 0]\nassert solution.getOrder([[15, 4, 1, 0], [18, 2, 0, 1]]) == [1, 0]\nassert solution.getOrder([[9, 3, 0, 0]]) == [0]\nassert solution.getOrder([[28, 1, 3, 0], [33, 3, 0, 1], [39, 4, 1, 2], [44, 8, 4, 3], [46, 10, 2, 4]]) == [3, 0, 1, 4, 2]\nassert solution.getOrder([[10, 7, 6, 0], [12, 7, 7, 1], [50, 10, 2, 2], [53, 7, 9, 3], [54, 5, 0, 4], [65, 3, 4, 5], [66, 1, 5, 6], [74, 6, 1, 7], [84, 5, 3, 8], [98, 7, 8, 9]]) == [6, 7, 2, 0, 4, 5, 9, 1, 3, 8]\nassert solution.getOrder([[18, 8, 0, 0], [63, 9, 2, 1], [93, 8, 1, 2]]) == [0, 2, 1]\nassert solution.getOrder([[13, 6, 0, 0], [51, 5, 2, 1], [53, 8, 1, 2], [68, 4, 3, 3]]) == [0, 2, 1, 3]\nassert solution.getOrder([[11, 7, 7, 0], [12, 4, 1, 1], [24, 3, 3, 2], [31, 8, 5, 3], [54, 5, 2, 4], [55, 10, 6, 5], [73, 2, 0, 6], [73, 8, 4, 7]]) == [7, 1, 3, 5, 2, 6, 0, 4]\nassert solution.getOrder([[16, 9, 1, 0], [41, 1, 2, 1], [78, 2, 3, 2], [89, 9, 0, 3]]) == [1, 2, 3, 0]\nassert solution.getOrder([[4, 7, 0, 0], [28, 6, 3, 1], [76, 4, 2, 2], [100, 7, 1, 3]]) == [0, 3, 2, 1]\nassert solution.getOrder([[18, 6, 2, 0], [35, 7, 1, 1], [52, 8, 4, 2], [70, 2, 0, 3], [76, 3, 3, 4]]) == [2, 1, 4, 0, 3]\nassert solution.getOrder([[7, 2, 0, 0], [16, 4, 6, 1], [40, 10, 5, 2], [42, 2, 4, 3], [73, 9, 3, 4], [86, 1, 2, 5], [95, 10, 1, 6]]) == [0, 6, 5, 4, 3, 2, 1]\nassert solution.getOrder([[61, 8, 0, 0]]) == [0]\nassert solution.getOrder([[14, 4, 4, 0], [18, 2, 1, 1], [23, 9, 8, 2], [27, 9, 7, 3], [29, 6, 5, 4], [32, 5, 2, 5], [48, 4, 3, 6], [61, 3, 0, 7], [65, 10, 6, 8]]) == [4, 1, 8, 2, 5, 7, 3, 0, 6]\nassert solution.getOrder([[28, 1, 0, 0], [42, 9, 3, 1], [45, 3, 1, 2], [66, 3, 5, 3], [77, 10, 4, 4], [87, 1, 2, 5]]) == [0, 3, 1, 5, 4, 2]\nassert solution.getOrder([[13, 3, 3, 0], [34, 5, 4, 1], [39, 5, 1, 2], [70, 5, 2, 3], [74, 1, 0, 4]]) == [3, 4, 1, 2, 0]",
  "inefficient_solution": "class Solution:\n    def getOrder(self, tasks):\n        tasks_with_idx = []\n        for i, task in enumerate(tasks):\n            task_with_idx = task + [i]\n            tasks_with_idx.extend(task_with_idx)\n        tasks_with_idx.sort()\n        \n        ans = []\n        q = []\n        n = len(tasks)\n        i = t = 0\n        while q or i < n * 3:\n            if not q:\n                t = max(t, tasks_with_idx[i*3])\n            while i < n * 3 and tasks_with_idx[i*3] <= t:\n                q_with_idx = (tasks_with_idx[i*3+1], tasks_with_idx[i*3+2], i)\n                q.append(q_with_idx)\n                i += 3\n            if q:\n                pt, j, idx = min(q)\n                q.remove((pt, j, idx))\n                ans.append(idx)\n                t += pt\n            else:\n                t += 1\n        return ans",
  "is_python": true
}