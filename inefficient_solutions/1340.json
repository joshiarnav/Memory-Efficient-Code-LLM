{
  "problem_idx": 1340,
  "task_name": "Jump Game V",
  "markdown_description": "\nGiven an array of\u00a0integers `arr` and an integer `d`. In one step you can jump from index `i` to index:\n\n\n* `i + x` where:\u00a0`i + x < arr.length` and  `0 <\u00a0x <= d`.\n* `i - x` where:\u00a0`i - x >= 0` and  `0 <\u00a0x <= d`.\n\n\nIn addition, you can only jump from index `i` to index `j`\u00a0if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More formally `min(i,\u00a0j) < k < max(i, j)`).\n\n\nYou can choose any index of the array and start jumping. Return *the maximum number of indices*\u00a0you can visit.\n\n\nNotice that you can not jump outside of the array at any time.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1340.Jump%20Game%20V/images/meta-chart.jpeg)\n\n```\n\n**Input:** arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\n**Output:** 4\n**Explanation:** You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [3,3,3,3,3], d = 3\n**Output:** 1\n**Explanation:** You can start at any index. You always cannot jump to any index.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [7,6,5,4,3,2,1], d = 1\n**Output:** 7\n**Explanation:** Start at index 0. You can visit all the indicies. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 1000`\n* `1 <= arr[i] <= 105`\n* `1 <= d <= arr.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxJumps(self, arr: List[int], d: int) -> int:\n        n = len(arr)\n        f = [1] * n\n        for x, i in sorted(zip(arr, range(n))):\n            for j in range(i - 1, -1, -1):\n                if i - j > d or arr[j] >= x:\n                    break\n                f[i] = max(f[i], 1 + f[j])\n            for j in range(i + 1, n):\n                if j - i > d or arr[j] >= x:\n                    break\n                f[i] = max(f[i], 1 + f[j])\n        return max(f)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxJumps(self, arr: List[int], d: int) -> int:\n        n = len(arr)\n        f = [1] * n\n        for x, i in sorted(zip(arr, range(n))):\n            for j in range(i - 1, -1, -1):\n                if i - j > d or arr[j] >= x:\n                    break\n                f[i] = max(f[i], 1 + f[j])\n            for j in range(i + 1, n):\n                if j - i > d or arr[j] >= x:\n                    break\n                f[i] = max(f[i], 1 + f[j])\n        return max(f)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate the arr list\n    arr = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Generate a random d\n    d = random.randint(1, len(arr))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxJumps(arr, d)\n\n    return arr, d, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, d, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxJumps(arr, d) == expected_result\n        print(f\"assert solution.maxJumps({arr}, {d}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxJumps({arr}, {d}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxJumps([19], 1) == 1\nassert solution.maxJumps([70, 30, 100, 2, 89], 1) == 2\nassert solution.maxJumps([40, 26, 27], 3) == 3\nassert solution.maxJumps([13, 43, 91], 3) == 3\nassert solution.maxJumps([40, 22, 99, 44, 83], 4) == 3\nassert solution.maxJumps([23, 70, 35, 98, 28, 60, 88], 7) == 4\nassert solution.maxJumps([5, 35, 53, 6, 46, 3], 1) == 3\nassert solution.maxJumps([82, 10], 2) == 2\nassert solution.maxJumps([33, 21, 4, 95, 87, 80, 8], 5) == 4\nassert solution.maxJumps([53, 7], 2) == 2\nassert solution.maxJumps([28, 65, 71, 35, 85, 64, 79, 46, 50], 7) == 4\nassert solution.maxJumps([53, 78, 31, 23, 13], 5) == 4\nassert solution.maxJumps([97, 80, 98], 1) == 2\nassert solution.maxJumps([46, 17, 92, 41, 72, 29, 86, 33, 91, 6], 4) == 4\nassert solution.maxJumps([38, 24, 80, 69, 30, 93, 45, 54], 5) == 4\nassert solution.maxJumps([3, 21, 76], 1) == 3\nassert solution.maxJumps([93, 14, 38], 3) == 3\nassert solution.maxJumps([86, 78, 34, 82, 83, 14, 43, 100, 59, 13], 1) == 3\nassert solution.maxJumps([18, 6, 30, 50, 8, 2, 95, 37], 5) == 5\nassert solution.maxJumps([61, 14, 97, 73, 70, 81, 87, 46, 16, 48], 5) == 5\nassert solution.maxJumps([55, 38, 17], 2) == 3\nassert solution.maxJumps([54, 11, 55, 90], 1) == 3\nassert solution.maxJumps([13, 47, 54, 73, 91, 63, 68, 19, 84], 8) == 5\nassert solution.maxJumps([87, 59, 69, 8], 3) == 3\nassert solution.maxJumps([71, 36, 52, 16, 53, 31, 13, 77, 57], 7) == 5\nassert solution.maxJumps([34, 80, 51, 24], 2) == 3\nassert solution.maxJumps([77, 21], 2) == 2\nassert solution.maxJumps([21, 34, 92, 98, 91, 33, 85, 25, 75, 88], 3) == 5\nassert solution.maxJumps([33, 1, 3, 37, 89, 38, 39, 10, 62, 72], 3) == 5\nassert solution.maxJumps([1, 25, 80, 56], 2) == 3\nassert solution.maxJumps([91, 39, 82, 10, 14, 6, 62, 46, 32], 9) == 5\nassert solution.maxJumps([38, 59, 2], 2) == 2\nassert solution.maxJumps([12, 60, 53, 32, 36, 54], 3) == 4\nassert solution.maxJumps([71, 97, 94, 2, 61], 2) == 4\nassert solution.maxJumps([63, 36, 14, 89], 2) == 3\nassert solution.maxJumps([79, 35], 1) == 2\nassert solution.maxJumps([85, 96, 28, 83, 38], 4) == 3\nassert solution.maxJumps([63, 31, 99, 48, 45, 33, 29, 82], 4) == 5\nassert solution.maxJumps([32, 90, 13], 2) == 2\nassert solution.maxJumps([10, 3, 79, 5, 17, 100], 1) == 3\nassert solution.maxJumps([21, 15, 22, 16, 58, 26, 34, 49, 71, 6], 8) == 5\nassert solution.maxJumps([27, 18, 56, 19, 67], 2) == 4\nassert solution.maxJumps([55, 27], 2) == 2\nassert solution.maxJumps([14, 68, 49, 17, 3, 57], 2) == 4\nassert solution.maxJumps([79, 53, 60, 46, 57, 78, 85], 2) == 4\nassert solution.maxJumps([88, 93, 90], 1) == 2\nassert solution.maxJumps([67, 25, 45, 26, 79, 77, 7, 5], 3) == 4\nassert solution.maxJumps([46, 43], 1) == 2\nassert solution.maxJumps([13, 2, 66, 5, 25], 5) == 3\nassert solution.maxJumps([94, 78, 54, 4, 23, 79, 13, 96], 3) == 5\nassert solution.maxJumps([7, 17, 76, 58, 70, 54, 52, 59, 29], 2) == 4\nassert solution.maxJumps([90, 82, 67, 69, 29, 7, 98], 2) == 5\nassert solution.maxJumps([82, 78, 18], 3) == 3\nassert solution.maxJumps([67], 1) == 1\nassert solution.maxJumps([34], 1) == 1\nassert solution.maxJumps([51], 1) == 1\nassert solution.maxJumps([100, 72], 1) == 2\nassert solution.maxJumps([87, 50, 86, 15, 44, 72, 26, 34], 3) == 5\nassert solution.maxJumps([81, 57, 17], 1) == 3\nassert solution.maxJumps([49, 7, 14, 6, 34], 1) == 2\nassert solution.maxJumps([63, 94, 1, 92, 91, 10, 34, 41], 1) == 3\nassert solution.maxJumps([1, 66, 8, 89, 23], 1) == 2\nassert solution.maxJumps([23, 63, 20, 37, 9, 17, 90], 4) == 4\nassert solution.maxJumps([37, 1], 2) == 2\nassert solution.maxJumps([19, 85, 61, 55], 4) == 3\nassert solution.maxJumps([33, 68, 40, 34], 1) == 3\nassert solution.maxJumps([32, 48, 27, 49, 10, 60], 5) == 4\nassert solution.maxJumps([18, 95, 72, 43, 82, 63, 86, 80, 81, 41], 4) == 4\nassert solution.maxJumps([57, 15, 89, 74, 28, 83, 68], 6) == 4\nassert solution.maxJumps([64, 66, 16], 1) == 2\nassert solution.maxJumps([96, 1, 69, 17, 41, 77, 53], 5) == 5\nassert solution.maxJumps([63, 60, 91], 2) == 3\nassert solution.maxJumps([42, 8, 70, 65, 56, 33, 97, 43, 27], 5) == 5\nassert solution.maxJumps([76, 3, 99, 98, 16, 86, 31, 59, 50], 9) == 5\nassert solution.maxJumps([23, 7, 98, 84, 81, 77], 2) == 4\nassert solution.maxJumps([27, 4, 36, 47, 10, 45, 59, 63, 53, 33], 10) == 6\nassert solution.maxJumps([61], 1) == 1\nassert solution.maxJumps([19, 48], 1) == 2\nassert solution.maxJumps([49, 45, 97, 44, 89, 47, 1, 11, 8], 2) == 5\nassert solution.maxJumps([6, 71, 16, 54], 3) == 3\nassert solution.maxJumps([81], 1) == 1\nassert solution.maxJumps([74, 34, 16, 1, 7, 48, 68, 71, 30], 1) == 5\nassert solution.maxJumps([43, 5, 18, 14, 78, 41, 84, 97], 7) == 6\nassert solution.maxJumps([75, 79, 77, 26, 96, 52, 23, 87, 93], 5) == 5\nassert solution.maxJumps([41, 48, 1, 6, 85], 4) == 4\nassert solution.maxJumps([80, 30, 53, 60, 66, 88], 6) == 6\nassert solution.maxJumps([86, 25, 66, 13, 92, 82, 85, 84, 47], 6) == 4\nassert solution.maxJumps([91], 1) == 1\nassert solution.maxJumps([55, 44, 29, 87, 28, 21, 53, 60, 1], 1) == 3\nassert solution.maxJumps([43, 10, 86, 84], 4) == 3\nassert solution.maxJumps([80, 48, 85, 13, 12, 93, 69, 71, 16, 91], 4) == 4\nassert solution.maxJumps([32, 36, 55, 8, 90, 1, 94, 4], 8) == 5\nassert solution.maxJumps([78], 1) == 1\nassert solution.maxJumps([9, 71, 74, 55], 3) == 3\nassert solution.maxJumps([28, 47, 99, 77, 38, 32, 92, 36, 45, 42], 7) == 5\nassert solution.maxJumps([8, 85, 24, 82, 16], 2) == 3\nassert solution.maxJumps([73, 75, 58, 43, 93], 1) == 3\nassert solution.maxJumps([20, 72, 11, 65], 2) == 3\nassert solution.maxJumps([88], 1) == 1\nassert solution.maxJumps([19, 32], 1) == 2",
  "inefficient_solution": "class Solution:\n    def maxJumps(self, arr, d):\n        n = len(arr)\n        f = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        for i in range(n):\n            for j in range(i):\n                for k in range(1, d + 1):\n                    if j - k < 0 or arr[j] >= arr[j - k]:\n                        break\n                    f[i][j] = max(f[i][j], 1 + f[i][j - k])\n                for k in range(1, d + 1):\n                    if i - k < 0 or arr[i] >= arr[i - k]:\n                        break\n                    f[i][j] = max(f[i][j], 1 + f[i - k][j])\n        return max(max(row) for row in f)",
  "is_python": true
}