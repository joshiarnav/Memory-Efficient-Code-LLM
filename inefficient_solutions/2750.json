{
  "problem_idx": 2750,
  "task_name": "Ways to Split Array Into Good Subarrays",
  "markdown_description": "\nYou are given a binary array `nums`.\n\n\nA subarray of an array is **good** if it contains **exactly** **one** element with the value `1`.\n\n\nReturn *an integer denoting the number of ways to split the array* `nums` *into **good** subarrays*. As the number may be too large, return it **modulo** `109 + 7`.\n\n\nA subarray is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [0,1,0,0,1]\n**Output:** 3\n**Explanation:** There are 3 ways to split nums into good subarrays:\n- [0,1] [0,0,1]\n- [0,1,0] [0,1]\n- [0,1,0,0] [1]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,1,0]\n**Output:** 1\n**Explanation:** There is 1 way to split nums into good subarrays:\n- [0,1,0]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        ans, j = 1, -1\n        for i, x in enumerate(nums):\n            if x == 0:\n                continue\n            if j > -1:\n                ans = ans * (i - j) % mod\n            j = i\n        return 0 if j == -1 else ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfGoodSubarraySplits(self, nums):\n        mod = 10**9 + 7\n        ans, j = 1, -1\n        for i, x in enumerate(nums):\n            if x == 0:\n                continue\n            if j > -1:\n                ans = ans * (i - j) % mod\n            j = i\n        return 0 if j == -1 else ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random binary array of length between 1 and 10\n    nums = [random.randint(0, 1) for _ in range(random.randint(1, 10))]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfGoodSubarraySplits(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfGoodSubarraySplits(nums) == expected_result\n        print(f\"assert solution.numberOfGoodSubarraySplits({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfGoodSubarraySplits({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfGoodSubarraySplits([0, 0, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 0, 0, 1]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 1, 1]) == 2\nassert solution.numberOfGoodSubarraySplits([0, 0, 0, 1, 1, 1, 1, 1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0, 0, 0, 1, 1, 1, 0]) == 8\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0, 1, 1, 0, 1, 0, 0]) == 8\nassert solution.numberOfGoodSubarraySplits([0, 0, 0, 1, 0, 1, 1]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 1, 0, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 1, 0, 1, 1]) == 2\nassert solution.numberOfGoodSubarraySplits([1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 0, 1, 1, 1, 1, 1]) == 3\nassert solution.numberOfGoodSubarraySplits([0, 0, 0, 0, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 1]) == 2\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 0, 0, 0, 1]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0, 0, 0, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([0, 1, 0, 1, 0, 0, 1, 0]) == 6\nassert solution.numberOfGoodSubarraySplits([0]) == 0\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0, 1]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 1, 1, 1, 0, 0, 1, 1]) == 3\nassert solution.numberOfGoodSubarraySplits([1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1, 0, 1, 0, 1, 1, 0, 0, 1]) == 12\nassert solution.numberOfGoodSubarraySplits([0, 1, 0, 1, 1, 1, 1]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 0, 0, 0, 1, 1, 1, 0]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 1, 0, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 1, 0, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([0, 1, 1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0, 0, 0, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([0, 0, 0, 0, 1, 1, 1, 0, 0, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1, 0, 1, 0, 0, 0, 1, 0, 1]) == 16\nassert solution.numberOfGoodSubarraySplits([1, 1, 0, 0, 1, 0]) == 3\nassert solution.numberOfGoodSubarraySplits([0, 0, 0, 0, 0, 0, 1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 0, 1]) == 3\nassert solution.numberOfGoodSubarraySplits([0]) == 0\nassert solution.numberOfGoodSubarraySplits([1, 1, 0, 1]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0, 1, 0, 1, 0, 1, 1]) == 16\nassert solution.numberOfGoodSubarraySplits([0, 1, 0, 1, 1, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([0, 1, 0, 1, 1, 0, 1, 0, 1]) == 8\nassert solution.numberOfGoodSubarraySplits([1, 0, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 1, 0, 0, 0, 1, 1, 0, 0]) == 4\nassert solution.numberOfGoodSubarraySplits([0, 0, 0]) == 0\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 1, 0, 1, 1, 0]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 1, 0, 0, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 0, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1, 0, 1]) == 2\nassert solution.numberOfGoodSubarraySplits([0, 1, 1, 1, 0, 1, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([1]) == 1\nassert solution.numberOfGoodSubarraySplits([0]) == 0\nassert solution.numberOfGoodSubarraySplits([0, 0]) == 0\nassert solution.numberOfGoodSubarraySplits([1]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0]) == 0\nassert solution.numberOfGoodSubarraySplits([1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 1, 0, 1, 1, 1, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 0, 1, 0, 1]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 0, 0, 0, 0, 1, 0, 0, 0, 1]) == 20\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 1, 1, 1, 0, 1, 0, 1]) == 4\nassert solution.numberOfGoodSubarraySplits([0, 0, 0, 0]) == 0\nassert solution.numberOfGoodSubarraySplits([1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0]) == 0\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 1, 1, 1, 0, 0, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1, 1, 0, 0, 1, 0, 1, 0, 1]) == 12\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 0, 1, 0, 1]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 0, 0, 0, 0, 1, 0, 1, 0]) == 10\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 0, 1, 0, 1, 1, 0]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 0, 0, 1, 0]) == 3\nassert solution.numberOfGoodSubarraySplits([1, 0, 0, 1, 0]) == 3\nassert solution.numberOfGoodSubarraySplits([0, 1, 1, 0, 0, 0, 0, 0, 0, 1]) == 7\nassert solution.numberOfGoodSubarraySplits([1, 0, 0, 0, 0, 1]) == 5\nassert solution.numberOfGoodSubarraySplits([0]) == 0\nassert solution.numberOfGoodSubarraySplits([1, 1, 0, 1, 0, 1, 1, 1, 0]) == 4\nassert solution.numberOfGoodSubarraySplits([1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0]) == 0\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 0, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 0, 1, 0, 1, 1]) == 4\nassert solution.numberOfGoodSubarraySplits([0, 1, 0, 0, 0, 0, 1, 1, 1, 0]) == 5\nassert solution.numberOfGoodSubarraySplits([1, 1, 0, 0, 1, 1, 0, 0]) == 3\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 0, 0, 1, 1, 0, 1, 0]) == 6\nassert solution.numberOfGoodSubarraySplits([1]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 0, 0, 1, 0]) == 3\nassert solution.numberOfGoodSubarraySplits([1]) == 1\nassert solution.numberOfGoodSubarraySplits([0]) == 0\nassert solution.numberOfGoodSubarraySplits([1, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0, 0, 0, 1, 1, 1, 1]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 0, 1, 0, 0, 0]) == 1\nassert solution.numberOfGoodSubarraySplits([0, 1, 1, 0, 1, 0]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 0, 1]) == 2\nassert solution.numberOfGoodSubarraySplits([1, 1, 1, 1, 0, 0]) == 1",
  "inefficient_solution": "class Solution:\n    def numberOfGoodSubarraySplits(self, nums: List[int]) -> int:\n        mod = 10**9 + 7\n        ans = [1]\n        j = [-1]*len(nums)\n        for i, x in enumerate(nums):\n            if x == 0:\n                j[i] = j[i-1] if i > 0 else -1\n                continue\n            if j[i] > -1:\n                ans.append(ans[i]*((i-j[i])%mod))\n                ans = ans[-1]\n            j[i] = i\n        return 0 if j[-1] == -1 else ans[-1]",
  "is_python": true
}