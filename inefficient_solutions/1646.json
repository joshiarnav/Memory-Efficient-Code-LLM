{
  "problem_idx": 1646,
  "task_name": "Get Maximum in Generated Array",
  "markdown_description": "\nYou are given an integer `n`. A **0-indexed** integer array `nums` of length `n + 1` is generated in the following way:\n\n\n* `nums[0] = 0`\n* `nums[1] = 1`\n* `nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`\n* `nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`\n\n\nReturn*the **maximum** integer in the array* `nums`\u200b\u200b\u200b.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 7\n**Output:** 3\n**Explanation:** According to the given rules:\n  nums[0] = 0\n  nums[1] = 1\n  nums[(1 * 2) = 2] = nums[1] = 1\n  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n  nums[(2 * 2) = 4] = nums[2] = 1\n  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n  nums[(3 * 2) = 6] = nums[3] = 2\n  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\nHence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def getMaximumGenerated(self, n: int) -> int:\n        if n < 2:\n            return n\n        nums = [0] * (n + 1)\n        nums[1] = 1\n        for i in range(2, n + 1):\n            nums[i] = nums[i >> 1] if i % 2 == 0 else nums[i >> 1] + nums[(i >> 1) + 1]\n        return max(nums)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def getMaximumGenerated(self, n: int) -> int:\n        if n < 2:\n            return n\n        nums = [0] * (n + 1)\n        nums[1] = 1\n        for i in range(2, n + 1):\n            nums[i] = nums[i >> 1] if i % 2 == 0 else nums[i >> 1] + nums[(i >> 1) + 1]\n        return max(nums)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random value for n\n    n = random.randint(0, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getMaximumGenerated(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getMaximumGenerated(n) == expected_result\n        print(f\"assert solution.getMaximumGenerated({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getMaximumGenerated({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getMaximumGenerated(77) == 18\nassert solution.getMaximumGenerated(77) == 18\nassert solution.getMaximumGenerated(25) == 8\nassert solution.getMaximumGenerated(99) == 21\nassert solution.getMaximumGenerated(53) == 13\nassert solution.getMaximumGenerated(78) == 18\nassert solution.getMaximumGenerated(48) == 13\nassert solution.getMaximumGenerated(82) == 18\nassert solution.getMaximumGenerated(79) == 18\nassert solution.getMaximumGenerated(100) == 21\nassert solution.getMaximumGenerated(52) == 13\nassert solution.getMaximumGenerated(66) == 13\nassert solution.getMaximumGenerated(89) == 21\nassert solution.getMaximumGenerated(91) == 21\nassert solution.getMaximumGenerated(21) == 8\nassert solution.getMaximumGenerated(68) == 13\nassert solution.getMaximumGenerated(25) == 8\nassert solution.getMaximumGenerated(99) == 21\nassert solution.getMaximumGenerated(11) == 5\nassert solution.getMaximumGenerated(18) == 5\nassert solution.getMaximumGenerated(50) == 13\nassert solution.getMaximumGenerated(84) == 19\nassert solution.getMaximumGenerated(46) == 13\nassert solution.getMaximumGenerated(17) == 5\nassert solution.getMaximumGenerated(23) == 8\nassert solution.getMaximumGenerated(39) == 11\nassert solution.getMaximumGenerated(68) == 13\nassert solution.getMaximumGenerated(76) == 18\nassert solution.getMaximumGenerated(56) == 13\nassert solution.getMaximumGenerated(83) == 19\nassert solution.getMaximumGenerated(72) == 14\nassert solution.getMaximumGenerated(16) == 5\nassert solution.getMaximumGenerated(18) == 5\nassert solution.getMaximumGenerated(35) == 9\nassert solution.getMaximumGenerated(22) == 8\nassert solution.getMaximumGenerated(94) == 21\nassert solution.getMaximumGenerated(74) == 15\nassert solution.getMaximumGenerated(18) == 5\nassert solution.getMaximumGenerated(76) == 18\nassert solution.getMaximumGenerated(26) == 8\nassert solution.getMaximumGenerated(84) == 19\nassert solution.getMaximumGenerated(62) == 13\nassert solution.getMaximumGenerated(26) == 8\nassert solution.getMaximumGenerated(87) == 21\nassert solution.getMaximumGenerated(90) == 21\nassert solution.getMaximumGenerated(45) == 13\nassert solution.getMaximumGenerated(17) == 5\nassert solution.getMaximumGenerated(56) == 13\nassert solution.getMaximumGenerated(76) == 18\nassert solution.getMaximumGenerated(58) == 13\nassert solution.getMaximumGenerated(26) == 8\nassert solution.getMaximumGenerated(84) == 19\nassert solution.getMaximumGenerated(69) == 14\nassert solution.getMaximumGenerated(27) == 8\nassert solution.getMaximumGenerated(32) == 8\nassert solution.getMaximumGenerated(90) == 21\nassert solution.getMaximumGenerated(64) == 13\nassert solution.getMaximumGenerated(15) == 5\nassert solution.getMaximumGenerated(58) == 13\nassert solution.getMaximumGenerated(22) == 8\nassert solution.getMaximumGenerated(95) == 21\nassert solution.getMaximumGenerated(7) == 3\nassert solution.getMaximumGenerated(20) == 7\nassert solution.getMaximumGenerated(41) == 11\nassert solution.getMaximumGenerated(69) == 14\nassert solution.getMaximumGenerated(85) == 21\nassert solution.getMaximumGenerated(55) == 13\nassert solution.getMaximumGenerated(39) == 11\nassert solution.getMaximumGenerated(70) == 14\nassert solution.getMaximumGenerated(88) == 21\nassert solution.getMaximumGenerated(30) == 8\nassert solution.getMaximumGenerated(80) == 18\nassert solution.getMaximumGenerated(49) == 13\nassert solution.getMaximumGenerated(85) == 21\nassert solution.getMaximumGenerated(85) == 21\nassert solution.getMaximumGenerated(55) == 13\nassert solution.getMaximumGenerated(57) == 13\nassert solution.getMaximumGenerated(52) == 13\nassert solution.getMaximumGenerated(35) == 9\nassert solution.getMaximumGenerated(60) == 13\nassert solution.getMaximumGenerated(46) == 13\nassert solution.getMaximumGenerated(21) == 8\nassert solution.getMaximumGenerated(71) == 14\nassert solution.getMaximumGenerated(45) == 13\nassert solution.getMaximumGenerated(42) == 11\nassert solution.getMaximumGenerated(73) == 15\nassert solution.getMaximumGenerated(76) == 18\nassert solution.getMaximumGenerated(67) == 13\nassert solution.getMaximumGenerated(79) == 18\nassert solution.getMaximumGenerated(55) == 13\nassert solution.getMaximumGenerated(37) == 11\nassert solution.getMaximumGenerated(5) == 3\nassert solution.getMaximumGenerated(27) == 8\nassert solution.getMaximumGenerated(51) == 13\nassert solution.getMaximumGenerated(26) == 8\nassert solution.getMaximumGenerated(39) == 11\nassert solution.getMaximumGenerated(83) == 19\nassert solution.getMaximumGenerated(89) == 21\nassert solution.getMaximumGenerated(93) == 21\nassert solution.getMaximumGenerated(12) == 5",
  "inefficient_solution": "class Solution:\n    def getMaximumGenerated(self, n: int) -> int:\n        if n < 2:\n            return n\n        nums = [0] * (n + 1)\n        for i in range(n + 1):\n            nums.append(0)\n        nums[1] = 1\n        for i in range(1, n + 1):\n            for j in range(n + 1):\n                if 2 * i <= n and j == 2 * i:\n                    nums[2 * i] = nums[i]\n                elif 2 * i + 1 <= n and j == 2 * i + 1:\n                    nums[2 * i + 1] = nums[i] + nums[i + 1]\n        return max(nums)",
  "is_python": true
}