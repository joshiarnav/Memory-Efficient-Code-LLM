{
  "problem_idx": 1320,
  "task_name": "Minimum Distance to Type a Word Using Two Fingers",
  "markdown_description": "\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1320.Minimum%20Distance%20to%20Type%20a%20Word%20Using%20Two%20Fingers/images/leetcode_keyboard.png)\nYou have a keyboard layout as shown above in the **X-Y** plane, where each English uppercase letter is located at some coordinate.\n\n\n* For example, the letter `'A'` is located at coordinate `(0, 0)`, the letter `'B'` is located at coordinate `(0, 1)`, the letter `'P'` is located at coordinate `(2, 3)` and the letter `'Z'` is located at coordinate `(4, 1)`.\n\n\nGiven the string `word`, return *the minimum total **distance** to type such string using only two fingers*.\n\n\nThe **distance** between coordinates `(x1, y1)` and `(x2, y2)` is `|x1 - x2| + |y1 - y2|`.\n\n\n**Note** that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"CAKE\"\n**Output:** 3\n**Explanation:** Using two fingers, one optimal way to type \"CAKE\" is: \nFinger 1 on letter 'C' -> cost = 0 \nFinger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 \nFinger 2 on letter 'K' -> cost = 0 \nFinger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 \nTotal distance = 3\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"HAPPY\"\n**Output:** 6\n**Explanation:** Using two fingers, one optimal way to type \"HAPPY\" is:\nFinger 1 on letter 'H' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -> cost = 0\nFinger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= word.length <= 300`\n* `word` consists of uppercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumDistance(self, word: str) -> int:\n        def dist(a: int, b: int) -> int:\n            x1, y1 = divmod(a, 6)\n            x2, y2 = divmod(b, 6)\n            return abs(x1 - x2) + abs(y1 - y2)\n\n        n = len(word)\n        f = [[[inf] * 26 for _ in range(26)] for _ in range(n)]\n        for j in range(26):\n            f[0][ord(word[0]) - ord('A')][j] = 0\n            f[0][j][ord(word[0]) - ord('A')] = 0\n        for i in range(1, n):\n            a, b = ord(word[i - 1]) - ord('A'), ord(word[i]) - ord('A')\n            d = dist(a, b)\n            for j in range(26):\n                f[i][b][j] = min(f[i][b][j], f[i - 1][a][j] + d)\n                f[i][j][b] = min(f[i][j][b], f[i - 1][j][a] + d)\n                if j == a:\n                    for k in range(26):\n                        t = dist(k, b)\n                        f[i][b][j] = min(f[i][b][j], f[i - 1][k][a] + t)\n                        f[i][j][b] = min(f[i][j][b], f[i - 1][a][k] + t)\n        a = min(f[n - 1][ord(word[-1]) - ord('A')])\n        b = min(f[n - 1][j][ord(word[-1]) - ord('A')] for j in range(26))\n        return int(min(a, b))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumDistance(self, word: str) -> int:\n        def dist(a: int, b: int) -> int:\n            x1, y1 = divmod(a, 6)\n            x2, y2 = divmod(b, 6)\n            return abs(x1 - x2) + abs(y1 - y2)\n\n        n = len(word)\n        f = [[[inf] * 26 for _ in range(26)] for _ in range(n)]\n        for j in range(26):\n            f[0][ord(word[0]) - ord('A')][j] = 0\n            f[0][j][ord(word[0]) - ord('A')] = 0\n        for i in range(1, n):\n            a, b = ord(word[i - 1]) - ord('A'), ord(word[i]) - ord('A')\n            d = dist(a, b)\n            for j in range(26):\n                f[i][b][j] = min(f[i][b][j], f[i - 1][a][j] + d)\n                f[i][j][b] = min(f[i][j][b], f[i - 1][j][a] + d)\n                if j == a:\n                    for k in range(26):\n                        t = dist(k, b)\n                        f[i][b][j] = min(f[i][b][j], f[i - 1][k][a] + t)\n                        f[i][j][b] = min(f[i][j][b], f[i - 1][a][k] + t)\n        a = min(f[n - 1][ord(word[-1]) - ord('A')])\n        b = min(f[n - 1][j][ord(word[-1]) - ord('A')] for j in range(26))\n        return int(min(a, b))\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random word\n    word_length = random.randint(2, 10)\n    word = \"\"\n    for _ in range(word_length):\n        word += chr(random.randint(ord('A'), ord('Z')))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumDistance(word)\n\n    return word, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumDistance(word) == expected_result\n        test_case_generator_results.append(f\"assert solution.minimumDistance('{word}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumDistance('LSXLR') == 5\nassert solution.minimumDistance('MBGHAAK') == 6\nassert solution.minimumDistance('HAL') == 2\nassert solution.minimumDistance('HYMTT') == 4\nassert solution.minimumDistance('WFQ') == 1\nassert solution.minimumDistance('GALJZZVWG') == 13\nassert solution.minimumDistance('YUNSMP') == 6\nassert solution.minimumDistance('BFYSJSWFLI') == 18\nassert solution.minimumDistance('BHMSCUIJQR') == 11\nassert solution.minimumDistance('QJADFEB') == 7\nassert solution.minimumDistance('DYEUEOHQ') == 9\nassert solution.minimumDistance('RANO') == 4\nassert solution.minimumDistance('ZDCMLOP') == 11\nassert solution.minimumDistance('RZ') == 0\nassert solution.minimumDistance('QG') == 0\nassert solution.minimumDistance('JCAYPBYEII') == 17\nassert solution.minimumDistance('LV') == 0\nassert solution.minimumDistance('TJV') == 2\nassert solution.minimumDistance('KCDRT') == 8\nassert solution.minimumDistance('CTCXZJJY') == 12\nassert solution.minimumDistance('IBJY') == 5\nassert solution.minimumDistance('RZYR') == 1\nassert solution.minimumDistance('YPJTWPSI') == 11\nassert solution.minimumDistance('OSOETL') == 7\nassert solution.minimumDistance('IKTQLIYO') == 11\nassert solution.minimumDistance('BF') == 0\nassert solution.minimumDistance('HIKFHXJWYC') == 17\nassert solution.minimumDistance('GXIZABD') == 13\nassert solution.minimumDistance('KUYPTCJIBZ') == 16\nassert solution.minimumDistance('ZIHDLB') == 9\nassert solution.minimumDistance('RNBTVRMWKN') == 16\nassert solution.minimumDistance('JJTLWYLSRJ') == 15\nassert solution.minimumDistance('LJHRNBK') == 8\nassert solution.minimumDistance('NJYTWEZ') == 12\nassert solution.minimumDistance('NNWSO') == 5\nassert solution.minimumDistance('QSZWOVMYSU') == 13\nassert solution.minimumDistance('RWZZN') == 4\nassert solution.minimumDistance('UVT') == 1\nassert solution.minimumDistance('RK') == 0\nassert solution.minimumDistance('XUEPAGPMYR') == 15\nassert solution.minimumDistance('FXNITSZJWN') == 18\nassert solution.minimumDistance('YHSUFAMB') == 16\nassert solution.minimumDistance('OA') == 0\nassert solution.minimumDistance('ZHMZKS') == 9\nassert solution.minimumDistance('SGZLD') == 9\nassert solution.minimumDistance('USN') == 2\nassert solution.minimumDistance('HLXUVJP') == 9\nassert solution.minimumDistance('GNKZMBRAFE') == 16\nassert solution.minimumDistance('VTKD') == 4\nassert solution.minimumDistance('XJ') == 0\nassert solution.minimumDistance('ZWHMYTWQN') == 11\nassert solution.minimumDistance('HMVHZU') == 8\nassert solution.minimumDistance('JETCJHTJRE') == 16\nassert solution.minimumDistance('UDN') == 2\nassert solution.minimumDistance('KHCXDNMA') == 13\nassert solution.minimumDistance('PIYCSBFS') == 9\nassert solution.minimumDistance('SLFOELLG') == 10\nassert solution.minimumDistance('XIV') == 2\nassert solution.minimumDistance('GUAUIV') == 5\nassert solution.minimumDistance('GE') == 0\nassert solution.minimumDistance('RJEYNC') == 10\nassert solution.minimumDistance('JWODWU') == 7\nassert solution.minimumDistance('NGORF') == 6\nassert solution.minimumDistance('UUEIM') == 5\nassert solution.minimumDistance('DMBCQTOF') == 14\nassert solution.minimumDistance('UELHBHY') == 11\nassert solution.minimumDistance('RXANIUGXK') == 15\nassert solution.minimumDistance('HWHW') == 0\nassert solution.minimumDistance('AHZ') == 2\nassert solution.minimumDistance('JYKHCEPO') == 12\nassert solution.minimumDistance('EVXFJANR') == 14\nassert solution.minimumDistance('FPENE') == 3\nassert solution.minimumDistance('QYYHUJWAH') == 17\nassert solution.minimumDistance('EWT') == 3\nassert solution.minimumDistance('ESEOJVYFVX') == 18\nassert solution.minimumDistance('NL') == 0\nassert solution.minimumDistance('ZFRGFNM') == 11\nassert solution.minimumDistance('LHL') == 0\nassert solution.minimumDistance('UZZ') == 0\nassert solution.minimumDistance('YEAH') == 6\nassert solution.minimumDistance('FLLFXOJKVZ') == 13\nassert solution.minimumDistance('UEVJQMYNL') == 16\nassert solution.minimumDistance('OYC') == 2\nassert solution.minimumDistance('ICNYKUF') == 12\nassert solution.minimumDistance('VYCCUOPUSH') == 15\nassert solution.minimumDistance('RVHCFHBF') == 11\nassert solution.minimumDistance('HLBMZVFG') == 16\nassert solution.minimumDistance('MYNQM') == 6\nassert solution.minimumDistance('HIGIHYZ') == 6\nassert solution.minimumDistance('UKCMO') == 8\nassert solution.minimumDistance('GBO') == 2\nassert solution.minimumDistance('IAKZ') == 7\nassert solution.minimumDistance('EUDA') == 4\nassert solution.minimumDistance('LJHOXY') == 10\nassert solution.minimumDistance('LXS') == 2\nassert solution.minimumDistance('XI') == 0\nassert solution.minimumDistance('IEXRINLBYH') == 17\nassert solution.minimumDistance('ZRZBNDKBSL') == 19\nassert solution.minimumDistance('ZIF') == 4\nassert solution.minimumDistance('BIHL') == 3",
  "inefficient_solution": "class Solution:\n    def minimumDistance(self, word: str) -> int:\n        def dist(a: int, b: int) -> int:\n            x1, y1 = divmod(a, 6)\n            x2, y2 = divmod(b, 6)\n            return abs(x1 - x2) + abs(y1 - y2)\n\n        n = len(word)\n        f = [[[inf] * (26 ** 2) for _ in range(26 ** 2)] for _ in range(n)]\n        for j in range(26 ** 2):\n            f[0][j][ord(word[0]) - ord('A')] = 0\n            f[0][ord(word[0]) - ord('A')][j] = 0\n        for i in range(1, n):\n            a, b = ord(word[i - 1]) - ord('A'), ord(word[i]) - ord('A')\n            d = dist(a, b)\n            for j in range(26 ** 2):\n                f[i][b][j] = min(f[i][b][j], f[i - 1][a][j] + d)\n                f[i][j][b] = min(f[i][j][b], f[i - 1][j][a] + d)\n                for k in range(26 ** 2):\n                    t = dist(k, b)\n                    f[i][b][j] = min(f[i][b][j], f[i - 1][k][a] + t)\n                    f[i][j][b] = min(f[i][j][b], f[i - 1][a][k] + t)\n        a = min(f[n - 1][ord(word[-1]) - ord('A')][:])\n        b = min([min(f[n - 1][j][:]) for j in range(26 ** 2)])\n        return int(min(a, b))",
  "is_python": true
}