{
  "problem_idx": 1968,
  "task_name": "Array With Elements Not Equal to Average of Neighbors",
  "markdown_description": "\nYou are given a **0-indexed** array `nums` of **distinct** integers. You want to rearrange the elements in the array such that every element in the rearranged array is **not** equal to the **average** of its neighbors.\n\n\nMore formally, the rearranged array should have the property such that for every `i` in the range `1 <= i < nums.length - 1`, `(nums[i-1] + nums[i+1]) / 2` is **not** equal to `nums[i]`.\n\n\nReturn ***any** rearrangement of* `nums` *that meets the requirements*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** [1,2,4,5,3]\n**Explanation:**\nWhen i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [6,2,0,9,7]\n**Output:** [9,7,6,2,0]\n**Explanation:**\nWhen i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 105`\n* `0 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def rearrangeArray(self, nums: List[int]) -> List[int]:\n        nums.sort()\n        n = len(nums)\n        m = (n + 1) >> 1\n        ans = []\n        for i in range(m):\n            ans.append(nums[i])\n            if i + m < n:\n                ans.append(nums[i + m])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def rearrangeArray(self, nums: List[int]) -> List[int]:\n        nums.sort()\n        n = len(nums)\n        m = (n + 1) >> 1\n        ans = []\n        for i in range(m):\n            ans.append(nums[i])\n            if i + m < n:\n                ans.append(nums[i + m])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(3, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.rearrangeArray(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.rearrangeArray(nums) == expected_result\n        print(f\"assert solution.rearrangeArray({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.rearrangeArray({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.rearrangeArray([29, 30, 38, 54, 72, 75, 78, 79, 92, 98]) == [29, 75, 30, 78, 38, 79, 54, 92, 72, 98]\nassert solution.rearrangeArray([25, 59, 60, 76, 82, 84]) == [25, 76, 59, 82, 60, 84]\nassert solution.rearrangeArray([3, 6, 10, 40, 56, 65, 79, 81, 89, 93]) == [3, 65, 6, 79, 10, 81, 40, 89, 56, 93]\nassert solution.rearrangeArray([2, 8, 14, 25, 38, 47, 48, 51, 80, 81]) == [2, 47, 8, 48, 14, 51, 25, 80, 38, 81]\nassert solution.rearrangeArray([40, 54, 86]) == [40, 86, 54]\nassert solution.rearrangeArray([9, 25, 43, 70, 82]) == [9, 70, 25, 82, 43]\nassert solution.rearrangeArray([14, 41, 46, 50, 79, 81]) == [14, 50, 41, 79, 46, 81]\nassert solution.rearrangeArray([2, 4, 5, 46, 51, 60, 68, 96, 100]) == [2, 60, 4, 68, 5, 96, 46, 100, 51]\nassert solution.rearrangeArray([19, 53, 65, 98]) == [19, 65, 53, 98]\nassert solution.rearrangeArray([15, 26, 28, 91]) == [15, 28, 26, 91]\nassert solution.rearrangeArray([50, 52, 53, 78, 79, 88]) == [50, 78, 52, 79, 53, 88]\nassert solution.rearrangeArray([26, 31, 44]) == [26, 44, 31]\nassert solution.rearrangeArray([3, 32, 55, 59, 60, 83, 86]) == [3, 60, 32, 83, 55, 86, 59]\nassert solution.rearrangeArray([8, 38, 41, 44, 53, 68, 83]) == [8, 53, 38, 68, 41, 83, 44]\nassert solution.rearrangeArray([26, 35, 42, 46, 51, 63, 67, 100]) == [26, 51, 35, 63, 42, 67, 46, 100]\nassert solution.rearrangeArray([6, 26, 52, 66, 71, 72, 78, 84]) == [6, 71, 26, 72, 52, 78, 66, 84]\nassert solution.rearrangeArray([2, 9, 14, 24, 28, 53, 55, 62, 100]) == [2, 53, 9, 55, 14, 62, 24, 100, 28]\nassert solution.rearrangeArray([22, 34, 61, 100]) == [22, 61, 34, 100]\nassert solution.rearrangeArray([5, 11, 38, 44, 60, 61, 62, 76]) == [5, 60, 11, 61, 38, 62, 44, 76]\nassert solution.rearrangeArray([6, 51, 56, 57, 68, 70, 72, 89]) == [6, 68, 51, 70, 56, 72, 57, 89]\nassert solution.rearrangeArray([39, 62, 69]) == [39, 69, 62]\nassert solution.rearrangeArray([1, 2, 21, 24, 27, 43, 59, 87, 93, 98]) == [1, 43, 2, 59, 21, 87, 24, 93, 27, 98]\nassert solution.rearrangeArray([37, 49, 78]) == [37, 78, 49]\nassert solution.rearrangeArray([10, 26, 41, 50, 69, 84]) == [10, 50, 26, 69, 41, 84]\nassert solution.rearrangeArray([6, 14, 17, 32, 92, 94]) == [6, 32, 14, 92, 17, 94]\nassert solution.rearrangeArray([6, 19, 21, 34, 56, 62, 85, 91]) == [6, 56, 19, 62, 21, 85, 34, 91]\nassert solution.rearrangeArray([3, 39, 56, 61, 87, 94]) == [3, 61, 39, 87, 56, 94]\nassert solution.rearrangeArray([21, 40, 52, 55, 65, 85, 90, 93, 98]) == [21, 85, 40, 90, 52, 93, 55, 98, 65]\nassert solution.rearrangeArray([3, 4, 20, 29, 36, 67, 71, 74]) == [3, 36, 4, 67, 20, 71, 29, 74]\nassert solution.rearrangeArray([4, 28, 36, 42, 45, 49, 70, 72, 93, 94]) == [4, 49, 28, 70, 36, 72, 42, 93, 45, 94]\nassert solution.rearrangeArray([10, 45, 71]) == [10, 71, 45]\nassert solution.rearrangeArray([22, 28, 36, 47, 79, 95]) == [22, 47, 28, 79, 36, 95]\nassert solution.rearrangeArray([33, 36, 61, 83]) == [33, 61, 36, 83]\nassert solution.rearrangeArray([3, 9, 10, 34, 56, 84]) == [3, 34, 9, 56, 10, 84]\nassert solution.rearrangeArray([15, 16, 27, 36]) == [15, 27, 16, 36]\nassert solution.rearrangeArray([1, 11, 19, 31, 43, 62, 70, 71, 92]) == [1, 62, 11, 70, 19, 71, 31, 92, 43]\nassert solution.rearrangeArray([29, 39, 42, 70, 100]) == [29, 70, 39, 100, 42]\nassert solution.rearrangeArray([5, 25, 37, 45, 52, 59]) == [5, 45, 25, 52, 37, 59]\nassert solution.rearrangeArray([8, 82, 93]) == [8, 93, 82]\nassert solution.rearrangeArray([1, 25, 60, 61, 63, 66, 85]) == [1, 63, 25, 66, 60, 85, 61]\nassert solution.rearrangeArray([8, 46, 52, 67, 86]) == [8, 67, 46, 86, 52]\nassert solution.rearrangeArray([10, 40, 48]) == [10, 48, 40]\nassert solution.rearrangeArray([16, 20, 27]) == [16, 27, 20]\nassert solution.rearrangeArray([9, 14, 16, 22, 54, 66, 82, 85, 88]) == [9, 66, 14, 82, 16, 85, 22, 88, 54]\nassert solution.rearrangeArray([13, 25, 35, 49, 58, 77, 84, 87, 97]) == [13, 77, 25, 84, 35, 87, 49, 97, 58]\nassert solution.rearrangeArray([2, 11, 66, 74, 85, 87, 89, 92]) == [2, 85, 11, 87, 66, 89, 74, 92]\nassert solution.rearrangeArray([20, 31, 39, 52, 64, 67]) == [20, 52, 31, 64, 39, 67]\nassert solution.rearrangeArray([6, 9, 31, 48, 53, 54, 64, 91, 92]) == [6, 54, 9, 64, 31, 91, 48, 92, 53]\nassert solution.rearrangeArray([15, 18, 30, 34, 93]) == [15, 34, 18, 93, 30]\nassert solution.rearrangeArray([1, 21, 29, 31, 63, 66, 72, 86]) == [1, 63, 21, 66, 29, 72, 31, 86]\nassert solution.rearrangeArray([48, 52, 70]) == [48, 70, 52]\nassert solution.rearrangeArray([11, 57, 61, 63, 65, 68, 79, 81, 84, 96]) == [11, 68, 57, 79, 61, 81, 63, 84, 65, 96]\nassert solution.rearrangeArray([18, 44, 66, 73, 88]) == [18, 73, 44, 88, 66]\nassert solution.rearrangeArray([1, 3, 43, 55, 66]) == [1, 55, 3, 66, 43]\nassert solution.rearrangeArray([13, 29, 46, 55, 59, 68]) == [13, 55, 29, 59, 46, 68]\nassert solution.rearrangeArray([9, 45, 91, 100]) == [9, 91, 45, 100]\nassert solution.rearrangeArray([5, 12, 27, 29, 39, 42, 56, 75, 82, 92]) == [5, 42, 12, 56, 27, 75, 29, 82, 39, 92]\nassert solution.rearrangeArray([4, 22, 35, 66]) == [4, 35, 22, 66]\nassert solution.rearrangeArray([12, 17, 45, 47, 49, 51, 78, 79, 89]) == [12, 51, 17, 78, 45, 79, 47, 89, 49]\nassert solution.rearrangeArray([13, 28, 35, 41, 51, 67, 73, 88, 95, 98]) == [13, 67, 28, 73, 35, 88, 41, 95, 51, 98]\nassert solution.rearrangeArray([5, 29, 36, 60]) == [5, 36, 29, 60]\nassert solution.rearrangeArray([2, 7, 18, 19, 20, 37, 53, 62, 67, 80]) == [2, 37, 7, 53, 18, 62, 19, 67, 20, 80]\nassert solution.rearrangeArray([10, 22, 27]) == [10, 27, 22]\nassert solution.rearrangeArray([8, 17, 23, 51, 69, 100]) == [8, 51, 17, 69, 23, 100]\nassert solution.rearrangeArray([6, 35, 52]) == [6, 52, 35]\nassert solution.rearrangeArray([12, 34, 37, 58, 59, 83, 86, 88]) == [12, 59, 34, 83, 37, 86, 58, 88]\nassert solution.rearrangeArray([9, 10, 19, 30, 41, 64]) == [9, 30, 10, 41, 19, 64]\nassert solution.rearrangeArray([7, 21, 28, 39, 44, 59, 65, 84, 97]) == [7, 59, 21, 65, 28, 84, 39, 97, 44]\nassert solution.rearrangeArray([5, 21, 31, 58, 63, 67, 73, 77, 94]) == [5, 67, 21, 73, 31, 77, 58, 94, 63]\nassert solution.rearrangeArray([4, 82, 96]) == [4, 96, 82]\nassert solution.rearrangeArray([15, 22, 44, 56, 78, 95]) == [15, 56, 22, 78, 44, 95]\nassert solution.rearrangeArray([35, 38, 52, 58, 66, 67, 68, 79]) == [35, 66, 38, 67, 52, 68, 58, 79]\nassert solution.rearrangeArray([15, 32, 38, 41, 49, 59]) == [15, 41, 32, 49, 38, 59]\nassert solution.rearrangeArray([13, 16, 62, 77, 82, 83]) == [13, 77, 16, 82, 62, 83]\nassert solution.rearrangeArray([14, 35, 54, 57, 73, 77, 92]) == [14, 73, 35, 77, 54, 92, 57]\nassert solution.rearrangeArray([6, 53, 86, 96]) == [6, 86, 53, 96]\nassert solution.rearrangeArray([1, 6, 9, 45, 67, 73]) == [1, 45, 6, 67, 9, 73]\nassert solution.rearrangeArray([10, 48, 51, 58, 70, 72, 80, 83, 98]) == [10, 72, 48, 80, 51, 83, 58, 98, 70]\nassert solution.rearrangeArray([55, 70, 79]) == [55, 79, 70]\nassert solution.rearrangeArray([38, 78, 84]) == [38, 84, 78]\nassert solution.rearrangeArray([21, 77, 87]) == [21, 87, 77]\nassert solution.rearrangeArray([35, 36, 54, 81]) == [35, 54, 36, 81]\nassert solution.rearrangeArray([22, 53, 59, 67, 99]) == [22, 67, 53, 99, 59]\nassert solution.rearrangeArray([6, 23, 38, 50, 59, 63, 68, 88, 94]) == [6, 63, 23, 68, 38, 88, 50, 94, 59]\nassert solution.rearrangeArray([10, 34, 51, 82, 96]) == [10, 82, 34, 96, 51]\nassert solution.rearrangeArray([26, 27, 84, 88]) == [26, 84, 27, 88]\nassert solution.rearrangeArray([21, 32, 60, 78, 89]) == [21, 78, 32, 89, 60]\nassert solution.rearrangeArray([23, 33, 60, 61, 63, 74, 77, 100]) == [23, 63, 33, 74, 60, 77, 61, 100]\nassert solution.rearrangeArray([9, 21, 41, 81, 82, 88]) == [9, 81, 21, 82, 41, 88]\nassert solution.rearrangeArray([28, 40, 87]) == [28, 87, 40]\nassert solution.rearrangeArray([5, 6, 7, 15, 19, 30, 92, 95, 97, 99]) == [5, 30, 6, 92, 7, 95, 15, 97, 19, 99]\nassert solution.rearrangeArray([2, 4, 7, 14, 30, 59, 82, 83, 93, 94]) == [2, 59, 4, 82, 7, 83, 14, 93, 30, 94]\nassert solution.rearrangeArray([16, 19, 43, 54, 70, 80, 81, 83, 89, 100]) == [16, 80, 19, 81, 43, 83, 54, 89, 70, 100]\nassert solution.rearrangeArray([10, 17, 21, 32, 46, 50, 57, 73, 94]) == [10, 50, 17, 57, 21, 73, 32, 94, 46]\nassert solution.rearrangeArray([1, 3, 19, 37, 40, 42, 81, 98]) == [1, 40, 3, 42, 19, 81, 37, 98]\nassert solution.rearrangeArray([9, 10, 57, 65, 68, 84, 86]) == [9, 68, 10, 84, 57, 86, 65]\nassert solution.rearrangeArray([4, 14, 17, 37, 46, 63, 65, 75, 97]) == [4, 63, 14, 65, 17, 75, 37, 97, 46]\nassert solution.rearrangeArray([9, 29, 48, 72, 80, 85]) == [9, 72, 29, 80, 48, 85]\nassert solution.rearrangeArray([11, 26, 32, 39, 63]) == [11, 39, 26, 63, 32]\nassert solution.rearrangeArray([14, 44, 48, 59, 62, 93]) == [14, 59, 44, 62, 48, 93]",
  "inefficient_solution": "class Solution:\n    def rearrangeArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        temp_nums = {}\n        for i, num in enumerate(nums):\n            temp_nums[i] = num\n\n        nums = []\n        for i in range(n):\n            nums.append([temp_nums[i]])\n            del temp_nums[i]\n\n        nums.sort(key=lambda x: x[0])\n        final_nums = [x for sublist in nums for x in sublist]\n        avg_dict = {}\n        for i in range(len(final_nums) - 1):\n            avg = (final_nums[i] + final_nums[i+1]) / 2\n            avg_dict[avg] = True\n\n        for i in range(len(final_nums)):\n            for j in range(len(final_nums)):\n                if i != j and final_nums[i] != final_nums[j] and final_nums[i] not in avg_dict:\n                    final_nums[i], final_nums[j] = final_nums[j], final_nums[i]\n                    break\n\n        return final_nums",
  "is_python": true
}