{
  "problem_idx": 1333,
  "task_name": "Filter Restaurants by Vegan",
  "markdown_description": "\nGiven the array `restaurants` where \u00a0`restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters.\n\n\nThe `veganFriendly` filter will be either *true* (meaning you should only include restaurants with `veganFriendlyi` set to true)\u00a0or *false*\u00a0(meaning you can include any restaurant). In addition, you have the filters\u00a0`maxPrice` and `maxDistance`\u00a0which\u00a0are the maximum value for price and distance of restaurants you should consider respectively.\n\n\nReturn the array of restaurant ***IDs*** after filtering, ordered by **rating** from highest to lowest. For restaurants with the same rating, order them by ***id*** from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value *1* when it is *true*, and *0* when it is *false*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\n**Output:** [3,1,5] \n**Explanation:**The restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\n**Output:** [4,3,2,1,5]\n**Explanation:** The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\n**Output:** [4,5]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <=\u00a0restaurants.length <= 10^4`\n* `restaurants[i].length == 5`\n* `1 <=\u00a0idi, ratingi, pricei, distancei <= 10^5`\n* `1 <=\u00a0maxPrice,\u00a0maxDistance <= 10^5`\n* `veganFriendlyi` and\u00a0`veganFriendly`\u00a0are\u00a00 or 1.\n* All `idi` are distinct.\n\n\n",
  "canonical_solution": "class Solution:\n    def filterRestaurants(\n        self,\n        restaurants: List[List[int]],\n        veganFriendly: int,\n        maxPrice: int,\n        maxDistance: int,\n    ) -> List[int]:\n        restaurants.sort(key=lambda x: (-x[1], -x[0]))\n        ans = []\n        for idx, _, vegan, price, dist in restaurants:\n            if vegan >= veganFriendly and price <= maxPrice and dist <= maxDistance:\n                ans.append(idx)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def filterRestaurants(\n        self,\n        restaurants: List[List[int]],\n        veganFriendly: int,\n        maxPrice: int,\n        maxDistance: int,\n    ) -> List[int]:\n        restaurants.sort(key=lambda x: (-x[1], -x[0]))\n        ans = []\n        for idx, _, vegan, price, dist in restaurants:\n            if vegan >= veganFriendly and price <= maxPrice and dist <= maxDistance:\n                ans.append(idx)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    restaurants = []\n    for i in range(random.randint(1, 11)):\n        id_i = i + 1\n        rating_i = random.randint(1, 101)\n        veganFriendly_i = random.randint(0, 1)\n        price_i = random.randint(1, 101)\n        distance_i = random.randint(1, 101)\n        restaurants.append([id_i, rating_i, veganFriendly_i, price_i, distance_i])\n\n    veganFriendly = random.randint(0, 1)\n    maxPrice = random.randint(1, 101)\n    maxDistance = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.filterRestaurants(restaurants, veganFriendly, maxPrice, maxDistance)\n\n    return restaurants, veganFriendly, maxPrice, maxDistance, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        restaurants, veganFriendly, maxPrice, maxDistance, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.filterRestaurants(restaurants, veganFriendly, maxPrice, maxDistance) == expected_result\n        print(f\"assert solution.filterRestaurants({restaurants}, {veganFriendly}, {maxPrice}, {maxDistance}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.filterRestaurants({restaurants}, {veganFriendly}, {maxPrice}, {maxDistance}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.filterRestaurants([[6, 96, 0, 56, 53], [1, 95, 1, 71, 68], [4, 72, 1, 24, 14], [5, 64, 0, 43, 20], [3, 56, 1, 5, 60], [2, 29, 1, 67, 61]], 1, 37, 65) == [4, 3]\nassert solution.filterRestaurants([[3, 88, 1, 64, 94], [1, 68, 0, 20, 48], [2, 65, 1, 75, 85]], 0, 41, 21) == []\nassert solution.filterRestaurants([[2, 78, 1, 2, 58], [3, 38, 0, 87, 28], [1, 12, 1, 98, 27]], 1, 71, 54) == []\nassert solution.filterRestaurants([[8, 54, 1, 15, 71], [2, 54, 1, 88, 29], [7, 46, 0, 48, 4], [1, 46, 1, 32, 11], [3, 40, 1, 31, 66], [5, 30, 0, 99, 39], [6, 18, 0, 95, 89], [4, 15, 0, 67, 11]], 1, 77, 30) == [1]\nassert solution.filterRestaurants([[2, 60, 0, 83, 60], [1, 38, 0, 24, 4], [3, 19, 0, 21, 48]], 1, 69, 78) == []\nassert solution.filterRestaurants([[4, 101, 0, 6, 94], [1, 101, 1, 67, 91], [6, 75, 0, 70, 64], [3, 64, 0, 8, 26], [9, 62, 1, 77, 64], [7, 61, 1, 76, 63], [2, 43, 0, 62, 74], [8, 38, 0, 88, 47], [5, 30, 0, 60, 95]], 0, 7, 55) == []\nassert solution.filterRestaurants([[1, 61, 1, 14, 66], [3, 44, 1, 38, 75], [2, 13, 0, 75, 77]], 1, 54, 15) == []\nassert solution.filterRestaurants([[2, 92, 0, 101, 37], [3, 16, 0, 89, 7], [1, 11, 0, 79, 61]], 1, 73, 78) == []\nassert solution.filterRestaurants([[2, 87, 1, 85, 60], [4, 57, 0, 38, 1], [1, 57, 0, 56, 86], [5, 29, 0, 37, 85], [3, 1, 1, 75, 36]], 0, 42, 20) == [4]\nassert solution.filterRestaurants([[2, 86, 0, 34, 40], [3, 37, 0, 36, 66], [1, 22, 1, 80, 23]], 1, 35, 100) == []\nassert solution.filterRestaurants([[7, 93, 0, 52, 44], [11, 89, 1, 80, 44], [10, 74, 1, 89, 100], [9, 65, 0, 14, 38], [1, 61, 0, 71, 14], [3, 60, 1, 95, 18], [6, 48, 0, 67, 87], [2, 27, 1, 48, 12], [4, 25, 0, 99, 61], [5, 21, 1, 5, 56], [8, 12, 1, 24, 92]], 0, 87, 56) == [7, 11, 9, 1, 2, 5]\nassert solution.filterRestaurants([[8, 101, 0, 93, 14], [7, 94, 0, 21, 76], [1, 86, 0, 37, 40], [5, 82, 1, 14, 17], [4, 80, 0, 19, 61], [2, 80, 1, 81, 85], [6, 62, 1, 48, 49], [3, 10, 1, 20, 92]], 1, 20, 48) == [5]\nassert solution.filterRestaurants([[7, 97, 0, 58, 19], [6, 62, 0, 100, 59], [2, 43, 0, 47, 61], [5, 42, 0, 91, 59], [3, 38, 0, 8, 75], [4, 25, 0, 74, 83], [1, 11, 0, 16, 56]], 0, 3, 101) == []\nassert solution.filterRestaurants([[3, 96, 1, 95, 87], [8, 90, 0, 60, 12], [7, 71, 0, 72, 13], [2, 58, 1, 86, 96], [5, 57, 0, 53, 87], [9, 52, 0, 81, 38], [1, 42, 0, 91, 59], [4, 32, 0, 82, 63], [6, 5, 0, 97, 15]], 1, 20, 19) == []\nassert solution.filterRestaurants([[3, 87, 0, 10, 56], [7, 81, 0, 51, 83], [9, 78, 1, 32, 12], [6, 77, 1, 75, 27], [4, 55, 0, 65, 10], [5, 54, 1, 100, 12], [8, 32, 0, 62, 6], [2, 24, 0, 57, 91], [1, 3, 1, 81, 63]], 0, 34, 37) == [9]\nassert solution.filterRestaurants([[5, 95, 1, 1, 24], [2, 32, 1, 14, 67], [1, 20, 0, 46, 98], [3, 19, 0, 49, 33], [4, 5, 0, 7, 96]], 1, 101, 39) == [5]\nassert solution.filterRestaurants([[11, 98, 1, 47, 81], [5, 96, 0, 66, 31], [6, 59, 1, 90, 96], [3, 48, 1, 95, 91], [9, 41, 0, 9, 40], [1, 37, 1, 77, 84], [4, 34, 0, 8, 86], [8, 13, 1, 17, 46], [7, 10, 0, 92, 22], [10, 2, 1, 33, 11], [2, 1, 0, 10, 78]], 0, 30, 87) == [9, 4, 8, 2]\nassert solution.filterRestaurants([[2, 68, 1, 9, 93], [1, 36, 0, 98, 9]], 1, 89, 61) == []\nassert solution.filterRestaurants([[7, 98, 1, 31, 86], [4, 67, 1, 83, 54], [3, 63, 1, 71, 57], [8, 46, 0, 46, 52], [6, 33, 1, 7, 20], [9, 27, 0, 59, 46], [1, 27, 0, 5, 79], [2, 26, 0, 6, 98], [5, 25, 0, 42, 69], [10, 23, 0, 27, 37]], 0, 52, 20) == [6]\nassert solution.filterRestaurants([[4, 80, 1, 44, 58], [1, 63, 0, 30, 95], [3, 41, 0, 13, 57], [2, 18, 0, 71, 8]], 0, 56, 15) == []\nassert solution.filterRestaurants([[7, 71, 1, 79, 17], [6, 67, 1, 91, 30], [3, 62, 0, 87, 30], [1, 37, 0, 3, 79], [5, 29, 0, 71, 82], [8, 28, 1, 101, 100], [2, 7, 1, 46, 7], [4, 2, 0, 58, 81]], 1, 29, 28) == []\nassert solution.filterRestaurants([[1, 101, 1, 75, 10], [4, 80, 0, 31, 15], [3, 34, 1, 47, 5], [2, 2, 0, 16, 50]], 1, 63, 48) == [3]\nassert solution.filterRestaurants([[2, 96, 0, 5, 3], [1, 52, 0, 61, 41]], 0, 25, 19) == [2]\nassert solution.filterRestaurants([[3, 101, 0, 11, 70], [4, 96, 0, 34, 51], [1, 92, 1, 95, 69], [9, 91, 1, 61, 55], [6, 82, 0, 39, 36], [5, 70, 0, 79, 8], [2, 61, 0, 63, 83], [8, 58, 1, 38, 53], [7, 51, 0, 28, 84]], 0, 14, 60) == []\nassert solution.filterRestaurants([[6, 101, 0, 93, 60], [3, 77, 0, 32, 23], [1, 76, 1, 57, 17], [4, 74, 0, 97, 71], [7, 70, 0, 47, 81], [8, 36, 1, 3, 12], [2, 36, 0, 80, 71], [5, 1, 0, 101, 2]], 0, 58, 74) == [3, 1, 8]\nassert solution.filterRestaurants([[1, 38, 0, 15, 22]], 0, 52, 27) == [1]\nassert solution.filterRestaurants([[1, 87, 1, 92, 27], [4, 70, 0, 90, 80], [3, 58, 1, 96, 60], [5, 48, 0, 78, 77], [8, 43, 0, 42, 22], [7, 39, 0, 34, 41], [9, 29, 1, 17, 86], [6, 26, 0, 34, 27], [2, 23, 0, 42, 100]], 0, 40, 99) == [7, 9, 6]\nassert solution.filterRestaurants([[1, 52, 1, 14, 29], [2, 19, 1, 21, 3]], 1, 83, 66) == [1, 2]\nassert solution.filterRestaurants([[2, 99, 1, 27, 70], [8, 68, 1, 2, 55], [5, 55, 1, 3, 88], [3, 30, 1, 69, 42], [4, 19, 0, 59, 62], [7, 9, 0, 101, 99], [6, 2, 1, 43, 37], [1, 2, 1, 66, 56]], 0, 35, 6) == []\nassert solution.filterRestaurants([[5, 86, 0, 73, 43], [11, 85, 0, 49, 13], [4, 83, 1, 80, 41], [3, 79, 1, 78, 28], [7, 52, 1, 60, 24], [2, 42, 1, 56, 73], [6, 40, 0, 66, 17], [9, 23, 0, 48, 36], [1, 18, 1, 6, 47], [10, 17, 1, 5, 82], [8, 7, 0, 15, 9]], 1, 93, 51) == [4, 3, 7, 1]\nassert solution.filterRestaurants([[3, 96, 1, 8, 15], [4, 65, 0, 45, 29], [1, 12, 1, 53, 56], [2, 10, 0, 15, 10]], 0, 34, 48) == [3, 2]\nassert solution.filterRestaurants([[8, 84, 0, 96, 29], [4, 70, 0, 74, 51], [7, 54, 1, 70, 25], [2, 54, 0, 61, 58], [5, 51, 0, 6, 97], [6, 39, 1, 25, 80], [9, 36, 1, 50, 45], [3, 12, 0, 14, 82], [1, 4, 1, 33, 23]], 0, 71, 70) == [7, 2, 9, 1]\nassert solution.filterRestaurants([[7, 91, 0, 17, 70], [5, 67, 1, 7, 56], [2, 61, 1, 99, 6], [4, 28, 1, 99, 66], [3, 25, 0, 80, 76], [6, 17, 1, 51, 98], [1, 7, 0, 22, 27]], 0, 33, 49) == [1]\nassert solution.filterRestaurants([[1, 14, 1, 49, 8]], 1, 17, 18) == []\nassert solution.filterRestaurants([[2, 41, 0, 71, 50], [1, 16, 0, 94, 56]], 1, 95, 16) == []\nassert solution.filterRestaurants([[1, 73, 1, 61, 78], [3, 49, 1, 89, 47], [5, 47, 1, 91, 3], [2, 29, 1, 91, 94], [4, 5, 1, 33, 56]], 1, 6, 88) == []\nassert solution.filterRestaurants([[2, 97, 1, 33, 98], [1, 92, 1, 98, 66]], 0, 5, 50) == []\nassert solution.filterRestaurants([[1, 97, 0, 100, 78], [2, 48, 0, 84, 3], [5, 45, 0, 58, 98], [4, 43, 1, 16, 64], [3, 20, 0, 78, 30]], 1, 66, 34) == []\nassert solution.filterRestaurants([[2, 90, 0, 67, 95], [5, 64, 1, 21, 61], [4, 54, 0, 61, 49], [1, 49, 0, 81, 18], [6, 11, 0, 39, 14], [3, 11, 0, 9, 14]], 1, 36, 11) == []\nassert solution.filterRestaurants([[3, 99, 0, 22, 32], [1, 97, 1, 66, 95], [2, 92, 1, 11, 46], [4, 83, 0, 65, 34], [7, 74, 1, 91, 16], [5, 48, 1, 53, 44], [6, 45, 0, 22, 92], [11, 27, 1, 65, 55], [10, 14, 0, 70, 38], [8, 11, 0, 24, 89], [9, 8, 1, 92, 34]], 0, 10, 39) == []\nassert solution.filterRestaurants([[1, 81, 1, 35, 75]], 1, 57, 84) == [1]\nassert solution.filterRestaurants([[1, 95, 0, 62, 24], [4, 72, 0, 82, 76], [8, 43, 0, 4, 48], [2, 40, 1, 60, 93], [7, 38, 0, 96, 34], [10, 29, 1, 53, 44], [9, 29, 0, 16, 72], [3, 26, 1, 65, 69], [11, 18, 0, 47, 69], [5, 13, 0, 30, 41], [6, 7, 0, 71, 63]], 0, 27, 21) == []\nassert solution.filterRestaurants([[1, 101, 0, 32, 93], [2, 70, 0, 98, 35], [3, 50, 0, 32, 64]], 0, 43, 62) == []\nassert solution.filterRestaurants([[1, 60, 1, 61, 95]], 0, 20, 12) == []\nassert solution.filterRestaurants([[2, 88, 0, 6, 23], [1, 55, 1, 13, 62], [3, 49, 0, 88, 50], [4, 36, 0, 59, 32], [5, 17, 0, 76, 51]], 1, 54, 41) == []\nassert solution.filterRestaurants([[5, 97, 1, 85, 34], [10, 75, 1, 63, 12], [1, 68, 1, 42, 62], [9, 63, 0, 18, 85], [6, 61, 0, 91, 54], [7, 47, 0, 73, 101], [3, 47, 0, 79, 7], [8, 40, 0, 47, 73], [4, 38, 1, 86, 22], [2, 31, 1, 31, 37], [11, 17, 0, 45, 50]], 1, 56, 82) == [1, 2]\nassert solution.filterRestaurants([[3, 98, 0, 77, 32], [1, 98, 0, 19, 65], [10, 95, 0, 28, 73], [7, 89, 1, 68, 21], [2, 81, 0, 62, 85], [11, 66, 0, 72, 65], [6, 64, 1, 45, 44], [4, 44, 0, 15, 101], [8, 36, 1, 75, 55], [9, 12, 0, 91, 24], [5, 11, 0, 1, 47]], 1, 63, 44) == [6]\nassert solution.filterRestaurants([[8, 101, 0, 82, 73], [5, 86, 0, 81, 27], [3, 71, 0, 78, 32], [7, 68, 1, 71, 8], [2, 63, 0, 80, 54], [4, 45, 0, 35, 60], [6, 38, 0, 6, 17], [1, 38, 0, 21, 37]], 1, 21, 53) == []\nassert solution.filterRestaurants([[10, 99, 1, 14, 36], [7, 96, 1, 82, 64], [8, 88, 0, 93, 14], [9, 86, 1, 76, 101], [3, 85, 1, 21, 61], [5, 57, 1, 17, 36], [6, 44, 0, 60, 36], [1, 21, 1, 73, 80], [4, 3, 1, 32, 19], [2, 2, 0, 2, 8]], 1, 36, 41) == [10, 5, 4]\nassert solution.filterRestaurants([[9, 93, 0, 70, 8], [1, 83, 1, 49, 37], [7, 82, 1, 33, 97], [6, 81, 0, 14, 17], [5, 59, 1, 55, 8], [3, 48, 0, 79, 91], [4, 21, 1, 41, 79], [8, 8, 0, 33, 49], [2, 1, 1, 32, 96]], 0, 13, 86) == []\nassert solution.filterRestaurants([[1, 86, 1, 84, 4], [2, 65, 1, 34, 41], [3, 32, 1, 82, 63], [4, 13, 1, 17, 84]], 1, 101, 76) == [1, 2, 3]\nassert solution.filterRestaurants([[1, 66, 0, 34, 42]], 0, 62, 63) == [1]\nassert solution.filterRestaurants([[3, 90, 1, 46, 79], [4, 70, 1, 71, 26], [5, 47, 1, 8, 35], [2, 34, 0, 70, 1], [6, 31, 1, 28, 36], [1, 23, 0, 7, 48]], 0, 22, 18) == []\nassert solution.filterRestaurants([[3, 99, 1, 93, 30], [1, 88, 1, 67, 36], [2, 83, 0, 92, 73], [5, 81, 1, 94, 42], [6, 75, 1, 101, 58], [4, 75, 1, 3, 65]], 1, 100, 37) == [3, 1]\nassert solution.filterRestaurants([[1, 47, 1, 82, 86]], 0, 39, 48) == []\nassert solution.filterRestaurants([[1, 10, 1, 96, 32]], 1, 57, 49) == []\nassert solution.filterRestaurants([[1, 101, 0, 84, 67], [7, 98, 1, 80, 76], [5, 85, 0, 15, 35], [2, 83, 1, 34, 99], [4, 80, 0, 27, 92], [6, 67, 1, 18, 33], [10, 44, 1, 37, 69], [8, 32, 1, 21, 58], [9, 28, 0, 46, 67], [3, 10, 0, 90, 26]], 1, 65, 81) == [6, 10, 8]\nassert solution.filterRestaurants([[7, 90, 1, 5, 75], [10, 71, 0, 38, 20], [4, 70, 1, 29, 13], [6, 45, 1, 14, 21], [2, 33, 1, 62, 37], [1, 27, 1, 27, 61], [3, 25, 0, 63, 90], [8, 16, 1, 97, 71], [5, 16, 1, 36, 74], [11, 13, 0, 79, 50], [9, 10, 1, 13, 11]], 1, 101, 94) == [7, 4, 6, 2, 1, 8, 5, 9]\nassert solution.filterRestaurants([[1, 69, 1, 77, 51], [2, 45, 0, 45, 40]], 0, 38, 62) == []\nassert solution.filterRestaurants([[2, 65, 0, 56, 47], [1, 31, 0, 22, 33], [3, 18, 0, 91, 83]], 0, 45, 78) == [1]\nassert solution.filterRestaurants([[8, 66, 1, 48, 62], [7, 63, 0, 49, 29], [6, 63, 0, 23, 64], [4, 62, 0, 27, 70], [2, 60, 1, 43, 59], [1, 57, 0, 14, 17], [5, 51, 1, 37, 96], [9, 34, 1, 29, 61], [10, 29, 1, 91, 36], [3, 5, 0, 15, 62]], 1, 90, 61) == [2, 9]\nassert solution.filterRestaurants([[2, 90, 1, 4, 100], [3, 33, 0, 99, 84], [1, 3, 1, 28, 92]], 0, 68, 23) == []\nassert solution.filterRestaurants([[2, 57, 1, 72, 34], [1, 31, 1, 2, 33], [3, 10, 1, 8, 83]], 1, 36, 62) == [1]\nassert solution.filterRestaurants([[1, 33, 0, 19, 8]], 0, 9, 37) == []\nassert solution.filterRestaurants([[1, 98, 0, 66, 42], [4, 94, 1, 30, 68], [6, 85, 0, 27, 64], [7, 72, 0, 100, 93], [8, 71, 0, 20, 29], [3, 71, 0, 101, 66], [5, 42, 0, 84, 1], [2, 13, 0, 77, 3]], 0, 12, 12) == []\nassert solution.filterRestaurants([[5, 101, 0, 10, 6], [4, 99, 0, 6, 64], [7, 64, 1, 81, 61], [3, 57, 1, 76, 76], [1, 39, 1, 79, 72], [6, 7, 0, 31, 18], [2, 7, 1, 60, 96]], 1, 78, 20) == []\nassert solution.filterRestaurants([[1, 22, 0, 56, 15]], 1, 7, 54) == []\nassert solution.filterRestaurants([[1, 79, 1, 97, 53], [3, 73, 1, 36, 81], [2, 63, 0, 4, 96]], 1, 27, 31) == []\nassert solution.filterRestaurants([[1, 82, 0, 24, 59]], 0, 30, 4) == []\nassert solution.filterRestaurants([[5, 87, 1, 44, 8], [3, 78, 1, 70, 30], [1, 74, 1, 9, 54], [7, 53, 1, 93, 80], [8, 49, 0, 21, 2], [2, 37, 0, 29, 31], [6, 36, 1, 40, 18], [9, 31, 0, 37, 12], [4, 26, 0, 24, 17]], 1, 10, 92) == [1]\nassert solution.filterRestaurants([[1, 57, 1, 98, 74], [2, 44, 0, 48, 82]], 1, 63, 80) == []\nassert solution.filterRestaurants([[3, 93, 0, 44, 55], [4, 89, 1, 38, 57], [2, 74, 1, 72, 98], [7, 62, 1, 79, 48], [1, 49, 1, 19, 52], [5, 32, 0, 67, 75], [6, 29, 0, 56, 74]], 0, 97, 1) == []\nassert solution.filterRestaurants([[6, 97, 0, 20, 83], [3, 92, 1, 49, 66], [1, 87, 1, 65, 64], [5, 85, 1, 12, 75], [4, 80, 1, 1, 63], [2, 74, 1, 7, 40], [7, 66, 1, 60, 75]], 0, 38, 79) == [5, 4, 2]\nassert solution.filterRestaurants([[4, 98, 1, 94, 88], [2, 83, 0, 16, 82], [3, 13, 1, 46, 29], [1, 9, 0, 62, 74]], 0, 88, 42) == [3]\nassert solution.filterRestaurants([[8, 100, 0, 44, 2], [6, 99, 1, 88, 51], [4, 88, 1, 31, 9], [1, 82, 1, 53, 13], [3, 72, 0, 2, 2], [7, 53, 0, 11, 1], [2, 30, 1, 77, 75], [9, 27, 0, 12, 49], [5, 1, 1, 97, 97]], 1, 47, 75) == [4]\nassert solution.filterRestaurants([[1, 43, 0, 38, 28], [3, 32, 0, 57, 9], [2, 2, 0, 10, 63]], 1, 84, 42) == []\nassert solution.filterRestaurants([[2, 100, 0, 47, 97], [9, 95, 0, 25, 9], [6, 59, 0, 2, 5], [10, 58, 1, 32, 22], [7, 30, 0, 93, 18], [3, 26, 1, 59, 93], [1, 23, 1, 97, 67], [4, 14, 0, 43, 57], [11, 2, 1, 20, 38], [8, 1, 1, 74, 25], [5, 1, 1, 68, 70]], 0, 37, 50) == [9, 6, 10, 11]\nassert solution.filterRestaurants([[6, 99, 0, 19, 78], [7, 68, 0, 79, 85], [1, 49, 1, 13, 49], [4, 45, 1, 49, 29], [5, 40, 0, 17, 18], [3, 40, 0, 6, 71], [2, 18, 1, 51, 77]], 0, 67, 7) == []\nassert solution.filterRestaurants([[5, 88, 0, 54, 58], [6, 58, 0, 89, 16], [1, 22, 0, 53, 25], [7, 13, 1, 42, 83], [3, 13, 1, 16, 88], [2, 12, 0, 20, 101], [4, 7, 0, 86, 23]], 1, 32, 90) == [3]\nassert solution.filterRestaurants([[4, 97, 1, 18, 90], [8, 96, 1, 47, 60], [7, 75, 1, 46, 30], [2, 65, 1, 83, 48], [9, 64, 1, 29, 98], [10, 61, 1, 6, 91], [3, 58, 0, 94, 80], [1, 55, 0, 99, 87], [5, 41, 0, 77, 33], [6, 14, 0, 47, 91]], 0, 13, 5) == []\nassert solution.filterRestaurants([[1, 74, 0, 15, 62], [4, 39, 1, 47, 15], [2, 36, 1, 48, 74], [3, 17, 0, 55, 91]], 0, 79, 96) == [1, 4, 2, 3]\nassert solution.filterRestaurants([[1, 81, 1, 79, 2]], 0, 55, 95) == []\nassert solution.filterRestaurants([[1, 50, 1, 78, 81]], 0, 80, 14) == []\nassert solution.filterRestaurants([[5, 92, 1, 83, 15], [1, 92, 0, 36, 31], [4, 40, 0, 101, 50], [3, 29, 0, 78, 47], [2, 10, 1, 29, 11]], 0, 18, 5) == []\nassert solution.filterRestaurants([[10, 92, 1, 64, 11], [8, 81, 1, 37, 47], [3, 69, 1, 85, 84], [5, 68, 0, 75, 41], [9, 61, 0, 80, 26], [7, 61, 0, 99, 22], [1, 49, 0, 100, 69], [4, 28, 0, 6, 88], [2, 16, 1, 38, 57], [6, 4, 0, 17, 46]], 0, 6, 70) == []\nassert solution.filterRestaurants([[7, 86, 1, 35, 85], [2, 84, 0, 28, 2], [1, 84, 1, 27, 66], [4, 68, 1, 79, 16], [6, 42, 0, 96, 82], [3, 34, 0, 7, 77], [5, 4, 1, 53, 71]], 0, 46, 73) == [2, 1]\nassert solution.filterRestaurants([[6, 63, 0, 87, 88], [7, 49, 1, 87, 77], [4, 45, 1, 43, 63], [1, 30, 1, 64, 12], [5, 25, 0, 92, 3], [2, 25, 0, 82, 35], [3, 7, 0, 61, 89]], 1, 94, 22) == [1]\nassert solution.filterRestaurants([[2, 97, 0, 68, 42], [6, 49, 0, 63, 21], [7, 45, 1, 59, 60], [4, 26, 0, 20, 16], [3, 20, 1, 33, 63], [1, 18, 1, 90, 90], [5, 14, 0, 79, 45]], 0, 11, 81) == []\nassert solution.filterRestaurants([[2, 8, 1, 3, 2], [1, 7, 1, 82, 14]], 0, 68, 14) == [2]\nassert solution.filterRestaurants([[1, 98, 0, 11, 65], [5, 94, 0, 1, 31], [2, 92, 1, 43, 95], [3, 69, 1, 91, 59], [4, 16, 0, 78, 35]], 1, 30, 47) == []\nassert solution.filterRestaurants([[2, 25, 1, 71, 91], [1, 3, 1, 78, 56]], 0, 47, 71) == []\nassert solution.filterRestaurants([[1, 92, 1, 93, 46], [2, 42, 0, 5, 22], [3, 33, 1, 96, 71]], 1, 58, 6) == []\nassert solution.filterRestaurants([[1, 94, 1, 87, 91], [3, 91, 1, 84, 71], [6, 69, 0, 15, 9], [4, 61, 0, 98, 59], [5, 56, 0, 19, 52], [2, 53, 0, 81, 48], [8, 42, 1, 46, 45], [7, 23, 1, 69, 47]], 0, 4, 91) == []\nassert solution.filterRestaurants([[3, 51, 1, 65, 44], [2, 20, 1, 13, 36], [1, 11, 1, 91, 54]], 0, 70, 95) == [3, 2]\nassert solution.filterRestaurants([[3, 95, 0, 81, 18], [1, 46, 0, 68, 4], [2, 21, 0, 100, 61]], 1, 67, 3) == []\nassert solution.filterRestaurants([[5, 88, 1, 25, 38], [1, 88, 1, 1, 77], [3, 78, 0, 18, 25], [2, 76, 0, 51, 75], [6, 67, 1, 36, 72], [4, 21, 0, 62, 67]], 1, 36, 62) == [5]\nassert solution.filterRestaurants([[1, 68, 0, 7, 51], [3, 51, 0, 72, 11], [4, 39, 1, 61, 47], [5, 6, 1, 57, 73], [2, 5, 1, 50, 7]], 0, 25, 53) == [1]\nassert solution.filterRestaurants([[1, 16, 1, 21, 46]], 1, 53, 32) == []\nassert solution.filterRestaurants([[4, 90, 0, 17, 15], [5, 68, 1, 63, 78], [2, 52, 1, 21, 13], [1, 36, 1, 45, 37], [7, 18, 0, 9, 32], [3, 7, 1, 77, 12], [6, 6, 1, 97, 77]], 0, 45, 100) == [4, 2, 1, 7]\nassert solution.filterRestaurants([[2, 99, 1, 2, 71], [5, 98, 1, 75, 3], [1, 61, 0, 18, 52], [3, 36, 1, 77, 6], [4, 5, 1, 76, 27]], 0, 88, 77) == [2, 5, 1, 3, 4]",
  "inefficient_solution": "class Solution:\n    def filterRestaurants(\n        self,\n        restaurants: List[List[int]],\n        veganFriendly: int,\n        maxPrice: int,\n        maxDistance: int,\n    ) -> List[int]:\n        # Create a 2D list of 2 million elements to store temporary results\n        temp = [[0 for _ in range(2*10**6)] for _ in range(2*10**6)]\n        \n        # Sort the restaurants in descending order of rating and id\n        sorted_restaurants = []\n        for restaurant in restaurants:\n            sorted_restaurants.append(restaurant)\n        sorted_restaurants.sort(key=lambda x: (-x[1], -x[0]))\n        \n        # Iterate over the sorted restaurants and filter them\n        for idx, rating, vegan, price, dist in sorted_restaurants:\n            temp[idx][0] = idx\n            temp[idx][1] = rating\n            temp[idx][2] = vegan\n            temp[idx][3] = price\n            temp[idx][4] = dist\n        \n        # Create another 2D list to store the filtered results\n        filtered_restaurants = [[0 for _ in range(2*10**6)] for _ in range(2*10**6)]\n        \n        # Filter the restaurants based on veganFriendly, maxPrice, and maxDistance\n        for i in range(len(temp)):\n            if temp[i][2] >= veganFriendly and temp[i][3] <= maxPrice and temp[i][4] <= maxDistance:\n                filtered_restaurants[i][0] = temp[i][0]\n        \n        # Sort the filtered restaurants based on rating and id\n        filtered_restaurants.sort(key=lambda x: (-x[0], -x[1]))\n        \n        # Create a list to store the final result\n        result = []\n        for i in range(len(filtered_restaurants)):\n            # Check if the restaurant is not already in the result\n            if filtered_restaurants[i][0] not in result:\n                result.append(filtered_restaurants[i][0])\n        \n        return result",
  "is_python": true
}