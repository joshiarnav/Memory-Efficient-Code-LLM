{
  "problem_idx": 265,
  "task_name": "Paint House II",
  "markdown_description": "\nThere are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\n\n\nThe cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.\n\n\n* For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on...\n\n\nReturn *the minimum cost to paint all houses*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** costs = [[1,5,3],[2,9,4]]\n**Output:** 5\n**Explanation:**\nPaint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; \nOr paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** costs = [[1,3],[2,4]]\n**Output:** 5\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `costs.length == n`\n* `costs[i].length == k`\n* `1 <= n <= 100`\n* `2 <= k <= 20`\n* `1 <= costs[i][j] <= 20`\n\n\n\u00a0\n\n\n**Follow up:** Could you solve it in `O(nk)` runtime?\n\n\n",
  "canonical_solution": "class Solution:\n    def minCostII(self, costs: List[List[int]]) -> int:\n        n, k = len(costs), len(costs[0])\n        f = costs[0][:]\n        for i in range(1, n):\n            g = costs[i][:]\n            for j in range(k):\n                t = min(f[h] for h in range(k) if h != j)\n                g[j] += t\n            f = g\n        return min(f)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minCostII(self, costs):\n        n, k = len(costs), len(costs[0])\n        f = costs[0][:]\n        for i in range(1, n):\n            g = costs[i][:]\n            for j in range(k):\n                t = min(f[h] for h in range(k) if h != j)\n                g[j] += t\n            f = g\n        return min(f)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Define the constraints\n    n = random.randint(1, 11)\n    k = random.randint(2, 6)\n    \n    # Generate random costs matrix\n    costs = [[random.randint(1, 21) for _ in range(k)] for _ in range(n)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCostII(costs)\n\n    return costs, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        costs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCostII(costs) == expected_result\n        print(f\"assert solution.minCostII({costs}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCostII({costs}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minCostII([[17, 3, 3, 7], [4, 9, 1, 3], [14, 6, 2, 17], [7, 7, 6, 1], [20, 18, 12, 8], [4, 9, 6, 2], [15, 11, 6, 16], [12, 18, 20, 10], [13, 6, 3, 8]]) == 42\nassert solution.minCostII([[17, 20, 17, 14, 21, 6], [11, 13, 12, 19, 15, 11], [10, 7, 7, 20, 5, 3], [11, 4, 15, 21, 20, 19], [19, 4, 12, 2, 1, 11], [3, 2, 16, 21, 4, 13]]) == 27\nassert solution.minCostII([[5, 6, 3, 16], [7, 4, 10, 4], [1, 21, 15, 15], [7, 9, 21, 21], [18, 3, 4, 5], [1, 13, 5, 15], [3, 11, 11, 21], [10, 9, 8, 8]]) == 38\nassert solution.minCostII([[14, 9, 7, 11, 9]]) == 7\nassert solution.minCostII([[11, 8, 17, 7]]) == 7\nassert solution.minCostII([[13, 10, 11], [12, 2, 16], [15, 10, 1], [6, 9, 2], [10, 9, 14], [5, 13, 12], [11, 8, 20], [17, 17, 2], [20, 7, 10]]) == 51\nassert solution.minCostII([[3, 6, 13], [3, 19, 16], [14, 14, 5], [4, 18, 7], [2, 6, 16], [7, 10, 18], [6, 16, 16]]) == 47\nassert solution.minCostII([[8, 2, 4, 7], [9, 4, 19, 1], [5, 20, 5, 5], [9, 15, 15, 16], [2, 18, 13, 3], [17, 19, 13, 20], [8, 5, 6, 11], [15, 7, 1, 6], [10, 1, 18, 14]]) == 40\nassert solution.minCostII([[12, 4, 14], [19, 9, 17], [11, 12, 3], [8, 19, 11], [16, 3, 11], [13, 14, 16]]) == 48\nassert solution.minCostII([[20, 15, 14, 9], [20, 14, 16, 1], [9, 12, 1, 8], [19, 11, 15, 18], [2, 13, 18, 15], [16, 17, 1, 7], [7, 9, 17, 13], [8, 6, 5, 2], [16, 2, 2, 4], [5, 8, 13, 6]]) == 46\nassert solution.minCostII([[16, 15, 11, 6, 5, 1], [21, 9, 19, 21, 10, 5]]) == 10\nassert solution.minCostII([[9, 15, 4, 18, 8], [6, 3, 3, 11, 3], [2, 19, 6, 9, 8], [10, 10, 2, 15, 3], [12, 2, 8, 18, 5], [13, 1, 19, 3, 7]]) == 16\nassert solution.minCostII([[15, 14, 19, 17, 3], [19, 19, 13, 21, 10], [21, 6, 12, 2, 20]]) == 18\nassert solution.minCostII([[13, 1], [17, 8], [5, 12], [2, 13], [4, 18], [14, 13], [5, 9], [8, 5]]) == 66\nassert solution.minCostII([[18, 2, 19, 14, 20, 6], [4, 13, 2, 8, 8, 10], [19, 19, 20, 21, 16, 7], [17, 11, 20, 10, 6, 13], [7, 17, 18, 3, 4, 11]]) == 20\nassert solution.minCostII([[5, 14, 17, 14, 20, 2], [6, 8, 3, 17, 7, 13], [19, 20, 6, 9, 8, 15]]) == 13\nassert solution.minCostII([[1, 9, 8, 16], [8, 12, 14, 5], [10, 15, 18, 1], [20, 13, 1, 6], [15, 13, 21, 9], [9, 4, 10, 13], [1, 7, 16, 20], [11, 15, 14, 14]]) == 43\nassert solution.minCostII([[17, 9, 17], [3, 5, 2], [20, 21, 15], [11, 8, 6], [20, 11, 14], [7, 8, 10], [5, 10, 7], [20, 5, 15], [7, 9, 9]]) == 74\nassert solution.minCostII([[18, 11, 14], [5, 18, 10]]) == 16\nassert solution.minCostII([[15, 19, 13, 11], [10, 17, 18, 18], [3, 4, 21, 10], [21, 8, 11, 16], [20, 5, 5, 1], [4, 17, 15, 17], [19, 4, 4, 20], [9, 7, 9, 14], [18, 3, 5, 15], [10, 2, 4, 6]]) == 59\nassert solution.minCostII([[16, 9, 20], [16, 7, 3], [17, 5, 9], [10, 8, 9], [3, 13, 15], [20, 12, 21], [21, 9, 7], [13, 4, 16], [4, 21, 8], [14, 8, 5]]) == 61\nassert solution.minCostII([[6, 16, 17], [11, 9, 6]]) == 12\nassert solution.minCostII([[20, 2, 4], [9, 4, 14], [4, 21, 11], [16, 11, 13], [9, 21, 11], [7, 9, 1]]) == 33\nassert solution.minCostII([[5, 5, 7, 5, 8], [7, 13, 4, 8, 17], [7, 8, 9, 19, 5], [14, 16, 8, 21, 20], [19, 14, 16, 9, 11]]) == 31\nassert solution.minCostII([[10, 1, 10], [19, 10, 11], [7, 8, 3]]) == 19\nassert solution.minCostII([[10, 19], [15, 17], [11, 7], [16, 2], [3, 7], [21, 18], [16, 4], [19, 10]]) == 87\nassert solution.minCostII([[11, 7], [21, 20], [3, 16], [12, 13], [17, 4], [10, 21], [5, 19]]) == 89\nassert solution.minCostII([[5, 1, 6, 3, 18], [9, 3, 20, 3, 5], [8, 18, 14, 18, 13], [7, 19, 21, 5, 12], [5, 18, 6, 7, 17], [19, 15, 1, 19, 7], [11, 6, 11, 13, 17], [10, 19, 1, 3, 20], [15, 1, 8, 21, 14]]) == 31\nassert solution.minCostII([[21, 14], [19, 5], [18, 14], [18, 5], [16, 9], [14, 16], [16, 16], [17, 13], [17, 5], [10, 11]]) == 136\nassert solution.minCostII([[3, 2, 4, 18, 5], [13, 21, 8, 10, 17]]) == 10\nassert solution.minCostII([[18, 21, 10, 13, 3, 15], [12, 20, 3, 6, 16, 19], [13, 6, 7, 13, 19, 2], [5, 10, 12, 11, 16, 20], [10, 13, 6, 16, 14, 9], [5, 5, 1, 9, 1, 13], [15, 10, 13, 7, 3, 6], [16, 5, 19, 5, 1, 13], [9, 15, 2, 17, 5, 10], [16, 7, 10, 15, 5, 13], [6, 14, 7, 20, 17, 17]]) == 40\nassert solution.minCostII([[7, 10, 1, 15, 18, 18], [17, 6, 2, 15, 8, 6], [20, 5, 10, 3, 14, 14], [19, 17, 1, 5, 18, 17], [20, 3, 19, 3, 1, 16], [5, 12, 16, 11, 18, 19], [2, 18, 15, 2, 7, 11]]) == 19\nassert solution.minCostII([[13, 2, 9, 18], [3, 14, 8, 15], [17, 6, 6, 11]]) == 11\nassert solution.minCostII([[15, 20, 12, 15, 7], [13, 17, 4, 14, 4]]) == 11\nassert solution.minCostII([[9, 19, 3, 4]]) == 3\nassert solution.minCostII([[7, 19, 13, 20], [2, 10, 11, 14], [5, 6, 5, 18], [5, 16, 12, 14], [8, 6, 14, 1], [19, 3, 10, 11], [17, 7, 15, 9]]) == 38\nassert solution.minCostII([[1, 16], [17, 12], [19, 19], [12, 2], [3, 7], [12, 12], [9, 8], [10, 5], [4, 17]]) == 67\nassert solution.minCostII([[11, 17, 6, 6, 21], [18, 16, 7, 16, 2], [8, 2, 11, 18, 4], [16, 13, 8, 14, 2], [3, 1, 12, 3, 4], [17, 16, 10, 18, 20], [14, 13, 7, 21, 7], [20, 15, 5, 21, 8], [2, 15, 14, 9, 15], [6, 11, 13, 18, 13]]) == 48\nassert solution.minCostII([[8, 1, 14], [5, 15, 8]]) == 6\nassert solution.minCostII([[21, 19], [18, 4], [10, 2], [19, 7], [1, 7], [19, 15], [6, 16], [19, 19], [15, 14]]) == 98\nassert solution.minCostII([[19, 7, 16, 21, 20, 17], [17, 4, 11, 18, 5, 19], [3, 3, 16, 7, 18, 1], [10, 10, 11, 13, 7, 6]]) == 20\nassert solution.minCostII([[15, 1, 6, 17, 11, 3], [12, 14, 4, 2, 15, 20], [11, 18, 1, 2, 15, 5], [15, 1, 17, 7, 11, 19], [9, 20, 8, 21, 14, 21], [6, 1, 9, 11, 13, 1]]) == 14\nassert solution.minCostII([[20, 1], [11, 13], [6, 3], [2, 4], [17, 18], [4, 18]]) == 39\nassert solution.minCostII([[16, 1, 10, 20, 15, 6]]) == 1\nassert solution.minCostII([[5, 21, 5], [20, 16, 13], [1, 3, 15], [13, 18, 4], [2, 9, 21], [6, 11, 10], [6, 7, 15], [16, 4, 14], [17, 10, 6]]) == 51\nassert solution.minCostII([[6, 18, 18, 21, 6, 11]]) == 6\nassert solution.minCostII([[21, 19], [2, 3], [8, 15], [8, 15], [3, 1], [15, 10], [1, 4]]) == 61\nassert solution.minCostII([[1, 12, 3, 7, 18], [21, 20, 18, 18, 8], [18, 2, 7, 2, 2], [2, 2, 9, 16, 9], [18, 11, 5, 11, 18], [10, 21, 21, 7, 9], [5, 9, 21, 19, 18]]) == 30\nassert solution.minCostII([[17, 5, 11, 21, 13, 4], [18, 2, 13, 1, 2, 4], [12, 9, 10, 7, 13, 17], [3, 11, 15, 6, 5, 12], [9, 5, 1, 7, 15, 6], [10, 10, 3, 11, 10, 16], [9, 15, 12, 16, 7, 19]]) == 31\nassert solution.minCostII([[12, 15, 19, 14, 7, 17], [12, 19, 17, 10, 21, 8], [7, 11, 10, 10, 13, 11], [3, 3, 1, 20, 10, 4], [6, 13, 13, 4, 3, 14], [15, 8, 6, 3, 4, 12]]) == 29\nassert solution.minCostII([[21, 11, 14], [13, 11, 1], [13, 3, 5], [18, 13, 20], [6, 2, 4], [13, 14, 20], [12, 6, 1], [2, 3, 1]]) == 51\nassert solution.minCostII([[8, 5, 11, 18], [11, 7, 5, 2], [2, 7, 14, 9], [18, 5, 20, 1], [19, 1, 15, 9], [17, 12, 5, 20], [21, 13, 21, 2], [3, 1, 16, 13], [1, 20, 7, 15], [16, 9, 13, 11], [15, 16, 1, 1]]) == 30\nassert solution.minCostII([[12, 7, 4, 7], [7, 17, 13, 17], [13, 18, 14, 7], [3, 17, 8, 5], [6, 11, 12, 18], [5, 7, 13, 3]]) == 35\nassert solution.minCostII([[21, 21, 16, 13], [12, 8, 1, 2], [19, 5, 4, 21], [20, 13, 10, 13], [10, 13, 4, 7], [10, 15, 2, 21], [20, 18, 3, 19], [3, 2, 5, 11], [8, 6, 20, 3]]) == 54\nassert solution.minCostII([[7, 2, 5, 4], [13, 19, 18, 8]]) == 10\nassert solution.minCostII([[17, 5, 16], [7, 16, 6], [11, 7, 18], [7, 12, 12], [1, 10, 9], [12, 17, 8]]) == 39\nassert solution.minCostII([[5, 4, 12, 2, 15], [20, 14, 12, 4, 3], [13, 21, 3, 9, 1], [16, 21, 8, 20, 19], [17, 6, 10, 10, 18]]) == 23\nassert solution.minCostII([[9, 5, 3, 13, 6], [7, 7, 15, 4, 13], [15, 3, 8, 1, 3], [20, 8, 12, 4, 13], [17, 16, 8, 1, 3]]) == 17\nassert solution.minCostII([[11, 14]]) == 11\nassert solution.minCostII([[11, 2, 8, 15, 16], [13, 17, 19, 5, 12], [13, 6, 15, 10, 1], [14, 1, 7, 4, 15], [20, 2, 16, 5, 9], [16, 13, 3, 5, 8], [4, 13, 7, 9, 5], [20, 13, 6, 9, 14], [9, 6, 14, 21, 10], [2, 15, 3, 1, 17], [13, 19, 11, 8, 14]]) == 43\nassert solution.minCostII([[10, 13, 11, 21, 14]]) == 10\nassert solution.minCostII([[5, 10, 4], [18, 17, 15], [13, 6, 9], [1, 5, 9], [10, 21, 6], [2, 13, 18]]) == 35\nassert solution.minCostII([[14, 5, 4, 21, 1, 19], [15, 10, 11, 10, 14, 19], [8, 2, 11, 16, 20, 7], [1, 14, 19, 14, 6, 5], [13, 6, 18, 14, 2, 2], [1, 5, 5, 11, 8, 15], [2, 9, 7, 16, 7, 5], [6, 4, 12, 10, 15, 9], [8, 20, 1, 14, 11, 16], [12, 14, 6, 5, 5, 19]]) == 32\nassert solution.minCostII([[12, 13, 19, 5, 8, 16], [7, 14, 20, 4, 2, 21], [1, 21, 4, 20, 2, 9]]) == 8\nassert solution.minCostII([[21, 15, 5], [12, 11, 19], [1, 17, 19], [11, 19, 7], [19, 17, 16], [20, 17, 19], [13, 3, 13], [18, 2, 14], [7, 21, 10], [17, 2, 8]]) == 84\nassert solution.minCostII([[8, 13, 5, 14], [8, 18, 2, 16], [12, 10, 21, 2], [9, 12, 21, 13], [21, 11, 6, 9], [20, 2, 7, 7], [17, 2, 19, 9], [6, 11, 10, 12], [16, 12, 20, 13], [14, 10, 5, 15], [10, 4, 1, 20]]) == 63\nassert solution.minCostII([[2, 8, 16, 2, 15, 4], [21, 6, 6, 14, 13, 14], [6, 10, 1, 21, 2, 15], [13, 1, 3, 1, 16, 9], [8, 10, 12, 18, 20, 12], [20, 21, 9, 10, 16, 17]]) == 27\nassert solution.minCostII([[5, 1, 10, 12, 7], [6, 15, 4, 12, 5], [5, 7, 19, 20, 3], [16, 6, 1, 18, 1]]) == 9\nassert solution.minCostII([[14, 19, 20, 9, 20]]) == 9\nassert solution.minCostII([[10, 17, 15, 2], [9, 3, 14, 5], [17, 5, 14, 12], [6, 21, 13, 5]]) == 21\nassert solution.minCostII([[12, 15, 1, 14, 16, 2], [18, 16, 6, 20, 21, 17], [15, 16, 1, 9, 14, 6], [11, 10, 8, 17, 4, 6], [3, 11, 7, 1, 20, 11], [8, 16, 4, 7, 17, 21], [13, 2, 14, 13, 19, 3]]) == 25\nassert solution.minCostII([[5, 16, 11], [7, 8, 15], [2, 3, 18], [20, 11, 13], [7, 1, 6], [16, 4, 15], [16, 8, 12], [10, 11, 6], [16, 6, 12], [4, 17, 7], [2, 17, 20]]) == 73\nassert solution.minCostII([[2, 20, 20, 2], [11, 8, 6, 5], [6, 4, 8, 6], [1, 8, 20, 15], [14, 4, 5, 9], [5, 10, 21, 13], [11, 10, 18, 12], [12, 6, 5, 13], [10, 1, 12, 11], [12, 18, 9, 6]]) == 43\nassert solution.minCostII([[16, 21, 12], [1, 11, 15], [3, 15, 9], [8, 1, 1], [18, 6, 21], [7, 6, 11]]) == 40\nassert solution.minCostII([[21, 15, 4, 18, 19], [12, 12, 16, 6, 17]]) == 10\nassert solution.minCostII([[19, 1, 1, 1, 3], [15, 18, 16, 8, 6]]) == 7\nassert solution.minCostII([[17, 17], [17, 16]]) == 33\nassert solution.minCostII([[21, 19], [5, 17], [11, 9], [8, 15], [6, 18]]) == 59\nassert solution.minCostII([[19, 8, 1, 3, 5], [2, 8, 12, 1, 7], [1, 1, 3, 2, 13], [13, 2, 21, 3, 2], [9, 11, 6, 15, 18], [5, 9, 19, 10, 12]]) == 16\nassert solution.minCostII([[11, 20, 7, 12, 3], [4, 10, 13, 21, 2], [16, 6, 21, 4, 11], [4, 9, 17, 6, 8], [14, 6, 5, 5, 14], [21, 16, 20, 16, 6], [12, 16, 13, 8, 10], [11, 21, 12, 8, 1], [20, 17, 1, 4, 6]]) == 36\nassert solution.minCostII([[1, 19, 1, 6, 2, 17], [10, 14, 6, 15, 11, 12], [13, 9, 10, 9, 3, 18], [21, 14, 19, 3, 17, 4], [2, 2, 21, 8, 17, 6], [19, 5, 9, 7, 12, 12], [3, 4, 15, 5, 8, 13]]) == 23\nassert solution.minCostII([[3, 20, 20, 21, 5, 11], [21, 3, 13, 8, 5, 15], [8, 20, 12, 17, 2, 2]]) == 8\nassert solution.minCostII([[20, 6], [2, 14], [4, 8], [2, 14], [12, 15], [21, 2], [3, 7], [5, 2]]) == 66\nassert solution.minCostII([[13, 17, 21, 14, 6, 18], [8, 16, 5, 6, 8, 14], [17, 18, 21, 10, 2, 6], [21, 11, 14, 1, 15, 8], [11, 15, 9, 17, 11, 20], [17, 10, 4, 10, 20, 13], [14, 13, 13, 12, 20, 7], [19, 9, 16, 8, 8, 13]]) == 44\nassert solution.minCostII([[18, 14], [20, 5], [20, 8], [14, 14], [17, 12], [18, 13], [9, 12], [10, 1], [3, 2], [13, 9], [3, 17]]) == 112\nassert solution.minCostII([[1, 9, 20, 17, 4], [11, 6, 21, 10, 3], [17, 1, 14, 14, 12]]) == 5\nassert solution.minCostII([[5, 13, 2, 14, 13], [5, 11, 10, 4, 15], [6, 20, 17, 8, 4], [17, 11, 13, 16, 1], [18, 19, 2, 10, 7], [2, 20, 9, 14, 3], [7, 2, 19, 2, 9]]) == 19\nassert solution.minCostII([[10, 8, 12, 7], [18, 8, 4, 17], [4, 9, 11, 10]]) == 15\nassert solution.minCostII([[9, 5, 6, 11, 1], [10, 13, 4, 16, 9], [18, 12, 8, 3, 19], [6, 7, 16, 6, 18], [13, 13, 11, 18, 14], [18, 17, 7, 5, 18], [4, 4, 21, 1, 5], [13, 19, 8, 2, 13], [17, 18, 1, 5, 2], [20, 7, 21, 7, 16], [6, 20, 15, 20, 7]]) == 50\nassert solution.minCostII([[12, 6, 18], [14, 21, 13], [10, 17, 21]]) == 29\nassert solution.minCostII([[17, 12, 5, 21, 16], [21, 5, 18, 7, 19], [20, 7, 11, 7, 16], [14, 18, 2, 9, 13], [3, 11, 10, 12, 4], [2, 3, 8, 19, 10], [13, 16, 8, 20, 4], [11, 12, 16, 14, 13], [3, 9, 11, 17, 12]]) == 44\nassert solution.minCostII([[10, 3, 15, 7, 13], [11, 10, 5, 8, 3], [13, 3, 16, 19, 1], [1, 1, 13, 16, 1]]) == 10\nassert solution.minCostII([[9, 4], [7, 2], [8, 2], [14, 6], [5, 13], [8, 8], [16, 17], [5, 11], [10, 20], [20, 9]]) == 84\nassert solution.minCostII([[8, 7], [13, 9], [9, 12]]) == 26\nassert solution.minCostII([[14, 11, 3, 5], [3, 18, 18, 5], [10, 18, 3, 5], [4, 4, 11, 10], [14, 21, 15, 13], [14, 11, 6, 6], [4, 11, 15, 9], [15, 16, 6, 14]]) == 42\nassert solution.minCostII([[12, 8, 3, 19], [8, 21, 12, 2], [8, 18, 1, 1], [3, 14, 13, 20]]) == 9\nassert solution.minCostII([[17, 18, 9, 6], [2, 16, 10, 4]]) == 8\nassert solution.minCostII([[14, 11, 19, 17, 11], [21, 18, 15, 13, 13], [1, 19, 7, 20, 21], [3, 18, 11, 18, 10], [6, 7, 13, 15, 21], [1, 12, 12, 9, 1], [11, 18, 3, 15, 16], [6, 18, 11, 16, 1], [14, 10, 9, 10, 15]]) == 55\nassert solution.minCostII([[20, 9, 17], [11, 4, 14], [21, 13, 11], [21, 20, 14]]) == 47\nassert solution.minCostII([[11, 5, 14, 16, 15, 13], [21, 13, 12, 20, 12, 20], [14, 15, 13, 20, 6, 11]]) == 23",
  "inefficient_solution": "class Solution:\n    def minCostII(self, costs: List[List[int]]) -> int:\n        n, k = len(costs), len(costs[0])\n        f = [costs[0][i] for i in range(k)]\n        for i in range(1, n):\n            g = [0] * k\n            for j in range(k):\n                g[j] = min(f[h] for h in range(k) if h != j)\n                g[j] += costs[i][j]\n            f = g[:]\n        return min(f)",
  "is_python": true
}