{
  "problem_idx": 501,
  "task_name": "Find Mode in Binary Search Tree",
  "markdown_description": "\nGiven the `root` of a binary search tree (BST) with duplicates, return *all the [mode(s)](https://en.wikipedia.org/wiki/Mode_(statistics)) (i.e., the most frequently occurred element) in it*.\n\n\nIf the tree has more than one mode, return them in **any order**.\n\n\nAssume a BST is defined as follows:\n\n\n* The left subtree of a node contains only nodes with keys **less than or equal to** the node's key.\n* The right subtree of a node contains only nodes with keys **greater than or equal to** the node's key.\n* Both the left and right subtrees must also be binary search trees.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0500-0599/0501.Find%20Mode%20in%20Binary%20Search%20Tree/images/mode-tree.jpg)\n\n```\n\n**Input:** root = [1,null,2,2]\n**Output:** [2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [0]\n**Output:** [0]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 104]`.\n* `-105 <= Node.val <= 105`\n\n\n\u00a0\n\n\n**Follow up:** Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findMode(self, root: TreeNode) -> List[int]:\n        def dfs(root):\n            if root is None:\n                return\n            nonlocal mx, prev, ans, cnt\n            dfs(root.left)\n            cnt = cnt + 1 if prev == root.val else 1\n            if cnt > mx:\n                ans = [root.val]\n                mx = cnt\n            elif cnt == mx:\n                ans.append(root.val)\n            prev = root.val\n            dfs(root.right)\n\n        prev = None\n        mx = cnt = 0\n        ans = []\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def findMode(self, root: TreeNode) -> List[int]:\n        def dfs(root):\n            if root is None:\n                return\n            nonlocal mx, prev, ans, cnt\n            dfs(root.left)\n            cnt = cnt + 1 if prev == root.val else 1\n            if cnt > mx:\n                ans = [root.val]\n                mx = cnt\n            elif cnt == mx:\n                ans.append(root.val)\n            prev = root.val\n            dfs(root.right)\n\n        prev = None\n        mx = cnt = 0\n        ans = []\n        dfs(root)\n        return ans\n        \ndef generate_test_case():\n    # Initialize the tree with a random root value\n    root_val = random.randint(-100000, 100000)\n    root = TreeNode(root_val)\n    \n    def insert_node(node, val):\n        if val < node.val:\n            if node.left:\n                insert_node(node.left, val)\n            else:\n                node.left = TreeNode(val)\n        elif val > node.val:\n            if node.right:\n                insert_node(node.right, val)\n            else:\n                node.right = TreeNode(val)\n    \n    # Generate random values to insert into the tree\n    values = random.sample(range(-100000, 100001), random.randint(1, 10))\n    \n    # Insert the values into the tree\n    for val in values:\n        insert_node(root, val)\n    \n    # Calculate the expected result using the provided Solution class\n    solution = Solution()\n    expected_result = solution.findMode(root)\n    \n    return root, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMode(root) == expected_result\n        print(f\"root = TreeNode({root.val})\")\n        test_case_generator_results.append(f\"root = TreeNode({root.val})\")\n        test_case_generator_results.append(f\"assert solution.findMode(root) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "root = TreeNode(-96100)\nassert solution.findMode(root) == [-98707, -96100, -76096, 7031, 12045, 14218, 26819, 67349, 68317]\nroot = TreeNode(88102)\nassert solution.findMode(root) == [-80807, -68470, -42107, -15640, -9079, 31743, 39010, 62924, 88102]\nroot = TreeNode(-96023)\nassert solution.findMode(root) == [-96023, -74654, -58181, -6162, 26689, 73070, 98713]\nroot = TreeNode(66292)\nassert solution.findMode(root) == [-90429, -37509, 41298, 66292, 78650]\nroot = TreeNode(60475)\nassert solution.findMode(root) == [27361, 60475, 63322]\nroot = TreeNode(73096)\nassert solution.findMode(root) == [13713, 62048, 73096]\nroot = TreeNode(-78546)\nassert solution.findMode(root) == [-78546, -71279, -38760, 3839, 6276, 13060, 13564, 71635, 84668, 89291, 95884]\nroot = TreeNode(1819)\nassert solution.findMode(root) == [-19937, -8069, -5656, 1819, 3193, 22932, 28847, 31198]\nroot = TreeNode(7439)\nassert solution.findMode(root) == [-6154, 7439, 21143, 39103, 89720]\nroot = TreeNode(64399)\nassert solution.findMode(root) == [-90653, -87307, -74991, -62557, -4208, 4364, 6354, 47049, 64399, 95626]\nroot = TreeNode(45312)\nassert solution.findMode(root) == [-97880, -95836, -83695, -37111, -22918, 16545, 35579, 45312, 55297, 74582]\nroot = TreeNode(-15841)\nassert solution.findMode(root) == [-15841, -15108]\nroot = TreeNode(-27991)\nassert solution.findMode(root) == [-86844, -32006, -27991, 5531]\nroot = TreeNode(-94959)\nassert solution.findMode(root) == [-94959, -90707, -32133]\nroot = TreeNode(-30568)\nassert solution.findMode(root) == [-97031, -30568]\nroot = TreeNode(-17225)\nassert solution.findMode(root) == [-34198, -17225, 36106, 74351, 88162]\nroot = TreeNode(-16264)\nassert solution.findMode(root) == [-84280, -16264, 2917, 16872, 51850]\nroot = TreeNode(-36672)\nassert solution.findMode(root) == [-36672, 43260, 58568]\nroot = TreeNode(-22069)\nassert solution.findMode(root) == [-99861, -96591, -76576, -53246, -48721, -45961, -22069, -14329, 14540, 24775, 89693]\nroot = TreeNode(-62409)\nassert solution.findMode(root) == [-62409, -47285, -26240, -4996, 46988, 47910, 62163, 82099]\nroot = TreeNode(52745)\nassert solution.findMode(root) == [-82590, 36256, 52745, 56609, 99181]\nroot = TreeNode(74535)\nassert solution.findMode(root) == [-91846, -35772, -31559, -17413, 34385, 74535, 86797]\nroot = TreeNode(-91501)\nassert solution.findMode(root) == [-91501, 63019, 64562]\nroot = TreeNode(90428)\nassert solution.findMode(root) == [-77635, -53694, -48531, -37826, 8343, 17517, 42509, 44173, 69554, 90428]\nroot = TreeNode(69872)\nassert solution.findMode(root) == [2519, 23443, 43809, 45513, 48994, 64071, 69872, 70976, 76534, 76825, 92392]\nroot = TreeNode(-56005)\nassert solution.findMode(root) == [-56005, 31460]\nroot = TreeNode(-28214)\nassert solution.findMode(root) == [-98230, -28214, -21563, -21332]\nroot = TreeNode(-73149)\nassert solution.findMode(root) == [-89250, -73149, -59067, -55914, -39145, -31459, 17990, 19974, 68792]\nroot = TreeNode(-21427)\nassert solution.findMode(root) == [-21427, 10653]\nroot = TreeNode(38620)\nassert solution.findMode(root) == [-77867, 38620, 40024, 67928, 98597]\nroot = TreeNode(8177)\nassert solution.findMode(root) == [-98456, -81546, -37787, -34118, -28363, -24063, -23951, 8177, 41651, 51832, 64890]\nroot = TreeNode(-83368)\nassert solution.findMode(root) == [-83368, 12377]\nroot = TreeNode(6375)\nassert solution.findMode(root) == [-31839, -15441, 6375, 16163, 18683, 27647]\nroot = TreeNode(-12682)\nassert solution.findMode(root) == [-12682, -5920]\nroot = TreeNode(-47009)\nassert solution.findMode(root) == [-47009, 41840, 69176]\nroot = TreeNode(-80215)\nassert solution.findMode(root) == [-80215, -63870, -23703, -11674, 61835, 84774]\nroot = TreeNode(21221)\nassert solution.findMode(root) == [-74917, 9439, 11766, 21221]\nroot = TreeNode(1606)\nassert solution.findMode(root) == [-93672, -57028, -41560, -29297, -26074, -9124, 1606, 37269, 95831, 97851]\nroot = TreeNode(50622)\nassert solution.findMode(root) == [-66208, 8835, 36218, 50622, 66151, 83264]\nroot = TreeNode(47736)\nassert solution.findMode(root) == [-97793, -96541, -24198, -10097, 777, 47247, 47736, 62300, 66373, 92649]\nroot = TreeNode(-16502)\nassert solution.findMode(root) == [-54729, -39623, -16502, -13484, 20700]\nroot = TreeNode(-15286)\nassert solution.findMode(root) == [-42311, -20324, -15286, 81743, 89239]\nroot = TreeNode(37596)\nassert solution.findMode(root) == [-83028, -52306, -47958, 1207, 5636, 37596]\nroot = TreeNode(40677)\nassert solution.findMode(root) == [-92706, -83470, 40677]\nroot = TreeNode(66673)\nassert solution.findMode(root) == [-65659, -12251, 5619, 32737, 66673, 79906]\nroot = TreeNode(97064)\nassert solution.findMode(root) == [-42508, 7480, 84613, 85516, 97064]\nroot = TreeNode(-37420)\nassert solution.findMode(root) == [-74628, -71536, -45932, -38661, -37420, 8488, 44798, 49026, 53064, 82825]\nroot = TreeNode(52455)\nassert solution.findMode(root) == [52455, 61644, 67797]\nroot = TreeNode(90292)\nassert solution.findMode(root) == [-88906, -66421, -13262, 90292]\nroot = TreeNode(70820)\nassert solution.findMode(root) == [-47235, -13802, -6290, 6702, 24739, 37456, 70820, 84222, 93937, 96921]\nroot = TreeNode(16809)\nassert solution.findMode(root) == [-58462, 16809]\nroot = TreeNode(-66324)\nassert solution.findMode(root) == [-66428, -66324, -11260, 38497]\nroot = TreeNode(56682)\nassert solution.findMode(root) == [-58336, -30498, -6702, -5576, 56682]\nroot = TreeNode(-92017)\nassert solution.findMode(root) == [-92017, -15094]\nroot = TreeNode(-90054)\nassert solution.findMode(root) == [-90054, -72588, -68306, 10484]\nroot = TreeNode(8232)\nassert solution.findMode(root) == [-32942, 8232, 34533, 85262]\nroot = TreeNode(-78606)\nassert solution.findMode(root) == [-78606, -19361, 14413, 22217, 56680, 81286, 98355]\nroot = TreeNode(-35437)\nassert solution.findMode(root) == [-37920, -35437]\nroot = TreeNode(-17381)\nassert solution.findMode(root) == [-92873, -83417, -71982, -62714, -31078, -17381, 41945, 43380, 71905, 97301]\nroot = TreeNode(57894)\nassert solution.findMode(root) == [12633, 57894, 94179]\nroot = TreeNode(-4348)\nassert solution.findMode(root) == [-13361, -4348, -4032, 12604, 50630, 74219]\nroot = TreeNode(7596)\nassert solution.findMode(root) == [-14523, 7596, 47236, 57094, 59952]\nroot = TreeNode(-28993)\nassert solution.findMode(root) == [-91158, -62001, -28993, 52543]\nroot = TreeNode(86611)\nassert solution.findMode(root) == [567, 86611, 95042]\nroot = TreeNode(-77058)\nassert solution.findMode(root) == [-77058, -8030]\nroot = TreeNode(4787)\nassert solution.findMode(root) == [-15620, 4787]\nroot = TreeNode(-26577)\nassert solution.findMode(root) == [-64088, -26577, 31162, 67809, 74702]\nroot = TreeNode(-11611)\nassert solution.findMode(root) == [-41721, -11611, 41290, 63114, 93065, 95310, 97131]\nroot = TreeNode(-56594)\nassert solution.findMode(root) == [-83383, -64966, -56594, 28002, 48872, 74062, 74594, 84357, 86827, 97947]\nroot = TreeNode(2980)\nassert solution.findMode(root) == [-39571, 2980, 21052]\nroot = TreeNode(13720)\nassert solution.findMode(root) == [-45211, 12377, 13720, 79650]\nroot = TreeNode(-43189)\nassert solution.findMode(root) == [-89456, -43189, -34183, -33070, -11381, 1597, 14141, 21653, 22125, 22539, 52656]\nroot = TreeNode(-32855)\nassert solution.findMode(root) == [-33464, -32855, -14462, -10162]\nroot = TreeNode(-88655)\nassert solution.findMode(root) == [-88655, -59800, -32054, -28378, -26251, 939, 9306, 29196, 59526, 63813, 72154]\nroot = TreeNode(-70337)\nassert solution.findMode(root) == [-93537, -86640, -70337, -47712, -9171, 6940, 17133, 30452, 59533, 59774, 60339]\nroot = TreeNode(-49100)\nassert solution.findMode(root) == [-49100, 51740]\nroot = TreeNode(97322)\nassert solution.findMode(root) == [512, 25332, 42335, 71154, 97322]\nroot = TreeNode(59933)\nassert solution.findMode(root) == [-90879, -34369, -12378, 59933]\nroot = TreeNode(47811)\nassert solution.findMode(root) == [-94524, -46122, -38537, 24817, 41358, 47811, 48349, 52882, 69451, 77125, 89874]\nroot = TreeNode(3415)\nassert solution.findMode(root) == [-76960, -57659, -38432, -24436, -18488, 3415, 39254, 57296]\nroot = TreeNode(-80586)\nassert solution.findMode(root) == [-80586, -35539, -11886, 15750]\nroot = TreeNode(11136)\nassert solution.findMode(root) == [-83503, -80396, -56299, -20653, 9715, 11136, 39534, 61227, 66463, 74081, 96157]\nroot = TreeNode(3140)\nassert solution.findMode(root) == [-77031, -50124, -3098, 3140, 12333, 27532, 85590, 95042]\nroot = TreeNode(92494)\nassert solution.findMode(root) == [-99991, -9342, -2903, 10687, 49438, 92494]\nroot = TreeNode(-33829)\nassert solution.findMode(root) == [-40372, -33829, -5673, 6285, 12408]\nroot = TreeNode(-24690)\nassert solution.findMode(root) == [-24690, 19814]\nroot = TreeNode(98129)\nassert solution.findMode(root) == [-96726, 98129]\nroot = TreeNode(9191)\nassert solution.findMode(root) == [-63713, 9191]\nroot = TreeNode(-38022)\nassert solution.findMode(root) == [-78066, -38022, -24988]\nroot = TreeNode(66927)\nassert solution.findMode(root) == [-70431, 66927]\nroot = TreeNode(19257)\nassert solution.findMode(root) == [-97664, -77902, -47315, -42660, -7527, 19257, 29262, 47906, 83514, 83703]\nroot = TreeNode(-2483)\nassert solution.findMode(root) == [-2483, 22438]\nroot = TreeNode(-56359)\nassert solution.findMode(root) == [-96915, -56359, -29683, -10360, -2852, 50726, 62914, 77301, 89936, 96592]\nroot = TreeNode(72110)\nassert solution.findMode(root) == [-91813, -59076, -38474, -35908, 31244, 32201, 39628, 46345, 64084, 72110]\nroot = TreeNode(90494)\nassert solution.findMode(root) == [-89542, -66276, -65731, -56352, 44055, 90494]\nroot = TreeNode(10899)\nassert solution.findMode(root) == [-30607, 10899, 53259, 54485]\nroot = TreeNode(-11801)\nassert solution.findMode(root) == [-85226, -56339, -11801, -11279, 2492, 18483, 52206, 57359, 70288]\nroot = TreeNode(-57776)\nassert solution.findMode(root) == [-89288, -88742, -81583, -57776, -43995, -40518, 729, 9881]\nroot = TreeNode(99814)\nassert solution.findMode(root) == [-96610, -67954, -57093, -22063, 21775, 22411, 28513, 99814]\nroot = TreeNode(-95474)\nassert solution.findMode(root) == [-95474, -71699, -35179, -3143, 35862, 39790, 44658, 70462]",
  "inefficient_solution": "",
  "is_python": true
}