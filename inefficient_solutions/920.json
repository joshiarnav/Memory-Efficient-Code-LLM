{
  "problem_idx": 920,
  "task_name": "Number of Music Playlists",
  "markdown_description": "\nYour music player contains `n` different songs. You want to listen to `goal` songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\n\n\n* Every song is played **at least once**.\n* A song can only be played again only if `k` other songs have been played.\n\n\nGiven `n`, `goal`, and `k`, return *the number of possible playlists that you can create*. Since the answer can be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, goal = 3, k = 1\n**Output:** 6\n**Explanation:** There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, goal = 3, k = 0\n**Output:** 6\n**Explanation:** There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 2, goal = 3, k = 1\n**Output:** 2\n**Explanation:** There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= k < n <= goal <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def numMusicPlaylists(self, n: int, goal: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [[0] * (n + 1) for _ in range(goal + 1)]\n        f[0][0] = 1\n        for i in range(1, goal + 1):\n            for j in range(1, n + 1):\n                f[i][j] = f[i - 1][j - 1] * (n - j + 1)\n                if j > k:\n                    f[i][j] += f[i - 1][j] * (j - k)\n                f[i][j] %= mod\n        return f[goal][n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numMusicPlaylists(self, n: int, goal: int, k: int) -> int:\n        mod = 10**9 + 7\n        f = [[0] * (n + 1) for _ in range(goal + 1)]\n        f[0][0] = 1\n        for i in range(1, goal + 1):\n            for j in range(1, n + 1):\n                f[i][j] = f[i - 1][j - 1] * (n - j + 1)\n                if j > k:\n                    f[i][j] += f[i - 1][j] * (j - k)\n                f[i][j] %= mod\n        return f[goal][n]\n        \n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers for inputs\n    n = random.randint(1, 10)\n    goal = random.randint(n, min(100, n+10))\n    k = random.randint(0, n-1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numMusicPlaylists(n, goal, k)\n\n    return n, goal, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, goal, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numMusicPlaylists(n, goal, k) == expected_result\n        print(f\"assert solution.numMusicPlaylists({n}, {goal}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numMusicPlaylists({n}, {goal}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numMusicPlaylists(10, 11, 4) == 76204800\nassert solution.numMusicPlaylists(4, 12, 1) == 684024\nassert solution.numMusicPlaylists(1, 3, 0) == 1\nassert solution.numMusicPlaylists(7, 17, 2) == 265269366\nassert solution.numMusicPlaylists(10, 13, 2) == 110143699\nassert solution.numMusicPlaylists(8, 14, 1) == 445894070\nassert solution.numMusicPlaylists(5, 6, 2) == 720\nassert solution.numMusicPlaylists(7, 9, 3) == 327600\nassert solution.numMusicPlaylists(10, 16, 5) == 333817735\nassert solution.numMusicPlaylists(5, 11, 3) == 15240\nassert solution.numMusicPlaylists(3, 6, 1) == 90\nassert solution.numMusicPlaylists(8, 15, 2) == 835297215\nassert solution.numMusicPlaylists(6, 10, 0) == 16435440\nassert solution.numMusicPlaylists(5, 11, 1) == 4092600\nassert solution.numMusicPlaylists(10, 14, 4) == 834617026\nassert solution.numMusicPlaylists(6, 12, 3) == 2178000\nassert solution.numMusicPlaylists(7, 12, 4) == 4868640\nassert solution.numMusicPlaylists(5, 10, 1) == 932400\nassert solution.numMusicPlaylists(8, 15, 5) == 376185600\nassert solution.numMusicPlaylists(10, 12, 9) == 3628800\nassert solution.numMusicPlaylists(7, 17, 6) == 5040\nassert solution.numMusicPlaylists(2, 11, 0) == 2046\nassert solution.numMusicPlaylists(4, 7, 2) == 360\nassert solution.numMusicPlaylists(10, 19, 1) == 418719089\nassert solution.numMusicPlaylists(4, 6, 1) == 600\nassert solution.numMusicPlaylists(5, 14, 0) == 809004172\nassert solution.numMusicPlaylists(5, 7, 2) == 3000\nassert solution.numMusicPlaylists(1, 5, 0) == 1\nassert solution.numMusicPlaylists(4, 14, 0) == 249401880\nassert solution.numMusicPlaylists(10, 10, 3) == 3628800\nassert solution.numMusicPlaylists(1, 9, 0) == 1\nassert solution.numMusicPlaylists(8, 10, 1) == 18627840\nassert solution.numMusicPlaylists(1, 7, 0) == 1\nassert solution.numMusicPlaylists(7, 9, 0) == 2328480\nassert solution.numMusicPlaylists(4, 13, 2) == 24552\nassert solution.numMusicPlaylists(7, 11, 5) == 156240\nassert solution.numMusicPlaylists(9, 15, 8) == 362880\nassert solution.numMusicPlaylists(2, 6, 0) == 62\nassert solution.numMusicPlaylists(10, 16, 6) == 760223139\nassert solution.numMusicPlaylists(4, 10, 0) == 818520\nassert solution.numMusicPlaylists(2, 3, 1) == 2\nassert solution.numMusicPlaylists(2, 10, 1) == 2\nassert solution.numMusicPlaylists(8, 13, 6) == 2540160\nassert solution.numMusicPlaylists(4, 4, 1) == 24\nassert solution.numMusicPlaylists(5, 13, 1) == 73380120\nassert solution.numMusicPlaylists(4, 9, 0) == 186480\nassert solution.numMusicPlaylists(1, 4, 0) == 1\nassert solution.numMusicPlaylists(1, 8, 0) == 1\nassert solution.numMusicPlaylists(3, 12, 2) == 6\nassert solution.numMusicPlaylists(6, 13, 0) == 711344598\nassert solution.numMusicPlaylists(10, 10, 7) == 3628800\nassert solution.numMusicPlaylists(3, 3, 1) == 6\nassert solution.numMusicPlaylists(8, 16, 0) == 926012475\nassert solution.numMusicPlaylists(4, 7, 3) == 24\nassert solution.numMusicPlaylists(5, 15, 0) == 292030225\nassert solution.numMusicPlaylists(8, 18, 5) == 548719930\nassert solution.numMusicPlaylists(3, 10, 1) == 1530\nassert solution.numMusicPlaylists(3, 12, 1) == 6138\nassert solution.numMusicPlaylists(4, 7, 2) == 360\nassert solution.numMusicPlaylists(6, 7, 3) == 4320\nassert solution.numMusicPlaylists(5, 8, 2) == 10800\nassert solution.numMusicPlaylists(2, 3, 1) == 2\nassert solution.numMusicPlaylists(10, 14, 1) == 560848472\nassert solution.numMusicPlaylists(5, 11, 2) == 363000\nassert solution.numMusicPlaylists(10, 13, 2) == 110143699\nassert solution.numMusicPlaylists(10, 15, 3) == 694588868\nassert solution.numMusicPlaylists(6, 12, 4) == 91440\nassert solution.numMusicPlaylists(9, 18, 6) == 398554663\nassert solution.numMusicPlaylists(7, 9, 4) == 126000\nassert solution.numMusicPlaylists(1, 10, 0) == 1\nassert solution.numMusicPlaylists(2, 11, 0) == 2046\nassert solution.numMusicPlaylists(10, 13, 5) == 810239979\nassert solution.numMusicPlaylists(1, 7, 0) == 1\nassert solution.numMusicPlaylists(2, 8, 1) == 2\nassert solution.numMusicPlaylists(6, 8, 1) == 100800\nassert solution.numMusicPlaylists(8, 15, 7) == 40320\nassert solution.numMusicPlaylists(9, 17, 4) == 684823812\nassert solution.numMusicPlaylists(5, 5, 2) == 120\nassert solution.numMusicPlaylists(8, 14, 6) == 5120640\nassert solution.numMusicPlaylists(9, 16, 5) == 889759636\nassert solution.numMusicPlaylists(8, 12, 1) == 579955826\nassert solution.numMusicPlaylists(1, 11, 0) == 1\nassert solution.numMusicPlaylists(3, 12, 2) == 6\nassert solution.numMusicPlaylists(2, 2, 0) == 2\nassert solution.numMusicPlaylists(5, 6, 3) == 360\nassert solution.numMusicPlaylists(7, 7, 6) == 5040\nassert solution.numMusicPlaylists(2, 3, 0) == 6\nassert solution.numMusicPlaylists(2, 12, 0) == 4094\nassert solution.numMusicPlaylists(5, 14, 4) == 120\nassert solution.numMusicPlaylists(9, 12, 4) == 381024000\nassert solution.numMusicPlaylists(7, 17, 4) == 318589993\nassert solution.numMusicPlaylists(6, 13, 4) == 183600\nassert solution.numMusicPlaylists(5, 10, 4) == 120\nassert solution.numMusicPlaylists(4, 13, 1) == 2076624\nassert solution.numMusicPlaylists(3, 8, 2) == 6\nassert solution.numMusicPlaylists(8, 9, 4) == 403200\nassert solution.numMusicPlaylists(4, 10, 0) == 818520\nassert solution.numMusicPlaylists(1, 11, 0) == 1\nassert solution.numMusicPlaylists(4, 10, 0) == 818520\nassert solution.numMusicPlaylists(6, 15, 0) == 899154446",
  "inefficient_solution": "def numMusicPlaylists(n, goal, k):\n    mod = 10**9 + 7\n    playlists = [[0] * (goal + 1) for _ in range(n + 1)]\n    playlists[0][0] = 1\n    for _ in range(goal * n * 100):  # Arbitrarily large number\n        new_playlists = [[0] * (goal + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            for j in range(goal + 1):\n                if i == 0 and j == 0:\n                    new_playlists[i][j] = playlists[i][j]\n                elif i > 0:\n                    new_playlists[i][j] += playlists[i - 1][j - 1] * (n - i + 1)\n                    if j > k:\n                        new_playlists[i][j] += playlists[i - 1][j] * (i - k)\n                new_playlists[i][j] %= mod\n        playlists = new_playlists\n    return playlists[n][goal]",
  "is_python": true
}