{
  "problem_idx": 400,
  "task_name": "Nth Digit",
  "markdown_description": "\nGiven an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3\n**Output:** 3\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 11\n**Output:** 0\n**Explanation:** The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        k, cnt = 1, 9\n        while k * cnt < n:\n            n -= k * cnt\n            k += 1\n            cnt *= 10\n        num = 10 ** (k - 1) + (n - 1) // k\n        idx = (n - 1) % k\n        return int(str(num)[idx])\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random n value\n    n = random.randint(1, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findNthDigit(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findNthDigit(n) == expected_result\n        print(f\"assert solution.findNthDigit({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findNthDigit({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findNthDigit(46) == 2\nassert solution.findNthDigit(26) == 1\nassert solution.findNthDigit(79) == 4\nassert solution.findNthDigit(36) == 2\nassert solution.findNthDigit(60) == 3\nassert solution.findNthDigit(58) == 3\nassert solution.findNthDigit(12) == 1\nassert solution.findNthDigit(60) == 3\nassert solution.findNthDigit(93) == 1\nassert solution.findNthDigit(98) == 5\nassert solution.findNthDigit(5) == 5\nassert solution.findNthDigit(23) == 6\nassert solution.findNthDigit(79) == 4\nassert solution.findNthDigit(2) == 2\nassert solution.findNthDigit(8) == 8\nassert solution.findNthDigit(41) == 5\nassert solution.findNthDigit(36) == 2\nassert solution.findNthDigit(56) == 3\nassert solution.findNthDigit(81) == 5\nassert solution.findNthDigit(18) == 1\nassert solution.findNthDigit(52) == 3\nassert solution.findNthDigit(69) == 9\nassert solution.findNthDigit(75) == 2\nassert solution.findNthDigit(86) == 4\nassert solution.findNthDigit(87) == 8\nassert solution.findNthDigit(16) == 1\nassert solution.findNthDigit(43) == 6\nassert solution.findNthDigit(23) == 6\nassert solution.findNthDigit(72) == 4\nassert solution.findNthDigit(58) == 3\nassert solution.findNthDigit(43) == 6\nassert solution.findNthDigit(34) == 2\nassert solution.findNthDigit(19) == 4\nassert solution.findNthDigit(56) == 3\nassert solution.findNthDigit(64) == 3\nassert solution.findNthDigit(81) == 5\nassert solution.findNthDigit(19) == 4\nassert solution.findNthDigit(6) == 6\nassert solution.findNthDigit(98) == 5\nassert solution.findNthDigit(40) == 2\nassert solution.findNthDigit(13) == 1\nassert solution.findNthDigit(81) == 5\nassert solution.findNthDigit(90) == 5\nassert solution.findNthDigit(88) == 4\nassert solution.findNthDigit(54) == 3\nassert solution.findNthDigit(60) == 3\nassert solution.findNthDigit(30) == 2\nassert solution.findNthDigit(7) == 7\nassert solution.findNthDigit(46) == 2\nassert solution.findNthDigit(5) == 5\nassert solution.findNthDigit(26) == 1\nassert solution.findNthDigit(99) == 4\nassert solution.findNthDigit(30) == 2\nassert solution.findNthDigit(10) == 1\nassert solution.findNthDigit(77) == 3\nassert solution.findNthDigit(83) == 6\nassert solution.findNthDigit(99) == 4\nassert solution.findNthDigit(54) == 3\nassert solution.findNthDigit(65) == 7\nassert solution.findNthDigit(54) == 3\nassert solution.findNthDigit(21) == 5\nassert solution.findNthDigit(6) == 6\nassert solution.findNthDigit(35) == 2\nassert solution.findNthDigit(58) == 3\nassert solution.findNthDigit(12) == 1\nassert solution.findNthDigit(58) == 3\nassert solution.findNthDigit(96) == 5\nassert solution.findNthDigit(71) == 0\nassert solution.findNthDigit(43) == 6\nassert solution.findNthDigit(31) == 0\nassert solution.findNthDigit(95) == 2\nassert solution.findNthDigit(65) == 7\nassert solution.findNthDigit(93) == 1\nassert solution.findNthDigit(40) == 2\nassert solution.findNthDigit(64) == 3\nassert solution.findNthDigit(86) == 4\nassert solution.findNthDigit(19) == 4\nassert solution.findNthDigit(38) == 2\nassert solution.findNthDigit(57) == 3\nassert solution.findNthDigit(74) == 4\nassert solution.findNthDigit(59) == 4\nassert solution.findNthDigit(66) == 3\nassert solution.findNthDigit(86) == 4\nassert solution.findNthDigit(55) == 2\nassert solution.findNthDigit(47) == 8\nassert solution.findNthDigit(43) == 6\nassert solution.findNthDigit(97) == 3\nassert solution.findNthDigit(71) == 0\nassert solution.findNthDigit(48) == 2\nassert solution.findNthDigit(27) == 8\nassert solution.findNthDigit(55) == 2\nassert solution.findNthDigit(86) == 4\nassert solution.findNthDigit(21) == 5\nassert solution.findNthDigit(19) == 4\nassert solution.findNthDigit(8) == 8\nassert solution.findNthDigit(61) == 5\nassert solution.findNthDigit(93) == 1\nassert solution.findNthDigit(87) == 8\nassert solution.findNthDigit(89) == 9\nassert solution.findNthDigit(51) == 0",
  "inefficient_solution": "class Solution:\n    def findNthDigit(self, n: int) -> int:\n        num_list = []\n        i = 1\n        while len(num_list) < 1000000:\n            num_str = str(i)\n            num_list.extend([int(d) for d in num_str])\n            i += 1\n        return num_list[n - 1]",
  "is_python": true
}