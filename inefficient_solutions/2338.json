{
  "problem_idx": 2338,
  "task_name": "Count the Number of Ideal Arrays",
  "markdown_description": "\nYou are given two integers `n` and `maxValue`, which are used to describe an **ideal** array.\n\n\nA **0-indexed** integer array `arr` of length `n` is considered **ideal** if the following conditions hold:\n\n\n* Every `arr[i]` is a value from `1` to `maxValue`, for `0 <= i < n`.\n* Every `arr[i]` is divisible by `arr[i - 1]`, for `0 < i < n`.\n\n\nReturn *the number of **distinct** ideal arrays of length* `n`. Since the answer may be very large, return it modulo `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2, maxValue = 5\n**Output:** 10\n**Explanation:** The following are the possible ideal arrays:\n- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]\n- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]\n- Arrays starting with the value 3 (1 array): [3,3]\n- Arrays starting with the value 4 (1 array): [4,4]\n- Arrays starting with the value 5 (1 array): [5,5]\nThere are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5, maxValue = 3\n**Output:** 11\n**Explanation:** The following are the possible ideal arrays:\n- Arrays starting with the value 1 (9 arrays): \n   - With no other distinct values (1 array): [1,1,1,1,1] \n   - With 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]\n   - With 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]\n- Arrays starting with the value 2 (1 array): [2,2,2,2,2]\n- Arrays starting with the value 3 (1 array): [3,3,3,3,3]\nThere are a total of 9 + 1 + 1 = 11 distinct ideal arrays.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 104`\n* `1 <= maxValue <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def idealArrays(self, n: int, maxValue: int) -> int:\n        @cache\n        def dfs(i, cnt):\n            res = c[-1][cnt - 1]\n            if cnt < n:\n                k = 2\n                while k * i <= maxValue:\n                    res = (res + dfs(k * i, cnt + 1)) % mod\n                    k += 1\n            return res\n\n        c = [[0] * 16 for _ in range(n)]\n        mod = 10**9 + 7\n        for i in range(n):\n            for j in range(min(16, i + 1)):\n                c[i][j] = 1 if j == 0 else (c[i - 1][j] + c[i - 1][j - 1]) % mod\n        ans = 0\n        for i in range(1, maxValue + 1):\n            ans = (ans + dfs(i, 1)) % mod\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def idealArrays(self, n: int, maxValue: int) -> int:\n        @cache\n        def dfs(i, cnt):\n            res = c[-1][cnt - 1]\n            if cnt < n:\n                k = 2\n                while k * i <= maxValue:\n                    res = (res + dfs(k * i, cnt + 1)) % mod\n                    k += 1\n            return res\n\n        c = [[0] * 16 for _ in range(n)]\n        mod = 10**9 + 7\n        for i in range(n):\n            for j in range(min(16, i + 1)):\n                c[i][j] = 1 if j == 0 else (c[i - 1][j] + c[i - 1][j - 1]) % mod\n        ans = 0\n        for i in range(1, maxValue + 1):\n            ans = (ans + dfs(i, 1)) % mod\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n and maxValue\n    n = random.randint(2, 5)\n    maxValue = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.idealArrays(n, maxValue)\n\n    return n, maxValue, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, maxValue, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.idealArrays(n, maxValue) == expected_result\n        print(f\"assert solution.idealArrays({n}, {maxValue}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.idealArrays({n}, {maxValue}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.idealArrays(5, 6) == 56\nassert solution.idealArrays(3, 4) == 13\nassert solution.idealArrays(2, 8) == 20\nassert solution.idealArrays(2, 10) == 27\nassert solution.idealArrays(5, 1) == 1\nassert solution.idealArrays(3, 9) == 44\nassert solution.idealArrays(2, 4) == 8\nassert solution.idealArrays(2, 8) == 20\nassert solution.idealArrays(3, 7) == 28\nassert solution.idealArrays(5, 4) == 26\nassert solution.idealArrays(2, 4) == 8\nassert solution.idealArrays(4, 10) == 89\nassert solution.idealArrays(5, 6) == 56\nassert solution.idealArrays(5, 6) == 56\nassert solution.idealArrays(5, 5) == 31\nassert solution.idealArrays(5, 9) == 111\nassert solution.idealArrays(4, 8) == 63\nassert solution.idealArrays(5, 1) == 1\nassert solution.idealArrays(3, 9) == 44\nassert solution.idealArrays(5, 3) == 11\nassert solution.idealArrays(4, 10) == 89\nassert solution.idealArrays(2, 8) == 20\nassert solution.idealArrays(2, 7) == 16\nassert solution.idealArrays(4, 7) == 43\nassert solution.idealArrays(3, 1) == 1\nassert solution.idealArrays(3, 2) == 4\nassert solution.idealArrays(4, 9) == 73\nassert solution.idealArrays(2, 9) == 23\nassert solution.idealArrays(4, 7) == 43\nassert solution.idealArrays(4, 2) == 5\nassert solution.idealArrays(3, 6) == 25\nassert solution.idealArrays(5, 9) == 111\nassert solution.idealArrays(3, 7) == 28\nassert solution.idealArrays(3, 7) == 28\nassert solution.idealArrays(2, 3) == 5\nassert solution.idealArrays(5, 4) == 26\nassert solution.idealArrays(5, 6) == 56\nassert solution.idealArrays(3, 4) == 13\nassert solution.idealArrays(3, 3) == 7\nassert solution.idealArrays(3, 3) == 7\nassert solution.idealArrays(2, 9) == 23\nassert solution.idealArrays(2, 1) == 1\nassert solution.idealArrays(2, 8) == 20\nassert solution.idealArrays(2, 4) == 8\nassert solution.idealArrays(2, 8) == 20\nassert solution.idealArrays(2, 10) == 27\nassert solution.idealArrays(5, 8) == 96\nassert solution.idealArrays(4, 7) == 43\nassert solution.idealArrays(3, 10) == 53\nassert solution.idealArrays(3, 7) == 28\nassert solution.idealArrays(5, 5) == 31\nassert solution.idealArrays(3, 8) == 38\nassert solution.idealArrays(2, 4) == 8\nassert solution.idealArrays(2, 1) == 1\nassert solution.idealArrays(3, 4) == 13\nassert solution.idealArrays(3, 4) == 13\nassert solution.idealArrays(2, 1) == 1\nassert solution.idealArrays(4, 5) == 23\nassert solution.idealArrays(3, 6) == 25\nassert solution.idealArrays(2, 2) == 3\nassert solution.idealArrays(3, 6) == 25\nassert solution.idealArrays(5, 2) == 6\nassert solution.idealArrays(3, 10) == 53\nassert solution.idealArrays(5, 8) == 96\nassert solution.idealArrays(3, 8) == 38\nassert solution.idealArrays(4, 8) == 63\nassert solution.idealArrays(4, 1) == 1\nassert solution.idealArrays(4, 10) == 89\nassert solution.idealArrays(4, 6) == 39\nassert solution.idealArrays(5, 9) == 111\nassert solution.idealArrays(3, 1) == 1\nassert solution.idealArrays(3, 1) == 1\nassert solution.idealArrays(3, 6) == 25\nassert solution.idealArrays(4, 4) == 19\nassert solution.idealArrays(5, 8) == 96\nassert solution.idealArrays(5, 2) == 6\nassert solution.idealArrays(4, 4) == 19\nassert solution.idealArrays(4, 5) == 23\nassert solution.idealArrays(2, 2) == 3\nassert solution.idealArrays(3, 10) == 53\nassert solution.idealArrays(2, 10) == 27\nassert solution.idealArrays(5, 4) == 26\nassert solution.idealArrays(5, 5) == 31\nassert solution.idealArrays(2, 1) == 1\nassert solution.idealArrays(5, 7) == 61\nassert solution.idealArrays(5, 4) == 26\nassert solution.idealArrays(2, 3) == 5\nassert solution.idealArrays(5, 9) == 111\nassert solution.idealArrays(3, 5) == 16\nassert solution.idealArrays(2, 7) == 16\nassert solution.idealArrays(4, 5) == 23\nassert solution.idealArrays(3, 4) == 13\nassert solution.idealArrays(4, 4) == 19\nassert solution.idealArrays(3, 7) == 28\nassert solution.idealArrays(2, 7) == 16\nassert solution.idealArrays(2, 5) == 10\nassert solution.idealArrays(4, 6) == 39\nassert solution.idealArrays(5, 8) == 96\nassert solution.idealArrays(2, 3) == 5\nassert solution.idealArrays(3, 7) == 28",
  "inefficient_solution": "class Solution:\n    def idealArrays(self, n: int, maxValue: int) -> int:\n        c = [[0] * maxValue for _ in range(2 ** maxValue)]\n        mod = 10**9 + 7\n        for i in range(maxValue):\n            c[1 << i][i] = 1\n        for i in range(1, maxValue):\n            for j in range(1 << maxValue):\n                for k in range(i, maxValue):\n                    if (1 << k) & j == 0:\n                        c[j | 1 << k][k] = (c[j | 1 << k][k] + c[j][i]) % mod\n        ans = 0\n        n_ = [0] * (n + 1)\n        for i in range(1, maxValue + 1):\n            n_[i] = n_\n            n_[i][0] = 1\n            for j in range(1, maxValue + 1):\n                n_[i][j] = n_[i][j - 1]\n                if i % j == 0:\n                    n_[i][j] += n_[i // j][j]\n                    n_[i][j] %= mod\n        for i in range(1, maxValue + 1):\n            ans = (ans + c[(1 << maxValue) - 1][i - 1] * n_[i][n]) % mod\n        return ans",
  "is_python": true
}