{
  "problem_idx": 2222,
  "task_name": "Number of Ways to Select Buildings",
  "markdown_description": "\nYou are given a **0-indexed** binary string `s` which represents the types of buildings along a street where:\n\n\n* `s[i] = '0'` denotes that the `ith` building is an office and\n* `s[i] = '1'` denotes that the `ith` building is a restaurant.\n\n\nAs a city official, you would like to **select** 3 buildings for random inspection. However, to ensure variety, **no two consecutive** buildings out of the **selected** buildings can be of the same type.\n\n\n* For example, given `s = \"0**0**1**1**0**1**\"`, we cannot select the `1st`, `3rd`, and `5th` buildings as that would form `\"0**11**\"` which is **not** allowed due to having two consecutive buildings of the same type.\n\n\nReturn *the **number of valid ways** to select 3 buildings.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"001101\"\n**Output:** 6\n**Explanation:** \nThe following sets of indices selected are valid:\n- [0,2,4] from \"**0**0**1**1**0**1\" forms \"010\"\n- [0,3,4] from \"**0**01**10**1\" forms \"010\"\n- [1,2,4] from \"0**01**1**0**1\" forms \"010\"\n- [1,3,4] from \"0**0**1**10**1\" forms \"010\"\n- [2,4,5] from \"00**1**1**01**\" forms \"101\"\n- [3,4,5] from \"001**101**\" forms \"101\"\nNo other selection is valid. Thus, there are 6 total ways.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"11100\"\n**Output:** 0\n**Explanation:** It can be shown that there are no valid selections.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= s.length <= 105`\n* `s[i]` is either `'0'` or `'1'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfWays(self, s: str) -> int:\n        n = len(s)\n        cnt0 = s.count(\"0\")\n        cnt1 = n - cnt0\n        c0 = c1 = 0\n        ans = 0\n        for c in s:\n            if c == \"0\":\n                ans += c1 * (cnt1 - c1)\n                c0 += 1\n            else:\n                ans += c0 * (cnt0 - c0)\n                c1 += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfWays(self, s: str) -> int:\n        n = len(s)\n        cnt0 = s.count(\"0\")\n        cnt1 = n - cnt0\n        c0 = c1 = 0\n        ans = 0\n        for c in s:\n            if c == \"0\":\n                ans += c1 * (cnt1 - c1)\n                c0 += 1\n            else:\n                ans += c0 * (cnt0 - c0)\n                c1 += 1\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random binary string\n    s = \"\".join(random.choices([\"0\", \"1\"], k=random.randint(3, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfWays(s)\n\n    return s, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfWays(s) == expected_result\n        print(f'assert solution.numberOfWays(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.numberOfWays(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfWays(\"0001001\") == 8\nassert solution.numberOfWays(\"011\") == 0\nassert solution.numberOfWays(\"010\") == 1\nassert solution.numberOfWays(\"000000\") == 0\nassert solution.numberOfWays(\"010011111\") == 12\nassert solution.numberOfWays(\"010\") == 1\nassert solution.numberOfWays(\"1000000\") == 0\nassert solution.numberOfWays(\"100\") == 0\nassert solution.numberOfWays(\"100\") == 0\nassert solution.numberOfWays(\"101\") == 1\nassert solution.numberOfWays(\"11100111\") == 18\nassert solution.numberOfWays(\"0010\") == 2\nassert solution.numberOfWays(\"0100001\") == 8\nassert solution.numberOfWays(\"100\") == 0\nassert solution.numberOfWays(\"001111\") == 0\nassert solution.numberOfWays(\"10001110\") == 18\nassert solution.numberOfWays(\"0001\") == 0\nassert solution.numberOfWays(\"0111000\") == 9\nassert solution.numberOfWays(\"00100110\") == 18\nassert solution.numberOfWays(\"0110101000\") == 34\nassert solution.numberOfWays(\"0010001\") == 9\nassert solution.numberOfWays(\"0110001001\") == 36\nassert solution.numberOfWays(\"1000010\") == 8\nassert solution.numberOfWays(\"00010\") == 3\nassert solution.numberOfWays(\"10111110\") == 10\nassert solution.numberOfWays(\"0010\") == 2\nassert solution.numberOfWays(\"00100\") == 4\nassert solution.numberOfWays(\"1111\") == 0\nassert solution.numberOfWays(\"0010\") == 2\nassert solution.numberOfWays(\"110010\") == 6\nassert solution.numberOfWays(\"111111\") == 0\nassert solution.numberOfWays(\"010\") == 1\nassert solution.numberOfWays(\"001010\") == 8\nassert solution.numberOfWays(\"001\") == 0\nassert solution.numberOfWays(\"010\") == 1\nassert solution.numberOfWays(\"001110110\") == 24\nassert solution.numberOfWays(\"111010000\") == 7\nassert solution.numberOfWays(\"1000010100\") == 32\nassert solution.numberOfWays(\"11011\") == 4\nassert solution.numberOfWays(\"1010000\") == 5\nassert solution.numberOfWays(\"0001101000\") == 38\nassert solution.numberOfWays(\"0010\") == 2\nassert solution.numberOfWays(\"0101100110\") == 40\nassert solution.numberOfWays(\"1110001110\") == 36\nassert solution.numberOfWays(\"1110110000\") == 14\nassert solution.numberOfWays(\"0100000\") == 5\nassert solution.numberOfWays(\"111100\") == 0\nassert solution.numberOfWays(\"1001\") == 2\nassert solution.numberOfWays(\"11010100\") == 14\nassert solution.numberOfWays(\"11111001\") == 10\nassert solution.numberOfWays(\"0100\") == 2\nassert solution.numberOfWays(\"1101101100\") == 30\nassert solution.numberOfWays(\"00011\") == 0\nassert solution.numberOfWays(\"110100011\") == 27\nassert solution.numberOfWays(\"110\") == 0\nassert solution.numberOfWays(\"0101\") == 2\nassert solution.numberOfWays(\"100100011\") == 24\nassert solution.numberOfWays(\"1110010000\") == 14\nassert solution.numberOfWays(\"1010100100\") == 34\nassert solution.numberOfWays(\"11111111\") == 0\nassert solution.numberOfWays(\"010000\") == 4\nassert solution.numberOfWays(\"1101101\") == 12\nassert solution.numberOfWays(\"010000\") == 4\nassert solution.numberOfWays(\"000110\") == 6\nassert solution.numberOfWays(\"1000\") == 0\nassert solution.numberOfWays(\"1101\") == 2\nassert solution.numberOfWays(\"000\") == 0\nassert solution.numberOfWays(\"1010001010\") == 36\nassert solution.numberOfWays(\"1011010\") == 12\nassert solution.numberOfWays(\"111010\") == 4\nassert solution.numberOfWays(\"1011\") == 2\nassert solution.numberOfWays(\"0111\") == 0\nassert solution.numberOfWays(\"1101001001\") == 36\nassert solution.numberOfWays(\"001\") == 0\nassert solution.numberOfWays(\"011100010\") == 25\nassert solution.numberOfWays(\"011110100\") == 20\nassert solution.numberOfWays(\"001110100\") == 27\nassert solution.numberOfWays(\"11110\") == 0\nassert solution.numberOfWays(\"1111101\") == 5\nassert solution.numberOfWays(\"0011101101\") == 32\nassert solution.numberOfWays(\"1011\") == 2\nassert solution.numberOfWays(\"100110\") == 8\nassert solution.numberOfWays(\"1101\") == 2\nassert solution.numberOfWays(\"0100011\") == 9\nassert solution.numberOfWays(\"01111\") == 0\nassert solution.numberOfWays(\"1110\") == 0\nassert solution.numberOfWays(\"0111100101\") == 36\nassert solution.numberOfWays(\"111\") == 0\nassert solution.numberOfWays(\"0111\") == 0\nassert solution.numberOfWays(\"101011010\") == 28\nassert solution.numberOfWays(\"1001011001\") == 40\nassert solution.numberOfWays(\"0011\") == 0\nassert solution.numberOfWays(\"1110010\") == 8\nassert solution.numberOfWays(\"1111111010\") == 8\nassert solution.numberOfWays(\"10110\") == 4\nassert solution.numberOfWays(\"100011\") == 6\nassert solution.numberOfWays(\"10101111\") == 14\nassert solution.numberOfWays(\"01011010\") == 20\nassert solution.numberOfWays(\"111100011\") == 24\nassert solution.numberOfWays(\"00110\") == 4",
  "inefficient_solution": "class Solution:\n    def numberOfWays(self, s: str) -> int:\n        n = len(s)\n        cnt0 = s.count(\"0\")\n        cnt1 = n - cnt0\n        c0 = c1 = 0\n        ans = 0\n        for c in s:\n            if c == \"0\":\n                data = []\n                for _ in range(c1 * (cnt1 - c1)):\n                    data.append(0)\n                ans += len(data)\n                c0 += 1\n            else:\n                data = []\n                for _ in range(c0 * (cnt0 - c0)):\n                    data.append(0)\n                ans += len(data)\n                c1 += 1\n        return ans",
  "is_python": true
}