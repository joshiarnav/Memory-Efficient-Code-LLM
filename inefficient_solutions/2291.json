{
  "problem_idx": 2291,
  "task_name": "Maximum Profit From Trading Stocks",
  "markdown_description": "\nYou are given two **0-indexed** integer arrays of the same length `present` and `future` where `present[i]` is the current price of the `ith` stock and `future[i]` is the price of the `ith` stock a year in the future. You may buy each stock at most **once**. You are also given an integer `budget` representing the amount of money you currently have.\n\n\nReturn *the maximum amount of profit you can make.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** present = [5,4,6,2,3], future = [8,5,4,3,5], budget = 10\n**Output:** 6\n**Explanation:** One possible way to maximize your profit is to:\nBuy the 0th, 3rd, and 4th stocks for a total of 5 + 2 + 3 = 10.\nNext year, sell all three stocks for a total of 8 + 3 + 5 = 16.\nThe profit you made is 16 - 10 = 6.\nIt can be shown that the maximum profit you can make is 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** present = [2,2,5], future = [3,4,10], budget = 6\n**Output:** 5\n**Explanation:** The only possible way to maximize your profit is to:\nBuy the 2nd stock, and make a profit of 10 - 5 = 5.\nIt can be shown that the maximum profit you can make is 5.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** present = [3,3,12], future = [0,3,15], budget = 10\n**Output:** 0\n**Explanation:** One possible way to maximize your profit is to:\nBuy the 1st stock, and make a profit of 3 - 3 = 0.\nIt can be shown that the maximum profit you can make is 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == present.length == future.length`\n* `1 <= n <= 1000`\n* `0 <= present[i], future[i] <= 100`\n* `0 <= budget <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumProfit(self, present: List[int], future: List[int], budget: int) -> int:\n        f = [0] * (budget + 1)\n        for a, b in zip(present, future):\n            for j in range(budget, a - 1, -1):\n                f[j] = max(f[j], f[j - a] + b - a)\n        return f[-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumProfit(self, present, future, budget):\n        f = [0] * (budget + 1)\n        for a, b in zip(present, future):\n            for j in range(budget, a - 1, -1):\n                f[j] = max(f[j], f[j - a] + b - a)\n        return f[-1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random present and future lists\n    present = random.sample(range(1, 101), random.randint(2, 10))\n    future = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random budget\n    budget = random.randint(0, 1001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumProfit(present, future, budget)\n\n    return present, future, budget, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        present, future, budget, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumProfit(present, future, budget) == expected_result\n        print(f\"assert solution.maximumProfit({present}, {future}, {budget}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumProfit({present}, {future}, {budget}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumProfit([90, 61, 78], [61, 74, 82, 72, 65, 89, 31, 75, 66, 83], 887) == 17\nassert solution.maximumProfit([79, 41, 54, 76, 94, 44, 82, 10], [8, 30, 69, 62], 864) == 15\nassert solution.maximumProfit([6, 36, 49, 76, 83], [61, 64], 378) == 83\nassert solution.maximumProfit([100, 13], [80, 54, 22, 44, 41, 13, 61], 493) == 41\nassert solution.maximumProfit([74, 94, 100, 4], [43, 17, 70, 83, 45, 78, 96], 168) == 79\nassert solution.maximumProfit([92, 55, 41], [4, 24, 31, 13, 79, 72, 49, 83, 50, 95], 187) == 0\nassert solution.maximumProfit([48, 51, 54, 55], [58, 22, 28, 13, 85, 20, 35, 11, 39, 46], 69) == 10\nassert solution.maximumProfit([64, 65, 95, 63], [18, 76, 58, 98, 19, 37, 56, 29, 79], 341) == 46\nassert solution.maximumProfit([28, 84, 73, 29], [32, 36, 10], 987) == 4\nassert solution.maximumProfit([23, 26, 18, 13, 47, 52, 75, 53, 86], [33, 63, 98, 85, 40, 70], 815) == 217\nassert solution.maximumProfit([16, 98, 85, 23, 31, 96, 76, 55], [47, 12, 19, 7, 98, 6, 30, 20, 25], 191) == 98\nassert solution.maximumProfit([76, 86, 55], [17, 44, 46, 70], 843) == 0\nassert solution.maximumProfit([3, 14, 83, 76], [71, 50, 29, 100, 63, 21, 98, 18, 62, 5], 894) == 128\nassert solution.maximumProfit([38, 16, 15, 75, 31, 34, 41, 55, 20, 83], [94, 8, 17, 73, 68], 379) == 95\nassert solution.maximumProfit([36, 43, 2, 80, 63], [30, 12, 29, 82, 36, 2, 34, 15, 31], 800) == 29\nassert solution.maximumProfit([49, 10, 61, 34], [32, 17, 34, 97], 543) == 70\nassert solution.maximumProfit([81, 67, 65], [50, 34, 13], 640) == 0\nassert solution.maximumProfit([68, 77, 69, 63, 55], [4, 63, 52, 65, 17, 98], 150) == 2\nassert solution.maximumProfit([34, 31, 56, 7, 92], [25, 95, 90], 545) == 98\nassert solution.maximumProfit([91, 63, 11], [34, 27, 1, 52, 82], 442) == 0\nassert solution.maximumProfit([91, 22, 72, 98, 29, 12, 24], [23, 70, 44, 81, 62, 56, 35, 65, 48], 0) == 0\nassert solution.maximumProfit([44, 35, 61, 95, 83, 54, 2, 92, 32], [100, 84, 61], 406) == 105\nassert solution.maximumProfit([10, 90, 82, 77, 81, 91, 45, 17, 3], [67, 63, 15], 337) == 57\nassert solution.maximumProfit([78, 72, 1, 57], [16, 34, 98, 51, 33, 49, 32], 269) == 97\nassert solution.maximumProfit([61, 19, 76], [21, 6, 2, 71, 13, 83, 74, 79, 11, 69], 846) == 0\nassert solution.maximumProfit([66, 31], [21, 75], 2) == 0\nassert solution.maximumProfit([34, 96, 85, 3, 63, 81, 50, 6], [71, 44, 42, 27, 69, 56, 19, 40, 86, 21], 543) == 101\nassert solution.maximumProfit([79, 26, 38], [88, 91, 68, 90, 6, 36, 97, 46], 701) == 104\nassert solution.maximumProfit([94, 91, 72, 11, 83, 95, 34, 15, 38], [56, 21, 95, 60, 22, 89, 29, 4], 229) == 72\nassert solution.maximumProfit([90, 57, 31, 68, 60, 12], [90, 69, 6, 16, 40, 36, 56, 9, 72], 76) == 36\nassert solution.maximumProfit([29, 59], [35, 6, 88, 11, 44, 21], 483) == 6\nassert solution.maximumProfit([22, 59, 4, 90, 56, 26, 50, 81, 35, 37], [53, 49, 37, 1, 33], 482) == 64\nassert solution.maximumProfit([77, 66, 62, 52, 85, 99, 25], [11, 91, 20, 8, 56, 98, 40, 96], 673) == 40\nassert solution.maximumProfit([85, 81], [4, 100, 35, 66, 38, 74, 7, 81], 643) == 19\nassert solution.maximumProfit([23, 90, 83, 54, 47, 76], [6, 99, 97, 86, 66, 93, 67, 39], 428) == 91\nassert solution.maximumProfit([1, 96, 68, 77], [84, 73, 61, 58, 16, 89, 3, 45], 335) == 83\nassert solution.maximumProfit([16, 67], [61, 99, 72, 62, 25, 13, 58, 90, 39], 180) == 77\nassert solution.maximumProfit([63, 59, 100, 79, 20, 8], [52, 7, 11, 29], 866) == 0\nassert solution.maximumProfit([40, 95, 30, 31, 17, 56, 96, 93, 5, 47], [50, 36, 6, 44], 940) == 23\nassert solution.maximumProfit([25, 3, 93], [81, 64, 37, 38, 4, 21, 99, 36, 44, 73], 442) == 117\nassert solution.maximumProfit([62, 20, 33, 96, 2], [89, 21, 61, 90, 65, 80, 99, 29, 10], 342) == 119\nassert solution.maximumProfit([99, 93, 5, 100, 51, 82, 32, 8], [56, 45, 31, 5, 53], 832) == 28\nassert solution.maximumProfit([41, 7], [68, 26, 79, 91, 65, 89], 387) == 46\nassert solution.maximumProfit([4, 30, 25], [96, 94], 770) == 156\nassert solution.maximumProfit([60, 13, 16, 93], [82, 79, 40], 455) == 112\nassert solution.maximumProfit([33, 60, 58, 40, 64], [89, 44, 93, 74, 48, 72, 63, 26], 619) == 125\nassert solution.maximumProfit([72, 47, 5, 95, 29], [48, 84, 61, 44], 58) == 93\nassert solution.maximumProfit([73, 71], [27, 55, 90, 56, 17, 72, 95, 81], 36) == 0\nassert solution.maximumProfit([48, 26, 11, 25, 17, 40, 41, 36], [82, 62, 29, 90], 834) == 153\nassert solution.maximumProfit([18, 6, 47, 82, 88, 16, 21, 2, 71], [54, 96, 61, 78, 73], 194) == 140\nassert solution.maximumProfit([10, 32, 90, 57, 16, 61, 25], [54, 42, 90, 20, 38, 97, 95], 174) == 182\nassert solution.maximumProfit([52, 7, 21, 49, 4, 82, 81, 23], [55, 4, 67, 49, 20, 28], 500) == 65\nassert solution.maximumProfit([29, 78, 14, 59, 41, 24, 9, 63, 68], [17, 96, 55, 38], 158) == 59\nassert solution.maximumProfit([36, 40, 14, 41, 32, 94, 69, 13, 61], [83, 88, 4, 62, 6, 43, 100, 33], 357) == 167\nassert solution.maximumProfit([71, 37, 1, 87, 27, 57, 9, 4, 77, 61], [77, 39, 17, 83, 78, 93, 23, 14, 66], 597) == 135\nassert solution.maximumProfit([55, 29, 90], [1, 56, 53, 71, 12, 17, 22, 82], 504) == 27\nassert solution.maximumProfit([42, 46, 95, 62, 17, 84, 100], [50, 96], 690) == 58\nassert solution.maximumProfit([28, 62, 43, 51, 1, 24, 63, 81, 49], [14, 61, 27, 68, 66, 84, 23], 646) == 142\nassert solution.maximumProfit([77, 43, 93, 55, 97, 24, 84, 35, 88, 49], [98, 63, 89, 19, 42, 77], 890) == 94\nassert solution.maximumProfit([78, 67, 58, 65, 88, 96, 89, 51], [20, 33, 45, 28], 473) == 0\nassert solution.maximumProfit([47, 71, 42, 54, 38, 1, 56, 66, 17], [34, 18, 29, 98, 88, 9, 2, 27, 89, 10], 80) == 130\nassert solution.maximumProfit([26, 51, 8, 12], [57, 94, 30, 3, 37, 87, 93, 56, 14], 719) == 96\nassert solution.maximumProfit([79, 99, 19], [84, 11, 76, 10, 58], 754) == 62\nassert solution.maximumProfit([93, 42, 33, 77, 48, 54, 50, 59], [22, 8, 61, 7, 70], 733) == 50\nassert solution.maximumProfit([11, 77, 30, 65, 71, 3, 100, 12, 2], [3, 67], 712) == 0\nassert solution.maximumProfit([77, 31, 28, 14, 69, 6, 86, 94], [59, 31, 11, 90, 32], 710) == 76\nassert solution.maximumProfit([85, 1, 3, 52, 43, 65, 26, 57, 24, 89], [68, 8, 84, 36, 82, 31, 50, 63, 61], 286) == 194\nassert solution.maximumProfit([16, 42, 52, 30, 72, 22], [38, 69, 6, 99, 17, 50, 79], 609) == 146\nassert solution.maximumProfit([32, 8, 12, 55], [17, 34, 55, 31, 65], 636) == 69\nassert solution.maximumProfit([38, 89, 53, 44, 56], [21, 51], 935) == 0\nassert solution.maximumProfit([51, 52, 38, 53, 32, 41], [29, 36, 47, 7, 66, 20, 10, 74], 118) == 43\nassert solution.maximumProfit([6, 7, 9], [84, 100, 22, 17], 260) == 184\nassert solution.maximumProfit([98, 55, 23, 42], [96, 46, 33], 521) == 10\nassert solution.maximumProfit([94, 93], [45, 39, 25], 698) == 0\nassert solution.maximumProfit([49, 76, 10], [22, 45, 94, 88], 343) == 84\nassert solution.maximumProfit([78, 89], [9, 61, 45], 255) == 0\nassert solution.maximumProfit([85, 72, 64, 75, 38, 23], [23, 38, 6, 21, 49], 206) == 11\nassert solution.maximumProfit([80, 78, 70, 50, 36, 8], [72, 77, 75, 31, 10, 39, 8, 18], 784) == 36\nassert solution.maximumProfit([38, 54, 24, 94, 76, 51, 68, 19, 3], [81, 96, 54, 5, 90, 78, 80], 730) == 168\nassert solution.maximumProfit([32, 91, 11, 100, 25, 5, 37, 85], [59, 23, 86, 4, 78, 32, 34, 80, 42], 229) == 182\nassert solution.maximumProfit([98, 71, 65, 30, 92, 66, 42], [76, 16, 47], 532) == 0\nassert solution.maximumProfit([26, 55, 80, 85, 78, 2, 54, 25], [85, 68], 900) == 72\nassert solution.maximumProfit([36, 96, 11, 22, 60, 26, 57], [48, 99, 26, 73, 2, 32, 33, 58], 384) == 87\nassert solution.maximumProfit([31, 76], [9, 41, 36], 876) == 0\nassert solution.maximumProfit([100, 23, 85], [26, 78, 79, 97, 74, 22, 24, 63, 50], 278) == 55\nassert solution.maximumProfit([6, 36, 76, 56, 46], [38, 33], 341) == 32\nassert solution.maximumProfit([68, 28, 16, 48, 11, 86, 22], [78, 48], 916) == 30\nassert solution.maximumProfit([63, 96, 30, 92, 67, 47, 64, 9, 24, 17], [48, 84, 23, 60, 21, 11, 42, 14], 891) == 5\nassert solution.maximumProfit([44, 75, 91, 62, 93], [56, 87, 51, 59, 90, 1, 23, 27, 31], 306) == 24\nassert solution.maximumProfit([66, 68, 38], [18, 70, 28, 4, 80, 13, 19, 9, 63], 234) == 2\nassert solution.maximumProfit([72, 51, 71, 89, 94], [99, 4, 60, 73, 65, 17, 28, 88, 79, 13], 438) == 27\nassert solution.maximumProfit([29, 71, 25, 45, 1, 16], [81, 92, 63, 4], 769) == 111\nassert solution.maximumProfit([82, 54, 90, 60, 48, 52, 74, 30], [27, 94, 12, 2, 3, 42, 81, 4, 8], 262) == 47\nassert solution.maximumProfit([80, 13, 28], [51, 36, 21, 7, 96, 35, 10, 25], 684) == 23\nassert solution.maximumProfit([68, 10, 12, 91], [50, 35, 90], 7) == 0\nassert solution.maximumProfit([9, 32, 60, 58, 28], [61, 88], 115) == 108\nassert solution.maximumProfit([84, 75, 2, 4, 49, 78, 28, 30], [67, 36, 33, 85, 70, 16, 64, 56], 874) == 195\nassert solution.maximumProfit([94, 47, 78, 51, 4], [37, 91, 48], 425) == 44\nassert solution.maximumProfit([35, 56, 58, 49, 31, 17, 76], [89, 90, 75, 83, 33, 57, 51], 521) == 181\nassert solution.maximumProfit([56, 11, 61, 68, 100], [29, 78, 17, 42, 7, 15], 525) == 67",
  "inefficient_solution": "class Solution:\n    def maximumProfit(self, present: List[int], future: List[int], budget: int) -> int:\n        a = [i for i in range(len(present)) for _ in range(1000)]\n        b = [i for i in range(len(present)) for _ in range(1000)]\n        c = [0] * (budget + 1)\n        for x, y in zip(present, future):\n            for j in range(budget, x - 1, -1):\n                for i in range(len(a)):\n                    if a[i] == x and b[i] == y:\n                        c[j] = max(c[j], c[j - x] + y - x)\n        return c[-1]",
  "is_python": true
}