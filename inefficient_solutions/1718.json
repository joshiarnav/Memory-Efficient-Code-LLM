{
  "problem_idx": 1718,
  "task_name": "Construct the Lexicographically Largest Valid Sequence",
  "markdown_description": "\nGiven an integer `n`, find a sequence that satisfies all of the following:\n\n\n* The integer `1` occurs once in the sequence.\n* Each integer between `2` and `n` occurs twice in the sequence.\n* For every integer `i` between `2` and `n`, the **distance** between the two occurrences of `i` is exactly `i`.\n\n\nThe **distance** between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.\n\n\nReturn *the **lexicographically largest** sequence**. It is guaranteed that under the given constraints, there is always a solution.* \n\n\nA sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3\n**Output:** [3,1,2,3,2]\n**Explanation:** [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5\n**Output:** [5,3,1,4,3,5,2,4,2]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 20`\n\n\n",
  "canonical_solution": "class Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n        def dfs(u):\n            if u == n * 2:\n                return True\n            if path[u]:\n                return dfs(u + 1)\n            for i in range(n, 1, -1):\n                if cnt[i] and u + i < n * 2 and path[u + i] == 0:\n                    cnt[i] = 0\n                    path[u] = path[u + i] = i\n                    if dfs(u + 1):\n                        return True\n                    path[u] = path[u + i] = 0\n                    cnt[i] = 2\n            if cnt[1]:\n                cnt[1], path[u] = 0, 1\n                if dfs(u + 1):\n                    return True\n                path[u], cnt[1] = 0, 1\n            return False\n\n        path = [0] * (n * 2)\n        cnt = [2] * (n * 2)\n        cnt[1] = 1\n        dfs(1)\n        return path[1:]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n        def dfs(u):\n            if u == n * 2:\n                return True\n            if path[u]:\n                return dfs(u + 1)\n            for i in range(n, 1, -1):\n                if cnt[i] and u + i < n * 2 and path[u + i] == 0:\n                    cnt[i] = 0\n                    path[u] = path[u + i] = i\n                    if dfs(u + 1):\n                        return True\n                    path[u] = path[u + i] = 0\n                    cnt[i] = 2\n            if cnt[1]:\n                cnt[1], path[u] = 0, 1\n                if dfs(u + 1):\n                    return True\n                path[u], cnt[1] = 0, 1\n            return False\n\n        path = [0] * (n * 2)\n        cnt = [2] * (n * 2)\n        cnt[1] = 1\n        dfs(1)\n        return path[1:]\n\ndef generate_test_case():\n    solution = Solution()\n    n = random.randint(1, 20)\n    expected_result = solution.constructDistancedSequence(n)\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.constructDistancedSequence(n) == expected_result\n        print(f\"assert solution.constructDistancedSequence({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.constructDistancedSequence({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.constructDistancedSequence(10) == [10, 8, 6, 9, 3, 1, 7, 3, 6, 8, 10, 5, 9, 7, 4, 2, 5, 2, 4]\nassert solution.constructDistancedSequence(1) == [1]\nassert solution.constructDistancedSequence(1) == [1]\nassert solution.constructDistancedSequence(8) == [8, 6, 4, 2, 7, 2, 4, 6, 8, 5, 3, 7, 1, 3, 5]\nassert solution.constructDistancedSequence(1) == [1]\nassert solution.constructDistancedSequence(17) == [17, 15, 16, 12, 10, 14, 7, 5, 3, 13, 11, 3, 5, 7, 10, 12, 15, 17, 16, 14, 9, 11, 13, 8, 6, 2, 1, 2, 4, 9, 6, 8, 4]\nassert solution.constructDistancedSequence(3) == [3, 1, 2, 3, 2]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(11) == [11, 9, 10, 6, 4, 1, 7, 8, 4, 6, 9, 11, 10, 7, 5, 8, 2, 3, 2, 5, 3]\nassert solution.constructDistancedSequence(6) == [6, 4, 2, 5, 2, 4, 6, 3, 5, 1, 3]\nassert solution.constructDistancedSequence(15) == [15, 13, 14, 10, 8, 12, 5, 3, 11, 9, 3, 5, 8, 10, 13, 15, 14, 12, 9, 11, 7, 4, 6, 1, 2, 4, 2, 7, 6]\nassert solution.constructDistancedSequence(10) == [10, 8, 6, 9, 3, 1, 7, 3, 6, 8, 10, 5, 9, 7, 4, 2, 5, 2, 4]\nassert solution.constructDistancedSequence(20) == [20, 18, 19, 15, 13, 17, 10, 16, 7, 5, 3, 14, 12, 3, 5, 7, 10, 13, 15, 18, 20, 19, 17, 16, 12, 14, 11, 9, 4, 6, 8, 2, 4, 2, 1, 6, 9, 11, 8]\nassert solution.constructDistancedSequence(12) == [12, 10, 11, 7, 5, 3, 8, 9, 3, 5, 7, 10, 12, 11, 8, 6, 9, 2, 4, 2, 1, 6, 4]\nassert solution.constructDistancedSequence(18) == [18, 16, 17, 13, 11, 15, 8, 14, 4, 2, 12, 2, 4, 10, 8, 11, 13, 16, 18, 17, 15, 14, 12, 10, 9, 7, 5, 3, 6, 1, 3, 5, 7, 9, 6]\nassert solution.constructDistancedSequence(14) == [14, 12, 13, 9, 7, 11, 4, 1, 10, 8, 4, 7, 9, 12, 14, 13, 11, 8, 10, 6, 3, 5, 2, 3, 2, 6, 5]\nassert solution.constructDistancedSequence(2) == [2, 1, 2]\nassert solution.constructDistancedSequence(8) == [8, 6, 4, 2, 7, 2, 4, 6, 8, 5, 3, 7, 1, 3, 5]\nassert solution.constructDistancedSequence(10) == [10, 8, 6, 9, 3, 1, 7, 3, 6, 8, 10, 5, 9, 7, 4, 2, 5, 2, 4]\nassert solution.constructDistancedSequence(2) == [2, 1, 2]\nassert solution.constructDistancedSequence(5) == [5, 3, 1, 4, 3, 5, 2, 4, 2]\nassert solution.constructDistancedSequence(9) == [9, 7, 5, 3, 8, 6, 3, 5, 7, 9, 4, 6, 8, 2, 4, 2, 1]\nassert solution.constructDistancedSequence(10) == [10, 8, 6, 9, 3, 1, 7, 3, 6, 8, 10, 5, 9, 7, 4, 2, 5, 2, 4]\nassert solution.constructDistancedSequence(5) == [5, 3, 1, 4, 3, 5, 2, 4, 2]\nassert solution.constructDistancedSequence(1) == [1]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(8) == [8, 6, 4, 2, 7, 2, 4, 6, 8, 5, 3, 7, 1, 3, 5]\nassert solution.constructDistancedSequence(3) == [3, 1, 2, 3, 2]\nassert solution.constructDistancedSequence(10) == [10, 8, 6, 9, 3, 1, 7, 3, 6, 8, 10, 5, 9, 7, 4, 2, 5, 2, 4]\nassert solution.constructDistancedSequence(18) == [18, 16, 17, 13, 11, 15, 8, 14, 4, 2, 12, 2, 4, 10, 8, 11, 13, 16, 18, 17, 15, 14, 12, 10, 9, 7, 5, 3, 6, 1, 3, 5, 7, 9, 6]\nassert solution.constructDistancedSequence(14) == [14, 12, 13, 9, 7, 11, 4, 1, 10, 8, 4, 7, 9, 12, 14, 13, 11, 8, 10, 6, 3, 5, 2, 3, 2, 6, 5]\nassert solution.constructDistancedSequence(10) == [10, 8, 6, 9, 3, 1, 7, 3, 6, 8, 10, 5, 9, 7, 4, 2, 5, 2, 4]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(6) == [6, 4, 2, 5, 2, 4, 6, 3, 5, 1, 3]\nassert solution.constructDistancedSequence(16) == [16, 14, 15, 11, 9, 13, 6, 4, 12, 10, 1, 4, 6, 9, 11, 14, 16, 15, 13, 10, 12, 8, 5, 7, 2, 3, 2, 5, 3, 8, 7]\nassert solution.constructDistancedSequence(1) == [1]\nassert solution.constructDistancedSequence(13) == [13, 11, 12, 8, 6, 4, 9, 10, 1, 4, 6, 8, 11, 13, 12, 9, 7, 10, 3, 5, 2, 3, 2, 7, 5]\nassert solution.constructDistancedSequence(8) == [8, 6, 4, 2, 7, 2, 4, 6, 8, 5, 3, 7, 1, 3, 5]\nassert solution.constructDistancedSequence(16) == [16, 14, 15, 11, 9, 13, 6, 4, 12, 10, 1, 4, 6, 9, 11, 14, 16, 15, 13, 10, 12, 8, 5, 7, 2, 3, 2, 5, 3, 8, 7]\nassert solution.constructDistancedSequence(15) == [15, 13, 14, 10, 8, 12, 5, 3, 11, 9, 3, 5, 8, 10, 13, 15, 14, 12, 9, 11, 7, 4, 6, 1, 2, 4, 2, 7, 6]\nassert solution.constructDistancedSequence(14) == [14, 12, 13, 9, 7, 11, 4, 1, 10, 8, 4, 7, 9, 12, 14, 13, 11, 8, 10, 6, 3, 5, 2, 3, 2, 6, 5]\nassert solution.constructDistancedSequence(14) == [14, 12, 13, 9, 7, 11, 4, 1, 10, 8, 4, 7, 9, 12, 14, 13, 11, 8, 10, 6, 3, 5, 2, 3, 2, 6, 5]\nassert solution.constructDistancedSequence(5) == [5, 3, 1, 4, 3, 5, 2, 4, 2]\nassert solution.constructDistancedSequence(19) == [19, 17, 18, 14, 12, 16, 9, 15, 6, 3, 13, 1, 3, 11, 6, 9, 12, 14, 17, 19, 18, 16, 15, 13, 11, 10, 8, 4, 5, 7, 2, 4, 2, 5, 8, 10, 7]\nassert solution.constructDistancedSequence(12) == [12, 10, 11, 7, 5, 3, 8, 9, 3, 5, 7, 10, 12, 11, 8, 6, 9, 2, 4, 2, 1, 6, 4]\nassert solution.constructDistancedSequence(10) == [10, 8, 6, 9, 3, 1, 7, 3, 6, 8, 10, 5, 9, 7, 4, 2, 5, 2, 4]\nassert solution.constructDistancedSequence(18) == [18, 16, 17, 13, 11, 15, 8, 14, 4, 2, 12, 2, 4, 10, 8, 11, 13, 16, 18, 17, 15, 14, 12, 10, 9, 7, 5, 3, 6, 1, 3, 5, 7, 9, 6]\nassert solution.constructDistancedSequence(13) == [13, 11, 12, 8, 6, 4, 9, 10, 1, 4, 6, 8, 11, 13, 12, 9, 7, 10, 3, 5, 2, 3, 2, 7, 5]\nassert solution.constructDistancedSequence(9) == [9, 7, 5, 3, 8, 6, 3, 5, 7, 9, 4, 6, 8, 2, 4, 2, 1]\nassert solution.constructDistancedSequence(13) == [13, 11, 12, 8, 6, 4, 9, 10, 1, 4, 6, 8, 11, 13, 12, 9, 7, 10, 3, 5, 2, 3, 2, 7, 5]\nassert solution.constructDistancedSequence(3) == [3, 1, 2, 3, 2]\nassert solution.constructDistancedSequence(9) == [9, 7, 5, 3, 8, 6, 3, 5, 7, 9, 4, 6, 8, 2, 4, 2, 1]\nassert solution.constructDistancedSequence(10) == [10, 8, 6, 9, 3, 1, 7, 3, 6, 8, 10, 5, 9, 7, 4, 2, 5, 2, 4]\nassert solution.constructDistancedSequence(16) == [16, 14, 15, 11, 9, 13, 6, 4, 12, 10, 1, 4, 6, 9, 11, 14, 16, 15, 13, 10, 12, 8, 5, 7, 2, 3, 2, 5, 3, 8, 7]\nassert solution.constructDistancedSequence(17) == [17, 15, 16, 12, 10, 14, 7, 5, 3, 13, 11, 3, 5, 7, 10, 12, 15, 17, 16, 14, 9, 11, 13, 8, 6, 2, 1, 2, 4, 9, 6, 8, 4]\nassert solution.constructDistancedSequence(4) == [4, 2, 3, 2, 4, 3, 1]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(18) == [18, 16, 17, 13, 11, 15, 8, 14, 4, 2, 12, 2, 4, 10, 8, 11, 13, 16, 18, 17, 15, 14, 12, 10, 9, 7, 5, 3, 6, 1, 3, 5, 7, 9, 6]\nassert solution.constructDistancedSequence(8) == [8, 6, 4, 2, 7, 2, 4, 6, 8, 5, 3, 7, 1, 3, 5]\nassert solution.constructDistancedSequence(9) == [9, 7, 5, 3, 8, 6, 3, 5, 7, 9, 4, 6, 8, 2, 4, 2, 1]\nassert solution.constructDistancedSequence(20) == [20, 18, 19, 15, 13, 17, 10, 16, 7, 5, 3, 14, 12, 3, 5, 7, 10, 13, 15, 18, 20, 19, 17, 16, 12, 14, 11, 9, 4, 6, 8, 2, 4, 2, 1, 6, 9, 11, 8]\nassert solution.constructDistancedSequence(5) == [5, 3, 1, 4, 3, 5, 2, 4, 2]\nassert solution.constructDistancedSequence(1) == [1]\nassert solution.constructDistancedSequence(5) == [5, 3, 1, 4, 3, 5, 2, 4, 2]\nassert solution.constructDistancedSequence(17) == [17, 15, 16, 12, 10, 14, 7, 5, 3, 13, 11, 3, 5, 7, 10, 12, 15, 17, 16, 14, 9, 11, 13, 8, 6, 2, 1, 2, 4, 9, 6, 8, 4]\nassert solution.constructDistancedSequence(9) == [9, 7, 5, 3, 8, 6, 3, 5, 7, 9, 4, 6, 8, 2, 4, 2, 1]\nassert solution.constructDistancedSequence(14) == [14, 12, 13, 9, 7, 11, 4, 1, 10, 8, 4, 7, 9, 12, 14, 13, 11, 8, 10, 6, 3, 5, 2, 3, 2, 6, 5]\nassert solution.constructDistancedSequence(2) == [2, 1, 2]\nassert solution.constructDistancedSequence(16) == [16, 14, 15, 11, 9, 13, 6, 4, 12, 10, 1, 4, 6, 9, 11, 14, 16, 15, 13, 10, 12, 8, 5, 7, 2, 3, 2, 5, 3, 8, 7]\nassert solution.constructDistancedSequence(18) == [18, 16, 17, 13, 11, 15, 8, 14, 4, 2, 12, 2, 4, 10, 8, 11, 13, 16, 18, 17, 15, 14, 12, 10, 9, 7, 5, 3, 6, 1, 3, 5, 7, 9, 6]\nassert solution.constructDistancedSequence(3) == [3, 1, 2, 3, 2]\nassert solution.constructDistancedSequence(8) == [8, 6, 4, 2, 7, 2, 4, 6, 8, 5, 3, 7, 1, 3, 5]\nassert solution.constructDistancedSequence(4) == [4, 2, 3, 2, 4, 3, 1]\nassert solution.constructDistancedSequence(1) == [1]\nassert solution.constructDistancedSequence(8) == [8, 6, 4, 2, 7, 2, 4, 6, 8, 5, 3, 7, 1, 3, 5]\nassert solution.constructDistancedSequence(14) == [14, 12, 13, 9, 7, 11, 4, 1, 10, 8, 4, 7, 9, 12, 14, 13, 11, 8, 10, 6, 3, 5, 2, 3, 2, 6, 5]\nassert solution.constructDistancedSequence(12) == [12, 10, 11, 7, 5, 3, 8, 9, 3, 5, 7, 10, 12, 11, 8, 6, 9, 2, 4, 2, 1, 6, 4]\nassert solution.constructDistancedSequence(13) == [13, 11, 12, 8, 6, 4, 9, 10, 1, 4, 6, 8, 11, 13, 12, 9, 7, 10, 3, 5, 2, 3, 2, 7, 5]\nassert solution.constructDistancedSequence(20) == [20, 18, 19, 15, 13, 17, 10, 16, 7, 5, 3, 14, 12, 3, 5, 7, 10, 13, 15, 18, 20, 19, 17, 16, 12, 14, 11, 9, 4, 6, 8, 2, 4, 2, 1, 6, 9, 11, 8]\nassert solution.constructDistancedSequence(5) == [5, 3, 1, 4, 3, 5, 2, 4, 2]\nassert solution.constructDistancedSequence(3) == [3, 1, 2, 3, 2]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(14) == [14, 12, 13, 9, 7, 11, 4, 1, 10, 8, 4, 7, 9, 12, 14, 13, 11, 8, 10, 6, 3, 5, 2, 3, 2, 6, 5]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(8) == [8, 6, 4, 2, 7, 2, 4, 6, 8, 5, 3, 7, 1, 3, 5]\nassert solution.constructDistancedSequence(2) == [2, 1, 2]\nassert solution.constructDistancedSequence(9) == [9, 7, 5, 3, 8, 6, 3, 5, 7, 9, 4, 6, 8, 2, 4, 2, 1]\nassert solution.constructDistancedSequence(15) == [15, 13, 14, 10, 8, 12, 5, 3, 11, 9, 3, 5, 8, 10, 13, 15, 14, 12, 9, 11, 7, 4, 6, 1, 2, 4, 2, 7, 6]\nassert solution.constructDistancedSequence(19) == [19, 17, 18, 14, 12, 16, 9, 15, 6, 3, 13, 1, 3, 11, 6, 9, 12, 14, 17, 19, 18, 16, 15, 13, 11, 10, 8, 4, 5, 7, 2, 4, 2, 5, 8, 10, 7]\nassert solution.constructDistancedSequence(17) == [17, 15, 16, 12, 10, 14, 7, 5, 3, 13, 11, 3, 5, 7, 10, 12, 15, 17, 16, 14, 9, 11, 13, 8, 6, 2, 1, 2, 4, 9, 6, 8, 4]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(6) == [6, 4, 2, 5, 2, 4, 6, 3, 5, 1, 3]\nassert solution.constructDistancedSequence(14) == [14, 12, 13, 9, 7, 11, 4, 1, 10, 8, 4, 7, 9, 12, 14, 13, 11, 8, 10, 6, 3, 5, 2, 3, 2, 6, 5]\nassert solution.constructDistancedSequence(7) == [7, 5, 3, 6, 4, 3, 5, 7, 4, 6, 2, 1, 2]\nassert solution.constructDistancedSequence(20) == [20, 18, 19, 15, 13, 17, 10, 16, 7, 5, 3, 14, 12, 3, 5, 7, 10, 13, 15, 18, 20, 19, 17, 16, 12, 14, 11, 9, 4, 6, 8, 2, 4, 2, 1, 6, 9, 11, 8]\nassert solution.constructDistancedSequence(1) == [1]\nassert solution.constructDistancedSequence(4) == [4, 2, 3, 2, 4, 3, 1]\nassert solution.constructDistancedSequence(13) == [13, 11, 12, 8, 6, 4, 9, 10, 1, 4, 6, 8, 11, 13, 12, 9, 7, 10, 3, 5, 2, 3, 2, 7, 5]\nassert solution.constructDistancedSequence(2) == [2, 1, 2]",
  "inefficient_solution": "class Solution:\n    def constructDistancedSequence(self, n: int) -> List[int]:\n        def dfs(u):\n            if u == n * 2:\n                return True\n            if path[u]:\n                return dfs(u + 1)\n            for i in range(n, 1, -1):\n                if cnt[i] and u + i < n * 2 and path[u + i] == 0:\n                    cnt[i] = 0\n                    path[u] = path[u + i] = i\n                    if dfs(u + 1):\n                        return True\n                    path[u] = path[u + i] = [i, None]\n                    cnt[i] = 2\n            if cnt[1]:\n                cnt[1], path[u] = [cnt[1], None], 1\n                if dfs(u + 1):\n                    return True\n                path[u], cnt[1] = [None, None], 1\n            return False\n\n        path = [[0 for _ in range(1000)] for _ in range(n * 2)]\n        cnt = [2 for _ in range(n * 2)]\n        cnt[1] = 1\n        dfs(1)\n        ans = []\n        for i in range(n * 2):\n            if path[i] != 0 and path[i] != [0, None]:\n                ans += path[i]\n        return ans",
  "is_python": true
}