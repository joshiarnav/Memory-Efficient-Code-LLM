{
  "problem_idx": 1457,
  "task_name": "Pseudo",
  "markdown_description": "\nGiven a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be **pseudo-palindromic** if at least one permutation of the node values in the path is a palindrome.\n\n\n*Return the number of **pseudo-palindromic** paths going from the root node to leaf nodes.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1457.Pseudo-Palindromic%20Paths%20in%20a%20Binary%20Tree/images/palindromic_paths_1.png)\n\n\n\n```\n\n**Input:** root = [2,3,1,3,1,null,1]\n**Output:** 2 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1457.Pseudo-Palindromic%20Paths%20in%20a%20Binary%20Tree/images/palindromic_paths_2.png)**\n\n\n\n```\n\n**Input:** root = [2,1,1,1,3,null,null,null,null,null,1]\n**Output:** 1 \n**Explanation:** The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [9]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 105]`.\n* `1 <= Node.val <= 9`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pseudoPalindromicPaths(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode], mask: int):\n            if root is None:\n                return 0\n            mask ^= 1 << root.val\n            if root.left is None and root.right is None:\n                return int((mask & (mask - 1)) == 0)\n            return dfs(root.left, mask) + dfs(root.right, mask)\n\n        return dfs(root, 0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def pseudoPalindromicPaths(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode], mask: int):\n            if root is None:\n                return 0\n            mask ^= 1 << root.val\n            if root.left is None and root.right is None:\n                return int((mask & (mask - 1)) == 0)\n            return dfs(root.left, mask) + dfs(root.right, mask)\n\n        return dfs(root, 0)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate the binary tree with random values\n    def generate_tree(root, level):\n        if level == 0:\n            return None\n        if random.randint(0, 1) == 0:\n            return TreeNode(random.randint(1, 9))\n        else:\n            val = random.randint(1, 9)\n            return TreeNode(val, generate_tree(None, level - 1), generate_tree(None, level - 1))\n\n    root = generate_tree(None, random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.pseudoPalindromicPaths(root)\n\n    return root, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.pseudoPalindromicPaths(root) == expected_result\n        print(f\"assert solution.pseudoPalindromicPaths({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.pseudoPalindromicPaths({root}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19aced0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad050>) == 2\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad0d0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad010>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf90>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad350>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad3d0>) == 2\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad190>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad390>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad3d0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad2d0>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad310>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad210>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acfd0>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad2d0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad310>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad150>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad250>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf90>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad010>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad150>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf50>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf90>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad010>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad110>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19aced0>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf90>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acfd0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad150>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad350>) == 2\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf90>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad050>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad150>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad350>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf10>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad050>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad090>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad150>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf10>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf90>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad090>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad150>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf50>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad3d0>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad010>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad1d0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf50>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad3d0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad110>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad150>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acfd0>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad290>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19aced0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad190>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acfd0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad290>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19aced0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad190>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acfd0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad290>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19aced0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad190>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acfd0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad010>) == 2\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19aced0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf50>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acfd0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad010>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19aced0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad110>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad450>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ace90>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad410>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad050>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad750>) == 2\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad350>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad710>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad050>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad750>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad190>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad710>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad290>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad750>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad190>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad550>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad290>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad050>) == 5\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad190>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad350>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad290>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad010>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19adb50>) == 3\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19acf50>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19adb10>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad010>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19adb50>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad290>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ae2d0>) == 1\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ad4d0>) == 0\nassert solution.pseudoPalindromicPaths(<__main__.TreeNode object at 0x7faaa19ae290>) == 1",
  "inefficient_solution": "",
  "is_python": true
}