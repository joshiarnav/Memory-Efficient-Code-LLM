{
  "problem_idx": 2000,
  "task_name": "Reverse Prefix of Word",
  "markdown_description": "\nGiven a **0-indexed** string `word` and a character `ch`, **reverse** the segment of `word` that starts at index `0` and ends at the index of the **first occurrence** of `ch` (**inclusive**). If the character `ch` does not exist in `word`, do nothing.\n\n\n* For example, if `word = \"abcdefd\"` and `ch = \"d\"`, then you should **reverse** the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"dcbaefd\"`.\n\n\nReturn *the resulting string*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"abcdefd\", ch = \"d\"\n**Output:** \"dcbaefd\"\n**Explanation:**\u00a0The first occurrence of \"d\" is at index 3. \nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"xyxzxe\", ch = \"z\"\n**Output:** \"zxyxxe\"\n**Explanation:**\u00a0The first and only occurrence of \"z\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word = \"abcd\", ch = \"z\"\n**Output:** \"abcd\"\n**Explanation:**\u00a0\"z\" does not exist in word.\nYou should not do any reverse operation, the resulting string is \"abcd\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 250`\n* `word` consists of lowercase English letters.\n* `ch` is a lowercase English letter.\n\n\n",
  "canonical_solution": "class Solution:\n    def reversePrefix(self, word: str, ch: str) -> str:\n        i = word.find(ch)\n        return word if i == -1 else word[i::-1] + word[i + 1 :]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def reversePrefix(self, word, ch):\n        i = word.find(ch)\n        return word if i == -1 else word[i::-1] + word[i + 1 :]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random word\n    word_length = random.randint(1, 10)\n    word = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=word_length))\n    \n    # Generate a random character\n    ch = random.choice('abcdefghijklmnopqrstuvwxyz')\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reversePrefix(word, ch)\n\n    return word, ch, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word, ch, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reversePrefix(word, ch) == expected_result\n        print(f\"assert solution.reversePrefix('{word}', '{ch}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.reversePrefix('{word}', '{ch}') == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(\"test_case_generator_results:\", test_case_generator_results)\n",
  "test_case": "assert solution.reversePrefix('nhlnyasd', 'u') == 'nhlnyasd'\nassert solution.reversePrefix('prwcrgikp', 'o') == 'prwcrgikp'\nassert solution.reversePrefix('xgkxkdaa', 'd') == 'dkxkgxaa'\nassert solution.reversePrefix('wxqkqv', 'v') == 'vqkqxw'\nassert solution.reversePrefix('rsvlmaody', 'g') == 'rsvlmaody'\nassert solution.reversePrefix('cr', 'j') == 'cr'\nassert solution.reversePrefix('ekahxdkbhf', 'i') == 'ekahxdkbhf'\nassert solution.reversePrefix('nzvdhmjjr', 'g') == 'nzvdhmjjr'\nassert solution.reversePrefix('aofu', 'l') == 'aofu'\nassert solution.reversePrefix('qoy', 'w') == 'qoy'\nassert solution.reversePrefix('lilc', 'm') == 'lilc'\nassert solution.reversePrefix('jmitplak', 'o') == 'jmitplak'\nassert solution.reversePrefix('mldzerc', 'm') == 'mldzerc'\nassert solution.reversePrefix('vzrapag', 'r') == 'rzvapag'\nassert solution.reversePrefix('esf', 'k') == 'esf'\nassert solution.reversePrefix('xl', 'm') == 'xl'\nassert solution.reversePrefix('kbmth', 'p') == 'kbmth'\nassert solution.reversePrefix('hfy', 'k') == 'hfy'\nassert solution.reversePrefix('fu', 'n') == 'fu'\nassert solution.reversePrefix('ttbpo', 'b') == 'bttpo'\nassert solution.reversePrefix('x', 'k') == 'x'\nassert solution.reversePrefix('oflmtrc', 'i') == 'oflmtrc'\nassert solution.reversePrefix('yckmghk', 'o') == 'yckmghk'\nassert solution.reversePrefix('znouggamjw', 'q') == 'znouggamjw'\nassert solution.reversePrefix('cpjovn', 'p') == 'pcjovn'\nassert solution.reversePrefix('ukzmmojobj', 't') == 'ukzmmojobj'\nassert solution.reversePrefix('raylnqy', 'r') == 'raylnqy'\nassert solution.reversePrefix('hwkyamdxwu', 'i') == 'hwkyamdxwu'\nassert solution.reversePrefix('aghxnntc', 'p') == 'aghxnntc'\nassert solution.reversePrefix('yjfxezkx', 'm') == 'yjfxezkx'\nassert solution.reversePrefix('koadwkjp', 'a') == 'aokdwkjp'\nassert solution.reversePrefix('kl', 'r') == 'kl'\nassert solution.reversePrefix('eppskmlt', 'a') == 'eppskmlt'\nassert solution.reversePrefix('pbacuhvxw', 'a') == 'abpcuhvxw'\nassert solution.reversePrefix('ftm', 'x') == 'ftm'\nassert solution.reversePrefix('cahvhtmyss', 'v') == 'vhachtmyss'\nassert solution.reversePrefix('izc', 'k') == 'izc'\nassert solution.reversePrefix('upbxxi', 'l') == 'upbxxi'\nassert solution.reversePrefix('vyrdmhgww', 'y') == 'yvrdmhgww'\nassert solution.reversePrefix('coipsq', 's') == 'spiocq'\nassert solution.reversePrefix('lmlt', 'x') == 'lmlt'\nassert solution.reversePrefix('cnycfieml', 'k') == 'cnycfieml'\nassert solution.reversePrefix('qctx', 'k') == 'qctx'\nassert solution.reversePrefix('o', 'h') == 'o'\nassert solution.reversePrefix('xdxiwtqriv', 'b') == 'xdxiwtqriv'\nassert solution.reversePrefix('t', 'v') == 't'\nassert solution.reversePrefix('pmnlbmfas', 'k') == 'pmnlbmfas'\nassert solution.reversePrefix('athtc', 'a') == 'athtc'\nassert solution.reversePrefix('sjkmriepmj', 'b') == 'sjkmriepmj'\nassert solution.reversePrefix('pbhdkaz', 'a') == 'akdhbpz'\nassert solution.reversePrefix('r', 'g') == 'r'\nassert solution.reversePrefix('kk', 'f') == 'kk'\nassert solution.reversePrefix('b', 'p') == 'b'\nassert solution.reversePrefix('ocpvpdm', 'b') == 'ocpvpdm'\nassert solution.reversePrefix('ajvx', 'o') == 'ajvx'\nassert solution.reversePrefix('srxyi', 'n') == 'srxyi'\nassert solution.reversePrefix('gkhdpuqoli', 'k') == 'kghdpuqoli'\nassert solution.reversePrefix('fexanlquwu', 's') == 'fexanlquwu'\nassert solution.reversePrefix('jl', 'o') == 'jl'\nassert solution.reversePrefix('qft', 'i') == 'qft'\nassert solution.reversePrefix('e', 'g') == 'e'\nassert solution.reversePrefix('wdzqeeubz', 'g') == 'wdzqeeubz'\nassert solution.reversePrefix('bkxiazdvp', 'u') == 'bkxiazdvp'\nassert solution.reversePrefix('s', 'g') == 's'\nassert solution.reversePrefix('u', 'q') == 'u'\nassert solution.reversePrefix('s', 't') == 's'\nassert solution.reversePrefix('hevim', 'e') == 'ehvim'\nassert solution.reversePrefix('qkxjxojtse', 'n') == 'qkxjxojtse'\nassert solution.reversePrefix('xxnmxeofkf', 'a') == 'xxnmxeofkf'\nassert solution.reversePrefix('bszdy', 'a') == 'bszdy'\nassert solution.reversePrefix('f', 'd') == 'f'\nassert solution.reversePrefix('rwbdfrzgkf', 'k') == 'kgzrfdbwrf'\nassert solution.reversePrefix('wlndv', 'n') == 'nlwdv'\nassert solution.reversePrefix('omswbc', 'n') == 'omswbc'\nassert solution.reversePrefix('gdbiogv', 'j') == 'gdbiogv'\nassert solution.reversePrefix('j', 'j') == 'j'\nassert solution.reversePrefix('adfrbvsw', 'm') == 'adfrbvsw'\nassert solution.reversePrefix('v', 'v') == 'v'\nassert solution.reversePrefix('ejidvjn', 'a') == 'ejidvjn'\nassert solution.reversePrefix('cdjthu', 'u') == 'uhtjdc'\nassert solution.reversePrefix('pech', 'e') == 'epch'\nassert solution.reversePrefix('otndqxlcak', 's') == 'otndqxlcak'\nassert solution.reversePrefix('etrrotjwm', 'r') == 'rterotjwm'\nassert solution.reversePrefix('mftilh', 'i') == 'itfmlh'\nassert solution.reversePrefix('xmho', 'r') == 'xmho'\nassert solution.reversePrefix('veht', 'v') == 'veht'\nassert solution.reversePrefix('dz', 'a') == 'dz'\nassert solution.reversePrefix('xgvhovwdhq', 'x') == 'xgvhovwdhq'\nassert solution.reversePrefix('mqyjupjxgk', 'i') == 'mqyjupjxgk'\nassert solution.reversePrefix('ctjiy', 'r') == 'ctjiy'\nassert solution.reversePrefix('xmphey', 'x') == 'xmphey'\nassert solution.reversePrefix('orsqxfdj', 'b') == 'orsqxfdj'\nassert solution.reversePrefix('zyamgvxb', 'v') == 'vgmayzxb'\nassert solution.reversePrefix('fzuxvtmaa', 'q') == 'fzuxvtmaa'\nassert solution.reversePrefix('r', 'w') == 'r'\nassert solution.reversePrefix('hh', 'p') == 'hh'\nassert solution.reversePrefix('wxact', 'w') == 'wxact'\nassert solution.reversePrefix('fganjzt', 'z') == 'zjnagft'\nassert solution.reversePrefix('akklfokdg', 'l') == 'lkkafokdg'\nassert solution.reversePrefix('quzhwbl', 'd') == 'quzhwbl'",
  "inefficient_solution": "class Solution:\n    def reversePrefix(self, word: str, ch: str) -> str:\n        i = word.find(ch)\n        if i == -1:\n            return word\n        else:\n            result = []\n            for x in word[:i+1]:\n                result.append(x)\n            for x in word[:i+1][::-1]:\n                result.append(x)\n            for x in word[i+1:]:\n                result.append(x)\n            return ''.join(result)",
  "is_python": true
}