{
  "problem_idx": 1561,
  "task_name": "Maximum Number of Coins You Can Get",
  "markdown_description": "\nThere are `3n` piles of coins of varying size, you and your friends will take piles of coins as follows:\n\n\n* In each step, you will choose **any** `3` piles of coins (not necessarily consecutive).\n* Of your choice, Alice will pick the pile with the maximum number of coins.\n* You will pick the next pile with the maximum number of coins.\n* Your friend Bob will pick the last pile.\n* Repeat until there are no more piles of coins.\n\n\nGiven an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.\n\n\nReturn the maximum number of coins that you can have.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** piles = [2,4,1,2,7,8]\n**Output:** 9\n**Explanation:** Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with **7** coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with **2** coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, **2**, 8), (2, **4**, 7) you only get 2 + 4 = 6 coins which is not optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** piles = [2,4,5]\n**Output:** 4\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** piles = [9,8,7,6,5,1,2,3,4]\n**Output:** 18\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= piles.length <= 105`\n* `piles.length % 3 == 0`\n* `1 <= piles[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxCoins(self, piles: List[int]) -> int:\n        piles.sort()\n        return sum(piles[-2 : len(piles) // 3 - 1 : -2])\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxCoins(self, piles: List[int]) -> int:\n        piles.sort()\n        return sum(piles[-2 : len(piles) // 3 - 1 : -2])\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    piles = random.choices(range(1, 10001), k=random.randint(3, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxCoins(piles)\n\n    return piles, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        piles, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxCoins(piles) == expected_result\n        print(f\"assert solution.maxCoins({piles}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxCoins({piles}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxCoins([1278, 1452, 4722, 7876]) == 4722\nassert solution.maxCoins([3932, 4908, 5983, 6387, 6500, 7566, 9518]) == 13953\nassert solution.maxCoins([5, 1214, 4889, 5972, 6565, 8585, 8847, 9152, 9461]) == 23709\nassert solution.maxCoins([146, 270, 592, 2531, 3673, 6236, 8376, 9684, 9751]) == 18451\nassert solution.maxCoins([182, 1103, 2135, 2512, 5589, 7651, 8146, 8995, 9419, 9451]) == 23154\nassert solution.maxCoins([1228, 2096, 3165, 3567, 5266, 5363, 5581, 8359, 8383, 8780]) == 19230\nassert solution.maxCoins([935, 8719, 9067]) == 8719\nassert solution.maxCoins([645, 678, 3004, 4340, 6326, 7708, 9207, 9277, 9844]) == 21325\nassert solution.maxCoins([3194, 3586, 4186, 4207, 5749, 5878, 5925, 7091, 9375, 9844]) == 21049\nassert solution.maxCoins([506, 1136, 4673, 6773, 7189, 8494, 9237, 9367, 9616, 9705]) == 26042\nassert solution.maxCoins([1918, 3807, 4141, 5675, 7372, 8445, 9216]) == 14120\nassert solution.maxCoins([564, 1557, 2540, 2706, 3133, 3259, 3587, 4710, 7940, 7964]) == 14660\nassert solution.maxCoins([1, 95, 1974, 2163, 3338, 5680, 6498, 7917, 8125, 9260]) == 17961\nassert solution.maxCoins([161, 4129, 7235]) == 4129\nassert solution.maxCoins([2161, 3644, 4179, 4378, 5468, 5770, 6524, 6650, 9579]) == 16798\nassert solution.maxCoins([551, 883, 969, 2241, 2414, 2692, 3177, 4343, 5560, 9974]) == 11151\nassert solution.maxCoins([5956, 7489, 9277]) == 7489\nassert solution.maxCoins([287, 415, 1074, 3041, 7246, 7861]) == 8320\nassert solution.maxCoins([2400, 3310, 5909, 6025, 8186, 9445, 9587, 9993]) == 23682\nassert solution.maxCoins([257, 361, 5832, 5888, 6474, 7357, 7632, 8310, 9350]) == 21555\nassert solution.maxCoins([585, 1349, 2175, 2968, 3703, 3709, 6815, 7154, 8708, 9647]) == 19226\nassert solution.maxCoins([180, 2526, 5062]) == 2526\nassert solution.maxCoins([3863, 4006, 4137, 4547, 9493]) == 8553\nassert solution.maxCoins([1285, 1529, 2597, 3405, 4838, 6616, 6869]) == 10021\nassert solution.maxCoins([427, 2698, 3835, 4205, 4353, 4917, 7389, 7575, 9797]) == 16697\nassert solution.maxCoins([526, 4935, 5784]) == 4935\nassert solution.maxCoins([1347, 5028, 6292, 9981]) == 6292\nassert solution.maxCoins([1056, 3900, 5367]) == 3900\nassert solution.maxCoins([3728, 6608, 7527, 8266]) == 7527\nassert solution.maxCoins([2299, 3912, 8928, 9329]) == 8928\nassert solution.maxCoins([2290, 4769, 7445, 7604]) == 7445\nassert solution.maxCoins([3322, 3986, 4488, 6879, 7462]) == 10865\nassert solution.maxCoins([457, 475, 4868, 5925, 8256, 9120, 9823]) == 15045\nassert solution.maxCoins([3777, 8315, 8893]) == 8315\nassert solution.maxCoins([3826, 3990, 4224, 5260, 6454, 7329, 8471, 8996]) == 19149\nassert solution.maxCoins([964, 3839, 5503]) == 3839\nassert solution.maxCoins([499, 1287, 8013]) == 1287\nassert solution.maxCoins([571, 1183, 1803, 3355, 4763, 6802, 8520]) == 10157\nassert solution.maxCoins([1125, 3867, 6702, 7594, 7614, 9479]) == 14316\nassert solution.maxCoins([1106, 2691, 4359, 4851, 5682, 8088]) == 10041\nassert solution.maxCoins([1484, 3771, 7817, 8652, 9342]) == 12423\nassert solution.maxCoins([1238, 1459, 2561, 4796, 8578, 8725]) == 11139\nassert solution.maxCoins([665, 966, 5138, 5825, 5945, 6945, 7350, 7938]) == 18433\nassert solution.maxCoins([3799, 5464, 6768, 7554, 8118, 8276, 9485]) == 15830\nassert solution.maxCoins([3536, 3661, 4313, 5201, 6574, 7134, 9012, 9201]) == 19899\nassert solution.maxCoins([372, 2612, 2742, 7561, 7952, 8074]) == 10694\nassert solution.maxCoins([958, 2074, 4749, 5249, 6719, 7671]) == 11468\nassert solution.maxCoins([787, 1140, 4200, 4273, 4373, 4712, 4980, 5217, 9114, 9552]) == 18467\nassert solution.maxCoins([591, 6115, 7527, 8193, 8228, 8620]) == 15755\nassert solution.maxCoins([470, 3983, 5576, 6487, 6985, 8292, 8628]) == 14779\nassert solution.maxCoins([1284, 1659, 3694, 7276, 8051]) == 8935\nassert solution.maxCoins([490, 2195, 3667, 4905, 6363, 7685, 7969, 8688, 8838, 8854]) == 23170\nassert solution.maxCoins([199, 1192, 4171, 4456, 7676, 7775, 8762]) == 12231\nassert solution.maxCoins([1938, 5255, 7460, 7722]) == 7460\nassert solution.maxCoins([2868, 3623, 4257, 6391, 6824]) == 10014\nassert solution.maxCoins([2267, 3248, 4791, 8864]) == 4791\nassert solution.maxCoins([1279, 4130, 5217, 5767, 6804, 8177]) == 12021\nassert solution.maxCoins([249, 662, 4553, 4680, 5445, 7397, 7657, 8108, 8621, 9161]) == 21723\nassert solution.maxCoins([2687, 3874, 6160, 7243, 8040]) == 11117\nassert solution.maxCoins([45, 4577, 6393, 7063, 8603]) == 11640\nassert solution.maxCoins([2330, 2849, 4040, 4676, 4782, 5031, 5515, 7827, 8357, 9857]) == 18654\nassert solution.maxCoins([1928, 7110, 8809, 9242, 9404]) == 16352\nassert solution.maxCoins([1699, 4203, 5659, 8024, 9653, 9682]) == 15312\nassert solution.maxCoins([419, 447, 4676, 5866, 6007, 6066, 7794, 8629, 8814]) == 20561\nassert solution.maxCoins([1429, 5042, 5353]) == 5042\nassert solution.maxCoins([1355, 4173, 5924, 8052]) == 5924\nassert solution.maxCoins([1068, 3606, 6491, 8982]) == 6491\nassert solution.maxCoins([943, 4140, 8225, 9824]) == 8225\nassert solution.maxCoins([1168, 1969, 8918, 9258]) == 8918\nassert solution.maxCoins([842, 1301, 4060, 5337, 6241, 6892, 8087, 8723]) == 18388\nassert solution.maxCoins([411, 1078, 1439, 1680, 3312, 4111, 4289, 8449]) == 9040\nassert solution.maxCoins([780, 942, 4202, 6668, 7882, 8366, 9634]) == 15034\nassert solution.maxCoins([310, 1134, 2919, 3617, 3997, 4231, 9762]) == 7848\nassert solution.maxCoins([1470, 3560, 4183, 5610, 5649, 7980, 8774]) == 13590\nassert solution.maxCoins([3738, 9656, 9857]) == 9656\nassert solution.maxCoins([280, 7361, 8783, 9396]) == 8783\nassert solution.maxCoins([1122, 3836, 9535, 9660]) == 9535\nassert solution.maxCoins([114, 2703, 3291, 4676, 6091, 7775, 8334]) == 12451\nassert solution.maxCoins([1515, 3982, 4062, 5491, 7008, 9085]) == 11070\nassert solution.maxCoins([2062, 3559, 3698, 5427, 5439, 5602, 7010, 7543, 8634, 8826]) == 21083\nassert solution.maxCoins([3499, 4198, 4582, 6498, 7173, 7242, 8903, 9036]) == 20658\nassert solution.maxCoins([1087, 1614, 2137, 3657, 7491, 9323, 9912, 9946]) == 19540\nassert solution.maxCoins([1271, 3914, 7068, 7159, 7293, 7712, 9215, 9495]) == 23576\nassert solution.maxCoins([1988, 3304, 3951, 6604, 8679, 9507]) == 12630\nassert solution.maxCoins([1792, 1914, 4544, 7513, 8712]) == 9427\nassert solution.maxCoins([603, 1940, 2351, 3643, 7793]) == 5583\nassert solution.maxCoins([1062, 3011, 5113, 7226, 8412]) == 10237\nassert solution.maxCoins([830, 1680, 1690, 2798, 2821, 6133, 6774, 8579, 8733]) == 17510\nassert solution.maxCoins([2976, 4076, 6964]) == 4076\nassert solution.maxCoins([655, 2075, 2169, 3327, 3925, 5200, 7064, 7167, 8826, 9710]) == 19815\nassert solution.maxCoins([1398, 3354, 5972, 6139]) == 5972\nassert solution.maxCoins([891, 1186, 3153, 4007, 5388, 5671, 6418, 6565, 7816]) == 16243\nassert solution.maxCoins([1693, 2202, 2755, 4428, 4846, 5567, 6004, 7175, 7278]) == 17170\nassert solution.maxCoins([2022, 4794, 6130, 6498, 9729]) == 11292\nassert solution.maxCoins([3126, 3993, 4717, 5231, 6263, 7117]) == 10980\nassert solution.maxCoins([390, 2766, 3366, 3432, 6395, 7775, 7786, 8482, 8634, 9647]) == 22815\nassert solution.maxCoins([2374, 4959, 6979, 9854]) == 6979\nassert solution.maxCoins([2270, 8259, 9216, 9512]) == 9216\nassert solution.maxCoins([3468, 6526, 7004, 9943]) == 7004\nassert solution.maxCoins([317, 2709, 3530, 3989, 4291, 5627, 5672, 9112]) == 13493",
  "inefficient_solution": "class Solution:\n    def maxCoins(self, piles):\n        n = len(piles)\n        coins = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    coins[i][j] = piles[i]\n                else:\n                    coins[i][j] = -1\n        for k in range(n):\n            for i in range(n):\n                for j in range(n):\n                    if i < k and j < k:\n                        coins[i][j] = 0\n                    elif i > k and j > k:\n                        coins[i][j] = 0\n                    elif i > k and j < k:\n                        coins[i][j] = max(coins[i][k], coins[i][k + 1])\n                    elif i < k and j > k:\n                        coins[i][j] = max(coins[k][j], coins[k + 1][j])\n                    elif i == k and j > k:\n                        coins[i][j] = piles[j]\n                    elif i > k and j == k:\n                        coins[i][j] = piles[i]\n        ans = 0\n        for i in range(1, n, 2):\n            ans += coins[i][i - 1]\n        return ans",
  "is_python": true
}