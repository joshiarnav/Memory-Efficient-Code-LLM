{
  "problem_idx": 1901,
  "task_name": "Find a Peak Element II",
  "markdown_description": "\nA **peak** element in a 2D grid is an element that is **strictly greater** than all of its **adjacent** neighbors to the left, right, top, and bottom.\n\n\nGiven a **0-indexed** `m x n` matrix `mat` where **no two adjacent cells are equal**, find **any** peak element `mat[i][j]` and return *the length 2 array* `[i,j]`.\n\n\nYou may assume that the entire matrix is surrounded by an **outer perimeter** with the value `-1` in each cell.\n\n\nYou must write an algorithm that runs in `O(m log(n))` or `O(n log(m))` time.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1901.Find%20a%20Peak%20Element%20II/images/1.png)\n\n\n\n```\n\n**Input:** mat = [[1,4],[3,2]]\n**Output:** [0,1]\n**Explanation:**\u00a0Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1901.Find%20a%20Peak%20Element%20II/images/3.png)**\n\n\n\n```\n\n**Input:** mat = [[10,20,15],[21,30,14],[7,16,32]]\n**Output:** [1,1]\n**Explanation:**\u00a0Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == mat.length`\n* `n == mat[i].length`\n* `1 <= m, n <= 500`\n* `1 <= mat[i][j] <= 105`\n* No two adjacent cells are equal.\n\n\n",
  "canonical_solution": "class Solution:\n    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:\n        l, r = 0, len(mat) - 1\n        while l < r:\n            mid = (l + r) >> 1\n            j = mat[mid].index(max(mat[mid]))\n            if mat[mid][j] > mat[mid + 1][j]:\n                r = mid\n            else:\n                l = mid + 1\n        return [l, mat[l].index(max(mat[l]))]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findPeakGrid(self, mat):\n        l, r = 0, len(mat) - 1\n        while l < r:\n            mid = (l + r) >> 1\n            j = mat[mid].index(max(mat[mid]))\n            if mat[mid][j] > mat[mid + 1][j]:\n                r = mid\n            else:\n                l = mid + 1\n        return [l, mat[l].index(max(mat[l]))]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random m and n\n    m = random.randint(1, 11)\n    n = random.randint(1, 11)\n\n    # Generate a random matrix\n    mat = [[random.randint(1, 100) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findPeakGrid(mat)\n\n    return mat, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        mat, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findPeakGrid(mat) == expected_result\n        print(f\"assert solution.findPeakGrid({mat}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findPeakGrid({mat}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findPeakGrid([[16, 79], [4, 41], [7, 3], [29, 47], [16, 85], [70, 14]]) == [4, 1]\nassert solution.findPeakGrid([[9, 13, 50, 26, 98, 57], [9, 9, 26, 82, 46, 66], [100, 31, 12, 61, 76, 21], [88, 59, 97, 73, 43, 24], [21, 39, 12, 32, 19, 33], [68, 52, 53, 30, 20, 45]]) == [0, 4]\nassert solution.findPeakGrid([[7], [94], [3], [33]]) == [1, 0]\nassert solution.findPeakGrid([[92, 32, 97, 60, 94, 43, 54], [34, 26, 14, 41, 39, 26, 4], [3, 26, 4, 58, 24, 18, 54], [81, 95, 3, 35, 66, 61, 89], [63, 23, 65, 68, 84, 93, 90], [17, 95, 52, 89, 50, 97, 63], [100, 96, 15, 50, 65, 35, 22], [24, 28, 22, 80, 13, 73, 82], [66, 20, 14, 82, 53, 35, 2]]) == [5, 5]\nassert solution.findPeakGrid([[31, 53, 42, 17, 61, 70], [99, 30, 34, 26, 6, 68], [68, 58, 89, 28, 97, 93], [5, 45, 46, 96, 68, 89], [99, 74, 43, 67, 59, 12], [100, 75, 93, 60, 52, 70], [24, 96, 51, 15, 71, 21], [39, 15, 31, 3, 39, 49], [8, 64, 89, 54, 19, 14], [64, 71, 69, 66, 36, 8]]) == [5, 0]\nassert solution.findPeakGrid([[81, 5, 39, 12, 31, 11, 56, 15, 86, 68], [48, 30, 5, 40, 32, 10, 75, 70, 94, 54], [44, 77, 39, 35, 76, 66, 69, 61, 99, 34], [39, 35, 50, 51, 18, 58, 86, 13, 37, 15], [92, 62, 92, 52, 34, 72, 54, 34, 96, 41], [89, 28, 94, 92, 28, 74, 69, 29, 44, 84], [25, 53, 72, 68, 44, 12, 59, 30, 86, 8], [93, 41, 91, 15, 40, 98, 57, 100, 17, 40], [40, 33, 25, 43, 45, 46, 69, 59, 100, 8]]) == [2, 8]\nassert solution.findPeakGrid([[77], [89], [12], [41], [65], [36], [42], [39], [6], [57], [97]]) == [10, 0]\nassert solution.findPeakGrid([[70, 4, 5, 96, 57, 37, 27, 8, 53], [39, 39, 61, 30, 26, 13, 60, 23, 50], [54, 55, 70, 37, 100, 33, 43, 21, 23], [9, 21, 86, 67, 87, 66, 29, 32, 21], [40, 11, 88, 80, 58, 84, 89, 26, 94], [23, 17, 8, 61, 29, 5, 67, 83, 7], [26, 39, 97, 6, 51, 7, 64, 85, 55], [49, 50, 31, 4, 73, 68, 8, 84, 49], [55, 86, 52, 48, 96, 86, 86, 86, 57], [83, 66, 55, 70, 60, 10, 89, 94, 75], [87, 29, 84, 74, 23, 80, 20, 95, 50]]) == [8, 4]\nassert solution.findPeakGrid([[45], [14], [87], [86], [85]]) == [2, 0]\nassert solution.findPeakGrid([[64, 40, 77, 23, 20, 72, 51], [79, 83, 95, 52, 79, 71, 2], [2, 31, 18, 12, 22, 12, 26], [52, 22, 14, 94, 72, 68, 98], [8, 41, 69, 44, 60, 83, 50]]) == [1, 2]\nassert solution.findPeakGrid([[94, 4, 65, 87, 48], [92, 25, 50, 9, 1], [47, 37, 76, 72, 17], [72, 75, 34, 83, 28], [80, 36, 1, 76, 15], [86, 69, 26, 94, 85]]) == [0, 0]\nassert solution.findPeakGrid([[10, 51, 26, 53, 41, 74, 80, 50, 87, 36]]) == [0, 8]\nassert solution.findPeakGrid([[41], [57], [92], [54], [39], [71], [16]]) == [2, 0]\nassert solution.findPeakGrid([[15, 23, 7, 60, 98, 11, 4, 62], [38, 36, 89, 65, 17, 77, 40, 60], [42, 62, 52, 33, 40, 49, 58, 7], [44, 79, 15, 92, 78, 38, 43, 59], [85, 84, 78, 75, 32, 47, 23, 30], [21, 80, 18, 47, 27, 19, 12, 76], [95, 99, 98, 6, 25, 68, 31, 86], [28, 69, 18, 21, 5, 14, 78, 78]]) == [0, 4]\nassert solution.findPeakGrid([[89], [91], [63], [30], [98], [23], [26], [73], [9], [54]]) == [1, 0]\nassert solution.findPeakGrid([[55, 62, 40, 14, 43, 2, 85, 71, 8, 36], [55, 28, 49, 57, 98, 76, 34, 55, 20, 98], [47, 97, 96, 93, 56, 56, 55, 28, 8, 81], [23, 95, 70, 53, 20, 12, 86, 7, 53, 7]]) == [0, 6]\nassert solution.findPeakGrid([[20, 49, 44, 33], [9, 78, 38, 52]]) == [1, 1]\nassert solution.findPeakGrid([[17, 82, 10, 94, 71, 52, 95, 13]]) == [0, 6]\nassert solution.findPeakGrid([[97, 49, 32, 57, 95, 68], [88, 24, 23, 53, 64, 38], [33, 31, 96, 50, 75, 98], [67, 19, 11, 54, 32, 90], [3, 2, 84, 67, 20, 43]]) == [0, 0]\nassert solution.findPeakGrid([[43, 50, 90, 72, 44, 9, 66, 69, 47, 8], [71, 33, 63, 34, 55, 72, 91, 10, 1, 96], [30, 58, 60, 41, 5, 23, 71, 73, 95, 66], [65, 100, 25, 46, 57, 49, 66, 91, 90, 30], [45, 67, 95, 75, 44, 82, 57, 39, 44, 24], [84, 50, 38, 46, 31, 100, 36, 40, 58, 24], [46, 76, 56, 21, 59, 40, 72, 29, 18, 69], [27, 91, 16, 59, 81, 50, 2, 6, 4, 12], [79, 34, 96, 84, 49, 38, 1, 83, 64, 93], [60, 65, 85, 12, 8, 20, 52, 34, 49, 66]]) == [0, 2]\nassert solution.findPeakGrid([[24, 51], [68, 27], [71, 60], [6, 10], [32, 36]]) == [2, 0]\nassert solution.findPeakGrid([[70, 55, 82]]) == [0, 2]\nassert solution.findPeakGrid([[18], [96]]) == [1, 0]\nassert solution.findPeakGrid([[2, 72, 72, 1, 70, 100, 27, 6, 32, 26, 67], [47, 55, 85, 58, 28, 97, 54, 19, 82, 8, 31], [12, 4, 83, 16, 94, 38, 98, 14, 68, 57, 29], [10, 39, 51, 97, 17, 54, 82, 38, 92, 74, 46]]) == [0, 5]\nassert solution.findPeakGrid([[100], [90], [69], [24], [12]]) == [0, 0]\nassert solution.findPeakGrid([[18, 82], [55, 11], [88, 4], [94, 92], [84, 90]]) == [3, 0]\nassert solution.findPeakGrid([[69, 98, 87, 42, 11, 86, 45, 94, 47, 77], [7, 57, 72, 42, 60, 96, 11, 41, 11, 34], [13, 20, 52, 27, 43, 11, 31, 15, 54, 63], [90, 97, 76, 97, 36, 53, 75, 46, 48, 3], [39, 72, 4, 73, 32, 7, 85, 49, 60, 70], [9, 6, 47, 7, 100, 18, 86, 88, 20, 69], [81, 27, 77, 100, 18, 36, 12, 87, 33, 94], [24, 28, 28, 25, 19, 81, 39, 9, 2, 81], [43, 91, 37, 13, 95, 77, 13, 31, 49, 62], [7, 93, 55, 68, 74, 15, 72, 81, 86, 32]]) == [5, 4]\nassert solution.findPeakGrid([[97, 70, 69], [49, 77, 26], [48, 48, 91], [25, 72, 9], [73, 17, 5], [4, 21, 41]]) == [0, 0]\nassert solution.findPeakGrid([[100], [69], [65], [53]]) == [0, 0]\nassert solution.findPeakGrid([[87, 40, 52, 80, 63, 20, 50, 96, 92], [45, 69, 55, 32, 60, 71, 76, 64, 13], [48, 23, 13, 50, 65, 51, 77, 14, 89]]) == [2, 8]\nassert solution.findPeakGrid([[73], [71], [36], [28], [50]]) == [0, 0]\nassert solution.findPeakGrid([[55, 9, 76], [32, 45, 9], [14, 8, 33], [88, 69, 66], [13, 85, 19], [72, 42, 71], [43, 26, 8]]) == [0, 2]\nassert solution.findPeakGrid([[40, 62, 100, 5, 33], [15, 27, 68, 98, 6]]) == [0, 2]\nassert solution.findPeakGrid([[44], [60], [90], [87], [95], [54], [93], [81]]) == [6, 0]\nassert solution.findPeakGrid([[53, 76, 84, 43, 3, 72, 99, 54], [100, 21, 57, 61, 88, 8, 68, 25], [95, 23, 6, 49, 84, 4, 52, 61], [52, 91, 65, 29, 62, 7, 58, 58], [18, 40, 98, 10, 68, 93, 55, 56], [83, 41, 11, 93, 18, 40, 91, 3], [89, 20, 1, 39, 46, 25, 61, 88]]) == [0, 6]\nassert solution.findPeakGrid([[78, 47, 42, 43, 48, 67, 62, 35, 67], [84, 84, 38, 80, 96, 98, 83, 30, 31], [11, 10, 26, 11, 91, 76, 54, 97, 35], [72, 48, 64, 65, 56, 5, 7, 56, 37], [71, 91, 55, 81, 72, 52, 15, 79, 9], [53, 34, 24, 21, 50, 48, 9, 62, 56], [99, 60, 56, 93, 54, 84, 33, 31, 52], [25, 41, 9, 23, 16, 11, 94, 91, 69], [11, 16, 42, 96, 94, 69, 37, 84, 32]]) == [1, 5]\nassert solution.findPeakGrid([[42, 49, 2, 70, 25, 12, 27], [95, 48, 51, 77, 2, 22, 58], [7, 4, 29, 91, 28, 90, 9]]) == [1, 0]\nassert solution.findPeakGrid([[69, 97, 17, 65], [87, 21, 69, 68], [8, 79, 11, 33], [62, 62, 31, 74]]) == [0, 1]\nassert solution.findPeakGrid([[73, 58, 67, 34, 3, 22, 72, 5], [92, 77, 23, 90, 22, 32, 90, 71], [81, 9, 16, 50, 75, 34, 79, 18], [3, 30, 12, 69, 83, 78, 31, 6], [35, 45, 5, 14, 9, 56, 51, 41], [33, 35, 74, 60, 24, 38, 27, 79], [75, 70, 24, 70, 73, 53, 58, 96], [65, 22, 70, 27, 52, 54, 75, 63], [90, 19, 95, 73, 90, 53, 50, 12], [97, 82, 20, 11, 89, 55, 22, 47], [83, 73, 34, 41, 28, 51, 23, 53]]) == [6, 7]\nassert solution.findPeakGrid([[76, 70, 57, 43, 88, 69, 63, 39, 80, 29, 56], [77, 20, 50, 88, 17, 20, 90, 66, 1, 8, 10], [2, 91, 94, 11, 75, 73, 3, 19, 58, 24, 85], [62, 34, 39, 55, 52, 73, 49, 32, 33, 92, 94], [32, 62, 94, 40, 75, 6, 35, 13, 10, 65, 35], [20, 24, 24, 54, 88, 48, 57, 41, 54, 27, 86], [29, 59, 24, 63, 19, 69, 64, 27, 74, 71, 56], [33, 33, 57, 20, 70, 83, 37, 85, 95, 1, 56], [57, 4, 30, 49, 36, 68, 93, 88, 71, 81, 64], [14, 4, 32, 100, 45, 17, 55, 59, 57, 99, 77]]) == [0, 4]\nassert solution.findPeakGrid([[53, 52], [39, 90]]) == [0, 0]\nassert solution.findPeakGrid([[12, 18, 23, 13, 91, 1, 92]]) == [0, 6]\nassert solution.findPeakGrid([[11, 20, 94, 65, 29, 77, 58], [90, 24, 100, 12, 84, 57, 87], [96, 54, 61, 8, 69, 13, 70], [97, 5, 45, 13, 78, 4, 24], [94, 29, 25, 3, 64, 87, 13], [27, 80, 1, 64, 92, 16, 46]]) == [3, 0]\nassert solution.findPeakGrid([[72, 77, 3, 22, 46, 16, 87]]) == [0, 6]\nassert solution.findPeakGrid([[83, 57, 49], [63, 58, 72], [91, 85, 21], [41, 78, 51], [41, 64, 3], [17, 61, 60], [23, 72, 48], [29, 64, 16], [92, 15, 13], [45, 50, 15], [53, 27, 75]]) == [6, 1]\nassert solution.findPeakGrid([[48, 52, 21, 17, 3], [99, 94, 14, 57, 86], [19, 12, 50, 93, 94], [66, 80, 20, 42, 24], [16, 14, 98, 76, 5]]) == [1, 0]\nassert solution.findPeakGrid([[64, 46, 36, 4, 58, 2], [90, 83, 32, 24, 11, 14], [42, 25, 78, 35, 80, 5], [39, 40, 13, 60, 38, 39], [18, 4, 41, 49, 37, 8], [72, 35, 56, 62, 59, 91]]) == [1, 0]\nassert solution.findPeakGrid([[57, 34, 71, 34], [21, 1, 43, 28], [67, 12, 99, 91], [22, 22, 49, 41], [73, 97, 27, 4], [8, 99, 32, 95], [100, 81, 19, 13], [16, 54, 47, 91], [16, 56, 89, 61]]) == [5, 1]\nassert solution.findPeakGrid([[55, 95, 14, 22], [83, 21, 15, 74]]) == [0, 1]\nassert solution.findPeakGrid([[24, 11, 10, 6, 95, 41, 58, 10, 16, 84], [65, 75, 22, 43, 65, 75, 42, 71, 57, 3], [38, 75, 38, 62, 32, 55, 62, 49, 19, 96], [78, 51, 49, 85, 53, 52, 10, 3, 22, 26], [7, 86, 8, 73, 18, 1, 15, 66, 25, 22], [71, 84, 43, 61, 94, 41, 67, 17, 12, 81], [64, 98, 29, 25, 56, 25, 15, 63, 14, 63], [19, 91, 89, 5, 4, 74, 55, 47, 69, 25]]) == [2, 9]\nassert solution.findPeakGrid([[48, 41, 46, 8, 49, 16, 25, 75, 41, 44, 11], [99, 90, 54, 25, 73, 68, 26, 11, 49, 91, 47]]) == [0, 7]\nassert solution.findPeakGrid([[82, 59, 66, 43, 23, 39, 48, 69, 55, 69], [11, 61, 92, 78, 81, 27, 79, 99, 77, 92]]) == [0, 0]\nassert solution.findPeakGrid([[57, 43, 18], [51, 51, 23]]) == [0, 0]\nassert solution.findPeakGrid([[37, 73, 11, 100, 6, 21, 19, 86], [5, 73, 62, 72, 23, 26, 4, 84], [31, 25, 3, 87, 30, 88, 88, 94], [31, 50, 51, 65, 13, 99, 76, 37], [49, 68, 68, 62, 32, 60, 97, 2], [98, 19, 56, 1, 65, 89, 65, 96], [8, 29, 49, 7, 28, 34, 59, 92], [25, 39, 38, 51, 87, 64, 72, 38], [15, 64, 27, 86, 4, 51, 12, 71], [89, 98, 35, 23, 75, 38, 64, 45], [86, 38, 78, 31, 75, 97, 30, 26]]) == [2, 7]\nassert solution.findPeakGrid([[20, 2, 8, 95, 4, 63, 67, 34, 40, 55], [45, 83, 18, 100, 23, 50, 82, 57, 31, 53], [2, 81, 76, 28, 78, 9, 16, 53, 12, 61], [50, 44, 12, 18, 36, 55, 15, 81, 55, 87]]) == [1, 3]\nassert solution.findPeakGrid([[89, 5, 40, 28, 36, 11, 9, 33, 60, 20, 76], [95, 34, 97, 19, 23, 61, 86, 6, 12, 1, 32], [48, 7, 3, 95, 2, 59, 85, 100, 8, 5, 10], [93, 35, 27, 5, 76, 76, 40, 50, 99, 75, 3], [38, 56, 63, 20, 94, 54, 53, 43, 76, 80, 15], [23, 27, 34, 37, 85, 59, 23, 20, 61, 58, 69], [34, 44, 2, 66, 40, 14, 40, 82, 44, 95, 16], [95, 59, 94, 14, 17, 73, 90, 94, 30, 7, 67]]) == [1, 2]\nassert solution.findPeakGrid([[35], [60], [84]]) == [2, 0]\nassert solution.findPeakGrid([[22, 48, 96, 35, 81, 58, 44, 89, 7], [36, 86, 43, 94, 52, 36, 41, 42, 71], [63, 99, 83, 58, 5, 88, 30, 45, 50], [77, 95, 17, 36, 42, 100, 32, 5, 73], [51, 49, 73, 47, 17, 20, 91, 16, 84], [65, 18, 74, 33, 24, 63, 49, 18, 96], [43, 47, 2, 36, 71, 5, 9, 30, 39], [19, 47, 14, 50, 63, 3, 45, 38, 28], [14, 87, 37, 68, 50, 76, 64, 52, 72], [84, 60, 3, 84, 93, 63, 87, 44, 14]]) == [0, 2]\nassert solution.findPeakGrid([[39, 60, 55, 42, 59, 87], [34, 98, 89, 44, 55, 28], [64, 67, 6, 2, 77, 69], [65, 80, 66, 76, 33, 21]]) == [0, 5]\nassert solution.findPeakGrid([[27, 1, 70, 7], [50, 13, 84, 5], [52, 93, 57, 38], [30, 37, 68, 14], [17, 12, 47, 28], [3, 55, 14, 19], [62, 22, 95, 95], [86, 84, 85, 42], [62, 6, 57, 80], [35, 26, 99, 33]]) == [1, 2]\nassert solution.findPeakGrid([[92, 33], [26, 46], [12, 61], [30, 71], [11, 93], [44, 8], [25, 80]]) == [4, 1]\nassert solution.findPeakGrid([[24, 20, 59, 1, 42, 24, 62, 78, 42, 95, 49], [30, 30, 45, 90, 34, 25, 42, 72, 19, 21, 1], [70, 74, 88, 55, 97, 73, 7, 57, 34, 52, 84], [93, 93, 93, 9, 49, 58, 32, 71, 34, 99, 45], [79, 54, 23, 36, 66, 82, 23, 63, 73, 97, 73], [15, 91, 74, 22, 51, 53, 99, 5, 76, 34, 1], [13, 14, 2, 28, 89, 83, 95, 22, 92, 3, 89], [14, 42, 100, 11, 38, 69, 45, 91, 73, 98, 74], [80, 63, 60, 60, 78, 48, 27, 67, 42, 67, 56], [57, 25, 28, 25, 89, 56, 94, 47, 76, 82, 39]]) == [0, 9]\nassert solution.findPeakGrid([[66, 60], [50, 14], [25, 45], [15, 95], [87, 90], [43, 26], [77, 67]]) == [0, 0]\nassert solution.findPeakGrid([[87, 46, 16, 83], [15, 15, 63, 56], [30, 8, 4, 25]]) == [0, 0]\nassert solution.findPeakGrid([[77, 98], [61, 65], [21, 62], [83, 3], [96, 10]]) == [0, 1]\nassert solution.findPeakGrid([[48, 71, 4, 97, 15, 50], [93, 60, 99, 1, 31, 54], [28, 42, 20, 99, 23, 64], [84, 74, 13, 69, 14, 83], [3, 80, 33, 78, 62, 3], [30, 73, 14, 51, 61, 99]]) == [0, 3]\nassert solution.findPeakGrid([[28, 57, 19, 78, 49, 78, 22, 51, 2, 74], [1, 40, 91, 7, 19, 9, 42, 28, 3, 3]]) == [0, 3]\nassert solution.findPeakGrid([[12, 52, 36, 1, 61, 37, 12], [78, 89, 34, 51, 75, 75, 16], [61, 91, 36, 76, 78, 99, 29]]) == [2, 5]\nassert solution.findPeakGrid([[20, 18, 81, 7, 45], [36, 15, 4, 53, 44], [52, 66, 35, 90, 40], [63, 70, 63, 88, 20]]) == [2, 3]\nassert solution.findPeakGrid([[37, 40, 67, 79, 48, 93, 53, 38, 65], [18, 75, 37, 32, 39, 49, 13, 61, 84]]) == [0, 5]\nassert solution.findPeakGrid([[59, 64, 29, 70], [6, 98, 52, 81], [100, 49, 77, 58], [17, 32, 3, 48], [10, 23, 30, 92], [91, 100, 54, 56], [98, 21, 52, 72], [75, 15, 22, 47], [97, 75, 53, 66], [82, 11, 18, 57]]) == [1, 1]\nassert solution.findPeakGrid([[25, 75, 62, 67, 44, 6], [88, 100, 64, 7, 41, 30], [66, 33, 91, 46, 21, 49], [31, 62, 28, 5, 19, 86], [84, 30, 90, 49, 90, 2], [62, 90, 49, 77, 75, 75]]) == [1, 1]\nassert solution.findPeakGrid([[96, 28, 8, 37, 69, 64, 4, 92, 24], [15, 45, 16, 46, 65, 42, 62, 13, 56], [29, 29, 25, 74, 86, 49, 38, 37, 7], [38, 46, 37, 33, 42, 39, 65, 71, 85], [52, 25, 79, 49, 90, 84, 49, 89, 57]]) == [2, 4]\nassert solution.findPeakGrid([[75, 29, 73, 9, 71, 88, 94, 14]]) == [0, 6]\nassert solution.findPeakGrid([[91, 81, 13, 26], [52, 36, 52, 87], [3, 1, 44, 95], [28, 80, 38, 85], [95, 75, 78, 73], [42, 13, 42, 38], [54, 95, 86, 9]]) == [2, 3]\nassert solution.findPeakGrid([[12, 17, 26, 10, 46, 51, 8, 32], [29, 50, 91, 28, 9, 7, 70, 78], [7, 58, 10, 79, 29, 73, 55, 59], [56, 43, 81, 38, 98, 31, 39, 49], [12, 57, 28, 63, 6, 71, 28, 25], [70, 16, 10, 69, 47, 65, 63, 68], [38, 53, 54, 2, 100, 86, 79, 81], [22, 96, 28, 74, 8, 83, 71, 67]]) == [0, 5]\nassert solution.findPeakGrid([[83], [68], [35], [67], [12], [31], [9], [73], [17], [6]]) == [7, 0]\nassert solution.findPeakGrid([[52, 20, 61, 49, 71, 67, 11, 56, 13, 67, 17], [72, 54, 48, 44, 34, 99, 24, 22, 90, 31, 42], [12, 81, 3, 81, 7, 88, 99, 11, 90, 3, 43], [88, 84, 62, 39, 92, 38, 33, 54, 31, 13, 82], [74, 61, 38, 38, 4, 30, 17, 78, 43, 85, 23], [67, 34, 79, 73, 77, 55, 98, 93, 91, 82, 48], [10, 99, 95, 81, 37, 10, 98, 73, 38, 67, 73], [60, 35, 90, 88, 41, 100, 13, 54, 95, 24, 89], [69, 16, 87, 7, 74, 95, 10, 58, 57, 76, 96]]) == [0, 4]\nassert solution.findPeakGrid([[38, 47], [95, 10], [70, 26]]) == [0, 1]\nassert solution.findPeakGrid([[4]]) == [0, 0]\nassert solution.findPeakGrid([[85, 21, 12, 26, 55, 63], [27, 7, 12, 39, 19, 29], [80, 86, 21, 24, 10, 56], [50, 20, 87, 83, 34, 40], [2, 37, 24, 31, 62, 94], [81, 96, 10, 95, 36, 89], [64, 20, 63, 4, 22, 37], [53, 37, 20, 45, 43, 90], [47, 94, 89, 22, 14, 85], [32, 60, 33, 85, 77, 84], [35, 33, 6, 7, 61, 41]]) == [0, 0]\nassert solution.findPeakGrid([[3, 100, 66, 93, 72, 15, 89, 10, 70], [58, 9, 95, 94, 97, 57, 19, 22, 43], [30, 13, 41, 29, 45, 74, 61, 67, 34], [37, 54, 31, 97, 53, 14, 67, 39, 64], [26, 94, 100, 72, 18, 93, 18, 78, 38], [56, 5, 49, 61, 93, 79, 49, 59, 99], [94, 79, 94, 60, 34, 35, 26, 88, 86], [23, 39, 5, 49, 87, 71, 94, 20, 66]]) == [0, 1]\nassert solution.findPeakGrid([[59, 55, 5, 34, 25, 16, 89, 44, 69, 27], [44, 55, 8, 51, 48, 44, 67, 99, 36, 87], [30, 69, 40, 47, 37, 86, 88, 20, 49, 20], [69, 98, 95, 80, 83, 84, 26, 32, 22, 47], [59, 90, 34, 17, 58, 62, 37, 98, 32, 88], [11, 32, 38, 30, 70, 75, 21, 14, 1, 81]]) == [0, 6]\nassert solution.findPeakGrid([[2, 10, 12, 38]]) == [0, 3]\nassert solution.findPeakGrid([[34], [67], [70], [87], [7], [36]]) == [5, 0]\nassert solution.findPeakGrid([[41, 64, 81, 42, 76, 73, 82, 64], [67, 63, 37, 16, 12, 41, 50, 51], [84, 91, 88, 68, 51, 58, 97, 59], [66, 25, 44, 9, 53, 80, 92, 57], [21, 89, 82, 28, 32, 34, 65, 14], [22, 3, 37, 66, 100, 68, 83, 32], [73, 67, 54, 52, 48, 87, 39, 28]]) == [2, 6]\nassert solution.findPeakGrid([[45, 33, 67, 81], [27, 88, 20, 57], [88, 49, 64, 5], [36, 9, 47, 55], [44, 12, 67, 23], [6, 62, 77, 1], [58, 44, 7, 54], [61, 50, 99, 47], [24, 23, 43, 81], [68, 50, 34, 29], [7, 10, 21, 7]]) == [0, 3]\nassert solution.findPeakGrid([[73, 81, 93, 96, 43, 13, 66], [47, 94, 30, 17, 78, 82, 94]]) == [0, 3]\nassert solution.findPeakGrid([[6, 57, 19, 88, 12, 93, 7], [89, 48, 94, 15, 39, 92, 30], [85, 61, 61, 77, 60, 13, 58], [65, 42, 12, 89, 35, 95, 68], [63, 77, 95, 37, 33, 70, 75]]) == [0, 5]\nassert solution.findPeakGrid([[5, 64, 77, 74, 4, 36, 77, 6, 87, 58], [14, 86, 53, 85, 99, 13, 35, 41, 55, 18], [65, 35, 82, 86, 46, 13, 33, 36, 31, 18], [40, 7, 23, 92, 4, 47, 94, 35, 29, 60], [6, 73, 60, 77, 76, 99, 88, 100, 60, 38], [71, 13, 23, 60, 58, 11, 93, 91, 41, 2], [72, 59, 34, 64, 31, 2, 17, 96, 36, 7]]) == [0, 8]\nassert solution.findPeakGrid([[66, 61, 75, 98, 50, 96, 33, 2], [8, 100, 83, 8, 31, 74, 7, 92], [93, 7, 56, 65, 33, 36, 51, 56], [35, 8, 11, 62, 99, 54, 12, 24], [20, 47, 65, 66, 50, 17, 23, 89], [97, 31, 98, 7, 11, 77, 19, 85], [57, 88, 7, 99, 30, 13, 79, 92], [34, 37, 81, 99, 17, 90, 85, 11], [81, 7, 87, 49, 44, 94, 23, 22], [27, 33, 53, 96, 52, 17, 13, 68], [54, 76, 73, 73, 27, 34, 59, 52]]) == [0, 3]\nassert solution.findPeakGrid([[98, 93, 24, 100, 63]]) == [0, 3]\nassert solution.findPeakGrid([[1, 57, 10, 28, 80, 78, 74, 31], [7, 23, 68, 43, 70, 50, 45, 40], [15, 69, 25, 44, 68, 19, 95, 54], [49, 64, 41, 11, 2, 8, 21, 51], [24, 24, 29, 39, 36, 61, 44, 66], [89, 11, 81, 60, 96, 39, 33, 74], [56, 72, 40, 63, 44, 55, 13, 29], [89, 26, 30, 51, 60, 16, 93, 36], [40, 96, 37, 30, 58, 60, 6, 34], [84, 66, 48, 91, 31, 42, 46, 53], [75, 39, 42, 63, 70, 46, 100, 85]]) == [0, 4]\nassert solution.findPeakGrid([[78, 45, 58, 89, 95, 40], [22, 99, 68, 14, 21, 6], [59, 94, 52, 13, 30, 6]]) == [0, 4]\nassert solution.findPeakGrid([[23, 22, 82, 48, 2, 93, 24, 42, 47], [72, 95, 54, 6, 96, 81, 90, 12, 13], [17, 37, 42, 2, 19, 17, 67, 26, 13], [80, 45, 70, 16, 39, 30, 62, 29, 61]]) == [0, 5]\nassert solution.findPeakGrid([[61, 94], [17, 45], [12, 55], [97, 57], [23, 63], [98, 76], [77, 68]]) == [3, 0]\nassert solution.findPeakGrid([[93, 18, 40, 79, 8, 60, 20, 59, 62, 7], [87, 80, 4, 78, 78, 39, 31, 38, 21, 76], [91, 32, 42, 86, 79, 9, 99, 97, 9, 7], [46, 41, 24, 58, 85, 16, 62, 49, 67, 47], [84, 74, 24, 84, 96, 18, 18, 17, 74, 70], [51, 75, 22, 78, 97, 2, 84, 64, 68, 39], [29, 78, 65, 54, 74, 66, 26, 30, 68, 2]]) == [5, 4]\nassert solution.findPeakGrid([[16, 67, 2, 92, 96, 41, 92, 94, 39], [73, 14, 6, 3, 15, 55, 32, 99, 54]]) == [0, 4]\nassert solution.findPeakGrid([[48, 41, 29, 19]]) == [0, 0]\nassert solution.findPeakGrid([[3, 26, 51, 95, 62, 37, 78, 5, 13], [77, 86, 95, 78, 92, 1, 29, 3, 100], [41, 24, 20, 74, 93, 64, 2, 5, 16], [58, 98, 24, 12, 83, 1, 95, 90, 49]]) == [0, 3]",
  "inefficient_solution": "class Solution:\n    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:\n        m, n = len(mat), len(mat[0])\n        max_matrix = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                max_matrix[i][j] = max(mat[i][j], max_matrix[i - 1][j] if i > 0 else -1, max_matrix[i][j - 1] if j > 0 else -1, max_matrix[i + 1][j] if i < m - 1 else -1, max_matrix[i][j + 1] if j < n - 1 else -1)\n        max_matrix = sorted(max_matrix, key=lambda x: sum(x))\n        max_matrix = max_matrix[::-1]\n        max_matrix = [[max_matrix[i][j], i, j] for i in range(m) for j in range(n) if max_matrix[i][j] == max(max_matrix)]\n        return [max_matrix[0][1], max_matrix[0][2]]",
  "is_python": true
}