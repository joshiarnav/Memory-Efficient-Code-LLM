{
  "problem_idx": 443,
  "task_name": "String Compression",
  "markdown_description": "\nGiven an array of characters `chars`, compress it using the following algorithm:\n\n\nBegin with an empty string `s`. For each group of **consecutive repeating characters** in `chars`:\n\n\n* If the group's length is `1`, append the character to `s`.\n* Otherwise, append the character followed by the group's length.\n\n\nThe compressed string `s` **should not be returned separately**, but instead, be stored **in the input character array `chars`**. Note that group lengths that are `10` or longer will be split into multiple characters in `chars`.\n\n\nAfter you are done **modifying the input array,** return *the new length of the array*.\n\n\nYou must write an algorithm that uses only constant extra space.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n**Output:** Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n**Explanation:** The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** chars = [\"a\"]\n**Output:** Return 1, and the first character of the input array should be: [\"a\"]\n**Explanation:** The only group is \"a\", which remains uncompressed since it's a single character.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n**Output:** Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\n**Explanation:** The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= chars.length <= 2000`\n* `chars[i]` is a lowercase English letter, uppercase English letter, digit, or symbol.\n\n\n",
  "canonical_solution": "class Solution:\n    def compress(self, chars: List[str]) -> int:\n        i, k, n = 0, 0, len(chars)\n        while i < n:\n            j = i + 1\n            while j < n and chars[j] == chars[i]:\n                j += 1\n            chars[k] = chars[i]\n            k += 1\n            if j - i > 1:\n                cnt = str(j - i)\n                for c in cnt:\n                    chars[k] = c\n                    k += 1\n            i = j\n        return k\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def compress(self, chars: List[str]) -> int:\n        i, k, n = 0, 0, len(chars)\n        while i < n:\n            j = i + 1\n            while j < n and chars[j] == chars[i]:\n                j += 1\n            chars[k] = chars[i]\n            k += 1\n            if j - i > 1:\n                cnt = str(j - i)\n                for c in cnt:\n                    chars[k] = c\n                    k += 1\n            i = j\n        return k\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random character list\n    chars = random.choices(string.ascii_letters + string.digits + string.punctuation, k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.compress(chars)\n\n    return chars, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        chars, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.compress(chars) == expected_result\n        print(f\"assert solution.compress({chars}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.compress({chars}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.compress(['3', '%', '2', 'w', 'C', '4', 'o']) == 7\nassert solution.compress(['J', 'K', '3', '#', 'n', 'c', 'L']) == 7\nassert solution.compress(['O', 'J', '|', 'E', '[']) == 5\nassert solution.compress(['H', 'A', ',', 'w', '&']) == 5\nassert solution.compress(['\\\\', 'f', '{', 'e', 'h', '_', 'v', 'C', ':']) == 9\nassert solution.compress(['u', '&', ';', 'G']) == 4\nassert solution.compress(['m', 'L']) == 2\nassert solution.compress(['*', '5', 'l', 't', 'K', ',', 'j', 's', 'J']) == 9\nassert solution.compress(['b', 'c', 'A', ':', 'T', 'C']) == 6\nassert solution.compress(['3', 'D']) == 2\nassert solution.compress(['!', '7', '8']) == 3\nassert solution.compress(['v']) == 1\nassert solution.compress(['K', '|', 'F', 'i']) == 4\nassert solution.compress(['$', '[', 'X', '\\\\', '?']) == 5\nassert solution.compress(['{', '=', 'E', 'u', 'T', 'y', 's', '(', 'W', '2']) == 10\nassert solution.compress([',', 'A', 'z', 'u', 'P', 'S', 'r']) == 7\nassert solution.compress(['w', 'U']) == 2\nassert solution.compress(['h', '\\\\', 'U', 's', '&', '8', 'K', 'E', 'L', 'K']) == 10\nassert solution.compress(['3', '#', 'b', 'I', '!', 'D', 'O', 'j']) == 8\nassert solution.compress(['Y', '_', 'Z', '*', 'Z', '8', 'i', 'E', '.']) == 9\nassert solution.compress([\"'\", 'n', 'U', '~', '%']) == 5\nassert solution.compress(['y', 'm', ':', 'A', 'e', '!', '_', '~']) == 8\nassert solution.compress(['7', 'd', 'x', '=', '#', 'l', 'g', '>', '-']) == 9\nassert solution.compress(['9', 'B', 'u']) == 3\nassert solution.compress([';', '^', '9', '\\\\', 'P', ':', 'd', '@', '%', ']']) == 10\nassert solution.compress(['h', '~', 'B', '<', 'z', 'g', 'N']) == 7\nassert solution.compress(['C', 'k', ')', '#', '^', 'l', 'J']) == 7\nassert solution.compress(['1', 'U', 'Y', 'T', 'o']) == 5\nassert solution.compress(['_', 'U']) == 2\nassert solution.compress(['[', 'E', 'e', 'B', 'b']) == 5\nassert solution.compress(['_']) == 1\nassert solution.compress(['{', 'd', 'A', 'Z', '@']) == 5\nassert solution.compress(['2', 'H', 'B', '0', '>', 'v', 'j', 'S', 'n', 'N']) == 10\nassert solution.compress(['[', '&', '\\\\']) == 3\nassert solution.compress(['J', 'W', '+', '&', '}', 't', ';', '4', 'V', 'o']) == 10\nassert solution.compress(['\\\\', 'P']) == 2\nassert solution.compress(['M', '(', 'n', 'N', '$', '_', 'i', '9', 'I']) == 9\nassert solution.compress(['#', '4']) == 2\nassert solution.compress(['{', '0', '#', 'a', 'H', 'm', '~', 'Q']) == 8\nassert solution.compress(['C', 'c', '{', 'n', 'R', 'a', '1']) == 7\nassert solution.compress([';', 'v', '`']) == 3\nassert solution.compress(['$', 'E', 'H', 'l', 'X', 'C']) == 6\nassert solution.compress(['l', 'V', 'C', '9', 'l', '_', 'j']) == 7\nassert solution.compress(['6', 'j']) == 2\nassert solution.compress(['d', 'O', 'B', '4']) == 4\nassert solution.compress(['+']) == 1\nassert solution.compress(['_', \"'\", 'U', '+', '4', 'M', '~']) == 7\nassert solution.compress(['L', '/', '}', 'X', 'Y', '*', ';', '/']) == 8\nassert solution.compress(['\\\\', 'X', 'S', '1', '5']) == 5\nassert solution.compress(['/', 'G', 'c']) == 3\nassert solution.compress(['1', '|', '&', 'n', ')']) == 5\nassert solution.compress(['[', 'w', 'K', 'Q', 'G', 's', '7', ';', 'A', '4']) == 10\nassert solution.compress(['S', '2', '%', '9', '1', '>', '4']) == 7\nassert solution.compress(['i', '=', 'U', '.', 't']) == 5\nassert solution.compress(['X', 'T', 'r']) == 3\nassert solution.compress(['J']) == 1\nassert solution.compress(['P', '>']) == 2\nassert solution.compress(['@', '^', 'U', \"'\", '^', 'h', 'J', 'W', 'j']) == 9\nassert solution.compress(['n', 'C', 'U', '|', '&']) == 5\nassert solution.compress(['o', '\\\\', 'V', 'G', 'K']) == 5\nassert solution.compress(['h', '*', 'O', ';', '&', 'S', 'Z', '5']) == 8\nassert solution.compress(['y', 'Z', 'a', '3', '&', 'a', '|', '5', 'F']) == 9\nassert solution.compress(['Y', '-', 'U', 'R', '&', 'i', 'L']) == 7\nassert solution.compress(['l', 'V', 'w', '7', 'a', ']', '3', 'L', 'T']) == 9\nassert solution.compress(['#', 'V', ']', '$', 'L', '}']) == 6\nassert solution.compress(['8', 'O', '+', ':', 'J', '|', 'P', '9']) == 8\nassert solution.compress(['8', '?', '*', '\\\\', 'I', 'O', 'f', 'W', '4']) == 9\nassert solution.compress(['!', 'J']) == 2\nassert solution.compress(['{']) == 1\nassert solution.compress(['(', '4', '+', 'e', 'Z', '#', 'k', 'e']) == 8\nassert solution.compress(['N', 'U', 'V', '!', 'f']) == 5\nassert solution.compress(['d', 'H', 'e', 'R', 'b', '~', '`', ';']) == 8\nassert solution.compress(['X', 'N', '&']) == 3\nassert solution.compress(['X', 'i', 'l', ']', '7', 'e']) == 6\nassert solution.compress(['H']) == 1\nassert solution.compress(['7', 'K', '-', '\\\\', 'w', '4', 'a']) == 7\nassert solution.compress(['[', 'S']) == 2\nassert solution.compress(['c', 'a', '(', 'q', 't', 'R', ']', 'I']) == 8\nassert solution.compress(['E', 'l']) == 2\nassert solution.compress(['h', '\\\\']) == 2\nassert solution.compress(['N', 's', 'P', 'H', 'b']) == 5\nassert solution.compress(['N', \"'\", '7']) == 3\nassert solution.compress(['J', 'C', ')', 'x', 'u', 'n', 'M', 'w', 'k']) == 9\nassert solution.compress(['8', '1', 'v', 'G', '.', 'D', ':', 'w', 'Y']) == 9\nassert solution.compress(['=', 'n', 'I', ',']) == 4\nassert solution.compress(['L', 'K', 'e', 'h', '`', 'Q', 'H']) == 7\nassert solution.compress(['(', 'D', '6', 'V', '5', 'q', '>']) == 7\nassert solution.compress(['L', ':', 'Z', 'P', 'J', '!', '>', 'I', 'U']) == 9\nassert solution.compress(['2']) == 1\nassert solution.compress(['r', 'B', 'A', 'u', 'E', '9', 'f', '}', '{', '#']) == 10\nassert solution.compress(['x', 'i', 'G', 'J', ')']) == 5\nassert solution.compress(['E', ';', '7', '/', 'e', 'm', 'F']) == 7\nassert solution.compress(['4', 'Q']) == 2\nassert solution.compress(['C', '#', 'V', 'x', 'U', 'b']) == 6\nassert solution.compress(['v', '$', 'Z', 'O', 'Y', '2', 'q', 't', '*']) == 9\nassert solution.compress(['0', 'h', 'X', 'P', 's']) == 5\nassert solution.compress(['C', 'U', '$', 'm', '<', 'R']) == 6\nassert solution.compress(['m', '.', 'Z', 'K', '-']) == 5\nassert solution.compress(['t', 'n', '0', '3']) == 4\nassert solution.compress(['^', 'C', ':', 'k']) == 4",
  "inefficient_solution": "class Solution:\n    def compress(self, chars: List[str]) -> int:\n        output = [\"\"] * len(chars)\n        i, k, n = 0, 0, len(chars)\n        while i < n:\n            j = i + 1\n            group = []\n            while j < n and chars[j] == chars[i]:\n                group.append(chars[j])\n                j += 1\n            output[k] = chars[i]\n            k += 1\n            if len(group) > 1:\n                for c in str(len(group)):\n                    output[k] = c\n                    k += 1\n            i = j\n        chars[:] = output\n        return k",
  "is_python": true
}