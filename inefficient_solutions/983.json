{
  "problem_idx": 983,
  "task_name": "Minimum Cost For Tickets",
  "markdown_description": "\nYou have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array `days`. Each day is an integer from `1` to `365`.\n\n\nTrain tickets are sold in **three different ways**:\n\n\n* a **1-day** pass is sold for `costs[0]` dollars,\n* a **7-day** pass is sold for `costs[1]` dollars, and\n* a **30-day** pass is sold for `costs[2]` dollars.\n\n\nThe passes allow that many days of consecutive travel.\n\n\n* For example, if we get a **7-day** pass on day `2`, then we can travel for `7` days: `2`, `3`, `4`, `5`, `6`, `7`, and `8`.\n\n\nReturn *the minimum number of dollars you need to travel every day in the given list of days*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** days = [1,4,6,7,8,20], costs = [2,7,15]\n**Output:** 11\n**Explanation:** For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = 2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = 7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = 2, which covered day 20.\nIn total, you spent 11 and covered all the days of your travel.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\n**Output:** 17\n**Explanation:** For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = 15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = 2 which covered day 31.\nIn total, you spent 17 and covered all the days of your travel.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= days.length <= 365`\n* `1 <= days[i] <= 365`\n* `days` is in strictly increasing order.\n* `costs.length == 3`\n* `1 <= costs[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        @cache\n        def dfs(i):\n            if i >= len(days):\n                return 0\n            res = inf\n            for c, d in zip(costs, [1, 7, 30]):\n                j = bisect_left(days, days[i] + d)\n                res = min(res, c + dfs(j))\n            return res\n\n        return dfs(0)\n",
  "test_case_generator": "\nimport random\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random days list\n    days = sorted(random.sample(range(1, 366), random.randint(1, 10)))\n    \n    # Generate random costs list\n    costs = [random.randint(1, 1000) for _ in range(3)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.mincostTickets(days, costs)\n\n    return days, costs, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        days, costs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.mincostTickets(days, costs) == expected_result\n        print(f\"assert solution.mincostTickets({days}, {costs}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.mincostTickets({days}, {costs}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.mincostTickets([20, 22, 28, 34, 83, 185, 289], [132, 844, 433]) == 829\nassert solution.mincostTickets([288], [629, 993, 397]) == 397\nassert solution.mincostTickets([19, 44, 82, 102, 132, 144, 146, 185, 201, 243], [492, 32, 866]) == 288\nassert solution.mincostTickets([40], [158, 747, 975]) == 158\nassert solution.mincostTickets([1, 133, 278, 329], [27, 502, 220]) == 108\nassert solution.mincostTickets([135, 272], [928, 142, 844]) == 284\nassert solution.mincostTickets([94, 199, 201, 238], [819, 181, 776]) == 543\nassert solution.mincostTickets([239], [164, 840, 36]) == 36\nassert solution.mincostTickets([88, 103, 157, 165, 198, 208, 275, 282], [483, 218, 921]) == 1744\nassert solution.mincostTickets([69], [763, 838, 109]) == 109\nassert solution.mincostTickets([98, 115, 221, 239, 255], [592, 679, 789]) == 2170\nassert solution.mincostTickets([15, 92, 130, 338], [574, 809, 562]) == 2248\nassert solution.mincostTickets([42, 113, 198, 214, 324, 337, 350], [677, 104, 848]) == 728\nassert solution.mincostTickets([52, 64, 132, 139, 240, 272, 319], [8, 45, 827]) == 56\nassert solution.mincostTickets([67, 125, 180, 204, 224, 263, 324, 343], [135, 283, 601]) == 1080\nassert solution.mincostTickets([16, 20, 34, 205, 254, 308, 351], [788, 383, 185]) == 925\nassert solution.mincostTickets([12, 105, 113, 162, 241, 283], [617, 141, 238]) == 802\nassert solution.mincostTickets([56, 105, 109, 164, 328, 349], [787, 893, 247]) == 988\nassert solution.mincostTickets([53, 92, 103, 270], [824, 607, 768]) == 1982\nassert solution.mincostTickets([21, 191], [881, 600, 896]) == 1200\nassert solution.mincostTickets([66, 119, 280, 305, 317, 322, 348], [698, 567, 658]) == 2926\nassert solution.mincostTickets([12, 53, 129, 362], [640, 101, 47]) == 188\nassert solution.mincostTickets([195], [684, 890, 757]) == 684\nassert solution.mincostTickets([10, 79, 112, 119, 161, 213, 291, 294, 306, 334], [120, 507, 351]) == 1191\nassert solution.mincostTickets([103, 163, 194, 212, 283, 348], [477, 401, 807]) == 2406\nassert solution.mincostTickets([13, 121, 128, 260, 296, 311, 328, 331, 359], [142, 124, 723]) == 992\nassert solution.mincostTickets([1, 66, 193, 234, 246, 254, 324], [597, 867, 623]) == 3011\nassert solution.mincostTickets([36, 77, 93, 114, 176, 283, 315, 349], [301, 724, 975]) == 2408\nassert solution.mincostTickets([10, 21, 195, 285, 337], [373, 229, 588]) == 1145\nassert solution.mincostTickets([85, 106, 157, 174, 304], [289, 756, 154]) == 462\nassert solution.mincostTickets([268], [821, 502, 988]) == 502\nassert solution.mincostTickets([35, 104, 209, 344], [457, 899, 190]) == 760\nassert solution.mincostTickets([14, 95], [603, 854, 840]) == 1206\nassert solution.mincostTickets([13, 21, 170, 232, 268], [213, 741, 763]) == 1065\nassert solution.mincostTickets([283], [327, 435, 586]) == 327\nassert solution.mincostTickets([276], [137, 877, 173]) == 137\nassert solution.mincostTickets([235, 300, 365], [149, 661, 696]) == 447\nassert solution.mincostTickets([109, 172, 357], [563, 796, 647]) == 1689\nassert solution.mincostTickets([10, 40, 81, 86, 155, 193, 233, 345, 358], [915, 483, 161]) == 1127\nassert solution.mincostTickets([69, 151, 239, 281], [134, 24, 414]) == 96\nassert solution.mincostTickets([35], [992, 51, 387]) == 51\nassert solution.mincostTickets([121, 355], [954, 780, 326]) == 652\nassert solution.mincostTickets([16, 26, 34, 152, 154, 175, 186], [987, 196, 973]) == 1176\nassert solution.mincostTickets([4, 143, 156, 214, 276], [351, 548, 13]) == 52\nassert solution.mincostTickets([7, 9, 47, 248, 326, 343, 350], [734, 620, 907]) == 2767\nassert solution.mincostTickets([20, 44, 234], [554, 76, 470]) == 228\nassert solution.mincostTickets([158, 163, 306], [486, 688, 917]) == 1174\nassert solution.mincostTickets([80], [246, 979, 811]) == 246\nassert solution.mincostTickets([34, 87, 89, 137, 140, 195, 293, 296, 317, 341], [507, 133, 37]) == 222\nassert solution.mincostTickets([78, 120, 152, 156, 208, 273, 286, 341, 349], [494, 604, 629]) == 3344\nassert solution.mincostTickets([4, 25], [208, 476, 217]) == 217\nassert solution.mincostTickets([34, 37, 55, 56, 138, 192, 291, 336], [718, 325, 764]) == 1950\nassert solution.mincostTickets([110], [244, 272, 768]) == 244\nassert solution.mincostTickets([54, 80, 234, 242, 279, 345], [4, 395, 719]) == 24\nassert solution.mincostTickets([54, 98, 124, 168, 280, 313, 348, 351], [317, 267, 101]) == 606\nassert solution.mincostTickets([69, 132], [261, 8, 434]) == 16\nassert solution.mincostTickets([5, 10, 15, 50, 60, 108, 148, 330, 356, 361], [385, 805, 653]) == 3114\nassert solution.mincostTickets([36, 42, 61, 128, 139, 165, 167, 280, 340], [408, 727, 973]) == 3170\nassert solution.mincostTickets([39, 64, 81, 90, 118, 148, 229, 242, 256, 365], [894, 270, 729]) == 2538\nassert solution.mincostTickets([3, 160, 188, 193, 219, 230, 264, 272, 274, 312], [902, 506, 347]) == 2082\nassert solution.mincostTickets([75, 86, 90, 94, 357], [24, 456, 475]) == 120\nassert solution.mincostTickets([7, 8, 187], [216, 418, 909]) == 634\nassert solution.mincostTickets([117, 194, 199, 281, 313, 343], [805, 222, 702]) == 1110\nassert solution.mincostTickets([101, 233, 298], [578, 226, 183]) == 549\nassert solution.mincostTickets([67, 88, 277], [561, 587, 509]) == 1018\nassert solution.mincostTickets([5], [841, 186, 217]) == 186\nassert solution.mincostTickets([91, 172, 213, 335], [390, 981, 316]) == 1264\nassert solution.mincostTickets([26, 36, 86, 180, 229, 248, 250, 328], [130, 952, 750]) == 1040\nassert solution.mincostTickets([142, 216, 285, 355], [949, 837, 611]) == 2444\nassert solution.mincostTickets([16, 45, 59, 62, 93, 147, 197, 230, 233, 313], [113, 535, 649]) == 1130\nassert solution.mincostTickets([39, 46, 128, 140, 145, 248, 260], [725, 5, 482]) == 30\nassert solution.mincostTickets([6, 38, 54, 105, 201, 210, 251, 278, 329, 334], [110, 595, 675]) == 1100\nassert solution.mincostTickets([8, 15, 79, 260, 333], [605, 202, 862]) == 1010\nassert solution.mincostTickets([122, 180, 261], [903, 193, 122]) == 366\nassert solution.mincostTickets([76, 216], [284, 569, 14]) == 28\nassert solution.mincostTickets([25, 26, 64, 79, 155, 316, 335, 358], [902, 306, 455]) == 1828\nassert solution.mincostTickets([95, 287, 320], [548, 368, 382]) == 1104\nassert solution.mincostTickets([53, 130, 207, 255, 329], [456, 155, 985]) == 775\nassert solution.mincostTickets([31, 139], [343, 170, 112]) == 224\nassert solution.mincostTickets([36, 83, 128, 163, 170, 175, 209, 256, 269, 342], [896, 800, 326]) == 2282\nassert solution.mincostTickets([132, 159, 171, 195, 220, 226, 302], [210, 635, 842]) == 1470\nassert solution.mincostTickets([240, 290, 324, 329, 332], [73, 252, 76]) == 222\nassert solution.mincostTickets([10, 71, 145, 215, 303, 348], [284, 304, 48]) == 288\nassert solution.mincostTickets([32, 59, 138, 144, 167, 236, 361], [690, 555, 799]) == 2708\nassert solution.mincostTickets([47, 63, 270, 308], [431, 483, 460]) == 1322\nassert solution.mincostTickets([54, 55, 88, 94, 190, 197, 237, 254, 315], [43, 568, 689]) == 387\nassert solution.mincostTickets([214, 256], [581, 64, 345]) == 128\nassert solution.mincostTickets([86, 107, 215, 230, 252, 267], [631, 221, 248]) == 744\nassert solution.mincostTickets([79], [806, 483, 813]) == 483\nassert solution.mincostTickets([167, 214, 234, 236, 245, 259, 281, 315, 326, 357], [78, 525, 926]) == 780\nassert solution.mincostTickets([11, 216, 227, 232, 285, 287], [395, 674, 81]) == 243\nassert solution.mincostTickets([17, 53, 101, 103, 111, 118, 211, 234], [400, 577, 324]) == 1296\nassert solution.mincostTickets([3, 73, 80, 110, 167, 206, 248, 282, 316, 354], [747, 127, 302]) == 1270\nassert solution.mincostTickets([107, 151, 175, 185, 279, 312, 361], [899, 582, 139]) == 834\nassert solution.mincostTickets([228, 277], [460, 614, 191]) == 382\nassert solution.mincostTickets([1, 16, 35, 60, 97, 118, 129, 195, 356], [209, 87, 710]) == 783\nassert solution.mincostTickets([2, 137, 180, 219, 248, 261, 278, 338], [584, 965, 444]) == 2664\nassert solution.mincostTickets([82, 175, 192, 332], [698, 613, 973]) == 2199\nassert solution.mincostTickets([26, 144, 358], [886, 951, 550]) == 1650\nassert solution.mincostTickets([55, 109, 208, 280, 311], [579, 234, 673]) == 1170",
  "inefficient_solution": "class Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        def dfs(i):\n            if i >= len(days):\n                return 0\n            n = len(days)\n            res = 10**9\n            for c, d in zip(costs, [1, 7, 30]):\n                j = 0\n                while j < n and days[j] < days[i] + d:\n                    j += 1\n                res = min(res, c + dfs(j))\n            return res\n        n = len(days)\n        res = [0] * (n + 1)\n        for i in range(n):\n            res[i+1] = res[i] + dfs(i)\n        return res[n]",
  "is_python": true
}