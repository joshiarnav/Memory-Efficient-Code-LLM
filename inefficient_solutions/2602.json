{
  "problem_idx": 2602,
  "task_name": "Minimum Operations to Make All Array Elements Equal",
  "markdown_description": "\nYou are given an array `nums` consisting of positive integers.\n\n\nYou are also given an integer array `queries` of size `m`. For the `ith` query, you want to make all of the elements of `nums` equal to `queries[i]`. You can perform the following operation on the array **any** number of times:\n\n\n* **Increase** or **decrease** an element of the array by `1`.\n\n\nReturn *an array* `answer` *of size* `m` *where* `answer[i]` *is the **minimum** number of operations to make all elements of* `nums` *equal to* `queries[i]`.\n\n\n**Note** that after each query the array is reset to its original state.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,6,8], queries = [1,5]\n**Output:** [14,10]\n**Explanation:** For the first query we can do the following operations:\n- Decrease nums[0] 2 times, so that nums = [1,1,6,8].\n- Decrease nums[2] 5 times, so that nums = [1,1,1,8].\n- Decrease nums[3] 7 times, so that nums = [1,1,1,1].\nSo the total number of operations for the first query is 2 + 5 + 7 = 14.\nFor the second query we can do the following operations:\n- Increase nums[0] 2 times, so that nums = [5,1,6,8].\n- Increase nums[1] 4 times, so that nums = [5,5,6,8].\n- Decrease nums[2] 1 time, so that nums = [5,5,5,8].\n- Decrease nums[3] 3 times, so that nums = [5,5,5,5].\nSo the total number of operations for the second query is 2 + 4 + 1 + 3 = 10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,9,6,3], queries = [10]\n**Output:** [20]\n**Explanation:** We can increase each value in the array to 10. The total number of operations will be 8 + 1 + 4 + 7 = 20.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `m == queries.length`\n* `1 <= n, m <= 105`\n* `1 <= nums[i], queries[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minOperations(self, nums: List[int], queries: List[int]) -> List[int]:\n        nums.sort()\n        s = list(accumulate(nums, initial=0))\n        ans = []\n        for x in queries:\n            i = bisect_left(nums, x + 1)\n            t = s[-1] - s[i] - (len(nums) - i) * x\n            i = bisect_left(nums, x)\n            t += x * i - s[i]\n            ans.append(t)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom itertools import accumulate\nfrom bisect import bisect_left\n\nclass Solution:\n    def minOperations(self, nums: List[int], queries: List[int]) -> List[int]:\n        nums.sort()\n        s = list(accumulate(nums, initial=0))\n        ans = []\n        for x in queries:\n            i = bisect_left(nums, x + 1)\n            t = s[-1] - s[i] - (len(nums) - i) * x\n            i = bisect_left(nums, x)\n            t += x * i - s[i]\n            ans.append(t)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate random queries\n    queries = random.sample(range(1, 101), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minOperations(nums, queries)\n\n    return nums, queries, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, queries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minOperations(nums, queries) == expected_result\n        print(f\"assert solution.minOperations({nums}, {queries}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.minOperations({nums}, {queries}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minOperations([25, 43, 80], [43, 30, 42]) == [55, 68, 56]\nassert solution.minOperations([7, 15, 18, 25, 33, 40, 41, 68, 80, 99], [42, 19, 83, 12, 28, 43, 18, 6, 59, 69]) == [236, 270, 436, 316, 240, 240, 274, 366, 304, 346]\nassert solution.minOperations([29, 56, 88], [96, 23, 46, 43]) == [115, 104, 69, 72]\nassert solution.minOperations([7, 18, 53, 58, 67, 74, 99], [75, 5, 9, 50, 46]) == [197, 341, 317, 176, 188]\nassert solution.minOperations([10, 33, 59, 70, 83, 84, 95], [78, 48, 11, 18, 68, 40, 34, 44]) == [168, 204, 359, 324, 162, 228, 246, 216]\nassert solution.minOperations([1, 14, 42, 61, 72, 91], [89]) == [257]\nassert solution.minOperations([6, 18, 38, 40, 56, 92], [24, 77, 63, 94]) == [154, 242, 186, 314]\nassert solution.minOperations([3, 18, 37, 50, 55, 91], [74, 97, 52, 15, 8, 25, 48, 46]) == [224, 328, 142, 188, 216, 162, 138, 138]\nassert solution.minOperations([11, 12, 26, 35, 48, 66, 70, 78, 98], [49, 44, 6]) == [229, 232, 390]\nassert solution.minOperations([1, 3, 5, 14, 60, 65, 84, 86, 90, 91], [75, 34, 45, 1, 52, 56, 13, 50, 38, 94]) == [353, 385, 363, 489, 349, 341, 429, 353, 377, 441]\nassert solution.minOperations([23, 56, 97], [46, 24, 71]) == [84, 106, 89]\nassert solution.minOperations([19, 29, 59], [51]) == [62]\nassert solution.minOperations([38, 52, 63, 76, 78, 94, 97, 98, 99], [61, 83, 56, 85, 84, 77]) == [210, 164, 235, 166, 165, 160]\nassert solution.minOperations([22, 30, 47, 53, 65, 76, 90], [79, 63, 72, 87]) == [192, 142, 165, 232]\nassert solution.minOperations([8, 24, 31, 34, 40, 52, 61, 73, 85], [56, 66, 20, 8]) == [198, 238, 252, 336]\nassert solution.minOperations([16, 24, 54, 58, 60, 73, 76, 83], [81, 79, 50, 43, 38, 53]) == [208, 196, 164, 192, 212, 152]\nassert solution.minOperations([15, 19, 38, 44, 46, 49, 53, 58, 59, 65], [14, 65, 88, 83, 4, 98]) == [306, 204, 434, 384, 406, 534]\nassert solution.minOperations([16, 59], [99, 43, 97, 65, 46, 84]) == [123, 43, 119, 55, 43, 93]\nassert solution.minOperations([30, 43, 44, 54, 60, 67, 84, 85, 93], [36, 35, 6, 66, 85, 94, 38, 83]) == [248, 255, 506, 164, 221, 286, 234, 213]\nassert solution.minOperations([8, 15, 24, 29, 40, 49, 82, 84], [82, 98, 68, 73, 52, 89]) == [329, 453, 273, 293, 209, 381]\nassert solution.minOperations([6, 8, 9, 27, 28, 34, 38, 48, 53, 55], [31, 43, 3, 99, 78, 79, 87, 38, 96, 71]) == [150, 178, 276, 684, 474, 484, 564, 158, 654, 404]\nassert solution.minOperations([14, 16, 51, 92], [26, 59, 43, 41, 40, 83]) == [113, 129, 113, 113, 113, 177]\nassert solution.minOperations([3, 9, 66, 84], [53, 30, 7, 92]) == [138, 138, 142, 206]\nassert solution.minOperations([5, 6, 13, 42, 62, 65, 93, 100], [72, 33, 75, 30, 74, 81]) == [288, 272, 300, 278, 296, 324]\nassert solution.minOperations([1, 29, 36, 40, 48, 56, 63, 72], [57, 30, 94, 90, 83, 91, 22, 68]) == [153, 165, 407, 375, 319, 383, 211, 207]\nassert solution.minOperations([4, 14, 18, 20, 76, 100], [16, 65, 43]) == [164, 250, 206]\nassert solution.minOperations([3, 33, 43, 57, 80], [1, 96, 22, 84, 13, 27, 31, 23, 42]) == [211, 264, 144, 204, 171, 129, 117, 141, 102]\nassert solution.minOperations([26, 63, 67, 77, 90], [91]) == [132]\nassert solution.minOperations([26, 27, 76, 90, 95], [82, 38, 37, 27, 9, 56]) == [138, 170, 171, 181, 269, 152]\nassert solution.minOperations([8, 11, 21, 22, 61, 74], [51, 34]) == [175, 141]\nassert solution.minOperations([3, 12, 16, 46, 48, 65, 90], [100, 5, 86, 71, 6, 36, 77]) == [420, 249, 330, 255, 244, 182, 285]\nassert solution.minOperations([21, 44, 45, 55, 68, 79, 82, 84], [87]) == [218]\nassert solution.minOperations([4, 36], [45, 20, 90, 85]) == [50, 32, 140, 130]\nassert solution.minOperations([9, 27, 33, 76, 81, 94, 98], [60, 64, 79, 15, 17, 22]) == [220, 216, 207, 325, 315, 290]\nassert solution.minOperations([24, 39, 51, 57, 86, 91, 95], [85, 90, 17, 28, 40, 97]) == [186, 199, 324, 255, 197, 236]\nassert solution.minOperations([12, 14, 24, 60, 65, 100], [78, 12, 9, 16, 52, 10]) == [237, 203, 221, 191, 175, 215]\nassert solution.minOperations([11, 13, 20, 51, 53, 70, 76, 82, 91], [67, 90, 99, 93, 70]) == [238, 345, 424, 370, 241]\nassert solution.minOperations([7, 29, 36, 39], [54, 4, 7, 72, 23]) == [105, 95, 83, 177, 51]\nassert solution.minOperations([30, 33], [96, 80]) == [129, 97]\nassert solution.minOperations([13, 24, 44, 51, 74, 95], [10, 23]) == [241, 183]\nassert solution.minOperations([6, 7, 13, 16, 42, 46, 82, 92, 98], [4, 10, 3, 63, 62, 28, 12, 94, 5]) == [366, 326, 375, 331, 328, 290, 316, 452, 357]\nassert solution.minOperations([27, 29, 33, 59, 71, 77, 78, 82, 84], [15, 13, 66, 3, 28, 29, 24, 46]) == [405, 423, 178, 513, 290, 283, 324, 224]\nassert solution.minOperations([22, 25, 61, 70, 77, 79, 93, 95], [81, 44]) == [178, 252]\nassert solution.minOperations([20, 21, 45], [91, 32, 13, 28, 76, 63]) == [187, 36, 47, 32, 142, 103]\nassert solution.minOperations([24, 46, 48, 75], [15, 37, 73, 99, 7, 64, 32, 3]) == [133, 71, 103, 203, 165, 85, 81, 181]\nassert solution.minOperations([11, 17, 29, 54, 80], [17, 10, 30, 66, 68, 25, 87]) == [118, 141, 107, 167, 173, 110, 244]\nassert solution.minOperations([1, 14, 26, 30, 31, 33, 45, 69, 87], [94, 18, 24, 22, 39, 60]) == [510, 216, 186, 196, 183, 276]\nassert solution.minOperations([9, 26, 43, 68, 72], [64]) == [126]\nassert solution.minOperations([21, 42, 68, 93], [74, 86, 66, 38, 99, 80, 78, 62, 91]) == [110, 134, 98, 106, 172, 122, 118, 98, 144]\nassert solution.minOperations([12, 41, 45, 81], [30, 95, 41, 38, 9, 4]) == [95, 201, 73, 79, 143, 163]\nassert solution.minOperations([16, 20, 42, 45, 63, 64, 74, 75, 89], [73, 15, 5, 33, 99, 21, 6]) == [207, 353, 443, 251, 403, 311, 434]\nassert solution.minOperations([47, 61, 66], [55, 85, 16, 82]) == [25, 81, 126, 72]\nassert solution.minOperations([24, 54, 57, 69, 98], [18, 2, 80]) == [212, 292, 134]\nassert solution.minOperations([2, 5, 6, 20, 42, 75, 76, 83, 86], [71, 32, 13, 7, 65, 3]) == [316, 297, 330, 348, 310, 370]\nassert solution.minOperations([17, 19, 21, 22, 41, 44, 54, 87, 94], [79, 39, 73, 55, 87]) == [358, 202, 328, 238, 398]\nassert solution.minOperations([4, 9, 21, 24, 29, 35, 41, 54, 66, 78], [24, 1, 33, 78, 62, 72]) == [197, 351, 187, 419, 299, 371]\nassert solution.minOperations([41, 74], [86, 58, 48, 94, 24, 57, 47]) == [57, 33, 33, 73, 67, 33, 33]\nassert solution.minOperations([12, 20, 35, 49, 63, 67, 73, 76, 90], [85, 3, 88]) == [290, 458, 311]\nassert solution.minOperations([11, 25, 43, 49, 54, 65, 76], [29, 2, 66, 75, 90]) == [164, 309, 159, 204, 307]\nassert solution.minOperations([15, 30, 60, 61, 62, 72, 74, 76, 82], [93, 25, 83, 88, 19, 30, 79, 50, 16]) == [305, 327, 215, 260, 369, 292, 185, 192, 390]\nassert solution.minOperations([38, 78], [79, 14, 57, 8, 7, 99, 45, 68, 9]) == [42, 88, 40, 100, 102, 82, 40, 40, 98]\nassert solution.minOperations([10, 13, 15, 79, 80, 82, 95], [84, 12, 50, 30, 70, 89, 33]) == [236, 294, 248, 268, 228, 261, 265]\nassert solution.minOperations([7, 27, 43, 52, 67, 96], [72, 22, 41, 24, 87, 67, 73, 79, 47, 98]) == [188, 190, 142, 182, 248, 168, 192, 216, 138, 296]\nassert solution.minOperations([7, 36, 73, 81, 92, 95], [3, 22, 84, 34, 75, 26, 32, 28]) == [366, 282, 158, 234, 152, 266, 242, 258]\nassert solution.minOperations([6, 37, 39, 60, 63], [40]) == [81]\nassert solution.minOperations([22, 30, 36, 47, 63, 64, 68, 73, 76, 92], [48, 21, 35, 65, 27, 66, 45, 14, 16]) == [205, 361, 257, 177, 311, 179, 215, 431, 411]\nassert solution.minOperations([66, 75], [67, 22, 1, 58, 16, 94, 68]) == [9, 97, 139, 25, 109, 47, 9]\nassert solution.minOperations([19, 21, 23, 25, 32, 48, 55, 63, 66, 74], [46, 69]) == [186, 274]\nassert solution.minOperations([3, 6, 35, 37, 61, 91], [87, 88, 38, 73, 22]) == [297, 301, 147, 241, 171]\nassert solution.minOperations([10, 12, 42, 45, 72, 100], [90, 96, 57, 23, 55, 15]) == [279, 303, 177, 191, 173, 207]\nassert solution.minOperations([19, 46, 68], [6]) == [115]\nassert solution.minOperations([1, 8, 33, 44, 59, 61, 63, 69, 84, 88], [100, 79]) == [490, 308]\nassert solution.minOperations([11, 19, 61, 71, 73], [83, 1, 48, 11, 27, 38, 78]) == [180, 230, 127, 180, 148, 137, 155]\nassert solution.minOperations([2, 82], [2, 21, 67, 94, 16, 40, 11, 66]) == [80, 80, 80, 104, 80, 80, 80, 80]\nassert solution.minOperations([4, 17, 19, 53, 74, 77, 99], [20, 21, 68, 76, 26, 96, 22, 90, 53]) == [243, 242, 225, 237, 237, 335, 241, 305, 210]\nassert solution.minOperations([12, 23, 36, 50], [83, 77, 90, 76, 7, 80]) == [211, 187, 239, 183, 93, 199]\nassert solution.minOperations([18, 30, 34, 39, 79, 82], [69, 61, 2, 85]) == [178, 162, 270, 228]\nassert solution.minOperations([11, 39, 54, 61, 64, 79, 84, 87, 91, 92], [76, 98, 55, 25, 19]) == [204, 318, 234, 440, 488]\nassert solution.minOperations([21, 28, 38, 72, 87, 89], [11, 65, 85, 20, 4, 94]) == [269, 161, 187, 215, 311, 229]\nassert solution.minOperations([8, 9, 12, 14, 27, 34, 54, 87], [22, 75, 63, 42, 50, 7]) == [159, 379, 307, 205, 237, 189]\nassert solution.minOperations([8, 67, 78, 86], [70, 8, 95, 91, 40, 11, 13]) == [89, 207, 141, 125, 143, 201, 197]\nassert solution.minOperations([1, 44, 64, 89], [37, 6, 90, 79, 57, 5, 72, 73]) == [122, 184, 162, 138, 108, 186, 124, 126]\nassert solution.minOperations([40, 79], [48, 44, 24]) == [39, 39, 71]\nassert solution.minOperations([72, 90], [9]) == [144]\nassert solution.minOperations([1, 3, 10, 25, 48, 71, 76], [78, 68, 33]) == [312, 264, 189]\nassert solution.minOperations([29, 33, 57, 61, 70, 88], [34]) == [146]\nassert solution.minOperations([17, 27, 67, 99], [60, 8, 18, 12, 86]) == [122, 178, 140, 162, 160]\nassert solution.minOperations([5, 30, 62, 67, 92], [10, 2, 82, 88, 75]) == [216, 246, 174, 192, 153]\nassert solution.minOperations([9, 35, 39, 56, 61, 82, 89, 91], [34, 89, 49, 33, 11, 28, 7, 79]) == [240, 254, 198, 246, 378, 276, 406, 220]\nassert solution.minOperations([13, 32, 39, 44, 55, 75, 91], [40, 72]) == [141, 199]\nassert solution.minOperations([12, 19, 38, 73, 84, 94], [42, 54, 74, 8, 71]) == [182, 182, 184, 272, 182]\nassert solution.minOperations([2, 29, 35, 45, 55, 67, 91], [3]) == [305]\nassert solution.minOperations([25, 33, 38, 43, 59, 70, 74, 87, 92], [6, 26, 94, 63, 9, 88, 36]) == [467, 289, 325, 188, 440, 279, 225]\nassert solution.minOperations([50, 75], [69]) == [25]\nassert solution.minOperations([36, 39, 61, 81, 84, 89, 100], [99, 60, 4, 50, 41, 69, 56, 92]) == [205, 160, 462, 190, 217, 149, 172, 170]\nassert solution.minOperations([5, 7, 14, 27, 67], [5, 31, 29]) == [95, 107, 101]\nassert solution.minOperations([22, 37, 38, 48, 54, 55, 62, 79, 85, 97], [18, 72, 50, 84]) == [397, 233, 187, 291]\nassert solution.minOperations([14, 50, 51, 84, 96, 100], [42]) == [199]\nassert solution.minOperations([5, 18, 21, 28, 36, 53, 99], [69]) == [283]\nassert solution.minOperations([8, 33, 69, 72, 82, 84, 90], [21, 95, 1, 82, 79, 70, 49]) == [317, 227, 431, 156, 153, 148, 209]",
  "inefficient_solution": "class Solution:\n    def minOperations(self, nums: List[int], queries: List[int]) -> List[int]:\n        nums.sort()\n        s = list(accumulate(nums, initial=0))\n        result = []\n        for x in queries:\n            y = x + 1\n            temp_nums = [n for n in nums if n >= y]\n            temp_nums.sort()\n            temp_s = list(accumulate(temp_nums, initial=0))\n            t = 0\n            for i in range(len(temp_nums)):\n                if temp_nums[i] <= x:\n                    t += temp_s[i] + (len(temp_nums) - i) * (x - temp_nums[i])\n                    break\n            temp_nums = [n for n in nums if n <= x]\n            temp_nums.sort(reverse=True)\n            temp_s = list(accumulate(temp_nums, initial=0))\n            for i in range(len(temp_nums)):\n                if temp_nums[i] < y:\n                    t += temp_s[i] + (len(temp_nums) - i) * (temp_nums[i] - x)\n                    break\n            result.append(t)\n        return result",
  "is_python": true
}