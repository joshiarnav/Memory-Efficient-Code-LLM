{
  "problem_idx": 1852,
  "task_name": "Distinct Numbers in Each Subarray",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, you are asked to construct the array `ans` of size `n-k+1` where `ans[i]` is the number of **distinct** numbers in the subarray `nums[i:i+k-1] = [nums[i], nums[i+1], ..., nums[i+k-1]]`.\n\n\nReturn *the array* `ans`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,2,2,1,3], k = 3\n**Output:** [3,2,2,2,3]\n**Explanation:** The number of distinct elements in each subarray goes as follows:\n- nums[0:2] = [1,2,3] so ans[0] = 3\n- nums[1:3] = [2,3,2] so ans[1] = 2\n- nums[2:4] = [3,2,2] so ans[2] = 2\n- nums[3:5] = [2,2,1] so ans[3] = 2\n- nums[4:6] = [2,1,3] so ans[4] = 3\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1,2,3,4], k = 4\n**Output:** [1,2,3,4]\n**Explanation:** The number of distinct elements in each subarray goes as follows:\n- nums[0:3] = [1,1,1,1] so ans[0] = 1\n- nums[1:4] = [1,1,1,2] so ans[1] = 2\n- nums[2:5] = [1,1,2,3] so ans[2] = 3\n- nums[3:6] = [1,2,3,4] so ans[3] = 4\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def distinctNumbers(self, nums: List[int], k: int) -> List[int]:\n        cnt = Counter(nums[:k])\n        ans = [len(cnt)]\n        for i in range(k, len(nums)):\n            cnt[nums[i]] += 1\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]] == 0:\n                cnt.pop(nums[i - k])\n            ans.append(len(cnt))\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def distinctNumbers(self, nums, k):\n        cnt = Counter(nums[:k])\n        ans = [len(cnt)]\n        for i in range(k, len(nums)):\n            cnt[nums[i]] += 1\n            cnt[nums[i - k]] -= 1\n            if cnt[nums[i - k]] == 0:\n                cnt.pop(nums[i - k])\n            ans.append(len(cnt))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random k value\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.distinctNumbers(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.distinctNumbers(nums, k) == expected_result\n        print(f\"assert solution.distinctNumbers({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.distinctNumbers({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.distinctNumbers([74, 93, 48, 40, 86, 84, 68], 7) == [7]\nassert solution.distinctNumbers([46, 45], 1) == [1, 1]\nassert solution.distinctNumbers([16, 24, 55, 87, 44, 60, 19, 65], 5) == [5, 5, 5, 5]\nassert solution.distinctNumbers([40, 47, 45, 64, 15, 91, 42], 3) == [3, 3, 3, 3, 3]\nassert solution.distinctNumbers([36, 5, 90, 46, 16, 18, 21, 66, 48], 7) == [7, 7, 7]\nassert solution.distinctNumbers([13, 31, 9, 78, 77, 85, 53, 26], 2) == [2, 2, 2, 2, 2, 2, 2]\nassert solution.distinctNumbers([3, 19, 46, 26, 68, 40], 2) == [2, 2, 2, 2, 2]\nassert solution.distinctNumbers([15, 70, 32, 88, 92, 95, 12, 20, 96, 79], 1) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert solution.distinctNumbers([57, 74, 80, 15], 4) == [4]\nassert solution.distinctNumbers([50, 36], 2) == [2]\nassert solution.distinctNumbers([3, 75], 1) == [1, 1]\nassert solution.distinctNumbers([42, 59, 5, 64, 27, 36, 83], 1) == [1, 1, 1, 1, 1, 1, 1]\nassert solution.distinctNumbers([72, 48, 30, 49, 31, 8, 24, 17], 3) == [3, 3, 3, 3, 3, 3]\nassert solution.distinctNumbers([66, 29, 91, 26, 31, 17, 49, 39, 30], 4) == [4, 4, 4, 4, 4, 4]\nassert solution.distinctNumbers([35, 21, 20], 2) == [2, 2]\nassert solution.distinctNumbers([65, 8, 79, 37, 75, 21], 5) == [5, 5]\nassert solution.distinctNumbers([17, 78, 50, 76, 69, 30], 5) == [5, 5]\nassert solution.distinctNumbers([65, 81, 9, 13, 93, 48, 2, 69, 66, 77], 9) == [9, 9]\nassert solution.distinctNumbers([97, 100, 31, 65, 30], 4) == [4, 4]\nassert solution.distinctNumbers([18, 68, 49], 1) == [1, 1, 1]\nassert solution.distinctNumbers([85, 10, 73, 66, 23], 4) == [4, 4]\nassert solution.distinctNumbers([71, 61, 11], 3) == [3]\nassert solution.distinctNumbers([54, 60, 47, 12, 19, 32, 3, 40, 16], 6) == [6, 6, 6, 6]\nassert solution.distinctNumbers([8, 52, 24, 91], 3) == [3, 3]\nassert solution.distinctNumbers([63, 71, 20], 2) == [2, 2]\nassert solution.distinctNumbers([1, 59, 18, 65, 38, 5], 6) == [6]\nassert solution.distinctNumbers([3, 92, 38, 68, 96, 54], 5) == [5, 5]\nassert solution.distinctNumbers([49, 24, 48, 40], 4) == [4]\nassert solution.distinctNumbers([1, 29, 96, 77, 72, 64, 28, 59], 4) == [4, 4, 4, 4, 4]\nassert solution.distinctNumbers([38, 29, 44, 53, 85, 90, 11, 6], 8) == [8]\nassert solution.distinctNumbers([13, 8, 96, 42, 16], 3) == [3, 3, 3]\nassert solution.distinctNumbers([97, 93, 65, 13, 95], 3) == [3, 3, 3]\nassert solution.distinctNumbers([26, 51, 45, 44, 61, 57, 40], 1) == [1, 1, 1, 1, 1, 1, 1]\nassert solution.distinctNumbers([53, 38, 28, 25, 42, 34, 23, 77, 39, 40], 10) == [10]\nassert solution.distinctNumbers([51, 97, 60, 17, 81, 40, 66], 4) == [4, 4, 4, 4]\nassert solution.distinctNumbers([98, 32], 2) == [2]\nassert solution.distinctNumbers([37, 23, 22, 61, 21, 58, 63], 4) == [4, 4, 4, 4]\nassert solution.distinctNumbers([23, 4, 98, 1, 90, 40], 5) == [5, 5]\nassert solution.distinctNumbers([5, 9, 73, 21, 43, 57, 96], 4) == [4, 4, 4, 4]\nassert solution.distinctNumbers([12, 26, 49, 76, 90, 48, 7, 36, 66], 8) == [8, 8]\nassert solution.distinctNumbers([40, 81, 64, 73, 27, 53, 44, 14], 1) == [1, 1, 1, 1, 1, 1, 1, 1]\nassert solution.distinctNumbers([45, 99, 57, 63, 64, 47, 96, 84, 7], 5) == [5, 5, 5, 5, 5]\nassert solution.distinctNumbers([65, 53, 62, 71, 5, 52, 4, 84, 28], 2) == [2, 2, 2, 2, 2, 2, 2, 2]\nassert solution.distinctNumbers([6, 21, 36, 25, 28, 23, 84], 5) == [5, 5, 5]\nassert solution.distinctNumbers([98, 48, 68, 18, 86], 1) == [1, 1, 1, 1, 1]\nassert solution.distinctNumbers([97, 78, 96, 21, 63, 20], 3) == [3, 3, 3, 3]\nassert solution.distinctNumbers([88, 7, 25, 36, 49, 91, 75], 1) == [1, 1, 1, 1, 1, 1, 1]\nassert solution.distinctNumbers([13, 40, 93, 35, 9, 50, 32], 1) == [1, 1, 1, 1, 1, 1, 1]\nassert solution.distinctNumbers([36, 94, 62, 90, 99, 26, 39, 84], 7) == [7, 7]\nassert solution.distinctNumbers([25, 33, 76], 2) == [2, 2]\nassert solution.distinctNumbers([12, 27, 5, 67, 20, 69, 17], 3) == [3, 3, 3, 3, 3]\nassert solution.distinctNumbers([23, 64, 99, 78, 70], 5) == [5]\nassert solution.distinctNumbers([46, 26, 56, 59, 53, 25, 45], 5) == [5, 5, 5]\nassert solution.distinctNumbers([95, 11, 77, 23, 26], 1) == [1, 1, 1, 1, 1]\nassert solution.distinctNumbers([63, 5, 97], 3) == [3]\nassert solution.distinctNumbers([54, 74, 95], 1) == [1, 1, 1]\nassert solution.distinctNumbers([48, 91, 59, 8, 19, 98, 77, 29, 55], 3) == [3, 3, 3, 3, 3, 3, 3]\nassert solution.distinctNumbers([68, 2, 100, 37, 71, 24, 25, 34], 4) == [4, 4, 4, 4, 4]\nassert solution.distinctNumbers([79, 98, 53], 2) == [2, 2]\nassert solution.distinctNumbers([40, 66, 39, 22, 26, 78], 6) == [6]\nassert solution.distinctNumbers([70, 79, 2, 11, 77, 28], 4) == [4, 4, 4]\nassert solution.distinctNumbers([38, 51, 69, 58, 78, 97, 55], 6) == [6, 6]\nassert solution.distinctNumbers([100, 1, 76, 17, 5, 69, 75, 42, 81], 3) == [3, 3, 3, 3, 3, 3, 3]\nassert solution.distinctNumbers([19, 95, 31, 44, 55], 5) == [5]\nassert solution.distinctNumbers([58, 98, 34, 49], 4) == [4]\nassert solution.distinctNumbers([33, 64, 89, 54, 37, 92, 45, 98, 5, 56], 3) == [3, 3, 3, 3, 3, 3, 3, 3]\nassert solution.distinctNumbers([46, 49, 23, 14, 91, 13, 8, 2, 41, 26], 7) == [7, 7, 7, 7]\nassert solution.distinctNumbers([10, 86, 78], 2) == [2, 2]\nassert solution.distinctNumbers([60, 61, 95, 71, 38, 32, 76, 78, 72], 7) == [7, 7, 7]\nassert solution.distinctNumbers([53, 68, 30, 83, 81, 84, 44, 99, 65, 46], 5) == [5, 5, 5, 5, 5, 5]\nassert solution.distinctNumbers([36, 43, 15, 22, 6, 84, 66, 59, 2, 37], 3) == [3, 3, 3, 3, 3, 3, 3, 3]\nassert solution.distinctNumbers([14, 45], 2) == [2]\nassert solution.distinctNumbers([67, 66, 97, 81, 94, 71, 77], 3) == [3, 3, 3, 3, 3]\nassert solution.distinctNumbers([22, 61, 79, 82, 100, 66, 70, 26, 98, 18], 10) == [10]\nassert solution.distinctNumbers([70, 45, 63, 55, 48], 2) == [2, 2, 2, 2]\nassert solution.distinctNumbers([92, 100], 2) == [2]\nassert solution.distinctNumbers([18, 70, 59, 14, 19, 69], 2) == [2, 2, 2, 2, 2]\nassert solution.distinctNumbers([40, 80, 12, 94], 2) == [2, 2, 2]\nassert solution.distinctNumbers([96, 57, 77, 74, 69, 20], 6) == [6]\nassert solution.distinctNumbers([56, 66], 2) == [2]\nassert solution.distinctNumbers([93, 96, 59, 70, 77], 4) == [4, 4]\nassert solution.distinctNumbers([68, 36, 85, 35, 72], 3) == [3, 3, 3]\nassert solution.distinctNumbers([85, 19, 80, 73, 96], 4) == [4, 4]\nassert solution.distinctNumbers([58, 37, 46, 82, 36], 2) == [2, 2, 2, 2]\nassert solution.distinctNumbers([57, 12, 68, 35, 25, 59, 20], 7) == [7]\nassert solution.distinctNumbers([73, 63, 11, 94], 1) == [1, 1, 1, 1]\nassert solution.distinctNumbers([85, 16, 68, 72], 4) == [4]\nassert solution.distinctNumbers([94, 10, 77, 46, 24], 3) == [3, 3, 3]\nassert solution.distinctNumbers([36, 3, 70, 4], 1) == [1, 1, 1, 1]\nassert solution.distinctNumbers([29, 97, 89, 48, 50, 33, 98, 58, 7, 86], 5) == [5, 5, 5, 5, 5, 5]\nassert solution.distinctNumbers([40, 67], 2) == [2]\nassert solution.distinctNumbers([61, 8, 78, 37, 58], 2) == [2, 2, 2, 2]\nassert solution.distinctNumbers([43, 79, 59, 46], 3) == [3, 3]\nassert solution.distinctNumbers([64, 91, 43, 92, 20, 30, 12, 53], 6) == [6, 6, 6]\nassert solution.distinctNumbers([62, 64, 29, 21], 2) == [2, 2, 2]\nassert solution.distinctNumbers([96, 11, 83, 27, 61, 80, 9, 12, 66], 5) == [5, 5, 5, 5, 5]\nassert solution.distinctNumbers([94, 85, 71, 19, 9, 8, 28, 100], 5) == [5, 5, 5, 5]\nassert solution.distinctNumbers([7, 64, 31, 72, 24, 83], 5) == [5, 5]\nassert solution.distinctNumbers([30, 22, 84, 10, 11, 83, 7, 26, 36, 18], 3) == [3, 3, 3, 3, 3, 3, 3, 3]\nassert solution.distinctNumbers([31, 30], 1) == [1, 1]",
  "inefficient_solution": "class Solution:\n    def distinctNumbers(self, nums: List[int], k: int) -> List[int]:\n        ans = [0] * (len(nums) - k + 1)\n        for i in range(len(ans)):\n            distinct_count = 0\n            seen = set()\n            for j in range(i * k, (i + 1) * k):\n                if nums[j] not in seen:\n                    distinct_count += 1\n                    seen.add(nums[j])\n            ans[i] = distinct_count\n        return ans",
  "is_python": true
}