{
  "problem_idx": 1014,
  "task_name": "Best Sightseeing Pair",
  "markdown_description": "\nYou are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a **distance** `j - i` between them.\n\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.\n\n\nReturn *the maximum score of a pair of sightseeing spots*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** values = [8,1,5,2,6]\n**Output:** 11\n**Explanation:** i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** values = [1,2]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= values.length <= 5 * 104`\n* `1 <= values[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxScoreSightseeingPair(self, values: List[int]) -> int:\n        ans, mx = 0, values[0]\n        for j in range(1, len(values)):\n            ans = max(ans, values[j] - j + mx)\n            mx = max(mx, values[j] + j)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxScoreSightseeingPair(self, values):\n        ans, mx = 0, values[0]\n        for j in range(1, len(values)):\n            ans = max(ans, values[j] - j + mx)\n            mx = max(mx, values[j] + j)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    values = random.sample(range(1, 1001), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxScoreSightseeingPair(values)\n\n    return values, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        values, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxScoreSightseeingPair(values) == expected_result\n        print(f\"assert solution.maxScoreSightseeingPair({values}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxScoreSightseeingPair({values}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxScoreSightseeingPair([249, 140, 238, 641, 792, 340, 941, 689]) == 1731\nassert solution.maxScoreSightseeingPair([443, 110]) == 552\nassert solution.maxScoreSightseeingPair([658, 450, 98, 181, 269, 515, 59]) == 1168\nassert solution.maxScoreSightseeingPair([721, 440, 165, 590, 427]) == 1308\nassert solution.maxScoreSightseeingPair([745, 785, 854]) == 1638\nassert solution.maxScoreSightseeingPair([434, 330, 650, 954, 667, 77, 833]) == 1784\nassert solution.maxScoreSightseeingPair([425, 426, 650, 395, 337, 731]) == 1378\nassert solution.maxScoreSightseeingPair([315, 467]) == 781\nassert solution.maxScoreSightseeingPair([182, 647, 762]) == 1408\nassert solution.maxScoreSightseeingPair([868, 892, 800, 420, 542]) == 1759\nassert solution.maxScoreSightseeingPair([138, 20, 92, 982, 987, 172, 543, 238]) == 1968\nassert solution.maxScoreSightseeingPair([645, 756, 85, 538, 52, 274, 204]) == 1400\nassert solution.maxScoreSightseeingPair([614, 5, 28, 249, 583, 671, 354, 194]) == 1280\nassert solution.maxScoreSightseeingPair([930, 961, 691, 481, 783, 330, 683, 720, 322, 809]) == 1890\nassert solution.maxScoreSightseeingPair([540, 994]) == 1533\nassert solution.maxScoreSightseeingPair([113, 394]) == 506\nassert solution.maxScoreSightseeingPair([948, 623, 438]) == 1570\nassert solution.maxScoreSightseeingPair([797, 653, 318, 842, 356, 455, 602, 27, 585, 918]) == 1754\nassert solution.maxScoreSightseeingPair([600, 503, 432, 277, 770, 521, 331, 917, 206, 782]) == 1697\nassert solution.maxScoreSightseeingPair([305, 961]) == 1265\nassert solution.maxScoreSightseeingPair([181, 488, 17, 577, 568, 942, 446, 706, 400]) == 1646\nassert solution.maxScoreSightseeingPair([579, 186]) == 764\nassert solution.maxScoreSightseeingPair([512, 914, 387, 241, 643, 224, 327, 109]) == 1554\nassert solution.maxScoreSightseeingPair([231, 217, 648, 888, 763, 731, 785]) == 1670\nassert solution.maxScoreSightseeingPair([231, 725, 692]) == 1416\nassert solution.maxScoreSightseeingPair([864, 821, 584, 761, 289, 710, 701, 126, 647, 40]) == 1684\nassert solution.maxScoreSightseeingPair([504, 299, 198, 240, 747, 215, 713, 67, 781, 70]) == 1524\nassert solution.maxScoreSightseeingPair([226, 618, 704, 488, 241]) == 1321\nassert solution.maxScoreSightseeingPair([610, 90, 20, 140, 871, 655, 927]) == 1796\nassert solution.maxScoreSightseeingPair([623, 85, 545, 303, 258, 747, 712]) == 1458\nassert solution.maxScoreSightseeingPair([321, 347, 934, 850, 883]) == 1815\nassert solution.maxScoreSightseeingPair([525, 329, 786, 533, 208, 305, 660, 636, 723, 871]) == 1650\nassert solution.maxScoreSightseeingPair([877, 407, 896, 79, 683, 194, 198]) == 1771\nassert solution.maxScoreSightseeingPair([167, 668, 771, 306, 841, 363, 440, 695]) == 1610\nassert solution.maxScoreSightseeingPair([403, 94, 171, 659, 473, 806, 811, 216, 980]) == 1789\nassert solution.maxScoreSightseeingPair([924, 731, 712, 667, 985, 580, 253, 299]) == 1905\nassert solution.maxScoreSightseeingPair([240, 837, 157, 294, 955]) == 1789\nassert solution.maxScoreSightseeingPair([998, 698, 436, 247, 112, 854]) == 1847\nassert solution.maxScoreSightseeingPair([426, 622]) == 1047\nassert solution.maxScoreSightseeingPair([488, 691, 892, 589]) == 1582\nassert solution.maxScoreSightseeingPair([494, 845, 949, 581, 295, 92, 369]) == 1793\nassert solution.maxScoreSightseeingPair([754, 725, 597, 449, 66, 943, 956, 181]) == 1898\nassert solution.maxScoreSightseeingPair([726, 521]) == 1246\nassert solution.maxScoreSightseeingPair([991, 658, 407, 871, 231, 67, 159, 911, 136, 508]) == 1895\nassert solution.maxScoreSightseeingPair([150, 479, 617, 817, 206]) == 1433\nassert solution.maxScoreSightseeingPair([866, 639, 977, 808]) == 1841\nassert solution.maxScoreSightseeingPair([79, 951, 412, 513, 663, 439, 270, 160, 514, 390]) == 1611\nassert solution.maxScoreSightseeingPair([97, 33, 456]) == 551\nassert solution.maxScoreSightseeingPair([156, 701, 166]) == 866\nassert solution.maxScoreSightseeingPair([19, 371, 922, 837, 481, 979, 865]) == 1898\nassert solution.maxScoreSightseeingPair([210, 308, 439, 81, 525, 858, 675, 990, 150]) == 1846\nassert solution.maxScoreSightseeingPair([456, 251, 296, 471, 448, 509, 890]) == 1398\nassert solution.maxScoreSightseeingPair([517, 43, 729]) == 1244\nassert solution.maxScoreSightseeingPair([278, 221]) == 498\nassert solution.maxScoreSightseeingPair([878, 859, 422, 355, 290, 766, 637, 587, 284, 59]) == 1736\nassert solution.maxScoreSightseeingPair([80, 870, 480]) == 1349\nassert solution.maxScoreSightseeingPair([95, 47, 590, 293, 364, 604, 561, 278, 983]) == 1584\nassert solution.maxScoreSightseeingPair([529, 451, 358, 633]) == 1159\nassert solution.maxScoreSightseeingPair([149, 592]) == 740\nassert solution.maxScoreSightseeingPair([74, 650, 582, 372]) == 1231\nassert solution.maxScoreSightseeingPair([177, 928, 486, 487, 816, 51, 575, 256, 293, 995]) == 1915\nassert solution.maxScoreSightseeingPair([724, 647, 76]) == 1370\nassert solution.maxScoreSightseeingPair([504, 392, 685, 959, 743, 958, 408, 211, 388]) == 1915\nassert solution.maxScoreSightseeingPair([361, 158]) == 518\nassert solution.maxScoreSightseeingPair([814, 262, 527, 637, 153, 88, 936, 808, 638, 393]) == 1744\nassert solution.maxScoreSightseeingPair([881, 334, 514, 318, 476, 349]) == 1393\nassert solution.maxScoreSightseeingPair([898, 914, 852, 887]) == 1811\nassert solution.maxScoreSightseeingPair([99, 226, 368, 692, 714, 422, 302, 496, 799]) == 1509\nassert solution.maxScoreSightseeingPair([849, 910, 70, 560, 481, 932, 688, 299, 959, 729]) == 1888\nassert solution.maxScoreSightseeingPair([170, 125]) == 294\nassert solution.maxScoreSightseeingPair([974, 385, 858, 231, 24, 23, 627]) == 1830\nassert solution.maxScoreSightseeingPair([656, 314, 616, 231, 440, 598]) == 1270\nassert solution.maxScoreSightseeingPair([380, 129, 749, 481, 317, 860, 439, 392, 185]) == 1606\nassert solution.maxScoreSightseeingPair([208, 650, 593, 94, 2, 583]) == 1242\nassert solution.maxScoreSightseeingPair([428, 544]) == 971\nassert solution.maxScoreSightseeingPair([783, 326, 609, 172, 381, 710]) == 1488\nassert solution.maxScoreSightseeingPair([409, 152, 644, 787, 280, 20, 544, 726, 999]) == 1781\nassert solution.maxScoreSightseeingPair([828, 407, 913, 60, 654, 460, 723, 975]) == 1883\nassert solution.maxScoreSightseeingPair([136, 985]) == 1120\nassert solution.maxScoreSightseeingPair([106, 384, 878, 426, 723, 15, 861, 709]) == 1735\nassert solution.maxScoreSightseeingPair([75, 507, 50, 70, 432, 377]) == 936\nassert solution.maxScoreSightseeingPair([914, 426, 938, 892, 952, 615, 209]) == 1888\nassert solution.maxScoreSightseeingPair([592, 958, 553, 9, 237, 71, 478, 352, 267, 819]) == 1769\nassert solution.maxScoreSightseeingPair([379, 690, 979, 306, 474, 986, 962, 775]) == 1962\nassert solution.maxScoreSightseeingPair([71, 450]) == 520\nassert solution.maxScoreSightseeingPair([399, 892, 841, 72, 329, 656, 289, 494]) == 1732\nassert solution.maxScoreSightseeingPair([230, 336, 959, 955, 880, 450]) == 1913\nassert solution.maxScoreSightseeingPair([214, 592, 688, 539, 473, 466]) == 1279\nassert solution.maxScoreSightseeingPair([55, 140, 298, 269, 262, 166, 284, 468, 478, 923]) == 1400\nassert solution.maxScoreSightseeingPair([979, 69, 817, 659, 82, 994, 128, 310, 734]) == 1968\nassert solution.maxScoreSightseeingPair([248, 193, 188, 754, 860, 554, 462, 300, 480, 850]) == 1705\nassert solution.maxScoreSightseeingPair([740, 225, 876, 442, 350, 579, 954, 111]) == 1826\nassert solution.maxScoreSightseeingPair([675, 890, 470, 700, 273, 842, 256, 916]) == 1800\nassert solution.maxScoreSightseeingPair([631, 306, 554]) == 1183\nassert solution.maxScoreSightseeingPair([328, 658, 279]) == 985\nassert solution.maxScoreSightseeingPair([988, 769, 464, 485, 544, 829, 458]) == 1812\nassert solution.maxScoreSightseeingPair([238, 582, 364, 543, 327]) == 1123\nassert solution.maxScoreSightseeingPair([697, 964, 509, 567, 583]) == 1660\nassert solution.maxScoreSightseeingPair([326, 122, 949, 490, 26, 468]) == 1438\nassert solution.maxScoreSightseeingPair([262, 864, 882, 868, 963, 361, 455, 914]) == 1874",
  "inefficient_solution": "class Solution:\n    def maxScoreSightseeingPair(self, values):\n        max_values = [0 for _ in range(len(values))]\n        max_values[0] = values[0]\n        max_sum = [0 for _ in range(len(values))]\n        max_sum[0] = max_values[0]\n        for j in range(1, len(values)):\n            max_values[j] = max(values[j], max_values[j-1])\n        for j in range(1, len(values)):\n            max_sum[j] = max(max_sum[j-1], max_values[j] + j)\n        max_score = 0\n        for j in range(1, len(values)):\n            max_score = max(max_score, values[j] - j + max_values[j-1])\n        return max_score",
  "is_python": true
}