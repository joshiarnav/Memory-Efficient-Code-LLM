{
  "problem_idx": 2764,
  "task_name": "Is Array a Preorder of Some ",
  "markdown_description": "\nGiven a **0-indexed** integer **2D array** `nodes`, your task is to determine if the given array represents the **preorder** traversal of some **binary** tree.\n\n\nFor each index `i`, `nodes[i] = [id, parentId]`, where `id` is the id of the node at the index `i` and `parentId` is the id of its parent in the tree (if the node has no parent, then `parentId == -1`).\n\n\nReturn `true` *if the given array* *represents the preorder traversal of some tree, and* `false` *otherwise.*\n\n\n**Note:** the **preorder** traversal of a tree is a recursive way to traverse a tree in which we first visit the current node, then we do the preorder traversal for the left child, and finally, we do it for the right child.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2]]\n**Output:** true\n**Explanation:** The given nodes make the tree in the picture below.\nWe can show that this is the preorder traversal of the tree, first we visit node 0, then we do the preorder traversal of the right child which is [1], then we do the preorder traversal of the left child which is [2,3,4].\n\n```\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2764.Is%20Array%20a%20Preorder%20of%20Some%20%E2%80%8CBinary%20Tree/images/1.png)\n\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1]]\n**Output:** false\n**Explanation:** The given nodes make the tree in the picture below.\nFor the preorder traversal, first we visit node 0, then we do the preorder traversal of the right child which is [1,3,4], but we can see that in the given order, 2 comes between 1 and 3, so, it's not the preorder traversal of the tree.\n\n```\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2764.Is%20Array%20a%20Preorder%20of%20Some%20%E2%80%8CBinary%20Tree/images/2.png)\n\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nodes.length <= 105`\n* `nodes[i].length == 2`\n* `0 <= nodes[i][0] <= 105`\n* `-1 <= nodes[i][1] <= 105`\n* The input is generated such that `nodes` make a binary tree.\n\n\n",
  "canonical_solution": "class Solution:\n    def isPreorder(self, nodes: List[List[int]]) -> bool:\n        def dfs(i: int) -> int:\n            nonlocal k\n            if i != nodes[k][0]:\n                return False\n            k += 1\n            return all(dfs(j) for j in g[i])\n\n        g = defaultdict(list)\n        for i, p in nodes:\n            g[p].append(i)\n        k = 0\n        return dfs(nodes[0][0]) and k == len(nodes)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isPreorder(self, nodes):\n        def dfs(i):\n            nonlocal k\n            if i != nodes[k][0]:\n                return False\n            k += 1\n            return all(dfs(j) for j in g[i])\n\n        g = defaultdict(list)\n        for i, p in nodes:\n            g[p].append(i)\n        k = 0\n        return dfs(nodes[0][0]) and k == len(nodes)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list for nodes\n    nodes = []\n    num_nodes = random.randint(2, 11)\n    for i in range(num_nodes):\n        node_id = random.randint(0, 100)\n        parent_id = random.randint(-1, 100)\n        nodes.append([node_id, parent_id])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isPreorder(nodes)\n\n    return nodes, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nodes, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isPreorder(nodes) == expected_result\n        print(f\"assert solution.isPreorder({nodes}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isPreorder({nodes}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isPreorder([[38, 9], [42, 86], [25, 81], [89, 55], [41, 10], [39, 86], [13, 95], [31, 48]]) == False\nassert solution.isPreorder([[61, 89], [32, 26]]) == False\nassert solution.isPreorder([[54, 58], [3, 30], [62, 35], [11, 72], [30, 90], [4, 74], [28, 99], [3, 3]]) == False\nassert solution.isPreorder([[26, 82], [88, 4], [7, 98], [82, 61], [60, 26], [63, 51], [56, 26], [3, 61], [47, 54], [61, 90]]) == False\nassert solution.isPreorder([[61, 24], [68, 84], [61, 65], [11, 41], [87, 80]]) == False\nassert solution.isPreorder([[43, 16], [83, 6]]) == False\nassert solution.isPreorder([[12, 1], [66, 35], [16, 63], [53, 20], [61, 92], [56, -1]]) == False\nassert solution.isPreorder([[20, 99], [53, 89], [99, 58], [3, 56], [12, 0], [84, 38], [3, 11]]) == False\nassert solution.isPreorder([[21, 26], [0, 1], [56, 0], [83, 23], [23, 85], [44, 30], [82, 51], [25, 100], [11, 5], [8, 97], [3, 91]]) == False\nassert solution.isPreorder([[23, 31], [21, 38]]) == False\nassert solution.isPreorder([[60, 21], [29, 92], [80, 16], [70, 95]]) == False\nassert solution.isPreorder([[54, 74], [1, 73], [36, 96], [98, 67], [19, 68], [6, 55], [45, 18]]) == False\nassert solution.isPreorder([[26, 18], [24, 40], [85, 70], [98, 74], [26, 20], [46, 0], [80, 17], [72, 9], [87, 96], [87, 78], [43, 13]]) == False\nassert solution.isPreorder([[65, 96], [14, 59], [92, 48]]) == False\nassert solution.isPreorder([[82, 60], [10, 90], [80, 80], [59, 17], [9, 17], [24, 11]]) == False\nassert solution.isPreorder([[86, 31], [1, 16], [75, 6], [27, 16], [88, 5], [90, 86], [67, 29], [28, 70], [92, 87], [88, 89], [100, 16]]) == False\nassert solution.isPreorder([[37, 82], [40, 30], [25, 90], [49, 67], [51, 51]]) == False\nassert solution.isPreorder([[41, 59], [17, 64], [61, 0], [68, 78], [70, 43], [93, 65], [85, 95], [55, 50], [72, 96]]) == False\nassert solution.isPreorder([[28, 9], [98, 44], [12, 32], [19, 32], [61, 77], [11, 32], [23, 97]]) == False\nassert solution.isPreorder([[80, 62], [96, 89], [42, 6], [76, 50], [85, 88], [78, 84], [46, 30]]) == False\nassert solution.isPreorder([[76, 24], [42, 78], [11, 82], [100, 45]]) == False\nassert solution.isPreorder([[95, 63], [85, 22], [36, 17], [10, 53], [5, 21], [92, 0]]) == False\nassert solution.isPreorder([[16, 40], [3, 27], [12, 79], [12, 44], [9, 50], [81, 49], [92, 87]]) == False\nassert solution.isPreorder([[34, 74], [22, 31], [49, 48], [35, 87], [16, 16], [14, 27], [48, 59], [84, 79], [79, 35], [68, 94], [36, 20]]) == False\nassert solution.isPreorder([[42, 56], [38, 66], [57, 22], [29, 34], [95, 26], [12, 26], [19, 11], [61, 12]]) == False\nassert solution.isPreorder([[37, 76], [55, 38], [92, 16], [13, 58]]) == False\nassert solution.isPreorder([[64, 44], [8, 39], [4, 41], [61, 92], [81, 33], [53, 45], [35, 4], [85, 23], [73, 41]]) == False\nassert solution.isPreorder([[69, 24], [85, 15], [38, 46], [83, 92], [47, 47]]) == False\nassert solution.isPreorder([[14, 17], [1, 2], [37, 30], [83, 82], [82, 3], [49, 58], [53, 98], [4, 79], [94, 81], [89, 46]]) == False\nassert solution.isPreorder([[87, 57], [41, 66], [38, 67], [7, 13], [85, 100], [7, 30]]) == False\nassert solution.isPreorder([[40, 88], [33, 85], [96, 33], [16, 17], [8, 14], [76, 86], [44, 50], [86, 44]]) == False\nassert solution.isPreorder([[16, 76], [0, 7], [29, 12], [82, 19], [96, 5]]) == False\nassert solution.isPreorder([[44, 62], [80, 44], [65, 23], [48, 63], [83, 3], [1, 58], [26, 85], [9, 39], [88, 58], [78, 52], [27, 85]]) == False\nassert solution.isPreorder([[32, 56], [35, 13], [0, 61], [35, 30]]) == False\nassert solution.isPreorder([[88, 46], [26, 35]]) == False\nassert solution.isPreorder([[90, 28], [37, 75], [10, 92], [1, 47], [79, 92]]) == False\nassert solution.isPreorder([[50, 71], [53, 62], [52, 50], [59, 59], [35, 35], [83, 78], [25, 11], [39, 92], [2, 74], [10, 51]]) == False\nassert solution.isPreorder([[74, 87], [7, 21], [5, 9], [64, 38], [77, 24], [37, 88], [92, 24], [36, 64], [85, 100], [53, 70], [53, 22]]) == False\nassert solution.isPreorder([[48, 38], [51, 39], [12, 64], [60, 36], [81, 81], [95, 55], [45, 37], [4, 57]]) == False\nassert solution.isPreorder([[64, 25], [60, 39], [95, 65], [14, 32], [39, 9], [23, 18], [85, 75], [53, 13], [54, 69], [57, 25], [86, 44]]) == False\nassert solution.isPreorder([[98, 70], [50, 92], [50, 9], [52, 77]]) == False\nassert solution.isPreorder([[24, 79], [44, 40], [43, 56], [91, 54], [99, 37], [58, 78], [74, 100], [67, 90], [97, 36], [32, 23]]) == False\nassert solution.isPreorder([[46, 82], [81, 54], [7, 43], [51, 82], [88, 26], [22, 63], [60, 85], [9, 27]]) == False\nassert solution.isPreorder([[29, 16], [5, 46], [52, 21], [62, 47], [25, -1], [2, 20], [41, 86]]) == False\nassert solution.isPreorder([[73, 49], [34, -1], [80, 46]]) == False\nassert solution.isPreorder([[59, 98], [60, 40], [83, 24], [6, 50], [73, 10], [1, 22], [25, 65], [27, 84], [69, 26], [34, 32], [99, 11]]) == False\nassert solution.isPreorder([[85, 86], [53, 80], [92, 77], [86, 62], [45, 14], [96, 56]]) == False\nassert solution.isPreorder([[16, 77], [66, 90], [75, 99], [88, 24], [82, 40]]) == False\nassert solution.isPreorder([[78, 18], [64, 52], [89, 98], [10, 47]]) == False\nassert solution.isPreorder([[88, 97], [10, 69]]) == False\nassert solution.isPreorder([[7, 1], [86, 62]]) == False\nassert solution.isPreorder([[67, 59], [26, 9]]) == False\nassert solution.isPreorder([[20, 73], [70, 94], [90, 14], [99, 96], [74, 21], [91, 55], [67, 22], [26, 3], [87, 47]]) == False\nassert solution.isPreorder([[65, 64], [20, 38], [55, 74], [2, 55], [82, 37]]) == False\nassert solution.isPreorder([[64, 62], [66, 74], [50, 37], [98, 16], [17, 62], [79, 15], [58, 30], [41, 90]]) == False\nassert solution.isPreorder([[61, 39], [87, 92], [51, 59], [37, 48], [91, 9], [31, 16], [3, 22], [18, 6], [91, 13], [35, 78]]) == False\nassert solution.isPreorder([[68, 59], [72, 91]]) == False\nassert solution.isPreorder([[44, 27], [20, 24], [70, 70], [50, 80], [19, 51]]) == False\nassert solution.isPreorder([[75, 71], [86, 91]]) == False\nassert solution.isPreorder([[98, 51], [18, 70], [9, 4], [22, 0], [27, 89], [25, 50], [60, 90], [14, 31], [62, 95], [4, -1]]) == False\nassert solution.isPreorder([[42, 78], [95, 30], [88, 59], [99, 43], [96, 53], [24, 33], [24, 61], [31, 47], [15, 29], [99, 27], [42, 81]]) == False\nassert solution.isPreorder([[8, 59], [34, 28], [90, 62], [100, 88], [43, 33], [85, 76], [84, 91], [38, 39], [25, 52], [66, 78], [62, 86]]) == False\nassert solution.isPreorder([[40, 89], [60, 50], [71, 44], [90, 79], [68, 68]]) == False\nassert solution.isPreorder([[6, 100], [3, 4], [72, 97], [87, -1], [8, 19], [55, 62], [6, 35]]) == False\nassert solution.isPreorder([[58, 64], [85, 65], [58, 9], [43, 73], [69, 30], [71, 83], [80, 40], [78, 46], [57, 14], [82, 43]]) == False\nassert solution.isPreorder([[98, 92], [23, 90], [46, 76], [7, 87], [72, 99], [8, 42], [5, 91], [60, 12], [87, 50], [50, 73], [40, 68]]) == False\nassert solution.isPreorder([[40, 93], [87, 46], [41, 24], [81, 85], [90, 81], [68, 4]]) == False\nassert solution.isPreorder([[11, 62], [24, 16], [1, 84], [60, 94], [27, 21]]) == False\nassert solution.isPreorder([[55, 10], [63, 62], [88, 63], [25, 92], [85, 27], [88, 89], [17, 54]]) == False\nassert solution.isPreorder([[42, 65], [58, 97], [40, 76], [21, 36], [2, 4], [85, 61]]) == False\nassert solution.isPreorder([[86, 85], [39, 79], [90, 39], [71, 96], [95, 38], [64, 84], [52, 97], [19, 86], [31, 55], [64, 97]]) == False\nassert solution.isPreorder([[30, 37], [68, 0], [63, 24], [36, 8], [31, 51], [2, 25], [96, 2], [74, 10], [99, 38]]) == False\nassert solution.isPreorder([[42, 61], [94, 62]]) == False\nassert solution.isPreorder([[3, 25], [33, 99], [20, 62], [62, 36], [40, 97], [2, 97], [93, 32], [96, 40]]) == False\nassert solution.isPreorder([[69, 83], [5, 9], [66, 34], [80, 16], [34, 14], [99, 76], [64, 60], [96, 34], [81, 19]]) == False\nassert solution.isPreorder([[99, 84], [9, 51], [24, 92], [72, 39], [94, 49], [62, 69], [98, 16], [19, 50]]) == False\nassert solution.isPreorder([[5, 68], [72, 80], [85, 69], [94, 25], [87, 41], [76, 66]]) == False\nassert solution.isPreorder([[21, 94], [100, 58], [46, 24], [100, 72]]) == False\nassert solution.isPreorder([[20, 63], [22, 56], [7, 58], [57, 51], [4, 4], [57, 88], [3, 98], [98, 76], [32, 40], [94, 64], [10, 5]]) == False\nassert solution.isPreorder([[24, 35], [76, 26], [67, 47], [12, 17], [3, 65], [48, 46], [54, 100], [96, 69], [21, 13], [6, 41]]) == False\nassert solution.isPreorder([[73, 22], [72, 34], [32, 69], [19, 10]]) == False\nassert solution.isPreorder([[77, 28], [70, 84], [31, 6], [36, 67], [20, 5], [75, 1]]) == False\nassert solution.isPreorder([[8, 33], [26, 36], [96, 17], [30, 81], [90, 80], [12, 17], [8, 37], [5, 57]]) == False\nassert solution.isPreorder([[12, 15], [28, 63], [100, 92], [68, 80], [50, 6], [86, 30], [23, 0], [12, 62], [29, 33], [67, 57], [15, 38]]) == False\nassert solution.isPreorder([[7, 57], [80, 84], [3, 59]]) == False\nassert solution.isPreorder([[17, 51], [49, 5], [66, 21]]) == False\nassert solution.isPreorder([[100, 78], [2, 15], [82, 63], [79, 5], [42, 72], [7, 28], [99, 48], [100, 60]]) == False\nassert solution.isPreorder([[6, 27], [49, 85], [1, 60], [0, 76], [59, 85], [33, 45]]) == False\nassert solution.isPreorder([[36, -1], [34, 93], [84, 56]]) == False\nassert solution.isPreorder([[14, 15], [84, 0], [82, 29], [75, 85]]) == False\nassert solution.isPreorder([[84, 10], [2, 18], [4, 99], [77, 66], [38, 83]]) == False\nassert solution.isPreorder([[17, 22], [62, 56], [95, 72], [24, 99], [100, 9], [58, 100], [46, 34], [56, 44], [22, 33], [14, 7]]) == False\nassert solution.isPreorder([[33, 16], [30, 70], [77, 74]]) == False\nassert solution.isPreorder([[42, 80], [63, 29], [77, 18]]) == False\nassert solution.isPreorder([[99, 30], [90, 10], [9, 39], [14, 60], [69, 99], [40, 96], [49, 26], [37, 21], [75, 88], [44, 38], [3, 28]]) == False\nassert solution.isPreorder([[50, 12], [29, 28], [39, 80], [4, 42], [31, 95], [57, 58]]) == False\nassert solution.isPreorder([[57, 73], [50, 8], [41, 3], [7, 69], [28, 52], [26, 26], [46, 16]]) == False\nassert solution.isPreorder([[87, 79], [0, 32]]) == False\nassert solution.isPreorder([[22, 19], [70, 81]]) == False\nassert solution.isPreorder([[49, 51], [85, -1], [83, 42], [1, 73], [52, 99], [57, 71], [21, 10], [8, -1], [99, 64]]) == False",
  "inefficient_solution": "from collections import defaultdict\n\nclass Solution:\n    def isPreorder(self, nodes: List[List[int]]) -> bool:\n        nodes_dict = defaultdict(int)\n        nodes_dict_reversed = defaultdict(int)\n        nodes_count = defaultdict(int)\n        \n        for node in nodes:\n            nodes_dict[node[0]] = node[1]\n            nodes_dict_reversed[node[1]] = node[0]\n            nodes_count[node[0]] = 0\n            nodes_count[node[1]] = 0\n\n        for node in nodes:\n            nodes_count[node[0]] += 1\n            nodes_count[nodes_dict[node[0]]] += 1\n\n        k = 0\n        stack = [0]\n\n        while len(stack) > 0:\n            if stack[-1] != nodes[k][0]:\n                return False\n            k += 1\n            stack.pop()\n            if k < len(nodes):\n                parent = nodes[k][1]\n                if parent == -1:\n                    stack.append(k)\n                else:\n                    if nodes_count[parent] > 1:\n                        child = nodes_dict_reversed[parent]\n                        nodes_dict_reversed[parent] = k\n                        nodes_dict[k] = child\n                        stack.append(k)\n        return True",
  "is_python": true
}