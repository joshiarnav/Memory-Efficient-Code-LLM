{
  "problem_idx": 744,
  "task_name": "Find Smallest Letter Greater Than Target",
  "markdown_description": "\nYou are given an array of characters `letters` that is sorted in **non-decreasing order**, and a character `target`. There are **at least two different** characters in `letters`.\n\n\nReturn *the smallest character in* `letters` *that is lexicographically greater than* `target`. If such a character does not exist, return the first character in `letters`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** letters = [\"c\",\"f\",\"j\"], target = \"a\"\n**Output:** \"c\"\n**Explanation:** The smallest character that is lexicographically greater than 'a' in letters is 'c'.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** letters = [\"c\",\"f\",\"j\"], target = \"c\"\n**Output:** \"f\"\n**Explanation:** The smallest character that is lexicographically greater than 'c' in letters is 'f'.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** letters = [\"x\",\"x\",\"y\",\"y\"], target = \"z\"\n**Output:** \"x\"\n**Explanation:** There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= letters.length <= 104`\n* `letters[i]` is a lowercase English letter.\n* `letters` is sorted in **non-decreasing** order.\n* `letters` contains at least two different characters.\n* `target` is a lowercase English letter.\n\n\n",
  "canonical_solution": "class Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:\n        left, right = 0, len(letters)\n        while left < right:\n            mid = (left + right) >> 1\n            if ord(letters[mid]) > ord(target):\n                right = mid\n            else:\n                left = mid + 1\n        return letters[left % len(letters)]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:\n        left, right = 0, len(letters)\n        while left < right:\n            mid = (left + right) >> 1\n            if ord(letters[mid]) > ord(target):\n                right = mid\n            else:\n                left = mid + 1\n        return letters[left % len(letters)]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random letters list\n    letters = [chr(random.randint(ord('a'), ord('z'))) for _ in range(random.randint(2, 10))]\n    letters.sort()\n\n    # Generate a random target character\n    target = chr(random.randint(ord('a'), ord('z')))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.nextGreatestLetter(letters, target)\n\n    return letters, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        letters, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.nextGreatestLetter(letters, target) == expected_result\n        print(f\"assert solution.nextGreatestLetter({letters}, '{target}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.nextGreatestLetter({letters}, '{target}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.nextGreatestLetter(['a', 'p', 'p', 'v', 'y'], 'j') == 'p'\nassert solution.nextGreatestLetter(['c', 'e', 'g', 'r', 'y'], 'f') == 'g'\nassert solution.nextGreatestLetter(['d', 'h', 'j', 'r', 'v'], 'k') == 'r'\nassert solution.nextGreatestLetter(['c', 'g', 'h', 'k', 'm', 'm', 'n', 'o', 'p', 'w'], 'e') == 'g'\nassert solution.nextGreatestLetter(['c', 'd', 'd', 'm', 'q', 't', 'v'], 'w') == 'c'\nassert solution.nextGreatestLetter(['b', 'h', 'j'], 'y') == 'b'\nassert solution.nextGreatestLetter(['d', 'f', 'j', 'j', 'k', 'p', 's', 'u'], 'r') == 's'\nassert solution.nextGreatestLetter(['k', 'n', 'r', 'r'], 'g') == 'k'\nassert solution.nextGreatestLetter(['a', 'k', 'l', 'q', 's', 'w'], 'h') == 'k'\nassert solution.nextGreatestLetter(['r', 'x'], 'd') == 'r'\nassert solution.nextGreatestLetter(['l', 'l', 'l', 'v', 'z'], 'y') == 'z'\nassert solution.nextGreatestLetter(['h', 'm', 'u', 'y'], 'a') == 'h'\nassert solution.nextGreatestLetter(['i', 'n', 'p', 's', 't', 'u', 'x'], 't') == 'u'\nassert solution.nextGreatestLetter(['b', 'd'], 'l') == 'b'\nassert solution.nextGreatestLetter(['c', 'd'], 'i') == 'c'\nassert solution.nextGreatestLetter(['a', 'q', 't', 'x'], 'x') == 'a'\nassert solution.nextGreatestLetter(['a', 'h', 'j', 'm', 'x', 'y'], 'e') == 'h'\nassert solution.nextGreatestLetter(['h', 'i', 'm', 'n', 'q', 'r', 'y', 'z'], 'l') == 'm'\nassert solution.nextGreatestLetter(['q', 's'], 'w') == 'q'\nassert solution.nextGreatestLetter(['p', 'u'], 'x') == 'p'\nassert solution.nextGreatestLetter(['e', 'g', 'k', 'r', 'v'], 'f') == 'g'\nassert solution.nextGreatestLetter(['e', 'f', 'h', 'k', 'p', 's', 'w', 'x'], 'k') == 'p'\nassert solution.nextGreatestLetter(['f', 'u'], 'p') == 'u'\nassert solution.nextGreatestLetter(['a', 'n', 'p', 'q', 'v', 'w', 'w'], 'r') == 'v'\nassert solution.nextGreatestLetter(['b', 'c', 'd', 'd', 'k', 'k', 'm', 'q', 'u'], 'p') == 'q'\nassert solution.nextGreatestLetter(['a', 'a', 'a', 'e', 'l', 'o', 'p', 'r', 'v'], 'w') == 'a'\nassert solution.nextGreatestLetter(['e', 'h', 'o', 't', 'v'], 'g') == 'h'\nassert solution.nextGreatestLetter(['c', 'f', 'g', 'j', 'j', 'l', 't', 'w', 'x', 'x'], 'p') == 't'\nassert solution.nextGreatestLetter(['m', 'o', 's', 'w'], 'j') == 'm'\nassert solution.nextGreatestLetter(['i', 'p', 'p', 'v', 'w', 'z'], 'i') == 'p'\nassert solution.nextGreatestLetter(['d', 'd', 'f', 'h', 'h', 'k', 'm', 'p', 'u'], 'g') == 'h'\nassert solution.nextGreatestLetter(['d', 'e', 'g', 'h', 'l', 'n', 'o', 't', 'u', 'y'], 'v') == 'y'\nassert solution.nextGreatestLetter(['b', 'j', 'k', 'l', 'q', 'v', 'x'], 'r') == 'v'\nassert solution.nextGreatestLetter(['c', 'c', 'd', 'j', 'm'], 'w') == 'c'\nassert solution.nextGreatestLetter(['g', 'm', 'z'], 'g') == 'm'\nassert solution.nextGreatestLetter(['a', 'b', 'd', 'd', 'k', 'm', 'n', 'o', 's', 'w'], 'r') == 's'\nassert solution.nextGreatestLetter(['b', 'b', 'o', 't', 'x', 'y'], 'a') == 'b'\nassert solution.nextGreatestLetter(['b', 'g', 'j', 'k', 'm', 's', 'v', 'v'], 'h') == 'j'\nassert solution.nextGreatestLetter(['b', 'c', 'd', 'g', 'h', 'j', 'p', 'v', 'w', 'x'], 'd') == 'g'\nassert solution.nextGreatestLetter(['f', 'o', 't', 'u', 'y', 'z'], 'x') == 'y'\nassert solution.nextGreatestLetter(['e', 'f', 'i', 'i', 'l', 'n', 't', 'x'], 'i') == 'l'\nassert solution.nextGreatestLetter(['b', 'c', 'j', 's', 'u'], 'm') == 's'\nassert solution.nextGreatestLetter(['a', 'd', 'g', 'h', 'j', 'm', 'n', 'z'], 'w') == 'z'\nassert solution.nextGreatestLetter(['d', 'i', 'p', 'p'], 'x') == 'd'\nassert solution.nextGreatestLetter(['b', 'e', 'h', 'j', 'l', 'n'], 'a') == 'b'\nassert solution.nextGreatestLetter(['b', 'e', 'g', 'h', 'h', 'j', 'o', 'o', 'p', 'v'], 'j') == 'o'\nassert solution.nextGreatestLetter(['d', 'h', 'j', 'j', 'r', 'v', 'y'], 'd') == 'h'\nassert solution.nextGreatestLetter(['b', 'g', 'h', 'u', 'y'], 'f') == 'g'\nassert solution.nextGreatestLetter(['c', 'h', 'i', 'm', 'm', 'o', 's', 'v', 'z', 'z'], 'c') == 'h'\nassert solution.nextGreatestLetter(['p', 'w', 'w'], 'd') == 'p'\nassert solution.nextGreatestLetter(['f', 'f', 'h', 'i', 'j', 'y', 'z'], 'j') == 'y'\nassert solution.nextGreatestLetter(['e', 'e', 'i', 'm', 'n', 'p', 'w', 'z'], 'n') == 'p'\nassert solution.nextGreatestLetter(['b', 'g', 'h', 'm', 'n', 'w'], 'k') == 'm'\nassert solution.nextGreatestLetter(['j', 'z'], 'x') == 'z'\nassert solution.nextGreatestLetter(['v', 'v'], 'z') == 'v'\nassert solution.nextGreatestLetter(['b', 'j', 'l', 'p', 's', 'y'], 'v') == 'y'\nassert solution.nextGreatestLetter(['o', 'x'], 'j') == 'o'\nassert solution.nextGreatestLetter(['b', 'b', 'e', 'h', 'p', 'q', 's', 't', 'u', 'y'], 'h') == 'p'\nassert solution.nextGreatestLetter(['o', 'v', 'z'], 'l') == 'o'\nassert solution.nextGreatestLetter(['u', 'z'], 'd') == 'u'\nassert solution.nextGreatestLetter(['j', 'l', 'u', 'w', 'z', 'z'], 'g') == 'j'\nassert solution.nextGreatestLetter(['c', 'd', 'e', 'e', 'h', 'v'], 'e') == 'h'\nassert solution.nextGreatestLetter(['j', 'l', 'p', 'q', 't', 'u'], 'y') == 'j'\nassert solution.nextGreatestLetter(['b', 'g', 'm', 's', 'y', 'y'], 'q') == 's'\nassert solution.nextGreatestLetter(['m', 'x'], 'b') == 'm'\nassert solution.nextGreatestLetter(['b', 'e', 'g', 'g', 'n', 'r', 'u', 'w'], 'c') == 'e'\nassert solution.nextGreatestLetter(['a', 'l'], 'y') == 'a'\nassert solution.nextGreatestLetter(['d', 'i', 'n', 'o', 'p', 'v'], 'w') == 'd'\nassert solution.nextGreatestLetter(['e', 'i', 'o', 'z'], 'g') == 'i'\nassert solution.nextGreatestLetter(['b', 'd', 'h', 'h', 'j', 'k', 'n', 't', 'y'], 'u') == 'y'\nassert solution.nextGreatestLetter(['a', 'b', 'o', 'q', 's', 'u', 'w'], 't') == 'u'\nassert solution.nextGreatestLetter(['f', 'j', 'q', 's', 'v'], 'e') == 'f'\nassert solution.nextGreatestLetter(['a', 'c', 'd', 'h', 'i', 'k', 'o'], 't') == 'a'\nassert solution.nextGreatestLetter(['e', 'j', 'p', 'r', 't', 'v'], 'l') == 'p'\nassert solution.nextGreatestLetter(['a', 'd', 'f', 'o', 's'], 'm') == 'o'\nassert solution.nextGreatestLetter(['k', 's'], 'o') == 's'\nassert solution.nextGreatestLetter(['b', 't', 't', 'x'], 'w') == 'x'\nassert solution.nextGreatestLetter(['t', 'u'], 's') == 't'\nassert solution.nextGreatestLetter(['a', 'b', 'c', 'd', 'l', 't'], 'd') == 'l'\nassert solution.nextGreatestLetter(['b', 'h', 'x', 'z'], 'f') == 'h'\nassert solution.nextGreatestLetter(['d', 'e', 'v', 'x'], 'n') == 'v'\nassert solution.nextGreatestLetter(['a', 'd', 'k', 'l', 'o', 'p', 'q', 'v'], 'b') == 'd'\nassert solution.nextGreatestLetter(['a', 'j', 'n', 's', 'u', 'w'], 'b') == 'j'\nassert solution.nextGreatestLetter(['f', 'r', 'z'], 'k') == 'r'\nassert solution.nextGreatestLetter(['b', 'd', 'g', 'i', 'w', 'y'], 'g') == 'i'\nassert solution.nextGreatestLetter(['e', 'h', 'n', 'o'], 'i') == 'n'\nassert solution.nextGreatestLetter(['b', 'e', 'k', 'k'], 'o') == 'b'\nassert solution.nextGreatestLetter(['h', 'm'], 'q') == 'h'\nassert solution.nextGreatestLetter(['d', 'm', 'n', 'r', 's', 'v', 'w'], 'a') == 'd'\nassert solution.nextGreatestLetter(['c', 'f', 'i', 'k', 'o', 'o', 'p', 'p', 'u', 'u'], 'o') == 'p'\nassert solution.nextGreatestLetter(['e', 'j', 'm', 'o', 'x', 'z'], 'g') == 'j'\nassert solution.nextGreatestLetter(['b', 'c', 'e', 'f', 'n', 'p', 'r', 'u', 'v'], 'x') == 'b'\nassert solution.nextGreatestLetter(['d', 'n', 'w'], 'g') == 'n'\nassert solution.nextGreatestLetter(['b', 't', 'y'], 'q') == 't'\nassert solution.nextGreatestLetter(['f', 'g', 's', 'y'], 'k') == 's'\nassert solution.nextGreatestLetter(['a', 'm', 'o', 'u', 'x'], 'i') == 'm'\nassert solution.nextGreatestLetter(['a', 'a', 'f', 'i', 'k', 'p', 't', 't', 'z'], 'z') == 'a'\nassert solution.nextGreatestLetter(['o', 'u', 'w', 'y'], 'x') == 'y'\nassert solution.nextGreatestLetter(['g', 'u'], 'o') == 'u'\nassert solution.nextGreatestLetter(['h', 'm', 'r', 'x', 'y', 'z', 'z'], 'p') == 'r'",
  "inefficient_solution": "class Solution:\n    def nextGreatestLetter(self, letters: List[str], target: str) -> str:\n        candidates = [letter for letter in letters]\n        for _ in range(len(letters) * len(letters)):\n            best_candidate = None\n            for candidate in candidates:\n                if ord(candidate) > ord(target):\n                    best_candidate = candidate\n                    break\n            if best_candidate is not None:\n                return best_candidate\n            else:\n                candidates = [letter for letter in letters if letter != candidates[0]]\n        return candidates[0]",
  "is_python": true
}