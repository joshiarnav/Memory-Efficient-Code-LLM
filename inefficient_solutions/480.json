{
  "problem_idx": 480,
  "task_name": "Sliding Window Median",
  "markdown_description": "\nThe **median** is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\n\n\n* For examples, if `arr = [2,3,4]`, the median is `3`.\n* For examples, if `arr = [1,2,3,4]`, the median is `(2 + 3) / 2 = 2.5`.\n\n\nYou are given an integer array `nums` and an integer `k`. There is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.\n\n\nReturn *the median array for each window in the original array*. Answers within `10-5` of the actual value will be accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,-1,-3,5,3,6,7], k = 3\n**Output:** [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\n**Explanation:** \nWindow position                Median\n---------------                -----\n[**1 3 -1**] -3  5  3  6  7        1\n 1 [**3 -1 -3**] 5  3  6  7       -1\n 1  3 [**-1 -3 5**] 3  6  7       -1\n 1  3  -1 [**-3 5 3**] 6  7        3\n 1  3  -1  -3 [**5 3 6**] 7        5\n 1  3  -1  -3  5 [**3 6 7**]       6\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,2,3,1,4,2], k = 3\n**Output:** [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 105`\n* `-231 <= nums[i] <= 231 - 1`\n\n\n",
  "canonical_solution": "class MedianFinder:\n    def __init__(self, k: int):\n        self.k = k\n        self.small = []\n        self.large = []\n        self.delayed = defaultdict(int)\n        self.small_size = 0\n        self.large_size = 0\n\n    def add_num(self, num: int):\n        if not self.small or num <= -self.small[0]:\n            heappush(self.small, -num)\n            self.small_size += 1\n        else:\n            heappush(self.large, num)\n            self.large_size += 1\n        self.rebalance()\n\n    def find_median(self) -> float:\n        return -self.small[0] if self.k & 1 else (-self.small[0] + self.large[0]) / 2\n\n    def remove_num(self, num: int):\n        self.delayed[num] += 1\n        if num <= -self.small[0]:\n            self.small_size -= 1\n            if num == -self.small[0]:\n                self.prune(self.small)\n        else:\n            self.large_size -= 1\n            if num == self.large[0]:\n                self.prune(self.large)\n        self.rebalance()\n\n    def prune(self, pq: List[int]):\n        sign = -1 if pq is self.small else 1\n        while pq and sign * pq[0] in self.delayed:\n            self.delayed[sign * pq[0]] -= 1\n            if self.delayed[sign * pq[0]] == 0:\n                self.delayed.pop(sign * pq[0])\n            heappop(pq)\n\n    def rebalance(self):\n        if self.small_size > self.large_size + 1:\n            heappush(self.large, -heappop(self.small))\n            self.small_size -= 1\n            self.large_size += 1\n            self.prune(self.small)\n        elif self.small_size < self.large_size:\n            heappush(self.small, -heappop(self.large))\n            self.large_size -= 1\n            self.small_size += 1\n            self.prune(self.large)\n\n\nclass Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        finder = MedianFinder(k)\n        for x in nums[:k]:\n            finder.add_num(x)\n        ans = [finder.find_median()]\n        for i in range(k, len(nums)):\n            finder.add_num(nums[i])\n            finder.remove_num(nums[i - k])\n            ans.append(finder.find_median())\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List, Tuple\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\nclass MedianFinder:\n    def __init__(self, k: int):\n        self.k = k\n        self.small = []\n        self.large = []\n        self.delayed = defaultdict(int)\n        self.small_size = 0\n        self.large_size = 0\n\n    def add_num(self, num: int):\n        if not self.small or num <= -self.small[0]:\n            heappush(self.small, -num)\n            self.small_size += 1\n        else:\n            heappush(self.large, num)\n            self.large_size += 1\n        self.rebalance()\n\n    def find_median(self) -> float:\n        return -self.small[0] if self.k & 1 else (-self.small[0] + self.large[0]) / 2\n\n    def remove_num(self, num: int):\n        self.delayed[num] += 1\n        if num <= -self.small[0]:\n            self.small_size -= 1\n            if num == -self.small[0]:\n                self.prune(self.small)\n        else:\n            self.large_size -= 1\n            if num == self.large[0]:\n                self.prune(self.large)\n        self.rebalance()\n\n    def prune(self, pq: List[int]):\n        sign = -1 if pq is self.small else 1\n        while pq and sign * pq[0] in self.delayed:\n            self.delayed[sign * pq[0]] -= 1\n            if self.delayed[sign * pq[0]] == 0:\n                self.delayed.pop(sign * pq[0])\n            heappop(pq)\n\n    def rebalance(self):\n        if self.small_size > self.large_size + 1:\n            heappush(self.large, -heappop(self.small))\n            self.small_size -= 1\n            self.large_size += 1\n            self.prune(self.small)\n        elif self.small_size < self.large_size:\n            heappush(self.small, -heappop(self.large))\n            self.large_size -= 1\n            self.small_size += 1\n            self.prune(self.large)\n\n\nclass Solution:\n    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:\n        finder = MedianFinder(k)\n        for x in nums[:k]:\n            finder.add_num(x)\n        ans = [finder.find_median()]\n        for i in range(k, len(nums)):\n            finder.add_num(nums[i])\n            finder.remove_num(nums[i - k])\n            ans.append(finder.find_median())\n        return ans\n\n\ndef generate_test_case() -> Tuple[List[int], int, List[float]]:\n    solution = Solution()\n    \n    # Generate random nums list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random value for k\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.medianSlidingWindow(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.medianSlidingWindow(nums, k) == expected_result\n        print(f\"assert solution.medianSlidingWindow({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.medianSlidingWindow({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.medianSlidingWindow([23, 43, 11, 56, 58, 79, 94, 8], 7) == [56, 56]\nassert solution.medianSlidingWindow([99, 94, 75, 30, 100], 4) == [84.5, 84.5]\nassert solution.medianSlidingWindow([60, 51, 67], 1) == [60, 51, 67]\nassert solution.medianSlidingWindow([66, 60, 67, 19], 4) == [63.0]\nassert solution.medianSlidingWindow([60, 20, 57, 94, 92, 77, 32, 83, 24, 61], 3) == [57, 57, 92, 92, 77, 77, 32, 61]\nassert solution.medianSlidingWindow([53, 78, 76, 72, 38, 34, 69, 4], 6) == [62.5, 70.5, 53.5]\nassert solution.medianSlidingWindow([96, 47, 25, 31, 52], 2) == [71.5, 36.0, 28.0, 41.5]\nassert solution.medianSlidingWindow([18, 7], 2) == [12.5]\nassert solution.medianSlidingWindow([25, 88, 40], 1) == [25, 88, 40]\nassert solution.medianSlidingWindow([69, 26, 1, 8, 41], 1) == [69, 26, 1, 8, 41]\nassert solution.medianSlidingWindow([81, 58, 100], 2) == [69.5, 79.0]\nassert solution.medianSlidingWindow([76, 26, 98, 48, 77, 46, 58, 31, 53, 3], 3) == [76, 48, 77, 48, 58, 46, 53, 31]\nassert solution.medianSlidingWindow([12, 46, 22, 77, 54], 4) == [34.0, 50.0]\nassert solution.medianSlidingWindow([22, 66], 2) == [44.0]\nassert solution.medianSlidingWindow([19, 85], 1) == [19, 85]\nassert solution.medianSlidingWindow([22, 50, 93, 59, 5, 70, 69, 66], 2) == [36.0, 71.5, 76.0, 32.0, 37.5, 69.5, 67.5]\nassert solution.medianSlidingWindow([7, 35, 61, 93], 4) == [48.0]\nassert solution.medianSlidingWindow([34, 23, 87, 72, 20], 1) == [34, 23, 87, 72, 20]\nassert solution.medianSlidingWindow([49, 32, 87, 21, 82, 56, 71, 64, 68], 4) == [40.5, 57.0, 69.0, 63.5, 67.5, 66.0]\nassert solution.medianSlidingWindow([85, 30, 23, 17, 91, 75, 59, 74, 11], 4) == [26.5, 26.5, 49.0, 67.0, 74.5, 66.5]\nassert solution.medianSlidingWindow([40, 93, 4, 87, 33, 59, 88, 64, 2, 36], 7) == [59, 64, 59, 59]\nassert solution.medianSlidingWindow([91, 55, 53, 68], 1) == [91, 55, 53, 68]\nassert solution.medianSlidingWindow([97, 43, 55, 77, 79, 19, 89, 45, 92, 36], 4) == [66.0, 66.0, 66.0, 78.0, 62.0, 67.0, 67.0]\nassert solution.medianSlidingWindow([71, 75, 92, 57], 3) == [75, 75]\nassert solution.medianSlidingWindow([22, 4, 66, 56, 23, 27, 7, 30, 41], 6) == [25.0, 25.0, 28.5, 28.5]\nassert solution.medianSlidingWindow([22, 2], 1) == [22, 2]\nassert solution.medianSlidingWindow([42, 57], 2) == [49.5]\nassert solution.medianSlidingWindow([94, 13, 49, 76, 77, 25, 27, 70, 57], 8) == [59.5, 53.0]\nassert solution.medianSlidingWindow([81, 87, 99, 37, 44, 12, 9, 29, 50, 13], 3) == [87, 87, 44, 37, 12, 12, 29, 29]\nassert solution.medianSlidingWindow([48, 39, 19, 82, 77, 25, 26], 3) == [39, 39, 77, 77, 26]\nassert solution.medianSlidingWindow([67, 54, 82, 52, 45, 46, 73, 86, 11, 84], 3) == [67, 54, 52, 46, 46, 73, 73, 84]\nassert solution.medianSlidingWindow([87, 100, 74], 2) == [93.5, 87.0]\nassert solution.medianSlidingWindow([48, 29, 2, 68, 37, 89, 24, 9, 41, 70], 4) == [38.5, 33.0, 52.5, 52.5, 30.5, 32.5, 32.5]\nassert solution.medianSlidingWindow([5, 4, 9], 2) == [4.5, 6.5]\nassert solution.medianSlidingWindow([15, 80, 11, 20, 76, 25, 60, 3, 81], 2) == [47.5, 45.5, 15.5, 48.0, 50.5, 42.5, 31.5, 42.0]\nassert solution.medianSlidingWindow([26, 58, 54, 3, 53, 15, 97, 5, 36], 2) == [42.0, 56.0, 28.5, 28.0, 34.0, 56.0, 51.0, 20.5]\nassert solution.medianSlidingWindow([47, 78, 68, 67, 66], 4) == [67.5, 67.5]\nassert solution.medianSlidingWindow([9, 32, 73, 37, 62, 21, 8, 22], 1) == [9, 32, 73, 37, 62, 21, 8, 22]\nassert solution.medianSlidingWindow([51, 9, 92, 80], 2) == [30.0, 50.5, 86.0]\nassert solution.medianSlidingWindow([93, 95, 64, 62, 34], 1) == [93, 95, 64, 62, 34]\nassert solution.medianSlidingWindow([67, 51, 47, 44, 26], 2) == [59.0, 49.0, 45.5, 35.0]\nassert solution.medianSlidingWindow([82, 47, 33, 17, 73, 37, 10], 1) == [82, 47, 33, 17, 73, 37, 10]\nassert solution.medianSlidingWindow([64, 71, 87, 72, 67, 47, 55, 78], 4) == [71.5, 71.5, 69.5, 61.0, 61.0]\nassert solution.medianSlidingWindow([69, 11, 4, 98, 72, 9, 42, 64, 5], 9) == [42]\nassert solution.medianSlidingWindow([7, 16, 76, 64], 1) == [7, 16, 76, 64]\nassert solution.medianSlidingWindow([20, 85, 93, 78, 36], 5) == [78]\nassert solution.medianSlidingWindow([16, 24, 42, 37, 25, 94], 3) == [24, 37, 37, 37]\nassert solution.medianSlidingWindow([25, 63, 55, 17, 85, 92, 2, 82, 57], 6) == [59.0, 59.0, 68.5, 69.5]\nassert solution.medianSlidingWindow([60, 95, 14], 1) == [60, 95, 14]\nassert solution.medianSlidingWindow([9, 91, 80, 37, 81], 1) == [9, 91, 80, 37, 81]\nassert solution.medianSlidingWindow([63, 22, 99, 84, 96, 93, 44, 73], 6) == [88.5, 88.5, 88.5]\nassert solution.medianSlidingWindow([41, 3, 55, 48], 1) == [41, 3, 55, 48]\nassert solution.medianSlidingWindow([81, 13, 55, 26, 84, 63, 78, 4], 5) == [55, 55, 63, 63]\nassert solution.medianSlidingWindow([40, 18, 87, 79], 4) == [59.5]\nassert solution.medianSlidingWindow([43, 33, 38, 91, 2, 57, 58, 98, 14], 7) == [43, 57, 57]\nassert solution.medianSlidingWindow([68, 63, 81, 58, 15], 1) == [68, 63, 81, 58, 15]\nassert solution.medianSlidingWindow([31, 2, 33], 1) == [31, 2, 33]\nassert solution.medianSlidingWindow([66, 70, 87, 29, 30], 2) == [68.0, 78.5, 58.0, 29.5]\nassert solution.medianSlidingWindow([12, 15], 2) == [13.5]\nassert solution.medianSlidingWindow([94, 53, 68, 87], 1) == [94, 53, 68, 87]\nassert solution.medianSlidingWindow([41, 35, 55, 50, 17, 99, 68, 100, 73, 21], 1) == [41, 35, 55, 50, 17, 99, 68, 100, 73, 21]\nassert solution.medianSlidingWindow([16, 40, 7], 2) == [28.0, 23.5]\nassert solution.medianSlidingWindow([85, 70, 97, 36, 69, 94, 67, 45, 40], 8) == [69.5, 68.0]\nassert solution.medianSlidingWindow([7, 4, 37, 64, 95, 56, 51], 4) == [22.0, 50.5, 60.0, 60.0]\nassert solution.medianSlidingWindow([69, 100, 18, 87], 1) == [69, 100, 18, 87]\nassert solution.medianSlidingWindow([70, 2, 12, 96, 10, 39, 8, 93], 1) == [70, 2, 12, 96, 10, 39, 8, 93]\nassert solution.medianSlidingWindow([28, 20, 19], 1) == [28, 20, 19]\nassert solution.medianSlidingWindow([55, 29, 62], 3) == [55]\nassert solution.medianSlidingWindow([75, 32, 39, 12], 2) == [53.5, 35.5, 25.5]\nassert solution.medianSlidingWindow([74, 28, 7, 90, 20, 51, 21], 1) == [74, 28, 7, 90, 20, 51, 21]\nassert solution.medianSlidingWindow([24, 37, 10, 33, 26], 4) == [28.5, 29.5]\nassert solution.medianSlidingWindow([69, 41, 38, 11, 34, 8], 2) == [55.0, 39.5, 24.5, 22.5, 21.0]\nassert solution.medianSlidingWindow([40, 84, 8, 73, 56], 1) == [40, 84, 8, 73, 56]\nassert solution.medianSlidingWindow([9, 86, 90, 61, 91, 81], 3) == [86, 86, 90, 81]\nassert solution.medianSlidingWindow([21, 15, 82, 48, 50, 59, 53, 6], 7) == [50, 50]\nassert solution.medianSlidingWindow([51, 61, 12, 48, 35, 58, 46, 4], 4) == [49.5, 41.5, 41.5, 47.0, 40.5]\nassert solution.medianSlidingWindow([59, 74], 1) == [59, 74]\nassert solution.medianSlidingWindow([81, 80, 75], 2) == [80.5, 77.5]\nassert solution.medianSlidingWindow([12, 8], 2) == [10.0]\nassert solution.medianSlidingWindow([32, 17, 73, 64, 27], 1) == [32, 17, 73, 64, 27]\nassert solution.medianSlidingWindow([21, 57, 92, 22], 4) == [39.5]\nassert solution.medianSlidingWindow([45, 39, 15, 96, 34], 1) == [45, 39, 15, 96, 34]\nassert solution.medianSlidingWindow([3, 64, 73, 47, 93, 57, 25, 15, 74, 49], 6) == [60.5, 60.5, 52.0, 52.0, 53.0]\nassert solution.medianSlidingWindow([97, 71, 39, 14], 2) == [84.0, 55.0, 26.5]\nassert solution.medianSlidingWindow([63, 74, 19, 9, 91, 17], 1) == [63, 74, 19, 9, 91, 17]\nassert solution.medianSlidingWindow([95, 26, 98], 1) == [95, 26, 98]\nassert solution.medianSlidingWindow([16, 92, 36, 21, 52, 86, 68], 1) == [16, 92, 36, 21, 52, 86, 68]\nassert solution.medianSlidingWindow([93, 32, 66, 69], 3) == [66, 66]\nassert solution.medianSlidingWindow([86, 85, 42, 66, 94, 15, 8, 95, 37], 5) == [85, 66, 42, 66, 37]\nassert solution.medianSlidingWindow([95, 48, 35, 55, 83, 44, 22, 3, 46], 8) == [46.0, 45.0]\nassert solution.medianSlidingWindow([24, 35, 39, 90], 3) == [35, 39]\nassert solution.medianSlidingWindow([37, 62, 56, 35, 54, 13, 47], 6) == [45.5, 50.5]\nassert solution.medianSlidingWindow([49, 21, 79, 16], 1) == [49, 21, 79, 16]\nassert solution.medianSlidingWindow([73, 56, 17, 42, 24, 63, 12, 69, 47, 32], 7) == [42, 42, 42, 42]\nassert solution.medianSlidingWindow([100, 71, 42, 55], 3) == [71, 55]\nassert solution.medianSlidingWindow([98, 68, 14, 80, 54, 16, 70, 79], 7) == [68, 68]\nassert solution.medianSlidingWindow([48, 45, 69, 49, 90], 1) == [48, 45, 69, 49, 90]\nassert solution.medianSlidingWindow([73, 87], 2) == [80.0]\nassert solution.medianSlidingWindow([79, 67], 2) == [73.0]\nassert solution.medianSlidingWindow([39, 36, 88, 60, 84, 82], 4) == [49.5, 72.0, 83.0]",
  "inefficient_solution": "class Solution:\n    def medianSlidingWindow(self, nums, k):\n        def sort_window():\n            return sorted(nums[i-k+1:i+1])\n\n        ans = []\n        for i in range(len(nums)):\n            window = sort_window()\n            if i >= k-1:\n                if k % 2 == 1:\n                    ans.append(float(window[k//2]))\n                else:\n                    ans.append((window[k//2-1] + window[k//2]) / 2)\n        return ans",
  "is_python": true
}