{
  "problem_idx": 1403,
  "task_name": "Minimum Subsequence in Non",
  "markdown_description": "\nGiven the array `nums`, obtain a subsequence of the array whose sum of elements is **strictly greater** than the sum of the non\u00a0included elements in such subsequence.\u00a0\n\n\nIf there are multiple solutions, return the subsequence with **minimum size** and if there still exist multiple solutions, return the subsequence with the **maximum total sum** of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\u00a0\n\n\nNote that the solution with the given constraints is guaranteed to be\u00a0**unique**. Also return the answer sorted in **non-increasing** order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,3,10,9,8]\n**Output:** [10,9] \n**Explanation:** The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements.\u00a0\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,4,7,6,7]\n**Output:** [7,7,6] \n**Explanation:** The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-decreasing order.  \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 500`\n* `1 <= nums[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n        ans = []\n        s, t = sum(nums), 0\n        for x in sorted(nums, reverse=True):\n            t += x\n            ans.append(x)\n            if t > s - t:\n                break\n        return ans\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\ndef generate_test_case() -> List[int]:\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.choices(range(1, 101), k=random.randint(1, 11))\n\n    return nums\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums = generate_test_case()\n        solution = Solution()\n        expected_result = solution.minSubsequence(nums)\n        test_case_generator_results.append(f\"assert solution.minSubsequence({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minSubsequence([18, 36, 54, 22, 73]) == [73, 54]\nassert solution.minSubsequence([89]) == [89]\nassert solution.minSubsequence([86, 61, 45, 5, 44, 33]) == [86, 61]\nassert solution.minSubsequence([8, 64, 48, 26, 15, 18, 98, 89, 96, 24, 14]) == [98, 96, 89]\nassert solution.minSubsequence([69, 93, 77, 32, 92, 55, 24]) == [93, 92, 77]\nassert solution.minSubsequence([26, 82, 86, 67]) == [86, 82]\nassert solution.minSubsequence([9, 54, 65]) == [65]\nassert solution.minSubsequence([44, 63, 65, 88, 71, 28, 92, 72]) == [92, 88, 72, 71]\nassert solution.minSubsequence([60, 57, 19, 78, 6, 36, 88, 94, 92, 67, 91]) == [94, 92, 91, 88]\nassert solution.minSubsequence([35, 5, 8, 55, 70, 31]) == [70, 55]\nassert solution.minSubsequence([96, 31, 43]) == [96]\nassert solution.minSubsequence([33, 82]) == [82]\nassert solution.minSubsequence([22, 2, 92, 70, 90]) == [92, 90]\nassert solution.minSubsequence([19, 26, 47, 53, 83, 41, 19]) == [83, 53, 47]\nassert solution.minSubsequence([34, 9, 38, 85, 49, 26, 17, 4, 93]) == [93, 85]\nassert solution.minSubsequence([60, 37, 99, 26, 90]) == [99, 90]\nassert solution.minSubsequence([3, 81]) == [81]\nassert solution.minSubsequence([50, 51, 98, 2]) == [98, 51]\nassert solution.minSubsequence([8, 100, 89, 7, 91, 19, 28, 50, 82]) == [100, 91, 89]\nassert solution.minSubsequence([96, 25, 51, 99]) == [99, 96]\nassert solution.minSubsequence([75, 24, 13, 70, 28, 5, 67, 36, 50]) == [75, 70, 67]\nassert solution.minSubsequence([57, 38, 83, 61, 90, 8]) == [90, 83]\nassert solution.minSubsequence([80, 18, 27, 42, 96]) == [96, 80]\nassert solution.minSubsequence([11, 4, 87, 11, 21, 69, 81, 40, 21, 72]) == [87, 81, 72]\nassert solution.minSubsequence([18]) == [18]\nassert solution.minSubsequence([8]) == [8]\nassert solution.minSubsequence([40, 89, 31, 94, 24, 44, 8]) == [94, 89]\nassert solution.minSubsequence([67, 47, 92, 41, 16, 77, 27, 97]) == [97, 92, 77]\nassert solution.minSubsequence([67, 81, 86, 55]) == [86, 81]\nassert solution.minSubsequence([32]) == [32]\nassert solution.minSubsequence([45, 67, 80]) == [80, 67]\nassert solution.minSubsequence([14, 81, 69, 8, 53, 100, 21, 70, 12, 76]) == [100, 81, 76]\nassert solution.minSubsequence([21, 54, 54, 90, 16, 95, 3, 92]) == [95, 92, 90]\nassert solution.minSubsequence([59, 8, 87]) == [87]\nassert solution.minSubsequence([44, 44, 36, 20, 43, 88, 24]) == [88, 44, 44]\nassert solution.minSubsequence([11]) == [11]\nassert solution.minSubsequence([28, 91, 62, 39, 52, 66, 18, 68, 27]) == [91, 68, 66, 62]\nassert solution.minSubsequence([63, 7, 18, 45, 20]) == [63, 45]\nassert solution.minSubsequence([14]) == [14]\nassert solution.minSubsequence([33, 61, 23, 74, 21]) == [74, 61]\nassert solution.minSubsequence([82]) == [82]\nassert solution.minSubsequence([40, 5, 32, 17, 65, 23, 71, 43, 8]) == [71, 65, 43]\nassert solution.minSubsequence([75, 44, 47, 51, 7, 87]) == [87, 75]\nassert solution.minSubsequence([51, 82, 88, 7, 69, 6, 1, 70]) == [88, 82, 70]\nassert solution.minSubsequence([34, 20, 50, 62]) == [62, 50]\nassert solution.minSubsequence([37, 96, 83, 10]) == [96, 83]\nassert solution.minSubsequence([32, 84, 79, 50, 24]) == [84, 79]\nassert solution.minSubsequence([60]) == [60]\nassert solution.minSubsequence([6, 47, 55, 35, 2, 75]) == [75, 55]\nassert solution.minSubsequence([46, 50, 90, 80, 92, 93, 52, 61, 27]) == [93, 92, 90, 80]\nassert solution.minSubsequence([22, 48, 68, 19, 39, 29, 77]) == [77, 68, 48]\nassert solution.minSubsequence([6]) == [6]\nassert solution.minSubsequence([48]) == [48]\nassert solution.minSubsequence([41, 70, 18, 10, 71, 95]) == [95, 71]\nassert solution.minSubsequence([59, 12, 92, 18, 83, 48, 68, 14, 73]) == [92, 83, 73]\nassert solution.minSubsequence([40]) == [40]\nassert solution.minSubsequence([59, 23, 60, 68]) == [68, 60]\nassert solution.minSubsequence([28, 99]) == [99]\nassert solution.minSubsequence([33, 54, 14, 79, 80, 85, 9]) == [85, 80, 79]\nassert solution.minSubsequence([28, 86]) == [86]\nassert solution.minSubsequence([66, 88, 37]) == [88, 66]\nassert solution.minSubsequence([67]) == [67]\nassert solution.minSubsequence([13, 47, 88, 37, 1, 93, 58, 13, 89, 7]) == [93, 89, 88]\nassert solution.minSubsequence([34, 94, 32, 46, 60, 23, 4, 91, 42, 93, 52]) == [94, 93, 91, 60]\nassert solution.minSubsequence([60, 36, 97, 5, 51, 22, 23]) == [97, 60]\nassert solution.minSubsequence([59, 77, 70, 54, 3, 92, 23, 33, 49, 11]) == [92, 77, 70]\nassert solution.minSubsequence([55]) == [55]\nassert solution.minSubsequence([88, 41, 97, 68, 58, 40, 37]) == [97, 88, 68]\nassert solution.minSubsequence([11, 8, 93, 44, 38, 63, 99, 70, 38]) == [99, 93, 70]\nassert solution.minSubsequence([35, 27, 16, 82, 9, 85, 59, 57, 55, 41]) == [85, 82, 59, 57]\nassert solution.minSubsequence([27]) == [27]\nassert solution.minSubsequence([42, 19, 47, 38, 12, 9, 36, 5, 80, 78, 76]) == [80, 78, 76]\nassert solution.minSubsequence([3, 61, 90, 3, 90, 84, 81, 27, 95]) == [95, 90, 90]\nassert solution.minSubsequence([85, 69, 10, 70, 33, 57, 62, 84]) == [85, 84, 70]\nassert solution.minSubsequence([51, 7, 74, 56, 54]) == [74, 56]\nassert solution.minSubsequence([50, 89, 3, 84, 11, 94, 4, 95, 78, 34, 11]) == [95, 94, 89]\nassert solution.minSubsequence([16, 42]) == [42]\nassert solution.minSubsequence([73, 37, 18, 93, 72, 62, 76, 97]) == [97, 93, 76]\nassert solution.minSubsequence([9, 41, 86, 46, 31, 14, 25, 20]) == [86, 46, 41]\nassert solution.minSubsequence([13, 94, 40, 47, 49, 32, 88, 61, 31, 60, 10]) == [94, 88, 61, 60]\nassert solution.minSubsequence([3, 86, 56, 72, 87, 82]) == [87, 86, 82]\nassert solution.minSubsequence([3, 75, 69, 95, 64, 59, 95, 63, 83, 91, 16]) == [95, 95, 91, 83]\nassert solution.minSubsequence([58, 31, 100, 92, 12, 25]) == [100, 92]\nassert solution.minSubsequence([88]) == [88]\nassert solution.minSubsequence([60, 42, 1, 7, 68, 49, 25, 78, 44, 10]) == [78, 68, 60]\nassert solution.minSubsequence([27, 86, 94, 12, 63, 99, 3, 92, 32, 72, 23]) == [99, 94, 92, 86]\nassert solution.minSubsequence([59, 94]) == [94]\nassert solution.minSubsequence([83, 94]) == [94]\nassert solution.minSubsequence([46, 10, 14, 74, 93, 45, 88, 38]) == [93, 88, 74]\nassert solution.minSubsequence([1, 91]) == [91]\nassert solution.minSubsequence([31]) == [31]\nassert solution.minSubsequence([13, 31, 88, 41, 37, 93]) == [93, 88]\nassert solution.minSubsequence([55, 18, 57, 36, 85, 60, 81, 21, 91]) == [91, 85, 81]\nassert solution.minSubsequence([2, 77, 46]) == [77]\nassert solution.minSubsequence([75, 61, 4, 4, 14, 19]) == [75, 61]\nassert solution.minSubsequence([42, 79, 60, 97, 29, 1]) == [97, 79]\nassert solution.minSubsequence([13, 2]) == [13]\nassert solution.minSubsequence([67, 61, 82, 97, 89, 7, 40, 59, 2, 40]) == [97, 89, 82, 67]\nassert solution.minSubsequence([5, 6, 46, 74, 40, 56, 36, 89, 26, 87]) == [89, 87, 74]\nassert solution.minSubsequence([19]) == [19]",
  "inefficient_solution": "class Solution:\n    def minSubsequence(self, nums: List[int]) -> List[int]:\n        ans = []\n        nums_copy = nums[:]\n        s = sum(nums)\n        for i in range(len(nums_copy)):\n            for j in range(i, len(nums_copy)):\n                temp = nums_copy[:i] + nums_copy[i+1:j] + nums_copy[j+1:]\n                t = sum(nums_copy[:i]) + sum(nums_copy[i+1:j]) + sum(nums_copy[j+1:])\n                if sum(nums_copy[:i]) + nums_copy[i] > t:\n                    ans = sorted(nums_copy[:i] + [nums_copy[i]], reverse=True)\n                    return ans\n        return ans",
  "is_python": true
}