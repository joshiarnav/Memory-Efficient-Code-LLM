{
  "problem_idx": 446,
  "task_name": "Arithmetic Slices II ",
  "markdown_description": "\nGiven an integer array `nums`, return *the number of all the **arithmetic subsequences** of* `nums`.\n\n\nA sequence of numbers is called arithmetic if it consists of **at least three elements** and if the difference between any two consecutive elements is the same.\n\n\n* For example, `[1, 3, 5, 7, 9]`, `[7, 7, 7, 7]`, and `[3, -1, -5, -9]` are arithmetic sequences.\n* For example, `[1, 1, 2, 5, 7]` is not an arithmetic sequence.\n\n\nA **subsequence** of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\n\n\n* For example, `[2,5,10]` is a subsequence of `[1,2,1,**2**,4,1,**5**,**10**]`.\n\n\nThe test cases are generated so that the answer fits in **32-bit** integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,4,6,8,10]\n**Output:** 7\n**Explanation:** All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [7,7,7,7,7]\n**Output:** 16\n**Explanation:** Any subsequence of this array is arithmetic.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1\u00a0 <= nums.length <= 1000`\n* `-231 <= nums[i] <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        f = [defaultdict(int) for _ in nums]\n        ans = 0\n        for i, x in enumerate(nums):\n            for j, y in enumerate(nums[:i]):\n                d = x - y\n                ans += f[j][d]\n                f[i][d] += f[j][d] + 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        f = [defaultdict(int) for _ in nums]\n        ans = 0\n        for i, x in enumerate(nums):\n            for j, y in enumerate(nums[:i]):\n                d = x - y\n                ans += f[j][d]\n                f[i][d] += f[j][d] + 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(-1000, 1001), random.randint(3, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfArithmeticSlices(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfArithmeticSlices(nums) == expected_result\n        print(f\"assert solution.numberOfArithmeticSlices({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfArithmeticSlices({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfArithmeticSlices([-851, -385, 934, -427, -803, -373, 229]) == 0\nassert solution.numberOfArithmeticSlices([-882, -23, 745, 303, -267]) == 0\nassert solution.numberOfArithmeticSlices([-276, 160, -186, 115, -108]) == 0\nassert solution.numberOfArithmeticSlices([-800, 933, 353, -223, 607, 627, -64, 128, 346]) == 0\nassert solution.numberOfArithmeticSlices([-198, -93, -746, 942, -921, 45, 946, 81]) == 0\nassert solution.numberOfArithmeticSlices([292, -562, 782, -746, -91, -923]) == 0\nassert solution.numberOfArithmeticSlices([530, 958, -899, -686, -750]) == 0\nassert solution.numberOfArithmeticSlices([592, -660, -453, 7, 246, -716]) == 0\nassert solution.numberOfArithmeticSlices([-228, 883, -271, -238, 362, -20, 50, 640]) == 0\nassert solution.numberOfArithmeticSlices([-311, 362, -519, 224, 944]) == 0\nassert solution.numberOfArithmeticSlices([-152, -662, 290]) == 0\nassert solution.numberOfArithmeticSlices([-966, -141, 300]) == 0\nassert solution.numberOfArithmeticSlices([-786, 940, 807]) == 0\nassert solution.numberOfArithmeticSlices([-369, 234, 991, 159, 620, -637, -451, 826, -890]) == 0\nassert solution.numberOfArithmeticSlices([-484, -882, 894, -49, 350, 562, -344, -736]) == 0\nassert solution.numberOfArithmeticSlices([296, 533, -560, -255, 693, -570, -174, -854, 911]) == 0\nassert solution.numberOfArithmeticSlices([228, 398, -291]) == 0\nassert solution.numberOfArithmeticSlices([-988, 87, -732, 269, -833, 626, -946, -233, -452]) == 0\nassert solution.numberOfArithmeticSlices([668, -386, -727, -766]) == 0\nassert solution.numberOfArithmeticSlices([-868, 195, 437, -886, 177, -765]) == 0\nassert solution.numberOfArithmeticSlices([135, 29, 296, -184]) == 0\nassert solution.numberOfArithmeticSlices([47, -271, -685, 254, 280]) == 0\nassert solution.numberOfArithmeticSlices([588, -752, 904]) == 0\nassert solution.numberOfArithmeticSlices([738, -167, -74, -550]) == 0\nassert solution.numberOfArithmeticSlices([-290, -936, -70, -911]) == 0\nassert solution.numberOfArithmeticSlices([-145, -721, 832, 994, 881, 69]) == 0\nassert solution.numberOfArithmeticSlices([-235, 531, -34, -99, 960, -315, 835]) == 0\nassert solution.numberOfArithmeticSlices([-535, 165, 472, 516]) == 0\nassert solution.numberOfArithmeticSlices([733, -221, -957, 217, -911, 711, -295, 909, 984, 972]) == 0\nassert solution.numberOfArithmeticSlices([110, 318, 505]) == 0\nassert solution.numberOfArithmeticSlices([249, -645, 45, -613, 62, -333, -914]) == 0\nassert solution.numberOfArithmeticSlices([-978, 70, -563, 572, -485, -709, 717]) == 0\nassert solution.numberOfArithmeticSlices([582, 867, 459, -518, -292, 43]) == 0\nassert solution.numberOfArithmeticSlices([-639, 189, -515]) == 0\nassert solution.numberOfArithmeticSlices([-110, 930, 998, 612, 42, -383, 453, 966, 488, 204]) == 0\nassert solution.numberOfArithmeticSlices([-470, 52, 535]) == 0\nassert solution.numberOfArithmeticSlices([-107, -791, 453, -993, -261, 890, 729, -315]) == 0\nassert solution.numberOfArithmeticSlices([-587, 129, -582, 520]) == 0\nassert solution.numberOfArithmeticSlices([966, 894, 507, -130, -310, -686]) == 0\nassert solution.numberOfArithmeticSlices([116, 258, -260]) == 0\nassert solution.numberOfArithmeticSlices([393, 514, 14, 879, -557, -653, 217, -319, 549]) == 0\nassert solution.numberOfArithmeticSlices([-548, -880, 300, 417]) == 0\nassert solution.numberOfArithmeticSlices([-776, 211, 265, 835, 841, -11, 882, -871, -535]) == 0\nassert solution.numberOfArithmeticSlices([-642, 144, -476, -456, 955, 792, 569]) == 0\nassert solution.numberOfArithmeticSlices([319, 4, -445, 42, -323]) == 0\nassert solution.numberOfArithmeticSlices([-60, 561, 783, 110, -573, -11, -213, 578, 76]) == 0\nassert solution.numberOfArithmeticSlices([-794, 931, 933, 607, 405, 177, -740, 453, -525]) == 0\nassert solution.numberOfArithmeticSlices([-864, -838, -629, -53, 763, 150, 944, 765, 240]) == 0\nassert solution.numberOfArithmeticSlices([499, 48, -95, 50, -343, -975, 555]) == 0\nassert solution.numberOfArithmeticSlices([321, 686, 383]) == 0\nassert solution.numberOfArithmeticSlices([648, 377, 909]) == 0\nassert solution.numberOfArithmeticSlices([-382, -71, 730, -386]) == 0\nassert solution.numberOfArithmeticSlices([460, -507, 922]) == 0\nassert solution.numberOfArithmeticSlices([519, 182, -851, 944]) == 0\nassert solution.numberOfArithmeticSlices([-405, 664, -690, -215, -884, -991, -749, 910, -765, 766]) == 0\nassert solution.numberOfArithmeticSlices([854, -128, 270, -383]) == 0\nassert solution.numberOfArithmeticSlices([-124, 433, -342, 457, -172, 406, -659, 115]) == 0\nassert solution.numberOfArithmeticSlices([371, 314, 506, 237, -379, 320, 884]) == 0\nassert solution.numberOfArithmeticSlices([93, -465, 347, 762, -163, -398, -172, 183, 160]) == 0\nassert solution.numberOfArithmeticSlices([-346, 466, -194, -56, -108, -821, 818, 868, -684, -899]) == 0\nassert solution.numberOfArithmeticSlices([23, -717, 405, 169, 305, 87, 296]) == 0\nassert solution.numberOfArithmeticSlices([-921, -427, 211, -531, 517, -758]) == 0\nassert solution.numberOfArithmeticSlices([-771, 28, 910, -230]) == 0\nassert solution.numberOfArithmeticSlices([-136, 16, 532]) == 0\nassert solution.numberOfArithmeticSlices([896, 877, -950, -162]) == 0\nassert solution.numberOfArithmeticSlices([-164, 869, 375, 756, -520]) == 0\nassert solution.numberOfArithmeticSlices([509, 566, 416, -864, 901, 466, 868, -95, 211, 239]) == 0\nassert solution.numberOfArithmeticSlices([224, 607, -806]) == 0\nassert solution.numberOfArithmeticSlices([-529, 30, 92]) == 0\nassert solution.numberOfArithmeticSlices([974, -457, -939, 553]) == 0\nassert solution.numberOfArithmeticSlices([-807, -323, -633, 161, 534]) == 1\nassert solution.numberOfArithmeticSlices([-779, -584, -491, -349, -814, -18, 665, -688, 281, -227]) == 0\nassert solution.numberOfArithmeticSlices([614, 484, -921, -762, -303]) == 0\nassert solution.numberOfArithmeticSlices([861, -375, 945, 742, 447, -989, -242, 618, -689, -556]) == 0\nassert solution.numberOfArithmeticSlices([-192, -782, 751, -908, -844]) == 0\nassert solution.numberOfArithmeticSlices([-538, 612, 24]) == 0\nassert solution.numberOfArithmeticSlices([858, 688, 511, 525, 656, -253]) == 0\nassert solution.numberOfArithmeticSlices([77, 771, -906, -581, -559, 281, -843]) == 0\nassert solution.numberOfArithmeticSlices([452, -362, -430, -963, -634]) == 0\nassert solution.numberOfArithmeticSlices([904, -254, -588]) == 0\nassert solution.numberOfArithmeticSlices([624, 430, 109, -992, 337, 880]) == 0\nassert solution.numberOfArithmeticSlices([489, 41, -9, 250, 208, -46, -120, 118, -249]) == 0\nassert solution.numberOfArithmeticSlices([-122, -302, -943, 212]) == 0\nassert solution.numberOfArithmeticSlices([404, 501, 555, 90, 211, 844, 314]) == 0\nassert solution.numberOfArithmeticSlices([-218, -518, 87]) == 0\nassert solution.numberOfArithmeticSlices([183, -232, 848, -806, -948, -614, -269, 196, 776]) == 0\nassert solution.numberOfArithmeticSlices([520, -853, 799]) == 0\nassert solution.numberOfArithmeticSlices([-440, -146, 21, 560]) == 0\nassert solution.numberOfArithmeticSlices([-427, -316, -178, 382, 362]) == 0\nassert solution.numberOfArithmeticSlices([617, 244, -753, 277, -421, -417, 263, 703]) == 0\nassert solution.numberOfArithmeticSlices([-562, 472, -102, 868, 1, -388, 358]) == 1\nassert solution.numberOfArithmeticSlices([664, -293, -53, 311, 138, 671, -547, 72]) == 0\nassert solution.numberOfArithmeticSlices([319, 335, -300, -679, 886, -237]) == 0\nassert solution.numberOfArithmeticSlices([627, -58, -129, -79, 444, 748, 261, -502]) == 1\nassert solution.numberOfArithmeticSlices([560, -864, -674, -380, 536]) == 0\nassert solution.numberOfArithmeticSlices([-494, -606, 256, -582]) == 0\nassert solution.numberOfArithmeticSlices([-49, 471, 893, -857, -269, 700, 518, -379, 18]) == 0\nassert solution.numberOfArithmeticSlices([-821, 966, 293, 249, 563, -466]) == 0\nassert solution.numberOfArithmeticSlices([-167, 617, 914, 626, 849, 220]) == 0\nassert solution.numberOfArithmeticSlices([147, -640, -615, -283, 55]) == 0",
  "inefficient_solution": "class Solution:\n    def numberOfArithmeticSlices(self, nums: List[int]) -> int:\n        f = []\n        ans = 0\n        for i in range(len(nums)):\n            g = []\n            for j in range(i):\n                d = nums[i] - nums[j]\n                h = []\n                for k in range(j):\n                    if nums[j] - nums[k] == d:\n                        h.append(k)\n                ans += len(g)\n                g.append((d, len(f) if len(g) == 0 else g[-1][1] + 1))\n                f.append(g)\n        return ans",
  "is_python": true
}