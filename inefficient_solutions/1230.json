{
  "problem_idx": 1230,
  "task_name": "Toss Strange Coins",
  "markdown_description": "\nYou have some coins.\u00a0 The `i`-th\u00a0coin has a probability\u00a0`prob[i]` of facing heads when tossed.\n\n\nReturn the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** prob = [0.4], target = 1\n**Output:** 0.40000\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** prob = [0.5,0.5,0.5,0.5,0.5], target = 0\n**Output:** 0.03125\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= prob.length <= 1000`\n* `0 <= prob[i] <= 1`\n* `0 <= target``<= prob.length`\n* Answers will be accepted as correct if they are within `10^-5` of the correct answer.\n\n\n",
  "canonical_solution": "class Solution:\n    def probabilityOfHeads(self, prob: List[float], target: int) -> float:\n        f = [0] * (target + 1)\n        f[0] = 1\n        for p in prob:\n            for j in range(target, -1, -1):\n                f[j] *= 1 - p\n                if j:\n                    f[j] += p * f[j - 1]\n        return f[target]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def probabilityOfHeads(self, prob: List[float], target: int) -> float:\n        f = [0] * (target + 1)\n        f[0] = 1\n        for p in prob:\n            for j in range(target, -1, -1):\n                f[j] *= 1 - p\n                if j:\n                    f[j] += p * f[j - 1]\n        return f[target]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random probabilities list\n    prob = [round(random.random(), 2) for _ in range(random.randint(1, 10))]\n    \n    # Generate a random target\n    target = random.randint(0, len(prob))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.probabilityOfHeads(prob, target)\n\n    return prob, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        prob, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.probabilityOfHeads(prob, target) == expected_result\n        \n        print(f\"assert solution.probabilityOfHeads({prob}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.probabilityOfHeads({prob}, {target}) == {expected_result}\")\n    \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.probabilityOfHeads([0.4, 0.63, 0.81, 0.67, 0.92, 0.05, 0.4, 0.15, 0.9, 0.05], 4) == 0.23344081091129998\nassert solution.probabilityOfHeads([0.22], 1) == 0.22\nassert solution.probabilityOfHeads([0.28, 0.18, 0.54, 0.44], 2) == 0.33458624000000003\nassert solution.probabilityOfHeads([0.71, 0.31, 0.9], 0) == 0.020009999999999997\nassert solution.probabilityOfHeads([0.53, 0.83, 0.09, 0.69, 0.75, 0.08], 6) == 0.0016390674\nassert solution.probabilityOfHeads([0.69, 0.75, 0.14, 0.28], 3) == 0.192654\nassert solution.probabilityOfHeads([0.49], 0) == 0.51\nassert solution.probabilityOfHeads([0.05, 0.23, 0.92, 0.08], 2) == 0.2738544\nassert solution.probabilityOfHeads([0.24, 0.61, 0.2, 0.72, 0.5], 4) == 0.0969216\nassert solution.probabilityOfHeads([0.66, 0.96, 0.21, 0.77, 0.17, 0.69, 0.35], 1) == 0.013441562755200007\nassert solution.probabilityOfHeads([0.14, 0.63, 0.41, 0.51, 0.25, 0.58, 0.93, 0.84, 0.18], 8) == 0.006646526740728\nassert solution.probabilityOfHeads([0.51, 0.51, 0.41, 0.98, 0.17, 0.49, 0.71, 0.02], 1) == 0.01888605317920161\nassert solution.probabilityOfHeads([0.91, 0.8, 0.75, 0.3, 0.07, 0.9, 0.96], 0) == 1.1717999999999999e-05\nassert solution.probabilityOfHeads([0.39, 0.22, 0.43, 0.1, 0.64], 1) == 0.31323024\nassert solution.probabilityOfHeads([0.97, 0.55, 0.83, 0.61, 0.63, 0.66, 0.14, 0.38, 0.51, 0.71], 3) == 0.030701166328759893\nassert solution.probabilityOfHeads([0.22], 0) == 0.78\nassert solution.probabilityOfHeads([0.91, 0.66], 2) == 0.6006\nassert solution.probabilityOfHeads([0.09, 0.11, 0.47, 0.32, 0.92, 0.91, 0.4, 0.79], 5) == 0.23850191180572802\nassert solution.probabilityOfHeads([0.46], 0) == 0.54\nassert solution.probabilityOfHeads([0.23, 0.81, 0.76, 0.64, 0.53, 0.55, 0.81, 0.75, 0.55, 0.94], 6) == 0.25404318819667154\nassert solution.probabilityOfHeads([0.07, 0.25, 0.95, 0.88, 0.26], 3) == 0.3417022\nassert solution.probabilityOfHeads([0.34, 0.61, 0.49, 0.49, 0.65, 0.23, 0.65], 3) == 0.28864058663250003\nassert solution.probabilityOfHeads([0.04, 0.93, 0.04, 0.0], 4) == 0.0\nassert solution.probabilityOfHeads([0.4, 0.69, 0.75, 0.41, 0.81, 0.98, 0.13], 2) == 0.052874453470000006\nassert solution.probabilityOfHeads([0.35, 0.74, 0.05, 0.92, 0.47, 0.25, 0.94, 0.04, 0.8, 0.81], 9) == 0.0017044362748240003\nassert solution.probabilityOfHeads([0.94, 0.09, 0.53, 0.09, 0.72, 0.01], 5) == 0.003502924056\nassert solution.probabilityOfHeads([0.65, 0.15, 0.79, 0.87], 4) == 0.06701175000000001\nassert solution.probabilityOfHeads([0.69], 0) == 0.31000000000000005\nassert solution.probabilityOfHeads([0.44, 0.82, 0.31, 0.95], 1) == 0.08621160000000003\nassert solution.probabilityOfHeads([0.51, 0.11], 0) == 0.4361\nassert solution.probabilityOfHeads([0.02, 0.28, 0.92, 0.49, 0.26, 0.73, 0.92, 0.8, 0.95, 0.09], 8) == 0.028520905650570243\nassert solution.probabilityOfHeads([0.83, 0.93], 2) == 0.7719\nassert solution.probabilityOfHeads([0.59, 0.12], 2) == 0.07079999999999999\nassert solution.probabilityOfHeads([0.52, 0.88, 0.12, 0.09, 0.67], 2) == 0.418656864\nassert solution.probabilityOfHeads([0.72, 0.88], 2) == 0.6335999999999999\nassert solution.probabilityOfHeads([0.68, 0.8, 0.46, 0.6, 0.56, 0.89, 0.92, 0.54, 0.33], 2) == 0.006078980444569598\nassert solution.probabilityOfHeads([0.75, 0.63, 0.87, 0.36, 0.41, 0.56, 0.76, 0.93, 0.43, 0.26], 2) == 0.005272669607970655\nassert solution.probabilityOfHeads([0.67, 0.74, 0.13, 0.08, 0.37, 0.73], 6) == 0.0013927220320000002\nassert solution.probabilityOfHeads([0.86, 0.16, 0.43, 0.39, 0.77, 0.45, 0.39, 0.94], 0) == 0.0001893143886480002\nassert solution.probabilityOfHeads([0.32, 0.77, 0.41], 2) == 0.390228\nassert solution.probabilityOfHeads([0.58, 0.81, 0.86, 0.48], 2) == 0.29882864000000003\nassert solution.probabilityOfHeads([0.61, 0.78, 0.25, 0.63, 0.42], 0) == 0.01380951\nassert solution.probabilityOfHeads([0.95, 0.91, 0.61, 0.82, 0.81, 0.02, 0.6, 0.82, 0.58], 9) == 0.0019990184196527995\nassert solution.probabilityOfHeads([0.98, 0.98, 0.38], 3) == 0.364952\nassert solution.probabilityOfHeads([0.45, 0.02, 0.45, 0.66, 0.72, 0.35, 0.74], 4) == 0.29821851060000004\nassert solution.probabilityOfHeads([0.23, 0.33], 2) == 0.07590000000000001\nassert solution.probabilityOfHeads([0.84, 0.49, 0.54, 0.99], 2) == 0.27905016\nassert solution.probabilityOfHeads([0.65, 0.2, 0.13, 0.26, 0.39, 0.58, 0.43], 5) == 0.051084900204\nassert solution.probabilityOfHeads([0.24, 0.47, 0.93], 3) == 0.10490399999999998\nassert solution.probabilityOfHeads([0.8, 0.72, 0.18, 0.32], 1) == 0.2267456\nassert solution.probabilityOfHeads([0.64, 0.24, 0.91, 0.27], 1) == 0.22603392\nassert solution.probabilityOfHeads([0.12], 0) == 0.88\nassert solution.probabilityOfHeads([0.88, 0.56, 0.2, 0.9, 0.49, 0.24, 0.95, 0.24], 7) == 0.029634825830400002\nassert solution.probabilityOfHeads([0.04, 0.14, 0.4, 0.36, 0.55, 0.69, 0.2, 1.0], 4) == 0.2916135136\nassert solution.probabilityOfHeads([0.04, 0.4, 0.65, 0.53, 0.21, 0.27, 0.11, 0.12], 0) == 0.04279677228288\nassert solution.probabilityOfHeads([0.79, 0.13, 0.67, 0.78], 0) == 0.013264019999999994\nassert solution.probabilityOfHeads([0.68, 0.31], 0) == 0.22079999999999994\nassert solution.probabilityOfHeads([0.88, 0.07, 0.61, 0.24, 0.0, 0.68], 2) == 0.367420608\nassert solution.probabilityOfHeads([0.24, 0.2, 0.61, 0.69, 0.08, 1.0, 0.37, 0.11], 8) == 6.578161919999999e-05\nassert solution.probabilityOfHeads([0.21, 0.35, 0.77, 0.14, 0.89, 0.93, 0.34, 0.62, 0.21, 0.93], 2) == 0.006942296696794049\nassert solution.probabilityOfHeads([0.07, 0.91, 0.13], 2) == 0.166257\nassert solution.probabilityOfHeads([0.6, 0.29, 0.31, 0.98, 0.34, 0.05], 0) == 0.0024573384000000013\nassert solution.probabilityOfHeads([0.5, 0.42, 0.29, 0.01, 0.54, 0.38, 0.74, 0.73], 3) == 0.27738781351504\nassert solution.probabilityOfHeads([0.03, 0.05, 0.37, 0.63, 0.99], 1) == 0.2177520875\nassert solution.probabilityOfHeads([0.31], 1) == 0.31\nassert solution.probabilityOfHeads([0.28, 0.04, 0.48, 0.89, 0.52, 0.5, 0.69, 0.63], 5) == 0.24108405772288002\nassert solution.probabilityOfHeads([0.54, 0.89], 0) == 0.05059999999999999\nassert solution.probabilityOfHeads([0.1, 0.73], 2) == 0.073\nassert solution.probabilityOfHeads([0.39, 0.38, 0.25], 3) == 0.03705\nassert solution.probabilityOfHeads([0.42, 0.33, 0.6], 1) == 0.42228\nassert solution.probabilityOfHeads([0.98, 0.41], 0) == 0.011800000000000012\nassert solution.probabilityOfHeads([1.0, 0.92, 0.59, 0.08, 0.58, 0.17, 0.41, 0.28, 0.85, 0.6], 3) == 0.047109369444172815\nassert solution.probabilityOfHeads([0.12], 0) == 0.88\nassert solution.probabilityOfHeads([0.68, 0.11, 0.73, 0.06, 0.63, 0.61, 0.58, 0.49, 0.66, 1.0], 7) == 0.17665759314284163\nassert solution.probabilityOfHeads([0.15, 0.95, 0.68, 0.7, 0.54], 2) == 0.228128\nassert solution.probabilityOfHeads([0.77, 0.23, 0.8, 0.03, 0.02, 0.31, 0.17], 4) == 0.09310763437399999\nassert solution.probabilityOfHeads([0.33, 0.38, 0.21, 0.04, 0.72, 0.94], 3) == 0.36483888703999995\nassert solution.probabilityOfHeads([0.94, 0.28], 2) == 0.2632\nassert solution.probabilityOfHeads([0.5, 0.32, 0.94, 0.07], 0) == 0.018972000000000013\nassert solution.probabilityOfHeads([0.9, 0.94, 0.75, 0.61, 0.29, 0.38, 0.43, 0.58, 0.71], 9) == 0.007552623817565998\nassert solution.probabilityOfHeads([0.9, 0.16, 0.45, 0.04, 0.2], 3) == 0.14902400000000005\nassert solution.probabilityOfHeads([0.8, 0.84, 0.88, 0.45, 0.56, 0.18, 0.17, 0.13], 7) == 0.011094479262720003\nassert solution.probabilityOfHeads([0.82, 0.69, 0.93, 0.41, 0.59, 0.13, 0.36, 0.13, 0.59], 3) == 0.13738444921103615\nassert solution.probabilityOfHeads([0.79], 1) == 0.79\nassert solution.probabilityOfHeads([0.78], 0) == 0.21999999999999997\nassert solution.probabilityOfHeads([0.68, 0.01, 0.18, 0.37, 0.1, 0.15, 0.04, 0.42], 2) == 0.36542400330528\nassert solution.probabilityOfHeads([0.85, 0.81, 0.33, 0.12, 0.51, 0.42, 0.48, 0.68], 7) == 0.026058405900096004\nassert solution.probabilityOfHeads([0.54, 0.1, 0.91, 0.6, 0.76, 0.4], 4) == 0.31395664\nassert solution.probabilityOfHeads([0.42, 0.9, 0.64, 0.22, 0.33, 0.32, 0.45, 0.39, 0.63, 0.58], 8) == 0.029491874824432322\nassert solution.probabilityOfHeads([0.6, 0.89, 0.44, 0.58, 0.75, 0.49, 0.37, 0.98, 0.61, 0.42], 3) == 0.025986609532637775\nassert solution.probabilityOfHeads([0.6, 0.82], 0) == 0.07200000000000002\nassert solution.probabilityOfHeads([0.56, 0.04, 0.34, 0.92, 0.88, 0.55, 0.68], 2) == 0.07371773890559997\nassert solution.probabilityOfHeads([0.86, 0.65, 0.83, 0.46, 0.21, 0.67, 0.78, 0.88], 3) == 0.052051190964944004\nassert solution.probabilityOfHeads([0.76, 0.44, 0.12, 0.85, 0.66, 0.23, 0.72], 7) == 0.0037279554048\nassert solution.probabilityOfHeads([0.76, 0.95], 1) == 0.266\nassert solution.probabilityOfHeads([0.43, 0.92, 0.72, 0.04, 0.6, 0.9, 0.68], 4) == 0.34383641344\nassert solution.probabilityOfHeads([0.79], 1) == 0.79\nassert solution.probabilityOfHeads([0.28, 0.72, 0.55, 0.01, 0.14, 0.16, 0.48, 0.18], 5) == 0.037407158231551996\nassert solution.probabilityOfHeads([0.29, 0.79, 0.97, 0.09, 0.46], 3) == 0.400963058\nassert solution.probabilityOfHeads([0.55, 0.39, 1.0], 2) == 0.511",
  "inefficient_solution": "from collections import OrderedDict\n\nclass Solution:\n    def probabilityOfHeads(self, prob: List[float], target: int) -> float:\n        memo = OrderedDict()\n        memo[0] = 1\n        for _ in range(1000000):  # arbitrary large number\n            new_memo = OrderedDict()\n            for j, value in memo.items():\n                for p in prob:\n                    new_key = j\n                    if j:\n                        new_key += 1\n                    if new_key not in new_memo:\n                        new_memo[new_key] = 0\n                    new_memo[new_key] += p * value\n                new_memo[new_key] *= 1 - p\n            memo = new_memo\n        return memo.get(target, 0)",
  "is_python": true
}