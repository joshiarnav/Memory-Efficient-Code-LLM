{
  "problem_idx": 649,
  "task_name": "Dota",
  "markdown_description": "\nIn the world of Dota2, there are two parties: the Radiant and the Dire.\n\n\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise **one** of the two rights:\n\n\n* **Ban one senator's right:** A senator can make another senator lose all his rights in this and all the following rounds.\n* **Announce the victory:** If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n\n\nGiven a string `senate` representing each senator's party belonging. The character `'R'` and `'D'` represent the Radiant party and the Dire party. Then if there are `n` senators, the size of the given string will be `n`.\n\n\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\n\n\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be `\"Radiant\"` or `\"Dire\"`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** senate = \"RD\"\n**Output:** \"Radiant\"\n**Explanation:** \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** senate = \"RDD\"\n**Output:** \"Dire\"\n**Explanation:** \nThe first senator comes from Radiant and he can just ban the next senator's right in round 1. \nAnd the second senator can't exercise any rights anymore since his right has been banned. \nAnd the third senator comes from Dire and he can ban the first senator's right in round 1. \nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == senate.length`\n* `1 <= n <= 104`\n* `senate[i]` is either `'R'` or `'D'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        qr = deque()\n        qd = deque()\n        for i, c in enumerate(senate):\n            if c == \"R\":\n                qr.append(i)\n            else:\n                qd.append(i)\n        n = len(senate)\n        while qr and qd:\n            if qr[0] < qd[0]:\n                qr.append(qr[0] + n)\n            else:\n                qd.append(qd[0] + n)\n            qr.popleft()\n            qd.popleft()\n        return \"Radiant\" if qr else \"Dire\"\n",
  "test_case_generator": "\nimport random\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random senate string\n    senate = ''.join(random.choices(['R', 'D'], k=random.randint(1, 11)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.predictPartyVictory(senate)\n\n    return senate, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        senate, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.predictPartyVictory(senate) == expected_result\n        print(f\"assert solution.predictPartyVictory('{senate}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.predictPartyVictory('{senate}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.predictPartyVictory('DDRDDR') == 'Dire'\nassert solution.predictPartyVictory('DRRR') == 'Radiant'\nassert solution.predictPartyVictory('R') == 'Radiant'\nassert solution.predictPartyVictory('RD') == 'Radiant'\nassert solution.predictPartyVictory('RDDRDDR') == 'Dire'\nassert solution.predictPartyVictory('D') == 'Dire'\nassert solution.predictPartyVictory('RRDDRD') == 'Radiant'\nassert solution.predictPartyVictory('RRRDR') == 'Radiant'\nassert solution.predictPartyVictory('DRDRD') == 'Dire'\nassert solution.predictPartyVictory('DRDRDDDDD') == 'Dire'\nassert solution.predictPartyVictory('RDRRR') == 'Radiant'\nassert solution.predictPartyVictory('DDDRR') == 'Dire'\nassert solution.predictPartyVictory('RRRDR') == 'Radiant'\nassert solution.predictPartyVictory('RDRDRDDDRD') == 'Dire'\nassert solution.predictPartyVictory('RRDDRRDRRDR') == 'Radiant'\nassert solution.predictPartyVictory('RDDDRDDRDR') == 'Dire'\nassert solution.predictPartyVictory('DDRDDDRRR') == 'Dire'\nassert solution.predictPartyVictory('DDRRD') == 'Dire'\nassert solution.predictPartyVictory('DRDRDDDRDRD') == 'Dire'\nassert solution.predictPartyVictory('DRDDRDRRRRD') == 'Dire'\nassert solution.predictPartyVictory('RRRDRRDDRD') == 'Radiant'\nassert solution.predictPartyVictory('DRRD') == 'Dire'\nassert solution.predictPartyVictory('RRDR') == 'Radiant'\nassert solution.predictPartyVictory('RRRRDRD') == 'Radiant'\nassert solution.predictPartyVictory('DDD') == 'Dire'\nassert solution.predictPartyVictory('DRRDRDRRRDR') == 'Radiant'\nassert solution.predictPartyVictory('RD') == 'Radiant'\nassert solution.predictPartyVictory('DR') == 'Dire'\nassert solution.predictPartyVictory('RDDDRRR') == 'Radiant'\nassert solution.predictPartyVictory('RDRD') == 'Radiant'\nassert solution.predictPartyVictory('RDRRDRDDRRD') == 'Radiant'\nassert solution.predictPartyVictory('DR') == 'Dire'\nassert solution.predictPartyVictory('D') == 'Dire'\nassert solution.predictPartyVictory('DRRRRRRDDRD') == 'Radiant'\nassert solution.predictPartyVictory('RDDR') == 'Radiant'\nassert solution.predictPartyVictory('DDR') == 'Dire'\nassert solution.predictPartyVictory('RRRRDDR') == 'Radiant'\nassert solution.predictPartyVictory('RD') == 'Radiant'\nassert solution.predictPartyVictory('RDRRD') == 'Radiant'\nassert solution.predictPartyVictory('DR') == 'Dire'\nassert solution.predictPartyVictory('RDDD') == 'Dire'\nassert solution.predictPartyVictory('RRRDRRDR') == 'Radiant'\nassert solution.predictPartyVictory('RDDDRRDDRDR') == 'Dire'\nassert solution.predictPartyVictory('RDRRRDRDRR') == 'Radiant'\nassert solution.predictPartyVictory('DDRRD') == 'Dire'\nassert solution.predictPartyVictory('RD') == 'Radiant'\nassert solution.predictPartyVictory('RR') == 'Radiant'\nassert solution.predictPartyVictory('DRRRRDRDD') == 'Radiant'\nassert solution.predictPartyVictory('R') == 'Radiant'\nassert solution.predictPartyVictory('RDR') == 'Radiant'\nassert solution.predictPartyVictory('RRRRR') == 'Radiant'\nassert solution.predictPartyVictory('RRRRRDRD') == 'Radiant'\nassert solution.predictPartyVictory('DDDRRR') == 'Dire'\nassert solution.predictPartyVictory('RDR') == 'Radiant'\nassert solution.predictPartyVictory('RDDDDDD') == 'Dire'\nassert solution.predictPartyVictory('DRRRRRRD') == 'Radiant'\nassert solution.predictPartyVictory('DR') == 'Dire'\nassert solution.predictPartyVictory('D') == 'Dire'\nassert solution.predictPartyVictory('RDDRRR') == 'Radiant'\nassert solution.predictPartyVictory('DRDRR') == 'Dire'\nassert solution.predictPartyVictory('RDD') == 'Dire'\nassert solution.predictPartyVictory('RDD') == 'Dire'\nassert solution.predictPartyVictory('RRRDDRRR') == 'Radiant'\nassert solution.predictPartyVictory('RR') == 'Radiant'\nassert solution.predictPartyVictory('RRRD') == 'Radiant'\nassert solution.predictPartyVictory('DDDDRDDRRD') == 'Dire'\nassert solution.predictPartyVictory('DD') == 'Dire'\nassert solution.predictPartyVictory('DDRDRR') == 'Dire'\nassert solution.predictPartyVictory('DRDRDR') == 'Dire'\nassert solution.predictPartyVictory('RRDRD') == 'Radiant'\nassert solution.predictPartyVictory('DDRDRRR') == 'Dire'\nassert solution.predictPartyVictory('DRRRRDRDDRR') == 'Radiant'\nassert solution.predictPartyVictory('RRRD') == 'Radiant'\nassert solution.predictPartyVictory('DD') == 'Dire'\nassert solution.predictPartyVictory('RRRDDR') == 'Radiant'\nassert solution.predictPartyVictory('RRDRRRRDR') == 'Radiant'\nassert solution.predictPartyVictory('RDRD') == 'Radiant'\nassert solution.predictPartyVictory('DDRDDRDRD') == 'Dire'\nassert solution.predictPartyVictory('RR') == 'Radiant'\nassert solution.predictPartyVictory('RRD') == 'Radiant'\nassert solution.predictPartyVictory('DDRRR') == 'Dire'\nassert solution.predictPartyVictory('RRR') == 'Radiant'\nassert solution.predictPartyVictory('DDRDD') == 'Dire'\nassert solution.predictPartyVictory('RR') == 'Radiant'\nassert solution.predictPartyVictory('RRRDD') == 'Radiant'\nassert solution.predictPartyVictory('DRRRRR') == 'Radiant'\nassert solution.predictPartyVictory('RRDDRR') == 'Radiant'\nassert solution.predictPartyVictory('D') == 'Dire'\nassert solution.predictPartyVictory('RD') == 'Radiant'\nassert solution.predictPartyVictory('DRRDRRRD') == 'Radiant'\nassert solution.predictPartyVictory('DRDRRDRDRDR') == 'Radiant'\nassert solution.predictPartyVictory('RDRDDDDD') == 'Dire'\nassert solution.predictPartyVictory('DDDD') == 'Dire'\nassert solution.predictPartyVictory('DDDDDRR') == 'Dire'\nassert solution.predictPartyVictory('RRRRD') == 'Radiant'\nassert solution.predictPartyVictory('RRRD') == 'Radiant'\nassert solution.predictPartyVictory('RDDRDRDRR') == 'Radiant'\nassert solution.predictPartyVictory('DDRDRDDRRR') == 'Dire'\nassert solution.predictPartyVictory('RDRRRD') == 'Radiant'\nassert solution.predictPartyVictory('RRDRDD') == 'Radiant'",
  "inefficient_solution": "class Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        n = len(senate)\n        radiant = []\n        dire = []\n        victories = [0, 0]\n        for i, c in enumerate(senate):\n            if c == 'R':\n                radiant.append(i)\n            else:\n                dire.append(i)\n        while radiant and dire:\n            if radiant[0] < dire[0]:\n                radiant.append(radiant[0] + n)\n                victories[0] += 1\n            else:\n                dire.append(dire[0] + n)\n            victories[0] += 1\n            victories[1] += 1\n            radiant.pop(0)\n            dire.pop(0)\n        return \"Radiant\" if victories[0] > victories[1] else \"Dire\"",
  "is_python": true
}