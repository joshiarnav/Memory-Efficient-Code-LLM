{
  "problem_idx": 904,
  "task_name": "Fruit Into Baskets",
  "markdown_description": "\nYou are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array `fruits` where `fruits[i]` is the **type** of fruit the `ith` tree produces.\n\n\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\n\n\n* You only have **two** baskets, and each basket can only hold a **single type** of fruit. There is no limit on the amount of fruit each basket can hold.\n* Starting from any tree of your choice, you must pick **exactly one fruit** from **every** tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\n* Once you reach a tree with fruit that cannot fit in your baskets, you must stop.\n\n\nGiven the integer array `fruits`, return *the **maximum** number of fruits you can pick*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** fruits = [1,2,1]\n**Output:** 3\n**Explanation:** We can pick from all 3 trees.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** fruits = [0,1,2,2]\n**Output:** 3\n**Explanation:** We can pick from trees [1,2,2].\nIf we had started at the first tree, we would only pick from trees [0,1].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** fruits = [1,2,3,2,2]\n**Output:** 4\n**Explanation:** We can pick from trees [2,3,2,2].\nIf we had started at the first tree, we would only pick from trees [1,2].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= fruits.length <= 105`\n* `0 <= fruits[i] < fruits.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def totalFruit(self, fruits: List[int]) -> int:\n        cnt = Counter()\n        j = 0\n        for x in fruits:\n            cnt[x] += 1\n            if len(cnt) > 2:\n                y = fruits[j]\n                cnt[y] -= 1\n                if cnt[y] == 0:\n                    cnt.pop(y)\n                j += 1\n        return len(fruits) - j\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def totalFruit(self, fruits):\n        # your code here\n        pass\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random fruits list\n    fruits = random.choices(range(1, 6), k=random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.totalFruit(fruits)\n\n    return fruits, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        fruits, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.totalFruit(fruits) == expected_result\n        print(f\"assert solution.totalFruit({fruits}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.totalFruit({fruits}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.totalFruit([1, 5, 2, 4, 5, 2, 5, 5]) == None\nassert solution.totalFruit([2, 2, 5, 4, 3, 2, 3, 4, 5, 4]) == None\nassert solution.totalFruit([2, 2, 4]) == None\nassert solution.totalFruit([1, 5, 3, 2, 2]) == None\nassert solution.totalFruit([5, 1, 3, 1, 4, 5, 1]) == None\nassert solution.totalFruit([2, 5, 2, 5, 2, 3, 4]) == None\nassert solution.totalFruit([5, 1, 1, 5, 2, 1, 5, 3, 3]) == None\nassert solution.totalFruit([3, 4, 3, 1, 3, 1, 3, 2]) == None\nassert solution.totalFruit([5, 2, 3, 2, 5, 3, 3, 1, 3]) == None\nassert solution.totalFruit([5, 3, 4, 2, 2]) == None\nassert solution.totalFruit([1, 1]) == None\nassert solution.totalFruit([4, 5, 4, 1, 3, 5, 1, 2, 5]) == None\nassert solution.totalFruit([4, 4, 2]) == None\nassert solution.totalFruit([5, 5, 4, 5, 5, 4]) == None\nassert solution.totalFruit([3, 3, 2, 5, 4, 1, 1, 1, 3]) == None\nassert solution.totalFruit([2, 3, 5, 4, 2, 5, 2, 4, 5]) == None\nassert solution.totalFruit([2, 3, 1, 4, 4, 1]) == None\nassert solution.totalFruit([4, 3, 2, 2, 2, 1]) == None\nassert solution.totalFruit([3, 5, 5]) == None\nassert solution.totalFruit([3, 4, 2, 1, 2, 5, 2, 4]) == None\nassert solution.totalFruit([5, 5, 3, 2, 3, 3, 3, 5, 5]) == None\nassert solution.totalFruit([3, 3]) == None\nassert solution.totalFruit([3, 4, 5]) == None\nassert solution.totalFruit([1, 4]) == None\nassert solution.totalFruit([1, 4]) == None\nassert solution.totalFruit([1, 3, 5, 1]) == None\nassert solution.totalFruit([2, 2, 2, 2]) == None\nassert solution.totalFruit([4, 5, 3, 2, 4, 4, 2, 3, 3, 3]) == None\nassert solution.totalFruit([2, 1, 3, 5, 1, 5, 1, 1, 1, 2]) == None\nassert solution.totalFruit([3, 5, 4, 3, 4, 2, 1]) == None\nassert solution.totalFruit([4, 3, 3, 3, 1, 1, 5, 1]) == None\nassert solution.totalFruit([4, 2, 4, 5, 5, 1, 2, 4, 5]) == None\nassert solution.totalFruit([2, 4, 5, 3]) == None\nassert solution.totalFruit([2, 3, 2, 1, 1, 4, 3, 3]) == None\nassert solution.totalFruit([4, 4]) == None\nassert solution.totalFruit([1, 2, 5, 1, 2, 4]) == None\nassert solution.totalFruit([5, 5, 4, 2]) == None\nassert solution.totalFruit([5, 2, 4, 1, 5, 5, 3, 5]) == None\nassert solution.totalFruit([3, 3]) == None\nassert solution.totalFruit([5, 5]) == None\nassert solution.totalFruit([5, 3, 1, 5]) == None\nassert solution.totalFruit([1, 2, 5, 4, 5]) == None\nassert solution.totalFruit([2, 2, 2, 5]) == None\nassert solution.totalFruit([2, 5, 1, 4, 2]) == None\nassert solution.totalFruit([5, 3, 3, 1, 3]) == None\nassert solution.totalFruit([2, 3, 3, 4, 5, 5, 5]) == None\nassert solution.totalFruit([1, 3]) == None\nassert solution.totalFruit([1, 2, 2, 4, 2, 5, 1]) == None\nassert solution.totalFruit([2, 5, 2, 3, 2]) == None\nassert solution.totalFruit([1, 5, 4, 3, 5, 1, 5, 4]) == None\nassert solution.totalFruit([1, 3, 3, 1, 4, 2, 3]) == None\nassert solution.totalFruit([5, 1, 5, 4, 1, 1, 3, 3]) == None\nassert solution.totalFruit([3, 4, 3]) == None\nassert solution.totalFruit([4, 5, 4, 3, 1, 2]) == None\nassert solution.totalFruit([4, 4]) == None\nassert solution.totalFruit([2, 4, 4, 4, 4, 4, 4, 2, 1, 1]) == None\nassert solution.totalFruit([3, 4, 5, 5, 1]) == None\nassert solution.totalFruit([2, 3, 5, 2, 1, 2, 4, 5]) == None\nassert solution.totalFruit([2, 4, 1, 5, 5, 5, 3, 4, 2, 1]) == None\nassert solution.totalFruit([1, 4, 1, 5, 5, 1, 5]) == None\nassert solution.totalFruit([2, 5, 1, 2, 4]) == None\nassert solution.totalFruit([2, 5, 5, 2, 1, 4, 3]) == None\nassert solution.totalFruit([4, 1]) == None\nassert solution.totalFruit([4, 2]) == None\nassert solution.totalFruit([5, 2, 5, 2, 4, 5, 5, 4, 1, 1]) == None\nassert solution.totalFruit([5, 3]) == None\nassert solution.totalFruit([1, 2, 1, 1, 2, 3, 2, 1, 5, 1]) == None\nassert solution.totalFruit([4, 3, 5, 2, 2]) == None\nassert solution.totalFruit([5, 5, 1, 1]) == None\nassert solution.totalFruit([4, 3, 2, 3, 2, 3, 1, 2, 1, 3]) == None\nassert solution.totalFruit([4, 4, 1, 1, 2, 5, 2, 5, 3]) == None\nassert solution.totalFruit([5, 4, 2, 2, 1, 1]) == None\nassert solution.totalFruit([2, 3, 2, 1]) == None\nassert solution.totalFruit([4, 3]) == None\nassert solution.totalFruit([5, 1, 2, 1, 4, 2, 5, 3, 4]) == None\nassert solution.totalFruit([2, 2, 2]) == None\nassert solution.totalFruit([2, 3, 3, 2, 1, 3]) == None\nassert solution.totalFruit([4, 3]) == None\nassert solution.totalFruit([4, 5, 3, 5]) == None\nassert solution.totalFruit([5, 3, 4, 5, 1]) == None\nassert solution.totalFruit([5, 5, 2, 4, 3]) == None\nassert solution.totalFruit([2, 1, 4, 1, 4, 1, 5, 2]) == None\nassert solution.totalFruit([5, 1, 3, 2, 4, 3, 5, 1, 3, 4]) == None\nassert solution.totalFruit([4, 5, 4, 1]) == None\nassert solution.totalFruit([4, 2]) == None\nassert solution.totalFruit([5, 3, 3, 4, 2]) == None\nassert solution.totalFruit([1, 5, 4, 2, 2, 5, 1, 1, 4]) == None\nassert solution.totalFruit([5, 1, 3]) == None\nassert solution.totalFruit([1, 5, 4, 4, 3]) == None\nassert solution.totalFruit([5, 2, 2, 3, 3, 2, 5, 4, 1]) == None\nassert solution.totalFruit([3, 3]) == None\nassert solution.totalFruit([3, 3, 3, 1, 5, 5]) == None\nassert solution.totalFruit([5, 2, 2, 4, 2, 2]) == None\nassert solution.totalFruit([1, 4, 3, 2, 2, 4, 2, 3, 5, 3]) == None\nassert solution.totalFruit([5, 2, 1]) == None\nassert solution.totalFruit([2, 5, 4]) == None\nassert solution.totalFruit([5, 1, 2]) == None\nassert solution.totalFruit([1, 4]) == None\nassert solution.totalFruit([4, 4, 2, 2, 4, 2]) == None\nassert solution.totalFruit([5, 3, 3, 3, 4]) == None",
  "inefficient_solution": "class Solution:\n    def totalFruit(self, fruits):\n        baskets = {}\n        max_fruits = 0\n        for i, fruit in enumerate(fruits):\n            if fruit not in baskets:\n                baskets[fruit] = i\n            else:\n                max_fruits = max(max_fruits, i - baskets[fruit])\n                baskets[fruit] = i\n            for j in list(baskets.keys()):\n                if j not in fruits[i:]:\n                    del baskets[j]\n                    max_fruits = max(max_fruits, len(fruits[:i]) - baskets[fruit])\n        return max_fruits",
  "is_python": true
}