{
  "problem_idx": 2380,
  "task_name": "Time Needed to Rearrange a Binary String",
  "markdown_description": "\nYou are given a binary string `s`. In one second, **all** occurrences of `\"01\"` are **simultaneously** replaced with `\"10\"`. This process **repeats** until no occurrences of `\"01\"` exist.\n\n\nReturn *the number of seconds needed to complete this process.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"0110101\"\n**Output:** 4\n**Explanation:** \nAfter one second, s becomes \"1011010\".\nAfter another second, s becomes \"1101100\".\nAfter the third second, s becomes \"1110100\".\nAfter the fourth second, s becomes \"1111000\".\nNo occurrence of \"01\" exists any longer, and the process needed 4 seconds to complete,\nso we return 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"11100\"\n**Output:** 0\n**Explanation:**\nNo occurrence of \"01\" exists in s, and the processes needed 0 seconds to complete,\nso we return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s[i]` is either `'0'` or `'1'`.\n\n\n\u00a0\n\n\n**Follow up:**\n\n\nCan you solve this problem in O(n) time complexity?\n\n\n",
  "canonical_solution": "class Solution:\n    def secondsToRemoveOccurrences(self, s: str) -> int:\n        ans = cnt = 0\n        for c in s:\n            if c == '0':\n                cnt += 1\n            elif cnt:\n                ans = max(ans + 1, cnt)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def secondsToRemoveOccurrences(self, s: str) -> int:\n        ans = cnt = 0\n        for c in s:\n            if c == '0':\n                cnt += 1\n            elif cnt:\n                ans = max(ans + 1, cnt)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random binary string\n    s = ''.join(random.choice(['0', '1']) for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.secondsToRemoveOccurrences(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.secondsToRemoveOccurrences(s) == expected_result\n        print(f\"assert solution.secondsToRemoveOccurrences('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.secondsToRemoveOccurrences('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.secondsToRemoveOccurrences('0011110101') == 7\nassert solution.secondsToRemoveOccurrences('0001010') == 4\nassert solution.secondsToRemoveOccurrences('10101') == 2\nassert solution.secondsToRemoveOccurrences('01111') == 4\nassert solution.secondsToRemoveOccurrences('01010') == 2\nassert solution.secondsToRemoveOccurrences('111011100') == 3\nassert solution.secondsToRemoveOccurrences('0001010') == 4\nassert solution.secondsToRemoveOccurrences('0100011001') == 6\nassert solution.secondsToRemoveOccurrences('1') == 0\nassert solution.secondsToRemoveOccurrences('11010') == 1\nassert solution.secondsToRemoveOccurrences('10101001') == 4\nassert solution.secondsToRemoveOccurrences('0') == 0\nassert solution.secondsToRemoveOccurrences('00011') == 4\nassert solution.secondsToRemoveOccurrences('01111011') == 6\nassert solution.secondsToRemoveOccurrences('1001') == 2\nassert solution.secondsToRemoveOccurrences('1000100') == 3\nassert solution.secondsToRemoveOccurrences('11011000') == 2\nassert solution.secondsToRemoveOccurrences('01') == 1\nassert solution.secondsToRemoveOccurrences('001') == 2\nassert solution.secondsToRemoveOccurrences('000111') == 5\nassert solution.secondsToRemoveOccurrences('1') == 0\nassert solution.secondsToRemoveOccurrences('01111011') == 6\nassert solution.secondsToRemoveOccurrences('000010') == 4\nassert solution.secondsToRemoveOccurrences('11100') == 0\nassert solution.secondsToRemoveOccurrences('0011') == 3\nassert solution.secondsToRemoveOccurrences('001010000') == 3\nassert solution.secondsToRemoveOccurrences('10001') == 3\nassert solution.secondsToRemoveOccurrences('000111') == 5\nassert solution.secondsToRemoveOccurrences('1') == 0\nassert solution.secondsToRemoveOccurrences('0101000') == 2\nassert solution.secondsToRemoveOccurrences('101010') == 2\nassert solution.secondsToRemoveOccurrences('0010') == 2\nassert solution.secondsToRemoveOccurrences('0') == 0\nassert solution.secondsToRemoveOccurrences('10001') == 3\nassert solution.secondsToRemoveOccurrences('10') == 0\nassert solution.secondsToRemoveOccurrences('10') == 0\nassert solution.secondsToRemoveOccurrences('10101100') == 3\nassert solution.secondsToRemoveOccurrences('0100011010') == 6\nassert solution.secondsToRemoveOccurrences('11111') == 0\nassert solution.secondsToRemoveOccurrences('01') == 1\nassert solution.secondsToRemoveOccurrences('0100') == 1\nassert solution.secondsToRemoveOccurrences('00') == 0\nassert solution.secondsToRemoveOccurrences('000') == 0\nassert solution.secondsToRemoveOccurrences('0100011') == 5\nassert solution.secondsToRemoveOccurrences('0') == 0\nassert solution.secondsToRemoveOccurrences('01011100') == 4\nassert solution.secondsToRemoveOccurrences('1111011') == 2\nassert solution.secondsToRemoveOccurrences('0010111') == 5\nassert solution.secondsToRemoveOccurrences('0') == 0\nassert solution.secondsToRemoveOccurrences('001111101') == 7\nassert solution.secondsToRemoveOccurrences('11110') == 0\nassert solution.secondsToRemoveOccurrences('101101') == 3\nassert solution.secondsToRemoveOccurrences('101') == 1\nassert solution.secondsToRemoveOccurrences('010100') == 2\nassert solution.secondsToRemoveOccurrences('0001100110') == 6\nassert solution.secondsToRemoveOccurrences('0') == 0\nassert solution.secondsToRemoveOccurrences('10') == 0\nassert solution.secondsToRemoveOccurrences('0') == 0\nassert solution.secondsToRemoveOccurrences('1000011011') == 7\nassert solution.secondsToRemoveOccurrences('1') == 0\nassert solution.secondsToRemoveOccurrences('0100011') == 5\nassert solution.secondsToRemoveOccurrences('0001') == 3\nassert solution.secondsToRemoveOccurrences('00') == 0\nassert solution.secondsToRemoveOccurrences('000010') == 4\nassert solution.secondsToRemoveOccurrences('0') == 0\nassert solution.secondsToRemoveOccurrences('0111011') == 5\nassert solution.secondsToRemoveOccurrences('111100') == 0\nassert solution.secondsToRemoveOccurrences('1') == 0\nassert solution.secondsToRemoveOccurrences('11101011') == 3\nassert solution.secondsToRemoveOccurrences('0110') == 2\nassert solution.secondsToRemoveOccurrences('010000') == 1\nassert solution.secondsToRemoveOccurrences('011') == 2\nassert solution.secondsToRemoveOccurrences('0100110') == 4\nassert solution.secondsToRemoveOccurrences('010') == 1\nassert solution.secondsToRemoveOccurrences('00') == 0\nassert solution.secondsToRemoveOccurrences('1011000') == 2\nassert solution.secondsToRemoveOccurrences('10') == 0\nassert solution.secondsToRemoveOccurrences('1010') == 1\nassert solution.secondsToRemoveOccurrences('00010011') == 6\nassert solution.secondsToRemoveOccurrences('1') == 0\nassert solution.secondsToRemoveOccurrences('111') == 0\nassert solution.secondsToRemoveOccurrences('001010') == 3\nassert solution.secondsToRemoveOccurrences('11000') == 0\nassert solution.secondsToRemoveOccurrences('0111100100') == 5\nassert solution.secondsToRemoveOccurrences('11101') == 1\nassert solution.secondsToRemoveOccurrences('00110000') == 3\nassert solution.secondsToRemoveOccurrences('1') == 0\nassert solution.secondsToRemoveOccurrences('11110') == 0\nassert solution.secondsToRemoveOccurrences('0110') == 2\nassert solution.secondsToRemoveOccurrences('100') == 0\nassert solution.secondsToRemoveOccurrences('101000110') == 5\nassert solution.secondsToRemoveOccurrences('00110100') == 4\nassert solution.secondsToRemoveOccurrences('000') == 0\nassert solution.secondsToRemoveOccurrences('101101100') == 4\nassert solution.secondsToRemoveOccurrences('1110') == 0\nassert solution.secondsToRemoveOccurrences('010001000') == 4\nassert solution.secondsToRemoveOccurrences('000110101') == 6\nassert solution.secondsToRemoveOccurrences('001010') == 3\nassert solution.secondsToRemoveOccurrences('000') == 0\nassert solution.secondsToRemoveOccurrences('01001011') == 5",
  "inefficient_solution": "class Solution:\n    def secondsToRemoveOccurrences(self, s: str) -> int:\n        ans = 0\n        while \"01\" in s:\n            s = s.replace(\"01\", \"10\")\n            ans = ans + 1\n            arr = list(s)\n            for i in range(len(arr)):\n                if arr[i] == '0':\n                    arr[i] = '0'\n                else:\n                    arr[i] = '0'\n            s = \"\".join(arr)\n        return ans",
  "is_python": true
}