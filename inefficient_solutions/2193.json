{
  "problem_idx": 2193,
  "task_name": "Minimum Number of Moves to Make Palindrome",
  "markdown_description": "\nYou are given a string `s` consisting only of lowercase English letters.\n\n\nIn one **move**, you can select any two **adjacent** characters of `s` and swap them.\n\n\nReturn *the **minimum number of moves** needed to make* `s` *a palindrome*.\n\n\n**Note** that the input will be generated such that `s` can always be converted to a palindrome.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aabb\"\n**Output:** 2\n**Explanation:**\nWe can obtain two palindromes from s, \"abba\" and \"baab\". \n- We can obtain \"abba\" from s in 2 moves: \"a**ab**b\" -> \"ab**ab**\" -> \"abba\".\n- We can obtain \"baab\" from s in 2 moves: \"a**ab**b\" -> \"**ab**ab\" -> \"baab\".\nThus, the minimum number of moves needed to make s a palindrome is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"letelt\"\n**Output:** 2\n**Explanation:**\nOne of the palindromes we can obtain from s in 2 moves is \"lettel\".\nOne of the ways we can obtain it is \"lete**lt**\" -> \"let**et**l\" -> \"lettel\".\nOther palindromes such as \"tleelt\" can also be obtained in 2 moves.\nIt can be shown that it is not possible to obtain a palindrome in less than 2 moves.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2000`\n* `s` consists only of lowercase English letters.\n* `s` can be converted to a palindrome using a finite number of moves.\n\n\n",
  "canonical_solution": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans, n = 0, len(s)\n        i, j = 0, n - 1\n        while i < j:\n            even = False\n            for k in range(j, i, -1):\n                if cs[i] == cs[k]:\n                    even = True\n                    while k < j:\n                        cs[k], cs[k + 1] = cs[k + 1], cs[k]\n                        k += 1\n                        ans += 1\n                    j -= 1\n                    break\n            if not even:\n                ans += n // 2 - i\n            i += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans, n = 0, len(s)\n        i, j = 0, n - 1\n        while i < j:\n            even = False\n            for k in range(j, i, -1):\n                if cs[i] == cs[k]:\n                    even = True\n                    while k < j:\n                        cs[k], cs[k + 1] = cs[k + 1], cs[k]\n                        k += 1\n                        ans += 1\n                    j -= 1\n                    break\n            if not even:\n                ans += n // 2 - i\n            i += 1\n        return ans\n\ndef generate_test_case():\n    # Initialize the solution class\n    solution = Solution()\n    \n    # Generate random strings for s\n    s_length = random.randint(1, 10)\n    s = random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=s_length)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minMovesToMakePalindrome(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minMovesToMakePalindrome(s) == expected_result\n        print(f'assert solution.minMovesToMakePalindrome(\"{\"\".join(s)}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.minMovesToMakePalindrome(\"{\"\".join(s)}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minMovesToMakePalindrome(\"xfrhuro\") == 5\nassert solution.minMovesToMakePalindrome(\"c\") == 0\nassert solution.minMovesToMakePalindrome(\"ptudjnx\") == 3\nassert solution.minMovesToMakePalindrome(\"ouazvv\") == 6\nassert solution.minMovesToMakePalindrome(\"i\") == 0\nassert solution.minMovesToMakePalindrome(\"cbio\") == 3\nassert solution.minMovesToMakePalindrome(\"x\") == 0\nassert solution.minMovesToMakePalindrome(\"mwbk\") == 3\nassert solution.minMovesToMakePalindrome(\"zjuexp\") == 5\nassert solution.minMovesToMakePalindrome(\"byngs\") == 2\nassert solution.minMovesToMakePalindrome(\"jwujmxw\") == 4\nassert solution.minMovesToMakePalindrome(\"lhmjees\") == 7\nassert solution.minMovesToMakePalindrome(\"ldhlspue\") == 9\nassert solution.minMovesToMakePalindrome(\"egmtgmta\") == 10\nassert solution.minMovesToMakePalindrome(\"gomqxpvjkp\") == 12\nassert solution.minMovesToMakePalindrome(\"af\") == 1\nassert solution.minMovesToMakePalindrome(\"nbeh\") == 3\nassert solution.minMovesToMakePalindrome(\"prfp\") == 1\nassert solution.minMovesToMakePalindrome(\"fzho\") == 3\nassert solution.minMovesToMakePalindrome(\"efh\") == 1\nassert solution.minMovesToMakePalindrome(\"qps\") == 1\nassert solution.minMovesToMakePalindrome(\"xs\") == 1\nassert solution.minMovesToMakePalindrome(\"lawjs\") == 2\nassert solution.minMovesToMakePalindrome(\"qlyd\") == 3\nassert solution.minMovesToMakePalindrome(\"wlhs\") == 3\nassert solution.minMovesToMakePalindrome(\"lsrbfffd\") == 10\nassert solution.minMovesToMakePalindrome(\"whd\") == 1\nassert solution.minMovesToMakePalindrome(\"tepnnsww\") == 12\nassert solution.minMovesToMakePalindrome(\"ycaj\") == 3\nassert solution.minMovesToMakePalindrome(\"huvpi\") == 2\nassert solution.minMovesToMakePalindrome(\"omz\") == 1\nassert solution.minMovesToMakePalindrome(\"hxehlyhd\") == 6\nassert solution.minMovesToMakePalindrome(\"uj\") == 1\nassert solution.minMovesToMakePalindrome(\"vaxmcb\") == 5\nassert solution.minMovesToMakePalindrome(\"dvlzwtzrfo\") == 13\nassert solution.minMovesToMakePalindrome(\"atzrt\") == 2\nassert solution.minMovesToMakePalindrome(\"ifqnyz\") == 5\nassert solution.minMovesToMakePalindrome(\"wdmqhqkhe\") == 12\nassert solution.minMovesToMakePalindrome(\"wi\") == 1\nassert solution.minMovesToMakePalindrome(\"afj\") == 1\nassert solution.minMovesToMakePalindrome(\"padfchbgon\") == 9\nassert solution.minMovesToMakePalindrome(\"ox\") == 1\nassert solution.minMovesToMakePalindrome(\"dl\") == 1\nassert solution.minMovesToMakePalindrome(\"uojkw\") == 2\nassert solution.minMovesToMakePalindrome(\"ekjd\") == 3\nassert solution.minMovesToMakePalindrome(\"f\") == 0\nassert solution.minMovesToMakePalindrome(\"jnisv\") == 2\nassert solution.minMovesToMakePalindrome(\"iqxcc\") == 3\nassert solution.minMovesToMakePalindrome(\"cq\") == 1\nassert solution.minMovesToMakePalindrome(\"ldeokcc\") == 5\nassert solution.minMovesToMakePalindrome(\"vv\") == 0\nassert solution.minMovesToMakePalindrome(\"axhwito\") == 3\nassert solution.minMovesToMakePalindrome(\"dahw\") == 3\nassert solution.minMovesToMakePalindrome(\"seiqvnh\") == 3\nassert solution.minMovesToMakePalindrome(\"bdyetkhqc\") == 4\nassert solution.minMovesToMakePalindrome(\"ooykju\") == 7\nassert solution.minMovesToMakePalindrome(\"sjksm\") == 2\nassert solution.minMovesToMakePalindrome(\"rezdzd\") == 6\nassert solution.minMovesToMakePalindrome(\"seduqgo\") == 3\nassert solution.minMovesToMakePalindrome(\"a\") == 0\nassert solution.minMovesToMakePalindrome(\"wmbmfsh\") == 6\nassert solution.minMovesToMakePalindrome(\"jm\") == 1\nassert solution.minMovesToMakePalindrome(\"lhl\") == 0\nassert solution.minMovesToMakePalindrome(\"o\") == 0\nassert solution.minMovesToMakePalindrome(\"m\") == 0\nassert solution.minMovesToMakePalindrome(\"hfzwcqrfq\") == 8\nassert solution.minMovesToMakePalindrome(\"yf\") == 1\nassert solution.minMovesToMakePalindrome(\"ldc\") == 1\nassert solution.minMovesToMakePalindrome(\"grdpzucx\") == 7\nassert solution.minMovesToMakePalindrome(\"obhvoxdby\") == 7\nassert solution.minMovesToMakePalindrome(\"fiessogsv\") == 7\nassert solution.minMovesToMakePalindrome(\"xkwngkaciu\") == 12\nassert solution.minMovesToMakePalindrome(\"uraybzr\") == 3\nassert solution.minMovesToMakePalindrome(\"rtvd\") == 3\nassert solution.minMovesToMakePalindrome(\"asllcdbubz\") == 18\nassert solution.minMovesToMakePalindrome(\"dqrzkehl\") == 7\nassert solution.minMovesToMakePalindrome(\"fpbpgpillx\") == 16\nassert solution.minMovesToMakePalindrome(\"qmccpjq\") == 4\nassert solution.minMovesToMakePalindrome(\"muoavbuzv\") == 8\nassert solution.minMovesToMakePalindrome(\"kcrbc\") == 2\nassert solution.minMovesToMakePalindrome(\"cafunbsr\") == 7\nassert solution.minMovesToMakePalindrome(\"ty\") == 1\nassert solution.minMovesToMakePalindrome(\"fzdujdqesp\") == 13\nassert solution.minMovesToMakePalindrome(\"enuoasni\") == 7\nassert solution.minMovesToMakePalindrome(\"ehydjakdra\") == 14\nassert solution.minMovesToMakePalindrome(\"svqa\") == 3\nassert solution.minMovesToMakePalindrome(\"mvxblnbw\") == 9\nassert solution.minMovesToMakePalindrome(\"cofzgg\") == 6\nassert solution.minMovesToMakePalindrome(\"sadvermm\") == 9\nassert solution.minMovesToMakePalindrome(\"jzr\") == 1\nassert solution.minMovesToMakePalindrome(\"dvdhzbsw\") == 10\nassert solution.minMovesToMakePalindrome(\"qwtp\") == 3\nassert solution.minMovesToMakePalindrome(\"mwwjra\") == 7\nassert solution.minMovesToMakePalindrome(\"mkgh\") == 3\nassert solution.minMovesToMakePalindrome(\"bmszdqkp\") == 7\nassert solution.minMovesToMakePalindrome(\"xa\") == 1\nassert solution.minMovesToMakePalindrome(\"elu\") == 1\nassert solution.minMovesToMakePalindrome(\"fpwcm\") == 2\nassert solution.minMovesToMakePalindrome(\"ocmy\") == 3\nassert solution.minMovesToMakePalindrome(\"njjnp\") == 2",
  "inefficient_solution": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans = 0\n        for i in range(len(s) // 2):\n            for j in range(i, len(s) // 2 + 1):\n                if cs[i] == cs[j]:\n                    temp = cs[i: j + 1]\n                    cs[i: j + 1] = cs[j: i: -1]\n                    for k in range(j, i, -1):\n                        cs[k], cs[k - 1] = cs[k - 1], cs[k]\n                    ans += len(temp) - 1\n                    break\n            else:\n                temp = cs[i: len(s) // 2 + 1]\n                cs[i: len(s) // 2 + 1] = cs[len(s) // 2: i: -1]\n                for k in range(len(s) // 2, i - 1, -1):\n                    cs[k], cs[k - 1] = cs[k - 1], cs[k]\n                ans += len(temp) - 1\n                break\n        return ans",
  "is_python": true
}