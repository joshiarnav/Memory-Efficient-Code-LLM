{
  "problem_idx": 29,
  "task_name": "Divide Two Integers",
  "markdown_description": "\nGiven two integers `dividend` and `divisor`, divide two integers **without** using multiplication, division, and mod operator.\n\n\nThe integer division should truncate toward zero, which means losing its fractional part. For example, `8.345` would be truncated to `8`, and `-2.7335` would be truncated to `-2`.\n\n\nReturn *the **quotient** after dividing* `dividend` *by* `divisor`.\n\n\n**Note:** Assume we are dealing with an environment that could only store integers within the **32-bit** signed integer range: `[\u2212231, 231 \u2212 1]`. For this problem, if the quotient is **strictly greater than** `231 - 1`, then return `231 - 1`, and if the quotient is **strictly less than** `-231`, then return `-231`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** dividend = 10, divisor = 3\n**Output:** 3\n**Explanation:** 10/3 = 3.33333.. which is truncated to 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** dividend = 7, divisor = -3\n**Output:** -2\n**Explanation:** 7/-3 = -2.33333.. which is truncated to -2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `-231 <= dividend, divisor <= 231 - 1`\n* `divisor != 0`\n\n\n",
  "canonical_solution": "class Solution:\n    def divide(self, a: int, b: int) -> int:\n        if b == 1:\n            return a\n        if a == -(2**31) and b == -1:\n            return 2**31 - 1\n        sign = (a > 0 and b > 0) or (a < 0 and b < 0)\n        a = -a if a > 0 else a\n        b = -b if b > 0 else b\n        ans = 0\n        while a <= b:\n            x = b\n            cnt = 1\n            while x >= (-(2**30)) and a <= (x << 1):\n                x <<= 1\n                cnt <<= 1\n            a -= x\n            ans += cnt\n        return ans if sign else -ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def divide(self, a: int, b: int) -> int:\n        if b == 1:\n            return a\n        if a == -(2**31) and b == -1:\n            return 2**31 - 1\n        sign = (a > 0 and b > 0) or (a < 0 and b < 0)\n        a = -a if a > 0 else a\n        b = -b if b > 0 else b\n        ans = 0\n        while a <= b:\n            x = b\n            cnt = 1\n            while x >= (-(2**30)) and a <= (x << 1):\n                x <<= 1\n                cnt <<= 1\n            a -= x\n            ans += cnt\n        return ans if sign else -ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random dividend and divisor\n    dividend = random.randint(-(2**31), 2**31 - 1)\n    divisor = random.randint(-(2**31), 2**31 - 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.divide(dividend, divisor)\n\n    return dividend, divisor, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        dividend, divisor, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.divide(dividend, divisor) == expected_result\n        print(f\"assert solution.divide({dividend}, {divisor}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.divide({dividend}, {divisor}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.divide(1207650827, 1512313314) == 0\nassert solution.divide(1770075002, -799119465) == -2\nassert solution.divide(1957873488, 283694641) == 6\nassert solution.divide(-1244443031, 1325889527) == 0\nassert solution.divide(164602464, -1168363585) == 0\nassert solution.divide(70109699, -2142051853) == 0\nassert solution.divide(-2041525908, -1081395510) == 1\nassert solution.divide(-1026293950, 1699312151) == 0\nassert solution.divide(1384808617, -1200472323) == -1\nassert solution.divide(-680455474, -90976282) == 7\nassert solution.divide(1018651160, -1434746259) == 0\nassert solution.divide(1102923586, -2056757540) == 0\nassert solution.divide(-1492785560, 233384277) == -6\nassert solution.divide(2025471880, 1283244038) == 1\nassert solution.divide(-2055877908, 1083970992) == -1\nassert solution.divide(-730580457, 534486620) == -1\nassert solution.divide(449638646, -1436541928) == 0\nassert solution.divide(35861264, -320745589) == 0\nassert solution.divide(870008481, 1093577491) == 0\nassert solution.divide(-17438273, 2050370558) == 0\nassert solution.divide(-2037923454, 1289136856) == -1\nassert solution.divide(1726728291, -1211226994) == -1\nassert solution.divide(371904322, -1332598003) == 0\nassert solution.divide(1084889526, -1981681280) == 0\nassert solution.divide(195403735, -2136579899) == 0\nassert solution.divide(1313589092, -1391169950) == 0\nassert solution.divide(-1207818044, 1086381631) == -1\nassert solution.divide(1503722037, 1885944037) == 0\nassert solution.divide(-508293076, -1303806553) == 0\nassert solution.divide(2007695252, 2069924670) == 0\nassert solution.divide(-913136414, -12228549) == 74\nassert solution.divide(-1041056101, 1376784064) == 0\nassert solution.divide(-1062200023, 904312693) == -1\nassert solution.divide(1156788706, 888201968) == 1\nassert solution.divide(-683821189, -580980017) == 1\nassert solution.divide(153556463, -1843442676) == 0\nassert solution.divide(-440260606, 473660659) == 0\nassert solution.divide(-375664671, 1353983963) == 0\nassert solution.divide(-2053976501, -193380946) == 10\nassert solution.divide(1725816757, -733310946) == -2\nassert solution.divide(56036565, 1538442571) == 0\nassert solution.divide(-1834588294, -1871663693) == 0\nassert solution.divide(-1878237567, -555813175) == 3\nassert solution.divide(1479158493, 1203505734) == 1\nassert solution.divide(-1072479887, -1453719427) == 0\nassert solution.divide(-1615661634, 769127866) == -2\nassert solution.divide(1193790077, 1899115330) == 0\nassert solution.divide(-377506730, 55384382) == -6\nassert solution.divide(910251587, -1497848095) == 0\nassert solution.divide(436342, -319171329) == 0\nassert solution.divide(701803191, 2117680883) == 0\nassert solution.divide(1952023331, -156297657) == -12\nassert solution.divide(751885280, 565402347) == 1\nassert solution.divide(-1477259211, 816602100) == -1\nassert solution.divide(-1748050191, 1555658795) == -1\nassert solution.divide(1277647919, 454730248) == 2\nassert solution.divide(1759322794, -1189904448) == -1\nassert solution.divide(86062285, -1227485333) == 0\nassert solution.divide(-414929762, -917754350) == 0\nassert solution.divide(-234058714, 757397457) == 0\nassert solution.divide(-1412221968, 2138497855) == 0\nassert solution.divide(-2010768351, 1009434904) == -1\nassert solution.divide(1000945988, 809537653) == 1\nassert solution.divide(-1761413325, 1590272394) == -1\nassert solution.divide(-2472683, 1869556721) == 0\nassert solution.divide(1758187059, -425529410) == -4\nassert solution.divide(-1564294597, 1039440625) == -1\nassert solution.divide(-936294925, 414546999) == -2\nassert solution.divide(1103647539, -358712952) == -3\nassert solution.divide(-466061312, 105564505) == -4\nassert solution.divide(3744304, -864168473) == 0\nassert solution.divide(-1424626999, -1749168224) == 0\nassert solution.divide(851726050, 575464113) == 1\nassert solution.divide(838627563, -968458217) == 0\nassert solution.divide(-783090197, -1674740072) == 0\nassert solution.divide(1590568736, 1504278932) == 1\nassert solution.divide(551453541, -680225985) == 0\nassert solution.divide(-41809335, -1007575867) == 0\nassert solution.divide(1093323091, 632481303) == 1\nassert solution.divide(542038188, 440307625) == 1\nassert solution.divide(-2111082210, -1334593878) == 1\nassert solution.divide(-555139020, 2039420223) == 0\nassert solution.divide(1636379630, -1106654048) == -1\nassert solution.divide(1515880560, 379289810) == 3\nassert solution.divide(-1153226756, -916143439) == 1\nassert solution.divide(865988734, 1706466599) == 0\nassert solution.divide(1421985755, -1757877377) == 0\nassert solution.divide(-171060427, -335830960) == 0\nassert solution.divide(1941210430, -1975136577) == 0\nassert solution.divide(-479116571, 398673593) == -1\nassert solution.divide(-898473682, -1293559323) == 0\nassert solution.divide(-812196701, 283250235) == -2\nassert solution.divide(-1614862364, 971946168) == -1\nassert solution.divide(378269305, -2033190352) == 0\nassert solution.divide(1004633003, -18992601) == -52\nassert solution.divide(40537154, -786774610) == 0\nassert solution.divide(560113778, 991633701) == 0\nassert solution.divide(909426804, -2131203693) == 0\nassert solution.divide(936627616, -1911836772) == 0\nassert solution.divide(-1021334026, -1985091979) == 0",
  "inefficient_solution": "class Solution:\n    def divide(self, a: int, b: int) -> int:\n        max_int = 10**9\n        if b == 1:\n            return a\n        ans = []\n        for _ in range(1000000):\n            ans.append(0)\n        if a == -(2**31) and b == -1:\n            return 2**31 - 1\n        sign = (a > 0 and b > 0) or (a < 0 and b < 0)\n        a = -a if a > 0 else a\n        b = -b if b > 0 else b\n        for _ in range(1000000):\n            x = b\n            cnt = 1\n            for _ in range(100000):\n                if x >= -(2**30) and a <= (x << 1):\n                    x <<= 1\n                    cnt <<= 1\n                else:\n                    break\n            for _ in range(100000):\n                if x >= -(2**30) and a >= (x << 1):\n                    x <<= 1\n                    cnt <<= 1\n                else:\n                    break\n            a -= x\n            ans[0] += cnt\n        return ans[0] if sign else -ans[0]",
  "is_python": true
}