{
  "problem_idx": 1458,
  "task_name": "Max Dot Product of Two Subsequences",
  "markdown_description": "\nGiven two arrays `nums1`\u00a0and `nums2`.\n\n\nReturn the maximum dot product\u00a0between\u00a0**non-empty** subsequences of nums1 and nums2 with the same length.\n\n\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\u00a0`[2,3,5]`\u00a0is a subsequence of\u00a0`[1,2,3,4,5]`\u00a0while `[1,5,3]`\u00a0is not).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,-2,5], nums2 = [3,0,-6]\n**Output:** 18\n**Explanation:** Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [3,-2], nums2 = [2,-6,7]\n**Output:** 21\n**Explanation:** Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [-1,-1], nums2 = [1,1]\n**Output:** -1\n**Explanation:** Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 500`\n* `-1000 <= nums1[i], nums2[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[-inf] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], max(dp[i - 1][j - 1], 0) + v)\n        return dp[-1][-1]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        dp = [[-float('inf')] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                v = nums1[i - 1] * nums2[j - 1]\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], max(dp[i - 1][j - 1], 0) + v)\n        return dp[-1][-1]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums1 = random.sample(range(-1000, 1001), random.randint(1, 10))\n    nums2 = random.sample(range(-1000, 1001), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxDotProduct(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxDotProduct(nums1, nums2) == expected_result\n        print(f\"assert solution.maxDotProduct({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxDotProduct({nums1}, {nums2}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxDotProduct([603, 588, 906, 485, 747, -757], [410, 346, 361]) == 830373\nassert solution.maxDotProduct([449, -768, -387, 307, -779, 142, -998, 676, 731], [318, 711, -382, 445]) == 1067590\nassert solution.maxDotProduct([632, 761, -483, 200, -384], [335, -629, -500, -399]) == 750742\nassert solution.maxDotProduct([693, -262, -171, -803, 365, -882, -521], [446, 886, 188, 233, 616, -61, 359, 541, 461, 335]) == 892640\nassert solution.maxDotProduct([-198], [-821, -634, 862, 394]) == 162558\nassert solution.maxDotProduct([-393, -495, 985, -796, -505], [-19, 796]) == 793465\nassert solution.maxDotProduct([953, 6, 109, 815, 390, 391, 582, -153, 654, 535], [-171, -902, 444, -191, 467, 652, -25]) == 1230145\nassert solution.maxDotProduct([978, 34, 619, -879, 863, -196, 431], [-999, -733, -112, -123, 983, 623, 511, -701, -853, 455]) == 2489463\nassert solution.maxDotProduct([33, 422, 271, -859, -935], [408]) == 172176\nassert solution.maxDotProduct([255, 20, -216, 651, -947, 142, -354, -658], [-597]) == 565359\nassert solution.maxDotProduct([-639, 326], [-80, 962, -86, -52, -262, 337]) == 364732\nassert solution.maxDotProduct([-36], [-741]) == 26676\nassert solution.maxDotProduct([277], [-272]) == -75344\nassert solution.maxDotProduct([-97, -736, -248, -879], [355, 962, 380]) == -34435\nassert solution.maxDotProduct([-611, 414, -915, 221, 386, -273], [-718, -356, 472, 545, 959, -199, -240]) == 1320577\nassert solution.maxDotProduct([-900, -911, -783, 702], [-820, 839, 669, -99, 966, -540, -402, -931, -216]) == 1958913\nassert solution.maxDotProduct([545, -207, 217, 266, -715, -148], [953, -578]) == 932655\nassert solution.maxDotProduct([-279, -477, 528], [576, -462, -378, 405]) == 523044\nassert solution.maxDotProduct([-709, 385, 914, 935], [799, 598, -963, -516]) == 1289416\nassert solution.maxDotProduct([903, 642, -984, 488, -259, -119, -737, 185], [830, -377, 385, -935, -922]) == 2596214\nassert solution.maxDotProduct([166], [-813, -393, -335, 897, 365, -193]) == 148902\nassert solution.maxDotProduct([-278, -21, 997, 181], [-254, -680]) == 189040\nassert solution.maxDotProduct([-55, 340, -821, -774, -278, 458, -976, -525, 789], [618]) == 487602\nassert solution.maxDotProduct([-860, 440], [105, 932, -908]) == 780880\nassert solution.maxDotProduct([885, -271, -143], [-847, -140, 58, 773, 824, 993, 529]) == 878805\nassert solution.maxDotProduct([376, -130], [382, -42, 645, -477, -358, -214]) == 304530\nassert solution.maxDotProduct([-801], [35, -523, 198, 304, 728, -899, 168]) == 720099\nassert solution.maxDotProduct([-165, 239, -617], [-655, -257, -717, 671, -139]) == 550464\nassert solution.maxDotProduct([-283, -958, -809, 962, -222, -866], [-667]) == 638986\nassert solution.maxDotProduct([298], [265, -340, -430, -352, -298, -354, 576, -926]) == 171648\nassert solution.maxDotProduct([135, 531, -542, -495, -244, 458], [900, 542, -281, -271, 704, -729, -156]) == 1086779\nassert solution.maxDotProduct([370, 672, -794, -813, 241, 991, -458, -131], [-468, 215]) == 593549\nassert solution.maxDotProduct([245, -663, 871, -714, 797], [585, 474, -996]) == 1267323\nassert solution.maxDotProduct([831, 298, -341, 535], [425, 350, -611, 125, 417, -113, 747, 504]) == 1065471\nassert solution.maxDotProduct([445], [-142]) == -63190\nassert solution.maxDotProduct([887, 791, -99, -571, 409, -385, -696, 273, -159, -338], [-690]) == 480240\nassert solution.maxDotProduct([-835, 125], [685, -661, -884, -905, 188, -294, 617, -720]) == 832800\nassert solution.maxDotProduct([-967, 789, -151], [-67, 948, -24, -780, 997, -370, -443]) == 1607786\nassert solution.maxDotProduct([713, -92, -754, -948, -853], [-902, 245, -177, 953, -813, -77, 590, 188, 600]) == 1548585\nassert solution.maxDotProduct([500, -695, -239, -745, 497, 144, 88, -777], [647, -258, -511, -110]) == 968975\nassert solution.maxDotProduct([538, -964, -628, 911, 202, 12], [795, -458, 398]) == 1231800\nassert solution.maxDotProduct([279, 861, 401, 452, 22, -656, 170], [-5, 440, 485, 410, 489, 425, 696, 887]) == 1236364\nassert solution.maxDotProduct([511, 215, -448], [286, 344, -52]) == 243402\nassert solution.maxDotProduct([291, 668, 378, 646, 715, 670, -285], [55]) == 39325\nassert solution.maxDotProduct([467, -220, 12, -406, -147, -881, 684, 916, 199, -219], [-432, 7, -172, 64, -766, -460, 869, -607, -425, 185]) == 1804459\nassert solution.maxDotProduct([-369, 957, -815, -471, 364, 494, 451, -358, 863], [-509, 73, -793, -331, -48]) == 1077062\nassert solution.maxDotProduct([-803, -336, -169, -529, -701, -466, 683, -10], [-437, 283, -920]) == 995831\nassert solution.maxDotProduct([-691, 906, -793, -702, -1, 120, -829, 11, -901], [573]) == 519138\nassert solution.maxDotProduct([514, -636, -375, 561, 906, -772, -660], [-67, -923, -19, 941, -907, -530, -380, 94, -111, -383]) == 2496703\nassert solution.maxDotProduct([-609, -992, 331, -646, -60, 93, -419, 296, 337], [84, 182, 776, -410]) == 521716\nassert solution.maxDotProduct([-160, 135, 641, 119], [-394, 7]) == 67527\nassert solution.maxDotProduct([-744, -764, 334, 898, 267, 812, 754, 421, -141, -756], [-694, 152, 914]) == 1408880\nassert solution.maxDotProduct([-165, 401, 290, -971, 494, 280, -892, -712], [-178, 267, 228, 694, -283]) == 797829\nassert solution.maxDotProduct([115, 887, -652, 973], [502, -208, -247, -187, -631]) == 856686\nassert solution.maxDotProduct([499, 1, 320, -953, -34, 584, -232, 462, -4, 541], [653, 394, 689, 617]) == 1208058\nassert solution.maxDotProduct([-312, -920, -491], [-952, -92, -598]) == 1169458\nassert solution.maxDotProduct([-740, 975, -749, -680, -206], [-452, 430, 104, -630, -454, 384, -693]) == 1696840\nassert solution.maxDotProduct([147, 391, 351, -752, -227, -191, -671, -133, -830], [-268, 9, 106, 66, -770, -764, 197, 720]) == 1352326\nassert solution.maxDotProduct([64, -198, -548, -552, 811, 848, 213, -67, 519, -784], [-504, -860, 998, 715, -36, -356, -100, 480, 786, 203]) == 2676784\nassert solution.maxDotProduct([736], [-973, 862, -747]) == 634432\nassert solution.maxDotProduct([30, 273], [456, 888, -59, -854, 394, 498]) == 256104\nassert solution.maxDotProduct([759, -972, -589, -193, 35], [-594]) == 577368\nassert solution.maxDotProduct([-104, 138, -951, 535, 972, -339, -377, 293], [-920, 794, -643, -268, 424, 343, -388, 542, 758]) == 2233035\nassert solution.maxDotProduct([27, -846, -500], [869, 660, 186, -728, 514]) == 639351\nassert solution.maxDotProduct([-520, -533, 288, 274, -168, 664, 55, -285], [150, -630]) == 335790\nassert solution.maxDotProduct([325, -766, -58, 177, -220, -128, -991, -495, -49, -825], [505, 861]) == 316522\nassert solution.maxDotProduct([90, 267, 893, -338, -212, 670, 731, 138, -672], [-888, -632, -66, 817]) == 1031355\nassert solution.maxDotProduct([-483, -324, 410], [-815]) == 393645\nassert solution.maxDotProduct([-309, 37, -226, -789, 793, 461, -153], [838, 986]) == 1119080\nassert solution.maxDotProduct([29, 92, -319, 404, 803, -34, -132, 620], [951, -599, 152, -127, 895, -122, -905]) == 1397621\nassert solution.maxDotProduct([218, 761, -408, 577], [418, -877]) == 675914\nassert solution.maxDotProduct([638, -539, 227, -928, 376, -337, 369], [-326, -476, 897, 396, -104]) == 1100838\nassert solution.maxDotProduct([414, -256, -720], [-997, 637, -949, -334, -288, -812, -188, 134]) == 1091302\nassert solution.maxDotProduct([-333, -559, 112, 581, 372, -821, 916], [-271, 379, 441, 349, 652, -170, -249, 743, 220, -525]) == 1577719\nassert solution.maxDotProduct([465, 26, 125, 510, 785, -992, -421, -985, -653, -411], [-201, 118, -505, 661, -168, 332, -414, 514]) == 1153511\nassert solution.maxDotProduct([-826, 705, 320], [952, -13, 105, -826, -935, -772, -176, -290, 378, 89]) == 1067280\nassert solution.maxDotProduct([-196, -796, -271, -517], [-65, -957, 795, -828, 763, -936]) == 1482812\nassert solution.maxDotProduct([-47, -992, 584, -506, -733, -770], [-390, -73, 650, -311, 43, 223, 526, 454, -190, -272]) == 1272556\nassert solution.maxDotProduct([632, -735, 649, -87, 322], [564, 203, -488, 898]) == 1297930\nassert solution.maxDotProduct([324, -771, 234, 614, 667, -387, -292, -463], [-52, -713, 425, 655, 851, 32, -741, 757, -271]) == 2031200\nassert solution.maxDotProduct([535, 644, 339, -346], [-640, 945, 155, -875, -559]) == 963875\nassert solution.maxDotProduct([-395, 311, -781, 489, -140, 109, 11], [-342, 630, 592, -899, -357, -821]) == 1148079\nassert solution.maxDotProduct([-274, 308, -653, 165, -796, -652, 973, 7, 935, 115], [-654, -860]) == 1111622\nassert solution.maxDotProduct([11, 672, 694, -115, 227, -319], [260, -89, 573, 771, -953, -346, 214, 506]) == 1226997\nassert solution.maxDotProduct([384, 794], [-701, 209, 452, -325, 447]) == 528486\nassert solution.maxDotProduct([-262, -834, 174, 775, 701, 875, 272, -983, 545, 108], [-886, 58]) == 902548\nassert solution.maxDotProduct([71, 701, -243, -9, 119, -852, 273, -339, -343], [930, -512, 436, -254]) == 1294304\nassert solution.maxDotProduct([451, 567, -502, -546, 662, -222, -138], [-722, -418, 254, 614, 555, -341, -979, -660, -80, -142]) == 1480773\nassert solution.maxDotProduct([-144, 645, 463, 900, -475], [-795, 967, -749, 989]) == 1628295\nassert solution.maxDotProduct([395, 97], [-2]) == -194\nassert solution.maxDotProduct([409, -660, -388, 477, 237, 123, -333, -173, 396], [-874, -858, -505]) == 1077909\nassert solution.maxDotProduct([765, -266, 735], [-445, -314, 364, 601]) == 720195\nassert solution.maxDotProduct([391, 22, -79, -926], [259, 941]) == 367931\nassert solution.maxDotProduct([-743], [-136, 369, -351, 689, 292, -948]) == 704364\nassert solution.maxDotProduct([866, 448, 83, -84], [256, 126, -950]) == 357944\nassert solution.maxDotProduct([746, 243, -684, -458, -780], [-67, -654]) == 555948\nassert solution.maxDotProduct([402, -677, 989, 863, -218, 755, 144, -771, -954, 43], [-400, 521, -465, 456, 617, 341, -164, -837]) == 2690099\nassert solution.maxDotProduct([40, 168, -554, -485, 171, 435, -787, 818, 181, -809], [768, 445, -290, 551, 446, -598, 590]) == 1577536\nassert solution.maxDotProduct([-498, 589, 326, -143, -385, -812], [14, 18, 688, -68, -225]) == 614112\nassert solution.maxDotProduct([-700, 131, -231, -747, 772, 493], [-375, -604]) == 713688",
  "inefficient_solution": "class Solution:\n    def maxDotProduct(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        dp = [[0] * (n * 5000) for _ in range(m * 5000)]\n        for i in range(m * 5000):\n            for j in range(n * 5000):\n                for k in range(m):\n                    for l in range(n):\n                        if i >= k * 5000 and j >= l * 5000:\n                            v = nums1[k] * nums2[l]\n                            for _ in range(500):\n                                dp[i][j] = max(dp[i][j], dp[i - k * 5000][j - l * 5000], dp[i][j - l * 5000], dp[i - k * 5000][j], max(dp[i - k * 5000][j - l * 5000], 0) + v)\n        return dp[-1][-1]",
  "is_python": true
}