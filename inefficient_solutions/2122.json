{
  "problem_idx": 2122,
  "task_name": "Recover the Original Array",
  "markdown_description": "\nAlice had a **0-indexed** array `arr` consisting of `n` **positive** integers. She chose an arbitrary **positive integer** `k` and created two new **0-indexed** integer arrays `lower` and `higher` in the following manner:\n\n\n1. `lower[i] = arr[i] - k`, for every index `i` where `0 <= i < n`\n2. `higher[i] = arr[i] + k`, for every index `i` where `0 <= i < n`\n\n\nUnfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays `lower` and `higher`, but not the array each integer belonged to. Help Alice and recover the original array.\n\n\nGiven an array `nums` consisting of `2n` integers, where **exactly** `n` of the integers were present in `lower` and the remaining in `higher`, return *the **original** array* `arr`. In case the answer is not unique, return ***any** valid array*.\n\n\n**Note:** The test cases are generated such that there exists **at least one** valid array `arr`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,10,6,4,8,12]\n**Output:** [3,7,11]\n**Explanation:**\nIf arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].\nCombining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.\nAnother valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,3,3]\n**Output:** [2,2]\n**Explanation:**\nIf arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].\nCombining lower and higher gives us [1,1,3,3], which is equal to nums.\nNote that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.\nThis is invalid since k must be positive.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,435]\n**Output:** [220]\n**Explanation:**\nThe only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 * n == nums.length`\n* `1 <= n <= 1000`\n* `1 <= nums[i] <= 109`\n* The test cases are generated such that there exists **at least one** valid array `arr`.\n\n\n",
  "canonical_solution": "class Solution:\n    def recoverArray(self, nums: List[int]) -> List[int]:\n        nums.sort()\n        n = len(nums)\n        for i in range(1, n):\n            d = nums[i] - nums[0]\n            if d == 0 or d % 2 == 1:\n                continue\n            vis = [False] * n\n            vis[i] = True\n            ans = [(nums[0] + nums[i]) >> 1]\n            l, r = 1, i + 1\n            while r < n:\n                while l < n and vis[l]:\n                    l += 1\n                while r < n and nums[r] - nums[l] < d:\n                    r += 1\n                if r == n or nums[r] - nums[l] > d:\n                    break\n                vis[r] = True\n                ans.append((nums[l] + nums[r]) >> 1)\n                l, r = l + 1, r + 1\n            if len(ans) == (n >> 1):\n                return ans\n        return []\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def recoverArray(self, nums: List[int]) -> List[int]:\n        nums.sort()\n        n = len(nums)\n        for i in range(1, n):\n            d = nums[i] - nums[0]\n            if d == 0 or d % 2 == 1:\n                continue\n            vis = [False] * n\n            vis[i] = True\n            ans = [(nums[0] + nums[i]) >> 1]\n            l, r = 1, i + 1\n            while r < n:\n                while l < n and vis[l]:\n                    l += 1\n                while r < n and nums[r] - nums[l] < d:\n                    r += 1\n                if r == n or nums[r] - nums[l] > d:\n                    break\n                vis[r] = True\n                ans.append((nums[l] + nums[r]) >> 1)\n                l, r = l + 1, r + 1\n            if len(ans) == (n >> 1):\n                return ans\n        return []\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10) * 2)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.recoverArray(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.recoverArray(nums) == expected_result\n        print(f\"assert solution.recoverArray({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.recoverArray({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.recoverArray([9, 21, 35, 41, 77, 92]) == []\nassert solution.recoverArray([28, 29, 35, 39, 51, 54, 55, 57, 61, 67, 73, 81, 99, 100]) == []\nassert solution.recoverArray([13, 31, 40, 59, 63, 64]) == []\nassert solution.recoverArray([18, 29, 34, 42, 76, 85]) == []\nassert solution.recoverArray([2, 17, 25, 29, 33, 34, 39, 45, 48, 49, 57, 58, 59, 60, 75, 78, 90, 99]) == []\nassert solution.recoverArray([55, 64, 66, 76, 93, 94]) == []\nassert solution.recoverArray([16, 18, 27, 57, 58, 67, 84, 96]) == []\nassert solution.recoverArray([23, 30, 36, 46, 53, 56, 60, 74]) == []\nassert solution.recoverArray([27, 32, 33, 45, 51, 58, 59, 75, 78, 80, 90, 91, 95, 96]) == []\nassert solution.recoverArray([11, 27, 30, 37, 68, 86]) == []\nassert solution.recoverArray([6, 7, 11, 16, 19, 20, 24, 30, 32, 36, 40, 51, 53, 66, 68, 71, 76, 86, 91, 97]) == []\nassert solution.recoverArray([8, 46, 58, 89]) == []\nassert solution.recoverArray([36, 38, 48, 57, 62, 99]) == []\nassert solution.recoverArray([6, 7, 11, 32, 33, 36, 55, 59, 62, 67, 70, 75, 82, 93]) == []\nassert solution.recoverArray([7, 11, 13, 25, 30, 40, 45, 78, 82, 89]) == []\nassert solution.recoverArray([3, 9, 10, 15, 21, 31, 45, 88]) == []\nassert solution.recoverArray([40, 58, 76, 80, 81, 96]) == []\nassert solution.recoverArray([44, 70, 71, 73]) == []\nassert solution.recoverArray([28, 40, 41, 51, 65, 67, 69, 82]) == []\nassert solution.recoverArray([8, 12, 18, 23, 34, 36, 39, 49, 51, 54, 59, 74, 77, 79, 85, 95]) == []\nassert solution.recoverArray([4, 23, 54, 59, 65, 93]) == []\nassert solution.recoverArray([4, 11, 17, 39, 59, 63]) == []\nassert solution.recoverArray([8, 14, 17, 25, 39, 59, 61, 63, 66, 72, 77, 78, 84, 85, 97, 99]) == []\nassert solution.recoverArray([5, 7, 8, 15, 30, 36, 62, 65, 67, 68, 76, 79, 82, 85, 89, 90, 93, 95]) == []\nassert solution.recoverArray([4, 6, 25, 57, 58, 59, 85, 88]) == []\nassert solution.recoverArray([18, 42, 53, 54, 76, 83, 94, 99]) == []\nassert solution.recoverArray([1, 5, 7, 14, 16, 18, 21, 23, 26, 27, 37, 40, 60, 83, 90, 94]) == []\nassert solution.recoverArray([4, 8, 55, 66, 69, 85, 97, 99]) == []\nassert solution.recoverArray([1, 4, 12, 13, 28, 29, 32, 33, 36, 44, 46, 47, 52, 53, 59, 61, 66, 97]) == []\nassert solution.recoverArray([11, 15, 20, 25, 38, 50, 57, 59, 60, 63, 69, 70, 76, 81, 84, 86, 90, 92, 93, 96]) == []\nassert solution.recoverArray([5, 34, 49, 56, 65, 87]) == []\nassert solution.recoverArray([25, 29, 52, 54, 62, 67, 76, 83]) == []\nassert solution.recoverArray([4, 8, 22, 25, 26, 28, 29, 30, 39, 52, 60, 63, 65, 69]) == []\nassert solution.recoverArray([1, 16, 28, 33, 37, 39, 44, 53, 68, 71, 74, 75, 80, 86]) == []\nassert solution.recoverArray([9, 10, 38, 39, 51, 56, 64, 70, 85, 92]) == []\nassert solution.recoverArray([4, 6, 11, 12, 13, 15, 29, 30, 50, 53, 56, 61, 75, 81, 85, 86, 87, 88, 92, 96]) == []\nassert solution.recoverArray([7, 41, 45, 50, 62, 67, 70, 90]) == []\nassert solution.recoverArray([30, 34, 50, 60, 78, 87]) == []\nassert solution.recoverArray([1, 2, 5, 6, 12, 14, 24, 37, 41, 51, 57, 69, 78, 79, 82, 87, 94, 95]) == []\nassert solution.recoverArray([18, 25, 26, 27, 31, 70, 80, 94]) == []\nassert solution.recoverArray([2, 5, 15, 17, 19, 20, 23, 26, 33, 38, 47, 63, 66, 71, 74, 75, 82, 95]) == []\nassert solution.recoverArray([1, 7, 16, 24, 35, 70, 73, 82, 83, 89]) == []\nassert solution.recoverArray([5, 8, 21, 24, 34, 50, 71, 72, 76, 95]) == []\nassert solution.recoverArray([13, 39, 77, 98]) == []\nassert solution.recoverArray([6, 19, 24, 29, 36, 52, 63, 73, 75, 78, 87, 96]) == []\nassert solution.recoverArray([5, 11, 12, 17, 19, 25, 27, 31, 37, 44, 47, 52, 56, 63, 67, 74, 79, 86, 89, 96]) == []\nassert solution.recoverArray([3, 27, 29, 41, 62, 81, 82, 91]) == []\nassert solution.recoverArray([2, 6, 10, 13, 15, 37, 54, 55, 56, 58, 60, 92]) == []\nassert solution.recoverArray([29, 31, 32, 33, 44, 52, 55, 64, 69, 71, 72, 78, 79, 83, 87, 90, 92, 95]) == []\nassert solution.recoverArray([11, 22, 26, 35, 45, 51, 57, 61, 68, 69, 85, 91, 96, 98]) == []\nassert solution.recoverArray([1, 3, 9, 10, 11, 12, 13, 16, 19, 23, 30, 33, 37, 58, 68, 76, 77, 82, 90, 97]) == []\nassert solution.recoverArray([23, 29, 77, 94]) == []\nassert solution.recoverArray([73, 75, 84, 97]) == []\nassert solution.recoverArray([4, 17, 22, 30, 35, 42, 50, 52, 63, 79]) == []\nassert solution.recoverArray([8, 9, 16, 26, 28, 36, 37, 45, 52, 61, 62, 73, 78, 84, 85, 93, 95, 100]) == []\nassert solution.recoverArray([3, 6, 13, 15, 18, 26, 34, 39, 42, 46, 55, 57, 71, 72, 76, 77, 87, 88, 93, 97]) == []\nassert solution.recoverArray([6, 21, 25, 26, 36, 49, 61, 62, 65, 91, 92, 95]) == []\nassert solution.recoverArray([9, 16, 17, 32, 38, 40, 41, 49, 58, 64, 65, 76, 84, 88, 94, 97]) == []\nassert solution.recoverArray([3, 4, 11, 22, 24, 28, 38, 42, 51, 53, 89, 96]) == []\nassert solution.recoverArray([20, 26, 27, 95]) == []\nassert solution.recoverArray([3, 37, 39, 40, 45, 46, 50, 53, 57, 58, 63, 70, 71, 72, 85, 86, 87, 92, 93, 100]) == []\nassert solution.recoverArray([44, 52, 65, 83]) == []\nassert solution.recoverArray([1, 11, 14, 22, 26, 28, 36, 45, 49, 50, 53, 58, 61, 79, 92, 95]) == []\nassert solution.recoverArray([31, 36, 54, 81, 85, 96]) == []\nassert solution.recoverArray([13, 15, 19, 22, 53, 54, 55, 63, 64, 66, 70, 71, 85, 93, 94, 95]) == []\nassert solution.recoverArray([19, 28, 29, 38, 39, 40, 56, 57, 69, 72, 74, 76, 78, 83]) == []\nassert solution.recoverArray([2, 15, 18, 22, 25, 38, 39, 41, 47, 49, 51, 63, 78, 86, 87, 93, 98, 100]) == []\nassert solution.recoverArray([13, 14, 16, 17, 23, 50, 52, 66, 72, 79, 85, 100]) == []\nassert solution.recoverArray([1, 7, 9, 16, 20, 24, 27, 29, 31, 43, 51, 58, 59, 70, 92, 93, 95, 98, 99, 100]) == []\nassert solution.recoverArray([5, 8, 14, 21, 23, 32, 43, 51, 52, 54, 57, 59, 61, 62, 71, 75, 78, 80, 89, 96]) == []\nassert solution.recoverArray([4, 15, 16, 18, 23, 24, 25, 27, 28, 32, 36, 49, 55, 59, 63, 64, 76, 78, 80, 92]) == []\nassert solution.recoverArray([19, 24, 33, 34, 37, 41, 50, 70, 76, 82, 83, 84]) == []\nassert solution.recoverArray([7, 8, 14, 15, 45, 46, 71, 88, 89, 90]) == []\nassert solution.recoverArray([13, 15, 17, 21, 29, 35, 46, 54, 56, 58, 63, 65, 69, 74, 87, 88, 89, 95, 97, 98]) == []\nassert solution.recoverArray([3, 9, 15, 18, 19, 36, 44, 46, 53, 57, 71, 73, 89, 97]) == []\nassert solution.recoverArray([26, 55, 73, 77, 85, 90]) == []\nassert solution.recoverArray([2, 6, 11, 12, 13, 32, 42, 50, 52, 55, 57, 61, 66, 82, 86, 93, 94, 99]) == []\nassert solution.recoverArray([3, 4, 11, 12, 14, 26, 29, 32, 35, 42, 49, 50, 69, 74, 75, 76, 82, 84]) == []\nassert solution.recoverArray([10, 29, 36, 51, 72, 81, 94, 95]) == []\nassert solution.recoverArray([4, 14, 29, 32, 38, 42, 43, 47, 51, 58, 60, 64, 69, 70, 75, 83, 94, 98]) == []\nassert solution.recoverArray([28, 31, 35, 40, 50, 71, 77, 83, 84, 89]) == []\nassert solution.recoverArray([1, 13, 27, 32, 35, 42, 44, 54, 58, 62, 95, 99]) == []\nassert solution.recoverArray([5, 29, 30, 31, 42, 44, 46, 53, 54, 58, 60, 72, 79, 81, 85, 93]) == []\nassert solution.recoverArray([1, 2, 6, 18, 27, 29, 30, 33, 35, 40, 69, 70, 79, 82, 87, 88, 97, 100]) == []\nassert solution.recoverArray([10, 14, 15, 47, 94, 100]) == []\nassert solution.recoverArray([1, 5, 16, 41, 44, 69, 84, 94]) == []\nassert solution.recoverArray([22, 38, 54, 57]) == []\nassert solution.recoverArray([2, 10, 11, 16, 21, 23, 26, 33, 50, 55, 61, 62, 79, 83, 84, 87, 89, 91, 93, 94]) == []\nassert solution.recoverArray([15, 29, 57, 58, 65, 67, 80, 100]) == []\nassert solution.recoverArray([14, 19, 22, 28, 29, 33, 34, 35, 47, 57, 62, 78, 81, 82, 83, 91, 97, 99]) == []\nassert solution.recoverArray([2, 5, 33, 36, 42, 43, 48, 63, 69, 72, 73, 78, 80, 87, 93, 98]) == []\nassert solution.recoverArray([7, 10, 12, 13, 17, 20, 23, 26, 28, 31, 54, 55, 60, 62, 66, 76, 82, 86, 94, 96]) == []\nassert solution.recoverArray([23, 42, 85, 89]) == []\nassert solution.recoverArray([4, 8, 11, 13, 29, 31, 36, 39, 41, 50, 55, 56, 65, 88, 89, 98]) == []\nassert solution.recoverArray([3, 7, 9, 12, 23, 26, 55, 56, 59, 63, 71, 75, 77, 84, 85, 96]) == []\nassert solution.recoverArray([11, 16, 41, 44, 46, 50, 57, 76, 79, 81, 96, 98]) == []\nassert solution.recoverArray([4, 15, 18, 22, 25, 29, 54, 67, 68, 72, 74, 83, 84, 85, 90, 92, 94, 97]) == []\nassert solution.recoverArray([3, 8, 10, 19, 20, 25, 31, 33, 38, 46, 62, 66, 76, 87, 90, 93, 94, 99]) == []\nassert solution.recoverArray([2, 5, 6, 12, 13, 17, 23, 30, 47, 60, 64, 77, 80, 81, 91, 94]) == []\nassert solution.recoverArray([1, 16, 22, 26, 34, 37, 46, 47, 48, 56, 58, 66, 67, 71, 76, 78, 80, 85, 90, 95]) == []",
  "inefficient_solution": "class Solution:\n    def recoverArray(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        pairs = [[] for _ in range(n)]\n        for i in range(n):\n            pairs[i % n].append(nums[i])\n        ans = []\n        for i in range(n):\n            pairs[i].sort()\n            for j in range(1, len(pairs[i])):\n                ans.append((pairs[i][j] + pairs[i][j-1]) // 2)\n        return ans",
  "is_python": true
}