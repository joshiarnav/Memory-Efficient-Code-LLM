{
  "problem_idx": 63,
  "task_name": "Unique Paths II",
  "markdown_description": "\nYou are given an `m x n` integer array `grid`. There is a robot initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\n\nAn obstacle and space are marked as `1` or `0` respectively in `grid`. A path that the robot takes cannot include **any** square that is an obstacle.\n\n\nReturn *the number of possible unique paths that the robot can take to reach the bottom-right corner*.\n\n\nThe testcases are generated so that the answer will be less than or equal to `2 * 109`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0063.Unique%20Paths%20II/images/robot1.jpg)\n\n```\n\n**Input:** obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n**Output:** 2\n**Explanation:** There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0063.Unique%20Paths%20II/images/robot2.jpg)\n\n```\n\n**Input:** obstacleGrid = [[0,1],[0,0]]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == obstacleGrid.length`\n* `n == obstacleGrid[i].length`\n* `1 <= m, n <= 100`\n* `obstacleGrid[i][j]` is `0` or `1`.\n\n\n",
  "canonical_solution": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                break\n            dp[i][0] = 1\n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                break\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                break\n            dp[i][0] = 1\n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                break\n            dp[0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[-1][-1]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate the obstacle grid\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    obstacleGrid = [[random.choice([0, 1]) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.uniquePathsWithObstacles(obstacleGrid)\n\n    return obstacleGrid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    solution = Solution()\n    test_case_generator_results = []\n    for i in range(num_tests):\n        obstacleGrid, expected_result = generate_test_case()\n        assert solution.uniquePathsWithObstacles(obstacleGrid) == expected_result\n        print(f\"assert solution.uniquePathsWithObstacles({obstacleGrid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.uniquePathsWithObstacles({obstacleGrid}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.uniquePathsWithObstacles([[0, 0, 0, 1, 1, 1, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1], [1, 0], [0, 0], [1, 0], [0, 1], [1, 1], [1, 0], [0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1], [1, 0], [1, 0], [0, 0], [0, 1], [1, 0], [0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0], [0, 0, 0], [1, 0, 1], [0, 0, 0], [0, 1, 1], [0, 1, 0], [0, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1], [1, 0], [0, 1], [0, 1], [0, 0], [1, 0], [0, 1], [0, 0], [0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0], [1, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 1], [1, 0, 1, 0], [1, 0, 1, 1], [0, 1, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1], [0], [1], [1], [0], [0], [1], [1], [0], [1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1], [0, 1], [1, 0], [1, 0], [1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 1, 1], [0, 1, 1, 0], [0, 0, 1, 1], [1, 1, 0, 0], [1, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1], [1]]) == 0\nassert solution.uniquePathsWithObstacles([[1], [0], [1], [1], [0], [1], [0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 1, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 1, 0, 0, 1, 1, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 1, 1], [1, 0, 1, 1, 1], [0, 1, 1, 0, 1], [0, 0, 1, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 0, 1], [1, 0, 1, 0, 1], [0, 0, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 1], [1, 1, 1, 0], [0, 1, 0, 1], [0, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 0], [0, 1, 1, 0], [0, 0, 1, 1], [1, 1, 0, 1], [1, 1, 0, 1], [1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 1, 0], [0, 0, 1, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 1, 1], [0, 0, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 1, 0], [0, 1, 0, 1, 0], [1, 1, 1, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 1, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1], [1, 0], [1, 0], [0, 1], [1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 1, 0], [0, 0, 0, 0, 0], [1, 0, 1, 1, 1], [1, 0, 1, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1], [1], [1], [1], [1], [0], [0], [0], [1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0], [1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0]]) == 16\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 1], [0, 1, 0, 1], [0, 1, 0, 1], [1, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 0], [0, 0, 1, 0], [1, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0]]) == 1\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0, 0, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 0], [1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 0, 1, 1], [1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0], [0], [0], [1], [1], [0], [1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 0], [1, 0, 1, 1], [0, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 1, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0], [1], [0], [1], [0], [1], [1], [1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1], [0, 0, 0], [0, 0, 1], [1, 1, 1], [1, 0, 0], [1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1], [0, 0, 1], [1, 0, 0], [1, 0, 0]]) == 2\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 1, 0], [0, 1, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [0, 1, 1, 1], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 1, 1], [0, 0, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 1, 0], [1, 0, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 1, 0, 0, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1], [1], [0], [1], [1], [1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 1, 1], [0, 0, 1, 1, 0], [0, 0, 1, 1, 1], [1, 1, 0, 0, 1], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 1, 1, 0], [1, 1, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 0, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0], [1], [0], [0], [1], [1], [1], [0], [0], [1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 0, 0, 1, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0], [0, 1], [1, 1], [1, 0], [0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 0], [1, 1, 1, 0], [1, 0, 1, 1], [0, 0, 1, 0], [0, 1, 0, 1], [1, 0, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1], [0, 1, 1], [0, 0, 1], [0, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [1, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 1], [1, 1, 1, 0], [1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0], [1, 1, 1, 1], [0, 1, 1, 0], [1, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1]]) == 0\nassert solution.uniquePathsWithObstacles([[1], [0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [0, 1, 1, 1], [0, 0, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 0, 1, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 1, 0], [0, 1, 1, 1], [1, 0, 0, 0], [1, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1], [0, 0, 0], [0, 1, 1], [0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0], [1, 1], [1, 1], [0, 1], [0, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 1, 1, 1], [1, 1, 0, 1], [1, 1, 1, 0], [0, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 1, 1], [1, 0, 0, 1], [1, 0, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0]]) == 0\nassert solution.uniquePathsWithObstacles([[1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1]]) == 0\nassert solution.uniquePathsWithObstacles([[0, 1, 0], [1, 1, 1], [1, 0, 0]]) == 0",
  "inefficient_solution": "class Solution:\n    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:\n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [[[0] * n for _ in range(m)] for _ in range(3)]\n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                for j in range(m):\n                    for k in range(n):\n                        dp[j][i][k] = float('-inf')\n                break\n            dp[0][i][0] = 1\n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                for i in range(m):\n                    for k in range(n):\n                        dp[i][j][k] = float('-inf')\n                break\n            dp[i][0][j] = 1\n        for i in range(1, m):\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 0:\n                    for k in range(3):\n                        if k == 0:\n                            dp[k][i][j] = dp[k][i - 1][j] + dp[k][i][j - 1]\n                        elif k == 1:\n                            dp[k][i][j] = dp[k][i - 1][j] + dp[k][i][j - 1]\n                        else:\n                            dp[k][i][j] = dp[k][i - 1][j] + dp[k][i][j - 1]\n        max_val = float('-inf')\n        for i in range(m):\n            for j in range(n):\n                for k in range(3):\n                    max_val = max(max_val, dp[k][i][j])\n        return max_val",
  "is_python": true
}