{
  "problem_idx": 2938,
  "task_name": "Separate Black and White Balls",
  "markdown_description": "\nThere are `n` balls on a table, each ball has a color black or white.\n\n\nYou are given a **0-indexed** binary string `s` of length `n`, where `1` and `0` represent black and white balls, respectively.\n\n\nIn each step, you can choose two adjacent balls and swap them.\n\n\nReturn *the **minimum** number of steps to group all the black balls to the right and all the white balls to the left*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"101\"\n**Output:** 1\n**Explanation:** We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"011\".\nInitially, 1s are not grouped together, requiring at least 1 step to group them to the right.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"100\"\n**Output:** 2\n**Explanation:** We can group all the black balls to the right in the following way:\n- Swap s[0] and s[1], s = \"010\".\n- Swap s[1] and s[2], s = \"001\".\nIt can be proven that the minimum number of steps needed is 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"0111\"\n**Output:** 0\n**Explanation:** All the black balls are already grouped to the right.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == s.length <= 105`\n* `s[i]` is either `'0'` or `'1'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumSteps(self, s: str) -> int:\n        n = len(s)\n        ans = cnt = 0\n        for i in range(n - 1, -1, -1):\n            if s[i] == '1':\n                cnt += 1\n                ans += n - i - cnt\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumSteps(self, s: str) -> int:\n        n = len(s)\n        ans = cnt = 0\n        for i in range(n - 1, -1, -1):\n            if s[i] == '1':\n                cnt += 1\n                ans += n - i - cnt\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random binary string\n    n = random.randint(1, 10)\n    s = ''.join(random.choices(['0', '1'], k=n))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumSteps(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumSteps(s) == expected_result\n        print(f'assert solution.minimumSteps(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.minimumSteps(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumSteps(\"101\") == 1\nassert solution.minimumSteps(\"010101100\") == 11\nassert solution.minimumSteps(\"10\") == 1\nassert solution.minimumSteps(\"011111\") == 0\nassert solution.minimumSteps(\"111001\") == 6\nassert solution.minimumSteps(\"000\") == 0\nassert solution.minimumSteps(\"0101100\") == 7\nassert solution.minimumSteps(\"0101100100\") == 15\nassert solution.minimumSteps(\"0001111\") == 0\nassert solution.minimumSteps(\"11011\") == 2\nassert solution.minimumSteps(\"0110001\") == 6\nassert solution.minimumSteps(\"0101\") == 1\nassert solution.minimumSteps(\"0101101010\") == 13\nassert solution.minimumSteps(\"0111\") == 0\nassert solution.minimumSteps(\"11100001\") == 12\nassert solution.minimumSteps(\"0001010\") == 3\nassert solution.minimumSteps(\"11000100\") == 12\nassert solution.minimumSteps(\"01110111\") == 3\nassert solution.minimumSteps(\"00\") == 0\nassert solution.minimumSteps(\"001101\") == 2\nassert solution.minimumSteps(\"10100011\") == 7\nassert solution.minimumSteps(\"0101\") == 1\nassert solution.minimumSteps(\"0100100\") == 6\nassert solution.minimumSteps(\"000101000\") == 7\nassert solution.minimumSteps(\"10\") == 1\nassert solution.minimumSteps(\"010\") == 1\nassert solution.minimumSteps(\"0101110101\") == 10\nassert solution.minimumSteps(\"1111100111\") == 10\nassert solution.minimumSteps(\"1110\") == 3\nassert solution.minimumSteps(\"01000100\") == 7\nassert solution.minimumSteps(\"1111\") == 0\nassert solution.minimumSteps(\"011111001\") == 10\nassert solution.minimumSteps(\"0010000010\") == 7\nassert solution.minimumSteps(\"10110\") == 4\nassert solution.minimumSteps(\"0001001001\") == 6\nassert solution.minimumSteps(\"0\") == 0\nassert solution.minimumSteps(\"01100101\") == 7\nassert solution.minimumSteps(\"00111\") == 0\nassert solution.minimumSteps(\"101001101\") == 9\nassert solution.minimumSteps(\"0010\") == 1\nassert solution.minimumSteps(\"110\") == 2\nassert solution.minimumSteps(\"00100\") == 2\nassert solution.minimumSteps(\"011001110\") == 9\nassert solution.minimumSteps(\"10\") == 1\nassert solution.minimumSteps(\"01100010\") == 9\nassert solution.minimumSteps(\"01100010\") == 9\nassert solution.minimumSteps(\"01\") == 0\nassert solution.minimumSteps(\"100110111\") == 5\nassert solution.minimumSteps(\"01010101\") == 6\nassert solution.minimumSteps(\"000001\") == 0\nassert solution.minimumSteps(\"100111110\") == 8\nassert solution.minimumSteps(\"0\") == 0\nassert solution.minimumSteps(\"1101100\") == 10\nassert solution.minimumSteps(\"1011111\") == 1\nassert solution.minimumSteps(\"11\") == 0\nassert solution.minimumSteps(\"111\") == 0\nassert solution.minimumSteps(\"111100001\") == 16\nassert solution.minimumSteps(\"001110\") == 3\nassert solution.minimumSteps(\"1100\") == 4\nassert solution.minimumSteps(\"0000000\") == 0\nassert solution.minimumSteps(\"110110\") == 6\nassert solution.minimumSteps(\"0011110\") == 4\nassert solution.minimumSteps(\"00010\") == 1\nassert solution.minimumSteps(\"0001010\") == 3\nassert solution.minimumSteps(\"11110011\") == 8\nassert solution.minimumSteps(\"11011\") == 2\nassert solution.minimumSteps(\"10110111\") == 4\nassert solution.minimumSteps(\"01\") == 0\nassert solution.minimumSteps(\"01110\") == 3\nassert solution.minimumSteps(\"11101\") == 3\nassert solution.minimumSteps(\"100011\") == 3\nassert solution.minimumSteps(\"11010\") == 5\nassert solution.minimumSteps(\"001100\") == 4\nassert solution.minimumSteps(\"1110\") == 3\nassert solution.minimumSteps(\"0110010\") == 7\nassert solution.minimumSteps(\"011110\") == 4\nassert solution.minimumSteps(\"0110111\") == 2\nassert solution.minimumSteps(\"0000001010\") == 3\nassert solution.minimumSteps(\"010111100\") == 11\nassert solution.minimumSteps(\"1100100\") == 10\nassert solution.minimumSteps(\"1001000000\") == 14\nassert solution.minimumSteps(\"00011\") == 0\nassert solution.minimumSteps(\"01000111\") == 3\nassert solution.minimumSteps(\"1110011111\") == 6\nassert solution.minimumSteps(\"110\") == 2\nassert solution.minimumSteps(\"10001001\") == 7\nassert solution.minimumSteps(\"1101110101\") == 13\nassert solution.minimumSteps(\"0\") == 0\nassert solution.minimumSteps(\"10100\") == 5\nassert solution.minimumSteps(\"10\") == 1\nassert solution.minimumSteps(\"0110000\") == 8\nassert solution.minimumSteps(\"101011000\") == 15\nassert solution.minimumSteps(\"10101101\") == 7\nassert solution.minimumSteps(\"110110\") == 6\nassert solution.minimumSteps(\"01111\") == 0\nassert solution.minimumSteps(\"101000001\") == 11\nassert solution.minimumSteps(\"010\") == 1\nassert solution.minimumSteps(\"00100\") == 2\nassert solution.minimumSteps(\"010111110\") == 7\nassert solution.minimumSteps(\"1\") == 0",
  "inefficient_solution": "class Solution:\n    def minimumSteps(self, s: str) -> int:\n        n = len(s)\n        ans = 0\n        for i in range(n):\n            if s[i] == '1':\n                white_balls = []\n                for j in range(i, n):\n                    if s[j] == '0':\n                        white_balls.append(j)\n                    else:\n                        break\n                for j in range(i, n):\n                    if s[j] == '0':\n                        s = s[:j] + '1' + s[j+1:]\n                        s = s[:i] + '0' + s[i+1:]\n                        break\n                ans += len(white_balls)\n        return ans",
  "is_python": true
}