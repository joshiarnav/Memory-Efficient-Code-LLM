{
  "problem_idx": 1753,
  "task_name": "Maximum Score From Removing Stones",
  "markdown_description": "\nYou are playing a solitaire game with **three piles** of stones of sizes `a`\u200b\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two **different non-empty** piles, take one stone from each, and add `1` point to your score. The game stops when there are **fewer than two non-empty** piles (meaning there are no more available moves).\n\n\nGiven three integers `a`\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b, return *the* ***maximum*** ***score** you can get.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** a = 2, b = 4, c = 6\n**Output:** 6\n**Explanation:** The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** a = 4, b = 4, c = 6\n**Output:** 7\n**Explanation:** The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** a = 1, b = 8, c = 8\n**Output:** 8\n**Explanation:** One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= a, b, c <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumScore(self, a: int, b: int, c: int) -> int:\n        a, b, c = sorted([a, b, c])\n        if a + b < c:\n            return a + b\n        return (a + b + c) >> 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumScore(self, a: int, b: int, c: int) -> int:\n        a, b, c = sorted([a, b, c])\n        if a + b < c:\n            return a + b\n        return (a + b + c) >> 1\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers for a, b, c\n    a = random.randint(1, 101)\n    b = random.randint(1, 101)\n    c = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumScore(a, b, c)\n\n    return a, b, c, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        a, b, c, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumScore(a, b, c) == expected_result\n        print(f\"assert solution.maximumScore({a}, {b}, {c}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumScore({a}, {b}, {c}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumScore(49, 79, 16) == 65\nassert solution.maximumScore(35, 86, 22) == 57\nassert solution.maximumScore(89, 60, 76) == 112\nassert solution.maximumScore(66, 77, 43) == 93\nassert solution.maximumScore(70, 82, 41) == 96\nassert solution.maximumScore(24, 22, 58) == 46\nassert solution.maximumScore(3, 20, 41) == 23\nassert solution.maximumScore(59, 101, 2) == 61\nassert solution.maximumScore(100, 44, 7) == 51\nassert solution.maximumScore(65, 69, 12) == 73\nassert solution.maximumScore(30, 80, 61) == 85\nassert solution.maximumScore(75, 36, 41) == 76\nassert solution.maximumScore(3, 90, 85) == 88\nassert solution.maximumScore(40, 16, 11) == 27\nassert solution.maximumScore(46, 61, 36) == 71\nassert solution.maximumScore(70, 87, 89) == 123\nassert solution.maximumScore(100, 47, 92) == 119\nassert solution.maximumScore(28, 70, 91) == 94\nassert solution.maximumScore(85, 91, 66) == 121\nassert solution.maximumScore(62, 16, 75) == 76\nassert solution.maximumScore(59, 63, 35) == 78\nassert solution.maximumScore(85, 8, 11) == 19\nassert solution.maximumScore(97, 2, 100) == 99\nassert solution.maximumScore(71, 3, 35) == 38\nassert solution.maximumScore(15, 48, 96) == 63\nassert solution.maximumScore(82, 22, 45) == 67\nassert solution.maximumScore(22, 80, 34) == 56\nassert solution.maximumScore(70, 98, 23) == 93\nassert solution.maximumScore(47, 26, 39) == 56\nassert solution.maximumScore(87, 59, 58) == 102\nassert solution.maximumScore(62, 45, 24) == 65\nassert solution.maximumScore(19, 82, 55) == 74\nassert solution.maximumScore(52, 95, 90) == 118\nassert solution.maximumScore(101, 6, 29) == 35\nassert solution.maximumScore(32, 99, 45) == 77\nassert solution.maximumScore(7, 39, 1) == 8\nassert solution.maximumScore(70, 16, 31) == 47\nassert solution.maximumScore(39, 25, 83) == 64\nassert solution.maximumScore(77, 48, 43) == 84\nassert solution.maximumScore(29, 98, 25) == 54\nassert solution.maximumScore(10, 44, 24) == 34\nassert solution.maximumScore(77, 58, 2) == 60\nassert solution.maximumScore(94, 44, 15) == 59\nassert solution.maximumScore(92, 1, 71) == 72\nassert solution.maximumScore(14, 58, 81) == 72\nassert solution.maximumScore(62, 64, 1) == 63\nassert solution.maximumScore(84, 63, 89) == 118\nassert solution.maximumScore(33, 59, 16) == 49\nassert solution.maximumScore(92, 31, 87) == 105\nassert solution.maximumScore(97, 96, 7) == 100\nassert solution.maximumScore(84, 30, 99) == 106\nassert solution.maximumScore(56, 90, 43) == 94\nassert solution.maximumScore(90, 64, 56) == 105\nassert solution.maximumScore(3, 88, 58) == 61\nassert solution.maximumScore(33, 11, 13) == 24\nassert solution.maximumScore(42, 90, 56) == 94\nassert solution.maximumScore(35, 61, 6) == 41\nassert solution.maximumScore(47, 17, 7) == 24\nassert solution.maximumScore(62, 58, 61) == 90\nassert solution.maximumScore(98, 98, 68) == 132\nassert solution.maximumScore(15, 72, 63) == 75\nassert solution.maximumScore(43, 40, 93) == 83\nassert solution.maximumScore(54, 2, 12) == 14\nassert solution.maximumScore(13, 98, 59) == 72\nassert solution.maximumScore(99, 48, 53) == 100\nassert solution.maximumScore(12, 72, 64) == 74\nassert solution.maximumScore(84, 88, 2) == 86\nassert solution.maximumScore(8, 42, 62) == 50\nassert solution.maximumScore(23, 7, 99) == 30\nassert solution.maximumScore(38, 99, 90) == 113\nassert solution.maximumScore(95, 55, 87) == 118\nassert solution.maximumScore(51, 88, 79) == 109\nassert solution.maximumScore(44, 83, 50) == 88\nassert solution.maximumScore(93, 10, 93) == 98\nassert solution.maximumScore(97, 3, 98) == 99\nassert solution.maximumScore(58, 46, 64) == 84\nassert solution.maximumScore(44, 57, 8) == 52\nassert solution.maximumScore(23, 33, 4) == 27\nassert solution.maximumScore(87, 13, 47) == 60\nassert solution.maximumScore(23, 97, 88) == 104\nassert solution.maximumScore(66, 99, 74) == 119\nassert solution.maximumScore(101, 62, 16) == 78\nassert solution.maximumScore(14, 33, 14) == 28\nassert solution.maximumScore(95, 25, 99) == 109\nassert solution.maximumScore(29, 56, 21) == 50\nassert solution.maximumScore(48, 18, 60) == 63\nassert solution.maximumScore(47, 9, 20) == 29\nassert solution.maximumScore(83, 8, 48) == 56\nassert solution.maximumScore(76, 91, 85) == 126\nassert solution.maximumScore(74, 75, 17) == 83\nassert solution.maximumScore(1, 25, 95) == 26\nassert solution.maximumScore(99, 80, 27) == 103\nassert solution.maximumScore(43, 12, 89) == 55\nassert solution.maximumScore(75, 26, 73) == 87\nassert solution.maximumScore(78, 43, 95) == 108\nassert solution.maximumScore(2, 9, 95) == 11\nassert solution.maximumScore(13, 57, 84) == 70\nassert solution.maximumScore(10, 6, 37) == 16\nassert solution.maximumScore(30, 61, 46) == 68\nassert solution.maximumScore(48, 43, 11) == 51",
  "inefficient_solution": "class Solution:\n    def maximumScore(self, a: int, b: int, c: int) -> int:\n        # Create a list to store all possible moves\n        moves = [(a, b, c)]\n\n        # Initialize a dictionary to store the results of each move\n        results = {}\n\n        # Initialize a set to store the visited moves\n        visited = set()\n\n        # Function to calculate the score for a given move\n        def calculate_score(a, b, c):\n            # Calculate the score by taking one stone from each pile\n            score = min(a, b, c) * 2\n            return score\n\n        # Function to apply the move and update the results\n        def apply_move(a, b, c):\n            # Check if the move has been visited before\n            if (a, b, c) in visited:\n                return\n\n            # Mark the move as visited\n            visited.add((a, b, c))\n\n            # Calculate the score for the move\n            score = calculate_score(a, b, c)\n\n            # Update the results dictionary\n            results[(a, b, c)] = score\n\n            # Generate new moves by applying the take one stone from each pile operation\n            new_moves = []\n            if a > 0:\n                new_moves.append((a - 1, b, c))\n            if b > 0:\n                new_moves.append((a, b - 1, c))\n            if c > 0:\n                new_moves.append((a, b, c - 1))\n\n            # Recursively apply the moves and update the results\n            for new_a, new_b, new_c in new_moves:\n                apply_move(new_a, new_b, new_c)\n\n        # Apply the initial move and update the results\n        apply_move(a, b, c)\n\n        # Find the maximum score\n        max_score = 0\n        for a, b, c in moves:\n            score = results.get((a, b, c), 0)\n            max_score = max(max_score, score)\n\n        # Return the maximum score\n        return max_score",
  "is_python": true
}