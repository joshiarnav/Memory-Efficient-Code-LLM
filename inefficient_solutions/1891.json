{
  "problem_idx": 1891,
  "task_name": "Cutting Ribbons",
  "markdown_description": "\nYou are given an integer array `ribbons`, where `ribbons[i]` represents the length of the `ith` ribbon, and an integer `k`. You may cut any of the ribbons into any number of segments of **positive integer** lengths, or perform no cuts at all.\n\n\n* For example, if you have a ribbon of length `4`, you can:\n\t+ Keep the ribbon of length `4`,\n\t+ Cut it into one ribbon of length `3` and one ribbon of length `1`,\n\t+ Cut it into two ribbons of length `2`,\n\t+ Cut it into one ribbon of length `2` and two ribbons of length `1`, or\n\t+ Cut it into four ribbons of length `1`.\n\n\nYour goal is to obtain `k` ribbons of all the **same positive integer length**. You are allowed to throw away any excess ribbon as a result of cutting.\n\n\nReturn *the **maximum** possible positive integer length that you can obtain* `k` *ribbons of**, or* `0` *if you cannot obtain* `k` *ribbons of the same length*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** ribbons = [9,7,5], k = 3\n**Output:** 5\n**Explanation:**\n- Cut the first ribbon to two ribbons, one of length 5 and one of length 4.\n- Cut the second ribbon to two ribbons, one of length 5 and one of length 2.\n- Keep the third ribbon as it is.\nNow you have 3 ribbons of length 5.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** ribbons = [7,5,9], k = 4\n**Output:** 4\n**Explanation:**\n- Cut the first ribbon to two ribbons, one of length 4 and one of length 3.\n- Cut the second ribbon to two ribbons, one of length 4 and one of length 1.\n- Cut the third ribbon to three ribbons, two of length 4 and one of length 1.\nNow you have 4 ribbons of length 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** ribbons = [5,7,9], k = 22\n**Output:** 0\n**Explanation:** You cannot obtain k ribbons of the same positive integer length.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= ribbons.length <= 105`\n* `1 <= ribbons[i] <= 105`\n* `1 <= k <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxLength(self, ribbons: List[int], k: int) -> int:\n        left, right = 0, max(ribbons)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            cnt = sum(x // mid for x in ribbons)\n            if cnt >= k:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import namedtuple\n\nTestCase = namedtuple(\"TestCase\", [\"ribbons\", \"k\", \"expected_result\"])\n\ndef generate_test_case() -> TestCase:\n    solution = Solution()\n    \n    # Generate random ribbons list\n    ribbons = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(1, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxLength(ribbons, k)\n\n    return TestCase(ribbons, k, expected_result)\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for i in range(num_tests):\n        test_case = generate_test_case()\n        assert_solution = f\"assert solution.maxLength({test_case.ribbons}, {test_case.k}) == {test_case.expected_result}\"\n        test_case_generator_results.append(assert_solution)\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxLength([4, 88, 7], 54) == 1\nassert solution.maxLength([5, 85, 88], 11) == 14\nassert solution.maxLength([53, 40, 69, 89, 36], 49) == 5\nassert solution.maxLength([2, 58, 52, 41, 72], 56) == 3\nassert solution.maxLength([55, 41], 58) == 1\nassert solution.maxLength([26, 88, 16, 47, 74, 38, 51, 68, 52], 14) == 25\nassert solution.maxLength([23, 67, 95, 62, 13, 18, 22, 39, 5], 9) == 23\nassert solution.maxLength([46, 18, 59, 71, 56, 63, 80, 66], 69) == 6\nassert solution.maxLength([3, 54, 99, 25, 46], 67) == 3\nassert solution.maxLength([23, 57, 21, 80, 54, 67], 52) == 5\nassert solution.maxLength([45, 42, 80, 87, 92, 77, 38], 85) == 5\nassert solution.maxLength([18, 70, 50], 93) == 1\nassert solution.maxLength([88, 56, 84, 61, 79, 11, 67], 14) == 28\nassert solution.maxLength([46, 67, 35], 40) == 3\nassert solution.maxLength([37, 90, 63, 26, 46, 73], 34) == 9\nassert solution.maxLength([58, 15, 50, 1, 55, 16, 73, 14], 94) == 2\nassert solution.maxLength([85, 39, 12], 12) == 10\nassert solution.maxLength([96, 8, 62, 89, 49, 64], 13) == 24\nassert solution.maxLength([38, 68], 31) == 3\nassert solution.maxLength([84, 38, 30, 75, 81, 17, 73, 97, 51, 16], 96) == 5\nassert solution.maxLength([28, 8, 11, 83], 33) == 3\nassert solution.maxLength([62, 86, 92, 83, 90], 9) == 41\nassert solution.maxLength([8, 83, 11, 88, 37, 77], 74) == 4\nassert solution.maxLength([53, 99, 50, 97, 83, 57, 44], 57) == 8\nassert solution.maxLength([68, 71, 41, 58, 72, 74, 18, 83], 14) == 27\nassert solution.maxLength([28, 53, 70, 54], 1) == 70\nassert solution.maxLength([10, 79, 16, 35, 84, 91, 87, 63, 82], 23) == 20\nassert solution.maxLength([41, 53, 21], 34) == 3\nassert solution.maxLength([91, 29, 13, 40, 73, 46], 51) == 5\nassert solution.maxLength([30, 93, 87, 28, 54, 53], 89) == 3\nassert solution.maxLength([67, 20, 24, 79, 41], 39) == 5\nassert solution.maxLength([28, 89, 77, 98, 10, 95, 5, 23, 15, 76], 58) == 8\nassert solution.maxLength([88, 61, 53, 45, 60, 71, 96, 14, 18], 78) == 6\nassert solution.maxLength([58, 20, 66, 8, 15, 4], 56) == 2\nassert solution.maxLength([43, 4, 21, 91], 50) == 3\nassert solution.maxLength([25, 7, 100, 90], 3) == 50\nassert solution.maxLength([75, 34, 41, 92, 89, 32, 65], 66) == 6\nassert solution.maxLength([19, 18, 27], 68) == 0\nassert solution.maxLength([45, 10, 25, 7, 84, 91, 65, 55], 14) == 22\nassert solution.maxLength([70, 8, 51, 74, 24, 79, 26], 56) == 5\nassert solution.maxLength([61, 93, 87, 54, 46], 11) == 27\nassert solution.maxLength([80, 94, 18, 12, 39, 27], 38) == 6\nassert solution.maxLength([98, 7, 73, 56], 21) == 10\nassert solution.maxLength([52, 23, 85], 33) == 4\nassert solution.maxLength([11, 44], 16) == 3\nassert solution.maxLength([21, 92, 22, 95, 29, 43, 20], 21) == 13\nassert solution.maxLength([72, 8, 39, 38], 90) == 1\nassert solution.maxLength([27, 28, 49, 51, 29, 8, 93], 88) == 3\nassert solution.maxLength([78, 93, 97, 24, 91, 31], 54) == 7\nassert solution.maxLength([11, 25, 67, 68, 55, 46], 100) == 2\nassert solution.maxLength([43, 70, 62, 79, 65, 57, 99, 20, 4, 56], 52) == 9\nassert solution.maxLength([82, 50, 37, 35, 54, 74, 38, 18], 51) == 7\nassert solution.maxLength([25, 29, 79, 84, 41, 55, 23, 73, 24, 31], 93) == 4\nassert solution.maxLength([59, 15, 45, 32], 98) == 1\nassert solution.maxLength([43, 3, 6, 72, 86, 38, 55, 83], 49) == 7\nassert solution.maxLength([39, 4, 84, 95, 58, 37], 44) == 6\nassert solution.maxLength([66, 31, 34], 96) == 1\nassert solution.maxLength([90, 30, 43, 88, 37], 34) == 8\nassert solution.maxLength([22, 33, 24, 59, 54, 79, 75], 97) == 3\nassert solution.maxLength([71, 60, 49, 99, 51, 22, 43, 65, 66, 13], 70) == 7\nassert solution.maxLength([72, 19, 68, 16, 52], 88) == 2\nassert solution.maxLength([13, 18, 89, 12], 58) == 2\nassert solution.maxLength([84, 19, 68, 29, 15], 34) == 6\nassert solution.maxLength([10, 81, 31, 15, 54, 87, 52, 59, 40, 94], 82) == 6\nassert solution.maxLength([22, 18, 69, 34, 61, 11, 43, 88], 89) == 3\nassert solution.maxLength([6, 93, 48, 42], 42) == 4\nassert solution.maxLength([30, 86, 4], 51) == 2\nassert solution.maxLength([75, 94, 51, 56, 95, 32, 8, 33, 93], 18) == 25\nassert solution.maxLength([65, 41, 88, 38, 92, 33, 31, 40, 62], 39) == 11\nassert solution.maxLength([29, 3, 88, 84, 96], 86) == 3\nassert solution.maxLength([14, 16, 41, 5, 99, 19, 94], 28) == 9\nassert solution.maxLength([26, 99, 43, 84], 39) == 6\nassert solution.maxLength([21, 52, 78, 63, 62, 54, 16, 43, 28, 23], 77) == 5\nassert solution.maxLength([51, 87, 88, 11], 46) == 5\nassert solution.maxLength([28, 72, 2, 21], 32) == 3\nassert solution.maxLength([33, 50, 65, 98, 67, 8, 74, 81, 46], 1) == 98\nassert solution.maxLength([14, 93, 99], 60) == 3\nassert solution.maxLength([54, 79], 23) == 5\nassert solution.maxLength([10, 22, 86, 83, 52, 37], 45) == 6\nassert solution.maxLength([99, 16, 71, 31, 60, 23, 84, 24, 7], 100) == 4\nassert solution.maxLength([94, 57, 84, 23, 9, 56], 7) == 31\nassert solution.maxLength([94, 79, 90, 33, 96, 47], 33) == 12\nassert solution.maxLength([99, 10, 58], 37) == 4\nassert solution.maxLength([53, 47, 80, 93, 25, 6, 34, 20, 65, 89], 53) == 8\nassert solution.maxLength([43, 38, 7, 89, 13, 24, 49], 40) == 6\nassert solution.maxLength([74, 37, 26, 80, 1, 75, 68], 90) == 3\nassert solution.maxLength([77, 43, 95, 67, 50, 61, 9, 52, 32, 73], 77) == 6\nassert solution.maxLength([70, 35], 23) == 4\nassert solution.maxLength([25, 43, 8], 75) == 1\nassert solution.maxLength([93, 79, 96, 55, 41], 34) == 10\nassert solution.maxLength([53, 38, 25, 9, 13, 15], 23) == 6\nassert solution.maxLength([32, 57, 45, 17, 41, 55, 11, 37], 79) == 3\nassert solution.maxLength([27, 40, 97, 42, 56], 78) == 3\nassert solution.maxLength([42, 99, 49, 86], 97) == 2\nassert solution.maxLength([72, 38, 92, 2, 3], 25) == 7\nassert solution.maxLength([96, 28, 39, 8, 93], 90) == 2\nassert solution.maxLength([33, 85, 6, 64, 97], 95) == 2\nassert solution.maxLength([38, 12, 57, 19, 98, 29, 97, 50], 83) == 4\nassert solution.maxLength([16, 7, 88, 100, 76, 40, 82, 77, 31], 23) == 19\nassert solution.maxLength([2, 58, 63, 40, 1, 3, 78, 14], 34) == 7",
  "inefficient_solution": "class Solution:\n    def maxLength(self, ribbons: List[int], k: int) -> int:\n        max_length = max(ribbons)\n        max_cut = sum(ribbons)\n\n        # Create a list to store all possible lengths that can be obtained by cutting each ribbon\n        lengths = []\n        for ribbon in ribbons:\n            for i in range(1, ribbon + 1):\n                if ribbon % i == 0:\n                    for j in range(1, ribbon // i + 1):\n                        lengths.append(i * j)\n\n        # Filter out the lengths that cannot be obtained by cutting any of the ribbons\n        valid_lengths = set()\n        for length in lengths:\n            valid = True\n            for ribbon in ribbons:\n                if length > ribbon:\n                    break\n                if length % ribbon == 0:\n                    valid = False\n                    break\n            if valid:\n                valid_lengths.add(length)\n\n        # Initialize a list to store the maximum length that can be obtained for each possible total number of ribbons\n        dp = [0] * (max_cut + 2)\n\n        # Iterate over each valid length\n        for length in sorted(valid_lengths):\n            new_dp = dp[:]\n            for i in range(len(dp)):\n                if length <= i:\n                    new_dp[i] = max(new_dp[i], dp[i - length] + 1)\n            dp = new_dp\n\n        # Find the maximum length that can be obtained for at least k ribbons\n        max_length = 0\n        for i in range(len(dp)):\n            if dp[i] >= k:\n                max_length = max(max_length, i)\n        return max_length",
  "is_python": true
}