{
  "problem_idx": 32,
  "task_name": "Longest Valid Parentheses",
  "markdown_description": "\nGiven a string containing just the characters `'('` and `')'`, return *the length of the longest valid (well-formed) parentheses* *substring*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"(()\"\n**Output:** 2\n**Explanation:** The longest valid parentheses substring is \"()\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \")()())\"\n**Output:** 4\n**Explanation:** The longest valid parentheses substring is \"()()\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"\"\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= s.length <= 3 * 104`\n* `s[i]` is `'('`, or `')'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        n = len(s)\n        f = [0] * (n + 1)\n        for i, c in enumerate(s, 1):\n            if c == \")\":\n                if i > 1 and s[i - 2] == \"(\":\n                    f[i] = f[i - 2] + 2\n                else:\n                    j = i - f[i - 1] - 1\n                    if j and s[j - 1] == \"(\":\n                        f[i] = f[i - 1] + 2 + f[j - 1]\n        return max(f)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        n = len(s)\n        f = [0] * (n + 1)\n        for i, c in enumerate(s, 1):\n            if c == \")\":\n                if i > 1 and s[i - 2] == \"(\":\n                    f[i] = f[i - 2] + 2\n                else:\n                    j = i - f[i - 1] - 1\n                    if j and s[j - 1] == \"(\":\n                        f[i] = f[i - 1] + 2 + f[j - 1]\n        return max(f)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string containing only '(' and ')'\n    s = ''.join(random.choices(['(', ')'], k=random.randint(0, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestValidParentheses(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestValidParentheses(s) == expected_result\n        print(f\"assert solution.longestValidParentheses('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestValidParentheses('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestValidParentheses(')))') == 0\nassert solution.longestValidParentheses('()') == 2\nassert solution.longestValidParentheses('((()))(()(') == 6\nassert solution.longestValidParentheses(')') == 0\nassert solution.longestValidParentheses(')(') == 0\nassert solution.longestValidParentheses(')())())') == 2\nassert solution.longestValidParentheses('') == 0\nassert solution.longestValidParentheses(')))(()') == 2\nassert solution.longestValidParentheses(')())()') == 2\nassert solution.longestValidParentheses('))((') == 0\nassert solution.longestValidParentheses('(())()(') == 6\nassert solution.longestValidParentheses('))()') == 2\nassert solution.longestValidParentheses(')(()))((') == 4\nassert solution.longestValidParentheses(')()(') == 2\nassert solution.longestValidParentheses('()((') == 2\nassert solution.longestValidParentheses('))(()))(') == 4\nassert solution.longestValidParentheses(')(()())') == 6\nassert solution.longestValidParentheses('((') == 0\nassert solution.longestValidParentheses('()') == 2\nassert solution.longestValidParentheses('))(') == 0\nassert solution.longestValidParentheses('))))(()') == 2\nassert solution.longestValidParentheses('((())((((') == 4\nassert solution.longestValidParentheses('(())(()(') == 4\nassert solution.longestValidParentheses('()') == 2\nassert solution.longestValidParentheses('') == 0\nassert solution.longestValidParentheses('(((((((((') == 0\nassert solution.longestValidParentheses('(') == 0\nassert solution.longestValidParentheses('') == 0\nassert solution.longestValidParentheses(')()(()((') == 2\nassert solution.longestValidParentheses('())(') == 2\nassert solution.longestValidParentheses('') == 0\nassert solution.longestValidParentheses(')((((') == 0\nassert solution.longestValidParentheses('((()()()((') == 6\nassert solution.longestValidParentheses('(()(()()') == 4\nassert solution.longestValidParentheses('()()()()(') == 8\nassert solution.longestValidParentheses(')(()((()') == 2\nassert solution.longestValidParentheses(')())()') == 2\nassert solution.longestValidParentheses('((()') == 2\nassert solution.longestValidParentheses('()') == 2\nassert solution.longestValidParentheses('(') == 0\nassert solution.longestValidParentheses('((())()') == 6\nassert solution.longestValidParentheses('()()(()(') == 4\nassert solution.longestValidParentheses('())())(') == 2\nassert solution.longestValidParentheses('(') == 0\nassert solution.longestValidParentheses('))()))') == 2\nassert solution.longestValidParentheses('') == 0\nassert solution.longestValidParentheses('))))') == 0\nassert solution.longestValidParentheses('()(()))(') == 6\nassert solution.longestValidParentheses(')((())') == 4\nassert solution.longestValidParentheses('(') == 0\nassert solution.longestValidParentheses('))()))))))') == 2\nassert solution.longestValidParentheses('())') == 2\nassert solution.longestValidParentheses('((((') == 0\nassert solution.longestValidParentheses(')((()') == 2\nassert solution.longestValidParentheses(')((') == 0\nassert solution.longestValidParentheses(')()') == 2\nassert solution.longestValidParentheses(')(') == 0\nassert solution.longestValidParentheses(')()()))') == 4\nassert solution.longestValidParentheses('(()(((()') == 2\nassert solution.longestValidParentheses('()))') == 2\nassert solution.longestValidParentheses(')(') == 0\nassert solution.longestValidParentheses('((()((((') == 2\nassert solution.longestValidParentheses('((())') == 4\nassert solution.longestValidParentheses('())((') == 2\nassert solution.longestValidParentheses(')()(((((((') == 2\nassert solution.longestValidParentheses('))') == 0\nassert solution.longestValidParentheses('())))()') == 2\nassert solution.longestValidParentheses('()))((())') == 4\nassert solution.longestValidParentheses(')(((())((') == 4\nassert solution.longestValidParentheses(')))))(()((') == 2\nassert solution.longestValidParentheses('()(()()(') == 4\nassert solution.longestValidParentheses(')') == 0\nassert solution.longestValidParentheses('((') == 0\nassert solution.longestValidParentheses('(()))()())') == 4\nassert solution.longestValidParentheses('()()(((') == 4\nassert solution.longestValidParentheses('(()(') == 2\nassert solution.longestValidParentheses('())(') == 2\nassert solution.longestValidParentheses(')())(') == 2\nassert solution.longestValidParentheses('') == 0\nassert solution.longestValidParentheses('()()(()))') == 8\nassert solution.longestValidParentheses(')(') == 0\nassert solution.longestValidParentheses(')(()') == 2\nassert solution.longestValidParentheses(')()())())') == 4\nassert solution.longestValidParentheses('((()()(((') == 4\nassert solution.longestValidParentheses('))()()))()') == 4\nassert solution.longestValidParentheses('') == 0\nassert solution.longestValidParentheses('))') == 0\nassert solution.longestValidParentheses('))()(()(') == 2\nassert solution.longestValidParentheses('(()(()') == 2\nassert solution.longestValidParentheses('(()()))()') == 6\nassert solution.longestValidParentheses('') == 0\nassert solution.longestValidParentheses('))()(') == 2\nassert solution.longestValidParentheses('()((') == 2\nassert solution.longestValidParentheses('))(()(((') == 2\nassert solution.longestValidParentheses('((()(') == 2\nassert solution.longestValidParentheses('))(()()()(') == 6\nassert solution.longestValidParentheses(')))()()(') == 4\nassert solution.longestValidParentheses('))()))') == 2\nassert solution.longestValidParentheses('(((') == 0\nassert solution.longestValidParentheses('()()))') == 4",
  "inefficient_solution": "class Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        n = len(s)\n        f = [''] * (n * 100)\n        for i, c in enumerate(s, 1):\n            if c == \")\":\n                if i > 1 and s[i - 2] == \"(\":\n                    for j in range(i):\n                        f[j] = ''\n                for j in range(i - 1, -1, -1):\n                    if j <= 1:\n                        break\n                    prev = s[j - 1]\n                    if prev == \"(\":\n                        temp = []\n                        for k in range(j - 1, -1, -1):\n                            temp.append(f[k])\n                        f[j - 1] = ''.join(temp)\n                        f[j - 1] = ''\n                        break\n                for j in range(i - 1, 0, -1):\n                    if f[j] == '':\n                        f[j] = s[j]\n                    elif f[j] == '(':\n                        f[j] = '(' + f[j - 1]\n                        break\n            f[i] = s[i]\n        max_len = 0\n        for i in range(n):\n            if f[i] != '':\n                max_len = max(max_len, len(f[i]))\n        return max_len",
  "is_python": true
}