{
  "problem_idx": 1023,
  "task_name": "Camelcase Matching",
  "markdown_description": "\nGiven an array of strings `queries` and a string `pattern`, return a boolean array `answer` where `answer[i]` is `true` if `queries[i]` matches `pattern`, and `false` otherwise.\n\n\nA query word `queries[i]` matches `pattern` if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"\n**Output:** [true,false,true,true,false]\n**Explanation:** \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\n\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\n\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"\n**Output:** [true,false,true,false,false]\n**Explanation:** \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\n\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"\n**Output:** [false,true,false,false,false]\n**Explanation:** \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= pattern.length, queries.length <= 100`\n* `1 <= queries[i].length <= 100`\n* `queries[i]` and `pattern` consist of English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:\n        def check(s, t):\n            m, n = len(s), len(t)\n            i = j = 0\n            while j < n:\n                while i < m and s[i] != t[j] and s[i].islower():\n                    i += 1\n                if i == m or s[i] != t[j]:\n                    return False\n                i, j = i + 1, j + 1\n            while i < m and s[i].islower():\n                i += 1\n            return i == m\n\n        return [check(q, pattern) for q in queries]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import namedtuple\n\n# Defined the named tuple TestCase\nTestCase = namedtuple(\"TestCase\", [\"queries\", \"pattern\", \"expected_result\"])\n\ndef generate_test_case():\n    # Create an instance of the Solution class\n    solution = Solution()\n\n    # Generate random queries list\n    queries = [\"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", k=random.randint(1, 10))) for _ in range(random.randint(1, 10))]\n    \n    # Generate a random pattern string\n    pattern = \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\", k=random.randint(1, 5)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.camelMatch(queries, pattern)\n\n    return TestCase(queries, pattern, expected_result)\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n\n    for _ in range(num_tests):\n        test_case = generate_test_case()\n\n        # Accessing the attributes of the named tuple TestCase\n        queries = test_case.queries\n        pattern = test_case.pattern\n        expected_result = test_case.expected_result\n\n        # Create an instance of the Solution class\n        solution = Solution()\n\n        # Format the test case into the desired format\n        test_case_str = f\"assert solution.camelMatch({queries}, '{pattern}') == {expected_result}\"\n        \n        # Print the test case\n        print(test_case_str)\n        \n        # Append the formatted test case to the results list\n        test_case_generator_results.append(test_case_str)\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.camelMatch(['FuwEUqOmyV', 'QoQUzL', 'orSqsbOVY', 'Ur', 'VjYVovyk', 'csp'], 'H') == [False, False, False, False, False, False]\nassert solution.camelMatch(['Ja', 'LCAvE'], 'vqcyV') == [False, False]\nassert solution.camelMatch(['m', 'KI', 'Nlx', 'alRasu', 'MdlXxGaXT', 'BmcoZNA', 'XfQb', 'EfewFJI', 'gwmTou'], 'H') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['dojrWHV', 'D', 'WaceAPN', 'g', 'HlmdYdvA', 'SESlC', 'GZKT', 'KO', 'UguSpf', 'dNAEex'], 'Qb') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['uRwzLrgV', 'WEr'], 'Aq') == [False, False]\nassert solution.camelMatch(['DF', 'vwPOvDG', 'CBP', 'nrxnd'], 'vu') == [False, False, False, False]\nassert solution.camelMatch(['OLsgIRsyL', 'IQvRrd', 'ZI', 'WnxSQtsE', 'C', 'kdkzK'], 'i') == [False, False, False, False, False, False]\nassert solution.camelMatch(['xhXFxtF', 'OBuuqEHr', 'ooThHJAQC', 'RkEfgHE', 'LsP', 'u', 'acjyjMRv', 'cbFb', 'OKX'], 'qR') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['MuDdFDHVfq'], 'xm') == [False]\nassert solution.camelMatch(['NkknaRL', 'TBrlvZb', 'SBQMYrIQM'], 'mKv') == [False, False, False]\nassert solution.camelMatch(['ljXGi', 'OV', 'SsrOowri', 'OtFdmGJJ', 'VbqcmI', 'CrBznZIp'], 'sYpd') == [False, False, False, False, False, False]\nassert solution.camelMatch(['I', 'qpu', 'BdZaW', 'fRrejBH', 'Q', 'NxIlOaocN', 'dBmiAPj', 'Rsuxu'], 'LU') == [False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['Qo', 'Oou', 'dVrzRr', 'qHWo', 'yonnefUhF', 'HX'], 'GV') == [False, False, False, False, False, False]\nassert solution.camelMatch(['QnNRwwAeH', 'puXD', 'NUBr'], 'bO') == [False, False, False]\nassert solution.camelMatch(['sHnUk', 'hviKT', 'CoAzNDftCD'], 'Ephv') == [False, False, False]\nassert solution.camelMatch(['BgwAvXEN', 'JIRHDfRti', 'ORog', 'gwkrmUWVC'], 'm') == [False, False, False, False]\nassert solution.camelMatch(['nblomiPB', 'bcmIaBMV', 'cDLASlZI', 'KnKsoSkb'], 'dB') == [False, False, False, False]\nassert solution.camelMatch(['L', 'uRqfH', 'nzNECehGM', 'AIa', 'KOmPgLFJX', 'rVP', 'lYRzxfiXB', 'ThDULUL', 'fgduitlF', 'wvFF'], 'dnczj') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['EZMmJser'], 'dD') == [False]\nassert solution.camelMatch(['zWOTAa', 'JFMJGmJnEN', 'LQJZ', 'kHL', 'kJXNmNYBr', 'clHuH', 'sdhsgGarMB', 'fLu', 'BsPLUIHWN', 'c'], 'u') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['bD', 'oQWVqx', 'hRIvNiV', 'BDbTapfYo', 'wZrajre'], 'zVUOD') == [False, False, False, False, False]\nassert solution.camelMatch(['QmKaLTWDV', 'wdtpkpEu'], 'TS') == [False, False]\nassert solution.camelMatch(['vnRiXCLR'], 'DgE') == [False]\nassert solution.camelMatch(['hC', 'Asa', 'ZzpumgZ'], 'lfAla') == [False, False, False]\nassert solution.camelMatch(['MNqZs', 'i', 'dWvT', 'aDcxbklWsL', 'GbQoW'], 'o') == [False, False, False, False, False]\nassert solution.camelMatch(['s', 'kpGzKY', 'fnbLMazexE', 'uRJVoENHc', 'EWWV', 'MlJbXC'], 'JLv') == [False, False, False, False, False, False]\nassert solution.camelMatch(['kldby', 'srMN', 'O', 'erjEATLwPI', 'NZbz'], 'V') == [False, False, False, False, False]\nassert solution.camelMatch(['ACSOkdgN', 'GuSlVgBW', 'NnPZ', 'exI', 'Ptw', 'YeQ', 'cBBoybDKey', 'tbhnGXwDa'], 'CxC') == [False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['efexQAM', 'rMSwID'], 'am') == [False, False]\nassert solution.camelMatch(['n', 'IlGUyMj', 'I', 'FXvFI', 'PCBT', 'JJB', 'XI', 'HAsUSD', 'eKvGjAV'], 'EhY') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['IJfIGV', 'lGA', 'saZqgUf', 'NMZWVi', 'drqLxWOI', 'SJFlIGrB', 'aJHhIif'], 'mbUd') == [False, False, False, False, False, False, False]\nassert solution.camelMatch(['HVmwqkUy', 'lHsFolANX', 'Cc', 'yGAbMQPe', 'ytmLhh', 'c', 'Do'], 'tcg') == [False, False, False, False, False, False, False]\nassert solution.camelMatch(['OD', 'cjYtSS', 'mEogZ'], 'jA') == [False, False, False]\nassert solution.camelMatch(['frR', 'CvTstKq', 'NIkGKkW'], 'eHPr') == [False, False, False]\nassert solution.camelMatch(['FVQiLASDdL', 'eqf', 'qsz', 'vzFQADP', 'Sb', 'j', 'QMdaPQL', 'ORrXkojo', 'nusmYED'], 'tWh') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['qPrgeSgE', 'roNZ', 'htSd', 'umGjN'], 'nz') == [False, False, False, False]\nassert solution.camelMatch(['YzuNLwrp', 'si', 'fI', 'LIU', 'exPl', 'MiJEpUq', 'WUWz', 'AdvzS', 'F'], 'tMp') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['GVrzS', 'yaIYiPwhi', 'j', 'OkO'], 'ZeH') == [False, False, False, False]\nassert solution.camelMatch(['lID', 'WINkVn', 'Ap', 'MLX', 'Xo', 'QE', 'IJpQg', 'fDkPS', 'KtQjuPDGxL', 'SLnlM'], 'DWv') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['TQ', 'WQ', 'vLAkOAZ'], 'cZX') == [False, False, False]\nassert solution.camelMatch(['zBIedY', 'ouSjq', 'QarRYNnN', 'ZKcWj', 'Lwi', 'hDmFyijfsA', 'hdvC', 'HkpEO', 'RvezAho'], 'qWs') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['CiPCTpVS', 'TSBAe', 'esmeVCLo', 'recT'], 'vAJ') == [False, False, False, False]\nassert solution.camelMatch(['S', 'hYclKGLf', 'JF'], 'HzExh') == [False, False, False]\nassert solution.camelMatch(['b', 'GsbjJtHR', 'uQNFIIjWz', 'TnfRgvwyzu', 'bDhHfGUpXM', 'ABpJF', 'IZnp'], 'b') == [True, False, False, False, False, False, False]\nassert solution.camelMatch(['zH', 'EQte'], 'AmwmH') == [False, False]\nassert solution.camelMatch(['gyn', 'QkFqVviE', 'RqlcM'], 'eG') == [False, False, False]\nassert solution.camelMatch(['pzjotBXMeD', 'nMMGaLbnRp', 'HDgtlR', 'heHXcDVcyH', 'T', 'DqXAfkny', 'kbnT', 'Dx', 'dYAU', 'BiKuB'], 'CHH') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['DmJlJSTbvp'], 'tF') == [False]\nassert solution.camelMatch(['KfAnOObCYT', 'wL', 'ESLjGG', 'MOzLdyMwwv', 'rjhNrZx', 'k', 'b', 'wmHK', 'nTc', 'KKFxc'], 'pCz') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['XaHiZrF', 'YbiP', 'O', 'XH', 'IYlSV', 'fSm', 'huTxH', 'shHIHwDcm', 'nORhXJH', 'T'], 'yRaU') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['peMukKLp', 'aNjdYIDZr', 'K', 'IgZzoE', 'OI'], 'I') == [False, False, False, False, False]\nassert solution.camelMatch(['ox', 'rpRiuM', 'WOIhcjMYjl', 'HcLqAKdG', 'EcoSXzPjaI', 's', 'qbMv', 'SiXSOMfeaG', 'zbgHJ', 'GrCNeG'], 'sMB') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['zQtyy', 'ninpaps', 'G', 'CxZGKH', 'llZWQg'], 'E') == [False, False, False, False, False]\nassert solution.camelMatch(['tLJL', 'bmTPf', 'NAAu', 'CHL', 'ChRkkljygx', 'XVvjEp', 'ZhqeN', 'vzXZtji', 'qWK', 'MmyXZTPqu'], 'AObyE') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['Sjpflt', 'hL', 'isHdchzy', 'F', 'EX', 'itVkidoE', 'Fv', 'PKTdwNliB', 'ooZRBxIU'], 'dUan') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['IzP', 'OxTGGrHaaK', 'xTT', 'lLCtHJcwEe', 'qLO'], 'USd') == [False, False, False, False, False]\nassert solution.camelMatch(['RuAuQQn', 'zvOFfiZba', 'QaWRHxFY', 'hkW', 'lZw'], 'k') == [False, False, False, False, False]\nassert solution.camelMatch(['lkCQKnqjE', 'STJnEq'], 'WzZFk') == [False, False]\nassert solution.camelMatch(['dVTIoANjX', 'BcvhUwKHS', 'SBWKX', 'cgpmMSRxb', 'NjNx', 'TD', 'wXtVa'], 'QiBRJ') == [False, False, False, False, False, False, False]\nassert solution.camelMatch(['EZm', 'winIXR', 'wpHqY'], 'HKC') == [False, False, False]\nassert solution.camelMatch(['Vyb', 'ZXctJY', 'BQvhrPiQ', 'vVHQxyM', 'wuCIB', 'akQaXA', 'SOsBpAV'], 'eZek') == [False, False, False, False, False, False, False]\nassert solution.camelMatch(['xduvIaBK', 'jHhSC', 'YRvmu', 'cFVBGSWMf', 'BeKEMTI', 'D', 'rGFlPKBUA', 'CJOsuzeu', 'T', 'qFqYWNQiw'], 'pjVxo') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['F', 'OPwfnEmw', 'wtDWNLDbB', 'd'], 'f') == [False, False, False, False]\nassert solution.camelMatch(['nb', 'aBMPbAmm'], 'M') == [False, False]\nassert solution.camelMatch(['vcOLZoyRvH', 'gtBWVV', 'IsCzvuq', 'XP', 'x', 'NJLVZiQGb', 'rkSLewhIz'], 'YygV') == [False, False, False, False, False, False, False]\nassert solution.camelMatch(['IqJNKh', 'mqFbcNI', 'YLxN', 'qDgIfWdtE', 'UxMlx', 'vJnB', 'xx', 'rbOGWBk'], 'mjgc') == [False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['qGElQhM', 'lvAPKw', 'Ro', 'MaMHeYD', 'KiCbVQ'], 'aGxqA') == [False, False, False, False, False]\nassert solution.camelMatch(['BKssBF', 'G', 'QiUoVhLNK', 'gCcJbe', 'lr', 'crJAfI', 'QgDmdh', 'pnVWHpvKv'], 'cRIMU') == [False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['CQ'], 'K') == [False]\nassert solution.camelMatch(['PlAEn', 'd', 'IRpJKuDnV', 'KGabQgQtmF', 'HQNDrSldF', 'YjG', 'jPypOCpRz', 'CuMRbYp', 'uGFYkLf', 'UB'], 'H') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['Jyp', 'UbitXehRk', 'bXwXYk', 'KudnI'], 'vBiwo') == [False, False, False, False]\nassert solution.camelMatch(['A', 'TIO', 'NaBfVKKK'], 'LSzB') == [False, False, False]\nassert solution.camelMatch(['QiRoSyamH', 'vJnN'], 'VdjVV') == [False, False]\nassert solution.camelMatch(['mqg', 'gand', 'rdcJDIzD', 'YUMZOhOR', 'eEhsN', 'egMMelfx', 'oRDRJOrYp', 'gKihHNFvt', 'Xy'], 'V') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['lliauay', 'RdgXKEfo', 'm', 'NsggjK', 'LMyAgjTXu', 'VuHHXXDdTt'], 'JV') == [False, False, False, False, False, False]\nassert solution.camelMatch(['UWS', 'Vz', 'HxV', 'RY', 'xEbvWo', 'PTIJZghx', 'NuVDsjCU'], 'xaPh') == [False, False, False, False, False, False, False]\nassert solution.camelMatch(['kBPTdKUuQS', 'q', 'N', 'namR', 'QPbaLBFJJ', 'fyy'], 'cE') == [False, False, False, False, False, False]\nassert solution.camelMatch(['Uo', 'cpMjFNSn', 'GlCqu', 'jeJtc', 'yGqWy', 'zHcaJLsHJb', 'lw', 'fRUzA', 'qt'], 'nUfO') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['f', 'slMUS', 'lVImBdQgo', 'DxIT', 'xMfVaftd', 'hrTf', 'G', 'xKxy'], 'xAkNn') == [False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['TlvrIizzV', 'WnquNiXKO', 'fDPH', 'oITOlAu'], 'yPKp') == [False, False, False, False]\nassert solution.camelMatch(['Yom', 'blCDEBegMW'], 'qKy') == [False, False]\nassert solution.camelMatch(['sHa'], 'm') == [False]\nassert solution.camelMatch(['ks', 'JwGjVp', 'JCGsixX', 'VREV', 'O', 'FisDZJ', 'jfVkwi', 'vobSRmR', 'msquNozDZ', 'pk'], 'IX') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['tTsE', 'teHdxkcW', 'MsvnFUXoE', 'tZoj'], 'Wj') == [False, False, False, False]\nassert solution.camelMatch(['KSpBuiLEL', 'fpdH', 'jtiO', 'NJdgN', 'rjnlx', 'p', 'i', 'GVGYV', 'zkEVbt'], 'urwNm') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['pIwSFUTVE', 'aKDbySPR', 'uZbqj', 'RxKQ', 'Zs', 'oLcOEdQ', 'YCBeDFj', 'CO', 'OjZgCVro'], 'UNPtz') == [False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['husUMB', 'nf', 'UHYIHY', 'DfltzUakIs', 'qtrtRphK', 'UcZYaHWp', 'djpwE', 'XlrA'], 'eKt') == [False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['WOHU'], 'Dc') == [False]\nassert solution.camelMatch(['HuYGNpZFg'], 'ccyor') == [False]\nassert solution.camelMatch(['xkybVIHiKK', 'znPt', 'vF', 'F', 'ezjm', 'INd', 'rd'], 'gXS') == [False, False, False, False, False, False, False]\nassert solution.camelMatch(['uYvuocA'], 'rl') == [False]\nassert solution.camelMatch(['c', 'NmP'], 'BiRnH') == [False, False]\nassert solution.camelMatch(['NqKW', 'jFPojEll', 'sML', 'FZaNgV', 'uusFWm', 'zCdL', 'ccLTZraa', 'eSlCpDqbC', 'GvEG', 'J'], 'wJCT') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['oNcJmt'], 'G') == [False]\nassert solution.camelMatch(['HjGf', 'jPpCYaIzId', 'OMWk', 'rC', 'yEmIuS'], 'WAiFo') == [False, False, False, False, False]\nassert solution.camelMatch(['iIdmEtXYvA', 'sH', 'ROqKLutCG', 'IBAykjjEn', 'bnXjuWQInF', 'krpoaA', 'Z', 'z'], 'F') == [False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['WMkqJ', 'VZT', 'oeh'], 'duO') == [False, False, False]\nassert solution.camelMatch(['pF', 'qMyxOYZm', 'PCBDhYSMe'], 'pNOP') == [False, False, False]\nassert solution.camelMatch(['wG', 'nDlQ', 'IvCaQeUTbK', 'QzrdutHXpF', 'qTv', 'e', 'EXeWCS', 'wRrA', 'BVtxzAOXzP', 'aEZpIQlHo'], 'dllt') == [False, False, False, False, False, False, False, False, False, False]\nassert solution.camelMatch(['Q', 'wVn', 'UTqdgG', 'U', 'uSvGVKX'], 'TMb') == [False, False, False, False, False]",
  "inefficient_solution": "class Solution:\n    def camelMatch(self, queries, pattern):\n        def check(s, t):\n            m, n = len(s), len(t)\n            i = j = 0\n            s_list = list(s)\n            new_s = [0] * m\n            while j < n:\n                while i < m and s_list[i] != t[j] and s_list[i].islower():\n                    new_s[i] = 1\n                    i += 1\n                if i == m or s_list[i] != t[j]:\n                    return False\n                new_s[i] = 1\n                i, j = i + 1, j + 1\n            while i < m and s_list[i].islower():\n                new_s[i] = 1\n                i += 1\n            s_list = [x for i, x in enumerate(s_list) if not new_s[i]]\n            return i == m and ''.join(s_list) == s\n\n        return [check(q, pattern) for q in queries]",
  "is_python": true
}