{
  "problem_idx": 2139,
  "task_name": "Minimum Moves to Reach Target Score",
  "markdown_description": "\nYou are playing a game with integers. You start with the integer `1` and you want to reach the integer `target`.\n\n\nIn one move, you can either:\n\n\n* **Increment** the current integer by one (i.e., `x = x + 1`).\n* **Double** the current integer (i.e., `x = 2 * x`).\n\n\nYou can use the **increment** operation **any** number of times, however, you can only use the **double** operation **at most** `maxDoubles` times.\n\n\nGiven the two integers `target` and `maxDoubles`, return *the minimum number of moves needed to reach* `target` *starting with* `1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** target = 5, maxDoubles = 0\n**Output:** 4\n**Explanation:** Keep incrementing by 1 until you reach target.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** target = 19, maxDoubles = 2\n**Output:** 7\n**Explanation:** Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** target = 10, maxDoubles = 4\n**Output:** 4\n**Explanation:**Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= target <= 109`\n* `0 <= maxDoubles <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minMoves(self, target: int, maxDoubles: int) -> int:\n        ans = 0\n        while maxDoubles and target > 1:\n            ans += 1\n            if target % 2 == 1:\n                target -= 1\n            else:\n                maxDoubles -= 1\n                target >>= 1\n        ans += target - 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minMoves(self, target: int, maxDoubles: int) -> int:\n        ans = 0\n        while maxDoubles and target > 1:\n            ans += 1\n            if target % 2 == 1:\n                target -= 1\n            else:\n                maxDoubles -= 1\n                target >>= 1\n        ans += target - 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random target and maxDoubles\n    target = random.randint(1, 10**9)\n    maxDoubles = random.randint(0, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minMoves(target, maxDoubles)\n\n    return target, maxDoubles, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        target, maxDoubles, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minMoves(target, maxDoubles) == expected_result\n        print(f\"assert solution.minMoves({target}, {maxDoubles}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minMoves({target}, {maxDoubles}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minMoves(862827494, 91) == 47\nassert solution.minMoves(69819031, 26) == 38\nassert solution.minMoves(404847662, 18) == 1571\nassert solution.minMoves(59825841, 46) == 38\nassert solution.minMoves(157716501, 88) == 37\nassert solution.minMoves(639840986, 93) == 42\nassert solution.minMoves(55266379, 9) == 107954\nassert solution.minMoves(459802400, 90) == 38\nassert solution.minMoves(786978724, 55) == 44\nassert solution.minMoves(338425374, 19) == 675\nassert solution.minMoves(655420608, 29) == 40\nassert solution.minMoves(306048765, 23) == 76\nassert solution.minMoves(88771804, 91) == 38\nassert solution.minMoves(789722035, 37) == 44\nassert solution.minMoves(344541152, 15) == 10535\nassert solution.minMoves(114324015, 5) == 3572633\nassert solution.minMoves(978496315, 16) == 14955\nassert solution.minMoves(357303586, 96) == 37\nassert solution.minMoves(794641939, 3) == 99330246\nassert solution.minMoves(195524739, 9) == 381895\nassert solution.minMoves(283482560, 0) == 283482559\nassert solution.minMoves(546178064, 78) == 35\nassert solution.minMoves(224915935, 63) == 46\nassert solution.minMoves(233712556, 57) == 43\nassert solution.minMoves(116673376, 18) == 468\nassert solution.minMoves(446688876, 34) == 46\nassert solution.minMoves(577872495, 35) == 43\nassert solution.minMoves(102820188, 5) == 3213137\nassert solution.minMoves(856838816, 91) == 39\nassert solution.minMoves(242192192, 17) == 1870\nassert solution.minMoves(396036746, 18) == 1534\nassert solution.minMoves(83184130, 81) == 36\nassert solution.minMoves(968722701, 41) == 44\nassert solution.minMoves(203483607, 44) == 40\nassert solution.minMoves(601768314, 58) == 44\nassert solution.minMoves(155550007, 26) == 38\nassert solution.minMoves(977935670, 47) == 43\nassert solution.minMoves(966463095, 58) == 46\nassert solution.minMoves(936788476, 65) == 46\nassert solution.minMoves(36229630, 58) == 38\nassert solution.minMoves(760190278, 30) == 44\nassert solution.minMoves(802270214, 80) == 43\nassert solution.minMoves(70479100, 95) == 40\nassert solution.minMoves(800858500, 3) == 100107315\nassert solution.minMoves(575474549, 0) == 575474548\nassert solution.minMoves(850599499, 6) == 13290625\nassert solution.minMoves(874491894, 7) == 6831978\nassert solution.minMoves(976721382, 40) == 46\nassert solution.minMoves(244326171, 26) == 40\nassert solution.minMoves(115850076, 67) == 43\nassert solution.minMoves(736477671, 85) == 46\nassert solution.minMoves(623526528, 86) == 37\nassert solution.minMoves(65152516, 63) == 34\nassert solution.minMoves(617830640, 72) == 42\nassert solution.minMoves(322047233, 69) == 37\nassert solution.minMoves(634908654, 35) == 50\nassert solution.minMoves(220657888, 13) == 26952\nassert solution.minMoves(817640412, 94) == 44\nassert solution.minMoves(22187353, 100) == 35\nassert solution.minMoves(707166011, 9) == 1381197\nassert solution.minMoves(170694669, 41) == 37\nassert solution.minMoves(440300484, 31) == 43\nassert solution.minMoves(410082749, 42) == 44\nassert solution.minMoves(677393319, 41) == 41\nassert solution.minMoves(426625098, 84) == 41\nassert solution.minMoves(130021055, 28) == 48\nassert solution.minMoves(858861642, 100) == 40\nassert solution.minMoves(4128705, 89) == 36\nassert solution.minMoves(492372479, 77) == 44\nassert solution.minMoves(933382224, 8) == 3646033\nassert solution.minMoves(836516462, 17) == 6407\nassert solution.minMoves(33648866, 21) == 44\nassert solution.minMoves(733501287, 21) == 381\nassert solution.minMoves(306024722, 80) == 39\nassert solution.minMoves(555357502, 26) == 45\nassert solution.minMoves(394842725, 39) == 41\nassert solution.minMoves(322822507, 4) == 20176412\nassert solution.minMoves(719655357, 88) == 44\nassert solution.minMoves(291663585, 68) == 41\nassert solution.minMoves(410975781, 3) == 51371976\nassert solution.minMoves(782136753, 59) == 46\nassert solution.minMoves(27944693, 56) == 38\nassert solution.minMoves(20663394, 65) == 35\nassert solution.minMoves(269929096, 18) == 1053\nassert solution.minMoves(554757613, 16) == 8491\nassert solution.minMoves(894846304, 33) == 41\nassert solution.minMoves(708254708, 93) == 45\nassert solution.minMoves(323960180, 65) == 44\nassert solution.minMoves(933392830, 49) == 46\nassert solution.minMoves(3577385, 12) == 889\nassert solution.minMoves(954996090, 23) == 147\nassert solution.minMoves(573956824, 18) == 2215\nassert solution.minMoves(892652420, 57) == 42\nassert solution.minMoves(551542614, 68) == 47\nassert solution.minMoves(858653955, 25) == 58\nassert solution.minMoves(483568900, 92) == 40\nassert solution.minMoves(369268054, 25) == 44\nassert solution.minMoves(26496237, 93) == 36\nassert solution.minMoves(124244442, 30) == 42\nassert solution.minMoves(371479468, 2) == 92869868",
  "inefficient_solution": "class Solution:\n    def minMoves(self, target: int, maxDoubles: int) -> int:\n        moves = []\n        x = 1\n        while x < target:\n            if maxDoubles:\n                moves.append(1)\n                x *= 2\n                maxDoubles -= 1\n            else:\n                moves.append(1)\n                x += 1\n        while x < target:\n            moves.append(1)\n            x += 1\n        return len(moves)",
  "is_python": true
}