{
  "problem_idx": 924,
  "task_name": "Minimize Malware Spread",
  "markdown_description": "\nYou are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.\n\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\n\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove **exactly one node** from `initial`.\n\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with **the smallest index**.\n\n\nNote that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n**Output:** 0\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n**Output:** 0\n\n```\n**Example 3:**\n\n\n\n```\n**Input:** graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == graph.length`\n* `n == graph[i].length`\n* `2 <= n <= 300`\n* `graph[i][j]` is `0` or `1`.\n* `graph[i][j] == graph[j][i]`\n* `graph[i][i] == 1`\n* `1 <= initial.length <= n`\n* `0 <= initial[i] <= n - 1`\n* All the integers in `initial` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:\n        n = len(graph)\n        p = list(range(n))\n        size = [1] * n\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if graph[i][j] == 1:\n                    pa, pb = find(i), find(j)\n                    if pa == pb:\n                        continue\n                    p[pa] = pb\n                    size[pb] += size[pa]\n\n        mi = inf\n        res = initial[0]\n        initial.sort()\n        for i in range(len(initial)):\n            t = 0\n            s = set()\n            for j in range(len(initial)):\n                if i == j:\n                    continue\n                if find(initial[j]) in s:\n                    continue\n                s.add(find(initial[j]))\n                t += size[find(initial[j])]\n            if mi > t:\n                mi = t\n                res = initial[i]\n        return res\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minMalwareSpread(self, graph, initial):\n        n = len(graph)\n        p = list(range(n))\n        size = [1] * n\n\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if graph[i][j] == 1:\n                    pa, pb = find(i), find(j)\n                    if pa == pb:\n                        continue\n                    p[pa] = pb\n                    size[pb] += size[pa]\n\n        mi = inf\n        res = initial[0]\n        initial.sort()\n        for i in range(len(initial)):\n            t = 0\n            s = set()\n            for j in range(len(initial)):\n                if i == j:\n                    continue\n                if find(initial[j]) in s:\n                    continue\n                s.add(find(initial[j]))\n                t += size[find(initial[j])]\n            if mi > t:\n                mi = t\n                res = initial[i]\n        return res\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random adjacency matrix\n    n = random.randint(2, 10)\n    graph = [[random.randint(0, 1) for _ in range(n)] for _ in range(n)]\n    \n    # Generate random list of infected nodes\n    initial = random.sample(range(n), random.randint(1, n))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minMalwareSpread(graph, initial)\n\n    return graph, initial, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        graph, initial, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minMalwareSpread(graph, initial) == expected_result\n        print(f\"assert solution.minMalwareSpread({graph}, {initial}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minMalwareSpread({graph}, {initial}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minMalwareSpread([[1, 1, 0], [1, 1, 1], [1, 0, 1]], [2]) == 2\nassert solution.minMalwareSpread([[1, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0]], [0, 1, 2, 3, 7, 8]) == 0\nassert solution.minMalwareSpread([[0, 1], [1, 0]], [0, 1]) == 0\nassert solution.minMalwareSpread([[1, 0, 0, 0], [0, 0, 1, 1], [1, 1, 0, 1], [0, 0, 1, 0]], [2, 3]) == 2\nassert solution.minMalwareSpread([[0, 0, 1, 1, 0], [0, 0, 0, 1, 1], [0, 1, 0, 1, 0], [0, 1, 0, 0, 0], [0, 1, 0, 1, 1]], [1, 2, 3, 4]) == 1\nassert solution.minMalwareSpread([[0, 1, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 0]], [2, 4]) == 2\nassert solution.minMalwareSpread([[0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1]], [0, 1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert solution.minMalwareSpread([[1, 0, 1, 1, 0], [1, 1, 0, 1, 0], [1, 0, 1, 1, 1], [1, 0, 1, 1, 0], [1, 0, 0, 1, 0]], [2]) == 2\nassert solution.minMalwareSpread([[1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert solution.minMalwareSpread([[0, 1, 1, 0, 1, 1, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0]], [0, 2, 4, 5, 6, 7]) == 0\nassert solution.minMalwareSpread([[0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 0]], [0]) == 0\nassert solution.minMalwareSpread([[1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1]], [0, 1, 2, 3, 4, 5, 6]) == 0\nassert solution.minMalwareSpread([[1, 0, 0, 0, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 1, 1]], [0, 1, 2, 3, 4, 5, 6, 7]) == 0\nassert solution.minMalwareSpread([[1, 1, 0], [1, 0, 0], [0, 0, 0]], [0, 1, 2]) == 2\nassert solution.minMalwareSpread([[1, 1], [0, 1]], [0, 1]) == 0\nassert solution.minMalwareSpread([[1, 0, 0], [0, 1, 1], [1, 0, 1]], [0, 1, 2]) == 0\nassert solution.minMalwareSpread([[1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1]], [1]) == 1\nassert solution.minMalwareSpread([[1, 0, 1, 0], [0, 1, 1, 1], [0, 1, 1, 1], [1, 0, 0, 1]], [0, 1, 2, 3]) == 0\nassert solution.minMalwareSpread([[0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1]], [3, 6, 8]) == 3\nassert solution.minMalwareSpread([[1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1], [1, 1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1]], [0, 1, 2, 3, 4, 5, 6]) == 0\nassert solution.minMalwareSpread([[1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1]], [2, 5, 7]) == 2\nassert solution.minMalwareSpread([[1, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 1, 0, 1, 0], [1, 1, 1, 1, 0], [1, 1, 0, 1, 0]], [2, 3]) == 2\nassert solution.minMalwareSpread([[1, 0, 1, 0, 1], [1, 0, 0, 0, 0], [1, 1, 0, 1, 0], [0, 1, 1, 0, 0], [1, 1, 0, 0, 0]], [4]) == 4\nassert solution.minMalwareSpread([[1, 1], [1, 0]], [0, 1]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 1], [1, 0, 1, 0], [1, 1, 1, 1], [1, 0, 1, 1]], [0]) == 0\nassert solution.minMalwareSpread([[1, 1, 1, 0], [1, 0, 1, 1], [1, 0, 0, 1], [0, 1, 1, 0]], [0, 1, 3]) == 0\nassert solution.minMalwareSpread([[0, 1, 0], [1, 0, 1], [0, 1, 0]], [0, 2]) == 0\nassert solution.minMalwareSpread([[0, 0, 0], [0, 1, 0], [0, 1, 1]], [0, 1, 2]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1]], [4, 7, 8]) == 4\nassert solution.minMalwareSpread([[0, 1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0]], [1, 2, 4, 5, 6]) == 1\nassert solution.minMalwareSpread([[0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 0]], [0, 2, 3, 4, 7, 8]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1], [1, 1, 0, 1, 1, 0], [1, 1, 1, 1, 1, 0]], [0, 1, 2, 3, 5]) == 2\nassert solution.minMalwareSpread([[1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1]], [8]) == 8\nassert solution.minMalwareSpread([[0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1]], [2, 6]) == 2\nassert solution.minMalwareSpread([[0, 0, 0, 1, 0], [0, 1, 1, 0, 1], [0, 1, 0, 1, 0], [1, 0, 1, 1, 0], [0, 0, 0, 0, 0]], [0, 1]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1], [1, 0, 1, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1]], [0, 1, 2, 3, 4]) == 0\nassert solution.minMalwareSpread([[1, 1, 0, 1], [0, 1, 0, 1], [1, 0, 0, 1], [1, 0, 1, 0]], [0, 1, 2, 3]) == 0\nassert solution.minMalwareSpread([[0, 1], [1, 0]], [0]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 1]], [0, 1, 2, 4, 5]) == 0\nassert solution.minMalwareSpread([[0, 0, 1], [0, 0, 1], [1, 1, 1]], [0, 1, 2]) == 0\nassert solution.minMalwareSpread([[1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 1], [1, 1, 0, 0, 0], [0, 1, 1, 1, 1]], [0, 1, 2, 3, 4]) == 3\nassert solution.minMalwareSpread([[1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1]], [1, 2, 3, 5, 6, 7]) == 1\nassert solution.minMalwareSpread([[0, 0, 1], [0, 1, 0], [0, 1, 1]], [1, 2]) == 2\nassert solution.minMalwareSpread([[0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0]], [0, 4]) == 0\nassert solution.minMalwareSpread([[1, 1, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0]], [0, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0]], [0, 2, 3, 4, 7, 8, 9]) == 0\nassert solution.minMalwareSpread([[0, 1, 1, 1, 1], [0, 0, 1, 0, 1], [1, 1, 0, 0, 0], [1, 0, 1, 1, 1], [1, 0, 0, 0, 0]], [0, 1, 2, 3, 4]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 0, 1], [1, 0, 1, 1, 1], [1, 0, 1, 1, 0], [1, 0, 1, 1, 0], [1, 0, 0, 1, 0]], [0, 1, 4]) == 0\nassert solution.minMalwareSpread([[0, 0, 0, 0, 0], [1, 0, 1, 0, 0], [0, 1, 0, 1, 1], [0, 0, 1, 1, 0], [0, 1, 1, 1, 1]], [0, 1, 2, 4]) == 0\nassert solution.minMalwareSpread([[0, 0, 0, 1], [1, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]], [0, 2, 3]) == 2\nassert solution.minMalwareSpread([[0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1]], [0, 1, 3, 4, 5, 6, 7, 8]) == 0\nassert solution.minMalwareSpread([[0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1]], [2, 3, 4, 5, 6]) == 2\nassert solution.minMalwareSpread([[1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0]], [3, 4, 5, 7]) == 3\nassert solution.minMalwareSpread([[0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1, 0]], [3, 5, 6, 7]) == 3\nassert solution.minMalwareSpread([[1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1]], [0, 1, 2, 3, 4, 6]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0]], [0]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1]], [1, 2, 4, 5, 7, 8, 9]) == 1\nassert solution.minMalwareSpread([[0, 1, 0, 1, 1], [1, 1, 1, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0, 0, 1], [0, 1, 1, 0, 0]], [0, 1, 2, 3, 4]) == 0\nassert solution.minMalwareSpread([[0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 1]], [3, 5]) == 3\nassert solution.minMalwareSpread([[0, 1, 1, 1, 0], [0, 0, 1, 1, 0], [1, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 1, 1, 0, 1]], [2]) == 2\nassert solution.minMalwareSpread([[0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0]], [3, 5, 7, 8, 9]) == 3\nassert solution.minMalwareSpread([[0, 0], [1, 1]], [1]) == 1\nassert solution.minMalwareSpread([[0, 0, 0], [1, 0, 1], [0, 0, 0]], [0, 2]) == 2\nassert solution.minMalwareSpread([[1, 1, 1, 0], [0, 1, 1, 1], [1, 0, 0, 0], [0, 1, 1, 1]], [1, 2, 3]) == 1\nassert solution.minMalwareSpread([[1, 1, 0, 1, 0, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0]], [1, 2, 3, 4, 5, 7, 8, 9]) == 1\nassert solution.minMalwareSpread([[1, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 1], [1, 1, 1, 0]], [0, 1, 2, 3]) == 0\nassert solution.minMalwareSpread([[1, 0, 1], [0, 1, 0], [0, 1, 1]], [0, 1, 2]) == 1\nassert solution.minMalwareSpread([[1, 0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0]], [0, 1, 2, 3, 4, 5, 6]) == 0\nassert solution.minMalwareSpread([[1, 1, 1, 1, 1, 1, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 0]], [0, 3, 4, 5, 6]) == 0\nassert solution.minMalwareSpread([[1, 0, 1, 0], [0, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0]], [0, 1, 3]) == 0\nassert solution.minMalwareSpread([[0, 0], [0, 1]], [0, 1]) == 0\nassert solution.minMalwareSpread([[1, 0, 1, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 0]], [6, 8]) == 6\nassert solution.minMalwareSpread([[1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1]], [0, 1, 2, 3, 4, 6, 7, 8, 9]) == 0\nassert solution.minMalwareSpread([[1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 0]], [0, 3]) == 0\nassert solution.minMalwareSpread([[1, 1, 0, 0, 1], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [1, 1, 0, 0, 0], [0, 0, 1, 0, 1]], [3]) == 3\nassert solution.minMalwareSpread([[1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1], [0, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 0]], [4]) == 4\nassert solution.minMalwareSpread([[1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0]], [1, 7, 9]) == 1\nassert solution.minMalwareSpread([[1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 0, 1]], [0, 1, 2, 3, 4, 5]) == 0\nassert solution.minMalwareSpread([[1, 1], [1, 0]], [1]) == 1\nassert solution.minMalwareSpread([[0, 0, 0], [0, 1, 1], [0, 1, 1]], [1, 2]) == 1\nassert solution.minMalwareSpread([[1, 0, 0], [0, 1, 1], [1, 1, 1]], [1, 2]) == 1\nassert solution.minMalwareSpread([[1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0]], [0, 1, 2, 3, 4, 5, 6]) == 0\nassert solution.minMalwareSpread([[0, 0, 0, 0, 0], [0, 0, 1, 0, 1], [1, 0, 1, 1, 0], [1, 1, 0, 0, 1], [0, 1, 0, 1, 0]], [0, 1, 3, 4]) == 0\nassert solution.minMalwareSpread([[1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [0, 2, 3, 4, 5, 6]) == 0\nassert solution.minMalwareSpread([[1, 1, 1, 0, 1], [0, 1, 0, 1, 1], [0, 0, 1, 1, 1], [1, 0, 1, 0, 1], [0, 1, 1, 1, 0]], [0, 1, 2]) == 0\nassert solution.minMalwareSpread([[0, 1, 0, 0], [0, 1, 0, 1], [1, 0, 0, 0], [0, 1, 1, 1]], [1, 2, 3]) == 2\nassert solution.minMalwareSpread([[1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1]], [0, 2, 7]) == 0\nassert solution.minMalwareSpread([[0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 1, 0, 1, 0]], [0, 1, 3, 4]) == 1\nassert solution.minMalwareSpread([[1, 1, 1], [1, 0, 0], [1, 1, 1]], [0, 1, 2]) == 0\nassert solution.minMalwareSpread([[1, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1]], [0, 1, 2, 3, 5, 6, 8, 9]) == 0\nassert solution.minMalwareSpread([[0, 0, 1], [1, 0, 1], [1, 0, 0]], [0]) == 0\nassert solution.minMalwareSpread([[1, 0, 0, 1], [1, 1, 0, 1], [1, 1, 0, 1], [1, 1, 0, 1]], [1]) == 1\nassert solution.minMalwareSpread([[0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0]], [0, 1, 2, 3, 4, 5]) == 0\nassert solution.minMalwareSpread([[0, 0, 0, 0, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0]], [1, 3, 5, 6]) == 1\nassert solution.minMalwareSpread([[1, 1, 1, 1], [1, 0, 1, 0], [1, 1, 0, 1], [0, 0, 0, 0]], [0, 1, 2, 3]) == 0\nassert solution.minMalwareSpread([[0, 0, 0, 0, 0], [0, 0, 0, 1, 1], [1, 1, 1, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 1, 0]], [0, 1, 4]) == 0\nassert solution.minMalwareSpread([[0, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1], [1, 0, 1, 1, 1, 0]], [4]) == 4\nassert solution.minMalwareSpread([[1, 1, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1, 1]], [0, 1, 2, 3, 4, 5, 6]) == 0\nassert solution.minMalwareSpread([[1, 1, 0, 1, 0], [0, 0, 0, 1, 1], [1, 1, 0, 0, 0], [0, 0, 0, 1, 1], [0, 0, 1, 0, 0]], [0, 1, 3]) == 0\nassert solution.minMalwareSpread([[1, 0, 1, 1], [1, 0, 1, 0], [1, 1, 0, 0], [0, 0, 0, 1]], [0, 2, 3]) == 0",
  "inefficient_solution": "class Solution:\n    def minMalwareSpread(self, graph, initial):\n        n = len(graph)\n        graph_copy = [[graph[i][j] for j in range(n)] for i in range(n)]\n        initial_copy = [i for i in initial]\n        \n        for _ in range(10000):\n            for i in range(n):\n                for j in range(n):\n                    if graph_copy[i][j] == 1:\n                        graph_copy[i][j] = 0\n                        graph_copy[j][i] = 0\n                        for k in range(n):\n                            if graph_copy[k][i] == 1 or graph_copy[k][j] == 1:\n                                graph_copy[i][k] = 1\n                                graph_copy[k][i] = 1\n                                graph_copy[j][k] = 1\n                                graph_copy[k][j] = 1\n                        graph_copy[i][j] = 1\n                        graph_copy[j][i] = 1\n                        \n        infected = [0] * n\n        for i in initial_copy:\n            infected[i] = 1\n            for j in range(n):\n                if graph_copy[i][j] == 1:\n                    infected[j] = 1\n        \n        mi = max(infected)\n        res = initial_copy[0]\n        for i in range(len(initial_copy)):\n            if infected[initial_copy[i]] == mi:\n                continue\n            if mi > infected[initial_copy[i]]:\n                mi = infected[initial_copy[i]]\n                res = initial_copy[i]\n            elif mi == infected[initial_copy[i]]:\n                if initial_copy[i] < res:\n                    res = initial_copy[i]\n        return res",
  "is_python": true
}