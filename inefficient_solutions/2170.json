{
  "problem_idx": 2170,
  "task_name": "Minimum Operations to Make the Array Alternating",
  "markdown_description": "\nYou are given a **0-indexed** array `nums` consisting of `n` positive integers.\n\n\nThe array `nums` is called **alternating** if:\n\n\n* `nums[i - 2] == nums[i]`, where `2 <= i <= n - 1`.\n* `nums[i - 1] != nums[i]`, where `1 <= i <= n - 1`.\n\n\nIn one **operation**, you can choose an index `i` and **change** `nums[i]` into **any** positive integer.\n\n\nReturn *the **minimum number of operations** required to make the array alternating*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,3,2,4,3]\n**Output:** 3\n**Explanation:**\nOne way to make the array alternating is by converting it to [3,1,3,**1**,**3**,**1**].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,2,2,2]\n**Output:** 2\n**Explanation:**\nOne way to make the array alternating is by converting it to [1,2,**1**,2,**1**].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [**2**,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        def get(i):\n            c = Counter(nums[i::2]).most_common(2)\n            if not c:\n                return [(0, 0), (0, 0)]\n            if len(c) == 1:\n                return [c[0], (0, 0)]\n            return c\n\n        n = len(nums)\n        return min(n - (n1 + n2) for a, n1 in get(0) for b, n2 in get(1) if a != b)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumOperations(self, nums):\n        def get(i):\n            c = Counter(nums[i::2]).most_common(2)\n            if not c:\n                return [(0, 0), (0, 0)]\n            if len(c) == 1:\n                return [c[0], (0, 0)]\n            return c\n\n        n = len(nums)\n        return min(n - (n1 + n2) for a, n1 in get(0) for b, n2 in get(1) if a != b)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumOperations(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumOperations(nums) == expected_result\n        print(f\"assert solution.minimumOperations({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumOperations({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumOperations([19, 61, 82]) == 1\nassert solution.minimumOperations([84, 10, 52, 5, 21, 98, 59, 73]) == 6\nassert solution.minimumOperations([44, 4, 41, 73]) == 2\nassert solution.minimumOperations([63, 76, 31]) == 1\nassert solution.minimumOperations([90, 98, 66, 69, 41, 100, 72]) == 5\nassert solution.minimumOperations([50, 76, 93]) == 1\nassert solution.minimumOperations([71, 94, 100, 84, 46, 51]) == 4\nassert solution.minimumOperations([23, 12, 94, 49, 13, 55, 52, 87, 79]) == 7\nassert solution.minimumOperations([14, 18, 90, 59, 73, 50, 21, 24, 54, 85]) == 8\nassert solution.minimumOperations([46, 6, 52, 58, 53, 81]) == 4\nassert solution.minimumOperations([55, 46, 11]) == 1\nassert solution.minimumOperations([80, 27, 26, 57, 7, 14, 67, 20, 87, 77]) == 8\nassert solution.minimumOperations([13, 45, 51]) == 1\nassert solution.minimumOperations([95, 49, 81, 39, 42, 34, 23, 21, 65, 58]) == 8\nassert solution.minimumOperations([30, 62, 94, 13, 10, 68, 63, 96, 23]) == 7\nassert solution.minimumOperations([48, 51, 64, 40, 86, 62, 22]) == 5\nassert solution.minimumOperations([68, 18, 11, 39, 61, 34]) == 4\nassert solution.minimumOperations([79, 29, 9, 67, 72, 85]) == 4\nassert solution.minimumOperations([91, 63]) == 0\nassert solution.minimumOperations([43, 76, 100, 40, 87]) == 3\nassert solution.minimumOperations([51, 70, 58, 57, 48]) == 3\nassert solution.minimumOperations([78, 11, 49, 75]) == 2\nassert solution.minimumOperations([97, 2]) == 0\nassert solution.minimumOperations([6, 20, 88]) == 1\nassert solution.minimumOperations([85, 64]) == 0\nassert solution.minimumOperations([92, 88, 26, 87, 40]) == 3\nassert solution.minimumOperations([1, 62, 83, 97, 44, 39]) == 4\nassert solution.minimumOperations([27, 39, 35, 10, 85, 79, 61, 49]) == 6\nassert solution.minimumOperations([54, 8, 93, 98, 47]) == 3\nassert solution.minimumOperations([52, 75, 11, 57, 10, 93, 42, 43, 53, 21]) == 8\nassert solution.minimumOperations([13, 29, 8, 91, 22, 6, 67, 58, 43]) == 7\nassert solution.minimumOperations([84, 8, 13, 54, 43, 96, 46, 75, 9, 74]) == 8\nassert solution.minimumOperations([16, 41, 35]) == 1\nassert solution.minimumOperations([76, 15]) == 0\nassert solution.minimumOperations([65, 55, 31, 50, 96, 24, 21, 14, 58, 40]) == 8\nassert solution.minimumOperations([50, 45, 94, 38, 97, 99, 23, 39, 75, 20]) == 8\nassert solution.minimumOperations([34, 22, 93, 37, 62, 51]) == 4\nassert solution.minimumOperations([13, 52, 75, 17, 85, 54, 71, 60]) == 6\nassert solution.minimumOperations([44, 58, 8, 46, 10, 41, 70, 78, 98]) == 7\nassert solution.minimumOperations([77, 18, 36]) == 1\nassert solution.minimumOperations([60, 44, 48]) == 1\nassert solution.minimumOperations([18, 98, 47, 11, 60, 31]) == 4\nassert solution.minimumOperations([9, 39, 26, 15]) == 2\nassert solution.minimumOperations([32, 25, 82, 39, 68, 58, 21, 63]) == 6\nassert solution.minimumOperations([73, 4]) == 0\nassert solution.minimumOperations([42, 95, 21, 78, 68, 57, 11, 43]) == 6\nassert solution.minimumOperations([79, 86, 71, 73, 34, 72, 85, 22]) == 6\nassert solution.minimumOperations([23, 33, 63, 90, 36, 22, 16, 1, 53]) == 7\nassert solution.minimumOperations([40, 97, 15, 14, 32, 87, 37, 7, 77, 45]) == 8\nassert solution.minimumOperations([22, 69, 38, 81, 84]) == 3\nassert solution.minimumOperations([63, 8, 10, 19]) == 2\nassert solution.minimumOperations([18, 33]) == 0\nassert solution.minimumOperations([34, 79, 84, 58, 29, 66, 40]) == 5\nassert solution.minimumOperations([96, 46]) == 0\nassert solution.minimumOperations([30, 80, 26, 51, 8, 66, 69, 53]) == 6\nassert solution.minimumOperations([72, 70, 47, 100]) == 2\nassert solution.minimumOperations([88, 98, 91]) == 1\nassert solution.minimumOperations([33, 84, 3, 21, 80, 48, 52, 15, 29, 62]) == 8\nassert solution.minimumOperations([10, 2, 6, 79, 95, 57, 34, 88]) == 6\nassert solution.minimumOperations([95, 30, 100, 91, 34, 79, 63, 1, 50]) == 7\nassert solution.minimumOperations([33, 13, 76, 41, 91, 6]) == 4\nassert solution.minimumOperations([83, 35, 18, 72, 97, 99, 64, 71, 34, 70]) == 8\nassert solution.minimumOperations([65, 29]) == 0\nassert solution.minimumOperations([66, 23]) == 0\nassert solution.minimumOperations([71, 80, 78, 40, 49, 90]) == 4\nassert solution.minimumOperations([53, 52, 76, 8, 39, 6, 74, 99]) == 6\nassert solution.minimumOperations([22, 4]) == 0\nassert solution.minimumOperations([88, 83]) == 0\nassert solution.minimumOperations([80, 60, 71, 26, 63, 28, 32, 8, 30, 37]) == 8\nassert solution.minimumOperations([61, 36, 50, 38, 90]) == 3\nassert solution.minimumOperations([83, 58]) == 0\nassert solution.minimumOperations([8, 13]) == 0\nassert solution.minimumOperations([8, 7]) == 0\nassert solution.minimumOperations([61, 25, 44, 15, 43, 87]) == 4\nassert solution.minimumOperations([73, 36, 4, 41, 46, 48]) == 4\nassert solution.minimumOperations([83, 77, 71, 41, 5, 63, 74]) == 5\nassert solution.minimumOperations([58, 82, 48, 99, 29, 59, 44, 1, 11]) == 7\nassert solution.minimumOperations([3, 32]) == 0\nassert solution.minimumOperations([24, 51, 15, 84, 49, 100, 73, 92, 45]) == 7\nassert solution.minimumOperations([43, 86, 26, 7, 70, 29, 68, 27, 96, 73]) == 8\nassert solution.minimumOperations([57, 49, 68, 47, 62]) == 3\nassert solution.minimumOperations([39, 31, 11]) == 1\nassert solution.minimumOperations([38, 22, 73, 36, 46]) == 3\nassert solution.minimumOperations([14, 19, 44, 65, 1, 53, 63, 79, 58]) == 7\nassert solution.minimumOperations([83, 99, 87]) == 1\nassert solution.minimumOperations([30, 77, 83, 14, 67, 87]) == 4\nassert solution.minimumOperations([41, 45, 90, 82, 29, 21]) == 4\nassert solution.minimumOperations([79, 75, 54, 50, 27, 94, 68, 59, 7, 19]) == 8\nassert solution.minimumOperations([94, 28, 31, 67, 15, 57, 32, 38]) == 6\nassert solution.minimumOperations([26, 17, 71, 56, 89]) == 3\nassert solution.minimumOperations([35, 19, 41, 49]) == 2\nassert solution.minimumOperations([87, 64, 77, 70, 13, 52, 80, 38]) == 6\nassert solution.minimumOperations([59, 16, 44, 64, 22, 28, 83, 75]) == 6\nassert solution.minimumOperations([41, 1, 14, 78, 33]) == 3\nassert solution.minimumOperations([68, 83, 40, 60, 3, 2, 51, 65]) == 6\nassert solution.minimumOperations([65, 75]) == 0\nassert solution.minimumOperations([65, 61, 99, 35]) == 2\nassert solution.minimumOperations([80, 26, 38, 11, 86, 79, 55]) == 5\nassert solution.minimumOperations([47, 44, 95, 93, 64, 82, 36]) == 5\nassert solution.minimumOperations([12, 63, 22, 19, 25, 50, 74, 61, 68]) == 7",
  "inefficient_solution": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        def get(i):\n            res = []\n            for j in range(len(nums)):\n                if j % 2 == i:\n                    res.append((nums[j], 1))\n            return res\n\n        n = len(nums)\n        ans = n\n        for a, x in get(0):\n            for b, y in get(1):\n                if a != b:\n                    temp = x + y\n                    for i in range(n):\n                        if i % 2 == 0:\n                            if a != nums[i]:\n                                temp += 1\n                        else:\n                            if b != nums[i]:\n                                temp += 1\n                    ans = min(ans, temp)\n        return ans",
  "is_python": true
}