{
  "problem_idx": 139,
  "task_name": "Word Break",
  "markdown_description": "\nGiven a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.\n\n\n**Note** that the same word in the dictionary may be reused multiple times in the segmentation.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n**Output:** true\n**Explanation:** Return true because \"leetcode\" can be segmented as \"leet code\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n**Output:** true\n**Explanation:** Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 300`\n* `1 <= wordDict.length <= 1000`\n* `1 <= wordDict[i].length <= 20`\n* `s` and `wordDict[i]` consist of only lowercase English letters.\n* All the strings of `wordDict` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        words = set(wordDict)\n        n = len(s)\n        f = [True] + [False] * n\n        for i in range(1, n + 1):\n            f[i] = any(f[j] and s[j:i] in words for j in range(i))\n        return f[n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        words = set(wordDict)\n        n = len(s)\n        f = [True] + [False] * n\n        for i in range(1, n + 1):\n            f[i] = any(f[j] and s[j:i] in words for j in range(i))\n        return f[n]\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random string\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n\n    # Generate random word dictionary\n    wordDict = random.choices(string.ascii_lowercase, k=random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.wordBreak(s, wordDict)\n\n    return s, wordDict, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, wordDict, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.wordBreak(s, wordDict) == expected_result\n        print(f\"assert solution.wordBreak('{s}', {wordDict}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.wordBreak('{s}', {wordDict}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.wordBreak('pcbp', ['z', 'b', 'i', 'e', 'u', 'r', 'k', 'z', 'q']) == False\nassert solution.wordBreak('r', ['v', 'n', 'u', 'f', 'r', 'u']) == True\nassert solution.wordBreak('aajhfzwln', ['l', 'b', 'z']) == False\nassert solution.wordBreak('kfuxh', ['p', 'a', 'k', 'o', 'b', 'v', 'e', 'h', 'e', 'z']) == False\nassert solution.wordBreak('ooq', ['d', 'm', 'a', 't', 'r', 'j', 'q']) == False\nassert solution.wordBreak('yqzc', ['x', 'i', 'a', 'x']) == False\nassert solution.wordBreak('ywwhcpy', ['n', 'p', 'm', 'g', 'd', 't', 'w']) == False\nassert solution.wordBreak('cxvprjbpy', ['r', 'w', 'y', 'l', 'i', 'f', 'v', 'a', 'r', 'a']) == False\nassert solution.wordBreak('n', ['m', 'p', 't', 'z', 'g', 'j', 'e', 'o', 'e']) == False\nassert solution.wordBreak('fqytcdfrkw', ['y']) == False\nassert solution.wordBreak('xioowpwat', ['f', 't']) == False\nassert solution.wordBreak('mlrlyzx', ['j', 'y', 'l', 'k', 'b', 'q', 'v', 'd']) == False\nassert solution.wordBreak('bbcals', ['i', 'd', 'w', 'v']) == False\nassert solution.wordBreak('pfxaxjg', ['a', 'i', 'g', 'k', 'k', 'g', 'n', 'r']) == False\nassert solution.wordBreak('lwufwt', ['t', 'k', 's']) == False\nassert solution.wordBreak('enznry', ['w', 'd', 'b', 'z', 'a', 'q', 'b']) == False\nassert solution.wordBreak('sihmshbjp', ['j', 'm', 'w', 'a', 'l', 'r']) == False\nassert solution.wordBreak('shdjg', ['s', 'p']) == False\nassert solution.wordBreak('k', ['y', 'i']) == False\nassert solution.wordBreak('ajgqsx', ['p', 's']) == False\nassert solution.wordBreak('dqzprakjg', ['o', 'y', 'h', 'c', 'o', 'n', 'j', 'i', 'r']) == False\nassert solution.wordBreak('lizvgdvsbt', ['g', 'l', 's', 'd', 'w']) == False\nassert solution.wordBreak('lwcodp', ['r', 'c', 'x', 'v']) == False\nassert solution.wordBreak('buxsk', ['x', 'p', 'q', 'w', 's', 'x', 'w', 'x']) == False\nassert solution.wordBreak('p', ['x', 'c', 'p', 'l', 'i', 'j', 'h', 'a', 'y']) == True\nassert solution.wordBreak('c', ['u', 'm', 'i', 'j', 's', 'u', 'd', 'r', 'q', 'd']) == False\nassert solution.wordBreak('nhoflde', ['b', 'v', 'r', 'l', 'y']) == False\nassert solution.wordBreak('mvzhetgnac', ['o', 'u', 'm', 'l', 'w', 'a']) == False\nassert solution.wordBreak('mopjd', ['a', 'e', 'k']) == False\nassert solution.wordBreak('vtivtobjnp', ['t', 'e']) == False\nassert solution.wordBreak('aomjue', ['d', 'o', 'u', 'p', 'k', 'i', 'l', 'u']) == False\nassert solution.wordBreak('ndxsr', ['j', 's']) == False\nassert solution.wordBreak('dsk', ['b', 't', 'e', 'd', 'i', 'm', 'd', 'p']) == False\nassert solution.wordBreak('rtavwmxluk', ['d', 'e', 'n', 'k', 'p', 'b', 'j']) == False\nassert solution.wordBreak('rbgbvmt', ['z', 'l', 'q', 'l', 'z', 's']) == False\nassert solution.wordBreak('kdzi', ['x', 'c', 'r', 's', 'u', 'x', 'm', 'p', 'b', 'r']) == False\nassert solution.wordBreak('fsdf', ['s', 'u', 'q', 'x', 'q', 'm', 'w', 'e']) == False\nassert solution.wordBreak('igvmca', ['s', 'i', 'c', 'n', 'u']) == False\nassert solution.wordBreak('bch', ['i']) == False\nassert solution.wordBreak('xnbh', ['t', 'm', 'u', 'd', 'e', 'r', 'm', 'q']) == False\nassert solution.wordBreak('iqtdskbsy', ['c', 'a']) == False\nassert solution.wordBreak('wkznaup', ['z', 'd', 'u']) == False\nassert solution.wordBreak('h', ['b']) == False\nassert solution.wordBreak('twatzu', ['m', 'v', 'r', 'e', 'f', 's', 'd', 'z', 'c', 'd']) == False\nassert solution.wordBreak('bvmsr', ['t']) == False\nassert solution.wordBreak('idwreidk', ['r']) == False\nassert solution.wordBreak('gukmcc', ['h', 'd', 'w', 'j', 'q', 'u', 'j']) == False\nassert solution.wordBreak('kb', ['y']) == False\nassert solution.wordBreak('wpjnbtu', ['z', 'b', 'h', 'm', 'a', 'a']) == False\nassert solution.wordBreak('lncsmpn', ['v', 'm', 'd', 'b', 's']) == False\nassert solution.wordBreak('jg', ['g', 'a', 'f', 's', 'f', 'g']) == False\nassert solution.wordBreak('jvedjgxsim', ['q', 'x', 'p', 'p', 'f', 'o', 'x', 'k', 'j', 'f']) == False\nassert solution.wordBreak('bq', ['o', 's', 'r', 'n', 'h', 'v', 'r']) == False\nassert solution.wordBreak('fraqmacg', ['l', 'h', 'q', 'z', 'e', 'c', 'f', 'd', 'i', 'p']) == False\nassert solution.wordBreak('nbxhoti', ['q', 't', 'y']) == False\nassert solution.wordBreak('e', ['p', 'r', 't', 'k']) == False\nassert solution.wordBreak('ll', ['q', 'v', 's']) == False\nassert solution.wordBreak('zckk', ['n', 'w', 'y', 'l', 'r']) == False\nassert solution.wordBreak('tqrqjxs', ['r', 'q', 'e', 'r', 'e']) == False\nassert solution.wordBreak('ejdlks', ['p', 'r', 't', 'y', 'p', 'h']) == False\nassert solution.wordBreak('fpniuk', ['m', 'y', 'j', 't', 'q', 'd']) == False\nassert solution.wordBreak('whkj', ['v', 'v', 'z', 'a', 'l', 'h']) == False\nassert solution.wordBreak('jecdud', ['g', 't', 'l', 'e', 'x', 'w']) == False\nassert solution.wordBreak('maq', ['r']) == False\nassert solution.wordBreak('cbvfiur', ['e', 'h', 'n', 'v', 'b']) == False\nassert solution.wordBreak('cdwrotyxs', ['v', 'y', 'f', 'e', 'b', 'l', 'o', 't', 'w', 'i']) == False\nassert solution.wordBreak('ktybevkwh', ['k']) == False\nassert solution.wordBreak('boepjmedhc', ['v', 'g', 'y', 'h', 'k', 'y', 'k']) == False\nassert solution.wordBreak('iqq', ['q', 'u', 'i', 'r', 'a']) == True\nassert solution.wordBreak('ndtsxhh', ['i', 'l', 'b', 'n', 'z', 'l', 'y', 'd']) == False\nassert solution.wordBreak('sfsedhaij', ['w', 'c', 'z', 'y', 'j', 'x']) == False\nassert solution.wordBreak('wgrmd', ['i', 'e', 'g']) == False\nassert solution.wordBreak('z', ['z', 'l', 't', 't', 'q', 'v', 'r']) == True\nassert solution.wordBreak('cmtyt', ['x', 'x', 'b', 'y', 'd', 'u', 't', 'f']) == False\nassert solution.wordBreak('s', ['s', 'n', 's', 'y']) == True\nassert solution.wordBreak('ixh', ['c', 'h', 'm', 'z', 'v', 'b', 'a', 'c']) == False\nassert solution.wordBreak('mh', ['b', 'x', 'b', 's', 'j', 'v', 'h', 'g']) == False\nassert solution.wordBreak('k', ['u', 'm', 'd', 'c', 'g', 'c', 'x']) == False\nassert solution.wordBreak('rillreq', ['c', 'y', 'c', 'k']) == False\nassert solution.wordBreak('rha', ['g', 'o']) == False\nassert solution.wordBreak('zhfgksimg', ['i', 'k', 'n', 'b', 'h', 'i', 'y', 'v', 't', 'p']) == False\nassert solution.wordBreak('z', ['i', 't', 't', 'b']) == False\nassert solution.wordBreak('asem', ['m', 'd', 'u', 'u']) == False\nassert solution.wordBreak('jhqnfpyz', ['y', 'v', 'p', 'y', 'j', 'm', 'v', 'b', 'h', 'g']) == False\nassert solution.wordBreak('kovsmh', ['l', 'u', 'r', 'h', 'f', 'p', 'a', 'f']) == False\nassert solution.wordBreak('msbcwmnte', ['t', 'e', 'o', 'r', 'v', 'd', 'g', 'h', 'q', 's']) == False\nassert solution.wordBreak('dtxfkw', ['r', 'p', 'u', 'q', 'c', 'a', 'v', 'q', 'x']) == False\nassert solution.wordBreak('nlyqyke', ['s', 'x', 'e', 'b', 'y', 's', 'k', 'o', 'e']) == False\nassert solution.wordBreak('tmmrpt', ['j', 'x', 'd', 'h', 'm', 'y', 'z', 's']) == False\nassert solution.wordBreak('ovbcpkoyd', ['l', 'q', 'r', 'p', 'q', 'h']) == False\nassert solution.wordBreak('xlxrqn', ['j', 'b', 'e', 'h', 'u', 'b', 'z']) == False\nassert solution.wordBreak('d', ['r', 'x', 'r', 'o', 'j']) == False\nassert solution.wordBreak('yfgm', ['v', 'v', 'r', 's']) == False\nassert solution.wordBreak('lfjn', ['b', 'j', 'e']) == False\nassert solution.wordBreak('cymgjmm', ['c', 'f']) == False\nassert solution.wordBreak('fcdav', ['g', 'k', 'h', 'q', 'a', 't']) == False\nassert solution.wordBreak('keaqie', ['f', 'r']) == False\nassert solution.wordBreak('bmfopejt', ['f', 'o', 'k', 'u', 'x', 'n', 'f']) == False\nassert solution.wordBreak('sjdbpnc', ['m', 'g', 'd', 'y', 'k', 't', 'c', 'w', 'p', 'f']) == False\nassert solution.wordBreak('zob', ['r']) == False",
  "inefficient_solution": "class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\n        words = set(wordDict)\n        n = len(s)\n        f = [True] * (n + 1) * (n + 1)\n        res = [False] * (n + 1) * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                for k in range(i, n + 1):\n                    if f[j - 1] and s[j - 1:k] in words:\n                        res[i * (n + 1) + k] = True\n                f[j * (n + 1) + i] = True\n        return res[-1]",
  "is_python": true
}