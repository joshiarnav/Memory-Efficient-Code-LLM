{
  "problem_idx": 1318,
  "task_name": "Minimum Flips to Make a OR b Equal to c",
  "markdown_description": "\nGiven 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make (\u00a0`a` OR `b` == `c`\u00a0). (bitwise OR operation).  \n\nFlip operation\u00a0consists of change\u00a0**any**\u00a0single bit 1 to 0 or change the bit 0 to 1\u00a0in their binary representation.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1318.Minimum%20Flips%20to%20Make%20a%20OR%20b%20Equal%20to%20c/images/sample_3_1676.png)\n\n\n\n```\n\n**Input:** a = 2, b = 6, c = 5\n**Output:** 3\n**Explanation:** After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** a = 4, b = 2, c = 7\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** a = 1, b = 2, c = 3\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= a <= 10^9`\n* `1 <= b\u00a0<= 10^9`\n* `1 <= c\u00a0<= 10^9`\n\n\n",
  "canonical_solution": "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(30):\n            x, y, z = a >> i & 1, b >> i & 1, c >> i & 1\n            if x | y != z:\n                ans += 2 if x == 1 and y == 1 else 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        ans = 0\n        for i in range(30):\n            x, y, z = a >> i & 1, b >> i & 1, c >> i & 1\n            if x | y != z:\n                ans += 2 if x == 1 and y == 1 else 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random positive numbers a, b, and c\n    a = random.randint(1, 100)\n    b = random.randint(1, 100)\n    c = random.randint(1, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minFlips(a, b, c)\n\n    return a, b, c, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        a, b, c, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minFlips(a, b, c) == expected_result\n        print(f\"assert solution.minFlips({a}, {b}, {c}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minFlips({a}, {b}, {c}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minFlips(94, 45, 98) == 6\nassert solution.minFlips(11, 72, 15) == 2\nassert solution.minFlips(84, 80, 58) == 6\nassert solution.minFlips(48, 13, 61) == 0\nassert solution.minFlips(46, 52, 8) == 6\nassert solution.minFlips(78, 81, 42) == 6\nassert solution.minFlips(39, 94, 2) == 7\nassert solution.minFlips(74, 67, 65) == 3\nassert solution.minFlips(75, 16, 35) == 4\nassert solution.minFlips(95, 10, 22) == 4\nassert solution.minFlips(83, 95, 31) == 2\nassert solution.minFlips(71, 49, 85) == 2\nassert solution.minFlips(64, 29, 20) == 3\nassert solution.minFlips(9, 45, 2) == 7\nassert solution.minFlips(1, 4, 73) == 3\nassert solution.minFlips(27, 63, 6) == 7\nassert solution.minFlips(8, 56, 45) == 3\nassert solution.minFlips(57, 76, 33) == 5\nassert solution.minFlips(51, 36, 34) == 3\nassert solution.minFlips(93, 26, 73) == 4\nassert solution.minFlips(55, 94, 26) == 5\nassert solution.minFlips(68, 18, 53) == 4\nassert solution.minFlips(6, 91, 10) == 4\nassert solution.minFlips(79, 72, 47) == 3\nassert solution.minFlips(44, 10, 31) == 3\nassert solution.minFlips(85, 26, 87) == 1\nassert solution.minFlips(27, 19, 100) == 10\nassert solution.minFlips(83, 32, 43) == 3\nassert solution.minFlips(14, 27, 91) == 2\nassert solution.minFlips(80, 7, 22) == 2\nassert solution.minFlips(67, 88, 8) == 5\nassert solution.minFlips(34, 61, 76) == 6\nassert solution.minFlips(21, 48, 44) == 4\nassert solution.minFlips(51, 94, 95) == 1\nassert solution.minFlips(31, 78, 55) == 4\nassert solution.minFlips(41, 32, 68) == 6\nassert solution.minFlips(34, 46, 90) == 5\nassert solution.minFlips(11, 18, 46) == 4\nassert solution.minFlips(88, 31, 42) == 6\nassert solution.minFlips(48, 90, 50) == 2\nassert solution.minFlips(30, 29, 53) == 4\nassert solution.minFlips(83, 80, 52) == 6\nassert solution.minFlips(90, 92, 77) == 4\nassert solution.minFlips(42, 95, 69) == 6\nassert solution.minFlips(27, 36, 36) == 4\nassert solution.minFlips(41, 41, 17) == 5\nassert solution.minFlips(41, 34, 41) == 1\nassert solution.minFlips(82, 39, 6) == 4\nassert solution.minFlips(25, 82, 75) == 2\nassert solution.minFlips(13, 83, 96) == 7\nassert solution.minFlips(68, 37, 57) == 5\nassert solution.minFlips(46, 46, 57) == 6\nassert solution.minFlips(59, 18, 5) == 7\nassert solution.minFlips(55, 40, 43) == 2\nassert solution.minFlips(24, 44, 45) == 2\nassert solution.minFlips(62, 64, 42) == 3\nassert solution.minFlips(64, 48, 70) == 4\nassert solution.minFlips(38, 51, 5) == 5\nassert solution.minFlips(40, 64, 61) == 4\nassert solution.minFlips(7, 41, 56) == 5\nassert solution.minFlips(47, 55, 14) == 5\nassert solution.minFlips(11, 83, 71) == 3\nassert solution.minFlips(25, 78, 40) == 6\nassert solution.minFlips(17, 95, 59) == 3\nassert solution.minFlips(90, 93, 18) == 6\nassert solution.minFlips(41, 62, 48) == 5\nassert solution.minFlips(11, 81, 50) == 5\nassert solution.minFlips(28, 96, 92) == 1\nassert solution.minFlips(33, 89, 58) == 4\nassert solution.minFlips(92, 27, 7) == 5\nassert solution.minFlips(92, 25, 42) == 7\nassert solution.minFlips(56, 86, 45) == 5\nassert solution.minFlips(76, 6, 39) == 4\nassert solution.minFlips(87, 19, 75) == 4\nassert solution.minFlips(2, 7, 68) == 4\nassert solution.minFlips(88, 97, 18) == 6\nassert solution.minFlips(75, 4, 88) == 4\nassert solution.minFlips(25, 96, 14) == 6\nassert solution.minFlips(68, 19, 72) == 5\nassert solution.minFlips(43, 99, 51) == 3\nassert solution.minFlips(81, 95, 93) == 1\nassert solution.minFlips(9, 54, 72) == 6\nassert solution.minFlips(22, 23, 61) == 4\nassert solution.minFlips(12, 38, 16) == 6\nassert solution.minFlips(38, 40, 74) == 4\nassert solution.minFlips(53, 20, 41) == 5\nassert solution.minFlips(93, 17, 14) == 6\nassert solution.minFlips(100, 41, 91) == 5\nassert solution.minFlips(84, 26, 44) == 5\nassert solution.minFlips(39, 58, 94) == 4\nassert solution.minFlips(90, 77, 71) == 3\nassert solution.minFlips(68, 40, 77) == 2\nassert solution.minFlips(80, 100, 89) == 4\nassert solution.minFlips(65, 98, 40) == 5\nassert solution.minFlips(27, 75, 70) == 6\nassert solution.minFlips(100, 58, 49) == 5\nassert solution.minFlips(27, 74, 98) == 5\nassert solution.minFlips(60, 3, 35) == 3\nassert solution.minFlips(85, 25, 73) == 3\nassert solution.minFlips(34, 92, 32) == 5",
  "inefficient_solution": "class Solution:\n    def minFlips(self, a: int, b: int, c: int) -> int:\n        ans = 0\n        for _ in range(a.bit_length() + b.bit_length() + c.bit_length()):\n            x = a & 1\n            y = b & 1\n            z = c & 1\n            ans += 1\n            a >>= 1\n            b >>= 1\n            c >>= 1\n            if x | y == z:\n                ans -= 1\n                a = a << 1 | x\n                b = b << 1 | y\n                c = c << 1 | z\n        return ans",
  "is_python": true
}