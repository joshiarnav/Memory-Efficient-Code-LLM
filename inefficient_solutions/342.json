{
  "problem_idx": 342,
  "task_name": "Power of Four",
  "markdown_description": "\nGiven an integer `n`, return *`true` if it is a power of four. Otherwise, return `false`*.\n\n\nAn integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** n = 16\n**Output:** true\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** n = 5\n**Output:** false\n\n```\n**Example 3:**\n\n\n\n```\n**Input:** n = 1\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `-231 <= n <= 231 - 1`\n\n\n\u00a0\n\n\n**Follow up:** Could you solve it without loops/recursion?\n\n",
  "canonical_solution": "class Solution:\n    def isPowerOfFour(self, n: int) -> bool:\n        return n > 0 and (n & (n - 1)) == 0 and (n & 0xAAAAAAAA) == 0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isPowerOfFour(self, n: int) -> bool:\n        return n > 0 and (n & (n - 1)) == 0 and (n & 0xAAAAAAAA) == 0\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random number\n    n = random.randint(-2**31, 2**31 - 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isPowerOfFour(n)\n\n    return n, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isPowerOfFour(n) == expected_result\n        print(f\"assert solution.isPowerOfFour({n}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.isPowerOfFour({n}) == {expected_result}\"\n        )\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isPowerOfFour(-132175863) == False\nassert solution.isPowerOfFour(63926027) == False\nassert solution.isPowerOfFour(-1411563909) == False\nassert solution.isPowerOfFour(-112960369) == False\nassert solution.isPowerOfFour(1398787527) == False\nassert solution.isPowerOfFour(-2122873014) == False\nassert solution.isPowerOfFour(-971922531) == False\nassert solution.isPowerOfFour(499760520) == False\nassert solution.isPowerOfFour(1923532046) == False\nassert solution.isPowerOfFour(1353985302) == False\nassert solution.isPowerOfFour(344341344) == False\nassert solution.isPowerOfFour(988002889) == False\nassert solution.isPowerOfFour(-1834052540) == False\nassert solution.isPowerOfFour(-1341721426) == False\nassert solution.isPowerOfFour(-1897807457) == False\nassert solution.isPowerOfFour(1382286770) == False\nassert solution.isPowerOfFour(-289903186) == False\nassert solution.isPowerOfFour(-1909648519) == False\nassert solution.isPowerOfFour(1211653495) == False\nassert solution.isPowerOfFour(975806299) == False\nassert solution.isPowerOfFour(-1687617090) == False\nassert solution.isPowerOfFour(1455040039) == False\nassert solution.isPowerOfFour(-1527326019) == False\nassert solution.isPowerOfFour(-941091145) == False\nassert solution.isPowerOfFour(1726122379) == False\nassert solution.isPowerOfFour(-1454549046) == False\nassert solution.isPowerOfFour(-1492737717) == False\nassert solution.isPowerOfFour(681673362) == False\nassert solution.isPowerOfFour(-498028798) == False\nassert solution.isPowerOfFour(263604865) == False\nassert solution.isPowerOfFour(-1857531484) == False\nassert solution.isPowerOfFour(709452608) == False\nassert solution.isPowerOfFour(-1428296390) == False\nassert solution.isPowerOfFour(395219749) == False\nassert solution.isPowerOfFour(-1776516426) == False\nassert solution.isPowerOfFour(-514352355) == False\nassert solution.isPowerOfFour(2039545274) == False\nassert solution.isPowerOfFour(349232682) == False\nassert solution.isPowerOfFour(167597989) == False\nassert solution.isPowerOfFour(319856271) == False\nassert solution.isPowerOfFour(864874249) == False\nassert solution.isPowerOfFour(-578474853) == False\nassert solution.isPowerOfFour(-991048998) == False\nassert solution.isPowerOfFour(940794812) == False\nassert solution.isPowerOfFour(-1685335034) == False\nassert solution.isPowerOfFour(2143623148) == False\nassert solution.isPowerOfFour(66135099) == False\nassert solution.isPowerOfFour(2009648929) == False\nassert solution.isPowerOfFour(-1128171337) == False\nassert solution.isPowerOfFour(777732605) == False\nassert solution.isPowerOfFour(1426286026) == False\nassert solution.isPowerOfFour(1052197644) == False\nassert solution.isPowerOfFour(1679825748) == False\nassert solution.isPowerOfFour(-1866403904) == False\nassert solution.isPowerOfFour(1222488442) == False\nassert solution.isPowerOfFour(1971704535) == False\nassert solution.isPowerOfFour(303366467) == False\nassert solution.isPowerOfFour(-1316536413) == False\nassert solution.isPowerOfFour(-1857993719) == False\nassert solution.isPowerOfFour(834396323) == False\nassert solution.isPowerOfFour(-29194969) == False\nassert solution.isPowerOfFour(-1340825799) == False\nassert solution.isPowerOfFour(-861107902) == False\nassert solution.isPowerOfFour(-330957887) == False\nassert solution.isPowerOfFour(354528954) == False\nassert solution.isPowerOfFour(-843552779) == False\nassert solution.isPowerOfFour(2050946487) == False\nassert solution.isPowerOfFour(-902016635) == False\nassert solution.isPowerOfFour(289265475) == False\nassert solution.isPowerOfFour(392445895) == False\nassert solution.isPowerOfFour(1495555314) == False\nassert solution.isPowerOfFour(-981605610) == False\nassert solution.isPowerOfFour(1101243042) == False\nassert solution.isPowerOfFour(1323638794) == False\nassert solution.isPowerOfFour(-508432525) == False\nassert solution.isPowerOfFour(29953373) == False\nassert solution.isPowerOfFour(1150779012) == False\nassert solution.isPowerOfFour(-1737501345) == False\nassert solution.isPowerOfFour(105307083) == False\nassert solution.isPowerOfFour(-1501638540) == False\nassert solution.isPowerOfFour(295765873) == False\nassert solution.isPowerOfFour(-1250364443) == False\nassert solution.isPowerOfFour(960304890) == False\nassert solution.isPowerOfFour(468591715) == False\nassert solution.isPowerOfFour(-1492755633) == False\nassert solution.isPowerOfFour(1982634441) == False\nassert solution.isPowerOfFour(2082588896) == False\nassert solution.isPowerOfFour(1952603438) == False\nassert solution.isPowerOfFour(-993187586) == False\nassert solution.isPowerOfFour(497419628) == False\nassert solution.isPowerOfFour(1136112891) == False\nassert solution.isPowerOfFour(-1150533245) == False\nassert solution.isPowerOfFour(-1840413329) == False\nassert solution.isPowerOfFour(-1539356541) == False\nassert solution.isPowerOfFour(-1045551619) == False\nassert solution.isPowerOfFour(1822351967) == False\nassert solution.isPowerOfFour(-1949501988) == False\nassert solution.isPowerOfFour(1444861793) == False\nassert solution.isPowerOfFour(1939352310) == False\nassert solution.isPowerOfFour(465402098) == False",
  "inefficient_solution": "class Solution:\n    def isPowerOfFour(self, n: int) -> bool:\n        if n > 0:\n            powers_of_four = []\n            i = 1\n            while i < n:\n                powers_of_four.append(4 ** i)\n                i += 1\n            return n in powers_of_four\n        else:\n            return False",
  "is_python": true
}