{
  "problem_idx": 349,
  "task_name": "Intersection of Two Arrays",
  "markdown_description": "\nGiven two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must be **unique** and you may return the result in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,2,1], nums2 = [2,2]\n**Output:** [2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n**Output:** [9,4]\n**Explanation:** [4,9] is also accepted.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 1000`\n* `0 <= nums1[i], nums2[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list(set(nums1) & set(nums2))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        return list(set(nums1) & set(nums2))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers lists\n    nums1 = random.sample(range(1, 1001), random.randint(1, 10))\n    nums2 = random.sample(range(1, 1001), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.intersection(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.intersection(nums1, nums2) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.intersection({nums1}, {nums2}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.intersection({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.intersection([990, 57, 86, 782, 177, 325, 976, 383, 131], [661, 277, 246, 423, 259, 358, 947, 86, 404]) == [86]\nassert solution.intersection([459, 993, 350, 631], [756, 169, 617, 599, 672, 504, 350]) == [350]\nassert solution.intersection([233, 209, 870, 368, 429, 997, 33, 19], [33, 587, 45, 711]) == [33]\nassert solution.intersection([442, 159, 917, 580, 144, 705, 525, 172, 18, 547], [426, 525, 514, 973, 9, 254, 444]) == [525]\nassert solution.intersection([105, 448], [129, 281, 448, 182]) == [448]",
  "inefficient_solution": "class Solution:\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        # Create a list of all possible integers in the range of nums1 and nums2\n        all_nums = [i for i in range(1001)]\n        \n        # Create a dictionary to store the count of each number in nums1 and nums2\n        nums1_dict = {}\n        for num in nums1:\n            if num in nums1_dict:\n                nums1_dict[num] += 1\n            else:\n                nums1_dict[num] = 1\n        \n        nums2_dict = {}\n        for num in nums2:\n            if num in nums2_dict:\n                nums2_dict[num] += 1\n            else:\n                nums2_dict[num] = 1\n        \n        # Initialize an empty list to store the intersection\n        intersection = []\n        \n        # Iterate over all possible integers\n        for num in all_nums:\n            # Check if the number exists in both dictionaries and its count is greater than 0\n            if num in nums1_dict and num in nums2_dict and nums1_dict[num] > 0 and nums2_dict[num] > 0:\n                # Add the number to the intersection list\n                intersection.append(num)\n                # Decrement the count of the number in both dictionaries\n                nums1_dict[num] -= 1\n                nums2_dict[num] -= 1\n        \n        # Return the intersection list\n        return intersection",
  "is_python": true
}