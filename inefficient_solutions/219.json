{
  "problem_idx": 219,
  "task_name": "Contains Duplicate II",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, return `true` *if there are two **distinct indices*** `i` *and* `j` *in the array such that* `nums[i] == nums[j]` *and* `abs(i - j) <= k`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1], k = 3\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,0,1,1], k = 1\n**Output:** true\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1,2,3], k = 2\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-109 <= nums[i] <= 109`\n* `0 <= k <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        d = {}\n        for i, x in enumerate(nums):\n            if x in d and i - d[x] <= k:\n                return True\n            d[x] = i\n        return False\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        d = {}\n        for i, x in enumerate(nums):\n            if x in d and i - d[x] <= k:\n                return True\n            d[x] = i\n        return False\n    \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-10**9, 10**9+1), random.randint(1, 10))\n    \n    # Generate a random k value\n    k = random.randint(0, 10**5)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.containsNearbyDuplicate(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        \n        assert solution.containsNearbyDuplicate(nums, k) == expected_result\n        \n        if expected_result:\n            print(f\"assert solution.containsNearbyDuplicate({nums}, {k}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.containsNearbyDuplicate({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "",
  "inefficient_solution": "class Solution:\n    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:\n        n = len(nums)\n        d = [[] for _ in range(n)]\n        for i, x in enumerate(nums):\n            d[i] = []\n            for j in range(n):\n                if nums[j] == x and abs(i - j) <= k:\n                    d[i].append(j)\n        for i in range(n):\n            for j in range(len(d[i])):\n                if j != 0 and d[i][j] - d[i][j - 1] <= k:\n                    return True\n        return False",
  "is_python": true
}