{
  "problem_idx": 2925,
  "task_name": "Maximum Score After Applying Operations on a Tree",
  "markdown_description": "\nThere is an undirected tree with `n` nodes labeled from `0` to `n - 1`, and rooted at node `0`. You are given\u00a0a 2D integer array `edges` of length `n - 1`, where `edges[i] = [ai, bi]` indicates that there is an edge between nodes `ai` and `bi` in the tree.\n\n\nYou are also given a **0-indexed** integer array `values` of length `n`, where `values[i]` is the **value** associated with the `ith` node.\n\n\nYou start with a score of `0`. In one operation, you can:\n\n\n* Pick any node `i`.\n* Add `values[i]` to your score.\n* Set `values[i]` to `0`.\n\n\nA tree is **healthy** if the sum of values on the path from the root to any leaf node is different than zero.\n\n\nReturn *the **maximum score** you can obtain after performing these operations on the tree any number of times so that it remains **healthy**.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2900-2999/2925.Maximum%20Score%20After%20Applying%20Operations%20on%20a%20Tree/images/graph-13-1.png)\n\n```\n\n**Input:** edges = [[0,1],[0,2],[0,3],[2,4],[4,5]], values = [5,2,5,2,1,1]\n**Output:** 11\n**Explanation:** We can choose nodes 1, 2, 3, 4, and 5. The value of the root is non-zero. Hence, the sum of values on the path from the root to any leaf is different than zero. Therefore, the tree is healthy and the score is values[1] + values[2] + values[3] + values[4] + values[5] = 11.\nIt can be shown that 11 is the maximum score obtainable after any number of operations on the tree.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2900-2999/2925.Maximum%20Score%20After%20Applying%20Operations%20on%20a%20Tree/images/graph-14-2.png)\n\n```\n\n**Input:** edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [20,10,9,7,4,3,5]\n**Output:** 40\n**Explanation:** We can choose nodes 0, 2, 3, and 4.\n- The sum of values on the path from 0 to 4 is equal to 10.\n- The sum of values on the path from 0 to 3 is equal to 10.\n- The sum of values on the path from 0 to 5 is equal to 3.\n- The sum of values on the path from 0 to 6 is equal to 5.\nTherefore, the tree is healthy and the score is values[0] + values[2] + values[3] + values[4] = 40.\nIt can be shown that 40 is the maximum score obtainable after any number of operations on the tree.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 2 * 104`\n* `edges.length == n - 1`\n* `edges[i].length == 2`\n* `0 <= ai, bi < n`\n* `values.length == n`\n* `1 <= values[i] <= 109`\n* The input is generated such that `edges` represents a valid tree.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumScoreAfterOperations(\n        self, edges: List[List[int]], values: List[int]\n    ) -> int:\n        def dfs(i: int, fa: int = -1) -> (int, int):\n            a = b = 0\n            leaf = True\n            for j in g[i]:\n                if j != fa:\n                    leaf = False\n                    aa, bb = dfs(j, i)\n                    a += aa\n                    b += bb\n            if leaf:\n                return values[i], 0\n            return values[i] + a, max(values[i] + b, a)\n\n        g = [[] for _ in range(len(values))]\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        return dfs(0)[1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumScoreAfterOperations(self, edges, values):\n        def dfs(i, fa=-1):\n            a = b = 0\n            leaf = True\n            for j in g[i]:\n                if j != fa:\n                    leaf = False\n                    aa, bb = dfs(j, i)\n                    a += aa\n                    b += bb\n            if leaf:\n                return values[i], 0\n            return values[i] + a, max(values[i] + b, a)\n\n        g = [[] for _ in range(len(values))]\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        return dfs(0)[1]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random edges list\n    edges = []\n\n    num_nodes = random.randint(2, 11)\n    for i in range(1, num_nodes):\n        a = random.randint(0, i-1)\n        edges.append([a, i])\n\n    # Generate random values list\n    values = [random.randint(1, 1000000000) for _ in range(num_nodes)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumScoreAfterOperations(edges, values)\n\n    return edges, values, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        edges, values, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumScoreAfterOperations(edges, values) == expected_result\n        print(f\"assert solution.maximumScoreAfterOperations({edges}, {values}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumScoreAfterOperations({edges}, {values}) == {expected_result}\")\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [0, 4], [0, 5]], [982266960, 664164521, 472820920, 493613768, 11939480, 716646546]) == 2359185235\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [1, 4], [3, 5], [2, 6], [1, 7]], [857262271, 650975589, 296912616, 571068547, 411893656, 870128295, 507282633, 138150039]) == 3446411375\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [0, 4], [1, 5], [1, 6], [2, 7], [3, 8]], [233866685, 826478407, 324901259, 688550850, 336428332, 549707033, 330694315, 277125651, 336299119]) == 3670184966\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [3, 4]], [188662437, 185904852, 451552828, 93967937, 976342841]) == 1707768458\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2]], [909262089, 814620232, 898123929]) == 1712744161\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [1, 4], [3, 5], [4, 6], [6, 7], [7, 8], [2, 9]], [441068338, 245670452, 813641379, 378397696, 161005314, 325980671, 157498603, 408345382, 2333832, 314180688]) == 2807054017\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [0, 4], [2, 5]], [626503497, 365239393, 490428890, 55951431, 603536029, 127601742]) == 1642757485\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [1, 4], [4, 5], [3, 6], [5, 7], [5, 8], [6, 9]], [845019053, 242270164, 893533208, 823195446, 604337387, 446802176, 199140736, 389848816, 249678560, 226852400]) == 4479267046\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [1, 4], [1, 5], [2, 6], [0, 7]], [751780156, 660520019, 119007588, 341124518, 467858185, 454128867, 449657760, 962091740]) == 3454388677\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [1, 4], [4, 5], [1, 6], [2, 7]], [916164605, 380176978, 116749110, 402362125, 800261804, 383219073, 695394065, 468106570]) == 3782257352\nassert solution.maximumScoreAfterOperations([[0, 1]], [133710511, 766738392]) == 766738392\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [1, 4], [4, 5], [3, 6], [0, 7], [3, 8]], [875031984, 50553676, 772030587, 745212582, 583587865, 418671179, 593094031, 398996741, 301091753]) == 4288719981\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [1, 4], [4, 5], [1, 6], [4, 7], [6, 8], [3, 9], [3, 10]], [152251715, 877816740, 183117759, 369744659, 168696133, 329637798, 858219589, 398084007, 960075775, 86141949, 351033057]) == 4582567466\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3], [2, 4], [4, 5]], [771166441, 433980115, 871275537, 875799231, 90877310, 953825435]) == 3562943954\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3], [2, 4], [0, 5], [4, 6], [1, 7], [3, 8], [8, 9], [0, 10]], [491152051, 100039087, 85616604, 418627872, 867643540, 485487953, 194520732, 237231938, 442678298, 992395116, 802538017]) == 4626779157\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [3, 4], [1, 5], [4, 6]], [853710321, 234223883, 309326093, 694844674, 292025097, 51446428, 300366576]) == 2392471547\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [1, 3], [3, 4], [0, 5], [3, 6]], [648782991, 119626664, 261735525, 259000567, 210290864, 162148637, 919013834]) == 2037088256\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [2, 4], [4, 5], [3, 6], [5, 7]], [383362698, 507907377, 146471395, 812457291, 793887473, 274893642, 756644238, 881029627]) == 4173291043\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [1, 4], [0, 5], [3, 6], [6, 7], [4, 8], [7, 9], [4, 10]], [639936390, 558987571, 727947798, 500031229, 25457646, 615744177, 188484714, 712067438, 495987680, 76830557, 529782971]) == 4431321781\nassert solution.maximumScoreAfterOperations([[0, 1]], [448333324, 439331734]) == 448333324\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3], [2, 4], [1, 5], [4, 6], [1, 7], [2, 8]], [492706125, 755137839, 714763856, 688300243, 200703043, 955785532, 263597092, 276665188, 663797953]) == 4518750746\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [1, 4], [3, 5], [2, 6]], [946552378, 179050531, 641168397, 232779660, 669583638, 755481292, 263631885]) == 3012785705\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [2, 4], [1, 5], [5, 6]], [762937655, 46338238, 700658262, 200470317, 893659551, 399192620, 77260416]) == 2833708504\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [1, 3], [0, 4], [3, 5], [0, 6]], [210961329, 211728937, 119503423, 169798664, 714180311, 91256030, 883826697]) == 2190294062\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [2, 4], [4, 5], [0, 6], [0, 7], [4, 8], [0, 9], [3, 10]], [552195852, 914741533, 7774826, 472632516, 522921657, 537140167, 599503733, 68746638, 828895551, 303753614, 162620739]) == 4418730974\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3]], [649169146, 550944131, 169569716, 127278956]) == 847792803\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [0, 4]], [605244536, 978452574, 758388247, 362200264, 765217853]) == 2864258938\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [0, 4], [4, 5], [2, 6], [1, 7], [0, 8], [6, 9], [9, 10]], [446837820, 638349050, 78239398, 713141755, 318691225, 875246633, 597625314, 969865330, 153051138, 600753592, 81395504]) == 5026358939\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [3, 4], [1, 5], [3, 6], [1, 7], [4, 8]], [803188248, 157467017, 232251853, 375556815, 641856532, 463205944, 297560824, 169416459, 180281192]) == 3163317867\nassert solution.maximumScoreAfterOperations([[0, 1]], [121116185, 951008348]) == 951008348\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [3, 4], [1, 5], [1, 6]], [730542007, 415466383, 195930133, 949911407, 964319868, 264787068, 293713244]) == 3203273594\nassert solution.maximumScoreAfterOperations([[0, 1]], [450850394, 778894529]) == 778894529\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [2, 4], [3, 5], [2, 6], [6, 7], [3, 8], [3, 9]], [830720042, 674318373, 376873569, 954308957, 953384577, 490339866, 132506243, 168335867, 775835070, 116102244]) == 4642004766\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3]], [703344796, 897388218, 717032020, 884574570]) == 2498994808\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [1, 4], [4, 5], [0, 6], [1, 7], [6, 8]], [220554963, 217879431, 825395159, 903838679, 661272534, 764723898, 716011174, 907892202, 817395858]) == 5814408935\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [0, 4], [1, 5], [5, 6], [0, 7]], [922365277, 676481527, 848500504, 624192629, 831121088, 213874137, 547924896, 309038751]) == 4051133532\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [1, 4], [0, 5], [2, 6], [0, 7], [7, 8], [3, 9]], [980568839, 667624839, 454160946, 696489797, 186943704, 822047719, 497609765, 939962953, 221426726, 898949980]) == 5385216429\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3]], [956682234, 937501330, 178171139, 521251243]) == 1894183564\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [0, 4], [2, 5], [2, 6], [2, 7], [4, 8]], [84763324, 951569109, 694011651, 956204528, 710138888, 392866499, 848939195, 318471891, 546077839]) == 5418279600\nassert solution.maximumScoreAfterOperations([[0, 1]], [491753691, 14914023]) == 491753691\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [0, 4], [4, 5], [0, 6], [0, 7]], [28169789, 532052783, 961535268, 897127853, 682857786, 85175611, 212692633, 567460174]) == 3938902108\nassert solution.maximumScoreAfterOperations([[0, 1]], [61365129, 879479470]) == 879479470\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [2, 4], [1, 5]], [473667979, 633628331, 898314281, 905677329, 359298062, 932719824]) == 3729637827\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3]], [343818524, 453539296, 705231970, 588503085]) == 1747274351\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3]], [838430519, 435828469, 8173616, 713862456]) == 1988121444\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3], [0, 4], [3, 5], [1, 6], [5, 7], [5, 8], [1, 9]], [579309604, 923948335, 289081413, 86003125, 370584289, 100828785, 567487914, 478627807, 729526524, 3952742]) == 3550040934\nassert solution.maximumScoreAfterOperations([[0, 1]], [741638166, 789103236]) == 789103236\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [0, 4]], [820905796, 743963034, 11792897, 73502755, 327890312]) == 1564868830\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [1, 3], [2, 4], [0, 5], [2, 6], [3, 7]], [566599690, 287675347, 217639011, 25531080, 758541498, 308492297, 234733011, 781877732]) == 2629427278\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [0, 4], [0, 5], [5, 6], [2, 7]], [560821194, 79450186, 25771788, 44170570, 387489247, 34339822, 459125266, 227253324]) == 1291370354\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [3, 4], [2, 5], [3, 6], [1, 7]], [702806735, 448947948, 170450179, 956317357, 832916706, 981268694, 93159973, 571497019]) == 4054557876\nassert solution.maximumScoreAfterOperations([[0, 1]], [552989394, 983060312]) == 983060312\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3]], [1520841, 440742478, 317347343, 158768397]) == 916858218\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [3, 4], [0, 5], [0, 6], [0, 7], [7, 8]], [322210007, 747273603, 391239238, 643675990, 85659114, 153238546, 16454026, 433404918, 802653220]) == 3273598655\nassert solution.maximumScoreAfterOperations([[0, 1]], [993665681, 444719440]) == 993665681\nassert solution.maximumScoreAfterOperations([[0, 1]], [509623878, 184169942]) == 509623878\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [4, 6], [4, 7], [4, 8], [8, 9], [3, 10]], [532822912, 668296968, 902742650, 760772130, 135930715, 839877363, 862361361, 419681757, 264038504, 311097962, 132992353]) == 5297791763\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [1, 3], [0, 4]], [930855921, 878140718, 709121994, 682960428, 951866696]) == 3222089836\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [1, 4]], [235946726, 937826112, 96956422, 771390200, 355149554]) == 2161322288\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [0, 4], [3, 5]], [217665676, 195580585, 850960735, 129884595, 597968885, 245392431]) == 2019787231\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [1, 4], [3, 5], [5, 6], [4, 7], [3, 8], [8, 9], [8, 10]], [296157592, 499957376, 443695398, 811961162, 3258890, 513004103, 994683955, 73058931, 826450687, 849262956, 376952719]) == 5392286177\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [1, 4], [2, 5], [5, 6], [1, 7], [4, 8]], [862390553, 185607365, 897597089, 254411911, 995678400, 410710014, 363266181, 686802374, 314723004]) == 4531167615\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2]], [616830354, 882859501, 288611180]) == 1171470681\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [2, 4], [2, 5], [0, 6]], [548671119, 295136423, 836983980, 513697508, 180154659, 363297807, 675948182]) == 2865218559\nassert solution.maximumScoreAfterOperations([[0, 1]], [975654171, 517344881]) == 975654171\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [1, 3], [2, 4]], [417279412, 193055968, 705803806, 843908029, 110110250]) == 1966991247\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2]], [607511798, 381880846, 875688560]) == 1257569406\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [1, 3], [3, 4], [0, 5], [2, 6], [4, 7]], [201515301, 27955685, 592097421, 564874822, 83238012, 377676497, 982997203, 71657388]) == 2700497028\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3]], [567398088, 594432542, 533997565, 870057281]) == 2031887911\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3], [1, 4], [4, 5], [0, 6], [6, 7]], [691663811, 304247910, 483525877, 765670955, 168790937, 477667399, 98522387, 381287008]) == 2968605987\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3], [0, 4], [3, 5], [5, 6]], [731404627, 672625725, 475209686, 585690510, 894433647, 272540322, 119200778]) == 3019700668\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [2, 4], [0, 5], [2, 6], [0, 7], [0, 8]], [500727953, 751156256, 362102023, 250980483, 310446017, 686508750, 675100307, 579702525, 889206164]) == 4505202525\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2]], [601003893, 480598503, 907583967]) == 1508587860\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [2, 4], [1, 5]], [974738158, 877464447, 484319690, 395632957, 634210639, 61403689]) == 2486413244\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3], [2, 4], [1, 5], [2, 6], [5, 7], [2, 8], [5, 9], [5, 10]], [932623995, 890030360, 557145684, 258413862, 261320710, 453105212, 773039182, 580224412, 348122287, 108644780, 225313607]) == 4497953731\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [0, 4], [4, 5], [3, 6], [4, 7], [5, 8], [5, 9], [1, 10]], [429691318, 659988501, 531190212, 173615353, 517765663, 164671645, 381851246, 922987051, 740102505, 288463373, 836518826]) == 5217154375\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [0, 3], [0, 4], [0, 5], [0, 6]], [475387897, 505705827, 819270037, 490202158, 922812142, 913838146, 235973515]) == 3887801825\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [2, 4], [3, 5], [3, 6], [3, 7]], [103505329, 472098947, 58879554, 86472038, 923034409, 709215018, 345591793, 838388903]) == 3433680662\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2]], [584776469, 340645249, 779623434]) == 1120268683\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [2, 4], [2, 5], [5, 6], [1, 7], [2, 8], [0, 9]], [521826024, 288098784, 15890840, 947383074, 956838760, 202132013, 734204989, 931563307, 462529098, 882510101]) == 5421150966\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [0, 4]], [596732366, 511487320, 700063021, 435357847, 898955619]) == 2545863807\nassert solution.maximumScoreAfterOperations([[0, 1]], [299302819, 492763346]) == 492763346\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3]], [612309896, 312276303, 843693256, 11375743]) == 1467378895\nassert solution.maximumScoreAfterOperations([[0, 1]], [999994292, 953375160]) == 999994292\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [1, 4], [0, 5], [4, 6], [2, 7], [3, 8]], [5371410, 244146287, 456374117, 222309676, 2058471, 791826179, 101492514, 852345964, 430972515]) == 3101525723\nassert solution.maximumScoreAfterOperations([[0, 1]], [680096, 347706905]) == 347706905\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [2, 3], [2, 4], [0, 5]], [23727927, 513181750, 274517076, 289804492, 406089408, 431423515]) == 1915016241\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [0, 4]], [184676709, 501764445, 632377564, 575134438, 384340144]) == 2093616591\nassert solution.maximumScoreAfterOperations([[0, 1]], [884861946, 44784311]) == 884861946\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [3, 4], [0, 5], [4, 6], [1, 7], [1, 8]], [976640295, 322005688, 907818978, 256892562, 688635331, 576203367, 363917589, 606831741, 495523797]) == 4217829053\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [1, 3], [3, 4]], [638635997, 442493168, 596317095, 808524985, 254273173]) == 2101608421\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [3, 4], [3, 5], [0, 6], [6, 7], [2, 8]], [864165021, 382935900, 841167756, 873818487, 380082353, 519169978, 258551673, 271767388, 105021251]) == 3632514786\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [3, 4], [2, 5]], [844597648, 405979044, 538792512, 226189679, 722658790, 263943828]) == 2157563853\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3], [2, 4], [1, 5], [3, 6], [4, 7], [4, 8]], [668656387, 599142360, 894825105, 800444353, 322362235, 915923582, 936298812, 277496443, 240474933]) == 5056481850\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2], [1, 3]], [972939074, 220831683, 544803379, 554035215]) == 2071777668\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [1, 4], [3, 5], [4, 6], [1, 7]], [5054266, 591473941, 801990877, 382359736, 751855989, 504462741, 129081071, 850869738]) == 4012094093\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [0, 3], [2, 4]], [147502201, 44666239, 257069699, 728107788, 398490204]) == 1428333930\nassert solution.maximumScoreAfterOperations([[0, 1], [0, 2], [2, 3], [2, 4], [1, 5]], [236616738, 937043976, 383679667, 766491116, 589466711, 86943122]) == 2763624592\nassert solution.maximumScoreAfterOperations([[0, 1], [1, 2]], [343127404, 973930886, 203598848]) == 1317058290\nassert solution.maximumScoreAfterOperations([[0, 1]], [271715779, 733736446]) == 733736446",
  "inefficient_solution": "class Solution:\n    def maximumScoreAfterOperations(\n        self, edges: List[List[int]], values: List[int]\n    ) -> int:\n        def dfs(i: int, fa: int = -1) -> (int, int):\n            a = b = 0\n            leaf = True\n            for j in g[i]:\n                if j != fa:\n                    leaf = False\n                    aa, bb = dfs(j, i)\n                    a += aa\n                    b += bb\n                    # allocate extra memory to store the result of subproblem\n                    cache[aa] = aa\n                    cache[bb] = bb\n            if leaf:\n                return values[i], 0\n            return values[i] + a, max(values[i] + b, a)\n\n        g = [[] for _ in range(len(values))]\n        cache = {}\n        for a, b in edges:\n            g[a].append(b)\n            g[b].append(a)\n            # allocate extra memory for each edge\n            edge[a] = a\n            edge[b] = b\n        edge[0] = 0\n        return dfs(0)[1]",
  "is_python": true
}