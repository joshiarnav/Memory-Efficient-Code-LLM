{
  "problem_idx": 1009,
  "task_name": "Complement of Base ",
  "markdown_description": "\nThe **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.\n\n\n* For example, The integer `5` is `\"101\"` in binary and its **complement** is `\"010\"` which is the integer `2`.\n\n\nGiven an integer `n`, return *its complement*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5\n**Output:** 2\n**Explanation:** 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 7\n**Output:** 0\n**Explanation:** 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 5\n**Explanation:** 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n < 109`\n\n\n\u00a0\n\n\n**Note:** This question is the same as 476: <https://leetcode.com/problems/number-complement/>\n\n\n",
  "canonical_solution": "class Solution:\n    def bitwiseComplement(self, n: int) -> int:\n        if n == 0:\n            return 1\n        ans = 0\n        find = False\n        for i in range(30, -1, -1):\n            b = n & (1 << i)\n            if not find and b == 0:\n                continue\n            find = True\n            if b == 0:\n                ans |= 1 << i\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def bitwiseComplement(self, n: int) -> int:\n        if n == 0:\n            return 1\n        ans = 0\n        find = False\n        for i in range(30, -1, -1):\n            b = n & (1 << i)\n            if not find and b == 0:\n                continue\n            find = True\n            if b == 0:\n                ans |= 1 << i\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random number\n    n = random.randint(0, 1000000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.bitwiseComplement(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.bitwiseComplement(n) == expected_result\n        print(f\"assert solution.bitwiseComplement({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.bitwiseComplement({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.bitwiseComplement(156369708) == 112065747\nassert solution.bitwiseComplement(646504805) == 427237018\nassert solution.bitwiseComplement(101102703) == 33115024\nassert solution.bitwiseComplement(397615422) == 139255489\nassert solution.bitwiseComplement(87847423) == 46370304\nassert solution.bitwiseComplement(168495393) == 99940062\nassert solution.bitwiseComplement(163341573) == 105093882\nassert solution.bitwiseComplement(779546865) == 294194958\nassert solution.bitwiseComplement(965628608) == 108113215\nassert solution.bitwiseComplement(784238791) == 289503032\nassert solution.bitwiseComplement(701478416) == 372263407\nassert solution.bitwiseComplement(927154515) == 146587308\nassert solution.bitwiseComplement(113668080) == 20549647\nassert solution.bitwiseComplement(358699717) == 178171194\nassert solution.bitwiseComplement(650180576) == 423561247\nassert solution.bitwiseComplement(999526821) == 74215002\nassert solution.bitwiseComplement(154970380) == 113465075\nassert solution.bitwiseComplement(599050318) == 474691505\nassert solution.bitwiseComplement(273290505) == 263580406\nassert solution.bitwiseComplement(385080075) == 151790836\nassert solution.bitwiseComplement(226626350) == 41809105\nassert solution.bitwiseComplement(38445419) == 28663444\nassert solution.bitwiseComplement(619159732) == 454582091\nassert solution.bitwiseComplement(289411219) == 247459692\nassert solution.bitwiseComplement(145417244) == 123018211\nassert solution.bitwiseComplement(673758708) == 399983115\nassert solution.bitwiseComplement(336119236) == 200751675\nassert solution.bitwiseComplement(984944708) == 88797115\nassert solution.bitwiseComplement(605911449) == 467830374\nassert solution.bitwiseComplement(467704265) == 69166646\nassert solution.bitwiseComplement(751037411) == 322704412\nassert solution.bitwiseComplement(376178933) == 160691978\nassert solution.bitwiseComplement(761922349) == 311819474\nassert solution.bitwiseComplement(521277947) == 15592964\nassert solution.bitwiseComplement(109337149) == 24880578\nassert solution.bitwiseComplement(980756740) == 92985083\nassert solution.bitwiseComplement(88657898) == 45559829\nassert solution.bitwiseComplement(284824666) == 252046245\nassert solution.bitwiseComplement(196543514) == 71891941\nassert solution.bitwiseComplement(762432070) == 311309753\nassert solution.bitwiseComplement(363920955) == 172949956\nassert solution.bitwiseComplement(690836137) == 382905686\nassert solution.bitwiseComplement(908417142) == 165324681\nassert solution.bitwiseComplement(190658609) == 77776846\nassert solution.bitwiseComplement(68905598) == 65312129\nassert solution.bitwiseComplement(270442862) == 266428049\nassert solution.bitwiseComplement(106163365) == 28054362\nassert solution.bitwiseComplement(734571515) == 339170308\nassert solution.bitwiseComplement(215295314) == 53140141\nassert solution.bitwiseComplement(748739703) == 325002120\nassert solution.bitwiseComplement(139652707) == 128782748\nassert solution.bitwiseComplement(276755391) == 260115520\nassert solution.bitwiseComplement(288553660) == 248317251\nassert solution.bitwiseComplement(268189607) == 245848\nassert solution.bitwiseComplement(196002587) == 72432868\nassert solution.bitwiseComplement(683482287) == 390259536\nassert solution.bitwiseComplement(633553604) == 440188219\nassert solution.bitwiseComplement(114752143) == 19465584\nassert solution.bitwiseComplement(59127427) == 7981436\nassert solution.bitwiseComplement(785222780) == 288519043\nassert solution.bitwiseComplement(234538506) == 33896949\nassert solution.bitwiseComplement(347700972) == 189169939\nassert solution.bitwiseComplement(219383593) == 49051862\nassert solution.bitwiseComplement(287518497) == 249352414\nassert solution.bitwiseComplement(90680484) == 43537243\nassert solution.bitwiseComplement(125714623) == 8503104\nassert solution.bitwiseComplement(82546061) == 51671666\nassert solution.bitwiseComplement(75437844) == 58779883\nassert solution.bitwiseComplement(568211837) == 505529986\nassert solution.bitwiseComplement(867164203) == 206577620\nassert solution.bitwiseComplement(171368366) == 97067089\nassert solution.bitwiseComplement(383886302) == 152984609\nassert solution.bitwiseComplement(940353850) == 133387973\nassert solution.bitwiseComplement(382980811) == 153890100\nassert solution.bitwiseComplement(404017487) == 132853424\nassert solution.bitwiseComplement(563155376) == 510586447\nassert solution.bitwiseComplement(729291028) == 344450795\nassert solution.bitwiseComplement(482958846) == 53912065\nassert solution.bitwiseComplement(137742813) == 130692642\nassert solution.bitwiseComplement(929384784) == 144357039\nassert solution.bitwiseComplement(101387796) == 32829931\nassert solution.bitwiseComplement(602942651) == 470799172\nassert solution.bitwiseComplement(965967400) == 107774423\nassert solution.bitwiseComplement(229725153) == 38710302\nassert solution.bitwiseComplement(366857697) == 170013214\nassert solution.bitwiseComplement(606767785) == 466974038\nassert solution.bitwiseComplement(172104962) == 96330493\nassert solution.bitwiseComplement(921423657) == 152318166\nassert solution.bitwiseComplement(373080334) == 163790577\nassert solution.bitwiseComplement(889612800) == 184129023\nassert solution.bitwiseComplement(542721742) == 531020081\nassert solution.bitwiseComplement(747584528) == 326157295\nassert solution.bitwiseComplement(571421176) == 502320647\nassert solution.bitwiseComplement(310449272) == 226421639\nassert solution.bitwiseComplement(691265244) == 382476579\nassert solution.bitwiseComplement(949364057) == 124377766\nassert solution.bitwiseComplement(125385484) == 8832243\nassert solution.bitwiseComplement(551052469) == 522689354\nassert solution.bitwiseComplement(191115178) == 77320277\nassert solution.bitwiseComplement(125052174) == 9165553",
  "inefficient_solution": "class Solution:\n    def bitwiseComplement(self, n: int) -> int:\n        result = []\n        for i in range(0, 30):\n            result.append(0)\n        if n == 0:\n            result[0] = 1\n        else:\n            for i in range(30, -1, -1):\n                b = n & (1 << i)\n                if b != 0:\n                    result[30-i] = 1\n        ans = 0\n        for i in range(30):\n            ans = ans * 2 + result[i]\n        return ans",
  "is_python": true
}