{
  "problem_idx": 2935,
  "task_name": "Maximum Strong Pair XOR II",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`. A pair of integers `x` and `y` is called a **strong** pair if it satisfies the condition:\n\n\n* `|x - y| <= min(x, y)`\n\n\nYou need to select two integers from `nums` such that they form a strong pair and their bitwise `XOR` is the **maximum** among all strong pairs in the array.\n\n\nReturn *the **maximum*** `XOR` *value out of all possible strong pairs in the array* `nums`.\n\n\n**Note** that you can pick the same integer twice to form a pair.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 7\n**Explanation:** There are 11 strong pairs in the array nums: (1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) and (5, 5).\nThe maximum XOR possible from these pairs is 3 XOR 4 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,100]\n**Output:** 0\n**Explanation:** There are 2 strong pairs in the array nums: (10, 10) and (100, 100).\nThe maximum XOR possible from these pairs is 10 XOR 10 = 0 since the pair (100, 100) also gives 100 XOR 100 = 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [500,520,2500,3000]\n**Output:** 1020\n**Explanation:** There are 6 strong pairs in the array nums: (500, 500), (500, 520), (520, 520), (2500, 2500), (2500, 3000) and (3000, 3000).\nThe maximum XOR possible from these pairs is 500 XOR 520 = 1020 since the only other non-zero XOR value is 2500 XOR 3000 = 636.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5 * 104`\n* `1 <= nums[i] <= 220 - 1`\n\n\n",
  "canonical_solution": "class Trie:\n    __slots__ = (\"children\", \"cnt\")\n\n    def __init__(self):\n        self.children: List[Trie | None] = [None, None]\n        self.cnt = 0\n\n    def insert(self, x: int):\n        node = self\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n            node.cnt += 1\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1] and node.children[v ^ 1].cnt:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            else:\n                node = node.children[v]\n        return ans\n\n    def remove(self, x: int):\n        node = self\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            node = node.children[v]\n            node.cnt -= 1\n\n\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n        nums.sort()\n        tree = Trie()\n        ans = i = 0\n        for y in nums:\n            tree.insert(y)\n            while y > nums[i] * 2:\n                tree.remove(nums[i])\n                i += 1\n            ans = max(ans, tree.search(y))\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Trie:\n    __slots__ = (\"children\", \"cnt\")\n\n    def __init__(self):\n        self.children: List[Trie | None] = [None, None]\n        self.cnt = 0\n\n    def insert(self, x: int):\n        node = self\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if node.children[v] is None:\n                node.children[v] = Trie()\n            node = node.children[v]\n            node.cnt += 1\n\n    def search(self, x: int) -> int:\n        node = self\n        ans = 0\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if node.children[v ^ 1] and node.children[v ^ 1].cnt:\n                ans |= 1 << i\n                node = node.children[v ^ 1]\n            else:\n                node = node.children[v]\n        return ans\n\n    def remove(self, x: int):\n        node = self\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            node = node.children[v]\n            node.cnt -= 1\n\n\nclass Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n        nums.sort()\n        tree = Trie()\n        ans = i = 0\n        for y in nums:\n            tree.insert(y)\n            while y > nums[i] * 2:\n                tree.remove(nums[i])\n                i += 1\n            ans = max(ans, tree.search(y))\n        return ans\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a list of random numbers\n    nums = random.sample(range(1, 21), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumStrongPairXor(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumStrongPairXor(nums) == expected_result\n        print(f\"assert solution.maximumStrongPairXor({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumStrongPairXor({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumStrongPairXor([1, 9, 11, 16, 17, 19]) == 27\nassert solution.maximumStrongPairXor([2, 3, 4, 8, 9, 10, 16, 17]) == 27\nassert solution.maximumStrongPairXor([3, 16, 18]) == 2\nassert solution.maximumStrongPairXor([1, 4, 5, 8]) == 13\nassert solution.maximumStrongPairXor([9]) == 0\nassert solution.maximumStrongPairXor([4, 5, 9, 11, 16, 20]) == 31\nassert solution.maximumStrongPairXor([1, 2, 5, 6, 8, 11, 13, 16, 18]) == 31\nassert solution.maximumStrongPairXor([4, 8, 14, 15, 16, 18]) == 31\nassert solution.maximumStrongPairXor([1, 16]) == 0\nassert solution.maximumStrongPairXor([3, 5, 9]) == 12\nassert solution.maximumStrongPairXor([5, 16, 18, 19, 20]) == 7\nassert solution.maximumStrongPairXor([4, 6, 7, 8, 10, 13, 14, 18]) == 31\nassert solution.maximumStrongPairXor([1, 6, 12]) == 10\nassert solution.maximumStrongPairXor([10, 19]) == 25\nassert solution.maximumStrongPairXor([2, 6, 14, 15, 16, 18, 20]) == 31\nassert solution.maximumStrongPairXor([2, 4]) == 6\nassert solution.maximumStrongPairXor([3, 15]) == 0\nassert solution.maximumStrongPairXor([8, 12, 15]) == 7\nassert solution.maximumStrongPairXor([6, 9, 18]) == 27\nassert solution.maximumStrongPairXor([2, 3, 7, 9, 15, 19, 20]) == 28\nassert solution.maximumStrongPairXor([2, 3, 7, 17, 18]) == 3\nassert solution.maximumStrongPairXor([2, 4, 7, 8, 9, 10, 11, 12, 17, 20]) == 31\nassert solution.maximumStrongPairXor([16, 20]) == 4\nassert solution.maximumStrongPairXor([3, 5, 6, 7, 10, 13, 14, 15, 17, 19]) == 31\nassert solution.maximumStrongPairXor([1, 4, 6, 8, 12, 14]) == 14\nassert solution.maximumStrongPairXor([3, 5, 9, 11, 14, 15, 16, 19]) == 31\nassert solution.maximumStrongPairXor([1, 2, 4, 7, 8, 16, 17, 19]) == 24\nassert solution.maximumStrongPairXor([1, 2, 3, 8, 9, 12, 17, 19, 20]) == 31\nassert solution.maximumStrongPairXor([2, 7, 12, 15]) == 11\nassert solution.maximumStrongPairXor([1, 2, 3, 8, 14, 15, 18, 19]) == 29\nassert solution.maximumStrongPairXor([2, 12]) == 0\nassert solution.maximumStrongPairXor([2, 14, 15, 16]) == 31\nassert solution.maximumStrongPairXor([15]) == 0\nassert solution.maximumStrongPairXor([2, 3, 5, 7, 8, 10, 13, 16, 18]) == 31\nassert solution.maximumStrongPairXor([4, 6, 10, 15, 16]) == 31\nassert solution.maximumStrongPairXor([1, 4, 10, 12, 14, 16, 19]) == 31\nassert solution.maximumStrongPairXor([4, 6, 15, 17, 18, 19, 20]) == 30\nassert solution.maximumStrongPairXor([3, 10, 11, 13, 15, 16, 17, 19, 20]) == 31\nassert solution.maximumStrongPairXor([2, 6, 11, 16, 19]) == 27\nassert solution.maximumStrongPairXor([1, 2, 3, 5, 8, 9, 11, 13]) == 13\nassert solution.maximumStrongPairXor([1, 5, 7, 10, 15, 17]) == 30\nassert solution.maximumStrongPairXor([1, 11, 16, 18]) == 27\nassert solution.maximumStrongPairXor([2, 6, 15, 16, 20]) == 31\nassert solution.maximumStrongPairXor([2, 4, 5, 6, 14, 16, 17]) == 31\nassert solution.maximumStrongPairXor([7, 8, 9, 11, 13, 19]) == 30\nassert solution.maximumStrongPairXor([15]) == 0\nassert solution.maximumStrongPairXor([2, 10, 11, 13, 14, 15, 17, 18, 20]) == 31\nassert solution.maximumStrongPairXor([6, 8, 13, 14, 20]) == 26\nassert solution.maximumStrongPairXor([3, 8, 9, 10, 12, 14, 16, 17]) == 31\nassert solution.maximumStrongPairXor([11, 17]) == 26\nassert solution.maximumStrongPairXor([1, 5, 8, 9, 10, 13, 17]) == 28\nassert solution.maximumStrongPairXor([5, 7, 12, 15, 18, 19, 20]) == 31\nassert solution.maximumStrongPairXor([2, 5, 15, 17]) == 30\nassert solution.maximumStrongPairXor([5, 14]) == 0\nassert solution.maximumStrongPairXor([1, 6, 17]) == 0\nassert solution.maximumStrongPairXor([2, 3, 4, 10, 14, 15, 17]) == 31\nassert solution.maximumStrongPairXor([5, 7, 9, 13]) == 14\nassert solution.maximumStrongPairXor([3, 5, 6, 9, 14, 17]) == 31\nassert solution.maximumStrongPairXor([1, 19]) == 0\nassert solution.maximumStrongPairXor([15, 16]) == 31\nassert solution.maximumStrongPairXor([9, 12]) == 5\nassert solution.maximumStrongPairXor([2, 6, 11, 16, 18, 19, 20]) == 31\nassert solution.maximumStrongPairXor([1, 2, 8, 9, 12, 16]) == 28\nassert solution.maximumStrongPairXor([1, 9, 12, 14, 17, 19]) == 31\nassert solution.maximumStrongPairXor([1, 3, 5, 7, 8, 9, 15, 16, 17, 18]) == 31\nassert solution.maximumStrongPairXor([4, 5, 6, 12]) == 10\nassert solution.maximumStrongPairXor([4, 8, 9, 11]) == 12\nassert solution.maximumStrongPairXor([2, 5, 7, 8, 9, 12, 15, 18]) == 30\nassert solution.maximumStrongPairXor([1, 2, 7, 12, 13, 17]) == 29\nassert solution.maximumStrongPairXor([1, 7, 8, 9, 12, 13, 14, 15, 19, 20]) == 31\nassert solution.maximumStrongPairXor([8, 9, 10, 13, 15, 18, 19, 20]) == 31\nassert solution.maximumStrongPairXor([2, 5, 13]) == 0\nassert solution.maximumStrongPairXor([3, 5, 12, 13, 15, 17, 18, 19]) == 31\nassert solution.maximumStrongPairXor([2, 7, 9, 19]) == 14\nassert solution.maximumStrongPairXor([4, 5, 8, 11, 15, 17, 19]) == 30\nassert solution.maximumStrongPairXor([19]) == 0\nassert solution.maximumStrongPairXor([1, 2, 5, 6, 7, 11, 12, 13, 15, 20]) == 31\nassert solution.maximumStrongPairXor([1, 4, 6, 8, 10, 15, 16, 18, 19, 20]) == 31\nassert solution.maximumStrongPairXor([3, 7, 8, 17]) == 15\nassert solution.maximumStrongPairXor([1, 3, 4, 5, 6, 8, 11, 12, 13, 20]) == 31\nassert solution.maximumStrongPairXor([1]) == 0\nassert solution.maximumStrongPairXor([1, 9, 14]) == 7\nassert solution.maximumStrongPairXor([3, 15, 20]) == 27\nassert solution.maximumStrongPairXor([7, 8, 13]) == 15\nassert solution.maximumStrongPairXor([1, 2, 3, 7, 10, 17, 18]) == 27\nassert solution.maximumStrongPairXor([1, 5, 6, 10, 13, 18]) == 31\nassert solution.maximumStrongPairXor([3, 5, 6, 7, 8, 10, 13, 14]) == 15\nassert solution.maximumStrongPairXor([1, 4, 5, 8, 10, 11, 13, 19, 20]) == 31\nassert solution.maximumStrongPairXor([1, 3, 8, 10, 13, 16, 18, 19]) == 31\nassert solution.maximumStrongPairXor([2, 4, 6, 9, 11, 15, 18, 19]) == 29\nassert solution.maximumStrongPairXor([3, 4, 5, 6, 12, 14, 17, 20]) == 31\nassert solution.maximumStrongPairXor([4, 7, 8, 9, 11, 18]) == 27\nassert solution.maximumStrongPairXor([5, 6, 7]) == 3\nassert solution.maximumStrongPairXor([2, 4]) == 6\nassert solution.maximumStrongPairXor([2, 6, 8, 10, 11, 12, 17, 18, 19]) == 31\nassert solution.maximumStrongPairXor([1, 4, 13, 14, 15, 16, 17, 19]) == 31\nassert solution.maximumStrongPairXor([3, 4, 8, 10, 13, 17, 18, 19, 20]) == 31\nassert solution.maximumStrongPairXor([1, 3, 11, 14, 20]) == 31\nassert solution.maximumStrongPairXor([1, 2, 14, 15]) == 3\nassert solution.maximumStrongPairXor([1, 3, 11, 12, 14, 16]) == 30",
  "inefficient_solution": "class Solution:\n    def maximumStrongPairXor(self, nums: List[int]) -> int:\n        nums.sort()\n        trie = []\n        for _ in range(len(nums)**2):\n            trie.append([None, None])\n        ans = i = 0\n        for y in nums:\n            self.insert(trie, y)\n            while y > nums[i] * 2:\n                self.remove(trie, nums[i])\n                i += 1\n            ans = max(ans, self.search(trie, y))\n        return ans\n\n    def insert(self, trie: List[List], x: int):\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if trie[-len(nums) + i][v] is None:\n                trie[-len(nums) + i][v] = []\n            trie = trie[-len(nums) + i][v]\n            trie.append([])\n\n    def remove(self, trie: List[List], x: int):\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            trie[-len(nums) + i] = trie[-len(nums) + i][v]\n\n    def search(self, trie: List[List], x: int) -> int:\n        ans = 0\n        for i in range(20, -1, -1):\n            v = x >> i & 1\n            if trie[-len(nums) + i][v ^ 1]:\n                ans |= 1 << i\n                trie = trie[-len(nums) + i][v ^ 1]\n            else:\n                trie = trie[-len(nums) + i][v]\n        return ans",
  "is_python": true
}