{
  "problem_idx": 2358,
  "task_name": "Maximum Number of Groups Entering a Competition",
  "markdown_description": "\nYou are given a positive integer array `grades` which represents the grades of students in a university. You would like to enter **all** these students into a competition in **ordered** non-empty groups, such that the ordering meets the following conditions:\n\n\n* The sum of the grades of students in the `ith` group is **less than** the sum of the grades of students in the `(i + 1)th` group, for all groups (except the last).\n* The total number of students in the `ith` group is **less than** the total number of students in the `(i + 1)th` group, for all groups (except the last).\n\n\nReturn *the **maximum** number of groups that can be formed*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** grades = [10,6,12,7,3,5]\n**Output:** 3\n**Explanation:** The following is a possible way to form 3 groups of students:\n- 1st group has the students with grades = [12]. Sum of grades: 12. Student count: 1\n- 2nd group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2\n- 3rd group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3\nIt can be shown that it is not possible to form more than 3 groups.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grades = [8,8]\n**Output:** 1\n**Explanation:** We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= grades.length <= 105`\n* `1 <= grades[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumGroups(self, grades: List[int]) -> int:\n        n = len(grades)\n        return bisect_right(range(n + 1), n * 2, key=lambda x: x * x + x) - 1\n",
  "test_case_generator": "\nimport random\nfrom bisect import bisect_right\nfrom typing import List\n\nclass Solution:\n    def maximumGroups(self, grades: List[int]) -> int:\n        n = len(grades)\n        return bisect_right(range(n + 1), n * 2, key=lambda x: x * x + x) - 1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grades list\n    grades = [random.randint(1, 100) for _ in range(random.randint(1, 11))]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumGroups(grades)\n\n    return grades, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grades, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumGroups(grades) == expected_result\n        print(f\"assert solution.maximumGroups({grades}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumGroups({grades}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumGroups([78, 44, 76]) == 2\nassert solution.maximumGroups([91, 55]) == 1\nassert solution.maximumGroups([87, 70, 20, 35, 92, 29, 29, 97, 57, 14]) == 4\nassert solution.maximumGroups([100, 10, 86, 8, 30, 1, 70, 79, 18]) == 3\nassert solution.maximumGroups([29, 88, 45, 9]) == 2\nassert solution.maximumGroups([37, 26, 20, 57, 89, 59, 35, 19, 78, 63]) == 4\nassert solution.maximumGroups([35, 17, 47, 87, 61, 98, 86, 65, 74, 92]) == 4\nassert solution.maximumGroups([31, 27, 45, 33, 8, 58, 41]) == 3\nassert solution.maximumGroups([47, 58]) == 1\nassert solution.maximumGroups([24, 78, 12, 34, 48, 4]) == 3\nassert solution.maximumGroups([28, 97, 79, 49]) == 2\nassert solution.maximumGroups([1, 30, 59, 46, 17, 88, 4, 31, 57, 44, 68]) == 4\nassert solution.maximumGroups([12, 41, 56, 20, 37, 11, 98]) == 3\nassert solution.maximumGroups([54, 100, 34, 95, 35]) == 2\nassert solution.maximumGroups([12, 38, 95, 84]) == 2\nassert solution.maximumGroups([62, 43, 30, 31, 38, 48, 59]) == 3\nassert solution.maximumGroups([85, 36]) == 1\nassert solution.maximumGroups([62, 12, 41, 11, 45, 62, 88, 41, 91, 100]) == 4\nassert solution.maximumGroups([83, 66, 67]) == 2\nassert solution.maximumGroups([17, 38]) == 1\nassert solution.maximumGroups([66, 91, 30, 28, 44, 15, 97, 39, 95, 17]) == 4\nassert solution.maximumGroups([36, 68, 34, 2, 41, 8, 51, 39]) == 3\nassert solution.maximumGroups([25, 55, 33]) == 2\nassert solution.maximumGroups([60, 70, 23]) == 2\nassert solution.maximumGroups([100, 15, 45, 22, 11, 62, 76, 57, 10]) == 3\nassert solution.maximumGroups([79, 80, 72, 35]) == 2\nassert solution.maximumGroups([7, 97, 61, 92, 28, 65, 58, 2, 49]) == 3\nassert solution.maximumGroups([28, 99, 4, 85, 82, 62, 68, 77]) == 3\nassert solution.maximumGroups([35, 55]) == 1\nassert solution.maximumGroups([90, 15]) == 1\nassert solution.maximumGroups([81, 80]) == 1\nassert solution.maximumGroups([82, 52, 71, 61, 43, 4, 68, 10, 10]) == 3\nassert solution.maximumGroups([34, 45, 97, 34, 31, 76]) == 3\nassert solution.maximumGroups([9, 46, 24, 95, 13, 55, 36]) == 3\nassert solution.maximumGroups([42, 43, 21, 31, 73, 83, 92, 46, 70, 82, 22]) == 4\nassert solution.maximumGroups([76]) == 1\nassert solution.maximumGroups([97, 61, 68, 31, 98]) == 2\nassert solution.maximumGroups([58, 29, 56, 13, 96, 38, 82]) == 3\nassert solution.maximumGroups([33, 88, 35]) == 2\nassert solution.maximumGroups([59, 50, 82, 76, 65, 47, 11]) == 3\nassert solution.maximumGroups([95, 57, 49, 97, 96, 58, 22, 21, 42, 75, 21]) == 4\nassert solution.maximumGroups([92, 50]) == 1\nassert solution.maximumGroups([31, 42]) == 1\nassert solution.maximumGroups([22, 93, 52, 20, 38, 91, 100]) == 3\nassert solution.maximumGroups([18, 74, 61, 69, 49, 68, 17, 27]) == 3\nassert solution.maximumGroups([57]) == 1\nassert solution.maximumGroups([85, 26, 59, 19, 97, 9, 28, 97, 47, 53, 76]) == 4\nassert solution.maximumGroups([96, 72, 82]) == 2\nassert solution.maximumGroups([65, 87, 63, 57, 85, 91, 36, 75, 53, 80, 56]) == 4\nassert solution.maximumGroups([46, 28, 95, 60, 28, 79]) == 3\nassert solution.maximumGroups([91, 3, 95, 100, 24]) == 2\nassert solution.maximumGroups([19, 39, 65, 89, 65, 30, 53, 24, 45]) == 3\nassert solution.maximumGroups([64, 8, 19, 90, 23, 99, 28, 10, 99, 74, 87]) == 4\nassert solution.maximumGroups([88, 57, 99, 97, 66, 38, 47, 78, 99, 95, 18]) == 4\nassert solution.maximumGroups([68, 3]) == 1\nassert solution.maximumGroups([62, 19, 32]) == 2\nassert solution.maximumGroups([70, 40, 4, 40, 88, 69, 57, 86, 76, 61, 88]) == 4\nassert solution.maximumGroups([46, 61, 29, 76, 10, 9, 6]) == 3\nassert solution.maximumGroups([21, 83, 16, 81, 29]) == 2\nassert solution.maximumGroups([20, 73, 68, 100, 22, 46, 49, 77, 58, 7]) == 4\nassert solution.maximumGroups([31, 23, 83, 70, 83, 30, 33, 79, 77]) == 3\nassert solution.maximumGroups([4, 93, 5, 36, 67, 76, 86, 93, 46, 22]) == 4\nassert solution.maximumGroups([15]) == 1\nassert solution.maximumGroups([68, 84, 56, 18, 89, 20, 60, 6, 3, 58]) == 4\nassert solution.maximumGroups([59, 6, 34, 25]) == 2\nassert solution.maximumGroups([22, 42, 54, 95, 44, 32, 96, 33, 69]) == 3\nassert solution.maximumGroups([38, 66, 57, 90, 21]) == 2\nassert solution.maximumGroups([83, 99, 93, 51, 30, 7, 76]) == 3\nassert solution.maximumGroups([30, 77, 92, 45, 36, 93]) == 3\nassert solution.maximumGroups([70, 100]) == 1\nassert solution.maximumGroups([31, 96, 19, 66, 99, 27, 93, 17, 79]) == 3\nassert solution.maximumGroups([3, 27]) == 1\nassert solution.maximumGroups([65, 38, 17, 11, 21, 68, 56]) == 3\nassert solution.maximumGroups([27, 75, 86, 45, 64, 93]) == 3\nassert solution.maximumGroups([33, 56, 94, 63, 80, 69]) == 3\nassert solution.maximumGroups([2, 47, 4]) == 2\nassert solution.maximumGroups([37, 63, 57, 31, 21]) == 2\nassert solution.maximumGroups([76, 86, 42, 41, 44, 67, 62, 38]) == 3\nassert solution.maximumGroups([80, 69, 88, 37, 6, 5]) == 3\nassert solution.maximumGroups([7, 66, 12, 71, 6, 68, 94]) == 3\nassert solution.maximumGroups([29, 6, 92, 53, 40, 72]) == 3\nassert solution.maximumGroups([23, 88]) == 1\nassert solution.maximumGroups([49, 79, 34]) == 2\nassert solution.maximumGroups([17, 26, 31, 71, 49, 91, 32, 94, 72]) == 3\nassert solution.maximumGroups([32]) == 1\nassert solution.maximumGroups([90, 5, 59, 57, 21, 4, 72, 74, 92, 18, 41]) == 4\nassert solution.maximumGroups([17, 29, 4, 88, 76, 96, 35, 70, 75, 14]) == 4\nassert solution.maximumGroups([84, 91, 93, 62, 81, 51, 52]) == 3\nassert solution.maximumGroups([6, 82, 36, 19, 53, 40, 25, 57]) == 3\nassert solution.maximumGroups([66, 33, 95, 2, 29, 67, 38]) == 3\nassert solution.maximumGroups([17, 91, 62, 93]) == 2\nassert solution.maximumGroups([98, 64, 93, 87, 10, 74, 36]) == 3\nassert solution.maximumGroups([42, 71]) == 1\nassert solution.maximumGroups([62, 45, 18, 87]) == 2\nassert solution.maximumGroups([37, 39, 70, 58, 2, 66, 27, 93, 30, 91]) == 4\nassert solution.maximumGroups([2, 31, 86, 18, 59, 25, 27, 90, 40, 42, 28]) == 4\nassert solution.maximumGroups([5, 90, 12, 20, 97]) == 2\nassert solution.maximumGroups([79, 40, 8, 50, 70, 77, 75, 77, 37, 21, 5]) == 4\nassert solution.maximumGroups([84, 54]) == 1\nassert solution.maximumGroups([16, 22, 87, 80, 54, 10]) == 3",
  "inefficient_solution": "class Solution:\n    def maximumGroups(self, grades: List[int]) -> int:\n        n = len(grades)\n        groups = []\n        for i in range(n):\n            for j in range(i, n):\n                sub_group = grades[i:j+1]\n                sum_sub_group = sum(sub_group)\n                count_sub_group = len(sub_group)\n                if not groups or sum_sub_group < max(groups, default=0) or count_sub_group < max(map(len, groups), default=0):\n                    groups.append(sub_group)\n        return len(groups)",
  "is_python": true
}