{
  "problem_idx": 763,
  "task_name": "Partition Labels",
  "markdown_description": "\nYou are given a string `s`. We want to partition the string into as many parts as possible so that each letter appears in at most one part.\n\n\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be `s`.\n\n\nReturn *a list of integers representing the size of these parts*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ababcbacadefegdehijhklij\"\n**Output:** [9,7,8]\n**Explanation:**\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\nThis is a partition so that each letter appears in at most one part.\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"eccbbbbdec\"\n**Output:** [10]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 500`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last = {c: i for i, c in enumerate(s)}\n        mx = j = 0\n        ans = []\n        for i, c in enumerate(s):\n            mx = max(mx, last[c])\n            if mx == i:\n                ans.append(i - j + 1)\n                j = i + 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last = {c: i for i, c in enumerate(s)}\n        mx = j = 0\n        ans = []\n        for i, c in enumerate(s):\n            mx = max(mx, last[c])\n            if mx == i:\n                ans.append(i - j + 1)\n                j = i + 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.partitionLabels(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.partitionLabels(s) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.partitionLabels('{s}') == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.partitionLabels('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.partitionLabels('j') == [1]\nassert solution.partitionLabels('udk') == [1, 1, 1]\nassert solution.partitionLabels('zn') == [1, 1]\nassert solution.partitionLabels('psukaoqvdg') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('idxmtun') == [1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('tsxowr') == [1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('xu') == [1, 1]\nassert solution.partitionLabels('w') == [1]\nassert solution.partitionLabels('y') == [1]\nassert solution.partitionLabels('ioevkmyp') == [1, 1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('d') == [1]\nassert solution.partitionLabels('ov') == [1, 1]\nassert solution.partitionLabels('ftmgjmln') == [1, 1, 4, 1, 1]\nassert solution.partitionLabels('qkr') == [1, 1, 1]\nassert solution.partitionLabels('i') == [1]\nassert solution.partitionLabels('raiyjo') == [1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('ge') == [1, 1]\nassert solution.partitionLabels('oics') == [1, 1, 1, 1]\nassert solution.partitionLabels('fxrpgztd') == [1, 1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('qjkjubbcyw') == [1, 3, 1, 2, 1, 1, 1]\nassert solution.partitionLabels('mfcucgl') == [1, 1, 3, 1, 1]\nassert solution.partitionLabels('w') == [1]\nassert solution.partitionLabels('yvdfr') == [1, 1, 1, 1, 1]\nassert solution.partitionLabels('pdk') == [1, 1, 1]\nassert solution.partitionLabels('e') == [1]\nassert solution.partitionLabels('nszlfxn') == [7]\nassert solution.partitionLabels('rgzrbtpg') == [8]\nassert solution.partitionLabels('wueo') == [1, 1, 1, 1]\nassert solution.partitionLabels('bcslzlis') == [1, 1, 6]\nassert solution.partitionLabels('bjahokprbd') == [9, 1]\nassert solution.partitionLabels('oqkoge') == [4, 1, 1]\nassert solution.partitionLabels('u') == [1]\nassert solution.partitionLabels('aptrotdu') == [1, 1, 4, 1, 1]\nassert solution.partitionLabels('dxdytduerh') == [6, 1, 1, 1, 1]\nassert solution.partitionLabels('qg') == [1, 1]\nassert solution.partitionLabels('mxcahduo') == [1, 1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('pdsmr') == [1, 1, 1, 1, 1]\nassert solution.partitionLabels('ilvcr') == [1, 1, 1, 1, 1]\nassert solution.partitionLabels('if') == [1, 1]\nassert solution.partitionLabels('s') == [1]\nassert solution.partitionLabels('oj') == [1, 1]\nassert solution.partitionLabels('qcp') == [1, 1, 1]\nassert solution.partitionLabels('ri') == [1, 1]\nassert solution.partitionLabels('nxiegfs') == [1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('k') == [1]\nassert solution.partitionLabels('xsgc') == [1, 1, 1, 1]\nassert solution.partitionLabels('cka') == [1, 1, 1]\nassert solution.partitionLabels('njnrb') == [3, 1, 1]\nassert solution.partitionLabels('cmtq') == [1, 1, 1, 1]\nassert solution.partitionLabels('joe') == [1, 1, 1]\nassert solution.partitionLabels('cvdha') == [1, 1, 1, 1, 1]\nassert solution.partitionLabels('dq') == [1, 1]\nassert solution.partitionLabels('yekku') == [1, 1, 2, 1]\nassert solution.partitionLabels('zzdlkx') == [2, 1, 1, 1, 1]\nassert solution.partitionLabels('iiidtbcrv') == [3, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('gva') == [1, 1, 1]\nassert solution.partitionLabels('dhigru') == [1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('ivbvwdkl') == [1, 3, 1, 1, 1, 1]\nassert solution.partitionLabels('fb') == [1, 1]\nassert solution.partitionLabels('dtu') == [1, 1, 1]\nassert solution.partitionLabels('wlvhxm') == [1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('tmznfswmd') == [1, 7, 1]\nassert solution.partitionLabels('wtunakpm') == [1, 1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('yqmhixd') == [1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('rzfltikb') == [1, 1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('tlzyzcpx') == [1, 1, 3, 1, 1, 1]\nassert solution.partitionLabels('vk') == [1, 1]\nassert solution.partitionLabels('ygfpst') == [1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('kpj') == [1, 1, 1]\nassert solution.partitionLabels('mawis') == [1, 1, 1, 1, 1]\nassert solution.partitionLabels('wvuk') == [1, 1, 1, 1]\nassert solution.partitionLabels('xu') == [1, 1]\nassert solution.partitionLabels('kdquyfw') == [1, 1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('fx') == [1, 1]\nassert solution.partitionLabels('rltjftcjn') == [1, 1, 6, 1]\nassert solution.partitionLabels('zrr') == [1, 2]\nassert solution.partitionLabels('us') == [1, 1]\nassert solution.partitionLabels('nmmgh') == [1, 2, 1, 1]\nassert solution.partitionLabels('p') == [1]\nassert solution.partitionLabels('vdbtw') == [1, 1, 1, 1, 1]\nassert solution.partitionLabels('plaiyxyk') == [1, 1, 1, 1, 3, 1]\nassert solution.partitionLabels('irdn') == [1, 1, 1, 1]\nassert solution.partitionLabels('g') == [1]\nassert solution.partitionLabels('yfqzjv') == [1, 1, 1, 1, 1, 1]\nassert solution.partitionLabels('etqbudirdk') == [1, 1, 1, 1, 1, 4, 1]\nassert solution.partitionLabels('gqlqnbmgmp') == [9, 1]\nassert solution.partitionLabels('tthr') == [2, 1, 1]\nassert solution.partitionLabels('tt') == [2]\nassert solution.partitionLabels('hlydjlacrs') == [1, 5, 1, 1, 1, 1]\nassert solution.partitionLabels('fiqvormmyj') == [1, 1, 1, 1, 1, 1, 2, 1, 1]\nassert solution.partitionLabels('wra') == [1, 1, 1]\nassert solution.partitionLabels('culvgxv') == [1, 1, 1, 4]\nassert solution.partitionLabels('hjlzysnsjd') == [1, 8, 1]\nassert solution.partitionLabels('ubree') == [1, 1, 1, 2]\nassert solution.partitionLabels('gtn') == [1, 1, 1]\nassert solution.partitionLabels('k') == [1]\nassert solution.partitionLabels('awvodhav') == [8]\nassert solution.partitionLabels('nzkfijfhc') == [1, 1, 1, 4, 1, 1]\nassert solution.partitionLabels('tqcx') == [1, 1, 1, 1]\nassert solution.partitionLabels('hnwflkeu') == [1, 1, 1, 1, 1, 1, 1, 1]",
  "inefficient_solution": "class Solution:\n    def partitionLabels(self, s: str) -> List[int]:\n        last = {c: i for i, c in enumerate(s)}\n        mx = j = 0\n        ans = []\n        for i, c in enumerate(s):\n            mx = max(mx, last[c])\n            if mx == i:\n                part = list(s[j:i+1])\n                part = [x for x in part for _ in range(1000)]\n                ans.append(len(part))\n                j = i + 1\n        return ans",
  "is_python": true
}