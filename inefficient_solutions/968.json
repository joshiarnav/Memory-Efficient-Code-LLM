{
  "problem_idx": 968,
  "task_name": "Binary Tree Cameras",
  "markdown_description": "\nYou are given the `root` of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\n\n\nReturn *the minimum number of cameras needed to monitor all nodes of the tree*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0968.Binary%20Tree%20Cameras/images/bst_cameras_01.png)\n\n```\n\n**Input:** root = [0,0,null,0,0]\n**Output:** 1\n**Explanation:** One camera is enough to monitor all nodes if placed as shown.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0968.Binary%20Tree%20Cameras/images/bst_cameras_02.png)\n\n```\n\n**Input:** root = [0,0,null,0,null,0,null,null,0]\n**Output:** 2\n**Explanation:** At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 1000]`.\n* `Node.val == 0`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minCameraCover(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root is None:\n                return inf, 0, 0\n            la, lb, lc = dfs(root.left)\n            ra, rb, rc = dfs(root.right)\n            a = min(la, lb, lc) + min(ra, rb, rc) + 1\n            b = min(la + rb, lb + ra, la + ra)\n            c = lb + rb\n            return a, b, c\n\n        a, b, _ = dfs(root)\n        return min(a, b)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minCameraCover(self, root):\n        def dfs(root):\n            if root is None:\n                return float('inf'), 0, 0\n            la, lb, lc = dfs(root.left)\n            ra, rb, rc = dfs(root.right)\n            a = min(la, lb, lc) + min(ra, rb, rc) + 1\n            b = min(la + rb, lb + ra, la + ra)\n            c = lb + rb\n            return a, b, c\n\n        a, b, _ = dfs(root)\n        return min(a, b)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a binary tree\n    root = generate_binary_tree()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCameraCover(root)\n\n    return root, expected_result\n\ndef generate_binary_tree():\n    # Helper function to create a binary tree node\n    class TreeNode:\n        def __init__(self, val=0, left=None, right=None):\n            self.val = val\n            self.left = left\n            self.right = right\n\n    # Generate random values for the nodes\n    values = random.choices(range(101), k=random.randint(1, 10))\n    \n    # Create the tree nodes\n    nodes = [TreeNode(val) for val in values]\n    \n    # Connect the nodes\n    for i in range(len(nodes)):\n        if 2*i + 1 < len(nodes):\n            nodes[i].left = nodes[2*i + 1]\n        if 2*i + 2 < len(nodes):\n            nodes[i].right = nodes[2*i + 2]\n\n    return nodes[0]\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCameraCover(root) == expected_result\n        print(f\"assert solution.minCameraCover({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCameraCover({root}) == {expected_result}\")\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a455a610>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4580f50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4580e90>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581010>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a455aa10>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581110>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45234d0>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581250>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581050>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581410>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581310>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45814d0>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45813d0>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581610>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581710>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45817d0>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581890>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581a50>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581b90>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581a90>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581b50>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581f50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581d50>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582150>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581d10>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582210>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582490>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45820d0>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45826d0>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45822d0>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582790>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582590>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582910>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582890>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582550>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45828d0>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582c50>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582f50>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582d10>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582f90>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583250>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583190>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583390>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583290>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583690>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582e50>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583850>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583510>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583a50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583650>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583990>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583c90>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583b90>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583d50>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583f10>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a46b3e50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a455aa50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583f50>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583f90>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583fd0>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583550>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583b10>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583690>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583510>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583410>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583390>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45831d0>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583c90>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582d10>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583710>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583190>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582f50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582f90>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4583250>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582550>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582b10>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582110>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582950>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45822d0>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582c50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582790>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45828d0>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582310>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582210>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45820d0>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581e90>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4582290>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581f90>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581d50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581b50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581d90>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45826d0>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581ad0>) == 2\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581a50>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581b90>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581590>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581810>) == 3\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581490>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a45814d0>) == 1\nassert solution.minCameraCover(<__main__.generate_binary_tree.<locals>.TreeNode object at 0x7f29a4581a90>) == 2",
  "inefficient_solution": "",
  "is_python": true
}