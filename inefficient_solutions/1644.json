{
  "problem_idx": 1644,
  "task_name": "Lowest Common Ancestor of a Binary Tree II",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the lowest common ancestor (LCA) of two given nodes,* `p` *and* `q`. If either node `p` or `q` **does not exist** in the tree, return `null`. All values of the nodes in the tree are **unique**.\n\n\nAccording to the **[definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor)**: \"The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has both `p` and `q` as **descendants** (where we allow **a node to be a descendant of itself**)\". A **descendant** of a node `x` is a node `y` that is on the path from node `x` to some leaf node.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1644.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Tree%20II/images/binarytree.png)\n\n```\n\n**Input:** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n**Output:** 3\n**Explanation:** The LCA of nodes 5 and 1 is 3.\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1644.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Tree%20II/images/binarytree.png)\n\n\n\n```\n\n**Input:** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n**Output:** 5\n**Explanation:** The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA.\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1644.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Tree%20II/images/binarytree.png)\n\n\n\n```\n\n**Input:** root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10\n**Output:** null\n**Explanation:** Node 10 does not exist in the tree, so return null.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 104]`.\n* `-109 <= Node.val <= 109`\n* All `Node.val` are **unique**.\n* `p != q`\n\n\n\u00a0\n\n\n**Follow up:**\u00a0Can you find the LCA traversing the tree, without checking nodes existence?\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def lowestCommonAncestor(\n        self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode'\n    ) -> 'TreeNode':\n        def dfs(root, p, q):\n            if root is None:\n                return False\n            l = dfs(root.left, p, q)\n            r = dfs(root.right, p, q)\n            nonlocal ans\n            if l and r:\n                ans = root\n            if (l or r) and (root.val == p.val or root.val == q.val):\n                ans = root\n            return l or r or root.val == p.val or root.val == q.val\n\n        ans = None\n        dfs(root, p, q)\n        return ans\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a binary tree with unique values\n    root = generate_binary_tree()\n\n    # Generate random nodes p and q\n    p = generate_random_node(root)\n    q = generate_random_node(root)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lowestCommonAncestor(root, p, q)\n\n    return root, p, q, expected_result\n\n\ndef generate_binary_tree():\n    num_nodes = random.randint(1, 10)\n    values = random.sample(range(-10**9, 10**9 + 1), num_nodes)\n\n    nodes = []\n    for value in values:\n        nodes.append(TreeNode(value))\n\n    for i in range(num_nodes // 2):\n        nodes[i].left = nodes[2 * i + 1]\n        if 2 * i + 2 < num_nodes:\n            nodes[i].right = nodes[2 * i + 2]\n\n    return nodes[0]\n\n\ndef generate_random_node(root):\n    nodes = []\n\n    def inorder_traversal(node):\n        if node is None:\n            return\n        inorder_traversal(node.left)\n        nodes.append(node)\n        inorder_traversal(node.right)\n\n    inorder_traversal(root)\n    return random.choice(nodes)\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, p, q, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lowestCommonAncestor(root, p, q) == expected_result\n        if expected_result is not None:\n            print(f\"assert solution.lowestCommonAncestor(root, {p}, {q}) == {expected_result}\")\n            test_case_generator_results.append(\n                f\"assert solution.lowestCommonAncestor(root, {p}, {q}) == {expected_result}\"\n            )\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f06623195d0>, <__main__.TreeNode object at 0x7f0662319510>) == <__main__.TreeNode object at 0x7f0662319510>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f06623194d0>, <__main__.TreeNode object at 0x7f0662319490>) == <__main__.TreeNode object at 0x7f06622bb8d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319590>, <__main__.TreeNode object at 0x7f0662319710>) == <__main__.TreeNode object at 0x7f0662319710>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319690>, <__main__.TreeNode object at 0x7f0662319750>) == <__main__.TreeNode object at 0x7f0662319750>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319c90>, <__main__.TreeNode object at 0x7f0662319b50>) == <__main__.TreeNode object at 0x7f0662319b50>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231a1d0>, <__main__.TreeNode object at 0x7f066231a290>) == <__main__.TreeNode object at 0x7f066231a1d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231a750>, <__main__.TreeNode object at 0x7f066231a5d0>) == <__main__.TreeNode object at 0x7f066231a5d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231ac50>, <__main__.TreeNode object at 0x7f066231ab90>) == <__main__.TreeNode object at 0x7f066231ab90>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231b190>, <__main__.TreeNode object at 0x7f066231b050>) == <__main__.TreeNode object at 0x7f066231b050>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231b250>, <__main__.TreeNode object at 0x7f066231b390>) == <__main__.TreeNode object at 0x7f066231b250>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231b690>, <__main__.TreeNode object at 0x7f066231b590>) == <__main__.TreeNode object at 0x7f066231b590>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231bb90>, <__main__.TreeNode object at 0x7f066231b9d0>) == <__main__.TreeNode object at 0x7f066231b9d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231be10>, <__main__.TreeNode object at 0x7f066231bf50>) == <__main__.TreeNode object at 0x7f066231be10>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662324190>, <__main__.TreeNode object at 0x7f0662324250>) == <__main__.TreeNode object at 0x7f0662324190>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662324510>, <__main__.TreeNode object at 0x7f0662324410>) == <__main__.TreeNode object at 0x7f0662324410>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662324690>, <__main__.TreeNode object at 0x7f0662324750>) == <__main__.TreeNode object at 0x7f0662324690>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662324a90>, <__main__.TreeNode object at 0x7f0662324bd0>) == <__main__.TreeNode object at 0x7f06623249d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325210>, <__main__.TreeNode object at 0x7f0662325190>) == <__main__.TreeNode object at 0x7f0662325010>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325690>, <__main__.TreeNode object at 0x7f0662325410>) == <__main__.TreeNode object at 0x7f0662325410>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325950>, <__main__.TreeNode object at 0x7f0662325a50>) == <__main__.TreeNode object at 0x7f0662325950>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325dd0>, <__main__.TreeNode object at 0x7f0662325d50>) == <__main__.TreeNode object at 0x7f0662325b90>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325f90>, <__main__.TreeNode object at 0x7f0662326090>) == <__main__.TreeNode object at 0x7f0662325f90>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326450>, <__main__.TreeNode object at 0x7f0662326390>) == <__main__.TreeNode object at 0x7f0662326210>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326990>, <__main__.TreeNode object at 0x7f0662326a50>) == <__main__.TreeNode object at 0x7f06623267d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326d50>, <__main__.TreeNode object at 0x7f0662326e50>) == <__main__.TreeNode object at 0x7f0662326d50>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231be10>, <__main__.TreeNode object at 0x7f06622eee50>) == <__main__.TreeNode object at 0x7f06622bb8d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231b810>, <__main__.TreeNode object at 0x7f066231b6d0>) == <__main__.TreeNode object at 0x7f066231b8d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231b690>, <__main__.TreeNode object at 0x7f066231b310>) == <__main__.TreeNode object at 0x7f066231b710>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231b150>, <__main__.TreeNode object at 0x7f066231b390>) == <__main__.TreeNode object at 0x7f066231b390>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231a5d0>, <__main__.TreeNode object at 0x7f066231a8d0>) == <__main__.TreeNode object at 0x7f066231ae10>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231a890>, <__main__.TreeNode object at 0x7f066231a750>) == <__main__.TreeNode object at 0x7f066231a850>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231a490>, <__main__.TreeNode object at 0x7f066231a3d0>) == <__main__.TreeNode object at 0x7f066231a490>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319fd0>, <__main__.TreeNode object at 0x7f066231a110>) == <__main__.TreeNode object at 0x7f066231a290>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319cd0>, <__main__.TreeNode object at 0x7f0662319f90>) == <__main__.TreeNode object at 0x7f0662319f90>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319c10>, <__main__.TreeNode object at 0x7f0662319450>) == <__main__.TreeNode object at 0x7f0662319bd0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319410>, <__main__.TreeNode object at 0x7f0662319610>) == <__main__.TreeNode object at 0x7f06623193d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319810>, <__main__.TreeNode object at 0x7f06623195d0>) == <__main__.TreeNode object at 0x7f0662319310>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319350>, <__main__.TreeNode object at 0x7f0662319490>) == <__main__.TreeNode object at 0x7f0662319490>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326d10>, <__main__.TreeNode object at 0x7f0662326950>) == <__main__.TreeNode object at 0x7f0662326d10>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326910>, <__main__.TreeNode object at 0x7f0662326a50>) == <__main__.TreeNode object at 0x7f0662326990>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326210>, <__main__.TreeNode object at 0x7f0662326410>) == <__main__.TreeNode object at 0x7f0662326610>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326490>, <__main__.TreeNode object at 0x7f0662326310>) == <__main__.TreeNode object at 0x7f0662326310>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f06623260d0>, <__main__.TreeNode object at 0x7f0662326090>) == <__main__.TreeNode object at 0x7f06623260d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325c90>, <__main__.TreeNode object at 0x7f0662325e90>) == <__main__.TreeNode object at 0x7f0662325e90>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325a50>, <__main__.TreeNode object at 0x7f0662325a90>) == <__main__.TreeNode object at 0x7f0662325990>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325710>, <__main__.TreeNode object at 0x7f06623255d0>) == <__main__.TreeNode object at 0x7f06623256d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325290>, <__main__.TreeNode object at 0x7f0662324f50>) == <__main__.TreeNode object at 0x7f0662325290>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662324b90>, <__main__.TreeNode object at 0x7f06623249d0>) == <__main__.TreeNode object at 0x7f0662324ed0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662324550>, <__main__.TreeNode object at 0x7f0662324790>) == <__main__.TreeNode object at 0x7f0662324b10>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327050>, <__main__.TreeNode object at 0x7f06623271d0>) == <__main__.TreeNode object at 0x7f06623240d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327550>, <__main__.TreeNode object at 0x7f0662327590>) == <__main__.TreeNode object at 0x7f0662327450>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f06623278d0>, <__main__.TreeNode object at 0x7f0662327810>) == <__main__.TreeNode object at 0x7f0662327690>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327d50>, <__main__.TreeNode object at 0x7f0662327d10>) == <__main__.TreeNode object at 0x7f0662327a50>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327f90>, <__main__.TreeNode object at 0x7f0662334050>) == <__main__.TreeNode object at 0x7f0662327e50>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327bd0>, <__main__.TreeNode object at 0x7f0662327d10>) == <__main__.TreeNode object at 0x7f0662327bd0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327810>, <__main__.TreeNode object at 0x7f0662327850>) == <__main__.TreeNode object at 0x7f0662327c90>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327450>, <__main__.TreeNode object at 0x7f0662327910>) == <__main__.TreeNode object at 0x7f06623277d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f06623272d0>, <__main__.TreeNode object at 0x7f06623274d0>) == <__main__.TreeNode object at 0x7f0662327410>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327510>, <__main__.TreeNode object at 0x7f0662327550>) == <__main__.TreeNode object at 0x7f0662327550>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662327210>, <__main__.TreeNode object at 0x7f0662327190>) == <__main__.TreeNode object at 0x7f0662327210>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662324550>, <__main__.TreeNode object at 0x7f0662324790>) == <__main__.TreeNode object at 0x7f0662324550>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325190>, <__main__.TreeNode object at 0x7f0662325210>) == <__main__.TreeNode object at 0x7f0662325290>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325250>, <__main__.TreeNode object at 0x7f06623255d0>) == <__main__.TreeNode object at 0x7f0662325250>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325dd0>, <__main__.TreeNode object at 0x7f0662325d50>) == <__main__.TreeNode object at 0x7f0662325dd0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662325cd0>, <__main__.TreeNode object at 0x7f06623260d0>) == <__main__.TreeNode object at 0x7f0662325cd0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326390>, <__main__.TreeNode object at 0x7f0662325b90>) == <__main__.TreeNode object at 0x7f0662325b90>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326210>, <__main__.TreeNode object at 0x7f0662326410>) == <__main__.TreeNode object at 0x7f0662326210>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326a10>, <__main__.TreeNode object at 0x7f0662326910>) == <__main__.TreeNode object at 0x7f0662326a10>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662326a90>, <__main__.TreeNode object at 0x7f0662326f90>) == <__main__.TreeNode object at 0x7f06623269d0>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f06622eee50>, <__main__.TreeNode object at 0x7f0662319310>) == <__main__.TreeNode object at 0x7f0662326e50>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319550>, <__main__.TreeNode object at 0x7f0662319810>) == <__main__.TreeNode object at 0x7f0662319590>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f0662319c50>, <__main__.TreeNode object at 0x7f0662319690>) == <__main__.TreeNode object at 0x7f0662319610>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231a010>, <__main__.TreeNode object at 0x7f0662319cd0>) == <__main__.TreeNode object at 0x7f066231a010>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231a110>, <__main__.TreeNode object at 0x7f066231a3d0>) == <__main__.TreeNode object at 0x7f066231a290>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231a7d0>, <__main__.TreeNode object at 0x7f066231a710>) == <__main__.TreeNode object at 0x7f066231a710>\nassert solution.lowestCommonAncestor(root, <__main__.TreeNode object at 0x7f066231aa10>, <__main__.TreeNode object at 0x7f066231b390>) == <__main__.TreeNode object at 0x7f066231aa10>",
  "inefficient_solution": "class Solution:\n    def lowestCommonAncestor(\n        self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode'\n    ) -> 'TreeNode':\n        nodes = []\n        def dfs(root, p, q):\n            if root is None:\n                return\n            nodes.append(root)\n            l = dfs(root.left, p, q)\n            r = dfs(root.right, p, q)\n            return l or r\n        dfs(root, p, q)\n        nodes = [node for node in nodes if node.val == p.val or node.val == q.val]\n        if not nodes:\n            return None\n        nodes = [node for node in nodes if dfs(node.left, p, q) or dfs(node.right, p, q)]\n        if not nodes:\n            return None\n        return nodes[0]\n\n        # Another way to create an array of all nodes\n        def dfs2(root):\n            if root is None:\n                return\n            nodes.append(root)\n            dfs2(root.left)\n            dfs2(root.right)\n        nodes = []\n        dfs2(root)\n        nodes = [node for node in nodes if node.val == p.val or node.val == q.val]\n        if not nodes:\n            return None\n        nodes = [node for node in nodes if dfs(node.left, p, q) or dfs(node.right, p, q)]\n        if not nodes:\n            return None\n        return nodes[0]",
  "is_python": true
}