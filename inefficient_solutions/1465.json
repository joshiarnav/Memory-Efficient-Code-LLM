{
  "problem_idx": 1465,
  "task_name": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
  "markdown_description": "\nYou are given a rectangular cake of size `h x w` and two arrays of integers `horizontalCuts` and `verticalCuts` where:\n\n\n* `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, and\n* `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut.\n\n\nReturn *the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays* `horizontalCuts` *and* `verticalCuts`. Since the answer can be a large number, return this **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1465.Maximum%20Area%20of%20a%20Piece%20of%20Cake%20After%20Horizontal%20and%20Vertical%20Cuts/images/leetcode_max_area_2.png)\n\n```\n\n**Input:** h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]\n**Output:** 4 \n**Explanation:** The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1465.Maximum%20Area%20of%20a%20Piece%20of%20Cake%20After%20Horizontal%20and%20Vertical%20Cuts/images/leetcode_max_area_3.png)\n\n```\n\n**Input:** h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]\n**Output:** 6\n**Explanation:** The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]\n**Output:** 9\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= h, w <= 109`\n* `1 <= horizontalCuts.length <= min(h - 1, 105)`\n* `1 <= verticalCuts.length <= min(w - 1, 105)`\n* `1 <= horizontalCuts[i] < h`\n* `1 <= verticalCuts[i] < w`\n* All the elements in `horizontalCuts` are distinct.\n* All the elements in `verticalCuts` are distinct.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxArea(\n        self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]\n    ) -> int:\n        horizontalCuts.extend([0, h])\n        verticalCuts.extend([0, w])\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        x = max(b - a for a, b in pairwise(horizontalCuts))\n        y = max(b - a for a, b in pairwise(verticalCuts))\n        return (x * y) % (10**9 + 7)\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\nclass Solution:\n    def maxArea(\n        self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]\n    ) -> int:\n        horizontalCuts.extend([0, h])\n        verticalCuts.extend([0, w])\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        x = max(b - a for a, b in pairwise(horizontalCuts))\n        y = max(b - a for a, b in pairwise(verticalCuts))\n        return (x * y) % (10**9 + 7)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random h and w values\n    h = random.randint(2, 10)\n    w = random.randint(2, 10)\n    \n    # Generate random horizontalCuts list\n    horizontalCuts = random.sample(range(1, h), random.randint(1, min(h - 1, 10**5)))\n    horizontalCuts.sort()\n    \n    # Generate random verticalCuts list\n    verticalCuts = random.sample(range(1, w), random.randint(1, min(w - 1, 10**5)))\n    verticalCuts.sort()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxArea(h, w, horizontalCuts, verticalCuts)\n\n    return h, w, horizontalCuts, verticalCuts, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        h, w, horizontalCuts, verticalCuts, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxArea(h, w, horizontalCuts, verticalCuts) == expected_result\n        test_case_generator_results.append(f\"assert solution.maxArea({h}, {w}, {horizontalCuts}, {verticalCuts}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxArea(2, 9, [0, 0, 1, 2, 2], [0, 0, 1, 3, 4, 5, 7, 8, 9, 9]) == 2\nassert solution.maxArea(6, 7, [0, 0, 1, 2, 3, 5, 6, 6], [0, 0, 1, 2, 3, 4, 5, 6, 7, 7]) == 2\nassert solution.maxArea(4, 9, [0, 0, 1, 2, 3, 4, 4], [0, 0, 5, 7, 8, 9, 9]) == 5\nassert solution.maxArea(8, 2, [0, 0, 2, 3, 4, 8, 8], [0, 0, 1, 2, 2]) == 4\nassert solution.maxArea(5, 2, [0, 0, 1, 2, 3, 4, 5, 5], [0, 0, 1, 2, 2]) == 1\nassert solution.maxArea(8, 7, [0, 0, 3, 4, 5, 6, 7, 8, 8], [0, 0, 1, 2, 4, 5, 7, 7]) == 6\nassert solution.maxArea(6, 4, [0, 0, 3, 6, 6], [0, 0, 3, 4, 4]) == 9\nassert solution.maxArea(6, 8, [0, 0, 2, 5, 6, 6], [0, 0, 1, 2, 8, 8]) == 18\nassert solution.maxArea(4, 10, [0, 0, 2, 4, 4], [0, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 10]) == 4\nassert solution.maxArea(3, 6, [0, 0, 1, 2, 3, 3], [0, 0, 1, 3, 4, 6, 6]) == 2\nassert solution.maxArea(6, 3, [0, 0, 1, 2, 3, 4, 5, 6, 6], [0, 0, 1, 2, 3, 3]) == 1\nassert solution.maxArea(5, 4, [0, 0, 1, 2, 3, 5, 5], [0, 0, 1, 2, 3, 4, 4]) == 2\nassert solution.maxArea(9, 7, [0, 0, 2, 3, 5, 9, 9], [0, 0, 6, 7, 7]) == 24\nassert solution.maxArea(4, 8, [0, 0, 1, 3, 4, 4], [0, 0, 3, 4, 5, 6, 8, 8]) == 6\nassert solution.maxArea(6, 5, [0, 0, 2, 3, 5, 6, 6], [0, 0, 1, 2, 3, 5, 5]) == 4\nassert solution.maxArea(8, 9, [0, 0, 3, 4, 5, 8, 8], [0, 0, 1, 2, 4, 5, 7, 8, 9, 9]) == 6\nassert solution.maxArea(10, 8, [0, 0, 2, 4, 6, 7, 10, 10], [0, 0, 1, 2, 3, 4, 5, 7, 8, 8]) == 6\nassert solution.maxArea(7, 4, [0, 0, 3, 6, 7, 7], [0, 0, 1, 2, 4, 4]) == 6\nassert solution.maxArea(6, 7, [0, 0, 2, 3, 4, 5, 6, 6], [0, 0, 1, 3, 4, 6, 7, 7]) == 4\nassert solution.maxArea(3, 10, [0, 0, 1, 3, 3], [0, 0, 2, 4, 5, 7, 8, 9, 10, 10]) == 4\nassert solution.maxArea(7, 6, [0, 0, 4, 6, 7, 7], [0, 0, 1, 2, 3, 4, 6, 6]) == 8\nassert solution.maxArea(5, 5, [0, 0, 3, 5, 5], [0, 0, 1, 2, 5, 5]) == 9\nassert solution.maxArea(6, 2, [0, 0, 1, 4, 6, 6], [0, 0, 1, 2, 2]) == 3\nassert solution.maxArea(10, 2, [0, 0, 1, 2, 6, 10, 10], [0, 0, 1, 2, 2]) == 4\nassert solution.maxArea(8, 9, [0, 0, 2, 3, 4, 7, 8, 8], [0, 0, 2, 6, 7, 8, 9, 9]) == 12\nassert solution.maxArea(2, 3, [0, 0, 1, 2, 2], [0, 0, 1, 2, 3, 3]) == 1\nassert solution.maxArea(9, 9, [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [0, 0, 2, 9, 9]) == 7\nassert solution.maxArea(10, 7, [0, 0, 1, 2, 4, 5, 8, 10, 10], [0, 0, 2, 4, 5, 6, 7, 7]) == 6\nassert solution.maxArea(7, 3, [0, 0, 5, 7, 7], [0, 0, 1, 3, 3]) == 10\nassert solution.maxArea(10, 5, [0, 0, 1, 8, 9, 10, 10], [0, 0, 1, 2, 3, 4, 5, 5]) == 7\nassert solution.maxArea(4, 10, [0, 0, 1, 2, 3, 4, 4], [0, 0, 4, 9, 10, 10]) == 5\nassert solution.maxArea(4, 6, [0, 0, 2, 3, 4, 4], [0, 0, 2, 3, 5, 6, 6]) == 4\nassert solution.maxArea(3, 2, [0, 0, 1, 3, 3], [0, 0, 1, 2, 2]) == 2\nassert solution.maxArea(6, 4, [0, 0, 2, 4, 6, 6], [0, 0, 2, 3, 4, 4]) == 4\nassert solution.maxArea(7, 2, [0, 0, 3, 4, 7, 7], [0, 0, 1, 2, 2]) == 3\nassert solution.maxArea(4, 10, [0, 0, 1, 2, 3, 4, 4], [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 10]) == 2\nassert solution.maxArea(9, 10, [0, 0, 7, 9, 9], [0, 0, 1, 2, 3, 6, 8, 10, 10]) == 21\nassert solution.maxArea(3, 4, [0, 0, 1, 2, 3, 3], [0, 0, 1, 2, 3, 4, 4]) == 1\nassert solution.maxArea(5, 7, [0, 0, 1, 2, 4, 5, 5], [0, 0, 3, 7, 7]) == 8\nassert solution.maxArea(2, 8, [0, 0, 1, 2, 2], [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8]) == 1\nassert solution.maxArea(5, 5, [0, 0, 1, 2, 5, 5], [0, 0, 1, 2, 3, 4, 5, 5]) == 3\nassert solution.maxArea(5, 6, [0, 0, 2, 4, 5, 5], [0, 0, 1, 2, 3, 4, 5, 6, 6]) == 2\nassert solution.maxArea(6, 7, [0, 0, 2, 3, 4, 6, 6], [0, 0, 4, 5, 6, 7, 7]) == 8\nassert solution.maxArea(9, 10, [0, 0, 1, 2, 4, 5, 7, 8, 9, 9], [0, 0, 2, 3, 5, 6, 7, 8, 9, 10, 10]) == 4\nassert solution.maxArea(5, 5, [0, 0, 2, 5, 5], [0, 0, 1, 5, 5]) == 12\nassert solution.maxArea(8, 4, [0, 0, 4, 5, 6, 7, 8, 8], [0, 0, 1, 2, 4, 4]) == 8\nassert solution.maxArea(7, 7, [0, 0, 1, 2, 3, 4, 5, 6, 7, 7], [0, 0, 1, 2, 3, 4, 5, 6, 7, 7]) == 1\nassert solution.maxArea(6, 2, [0, 0, 1, 2, 3, 4, 5, 6, 6], [0, 0, 1, 2, 2]) == 1\nassert solution.maxArea(10, 10, [0, 0, 3, 5, 6, 7, 8, 9, 10, 10], [0, 0, 8, 10, 10]) == 24\nassert solution.maxArea(5, 8, [0, 0, 2, 4, 5, 5], [0, 0, 1, 8, 8]) == 14\nassert solution.maxArea(4, 5, [0, 0, 1, 3, 4, 4], [0, 0, 1, 5, 5]) == 8\nassert solution.maxArea(6, 4, [0, 0, 5, 6, 6], [0, 0, 1, 3, 4, 4]) == 10\nassert solution.maxArea(10, 9, [0, 0, 1, 3, 4, 5, 7, 9, 10, 10], [0, 0, 1, 4, 7, 8, 9, 9]) == 6\nassert solution.maxArea(10, 4, [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [0, 0, 2, 4, 4]) == 2\nassert solution.maxArea(10, 6, [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [0, 0, 1, 4, 6, 6]) == 3\nassert solution.maxArea(9, 9, [0, 0, 1, 2, 9, 9], [0, 0, 3, 7, 8, 9, 9]) == 28\nassert solution.maxArea(9, 6, [0, 0, 1, 2, 3, 5, 6, 7, 8, 9, 9], [0, 0, 1, 3, 4, 5, 6, 6]) == 4\nassert solution.maxArea(3, 9, [0, 0, 1, 3, 3], [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 2\nassert solution.maxArea(10, 9, [0, 0, 4, 7, 8, 10, 10], [0, 0, 1, 3, 4, 5, 6, 7, 8, 9, 9]) == 8\nassert solution.maxArea(9, 7, [0, 0, 1, 2, 3, 6, 7, 9, 9], [0, 0, 1, 4, 5, 7, 7]) == 9\nassert solution.maxArea(9, 10, [0, 0, 1, 2, 6, 7, 9, 9], [0, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 10]) == 8\nassert solution.maxArea(7, 6, [0, 0, 5, 7, 7], [0, 0, 1, 2, 3, 4, 5, 6, 6]) == 5\nassert solution.maxArea(2, 4, [0, 0, 1, 2, 2], [0, 0, 2, 3, 4, 4]) == 2\nassert solution.maxArea(7, 6, [0, 0, 2, 3, 5, 7, 7], [0, 0, 1, 2, 5, 6, 6]) == 6\nassert solution.maxArea(8, 2, [0, 0, 2, 3, 5, 6, 7, 8, 8], [0, 0, 1, 2, 2]) == 2\nassert solution.maxArea(10, 10, [0, 0, 1, 2, 4, 5, 6, 7, 9, 10, 10], [0, 0, 4, 10, 10]) == 12\nassert solution.maxArea(10, 5, [0, 0, 1, 3, 4, 8, 9, 10, 10], [0, 0, 1, 2, 3, 4, 5, 5]) == 4\nassert solution.maxArea(10, 5, [0, 0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 10], [0, 0, 1, 3, 4, 5, 5]) == 4\nassert solution.maxArea(7, 8, [0, 0, 1, 2, 3, 4, 5, 6, 7, 7], [0, 0, 1, 2, 3, 4, 6, 7, 8, 8]) == 2\nassert solution.maxArea(9, 9, [0, 0, 1, 2, 3, 5, 6, 7, 9, 9], [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 2\nassert solution.maxArea(8, 3, [0, 0, 1, 3, 6, 7, 8, 8], [0, 0, 1, 2, 3, 3]) == 3\nassert solution.maxArea(8, 10, [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8], [0, 0, 1, 4, 5, 6, 7, 8, 9, 10, 10]) == 3\nassert solution.maxArea(10, 4, [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [0, 0, 2, 4, 4]) == 2\nassert solution.maxArea(5, 5, [0, 0, 3, 5, 5], [0, 0, 2, 5, 5]) == 9\nassert solution.maxArea(5, 8, [0, 0, 1, 2, 3, 4, 5, 5], [0, 0, 1, 3, 6, 7, 8, 8]) == 3\nassert solution.maxArea(7, 3, [0, 0, 1, 7, 7], [0, 0, 1, 3, 3]) == 12\nassert solution.maxArea(9, 6, [0, 0, 6, 7, 8, 9, 9], [0, 0, 4, 5, 6, 6]) == 24\nassert solution.maxArea(7, 4, [0, 0, 1, 2, 3, 4, 6, 7, 7], [0, 0, 1, 2, 4, 4]) == 4\nassert solution.maxArea(4, 6, [0, 0, 1, 2, 3, 4, 4], [0, 0, 1, 2, 3, 4, 5, 6, 6]) == 1\nassert solution.maxArea(3, 4, [0, 0, 2, 3, 3], [0, 0, 1, 2, 3, 4, 4]) == 2\nassert solution.maxArea(9, 8, [0, 0, 2, 3, 4, 6, 7, 8, 9, 9], [0, 0, 1, 2, 3, 4, 5, 7, 8, 8]) == 4\nassert solution.maxArea(8, 10, [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8], [0, 0, 3, 4, 5, 6, 8, 9, 10, 10]) == 3\nassert solution.maxArea(8, 4, [0, 0, 1, 3, 4, 5, 7, 8, 8], [0, 0, 1, 2, 3, 4, 4]) == 2\nassert solution.maxArea(7, 5, [0, 0, 5, 7, 7], [0, 0, 1, 2, 3, 4, 5, 5]) == 5\nassert solution.maxArea(4, 8, [0, 0, 2, 4, 4], [0, 0, 1, 3, 5, 8, 8]) == 6\nassert solution.maxArea(3, 7, [0, 0, 1, 2, 3, 3], [0, 0, 2, 3, 7, 7]) == 4\nassert solution.maxArea(7, 5, [0, 0, 1, 3, 6, 7, 7], [0, 0, 2, 3, 4, 5, 5]) == 6\nassert solution.maxArea(5, 3, [0, 0, 2, 5, 5], [0, 0, 1, 2, 3, 3]) == 3\nassert solution.maxArea(5, 10, [0, 0, 1, 5, 5], [0, 0, 1, 2, 3, 5, 9, 10, 10]) == 16\nassert solution.maxArea(10, 6, [0, 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 10], [0, 0, 2, 3, 4, 5, 6, 6]) == 4\nassert solution.maxArea(5, 3, [0, 0, 3, 5, 5], [0, 0, 1, 2, 3, 3]) == 3\nassert solution.maxArea(2, 6, [0, 0, 1, 2, 2], [0, 0, 1, 3, 4, 5, 6, 6]) == 2\nassert solution.maxArea(8, 7, [0, 0, 1, 3, 5, 6, 7, 8, 8], [0, 0, 1, 2, 3, 4, 5, 6, 7, 7]) == 2\nassert solution.maxArea(8, 2, [0, 0, 3, 6, 7, 8, 8], [0, 0, 1, 2, 2]) == 3\nassert solution.maxArea(9, 6, [0, 0, 1, 4, 5, 8, 9, 9], [0, 0, 1, 2, 3, 4, 5, 6, 6]) == 3\nassert solution.maxArea(3, 7, [0, 0, 1, 2, 3, 3], [0, 0, 3, 4, 5, 7, 7]) == 3\nassert solution.maxArea(5, 3, [0, 0, 1, 3, 5, 5], [0, 0, 1, 2, 3, 3]) == 2\nassert solution.maxArea(10, 8, [0, 0, 8, 10, 10], [0, 0, 1, 5, 6, 7, 8, 8]) == 32\nassert solution.maxArea(3, 9, [0, 0, 2, 3, 3], [0, 0, 1, 2, 3, 4, 6, 7, 8, 9, 9]) == 4\nassert solution.maxArea(9, 5, [0, 0, 1, 2, 3, 8, 9, 9], [0, 0, 1, 2, 3, 4, 5, 5]) == 5",
  "inefficient_solution": "class Solution:\n    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        horizontalCuts.sort()\n        verticalCuts.sort()\n        \n        max_horizontal_gap = 0\n        for i in range(len(horizontalCuts) - 1):\n            max_horizontal_gap = max(max_horizontal_gap, horizontalCuts[i+1] - horizontalCuts[i])\n        \n        max_vertical_gap = 0\n        for i in range(len(verticalCuts) - 1):\n            max_vertical_gap = max(max_vertical_gap, verticalCuts[i+1] - verticalCuts[i])\n        \n        # Create a list to store the maximum height at each column\n        max_height_at_each_column = [0] * w\n        for i in range(w):\n            max_height_at_each_column[i] = max_horizontal_gap\n        \n        # Create a list to store the maximum width at each row\n        max_width_at_each_row = [0] * h\n        for i in range(h):\n            max_width_at_each_row[i] = max_vertical_gap\n        \n        # Simulate the cutting process\n        area = 0\n        for i in range(w):\n            for j in range(h):\n                area = max(area, max_height_at_each_column[i] * max_width_at_each_row[j])\n        \n        return area % (10**9 + 7)",
  "is_python": true
}