{
  "problem_idx": 2766,
  "task_name": "Relocate Marbles",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` representing the initial positions of some marbles. You are also given two **0-indexed** integer arrays `moveFrom` and `moveTo` of **equal** length.\n\n\nThroughout `moveFrom.length` steps, you will change the positions of the marbles. On the `ith` step, you will move **all** marbles at position `moveFrom[i]` to position `moveTo[i]`.\n\n\nAfter completing all the steps, return *the sorted list of **occupied** positions*.\n\n\n**Notes:**\n\n\n* We call a position **occupied** if there is at least one marble in that position.\n* There may be multiple marbles in a single position.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,6,7,8], moveFrom = [1,7,2], moveTo = [2,9,5]\n**Output:** [5,6,8,9]\n**Explanation:** Initially, the marbles are at positions 1,6,7,8.\nAt the i = 0th step, we move the marbles at position 1 to position 2. Then, positions 2,6,7,8 are occupied.\nAt the i = 1st step, we move the marbles at position 7 to position 9. Then, positions 2,6,8,9 are occupied.\nAt the i = 2nd step, we move the marbles at position 2 to position 5. Then, positions 5,6,8,9 are occupied.\nAt the end, the final positions containing at least one marbles are [5,6,8,9].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,3,3], moveFrom = [1,3], moveTo = [2,2]\n**Output:** [2]\n**Explanation:** Initially, the marbles are at positions [1,1,3,3].\nAt the i = 0th step, we move all the marbles at position 1 to position 2. Then, the marbles are at positions [2,2,3,3].\nAt the i = 1st step, we move all the marbles at position 3 to position 2. Then, the marbles are at positions [2,2,2,2].\nSince 2 is the only occupied position, we return [2].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= moveFrom.length <= 105`\n* `moveFrom.length == moveTo.length`\n* `1 <= nums[i], moveFrom[i], moveTo[i] <= 109`\n* The test cases are generated such that there is at least a marble in\u00a0`moveFrom[i]`\u00a0at the moment we want to apply\u00a0the `ith`\u00a0move.\n\n\n",
  "canonical_solution": "class Solution:\n    def relocateMarbles(\n        self, nums: List[int], moveFrom: List[int], moveTo: List[int]\n    ) -> List[int]:\n        pos = set(nums)\n        for f, t in zip(moveFrom, moveTo):\n            pos.remove(f)\n            pos.add(t)\n        return sorted(pos)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def relocateMarbles(\n        self, nums: List[int], moveFrom: List[int], moveTo: List[int]\n    ) -> List[int]:\n        pos = set(nums)\n        for f, t in zip(moveFrom, moveTo):\n            pos.remove(f)\n            pos.add(t)\n        return sorted(pos)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(1, 6))\n    moveFrom = random.sample(nums, random.randint(1, len(nums)))\n    moveTo = random.choices(range(1, 101), k=len(moveFrom))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.relocateMarbles(nums, moveFrom, moveTo)\n\n    return nums, moveFrom, moveTo, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, moveFrom, moveTo, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.relocateMarbles(nums, moveFrom, moveTo) == expected_result\n        print(f\"assert solution.relocateMarbles({nums}, {moveFrom}, {moveTo}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.relocateMarbles({nums}, {moveFrom}, {moveTo}) == {expected_result}\"\n        )\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.relocateMarbles([62, 91, 78, 96, 37, 98], [91, 62, 78], [52, 100, 8]) == [8, 37, 52, 96, 98, 100]\nassert solution.relocateMarbles([21], [21], [98]) == [98]\nassert solution.relocateMarbles([38, 15, 79, 47, 11], [11, 15], [32, 83]) == [32, 38, 47, 79, 83]\nassert solution.relocateMarbles([6, 97], [6], [25]) == [25, 97]\nassert solution.relocateMarbles([97], [97], [44]) == [44]\nassert solution.relocateMarbles([68, 15, 56, 82, 14], [68, 14], [56, 9]) == [9, 15, 56, 82]\nassert solution.relocateMarbles([25, 55], [25], [18]) == [18, 55]\nassert solution.relocateMarbles([66, 17, 63, 90, 69, 94], [90], [42]) == [17, 42, 63, 66, 69, 94]\nassert solution.relocateMarbles([63, 14, 94], [63, 14, 94], [65, 26, 65]) == [26, 65]\nassert solution.relocateMarbles([8, 66, 98, 41, 22], [8, 98], [85, 91]) == [22, 41, 66, 85, 91]\nassert solution.relocateMarbles([95, 38, 39, 87], [38, 39, 87], [97, 80, 53]) == [53, 80, 95, 97]\nassert solution.relocateMarbles([58, 37, 40, 72, 8], [8, 37, 40, 58], [100, 78, 81, 54]) == [54, 72, 78, 81, 100]\nassert solution.relocateMarbles([85, 44, 49], [85, 44], [17, 13]) == [13, 17, 49]\nassert solution.relocateMarbles([95, 20, 1, 8], [8, 95], [29, 92]) == [1, 20, 29, 92]\nassert solution.relocateMarbles([3], [3], [52]) == [52]\nassert solution.relocateMarbles([58, 93, 37, 17, 49], [17, 58, 49, 37], [25, 90, 42, 47]) == [25, 42, 47, 90, 93]\nassert solution.relocateMarbles([68, 2], [2], [75]) == [68, 75]\nassert solution.relocateMarbles([83, 9], [83, 9], [23, 8]) == [8, 23]\nassert solution.relocateMarbles([63, 52, 41, 23, 99], [63], [86]) == [23, 41, 52, 86, 99]\nassert solution.relocateMarbles([17, 39, 6, 77], [17, 39, 6, 77], [13, 59, 17, 14]) == [13, 14, 17, 59]\nassert solution.relocateMarbles([23, 67, 95, 71, 25, 2], [2], [48]) == [23, 25, 48, 67, 71, 95]\nassert solution.relocateMarbles([35, 84], [84, 35], [84, 3]) == [3, 84]\nassert solution.relocateMarbles([8, 78, 92, 69, 95], [92, 69, 78], [89, 57, 76]) == [8, 57, 76, 89, 95]\nassert solution.relocateMarbles([70, 26, 14, 78, 49], [49, 14], [60, 12]) == [12, 26, 60, 70, 78]\nassert solution.relocateMarbles([2], [2], [95]) == [95]\nassert solution.relocateMarbles([3, 59, 57, 91], [91, 57, 3, 59], [44, 30, 10, 85]) == [10, 30, 44, 85]\nassert solution.relocateMarbles([99], [99], [9]) == [9]\nassert solution.relocateMarbles([1, 91, 62, 87], [87, 62, 1, 91], [81, 69, 27, 1]) == [1, 27, 69, 81]\nassert solution.relocateMarbles([96, 3, 35, 2], [96, 2, 35, 3], [96, 41, 2, 98]) == [2, 41, 96, 98]\nassert solution.relocateMarbles([66, 80, 25, 42, 69, 93], [66, 93], [36, 67]) == [25, 36, 42, 67, 69, 80]\nassert solution.relocateMarbles([79, 86, 29, 21, 80, 72], [21, 79, 29], [71, 57, 52]) == [52, 57, 71, 72, 80, 86]\nassert solution.relocateMarbles([100, 43, 19, 54], [19], [78]) == [43, 54, 78, 100]\nassert solution.relocateMarbles([79, 47, 25, 7], [47], [100]) == [7, 25, 79, 100]\nassert solution.relocateMarbles([16, 10, 17, 37, 53], [53], [99]) == [10, 16, 17, 37, 99]\nassert solution.relocateMarbles([82, 21, 20, 10], [21], [26]) == [10, 20, 26, 82]\nassert solution.relocateMarbles([14, 65, 97, 57, 94, 1], [57], [65]) == [1, 14, 65, 94, 97]\nassert solution.relocateMarbles([65, 22, 50, 11, 31], [22, 11, 31, 65], [16, 10, 38, 17]) == [10, 16, 17, 38, 50]\nassert solution.relocateMarbles([53], [53], [80]) == [80]\nassert solution.relocateMarbles([81, 52, 1, 90, 7, 47], [52, 90, 47, 1, 81, 7], [27, 21, 84, 13, 72, 95]) == [13, 21, 27, 72, 84, 95]\nassert solution.relocateMarbles([93, 54, 22], [93, 54, 22], [72, 93, 26]) == [26, 72, 93]\nassert solution.relocateMarbles([38, 78, 21, 95, 5, 52], [5, 38, 52, 21, 95], [97, 82, 25, 81, 20]) == [20, 25, 78, 81, 82, 97]\nassert solution.relocateMarbles([89, 93], [93, 89], [94, 97]) == [94, 97]\nassert solution.relocateMarbles([39, 70, 44, 48, 85], [70, 39, 44], [98, 35, 11]) == [11, 35, 48, 85, 98]\nassert solution.relocateMarbles([90, 39, 99, 1], [90, 39], [14, 3]) == [1, 3, 14, 99]\nassert solution.relocateMarbles([78, 75, 98], [75, 78, 98], [16, 48, 63]) == [16, 48, 63]\nassert solution.relocateMarbles([9, 67, 52, 84, 42], [67], [72]) == [9, 42, 52, 72, 84]\nassert solution.relocateMarbles([1, 15, 56], [15], [27]) == [1, 27, 56]\nassert solution.relocateMarbles([26], [26], [64]) == [64]\nassert solution.relocateMarbles([77, 71, 64, 37], [37, 71, 64], [44, 2, 13]) == [2, 13, 44, 77]\nassert solution.relocateMarbles([24, 68, 88, 30], [30, 24, 88, 68], [34, 41, 29, 24]) == [24, 29, 34, 41]\nassert solution.relocateMarbles([22, 4], [22, 4], [35, 98]) == [35, 98]\nassert solution.relocateMarbles([87, 31, 96, 77, 5, 12], [12, 31], [87, 20]) == [5, 20, 77, 87, 96]\nassert solution.relocateMarbles([52, 83, 50, 45], [52], [48]) == [45, 48, 50, 83]\nassert solution.relocateMarbles([13, 55, 97], [97, 55], [84, 6]) == [6, 13, 84]\nassert solution.relocateMarbles([3, 65, 14, 33, 20, 10], [3, 10, 65, 20], [42, 48, 61, 64]) == [14, 33, 42, 48, 61, 64]\nassert solution.relocateMarbles([63], [63], [26]) == [26]\nassert solution.relocateMarbles([63, 23, 29, 98], [63, 23, 29], [100, 89, 12]) == [12, 89, 98, 100]\nassert solution.relocateMarbles([71, 54, 70, 93, 11, 16], [70], [50]) == [11, 16, 50, 54, 71, 93]\nassert solution.relocateMarbles([58, 20, 7, 30, 39, 34], [34, 58, 7, 20], [95, 66, 84, 66]) == [30, 39, 66, 84, 95]\nassert solution.relocateMarbles([51, 82], [51, 82], [62, 56]) == [56, 62]\nassert solution.relocateMarbles([10, 82, 93], [93, 82], [14, 90]) == [10, 14, 90]\nassert solution.relocateMarbles([79], [79], [95]) == [95]\nassert solution.relocateMarbles([90, 49], [49], [25]) == [25, 90]\nassert solution.relocateMarbles([67], [67], [66]) == [66]\nassert solution.relocateMarbles([44, 34], [44], [73]) == [34, 73]\nassert solution.relocateMarbles([31, 16, 99], [31, 99], [10, 84]) == [10, 16, 84]\nassert solution.relocateMarbles([27, 79, 41, 82, 50, 61], [50, 82, 41], [1, 61, 61]) == [1, 27, 61, 79]\nassert solution.relocateMarbles([31, 47, 65, 73, 77, 69], [77, 73, 31, 69, 65, 47], [56, 46, 64, 5, 69, 59]) == [5, 46, 56, 59, 64, 69]\nassert solution.relocateMarbles([95, 93], [93, 95], [61, 9]) == [9, 61]\nassert solution.relocateMarbles([70, 54, 57, 20], [20], [72]) == [54, 57, 70, 72]\nassert solution.relocateMarbles([64], [64], [23]) == [23]\nassert solution.relocateMarbles([99, 27, 97, 58, 70], [99, 70, 27, 58], [22, 35, 80, 20]) == [20, 22, 35, 80, 97]\nassert solution.relocateMarbles([86], [86], [24]) == [24]\nassert solution.relocateMarbles([31, 64, 78, 24], [64, 24, 78, 31], [79, 29, 81, 78]) == [29, 78, 79, 81]\nassert solution.relocateMarbles([85, 20, 91, 70], [91, 70, 20], [85, 96, 6]) == [6, 85, 96]\nassert solution.relocateMarbles([42, 55, 94, 50, 19, 86], [94, 50, 55, 86, 42, 19], [31, 74, 18, 56, 97, 72]) == [18, 31, 56, 72, 74, 97]\nassert solution.relocateMarbles([95, 61, 58, 39, 72], [95, 58, 39, 72, 61], [14, 38, 15, 98, 54]) == [14, 15, 38, 54, 98]\nassert solution.relocateMarbles([85, 96], [96], [42]) == [42, 85]\nassert solution.relocateMarbles([5, 98], [5], [87]) == [87, 98]\nassert solution.relocateMarbles([95, 75], [75], [100]) == [95, 100]\nassert solution.relocateMarbles([58], [58], [95]) == [95]\nassert solution.relocateMarbles([13, 17, 91, 72], [17, 91, 13, 72], [42, 94, 65, 41]) == [41, 42, 65, 94]\nassert solution.relocateMarbles([65, 29, 11], [29], [69]) == [11, 65, 69]\nassert solution.relocateMarbles([39, 61, 96], [61, 39, 96], [86, 28, 100]) == [28, 86, 100]\nassert solution.relocateMarbles([19, 56, 7, 99], [7, 19, 56, 99], [30, 60, 62, 7]) == [7, 30, 60, 62]\nassert solution.relocateMarbles([9, 81, 39, 11], [39, 81, 11, 9], [57, 39, 17, 35]) == [17, 35, 39, 57]\nassert solution.relocateMarbles([41, 58, 82, 92, 10, 91], [92], [70]) == [10, 41, 58, 70, 82, 91]\nassert solution.relocateMarbles([71], [71], [19]) == [19]\nassert solution.relocateMarbles([67], [67], [2]) == [2]\nassert solution.relocateMarbles([43, 20], [20, 43], [46, 64]) == [46, 64]\nassert solution.relocateMarbles([11, 99, 52], [11, 52], [89, 32]) == [32, 89, 99]\nassert solution.relocateMarbles([87, 92, 71, 24, 18], [71, 92, 24, 87, 18], [23, 81, 75, 54, 95]) == [23, 54, 75, 81, 95]\nassert solution.relocateMarbles([24, 38, 55], [38, 24], [32, 20]) == [20, 32, 55]\nassert solution.relocateMarbles([12, 77, 75, 97], [97], [27]) == [12, 27, 75, 77]\nassert solution.relocateMarbles([54, 53, 42, 91], [54, 42, 91], [33, 3, 6]) == [3, 6, 33, 53]\nassert solution.relocateMarbles([49, 18, 62, 90, 85, 58], [85], [51]) == [18, 49, 51, 58, 62, 90]\nassert solution.relocateMarbles([26, 63, 75, 94], [63, 94], [59, 67]) == [26, 59, 67, 75]\nassert solution.relocateMarbles([7, 83, 37, 29, 53, 52], [53, 83], [18, 70]) == [7, 18, 29, 37, 52, 70]\nassert solution.relocateMarbles([100, 57], [100, 57], [29, 50]) == [29, 50]\nassert solution.relocateMarbles([88, 14], [14], [5]) == [5, 88]",
  "inefficient_solution": "class Solution:\n    def relocateMarbles(\n        self, nums: List[int], moveFrom: List[int], moveTo: List[int]\n    ) -> List[int]:\n        # Create a copy of nums and update it after each move\n        nums_copy = [x for x in nums]\n        for f, t in zip(moveFrom, moveTo):\n            for i in range(len(nums_copy)):\n                if nums_copy[i] == f:\n                    nums_copy[i] = t\n        # Create a list of unique elements in nums_copy\n        unique_nums = []\n        for num in nums_copy:\n            if num not in unique_nums:\n                unique_nums.append(num)\n        # Create a set to store the occupied positions\n        occupied_positions = set()\n        for num in unique_nums:\n            occupied_positions.add(num)\n        # Create a list to store the sorted occupied positions\n        sorted_occupied_positions = []\n        for num in occupied_positions:\n            sorted_occupied_positions.append(num)\n        # Sort the list of occupied positions\n        sorted_occupied_positions.sort()\n        return sorted_occupied_positions",
  "is_python": true
}