{
  "problem_idx": 2462,
  "task_name": "Total Cost to Hire K Workers",
  "markdown_description": "\nYou are given a **0-indexed** integer array `costs` where `costs[i]` is the cost of hiring the `ith` worker.\n\n\nYou are also given two integers `k` and `candidates`. We want to hire exactly `k` workers according to the following rules:\n\n\n* You will run `k` sessions and hire exactly one worker in each session.\n* In each hiring session, choose the worker with the lowest cost from either the first `candidates` workers or the last `candidates` workers. Break the tie by the smallest index.\n\t+ For example, if `costs = [3,2,7,7,1,2]` and `candidates = 2`, then in the first hiring session, we will choose the `4th` worker because they have the lowest cost `[3,2,7,7,**1**,2]`.\n\t+ In the second hiring session, we will choose `1st` worker because they have the same lowest cost as `4th` worker but they have the smallest index `[3,**2**,7,7,2]`. Please note that the indexing may be changed in the process.\n* If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\n* A worker can only be chosen once.\n\n\nReturn *the total cost to hire exactly* `k` *workers.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\n**Output:** 11\n**Explanation:** We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.\n- In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.\n- In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** costs = [1,2,4,1], k = 3, candidates = 3\n**Output:** 4\n**Explanation:** We hire 3 workers in total. The total cost is initially 0.\n- In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.\n- In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.\n- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= costs.length <= 105`\n* `1 <= costs[i] <= 105`\n* `1 <= k, candidates <= costs.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        q = []\n        n = len(costs)\n        i, j = candidates - 1, n - candidates\n        for h in range(candidates):\n            q.append((costs[h], h))\n        for h in range(n - candidates, n):\n            if h > i:\n                q.append((costs[h], h))\n        heapify(q)\n        ans = 0\n        for _ in range(k):\n            c, x = heappop(q)\n            ans += c\n            if x <= i:\n                i += 1\n                if i < j:\n                    heappush(q, (costs[i], i))\n            if x >= j:\n                j -= 1\n                if i < j:\n                    heappush(q, (costs[j], j))\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        q = []\n        n = len(costs)\n        i, j = candidates - 1, n - candidates\n        for h in range(candidates):\n            q.append((costs[h], h))\n        for h in range(n - candidates, n):\n            if h > i:\n                q.append((costs[h], h))\n        heapify(q)\n        ans = 0\n        for _ in range(k):\n            c, x = heappop(q)\n            ans += c\n            if x <= i:\n                i += 1\n                if i < j:\n                    heappush(q, (costs[i], i))\n            if x >= j:\n                j -= 1\n                if i < j:\n                    heappush(q, (costs[j], j))\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random costs list\n    costs = random.sample(range(1, 100001), random.randint(2, 10))\n    \n    # Generate random k and candidates\n    k = random.randint(1, len(costs))\n    candidates = random.randint(1, len(costs))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.totalCost(costs, k, candidates)\n\n    return costs, k, candidates, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        costs, k, candidates, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.totalCost(costs, k, candidates) == expected_result\n        print(f\"assert solution.totalCost({costs}, {k}, {candidates}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.totalCost({costs}, {k}, {candidates}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.totalCost([61538, 5624, 93247, 84291, 92632, 57983, 49509, 97610], 7, 4) == 444824\nassert solution.totalCost([21302, 99412, 56925, 49533, 41684, 14804, 13966, 63368, 2132], 8, 9) == 263714\nassert solution.totalCost([7082, 66231, 63216], 2, 2) == 70298\nassert solution.totalCost([77363, 35868, 88741, 24409, 82702, 23733, 41081, 65776, 22182, 67078], 2, 2) == 58050\nassert solution.totalCost([77995, 23957, 31100, 94010, 56497, 51198, 11420, 93657], 7, 3) == 345824\nassert solution.totalCost([74894, 30546, 50253, 21127, 31212, 71531, 13078, 14787], 3, 5) == 48992\nassert solution.totalCost([28905, 51500, 66761, 66313, 88741, 67256, 4393, 61351, 15355], 3, 6) == 48653\nassert solution.totalCost([12683, 38304, 56545, 55522, 27343], 5, 3) == 190397\nassert solution.totalCost([30047, 77814, 78928, 49165, 9657, 87997, 10990], 7, 4) == 344598\nassert solution.totalCost([69722, 23296, 20358, 32702, 11439, 2623, 73819], 7, 6) == 233959\nassert solution.totalCost([39711, 61250, 26330, 34964, 15986, 38772, 24934], 4, 5) == 102214\nassert solution.totalCost([34721, 79619, 61075, 22820, 96412, 55275, 67922], 6, 3) == 321432\nassert solution.totalCost([93424, 2934, 90968, 173, 61834, 45522, 200, 68885, 77460], 3, 9) == 3307\nassert solution.totalCost([69360, 61245, 52655, 40958, 60745, 70901, 8433, 55416, 95417, 20740], 6, 3) == 238947\nassert solution.totalCost([57464, 54827, 67382, 8900, 48558, 5836, 47489, 81270, 4819], 7, 3) == 227893\nassert solution.totalCost([5895, 13266, 36422, 32289, 35668], 2, 5) == 19161\nassert solution.totalCost([92341, 43698], 2, 2) == 136039\nassert solution.totalCost([75022, 24228, 72565], 1, 3) == 24228\nassert solution.totalCost([53548, 94725, 11880, 28022, 26791, 21509, 66619, 40434, 29111], 1, 4) == 11880\nassert solution.totalCost([84624, 80717], 1, 2) == 80717\nassert solution.totalCost([44663, 59263, 91252, 64453, 31217, 69755, 34117], 3, 5) == 109997\nassert solution.totalCost([34854, 94133, 75225, 25984, 38673, 18175, 49308], 6, 4) == 242219\nassert solution.totalCost([42347, 80288, 81964, 97329, 81084, 80132], 5, 1) == 365815\nassert solution.totalCost([34410, 37120, 52100, 74088], 4, 3) == 197718\nassert solution.totalCost([97693, 57359, 27027, 41253, 54279, 29275, 25793, 92787, 9982], 5, 4) == 133330\nassert solution.totalCost([76558, 80372, 37867, 64354, 84126, 14591, 64079], 1, 1) == 64079\nassert solution.totalCost([17290, 90754, 73081, 84005], 1, 3) == 17290\nassert solution.totalCost([23233, 770, 26330], 2, 2) == 24003\nassert solution.totalCost([95828, 20345, 39407, 66474, 38217, 35839, 45715, 44622, 92448, 49008], 3, 5) == 94401\nassert solution.totalCost([83227, 84695, 92510, 66444, 80696], 3, 2) == 230367\nassert solution.totalCost([82056, 33675, 88203, 13261, 61799, 99834, 83847, 2954, 2759, 84816], 2, 4) == 5713\nassert solution.totalCost([84601, 36845, 54399, 85370, 26133], 3, 5) == 117377\nassert solution.totalCost([93491, 25961, 34019, 79809], 1, 3) == 25961\nassert solution.totalCost([77554, 82201, 25356, 761, 11433, 84115, 86204, 4904], 2, 8) == 5665\nassert solution.totalCost([18004, 31909, 69786], 2, 2) == 49913\nassert solution.totalCost([97457, 42980, 38067, 56971, 5308], 3, 5) == 86355\nassert solution.totalCost([12264, 3705, 24057, 14401], 3, 4) == 30370\nassert solution.totalCost([31243, 63519, 69681, 19201, 62081, 73766, 43673, 72005, 17231, 19401], 5, 5) == 130749\nassert solution.totalCost([12134, 15097, 85334, 48674, 37504, 82445, 14153, 58982, 93169, 88308], 7, 9) == 268989\nassert solution.totalCost([91729, 78532, 82075, 6248, 25726, 24273, 12051, 67632, 24441], 1, 6) == 6248\nassert solution.totalCost([60763, 82866, 32831, 79059, 87349, 51696, 31171, 58007, 6353, 13502], 2, 9) == 19855\nassert solution.totalCost([95946, 53551], 2, 1) == 149497\nassert solution.totalCost([83294, 96085, 74192, 14874, 7264], 3, 2) == 96330\nassert solution.totalCost([17511, 16072, 14867, 68373], 3, 1) == 48450\nassert solution.totalCost([10003, 33497, 76573, 23924], 3, 2) == 67424\nassert solution.totalCost([78363, 52916, 49619, 38611, 81661, 36660, 10337, 60320, 29304], 5, 9) == 164531\nassert solution.totalCost([28039, 41210, 49760, 44594, 97109, 56782, 9341], 7, 5) == 326835\nassert solution.totalCost([18054, 69282, 57670], 1, 1) == 18054\nassert solution.totalCost([44399, 13338, 14547, 42225, 69686, 16021, 22696, 5541], 5, 3) == 72143\nassert solution.totalCost([61424, 35927, 78982], 1, 3) == 35927\nassert solution.totalCost([59099, 75049, 82627, 22703, 70352, 46979, 26639, 46521], 8, 1) == 429969\nassert solution.totalCost([61099, 15321, 19186], 1, 3) == 15321\nassert solution.totalCost([56745, 50393, 57057, 36436], 2, 2) == 86829\nassert solution.totalCost([42283, 50500, 99210, 16522], 4, 4) == 208515\nassert solution.totalCost([55835, 82585, 82017, 30706, 44417, 74331, 87700, 50840, 39507, 48692], 5, 5) == 214162\nassert solution.totalCost([7495, 78124, 1050, 22109, 11840, 5132, 19466, 40080, 43404, 78712], 7, 9) == 107172\nassert solution.totalCost([13626, 39479, 49607, 816, 16696, 22793], 3, 1) == 53115\nassert solution.totalCost([61851, 87648, 96038], 2, 3) == 149499\nassert solution.totalCost([26944, 89, 73562, 23799, 77603, 32792, 56375], 6, 2) == 213561\nassert solution.totalCost([70782, 31229, 8028, 71492, 9397, 88518], 4, 4) == 119436\nassert solution.totalCost([60729, 68479, 50335, 16377, 78160, 68715], 6, 5) == 342795\nassert solution.totalCost([13367, 34202, 96793, 12392, 60022], 4, 3) == 119983\nassert solution.totalCost([42204, 79989, 69516, 60153, 86627, 33968, 58072], 3, 1) == 134244\nassert solution.totalCost([14321, 89358, 7148, 47016, 62813, 45049, 71125], 2, 4) == 21469\nassert solution.totalCost([34747, 95521, 50974, 46006, 46577, 25141, 50660], 4, 6) == 152471\nassert solution.totalCost([69169, 53768, 6881, 68381, 63043, 42631], 3, 6) == 103280\nassert solution.totalCost([80979, 24740, 76942, 58339, 19679, 6599, 98628, 58153, 32671, 24623], 9, 2) == 382725\nassert solution.totalCost([45799, 30558], 1, 2) == 30558\nassert solution.totalCost([9610, 12792], 2, 1) == 22402\nassert solution.totalCost([15032, 57191, 92917, 15830, 82972, 82450, 44455, 38483], 2, 8) == 30862\nassert solution.totalCost([56062, 50653, 70025, 15178, 64660, 55505, 18347, 5435, 10263], 5, 7) == 99876\nassert solution.totalCost([1565, 91958, 60735, 64767, 70407, 44329], 4, 1) == 181068\nassert solution.totalCost([12540, 52658, 88194, 41998, 73084, 99447, 6043], 7, 4) == 373964\nassert solution.totalCost([77520, 91760, 18670, 47391, 45831], 4, 2) == 189412\nassert solution.totalCost([5786, 79997], 1, 2) == 5786\nassert solution.totalCost([54065, 97584, 23286, 74651, 37356], 4, 5) == 189358\nassert solution.totalCost([73842, 45262, 40676, 85884, 41553, 38213, 94242, 17486], 5, 1) == 263150\nassert solution.totalCost([27427, 97124, 64289, 20713, 59698, 42005, 55628, 99635, 75334], 6, 7) == 269760\nassert solution.totalCost([32023, 77428, 62926], 1, 2) == 32023\nassert solution.totalCost([23364, 68678, 60077, 8810, 90868, 64804, 69666, 16534, 76843], 4, 8) == 108785\nassert solution.totalCost([67610, 33423, 63148], 2, 3) == 96571\nassert solution.totalCost([83328, 56627, 68037, 37396, 34007, 30486], 6, 4) == 309881\nassert solution.totalCost([67886, 69255, 63542, 74345, 62474], 1, 1) == 62474\nassert solution.totalCost([18204, 10222, 66701, 56098, 46836, 42106, 17175, 77374, 48069], 6, 4) == 182612\nassert solution.totalCost([91818, 9235, 77072, 36815, 10136, 30052, 39924, 78426], 2, 5) == 19371\nassert solution.totalCost([77368, 33951, 98829, 92296, 58759, 45835, 11763, 75723], 8, 3) == 494524\nassert solution.totalCost([34322, 58432, 58059, 64375], 1, 2) == 34322\nassert solution.totalCost([52654, 30593, 40288, 54029, 40706, 29625], 5, 1) == 193866\nassert solution.totalCost([39818, 13803, 24529], 2, 2) == 38332\nassert solution.totalCost([16395, 36642, 29558, 97842, 56272, 68142], 5, 1) == 207009\nassert solution.totalCost([46296, 45087, 1080], 2, 2) == 46167\nassert solution.totalCost([77172, 44468, 95303, 55470, 17732], 1, 2) == 17732\nassert solution.totalCost([38726, 60424, 24443, 2449, 89888, 8822, 8199], 1, 6) == 2449\nassert solution.totalCost([50080, 67589, 97988, 26768, 67939, 39227, 31058, 28921, 55410, 55660], 6, 6) == 231464\nassert solution.totalCost([1931, 93743, 98814, 68753, 22984], 5, 5) == 286225\nassert solution.totalCost([90706, 35359, 36858, 35787, 94221, 2266, 8232, 98077, 26966], 8, 5) == 330395\nassert solution.totalCost([93723, 46666, 80445, 94784, 10345, 2402, 70186, 4777, 41187, 67789], 5, 5) == 105377\nassert solution.totalCost([71595, 6088, 53325, 73504, 82490, 40407, 16856, 30851, 25879, 67404], 2, 4) == 22944\nassert solution.totalCost([44721, 66476, 30565, 44873, 39445, 16738], 1, 2) == 16738\nassert solution.totalCost([65107, 82991], 1, 1) == 65107",
  "inefficient_solution": "class Solution:\n    def totalCost(self, costs, k, candidates):\n        n = len(costs)\n        workers = [0] * n\n        for i in range(candidates):\n            workers[i] = (costs[i], i)\n        for i in range(n - candidates, n):\n            workers[i] = (costs[i], i)\n        for i in range(n):\n            if i > candidates - 1:\n                workers[i] = (workers[i-candidates], 0)\n        for i in range(n):\n            if i > n - candidates:\n                workers[i] = (workers[i-candidates], 0)\n        ans = 0\n        for _ in range(k):\n            min_val = float('inf')\n            min_i = -1\n            for i in range(candidates, n - candidates):\n                if workers[i][0] < min_val:\n                    min_val = workers[i][0]\n                    min_i = workers[i][1]\n            ans += min_val\n            for i in range(candidates, n - candidates):\n                if workers[i][1] == min_i:\n                    workers[i] = (float('inf'), 0)\n            for i in range(candidates, n - candidates):\n                if i > 0:\n                    workers[i] = (workers[i-1][0], workers[i-1][1])\n        return ans",
  "is_python": true
}