{
  "problem_idx": 2484,
  "task_name": "Count Palindromic Subsequences",
  "markdown_description": "\nGiven a string of digits `s`, return *the number of **palindromic subsequences** of* `s` *having length* `5`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n**Note:**\n\n\n* A string is **palindromic** if it reads the same forward and backward.\n* A **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"103301\"\n**Output:** 2\n**Explanation:** \nThere are 6 possible subsequences of length 5: \"10330\",\"10331\",\"10301\",\"10301\",\"13301\",\"03301\". \nTwo of them (both equal to \"10301\") are palindromic.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"0000000\"\n**Output:** 21\n**Explanation:** All 21 subsequences are \"00000\", which is palindromic.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"9999900000\"\n**Output:** 2\n**Explanation:** The only two palindromic subsequences are \"99999\" and \"00000\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s` consists of digits.\n\n\n",
  "canonical_solution": "class Solution:\n    def countPalindromes(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        pre = [[[0] * 10 for _ in range(10)] for _ in range(n + 2)]\n        suf = [[[0] * 10 for _ in range(10)] for _ in range(n + 2)]\n        t = list(map(int, s))\n        c = [0] * 10\n        for i, v in enumerate(t, 1):\n            for j in range(10):\n                for k in range(10):\n                    pre[i][j][k] = pre[i - 1][j][k]\n            for j in range(10):\n                pre[i][j][v] += c[j]\n            c[v] += 1\n        c = [0] * 10\n        for i in range(n, 0, -1):\n            v = t[i - 1]\n            for j in range(10):\n                for k in range(10):\n                    suf[i][j][k] = suf[i + 1][j][k]\n            for j in range(10):\n                suf[i][j][v] += c[j]\n            c[v] += 1\n        ans = 0\n        for i in range(1, n + 1):\n            for j in range(10):\n                for k in range(10):\n                    ans += pre[i - 1][j][k] * suf[i + 1][j][k]\n                    ans %= mod\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countPalindromes(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        pre = [[[0] * 10 for _ in range(10)] for _ in range(n + 2)]\n        suf = [[[0] * 10 for _ in range(10)] for _ in range(n + 2)]\n        t = list(map(int, s))\n        c = [0] * 10\n        for i, v in enumerate(t, 1):\n            for j in range(10):\n                for k in range(10):\n                    pre[i][j][k] = pre[i - 1][j][k]\n            for j in range(10):\n                pre[i][j][v] += c[j]\n            c[v] += 1\n        c = [0] * 10\n        for i in range(n, 0, -1):\n            v = t[i - 1]\n            for j in range(10):\n                for k in range(10):\n                    suf[i][j][k] = suf[i + 1][j][k]\n            for j in range(10):\n                suf[i][j][v] += c[j]\n            c[v] += 1\n        ans = 0\n        for i in range(1, n + 1):\n            for j in range(10):\n                for k in range(10):\n                    ans += pre[i - 1][j][k] * suf[i + 1][j][k]\n                    ans %= mod\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string of digits\n    s = \"\".join(str(random.randint(0, 9)) for _ in range(random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countPalindromes(s)\n\n    return (s,), expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n\n    for _ in range(num_tests):\n        test_case, expected_result = generate_test_case()\n\n        # Construct the test case in the required format\n        test_case_str = \"(\" + \", \".join(repr(x) for x in test_case) + \")\"\n        test_case_str = f\"assert solution.countPalindromes{test_case_str} == {expected_result}\"\n\n        # Append the formatted test case to the list\n        test_case_generator_results.append(test_case_str)\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countPalindromes('0') == 0\nassert solution.countPalindromes('928') == 0\nassert solution.countPalindromes('661') == 0\nassert solution.countPalindromes('1326660856') == 0\nassert solution.countPalindromes('9271642') == 0\nassert solution.countPalindromes('88646') == 0\nassert solution.countPalindromes('218110976') == 0\nassert solution.countPalindromes('503291595') == 2\nassert solution.countPalindromes('235252') == 1\nassert solution.countPalindromes('630470844') == 0\nassert solution.countPalindromes('6917') == 0\nassert solution.countPalindromes('1797') == 0\nassert solution.countPalindromes('9378') == 0\nassert solution.countPalindromes('1237642') == 0\nassert solution.countPalindromes('583047719') == 0\nassert solution.countPalindromes('4549686') == 0\nassert solution.countPalindromes('754415065') == 0\nassert solution.countPalindromes('9') == 0\nassert solution.countPalindromes('811344866') == 0\nassert solution.countPalindromes('5963') == 0\nassert solution.countPalindromes('4') == 0\nassert solution.countPalindromes('2021046') == 0\nassert solution.countPalindromes('60927') == 0\nassert solution.countPalindromes('8') == 0\nassert solution.countPalindromes('8166') == 0\nassert solution.countPalindromes('75511') == 0\nassert solution.countPalindromes('917080') == 0\nassert solution.countPalindromes('75') == 0\nassert solution.countPalindromes('72') == 0\nassert solution.countPalindromes('28') == 0\nassert solution.countPalindromes('2812385895') == 0\nassert solution.countPalindromes('1') == 0\nassert solution.countPalindromes('778472') == 0\nassert solution.countPalindromes('27761') == 0\nassert solution.countPalindromes('873236880') == 2\nassert solution.countPalindromes('338776') == 0\nassert solution.countPalindromes('546285') == 0\nassert solution.countPalindromes('870158') == 0\nassert solution.countPalindromes('9831059') == 0\nassert solution.countPalindromes('584720') == 0\nassert solution.countPalindromes('3939') == 0\nassert solution.countPalindromes('0226587') == 0\nassert solution.countPalindromes('25118') == 0\nassert solution.countPalindromes('7425') == 0\nassert solution.countPalindromes('1') == 0\nassert solution.countPalindromes('621461') == 0\nassert solution.countPalindromes('017') == 0\nassert solution.countPalindromes('475') == 0\nassert solution.countPalindromes('7') == 0\nassert solution.countPalindromes('6216232') == 0\nassert solution.countPalindromes('1820830') == 0\nassert solution.countPalindromes('7') == 0\nassert solution.countPalindromes('8767') == 0\nassert solution.countPalindromes('49902316') == 0\nassert solution.countPalindromes('8') == 0\nassert solution.countPalindromes('384282') == 0\nassert solution.countPalindromes('68603394') == 0\nassert solution.countPalindromes('59729893') == 0\nassert solution.countPalindromes('82396237') == 0\nassert solution.countPalindromes('073') == 0\nassert solution.countPalindromes('415524007') == 0\nassert solution.countPalindromes('717011828') == 0\nassert solution.countPalindromes('8099346285') == 0\nassert solution.countPalindromes('3221904') == 0\nassert solution.countPalindromes('93') == 0\nassert solution.countPalindromes('10463') == 0\nassert solution.countPalindromes('80') == 0\nassert solution.countPalindromes('642288524') == 7\nassert solution.countPalindromes('08564') == 0\nassert solution.countPalindromes('932903834') == 0\nassert solution.countPalindromes('5003') == 0\nassert solution.countPalindromes('77028816') == 0\nassert solution.countPalindromes('54819280') == 0\nassert solution.countPalindromes('82923919') == 0\nassert solution.countPalindromes('07689') == 0\nassert solution.countPalindromes('80') == 0\nassert solution.countPalindromes('5888057') == 1\nassert solution.countPalindromes('982') == 0\nassert solution.countPalindromes('0222') == 0\nassert solution.countPalindromes('1640') == 0\nassert solution.countPalindromes('049') == 0\nassert solution.countPalindromes('925922417') == 0\nassert solution.countPalindromes('96756175') == 0\nassert solution.countPalindromes('46425') == 0\nassert solution.countPalindromes('64253') == 0\nassert solution.countPalindromes('503') == 0\nassert solution.countPalindromes('69395') == 0\nassert solution.countPalindromes('99') == 0\nassert solution.countPalindromes('8953894') == 0\nassert solution.countPalindromes('857') == 0\nassert solution.countPalindromes('1634638388') == 0\nassert solution.countPalindromes('4') == 0\nassert solution.countPalindromes('80028858') == 0\nassert solution.countPalindromes('167999410') == 1\nassert solution.countPalindromes('724') == 0\nassert solution.countPalindromes('3') == 0\nassert solution.countPalindromes('8266668721') == 8\nassert solution.countPalindromes('9986127484') == 0\nassert solution.countPalindromes('6568') == 0\nassert solution.countPalindromes('28') == 0",
  "inefficient_solution": "class Solution:\n    def countPalindromes(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        t = list(map(int, s))\n        f = [[[0] * 10 for _ in range(10)] for _ in range(n + 1)]\n        g = [[[0] * 10 for _ in range(10)] for _ in range(n + 1)]\n        h = [0] * 10\n        for i in range(n + 1):\n            for j in range(10):\n                for k in range(10):\n                    f[i][j][k] = g[i][j][k] = 0\n        for i in range(n):\n            for j in range(10):\n                for k in range(10):\n                    f[i + 1][j][k] = f[i][j][k]\n            for j in range(10):\n                for k in range(10):\n                    g[i + 1][j][k] = g[i][j][k]\n            for j in range(10):\n                f[i + 1][j][t[i]] += h[j]\n                g[i + 1][j][t[i]] += h[j]\n            h[t[i]] += 1\n        total = 0\n        for i in range(n):\n            for j in range(10):\n                for k in range(10):\n                    total += f[i][j][k] * g[n - i - 1][j][k]\n                    total %= mod\n        return total",
  "is_python": true
}