{
  "problem_idx": 268,
  "task_name": "Missing Number",
  "markdown_description": "\nGiven an array `nums` containing `n` distinct numbers in the range `[0, n]`, return *the only number in the range that is missing from the array.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,0,1]\n**Output:** 2\n**Explanation:** n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [0,1]\n**Output:** 2\n**Explanation:** n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [9,6,4,2,3,5,7,0,1]\n**Output:** 8\n**Explanation:** n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 104`\n* `0 <= nums[i] <= n`\n* All the numbers of `nums` are **unique**.\n\n\n\u00a0\n\n\n**Follow up:** Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?\n\n\n",
  "canonical_solution": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        return reduce(xor, (i ^ v for i, v in enumerate(nums, 1)))\n",
  "test_case_generator": "\nimport random\nfrom functools import reduce\nfrom operator import xor\nfrom typing import List\n\nclass Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        return reduce(xor, (i ^ v for i, v in enumerate(nums, 1)))\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(0, 101), random.randint(2, 11))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.missingNumber(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.missingNumber(nums) == expected_result\n        print(f\"assert solution.missingNumber({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.missingNumber({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.missingNumber([45, 3, 70]) == 104\nassert solution.missingNumber([56, 0, 60, 62, 94, 98, 69, 96, 25]) == 59\nassert solution.missingNumber([87, 54, 86]) == 55\nassert solution.missingNumber([47, 52, 8, 83, 92, 84, 94, 25, 79]) == 65\nassert solution.missingNumber([38, 9, 77, 100, 55, 37, 24]) == 12\nassert solution.missingNumber([6, 16, 52, 24, 72, 68, 2, 17, 47, 48, 56]) == 2\nassert solution.missingNumber([28, 64, 34, 69, 53, 48]) == 57\nassert solution.missingNumber([57, 5, 23, 13, 77, 54, 40, 24, 39]) == 75\nassert solution.missingNumber([75, 93, 76, 20]) == 74\nassert solution.missingNumber([78, 1, 11, 13, 71, 77, 28, 67, 69, 4]) == 86\nassert solution.missingNumber([52, 40, 25, 23, 86, 14]) == 77\nassert solution.missingNumber([0, 84, 32, 1, 77, 9, 74, 5, 28]) == 99\nassert solution.missingNumber([27, 81, 18, 14, 24, 67, 64, 53, 70, 92]) == 105\nassert solution.missingNumber([81, 76, 91, 62, 85, 41, 90]) == 94\nassert solution.missingNumber([82, 47, 24, 6, 12, 0, 59]) == 84\nassert solution.missingNumber([94, 57, 45, 23, 44, 24]) == 110\nassert solution.missingNumber([83, 22, 23, 86, 10]) == 15\nassert solution.missingNumber([84, 93, 48, 52]) == 9\nassert solution.missingNumber([9, 17, 83, 84]) == 27\nassert solution.missingNumber([57, 67, 36, 28]) == 70\nassert solution.missingNumber([26, 12, 23, 15, 63, 1, 22]) == 38\nassert solution.missingNumber([14, 100, 79, 88, 99, 94, 51]) == 115\nassert solution.missingNumber([21, 87, 30, 75, 56, 11, 59, 42]) == 61\nassert solution.missingNumber([74, 7, 52, 92]) == 33\nassert solution.missingNumber([18, 0, 48, 98, 61, 25, 60]) == 88\nassert solution.missingNumber([79, 7, 9, 15]) == 74\nassert solution.missingNumber([60, 86, 14, 71, 48, 4, 52, 38, 25]) == 29\nassert solution.missingNumber([7, 15, 1, 78, 11, 12, 62, 50, 91]) == 22\nassert solution.missingNumber([27, 4, 63, 74, 37]) == 78\nassert solution.missingNumber([27, 65, 71, 61]) == 36\nassert solution.missingNumber([47, 27, 24, 68, 1, 78, 44, 74, 38]) == 102\nassert solution.missingNumber([35, 27, 6, 24, 25, 38, 52, 30, 91, 49]) == 82\nassert solution.missingNumber([49, 80, 59]) == 90\nassert solution.missingNumber([24, 82, 60]) == 118\nassert solution.missingNumber([99, 89, 51, 27, 53]) == 38\nassert solution.missingNumber([2, 28, 100, 85, 84, 13, 60, 92]) == 30\nassert solution.missingNumber([13, 31, 86, 26, 96, 33, 76]) == 83\nassert solution.missingNumber([74, 68, 91, 62, 97, 30, 50, 59, 71, 85, 24]) == 23\nassert solution.missingNumber([98, 62, 40, 34, 29, 27, 81]) == 1\nassert solution.missingNumber([65, 47, 64]) == 46\nassert solution.missingNumber([23, 87, 100, 54, 6, 99]) == 112\nassert solution.missingNumber([51, 1, 93, 47, 33, 53, 30]) == 74\nassert solution.missingNumber([76, 2, 47, 64, 75, 60, 43, 93, 65, 50, 30]) == 77\nassert solution.missingNumber([58, 88, 60, 55, 34, 52, 82]) == 45\nassert solution.missingNumber([6, 11]) == 14\nassert solution.missingNumber([72, 66, 6, 26, 44, 83, 20]) == 125\nassert solution.missingNumber([72, 70, 24, 51, 0, 13, 58]) == 18\nassert solution.missingNumber([81, 33, 45, 49, 42, 72, 15, 77, 44, 100]) == 15\nassert solution.missingNumber([18, 63, 85, 50, 86, 15, 26, 28, 46, 6, 0]) == 61\nassert solution.missingNumber([83, 56, 35, 81, 98, 32, 94, 22, 33, 16, 27]) == 57\nassert solution.missingNumber([44, 93]) == 114\nassert solution.missingNumber([48, 12, 98, 34]) == 120\nassert solution.missingNumber([17, 38, 29, 34, 9, 94, 82, 61]) == 56\nassert solution.missingNumber([89, 70, 22]) == 9\nassert solution.missingNumber([9, 18, 23, 74, 93, 62, 86, 7, 80, 83, 21]) == 98\nassert solution.missingNumber([92, 79, 35, 70, 16, 4]) == 101\nassert solution.missingNumber([96, 26]) == 121\nassert solution.missingNumber([13, 71, 56, 26]) == 108\nassert solution.missingNumber([32, 31, 26, 73, 56, 94, 11]) == 1\nassert solution.missingNumber([55, 90, 67, 74, 83, 5, 85]) == 103\nassert solution.missingNumber([48, 47, 40, 74, 6, 82, 32, 39]) == 38\nassert solution.missingNumber([88, 16, 84, 64, 78, 83, 12, 20, 42]) == 114\nassert solution.missingNumber([80, 49, 72, 91, 84, 78]) == 111\nassert solution.missingNumber([15, 75, 44, 56, 59]) == 106\nassert solution.missingNumber([96, 90, 56, 67, 61, 59, 14, 27]) == 90\nassert solution.missingNumber([94, 12, 74, 67, 7, 50, 39]) == 73\nassert solution.missingNumber([0, 9, 30, 2, 94, 99, 72, 4, 26, 84, 11]) == 33\nassert solution.missingNumber([15, 25, 42, 39, 8, 2, 74, 88, 32, 60, 61]) == 34\nassert solution.missingNumber([73, 49, 34, 60, 53, 44]) == 120\nassert solution.missingNumber([90, 93, 10, 67, 59, 62, 57, 73, 55, 53, 8]) == 49\nassert solution.missingNumber([73, 69, 98, 17, 27, 14]) == 109\nassert solution.missingNumber([50, 96]) == 81\nassert solution.missingNumber([37, 77, 95, 43, 33]) == 60\nassert solution.missingNumber([56, 7, 19, 79, 1, 73]) == 44\nassert solution.missingNumber([60, 25, 66, 11, 56, 69, 53]) == 36\nassert solution.missingNumber([46, 15, 24]) == 57\nassert solution.missingNumber([10, 36, 25]) == 55\nassert solution.missingNumber([12, 56, 95, 66, 36, 10, 79, 93, 9]) == 29\nassert solution.missingNumber([67, 92]) == 28\nassert solution.missingNumber([16, 92, 55, 12, 13, 45, 71, 3, 42]) == 56\nassert solution.missingNumber([77, 88, 67, 37, 28, 51, 17, 48]) == 117\nassert solution.missingNumber([64, 28, 36, 4]) == 120\nassert solution.missingNumber([93, 22, 95, 79, 45, 40, 81, 18, 59, 69, 14]) == 109\nassert solution.missingNumber([95, 52, 46, 72, 100, 76, 15, 73, 0]) == 98\nassert solution.missingNumber([95, 28, 6, 17, 71, 29, 1]) == 15\nassert solution.missingNumber([48, 25, 36, 96, 12, 88, 34, 61, 32]) == 7\nassert solution.missingNumber([95, 25, 54]) == 112\nassert solution.missingNumber([88, 61, 31]) == 122\nassert solution.missingNumber([28, 87]) == 72\nassert solution.missingNumber([39, 41, 58]) == 52\nassert solution.missingNumber([49, 8, 43, 42, 21, 5]) == 47\nassert solution.missingNumber([50, 22, 67, 13, 21, 24, 68]) == 35\nassert solution.missingNumber([40, 97, 67, 71, 99, 87, 48, 80, 46, 42]) == 22\nassert solution.missingNumber([12, 47, 2, 32, 53, 38, 52, 95]) == 113\nassert solution.missingNumber([4, 19, 27, 80, 69, 44, 33, 18]) == 14\nassert solution.missingNumber([10, 1, 31, 43, 93, 71, 42]) == 15\nassert solution.missingNumber([80, 89, 73, 37, 52, 96]) == 54\nassert solution.missingNumber([45, 14, 49, 16, 5, 40, 91, 18]) == 110\nassert solution.missingNumber([86, 28, 40, 94, 60, 48, 30, 14, 63, 85, 20]) == 94\nassert solution.missingNumber([90, 19, 27, 38, 71, 59, 48, 62, 85]) == 82",
  "inefficient_solution": "class Solution:\n    def missingNumber(self, nums: List[int]) -> int:\n        n = len(nums)\n        total = sum(range(n+1))\n        sum_arr = sum(nums)\n        return total - sum_arr",
  "is_python": true
}