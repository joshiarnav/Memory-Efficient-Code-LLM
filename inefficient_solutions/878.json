{
  "problem_idx": 878,
  "task_name": "Nth Magical Number",
  "markdown_description": "\nA positive integer is *magical* if it is divisible by either `a` or `b`.\n\n\nGiven the three integers `n`, `a`, and `b`, return the `nth` magical number. Since the answer may be very large, **return it modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1, a = 2, b = 3\n**Output:** 2\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, a = 2, b = 3\n**Output:** 6\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 109`\n* `2 <= a, b <= 4 * 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:\n        mod = 10**9 + 7\n        c = lcm(a, b)\n        r = (a + b) * n\n        return bisect_left(range(r), x=n, key=lambda x: x // a + x // b - x // c) % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:\n        mod = 10**9 + 7\n        c = lcm(a, b)\n        r = (a + b) * n\n        return bisect_left(range(r), x=n, key=lambda x: x // a + x // b - x // c) % mod\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers\n    n = random.randint(1, 101)\n    a = random.randint(2, 1001)\n    b = random.randint(2, 1001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.nthMagicalNumber(n, a, b)\n\n    return n, a, b, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, a, b, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.nthMagicalNumber(n, a, b) == expected_result\n        print(f\"assert solution.nthMagicalNumber({n}, {a}, {b}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.nthMagicalNumber({n}, {a}, {b}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.nthMagicalNumber(29, 235, 850) == 5405\nassert solution.nthMagicalNumber(39, 979, 414) == 11592\nassert solution.nthMagicalNumber(59, 702, 215) == 9828\nassert solution.nthMagicalNumber(54, 36, 819) == 1872\nassert solution.nthMagicalNumber(62, 996, 54) == 3186\nassert solution.nthMagicalNumber(29, 751, 99) == 2574\nassert solution.nthMagicalNumber(76, 231, 775) == 13629\nassert solution.nthMagicalNumber(31, 490, 347) == 6370\nassert solution.nthMagicalNumber(100, 152, 700) == 12600\nassert solution.nthMagicalNumber(36, 682, 807) == 13640\nassert solution.nthMagicalNumber(69, 119, 575) == 6900\nassert solution.nthMagicalNumber(91, 289, 55) == 4235\nassert solution.nthMagicalNumber(21, 63, 334) == 1134\nassert solution.nthMagicalNumber(67, 136, 186) == 5304\nassert solution.nthMagicalNumber(18, 226, 264) == 2260\nassert solution.nthMagicalNumber(60, 883, 434) == 17660\nassert solution.nthMagicalNumber(99, 461, 265) == 16695\nassert solution.nthMagicalNumber(21, 48, 969) == 969\nassert solution.nthMagicalNumber(48, 264, 495) == 8712\nassert solution.nthMagicalNumber(82, 715, 763) == 30520\nassert solution.nthMagicalNumber(28, 238, 570) == 4760\nassert solution.nthMagicalNumber(25, 275, 99) == 1881\nassert solution.nthMagicalNumber(41, 644, 103) == 3708\nassert solution.nthMagicalNumber(63, 38, 396) == 2204\nassert solution.nthMagicalNumber(84, 631, 966) == 32181\nassert solution.nthMagicalNumber(72, 448, 109) == 6322\nassert solution.nthMagicalNumber(53, 529, 9) == 477\nassert solution.nthMagicalNumber(44, 788, 583) == 14972\nassert solution.nthMagicalNumber(72, 201, 585) == 10854\nassert solution.nthMagicalNumber(87, 110, 802) == 8470\nassert solution.nthMagicalNumber(79, 687, 120) == 8160\nassert solution.nthMagicalNumber(44, 730, 839) == 17520\nassert solution.nthMagicalNumber(42, 306, 493) == 7956\nassert solution.nthMagicalNumber(90, 722, 861) == 35378\nassert solution.nthMagicalNumber(40, 941, 263) == 8416\nassert solution.nthMagicalNumber(68, 657, 566) == 20942\nassert solution.nthMagicalNumber(27, 56, 436) == 1344\nassert solution.nthMagicalNumber(33, 359, 21) == 672\nassert solution.nthMagicalNumber(62, 310, 754) == 13640\nassert solution.nthMagicalNumber(55, 880, 517) == 18095\nassert solution.nthMagicalNumber(31, 629, 24) == 720\nassert solution.nthMagicalNumber(9, 197, 942) == 1576\nassert solution.nthMagicalNumber(82, 717, 581) == 26529\nassert solution.nthMagicalNumber(19, 407, 43) == 774\nassert solution.nthMagicalNumber(96, 355, 349) == 17040\nassert solution.nthMagicalNumber(56, 102, 350) == 4488\nassert solution.nthMagicalNumber(47, 252, 139) == 4284\nassert solution.nthMagicalNumber(47, 571, 43) == 1892\nassert solution.nthMagicalNumber(26, 926, 447) == 8046\nassert solution.nthMagicalNumber(53, 554, 612) == 15512\nassert solution.nthMagicalNumber(56, 438, 461) == 12702\nassert solution.nthMagicalNumber(10, 742, 719) == 3710\nassert solution.nthMagicalNumber(59, 841, 455) == 17661\nassert solution.nthMagicalNumber(80, 201, 81) == 4623\nassert solution.nthMagicalNumber(99, 131, 550) == 10480\nassert solution.nthMagicalNumber(16, 192, 826) == 2496\nassert solution.nthMagicalNumber(93, 971, 28) == 2548\nassert solution.nthMagicalNumber(81, 899, 653) == 30691\nassert solution.nthMagicalNumber(33, 413, 77) == 2156\nassert solution.nthMagicalNumber(24, 108, 971) == 2376\nassert solution.nthMagicalNumber(22, 61, 612) == 1224\nassert solution.nthMagicalNumber(11, 465, 192) == 1536\nassert solution.nthMagicalNumber(33, 933, 866) == 14928\nassert solution.nthMagicalNumber(28, 615, 885) == 10455\nassert solution.nthMagicalNumber(13, 49, 577) == 588\nassert solution.nthMagicalNumber(71, 726, 190) == 10830\nassert solution.nthMagicalNumber(46, 49, 729) == 2156\nassert solution.nthMagicalNumber(78, 821, 432) == 22167\nassert solution.nthMagicalNumber(69, 942, 616) == 25872\nassert solution.nthMagicalNumber(53, 543, 293) == 10255\nassert solution.nthMagicalNumber(96, 660, 238) == 16898\nassert solution.nthMagicalNumber(90, 908, 16) == 1424\nassert solution.nthMagicalNumber(74, 955, 324) == 18144\nassert solution.nthMagicalNumber(8, 196, 448) == 1176\nassert solution.nthMagicalNumber(31, 381, 713) == 7843\nassert solution.nthMagicalNumber(24, 872, 249) == 4731\nassert solution.nthMagicalNumber(99, 267, 335) == 14740\nassert solution.nthMagicalNumber(2, 58, 577) == 116\nassert solution.nthMagicalNumber(53, 343, 463) == 10633\nassert solution.nthMagicalNumber(7, 918, 264) == 1584\nassert solution.nthMagicalNumber(18, 648, 611) == 5832\nassert solution.nthMagicalNumber(18, 849, 200) == 3000\nassert solution.nthMagicalNumber(88, 886, 933) == 40119\nassert solution.nthMagicalNumber(14, 631, 27) == 378\nassert solution.nthMagicalNumber(20, 838, 496) == 6448\nassert solution.nthMagicalNumber(43, 835, 644) == 15865\nassert solution.nthMagicalNumber(92, 464, 868) == 27840\nassert solution.nthMagicalNumber(66, 491, 428) == 15221\nassert solution.nthMagicalNumber(31, 98, 521) == 2605\nassert solution.nthMagicalNumber(10, 271, 299) == 1495\nassert solution.nthMagicalNumber(86, 499, 233) == 13747\nassert solution.nthMagicalNumber(20, 355, 692) == 4844\nassert solution.nthMagicalNumber(92, 360, 637) == 21240\nassert solution.nthMagicalNumber(15, 524, 21) == 315\nassert solution.nthMagicalNumber(38, 209, 227) == 4180\nassert solution.nthMagicalNumber(72, 117, 43) == 2279\nassert solution.nthMagicalNumber(43, 554, 207) == 6624\nassert solution.nthMagicalNumber(98, 199, 377) == 12818\nassert solution.nthMagicalNumber(40, 896, 668) == 15364\nassert solution.nthMagicalNumber(24, 936, 372) == 6552",
  "inefficient_solution": "class Solution:\n    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:\n        mod = 10**9 + 7\n        min_num = min(a, b)\n        max_num = max(a, b)\n        numbers = []\n        \n        for i in range(1, n*10000):\n            numbers.append(i*a)\n            numbers.append(i*b)\n        \n        numbers.sort()\n        \n        count = 0\n        for num in numbers:\n            if num % a == 0 or num % b == 0:\n                count += 1\n            if count == n:\n                return num % mod",
  "is_python": true
}