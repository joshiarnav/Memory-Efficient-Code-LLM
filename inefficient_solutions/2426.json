{
  "problem_idx": 2426,
  "task_name": "Number of Pairs Satisfying Inequality",
  "markdown_description": "\nYou are given two **0-indexed** integer arrays `nums1` and `nums2`, each of size `n`, and an integer `diff`. Find the number of **pairs** `(i, j)` such that:\n\n\n* `0 <= i < j <= n - 1` **and**\n* `nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff`.\n\n\nReturn *the **number of pairs** that satisfy the conditions.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [3,2,5], nums2 = [2,2,1], diff = 1\n**Output:** 3\n**Explanation:**\nThere are 3 pairs that satisfy the conditions:\n1. i = 0, j = 1: 3 - 2 <= 2 - 2 + 1. Since i < j and 1 <= 1, this pair satisfies the conditions.\n2. i = 0, j = 2: 3 - 5 <= 2 - 1 + 1. Since i < j and -2 <= 2, this pair satisfies the conditions.\n3. i = 1, j = 2: 2 - 5 <= 2 - 1 + 1. Since i < j and -3 <= 2, this pair satisfies the conditions.\nTherefore, we return 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [3,-1], nums2 = [-2,2], diff = -1\n**Output:** 0\n**Explanation:**\nSince there does not exist any pair that satisfies the conditions, we return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `2 <= n <= 105`\n* `-104 <= nums1[i], nums2[i] <= 104`\n* `-104 <= diff <= 104`\n\n\n",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        x += 40000\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        x += 40000\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:\n        tree = BinaryIndexedTree(10**5)\n        ans = 0\n        for a, b in zip(nums1, nums2):\n            v = a - b\n            ans += tree.query(v + diff)\n            tree.update(v, 1)\n        return ans\n",
  "test_case_generator": "\nclass BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        x += 40000\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        x += 40000\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def numberOfPairs(self, nums1, nums2, diff):\n        tree = BinaryIndexedTree(10**5)\n        ans = 0\n        for a, b in zip(nums1, nums2):\n            v = a - b\n            ans += tree.query(v + diff)\n            tree.update(v, 1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list nums1\n    nums1 = random.sample(range(-10000, 10001), random.randint(2, 10))\n    \n    # Generate random numbers list nums2\n    nums2 = random.sample(range(-10000, 10001), random.randint(2, 10))\n\n    # Generate a random diff\n    diff = random.randint(-10000, 10001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfPairs(nums1, nums2, diff)\n\n    return nums1, nums2, diff, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, diff, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfPairs(nums1, nums2, diff) == expected_result\n        print(f\"assert solution.numberOfPairs({nums1}, {nums2}, {diff}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfPairs({nums1}, {nums2}, {diff}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfPairs([-6754, -1773, 2105, 7932, 2472, -6577, -1831, 5739, -4491], [1540, 7948, -7484, -6231, 174], 7514) == 9\nassert solution.numberOfPairs([3574, 8284, 9097], [1239, 2033, 2825, 8401, -1659, 9717], -6165) == 0\nassert solution.numberOfPairs([-8097, 6477, -2101, 7216, 3825], [3124, -5939, -5043, 1283, -9787, -759, 8088, -1633], -1604) == 7\nassert solution.numberOfPairs([3382, -1075, 7290, -4420, 8231, -1059, -8247], [3562, 2881, -2204, 4138, -7656], 3371) == 6\nassert solution.numberOfPairs([9015, -8442, -2479, -50, -8138, -6482, -3933], [3803, 445, -6581, -2763, -5975, 571, -4481, -9094, 8902], -7470) == 4\nassert solution.numberOfPairs([-3892, 8092, -8287, 8162, 7483, 2216, 2497, 7976, -776, 1483], [-2613, 2101, 6418, 5941, 7533], 4302) == 7\nassert solution.numberOfPairs([-5635, 8221, -4036, -3494, -4267, 1188, 1074, -6803], [-4793, -6097, 6604, 6114, -7614, 8855, 6831], -1699) == 9\nassert solution.numberOfPairs([-4130, 2400], [1279, -3088, 8669, -2882], 7782) == 1\nassert solution.numberOfPairs([-8270, 8821, -8107, 5106, -3882, -7952, 2427, -9118], [6952, -8403, -2785, 2589, 4751], 2677) == 5\nassert solution.numberOfPairs([-7837, -542, -1542, -7140, 1751, 4137, 9356, -5033, -1203], [-8623, -6642, -9292, -4530, -5702, 9179, -4316], -493) == 12\nassert solution.numberOfPairs([4098, 8969, 9226], [-8515, -8946, 1024, 2700], 6593) == 2\nassert solution.numberOfPairs([-4905, -4093, -695, 8434, 9280, -25, -5038, -3263], [1224, 7529, 5930, 3660, -2099, -846, 7393, -3930], 434) == 16\nassert solution.numberOfPairs([9452, -557, 4330, 5846, 9595, -5341, 9637, -5280], [1509, -325, -7370, -7862, 3701, 332, 6765, 9875, 3302], -6317) == 3\nassert solution.numberOfPairs([-7646, -7586, -6978, 6108, 6726, -1489], [-691, -9047, -4219, 8122, -7972], 3750) == 9\nassert solution.numberOfPairs([-4837, -9355, -9106, 1057, 7357, 1042, -3671, -1973, 7268, 8621], [8570, 9150, 9946], 127) == 0\nassert solution.numberOfPairs([2162, 1441, -9610, -6872, -600, -4435], [-9333, 7024, 2148], 3741) == 0\nassert solution.numberOfPairs([2472, -1017, -3350, -3268], [-8591, -65, 4089], 9431) == 1\nassert solution.numberOfPairs([24, -7043, -3884, 7711], [3845, -288, -7040, 4215, 778, -339, -7014, 2146, -3854, 8498], -2121) == 4\nassert solution.numberOfPairs([8367, 7018, -2761, -7061, -787, 3576, -8544], [5124, -6133], 3160) == 1\nassert solution.numberOfPairs([-8568, 7041, -3931, 5697, 7956, 950, -493], [9539, -9431, -7649, 1079, -5223, 1584], 8553) == 11\nassert solution.numberOfPairs([-2792, -4077, 8126], [-4556, -4497, 1580], -1276) == 2\nassert solution.numberOfPairs([-8877, -7718, 8883, 8157, 1100, -638], [-8473, 6195, 8713, -3328, -8393], 2572) == 9\nassert solution.numberOfPairs([-5603, -9958, 9716, 1745, -1384], [4036, 5951, 1535], -3403) == 2\nassert solution.numberOfPairs([8981, -3436, -5164], [5979, 6906, 6706], 2876) == 1\nassert solution.numberOfPairs([2151, -2183, 8959], [-8792, -8354, -1986, 3502, -9964, -6644, 7553, -3099], 8434) == 3\nassert solution.numberOfPairs([8959, -533, 1942, -6185, -6034, 7555, 7929], [-4460, -4699, 1923, -6542, -8747, 9388, -874], -391) == 7\nassert solution.numberOfPairs([-7131, -4888, 7787, -2648, 9734], [-1878, -1815, 1090, -4342], -3789) == 4\nassert solution.numberOfPairs([-9495, -2748, 9005, 437, 4598], [5210, -9024, 6444, -9106, -4970, 5074, -4756, 6098], 8967) == 10\nassert solution.numberOfPairs([2830, -9346, -6342], [7941, -2555, -4267, 1683, -465, 8848, -921, -8355, 6858], 4495) == 3\nassert solution.numberOfPairs([-1977, 8351, -7, -1429, 8272, 2232, 7421], [-6293, -5040, 167, 2680], -5204) == 1\nassert solution.numberOfPairs([9318, -8160, 6324, -5701, -228, -4319, 3865, -3969, -197], [5220, -1822, -7997, -250, -8818], -5641) == 4\nassert solution.numberOfPairs([2171, 3448, -3858, -5797, -8803, 1978], [-8316, 4132], -3407) == 0\nassert solution.numberOfPairs([7655, 3623, -4783, 2714, 4082, -4276], [7393, 8580, 5848, 3415, 7506, -2755], 3439) == 11\nassert solution.numberOfPairs([9377, 9280, 9279, -8956, 2689], [5764, -9680, 6844, -1512, 7049, 5594, 5990, -854, -1255], 711) == 2\nassert solution.numberOfPairs([2351, 4464, -2249, 285, -6382, 612, -1140, -4897], [-6454, 3288, 8463, -5445], -5217) == 1\nassert solution.numberOfPairs([-2054, -8215, -4451, -6321, -882, -5560, -7823, -7634], [7161, -2736, 6817], -2480) == 1\nassert solution.numberOfPairs([-3742, 3379, -1220, 5864], [-4691, -6865, -7821, 1214, 6803, -8699, 1259, -9826, -4973, -3385], 3155) == 4\nassert solution.numberOfPairs([2956, -6890, -9310, 4218, 1811], [-4757, -9634, 4806], -7877) == 0\nassert solution.numberOfPairs([-7405, -3156, 6908, 3731, 2619], [-1265, -2276, -7478, -4403, 6671], -3818) == 5\nassert solution.numberOfPairs([-5577, 9505, 884], [1448, -9083, 8193], -61) == 1\nassert solution.numberOfPairs([9876, 5989, -9888, 7102, 5808, -2936, 5991, 583, -379], [7140, 1313, 6766, 87, 1525, -8681, -8455, 1723, 8509, 3388], -3540) == 12\nassert solution.numberOfPairs([-4968, -9526, 4207, 3179, -1723], [-7601, 2859, 7709, 8742, -1776, 5271, -7453, -4002], -118) == 5\nassert solution.numberOfPairs([-6743, -7399, -6854, 1079, -2417, -1001, 8743], [8413, -7360, -9595, -1684, 8386, -57, 5941], -4189) == 8\nassert solution.numberOfPairs([-7701, -1560, -4681], [1728, -1458, 6738, 5504, -4526, -4111, -1325, -8835], -2996) == 1\nassert solution.numberOfPairs([-6034, -2162, 1230, -9530, 3875, -9800], [6375, -8731, -5559], -5052) == 2\nassert solution.numberOfPairs([3856, 7658, -1276, 8187, -9171], [-8842, -8841, 322, -9758, -3467], -2609) == 3\nassert solution.numberOfPairs([-7051, -3839, 631, 9682, -8966, 1524, -1703, -4220, 9918, -2672], [-6143, -5561, 1237], 5588) == 3\nassert solution.numberOfPairs([344, -545, -4946, -8430, 4313], [-9796, -7332, -2673, 3458, 7487, -921, -6566, -410, -8138, 3523], 2622) == 2\nassert solution.numberOfPairs([-2628, -5504, -3529, -5734, -8615, 6790, 8253, 7834, -3767], [-8859, 2488, 3777, 6255, -6361, -5969, -6747, -3184, 5632], -5289) == 16\nassert solution.numberOfPairs([-6573, 4997, -6232, -994, 8778], [-3551, -7298, -6218, 3080, 6437, -7497, 1321], -949) == 5\nassert solution.numberOfPairs([-4977, -3403, -3277, -2025, 5657, 6855, 8629], [-9681, 8410, -6235, -9278], 3594) == 5\nassert solution.numberOfPairs([-7623, 5892, 3683], [9887, 6033, -731, -1603, 9576, -274, 817, -780, -724, -4049], -4828) == 2\nassert solution.numberOfPairs([-4240, 3510, 1280, 9895, -2487, -1803, -1457], [4379, 3986, 4044, -148, -8575, 3259, 1115], -5201) == 9\nassert solution.numberOfPairs([-1622, -1817, -2945, 1214, 7345], [-3524, 194, 8644], 3178) == 0\nassert solution.numberOfPairs([2870, 5805, 4456, -3399, -796, -6320], [1110, 9067, -406, -9962, 9667], -9259) == 1\nassert solution.numberOfPairs([6266, -1821, 710, -6234, -2284], [3416, 2968, -604, 4856, 8793, -8768, 7733, -2223, -9521, 13], 3696) == 3\nassert solution.numberOfPairs([9054, 5375, -4111, 3116, -3522, 6105, 9871, 4081, 6469], [-2118, -383], -9977) == 0\nassert solution.numberOfPairs([2440, -2916], [-1314, 1726], -3155) == 0\nassert solution.numberOfPairs([-9947, -310, -829, -1114, -34, 8216], [-8308, -269, 316], 5342) == 3\nassert solution.numberOfPairs([3920, -9424, 1117, -4578, -152, 4068, 1796], [7574, -7305], 4991) == 1\nassert solution.numberOfPairs([-9479, -6647, 9140, -7714, 4040, -1850, -3388, 3857, -3767], [1381, -5317], 787) == 1\nassert solution.numberOfPairs([-9894, 1540, 6605], [-5003, 8690, -5502, 9787, 903, -5533], 6567) == 3\nassert solution.numberOfPairs([-5411, -9025, 9436], [-6703, -9856, 5184, 4046, 2370, 9436, -6770, 9666], -4627) == 0\nassert solution.numberOfPairs([9056, -2547, -1085, 4287, 3793, -1717, -6876, -996, -7310, -575], [6625, 6820, 2080], -6523) == 0\nassert solution.numberOfPairs([1480, -7957, -1561, -1181, 4017], [-9083, 7188, -4884, 4496, 1698, -1099, 2157], 4889) == 5\nassert solution.numberOfPairs([6212, -2906, 4805, -448, 3610, -5747], [8911, 9709, -1138, 4974, -3603, -4490, 9114, 8669, -9297, 266], -9860) == 5\nassert solution.numberOfPairs([234, -8835, 4749, -6521, 7589], [2831, -7218, -7049], 9500) == 3\nassert solution.numberOfPairs([-9338, -511, 6485], [4381, -4754, -9803, 7540, -1975, 5242, -9168], -1328) == 3\nassert solution.numberOfPairs([-5146, -8212, 5573, -9404, -205, 3039, 8447, 9239], [-8344, -8860, -5711, 4771, -9767, -4814, -692, -7322, 4775], -1871) == 18\nassert solution.numberOfPairs([-6085, 8583, 1975, 7454, -5248, 3079, 9967], [-2196, -6387, -2194, 8800], -3131) == 2\nassert solution.numberOfPairs([1695, -1274], [-2212, -627, -6788], -9453) == 0\nassert solution.numberOfPairs([-9406, -7285, 1608, 7960, 1245, -6551, 6734, -8593], [-7678, -3305], -8873) == 0\nassert solution.numberOfPairs([-4050, -6232, -6705, 922, 9630, -812, 9584, 2567, -2414], [-9543, 6544, 7023, 3302, 6277], -4446) == 5\nassert solution.numberOfPairs([-272, 8179, 4783, -4780, 8105, -6274, 932, -3376, -4919, 8550], [-2888, -7814], 7699) == 1\nassert solution.numberOfPairs([-7003, 5720, 5438, -8895, -2826, 46, 7265], [-5630, 9523, -9907, 930, 1248], 3643) == 6\nassert solution.numberOfPairs([5150, -4041, -1646], [7613, -5899, -4912, -769, -4220, 2392, -2414, -9017, 3170, -1163], -6343) == 0\nassert solution.numberOfPairs([4081, -8309, -6420, 5143, -1322, -7410, -4007], [5540, 3248, 3262, -134, 5780, -6841, -4419, -9205], 5959) == 18\nassert solution.numberOfPairs([4187, -3943, -1451, 6111, 7245, -6292, -4949, 5802, -1585], [-4070, 7055, -7102, 8023, 997, 883, -7907], -3502) == 8\nassert solution.numberOfPairs([-6509, -9843, 8105, 245], [9525, -9897, -8831, 4849, 8378, -3305, -606, -7030, 6805, -7059], 9579) == 5\nassert solution.numberOfPairs([-1301, 2318, 2018], [5573, 5719, 1184], 5191) == 3\nassert solution.numberOfPairs([7442, 9698, 7475, 7294, -9633, -5297], [-1644, 5155, -6821, -3362, -4381, 6081, -6364, 7964, -9028, -482], 4016) == 5\nassert solution.numberOfPairs([-5221, -5453, 7778, -2114, 4114], [-3691, -2603, 8797, 809, 7605, -3890, 720, 2904, 7942], 4275) == 10\nassert solution.numberOfPairs([-2804, 7752, -1349, 6055], [-2888, 62, -5106, -4876, -8548, -1820, -147, -9600], 5755) == 6\nassert solution.numberOfPairs([-2891, 3843, -3230, 6660], [-5311, -239, 7711, -7567, 5751, 204, -6723, 8551, -7449, -3899], 7813) == 4\nassert solution.numberOfPairs([8265, 266, -5522, 5723, -325, -7678, -3388, -8615, 4369], [8945, 5952, -1407, -7826, 3541, -7769], 9412) == 13\nassert solution.numberOfPairs([948, -1777, 6977, -6983, 7934, -7613, 9754, 7199, 3745], [3935, 6297, 8411, -5002, 9580, 3490, 5418], -9628) == 2\nassert solution.numberOfPairs([2859, 7820, -8037, -2408, 4454, -6965], [7926, 611, -1236, 6577, -96, -2870, 610], 4858) == 11\nassert solution.numberOfPairs([3566, -6027, 6135, -238, 7269, 9004, -7008, -7076], [4432, 1633, 3861, -6277, 4146, 9406, 9427], 7842) == 15\nassert solution.numberOfPairs([2206, 2414, 1813, -5926, -8687, -7057, 5177, -6691, -7972, -7683], [-1717, 676, 4605, 3446, 7849, -8875, 6061, 201, -3032], -5721) == 6\nassert solution.numberOfPairs([-9152, 2889, 453, -3713, -5134, -3540, 9804], [5933, 4392, -6203], -3683) == 3\nassert solution.numberOfPairs([8071, -5797, -3845], [6244, -3517, 9183], -8025) == 0\nassert solution.numberOfPairs([255, -4266, 6185, -2168, 7864, 6815], [-7496, 7831, 9981, -9509, -2893, 7286, 9684], -8255) == 6\nassert solution.numberOfPairs([8677, -6824, 1492, 5954, -145, -9841], [-8643, 2379, -4410], -7998) == 1\nassert solution.numberOfPairs([6744, 6112, -2647, 3956, 4892, -4558], [-8960, 4970], -1588) == 0\nassert solution.numberOfPairs([5876, -6661, -305, 7247, -2473, -7065, -8346], [8057, -4946, 689], -1586) == 0\nassert solution.numberOfPairs([2084, -6959, -4017], [-7179, -4704, -6231], 2452) == 1\nassert solution.numberOfPairs([-6097, 6683, 8061, -3063, -9200, 2397, 2024, 2788, 9273], [4882, -4598, 2555, -6482, -1584, -261, 8520, 8472, -9476], -8548) == 12\nassert solution.numberOfPairs([2344, 1378, -7113, 6388, -7070, 7927, -1025, 7124], [-6680, 8530, -2052, -3054, -4429, 5329, -3574], 2953) == 13\nassert solution.numberOfPairs([-1492, -4726, -9676, -8707, 841, 5382, 4531, 9337], [-671, -6526, 382], 9051) == 1\nassert solution.numberOfPairs([-3927, 3242, -771, 3627, -32, 5365], [-3567, 4510, 115, -1709, 3411], 6340) == 9",
  "inefficient_solution": "class Solution:\n    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:\n        n = len(nums1)\n        tree = [[] for _ in range(n + 1)]\n        ans = 0\n        for i, (a, b) in enumerate(zip(nums1, nums2)):\n            v = a - b\n            for j, (c, d) in enumerate(zip(nums1, nums2)):\n                if j < i:\n                    if c - d <= v + diff:\n                        tree[i].append(j)\n        for i in range(n):\n            for j in tree[i]:\n                ans += 1\n        return ans",
  "is_python": true
}