{
  "problem_idx": 2564,
  "task_name": "Substring XOR Queries",
  "markdown_description": "\nYou are given a **binary string** `s`, and a **2D** integer array `queries` where `queries[i] = [firsti, secondi]`.\n\n\nFor the `ith` query, find the **shortest substring** of `s` whose **decimal value**, `val`, yields `secondi` when **bitwise XORed** with `firsti`. In other words, `val ^ firsti == secondi`.\n\n\nThe answer to the `ith` query is the endpoints (**0-indexed**) of the substring `[lefti, righti]` or `[-1, -1]` if no such substring exists. If there are multiple answers, choose the one with the **minimum** `lefti`.\n\n\n*Return an array* `ans` *where* `ans[i] = [lefti, righti]` *is the answer to the* `ith` *query.*\n\n\nA **substring** is a contiguous non-empty sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"101101\", queries = [[0,5],[1,2]]\n**Output:** [[0,2],[2,3]]\n**Explanation:** For the first query the substring in range [0,2] is **\"101\"** which has a decimal value of **`5`**, and **`5 ^ 0 = 5`**, hence the answer to the first query is [0,2]. In the second query, the substring in range [2,3] is **\"11\",** and has a decimal value of **3**, and **3 `^ 1 = 2`**.\u00a0So, [2,3] is returned for the second query. \n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"0101\", queries = [[12,8]]\n**Output:** [[-1,-1]]\n**Explanation:** In this example there is no substring that answers the query, hence [-1,-1] is returned.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"1\", queries = [[4,5]]\n**Output:** [[0,0]]\n**Explanation:** For this example, the substring in range [0,0] has a decimal value of **`1`**, and **`1 ^ 4 = 5`**. So, the answer is [0,0].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s[i]` is either `'0'` or `'1'`.\n* `1 <= queries.length <= 105`\n* `0 <= firsti, secondi <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:\n        d = {}\n        n = len(s)\n        for i in range(n):\n            x = 0\n            for j in range(32):\n                if i + j >= n:\n                    break\n                x = x << 1 | int(s[i + j])\n                if x not in d:\n                    d[x] = [i, i + j]\n                if x == 0:\n                    break\n        return [d.get(first ^ second, [-1, -1]) for first, second in queries]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:\n        d = {}\n        n = len(s)\n        for i in range(n):\n            x = 0\n            for j in range(32):\n                if i + j >= n:\n                    break\n                x = x << 1 | int(s[i + j])\n                if x not in d:\n                    d[x] = [i, i + j]\n                if x == 0:\n                    break\n        return [d.get(first ^ second, [-1, -1]) for first, second in queries]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random binary string\n    s = \"\".join(random.choices([\"0\", \"1\"], k=random.randint(1, 10)))\n    \n    # Generate random queries\n    queries = []\n    for _ in range(random.randint(1, 10)):\n        first = random.randint(0, int(\"1\" * len(s), 2))\n        second = random.randint(0, int(\"1\" * len(s), 2))\n        queries.append([first, second])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.substringXorQueries(s, queries)\n\n    return s, queries, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, queries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.substringXorQueries(s, queries) == expected_result\n\n        if expected_result != [[-1, -1]]:\n            print(f\"assert solution.substringXorQueries('{s}', {queries}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.substringXorQueries('{s}', {queries}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.substringXorQueries('10', [[3, 0], [3, 0], [0, 0], [0, 1], [1, 1], [3, 3], [0, 3], [0, 2]]) == [[-1, -1], [-1, -1], [1, 1], [0, 0], [1, 1], [1, 1], [-1, -1], [0, 1]]\nassert solution.substringXorQueries('11', [[1, 1], [3, 3], [2, 3], [1, 0], [0, 2], [0, 2], [1, 2], [1, 0], [3, 0], [1, 0]]) == [[-1, -1], [-1, -1], [0, 0], [0, 0], [-1, -1], [-1, -1], [0, 1], [0, 0], [0, 1], [0, 0]]\nassert solution.substringXorQueries('000', [[2, 2], [7, 1], [3, 1], [2, 1], [5, 2], [1, 0], [1, 2], [4, 2], [6, 2], [4, 5]]) == [[0, 0], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('00011', [[0, 28], [18, 7]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('100011', [[57, 11], [3, 47], [20, 12], [58, 62]]) == [[-1, -1], [-1, -1], [-1, -1], [0, 2]]\nassert solution.substringXorQueries('000110000', [[430, 164], [503, 262], [164, 31], [9, 195]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1110', [[12, 0], [8, 3], [1, 9]]) == [[-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('11010', [[18, 15], [11, 13], [30, 31], [24, 10], [1, 22]]) == [[-1, -1], [0, 2], [0, 0], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('11100000', [[35, 31], [183, 84], [43, 122], [111, 254], [72, 185], [60, 7]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1110', [[15, 9], [0, 14], [6, 7], [9, 14], [5, 7], [3, 14], [14, 13]]) == [[1, 3], [0, 3], [0, 0], [0, 2], [2, 3], [-1, -1], [0, 1]]\nassert solution.substringXorQueries('1', [[0, 1], [1, 0], [0, 0], [0, 0], [0, 0], [1, 1], [1, 0], [1, 1], [0, 0]]) == [[0, 0], [0, 0], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [0, 0], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1110', [[5, 15], [10, 6], [8, 11], [5, 13], [10, 3], [15, 15], [11, 11], [7, 12], [14, 7]]) == [[-1, -1], [-1, -1], [0, 1], [-1, -1], [-1, -1], [3, 3], [3, 3], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('110000', [[14, 20], [50, 43], [6, 54], [29, 13], [53, 42], [22, 29], [31, 21], [48, 33]]) == [[-1, -1], [-1, -1], [0, 5], [1, 5], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1100010', [[34, 30], [65, 24], [105, 71], [16, 98], [102, 95], [5, 26], [58, 50], [71, 90], [123, 35]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [1, 4], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('100', [[3, 7], [4, 3], [5, 5], [2, 4], [6, 6], [1, 5], [7, 6]]) == [[0, 2], [-1, -1], [1, 1], [-1, -1], [1, 1], [0, 2], [0, 0]]\nassert solution.substringXorQueries('011110', [[63, 19], [1, 61], [34, 1], [12, 35], [0, 12], [24, 0], [49, 62], [37, 57], [6, 60]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [1, 4], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('10', [[2, 1], [3, 1], [2, 0], [2, 1], [2, 2]]) == [[-1, -1], [0, 1], [0, 1], [-1, -1], [1, 1]]\nassert solution.substringXorQueries('0101', [[12, 11], [7, 6], [8, 6], [5, 15], [3, 1], [10, 4], [2, 5]]) == [[-1, -1], [1, 1], [-1, -1], [-1, -1], [1, 2], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('0010', [[4, 5]]) == [[2, 2]]\nassert solution.substringXorQueries('1100100001', [[106, 379], [35, 123], [862, 187], [105, 381], [850, 885]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('010110110', [[322, 384], [469, 14], [203, 202], [142, 172]]) == [[-1, -1], [-1, -1], [1, 1], [-1, -1]]\nassert solution.substringXorQueries('0', [[0, 1], [0, 1]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1111', [[4, 4], [0, 3], [10, 3], [15, 2]]) == [[-1, -1], [0, 1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('0', [[1, 1], [0, 1], [0, 0], [0, 0], [0, 0], [1, 0], [0, 1]]) == [[0, 0], [-1, -1], [0, 0], [0, 0], [0, 0], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('11100', [[22, 21], [26, 18], [21, 5], [23, 25], [25, 10], [16, 6], [14, 29], [14, 1], [8, 27], [28, 21]]) == [[0, 1], [-1, -1], [-1, -1], [0, 3], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('0010', [[12, 3], [7, 0], [7, 0], [3, 14]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('111011101', [[65, 228], [303, 91]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1001', [[6, 12], [15, 14], [6, 15], [4, 7], [14, 15], [0, 1], [12, 3], [7, 8]]) == [[-1, -1], [0, 0], [0, 3], [-1, -1], [0, 0], [0, 0], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1', [[1, 0]]) == [[0, 0]]\nassert solution.substringXorQueries('1', [[1, 0], [0, 0]]) == [[0, 0], [-1, -1]]\nassert solution.substringXorQueries('0001111', [[77, 77], [93, 35]]) == [[0, 0], [-1, -1]]\nassert solution.substringXorQueries('0001', [[6, 9], [6, 3]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('00011', [[25, 2], [2, 25], [25, 3], [23, 25]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1111111100', [[500, 310], [415, 638]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('100', [[1, 2], [5, 1], [2, 5]]) == [[-1, -1], [0, 2], [-1, -1]]\nassert solution.substringXorQueries('1111010', [[51, 48]]) == [[0, 1]]\nassert solution.substringXorQueries('01001', [[14, 28], [19, 20], [3, 8], [29, 8], [1, 13], [8, 15], [4, 15]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1011000111', [[680, 147], [202, 926], [990, 98], [173, 808]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1110', [[9, 15], [15, 5], [6, 2], [4, 2]]) == [[1, 3], [-1, -1], [-1, -1], [1, 3]]\nassert solution.substringXorQueries('0001001', [[15, 11]]) == [[3, 5]]\nassert solution.substringXorQueries('1010110100', [[226, 916], [515, 82]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('001011', [[45, 15], [23, 24], [21, 47], [62, 26], [58, 49], [1, 39], [44, 39]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [2, 5], [-1, -1], [2, 5]]\nassert solution.substringXorQueries('00011', [[14, 3], [9, 30], [19, 12], [26, 29], [7, 28], [27, 21], [0, 26], [2, 24], [2, 3]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [3, 3]]\nassert solution.substringXorQueries('0010111101', [[714, 967], [569, 616], [179, 541], [91, 99], [69, 298], [271, 488], [351, 90]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('100100101', [[397, 187], [234, 187], [90, 58], [42, 356], [402, 45]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('00', [[3, 3]]) == [[0, 0]]\nassert solution.substringXorQueries('01010101', [[216, 165], [201, 212]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1100111', [[14, 90], [96, 28], [7, 66], [82, 19], [30, 5]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('00', [[1, 1], [3, 2]]) == [[0, 0], [-1, -1]]\nassert solution.substringXorQueries('100000', [[55, 18], [13, 37], [26, 32], [15, 50], [0, 31], [49, 23], [23, 61]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1101001', [[89, 77], [112, 24], [100, 17], [62, 98]]) == [[1, 5], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('001010', [[28, 21], [54, 54], [36, 49], [8, 38], [56, 57]]) == [[-1, -1], [0, 0], [-1, -1], [-1, -1], [2, 2]]\nassert solution.substringXorQueries('100000', [[8, 9], [55, 13], [7, 14], [60, 13], [20, 19], [18, 31], [59, 26], [9, 62]]) == [[0, 0], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('00111', [[20, 31], [15, 16], [27, 25], [23, 1], [18, 6], [5, 0], [8, 31], [25, 16], [2, 2], [24, 31]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [0, 0], [2, 4]]\nassert solution.substringXorQueries('0', [[1, 1], [1, 0], [1, 0], [1, 0], [0, 0]]) == [[0, 0], [-1, -1], [-1, -1], [-1, -1], [0, 0]]\nassert solution.substringXorQueries('1101001101', [[104, 837], [260, 450], [277, 994]]) == [[-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('110100', [[32, 14], [61, 25], [19, 53]]) == [[-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('10', [[0, 1], [0, 0], [1, 3], [2, 2], [0, 2], [2, 3], [2, 1]]) == [[0, 0], [1, 1], [0, 1], [1, 1], [0, 1], [0, 0], [-1, -1]]\nassert solution.substringXorQueries('00', [[1, 0], [0, 1], [0, 2], [0, 0], [3, 0], [1, 2], [1, 3], [0, 1], [2, 3]]) == [[-1, -1], [-1, -1], [-1, -1], [0, 0], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('11', [[1, 0], [2, 0], [3, 3]]) == [[0, 0], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('0010111', [[16, 77], [26, 103], [86, 103]]) == [[-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('111001101', [[75, 180], [39, 439], [15, 384], [50, 286], [441, 403], [313, 108], [426, 482], [296, 221], [205, 3]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('000111', [[54, 43], [3, 44], [61, 38]]) == [[-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('100111101', [[96, 367], [388, 309], [468, 460], [78, 185], [13, 80], [34, 402], [511, 463], [312, 203], [189, 373], [378, 247]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('10011101', [[85, 62], [207, 17], [133, 52], [39, 96], [25, 230], [68, 126]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('01111000', [[79, 233], [167, 87], [147, 25]]) == [[-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('110', [[7, 2], [1, 1], [0, 1], [5, 5]]) == [[-1, -1], [2, 2], [0, 0], [2, 2]]\nassert solution.substringXorQueries('01110000', [[82, 197], [114, 224], [207, 79], [216, 181], [163, 91], [9, 251], [131, 185], [242, 235], [141, 13], [117, 196]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('01011010', [[134, 172], [184, 44], [14, 218], [144, 84], [109, 86]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('000100100', [[106, 284], [112, 88], [204, 186], [309, 52], [146, 41], [142, 169], [299, 19], [206, 14], [13, 368]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('01', [[2, 3], [1, 0], [0, 3], [1, 0], [2, 3], [1, 1], [3, 0]]) == [[1, 1], [1, 1], [-1, -1], [1, 1], [1, 1], [0, 0], [-1, -1]]\nassert solution.substringXorQueries('1001001000', [[889, 363], [115, 434], [67, 1018], [746, 345], [581, 1005], [406, 38], [188, 1009]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('111000', [[28, 23], [28, 47]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('01', [[2, 0], [2, 3], [2, 0], [1, 1], [0, 2], [2, 3], [1, 0], [3, 1], [2, 3], [1, 0]]) == [[-1, -1], [1, 1], [-1, -1], [0, 0], [-1, -1], [1, 1], [1, 1], [-1, -1], [1, 1], [1, 1]]\nassert solution.substringXorQueries('00', [[3, 0], [0, 2], [1, 2], [1, 2]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1110110100', [[16, 27], [761, 837]]) == [[2, 5], [-1, -1]]\nassert solution.substringXorQueries('1110100', [[60, 99], [32, 46], [70, 53], [18, 92], [77, 90], [107, 115], [103, 125]]) == [[-1, -1], [0, 3], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [1, 5]]\nassert solution.substringXorQueries('111', [[3, 1], [0, 4], [1, 7], [5, 5]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('0000011010', [[761, 654], [428, 707], [558, 58]]) == [[-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1', [[0, 1], [1, 1], [1, 0], [0, 1], [1, 1]]) == [[0, 0], [-1, -1], [0, 0], [0, 0], [-1, -1]]\nassert solution.substringXorQueries('10', [[1, 3], [2, 1], [0, 1], [3, 3], [3, 3], [2, 3]]) == [[0, 1], [-1, -1], [0, 0], [1, 1], [1, 1], [0, 0]]\nassert solution.substringXorQueries('0010', [[1, 1], [10, 4], [0, 1], [12, 10], [2, 2], [6, 4]]) == [[0, 0], [-1, -1], [2, 2], [-1, -1], [0, 0], [2, 3]]\nassert solution.substringXorQueries('010001101', [[112, 101], [104, 498]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('1', [[1, 1], [0, 0], [0, 1]]) == [[-1, -1], [-1, -1], [0, 0]]\nassert solution.substringXorQueries('11111000', [[134, 21], [230, 144], [5, 128], [68, 242], [16, 52], [111, 155], [145, 110], [234, 135], [237, 51]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('001', [[7, 3], [2, 0], [5, 5], [2, 3], [6, 3], [2, 2]]) == [[-1, -1], [-1, -1], [0, 0], [2, 2], [-1, -1], [0, 0]]\nassert solution.substringXorQueries('11000', [[12, 12], [30, 6], [9, 20], [0, 26], [4, 17], [23, 2], [9, 21], [28, 15], [11, 15], [21, 9]]) == [[2, 2], [0, 4], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [1, 3], [-1, -1]]\nassert solution.substringXorQueries('011110', [[44, 35], [3, 39], [41, 3], [20, 20], [18, 37], [18, 47], [28, 32]]) == [[1, 4], [-1, -1], [-1, -1], [0, 0], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('0111', [[4, 14], [12, 7], [2, 11], [11, 7]]) == [[-1, -1], [-1, -1], [-1, -1], [-1, -1]]\nassert solution.substringXorQueries('11', [[1, 1], [0, 3], [3, 3], [1, 2], [0, 0]]) == [[-1, -1], [0, 1], [-1, -1], [0, 1], [-1, -1]]\nassert solution.substringXorQueries('1', [[1, 1], [0, 1], [1, 1], [0, 1], [0, 1], [1, 0]]) == [[-1, -1], [0, 0], [-1, -1], [0, 0], [0, 0], [0, 0]]\nassert solution.substringXorQueries('11001110', [[143, 59], [218, 180]]) == [[-1, -1], [-1, -1]]\nassert solution.substringXorQueries('10100111', [[122, 62], [129, 198]]) == [[-1, -1], [-1, -1]]",
  "inefficient_solution": "class Solution:\n    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:\n        d = {}\n        n = len(s)\n        for i in range(n):\n            for j in range(i, n):\n                x = 0\n                for k in range(32):\n                    if i + k > j:\n                        break\n                    x = x << 1 | int(s[i + k])\n                    if x not in d:\n                        d[x] = [[i, j], x]\n                    if x == 0:\n                        break\n        return [[-1, -1] if first ^ second not in [v[1] for v in d.values()] else d[first ^ second][0] for first, second in queries]",
  "is_python": true
}