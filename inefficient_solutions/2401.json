{
  "problem_idx": 2401,
  "task_name": "Longest Nice Subarray",
  "markdown_description": "\nYou are given an array `nums` consisting of **positive** integers.\n\n\nWe call a subarray of `nums` **nice** if the bitwise **AND** of every pair of elements that are in **different** positions in the subarray is equal to `0`.\n\n\nReturn *the length of the **longest** nice subarray*.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n**Note** that subarrays of length `1` are always considered nice.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,8,48,10]\n**Output:** 3\n**Explanation:** The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:\n- 3 AND 8 = 0.\n- 3 AND 48 = 0.\n- 8 AND 48 = 0.\nIt can be proven that no longer nice subarray can be obtained, so we return 3.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,1,5,11,13]\n**Output:** 1\n**Explanation:** The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestNiceSubarray(self, nums: List[int]) -> int:\n        ans = j = mask = 0\n        for i, x in enumerate(nums):\n            while mask & x:\n                mask ^= nums[j]\n                j += 1\n            ans = max(ans, i - j + 1)\n            mask |= x\n        return ans\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestNiceSubarray(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestNiceSubarray(nums) == expected_result\n        print(f\"assert solution.longestNiceSubarray({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestNiceSubarray({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestNiceSubarray([53, 58, 31, 37, 25, 5, 21, 52]) == 1\nassert solution.longestNiceSubarray([43, 37, 51, 67, 62, 46]) == 1\nassert solution.longestNiceSubarray([76, 100]) == 1\nassert solution.longestNiceSubarray([64, 60]) == 2\nassert solution.longestNiceSubarray([91, 63, 47, 65, 88]) == 1\nassert solution.longestNiceSubarray([9, 27, 59, 60, 87, 35]) == 1\nassert solution.longestNiceSubarray([23, 71, 24, 57, 78, 17, 9, 33, 20, 32]) == 2\nassert solution.longestNiceSubarray([57, 73, 7]) == 1\nassert solution.longestNiceSubarray([25, 6, 84, 7, 26, 75, 49]) == 2\nassert solution.longestNiceSubarray([92, 52]) == 1\nassert solution.longestNiceSubarray([42, 7, 28, 14, 12, 1, 65, 63]) == 2\nassert solution.longestNiceSubarray([5, 44, 57, 39, 20, 21, 72, 77, 19, 47]) == 2\nassert solution.longestNiceSubarray([5, 13, 94, 22, 7, 73, 42]) == 1\nassert solution.longestNiceSubarray([15, 39, 49, 31, 44, 27, 98, 12, 45, 81]) == 2\nassert solution.longestNiceSubarray([2, 3]) == 1\nassert solution.longestNiceSubarray([71, 28, 59, 75, 5]) == 1\nassert solution.longestNiceSubarray([70, 76, 52, 79, 54]) == 1\nassert solution.longestNiceSubarray([15, 96, 83, 34, 80, 30]) == 2\nassert solution.longestNiceSubarray([59, 10, 20, 40, 33, 89]) == 2\nassert solution.longestNiceSubarray([76, 53, 67]) == 1\nassert solution.longestNiceSubarray([16, 26, 73, 48, 70, 33]) == 2\nassert solution.longestNiceSubarray([45, 25, 71, 40, 16, 3]) == 3\nassert solution.longestNiceSubarray([7, 87, 59, 69, 80]) == 1\nassert solution.longestNiceSubarray([24, 66, 72, 4, 76]) == 2\nassert solution.longestNiceSubarray([28, 17, 47, 3, 50, 74, 41, 75]) == 1\nassert solution.longestNiceSubarray([8, 58, 11]) == 1\nassert solution.longestNiceSubarray([93, 48, 5, 52, 65]) == 2\nassert solution.longestNiceSubarray([26, 27, 30, 74, 1]) == 2\nassert solution.longestNiceSubarray([45, 67, 65, 77, 25, 78]) == 1\nassert solution.longestNiceSubarray([60, 90, 12, 88, 87, 52, 23]) == 1\nassert solution.longestNiceSubarray([74, 5, 98, 82, 92, 4, 12]) == 2\nassert solution.longestNiceSubarray([92, 98, 5, 95, 25]) == 2\nassert solution.longestNiceSubarray([43, 22, 2, 45, 39, 99, 55]) == 2\nassert solution.longestNiceSubarray([48, 63, 1, 19, 51]) == 1\nassert solution.longestNiceSubarray([18, 39, 93, 89, 74, 61]) == 1\nassert solution.longestNiceSubarray([12, 94, 62, 28]) == 1\nassert solution.longestNiceSubarray([64, 86, 84, 23, 19]) == 1\nassert solution.longestNiceSubarray([56, 81, 33, 64]) == 2\nassert solution.longestNiceSubarray([22, 37]) == 1\nassert solution.longestNiceSubarray([32, 62, 33, 59, 26, 11, 69]) == 1\nassert solution.longestNiceSubarray([99, 75, 96, 2, 24, 80, 13, 49]) == 3\nassert solution.longestNiceSubarray([20, 76, 21, 36, 69, 65, 75, 27]) == 1\nassert solution.longestNiceSubarray([27, 1, 80, 94, 32, 71]) == 2\nassert solution.longestNiceSubarray([49, 65, 83, 76, 93, 90, 81]) == 1\nassert solution.longestNiceSubarray([51, 74, 28, 85, 82, 17, 21]) == 1\nassert solution.longestNiceSubarray([79, 22, 21, 92]) == 1\nassert solution.longestNiceSubarray([69, 33, 37, 14, 97, 19, 10]) == 2\nassert solution.longestNiceSubarray([93, 87, 96, 78, 54]) == 1\nassert solution.longestNiceSubarray([94, 24, 40, 53, 58]) == 1\nassert solution.longestNiceSubarray([61, 65, 78, 45, 57]) == 1\nassert solution.longestNiceSubarray([47, 63, 33, 72, 92, 24, 28, 34]) == 2\nassert solution.longestNiceSubarray([39, 69, 76, 65, 81]) == 1\nassert solution.longestNiceSubarray([65, 18, 39, 32, 51, 28, 82, 41, 3, 59]) == 2\nassert solution.longestNiceSubarray([27, 19]) == 1\nassert solution.longestNiceSubarray([66, 93, 8, 100, 52, 98, 94]) == 2\nassert solution.longestNiceSubarray([72, 36, 79, 85, 75]) == 2\nassert solution.longestNiceSubarray([33, 20, 71, 3, 67, 51, 92]) == 2\nassert solution.longestNiceSubarray([94, 53, 5, 79, 99, 48, 60]) == 1\nassert solution.longestNiceSubarray([9, 66, 27, 10, 63, 2, 47, 16, 48, 36]) == 2\nassert solution.longestNiceSubarray([73, 30, 32, 14, 96, 19]) == 2\nassert solution.longestNiceSubarray([31, 13, 75, 2, 60, 47, 41, 45, 38]) == 2\nassert solution.longestNiceSubarray([93, 17, 97, 14, 47]) == 2\nassert solution.longestNiceSubarray([87, 10, 86, 53, 81, 97, 83, 96]) == 1\nassert solution.longestNiceSubarray([65, 86, 69, 52, 31, 60, 5, 72]) == 2\nassert solution.longestNiceSubarray([72, 40, 80, 81]) == 2\nassert solution.longestNiceSubarray([15, 51, 68, 96, 41, 44, 5, 43, 30]) == 2\nassert solution.longestNiceSubarray([88, 64, 16, 26, 15, 51]) == 2\nassert solution.longestNiceSubarray([1, 53, 72, 34, 2, 16, 67]) == 2\nassert solution.longestNiceSubarray([40, 98, 69, 54]) == 1\nassert solution.longestNiceSubarray([3, 54]) == 1\nassert solution.longestNiceSubarray([39, 69, 49, 96, 23, 11, 44, 74, 25]) == 2\nassert solution.longestNiceSubarray([10, 62, 73, 36, 66, 89, 1, 63, 18]) == 2\nassert solution.longestNiceSubarray([89, 86, 90, 71, 5, 74, 14, 55, 39, 22]) == 2\nassert solution.longestNiceSubarray([53, 83, 52, 100, 73, 64, 79]) == 1\nassert solution.longestNiceSubarray([43, 20, 54, 91, 79, 85, 99, 89, 6, 84]) == 2\nassert solution.longestNiceSubarray([32, 72, 44, 82, 99, 5]) == 2\nassert solution.longestNiceSubarray([44, 49, 31, 72]) == 1\nassert solution.longestNiceSubarray([4, 64]) == 2\nassert solution.longestNiceSubarray([20, 97, 50, 99, 62, 61, 16, 75]) == 2\nassert solution.longestNiceSubarray([58, 75, 46, 83, 53, 63, 62, 16, 40, 33]) == 2\nassert solution.longestNiceSubarray([56, 83, 70, 16]) == 2\nassert solution.longestNiceSubarray([13, 48, 92, 2, 9, 43, 75, 33]) == 2\nassert solution.longestNiceSubarray([73, 18, 49, 81, 4, 91, 28, 72]) == 2\nassert solution.longestNiceSubarray([30, 32, 52, 27]) == 2\nassert solution.longestNiceSubarray([65, 82, 84, 88, 86, 58, 48]) == 1\nassert solution.longestNiceSubarray([69, 19, 29, 88, 51, 74, 67]) == 1\nassert solution.longestNiceSubarray([12, 52, 29, 27, 94]) == 1\nassert solution.longestNiceSubarray([67, 57, 12]) == 1\nassert solution.longestNiceSubarray([29, 74]) == 1\nassert solution.longestNiceSubarray([93, 22, 98, 50, 59]) == 1\nassert solution.longestNiceSubarray([24, 39, 44, 43, 11, 19, 8, 42, 91, 73]) == 2\nassert solution.longestNiceSubarray([21, 37, 31, 13, 10, 58, 59, 99, 61, 28]) == 1\nassert solution.longestNiceSubarray([61, 46, 70, 33, 40, 91, 52, 59, 15, 77]) == 2\nassert solution.longestNiceSubarray([7, 30, 13]) == 1\nassert solution.longestNiceSubarray([64, 39]) == 2\nassert solution.longestNiceSubarray([44, 86, 7, 68, 30, 9, 52, 23]) == 2\nassert solution.longestNiceSubarray([85, 33]) == 1\nassert solution.longestNiceSubarray([38, 76, 7, 72]) == 2\nassert solution.longestNiceSubarray([26, 57, 89, 67, 16, 34, 20, 93, 66]) == 2\nassert solution.longestNiceSubarray([41, 83]) == 1",
  "inefficient_solution": "class Solution:\n    def longestNiceSubarray(self, nums):\n        ans = []\n        for x in nums:\n            new_ans = []\n            for i, old_ans in enumerate(ans):\n                if not (old_ans & x):\n                    new_ans.append(old_ans)\n            if not any(old_ans & x for old_ans in ans):\n                new_ans.append(x)\n            ans = new_ans\n            ans.append(x)\n        return len(max(ans, key=len))",
  "is_python": true
}