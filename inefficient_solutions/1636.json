{
  "problem_idx": 1636,
  "task_name": "Sort Array by Increasing Frequency",
  "markdown_description": "\nGiven an array of integers `nums`, sort the array in **increasing** order based on the frequency of the values. If multiple values have the same frequency, sort them in **decreasing** order.\n\n\nReturn the *sorted array*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,2,2,2,3]\n**Output:** [3,1,1,2,2,2]\n**Explanation:** '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,1,3,2]\n**Output:** [1,3,3,2,2]\n**Explanation:** '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [-1,1,-6,4,5,-6,1,4,1]\n**Output:** [5,-1,4,4,-6,-6,1,1,1]\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `-100 <= nums[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def frequencySort(self, nums: List[int]) -> List[int]:\n        cnt = Counter(nums)\n        return sorted(nums, key=lambda x: (cnt[x], -x))\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def frequencySort(self, nums: List[int]) -> List[int]:\n        cnt = Counter(nums)\n        return sorted(nums, key=lambda x: (cnt[x], -x))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(-100, 101), k=random.randint(1, 100))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.frequencySort(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.frequencySort(nums) == expected_result\n        print(f\"assert solution.frequencySort({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.frequencySort({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.frequencySort([-88, -62, 57, -12, -76, 61, 26, 78, 13, -21, -58, -5, 7, 29, -73, 11, 38, 29, 31, -96, 29, 1, -32, -20, -42, 44, 91, 66, -13, 37, 42, 13, -1, 67, -81, -71, -6, 0, 93, 70, 50, -2]) == [93, 91, 78, 70, 67, 66, 61, 57, 50, 44, 42, 38, 37, 31, 26, 11, 7, 1, 0, -1, -2, -5, -6, -12, -13, -20, -21, -32, -42, -58, -62, -71, -73, -76, -81, -88, -96, 13, 13, 29, 29, 29]\nassert solution.frequencySort([-69, 7, 46, 89, -23, 4, 7, 31, -6, -86, -78, 41, -8, -2, 2, -78, -76, 62, -94, 94, -50, -77, 21, 45, 27, 32, -16, 34, -90, 21, 85, -9, -76, 66, -78, -16, 81, 75, 82, -5, 78, -16, -2, -46, -62, 28, -14, -52, -53, 8, 65, -64, -11, 15, 12, 86, 29, 45, 44, -99, 50, -67, -38, -81, 75, -87, -18, 48, 29, 26, 53, 4, 98, 79, 3, 85, 62, 20, 18, -91, -26, -29, -27, -90, 21]) == [98, 94, 89, 86, 82, 81, 79, 78, 66, 65, 53, 50, 48, 46, 44, 41, 34, 32, 31, 28, 27, 26, 20, 18, 15, 12, 8, 3, 2, -5, -6, -8, -9, -11, -14, -18, -23, -26, -27, -29, -38, -46, -50, -52, -53, -62, -64, -67, -69, -77, -81, -86, -87, -91, -94, -99, 85, 85, 75, 75, 62, 62, 45, 45, 29, 29, 7, 7, 4, 4, -2, -2, -76, -76, -90, -90, 21, 21, 21, -16, -16, -16, -78, -78, -78]\nassert solution.frequencySort([-29]) == [-29]\nassert solution.frequencySort([18, 48, 74, 50, 11, 84, -44, 1, -74, -59, 6, -14, -67, -22, 9, 74, -75, 17, -61, 62, -7, 1, 36, -52, -7, 63, 37, 1, 30, 3, -1, -49, -1, 21, -60, 69, 18, -33, -34, -22, 17, -39, 11, -86, -66, -3, -21, -21, -75, -62, -71, 21, 70, -77, 63, -93, 46, 73, 6, -44, 42, -60, -30, 99, -93, 47, 92, 25, 80, 52, 18, -17, -44, -26, 14, 21, 23, -72, -86, -27, -11, -12, 96, -24, 21, 27, 37]) == [99, 96, 92, 84, 80, 73, 70, 69, 62, 52, 50, 48, 47, 46, 42, 36, 30, 27, 25, 23, 14, 9, 3, -3, -11, -12, -14, -17, -24, -26, -27, -30, -33, -34, -39, -49, -52, -59, -61, -62, -66, -67, -71, -72, -74, -77, 74, 74, 63, 63, 37, 37, 17, 17, 11, 11, 6, 6, -1, -1, -7, -7, -21, -21, -22, -22, -60, -60, -75, -75, -86, -86, -93, -93, 18, 18, 18, 1, 1, 1, -44, -44, -44, 21, 21, 21, 21]\nassert solution.frequencySort([-37, -57, 61, 7, -53, 28, -36, -17, 89, 59, 90, 40, 60, 49, 69, -19, 42, 6, 18, -70, -88, 49, -75, 7, -89, -37, 60, -37, -99, -73]) == [90, 89, 69, 61, 59, 42, 40, 28, 18, 6, -17, -19, -36, -53, -57, -70, -73, -75, -88, -89, -99, 60, 60, 49, 49, 7, 7, -37, -37, -37]\nassert solution.frequencySort([-42, 40, -26, -20, -96, 31, -19, -28, -55, 64, 63, -39, 98, -29, 50, -9, 8, -47, -54, -32, 66, -60, 20, -24, -92, 5, -99, -6, 84, 87, 49, 99, 76, -40, 50, 97, -15, -56, -8, -33, 78, 24, 48, -75, 53, 6, -58, 89, -8, 85, -66, -92, -26, -40, 75, 18, -23, 40, -87, -69, -32, -56, 10, -1, -29, 84, 32, 40, 90, 63, 53, -85, 92, -90, -14, -55, 10, -25, -71, 72, -40, 40, -14, -57, -86, 77, 43]) == [99, 98, 97, 92, 90, 89, 87, 85, 78, 77, 76, 75, 72, 66, 64, 49, 48, 43, 32, 31, 24, 20, 18, 8, 6, 5, -1, -6, -9, -15, -19, -20, -23, -24, -25, -28, -33, -39, -42, -47, -54, -57, -58, -60, -66, -69, -71, -75, -85, -86, -87, -90, -96, -99, 84, 84, 63, 63, 53, 53, 50, 50, 10, 10, -8, -8, -14, -14, -26, -26, -29, -29, -32, -32, -55, -55, -56, -56, -92, -92, -40, -40, -40, 40, 40, 40, 40]\nassert solution.frequencySort([91, -41, -100, -15, -69, -57, -19, -74, 84, -60, 9, 57, 25, 23, 0, -10, 0, 48, 9, -14, 46, -11, -59, -35, -24, 15, 57, 95, -45, -38, -31, 0, -29, -17, 60, 71, -50, -44, -43, 20, -21, -88, -42, 45, 12, -49, 25, 32, 88, -89, 52, 28, -64, 81, 96, 20, 8, 84, 72, 52, 87, -54, -34, 41]) == [96, 95, 91, 88, 87, 81, 72, 71, 60, 48, 46, 45, 41, 32, 28, 23, 15, 12, 8, -10, -11, -14, -15, -17, -19, -21, -24, -29, -31, -34, -35, -38, -41, -42, -43, -44, -45, -49, -50, -54, -57, -59, -60, -64, -69, -74, -88, -89, -100, 84, 84, 57, 57, 52, 52, 25, 25, 20, 20, 9, 9, 0, 0, 0]\nassert solution.frequencySort([76, -69, -64, 83, 13, -67, 48, -77, 50, 83, 64, -57, 27, 10, 81, -91, 77, 78, -44, -56, -11, 27, 76, -82, 7, -48, 67, 69, -59, -34, 18, 14, 94, -80, -48, -67, -42, -44, -97]) == [94, 81, 78, 77, 69, 67, 64, 50, 48, 18, 14, 13, 10, 7, -11, -34, -42, -56, -57, -59, -64, -69, -77, -80, -82, -91, -97, 83, 83, 76, 76, 27, 27, -44, -44, -48, -48, -67, -67]\nassert solution.frequencySort([-20, -59, -84, 65, 73, -17, 28, -86, -10, 76, -26, 68, -75, 99, -85, 14, -91, -83, -58, -98, -60, -33, 52, 15, 90, 30, 18, -62, 97, 74, 10, -79, 38, -63, -33, -2, -18, -6, 70, -8, -17, 86, -61, -56, -35, -27, -4, 61, 68, 43, 45, -4, 78, 86, -6, -82]) == [99, 97, 90, 78, 76, 74, 73, 70, 65, 61, 52, 45, 43, 38, 30, 28, 18, 15, 14, 10, -2, -8, -10, -18, -20, -26, -27, -35, -56, -58, -59, -60, -61, -62, -63, -75, -79, -82, -83, -84, -85, -86, -91, -98, 86, 86, 68, 68, -4, -4, -6, -6, -17, -17, -33, -33]\nassert solution.frequencySort([-64, 76, 37, -4, 74, -10, 29, 39, -41, 12, 71, -63, -76, 32, 22, -14, -60, -94, 53, 13, -33, -74, -52, -2, 12, -51, 37, 25, 46, 90, 25, 13, -12, -17, 71, -30, -8, -88, 65, -66, -49, -80, -77, -96, 100, 71, -3, 72, 5, -34, 30, -99, -6, 74, 80, -15, 44, 54, -19, 28, 62]) == [100, 90, 80, 76, 72, 65, 62, 54, 53, 46, 44, 39, 32, 30, 29, 28, 22, 5, -2, -3, -4, -6, -8, -10, -12, -14, -15, -17, -19, -30, -33, -34, -41, -49, -51, -52, -60, -63, -64, -66, -74, -76, -77, -80, -88, -94, -96, -99, 74, 74, 37, 37, 25, 25, 13, 13, 12, 12, 71, 71, 71]\nassert solution.frequencySort([65, 47, 97, -9, 94, -38, -15, -22, -76, -3, -28, -76, -87, -57, 28, 93, -80, 13, -78, 62, -56, 60]) == [97, 94, 93, 65, 62, 60, 47, 28, 13, -3, -9, -15, -22, -28, -38, -56, -57, -78, -80, -87, -76, -76]\nassert solution.frequencySort([43, 2, 84, -58, -21, -39, -8, -98, -54, 11, 49, 94, 68, 81, 59, -80, -81, 60, 86, -65, 56, 35, -6, 41, -68, 4, -100, 87, 98, -80, 14, 96, -65, -17, 61, 38, -17, -78, 94, 97, 90, -18, 99, 79, -5, -6, 8, 79, 68, -99, -62, -33, 97, -30, -8, 93, -36, -63, -14, 0, 57, -71, 2, 33, 56, 20, -37, -64, 42, 42, -56, 6, -11, 75, -79, -71, 45, 91, -46, -48, 14, 37, -6, -39, -40, 64, 77, -14, -90, -27, -21]) == [99, 98, 96, 93, 91, 90, 87, 86, 84, 81, 77, 75, 64, 61, 60, 59, 57, 49, 45, 43, 41, 38, 37, 35, 33, 20, 11, 8, 6, 4, 0, -5, -11, -18, -27, -30, -33, -36, -37, -40, -46, -48, -54, -56, -58, -62, -63, -64, -68, -78, -79, -81, -90, -98, -99, -100, 97, 97, 94, 94, 79, 79, 68, 68, 56, 56, 42, 42, 14, 14, 2, 2, -8, -8, -14, -14, -17, -17, -21, -21, -39, -39, -65, -65, -71, -71, -80, -80, -6, -6, -6]\nassert solution.frequencySort([26, 33, 16, -60, 30, -25, 78, 62, -80, -75, 30, -16, -75, -63, 13, -6, -62, -18, -12, -18, 16, -25, -2, 7, -2, -100, 51, -55, 15, 84, 47, 9, 16, -72, 77, -36, 92, 85, 31, 26, 70, -3, -59, -55, -13, -27, 94, 43, 56, -91, -98, 61, 4, 71, 47, -40, 71, 64, -67, -90, -77, -54, 96, -53, 47, -92, 33, 56, 16, 65, 31, -83, 97, 43, 21, 62, 33, -81, 50, -58, -59, -44, -57, -23, -48, -47, -84]) == [97, 96, 94, 92, 85, 84, 78, 77, 70, 65, 64, 61, 51, 50, 21, 15, 13, 9, 7, 4, -3, -6, -12, -13, -16, -23, -27, -36, -40, -44, -47, -48, -53, -54, -57, -58, -60, -62, -63, -67, -72, -77, -80, -81, -83, -84, -90, -91, -92, -98, -100, 71, 71, 62, 62, 56, 56, 43, 43, 31, 31, 30, 30, 26, 26, -2, -2, -18, -18, -25, -25, -55, -55, -59, -59, -75, -75, 47, 47, 47, 33, 33, 33, 16, 16, 16, 16]\nassert solution.frequencySort([-78, 3, 19, -37, 18, 96, 4, 54, -48, -80, 69, -25, -68, 45, -23, 27, 95, 59, -67, 24, -52, 47, -26, -74, -70, 57, -81, 0, -94]) == [96, 95, 69, 59, 57, 54, 47, 45, 27, 24, 19, 18, 4, 3, 0, -23, -25, -26, -37, -48, -52, -67, -68, -70, -74, -78, -80, -81, -94]\nassert solution.frequencySort([34, -25, -100, 51, 21, 26, -15, 3, 83, 80, -3, 54, -53, 17, -56, 4, -65, -59, 12, -76]) == [83, 80, 54, 51, 34, 26, 21, 17, 12, 4, 3, -3, -15, -25, -53, -56, -59, -65, -76, -100]\nassert solution.frequencySort([-58, -57, 7, -88]) == [7, -57, -58, -88]\nassert solution.frequencySort([54, 40, 0, -71, -31, -92, 99, -46, 18, -8, 60, 88, 92, -84, 51, 52, -80, -22, -24, -99, -60, -79, -58, -91, -88, -95, 4, 30, -38, -68, -52, -41, -54, 70, -65, -75, -98, -43, -33, -100, -50, 1, -5, 68, -36, 55, 46, -86, -76, -80, -1, -31, -62, 57, 44, -100, 46, -59, 46, 53, -19, -90, -27, -67, -11, 66, 94, -37, 89, -69, -76, -25, 86, -71, -92, 87, -55, -53, 35, 89]) == [99, 94, 92, 88, 87, 86, 70, 68, 66, 60, 57, 55, 54, 53, 52, 51, 44, 40, 35, 30, 18, 4, 1, 0, -1, -5, -8, -11, -19, -22, -24, -25, -27, -33, -36, -37, -38, -41, -43, -46, -50, -52, -53, -54, -55, -58, -59, -60, -62, -65, -67, -68, -69, -75, -79, -84, -86, -88, -90, -91, -95, -98, -99, 89, 89, -31, -31, -71, -71, -76, -76, -80, -80, -92, -92, -100, -100, 46, 46, 46]\nassert solution.frequencySort([-12, 87, 20, 37, -99, 7, -75, 59, -15]) == [87, 59, 37, 20, 7, -12, -15, -75, -99]\nassert solution.frequencySort([2, 100, -79, 99, 33, 18, 68, 52, 16, 63, -59, 69, -76, 37, -73, 74, -12, 59, -45, -67, 0, 67, 87, -47, 85, -74]) == [100, 99, 87, 85, 74, 69, 68, 67, 63, 59, 52, 37, 33, 18, 16, 2, 0, -12, -45, -47, -59, -67, -73, -74, -76, -79]\nassert solution.frequencySort([50, -60, -86, -14, 29, -1, -34, 20, 16, -94, -12, 43, -4, 32, -55]) == [50, 43, 32, 29, 20, 16, -1, -4, -12, -14, -34, -55, -60, -86, -94]\nassert solution.frequencySort([82, -2, -84, 88, -64, -28, 90, -83, -40, 6, 49, 24, -2, -52, 61, -95, 17, 5, 84, -75, -84, 30, 71, -13, -28, 34, -57, -69, 84, 97, -90, -94, 15, -4, -6, -17, 76, 75, -51, -78, -58, 4, 75, -28, -95, -82, 5, 2, -87, -28, 53, -3, 43, -81, -34, 8, 72, -26, 27, -11, 36, 52, 37, 99, 40, -69, -69, 95, -100, 88, 34, -59, 50, -19, -98, 19, 18, 89, 82, -80, 24, 44, -100, -59, 57, 64, 21, 61, -96, -86]) == [99, 97, 95, 90, 89, 76, 72, 71, 64, 57, 53, 52, 50, 49, 44, 43, 40, 37, 36, 30, 27, 21, 19, 18, 17, 15, 8, 6, 4, 2, -3, -4, -6, -11, -13, -17, -19, -26, -34, -40, -51, -52, -57, -58, -64, -75, -78, -80, -81, -82, -83, -86, -87, -90, -94, -96, -98, 88, 88, 84, 84, 82, 82, 75, 75, 61, 61, 34, 34, 24, 24, 5, 5, -2, -2, -59, -59, -84, -84, -95, -95, -100, -100, -69, -69, -69, -28, -28, -28, -28]\nassert solution.frequencySort([-66, 40, 22, -92, -43, 57, 65, 40, -42, 60, -60, -30, -18, -90, 19, 61, 78, 88, 65, -89, -35, 94, -31, 42, 28, -79, -70, -99, -63]) == [94, 88, 78, 61, 60, 57, 42, 28, 22, 19, -18, -30, -31, -35, -42, -43, -60, -63, -66, -70, -79, -89, -90, -92, -99, 65, 65, 40, 40]\nassert solution.frequencySort([28, 44, 29, -9, -54, 57, 16, 43, 12, 85, -21, 41, -58, -76, 84, 87, -29, 21, -32, 0, 57, 33, -79, -23, 37, -86, -79, 61, 77, 57, 76, 11, -78, -66, 78, 49, 91, -22, 71, 3, 29]) == [91, 87, 85, 84, 78, 77, 76, 71, 61, 49, 44, 43, 41, 37, 33, 28, 21, 16, 12, 11, 3, 0, -9, -21, -22, -23, -29, -32, -54, -58, -66, -76, -78, -86, 29, 29, -79, -79, 57, 57, 57]\nassert solution.frequencySort([34, 37, 36, -6, 65, 14, -37, 2, -56, -3, -35, 41, 3, 85, 79]) == [85, 79, 65, 41, 37, 36, 34, 14, 3, 2, -3, -6, -35, -37, -56]\nassert solution.frequencySort([18, 97, 3, -1, 74, -22, 52, -2, -53, 36, 34, 39, 16, 70, -86, -62, -29, 5, -7]) == [97, 74, 70, 52, 39, 36, 34, 18, 16, 5, 3, -1, -2, -7, -22, -29, -53, -62, -86]\nassert solution.frequencySort([59, 33, -40, 19, 92, 37, 15, -8, -92, 24, 100, -2, 75, -87, 58, -41, -65, 71, 60, -83, -33, -36, 3, -99, -95, -94, 39, -86, -71, 52, -26, 49, -62, -85, -32, -7, -2, -91, -50, 27, -16, -79, -87, 13, -46, -61, 33, 47, -57, 94, -47, 94, -94, 71, -64, -26, 32, -28, -13, -50, -49, 95, 59, -38, 55]) == [100, 95, 92, 75, 60, 58, 55, 52, 49, 47, 39, 37, 32, 27, 24, 19, 15, 13, 3, -7, -8, -13, -16, -28, -32, -33, -36, -38, -40, -41, -46, -47, -49, -57, -61, -62, -64, -65, -71, -79, -83, -85, -86, -91, -92, -95, -99, 94, 94, 71, 71, 59, 59, 33, 33, -2, -2, -26, -26, -50, -50, -87, -87, -94, -94]\nassert solution.frequencySort([-53, -27, -18, -91, -80, -22, -24, 30, 62, -84, 27, 29, -48, -18, -81, 79, -83, -3, 62, 89, -54, -90, 94, -84, -81, -20, -62, 77, 67]) == [94, 89, 79, 77, 67, 30, 29, 27, -3, -20, -22, -24, -27, -48, -53, -54, -62, -80, -83, -90, -91, 62, 62, -18, -18, -81, -81, -84, -84]\nassert solution.frequencySort([-50, -73, -66, 35, -80, -28, -46, 9, -58, -80, 90, 40, 99, -95, 54, -5, -13, -29, 75, 85, 51, -90, -14, -8, -97, -49, -71, 41, -24, -64, -7, 65, -89, 99, -13, 64, -22, -6, 6, -39, -1, 4, 85, 16, -4, -37, -40, 22, -95, 27, 57, 65, -72, -29, -10, 38, -82, 43, 79, -22, -35, -21, 54, 55, 56, 30, -73, 26, 8]) == [90, 79, 75, 64, 57, 56, 55, 51, 43, 41, 40, 38, 35, 30, 27, 26, 22, 16, 9, 8, 6, 4, -1, -4, -5, -6, -7, -8, -10, -14, -21, -24, -28, -35, -37, -39, -40, -46, -49, -50, -58, -64, -66, -71, -72, -82, -89, -90, -97, 99, 99, 85, 85, 65, 65, 54, 54, -13, -13, -22, -22, -29, -29, -73, -73, -80, -80, -95, -95]\nassert solution.frequencySort([11, -81, -40, 100, -12, 31, 35, -5, 88, 29, 82, 72, 1, 71, -76, -2, -72, 75, 36, 47, -94, -77, -85, 88, -87, 35]) == [100, 82, 75, 72, 71, 47, 36, 31, 29, 11, 1, -2, -5, -12, -40, -72, -76, -77, -81, -85, -87, -94, 88, 88, 35, 35]\nassert solution.frequencySort([-20, -100, -5, -87, 0, 62, -60, 24, -99, -75, 81, -11, -24, -78, -54, -35, -27, -72, -86, 53, 48, -65, -41, 38, 8, 14, 31, 62, -78, 34, 66, 44, -44, -48, 68, 96, 22, 42, 8, 6, -33, 61, -64, 74, 53, -51, 41, -73, -20, -96, 21, -95, 69, -89, 29, 33, -68, 41, 73]) == [96, 81, 74, 73, 69, 68, 66, 61, 48, 44, 42, 38, 34, 33, 31, 29, 24, 22, 21, 14, 6, 0, -5, -11, -24, -27, -33, -35, -41, -44, -48, -51, -54, -60, -64, -65, -68, -72, -73, -75, -86, -87, -89, -95, -96, -99, -100, 62, 62, 53, 53, 41, 41, 8, 8, -20, -20, -78, -78]\nassert solution.frequencySort([-50, -50, -64, 24, -18, -81, -24, -94, -2, 12, 99, 87, -75, 22, 27, -51, -88, 90, -9, -24, -93, -97, -75, 96, 46, 71, -45, 40, -73, -77, -99, -35, -8, 68, 61, -26, -86, -26, -90, -6, -2, 94, 87, -82, 1, -16, -66, 25, 8, 3, -28, 62, 36, -50, 99]) == [96, 94, 90, 71, 68, 62, 61, 46, 40, 36, 27, 25, 24, 22, 12, 8, 3, 1, -6, -8, -9, -16, -18, -28, -35, -45, -51, -64, -66, -73, -77, -81, -82, -86, -88, -90, -93, -94, -97, -99, 99, 99, 87, 87, -2, -2, -24, -24, -26, -26, -75, -75, -50, -50, -50]\nassert solution.frequencySort([-50, -20, -49, -79, -54, -13, -72, -29, 61, 98, -66, 84, -39, 75, 11, -35, -88, 68, -16, 51, -74, -25, 11, -44, -66, 44, 5, -79, -58, 75, -100, 8, -39, 3, 69, -10, 81, 86, 71, 48, -69, -39, -3, -94, 1, -62, -41, 86, 0, 46, -40, 34, -89, -30, -95, 76, 29, 97, 39, -35, 35, -60, 88, 11, 60, 17, -17, 4, 90, -12, 34, 94]) == [98, 97, 94, 90, 88, 84, 81, 76, 71, 69, 68, 61, 60, 51, 48, 46, 44, 39, 35, 29, 17, 8, 5, 4, 3, 1, 0, -3, -10, -12, -13, -16, -17, -20, -25, -29, -30, -40, -41, -44, -49, -50, -54, -58, -60, -62, -69, -72, -74, -88, -89, -94, -95, -100, 86, 86, 75, 75, 34, 34, -35, -35, -66, -66, -79, -79, 11, 11, 11, -39, -39, -39]\nassert solution.frequencySort([92, -47, -11, 30, -14, 29, 16, -100, -5, -17, -18, -33, 74, -10, -83, 91, -29, 97, 82, 80, 4, -90, 97, -64, 65, 8, -72, -5, 76, -2, -5, 39, -73, 100, 92, 10, 18, -41, 36, 86, 65, -63, -29, 55, -81, -82, 64, 88, 8, 28, -57, 30, 37, 88, -19, -57, -14, 66, 34, -22, 38, 86, 10, -46, 66, 68, -33, -12, 38]) == [100, 91, 82, 80, 76, 74, 68, 64, 55, 39, 37, 36, 34, 29, 28, 18, 16, 4, -2, -10, -11, -12, -17, -18, -19, -22, -41, -46, -47, -63, -64, -72, -73, -81, -82, -83, -90, -100, 97, 97, 92, 92, 88, 88, 86, 86, 66, 66, 65, 65, 38, 38, 30, 30, 10, 10, 8, 8, -14, -14, -29, -29, -33, -33, -57, -57, -5, -5, -5]\nassert solution.frequencySort([-58, -63, -40, 7, 30, 57, 47, 30, -20, -47, 26, 79, 45, -72, 100, -41, -68, -19, 29, -15, -67, -34, -2, -28, -16]) == [100, 79, 57, 47, 45, 29, 26, 7, -2, -15, -16, -19, -20, -28, -34, -40, -41, -47, -58, -63, -67, -68, -72, 30, 30]\nassert solution.frequencySort([65, -12, -50, -59, -51, -17, 82, 38, 53, 20, -53, -66, 61, 87, -57, -28, 84, -90, -33, 71, -59, 0, -22, 1, -92, 56, -95, -31, -36, 51, 58, 10, -87, -64, -67, 97, -44, 81, 39, -24, -96, -78, -25, -63, -86, -54, -31, -12, -50, -17, -62, 4, -22, 5, 72, 100, -78, 30, -92, 40, -50, -54, -47, 83, 17, 19, -21, -13, -16, -22, 45, -37, -32, -75, 31, -41, 25, -32, -18]) == [100, 97, 87, 84, 83, 82, 81, 72, 71, 65, 61, 58, 56, 53, 51, 45, 40, 39, 38, 31, 30, 25, 20, 19, 17, 10, 5, 4, 1, 0, -13, -16, -18, -21, -24, -25, -28, -33, -36, -37, -41, -44, -47, -51, -53, -57, -62, -63, -64, -66, -67, -75, -86, -87, -90, -95, -96, -12, -12, -17, -17, -31, -31, -32, -32, -54, -54, -59, -59, -78, -78, -92, -92, -22, -22, -22, -50, -50, -50]\nassert solution.frequencySort([-16, 96, -67, -53, 76, 93, -24, 72, 13, -71, 33, 0, 33, -31, -69, 70, 45, -62, -18, 66, -92, -100, 88, -25, 34, -19, -8, 28, 67, 15, 31, 43, -96, -16, 28, 96, 82, -2, -38, -78, -77, -78, 97, 76, -53, 97, -74, -29, -59, 15, 42, 12, 7, -31, 54, 51, -80, 86, -6, -41, 38, 28, -43, 48, -47, -49, 38, 54, 46, -7, 79, -51, -72, -60, 24]) == [93, 88, 86, 82, 79, 72, 70, 67, 66, 51, 48, 46, 45, 43, 42, 34, 31, 24, 13, 12, 7, 0, -2, -6, -7, -8, -18, -19, -24, -25, -29, -38, -41, -43, -47, -49, -51, -59, -60, -62, -67, -69, -71, -72, -74, -77, -80, -92, -96, -100, 97, 97, 96, 96, 76, 76, 54, 54, 38, 38, 33, 33, 15, 15, -16, -16, -31, -31, -53, -53, -78, -78, 28, 28, 28]\nassert solution.frequencySort([11, 54, 41, 35, 3, 71, 18, 17, -90, 80, -100, -51, 95, -48, -83, 71, 29, 85, -84, 42, 100, 60, 68, 29, -16, -93, -16, -93, -6, 73, 2, -71, -59, -30, -87, -3, 20, 3, 41, 93, 68, -46, 21, -79, 62, -17]) == [100, 95, 93, 85, 80, 73, 62, 60, 54, 42, 35, 21, 20, 18, 17, 11, 2, -3, -6, -17, -30, -46, -48, -51, -59, -71, -79, -83, -84, -87, -90, -100, 71, 71, 68, 68, 41, 41, 29, 29, 3, 3, -16, -16, -93, -93]\nassert solution.frequencySort([-45, -9, 24, -39, -19, 93, 15, 70, -73, -21, -5, -48, -25, -43, -68, 32, -89, -52, -58, -24, -83, -23, -21, -53, 52, 48, 39, 45, 7, 71, -30, 64, -33, 24, 75, -73, -3, -48, 12, 77, -29, 66, -52, -98, -44, 82, 5, 29, 27, 21, 28]) == [93, 82, 77, 75, 71, 70, 66, 64, 52, 48, 45, 39, 32, 29, 28, 27, 21, 15, 12, 7, 5, -3, -5, -9, -19, -23, -24, -25, -29, -30, -33, -39, -43, -44, -45, -53, -58, -68, -83, -89, -98, 24, 24, -21, -21, -48, -48, -52, -52, -73, -73]\nassert solution.frequencySort([-5, -66, -50, -92, -80, -48, 2, -82, -50, -22, 59, -42, -75, 2, -96, -44, 12, -41, -69, -63, -9, -69, -52, 79, 11]) == [79, 59, 12, 11, -5, -9, -22, -41, -42, -44, -48, -52, -63, -66, -75, -80, -82, -92, -96, 2, 2, -50, -50, -69, -69]\nassert solution.frequencySort([-37, 83, -60, -80, 36, -87, -45, 7, 25, -69, -99, -20, -54, -77, 30, -35, 12, -66, -66, 7, -79, 8, 41, 2, -23, -45, -12, 1, 95, 16, 43, -68, 93, -99, -91, -78, 37, -20, 30, -66, 22, 26, -28, -27, 73, -48, -66, 94, -96, 89, -63, -4, 76, 43, 41, -46, 50, 47, 79, -63, -71, 45, 68, -88, -17, 80, -99, -75, -14, -26, 80, 6, -54, 35, 85, -67, -75, 5, -39]) == [95, 94, 93, 89, 85, 83, 79, 76, 73, 68, 50, 47, 45, 37, 36, 35, 26, 25, 22, 16, 12, 8, 6, 5, 2, 1, -4, -12, -14, -17, -23, -26, -27, -28, -35, -37, -39, -46, -48, -60, -67, -68, -69, -71, -77, -78, -79, -80, -87, -88, -91, -96, 80, 80, 43, 43, 41, 41, 30, 30, 7, 7, -20, -20, -45, -45, -54, -54, -63, -63, -75, -75, -99, -99, -99, -66, -66, -66, -66]\nassert solution.frequencySort([69, -29, 79, -38, -25, 72, 6, -7, 91, -31, -26, 14, -72, 26, -47, 10, 44, 34, 9, 54, 71, -88, 89, -54, 80, -89, 28, 3, -49, 22, 47, 68, 33, -88, -23, 16, 0, 21, 89, 76, 35, -29, 72, -66, 64, 69, 52, -62, -85, -76, 9, -97, 2, 76, 56, 86, 87, 7, 41, -37, 86, -39, 95, 79, 75, 87, -59, 21, -23, 70, 32, -96, 89, -14, 22, -19, 81, 76, -92, 75, 98, -13, 55, -98, 69, 44]) == [98, 95, 91, 81, 80, 71, 70, 68, 64, 56, 55, 54, 52, 47, 41, 35, 34, 33, 32, 28, 26, 16, 14, 10, 7, 6, 3, 2, 0, -7, -13, -14, -19, -25, -26, -31, -37, -38, -39, -47, -49, -54, -59, -62, -66, -72, -76, -85, -89, -92, -96, -97, -98, 87, 87, 86, 86, 79, 79, 75, 75, 72, 72, 44, 44, 22, 22, 21, 21, 9, 9, -23, -23, -29, -29, -88, -88, 89, 89, 89, 76, 76, 76, 69, 69, 69]\nassert solution.frequencySort([37, -70, 40, -21, -73, -73, 19, -65, -93, -5, -45, -81, 32, -80, -16, 18, 93, 28, 100, -33, 63, -30, 59, 44, 98, 36, 46, 13, 9, 89, 5, -90, -42, -57, -21, -28, -60, 84, -33, -86, -81, -47, -62, -93, -11, -79, 53, 87, -80, -93, 10, 85, 2, -46, 66, 62, 45]) == [100, 98, 93, 89, 87, 85, 84, 66, 63, 62, 59, 53, 46, 45, 44, 40, 37, 36, 32, 28, 19, 18, 13, 10, 9, 5, 2, -5, -11, -16, -28, -30, -42, -45, -46, -47, -57, -60, -62, -65, -70, -79, -86, -90, -21, -21, -33, -33, -73, -73, -80, -80, -81, -81, -93, -93, -93]\nassert solution.frequencySort([-36, 10, 43, 81, -2, -47, -86, -19, -82, 10, 100, 7, 61, -87, 13, -5, 28, -4, -43, 53, 65, -49, -95, -72, 90, 1, -52, 18, 72, -56, -18, 79, 6, -41, -94, 5, 28, 91, -95, -95, -69, -30, 88, 76, 6, -95, -68, -43, -98, 98, -5, -28, -100, 9, 33, 85, -49, -52, -3, -83, -25, 19, 35, -25, 35, 35, 29, -66, 8, -12, -17, 17, -36, -8, 50, -66, 79, -86, 89, 85, -16, -65, 67, -83, -14, -66, -18, 41]) == [100, 98, 91, 90, 89, 88, 81, 76, 72, 67, 65, 61, 53, 50, 43, 41, 33, 29, 19, 18, 17, 13, 9, 8, 7, 5, 1, -2, -3, -4, -8, -12, -14, -16, -17, -19, -28, -30, -41, -47, -56, -65, -68, -69, -72, -82, -87, -94, -98, -100, 85, 85, 79, 79, 28, 28, 10, 10, 6, 6, -5, -5, -18, -18, -25, -25, -36, -36, -43, -43, -49, -49, -52, -52, -83, -83, -86, -86, 35, 35, 35, -66, -66, -66, -95, -95, -95, -95]\nassert solution.frequencySort([5, -48, 100, -85, -73, 4, 97, 42, -82, -26, -99, 85, -23, 46, -24, -5, 74, -60, -8, -78, -44, 16, 11, 49, 41, 36, 56, 53, 55, -90, -6, 87, 78, -53, -56, -87, 75, 63, -95, -56, 56, 37, 90, -33, 50, -9, -25, 46, 35, 39, -84, 69, -53, -15, -54, -11, -55, 38, -35, 64, -62, 96, -39, 7, 76, -32, -68, -32, -77, 59, 0, 17, 26, -37, 34, 47, -78, -94, -100, -2, 1, -51, 38, 96, 74, 84, 76, 83, -61, -11]) == [100, 97, 90, 87, 85, 84, 83, 78, 75, 69, 64, 63, 59, 55, 53, 50, 49, 47, 42, 41, 39, 37, 36, 35, 34, 26, 17, 16, 11, 7, 5, 4, 1, 0, -2, -5, -6, -8, -9, -15, -23, -24, -25, -26, -33, -35, -37, -39, -44, -48, -51, -54, -55, -60, -61, -62, -68, -73, -77, -82, -84, -85, -87, -90, -94, -95, -99, -100, 96, 96, 76, 76, 74, 74, 56, 56, 46, 46, 38, 38, -11, -11, -32, -32, -53, -53, -56, -56, -78, -78]\nassert solution.frequencySort([-27, 99, -44, 71, 13, 57, -42, 94, -46, 1, -4, 41, 50, 22, 83, 1, -36, -69, -31, -24, 21, 69, 32, -26, 18, 94, -100, -25, 72, 89, 49, 9, -8, 60, 94, -72, -5, -18, 2, 79, 13, 44, -35, 58, 28, 3, -15, 47, 45, -4, -68, -39, -29, 33, -59, -95, -70, 10, -92, -33, -24, -21, -43, -71, -43, -5, 56, -66, -30, -85, 2, -48, -79, 73, 13, 51, -53, -73, -1]) == [99, 89, 83, 79, 73, 72, 71, 69, 60, 58, 57, 56, 51, 50, 49, 47, 45, 44, 41, 33, 32, 28, 22, 21, 18, 10, 9, 3, -1, -8, -15, -18, -21, -25, -26, -27, -29, -30, -31, -33, -35, -36, -39, -42, -44, -46, -48, -53, -59, -66, -68, -69, -70, -71, -72, -73, -79, -85, -92, -95, -100, 2, 2, 1, 1, -4, -4, -5, -5, -24, -24, -43, -43, 94, 94, 94, 13, 13, 13]\nassert solution.frequencySort([70, 31, 67, 22, 83, 31, 73, -25, -38, -91, 34, 88, 88, -84, 52, 28, 98, -68, -42, -43, -52, 28, -88, -45, 11]) == [98, 83, 73, 70, 67, 52, 34, 22, 11, -25, -38, -42, -43, -45, -52, -68, -84, -88, -91, 88, 88, 31, 31, 28, 28]\nassert solution.frequencySort([-62, -22, -47, 75, 23, 70, -58, -20, 38, -87, 80, 71, -7, 34, 78, 70, 12, 21, 45, 48, 5, 90, 8, -87, 95, -33, 35, -21, 15, -39, -51, 30, -91, 100, -66, 61, 53, -63, 39, -28, 33, 70, -19, -23, 87, -48, -29, 91, -86, -53, -3, 50]) == [100, 95, 91, 90, 87, 80, 78, 75, 71, 61, 53, 50, 48, 45, 39, 38, 35, 34, 33, 30, 23, 21, 15, 12, 8, 5, -3, -7, -19, -20, -21, -22, -23, -28, -29, -33, -39, -47, -48, -51, -53, -58, -62, -63, -66, -86, -91, -87, -87, 70, 70, 70]\nassert solution.frequencySort([48, 1, 19, -32, 7, 62, -40, -92, 100, -88, 30, 21, 64, -12, 64, 78, -86, -39, -48, 88, 14, -22, 78, 46, -49, 39, -58, -2, -28, -47, 74, -21, -8, 66, 92, -73, -95, 46, -88, 29, 99, 2, -44, -64, -75, 80, -89, 73, 43, 3, 2, -97, 80, -37, 49, -71, -26, -52, -1, -50, 8, 48, -31, 77, -86, -96, -69, 75, -21]) == [100, 99, 92, 88, 77, 75, 74, 73, 66, 62, 49, 43, 39, 30, 29, 21, 19, 14, 8, 7, 3, 1, -1, -2, -8, -12, -22, -26, -28, -31, -32, -37, -39, -40, -44, -47, -48, -49, -50, -52, -58, -64, -69, -71, -73, -75, -89, -92, -95, -96, -97, 80, 80, 78, 78, 64, 64, 48, 48, 46, 46, 2, 2, -21, -21, -86, -86, -88, -88]\nassert solution.frequencySort([89, 7, -18, -70, 47, 72, -35, 62, 54, -95, -68, -41, 66, -88, -90, -58, 5, 87, -48, 17, 73, 84, -12]) == [89, 87, 84, 73, 72, 66, 62, 54, 47, 17, 7, 5, -12, -18, -35, -41, -48, -58, -68, -70, -88, -90, -95]\nassert solution.frequencySort([78, -86, 96, 58, -30, -51, 16, 26, 92, 32, -95, 26, 39, -9, -92, 67, 6, -77, -31, -10, -78, 28, -28, 57, -97, -86, 58, 86, 84, 76, -88, 78, 13, -89, -51, 51]) == [96, 92, 86, 84, 76, 67, 57, 51, 39, 32, 28, 16, 13, 6, -9, -10, -28, -30, -31, -77, -78, -88, -89, -92, -95, -97, 78, 78, 58, 58, 26, 26, -51, -51, -86, -86]\nassert solution.frequencySort([-43, 4, -16, -47, 20, -74, -20, 100, -97, 13, 15, -35]) == [100, 20, 15, 13, 4, -16, -20, -35, -43, -47, -74, -97]\nassert solution.frequencySort([-90, 99, 84, 68, -48, -90, 78, 3, 56, 57, -92, 59, -75, -15, -33, -6, -34, 88, 74, 93, -62, -2, -5, 37, -19, -28, 31, -75, 74, 79, 88, -75, 44, 46, -52, 74, 36, -13, 41, 35, 66, 41, -19, -47, -53, 9, 68, -42, -13, -69, 82, 65, -25, -69, 15, -17, 58, -91, 12, -89, -27, 26, -56, -11, 20, 100, 6, 71, -81, 10, 12, 61, 72, -15, -1, -67, 87, 84, -25, 87, 33, -15, -82, 92, -80, -88, -95, 56, 5, -10, -7, 89, 99, 87, 53, 62, -71, 18]) == [100, 93, 92, 89, 82, 79, 78, 72, 71, 66, 65, 62, 61, 59, 58, 57, 53, 46, 44, 37, 36, 35, 33, 31, 26, 20, 18, 15, 10, 9, 6, 5, 3, -1, -2, -5, -6, -7, -10, -11, -17, -27, -28, -33, -34, -42, -47, -48, -52, -53, -56, -62, -67, -71, -80, -81, -82, -88, -89, -91, -92, -95, 99, 99, 88, 88, 84, 84, 68, 68, 56, 56, 41, 41, 12, 12, -13, -13, -19, -19, -25, -25, -69, -69, -90, -90, 87, 87, 87, 74, 74, 74, -15, -15, -15, -75, -75, -75]\nassert solution.frequencySort([73, -98, -76, 14, 96, 73, 6, -7, -2, -71, 20, 96, 40, -92, 6, -42, -13, -58, 34, -15, 19, 65, 51, 26, 30, 41, 35, -36, -53, 78, 32, 51, 23, 92, 52, -61, -40, -73, 96, 4, -60, 90, 79, 95, -80, 97, -26, 70, 83, -63, -93, -24, 90, -68, -34, -17, -5, -95, -94, -99, -69, -81, 46, -54, -56, 63, -82, -40, 98, -50, -13, 84, 81, -43, -97, -5, -5, 47, -49, 30, -4, 71, 63, -44, 88, -3, 31, -96, 80, -10, -98, 30, 82, 66, -33, -93, -10, -86]) == [98, 97, 95, 92, 88, 84, 83, 82, 81, 80, 79, 78, 71, 70, 66, 65, 52, 47, 46, 41, 40, 35, 34, 32, 31, 26, 23, 20, 19, 14, 4, -2, -3, -4, -7, -15, -17, -24, -26, -33, -34, -36, -42, -43, -44, -49, -50, -53, -54, -56, -58, -60, -61, -63, -68, -69, -71, -73, -76, -80, -81, -82, -86, -92, -94, -95, -96, -97, -99, 90, 90, 73, 73, 63, 63, 51, 51, 6, 6, -10, -10, -13, -13, -40, -40, -93, -93, -98, -98, 96, 96, 96, 30, 30, 30, -5, -5, -5]\nassert solution.frequencySort([81, -59, 4, -53, -91, 36, -8, 57, 16, 33, -33, 75, -93, 31, -79, 27, 92, 1, 54, -18, 100, 21, -16, -45, 38, 22, -95, 29, 14, 42, -9, 18, 11, 57, -3, 75, 28, 24, -62, -63, -20, -73, 50, -59, 30, -16, 19, -13, -27, 33, 31, -52, 87, -43, -20, 44, -84, -33, 72, -79, -90, -39, 41, 41, 86, -57, 14, -95, 56, 3, 49, -22, -84, -70, 8]) == [100, 92, 87, 86, 81, 72, 56, 54, 50, 49, 44, 42, 38, 36, 30, 29, 28, 27, 24, 22, 21, 19, 18, 16, 11, 8, 4, 3, 1, -3, -8, -9, -13, -18, -22, -27, -39, -43, -45, -52, -53, -57, -62, -63, -70, -73, -90, -91, -93, 75, 75, 57, 57, 41, 41, 33, 33, 31, 31, 14, 14, -16, -16, -20, -20, -33, -33, -59, -59, -79, -79, -84, -84, -95, -95]\nassert solution.frequencySort([84, -36, 69, 79, 58, -55, 15, 58, 19, 67, 40, 27, -16, 69, 22, -23, -23, 67, -68, 82, 41]) == [84, 82, 79, 41, 40, 27, 22, 19, 15, -16, -36, -55, -68, 69, 69, 67, 67, 58, 58, -23, -23]\nassert solution.frequencySort([-7]) == [-7]\nassert solution.frequencySort([-51, -2, -89, 38, 43, 27, 46, -61, 80, 78, 72, -74, 84, 26, 52, -8, -69, 35, -10, 84, -48, 88, -69, -47, 18, 50, -85, 83, -93, -68, -60, -80, 38, -30, -18, 83, -45, -72, -47, -43, 18, 87, -100, -97, 22, -70, -40, -65, -53, -73, -68, -78, -98, -68, 93, -91, 40, -23, -62, 1, -69, 75, -52, -43, 90, 52, -71, -90, 27]) == [93, 90, 88, 87, 80, 78, 75, 72, 50, 46, 43, 40, 35, 26, 22, 1, -2, -8, -10, -18, -23, -30, -40, -45, -48, -51, -52, -53, -60, -61, -62, -65, -70, -71, -72, -73, -74, -78, -80, -85, -89, -90, -91, -93, -97, -98, -100, 84, 84, 83, 83, 52, 52, 38, 38, 27, 27, 18, 18, -43, -43, -47, -47, -68, -68, -68, -69, -69, -69]\nassert solution.frequencySort([-43, 78, -55, -56, 1, -73, 41, 11, -3, 72, -91, 85, -30, -27, -57, 84, 88, -62, -16, -17, 59, -22, -66, -89, 50, 20, 3, 45, 12, 80, 3, 95, -36, 63, 50, 81, 61, 24, -83, 69, 26, 89, 76, -8, -88, -62]) == [95, 89, 88, 85, 84, 81, 80, 78, 76, 72, 69, 63, 61, 59, 45, 41, 26, 24, 20, 12, 11, 1, -3, -8, -16, -17, -22, -27, -30, -36, -43, -55, -56, -57, -66, -73, -83, -88, -89, -91, 50, 50, 3, 3, -62, -62]\nassert solution.frequencySort([85, -46, -94, 64, -59, 89, -99, -70, -29, 55, -97, -54, -38, 22, 77, -97, -13, -40, -41, 94, 88, -46, -85, 22, -73, -72, -35, -55, -16, 62, -46, 57, 41, 71, 58, 60, -91, -36, 22, 42, -65, -24, -45, 86, -45, 35, 9, 60, 4, -37, -94, 79, -8, 87, 2, 38, -33, -52, 5, 73, 76, 0, -80, -82, -33, 88, 26, -50, -86, 45, 61, 13, -7, 74, -55, -41, 61, -86, 83, -44, 46, -32, -52, 38, -38, -76, -69, 51, 1, 41, 42, 46, -10, -33, 19, -60, 58, -51]) == [94, 89, 87, 86, 85, 83, 79, 77, 76, 74, 73, 71, 64, 62, 57, 55, 51, 45, 35, 26, 19, 13, 9, 5, 4, 2, 1, 0, -7, -8, -10, -13, -16, -24, -29, -32, -35, -36, -37, -40, -44, -50, -51, -54, -59, -60, -65, -69, -70, -72, -73, -76, -80, -82, -85, -91, -99, 88, 88, 61, 61, 60, 60, 58, 58, 46, 46, 42, 42, 41, 41, 38, 38, -38, -38, -41, -41, -45, -45, -52, -52, -55, -55, -86, -86, -94, -94, -97, -97, 22, 22, 22, -33, -33, -33, -46, -46, -46]\nassert solution.frequencySort([-62, 4, -87, 5, -11, -81, 90, -77, 31, 49, 45, 68, -24, -2, 71, 45, 37, 12, 15, 24, -81, -5, 100, 99, -100, 11, -64, -21, 82, -80, -61, -2, -1, -31, 24, -85, -58, -57]) == [100, 99, 90, 82, 71, 68, 49, 37, 31, 15, 12, 11, 5, 4, -1, -5, -11, -21, -24, -31, -57, -58, -61, -62, -64, -77, -80, -85, -87, -100, 45, 45, 24, 24, -2, -2, -81, -81]\nassert solution.frequencySort([-19, -65, -26, -12, -39, 16, -65, -89, 82, -95, -17, 13, -5, -52, -36, 92, -87, 30, 82, -79, 89, -70, 47, 39, 89, 81, -55, 28, -55, 14, -56, -3, 54, -3, -17, -97, 40, 32, -65, 70, -25, 7, -24, 27, 1, 77, -25]) == [92, 81, 77, 70, 54, 47, 40, 39, 32, 30, 28, 27, 16, 14, 13, 7, 1, -5, -12, -19, -24, -26, -36, -39, -52, -56, -70, -79, -87, -89, -95, -97, 89, 89, 82, 82, -3, -3, -17, -17, -25, -25, -55, -55, -65, -65, -65]\nassert solution.frequencySort([-97, 81, 36, -5, -5, 91, -48, 5, -62, 24, -54, 71, 84, 9, 36, 32, 47, -15, -4, -54, -96, 64, -32, -5, 59, 49, 44, -85, -40, 8, 37, -46, -32, 15, 14, -60, 49, 14, -9, 45, -37, 46, 100, 26, -41, 5, -14, 54, 83, -99, 42, 55, -62, -81, 79, -61, -78, -65, 1, -32, -47, -51, -56, 5, -13, -22, 81, 59, -66, 86, 25, 18, -10, -93, 70, 93, -60, 80, -73, 36, 61, -87, -93, 17, -29, 28, -99, 7, 69, -41, -2, -96]) == [100, 93, 91, 86, 84, 83, 80, 79, 71, 70, 69, 64, 61, 55, 54, 47, 46, 45, 44, 42, 37, 32, 28, 26, 25, 24, 18, 17, 15, 9, 8, 7, 1, -2, -4, -9, -10, -13, -14, -15, -22, -29, -37, -40, -46, -47, -48, -51, -56, -61, -65, -66, -73, -78, -81, -85, -87, -97, 81, 81, 59, 59, 49, 49, 14, 14, -41, -41, -54, -54, -60, -60, -62, -62, -93, -93, -96, -96, -99, -99, 36, 36, 36, 5, 5, 5, -5, -5, -5, -32, -32, -32]\nassert solution.frequencySort([-81, -89, 73, 27, 69, 72, 28, 17, -24, -32, 57, 62, -42, -40, -44, -48, 68, -49, -13, -90, -96, -43, -18, -59, -84, 32, -43, 11, -93, -85, 70, -28, -88, 7, 63, -34, -73, -16, 74, 69, 78, -13, -7, -51, -46, -47, -52, 83, -50, 20, -23, 100, 14]) == [100, 83, 78, 74, 73, 72, 70, 68, 63, 62, 57, 32, 28, 27, 20, 17, 14, 11, 7, -7, -16, -18, -23, -24, -28, -32, -34, -40, -42, -44, -46, -47, -48, -49, -50, -51, -52, -59, -73, -81, -84, -85, -88, -89, -90, -93, -96, 69, 69, -13, -13, -43, -43]\nassert solution.frequencySort([33, -100, 23, 85, -3, 2, -72, -3, -9, 83, 32, -52, -87, 40, 39, 19, -15, 64, -57, 89, 86, -38, 52, -97, 76, 38, 92, -88, 79, -81, 70, 45]) == [92, 89, 86, 85, 83, 79, 76, 70, 64, 52, 45, 40, 39, 38, 33, 32, 23, 19, 2, -9, -15, -38, -52, -57, -72, -81, -87, -88, -97, -100, -3, -3]\nassert solution.frequencySort([-92, -24, -23, 13, 9, -69, -97, 47, 56, -97, -24, 99, -7, -15, 30, 43, 41, -66, 48, -55, 38, 6, 92, -97, 70, 29, 63, -88, 14, -47, -18, 7, -64, 79, 96]) == [99, 96, 92, 79, 70, 63, 56, 48, 47, 43, 41, 38, 30, 29, 14, 13, 9, 7, 6, -7, -15, -18, -23, -47, -55, -64, -66, -69, -88, -92, -24, -24, -97, -97, -97]\nassert solution.frequencySort([36, -22, 15, 9, 87, -56, -59, 27, 64, -73, -90, 10, -100, -31, 58, 84, 16, -69, -91, 56, 90, 43, 91, 23, 37, -53, 39, 61, -62, 79, -64, 41, 77, -84, 73, 58, -52, -65, 67, -76, 46, -51, 19, 89, 81, -61, 58, -23, 22, -41, -74, -12, 47, -40, -96, -78]) == [91, 90, 89, 87, 84, 81, 79, 77, 73, 67, 64, 61, 56, 47, 46, 43, 41, 39, 37, 36, 27, 23, 22, 19, 16, 15, 10, 9, -12, -22, -23, -31, -40, -41, -51, -52, -53, -56, -59, -61, -62, -64, -65, -69, -73, -74, -76, -78, -84, -90, -91, -96, -100, 58, 58, 58]\nassert solution.frequencySort([-23, 41, 64, -42, -89, 27, -92, 64, -59, 88, 15, -5, 41, -48, 93, 25, 90, 73, 40, 39, 76, -78, -1, 76, 72, 75, -38, -54, -13, 13, 43, -79, 90, 69, -51, -79, 58, -28, -97, -8, -54, 42, 32, -21, -58, -64, -5, 64, 16, -14, 1, -100, -33, 40, 81, 25, 58, -42, -47, 82, -6, -10, -66, 52, 49, -42, 68, 5, 68, 69, -26, 59]) == [93, 88, 82, 81, 75, 73, 72, 59, 52, 49, 43, 42, 39, 32, 27, 16, 15, 13, 5, 1, -1, -6, -8, -10, -13, -14, -21, -23, -26, -28, -33, -38, -47, -48, -51, -58, -59, -64, -66, -78, -89, -92, -97, -100, 90, 90, 76, 76, 69, 69, 68, 68, 58, 58, 41, 41, 40, 40, 25, 25, -5, -5, -54, -54, -79, -79, 64, 64, 64, -42, -42, -42]\nassert solution.frequencySort([63, 74, -18, -44, -60, 94, 40, -4, -96, -11, 99, 8, 84, 4, -12, 61, -95, 89, 9, 11, -17, -73, 38, 25, -82, -90, -36, -99, -7, -81, -95, 63, 55, -75, 1, 70, -90, 57, 99, -79, -100, -6, 66, -75, 57, 17, 33, 71, 50, -89, -11, -28, -26, 50, 15, -19, 49, -26, -94, 35, 77, 88, -84, 54, -81, 88, -3, -6, 0, -16, -51, -2, -90, 5, -3, -98, -68, -72, -51, -97, 65, -23, -24, -5, 65, -32, 74, -91, 67, 29]) == [94, 89, 84, 77, 71, 70, 67, 66, 61, 55, 54, 49, 40, 38, 35, 33, 29, 25, 17, 15, 11, 9, 8, 5, 4, 1, 0, -2, -4, -5, -7, -12, -16, -17, -18, -19, -23, -24, -28, -32, -36, -44, -60, -68, -72, -73, -79, -82, -84, -89, -91, -94, -96, -97, -98, -99, -100, 99, 99, 88, 88, 74, 74, 65, 65, 63, 63, 57, 57, 50, 50, -3, -3, -6, -6, -11, -11, -26, -26, -51, -51, -75, -75, -81, -81, -95, -95, -90, -90, -90]\nassert solution.frequencySort([99, 29, 64, 92, 42, -41, -100, 52, 94, -25, 95, 47, -30, -63, 21, -80, -4, -67, -75, 48, -48, 89, -2, -98, -59, 41, 5, -90, 41, -35, 67, -30, 39, 45, 8, -51, 9, -92, -88, -88, 31, 24, 92, -35, 65, 71, 68, 85, -56, -87, 62, 14, 90, -27, -53, 7, 0, 44, -93, -24, -59, -3, 34, -20, -2, -68, -36, -94, 5, -19, -88, 33, 3, 31, -30, -49, 65, -54, -98, -2, 69, 52, 47, -47, -9, -37, 58, -72, 0]) == [99, 95, 94, 90, 89, 85, 71, 69, 68, 67, 64, 62, 58, 48, 45, 44, 42, 39, 34, 33, 29, 24, 21, 14, 9, 8, 7, 3, -3, -4, -9, -19, -20, -24, -25, -27, -36, -37, -41, -47, -48, -49, -51, -53, -54, -56, -63, -67, -68, -72, -75, -80, -87, -90, -92, -93, -94, -100, 92, 92, 65, 65, 52, 52, 47, 47, 41, 41, 31, 31, 5, 5, 0, 0, -35, -35, -59, -59, -98, -98, -2, -2, -2, -30, -30, -30, -88, -88, -88]\nassert solution.frequencySort([10, 30, 11, -54, -22, -58, -21, -39, -80, -86, -52, -98, 47, 71, -32, -46, 33, -85, 23, 30, 75, 6, -71, 95, 69, -38, 0, 36, -85, 75, -58, 7, 13, -57, -13, 20, 32, -54, 50, 43, -23, -82, -68, -49, 69, -31, 43, 12, -11, -61, -68, 31, 96, 16, -73, 43, -15, 82, -90, 78, -50, -92, -57, -27, 9, 8, -64, 53, -49, -84, 28, 0, 95, -92, 17, -17, 61, -26, 47, 25, -88, 86, -4, -72, -49, 16, -73, -8, -66, 22, 2, 63, 25, 21, 56, -16, 97, -27]) == [97, 96, 86, 82, 78, 71, 63, 61, 56, 53, 50, 36, 33, 32, 31, 28, 23, 22, 21, 20, 17, 13, 12, 11, 10, 9, 8, 7, 6, 2, -4, -8, -11, -13, -15, -16, -17, -21, -22, -23, -26, -31, -32, -38, -39, -46, -50, -52, -61, -64, -66, -71, -72, -80, -82, -84, -86, -88, -90, -98, 95, 95, 75, 75, 69, 69, 47, 47, 30, 30, 25, 25, 16, 16, 0, 0, -27, -27, -54, -54, -57, -57, -58, -58, -68, -68, -73, -73, -85, -85, -92, -92, 43, 43, 43, -49, -49, -49]\nassert solution.frequencySort([38, -5, -6, 83, -76, -51, -42, -91, 81, 33, 5, 12, -12, 71, -83, 19, 36, 65, 76, 59, 34, -87, 65, 75, -68, -40, 22, 31, 72, -60, 68, -45, -17, -95, -26, -38, -34, 6, 58, -50, 10, -81, -100, -77, -22, 89, -87, 48, -13, -82, -76, -2, 64, -37, -16, 87, -38, -17, 15, -64, -54, 8, 67, -29, 88, -44, -7, 84, 100, -28, 33, -25, 17, -4, 27, -26, -52, -69, 66]) == [100, 89, 88, 87, 84, 83, 81, 76, 75, 72, 71, 68, 67, 66, 64, 59, 58, 48, 38, 36, 34, 31, 27, 22, 19, 17, 15, 12, 10, 8, 6, 5, -2, -4, -5, -6, -7, -12, -13, -16, -22, -25, -28, -29, -34, -37, -40, -42, -44, -45, -50, -51, -52, -54, -60, -64, -68, -69, -77, -81, -82, -83, -91, -95, -100, 65, 65, 33, 33, -17, -17, -26, -26, -38, -38, -76, -76, -87, -87]\nassert solution.frequencySort([1, -59, 66, 29, 61, 47, -3, -45, 27, 44, 70, 97, 83, 21, -6, -19, -2, 58, 35, -94, 77, 82, -90, -35, 15, 56, 58, 30, 28, 26, -29, -70, 37, -38, 20, 55, 26, -41, 57, -8, 64, 52, 41, 63, 88, 24, 19]) == [97, 88, 83, 82, 77, 70, 66, 64, 63, 61, 57, 56, 55, 52, 47, 44, 41, 37, 35, 30, 29, 28, 27, 24, 21, 20, 19, 15, 1, -2, -3, -6, -8, -19, -29, -35, -38, -41, -45, -59, -70, -90, -94, 58, 58, 26, 26]\nassert solution.frequencySort([38, -14, -62, 9, 51, 94, 19, -42, -68, 9, -92, -54, -37, 82, 89, -65, 4, -60, 24, -37, -95, -65, -49, -22, -53, -91, 94, -60, -37, -59, -40, 96, -84, -71, 67, -23, -52, 52, 62, -47, 27, 84, -66, -5, 23, -54, 15, -30, -100, 74, -72, 78, -86, 44, -85, -63, -24, 100, 34, -76, 70, -97, 43, -47, -33, 97, 1, 12, 79, 89, 82, 30, 33, -48, -28, 72, 59, -15, -10, -62, 56, 60, -24, -70, 65, -15, 9, 15, 18, 29]) == [100, 97, 96, 84, 79, 78, 74, 72, 70, 67, 65, 62, 60, 59, 56, 52, 51, 44, 43, 38, 34, 33, 30, 29, 27, 24, 23, 19, 18, 12, 4, 1, -5, -10, -14, -22, -23, -28, -30, -33, -40, -42, -48, -49, -52, -53, -59, -63, -66, -68, -70, -71, -72, -76, -84, -85, -86, -91, -92, -95, -97, -100, 94, 94, 89, 89, 82, 82, 15, 15, -15, -15, -24, -24, -47, -47, -54, -54, -60, -60, -62, -62, -65, -65, 9, 9, 9, -37, -37, -37]\nassert solution.frequencySort([-60, -80, -18, -61, 88, 96, 97, 48, -39, -80, -86, 62, -66, -22, 84, -14, 92, -59, 0, 79, 35, 13, 58, -91, 69, 81, -67, 36, 12, 60, 31, -29, 52, -42, 37, -95, -66, -76, -100, 93, 97, 62, 84, -77, -61, 67, 81, -13, -76, -75, -15, -86, -4, 66, 94, 16, -52, -32, 32, -40, 2, 22, -61, 72, -52, 12, 24, -80, 62, 5, 99, 10, 57, -88, 69, 62, 10, -36, 47, 22, -48, -33, -56]) == [99, 96, 94, 93, 92, 88, 79, 72, 67, 66, 60, 58, 57, 52, 48, 47, 37, 36, 35, 32, 31, 24, 16, 13, 5, 2, 0, -4, -13, -14, -15, -18, -22, -29, -32, -33, -36, -39, -40, -42, -48, -56, -59, -60, -67, -75, -77, -88, -91, -95, -100, 97, 97, 84, 84, 81, 81, 69, 69, 22, 22, 12, 12, 10, 10, -52, -52, -66, -66, -76, -76, -86, -86, -61, -61, -61, -80, -80, -80, 62, 62, 62, 62]\nassert solution.frequencySort([-99, -42, 70, -83, -13, -29, 76, -52, 99, 95, 57, 46, 22]) == [99, 95, 76, 70, 57, 46, 22, -13, -29, -42, -52, -83, -99]\nassert solution.frequencySort([-35, 63, -60, -34, -100, 68, 48, -44, -21, -28, -16, -29, 51, 70]) == [70, 68, 63, 51, 48, -16, -21, -28, -29, -34, -35, -44, -60, -100]\nassert solution.frequencySort([-44, 15, 33, -80, -96, 41, 12, 35, -26, -22, 72, -52, 53, -69, -48, 13, -75, -77, 88, -47, 76, -49, -80, 32, 36, 90, -75, 53, 11, 70, -13, -95, 79, -55, 37, -82, -91, -96, -38, -26, 35, -84, -74, -70, -71, 38, -76, 4, -46, 91, -38, -4, -31, -96, -28, -26, -44, 10, -17, -13, 56, 29, 22, 11, 72, 92, -70, -68, 49, -65, 19, -17, -2, 91, 1, 27]) == [92, 90, 88, 79, 76, 70, 56, 49, 41, 38, 37, 36, 33, 32, 29, 27, 22, 19, 15, 13, 12, 10, 4, 1, -2, -4, -22, -28, -31, -46, -47, -48, -49, -52, -55, -65, -68, -69, -71, -74, -76, -77, -82, -84, -91, -95, 91, 91, 72, 72, 53, 53, 35, 35, 11, 11, -13, -13, -17, -17, -38, -38, -44, -44, -70, -70, -75, -75, -80, -80, -26, -26, -26, -96, -96, -96]\nassert solution.frequencySort([-47, -63, 56, -56, -1, 58, -18, 73, 2, -32, -22, -61, 34, -12, -29, 20, 13, -89, 53, 82, -77, 19, 64, 63, -9, 98, 93, 57, 84, 32, -62, -32, 69, -66, 99, 3, -79, 0, 15, -64, -51, -85, -13, 76, 75, 74, 59, 88, 79, -12, 35, -12, 5, -86, 87, -91, -49, -91, 40, -84, 60, 67, 47, 31, 17, -1, 23, 84, 72, -99, 81, 82, -47, -14, 16, -81, -12, 12, 74, 6, -54, 91, -96, 82, 45, -50, 76]) == [99, 98, 93, 91, 88, 87, 81, 79, 75, 73, 72, 69, 67, 64, 63, 60, 59, 58, 57, 56, 53, 47, 45, 40, 35, 34, 32, 31, 23, 20, 19, 17, 16, 15, 13, 12, 6, 5, 3, 2, 0, -9, -13, -14, -18, -22, -29, -49, -50, -51, -54, -56, -61, -62, -63, -64, -66, -77, -79, -81, -84, -85, -86, -89, -96, -99, 84, 84, 76, 76, 74, 74, -1, -1, -32, -32, -47, -47, -91, -91, 82, 82, 82, -12, -12, -12, -12]\nassert solution.frequencySort([-12, -46, -45, -1, -91, -51, -30, 37, -77, -89, 94, 52, 4, -49, 73, -13, -54, -15]) == [94, 73, 52, 37, 4, -1, -12, -13, -15, -30, -45, -46, -49, -51, -54, -77, -89, -91]\nassert solution.frequencySort([-89, 56, 80, -47, -58, 64, -8, -46, 89, -89, 67, -90, 0, -96, -28, -46, -54, -48, 41, 92, 21, -98, 35, -91, 41, -12, -47, -17, -74, -32, 14, 79, 41, 64, -50, -74, 47, 53, -99, -75, 41, -82, 39, -73, -91, -99, 5, 13, 74, -71, 49, 68, 1, -50, -69, -28]) == [92, 89, 80, 79, 74, 68, 67, 56, 53, 49, 47, 39, 35, 21, 14, 13, 5, 1, 0, -8, -12, -17, -32, -48, -54, -58, -69, -71, -73, -75, -82, -90, -96, -98, 64, 64, -28, -28, -46, -46, -47, -47, -50, -50, -74, -74, -89, -89, -91, -91, -99, -99, 41, 41, 41, 41]\nassert solution.frequencySort([7, 38, -4, 79, 20, 62, -75, 17, -29, -18, 34, 46, 94, 71, 16, 74, 46, 0, -20, 46, -54, 95, 85, -93, 69, 30, -69, -42, -33, 50, -82, -17, -43, 84, -89, 44]) == [95, 94, 85, 84, 79, 74, 71, 69, 62, 50, 44, 38, 34, 30, 20, 17, 16, 7, 0, -4, -17, -18, -20, -29, -33, -42, -43, -54, -69, -75, -82, -89, -93, 46, 46, 46]\nassert solution.frequencySort([72, 66, -52, -65, -88, -55, 35, -84, 99, 56, -65, -76, -58, 21, 72, 70, 91, -73, -19, 27, 18, 29, 28, 26, -59, -80, -15, 2, 59, 40, -57, 2, -73, -56, 33, 43, 11, -28, -80, 28, -28, 82, 69, -53, 19, -52, 63, 95, -86]) == [99, 95, 91, 82, 70, 69, 66, 63, 59, 56, 43, 40, 35, 33, 29, 27, 26, 21, 19, 18, 11, -15, -19, -53, -55, -56, -57, -58, -59, -76, -84, -86, -88, 72, 72, 28, 28, 2, 2, -28, -28, -52, -52, -65, -65, -73, -73, -80, -80]\nassert solution.frequencySort([10, -81, 20, -85, 52, 33, -81, 65, 41, 76, -46, 87, -92, -60, -91, 1, 98, 57, 20, -31, 5, -21, -57, -91, -5, -57, 44, -83, 63, 54, 67, -96, -48, -27, 37, -77, 49, -50, -46, -4, 82, -31, 67, 61, 80, -20, -53, -49, 57, -21, 87, -100, 23, -37, -66, 40, -21, 38, -66, 68, 84, -71, -46, -57, -36, 88, 66, 82, 61, -44, -30, 30, -93, -90, 72, -74, 95, -86, -83, -99, -23, 45, -43, -61, 41, -5, -17, 48, 100, -77, -8, -78, -76, -85, 28, 17, -60, -2, 54]) == [100, 98, 95, 88, 84, 80, 76, 72, 68, 66, 65, 63, 52, 49, 48, 45, 44, 40, 38, 37, 33, 30, 28, 23, 17, 10, 5, 1, -2, -4, -8, -17, -20, -23, -27, -30, -36, -37, -43, -44, -48, -49, -50, -53, -61, -71, -74, -76, -78, -86, -90, -92, -93, -96, -99, -100, 87, 87, 82, 82, 67, 67, 61, 61, 57, 57, 54, 54, 41, 41, 20, 20, -5, -5, -31, -31, -60, -60, -66, -66, -77, -77, -81, -81, -83, -83, -85, -85, -91, -91, -21, -21, -21, -46, -46, -46, -57, -57, -57]\nassert solution.frequencySort([41, -3, -62, 18, 54, 31, -81, -100, 81, -3, 96, 21]) == [96, 81, 54, 41, 31, 21, 18, -62, -81, -100, -3, -3]\nassert solution.frequencySort([-65, 60, 85, -83, 40, -55, 12, -23, 31, -51, -82, -77, -4, -81, -2, -29, 2, -84, 42, 5, -49, 49, 28, 86, -21, 55, 65, 29, 46, 5]) == [86, 85, 65, 60, 55, 49, 46, 42, 40, 31, 29, 28, 12, 2, -2, -4, -21, -23, -29, -49, -51, -55, -65, -77, -81, -82, -83, -84, 5, 5]\nassert solution.frequencySort([50, -71, -73, 38, 80, -88, -22, -91, 15, 100, -33, -93, -20, -12, -51, 63, 41, -29, 13, 48, 27, 100, 94, 34, 14, 0, 33, -99, 49, 31, 22, -90, -45, 1, -83, -17, 98, 88, -99, -12, 45, 15, -14, 39, 4, 11, 2, 66, -45, 63, 11, -36, 62, -17, 61, -46, -60, -47, 59, 12, 50, -40, 53, -41, -37, -18, 16, 99, -43, 90, -79, -26, -51, 16, 47, 16, 3, -75, -64, -80]) == [99, 98, 94, 90, 88, 80, 66, 62, 61, 59, 53, 49, 48, 47, 45, 41, 39, 38, 34, 33, 31, 27, 22, 14, 13, 12, 4, 3, 2, 1, 0, -14, -18, -20, -22, -26, -29, -33, -36, -37, -40, -41, -43, -46, -47, -60, -64, -71, -73, -75, -79, -80, -83, -88, -90, -91, -93, 100, 100, 63, 63, 50, 50, 15, 15, 11, 11, -12, -12, -17, -17, -45, -45, -51, -51, -99, -99, 16, 16, 16]\nassert solution.frequencySort([86, 38, -12, -32, 76, 4, 98, 76, -6, 22, 36, -89, -8, -31, 53, 44, 48, -80]) == [98, 86, 53, 48, 44, 38, 36, 22, 4, -6, -8, -12, -31, -32, -80, -89, 76, 76]\nassert solution.frequencySort([64, -58, -82, -71, 86, 57, 13, 98, 85, 87, 35, 89, 50, 26, -58, 68, 47, 96, 94, -11, -8, -3, 68, 51]) == [98, 96, 94, 89, 87, 86, 85, 64, 57, 51, 50, 47, 35, 26, 13, -3, -8, -11, -71, -82, 68, 68, -58, -58]\nassert solution.frequencySort([-87, -34, -80, 47, -43, -83, 39, 20, 75, -93, -50, -68, 60, 79, 31, 52, 31, -72, 7, -76, 24, -12, 66, 78, 49, -86, 43, -100, -47, 74, 24, -88, 36, 39, -89, -97, 82, -14, -8, 56, 87, 69, 50, -17, 4, -51, 53, 21, 42, -95, -80, 58, 61, -100, 66, 92, 17, -99, -49, 28, -70, -43, -22, -90, -17, 93, 62, -25, -82, 21, 26]) == [93, 92, 87, 82, 79, 78, 75, 74, 69, 62, 61, 60, 58, 56, 53, 52, 50, 49, 47, 43, 42, 36, 28, 26, 20, 17, 7, 4, -8, -12, -14, -22, -25, -34, -47, -49, -50, -51, -68, -70, -72, -76, -82, -83, -86, -87, -88, -89, -90, -93, -95, -97, -99, 66, 66, 39, 39, 31, 31, 24, 24, 21, 21, -17, -17, -43, -43, -80, -80, -100, -100]\nassert solution.frequencySort([-36, 94, 46, 93, -34, 36, -95, -21, 95, -41, -40, 83, -11, -42, -3, -11, 63, 80, -89, -47, -42, -3, -70, 12, -35, -94, -72, 67, 7, -23, 55, 71, -13, -81, -3, 55, -14, -18, 52, 38, -64, 69, -66, 98, 67, 91, -36, 80, 98, 72, -98, 78, -29, 71, 77, 94, 93, -27, -69, -30, 95, 20]) == [91, 83, 78, 77, 72, 69, 63, 52, 46, 38, 36, 20, 12, 7, -13, -14, -18, -21, -23, -27, -29, -30, -34, -35, -40, -41, -47, -64, -66, -69, -70, -72, -81, -89, -94, -95, -98, 98, 98, 95, 95, 94, 94, 93, 93, 80, 80, 71, 71, 67, 67, 55, 55, -11, -11, -36, -36, -42, -42, -3, -3, -3]\nassert solution.frequencySort([57, 86, 60, 28, -5, -62, -86, -66, 44, -55, 7, 65, 3, 75, -17, 18, -98, 5, -40, -26, 70, 83, -85, 51, 43, -99, -19, -44, 41, 77, 14, -12, -22, 79, 46, -10]) == [86, 83, 79, 77, 75, 70, 65, 60, 57, 51, 46, 44, 43, 41, 28, 18, 14, 7, 5, 3, -5, -10, -12, -17, -19, -22, -26, -40, -44, -55, -62, -66, -85, -86, -98, -99]\nassert solution.frequencySort([-53, -33, 82, 29, -75, 43, 24, 9, -46, 6, 68, -45, 59, -90, 66, -67, 69, -18, 91, 89, 23, 83, -79, 37, -49, -97, -14, 44, 47, 85, -99, -16, -54, -58, -96, 19, 87, -20, -76, -34, -48, -18, 28, 1, -45, -24, 85, 41, 66, -63, 91, -72, -41, -45, -74, -22]) == [89, 87, 83, 82, 69, 68, 59, 47, 44, 43, 41, 37, 29, 28, 24, 23, 19, 9, 6, 1, -14, -16, -20, -22, -24, -33, -34, -41, -46, -48, -49, -53, -54, -58, -63, -67, -72, -74, -75, -76, -79, -90, -96, -97, -99, 91, 91, 85, 85, 66, 66, -18, -18, -45, -45, -45]\nassert solution.frequencySort([18, -37, 99, 32, 79, 14, -63, 9, -26, -31, 10, -82, 90, 92, -54, -50, -62, -43, -61, -95, -90, -94, -50, 53, 21, 29, 21, -57, 24, 68, 79, -24, 86, -35, -60, 38, 49, 69, 10, -54, -50, 3, -37, -96, -61, -37, 16, -24, -21, 43, 25, -98, 10, -51, 97, -46, 13, -74, -17, -39, -91, 60, -50, 60]) == [99, 97, 92, 90, 86, 69, 68, 53, 49, 43, 38, 32, 29, 25, 24, 18, 16, 14, 13, 9, 3, -17, -21, -26, -31, -35, -39, -43, -46, -51, -57, -60, -62, -63, -74, -82, -90, -91, -94, -95, -96, -98, 79, 79, 60, 60, 21, 21, -24, -24, -54, -54, -61, -61, 10, 10, 10, -37, -37, -37, -50, -50, -50, -50]\nassert solution.frequencySort([-98, 29, 47, 23, 27, 10, -63]) == [47, 29, 27, 23, 10, -63, -98]\nassert solution.frequencySort([-44, -30, -40, 53, 2, 34, 3, 89, 86, -40, 40, 22, -39, 96, 44, 9, -23, 24, 81, -14, 46, 51, 8]) == [96, 89, 86, 81, 53, 51, 46, 44, 40, 34, 24, 22, 9, 8, 3, 2, -14, -23, -30, -39, -44, -40, -40]\nassert solution.frequencySort([-66, -13, 97, -66, -36, 84, -42, 69, -51, 25, 80, 27, -36, -46, -39, -49, 60, 55, 93, -73, -81, 70, -17, -47, 52, 53, -98, 73, 19, -17, -89, -1, -51, 48, -27, 87, -66, 84, 59, 10, -57, -12, 20, 67, 35, 78, 4, -80, -6, -33, -62, 2, 53, -51, 69, -32, -2, -80, 75, -26, -4, -43, 9, -4, 24, -69, -4]) == [97, 93, 87, 80, 78, 75, 73, 70, 67, 60, 59, 55, 52, 48, 35, 27, 25, 24, 20, 19, 10, 9, 4, 2, -1, -2, -6, -12, -13, -26, -27, -32, -33, -39, -42, -43, -46, -47, -49, -57, -62, -69, -73, -81, -89, -98, 84, 84, 69, 69, 53, 53, -17, -17, -36, -36, -80, -80, -4, -4, -4, -51, -51, -51, -66, -66, -66]\nassert solution.frequencySort([83, -48, 90, 5, -83, 2, 4, 10, 76, 96, 74, 44, -40, -74, 31, 67, -31, 96, 52, 48, -80, -66, 69, -31, -47, 1, -52, 38, -91, -78, -55, 40, 51, 8, -99, -97, 39, 11, -92, 84, 88, 6]) == [90, 88, 84, 83, 76, 74, 69, 67, 52, 51, 48, 44, 40, 39, 38, 31, 11, 10, 8, 6, 5, 4, 2, 1, -40, -47, -48, -52, -55, -66, -74, -78, -80, -83, -91, -92, -97, -99, 96, 96, -31, -31]\nassert solution.frequencySort([-40, 83, -14, 81, -92, -52, 12, -62, -80, -38, -86, -67, 1, 88, 10, -18, -71, 53, -5, 2, 39, 89, -19, -25, 76, 33, -20, -35, 5, -59, -40, -47, -14, -46, -63, 34, -95, -68, -39, -72, -60, -31, -87, 9, 67, 55, -11, 35, 1, 14, -97, -22, -10, 41, 39, -7, -67, -62, -23, 35, 20, -74, 17, -36, -99, -72, -90, 0, 68, -33, 68, -100, -83]) == [89, 88, 83, 81, 76, 67, 55, 53, 41, 34, 33, 20, 17, 14, 12, 10, 9, 5, 2, 0, -5, -7, -10, -11, -18, -19, -20, -22, -23, -25, -31, -33, -35, -36, -38, -39, -46, -47, -52, -59, -60, -63, -68, -71, -74, -80, -83, -86, -87, -90, -92, -95, -97, -99, -100, 68, 68, 39, 39, 35, 35, 1, 1, -14, -14, -40, -40, -62, -62, -67, -67, -72, -72]\nassert solution.frequencySort([36, 64, 88, -44, -98, 26, -52, 39, 14, 85, 26, -12, 21, 26, 84, -84, 95, -95, 13, 82, 36, 72, 76, -7, 0, 4, 85, -10, -75, 30]) == [95, 88, 84, 82, 76, 72, 64, 39, 30, 21, 14, 13, 4, 0, -7, -10, -12, -44, -52, -75, -84, -95, -98, 85, 85, 36, 36, 26, 26, 26]\nassert solution.frequencySort([-11, 46, -89, 8, 88, -51, -75, -38, -19, 80, -90, -91, 61, 4, 17, 11, 20, 56, 40, -10]) == [88, 80, 61, 56, 46, 40, 20, 17, 11, 8, 4, -10, -11, -19, -38, -51, -75, -89, -90, -91]",
  "inefficient_solution": "from collections import Counter\nfrom math import inf\n\nclass Solution:\n    def frequencySort(self, nums: List[int]) -> List[int]:\n        cnt = Counter(nums)\n        \n        # Create a dictionary to store the count of each number\n        num_count_dict = {}\n        for num in nums:\n            if num not in num_count_dict:\n                num_count_dict[num] = 0\n            num_count_dict[num] += 1\n        \n        # Sort the numbers based on their count and value\n        sorted_nums = []\n        for num in nums:\n            # Store the sorted numbers in a list of lists\n            temp_list = []\n            for key, value in num_count_dict.items():\n                if value >= cnt[num]:\n                    temp_list.append((value, -key))\n            sorted_nums.append(temp_list)\n        \n        # Flatten the list of lists into a single list\n        flat_list = [item for sublist in sorted_nums for item in sublist]\n        \n        # Sort the numbers based on their count and value\n        sorted_nums = sorted(flat_list, key=lambda x: (x[0], -x[1]))\n        \n        # Create a dictionary to store the final sorted numbers\n        result_dict = {}\n        for item in sorted_nums:\n            if item[1] not in result_dict:\n                result_dict[item[1]] = []\n            result_dict[item[1]].append(item[0])\n        \n        # Flatten the dictionary into a single list\n        final_result = []\n        for key, value in result_dict.items():\n            final_result.extend([key] * value[0])\n        \n        return final_result",
  "is_python": true
}