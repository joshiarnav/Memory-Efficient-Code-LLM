{
  "problem_idx": 1690,
  "task_name": "Stone Game VII",
  "markdown_description": "\nAlice and Bob take turns playing a game, with **Alice starting first**.\n\n\nThere are `n` stones arranged in a row. On each player's turn, they can **remove** either the leftmost stone or the rightmost stone from the row and receive points equal to the **sum** of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\n\n\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to **minimize the score's difference**. Alice's goal is to **maximize the difference** in the score.\n\n\nGiven an array of integers `stones` where `stones[i]` represents the value of the `ith` stone **from the left**, return *the **difference** in Alice and Bob's score if they both play **optimally**.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** stones = [5,3,1,4,2]\n**Output:** 6\n**Explanation:** \n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\nThe score difference is 18 - 12 = 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** stones = [7,90,5,1,100,10,10,2]\n**Output:** 122\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == stones.length`\n* `2 <= n <= 1000`\n* `1 <= stones[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def stoneGameVII(self, stones: List[int]) -> int:\n        @cache\n        def dfs(i, j):\n            if i > j:\n                return 0\n            a = s[j + 1] - s[i + 1] - dfs(i + 1, j)\n            b = s[j] - s[i] - dfs(i, j - 1)\n            return max(a, b)\n\n        s = list(accumulate(stones, initial=0))\n        ans = dfs(0, len(stones) - 1)\n        dfs.cache_clear()\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def stoneGameVII(self, stones: List[int]) -> int:\n        @cache\n        def dfs(i, j):\n            if i > j:\n                return 0\n            a = s[j + 1] - s[i + 1] - dfs(i + 1, j)\n            b = s[j] - s[i] - dfs(i, j - 1)\n            return max(a, b)\n\n        s = list(accumulate(stones, initial=0))\n        ans = dfs(0, len(stones) - 1)\n        dfs.cache_clear()\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    stones = random.sample(range(1, 1001), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.stoneGameVII(stones)\n\n    return stones, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        stones, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.stoneGameVII(stones) == expected_result\n        print(f\"assert solution.stoneGameVII({stones}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.stoneGameVII({stones}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.stoneGameVII([485, 386, 429, 94, 348, 353, 548, 177, 973]) == 1010\nassert solution.stoneGameVII([53, 100, 261, 718, 938, 725, 943, 43]) == 2195\nassert solution.stoneGameVII([857, 93]) == 857\nassert solution.stoneGameVII([351, 92, 123, 120]) == 474\nassert solution.stoneGameVII([91, 129, 981]) == 129\nassert solution.stoneGameVII([941, 134, 192, 991, 425, 790]) == 1915\nassert solution.stoneGameVII([405, 267, 201, 906, 41, 14, 731, 872, 632]) == 1605\nassert solution.stoneGameVII([96, 184, 122, 121, 812, 658, 831, 992]) == 1955\nassert solution.stoneGameVII([949, 573]) == 949\nassert solution.stoneGameVII([402, 938, 368, 143, 736, 439, 767, 303, 923]) == 1823\nassert solution.stoneGameVII([987, 158, 199, 546, 350, 351, 430, 673, 347]) == 1728\nassert solution.stoneGameVII([813, 957, 201, 230]) == 1187\nassert solution.stoneGameVII([71, 436, 976, 492, 15, 889, 756, 219]) == 2356\nassert solution.stoneGameVII([613, 258, 142, 379, 385, 907, 158]) == 1140\nassert solution.stoneGameVII([902, 510, 117, 331, 38, 408, 725, 265, 977, 208]) == 2759\nassert solution.stoneGameVII([177, 897, 218]) == 218\nassert solution.stoneGameVII([340, 701, 564, 538, 945, 167, 876, 552, 593, 661]) == 3639\nassert solution.stoneGameVII([494, 727]) == 727\nassert solution.stoneGameVII([601, 515, 279]) == 515\nassert solution.stoneGameVII([34, 966, 89, 276, 51, 230, 122, 889, 175]) == 437\nassert solution.stoneGameVII([168, 904, 262, 414, 585, 780, 660]) == 1507\nassert solution.stoneGameVII([339, 70, 785, 541, 380, 735]) == 1504\nassert solution.stoneGameVII([904, 979, 831, 564, 942, 652]) == 2677\nassert solution.stoneGameVII([332, 21, 975, 829, 998, 344, 689, 534, 411, 846]) == 3405\nassert solution.stoneGameVII([947, 581, 606, 25, 117]) == 606\nassert solution.stoneGameVII([531, 650, 628, 449, 996, 520, 356, 55]) == 2511\nassert solution.stoneGameVII([820, 246, 192, 229, 545]) == 475\nassert solution.stoneGameVII([60, 222, 636, 280]) == 858\nassert solution.stoneGameVII([326, 717, 188, 152, 609, 432, 427, 123, 983, 238]) == 2533\nassert solution.stoneGameVII([617, 439, 116, 825, 769, 485]) == 1881\nassert solution.stoneGameVII([743, 311, 801, 158, 116, 382, 925, 920, 935, 546]) == 3520\nassert solution.stoneGameVII([514, 37, 167, 859, 903, 353, 368, 930, 520]) == 1952\nassert solution.stoneGameVII([535, 343, 967, 144, 355, 879, 108, 981, 170, 164]) == 2517\nassert solution.stoneGameVII([292, 171, 120]) == 171\nassert solution.stoneGameVII([375, 203, 363, 136, 539, 993]) == 1332\nassert solution.stoneGameVII([878, 91, 498, 142, 49, 504]) == 1425\nassert solution.stoneGameVII([183, 210]) == 210\nassert solution.stoneGameVII([193, 372]) == 372\nassert solution.stoneGameVII([459, 712]) == 712\nassert solution.stoneGameVII([765, 315, 723, 334, 633, 902, 581, 604, 691]) == 2155\nassert solution.stoneGameVII([764, 507, 625]) == 507\nassert solution.stoneGameVII([578, 203, 558, 623, 170, 928, 571]) == 1306\nassert solution.stoneGameVII([342, 822, 45, 228, 793, 313, 468, 85]) == 1705\nassert solution.stoneGameVII([796, 780, 189, 255, 910, 178, 429, 90]) == 2324\nassert solution.stoneGameVII([854, 649, 314, 178, 22, 883]) == 1710\nassert solution.stoneGameVII([757, 904, 829, 691, 552, 408, 459]) == 1928\nassert solution.stoneGameVII([880, 605]) == 880\nassert solution.stoneGameVII([23, 30, 261, 346]) == 376\nassert solution.stoneGameVII([210, 973, 126, 589, 432, 547, 476]) == 1034\nassert solution.stoneGameVII([99, 308, 885, 751, 196, 436, 505, 72, 356]) == 1461\nassert solution.stoneGameVII([752, 161, 105, 389, 410, 533]) == 1267\nassert solution.stoneGameVII([211, 975, 491, 73, 507, 62, 617, 145, 490]) == 1255\nassert solution.stoneGameVII([242, 13, 44, 567]) == 580\nassert solution.stoneGameVII([862, 72, 529, 499, 833, 238]) == 2224\nassert solution.stoneGameVII([46, 583, 839, 658, 655, 100]) == 1594\nassert solution.stoneGameVII([754, 240, 700, 328, 442, 555]) == 1896\nassert solution.stoneGameVII([12, 591, 445, 864, 888, 295, 398, 565, 948]) == 2315\nassert solution.stoneGameVII([356, 272, 731, 969, 104, 203]) == 1444\nassert solution.stoneGameVII([773, 482, 904, 596, 404]) == 1078\nassert solution.stoneGameVII([604, 691, 101, 191, 516, 499]) == 1398\nassert solution.stoneGameVII([75, 178]) == 178\nassert solution.stoneGameVII([298, 84, 717, 445]) == 1015\nassert solution.stoneGameVII([407, 91, 882, 693]) == 1289\nassert solution.stoneGameVII([967, 321, 921, 264, 986, 959, 358]) == 1544\nassert solution.stoneGameVII([623, 421, 868, 384]) == 1491\nassert solution.stoneGameVII([629, 846, 175, 960]) == 1806\nassert solution.stoneGameVII([936, 639, 289, 159]) == 1225\nassert solution.stoneGameVII([258, 460]) == 460\nassert solution.stoneGameVII([340, 391, 470, 708, 113, 245, 727, 626, 133]) == 1650\nassert solution.stoneGameVII([591, 405, 206, 38, 245, 987, 852, 561, 487]) == 1856\nassert solution.stoneGameVII([30, 881]) == 881\nassert solution.stoneGameVII([523, 44, 53, 318, 321, 892, 5, 167]) == 1421\nassert solution.stoneGameVII([907, 261, 293]) == 261\nassert solution.stoneGameVII([170, 378, 352, 791, 822]) == 1169\nassert solution.stoneGameVII([333, 966, 99]) == 333\nassert solution.stoneGameVII([432, 865, 704, 465, 893, 130]) == 2029\nassert solution.stoneGameVII([284, 379, 446, 853, 41]) == 730\nassert solution.stoneGameVII([168, 712, 217, 245, 630, 592, 158, 571, 898, 406]) == 2526\nassert solution.stoneGameVII([596, 687, 702, 459, 355, 250, 945, 581, 186, 733]) == 2875\nassert solution.stoneGameVII([383, 318, 585, 606, 870, 892, 886, 565]) == 2724\nassert solution.stoneGameVII([196, 581, 703, 676]) == 1284\nassert solution.stoneGameVII([322, 770, 864, 884]) == 1654\nassert solution.stoneGameVII([127, 303, 1000, 539, 313, 955, 308, 16, 58, 903]) == 2716\nassert solution.stoneGameVII([475, 202, 335, 259, 87]) == 461\nassert solution.stoneGameVII([705, 946, 391, 542]) == 1488\nassert solution.stoneGameVII([837, 872, 891, 300, 950, 380, 534, 834, 149, 753]) == 3396\nassert solution.stoneGameVII([640, 293, 537, 636, 265, 362]) == 1442\nassert solution.stoneGameVII([362, 113, 376, 827, 928]) == 940\nassert solution.stoneGameVII([326, 108, 810]) == 108\nassert solution.stoneGameVII([110, 964, 837, 238, 599, 773, 448]) == 1650\nassert solution.stoneGameVII([65, 629, 263, 471, 773, 291]) == 1391\nassert solution.stoneGameVII([286, 705, 860, 774, 326, 830, 989, 257, 542, 701]) == 3422\nassert solution.stoneGameVII([569, 302, 200, 48, 330, 793, 579, 340, 116]) == 1439\nassert solution.stoneGameVII([893, 470, 994, 766, 118, 125, 62, 75, 810, 36]) == 2877\nassert solution.stoneGameVII([507, 731, 676, 351]) == 1238\nassert solution.stoneGameVII([72, 975, 365, 536, 871, 66]) == 1583\nassert solution.stoneGameVII([542, 525, 148, 984, 142, 461, 692, 6, 143, 603]) == 2579\nassert solution.stoneGameVII([95, 820, 78, 770, 868]) == 946\nassert solution.stoneGameVII([364, 715, 890, 657, 443, 804, 370, 821]) == 2997\nassert solution.stoneGameVII([139, 440, 549, 421, 332]) == 772",
  "inefficient_solution": "class Solution:\n    def stoneGameVII(self, stones):\n        n = len(stones)\n        dp = [[[0]*n for _ in range(n)] for _ in range(n)]\n        for gap in range(n):\n            for i in range(n - gap):\n                j = i + gap\n                if gap == 0:\n                    dp[i][j][i] = 0\n                    dp[i][j][j] = 0\n                else:\n                    for k in range(i, j):\n                        a = dp[i][k][i] + stones[j] - stones[k+1]\n                        b = dp[i][k][j] - stones[j] + stones[i]\n                        dp[i][j][k] = max(a, b)\n        return dp[0][n-1][n-1]",
  "is_python": true
}