{
  "problem_idx": 1911,
  "task_name": "Maximum Alternating Subsequence Sum",
  "markdown_description": "\nThe **alternating sum** of a **0-indexed** array is defined as the **sum** of the elements at **even** indices **minus** the **sum** of the elements at **odd** indices.\n\n\n* For example, the alternating sum of `[4,2,5,3]` is `(4 + 5) - (2 + 3) = 4`.\n\n\nGiven an array `nums`, return *the **maximum alternating sum** of any subsequence of* `nums` *(after **reindexing** the elements of the subsequence)*.\n\n\n\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,2,5,3]\n**Output:** 7\n**Explanation:** It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,6,7,8]\n**Output:** 8\n**Explanation:** It is optimal to choose the subsequence [8] with alternating sum 8.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [6,2,1,2,4,5]\n**Output:** 10\n**Explanation:** It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxAlternatingSum(self, nums: List[int]) -> int:\n        f = g = 0\n        for x in nums:\n            f, g = max(g - x, f), max(f + x, g)\n        return max(f, g)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxAlternatingSum(self, nums: List[int]) -> int:\n        f = g = 0\n        for x in nums:\n            f, g = max(g - x, f), max(f + x, g)\n        return max(f, g)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(3, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxAlternatingSum(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxAlternatingSum(nums) == expected_result\n        print(f\"assert solution.maxAlternatingSum({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxAlternatingSum({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxAlternatingSum([56, 26, 22, 57, 44, 6]) == 91\nassert solution.maxAlternatingSum([86, 79, 52, 99, 94, 22]) == 133\nassert solution.maxAlternatingSum([79, 80, 32]) == 80\nassert solution.maxAlternatingSum([17, 27, 81, 97, 76]) == 97\nassert solution.maxAlternatingSum([89, 39, 12, 52, 50, 69, 91, 41, 71]) == 200\nassert solution.maxAlternatingSum([72, 55, 3, 5, 95, 13, 91, 85, 71]) == 242\nassert solution.maxAlternatingSum([31, 49, 82, 91, 8, 60, 74]) == 157\nassert solution.maxAlternatingSum([58, 24, 53, 52, 82, 93, 25, 8]) == 128\nassert solution.maxAlternatingSum([69, 87, 95, 35]) == 95\nassert solution.maxAlternatingSum([92, 59, 41, 8]) == 92\nassert solution.maxAlternatingSum([46, 9, 35]) == 72\nassert solution.maxAlternatingSum([38, 36, 17, 100, 4, 47, 86, 63]) == 203\nassert solution.maxAlternatingSum([83, 49, 8, 76, 12, 37, 92, 87, 67]) == 231\nassert solution.maxAlternatingSum([13, 44, 75, 93, 55, 30, 41, 81, 42]) == 144\nassert solution.maxAlternatingSum([82, 56, 48, 83]) == 117\nassert solution.maxAlternatingSum([42, 11, 31, 74]) == 105\nassert solution.maxAlternatingSum([35, 20, 29]) == 44\nassert solution.maxAlternatingSum([18, 4, 56, 97, 67, 43, 93, 46, 8, 12]) == 165\nassert solution.maxAlternatingSum([75, 80, 61, 37, 88, 3, 52]) == 180\nassert solution.maxAlternatingSum([99, 31, 83, 42]) == 151\nassert solution.maxAlternatingSum([99, 26, 37, 91, 94, 65, 35, 60, 13]) == 192\nassert solution.maxAlternatingSum([97, 44, 42, 77, 99, 7, 83, 90, 40, 30]) == 237\nassert solution.maxAlternatingSum([71, 63, 60, 70, 30]) == 81\nassert solution.maxAlternatingSum([4, 28, 56, 68]) == 68\nassert solution.maxAlternatingSum([92, 48, 79, 27, 84, 33, 76, 11]) == 223\nassert solution.maxAlternatingSum([22, 90, 25, 1, 12, 27, 9, 71, 98]) == 205\nassert solution.maxAlternatingSum([91, 13, 55]) == 133\nassert solution.maxAlternatingSum([57, 53, 58, 30]) == 62\nassert solution.maxAlternatingSum([88, 29, 87, 76, 18, 47]) == 175\nassert solution.maxAlternatingSum([78, 44, 6, 67, 100, 7, 36, 58, 51]) == 223\nassert solution.maxAlternatingSum([33, 100, 7, 47, 26]) == 140\nassert solution.maxAlternatingSum([11, 57, 34, 26, 20, 19, 8]) == 57\nassert solution.maxAlternatingSum([38, 15, 72, 71, 73, 88, 17, 54, 76]) == 171\nassert solution.maxAlternatingSum([63, 94, 5, 99, 61]) == 188\nassert solution.maxAlternatingSum([48, 1, 6, 5, 33, 12, 23, 30, 74, 81]) == 150\nassert solution.maxAlternatingSum([91, 4, 96, 59]) == 183\nassert solution.maxAlternatingSum([58, 59, 98, 53]) == 98\nassert solution.maxAlternatingSum([40, 75, 16, 7, 82, 58, 52, 92, 10]) == 190\nassert solution.maxAlternatingSum([52, 85, 72, 87, 73, 70]) == 100\nassert solution.maxAlternatingSum([10, 50, 31, 47, 18, 96, 59]) == 144\nassert solution.maxAlternatingSum([89, 55, 41, 63, 69, 58, 50, 39, 81, 54]) == 159\nassert solution.maxAlternatingSum([39, 31, 81, 28, 18, 57, 84, 42, 65, 43]) == 178\nassert solution.maxAlternatingSum([63, 94, 28, 33, 89]) == 155\nassert solution.maxAlternatingSum([3, 12, 47, 52]) == 52\nassert solution.maxAlternatingSum([76, 95, 42]) == 95\nassert solution.maxAlternatingSum([29, 8, 91, 74, 79]) == 117\nassert solution.maxAlternatingSum([19, 91, 13, 33, 14, 34]) == 131\nassert solution.maxAlternatingSum([18, 1, 44]) == 61\nassert solution.maxAlternatingSum([68, 85, 59, 49, 43, 70, 36, 14, 15]) == 113\nassert solution.maxAlternatingSum([69, 64, 31, 11, 35]) == 93\nassert solution.maxAlternatingSum([79, 34, 6]) == 79\nassert solution.maxAlternatingSum([58, 64, 22, 31]) == 73\nassert solution.maxAlternatingSum([23, 12, 33, 53, 67, 92, 30, 40]) == 113\nassert solution.maxAlternatingSum([56, 51, 52, 86, 13, 89, 57, 65]) == 175\nassert solution.maxAlternatingSum([73, 90, 66, 4]) == 90\nassert solution.maxAlternatingSum([37, 95, 87, 91, 83, 67, 21, 94]) == 172\nassert solution.maxAlternatingSum([27, 20, 16, 60, 21, 45, 10, 61, 77, 6]) == 162\nassert solution.maxAlternatingSum([17, 12, 22, 82, 33, 16]) == 87\nassert solution.maxAlternatingSum([22, 19, 31, 72, 12, 76, 53, 100]) == 186\nassert solution.maxAlternatingSum([6, 32, 82, 51]) == 82\nassert solution.maxAlternatingSum([94, 81, 32, 87, 64, 60]) == 149\nassert solution.maxAlternatingSum([36, 91, 76, 86, 33, 64, 21]) == 132\nassert solution.maxAlternatingSum([48, 32, 26, 13]) == 48\nassert solution.maxAlternatingSum([89, 72, 21, 20, 69, 60, 2, 49]) == 185\nassert solution.maxAlternatingSum([73, 100, 43, 27, 37, 85, 66, 34]) == 158\nassert solution.maxAlternatingSum([3, 24, 81]) == 81\nassert solution.maxAlternatingSum([57, 43, 48, 49]) == 63\nassert solution.maxAlternatingSum([45, 74, 71, 27, 3, 14, 92, 9]) == 163\nassert solution.maxAlternatingSum([56, 70, 37, 96, 3, 62, 78, 91]) == 217\nassert solution.maxAlternatingSum([43, 48, 88, 33]) == 88\nassert solution.maxAlternatingSum([23, 77, 70, 75, 82, 6, 3, 78, 91, 73]) == 177\nassert solution.maxAlternatingSum([85, 6, 86, 13, 94, 15, 23, 67, 29]) == 298\nassert solution.maxAlternatingSum([60, 32, 13]) == 60\nassert solution.maxAlternatingSum([98, 4, 19]) == 113\nassert solution.maxAlternatingSum([7, 39, 47, 49]) == 49\nassert solution.maxAlternatingSum([63, 90, 92, 29, 41, 50, 51, 4, 32, 30]) == 142\nassert solution.maxAlternatingSum([16, 4, 91, 92, 89]) == 104\nassert solution.maxAlternatingSum([40, 69, 99]) == 99\nassert solution.maxAlternatingSum([3, 83, 41, 56, 77, 22, 59, 50, 95]) == 201\nassert solution.maxAlternatingSum([84, 98, 44, 22, 93]) == 169\nassert solution.maxAlternatingSum([44, 70, 38, 14, 16, 28]) == 84\nassert solution.maxAlternatingSum([81, 53, 93, 39, 72, 33, 29, 99, 11, 80]) == 293\nassert solution.maxAlternatingSum([55, 6, 62, 76, 26, 79, 8, 100]) == 270\nassert solution.maxAlternatingSum([27, 19, 37]) == 45\nassert solution.maxAlternatingSum([40, 100, 39, 30, 24, 76, 70, 16, 35]) == 171\nassert solution.maxAlternatingSum([55, 65, 19, 33, 78, 42, 21, 86, 20]) == 189\nassert solution.maxAlternatingSum([12, 9, 76, 6, 49]) == 122\nassert solution.maxAlternatingSum([78, 80, 40, 46, 69, 25, 77, 4]) == 161\nassert solution.maxAlternatingSum([51, 94, 7, 93, 83, 73, 11, 65]) == 234\nassert solution.maxAlternatingSum([80, 18, 33, 40, 91, 37, 22, 31]) == 162\nassert solution.maxAlternatingSum([24, 57, 47, 75, 80]) == 90\nassert solution.maxAlternatingSum([30, 13, 19, 61, 71, 86]) == 103\nassert solution.maxAlternatingSum([11, 87, 14, 27]) == 100\nassert solution.maxAlternatingSum([56, 35, 99, 94, 43, 34, 17]) == 120\nassert solution.maxAlternatingSum([49, 81, 50, 25, 94, 90]) == 150\nassert solution.maxAlternatingSum([35, 48, 44]) == 48\nassert solution.maxAlternatingSum([20, 23, 56, 36, 58, 32, 46, 47, 14]) == 93\nassert solution.maxAlternatingSum([17, 60, 23, 100]) == 137\nassert solution.maxAlternatingSum([9, 14, 95, 79, 72, 17]) == 95\nassert solution.maxAlternatingSum([67, 81, 90, 39]) == 90",
  "inefficient_solution": "class Solution:\n    def maxAlternatingSum(self, nums):\n        max_even = max_odd = 0\n        prev_even = prev_odd = [0] * len(nums)\n        for x in nums:\n            max_even = max(max_even, x)\n            max_odd = max(max_odd, 0)\n            max_even_arr = [max(max_even, prev_even[i-1] + x) if i > 0 else max_even for i in range(len(nums))]\n            max_odd_arr = [max(max_odd, prev_odd[i-1] - x) if i > 0 else max_odd for i in range(len(nums))]\n            max_even, prev_even = max_even_arr, max_even_arr[:]\n            max_odd, prev_odd = max_odd_arr, max_odd_arr[:]\n        return max(max_even, max_odd)",
  "is_python": true
}