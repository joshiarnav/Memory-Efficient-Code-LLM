{
  "problem_idx": 2441,
  "task_name": "Largest Positive Integer That Exists With Its Negative",
  "markdown_description": "\nGiven an integer array `nums` that **does not contain** any zeros, find **the largest positive** integer `k` such that `-k` also exists in the array.\n\n\nReturn *the positive integer* `k`. If there is no such integer, return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-1,2,-3,3]\n**Output:** 3\n**Explanation:** 3 is the only valid k we can find in the array.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,10,6,7,-7,1]\n**Output:** 7\n**Explanation:** Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [-10,8,6,7,-2,-3]\n**Output:** -1\n**Explanation:** There is no a single valid k, we return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `-1000 <= nums[i] <= 1000`\n* `nums[i] != 0`\n\n\n",
  "canonical_solution": "class Solution:\n    def findMaxK(self, nums: List[int]) -> int:\n        s = set(nums)\n        return max((x for x in s if -x in s), default=-1)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def findMaxK(self, nums: List[int]) -> int:\n        s = set(nums)\n        return max((x for x in s if -x in s), default=-1)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-1000, 1000), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMaxK(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMaxK(nums) == expected_result\n        print(f\"assert solution.findMaxK({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMaxK({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMaxK([-188, 751, -283, 336, -236]) == -1\nassert solution.findMaxK([699, 772, 200, 700, 410, -673, -77]) == -1\nassert solution.findMaxK([-254, 362, 887, 470, -564, -815, -136, -577]) == -1\nassert solution.findMaxK([286, 87, 729, 209, -989, -257, 439, -598, 698]) == -1\nassert solution.findMaxK([-234, -406, 688, 486, 409, -143]) == -1\nassert solution.findMaxK([-148]) == -1\nassert solution.findMaxK([-559, -986, -594, -847, 912, -28, -49]) == -1\nassert solution.findMaxK([-271, -612, 628, 245]) == -1\nassert solution.findMaxK([-835, -430, 92, 770, 410, 33, 940, -461]) == -1\nassert solution.findMaxK([256, 237, -659, -530, -161, 234]) == -1\nassert solution.findMaxK([-74, 184, 350, 157]) == -1\nassert solution.findMaxK([-752, -211, 684, 95, 734]) == -1\nassert solution.findMaxK([-686, 640, 395, -368, 89, 264]) == -1\nassert solution.findMaxK([847, -297, 267, -262, 572, -236]) == -1\nassert solution.findMaxK([798, -184, -200]) == -1\nassert solution.findMaxK([899, -182, 872, -286, -356, -838, -166, -780]) == -1\nassert solution.findMaxK([-569, -583, -701, 298, 211, 515, -537, 573]) == -1\nassert solution.findMaxK([-485, 477]) == -1\nassert solution.findMaxK([-88, 757, -302, -449, -948, 730, -301, -966, -43]) == -1\nassert solution.findMaxK([-870, 574, -958, 824, 531, -40, 936, -668, -134]) == -1\nassert solution.findMaxK([124, -104, -770, -209, 981, -852, 730]) == -1\nassert solution.findMaxK([-331, 618, -258, 921]) == -1\nassert solution.findMaxK([975, 85, -670, -5, 142, -733, 985]) == -1\nassert solution.findMaxK([418, 28, -233, -75, -892, 698, 913, 779, 153, 843]) == -1\nassert solution.findMaxK([-658, -711]) == -1\nassert solution.findMaxK([-14, 23, -653, -344, -484, 607]) == -1\nassert solution.findMaxK([556, 307, 603, 118, -222]) == -1\nassert solution.findMaxK([773, 307, -860, -199, -808, -776, 819]) == -1\nassert solution.findMaxK([-218, -140, -600, 502, -276, 136, -933, 29]) == -1\nassert solution.findMaxK([528, -598]) == -1\nassert solution.findMaxK([-368, 755, -157, 437, 358, -472]) == -1\nassert solution.findMaxK([-370, -631, -956, -472, -348]) == -1\nassert solution.findMaxK([-744, 41, -500, -789, 476, -178, -974, -600, 281, -266]) == -1\nassert solution.findMaxK([-650, -445, -277, 709, 354, -402, 240, 535, -323, 484]) == -1\nassert solution.findMaxK([-949, -246]) == -1\nassert solution.findMaxK([986, 178, -818, 495, -133, -145]) == -1\nassert solution.findMaxK([858, 897, -235, 539, -162, -761, 339, -887, -236, -201]) == -1\nassert solution.findMaxK([-81, -566, 192, 595]) == -1\nassert solution.findMaxK([-139, -980, 369, 237, -312, 492, 190, -616, 792]) == -1\nassert solution.findMaxK([434, -437, -279, 461, -414, 168, -475, 544]) == -1\nassert solution.findMaxK([943]) == -1\nassert solution.findMaxK([-627, -32]) == -1\nassert solution.findMaxK([729, 43]) == -1\nassert solution.findMaxK([183, -612, 818, -615, 916, 475, -411, 760, 96]) == -1\nassert solution.findMaxK([-434, 599, -10, 547, 648, 343]) == -1\nassert solution.findMaxK([-430, -509, 285, 500, -717, 373, 712, 818]) == -1\nassert solution.findMaxK([11, -563, -198, 755, -576]) == -1\nassert solution.findMaxK([975, 497, -461, -371]) == -1\nassert solution.findMaxK([-934, -600, -803, -16, 846, 840, 232, 360, -801, 960]) == -1\nassert solution.findMaxK([-646, -241, 764, -326, 857]) == -1\nassert solution.findMaxK([-959, -753, -522, -454, 559, 771]) == -1\nassert solution.findMaxK([-499, 637, -570, -484, -994, 973, -551]) == -1\nassert solution.findMaxK([-831, -909, -378, -41, -570]) == -1\nassert solution.findMaxK([395, 770]) == -1\nassert solution.findMaxK([-42, 601, 447, 979, 647, 896]) == -1\nassert solution.findMaxK([716]) == -1\nassert solution.findMaxK([-244, 407, 579, 266, -809]) == -1\nassert solution.findMaxK([880, -217]) == -1\nassert solution.findMaxK([761, 294, -661]) == -1\nassert solution.findMaxK([623, -523, -724]) == -1\nassert solution.findMaxK([75, 820, 144, 20, 804, -695, -329, -101, -954]) == -1\nassert solution.findMaxK([-132, 944, 476, 41, -653, -901, -136, 621, 80, 677]) == -1\nassert solution.findMaxK([-511, 422, 137, -998, -638, -360, 112, 910]) == -1\nassert solution.findMaxK([135, -455, -802, 895]) == -1\nassert solution.findMaxK([-829, 385, 161, 630, 627, 698, 681, 501]) == -1\nassert solution.findMaxK([204]) == -1\nassert solution.findMaxK([536, 826, -872, 621]) == -1\nassert solution.findMaxK([182]) == -1\nassert solution.findMaxK([-818, 708, 86, 361, 601, 883, 58, 50]) == -1\nassert solution.findMaxK([440, -220, -966, -52, 202, -550, -360, -728]) == -1\nassert solution.findMaxK([-324, -70, 889, 333, -484, 222, 33]) == -1\nassert solution.findMaxK([-639, 626]) == -1\nassert solution.findMaxK([-71, 146]) == -1\nassert solution.findMaxK([589, 861, -39]) == -1\nassert solution.findMaxK([-372, -434, -250, -630, -666]) == -1\nassert solution.findMaxK([739, -993, 507, -692, 814, -830]) == -1\nassert solution.findMaxK([659, -677, -251, -739]) == -1\nassert solution.findMaxK([380, -429, -658, 159, -868, 871]) == -1\nassert solution.findMaxK([442, 780, 964, -179, -92, 393, 230, 913, -270]) == -1\nassert solution.findMaxK([721, 566]) == -1\nassert solution.findMaxK([392, 145, 438, -478]) == -1\nassert solution.findMaxK([963, -893, 669, 4, 737, 621, -605]) == -1\nassert solution.findMaxK([864, -841, 263, -489, -226, 733, -790, -687]) == -1\nassert solution.findMaxK([-282, -676, -70, -492, -256, 146]) == -1\nassert solution.findMaxK([86, -775, 52, -681]) == -1\nassert solution.findMaxK([-833, -292]) == -1\nassert solution.findMaxK([-995, 69, 739, -453, -403, 884, 893, -833, 116]) == -1\nassert solution.findMaxK([-569, 907, -558, -399, -506]) == -1\nassert solution.findMaxK([-274, 350, -329, -92, -172, -749, 447, 498]) == -1\nassert solution.findMaxK([-808, -338, 519, -570, -16, -120]) == -1\nassert solution.findMaxK([-681, 651, 622, -873]) == -1\nassert solution.findMaxK([-462]) == -1\nassert solution.findMaxK([588, 416, -587, 130, -486]) == -1\nassert solution.findMaxK([201, 143, 853]) == -1\nassert solution.findMaxK([494, -307, -762, 965, -955, 869, 367, 322]) == -1\nassert solution.findMaxK([135]) == -1\nassert solution.findMaxK([-272, 300, 505, 989, -322]) == -1\nassert solution.findMaxK([392, -330, -926, 321]) == -1\nassert solution.findMaxK([623]) == -1\nassert solution.findMaxK([-701, 567, -144, 315, 813]) == -1",
  "inefficient_solution": "def findMaxK(nums):\n    num_dict = {}\n    for i in range(len(nums)):\n        num_dict[nums[i]] = i\n\n    max_k = -1\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == -nums[j]:\n                max_k = max(max_k, abs(nums[i]))\n    return max_k",
  "is_python": true
}