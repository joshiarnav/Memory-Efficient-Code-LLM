{
  "problem_idx": 2354,
  "task_name": "Number of Excellent Pairs",
  "markdown_description": "\nYou are given a **0-indexed** positive integer array `nums` and a positive integer `k`.\n\n\nA pair of numbers `(num1, num2)` is called **excellent** if the following conditions are satisfied:\n\n\n* **Both** the numbers `num1` and `num2` exist in the array `nums`.\n* The sum of the number of set bits in `num1 OR num2` and `num1 AND num2` is greater than or equal to `k`, where `OR` is the bitwise **OR** operation and `AND` is the bitwise **AND** operation.\n\n\nReturn *the number of **distinct** excellent pairs*.\n\n\nTwo pairs `(a, b)` and `(c, d)` are considered distinct if either `a != c` or `b != d`. For example, `(1, 2)` and `(2, 1)` are distinct.\n\n\n**Note** that a pair `(num1, num2)` such that `num1 == num2` can also be excellent if you have at least **one** occurrence of `num1` in the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1], k = 3\n**Output:** 5\n**Explanation:** The excellent pairs are the following:\n- (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3.\n- (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\n- (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.\nSo the number of excellent pairs is 5.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,1,1], k = 10\n**Output:** 0\n**Explanation:** There are no excellent pairs for this array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= 60`\n\n\n",
  "canonical_solution": "class Solution:\n    def countExcellentPairs(self, nums: List[int], k: int) -> int:\n        s = set(nums)\n        ans = 0\n        cnt = Counter()\n        for v in s:\n            cnt[v.bit_count()] += 1\n        for v in s:\n            t = v.bit_count()\n            for i, x in cnt.items():\n                if t + i >= k:\n                    ans += x\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countExcellentPairs(self, nums, k):\n        s = set(nums)\n        ans = 0\n        cnt = Counter()\n        for v in s:\n            cnt[v.bit_count()] += 1\n        for v in s:\n            t = v.bit_count()\n            for i, x in cnt.items():\n                if t + i >= k:\n                    ans += x\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random value for k\n    k = random.randint(1, 61)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countExcellentPairs(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countExcellentPairs(nums, k) == expected_result\n        if expected_result > 0:\n        print(f\"assert solution.countExcellentPairs({nums}, {k}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.countExcellentPairs({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countExcellentPairs([79, 67, 75], 3) == 9\nassert solution.countExcellentPairs([14, 19, 72], 4) == 9\nassert solution.countExcellentPairs([73, 14, 29, 85, 81, 9, 76, 90, 67], 5) == 80\nassert solution.countExcellentPairs([82, 35, 21, 16, 53], 7) == 7\nassert solution.countExcellentPairs([91, 78], 8) == 4\nassert solution.countExcellentPairs([79, 66, 77, 72], 10) == 1\nassert solution.countExcellentPairs([76, 27], 2) == 4\nassert solution.countExcellentPairs([25, 31, 90, 8, 6, 35], 4) == 33\nassert solution.countExcellentPairs([39, 88, 13, 44, 42, 93, 62, 3, 25, 7], 3) == 100\nassert solution.countExcellentPairs([63, 26, 90, 3, 94, 2], 11) == 3\nassert solution.countExcellentPairs([15, 81], 7) == 3\nassert solution.countExcellentPairs([32, 12, 62, 78, 63], 10) == 6\nassert solution.countExcellentPairs([1, 35, 92, 79, 28, 86, 24, 87, 51], 2) == 81\nassert solution.countExcellentPairs([51, 89, 25, 61, 9, 13], 3) == 36\nassert solution.countExcellentPairs([15, 100, 57, 89], 5) == 16\nassert solution.countExcellentPairs([16, 7, 44], 6) == 4",
  "inefficient_solution": "class Solution:\n    def countExcellentPairs(self, nums: List[int], k: int) -> int:\n        s = set(nums)\n        ans = 0\n        cnt = [0] * 60\n        for v in s:\n            cnt[v.bit_count()] += 1\n        for v in s:\n            t = v.bit_count()\n            for i in range(60):\n                if t + i >= k:\n                    new_cnt = [0] * 60\n                    for j in range(60):\n                        new_cnt[j] = cnt[j]\n                    for j in range(60):\n                        new_cnt[j] += cnt[j]\n                    for j in range(60):\n                        if t + i >= k and j + i >= k:\n                            ans += new_cnt[j]\n        return ans",
  "is_python": true
}