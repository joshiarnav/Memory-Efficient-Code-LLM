{
  "problem_idx": 2585,
  "task_name": "Number of Ways to Earn Points",
  "markdown_description": "\nThere is a test that has `n` types of questions. You are given an integer `target` and a **0-indexed** 2D integer array `types` where `types[i] = [counti, marksi]` indicates that there are `counti` questions of the `ith` type, and each one of them is worth `marksi` points.\n\n\n\n\nReturn *the number of ways you can earn **exactly*** `target` *points in the exam*. Since the answer may be too large, return it **modulo** `109 + 7`.\n\n\n**Note** that questions of the same type are indistinguishable.\n\n\n* For example, if there are `3` questions of the same type, then solving the `1st` and `2nd` questions is the same as solving the `1st` and `3rd` questions, or the `2nd` and `3rd` questions.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** target = 6, types = [[6,1],[3,2],[2,3]]\n**Output:** 7\n**Explanation:** You can earn 6 points in one of the seven ways:\n- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6\n- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6\n- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6\n- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6\n- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6\n- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6\n- Solve 2 questions of the 2nd type: 3 + 3 = 6\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** target = 5, types = [[50,1],[50,2],[50,5]]\n**Output:** 4\n**Explanation:** You can earn 5 points in one of the four ways:\n- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5\n- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5\n- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5\n- Solve 1 question of the 2nd type: 5\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** target = 18, types = [[6,1],[3,2],[2,3]]\n**Output:** 1\n**Explanation:** You can only earn 18 points by answering all questions.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= target <= 1000`\n* `n == types.length`\n* `1 <= n <= 50`\n* `types[i].length == 2`\n* `1 <= counti, marksi <= 50`\n\n\n",
  "canonical_solution": "class Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        n = len(types)\n        mod = 10**9 + 7\n        f = [[0] * (target + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        for i in range(1, n + 1):\n            count, marks = types[i - 1]\n            for j in range(target + 1):\n                for k in range(count + 1):\n                    if j >= k * marks:\n                        f[i][j] = (f[i][j] + f[i - 1][j - k * marks]) % mod\n        return f[n][target]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        n = len(types)\n        mod = 10**9 + 7\n        f = [[0] * (target + 1) for _ in range(n + 1)]\n        f[0][0] = 1\n        for i in range(1, n + 1):\n            count, marks = types[i - 1]\n            for j in range(target + 1):\n                for k in range(count + 1):\n                    if j >= k * marks:\n                        f[i][j] = (f[i][j] + f[i - 1][j - k * marks]) % mod\n        return f[n][target]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random types list\n    types = [[random.randint(1, 6), random.randint(1, 5)] for _ in range(random.randint(1, 6))]\n    \n    # Generate a random target sum\n    target = random.randint(1, 51)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.waysToReachTarget(target, types)\n\n    return target, types, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        target, types, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.waysToReachTarget(target, types) == expected_result\n        print(f\"assert solution.waysToReachTarget({target}, {types}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.waysToReachTarget({target}, {types}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.waysToReachTarget(24, [[6, 5], [5, 5]]) == 0\nassert solution.waysToReachTarget(8, [[5, 1]]) == 0\nassert solution.waysToReachTarget(28, [[1, 3], [1, 2], [4, 4], [3, 5], [3, 5], [4, 1]]) == 60\nassert solution.waysToReachTarget(6, [[2, 3]]) == 1\nassert solution.waysToReachTarget(50, [[2, 3], [1, 1]]) == 0\nassert solution.waysToReachTarget(28, [[2, 1], [4, 4]]) == 0\nassert solution.waysToReachTarget(22, [[3, 1], [3, 2], [4, 3], [4, 4], [1, 5], [3, 4]]) == 118\nassert solution.waysToReachTarget(33, [[1, 2], [5, 5]]) == 0\nassert solution.waysToReachTarget(10, [[3, 5], [4, 5], [4, 5], [3, 4], [2, 5]]) == 10\nassert solution.waysToReachTarget(14, [[1, 2]]) == 0\nassert solution.waysToReachTarget(46, [[6, 1], [4, 3]]) == 0\nassert solution.waysToReachTarget(43, [[2, 1], [5, 2], [6, 2]]) == 0\nassert solution.waysToReachTarget(14, [[4, 4], [5, 3]]) == 1\nassert solution.waysToReachTarget(51, [[2, 2], [4, 4], [5, 3], [2, 1]]) == 0\nassert solution.waysToReachTarget(32, [[2, 1], [3, 2], [5, 1]]) == 0\nassert solution.waysToReachTarget(43, [[1, 4], [4, 2], [3, 1], [2, 1]]) == 0\nassert solution.waysToReachTarget(51, [[3, 5], [6, 5], [3, 1], [1, 3]]) == 1\nassert solution.waysToReachTarget(39, [[6, 3], [1, 5], [3, 4]]) == 0\nassert solution.waysToReachTarget(32, [[2, 4]]) == 0\nassert solution.waysToReachTarget(49, [[2, 3], [4, 3]]) == 0\nassert solution.waysToReachTarget(2, [[6, 2], [5, 1], [1, 2], [4, 5], [3, 4]]) == 3\nassert solution.waysToReachTarget(7, [[4, 1]]) == 0\nassert solution.waysToReachTarget(24, [[1, 1], [5, 5], [2, 2], [1, 3], [5, 4], [3, 3]]) == 47\nassert solution.waysToReachTarget(15, [[1, 1], [1, 5]]) == 0\nassert solution.waysToReachTarget(3, [[6, 3], [5, 3]]) == 2\nassert solution.waysToReachTarget(29, [[5, 5]]) == 0\nassert solution.waysToReachTarget(41, [[4, 3], [2, 5], [1, 2], [5, 2], [2, 4], [3, 5]]) == 41\nassert solution.waysToReachTarget(47, [[5, 5], [5, 3], [3, 1]]) == 0\nassert solution.waysToReachTarget(20, [[6, 5], [3, 5], [5, 2], [5, 2], [3, 1]]) == 78\nassert solution.waysToReachTarget(43, [[2, 4], [5, 3]]) == 0\nassert solution.waysToReachTarget(31, [[1, 2], [1, 2], [3, 4]]) == 0\nassert solution.waysToReachTarget(12, [[6, 2], [3, 2], [2, 3]]) == 8\nassert solution.waysToReachTarget(39, [[6, 1], [3, 4], [2, 3], [6, 3]]) == 3\nassert solution.waysToReachTarget(20, [[5, 2], [6, 4], [5, 4], [2, 1]]) == 27\nassert solution.waysToReachTarget(8, [[3, 4], [4, 3]]) == 1\nassert solution.waysToReachTarget(4, [[3, 2], [6, 1], [3, 3], [6, 1], [2, 4]]) == 12\nassert solution.waysToReachTarget(38, [[5, 1], [6, 3], [2, 2], [2, 1], [3, 2], [5, 4]]) == 216\nassert solution.waysToReachTarget(29, [[5, 1], [2, 2], [1, 5], [2, 3], [4, 3], [1, 1]]) == 9\nassert solution.waysToReachTarget(39, [[4, 4], [6, 3], [1, 3]]) == 0\nassert solution.waysToReachTarget(13, [[1, 3], [1, 2], [4, 2]]) == 1\nassert solution.waysToReachTarget(7, [[3, 5], [3, 3], [3, 4], [6, 3]]) == 2\nassert solution.waysToReachTarget(24, [[6, 3], [2, 1], [4, 1], [4, 3], [3, 4]]) == 90\nassert solution.waysToReachTarget(3, [[3, 4], [5, 5]]) == 0\nassert solution.waysToReachTarget(8, [[4, 3], [3, 4], [2, 2]]) == 3\nassert solution.waysToReachTarget(50, [[3, 1], [3, 2], [3, 4], [1, 3], [6, 5], [4, 2]]) == 52\nassert solution.waysToReachTarget(45, [[1, 5], [6, 2], [5, 4], [2, 1], [4, 3], [1, 1]]) == 15\nassert solution.waysToReachTarget(12, [[3, 2], [1, 3], [2, 5], [5, 1], [4, 1], [4, 1]]) == 200\nassert solution.waysToReachTarget(18, [[3, 2], [2, 4], [6, 3], [1, 3], [1, 4], [3, 2]]) == 54\nassert solution.waysToReachTarget(14, [[4, 2], [5, 3], [4, 1], [2, 4]]) == 22\nassert solution.waysToReachTarget(4, [[1, 4], [2, 4], [2, 1]]) == 2\nassert solution.waysToReachTarget(43, [[6, 3], [1, 2], [2, 4]]) == 0\nassert solution.waysToReachTarget(6, [[1, 1], [3, 3], [4, 1], [2, 5], [3, 2]]) == 12\nassert solution.waysToReachTarget(23, [[1, 5], [1, 1], [6, 3], [3, 4], [1, 4]]) == 10\nassert solution.waysToReachTarget(18, [[1, 5], [1, 5], [1, 1], [5, 2], [2, 2]]) == 7\nassert solution.waysToReachTarget(6, [[5, 1], [3, 1]]) == 3\nassert solution.waysToReachTarget(22, [[4, 2], [3, 3], [5, 4]]) == 5\nassert solution.waysToReachTarget(23, [[3, 2], [1, 3], [5, 2], [5, 2], [6, 2], [3, 1]]) == 448\nassert solution.waysToReachTarget(26, [[5, 1], [4, 1], [5, 4]]) == 4\nassert solution.waysToReachTarget(36, [[4, 1], [6, 1], [3, 3], [6, 3], [5, 1]]) == 47\nassert solution.waysToReachTarget(48, [[4, 4]]) == 0\nassert solution.waysToReachTarget(45, [[3, 4], [2, 5], [3, 3], [4, 5], [6, 2], [2, 3]]) == 118\nassert solution.waysToReachTarget(48, [[5, 2], [1, 5], [4, 1]]) == 0\nassert solution.waysToReachTarget(47, [[3, 3], [5, 4], [4, 2], [5, 3], [5, 4], [2, 1]]) == 309\nassert solution.waysToReachTarget(42, [[1, 4], [4, 1], [5, 2]]) == 0\nassert solution.waysToReachTarget(11, [[3, 4], [3, 5], [1, 4]]) == 0\nassert solution.waysToReachTarget(36, [[2, 4], [4, 3]]) == 0\nassert solution.waysToReachTarget(32, [[2, 5], [4, 3], [6, 5], [5, 3]]) == 17\nassert solution.waysToReachTarget(25, [[6, 4], [2, 2], [4, 2], [5, 3]]) == 22\nassert solution.waysToReachTarget(5, [[4, 5], [5, 2]]) == 1\nassert solution.waysToReachTarget(30, [[4, 5], [3, 4], [2, 1], [4, 3]]) == 9\nassert solution.waysToReachTarget(35, [[1, 1], [6, 1], [1, 5], [6, 3], [3, 5]]) == 15\nassert solution.waysToReachTarget(42, [[2, 3], [2, 3], [4, 3], [4, 4], [4, 4]]) == 18\nassert solution.waysToReachTarget(27, [[5, 3], [2, 3]]) == 0\nassert solution.waysToReachTarget(6, [[3, 3], [1, 2]]) == 1\nassert solution.waysToReachTarget(26, [[3, 2], [3, 3], [5, 5]]) == 3\nassert solution.waysToReachTarget(50, [[1, 3], [2, 3]]) == 0\nassert solution.waysToReachTarget(28, [[2, 4], [5, 3], [6, 5], [4, 4], [4, 4]]) == 59\nassert solution.waysToReachTarget(23, [[1, 3], [6, 4], [5, 4]]) == 6\nassert solution.waysToReachTarget(29, [[5, 4], [5, 5], [2, 3], [3, 5]]) == 11\nassert solution.waysToReachTarget(15, [[2, 4], [3, 4], [1, 4], [3, 2], [5, 4]]) == 0\nassert solution.waysToReachTarget(12, [[1, 2]]) == 0\nassert solution.waysToReachTarget(8, [[6, 2], [2, 1], [5, 2], [2, 4], [2, 1]]) == 31\nassert solution.waysToReachTarget(32, [[2, 1], [3, 3], [6, 1], [5, 1], [6, 4]]) == 110\nassert solution.waysToReachTarget(3, [[5, 4], [4, 1], [2, 4], [6, 5], [1, 4]]) == 1\nassert solution.waysToReachTarget(26, [[5, 5], [5, 5], [2, 1], [1, 4], [4, 4]]) == 24\nassert solution.waysToReachTarget(42, [[5, 3], [2, 4], [2, 5], [5, 1]]) == 0\nassert solution.waysToReachTarget(22, [[5, 2], [6, 5], [4, 2], [6, 2]]) == 42\nassert solution.waysToReachTarget(35, [[6, 5], [5, 1], [2, 2], [1, 2], [5, 3], [6, 1]]) == 302\nassert solution.waysToReachTarget(11, [[2, 1]]) == 0\nassert solution.waysToReachTarget(29, [[5, 4], [6, 4], [1, 5], [6, 5], [1, 1]]) == 27\nassert solution.waysToReachTarget(4, [[4, 2]]) == 1\nassert solution.waysToReachTarget(39, [[6, 3], [3, 4], [4, 2], [2, 1]]) == 1\nassert solution.waysToReachTarget(44, [[5, 1], [4, 4], [3, 2], [6, 5], [6, 3], [3, 1]]) == 617\nassert solution.waysToReachTarget(30, [[2, 2]]) == 0\nassert solution.waysToReachTarget(1, [[4, 2]]) == 0\nassert solution.waysToReachTarget(29, [[2, 4], [5, 5], [6, 1], [1, 3], [6, 3], [6, 2]]) == 339\nassert solution.waysToReachTarget(1, [[4, 3], [3, 5], [1, 5], [3, 1]]) == 1\nassert solution.waysToReachTarget(36, [[5, 5], [3, 3], [4, 4], [6, 5], [4, 1]]) == 100\nassert solution.waysToReachTarget(32, [[4, 5], [5, 1], [4, 4], [4, 4]]) == 26\nassert solution.waysToReachTarget(20, [[1, 1], [5, 1], [6, 2], [3, 1]]) == 3",
  "inefficient_solution": "class Solution:\n    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:\n        n = len(types)\n        mod = 10**9 + 7\n        dp = [[0] * (target + 1) for _ in range(n + 1)]\n        for _ in range(10000):\n            dp2 = [[0] * (target + 1) for _ in range(n + 1)]\n            for i in range(n + 1):\n                for j in range(target + 1):\n                    count, marks = types[i - 1] if i > 0 else [0, 0]\n                    for k in range(10000):\n                        if j >= k * marks:\n                            dp2[i][j] = (dp2[i][j] + dp[i][j - k * marks]) % mod\n            dp = dp2\n        return dp[n][target]",
  "is_python": true
}