{
  "problem_idx": 202,
  "task_name": "Happy Number",
  "markdown_description": "\nWrite an algorithm to determine if a number `n` is happy.\n\n\nA **happy number** is a number defined by the following process:\n\n\n* Starting with any positive integer, replace the number by the sum of the squares of its digits.\n* Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1.\n* Those numbers for which this process **ends in 1** are happy.\n\n\nReturn `true` *if* `n` *is a happy number, and* `false` *if not*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 19\n**Output:** true\n**Explanation:**\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        def next(x):\n            y = 0\n            while x:\n                x, v = divmod(x, 10)\n                y += v * v\n            return y\n\n        slow, fast = n, next(n)\n        while slow != fast:\n            slow, fast = next(slow), next(next(fast))\n        return slow == 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isHappy(self, n: int) -> bool:\n        def next(x):\n            y = 0\n            while x:\n                x, v = divmod(x, 10)\n                y += v * v\n            return y\n\n        slow, fast = n, next(n)\n        while slow != fast:\n            slow, fast = next(slow), next(next(fast))\n        return slow == 1\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random number\n    n = random.randint(1, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isHappy(n)\n\n    return n, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isHappy(n) == expected_result\n        if expected_result:\n            print(f\"assert solution.isHappy({n}) == {expected_result}\")\n            test_case_generator_results.append(\n                f\"assert solution.isHappy({n}) == {expected_result}\"\n            )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.isHappy(7) == True\nassert solution.isHappy(44) == True\nassert solution.isHappy(82) == True\nassert solution.isHappy(23) == True\nassert solution.isHappy(32) == True\nassert solution.isHappy(32) == True\nassert solution.isHappy(70) == True\nassert solution.isHappy(70) == True\nassert solution.isHappy(10) == True\nassert solution.isHappy(1) == True\nassert solution.isHappy(82) == True\nassert solution.isHappy(31) == True\nassert solution.isHappy(94) == True\nassert solution.isHappy(13) == True\nassert solution.isHappy(97) == True",
  "inefficient_solution": "class Solution:\n    def isHappy(self, n: int) -> bool:\n        def next(x):\n            return sum(int(digit) ** 2 for digit in str(x))\n\n        numbers = []\n        while n not in numbers:\n            numbers.append(n)\n            n = next(n)\n        return n == 1",
  "is_python": true
}