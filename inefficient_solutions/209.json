{
  "problem_idx": 209,
  "task_name": "Minimum Size Subarray Sum",
  "markdown_description": "\nGiven an array of positive integers `nums` and a positive integer `target`, return *the **minimal length** of a* *subarray* *whose sum is greater than or equal to* `target`. If there is no such subarray, return `0` instead.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** target = 7, nums = [2,3,1,2,4,3]\n**Output:** 2\n**Explanation:** The subarray [4,3] has the minimal length under the problem constraint.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** target = 4, nums = [1,4,4]\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** target = 11, nums = [1,1,1,1,1,1,1,1]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= target <= 109`\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 104`\n\n\n\u00a0\n\n\n**Follow up:** If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`.\n\n",
  "canonical_solution": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        ans = n + 1\n        s = j = 0\n        for i, x in enumerate(nums):\n            s += x\n            while j < n and s >= target:\n                ans = min(ans, i - j + 1)\n                s -= nums[j]\n                j += 1\n        return ans if ans <= n else 0\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        ans = n + 1\n        s = j = 0\n        for i, x in enumerate(nums):\n            s += x\n            while j < n and s >= target:\n                ans = min(ans, i - j + 1)\n                s -= nums[j]\n                j += 1\n        return ans if ans <= n else 0\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 10001), random.randint(1, 100))\n\n    # Generate a random target\n    target = random.randint(1, 1000000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minSubArrayLen(target, nums)\n\n    return target, nums, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        target, nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minSubArrayLen(target, nums) == expected_result\n        print(f\"assert solution.minSubArrayLen({target}, {nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minSubArrayLen({target}, {nums}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minSubArrayLen(117097029, [1965, 6790, 1765, 1619, 6111, 7031, 3299, 7684, 2293, 5196, 1605, 5314]) == 0\nassert solution.minSubArrayLen(361013410, [7873, 2874, 5187, 8076, 1294, 1027, 6491, 6330, 3878, 8552, 1029, 8860, 4730, 7474, 9778, 8841, 6066, 721, 8272, 1127, 2584, 5164, 7149, 6699, 4110, 5938, 4237, 6036, 6359, 8676, 2466, 930, 3786, 9608, 7718, 5109, 6492, 4318, 2501, 7729, 9910, 1850, 592, 2594, 9322, 6144, 1961, 6396, 770, 1772, 1306, 243, 6297, 3859, 5668, 4984, 4517, 3107, 3232, 5904, 9208, 5470, 2811, 4621, 8111, 9817, 3555, 1909, 4657, 7700, 3387, 5297, 5018, 8838, 6108, 6172, 7785, 3697, 137, 4422, 8061, 5986, 8637, 3062, 4468, 4533, 8483, 3286]) == 0\nassert solution.minSubArrayLen(320326014, [1729, 1705, 5529, 7282, 1323, 169, 7232, 8992, 5848, 7888, 7807, 6313, 7470, 8214, 4381, 6790, 3926, 3927, 4708, 4557, 2473, 9154, 8963, 7855, 1582, 1626, 8750, 2183, 9710, 1044, 3586, 220, 2398, 6008, 8340, 8230, 5132, 9247, 9450, 7127, 4097, 4428, 5953, 9536, 2449, 6302, 3899, 8265, 6635, 5308, 7881, 8899, 6646, 9385, 9065, 9530, 3784, 936, 4903, 1164, 4241, 7307, 4968, 6158, 6191, 8888, 6075, 9557, 4475, 4690, 1754, 6143, 6180, 3161, 4820, 4420, 302, 6377, 3921, 6281, 5235, 9332, 4360, 986, 1334, 3519, 3893, 1766]) == 0\nassert solution.minSubArrayLen(365161483, [3499, 9995, 4351, 7837, 1401, 6421, 6674, 6132, 2310, 7818, 2560, 9753, 2881, 212, 563, 320, 3926, 5652, 7080, 2466, 7788, 6573, 4528, 8012, 1074, 9415, 248, 2015, 3727, 4750, 7831, 9586, 8657, 3701, 8959, 3047, 8793, 5842, 7825, 2719, 910, 1208, 508, 7491, 3946, 4394, 3382, 8929, 2912]) == 0\nassert solution.minSubArrayLen(52151376, [7650, 9023, 8847, 6247, 8805, 720, 1995, 4008, 6853, 9827, 6176, 6678, 6567, 4555, 8390, 4318, 9872, 3868, 8253, 2923, 3923, 9684, 8085, 3043, 5161, 2916, 513, 1705, 979, 3806, 4039, 2195, 4336, 5605, 3277, 5184]) == 0\nassert solution.minSubArrayLen(261896556, [3289, 4881, 4706, 30, 2768, 6390, 3954, 8320, 1593, 3286, 6130, 7027, 1047, 3451, 2360, 2944, 9396, 1732, 3859, 6948, 2913, 469, 1056, 7639, 6768, 563, 9797, 3505, 2538, 6447, 640, 166, 2597, 2961, 3000, 6329, 7347, 9326, 889, 294, 6062, 5696, 2638, 9939, 5262, 868, 9793, 4391, 4167, 3837, 2658, 5931, 2272, 206, 5885, 7571, 9211, 713, 9351, 7517, 528, 3667]) == 0\nassert solution.minSubArrayLen(986850957, [5398, 7505, 5131, 8395, 5864, 5616, 6457, 3789, 445, 3057, 1907, 632, 5086, 9154, 6970, 3142, 3028, 7284, 5224, 9633, 8111, 5212, 4631, 6916, 7037, 443, 2947, 1695, 1755, 6596, 9900, 6191, 3260, 8311, 7462, 3835, 5289, 457, 5204, 3020, 3838, 9291, 1635, 1038, 1623, 6290, 6089, 2951, 8798, 2203, 1829, 5640, 8628, 556, 6751, 6452, 8686, 7885, 7673, 7072, 6874, 1744, 1278, 9969, 2310, 1571, 7701, 9723, 2082, 1817, 1933, 658, 6714, 9084, 7906, 7557, 7166]) == 0\nassert solution.minSubArrayLen(486166024, [8215, 3844, 1506, 545, 4014, 1201, 2838, 6200, 4326, 4179, 5080, 21, 5336, 802, 1741, 4807, 1654, 4475, 2063, 6852, 2803, 6210, 8138, 7871, 2695, 4662, 1625, 5554, 6396, 3964, 223, 6826, 1549, 2710, 6055, 1309, 3583, 9199, 1164, 1269, 6353, 3077, 8139, 3296, 8537, 167, 1373, 5661, 2762, 9729, 6305, 6297, 2313, 6222, 4842, 4065, 6948, 7305, 3766, 2886, 6483, 7827, 272, 4719]) == 0\nassert solution.minSubArrayLen(62895973, [8286, 7170, 5597, 4561, 5927, 8662, 1163, 2436, 8540, 9305, 7261, 7759, 1212, 4554, 1488, 9480, 1805, 5652, 5049, 3251, 4841, 8711, 8620, 2781, 7174, 6889, 3154, 5889, 9172, 212, 8156, 3018, 2940, 9176, 3944, 6454, 2349, 5364, 5379, 3487, 2302, 4706, 7981, 7989]) == 0\nassert solution.minSubArrayLen(777428822, [3926, 5061, 5614, 5276, 979, 5298, 9355, 173, 8990, 8849, 3908, 1339, 2310, 3822, 4239, 4982, 529, 4809, 8371, 6583, 4192, 1049, 3838, 7164, 5452, 7969, 9379, 3270, 8011, 922, 3032, 1212, 4234, 6423, 1108, 7564, 7170, 6513, 491, 2119, 8812, 9906, 9501, 1537, 7335, 4485, 105, 5849, 5370, 5544, 9162, 8863, 2222, 6025, 6646, 8253, 8545, 2050, 379, 1390, 5217, 4735, 9380, 4357, 8444, 7732, 3143, 8368, 1979, 9110, 1091, 7246, 6092, 3253, 5110, 1397, 9972, 5019, 6935, 4226, 9153, 5478, 5782, 4800, 8749]) == 0\nassert solution.minSubArrayLen(731641313, [3376, 2150, 2703, 8428, 4281, 504, 682, 7486, 1058, 2054, 8631]) == 0\nassert solution.minSubArrayLen(612039344, [5481, 2835, 5581, 7134, 1766, 7099, 7013, 5927, 2073, 5506, 4218, 3508, 2083, 9136, 2830, 5874, 3533, 3629, 3197, 2116, 2838, 4100, 6259, 3870, 1483, 815, 1797, 2656, 775, 7938, 3048, 1361, 7186, 9161, 7032, 5566, 408, 9610, 5833, 5821, 4135, 6593, 4673, 9763, 2839, 9163, 8111, 7386, 1737, 6447, 4278, 6575, 1697, 3453, 128, 1060, 3309, 5081, 8034, 3121, 9861, 3067, 8782, 4715, 8315, 8640, 9678]) == 0\nassert solution.minSubArrayLen(830086675, [3363, 7048, 8541, 1907, 3402, 5549, 6991, 4420, 5203, 2983, 2271, 3068, 6928, 7205, 7363, 5623, 7308, 4997, 4842, 3777, 4578, 1690, 1078, 1234, 9257, 7466, 7620, 3419, 7227, 9237, 2610, 1291]) == 0\nassert solution.minSubArrayLen(803703689, [38, 1403, 4790, 2959, 6800, 4578, 3285, 6343, 7305, 8853, 9052, 2389, 4794, 7163, 6183, 5535, 9021, 5777, 4631, 2769, 4563, 6322, 3113, 5259, 3560, 1193, 254, 3423, 7503, 4188, 4194, 8911, 5883, 9918, 2931, 7800, 1070, 4451, 3662, 295, 1392, 856, 9528, 9362, 9605, 970, 5316, 827, 6009, 9015, 6779, 9766, 398, 2131, 7387, 9481]) == 0\nassert solution.minSubArrayLen(91144768, [4108, 4228, 3775, 5093, 8902, 5520, 6530, 1627, 4739, 2352, 4849, 5139, 8898, 87, 4383, 1125, 693, 6482, 894, 9156, 5038, 4738, 5607, 3584, 6796, 2003, 8216, 1430, 5005, 1204, 5541, 6586, 782, 912, 1481, 6030, 9259, 3799, 8123, 7217, 7489, 3070, 6844, 8005, 5002, 4796, 3969, 7694]) == 0\nassert solution.minSubArrayLen(274800859, [2345, 9504, 138, 107, 3578, 3265, 311, 4658, 1475, 1223, 171, 8569, 1352, 6131, 8192, 9200, 6639, 4465, 8896, 6152, 3773, 1243, 7797, 2900]) == 0\nassert solution.minSubArrayLen(940280088, [9851, 6681, 1473, 4615, 6830, 1452, 2908, 8246, 2595, 8151, 8286, 993, 7058, 3429, 8500, 810, 8185, 6881, 9286, 9129, 1137, 5494, 4157, 976, 9198, 1889, 9975, 6405, 1060, 1429, 199, 604, 3444, 8928, 387, 9568, 2448, 2009, 1418, 2725, 9343, 1615, 3834, 7778, 2445, 4165, 8753, 2480, 3269, 2115, 322, 4450, 1989, 5747, 7093, 2509, 7478, 6030, 6674, 5617, 770, 7378, 7992]) == 0\nassert solution.minSubArrayLen(443634713, [5413, 3816, 5922, 5844, 4996, 8894, 1100, 5678, 2580, 6088, 1044, 8388, 6514, 7242, 4080, 8320, 9302, 9441, 3849, 7440, 3378, 4994, 699]) == 0\nassert solution.minSubArrayLen(386949077, [7972, 914, 8387, 9762, 8205, 8027, 8001, 9840, 3022, 105, 8276, 9728, 6536, 1819, 9720, 5330, 752, 6114, 1159, 1270, 4144, 8345, 4616, 6763, 4864, 5760, 9722, 8455, 5405, 9941, 8518, 8023, 7854, 2502, 7208, 3064, 4016, 1395, 2235, 2585, 6980, 9074, 2600, 6721, 5568, 6002, 7125, 6884, 5893, 1878, 9881, 6612, 7026, 552, 8369, 2376, 2488, 9645, 7551, 1211, 3018, 9283, 1988, 6269, 9962, 5906, 3937, 7572, 5200, 9607, 4268, 7389, 7400, 1984, 356, 1683, 5659, 7633, 1246, 3347, 5459, 333, 7231, 13, 2526]) == 0\nassert solution.minSubArrayLen(932453013, [8845, 5099, 2077, 7030, 1621, 5783, 7134, 4896, 9460, 2642, 5127, 8248, 2696, 903, 2701, 1408, 3565, 6889, 6573, 6779, 6146, 498, 9202, 175, 8844]) == 0\nassert solution.minSubArrayLen(457977815, [7818, 933, 775, 2632, 665, 5683, 9778, 5800, 7515, 8777, 8844, 8766, 9595, 6455, 2807, 4293, 5968, 324, 1465, 9319, 5214, 8720, 9121, 2563, 1291, 4894, 7596, 9794, 6737, 9668, 4782, 1191, 1832, 3606, 5844, 2676, 7564, 7506, 259, 9529, 9874, 5775, 9470, 6538, 1927, 1476, 590, 7067, 5434, 220, 9045, 6622, 9063, 1630, 9087, 3952, 2814, 2522, 5872, 155, 228, 109, 6040, 7424, 6998, 4400, 850, 2130, 9268, 9455, 9887, 985, 4217, 3226, 8611, 8426, 2289, 414, 2912, 3712, 5175, 5679, 7098, 1595, 8188, 9435, 6724, 1611, 827, 4485, 5388, 2712, 9347]) == 0\nassert solution.minSubArrayLen(784274039, [1479, 3666, 3746, 3805, 5457, 1107, 9660, 9325, 9554, 2712, 672, 8572, 1538, 6768, 2328, 5006, 6312, 3282, 8961, 1562, 4654, 8390, 4450, 3686, 205, 2374, 3607, 5777, 6023, 9657, 5759, 9617, 5080, 9265, 4691, 330, 849, 1339, 4325, 3975, 7631, 1774, 6061, 9981, 9831, 7727, 16, 8632, 980, 6077, 789, 2068, 7377, 7835, 3947, 7009, 6292, 7611, 9140, 8299, 450, 9879, 5989, 1311, 1893, 3001, 7452, 6624, 1325, 6448, 7107, 7325, 3376, 9497, 4300, 2470, 693, 1086, 8910, 8095, 9474, 636, 6142, 8813, 1187, 5756, 1704, 7077, 5785, 4127, 1747, 3155, 3650, 920, 9454, 6899, 3521]) == 0\nassert solution.minSubArrayLen(228096103, [3616, 8171, 7834, 5070, 8824, 8722, 9311, 2613, 3761, 8562, 5008, 8409, 826, 924, 67]) == 0\nassert solution.minSubArrayLen(971964466, [4785, 806, 9157, 5347, 7928, 3828, 8390, 5246, 2950, 2883, 4280, 7113, 7503, 4736, 6091, 2353, 7447, 3003, 1238, 4682, 6651, 6136, 6910, 3608, 4204, 3037, 6063, 3447, 2360, 7898, 5556, 5066, 6453, 9398, 7158, 7647, 3111, 6819, 7575, 3173, 4283, 4993, 536, 7814, 4761, 8058, 5984, 6281, 378, 8419, 7710, 2392, 5569, 8216, 2145, 8567, 8186, 7013, 7045, 9914, 272, 8155, 8924, 7766, 1700, 7748, 4057, 4428, 480, 4088, 2800, 9006, 6904, 9022, 3890, 5701, 281, 6825, 4609, 4353, 2965, 3906]) == 0\nassert solution.minSubArrayLen(558858744, [9831, 2843, 4647, 1971, 7556, 3324, 8298, 7671, 1925, 3227, 6381, 1406, 9075, 9717, 6056, 8902, 7926, 4341, 1472, 7484, 4199, 957, 9035, 2647, 605, 7305, 5580, 5153, 5283, 8330, 2203, 5687, 9981, 1999, 8475, 8300, 5599, 3527, 7303, 572, 2779, 8816, 3804, 1429, 2529, 2261, 9347, 8803, 1495, 3586, 4054, 706, 7899, 8442, 6883, 3350, 8778, 9890, 5713, 9408, 7530, 2883, 8728]) == 0\nassert solution.minSubArrayLen(308145492, [1457, 3010, 5741, 6236, 3237, 2333, 149, 8542, 9613, 9810, 792, 4269, 469, 7328, 2483, 3378, 7260, 9002, 5805, 3857, 1055, 3805, 810, 3229, 8316, 8534, 9502, 5762, 7819, 5094, 7771, 7398, 4965, 5427, 2380, 3971, 2811, 6699, 4479, 5409, 8865, 7506, 1038, 9451, 146, 4630, 199, 8527, 9750, 3521, 2683, 2519, 4010, 6069, 6268, 4810, 9766, 4628, 1133, 6663, 1177, 4782, 5912, 8958, 640, 2227, 1637, 1787, 6022, 5166, 8746, 5426, 5909, 7222, 280, 6011, 8076, 6843, 5983, 133, 3469, 941, 9895, 4934, 4886, 9070, 8046, 5428, 3881, 8309, 1007, 1468, 6114, 3973, 5123]) == 0\nassert solution.minSubArrayLen(528488066, [1210, 9337, 1802, 9917, 2932, 7293, 2587, 8720, 160, 3911, 8387, 970, 485, 9498, 4175, 5241, 8271, 8662, 6263, 15, 7196, 1353, 5620, 652, 8236, 2240, 2607, 3476, 2453, 9806, 1062, 8099, 4496, 5509, 5533, 3928, 1670, 8516, 1877, 8834]) == 0\nassert solution.minSubArrayLen(862630351, [9061, 5270, 399, 818, 9130, 1266, 2855, 3770, 6245, 9626, 3228, 6323, 79, 7095, 3825, 1159, 3230, 29, 2845, 6503, 8827, 7326, 5160, 205, 1648, 6042, 393, 8535, 3223, 743, 7225, 5033, 5900, 4253, 3084, 2363, 6710, 774, 3075, 681, 5641, 5219, 2868, 2859, 8091, 1514, 3840, 3017, 1096, 875, 8154, 2728, 4347, 2467, 6129, 253, 4836, 5121, 7574, 3282, 5631, 1696, 229, 5174, 9973, 7375, 8329, 7265, 5568, 331, 6210, 3971, 890, 6483, 9138, 1728, 265, 2828, 7037, 6073, 2541]) == 0\nassert solution.minSubArrayLen(187409340, [215, 7888, 7500, 7439, 484, 7897, 4212, 3615, 847, 6206, 7557, 5106, 1687, 5281, 714, 4524, 1791, 6522, 8231, 6827, 28, 2265, 2370, 8117, 9363, 760, 8935, 112, 9727, 1494, 7544]) == 0\nassert solution.minSubArrayLen(450791726, [9809, 7135, 140, 9763, 9827, 78, 6438, 2953, 4455, 4054, 3381, 7870, 7019, 4530, 6047, 7794, 2357, 6119, 8127, 1107, 107, 3891, 7052, 6792, 4973, 8908, 7378, 3279, 1561, 8838, 7192, 5224, 4387, 6061, 7418, 5514, 4548, 811, 3975, 2882, 2800, 7157, 3301, 380, 9362, 7339, 8810, 2699, 3582, 4296, 3319, 2958, 5723, 3321, 6206, 9750, 6517, 1197, 6910, 3136, 749, 6730, 6055, 6015, 5564, 91, 5502, 1141, 8930, 951, 8859, 6213, 2743, 7513, 3330, 939, 6886, 4679, 5690, 7687, 207, 9461, 6005, 5915, 8053, 7283, 5913, 2574]) == 0\nassert solution.minSubArrayLen(689156411, [4587, 4258, 9301, 3866, 5765, 1572, 2879, 5542, 778, 4938, 7422, 637, 8431, 459, 5827, 9285, 1054, 9455, 532, 742, 5890, 9950, 1237, 9146, 3569, 5757, 464, 4305, 6925, 6505, 8970, 6712, 9575, 8650, 6154, 1189, 4652, 915, 1782, 4762, 2722, 9904, 2992, 6500, 5233, 7243, 9969, 4934, 7258, 9946, 3852, 3520, 9938, 9563, 7206, 9016, 3016]) == 0\nassert solution.minSubArrayLen(976701995, [9198, 1120, 5388, 3036, 1270, 6008, 8222, 5381, 542, 2606, 9782, 3049, 5407, 2605, 2182, 8739, 2179, 9913, 4697, 2417, 9411, 3289, 6484, 2378, 5291, 6743, 8537, 8595, 2789, 6163, 2682, 3425, 5194, 6130, 9829, 3586, 5056, 7127, 2725, 3144, 7091, 4505, 403, 3985]) == 0\nassert solution.minSubArrayLen(832454306, [6809, 2065, 8589, 5294, 1283, 9051, 4361, 4080, 625, 6567, 1044, 7668, 6687, 8924, 9444, 3598, 6995, 5828, 9832, 4425, 4806, 2502, 3889, 4450, 5520, 7069, 6618, 5319, 8170, 8158, 8393, 5062, 7389, 1280, 8558, 9283, 2078, 3904, 2980, 7861, 4426, 5433, 5946, 7396, 4721, 5935, 2479, 6219, 8820, 8538, 3857, 9517, 2680, 4073, 2404, 8722, 9904, 4260, 3757, 9736, 5481, 4891, 2309, 5019, 4796, 6264, 5506, 6081, 8149, 9116, 7237, 3636, 3597, 2887, 3729, 1715, 2090]) == 0\nassert solution.minSubArrayLen(34684199, [4493, 1062, 6796, 1388, 197, 7344, 3281, 5496, 6691, 5703, 4473, 7056, 1786, 179, 4791, 6900, 9972, 556, 7719, 9613, 7204, 8535, 7862, 5800, 6110, 1186, 7497, 3409, 5642, 7752, 1411, 7654, 3897, 2318, 1138, 7212, 7601, 689, 9623, 4098, 6580, 7962, 7069, 5573, 3808, 1379, 7626, 6039]) == 0\nassert solution.minSubArrayLen(625010821, [6163, 3211, 1189, 1753, 7617, 6405, 8233, 5539, 636, 6803, 281, 2979, 9284, 34, 4957, 2064, 3164, 5997, 5048, 128, 9467, 2133, 6829, 6651, 3229, 3408, 4709, 7311, 8816, 7077, 1255, 5731, 7698, 6946, 699, 9683, 7169, 1907, 1611, 2952, 712, 8703, 9165, 1871, 2017, 6383, 5535, 6637, 2940, 7733, 5753, 8745, 4916, 9790, 403, 670, 2788, 2449, 3938, 1475, 8385, 2923, 9237, 290, 8318, 1333, 3913, 8074, 3518, 6531, 5093, 9576, 324, 204, 2284, 2676, 7085, 4814, 5077, 4584, 8810, 546, 4193, 6433, 1855, 3738, 6408, 9060, 831, 6764, 5286, 3185, 5531, 6929, 4617, 513, 7753, 8998, 2432]) == 0\nassert solution.minSubArrayLen(615994793, [6823, 9975, 1874, 4022, 4158, 3338, 1691, 3925, 1949, 9752, 1376, 5378, 225, 3402, 4882, 5431, 4753, 842, 6670, 4042, 3810, 1867, 1951, 6959, 3246, 6854, 2984, 6321, 1767, 503, 1112, 2260, 725, 6211, 936, 536, 4539, 3192, 6786, 8025, 5918, 2053, 9769, 3742, 3178, 3790, 7916, 6622, 4875, 8472, 9362, 7537, 1595, 4045, 2089, 4868, 8237, 759, 2221, 9941, 8064, 5978, 3374, 6237, 7902, 331, 9387, 8528, 9793, 7124, 3211, 5628, 7948, 2110, 6495, 1561, 8813, 2641, 5403, 8266, 7899, 4249, 6070, 4736, 9262, 118, 9763, 4668]) == 0\nassert solution.minSubArrayLen(79497797, [1480, 7017, 8691, 5641, 9634, 6393, 1239, 8388, 2084, 6075, 2182, 138, 660, 9059, 5567, 7341, 8633, 9916, 2389, 9341, 7883, 8073, 2786, 6115, 6713, 1078, 6064, 9104, 7579, 6300, 2799, 212, 1948, 5225, 9438, 3258, 5163, 981, 7333, 6106, 1254, 5723, 5636, 2858, 1376, 614, 5915, 823, 7984, 3834, 4909, 5011, 8504, 5357, 8932, 8355, 7899, 1234, 4746, 8469, 314, 5562, 9176, 4325, 8890, 2604, 4178, 9296, 172, 9841, 2749, 4512, 9495, 7342, 575, 3104, 8554, 4585, 4639, 2892, 6633]) == 0\nassert solution.minSubArrayLen(562125567, [6470, 5004, 5992, 2319, 9207, 628, 9309, 5173, 9744, 1107, 7996, 4159, 622, 5423, 597, 221, 969, 829, 7757, 5363, 7682, 63, 8379, 2395, 1241, 4802, 3144, 7166, 9801, 288, 7573, 3885, 8725, 449, 6278, 7477, 5799, 9957, 748, 5428, 505, 4566, 8003, 6189, 7501, 4227, 8134, 6057, 5815, 8748, 7727, 7044, 170, 4731, 7256, 3673, 3447, 3349, 2321, 1678, 859, 2345, 6029, 681, 6173, 230, 8238, 8302, 9169, 3978, 2364, 5276, 4886, 9024, 3972, 6777, 428, 1421, 7999, 3353, 4505, 3844, 8532, 234, 6105, 2733, 8737, 3632, 7388, 8149, 5543, 3386, 2010, 9254, 1438]) == 0\nassert solution.minSubArrayLen(729698560, [3703, 921, 7988, 8902, 7501, 4250, 7544, 7096, 1823, 6727, 3554, 7010, 663, 5168, 7265, 2251, 7925, 6525, 5334, 5751, 9464, 3407, 34, 5793, 8269, 4558, 2589, 4413, 675, 7590, 6259, 6977, 9359, 6060, 837, 5233, 9655, 1708, 4881, 2938, 8090, 599, 1775, 1179, 9722, 6246, 226, 3876, 293, 7962, 5563, 4976, 4092, 6155, 9748, 2951, 3423, 8760, 8502, 8936, 324, 5706, 6839, 4926, 1483, 841, 8720, 1224, 7365, 4247, 5374, 6405]) == 0\nassert solution.minSubArrayLen(482493839, [5250, 9537, 8942, 3618, 3384, 9844, 2236, 5876, 7231, 4766, 4624, 7316, 415, 4906, 5119, 8173, 5107, 2052, 4649, 3321, 8430, 2402, 3353, 6214, 5691, 8248, 1286, 6558, 6978, 4124, 5915, 818, 9818, 3095, 8649, 8398, 2832, 7832, 2838, 2433, 1751, 5034, 8416, 3327, 4902, 8742, 8934, 3984, 9517, 9448, 6212, 1334, 6643, 1329, 5404, 2181, 9724, 7567, 6629, 2726, 6211, 1674, 7285, 3337, 5086, 8198, 2656, 6532, 7087, 8703]) == 0\nassert solution.minSubArrayLen(177633123, [1799, 5575, 5415, 8202, 69, 8913, 7812, 7393, 5396, 74, 4326, 6392, 9743, 4646, 226, 2242, 4014, 1293, 2587, 3040, 2905, 2107, 2346, 7418, 7980, 9977, 6161, 4417, 8083, 4305, 4847, 301, 3314, 4498]) == 0\nassert solution.minSubArrayLen(438621436, [1213, 4223]) == 0\nassert solution.minSubArrayLen(505662464, [3376, 5253, 1599, 6685, 507, 2084, 1774, 4658, 7012, 3031, 5160, 2893, 2717, 6386, 3925, 5407, 9532, 4534]) == 0\nassert solution.minSubArrayLen(855976457, [5720, 7771, 9979, 5487, 6698, 7477, 8945, 3533, 5899, 1401, 5417, 5848, 2690, 2579, 7874, 7498, 9603, 9394, 2276, 6992, 8719, 8469, 1643, 9032, 2656, 1646, 2710, 4876, 4822, 3720, 2886, 6140, 8106, 3986, 8122, 2785, 3871, 6218, 4911, 6522, 8738, 9589, 7081]) == 0\nassert solution.minSubArrayLen(736460087, [1458, 996, 3599, 9933, 4896, 810, 8503, 5210, 5166, 9008, 4608, 5925, 725, 9909, 8211, 3652, 9665, 6027, 900, 8700, 426, 2967, 3810, 8341, 3020, 2610, 2385, 8625, 7168, 2176, 4539, 1814, 3885, 428, 5797, 3912, 9545, 7378, 3994, 3444, 8894, 9699, 3521, 3927, 7822, 4284, 7949, 4231, 5011, 8162, 8663, 2111, 7608, 9205, 7357, 5014, 974, 420, 1157, 3101, 8758, 2879, 858, 685, 4565, 9569, 6400, 5759, 7293, 3116, 7412, 8444, 1269, 543, 2294, 4959, 6652, 9121, 3843, 7487, 2697, 1395, 111, 3771, 5079, 328, 1655, 753, 433, 9639, 7318, 6595, 2872, 1968, 2736, 455, 307]) == 0\nassert solution.minSubArrayLen(831107893, [5901, 5448, 2842, 2417, 744, 6024, 2967, 7605, 2564, 7108, 2805, 1886, 1977, 2903, 2542, 7370, 3166, 8404, 7283, 1922, 7142, 2482, 8889, 9181, 2437, 7546, 2445, 762, 903, 9938, 5870, 645, 4338]) == 0\nassert solution.minSubArrayLen(428466458, [6965, 2504, 3429, 2268, 240, 5953, 2178, 958, 7447, 1673, 9407, 1318, 1065, 1135, 546, 4949, 2778, 566, 727, 2610, 6644, 4253, 8503, 5539, 6397, 6854, 1290, 850, 2976, 6374, 3359]) == 0\nassert solution.minSubArrayLen(52309513, [9423, 3619, 4723, 5642, 9810, 8023, 5293, 6211, 2848, 4220, 778, 4970, 1222, 4431, 4462, 4062, 1673, 7792, 9603, 6095, 9803, 1172, 7607, 5219, 5677, 5400, 2572, 8695, 8404, 5156, 9997, 3754, 608, 4565, 900, 3840, 5060, 4297]) == 0\nassert solution.minSubArrayLen(307549715, [2320, 6103, 4895, 7172, 490, 7841, 6039, 9344, 2110, 3172, 5403, 9475, 410, 3216, 3444, 5104, 1185, 7158, 4481, 1546, 6240, 2379, 2451, 9160, 8172, 5774, 1215, 3119, 8567, 9506, 5109, 644, 7749, 717, 7425, 2192, 9812, 9171, 8120, 6270, 6618, 7764, 5870, 3748, 6570]) == 0\nassert solution.minSubArrayLen(978426105, [7056, 2860, 1873, 4631, 9508, 3445, 2386, 8978, 5509, 6925, 4772, 5380, 814, 559, 9178, 6023, 3599, 9561, 4863, 5715, 7411, 631, 8440, 859, 9299, 1304, 7071, 5701, 3807, 8140, 7638, 5595, 4415, 6370, 9645, 4012, 2183, 9805, 8844, 2502, 8895, 3622, 3332, 4429, 1071, 2537, 3777, 6636, 1087, 4352, 8001, 148, 4125, 7524, 2125, 8913]) == 0\nassert solution.minSubArrayLen(81247464, [8151, 4160, 1913, 3377, 9707, 7322, 1105, 9735, 3512, 7391, 9660, 2213, 6789, 4083, 4917, 8944, 4668, 35, 4525, 9713, 1608, 7381, 4686, 5902, 2375, 7396, 8965, 293, 6148, 9160, 3371, 753, 86, 9930, 1932, 5057, 3185, 8997, 4425, 3716, 3583, 2788, 147, 6367, 4696, 2676, 5763, 6084, 4504, 5751, 3904, 9042, 9622, 52, 3941, 3523, 4573, 9088, 1996, 8191, 4953, 1458, 2963, 8635, 4786, 8972, 5850, 8928, 7331, 6476, 7969, 2538, 4350, 8400, 9712, 2014, 8335, 2981, 6644, 3702, 7524, 6496, 4297, 7320, 1581]) == 0\nassert solution.minSubArrayLen(286393978, [6571, 9208, 8953, 3766, 5971, 2683, 6394, 2349, 4907, 9736, 2751, 8575, 9727, 3879]) == 0\nassert solution.minSubArrayLen(87648856, [3929, 9023, 5576, 9079, 654, 6478, 7822, 6538, 4448, 8502, 1429, 3887, 7177, 3302, 6733, 7680, 7556, 9576, 2236, 3847, 7157, 9746, 7091, 428, 9105, 8642, 4749, 5683, 6188, 773, 4817, 5466, 4571, 7778, 8458, 9731, 1064, 4316, 6892, 7670, 2149, 4084, 3019, 8427, 775, 3384, 5158, 2190, 9129, 8918, 4552, 8685, 4870, 5392, 5831, 4845, 2545, 9137, 4078, 5355, 6623, 3027, 6052, 498, 2192, 2557, 8194, 4583, 869, 5649]) == 0\nassert solution.minSubArrayLen(770701741, [8180, 9192, 8362, 2063, 4843, 4085, 2165, 3393, 1449, 7311, 3747, 5350, 3093, 9314, 4414, 4770, 6105, 6277, 1525, 9198, 2166, 7478, 6745, 6880]) == 0\nassert solution.minSubArrayLen(849471016, [2289, 398, 2763, 5568, 2518, 7382, 9824, 8860, 1191, 8076, 9323, 2900, 3259, 2858, 9417, 8808, 4972, 5662, 4448, 2963, 9677, 6519, 3264, 3832, 6771, 5333, 7726, 7740, 1131, 6106, 7643, 6048, 3105, 5004, 3635, 5489, 8734, 6788, 3235, 2694, 71, 241, 2958, 5643, 1851, 7457, 2230]) == 0\nassert solution.minSubArrayLen(17030504, [4493, 4200, 6358, 3456, 292, 2478, 361, 1306, 268, 4396, 2919, 8645, 7332, 6788, 7175, 2596, 7417, 2785, 6940, 3742, 882, 9518, 2026, 9042, 2248, 1358, 462, 4928, 3473, 8904, 3801, 1833, 7193, 2928, 2828, 1253, 5442, 8891, 3703, 540, 8325, 4758, 8103, 9103, 1892, 5965, 7788, 8341, 2315, 662, 9858, 8588, 3577, 1971, 8022, 2601, 1168, 3146, 5836, 8222, 5620, 1386, 5766, 8012, 8498, 9115, 2108, 1035, 8646, 6465, 5446, 1486, 6244, 5177, 3746, 5545, 7468, 7737, 6122, 2030, 510]) == 0\nassert solution.minSubArrayLen(204822552, [6732, 3738, 3416, 352, 7564, 1224, 2429, 7712, 8387, 2578, 9053, 3231, 104, 7207, 391, 2297, 7497, 8901, 6587, 1613, 9265, 2938, 1576, 2203, 8852, 5426, 5578, 5238, 6082, 8654, 2626, 9138, 6925, 586, 1238, 1499, 9529, 81, 1237, 1025, 1676, 8009, 4947, 3424, 3595, 1344, 5798, 5300, 6760, 8175, 1559, 4563, 6342, 6231, 2699, 2457, 5818, 4085, 693, 145, 6660, 8458, 728, 1442, 9080, 5137, 8927, 9475, 1737, 518, 9421, 2363, 5472, 2652, 5222, 1527, 6009, 10, 4920, 3515, 5336, 1083, 3165, 6779, 2460, 9796, 6686, 9854, 7361, 2456]) == 0\nassert solution.minSubArrayLen(168209234, [9647, 8423, 1670, 8216, 6496, 5105, 2276, 1551, 7703, 6307, 214, 1927, 5911, 2050, 6548, 7270, 3348, 2648, 3344]) == 0\nassert solution.minSubArrayLen(533638441, [4879, 720, 4902, 3595, 7274, 9261, 6355, 1878, 7125, 6264, 5803, 3618, 383, 730, 9970, 1885, 5957, 9999, 8787, 2814, 6094, 9672, 1467, 1062, 3946, 2722, 7161, 7236, 4138, 9497, 5339, 5616, 6321, 4192, 9985, 8015, 440, 5303, 2416, 1840, 3028, 9076, 6644, 6991, 7244, 9045, 2505, 7983, 8582, 1112, 842, 4354, 7171, 9369, 9924, 2202, 6332, 5282, 6627, 603, 9818, 1052, 2170, 4417, 6793, 9877, 9649, 4229, 9755, 6625, 1146, 273, 1484, 5548, 1892, 6674, 8139, 7476, 9935, 7718, 99, 4958, 3878, 9022, 1188, 2331, 9947, 1577, 1533]) == 0\nassert solution.minSubArrayLen(76850618, [5834, 3922, 6032, 9330, 2071, 1991, 1925, 1231, 9252, 103, 9514, 5229, 4400, 5734, 1754, 3803, 5920, 3318, 2744, 7579, 330, 7191, 1391, 2572, 4378, 8074, 3703, 6623, 6174]) == 0\nassert solution.minSubArrayLen(563647500, [7144, 2623, 295, 8402, 5787, 1737, 8141, 5438, 8780, 5363, 8017, 383, 5826, 7705, 9184, 3703, 3974, 7626, 9041, 574, 8699, 9548, 2414, 6930, 5137, 3948, 2779, 5755, 3160, 7661, 5642, 7834, 4969, 6000, 1343, 2953]) == 0\nassert solution.minSubArrayLen(996302643, [7471, 6153, 3869, 8042, 6910, 3547, 1473, 3589, 3998, 5482, 199, 9397, 3336, 3534, 7353, 6180, 2830, 5268, 2415, 532, 4162, 2396, 5690, 623, 3909, 8889, 8008, 9239, 538, 241, 7441, 6412, 4128, 6458, 7703, 3006, 2546, 3488, 7816, 7717, 6669, 4568, 6307, 801, 6994, 8013, 7365, 2618, 232, 9803, 6982, 3456, 5405, 6024, 8317]) == 0\nassert solution.minSubArrayLen(785769927, [5821, 6245, 9244, 1452, 4306, 8011, 2118, 4276, 2637, 2788, 3043, 8342, 2169, 9051, 7007, 1871, 2617]) == 0\nassert solution.minSubArrayLen(468869707, [4468, 3262, 7762, 9959, 803, 4183, 10000, 6717, 6675, 1676, 1772, 3041, 890, 7925, 114, 9171, 3285, 7043, 7567, 453, 4750, 1794, 5237, 5543, 6602, 1365, 3975, 220, 7354, 1991, 5899, 301, 4425, 9047, 855, 2064, 9644, 1969, 8129, 5588, 6540, 5791, 3105, 3163, 8702, 7080, 256, 2647, 4733, 2409, 5235, 7416, 7418, 5701, 1123, 8134, 3380, 1158, 1103, 8002, 8141, 9613, 5167, 8510, 4657, 7633, 3250, 4749, 8821, 2120, 5737, 8873, 3039, 1572, 2256, 685, 7004, 3026, 6438, 89, 8790, 1393, 9433, 6833, 1638, 4001, 2726]) == 0\nassert solution.minSubArrayLen(493227235, [1244, 7190, 5981, 7732, 5726, 9832, 8937, 7544, 7417, 6200, 5448, 79, 2271, 6681, 44, 5673, 9576, 8239, 3133, 4635, 3896, 3014, 47, 5522, 690, 2565, 657, 1673, 9823, 5799, 7688, 6723, 9149, 3278, 581, 4135, 9808, 9270, 2400, 4964, 4581, 7620, 4463, 9437, 9105, 8211, 1524, 306, 3179, 4221]) == 0\nassert solution.minSubArrayLen(596086984, [661, 2132, 9, 205, 8833, 3746, 7651, 9821, 4595, 3003, 4546, 2279, 6910, 5470, 5305, 9993, 5450, 1492, 7055, 5378, 4738, 3861, 821, 6323, 6041, 5949, 7602, 3237, 4882, 1704, 2309, 7807, 6694, 9725, 3747, 5671, 1004, 5032, 1493, 6137, 3730, 9996, 9180, 1727, 5920, 265, 7880, 8251, 8874, 8270, 827, 991, 665, 6001, 8454, 2907, 2104, 2658, 7408, 3560, 7406, 7572, 977, 1195, 7828, 4694]) == 0\nassert solution.minSubArrayLen(129073279, [5862, 529, 1135, 5834, 9932, 2972, 394, 4482, 9870, 9970, 1250, 125, 8358, 1287, 9531, 5072, 7130, 7965, 7652, 8221, 3093, 3393, 3935, 5133, 6970, 8267, 2011, 535, 8745, 8451, 5596, 1053, 2169, 3646, 6013, 837, 6398, 7983, 6464, 5460, 9032, 703, 3970, 2121, 6470, 4842, 3197, 6528, 561, 3835, 1272, 1850, 3181, 9508, 8454, 2594, 5564, 9483, 8213, 6414, 5051, 650, 4329, 272, 9961, 8622, 4104, 9243, 4776, 1815, 9665, 9427, 9219, 820, 5821, 5582, 745, 4653, 8726, 1996, 7487, 2820, 5413, 178, 7267, 4794, 3353, 8933, 9059, 7863, 6255, 2130, 1656, 2663, 7988, 3193, 8797, 3529, 1256, 4836]) == 0\nassert solution.minSubArrayLen(572464797, [2639, 1019, 947, 9358, 506, 5673, 9188, 3000, 42, 2592, 8425, 7335, 9437, 4633, 7751, 8379, 2874, 1093, 7147, 4229, 402, 7125, 3149, 1183, 7586, 9879, 5056, 8293, 6940, 9014]) == 0\nassert solution.minSubArrayLen(533505536, [5435, 7752, 6801, 1478, 4037, 5016, 7858, 6456, 7669, 7970, 8585, 248, 7114, 2841, 8031, 9476, 3373, 6729, 2289, 9856, 4101, 1644, 3655, 2922, 3195, 3275, 8694, 7332, 9829, 5336, 5304, 4019, 1968, 5325, 4542, 9588, 3472, 8934, 2207, 1928, 5482, 7941, 3535, 8545, 219, 9866, 3042, 9473, 4250, 229, 8368, 5277, 8344, 4656, 3061, 1139, 9270, 6022, 1830, 6127, 7141, 7492, 910, 4488, 180, 8332, 5873, 2578, 8930, 1912, 4596, 4358, 3283, 9571, 1321, 2234]) == 0\nassert solution.minSubArrayLen(906361053, [9321, 2250, 9686, 4392, 8220, 5869, 1059, 3563, 432, 6472, 9286, 4, 3358, 2583, 6309, 9417, 3258, 888, 9506, 8300, 3142, 7280, 3560, 6817, 2054, 8216, 7395, 6956, 6409, 3527, 8246, 8122, 9842, 6977, 946, 8003, 7806, 7592, 3977, 5063, 7618, 4587, 9704, 3711, 3387, 8815, 7994, 3592, 3173, 5434, 3204, 293, 3929, 8004, 6093, 5087, 1711, 7271, 6443, 306, 5532, 9415, 7188, 1721, 4169, 5637, 5789, 4703, 5157, 9408, 9691, 7255, 4897, 2660, 9609, 28, 2896, 6499, 7281, 5809, 6960, 1323, 2247, 6108, 3509, 8872, 2249, 5821, 8226, 493, 6322]) == 0\nassert solution.minSubArrayLen(132346582, [5345, 4584, 5102, 8111, 1422, 6794, 9489, 1983, 2989, 5189, 8678, 4533, 6034, 2082, 3132, 6994]) == 0\nassert solution.minSubArrayLen(277813129, [3112]) == 0\nassert solution.minSubArrayLen(647894702, [6705, 721, 8436, 9419, 9296, 5102, 410, 5768, 6186, 8185, 1307, 154, 8920, 3978, 7164, 8521, 2638, 4101, 3531, 7328, 2431, 462, 1523, 2162, 4654, 3638, 3228, 6875, 872, 1449, 6560]) == 0\nassert solution.minSubArrayLen(49572603, [1696, 8773, 6601, 1358, 371, 3247, 823, 2283, 3252, 5579, 2253, 2943, 6977, 5430]) == 0\nassert solution.minSubArrayLen(558253465, [3849, 5594]) == 0\nassert solution.minSubArrayLen(145629744, [8992, 7938, 3958, 4918, 7382, 8038, 9708, 3128, 5691, 6553, 4413, 4073, 8382, 1981, 2507, 1233, 6633, 9565, 7163, 5397, 3727, 3653, 2723, 2510, 3345, 5036, 9709, 8836, 7752, 931, 2922, 9580, 1774, 2667, 2865, 4059, 4904, 738, 4940, 6512, 3140, 6899, 7344, 3831, 5169, 2406, 3911, 2669, 3122, 3286, 1578, 3197, 5535, 3279, 1874, 900, 2769, 6408, 9439, 5366, 707, 73, 4254, 4556, 9487, 9314, 8658, 2439, 2774, 5180, 1716, 2712, 9363, 1393, 2430, 1818, 5839, 6916, 2010, 5873, 1313, 6337, 5597, 9174, 6134, 6600, 7167, 8352, 1039, 8569, 2678, 2404, 3790, 3299, 7088]) == 0\nassert solution.minSubArrayLen(511633824, [6155, 1916, 7438, 2460, 1633, 2537, 9438, 78, 4615, 9408, 1931, 2473, 9658, 4087, 8388, 229, 123, 267, 7788, 2085, 7334, 1081, 6312]) == 0\nassert solution.minSubArrayLen(472067168, [2769, 5241, 7342, 7462, 1360, 2663, 9167, 3149, 3769, 3262, 4537, 9662, 5132, 1931, 8024, 713, 4604, 4617, 1299, 1517, 860, 8854, 4085, 8314]) == 0\nassert solution.minSubArrayLen(97255392, [4396, 2821, 2962, 6821, 3472, 5261, 5607, 673, 3742, 7387, 6660, 3291, 5081, 3865, 1669, 9318, 7379, 9657, 3344, 3981, 7008]) == 0\nassert solution.minSubArrayLen(985425948, [5616, 3783, 4602, 5528, 762, 6383, 2889, 8485, 9260, 9291, 6235, 5915, 4788, 6639, 1782, 1707, 7698, 2775, 2092, 6659, 1594, 9100, 4815, 3213, 2255]) == 0\nassert solution.minSubArrayLen(433243956, [8924, 9137, 3894, 8016, 5149, 1063, 1057, 9940, 1153, 9059, 3842, 2875, 2997, 7821, 6387, 5178, 8390, 5012, 4327, 9054, 6949, 5935, 3148, 9740, 5392, 8089, 4554, 504, 5294, 5079, 2684, 3540, 5212, 583, 8240, 4375, 1706, 3996]) == 0\nassert solution.minSubArrayLen(415860266, [8896, 5940, 7632, 5612, 9396, 9264, 2958, 8570, 1990]) == 0\nassert solution.minSubArrayLen(318027869, [7772, 872, 8696, 4703, 9587, 3465, 3776, 6520, 717, 347, 4635, 8869, 9982, 1727, 367, 3146, 1045, 7034, 3604, 3822, 3906, 2513, 4891, 8685, 6256, 891, 3722, 8362, 5238, 7003, 3386, 673, 9896, 5225, 7045, 8781, 6925, 5544, 9994, 3750, 414, 8644, 2503, 7972, 2910, 5995]) == 0\nassert solution.minSubArrayLen(77988179, [6097, 4877, 4098, 8601, 1171, 3211, 4919, 4598, 3622, 6586, 2447, 727, 6001, 9402, 6467, 2040, 4714, 8478, 9381, 439, 8068, 7355, 115, 6202, 7997, 5547, 1548, 6660, 2867, 7389, 4622, 254, 2330, 3787, 1295]) == 0\nassert solution.minSubArrayLen(521801245, [5909, 6703, 7103, 6381, 8785, 7777, 9027, 3292, 319, 7084]) == 0\nassert solution.minSubArrayLen(475070934, [6559, 7288, 4158, 4253, 4059, 8481, 9567, 2979, 5908, 7405, 6427, 2246, 4279, 183, 2085, 1888, 712, 3677, 6984, 1347, 650, 2268, 9909, 4440, 4212, 3230, 535, 647, 2283, 8982, 2429, 5252, 6870, 9655, 5955, 5386, 4895, 21, 7093, 363, 1908, 8751, 6588, 4284, 6929, 892, 1750, 1203, 5540, 5998, 7554, 8651, 9663, 974, 9688, 3143, 2751, 9687, 4539, 7920, 770, 9038, 1502, 9790, 9199, 3565, 2301, 5874, 3411, 6245, 1757, 4250, 7181, 8354, 3501, 7198]) == 0\nassert solution.minSubArrayLen(367380913, [5817, 8409, 9392, 2350, 8087, 9441, 7259, 5917, 5980, 3755, 5411, 7139, 8166, 2691, 2650, 2062, 3397, 8465, 1076, 5608, 7053, 7646, 4715, 5903, 2464, 7456, 7508, 2920, 7214, 6418, 2245, 9913, 6157, 7024, 7001, 8507, 5767, 5648, 4367, 6043, 7327, 4552, 3094, 3120, 7290, 1989, 5307, 3139, 1686, 868, 4661, 2959, 1641, 4058, 9198, 2512, 4825, 3307, 3232, 9160, 1413, 3316, 9090, 8553]) == 0\nassert solution.minSubArrayLen(312848706, [3410, 4538, 8544, 8537, 5190, 191, 3761, 599, 9911, 3750, 2354, 5163, 8664, 8591, 7855, 1222, 6933, 8325]) == 0\nassert solution.minSubArrayLen(860035152, [5187, 4688, 1655, 97, 249, 8146, 4441, 4326, 3324, 8537, 7842, 7349, 4859, 2350, 1890, 8202, 2614, 404, 5296, 9154, 1835, 4545, 3422, 3975, 5161, 7754, 309, 7283, 260, 2008, 666, 8844, 9093, 9185, 454, 8795, 8989, 8786, 5362, 1139, 5573, 9628, 5665, 7776, 2045, 3464, 6807, 4511, 1122, 9754, 7059, 5981, 4991, 896, 5419, 6691, 1614, 9034, 9511, 377, 4218, 9637]) == 0\nassert solution.minSubArrayLen(271429691, [9551, 5684, 9132, 6997, 5217, 3962, 9971, 2379, 2350, 7714, 5771, 3088, 1390, 7108, 9987, 7768, 5366, 5905, 9790, 9247, 714, 9212, 5532, 6918, 4086, 8418, 3211, 8852, 5637, 8487, 4575, 7114, 879, 6910, 5432, 5207, 3923]) == 0\nassert solution.minSubArrayLen(65293284, [5728, 9552, 7340, 4755, 9133, 3424, 6101, 8922, 8042, 7843, 6248, 4494, 3160, 2119, 3494, 1922, 2874, 792, 8960, 8504, 1115, 6509, 4997, 3511, 6857, 5165, 9003, 9105, 6083, 1877, 3830, 7788, 1662, 683, 2786, 4453, 4036, 2843, 2306, 9001, 7363, 765, 4072, 6179, 6144]) == 0\nassert solution.minSubArrayLen(610297369, [2481, 2028, 4957, 5822, 60, 2075, 8913, 9795, 5171, 6746, 8825, 6379, 8267, 7004, 9499, 6758, 2792, 9120, 4182, 25, 933, 7463, 9399, 7286, 2145, 9388, 1846, 7687, 7058, 8003, 8738, 5173, 5023, 6699, 7721]) == 0\nassert solution.minSubArrayLen(113705748, [5907, 8479, 57, 3822, 1724, 3620, 1370, 6228, 8777, 3926, 6117, 9907, 552, 3248, 5264, 3287, 8900, 1465, 144, 3662, 7285, 68, 2666, 5606, 7362, 4206, 8940, 9152, 9051, 2259, 3216, 5611, 2987, 2357, 650, 2055, 8153, 3721, 6474, 7189, 2647, 7109, 8039, 1382, 5700, 6716, 9771, 1058, 9972, 8761, 7685, 254, 6945, 1099]) == 0\nassert solution.minSubArrayLen(340862674, [2363, 2308, 3695, 3684, 6926, 7616, 3047, 7405, 6593, 5051, 9773, 9174, 5514, 6198, 2098, 7022, 1197, 3371, 6095, 835, 2654, 6297, 4655, 9205, 5435, 2192, 4800, 3355, 2930, 6423, 5263, 6456, 5072, 9358, 4025, 8685, 1201, 3345, 3771, 8584, 1147, 1778, 3411, 8543, 1709, 6497, 279, 649, 27, 4067, 9356, 4155, 306, 3181, 7620, 6008, 6090, 7175, 2337, 6835, 6716, 7604, 8491, 8669, 4191, 2145, 6217, 902, 198, 400, 640, 1232, 3290]) == 0\nassert solution.minSubArrayLen(425922360, [7887, 8571, 4045, 6105, 699, 4415, 9658, 7813, 6206, 299, 3887, 4783, 6150, 2207, 4370, 2301, 6770, 4137, 9932, 1697, 9029, 5146, 3223, 2863, 8708, 4316, 7380, 2642, 1706, 4089, 2641, 5989, 8997, 1017]) == 0\nassert solution.minSubArrayLen(736544442, [9054, 2623, 4018, 1634, 3817, 523, 4032, 3752, 6540, 3027, 2296]) == 0\nassert solution.minSubArrayLen(574554383, [5002, 8861, 6307, 3101, 54, 8938, 7868, 498, 2936, 7969, 6336, 9303, 2769, 2096, 5701, 2595, 6877, 2636, 8342, 5358, 7876, 4406, 8063, 6857, 7962, 8497, 4369, 8210, 3994, 3203, 3548, 5086, 6571, 5599, 1788, 7800, 6302, 9381, 6831, 1395, 1023, 4298, 4257, 8225, 9450, 5837, 3985, 6139, 3193]) == 0\nassert solution.minSubArrayLen(52614827, [7829, 5612, 4180, 3035, 1814, 7903, 4403, 3016, 7629, 6734, 1803, 8250, 678, 2618, 7523, 2376, 6174, 6739, 5631, 7156, 6724, 2896, 852, 9258, 7370, 8560, 2001, 5647, 3835, 652, 8463, 1642, 2090, 4669, 2294, 1617, 5730, 8756, 4417, 9737, 4230, 7521]) == 0\nassert solution.minSubArrayLen(634314130, [2537, 7525, 4560, 5751, 4778, 9488, 7268, 6622, 6857, 1827, 509, 976, 8867, 2638, 4453, 8735, 5321, 3963, 9691, 9690, 7170, 5600, 2379, 5522, 5308, 9969, 2205, 3110, 1940, 4265, 8175, 1803, 3344, 1983, 9365, 8018, 8920, 3172, 5512, 7275, 4699, 28, 5509, 3183, 8179, 9703, 8800, 4871, 8981, 5596, 8732, 4627, 1249, 5779, 5738, 2030, 349, 2470, 705, 9197, 3086, 82, 4069, 2077, 4933, 3139, 2535, 952, 9818, 897, 6721, 4246, 9846, 1167, 3438, 497, 5220, 2652, 5144, 4763, 2230, 7220, 2655, 311, 9829, 1758, 2901, 6503]) == 0\nassert solution.minSubArrayLen(585905302, [4014, 3799, 8150, 6837, 2904, 6177, 539, 3835, 6954, 1044, 9479, 4353, 3728, 638, 1976, 9799, 8201, 5485, 9816, 7177, 2087, 8053, 9179, 6512, 9634, 73, 8689, 4310, 5262, 8964, 9873, 497, 747, 6242, 4603, 3888, 6647, 13]) == 0",
  "inefficient_solution": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        n = len(nums)\n        ans = n + 1\n        s = j = 0\n        mem = [[] for _ in range(n)]\n\n        for i, x in enumerate(nums):\n            mem[i] = mem[i-1].copy()\n            mem[i].append(x)\n            s += x\n            while j < n and s >= target:\n                ans = min(ans, i - j + 1)\n                mem[j] = []\n                s -= nums[j]\n                j += 1\n        return ans if ans <= n else 0",
  "is_python": true
}