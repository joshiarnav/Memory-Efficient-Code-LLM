{
  "problem_idx": 2070,
  "task_name": "Most Beautiful Item for Each Query",
  "markdown_description": "\nYou are given a 2D integer array `items` where `items[i] = [pricei, beautyi]` denotes the **price** and **beauty** of an item respectively.\n\n\nYou are also given a **0-indexed** integer array `queries`. For each `queries[j]`, you want to determine the **maximum beauty** of an item whose **price** is **less than or equal** to `queries[j]`. If no such item exists, then the answer to this query is `0`.\n\n\nReturn *an array* `answer` *of the same length as* `queries` *where* `answer[j]` *is the answer to the* `jth` *query*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]\n**Output:** [2,4,5,5,6,6]\n**Explanation:**\n- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]\n**Output:** [4]\n**Explanation:** \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty.  \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** items = [[10,1000]], queries = [5]\n**Output:** [0]\n**Explanation:**\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= items.length, queries.length <= 105`\n* `items[i].length == 2`\n* `1 <= pricei, beautyi, queries[j] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:\n        items.sort()\n        prices = [p for p, _ in items]\n        mx = [items[0][1]]\n        for _, b in items[1:]:\n            mx.append(max(mx[-1], b))\n        ans = [0] * len(queries)\n        for i, q in enumerate(queries):\n            j = bisect_right(prices, q)\n            if j:\n                ans[i] = mx[j - 1]\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumBeauty(self, items, queries):\n        items.sort()\n        prices = [p for p, _ in items]\n        mx = [items[0][1]]\n        for _, b in items[1:]:\n            mx.append(max(mx[-1], b))\n        ans = [0] * len(queries)\n        for i, q in enumerate(queries):\n            j = bisect_right(prices, q)\n            if j:\n                ans[i] = mx[j - 1]\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random items\n    num_items = random.randint(1, 10)\n    items = []\n    for _ in range(num_items):\n        price = random.randint(1, 100)\n        beauty = random.randint(1, 100)\n        items.append([price, beauty])\n\n    # Generate random queries\n    num_queries = random.randint(1, 10)\n    queries = []\n    for _ in range(num_queries):\n        q = random.randint(1, 100)\n        queries.append(q)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumBeauty(items, queries)\n\n    return items, queries, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        items, queries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumBeauty(items, queries) == expected_result\n        print(f\"assert solution.maximumBeauty({items}, {queries}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumBeauty({items}, {queries}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumBeauty([[26, 2], [34, 72], [50, 53], [82, 76], [97, 59]], [29, 53, 91, 69, 22, 68, 6, 40, 71]) == [2, 72, 76, 72, 0, 72, 0, 72, 72]\nassert solution.maximumBeauty([[21, 87], [22, 73], [40, 68], [63, 61], [98, 71]], [33, 43, 7, 80]) == [87, 87, 0, 87]\nassert solution.maximumBeauty([[10, 45], [43, 11], [44, 36], [46, 12], [65, 51], [70, 46], [82, 90], [93, 91]], [45, 64, 14, 7, 16]) == [45, 45, 45, 0, 45]\nassert solution.maximumBeauty([[8, 20], [12, 23], [30, 97], [44, 43], [46, 39], [47, 94], [48, 48], [57, 92], [97, 15]], [49, 39, 13, 25, 99, 85, 10, 53]) == [97, 97, 23, 23, 97, 97, 20, 97]\nassert solution.maximumBeauty([[2, 32], [5, 25], [20, 64], [24, 82], [31, 61], [35, 84], [46, 30], [47, 97], [52, 34], [57, 51]], [51, 80, 6, 26, 85, 71, 30, 94, 23, 7]) == [97, 97, 32, 82, 97, 97, 82, 97, 64, 32]\nassert solution.maximumBeauty([[7, 85], [12, 11], [21, 41], [41, 70], [47, 43], [56, 40], [61, 70], [79, 55], [80, 39], [90, 90]], [21, 19, 35, 56, 73]) == [85, 85, 85, 85, 85]\nassert solution.maximumBeauty([[1, 15], [31, 99], [41, 52], [45, 55], [49, 89], [68, 95], [80, 57]], [84, 17, 68, 8, 8, 31, 71, 46]) == [99, 15, 99, 15, 15, 99, 99, 99]\nassert solution.maximumBeauty([[12, 2], [27, 81], [32, 53], [63, 30], [63, 75], [68, 64], [79, 74], [92, 30]], [93, 35, 65, 94, 6]) == [81, 81, 81, 81, 0]\nassert solution.maximumBeauty([[1, 83], [1, 93], [5, 100], [14, 1], [38, 81], [44, 55], [70, 1], [78, 80], [83, 88]], [83, 43, 34, 16, 12, 31, 62, 77, 62]) == [100, 100, 100, 100, 100, 100, 100, 100, 100]\nassert solution.maximumBeauty([[10, 18], [21, 28], [28, 44], [28, 83], [50, 41], [63, 28], [64, 57], [65, 90], [76, 7], [76, 78]], [50, 11, 25, 73, 85, 8]) == [83, 18, 28, 90, 90, 0]\nassert solution.maximumBeauty([[10, 56], [23, 77], [25, 60], [54, 16], [83, 19], [100, 74]], [98, 61, 61, 8, 44, 2]) == [77, 77, 77, 0, 77, 0]\nassert solution.maximumBeauty([[1, 89], [21, 84], [22, 71], [31, 8], [38, 72], [62, 2], [74, 8], [77, 54], [82, 65], [100, 68]], [49, 50, 31, 91, 37, 27]) == [89, 89, 89, 89, 89, 89]\nassert solution.maximumBeauty([[1, 98], [36, 63], [45, 64], [58, 46], [77, 93], [79, 48], [82, 9]], [75, 48, 11, 86, 12, 3, 37, 69, 98]) == [98, 98, 98, 98, 98, 98, 98, 98, 98]\nassert solution.maximumBeauty([[55, 31], [71, 77]], [47, 60, 49, 14, 66]) == [0, 31, 0, 0, 31]\nassert solution.maximumBeauty([[50, 2]], [69, 17, 7, 62, 81, 18, 100, 66, 39]) == [2, 0, 0, 2, 2, 0, 2, 2, 0]\nassert solution.maximumBeauty([[30, 19], [32, 38], [48, 17], [66, 94], [73, 39], [75, 97], [94, 66], [100, 31]], [80, 42, 74, 10, 55, 32, 31, 26, 100, 45]) == [97, 38, 94, 0, 38, 38, 19, 0, 97, 38]\nassert solution.maximumBeauty([[62, 57], [67, 38], [69, 63], [71, 42], [91, 37]], [2, 59, 89, 8]) == [0, 0, 63, 0]\nassert solution.maximumBeauty([[9, 12], [31, 55], [32, 12], [37, 11], [40, 9], [56, 3], [74, 55], [98, 89]], [80]) == [55]\nassert solution.maximumBeauty([[9, 100], [19, 73], [23, 21], [24, 69], [63, 18], [68, 76]], [8, 41, 83, 92]) == [0, 100, 100, 100]\nassert solution.maximumBeauty([[4, 93], [18, 34], [20, 16], [20, 96], [23, 30], [27, 81], [55, 31], [57, 36], [63, 28], [64, 100]], [18, 57, 19, 43, 5, 60, 34, 61]) == [93, 96, 93, 96, 93, 96, 96, 96]\nassert solution.maximumBeauty([[29, 41], [31, 63], [96, 44]], [97, 89, 97]) == [63, 63, 63]\nassert solution.maximumBeauty([[1, 16], [14, 44], [35, 2], [40, 7], [67, 82], [70, 52]], [5, 35, 29, 2, 36, 33, 94]) == [16, 44, 44, 16, 44, 44, 82]\nassert solution.maximumBeauty([[15, 26], [20, 68], [22, 86], [27, 35], [30, 45], [70, 82], [82, 35]], [55]) == [86]\nassert solution.maximumBeauty([[22, 45], [44, 3], [50, 94], [58, 47], [76, 93], [91, 91], [95, 85]], [75, 95, 55]) == [94, 94, 94]\nassert solution.maximumBeauty([[57, 59]], [33, 3, 70, 4, 63, 30, 95, 53, 13, 91]) == [0, 0, 59, 0, 59, 0, 59, 0, 0, 59]\nassert solution.maximumBeauty([[11, 12], [21, 44], [37, 19], [87, 26]], [34, 41, 55, 68]) == [44, 44, 44, 44]\nassert solution.maximumBeauty([[9, 51]], [48]) == [51]\nassert solution.maximumBeauty([[13, 59], [16, 78], [24, 70], [58, 51], [61, 99], [67, 29], [79, 17], [91, 61]], [16, 72, 60, 1, 14]) == [78, 99, 78, 0, 59]\nassert solution.maximumBeauty([[5, 27], [42, 36], [82, 21], [90, 79], [93, 3]], [7, 61, 87, 15, 17, 22, 83, 30, 33]) == [27, 36, 36, 27, 27, 27, 36, 27, 27]\nassert solution.maximumBeauty([[10, 71], [17, 32], [31, 70], [52, 96], [72, 75], [89, 41], [95, 21]], [73, 42, 54, 39, 5, 7, 59]) == [96, 71, 96, 71, 0, 0, 96]\nassert solution.maximumBeauty([[10, 15], [13, 6], [16, 34], [40, 26], [51, 65], [51, 68], [74, 15], [76, 1]], [80, 37, 45, 54, 8, 98, 83, 23]) == [68, 34, 34, 68, 0, 68, 68, 34]\nassert solution.maximumBeauty([[6, 95], [32, 65], [43, 65], [45, 45], [46, 21], [46, 80], [57, 83], [62, 86], [64, 20], [88, 84]], [83, 48, 49, 61, 3]) == [95, 95, 95, 95, 0]\nassert solution.maximumBeauty([[31, 11], [38, 99], [51, 93], [68, 32], [71, 45], [73, 26], [96, 100], [100, 79]], [8, 76, 51, 9, 41, 10]) == [0, 99, 99, 0, 99, 0]\nassert solution.maximumBeauty([[65, 47], [70, 62], [92, 19]], [94, 35, 48, 23, 10]) == [62, 0, 0, 0, 0]\nassert solution.maximumBeauty([[39, 40], [41, 26], [45, 58], [95, 29], [98, 31]], [85, 99, 44, 59]) == [58, 58, 40, 58]\nassert solution.maximumBeauty([[32, 86], [38, 80], [64, 56], [70, 19], [90, 69], [99, 64]], [5, 27, 17, 61, 21]) == [0, 0, 0, 86, 0]\nassert solution.maximumBeauty([[9, 24], [31, 68], [61, 90], [79, 37], [93, 13]], [35, 53, 74, 36, 70, 81, 49]) == [68, 68, 90, 68, 90, 90, 68]\nassert solution.maximumBeauty([[65, 61]], [84, 9, 49, 52, 53, 46, 24, 52, 32, 5]) == [61, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert solution.maximumBeauty([[23, 76], [46, 41], [70, 64], [77, 11], [79, 24], [80, 18], [81, 79], [87, 85], [97, 16]], [4, 64, 11, 2, 92, 100, 56, 10, 6, 5]) == [0, 76, 0, 0, 85, 85, 76, 0, 0, 0]\nassert solution.maximumBeauty([[41, 50], [48, 98], [55, 65], [85, 3], [88, 95]], [92]) == [98]\nassert solution.maximumBeauty([[10, 62], [46, 18], [66, 92]], [73, 98, 13, 73]) == [92, 92, 62, 92]\nassert solution.maximumBeauty([[16, 71], [21, 8], [31, 80], [43, 11], [70, 85], [71, 98], [76, 73], [86, 100], [90, 77], [91, 75]], [14, 32, 77, 91, 75, 33]) == [0, 80, 98, 100, 98, 80]\nassert solution.maximumBeauty([[1, 84], [11, 37], [50, 91], [60, 62], [62, 89], [72, 45], [91, 67]], [68, 21]) == [91, 84]\nassert solution.maximumBeauty([[29, 72], [46, 47], [49, 8], [52, 79], [68, 90], [71, 59], [88, 30], [99, 82]], [23, 78, 66, 20, 93, 6, 13]) == [0, 90, 79, 0, 90, 0, 0]\nassert solution.maximumBeauty([[48, 86]], [8, 53, 53, 83, 16, 56]) == [0, 86, 86, 86, 0, 86]\nassert solution.maximumBeauty([[56, 10]], [98, 92, 53, 42, 50]) == [10, 10, 0, 0, 0]\nassert solution.maximumBeauty([[8, 43], [15, 81], [21, 76], [30, 15], [31, 14], [40, 36], [54, 81]], [54, 2]) == [81, 0]\nassert solution.maximumBeauty([[23, 57]], [24, 3, 56, 94, 18, 1, 7, 42, 72, 97]) == [57, 0, 57, 57, 0, 0, 0, 57, 57, 57]\nassert solution.maximumBeauty([[19, 27], [97, 81]], [19, 67, 64, 45, 90, 67, 13, 75]) == [27, 27, 27, 27, 27, 27, 0, 27]\nassert solution.maximumBeauty([[16, 13], [37, 88], [64, 36], [69, 60], [83, 21], [93, 36]], [84, 95, 99, 48, 4, 52, 77]) == [88, 88, 88, 88, 0, 88, 88]\nassert solution.maximumBeauty([[11, 96], [26, 79], [49, 4], [53, 98], [55, 41], [59, 89], [65, 43], [74, 76], [87, 67], [97, 26]], [19, 36, 52, 87]) == [96, 96, 96, 98]\nassert solution.maximumBeauty([[12, 29], [15, 28], [26, 25], [52, 20], [54, 59], [57, 81], [79, 99], [89, 90], [97, 49]], [9, 74]) == [0, 81]\nassert solution.maximumBeauty([[3, 86], [62, 81], [64, 38], [71, 92], [94, 30]], [100, 64, 51, 5]) == [92, 86, 86, 86]\nassert solution.maximumBeauty([[11, 16], [21, 33], [37, 38], [62, 62], [64, 53], [82, 49], [86, 74], [88, 88], [92, 97], [94, 100]], [22, 8, 96, 64]) == [33, 0, 100, 62]\nassert solution.maximumBeauty([[4, 10], [7, 50], [11, 59], [30, 11], [50, 10], [87, 54], [90, 22], [92, 73]], [74, 69, 48, 30, 58, 26, 71, 17, 35]) == [59, 59, 59, 59, 59, 59, 59, 59, 59]\nassert solution.maximumBeauty([[10, 9], [82, 47]], [9, 79, 44]) == [0, 9, 9]\nassert solution.maximumBeauty([[1, 74], [8, 87], [10, 41], [26, 73], [48, 60], [64, 67], [97, 95]], [37, 34, 44, 43, 71, 88]) == [87, 87, 87, 87, 87, 87]\nassert solution.maximumBeauty([[1, 61], [6, 78], [30, 25], [51, 13], [52, 49], [55, 2], [57, 48], [76, 57], [83, 57], [85, 73]], [10, 78, 78, 21]) == [78, 78, 78, 78]\nassert solution.maximumBeauty([[16, 9], [55, 97], [56, 51], [74, 76], [76, 88]], [77, 1, 25, 89, 56, 29, 37, 73]) == [97, 0, 9, 97, 97, 9, 9, 97]\nassert solution.maximumBeauty([[37, 10], [40, 45], [61, 39]], [19, 11, 22, 74, 81, 71]) == [0, 0, 0, 45, 45, 45]\nassert solution.maximumBeauty([[2, 52], [69, 72], [88, 48]], [57, 94, 33, 40, 40, 40, 100, 94, 74]) == [52, 72, 52, 52, 52, 52, 72, 72, 72]\nassert solution.maximumBeauty([[1, 28], [14, 67], [28, 1], [33, 67], [38, 16], [62, 31], [73, 88], [74, 29], [84, 63]], [40, 97, 51]) == [67, 88, 67]\nassert solution.maximumBeauty([[17, 59], [45, 37], [66, 55], [69, 50], [89, 89]], [42, 58, 99, 58, 8, 49, 10, 43]) == [59, 59, 89, 59, 0, 59, 0, 59]\nassert solution.maximumBeauty([[4, 52]], [80, 46, 22, 37, 20, 84, 75, 84]) == [52, 52, 52, 52, 52, 52, 52, 52]\nassert solution.maximumBeauty([[12, 10], [30, 76]], [64, 64, 24, 40, 73, 55, 96, 73, 56]) == [76, 76, 10, 76, 76, 76, 76, 76, 76]\nassert solution.maximumBeauty([[43, 65], [76, 27]], [6, 12, 38, 1, 41, 24, 64]) == [0, 0, 0, 0, 0, 0, 65]\nassert solution.maximumBeauty([[6, 44], [13, 88], [75, 58], [97, 21]], [47]) == [88]\nassert solution.maximumBeauty([[3, 49], [4, 18], [29, 5], [41, 98], [48, 81], [65, 100], [70, 60], [75, 22]], [58]) == [98]\nassert solution.maximumBeauty([[1, 9], [16, 95], [17, 71], [19, 75], [32, 80], [50, 32], [65, 92], [68, 65], [84, 66]], [40, 74]) == [95, 95]\nassert solution.maximumBeauty([[13, 28], [20, 43], [66, 100], [76, 49], [87, 20], [93, 63]], [7, 2]) == [0, 0]\nassert solution.maximumBeauty([[1, 14], [40, 86], [49, 9], [56, 86]], [75, 46, 32, 75, 31, 36, 38, 79, 28, 13]) == [86, 86, 14, 86, 14, 14, 14, 86, 14, 14]\nassert solution.maximumBeauty([[76, 46]], [41, 17]) == [0, 0]\nassert solution.maximumBeauty([[34, 86]], [49, 70, 81, 10, 28, 72]) == [86, 86, 86, 0, 0, 86]\nassert solution.maximumBeauty([[36, 10], [65, 100], [91, 28]], [94, 32, 17, 81, 11, 45, 7]) == [100, 0, 0, 100, 0, 10, 0]\nassert solution.maximumBeauty([[14, 64], [67, 51], [78, 7]], [54, 44, 100, 33, 4, 59, 64, 33]) == [64, 64, 64, 64, 0, 64, 64, 64]\nassert solution.maximumBeauty([[15, 51], [16, 31], [29, 92], [38, 17], [39, 12], [57, 24], [75, 79]], [29, 7, 5, 20]) == [92, 0, 0, 51]\nassert solution.maximumBeauty([[13, 26], [60, 63]], [87, 100, 67, 96, 11, 28, 41]) == [63, 63, 63, 63, 0, 26, 26]\nassert solution.maximumBeauty([[33, 10], [43, 91], [45, 86], [56, 46], [78, 16], [78, 58], [96, 15]], [64, 50, 50, 18, 39, 93, 83, 13, 63]) == [91, 91, 91, 0, 10, 91, 91, 0, 91]\nassert solution.maximumBeauty([[2, 82], [68, 3]], [82, 100, 86, 81, 21, 7]) == [82, 82, 82, 82, 82, 82]\nassert solution.maximumBeauty([[4, 6], [12, 94], [35, 9], [60, 6], [60, 64], [61, 88], [72, 14]], [96, 42, 36, 27, 77, 30, 75, 78]) == [94, 94, 94, 94, 94, 94, 94, 94]\nassert solution.maximumBeauty([[53, 46], [85, 87]], [23, 30, 44, 84, 29, 32, 85, 74, 95, 45]) == [0, 0, 0, 46, 0, 0, 87, 46, 87, 0]\nassert solution.maximumBeauty([[66, 71]], [1, 49, 35, 82, 13]) == [0, 0, 0, 71, 0]\nassert solution.maximumBeauty([[19, 50], [22, 71], [34, 34], [49, 32], [60, 7], [65, 27], [81, 20]], [96, 76, 79, 35, 35, 3]) == [71, 71, 71, 71, 71, 0]\nassert solution.maximumBeauty([[31, 86], [37, 81], [52, 59], [58, 33], [58, 61], [73, 1], [79, 82], [92, 73]], [70]) == [86]\nassert solution.maximumBeauty([[1, 79], [16, 1], [21, 51], [30, 54], [34, 85], [43, 46], [49, 29], [66, 64], [67, 87], [68, 21]], [49]) == [85]\nassert solution.maximumBeauty([[3, 43], [3, 48], [12, 3], [22, 5], [22, 87], [30, 48], [38, 1], [46, 41], [100, 4]], [71, 51, 83, 71, 57]) == [87, 87, 87, 87, 87]\nassert solution.maximumBeauty([[26, 88], [39, 53], [72, 39]], [64, 8, 80, 42, 55, 49, 14, 90]) == [88, 0, 88, 88, 88, 88, 0, 88]\nassert solution.maximumBeauty([[34, 83], [92, 19]], [30]) == [0]\nassert solution.maximumBeauty([[5, 72], [50, 17]], [12, 15, 41, 28]) == [72, 72, 72, 72]\nassert solution.maximumBeauty([[7, 92], [28, 79], [34, 18], [61, 38], [64, 83], [73, 16], [73, 99], [75, 80]], [64]) == [92]\nassert solution.maximumBeauty([[5, 11], [8, 60], [19, 69], [24, 8], [25, 58], [80, 52], [80, 53], [98, 79]], [67, 96, 12]) == [69, 69, 60]\nassert solution.maximumBeauty([[4, 87], [10, 54], [18, 14], [20, 16], [23, 61], [49, 31], [51, 21], [53, 9], [86, 72], [86, 76]], [14, 38, 63, 88]) == [87, 87, 87, 87]\nassert solution.maximumBeauty([[8, 17], [31, 95], [56, 8], [72, 100], [92, 79], [95, 27], [96, 99]], [4, 33, 90, 3, 66, 41, 35]) == [0, 95, 100, 0, 95, 95, 95]\nassert solution.maximumBeauty([[8, 80], [11, 61], [13, 45], [20, 44], [54, 91], [71, 22], [78, 84], [82, 7], [93, 15]], [46, 80, 35, 88, 65, 58]) == [80, 91, 80, 91, 91, 91]\nassert solution.maximumBeauty([[6, 18], [12, 44], [16, 95], [26, 12], [41, 8], [52, 43], [53, 98], [62, 90], [67, 31], [79, 67]], [99, 16, 65]) == [98, 95, 98]\nassert solution.maximumBeauty([[4, 19], [4, 99], [16, 40], [30, 61], [42, 61], [44, 92], [72, 73], [85, 78]], [94, 16, 35]) == [99, 99, 99]\nassert solution.maximumBeauty([[22, 80], [23, 35], [40, 48], [42, 50], [74, 41], [92, 59]], [67, 75, 15]) == [80, 80, 0]\nassert solution.maximumBeauty([[9, 34], [11, 86], [16, 57], [23, 78], [77, 99]], [74, 59, 1, 98, 32]) == [86, 86, 0, 99, 86]\nassert solution.maximumBeauty([[2, 45], [6, 50], [20, 20], [31, 86], [36, 70], [53, 8], [93, 70]], [37, 3, 21, 29, 79, 57, 62, 18, 39, 88]) == [86, 45, 50, 50, 86, 86, 86, 50, 86, 86]\nassert solution.maximumBeauty([[12, 96], [30, 68], [45, 78]], [59, 36, 89, 54, 17, 68, 63, 39, 38]) == [96, 96, 96, 96, 96, 96, 96, 96, 96]",
  "inefficient_solution": "class Solution:\n    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:\n        items = [(p, b, i) for i, (p, b) in enumerate(items)]\n        items.sort()\n        ans = [0] * len(queries)\n        for j, q in enumerate(queries):\n            d = {}\n            for p, b, _ in items:\n                if p <= q:\n                    d[p] = b\n            mx = 0\n            for k in sorted(d.keys()):\n                mx = max(mx, d[k])\n            ans[j] = mx\n        return ans",
  "is_python": true
}