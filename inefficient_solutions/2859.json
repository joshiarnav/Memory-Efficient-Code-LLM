{
  "problem_idx": 2859,
  "task_name": "Sum of Values at Indices With K Set Bits",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nReturn *an integer that denotes the **sum** of elements in* `nums` *whose corresponding **indices** have **exactly*** `k` *set bits in their binary representation.*\n\n\nThe **set bits** in an integer are the `1`'s present when it is written in binary.\n\n\n* For example, the binary representation of `21` is `10101`, which has `3` set bits.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,10,1,5,2], k = 1\n**Output:** 13\n**Explanation:** The binary representation of the indices are: \n0 = 0002\n1 = 0012\n2 = 0102\n3 = 0112\n4 = 1002Indices 1, 2, and 4 have k = 1 set bits in their binary representation.\nHence, the answer is nums[1] + nums[2] + nums[4] = 13.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,1], k = 2\n**Output:** 1\n**Explanation:** The binary representation of the indices are:\n0 = 002\n1 = 012\n2 = 102\n3 = 112Only index 3 has k = 2 set bits in its binary representation.\nHence, the answer is nums[3] = 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 105`\n* `0 <= k <= 10`\n\n\n",
  "canonical_solution": "class Solution:\n    def sumIndicesWithKSetBits(self, nums: List[int], k: int) -> int:\n        return sum(x for i, x in enumerate(nums) if i.bit_count() == k)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def sumIndicesWithKSetBits(self, nums: List[int], k: int) -> int:\n        return sum(x for i, x in enumerate(nums) if bin(i).count('1') == k)\n\ndef generate_test_case():\n    solution = Solution()\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    k = random.randint(0, 10)\n    expected_result = solution.sumIndicesWithKSetBits(nums, k)\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sumIndicesWithKSetBits(nums, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.sumIndicesWithKSetBits({nums},{k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sumIndicesWithKSetBits([89, 62, 94, 78, 76, 12, 54, 21],0) == 89\nassert solution.sumIndicesWithKSetBits([91, 50, 76, 92, 33, 21, 100],0) == 91\nassert solution.sumIndicesWithKSetBits([70, 83],3) == 0\nassert solution.sumIndicesWithKSetBits([28, 39, 62, 24, 5, 91, 27, 84, 55],4) == 0\nassert solution.sumIndicesWithKSetBits([56, 33, 73, 68, 12],7) == 0\nassert solution.sumIndicesWithKSetBits([83, 77, 53],6) == 0\nassert solution.sumIndicesWithKSetBits([37, 34, 60, 32],5) == 0\nassert solution.sumIndicesWithKSetBits([9, 89, 90],2) == 0\nassert solution.sumIndicesWithKSetBits([69, 26, 94, 65, 55, 48, 4, 19, 87, 80],1) == 262\nassert solution.sumIndicesWithKSetBits([18, 67, 19, 73, 84, 7],10) == 0\nassert solution.sumIndicesWithKSetBits([91, 36, 79, 54, 41, 87, 31, 84, 12],10) == 0\nassert solution.sumIndicesWithKSetBits([38, 30, 4, 34],10) == 0\nassert solution.sumIndicesWithKSetBits([95, 67, 58, 82, 65, 6, 90, 92, 36, 80],3) == 92\nassert solution.sumIndicesWithKSetBits([41, 12, 88, 29, 64, 81],2) == 110\nassert solution.sumIndicesWithKSetBits([65, 8, 36, 84, 18, 37, 20, 99, 13, 32],9) == 0\nassert solution.sumIndicesWithKSetBits([13, 85, 54],7) == 0\nassert solution.sumIndicesWithKSetBits([98, 33, 51, 1],7) == 0\nassert solution.sumIndicesWithKSetBits([17, 42, 92, 39, 19, 58, 28, 18, 14, 85],4) == 0\nassert solution.sumIndicesWithKSetBits([1, 79, 90, 42, 83, 11],7) == 0\nassert solution.sumIndicesWithKSetBits([50, 45],6) == 0\nassert solution.sumIndicesWithKSetBits([85, 61, 1, 87, 10],4) == 0\nassert solution.sumIndicesWithKSetBits([57, 99, 4, 65],7) == 0\nassert solution.sumIndicesWithKSetBits([68, 54, 26, 38, 81, 31],3) == 0\nassert solution.sumIndicesWithKSetBits([84, 11, 9, 85, 33, 54],5) == 0\nassert solution.sumIndicesWithKSetBits([14, 20, 66],6) == 0\nassert solution.sumIndicesWithKSetBits([82, 29, 88, 85, 14],8) == 0\nassert solution.sumIndicesWithKSetBits([28, 53, 79, 86, 69, 39, 51, 41, 47, 62],0) == 28\nassert solution.sumIndicesWithKSetBits([9, 53],3) == 0\nassert solution.sumIndicesWithKSetBits([1, 16, 96, 19, 21],2) == 19\nassert solution.sumIndicesWithKSetBits([15, 43, 28, 57, 5, 49, 4, 76, 24, 33],0) == 15\nassert solution.sumIndicesWithKSetBits([57, 93, 60],4) == 0\nassert solution.sumIndicesWithKSetBits([63, 41, 77, 59],8) == 0\nassert solution.sumIndicesWithKSetBits([36, 1, 88, 6, 100, 94],4) == 0\nassert solution.sumIndicesWithKSetBits([80, 60, 54, 84, 2, 22, 4, 56, 92, 52],2) == 162\nassert solution.sumIndicesWithKSetBits([30, 31, 61, 44, 52, 85, 51, 84, 53],4) == 0\nassert solution.sumIndicesWithKSetBits([44, 31, 56, 86],1) == 87\nassert solution.sumIndicesWithKSetBits([49, 41, 28],2) == 0\nassert solution.sumIndicesWithKSetBits([80, 36, 94, 35, 88],5) == 0\nassert solution.sumIndicesWithKSetBits([98, 53, 42, 38, 33, 82, 43, 74, 94, 51],1) == 222\nassert solution.sumIndicesWithKSetBits([90, 67, 13, 75],5) == 0\nassert solution.sumIndicesWithKSetBits([57, 25, 7, 82, 53, 56, 36, 29],5) == 0\nassert solution.sumIndicesWithKSetBits([24, 48, 42, 23, 58, 89, 68, 38, 56, 94],5) == 0\nassert solution.sumIndicesWithKSetBits([77, 62, 5, 25, 12, 36, 32, 57, 7, 53],10) == 0\nassert solution.sumIndicesWithKSetBits([5, 67, 76],9) == 0\nassert solution.sumIndicesWithKSetBits([98, 100, 38, 39, 83],0) == 98\nassert solution.sumIndicesWithKSetBits([7, 25, 84, 9, 73],1) == 182\nassert solution.sumIndicesWithKSetBits([84, 45, 57, 14],1) == 102\nassert solution.sumIndicesWithKSetBits([50, 48, 9, 42, 18, 82, 30],9) == 0\nassert solution.sumIndicesWithKSetBits([96, 19, 2, 3, 42, 16, 56, 50],2) == 75\nassert solution.sumIndicesWithKSetBits([44, 34, 61, 87],9) == 0\nassert solution.sumIndicesWithKSetBits([76, 34],1) == 34\nassert solution.sumIndicesWithKSetBits([79, 42, 39, 10, 49, 85],10) == 0\nassert solution.sumIndicesWithKSetBits([58, 95, 69, 94, 54, 77, 20],9) == 0\nassert solution.sumIndicesWithKSetBits([80, 23, 87],2) == 0\nassert solution.sumIndicesWithKSetBits([7, 23],3) == 0\nassert solution.sumIndicesWithKSetBits([27, 18],0) == 27\nassert solution.sumIndicesWithKSetBits([6, 97, 93, 94, 98, 26, 24],3) == 0\nassert solution.sumIndicesWithKSetBits([99, 92, 49, 61, 41, 54, 17, 30, 48, 31],6) == 0\nassert solution.sumIndicesWithKSetBits([99, 80, 65, 58, 18, 10, 100, 4, 83],8) == 0\nassert solution.sumIndicesWithKSetBits([96, 82, 76, 72, 50, 41, 79, 33, 12, 64],7) == 0\nassert solution.sumIndicesWithKSetBits([9, 69],1) == 69\nassert solution.sumIndicesWithKSetBits([73, 92],9) == 0\nassert solution.sumIndicesWithKSetBits([51, 77, 94, 52, 68, 97],8) == 0\nassert solution.sumIndicesWithKSetBits([15, 52, 84],4) == 0\nassert solution.sumIndicesWithKSetBits([51, 90, 69, 75, 21],7) == 0\nassert solution.sumIndicesWithKSetBits([35, 63, 64, 61, 8, 82, 19, 76, 6, 10],5) == 0\nassert solution.sumIndicesWithKSetBits([74, 47],5) == 0\nassert solution.sumIndicesWithKSetBits([77, 89],0) == 77\nassert solution.sumIndicesWithKSetBits([31, 35, 29, 99, 24, 58, 74],5) == 0\nassert solution.sumIndicesWithKSetBits([86, 39, 80, 35],1) == 119\nassert solution.sumIndicesWithKSetBits([42, 74, 82, 58, 36, 51],9) == 0\nassert solution.sumIndicesWithKSetBits([64, 1, 38, 67, 44, 80, 37, 50, 5, 92],10) == 0\nassert solution.sumIndicesWithKSetBits([51, 68, 99, 84, 90],8) == 0\nassert solution.sumIndicesWithKSetBits([32, 42],7) == 0\nassert solution.sumIndicesWithKSetBits([30, 22],1) == 22\nassert solution.sumIndicesWithKSetBits([91, 81, 27, 65, 4],6) == 0\nassert solution.sumIndicesWithKSetBits([76, 100, 1, 54, 93, 80, 56, 34],6) == 0\nassert solution.sumIndicesWithKSetBits([65, 30],7) == 0\nassert solution.sumIndicesWithKSetBits([71, 68, 45, 53, 98, 62, 39, 2, 16],8) == 0\nassert solution.sumIndicesWithKSetBits([38, 44, 48, 73, 14, 52, 61],7) == 0\nassert solution.sumIndicesWithKSetBits([30, 50],2) == 0\nassert solution.sumIndicesWithKSetBits([52, 7, 51],7) == 0\nassert solution.sumIndicesWithKSetBits([26, 38, 46, 45, 41, 20, 82, 84, 56],6) == 0\nassert solution.sumIndicesWithKSetBits([79, 72, 87, 18, 63, 67, 85],0) == 79\nassert solution.sumIndicesWithKSetBits([42, 58, 50, 96, 80, 51],5) == 0\nassert solution.sumIndicesWithKSetBits([56, 99, 65, 72, 10, 39],3) == 0\nassert solution.sumIndicesWithKSetBits([84, 79, 85, 80, 21, 38, 12, 20, 90],4) == 0\nassert solution.sumIndicesWithKSetBits([8, 3, 81, 59, 24, 44],7) == 0\nassert solution.sumIndicesWithKSetBits([97, 63, 78, 14, 72],1) == 213\nassert solution.sumIndicesWithKSetBits([33, 7, 8, 70, 19, 49, 23, 50, 69],10) == 0\nassert solution.sumIndicesWithKSetBits([16, 99, 64, 72, 88, 58, 91, 15],1) == 251\nassert solution.sumIndicesWithKSetBits([43, 89, 98, 99, 51, 69, 78, 6, 16, 21],1) == 254\nassert solution.sumIndicesWithKSetBits([90, 97, 78],7) == 0\nassert solution.sumIndicesWithKSetBits([47, 3, 58, 1, 96, 98, 51, 93, 67],5) == 0\nassert solution.sumIndicesWithKSetBits([70, 10, 39, 37, 97, 20, 71],0) == 70\nassert solution.sumIndicesWithKSetBits([87, 15, 28, 25, 40],8) == 0\nassert solution.sumIndicesWithKSetBits([39, 73, 7],7) == 0\nassert solution.sumIndicesWithKSetBits([71, 13, 86, 98],9) == 0\nassert solution.sumIndicesWithKSetBits([57, 6, 4, 28, 75, 30, 45],4) == 0\nassert solution.sumIndicesWithKSetBits([55, 38, 78, 47, 80, 60, 56, 44, 42],4) == 0",
  "inefficient_solution": "class Solution:\n    def sumIndicesWithKSetBits(self, nums: List[int], k: int) -> int:\n        return sum(nums[i] for i in range(len(nums)) if self.countSetBits(i) == k)\n\n    def countSetBits(self, n: int) -> int:\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count",
  "is_python": true
}