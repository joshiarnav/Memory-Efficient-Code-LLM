{
  "problem_idx": 218,
  "task_name": "The Skyline Problem",
  "markdown_description": "\nA city's **skyline** is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return *the **skyline** formed by these buildings collectively*.\n\n\nThe geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:\n\n\n* `lefti` is the x coordinate of the left edge of the `ith` building.\n* `righti` is the x coordinate of the right edge of the `ith` building.\n* `heighti` is the height of the `ith` building.\n\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`.\n\n\nThe **skyline** should be represented as a list of \"key points\" **sorted by their x-coordinate** in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\n\n\n**Note:** There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0200-0299/0218.The%20Skyline%20Problem/images/merged.jpg)\n\n```\n\n**Input:** buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n**Output:** [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n**Explanation:**\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** buildings = [[0,2,3],[2,5,3]]\n**Output:** [[0,3],[5,0]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= buildings.length <= 104`\n* `0 <= lefti < righti <= 231 - 1`\n* `1 <= heighti <= 231 - 1`\n* `buildings` is sorted by `lefti` in\u00a0non-decreasing order.\n\n\n",
  "canonical_solution": "from queue import PriorityQueue\n\n\nclass Solution:\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\n        skys, lines, pq = [], [], PriorityQueue()\n        for build in buildings:\n            lines.extend([build[0], build[1]])\n        lines.sort()\n        city, n = 0, len(buildings)\n        for line in lines:\n            while city < n and buildings[city][0] <= line:\n                pq.put([-buildings[city][2], buildings[city][0], buildings[city][1]])\n                city += 1\n            while not pq.empty() and pq.queue[0][2] <= line:\n                pq.get()\n            high = 0\n            if not pq.empty():\n                high = -pq.queue[0][0]\n            if len(skys) > 0 and skys[-1][1] == high:\n                continue\n            skys.append([line, high])\n        return skys\n",
  "test_case_generator": "\nfrom queue import PriorityQueue\nimport random\n\n\nclass Solution:\n    def getSkyline(self, buildings):\n        skys, lines, pq = [], [], PriorityQueue()\n        for build in buildings:\n            lines.extend([build[0], build[1]])\n        lines.sort()\n        city, n = 0, len(buildings)\n        for line in lines:\n            while city < n and buildings[city][0] <= line:\n                pq.put([-buildings[city][2], buildings[city][0], buildings[city][1]])\n                city += 1\n            while not pq.empty() and pq.queue[0][2] <= line:\n                pq.get()\n            high = 0\n            if not pq.empty():\n                high = -pq.queue[0][0]\n            if len(skys) > 0 and skys[-1][1] == high:\n                continue\n            skys.append([line, high])\n        return skys\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random buildings\n    buildings = []\n    for _ in range(random.randint(1, 6)):\n        left = random.randint(0, 100)\n        right = random.randint(left, 100)\n        height = random.randint(1, 50)\n        buildings.append([left, right, height])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getSkyline(buildings)\n\n    return buildings, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        buildings, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getSkyline(buildings) == expected_result\n        print(f\"assert solution.getSkyline({buildings}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.getSkyline({buildings}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getSkyline([[100, 100, 48], [26, 43, 20]]) == [[26, 0]]\nassert solution.getSkyline([[58, 85, 7]]) == [[58, 7], [85, 0]]\nassert solution.getSkyline([[43, 66, 11], [26, 34, 7]]) == [[26, 0], [43, 11], [66, 0]]\nassert solution.getSkyline([[41, 66, 6]]) == [[41, 6], [66, 0]]\nassert solution.getSkyline([[42, 81, 7]]) == [[42, 7], [81, 0]]\nassert solution.getSkyline([[91, 95, 12], [75, 85, 38], [7, 80, 47], [87, 95, 28], [13, 74, 30], [76, 85, 11]]) == [[7, 0], [91, 28], [95, 0]]\nassert solution.getSkyline([[69, 86, 29], [58, 59, 38], [10, 66, 25], [59, 96, 49], [82, 94, 4]]) == [[10, 0], [69, 49], [96, 0]]\nassert solution.getSkyline([[7, 12, 20]]) == [[7, 20], [12, 0]]\nassert solution.getSkyline([[36, 36, 3]]) == [[36, 0]]\nassert solution.getSkyline([[11, 85, 19], [82, 94, 8], [95, 98, 3]]) == [[11, 19], [85, 8], [94, 0], [95, 3], [98, 0]]\nassert solution.getSkyline([[37, 79, 14], [77, 91, 4], [47, 72, 14], [82, 83, 26], [51, 58, 5]]) == [[37, 14], [79, 4], [82, 26], [83, 4], [91, 0]]\nassert solution.getSkyline([[76, 90, 13], [94, 100, 25], [83, 87, 36], [90, 92, 34], [61, 90, 9], [40, 50, 21]]) == [[40, 0], [76, 13], [90, 0], [94, 25], [100, 0]]\nassert solution.getSkyline([[98, 99, 41]]) == [[98, 41], [99, 0]]\nassert solution.getSkyline([[5, 54, 46], [2, 56, 19], [45, 88, 9], [4, 53, 10]]) == [[2, 0], [5, 46], [54, 19], [56, 9], [88, 0]]\nassert solution.getSkyline([[34, 77, 14], [57, 87, 1], [43, 76, 39], [81, 94, 18], [77, 90, 9]]) == [[34, 14], [57, 39], [76, 14], [77, 1], [81, 18], [94, 0]]\nassert solution.getSkyline([[95, 99, 7]]) == [[95, 7], [99, 0]]\nassert solution.getSkyline([[98, 99, 15], [65, 87, 29], [35, 48, 27]]) == [[35, 0], [98, 15], [99, 0]]\nassert solution.getSkyline([[44, 81, 35], [76, 82, 46], [42, 55, 35], [40, 99, 42], [18, 93, 29], [7, 60, 22]]) == [[7, 0], [44, 35], [76, 46], [82, 42], [99, 0]]\nassert solution.getSkyline([[75, 79, 31], [90, 92, 22], [77, 77, 18], [6, 33, 28], [39, 72, 30], [45, 88, 10]]) == [[6, 0], [75, 31], [79, 0], [90, 22], [92, 0]]\nassert solution.getSkyline([[82, 98, 10], [72, 85, 13], [92, 97, 20], [62, 85, 38]]) == [[62, 0], [82, 13], [85, 10], [92, 20], [97, 10], [98, 0]]\nassert solution.getSkyline([[42, 50, 2]]) == [[42, 2], [50, 0]]\nassert solution.getSkyline([[67, 80, 10], [68, 70, 13], [24, 75, 3], [61, 87, 12], [39, 56, 7], [79, 98, 8]]) == [[24, 0], [67, 10], [68, 13], [70, 12], [87, 8], [98, 0]]\nassert solution.getSkyline([[50, 85, 37], [86, 94, 10], [63, 63, 30], [76, 83, 39], [54, 100, 13], [4, 44, 23]]) == [[4, 0], [50, 37], [85, 0], [86, 13], [100, 0]]\nassert solution.getSkyline([[3, 80, 40]]) == [[3, 40], [80, 0]]\nassert solution.getSkyline([[29, 53, 24], [55, 78, 19], [86, 87, 30], [5, 85, 37], [71, 78, 4]]) == [[5, 0], [29, 24], [53, 0], [55, 19], [78, 0], [86, 30], [87, 0]]\nassert solution.getSkyline([[13, 20, 35], [10, 98, 31], [75, 76, 31], [60, 64, 32], [59, 89, 19]]) == [[10, 0], [13, 35], [20, 31], [98, 0]]\nassert solution.getSkyline([[81, 91, 13], [66, 72, 50]]) == [[66, 0], [81, 13], [91, 0]]\nassert solution.getSkyline([[26, 85, 40], [23, 98, 16], [2, 66, 43]]) == [[2, 0], [26, 43], [66, 40], [85, 16], [98, 0]]\nassert solution.getSkyline([[18, 81, 16], [14, 37, 21], [8, 92, 42]]) == [[8, 0], [18, 42], [92, 0]]\nassert solution.getSkyline([[3, 53, 14], [97, 100, 31], [71, 74, 37]]) == [[3, 14], [53, 0], [97, 31], [100, 0]]\nassert solution.getSkyline([[59, 84, 13], [40, 51, 40], [16, 29, 17], [74, 88, 25], [72, 81, 17]]) == [[16, 0], [59, 13], [74, 25], [88, 0]]\nassert solution.getSkyline([[21, 74, 42]]) == [[21, 42], [74, 0]]\nassert solution.getSkyline([[6, 35, 33]]) == [[6, 33], [35, 0]]\nassert solution.getSkyline([[88, 89, 26]]) == [[88, 26], [89, 0]]\nassert solution.getSkyline([[43, 70, 46], [8, 40, 28]]) == [[8, 0], [43, 46], [70, 0]]\nassert solution.getSkyline([[27, 53, 50]]) == [[27, 50], [53, 0]]\nassert solution.getSkyline([[79, 94, 17]]) == [[79, 17], [94, 0]]\nassert solution.getSkyline([[3, 24, 10], [87, 92, 40], [43, 58, 40], [57, 83, 50]]) == [[3, 10], [24, 0], [87, 40], [92, 0]]\nassert solution.getSkyline([[25, 35, 3], [100, 100, 20], [87, 96, 30], [17, 77, 5], [16, 97, 9], [87, 99, 47]]) == [[16, 0], [25, 3], [35, 0]]\nassert solution.getSkyline([[20, 22, 30], [7, 9, 20], [14, 18, 38], [31, 44, 14], [0, 57, 39]]) == [[0, 0], [20, 30], [22, 0], [31, 39], [57, 0]]\nassert solution.getSkyline([[39, 77, 19], [95, 95, 21], [0, 83, 16]]) == [[0, 0], [39, 19], [77, 0]]\nassert solution.getSkyline([[7, 58, 19], [47, 95, 32], [19, 45, 43], [66, 80, 36]]) == [[7, 19], [47, 32], [66, 36], [80, 32], [95, 0]]\nassert solution.getSkyline([[88, 95, 35], [22, 55, 9], [38, 78, 10], [40, 55, 33]]) == [[22, 0], [88, 35], [95, 0]]\nassert solution.getSkyline([[37, 91, 35]]) == [[37, 35], [91, 0]]\nassert solution.getSkyline([[0, 72, 6], [50, 96, 46], [3, 8, 10]]) == [[0, 6], [50, 46], [96, 0]]\nassert solution.getSkyline([[100, 100, 30], [27, 100, 10], [100, 100, 24], [63, 73, 34]]) == [[27, 0]]\nassert solution.getSkyline([[31, 53, 23]]) == [[31, 23], [53, 0]]\nassert solution.getSkyline([[1, 44, 31], [61, 78, 9], [35, 59, 41], [39, 79, 29], [82, 100, 38], [55, 100, 37]]) == [[1, 31], [44, 0], [61, 29], [79, 0], [82, 38], [100, 0]]\nassert solution.getSkyline([[22, 53, 30], [30, 82, 18], [66, 96, 39], [81, 93, 50], [74, 82, 11]]) == [[22, 30], [53, 18], [66, 39], [81, 50], [93, 39], [96, 0]]\nassert solution.getSkyline([[51, 82, 17]]) == [[51, 17], [82, 0]]\nassert solution.getSkyline([[7, 26, 15], [26, 36, 4]]) == [[7, 15], [26, 4], [36, 0]]\nassert solution.getSkyline([[27, 29, 10], [97, 98, 48]]) == [[27, 10], [29, 0], [97, 48], [98, 0]]\nassert solution.getSkyline([[36, 72, 43], [16, 30, 38]]) == [[16, 0], [36, 43], [72, 0]]\nassert solution.getSkyline([[34, 74, 13], [59, 99, 13], [63, 88, 28], [28, 63, 49], [38, 78, 46]]) == [[28, 0], [34, 13], [63, 46], [78, 28], [88, 13], [99, 0]]\nassert solution.getSkyline([[29, 90, 43], [89, 98, 40], [93, 94, 13]]) == [[29, 43], [90, 40], [98, 0]]\nassert solution.getSkyline([[89, 91, 25], [72, 83, 32], [53, 98, 41], [58, 99, 20], [46, 87, 12]]) == [[46, 0], [89, 41], [98, 20], [99, 0]]\nassert solution.getSkyline([[4, 100, 39]]) == [[4, 39], [100, 0]]\nassert solution.getSkyline([[34, 89, 15], [25, 69, 12], [19, 71, 22], [92, 96, 22]]) == [[19, 0], [34, 22], [71, 15], [89, 0], [92, 22], [96, 0]]\nassert solution.getSkyline([[36, 46, 33], [66, 71, 24]]) == [[36, 33], [46, 0], [66, 24], [71, 0]]\nassert solution.getSkyline([[100, 100, 12]]) == [[100, 0]]\nassert solution.getSkyline([[64, 94, 18], [72, 77, 44]]) == [[64, 18], [72, 44], [77, 18], [94, 0]]\nassert solution.getSkyline([[7, 20, 3], [2, 39, 22]]) == [[2, 0], [7, 22], [39, 0]]\nassert solution.getSkyline([[25, 71, 46], [2, 95, 26]]) == [[2, 0], [25, 46], [71, 26], [95, 0]]\nassert solution.getSkyline([[77, 79, 11], [18, 31, 33], [16, 63, 38], [83, 93, 30], [89, 95, 11]]) == [[16, 0], [77, 11], [79, 0], [83, 30], [93, 11], [95, 0]]\nassert solution.getSkyline([[74, 90, 50], [37, 89, 29]]) == [[37, 0], [74, 50], [90, 0]]\nassert solution.getSkyline([[98, 99, 9]]) == [[98, 9], [99, 0]]\nassert solution.getSkyline([[80, 85, 4], [42, 46, 26], [61, 67, 32], [75, 96, 13]]) == [[42, 0], [80, 13], [96, 0]]\nassert solution.getSkyline([[92, 94, 14], [23, 64, 18], [27, 80, 17]]) == [[23, 0], [92, 14], [94, 0]]\nassert solution.getSkyline([[6, 99, 38], [76, 89, 17], [66, 78, 22]]) == [[6, 38], [99, 0]]\nassert solution.getSkyline([[85, 85, 1]]) == [[85, 0]]\nassert solution.getSkyline([[76, 85, 39], [47, 75, 14], [87, 91, 29], [20, 94, 14], [63, 78, 13], [63, 80, 32]]) == [[20, 0], [76, 39], [85, 0], [87, 29], [91, 14], [94, 0]]\nassert solution.getSkyline([[10, 21, 40], [52, 100, 7], [48, 73, 39], [76, 81, 7], [80, 95, 12], [85, 99, 36]]) == [[10, 40], [21, 0], [52, 39], [73, 7], [80, 12], [85, 36], [99, 7], [100, 0]]\nassert solution.getSkyline([[61, 75, 8]]) == [[61, 8], [75, 0]]\nassert solution.getSkyline([[79, 84, 42], [34, 93, 36], [25, 74, 22]]) == [[25, 0], [79, 42], [84, 36], [93, 0]]\nassert solution.getSkyline([[37, 59, 36], [67, 99, 26], [15, 35, 47]]) == [[15, 0], [37, 36], [59, 0], [67, 26], [99, 0]]\nassert solution.getSkyline([[58, 77, 38], [0, 35, 2], [90, 92, 8], [27, 65, 41]]) == [[0, 0], [58, 38], [77, 0], [90, 8], [92, 0]]\nassert solution.getSkyline([[62, 74, 7], [69, 88, 23], [37, 71, 46], [53, 83, 6], [13, 56, 10]]) == [[13, 0], [62, 7], [69, 46], [71, 23], [88, 0]]\nassert solution.getSkyline([[69, 81, 31], [99, 99, 2], [32, 60, 26], [77, 78, 28], [35, 88, 13]]) == [[32, 0], [69, 31], [81, 0]]\nassert solution.getSkyline([[35, 43, 22], [39, 65, 43]]) == [[35, 22], [39, 43], [65, 0]]\nassert solution.getSkyline([[94, 97, 26]]) == [[94, 26], [97, 0]]\nassert solution.getSkyline([[72, 88, 11], [77, 88, 2]]) == [[72, 11], [88, 0]]\nassert solution.getSkyline([[63, 83, 1]]) == [[63, 1], [83, 0]]\nassert solution.getSkyline([[26, 32, 37], [19, 95, 5], [11, 17, 46], [31, 41, 31], [30, 58, 22]]) == [[11, 0], [26, 37], [32, 31], [41, 22], [58, 5], [95, 0]]\nassert solution.getSkyline([[79, 86, 19]]) == [[79, 19], [86, 0]]\nassert solution.getSkyline([[17, 73, 35], [53, 63, 41]]) == [[17, 35], [53, 41], [63, 35], [73, 0]]\nassert solution.getSkyline([[98, 100, 26], [95, 96, 6], [75, 77, 48], [86, 99, 15], [85, 95, 50]]) == [[75, 0], [98, 26], [100, 0]]\nassert solution.getSkyline([[93, 95, 46], [53, 72, 42], [16, 57, 25], [30, 48, 32], [20, 41, 2]]) == [[16, 0], [93, 46], [95, 0]]\nassert solution.getSkyline([[92, 99, 45], [51, 95, 34], [16, 46, 28], [11, 84, 47], [5, 15, 19], [10, 35, 17]]) == [[5, 0], [92, 45], [99, 0]]\nassert solution.getSkyline([[98, 98, 37], [63, 65, 26], [76, 100, 20], [1, 17, 36]]) == [[1, 0], [98, 20], [100, 0]]\nassert solution.getSkyline([[20, 93, 1], [17, 25, 7], [32, 49, 15], [49, 80, 46], [79, 83, 7]]) == [[17, 0], [20, 7], [25, 1], [32, 15], [49, 46], [80, 7], [83, 1], [93, 0]]\nassert solution.getSkyline([[44, 67, 27], [82, 83, 13]]) == [[44, 27], [67, 0], [82, 13], [83, 0]]\nassert solution.getSkyline([[82, 99, 13], [0, 41, 14], [49, 55, 4], [33, 41, 18], [17, 21, 9]]) == [[0, 0], [82, 13], [99, 0]]\nassert solution.getSkyline([[5, 63, 12], [41, 88, 47], [24, 59, 26]]) == [[5, 12], [41, 47], [88, 0]]\nassert solution.getSkyline([[15, 50, 50], [22, 46, 49], [39, 72, 36], [31, 93, 26], [14, 45, 24], [51, 79, 46]]) == [[14, 0], [15, 50], [50, 36], [51, 46], [79, 26], [93, 0]]\nassert solution.getSkyline([[32, 45, 13], [82, 100, 14], [27, 42, 33]]) == [[27, 0], [32, 13], [45, 0], [82, 14], [100, 0]]\nassert solution.getSkyline([[70, 73, 23], [4, 28, 21], [51, 91, 41], [69, 82, 10], [8, 87, 16]]) == [[4, 0], [70, 41], [91, 0]]\nassert solution.getSkyline([[85, 88, 17]]) == [[85, 17], [88, 0]]\nassert solution.getSkyline([[21, 86, 27], [10, 65, 42]]) == [[10, 0], [21, 42], [65, 27], [86, 0]]\nassert solution.getSkyline([[62, 85, 33], [40, 47, 24], [9, 40, 13], [19, 84, 3], [1, 83, 41]]) == [[1, 0], [62, 41], [83, 33], [85, 0]]\nassert solution.getSkyline([[40, 44, 30]]) == [[40, 30], [44, 0]]",
  "inefficient_solution": "class Solution:\n    def getSkyline(self, buildings):\n        skys, lines, pq = [], [], []\n        for build in buildings:\n            for _ in range(build[2]):\n                lines.append([build[0], 1])\n                lines.append([build[1], -1])\n        lines.sort()\n        city, n = 0, len(buildings)\n        for line in lines:\n            line_type = line[0]\n            if line_type == 0:\n                line_type = 1\n            else:\n                line_type = -line_type\n            while city < n and buildings[city][0] <= line_type:\n                for _ in range(buildings[city][2]):\n                    pq.append([buildings[city][0], 1])\n                    pq.append([buildings[city][1], -1])\n                city += 1\n            pq.sort()\n            high = 0\n            while pq and pq[0][1] == -1:\n                pq.pop(0)\n            if pq:\n                high = -pq[0][0]\n            if len(skys) > 0 and skys[-1][1] == high:\n                continue\n            skys.append([line_type, high])\n        return skys",
  "is_python": true
}