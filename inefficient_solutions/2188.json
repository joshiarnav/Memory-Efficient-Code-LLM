{
  "problem_idx": 2188,
  "task_name": "Minimum Time to Finish the Race",
  "markdown_description": "\nYou are given a **0-indexed** 2D integer array `tires` where `tires[i] = [fi, ri]` indicates that the `ith` tire can finish its `xth` successive lap in `fi * ri(x-1)` seconds.\n\n\n* For example, if `fi = 3` and `ri = 2`, then the tire would finish its `1st` lap in `3` seconds, its `2nd` lap in `3 * 2 = 6` seconds, its `3rd` lap in `3 * 22 = 12` seconds, etc.\n\n\nYou are also given an integer `changeTime` and an integer `numLaps`.\n\n\nThe race consists of `numLaps` laps and you may start the race with **any** tire. You have an **unlimited** supply of each tire and after every lap, you may **change** to any given tire (including the current tire type) if you wait `changeTime` seconds.\n\n\nReturn *the **minimum** time to finish the race.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4\n**Output:** 21\n**Explanation:** \nLap 1: Start with tire 0 and finish the lap in 2 seconds.\nLap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nLap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.\nTotal time = 2 + 6 + 5 + 2 + 6 = 21 seconds.\nThe minimum time to complete the race is 21 seconds.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5\n**Output:** 25\n**Explanation:** \nLap 1: Start with tire 1 and finish the lap in 2 seconds.\nLap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.\nLap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.\nLap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.\nTotal time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.\nThe minimum time to complete the race is 25 seconds. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= tires.length <= 105`\n* `tires[i].length == 2`\n* `1 <= fi, changeTime <= 105`\n* `2 <= ri <= 105`\n* `1 <= numLaps <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumFinishTime(\n        self, tires: List[List[int]], changeTime: int, numLaps: int\n    ) -> int:\n        cost = [inf] * 18\n        for f, r in tires:\n            i, s, t = 1, 0, f\n            while t <= changeTime + f:\n                s += t\n                cost[i] = min(cost[i], s)\n                t *= r\n                i += 1\n        f = [inf] * (numLaps + 1)\n        f[0] = -changeTime\n        for i in range(1, numLaps + 1):\n            for j in range(1, min(18, i + 1)):\n                f[i] = min(f[i], f[i - j] + cost[j])\n            f[i] += changeTime\n        return f[numLaps]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumFinishTime(self, tires, changeTime, numLaps):\n        cost = [inf] * 18\n        for f, r in tires:\n            i, s, t = 1, 0, f\n            while t <= changeTime + f:\n                s += t\n                cost[i] = min(cost[i], s)\n                t *= r\n                i += 1\n        f = [inf] * (numLaps + 1)\n        f[0] = -changeTime\n        for i in range(1, numLaps + 1):\n            for j in range(1, min(18, i + 1)):\n                f[i] = min(f[i], f[i - j] + cost[j])\n            f[i] += changeTime\n        return f[numLaps]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random tires list\n    num_tires = random.randint(1, 10)\n    tires = []\n    for _ in range(num_tires):\n        f = random.randint(1, 100)\n        r = random.randint(2, 100)\n        tires.append([f, r])\n\n    # Generate random changeTime and numLaps\n    changeTime = random.randint(1, 100)\n    numLaps = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumFinishTime(tires, changeTime, numLaps)\n\n    return tires, changeTime, numLaps, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tires, changeTime, numLaps, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumFinishTime(tires, changeTime, numLaps) == expected_result\n        print(f\"assert solution.minimumFinishTime({tires}, {changeTime}, {numLaps}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumFinishTime({tires}, {changeTime}, {numLaps}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumFinishTime([[72, 71], [58, 69], [87, 43], [61, 25], [60, 57]], 38, 3) == 250\nassert solution.minimumFinishTime([[26, 10], [22, 40], [61, 80], [67, 32], [29, 21], [23, 43], [96, 92]], 100, 9) == 998\nassert solution.minimumFinishTime([[44, 95], [49, 13], [59, 76], [92, 51], [56, 89], [87, 59], [55, 18], [99, 26], [83, 22], [10, 59]], 20, 10) == 280\nassert solution.minimumFinishTime([[80, 22], [23, 63], [29, 37], [35, 5], [48, 35], [61, 42], [12, 38]], 65, 7) == 474\nassert solution.minimumFinishTime([[57, 50], [48, 91], [2, 95], [55, 35], [62, 22], [32, 67], [7, 67], [89, 93], [38, 74], [22, 28]], 13, 8) == 107\nassert solution.minimumFinishTime([[93, 77], [38, 13]], 75, 2) == 151\nassert solution.minimumFinishTime([[92, 35], [7, 86]], 48, 9) == 447\nassert solution.minimumFinishTime([[70, 40], [61, 75], [98, 97], [21, 53], [70, 99], [91, 34], [14, 88], [24, 75], [71, 66]], 36, 5) == 214\nassert solution.minimumFinishTime([[43, 96], [20, 11], [96, 60]], 70, 6) == 470\nassert solution.minimumFinishTime([[9, 43], [76, 60], [40, 38], [32, 47], [89, 18], [93, 26], [88, 31], [39, 76], [51, 19]], 12, 9) == 177\nassert solution.minimumFinishTime([[98, 68], [78, 31], [15, 41]], 77, 7) == 567\nassert solution.minimumFinishTime([[27, 23], [20, 22], [75, 56], [41, 66], [36, 37], [21, 19], [48, 26], [78, 96], [83, 18]], 6, 9) == 228\nassert solution.minimumFinishTime([[11, 86], [2, 94], [18, 82], [41, 53], [34, 34], [90, 26], [15, 14]], 86, 9) == 706\nassert solution.minimumFinishTime([[71, 2], [83, 84], [69, 52], [72, 4], [67, 87]], 40, 2) == 174\nassert solution.minimumFinishTime([[98, 87], [86, 81], [53, 4], [90, 75]], 76, 4) == 440\nassert solution.minimumFinishTime([[41, 10], [4, 12], [15, 87], [50, 94], [4, 83], [79, 24], [92, 93], [82, 48], [89, 20]], 80, 1) == 4\nassert solution.minimumFinishTime([[72, 37]], 38, 3) == 292\nassert solution.minimumFinishTime([[84, 2], [12, 97], [2, 32], [77, 30], [86, 48], [83, 74]], 22, 5) == 98\nassert solution.minimumFinishTime([[32, 74]], 57, 7) == 566\nassert solution.minimumFinishTime([[60, 5], [24, 39], [48, 38], [1, 72], [81, 58], [50, 37], [88, 30], [12, 11], [59, 15], [65, 87]], 32, 2) == 34\nassert solution.minimumFinishTime([[46, 28]], 95, 10) == 1315\nassert solution.minimumFinishTime([[21, 15], [84, 72], [37, 63], [64, 56]], 58, 7) == 495\nassert solution.minimumFinishTime([[32, 99], [72, 30], [96, 35]], 90, 1) == 32\nassert solution.minimumFinishTime([[78, 59], [66, 83], [81, 38]], 8, 5) == 362\nassert solution.minimumFinishTime([[76, 91], [97, 43]], 52, 9) == 1100\nassert solution.minimumFinishTime([[20, 100]], 73, 10) == 857\nassert solution.minimumFinishTime([[66, 69], [6, 10], [89, 59], [73, 75], [9, 6]], 71, 3) == 140\nassert solution.minimumFinishTime([[40, 52]], 75, 7) == 730\nassert solution.minimumFinishTime([[33, 31], [83, 30], [85, 36], [85, 41], [46, 41], [38, 67]], 24, 5) == 261\nassert solution.minimumFinishTime([[31, 57], [89, 17], [32, 52]], 97, 5) == 543\nassert solution.minimumFinishTime([[7, 35], [53, 58], [42, 58], [3, 99], [18, 84], [4, 31], [22, 60], [4, 20]], 73, 8) == 535\nassert solution.minimumFinishTime([[28, 53], [62, 28], [52, 47]], 62, 8) == 658\nassert solution.minimumFinishTime([[35, 3], [68, 69]], 75, 10) == 1000\nassert solution.minimumFinishTime([[61, 29]], 14, 6) == 436\nassert solution.minimumFinishTime([[15, 47], [86, 22], [34, 24], [89, 6], [25, 66]], 50, 7) == 405\nassert solution.minimumFinishTime([[95, 19]], 98, 7) == 1253\nassert solution.minimumFinishTime([[5, 99], [63, 91], [89, 7], [4, 23], [61, 19], [5, 51], [49, 99], [47, 48], [36, 9], [25, 100]], 25, 6) == 149\nassert solution.minimumFinishTime([[11, 51], [67, 13]], 10, 3) == 53\nassert solution.minimumFinishTime([[57, 52], [95, 8], [28, 39], [6, 90], [93, 2], [36, 33], [79, 25], [73, 40], [71, 94], [3, 60]], 69, 1) == 3\nassert solution.minimumFinishTime([[26, 2], [53, 31], [35, 7], [48, 14], [1, 56]], 69, 1) == 1\nassert solution.minimumFinishTime([[53, 75], [70, 67], [47, 24], [54, 55], [83, 74], [68, 26], [10, 64], [43, 8], [75, 13], [40, 92]], 90, 9) == 810\nassert solution.minimumFinishTime([[30, 61]], 20, 5) == 230\nassert solution.minimumFinishTime([[68, 15], [31, 30], [36, 70], [95, 54], [70, 87], [85, 43]], 61, 1) == 31\nassert solution.minimumFinishTime([[92, 97], [72, 84], [29, 15]], 68, 1) == 29\nassert solution.minimumFinishTime([[48, 22], [22, 5], [86, 5]], 51, 10) == 679\nassert solution.minimumFinishTime([[18, 20], [47, 28], [59, 15], [3, 2], [11, 94], [100, 5], [38, 71], [29, 6]], 43, 1) == 3\nassert solution.minimumFinishTime([[45, 27], [51, 40], [88, 33], [100, 27], [90, 88], [14, 41]], 9, 5) == 106\nassert solution.minimumFinishTime([[99, 53], [92, 26], [69, 52], [84, 93], [77, 38], [34, 31], [21, 29], [75, 92]], 30, 6) == 276\nassert solution.minimumFinishTime([[49, 76], [22, 87], [49, 28], [46, 89], [97, 90], [21, 50]], 91, 9) == 917\nassert solution.minimumFinishTime([[24, 43], [30, 65], [66, 48], [55, 21], [30, 77], [59, 71], [82, 60], [17, 12], [59, 92], [36, 52]], 55, 7) == 449\nassert solution.minimumFinishTime([[14, 23], [62, 52], [82, 40], [42, 45], [44, 94], [50, 31], [12, 51], [94, 47], [41, 3], [21, 70]], 88, 7) == 612\nassert solution.minimumFinishTime([[78, 94], [78, 8], [50, 28], [56, 76], [25, 67], [43, 41], [90, 66], [24, 81]], 75, 9) == 816\nassert solution.minimumFinishTime([[2, 54], [61, 68], [2, 33], [94, 90], [10, 37], [27, 80]], 57, 9) == 474\nassert solution.minimumFinishTime([[11, 57], [35, 25], [83, 32]], 31, 6) == 221\nassert solution.minimumFinishTime([[88, 49]], 1, 5) == 444\nassert solution.minimumFinishTime([[4, 65], [10, 59], [81, 20], [4, 41]], 45, 3) == 102\nassert solution.minimumFinishTime([[25, 55], [79, 95], [56, 82], [88, 45], [63, 20], [33, 95], [64, 85], [99, 60], [26, 59]], 24, 6) == 270\nassert solution.minimumFinishTime([[55, 82], [92, 55]], 16, 9) == 623\nassert solution.minimumFinishTime([[76, 49], [40, 77], [47, 30], [29, 93], [59, 45]], 88, 2) == 146\nassert solution.minimumFinishTime([[55, 51]], 77, 4) == 451\nassert solution.minimumFinishTime([[1, 26], [15, 6]], 15, 3) == 33\nassert solution.minimumFinishTime([[64, 51], [52, 89], [63, 70]], 56, 3) == 268\nassert solution.minimumFinishTime([[92, 94]], 56, 2) == 240\nassert solution.minimumFinishTime([[16, 9], [100, 39], [11, 23], [4, 25]], 49, 1) == 4\nassert solution.minimumFinishTime([[53, 71], [69, 6], [100, 4], [30, 76], [64, 70], [50, 49], [41, 53]], 6, 4) == 138\nassert solution.minimumFinishTime([[35, 80], [34, 78], [90, 16], [44, 77]], 16, 7) == 334\nassert solution.minimumFinishTime([[49, 74]], 70, 9) == 1001\nassert solution.minimumFinishTime([[49, 72], [70, 39], [17, 14], [50, 8], [55, 29]], 79, 4) == 305\nassert solution.minimumFinishTime([[14, 25], [25, 35], [81, 61], [84, 48], [65, 19], [46, 28], [91, 5]], 19, 2) == 47\nassert solution.minimumFinishTime([[41, 10], [76, 10], [27, 82], [10, 3], [38, 10], [64, 72], [32, 68]], 88, 5) == 258\nassert solution.minimumFinishTime([[36, 81], [79, 92], [76, 38], [74, 14], [90, 98]], 97, 6) == 701\nassert solution.minimumFinishTime([[89, 8], [83, 39], [94, 29]], 65, 6) == 823\nassert solution.minimumFinishTime([[79, 23], [77, 58], [86, 54]], 87, 8) == 1225\nassert solution.minimumFinishTime([[84, 51], [84, 96]], 18, 1) == 84\nassert solution.minimumFinishTime([[37, 95], [45, 62], [32, 42], [8, 35], [58, 34], [24, 93], [73, 2]], 63, 4) == 221\nassert solution.minimumFinishTime([[93, 89], [33, 99]], 8, 10) == 402\nassert solution.minimumFinishTime([[97, 97], [65, 17], [84, 78], [25, 33], [42, 32]], 62, 1) == 25\nassert solution.minimumFinishTime([[65, 81]], 1, 5) == 329\nassert solution.minimumFinishTime([[64, 40], [37, 93]], 13, 6) == 287\nassert solution.minimumFinishTime([[4, 26], [20, 63], [21, 80], [96, 58], [3, 73]], 60, 8) == 444\nassert solution.minimumFinishTime([[35, 23], [97, 58], [80, 28], [85, 42], [39, 96], [64, 50], [39, 55], [95, 82], [16, 20], [70, 48]], 44, 7) == 376\nassert solution.minimumFinishTime([[79, 2], [56, 7], [25, 11], [54, 99], [20, 42], [67, 87]], 87, 5) == 448\nassert solution.minimumFinishTime([[94, 95], [69, 28], [8, 19], [39, 55], [26, 80], [16, 90], [24, 45], [94, 11], [95, 20]], 34, 1) == 8\nassert solution.minimumFinishTime([[5, 78], [36, 49], [74, 56], [90, 78], [32, 12], [27, 55], [42, 13], [51, 28], [95, 28]], 36, 3) == 87\nassert solution.minimumFinishTime([[99, 33], [45, 3], [10, 91]], 63, 8) == 521\nassert solution.minimumFinishTime([[67, 57], [59, 96], [89, 4], [28, 44], [4, 3], [74, 19], [61, 46]], 56, 6) == 160\nassert solution.minimumFinishTime([[41, 76], [26, 23]], 32, 3) == 142\nassert solution.minimumFinishTime([[34, 43], [63, 69]], 8, 5) == 202\nassert solution.minimumFinishTime([[28, 99], [82, 84], [95, 44], [56, 66], [19, 57]], 22, 1) == 19\nassert solution.minimumFinishTime([[71, 92], [97, 72], [19, 47], [26, 95], [85, 90], [10, 25], [40, 24], [45, 73], [33, 85], [71, 54]], 89, 2) == 109\nassert solution.minimumFinishTime([[5, 55], [100, 10], [61, 97], [32, 64], [45, 12], [74, 31], [9, 49], [16, 22], [87, 28]], 91, 3) == 197\nassert solution.minimumFinishTime([[41, 61], [100, 28], [99, 30], [70, 64], [6, 12], [89, 2], [28, 66], [90, 98], [74, 9]], 76, 5) == 314\nassert solution.minimumFinishTime([[35, 25], [61, 32], [23, 21]], 28, 4) == 176\nassert solution.minimumFinishTime([[6, 81]], 82, 2) == 94\nassert solution.minimumFinishTime([[57, 74], [12, 40], [53, 47], [89, 88], [16, 97], [89, 45]], 99, 5) == 456\nassert solution.minimumFinishTime([[95, 74], [18, 93], [69, 22], [2, 86], [82, 11], [40, 26], [62, 18], [96, 78], [24, 62]], 48, 4) == 152\nassert solution.minimumFinishTime([[1, 95], [70, 24], [12, 78]], 20, 3) == 43\nassert solution.minimumFinishTime([[17, 62], [28, 60], [57, 8], [55, 29], [64, 58], [27, 95], [25, 65], [37, 64]], 39, 7) == 353\nassert solution.minimumFinishTime([[37, 26], [97, 13], [75, 28], [97, 16]], 33, 10) == 667\nassert solution.minimumFinishTime([[7, 85], [28, 78], [12, 17], [96, 37], [13, 93], [58, 45]], 55, 8) == 441",
  "inefficient_solution": "class Solution:\n    def minimumFinishTime(self, tires, changeTime, numLaps):\n        min_time = float('inf')\n        for f, r in tires:\n            lap_times = []\n            time = 0\n            i = 0\n            while 1:\n                time += f\n                i += 1\n                lap_times.append(time)\n                if time > changeTime + f:\n                    break\n                time *= r\n            for i in range(1, numLaps + 1):\n                cost = 0\n                for j, t in enumerate(lap_times):\n                    if i % (j + 1) == 0:\n                        cost += t\n                cost += (i // (j + 1)) * changeTime\n                min_time = min(min_time, cost)\n        return min_time",
  "is_python": true
}