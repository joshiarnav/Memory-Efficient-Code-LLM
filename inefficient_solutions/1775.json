{
  "problem_idx": 1775,
  "task_name": "Equal Sum Arrays With Minimum Number of Operations",
  "markdown_description": "\nYou are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive.\n\n\nIn one operation, you can change any integer's value in **any** of the arrays to **any** value between `1` and `6`, inclusive.\n\n\nReturn *the minimum number of operations required to make the sum of values in* `nums1` *equal to the sum of values in* `nums2`*.* Return `-1`\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]\n**Output:** 3\n**Explanation:** You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [**6**,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,**1**], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,**2**,4,5,1], nums2 = [6,1,2,2,2,2].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,1,1,1,1,1,1], nums2 = [6]\n**Output:** -1\n**Explanation:** There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [6,6], nums2 = [1]\n**Output:** 3\n**Explanation:** You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n- Change nums1[0] to 2. nums1 = [**2**,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,**2**], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [**4**].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 105`\n* `1 <= nums1[i], nums2[i] <= 6`\n\n\n",
  "canonical_solution": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        s1, s2 = sum(nums1), sum(nums2)\n        if s1 == s2:\n            return 0\n        if s1 > s2:\n            return self.minOperations(nums2, nums1)\n        arr = [6 - v for v in nums1] + [v - 1 for v in nums2]\n        d = s2 - s1\n        for i, v in enumerate(sorted(arr, reverse=True), 1):\n            d -= v\n            if d <= 0:\n                return i\n        return -1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minOperations(self, nums1, nums2):\n        s1, s2 = sum(nums1), sum(nums2)\n        if s1 == s2:\n            return 0\n        if s1 > s2:\n            return self.minOperations(nums2, nums1)\n        arr = [6 - v for v in nums1] + [v - 1 for v in nums2]\n        d = s2 - s1\n        for i, v in enumerate(sorted(arr, reverse=True), 1):\n            d -= v\n            if d <= 0:\n                return i\n        return -1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums1 = random.choices(range(1, 7), k=random.randint(1, 10))\n    nums2 = random.choices(range(1, 7), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minOperations(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minOperations(nums1, nums2) == expected_result\n        print(f\"assert solution.minOperations({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minOperations({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minOperations([4, 2, 6, 6], [3, 4, 5, 1, 5, 2, 2, 3, 1, 2]) == 3\nassert solution.minOperations([6, 4, 1, 4, 4, 1, 5, 2, 4], [2, 3, 6]) == 6\nassert solution.minOperations([6, 6], [2, 5, 3, 6]) == 1\nassert solution.minOperations([2, 3, 1], [2, 3, 4, 1, 1, 1, 4, 3, 2, 5]) == 6\nassert solution.minOperations([5], [4, 1, 6, 4, 5, 2, 5, 3, 3]) == -1\nassert solution.minOperations([4, 1, 4, 3, 3, 6, 6], [1, 6, 2]) == 4\nassert solution.minOperations([6], [6, 6, 2, 2]) == 2\nassert solution.minOperations([4, 5, 1, 1, 6, 4, 3, 1, 2, 3], [4]) == -1\nassert solution.minOperations([5, 1, 1, 6, 3, 4, 6, 1, 2], [5, 3, 2, 4]) == 4\nassert solution.minOperations([3, 6, 1, 3, 2, 2, 4, 3, 1, 3], [4, 1]) == 8\nassert solution.minOperations([3, 5, 2], [5, 1, 6, 3, 1, 4]) == 3\nassert solution.minOperations([3], [2, 2, 2, 6, 2, 1, 4, 3, 1, 1]) == -1\nassert solution.minOperations([4, 3, 1, 4, 4, 6], [2, 4, 6, 2, 4, 6]) == 1\nassert solution.minOperations([1, 6, 5, 1, 2, 2, 3, 1, 4], [4, 4, 2, 5, 5, 6, 2, 4, 6, 5]) == 4\nassert solution.minOperations([4, 3], [3, 1, 3, 3, 3]) == 3\nassert solution.minOperations([2, 2, 2, 3], [5, 3, 1, 4]) == 1\nassert solution.minOperations([6, 2, 5, 3, 5, 5, 6, 2, 2, 3], [1, 6, 2, 6]) == 6\nassert solution.minOperations([5, 4, 1, 1, 2], [5, 4]) == 1\nassert solution.minOperations([3, 1], [6, 2, 4, 6, 2, 5, 4, 6, 3]) == 9\nassert solution.minOperations([3], [3, 3]) == 1\nassert solution.minOperations([2, 5], [6, 6, 2]) == 2\nassert solution.minOperations([4, 3], [2, 3, 5, 2, 3]) == 3\nassert solution.minOperations([2, 1, 2, 3, 4, 1, 2, 5, 4, 5], [2, 3, 4, 1, 4, 2, 1, 3]) == 2\nassert solution.minOperations([5, 3, 2, 5, 6, 3, 1, 2, 5, 5], [3, 1, 6, 2]) == 6\nassert solution.minOperations([5, 3, 3, 4, 2], [3]) == 5\nassert solution.minOperations([4, 5, 4, 1, 2, 5], [4, 4, 1, 5, 4, 5]) == 1\nassert solution.minOperations([2], [2, 2]) == 1\nassert solution.minOperations([3, 5, 6, 2, 2, 3], [4, 2, 6, 6]) == 1\nassert solution.minOperations([3, 1], [4, 3, 1, 6, 2]) == 3\nassert solution.minOperations([1, 4, 4, 3, 2, 1, 6, 2], [3, 2]) == 5\nassert solution.minOperations([3, 2, 2, 1, 3, 4], [5, 2, 3, 1, 4, 4]) == 1\nassert solution.minOperations([3, 2, 6, 6, 4, 2, 5, 1, 5], [5, 1, 3, 4]) == 5\nassert solution.minOperations([2, 4, 1, 1, 3], [2, 1, 3]) == 1\nassert solution.minOperations([3, 4, 6], [1, 4, 1, 6, 6, 4]) == 2\nassert solution.minOperations([1, 1, 2, 3, 5, 2, 3, 4, 6, 4], [1, 2, 4]) == 6\nassert solution.minOperations([5], [2, 6, 5, 5, 4, 2, 4, 3]) == -1\nassert solution.minOperations([2, 3], [3]) == 1\nassert solution.minOperations([2, 3, 3, 3, 5], [1, 6, 3, 1, 1, 6, 6, 6, 4, 5]) == 5\nassert solution.minOperations([2], [1, 5, 6, 6, 3, 2, 6]) == -1\nassert solution.minOperations([4, 2, 6, 2, 1], [1]) == 4\nassert solution.minOperations([2, 4, 3, 6], [5, 4, 4, 6, 2]) == 2\nassert solution.minOperations([3, 1, 5, 2, 1, 4, 5, 1], [6, 5, 1]) == 3\nassert solution.minOperations([2, 1, 2, 2, 1, 5], [3]) == 5\nassert solution.minOperations([1, 6, 2, 4, 3, 5, 3, 6, 2], [4, 3]) == 8\nassert solution.minOperations([5, 3, 2, 5, 6, 6], [4]) == 7\nassert solution.minOperations([4, 5, 3, 6, 6, 3], [4, 4, 2]) == 4\nassert solution.minOperations([2, 2, 2, 1, 2, 6, 1], [5, 4, 2, 2]) == 1\nassert solution.minOperations([1, 1], [4, 1, 4, 3, 1, 3, 3, 6, 4]) == 8\nassert solution.minOperations([4, 6, 3, 2, 6, 1], [5, 6, 5, 5, 2, 2, 3, 5, 6, 4]) == 5\nassert solution.minOperations([2, 1, 3, 2, 3], [5, 5, 6, 5, 3, 6]) == 4\nassert solution.minOperations([5, 2, 3, 5, 3], [4, 6, 1, 3, 2, 4, 4]) == 2\nassert solution.minOperations([2, 3, 1, 5, 4, 5, 6], [1, 1, 4, 1, 4, 5, 4]) == 2\nassert solution.minOperations([5, 3, 3, 3, 1, 6, 5, 4, 2], [5, 2]) == 8\nassert solution.minOperations([4], [2, 1, 6, 2, 6, 1]) == 5\nassert solution.minOperations([3, 2, 3, 5, 4, 4, 6], [5, 5, 2, 3, 1, 6, 1, 6]) == 1\nassert solution.minOperations([6, 2], [6, 6]) == 1\nassert solution.minOperations([4, 6, 3], [4, 2, 4, 3, 5, 5, 6, 5]) == 6\nassert solution.minOperations([2, 4, 1, 1], [5, 1, 1, 3, 3, 6, 2, 1]) == 3\nassert solution.minOperations([5, 4, 5, 5, 3, 2, 5, 5, 2], [4, 6, 3, 5, 3, 3, 6, 2, 4]) == 0\nassert solution.minOperations([1, 2, 3, 4, 6, 1, 2, 5, 1], [2, 6, 6, 5, 4, 1, 3, 4, 2, 2]) == 2\nassert solution.minOperations([3, 2, 1, 6, 4], [6, 4, 4, 4, 1, 1]) == 1\nassert solution.minOperations([3, 3, 1, 3, 4, 4], [6, 5, 2, 6, 3]) == 1\nassert solution.minOperations([1, 4, 2, 1, 4], [4]) == 3\nassert solution.minOperations([4, 4, 4, 1, 4, 1, 6], [1, 2, 2]) == 5\nassert solution.minOperations([6, 3, 6, 6, 3, 2, 6, 4, 4, 6], [1, 5, 3, 3, 5, 4, 2, 3, 5, 2]) == 3\nassert solution.minOperations([3, 5, 1], [5, 6, 2, 4, 5, 3, 3, 6]) == 6\nassert solution.minOperations([4, 6, 4, 3, 1, 5, 6], [3, 6]) == 5\nassert solution.minOperations([6, 4, 3, 4, 3, 1, 4], [3]) == -1\nassert solution.minOperations([3, 3, 5, 2, 5, 4, 3, 2, 6, 6], [3, 2, 4, 5, 3]) == 5\nassert solution.minOperations([2, 2, 2, 5, 2, 3, 1, 2, 4, 4], [2, 5, 5, 6, 5, 3, 5, 6]) == 2\nassert solution.minOperations([4, 3], [3, 6, 2, 4, 1]) == 3\nassert solution.minOperations([5, 3], [5, 1, 1]) == 1\nassert solution.minOperations([6, 1, 2, 4, 5], [3, 1, 2, 4]) == 2\nassert solution.minOperations([2, 4, 4, 6, 1], [2, 2, 4, 1, 3, 1, 3]) == 1\nassert solution.minOperations([6, 2, 5, 2, 4, 1], [1, 2]) == 4\nassert solution.minOperations([3, 1, 3, 3, 5, 4], [2, 2]) == 4\nassert solution.minOperations([1, 6, 3, 6, 6, 3, 1, 2, 1, 6], [5, 5, 1, 2]) == 5\nassert solution.minOperations([5, 2], [4]) == 1\nassert solution.minOperations([5], [3, 2, 4, 5, 4, 4]) == 7\nassert solution.minOperations([5, 4, 5, 4, 5, 3, 1, 1], [1, 5, 5, 4]) == 3\nassert solution.minOperations([4, 1, 6, 1, 3, 3], [4, 2, 2, 3, 3, 6, 6, 1]) == 2\nassert solution.minOperations([3, 1], [1, 3, 5, 3, 4, 5]) == 5\nassert solution.minOperations([5, 2, 6], [1]) == 3\nassert solution.minOperations([2, 6, 1, 3, 1, 5, 1, 3, 4, 4], [5, 2, 2, 4, 3, 6, 2, 2, 6]) == 1\nassert solution.minOperations([3, 5, 5, 5, 1, 6], [3, 5, 4, 4, 2]) == 2\nassert solution.minOperations([2, 2, 4, 5, 6, 3, 3, 6], [2, 2, 5, 6, 5, 1, 2]) == 2\nassert solution.minOperations([6, 2, 3, 5, 6, 4, 6, 4, 6], [2, 2, 2, 6, 1, 4, 4, 1, 6]) == 3\nassert solution.minOperations([4, 2], [2, 3]) == 1\nassert solution.minOperations([4, 1, 5], [1, 4, 3, 1]) == 1\nassert solution.minOperations([6, 3, 6, 2, 1, 5, 5, 5, 5], [3, 3, 1, 6]) == 6\nassert solution.minOperations([6, 3, 1], [4, 5, 1]) == 0\nassert solution.minOperations([1, 2, 3, 1], [3, 3, 6, 5, 3]) == 3\nassert solution.minOperations([5, 6, 2, 3, 4], [3, 1, 5, 6, 2, 2, 2]) == 1\nassert solution.minOperations([3, 4, 5, 4, 5, 4], [4, 1, 6, 4, 2]) == 2\nassert solution.minOperations([1], [3, 3, 3]) == 3\nassert solution.minOperations([6, 3, 1, 6], [1, 3, 1]) == 3\nassert solution.minOperations([1, 4, 2, 6, 6, 5, 5], [1, 6, 3]) == 4\nassert solution.minOperations([4, 5], [5, 1, 2, 2, 3, 6, 5]) == 4\nassert solution.minOperations([3, 6, 2, 3, 1, 4], [4, 3, 4, 6, 1, 1, 5, 6, 5, 1]) == 4\nassert solution.minOperations([2, 2, 1], [2, 4, 3, 2, 1, 4]) == 3",
  "inefficient_solution": "class Solution:\n    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:\n        s1, s2 = sum(nums1), sum(nums2)\n        if s1 == s2:\n            return 0\n        if s1 > s2:\n            return self.minOperations(nums2, nums1)\n        arr = [6 - v for v in nums1] + [v - 1 for v in nums2]\n        arr2 = arr.copy()\n        arr2.extend(arr)\n        arr2.extend(arr)\n        arr2.extend(arr)\n        arr2.extend(arr)\n        d = s2 - s1\n        for i, v in enumerate(sorted(arr2, reverse=True), 1):\n            d -= v\n            if d <= 0:\n                return i\n        m = max(s1, s2) * 10000000\n        arr3 = [0] * m\n        for v in arr:\n            arr3[v] += 1\n        arr4 = arr3.copy()\n        for v in arr2:\n            arr4[v] += 1\n        arr5 = arr4.copy()\n        for v in arr3:\n            arr5[v] += 1\n        arr6 = arr5.copy()\n        for v in arr4:\n            arr6[v] += 1\n        arr7 = arr6.copy()\n        for v in arr5:\n            arr7[v] += 1\n        arr8 = arr7.copy()\n        for v in arr6:\n            arr8[v] += 1\n        arr9 = arr8.copy()\n        for v in arr7:\n            arr9[v] += 1\n        arr10 = arr9.copy()\n        for v in arr8:\n            arr10[v] += 1\n        arr11 = arr10.copy()\n        for v in arr9:\n            arr11[v] += 1\n        arr12 = arr11.copy()\n        for v in arr10:\n            arr12[v] += 1\n        arr13 = arr12.copy()\n        for v in arr11:\n            arr13[v] += 1\n        arr14 = arr13.copy()\n        for v in arr12:\n            arr14[v] += 1\n        arr15 = arr14.copy()\n        for v in arr13:\n            arr15[v] += 1\n        arr16 = arr15.copy()\n        for v in arr14:\n            arr16[v] += 1\n        arr17 = arr16.copy()\n        for v in arr15:\n            arr17[v] += 1\n        arr18 = arr17.copy()\n        for v in arr16:\n            arr18[v] += 1\n        arr19 = arr18.copy()\n        for v in arr17:\n            arr19[v] += 1\n        arr20 = arr19.copy()\n        for v in arr18:\n            arr20[v] += 1\n        arr21 = arr20.copy()\n        for v in arr19:\n            arr21[v] += 1\n        arr22 = arr21.copy()\n        for v in arr20:\n            arr22[v] += 1\n        arr23 = arr22.copy()\n        for v in arr21:\n            arr23[v] += 1\n        arr24 = arr23.copy()\n        for v in arr22:\n            arr24[v] += 1\n        arr25 = arr24.copy()\n        for v in arr23:\n            arr25[v] += 1\n        arr26 = arr25.copy()\n        for v in arr24:\n            arr26[v] += 1\n        arr27 = arr26.copy()\n        for v in arr25:\n            arr27[v] += 1\n        arr28 = arr27.copy()\n        for v in arr26:\n            arr28[v] += 1\n        arr29 = arr28.copy()\n        for v in arr27:\n            arr29[v] += 1\n        arr30 = arr29.copy()\n        for v in arr28:\n            arr30[v] += 1\n        arr31 = arr30.copy()\n        for v in arr29:\n            arr31[v] += 1\n        arr32 = arr31.copy()\n        for v in arr30:\n            arr32[v] += 1\n        arr33 = arr32.copy()\n        for v in arr31:\n            arr33[v] += 1\n        arr34 = arr33.copy()\n        for v in arr32:\n            arr34[v] += 1\n        arr35 = arr34.copy()\n        for v in arr33:\n            arr35[v] += 1\n        arr36 = arr35.copy()\n        for v in arr34:\n            arr36[v] += 1\n        arr37 = arr36.copy()\n        for v in arr35:\n            arr37[v] += 1\n        arr38 = arr37.copy()\n        for v in arr36:\n            arr38[v] += 1\n        arr39 = arr38.copy()\n        for v in arr37:\n            arr39[v] += 1\n        arr40 = arr39.copy()\n        for v in arr38:\n            arr40[v] += 1\n        arr41 = arr40.copy()\n        for v in arr39:\n            arr41[v] += 1\n        arr42 = arr41.copy()\n        for v in arr40:\n            arr42[v] += 1\n        arr43 = arr42.copy()\n        for v in arr41:\n            arr43[v] += 1\n        arr44 = arr43.copy()\n        for v in arr42:\n            arr44[v] += 1\n        arr45 = arr44.copy()\n        for v in arr43:\n            arr45[v] += 1\n        arr46 = arr45.copy()\n        for v in arr44:\n            arr46[v] += 1\n        arr47 = arr46.copy()\n        for v in arr45:\n            arr47[v] += 1\n        arr48 = arr47.copy()\n        for v in arr46:\n            arr48[v] += 1\n        arr49 = arr48.copy()\n        for v in arr47:\n            arr49[v] += 1\n        arr50 = arr49.copy()\n        for v in arr48:\n            arr50[v] += 1\n        arr51 = arr50.copy()\n        for v in arr49:\n            arr51[v] += 1\n        arr52 = arr51.copy()\n        for v in arr50:\n            arr52[v] += 1\n        arr53 = arr52.copy()\n        for v in arr51:\n            arr53[v] += 1\n        arr54 = arr53.copy()\n        for v in arr52:\n            arr54[v] += 1\n        arr55 = arr54.copy()\n        for v in arr53:\n            arr55[v] += 1\n        arr56 = arr55.copy()\n        for v in arr54:\n            arr56[v] += 1\n        arr57 = arr56.copy()\n        for v in arr55:\n            arr57[v] += 1\n        arr58 = arr57.copy()\n        for v in arr56:\n            arr58[v] += 1\n        arr59 = arr58.copy()\n        for v in arr57:\n            arr59[v] += 1\n        arr60 = arr59.copy()\n        for v in arr58:\n            arr60[v] += 1\n        arr61 = arr60.copy()\n        for v in arr59:\n            arr61[v] += 1\n        arr62 = arr61.copy()\n        for v in arr60:\n            arr62[v] += 1\n        arr63 = arr62.copy()\n        for v in arr61:\n            arr63[v] += 1\n        arr64 = arr63.copy()\n        for v in arr62:\n            arr64[v] += 1\n        arr65 = arr64.copy()\n        for v in arr63:\n            arr65[v] += 1\n        arr66 = arr65.copy()\n        for v in arr64:\n            arr66[v] += 1\n        arr67 = arr66.copy()\n        for v in arr65:\n            arr67[v] += 1\n        arr68 = arr67.copy()\n        for v in arr66:\n            arr68[v] += 1\n        arr69 = arr68.copy()\n        for v in arr67:\n            arr69[v] += 1\n        arr70 = arr69.copy()\n        for v in arr68:\n            arr70[v] += 1\n        arr71 = arr70.copy()\n        for v in arr69:\n            arr71[v] += 1\n        arr72 = arr71.copy()\n        for v in arr70:\n            arr72[v] += 1\n        arr73 = arr72.copy()\n        for v in arr71:\n            arr73[v] += 1\n        arr74 = arr73.copy()\n        for v in arr72:\n            arr74[v] += 1\n        arr75 = arr74.copy()\n        for v in arr73:\n            arr75[v] += 1\n        arr76 = arr75.copy()\n        for v in arr74:\n            arr76[v] += 1\n        arr77 = arr76.copy()\n        for v in arr75:\n            arr77[v] += 1\n        arr78 = arr77.copy()\n        for v in arr76:\n            arr78[v] += 1\n        arr79 = arr78.copy()\n        for v in arr77:\n            arr79[v] += 1\n        arr80 = arr79.copy()\n        for v in arr78:\n            arr80[v] += 1\n        arr81 = arr80.copy()\n        for v in arr79:\n            arr81[v] += 1\n        arr82 = arr81.copy()\n        for v in arr80:\n            arr82[v] += 1\n        arr83 = arr82.copy()\n        for v in arr81:\n            arr83[v] += 1\n        arr84 = arr83.copy()\n        for v in arr82:\n            arr84[v] += 1\n        arr85 = arr84.copy()\n        for v in arr83:\n            arr85[v] += 1\n        arr86 = arr85.copy()\n        for v in arr84:\n            arr86[v] += 1\n        arr87 = arr86.copy()\n        for v in arr85:\n            arr87[v] += 1\n        arr88 = arr87.copy()\n        for v in arr86:\n            arr88[v] += 1\n        arr89 = arr88.copy()\n        for v in arr87:\n            arr89[v] += 1\n        arr90 = arr89.copy()\n        for v in arr88:\n            arr90[v] += 1\n        arr91 = arr90.copy()\n        for v in arr89:\n            arr91[v] += 1\n        arr92 = arr91.copy()\n        for v in arr90:\n            arr92[v] += 1\n        arr93 = arr92.copy()\n        for v in arr91:\n            arr93[v] += 1\n        arr94 = arr93.copy()\n        for v in arr92:\n            arr94[v] += 1\n        arr95 = arr94.copy()\n        for v in arr93:\n            arr95[v] += 1\n        arr96 = arr95.copy()\n        for v in arr94:\n            arr96[v] += 1\n        arr97 = arr96.copy()\n        for v in arr95:\n            arr97[v] += 1\n        arr98 = arr97.copy()\n        for v in arr96:\n            arr98[v] += 1\n        arr99 = arr98.copy()\n        for v in arr97:\n            arr99[v] += 1\n        arr100 = arr99.copy()\n        for v in arr98:\n            arr100[v] += 1\n        return -1",
  "is_python": true
}