{
  "problem_idx": 743,
  "task_name": "Network Delay Time",
  "markdown_description": "\nYou are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target.\n\n\nWe will send a signal from a given node `k`. Return *the **minimum** time it takes for all the* `n` *nodes to receive the signal*. If it is impossible for all the `n` nodes to receive the signal, return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0743.Network%20Delay%20Time/images/931_example_1.png)\n\n```\n\n**Input:** times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\n**Output:** 2\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** times = [[1,2,1]], n = 2, k = 1\n**Output:** 1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** times = [[1,2,1]], n = 2, k = 2\n**Output:** -1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= n <= 100`\n* `1 <= times.length <= 6000`\n* `times[i].length == 3`\n* `1 <= ui, vi <= n`\n* `ui != vi`\n* `0 <= wi <= 100`\n* All the pairs `(ui, vi)` are **unique**. (i.e., no multiple edges.)\n\n\n",
  "canonical_solution": "class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        INF = 0x3F3F\n        g = defaultdict(list)\n        for u, v, w in times:\n            g[u - 1].append((v - 1, w))\n        dist = [INF] * n\n        dist[k - 1] = 0\n        q = [(0, k - 1)]\n        while q:\n            _, u = heappop(q)\n            for v, w in g[u]:\n                if dist[v] > dist[u] + w:\n                    dist[v] = dist[u] + w\n                    heappush(q, (dist[v], v))\n        ans = max(dist)\n        return -1 if ans == INF else ans\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\nclass Solution:\n    def networkDelayTime(self, times, n, k):\n        INF = 0x3F3F\n        g = defaultdict(list)\n        for u, v, w in times:\n            g[u - 1].append((v - 1, w))\n        dist = [INF] * n\n        dist[k - 1] = 0\n        q = [(0, k - 1)]\n        while q:\n            _, u = heappop(q)\n            for v, w in g[u]:\n                if dist[v] > dist[u] + w:\n                    dist[v] = dist[u] + w\n                    heappush(q, (dist[v], v))\n        ans = max(dist)\n        return -1 if ans == INF else ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    n = random.randint(1, 10)\n    k = random.randint(1, n)\n\n    times = []\n    for _ in range(random.randint(1, 5)):\n        u = random.randint(1, n)\n        v = random.randint(1, n)\n        w = random.randint(0, 100)\n        times.append([u, v, w])\n\n    expected_result = solution.networkDelayTime(times, n, k)\n\n    return times, n, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        times, n, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.networkDelayTime(times, n, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.networkDelayTime({times}, {n}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.networkDelayTime([[3, 4, 42]], 4, 4) == -1\nassert solution.networkDelayTime([[7, 9, 82], [9, 9, 100], [8, 9, 17]], 9, 8) == -1\nassert solution.networkDelayTime([[3, 1, 90], [2, 2, 99], [3, 3, 70]], 3, 2) == -1\nassert solution.networkDelayTime([[4, 5, 14], [5, 4, 75], [1, 5, 62], [5, 4, 60]], 5, 4) == -1\nassert solution.networkDelayTime([[2, 1, 21], [3, 5, 19], [2, 1, 3], [5, 5, 23], [5, 1, 23]], 5, 3) == -1\nassert solution.networkDelayTime([[1, 1, 33]], 1, 1) == 0\nassert solution.networkDelayTime([[2, 1, 68]], 2, 1) == -1\nassert solution.networkDelayTime([[1, 2, 48], [1, 2, 84], [1, 1, 46], [2, 1, 65], [2, 2, 75]], 2, 1) == 48\nassert solution.networkDelayTime([[1, 2, 60], [4, 3, 57], [2, 6, 22], [4, 6, 79]], 6, 6) == -1\nassert solution.networkDelayTime([[5, 7, 19], [6, 2, 2]], 8, 3) == -1\nassert solution.networkDelayTime([[1, 1, 59], [1, 1, 25]], 1, 1) == 0\nassert solution.networkDelayTime([[6, 3, 4], [4, 7, 67], [2, 2, 35], [3, 4, 71], [6, 7, 75]], 7, 3) == -1\nassert solution.networkDelayTime([[9, 2, 80], [9, 9, 30], [1, 8, 63], [2, 5, 95], [6, 2, 82]], 9, 4) == -1\nassert solution.networkDelayTime([[5, 6, 16], [2, 8, 58]], 8, 3) == -1\nassert solution.networkDelayTime([[5, 6, 20], [6, 5, 38], [5, 4, 28]], 10, 2) == -1\nassert solution.networkDelayTime([[3, 5, 6]], 6, 2) == -1\nassert solution.networkDelayTime([[4, 5, 47], [4, 3, 75], [1, 1, 24], [1, 1, 55]], 5, 2) == -1\nassert solution.networkDelayTime([[5, 3, 11], [3, 4, 2], [3, 3, 99], [4, 3, 0], [1, 3, 68]], 5, 5) == -1\nassert solution.networkDelayTime([[1, 1, 97], [1, 1, 28], [1, 1, 90], [1, 1, 73]], 1, 1) == 0\nassert solution.networkDelayTime([[1, 2, 41], [2, 1, 45], [2, 2, 54]], 2, 1) == 41\nassert solution.networkDelayTime([[3, 1, 2], [3, 3, 56], [3, 3, 81]], 3, 1) == -1\nassert solution.networkDelayTime([[1, 3, 32], [3, 3, 48], [1, 2, 95], [3, 1, 59]], 4, 1) == -1\nassert solution.networkDelayTime([[4, 3, 16], [3, 8, 41], [7, 6, 80], [7, 3, 35], [4, 8, 74]], 8, 5) == -1\nassert solution.networkDelayTime([[4, 4, 21], [4, 4, 4], [3, 4, 58]], 4, 2) == -1\nassert solution.networkDelayTime([[1, 1, 64], [2, 1, 90], [1, 2, 8], [2, 2, 90]], 2, 2) == 90\nassert solution.networkDelayTime([[1, 1, 100]], 1, 1) == 0\nassert solution.networkDelayTime([[3, 3, 28], [3, 1, 52], [2, 1, 92], [2, 2, 40], [2, 1, 99]], 3, 2) == -1\nassert solution.networkDelayTime([[1, 3, 3], [3, 1, 69], [5, 1, 90], [5, 3, 38], [2, 2, 31]], 5, 2) == -1\nassert solution.networkDelayTime([[1, 1, 96]], 1, 1) == 0\nassert solution.networkDelayTime([[4, 5, 96], [2, 1, 2], [6, 4, 56], [6, 4, 29], [6, 5, 19]], 6, 6) == -1\nassert solution.networkDelayTime([[2, 2, 88]], 2, 1) == -1\nassert solution.networkDelayTime([[2, 4, 76], [1, 2, 76]], 4, 2) == -1\nassert solution.networkDelayTime([[4, 4, 69], [1, 2, 9], [4, 2, 53]], 5, 4) == -1\nassert solution.networkDelayTime([[5, 8, 6], [8, 4, 79]], 9, 8) == -1\nassert solution.networkDelayTime([[1, 2, 65], [3, 2, 99], [1, 3, 40]], 3, 2) == -1\nassert solution.networkDelayTime([[2, 2, 83], [3, 2, 46]], 4, 1) == -1\nassert solution.networkDelayTime([[1, 7, 69], [2, 3, 91], [2, 2, 12], [3, 3, 43]], 8, 2) == -1\nassert solution.networkDelayTime([[4, 6, 61]], 6, 4) == -1\nassert solution.networkDelayTime([[7, 3, 37], [5, 6, 41], [1, 6, 100], [7, 1, 15]], 7, 3) == -1\nassert solution.networkDelayTime([[4, 4, 75], [7, 5, 75], [6, 8, 96], [4, 4, 51], [6, 3, 19]], 8, 1) == -1\nassert solution.networkDelayTime([[1, 2, 61]], 2, 2) == -1\nassert solution.networkDelayTime([[2, 2, 37], [1, 2, 64], [1, 2, 99]], 2, 1) == 64\nassert solution.networkDelayTime([[1, 1, 53]], 4, 2) == -1\nassert solution.networkDelayTime([[5, 4, 56], [8, 3, 3], [3, 9, 23]], 10, 7) == -1\nassert solution.networkDelayTime([[5, 3, 38], [7, 3, 12], [6, 5, 47], [6, 6, 26]], 8, 7) == -1\nassert solution.networkDelayTime([[4, 1, 17], [4, 2, 62], [3, 2, 94], [4, 2, 17]], 4, 2) == -1\nassert solution.networkDelayTime([[2, 1, 45]], 2, 2) == 45\nassert solution.networkDelayTime([[4, 4, 81]], 4, 3) == -1\nassert solution.networkDelayTime([[5, 7, 2], [8, 3, 99]], 8, 2) == -1\nassert solution.networkDelayTime([[4, 1, 65], [4, 4, 76], [2, 4, 44]], 5, 2) == -1\nassert solution.networkDelayTime([[6, 7, 54]], 7, 2) == -1\nassert solution.networkDelayTime([[10, 2, 93], [1, 7, 48]], 10, 8) == -1\nassert solution.networkDelayTime([[3, 4, 77], [4, 2, 53]], 4, 2) == -1\nassert solution.networkDelayTime([[3, 3, 13], [3, 4, 44], [5, 7, 80]], 7, 5) == -1\nassert solution.networkDelayTime([[7, 2, 16], [3, 4, 50], [6, 7, 73], [4, 5, 82], [3, 6, 89]], 9, 5) == -1\nassert solution.networkDelayTime([[6, 6, 58], [5, 4, 17]], 7, 4) == -1\nassert solution.networkDelayTime([[7, 7, 64], [3, 9, 5], [3, 4, 42], [8, 6, 49], [9, 2, 28]], 9, 3) == -1\nassert solution.networkDelayTime([[3, 2, 63], [4, 2, 57]], 7, 1) == -1\nassert solution.networkDelayTime([[1, 1, 83], [1, 1, 96], [1, 1, 10], [1, 1, 70]], 1, 1) == 0\nassert solution.networkDelayTime([[4, 1, 55], [7, 4, 25], [1, 1, 41], [6, 6, 60]], 8, 7) == -1\nassert solution.networkDelayTime([[3, 4, 73], [1, 4, 87], [4, 2, 53], [1, 4, 87]], 5, 4) == -1\nassert solution.networkDelayTime([[1, 1, 91], [1, 1, 29], [1, 1, 52], [1, 1, 83]], 1, 1) == 0\nassert solution.networkDelayTime([[1, 2, 12]], 3, 2) == -1\nassert solution.networkDelayTime([[2, 2, 48], [2, 1, 81]], 2, 1) == -1\nassert solution.networkDelayTime([[4, 7, 15], [6, 2, 27]], 8, 7) == -1\nassert solution.networkDelayTime([[5, 5, 100], [3, 3, 51], [7, 6, 8], [4, 9, 64]], 9, 9) == -1\nassert solution.networkDelayTime([[3, 2, 54], [2, 5, 35]], 7, 4) == -1\nassert solution.networkDelayTime([[1, 1, 74], [1, 2, 9], [1, 1, 40], [2, 1, 66], [1, 1, 55]], 2, 1) == 9\nassert solution.networkDelayTime([[2, 6, 25], [7, 3, 6], [1, 4, 69]], 9, 5) == -1\nassert solution.networkDelayTime([[3, 5, 38], [5, 1, 57], [1, 1, 79], [3, 4, 97]], 5, 4) == -1\nassert solution.networkDelayTime([[8, 1, 28], [3, 1, 35], [5, 9, 86], [7, 2, 65]], 10, 7) == -1\nassert solution.networkDelayTime([[1, 2, 40], [3, 5, 68], [4, 4, 42], [3, 2, 21]], 5, 3) == -1\nassert solution.networkDelayTime([[1, 3, 4], [3, 5, 1], [2, 5, 43], [1, 5, 48]], 5, 3) == -1\nassert solution.networkDelayTime([[1, 2, 23], [3, 2, 24], [3, 2, 23]], 3, 1) == -1\nassert solution.networkDelayTime([[7, 5, 37]], 7, 5) == -1\nassert solution.networkDelayTime([[7, 7, 45], [2, 4, 26], [7, 4, 64], [3, 2, 95]], 7, 3) == -1\nassert solution.networkDelayTime([[3, 1, 10], [3, 1, 90], [5, 3, 97], [4, 5, 16]], 5, 3) == -1\nassert solution.networkDelayTime([[1, 1, 91], [1, 1, 4]], 1, 1) == 0\nassert solution.networkDelayTime([[6, 4, 47], [6, 7, 45], [1, 1, 75], [1, 3, 54], [3, 5, 98]], 7, 5) == -1\nassert solution.networkDelayTime([[3, 5, 40], [1, 5, 90], [4, 8, 84], [8, 10, 96]], 10, 6) == -1\nassert solution.networkDelayTime([[1, 5, 32]], 5, 1) == -1\nassert solution.networkDelayTime([[5, 1, 62]], 6, 1) == -1\nassert solution.networkDelayTime([[1, 2, 58], [1, 1, 93], [2, 1, 10]], 2, 2) == 10\nassert solution.networkDelayTime([[3, 3, 96], [2, 1, 62], [1, 3, 84]], 3, 3) == -1\nassert solution.networkDelayTime([[2, 6, 43]], 7, 6) == -1\nassert solution.networkDelayTime([[2, 7, 8], [7, 8, 52], [8, 5, 38]], 8, 2) == -1\nassert solution.networkDelayTime([[1, 5, 86], [8, 3, 63]], 10, 6) == -1\nassert solution.networkDelayTime([[1, 4, 58], [4, 5, 83]], 9, 5) == -1\nassert solution.networkDelayTime([[9, 8, 57], [4, 5, 59], [6, 3, 88]], 9, 3) == -1\nassert solution.networkDelayTime([[1, 1, 38]], 1, 1) == 0\nassert solution.networkDelayTime([[2, 4, 31], [3, 2, 15]], 4, 3) == -1\nassert solution.networkDelayTime([[1, 1, 93], [1, 1, 47]], 1, 1) == 0\nassert solution.networkDelayTime([[1, 1, 5], [1, 1, 42]], 1, 1) == 0\nassert solution.networkDelayTime([[1, 2, 71], [1, 2, 11], [1, 1, 85]], 2, 1) == 11\nassert solution.networkDelayTime([[6, 7, 17], [3, 4, 37], [6, 2, 14], [2, 6, 34], [5, 5, 18]], 8, 4) == -1\nassert solution.networkDelayTime([[8, 4, 29], [6, 5, 54], [8, 5, 0], [4, 2, 84]], 9, 7) == -1\nassert solution.networkDelayTime([[1, 1, 49], [1, 1, 40]], 1, 1) == 0\nassert solution.networkDelayTime([[2, 3, 56], [3, 2, 80], [1, 2, 53], [2, 1, 31], [2, 1, 92]], 3, 2) == 56\nassert solution.networkDelayTime([[1, 1, 15], [1, 1, 80], [1, 1, 87], [1, 1, 58], [1, 1, 41]], 1, 1) == 0\nassert solution.networkDelayTime([[5, 3, 81]], 6, 4) == -1",
  "inefficient_solution": "class Solution:\n    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:\n        INF = 0x3F3F\n        g = defaultdict(list)\n        for u, v, w in times:\n            g[u - 1] = [(v - 1, w)] + g[u - 1]\n        dist = [INF] * n\n        dist_array = [dist[:]]\n        for _ in range(n):\n            dist = [INF if i != k - 1 else 0] + dist\n            dist_array.append(dist[:])\n        q = [(0, k - 1)]\n        while q:\n            _, u = heappop(q)\n            for v, w in g[u]:\n                if dist_array[n - 1][v] > dist_array[n - len(q)][u] + w:\n                    dist_array[n - 1][v] = dist_array[n - len(q)][u] + w\n                    heappush(q, (dist_array[n - 1][v], v))\n        ans = max(dist_array[n - 1])\n        return -1 if ans == INF else ans",
  "is_python": true
}