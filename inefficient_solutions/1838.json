{
  "problem_idx": 1838,
  "task_name": "Frequency of the Most Frequent Element",
  "markdown_description": "\nThe **frequency** of an element is the number of times it occurs in an array.\n\n\nYou are given an integer array `nums` and an integer `k`. In one operation, you can choose an index of `nums` and increment the element at that index by `1`.\n\n\nReturn *the **maximum possible frequency** of an element after performing **at most*** `k` *operations*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,4], k = 5\n**Output:** 3**Explanation:** Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,8,13], k = 5\n**Output:** 2\n**Explanation:** There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [3,9,6], k = 2\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n* `1 <= k <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxFrequency(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        l, r, n = 0, 1, len(nums)\n        ans, window = 1, 0\n        while r < n:\n            window += (nums[r] - nums[r - 1]) * (r - l)\n            while window > k:\n                window -= nums[r] - nums[l]\n                l += 1\n            r += 1\n            ans = max(ans, r - l)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxFrequency(self, nums, k):\n        nums.sort()\n        l, r, n = 0, 1, len(nums)\n        ans, window = 1, 0\n        while r < n:\n            window += (nums[r] - nums[r - 1]) * (r - l)\n            while window > k:\n                window -= nums[r] - nums[l]\n                l += 1\n            r += 1\n            ans = max(ans, r - l)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random value for k\n    k = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxFrequency(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxFrequency(nums, k) == expected_result\n        print(f\"assert solution.maxFrequency({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxFrequency({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxFrequency([7, 13, 31, 33, 70, 83, 97], 99) == 4\nassert solution.maxFrequency([12, 16, 33, 61, 66, 74, 91, 95], 50) == 3\nassert solution.maxFrequency([17, 22, 31, 36, 37, 93, 99], 63) == 5\nassert solution.maxFrequency([50, 74, 93], 24) == 2\nassert solution.maxFrequency([4, 11, 17, 44, 48, 81], 56) == 3\nassert solution.maxFrequency([7, 34, 87], 10) == 1\nassert solution.maxFrequency([17, 21, 39, 49, 70, 75, 79], 96) == 5\nassert solution.maxFrequency([2, 20, 43, 46, 78, 83, 84, 91], 16) == 3\nassert solution.maxFrequency([12, 17, 34, 39, 62, 66, 69, 83, 99], 25) == 3\nassert solution.maxFrequency([82, 99], 15) == 1\nassert solution.maxFrequency([7, 14, 16, 21, 71, 75, 94], 89) == 4\nassert solution.maxFrequency([6, 9, 15, 42, 45, 50, 55], 95) == 5\nassert solution.maxFrequency([4, 24, 36, 79], 96) == 3\nassert solution.maxFrequency([28, 40, 48, 52, 56, 70, 73], 20) == 3\nassert solution.maxFrequency([19, 24, 74, 82], 3) == 1\nassert solution.maxFrequency([17, 33, 39, 87], 22) == 2\nassert solution.maxFrequency([24, 26, 27], 92) == 3\nassert solution.maxFrequency([1, 6, 27, 53, 96], 101) == 3\nassert solution.maxFrequency([6, 16, 47, 67, 78, 79, 85, 100], 7) == 2\nassert solution.maxFrequency([6, 24, 28, 38, 64, 66, 72, 73, 81], 91) == 5\nassert solution.maxFrequency([2, 21, 37, 51, 60, 78], 40) == 3\nassert solution.maxFrequency([1, 9, 30, 48, 95], 100) == 3\nassert solution.maxFrequency([11, 22, 47, 48, 64, 72, 78, 85], 30) == 3\nassert solution.maxFrequency([3, 19], 95) == 2\nassert solution.maxFrequency([29, 41, 47, 82, 91], 13) == 2\nassert solution.maxFrequency([57, 67, 68, 74, 77, 79], 24) == 4\nassert solution.maxFrequency([6, 17, 23, 60, 70, 75, 79, 87, 88, 96], 1) == 2\nassert solution.maxFrequency([21, 39, 50, 51, 54, 67], 82) == 5\nassert solution.maxFrequency([4, 24, 32, 39, 48, 58, 87, 91, 92], 21) == 3\nassert solution.maxFrequency([7, 37, 81, 89, 97, 99], 92) == 5\nassert solution.maxFrequency([15, 42, 43], 93) == 3\nassert solution.maxFrequency([67, 68, 71, 98], 58) == 3\nassert solution.maxFrequency([10, 49], 58) == 2\nassert solution.maxFrequency([8, 9, 19, 30, 33, 41, 62, 71, 97], 87) == 5\nassert solution.maxFrequency([38, 66], 101) == 2\nassert solution.maxFrequency([37, 79], 28) == 1\nassert solution.maxFrequency([11, 20, 21, 32, 34, 39, 57, 61, 70, 86], 84) == 6\nassert solution.maxFrequency([20, 21, 26, 33, 37, 40, 54, 82], 51) == 5\nassert solution.maxFrequency([3, 5, 20, 74], 33) == 3\nassert solution.maxFrequency([29, 48, 54, 66, 67, 76, 78, 90], 37) == 4\nassert solution.maxFrequency([2, 5, 18, 47, 53, 63, 67, 74, 76], 13) == 3\nassert solution.maxFrequency([17, 34, 50, 56, 66, 68, 85, 98, 99], 42) == 4\nassert solution.maxFrequency([1, 17, 52, 70, 74, 77, 79, 82, 85, 100], 8) == 3\nassert solution.maxFrequency([67, 94], 6) == 1\nassert solution.maxFrequency([3, 20, 38, 61, 64, 77, 85], 98) == 4\nassert solution.maxFrequency([16, 23, 29, 52, 68, 73, 77, 83, 84, 89], 16) == 3\nassert solution.maxFrequency([4, 10, 11, 14, 29, 50, 72, 78, 93], 10) == 3\nassert solution.maxFrequency([5, 20, 38, 66], 100) == 3\nassert solution.maxFrequency([14, 19, 72, 75, 96], 95) == 3\nassert solution.maxFrequency([5, 6, 9, 30, 33, 62, 72, 74, 84], 14) == 3\nassert solution.maxFrequency([9, 78], 81) == 2\nassert solution.maxFrequency([9, 32, 35], 69) == 3\nassert solution.maxFrequency([1, 7, 55, 68, 78], 56) == 3\nassert solution.maxFrequency([2, 14, 15, 65, 82, 84, 93], 18) == 3\nassert solution.maxFrequency([3, 16, 35, 41, 44, 54, 64, 85, 91], 14) == 3\nassert solution.maxFrequency([31, 32, 44, 61, 71, 84], 75) == 3\nassert solution.maxFrequency([17, 19, 24, 25, 31, 76, 81, 89, 96], 32) == 4\nassert solution.maxFrequency([3, 12, 41, 98], 62) == 2\nassert solution.maxFrequency([70, 94], 55) == 2\nassert solution.maxFrequency([30, 48, 78, 99], 71) == 2\nassert solution.maxFrequency([14, 25, 27, 37, 41, 42, 45, 76, 85], 86) == 7\nassert solution.maxFrequency([6, 28, 51, 57, 60, 72], 91) == 4\nassert solution.maxFrequency([2, 4, 11, 21, 33, 64, 83, 97], 19) == 3\nassert solution.maxFrequency([22, 43, 51, 69, 87, 93], 44) == 3\nassert solution.maxFrequency([7, 36, 41, 44, 55, 68, 81, 87, 96], 54) == 4\nassert solution.maxFrequency([12, 25, 61, 82, 100], 11) == 1\nassert solution.maxFrequency([30, 34, 65, 79], 14) == 2\nassert solution.maxFrequency([2, 4, 42, 68, 86, 88], 61) == 3\nassert solution.maxFrequency([44, 69, 70], 30) == 3\nassert solution.maxFrequency([6, 18, 29, 37, 54, 81, 97], 17) == 2\nassert solution.maxFrequency([1, 13, 77], 21) == 2\nassert solution.maxFrequency([1, 12, 16, 31, 34, 35, 43, 54, 83, 88], 77) == 5\nassert solution.maxFrequency([11, 18, 29, 37, 57], 43) == 3\nassert solution.maxFrequency([6, 39, 70, 75, 82, 90], 78) == 4\nassert solution.maxFrequency([13, 32], 27) == 2\nassert solution.maxFrequency([13, 46, 48, 60, 66, 74, 92, 93, 95, 100], 65) == 5\nassert solution.maxFrequency([35, 37, 50, 84], 50) == 3\nassert solution.maxFrequency([5, 10, 21, 39, 41, 43, 93, 99], 31) == 4\nassert solution.maxFrequency([29, 35, 36, 39, 45, 57, 69, 87, 88, 92], 17) == 4\nassert solution.maxFrequency([34, 49], 41) == 2\nassert solution.maxFrequency([51, 72], 38) == 2\nassert solution.maxFrequency([16, 36, 39, 46, 63, 76, 86], 60) == 4\nassert solution.maxFrequency([3, 6, 18, 29, 35, 82, 91, 94, 97], 62) == 4\nassert solution.maxFrequency([15, 44, 71, 87], 80) == 3\nassert solution.maxFrequency([47, 61, 76, 77, 87], 71) == 4\nassert solution.maxFrequency([29, 37, 43, 45, 52, 62, 64, 72, 85], 88) == 6\nassert solution.maxFrequency([19, 57, 80, 88, 96], 66) == 4\nassert solution.maxFrequency([19, 54], 93) == 2\nassert solution.maxFrequency([5, 8, 14, 27, 50, 59, 70, 72, 87, 98], 11) == 2\nassert solution.maxFrequency([32, 38, 44, 52, 59, 82, 95], 55) == 4\nassert solution.maxFrequency([1, 3, 9, 17, 50, 61, 69, 72, 77, 90], 57) == 5\nassert solution.maxFrequency([29, 35, 39, 52, 83], 2) == 1\nassert solution.maxFrequency([16, 23, 31, 38, 44, 78, 82, 84, 100], 63) == 4\nassert solution.maxFrequency([3, 15, 28, 32, 41, 44, 60, 85, 87, 96], 55) == 4\nassert solution.maxFrequency([10, 65], 93) == 2\nassert solution.maxFrequency([4, 25, 75], 24) == 2\nassert solution.maxFrequency([15, 19, 26, 29, 70, 74, 88, 90], 98) == 4\nassert solution.maxFrequency([13, 20, 22, 55, 58, 77, 78, 85, 99], 46) == 4\nassert solution.maxFrequency([30, 36, 38, 62, 67, 74], 15) == 3\nassert solution.maxFrequency([41, 53, 94, 100], 78) == 3",
  "inefficient_solution": "class Solution:\n    def maxFrequency(self, nums: List[int], k: int) -> int:\n        nums = [num for num in nums]\n        k_array = [k] * len(nums)\n        max_freq = 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                frequency = sum(1 for num in nums[i:j+1] if num == nums[i])\n                operations = sum(nums[i:j+1])\n                if operations <= k_array[j - i] and frequency > max_freq:\n                    max_freq = frequency\n        return max_freq",
  "is_python": true
}