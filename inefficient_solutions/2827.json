{
  "problem_idx": 2827,
  "task_name": "Number of Beautiful Integers in the Range",
  "markdown_description": "\nYou are given positive integers `low`, `high`, and `k`.\n\n\nA number is **beautiful** if it meets both of the following conditions:\n\n\n* The count of even digits in the number is equal to the count of odd digits.\n* The number is divisible by `k`.\n\n\nReturn *the number of beautiful integers in the range* `[low, high]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** low = 10, high = 20, k = 3\n**Output:** 2\n**Explanation:** There are 2 beautiful integers in the given range: [12,18]. \n- 12 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\n- 18 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 3.\nAdditionally we can see that:\n- 16 is not beautiful because it is not divisible by k = 3.\n- 15 is not beautiful because it does not contain equal counts even and odd digits.\nIt can be shown that there are only 2 beautiful integers in the given range.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** low = 1, high = 10, k = 1\n**Output:** 1\n**Explanation:** There is 1 beautiful integer in the given range: [10].\n- 10 is beautiful because it contains 1 odd digit and 1 even digit, and is divisible by k = 1.\nIt can be shown that there is only 1 beautiful integer in the given range.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** low = 5, high = 5, k = 2\n**Output:** 0\n**Explanation:** There are 0 beautiful integers in the given range.\n- 5 is not beautiful because it is not divisible by k = 2 and it does not contain equal even and odd digits.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 < low <= high <= 109`\n* `0 < k <= 20`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -> int:\n        @cache\n        def dfs(pos: int, mod: int, diff: int, lead: int, limit: int) -> int:\n            if pos >= len(s):\n                return mod == 0 and diff == 10\n            up = int(s[pos]) if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if i == 0 and lead:\n                    ans += dfs(pos + 1, mod, diff, 1, limit and i == up)\n                else:\n                    nxt = diff + (1 if i % 2 == 1 else -1)\n                    ans += dfs(pos + 1, (mod * 10 + i) % k, nxt, 0, limit and i == up)\n            return ans\n\n        s = str(high)\n        a = dfs(0, 0, 10, 1, 1)\n        dfs.cache_clear()\n        s = str(low - 1)\n        b = dfs(0, 0, 10, 1, 1)\n        return a - b\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -> int:\n        @cache\n        def dfs(pos: int, mod: int, diff: int, lead: int, limit: int) -> int:\n            if pos >= len(s):\n                return mod == 0 and diff == 10\n            up = int(s[pos]) if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if i == 0 and lead:\n                    ans += dfs(pos + 1, mod, diff, 1, limit and i == up)\n                else:\n                    nxt = diff + (1 if i % 2 == 1 else -1)\n                    ans += dfs(pos + 1, (mod * 10 + i) % k, nxt, 0, limit and i == up)\n            return ans\n\n        s = str(high)\n        a = dfs(0, 0, 10, 1, 1)\n        dfs.cache_clear()\n        s = str(low - 1)\n        b = dfs(0, 0, 10, 1, 1)\n        return a - b\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random low, high, and k values\n    low = random.randint(1, 100)\n    high = random.randint(low, low + 100)\n    k = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfBeautifulIntegers(low, high, k)\n\n    return low, high, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        low, high, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfBeautifulIntegers(low, high, k) == expected_result\n        print(f\"assert solution.numberOfBeautifulIntegers({low}, {high}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfBeautifulIntegers({low}, {high}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfBeautifulIntegers(7, 69, 6) == 5\nassert solution.numberOfBeautifulIntegers(3, 30, 1) == 11\nassert solution.numberOfBeautifulIntegers(58, 71, 5) == 2\nassert solution.numberOfBeautifulIntegers(3, 26, 4) == 2\nassert solution.numberOfBeautifulIntegers(70, 110, 1) == 15\nassert solution.numberOfBeautifulIntegers(33, 44, 4) == 1\nassert solution.numberOfBeautifulIntegers(24, 86, 10) == 3\nassert solution.numberOfBeautifulIntegers(14, 74, 9) == 7\nassert solution.numberOfBeautifulIntegers(27, 90, 6) == 6\nassert solution.numberOfBeautifulIntegers(53, 124, 6) == 5\nassert solution.numberOfBeautifulIntegers(81, 169, 1) == 10\nassert solution.numberOfBeautifulIntegers(28, 59, 1) == 16\nassert solution.numberOfBeautifulIntegers(20, 50, 8) == 1\nassert solution.numberOfBeautifulIntegers(39, 129, 5) == 6\nassert solution.numberOfBeautifulIntegers(8, 64, 6) == 5\nassert solution.numberOfBeautifulIntegers(87, 90, 5) == 1\nassert solution.numberOfBeautifulIntegers(87, 143, 2) == 5\nassert solution.numberOfBeautifulIntegers(82, 96, 2) == 4\nassert solution.numberOfBeautifulIntegers(19, 83, 4) == 6\nassert solution.numberOfBeautifulIntegers(43, 108, 7) == 5\nassert solution.numberOfBeautifulIntegers(4, 53, 3) == 7\nassert solution.numberOfBeautifulIntegers(38, 62, 10) == 1\nassert solution.numberOfBeautifulIntegers(39, 124, 3) == 10\nassert solution.numberOfBeautifulIntegers(59, 140, 7) == 3\nassert solution.numberOfBeautifulIntegers(53, 147, 3) == 9\nassert solution.numberOfBeautifulIntegers(40, 124, 5) == 6\nassert solution.numberOfBeautifulIntegers(67, 101, 9) == 3\nassert solution.numberOfBeautifulIntegers(76, 127, 5) == 2\nassert solution.numberOfBeautifulIntegers(66, 75, 9) == 1\nassert solution.numberOfBeautifulIntegers(28, 89, 10) == 3\nassert solution.numberOfBeautifulIntegers(91, 175, 9) == 0\nassert solution.numberOfBeautifulIntegers(70, 84, 4) == 2\nassert solution.numberOfBeautifulIntegers(70, 168, 7) == 2\nassert solution.numberOfBeautifulIntegers(22, 84, 5) == 6\nassert solution.numberOfBeautifulIntegers(9, 107, 5) == 9\nassert solution.numberOfBeautifulIntegers(42, 63, 9) == 3\nassert solution.numberOfBeautifulIntegers(52, 91, 6) == 4\nassert solution.numberOfBeautifulIntegers(38, 132, 2) == 16\nassert solution.numberOfBeautifulIntegers(89, 108, 8) == 1\nassert solution.numberOfBeautifulIntegers(49, 116, 8) == 3\nassert solution.numberOfBeautifulIntegers(68, 74, 4) == 1\nassert solution.numberOfBeautifulIntegers(32, 54, 8) == 1\nassert solution.numberOfBeautifulIntegers(30, 39, 6) == 2\nassert solution.numberOfBeautifulIntegers(98, 160, 9) == 0\nassert solution.numberOfBeautifulIntegers(34, 86, 5) == 5\nassert solution.numberOfBeautifulIntegers(66, 147, 8) == 2\nassert solution.numberOfBeautifulIntegers(36, 124, 9) == 7\nassert solution.numberOfBeautifulIntegers(82, 156, 6) == 2\nassert solution.numberOfBeautifulIntegers(37, 47, 5) == 1\nassert solution.numberOfBeautifulIntegers(57, 61, 3) == 0\nassert solution.numberOfBeautifulIntegers(100, 159, 8) == 0\nassert solution.numberOfBeautifulIntegers(74, 74, 3) == 0\nassert solution.numberOfBeautifulIntegers(32, 84, 8) == 3\nassert solution.numberOfBeautifulIntegers(39, 39, 2) == 0\nassert solution.numberOfBeautifulIntegers(65, 141, 7) == 2\nassert solution.numberOfBeautifulIntegers(74, 146, 1) == 13\nassert solution.numberOfBeautifulIntegers(97, 145, 5) == 0\nassert solution.numberOfBeautifulIntegers(3, 95, 3) == 15\nassert solution.numberOfBeautifulIntegers(35, 97, 8) == 3\nassert solution.numberOfBeautifulIntegers(100, 176, 4) == 0\nassert solution.numberOfBeautifulIntegers(11, 75, 10) == 3\nassert solution.numberOfBeautifulIntegers(1, 54, 1) == 23\nassert solution.numberOfBeautifulIntegers(94, 113, 7) == 1\nassert solution.numberOfBeautifulIntegers(94, 146, 9) == 0\nassert solution.numberOfBeautifulIntegers(73, 146, 4) == 3\nassert solution.numberOfBeautifulIntegers(64, 162, 4) == 4\nassert solution.numberOfBeautifulIntegers(91, 91, 2) == 0\nassert solution.numberOfBeautifulIntegers(22, 49, 1) == 14\nassert solution.numberOfBeautifulIntegers(100, 160, 8) == 0\nassert solution.numberOfBeautifulIntegers(19, 74, 7) == 5\nassert solution.numberOfBeautifulIntegers(18, 85, 10) == 3\nassert solution.numberOfBeautifulIntegers(79, 107, 1) == 10\nassert solution.numberOfBeautifulIntegers(72, 119, 9) == 3\nassert solution.numberOfBeautifulIntegers(46, 110, 1) == 27\nassert solution.numberOfBeautifulIntegers(16, 107, 5) == 8\nassert solution.numberOfBeautifulIntegers(12, 54, 2) == 12\nassert solution.numberOfBeautifulIntegers(18, 80, 9) == 7\nassert solution.numberOfBeautifulIntegers(68, 78, 3) == 3\nassert solution.numberOfBeautifulIntegers(33, 46, 8) == 0\nassert solution.numberOfBeautifulIntegers(84, 157, 2) == 5\nassert solution.numberOfBeautifulIntegers(66, 86, 5) == 2\nassert solution.numberOfBeautifulIntegers(45, 49, 4) == 0\nassert solution.numberOfBeautifulIntegers(80, 177, 5) == 2\nassert solution.numberOfBeautifulIntegers(45, 94, 6) == 4\nassert solution.numberOfBeautifulIntegers(32, 47, 8) == 1\nassert solution.numberOfBeautifulIntegers(38, 111, 8) == 3\nassert solution.numberOfBeautifulIntegers(46, 59, 7) == 2\nassert solution.numberOfBeautifulIntegers(77, 105, 5) == 2\nassert solution.numberOfBeautifulIntegers(81, 128, 10) == 1\nassert solution.numberOfBeautifulIntegers(19, 76, 7) == 5\nassert solution.numberOfBeautifulIntegers(71, 150, 6) == 4\nassert solution.numberOfBeautifulIntegers(31, 36, 9) == 1\nassert solution.numberOfBeautifulIntegers(47, 129, 1) == 27\nassert solution.numberOfBeautifulIntegers(40, 116, 2) == 15\nassert solution.numberOfBeautifulIntegers(70, 97, 7) == 1\nassert solution.numberOfBeautifulIntegers(100, 109, 3) == 0\nassert solution.numberOfBeautifulIntegers(38, 92, 4) == 5\nassert solution.numberOfBeautifulIntegers(82, 111, 10) == 1\nassert solution.numberOfBeautifulIntegers(56, 75, 10) == 1\nassert solution.numberOfBeautifulIntegers(96, 176, 10) == 0",
  "inefficient_solution": "class Solution:\n    def numberOfBeautifulIntegers(self, low: int, high: int, k: int) -> int:\n        def dfs(num: int, count: dict, limit: int) -> int:\n            if num >= high:\n                return 0\n            even = sum(1 for i in str(num) if int(i) % 2 == 0)\n            odd = sum(1 for i in str(num) if int(i) % 2 != 0)\n            if even == odd and num % k == 0:\n                return 1\n            count[num % k] = count.get(num % k, 0) + 1\n            ans = dfs(num + 1, count, limit) + dfs(num * 10 + 9, count, limit and num * 10 + 9 == high)\n            count[num % k] -= 1\n            return ans\n\n        count = {0: 0}\n        return dfs(low, count, 1) - dfs(low - 1, count, 1)",
  "is_python": true
}