{
  "problem_idx": 233,
  "task_name": "Number of Digit One",
  "markdown_description": "\nGiven an integer `n`, count *the total number of digit* `1` *appearing in all non-negative integers less than or equal to* `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 13\n**Output:** 6\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 0\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def countDigitOne(self, n: int) -> int:\n        @cache\n        def dfs(pos, cnt, limit):\n            if pos <= 0:\n                return cnt\n            up = a[pos] if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                ans += dfs(pos - 1, cnt + (i == 1), limit and i == up)\n            return ans\n\n        a = [0] * 12\n        l = 1\n        while n:\n            a[l] = n % 10\n            n //= 10\n            l += 1\n        return dfs(l, 0, True)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countDigitOne(self, n: int) -> int:\n        @cache\n        def dfs(pos, cnt, limit):\n            if pos <= 0:\n                return cnt\n            up = a[pos] if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                ans += dfs(pos - 1, cnt + (i == 1), limit and i == up)\n            return ans\n\n        a = [0] * 12\n        l = 1\n        while n:\n            a[l] = n % 10\n            n //= 10\n            l += 1\n        return dfs(l, 0, True)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random integer n\n    n = random.randint(0, 10**9)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countDigitOne(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countDigitOne(n) == expected_result\n        print(f\"assert solution.countDigitOne({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countDigitOne({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countDigitOne(644118665) == 621484969\nassert solution.countDigitOne(133714900) == 147976282\nassert solution.countDigitOne(29646302) == 30828961\nassert solution.countDigitOne(509861478) == 506934977\nassert solution.countDigitOne(644862965) == 621935897\nassert solution.countDigitOne(873612190) == 802207921\nassert solution.countDigitOne(177766763) == 222453821\nassert solution.countDigitOne(816187605) == 757970533\nassert solution.countDigitOne(66453813) == 56932166\nassert solution.countDigitOne(369389959) == 398695996\nassert solution.countDigitOne(174866697) == 217803738\nassert solution.countDigitOne(613106220) == 592965394\nassert solution.countDigitOne(694353574) == 656682118\nassert solution.countDigitOne(78329874) == 65071978\nassert solution.countDigitOne(713305504) == 673358206\nassert solution.countDigitOne(522121371) == 526290222\nassert solution.countDigitOne(236621797) == 296019358\nassert solution.countDigitOne(281150922) == 326882139\nassert solution.countDigitOne(111840892) == 102648959\nassert solution.countDigitOne(113188559) == 106361296\nassert solution.countDigitOne(131000961) == 142602221\nassert solution.countDigitOne(710308009) == 667561411\nassert solution.countDigitOne(116430345) == 114782867\nassert solution.countDigitOne(413452542) == 433584358\nassert solution.countDigitOne(56557910) == 49983382\nassert solution.countDigitOne(584093042) == 569447915\nassert solution.countDigitOne(224779583) == 287891919\nassert solution.countDigitOne(723788220) == 687295552\nassert solution.countDigitOne(97461033) == 78534348\nassert solution.countDigitOne(147556745) == 171139801\nassert solution.countDigitOne(154597349) == 183396625\nassert solution.countDigitOne(23021540) == 26819055\nassert solution.countDigitOne(418030058) == 440852075\nassert solution.countDigitOne(537535072) == 536574518\nassert solution.countDigitOne(943365380) == 861086678\nassert solution.countDigitOne(900312121) == 820257777\nassert solution.countDigitOne(144722013) == 166591620\nassert solution.countDigitOne(904100452) == 823450649\nassert solution.countDigitOne(967800329) == 877700173\nassert solution.countDigitOne(358612728) == 391208582\nassert solution.countDigitOne(969481739) == 878743294\nassert solution.countDigitOne(391198137) == 413995748\nassert solution.countDigitOne(650959733) == 625583954\nassert solution.countDigitOne(30278376) == 31241578\nassert solution.countDigitOne(476785419) == 484094692\nassert solution.countDigitOne(371016541) == 399630099\nassert solution.countDigitOne(849747492) == 784879300\nassert solution.countDigitOne(93569967) == 76187997\nassert solution.countDigitOne(909356676) == 826683038\nassert solution.countDigitOne(718886126) == 682230987\nassert solution.countDigitOne(24923272) == 27970058\nassert solution.countDigitOne(951611215) == 866617096\nassert solution.countDigitOne(89345213) == 72678646\nassert solution.countDigitOne(218276316) == 281317286\nassert solution.countDigitOne(213091453) == 272938404\nassert solution.countDigitOne(507987363) == 505795277\nassert solution.countDigitOne(742675677) == 700640738\nassert solution.countDigitOne(156384921) == 186279415\nassert solution.countDigitOne(180732893) == 227206774\nassert solution.countDigitOne(857392987) == 790497899\nassert solution.countDigitOne(275302588) == 323251819\nassert solution.countDigitOne(498278166) == 499041504\nassert solution.countDigitOne(67974408) == 57790381\nassert solution.countDigitOne(964388201) == 875695541\nassert solution.countDigitOne(692533930) == 655574193\nassert solution.countDigitOne(824656694) == 767833040\nassert solution.countDigitOne(485708045) == 490453415\nassert solution.countDigitOne(758044363) == 710828377\nassert solution.countDigitOne(393952181) == 416381721\nassert solution.countDigitOne(690772234) == 653489754\nassert solution.countDigitOne(915056955) == 836090052\nassert solution.countDigitOne(569396407) == 558698981\nassert solution.countDigitOne(721727711) == 685799056\nassert solution.countDigitOne(344366122) == 381686856\nassert solution.countDigitOne(755083119) == 709043952\nassert solution.countDigitOne(667707010) == 637653102\nassert solution.countDigitOne(23030079) == 26822018\nassert solution.countDigitOne(91840492) == 74966693\nassert solution.countDigitOne(410819974) == 428337948\nassert solution.countDigitOne(601053683) == 580685823\nassert solution.countDigitOne(682724748) == 648670455\nassert solution.countDigitOne(281734177) == 327808494\nassert solution.countDigitOne(901260570) == 821094788\nassert solution.countDigitOne(287942547) == 331777815\nassert solution.countDigitOne(998038646) == 898825635\nassert solution.countDigitOne(103010117) == 85814284\nassert solution.countDigitOne(602628696) == 582621640\nassert solution.countDigitOne(868396934) == 798099094\nassert solution.countDigitOne(24051803) == 27431365\nassert solution.countDigitOne(633209435) == 614003894\nassert solution.countDigitOne(893124331) == 815894706\nassert solution.countDigitOne(503264717) == 503036450\nassert solution.countDigitOne(924967692) == 847987340\nassert solution.countDigitOne(900324800) == 820270460\nassert solution.countDigitOne(68644952) == 58228496\nassert solution.countDigitOne(557694595) == 550648420\nassert solution.countDigitOne(89860706) == 72934241\nassert solution.countDigitOne(426874911) == 449140484\nassert solution.countDigitOne(349535438) == 384774694\nassert solution.countDigitOne(734598031) == 694799414",
  "inefficient_solution": "class Solution:\n    def countDigitOne(self, n: int) -> int:\n        if n == 0:\n            return 0\n\n        max_digits = self.get_max_digits(n)\n        result = []\n        for i in range(max_digits + 1):\n            result.append([0] * i)\n\n        self.fill_result(result, n)\n        return sum(sum(row) for row in result)\n\n    def get_max_digits(self, n: int) -> int:\n        count = 0\n        while n:\n            n //= 10\n            count += 1\n        return count\n\n    def fill_result(self, result, n: int):\n        for i in range(len(result)):\n            row = result[i]\n            for j in range(len(row)):\n                if i == 0 and j == 0:\n                    row[j] = 1\n                else:\n                    row[j] = self.count_digit_1(n)\n                    n -= 1\n                if n == 0:\n                    break\n                if n % 10 == 1:\n                    row[j] += 1\n                    n -= 1\n                n //= 10\n            if n == 0:\n                break\n\n    def count_digit_1(self, n: int) -> int:\n        count = 0\n        while n:\n            count += n % 10\n            n //= 10\n        return count",
  "is_python": true
}