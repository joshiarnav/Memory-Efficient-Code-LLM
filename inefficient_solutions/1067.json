{
  "problem_idx": 1067,
  "task_name": "Digit Count in Range",
  "markdown_description": "\nGiven a single-digit integer `d` and two integers `low` and `high`, return *the number of times that* `d` *occurs as a digit in all integers in the inclusive range* `[low, high]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** d = 1, low = 1, high = 13\n**Output:** 6\n**Explanation:** The digit d = 1 occurs 6 times in 1, 10, 11, 12, 13.\nNote that the digit d = 1 occurs twice in the number 11.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** d = 3, low = 100, high = 250\n**Output:** 35\n**Explanation:** The digit d = 3 occurs 35 times in 103,113,123,130,131,...,238,239,243.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= d <= 9`\n* `1 <= low <= high <= 2 * 108`\n\n\n",
  "canonical_solution": "class Solution:\n    def digitsCount(self, d: int, low: int, high: int) -> int:\n        return self.f(high, d) - self.f(low - 1, d)\n\n    def f(self, n, d):\n        @cache\n        def dfs(pos, cnt, lead, limit):\n            if pos <= 0:\n                return cnt\n            up = a[pos] if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if i == 0 and lead:\n                    ans += dfs(pos - 1, cnt, lead, limit and i == up)\n                else:\n                    ans += dfs(pos - 1, cnt + (i == d), False, limit and i == up)\n            return ans\n\n        a = [0] * 11\n        l = 0\n        while n:\n            l += 1\n            a[l] = n % 10\n            n //= 10\n        return dfs(l, 0, True, True)\n",
  "test_case_generator": "\nclass Solution:\n    def digitsCount(self, d: int, low: int, high: int) -> int:\n        return self.f(high, d) - self.f(low - 1, d)\n\n    def f(self, n, d):\n        @cache\n        def dfs(pos, cnt, lead, limit):\n            if pos <= 0:\n                return cnt\n            up = a[pos] if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if i == 0 and lead:\n                    ans += dfs(pos - 1, cnt, lead, limit and i == up)\n                else:\n                    ans += dfs(pos - 1, cnt + (i == d), False, limit and i == up)\n            return ans\n\n        a = [0] * 11\n        l = 0\n        while n:\n            l += 1\n            a[l] = n % 10\n            n //= 10\n        return dfs(l, 0, True, True)\n\ndef generate_test_case():\n    solution = Solution()\n    d = random.randint(0, 9)\n    low = random.randint(1, 200000000)\n    high = random.randint(low, 2 * (10 ** 8))\n    expected_result = solution.digitsCount(d, low, high)\n    return d, low, high, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        d, low, high, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.digitsCount(d, low, high) == expected_result\n        print(f\"assert solution.digitsCount({d}, {low}, {high}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.digitsCount({d}, {low}, {high}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 \n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.digitsCount(1, 116145497, 139541914) == 43304226\nassert solution.digitsCount(6, 75443451, 79275377) == 3322593\nassert solution.digitsCount(0, 69522195, 159517948) == 72997655\nassert solution.digitsCount(2, 158535340, 197882653) == 27568816\nassert solution.digitsCount(3, 118453897, 127631124) == 6481371\nassert solution.digitsCount(0, 125987025, 172990951) == 33202110\nassert solution.digitsCount(1, 113738249, 115747451) == 5222147\nassert solution.digitsCount(0, 148934646, 186357739) == 26508919\nassert solution.digitsCount(9, 86872404, 194661287) == 90356956\nassert solution.digitsCount(5, 154119222, 197151815) == 36695414\nassert solution.digitsCount(7, 48018297, 134172278) == 69673477\nassert solution.digitsCount(1, 115794407, 174908306) == 104774673\nassert solution.digitsCount(7, 139223837, 172353979) == 25216015\nassert solution.digitsCount(0, 25575128, 158633445) == 102833462\nassert solution.digitsCount(6, 124431114, 184832871) == 52300556\nassert solution.digitsCount(6, 69677496, 193702859) == 96754675\nassert solution.digitsCount(2, 5863869, 140558565) == 113847440\nassert solution.digitsCount(8, 92689492, 193838838) == 80708990\nassert solution.digitsCount(6, 114241622, 119582541) == 4176260\nassert solution.digitsCount(0, 153239645, 198572888) == 31163944\nassert solution.digitsCount(0, 151414378, 164260748) == 8718626\nassert solution.digitsCount(0, 140583477, 157043117) == 11293575\nassert solution.digitsCount(4, 157507915, 191939753) == 23612573\nassert solution.digitsCount(8, 55998440, 114256546) == 50922980\nassert solution.digitsCount(7, 176136819, 183825498) == 9508719\nassert solution.digitsCount(0, 88774930, 93760974) == 3994780\nassert solution.digitsCount(9, 187730680, 194933557) == 10267993\nassert solution.digitsCount(9, 166863041, 169343810) == 1885968\nassert solution.digitsCount(3, 166605774, 199551292) == 22777601\nassert solution.digitsCount(3, 110081236, 112232758) == 1273265\nassert solution.digitsCount(5, 30326434, 191153135) == 132513177\nassert solution.digitsCount(9, 115826492, 130123172) == 10649036\nassert solution.digitsCount(3, 77055092, 122163603) == 31053206\nassert solution.digitsCount(8, 27590420, 158529846) == 102095676\nassert solution.digitsCount(4, 27021686, 115095350) == 71840036\nassert solution.digitsCount(4, 80033228, 152430836) == 60430158\nassert solution.digitsCount(7, 116311768, 199327803) == 68806649\nassert solution.digitsCount(1, 90173340, 143462439) == 91434820\nassert solution.digitsCount(3, 37288952, 93413297) == 41883909\nassert solution.digitsCount(5, 13186207, 62282183) == 44447797\nassert solution.digitsCount(2, 24765003, 42709414) == 17711793\nassert solution.digitsCount(5, 2815045, 45943980) == 30805630\nassert solution.digitsCount(9, 17607270, 175481695) == 120730288\nassert solution.digitsCount(4, 143129565, 167136719) == 24273560\nassert solution.digitsCount(1, 79886465, 117265146) == 51021879\nassert solution.digitsCount(7, 109850833, 165325286) == 38239295\nassert solution.digitsCount(6, 122057268, 140522195) == 13035484\nassert solution.digitsCount(2, 22439030, 103712935) == 64852057\nassert solution.digitsCount(0, 104271830, 120856877) == 17478553\nassert solution.digitsCount(2, 176145164, 193879699) == 12663403\nassert solution.digitsCount(2, 180985337, 185084697) == 3449766\nassert solution.digitsCount(2, 163965303, 166255641) == 1401715\nassert solution.digitsCount(5, 195875447, 197026594) == 795535\nassert solution.digitsCount(6, 16873975, 122898695) == 83736463\nassert solution.digitsCount(5, 149243428, 199980353) == 45475086\nassert solution.digitsCount(4, 67793643, 122107779) == 37556231\nassert solution.digitsCount(4, 98894771, 195993938) == 78248956\nassert solution.digitsCount(6, 99474076, 144988240) == 31356227\nassert solution.digitsCount(8, 157109408, 182320978) == 20425487\nassert solution.digitsCount(2, 165429061, 180268713) == 9885579\nassert solution.digitsCount(7, 81901567, 160031438) == 54861978\nassert solution.digitsCount(0, 89568387, 152692792) == 54860281\nassert solution.digitsCount(0, 61758288, 186707693) == 96977475\nassert solution.digitsCount(7, 9289816, 57326284) == 33140182\nassert solution.digitsCount(1, 13378735, 189885036) == 229359162\nassert solution.digitsCount(9, 134435218, 185494195) == 35627890\nassert solution.digitsCount(4, 146999806, 175389023) == 22995935\nassert solution.digitsCount(8, 25155078, 115133226) == 72991435\nassert solution.digitsCount(6, 48381630, 127634935) == 65555966\nassert solution.digitsCount(9, 112056132, 197266824) == 66370964\nassert solution.digitsCount(9, 39757903, 166664363) == 98395080\nassert solution.digitsCount(1, 154361780, 188250973) == 57234154\nassert solution.digitsCount(2, 89062413, 170931562) == 67137322\nassert solution.digitsCount(4, 81904280, 198574892) == 92038834\nassert solution.digitsCount(9, 91106887, 99543906) == 13996046\nassert solution.digitsCount(6, 10081816, 82675625) == 60572713\nassert solution.digitsCount(0, 12666359, 171260205) == 121197377\nassert solution.digitsCount(6, 110233245, 137281284) == 19229414\nassert solution.digitsCount(9, 38702168, 103630003) == 55961374\nassert solution.digitsCount(8, 29904522, 102973347) == 60827662\nassert solution.digitsCount(1, 194244019, 196065239) == 2829664\nassert solution.digitsCount(6, 135817260, 178138162) == 40358283\nassert solution.digitsCount(2, 87712764, 117662809) == 20980050\nassert solution.digitsCount(9, 37021859, 56655673) == 13713162\nassert solution.digitsCount(9, 182835059, 193051209) == 10258046\nassert solution.digitsCount(6, 89452971, 178718605) == 72636629\nassert solution.digitsCount(1, 65045689, 70620950) == 3389556\nassert solution.digitsCount(0, 182066594, 198097456) == 10643139\nassert solution.digitsCount(2, 137546104, 168154455) == 21303575\nassert solution.digitsCount(2, 87253331, 173035827) == 70439367\nassert solution.digitsCount(1, 146603652, 184056246) == 63883414\nassert solution.digitsCount(9, 22936281, 127448503) == 82718371\nassert solution.digitsCount(2, 153049364, 161926462) == 5337583\nassert solution.digitsCount(5, 72671474, 168547174) == 77477915\nassert solution.digitsCount(5, 135611713, 153597631) == 15778333\nassert solution.digitsCount(8, 143233290, 143301771) == 37488\nassert solution.digitsCount(4, 162013124, 177907630) == 11548401\nassert solution.digitsCount(3, 141125457, 199826900) == 41250384\nassert solution.digitsCount(3, 182082600, 193933536) == 9057902\nassert solution.digitsCount(8, 72454066, 186330967) == 95672048",
  "inefficient_solution": "class Solution:\n    def digitsCount(self, d: int, low: int, high: int) -> int:\n        def generate_numbers(n):\n            if n == 0:\n                return [\"0\"]\n            else:\n                prev = generate_numbers(n-1)\n                return [str(i) + j for i in range(10) for j in prev]\n\n        def dfs(num, d):\n            if num < 10:\n                return 1 if num == d else 0\n            else:\n                count = 0\n                for i in str(num):\n                    count += dfs(int(i), d)\n                return count\n\n        numbers = generate_numbers(8)\n        total_count = 0\n        for num in numbers:\n            nums = int(num)\n            if low <= nums <= high:\n                total_count += dfs(nums, d)\n\n        return total_count",
  "is_python": true
}