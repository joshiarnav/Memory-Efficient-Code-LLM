{
  "problem_idx": 1649,
  "task_name": "Create Sorted Array through Instructions",
  "markdown_description": "\nGiven an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. You start with an empty container `nums`. For each element from **left to right** in `instructions`, insert it into `nums`. The **cost** of each insertion is the **minimum** of the following:\n\n\n* The number of elements currently in `nums` that are **strictly less than** `instructions[i]`.\n* The number of elements currently in `nums` that are **strictly greater than** `instructions[i]`.\n\n\nFor example, if inserting element `3` into `nums = [1,2,3,5]`, the **cost** of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`.\n\n\nReturn *the **total cost** to insert all elements from* `instructions` *into* `nums`. Since the answer may be large, return it **modulo** `109 + 7`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** instructions = [1,5,6,2]\n**Output:** 1\n**Explanation:** Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 5 with cost min(1, 0) = 0, now nums = [1,5].\nInsert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\nInsert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\nThe total cost is 0 + 0 + 0 + 1 = 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** instructions = [1,2,3,6,5,4]\n**Output:** 3\n**Explanation:** Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 2 with cost min(1, 0) = 0, now nums = [1,2].\nInsert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\nInsert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\nInsert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\nInsert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** instructions = [1,3,3,3,2,4,2,1,2]\n**Output:** 4\n**Explanation:** Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\nInsert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\nInsert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= instructions.length <= 105`\n* `1 <= instructions[i] <= 105`\n\n\n",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] += v\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        m = max(instructions)\n        tree = BinaryIndexedTree(m)\n        ans = 0\n        mod = 10**9 + 7\n        for i, x in enumerate(instructions):\n            cost = min(tree.query(x - 1), i - tree.query(x))\n            ans += cost\n            tree.update(x, 1)\n        return ans % mod\n",
  "test_case_generator": "\n\nimport random\n\nclass BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    def update(self, x: int, v: int):\n        while x <= self.n:\n            self.c[x] += v\n            x += x & -x\n\n    def query(self, x: int) -> int:\n        s = 0\n        while x:\n            s += self.c[x]\n            x -= x & -x\n        return s\n\n\nclass Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        m = max(instructions)\n        tree = BinaryIndexedTree(m)\n        ans = 0\n        mod = 10**9 + 7\n        for i, x in enumerate(instructions):\n            cost = min(tree.query(x - 1), i - tree.query(x))\n            ans += cost\n            tree.update(x, 1)\n        return ans % mod\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random test case\n    instructions = random.sample(range(1, 101), random.randint(1, 10))\n\n    # Calculate the expected result\n    expected_result = solution.createSortedArray(instructions)\n\n    return instructions, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        instructions, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.createSortedArray(instructions) == expected_result\n        print(f\"assert solution.createSortedArray({instructions}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.createSortedArray({instructions}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.createSortedArray([49, 25, 24, 79, 67, 4, 91, 21, 37, 84]) == 7\nassert solution.createSortedArray([50, 100, 20, 72, 55, 68, 12, 16]) == 6\nassert solution.createSortedArray([94, 51]) == 0\nassert solution.createSortedArray([74, 93, 24, 14, 91, 25, 18, 61]) == 7\nassert solution.createSortedArray([40, 61]) == 0\nassert solution.createSortedArray([39, 92, 41, 62, 21, 31, 89]) == 4\nassert solution.createSortedArray([35, 22, 4]) == 0\nassert solution.createSortedArray([88, 44, 85, 93, 63]) == 2\nassert solution.createSortedArray([79, 47, 49, 48]) == 2\nassert solution.createSortedArray([55, 41, 37, 85]) == 0\nassert solution.createSortedArray([83, 20, 25, 84, 46, 21]) == 4\nassert solution.createSortedArray([27]) == 0\nassert solution.createSortedArray([43, 93, 3, 81, 20, 5, 6, 98, 56, 35]) == 12\nassert solution.createSortedArray([36, 66, 75, 1, 41]) == 2\nassert solution.createSortedArray([26, 39, 71, 72, 45, 60, 35, 55, 75, 32]) == 9\nassert solution.createSortedArray([32]) == 0\nassert solution.createSortedArray([19, 67, 71, 96]) == 0\nassert solution.createSortedArray([23, 1, 98]) == 0\nassert solution.createSortedArray([79, 68, 73, 16, 71, 84, 32, 19]) == 5\nassert solution.createSortedArray([29, 97]) == 0\nassert solution.createSortedArray([97, 74, 32, 2, 90, 62]) == 3\nassert solution.createSortedArray([45, 35, 21, 68, 24, 6, 50, 13]) == 3\nassert solution.createSortedArray([32, 25, 26]) == 1\nassert solution.createSortedArray([44, 28]) == 0\nassert solution.createSortedArray([83, 93, 85, 6, 77, 3, 28]) == 4\nassert solution.createSortedArray([8, 97, 58, 5, 38, 65, 17, 12, 19, 77]) == 13\nassert solution.createSortedArray([26, 57, 2, 50, 85]) == 1\nassert solution.createSortedArray([51, 75, 79, 24, 19, 17]) == 0\nassert solution.createSortedArray([57, 70, 78, 74, 17, 21, 40, 31, 16, 89]) == 6\nassert solution.createSortedArray([92, 85]) == 0\nassert solution.createSortedArray([45, 100, 93, 43, 20, 31, 8, 7]) == 2\nassert solution.createSortedArray([9, 50, 79]) == 0\nassert solution.createSortedArray([70, 96, 91, 77, 17, 57, 51, 62]) == 7\nassert solution.createSortedArray([84, 28, 25, 69, 64]) == 3\nassert solution.createSortedArray([100, 35, 83, 63]) == 2\nassert solution.createSortedArray([83, 12, 11, 86, 28, 18, 82]) == 6\nassert solution.createSortedArray([53, 59, 68, 88, 99]) == 0\nassert solution.createSortedArray([100, 39, 85, 71, 28, 5, 87, 27, 67, 32]) == 11\nassert solution.createSortedArray([44, 18, 11, 84]) == 0\nassert solution.createSortedArray([96, 59, 98, 76, 93, 83, 24, 21, 66, 84]) == 11\nassert solution.createSortedArray([2, 19]) == 0\nassert solution.createSortedArray([40, 81, 47, 7, 26, 64, 24, 6, 89, 94]) == 4\nassert solution.createSortedArray([35, 26, 9, 66]) == 0\nassert solution.createSortedArray([62, 83, 57, 35, 67, 12, 98, 6, 73, 54]) == 6\nassert solution.createSortedArray([60, 91, 1, 76, 49, 40, 64]) == 5\nassert solution.createSortedArray([90, 2, 72, 6, 86, 56, 18]) == 7\nassert solution.createSortedArray([41, 18, 95, 84, 13, 98, 56, 9, 55, 23]) == 11\nassert solution.createSortedArray([70, 2, 57, 40]) == 2\nassert solution.createSortedArray([44, 2, 12, 42]) == 2\nassert solution.createSortedArray([39, 75, 66, 69, 97, 70]) == 4\nassert solution.createSortedArray([48]) == 0\nassert solution.createSortedArray([36, 65, 23, 77, 40]) == 2\nassert solution.createSortedArray([83, 77, 36, 43]) == 1\nassert solution.createSortedArray([98, 37, 73, 96, 68, 52]) == 4\nassert solution.createSortedArray([2, 6, 99, 47, 51, 12]) == 4\nassert solution.createSortedArray([36]) == 0\nassert solution.createSortedArray([35, 23, 71, 60]) == 1\nassert solution.createSortedArray([55, 35, 71]) == 0\nassert solution.createSortedArray([32, 45, 12, 17, 22, 31, 90, 28, 63, 67]) == 10\nassert solution.createSortedArray([62, 63]) == 0\nassert solution.createSortedArray([100, 79, 71]) == 0\nassert solution.createSortedArray([32, 23, 59, 66, 98, 71, 77, 24]) == 3\nassert solution.createSortedArray([55, 27]) == 0\nassert solution.createSortedArray([32, 88]) == 0\nassert solution.createSortedArray([23, 82, 79, 48, 42, 77, 94]) == 5\nassert solution.createSortedArray([11, 13, 83, 90, 56, 44, 5]) == 4\nassert solution.createSortedArray([77, 84, 4, 28]) == 1\nassert solution.createSortedArray([13, 100, 58, 53, 55, 15, 41, 23, 19, 22]) == 14\nassert solution.createSortedArray([66, 5, 50, 9]) == 2\nassert solution.createSortedArray([54, 35]) == 0\nassert solution.createSortedArray([72]) == 0\nassert solution.createSortedArray([98, 27, 83, 2, 38, 39, 12, 46, 69]) == 10\nassert solution.createSortedArray([58]) == 0\nassert solution.createSortedArray([94, 42, 51, 82, 20, 2, 89, 37, 28, 38]) == 11\nassert solution.createSortedArray([14, 72, 6, 20, 8, 98]) == 2\nassert solution.createSortedArray([18, 9, 42, 54]) == 0\nassert solution.createSortedArray([84]) == 0\nassert solution.createSortedArray([20, 76, 1, 16, 8, 71]) == 3\nassert solution.createSortedArray([89, 52, 100, 14]) == 0\nassert solution.createSortedArray([44, 24, 36, 74, 76, 85, 89]) == 1\nassert solution.createSortedArray([78, 56, 22]) == 0\nassert solution.createSortedArray([96, 35, 84, 5, 15, 49, 17]) == 6\nassert solution.createSortedArray([71, 81, 57, 56, 22]) == 0\nassert solution.createSortedArray([72, 81, 96, 75, 67, 16]) == 1\nassert solution.createSortedArray([45]) == 0\nassert solution.createSortedArray([28, 30, 35]) == 0\nassert solution.createSortedArray([14, 94, 85]) == 1\nassert solution.createSortedArray([26, 60, 70, 11, 10, 84, 2, 16, 48, 83]) == 7\nassert solution.createSortedArray([24]) == 0\nassert solution.createSortedArray([24]) == 0\nassert solution.createSortedArray([26, 73, 13, 44, 81, 32, 91, 25, 64, 94]) == 7\nassert solution.createSortedArray([94, 83, 59, 27, 85]) == 1\nassert solution.createSortedArray([85, 53, 43, 30, 71, 75]) == 2\nassert solution.createSortedArray([19, 86, 84]) == 1\nassert solution.createSortedArray([20, 74, 29, 87, 7, 81, 46, 80]) == 7\nassert solution.createSortedArray([58, 18, 6, 86, 85, 11, 43, 50, 37, 96]) == 11\nassert solution.createSortedArray([66, 64, 53]) == 0\nassert solution.createSortedArray([71, 38]) == 0\nassert solution.createSortedArray([66, 27, 43, 34, 92, 87, 50, 7]) == 6\nassert solution.createSortedArray([18, 23, 97, 43, 48, 44, 47, 59, 52]) == 9",
  "inefficient_solution": "class Solution:\n    def createSortedArray(self, instructions: List[int]) -> int:\n        total = 0\n        mod = 10**9 + 7\n        nums = []\n        nums_set = set()\n        \n        for x in instructions:\n            nums.append(x)\n            sorted_nums = sorted(nums)\n            temp = []\n            for y in sorted_nums:\n                if y not in nums_set:\n                    temp.append(y)\n                    nums_set.add(y)\n            nums = temp\n            \n            i = 0\n            while i < len(nums) and nums[i] < x:\n                i += 1\n            j = len(nums) - 1\n            while j >= 0 and nums[j] > x:\n                j -= 1\n            cost = min(i, len(nums) - j - 1)\n            total += cost\n            \n        return total % mod",
  "is_python": true
}