{
  "problem_idx": 2367,
  "task_name": "Number of Arithmetic Triplets",
  "markdown_description": "\nYou are given a **0-indexed**, **strictly increasing** integer array `nums` and a positive integer `diff`. A triplet `(i, j, k)` is an **arithmetic triplet** if the following conditions are met:\n\n\n* `i < j < k`,\n* `nums[j] - nums[i] == diff`, and\n* `nums[k] - nums[j] == diff`.\n\n\nReturn *the number of unique **arithmetic triplets**.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [0,1,4,6,7,10], diff = 3\n**Output:** 2\n**Explanation:**\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,5,6,7,8,9], diff = 2\n**Output:** 2\n**Explanation:**\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= nums.length <= 200`\n* `0 <= nums[i] <= 200`\n* `1 <= diff <= 50`\n* `nums` is **strictly** increasing.\n\n\n",
  "canonical_solution": "class Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n        vis = set(nums)\n        return sum(x + diff in vis and x + diff * 2 in vis for x in nums)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n        vis = set(nums)\n        return sum(x + diff in vis and x + diff * 2 in vis for x in nums)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random integer array\n    nums = sorted(random.sample(range(201), random.randint(3, 10)))\n    \n    # Generate a random difference\n    diff = random.randint(1, 51)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.arithmeticTriplets(nums, diff)\n\n    return nums, diff, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, diff, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.arithmeticTriplets(nums, diff) == expected_result\n        print(f\"assert solution.arithmeticTriplets({nums}, {diff}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.arithmeticTriplets({nums}, {diff}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.arithmeticTriplets([12, 43, 47, 124, 142, 163, 179, 183], 4) == 0\nassert solution.arithmeticTriplets([39, 40, 52, 155, 176], 3) == 0\nassert solution.arithmeticTriplets([31, 96, 130], 16) == 0\nassert solution.arithmeticTriplets([11, 40, 42, 90, 117, 128, 171], 39) == 0\nassert solution.arithmeticTriplets([0, 63, 147, 174, 176, 186], 2) == 0\nassert solution.arithmeticTriplets([26, 64, 166, 169, 190], 41) == 0\nassert solution.arithmeticTriplets([28, 31, 58, 97, 155], 40) == 0\nassert solution.arithmeticTriplets([64, 118, 129, 131, 159, 180, 194], 21) == 0\nassert solution.arithmeticTriplets([1, 47, 52, 59, 100, 112, 132, 192], 45) == 0\nassert solution.arithmeticTriplets([8, 20, 70, 86, 114, 151, 172, 176], 43) == 0\nassert solution.arithmeticTriplets([37, 51, 56, 90, 114, 122, 144, 183], 50) == 0\nassert solution.arithmeticTriplets([0, 7, 109, 112, 125, 179, 181, 199], 46) == 0\nassert solution.arithmeticTriplets([25, 54, 76, 98, 122, 124, 130, 135, 182, 183], 27) == 0\nassert solution.arithmeticTriplets([51, 93, 99, 147, 167], 25) == 0\nassert solution.arithmeticTriplets([6, 68, 107, 144, 175, 180], 29) == 0\nassert solution.arithmeticTriplets([12, 45, 54, 68, 75, 96, 105, 146, 171, 200], 10) == 0\nassert solution.arithmeticTriplets([8, 58, 76, 88, 94, 98, 125, 158, 174, 200], 25) == 0\nassert solution.arithmeticTriplets([25, 36, 68, 96, 101, 120, 157, 173], 41) == 0\nassert solution.arithmeticTriplets([17, 23, 53, 129, 142], 45) == 0\nassert solution.arithmeticTriplets([41, 44, 71, 103, 150, 155, 172], 5) == 0\nassert solution.arithmeticTriplets([61, 70, 105, 112, 146], 41) == 0\nassert solution.arithmeticTriplets([16, 25, 40, 41, 60, 95, 121, 171, 185], 11) == 0\nassert solution.arithmeticTriplets([2, 75, 109, 124, 129, 133, 135, 143, 147, 172], 28) == 0\nassert solution.arithmeticTriplets([21, 29, 52, 64, 84, 89, 132, 164, 170, 185], 11) == 0\nassert solution.arithmeticTriplets([25, 62, 119, 129, 130, 143, 158, 181, 197], 25) == 0\nassert solution.arithmeticTriplets([50, 56, 59, 74, 92, 115, 157, 162, 186], 49) == 0\nassert solution.arithmeticTriplets([43, 63, 64, 94, 132, 133, 141, 163], 16) == 0\nassert solution.arithmeticTriplets([29, 39, 41, 60, 89, 118, 121, 146, 163, 181], 44) == 0\nassert solution.arithmeticTriplets([15, 43, 122, 129], 16) == 0\nassert solution.arithmeticTriplets([16, 90, 197], 46) == 0\nassert solution.arithmeticTriplets([2, 4, 39, 44, 46, 109, 145, 146], 3) == 0\nassert solution.arithmeticTriplets([41, 70, 110, 133, 145, 146, 178, 186], 26) == 0\nassert solution.arithmeticTriplets([80, 94, 139, 145, 163, 180, 198], 50) == 0\nassert solution.arithmeticTriplets([82, 87, 119, 125, 159, 191], 34) == 0\nassert solution.arithmeticTriplets([31, 114, 123], 20) == 0\nassert solution.arithmeticTriplets([41, 71, 166], 28) == 0\nassert solution.arithmeticTriplets([3, 134, 183, 193], 5) == 0\nassert solution.arithmeticTriplets([90, 132, 135, 136], 38) == 0\nassert solution.arithmeticTriplets([8, 53, 61, 70, 98, 170, 177], 32) == 0\nassert solution.arithmeticTriplets([6, 41, 83, 84, 133, 145, 147, 178], 51) == 0\nassert solution.arithmeticTriplets([34, 81, 99, 103, 133, 173], 19) == 0\nassert solution.arithmeticTriplets([68, 73, 124], 1) == 0\nassert solution.arithmeticTriplets([66, 74, 122, 156, 162, 185], 33) == 0\nassert solution.arithmeticTriplets([37, 127, 140, 160, 163, 173], 23) == 0\nassert solution.arithmeticTriplets([39, 52, 66, 166, 195], 44) == 0\nassert solution.arithmeticTriplets([29, 43, 193], 28) == 0\nassert solution.arithmeticTriplets([37, 41, 55, 80, 84, 137, 149], 12) == 0\nassert solution.arithmeticTriplets([104, 174, 194], 35) == 0\nassert solution.arithmeticTriplets([74, 83, 200], 12) == 0\nassert solution.arithmeticTriplets([62, 68, 97, 130, 139, 197, 200], 1) == 0\nassert solution.arithmeticTriplets([17, 51, 52, 67, 141], 31) == 0\nassert solution.arithmeticTriplets([28, 98, 105, 116, 119, 122, 134, 147, 157, 185], 39) == 0\nassert solution.arithmeticTriplets([18, 46, 144], 14) == 0\nassert solution.arithmeticTriplets([10, 18, 45, 88, 115, 123, 189, 199], 15) == 0\nassert solution.arithmeticTriplets([31, 32, 109, 124, 134, 154, 158], 9) == 0\nassert solution.arithmeticTriplets([0, 11, 200], 31) == 0\nassert solution.arithmeticTriplets([67, 143, 159], 36) == 0\nassert solution.arithmeticTriplets([11, 15, 30, 70, 78, 82, 91, 131], 48) == 0\nassert solution.arithmeticTriplets([42, 44, 50], 24) == 0\nassert solution.arithmeticTriplets([24, 88, 100, 147, 153, 161, 176, 186], 27) == 0\nassert solution.arithmeticTriplets([14, 15, 31, 60, 64, 130, 160], 36) == 0\nassert solution.arithmeticTriplets([30, 50, 157, 194], 37) == 0\nassert solution.arithmeticTriplets([23, 50, 83, 113, 129, 155, 162, 187], 20) == 0\nassert solution.arithmeticTriplets([24, 54, 60, 84, 102, 137, 165, 173], 36) == 0\nassert solution.arithmeticTriplets([28, 78, 100, 120, 128, 152, 163, 173, 183], 32) == 0\nassert solution.arithmeticTriplets([1, 14, 40, 129, 131, 192], 40) == 0\nassert solution.arithmeticTriplets([11, 12, 79, 97, 122, 135, 145, 200], 29) == 0\nassert solution.arithmeticTriplets([11, 36, 45, 86, 91, 125, 153], 48) == 0\nassert solution.arithmeticTriplets([72, 83, 157, 181, 189, 200], 4) == 0\nassert solution.arithmeticTriplets([8, 69, 87], 8) == 0\nassert solution.arithmeticTriplets([34, 72, 131, 133, 136, 185], 41) == 0\nassert solution.arithmeticTriplets([21, 83, 89, 100, 107], 13) == 0\nassert solution.arithmeticTriplets([41, 71, 152, 199], 40) == 0\nassert solution.arithmeticTriplets([23, 89, 139, 145, 190], 15) == 0\nassert solution.arithmeticTriplets([4, 5, 62, 71, 77, 126, 190], 33) == 0\nassert solution.arithmeticTriplets([3, 8, 29, 30, 86, 150, 155, 186, 192, 199], 35) == 0\nassert solution.arithmeticTriplets([12, 17, 19, 95, 110, 117, 130], 15) == 0\nassert solution.arithmeticTriplets([13, 19, 98], 4) == 0\nassert solution.arithmeticTriplets([35, 49, 50, 61, 78, 100, 196], 14) == 0\nassert solution.arithmeticTriplets([11, 21, 40, 63, 90, 97, 120, 136, 139, 162], 42) == 0\nassert solution.arithmeticTriplets([79, 91, 93], 51) == 0\nassert solution.arithmeticTriplets([74, 80, 105, 113, 139], 21) == 0\nassert solution.arithmeticTriplets([4, 43, 109, 123], 42) == 0\nassert solution.arithmeticTriplets([10, 49, 195], 11) == 0\nassert solution.arithmeticTriplets([43, 63, 98, 109, 151], 6) == 0\nassert solution.arithmeticTriplets([45, 54, 94, 96, 122, 175, 188], 8) == 0\nassert solution.arithmeticTriplets([4, 9, 41, 46, 48, 95, 97, 193], 17) == 0\nassert solution.arithmeticTriplets([40, 43, 49, 60, 81, 132, 193], 32) == 0\nassert solution.arithmeticTriplets([18, 56, 78, 99, 106, 146, 147, 150, 165], 46) == 0\nassert solution.arithmeticTriplets([11, 31, 87, 90, 169, 171, 172, 174, 181, 182], 32) == 0\nassert solution.arithmeticTriplets([51, 71, 93], 15) == 0\nassert solution.arithmeticTriplets([17, 23, 36, 133, 136, 138, 150, 172, 195], 19) == 0\nassert solution.arithmeticTriplets([48, 58, 113, 167, 187, 188], 22) == 0\nassert solution.arithmeticTriplets([100, 160, 182], 5) == 0\nassert solution.arithmeticTriplets([15, 44, 74, 143, 148, 183], 32) == 0\nassert solution.arithmeticTriplets([45, 77, 85, 118, 122, 123, 179, 190], 13) == 0\nassert solution.arithmeticTriplets([34, 68, 98, 166], 23) == 0\nassert solution.arithmeticTriplets([10, 19, 31, 32, 42, 49, 70, 133, 139, 157], 40) == 0\nassert solution.arithmeticTriplets([20, 51, 86, 88, 99, 110, 112, 148], 7) == 0\nassert solution.arithmeticTriplets([18, 23, 52, 68, 136, 143, 177, 181, 187], 38) == 0",
  "inefficient_solution": "class Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n        mem = {n: i for i, n in enumerate(nums)}\n        triplets = set()\n        for i, x in enumerate(nums):\n            for j in range(i + 1, len(nums)):\n                if x + diff == nums[j] and nums[j] + diff in mem and mem[nums[j] + diff] > j:\n                    triplets.add((i, j, mem[nums[j] + diff]))\n        return len(triplets)",
  "is_python": true
}