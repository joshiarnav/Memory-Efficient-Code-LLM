{
  "problem_idx": 828,
  "task_name": "Count Unique Characters of All Substrings of a Given String",
  "markdown_description": "\nLet's define a function `countUniqueChars(s)` that returns the number of unique characters in\u00a0`s`.\n\n\n* For example, calling `countUniqueChars(s)` if `s = \"LEETCODE\"` then `\"L\"`, `\"T\"`, `\"C\"`, `\"O\"`, `\"D\"` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`.\n\n\nGiven a string `s`, return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. The test cases are generated such that the answer fits in a 32-bit integer.\n\n\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ABC\"\n**Output:** 10\n**Explanation:** All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvery substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ABA\"\n**Output:** 8\n**Explanation:** The same as example 1, except countUniqueChars(\"ABA\") = 1.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"LEETCODE\"\n**Output:** 92\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of uppercase English letters only.\n\n\n",
  "canonical_solution": "class Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        d = defaultdict(list)\n        for i, c in enumerate(s):\n            d[c].append(i)\n        ans = 0\n        for v in d.values():\n            v = [-1] + v + [len(s)]\n            for i in range(1, len(v) - 1):\n                ans += (v[i] - v[i - 1]) * (v[i + 1] - v[i])\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        d = defaultdict(list)\n        for i, c in enumerate(s):\n            d[c].append(i)\n        ans = 0\n        for v in d.values():\n            v = [-1] + v + [len(s)]\n            for i in range(1, len(v) - 1):\n                ans += (v[i] - v[i - 1]) * (v[i + 1] - v[i])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices(string.ascii_uppercase, k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.uniqueLetterString(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.uniqueLetterString(s) == expected_result\n        print(f\"assert solution.uniqueLetterString('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.uniqueLetterString('{s}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.uniqueLetterString('FMFLWPGNIP') == 192\nassert solution.uniqueLetterString('TKWEZ') == 35\nassert solution.uniqueLetterString('JDANVSAZG') == 147\nassert solution.uniqueLetterString('VCYICV') == 46\nassert solution.uniqueLetterString('PAMXKXK') == 58\nassert solution.uniqueLetterString('RAWVYLORF') == 161\nassert solution.uniqueLetterString('XX') == 2\nassert solution.uniqueLetterString('AEVDWUJSCA') == 218\nassert solution.uniqueLetterString('AKMTDKQM') == 102\nassert solution.uniqueLetterString('SZHTTSXIZD') == 154\nassert solution.uniqueLetterString('CFERYD') == 56\nassert solution.uniqueLetterString('TACXPJEMQ') == 165\nassert solution.uniqueLetterString('KCJSSNEF') == 88\nassert solution.uniqueLetterString('PRKJKEWPG') == 131\nassert solution.uniqueLetterString('GILGPSWRD') == 153\nassert solution.uniqueLetterString('YDDDQPGXQB') == 140\nassert solution.uniqueLetterString('UUWVPLZZOL') == 148\nassert solution.uniqueLetterString('IB') == 4\nassert solution.uniqueLetterString('ASGBTK') == 56\nassert solution.uniqueLetterString('SADAU') == 27\nassert solution.uniqueLetterString('VVMAZGFDJJ') == 184\nassert solution.uniqueLetterString('WNZ') == 10\nassert solution.uniqueLetterString('YYPZ') == 14\nassert solution.uniqueLetterString('WW') == 2\nassert solution.uniqueLetterString('BDUE') == 20\nassert solution.uniqueLetterString('ISAR') == 20\nassert solution.uniqueLetterString('VXNUDIKOM') == 165\nassert solution.uniqueLetterString('OKTFHWGWWO') == 162\nassert solution.uniqueLetterString('CCGT') == 14\nassert solution.uniqueLetterString('SN') == 4\nassert solution.uniqueLetterString('MOVUGWCIPR') == 220\nassert solution.uniqueLetterString('NMTAWQNZV') == 159\nassert solution.uniqueLetterString('GBURFPIJXF') == 210\nassert solution.uniqueLetterString('WTO') == 10\nassert solution.uniqueLetterString('GI') == 4\nassert solution.uniqueLetterString('HLWLJWS') == 56\nassert solution.uniqueLetterString('ZFBS') == 20\nassert solution.uniqueLetterString('TVLZWUEX') == 120\nassert solution.uniqueLetterString('FJJFUV') == 34\nassert solution.uniqueLetterString('GEQGHVZI') == 110\nassert solution.uniqueLetterString('EPVNH') == 35\nassert solution.uniqueLetterString('PFUAJWM') == 84\nassert solution.uniqueLetterString('SCDXCGJILD') == 190\nassert solution.uniqueLetterString('H') == 1\nassert solution.uniqueLetterString('ZT') == 4\nassert solution.uniqueLetterString('VCXKQOZ') == 84\nassert solution.uniqueLetterString('VUJPOPQE') == 96\nassert solution.uniqueLetterString('EK') == 4\nassert solution.uniqueLetterString('KQKVLBPSTB') == 192\nassert solution.uniqueLetterString('DPCS') == 20\nassert solution.uniqueLetterString('QEPBHBLW') == 96\nassert solution.uniqueLetterString('KOZ') == 10\nassert solution.uniqueLetterString('GRYKEX') == 56\nassert solution.uniqueLetterString('BTQFUWAHG') == 165\nassert solution.uniqueLetterString('ZC') == 4\nassert solution.uniqueLetterString('WL') == 4\nassert solution.uniqueLetterString('BMZNLEBYA') == 159\nassert solution.uniqueLetterString('AAN') == 6\nassert solution.uniqueLetterString('J') == 1\nassert solution.uniqueLetterString('KNWUVVPBRF') == 170\nassert solution.uniqueLetterString('ZGVIUNQ') == 84\nassert solution.uniqueLetterString('YT') == 4\nassert solution.uniqueLetterString('HKOGBXRLV') == 165\nassert solution.uniqueLetterString('BN') == 4\nassert solution.uniqueLetterString('N') == 1\nassert solution.uniqueLetterString('PNWZQQJES') == 125\nassert solution.uniqueLetterString('WFVSE') == 35\nassert solution.uniqueLetterString('EQA') == 10\nassert solution.uniqueLetterString('I') == 1\nassert solution.uniqueLetterString('SBKFXEDZ') == 120\nassert solution.uniqueLetterString('ZAAOVSFMNX') == 188\nassert solution.uniqueLetterString('SRCSSYSYGB') == 104\nassert solution.uniqueLetterString('G') == 1\nassert solution.uniqueLetterString('M') == 1\nassert solution.uniqueLetterString('DLL') == 6\nassert solution.uniqueLetterString('IMUUZC') == 38\nassert solution.uniqueLetterString('B') == 1\nassert solution.uniqueLetterString('TSJJV') == 23\nassert solution.uniqueLetterString('NWTIEJLA') == 120\nassert solution.uniqueLetterString('LATRT') == 29\nassert solution.uniqueLetterString('D') == 1\nassert solution.uniqueLetterString('IENZTQISU') == 159\nassert solution.uniqueLetterString('LCJQG') == 35\nassert solution.uniqueLetterString('PWURE') == 35\nassert solution.uniqueLetterString('ZHU') == 10\nassert solution.uniqueLetterString('ONWMRDAPR') == 155\nassert solution.uniqueLetterString('KIGJVP') == 56\nassert solution.uniqueLetterString('FLQLUUZQWG') == 124\nassert solution.uniqueLetterString('FODLESNCZH') == 220\nassert solution.uniqueLetterString('GVUH') == 20\nassert solution.uniqueLetterString('CP') == 4\nassert solution.uniqueLetterString('LJXWQQKCFC') == 154\nassert solution.uniqueLetterString('QLY') == 10\nassert solution.uniqueLetterString('NPOEL') == 35\nassert solution.uniqueLetterString('DW') == 4\nassert solution.uniqueLetterString('RNQDHKTU') == 120\nassert solution.uniqueLetterString('IUOAFUFP') == 88\nassert solution.uniqueLetterString('YZHJMXWKC') == 165\nassert solution.uniqueLetterString('YTCIMKD') == 84\nassert solution.uniqueLetterString('TTDPR') == 27",
  "inefficient_solution": "import sys\n\nclass Solution:\n    def uniqueLetterString(self, s: str) -> int:\n        d = {c: [] for c in set(s)}\n        for i, c in enumerate(s):\n            d[c].append(i)\n        ans = 0\n        for v in d.values():\n            v = [-1] + v + [len(s)] + [sys.maxsize]\n            v_copy = v.copy()\n            for i in range(1, len(v) - 1):\n                v_copy = v_copy[1:] + v_copy[:1]\n                ans += (v[i] - v[i - 1]) * (v[i + 1] - v[i])\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                ans += (v[i] - v[i - 1]) * (v[i + 1] - v[i])\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                ans += (v[i] - v[i - 1]) * (v[i + 1] - v[i])\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                ans += (v[i] - v[i - 1]) * (v[i + 1] - v[i])\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                v_copy = v_copy[1:] + v_copy[:1]\n                ans += (v[i] - v[i - 1]) * (v[i + 1] - v[i])\n        return ans",
  "is_python": true
}