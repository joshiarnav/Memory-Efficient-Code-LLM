{
  "problem_idx": 1746,
  "task_name": "Maximum Subarray Sum After One Operation",
  "markdown_description": "\nYou are given an integer array `nums`. You must perform **exactly one** operation\u00a0where you can **replace** one\u00a0element `nums[i]` with `nums[i] * nums[i]`.\u00a0\n\n\nReturn *the **maximum** possible subarray sum after **exactly\u00a0one** operation*. The subarray must be non-empty.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,-1,-4,-3]\n**Output:** 17\n**Explanation:** You can perform the operation on index 2 (0-indexed) to make nums = [2,-1,**16**,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,-1,1,1,-1,-1,1]\n**Output:** 4\n**Explanation:** You can perform the operation on index 1 (0-indexed) to make nums = [1,**1**,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-104\u00a0<= nums[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxSumAfterOperation(self, nums: List[int]) -> int:\n        f = g = 0\n        ans = -inf\n        for x in nums:\n            ff = max(f, 0) + x\n            gg = max(max(f, 0) + x * x, g + x)\n            f, g = ff, gg\n            ans = max(ans, f, g)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom math import inf\n\nclass Solution:\n    def maxSumAfterOperation(self, nums: List[int]) -> int:\n        f = g = 0\n        ans = -inf\n        for x in nums:\n            ff = max(f, 0) + x\n            gg = max(max(f, 0) + x * x, g + x)\n            f, g = ff, gg\n            ans = max(ans, f, g)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    nums = random.sample(range(-10000, 10001), random.randint(2, 10))\n\n    expected_result = solution.maxSumAfterOperation(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxSumAfterOperation(nums) == expected_result\n        print(f\"assert solution.maxSumAfterOperation({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxSumAfterOperation({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.maxSumAfterOperation([-2395, -8969]) == 80442961\nassert solution.maxSumAfterOperation([-9383, 2334, -8452, -7203, 5671, 9736, -9546, 6213]) == 94795367\nassert solution.maxSumAfterOperation([-9867, 3584]) == 97361273\nassert solution.maxSumAfterOperation([-9812, -5134, -6334, -846, -4364, 4005, -2440, -2455]) == 96275344\nassert solution.maxSumAfterOperation([-6770, -5136, -3537, 7209, -8802, 5641, 6539, -5970, 3288, 8155]) == 77500066\nassert solution.maxSumAfterOperation([4888, 2592, 1192, -6472, 1393, 8318]) == 69192717\nassert solution.maxSumAfterOperation([653, -8818, -1155, -8391, 7490]) == 77757777\nassert solution.maxSumAfterOperation([8661, 4701, -5364, 6640, -6991]) == 75018898\nassert solution.maxSumAfterOperation([5724, -9989, 7622, 2444, -5769, -8321, 2313]) == 99795911\nassert solution.maxSumAfterOperation([5257, -1395, 8538, 5692, -9156]) == 83850428\nassert solution.maxSumAfterOperation([5317, -7203, -102, -7700, 9318, 9397]) == 88312927\nassert solution.maxSumAfterOperation([-3268, -2197, -5749, -9976]) == 99520576\nassert solution.maxSumAfterOperation([742, 4411, -9701, -4925, -8408, -6633, 7131, -5074]) == 94114554\nassert solution.maxSumAfterOperation([7404, -4628, -2969, 6940, -1244, 6277, 189]) == 54823781\nassert solution.maxSumAfterOperation([-1336, 8180, -9899, 2921, -2200, 6969, 5708, -9011]) == 98011779\nassert solution.maxSumAfterOperation([-6476, 545, 1274, 291, -855]) == 41940686\nassert solution.maxSumAfterOperation([5808, 5367, 195, 6124, -9792, -6022, 1806, 6901, 4395, -5144]) == 95907838\nassert solution.maxSumAfterOperation([4791, 7646, 8967, 4407, 704]) == 80424637\nassert solution.maxSumAfterOperation([-1261, 3203, 1592, 2343, -4708, -5544, 2940, -2101, -7756, -2243]) == 60156375\nassert solution.maxSumAfterOperation([-8189, -4527, 6291]) == 67061485\nassert solution.maxSumAfterOperation([-9684, -3353, -6656, -8546, 4978, -2101, 878, -508, -8145]) == 93779856\nassert solution.maxSumAfterOperation([-1950, 9796, -3687, -1365, -9769, -2085, 2575]) == 95961616\nassert solution.maxSumAfterOperation([-6315, 6256, 1785, -3522, 1828, -74, 9401, -1063, 6671]) == 88390682\nassert solution.maxSumAfterOperation([26, 5641, 8942, 8888, -2533, -56, -9258, -7345, -4223]) == 85731472\nassert solution.maxSumAfterOperation([-6765, 7588, -3133, 7175, -3876, 7445, 3558, -6424, 8849]) == 78317134\nassert solution.maxSumAfterOperation([5599, 8921, 9700, -9280, 6175, 7742]) == 94109157\nassert solution.maxSumAfterOperation([-893, 5127, -3916, 4365, -1678, -7587, -8783, 9571]) == 91604041\nassert solution.maxSumAfterOperation([6183, 1247]) == 38230736\nassert solution.maxSumAfterOperation([7470, -5973, -5768, 3740, -68, 2207]) == 55800900\nassert solution.maxSumAfterOperation([9890, 8203, -5225]) == 97820303\nassert solution.maxSumAfterOperation([4696, -7203, -605, 755, -8257, -4924]) == 68178804\nassert solution.maxSumAfterOperation([-6052, -8292, 4293, 2281, 6337, -9917, 6213, -4174]) == 98366013\nassert solution.maxSumAfterOperation([-4398, 1050, -1540, -6025, -5277, -2033, -3442, 7977]) == 63632529\nassert solution.maxSumAfterOperation([9756, -5031, -9598, -8629, -127, 2970, -9939, -7720, 5365, -8929]) == 98786691\nassert solution.maxSumAfterOperation([-7225, 3652, -7523, -434, 3621, 1438]) == 56603806\nassert solution.maxSumAfterOperation([7178, -2145, 9210]) == 84829133\nassert solution.maxSumAfterOperation([-3256, 8112, 3821]) == 65808365\nassert solution.maxSumAfterOperation([1389, -5115, -507, 9353, 7824, 8616, -9501]) == 90294794\nassert solution.maxSumAfterOperation([5877, -5177]) == 34539129\nassert solution.maxSumAfterOperation([5567, -7230, -8339, 9126, -1164, 4827, 7180, -2107, -6113]) == 83294719\nassert solution.maxSumAfterOperation([4625, -2283, 4997, -4076, -9909, -3677, 2010]) == 98191544\nassert solution.maxSumAfterOperation([-3877, -3050, -227]) == 15031129\nassert solution.maxSumAfterOperation([-9317, 4095, 4854, -7223, 7249, 9325, 7852, -2464, 1765]) == 86972452\nassert solution.maxSumAfterOperation([-1185, -8388, 1756, -3135, 2410, 2925, -4996, 6903, -4220, 1665]) == 70364407\nassert solution.maxSumAfterOperation([-4199, -2395, 4245, 7185, -692, -7253]) == 52616747\nassert solution.maxSumAfterOperation([3917, 3248, -9130]) == 83364065\nassert solution.maxSumAfterOperation([9002, -2031, -4443, -2908, -2796, 4162, 8122, 8162, -7526]) == 81044272\nassert solution.maxSumAfterOperation([880, 4102, 4995, 7569, 8907, -4086, -8579]) == 79352195\nassert solution.maxSumAfterOperation([2331, 2664, 5943]) == 35324244\nassert solution.maxSumAfterOperation([1320, 4891, 1408, -5783, -5688, -2270, -1313]) == 33450708\nassert solution.maxSumAfterOperation([2170, -1264, -5975]) == 35701531\nassert solution.maxSumAfterOperation([1295, 9653, -7303]) == 93181704\nassert solution.maxSumAfterOperation([-9619, -8348, 1186]) == 92525161\nassert solution.maxSumAfterOperation([-2693, -6696, 3810, -5124]) == 44840226\nassert solution.maxSumAfterOperation([6695, -6004]) == 44823025\nassert solution.maxSumAfterOperation([-4302, 6242, 4230, 8144, -2006, 4090, 990]) == 66338282\nassert solution.maxSumAfterOperation([-8583, 2815, 2949, 5671, 2552, -7858, -6036, 2867, -3596]) == 73681876\nassert solution.maxSumAfterOperation([9572, -1068, -8405, -9917, -5225, 3880]) == 98346988\nassert solution.maxSumAfterOperation([9439, -4831]) == 89094721\nassert solution.maxSumAfterOperation([-5236, -5665]) == 32092225\nassert solution.maxSumAfterOperation([6146, 101, 3009, -7595]) == 57693281\nassert solution.maxSumAfterOperation([-1541, -5198, 8375, 1162, -2346]) == 70141787\nassert solution.maxSumAfterOperation([6007, 8124, 6318]) == 66011701\nassert solution.maxSumAfterOperation([3486, -955, -6876, -1692, -2683, -2590, 5461, 9714]) == 94367257\nassert solution.maxSumAfterOperation([-2892, -2150, -8354, 9479]) == 89851441\nassert solution.maxSumAfterOperation([-9573, 6178, -7659, -8549, 3263, 9222, 3243, -5163, -9695]) == 94003590\nassert solution.maxSumAfterOperation([2275, -6621, -8060, -5611, -5221]) == 64963600\nassert solution.maxSumAfterOperation([2639, -5389, 5494, -2381, 4435, -950, -8229, -6612, 2220, -1206]) == 67723039\nassert solution.maxSumAfterOperation([-4140, -77, -2703, 846, 8693, -2102]) == 75569095\nassert solution.maxSumAfterOperation([4603, -7012, -1585, 7440, -3991, -7216, -3303, -1202]) == 55353600\nassert solution.maxSumAfterOperation([-5251, -6092, 1367]) == 37113831\nassert solution.maxSumAfterOperation([4217, 4330, 114, 5478, 6403, 7969, -5470]) == 63525503\nassert solution.maxSumAfterOperation([5891, 6314, -7328, -9947]) == 98947686\nassert solution.maxSumAfterOperation([-884, 2873, -8896, 6843, 2893, -202, 3932, -6632]) == 79155155\nassert solution.maxSumAfterOperation([-4145, 2260, 8204, 3564]) == 67311440\nassert solution.maxSumAfterOperation([-9645, 8659, -203, -6973, 5457, -51, -2880]) == 93034684\nassert solution.maxSumAfterOperation([-9175, 4290, -4939, -4213, -8823]) == 84184915\nassert solution.maxSumAfterOperation([-173, -393, -8417, 4644, -6555, 9480, -7742, -1724, -6821, -8476]) == 89870400\nassert solution.maxSumAfterOperation([4867, -3940, -895, 4324]) == 23687689\nassert solution.maxSumAfterOperation([5472, 8208, 1792]) == 67378528\nassert solution.maxSumAfterOperation([6128, 9389, 1165, -71, -3247, -1217, 8399, -3772]) == 88164478\nassert solution.maxSumAfterOperation([9258, 5071, 686, 9126, -897, -5906, -6284]) == 85725447\nassert solution.maxSumAfterOperation([2056, -2429, -27, -6864, -5521, 2083, -5976]) == 47114496\nassert solution.maxSumAfterOperation([-2000, 7490, 2909, -1049, 2754, -8133]) == 66157793\nassert solution.maxSumAfterOperation([2600, -7053, 1794, 2771, -4714, 7353]) == 54066609\nassert solution.maxSumAfterOperation([9939, -8008, -9362, 9803, -2900, -9770, 8795]) == 98783721\nassert solution.maxSumAfterOperation([-9037, 4652, -135, -6932, -302, 6863]) == 81672021\nassert solution.maxSumAfterOperation([-8568, 3899, 2845, -9842, 8910, -186]) == 96880618\nassert solution.maxSumAfterOperation([-6803, -837]) == 46280809\nassert solution.maxSumAfterOperation([-7272, 5210, -8328, 7944]) == 69368738\nassert solution.maxSumAfterOperation([-3139, -3288, 2582, -9558, 215, 300, 8346, -6368, 5916, 9051]) == 91375406\nassert solution.maxSumAfterOperation([-4933, -954, 4310]) == 24337845\nassert solution.maxSumAfterOperation([-4000, 4447, -3516, 4854]) == 23562247\nassert solution.maxSumAfterOperation([8862, -8846, -8173]) == 78535044\nassert solution.maxSumAfterOperation([2908, -2302, 4209, 1199, -7721, 1417, -6347, 5685, 5463, 1858]) == 59627931\nassert solution.maxSumAfterOperation([-4296, -8348, -1589, -220, 5086, -9082, 5959, -6882, -8488]) == 82493769\nassert solution.maxSumAfterOperation([-4069, 8073, 9954, 1528, -4295, -2109, -4333, -6512, 9036, 5308]) == 99091717\nassert solution.maxSumAfterOperation([-4918, -8486, 6843, -8703, -5797, 2454, 1827]) == 75749052\nassert solution.maxSumAfterOperation([-5999, -4884, 3068, 6537, 1348]) == 42736785\nassert solution.maxSumAfterOperation([8534, 4212, -9249, 9105]) == 85565852",
  "inefficient_solution": "class Solution:\n    def maxSumAfterOperation(self, nums: List[int]) -> int:\n        # Create a list to store the intermediate results\n        dp = [[-float('inf')] * 2 for _ in range(len(nums))]\n        \n        # Initialize the first element\n        dp[0][0] = nums[0]\n        dp[0][1] = nums[0] ** 2\n        \n        # Initialize the maximum sum\n        max_sum = -float('inf')\n        \n        # Iterate through the array\n        for i in range(1, len(nums)):\n            # Create a new list to store the current intermediate results\n            new_dp = [[-float('inf')] * 2 for _ in range(i + 1)]\n            \n            # Iterate through the previous intermediate results\n            for j in range(i):\n                # Calculate the maximum sum without operation\n                no_op = max(dp[j][0], 0) + nums[i]\n                # Calculate the maximum sum with operation\n                op = max(max(dp[j][0], 0) + nums[i] ** 2, dp[j][1] + nums[i])\n                # Update the current intermediate results\n                new_dp[j][0] = max(new_dp[j][0], no_op)\n                new_dp[j][1] = max(new_dp[j][1], op)\n            \n            # Update the maximum sum\n            max_sum = max(max_sum, new_dp[i-1][0], new_dp[i-1][1])\n            \n            # Update the current intermediate results\n            dp[i][0] = new_dp[i-1][0]\n            dp[i][1] = new_dp[i-1][1]\n        \n        return max_sum",
  "is_python": true
}