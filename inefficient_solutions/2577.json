{
  "problem_idx": 2577,
  "task_name": "Minimum Time to Visit a Cell In a Grid",
  "markdown_description": "\nYou are given a `m x n` matrix `grid` consisting of **non-negative** integers where `grid[row][col]` represents the **minimum** time required to be able to visit the cell `(row, col)`, which means you can visit the cell `(row, col)` only when the time you visit it is greater than or equal to `grid[row][col]`.\n\n\nYou are standing in the **top-left** cell of the matrix in the `0th` second, and you must move to **any** adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.\n\n\nReturn *the **minimum** time required in which you can visit the bottom-right cell of the matrix*. If you cannot visit the bottom-right cell, then return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2577.Minimum%20Time%20to%20Visit%20a%20Cell%20In%20a%20Grid/images/yetgriddrawio-8.png)\n\n\n\n```\n\n**Input:** grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]\n**Output:** 7\n**Explanation:** One of the paths that we can take is the following:\n- at t = 0, we are on the cell (0,0).\n- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.\n- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.\n- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.\n- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.\n- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.\n- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.\n- at t = 7, we move to the cell (2,3). It is possible because grid[2][3] <= 7.\nThe final time is 7. It can be shown that it is the minimum time possible.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2500-2599/2577.Minimum%20Time%20to%20Visit%20a%20Cell%20In%20a%20Grid/images/yetgriddrawio-9.png)\n\n\n\n```\n\n**Input:** grid = [[0,2,4],[3,2,1],[1,0,4]]\n**Output:** -1\n**Explanation:** There is no path from the top left to the bottom-right cell.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `2 <= m, n <= 1000`\n* `4 <= m * n <= 105`\n* `0 <= grid[i][j] <= 105`\n* `grid[0][0] == 0`\n\n\n\u00a0\n\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}\n\n",
  "canonical_solution": "class Solution:\n    def minimumTime(self, grid: List[List[int]]) -> int:\n        if grid[0][1] > 1 and grid[1][0] > 1:\n            return -1\n        m, n = len(grid), len(grid[0])\n        dist = [[inf] * n for _ in range(m)]\n        dist[0][0] = 0\n        q = [(0, 0, 0)]\n        dirs = (-1, 0, 1, 0, -1)\n        while 1:\n            t, i, j = heappop(q)\n            if i == m - 1 and j == n - 1:\n                return t\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    nt = t + 1\n                    if nt < grid[x][y]:\n                        nt = grid[x][y] + (grid[x][y] - nt) % 2\n                    if nt < dist[x][y]:\n                        dist[x][y] = nt\n                        heappush(q, (nt, x, y))\n",
  "test_case_generator": "\nimport random\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(2, 11) # because the given constraints ensure that m and n will be greater or equal to 2 and less or equal to 1000\n    n = random.randint(2, 11)\n    grid = [[random.randint(0, 100000) for _ in range(n)] for _ in range(m)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumTime(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumTime(grid) == expected_result\n        print(f\"assert solution.minimumTime({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumTime({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumTime([[59535, 20132, 85746, 13325, 58889, 51168], [98087, 56545, 53769, 98426, 96234, 33366], [91258, 24773, 5889, 94733, 86189, 2548], [22344, 21134, 37181, 2193, 77734, 55745], [26990, 99243, 31395, 13234, 64090, 38876], [75502, 1746, 98300, 19378, 16546, 51791], [43673, 93660, 5027, 95626, 58085, 23666], [20298, 6678, 14173, 52279, 43011, 12991], [3091, 59800, 32445, 94590, 80894, 25191], [81030, 83359, 91694, 7005, 28030, 77115], [80239, 87560, 68576, 9532, 38437, 2976]]) == -1\nassert solution.minimumTime([[48385, 31791, 54332, 3029, 83588, 84527], [32855, 48944, 58797, 38891, 16512, 88422], [34586, 76694, 86450, 1394, 46356, 4836], [81871, 96601, 48187, 93539, 83540, 76927], [27589, 23194, 33369, 75324, 56791, 94217], [33129, 84335, 91790, 57995, 95748, 69200], [94492, 73385, 10067, 64630, 53965, 44666], [97353, 49777, 70313, 82267, 27657, 5506], [22339, 53397, 28816, 62994, 45578, 96018]]) == -1\nassert solution.minimumTime([[41697, 32587, 46174], [12610, 89921, 19512], [71705, 91074, 13466], [30210, 39973, 43206]]) == -1\nassert solution.minimumTime([[41871, 51129, 40509, 96566, 78178, 71542, 88722, 98925, 22722, 96520], [36152, 9657, 96616, 1195, 28701, 78205, 96328, 13583, 64807, 72043], [47526, 61256, 56005, 89978, 34280, 20297, 18343, 91084, 10872, 7349], [73849, 53524, 66643, 18093, 55646, 74438, 29762, 61010, 24938, 18147], [507, 5812, 79516, 66353, 70498, 16944, 85145, 30814, 92808, 85825]]) == -1\nassert solution.minimumTime([[80279, 28733, 35635, 72040, 70872, 87199], [40393, 9544, 66808, 16301, 33159, 7703], [24055, 52561, 73906, 2449, 43126, 31560], [45541, 87257, 80745, 51592, 48983, 81861], [79922, 63037, 19874, 72566, 78628, 92012], [71060, 62444, 4370, 61572, 76835, 88464], [74873, 71396, 25368, 58936, 2580, 19941], [23178, 33739, 43867, 61243, 19366, 249], [52022, 87864, 73746, 87173, 24315, 93658]]) == -1\nassert solution.minimumTime([[22632, 71311, 17976], [32165, 68854, 72817], [12090, 10654, 70070], [26192, 58984, 71642], [45683, 60544, 95170], [45446, 25477, 49563], [14602, 10467, 51191], [2389, 92364, 29289], [51531, 74532, 50025], [63178, 12539, 44541], [42678, 99728, 28776]]) == -1\nassert solution.minimumTime([[70164, 70228, 77513, 86731, 12498, 84366, 14019, 4121, 6181], [82032, 30171, 3215, 69596, 86802, 36242, 28011, 98012, 33282], [68991, 59036, 77037, 8894, 93433, 58655, 20241, 18094, 47983], [75953, 70177, 64606, 25846, 81037, 8437, 31633, 47180, 45098], [77115, 90922, 47024, 95721, 92646, 88018, 17671, 54430, 67916]]) == -1\nassert solution.minimumTime([[64385, 53062, 83009], [31984, 25277, 92454], [81019, 801, 65765], [10673, 83593, 28732], [18035, 30831, 98833]]) == -1\nassert solution.minimumTime([[90460, 7696, 54349, 14560, 57107, 56204, 69431, 2407, 66995, 98756, 88177], [49499, 94332, 98127, 96698, 72043, 57632, 18340, 37075, 1061, 47582, 98920]]) == -1\nassert solution.minimumTime([[51428, 46521, 65746, 3168, 82766, 95323, 47047, 95543], [42197, 35572, 71734, 34210, 7888, 63391, 85016, 11457], [6946, 19765, 89097, 46801, 22785, 79060, 18061, 25931], [59470, 93115, 33221, 60935, 91059, 65521, 25355, 59221], [98122, 10708, 17776, 58543, 26010, 82918, 73392, 95681]]) == -1\nassert solution.minimumTime([[92224, 33362, 47663, 32205, 33501, 38655], [1797, 43643, 49066, 34847, 44187, 59646], [83979, 35414, 49775, 50060, 67059, 5225], [97921, 17751, 8268, 46402, 92216, 24715], [44064, 64929, 89537, 31890, 286, 34705], [78003, 96249, 69443, 66060, 45332, 26970]]) == -1\nassert solution.minimumTime([[46150, 67258, 36323, 89099, 42175, 4197], [35222, 47795, 20959, 84774, 86492, 21125], [66679, 35376, 31023, 95511, 42960, 45900], [12795, 71880, 34082, 95889, 52349, 89741], [63044, 30339, 72673, 17504, 3863, 70770], [83242, 53379, 64469, 65123, 44649, 5733], [79907, 57226, 41640, 38575, 46413, 3267], [24391, 996, 33351, 64937, 73412, 72360], [53288, 56648, 68589, 3331, 6654, 93560], [22594, 55289, 45700, 52140, 3204, 85913]]) == -1\nassert solution.minimumTime([[73476, 12637], [74426, 89552], [17211, 89698], [23360, 43927], [38874, 28682], [77294, 465]]) == -1\nassert solution.minimumTime([[26542, 14053, 18930], [1806, 63370, 82259], [76097, 44381, 38436], [95196, 57209, 12434], [27046, 66712, 57679], [80092, 76707, 43683], [45366, 84501, 12689], [87187, 48605, 65754]]) == -1\nassert solution.minimumTime([[31725, 20493, 86989, 77134], [15007, 38675, 36169, 48891], [14667, 2690, 73106, 51847], [78609, 52874, 78714, 40295], [2015, 41770, 52970, 86773], [28073, 52079, 44614, 29880], [2174, 781, 98958, 82364], [79077, 80089, 6464, 94909], [25870, 1386, 87697, 6227]]) == -1\nassert solution.minimumTime([[30879, 56898], [87788, 68644], [42929, 66352]]) == -1\nassert solution.minimumTime([[39092, 28171, 41024, 4195, 8383, 9081, 87164, 25810, 93240], [26829, 70883, 54886, 39557, 99457, 17905, 34915, 16851, 9483], [5713, 51459, 69236, 70808, 81914, 29327, 33443, 49628, 61182], [44664, 44013, 38166, 17544, 31725, 41538, 23806, 8985, 50819], [72925, 36461, 23688, 89491, 35569, 46533, 71987, 67717, 58172], [72205, 8829, 21730, 39512, 19611, 89933, 67046, 80549, 57241], [86646, 64336, 18480, 63477, 31384, 53360, 84619, 55347, 57856], [65650, 73532, 30526, 96064, 6118, 69227, 89541, 78269, 55469], [15256, 64194, 41627, 46928, 38738, 21756, 47927, 81230, 96140], [83180, 38070, 49775, 78709, 18140, 92553, 47005, 72782, 89964]]) == -1\nassert solution.minimumTime([[74409, 86733, 95489, 87859, 99061], [48158, 36248, 48346, 21333, 41841], [87506, 69252, 60170, 98367, 71171], [43573, 55677, 25062, 27633, 55022], [37209, 93951, 54356, 53549, 80306], [21074, 74143, 17126, 14139, 91498], [90298, 85594, 68557, 42878, 79567]]) == -1\nassert solution.minimumTime([[92209, 13385], [74519, 5961], [49110, 57266], [9705, 24693]]) == -1\nassert solution.minimumTime([[50490, 70947, 97440, 40059, 8839, 67942, 1574, 6516, 37334], [64741, 76293, 23526, 8721, 29010, 14235, 61358, 11418, 95904], [70828, 46543, 5510, 19796, 64227, 49219, 61364, 88432, 65134], [85150, 48325, 26519, 77609, 76762, 10213, 76552, 78654, 40541], [59429, 39464, 5479, 24292, 50311, 57366, 97537, 88511, 34176]]) == -1\nassert solution.minimumTime([[87770, 1002, 5730], [66328, 22879, 5305], [35289, 69241, 25814], [34544, 74174, 44249], [20431, 15239, 76844], [11589, 87899, 15051], [8014, 9803, 3637], [53513, 17028, 31617], [31118, 82729, 26240]]) == -1\nassert solution.minimumTime([[93190, 86403, 21186], [29710, 58634, 795], [21182, 28489, 49051], [50838, 88641, 354], [22719, 47765, 25693], [14335, 50781, 76609], [30626, 4602, 20548]]) == -1\nassert solution.minimumTime([[83587, 56737], [21389, 22835]]) == -1\nassert solution.minimumTime([[51823, 42928, 56788, 85935, 55084, 91101, 7707, 36584, 91150, 58150], [84148, 2541, 60680, 50082, 24030, 70502, 66611, 26954, 22159, 80685], [28972, 79401, 28244, 72955, 79403, 20946, 68038, 89370, 47211, 93982], [634, 75710, 99342, 12095, 87901, 88288, 27544, 85623, 92416, 98235]]) == -1\nassert solution.minimumTime([[9505, 20194, 43626, 59565, 20346, 47469, 8642, 16564], [47295, 7555, 82657, 83675, 39389, 76436, 4054, 85294], [95419, 48660, 75578, 63301, 86075, 23351, 98853, 37526], [97537, 44585, 93989, 46256, 49600, 54852, 7765, 19573], [88483, 45232, 22451, 19449, 54006, 60324, 64222, 47923], [84449, 34181, 62114, 50265, 78360, 67510, 8281, 61692], [94665, 32959, 44644, 82307, 676, 11511, 23748, 4922], [2383, 44305, 17226, 32810, 9269, 46053, 42248, 54694], [34586, 75254, 28986, 67867, 98874, 93869, 3367, 14264], [55024, 96353, 26874, 54778, 44640, 25327, 79328, 39147], [89871, 19004, 66229, 85599, 24802, 34497, 22010, 36601]]) == -1\nassert solution.minimumTime([[17270, 99809, 79535, 62014, 13893], [76693, 15373, 11363, 93189, 45566], [43341, 12579, 65236, 97399, 47133]]) == -1\nassert solution.minimumTime([[64495, 91548, 48224, 90369, 26246, 14108], [77348, 83748, 33518, 22124, 81183, 58175], [88172, 24913, 34842, 98303, 39667, 66003], [67870, 74121, 68901, 27948, 7909, 40511], [29028, 66360, 59784, 58000, 30639, 68485]]) == -1\nassert solution.minimumTime([[74841, 39631, 58498, 16702, 43329], [69632, 8135, 39483, 12956, 84401], [99224, 77712, 23702, 68081, 92230], [60205, 37187, 59805, 41511, 10522], [25235, 21937, 81520, 74021, 48367], [38694, 92727, 38330, 45663, 42315], [45664, 12753, 18592, 89124, 11703]]) == -1\nassert solution.minimumTime([[25215, 25862, 32144, 83471, 96040, 70810], [86895, 290, 63262, 18692, 35809, 26398], [25747, 79341, 94384, 63588, 70121, 36127], [19407, 61165, 38902, 97878, 55315, 90094], [35501, 59582, 4211, 30632, 47842, 36378], [24049, 4279, 14854, 51268, 95173, 47380], [21846, 3131, 34956, 91989, 40711, 18491], [58514, 83466, 33825, 81335, 29319, 19862], [57673, 9682, 17530, 3872, 59709, 66389], [26814, 48822, 47372, 11811, 40009, 29676]]) == -1\nassert solution.minimumTime([[63588, 18704, 73458, 9826, 86692], [13216, 31665, 93493, 44027, 35750], [7801, 42192, 8747, 27908, 90994], [55279, 24675, 17517, 19438, 69620], [77496, 57254, 63101, 94093, 85559]]) == -1\nassert solution.minimumTime([[56589, 47501, 64479, 21634, 50723, 4685, 36180], [82201, 84282, 74741, 74166, 47464, 40783, 33232], [9747, 19227, 96856, 44761, 53432, 87103, 78474], [38691, 5458, 51263, 86544, 14074, 2484, 40795], [79665, 15874, 19108, 88120, 919, 72191, 7992], [47951, 11619, 58149, 83183, 2221, 64292, 26312], [55560, 59576, 7879, 90027, 33308, 6743, 31496], [9020, 6564, 44606, 64637, 68268, 9817, 65528], [12448, 30741, 12256, 62846, 94909, 97839, 65342]]) == -1\nassert solution.minimumTime([[52281, 52176, 11341, 13624, 82672, 16948], [97991, 82712, 6877, 11503, 58501, 46888]]) == -1\nassert solution.minimumTime([[84051, 46511, 54474, 85698, 89537, 40777, 80724, 49070, 16154], [84886, 67267, 4208, 82596, 77092, 57302, 7780, 48633, 99257], [61205, 91417, 51781, 68129, 58720, 28987, 26803, 65016, 56323], [82344, 52579, 82451, 51601, 81652, 25041, 11417, 13900, 92690], [72700, 15822, 63335, 83899, 43472, 18078, 2986, 78377, 29627], [55007, 87463, 72342, 53410, 56485, 51424, 28808, 46581, 61231], [68081, 38443, 29584, 11203, 33816, 48484, 12470, 77566, 73979], [781, 59048, 16785, 13679, 42973, 7775, 75235, 5655, 93992], [33584, 59653, 90690, 22443, 71742, 42204, 47401, 39983, 20249], [67769, 39240, 2183, 19811, 96555, 23890, 50325, 99927, 96825]]) == -1\nassert solution.minimumTime([[42855, 95451, 48649, 19157, 41527, 51708], [74257, 94487, 59839, 78080, 16776, 55917], [95556, 66023, 50468, 42809, 82506, 1196], [35753, 98916, 14062, 81982, 85203, 11118], [62221, 55414, 24925, 12610, 21382, 80002], [24363, 23109, 14616, 74790, 47488, 81926], [85168, 41280, 48549, 73156, 66791, 61919], [16121, 18176, 49703, 48567, 74110, 80672], [27896, 9245, 8674, 95651, 46913, 9376], [94412, 52106, 26153, 73674, 48924, 12140]]) == -1\nassert solution.minimumTime([[40530, 56633, 37337, 73089, 9062, 93165, 42508, 95037, 68168], [71921, 40657, 28881, 69543, 23509, 59614, 80273, 9141, 41294], [12094, 24024, 75912, 91637, 7759, 23183, 25940, 52468, 29337], [67347, 87265, 9173, 50343, 3038, 92408, 99535, 43747, 86394], [16000, 8140, 7744, 90996, 49558, 97897, 13010, 88986, 23010]]) == -1\nassert solution.minimumTime([[34566, 5899, 86966], [39111, 76693, 63607], [49343, 2824, 64111], [79713, 75695, 28574]]) == -1\nassert solution.minimumTime([[77275, 81495, 80714, 4026, 92488, 39965, 33871, 2314, 1437, 91345, 23801], [24473, 60327, 13569, 17570, 61250, 3270, 26713, 97864, 28849, 70983, 70630], [60432, 11648, 86953, 87342, 98450, 9390, 99171, 47556, 49201, 33436, 18827], [389, 94999, 81804, 65172, 51527, 54210, 99395, 17375, 28253, 25714, 60840], [39099, 99996, 54097, 75279, 92693, 83379, 20528, 84001, 13615, 40835, 5262], [29478, 94551, 87540, 26908, 28864, 22942, 75270, 38354, 9004, 77426, 70685], [15966, 96885, 29074, 45161, 43414, 2242, 94702, 64126, 70803, 68672, 69004], [64533, 86690, 45307, 73898, 82948, 46292, 24194, 64637, 87120, 87761, 50729], [32514, 26611, 99177, 37720, 9141, 40305, 66981, 89403, 21972, 41436, 83869], [92262, 90881, 65128, 90425, 77337, 69188, 66235, 58235, 82644, 10198, 58732]]) == -1\nassert solution.minimumTime([[58199, 25778, 89155, 87577, 72375, 33014, 51471, 92872, 97300, 66110], [30764, 74989, 1342, 45891, 60255, 72378, 71191, 12325, 19568, 22009], [30562, 38872, 57396, 70738, 36523, 12944, 86971, 96894, 80396, 43940]]) == -1\nassert solution.minimumTime([[55506, 34371], [14393, 76710], [67954, 31022], [60650, 50278], [71489, 93918], [54101, 80022], [1678, 22649], [22066, 1664], [47825, 287], [48897, 47565], [3282, 23765]]) == -1\nassert solution.minimumTime([[14919, 52617, 70192, 41080, 506, 41043, 81744], [21184, 80605, 17788, 61002, 19381, 14354, 87875], [44746, 90901, 7219, 43245, 60420, 4914, 82321], [85912, 82128, 61662, 60818, 36039, 47015, 5223], [39409, 30725, 7328, 90053, 1840, 99568, 41226], [82614, 16745, 70514, 47096, 35876, 15877, 12472], [19490, 54754, 75690, 49807, 67243, 52205, 35653], [95571, 3160, 86242, 92749, 77878, 39274, 93746], [96535, 41914, 59852, 95160, 94194, 68175, 45308], [52511, 60633, 18937, 51730, 85046, 77166, 49568]]) == -1\nassert solution.minimumTime([[33738, 34292, 76313, 19696, 53995, 46738, 31417, 97269, 70884, 75449], [90647, 76672, 55708, 75592, 12327, 14303, 44783, 49611, 8016, 43165], [82481, 7453, 31302, 61483, 53436, 59646, 77544, 21338, 75310, 41722], [83895, 8707, 29616, 60179, 22100, 89383, 91910, 85213, 96712, 5386], [13462, 48095, 48827, 29614, 27466, 45564, 35322, 49925, 98070, 62972], [48791, 36513, 55317, 61226, 73126, 94116, 2730, 23980, 57042, 6431], [72701, 82281, 16092, 67109, 964, 8077, 66412, 21606, 2602, 36905], [66461, 6788, 80605, 86839, 63425, 59886, 75541, 66147, 29175, 73916], [61443, 12622, 3709, 72714, 55701, 49396, 27969, 50871, 46638, 48619]]) == -1\nassert solution.minimumTime([[53797, 53730, 36805, 38618, 61728, 33452, 12838, 95571, 653, 56385], [4209, 12917, 54298, 24760, 37295, 87561, 339, 154, 30365, 95119], [95633, 64591, 7638, 89270, 34615, 40136, 25726, 87645, 3512, 6769], [71369, 66519, 34738, 22088, 81422, 85536, 67980, 84306, 69744, 75203], [22492, 85058, 96859, 85774, 92963, 64417, 61676, 9457, 48257, 32081], [14543, 22430, 46918, 16258, 97971, 56302, 96812, 29765, 28314, 77431]]) == -1\nassert solution.minimumTime([[45577, 11799, 18517], [68841, 17729, 90668], [57309, 12606, 37203], [57751, 1273, 46085], [92082, 36532, 93010], [98074, 45604, 85134], [91893, 27652, 41080], [36849, 63594, 57900]]) == -1\nassert solution.minimumTime([[49110, 51540, 5235], [61947, 69748, 36506], [75474, 48786, 30913]]) == -1\nassert solution.minimumTime([[17734, 99180, 94124, 15506, 9023, 89057, 5096], [63386, 6990, 27095, 79139, 45677, 86605, 61618], [45939, 16519, 18387, 23221, 15018, 40880, 9704], [61726, 3996, 71179, 49579, 51689, 73530, 42155]]) == -1\nassert solution.minimumTime([[22192, 86484, 43807, 58668, 96088, 58950, 10064], [66535, 11432, 42418, 16447, 89693, 28317, 36846], [77468, 60161, 54519, 39005, 66395, 66439, 50840], [69898, 16249, 62535, 48627, 27455, 40647, 34080], [79736, 16855, 88427, 57025, 2492, 68914, 28597], [58927, 50202, 72127, 53114, 82997, 25598, 53703], [26432, 56774, 97573, 49645, 13596, 52687, 23102], [87297, 6862, 28362, 42245, 99058, 99450, 86744], [42018, 10234, 17705, 59011, 77166, 14087, 18230], [19516, 64228, 83976, 20613, 76402, 97633, 85465], [17426, 46330, 39933, 14415, 31482, 25593, 17639]]) == -1\nassert solution.minimumTime([[81034, 10278, 44403, 32305, 70333, 59293, 41072, 77757, 34056, 43940], [32389, 73364, 2527, 15890, 8394, 75868, 99064, 45810, 31353, 72502], [89480, 79876, 21211, 35887, 15817, 39481, 5739, 50413, 94881, 91686], [90877, 76726, 60338, 32170, 18080, 74938, 69445, 90473, 68646, 6470], [55487, 51554, 2681, 51318, 61554, 49039, 29987, 62542, 61767, 59374], [43260, 61384, 62069, 97889, 56037, 98296, 20617, 40164, 92192, 16170], [43323, 68014, 80847, 2411, 62904, 53299, 59687, 33865, 55564, 65348], [46158, 27095, 97556, 32744, 3110, 51080, 98614, 8391, 92341, 45484], [92039, 73164, 95542, 74809, 59292, 91280, 40030, 76536, 56812, 84943]]) == -1\nassert solution.minimumTime([[50029, 73912, 25206, 16161, 82804, 47646, 90720, 49388, 66064, 11756, 86657], [59529, 9806, 23092, 55159, 26985, 52373, 89111, 62217, 60430, 61524, 34653], [98250, 34945, 1374, 41672, 29008, 87024, 75921, 31417, 74906, 67225, 92304], [5291, 26691, 94700, 1712, 69928, 58707, 25072, 31816, 23737, 12427, 27856], [42717, 36338, 28877, 35526, 27152, 80138, 59589, 40476, 80060, 97459, 33121], [43266, 11714, 31768, 20259, 19077, 99817, 71588, 59209, 39120, 10222, 99769], [26325, 86072, 45330, 78425, 47919, 91115, 55216, 22429, 30668, 60719, 8693]]) == -1\nassert solution.minimumTime([[69702, 45173, 93598], [3607, 82141, 92870], [94167, 32757, 3335], [4827, 14425, 62988], [71086, 24427, 56396], [21980, 13565, 58320], [72903, 86799, 90841]]) == -1\nassert solution.minimumTime([[45664, 66995, 54518, 21369, 77286, 94156, 25456, 24077, 41959, 57405], [15878, 52383, 96857, 8227, 51630, 4826, 43786, 1527, 57964, 44423], [33042, 68584, 5142, 69592, 18660, 86106, 6416, 48032, 57270, 79389], [7153, 52583, 52195, 75612, 16433, 44016, 25417, 42786, 53260, 5097], [78756, 52512, 72283, 46938, 97659, 40168, 5255, 4768, 68350, 23995], [53771, 15859, 94975, 84653, 28836, 66419, 70514, 44749, 38815, 19749], [65572, 91414, 83130, 68613, 24781, 87879, 70031, 29312, 57844, 85583], [78585, 69530, 96509, 15880, 54856, 25227, 44878, 60725, 41842, 23971]]) == -1\nassert solution.minimumTime([[37205, 39547, 36308, 39031, 64212, 4036, 15558, 71803], [69213, 55060, 30492, 80202, 31881, 66933, 84083, 48011], [8497, 45286, 9024, 85033, 94303, 80027, 95016, 60246], [8474, 53527, 76738, 91353, 3826, 20457, 97936, 87621], [67717, 53248, 61629, 52184, 39945, 93858, 13385, 68091], [49484, 70058, 96309, 19369, 10982, 16664, 58880, 10784], [19271, 93530, 39254, 76481, 23293, 2105, 68064, 69545], [30402, 59493, 16070, 11976, 83661, 1610, 83375, 3509], [18763, 53873, 77036, 84268, 5103, 47615, 58457, 91656], [24919, 64779, 12297, 198, 39689, 13640, 19321, 41810], [7871, 55840, 38439, 36760, 22767, 99001, 64041, 61437]]) == -1\nassert solution.minimumTime([[45080, 69078], [27816, 20701], [94568, 61917], [68094, 12196], [37890, 8153], [6449, 38], [24278, 88288]]) == -1\nassert solution.minimumTime([[96272, 17088, 8769, 62700, 52696], [39516, 41283, 19180, 40016, 33661], [46222, 33841, 59913, 71699, 70488], [92050, 7957, 92042, 85085, 31504], [50601, 6953, 38382, 55985, 29860], [35413, 46209, 53990, 53123, 67931], [25929, 91066, 87310, 9299, 59182], [83400, 36129, 19168, 6304, 36166], [14059, 83755, 64643, 68273, 7436]]) == -1\nassert solution.minimumTime([[96290, 35257, 70101, 83153, 67290, 44654, 50013, 94147], [92401, 33887, 50602, 72042, 73890, 52641, 99083, 37225], [98567, 95157, 23836, 15832, 92806, 89674, 37124, 42973], [1467, 4571, 22617, 41312, 92025, 55660, 47795, 69705], [97988, 66750, 42898, 87255, 25591, 33022, 75295, 54926], [43171, 44259, 49280, 4974, 89116, 8963, 95922, 74159]]) == -1\nassert solution.minimumTime([[14340, 62835, 41382, 63344, 4530, 28191, 24690, 80816, 35429], [85394, 12769, 8629, 83095, 64810, 1749, 86321, 88753, 26365]]) == -1\nassert solution.minimumTime([[97198, 32657, 21417, 15722, 7370, 8995, 55548, 88213, 35586, 90938], [81803, 64544, 9569, 84625, 33183, 66744, 34776, 96537, 43983, 75075], [4331, 54534, 19253, 66705, 73951, 64034, 21402, 68432, 83551, 92355], [26769, 51221, 74655, 25063, 94452, 76172, 33181, 71184, 78299, 7270], [26251, 84412, 21133, 264, 16255, 80717, 2505, 97952, 14358, 8858], [86028, 78001, 53374, 81888, 27337, 93896, 23610, 19619, 84013, 11620], [29675, 83564, 48001, 15898, 68263, 90868, 88726, 78880, 68943, 99117], [74846, 45911, 64585, 17158, 23113, 52511, 46730, 83786, 2156, 3436], [80334, 16020, 43590, 38184, 93130, 27227, 79793, 15090, 86511, 35825], [18060, 74568, 9720, 28226, 80201, 85962, 27921, 41475, 22658, 92474], [28487, 95236, 82302, 5326, 49608, 86258, 24158, 21083, 72346, 46319]]) == -1\nassert solution.minimumTime([[55284, 36166, 23909, 59948, 78519, 89635, 10283, 27813, 92468, 37584, 67891], [69529, 26513, 76514, 76262, 57978, 40837, 48249, 99181, 94353, 73591, 78446]]) == -1\nassert solution.minimumTime([[55960, 77924, 85240, 98746, 89063, 22493], [25592, 27190, 93020, 11975, 96683, 91211], [77829, 67257, 33789, 88546, 54120, 14078], [97956, 35435, 13770, 37810, 70678, 56825]]) == -1\nassert solution.minimumTime([[88906, 12493, 97155, 60452, 30891, 67458, 93080], [21977, 14609, 98167, 38961, 59316, 44266, 17507], [47664, 31099, 41557, 31456, 51464, 76897, 95689], [34191, 79872, 53078, 21551, 63750, 17709, 67435], [22586, 47908, 10525, 9617, 78047, 77337, 47379]]) == -1\nassert solution.minimumTime([[88379, 18438, 17607, 11607, 62912, 24757, 39777, 54435, 87787, 82946, 80235], [44862, 44822, 39825, 62950, 64955, 74259, 39989, 76268, 94326, 62326, 7460], [43571, 71351, 87134, 44713, 83358, 71742, 32993, 99170, 86410, 91673, 92900], [69650, 2119, 69924, 81552, 52524, 63184, 32637, 99942, 49280, 49779, 64741], [11950, 91780, 61632, 18552, 84589, 25934, 80660, 94677, 77756, 1183, 35879], [15904, 76661, 18098, 82497, 87928, 33065, 66409, 83584, 89651, 61525, 33496], [49030, 71036, 37951, 21190, 72804, 71541, 39299, 6352, 88978, 74406, 8421], [72124, 5773, 50835, 28102, 48466, 61916, 59875, 14684, 69155, 22617, 76529], [5261, 64619, 34586, 4230, 43084, 57747, 19432, 42053, 86857, 82650, 11993], [24834, 33896, 76043, 91309, 54667, 22528, 12212, 30212, 97862, 20286, 96818], [81730, 33172, 26875, 76415, 19577, 85641, 88929, 35980, 76456, 58063, 76107]]) == -1\nassert solution.minimumTime([[53861, 94087, 94546, 78569, 25959, 83757, 35752], [35609, 9185, 1225, 30250, 24336, 94011, 14165], [54780, 56460, 99989, 36165, 34044, 89494, 58647], [65348, 74793, 15194, 4260, 68551, 52631, 83506], [47179, 67320, 76123, 71886, 26467, 20733, 21909], [87327, 76937, 46484, 98952, 84914, 6857, 17100], [51142, 45686, 81340, 72138, 32762, 95885, 74192], [28205, 27685, 44878, 11913, 24097, 58702, 47233]]) == -1\nassert solution.minimumTime([[41339, 41428, 88552, 44560], [26834, 60197, 4231, 61466], [76491, 6387, 19262, 87998], [82791, 82445, 75380, 40737], [28177, 38573, 42620, 61473], [80023, 48249, 80292, 19666], [25661, 26362, 53718, 97101], [34612, 35475, 85768, 21473], [50232, 22755, 79584, 10013]]) == -1\nassert solution.minimumTime([[84681, 88654, 63950, 35784, 57539, 55353, 59087, 93252, 40701, 85869], [93270, 80187, 87724, 12100, 17215, 38042, 2622, 27235, 12143, 95241], [77569, 52022, 73973, 65207, 33996, 70657, 56870, 2444, 30684, 64166], [57782, 31804, 80325, 95124, 53381, 73262, 34701, 58298, 75306, 79502], [80256, 8656, 71383, 77955, 14203, 67366, 73190, 44020, 84312, 9709], [69884, 63146, 17980, 55543, 39387, 82459, 56690, 74251, 82545, 8815], [17517, 32859, 81471, 76904, 53836, 18035, 21428, 50221, 24206, 45669], [29298, 53174, 4833, 52394, 87830, 32719, 70092, 10724, 62491, 23318], [56207, 88186, 92458, 51800, 4570, 96700, 11360, 28992, 7365, 45154]]) == -1\nassert solution.minimumTime([[5956, 78087, 50192, 9533, 95078, 12830, 13297], [9885, 9340, 19710, 6222, 63430, 84875, 87151], [61972, 21119, 15577, 26058, 44073, 16430, 5856], [73519, 5131, 18598, 61221, 41005, 87003, 58442], [22391, 58560, 50101, 78388, 92692, 25151, 11424], [20266, 32000, 55520, 21822, 11980, 26072, 67392], [32086, 24429, 42363, 80463, 8685, 49977, 15658], [21190, 51460, 82901, 68914, 24304, 72315, 50429], [73319, 62418, 45699, 81829, 66507, 441, 82452], [69241, 332, 5076, 95376, 43925, 65862, 9206], [81901, 55210, 46272, 29202, 79082, 58330, 9278]]) == -1\nassert solution.minimumTime([[75702, 27246, 32088, 14331, 46278, 67755, 3591, 55275], [93691, 27646, 25650, 57344, 54545, 40369, 47815, 53663], [86917, 62805, 93406, 72866, 91588, 16926, 33406, 26125], [15119, 11330, 28849, 89420, 52707, 43848, 84068, 27215], [64392, 97248, 4138, 23889, 47349, 29990, 47499, 1640], [72812, 68173, 13549, 34699, 22583, 60534, 2163, 68695]]) == -1\nassert solution.minimumTime([[18555, 6075, 77565, 57669, 12386, 19272, 11848, 8773, 81483], [5407, 1050, 91927, 58196, 50517, 97889, 45362, 20328, 47025], [71483, 41252, 39811, 30391, 18359, 51178, 42163, 32883, 22715], [88165, 11751, 95148, 44998, 63127, 38089, 57569, 45037, 41631], [23762, 17785, 55665, 24940, 81637, 93020, 59990, 85013, 43112], [28422, 33776, 25397, 86309, 5568, 30210, 69068, 33233, 10361], [96249, 94817, 84581, 27194, 84286, 72415, 64987, 17730, 65470], [89154, 28943, 97973, 79157, 34247, 28105, 54921, 64223, 93851]]) == -1\nassert solution.minimumTime([[19977, 99903, 40659, 16876, 78029], [54506, 53975, 13151, 77267, 19240], [24942, 7849, 93400, 7352, 66851], [70204, 49195, 67884, 31746, 21590]]) == -1\nassert solution.minimumTime([[37623, 45629, 88317, 50573, 90172, 78694, 13989, 31782, 17156, 83038], [4154, 990, 71660, 43323, 44889, 29938, 30929, 65731, 43854, 50945], [45874, 97217, 24344, 19120, 51862, 81185, 92321, 45705, 2144, 7203], [42230, 346, 38887, 42626, 75519, 20535, 16268, 58214, 90005, 56797], [62445, 58324, 69609, 48018, 7729, 73114, 90196, 86706, 95297, 50584], [14459, 3429, 72545, 69524, 42911, 71223, 22521, 1490, 36257, 67628]]) == -1\nassert solution.minimumTime([[785, 9667], [84869, 66778], [64469, 96379], [64092, 74629], [99338, 81715]]) == -1\nassert solution.minimumTime([[89565, 11241, 2912, 16229, 88830, 33825, 6697, 32558], [38763, 65557, 71673, 2534, 3159, 40895, 59551, 57374], [1225, 64807, 59248, 72734, 77676, 16728, 33250, 98436], [2425, 81154, 66249, 85217, 87431, 49961, 38670, 48913], [99982, 58261, 31338, 90195, 40870, 31688, 99201, 70579]]) == -1\nassert solution.minimumTime([[16767, 6040, 26901, 84563, 56797, 41091], [8125, 91759, 90606, 47938, 12998, 26868], [38252, 8880, 14275, 51772, 70294, 47882]]) == -1\nassert solution.minimumTime([[43440, 64380, 34615, 97291, 3134, 61430, 30314], [62385, 92449, 38236, 75039, 13013, 41916, 73763], [14612, 69713, 66600, 55061, 65275, 51879, 58094], [4822, 11237, 59669, 7672, 43456, 39026, 40214]]) == -1\nassert solution.minimumTime([[48234, 57323, 66654, 52583], [88041, 27469, 4220, 26819], [47040, 70824, 59219, 53488], [93666, 21855, 45355, 27101], [98238, 72654, 36514, 57004]]) == -1\nassert solution.minimumTime([[40526, 2155, 963, 70461, 94538, 87991, 48159, 3694, 73209], [90406, 91165, 81363, 18151, 30481, 50960, 73577, 79948, 27725], [4185, 79682, 51341, 38757, 71165, 59679, 57999, 41233, 78231], [78124, 89752, 68567, 76707, 50569, 12275, 40966, 3508, 69746], [92108, 1350, 6507, 46302, 65415, 94905, 61709, 20784, 92859], [29972, 13321, 96195, 60075, 87488, 10839, 3280, 82101, 47061], [94824, 83438, 40823, 91420, 21618, 96406, 17619, 15500, 39521]]) == -1\nassert solution.minimumTime([[28318, 25822, 29902, 84704, 4288], [98475, 3490, 11704, 37602, 43609], [28628, 43133, 35291, 87087, 52514], [15915, 51939, 6457, 79044, 16188], [20141, 90312, 70210, 95855, 29204], [1564, 92168, 84174, 25889, 59297], [92563, 54046, 10315, 84128, 32959]]) == -1\nassert solution.minimumTime([[4018, 93151], [62756, 86458], [59585, 98742]]) == -1\nassert solution.minimumTime([[18810, 54763, 54016], [82952, 73124, 35997], [27140, 22577, 61734], [34511, 99496, 97583]]) == -1\nassert solution.minimumTime([[34169, 68633, 13572, 55277, 3427, 34291, 11705, 78432, 34642], [2893, 14485, 85445, 21203, 10007, 74764, 22441, 3721, 30162]]) == -1\nassert solution.minimumTime([[81483, 57160], [29209, 50018]]) == -1\nassert solution.minimumTime([[70655, 37041], [89475, 52262], [15318, 5183], [60205, 59301], [78279, 6297]]) == -1\nassert solution.minimumTime([[26985, 33119, 2401], [38056, 74040, 38798], [47053, 21971, 12247], [68873, 60663, 84014]]) == -1\nassert solution.minimumTime([[38568, 90080, 1165, 69671, 66987, 30138, 49400, 70650], [39250, 44434, 38302, 75730, 6227, 76058, 41618, 72821], [18288, 55698, 74985, 49878, 24228, 36586, 15973, 55375], [43283, 24465, 73619, 85305, 30883, 28492, 53902, 90540]]) == -1\nassert solution.minimumTime([[36725, 73106, 42539, 38511], [97204, 22361, 91447, 99298], [76133, 48452, 71740, 7691], [82974, 4967, 28711, 11836], [86303, 48434, 87401, 89518], [44879, 46103, 93804, 6162], [71038, 79223, 51227, 51360]]) == -1\nassert solution.minimumTime([[61812, 22009, 14763, 30764, 75058, 94545, 23639, 74882], [23050, 62734, 77076, 64696, 80433, 53400, 86679, 72504], [3847, 65666, 14890, 75146, 67303, 41028, 47480, 1776], [6911, 52331, 36955, 33020, 74292, 45391, 12509, 69868], [40256, 1916, 9619, 54334, 66696, 38990, 29934, 17071], [76231, 36226, 76873, 21054, 7257, 45125, 48992, 57809], [66776, 20175, 98651, 89916, 91983, 41736, 75337, 52642], [43923, 22582, 66530, 51874, 78446, 66141, 23548, 97870], [11072, 54458, 6628, 13857, 89858, 4037, 60817, 67895]]) == -1\nassert solution.minimumTime([[97628, 48708, 81455, 10722, 54334, 75834], [48467, 71495, 58091, 1657, 2402, 5789], [56813, 7429, 85195, 1879, 64594, 47071], [77049, 27947, 15050, 99296, 2655, 61742], [54229, 96493, 57453, 66336, 10408, 48200], [89752, 5075, 83951, 33261, 24486, 98241], [89496, 56154, 46580, 95706, 85709, 4114], [47397, 39163, 68926, 21861, 69965, 12930], [64958, 76507, 50394, 81464, 64523, 28868], [44276, 231, 41274, 74006, 35100, 88881]]) == -1\nassert solution.minimumTime([[52100, 90288, 15095, 7760, 34758, 89569, 40908, 46636], [32607, 61419, 11160, 23686, 73598, 4489, 65638, 45243], [90449, 79132, 4685, 44118, 95819, 51690, 12008, 59922], [22692, 4671, 90113, 97272, 57167, 43303, 62338, 10499], [36365, 69195, 5960, 64219, 38179, 1111, 92931, 16742], [45405, 88806, 92385, 13001, 53495, 39304, 10397, 15538], [78206, 94294, 70257, 88952, 4568, 64110, 32918, 81929], [80443, 15932, 12601, 249, 41946, 74779, 44270, 66729], [92432, 74243, 41707, 86690, 69653, 15026, 70949, 9755]]) == -1\nassert solution.minimumTime([[70417, 58823, 53748, 57350, 88102, 61164, 39743, 84470, 95918, 97525], [66056, 64691, 61248, 99848, 87970, 53255, 20675, 89991, 15219, 7591], [79422, 1833, 66999, 10733, 57405, 66042, 947, 12733, 20369, 16373], [76587, 38173, 17541, 14995, 75093, 18663, 62680, 16108, 40761, 36947], [33272, 22505, 88864, 96676, 74456, 77285, 65406, 14758, 26543, 55565], [52259, 39621, 80029, 9065, 76639, 44932, 77101, 87701, 50124, 26707], [60239, 36035, 9876, 48827, 29232, 88122, 26098, 30286, 64247, 59213], [92364, 58287, 97782, 92712, 95086, 50857, 94860, 65366, 81065, 43597], [42745, 1574, 5716, 42207, 10348, 33395, 42154, 9730, 85572, 31153], [15816, 70253, 28998, 66675, 65363, 72225, 57758, 34872, 25991, 41365]]) == -1\nassert solution.minimumTime([[87254, 79076, 79771, 80971, 4149, 54237, 49362, 13757, 59040], [39519, 11504, 47712, 80334, 76485, 93951, 76047, 26363, 54018], [37635, 48143, 40905, 11954, 67295, 93723, 6015, 70509, 36339]]) == -1\nassert solution.minimumTime([[68344, 44371, 32083, 89714, 32764, 8707, 16577, 35376, 78966, 35405, 59806], [72968, 98965, 25166, 11146, 16545, 10342, 20516, 84215, 71006, 97044, 54936], [10228, 36959, 48194, 60582, 64540, 83742, 59700, 71795, 63058, 89832, 18883], [15018, 74771, 74213, 63284, 1206, 47011, 69857, 31311, 63268, 64589, 19531], [83966, 74984, 7564, 55936, 90753, 21632, 60534, 22321, 78313, 2660, 19626], [73068, 75506, 3610, 52866, 26736, 32742, 10306, 21666, 10010, 61067, 40143], [63450, 20643, 66478, 50271, 82270, 88422, 23670, 52298, 43074, 94862, 60170], [38131, 30161, 45740, 31967, 55892, 13224, 91149, 20886, 86903, 47359, 52584], [29956, 2387, 10719, 73102, 21699, 59843, 65057, 30189, 59697, 30704, 45196]]) == -1\nassert solution.minimumTime([[8035, 65412, 41550], [12831, 75319, 51850], [83935, 80740, 64679], [89151, 20847, 16271], [86729, 54329, 44861], [59460, 10434, 19523], [45938, 41414, 29875]]) == -1\nassert solution.minimumTime([[25609, 44621, 63622], [21157, 77424, 86996], [62603, 92248, 40199], [5580, 28391, 63372], [72274, 4845, 21705], [76267, 21086, 23562], [70003, 38550, 47936], [7708, 78980, 97794], [2590, 12691, 13113]]) == -1\nassert solution.minimumTime([[3162, 46069, 97768, 2157, 63265, 95225], [65602, 22230, 10651, 89332, 74548, 11476], [3479, 16783, 3551, 61129, 42828, 64571], [69648, 72783, 59638, 94908, 72270, 94835], [75289, 97313, 26808, 16367, 41368, 81774], [21190, 35394, 5838, 16599, 45957, 12258], [4535, 5524, 55275, 6965, 60355, 32983], [73532, 30155, 36108, 20383, 59546, 15599], [84008, 5868, 22631, 31119, 21978, 37869]]) == -1\nassert solution.minimumTime([[32724, 53387, 56463, 79690, 75909, 83481, 11505, 9665], [62771, 85866, 79514, 3990, 1745, 88419, 7103, 81634], [83785, 95692, 70638, 22859, 43263, 23191, 52934, 37799], [90664, 13512, 93919, 88315, 90594, 24717, 53393, 36147], [61078, 28729, 19565, 29712, 35612, 28091, 77805, 67231], [26499, 90716, 71863, 6982, 85431, 95149, 83922, 99590]]) == -1\nassert solution.minimumTime([[23988, 8084, 80480, 80101, 64683, 82508, 77616], [27176, 34292, 58611, 65266, 9160, 57380, 98566], [84702, 24547, 88111, 46864, 69491, 42587, 88350], [99394, 83888, 73338, 47396, 32600, 31376, 3173], [73261, 86772, 23488, 27466, 80227, 37604, 12819], [59466, 57037, 77810, 48247, 86921, 91360, 35624], [61296, 19256, 86647, 57403, 80021, 14372, 55264], [37466, 75350, 20759, 83254, 32245, 34213, 51544], [13788, 67079, 206, 60844, 70996, 44876, 75198], [95974, 30484, 5260, 65273, 17932, 77821, 20086]]) == -1\nassert solution.minimumTime([[31705, 54268], [18990, 16065]]) == -1\nassert solution.minimumTime([[93082, 17954, 26486], [7025, 48750, 148], [97226, 98992, 31029], [29108, 85416, 68678], [48510, 60079, 59826], [22259, 66896, 50162]]) == -1\nassert solution.minimumTime([[26051, 74315, 96270], [77, 56990, 38882], [54257, 90724, 26599], [86263, 59136, 75018], [68349, 83566, 21168], [16093, 75296, 74260], [23350, 32802, 93410]]) == -1\nassert solution.minimumTime([[90174, 89261], [35727, 19223], [74118, 7219], [29114, 19760], [94804, 70006], [64778, 8858], [98797, 91285], [60010, 42625], [39535, 26819]]) == -1\nassert solution.minimumTime([[37951, 4365, 52800, 83803, 57241, 44023, 20017], [62289, 20917, 65952, 73630, 88103, 24032, 20117], [5615, 60745, 94889, 43005, 29401, 23191, 82077], [97991, 23072, 83174, 2981, 50901, 20978, 93592], [35268, 17020, 87835, 81270, 49833, 31831, 79207], [44721, 55134, 38181, 82004, 79413, 11864, 31367], [2739, 86159, 47629, 57490, 88753, 38582, 28772], [87706, 61499, 92713, 83327, 59548, 64630, 28253], [34859, 22223, 88415, 42281, 67038, 3758, 17073], [48503, 68146, 10385, 11781, 43313, 97864, 13085], [56522, 25309, 31186, 22304, 99897, 8459, 72790]]) == -1\nassert solution.minimumTime([[24949, 97341, 97336, 58308, 66081, 68545, 34530, 58794], [50890, 4204, 55518, 40711, 71185, 11687, 6282, 98704], [64177, 2243, 95010, 61041, 21724, 87286, 97134, 82942], [62766, 98758, 23703, 2546, 69095, 2998, 40012, 29320], [91195, 46474, 58003, 47863, 69125, 65561, 73543, 43823]]) == -1",
  "inefficient_solution": "class Solution:\n    def minimumTime(self, grid: List[List[int]]) -> int:\n        if grid[0][1] > 1 and grid[1][0] > 1:\n            return -1\n        m, n = len(grid), len(grid[0])\n        dist = [[[inf] * 5000 for _ in range(n)] for _ in range(m)]\n        dist[0][0] = 0\n        q = [(0, 0, 0, 0)]\n        dirs = [-1, 0, 1, 0, -1]\n        while q:\n            t, i, j, idx = q.pop(0)\n            if i == m - 1 and j == n - 1:\n                return t\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if 0 <= x < m and 0 <= y < n:\n                    nt = t + 1\n                    if nt < grid[x][y]:\n                        nt = grid[x][y] + (grid[x][y] - nt) % 2\n                    if nt < dist[x][y][idx]:\n                        dist[x][y][idx] = nt\n                        q.append((nt, x, y, idx))\n                    if idx < 4999:\n                        q.append((nt, x, y, idx + 1))",
  "is_python": true
}