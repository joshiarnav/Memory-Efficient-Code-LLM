{
  "problem_idx": 1192,
  "task_name": "Critical Connections in a Network",
  "markdown_description": "\nThere are `n` servers numbered from `0` to `n - 1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [ai, bi]` represents a connection between servers `ai` and `bi`. Any server can reach other servers directly or indirectly through the network.\n\n\nA *critical connection* is a connection that, if removed, will make some servers unable to reach some other server.\n\n\nReturn all critical connections in the network in any order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1100-1199/1192.Critical%20Connections%20in%20a%20Network/images/1537_ex1_2.png)\n\n```\n\n**Input:** n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\n**Output:** [[1,3]]\n**Explanation:** [[3,1]] is also accepted.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, connections = [[0,1]]\n**Output:** [[0,1]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 105`\n* `n - 1 <= connections.length <= 105`\n* `0 <= ai, bi <= n - 1`\n* `ai != bi`\n* There are no repeated connections.\n\n\n",
  "canonical_solution": "class Solution:\n    def criticalConnections(\n        self, n: int, connections: List[List[int]]\n    ) -> List[List[int]]:\n        def tarjan(a: int, fa: int):\n            nonlocal now\n            now += 1\n            dfn[a] = low[a] = now\n            for b in g[a]:\n                if b == fa:\n                    continue\n                if not dfn[b]:\n                    tarjan(b, a)\n                    low[a] = min(low[a], low[b])\n                    if low[b] > dfn[a]:\n                        ans.append([a, b])\n                else:\n                    low[a] = min(low[a], dfn[b])\n\n        g = [[] for _ in range(n)]\n        for a, b in connections:\n            g[a].append(b)\n            g[b].append(a)\n\n        dfn = [0] * n\n        low = [0] * n\n        now = 0\n        ans = []\n        tarjan(0, -1)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def criticalConnections(self, n, connections):\n        def tarjan(a, fa):\n            nonlocal now\n            now += 1\n            dfn[a] = low[a] = now\n            for b in g[a]:\n                if b == fa:\n                    continue\n                if not dfn[b]:\n                    tarjan(b, a)\n                    low[a] = min(low[a], low[b])\n                    if low[b] > dfn[a]:\n                        ans.append([a, b])\n                else:\n                    low[a] = min(low[a], dfn[b])\n\n        g = [[] for _ in range(n)]\n        for a, b in connections:\n            g[a].append(b)\n            g[b].append(a)\n\n        dfn = [0] * n\n        low = [0] * n\n        now = 0\n        ans = []\n        tarjan(0, -1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random number of servers\n    n = random.randint(2, 6)\n\n    # Generate random connections\n    connections = []\n    for _ in range(random.randint(1, n - 1)):\n        connection = random.sample(range(n), 2)\n        if connection not in connections:\n            connections.append(connection)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.criticalConnections(n, connections)\n\n    return n, connections, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, connections, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.criticalConnections(n, connections) == expected_result\n        print(f\"assert solution.criticalConnections({n}, {connections}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.criticalConnections({n}, {connections}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.criticalConnections(4, [[3, 1], [0, 3], [0, 2]]) == [[3, 1], [0, 3], [0, 2]]\nassert solution.criticalConnections(5, [[0, 2], [0, 4], [4, 0]]) == [[0, 2], [0, 4]]\nassert solution.criticalConnections(3, [[2, 1]]) == []\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(4, [[1, 2]]) == []\nassert solution.criticalConnections(3, [[1, 0], [1, 2]]) == [[1, 2], [0, 1]]\nassert solution.criticalConnections(3, [[0, 2]]) == [[0, 2]]\nassert solution.criticalConnections(2, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(5, [[0, 2], [4, 2], [3, 4], [4, 3]]) == [[4, 3], [2, 4], [0, 2]]\nassert solution.criticalConnections(3, [[2, 0]]) == [[0, 2]]\nassert solution.criticalConnections(3, [[0, 2], [2, 0]]) == [[0, 2]]\nassert solution.criticalConnections(5, [[3, 1], [2, 0]]) == [[0, 2]]\nassert solution.criticalConnections(5, [[4, 3], [2, 4], [3, 2]]) == []\nassert solution.criticalConnections(6, [[4, 0], [0, 2], [2, 4], [1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(2, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(6, [[4, 0]]) == [[0, 4]]\nassert solution.criticalConnections(3, [[1, 0], [2, 1]]) == [[1, 2], [0, 1]]\nassert solution.criticalConnections(4, [[1, 3], [3, 2]]) == []\nassert solution.criticalConnections(3, [[1, 2]]) == []\nassert solution.criticalConnections(5, [[4, 1], [0, 3]]) == [[0, 3]]\nassert solution.criticalConnections(2, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(4, [[2, 3]]) == []\nassert solution.criticalConnections(5, [[1, 4], [3, 2], [3, 1], [3, 0]]) == [[3, 2], [1, 4], [3, 1], [0, 3]]\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(3, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(4, [[3, 1], [1, 3], [1, 0]]) == [[1, 3], [0, 1]]\nassert solution.criticalConnections(4, [[3, 2], [1, 2]]) == []\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(6, [[2, 1], [2, 5], [5, 3], [5, 4]]) == []\nassert solution.criticalConnections(5, [[1, 0], [1, 4]]) == [[1, 4], [0, 1]]\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(6, [[2, 5], [0, 1], [2, 1], [0, 2], [4, 1]]) == [[2, 5], [1, 4]]\nassert solution.criticalConnections(4, [[3, 2], [0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(6, [[3, 5], [5, 1], [1, 4], [3, 2], [4, 5]]) == []\nassert solution.criticalConnections(6, [[0, 3], [5, 1], [3, 4], [2, 0], [1, 2]]) == [[3, 4], [0, 3], [1, 5], [2, 1], [0, 2]]\nassert solution.criticalConnections(6, [[0, 4], [3, 1]]) == [[0, 4]]\nassert solution.criticalConnections(3, [[2, 1]]) == []\nassert solution.criticalConnections(5, [[4, 1], [3, 0], [2, 3]]) == [[3, 2], [0, 3]]\nassert solution.criticalConnections(4, [[3, 0], [0, 2], [2, 1]]) == [[0, 3], [2, 1], [0, 2]]\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(4, [[3, 0], [0, 1], [0, 3]]) == [[0, 3], [0, 1]]\nassert solution.criticalConnections(5, [[4, 1], [2, 1], [2, 4]]) == []\nassert solution.criticalConnections(5, [[0, 2]]) == [[0, 2]]\nassert solution.criticalConnections(6, [[3, 1]]) == []\nassert solution.criticalConnections(5, [[4, 0], [2, 4], [3, 4], [4, 1]]) == [[4, 2], [4, 3], [4, 1], [0, 4]]\nassert solution.criticalConnections(4, [[3, 2], [2, 0]]) == [[2, 3], [0, 2]]\nassert solution.criticalConnections(3, [[1, 2]]) == []\nassert solution.criticalConnections(5, [[4, 1]]) == []\nassert solution.criticalConnections(4, [[1, 3]]) == []\nassert solution.criticalConnections(5, [[3, 4], [2, 0], [3, 2]]) == [[3, 4], [2, 3], [0, 2]]\nassert solution.criticalConnections(4, [[1, 3], [1, 0]]) == [[1, 3], [0, 1]]\nassert solution.criticalConnections(5, [[1, 4], [4, 2], [3, 4], [0, 2]]) == [[4, 1], [4, 3], [2, 4], [0, 2]]\nassert solution.criticalConnections(3, [[0, 2]]) == [[0, 2]]\nassert solution.criticalConnections(4, [[1, 2]]) == []\nassert solution.criticalConnections(5, [[1, 3], [3, 0], [1, 4]]) == [[1, 4], [3, 1], [0, 3]]\nassert solution.criticalConnections(2, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(6, [[0, 3], [4, 2]]) == [[0, 3]]\nassert solution.criticalConnections(5, [[3, 2]]) == []\nassert solution.criticalConnections(5, [[0, 2], [3, 0], [2, 1]]) == [[2, 1], [0, 2], [0, 3]]\nassert solution.criticalConnections(6, [[4, 1]]) == []\nassert solution.criticalConnections(4, [[0, 3], [3, 1], [0, 2]]) == [[3, 1], [0, 3], [0, 2]]\nassert solution.criticalConnections(2, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(3, [[1, 2], [2, 1]]) == []\nassert solution.criticalConnections(4, [[0, 1], [3, 0], [2, 3]]) == [[0, 1], [3, 2], [0, 3]]\nassert solution.criticalConnections(6, [[3, 1], [0, 4], [2, 0], [2, 3]]) == [[0, 4], [3, 1], [2, 3], [0, 2]]\nassert solution.criticalConnections(4, [[1, 3], [3, 1], [2, 0]]) == [[0, 2]]\nassert solution.criticalConnections(6, [[0, 4]]) == [[0, 4]]\nassert solution.criticalConnections(5, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(5, [[2, 1]]) == []\nassert solution.criticalConnections(3, [[2, 1]]) == []\nassert solution.criticalConnections(5, [[1, 3], [0, 4], [4, 0], [2, 4]]) == [[4, 2], [0, 4]]\nassert solution.criticalConnections(3, [[1, 0], [2, 1]]) == [[1, 2], [0, 1]]\nassert solution.criticalConnections(4, [[2, 0]]) == [[0, 2]]\nassert solution.criticalConnections(2, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(4, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(3, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(6, [[0, 4], [1, 2]]) == [[0, 4]]\nassert solution.criticalConnections(5, [[4, 1], [4, 0]]) == [[4, 1], [0, 4]]\nassert solution.criticalConnections(4, [[3, 0]]) == [[0, 3]]\nassert solution.criticalConnections(5, [[4, 2]]) == []\nassert solution.criticalConnections(3, [[0, 2], [1, 0]]) == [[0, 2], [0, 1]]\nassert solution.criticalConnections(5, [[3, 2], [4, 1], [3, 1]]) == []\nassert solution.criticalConnections(5, [[1, 4], [1, 3], [1, 0], [3, 4]]) == [[0, 1]]\nassert solution.criticalConnections(4, [[3, 1]]) == []\nassert solution.criticalConnections(5, [[0, 1], [2, 3], [4, 0], [2, 4]]) == [[0, 1], [2, 3], [4, 2], [0, 4]]\nassert solution.criticalConnections(2, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(4, [[1, 0], [0, 3]]) == [[0, 1], [0, 3]]\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(5, [[2, 0], [3, 4]]) == [[0, 2]]\nassert solution.criticalConnections(5, [[0, 4], [4, 2], [0, 2], [1, 2]]) == [[2, 1]]\nassert solution.criticalConnections(2, [[0, 1]]) == [[0, 1]]\nassert solution.criticalConnections(6, [[5, 3]]) == []\nassert solution.criticalConnections(4, [[1, 0], [2, 1]]) == [[1, 2], [0, 1]]\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]\nassert solution.criticalConnections(3, [[2, 0]]) == [[0, 2]]\nassert solution.criticalConnections(3, [[2, 1]]) == []\nassert solution.criticalConnections(6, [[3, 0], [2, 4], [2, 5], [3, 4]]) == [[2, 5], [4, 2], [3, 4], [0, 3]]\nassert solution.criticalConnections(2, [[1, 0]]) == [[0, 1]]",
  "inefficient_solution": "class Solution:\n    def criticalConnections(\n        self, n: int, connections: List[List[int]]\n    ) -> List[List[int]]:\n        def tarjan(a: int, fa: int):\n            nonlocal now\n            now += 1\n            dfn = [0] * n\n            dfn[a] = low = [0] * n\n            low[a] = now\n            for b in g[a]:\n                if b == fa:\n                    continue\n                g_copy = g.copy()\n                g_copy[a].remove(b)\n                g_copy[b].remove(a)\n                dfn_copy = dfn.copy()\n                tarjan(b, a)\n                if dfn_copy[b] > low[a]:\n                    ans.append([a, b])\n                else:\n                    low[a] = min(low[a], low[b])\n\n        g = [[] for _ in range(n)]\n        for a, b in connections:\n            g[a].append(b)\n            g[b].append(a)\n\n        ans = []\n        now = 0\n        tarjan(0, -1)\n        return ans",
  "is_python": true
}