{
  "problem_idx": 1043,
  "task_name": "Partition Array for Maximum Sum",
  "markdown_description": "\nGiven an integer array `arr`, partition the array into (contiguous) subarrays of length **at most** `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\n\n\nReturn *the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a **32-bit** integer.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [1,15,7,9,2,5,10], k = 3\n**Output:** 84\n**Explanation:** arr becomes [15,15,15,9,10,10,10]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\n**Output:** 83\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [1], k = 1\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 500`\n* `0 <= arr[i] <= 109`\n* `1 <= k <= arr.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        f = [0] * (n + 1)\n        for i in range(1, n + 1):\n            mx = 0\n            for j in range(i, max(0, i - k), -1):\n                mx = max(mx, arr[j - 1])\n                f[i] = max(f[i], f[j - 1] + mx * (i - j + 1))\n        return f[n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        f = [0] * (n + 1)\n        for i in range(1, n + 1):\n            mx = 0\n            for j in range(i, max(0, i - k), -1):\n                mx = max(mx, arr[j - 1])\n                f[i] = max(f[i], f[j - 1] + mx * (i - j + 1))\n        return f[n]\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    arr_length = random.randint(1, 11)\n    arr = random.sample(range(0, pow(10, 9) + 1), arr_length)\n\n    # Generate a random k value\n    k = random.randint(1, arr_length)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxSumAfterPartitioning(arr, k)\n\n    return arr, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxSumAfterPartitioning(arr, k) == expected_result\n        print(f\"assert solution.maxSumAfterPartitioning({arr}, {k}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.maxSumAfterPartitioning({arr}, {k}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxSumAfterPartitioning([448878373, 748334740, 917711205, 978063541, 996304440, 643317483, 399422775], 1) == 5132032557\nassert solution.maxSumAfterPartitioning([360378515, 605294371, 252830265, 736638793], 2) == 2683866328\nassert solution.maxSumAfterPartitioning([411788373, 482055583, 321240293, 139981340, 942857017, 775505510, 329797742], 1) == 3403225858\nassert solution.maxSumAfterPartitioning([174443829, 596615290, 85921500, 941980640], 2) == 3077191860\nassert solution.maxSumAfterPartitioning([381183189], 1) == 381183189\nassert solution.maxSumAfterPartitioning([217918481, 49373898, 856393910], 3) == 2569181730\nassert solution.maxSumAfterPartitioning([140925361, 872479987, 203858283, 280038627, 752384096, 605031468, 897310768, 69909771, 377405708, 225323194], 6) == 8873784556\nassert solution.maxSumAfterPartitioning([5206222, 855849629, 950874071, 760121398], 4) == 3803496284\nassert solution.maxSumAfterPartitioning([165943186, 346515469, 611186693, 419724990, 708740150, 964425063], 6) == 5786550378\nassert solution.maxSumAfterPartitioning([573612029, 96195397, 146159137, 697987966, 41148743, 536322827], 3) == 3814799985\nassert solution.maxSumAfterPartitioning([544068278, 484932059, 492153197, 698083574], 4) == 2792334296\nassert solution.maxSumAfterPartitioning([505924970, 437377338, 55670370, 136647705, 845981399], 3) == 3549794137\nassert solution.maxSumAfterPartitioning([544589060, 552105383, 420090907, 303377546, 967277221, 539858748, 466753465, 242454223], 3) == 5625618673\nassert solution.maxSumAfterPartitioning([540823444], 1) == 540823444\nassert solution.maxSumAfterPartitioning([238530648, 784969318, 365849572, 758819535, 85806565, 335601786, 168157936, 844076466], 7) == 6634397432\nassert solution.maxSumAfterPartitioning([332638575, 401483492, 237189537, 364364634, 810619384], 2) == 2756844327\nassert solution.maxSumAfterPartitioning([533515309, 279449280, 996418551, 652127527, 871253203, 912144964], 6) == 5978511306\nassert solution.maxSumAfterPartitioning([759636794, 780657500, 803801290, 598172591, 137615590, 50767829, 392421265], 1) == 3523072859\nassert solution.maxSumAfterPartitioning([754124894, 111076642, 96359078, 657287430, 309237817, 515596486, 880977000], 3) == 5562593112\nassert solution.maxSumAfterPartitioning([597482882, 938977747, 520600035, 657827733, 202644837], 5) == 4694888735\nassert solution.maxSumAfterPartitioning([498320236, 874834424], 2) == 1749668848\nassert solution.maxSumAfterPartitioning([984250540], 1) == 984250540\nassert solution.maxSumAfterPartitioning([428144333, 610299225, 936215566, 545024755, 450131719, 435976593, 548835428, 964443982, 780702198], 7) == 8595310590\nassert solution.maxSumAfterPartitioning([763462515, 111019759, 978393982, 770466030, 855998852, 342435816, 554955683, 241876255, 629002460], 2) == 7015674816\nassert solution.maxSumAfterPartitioning([54970065, 728663952, 513931405, 709774254, 7268792, 97973946, 874541819, 900971860], 3) == 6420363427\nassert solution.maxSumAfterPartitioning([719318930, 750082632, 671180382, 812380767, 86538726, 390136220, 247188111], 6) == 5593603532\nassert solution.maxSumAfterPartitioning([910501831, 561114754, 332012843, 924740780, 409568712, 392468346, 504217634, 756512224, 794954227, 565111463], 8) == 9218929902\nassert solution.maxSumAfterPartitioning([861305584, 636300763, 11281110, 774476339, 690160567, 518643066, 568340259, 500564691, 985093125, 403829788], 3) == 8430965403\nassert solution.maxSumAfterPartitioning([470554144, 959181529, 128723331, 697318258, 231453760, 773672453, 906401682, 10171904, 178837441, 77436870, 511352871], 6) == 10287097584\nassert solution.maxSumAfterPartitioning([139484068, 713999072, 933139010, 935990346, 595287432, 752793796, 780155331, 957031361, 881158772, 998503683], 1) == 7687542871\nassert solution.maxSumAfterPartitioning([739707167, 937566337, 742620095, 152203703, 184235747, 530797725, 607051745, 201564030, 765954629], 8) == 8266485325\nassert solution.maxSumAfterPartitioning([568565554, 782648779, 397806127, 717192302], 4) == 3130595116\nassert solution.maxSumAfterPartitioning([865340065, 507504691, 335932017], 1) == 1708776773\nassert solution.maxSumAfterPartitioning([689490367, 523255886, 165559151, 695987115, 911179297], 2) == 3682134261\nassert solution.maxSumAfterPartitioning([156043680, 746358832, 629494559, 971773438, 809781243, 5827683, 724540969, 234237414, 163266922, 55503416], 2) == 6831442808\nassert solution.maxSumAfterPartitioning([997980611, 925448519, 472565994, 455508511, 953643232, 93381006, 829830200, 638357932], 8) == 7983844888\nassert solution.maxSumAfterPartitioning([833449251, 332412066, 922070886], 2) == 2677591023\nassert solution.maxSumAfterPartitioning([374871029, 920344717, 227828604, 594830104], 1) == 2117874454\nassert solution.maxSumAfterPartitioning([906821780], 1) == 906821780\nassert solution.maxSumAfterPartitioning([945312393, 217366506, 71012457, 675233659, 8665455, 341387788, 200422927, 5460688, 60931072, 107791370, 200299556], 10) == 9653423486\nassert solution.maxSumAfterPartitioning([161960474, 231332951, 209154883, 59804606, 435503948, 611009736, 25306389, 691360959, 52743280, 699659727], 6) == 6464697324\nassert solution.maxSumAfterPartitioning([44369161], 1) == 44369161\nassert solution.maxSumAfterPartitioning([173682551, 642877948, 412748196, 217170110, 708089144, 89653256, 748028568, 33819670, 161751408, 780940662, 317924945], 3) == 7996931018\nassert solution.maxSumAfterPartitioning([818138482, 572190055, 188599143, 707591794, 500896943, 654827779], 3) == 4577190828\nassert solution.maxSumAfterPartitioning([594893374, 980094359, 380251483], 1) == 1955239216\nassert solution.maxSumAfterPartitioning([764355314, 871932938, 187455282, 171552726, 728994550, 805447948, 941994684, 17810018, 436783685, 113356585, 539558035], 8) == 10151756286\nassert solution.maxSumAfterPartitioning([27358536, 481963953, 774578621], 3) == 2323735863\nassert solution.maxSumAfterPartitioning([200469467, 55795677, 687803122, 218260975, 556403654], 1) == 1718732895\nassert solution.maxSumAfterPartitioning([456264235, 875303310, 373016857, 362596550, 859241137, 199645340, 383503337, 321189848, 698876438, 494921318, 755451716], 11) == 9628336410\nassert solution.maxSumAfterPartitioning([751110632, 331417254, 452911224, 783212407, 921962262, 229109133, 389807098, 858721096], 2) == 6630012794\nassert solution.maxSumAfterPartitioning([932156324, 620927285, 50943556, 233224051, 876647219, 368460797], 1) == 3082359232\nassert solution.maxSumAfterPartitioning([261046765, 748041352, 682634122, 179765197, 256345522, 524022248], 4) == 4226619192\nassert solution.maxSumAfterPartitioning([306025645, 647175255, 416218602, 109827695, 221596113], 1) == 1700843310\nassert solution.maxSumAfterPartitioning([81778010, 958972341, 514670054, 632535273, 977027096, 27935906], 6) == 5862162576\nassert solution.maxSumAfterPartitioning([619970299], 1) == 619970299\nassert solution.maxSumAfterPartitioning([46365891, 697197436, 829969446, 65750418, 255539094, 80749779, 912692230, 806820345, 862092263, 244173610, 570729209], 8) == 9887814629\nassert solution.maxSumAfterPartitioning([555636389, 123425481, 532598770, 873404921, 96392977, 956768701], 6) == 5740612206\nassert solution.maxSumAfterPartitioning([221561711, 782516339, 895958184], 1) == 1900036234\nassert solution.maxSumAfterPartitioning([904732910], 1) == 904732910\nassert solution.maxSumAfterPartitioning([791316453, 722622966, 254458770, 493779788, 713553598, 642895740, 274999417, 678924239], 5) == 6019480204\nassert solution.maxSumAfterPartitioning([290043890, 991961532, 545840943, 307501775, 172317458, 975036926, 768533190, 215143228, 127817426], 6) == 8859955364\nassert solution.maxSumAfterPartitioning([513254408], 1) == 513254408\nassert solution.maxSumAfterPartitioning([65114813, 395547454, 242927554, 669977096, 192813741, 689426508, 447364696, 528299219], 1) == 3231471081\nassert solution.maxSumAfterPartitioning([821335138, 256840118, 487736698, 967274876, 217274053, 22025087, 724252148, 531473549, 973501459, 248447972], 9) == 9710108258\nassert solution.maxSumAfterPartitioning([128930380, 562324143, 156379844, 275252225, 808658970, 484144501], 6) == 4851953820\nassert solution.maxSumAfterPartitioning([640128973, 520597486, 462972191], 3) == 1920386919\nassert solution.maxSumAfterPartitioning([993813117], 1) == 993813117\nassert solution.maxSumAfterPartitioning([644446772, 293358148, 333041891, 831938393, 34759217, 228305830], 5) == 4804138737\nassert solution.maxSumAfterPartitioning([304839724, 728094632, 66459862, 179388223, 487229119, 44867702, 801512539, 579546624, 631171012], 5) == 6919941223\nassert solution.maxSumAfterPartitioning([186103366, 890510394, 299473590, 528194476, 688705040, 971550774, 464776567, 528487086], 2) == 5997703414\nassert solution.maxSumAfterPartitioning([24916934, 87377354, 708102392, 631713154, 20838195], 1) == 1472948029\nassert solution.maxSumAfterPartitioning([929023649, 599474149, 33017332, 365537913, 345495612, 505360, 999345364, 676345595, 688804320, 359476092], 2) == 6987263699\nassert solution.maxSumAfterPartitioning([685581888, 307189574], 1) == 992771462\nassert solution.maxSumAfterPartitioning([542291324, 994577668, 116361151, 208782572, 397021820, 186808728, 427952247, 612863598], 6) == 7193193204\nassert solution.maxSumAfterPartitioning([10086195, 967316124, 773460329, 640915568, 949197517, 192017325, 5488003, 643668110, 891299178, 734839492, 755452163], 8) == 10513647115\nassert solution.maxSumAfterPartitioning([570075208, 604302618, 616641795, 485698250, 279292775, 21226287, 783506079, 485898253, 22175190, 507193546, 926530684], 5) == 8832258367\nassert solution.maxSumAfterPartitioning([842032672, 231725106], 1) == 1073757778\nassert solution.maxSumAfterPartitioning([142135434, 538915561, 569010562, 834266994, 748292107, 992904789, 926239654, 41641087, 358623559, 756561249], 6) == 9662387350\nassert solution.maxSumAfterPartitioning([278241271, 891024136], 1) == 1169265407\nassert solution.maxSumAfterPartitioning([337872632, 269876538, 75517197, 872693260, 165235496, 584285208, 831217397, 778515434], 2) == 5252136994\nassert solution.maxSumAfterPartitioning([112553853, 859911327], 1) == 972465180\nassert solution.maxSumAfterPartitioning([171342772], 1) == 171342772\nassert solution.maxSumAfterPartitioning([894060675], 1) == 894060675\nassert solution.maxSumAfterPartitioning([74429049, 273280780], 1) == 347709829\nassert solution.maxSumAfterPartitioning([987625840, 338524396, 342186665, 689165888, 955021925, 156469465, 845373159, 215445720, 332224648, 166492864, 118298733], 4) == 9360338579\nassert solution.maxSumAfterPartitioning([447428949, 22403057, 793179923, 930331294, 734957439, 580377035, 540103129, 730728085, 101452828, 327701236, 149879280], 9) == 9822190121\nassert solution.maxSumAfterPartitioning([421891643], 1) == 421891643\nassert solution.maxSumAfterPartitioning([516956822, 930003395, 480246793, 758108044], 4) == 3720013580\nassert solution.maxSumAfterPartitioning([666015709, 136415036, 87472603, 229413402, 60827402, 465747706, 701048554, 71457420, 533137776, 312700486, 644051063], 2) == 5945690644\nassert solution.maxSumAfterPartitioning([81528519, 595766759, 181508657, 129951707, 126243855, 311156028, 198964091, 27108945, 390107904, 155441211, 818341338], 8) == 8334030981\nassert solution.maxSumAfterPartitioning([429719035, 70483848, 216915165, 181501676, 320201790, 320602798, 203830573, 714658348, 177105489], 3) == 4394940543\nassert solution.maxSumAfterPartitioning([631791694, 144312320, 586107010], 2) == 1849690398\nassert solution.maxSumAfterPartitioning([118827745, 793509964, 863734293, 610641399, 736786453, 158690890], 2) == 4788061420\nassert solution.maxSumAfterPartitioning([314838374, 58222316, 536853514, 748147134, 432146108, 374506964, 37924610, 639142453, 616971178], 6) == 6406310163\nassert solution.maxSumAfterPartitioning([187701273, 617900385, 877308101, 512494293, 651355823, 868656825, 677180588, 277915263], 6) == 6992510980\nassert solution.maxSumAfterPartitioning([948555276], 1) == 948555276\nassert solution.maxSumAfterPartitioning([773279489, 457226860], 1) == 1230506349\nassert solution.maxSumAfterPartitioning([169337208, 194910905, 475579621, 459983840, 565621088, 257819608, 982468507], 3) == 4834128224\nassert solution.maxSumAfterPartitioning([434458247, 492023185], 2) == 984046370\nassert solution.maxSumAfterPartitioning([523243645, 294595146, 522798395, 118259313, 178110417, 131544605, 24670555, 126986112, 736071433], 8) == 6411815109",
  "inefficient_solution": "class Solution:\n    def maxSumAfterPartitioning(self, arr, k):\n        n = len(arr)\n        f = [0] * (n + 1)\n        maxes = [0] * n\n        for i in range(n):\n            maxes[i] = arr[i]\n            for j in range(i, max(0, i - k), -1):\n                maxes[i] = max(maxes[i], arr[j])\n        for i in range(1, n + 1):\n            f2 = [0] * i\n            for j in range(1, i):\n                f2[j] = max(f2[j - 1], f[j - 1] + maxes[j - 1] * (j - (j - 1) + 1))\n            f[i] = max(f[i], max(f2))\n        return f[n]",
  "is_python": true
}