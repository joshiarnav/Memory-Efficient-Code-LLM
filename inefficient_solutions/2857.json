{
  "problem_idx": 2857,
  "task_name": "Count Pairs of Points With Distance k",
  "markdown_description": "\nYou are given a **2D** integer array `coordinates` and an integer `k`, where `coordinates[i] = [xi, yi]` are the coordinates of the `ith` point in a 2D plane.\n\n\nWe define the **distance** between two points `(x1, y1)` and `(x2, y2)` as `(x1 XOR x2) + (y1 XOR y2)` where `XOR` is the bitwise `XOR` operation.\n\n\nReturn *the number of pairs* `(i, j)` *such that* `i < j` *and the distance between points* `i` *and* `j` *is equal to* `k`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** coordinates = [[1,2],[4,2],[1,3],[5,2]], k = 5\n**Output:** 2\n**Explanation:** We can choose the following pairs:\n- (0,1): Because we have (1 XOR 4) + (2 XOR 2) = 5.\n- (2,3): Because we have (1 XOR 5) + (3 XOR 2) = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** coordinates = [[1,3],[1,3],[1,3],[1,3],[1,3]], k = 0\n**Output:** 10\n**Explanation:** Any two chosen pairs will have a distance of 0. There are 10 ways to choose two pairs.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= coordinates.length <= 50000`\n* `0 <= xi, yi <= 106`\n* `0 <= k <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def countPairs(self, coordinates: List[List[int]], k: int) -> int:\n        cnt = Counter()\n        ans = 0\n        for x2, y2 in coordinates:\n            for a in range(k + 1):\n                b = k - a\n                x1, y1 = a ^ x2, b ^ y2\n                ans += cnt[(x1, y1)]\n            cnt[(x2, y2)] += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def countPairs(self, coordinates: List[List[int]], k: int) -> int:\n        cnt = Counter()\n        ans = 0\n        for x2, y2 in coordinates:\n            for a in range(k + 1):\n                b = k - a\n                x1, y1 = a ^ x2, b ^ y2\n                ans += cnt[(x1, y1)]\n            cnt[(x2, y2)] += 1\n        return ans\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random coordinates list\n    coordinates = [[random.randint(0, 1000000), random.randint(0, 1000000)] for _ in range(random.randint(2, 10))]\n    \n    # Generate a random k value\n    k = random.randint(0, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countPairs(coordinates, k)\n\n    return coordinates, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        coordinates, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countPairs(coordinates, k) == expected_result\n        print(f\"assert solution.countPairs({coordinates}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countPairs({coordinates}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countPairs([[778555, 971118], [653327, 778822], [516745, 191059]], 83) == 0\nassert solution.countPairs([[556769, 521073], [554502, 834722], [11827, 471666], [395611, 242862], [727872, 493266], [524882, 334017], [116257, 212143], [351233, 587621], [845156, 147529], [902902, 716881]], 69) == 0\nassert solution.countPairs([[386353, 294106], [182808, 420847], [443014, 584445]], 23) == 0\nassert solution.countPairs([[81125, 544945], [826388, 946670], [24138, 524907], [469027, 806731], [112590, 593874]], 68) == 0\nassert solution.countPairs([[322303, 876295], [840352, 869799], [295966, 534453], [132308, 463602], [68978, 257089], [666419, 165684]], 68) == 0\nassert solution.countPairs([[527896, 683035], [515667, 268413], [176941, 914490], [535750, 985515], [321658, 289184], [454720, 339831], [759748, 843223]], 8) == 0\nassert solution.countPairs([[209589, 446999], [298386, 997716], [397149, 929386], [605642, 944592]], 81) == 0\nassert solution.countPairs([[99472, 651735], [530707, 891908], [175243, 899477], [353822, 972110], [517711, 887156], [427732, 298104], [45967, 531965], [769228, 254138], [174366, 348255], [880156, 372864]], 8) == 0\nassert solution.countPairs([[180763, 555822], [440501, 747342], [89183, 766065], [747856, 291853], [843030, 553875], [17724, 641738], [759029, 886092]], 7) == 0\nassert solution.countPairs([[699153, 787811], [92719, 847345], [969443, 795097], [858199, 269609], [219676, 878785]], 73) == 0\nassert solution.countPairs([[778964, 511489], [793921, 820557], [193572, 702900], [978062, 774271]], 92) == 0\nassert solution.countPairs([[475325, 67073], [598679, 259260], [89780, 306119]], 29) == 0\nassert solution.countPairs([[621690, 457977], [736893, 616330], [234889, 791447], [67860, 270865]], 69) == 0\nassert solution.countPairs([[518239, 998167], [78537, 814574], [587442, 831992], [649327, 691840], [531435, 340920], [615642, 221220], [456072, 198894], [232975, 890274]], 30) == 0\nassert solution.countPairs([[401029, 638359], [728614, 449086], [753891, 285268], [859214, 747824], [934825, 23201], [700962, 114525], [15340, 109381], [264986, 396927], [664900, 512760], [19707, 824346]], 53) == 0\nassert solution.countPairs([[249764, 990175], [648811, 406183], [993458, 300909], [32999, 900497], [993874, 854064], [121345, 332176], [318488, 150855]], 23) == 0\nassert solution.countPairs([[247283, 513566], [64918, 823062], [719200, 583878], [125354, 283739], [242448, 325164], [889779, 636854], [635946, 891337], [82387, 183121], [797413, 5380]], 33) == 0\nassert solution.countPairs([[850821, 493597], [780244, 498981], [729535, 590533]], 88) == 0\nassert solution.countPairs([[332528, 750492], [699869, 556428], [300640, 244093], [384008, 408214], [628357, 180652], [739272, 160625], [902923, 394223]], 58) == 0\nassert solution.countPairs([[578357, 728571], [373642, 975810], [68678, 46684], [377094, 301639], [749936, 586583]], 18) == 0\nassert solution.countPairs([[290060, 346164], [395838, 561162], [512495, 214464]], 67) == 0\nassert solution.countPairs([[581610, 114717], [280449, 958546], [455594, 139490], [355, 983992], [774573, 681878], [689987, 637993], [967657, 895575], [831197, 155858]], 1) == 0\nassert solution.countPairs([[968379, 167353], [304383, 25993], [542182, 641367], [96422, 477085], [7542, 657941], [927918, 931681], [477243, 178748]], 44) == 0\nassert solution.countPairs([[380890, 231272], [944804, 686256]], 65) == 0\nassert solution.countPairs([[215115, 979026], [291890, 317883]], 43) == 0\nassert solution.countPairs([[46578, 857376], [62518, 261802], [608373, 560980], [430611, 94467], [958475, 347840], [590989, 570806], [122823, 420099]], 25) == 0\nassert solution.countPairs([[896516, 95049], [274593, 137576], [564901, 528091], [314296, 915057], [942818, 561012], [518059, 813318]], 52) == 0\nassert solution.countPairs([[61337, 833058], [749899, 631027], [246615, 940613]], 13) == 0\nassert solution.countPairs([[11138, 793229], [333999, 263247], [198649, 139289], [432310, 811935], [6013, 474497], [598596, 855910]], 82) == 0\nassert solution.countPairs([[657858, 319442], [102360, 411856], [31129, 466275], [234942, 519262], [275114, 477503], [844338, 910303], [97007, 678537], [503371, 469554], [658853, 766089]], 23) == 0\nassert solution.countPairs([[340193, 922155], [337387, 391103]], 78) == 0\nassert solution.countPairs([[331487, 84457], [772136, 201369], [978511, 344487], [500820, 92616], [225651, 240701], [597604, 652129]], 15) == 0\nassert solution.countPairs([[982192, 651577], [159628, 282817]], 68) == 0\nassert solution.countPairs([[649527, 771825], [282876, 790732]], 97) == 0\nassert solution.countPairs([[631515, 91810], [289028, 881324], [83138, 843275], [282870, 712357], [342773, 660990], [387140, 603768]], 95) == 0\nassert solution.countPairs([[901834, 700683], [873648, 812817], [749951, 274699], [681270, 453867]], 45) == 0\nassert solution.countPairs([[68877, 742714], [641057, 828773], [76427, 93810], [16942, 204730], [751927, 957564], [333408, 333754], [601287, 206378], [229291, 869895], [562808, 819223]], 69) == 0\nassert solution.countPairs([[471633, 105141], [348676, 710796], [807894, 772024], [933301, 220701], [597454, 123719], [74285, 201636], [875098, 130784], [556532, 295629], [667886, 975401], [716266, 205747]], 72) == 0\nassert solution.countPairs([[413515, 390844], [536059, 401937], [705202, 729051]], 73) == 0\nassert solution.countPairs([[907397, 835619], [272106, 70947]], 91) == 0\nassert solution.countPairs([[183078, 918251], [21223, 474847], [977346, 687181], [642932, 123499], [559322, 890060], [641637, 862664], [142473, 392873], [5854, 252424]], 3) == 0\nassert solution.countPairs([[983576, 58775], [982503, 878286], [557570, 725901], [142404, 561645], [611381, 831824], [715879, 373272]], 34) == 0\nassert solution.countPairs([[500395, 11538], [768807, 693493], [888878, 534871], [550316, 182375], [618639, 294994], [720579, 528007], [174033, 17910]], 0) == 0\nassert solution.countPairs([[19633, 888837], [886685, 446433], [44192, 817847], [968343, 749194], [165759, 790636], [310098, 732094], [808714, 781814]], 73) == 0\nassert solution.countPairs([[637224, 543371], [197685, 926632], [574384, 645680], [616216, 151267], [537555, 604743], [997809, 759832], [199618, 825751], [323321, 421450], [59024, 80863]], 81) == 0\nassert solution.countPairs([[113313, 680692], [800041, 511214], [582222, 890854], [530396, 296211], [853550, 347035], [900938, 67631], [821496, 968764]], 85) == 0\nassert solution.countPairs([[921241, 714752], [932975, 595138], [114223, 148647], [245353, 178078], [374561, 427581], [626115, 853775]], 72) == 0\nassert solution.countPairs([[140314, 302601], [138784, 593257], [915434, 446077], [470758, 59564], [92193, 167104], [196361, 608731], [597630, 510760], [979769, 401814], [588468, 916729]], 53) == 0\nassert solution.countPairs([[81249, 720730], [743040, 774544], [251121, 270206], [396893, 915348], [809809, 394579]], 68) == 0\nassert solution.countPairs([[195699, 447788], [973996, 965244]], 82) == 0\nassert solution.countPairs([[477078, 532424], [100766, 846992], [463873, 578795], [665948, 194559], [136048, 34172], [466541, 817595], [349469, 271883], [382085, 742847], [501968, 250876]], 72) == 0\nassert solution.countPairs([[788625, 622039], [401263, 558372], [581967, 721217], [904157, 713336], [755963, 961080], [91761, 498005]], 33) == 0\nassert solution.countPairs([[250283, 175577], [883950, 903878], [530098, 76738], [295133, 260691]], 53) == 0\nassert solution.countPairs([[157974, 149816], [410956, 155286], [808178, 372354], [427100, 490444], [741986, 850075], [890983, 23539], [182430, 80320], [850645, 403716], [920634, 250548], [184658, 952658]], 30) == 0\nassert solution.countPairs([[621032, 347836], [537438, 933107], [745787, 819829], [959823, 449888], [527425, 858608]], 15) == 0\nassert solution.countPairs([[421145, 612877], [244391, 26620], [441237, 370217], [686846, 259799]], 25) == 0\nassert solution.countPairs([[797339, 535006], [550961, 350340], [98216, 138635]], 9) == 0\nassert solution.countPairs([[801510, 557858], [183976, 35399], [433760, 947007], [494673, 72769], [8163, 84303], [479967, 118748], [411702, 274180], [561941, 588763]], 66) == 0\nassert solution.countPairs([[557408, 776305], [393735, 231201], [971340, 382338], [657852, 628418], [321779, 622754], [56851, 771391], [90837, 723677], [365294, 626429]], 38) == 0\nassert solution.countPairs([[411362, 129761], [177794, 923385], [817154, 457175], [669297, 166344], [801501, 220770], [557846, 420976]], 52) == 0\nassert solution.countPairs([[698966, 555315], [853831, 824709], [284169, 468191], [27998, 278313], [172688, 896258], [758696, 50952], [29565, 928563]], 30) == 0\nassert solution.countPairs([[45932, 469302], [664767, 557892], [534044, 731597], [14716, 836428]], 77) == 0\nassert solution.countPairs([[219187, 21291], [836492, 833478], [645338, 981594], [420076, 353115], [792412, 991484], [169576, 738506], [240680, 157979], [383194, 287925], [235159, 639784]], 92) == 0\nassert solution.countPairs([[324406, 186323], [13440, 714515], [257229, 787423]], 34) == 0\nassert solution.countPairs([[959923, 286264], [177034, 42404], [907871, 560947], [829273, 1929], [774531, 53128]], 53) == 0\nassert solution.countPairs([[402203, 591641], [611661, 383663], [541035, 48472], [68867, 379219], [713093, 503710], [50386, 776101], [886757, 568450], [897562, 633704]], 78) == 0\nassert solution.countPairs([[528743, 412425], [705777, 814182]], 17) == 0\nassert solution.countPairs([[556797, 426461], [469639, 854424], [937442, 609139], [774729, 656956], [788807, 553667], [992594, 858147], [838923, 510627], [401798, 269207], [518805, 425604], [150519, 227965]], 86) == 0\nassert solution.countPairs([[804230, 293811], [896009, 251732], [250884, 390620], [103170, 959293], [731731, 473109], [908571, 854888], [831611, 275224], [507490, 971890]], 89) == 0\nassert solution.countPairs([[922656, 482817], [254028, 588857], [218761, 207846], [247096, 149202], [114949, 657246], [674828, 975609], [865465, 537363], [816082, 350291]], 13) == 0\nassert solution.countPairs([[170198, 722332], [103468, 442860], [580098, 45590], [95258, 909724], [885755, 312526], [525475, 581503], [341920, 932551], [570815, 456634], [632861, 787100], [768622, 505629]], 37) == 0\nassert solution.countPairs([[541948, 358144], [965194, 727153], [484698, 410962]], 88) == 0\nassert solution.countPairs([[450492, 407682], [918637, 121636], [252309, 62173], [476248, 889624], [495450, 683649], [957621, 98265], [556038, 145480], [53125, 921028]], 23) == 0\nassert solution.countPairs([[597202, 907562], [856008, 905804], [932556, 295581], [596272, 729448], [216459, 245301], [232594, 631494], [830404, 806798], [41119, 484740], [914214, 492137], [975225, 31705]], 62) == 0\nassert solution.countPairs([[106526, 392725], [250611, 803452], [950208, 342922], [644906, 869090], [879478, 186728]], 28) == 0\nassert solution.countPairs([[588826, 526038], [999650, 764058]], 64) == 0\nassert solution.countPairs([[584728, 472681], [829536, 635322], [419134, 676338], [736543, 163535], [7774, 764768], [602727, 549075], [759205, 930297], [125059, 495057]], 89) == 0\nassert solution.countPairs([[807882, 882581], [101804, 452167], [954572, 700104], [136376, 320077], [603818, 941946], [602849, 68302]], 41) == 0\nassert solution.countPairs([[102865, 222526], [676458, 655822], [927354, 470051], [599729, 402172], [996225, 925660]], 6) == 0\nassert solution.countPairs([[590923, 835891], [920965, 463647], [755619, 762964], [690520, 287874]], 71) == 0\nassert solution.countPairs([[868796, 73330], [728276, 46882], [368463, 679549], [3952, 169632], [324679, 851347], [811383, 140410], [197196, 696228], [783204, 593449]], 53) == 0\nassert solution.countPairs([[326832, 630238], [750394, 230248]], 43) == 0\nassert solution.countPairs([[104267, 271967], [781346, 612924], [79248, 561581], [271090, 967502], [751935, 844041], [957758, 808451], [125243, 649764], [218262, 597999], [115482, 974103]], 26) == 0\nassert solution.countPairs([[10977, 978736], [874264, 418604], [363891, 685163], [616801, 673388], [755398, 470742]], 65) == 0\nassert solution.countPairs([[19675, 423352], [26964, 929135], [575021, 513413]], 1) == 0\nassert solution.countPairs([[745262, 56105], [913123, 705836], [943270, 230960], [820608, 858493], [223027, 246442], [267140, 324006], [668903, 201475], [708457, 712897], [519787, 385361], [890362, 559377]], 20) == 0\nassert solution.countPairs([[597264, 499391], [804737, 516768], [398099, 842689], [948813, 669085], [785741, 5204]], 84) == 0\nassert solution.countPairs([[476700, 31527], [231125, 743596], [447870, 982577], [103993, 329370], [425347, 856528], [151873, 779122], [79548, 451515], [930296, 989517]], 34) == 0\nassert solution.countPairs([[135034, 232613], [273731, 109700], [733062, 754736], [660173, 449950], [847454, 741071], [438425, 981164], [499839, 887112]], 30) == 0\nassert solution.countPairs([[888104, 132752], [888717, 60920], [180375, 679157], [680290, 875129], [434645, 805484], [172453, 535631]], 98) == 0\nassert solution.countPairs([[340663, 495157], [7401, 195557], [859391, 568654], [824825, 754837], [574620, 117612], [443233, 938753], [689412, 537228], [868966, 392026], [235690, 192629]], 45) == 0\nassert solution.countPairs([[243902, 567864], [756200, 559225]], 33) == 0\nassert solution.countPairs([[102393, 368316], [295367, 360478], [569435, 451688], [996627, 319754], [537992, 343233], [670828, 173940], [931861, 334742], [301686, 864719]], 6) == 0\nassert solution.countPairs([[88299, 471213], [91762, 701236], [159786, 759163], [647304, 704202], [765561, 229126]], 68) == 0\nassert solution.countPairs([[718077, 689946], [243844, 462885], [541743, 741224], [729250, 146773], [884524, 553049], [357310, 605039], [169400, 603553]], 3) == 0\nassert solution.countPairs([[771558, 511702], [528671, 463709], [395678, 456486], [690464, 176847], [578933, 692913], [992261, 630840], [753147, 179494]], 65) == 0\nassert solution.countPairs([[983955, 180150], [200606, 954924], [887155, 562265], [257471, 62281], [445359, 385999], [673602, 436826], [966972, 833461], [296134, 355003], [999342, 715018], [935990, 490158]], 70) == 0\nassert solution.countPairs([[856113, 12609], [191387, 456024], [123166, 163056], [225147, 920917]], 90) == 0\nassert solution.countPairs([[310170, 682334], [845069, 995611], [646897, 14139], [749601, 360182], [936158, 226542]], 3) == 0\nassert solution.countPairs([[6411, 611888], [41528, 187179], [359210, 139608], [742797, 791556], [355362, 645225], [11737, 984342], [681175, 408937], [927162, 417865]], 31) == 0",
  "inefficient_solution": "class Solution:\n    def countPairs(self, coordinates: List[List[int]], k: int) -> int:\n        points = [[(x, y) for y in range(10**6 + 1)] for x in range(10**6 + 1)]\n        ans = 0\n        for x2, y2 in coordinates:\n            for x1 in range(10**6 + 1):\n                for y1 in range(10**6 + 1):\n                    if (x1 ^ x2) + (y1 ^ y2) == k:\n                        ans += points[x1][y1]\n            for x in range(10**6 + 1):\n                points[x][y2] += 1\n                points[x2][x] += 1\n        return ans",
  "is_python": true
}