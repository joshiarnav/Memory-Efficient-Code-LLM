{
  "problem_idx": 1594,
  "task_name": "Maximum Non Negative Product in a Matrix",
  "markdown_description": "\nYou are given a `m x n` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only **move right or down** in the matrix.\n\n\nAmong all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(m - 1, n - 1)`, find the path with the **maximum non-negative product**. The product of a path is the product of all integers in the grid cells visited along the path.\n\n\nReturn the *maximum non-negative product **modulo*** `109 + 7`. *If the maximum product is **negative**, return* `-1`.\n\n\nNotice that the modulo is performed after getting the maximum product.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1594.Maximum%20Non%20Negative%20Product%20in%20a%20Matrix/images/product1.jpg)\n\n```\n\n**Input:** grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]\n**Output:** -1\n**Explanation:** It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1594.Maximum%20Non%20Negative%20Product%20in%20a%20Matrix/images/product2.jpg)\n\n```\n\n**Input:** grid = [[1,-2,1],[1,-2,1],[3,-4,1]]\n**Output:** 8\n**Explanation:** Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8).\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1594.Maximum%20Non%20Negative%20Product%20in%20a%20Matrix/images/product3.jpg)\n\n```\n\n**Input:** grid = [[1,3],[0,-4]]\n**Output:** 0\n**Explanation:** Maximum non-negative product is shown (1 * 0 * -4 = 0).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 15`\n* `-4 <= grid[i][j] <= 4`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        mod = 10**9 + 7\n        dp = [[[grid[0][0]] * 2 for _ in range(n)] for _ in range(m)]\n        for i in range(1, m):\n            dp[i][0] = [dp[i - 1][0][0] * grid[i][0]] * 2\n        for j in range(1, n):\n            dp[0][j] = [dp[0][j - 1][0] * grid[0][j]] * 2\n        for i in range(1, m):\n            for j in range(1, n):\n                v = grid[i][j]\n                if v >= 0:\n                    dp[i][j][0] = min(dp[i - 1][j][0], dp[i][j - 1][0]) * v\n                    dp[i][j][1] = max(dp[i - 1][j][1], dp[i][j - 1][1]) * v\n                else:\n                    dp[i][j][0] = max(dp[i - 1][j][1], dp[i][j - 1][1]) * v\n                    dp[i][j][1] = min(dp[i - 1][j][0], dp[i][j - 1][0]) * v\n        ans = dp[-1][-1][1]\n        return -1 if ans < 0 else ans % mod\n",
  "test_case_generator": "\nimport random\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    m = random.randint(1, 15)\n    n = random.randint(1, 15)\n    grid = [[random.randint(-4, 4) for _ in range(n)] for _ in range(m)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxProductPath(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxProductPath(grid) == expected_result\n        print(f\"assert solution.maxProductPath({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxProductPath({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxProductPath([[-4, 0, 0, 3, 4, -1, 1, -3, -4, 2, 0, -3], [2, -2, 1, -4, 2, -2, -2, -2, 2, -4, -4, -4], [1, 1, 0, -2, 4, 2, -4, 1, -3, 3, 4, 1], [-4, 1, -2, 2, -3, -2, 1, 4, -4, -1, 0, 1], [4, -1, 3, -4, 4, 2, -2, -4, 3, 4, -3, 3], [3, -4, -4, 4, -1, 4, -3, 3, 3, -4, -4, -2], [0, -1, 1, 4, 4, 0, -2, 0, 4, 3, -2, -2], [-1, 0, -3, 4, 3, -4, 0, 0, -2, 2, -4, 1], [2, 0, 2, 3, -2, 1, 4, -1, 2, -2, 1, 0], [1, 4, -1, -2, 0, -1, 1, -4, 1, -4, -4, -2], [1, 2, 1, -2, -4, 4, 1, -3, 2, -1, 3, 2]]) == 230590380\nassert solution.maxProductPath([[3], [3], [-2], [-2]]) == 36\nassert solution.maxProductPath([[2, -4, -4, -3, -4, 4, -4, -2, -1, -2, -2, 4, -2, 1, 0], [3, 1, -4, 1, 2, -3, -4, 4, 3, -3, -1, 2, -3, -3, -3], [3, -2, -1, 0, -4, -1, 4, 4, 2, 4, 2, 2, 3, 3, -1], [-4, 4, -3, -1, -1, -4, -2, 2, -3, -2, -4, 4, 0, 3, -3], [-3, -3, -2, 2, 3, -2, 3, -4, -2, -3, -3, 2, -1, -4, 1]]) == 528823801\nassert solution.maxProductPath([[-4, -2, 4, -3, 2, -3, -3, 1, -1, -1, -1, -3, 0], [3, -4, -4, 1, 3, 0, 4, 2, 4, 0, -1, 1, 1], [4, -4, 2, -4, -3, 2, -4, 4, 3, -3, 2, -1, -3], [2, 2, 0, -3, 4, 1, -1, -2, 3, -2, 1, -3, 0], [-1, 1, -3, -4, 0, 3, 1, -4, -4, 1, 3, -1, 3], [4, 1, 2, 0, -4, -3, 2, 3, -2, 1, 2, 1, 2], [-4, 2, 4, -2, -4, -4, 3, 2, 0, 3, -1, -1, -1], [3, 3, 1, 2, -2, 3, 4, 4, 4, -2, 4, 2, 4], [3, -1, 0, 2, -1, -3, 0, -3, -4, -3, -2, -1, -3], [-4, -1, -1, -4, -4, 1, 4, -1, 4, -4, 1, 2, -2], [4, 0, -4, -1, -4, -3, 0, -2, -2, -2, 4, 0, 3], [-1, -3, 0, 4, 0, 4, 1, -2, 0, 3, -2, 4, 4], [3, 0, 2, -3, 2, 0, 1, 3, 2, 4, 4, 2, -3], [3, 0, 4, -1, 1, 2, 2, 1, -3, -2, -1, 2, 3]]) == 186821202\nassert solution.maxProductPath([[-4, -1, 3, 1, 0, -2, 0, 2], [0, 4, -3, -2, -4, -4, 0, 3], [-2, 3, 3, -2, 0, -1, 1, 4], [4, -3, 4, 0, -2, 1, 0, -4], [1, -2, 2, -3, 2, -2, 2, 0], [-3, 2, 2, 0, 0, -4, -1, 1]]) == 55296\nassert solution.maxProductPath([[-4, -3, 2, 3, -2], [-1, -2, 4, -3, 0], [-1, -4, 2, -1, 3], [2, 4, 0, -3, -4], [2, 3, 0, 4, 0], [0, -3, -3, -4, 3], [3, 3, 4, -3, -4], [4, 2, 0, 2, 4], [-2, 3, -2, -2, -2], [3, 1, 2, -4, 2], [-2, 3, -4, -1, 0], [2, -3, -3, 0, 2], [-4, -2, -2, 3, 4]]) == 53747712\nassert solution.maxProductPath([[3, -2, 0, 1, 0, 3, 2], [0, 2, 3, 0, -2, -1, -4], [-1, -2, 1, -3, 0, 3, -3], [-2, 4, -4, -3, 4, -3, 3], [-2, 0, -4, -3, 3, -3, -1], [1, -1, 0, -4, 4, 4, -1], [1, 1, -3, -3, -1, -1, -3], [2, 1, -1, -3, -2, 1, -1], [-1, 1, 2, 3, 1, -4, -3], [-2, -1, -3, -1, 0, 4, -1], [-1, 1, 3, -4, -3, 2, -1], [4, 1, 1, -4, 4, 1, 2], [2, -1, -3, -4, -4, -4, 4], [-3, 2, -1, 4, -4, 1, 1]]) == 38431730\nassert solution.maxProductPath([[0, 1], [2, 0], [2, 0], [-2, 3]]) == 0\nassert solution.maxProductPath([[4, -1, -4, -2], [-2, 0, -1, -1], [-1, -3, 4, -4], [-4, 4, 4, -1], [1, 2, 3, 3], [2, -4, 4, -4], [-4, 0, 3, -2], [-2, -2, 4, 1], [-2, -4, -3, 4], [-1, 0, 2, -3], [0, -2, 4, 0], [-2, 1, 1, -1], [4, -2, 4, 3]]) == 21233664\nassert solution.maxProductPath([[-1, 0], [1, -2], [-3, 4], [-3, 3]]) == 36\nassert solution.maxProductPath([[2, -1, -1, -1], [-4, 3, 2, -2], [2, 0, 4, -3], [0, -1, -2, 3]]) == 1728\nassert solution.maxProductPath([[0, 0]]) == 0\nassert solution.maxProductPath([[-4, 0, -1, -2, -4, 4, -4, 4, 2, 4, -1], [-1, 1, 0, -2, -1, 4, -4, -1, -3, -4, 3]]) == 0\nassert solution.maxProductPath([[1, 4, -1, -3, -1, -4, -1, -1, -4, -3], [4, -1, 3, -4, 2, -3, 4, 1, -3, -1], [1, -4, 0, 2, -4, -1, 3, 4, 2, -3], [-2, 1, 1, 1, 0, -4, 4, 1, 4, -4], [-4, -4, 1, 4, -4, -3, 3, -4, -1, -2], [2, -4, 3, 0, 2, 2, -2, -2, -4, -1], [1, -3, -3, -4, 4, 1, -4, -4, -2, -2], [4, 1, 1, -4, 0, 1, -2, 2, 1, 0], [2, 1, -1, -4, 4, 0, 3, -2, -1, 0], [-4, -2, 1, -3, 1, -2, -2, -4, -3, 4]]) == 254803968\nassert solution.maxProductPath([[-1, -3, 3, 3, 2, 0, 3, -2, 4, 2], [4, 1, -3, -2, 3, 1, 2, 3, -4, -1], [-1, -4, 2, -1, 1, -3, 4, -1, -2, 2], [4, 0, 0, -3, 2, 2, -3, 3, -3, 2]]) == 104976\nassert solution.maxProductPath([[1, -4, -3, -3, -1, -1, -2, -2, 4], [4, 1, -4, -1, 3, -2, -1, -3, 1], [3, -1, 4, 1, -4, 0, -2, -4, 4], [1, 4, -1, 3, -3, 0, -3, -1, 2], [0, -3, 2, -4, -2, -2, -2, -1, 4], [-1, -1, 4, -1, 4, 1, -2, -1, 2], [-1, 2, -2, 3, -4, 1, 2, 2, -1], [4, -1, -1, 1, 1, 1, 2, 2, 2], [1, 2, -2, 0, 1, 2, -1, -2, -3]]) == 3538944\nassert solution.maxProductPath([[-1, 4, -4, 4, 1, 2, -3], [0, -1, -1, -2, -4, 0, 0], [0, 2, 1, 4, -3, 3, -4]]) == 18432\nassert solution.maxProductPath([[-1, 0, -1, -4, -2, 4, 4, 2], [2, -2, 3, -2, -2, 2, -4, 1], [1, -3, 0, -4, 2, 3, 0, 4], [4, 0, 3, -3, 3, -4, -4, 1], [-3, 0, 0, 4, -3, 3, -3, 1], [0, -4, -3, -3, 3, -2, -1, -2]]) == 82944\nassert solution.maxProductPath([[2, -1, 1, -3, -2, 0, 3, 0, 2, 3, 4, 0, 3, 2, 1], [4, -4, -2, -3, 0, 3, 4, 2, 0, 0, -2, -4, 2, 2, 2], [-1, 4, -1, -3, -2, -1, -1, 0, 1, 2, 2, 3, 1, 3, 0], [-2, 1, -4, 2, -3, -1, 2, -3, -2, 3, 4, 0, 1, 0, -2], [1, -4, -4, 2, 2, -4, -2, 0, 0, 2, 2, 3, -2, -2, 3]]) == 35831808\nassert solution.maxProductPath([[-3], [4], [2], [-4], [-3]]) == -1\nassert solution.maxProductPath([[2, -2, -2], [2, -3, 1], [4, 1, -2]]) == 24\nassert solution.maxProductPath([[-1, -2, -3, 1, 1, 2, 3, 2, 0, -3, 3], [3, 1, -3, -4, 0, -2, 1, 0, 3, -4, 0], [4, -1, -2, -4, -2, 2, -1, -2, -3, 0, -4], [-3, 4, 1, -1, -2, 4, 3, -4, -3, 0, -1], [-4, 2, 4, 1, -3, -2, 2, -3, -3, -2, 2], [3, 2, -1, -2, -4, -3, 4, 0, -3, -3, 3], [-3, -4, 0, -4, -1, 3, 2, -2, -1, 3, 1], [4, 3, -4, 4, 3, 2, 4, 1, -1, 3, -2], [1, -1, -2, -4, 4, 2, -4, 1, 2, -3, 3], [2, 3, -4, -4, 4, -4, 0, 3, -2, 2, -4], [2, 1, 1, -4, 2, 1, -1, 3, -2, 4, -1]]) == 293235698\nassert solution.maxProductPath([[4, 0], [2, 0], [-3, -1], [3, -1], [-2, 3], [-2, -2], [3, -3], [-2, -1], [2, -1], [-3, 1], [-1, -2], [-3, -4]]) == 124416\nassert solution.maxProductPath([[4, 0, 2]]) == 0\nassert solution.maxProductPath([[4, 3, 2, 2], [3, -2, -3, -1], [3, -2, 3, -4], [2, 2, -2, -2], [4, 1, 1, -4], [-1, 1, -1, -4], [1, -4, -3, 1], [1, -1, -3, -4]]) == 110592\nassert solution.maxProductPath([[-4, -2, 0], [1, -1, -1], [0, -1, 2], [0, 0, 3], [-1, 2, 4], [-1, 4, 3], [4, -2, 3], [2, 4, -1], [-2, -3, -3], [1, 2, 1], [1, -3, -3], [-1, -2, -3], [-4, -2, 2], [1, 2, -2], [4, 3, 2]]) == 186624\nassert solution.maxProductPath([[4, -4, -3, 1], [0, 4, 4, 0], [3, -3, -2, 1], [-4, 2, -4, 2], [-2, 1, 1, -3], [3, 0, 2, -1]]) == 9216\nassert solution.maxProductPath([[4, -2, 4, 0, 1, -4, 4, -2, -4, -3, -4, 4, 1, 0], [-1, 0, 2, 2, -2, -1, -4, 2, -1, 3, -4, 2, 1, -4], [-2, 4, -1, -3, -3, 0, 1, 4, -2, -4, -3, -2, -3, 0], [2, -1, 3, -1, 1, 2, -3, 4, 2, 4, 3, 2, -2, 2], [-1, 3, -4, 0, 1, -1, -2, 1, 0, 0, 2, -3, 1, -3], [0, 3, 4, -2, 0, -1, 4, 2, 0, -4, 3, 0, 0, -2], [2, 3, -4, 0, 1, 2, -3, -3, -1, -4, 2, 2, -2, 1]]) == 28311552\nassert solution.maxProductPath([[-3, -4, -3], [1, 4, 0], [1, 3, 0], [-2, -3, 0], [-1, 2, 3], [1, 3, 1], [-3, -3, 3], [-2, 1, -3], [-2, 0, 4], [1, -3, 4], [-1, 3, 2], [-4, 1, -1], [2, -3, 3], [-1, -3, -3], [-2, 0, -3]]) == 60466176\nassert solution.maxProductPath([[-1, 3, 0, -4, -3, 4, 2, 1], [1, 4, -4, 4, 3, -2, -3, 3], [2, 0, -2, 4, 0, 3, 4, -4]]) == 55296\nassert solution.maxProductPath([[-2, 0, 4, -1, 3, 0, -3, -3, 3, 2, 3], [-2, -4, 3, 0, -4, -1, 0, 3, 4, 4, -3]]) == 0\nassert solution.maxProductPath([[1], [1], [2], [2]]) == 4\nassert solution.maxProductPath([[0, 2, 2, -2, 4], [0, 0, 4, 1, -4], [-3, -3, 2, 4, 4], [4, 0, -3, 0, 3], [-1, -1, 3, 1, 4], [0, 2, -2, -4, -3], [-2, 3, 4, -4, 2]]) == 0\nassert solution.maxProductPath([[1, 1]]) == 1\nassert solution.maxProductPath([[-2, -4, 2, -3, -3, 0, -2, 3, 0]]) == 0\nassert solution.maxProductPath([[4, 4, 4, -3, 4], [-2, 0, -1, 0, -1]]) == 768\nassert solution.maxProductPath([[0, 2, 1, -2, 1, -4, -2, 1, 2, 0], [-2, -1, 2, -1, 1, -2, 1, -2, 0, 3], [2, -1, 2, 0, 2, 2, -2, 3, 0, 0], [-3, 0, 1, -2, -1, -2, 3, 0, -1, 4], [-4, 2, -4, 2, 2, -1, 3, -2, -1, -1], [4, 0, 4, 0, 3, 0, 0, 1, 3, -3], [0, 2, 1, -2, 1, 3, -2, 0, 0, 2]]) == 0\nassert solution.maxProductPath([[4, -4, 2, 2, -2, -1, 4, 4, 1, -4, 3], [-2, 1, 0, -4, 4, 0, -3, -4, 3, 4, -2]]) == 147456\nassert solution.maxProductPath([[-4, -4, 3, 2, -4, 0, 3, 4, -4], [-4, 3, 3, -1, 4, 3, -3, -3, -2], [-1, -4, -1, -2, 2, -3, 1, 3, -2], [-4, 0, 4, 2, 1, -1, 2, -2, -2], [-2, -3, -1, 0, -2, -3, 1, 0, -2], [-4, 1, 4, 4, -1, 0, 2, 4, 2], [1, 2, 4, 1, 1, 3, 0, -3, -2], [-4, -4, 2, -3, 1, 2, 2, 1, -3], [4, -1, -3, 2, 2, -3, 3, -1, 1], [-1, -1, -3, -2, -3, -2, 1, 2, -2], [0, 1, 4, -4, -2, -3, 1, 3, -1], [4, 2, 0, 4, 4, -4, 0, -3, -4]]) == 764411904\nassert solution.maxProductPath([[3, -1, 3, -3, -3, -1, -1, -2, 1], [0, -1, 1, -4, 3, 1, -3, -4, 3], [-3, -3, 3, -2, 4, 1, 0, 1, 1], [-4, 3, 0, 4, 1, -4, 1, 4, -3]]) == 46656\nassert solution.maxProductPath([[-4, 3, -2, 0, -3, 2, -4, 4, 2, -3], [0, -1, 0, 4, 0, 0, 2, -1, 2, 0], [-1, 1, -1, 0, 1, 1, -4, 2, 2, 1], [4, 4, -4, -3, 1, 0, -2, -3, 0, -3], [-4, 0, -1, -2, 0, -2, -1, 2, 0, 2], [-2, -2, 2, 0, -1, -2, 4, -1, -3, 0], [0, 4, 1, 2, -3, 0, -1, 3, -2, -2]]) == 0\nassert solution.maxProductPath([[0, 2, 2, 1, 2, 4, 2, 4]]) == 0\nassert solution.maxProductPath([[1, 3, 2, 4, 0, -2, -3, -1, 2, 1, 4], [0, 3, -4, -1, -3, -4, 3, 3, 3, -4, 0], [-1, 1, 3, 0, -1, -2, -3, -1, 2, -3, -1], [0, -4, 0, -4, -2, 3, -4, -1, -3, 0, -3], [-1, 1, -2, 4, -4, -3, 3, -4, 2, 3, -1], [-2, 4, 4, 0, 4, 0, 3, 1, 2, -2, 4]]) == 8957952\nassert solution.maxProductPath([[0, -2, -4, 3, 0, -2, 4], [-3, -4, 3, 1, -3, 1, 2], [-2, -4, 1, -1, 3, -4, 4], [1, 1, -3, 0, 1, -3, -3], [3, -1, -1, 1, -4, -3, 1], [-3, 1, 2, 3, -2, 0, -2], [-3, 0, 0, -3, -2, -2, 1], [1, -3, 2, 1, -2, 4, 4], [4, 1, 1, 0, -4, 3, -1], [-3, -4, -3, -4, -4, -2, 4], [-1, -3, 2, 4, 2, 2, -4], [-4, -4, 2, 2, 0, 0, -1], [4, -4, 0, 4, 1, -2, -4]]) == 0\nassert solution.maxProductPath([[3, -3, 4, -1, -2, -4, 3, 3], [0, 3, -1, 1, 1, -2, 4, -1], [-4, -4, -2, 0, 1, 1, -4, 3], [-2, 0, 3, 1, 4, 4, -3, -4], [3, -2, 2, 3, 4, -1, 4, -4], [-4, -1, -4, 2, 2, 2, -2, -2], [-1, -1, -3, -4, -1, 1, -1, -4], [-2, -4, 1, -2, -2, 3, 2, 2]]) == 10616832\nassert solution.maxProductPath([[4, -1], [4, -3], [-3, 2]]) == 24\nassert solution.maxProductPath([[4], [1], [3], [-4], [0], [0], [1], [0], [-2], [1], [1], [3], [3], [-3], [1]]) == 0\nassert solution.maxProductPath([[-2, -1, 1, 4, -2, 2], [-1, -3, 3, -1, -1, -1], [-4, 1, -4, 0, 2, -4], [0, -4, 4, -3, -1, 2], [1, 0, -3, -2, 0, -1], [-3, -2, 1, -3, 4, -4], [3, 3, -1, 3, 1, -1], [-4, -3, -1, -3, -3, 4], [0, 4, -1, -2, 2, 0], [0, -2, -2, 1, -1, 3], [-1, 1, 3, -3, 3, -1], [4, -1, 2, 3, 4, 3], [-2, -3, -1, 4, 0, 2], [-2, -3, -3, -4, 0, -1], [-1, 1, -1, 0, 4, 1]]) == 10077696\nassert solution.maxProductPath([[-2, 0, 0, 1, -1, -4, -3, 2], [0, -3, -3, 1, -2, 3, -1, -3], [4, 1, 3, 1, 0, -3, -3, -2], [3, 4, 2, -1, -1, -1, 2, 4], [-1, 4, 0, -1, 4, 4, -2, -3], [4, -3, 0, 2, -4, 4, 0, -3], [3, 3, -2, 1, 3, 2, -2, -1], [0, -1, -2, 1, 0, -2, -3, -4], [1, -1, -3, -2, -2, 2, -2, -3], [-2, -3, -3, -3, -4, 2, -2, 4], [3, 3, -1, 3, -2, -3, 2, 1], [-2, 0, 0, 1, 4, -2, 1, -4], [4, -1, 4, 4, -1, 2, -1, 1], [2, -1, 0, -2, -2, -2, 1, 2]]) == 0\nassert solution.maxProductPath([[-2, -1, 2, 1, 2, -1], [-3, 1, 0, 1, 0, 3], [-1, -2, -1, -1, 4, 1], [3, -1, -2, -4, 4, -1], [3, 4, -2, 2, -1, -3], [0, -4, -3, 0, -4, -1], [-1, 0, 1, 1, -1, 2], [2, 0, -4, 0, -3, -3], [2, 0, 0, -1, -4, -3]]) == 124416\nassert solution.maxProductPath([[-4, 1, -4, 0, 3, -3], [3, -2, 3, 2, 1, -1], [-2, 3, -3, -3, 2, -1], [2, -2, -2, -4, 4, -3], [-3, 2, 0, 0, -4, -4], [-2, -2, -3, 0, -3, 4], [1, 2, -3, -4, 3, -3], [-2, 4, 1, 0, 1, 2], [3, 1, 3, 4, 2, 2], [-4, -2, 4, -1, 4, -1]]) == 5308416\nassert solution.maxProductPath([[1, 2, 1, 1, -4, 1, 0]]) == 0\nassert solution.maxProductPath([[2, -1, 1, -2, 4], [-1, -4, 3, -2, 3]]) == 48\nassert solution.maxProductPath([[-1, 1, -2, 0, 0, 3, -3, 1, 0, -1, 4, 1, -4, -3], [0, -1, 0, -2, -4, 0, 2, 2, 1, 2, 3, 4, 1, -1], [2, -3, 0, 2, 2, 1, 2, -1, -3, 1, 2, -4, 3, 1], [-1, -2, -1, 3, -4, -3, -2, 2, 3, 3, -2, -2, 0, 4]]) == 0\nassert solution.maxProductPath([[0, -3, 3, -4, 1, 4, -4], [-1, 1, -2, 3, 4, 3, 1], [-1, 3, -1, 0, 1, -4, 2], [3, -4, 4, -3, 1, -3, 2]]) == 0\nassert solution.maxProductPath([[0, -4, -3, 2, 3, -3, 3, 3, 1, -1, 4, -4], [-3, 1, -4, -1, -2, 3, -4, 4, 3, -3, 4, -1], [1, -2, 4, 4, -4, 0, -2, 0, 1, -4, -2, -1], [-1, 0, -2, -4, 2, 3, 4, 1, -3, -1, -2, 1]]) == 0\nassert solution.maxProductPath([[1, -3, 0], [-3, -2, -2], [-1, 4, 3], [-3, 3, 0], [2, 2, 3], [-1, -3, 2]]) == 864\nassert solution.maxProductPath([[2, 0], [2, -3], [-3, -2], [-2, 0], [-4, -2], [-4, 0], [4, 2], [-1, 1], [0, 4]]) == 12288\nassert solution.maxProductPath([[0], [-3]]) == 0\nassert solution.maxProductPath([[-3, -1, -2, 1, 3, 1, 4, -3, 4], [1, -2, -4, 3, -2, 0, 1, 4, -3], [-2, 4, -2, -4, 1, 2, 4, -2, -3], [2, 0, -3, 0, 0, -3, 1, -3, -2]]) == 27648\nassert solution.maxProductPath([[3, 2, 0, -1, 3, -3], [-2, 0, 4, -2, 0, 1], [3, -4, 1, -1, -4, -1]]) == 0\nassert solution.maxProductPath([[3, 1, 4, -1, 1, 3, -3, -3], [0, 3, 0, -3, 2, 0, -3, 3], [0, 1, 2, 4, -4, -4, -2, 0], [-3, 3, 3, 1, -1, -3, 1, -4], [-4, -4, -1, -1, 4, 0, -2, 1], [0, 2, 3, 1, -1, 4, 3, -3], [3, 1, 2, -3, 4, -4, -2, 1], [-2, 2, 3, 3, 1, -4, 2, -3]]) == 884736\nassert solution.maxProductPath([[-1, -4, 2, 2, -3], [-1, 1, 3, 1, 4], [-3, 2, 4, -1, -1], [-4, -3, 1, 4, -4], [-2, -3, -3, -2, 1], [3, 0, 3, -4, -3], [-2, -3, 3, -2, 0]]) == 0\nassert solution.maxProductPath([[-3, -2, 1, -4, -4, 1, -3, 4, 2, 4, -2, -4, -2, -1, -4], [-3, 0, 4, 3, 0, 3, -4, -2, -4, 4, 1, 2, -4, 0, -4], [2, -3, 0, -4, 1, 0, 0, 1, 1, -4, -4, -1, 1, 3, 2], [1, -1, -2, 2, -2, 2, 4, 3, 0, 0, 3, -2, 1, -4, 4], [-4, -1, -4, 2, 3, -2, -1, 1, 3, 0, 3, -3, 4, 2, 0], [1, 3, 3, 4, 4, 3, -3, 2, 4, -2, 4, 1, 1, 2, -2], [-1, 3, 3, 0, -1, 1, 4, 4, 2, 4, 2, -2, -1, 2, 1], [0, -4, 0, 1, 4, 4, -3, 3, 0, -2, -4, 3, -1, -3, 3], [0, 3, 3, 1, -2, 3, 3, 3, -4, -4, 3, 3, 3, 0, -4], [2, -4, -2, 4, -4, 1, -4, -4, -1, 2, -2, -2, -2, -1, 1], [0, -2, 2, 1, -2, -2, -2, 3, 1, -1, 3, 2, -3, 4, 0], [-3, -4, 1, 1, -4, 3, 2, 0, -4, 0, 2, 3, 0, -3, 0], [4, -1, 3, -1, -1, 0, 0, -3, 0, -2, 0, -4, -2, -2, 1], [-3, -2, 4, 0, 3, 3, 2, 4, 3, 4, 3, -2, -1, -4, -4]]) == 267695584\nassert solution.maxProductPath([[2, -4, -4, -2, -4, -1], [-2, 1, -3, 4, 2, 2], [-2, 4, -2, 0, 1, 3], [2, -2, -2, -2, -2, 4], [-1, -4, 0, 1, -2, 1], [0, -1, -2, -4, -3, -1], [4, 0, 4, -2, -4, 0], [1, 3, -3, 3, 2, -4], [-1, 1, -2, 0, 3, 3], [-4, -3, 2, -4, 0, -2], [4, 1, -3, -2, -1, -4], [-4, 3, -2, 2, 4, -3], [-3, -2, 3, 2, 4, 4], [-2, -2, -2, -2, -4, -3], [-1, 1, 0, 2, 1, 1]]) == 254803968\nassert solution.maxProductPath([[-4, 4], [-4, 4]]) == 64\nassert solution.maxProductPath([[4, 1, 2, -3], [1, 2, 2, 0], [1, -4, 0, 2], [-2, 4, 2, -2]]) == 512\nassert solution.maxProductPath([[4, 0, -4, -1, 2, -2, 3, -1, 2], [3, -1, 4, -3, -1, 1, 4, 3, 1]]) == 0\nassert solution.maxProductPath([[-3, 2, 1, 2, -4, 3, 2, 1, -1, 1], [-4, -1, -1, -2, -3, 0, 0, 3, 3, 4], [4, -2, 3, -3, -1, 3, -2, -1, 4, 0], [3, 0, 1, -2, 0, -4, -4, 4, 3, 2], [4, 0, -4, -2, 1, -4, -1, -3, -1, 0], [3, 0, 0, -2, 2, 2, 2, 3, -2, 4], [2, 2, 2, 0, 1, -4, 3, 4, 3, 1], [-2, 2, -2, 2, 0, -1, 4, 0, 2, 1], [3, 0, -3, 4, -3, 3, -1, 3, 1, 1], [-2, 2, -4, 1, 2, 3, 4, -3, -3, -2], [2, 3, -3, 4, 0, -1, -1, -4, -4, -3], [-4, -2, -4, 4, -3, -2, -4, -2, -3, 2], [-4, -2, 1, 3, -2, -4, -4, 4, 1, 0], [0, 1, 3, 2, 1, 1, 3, 4, -2, 4]]) == 689446059\nassert solution.maxProductPath([[1, 2, -2, -2, 3, 2, 4, 2, 2], [-2, -4, 3, -4, 2, 3, -4, 3, -3], [-3, 4, 2, 0, -4, -2, 3, -1, -4], [-4, -4, 2, 2, -3, -3, 1, -1, -1], [0, 1, -1, 3, 3, 0, -4, -4, 0], [-3, 2, 4, -1, 2, 1, 0, 0, 1], [1, 2, -1, 4, 1, 0, 0, -4, 0], [-2, -2, 4, 3, 3, 3, -3, -2, 1]]) == 995328\nassert solution.maxProductPath([[3, -4, 3, 1, 3, 1, 3, 1, 2, -4, 1, -2], [2, -4, -3, 4, -4, 0, 0, -2, 4, -4, 3, -1], [0, 4, -1, 4, -1, 1, -4, 3, 4, -1, -3, 2], [0, -1, 0, -3, 3, -2, -1, 0, 2, 1, 3, 2], [-4, 3, 1, -4, 4, 1, -3, 4, -3, 2, -2, -2], [0, 0, -4, 3, -4, 1, -4, -1, -2, -3, 3, 4], [-3, 0, 1, 0, 0, 2, 2, 4, 1, 4, 2, 3], [4, -2, 1, 1, 3, 3, 1, 4, -1, -4, 1, 3], [4, -1, -4, 3, 4, -2, 0, -2, 4, -4, 3, -1], [4, 1, -1, 1, -2, 3, -4, -1, -1, -3, 1, 0], [-3, 3, 3, 0, 4, 2, -3, 0, -1, 0, 4, 2], [-2, -2, -4, 0, -2, 2, 2, -3, -2, -1, 2, 2], [-4, 3, -1, -3, -4, -1, -4, 3, 2, 2, -3, -3], [-4, 3, -4, 2, 4, -4, 1, -4, -3, 3, 1, 1], [3, -4, -2, -2, 1, 4, 3, 0, -1, 3, -2, 3]]) == 25096461\nassert solution.maxProductPath([[2, -2, -4, 1, 0, 0, 4, 2, -2, -3, 0, 4, 4], [4, -4, 3, -3, 2, -3, 4, -1, 2, 4, -2, 2, 0], [0, -4, 1, -3, 0, 0, -1, 4, 3, 2, 4, -3, -4], [4, 1, 4, -3, -4, -3, -3, -1, -2, 2, -2, 4, 4], [-2, 0, -4, -4, -3, 1, 1, 1, -2, 2, -2, -2, 4], [2, -1, 4, -4, -4, 4, -1, 3, 1, -2, 2, 1, 3], [1, -2, -3, -4, -4, -3, -3, 2, 1, 0, 3, 2, 0], [-3, 0, -2, 4, -3, 4, -2, -2, 0, 0, 4, -3, 2], [-2, 0, 3, 2, 3, -1, 4, 0, -2, 0, 1, 0, 0], [2, -2, -1, 1, 0, 2, -2, 0, -1, -2, -2, 2, -1], [3, 0, 0, -2, 0, -3, -2, -2, -4, -4, -4, -4, -3], [-4, -2, -3, -2, 3, 0, 0, 0, -2, -4, 0, -4, 0], [2, 2, -4, 4, 4, -3, 2, 2, -1, 3, 4, 4, 4], [0, 2, -3, -4, -4, -4, 0, 0, 0, 2, 0, 1, 4], [0, 4, 2, -2, -1, 1, -2, -1, -2, 0, 3, 3, 0]]) == 0\nassert solution.maxProductPath([[-1, 2, 0, -4], [-4, 3, 2, -3], [2, 3, 4, -2], [0, -3, 3, -1], [1, -1, 4, 3], [-4, -4, 4, -2], [0, -4, -2, -4], [-1, -3, -3, 1]]) == 55296\nassert solution.maxProductPath([[-2, 2, -1, -1, -1, -1, 0, 1, 0, 0], [-1, 4, 2, 2, 1, 4, 3, 1, 1, -4], [1, 3, 3, 4, 1, 4, 4, 4, -1, 4], [1, -4, 2, 1, 4, 1, -2, 4, 3, 3], [4, 0, -4, 0, -2, 0, 1, -4, -2, -1], [-1, -4, -3, 4, 3, -1, -2, 1, -3, -3], [-1, -3, 0, 4, -2, -1, -1, 3, 3, 2]]) == 21233664\nassert solution.maxProductPath([[-1, -1], [-4, -4], [-4, 1], [-2, -4], [1, 1], [-4, -3]]) == 384\nassert solution.maxProductPath([[2, 0, -3, 1, 1, 3, -2, -1, -1, -1, 2], [-2, 2, 4, -2, 2, 4, -2, 0, 2, -4, 2], [4, -4, -4, 0, -4, -4, -4, 1, -1, 4, 4], [3, 0, -3, 2, -3, 3, -2, 2, 1, 4, 1], [-4, 2, 4, 3, 4, -3, 2, 4, 4, 2, -4], [-2, -2, 2, 1, 0, 3, 0, 4, 2, -1, 4], [-1, -1, -4, 1, 0, 3, 3, -4, 0, 1, -3], [4, -3, 4, 1, -4, 1, -4, -3, 3, 0, 2], [0, -1, 1, -2, 4, 4, -3, -1, 0, 3, -1], [-4, 4, 2, 3, -1, 4, 4, 3, 0, 4, 4], [0, -1, 3, 3, 3, 3, 1, -4, -2, 3, 3], [2, 2, -1, -3, -3, 4, -3, 0, 2, -3, 4], [-2, 0, 4, 2, 3, 2, -2, -2, 1, -3, 3], [2, -1, -2, 1, 0, 2, 4, -1, -4, 2, 4]]) == 16730974\nassert solution.maxProductPath([[-4, -2, 2, 4, 3, 3, 2, -2, 3, 0, -1], [-4, -1, -4, 4, -1, 1, -3, -2, 4, 4, -4], [0, -3, 4, 1, 4, -4, -2, -4, 4, 4, 1]]) == 524288\nassert solution.maxProductPath([[-1, 2, 0, -3], [1, 0, -4, -3], [3, 3, -4, -1], [-1, 2, -4, 0], [-4, -4, 2, 2], [-2, 4, -3, 2], [0, -3, -4, -4], [-3, -4, -3, -2], [1, 3, 2, -3], [3, 0, -3, 3], [0, -3, -2, 0], [-2, -4, -3, 3], [3, 3, -3, 2], [-4, -4, 1, -4]]) == 8957952\nassert solution.maxProductPath([[0, -1, -3, -2, -3, -3, 4, 0, 3, 4, -1]]) == 0\nassert solution.maxProductPath([[2, -4, -2, 4, 1, 4, -2, 2, 4, 2, 3, 0]]) == 0\nassert solution.maxProductPath([[-3, 1, 1, 4, -3, -1], [3, 0, -3, -4, 1, 3]]) == 144\nassert solution.maxProductPath([[-3, 4, -2, 1, 2, -4, -4, -2, -4, 0, 4, -3, 4], [2, -3, -4, 4, 2, -2, 0, -3, -2, 2, 3, 2, -4], [-3, 4, 2, 1, 3, 3, 2, 0, 3, 4, -4, -3, 0]]) == 0\nassert solution.maxProductPath([[0, 4, 0, 2]]) == 0\nassert solution.maxProductPath([[-4, -3, -4, 4, 4, -1, -3, -3, -3, -4], [4, 1, 1, 4, 4, 0, 1, -1, 3, -3], [-4, 2, -3, -2, -1, -3, -3, 3, 1, 4], [4, -2, -2, -2, 4, -2, -4, -3, -4, 2], [-4, -2, -1, 0, 1, -3, 2, 4, 0, -3], [-1, -4, -2, 3, 1, 3, 2, 0, -2, 4], [-3, 3, 2, -1, -4, 4, -3, -3, -1, 4], [1, 3, 3, 4, 3, 1, -1, 1, 2, -1], [2, 2, -2, 0, -2, -3, 1, 0, -2, 1], [-3, -3, 0, 4, 4, 4, -4, 0, -1, 0], [-4, 1, 1, -2, 4, 4, -1, 4, 2, 3]]) == 153726920\nassert solution.maxProductPath([[3, 0, -2, 0, 0, -3, 0, 3, -3, 4, -4, 0], [-1, 3, 3, -2, 1, 0, 3, -3, 4, 1, -2, -2], [-1, -4, 4, -2, 3, -4, -2, -2, -2, -4, 0, -1], [1, 4, -4, 3, 3, -1, 2, 1, -1, 0, -2, 2]]) == 0\nassert solution.maxProductPath([[-2, -1, 4, 4, 3], [0, 2, 2, -2, 2], [-3, 4, 3, -1, 1], [4, 2, 2, -4, 1], [-1, -4, -4, -4, -2], [2, -3, 2, -3, 1], [2, -2, 3, 1, 1], [2, 1, 1, -4, 1], [1, 0, -1, 2, 0], [-4, 4, -2, -4, 0]]) == 0\nassert solution.maxProductPath([[0, -1, -1], [-2, 2, 2], [2, -3, 4], [-4, 2, -2]]) == 0\nassert solution.maxProductPath([[4, 0, 4, -3, -3, -2], [-4, 0, -2, 3, 3, 0], [0, 2, -4, -3, -4, -2], [3, -3, 4, 0, -2, 3], [0, 0, -1, -1, -4, 2], [1, 2, 0, 2, -2, -2], [-1, -1, -3, 4, -2, 3], [-4, 1, -2, 1, -2, -1], [2, 2, 3, 2, -2, -3], [4, -2, 2, -3, 2, -1], [2, -3, 1, 1, -2, 0], [-1, 1, -4, -2, -2, -1], [-4, 0, -1, 4, -4, 4]]) == 0\nassert solution.maxProductPath([[3, 1, -3, -1, -3, -3, 1, 0, 3, 3, 1, -3, 1, -2], [1, 1, -3, 2, 4, -1, 3, 4, 3, 1, 4, 2, -3, -4], [-2, 1, 4, 2, 1, 4, -3, -3, 0, 3, -2, -1, -3, 2], [4, 0, 4, 3, -1, 0, 4, -1, -4, 0, 0, -1, -2, -4], [-3, 4, -3, 2, 2, 3, -4, -1, 1, 1, -2, 2, 3, 3], [1, -2, 4, 4, 4, -1, 2, -3, 4, -4, 0, 2, 3, -4], [-4, -1, -2, -2, -2, 0, 4, 2, -2, -3, 3, 1, 4, 3], [-4, -4, 2, 4, 4, -2, -2, -4, 1, -4, 2, 3, 0, 1], [-3, 0, -4, 0, -3, -1, -4, -1, 4, 0, -2, 3, -4, -3]]) == 639121268\nassert solution.maxProductPath([[-4, -1, 2, -1, 4, -2, 3, 1, 2, -2, -1, 4, 2, -3, -3], [-2, 3, 3, -4, -4, -3, 3, 3, 3, -2, -2, 1, -1, -1, -1], [2, -4, 4, 1, -3, 4, 1, -4, -2, -4, -1, 2, -2, -3, -1], [-3, 3, 4, 3, -2, 0, 2, -2, 4, 1, -3, 0, 3, -3, -2], [3, -2, -1, 0, 3, -1, 1, -1, 3, -3, 3, 4, 4, -2, -3], [2, -2, 3, -4, 2, 1, -2, 2, -4, 0, -4, -4, -1, -3, 1], [-2, 0, 2, 1, -2, 2, 4, 0, 0, 4, -1, -4, 1, 3, -3], [3, 3, -3, 2, -1, -2, 2, 0, 4, 3, -4, 4, -2, -3, 1], [1, -4, -3, 4, -2, 0, -1, -4, -3, -4, 2, -1, 3, -4, -2], [-2, -1, -4, -4, -2, -3, 4, 3, 2, -3, 2, 0, 0, -4, -1], [1, 4, -1, 0, 4, -1, 0, -1, 0, -2, 3, 3, -3, 1, 1], [3, 0, -3, 4, 4, -4, -3, -4, -3, 0, -3, 0, -3, 0, -3], [-2, 0, 2, -1, 4, 0, 3, 1, 0, 0, 2, 1, 0, 3, 4]]) == 422565197\nassert solution.maxProductPath([[4, 1, -1, -4, -4, -3, 0, 2, -2, 0, -1, -4, -4], [1, 3, -2, 3, 3, 1, 3, 3, 1, 0, 2, -2, -1], [1, 4, -2, 0, 0, 2, -4, 0, -3, 1, 0, 0, -3], [3, -2, 4, -4, -2, -4, 2, -4, -2, -2, 3, 0, -3], [3, 3, -1, -2, -4, -4, 0, 3, 0, 2, 2, 1, -3], [2, -2, 0, -4, -1, 2, 0, -3, 3, -3, -3, -4, 4], [-4, 0, -1, -3, 4, -3, -3, 3, -4, -3, 4, 1, -2], [0, 2, -1, 1, -1, -1, 4, 4, 3, -1, 2, -1, -3], [-4, -2, -2, 1, -2, 3, -4, -2, -4, 0, 3, 2, -3]]) == 879707094\nassert solution.maxProductPath([[-3], [-2], [4], [-1], [4], [-2], [-4], [1], [-3], [3]]) == 6912\nassert solution.maxProductPath([[4, -3, -2], [-3, 0, 2], [3, -1, 4], [2, 4, -4], [1, 0, 2], [0, 4, -2], [1, 3, 0], [4, 4, -4], [1, 4, 0], [3, 3, 4], [1, -2, -4], [0, -3, -3], [3, 2, -3], [-2, -2, 3]]) == 0\nassert solution.maxProductPath([[0, 0, -1, -4, 4, 3, -1, -3, 4, 0], [-2, 3, 4, 0, 0, -1, 0, -2, -4, 1], [-4, 1, 1, -4, 4, -2, 2, 4, -4, 4], [2, -4, -1, -2, -1, 3, -1, 0, 1, -4]]) == 0\nassert solution.maxProductPath([[3, 1, -4, 1, 1, -2]]) == 24\nassert solution.maxProductPath([[4, 0, -1, -4, -3, -2, -1, 0, 1, 3, 0, -3, -2, 3], [4, 2, 3, -3, -2, -4, -4, -4, 1, -2, 0, -3, -1, 3], [1, -1, -3, 2, -4, 1, 0, 0, 3, 3, -1, -4, 1, -3], [3, 3, -2, -1, 3, -2, 0, 0, 3, -1, -1, -1, 1, 0], [4, 3, -3, -1, 0, 4, 3, 4, -2, 2, -4, 1, -4, -4], [-1, 0, 3, -1, -2, -4, -1, -2, -1, 1, 1, -2, -3, 2], [-1, -3, 3, 2, 1, -4, 4, -1, -4, -1, 2, 3, 2, -3], [-1, 4, -2, -4, 2, 3, -3, -2, 4, 3, 3, 4, 4, 4], [3, -4, 2, -4, 1, -3, 1, -1, 1, -3, -2, 4, -4, 3], [1, -3, -3, 4, 1, 4, -3, 1, -2, 3, 1, 4, -2, -4], [4, 0, -2, 1, -2, 0, -2, -3, -2, 2, 0, -1, 1, -2], [3, -3, -1, 2, -3, -4, -2, -1, -1, 4, 2, -4, -2, 3]]) == 410028978\nassert solution.maxProductPath([[-2], [1], [-3]]) == 6\nassert solution.maxProductPath([[-2, -3, -4, 4, 1, -3, -2, 4], [0, 3, -1, -4, -4, 1, -4, -4], [-4, -1, 1, -3, -1, -4, 1, 0], [1, 4, -3, -2, 1, 4, -1, -2], [-3, -1, -1, -1, 3, 1, 3, -3], [2, -4, 2, -4, -1, -4, 0, -4], [-3, -2, 0, 4, 3, -3, 2, 0], [4, 0, 3, 4, 0, 0, 2, -4], [-4, 3, 0, -4, -2, -2, -1, -2], [2, 3, -2, 2, -2, 2, 1, 1]]) == 9437184\nassert solution.maxProductPath([[-3, 0, 3, -2, -3, -4, -2, 4, -1, 1, -2, 0, -3], [-2, 3, -3, 4, 3, -1, -1, 3, -4, 3, -4, -3, -4], [1, 0, -4, 3, 2, 2, -1, -4, 4, -2, 4, 4, -3], [-2, -4, 0, -4, -1, 1, 4, -1, -1, -1, -4, 3, 4], [3, 3, 3, 0, -2, -3, -4, 1, -1, -3, 3, 1, -2], [2, -4, -2, -4, 2, -2, -1, -3, 2, 3, 0, 3, 4], [-2, -3, -4, 0, 0, 2, 4, -2, 4, -1, -1, -2, -4], [1, 2, -3, -4, -1, 4, -2, -4, 3, 4, -2, 3, -3], [4, 4, 3, 0, 4, 2, 0, -1, 1, 4, -4, 2, -2], [4, 2, 2, -1, 2, 0, 2, -2, 3, 3, -3, -3, 3], [4, 3, 2, -4, 0, -4, 3, -1, -2, 4, -2, 1, 0], [2, -2, 0, -2, 3, -3, 3, -3, 1, -1, 4, -2, -4], [-3, 4, -4, 1, -1, 4, -3, 0, 4, 1, 4, -4, 4], [-2, 3, 2, 0, -4, 1, -1, -3, 3, -4, 3, 0, -1], [-2, -3, 0, -2, -2, -4, -2, -1, 3, 3, 2, 1, 2]]) == 136676326\nassert solution.maxProductPath([[0], [-3], [-2], [1], [-4], [-4], [1], [4]]) == 0",
  "inefficient_solution": "class Solution:\n    def maxProductPath(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        mod = 10**9 + 7\n        dp = [[[0] * 2 for _ in range(n * 10**6)] for _ in range(m * 10**6)]\n        for i in range(m * 10**6):\n            for j in range(n * 10**6):\n                dp[i][j] = [0, 0]\n        for i in range(m):\n            for j in range(n):\n                dp[i * 10**6 + i][j * 10**6 + j] = [grid[i][j], grid[i][j]]\n        for i in range(m * 10**6):\n            for j in range(n * 10**6):\n                if dp[i][j][0] >= 0:\n                    dp[i][j + 10**6][0] = min(dp[i][j][0], dp[i + 10**6][j][0]) * dp[i][j][1]\n                    dp[i][j + 10**6][1] = max(dp[i][j][0], dp[i + 10**6][j][1]) * dp[i][j][1]\n                else:\n                    dp[i][j + 10**6][0] = max(dp[i][j][0], dp[i + 10**6][j][1]) * dp[i][j][1]\n                    dp[i][j + 10**6][1] = min(dp[i][j][0], dp[i + 10**6][j][0]) * dp[i][j][1]\n        ans = dp[-1][-1][1]\n        return -1 if ans < 0 else ans % mod",
  "is_python": true
}