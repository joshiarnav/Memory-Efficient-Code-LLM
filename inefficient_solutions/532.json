{
  "problem_idx": 532,
  "task_name": "K",
  "markdown_description": "\nGiven an array of integers `nums` and an integer `k`, return *the number of **unique** k-diff pairs in the array*.\n\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following are true:\n\n\n* `0 <= i, j < nums.length`\n* `i != j`\n* `|nums[i] - nums[j]| == k`\n\n\n**Notice** that `|val|` denotes the absolute value of `val`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,4,1,5], k = 2\n**Output:** 2\n**Explanation:** There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of **unique** pairs.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 1\n**Output:** 4\n**Explanation:** There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,3,1,5,4], k = 0\n**Output:** 1\n**Explanation:** There is one 0-diff pair in the array, (1, 1).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-107 <= nums[i] <= 107`\n* `0 <= k <= 107`\n\n\n",
  "canonical_solution": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        vis, ans = set(), set()\n        for v in nums:\n            if v - k in vis:\n                ans.add(v - k)\n            if v + k in vis:\n                ans.add(v)\n            vis.add(v)\n        return len(ans)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findPairs(self, nums, k):\n        vis, ans = set(), set()\n        for v in nums:\n            if v - k in vis:\n                ans.add((v - k, v))\n            if v + k in vis:\n                ans.add((v, v + k))\n            vis.add(v)\n        return len(ans)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(-10000000, 10000001), k=random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(0, 10000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findPairs(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findPairs(nums, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.findPairs({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findPairs([-6074712, 52689, -901992, -4396430], 1705633) == 0\nassert solution.findPairs([-7446539, -6003675], 5506152) == 0\nassert solution.findPairs([-6155247, 4506036, 8633870, -5932916, -8963834, -948378, -7971882, -4977975, 3110710, 7861664], 1010142) == 0\nassert solution.findPairs([8596762, -6393025, 1328286, 2595532, 5608206, 9263912, -409355, 7743506, 2800252, -1902766], 6348129) == 0\nassert solution.findPairs([-5782104, -9248023, -3896974, -535446], 2821537) == 0\nassert solution.findPairs([-8689283, -7747736, 330510, -2325823, 2348208, 2083531, -2452106], 4471450) == 0\nassert solution.findPairs([1963317, -6143468, -156092], 573175) == 0\nassert solution.findPairs([-4790543, 3399983], 6554933) == 0\nassert solution.findPairs([-656553, 9894876, -4009638], 3446381) == 0\nassert solution.findPairs([-877588, 8128335, 4793082, -253005, 2956841, -3308627, 6846413, 2225359, -3497176], 1795597) == 0\nassert solution.findPairs([4421362, 2643180], 9912904) == 0\nassert solution.findPairs([-3857163, 2803259, 3467115, -102789, -1259293, -945131, 3688505], 8117084) == 0\nassert solution.findPairs([-365675, -816000, -1205710, -4894513, -2752949, 6421012, 1235681, -3669874, 1127623, 8838753], 3010376) == 0\nassert solution.findPairs([-2316485, 9509838, 9814763, -7606650, -3671231, -8952962, -6910104, 8831353, -5518755], 983964) == 0\nassert solution.findPairs([-8576225, 9362818, 8049036, -3221723, 1987384, -9205466, 7800344, -9736699, -3464257, -4417566], 1865214) == 0\nassert solution.findPairs([-8384814, 1622884], 6318531) == 0\nassert solution.findPairs([-5685249, 5286077, -7809036, 7832917, 6964750, -686707], 1918327) == 0\nassert solution.findPairs([5387756, -7780884, -3143906, -3691119, -464605, 5811805, 4087759, -5212031, -6244438], 9240264) == 0\nassert solution.findPairs([-4161859, -5729050, -1668671, 5719938, -1407447, -6334823, -2029077, 7530746, 8229802], 5258150) == 0\nassert solution.findPairs([-8884017, 9004477, 5683277, 8298759, -2798752, 152509, -818070, 2337776, -8568983, 5128184], 5723727) == 0\nassert solution.findPairs([-2292260, -3083517], 8695518) == 0\nassert solution.findPairs([6156369, -2667128, 3996409, -8969661, 5604709, 1818547, 5612927, 183233], 770887) == 0\nassert solution.findPairs([-6333830, -6482383, 7391928, 1006219, 5608648, 3275994, 8533921, -7659449, -4183348], 8984850) == 0\nassert solution.findPairs([-3923247, 2492132, 6651721, -6501343, -7828847, 1595612, 838515, 6632640], 7383400) == 0\nassert solution.findPairs([-3164712, -6997501, 1611634], 8333919) == 0\nassert solution.findPairs([622188, 268450, -9620420, -7358987], 6738858) == 0\nassert solution.findPairs([-7341199, 2726893, -5075305], 9888184) == 0\nassert solution.findPairs([-4800977, -661352], 2705074) == 0\nassert solution.findPairs([-7955240, 7541739, -3250125, 5169982], 8832427) == 0\nassert solution.findPairs([3916733, -4190667, 9709623], 9133285) == 0\nassert solution.findPairs([-9524379, -1254722], 2018863) == 0\nassert solution.findPairs([8795611, 6065539, 2482130, -890566, 313281, -1117977, -8330471, 8897173], 5424228) == 0\nassert solution.findPairs([-21038, 7578706, -8734581, -3383755, -2189402, -6850283, -12622, -9119855], 9902592) == 0\nassert solution.findPairs([2106567, -8580480, -9474942, 9382838, 7957965, 5551118, 4409768, -471222, 3258610], 4598406) == 0\nassert solution.findPairs([-910915, 3950348, -8535673, 3768577, 5007252], 9324467) == 0\nassert solution.findPairs([8990117, -6834911, -3833394, -8685077, -6737668, 5196869, -8203594, 421831, -5452734], 8733589) == 0\nassert solution.findPairs([-1389598, -3456093, -8963522, -1945970, 4118357], 4088695) == 0\nassert solution.findPairs([6995098, 6770628, -6695836, 2484046, -4553954], 5763994) == 0\nassert solution.findPairs([7265811, 5650668, 698463, 7387379, 1200567, -6118006, -7431505, -6028737], 2578902) == 0\nassert solution.findPairs([311799, 4633461, -1938041, -4881632], 6797646) == 0\nassert solution.findPairs([-5238481, -4823862, -90348, -6601371, -3321477, -8516863, 5875854, 3163516], 7346509) == 0\nassert solution.findPairs([4800612, -7579102, 8468742, 1613401, 4878469, 3034610], 4485839) == 0\nassert solution.findPairs([-4415112, 329773, -2509541, -7854695, 3986412, 9951704], 6354706) == 0\nassert solution.findPairs([-7427241, 3154285, -4127650], 6882699) == 0\nassert solution.findPairs([-2026404, 8382466, -135085, 9404926, -3026627, 1972176, 1751528, 2887252, 3739815], 3377436) == 0\nassert solution.findPairs([-4406012, -4217178, -9192400, 6134956, -6750665, 9216830, 5087035, -7221185], 6401817) == 0\nassert solution.findPairs([-2344583, -8137551], 1719086) == 0\nassert solution.findPairs([-8701990, -4646428, -6153719, 1305264, 693068, -8031069, -8330197, 7479178], 6860555) == 0\nassert solution.findPairs([-9833208, 7711988, 8316461, 3855471, -1126870], 727058) == 0\nassert solution.findPairs([9112531, 5811015, -9942635, -6345210, 6587089, 2367429, -3400052, 9158948, 1367344, -8276051], 5053589) == 0\nassert solution.findPairs([9319339, -7136731, 7173082, 51680, -3577868, -1587611, 5913693, 6683568, 4068180, -4071662], 4932147) == 0\nassert solution.findPairs([3854918, 4555605, 6856440, 3630924, 7762409, -7096586, 9350540, -544538], 6404956) == 0\nassert solution.findPairs([4354569, 5549385, -2543744, 5803650, -8734897, 6706663, -1251201, 8523024], 3888185) == 0\nassert solution.findPairs([2137882, 440604], 1382534) == 0\nassert solution.findPairs([-6607251, -3120313, -458786, -7403681, -945685, 805946, 6008371, -9002603, 9076439], 4117928) == 0\nassert solution.findPairs([5809065, 7765778, -926107, -8419564, 1555905, 7092365, -484197], 5411513) == 0\nassert solution.findPairs([-3851483, 5781888], 7340240) == 0\nassert solution.findPairs([-5648040, -3721179, 9792490, 3802316, -1283310], 4760449) == 0\nassert solution.findPairs([8512621, 7858166, 8664077, 8086063, -8860101], 6947444) == 0\nassert solution.findPairs([-41182, -15960], 6969998) == 0\nassert solution.findPairs([3457286, 7376360, 3580992, 7433579, -4592549, 570087, 457273, 9254311], 5546876) == 0\nassert solution.findPairs([2232306, 2839417, -1389630, -2701909, 2846061, -647606, -3491729, 2695662], 8216500) == 0\nassert solution.findPairs([6470740, 1471275, -6841451, -8106187, 2165689, 1621815, 1196494, -4729092, -2189566, -785286], 4905037) == 0\nassert solution.findPairs([3269793, -949106, -9062213, 9517531, -5742126], 113772) == 0\nassert solution.findPairs([-1042601, 8477670, 9642757, -7265591, -4973419, 1273194, -4573081, 4971382], 1310374) == 0\nassert solution.findPairs([4764373, -3379670], 9851093) == 0\nassert solution.findPairs([3278562, -5966742], 5793324) == 0\nassert solution.findPairs([-4337931, -9155111, 7179002, 2073409], 9576835) == 0\nassert solution.findPairs([3223999, 1918847, 1176343, -2026117], 1739060) == 0\nassert solution.findPairs([5867462, 8124268, 1914711], 4656047) == 0\nassert solution.findPairs([-160173, 9765675, 8113912, 1078054, 7103296], 7438548) == 0\nassert solution.findPairs([8530808, 5232855, 6772908, -6933156], 8064719) == 0\nassert solution.findPairs([1555453, 7157338, -7488981, -9514391, -987662, -6042308], 2140360) == 0\nassert solution.findPairs([9952180, -9100805, -8310827, 3059760, -6335799, 512601, -7752060], 355214) == 0\nassert solution.findPairs([9698731, -158880, -1830070, 1379420], 2733732) == 0\nassert solution.findPairs([9092256, -4514130, 8926107, -1306297], 3544920) == 0\nassert solution.findPairs([2981305, -65487, 1662334, 8295140, 6369072], 5577323) == 0\nassert solution.findPairs([8175700, -7510370, 5893273, 3498036, -6716690, 1490453, 1051452, 4740735, 2734104], 6317733) == 0\nassert solution.findPairs([-291695, -140183, -6468470, -8894154, -9656011, -2506060, 5049454], 4230504) == 0\nassert solution.findPairs([-2752507, -8473120, 5623617, 9207009], 1447823) == 0\nassert solution.findPairs([-8635236, -1683110, 7495792, 2801678, -8310439, -5066796, 5160006], 5706009) == 0\nassert solution.findPairs([6104235, 2582213], 8313461) == 0\nassert solution.findPairs([2673716, -5894475, 6213345, -2743265, 9974022, -1526163, -9704928], 4090676) == 0\nassert solution.findPairs([3609838, 7359704, -8859990, -537362, -8512530, -6069457, -7691677, -5683759, 5957904], 288261) == 0\nassert solution.findPairs([7681623, 896619, 9356720], 1400709) == 0\nassert solution.findPairs([2868785, 8343362, -1524792, -4617292, 4114892, 3516399, 1063211, 4945588, 9535823, 2431963], 7257335) == 0\nassert solution.findPairs([-9673367, 374117, 7333675, -2531146, 7783131, 8462828, -277021, -5988003, -2093204, 7386217], 5055945) == 0\nassert solution.findPairs([4418900, 3179424, 7474428, -7864514, -4159004, 5780801, -3994324], 9978675) == 0\nassert solution.findPairs([-4593521, -1891291, 9536732, -9650473, -7744831, 6160532, 5076831, -2802501, -7602572, 74573], 5208918) == 0\nassert solution.findPairs([6503079, -1377242, 3616161, 8577653, 8755758, 2701325, -2326618], 4456326) == 0\nassert solution.findPairs([508095, -2136742, -6677568, -1235434, -3036654, 4545008, -1254050, 3152544], 2304554) == 0\nassert solution.findPairs([6114890, -5196891, 2437825, 8929770], 9587520) == 0\nassert solution.findPairs([1264220, 9414507, 5848962], 7041698) == 0\nassert solution.findPairs([-1353427, 3967479, 9372960, -9413577], 1235160) == 0\nassert solution.findPairs([-4747806, -964155, -5619825, -440018, 4940850], 9520615) == 0\nassert solution.findPairs([7010818, 7848220, -6156823, -7019672, 7528318, 6866143], 1384806) == 0\nassert solution.findPairs([3763228, -8834732, -8224214, -7858582, -4972484, -8817905, -5111380, 8071004, 1410554, 8365612], 2234545) == 0\nassert solution.findPairs([1129827, 3856500, -2406489, 9600773, -1215804, -3227520, 4093583, -2463382], 1889985) == 0\nassert solution.findPairs([2445221, -4170654, 7099964, 5210821, -947519], 6449102) == 0\nassert solution.findPairs([6240200, -9429819, 8141669], 2272509) == 0",
  "inefficient_solution": "class Solution:\n    def findPairs(self, nums, k):\n        count_dict = {}\n        for num in nums:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n        pairs = set()\n        for key in count_dict.keys():\n            if k != 0:\n                if key - k in count_dict and key - k not in pairs:\n                    pairs.add((key, key - k))\n                    pairs.add((key - k, key))\n            else:\n                if key in pairs:\n                    pairs.add((key, key))\n        return len(pairs)",
  "is_python": true
}