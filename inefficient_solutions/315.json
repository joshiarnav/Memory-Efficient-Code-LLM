{
  "problem_idx": 315,
  "task_name": "Count of Smaller Numbers After Self",
  "markdown_description": "\nGiven an integer array `nums`, return *an integer array* `counts` *where* `counts[i]` *is the number of smaller elements to the right of* `nums[i]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,2,6,1]\n**Output:** [2,1,1,0]\n**Explanation:**\nTo the right of 5 there are **2** smaller elements (2 and 1).\nTo the right of 2 there is only **1** smaller element (1).\nTo the right of 6 there is **1** smaller element (1).\nTo the right of 1 there is **0** smaller element.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1]\n**Output:** [0]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [-1,-1]\n**Output:** [0,0]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-104 <= nums[i] <= 104`\n\n\n",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x > 0:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        alls = sorted(set(nums))\n        m = {v: i for i, v in enumerate(alls, 1)}\n        tree = BinaryIndexedTree(len(m))\n        ans = []\n        for v in nums[::-1]:\n            x = m[v]\n            tree.update(x, 1)\n            ans.append(tree.query(x - 1))\n        return ans[::-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countSmaller(self, nums):\n        alls = sorted(set(nums))\n        m = {v: i for i, v in enumerate(alls, 1)}\n        tree = BinaryIndexedTree(len(m))\n        ans = []\n        for v in nums[::-1]:\n            x = m[v]\n            tree.update(x, 1)\n            ans.append(tree.query(x - 1))\n        return ans[::-1]\n\nclass BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x > 0:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(-10000, 10001), random.randint(1, 101))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countSmaller(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countSmaller(nums) == expected_result\n        print(f\"assert solution.countSmaller({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countSmaller({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countSmaller([572, -9675, 8910, -5877, 5194, -259, 1414, 4910, -347, 3240, 1427, 1535, -7903, -7225, -7186, -7970, 1369, 329, 9609, 1250, -7387, 5394, 2153, -931, -7105, 8873, -4881, -6746, -6388, -6507, -9178, -4612, -2556, 5836, -4518, 6620, 7761, 3, 4471, 2024, -7295, 5138, -3828, 8829, -1793, 4028, -708, -2876]) == [26, 0, 44, 11, 36, 21, 25, 32, 20, 28, 24, 24, 2, 4, 4, 1, 19, 17, 29, 17, 1, 21, 17, 13, 2, 22, 5, 2, 3, 2, 0, 1, 4, 11, 1, 10, 10, 5, 7, 5, 0, 5, 0, 4, 1, 2, 1, 0]\nassert solution.countSmaller([4512, -2207, -4730, 8623, -3112, 1318, 525, 1391, -6536, 3375, 7160, 8609, 4417, 6998, -2562, 5248, 1015, -3899, -73, 8510, 6616, -5663, 6891, -1119, -1576, 6070, 2166, -5816, 5374, 572, -2559, -6030, 9027, 606, 9985, 7089, -547, 698, 9599, 8888, -3876, -1199, 4719, -6851, -1362, -2698, -6310, -4034, 63, 3355, 1554, 6477, 4093, -2716, -6218, -686]) == [38, 16, 7, 48, 10, 27, 22, 26, 1, 28, 39, 40, 29, 36, 11, 29, 23, 7, 17, 32, 29, 5, 28, 13, 10, 24, 19, 4, 21, 14, 8, 3, 21, 12, 21, 18, 10, 11, 17, 16, 4, 7, 12, 0, 5, 4, 0, 1, 3, 4, 3, 4, 3, 1, 0, 0]\nassert solution.countSmaller([-2611, -8650, 7504, 3778, -1417, -3078]) == [2, 0, 3, 2, 1, 0]\nassert solution.countSmaller([-1246, 9733, 9213, 1509, 517, -7052, 1990, 786, -7543, -4733, -1737, -7556, -3432, -7244, 3641, 9536, 8474, -1051, 1257, 5270, -444, -6971, -8243, -5296, 7297, 210, 9913, -3402, -1391, -4264, 9370, -76, 9236, -2048, 5694, -1313, 1837, 1679, -8815, 4281, 894, 1584, -1442, 5435, 2081, -3491, 6884, -4710, -3821, 2533, 3626, 7353, 9185, 9876, 9919, 8534, 7809, -4290, 6911, -9557, -3887, 7496, -5393, -4913, -9379, -7021, 7164, -1691, -22, 3269, -5813, 1363, -532, -5785, -3368, 7497, -6274, -4636, 4963, -1257, 2026, 8561, -2811, -7226, -6444, -8889, -8369]) == [39, 82, 78, 50, 45, 10, 51, 44, 7, 18, 30, 6, 24, 6, 49, 68, 62, 32, 38, 49, 33, 8, 5, 12, 50, 32, 59, 20, 25, 16, 54, 27, 52, 21, 40, 23, 30, 29, 3, 33, 25, 26, 21, 31, 26, 17, 29, 12, 15, 23, 24, 27, 32, 32, 32, 30, 29, 13, 24, 0, 12, 23, 9, 9, 0, 3, 18, 10, 12, 14, 5, 11, 10, 5, 6, 10, 4, 4, 7, 5, 5, 5, 4, 2, 2, 0, 0]\nassert solution.countSmaller([3589, 4072, 3047]) == [1, 1, 0]\nassert solution.countSmaller([-9250, 6716, 484, 1673, -4659, -561, -2466, -6675, 101, -6170, -2956, -8454, 2379, -5460, -1510, -2389, -5860, 2548, -867, -5269, -1938, 2883, 5408, -3552, 2594, 1571, -5813, 5845, 405]) == [0, 27, 18, 19, 7, 14, 9, 1, 12, 1, 6, 0, 11, 2, 6, 4, 0, 7, 4, 1, 2, 5, 5, 1, 3, 2, 0, 1, 0]\nassert solution.countSmaller([6011, -3966]) == [1, 0]\nassert solution.countSmaller([-5869, -1021, -8336, -5383, -1797, -5839, -9246, -3798, 4162, 1311, -1497, -7202, -456, 2998, -777, 5703, 5094, 5839, -573, 2214, -1227, 6584, 491, 6437, 2946, -4226, 9955, -9997, -5995, 1871, -4864, 8792, 2992, -357, 3609, -1974, -3788, 4295, -1514, 2559, 7463, 9314, -6955, -3827, -1300, -8416, 9443, -5127, -6717, -1328]) == [8, 23, 3, 8, 15, 7, 1, 10, 30, 22, 13, 2, 17, 24, 15, 26, 25, 25, 15, 18, 14, 23, 15, 21, 17, 7, 23, 0, 3, 12, 4, 16, 12, 10, 11, 6, 5, 9, 5, 7, 7, 7, 1, 3, 4, 0, 3, 1, 0, 0]\nassert solution.countSmaller([5052, 1041, 1695, 2380, 1721, 270, -5422, 4268]) == [7, 2, 2, 3, 2, 1, 0, 0]\nassert solution.countSmaller([-5307, -6771, -8581, 2741, 2890, -6627, 1257, 5268, -3936, 8289, 2961, 9478, 2970, -4930, -2011, 4443, -5037, -3270, 6898, -7846, 7140, -9501, 8340, 8892, -1407, 5987, 2598, 914, -5072, 4710, 3955, -2087, -172, 3754]) == [5, 3, 1, 15, 15, 2, 12, 19, 5, 21, 12, 22, 12, 4, 6, 12, 3, 3, 12, 1, 11, 0, 10, 10, 2, 8, 4, 3, 0, 4, 3, 0, 0, 0]\nassert solution.countSmaller([-6388, -3347, -1343, -8757, 4102, 7475, -8241, -4715, -6958, -300, 7304, 838, -4816, -7386, 5639, 6802, -5066, 8606, -2549, -2830, 371, 374, -6691, -6624, -1895, -1910, 9868, -6307, 85, -2219, 9423, -3064, 5067, -6367, -2273, -1630, 4598, 9665]) == [6, 11, 19, 0, 23, 28, 0, 8, 1, 15, 23, 18, 6, 0, 18, 18, 4, 17, 6, 5, 11, 11, 0, 0, 6, 5, 11, 1, 5, 3, 6, 1, 4, 0, 0, 0, 0, 0]\nassert solution.countSmaller([-7903, 3800, 4492, -9033, -7658, 1897, 2219, 9228, 6797, 8223, 8155, -229, -5177, 1181, -5183, -3815, -2289, 7902, 8807, 3700, 6611, 392, -4184, -5433, -9975, -1857, 2667, 780, -805]) == [2, 19, 19, 1, 1, 13, 13, 21, 16, 18, 17, 9, 3, 10, 2, 3, 3, 10, 10, 8, 8, 5, 2, 1, 0, 0, 2, 1, 0]\nassert solution.countSmaller([9355, 5777, 3394, -5475, -7673, 2611, -3556, -3675, 9566, 1902, -9347, 1952, 7733, 454, -4212, -4222, 4636, 5785, -2217, 5602, -7178, 8055, -6697, -1859, 8779, 4302, 4638, -9574, 3410, 3745, 5433, 9293, -6510, -9876, -1007, -8627, 9229, -6058, -8890, -6111, -5697, -9748, 3132, -4927, -1678, 1307, 5062, 5371, -1827, 337, 8903, 3787, 330, -5909, -2063, -6782, -1178, -9710, -5813, -9639, 4104, -1342, -6037, 7448, -8, 1851, 4674, -5751, 5613, -2407, -9135, 2093, 7789, 3468, -394, -804, -8093, 279, -2578, -5146]) == [78, 68, 53, 22, 10, 49, 26, 25, 71, 44, 5, 43, 61, 40, 23, 22, 48, 55, 24, 52, 9, 54, 10, 23, 52, 43, 43, 4, 37, 38, 43, 48, 9, 0, 24, 5, 43, 8, 4, 6, 10, 0, 27, 10, 14, 22, 28, 28, 13, 20, 29, 23, 19, 6, 11, 4, 11, 0, 4, 0, 15, 7, 2, 15, 8, 9, 11, 2, 10, 4, 0, 6, 7, 6, 4, 3, 0, 2, 1, 0]\nassert solution.countSmaller([6758, 7501, 8, -5463, -2730, -4797, -7569, 3814, 4787, -2115, -308, 327, -8868, 2211, -5234, 5718, -8641, -3659, 7930, -9719, -5472, 480, -7971, 155, 8611, -6435, 8048, 5702, -4230, -8079, -7287, -3512, -1037, 6046, -6172, 1281, -4596, -4629, -1748, -4601, 9499, -792, -4876, -6232, -1766]) == [39, 39, 28, 11, 20, 13, 5, 29, 29, 18, 22, 23, 1, 24, 9, 24, 1, 13, 23, 0, 6, 17, 1, 15, 19, 2, 17, 15, 8, 0, 0, 6, 8, 10, 1, 8, 4, 2, 4, 2, 4, 3, 1, 0, 0]\nassert solution.countSmaller([469, 4173, 7177, 845, -8081, -3171, -2287, 2416, -6618, 6674, -5162, -2435, -351, -2561, -7887, -938, 1276, -3231, -3163, 6939, 5299, -8995, -9034, 5288, -4241, -4454, 9468, -3907, -1837, 8685, 2263, -8068, 3774, 3465, 3811, 8721, 6309, 8981, 9403, -1312, -4265, -8399, -520, 212, -290, -5529, 611, 9466, -8977, 2876, -2398, 1377, -5417, -2944, -5757, 3110, 7945, -9105, -2609, 4262, -2167, -463, 7309, -4520, -2526, -5920, -1041, 9263, 6280, 2055, 1416, 4313, 7276, -1734, 6054, -9595, -9862, -5334, -7585, 2216, 9880, -9323, -1549, -1762, -1155, -4054, -5710, 196]) == [51, 65, 74, 52, 8, 26, 33, 55, 11, 66, 17, 29, 41, 27, 9, 36, 42, 22, 22, 57, 53, 5, 4, 50, 17, 15, 60, 17, 22, 52, 38, 6, 40, 39, 39, 47, 43, 46, 47, 24, 14, 5, 24, 27, 25, 9, 25, 39, 4, 28, 15, 23, 8, 11, 6, 23, 29, 3, 9, 21, 10, 15, 23, 7, 8, 4, 11, 19, 17, 13, 12, 13, 14, 8, 12, 1, 0, 3, 1, 7, 7, 0, 3, 2, 2, 1, 0, 0]\nassert solution.countSmaller([5745, 6705, -4925, 316, 2868, -7112, -4522, 1717, -6116, 6670, 4331, -6789, 4827, -4160, -2508, 9801, -3576, 742, 5328, 7762, -6996, 1119, 5037, 6835, 3194, -9006, 3003]) == [21, 22, 5, 9, 12, 1, 4, 9, 3, 14, 10, 2, 9, 2, 3, 11, 2, 2, 6, 7, 1, 1, 3, 3, 2, 0, 0]\nassert solution.countSmaller([-8079, -1453, 1935, -2511, -3928, 2711, 4178, -5226, 3035, -7454, 6593, -2915, -9487, -8929, 2244, 3496, -7359, -5, -4750, 883, 3324, -2647, -5872, 9433, -1242, 4210, -116, 5385, 2484, 3576, 3800, -8867, -4953, -1527, 9656, -4558, -9809, 325, 4226, 1926]) == [4, 16, 22, 14, 11, 22, 27, 7, 21, 4, 27, 9, 1, 1, 15, 17, 2, 10, 4, 10, 12, 5, 2, 15, 5, 11, 5, 11, 7, 7, 7, 1, 1, 2, 5, 1, 0, 0, 1, 0]\nassert solution.countSmaller([-3958, 9781, 7682, 7557, 6659, -2676, -7729, -6170, 6797, 8691, 1966, -4219, 387, 2787, 9254, -2795, 33, -4963, 9848, -5741, -4387, 7629, -8281, -391, 5553]) == [7, 22, 19, 17, 15, 8, 1, 1, 12, 13, 9, 4, 7, 7, 9, 4, 5, 2, 6, 1, 1, 3, 0, 0, 0]\nassert solution.countSmaller([-1626, 5877, -503, 8015, -4002, 5994, -7996, 2493, 4893, 9377, 3955, 7517, 3097, 3874, 1727, -1054]) == [2, 10, 3, 11, 1, 8, 0, 2, 5, 6, 4, 4, 2, 2, 1, 0]\nassert solution.countSmaller([888, -3512, 7251, -2745, -7451, 5279, -6536, -1833, -3621, -5179, 1165, -9504, 1484, 5083, 7461, -7907, 4077, 8515, 8925, 9830, 6822, -2307, -3059, -335, -483, -6204, -7849, -5851, -2659, -7750, 2190, 3560, -7005, 4579, -5877, -2829, -1699, -412, 5691, -1630, 1078, 4923, -6853, 9759]) == [25, 13, 36, 15, 4, 31, 6, 15, 10, 9, 19, 0, 18, 23, 25, 0, 19, 23, 23, 24, 22, 10, 7, 13, 11, 4, 0, 4, 5, 0, 8, 8, 0, 7, 1, 1, 1, 2, 4, 1, 1, 1, 0, 0]\nassert solution.countSmaller([8852, -8860, 8873, 6534, 3760, -2484, -5196, -6705, 1040, 2292, 9963, 2336, 5649, 5810, -9428, 9615, 1110, -6276]) == [14, 1, 13, 12, 9, 4, 3, 1, 2, 3, 7, 3, 3, 3, 0, 2, 1, 0]\nassert solution.countSmaller([-7276, -2324, -364, -3487, 1153, 7753, 5907, -4487, -5111, -3398, 8089, 6938, 5646, 9502, 9143, -8099, 1108, -5476, 1865, 3350, -4039, 2060, 2339, 4927, 6513, -9157, 9126, 1485, -9449, 1134, 7636, -4139, 2786, -3623, -6490, 7573, -4585, -6637, 7874, 9299, -7424, -1836, 3682, -9772, -4662, 5788, -722, -7271, -1144, 2685, 9372, -7483, 2758, 3222, 9929, 5228, -2201, 960, 1516, 1242, 2781, -5059, 3668, 3546, -8220, -195, -4652, -1516, -8707, -362, -8748, -9385, 9074]) == [10, 25, 30, 23, 34, 58, 53, 19, 14, 21, 55, 51, 48, 58, 55, 7, 28, 12, 31, 38, 17, 30, 30, 38, 40, 3, 43, 27, 1, 24, 37, 14, 28, 14, 9, 32, 12, 8, 30, 31, 6, 11, 25, 0, 7, 24, 11, 5, 9, 14, 21, 4, 13, 14, 18, 16, 6, 9, 10, 9, 9, 4, 9, 8, 3, 6, 3, 3, 2, 2, 1, 0, 0]\nassert solution.countSmaller([-2307, -673, 5653, 508, -9047, -3524, -6353, 7931, -5915, -3633, 3376, 2931, 7226, -5101, 8659, 5207, -9581, 7412, 5218, -1944, -4896, -9323, 2595, 2550, 4265, -2256, -2003, 4589, 2877, 9711, -9069, -7255, 5102, -9985, 6369, 3446, 6444, 9597, -6212, 5717, -5847, -4150, -6633, 3931, 4678, -1126, 4050, -3487, 4969, -2185, 2231, 7109, -5479, 5252, -3791, 5725, -2357]) == [20, 25, 43, 25, 4, 16, 6, 46, 7, 13, 25, 24, 40, 9, 40, 31, 1, 37, 30, 16, 8, 1, 17, 16, 20, 11, 12, 18, 14, 27, 1, 1, 17, 0, 19, 11, 18, 19, 1, 15, 1, 2, 0, 7, 8, 5, 6, 2, 5, 3, 3, 5, 0, 2, 0, 1, 0]\nassert solution.countSmaller([-8254, -6677, -2725, 453, -8666, 8316, 1153, 7374, 9539, -4703, 360, 8128, 4377, -3458, -736, -472, 7320, -7502, -9652, 2508, 4207, 9744, -6004, -4550, 8752, 684, 8578, -7681, -7382, 8815, 2927, 4481, 6540, 5807, -6129, 270, -3374, 5484, 2998, -4465, -8067, -5759, -818, -4861, 7038, -9810, -7662, -1021, -6685, -1685, 8675]) == [3, 9, 18, 25, 2, 39, 25, 36, 41, 12, 22, 34, 27, 14, 18, 18, 29, 5, 1, 18, 20, 29, 7, 9, 25, 15, 22, 2, 3, 21, 13, 14, 16, 15, 4, 11, 7, 11, 10, 6, 1, 3, 6, 3, 5, 0, 0, 2, 0, 0, 0]\nassert solution.countSmaller([4994, -222, -8679, -780, -8326, -2348, 279, -9528, 2810, 4246, 3935, -7599, 8568, -1371, 8831, -4665, -6321, -3811, -7249, 2037, 2325, 9025, 9316, 8424, 4874, -9438, -6455, 1649, 9856, -5346]) == [23, 14, 2, 12, 2, 9, 10, 0, 12, 13, 12, 1, 13, 7, 12, 5, 3, 4, 1, 4, 4, 6, 6, 5, 4, 0, 0, 1, 1, 0]\nassert solution.countSmaller([-2624, 8984, -1805, 5160, -2488, 6012, -3868, -9099, -9439, 7154, -6465, -5946, -7033, -9339, 594, -5745, 9865, 4983, -9663, -6140, -7315, 1367, -4114, -5196, 7853, 1077, -9115, -8174, 3769, -1368, -520, 2149, -1535, -2191, -8789, -3209, 1183, 9016, -2718, 2088, -758, -6858, -4247, -5130, -6814, 5504, 9401, -7214, 4439, -7502, -4449, 6411, 8685, -7555, 6879, 7471, -2210, 8043, 1254, -1449]) == [26, 55, 29, 44, 26, 44, 23, 4, 1, 43, 12, 13, 9, 1, 26, 11, 43, 33, 0, 9, 5, 25, 12, 8, 31, 20, 0, 1, 22, 15, 16, 19, 13, 12, 0, 8, 12, 21, 8, 12, 10, 3, 6, 4, 3, 8, 13, 2, 6, 1, 1, 4, 7, 0, 3, 3, 0, 2, 1, 0]\nassert solution.countSmaller([9320, 3443, -993, 67, -6334, -5426, 2778, 2199, 2840, -4064, -6438, -1586, 7317, 4872, 5866, 7334, 8093, -8773, -2092, 2267, -6684, 4731, -6717, 2303, -7980, 8182, 5583, 9077, -3668, 8441, 4860, -1035, -7861, 5720, 8879, -9174, -4095, -691, -9462, 4035, -2180, 2374, 6776, -3069, -2189, -738, -9646, 6773, 3465, 7968, 1349, 1758, -2970, -9727, 2807, -3575, 3682, 7788, -680, -9840, 5548, -5487, -510, -9592, 9547, 7860, -4680, 4489, -2737, 2026, -8175, -8165, 2721, -6617, -5453, 5915, 1865, -3758, 2399, 4565, 3239, -9111]) == [80, 54, 34, 38, 16, 18, 46, 40, 46, 20, 15, 28, 59, 51, 54, 57, 60, 7, 26, 35, 12, 45, 11, 33, 9, 52, 44, 53, 16, 50, 41, 22, 9, 40, 46, 5, 12, 20, 4, 32, 17, 24, 35, 13, 15, 15, 2, 30, 24, 31, 16, 16, 12, 1, 18, 10, 18, 22, 11, 0, 18, 5, 9, 0, 17, 16, 5, 12, 6, 7, 1, 1, 6, 1, 1, 6, 2, 1, 1, 2, 1, 0]\nassert solution.countSmaller([4352, -963, -7534, -4592, -9185, 5646, 2626, -1057, 47, -6661, -2366, -2458, -2694, 3920, 2274, -8501, -5987, -3446, -633, 71, -6458, 8502, 4941, -317, 997, 5303, -6440, 4812, -7528, -3365, -2569, -7157, -1247, 4961, 2466, -3655, -9956, 7038]) == [30, 20, 3, 9, 1, 30, 24, 16, 18, 4, 13, 12, 10, 18, 16, 1, 5, 6, 9, 10, 3, 16, 12, 8, 8, 11, 3, 8, 1, 3, 3, 1, 2, 3, 2, 1, 0, 0]\nassert solution.countSmaller([6120]) == [0]\nassert solution.countSmaller([-9629, -4759, 9605, -2526, 6408, -4865, 9653, 1181, 9301, -8633, 6855, -7804, -3509, -553, -1234, -6930, 208, 5227, -8468, -2734, 8330, -9030, 4552, -3097, -4031, -9750, -912, 298, 3409, -161, 9046, -3410, 3060, 213, -1716, -2320, 8899, 5331, -9578, -6154, 9823, -1815, -5708, 8747, -147, -7626, 8612, 5886, -3320, 4560, 3033, 8447, -2141, 5628, 8626, 3253, -9355, 7979, 6732, 7036, -993, 1096, 2096, 8260, 9940, -6518, 5549, -9149, 1588, -9673, -1824, -9186, -8723, 566, 9391, -6391, 7461, -6002, -9725, -304]) == [3, 20, 74, 26, 57, 19, 71, 42, 68, 9, 55, 10, 18, 30, 27, 11, 31, 43, 9, 19, 50, 7, 38, 17, 14, 0, 21, 25, 32, 22, 46, 13, 28, 22, 18, 14, 40, 27, 2, 9, 38, 14, 10, 34, 15, 6, 30, 23, 9, 19, 17, 25, 9, 18, 23, 16, 2, 19, 16, 16, 9, 11, 12, 14, 15, 5, 11, 3, 9, 1, 5, 1, 1, 4, 5, 1, 3, 1, 0, 0]\nassert solution.countSmaller([209, 8589, -9224, 4025, 2430, 6485, -9460, -4879, 7575, -2753, 2841, -8856, -3013, -1035, 6087, 5934, 4743, 784, -7332, -9540, 6297, -6409, 9429, -9191, 859, 6261, -5769, 7231, 7652, -9010, 3794, -8382, -5358, -819, 6545, 323, -7774, 8517, 7413, -9941, 1488, -8655, -6310, 5075, -2279, 7048, 3207, 8208, -850, 2072, 2933, -5431, -3418, 2915, 9608, -1008, 44, 7074, -6120, 1544, -7451, 8953, 1741, 4201, 9116, -5476, 540, -6444, 412, -1741, -3887, -9896, 5794, -9971, 7611, -6753, -1435]) == [36, 71, 5, 50, 44, 57, 4, 21, 60, 24, 41, 6, 22, 25, 47, 46, 43, 32, 10, 3, 43, 11, 53, 3, 28, 39, 12, 41, 43, 3, 33, 4, 12, 19, 33, 20, 4, 36, 33, 1, 20, 2, 5, 25, 10, 25, 22, 26, 13, 18, 19, 7, 8, 16, 22, 10, 10, 16, 5, 11, 2, 14, 10, 10, 12, 4, 8, 3, 6, 4, 3, 1, 3, 0, 2, 0, 0]\nassert solution.countSmaller([-3127, 265, 9804, -4531, 1299, -9218, 3653, -8238, 876, -2732, 7243, 3510, -1838, 8886, 6342, 4644, 2534, -3521, 2742, 9935, 493, -1009, -5885, 8125, 345, 4388, -1465, -3720, -329, 9943, 868, 4948, -8486, 1656, 6757, 5035, -9964, -4809, -5687, 9863, -7873, 2758, 114, -3415, 7060, 7911, 8676, -2136, -1101, -4722, 6925, 6319, -5021, -7671, 5378, -6355, 8871, 5871, -4941, -450, 7221, -9898, 619, -6038, 4921, 5738, 9103, -965, -9403, -7022, 2631, 4084, 9801, -435, 3143, -9733, -2184, -7288, -4806, 30, 106, 7873, 3038, -1102, 8144, -2726, 761, -7815, 4255, 494, -235, -3594, 3622, -6835, -4812, -8533, -1587]) == [29, 47, 91, 24, 53, 4, 61, 6, 50, 26, 74, 56, 29, 78, 67, 59, 49, 24, 49, 76, 42, 32, 14, 66, 39, 51, 28, 21, 32, 67, 39, 48, 5, 38, 51, 46, 0, 16, 12, 57, 4, 35, 30, 17, 44, 46, 47, 19, 21, 15, 40, 39, 11, 5, 34, 8, 38, 34, 9, 17, 32, 0, 21, 7, 27, 27, 29, 14, 1, 4, 18, 21, 24, 12, 18, 0, 8, 2, 4, 9, 9, 14, 11, 7, 12, 5, 8, 1, 8, 6, 5, 3, 4, 1, 1, 0, 0]\nassert solution.countSmaller([-1324, -4033, 4415, -6434, -6060, 143, 9420, -4384, -532, 5233, -7570, -5293, 9691, -5698, 254, -3746, 1582, -9474, 2316, 3466, -244, -3834, 6044, -2259, -9564, -8318, -208, 3046, 6354, 621, -7797, 8337, 3245, -3606, -4506, -2044, -2329, -4823, 6452, -7290, 987]) == [20, 13, 31, 6, 6, 20, 33, 10, 16, 26, 4, 6, 28, 5, 15, 8, 16, 1, 15, 17, 11, 6, 15, 8, 0, 0, 7, 9, 10, 7, 0, 9, 7, 3, 2, 3, 2, 1, 2, 0, 0]\nassert solution.countSmaller([7264, 980, 7868, 3716, 3714, -3673, 120, 2420, -8256, -3407, 2917, 3273, 2492, 9593, 271, 8218, 589, 4688, -2141, 7473, -5883, 8779, 9061, -5435, 6908, -5314, -8865, 950, 8027, -4613, -4183, -307, -3086, 8636, 3667, -906, -8328, 6213, -9700, -7085, 8187, -2883, 8347, -1144, 8437]) == [33, 22, 33, 28, 27, 10, 17, 20, 3, 9, 19, 19, 18, 31, 15, 24, 15, 17, 11, 18, 4, 22, 22, 4, 15, 4, 1, 10, 12, 3, 3, 7, 3, 11, 6, 5, 1, 4, 0, 0, 2, 0, 1, 0, 0]\nassert solution.countSmaller([7938, -6489]) == [1, 0]\nassert solution.countSmaller([-2706, 202, 9859, 3452, -5278, -9943, 4505, 8366, 2324, -8112, -4259, -7534, 9452, 859, 6269, 2244, 6340, -9320, -5675, 1227, -2217, 1567, -9397, -1417, 5930, 3445, -5296, -5283, -1238, -7381, -2146, -2483, -4178, 6327, -4980, -6342, 6235, -3312, -4436, 5327, 6866, 4499, 1317, 5094, 213, -6713, -6401, 7550, -3759, 8229, -5984, 8177, 9125, 3165, -617, -5148, -5438, 7159, -2410, -9370, 9009, -9774, 8895, 5945, 6101, 9155, 7751, -4411, 5579, -362, 1033, -4758, -1179, 9655, -9998, 3914, 8230, 4119, 3164, 6303, -456, -4005, -8145]) == [29, 39, 80, 50, 18, 1, 51, 69, 44, 6, 21, 6, 69, 35, 53, 39, 54, 4, 10, 34, 24, 34, 2, 24, 41, 34, 10, 10, 22, 4, 20, 18, 14, 37, 10, 6, 33, 14, 10, 27, 31, 25, 20, 24, 18, 4, 4, 26, 10, 27, 4, 25, 28, 16, 11, 5, 4, 19, 7, 2, 20, 1, 18, 13, 13, 16, 14, 3, 11, 6, 6, 2, 3, 9, 0, 4, 6, 4, 3, 3, 2, 1, 0]\nassert solution.countSmaller([-2315, 7713, -8693, -5013, 6564, -4596, 4588, -2646, 5077, 898, 1819, 3849]) == [4, 10, 0, 0, 7, 0, 4, 0, 3, 0, 0, 0]\nassert solution.countSmaller([5293, 1042, 5393, 1882, -1865, 1641, 8125, 4290, -1157, 5286, 1836, 4711, -846, -8637, 6356, -6079, 1404, -4127, 1444, 2990, -917, -3448, 2661, 5358, 855, 9479, -7897, 7320, 9957, -144, 3114, -3076, -5545, -4528, 1999, 3576, 1575, -359, 5468, -9292, -928, 8632, 4655, -3870, -3266, 4390, -5978, 6942, 6113, 1983, 1002, 9626, -3056, -4087, 4595, -9698, 4907, 3919, 764, 5102, -8166, 8247, -4576, -3493, -3572, -2354, -5015, 5191, -7525, 7888, 4329, 3817, -1303, -1609, 300, 1698, 2506, -8870, 4979, -4447, -8819, 2325, 5635, -8761, -6284, -3890]) == [70, 41, 70, 47, 28, 43, 74, 55, 30, 63, 43, 57, 32, 5, 63, 9, 36, 15, 35, 42, 28, 20, 39, 51, 31, 58, 6, 53, 57, 27, 36, 20, 9, 11, 30, 32, 27, 23, 40, 1, 21, 43, 33, 13, 15, 29, 7, 35, 34, 22, 20, 34, 14, 10, 24, 0, 23, 21, 16, 22, 3, 24, 6, 9, 8, 8, 5, 16, 3, 16, 13, 12, 7, 6, 6, 6, 7, 0, 6, 3, 0, 3, 3, 0, 0, 0]\nassert solution.countSmaller([-8664, 1431, 4283, -4548, 2775, -9436, 1557, -5305, -1195]) == [1, 4, 6, 2, 4, 0, 2, 0, 0]\nassert solution.countSmaller([5236, -2952, -4465, -1163, 2111, -2515, -8910, 9061, -6149, -686, 6729, -706, 2549, -4654, -975, 7506, 963, -5975, 8182, -4899, 5481, 4188, 258, -9760, -4720, -2818, 6506, 9506, 6477, -751, 8944, 4587, 341, 1143, 3682, -747, -2836, -245, 8777, -9970, 7488, -6429, -2052, 1604, -5311, -3124, -1641, -1107, -7753, -7786, 6696, 7347, -7722, 9107, 4470, 3665, 314, -4787, -4758, -9924, -5248, -3924, 9680, 6112, -382, -829, -2043, -1205, 5720, 236, 2945, 865, -602, 6016, 6763, -8838, -864, -7223]) == [58, 22, 19, 28, 47, 23, 3, 67, 9, 32, 57, 31, 42, 16, 25, 56, 37, 9, 54, 11, 43, 40, 31, 2, 12, 15, 42, 49, 41, 22, 45, 36, 28, 29, 32, 22, 14, 23, 37, 0, 35, 6, 12, 23, 6, 10, 11, 12, 3, 2, 23, 24, 2, 23, 18, 17, 14, 4, 4, 0, 2, 2, 15, 13, 7, 5, 2, 2, 7, 4, 5, 4, 3, 3, 3, 0, 1, 0]\nassert solution.countSmaller([5124, -7909, -1632, 1800, 5939, 5544, 6677, -3618, -2236, 2691, 2708, 1588, 1569, -3492, -4721, -4011, 9784, -1978, -4864, 6256, -4534, -1881, -9789, -4429, -4987, 4521, -2086, 402, 8755, -4886, -5682, -4119, 6319, 7490, -1924, 1101, -4999, -279, 4158, -2656, -853, -8378, -2353, -9384, -3057, 2368, -7433, -8252, -8995, 4323, -5171, -9763, 9153, -4704, 5117, 6251]) == [45, 6, 29, 35, 43, 42, 45, 19, 23, 34, 34, 32, 31, 19, 13, 17, 39, 21, 12, 32, 13, 20, 0, 12, 9, 24, 15, 18, 26, 9, 6, 9, 21, 21, 12, 14, 7, 12, 13, 9, 10, 3, 8, 1, 6, 6, 3, 2, 1, 3, 1, 0, 3, 0, 0, 0]\nassert solution.countSmaller([-767, -7531, -2643, -3586, 4367, 792, 4666, 1640, -3943, -2251, 4201, -4170, -6135, -6617, 3253, 1676, 8271, -6860, -718, 992, 9307, 1960, 3687, -2693, 3871, 5640, 31, -1307, -6079, -5199, 7767, -2871, 8881, -591, -7294, -4106, 9852, 6720, -6933, 9086, -4075, 1301, 7974, -2068, 8800, 5100, 6497, -7384, -4160, -3077, 5065, 5365, -3463, -3100, 3818, 9459, -2812, 1704, 7507, 7526, 4150, -4536, 8018, 8463, 8729, 6377, 6136, 8120, 7047, -3317, -7225, 3912, -2413, 505, -2318, -7217, 4860, -962, -2476, 8593, -3472, 2783, -2970, -1400, 679, -3039, 4046, 4468]) == [37, 0, 27, 16, 55, 39, 55, 41, 15, 28, 50, 11, 7, 6, 40, 36, 62, 5, 28, 32, 65, 34, 35, 20, 35, 43, 28, 25, 5, 5, 46, 16, 52, 23, 1, 6, 51, 38, 3, 47, 5, 21, 38, 16, 42, 29, 32, 0, 3, 7, 25, 25, 4, 5, 17, 32, 7, 14, 23, 23, 17, 2, 21, 22, 23, 19, 18, 19, 18, 3, 0, 12, 5, 8, 5, 0, 10, 5, 3, 8, 0, 4, 1, 1, 1, 0, 0, 0]\nassert solution.countSmaller([-7738, -58, 1654, 6735, -5944, 6366, 5739, 5310, 7731, -4978, -289, -4621, 5122, 2960, -7068, 394, 957, -1897, -2848, 4916, -8416, -5342, 632, -5345, 9040, -1084, 1924, 4824, 7329, -6529, -797, 1929, 4095, 33, -9330, -9840, 7978, 9439, 4687, -7022, -1983, -4822, -4228, 1690, -8312, 9562, -4213, 9354, -791, -3684, 4428, -1300, -83, 9510, -1491, 9645, 4995, 5306, -5174, 687, -7250, 6152, 2164, -7470, 9612, -3629, -1224, 2366, -405, 9596, 124, -9128, -9124, 5308, -2393, 8492]) == [6, 35, 41, 60, 11, 58, 56, 55, 57, 14, 31, 15, 49, 42, 8, 32, 34, 21, 18, 41, 4, 10, 28, 9, 44, 20, 28, 34, 38, 8, 19, 26, 28, 22, 1, 0, 31, 33, 26, 5, 12, 6, 6, 18, 2, 27, 5, 24, 11, 5, 16, 8, 10, 19, 7, 20, 13, 13, 4, 9, 3, 11, 8, 2, 11, 2, 3, 5, 3, 6, 3, 0, 0, 1, 0, 0]\nassert solution.countSmaller([-4752, -7291, 8993, -3131, -9134, 8994, -3691, 7726, -8711, -5086, 6044, 2593, -6937, 2032, -7260, -8253, 1583, 2542, -6792, 7167, 79, 9770, 8016, -3306, -338, -842, -7930, -9268, -6184, -8496, 5438, 6813, 3862, 9802, 9587, 8682, 6092, -40, 8186, 9077, -2843, 8032, -9639, 1437, 9211, -7199, -5271, 5904, -9757, -7487, -8121, 6391, -2967, 3043, -6068, -750, -7191, 3785, 2101, 9573, 8147, 6174, 6814, -6605, -9465, -1208, 8750, -6836]) == [23, 11, 58, 24, 4, 56, 21, 48, 4, 19, 39, 33, 12, 29, 9, 5, 26, 27, 11, 36, 23, 45, 35, 15, 20, 18, 6, 3, 10, 3, 21, 25, 20, 34, 33, 28, 21, 15, 25, 26, 12, 22, 1, 13, 22, 4, 8, 14, 0, 2, 1, 12, 5, 8, 4, 5, 1, 5, 4, 8, 6, 4, 4, 2, 0, 1, 1, 0]\nassert solution.countSmaller([1844, 4320, 6283, -9207, 5849, 6946, -4903, 848, -7920, 4443, 294, 8578, -1955, 8618, -4944, 9259, -7028, -5343, 1610, 4078, 4694, 9711, 9371, 6132, 2835, -6354, -5931, -7090, -6917, -5905, 1669, -6893, 8926, 1042, 5922, 8670, -5045, 654, 9083, -4836, -2827, 5232, 1724, -2366, 6538, -3606, -3456, 8094, -1580, 7765]) == [27, 29, 35, 0, 31, 34, 11, 20, 0, 25, 17, 31, 15, 30, 9, 32, 1, 6, 15, 18, 18, 28, 27, 20, 17, 3, 3, 0, 0, 1, 10, 0, 16, 8, 10, 13, 0, 6, 11, 0, 2, 5, 4, 2, 3, 0, 0, 2, 0, 0]\nassert solution.countSmaller([-1607, -1674, 3688, -223, 124, 5039, -1751, 4974, 5458, 6493, 8463, 8519, 1277, 9685, 4541, -6586, -8013, 1440, -8294, -3736, -7860, -2144, -1439, 4071, 9107, -270, -2384, -8768, 718, 747, 1849, -8386, 3780, -1877, -3907, 254, -3996, -1119, 8807, 6050, 6328, -8053, 3614, 8267, 8877, 2728, -6486, 7166, -5364, 7548, -9217, -305, -8523, 3604, 9875, -1296, 6373, -6791, -7920, -2628, -9414, 9836, 2048, 9559, -2546, -6867, -7090, -1543, 6507, -3761, -3241, -7000, -2029, 2881, -8927, 1741, -5610, -3978]) == [33, 32, 52, 38, 38, 54, 31, 52, 52, 55, 59, 59, 40, 62, 50, 15, 8, 38, 6, 20, 8, 23, 26, 41, 50, 29, 22, 3, 28, 28, 29, 4, 33, 21, 15, 24, 13, 21, 35, 28, 28, 4, 26, 30, 30, 23, 9, 26, 10, 25, 1, 17, 2, 19, 23, 15, 18, 6, 2, 9, 0, 16, 12, 14, 8, 3, 1, 7, 9, 4, 4, 1, 3, 4, 0, 2, 0, 0]\nassert solution.countSmaller([-9929, 3104, -5293, -41, 2075, -1905, -7234, -8425, -2840, 7941, 264, 3108, 7298, -9324, 5360, 6688, -8673, 5673, 4313, -2981, -1366, 6471, -5280, -7832, 8345, -45, 239, -4849, 4545, -807, -1571, 1820, 2476, -6978, -4867, -8850, 2403, -5629, -9760, 2467, 8251, -4952, -2724, -6770, 5568]) == [0, 31, 10, 22, 25, 17, 6, 4, 13, 33, 19, 23, 30, 1, 24, 27, 2, 24, 21, 10, 12, 21, 6, 2, 20, 11, 11, 7, 14, 9, 8, 8, 10, 2, 5, 1, 5, 2, 0, 3, 4, 1, 1, 0, 0]\nassert solution.countSmaller([3843, 3640, 5991, 441, -3787, -8679, -8127, 5259, -3242, 8619, -9819, -7062, 3854, -665, 5577, -6742, -6098, -6289, -8028, 2919, 1358, -2784, 1010, 3020, 5973, 3188, 3546, -1767, -998, -2988, -4902, 2834, 2554, -4061, 6454, 4815, -7329, -8933, -7537, -5480, -544, 7055, -5322, 8496, -1107, 1408, 478, 5496]) == [36, 35, 41, 24, 15, 2, 2, 33, 13, 38, 0, 4, 28, 16, 29, 4, 5, 4, 1, 19, 15, 8, 13, 16, 20, 16, 16, 8, 9, 7, 5, 11, 10, 5, 11, 9, 2, 0, 0, 0, 2, 5, 0, 4, 0, 1, 0, 0]\nassert solution.countSmaller([4847, 6244, 6041, 1485, -8528, 8739, 4114, 4950, 3640]) == [4, 6, 5, 1, 0, 3, 1, 1, 0]\nassert solution.countSmaller([-5035, 9653, 4473, 3296, -1780, 7009, 8301, 3724, -7505, 1273, 8288, -4553, 670, -8268, 5678, 8592, 9158, -4783, -1090, -3412, -9462, -7831, 723, 2983, -5099, 3804, 3445, 6063, -2396, -6789, -4644, -9493, 1503, -9435, 3167, -5635, 4604, 8413, -5350, 4831, -9983, 5471, 5775, -4279, 8169, 8421, 1204, 17, 6747, 8750, -1052, 9758, 7659, -1397, -309, 3500, 861, 9702, -5972, 7063, -713, -3955, 9582, 9289, -5704, 7378, 3591, 2559, 6463, 3577, -415, -5123, 372, -455, 4362, 747, 7095, 2107, 7615, 2961, 8154, 7947, -107, 8259, -4676, 4493, 7264, -7488, -5168, 5726, -6133, 4901, -7692, 182, -3623, 6317, 935]) == [18, 93, 60, 52, 27, 70, 81, 55, 7, 43, 77, 20, 36, 4, 57, 75, 76, 16, 24, 21, 2, 3, 30, 38, 13, 42, 38, 49, 18, 5, 13, 1, 29, 1, 31, 6, 35, 53, 6, 34, 0, 34, 35, 8, 45, 46, 23, 17, 34, 43, 11, 45, 38, 10, 13, 22, 17, 39, 3, 28, 9, 7, 34, 33, 3, 27, 18, 15, 22, 16, 8, 4, 9, 6, 12, 8, 15, 9, 15, 9, 15, 14, 6, 13, 4, 7, 10, 1, 2, 6, 1, 4, 0, 1, 0, 1, 0]\nassert solution.countSmaller([-7, -8299, -6724, 1550, -1855, -7636, -3404, -9250, -8264, -2317, -3902, 46, -361, -4850, 1504, -6645, 5959, 3204, -1744, -4957, -7532, -5305, -7114, -3913, -3644, -2116, -9517, 6041, 7450, -5242, 1673, 8261, 606, -616, 5065, -7385, -7887, -5496, 4574, -770, -141, 108, -2863, -8958, 1928, 6303, 5933, 7072, -6708, 3595, -5701, -1251, 47, 4028, 6080, -1440, -3078, -3839, -9634, 6852, 31, -4678, 4969, 4720, -8679, 27, 1561, 1225, -8338, -3421, -1078, 9269, 835, -6160, 5159, 3715, 7919, -8897, 6971, -8636, 3250, 9957, -3900, 3328, 7649, 6336, 5376, 6602, -846, 5576, -3780, 165, 7787, -5144]) == [49, 8, 14, 57, 37, 10, 31, 2, 7, 31, 23, 42, 38, 20, 46, 12, 62, 48, 29, 18, 8, 14, 9, 16, 19, 22, 1, 52, 59, 12, 36, 60, 32, 25, 43, 7, 6, 9, 37, 21, 21, 24, 16, 1, 26, 38, 36, 41, 5, 27, 6, 14, 18, 25, 30, 13, 12, 9, 0, 28, 13, 6, 20, 19, 1, 10, 13, 12, 2, 6, 6, 21, 8, 2, 10, 9, 16, 0, 12, 0, 5, 12, 1, 4, 8, 6, 4, 5, 2, 3, 1, 1, 1, 0]\nassert solution.countSmaller([-2930, 3672, -8915, 4430, -848, -5173, -9207, 7260, -2278, 1418, -1628, 1786, 4998, 5249, -6099, 5087, 7514, -7023, -7322, 8778, 3349, -916, -1676, 8354, 4929, 4433, -8628, -1891, 5102, 2840, -8728, -2462, -3134, -2877, 6852, -6228, -861, 4985, -6614, 3456, -6577, -5026, 6898, -2781, 8336, -2437, -2159, 3209, 2562, -4215, -4150, 9931, 8478, -6940, -4604, 3713, -3104, -1617, 4881, 7496, 4713, 3409, -2925, 992, 6215, 5954]) == [18, 41, 1, 41, 30, 10, 0, 51, 20, 28, 23, 27, 39, 41, 8, 38, 44, 3, 2, 45, 27, 21, 19, 40, 31, 28, 1, 17, 29, 21, 0, 13, 8, 10, 26, 3, 13, 21, 1, 16, 1, 1, 19, 6, 19, 6, 6, 9, 8, 2, 2, 14, 13, 0, 0, 5, 0, 1, 4, 6, 3, 2, 0, 0, 1, 0]\nassert solution.countSmaller([-9742, 2198, -1306, -967, 3698, -4205, -1165, 384, 6540, -6421, 4479, -7519, 2750, -4089, -9002, 7340, 9389, 9994, -6229, -5328, -3324, 1489, 7354, 7944, -2645, 814, -7334, 1301, -8594, 2945, -2973, 3069, -2350, 5103, 5121, -986, 4426, 8059, 4510, -8738, 3329, 3021, 8592, -1214, 3652, 5239, -6525, 5670, 9291, -1648, 9139, 6138, 7408, -9361, 3277, -9844, 4536, -4712, -8397, -6418, 7679, 8345, 1163, -5120, -7484, -5005, 6792, 6245, 2628, -7790, 1272, 5395, 8782, 2100, 9886, -7989, -3829, -5121, 4990, -7869, -6950, -3604, 9286, -9216, 5236]) == [1, 44, 32, 35, 50, 23, 32, 33, 60, 15, 47, 10, 38, 21, 3, 55, 66, 67, 14, 14, 20, 30, 51, 53, 21, 25, 10, 26, 4, 27, 18, 27, 18, 33, 33, 20, 28, 40, 28, 3, 25, 23, 37, 18, 23, 26, 9, 26, 35, 16, 32, 25, 27, 1, 19, 0, 18, 11, 1, 6, 20, 20, 11, 7, 4, 6, 15, 14, 10, 3, 7, 10, 10, 7, 10, 1, 4, 3, 4, 1, 1, 1, 2, 0, 0]\nassert solution.countSmaller([-709, 8151, 6293, -1581, 2837, -6680, 4479, 7568, -8923, 3272, -5673, 1262, 7358, 3907, -5554, 1476, -8588, -9742, -6392, -2908]) == [9, 18, 15, 8, 10, 3, 11, 12, 1, 8, 3, 5, 7, 6, 3, 4, 1, 0, 0, 0]\nassert solution.countSmaller([-2955, -1392, -8154, -5747, 3743, -6737, -7667, 2089, -725, 8601, 2750, -4433, 7312, -7205, -7899, -13, -8474, -6480, 2596, -4711, 8267, 6784, -3194, 9581, 3209, -9984, 9470, 3951, 8757, -4065, -5271, -2189, -1918, 578, 3634, 7341, -5133, -6852, 2625, 9485, 70, 8493]) == [16, 18, 2, 8, 26, 6, 3, 18, 14, 28, 19, 9, 22, 3, 2, 11, 1, 2, 11, 4, 16, 14, 5, 18, 10, 0, 14, 10, 12, 3, 1, 2, 2, 3, 4, 4, 1, 0, 1, 2, 0, 0]\nassert solution.countSmaller([611, 8438, 1676, 1323, -656, -7513, 5799, -3681, 4416, -1779, 5701, 1911, 8424, 9924, -6932, 8987, -5644, -7170, -1777, 1028, -1458, -8144, -4716, 2080, 3104, 2969, -9706, 9267, 3582, 5784, 8801, 3281, 6712, -632, -9304, 9469, 5321, 1326, -3340, -2929, -9371, -3911, -6343, 6182, 1680, 2865, 6436, -3563, 9910, -1538, -9403, 3800, 5121, 9807, -7210, 6290, 5497, 5741, 7705, 7958, 4895, 7077, 1931, -2186, 3005, -446, 9652, -8312, 871, -5125, -692, 8953, 4175, -1024, -7847, 2905, 8074, -9803, 7522, -77, -8079, -5568, -1715, 8730, 3856, -6198, -8934, 4883, -1554]) == [38, 77, 42, 40, 34, 10, 62, 20, 52, 24, 56, 38, 66, 75, 12, 68, 14, 11, 21, 31, 24, 7, 14, 31, 35, 33, 1, 57, 34, 43, 53, 33, 45, 23, 3, 50, 37, 25, 14, 14, 2, 11, 7, 33, 20, 21, 32, 10, 40, 13, 1, 20, 24, 35, 5, 25, 23, 23, 25, 25, 22, 22, 16, 8, 16, 12, 22, 2, 12, 6, 9, 17, 12, 8, 3, 8, 11, 0, 9, 6, 1, 2, 2, 5, 3, 1, 0, 1, 0]\nassert solution.countSmaller([4651, 7095, 7050, 8167, 9827, 8338, 2555, -7702, 2072, -5246, 6291]) == [4, 6, 5, 5, 6, 5, 3, 0, 1, 0, 0]\nassert solution.countSmaller([-7650, -6072, -140, -6868, -3118, 7103, 4676, 3534, 4127, 4689, 3318, -4931, 7667, 4618, -2507, -6543, 9143, 4752, -544, -4998, 2439, 5156, 3047, -267, 8534, 9209, 6949, 341, 159, -6021, -2293]) == [0, 2, 10, 0, 4, 21, 16, 13, 13, 14, 12, 3, 15, 11, 3, 0, 13, 9, 3, 1, 5, 6, 5, 2, 5, 5, 4, 3, 2, 0, 0]\nassert solution.countSmaller([3843, 17, -3128, 3999, -7092, 8, 8705, 9224, 3347, 4757, 274, -7513, 4299, -5234, -3773, 4401, -3644, 5432, -9167, -3042, 858, -6448, -1138, -10, -664, 2043, 3352, -4680, 6782, -7895, 6337, 2070, -20, -2907, -7329, 4888, 366, -9356, 2115, 7796, 8138, 1936, -7804, 160, 1885, 9440, -9781, -2915, 7613, -6294, 5172, 7860, 1537, 9286, -4342, 1472, -4344, -2676, 6777, -7876, 5697, 7127, -6979, 6679, 4923, 3095, 6592, -493, -6073, 7404, -8195, 2149, -3452, -7697, 2801, -4774, -4954]) == [52, 35, 24, 50, 10, 32, 67, 67, 46, 49, 33, 8, 45, 13, 18, 43, 18, 45, 2, 18, 28, 9, 20, 23, 20, 28, 33, 13, 40, 3, 35, 26, 19, 16, 6, 27, 18, 1, 21, 33, 34, 20, 3, 15, 17, 31, 0, 11, 26, 4, 18, 24, 13, 23, 8, 11, 7, 8, 16, 1, 12, 14, 2, 12, 10, 9, 9, 6, 2, 7, 0, 4, 3, 0, 2, 1, 0]\nassert solution.countSmaller([-5380, 6592, -757, -7898, -4272, 8620, -7572, -1682, 6436, -1199]) == [2, 7, 5, 0, 1, 4, 0, 0, 1, 0]\nassert solution.countSmaller([-4743, -3947, 6598, -929, 6695, 4651, -4848, 2087, 2625, -1769, 33, -5307, -2874, 3835, 5045, -2852, 4415, -8495, -1222, 9364, -6796, -7469, 7958, -628, -5073, -3767, -558, -2210, -5990, 3130, 8077, -9465, 6894]) == [8, 8, 25, 14, 24, 22, 7, 16, 16, 11, 14, 5, 7, 13, 14, 7, 12, 1, 7, 13, 2, 1, 9, 5, 2, 2, 3, 2, 1, 1, 2, 0, 0]\nassert solution.countSmaller([-7115, 4476, 1603, 6288, -9638, -2861, 6229, 2006, -5564, -8924, -65, 4048, 7923, 1413, -4102, 6581, 792, -3761, 5809, -2666, -1889, 8729, -5598, 6881, 1382, 2726, 7409, 8175, 7576, 1642, -5037, 2193, -798, 6302, 1917, -742, -5026, -6022, 8218, -6571, 1789, -2092, 4923, -7507, -3385, 8465, -3547, -1977, 3392, 9161, 8968, -2513, -999, -5479, 2747, -971]) == [3, 38, 28, 40, 0, 13, 37, 29, 5, 0, 20, 30, 37, 22, 7, 31, 19, 7, 27, 9, 12, 32, 3, 25, 15, 19, 23, 24, 23, 15, 4, 16, 12, 18, 14, 12, 4, 2, 14, 1, 9, 5, 10, 0, 2, 8, 1, 2, 5, 6, 5, 1, 1, 0, 1, 0]\nassert solution.countSmaller([552, 795, -5576, 4414, 7737, 8011, -4687, 1331, -7396, 7220, -9078, -8172, -9912, 9780, 1388, -2896, -9383, 2218, 7360, 903, -175, 6257, -2620, -6268, -7826, -9367, -6430, -36, 8587, -5171, -5658, -5777, 9499, 9705, -1288, -8864, 2952, -7923, 8822, 7974, -7231, 1346, 5733, -6784, 8680, 968, 2364, -6560, -9404, -7172]) == [26, 26, 18, 33, 37, 38, 19, 26, 9, 32, 4, 5, 0, 36, 23, 15, 1, 21, 25, 18, 16, 22, 14, 10, 4, 1, 7, 11, 17, 9, 8, 7, 16, 16, 7, 1, 9, 1, 11, 9, 1, 5, 6, 2, 5, 3, 3, 2, 0, 0]\nassert solution.countSmaller([-4412, -8078, -7296, 9142, -9497, -5915, -2376, 3824, 2916, 7909, 5527, -2861, -7842, 5739, -7704, -9342, -4200, 5272, 2350, -4285, 3846, 4221, 93, -7076, 4519, -9886, 4977, -7889, -3059, -3832, 5824, -6103, 5624]) == [11, 3, 6, 29, 1, 7, 12, 15, 14, 23, 19, 11, 3, 18, 3, 1, 5, 13, 8, 4, 7, 7, 6, 2, 5, 0, 4, 0, 2, 1, 2, 0, 0]\nassert solution.countSmaller([5639, -6401, -8671, 5928, 8026, -988, -5836, -6224, -8511, -509, 7601, 7451, 2648, -3562, -6861, -2061, 628, -6363, 5521, 6673, 3384, -1260, -2869, 8895, 5560, 4855, 1905, -5719, -5786, -2961, 1776, -8954, -3022, -9431, -6658, -330, 5170, -2057, 5184, -5414]) == [33, 6, 2, 31, 34, 18, 7, 6, 2, 15, 28, 27, 19, 8, 2, 10, 13, 3, 18, 19, 14, 10, 8, 16, 15, 12, 11, 4, 3, 5, 7, 1, 3, 0, 0, 2, 2, 1, 1, 0]\nassert solution.countSmaller([-3040, 5187, 3941, -36, 291, -6894, -8211, 8238, -6919, -9312, 843, 2921, -9281, -6024, -1146, -9881, 1134, -5383, 5507, -8658, -2922, 6352, -7857, -4274, -2351, 3061, -2844, -7333, 2225, 4108, 789, 3508, 3810, -2108, -120, -5082, 617, -1219, -417, -2607, 418, -2771, -9870, -3398, -4067, 1056, -4389, 3165, 6839, 475, -45, -4193, 6292, 7368, 2134, 9779, 4128, 4204, -900, -5286, -191, 3210, 6702, -1733, -1352, 232, 7955, -3332, -3598, -1139, -59, -8657, 9113, -401, 5089, 7285, 2959, -3058, 4885, 6895, -1163, 8201]) == [23, 67, 61, 42, 43, 10, 6, 72, 8, 2, 43, 47, 2, 6, 27, 0, 40, 5, 52, 1, 14, 51, 2, 6, 15, 37, 12, 2, 33, 38, 30, 35, 35, 13, 22, 3, 26, 14, 17, 11, 21, 10, 0, 6, 4, 18, 2, 19, 26, 16, 14, 2, 21, 24, 14, 26, 16, 16, 9, 1, 9, 12, 14, 4, 4, 8, 13, 2, 1, 3, 4, 0, 9, 2, 4, 5, 2, 0, 1, 1, 0, 0]\nassert solution.countSmaller([3323, 2397, -29, -24, 189, -5257, -6826, 2803, -102, 7678, -5756, 4476, 7463, -5958, 4108, 500, -1382, -5423, -6095, -3446, -2005, -2492, -6449, -7189, -7386, 7691, -1065, 3771, -667, 6830, 9572, 8884, 5188, 6676, -2829, 5558, -9629, -7706, 7419, 4276, -1059, 8129, 9378, 8110, -7630, 2570, -4275, -174, 914, 2827, 4943, -7107, 5151, 8079, -8597, 2862, -6593, -7622, -9330, 6308, -3961, 9245, 234, 5560, -4619, -9345, 2890, 1569, 7790, 1252, -1554, -746, 5522, -1187, 6522, -8267, 5627, -6056, 7160, -6236, -8147, -3384, 2122, 5629, 8485, -4842, -8651, 6129, -2255, -3833, -132]) == [59, 53, 44, 44, 44, 22, 13, 49, 41, 71, 19, 53, 68, 18, 50, 40, 31, 18, 16, 22, 26, 24, 14, 11, 10, 56, 24, 38, 26, 50, 60, 57, 40, 48, 20, 40, 0, 6, 45, 34, 21, 46, 48, 45, 6, 28, 13, 20, 22, 25, 27, 7, 26, 35, 3, 23, 6, 5, 1, 26, 8, 29, 15, 20, 7, 0, 16, 14, 21, 13, 9, 10, 12, 9, 14, 1, 10, 3, 11, 2, 1, 3, 5, 5, 6, 1, 0, 3, 1, 0, 0]\nassert solution.countSmaller([-6442, -5737, 7225, -8589, -7523, -7496, -2064, 1365, 5819, 1208, -6639, 1677, -5803, -3788, -2147, -7865, -9714, 4314, -6532, 9829, -673, 1986, -94, -5851]) == [7, 9, 20, 1, 2, 2, 8, 11, 14, 10, 2, 9, 4, 4, 4, 1, 0, 5, 0, 4, 1, 2, 1, 0]\nassert solution.countSmaller([6651, -7007, 9778, 4648, 9650, 9820, 9490, 4364, 8364, -6270, -8328, -2567, 8251, -590, 9854, -6530, 8500, -6968, -4601, 9908, -1566, 490, 4866, 8354, 3923, 5908, 8481, -134, -9917, 1371, 1701, 4375, -12, 8825, -440, -1834, 4978, 5026, 5826, 2700, 4562, -5759, -3742, -7311, -540, -8476, 2958, -2108, 6633, 2854, 1328, -8738, -3087, 2972, -2383, 4881, 3749, -6859, 980, -3587, 8528, 5033, 8221, 9011, 6735, -7901, 4016, 1736, 3573, -1589, 5263, -1358, 7440, -7149, -6400, -8416, 3794, -9805, -1632, 8889, 2621, -4515, 7179, -3451, 7134, -3161, -2122, 4994, -8864, 2451, -8784, 6475, 2927, -4910, -2803, -2613, 2745]) == [76, 11, 91, 63, 89, 89, 88, 60, 80, 15, 7, 25, 75, 33, 81, 12, 75, 10, 14, 77, 28, 33, 53, 68, 49, 59, 66, 31, 0, 33, 33, 46, 30, 61, 29, 24, 45, 46, 48, 33, 42, 11, 13, 7, 24, 4, 31, 19, 40, 28, 23, 3, 13, 26, 15, 29, 26, 6, 18, 9, 34, 26, 32, 33, 28, 4, 23, 16, 20, 14, 21, 14, 23, 4, 4, 3, 15, 0, 9, 17, 10, 3, 14, 3, 12, 3, 5, 8, 0, 4, 0, 5, 4, 0, 0, 0, 0]\nassert solution.countSmaller([4601, 9311, 7089, -3942, 2093, 2375, -5054, -8257, 2800, -913, -3669, 4812, -2754, 5599, -3090, -3594, 4361, 8793, 3542, -6970, -5927, 7002, -7107, -6474, -9545, -9248, 7056, -2406, -9342, -4371, -2034, -1123, 6713, 7260, 382, -2022, 4244, 587, -9432, -6144, 537, 7688, -8597, 4121, -5219, 4587, 258, -2843, -5703, 8488, -7623, 1541, 4993, -9518, 6827, 8176, -1659, -1376, -2751, -26, 3841, 121, 2561, 8411]) == [48, 62, 55, 17, 37, 37, 15, 6, 36, 27, 15, 40, 18, 40, 16, 15, 35, 46, 31, 8, 10, 36, 7, 7, 0, 3, 32, 11, 2, 7, 9, 12, 25, 26, 15, 9, 20, 15, 1, 3, 12, 19, 1, 14, 3, 13, 9, 3, 2, 14, 1, 6, 8, 0, 7, 7, 1, 1, 0, 0, 2, 0, 0, 0]\nassert solution.countSmaller([6165, -3612, 53, -6531, 6309, 666, 9172, 5715, 834, 4749, 5608, 840, 4988, 3388, 4437, 5300, 6777, -9124, -84, 873, -1020, -253, 1698, 5520, 2187, 4139, 8933, 1395, -3460, -2745, 2477, 4560, -7779, 8828, 1476, -2588, 9674, -8914, -5836, 9523, -6853, -5369, 5277, -5534, 3090, 612, 760, -1446, 9627, -4517, 3730, -2914, 4171, 6238, -3921, 7031, -7860, 6368, 7971, 2381, -6427, -534, -3375, -1993, 7117, -9379, 5129]) == [53, 13, 24, 6, 51, 24, 57, 48, 25, 40, 45, 25, 39, 33, 36, 39, 42, 1, 21, 23, 18, 19, 23, 33, 23, 27, 37, 21, 11, 13, 21, 24, 3, 30, 18, 12, 30, 1, 4, 26, 2, 4, 18, 3, 13, 10, 10, 8, 18, 3, 9, 5, 8, 9, 3, 9, 1, 7, 8, 5, 1, 3, 1, 1, 2, 0, 0]\nassert solution.countSmaller([2226, -3812, 2732, 7244, 6137, 1685, -3514, -6579, -6797, -3559, 2271, -9948, -2762, -1374, -9824, -8940, -4337, 76, -6298, -5504, 2078, 6223, 1677, 6681, -6385, -4723, 4196, -8350, 7872, 2134, -3162, 4409, 5220, 2011, -4198, -9289, 2951, 8605, 6379, -1176, -413, -7625, -9799, -3691, 2380, 9959, 6027, -8380, 6766, 286]) == [32, 16, 33, 43, 38, 27, 18, 9, 8, 15, 26, 0, 15, 15, 0, 2, 9, 14, 6, 6, 15, 22, 13, 22, 5, 5, 15, 3, 19, 11, 6, 12, 12, 9, 4, 1, 8, 11, 9, 4, 4, 2, 0, 1, 2, 4, 2, 0, 1, 0]\nassert solution.countSmaller([-326, -6405, -6247, -7354, 5937]) == [3, 1, 1, 0, 0]\nassert solution.countSmaller([-4681, 2488, 6577, -4056, 7052, -8183, -6592, -9689, -8691, 517, 7487, 7019, -9570, 94, 2008, 5946, 5389, -3535, -3048, -5764, 5595, -114, 857, -9987, -294, -5442, 5503, 7867, -7265, -6545, 235, 4420, -1490, 5559, -301, -9864, -4262, 1961, 9109, 44, -3673, 7952, -9840, -5197, -10, -924, 2307, 1901, -1399, -2776, -7532, 202, -7466, 1269, -5584, 4110]) == [16, 40, 47, 17, 47, 6, 9, 3, 4, 28, 42, 41, 3, 24, 30, 37, 33, 13, 13, 7, 32, 18, 22, 0, 16, 7, 25, 26, 4, 4, 16, 21, 9, 20, 11, 0, 5, 14, 17, 10, 5, 14, 0, 3, 6, 5, 8, 7, 4, 3, 0, 2, 0, 1, 0, 0]\nassert solution.countSmaller([-6940, -6648, -4050, -1525, -7175, -4624, -3356, -623, -6268, 1341, 2758, -866, -4718, 4109, -3816, -6557, -257, 7725, -4786, -8314, -1577, 5032, -5601, 2978, 1930, -2045, 4806, 1953, 8082, -3841, 6431, 7490, -6510, -6240, -2144, -5, -5651, 1081, -9808, 2362, 4801, -2850, -3192, 5217, -2606, 6375, -8379, 3039, -8786, 7606, 6200, -2456, 902, 2380, 1289]) == [5, 5, 14, 24, 4, 12, 14, 22, 6, 26, 30, 20, 10, 30, 11, 4, 17, 36, 8, 3, 14, 26, 6, 21, 17, 12, 21, 16, 26, 6, 22, 22, 3, 3, 8, 8, 3, 8, 0, 8, 10, 3, 2, 8, 2, 8, 1, 5, 0, 5, 4, 0, 0, 1, 0]\nassert solution.countSmaller([-6238, -864, 2810, -9378, -8333, 9033, 7359, 4797, -4031, -747, 585, -9719, -1094, -3353, 9850, 8231, 390, 9752, 8625, -9052, -7326, -8020, -8794, -260, 9903, -7133, 242, -2940, 738, -704, 8273, 6788, -2753, -1035, 9556, -9596, -8168, 9952, -8261, -5341, 7956, 7467, -3129, 4247, -9163, -6928, 7848, -8242, -5729, -5471, -1821, 3386, 6650, -4321, -5381, 3611, 5259, -1183, 8245, -6870, 8317, 4546, -309, 3248, 6216, -5572, 7599, -3761, -4241, -8060, 8942, 3787, 2082, 8972, 936, -2493, -713, -28, -8950, 6730, -390, 2535, 883, -9752, 3692, -951, -715, -2480, -4634, -3268, -9190, 3872, -9095, 5360, 5064, 2149]) == [20, 42, 59, 3, 9, 85, 73, 65, 26, 39, 48, 1, 35, 26, 79, 70, 44, 76, 72, 5, 12, 11, 6, 37, 70, 10, 37, 23, 36, 32, 60, 54, 23, 27, 60, 1, 7, 58, 5, 13, 51, 48, 18, 39, 2, 6, 45, 4, 6, 7, 15, 28, 37, 9, 7, 26, 31, 13, 34, 5, 33, 27, 16, 22, 27, 5, 27, 7, 6, 4, 24, 19, 15, 22, 14, 6, 9, 10, 3, 16, 8, 10, 8, 0, 8, 5, 5, 4, 2, 2, 0, 2, 0, 2, 1, 0]\nassert solution.countSmaller([661, 7292, 9333, 7053, 9819, -882, 1024, 6730, -1027, -8707, -7918, 2561, -1697, 2055, -7493, 8818, 4396, 8742, 1287, -3558, -8858, -6404, 5334, 2043, 66, -9394, -5250, 904, -3922, 91, 1831, -6299, 5758, -3431, -8614]) == [17, 29, 31, 28, 30, 14, 17, 25, 13, 2, 3, 18, 10, 16, 3, 19, 15, 17, 12, 7, 1, 2, 11, 10, 6, 0, 2, 5, 2, 3, 3, 1, 2, 1, 0]\nassert solution.countSmaller([-274, 1547, -9575, 661, 5479, -5656, 3882, 4904, 8728, 1236, 2238, 3616, 6811, 2526, 5672, 9213, 7778, -4926, 5192, -7906, 309, -6780, -2908, 8795, -699, 7030, 4285, 1234, -2614, -6229, -7667, -3383, -3839, 7287, 5078, -6367, -6678, 6591, 4876, -9826, 8755, -1983, -4002, 6144, -1243, -9206, 2866, 5636, -5554, -9025, -6768, -9552, -9910, -6560, 2721, 7999, -298, -3693, -7788, -8488, -6909, 2802, -2402, 7678, -8767, 5659, -8606, 70, 1171, -3931, 1207, -7107, 2003, 9752, 6362, -5247, -7248, -9964, -3715, -2220, 7764, 3461, 6208, -3950, 7982, 4268, 6583, -689, 6204, -7957, -6928, -391]) == [45, 52, 3, 46, 65, 23, 57, 60, 79, 48, 49, 54, 68, 49, 60, 75, 70, 25, 56, 10, 42, 16, 30, 67, 35, 59, 48, 41, 30, 20, 11, 27, 24, 52, 43, 18, 16, 48, 40, 2, 50, 25, 18, 39, 24, 3, 32, 34, 15, 3, 12, 2, 1, 10, 24, 35, 19, 14, 5, 3, 7, 19, 11, 25, 1, 19, 1, 12, 12, 7, 11, 3, 10, 18, 14, 4, 2, 0, 3, 3, 10, 5, 7, 2, 7, 4, 5, 2, 3, 0, 0, 0]\nassert solution.countSmaller([5462, -923, 6857, -136, -7030, 6592, 7323, -5841, 460, 373, 3685, -2288, 8362, -9018, -1440, 4406, -6320, -1828, -1490, -1081, -6043, -4930, -253, 1490, -9606, 9492, 7363, 2988, -9140, -8879, -8951, -714, 7211, 7654]) == [25, 15, 25, 17, 5, 22, 23, 7, 16, 15, 17, 8, 20, 2, 9, 14, 4, 6, 6, 6, 4, 4, 5, 5, 0, 8, 6, 4, 0, 1, 0, 0, 0, 0]\nassert solution.countSmaller([-7789, 3517, 7331, 71, 4272, 4236, -3848, 1575, -8483, 8286, 1984, 9897, 9769, 6127, -8603, -5789, -551, 990, -1103]) == [2, 10, 13, 6, 10, 9, 3, 6, 1, 7, 5, 7, 6, 5, 0, 0, 1, 1, 0]\nassert solution.countSmaller([-2704, -9724, 3693, 6983, -6368, 5782, 2746, -4464, 3547, -4175, -5237, 8136, 5427, 3889, 5779, 7104, -2353, -7022, 8493, -1499, 6878, 929, 1934, 761, -3645, 1860, -193, 9413, -5480, -8814, -1270, 9828, -9722, -3690, -1021, 979, -7131, -4042, -5674, 6045, 7695, -4422, 2338, 8080, 5277, 105, -9238, 1995, 597, -5955, 3687, 2875, 6711, 9328, 9629, 7347]) == [17, 0, 34, 42, 5, 37, 29, 9, 29, 10, 8, 39, 30, 28, 29, 32, 12, 4, 33, 11, 28, 17, 19, 16, 10, 16, 12, 26, 6, 2, 8, 24, 0, 6, 6, 8, 1, 4, 2, 10, 12, 2, 5, 10, 7, 2, 0, 2, 1, 0, 1, 0, 0, 1, 1, 0]\nassert solution.countSmaller([7651, 4931, 8344, -5898, 268, -7430, -6231, 2041, -39, -4072, 4473, -6738, 3980, 4319, 9876, -6985, 9047, -296, -752, -3916, -3544, 9942, -8183, 4882, -4550, 4955, 3508, 2649, 6700, 2606, 4595, -4545, 6396, -997, 3709, 3916, -9581, -6762, -3422, -3135, 1202, -7654, 489, -1461, 8260, -8397, 5437, 782, -4165, -6103, 3587, -1286, 5482, -6997, -6058, -9492, 2138, 1034, 7225, -1745, 2160, 2737, -1596, 1164, 1529, 7028, -8396, 6399, -1618, -4417, -4952, 675, -9662, -5002, -2083, 2576, -5780, -3087, -7352, -6410, -5068, 6810, 267]) == [77, 67, 77, 17, 42, 7, 13, 47, 38, 23, 57, 11, 54, 54, 67, 9, 65, 34, 33, 21, 21, 61, 5, 49, 16, 48, 43, 41, 50, 40, 44, 16, 45, 27, 40, 40, 1, 7, 16, 16, 29, 4, 23, 20, 38, 2, 31, 22, 13, 6, 27, 17, 26, 4, 5, 1, 19, 16, 24, 11, 17, 18, 12, 14, 14, 17, 1, 14, 10, 7, 6, 9, 0, 4, 5, 6, 2, 3, 0, 0, 0, 1, 0]\nassert solution.countSmaller([3054, -4624, -1434, 6996, 7509, -968, 4239, -9234, -1508, -7260, -582, 7622, -8726, 7844, 6270, 6494, -9434, -2948, 1968, 315, -595, -6095, 9309, 3329, -6410, 4566, -4148, -4319, 5695, -211, 3489]) == [18, 6, 10, 23, 23, 10, 17, 1, 8, 2, 8, 17, 1, 16, 14, 14, 0, 4, 7, 6, 4, 1, 8, 4, 0, 4, 1, 0, 2, 0, 0]\nassert solution.countSmaller([1024, -4887, 682, -9471, 3022, -1081, 7150, -5278, 6505, 4532, 4924, -2891, 2602, -1, -7282, 2142, 7011, 3179, -2142, 7449, -8579, -9136, 8897, 5385, 2654, 3518, 7794, -6682, 5645, 5041, -7792, -5147, -9641, -9363, 8456, 3494, -7634, 8419, 7034, 7656, -1645, -4643, -4807, 2374, -2481, 359, -1198, 8592, 1277, -4123, -9070, -5326, -2516, 3156, 711, 367, 4435, 6790, 992, -2887, 7891, -252, 4647, -6491, -9678, 5662, -5582, 6478, 9043, 8931, -4268, -2087, 2417, -120, 61, 362, -4422, -3448, -5885, -4574, 4441, 5474, 7307, 3804, -720, 5316, -2459, 67]) == [47, 17, 43, 2, 50, 32, 70, 14, 65, 55, 56, 22, 45, 33, 8, 40, 59, 44, 25, 59, 5, 3, 63, 49, 39, 41, 55, 6, 47, 44, 4, 9, 1, 1, 50, 35, 2, 47, 43, 44, 18, 7, 6, 28, 13, 21, 15, 38, 24, 9, 1, 4, 9, 21, 18, 17, 20, 26, 17, 8, 25, 11, 18, 1, 0, 18, 1, 17, 19, 18, 3, 5, 10, 6, 6, 7, 2, 2, 0, 0, 4, 5, 5, 3, 1, 2, 0, 0]\nassert solution.countSmaller([8670, 426, 6245, -4423, 794, -9709, 9453]) == [5, 2, 3, 1, 1, 0, 0]\nassert solution.countSmaller([3565, -6640, -6549, -440, 6054, -3340, -5962, 261, -3600, -3539, -2969, -3799, -2941, -2265, 4242, -3279, 8958, -9854, -5856, -51, -3921, 7102, 3632, -2748, -8089, 6490, 7523, -4588, 7470, 8639, -8637, 6681, -3813, 3621, -1612, 4176, 8965, 3069, 5365, -8962, 1396, -9934, 5203, 1667, 6049, 8898, -137, -7927, 3682, -2535, 188, 3607, 6009]) == [32, 6, 6, 22, 39, 14, 6, 23, 11, 11, 12, 10, 11, 13, 25, 10, 35, 1, 5, 12, 6, 26, 17, 7, 3, 21, 23, 4, 21, 21, 2, 19, 3, 11, 4, 11, 16, 8, 11, 1, 5, 0, 7, 4, 7, 7, 2, 0, 3, 0, 0, 0, 0]\nassert solution.countSmaller([2125, 9175, -2247, 7647, -8126, 6646, 7992, -5441, 9027, 6486, 7073, 7844, -8762, 7206, 6605, 1385]) == [5, 14, 3, 9, 1, 5, 8, 1, 7, 2, 3, 4, 0, 2, 1, 0]\nassert solution.countSmaller([-6336, 1331, -9481, 2391, -6291, 3968, -1463, 616, -187, -4339, 7786, 3672, -6588, -1850, 544, 2314, -4819, -9418, 6707, 6031]) == [3, 11, 0, 11, 2, 11, 5, 7, 5, 3, 9, 6, 1, 2, 2, 2, 1, 0, 1, 0]\nassert solution.countSmaller([5672, 4956, -8736, 9279, 6648, 319, -6686, -3646, 6916, 6609, -1731, 8061, 4639, -636, 5881, 5772, 9077, 8011, 7505, -9017, 518, -6277, 9441, 5168, 7648, -1564, 5084, -1543, -14, 3050, -5128, -4441, -3517, -3889, 5926, 1506, 6694, -4024, 486, 1274, -7960, -1770, 6811, -8002, -4900, -3328, 5205, -9095, 8810, -4963, -4553, 45, -1041, -8806, -1698, 7157, -9232, 6650, -2707, -9725, 2962, -9458, 756, 1223, -5126]) == [46, 42, 6, 60, 48, 31, 8, 17, 48, 44, 21, 50, 36, 25, 39, 38, 47, 45, 43, 4, 27, 7, 42, 33, 39, 20, 31, 20, 21, 28, 7, 11, 13, 12, 25, 22, 25, 11, 17, 19, 6, 12, 20, 5, 7, 8, 15, 3, 16, 5, 5, 8, 7, 3, 5, 9, 2, 7, 3, 0, 4, 0, 1, 1, 0]\nassert solution.countSmaller([8171, 4634, -8873, 2410, -3124, 6297, -4576, 4819, 6338, -2678, 5652, -7580, -4469, 4829, -1077, -3669, -4939, -1942, -4350, 480, -3267, 8618, -2837, 1071, -6542, -7528, 1199, 2554, -4270, -6969, 5284, 8885, -5240, -9210, -1992, -284, -2090, -2990, 1707, -6661, 2148, -7904, 8490, 3508, 9224, 946, 9367, -5447, -5933, -2017, 8174, -3578, 5925, -5956, 966, -7258, 847]) == [50, 42, 1, 38, 20, 44, 13, 38, 42, 21, 39, 2, 12, 35, 23, 14, 11, 20, 11, 20, 13, 32, 14, 21, 6, 2, 19, 21, 9, 3, 20, 23, 7, 0, 10, 10, 8, 7, 11, 2, 10, 0, 12, 9, 11, 7, 10, 3, 2, 3, 6, 2, 4, 1, 2, 0, 0]\nassert solution.countSmaller([6939, 6926, -9568, -6909, -5675, -3035, -9006, 86, 2446, -3246, 8063, -4512, 2271, -1626, -5360, 6868, -7261, -2360, -3411, 1208, -1828, -1134, -4185, 5110, -463, -4199, 3452, 1393, 7046, -9036, -8254, 3513, 6071, 4832, 3910, 9254, -6276, 9507, 8876, 5464, 8348, -5715, -9313, 878, 9641, 4001, 5330, 9110, -6242, -9371, -1380, -5921, -7480, 943, -5356, -4632, -5874, 1445, -9000, 7169, 649, -6926, -6814, 7523, -3407, 343, -4174, 9109, -6154, 4849, 1165, 8726, 7673]) == [59, 58, 0, 9, 16, 26, 3, 31, 40, 24, 54, 18, 37, 25, 15, 45, 6, 21, 19, 29, 20, 21, 17, 34, 20, 16, 26, 24, 33, 2, 3, 23, 29, 25, 23, 35, 6, 34, 31, 25, 28, 10, 1, 16, 28, 19, 20, 25, 5, 0, 11, 5, 1, 11, 5, 5, 4, 9, 0, 9, 6, 0, 0, 6, 2, 2, 1, 5, 0, 1, 0, 1, 0]\nassert solution.countSmaller([1757, -9872, 4602, 1172, 8079, -2039, -1287, -1312, -385, -8298, -6357, -2415, 690, 9623, -6097, -2346, -3409, 8959, 350, -9715, 3389, -4178, -6041, -1623, -2289, -2973, -7666, 5992, 8727, 8059, 2312, 1930, 1465, -4083, 8216, -9734, -6287, 401, -4823, -6464, -3167, 3338, -273, 7733, -324, -562, -2713, 6936, -8828, -7083, 7078, -5098]) == [36, 0, 39, 33, 43, 22, 24, 23, 24, 3, 6, 17, 25, 38, 7, 16, 12, 34, 20, 1, 24, 9, 6, 13, 12, 10, 2, 18, 23, 21, 16, 15, 14, 7, 17, 0, 3, 10, 4, 2, 3, 7, 6, 8, 5, 4, 3, 3, 0, 0, 1, 0]\nassert solution.countSmaller([1759, -2469, -9662, -8985, 133, -1292, -1219, -6010, -4717, -5836, 2703, -3119, 9963, 7706, -119, 610, 9066, 5982, 9834, 9806, 2622, -487, -7677, -704, -6614, -9768, -8378, 1321, -8339, -1539, 6433, -2607, -598, -40, 3611, -6386, 9936, -5932, -9709, -638, 1293, 1047, -7750, 4785, 2120, 1006, 9455, -3861, 6347, -4894, -2435, -9756, 7289, 3406, -1507, -1222, 6142, 8504, -8027, 4836, -4176, -6398, 9236, 424, 516, 5979, 9901, -9196, 531, -6785, 4505, -8269, 2951, 7601, 77]) == [48, 25, 3, 4, 36, 26, 27, 14, 17, 15, 41, 18, 62, 53, 27, 32, 52, 45, 54, 53, 37, 26, 9, 22, 10, 0, 3, 29, 3, 15, 37, 13, 17, 17, 27, 8, 38, 8, 1, 13, 19, 18, 4, 21, 17, 16, 27, 8, 21, 6, 7, 0, 18, 13, 6, 6, 14, 15, 2, 11, 4, 3, 11, 4, 4, 7, 8, 0, 3, 1, 3, 0, 1, 1, 0]\nassert solution.countSmaller([-611, 6408, 4277]) == [0, 1, 0]\nassert solution.countSmaller([1698, -1252, 1151, 5104, -7587, -2161, -9143, -3382, -6174, -3786, -5632, 4591]) == [9, 7, 7, 8, 1, 5, 0, 3, 0, 1, 0, 0]\nassert solution.countSmaller([-1799, -749, 5636, -6543, -7991, -7735, -7915, -3510, -7461, 9671, -9896, -1662, 1627, 6550, 3627, -851, -8653, 9194, -1461, 9394, -3497, -8472, -5024, 7269, 9512, 6128, 3323, 9020, -3747, -2803, 5136, 1116, 454, 7397, -4518, -5525, -1674, 3581, -7535, -8532, 9993, -5521, -5685, 2012, -6040, 3937, -7429, 241, -46, -3094, 2874, -7066, 2521, -2315]) == [24, 28, 41, 11, 4, 5, 4, 15, 5, 43, 0, 18, 24, 33, 29, 19, 0, 33, 17, 32, 12, 1, 8, 26, 28, 25, 21, 25, 9, 10, 21, 15, 14, 19, 8, 6, 9, 14, 1, 0, 13, 4, 3, 7, 2, 8, 0, 4, 3, 1, 3, 0, 1, 0]\nassert solution.countSmaller([3292, 7430, 1261, 5508, 2463, -5337, 8480, -2970, -9865, -8497, -984, -5507, -2935, -5806, -7618, 1905, -91, 2965, 8397, -9478, 7014, -816, -8939, 3176, 8451, 6951, 9892, -2538, 7995, 4849, -9560, 576, 4767, -1350, -1455, -5941, -7142, -4400, -6502, -359, 3103, 96, 708, -788, 7935, 1546, -9437, -3064, -1977, 9864, -8741, -5872, -5296, -439, -2214, -6991, 825, -7283, -9670, -4084, -1521, -8023, 8046, -6445, -9598, -9806]) == [51, 56, 44, 52, 46, 21, 57, 25, 0, 8, 30, 18, 22, 17, 9, 36, 30, 35, 44, 4, 39, 25, 5, 33, 39, 35, 39, 18, 35, 33, 3, 26, 30, 21, 20, 11, 7, 12, 8, 18, 22, 18, 18, 16, 19, 18, 3, 11, 12, 16, 3, 7, 7, 10, 8, 5, 8, 4, 1, 4, 4, 2, 3, 2, 1, 0]\nassert solution.countSmaller([-3726, -2937, -1331, 4118, -620, -1565, 6289, 622, 3521, -5182, -5438, -5233, -300, 2308, 6474, 8323, 9270, 6977, 9450, 821, -5068, 2568, -780, -4885, -3546, -8277, -3050, 4871, 6663, 1603, -2853, 4959, -7590, 2709, -4239, -8624, -3580, 4826, 1762, -4157, 4210, -253, 4541, 9676, 7312]) == [10, 13, 15, 27, 16, 14, 30, 17, 23, 5, 3, 3, 12, 16, 23, 26, 26, 24, 25, 13, 3, 14, 10, 3, 6, 1, 5, 13, 14, 7, 5, 11, 1, 6, 1, 0, 1, 5, 2, 0, 1, 0, 0, 1, 0]\nassert solution.countSmaller([5725, 8674, -2416, -2377, -9334, -3857, 903, 5310, 4201, -8273, 1529, -9952, 4370, -8631, 4895, -9567, -9909, -7238, -8803, 8901, -7338, -9084, -8291, 1343, 6869, 109, 5439, 5761, 6137, 941, 2908, 4314, 306, -3467, -8430, 993, 3336, -2970, 7329, -3795, 1004, -5240, 6492, 2443, 9425, -1039, -8249, -6074, 2128, 9112, 530, 2854, 6900, -7559, -9230, -7535, 3986, 5328, -5535, -1834, -413, 3732, -6518, 3508, 7954, -3919, -2213, -7296, 3548, -6377, -7641, 8945, 9148, 4492, -5277, -9485, 7069, -1946, 6029, -6175]) == [64, 73, 31, 31, 4, 26, 37, 56, 51, 10, 40, 0, 49, 6, 49, 1, 0, 12, 3, 56, 9, 2, 3, 30, 47, 24, 41, 41, 42, 26, 31, 36, 24, 17, 2, 23, 27, 16, 36, 15, 21, 13, 30, 21, 35, 17, 2, 9, 17, 29, 16, 16, 23, 3, 1, 2, 16, 17, 6, 10, 10, 12, 3, 9, 13, 6, 6, 2, 6, 2, 1, 7, 7, 4, 2, 0, 3, 1, 1, 0]\nassert solution.countSmaller([6395, 1758, -971, 5900, 6324, 7731, 1853, 8123, 3338, 1404, 1747, 9992, -9837, 8706, 7398, -1509, 5951, -8375, -3040, -4840, 9630, 7985, -2076, -9356, 1416, -2536, 9792, -8392, 524, -7860, 3041, -5363, -6140, 5227, 9795, 6221, -5933, -614, -5779, -8086, 4838, -811, -4572, 8402, -7635, -7142, 7935, 6587, -4433, -7689, 7833, 3662, -5466, 5920, 6416, -8620, -9959, 8243, 1057, 3646, -2545, 3747, 4818, 4072, -6410, 4850, 1567, -8207, -9453, -6000, -3281, 2810, -4978, -5596, 8327, 3039, 8614, 9398, 2982, -6283, 4497]) == [62, 41, 32, 55, 58, 61, 40, 63, 44, 36, 38, 69, 1, 63, 55, 30, 50, 5, 25, 21, 58, 52, 26, 2, 29, 24, 53, 3, 25, 5, 29, 16, 10, 35, 46, 36, 11, 20, 11, 4, 29, 17, 13, 35, 5, 5, 30, 28, 11, 4, 26, 18, 8, 22, 22, 2, 0, 20, 9, 13, 8, 12, 14, 12, 2, 12, 7, 1, 0, 1, 3, 3, 2, 1, 4, 2, 3, 3, 1, 0, 0]",
  "inefficient_solution": "class Solution:\n    def countSmaller(self, nums: List[int]) -> List[int]:\n        alls = sorted(set(nums))\n        m = {v: i for i, v in enumerate(alls, 1)}\n        m_inv = {v: i for i, v in enumerate(alls, 1)}\n        mapping = {v: [] for i, v in enumerate(alls, 1)}\n        for v in nums:\n            mapping[v].append(v)\n        ans = []\n        for v in nums[::-1]:\n            x = m[v]\n            # Create a copy of the mapping dictionary for each element\n            temp = mapping.copy()\n            # Create a new list for each element\n            temp[v] = [v]\n            for v2 in temp:\n                for v3 in temp[v2]:\n                    # Update the index of each element to be the current index plus the number of smaller elements to its right\n                    m_inv[v3] += len(temp[v2])\n            # Create a new dictionary for each element\n            m_inv = {v: i for i, v in enumerate(alls, 1)}\n            # Append the number of smaller elements to the right of the current element to the answer list\n            ans.append(m_inv[v])\n            # Remove the current element from the mapping dictionary\n            del mapping[v]\n        return ans[::-1]",
  "is_python": true
}