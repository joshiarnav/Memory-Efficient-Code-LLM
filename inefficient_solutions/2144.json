{
  "problem_idx": 2144,
  "task_name": "Minimum Cost of Buying Candies With Discount",
  "markdown_description": "\nA shop is selling candies at a discount. For **every two** candies sold, the shop gives a **third** candy for **free**.\n\n\nThe customer can choose **any** candy to take away for free as long as the cost of the chosen candy is less than or equal to the **minimum** cost of the two candies bought.\n\n\n* For example, if there are `4` candies with costs `1`, `2`, `3`, and `4`, and the customer buys candies with costs `2` and `3`, they\u00a0can take the candy with cost `1` for free, but not the candy with cost `4`.\n\n\nGiven a **0-indexed** integer array `cost`, where `cost[i]` denotes the cost of the `ith` candy, return *the **minimum cost** of buying **all** the candies*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** cost = [1,2,3]\n**Output:** 5\n**Explanation:** We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the **only** way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cost = [6,5,7,9,2,2]\n**Output:** 23\n**Explanation:** The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** cost = [5,5]\n**Output:** 10\n**Explanation:** Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= cost.length <= 100`\n* `1 <= cost[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumCost(self, cost: List[int]) -> int:\n        cost.sort(reverse=True)\n        return sum(cost) - sum(cost[2::3])\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumCost(self, cost):\n        cost.sort(reverse=True)\n        return sum(cost) - sum(cost[2::3])\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random cost list\n    cost = random.choices(range(1, 101), k=random.randint(1, 100))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumCost(cost)\n\n    return cost, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        cost, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumCost(cost) == expected_result\n        print(f\"assert solution.minimumCost({cost}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumCost({cost}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumCost([97, 96, 95, 94, 94, 93, 91, 91, 88, 85, 83, 83, 82, 81, 81, 81, 79, 71, 70, 69, 68, 64, 64, 54, 54, 53, 53, 49, 48, 47, 46, 45, 42, 40, 38, 35, 34, 33, 32, 27, 26, 25, 23, 20, 17, 17, 14, 12, 8, 8]) == 1904\nassert solution.minimumCost([99, 98, 96, 95, 94, 92, 90, 85, 85, 83, 82, 80, 80, 79, 79, 78, 76, 75, 74, 73, 72, 70, 70, 67, 65, 61, 61, 61, 58, 57, 55, 52, 51, 51, 46, 44, 42, 42, 41, 40, 39, 37, 35, 34, 32, 31, 29, 28, 26, 25, 25, 23, 21, 20, 20, 19, 19, 16, 12, 12, 8, 8, 5, 2, 2, 1, 1, 1]) == 2251\nassert solution.minimumCost([98, 94, 94, 92, 92, 90, 88, 87, 86, 83, 82, 82, 81, 81, 79, 77, 75, 73, 71, 68, 67, 65, 63, 62, 60, 60, 59, 58, 57, 54, 51, 49, 48, 46, 44, 43, 42, 41, 41, 35, 34, 30, 29, 27, 26, 24, 23, 20, 17, 16, 15, 13, 12, 10, 6, 5, 4, 2]) == 2048\nassert solution.minimumCost([100, 100, 100, 99, 99, 99, 96, 94, 93, 91, 89, 89, 85, 84, 83, 80, 78, 74, 72, 71, 67, 66, 66, 65, 65, 64, 62, 61, 58, 58, 56, 55, 54, 54, 51, 50, 50, 49, 47, 45, 44, 43, 42, 41, 40, 32, 31, 31, 28, 26, 23, 23, 20, 16, 15, 15, 14, 12, 12, 11, 8, 8, 7, 5, 3, 1]) == 2343\nassert solution.minimumCost([92, 91, 86, 86, 83, 83, 82, 80, 78, 77, 75, 73, 71, 67, 67, 67, 67, 66, 60, 58, 55, 54, 54, 53, 52, 52, 50, 50, 47, 47, 45, 45, 44, 44, 44, 43, 40, 37, 35, 32, 28, 26, 26, 25, 23, 22, 22, 22, 21, 21, 19, 16, 16, 15, 14, 12, 11, 10, 7, 2, 1]) == 1893\nassert solution.minimumCost([100, 99, 99, 99, 98, 98, 98, 97, 96, 95, 94, 92, 92, 90, 90, 90, 87, 87, 86, 84, 82, 82, 82, 81, 77, 77, 77, 75, 74, 73, 73, 72, 72, 72, 72, 69, 68, 68, 66, 66, 65, 62, 62, 61, 60, 60, 60, 60, 59, 59, 57, 57, 56, 54, 54, 50, 47, 45, 45, 44, 44, 42, 40, 39, 39, 38, 37, 37, 36, 35, 34, 33, 33, 31, 28, 28, 27, 26, 25, 22, 22, 20, 17, 14, 13, 12, 11, 11, 8, 3, 1]) == 3555\nassert solution.minimumCost([88, 76, 64, 32, 29, 26]) == 225\nassert solution.minimumCost([98, 97, 97, 96, 95, 95, 95, 94, 93, 93, 92, 91, 89, 89, 88, 82, 79, 79, 78, 78, 77, 76, 75, 74, 74, 73, 70, 69, 69, 66, 61, 58, 58, 57, 55, 55, 52, 50, 50, 47, 47, 45, 44, 44, 43, 42, 39, 38, 36, 35, 35, 35, 35, 32, 32, 29, 29, 27, 26, 26, 25, 25, 24, 23, 20, 19, 17, 17, 16, 15, 15, 13, 10, 10, 9, 9, 9, 7, 7, 7, 6, 6, 5, 3, 2, 2]) == 2766\nassert solution.minimumCost([100, 100, 98, 98, 96, 95, 95, 94, 92, 92, 89, 88, 87, 85, 85, 84, 84, 83, 83, 81, 80, 77, 76, 72, 71, 70, 69, 67, 66, 66, 63, 63, 62, 62, 61, 59, 59, 58, 55, 55, 54, 53, 53, 52, 51, 50, 48, 47, 46, 44, 43, 43, 42, 42, 42, 40, 39, 38, 36, 36, 35, 33, 33, 33, 32, 31, 28, 26, 25, 23, 20, 20, 20, 14, 13, 12, 11, 11, 10, 9, 9, 8, 7, 6, 5, 3, 3, 2]) == 3035\nassert solution.minimumCost([98, 97, 95, 94, 93, 93, 93, 88, 88, 87, 86, 86, 86, 86, 85, 84, 82, 82, 81, 81, 80, 78, 74, 71, 71, 71, 70, 69, 68, 66, 66, 63, 63, 62, 58, 56, 54, 53, 52, 49, 48, 48, 48, 47, 46, 45, 45, 45, 45, 43, 43, 43, 43, 42, 41, 40, 40, 40, 39, 39, 38, 38, 36, 35, 34, 31, 31, 29, 27, 26, 26, 26, 26, 25, 25, 24, 24, 22, 22, 21, 20, 19, 18, 17, 14, 13, 11, 8, 7, 6, 6, 6, 4, 1, 1, 1]) == 3131\nassert solution.minimumCost([100, 100, 98, 96, 94, 93, 91, 90, 90, 90, 89, 89, 89, 88, 88, 87, 84, 80, 76, 76, 71, 71, 69, 69, 67, 66, 66, 64, 64, 64, 63, 62, 61, 60, 59, 58, 58, 58, 58, 57, 56, 55, 55, 51, 49, 48, 48, 47, 45, 43, 41, 40, 37, 35, 34, 30, 29, 29, 26, 23, 23, 22, 19, 18, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 4, 3, 1, 1]) == 2785\nassert solution.minimumCost([100, 97, 93, 93, 93, 91, 91, 91, 89, 85, 84, 82, 82, 82, 81, 77, 77, 76, 74, 73, 70, 70, 69, 69, 68, 68, 67, 67, 64, 64, 61, 58, 56, 55, 54, 54, 53, 50, 49, 47, 46, 44, 44, 43, 43, 43, 42, 40, 40, 40, 39, 39, 39, 38, 37, 37, 36, 36, 34, 34, 34, 32, 32, 31, 31, 30, 28, 27, 26, 25, 23, 22, 22, 20, 20, 19, 16, 13, 12, 12, 12, 11, 11, 9, 8, 7, 7, 7, 6, 5, 5, 5, 4, 2, 1]) == 2898\nassert solution.minimumCost([100, 97, 97, 97, 94, 93, 90, 89, 89, 89, 88, 86, 84, 83, 82, 80, 79, 78, 75, 75, 74, 74, 71, 67, 64, 61, 61, 60, 59, 56, 53, 47, 44, 44, 44, 43, 42, 40, 39, 38, 33, 30, 28, 26, 24, 19, 18, 17, 15, 10, 10, 10, 9, 9, 6, 4, 2, 2]) == 2097\nassert solution.minimumCost([100, 99, 98, 96, 90, 89, 88, 87, 86, 85, 85, 84, 82, 81, 76, 75, 73, 72, 72, 72, 72, 71, 61, 58, 51, 49, 47, 45, 44, 43, 41, 36, 32, 31, 30, 29, 26, 25, 21, 20, 18, 17, 13, 12, 10, 9, 7, 6, 4]) == 1778\nassert solution.minimumCost([92, 84, 76, 58, 52, 51, 49, 42, 41, 28, 24, 24, 20, 18, 14, 10, 2]) == 479\nassert solution.minimumCost([97, 92, 90, 85, 85, 82, 77, 75, 75, 72, 70, 66, 65, 64, 61, 60, 58, 58, 57, 57, 56, 53, 53, 49, 46, 43, 41, 39, 38, 36, 35, 35, 32, 29, 29, 28, 28, 27, 25, 25, 24, 22, 22, 21, 20, 18, 18, 18, 17, 17, 16, 15, 14, 11, 10, 7, 6]) == 1677\nassert solution.minimumCost([99, 94, 92, 91, 91, 91, 90, 88, 88, 86, 86, 84, 83, 81, 81, 81, 77, 76, 74, 73, 71, 68, 67, 67, 67, 66, 65, 63, 63, 62, 62, 61, 60, 59, 59, 59, 58, 57, 57, 56, 55, 53, 50, 49, 48, 48, 48, 47, 45, 45, 44, 44, 43, 41, 40, 38, 36, 36, 36, 35, 35, 34, 32, 32, 32, 32, 30, 28, 27, 24, 22, 20, 20, 17, 17, 16, 15, 13, 12, 11, 9, 9, 5, 4, 3, 2, 2, 1]) == 2925\nassert solution.minimumCost([98, 97, 94, 93, 89, 89, 88, 87, 86, 85, 84, 83, 83, 82, 82, 82, 80, 78, 78, 77, 74, 72, 72, 71, 70, 70, 70, 69, 69, 65, 64, 63, 60, 58, 57, 56, 56, 55, 53, 49, 46, 46, 44, 39, 36, 35, 33, 30, 25, 22, 22, 22, 20, 18, 16, 9, 9, 8, 8]) == 2354\nassert solution.minimumCost([100, 100, 99, 97, 93, 92, 91, 88, 87, 83, 81, 78, 77, 77, 77, 75, 73, 71, 67, 67, 66, 63, 63, 63, 63, 63, 59, 59, 58, 56, 52, 51, 51, 49, 47, 47, 47, 46, 46, 42, 42, 41, 38, 36, 34, 34, 33, 32, 32, 30, 28, 27, 25, 24, 21, 18, 16, 16, 14, 14, 12, 11, 11, 8, 8, 7, 7, 6, 6, 1]) == 2291\nassert solution.minimumCost([100, 99, 99, 97, 94, 92, 91, 91, 90, 90, 87, 85, 85, 84, 82, 81, 80, 79, 78, 77, 76, 76, 75, 74, 74, 72, 72, 71, 71, 70, 69, 69, 68, 64, 63, 62, 61, 60, 59, 56, 53, 50, 49, 49, 47, 47, 45, 45, 44, 43, 40, 38, 38, 36, 35, 35, 35, 34, 33, 33, 33, 32, 30, 28, 28, 23, 23, 23, 22, 20, 20, 18, 16, 16, 16, 16, 14, 14, 12, 12, 10, 10, 7, 6, 4, 3, 3, 2]) == 2977\nassert solution.minimumCost([100, 98, 95, 95, 95, 93, 92, 90, 90, 89, 88, 88, 86, 86, 84, 83, 82, 80, 78, 78, 78, 76, 76, 76, 73, 73, 70, 70, 69, 67, 67, 66, 65, 65, 62, 61, 60, 59, 58, 57, 54, 54, 52, 52, 49, 47, 43, 43, 43, 40, 36, 34, 33, 33, 32, 32, 32, 31, 28, 27, 26, 24, 24, 23, 21, 21, 18, 17, 15, 15, 14, 14, 13, 11, 10, 9, 8, 8, 7, 7, 6, 5, 3, 2, 2, 1]) == 2858\nassert solution.minimumCost([99, 98, 98, 97, 97, 96, 92, 91, 90, 89, 89, 89, 89, 87, 86, 85, 83, 83, 81, 78, 78, 77, 71, 71, 71, 70, 68, 67, 67, 66, 62, 61, 60, 60, 60, 59, 59, 58, 58, 58, 57, 55, 55, 55, 54, 52, 52, 51, 51, 47, 45, 45, 44, 44, 44, 43, 43, 42, 42, 41, 39, 39, 38, 36, 36, 36, 33, 33, 32, 32, 31, 30, 30, 28, 27, 26, 23, 22, 21, 20, 19, 17, 16, 16, 15, 14, 13, 12, 12, 11, 11, 7, 5, 5, 4, 3, 3, 3]) == 3271\nassert solution.minimumCost([99, 99, 92, 90, 89, 83, 82, 81, 80, 80, 79, 77, 76, 75, 73, 73, 64, 63, 60, 60, 57, 57, 56, 56, 55, 54, 53, 50, 47, 46, 44, 43, 39, 38, 37, 36, 35, 34, 31, 31, 30, 29, 29, 27, 26, 24, 22, 21, 19, 15, 15, 13, 13, 12, 11, 11, 11, 11, 10, 10, 9, 8, 6, 5, 4, 2, 1, 1]) == 1951\nassert solution.minimumCost([100, 99, 98, 96, 94, 92, 89, 88, 87, 86, 78, 73, 73, 72, 72, 68, 68, 66, 63, 62, 61, 60, 59, 58, 54, 53, 50, 46, 43, 41, 40, 38, 35, 34, 32, 31, 30, 29, 27, 25, 25, 22, 22, 22, 20, 16, 14, 13, 11, 10, 10, 10, 7, 4, 2, 2, 2]) == 1820\nassert solution.minimumCost([97, 93, 92, 90, 89, 86, 86, 85, 84, 81, 81, 78, 74, 72, 71, 71, 70, 69, 64, 63, 61, 60, 56, 55, 52, 50, 50, 46, 44, 43, 42, 39, 37, 33, 30, 13, 13, 10, 10, 4, 3, 1]) == 1598\nassert solution.minimumCost([93, 89, 74, 71, 69, 67, 64, 60, 56, 54, 53, 50, 49, 46, 45, 43, 37, 29, 18, 18, 16, 7]) == 771\nassert solution.minimumCost([99, 99, 83, 64, 33, 29, 21, 16, 4, 3]) == 335\nassert solution.minimumCost([99, 98, 98, 97, 96, 95, 90, 88, 86, 85, 82, 82, 81, 79, 78, 76, 75, 75, 73, 70, 68, 66, 64, 60, 58, 56, 56, 55, 55, 54, 46, 44, 43, 42, 41, 41, 40, 39, 39, 34, 34, 32, 31, 30, 30, 27, 25, 21, 21, 19, 19, 11, 7, 3, 3]) == 2037\nassert solution.minimumCost([90, 85, 77, 76, 71, 68, 61, 57, 57, 44, 39, 38, 37, 35, 26, 13, 11, 10, 8, 8]) == 635\nassert solution.minimumCost([98, 97, 95, 93, 91, 89, 89, 88, 86, 85, 83, 81, 80, 79, 79, 76, 74, 74, 74, 74, 73, 72, 69, 69, 66, 65, 64, 62, 62, 58, 58, 58, 56, 56, 53, 52, 52, 52, 51, 49, 47, 46, 46, 45, 45, 44, 41, 36, 33, 32, 29, 25, 25, 21, 18, 17, 13, 10, 10, 9, 8, 5, 4, 4, 4]) == 2369\nassert solution.minimumCost([95, 85, 83, 81, 79, 76, 72, 61, 61, 58, 54, 53, 47, 42, 40, 36, 36, 31, 24, 19]) == 789\nassert solution.minimumCost([96, 95, 94, 91, 90, 84, 82, 70, 70, 66, 65, 64, 63, 62, 58, 58, 55, 55, 54, 46, 46, 44, 41, 40, 37, 36, 35, 35, 34, 33, 26, 23, 22, 19, 15, 6, 4, 3]) == 1310\nassert solution.minimumCost([100, 100, 97, 97, 97, 96, 95, 94, 93, 93, 93, 92, 92, 91, 90, 90, 89, 87, 87, 87, 86, 86, 86, 82, 82, 82, 81, 81, 80, 80, 76, 74, 74, 73, 72, 71, 68, 68, 67, 66, 65, 65, 64, 62, 60, 56, 56, 55, 54, 53, 52, 51, 51, 51, 50, 49, 49, 45, 43, 40, 40, 38, 36, 34, 32, 32, 31, 30, 27, 26, 26, 25, 25, 24, 21, 21, 20, 19, 19, 17, 17, 16, 15, 14, 14, 9, 9, 7, 7, 7, 6, 5, 4, 1]) == 3461\nassert solution.minimumCost([55, 22]) == 77\nassert solution.minimumCost([100, 98, 95, 95, 94, 91, 89, 77, 75, 71, 70, 70, 69, 66, 64, 64, 62, 62, 62, 59, 57, 57, 57, 55, 55, 48, 45, 45, 43, 38, 35, 34, 29, 27, 25, 19, 19, 17, 16, 5]) == 1543\nassert solution.minimumCost([96, 96, 94, 90, 89, 83, 76, 72, 69, 68, 64, 59, 57, 57, 55, 53, 52, 46, 35, 33, 29, 28, 25, 23, 23, 19, 15, 14, 13, 13, 12, 8, 6, 5]) == 1085\nassert solution.minimumCost([100, 100, 99, 98, 97, 97, 97, 95, 93, 88, 88, 87, 86, 86, 85, 83, 83, 83, 82, 82, 82, 82, 82, 80, 79, 77, 75, 72, 72, 67, 64, 63, 63, 60, 60, 59, 58, 57, 55, 55, 54, 51, 46, 45, 44, 42, 42, 42, 40, 39, 39, 35, 35, 33, 30, 30, 29, 24, 23, 21, 17, 15, 14, 12, 11, 10, 8, 8, 7, 5, 5, 4, 2]) == 2714\nassert solution.minimumCost([100, 100, 99, 94, 93, 91, 86, 85, 83, 82, 79, 79, 78, 77, 77, 77, 74, 73, 72, 72, 72, 71, 70, 70, 70, 69, 66, 65, 65, 63, 61, 60, 56, 54, 54, 52, 52, 52, 49, 45, 44, 44, 41, 39, 38, 36, 36, 35, 30, 29, 28, 27, 26, 25, 24, 23, 23, 23, 19, 19, 19, 18, 17, 15, 13, 7, 6, 5, 3, 3]) == 2433\nassert solution.minimumCost([100, 100, 99, 99, 98, 98, 97, 95, 92, 89, 89, 88, 87, 87, 84, 84, 83, 81, 81, 79, 77, 77, 76, 76, 74, 72, 72, 72, 72, 71, 70, 68, 68, 67, 66, 65, 63, 62, 62, 61, 57, 56, 56, 55, 54, 53, 53, 52, 52, 52, 51, 50, 48, 47, 45, 45, 45, 44, 43, 42, 39, 38, 36, 36, 35, 35, 34, 34, 34, 32, 32, 32, 32, 31, 30, 29, 29, 29, 26, 25, 24, 23, 21, 21, 20, 19, 16, 13, 12, 12, 11, 11, 9, 8, 6, 4, 4, 2, 2, 1]) == 3424\nassert solution.minimumCost([100, 100, 100, 96, 96, 96, 95, 95, 94, 93, 93, 93, 88, 88, 85, 84, 83, 83, 82, 79, 78, 76, 76, 75, 75, 75, 75, 74, 74, 74, 72, 72, 71, 71, 71, 69, 66, 65, 64, 63, 63, 62, 62, 60, 59, 58, 58, 57, 55, 55, 54, 53, 52, 51, 51, 50, 49, 47, 47, 47, 46, 46, 46, 45, 44, 42, 38, 36, 36, 35, 34, 34, 32, 31, 30, 30, 28, 27, 27, 26, 24, 19, 19, 18, 15, 15, 15, 15, 14, 12, 11, 10, 9, 7, 5, 5, 4, 4, 2, 1]) == 3550\nassert solution.minimumCost([96, 94, 93, 89, 85, 84, 82, 78, 68, 61, 61, 57, 57, 56, 47, 46, 44, 32, 28, 27, 25, 25, 21, 13, 8, 3, 2, 2]) == 963\nassert solution.minimumCost([99, 99, 96, 94, 94, 91, 90, 89, 88, 87, 86, 83, 82, 77, 75, 74, 69, 69, 68, 67, 63, 62, 62, 58, 48, 48, 45, 44, 40, 39, 35, 33, 29, 28, 28, 26, 24, 17, 17, 16, 15, 14, 10, 7, 5, 4, 1]) == 1697\nassert solution.minimumCost([99, 94, 94, 90, 88, 88, 85, 84, 83, 75, 63, 61, 61, 58, 56, 52, 48, 41, 33, 27, 22, 15, 9, 7, 6, 6, 2, 2]) == 995\nassert solution.minimumCost([100, 98, 98, 94, 91, 81, 81, 81, 78, 77, 72, 64, 63, 63, 59, 58, 58, 55, 54, 53, 51, 47, 46, 46, 45, 45, 45, 42, 39, 38, 37, 36, 35, 31, 28, 27, 26, 22, 20, 20, 18, 17, 16, 16, 15, 3, 2]) == 1562\nassert solution.minimumCost([100, 97, 96, 91, 90, 90, 90, 89, 89, 88, 87, 84, 82, 80, 80, 79, 75, 74, 71, 68, 67, 65, 65, 62, 62, 61, 60, 58, 55, 52, 51, 51, 50, 50, 50, 49, 48, 48, 47, 42, 41, 41, 39, 37, 33, 33, 33, 31, 30, 25, 23, 14, 13, 12, 10, 10, 9, 5, 5, 1]) == 2188\nassert solution.minimumCost([98, 77, 76, 75, 63, 59, 59, 57, 48, 43, 42, 41, 37, 36, 35, 31, 28, 23, 22, 21, 17, 14, 13, 10, 3, 2]) == 721\nassert solution.minimumCost([99, 99, 97, 96, 94, 93, 91, 89, 88, 88, 85, 83, 82, 82, 81, 76, 72, 71, 69, 64, 63, 63, 63, 63, 60, 60, 59, 58, 58, 57, 56, 53, 52, 51, 48, 48, 47, 47, 47, 43, 41, 39, 39, 34, 31, 30, 26, 26, 25, 25, 25, 24, 22, 21, 21, 21, 18, 18, 16, 14, 14, 11, 10, 9, 7, 6, 6, 5, 3]) == 2287\nassert solution.minimumCost([99, 97, 97, 97, 97, 94, 94, 94, 94, 93, 91, 90, 88, 86, 86, 85, 84, 83, 82, 82, 81, 80, 77, 77, 74, 72, 71, 71, 70, 57, 56, 55, 54, 54, 53, 51, 51, 51, 50, 47, 47, 46, 42, 42, 40, 39, 37, 31, 26, 25, 25, 24, 23, 23, 23, 22, 21, 21, 20, 19, 18, 18, 17, 17, 13, 12, 11, 9, 9, 9, 7, 6, 4, 3, 3, 2]) == 2582\nassert solution.minimumCost([100, 98, 95, 95, 94, 94, 93, 93, 92, 91, 91, 90, 90, 90, 89, 79, 78, 77, 76, 71, 70, 69, 65, 61, 57, 56, 55, 55, 50, 49, 44, 43, 42, 41, 37, 34, 32, 30, 28, 27, 24, 24, 23, 19, 19, 18, 16, 15, 14, 9, 9, 2, 1, 1]) == 1971\nassert solution.minimumCost([100, 99, 96, 95, 95, 95, 94, 91, 89, 88, 86, 86, 84, 84, 81, 78, 78, 76, 73, 71, 71, 70, 70, 69, 65, 64, 63, 56, 52, 51, 51, 51, 49, 44, 42, 40, 39, 35, 35, 34, 32, 32, 32, 31, 31, 29, 24, 23, 22, 21, 20, 17, 16, 16, 15, 14, 13, 13, 11, 10, 10, 10, 9, 8, 7, 6, 5, 5, 5, 4, 2, 1]) == 2217\nassert solution.minimumCost([100, 100, 99, 98, 97, 97, 94, 94, 93, 91, 89, 87, 86, 82, 82, 81, 80, 80, 80, 78, 73, 69, 69, 68, 68, 66, 66, 65, 64, 63, 61, 61, 60, 59, 58, 58, 58, 56, 56, 56, 53, 53, 51, 51, 49, 49, 47, 47, 44, 43, 42, 41, 40, 39, 38, 38, 36, 35, 34, 34, 33, 29, 28, 26, 25, 25, 25, 25, 24, 24, 22, 22, 21, 20, 20, 19, 18, 13, 11, 9, 6, 6, 5, 4, 4, 3]) == 2949\nassert solution.minimumCost([99, 99, 99, 94, 93, 92, 91, 88, 87, 87, 87, 86, 85, 84, 80, 79, 79, 78, 78, 76, 75, 73, 73, 71, 67, 66, 66, 65, 63, 58, 58, 54, 52, 51, 51, 50, 49, 47, 47, 46, 41, 41, 41, 39, 39, 38, 32, 32, 28, 27, 25, 24, 22, 21, 21, 19, 19, 18, 18, 17, 16, 16, 15, 15, 13, 12, 10, 10, 8, 6, 5, 4, 4, 1]) == 2446\nassert solution.minimumCost([100, 99, 98, 98, 93, 93, 91, 90, 87, 87, 84, 83, 83, 82, 82, 81, 81, 80, 78, 76, 75, 74, 72, 71, 70, 70, 69, 68, 68, 68, 67, 66, 66, 64, 63, 61, 60, 60, 59, 59, 54, 52, 52, 51, 51, 48, 48, 45, 45, 44, 44, 44, 43, 43, 43, 42, 40, 39, 38, 36, 36, 35, 35, 34, 33, 31, 31, 30, 29, 27, 26, 26, 24, 23, 23, 21, 21, 20, 19, 18, 17, 16, 9, 9, 7, 6, 6, 5, 4, 3, 2, 1]) == 3103\nassert solution.minimumCost([94, 91, 91, 91, 88, 79, 79, 78, 74, 62, 60, 56, 56, 53, 51, 50, 50, 43, 40, 35, 34, 32, 28, 28, 18, 17, 16, 16, 14, 13, 13, 12, 10, 7, 3, 3, 2]) == 1089\nassert solution.minimumCost([100, 98, 98, 95, 94, 91, 89, 88, 87, 84, 84, 83, 81, 75, 74, 73, 73, 73, 72, 72, 70, 70, 69, 68, 67, 63, 60, 59, 59, 56, 55, 53, 53, 52, 52, 50, 49, 49, 49, 48, 44, 44, 40, 39, 37, 37, 37, 37, 35, 35, 35, 34, 34, 29, 27, 24, 23, 23, 20, 20, 20, 18, 17, 16, 16, 15, 15, 15, 14, 13, 10, 9, 6, 5, 2, 2, 1]) == 2489\nassert solution.minimumCost([99, 99, 98, 96, 95, 95, 91, 90, 90, 90, 88, 87, 86, 85, 84, 84, 83, 82, 80, 79, 79, 77, 77, 76, 75, 71, 71, 71, 71, 69, 69, 69, 68, 67, 67, 67, 66, 65, 63, 61, 60, 60, 60, 59, 58, 58, 57, 56, 56, 55, 54, 54, 51, 48, 47, 47, 44, 44, 44, 43, 43, 43, 42, 41, 41, 41, 40, 39, 37, 37, 37, 37, 34, 33, 33, 32, 32, 30, 28, 26, 26, 25, 24, 24, 24, 24, 22, 19, 18, 17, 8, 7, 7, 4, 4, 3, 2, 2]) == 3510\nassert solution.minimumCost([100, 98, 95, 94, 93, 93, 92, 91, 91, 89, 87, 85, 81, 80, 79, 77, 77, 76, 76, 76, 74, 72, 71, 70, 70, 69, 69, 68, 64, 64, 62, 62, 61, 61, 61, 61, 61, 60, 58, 56, 55, 54, 54, 53, 53, 53, 49, 49, 48, 46, 45, 43, 42, 36, 34, 34, 34, 29, 28, 27, 26, 26, 25, 22, 22, 21, 21, 19, 19, 19, 19, 18, 18, 18, 16, 15, 14, 14, 12, 12, 11, 8, 8, 7, 7, 6, 5, 3, 1, 1]) == 2912\nassert solution.minimumCost([100, 99, 98, 98, 97, 95, 94, 93, 92, 92, 91, 91, 91, 90, 89, 87, 87, 85, 85, 84, 84, 80, 75, 74, 73, 72, 71, 70, 69, 65, 65, 62, 62, 61, 61, 59, 58, 56, 55, 51, 51, 51, 51, 49, 49, 48, 46, 46, 44, 43, 43, 42, 42, 39, 38, 38, 37, 36, 36, 35, 31, 29, 28, 26, 25, 25, 20, 20, 19, 18, 18, 18, 16, 15, 13, 13, 12, 12, 11, 11, 9, 9, 7, 1]) == 2986\nassert solution.minimumCost([100, 99, 98, 95, 94, 94, 93, 91, 88, 87, 87, 86, 84, 82, 81, 79, 78, 76, 75, 75, 75, 71, 71, 70, 70, 69, 67, 66, 65, 64, 55, 54, 53, 49, 49, 49, 47, 45, 42, 39, 39, 37, 36, 36, 35, 33, 29, 28, 27, 27, 22, 21, 21, 18, 18, 17, 16, 14, 12, 10, 10, 10, 9, 8, 7, 7, 6, 5, 4, 3, 3]) == 2351\nassert solution.minimumCost([100, 92, 91, 79, 75, 74, 67, 66, 63, 61, 61, 60, 58, 58, 56, 53, 50, 50, 45, 43, 37, 35, 33, 32, 32, 28, 27, 20, 17, 16, 12, 12, 12, 8, 8, 5, 4, 4, 3]) == 1121\nassert solution.minimumCost([100, 99, 97, 97, 95, 95, 93, 92, 91, 85, 83, 82, 79, 77, 76, 75, 75, 74, 70, 69, 69, 67, 66, 64, 64, 62, 61, 60, 55, 55, 54, 54, 52, 51, 49, 49, 47, 45, 44, 41, 40, 39, 35, 34, 33, 33, 32, 32, 31, 31, 28, 27, 26, 26, 22, 22, 19, 18, 16, 12, 11, 10, 10, 6, 4, 3, 3, 1]) == 2306\nassert solution.minimumCost([99, 98, 97, 97, 95, 95, 95, 94, 94, 91, 90, 89, 89, 88, 88, 84, 84, 82, 81, 80, 78, 76, 76, 75, 75, 74, 74, 74, 74, 73, 71, 69, 69, 68, 68, 67, 67, 67, 66, 66, 64, 63, 57, 56, 55, 55, 55, 53, 53, 49, 49, 48, 47, 46, 45, 45, 42, 41, 41, 40, 38, 37, 37, 34, 34, 33, 27, 27, 26, 26, 24, 24, 22, 21, 17, 15, 13, 12, 11, 9, 9, 6, 6, 2, 2, 2]) == 3200\nassert solution.minimumCost([100, 99, 98, 97, 96, 96, 95, 94, 94, 88, 88, 87, 86, 85, 82, 81, 79, 78, 78, 77, 74, 68, 65, 59, 56, 53, 51, 49, 47, 46, 44, 40, 39, 35, 34, 33, 32, 29, 27, 25, 17, 17, 17, 16, 14, 12, 11, 10, 5, 4, 3, 2]) == 1904\nassert solution.minimumCost([100, 100, 98, 95, 94, 91, 91, 88, 86, 82, 81, 81, 80, 77, 76, 75, 75, 71, 69, 69, 68, 65, 63, 63, 62, 62, 61, 61, 60, 59, 58, 57, 55, 55, 54, 54, 52, 52, 52, 50, 45, 45, 44, 44, 43, 43, 43, 39, 35, 35, 33, 32, 31, 30, 29, 28, 27, 25, 25, 24, 21, 20, 20, 17, 15, 10, 9, 8, 7, 6, 4, 4, 2, 1]) == 2489\nassert solution.minimumCost([42, 32, 28]) == 74\nassert solution.minimumCost([96, 93, 92, 91, 91, 91, 90, 87, 87, 83, 82, 82, 81, 80, 72, 70, 70, 69, 68, 67, 59, 55, 55, 54, 54, 52, 48, 47, 41, 32, 30, 28, 27, 27, 26, 22, 21, 18, 15, 6, 6, 1]) == 1615\nassert solution.minimumCost([100, 100, 98, 98, 96, 95, 94, 94, 92, 91, 89, 89, 88, 87, 86, 84, 84, 82, 81, 79, 79, 78, 76, 75, 74, 72, 71, 71, 71, 69, 68, 68, 66, 65, 64, 64, 64, 63, 63, 62, 62, 61, 61, 60, 57, 56, 54, 53, 49, 47, 47, 46, 45, 44, 42, 41, 41, 37, 36, 31, 28, 28, 27, 25, 23, 23, 22, 21, 21, 21, 19, 18, 16, 14, 11, 11, 9, 7, 6, 4, 4, 4, 3, 3, 2, 1]) == 3054\nassert solution.minimumCost([97, 97, 95, 94, 94, 94, 94, 93, 93, 93, 92, 92, 92, 91, 90, 90, 89, 88, 87, 87, 87, 86, 86, 84, 83, 79, 77, 75, 71, 71, 70, 68, 68, 67, 67, 66, 55, 55, 54, 54, 54, 53, 52, 50, 49, 49, 49, 49, 48, 46, 46, 46, 45, 45, 45, 44, 41, 41, 41, 40, 40, 38, 38, 34, 34, 34, 33, 30, 26, 26, 24, 21, 19, 18, 16, 14, 14, 13, 11, 8, 7, 7, 6, 2, 1]) == 3173\nassert solution.minimumCost([98, 98, 89, 88, 87, 87, 85, 83, 82, 82, 82, 77, 74, 72, 71, 67, 67, 67, 66, 66, 64, 64, 63, 63, 58, 55, 52, 51, 51, 51, 46, 44, 44, 43, 42, 40, 39, 36, 32, 30, 29, 23, 22, 21, 21, 19, 17, 15, 15, 15, 13, 12, 11, 8, 7, 3, 1, 1, 1]) == 1910\nassert solution.minimumCost([100, 94, 93, 92, 89, 85, 80, 79, 69, 68, 61, 60, 60, 56, 55, 54, 52, 40, 34, 26, 22, 21, 16, 6, 4, 3, 2, 2, 2]) == 993\nassert solution.minimumCost([93, 67, 55, 55, 46, 43, 42, 41, 34, 31, 30, 28, 26, 20, 14, 7, 5, 4, 2, 2]) == 467\nassert solution.minimumCost([100, 100, 97, 97, 96, 96, 96, 96, 95, 94, 93, 89, 89, 85, 82, 81, 80, 78, 77, 73, 72, 71, 70, 66, 66, 66, 65, 62, 61, 61, 61, 60, 56, 53, 52, 51, 50, 50, 47, 47, 46, 46, 43, 41, 36, 35, 33, 31, 31, 30, 27, 25, 24, 24, 24, 23, 23, 22, 19, 18, 15, 14, 14, 12, 10, 10, 9, 7, 5, 5, 4, 3, 3, 3]) == 2504\nassert solution.minimumCost([96, 96, 95, 92, 90, 90, 88, 87, 87, 86, 85, 84, 83, 82, 81, 78, 77, 76, 76, 71, 71, 70, 66, 66, 66, 63, 61, 58, 56, 54, 54, 53, 50, 50, 49, 46, 45, 45, 42, 39, 38, 37, 36, 30, 27, 25, 22, 21, 20, 19, 16, 14, 13, 13, 7, 7, 6, 5, 3, 3, 3, 2]) == 2145\nassert solution.minimumCost([29, 18, 1]) == 47\nassert solution.minimumCost([100, 98, 96, 94, 94, 93, 93, 91, 91, 90, 88, 87, 87, 86, 84, 82, 81, 80, 79, 78, 75, 71, 71, 70, 70, 70, 69, 68, 68, 67, 67, 67, 66, 64, 63, 61, 59, 58, 57, 56, 54, 53, 52, 50, 50, 49, 48, 48, 45, 45, 45, 44, 43, 41, 41, 39, 39, 38, 38, 36, 35, 34, 34, 33, 32, 30, 28, 28, 26, 25, 25, 25, 25, 24, 24, 23, 21, 20, 19, 19, 19, 17, 17, 13, 10, 9, 9, 9, 8, 7, 7, 6, 4, 4, 3, 3, 3, 3]) == 3146\nassert solution.minimumCost([99, 98, 78, 74, 69, 69, 66, 56, 56, 52, 46, 42, 39, 34, 31, 28, 20, 9, 7, 5, 2]) == 693\nassert solution.minimumCost([100, 100, 100, 99, 97, 97, 96, 96, 96, 96, 93, 92, 90, 90, 89, 87, 87, 87, 86, 83, 82, 80, 80, 78, 73, 73, 73, 73, 68, 67, 66, 66, 63, 63, 62, 59, 56, 52, 50, 50, 48, 48, 47, 46, 40, 38, 38, 37, 35, 33, 31, 30, 26, 26, 25, 25, 24, 23, 22, 21, 20, 20, 20, 16, 16, 16, 16, 15, 14, 14, 11, 11, 8, 8, 7, 6, 5, 3, 1, 1]) == 2755\nassert solution.minimumCost([89, 83, 82, 74, 61, 60, 58, 55, 50, 49, 48, 30, 27, 9]) == 553\nassert solution.minimumCost([96, 96, 85, 80, 77, 64, 57, 49, 43, 37, 31, 30, 19, 8, 2]) == 550\nassert solution.minimumCost([97, 89, 86, 84, 76, 73, 65, 53, 52, 50, 33, 27]) == 547\nassert solution.minimumCost([99, 97, 95, 94, 92, 92, 90, 88, 86, 85, 85, 84, 84, 83, 78, 77, 76, 75, 74, 70, 68, 68, 68, 65, 60, 56, 56, 55, 55, 54, 53, 53, 53, 52, 52, 51, 50, 50, 48, 44, 43, 40, 38, 35, 34, 32, 31, 29, 28, 27, 27, 25, 24, 24, 23, 21, 18, 16, 14, 12, 10, 7, 7, 4, 4, 3, 1, 1]) == 2294\nassert solution.minimumCost([100, 96, 95, 92, 86, 78, 75, 72, 72, 71, 68, 68, 67, 59, 52, 48, 43, 42, 38, 34, 33, 31, 30, 29, 28, 28, 27, 23, 22, 22, 19, 16, 11, 10, 3, 3, 2, 1]) == 1162\nassert solution.minimumCost([80, 75, 67, 67, 63, 60, 55, 50, 40, 33, 4, 3]) == 427\nassert solution.minimumCost([100, 93, 88, 85, 73, 72, 69, 68, 66, 56, 56, 49, 39, 38, 26, 26, 23, 19, 14, 13, 11, 7, 4]) == 764\nassert solution.minimumCost([99, 95, 95, 95, 94, 91, 91, 91, 91, 90, 87, 87, 86, 83, 83, 81, 80, 80, 79, 79, 78, 77, 75, 74, 72, 71, 69, 66, 66, 64, 64, 60, 57, 57, 53, 50, 49, 49, 47, 46, 45, 44, 44, 43, 42, 41, 41, 41, 40, 38, 37, 35, 35, 35, 34, 29, 26, 26, 26, 23, 23, 22, 20, 19, 19, 17, 16, 15, 14, 13, 12, 11, 11, 9, 8, 8, 7, 6, 6, 6, 4, 2, 2, 2, 1, 1]) == 2704\nassert solution.minimumCost([95, 94, 94, 93, 91, 90, 87, 82, 80, 76, 75, 73, 73, 72, 72, 69, 69, 67, 66, 62, 56, 55, 55, 51, 47, 45, 45, 43, 42, 42, 41, 41, 34, 32, 31, 30, 24, 20, 19, 17, 16, 16, 14, 13, 12, 12, 12, 9, 9, 7, 4, 4, 1]) == 1685\nassert solution.minimumCost([100, 98, 98, 98, 93, 93, 92, 91, 90, 87, 86, 86, 86, 82, 82, 80, 79, 76, 76, 66, 61, 61, 59, 59, 58, 55, 54, 52, 52, 51, 51, 50, 48, 46, 46, 42, 41, 34, 33, 30, 29, 25, 22, 20, 19, 19, 16, 15, 15, 14, 12, 10, 7, 4, 3, 3]) == 2007\nassert solution.minimumCost([99, 95, 94, 87, 84, 81, 78, 73, 72, 66, 66, 61, 61, 57, 50, 49, 47, 43, 40, 39, 38, 37, 37, 31, 26, 23, 17, 11, 11, 9, 1]) == 1087\nassert solution.minimumCost([100, 97, 94, 94, 94, 93, 91, 91, 85, 85, 83, 81, 81, 80, 79, 78, 77, 76, 74, 74, 69, 68, 67, 65, 62, 62, 61, 60, 59, 59, 56, 55, 40, 36, 35, 34, 32, 31, 28, 27, 26, 25, 24, 23, 23, 21, 21, 19, 19, 16, 11, 6, 5, 4, 3, 3]) == 2016\nassert solution.minimumCost([100, 98, 93, 92, 92, 91, 90, 88, 87, 87, 87, 87, 86, 84, 84, 84, 81, 81, 79, 78, 78, 78, 77, 76, 75, 75, 74, 73, 71, 70, 67, 63, 63, 63, 62, 60, 60, 59, 58, 57, 53, 52, 49, 45, 45, 44, 41, 40, 39, 39, 38, 37, 33, 30, 29, 29, 28, 28, 27, 27, 23, 23, 23, 22, 21, 20, 19, 19, 19, 18, 17, 17, 16, 16, 16, 13, 13, 13, 12, 12, 12, 4, 2]) == 2849\nassert solution.minimumCost([97, 93, 92, 89, 76, 72, 72, 72, 71, 67, 63, 60, 56, 47, 44, 44, 34, 29, 28, 27, 24, 20, 16, 15, 12, 6, 2, 1]) == 920\nassert solution.minimumCost([98, 94, 92, 91, 89, 89, 86, 84, 84, 83, 79, 77, 74, 74, 71, 71, 69, 69, 68, 66, 63, 62, 60, 59, 59, 44, 38, 33, 30, 30, 26, 26, 24, 19, 14, 13, 9, 8, 3, 3, 3, 2, 2, 1, 1]) == 1525\nassert solution.minimumCost([96, 94, 93, 87, 84, 82, 73, 61, 61, 61, 60, 57, 54, 51, 50, 48, 43, 43, 37, 36, 35, 34, 32, 29, 27, 23, 6, 6]) == 1007\nassert solution.minimumCost([99, 99, 92, 91, 89, 89, 79, 78, 74, 73, 70, 68, 68, 67, 63, 63, 61, 60, 60, 59, 57, 57, 55, 54, 53, 51, 47, 44, 42, 41, 39, 37, 37, 37, 36, 36, 35, 34, 34, 30, 27, 24, 21, 18, 17, 16, 15, 14, 14, 13, 11, 11, 10, 6, 4, 3, 3, 2]) == 1760\nassert solution.minimumCost([100, 100, 99, 96, 96, 92, 90, 90, 89, 88, 81, 80, 80, 77, 75, 73, 71, 71, 70, 68, 68, 68, 67, 62, 61, 56, 54, 53, 52, 49, 48, 48, 47, 44, 41, 41, 39, 38, 34, 33, 33, 31, 29, 29, 29, 27, 27, 26, 26, 24, 24, 23, 23, 19, 16, 16, 15, 15, 15, 14, 12, 9, 8, 7, 6, 6, 1, 1]) == 2167\nassert solution.minimumCost([99, 97, 97, 95, 94, 93, 93, 93, 91, 83, 82, 81, 81, 80, 80, 76, 76, 72, 71, 71, 70, 69, 69, 69, 68, 65, 64, 63, 61, 61, 61, 59, 58, 58, 58, 57, 50, 47, 47, 46, 44, 44, 43, 41, 41, 41, 41, 39, 38, 38, 38, 36, 36, 33, 32, 32, 31, 30, 25, 23, 22, 18, 16, 15, 14, 14, 11, 9, 8, 4, 3, 2]) == 2538\nassert solution.minimumCost([99, 97, 97, 95, 90, 88, 87, 85, 84, 84, 81, 79, 78, 76, 75, 74, 70, 70, 70, 66, 64, 61, 60, 58, 57, 57, 54, 52, 52, 51, 51, 50, 50, 48, 48, 48, 47, 47, 46, 46, 46, 46, 45, 45, 44, 41, 39, 35, 31, 30, 29, 26, 25, 24, 24, 24, 22, 19, 18, 18, 16, 15, 13, 12, 12, 12, 11, 10, 8, 8, 7, 7, 6, 4, 3, 2, 2, 1]) == 2346\nassert solution.minimumCost([97, 97, 97, 96, 94, 94, 93, 93, 89, 89, 87, 86, 85, 81, 80, 79, 79, 78, 77, 76, 74, 73, 69, 67, 66, 65, 62, 60, 59, 57, 56, 52, 52, 52, 52, 50, 49, 49, 47, 46, 46, 44, 43, 42, 35, 35, 34, 32, 31, 31, 29, 28, 27, 26, 26, 25, 22, 19, 19, 14, 10, 7, 7, 2]) == 2396\nassert solution.minimumCost([100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 91, 91, 90, 90, 89, 85, 84, 80, 79, 76, 71, 68, 67, 66, 63, 58, 55, 53, 52, 52, 50, 50, 49, 47, 47, 47, 47, 46, 43, 41, 40, 40, 36, 35, 32, 31, 30, 30, 30, 30, 29, 28, 27, 27, 26, 25, 25, 24, 23, 23, 21, 20, 20, 18, 17, 17, 17, 16, 16, 14, 13, 13, 11, 10, 9, 9, 8, 6, 2, 2, 1]) == 2517\nassert solution.minimumCost([99, 99, 96, 96, 95, 94, 93, 93, 92, 92, 91, 90, 89, 88, 87, 86, 84, 84, 82, 81, 79, 74, 73, 72, 71, 67, 66, 65, 64, 64, 63, 62, 62, 61, 60, 60, 59, 56, 56, 54, 54, 54, 53, 51, 51, 50, 50, 49, 47, 46, 44, 44, 41, 39, 38, 38, 37, 36, 36, 33, 33, 32, 32, 30, 29, 28, 26, 26, 24, 23, 22, 21, 20, 17, 15, 10, 10, 10, 8, 7, 6, 6, 6, 6, 4, 4, 4, 2, 2]) == 2998",
  "inefficient_solution": "class Solution:\n    def minimumCost(self, cost: List[int]) -> int:\n        cost.sort(reverse=True)\n        total_cost = 0\n        candies_bought = 0\n        free_candies = []\n        for i in range(len(cost)):\n            total_cost += cost[i]\n            if i % 2 == 0:\n                free_candies.append(cost[i])\n            if i % 3 == 2 and i > 0:\n                free_candies.sort()\n                min_cost = min(cost[i-2], cost[i-1])\n                if free_candies[0] <= min_cost:\n                    total_cost -= free_candies.pop(0)\n        return total_cost",
  "is_python": true
}