{
  "problem_idx": 408,
  "task_name": "Valid Word Abbreviation",
  "markdown_description": "\nA string can be **abbreviated** by replacing any number of **non-adjacent**, **non-empty** substrings with their lengths. The lengths **should not** have leading zeros.\n\n\nFor example, a string such as `\"substitution\"` could be abbreviated as (but not limited to):\n\n\n* `\"s10n\"` (`\"s ubstitutio n\"`)\n* `\"sub4u4\"` (`\"sub stit u tion\"`)\n* `\"12\"` (`\"substitution\"`)\n* `\"su3i1u2on\"` (`\"su bst i t u ti on\"`)\n* `\"substitution\"` (no substrings replaced)\n\n\nThe following are **not valid** abbreviations:\n\n\n* `\"s55n\"` (`\"s ubsti tutio n\"`, the replaced substrings are adjacent)\n* `\"s010n\"` (has leading zeros)\n* `\"s0ubstitution\"` (replaces an empty substring)\n\n\nGiven a string `word` and an abbreviation `abbr`, return *whether the string **matches** the given abbreviation*.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"internationalization\", abbr = \"i12iz4n\"\n**Output:** true\n**Explanation:** The word \"internationalization\" can be abbreviated as \"i12iz4n\" (\"i nternational iz atio n\").\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"apple\", abbr = \"a2e\"\n**Output:** false\n**Explanation:** The word \"apple\" cannot be abbreviated as \"a2e\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 20`\n* `word` consists of only lowercase English letters.\n* `1 <= abbr.length <= 10`\n* `abbr` consists of lowercase English letters and digits.\n* All the integers in `abbr` will fit in a 32-bit integer.\n\n\n",
  "canonical_solution": "class Solution:\n    def validWordAbbreviation(self, word: str, abbr: str) -> bool:\n        m, n = len(word), len(abbr)\n        i = j = x = 0\n        while i < m and j < n:\n            if abbr[j].isdigit():\n                if abbr[j] == \"0\" and x == 0:\n                    return False\n                x = x * 10 + int(abbr[j])\n            else:\n                i += x\n                x = 0\n                if i >= m or word[i] != abbr[j]:\n                    return False\n                i += 1\n            j += 1\n        return i + x == m and j == n\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def validWordAbbreviation(self, word: str, abbr: str) -> bool:\n        m, n = len(word), len(abbr)\n        i = j = x = 0\n        while i < m and j < n:\n            if abbr[j].isdigit():\n                if abbr[j] == \"0\" and x == 0:\n                    return False\n                x = x * 10 + int(abbr[j])\n            else:\n                i += x\n                x = 0\n                if i >= m or word[i] != abbr[j]:\n                    return False\n                i += 1\n            j += 1\n        return i + x == m and j == n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random word\n    word = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 20)))\n\n    # Generate random abbreviation\n    abbr = ''\n    for _ in range(random.randint(1, 10)):\n        if random.random() < 0.5:\n            abbr += str(random.randint(1, 9))\n        else:\n            abbr += random.choice(string.ascii_lowercase)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.validWordAbbreviation(word, abbr)\n\n    return word, abbr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word, abbr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.validWordAbbreviation(word, abbr) == expected_result\n        print(f\"assert solution.validWordAbbreviation('{word}', '{abbr}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.validWordAbbreviation('{word}', '{abbr}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.validWordAbbreviation('dyqnbqgbx', 'oy6g8g7zh5') == False\nassert solution.validWordAbbreviation('berdjxj', 'orm1353etm') == False\nassert solution.validWordAbbreviation('teao', '6elf7m3') == False\nassert solution.validWordAbbreviation('qfutkspt', 'a') == False\nassert solution.validWordAbbreviation('gxbscosk', '2e6rw') == False\nassert solution.validWordAbbreviation('bgvmpdbxafmbkgjx', '6h3nw6t1e') == False\nassert solution.validWordAbbreviation('aqkeubfnpntl', 'zfnw6w4') == False\nassert solution.validWordAbbreviation('evsyyjdqldtzhtwtjdge', '4m3sty') == False\nassert solution.validWordAbbreviation('mnifmbhqeqjmdrx', 't4') == False\nassert solution.validWordAbbreviation('nkgvaxcyjzjifq', '5') == False\nassert solution.validWordAbbreviation('riplegyfjkjzqf', '3u82uy972') == False\nassert solution.validWordAbbreviation('vaqcptcxgkzvlerpvi', 'n') == False\nassert solution.validWordAbbreviation('qsjghcgonvkyr', '9h82') == False\nassert solution.validWordAbbreviation('mjcslwwvewpj', 'x1v35') == False\nassert solution.validWordAbbreviation('ys', '83z3236gj') == False\nassert solution.validWordAbbreviation('q', '7') == False\nassert solution.validWordAbbreviation('gkwwc', '6c') == False\nassert solution.validWordAbbreviation('mfhmhlqowu', '5pkixk') == False\nassert solution.validWordAbbreviation('canz', 'i7ni') == False\nassert solution.validWordAbbreviation('iys', 'kxy') == False\nassert solution.validWordAbbreviation('zzjlqdwxr', 'vp2o3fp7x') == False\nassert solution.validWordAbbreviation('jbzijbmxfgpdlzl', 'd') == False\nassert solution.validWordAbbreviation('yaoadddxxlxjfqbdjoqs', 'y6j478qz1m') == False\nassert solution.validWordAbbreviation('moazkeyybzomgupr', 'r7c6b9u6') == False\nassert solution.validWordAbbreviation('kgxyfjvxaop', '16') == False\nassert solution.validWordAbbreviation('gstuyvqzaeadvku', '2pekd') == False\nassert solution.validWordAbbreviation('ptgnmwmbfwnpwim', '1') == False\nassert solution.validWordAbbreviation('dirpgcph', 'q') == False\nassert solution.validWordAbbreviation('yyxy', 'er94ld7q71') == False\nassert solution.validWordAbbreviation('eytevjwx', 'rw2') == False\nassert solution.validWordAbbreviation('mob', 'n') == False\nassert solution.validWordAbbreviation('jwa', '8ox24uqrcr') == False\nassert solution.validWordAbbreviation('ydmicooemfi', 'wgb13m2') == False\nassert solution.validWordAbbreviation('iktlxxz', '11cl8z6') == False\nassert solution.validWordAbbreviation('wabriv', '6ip7yu') == False\nassert solution.validWordAbbreviation('xxgpbas', 'w9mru2') == False\nassert solution.validWordAbbreviation('dwajttokt', '78v2r4') == False\nassert solution.validWordAbbreviation('t', '583k537') == False\nassert solution.validWordAbbreviation('u', 'a4r94o') == False\nassert solution.validWordAbbreviation('vyipo', '867vk1r') == False\nassert solution.validWordAbbreviation('gphsmzbz', 'n661fmzr7h') == False\nassert solution.validWordAbbreviation('s', '1a84t39') == False\nassert solution.validWordAbbreviation('yncdjxymixyqdoz', 'y253') == False\nassert solution.validWordAbbreviation('uigiesgqisfm', '38ku14kji') == False\nassert solution.validWordAbbreviation('egnjvisruyxmmws', '2ig2w9s') == False\nassert solution.validWordAbbreviation('tvwar', 't9c7o1') == False\nassert solution.validWordAbbreviation('hpfajoradcwtex', '1nl267jwq2') == False\nassert solution.validWordAbbreviation('bcpyvlczuwec', 'z7ljg66uoz') == False\nassert solution.validWordAbbreviation('wlo', 'b1r65') == False\nassert solution.validWordAbbreviation('cl', 'ijxg1y3pk') == False\nassert solution.validWordAbbreviation('ruapkwtzblsrv', 'fj3s') == False\nassert solution.validWordAbbreviation('nrirqyrnsxzt', 'zou2h4') == False\nassert solution.validWordAbbreviation('dffbm', '63m5886y') == False\nassert solution.validWordAbbreviation('frdqnqyfvo', 'n') == False\nassert solution.validWordAbbreviation('eirqu', 'ou') == False\nassert solution.validWordAbbreviation('aotpjq', '99') == False\nassert solution.validWordAbbreviation('oupljucvvot', 'su17') == False\nassert solution.validWordAbbreviation('hydyzlvvmxz', 'p') == False\nassert solution.validWordAbbreviation('ivmjgfeusnfba', 's2dc6') == False\nassert solution.validWordAbbreviation('kxfkzjmlkdwnaiaalkt', 'j8') == False\nassert solution.validWordAbbreviation('dxjwyadoaiezajkyucch', '8s55d8efk') == False\nassert solution.validWordAbbreviation('chufhbgjakkhraz', 'pyc') == False\nassert solution.validWordAbbreviation('ktbqrblpa', 'kw9n5') == False\nassert solution.validWordAbbreviation('sxmhyhyea', 'ab') == False\nassert solution.validWordAbbreviation('pkhmyozijffr', 'x8') == False\nassert solution.validWordAbbreviation('dzinjzvmgap', '8sk7f8o') == False\nassert solution.validWordAbbreviation('atggeyj', 'j6si75mm') == False\nassert solution.validWordAbbreviation('yqtwxaecdpa', '8i2u5dj') == False\nassert solution.validWordAbbreviation('mqxctvmoq', '8p') == False\nassert solution.validWordAbbreviation('oupditzcbkfh', 'd') == False\nassert solution.validWordAbbreviation('dhfsgxpceylof', '5w6') == False\nassert solution.validWordAbbreviation('uk', 'e3zt3gd4y') == False\nassert solution.validWordAbbreviation('kna', '1s44') == False\nassert solution.validWordAbbreviation('cdmeowvaethavvbuiq', '4752nkivo') == False\nassert solution.validWordAbbreviation('tsljutdtwimtfcfavrc', 'ytw') == False\nassert solution.validWordAbbreviation('yhndsgpjzsdnijankra', 't') == False\nassert solution.validWordAbbreviation('hftgf', '8u') == False\nassert solution.validWordAbbreviation('uqnr', '4422x5yb') == False\nassert solution.validWordAbbreviation('gpiltmzinxo', 'ri53s') == False\nassert solution.validWordAbbreviation('ympmlintdruistjauvq', 'ob') == False\nassert solution.validWordAbbreviation('kdreonmwjoaj', '7') == False\nassert solution.validWordAbbreviation('nlpkxvqpe', 'u') == False\nassert solution.validWordAbbreviation('uegrelzgbulyolozgiyu', 'q686x79596') == False\nassert solution.validWordAbbreviation('deyaembwzj', '41m1') == False\nassert solution.validWordAbbreviation('yksczn', '6516') == False\nassert solution.validWordAbbreviation('rossylspe', 'e9i8cx1ev') == False\nassert solution.validWordAbbreviation('xxwftrfe', 'sot6') == False\nassert solution.validWordAbbreviation('jzaopqpmgbnsonahc', 'miaqxj7') == False\nassert solution.validWordAbbreviation('f', 'wn37lf9vyw') == False\nassert solution.validWordAbbreviation('oatwejfjuk', 'w4996t') == False\nassert solution.validWordAbbreviation('bqqrlhd', 'eg8') == False\nassert solution.validWordAbbreviation('pc', '1t99hwz2qu') == False\nassert solution.validWordAbbreviation('ytqfsnourylml', 'jk') == False\nassert solution.validWordAbbreviation('plwhsvwhueswhjii', 'a') == False\nassert solution.validWordAbbreviation('wnunirfpoyyvqmrfl', '4j21t7fqo') == False\nassert solution.validWordAbbreviation('qxracsaephn', '5879') == False\nassert solution.validWordAbbreviation('diwllzl', 'kid') == False\nassert solution.validWordAbbreviation('gxdapqvycnceuivnfj', 'u') == False\nassert solution.validWordAbbreviation('z', '43') == False\nassert solution.validWordAbbreviation('nhxccjwtoacrnwtro', 'br39') == False",
  "inefficient_solution": "class Solution:\n    def validWordAbbreviation(self, word: str, abbr: str) -> bool:\n        m, n = len(word), len(abbr)\n        i, j = 0, 0\n        arr = [0] * (n + 1)\n        while i < m and j < n:\n            if abbr[j].isdigit():\n                temp = ''\n                while j < n and abbr[j].isdigit():\n                    temp += abbr[j]\n                    j += 1\n                arr[j] = int(temp)\n                if arr[j] == 0 and j == 0:\n                    return False\n            else:\n                temp = ''\n                while j < n and not abbr[j].isdigit():\n                    temp += abbr[j]\n                    j += 1\n                if i >= m or word[i] != temp:\n                    return False\n                i += 1\n        return i + sum(arr[j:] if arr[j] != 0 else 0 for j in range(n)) == m and j == n",
  "is_python": true
}