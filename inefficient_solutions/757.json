{
  "problem_idx": 757,
  "task_name": "Set Intersection Size At Least Two",
  "markdown_description": "\nYou are given a 2D integer array `intervals` where `intervals[i] = [starti, endi]` represents all the integers from `starti` to `endi` inclusively.\n\n\nA **containing set** is an array `nums` where each interval from `intervals` has **at least two** integers in `nums`.\n\n\n* For example, if `intervals = [[1,3], [3,7], [8,9]]`, then `[1,2,4,7,8,9]` and `[2,3,4,8,9]` are **containing sets**.\n\n\nReturn *the minimum possible size of a containing set*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** intervals = [[1,3],[3,7],[8,9]]\n**Output:** 5\n**Explanation:** let nums = [2, 3, 4, 8, 9].\nIt can be shown that there cannot be any containing array of size 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** intervals = [[1,3],[1,4],[2,5],[3,5]]\n**Output:** 3\n**Explanation:** let nums = [2, 3, 4].\nIt can be shown that there cannot be any containing array of size 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** intervals = [[1,2],[2,3],[2,4],[4,5]]\n**Output:** 5\n**Explanation:** let nums = [1, 2, 3, 4, 5].\nIt can be shown that there cannot be any containing array of size 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= intervals.length <= 3000`\n* `intervals[i].length == 2`\n* `0 <= starti < endi <= 108`\n\n\n",
  "canonical_solution": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        s = e = -1\n        ans = 0\n        for a, b in intervals:\n            if a <= s:\n                continue\n            if a > e:\n                ans += 2\n                s, e = b - 1, b\n            else:\n                ans += 1\n                s, e = e, b\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        s = e = -1\n        ans = 0\n        for a, b in intervals:\n            if a <= s:\n                continue\n            if a > e:\n                ans += 2\n                s, e = b - 1, b\n            else:\n                ans += 1\n                s, e = e, b\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random intervals list\n    intervals = []\n    num_intervals = random.randint(1, 10)\n    for i in range(num_intervals):\n        start = random.randint(1, 100)\n        end = random.randint(start, start + random.randint(1, 10))\n        intervals.append([start, end])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.intersectionSizeTwo(intervals)\n\n    return intervals, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        intervals, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.intersectionSizeTwo(intervals) == expected_result\n        print(f\"assert solution.intersectionSizeTwo({intervals}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.intersectionSizeTwo({intervals}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.intersectionSizeTwo([[4, 7], [48, 48], [75, 77]]) == 6\nassert solution.intersectionSizeTwo([[24, 27], [19, 27], [25, 33], [43, 45], [47, 51], [51, 58], [65, 67], [83, 91]]) == 11\nassert solution.intersectionSizeTwo([[17, 18], [33, 38], [47, 51], [66, 66], [75, 76]]) == 10\nassert solution.intersectionSizeTwo([[15, 15], [14, 16], [15, 19], [24, 26], [32, 41], [36, 44], [96, 96], [90, 96], [100, 107]]) == 11\nassert solution.intersectionSizeTwo([[2, 2], [1, 3], [3, 4], [2, 4], [16, 17], [84, 85], [79, 85], [98, 99]]) == 10\nassert solution.intersectionSizeTwo([[5, 8], [11, 14], [55, 56], [58, 60], [93, 99]]) == 10\nassert solution.intersectionSizeTwo([[8, 11], [11, 17], [22, 26], [22, 26], [32, 35], [38, 39], [45, 47], [57, 57], [69, 72]]) == 15\nassert solution.intersectionSizeTwo([[25, 26], [55, 63]]) == 4\nassert solution.intersectionSizeTwo([[4, 8], [23, 23], [21, 23], [38, 40], [46, 47], [48, 53], [56, 58], [81, 84]]) == 14\nassert solution.intersectionSizeTwo([[15, 15], [14, 15], [16, 19], [20, 25], [44, 51], [53, 55], [57, 59], [60, 69], [66, 74], [96, 101]]) == 16\nassert solution.intersectionSizeTwo([[6, 7], [12, 14], [35, 37], [39, 41], [43, 49], [57, 59], [87, 90]]) == 14\nassert solution.intersectionSizeTwo([[1, 5], [14, 19], [28, 30], [25, 31], [28, 32], [43, 46], [68, 69], [77, 79], [82, 82], [74, 84]]) == 14\nassert solution.intersectionSizeTwo([[13, 14], [4, 14], [17, 17], [34, 38], [39, 42], [79, 85]]) == 10\nassert solution.intersectionSizeTwo([[37, 38], [46, 53], [70, 70], [75, 81], [84, 84], [77, 84]]) == 10\nassert solution.intersectionSizeTwo([[22, 23], [30, 36], [37, 38]]) == 6\nassert solution.intersectionSizeTwo([[23, 23], [26, 26], [32, 32], [33, 33], [32, 33], [40, 40], [57, 65], [81, 85], [98, 98]]) == 16\nassert solution.intersectionSizeTwo([[96, 97]]) == 2\nassert solution.intersectionSizeTwo([[10, 10], [5, 10], [18, 20], [18, 25], [25, 26], [38, 42], [51, 54], [57, 62]]) == 12\nassert solution.intersectionSizeTwo([[15, 15], [15, 19], [97, 97]]) == 5\nassert solution.intersectionSizeTwo([[32, 35], [37, 38], [33, 38], [91, 92]]) == 6\nassert solution.intersectionSizeTwo([[20, 23], [23, 25], [30, 34], [36, 40], [39, 41], [52, 59], [74, 77], [84, 87], [78, 87]]) == 13\nassert solution.intersectionSizeTwo([[35, 40]]) == 2\nassert solution.intersectionSizeTwo([[10, 11], [29, 29], [28, 30], [41, 44], [53, 53], [62, 64], [71, 73], [99, 100]]) == 14\nassert solution.intersectionSizeTwo([[7, 9], [9, 12], [6, 13], [19, 21], [37, 38], [45, 49]]) == 9\nassert solution.intersectionSizeTwo([[64, 67], [68, 73]]) == 4\nassert solution.intersectionSizeTwo([[6, 7], [60, 64], [94, 94]]) == 6\nassert solution.intersectionSizeTwo([[13, 13], [49, 49], [54, 56], [68, 72], [73, 73], [66, 73], [88, 88], [92, 92], [91, 94], [93, 95]]) == 16\nassert solution.intersectionSizeTwo([[8, 10], [12, 15], [6, 15], [20, 21], [32, 34], [49, 56]]) == 10\nassert solution.intersectionSizeTwo([[23, 31], [94, 96]]) == 4\nassert solution.intersectionSizeTwo([[27, 28], [31, 32], [45, 50], [50, 52], [64, 64], [66, 71], [72, 75], [75, 76], [82, 85], [84, 91]]) == 16\nassert solution.intersectionSizeTwo([[1, 6], [8, 8], [6, 11], [35, 38], [42, 43], [50, 51], [79, 80], [99, 102]]) == 14\nassert solution.intersectionSizeTwo([[23, 23], [41, 42], [79, 80]]) == 6\nassert solution.intersectionSizeTwo([[24, 24], [28, 28]]) == 4\nassert solution.intersectionSizeTwo([[28, 29], [42, 44], [53, 55], [79, 80], [75, 80]]) == 8\nassert solution.intersectionSizeTwo([[1, 4], [19, 21], [27, 27], [47, 47], [53, 55], [56, 59], [74, 75]]) == 14\nassert solution.intersectionSizeTwo([[46, 47], [52, 53]]) == 4\nassert solution.intersectionSizeTwo([[10, 17]]) == 2\nassert solution.intersectionSizeTwo([[4, 7], [32, 36], [50, 58], [62, 63], [63, 65], [62, 67], [87, 88]]) == 11\nassert solution.intersectionSizeTwo([[67, 68]]) == 2\nassert solution.intersectionSizeTwo([[18, 23], [57, 58], [87, 88], [88, 94]]) == 7\nassert solution.intersectionSizeTwo([[5, 10], [10, 13], [25, 25], [75, 81], [98, 104]]) == 9\nassert solution.intersectionSizeTwo([[30, 36]]) == 2\nassert solution.intersectionSizeTwo([[29, 29], [34, 37], [53, 54], [77, 81]]) == 8\nassert solution.intersectionSizeTwo([[42, 42]]) == 2\nassert solution.intersectionSizeTwo([[38, 41]]) == 2\nassert solution.intersectionSizeTwo([[96, 104]]) == 2\nassert solution.intersectionSizeTwo([[77, 86]]) == 2\nassert solution.intersectionSizeTwo([[9, 12], [24, 27], [39, 41], [43, 45], [43, 46], [73, 74], [98, 103], [100, 105]]) == 12\nassert solution.intersectionSizeTwo([[18, 19], [22, 22], [28, 29], [43, 47], [50, 59], [83, 88]]) == 12\nassert solution.intersectionSizeTwo([[3, 5], [16, 16], [27, 28], [47, 55], [67, 67], [67, 69], [94, 97]]) == 13\nassert solution.intersectionSizeTwo([[31, 32], [47, 47], [59, 60], [60, 64], [61, 66], [70, 71], [77, 79], [87, 87]]) == 14\nassert solution.intersectionSizeTwo([[15, 18], [17, 19], [20, 22], [50, 54], [52, 57], [68, 74], [93, 93]]) == 10\nassert solution.intersectionSizeTwo([[68, 69], [94, 97], [98, 99]]) == 6\nassert solution.intersectionSizeTwo([[23, 23], [34, 34], [39, 39], [69, 70], [85, 88]]) == 10\nassert solution.intersectionSizeTwo([[31, 32], [41, 45], [52, 60], [66, 68], [83, 83]]) == 10\nassert solution.intersectionSizeTwo([[22, 25], [85, 90], [90, 91]]) == 5\nassert solution.intersectionSizeTwo([[25, 25], [47, 48], [59, 60], [81, 81]]) == 8\nassert solution.intersectionSizeTwo([[5, 7], [11, 11], [29, 38], [58, 58], [78, 78], [85, 86]]) == 12\nassert solution.intersectionSizeTwo([[99, 102]]) == 2\nassert solution.intersectionSizeTwo([[19, 20], [85, 85]]) == 4\nassert solution.intersectionSizeTwo([[20, 21], [38, 43], [49, 49], [52, 52], [66, 68], [70, 70], [69, 73], [97, 97], [95, 101], [94, 103]]) == 14\nassert solution.intersectionSizeTwo([[6, 8], [54, 60], [63, 67], [95, 101]]) == 8\nassert solution.intersectionSizeTwo([[25, 28], [34, 37], [70, 71], [85, 89]]) == 8\nassert solution.intersectionSizeTwo([[11, 14], [15, 17], [38, 44], [49, 56], [89, 93], [96, 96], [97, 100], [95, 101]]) == 14\nassert solution.intersectionSizeTwo([[7, 7], [29, 30], [29, 36]]) == 4\nassert solution.intersectionSizeTwo([[38, 40], [37, 44], [48, 56], [60, 61], [75, 85], [90, 94], [97, 97]]) == 12\nassert solution.intersectionSizeTwo([[3, 3], [25, 27], [28, 29], [28, 33], [45, 45], [60, 60], [59, 63], [64, 65], [66, 66], [92, 94]]) == 16\nassert solution.intersectionSizeTwo([[2, 3], [14, 15], [13, 15], [26, 27], [41, 46], [66, 71], [79, 80], [78, 80], [87, 89]]) == 14\nassert solution.intersectionSizeTwo([[18, 18], [17, 24], [57, 60], [80, 83]]) == 6\nassert solution.intersectionSizeTwo([[3, 8], [8, 9], [18, 22], [27, 27], [24, 31], [38, 43], [46, 51], [66, 69], [86, 86], [90, 95]]) == 17\nassert solution.intersectionSizeTwo([[20, 23], [27, 31], [28, 32], [43, 51], [53, 56], [69, 69], [70, 70], [88, 89]]) == 14\nassert solution.intersectionSizeTwo([[8, 9], [17, 18], [47, 49], [59, 60], [71, 71], [94, 95]]) == 12\nassert solution.intersectionSizeTwo([[42, 50], [64, 64], [92, 95]]) == 6\nassert solution.intersectionSizeTwo([[17, 17], [26, 30], [44, 45], [53, 57], [76, 77], [82, 86], [89, 89]]) == 14\nassert solution.intersectionSizeTwo([[55, 56], [54, 58], [56, 59], [73, 73], [85, 85], [90, 90], [83, 90], [92, 92], [98, 108]]) == 13\nassert solution.intersectionSizeTwo([[2, 4], [70, 76], [87, 87], [87, 88], [93, 93], [95, 95], [91, 96]]) == 11\nassert solution.intersectionSizeTwo([[29, 29], [59, 65], [66, 68], [66, 75], [85, 89]]) == 8\nassert solution.intersectionSizeTwo([[34, 39], [49, 49]]) == 4\nassert solution.intersectionSizeTwo([[19, 23], [66, 73], [97, 101]]) == 6\nassert solution.intersectionSizeTwo([[50, 54]]) == 2\nassert solution.intersectionSizeTwo([[19, 26], [36, 37], [68, 69], [84, 85], [88, 90], [98, 99], [97, 99], [99, 100]]) == 13\nassert solution.intersectionSizeTwo([[52, 52], [50, 52]]) == 2\nassert solution.intersectionSizeTwo([[22, 22], [19, 22], [22, 26], [34, 34], [34, 40], [71, 72], [75, 75], [77, 80]]) == 12\nassert solution.intersectionSizeTwo([[43, 48], [70, 70], [100, 102]]) == 6\nassert solution.intersectionSizeTwo([[24, 29], [28, 34], [36, 37], [34, 38], [54, 54], [65, 65], [71, 71], [74, 75]]) == 12\nassert solution.intersectionSizeTwo([[26, 26], [31, 31], [43, 43], [50, 53], [65, 67]]) == 10\nassert solution.intersectionSizeTwo([[17, 22], [52, 54], [71, 78]]) == 6\nassert solution.intersectionSizeTwo([[1, 4], [7, 8], [34, 37], [37, 42], [79, 86], [100, 100]]) == 11\nassert solution.intersectionSizeTwo([[24, 24], [67, 67], [98, 100]]) == 6\nassert solution.intersectionSizeTwo([[70, 71], [88, 90]]) == 4\nassert solution.intersectionSizeTwo([[72, 72]]) == 2\nassert solution.intersectionSizeTwo([[66, 66], [85, 86]]) == 4\nassert solution.intersectionSizeTwo([[18, 26], [43, 45], [51, 54]]) == 6\nassert solution.intersectionSizeTwo([[24, 24], [31, 31], [53, 60], [63, 66], [68, 72], [73, 80], [88, 89]]) == 14\nassert solution.intersectionSizeTwo([[9, 11], [40, 40], [41, 42], [45, 45], [37, 47], [66, 66], [66, 70]]) == 11\nassert solution.intersectionSizeTwo([[9, 15], [27, 28], [27, 28], [60, 61], [61, 62], [67, 67], [63, 71], [72, 76], [79, 80], [84, 85]]) == 15\nassert solution.intersectionSizeTwo([[2, 2], [13, 15], [21, 22], [45, 47], [62, 64], [90, 96]]) == 12\nassert solution.intersectionSizeTwo([[18, 20], [43, 49], [60, 61], [72, 75], [75, 83], [86, 86], [94, 97]]) == 13\nassert solution.intersectionSizeTwo([[20, 20], [19, 22], [24, 27], [49, 51], [50, 52], [77, 78], [85, 88], [100, 100], [99, 108]]) == 12\nassert solution.intersectionSizeTwo([[2, 4], [81, 81]]) == 4",
  "inefficient_solution": "class Solution:\n    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        ans = 0\n        for i in range(len(intervals)):\n            for j in range(i + 1, len(intervals)):\n                for k in range(intervals[i][0], intervals[i][1]):\n                    for m in range(intervals[j][0], intervals[j][1]):\n                        for n in range(k + 1, m):\n                            ans += 1\n        return ans",
  "is_python": true
}