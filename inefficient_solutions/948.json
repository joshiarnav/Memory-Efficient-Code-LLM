{
  "problem_idx": 948,
  "task_name": "Bag of Tokens",
  "markdown_description": "\nYou have an initial **power** of `power`, an initial **score** of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed).\n\n\nYour goal is to maximize your total **score** by potentially playing each token in one of two ways:\n\n\n* If your current **power** is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` **power** and gaining `1` **score**.\n* If your current **score** is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` **power** and losing `1` **score**.\n\n\nEach token may be played **at most** once and **in any order**. You do **not** have to play all the tokens.\n\n\nReturn *the largest possible **score** you can achieve after playing any number of tokens*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tokens = [100], power = 50\n**Output:** 0\n**Explanation****:** Playing the only token in the bag is impossible because you either have too little power or too little score.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tokens = [100,200], power = 150\n**Output:** 1\n**Explanation:** Play the 0th token (100) face up, your power becomes 50 and score becomes 1.\nThere is no need to play the 1st token since you cannot play it face up to add to your score.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** tokens = [100,200,300,400], power = 200\n**Output:** 2\n**Explanation:** Play the tokens in this order to get a score of 2:\n1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.\n2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.\n3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.\n4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= tokens.length <= 1000`\n* `0 <= tokens[i],\u00a0power < 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:\n        tokens.sort()\n        i, j = 0, len(tokens) - 1\n        ans = t = 0\n        while i <= j:\n            if power >= tokens[i]:\n                power -= tokens[i]\n                i, t = i + 1, t + 1\n                ans = max(ans, t)\n            elif t:\n                power += tokens[j]\n                j, t = j - 1, t - 1\n            else:\n                break\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def bagOfTokensScore(self, tokens, power):\n        tokens.sort()\n        i, j = 0, len(tokens) - 1\n        ans = t = 0\n        while i <= j:\n            if power >= tokens[i]:\n                power -= tokens[i]\n                i, t = i + 1, t + 1\n                ans = max(ans, t)\n            elif t:\n                power += tokens[j]\n                j, t = j - 1, t - 1\n            else:\n                break\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    tokens = random.sample(range(1, 101), random.randint(0, 10))\n    \n    # Generate a random power\n    power = random.randint(1, 200)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.bagOfTokensScore(tokens, power)\n\n    return tokens, power, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tokens, power, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.bagOfTokensScore(tokens, power) == expected_result\n        print(f\"assert solution.bagOfTokensScore({tokens}, {power}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.bagOfTokensScore({tokens}, {power}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.bagOfTokensScore([15, 42, 52], 186) == 3\nassert solution.bagOfTokensScore([2, 10, 32, 41, 45, 67, 82, 91], 64) == 4\nassert solution.bagOfTokensScore([48, 61, 63, 72], 47) == 0\nassert solution.bagOfTokensScore([7, 18, 20, 62], 118) == 4\nassert solution.bagOfTokensScore([3], 6) == 1\nassert solution.bagOfTokensScore([25, 41, 42, 49, 67, 78], 69) == 2\nassert solution.bagOfTokensScore([1, 17, 19, 30, 53, 54, 68, 87, 93], 2) == 4\nassert solution.bagOfTokensScore([20, 50, 71], 35) == 1\nassert solution.bagOfTokensScore([4, 15, 50, 70, 80, 82, 83, 96], 110) == 3\nassert solution.bagOfTokensScore([7, 16, 33, 63, 66, 68, 86, 89, 96], 150) == 4\nassert solution.bagOfTokensScore([12, 51, 61, 79], 131) == 3\nassert solution.bagOfTokensScore([90], 114) == 1\nassert solution.bagOfTokensScore([13, 28, 48, 71], 174) == 4\nassert solution.bagOfTokensScore([1, 8, 9, 17, 68], 108) == 5\nassert solution.bagOfTokensScore([7, 13, 20, 41, 42, 48, 60, 80], 58) == 4\nassert solution.bagOfTokensScore([], 55) == 0\nassert solution.bagOfTokensScore([6, 7, 18, 20, 40, 45, 47, 67, 70, 71], 170) == 6\nassert solution.bagOfTokensScore([12, 41, 58], 92) == 2\nassert solution.bagOfTokensScore([9, 12, 59, 67, 77, 85], 190) == 4\nassert solution.bagOfTokensScore([13, 17, 41, 59, 63, 75, 80, 85, 88, 95], 199) == 5\nassert solution.bagOfTokensScore([], 24) == 0\nassert solution.bagOfTokensScore([], 142) == 0\nassert solution.bagOfTokensScore([8, 19, 25, 32, 34, 51, 60, 61, 84, 98], 181) == 6\nassert solution.bagOfTokensScore([8, 20, 32, 41, 46, 53, 63, 66, 94, 97], 101) == 5\nassert solution.bagOfTokensScore([16, 22, 30, 44, 71], 62) == 3\nassert solution.bagOfTokensScore([14, 29, 39, 50, 74, 85], 148) == 4\nassert solution.bagOfTokensScore([8, 18, 26, 47, 56, 88], 191) == 5\nassert solution.bagOfTokensScore([3, 15, 60, 98], 191) == 4\nassert solution.bagOfTokensScore([4, 19, 44, 57, 92, 93, 96], 184) == 4\nassert solution.bagOfTokensScore([5, 26, 27, 30, 43, 70, 85, 93], 171) == 5\nassert solution.bagOfTokensScore([1, 12, 51, 65, 91], 61) == 3\nassert solution.bagOfTokensScore([13, 16, 70], 200) == 3\nassert solution.bagOfTokensScore([1, 4, 15, 22, 25, 31, 54], 195) == 7\nassert solution.bagOfTokensScore([27, 50, 58, 66, 72, 76, 83], 58) == 2\nassert solution.bagOfTokensScore([15, 18, 74], 49) == 2\nassert solution.bagOfTokensScore([20, 26, 27, 92], 110) == 3\nassert solution.bagOfTokensScore([27, 37, 57, 83, 91], 163) == 3\nassert solution.bagOfTokensScore([5, 7, 18, 24, 32, 65, 82], 93) == 5\nassert solution.bagOfTokensScore([2, 12, 17, 41, 53, 57, 69, 88, 94, 96], 108) == 5\nassert solution.bagOfTokensScore([48, 64, 90, 99], 128) == 2\nassert solution.bagOfTokensScore([8, 15, 33, 64, 78], 167) == 4\nassert solution.bagOfTokensScore([3, 20, 27, 34, 54, 59, 82, 89, 96], 117) == 5\nassert solution.bagOfTokensScore([15, 47, 51, 57, 63, 64, 66, 72, 73, 88], 153) == 4\nassert solution.bagOfTokensScore([25, 53, 99], 165) == 2\nassert solution.bagOfTokensScore([32, 81, 86], 153) == 2\nassert solution.bagOfTokensScore([54], 93) == 1\nassert solution.bagOfTokensScore([1, 4, 5, 28, 32, 50, 56, 62, 78, 93], 181) == 7\nassert solution.bagOfTokensScore([4, 5, 43, 91], 111) == 3\nassert solution.bagOfTokensScore([16, 19, 37, 48, 56, 94], 125) == 4\nassert solution.bagOfTokensScore([18, 20, 23, 60, 64, 79, 91, 99], 117) == 4\nassert solution.bagOfTokensScore([75], 16) == 0\nassert solution.bagOfTokensScore([17, 18, 30, 49, 50, 67, 68, 78, 87, 91], 100) == 4\nassert solution.bagOfTokensScore([14, 15, 58, 80, 99], 15) == 2\nassert solution.bagOfTokensScore([16, 24, 43, 50, 53, 62, 67, 77], 47) == 3\nassert solution.bagOfTokensScore([23, 55, 69, 85], 86) == 2\nassert solution.bagOfTokensScore([13, 15, 17, 79, 85, 97], 10) == 0\nassert solution.bagOfTokensScore([46, 51, 59, 94], 48) == 1\nassert solution.bagOfTokensScore([6, 9, 20, 48, 56, 70, 96, 100], 187) == 5\nassert solution.bagOfTokensScore([35, 56, 85], 46) == 1\nassert solution.bagOfTokensScore([37], 35) == 0\nassert solution.bagOfTokensScore([20, 21, 34, 41, 92, 97], 73) == 3\nassert solution.bagOfTokensScore([4, 9, 20, 28, 65, 82, 86, 90, 92, 99], 128) == 5\nassert solution.bagOfTokensScore([22, 24, 27, 39, 45, 51, 65, 67, 79, 82], 56) == 4\nassert solution.bagOfTokensScore([5, 93], 27) == 1\nassert solution.bagOfTokensScore([], 68) == 0\nassert solution.bagOfTokensScore([], 185) == 0\nassert solution.bagOfTokensScore([21, 29, 38, 39, 85], 197) == 4\nassert solution.bagOfTokensScore([22, 63, 76, 78], 135) == 2\nassert solution.bagOfTokensScore([1, 39, 67], 131) == 3\nassert solution.bagOfTokensScore([16, 51, 95], 79) == 2\nassert solution.bagOfTokensScore([15, 20, 22, 24, 27, 35, 41, 73, 81, 85], 24) == 5\nassert solution.bagOfTokensScore([16, 18, 28, 34, 38, 50, 80, 98], 122) == 5\nassert solution.bagOfTokensScore([19, 53, 97], 128) == 2\nassert solution.bagOfTokensScore([], 23) == 0\nassert solution.bagOfTokensScore([15, 30, 31, 35, 97], 57) == 3\nassert solution.bagOfTokensScore([13, 31, 33, 38, 44, 92, 97], 161) == 5\nassert solution.bagOfTokensScore([96], 75) == 0\nassert solution.bagOfTokensScore([32, 51, 58], 76) == 1\nassert solution.bagOfTokensScore([16, 25, 33, 43, 46, 57, 86, 87, 92], 135) == 5\nassert solution.bagOfTokensScore([29], 104) == 1\nassert solution.bagOfTokensScore([], 124) == 0\nassert solution.bagOfTokensScore([16, 43, 46, 65, 67, 69, 72, 77, 79], 55) == 2\nassert solution.bagOfTokensScore([55, 60], 141) == 2\nassert solution.bagOfTokensScore([22, 31, 49], 199) == 3\nassert solution.bagOfTokensScore([7, 70, 77, 78], 49) == 1\nassert solution.bagOfTokensScore([19, 33, 43, 46, 49, 69, 74, 78, 80, 83], 124) == 4\nassert solution.bagOfTokensScore([16, 44, 48, 62, 76, 80, 95], 42) == 2\nassert solution.bagOfTokensScore([13, 59, 63, 71, 74, 82, 91, 100], 148) == 3\nassert solution.bagOfTokensScore([7, 14, 64], 173) == 3\nassert solution.bagOfTokensScore([13, 31, 33, 43, 44, 65, 68, 80], 43) == 3\nassert solution.bagOfTokensScore([38, 97], 200) == 2\nassert solution.bagOfTokensScore([36, 68, 74, 83], 39) == 1\nassert solution.bagOfTokensScore([17, 48, 69, 77, 85, 91], 79) == 2\nassert solution.bagOfTokensScore([5, 6, 27, 38, 45, 57, 72, 92], 73) == 4\nassert solution.bagOfTokensScore([29, 65, 66, 68, 79], 143) == 2\nassert solution.bagOfTokensScore([17, 23, 26, 30, 57], 130) == 4\nassert solution.bagOfTokensScore([11, 17, 20, 42, 63, 66, 86], 36) == 3\nassert solution.bagOfTokensScore([2, 22, 100], 2) == 1\nassert solution.bagOfTokensScore([51, 55], 169) == 2\nassert solution.bagOfTokensScore([81], 139) == 1",
  "inefficient_solution": "class Solution:\n    def bagOfTokensScore(self, tokens, power):\n        tokens.sort()\n        i, j = 0, len(tokens) - 1\n        ans = t = 0\n        temp_power = power\n        temp_tokens = [token for token in tokens]\n        while i <= j:\n            if len(temp_tokens) > 0 and temp_power >= temp_tokens[i]:\n                temp_power -= temp_tokens[i]\n                temp_tokens.pop(i)\n                i += 1\n                ans = max(ans, t + 1)\n                temp_tokens.extend([token for token in tokens])\n                temp_tokens.sort()\n            elif t > 0 and len(temp_tokens) > 0:\n                temp_power += temp_tokens[j]\n                temp_tokens.pop(j)\n                j -= 1\n                t -= 1\n                temp_tokens.extend([token for token in tokens])\n                temp_tokens.sort()\n            else:\n                break\n        return ans",
  "is_python": true
}