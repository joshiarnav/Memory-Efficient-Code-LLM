{
  "problem_idx": 992,
  "task_name": "Subarrays with K Different Integers",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, return *the number of **good subarrays** of* `nums`.\n\n\nA **good array** is an array where the number of different integers in that array is exactly `k`.\n\n\n* For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,2,3], k = 2\n**Output:** 7\n**Explanation:** Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,3,4], k = 3\n**Output:** 3\n**Explanation:** Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 104`\n* `1 <= nums[i], k <= nums.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:\n        def f(k):\n            pos = [0] * len(nums)\n            cnt = Counter()\n            j = 0\n            for i, x in enumerate(nums):\n                cnt[x] += 1\n                while len(cnt) > k:\n                    cnt[nums[j]] -= 1\n                    if cnt[nums[j]] == 0:\n                        cnt.pop(nums[j])\n                    j += 1\n                pos[i] = j\n            return pos\n\n        return sum(a - b for a, b in zip(f(k - 1), f(k)))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def subarraysWithKDistinct(self, nums, k):\n        def f(k):\n            pos = [0] * len(nums)\n            cnt = Counter()\n            j = 0\n            for i, x in enumerate(nums):\n                cnt[x] += 1\n                while len(cnt) > k:\n                    cnt[nums[j]] -= 1\n                    if cnt[nums[j]] == 0:\n                        cnt.pop(nums[j])\n                    j += 1\n                pos[i] = j\n            return pos\n\n        return sum(a - b for a, b in zip(f(k - 1), f(k)))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random value for k\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.subarraysWithKDistinct(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.subarraysWithKDistinct(nums, k) == expected_result\n        print(f\"assert solution.subarraysWithKDistinct({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.subarraysWithKDistinct({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.subarraysWithKDistinct([84, 79, 76], 1) == 3\nassert solution.subarraysWithKDistinct([70, 82, 65], 2) == 2\nassert solution.subarraysWithKDistinct([46, 38, 7, 56], 2) == 3\nassert solution.subarraysWithKDistinct([44, 24, 85, 65, 94, 64, 38], 6) == 2\nassert solution.subarraysWithKDistinct([40, 17, 83, 24, 43, 29, 50, 54, 8], 5) == 5\nassert solution.subarraysWithKDistinct([35, 62, 100, 29, 67, 20, 44, 86, 87], 6) == 4\nassert solution.subarraysWithKDistinct([63, 97, 36, 98, 30, 34, 87], 1) == 7\nassert solution.subarraysWithKDistinct([69, 54, 16, 1, 34, 11, 13, 60, 53], 8) == 2\nassert solution.subarraysWithKDistinct([38, 42, 24, 27, 89, 35], 1) == 6\nassert solution.subarraysWithKDistinct([77, 39, 16, 51, 41, 21, 28, 80, 27], 4) == 6\nassert solution.subarraysWithKDistinct([12, 36, 8, 15], 4) == 1\nassert solution.subarraysWithKDistinct([82, 21, 19], 1) == 3\nassert solution.subarraysWithKDistinct([35, 58, 51, 98, 63], 5) == 1\nassert solution.subarraysWithKDistinct([57, 10, 36], 3) == 1\nassert solution.subarraysWithKDistinct([98, 17, 83, 27, 93, 80, 62], 4) == 4\nassert solution.subarraysWithKDistinct([2, 21, 77], 1) == 3\nassert solution.subarraysWithKDistinct([68, 6, 50, 56, 81, 10, 61, 95, 98], 4) == 6\nassert solution.subarraysWithKDistinct([31, 96], 1) == 2\nassert solution.subarraysWithKDistinct([32, 51, 37, 78, 23, 38], 1) == 6\nassert solution.subarraysWithKDistinct([65, 31, 8, 66], 4) == 1\nassert solution.subarraysWithKDistinct([38, 45, 22], 1) == 3\nassert solution.subarraysWithKDistinct([61, 92, 14, 23, 80, 30, 15, 39, 72], 3) == 7\nassert solution.subarraysWithKDistinct([81, 99, 72, 20, 45, 23, 98, 33, 2, 47], 2) == 9\nassert solution.subarraysWithKDistinct([75, 25, 21, 91], 3) == 2\nassert solution.subarraysWithKDistinct([32, 8], 2) == 1\nassert solution.subarraysWithKDistinct([1, 65, 3, 15, 32, 19, 52, 66], 4) == 5\nassert solution.subarraysWithKDistinct([76, 94, 5, 63, 42, 88, 29, 39, 70, 62], 5) == 6\nassert solution.subarraysWithKDistinct([38, 68, 94, 19, 62, 84, 24, 29, 90], 5) == 5\nassert solution.subarraysWithKDistinct([81, 45, 13, 54, 44, 69, 18, 91, 23, 17], 8) == 3\nassert solution.subarraysWithKDistinct([12, 97, 66], 3) == 1\nassert solution.subarraysWithKDistinct([79, 74], 2) == 1\nassert solution.subarraysWithKDistinct([1, 56, 80, 84, 36], 1) == 5\nassert solution.subarraysWithKDistinct([87, 12, 98, 20, 47, 93, 31, 90, 37, 64], 2) == 9\nassert solution.subarraysWithKDistinct([30, 7, 71, 27, 38, 86, 67, 76], 3) == 6\nassert solution.subarraysWithKDistinct([85, 2, 94, 74, 71, 4, 16], 6) == 2\nassert solution.subarraysWithKDistinct([100, 45, 66, 16, 34, 99, 81, 7], 4) == 5\nassert solution.subarraysWithKDistinct([97, 11, 1, 81, 45, 76, 38, 68, 39], 4) == 6\nassert solution.subarraysWithKDistinct([56, 4, 54, 19, 1], 5) == 1\nassert solution.subarraysWithKDistinct([59, 79, 18, 16], 2) == 3\nassert solution.subarraysWithKDistinct([9, 39, 28], 3) == 1\nassert solution.subarraysWithKDistinct([5, 91, 67, 25], 4) == 1\nassert solution.subarraysWithKDistinct([69, 22, 31, 63, 10, 93, 40], 6) == 2\nassert solution.subarraysWithKDistinct([49, 46, 55, 27, 52, 60, 37, 80, 30, 69], 9) == 2\nassert solution.subarraysWithKDistinct([54, 81, 47, 62, 13, 24, 100, 79], 5) == 4\nassert solution.subarraysWithKDistinct([9, 10, 18, 32, 97, 38, 86], 2) == 6\nassert solution.subarraysWithKDistinct([34, 23, 83, 52, 56, 97, 38, 45, 58], 5) == 5\nassert solution.subarraysWithKDistinct([80, 7, 58, 56, 86, 36, 62, 20, 24, 32], 9) == 2\nassert solution.subarraysWithKDistinct([46, 62, 98, 29, 83, 73, 74, 53], 6) == 3\nassert solution.subarraysWithKDistinct([85, 84, 30, 34], 1) == 4\nassert solution.subarraysWithKDistinct([3, 68, 43, 70, 35, 61], 6) == 1\nassert solution.subarraysWithKDistinct([61, 12, 19, 91, 96, 72, 62, 81, 89], 9) == 1\nassert solution.subarraysWithKDistinct([98, 90, 44, 21, 30, 94, 85, 52], 2) == 7\nassert solution.subarraysWithKDistinct([61, 42, 83, 48, 26, 84, 88, 31], 5) == 4\nassert solution.subarraysWithKDistinct([59, 93, 6, 85, 5, 99, 68, 43], 1) == 8\nassert solution.subarraysWithKDistinct([19, 68, 67, 5, 76, 18, 75, 100, 66], 6) == 4\nassert solution.subarraysWithKDistinct([8, 12], 1) == 2\nassert solution.subarraysWithKDistinct([71, 23, 63, 87, 17], 1) == 5\nassert solution.subarraysWithKDistinct([58, 42], 1) == 2\nassert solution.subarraysWithKDistinct([59, 100, 65, 54], 2) == 3\nassert solution.subarraysWithKDistinct([28, 76, 43, 75], 1) == 4\nassert solution.subarraysWithKDistinct([36, 24, 12], 3) == 1\nassert solution.subarraysWithKDistinct([23, 63], 2) == 1\nassert solution.subarraysWithKDistinct([90, 41, 20, 63, 74, 7, 99, 58, 82], 2) == 8\nassert solution.subarraysWithKDistinct([35, 23, 56, 87, 74, 36, 84, 12, 16, 67], 9) == 2\nassert solution.subarraysWithKDistinct([50, 8, 83, 72, 6, 90, 77, 66], 2) == 7\nassert solution.subarraysWithKDistinct([93, 51, 43, 52], 1) == 4\nassert solution.subarraysWithKDistinct([17, 22, 8, 19, 36], 3) == 3\nassert solution.subarraysWithKDistinct([67, 96, 71, 57, 12], 4) == 2\nassert solution.subarraysWithKDistinct([74, 56, 80, 88, 25, 4, 44, 2, 20, 96], 8) == 3\nassert solution.subarraysWithKDistinct([26, 76, 33, 93], 1) == 4\nassert solution.subarraysWithKDistinct([78, 47, 87, 100, 98, 31, 52, 17, 38, 41], 5) == 6\nassert solution.subarraysWithKDistinct([13, 25], 2) == 1\nassert solution.subarraysWithKDistinct([88, 39, 23, 51, 79, 61, 46, 54], 7) == 2\nassert solution.subarraysWithKDistinct([26, 62, 86, 92, 18, 12, 19, 14, 33, 40], 8) == 3\nassert solution.subarraysWithKDistinct([37, 68, 100, 71, 16, 17, 5], 6) == 2\nassert solution.subarraysWithKDistinct([23, 24, 88, 58, 67, 63, 100, 29, 59], 5) == 5\nassert solution.subarraysWithKDistinct([97, 76, 19, 47, 77], 4) == 2\nassert solution.subarraysWithKDistinct([18, 79, 51, 90, 25, 28, 16], 7) == 1\nassert solution.subarraysWithKDistinct([58, 50, 92, 28, 48, 87, 43, 59], 8) == 1\nassert solution.subarraysWithKDistinct([81, 26, 74, 66, 67, 80, 37, 56], 2) == 7\nassert solution.subarraysWithKDistinct([56, 97, 88, 90, 51, 68, 25, 10], 4) == 5\nassert solution.subarraysWithKDistinct([13, 72, 14, 6, 9, 15, 95], 2) == 6\nassert solution.subarraysWithKDistinct([81, 49, 15, 8, 79], 1) == 5\nassert solution.subarraysWithKDistinct([83, 34, 84, 96], 4) == 1\nassert solution.subarraysWithKDistinct([75, 83, 35], 1) == 3\nassert solution.subarraysWithKDistinct([15, 89, 27, 87, 44, 9, 52, 45], 1) == 8\nassert solution.subarraysWithKDistinct([16, 12, 76, 72, 79, 65], 4) == 3\nassert solution.subarraysWithKDistinct([21, 77, 2, 68, 53], 5) == 1\nassert solution.subarraysWithKDistinct([83, 60, 59, 40, 5, 31], 4) == 3\nassert solution.subarraysWithKDistinct([41, 100, 29], 3) == 1\nassert solution.subarraysWithKDistinct([23, 92, 21, 74, 31], 3) == 3\nassert solution.subarraysWithKDistinct([55, 52, 87], 1) == 3\nassert solution.subarraysWithKDistinct([20, 98, 99, 65, 46, 18, 83, 53], 3) == 6\nassert solution.subarraysWithKDistinct([20, 92, 66, 45, 99], 3) == 3\nassert solution.subarraysWithKDistinct([80, 64, 41, 89], 1) == 4\nassert solution.subarraysWithKDistinct([79, 2, 44, 35, 37, 36, 71, 14, 11, 51], 1) == 10\nassert solution.subarraysWithKDistinct([28, 48, 26, 45, 62, 55, 2, 50, 86, 31], 3) == 8\nassert solution.subarraysWithKDistinct([33, 80, 35, 39, 72, 76, 48], 6) == 2\nassert solution.subarraysWithKDistinct([14, 9, 80, 74, 28, 91, 99, 16, 75, 42], 10) == 1\nassert solution.subarraysWithKDistinct([42, 24, 99, 12, 76, 25, 33, 100, 54, 63], 1) == 10",
  "inefficient_solution": "class Solution:\n    def subarraysWithKDistinct(self, nums, k):\n        def f(k):\n            pos = [0] * len(nums) * 1000  # allocate too much memory\n            cnt = {}  # use dictionary instead of Counter\n            j = 0\n            for i, x in enumerate(nums):\n                if x not in cnt:\n                    cnt[x] = 0\n                cnt[x] += 1\n                while len(cnt) > k:\n                    cnt[nums[j]] -= 1\n                    if cnt[nums[j]] == 0:\n                        cnt.pop(nums[j])\n                    j += 1\n                pos[i * 1000] = j * 1000  # store position with a large offset\n            return pos\n\n        return sum(a - b for a, b in zip(f(k - 1), f(k)))",
  "is_python": true
}