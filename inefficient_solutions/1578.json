{
  "problem_idx": 1578,
  "task_name": "Minimum Time to Make Rope Colorful",
  "markdown_description": "\nAlice has `n` balloons arranged on a rope. You are given a **0-indexed** string `colors` where `colors[i]` is the color of the `ith` balloon.\n\n\nAlice wants the rope to be **colorful**. She does not want **two consecutive balloons** to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it **colorful**. You are given a **0-indexed** integer array `neededTime` where `neededTime[i]` is the time (in seconds) that Bob needs to remove the `ith` balloon from the rope.\n\n\nReturn *the **minimum time** Bob needs to make the rope **colorful***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1578.Minimum%20Time%20to%20Make%20Rope%20Colorful/images/ballon1.jpg)\n\n```\n\n**Input:** colors = \"abaac\", neededTime = [1,2,3,4,5]\n**Output:** 3\n**Explanation:** In the above image, 'a' is blue, 'b' is red, and 'c' is green.\nBob can remove the blue balloon at index 2. This takes 3 seconds.\nThere are no longer two consecutive balloons of the same color. Total time = 3.\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1578.Minimum%20Time%20to%20Make%20Rope%20Colorful/images/balloon2.jpg)\n\n```\n\n**Input:** colors = \"abc\", neededTime = [1,2,3]\n**Output:** 0\n**Explanation:** The rope is already colorful. Bob does not need to remove any balloons from the rope.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1578.Minimum%20Time%20to%20Make%20Rope%20Colorful/images/balloon3.jpg)\n\n```\n\n**Input:** colors = \"aabaa\", neededTime = [1,2,3,4,1]\n**Output:** 2\n**Explanation:** Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.\nThere are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == colors.length == neededTime.length`\n* `1 <= n <= 105`\n* `1 <= neededTime[i] <= 104`\n* `colors` contains only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minCost(self, colors: str, neededTime: List[int]) -> int:\n        ans = i = 0\n        n = len(colors)\n        while i < n:\n            j = i\n            s = mx = 0\n            while j < n and colors[j] == colors[i]:\n                s += neededTime[j]\n                if mx < neededTime[j]:\n                    mx = neededTime[j]\n                j += 1\n            if j - i > 1:\n                ans += s - mx\n            i = j\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minCost(self, colors: str, neededTime: List[int]) -> int:\n        ans = i = 0\n        n = len(colors)\n        while i < n:\n            j = i\n            s = mx = 0\n            while j < n and colors[j] == colors[i]:\n                s += neededTime[j]\n                if mx < neededTime[j]:\n                    mx = neededTime[j]\n                j += 1\n            if j - i > 1:\n                ans += s - mx\n            i = j\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    colors_length = random.randint(1, 10)\n    \n    # Generate random colors string\n    colors = \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=colors_length))\n    \n    # Generate a list of neededTime\n    neededTime = [random.randint(1, 10001) for _ in range(colors_length)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCost(colors, neededTime)\n\n    return colors, neededTime, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        colors, neededTime, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCost(colors, neededTime) == expected_result\n        print(f\"assert solution.minCost(\\\"{colors}\\\", {neededTime}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCost(\\\"{colors}\\\", {neededTime}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minCost(\"yn\", [5247, 2046]) == 0\nassert solution.minCost(\"y\", [4275]) == 0\nassert solution.minCost(\"ugwfrk\", [9442, 9525, 5708, 9605, 6650, 2470]) == 0\nassert solution.minCost(\"k\", [5998]) == 0\nassert solution.minCost(\"dyfftebtu\", [1526, 4004, 4960, 7175, 6716, 2609, 3844, 3972, 3812]) == 4960\nassert solution.minCost(\"plbuebi\", [5058, 4619, 5642, 2643, 8666, 5765, 2461]) == 0\nassert solution.minCost(\"lhibtykkgg\", [2520, 5072, 8847, 595, 3837, 559, 9613, 7904, 926, 6971]) == 8830\nassert solution.minCost(\"cen\", [3630, 3241, 5932]) == 0\nassert solution.minCost(\"yvugizzir\", [4863, 4730, 8198, 4852, 4133, 4877, 8438, 6990, 5940]) == 4877\nassert solution.minCost(\"ddnhzqzxyt\", [6284, 1827, 5647, 7034, 7302, 4224, 9313, 2137, 7891, 1327]) == 1827\nassert solution.minCost(\"w\", [4365]) == 0\nassert solution.minCost(\"ixppfwxrf\", [7418, 9759, 3703, 8952, 5231, 2146, 7091, 9901, 8996]) == 3703\nassert solution.minCost(\"latkjkfwe\", [7882, 3172, 416, 6371, 6041, 9612, 5985, 5104, 383]) == 0\nassert solution.minCost(\"vf\", [5153, 8186]) == 0\nassert solution.minCost(\"n\", [5079]) == 0\nassert solution.minCost(\"qei\", [8744, 5035, 9274]) == 0\nassert solution.minCost(\"rwwsoxig\", [1816, 2905, 4905, 8788, 5731, 3522, 6893, 7789]) == 2905\nassert solution.minCost(\"mmbb\", [2988, 9748, 9175, 2209]) == 5197\nassert solution.minCost(\"zunmxbrep\", [9466, 2273, 7198, 9595, 7200, 9560, 9023, 2930, 7219]) == 0\nassert solution.minCost(\"cewkygno\", [9325, 3023, 1078, 7042, 7102, 2652, 1623, 2887]) == 0\nassert solution.minCost(\"vyfbazrgs\", [2881, 9243, 8937, 3896, 6758, 6321, 5500, 5217, 9928]) == 0\nassert solution.minCost(\"vbbfjv\", [3076, 1455, 1491, 2665, 910, 4154]) == 1455\nassert solution.minCost(\"mmyzwoik\", [9135, 3312, 6583, 6010, 1734, 9620, 2822, 2287]) == 3312\nassert solution.minCost(\"riny\", [3087, 214, 7683, 3881]) == 0\nassert solution.minCost(\"dpetxefb\", [1023, 6344, 8238, 816, 7383, 3283, 4117, 9042]) == 0\nassert solution.minCost(\"hmd\", [6218, 7238, 5162]) == 0\nassert solution.minCost(\"rmdbej\", [8604, 3040, 2570, 9621, 8657, 5466]) == 0\nassert solution.minCost(\"omp\", [6608, 8003, 3012]) == 0\nassert solution.minCost(\"rvdz\", [7314, 2485, 7692, 7498]) == 0\nassert solution.minCost(\"waslbumm\", [3420, 955, 3408, 2236, 297, 429, 9615, 5407]) == 5407\nassert solution.minCost(\"eanvewhow\", [7567, 9423, 5083, 5675, 3309, 1370, 625, 839, 2681]) == 0\nassert solution.minCost(\"xtevtgivkm\", [5569, 3540, 7306, 645, 3922, 6224, 8370, 2424, 9733, 4183]) == 0\nassert solution.minCost(\"exakvepw\", [1195, 5911, 3706, 2692, 8597, 562, 4899, 8190]) == 0\nassert solution.minCost(\"jpdmtltyz\", [7921, 8290, 729, 9930, 8327, 9499, 149, 7721, 3808]) == 0\nassert solution.minCost(\"qur\", [5163, 6168, 1427]) == 0\nassert solution.minCost(\"qxq\", [4342, 6180, 393]) == 0\nassert solution.minCost(\"uczsg\", [8919, 356, 9908, 8081, 1437]) == 0\nassert solution.minCost(\"zrxw\", [744, 686, 3575, 1741]) == 0\nassert solution.minCost(\"wuqqjmc\", [1010, 7779, 6916, 2403, 3741, 2747, 1065]) == 2403\nassert solution.minCost(\"dhq\", [7652, 9984, 5672]) == 0\nassert solution.minCost(\"v\", [920]) == 0\nassert solution.minCost(\"zxkh\", [6829, 6953, 4218, 6551]) == 0\nassert solution.minCost(\"h\", [6984]) == 0\nassert solution.minCost(\"qntmmh\", [8622, 9028, 5760, 1427, 2802, 8338]) == 1427\nassert solution.minCost(\"irdxf\", [6062, 5701, 3252, 1690, 5863]) == 0\nassert solution.minCost(\"l\", [1114]) == 0\nassert solution.minCost(\"ongwl\", [4123, 677, 6294, 1657, 4249]) == 0\nassert solution.minCost(\"bsizhr\", [6796, 2389, 8561, 8917, 2097, 8347]) == 0\nassert solution.minCost(\"kwjgqbz\", [3193, 3297, 9680, 8286, 5990, 9206, 7042]) == 0\nassert solution.minCost(\"wx\", [4016, 9893]) == 0\nassert solution.minCost(\"ylphdwviqx\", [6848, 226, 4880, 9451, 1881, 3624, 7799, 2823, 5837, 4466]) == 0\nassert solution.minCost(\"ezs\", [7991, 9207, 5007]) == 0\nassert solution.minCost(\"jtgr\", [1013, 4311, 4669, 9802]) == 0\nassert solution.minCost(\"njfysucud\", [602, 7216, 3533, 8020, 560, 6318, 745, 6490, 9251]) == 0\nassert solution.minCost(\"lqqjy\", [1618, 2444, 5866, 3892, 167]) == 2444\nassert solution.minCost(\"zejth\", [2262, 5067, 9910, 3315, 609]) == 0\nassert solution.minCost(\"xowvsmw\", [7712, 820, 5037, 745, 1901, 3816, 7867]) == 0\nassert solution.minCost(\"tihwc\", [1362, 387, 2989, 9031, 5377]) == 0\nassert solution.minCost(\"phinack\", [2724, 2439, 7693, 4387, 4364, 800, 9122]) == 0\nassert solution.minCost(\"ce\", [8736, 7137]) == 0\nassert solution.minCost(\"zzmccpdmto\", [3900, 524, 2311, 484, 325, 6472, 7582, 1980, 5431, 6700]) == 849\nassert solution.minCost(\"yxjmumk\", [7823, 9100, 9514, 5299, 6773, 1759, 4098]) == 0\nassert solution.minCost(\"mdqpgz\", [8729, 8265, 16, 9811, 1059, 9836]) == 0\nassert solution.minCost(\"zlkber\", [6197, 1749, 9912, 9202, 36, 2099]) == 0\nassert solution.minCost(\"bnbutazw\", [6656, 6066, 348, 9535, 1238, 9388, 2911, 6229]) == 0\nassert solution.minCost(\"ndpgkurtt\", [4443, 3737, 6340, 7684, 1654, 2008, 8653, 4932, 1846]) == 1846\nassert solution.minCost(\"co\", [4276, 984]) == 0\nassert solution.minCost(\"lgcr\", [2440, 5055, 3195, 4728]) == 0\nassert solution.minCost(\"odupdelzbt\", [5013, 5633, 6199, 1029, 2804, 3694, 2046, 1426, 6867, 7401]) == 0\nassert solution.minCost(\"ecvaqi\", [4330, 4387, 2960, 1441, 6179, 1213]) == 0\nassert solution.minCost(\"eburjj\", [1873, 7541, 4211, 8736, 7306, 8545]) == 7306\nassert solution.minCost(\"u\", [7060]) == 0\nassert solution.minCost(\"vpqlihwxgf\", [2283, 7660, 2362, 3545, 7319, 1612, 303, 2515, 1063, 1371]) == 0\nassert solution.minCost(\"pnzyajhc\", [3870, 1059, 8584, 1623, 6272, 3292, 8255, 2416]) == 0\nassert solution.minCost(\"lee\", [6904, 1045, 3704]) == 1045\nassert solution.minCost(\"idurrbkjhc\", [4697, 3022, 6866, 992, 8107, 2120, 6485, 6197, 3874, 9325]) == 992\nassert solution.minCost(\"niqlyamld\", [7046, 8649, 9473, 9835, 1408, 7869, 206, 9323, 6250]) == 0\nassert solution.minCost(\"tyuksos\", [3127, 6271, 1041, 1677, 3462, 145, 3312]) == 0\nassert solution.minCost(\"q\", [9162]) == 0\nassert solution.minCost(\"spsxxzp\", [6098, 8822, 5809, 8690, 1239, 3213, 3596]) == 1239\nassert solution.minCost(\"zm\", [144, 676]) == 0\nassert solution.minCost(\"pft\", [4999, 8049, 9730]) == 0\nassert solution.minCost(\"axronp\", [3493, 8009, 1626, 7040, 234, 4098]) == 0\nassert solution.minCost(\"jynpfjeqj\", [1719, 4431, 4573, 2281, 5884, 492, 7068, 7360, 8835]) == 0\nassert solution.minCost(\"ydiwwx\", [6786, 5774, 7564, 2783, 2211, 5427]) == 2211\nassert solution.minCost(\"lj\", [740, 1384]) == 0\nassert solution.minCost(\"jbark\", [5408, 5851, 8584, 8836, 2910]) == 0\nassert solution.minCost(\"kedlyeshs\", [1693, 510, 1810, 4670, 2740, 280, 7898, 6711, 7884]) == 0\nassert solution.minCost(\"p\", [2591]) == 0\nassert solution.minCost(\"dgccojiygr\", [6278, 2476, 4765, 5332, 6695, 6118, 7421, 8644, 7417, 4068]) == 4765\nassert solution.minCost(\"ifa\", [4936, 1110, 9556]) == 0\nassert solution.minCost(\"cosfneac\", [8991, 5922, 4630, 5277, 69, 3325, 6318, 407]) == 0\nassert solution.minCost(\"thlo\", [5455, 1043, 2142, 8528]) == 0\nassert solution.minCost(\"kesakv\", [47, 3804, 340, 1577, 3254, 8086]) == 0\nassert solution.minCost(\"b\", [3135]) == 0\nassert solution.minCost(\"cqxjl\", [9686, 6147, 3530, 6936, 3944]) == 0\nassert solution.minCost(\"qlkcdgk\", [5199, 6336, 4467, 2497, 9149, 4490, 8831]) == 0\nassert solution.minCost(\"oboercu\", [7574, 5313, 1310, 2684, 2715, 5891, 6252]) == 0\nassert solution.minCost(\"eksofhenxz\", [8803, 9828, 9550, 5687, 3723, 1624, 6683, 4504, 9331, 7356]) == 0\nassert solution.minCost(\"bcmxx\", [4127, 3637, 4795, 6925, 2592]) == 2592",
  "inefficient_solution": "class Solution:\n    def minCost(self, colors: str, neededTime: List[int]) -> int:\n        ans = i = 0\n        n = len(colors)\n        while i < n:\n            j = i\n            s = mx = []\n            while j < n and colors[j] == colors[i]:\n                s.append(neededTime[j])\n                if neededTime[j] > mx:\n                    mx = neededTime[j]\n                j += 1\n            if j - i > 1:\n                for k in range(len(s) - 1):\n                    if s[k] != mx:\n                        ans += s[k]\n            i = j\n        return ans",
  "is_python": true
}