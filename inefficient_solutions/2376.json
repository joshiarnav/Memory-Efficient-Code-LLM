{
  "problem_idx": 2376,
  "task_name": "Count Special Integers",
  "markdown_description": "\nWe call a positive integer **special** if all of its digits are **distinct**.\n\n\nGiven a **positive** integer `n`, return *the number of special integers that belong to the interval* `[1, n]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 20\n**Output:** 19\n**Explanation:** All the integers from 1 to 20, except 11, are special. Thus, there are 19 special integers.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 5\n**Output:** 5\n**Explanation:** All the integers from 1 to 5 are special.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 135\n**Output:** 110\n**Explanation:** There are 110 integers from 1 to 135 that are special.\nSome of the integers that are not special are: 22, 114, and 131.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 2 * 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def countSpecialNumbers(self, n: int) -> int:\n        def A(m, n):\n            return 1 if n == 0 else A(m, n - 1) * (m - n + 1)\n\n        vis = [False] * 10\n        ans = 0\n        digits = [int(c) for c in str(n)[::-1]]\n        m = len(digits)\n        for i in range(1, m):\n            ans += 9 * A(9, i - 1)\n        for i in range(m - 1, -1, -1):\n            v = digits[i]\n            j = 1 if i == m - 1 else 0\n            while j < v:\n                if not vis[j]:\n                    ans += A(10 - (m - i), i)\n                j += 1\n            if vis[v]:\n                break\n            vis[v] = True\n            if i == 0:\n                ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countSpecialNumbers(self, n: int) -> int:\n        def A(m, n):\n            return 1 if n == 0 else A(m, n - 1) * (m - n + 1)\n\n        vis = [False] * 10\n        ans = 0\n        digits = [int(c) for c in str(n)[::-1]]\n        m = len(digits)\n        for i in range(1, m):\n            ans += 9 * A(9, i - 1)\n        for i in range(m - 1, -1, -1):\n            v = digits[i]\n            j = 1 if i == m - 1 else 0\n            while j < v:\n                if not vis[j]:\n                    ans += A(10 - (m - i), i)\n                j += 1\n            if vis[v]:\n                break\n            vis[v] = True\n            if i == 0:\n                ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random positive integer n\n    n = random.randint(1, 1001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countSpecialNumbers(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countSpecialNumbers(n) == expected_result\n        test_case_generator_results.append(f\"assert solution.countSpecialNumbers({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countSpecialNumbers(230) == 179\nassert solution.countSpecialNumbers(301) == 235\nassert solution.countSpecialNumbers(759) == 570\nassert solution.countSpecialNumbers(676) == 504\nassert solution.countSpecialNumbers(466) == 351\nassert solution.countSpecialNumbers(496) == 376\nassert solution.countSpecialNumbers(886) == 658\nassert solution.countSpecialNumbers(21) == 20\nassert solution.countSpecialNumbers(840) == 627\nassert solution.countSpecialNumbers(42) == 39\nassert solution.countSpecialNumbers(122) == 99\nassert solution.countSpecialNumbers(38) == 35\nassert solution.countSpecialNumbers(980) == 731\nassert solution.countSpecialNumbers(996) == 738\nassert solution.countSpecialNumbers(814) == 606\nassert solution.countSpecialNumbers(663) == 498\nassert solution.countSpecialNumbers(307) == 240\nassert solution.countSpecialNumbers(480) == 363\nassert solution.countSpecialNumbers(135) == 110\nassert solution.countSpecialNumbers(528) == 401\nassert solution.countSpecialNumbers(40) == 37\nassert solution.countSpecialNumbers(626) == 471\nassert solution.countSpecialNumbers(298) == 234\nassert solution.countSpecialNumbers(794) == 591\nassert solution.countSpecialNumbers(576) == 432\nassert solution.countSpecialNumbers(435) == 334\nassert solution.countSpecialNumbers(523) == 397\nassert solution.countSpecialNumbers(694) == 519\nassert solution.countSpecialNumbers(454) == 342\nassert solution.countSpecialNumbers(149) == 122\nassert solution.countSpecialNumbers(516) == 391\nassert solution.countSpecialNumbers(756) == 568\nassert solution.countSpecialNumbers(186) == 152\nassert solution.countSpecialNumbers(562) == 421\nassert solution.countSpecialNumbers(843) == 630\nassert solution.countSpecialNumbers(156) == 127\nassert solution.countSpecialNumbers(453) == 342\nassert solution.countSpecialNumbers(894) == 663\nassert solution.countSpecialNumbers(47) == 43\nassert solution.countSpecialNumbers(430) == 331\nassert solution.countSpecialNumbers(924) == 686\nassert solution.countSpecialNumbers(607) == 456\nassert solution.countSpecialNumbers(336) == 258\nassert solution.countSpecialNumbers(588) == 441\nassert solution.countSpecialNumbers(762) == 573\nassert solution.countSpecialNumbers(401) == 307\nassert solution.countSpecialNumbers(466) == 351\nassert solution.countSpecialNumbers(575) == 431\nassert solution.countSpecialNumbers(197) == 161\nassert solution.countSpecialNumbers(458) == 345\nassert solution.countSpecialNumbers(580) == 435\nassert solution.countSpecialNumbers(328) == 257\nassert solution.countSpecialNumbers(394) == 302\nassert solution.countSpecialNumbers(401) == 307\nassert solution.countSpecialNumbers(663) == 498\nassert solution.countSpecialNumbers(989) == 738\nassert solution.countSpecialNumbers(779) == 578\nassert solution.countSpecialNumbers(626) == 471\nassert solution.countSpecialNumbers(202) == 163\nassert solution.countSpecialNumbers(846) == 632\nassert solution.countSpecialNumbers(390) == 299\nassert solution.countSpecialNumbers(664) == 498\nassert solution.countSpecialNumbers(576) == 432\nassert solution.countSpecialNumbers(252) == 196\nassert solution.countSpecialNumbers(884) == 658\nassert solution.countSpecialNumbers(74) == 68\nassert solution.countSpecialNumbers(462) == 349\nassert solution.countSpecialNumbers(934) == 694\nassert solution.countSpecialNumbers(341) == 260\nassert solution.countSpecialNumbers(704) == 526\nassert solution.countSpecialNumbers(555) == 418\nassert solution.countSpecialNumbers(588) == 441\nassert solution.countSpecialNumbers(368) == 281\nassert solution.countSpecialNumbers(835) == 623\nassert solution.countSpecialNumbers(947) == 705\nassert solution.countSpecialNumbers(443) == 338\nassert solution.countSpecialNumbers(191) == 155\nassert solution.countSpecialNumbers(1000) == 738\nassert solution.countSpecialNumbers(327) == 256\nassert solution.countSpecialNumbers(336) == 258\nassert solution.countSpecialNumbers(605) == 455\nassert solution.countSpecialNumbers(243) == 189\nassert solution.countSpecialNumbers(417) == 320\nassert solution.countSpecialNumbers(335) == 258\nassert solution.countSpecialNumbers(806) == 600\nassert solution.countSpecialNumbers(540) == 411\nassert solution.countSpecialNumbers(327) == 256\nassert solution.countSpecialNumbers(606) == 455\nassert solution.countSpecialNumbers(766) == 576\nassert solution.countSpecialNumbers(17) == 16\nassert solution.countSpecialNumbers(305) == 238\nassert solution.countSpecialNumbers(766) == 576\nassert solution.countSpecialNumbers(939) == 698\nassert solution.countSpecialNumbers(931) == 692\nassert solution.countSpecialNumbers(850) == 635\nassert solution.countSpecialNumbers(496) == 376\nassert solution.countSpecialNumbers(402) == 308\nassert solution.countSpecialNumbers(460) == 347\nassert solution.countSpecialNumbers(139) == 114\nassert solution.countSpecialNumbers(265) == 207",
  "inefficient_solution": "class Solution:\n    def countSpecialNumbers(self, n: int) -> int:\n        def A(m, n):\n            return 1 if n == 0 else A(m, n - 1) * (m - n + 1)\n\n        vis = [False] * 10\n        ans = 0\n\n        # Store all numbers from 1 to n\n        num_list = [str(i) for i in range(1, n+1)]\n\n        digits = [int(c) for c in str(n)[::-1]]\n        m = len(digits)\n        for i in range(1, m):\n            ans += 9 * A(9, i - 1)\n\n        for i in range(m - 1, -1, -1):\n            v = digits[i]\n            j = 1 if i == m - 1 else 0\n            while j < v:\n                if not vis[j]:\n                    for num in num_list:\n                        if len(num) == i and int(num[-1]) == j:\n                            ans += 1\n                j += 1\n            if vis[v]:\n                break\n            vis[v] = True\n            if i == 0:\n                for num in num_list:\n                    if len(num) == 0:\n                        ans += 1\n        return ans",
  "is_python": true
}