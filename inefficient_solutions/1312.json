{
  "problem_idx": 1312,
  "task_name": "Minimum Insertion Steps to Make a String Palindrome",
  "markdown_description": "\nGiven a string `s`. In one step you can insert any character at any index of the string.\n\n\nReturn *the minimum number of steps* to make `s`\u00a0palindrome.\n\n\nA\u00a0**Palindrome String**\u00a0is one that reads the same backward as well as forward.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"zzazz\"\n**Output:** 0\n**Explanation:** The string \"zzazz\" is already palindrome we do not need any insertions.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"mbadm\"\n**Output:** 2\n**Explanation:** String can be \"mbdadbm\" or \"mdbabdm\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"leetcode\"\n**Output:** 5\n**Explanation:** Inserting 5 characters the string becomes \"leetcodocteel\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 500`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1]\n                else:\n                    f[i][j] = min(f[i + 1][j], f[i][j - 1]) + 1\n        return f[0][-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minInsertions(self, s: str) -> int:\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1]\n                else:\n                    f[i][j] = min(f[i + 1][j], f[i][j - 1]) + 1\n        return f[0][-1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string of lowercase English letters\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minInsertions(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minInsertions(s) == expected_result\n        print(f\"assert solution.minInsertions(\\'{s}\\') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minInsertions(\\'{s}\\') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minInsertions('o') == 0\nassert solution.minInsertions('eqxnaybit') == 8\nassert solution.minInsertions('vefwo') == 4\nassert solution.minInsertions('wakkmynjr') == 7\nassert solution.minInsertions('defqyw') == 5\nassert solution.minInsertions('gq') == 1\nassert solution.minInsertions('jfwauikaah') == 7\nassert solution.minInsertions('ez') == 1\nassert solution.minInsertions('nlkfdlefm') == 6\nassert solution.minInsertions('guf') == 2\nassert solution.minInsertions('timblxkg') == 7\nassert solution.minInsertions('ubmjmvoii') == 6\nassert solution.minInsertions('eapmftx') == 6\nassert solution.minInsertions('sfuxvropgt') == 9\nassert solution.minInsertions('ctturmtt') == 3\nassert solution.minInsertions('yvfudwgh') == 7\nassert solution.minInsertions('ylxnoftq') == 7\nassert solution.minInsertions('chjw') == 3\nassert solution.minInsertions('dmhbci') == 5\nassert solution.minInsertions('ymzjbql') == 6\nassert solution.minInsertions('lmydumk') == 4\nassert solution.minInsertions('uhxq') == 3\nassert solution.minInsertions('qfmpr') == 4\nassert solution.minInsertions('pacwkntx') == 7\nassert solution.minInsertions('idyexi') == 3\nassert solution.minInsertions('jr') == 1\nassert solution.minInsertions('qvcutmsp') == 7\nassert solution.minInsertions('tvogjt') == 3\nassert solution.minInsertions('vptmv') == 2\nassert solution.minInsertions('sb') == 1\nassert solution.minInsertions('dviecsurwv') == 7\nassert solution.minInsertions('bvnzxvrnuw') == 7\nassert solution.minInsertions('cppuek') == 4\nassert solution.minInsertions('oysdvk') == 5\nassert solution.minInsertions('sdkivpp') == 5\nassert solution.minInsertions('jmzmjsgm') == 3\nassert solution.minInsertions('hqobl') == 4\nassert solution.minInsertions('osntidssz') == 6\nassert solution.minInsertions('lrdzcuh') == 6\nassert solution.minInsertions('nakesli') == 6\nassert solution.minInsertions('dfyzap') == 5\nassert solution.minInsertions('dwpej') == 4\nassert solution.minInsertions('xsdruwl') == 6\nassert solution.minInsertions('wtks') == 3\nassert solution.minInsertions('najswi') == 5\nassert solution.minInsertions('gmxlphks') == 7\nassert solution.minInsertions('mehqlhqur') == 6\nassert solution.minInsertions('mu') == 1\nassert solution.minInsertions('iawn') == 3\nassert solution.minInsertions('erx') == 2\nassert solution.minInsertions('tdwnqpy') == 6\nassert solution.minInsertions('q') == 0\nassert solution.minInsertions('ft') == 1\nassert solution.minInsertions('xbsei') == 4\nassert solution.minInsertions('tibmax') == 5\nassert solution.minInsertions('qq') == 0\nassert solution.minInsertions('mgut') == 3\nassert solution.minInsertions('egucbalb') == 5\nassert solution.minInsertions('i') == 0\nassert solution.minInsertions('npcytic') == 4\nassert solution.minInsertions('ohggrlilus') == 7\nassert solution.minInsertions('m') == 0\nassert solution.minInsertions('ryfplb') == 5\nassert solution.minInsertions('izwmjk') == 5\nassert solution.minInsertions('g') == 0\nassert solution.minInsertions('ohmx') == 3\nassert solution.minInsertions('k') == 0\nassert solution.minInsertions('njiuyew') == 6\nassert solution.minInsertions('sassm') == 2\nassert solution.minInsertions('becff') == 3\nassert solution.minInsertions('qcmgzkhql') == 6\nassert solution.minInsertions('ojetwvhthc') == 7\nassert solution.minInsertions('qipjyotj') == 5\nassert solution.minInsertions('xbrhihqb') == 3\nassert solution.minInsertions('yvyflga') == 4\nassert solution.minInsertions('mkyiqmegz') == 6\nassert solution.minInsertions('ngcbjsuim') == 8\nassert solution.minInsertions('zumsv') == 4\nassert solution.minInsertions('dy') == 1\nassert solution.minInsertions('z') == 0\nassert solution.minInsertions('toiee') == 3\nassert solution.minInsertions('vbarbzimi') == 6\nassert solution.minInsertions('fzqjohk') == 6\nassert solution.minInsertions('rjds') == 3\nassert solution.minInsertions('nzzhpui') == 5\nassert solution.minInsertions('pvjpdespfv') == 5\nassert solution.minInsertions('xl') == 1\nassert solution.minInsertions('c') == 0\nassert solution.minInsertions('dnfm') == 3\nassert solution.minInsertions('ymfkr') == 4\nassert solution.minInsertions('byjsfqnw') == 7\nassert solution.minInsertions('d') == 0\nassert solution.minInsertions('oa') == 1\nassert solution.minInsertions('qhdxkbkhns') == 5\nassert solution.minInsertions('jovvxg') == 4\nassert solution.minInsertions('bnfnm') == 2\nassert solution.minInsertions('sxvtt') == 3\nassert solution.minInsertions('ypiwscdfe') == 8\nassert solution.minInsertions('gwnvqfxc') == 7\nassert solution.minInsertions('ihpow') == 4",
  "inefficient_solution": "class Solution:\n    def minInsertions(self, s: str) -> int:\n        n = len(s)\n        f = [[0] * 2*n for _ in range(2*n)]\n\n        for i in range(2*n):\n            for j in range(2*n):\n                if i == j and i < n:\n                    f[i][j] = 0\n                elif i == j and i >= n:\n                    f[i][j] = 1\n                elif i < j and i < n and j < n:\n                    f[i][j] = 1\n                elif i < j and i < n and j >= n:\n                    f[i][j] = 1\n                elif i < j and i >= n and j < n:\n                    f[i][j] = 1\n                elif i < j and i >= n and j >= n:\n                    f[i][j] = 1\n                elif i > j and i < n and j < n:\n                    f[i][j] = 0\n                elif i > j and i < n and j >= n:\n                    f[i][j] = 1\n                elif i > j and i >= n and j < n:\n                    f[i][j] = 1\n                elif i > j and i >= n and j >= n:\n                    f[i][j] = 2*n\n                elif i == j and i >= n:\n                    f[i][j] = 1\n                elif i == j and i < n:\n                    f[i][j] = 0\n\n        for k in range(1, 2*n):\n            for i in range(1, 2*n):\n                for j in range(1, 2*n - i + 1):\n                    if i + j + k == 2*n:\n                        f[i][j+k] = 0\n                    else:\n                        f[i][j+k] = 2*n\n\n        for i in range(1, 2*n):\n            for j in range(1, 2*n):\n                if i < 2*n and j < 2*n:\n                    if s[i-1] == s[2*n-j-1]:\n                        f[i][j] = f[i-1][j-1]\n                    else:\n                        f[i][j] = min(f[i-1][j], f[i][j-1]) + 1\n\n        return f[1][-1]",
  "is_python": true
}