{
  "problem_idx": 1637,
  "task_name": "Widest Vertical Area Between Two Points Containing No Points",
  "markdown_description": "\nGiven `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return*the **widest vertical area** between two points such that no points are inside the area.*\n\n\nA **vertical area** is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The **widest vertical area** is the one with the maximum width.\n\n\nNote that points **on the edge** of a vertical area **are not** considered included in the area.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1600-1699/1637.Widest%20Vertical%20Area%20Between%20Two%20Points%20Containing%20No%20Points/images/points3.png)\u200b\n\n```\n\n**Input:** points = [[8,7],[9,9],[7,4],[9,7]]\n**Output:** 1\n**Explanation:** Both the red and the blue area are optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == points.length`\n* `2 <= n <= 105`\n* `points[i].length == 2`\n* `0 <= xi, yi\u00a0<= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:\n        nums = [x for x, _ in points]\n        n = len(nums)\n        mi, mx = min(nums), max(nums)\n        bucket_size = max(1, (mx - mi) // (n - 1))\n        bucket_count = (mx - mi) // bucket_size + 1\n        buckets = [[inf, -inf] for _ in range(bucket_count)]\n        for x in nums:\n            i = (x - mi) // bucket_size\n            buckets[i][0] = min(buckets[i][0], x)\n            buckets[i][1] = max(buckets[i][1], x)\n        ans = 0\n        prev = inf\n        for curmin, curmax in buckets:\n            if curmin > curmax:\n                continue\n            ans = max(ans, curmin - prev)\n            prev = curmax\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom math import inf\n\nclass Solution:\n    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:\n        nums = [x for x, _ in points]\n        n = len(nums)\n        mi, mx = min(nums), max(nums)\n        bucket_size = max(1, (mx - mi) // (n - 1))\n        bucket_count = (mx - mi) // bucket_size + 1\n        buckets = [[inf, -inf] for _ in range(bucket_count)]\n        for x in nums:\n            i = (x - mi) // bucket_size\n            buckets[i][0] = min(buckets[i][0], x)\n            buckets[i][1] = max(buckets[i][1], x)\n        ans = 0\n        prev = inf\n        for curmin, curmax in buckets:\n            if curmin > curmax:\n                continue\n            ans = max(ans, curmin - prev)\n            prev = curmax\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random points list\n    points = []\n    num_points = random.randint(2, 10)\n    for i in range(num_points):\n        point = [random.randint(0, 10**9), random.randint(0, 10**9)]\n        points.append(point)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxWidthOfVerticalArea(points)\n\n    return points, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        points, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxWidthOfVerticalArea(points) == expected_result\n        if expected_result != 0:\n            print(f\"assert solution.maxWidthOfVerticalArea({points}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.maxWidthOfVerticalArea({points}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxWidthOfVerticalArea([[632591894, 990892987], [929039551, 580943009], [252600286, 39986905], [203664444, 771855211], [16604159, 434868976], [547041645, 596502161]]) == 296447657\nassert solution.maxWidthOfVerticalArea([[892454039, 237627563], [610719596, 779335968], [464782185, 223413428], [71535139, 221717564]]) == 393247046\nassert solution.maxWidthOfVerticalArea([[716197003, 311034218], [464393829, 819711230]]) == 251803174\nassert solution.maxWidthOfVerticalArea([[600646980, 725730456], [897920204, 711803591], [535508156, 43752941]]) == 297273224\nassert solution.maxWidthOfVerticalArea([[724657297, 356739526], [623065818, 739201855], [978076722, 739077059], [91293367, 988433454], [634783150, 199393804]]) == 531772451\nassert solution.maxWidthOfVerticalArea([[338785522, 423524987], [831390160, 472415500], [265651429, 415132267], [629416126, 892433609], [79734045, 217058127], [640360049, 239596768]]) == 290630604\nassert solution.maxWidthOfVerticalArea([[561461105, 124268784], [479351633, 330531397], [811732114, 970618377], [668486025, 876450469], [545871401, 317609336]]) == 143246089\nassert solution.maxWidthOfVerticalArea([[122938985, 608309991], [365669839, 173894880], [239006525, 561013091], [260613590, 277412490], [903378338, 29160195], [709160438, 997300858]]) == 343490599\nassert solution.maxWidthOfVerticalArea([[840838961, 618816073], [788312876, 350998755]]) == 52526085\nassert solution.maxWidthOfVerticalArea([[230437487, 653272460], [124383348, 257337296], [785859914, 610559398], [726851673, 921257637], [320870988, 940507917], [115789739, 336135635], [121690185, 935381575], [527646161, 260316151]]) == 206775173\nassert solution.maxWidthOfVerticalArea([[492342823, 525494012], [832314614, 798519343]]) == 339971791\nassert solution.maxWidthOfVerticalArea([[221165639, 367360379], [116063416, 96905530], [20209371, 139476564], [186540295, 204391089], [783197082, 793520603]]) == 562031443\nassert solution.maxWidthOfVerticalArea([[216411089, 757591236], [815869669, 651227894], [875276088, 356250639]]) == 599458580\nassert solution.maxWidthOfVerticalArea([[56722707, 572302219], [343085371, 704163405], [28921678, 153373066], [350924957, 245332116], [883388010, 380077533], [208129543, 444535887], [928318494, 102693481]]) == 532463053\nassert solution.maxWidthOfVerticalArea([[622918141, 767213429], [737562724, 467158583], [45687802, 496920128], [832136131, 349761937], [59100188, 842764002], [989716336, 656239870], [571550476, 307027714], [548698898, 801348477]]) == 489598710\nassert solution.maxWidthOfVerticalArea([[873415082, 462209198], [914636894, 222585245], [96465042, 693860427], [645135390, 93041889], [652483799, 214251359], [468723833, 239523804], [939752363, 563988522], [586346741, 664261817]]) == 372258791\nassert solution.maxWidthOfVerticalArea([[941672745, 578919956], [621887664, 342208720], [485519115, 259593616], [139409698, 104012096], [913231271, 535235307], [486828906, 788307753], [753407645, 921006570]]) == 346109417\nassert solution.maxWidthOfVerticalArea([[88796917, 133101899], [539733885, 782687062], [169987988, 600749730], [309865538, 880519434], [656562399, 562537437], [592371366, 310904491]]) == 229868347\nassert solution.maxWidthOfVerticalArea([[45628121, 480073199], [329295090, 102518599], [552319550, 475953597], [68566058, 995263187], [312073352, 445467259], [218826916, 516650522]]) == 223024460\nassert solution.maxWidthOfVerticalArea([[861941028, 656164942], [65531509, 263029039]]) == 796409519\nassert solution.maxWidthOfVerticalArea([[81977565, 184268115], [532219134, 78764954], [875392865, 231315146], [901055199, 290436555], [478973316, 369584361], [926794405, 132145358], [901236468, 985209047], [401321772, 605272723], [47893832, 975279507]]) == 343173731\nassert solution.maxWidthOfVerticalArea([[444631831, 94159884], [303490887, 988768062], [374725679, 476976382], [88052445, 749519749]]) == 215438442\nassert solution.maxWidthOfVerticalArea([[180114074, 101795426], [149983816, 447544622], [603751945, 3384643], [117362725, 890133230], [972327131, 577100250]]) == 423637871\nassert solution.maxWidthOfVerticalArea([[188849509, 75431824], [600250725, 647162870], [51067373, 825758650], [147980809, 820354215], [891527239, 197099973], [524643824, 23626007]]) == 335794315\nassert solution.maxWidthOfVerticalArea([[166553336, 125198164], [587705401, 258421880], [326930356, 176365158], [783007114, 782868621], [329153704, 789919836], [759660231, 309755788], [529837404, 792806661], [649287503, 657315701], [782156834, 7506348], [755366971, 491488337]]) == 200683700\nassert solution.maxWidthOfVerticalArea([[344990459, 499140249], [42698339, 145757149], [289225173, 933974996], [882844554, 479380278]]) == 537854095\nassert solution.maxWidthOfVerticalArea([[609624416, 788680862], [77447133, 868464076], [28583041, 469815951], [309193052, 181597567], [982952766, 4556409], [624860821, 161897372], [493385149, 472385604]]) == 358091945\nassert solution.maxWidthOfVerticalArea([[163274554, 41128657], [492883874, 443815544], [220794976, 552374253]]) == 272088898\nassert solution.maxWidthOfVerticalArea([[482601431, 650925566], [84300177, 619854277], [628075259, 812354205], [483878656, 433389911], [134457690, 197256800]]) == 348143741\nassert solution.maxWidthOfVerticalArea([[913244780, 499097628], [862928753, 119901900], [817348875, 313358538], [100168944, 373926174], [163475873, 429408016], [4281607, 401467033], [443625485, 518435026]]) == 373723390\nassert solution.maxWidthOfVerticalArea([[286359030, 176452933], [456425309, 588607962], [683436530, 812978562], [684235293, 378095172], [185453689, 23374670], [394370934, 846347560]]) == 227011221\nassert solution.maxWidthOfVerticalArea([[189876792, 674510067], [668647964, 716028970], [234559501, 251505838], [618559715, 327063484], [742583485, 347615006], [155531981, 191956792], [929714882, 10806297], [637506528, 869290284]]) == 384000214\nassert solution.maxWidthOfVerticalArea([[563024446, 433722644], [126246053, 173212109], [619731113, 376211409], [269036618, 955437527]]) == 293987828\nassert solution.maxWidthOfVerticalArea([[268212994, 236063287], [764822783, 406559501], [89877076, 205855005], [159717324, 571752576], [768609219, 449684919], [987437305, 11469973], [817802868, 89925254]]) == 496609789\nassert solution.maxWidthOfVerticalArea([[762848267, 137284397], [800612635, 872355911]]) == 37764368\nassert solution.maxWidthOfVerticalArea([[574052092, 102394944], [64483840, 373925957], [98709277, 752157694], [916052030, 67806948], [874792580, 968006944], [225446652, 617489427], [956539092, 440430054]]) == 348605440\nassert solution.maxWidthOfVerticalArea([[979632746, 531268926], [930035244, 398069732], [444331689, 891895100], [726657077, 431789742]]) == 282325388\nassert solution.maxWidthOfVerticalArea([[58666800, 821287149], [14914790, 822025562], [953717443, 229075749]]) == 895050643\nassert solution.maxWidthOfVerticalArea([[211435023, 277032559], [796025055, 12429645], [591108824, 272798051], [294680645, 555505426], [670083715, 661867468], [570234537, 893157614], [988753130, 193457637], [980723296, 472892096]]) == 275553892\nassert solution.maxWidthOfVerticalArea([[549923304, 277653618], [57447843, 424381497], [393877329, 948395448], [303645275, 55193376], [925215449, 856452020], [446105839, 955806745]]) == 375292145\nassert solution.maxWidthOfVerticalArea([[374641004, 917992252], [206237470, 673784786]]) == 168403534\nassert solution.maxWidthOfVerticalArea([[150523160, 468100768], [134640809, 541721171]]) == 15882351\nassert solution.maxWidthOfVerticalArea([[603977903, 631906462], [875007718, 843450173], [457422610, 393329448], [919136348, 932652656], [331333115, 256806410], [648944472, 815769145], [513069991, 878696385], [465235031, 8059794], [543924848, 312174266], [428055346, 89584732]]) == 226063246\nassert solution.maxWidthOfVerticalArea([[790269344, 210792682], [511988998, 786371828], [897289889, 507130908], [407635093, 198614429]]) == 278280346\nassert solution.maxWidthOfVerticalArea([[642824345, 637613264], [533966034, 357383997], [627730, 439106703], [90814147, 979507710]]) == 443151887\nassert solution.maxWidthOfVerticalArea([[626352905, 733034235], [299782114, 979408968], [682027172, 848843992], [728715789, 207102679], [144511690, 641452840], [84571200, 35035209], [853531998, 196668541], [577855639, 732008013], [882248264, 961125392]]) == 278073525\nassert solution.maxWidthOfVerticalArea([[899269621, 34735229], [721511646, 971568872], [829236415, 401581598], [479257327, 441034191], [717298139, 525174479], [914235715, 752881825]]) == 238040812\nassert solution.maxWidthOfVerticalArea([[714927769, 379671863], [632251134, 248533351], [932579302, 148980029], [332270560, 570661964], [492664497, 373592117], [500254565, 224982699]]) == 217651533\nassert solution.maxWidthOfVerticalArea([[133483171, 792221937], [717154821, 777535111], [640801942, 970629358], [241761322, 814672292], [419065987, 25388070], [191777762, 1315729], [409328330, 96694938]]) == 221735955\nassert solution.maxWidthOfVerticalArea([[153220879, 965863793], [932407802, 859371093], [739665023, 569802039]]) == 586444144\nassert solution.maxWidthOfVerticalArea([[133644189, 12697808], [997830501, 871963447], [340104602, 580409338], [267596387, 720035534], [889739878, 713815732], [573158103, 689931889], [104226466, 272650704], [167703379, 376288934], [635014076, 774142998]]) == 254725802\nassert solution.maxWidthOfVerticalArea([[912084649, 113994307], [715005050, 252822981], [776280101, 416772355], [537349022, 21026488], [587123128, 766578255]]) == 135804548\nassert solution.maxWidthOfVerticalArea([[227373340, 611187233], [842356589, 959792225], [987964262, 214949018], [382983944, 477210624], [381426495, 252277370], [736647256, 283294568], [822571368, 226362454], [136201720, 908446152]]) == 353663312\nassert solution.maxWidthOfVerticalArea([[309488517, 854263469], [155784170, 367518040], [611091073, 769456200], [68402390, 565437725], [577925, 533693374], [553928986, 421899654], [309463056, 880217414], [162241858, 61773202], [357572017, 358941069]]) == 196356969\nassert solution.maxWidthOfVerticalArea([[826222080, 85346199], [765893295, 880276509], [124800260, 62928191], [907872314, 39364008], [282517182, 953746343]]) == 483376113\nassert solution.maxWidthOfVerticalArea([[717131916, 166331], [121650680, 672646438], [4564143, 821514251], [973188099, 197805710], [790454531, 114301065], [370423047, 979447227]]) == 346708869\nassert solution.maxWidthOfVerticalArea([[296467767, 712027770], [739896162, 290531401], [924022623, 959674391], [307350519, 918890699], [948716994, 698978563], [506924462, 697132907], [618239459, 460753429], [575971868, 232059093]]) == 199573943\nassert solution.maxWidthOfVerticalArea([[918332075, 694207982], [266354800, 784300472], [967554013, 616566937], [256650029, 407744592], [657788078, 309274103]]) == 391433278\nassert solution.maxWidthOfVerticalArea([[508866951, 236142225], [81081421, 663424168], [512984731, 937179315], [895617980, 607125169], [611881800, 355340191]]) == 427785530\nassert solution.maxWidthOfVerticalArea([[955290771, 909187940], [486641721, 857226570], [519708493, 943348650], [374785815, 669419749], [278918950, 866086503], [992771248, 27758788]]) == 435582278\nassert solution.maxWidthOfVerticalArea([[749098055, 242669104], [812957704, 146266416], [254629672, 609937758], [248468631, 301046805]]) == 494468383\nassert solution.maxWidthOfVerticalArea([[390568516, 16618610], [921518682, 864135594]]) == 530950166\nassert solution.maxWidthOfVerticalArea([[825726188, 398112264], [691462930, 798967966]]) == 134263258\nassert solution.maxWidthOfVerticalArea([[478643016, 918296901], [841048620, 900851295], [54851644, 656482001], [945793977, 218144313], [965812623, 10541179], [181987126, 348545206], [819979437, 305016095]]) == 341336421\nassert solution.maxWidthOfVerticalArea([[42164499, 730008277], [552381307, 273786657], [373915866, 237252559], [894057354, 391770946], [353936176, 813341756], [482952196, 551137982], [663609556, 43801448], [380778646, 40957931], [300077779, 7852440], [359617425, 617300950]]) == 257913280\nassert solution.maxWidthOfVerticalArea([[991033300, 666132066], [469004052, 205420739], [141942432, 941417239], [705750742, 494242481], [545055917, 535609535], [883035764, 539724132], [285481621, 486528000], [252522569, 420539535], [502839495, 589455913], [904545463, 321048460]]) == 183522431\nassert solution.maxWidthOfVerticalArea([[354377234, 349810976], [553548138, 110730792], [116230120, 168473814], [829621818, 640918711], [522192368, 406046824], [577576446, 541691654]]) == 252045372\nassert solution.maxWidthOfVerticalArea([[911990954, 229334562], [220576056, 976430039], [770927422, 927200726], [523642009, 502842924], [891763230, 47749762], [428160188, 505532187], [911164317, 275158829]]) == 247285413\nassert solution.maxWidthOfVerticalArea([[783661876, 217716857], [971055130, 206432999], [681347407, 582129631], [316707981, 170527403], [227862391, 585871417], [493083821, 486362354], [235981852, 640959887], [827602072, 364644437], [595625721, 849242874]]) == 176375840\nassert solution.maxWidthOfVerticalArea([[435311174, 613999120], [496517720, 232417895], [536145256, 826903946], [901659420, 778922700], [247447888, 908391347], [706113728, 890373778], [755272650, 726425756], [587079453, 628543818], [460157029, 335241761], [495272806, 910338775]]) == 187863286\nassert solution.maxWidthOfVerticalArea([[969136314, 57320584], [344624457, 867289722], [785800917, 219433686]]) == 441176460\nassert solution.maxWidthOfVerticalArea([[12057889, 846857159], [339823326, 362730937], [918094016, 1225477], [35731487, 808378628], [151899665, 921262472], [770604085, 65799283], [164513775, 847319599], [467068422, 519869666], [869748080, 301520853]]) == 303535663\nassert solution.maxWidthOfVerticalArea([[357488819, 400590959], [680345448, 673808408], [301545349, 765621405], [498952924, 633475220], [949634913, 93812064], [112325238, 787447747]]) == 269289465\nassert solution.maxWidthOfVerticalArea([[615575168, 273394637], [285363241, 366742810], [421953053, 5218370], [196780366, 411501286], [453811522, 309081581], [516303535, 782220208]]) == 136589812\nassert solution.maxWidthOfVerticalArea([[191455171, 592125174], [305024383, 604654904]]) == 113569212\nassert solution.maxWidthOfVerticalArea([[803718919, 589341404], [49317627, 984562673], [275758118, 901203182], [59960165, 511208366]]) == 527960801\nassert solution.maxWidthOfVerticalArea([[176355665, 784111319], [576414343, 116588801], [832797996, 430128207], [609188777, 418496218], [496296706, 906729038], [667784987, 128431839], [235128592, 539206199], [333844655, 885936119]]) == 165013009\nassert solution.maxWidthOfVerticalArea([[300781706, 917880172], [215261593, 714222130], [826223671, 96751837], [562463345, 51593437], [723037594, 42003677], [628715404, 611950738]]) == 261681639\nassert solution.maxWidthOfVerticalArea([[57899680, 125911674], [188235289, 376990384], [478810263, 151539050], [832860714, 362983918], [129586866, 126038789]]) == 354050451\nassert solution.maxWidthOfVerticalArea([[320544956, 870493725], [545048536, 543767189], [315738577, 843779247], [329752998, 383175925], [163813569, 606766306], [862566117, 365658990]]) == 317517581\nassert solution.maxWidthOfVerticalArea([[301045625, 904594152], [277145346, 829262000], [274866083, 478604890], [395859831, 245104797], [475348771, 348927891]]) == 94814206\nassert solution.maxWidthOfVerticalArea([[8448760, 202107763], [471556122, 896624856], [800895397, 516725039], [853696198, 919102557], [432169861, 749738611], [570575644, 914775726], [517450884, 878376736], [288351973, 318515451]]) == 279903213\nassert solution.maxWidthOfVerticalArea([[102312678, 687725014], [985043518, 86388162], [73772474, 60043465]]) == 882730840\nassert solution.maxWidthOfVerticalArea([[932742245, 669831673], [278836309, 689223653], [931209724, 576596313], [204228407, 288904860], [497387670, 235743161], [287486581, 774481940], [277149024, 815678542], [541165757, 149977136], [28566024, 135053967]]) == 390043967\nassert solution.maxWidthOfVerticalArea([[941025354, 927482015], [604848888, 948586345]]) == 336176466\nassert solution.maxWidthOfVerticalArea([[752638086, 720162976], [577077189, 324661311], [531360797, 830128548], [319760520, 417886888], [691001839, 905248924], [468994142, 830730781], [952365388, 13519511], [702317860, 492872423]]) == 199727302\nassert solution.maxWidthOfVerticalArea([[361919835, 97128637], [845080061, 683480684], [472664274, 607490402], [915038525, 209708296], [393024317, 636236345], [85408166, 260035997], [773231344, 153141543], [527143902, 729638456], [773424996, 586563020], [641417124, 341096672]]) == 276511669\nassert solution.maxWidthOfVerticalArea([[827178451, 2219323], [936443469, 386728688], [182305647, 845757173], [227759415, 855601562], [404168324, 497426254], [896247636, 29901241], [808202063, 112338909], [316607593, 344613581], [868131453, 103816377]]) == 404033739\nassert solution.maxWidthOfVerticalArea([[810734359, 105830054], [891747737, 862329005], [167222785, 614023171], [321344229, 429595902], [220320401, 364801504], [581122282, 928933074], [265167, 856726757]]) == 259778053\nassert solution.maxWidthOfVerticalArea([[316559192, 753503220], [680733846, 802376992], [687914522, 959201318], [984249046, 846226454]]) == 364174654\nassert solution.maxWidthOfVerticalArea([[127719536, 709346496], [492421279, 625834613], [564374828, 159723106], [8905413, 525215867], [344763831, 26645728]]) == 217044295\nassert solution.maxWidthOfVerticalArea([[169131947, 982458241], [522176122, 203970367], [907074778, 312229102], [423047723, 891532740], [768044033, 33624366], [95419248, 870697049]]) == 253915776\nassert solution.maxWidthOfVerticalArea([[457758088, 584737105], [323627523, 477654586], [923093768, 525905233], [868376732, 280253817], [970601186, 292846551], [790272936, 715982359], [273350738, 80303760], [403341318, 926140796], [846065264, 790885543], [204443841, 743097493]]) == 332514848\nassert solution.maxWidthOfVerticalArea([[556460559, 837398611], [338034717, 290595270], [392337542, 952331023], [725216416, 183804924]]) == 168755857\nassert solution.maxWidthOfVerticalArea([[469454916, 166381164], [619100992, 397500029], [821747504, 582866372]]) == 202646512\nassert solution.maxWidthOfVerticalArea([[314527066, 203380589], [449436570, 430041443], [54186441, 732238335], [374328087, 809473252], [780375557, 531188041], [1581862, 788033166]]) == 330938987\nassert solution.maxWidthOfVerticalArea([[929983794, 945636836], [504559329, 353863897], [590239760, 883374132], [717420464, 128185096], [203598090, 732208843], [972778929, 131792729], [110802642, 268417168], [535248145, 550695278]]) == 300961239\nassert solution.maxWidthOfVerticalArea([[164408866, 844748332], [480850341, 823537986]]) == 316441475\nassert solution.maxWidthOfVerticalArea([[580117634, 336449759], [314235523, 282767842], [554277596, 10860576], [462496463, 884910108], [539407320, 258803232]]) == 148260940\nassert solution.maxWidthOfVerticalArea([[339367418, 289994338], [713726010, 973402344], [722030481, 275659430], [943903186, 24627338]]) == 374358592",
  "inefficient_solution": "class Solution:\n    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:\n        nums = [x for x, _ in points]\n        n = len(nums)\n        bucket_size = 1\n        buckets = [[] for _ in range(1000000)]\n        for x in nums:\n            bucket = x % 1000000\n            buckets[bucket].append(x)\n        ans = 0\n        for bucket in buckets:\n            bucket.sort()\n            for i in range(1, len(bucket)):\n                ans = max(ans, bucket[i] - bucket[i-1])\n        return ans",
  "is_python": true
}