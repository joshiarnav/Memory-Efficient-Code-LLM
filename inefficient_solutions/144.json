{
  "problem_idx": 144,
  "task_name": "Binary Tree Preorder Traversal",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the preorder traversal of its nodes' values*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0144.Binary%20Tree%20Preorder%20Traversal/images/inorder_1.jpg)\n\n```\n\n**Input:** root = [1,null,2,3]\n**Output:** [1,2,3]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = []\n**Output:** []\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [1]\n**Output:** [1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 100]`.\n* `-100 <= Node.val <= 100`\n\n\n\u00a0\n\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        ans = []\n        while root:\n            if root.left is None:\n                ans.append(root.val)\n                root = root.right\n            else:\n                prev = root.left\n                while prev.right and prev.right != root:\n                    prev = prev.right\n                if prev.right is None:\n                    ans.append(root.val)\n                    prev.right = root\n                    root = root.left\n                else:\n                    prev.right = None\n                    root = root.right\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def preorderTraversal(self, root):\n        ans = []\n        while root:\n            if root.left is None:\n                ans.append(root.val)\n                root = root.right\n            else:\n                prev = root.left\n                while prev.right and prev.right != root:\n                    prev = prev.right\n                if prev.right is None:\n                    ans.append(root.val)\n                    prev.right = root\n                    root = root.left\n                else:\n                    prev.right = None\n                    root = root.right\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random binary tree\n    root = generate_binary_tree()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.preorderTraversal(root)\n\n    return root, expected_result\n\ndef generate_binary_tree():\n    num_nodes = random.randint(0, 100)\n    return create_tree(list(range(1, num_nodes+1)))\n\ndef create_tree(nodes):\n    if not nodes:\n        return None\n    mid = len(nodes) // 2\n    root = TreeNode(nodes[mid])\n    root.left = create_tree(nodes[:mid])\n    root.right = create_tree(nodes[mid+1:])\n    return root\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.preorderTraversal(root) == expected_result\n        print(f\"assert solution.preorderTraversal({convert_to_string(root)}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.preorderTraversal({convert_to_string(root)}) == {expected_result}\")\n    return test_case_generator_results\n\ndef convert_to_string(node):\n    if not node:\n        return \"None\"\n    left = convert_to_string(node.left)\n    right = convert_to_string(node.right)\n    return f\"TreeNode({node.val}, {left}, {right})\"\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.preorderTraversal(TreeNode(30, TreeNode(15, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), None))), TreeNode(23, TreeNode(19, TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)), TreeNode(21, TreeNode(20, None, None), TreeNode(22, None, None))), TreeNode(27, TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None)), TreeNode(29, TreeNode(28, None, None), None)))), TreeNode(45, TreeNode(38, TreeNode(34, TreeNode(32, TreeNode(31, None, None), TreeNode(33, None, None)), TreeNode(36, TreeNode(35, None, None), TreeNode(37, None, None))), TreeNode(42, TreeNode(40, TreeNode(39, None, None), TreeNode(41, None, None)), TreeNode(44, TreeNode(43, None, None), None))), TreeNode(53, TreeNode(49, TreeNode(47, TreeNode(46, None, None), TreeNode(48, None, None)), TreeNode(51, TreeNode(50, None, None), TreeNode(52, None, None))), TreeNode(57, TreeNode(55, TreeNode(54, None, None), TreeNode(56, None, None)), TreeNode(59, TreeNode(58, None, None), None)))))) == [30, 15, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 23, 19, 17, 16, 18, 21, 20, 22, 27, 25, 24, 26, 29, 28, 45, 38, 34, 32, 31, 33, 36, 35, 37, 42, 40, 39, 41, 44, 43, 53, 49, 47, 46, 48, 51, 50, 52, 57, 55, 54, 56, 59, 58]\nassert solution.preorderTraversal(TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(16, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(15, None, None)), TreeNode(19, TreeNode(18, TreeNode(17, None, None), None), TreeNode(20, None, None))))) == [11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 16, 14, 13, 12, 15, 19, 18, 17, 20]\nassert solution.preorderTraversal(TreeNode(17, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(13, TreeNode(11, TreeNode(10, None, None), TreeNode(12, None, None)), TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)))), TreeNode(25, TreeNode(21, TreeNode(19, TreeNode(18, None, None), TreeNode(20, None, None)), TreeNode(23, TreeNode(22, None, None), TreeNode(24, None, None))), TreeNode(29, TreeNode(27, TreeNode(26, None, None), TreeNode(28, None, None)), TreeNode(31, TreeNode(30, None, None), TreeNode(32, None, None)))))) == [17, 9, 5, 3, 2, 1, 4, 7, 6, 8, 13, 11, 10, 12, 15, 14, 16, 25, 21, 19, 18, 20, 23, 22, 24, 29, 27, 26, 28, 31, 30, 32]\nassert solution.preorderTraversal(TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(20, TreeNode(17, TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)), TreeNode(19, TreeNode(18, None, None), None)), TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(25, TreeNode(24, None, None), None))))) == [13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 20, 17, 15, 14, 16, 19, 18, 23, 22, 21, 25, 24]\nassert solution.preorderTraversal(None) == []\nassert solution.preorderTraversal(TreeNode(26, TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(20, TreeNode(17, TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)), TreeNode(19, TreeNode(18, None, None), None)), TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(25, TreeNode(24, None, None), None)))), TreeNode(39, TreeNode(33, TreeNode(30, TreeNode(28, TreeNode(27, None, None), TreeNode(29, None, None)), TreeNode(32, TreeNode(31, None, None), None)), TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(38, TreeNode(37, None, None), None))), TreeNode(45, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(44, TreeNode(43, None, None), None)), TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(50, TreeNode(49, None, None), None)))))) == [26, 13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 20, 17, 15, 14, 16, 19, 18, 23, 22, 21, 25, 24, 39, 33, 30, 28, 27, 29, 32, 31, 36, 35, 34, 38, 37, 45, 42, 41, 40, 44, 43, 48, 47, 46, 50, 49]\nassert solution.preorderTraversal(TreeNode(20, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None)))), TreeNode(30, TreeNode(25, TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(24, None, None)), TreeNode(28, TreeNode(27, TreeNode(26, None, None), None), TreeNode(29, None, None))), TreeNode(35, TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(34, None, None)), TreeNode(37, TreeNode(36, None, None), TreeNode(38, None, None)))))) == [20, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19, 30, 25, 23, 22, 21, 24, 28, 27, 26, 29, 35, 33, 32, 31, 34, 37, 36, 38]\nassert solution.preorderTraversal(TreeNode(17, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(13, TreeNode(11, TreeNode(10, None, None), TreeNode(12, None, None)), TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)))), TreeNode(25, TreeNode(21, TreeNode(19, TreeNode(18, None, None), TreeNode(20, None, None)), TreeNode(23, TreeNode(22, None, None), TreeNode(24, None, None))), TreeNode(29, TreeNode(27, TreeNode(26, None, None), TreeNode(28, None, None)), TreeNode(31, TreeNode(30, None, None), TreeNode(32, None, None)))))) == [17, 9, 5, 3, 2, 1, 4, 7, 6, 8, 13, 11, 10, 12, 15, 14, 16, 25, 21, 19, 18, 20, 23, 22, 24, 29, 27, 26, 28, 31, 30, 32]\nassert solution.preorderTraversal(TreeNode(39, TreeNode(20, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None)))), TreeNode(30, TreeNode(25, TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(24, None, None)), TreeNode(28, TreeNode(27, TreeNode(26, None, None), None), TreeNode(29, None, None))), TreeNode(35, TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(34, None, None)), TreeNode(37, TreeNode(36, None, None), TreeNode(38, None, None))))), TreeNode(59, TreeNode(49, TreeNode(44, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(43, None, None)), TreeNode(47, TreeNode(46, TreeNode(45, None, None), None), TreeNode(48, None, None))), TreeNode(54, TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(53, None, None)), TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(58, None, None)))), TreeNode(69, TreeNode(64, TreeNode(62, TreeNode(61, TreeNode(60, None, None), None), TreeNode(63, None, None)), TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None))), TreeNode(74, TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(73, None, None)), TreeNode(76, TreeNode(75, None, None), TreeNode(77, None, None))))))) == [39, 20, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19, 30, 25, 23, 22, 21, 24, 28, 27, 26, 29, 35, 33, 32, 31, 34, 37, 36, 38, 59, 49, 44, 42, 41, 40, 43, 47, 46, 45, 48, 54, 52, 51, 50, 53, 57, 56, 55, 58, 69, 64, 62, 61, 60, 63, 67, 66, 65, 68, 74, 72, 71, 70, 73, 76, 75, 77]\nassert solution.preorderTraversal(TreeNode(26, TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(20, TreeNode(17, TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)), TreeNode(19, TreeNode(18, None, None), None)), TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(25, TreeNode(24, None, None), None)))), TreeNode(39, TreeNode(33, TreeNode(30, TreeNode(28, TreeNode(27, None, None), TreeNode(29, None, None)), TreeNode(32, TreeNode(31, None, None), None)), TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(38, TreeNode(37, None, None), None))), TreeNode(45, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(44, TreeNode(43, None, None), None)), TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(50, TreeNode(49, None, None), None)))))) == [26, 13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 20, 17, 15, 14, 16, 19, 18, 23, 22, 21, 25, 24, 39, 33, 30, 28, 27, 29, 32, 31, 36, 35, 34, 38, 37, 45, 42, 41, 40, 44, 43, 48, 47, 46, 50, 49]\nassert solution.preorderTraversal(TreeNode(29, TreeNode(15, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), None))), TreeNode(22, TreeNode(19, TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)), TreeNode(21, TreeNode(20, None, None), None)), TreeNode(26, TreeNode(24, TreeNode(23, None, None), TreeNode(25, None, None)), TreeNode(28, TreeNode(27, None, None), None)))), TreeNode(44, TreeNode(37, TreeNode(33, TreeNode(31, TreeNode(30, None, None), TreeNode(32, None, None)), TreeNode(35, TreeNode(34, None, None), TreeNode(36, None, None))), TreeNode(41, TreeNode(39, TreeNode(38, None, None), TreeNode(40, None, None)), TreeNode(43, TreeNode(42, None, None), None))), TreeNode(51, TreeNode(48, TreeNode(46, TreeNode(45, None, None), TreeNode(47, None, None)), TreeNode(50, TreeNode(49, None, None), None)), TreeNode(55, TreeNode(53, TreeNode(52, None, None), TreeNode(54, None, None)), TreeNode(57, TreeNode(56, None, None), None)))))) == [29, 15, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 22, 19, 17, 16, 18, 21, 20, 26, 24, 23, 25, 28, 27, 44, 37, 33, 31, 30, 32, 35, 34, 36, 41, 39, 38, 40, 43, 42, 51, 48, 46, 45, 47, 50, 49, 55, 53, 52, 54, 57, 56]\nassert solution.preorderTraversal(TreeNode(44, TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(39, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(38, TreeNode(37, None, None), None)), TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(43, None, None))))), TreeNode(66, TreeNode(55, TreeNode(50, TreeNode(47, TreeNode(46, TreeNode(45, None, None), None), TreeNode(49, TreeNode(48, None, None), None)), TreeNode(53, TreeNode(52, TreeNode(51, None, None), None), TreeNode(54, None, None))), TreeNode(61, TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(60, TreeNode(59, None, None), None)), TreeNode(64, TreeNode(63, TreeNode(62, None, None), None), TreeNode(65, None, None)))), TreeNode(77, TreeNode(72, TreeNode(69, TreeNode(68, TreeNode(67, None, None), None), TreeNode(71, TreeNode(70, None, None), None)), TreeNode(75, TreeNode(74, TreeNode(73, None, None), None), TreeNode(76, None, None))), TreeNode(82, TreeNode(80, TreeNode(79, TreeNode(78, None, None), None), TreeNode(81, None, None)), TreeNode(85, TreeNode(84, TreeNode(83, None, None), None), TreeNode(86, None, None))))))) == [44, 22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 39, 36, 35, 34, 38, 37, 42, 41, 40, 43, 66, 55, 50, 47, 46, 45, 49, 48, 53, 52, 51, 54, 61, 58, 57, 56, 60, 59, 64, 63, 62, 65, 77, 72, 69, 68, 67, 71, 70, 75, 74, 73, 76, 82, 80, 79, 78, 81, 85, 84, 83, 86]\nassert solution.preorderTraversal(TreeNode(28, TreeNode(14, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(11, TreeNode(9, TreeNode(8, None, None), TreeNode(10, None, None)), TreeNode(13, TreeNode(12, None, None), None))), TreeNode(21, TreeNode(18, TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)), TreeNode(20, TreeNode(19, None, None), None)), TreeNode(25, TreeNode(23, TreeNode(22, None, None), TreeNode(24, None, None)), TreeNode(27, TreeNode(26, None, None), None)))), TreeNode(42, TreeNode(35, TreeNode(32, TreeNode(30, TreeNode(29, None, None), TreeNode(31, None, None)), TreeNode(34, TreeNode(33, None, None), None)), TreeNode(39, TreeNode(37, TreeNode(36, None, None), TreeNode(38, None, None)), TreeNode(41, TreeNode(40, None, None), None))), TreeNode(49, TreeNode(46, TreeNode(44, TreeNode(43, None, None), TreeNode(45, None, None)), TreeNode(48, TreeNode(47, None, None), None)), TreeNode(53, TreeNode(51, TreeNode(50, None, None), TreeNode(52, None, None)), TreeNode(55, TreeNode(54, None, None), None)))))) == [28, 14, 7, 4, 2, 1, 3, 6, 5, 11, 9, 8, 10, 13, 12, 21, 18, 16, 15, 17, 20, 19, 25, 23, 22, 24, 27, 26, 42, 35, 32, 30, 29, 31, 34, 33, 39, 37, 36, 38, 41, 40, 49, 46, 44, 43, 45, 48, 47, 53, 51, 50, 52, 55, 54]\nassert solution.preorderTraversal(TreeNode(15, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), None))), TreeNode(23, TreeNode(19, TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)), TreeNode(21, TreeNode(20, None, None), TreeNode(22, None, None))), TreeNode(27, TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None)), TreeNode(29, TreeNode(28, None, None), None))))) == [15, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 23, 19, 17, 16, 18, 21, 20, 22, 27, 25, 24, 26, 29, 28]\nassert solution.preorderTraversal(TreeNode(20, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None)))), TreeNode(30, TreeNode(25, TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(24, None, None)), TreeNode(28, TreeNode(27, TreeNode(26, None, None), None), TreeNode(29, None, None))), TreeNode(35, TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(34, None, None)), TreeNode(37, TreeNode(36, None, None), TreeNode(38, None, None)))))) == [20, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19, 30, 25, 23, 22, 21, 24, 28, 27, 26, 29, 35, 33, 32, 31, 34, 37, 36, 38]\nassert solution.preorderTraversal(TreeNode(34, TreeNode(17, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(13, TreeNode(11, TreeNode(10, None, None), TreeNode(12, None, None)), TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)))), TreeNode(26, TreeNode(22, TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)), TreeNode(24, TreeNode(23, None, None), TreeNode(25, None, None))), TreeNode(30, TreeNode(28, TreeNode(27, None, None), TreeNode(29, None, None)), TreeNode(32, TreeNode(31, None, None), TreeNode(33, None, None))))), TreeNode(51, TreeNode(43, TreeNode(39, TreeNode(37, TreeNode(36, TreeNode(35, None, None), None), TreeNode(38, None, None)), TreeNode(41, TreeNode(40, None, None), TreeNode(42, None, None))), TreeNode(47, TreeNode(45, TreeNode(44, None, None), TreeNode(46, None, None)), TreeNode(49, TreeNode(48, None, None), TreeNode(50, None, None)))), TreeNode(60, TreeNode(56, TreeNode(54, TreeNode(53, TreeNode(52, None, None), None), TreeNode(55, None, None)), TreeNode(58, TreeNode(57, None, None), TreeNode(59, None, None))), TreeNode(64, TreeNode(62, TreeNode(61, None, None), TreeNode(63, None, None)), TreeNode(66, TreeNode(65, None, None), TreeNode(67, None, None))))))) == [34, 17, 9, 5, 3, 2, 1, 4, 7, 6, 8, 13, 11, 10, 12, 15, 14, 16, 26, 22, 20, 19, 18, 21, 24, 23, 25, 30, 28, 27, 29, 32, 31, 33, 51, 43, 39, 37, 36, 35, 38, 41, 40, 42, 47, 45, 44, 46, 49, 48, 50, 60, 56, 54, 53, 52, 55, 58, 57, 59, 64, 62, 61, 63, 66, 65, 67]\nassert solution.preorderTraversal(TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None))))) == [10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 17, 16, 18]\nassert solution.preorderTraversal(TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None))))) == [10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19]\nassert solution.preorderTraversal(TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None))) == [4, 2, 1, 3, 6, 5]\nassert solution.preorderTraversal(TreeNode(46, TreeNode(23, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)))), TreeNode(35, TreeNode(29, TreeNode(26, TreeNode(25, TreeNode(24, None, None), None), TreeNode(28, TreeNode(27, None, None), None)), TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(34, TreeNode(33, None, None), None))), TreeNode(41, TreeNode(38, TreeNode(37, TreeNode(36, None, None), None), TreeNode(40, TreeNode(39, None, None), None)), TreeNode(44, TreeNode(43, TreeNode(42, None, None), None), TreeNode(45, None, None))))), TreeNode(69, TreeNode(58, TreeNode(52, TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(51, TreeNode(50, None, None), None)), TreeNode(55, TreeNode(54, TreeNode(53, None, None), None), TreeNode(57, TreeNode(56, None, None), None))), TreeNode(64, TreeNode(61, TreeNode(60, TreeNode(59, None, None), None), TreeNode(63, TreeNode(62, None, None), None)), TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None)))), TreeNode(81, TreeNode(75, TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(74, TreeNode(73, None, None), None)), TreeNode(78, TreeNode(77, TreeNode(76, None, None), None), TreeNode(80, TreeNode(79, None, None), None))), TreeNode(87, TreeNode(84, TreeNode(83, TreeNode(82, None, None), None), TreeNode(86, TreeNode(85, None, None), None)), TreeNode(90, TreeNode(89, TreeNode(88, None, None), None), TreeNode(91, None, None))))))) == [46, 23, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 22, 35, 29, 26, 25, 24, 28, 27, 32, 31, 30, 34, 33, 41, 38, 37, 36, 40, 39, 44, 43, 42, 45, 69, 58, 52, 49, 48, 47, 51, 50, 55, 54, 53, 57, 56, 64, 61, 60, 59, 63, 62, 67, 66, 65, 68, 81, 75, 72, 71, 70, 74, 73, 78, 77, 76, 80, 79, 87, 84, 83, 82, 86, 85, 90, 89, 88, 91]\nassert solution.preorderTraversal(TreeNode(40, TreeNode(20, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None)))), TreeNode(30, TreeNode(25, TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(24, None, None)), TreeNode(28, TreeNode(27, TreeNode(26, None, None), None), TreeNode(29, None, None))), TreeNode(35, TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(34, None, None)), TreeNode(38, TreeNode(37, TreeNode(36, None, None), None), TreeNode(39, None, None))))), TreeNode(60, TreeNode(50, TreeNode(45, TreeNode(43, TreeNode(42, TreeNode(41, None, None), None), TreeNode(44, None, None)), TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(49, None, None))), TreeNode(55, TreeNode(53, TreeNode(52, TreeNode(51, None, None), None), TreeNode(54, None, None)), TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(59, None, None)))), TreeNode(70, TreeNode(65, TreeNode(63, TreeNode(62, TreeNode(61, None, None), None), TreeNode(64, None, None)), TreeNode(68, TreeNode(67, TreeNode(66, None, None), None), TreeNode(69, None, None))), TreeNode(75, TreeNode(73, TreeNode(72, TreeNode(71, None, None), None), TreeNode(74, None, None)), TreeNode(77, TreeNode(76, None, None), TreeNode(78, None, None))))))) == [40, 20, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19, 30, 25, 23, 22, 21, 24, 28, 27, 26, 29, 35, 33, 32, 31, 34, 38, 37, 36, 39, 60, 50, 45, 43, 42, 41, 44, 48, 47, 46, 49, 55, 53, 52, 51, 54, 58, 57, 56, 59, 70, 65, 63, 62, 61, 64, 68, 67, 66, 69, 75, 73, 72, 71, 74, 77, 76, 78]\nassert solution.preorderTraversal(TreeNode(39, TreeNode(20, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None)))), TreeNode(30, TreeNode(25, TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(24, None, None)), TreeNode(28, TreeNode(27, TreeNode(26, None, None), None), TreeNode(29, None, None))), TreeNode(35, TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(34, None, None)), TreeNode(37, TreeNode(36, None, None), TreeNode(38, None, None))))), TreeNode(59, TreeNode(49, TreeNode(44, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(43, None, None)), TreeNode(47, TreeNode(46, TreeNode(45, None, None), None), TreeNode(48, None, None))), TreeNode(54, TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(53, None, None)), TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(58, None, None)))), TreeNode(69, TreeNode(64, TreeNode(62, TreeNode(61, TreeNode(60, None, None), None), TreeNode(63, None, None)), TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None))), TreeNode(74, TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(73, None, None)), TreeNode(76, TreeNode(75, None, None), TreeNode(77, None, None))))))) == [39, 20, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19, 30, 25, 23, 22, 21, 24, 28, 27, 26, 29, 35, 33, 32, 31, 34, 37, 36, 38, 59, 49, 44, 42, 41, 40, 43, 47, 46, 45, 48, 54, 52, 51, 50, 53, 57, 56, 55, 58, 69, 64, 62, 61, 60, 63, 67, 66, 65, 68, 74, 72, 71, 70, 73, 76, 75, 77]\nassert solution.preorderTraversal(TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None))))) == [10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19]\nassert solution.preorderTraversal(TreeNode(30, TreeNode(15, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), None))), TreeNode(23, TreeNode(19, TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)), TreeNode(21, TreeNode(20, None, None), TreeNode(22, None, None))), TreeNode(27, TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None)), TreeNode(29, TreeNode(28, None, None), None)))), TreeNode(45, TreeNode(38, TreeNode(34, TreeNode(32, TreeNode(31, None, None), TreeNode(33, None, None)), TreeNode(36, TreeNode(35, None, None), TreeNode(37, None, None))), TreeNode(42, TreeNode(40, TreeNode(39, None, None), TreeNode(41, None, None)), TreeNode(44, TreeNode(43, None, None), None))), TreeNode(53, TreeNode(49, TreeNode(47, TreeNode(46, None, None), TreeNode(48, None, None)), TreeNode(51, TreeNode(50, None, None), TreeNode(52, None, None))), TreeNode(57, TreeNode(55, TreeNode(54, None, None), TreeNode(56, None, None)), TreeNode(59, TreeNode(58, None, None), None)))))) == [30, 15, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 23, 19, 17, 16, 18, 21, 20, 22, 27, 25, 24, 26, 29, 28, 45, 38, 34, 32, 31, 33, 36, 35, 37, 42, 40, 39, 41, 44, 43, 53, 49, 47, 46, 48, 51, 50, 52, 57, 55, 54, 56, 59, 58]\nassert solution.preorderTraversal(TreeNode(30, TreeNode(15, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), None))), TreeNode(23, TreeNode(19, TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)), TreeNode(21, TreeNode(20, None, None), TreeNode(22, None, None))), TreeNode(27, TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None)), TreeNode(29, TreeNode(28, None, None), None)))), TreeNode(45, TreeNode(38, TreeNode(34, TreeNode(32, TreeNode(31, None, None), TreeNode(33, None, None)), TreeNode(36, TreeNode(35, None, None), TreeNode(37, None, None))), TreeNode(42, TreeNode(40, TreeNode(39, None, None), TreeNode(41, None, None)), TreeNode(44, TreeNode(43, None, None), None))), TreeNode(53, TreeNode(49, TreeNode(47, TreeNode(46, None, None), TreeNode(48, None, None)), TreeNode(51, TreeNode(50, None, None), TreeNode(52, None, None))), TreeNode(57, TreeNode(55, TreeNode(54, None, None), TreeNode(56, None, None)), TreeNode(59, TreeNode(58, None, None), None)))))) == [30, 15, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 23, 19, 17, 16, 18, 21, 20, 22, 27, 25, 24, 26, 29, 28, 45, 38, 34, 32, 31, 33, 36, 35, 37, 42, 40, 39, 41, 44, 43, 53, 49, 47, 46, 48, 51, 50, 52, 57, 55, 54, 56, 59, 58]\nassert solution.preorderTraversal(TreeNode(43, TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None))))), TreeNode(64, TreeNode(54, TreeNode(49, TreeNode(46, TreeNode(45, TreeNode(44, None, None), None), TreeNode(48, TreeNode(47, None, None), None)), TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(53, None, None))), TreeNode(59, TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(58, None, None)), TreeNode(62, TreeNode(61, TreeNode(60, None, None), None), TreeNode(63, None, None)))), TreeNode(75, TreeNode(70, TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(69, TreeNode(68, None, None), None)), TreeNode(73, TreeNode(72, TreeNode(71, None, None), None), TreeNode(74, None, None))), TreeNode(80, TreeNode(78, TreeNode(77, TreeNode(76, None, None), None), TreeNode(79, None, None)), TreeNode(83, TreeNode(82, TreeNode(81, None, None), None), TreeNode(84, None, None))))))) == [43, 22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 38, 36, 35, 34, 37, 41, 40, 39, 42, 64, 54, 49, 46, 45, 44, 48, 47, 52, 51, 50, 53, 59, 57, 56, 55, 58, 62, 61, 60, 63, 75, 70, 67, 66, 65, 69, 68, 73, 72, 71, 74, 80, 78, 77, 76, 79, 83, 82, 81, 84]\nassert solution.preorderTraversal(TreeNode(42, TreeNode(21, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(16, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(15, None, None)), TreeNode(19, TreeNode(18, TreeNode(17, None, None), None), TreeNode(20, None, None)))), TreeNode(32, TreeNode(27, TreeNode(24, TreeNode(23, TreeNode(22, None, None), None), TreeNode(26, TreeNode(25, None, None), None)), TreeNode(30, TreeNode(29, TreeNode(28, None, None), None), TreeNode(31, None, None))), TreeNode(37, TreeNode(35, TreeNode(34, TreeNode(33, None, None), None), TreeNode(36, None, None)), TreeNode(40, TreeNode(39, TreeNode(38, None, None), None), TreeNode(41, None, None))))), TreeNode(63, TreeNode(53, TreeNode(48, TreeNode(45, TreeNode(44, TreeNode(43, None, None), None), TreeNode(47, TreeNode(46, None, None), None)), TreeNode(51, TreeNode(50, TreeNode(49, None, None), None), TreeNode(52, None, None))), TreeNode(58, TreeNode(56, TreeNode(55, TreeNode(54, None, None), None), TreeNode(57, None, None)), TreeNode(61, TreeNode(60, TreeNode(59, None, None), None), TreeNode(62, None, None)))), TreeNode(74, TreeNode(69, TreeNode(66, TreeNode(65, TreeNode(64, None, None), None), TreeNode(68, TreeNode(67, None, None), None)), TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(73, None, None))), TreeNode(79, TreeNode(77, TreeNode(76, TreeNode(75, None, None), None), TreeNode(78, None, None)), TreeNode(82, TreeNode(81, TreeNode(80, None, None), None), TreeNode(83, None, None))))))) == [42, 21, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 16, 14, 13, 12, 15, 19, 18, 17, 20, 32, 27, 24, 23, 22, 26, 25, 30, 29, 28, 31, 37, 35, 34, 33, 36, 40, 39, 38, 41, 63, 53, 48, 45, 44, 43, 47, 46, 51, 50, 49, 52, 58, 56, 55, 54, 57, 61, 60, 59, 62, 74, 69, 66, 65, 64, 68, 67, 72, 71, 70, 73, 79, 77, 76, 75, 78, 82, 81, 80, 83]\nassert solution.preorderTraversal(TreeNode(44, TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(39, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(38, TreeNode(37, None, None), None)), TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(43, None, None))))), TreeNode(66, TreeNode(55, TreeNode(50, TreeNode(47, TreeNode(46, TreeNode(45, None, None), None), TreeNode(49, TreeNode(48, None, None), None)), TreeNode(53, TreeNode(52, TreeNode(51, None, None), None), TreeNode(54, None, None))), TreeNode(61, TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(60, TreeNode(59, None, None), None)), TreeNode(64, TreeNode(63, TreeNode(62, None, None), None), TreeNode(65, None, None)))), TreeNode(77, TreeNode(72, TreeNode(69, TreeNode(68, TreeNode(67, None, None), None), TreeNode(71, TreeNode(70, None, None), None)), TreeNode(75, TreeNode(74, TreeNode(73, None, None), None), TreeNode(76, None, None))), TreeNode(83, TreeNode(80, TreeNode(79, TreeNode(78, None, None), None), TreeNode(82, TreeNode(81, None, None), None)), TreeNode(86, TreeNode(85, TreeNode(84, None, None), None), TreeNode(87, None, None))))))) == [44, 22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 39, 36, 35, 34, 38, 37, 42, 41, 40, 43, 66, 55, 50, 47, 46, 45, 49, 48, 53, 52, 51, 54, 61, 58, 57, 56, 60, 59, 64, 63, 62, 65, 77, 72, 69, 68, 67, 71, 70, 75, 74, 73, 76, 83, 80, 79, 78, 82, 81, 86, 85, 84, 87]\nassert solution.preorderTraversal(TreeNode(2, TreeNode(1, None, None), None)) == [2, 1]\nassert solution.preorderTraversal(None) == []\nassert solution.preorderTraversal(None) == []\nassert solution.preorderTraversal(TreeNode(45, TreeNode(23, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)))), TreeNode(34, TreeNode(29, TreeNode(26, TreeNode(25, TreeNode(24, None, None), None), TreeNode(28, TreeNode(27, None, None), None)), TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(33, None, None))), TreeNode(40, TreeNode(37, TreeNode(36, TreeNode(35, None, None), None), TreeNode(39, TreeNode(38, None, None), None)), TreeNode(43, TreeNode(42, TreeNode(41, None, None), None), TreeNode(44, None, None))))), TreeNode(67, TreeNode(56, TreeNode(51, TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(50, TreeNode(49, None, None), None)), TreeNode(54, TreeNode(53, TreeNode(52, None, None), None), TreeNode(55, None, None))), TreeNode(62, TreeNode(59, TreeNode(58, TreeNode(57, None, None), None), TreeNode(61, TreeNode(60, None, None), None)), TreeNode(65, TreeNode(64, TreeNode(63, None, None), None), TreeNode(66, None, None)))), TreeNode(78, TreeNode(73, TreeNode(70, TreeNode(69, TreeNode(68, None, None), None), TreeNode(72, TreeNode(71, None, None), None)), TreeNode(76, TreeNode(75, TreeNode(74, None, None), None), TreeNode(77, None, None))), TreeNode(84, TreeNode(81, TreeNode(80, TreeNode(79, None, None), None), TreeNode(83, TreeNode(82, None, None), None)), TreeNode(87, TreeNode(86, TreeNode(85, None, None), None), TreeNode(88, None, None))))))) == [45, 23, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 22, 34, 29, 26, 25, 24, 28, 27, 32, 31, 30, 33, 40, 37, 36, 35, 39, 38, 43, 42, 41, 44, 67, 56, 51, 48, 47, 46, 50, 49, 54, 53, 52, 55, 62, 59, 58, 57, 61, 60, 65, 64, 63, 66, 78, 73, 70, 69, 68, 72, 71, 76, 75, 74, 77, 84, 81, 80, 79, 83, 82, 87, 86, 85, 88]\nassert solution.preorderTraversal(TreeNode(46, TreeNode(23, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)))), TreeNode(35, TreeNode(29, TreeNode(26, TreeNode(25, TreeNode(24, None, None), None), TreeNode(28, TreeNode(27, None, None), None)), TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(34, TreeNode(33, None, None), None))), TreeNode(41, TreeNode(38, TreeNode(37, TreeNode(36, None, None), None), TreeNode(40, TreeNode(39, None, None), None)), TreeNode(44, TreeNode(43, TreeNode(42, None, None), None), TreeNode(45, None, None))))), TreeNode(69, TreeNode(58, TreeNode(52, TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(51, TreeNode(50, None, None), None)), TreeNode(55, TreeNode(54, TreeNode(53, None, None), None), TreeNode(57, TreeNode(56, None, None), None))), TreeNode(64, TreeNode(61, TreeNode(60, TreeNode(59, None, None), None), TreeNode(63, TreeNode(62, None, None), None)), TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None)))), TreeNode(81, TreeNode(75, TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(74, TreeNode(73, None, None), None)), TreeNode(78, TreeNode(77, TreeNode(76, None, None), None), TreeNode(80, TreeNode(79, None, None), None))), TreeNode(87, TreeNode(84, TreeNode(83, TreeNode(82, None, None), None), TreeNode(86, TreeNode(85, None, None), None)), TreeNode(90, TreeNode(89, TreeNode(88, None, None), None), TreeNode(91, None, None))))))) == [46, 23, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 22, 35, 29, 26, 25, 24, 28, 27, 32, 31, 30, 34, 33, 41, 38, 37, 36, 40, 39, 44, 43, 42, 45, 69, 58, 52, 49, 48, 47, 51, 50, 55, 54, 53, 57, 56, 64, 61, 60, 59, 63, 62, 67, 66, 65, 68, 81, 75, 72, 71, 70, 74, 73, 78, 77, 76, 80, 79, 87, 84, 83, 82, 86, 85, 90, 89, 88, 91]\nassert solution.preorderTraversal(TreeNode(28, TreeNode(14, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(11, TreeNode(9, TreeNode(8, None, None), TreeNode(10, None, None)), TreeNode(13, TreeNode(12, None, None), None))), TreeNode(21, TreeNode(18, TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)), TreeNode(20, TreeNode(19, None, None), None)), TreeNode(25, TreeNode(23, TreeNode(22, None, None), TreeNode(24, None, None)), TreeNode(27, TreeNode(26, None, None), None)))), TreeNode(42, TreeNode(35, TreeNode(32, TreeNode(30, TreeNode(29, None, None), TreeNode(31, None, None)), TreeNode(34, TreeNode(33, None, None), None)), TreeNode(39, TreeNode(37, TreeNode(36, None, None), TreeNode(38, None, None)), TreeNode(41, TreeNode(40, None, None), None))), TreeNode(49, TreeNode(46, TreeNode(44, TreeNode(43, None, None), TreeNode(45, None, None)), TreeNode(48, TreeNode(47, None, None), None)), TreeNode(53, TreeNode(51, TreeNode(50, None, None), TreeNode(52, None, None)), TreeNode(55, TreeNode(54, None, None), None)))))) == [28, 14, 7, 4, 2, 1, 3, 6, 5, 11, 9, 8, 10, 13, 12, 21, 18, 16, 15, 17, 20, 19, 25, 23, 22, 24, 27, 26, 42, 35, 32, 30, 29, 31, 34, 33, 39, 37, 36, 38, 41, 40, 49, 46, 44, 43, 45, 48, 47, 53, 51, 50, 52, 55, 54]\nassert solution.preorderTraversal(TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(20, TreeNode(17, TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)), TreeNode(19, TreeNode(18, None, None), None)), TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(25, TreeNode(24, None, None), None))))) == [13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 20, 17, 15, 14, 16, 19, 18, 23, 22, 21, 25, 24]\nassert solution.preorderTraversal(TreeNode(51, TreeNode(26, TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(20, TreeNode(17, TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)), TreeNode(19, TreeNode(18, None, None), None)), TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(25, TreeNode(24, None, None), None)))), TreeNode(39, TreeNode(33, TreeNode(30, TreeNode(28, TreeNode(27, None, None), TreeNode(29, None, None)), TreeNode(32, TreeNode(31, None, None), None)), TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(38, TreeNode(37, None, None), None))), TreeNode(45, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(44, TreeNode(43, None, None), None)), TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(50, TreeNode(49, None, None), None))))), TreeNode(76, TreeNode(64, TreeNode(58, TreeNode(55, TreeNode(53, TreeNode(52, None, None), TreeNode(54, None, None)), TreeNode(57, TreeNode(56, None, None), None)), TreeNode(61, TreeNode(60, TreeNode(59, None, None), None), TreeNode(63, TreeNode(62, None, None), None))), TreeNode(70, TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(69, TreeNode(68, None, None), None)), TreeNode(73, TreeNode(72, TreeNode(71, None, None), None), TreeNode(75, TreeNode(74, None, None), None)))), TreeNode(89, TreeNode(83, TreeNode(80, TreeNode(78, TreeNode(77, None, None), TreeNode(79, None, None)), TreeNode(82, TreeNode(81, None, None), None)), TreeNode(86, TreeNode(85, TreeNode(84, None, None), None), TreeNode(88, TreeNode(87, None, None), None))), TreeNode(95, TreeNode(92, TreeNode(91, TreeNode(90, None, None), None), TreeNode(94, TreeNode(93, None, None), None)), TreeNode(98, TreeNode(97, TreeNode(96, None, None), None), TreeNode(100, TreeNode(99, None, None), None))))))) == [51, 26, 13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 20, 17, 15, 14, 16, 19, 18, 23, 22, 21, 25, 24, 39, 33, 30, 28, 27, 29, 32, 31, 36, 35, 34, 38, 37, 45, 42, 41, 40, 44, 43, 48, 47, 46, 50, 49, 76, 64, 58, 55, 53, 52, 54, 57, 56, 61, 60, 59, 63, 62, 70, 67, 66, 65, 69, 68, 73, 72, 71, 75, 74, 89, 83, 80, 78, 77, 79, 82, 81, 86, 85, 84, 88, 87, 95, 92, 91, 90, 94, 93, 98, 97, 96, 100, 99]\nassert solution.preorderTraversal(TreeNode(43, TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None))))), TreeNode(65, TreeNode(54, TreeNode(49, TreeNode(46, TreeNode(45, TreeNode(44, None, None), None), TreeNode(48, TreeNode(47, None, None), None)), TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(53, None, None))), TreeNode(60, TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(59, TreeNode(58, None, None), None)), TreeNode(63, TreeNode(62, TreeNode(61, None, None), None), TreeNode(64, None, None)))), TreeNode(76, TreeNode(71, TreeNode(68, TreeNode(67, TreeNode(66, None, None), None), TreeNode(70, TreeNode(69, None, None), None)), TreeNode(74, TreeNode(73, TreeNode(72, None, None), None), TreeNode(75, None, None))), TreeNode(81, TreeNode(79, TreeNode(78, TreeNode(77, None, None), None), TreeNode(80, None, None)), TreeNode(84, TreeNode(83, TreeNode(82, None, None), None), TreeNode(85, None, None))))))) == [43, 22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 38, 36, 35, 34, 37, 41, 40, 39, 42, 65, 54, 49, 46, 45, 44, 48, 47, 52, 51, 50, 53, 60, 57, 56, 55, 59, 58, 63, 62, 61, 64, 76, 71, 68, 67, 66, 70, 69, 74, 73, 72, 75, 81, 79, 78, 77, 80, 84, 83, 82, 85]\nassert solution.preorderTraversal(TreeNode(42, TreeNode(21, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(16, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(15, None, None)), TreeNode(19, TreeNode(18, TreeNode(17, None, None), None), TreeNode(20, None, None)))), TreeNode(32, TreeNode(27, TreeNode(24, TreeNode(23, TreeNode(22, None, None), None), TreeNode(26, TreeNode(25, None, None), None)), TreeNode(30, TreeNode(29, TreeNode(28, None, None), None), TreeNode(31, None, None))), TreeNode(37, TreeNode(35, TreeNode(34, TreeNode(33, None, None), None), TreeNode(36, None, None)), TreeNode(40, TreeNode(39, TreeNode(38, None, None), None), TreeNode(41, None, None))))), TreeNode(63, TreeNode(53, TreeNode(48, TreeNode(45, TreeNode(44, TreeNode(43, None, None), None), TreeNode(47, TreeNode(46, None, None), None)), TreeNode(51, TreeNode(50, TreeNode(49, None, None), None), TreeNode(52, None, None))), TreeNode(58, TreeNode(56, TreeNode(55, TreeNode(54, None, None), None), TreeNode(57, None, None)), TreeNode(61, TreeNode(60, TreeNode(59, None, None), None), TreeNode(62, None, None)))), TreeNode(74, TreeNode(69, TreeNode(66, TreeNode(65, TreeNode(64, None, None), None), TreeNode(68, TreeNode(67, None, None), None)), TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(73, None, None))), TreeNode(79, TreeNode(77, TreeNode(76, TreeNode(75, None, None), None), TreeNode(78, None, None)), TreeNode(82, TreeNode(81, TreeNode(80, None, None), None), TreeNode(83, None, None))))))) == [42, 21, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 16, 14, 13, 12, 15, 19, 18, 17, 20, 32, 27, 24, 23, 22, 26, 25, 30, 29, 28, 31, 37, 35, 34, 33, 36, 40, 39, 38, 41, 63, 53, 48, 45, 44, 43, 47, 46, 51, 50, 49, 52, 58, 56, 55, 54, 57, 61, 60, 59, 62, 74, 69, 66, 65, 64, 68, 67, 72, 71, 70, 73, 79, 77, 76, 75, 78, 82, 81, 80, 83]\nassert solution.preorderTraversal(TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(16, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(15, None, None)), TreeNode(19, TreeNode(18, TreeNode(17, None, None), None), TreeNode(20, None, None))))) == [11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 16, 14, 13, 12, 15, 19, 18, 17, 20]\nassert solution.preorderTraversal(TreeNode(46, TreeNode(23, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)))), TreeNode(35, TreeNode(29, TreeNode(26, TreeNode(25, TreeNode(24, None, None), None), TreeNode(28, TreeNode(27, None, None), None)), TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(34, TreeNode(33, None, None), None))), TreeNode(41, TreeNode(38, TreeNode(37, TreeNode(36, None, None), None), TreeNode(40, TreeNode(39, None, None), None)), TreeNode(44, TreeNode(43, TreeNode(42, None, None), None), TreeNode(45, None, None))))), TreeNode(69, TreeNode(58, TreeNode(52, TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(51, TreeNode(50, None, None), None)), TreeNode(55, TreeNode(54, TreeNode(53, None, None), None), TreeNode(57, TreeNode(56, None, None), None))), TreeNode(64, TreeNode(61, TreeNode(60, TreeNode(59, None, None), None), TreeNode(63, TreeNode(62, None, None), None)), TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None)))), TreeNode(81, TreeNode(75, TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(74, TreeNode(73, None, None), None)), TreeNode(78, TreeNode(77, TreeNode(76, None, None), None), TreeNode(80, TreeNode(79, None, None), None))), TreeNode(87, TreeNode(84, TreeNode(83, TreeNode(82, None, None), None), TreeNode(86, TreeNode(85, None, None), None)), TreeNode(90, TreeNode(89, TreeNode(88, None, None), None), TreeNode(91, None, None))))))) == [46, 23, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 22, 35, 29, 26, 25, 24, 28, 27, 32, 31, 30, 34, 33, 41, 38, 37, 36, 40, 39, 44, 43, 42, 45, 69, 58, 52, 49, 48, 47, 51, 50, 55, 54, 53, 57, 56, 64, 61, 60, 59, 63, 62, 67, 66, 65, 68, 81, 75, 72, 71, 70, 74, 73, 78, 77, 76, 80, 79, 87, 84, 83, 82, 86, 85, 90, 89, 88, 91]\nassert solution.preorderTraversal(TreeNode(46, TreeNode(23, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)))), TreeNode(35, TreeNode(29, TreeNode(26, TreeNode(25, TreeNode(24, None, None), None), TreeNode(28, TreeNode(27, None, None), None)), TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(34, TreeNode(33, None, None), None))), TreeNode(41, TreeNode(38, TreeNode(37, TreeNode(36, None, None), None), TreeNode(40, TreeNode(39, None, None), None)), TreeNode(44, TreeNode(43, TreeNode(42, None, None), None), TreeNode(45, None, None))))), TreeNode(69, TreeNode(58, TreeNode(52, TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(51, TreeNode(50, None, None), None)), TreeNode(55, TreeNode(54, TreeNode(53, None, None), None), TreeNode(57, TreeNode(56, None, None), None))), TreeNode(64, TreeNode(61, TreeNode(60, TreeNode(59, None, None), None), TreeNode(63, TreeNode(62, None, None), None)), TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None)))), TreeNode(81, TreeNode(75, TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(74, TreeNode(73, None, None), None)), TreeNode(78, TreeNode(77, TreeNode(76, None, None), None), TreeNode(80, TreeNode(79, None, None), None))), TreeNode(87, TreeNode(84, TreeNode(83, TreeNode(82, None, None), None), TreeNode(86, TreeNode(85, None, None), None)), TreeNode(90, TreeNode(89, TreeNode(88, None, None), None), TreeNode(91, None, None))))))) == [46, 23, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 22, 35, 29, 26, 25, 24, 28, 27, 32, 31, 30, 34, 33, 41, 38, 37, 36, 40, 39, 44, 43, 42, 45, 69, 58, 52, 49, 48, 47, 51, 50, 55, 54, 53, 57, 56, 64, 61, 60, 59, 63, 62, 67, 66, 65, 68, 81, 75, 72, 71, 70, 74, 73, 78, 77, 76, 80, 79, 87, 84, 83, 82, 86, 85, 90, 89, 88, 91]\nassert solution.preorderTraversal(TreeNode(37, TreeNode(19, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)))), TreeNode(28, TreeNode(24, TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(23, None, None)), TreeNode(26, TreeNode(25, None, None), TreeNode(27, None, None))), TreeNode(33, TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None)), TreeNode(35, TreeNode(34, None, None), TreeNode(36, None, None))))), TreeNode(55, TreeNode(46, TreeNode(42, TreeNode(40, TreeNode(39, TreeNode(38, None, None), None), TreeNode(41, None, None)), TreeNode(44, TreeNode(43, None, None), TreeNode(45, None, None))), TreeNode(51, TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(50, None, None)), TreeNode(53, TreeNode(52, None, None), TreeNode(54, None, None)))), TreeNode(64, TreeNode(60, TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(59, None, None)), TreeNode(62, TreeNode(61, None, None), TreeNode(63, None, None))), TreeNode(69, TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None)), TreeNode(71, TreeNode(70, None, None), TreeNode(72, None, None))))))) == [37, 19, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 17, 16, 18, 28, 24, 22, 21, 20, 23, 26, 25, 27, 33, 31, 30, 29, 32, 35, 34, 36, 55, 46, 42, 40, 39, 38, 41, 44, 43, 45, 51, 49, 48, 47, 50, 53, 52, 54, 64, 60, 58, 57, 56, 59, 62, 61, 63, 69, 67, 66, 65, 68, 71, 70, 72]\nassert solution.preorderTraversal(TreeNode(16, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), TreeNode(15, None, None)))), TreeNode(24, TreeNode(20, TreeNode(18, TreeNode(17, None, None), TreeNode(19, None, None)), TreeNode(22, TreeNode(21, None, None), TreeNode(23, None, None))), TreeNode(28, TreeNode(26, TreeNode(25, None, None), TreeNode(27, None, None)), TreeNode(30, TreeNode(29, None, None), TreeNode(31, None, None)))))) == [16, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 15, 24, 20, 18, 17, 19, 22, 21, 23, 28, 26, 25, 27, 30, 29, 31]\nassert solution.preorderTraversal(TreeNode(31, TreeNode(16, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), TreeNode(15, None, None)))), TreeNode(24, TreeNode(20, TreeNode(18, TreeNode(17, None, None), TreeNode(19, None, None)), TreeNode(22, TreeNode(21, None, None), TreeNode(23, None, None))), TreeNode(28, TreeNode(26, TreeNode(25, None, None), TreeNode(27, None, None)), TreeNode(30, TreeNode(29, None, None), None)))), TreeNode(46, TreeNode(39, TreeNode(35, TreeNode(33, TreeNode(32, None, None), TreeNode(34, None, None)), TreeNode(37, TreeNode(36, None, None), TreeNode(38, None, None))), TreeNode(43, TreeNode(41, TreeNode(40, None, None), TreeNode(42, None, None)), TreeNode(45, TreeNode(44, None, None), None))), TreeNode(54, TreeNode(50, TreeNode(48, TreeNode(47, None, None), TreeNode(49, None, None)), TreeNode(52, TreeNode(51, None, None), TreeNode(53, None, None))), TreeNode(58, TreeNode(56, TreeNode(55, None, None), TreeNode(57, None, None)), TreeNode(60, TreeNode(59, None, None), None)))))) == [31, 16, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 15, 24, 20, 18, 17, 19, 22, 21, 23, 28, 26, 25, 27, 30, 29, 46, 39, 35, 33, 32, 34, 37, 36, 38, 43, 41, 40, 42, 45, 44, 54, 50, 48, 47, 49, 52, 51, 53, 58, 56, 55, 57, 60, 59]\nassert solution.preorderTraversal(TreeNode(40, TreeNode(20, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None)))), TreeNode(30, TreeNode(25, TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(24, None, None)), TreeNode(28, TreeNode(27, TreeNode(26, None, None), None), TreeNode(29, None, None))), TreeNode(35, TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(34, None, None)), TreeNode(38, TreeNode(37, TreeNode(36, None, None), None), TreeNode(39, None, None))))), TreeNode(60, TreeNode(50, TreeNode(45, TreeNode(43, TreeNode(42, TreeNode(41, None, None), None), TreeNode(44, None, None)), TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(49, None, None))), TreeNode(55, TreeNode(53, TreeNode(52, TreeNode(51, None, None), None), TreeNode(54, None, None)), TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(59, None, None)))), TreeNode(70, TreeNode(65, TreeNode(63, TreeNode(62, TreeNode(61, None, None), None), TreeNode(64, None, None)), TreeNode(68, TreeNode(67, TreeNode(66, None, None), None), TreeNode(69, None, None))), TreeNode(75, TreeNode(73, TreeNode(72, TreeNode(71, None, None), None), TreeNode(74, None, None)), TreeNode(78, TreeNode(77, TreeNode(76, None, None), None), TreeNode(79, None, None))))))) == [40, 20, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19, 30, 25, 23, 22, 21, 24, 28, 27, 26, 29, 35, 33, 32, 31, 34, 38, 37, 36, 39, 60, 50, 45, 43, 42, 41, 44, 48, 47, 46, 49, 55, 53, 52, 51, 54, 58, 57, 56, 59, 70, 65, 63, 62, 61, 64, 68, 67, 66, 69, 75, 73, 72, 71, 74, 78, 77, 76, 79]\nassert solution.preorderTraversal(TreeNode(41, TreeNode(21, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(16, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(15, None, None)), TreeNode(19, TreeNode(18, TreeNode(17, None, None), None), TreeNode(20, None, None)))), TreeNode(31, TreeNode(26, TreeNode(24, TreeNode(23, TreeNode(22, None, None), None), TreeNode(25, None, None)), TreeNode(29, TreeNode(28, TreeNode(27, None, None), None), TreeNode(30, None, None))), TreeNode(36, TreeNode(34, TreeNode(33, TreeNode(32, None, None), None), TreeNode(35, None, None)), TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(40, None, None))))), TreeNode(61, TreeNode(51, TreeNode(46, TreeNode(44, TreeNode(43, TreeNode(42, None, None), None), TreeNode(45, None, None)), TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(50, None, None))), TreeNode(56, TreeNode(54, TreeNode(53, TreeNode(52, None, None), None), TreeNode(55, None, None)), TreeNode(59, TreeNode(58, TreeNode(57, None, None), None), TreeNode(60, None, None)))), TreeNode(71, TreeNode(66, TreeNode(64, TreeNode(63, TreeNode(62, None, None), None), TreeNode(65, None, None)), TreeNode(69, TreeNode(68, TreeNode(67, None, None), None), TreeNode(70, None, None))), TreeNode(76, TreeNode(74, TreeNode(73, TreeNode(72, None, None), None), TreeNode(75, None, None)), TreeNode(79, TreeNode(78, TreeNode(77, None, None), None), TreeNode(80, None, None))))))) == [41, 21, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 16, 14, 13, 12, 15, 19, 18, 17, 20, 31, 26, 24, 23, 22, 25, 29, 28, 27, 30, 36, 34, 33, 32, 35, 39, 38, 37, 40, 61, 51, 46, 44, 43, 42, 45, 49, 48, 47, 50, 56, 54, 53, 52, 55, 59, 58, 57, 60, 71, 66, 64, 63, 62, 65, 69, 68, 67, 70, 76, 74, 73, 72, 75, 79, 78, 77, 80]\nassert solution.preorderTraversal(TreeNode(37, TreeNode(19, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)))), TreeNode(28, TreeNode(24, TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(23, None, None)), TreeNode(26, TreeNode(25, None, None), TreeNode(27, None, None))), TreeNode(33, TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None)), TreeNode(35, TreeNode(34, None, None), TreeNode(36, None, None))))), TreeNode(55, TreeNode(46, TreeNode(42, TreeNode(40, TreeNode(39, TreeNode(38, None, None), None), TreeNode(41, None, None)), TreeNode(44, TreeNode(43, None, None), TreeNode(45, None, None))), TreeNode(51, TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(50, None, None)), TreeNode(53, TreeNode(52, None, None), TreeNode(54, None, None)))), TreeNode(64, TreeNode(60, TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(59, None, None)), TreeNode(62, TreeNode(61, None, None), TreeNode(63, None, None))), TreeNode(69, TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None)), TreeNode(71, TreeNode(70, None, None), TreeNode(72, None, None))))))) == [37, 19, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 17, 16, 18, 28, 24, 22, 21, 20, 23, 26, 25, 27, 33, 31, 30, 29, 32, 35, 34, 36, 55, 46, 42, 40, 39, 38, 41, 44, 43, 45, 51, 49, 48, 47, 50, 53, 52, 54, 64, 60, 58, 57, 56, 59, 62, 61, 63, 69, 67, 66, 65, 68, 71, 70, 72]\nassert solution.preorderTraversal(TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(16, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(15, None, None)), TreeNode(19, TreeNode(18, TreeNode(17, None, None), None), TreeNode(20, None, None))))) == [11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 16, 14, 13, 12, 15, 19, 18, 17, 20]\nassert solution.preorderTraversal(TreeNode(14, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(11, TreeNode(9, TreeNode(8, None, None), TreeNode(10, None, None)), TreeNode(13, TreeNode(12, None, None), None))), TreeNode(21, TreeNode(18, TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)), TreeNode(20, TreeNode(19, None, None), None)), TreeNode(24, TreeNode(23, TreeNode(22, None, None), None), TreeNode(26, TreeNode(25, None, None), None))))) == [14, 7, 4, 2, 1, 3, 6, 5, 11, 9, 8, 10, 13, 12, 21, 18, 16, 15, 17, 20, 19, 24, 23, 22, 26, 25]\nassert solution.preorderTraversal(TreeNode(17, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(13, TreeNode(11, TreeNode(10, None, None), TreeNode(12, None, None)), TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)))), TreeNode(25, TreeNode(21, TreeNode(19, TreeNode(18, None, None), TreeNode(20, None, None)), TreeNode(23, TreeNode(22, None, None), TreeNode(24, None, None))), TreeNode(29, TreeNode(27, TreeNode(26, None, None), TreeNode(28, None, None)), TreeNode(31, TreeNode(30, None, None), TreeNode(32, None, None)))))) == [17, 9, 5, 3, 2, 1, 4, 7, 6, 8, 13, 11, 10, 12, 15, 14, 16, 25, 21, 19, 18, 20, 23, 22, 24, 29, 27, 26, 28, 31, 30, 32]\nassert solution.preorderTraversal(TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None))))) == [10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19]\nassert solution.preorderTraversal(TreeNode(33, TreeNode(17, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(13, TreeNode(11, TreeNode(10, None, None), TreeNode(12, None, None)), TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)))), TreeNode(25, TreeNode(21, TreeNode(19, TreeNode(18, None, None), TreeNode(20, None, None)), TreeNode(23, TreeNode(22, None, None), TreeNode(24, None, None))), TreeNode(29, TreeNode(27, TreeNode(26, None, None), TreeNode(28, None, None)), TreeNode(31, TreeNode(30, None, None), TreeNode(32, None, None))))), TreeNode(49, TreeNode(41, TreeNode(37, TreeNode(35, TreeNode(34, None, None), TreeNode(36, None, None)), TreeNode(39, TreeNode(38, None, None), TreeNode(40, None, None))), TreeNode(45, TreeNode(43, TreeNode(42, None, None), TreeNode(44, None, None)), TreeNode(47, TreeNode(46, None, None), TreeNode(48, None, None)))), TreeNode(57, TreeNode(53, TreeNode(51, TreeNode(50, None, None), TreeNode(52, None, None)), TreeNode(55, TreeNode(54, None, None), TreeNode(56, None, None))), TreeNode(61, TreeNode(59, TreeNode(58, None, None), TreeNode(60, None, None)), TreeNode(63, TreeNode(62, None, None), TreeNode(64, None, None))))))) == [33, 17, 9, 5, 3, 2, 1, 4, 7, 6, 8, 13, 11, 10, 12, 15, 14, 16, 25, 21, 19, 18, 20, 23, 22, 24, 29, 27, 26, 28, 31, 30, 32, 49, 41, 37, 35, 34, 36, 39, 38, 40, 45, 43, 42, 44, 47, 46, 48, 57, 53, 51, 50, 52, 55, 54, 56, 61, 59, 58, 60, 63, 62, 64]\nassert solution.preorderTraversal(TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(23, TreeNode(22, None, None), None))))) == [12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 23, 22]\nassert solution.preorderTraversal(None) == []\nassert solution.preorderTraversal(TreeNode(50, TreeNode(25, TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(19, TreeNode(16, TreeNode(15, TreeNode(14, None, None), None), TreeNode(18, TreeNode(17, None, None), None)), TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(24, TreeNode(23, None, None), None)))), TreeNode(38, TreeNode(32, TreeNode(29, TreeNode(27, TreeNode(26, None, None), TreeNode(28, None, None)), TreeNode(31, TreeNode(30, None, None), None)), TreeNode(35, TreeNode(34, TreeNode(33, None, None), None), TreeNode(37, TreeNode(36, None, None), None))), TreeNode(44, TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(43, TreeNode(42, None, None), None)), TreeNode(47, TreeNode(46, TreeNode(45, None, None), None), TreeNode(49, TreeNode(48, None, None), None))))), TreeNode(75, TreeNode(63, TreeNode(57, TreeNode(54, TreeNode(52, TreeNode(51, None, None), TreeNode(53, None, None)), TreeNode(56, TreeNode(55, None, None), None)), TreeNode(60, TreeNode(59, TreeNode(58, None, None), None), TreeNode(62, TreeNode(61, None, None), None))), TreeNode(69, TreeNode(66, TreeNode(65, TreeNode(64, None, None), None), TreeNode(68, TreeNode(67, None, None), None)), TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(74, TreeNode(73, None, None), None)))), TreeNode(88, TreeNode(82, TreeNode(79, TreeNode(77, TreeNode(76, None, None), TreeNode(78, None, None)), TreeNode(81, TreeNode(80, None, None), None)), TreeNode(85, TreeNode(84, TreeNode(83, None, None), None), TreeNode(87, TreeNode(86, None, None), None))), TreeNode(94, TreeNode(91, TreeNode(90, TreeNode(89, None, None), None), TreeNode(93, TreeNode(92, None, None), None)), TreeNode(97, TreeNode(96, TreeNode(95, None, None), None), TreeNode(99, TreeNode(98, None, None), None))))))) == [50, 25, 13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 19, 16, 15, 14, 18, 17, 22, 21, 20, 24, 23, 38, 32, 29, 27, 26, 28, 31, 30, 35, 34, 33, 37, 36, 44, 41, 40, 39, 43, 42, 47, 46, 45, 49, 48, 75, 63, 57, 54, 52, 51, 53, 56, 55, 60, 59, 58, 62, 61, 69, 66, 65, 64, 68, 67, 72, 71, 70, 74, 73, 88, 82, 79, 77, 76, 78, 81, 80, 85, 84, 83, 87, 86, 94, 91, 90, 89, 93, 92, 97, 96, 95, 99, 98]\nassert solution.preorderTraversal(TreeNode(37, TreeNode(19, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)))), TreeNode(28, TreeNode(24, TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(23, None, None)), TreeNode(26, TreeNode(25, None, None), TreeNode(27, None, None))), TreeNode(33, TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None)), TreeNode(35, TreeNode(34, None, None), TreeNode(36, None, None))))), TreeNode(55, TreeNode(46, TreeNode(42, TreeNode(40, TreeNode(39, TreeNode(38, None, None), None), TreeNode(41, None, None)), TreeNode(44, TreeNode(43, None, None), TreeNode(45, None, None))), TreeNode(51, TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(50, None, None)), TreeNode(53, TreeNode(52, None, None), TreeNode(54, None, None)))), TreeNode(64, TreeNode(60, TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(59, None, None)), TreeNode(62, TreeNode(61, None, None), TreeNode(63, None, None))), TreeNode(69, TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None)), TreeNode(71, TreeNode(70, None, None), TreeNode(72, None, None))))))) == [37, 19, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 17, 16, 18, 28, 24, 22, 21, 20, 23, 26, 25, 27, 33, 31, 30, 29, 32, 35, 34, 36, 55, 46, 42, 40, 39, 38, 41, 44, 43, 45, 51, 49, 48, 47, 50, 53, 52, 54, 64, 60, 58, 57, 56, 59, 62, 61, 63, 69, 67, 66, 65, 68, 71, 70, 72]\nassert solution.preorderTraversal(TreeNode(24, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(23, TreeNode(22, None, None), None)))), TreeNode(36, TreeNode(30, TreeNode(27, TreeNode(26, TreeNode(25, None, None), None), TreeNode(29, TreeNode(28, None, None), None)), TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(35, TreeNode(34, None, None), None))), TreeNode(42, TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(41, TreeNode(40, None, None), None)), TreeNode(45, TreeNode(44, TreeNode(43, None, None), None), TreeNode(47, TreeNode(46, None, None), None)))))) == [24, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 23, 22, 36, 30, 27, 26, 25, 29, 28, 33, 32, 31, 35, 34, 42, 39, 38, 37, 41, 40, 45, 44, 43, 47, 46]\nassert solution.preorderTraversal(TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None))) == [3, 2, 1, 5, 4]\nassert solution.preorderTraversal(TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None)))))) == [22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 38, 36, 35, 34, 37, 41, 40, 39, 42]\nassert solution.preorderTraversal(TreeNode(19, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)))), TreeNode(29, TreeNode(24, TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(23, None, None)), TreeNode(27, TreeNode(26, TreeNode(25, None, None), None), TreeNode(28, None, None))), TreeNode(34, TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(33, None, None)), TreeNode(36, TreeNode(35, None, None), TreeNode(37, None, None)))))) == [19, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 17, 16, 18, 29, 24, 22, 21, 20, 23, 27, 26, 25, 28, 34, 32, 31, 30, 33, 36, 35, 37]\nassert solution.preorderTraversal(TreeNode(33, TreeNode(17, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(13, TreeNode(11, TreeNode(10, None, None), TreeNode(12, None, None)), TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)))), TreeNode(25, TreeNode(21, TreeNode(19, TreeNode(18, None, None), TreeNode(20, None, None)), TreeNode(23, TreeNode(22, None, None), TreeNode(24, None, None))), TreeNode(29, TreeNode(27, TreeNode(26, None, None), TreeNode(28, None, None)), TreeNode(31, TreeNode(30, None, None), TreeNode(32, None, None))))), TreeNode(50, TreeNode(42, TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(40, TreeNode(39, None, None), TreeNode(41, None, None))), TreeNode(46, TreeNode(44, TreeNode(43, None, None), TreeNode(45, None, None)), TreeNode(48, TreeNode(47, None, None), TreeNode(49, None, None)))), TreeNode(58, TreeNode(54, TreeNode(52, TreeNode(51, None, None), TreeNode(53, None, None)), TreeNode(56, TreeNode(55, None, None), TreeNode(57, None, None))), TreeNode(62, TreeNode(60, TreeNode(59, None, None), TreeNode(61, None, None)), TreeNode(64, TreeNode(63, None, None), TreeNode(65, None, None))))))) == [33, 17, 9, 5, 3, 2, 1, 4, 7, 6, 8, 13, 11, 10, 12, 15, 14, 16, 25, 21, 19, 18, 20, 23, 22, 24, 29, 27, 26, 28, 31, 30, 32, 50, 42, 38, 36, 35, 34, 37, 40, 39, 41, 46, 44, 43, 45, 48, 47, 49, 58, 54, 52, 51, 53, 56, 55, 57, 62, 60, 59, 61, 64, 63, 65]\nassert solution.preorderTraversal(TreeNode(49, TreeNode(25, TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(19, TreeNode(16, TreeNode(15, TreeNode(14, None, None), None), TreeNode(18, TreeNode(17, None, None), None)), TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(24, TreeNode(23, None, None), None)))), TreeNode(37, TreeNode(31, TreeNode(28, TreeNode(27, TreeNode(26, None, None), None), TreeNode(30, TreeNode(29, None, None), None)), TreeNode(34, TreeNode(33, TreeNode(32, None, None), None), TreeNode(36, TreeNode(35, None, None), None))), TreeNode(43, TreeNode(40, TreeNode(39, TreeNode(38, None, None), None), TreeNode(42, TreeNode(41, None, None), None)), TreeNode(46, TreeNode(45, TreeNode(44, None, None), None), TreeNode(48, TreeNode(47, None, None), None))))), TreeNode(73, TreeNode(61, TreeNode(55, TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(54, TreeNode(53, None, None), None)), TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(60, TreeNode(59, None, None), None))), TreeNode(67, TreeNode(64, TreeNode(63, TreeNode(62, None, None), None), TreeNode(66, TreeNode(65, None, None), None)), TreeNode(70, TreeNode(69, TreeNode(68, None, None), None), TreeNode(72, TreeNode(71, None, None), None)))), TreeNode(85, TreeNode(79, TreeNode(76, TreeNode(75, TreeNode(74, None, None), None), TreeNode(78, TreeNode(77, None, None), None)), TreeNode(82, TreeNode(81, TreeNode(80, None, None), None), TreeNode(84, TreeNode(83, None, None), None))), TreeNode(91, TreeNode(88, TreeNode(87, TreeNode(86, None, None), None), TreeNode(90, TreeNode(89, None, None), None)), TreeNode(94, TreeNode(93, TreeNode(92, None, None), None), TreeNode(96, TreeNode(95, None, None), None))))))) == [49, 25, 13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 19, 16, 15, 14, 18, 17, 22, 21, 20, 24, 23, 37, 31, 28, 27, 26, 30, 29, 34, 33, 32, 36, 35, 43, 40, 39, 38, 42, 41, 46, 45, 44, 48, 47, 73, 61, 55, 52, 51, 50, 54, 53, 58, 57, 56, 60, 59, 67, 64, 63, 62, 66, 65, 70, 69, 68, 72, 71, 85, 79, 76, 75, 74, 78, 77, 82, 81, 80, 84, 83, 91, 88, 87, 86, 90, 89, 94, 93, 92, 96, 95]\nassert solution.preorderTraversal(TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None))) == [2, 1, 3]\nassert solution.preorderTraversal(TreeNode(36, TreeNode(18, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(14, TreeNode(12, TreeNode(11, TreeNode(10, None, None), None), TreeNode(13, None, None)), TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)))), TreeNode(27, TreeNode(23, TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)), TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None))), TreeNode(32, TreeNode(30, TreeNode(29, TreeNode(28, None, None), None), TreeNode(31, None, None)), TreeNode(34, TreeNode(33, None, None), TreeNode(35, None, None))))), TreeNode(54, TreeNode(45, TreeNode(41, TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(40, None, None)), TreeNode(43, TreeNode(42, None, None), TreeNode(44, None, None))), TreeNode(50, TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(49, None, None)), TreeNode(52, TreeNode(51, None, None), TreeNode(53, None, None)))), TreeNode(63, TreeNode(59, TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(58, None, None)), TreeNode(61, TreeNode(60, None, None), TreeNode(62, None, None))), TreeNode(68, TreeNode(66, TreeNode(65, TreeNode(64, None, None), None), TreeNode(67, None, None)), TreeNode(70, TreeNode(69, None, None), TreeNode(71, None, None))))))) == [36, 18, 9, 5, 3, 2, 1, 4, 7, 6, 8, 14, 12, 11, 10, 13, 16, 15, 17, 27, 23, 21, 20, 19, 22, 25, 24, 26, 32, 30, 29, 28, 31, 34, 33, 35, 54, 45, 41, 39, 38, 37, 40, 43, 42, 44, 50, 48, 47, 46, 49, 52, 51, 53, 63, 59, 57, 56, 55, 58, 61, 60, 62, 68, 66, 65, 64, 67, 70, 69, 71]\nassert solution.preorderTraversal(TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(19, TreeNode(16, TreeNode(15, TreeNode(14, None, None), None), TreeNode(18, TreeNode(17, None, None), None)), TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(24, TreeNode(23, None, None), None))))) == [13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 19, 16, 15, 14, 18, 17, 22, 21, 20, 24, 23]\nassert solution.preorderTraversal(TreeNode(14, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(11, TreeNode(9, TreeNode(8, None, None), TreeNode(10, None, None)), TreeNode(13, TreeNode(12, None, None), None))), TreeNode(21, TreeNode(18, TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)), TreeNode(20, TreeNode(19, None, None), None)), TreeNode(24, TreeNode(23, TreeNode(22, None, None), None), TreeNode(26, TreeNode(25, None, None), None))))) == [14, 7, 4, 2, 1, 3, 6, 5, 11, 9, 8, 10, 13, 12, 21, 18, 16, 15, 17, 20, 19, 24, 23, 22, 26, 25]\nassert solution.preorderTraversal(TreeNode(18, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(14, TreeNode(12, TreeNode(11, TreeNode(10, None, None), None), TreeNode(13, None, None)), TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)))), TreeNode(27, TreeNode(23, TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)), TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None))), TreeNode(32, TreeNode(30, TreeNode(29, TreeNode(28, None, None), None), TreeNode(31, None, None)), TreeNode(34, TreeNode(33, None, None), TreeNode(35, None, None)))))) == [18, 9, 5, 3, 2, 1, 4, 7, 6, 8, 14, 12, 11, 10, 13, 16, 15, 17, 27, 23, 21, 20, 19, 22, 25, 24, 26, 32, 30, 29, 28, 31, 34, 33, 35]\nassert solution.preorderTraversal(TreeNode(30, TreeNode(15, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), None))), TreeNode(23, TreeNode(19, TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)), TreeNode(21, TreeNode(20, None, None), TreeNode(22, None, None))), TreeNode(27, TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None)), TreeNode(29, TreeNode(28, None, None), None)))), TreeNode(45, TreeNode(38, TreeNode(34, TreeNode(32, TreeNode(31, None, None), TreeNode(33, None, None)), TreeNode(36, TreeNode(35, None, None), TreeNode(37, None, None))), TreeNode(42, TreeNode(40, TreeNode(39, None, None), TreeNode(41, None, None)), TreeNode(44, TreeNode(43, None, None), None))), TreeNode(53, TreeNode(49, TreeNode(47, TreeNode(46, None, None), TreeNode(48, None, None)), TreeNode(51, TreeNode(50, None, None), TreeNode(52, None, None))), TreeNode(57, TreeNode(55, TreeNode(54, None, None), TreeNode(56, None, None)), TreeNode(59, TreeNode(58, None, None), None)))))) == [30, 15, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 23, 19, 17, 16, 18, 21, 20, 22, 27, 25, 24, 26, 29, 28, 45, 38, 34, 32, 31, 33, 36, 35, 37, 42, 40, 39, 41, 44, 43, 53, 49, 47, 46, 48, 51, 50, 52, 57, 55, 54, 56, 59, 58]\nassert solution.preorderTraversal(TreeNode(23, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)))), TreeNode(34, TreeNode(29, TreeNode(26, TreeNode(25, TreeNode(24, None, None), None), TreeNode(28, TreeNode(27, None, None), None)), TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(33, None, None))), TreeNode(40, TreeNode(37, TreeNode(36, TreeNode(35, None, None), None), TreeNode(39, TreeNode(38, None, None), None)), TreeNode(43, TreeNode(42, TreeNode(41, None, None), None), TreeNode(44, None, None)))))) == [23, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 22, 34, 29, 26, 25, 24, 28, 27, 32, 31, 30, 33, 40, 37, 36, 35, 39, 38, 43, 42, 41, 44]\nassert solution.preorderTraversal(TreeNode(23, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)))), TreeNode(35, TreeNode(29, TreeNode(26, TreeNode(25, TreeNode(24, None, None), None), TreeNode(28, TreeNode(27, None, None), None)), TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(34, TreeNode(33, None, None), None))), TreeNode(41, TreeNode(38, TreeNode(37, TreeNode(36, None, None), None), TreeNode(40, TreeNode(39, None, None), None)), TreeNode(44, TreeNode(43, TreeNode(42, None, None), None), TreeNode(45, None, None)))))) == [23, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 22, 35, 29, 26, 25, 24, 28, 27, 32, 31, 30, 34, 33, 41, 38, 37, 36, 40, 39, 44, 43, 42, 45]\nassert solution.preorderTraversal(TreeNode(37, TreeNode(19, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)))), TreeNode(28, TreeNode(24, TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(23, None, None)), TreeNode(26, TreeNode(25, None, None), TreeNode(27, None, None))), TreeNode(33, TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None)), TreeNode(35, TreeNode(34, None, None), TreeNode(36, None, None))))), TreeNode(55, TreeNode(46, TreeNode(42, TreeNode(40, TreeNode(39, TreeNode(38, None, None), None), TreeNode(41, None, None)), TreeNode(44, TreeNode(43, None, None), TreeNode(45, None, None))), TreeNode(51, TreeNode(49, TreeNode(48, TreeNode(47, None, None), None), TreeNode(50, None, None)), TreeNode(53, TreeNode(52, None, None), TreeNode(54, None, None)))), TreeNode(64, TreeNode(60, TreeNode(58, TreeNode(57, TreeNode(56, None, None), None), TreeNode(59, None, None)), TreeNode(62, TreeNode(61, None, None), TreeNode(63, None, None))), TreeNode(69, TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None)), TreeNode(71, TreeNode(70, None, None), TreeNode(72, None, None))))))) == [37, 19, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 17, 16, 18, 28, 24, 22, 21, 20, 23, 26, 25, 27, 33, 31, 30, 29, 32, 35, 34, 36, 55, 46, 42, 40, 39, 38, 41, 44, 43, 45, 51, 49, 48, 47, 50, 53, 52, 54, 64, 60, 58, 57, 56, 59, 62, 61, 63, 69, 67, 66, 65, 68, 71, 70, 72]\nassert solution.preorderTraversal(TreeNode(36, TreeNode(18, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(14, TreeNode(12, TreeNode(11, TreeNode(10, None, None), None), TreeNode(13, None, None)), TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)))), TreeNode(27, TreeNode(23, TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)), TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None))), TreeNode(32, TreeNode(30, TreeNode(29, TreeNode(28, None, None), None), TreeNode(31, None, None)), TreeNode(34, TreeNode(33, None, None), TreeNode(35, None, None))))), TreeNode(54, TreeNode(45, TreeNode(41, TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(40, None, None)), TreeNode(43, TreeNode(42, None, None), TreeNode(44, None, None))), TreeNode(50, TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(49, None, None)), TreeNode(52, TreeNode(51, None, None), TreeNode(53, None, None)))), TreeNode(63, TreeNode(59, TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(58, None, None)), TreeNode(61, TreeNode(60, None, None), TreeNode(62, None, None))), TreeNode(67, TreeNode(65, TreeNode(64, None, None), TreeNode(66, None, None)), TreeNode(69, TreeNode(68, None, None), TreeNode(70, None, None))))))) == [36, 18, 9, 5, 3, 2, 1, 4, 7, 6, 8, 14, 12, 11, 10, 13, 16, 15, 17, 27, 23, 21, 20, 19, 22, 25, 24, 26, 32, 30, 29, 28, 31, 34, 33, 35, 54, 45, 41, 39, 38, 37, 40, 43, 42, 44, 50, 48, 47, 46, 49, 52, 51, 53, 63, 59, 57, 56, 55, 58, 61, 60, 62, 67, 65, 64, 66, 69, 68, 70]\nassert solution.preorderTraversal(TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None)))) == [6, 3, 2, 1, 5, 4, 9, 8, 7, 10]\nassert solution.preorderTraversal(TreeNode(45, TreeNode(23, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)))), TreeNode(34, TreeNode(29, TreeNode(26, TreeNode(25, TreeNode(24, None, None), None), TreeNode(28, TreeNode(27, None, None), None)), TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(33, None, None))), TreeNode(40, TreeNode(37, TreeNode(36, TreeNode(35, None, None), None), TreeNode(39, TreeNode(38, None, None), None)), TreeNode(43, TreeNode(42, TreeNode(41, None, None), None), TreeNode(44, None, None))))), TreeNode(68, TreeNode(57, TreeNode(51, TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(50, TreeNode(49, None, None), None)), TreeNode(54, TreeNode(53, TreeNode(52, None, None), None), TreeNode(56, TreeNode(55, None, None), None))), TreeNode(63, TreeNode(60, TreeNode(59, TreeNode(58, None, None), None), TreeNode(62, TreeNode(61, None, None), None)), TreeNode(66, TreeNode(65, TreeNode(64, None, None), None), TreeNode(67, None, None)))), TreeNode(79, TreeNode(74, TreeNode(71, TreeNode(70, TreeNode(69, None, None), None), TreeNode(73, TreeNode(72, None, None), None)), TreeNode(77, TreeNode(76, TreeNode(75, None, None), None), TreeNode(78, None, None))), TreeNode(85, TreeNode(82, TreeNode(81, TreeNode(80, None, None), None), TreeNode(84, TreeNode(83, None, None), None)), TreeNode(88, TreeNode(87, TreeNode(86, None, None), None), TreeNode(89, None, None))))))) == [45, 23, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 22, 34, 29, 26, 25, 24, 28, 27, 32, 31, 30, 33, 40, 37, 36, 35, 39, 38, 43, 42, 41, 44, 68, 57, 51, 48, 47, 46, 50, 49, 54, 53, 52, 56, 55, 63, 60, 59, 58, 62, 61, 66, 65, 64, 67, 79, 74, 71, 70, 69, 73, 72, 77, 76, 75, 78, 85, 82, 81, 80, 84, 83, 88, 87, 86, 89]\nassert solution.preorderTraversal(TreeNode(39, TreeNode(20, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(18, TreeNode(17, TreeNode(16, None, None), None), TreeNode(19, None, None)))), TreeNode(30, TreeNode(25, TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(24, None, None)), TreeNode(28, TreeNode(27, TreeNode(26, None, None), None), TreeNode(29, None, None))), TreeNode(35, TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(34, None, None)), TreeNode(37, TreeNode(36, None, None), TreeNode(38, None, None))))), TreeNode(59, TreeNode(49, TreeNode(44, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(43, None, None)), TreeNode(47, TreeNode(46, TreeNode(45, None, None), None), TreeNode(48, None, None))), TreeNode(54, TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(53, None, None)), TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(58, None, None)))), TreeNode(69, TreeNode(64, TreeNode(62, TreeNode(61, TreeNode(60, None, None), None), TreeNode(63, None, None)), TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(68, None, None))), TreeNode(74, TreeNode(72, TreeNode(71, TreeNode(70, None, None), None), TreeNode(73, None, None)), TreeNode(76, TreeNode(75, None, None), TreeNode(77, None, None))))))) == [39, 20, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 18, 17, 16, 19, 30, 25, 23, 22, 21, 24, 28, 27, 26, 29, 35, 33, 32, 31, 34, 37, 36, 38, 59, 49, 44, 42, 41, 40, 43, 47, 46, 45, 48, 54, 52, 51, 50, 53, 57, 56, 55, 58, 69, 64, 62, 61, 60, 63, 67, 66, 65, 68, 74, 72, 71, 70, 73, 76, 75, 77]\nassert solution.preorderTraversal(TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(19, TreeNode(16, TreeNode(15, TreeNode(14, None, None), None), TreeNode(18, TreeNode(17, None, None), None)), TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(24, TreeNode(23, None, None), None))))) == [13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 19, 16, 15, 14, 18, 17, 22, 21, 20, 24, 23]\nassert solution.preorderTraversal(TreeNode(32, TreeNode(16, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), TreeNode(15, None, None)))), TreeNode(24, TreeNode(20, TreeNode(18, TreeNode(17, None, None), TreeNode(19, None, None)), TreeNode(22, TreeNode(21, None, None), TreeNode(23, None, None))), TreeNode(28, TreeNode(26, TreeNode(25, None, None), TreeNode(27, None, None)), TreeNode(30, TreeNode(29, None, None), TreeNode(31, None, None))))), TreeNode(48, TreeNode(40, TreeNode(36, TreeNode(34, TreeNode(33, None, None), TreeNode(35, None, None)), TreeNode(38, TreeNode(37, None, None), TreeNode(39, None, None))), TreeNode(44, TreeNode(42, TreeNode(41, None, None), TreeNode(43, None, None)), TreeNode(46, TreeNode(45, None, None), TreeNode(47, None, None)))), TreeNode(56, TreeNode(52, TreeNode(50, TreeNode(49, None, None), TreeNode(51, None, None)), TreeNode(54, TreeNode(53, None, None), TreeNode(55, None, None))), TreeNode(60, TreeNode(58, TreeNode(57, None, None), TreeNode(59, None, None)), TreeNode(62, TreeNode(61, None, None), None)))))) == [32, 16, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 15, 24, 20, 18, 17, 19, 22, 21, 23, 28, 26, 25, 27, 30, 29, 31, 48, 40, 36, 34, 33, 35, 38, 37, 39, 44, 42, 41, 43, 46, 45, 47, 56, 52, 50, 49, 51, 54, 53, 55, 60, 58, 57, 59, 62, 61]\nassert solution.preorderTraversal(TreeNode(24, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(23, TreeNode(22, None, None), None)))), TreeNode(36, TreeNode(30, TreeNode(27, TreeNode(26, TreeNode(25, None, None), None), TreeNode(29, TreeNode(28, None, None), None)), TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(35, TreeNode(34, None, None), None))), TreeNode(42, TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(41, TreeNode(40, None, None), None)), TreeNode(45, TreeNode(44, TreeNode(43, None, None), None), TreeNode(47, TreeNode(46, None, None), None)))))) == [24, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 23, 22, 36, 30, 27, 26, 25, 29, 28, 33, 32, 31, 35, 34, 42, 39, 38, 37, 41, 40, 45, 44, 43, 47, 46]\nassert solution.preorderTraversal(TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None)))))) == [22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 38, 36, 35, 34, 37, 41, 40, 39, 42]\nassert solution.preorderTraversal(TreeNode(26, TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(20, TreeNode(17, TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)), TreeNode(19, TreeNode(18, None, None), None)), TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(25, TreeNode(24, None, None), None)))), TreeNode(39, TreeNode(33, TreeNode(30, TreeNode(28, TreeNode(27, None, None), TreeNode(29, None, None)), TreeNode(32, TreeNode(31, None, None), None)), TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(38, TreeNode(37, None, None), None))), TreeNode(45, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(44, TreeNode(43, None, None), None)), TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(50, TreeNode(49, None, None), None)))))) == [26, 13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 20, 17, 15, 14, 16, 19, 18, 23, 22, 21, 25, 24, 39, 33, 30, 28, 27, 29, 32, 31, 36, 35, 34, 38, 37, 45, 42, 41, 40, 44, 43, 48, 47, 46, 50, 49]\nassert solution.preorderTraversal(TreeNode(43, TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None))))), TreeNode(65, TreeNode(54, TreeNode(49, TreeNode(46, TreeNode(45, TreeNode(44, None, None), None), TreeNode(48, TreeNode(47, None, None), None)), TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(53, None, None))), TreeNode(60, TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(59, TreeNode(58, None, None), None)), TreeNode(63, TreeNode(62, TreeNode(61, None, None), None), TreeNode(64, None, None)))), TreeNode(76, TreeNode(71, TreeNode(68, TreeNode(67, TreeNode(66, None, None), None), TreeNode(70, TreeNode(69, None, None), None)), TreeNode(74, TreeNode(73, TreeNode(72, None, None), None), TreeNode(75, None, None))), TreeNode(81, TreeNode(79, TreeNode(78, TreeNode(77, None, None), None), TreeNode(80, None, None)), TreeNode(84, TreeNode(83, TreeNode(82, None, None), None), TreeNode(85, None, None))))))) == [43, 22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 38, 36, 35, 34, 37, 41, 40, 39, 42, 65, 54, 49, 46, 45, 44, 48, 47, 52, 51, 50, 53, 60, 57, 56, 55, 59, 58, 63, 62, 61, 64, 76, 71, 68, 67, 66, 70, 69, 74, 73, 72, 75, 81, 79, 78, 77, 80, 84, 83, 82, 85]\nassert solution.preorderTraversal(TreeNode(26, TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(20, TreeNode(17, TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)), TreeNode(19, TreeNode(18, None, None), None)), TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(25, TreeNode(24, None, None), None)))), TreeNode(39, TreeNode(33, TreeNode(30, TreeNode(28, TreeNode(27, None, None), TreeNode(29, None, None)), TreeNode(32, TreeNode(31, None, None), None)), TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(38, TreeNode(37, None, None), None))), TreeNode(45, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(44, TreeNode(43, None, None), None)), TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(50, TreeNode(49, None, None), None)))))) == [26, 13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 20, 17, 15, 14, 16, 19, 18, 23, 22, 21, 25, 24, 39, 33, 30, 28, 27, 29, 32, 31, 36, 35, 34, 38, 37, 45, 42, 41, 40, 44, 43, 48, 47, 46, 50, 49]\nassert solution.preorderTraversal(TreeNode(35, TreeNode(18, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(14, TreeNode(12, TreeNode(11, TreeNode(10, None, None), None), TreeNode(13, None, None)), TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)))), TreeNode(27, TreeNode(23, TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)), TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None))), TreeNode(31, TreeNode(29, TreeNode(28, None, None), TreeNode(30, None, None)), TreeNode(33, TreeNode(32, None, None), TreeNode(34, None, None))))), TreeNode(52, TreeNode(44, TreeNode(40, TreeNode(38, TreeNode(37, TreeNode(36, None, None), None), TreeNode(39, None, None)), TreeNode(42, TreeNode(41, None, None), TreeNode(43, None, None))), TreeNode(48, TreeNode(46, TreeNode(45, None, None), TreeNode(47, None, None)), TreeNode(50, TreeNode(49, None, None), TreeNode(51, None, None)))), TreeNode(61, TreeNode(57, TreeNode(55, TreeNode(54, TreeNode(53, None, None), None), TreeNode(56, None, None)), TreeNode(59, TreeNode(58, None, None), TreeNode(60, None, None))), TreeNode(65, TreeNode(63, TreeNode(62, None, None), TreeNode(64, None, None)), TreeNode(67, TreeNode(66, None, None), TreeNode(68, None, None))))))) == [35, 18, 9, 5, 3, 2, 1, 4, 7, 6, 8, 14, 12, 11, 10, 13, 16, 15, 17, 27, 23, 21, 20, 19, 22, 25, 24, 26, 31, 29, 28, 30, 33, 32, 34, 52, 44, 40, 38, 37, 36, 39, 42, 41, 43, 48, 46, 45, 47, 50, 49, 51, 61, 57, 55, 54, 53, 56, 59, 58, 60, 65, 63, 62, 64, 67, 66, 68]\nassert solution.preorderTraversal(TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(11, TreeNode(9, TreeNode(8, None, None), TreeNode(10, None, None)), TreeNode(13, TreeNode(12, None, None), None)))) == [7, 4, 2, 1, 3, 6, 5, 11, 9, 8, 10, 13, 12]\nassert solution.preorderTraversal(TreeNode(48, TreeNode(24, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(23, TreeNode(22, None, None), None)))), TreeNode(36, TreeNode(30, TreeNode(27, TreeNode(26, TreeNode(25, None, None), None), TreeNode(29, TreeNode(28, None, None), None)), TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(35, TreeNode(34, None, None), None))), TreeNode(42, TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(41, TreeNode(40, None, None), None)), TreeNode(45, TreeNode(44, TreeNode(43, None, None), None), TreeNode(47, TreeNode(46, None, None), None))))), TreeNode(72, TreeNode(60, TreeNode(54, TreeNode(51, TreeNode(50, TreeNode(49, None, None), None), TreeNode(53, TreeNode(52, None, None), None)), TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(59, TreeNode(58, None, None), None))), TreeNode(66, TreeNode(63, TreeNode(62, TreeNode(61, None, None), None), TreeNode(65, TreeNode(64, None, None), None)), TreeNode(69, TreeNode(68, TreeNode(67, None, None), None), TreeNode(71, TreeNode(70, None, None), None)))), TreeNode(84, TreeNode(78, TreeNode(75, TreeNode(74, TreeNode(73, None, None), None), TreeNode(77, TreeNode(76, None, None), None)), TreeNode(81, TreeNode(80, TreeNode(79, None, None), None), TreeNode(83, TreeNode(82, None, None), None))), TreeNode(90, TreeNode(87, TreeNode(86, TreeNode(85, None, None), None), TreeNode(89, TreeNode(88, None, None), None)), TreeNode(93, TreeNode(92, TreeNode(91, None, None), None), TreeNode(95, TreeNode(94, None, None), None))))))) == [48, 24, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 23, 22, 36, 30, 27, 26, 25, 29, 28, 33, 32, 31, 35, 34, 42, 39, 38, 37, 41, 40, 45, 44, 43, 47, 46, 72, 60, 54, 51, 50, 49, 53, 52, 57, 56, 55, 59, 58, 66, 63, 62, 61, 65, 64, 69, 68, 67, 71, 70, 84, 78, 75, 74, 73, 77, 76, 81, 80, 79, 83, 82, 90, 87, 86, 85, 89, 88, 93, 92, 91, 95, 94]\nassert solution.preorderTraversal(TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(11, TreeNode(9, TreeNode(8, None, None), TreeNode(10, None, None)), TreeNode(13, TreeNode(12, None, None), None)))) == [7, 4, 2, 1, 3, 6, 5, 11, 9, 8, 10, 13, 12]\nassert solution.preorderTraversal(None) == []\nassert solution.preorderTraversal(TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None)))))) == [22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 38, 36, 35, 34, 37, 41, 40, 39, 42]\nassert solution.preorderTraversal(TreeNode(32, TreeNode(16, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), TreeNode(15, None, None)))), TreeNode(24, TreeNode(20, TreeNode(18, TreeNode(17, None, None), TreeNode(19, None, None)), TreeNode(22, TreeNode(21, None, None), TreeNode(23, None, None))), TreeNode(28, TreeNode(26, TreeNode(25, None, None), TreeNode(27, None, None)), TreeNode(30, TreeNode(29, None, None), TreeNode(31, None, None))))), TreeNode(48, TreeNode(40, TreeNode(36, TreeNode(34, TreeNode(33, None, None), TreeNode(35, None, None)), TreeNode(38, TreeNode(37, None, None), TreeNode(39, None, None))), TreeNode(44, TreeNode(42, TreeNode(41, None, None), TreeNode(43, None, None)), TreeNode(46, TreeNode(45, None, None), TreeNode(47, None, None)))), TreeNode(56, TreeNode(52, TreeNode(50, TreeNode(49, None, None), TreeNode(51, None, None)), TreeNode(54, TreeNode(53, None, None), TreeNode(55, None, None))), TreeNode(60, TreeNode(58, TreeNode(57, None, None), TreeNode(59, None, None)), TreeNode(62, TreeNode(61, None, None), TreeNode(63, None, None))))))) == [32, 16, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 15, 24, 20, 18, 17, 19, 22, 21, 23, 28, 26, 25, 27, 30, 29, 31, 48, 40, 36, 34, 33, 35, 38, 37, 39, 44, 42, 41, 43, 46, 45, 47, 56, 52, 50, 49, 51, 54, 53, 55, 60, 58, 57, 59, 62, 61, 63]\nassert solution.preorderTraversal(TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None))) == [3, 2, 1, 5, 4]\nassert solution.preorderTraversal(TreeNode(43, TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None))))), TreeNode(65, TreeNode(54, TreeNode(49, TreeNode(46, TreeNode(45, TreeNode(44, None, None), None), TreeNode(48, TreeNode(47, None, None), None)), TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(53, None, None))), TreeNode(60, TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(59, TreeNode(58, None, None), None)), TreeNode(63, TreeNode(62, TreeNode(61, None, None), None), TreeNode(64, None, None)))), TreeNode(76, TreeNode(71, TreeNode(68, TreeNode(67, TreeNode(66, None, None), None), TreeNode(70, TreeNode(69, None, None), None)), TreeNode(74, TreeNode(73, TreeNode(72, None, None), None), TreeNode(75, None, None))), TreeNode(81, TreeNode(79, TreeNode(78, TreeNode(77, None, None), None), TreeNode(80, None, None)), TreeNode(84, TreeNode(83, TreeNode(82, None, None), None), TreeNode(85, None, None))))))) == [43, 22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 38, 36, 35, 34, 37, 41, 40, 39, 42, 65, 54, 49, 46, 45, 44, 48, 47, 52, 51, 50, 53, 60, 57, 56, 55, 59, 58, 63, 62, 61, 64, 76, 71, 68, 67, 66, 70, 69, 74, 73, 72, 75, 81, 79, 78, 77, 80, 84, 83, 82, 85]\nassert solution.preorderTraversal(TreeNode(38, TreeNode(19, TreeNode(10, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(8, TreeNode(7, TreeNode(6, None, None), None), TreeNode(9, None, None))), TreeNode(15, TreeNode(13, TreeNode(12, TreeNode(11, None, None), None), TreeNode(14, None, None)), TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)))), TreeNode(29, TreeNode(24, TreeNode(22, TreeNode(21, TreeNode(20, None, None), None), TreeNode(23, None, None)), TreeNode(27, TreeNode(26, TreeNode(25, None, None), None), TreeNode(28, None, None))), TreeNode(34, TreeNode(32, TreeNode(31, TreeNode(30, None, None), None), TreeNode(33, None, None)), TreeNode(36, TreeNode(35, None, None), TreeNode(37, None, None))))), TreeNode(57, TreeNode(48, TreeNode(43, TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None)), TreeNode(46, TreeNode(45, TreeNode(44, None, None), None), TreeNode(47, None, None))), TreeNode(53, TreeNode(51, TreeNode(50, TreeNode(49, None, None), None), TreeNode(52, None, None)), TreeNode(55, TreeNode(54, None, None), TreeNode(56, None, None)))), TreeNode(66, TreeNode(62, TreeNode(60, TreeNode(59, TreeNode(58, None, None), None), TreeNode(61, None, None)), TreeNode(64, TreeNode(63, None, None), TreeNode(65, None, None))), TreeNode(71, TreeNode(69, TreeNode(68, TreeNode(67, None, None), None), TreeNode(70, None, None)), TreeNode(73, TreeNode(72, None, None), TreeNode(74, None, None))))))) == [38, 19, 10, 5, 3, 2, 1, 4, 8, 7, 6, 9, 15, 13, 12, 11, 14, 17, 16, 18, 29, 24, 22, 21, 20, 23, 27, 26, 25, 28, 34, 32, 31, 30, 33, 36, 35, 37, 57, 48, 43, 41, 40, 39, 42, 46, 45, 44, 47, 53, 51, 50, 49, 52, 55, 54, 56, 66, 62, 60, 59, 58, 61, 64, 63, 65, 71, 69, 68, 67, 70, 73, 72, 74]\nassert solution.preorderTraversal(TreeNode(21, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(16, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(15, None, None)), TreeNode(19, TreeNode(18, TreeNode(17, None, None), None), TreeNode(20, None, None)))), TreeNode(31, TreeNode(26, TreeNode(24, TreeNode(23, TreeNode(22, None, None), None), TreeNode(25, None, None)), TreeNode(29, TreeNode(28, TreeNode(27, None, None), None), TreeNode(30, None, None))), TreeNode(36, TreeNode(34, TreeNode(33, TreeNode(32, None, None), None), TreeNode(35, None, None)), TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(40, None, None)))))) == [21, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 16, 14, 13, 12, 15, 19, 18, 17, 20, 31, 26, 24, 23, 22, 25, 29, 28, 27, 30, 36, 34, 33, 32, 35, 39, 38, 37, 40]\nassert solution.preorderTraversal(TreeNode(36, TreeNode(18, TreeNode(9, TreeNode(5, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(4, None, None)), TreeNode(7, TreeNode(6, None, None), TreeNode(8, None, None))), TreeNode(14, TreeNode(12, TreeNode(11, TreeNode(10, None, None), None), TreeNode(13, None, None)), TreeNode(16, TreeNode(15, None, None), TreeNode(17, None, None)))), TreeNode(27, TreeNode(23, TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(22, None, None)), TreeNode(25, TreeNode(24, None, None), TreeNode(26, None, None))), TreeNode(32, TreeNode(30, TreeNode(29, TreeNode(28, None, None), None), TreeNode(31, None, None)), TreeNode(34, TreeNode(33, None, None), TreeNode(35, None, None))))), TreeNode(54, TreeNode(45, TreeNode(41, TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(40, None, None)), TreeNode(43, TreeNode(42, None, None), TreeNode(44, None, None))), TreeNode(50, TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(49, None, None)), TreeNode(52, TreeNode(51, None, None), TreeNode(53, None, None)))), TreeNode(63, TreeNode(59, TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(58, None, None)), TreeNode(61, TreeNode(60, None, None), TreeNode(62, None, None))), TreeNode(67, TreeNode(65, TreeNode(64, None, None), TreeNode(66, None, None)), TreeNode(69, TreeNode(68, None, None), TreeNode(70, None, None))))))) == [36, 18, 9, 5, 3, 2, 1, 4, 7, 6, 8, 14, 12, 11, 10, 13, 16, 15, 17, 27, 23, 21, 20, 19, 22, 25, 24, 26, 32, 30, 29, 28, 31, 34, 33, 35, 54, 45, 41, 39, 38, 37, 40, 43, 42, 44, 50, 48, 47, 46, 49, 52, 51, 53, 63, 59, 57, 56, 55, 58, 61, 60, 62, 67, 65, 64, 66, 69, 68, 70]\nassert solution.preorderTraversal(TreeNode(29, TreeNode(15, TreeNode(8, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), TreeNode(7, None, None))), TreeNode(12, TreeNode(10, TreeNode(9, None, None), TreeNode(11, None, None)), TreeNode(14, TreeNode(13, None, None), None))), TreeNode(22, TreeNode(19, TreeNode(17, TreeNode(16, None, None), TreeNode(18, None, None)), TreeNode(21, TreeNode(20, None, None), None)), TreeNode(26, TreeNode(24, TreeNode(23, None, None), TreeNode(25, None, None)), TreeNode(28, TreeNode(27, None, None), None)))), TreeNode(43, TreeNode(36, TreeNode(33, TreeNode(31, TreeNode(30, None, None), TreeNode(32, None, None)), TreeNode(35, TreeNode(34, None, None), None)), TreeNode(40, TreeNode(38, TreeNode(37, None, None), TreeNode(39, None, None)), TreeNode(42, TreeNode(41, None, None), None))), TreeNode(50, TreeNode(47, TreeNode(45, TreeNode(44, None, None), TreeNode(46, None, None)), TreeNode(49, TreeNode(48, None, None), None)), TreeNode(54, TreeNode(52, TreeNode(51, None, None), TreeNode(53, None, None)), TreeNode(56, TreeNode(55, None, None), None)))))) == [29, 15, 8, 4, 2, 1, 3, 6, 5, 7, 12, 10, 9, 11, 14, 13, 22, 19, 17, 16, 18, 21, 20, 26, 24, 23, 25, 28, 27, 43, 36, 33, 31, 30, 32, 35, 34, 40, 38, 37, 39, 42, 41, 50, 47, 45, 44, 46, 49, 48, 54, 52, 51, 53, 56, 55]\nassert solution.preorderTraversal(None) == []\nassert solution.preorderTraversal(TreeNode(24, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(23, TreeNode(22, None, None), None)))), TreeNode(36, TreeNode(30, TreeNode(27, TreeNode(26, TreeNode(25, None, None), None), TreeNode(29, TreeNode(28, None, None), None)), TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(35, TreeNode(34, None, None), None))), TreeNode(42, TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(41, TreeNode(40, None, None), None)), TreeNode(45, TreeNode(44, TreeNode(43, None, None), None), TreeNode(46, None, None)))))) == [24, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 23, 22, 36, 30, 27, 26, 25, 29, 28, 33, 32, 31, 35, 34, 42, 39, 38, 37, 41, 40, 45, 44, 43, 46]\nassert solution.preorderTraversal(TreeNode(26, TreeNode(13, TreeNode(7, TreeNode(4, TreeNode(2, TreeNode(1, None, None), TreeNode(3, None, None)), TreeNode(6, TreeNode(5, None, None), None)), TreeNode(10, TreeNode(9, TreeNode(8, None, None), None), TreeNode(12, TreeNode(11, None, None), None))), TreeNode(20, TreeNode(17, TreeNode(15, TreeNode(14, None, None), TreeNode(16, None, None)), TreeNode(19, TreeNode(18, None, None), None)), TreeNode(23, TreeNode(22, TreeNode(21, None, None), None), TreeNode(25, TreeNode(24, None, None), None)))), TreeNode(39, TreeNode(33, TreeNode(30, TreeNode(28, TreeNode(27, None, None), TreeNode(29, None, None)), TreeNode(32, TreeNode(31, None, None), None)), TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(38, TreeNode(37, None, None), None))), TreeNode(45, TreeNode(42, TreeNode(41, TreeNode(40, None, None), None), TreeNode(44, TreeNode(43, None, None), None)), TreeNode(48, TreeNode(47, TreeNode(46, None, None), None), TreeNode(50, TreeNode(49, None, None), None)))))) == [26, 13, 7, 4, 2, 1, 3, 6, 5, 10, 9, 8, 12, 11, 20, 17, 15, 14, 16, 19, 18, 23, 22, 21, 25, 24, 39, 33, 30, 28, 27, 29, 32, 31, 36, 35, 34, 38, 37, 45, 42, 41, 40, 44, 43, 48, 47, 46, 50, 49]\nassert solution.preorderTraversal(TreeNode(47, TreeNode(24, TreeNode(12, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(11, TreeNode(10, None, None), None))), TreeNode(18, TreeNode(15, TreeNode(14, TreeNode(13, None, None), None), TreeNode(17, TreeNode(16, None, None), None)), TreeNode(21, TreeNode(20, TreeNode(19, None, None), None), TreeNode(23, TreeNode(22, None, None), None)))), TreeNode(36, TreeNode(30, TreeNode(27, TreeNode(26, TreeNode(25, None, None), None), TreeNode(29, TreeNode(28, None, None), None)), TreeNode(33, TreeNode(32, TreeNode(31, None, None), None), TreeNode(35, TreeNode(34, None, None), None))), TreeNode(42, TreeNode(39, TreeNode(38, TreeNode(37, None, None), None), TreeNode(41, TreeNode(40, None, None), None)), TreeNode(45, TreeNode(44, TreeNode(43, None, None), None), TreeNode(46, None, None))))), TreeNode(71, TreeNode(59, TreeNode(53, TreeNode(50, TreeNode(49, TreeNode(48, None, None), None), TreeNode(52, TreeNode(51, None, None), None)), TreeNode(56, TreeNode(55, TreeNode(54, None, None), None), TreeNode(58, TreeNode(57, None, None), None))), TreeNode(65, TreeNode(62, TreeNode(61, TreeNode(60, None, None), None), TreeNode(64, TreeNode(63, None, None), None)), TreeNode(68, TreeNode(67, TreeNode(66, None, None), None), TreeNode(70, TreeNode(69, None, None), None)))), TreeNode(83, TreeNode(77, TreeNode(74, TreeNode(73, TreeNode(72, None, None), None), TreeNode(76, TreeNode(75, None, None), None)), TreeNode(80, TreeNode(79, TreeNode(78, None, None), None), TreeNode(82, TreeNode(81, None, None), None))), TreeNode(89, TreeNode(86, TreeNode(85, TreeNode(84, None, None), None), TreeNode(88, TreeNode(87, None, None), None)), TreeNode(92, TreeNode(91, TreeNode(90, None, None), None), TreeNode(93, None, None))))))) == [47, 24, 12, 6, 3, 2, 1, 5, 4, 9, 8, 7, 11, 10, 18, 15, 14, 13, 17, 16, 21, 20, 19, 23, 22, 36, 30, 27, 26, 25, 29, 28, 33, 32, 31, 35, 34, 42, 39, 38, 37, 41, 40, 45, 44, 43, 46, 71, 59, 53, 50, 49, 48, 52, 51, 56, 55, 54, 58, 57, 65, 62, 61, 60, 64, 63, 68, 67, 66, 70, 69, 83, 77, 74, 73, 72, 76, 75, 80, 79, 78, 82, 81, 89, 86, 85, 84, 88, 87, 92, 91, 90, 93]\nassert solution.preorderTraversal(TreeNode(43, TreeNode(22, TreeNode(11, TreeNode(6, TreeNode(3, TreeNode(2, TreeNode(1, None, None), None), TreeNode(5, TreeNode(4, None, None), None)), TreeNode(9, TreeNode(8, TreeNode(7, None, None), None), TreeNode(10, None, None))), TreeNode(17, TreeNode(14, TreeNode(13, TreeNode(12, None, None), None), TreeNode(16, TreeNode(15, None, None), None)), TreeNode(20, TreeNode(19, TreeNode(18, None, None), None), TreeNode(21, None, None)))), TreeNode(33, TreeNode(28, TreeNode(25, TreeNode(24, TreeNode(23, None, None), None), TreeNode(27, TreeNode(26, None, None), None)), TreeNode(31, TreeNode(30, TreeNode(29, None, None), None), TreeNode(32, None, None))), TreeNode(38, TreeNode(36, TreeNode(35, TreeNode(34, None, None), None), TreeNode(37, None, None)), TreeNode(41, TreeNode(40, TreeNode(39, None, None), None), TreeNode(42, None, None))))), TreeNode(64, TreeNode(54, TreeNode(49, TreeNode(46, TreeNode(45, TreeNode(44, None, None), None), TreeNode(48, TreeNode(47, None, None), None)), TreeNode(52, TreeNode(51, TreeNode(50, None, None), None), TreeNode(53, None, None))), TreeNode(59, TreeNode(57, TreeNode(56, TreeNode(55, None, None), None), TreeNode(58, None, None)), TreeNode(62, TreeNode(61, TreeNode(60, None, None), None), TreeNode(63, None, None)))), TreeNode(75, TreeNode(70, TreeNode(67, TreeNode(66, TreeNode(65, None, None), None), TreeNode(69, TreeNode(68, None, None), None)), TreeNode(73, TreeNode(72, TreeNode(71, None, None), None), TreeNode(74, None, None))), TreeNode(80, TreeNode(78, TreeNode(77, TreeNode(76, None, None), None), TreeNode(79, None, None)), TreeNode(83, TreeNode(82, TreeNode(81, None, None), None), TreeNode(84, None, None))))))) == [43, 22, 11, 6, 3, 2, 1, 5, 4, 9, 8, 7, 10, 17, 14, 13, 12, 16, 15, 20, 19, 18, 21, 33, 28, 25, 24, 23, 27, 26, 31, 30, 29, 32, 38, 36, 35, 34, 37, 41, 40, 39, 42, 64, 54, 49, 46, 45, 44, 48, 47, 52, 51, 50, 53, 59, 57, 56, 55, 58, 62, 61, 60, 63, 75, 70, 67, 66, 65, 69, 68, 73, 72, 71, 74, 80, 78, 77, 76, 79, 83, 82, 81, 84]",
  "inefficient_solution": "class Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        if not root:\n            return []\n        \n        nodes = [root]\n        visited = set()\n        ans = []\n        i = 0\n        while i < len(nodes):\n            node = nodes[i]\n            if node not in visited:\n                visited.add(node)\n                ans.append(node.val)\n                if node.left:\n                    nodes.append(node.left)\n                if node.right:\n                    nodes.append(node.right)\n            i += 1\n        return ans",
  "is_python": true
}