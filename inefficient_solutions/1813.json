{
  "problem_idx": 1813,
  "task_name": "Sentence Similarity III",
  "markdown_description": "\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `\"Hello World\"`, `\"HELLO\"`, `\"hello world hello world\"` are all sentences. Words consist of **only** uppercase and lowercase English letters.\n\n\nTwo sentences `sentence1` and `sentence2` are **similar** if it is possible to insert an arbitrary sentence **(possibly empty)** inside one of these sentences such that the two sentences become equal. For example, `sentence1 = \"Hello my name is Jane\"` and `sentence2 = \"Hello Jane\"` can be made equal by inserting `\"my name is\"` between `\"Hello\"` and `\"Jane\"` in `sentence2`.\n\n\nGiven two sentences `sentence1` and `sentence2`, return `true` *if* `sentence1` *and* `sentence2` *are similar.* Otherwise, return `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"\n**Output:** true\n**Explanation:** sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** sentence1 = \"of\", sentence2 = \"A lot of words\"\n**Output:** false\n**Explanation:** No single sentence can be inserted inside one of the sentences to make it equal to the other.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** sentence1 = \"Eating right now\", sentence2 = \"Eating\"\n**Output:** true\n**Explanation:** sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= sentence1.length, sentence2.length <= 100`\n* `sentence1` and `sentence2` consist of lowercase and uppercase English letters and spaces.\n* The words in `sentence1` and `sentence2` are separated by a single space.\n\n\n",
  "canonical_solution": "class Solution:\n    def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:\n        words1, words2 = sentence1.split(), sentence2.split()\n        m, n = len(words1), len(words2)\n        if m < n:\n            words1, words2 = words2, words1\n            m, n = n, m\n        i = j = 0\n        while i < n and words1[i] == words2[i]:\n            i += 1\n        while j < n and words1[m - 1 - j] == words2[n - 1 - j]:\n            j += 1\n        return i + j >= n\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:\n        words1, words2 = sentence1.split(), sentence2.split()\n        m, n = len(words1), len(words2)\n        if m < n:\n            words1, words2 = words2, words1\n            m, n = n, m\n        i = j = 0\n        while i < n and words1[i] == words2[i]:\n            i += 1\n        while j < n and words1[m - 1 - j] == words2[n - 1 - j]:\n            j += 1\n        return i + j >= n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random sentences\n    sentence1 = ''\n    sentence2 = ''\n    num_words = random.randint(1, 6)\n    for _ in range(num_words):\n        word = ''.join(random.choices(string.ascii_letters, k=random.randint(1, 10)))\n        sentence1 += word + ' '\n    \n    num_words = random.randint(1, 6)\n    for _ in range(num_words):\n        word = ''.join(random.choices(string.ascii_letters, k=random.randint(1, 10)))\n        sentence2 += word + ' '\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.areSentencesSimilar(sentence1, sentence2)\n\n    return sentence1, sentence2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        sentence1, sentence2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.areSentencesSimilar(sentence1, sentence2) == expected_result\n        print(f\"assert solution.areSentencesSimilar(\\\"{sentence1}\\\", \\\"{sentence2}\\\") == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.areSentencesSimilar(\\\"{sentence1}\\\", \\\"{sentence2}\\\") == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.areSentencesSimilar(\"iUZbBpSzI \", \"qLZr HlyqUvJi FKOT zw Pvkb \") == False\nassert solution.areSentencesSimilar(\"GXiIdmkcs \", \"CWqQEJCvS xg mpr EAuQXyPLet \") == False\nassert solution.areSentencesSimilar(\"Iwg FjAsuPWELc RPvwYdh DQHGo WqxBLM fB \", \"NOKFnQgHnX LPC \") == False\nassert solution.areSentencesSimilar(\"XWTpanmfsm \", \"ZzIIHi QXKd GxgUrZH OWbse \") == False\nassert solution.areSentencesSimilar(\"QQBfuNcNe pGroMSb TMrSAV pszci LkVrAEFz \", \"h ScsZf K PHaMK xyNdZTbODo \") == False\nassert solution.areSentencesSimilar(\"GiQbZx nakWgtzvqt Jt tZ wkgimcp \", \"alNbAHNk kKObMk VN poTGdhQ TiVXceixn \") == False\nassert solution.areSentencesSimilar(\"LOdhZ \", \"mRBtsAFwTH zhtOOw TBXYOV \") == False\nassert solution.areSentencesSimilar(\"nxXZrQCepP eUfjAGEY tmCQKUWT aaxFugr vvu \", \"LfN kvMRsH \") == False\nassert solution.areSentencesSimilar(\"wXNcsk jZQRP tmVNtoR \", \"WNtYO QUI oCHgs aR \") == False\nassert solution.areSentencesSimilar(\"XzTpzijV it eTPcu yWWAvaqyuG \", \"azwwgK \") == False\nassert solution.areSentencesSimilar(\"jAbcpoq riE KwDJr txraLNqfJz Yiz hSolPFJ \", \"fmgxC CpDYpo Gs jzA S BOHisnFD \") == False\nassert solution.areSentencesSimilar(\"iEZv \", \"vZnLZMwD lfhb WlOQ \") == False\nassert solution.areSentencesSimilar(\"odPaW IrvVIidRw RpZbepF Of \", \"W CDLCGyZ tnZxuU OUw vveqj \") == False\nassert solution.areSentencesSimilar(\"F bgjGzhn ND moizgubSQ d iFII \", \"KWnTPCndB fZCgLqeVTX JRsISAhMZ tWIbiyxO unaUuz \") == False\nassert solution.areSentencesSimilar(\"BYvYj \", \"vY BkUw AvaYIo BGXzrDLUn OCPVhPXh \") == False\nassert solution.areSentencesSimilar(\"oYYmFU SBuUT hSkdeMc \", \"fhLO a osM OfTHWeBKD uNxHilYdf l \") == False\nassert solution.areSentencesSimilar(\"jNuUkTgdZz zhaHcdtILQ \", \"XtsZrVLG RkEYWBBZBf CBZcgmdO PlM dKExulYE \") == False\nassert solution.areSentencesSimilar(\"C \", \"QXoD DH hFmfsKN GAvuC A \") == False\nassert solution.areSentencesSimilar(\"lNuivSWY xzeK cU FmXxUcPs twUVukrwv yOYtkyz \", \"Y xg \") == False\nassert solution.areSentencesSimilar(\"xEEMoxxpd SlxpEMmjCz \", \"l \") == False\nassert solution.areSentencesSimilar(\"CnsvXBeyj qQWfTx \", \"KidoGQLqm TiRRCPKPMq SPrQNAOwj \") == False\nassert solution.areSentencesSimilar(\"YeIdVUwn N iyCXNEx j rfm FuImEo \", \"sguTsvcE \") == False\nassert solution.areSentencesSimilar(\"vEkjn f gviQXFeToE \", \"DLknfLuYle tCzYr w \") == False\nassert solution.areSentencesSimilar(\"JHfXi XtGmf jGEpZBW \", \"IV \") == False\nassert solution.areSentencesSimilar(\"oxvGSJIWw \", \"VfOxLodKB npB cwGJ MpjxmHmyja \") == False\nassert solution.areSentencesSimilar(\"jvksujSN UGfaVBcN \", \"dQXwk E KqdeWob FOHg \") == False\nassert solution.areSentencesSimilar(\"EnpHo Ka GnsNBD omTBb EIm \", \"oKoc mjqkREaooi fXnhk \") == False\nassert solution.areSentencesSimilar(\"J kNoKNxrA gV UPSNFTL mM \", \"ZAzG vSDbgbyBY hgmPXiA olud \") == False\nassert solution.areSentencesSimilar(\"mYuSUsm WYdCNcwDF \", \"vT AG \") == False\nassert solution.areSentencesSimilar(\"qK TcS \", \"thRpSVKD p PwIxobbc YCl \") == False\nassert solution.areSentencesSimilar(\"TmcceqYzB QCi DhX qucZlgQ \", \"nWk Ma yw plpGgEAJa lB \") == False\nassert solution.areSentencesSimilar(\"jfGvTi \", \"kiR Xlghn bLjDCmumgv TIAxOZMqa P LXZRRGBKu \") == False\nassert solution.areSentencesSimilar(\"isx Qcb ORERnlDs Lm jdvKCX \", \"UXssHClF vCvJwsg NqdKaDz MZP \") == False\nassert solution.areSentencesSimilar(\"TR O OFHh TJgXuO lYVYEeQZd \", \"eIiiwOGHXB YIALvdk shNwCRY UGqVGNY A \") == False\nassert solution.areSentencesSimilar(\"RXuoVx PDfbLS \", \"kNCwUV Z \") == False\nassert solution.areSentencesSimilar(\"cMxy Kb FQfR WlAti \", \"s ZwYTHKgqm neJ \") == False\nassert solution.areSentencesSimilar(\"x Kd yj HhNRhGKXa CUxPQwayR \", \"lumqYJXc AUHTkngihc Mc ObfNvgl OxIB A \") == False\nassert solution.areSentencesSimilar(\"tAPQJN joCIy bbHkUhqtxb \", \"UmvgxloE sQBRIakJR qAcpTsHNRF LZBpyOd PXfV \") == False\nassert solution.areSentencesSimilar(\"Cqhv \", \"LeaA OhPzguOmz FYaMJrx nuchjw zBiaVGclhE oudQyIhuSW \") == False\nassert solution.areSentencesSimilar(\"SvQ OaIbgr dH dLpkYFKmo Sf \", \"BdUmrjaS KwPtwK biVu rFE TqCEj \") == False\nassert solution.areSentencesSimilar(\"nUjQtEE GpJAQFJ pZyHfxlX \", \"Agvycrus fpgFzo hP tTS icYOjGub \") == False\nassert solution.areSentencesSimilar(\"H QSbzsXAnUE yrBB eV JqBrgDv v \", \"J bSz PRue zFaw yMoMuTkiJ yGGBxGFt \") == False\nassert solution.areSentencesSimilar(\"eCBoLE bahdO M HKbDO \", \"AMKpR \") == False\nassert solution.areSentencesSimilar(\"nODLgU ulf Bqz sZugDJi \", \"kAAUMeWkq mgIO njvg \") == False\nassert solution.areSentencesSimilar(\"qZQiV cyhfaV \", \"P PAeDpP \") == False\nassert solution.areSentencesSimilar(\"gYioMbiua I jCQg \", \"SifAGMb A uuhsdgp xvADwzE oEfs PzTVZ \") == False\nassert solution.areSentencesSimilar(\"S DLgDBVG GIh \", \"eQ ma zNoUyKp frhcpoon Xqisv \") == False\nassert solution.areSentencesSimilar(\"gWnrofB O \", \"yO yrQtQJJX i DfEhCoL \") == False\nassert solution.areSentencesSimilar(\"nX \", \"AztFTJlV JmBanve cepEmrY \") == False\nassert solution.areSentencesSimilar(\"zhBM s \", \"gvBTloiN fz uENNIe \") == False\nassert solution.areSentencesSimilar(\"hzDls PnMIMOylE USOm YAIEjIm CAArvIPhf \", \"rWohUIAnO IQZXEcwWrG NCbRuoaLel txpVJLBHB dL n \") == False\nassert solution.areSentencesSimilar(\"jokyeMUd qSqm vryHQA dwfvcLHVi \", \"C PpyastKMqY \") == False\nassert solution.areSentencesSimilar(\"THKsgqBXYE j FNZ IOEjJ \", \"qHTZV lEYcT VS xcArGdDlHD \") == False\nassert solution.areSentencesSimilar(\"apYWL RxAzNGQwDP \", \"kGSKe YFO aNKLACCrlV w \") == False\nassert solution.areSentencesSimilar(\"fKIKp \", \"N \") == False\nassert solution.areSentencesSimilar(\"UeHmQDBMy YmFCGl UOym aQXXbAPifu dsIyIuor \", \"HNH LFOt \") == False\nassert solution.areSentencesSimilar(\"hXlLpgZ NQSk UMUtgDX tA KgEPacyjla \", \"tH \") == False\nassert solution.areSentencesSimilar(\"DFwNO \", \"TCjQurveKG ypLcjin aMPQMzXgT \") == False\nassert solution.areSentencesSimilar(\"OyH vqGXa W bXRQ rv vYvlzVbMh \", \"oBbc yKcpwpqjxw IJzxA \") == False\nassert solution.areSentencesSimilar(\"tzYAqjJHuo \", \"gUVgzmlBX oezOfCLwA jhzv \") == False\nassert solution.areSentencesSimilar(\"kafiL X cg G olLNxQB \", \"rcpw lSlfgQCnaG QeGcjshAs oPoNVWys ZNZMzqSOOp mXcNHw \") == False\nassert solution.areSentencesSimilar(\"miiISmsWd wKQzJv cJBeEriV XN EefRW \", \"skeKWixuS \") == False\nassert solution.areSentencesSimilar(\"NYOCDWYmqL myGcAz mFMsiMiAwA YMB qGSbCUdo \", \"WSAYjNQqt CrAvTvm sqxCCvoCR fVqDxI \") == False\nassert solution.areSentencesSimilar(\"aH FAMAF CsYJo \", \"etJSO KxYCoucrDq FmeqECc ZGcY TAm \") == False\nassert solution.areSentencesSimilar(\"ZsSPETd \", \"gFswsOVx hLsSKhb txQyuE SvxItJShps FUczQwwGW XUjKp \") == False\nassert solution.areSentencesSimilar(\"AmyDJ lGzcSbMYo qzBwcvW qSpHHlZd \", \"Z Fjy \") == False\nassert solution.areSentencesSimilar(\"gkgll \", \"ilksT cTFTd aC fu zPeQb OA \") == False\nassert solution.areSentencesSimilar(\"in zP SFcumSru \", \"ySvraIN tHSAsRzI \") == False\nassert solution.areSentencesSimilar(\"gJd fnwwQlhlvp NyPgwMSGK yFKgIfHB pDPXPXWVQi fIUlt \", \"GxfYGu rxOqpyc Adn CZB h bswFuB \") == False\nassert solution.areSentencesSimilar(\"XFagwg ynvyxRO PwCchbDjY I fnVWOpod OgtjqvMt \", \"sbzflIoe O SMzl TlbdWyA OvkYHk M \") == False\nassert solution.areSentencesSimilar(\"lHDunCD \", \"xg ii \") == False\nassert solution.areSentencesSimilar(\"RQiptn twlpPaMF RygamiLayg CGqmkwIBeM u \", \"s PI nRWhJUsQfz \") == False\nassert solution.areSentencesSimilar(\"dIOvynh tHZO quRWxjHk mNWLCPLcsO AFVcUR bfgEOUQH \", \"fxfmr \") == False\nassert solution.areSentencesSimilar(\"gqbPcF \", \"HuH ZJOkdqb MWnK KwtHX jJEXUuU \") == False\nassert solution.areSentencesSimilar(\"MkXgi LhfWA K VM PAIyN LkrMvH \", \"zSC oME \") == False\nassert solution.areSentencesSimilar(\"LyBlud yYlV \", \"eZtfwM \") == False\nassert solution.areSentencesSimilar(\"UrDPho nUklBSFm \", \"epYmj ocPNSmgpQv lRPJxNvL jmGLKKQj RKNgXldvz YFfcrhS \") == False\nassert solution.areSentencesSimilar(\"JB YOXsFhdOFT iHGRFFlH \", \"E \") == False\nassert solution.areSentencesSimilar(\"iDQWjUtKQ BEsqGG rxrRCyn \", \"iscrFdlS FTRzdYkX bGLP \") == False\nassert solution.areSentencesSimilar(\"vJspMzu IlTYeHzEz \", \"JUzeC Xbml uy YPZ \") == False\nassert solution.areSentencesSimilar(\"lgv jRscjcJo h ngeCOnRJi hgMSQEek \", \"tS NIs gcTLmBrA K kHOQKBJiLh dcR \") == False\nassert solution.areSentencesSimilar(\"oSR oYabHGjR kF \", \"g mhLoToz fhi pMI guistHzh jVwXexJuB \") == False\nassert solution.areSentencesSimilar(\"wRlYxLW HTtCHrIx OQE dAKaciAO hb \", \"hQmJfZBwD OHAHTpVCO BRqJrXUy yacUCo \") == False\nassert solution.areSentencesSimilar(\"AIZ CBaZh gaogaAdIEQ ZzH rfEIONgZ grJNwn \", \"cdk FpjRqWv \") == False\nassert solution.areSentencesSimilar(\"MbcvGveA FINjZtUdv Rd uegPOLtA \", \"NrdADgzHn ZKjYILQ ZImXy w IVkMYH tSlt \") == False\nassert solution.areSentencesSimilar(\"s dfEV \", \"uHmO wOUNI cVcjByS y KifVXkdMFd d \") == False\nassert solution.areSentencesSimilar(\"AWZbzxOanX \", \"UcREuw e CnOTSILZW kyYyUKe ofPf Va \") == False\nassert solution.areSentencesSimilar(\"qcWBiQsthd gEnz czQUfslTv zeO Ec Bl \", \"ghiVBrR ExhHPmcjh HZoahTVk YSNdQXYdhh \") == False\nassert solution.areSentencesSimilar(\"zmPrt \", \"cnqRm \") == False\nassert solution.areSentencesSimilar(\"VkxIY \", \"qZUmjhy L TCXBBmQs VnOJLKQ \") == False\nassert solution.areSentencesSimilar(\"OOpoIgLcn pekTfyLie OcBPoNXMYT JRU ZhTuGpjHt PYtPAAGd \", \"hW eGL N SAqUAaHPmR IYYfmudGY QPdqf \") == False\nassert solution.areSentencesSimilar(\"ksFcgb bdZzmGQ \", \"rmQuV FZEOem zyvXJnO xjakEu \") == False\nassert solution.areSentencesSimilar(\"k \", \"aNDMxH QXGTUKJft WZcPvCXu yb \") == False\nassert solution.areSentencesSimilar(\"fWZdqkuYGY XxWzueK \", \"rEvaQfmM H pH l lN WDrpzwkp \") == False\nassert solution.areSentencesSimilar(\"nSK \", \"Q HD \") == False\nassert solution.areSentencesSimilar(\"udQyKoPtLh dzwOuB \", \"dJGCPYe VhXFXFpawF pWpwhFC koXwTBgQLp YpDOjHT MdXp \") == False\nassert solution.areSentencesSimilar(\"NPR \", \"kovb xwoJIHSRO tWinRadQ aRMX FERqzau \") == False\nassert solution.areSentencesSimilar(\"DsSCVMFpel BidU \", \"fsLosCRfKv SrEHsVto gAg qQhOxtgPFO \") == False\nassert solution.areSentencesSimilar(\"Yw aUnWd fIzHK \", \"OXNNeKLDf \") == False\nassert solution.areSentencesSimilar(\"skSc \", \"y Kt D FO jaVffRDIdS wgJa \") == False",
  "inefficient_solution": "class Solution:\n    def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:\n        words1 = sentence1.split()\n        words2 = sentence2.split()\n        if len(words1) < len(words2):\n            words1, words2 = words2, words1\n        similar = []\n        for i in range(len(words1)):\n            for j in range(len(words2)):\n                if words1[i] == words2[j]:\n                    similar.append((i, j))\n        return any(i + j >= len(words2) for i, j in similar)",
  "is_python": true
}