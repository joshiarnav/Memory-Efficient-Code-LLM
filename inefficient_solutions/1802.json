{
  "problem_idx": 1802,
  "task_name": "Maximum Value at a Given Index in a Bounded Array",
  "markdown_description": "\nYou are given three positive integers:\u00a0`n`, `index`, and `maxSum`. You want to construct an array `nums` (**0-indexed**)that satisfies the following conditions:\n\n\n* `nums.length == n`\n* `nums[i]` is a **positive** integer where `0 <= i < n`.\n* `abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.\n* The sum of all the elements of `nums` does not exceed `maxSum`.\n* `nums[index]` is **maximized**.\n\n\nReturn `nums[index]` *of the constructed array*.\n\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 4, index = 2,  maxSum = 6\n**Output:** 2\n**Explanation:** nums = [1,2,**2**,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 6, index = 1,  maxSum = 10\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= maxSum <= 109`\n* `0 <= index < n`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxValue(self, n: int, index: int, maxSum: int) -> int:\n        def sum(x, cnt):\n            return (\n                (x + x - cnt + 1) * cnt // 2 if x >= cnt else (x + 1) * x // 2 + cnt - x\n            )\n\n        left, right = 1, maxSum\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if sum(mid - 1, index) + sum(mid, n - index) <= maxSum:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxValue(self, n: int, index: int, maxSum: int) -> int:\n        def sum(x, cnt):\n            return (\n                (x + x - cnt + 1) * cnt // 2 if x >= cnt else (x + 1) * x // 2 + cnt - x\n            )\n\n        left, right = 1, maxSum\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if sum(mid - 1, index) + sum(mid, n - index) <= maxSum:\n                left = mid\n            else:\n                right = mid - 1\n        return left\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n, index, and maxSum\n    n = random.randint(1, 101)\n    index = random.randint(0, n-1)\n    maxSum = random.randint(1, 1000000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxValue(n, index, maxSum)\n\n    return n, index, maxSum, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, index, maxSum, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxValue(n, index, maxSum) == expected_result\n        print(f\"assert solution.maxValue({n}, {index}, {maxSum}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxValue({n}, {index}, {maxSum}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxValue(48, 17, 999662058) == 20826305\nassert solution.maxValue(69, 27, 167735163) == 2430962\nassert solution.maxValue(65, 42, 400158413) == 6156301\nassert solution.maxValue(81, 18, 139805284) == 1726017\nassert solution.maxValue(25, 6, 785608487) == 31424347\nassert solution.maxValue(53, 18, 155922506) == 2941948\nassert solution.maxValue(25, 1, 764711212) == 30588459\nassert solution.maxValue(23, 13, 49267245) == 2142060\nassert solution.maxValue(73, 23, 704661717) == 9652920\nassert solution.maxValue(98, 36, 466699657) == 4762267\nassert solution.maxValue(13, 11, 586651649) == 45127055\nassert solution.maxValue(10, 5, 170794882) == 17079490\nassert solution.maxValue(21, 0, 19265207) == 917400\nassert solution.maxValue(55, 51, 643077828) == 11692348\nassert solution.maxValue(9, 2, 863938464) == 95993165\nassert solution.maxValue(94, 59, 418503286) == 4452187\nassert solution.maxValue(39, 17, 951882252) == 24407247\nassert solution.maxValue(40, 31, 609408618) == 15235228\nassert solution.maxValue(83, 73, 279020720) == 3361728\nassert solution.maxValue(31, 7, 806113427) == 26003668\nassert solution.maxValue(66, 45, 665476298) == 10082993\nassert solution.maxValue(77, 18, 689946619) == 8960370\nassert solution.maxValue(52, 40, 268044943) == 5154727\nassert solution.maxValue(70, 69, 504882127) == 7212636\nassert solution.maxValue(14, 2, 423707116) == 30264798\nassert solution.maxValue(49, 27, 974856031) == 19895033\nassert solution.maxValue(11, 5, 673912221) == 61264750\nassert solution.maxValue(69, 13, 764301035) == 11076850\nassert solution.maxValue(71, 33, 962435401) == 13555445\nassert solution.maxValue(41, 24, 940677869) == 22943373\nassert solution.maxValue(69, 1, 506596517) == 7342011\nassert solution.maxValue(51, 37, 226373560) == 4438712\nassert solution.maxValue(100, 97, 478658861) == 4786636\nassert solution.maxValue(83, 29, 94003907) == 1132599\nassert solution.maxValue(68, 51, 262432994) == 3859330\nassert solution.maxValue(76, 53, 289613724) == 3810729\nassert solution.maxValue(41, 20, 647576475) == 15794558\nassert solution.maxValue(67, 30, 19554892) == 291880\nassert solution.maxValue(86, 31, 29549883) == 343626\nassert solution.maxValue(12, 1, 983814547) == 81984550\nassert solution.maxValue(89, 3, 297082278) == 3338044\nassert solution.maxValue(83, 76, 860143455) == 10363209\nassert solution.maxValue(65, 34, 62047441) == 954592\nassert solution.maxValue(83, 56, 159675006) == 1923818\nassert solution.maxValue(63, 58, 671757370) == 10662842\nassert solution.maxValue(40, 26, 408751113) == 10218788\nassert solution.maxValue(70, 37, 970704199) == 13867220\nassert solution.maxValue(65, 4, 316292805) == 4866071\nassert solution.maxValue(89, 13, 412789373) == 4638115\nassert solution.maxValue(43, 15, 147754697) == 3436167\nassert solution.maxValue(66, 40, 669294526) == 10140843\nassert solution.maxValue(60, 18, 584576121) == 9742952\nassert solution.maxValue(68, 44, 608261079) == 8945034\nassert solution.maxValue(97, 14, 103084765) == 1062765\nassert solution.maxValue(21, 14, 842001524) == 40095316\nassert solution.maxValue(78, 26, 409587107) == 5251138\nassert solution.maxValue(24, 16, 641857534) == 26744070\nassert solution.maxValue(29, 24, 822636418) == 28366783\nassert solution.maxValue(33, 23, 289660573) == 8777602\nassert solution.maxValue(64, 37, 782115406) == 12220569\nassert solution.maxValue(96, 72, 94206737) == 981350\nassert solution.maxValue(9, 7, 952119066) == 105791010\nassert solution.maxValue(13, 8, 431856511) == 33219735\nassert solution.maxValue(7, 1, 25124968) == 3589283\nassert solution.maxValue(90, 8, 424717078) == 4719115\nassert solution.maxValue(76, 19, 877116726) == 11541033\nassert solution.maxValue(13, 12, 973224835) == 74863454\nassert solution.maxValue(17, 2, 458466365) == 26968616\nassert solution.maxValue(31, 16, 791160400) == 25521311\nassert solution.maxValue(38, 20, 505002659) == 13289553\nassert solution.maxValue(67, 3, 879586795) == 13128191\nassert solution.maxValue(53, 21, 911693096) == 17201770\nassert solution.maxValue(62, 29, 573483260) == 9249745\nassert solution.maxValue(20, 8, 76167160) == 3808363\nassert solution.maxValue(44, 14, 989716748) == 22493574\nassert solution.maxValue(66, 40, 272768160) == 4132868\nassert solution.maxValue(94, 60, 741112654) == 7884202\nassert solution.maxValue(12, 5, 977229415) == 81435787\nassert solution.maxValue(23, 20, 710931505) == 30910074\nassert solution.maxValue(56, 50, 542873489) == 9694192\nassert solution.maxValue(57, 51, 802499830) == 14078967\nassert solution.maxValue(33, 27, 19101578) == 578847\nassert solution.maxValue(61, 53, 547775045) == 8979942\nassert solution.maxValue(90, 32, 696320242) == 7736915\nassert solution.maxValue(24, 14, 484819903) == 20200835\nassert solution.maxValue(60, 10, 859309292) == 14321842\nassert solution.maxValue(40, 37, 914854388) == 22871377\nassert solution.maxValue(49, 16, 752462903) == 15356399\nassert solution.maxValue(61, 13, 205642660) == 3371211\nassert solution.maxValue(70, 24, 129488954) == 1849861\nassert solution.maxValue(83, 60, 480457159) == 5788665\nassert solution.maxValue(36, 12, 954336938) == 26509369\nassert solution.maxValue(4, 2, 228570326) == 57142582\nassert solution.maxValue(96, 14, 778386573) == 8108229\nassert solution.maxValue(8, 4, 536776254) == 67097033\nassert solution.maxValue(2, 0, 171720689) == 85860345\nassert solution.maxValue(60, 30, 909038762) == 15150661\nassert solution.maxValue(37, 12, 623187224) == 16842908\nassert solution.maxValue(63, 59, 198596888) == 3152359\nassert solution.maxValue(54, 7, 439835455) == 8145121",
  "inefficient_solution": "class Solution:\n    def maxValue(self, n: int, index: int, maxSum: int) -> int:\n        nums = [0] * n\n        max_val = 1\n\n        for i in range(n):\n            for j in range(1, max_val + 1):\n                temp = nums.copy()\n                temp[i] = j\n                total = sum(temp)\n                if total > maxSum:\n                    break\n                for k in range(n):\n                    if k != i and abs(temp[i] - temp[k]) > 1:\n                        total = float('inf')\n                        break\n                if total <= maxSum:\n                    max_val = max(max_val, j)\n\n        return max_val",
  "is_python": true
}