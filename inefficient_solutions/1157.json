{
  "problem_idx": 1157,
  "task_name": "Online Majority Element In Subarray",
  "markdown_description": "\nDesign a data structure that efficiently finds the **majority element** of a given subarray.\n\n\nThe **majority element** of a subarray is an element that occurs `threshold` times or more in the subarray.\n\n\nImplementing the `MajorityChecker` class:\n\n\n* `MajorityChecker(int[] arr)` Initializes the instance of the class with the given array `arr`.\n* `int query(int left, int right, int threshold)` returns the element in the subarray `arr[left...right]` that occurs at least `threshold` times, or `-1` if no such element exists.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input**\n[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]\n**Output**\n[null, 1, -1, 2]\n\n**Explanation**\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 2 * 104`\n* `1 <= arr[i] <= 2 * 104`\n* `0 <= left <= right < arr.length`\n* `threshold <= right - left + 1`\n* `2 * threshold > right - left + 1`\n* At most `104` calls will be made to `query`.\n\n\n",
  "canonical_solution": "class Node:\n    __slots__ = (\"l\", \"r\", \"x\", \"cnt\")\n\n    def __init__(self):\n        self.l = self.r = 0\n        self.x = self.cnt = 0\n\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.nums = nums\n        n = len(nums)\n        self.tr = [Node() for _ in range(n << 2)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l, self.tr[u].r = l, r\n        if l == r:\n            self.tr[u].x = self.nums[l - 1]\n            self.tr[u].cnt = 1\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n        self.pushup(u)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].x, self.tr[u].cnt\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if r <= mid:\n            return self.query(u << 1, l, r)\n        if l > mid:\n            return self.query(u << 1 | 1, l, r)\n        x1, cnt1 = self.query(u << 1, l, r)\n        x2, cnt2 = self.query(u << 1 | 1, l, r)\n        if x1 == x2:\n            return x1, cnt1 + cnt2\n        if cnt1 >= cnt2:\n            return x1, cnt1 - cnt2\n        else:\n            return x2, cnt2 - cnt1\n\n    def pushup(self, u):\n        if self.tr[u << 1].x == self.tr[u << 1 | 1].x:\n            self.tr[u].x = self.tr[u << 1].x\n            self.tr[u].cnt = self.tr[u << 1].cnt + self.tr[u << 1 | 1].cnt\n        elif self.tr[u << 1].cnt >= self.tr[u << 1 | 1].cnt:\n            self.tr[u].x = self.tr[u << 1].x\n            self.tr[u].cnt = self.tr[u << 1].cnt - self.tr[u << 1 | 1].cnt\n        else:\n            self.tr[u].x = self.tr[u << 1 | 1].x\n            self.tr[u].cnt = self.tr[u << 1 | 1].cnt - self.tr[u << 1].cnt\n\n\nclass MajorityChecker:\n    def __init__(self, arr: List[int]):\n        self.tree = SegmentTree(arr)\n        self.d = defaultdict(list)\n        for i, x in enumerate(arr):\n            self.d[x].append(i)\n\n    def query(self, left: int, right: int, threshold: int) -> int:\n        x, _ = self.tree.query(1, left + 1, right + 1)\n        l = bisect_left(self.d[x], left)\n        r = bisect_left(self.d[x], right + 1)\n        return x if r - l >= threshold else -1\n\n\n# Your MajorityChecker object will be instantiated and called as such:\n# obj = MajorityChecker(arr)\n# param_1 = obj.query(left,right,threshold)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import defaultdict\nfrom bisect import bisect_left\n\nclass Node:\n    __slots__ = (\"l\", \"r\", \"x\", \"cnt\")\n\n    def __init__(self):\n        self.l = self.r = 0\n        self.x = self.cnt = 0\n\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.nums = nums\n        n = len(nums)\n        self.tr = [Node() for _ in range(n << 2)]\n        self.build(1, 1, n)\n\n    def build(self, u, l, r):\n        self.tr[u].l, self.tr[u].r = l, r\n        if l == r:\n            self.tr[u].x = self.nums[l - 1]\n            self.tr[u].cnt = 1\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n        self.pushup(u)\n\n    def query(self, u, l, r):\n        if self.tr[u].l >= l and self.tr[u].r <= r:\n            return self.tr[u].x, self.tr[u].cnt\n        mid = (self.tr[u].l + self.tr[u].r) >> 1\n        if r <= mid:\n            return self.query(u << 1, l, r)\n        if l > mid:\n            return self.query(u << 1 | 1, l, r)\n        x1, cnt1 = self.query(u << 1, l, r)\n        x2, cnt2 = self.query(u << 1 | 1, l, r)\n        if x1 == x2:\n            return x1, cnt1 + cnt2\n        if cnt1 >= cnt2:\n            return x1, cnt1 - cnt2\n        else:\n            return x2, cnt2 - cnt1\n\n    def pushup(self, u):\n        if self.tr[u << 1].x == self.tr[u << 1 | 1].x:\n            self.tr[u].x = self.tr[u << 1].x\n            self.tr[u].cnt = self.tr[u << 1].cnt + self.tr[u << 1 | 1].cnt\n        elif self.tr[u << 1].cnt >= self.tr[u << 1 | 1].cnt:\n            self.tr[u].x = self.tr[u << 1].x\n            self.tr[u].cnt = self.tr[u << 1].cnt - self.tr[u << 1 | 1].cnt\n        else:\n            self.tr[u].x = self.tr[u << 1 | 1].x\n            self.tr[u].cnt = self.tr[u << 1 | 1].cnt - self.tr[u << 1].cnt\n\n\nclass MajorityChecker:\n    def __init__(self, arr: List[int]):\n        self.tree = SegmentTree(arr)\n        self.d = defaultdict(list)\n        for i, x in enumerate(arr):\n            self.d[x].append(i)\n\n    def query(self, left: int, right: int, threshold: int) -> int:\n        x, _ = self.tree.query(1, left + 1, right + 1)\n        l = bisect_left(self.d[x], left)\n        r = bisect_left(self.d[x], right + 1)\n        return x if r - l >= threshold else -1\n\n\ndef generate_test_case():\n    arr = random.sample(range(1, 20001), random.randint(2, 100))\n    left = random.randint(0, len(arr) - 1)\n    right = random.randint(left, len(arr) - 1)\n    threshold = random.randint(1, right - left + 1)\n\n    solution = MajorityChecker(arr)\n    expected_result = solution.query(left, right, threshold)\n\n    return arr, left, right, threshold, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, left, right, threshold, expected_result = generate_test_case()\n        solution = MajorityChecker(arr)\n        assert solution.query(left, right, threshold) == expected_result\n        print(f\"assert solution.query({left}, {right}, {threshold}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.query({left}, {right}, {threshold}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.query(14, 40, 12) == -1\nassert solution.query(9, 9, 1) == 4770\nassert solution.query(44, 78, 32) == -1\nassert solution.query(15, 17, 3) == -1\nassert solution.query(32, 33, 1) == 5897\nassert solution.query(6, 26, 2) == -1\nassert solution.query(27, 30, 2) == -1\nassert solution.query(27, 30, 2) == -1\nassert solution.query(8, 10, 2) == -1\nassert solution.query(33, 34, 2) == -1\nassert solution.query(5, 6, 2) == -1\nassert solution.query(24, 59, 7) == -1\nassert solution.query(26, 48, 17) == -1\nassert solution.query(20, 20, 1) == 13064\nassert solution.query(98, 99, 2) == -1\nassert solution.query(7, 18, 11) == -1\nassert solution.query(3, 16, 11) == -1\nassert solution.query(8, 60, 39) == -1\nassert solution.query(16, 29, 3) == -1\nassert solution.query(80, 81, 2) == -1\nassert solution.query(37, 43, 3) == -1\nassert solution.query(24, 28, 2) == -1\nassert solution.query(65, 75, 3) == -1\nassert solution.query(27, 27, 1) == 13984\nassert solution.query(24, 41, 17) == -1\nassert solution.query(91, 91, 1) == 1701\nassert solution.query(70, 82, 1) == 4842\nassert solution.query(76, 79, 3) == -1\nassert solution.query(45, 77, 21) == -1\nassert solution.query(35, 46, 2) == -1\nassert solution.query(33, 41, 1) == 13270\nassert solution.query(0, 44, 28) == -1\nassert solution.query(13, 20, 1) == 13900\nassert solution.query(10, 60, 6) == -1\nassert solution.query(1, 19, 4) == -1\nassert solution.query(12, 12, 1) == 16600\nassert solution.query(5, 54, 5) == -1\nassert solution.query(3, 20, 1) == 14833\nassert solution.query(56, 74, 4) == -1\nassert solution.query(39, 39, 1) == 2001\nassert solution.query(4, 12, 2) == -1\nassert solution.query(10, 18, 4) == -1\nassert solution.query(78, 88, 6) == -1\nassert solution.query(42, 42, 1) == 5200\nassert solution.query(6, 57, 26) == -1\nassert solution.query(26, 32, 1) == 12708\nassert solution.query(4, 4, 1) == 18729\nassert solution.query(0, 13, 3) == -1\nassert solution.query(2, 5, 3) == -1\nassert solution.query(68, 69, 1) == 8818\nassert solution.query(19, 38, 11) == -1\nassert solution.query(34, 49, 14) == -1\nassert solution.query(24, 59, 20) == -1\nassert solution.query(48, 48, 1) == 2887\nassert solution.query(0, 2, 1) == 15823\nassert solution.query(45, 53, 1) == 4377\nassert solution.query(8, 9, 1) == 5094\nassert solution.query(26, 26, 1) == 7766\nassert solution.query(3, 34, 8) == -1\nassert solution.query(30, 34, 1) == 9377\nassert solution.query(46, 47, 2) == -1\nassert solution.query(21, 30, 6) == -1\nassert solution.query(16, 20, 2) == -1\nassert solution.query(41, 48, 2) == -1\nassert solution.query(1, 1, 1) == 9883\nassert solution.query(58, 62, 3) == -1\nassert solution.query(25, 26, 2) == -1\nassert solution.query(15, 15, 1) == 3265\nassert solution.query(0, 0, 1) == 8764\nassert solution.query(5, 35, 29) == -1\nassert solution.query(9, 25, 17) == -1\nassert solution.query(4, 5, 1) == 554\nassert solution.query(5, 6, 2) == -1\nassert solution.query(46, 46, 1) == 915\nassert solution.query(39, 73, 10) == -1\nassert solution.query(5, 35, 25) == -1\nassert solution.query(53, 54, 1) == 4176\nassert solution.query(1, 25, 8) == -1\nassert solution.query(21, 25, 5) == -1\nassert solution.query(17, 17, 1) == 10427\nassert solution.query(40, 40, 1) == 12410\nassert solution.query(5, 25, 11) == -1\nassert solution.query(7, 9, 3) == -1\nassert solution.query(3, 13, 3) == -1\nassert solution.query(82, 92, 10) == -1\nassert solution.query(26, 38, 3) == -1\nassert solution.query(35, 39, 2) == -1\nassert solution.query(58, 82, 4) == -1\nassert solution.query(5, 7, 2) == -1\nassert solution.query(62, 64, 2) == -1\nassert solution.query(36, 39, 4) == -1\nassert solution.query(28, 44, 8) == -1\nassert solution.query(2, 3, 2) == -1\nassert solution.query(40, 41, 1) == 3699\nassert solution.query(83, 89, 4) == -1\nassert solution.query(27, 27, 1) == 9242\nassert solution.query(31, 37, 1) == 5787\nassert solution.query(54, 69, 14) == -1\nassert solution.query(29, 30, 1) == 5606\nassert solution.query(70, 88, 10) == -1",
  "inefficient_solution": "class MajorityChecker:\n    def __init__(self, arr: List[int]):\n        self.arr = [x for x in arr for _ in range(len(arr))]\n        self.d = defaultdict(list)\n        for i, x in enumerate(arr):\n            self.d[x].append(i)\n        self.index_map = {x: i for i, x in enumerate(arr)}\n\n    def query(self, left: int, right: int, threshold: int) -> int:\n        x = random.choice(list(self.d.keys()))\n        l = bisect_left(self.d[x], left)\n        r = bisect_left(self.d[x], right + 1)\n        if r - l >= threshold:\n            return x\n        else:\n            for y in self.d.keys():\n                if y != x:\n                    l = bisect_left(self.d[y], left)\n                    r = bisect_left(self.d[y], right + 1)\n                    if r - l >= threshold:\n                        return y\n            return -1",
  "is_python": true
}