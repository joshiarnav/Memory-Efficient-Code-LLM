{
  "problem_idx": 826,
  "task_name": "Most Profit Assigning Work",
  "markdown_description": "\nYou have `n` jobs and `m` workers. You are given three arrays: `difficulty`, `profit`, and `worker` where:\n\n\n* `difficulty[i]` and `profit[i]` are the difficulty and the profit of the `ith` job, and\n* `worker[j]` is the ability of `jth` worker (i.e., the `jth` worker can only complete a job with difficulty at most `worker[j]`).\n\n\nEvery worker can be assigned **at most one job**, but one job can be **completed multiple times**.\n\n\n* For example, if three workers attempt the same job that pays `$1`, then the total profit will be `$3`. If a worker cannot complete any job, their profit is `$0`.\n\n\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n**Output:** 100\n**Explanation:** Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == difficulty.length`\n* `n == profit.length`\n* `m == worker.length`\n* `1 <= n, m <= 104`\n* `1 <= difficulty[i], profit[i], worker[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxProfitAssignment(\n        self, difficulty: List[int], profit: List[int], worker: List[int]\n    ) -> int:\n        n = len(difficulty)\n        job = [(difficulty[i], profit[i]) for i in range(n)]\n        job.sort(key=lambda x: x[0])\n        worker.sort()\n        i = t = res = 0\n        for w in worker:\n            while i < n and job[i][0] <= w:\n                t = max(t, job[i][1])\n                i += 1\n            res += t\n        return res\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxProfitAssignment(self, difficulty, profit, worker):\n        n = len(difficulty)\n        job = [(difficulty[i], profit[i]) for i in range(n)]\n        job.sort(key=lambda x: x[0])\n        worker.sort()\n        i = t = res = 0\n        for w in worker:\n            while i < n and job[i][0] <= w:\n                t = max(t, job[i][1])\n                i += 1\n            res += t\n        return res\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random difficulty list\n    difficulty = random.choices(range(1, 100_001), k=random.randint(1, 10))\n    \n    # Generate random profit list\n    profit = random.choices(range(1, 100_001), k=len(difficulty))\n    \n    # Generate random worker list\n    worker = random.choices(range(1, 100_001), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxProfitAssignment(difficulty, profit, worker)\n    \n    return difficulty, profit, worker, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        difficulty, profit, worker, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxProfitAssignment(difficulty, profit, worker) == expected_result\n        print(f\"assert solution.maxProfitAssignment({difficulty}, {profit}, {worker}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxProfitAssignment({difficulty}, {profit}, {worker}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxProfitAssignment([80608, 21881, 88399, 81269, 18256, 77890], [42988, 54269, 6735, 33154, 93369, 21957], [8546, 10074, 12011, 15735, 58316, 61580, 89932, 92995]) == 373476\nassert solution.maxProfitAssignment([51391, 9559, 34020, 33573, 65605, 27026, 57834, 30325], [42709, 4202, 18099, 17039, 24286, 9133, 19413, 56678], [33206, 54197]) == 113356\nassert solution.maxProfitAssignment([68139, 51074, 90405, 55865, 65189, 66363, 60405, 55705, 76384, 7709], [56824, 23981, 93806, 38456, 5013, 83577, 77074, 11574, 60646, 25976], [15975, 27077, 32227, 67627, 69024, 80743, 81839, 93217, 97509]) == 599848\nassert solution.maxProfitAssignment([30992, 6639, 58473, 47256, 86667, 53909, 46794, 95396], [1510, 35308, 53665, 69951, 92162, 53228, 96838, 29088], [17665, 22604, 59201, 62856, 64296, 73305, 86867, 96430, 98583, 99353]) == 845320\nassert solution.maxProfitAssignment([90602, 64493, 72317, 70851], [16178, 97800, 96727, 19011], [48918, 85729]) == 97800\nassert solution.maxProfitAssignment([79707, 77882, 78111, 19829, 48065, 21630, 90633, 20141, 5272], [3645, 91669, 4459, 87250, 71612, 2859, 74249, 20590, 88678], [19913, 87960]) == 180347\nassert solution.maxProfitAssignment([11851, 41017], [26620, 10153], [5505, 12105, 29622, 38616, 56500, 83039]) == 133100\nassert solution.maxProfitAssignment([62943, 98038, 80474, 70763, 47239], [37424, 4437, 88727, 66770, 25598], [1968, 19151, 25587, 54014, 85507, 85771, 86735, 91576, 97098]) == 469233\nassert solution.maxProfitAssignment([13682, 6555, 30053, 71537, 77801, 43438], [79423, 72792, 18366, 71127, 64103, 77401], [701, 3719, 4586, 8345, 19930, 68391, 88576]) == 311061\nassert solution.maxProfitAssignment([86840, 1136, 84113, 26657, 77925, 85690, 67612, 69183], [5971, 83032, 11671, 85333, 6434, 55201, 36592, 79473], [9944, 45683, 64065, 68571, 93618]) == 424364\nassert solution.maxProfitAssignment([9811, 38727, 26451, 53542, 33394, 97633, 26163, 58112], [65393, 13944, 48356, 72175, 84869, 4738, 26189, 89959], [15436, 22719, 57928, 76334, 87344, 92854, 96407, 99041]) == 665450\nassert solution.maxProfitAssignment([3518, 47135, 16441], [1269, 14872, 25711], [6206, 21727, 26356, 42068, 44601, 45604, 56632, 82719, 97617]) == 206957\nassert solution.maxProfitAssignment([30197, 28076], [34764, 15587], [23781, 27750, 49536, 66843, 67416, 82673, 82719, 87053, 93429, 94272]) == 278112\nassert solution.maxProfitAssignment([17345, 11789, 27772, 98883, 43713, 22728, 77066, 71812, 54812], [7614, 94360, 95179, 7440, 19331, 83657, 27087, 72997, 63461], [37376, 46957, 89052, 94829, 97524]) == 475895\nassert solution.maxProfitAssignment([46244], [87510], [26082, 40821, 57859, 82235]) == 175020\nassert solution.maxProfitAssignment([44787, 99012, 37111, 17947], [50655, 6065, 14314, 34346], [7149, 7292, 15157, 52931, 61522, 63011, 93395, 95482]) == 253275\nassert solution.maxProfitAssignment([98820, 42308, 31828, 86752, 20383, 92639, 28983, 38578, 17783, 20837], [18841, 57280, 57028, 63928, 51649, 99614, 80147, 83424, 17613, 11684], [30659]) == 80147\nassert solution.maxProfitAssignment([85121, 57263, 86497, 30499, 55654, 39725, 3818, 64649, 73687], [15748, 7843, 68313, 70707, 96948, 4874, 13589, 96536, 23958], [30808, 50439, 73069]) == 238362\nassert solution.maxProfitAssignment([75659, 35978, 30468, 60930, 37129, 42106, 61987, 59775, 99524, 52148], [82541, 66947, 79659, 29312, 23404, 32383, 97655, 47069, 76688, 59323], [40924, 45071, 55971, 72713, 80109, 80536, 92521]) == 629597\nassert solution.maxProfitAssignment([65631], [20592], [12892, 34663, 53917, 69131, 75858, 81368]) == 61776\nassert solution.maxProfitAssignment([88183, 62959, 60635, 42743, 66599, 12311, 27310], [70870, 6344, 34328, 53010, 69107, 34628, 97906], [7325, 34365, 63351, 90639, 96797]) == 391624\nassert solution.maxProfitAssignment([1286, 49717, 94376, 46100, 87916, 27185, 97145, 46322, 98730, 32137], [32616, 6694, 2739, 39400, 80636, 5389, 7624, 38370, 30909, 28109], [29304, 74305]) == 72016\nassert solution.maxProfitAssignment([52912, 41451, 13752, 35441, 43317, 53607, 5530, 81026, 67504], [68591, 38433, 94560, 56379, 46631, 77069, 18511, 78868, 5365], [1223, 48495, 60072, 70599, 71344, 76067, 98832]) == 567360\nassert solution.maxProfitAssignment([19027, 50049, 15377, 36172, 42716], [7127, 7265, 47939, 17497, 10358], [87210]) == 47939\nassert solution.maxProfitAssignment([75689, 44714, 866], [6269, 40759, 47295], [31286, 60968]) == 94590\nassert solution.maxProfitAssignment([76768, 24999], [29600, 45943], [42245, 55299, 55680, 82823]) == 183772\nassert solution.maxProfitAssignment([19654, 48600, 29747, 35999, 67406, 96275, 95912, 62486, 9592], [16634, 94163, 87916, 17964, 30990, 38969, 22119, 45383, 46393], [2398, 16871, 28622, 31297, 41746, 66174, 80722, 86400, 91419]) == 645270\nassert solution.maxProfitAssignment([47793, 9587, 71305, 68426, 60195, 66918, 14254, 17898, 48386, 64923], [87895, 25229, 16136, 22919, 66631, 98889, 78083, 54001, 76420, 33727], [5030, 9840, 36711, 55312, 60922, 74250, 99824, 99894]) == 575769\nassert solution.maxProfitAssignment([83683, 68004, 5342, 84531], [49618, 71028, 57932, 21059], [18716, 34036, 43188, 76443, 97193]) == 315852\nassert solution.maxProfitAssignment([2945, 78805, 63712, 35612, 8338], [37193, 64759, 20165, 68615, 809], [22031, 36967, 46021, 63654, 83782, 85181]) == 380268\nassert solution.maxProfitAssignment([94758, 23849, 63371, 61734, 90028, 24748, 98266], [3158, 21652, 16264, 45597, 98651, 53955, 9777], [1306, 41498, 45076, 58435, 70195]) == 215820\nassert solution.maxProfitAssignment([69831, 15872, 79264, 31990, 32054, 15201, 53656, 72305, 54395, 63059], [7603, 45254, 72382, 86147, 76881, 55223, 71845, 59058, 52212, 80198], [19934, 23689, 31447, 68460, 74148, 79181, 93458, 95583, 98911]) == 682551\nassert solution.maxProfitAssignment([71265, 86228, 27785, 46791, 57735, 10662, 12763, 99204, 56250, 97576], [66068, 27162, 37497, 20498, 40899, 31332, 2558, 55702, 98148, 36149], [10056, 13240, 47859, 47927, 58311]) == 204474\nassert solution.maxProfitAssignment([48032, 7455, 87117, 65485, 89922], [86151, 33948, 53331, 24148, 37058], [80583]) == 86151\nassert solution.maxProfitAssignment([3819, 62673, 59630, 28305, 39872], [39898, 35230, 50733, 22823, 59012], [2469, 31443]) == 39898\nassert solution.maxProfitAssignment([8139, 55213, 91228, 16696, 67366, 44522, 81899], [55446, 98920, 26476, 45501, 6445, 11637, 25755], [7682, 28634, 35432, 46037, 53701, 65535, 95637]) == 419624\nassert solution.maxProfitAssignment([62221, 37666, 81923, 44929], [82843, 27528, 73078, 53749], [46132, 62256, 94925]) == 219435\nassert solution.maxProfitAssignment([92739, 9737], [90740, 22280], [28003, 70431, 73483, 75506, 81147, 82508, 84800, 93027]) == 246700\nassert solution.maxProfitAssignment([20146, 69693, 49668, 3963, 68506], [91510, 83243, 51911, 63179, 95626], [16181, 60910]) == 154689\nassert solution.maxProfitAssignment([93767], [20903], [35359, 56728, 74578, 79877]) == 0\nassert solution.maxProfitAssignment([46160, 97052, 90419, 71347, 35757], [28294, 20130, 99427, 30635, 40025], [1320, 17187, 26232, 35906, 59286, 80876]) == 120075\nassert solution.maxProfitAssignment([17857, 149, 87033, 62922, 77304, 607, 66229], [99491, 48402, 8269, 94391, 73067, 43855, 58864], [6554, 11379, 24485, 48517, 56887, 59775, 65075, 79014, 98655]) == 793241\nassert solution.maxProfitAssignment([78965, 60860, 57775, 51554, 38541, 23051], [33937, 8748, 42083, 99721, 83366, 14745], [13458, 18227, 20218, 43145, 55602]) == 183087\nassert solution.maxProfitAssignment([28749, 22290, 5048, 14131], [46731, 29159, 40955, 29752], [1487, 2159, 2806, 21843, 24570, 31066, 38505, 38903, 92709, 96098]) == 315565\nassert solution.maxProfitAssignment([70582, 39082, 52164, 30430, 68793], [4245, 10600, 31857, 45348, 27605], [8733, 16443, 47894, 73923]) == 90696\nassert solution.maxProfitAssignment([88080, 76779, 10797, 14079, 204], [41376, 50984, 62462, 80687, 51995], [465, 2729, 43857, 65261, 89003, 96930]) == 426738\nassert solution.maxProfitAssignment([6808], [97795], [18976, 31699, 66933, 89798, 89976, 92451]) == 586770\nassert solution.maxProfitAssignment([40874, 27884, 20185, 23140], [56632, 54316, 50941, 33503], [17602]) == 0\nassert solution.maxProfitAssignment([42602, 37191, 9320], [67885, 77588, 60232], [36481, 55239, 98638]) == 215408\nassert solution.maxProfitAssignment([60241, 98827, 26926, 10635, 27379, 16089, 36451, 66377], [63698, 68754, 26779, 32812, 75485, 81577, 90978, 58286], [20841, 36353, 44308, 45730, 48529, 70143, 71554, 83175, 84366]) == 800000\nassert solution.maxProfitAssignment([17453, 45241, 84733, 51800, 60385, 7091, 60131], [13914, 8559, 50770, 66036, 97880, 91834, 39476], [25343, 91215]) == 189714\nassert solution.maxProfitAssignment([9082, 63295, 15357, 15998, 30713], [31869, 9629, 9202, 60149, 56943], [18835, 29278, 65873, 69432, 73949]) == 300745\nassert solution.maxProfitAssignment([515, 17616, 2852, 17898, 36952], [58419, 23625, 38899, 37459, 96955], [16810, 24283, 35682, 77513, 83473, 94564]) == 466122\nassert solution.maxProfitAssignment([30235, 78174, 95865, 58455, 29903], [35278, 29583, 86516, 40454, 93124], [17080, 21305, 42922, 75898]) == 186248\nassert solution.maxProfitAssignment([8289, 79838, 557, 18230], [8728, 80571, 31850, 11601], [57297]) == 31850\nassert solution.maxProfitAssignment([34782, 19010, 76719, 47141, 72672, 81688, 92036], [11937, 93564, 18401, 97392, 44905, 81603, 30794], [54965, 92570]) == 194784\nassert solution.maxProfitAssignment([4387, 2514, 9310, 33893, 290, 62063, 87699, 65685], [87424, 5136, 12527, 80012, 73604, 27178, 7119, 18084], [19978, 43541, 56037, 58033, 58337, 71005, 84369, 99376]) == 699392\nassert solution.maxProfitAssignment([65418, 89440, 90400, 26700, 12495, 48202, 54942, 60643], [69669, 1212, 23024, 26390, 98032, 59509, 66676, 77392], [39076, 48914, 70467]) == 294096\nassert solution.maxProfitAssignment([68054, 96294, 60274], [51558, 14908, 49459], [30691, 59550, 60073, 81601, 92263, 96065]) == 154674\nassert solution.maxProfitAssignment([37999, 29885, 89226, 32389, 92675, 17237, 87335, 37108], [75406, 83888, 15728, 17011, 30201, 3862, 5012, 34094], [858, 9193, 30554, 32956, 64388, 70023, 79711, 81880]) == 503328\nassert solution.maxProfitAssignment([89207, 33772, 80251, 65011, 1403, 94512], [78069, 77342, 97663, 11524, 62390, 8329], [22042, 32035, 49616, 51075]) == 279464\nassert solution.maxProfitAssignment([76800, 17692], [38214, 29645], [22556, 25042, 35163, 43188, 47815, 62520, 67311, 85690, 97460]) == 283943\nassert solution.maxProfitAssignment([44247, 3490, 63356], [80670, 45651, 92496], [2104, 7006, 44395, 60502, 72105, 74879, 86051, 89247]) == 576975\nassert solution.maxProfitAssignment([39026, 30582, 54443, 18814, 52266, 44809, 18012, 1216, 70112], [30659, 27360, 16354, 87676, 84345, 78141, 51470, 47373, 39447], [18064]) == 51470\nassert solution.maxProfitAssignment([18758, 96940, 89190], [23798, 23943, 43651], [22021, 31932, 32952, 77145, 98942]) == 138843\nassert solution.maxProfitAssignment([90446, 49705, 45573, 34808, 36521, 42494, 56671, 97688, 65217, 24667], [60081, 3702, 30132, 1243, 11297, 44146, 81821, 84447, 37349, 97151], [29484, 56328]) == 194302\nassert solution.maxProfitAssignment([22264, 64951, 32985, 9844, 588, 22884, 50086, 15050, 78490], [45536, 43647, 14401, 12651, 81542, 17906, 37165, 66653, 37862], [12769, 14590, 15856, 23601, 24332, 32828, 38853, 50847, 67097, 76044]) == 815420\nassert solution.maxProfitAssignment([8049, 40285, 77123, 82018, 27171, 79861, 15626, 71040], [49017, 9714, 83293, 65744, 99403, 37986, 5534, 7183], [22365, 45297, 52079, 54190, 63423, 81099, 96050]) == 645435\nassert solution.maxProfitAssignment([14560, 86454, 14928, 67084, 83237], [14695, 11549, 73115, 79957, 87992], [61227, 73072, 77828]) == 233029\nassert solution.maxProfitAssignment([8265], [69990], [37446, 81437]) == 139980\nassert solution.maxProfitAssignment([30743, 29531, 20148, 63757, 30121, 53111, 4630, 75986, 78433, 54567], [53941, 28045, 5400, 71368, 24411, 64097, 27926, 14024, 77997, 19908], [14958, 19578, 33424, 39576, 48379, 72493, 77733, 79236, 89634, 98627]) == 594402\nassert solution.maxProfitAssignment([3462, 66430, 35003, 2465, 74519, 98192, 39204, 53962, 98172, 41841], [2763, 72121, 49793, 1161, 24238, 47250, 89809, 95317, 17235, 76823], [20466, 21871, 82118, 93625]) == 196160\nassert solution.maxProfitAssignment([43088, 31176, 95347, 82945, 35323, 23968], [90782, 59868, 30306, 89151, 85779, 36627], [21621, 87695]) == 90782\nassert solution.maxProfitAssignment([71099, 64059, 44716, 72289, 53688, 93205, 95682, 56289], [28864, 82583, 93212, 90148, 948, 39961, 11211, 51402], [12151, 21891, 31461, 34678, 36353, 37842, 53929, 58903, 90310, 90846]) == 372848\nassert solution.maxProfitAssignment([20820, 72488, 52183, 78344, 6519, 16924], [6066, 12718, 55128, 67241, 3430, 8089], [3494, 5551, 17703, 37135, 42674, 48228, 56841, 63676, 86609, 86921]) == 277094\nassert solution.maxProfitAssignment([83773], [71090], [32455, 43079, 45772, 52516, 59420, 59487, 72276, 80490, 92499, 99288]) == 142180\nassert solution.maxProfitAssignment([86219, 52865, 23389], [86715, 77704, 20059], [4025, 52803, 59888, 62418, 75144]) == 253171\nassert solution.maxProfitAssignment([76773, 78787, 34067, 67965, 38171], [66721, 5747, 10289, 80760, 12526], [93688]) == 80760\nassert solution.maxProfitAssignment([35689, 43783, 13810, 45347, 35880], [17392, 55133, 92423, 10722, 59692], [18235, 38129, 63660, 88152, 92446]) == 462115\nassert solution.maxProfitAssignment([5427, 25159, 78517, 32743, 67634, 17500, 28487, 71096], [1052, 86058, 53373, 41995, 72918, 91514, 69236, 18501], [12802, 42542, 50585, 54829, 60377, 79074, 82070, 83679, 88251]) == 733164\nassert solution.maxProfitAssignment([40874, 94458, 7481, 66565], [37189, 50510, 42236, 40689], [2985, 29477, 41094, 43034, 44126, 44817, 49230, 90903, 91034]) == 337888\nassert solution.maxProfitAssignment([7293, 32120, 77803], [4183, 84202, 74867], [33563, 77221, 86727, 92187, 92238, 96271]) == 505212\nassert solution.maxProfitAssignment([16290, 38029, 92224, 26835, 91599, 45862, 48308, 70823], [16247, 44245, 61707, 73144, 74867, 89127, 41600, 98056], [1407, 3189, 16273, 39793, 53177, 58166, 70603, 72204, 94389]) == 536637\nassert solution.maxProfitAssignment([16238, 18902, 65065, 60393, 5468, 28802], [64565, 91441, 58687, 16389, 37955, 41205], [71050]) == 91441\nassert solution.maxProfitAssignment([94763, 14957, 53085, 54837, 93742, 62993], [37066, 36054, 97318, 23030, 37622, 57903], [34669, 36030]) == 72108\nassert solution.maxProfitAssignment([53371, 55722, 95522, 71838, 24648, 33040, 90788], [56923, 10215, 80835, 81066, 3393, 95870, 53829], [285, 1471, 5917, 13930, 56541, 56587, 87113, 95614, 99440]) == 479350\nassert solution.maxProfitAssignment([4226], [63600], [12610, 39732, 65024, 95869]) == 254400\nassert solution.maxProfitAssignment([56634, 49897, 43894, 80617, 93521, 81493, 17937, 90551, 80882, 66140], [8606, 21150, 18399, 145, 16083, 89311, 84831, 90079, 33738, 94367], [529, 48049, 48362, 55541, 55954, 57869, 78414]) == 518522\nassert solution.maxProfitAssignment([11498, 32737, 2963, 92288], [58911, 74186, 40760, 71388], [2223, 24684, 43882, 53259, 93243, 96859]) == 355655\nassert solution.maxProfitAssignment([50868, 10813, 93093, 59114, 56502, 89548, 31297, 35518, 93990], [36561, 8742, 34456, 87103, 4166, 22638, 9114, 34149, 46595], [28654, 56488]) == 45303\nassert solution.maxProfitAssignment([92505, 75295, 11043, 40962, 21383, 98285, 26534, 12855, 8179, 33297], [19299, 29213, 37030, 41884, 49500, 56573, 63277, 80529, 15835, 96855], [13967, 22975, 23665, 54137, 67325, 70190, 84762, 89576]) == 725862\nassert solution.maxProfitAssignment([39879], [43234], [17921, 26027, 59197]) == 43234\nassert solution.maxProfitAssignment([197, 75130], [99014, 15985], [162, 698, 725, 4786, 14853, 18262, 38037, 86265, 91050, 99933]) == 891126\nassert solution.maxProfitAssignment([68192], [81971], [15626, 26596, 47642, 66703, 88977]) == 81971\nassert solution.maxProfitAssignment([90919, 85105, 75224, 85267, 87649, 62373, 7586, 65876, 53477], [83746, 14750, 61734, 58073, 19487, 47000, 10466, 50083, 28586], [28640, 31337, 53010, 93111]) == 115144\nassert solution.maxProfitAssignment([47834, 33197, 5357, 29082, 87285], [47416, 52726, 34237, 87180, 58132], [22645, 25545, 43695, 54970, 56749, 63338, 77731, 84677, 88813]) == 678734\nassert solution.maxProfitAssignment([72218, 75561, 71799, 47458], [73852, 5393, 36355, 64240], [8359, 46096, 49742, 54121, 64307, 68470, 83652, 90804, 92770]) == 478516\nassert solution.maxProfitAssignment([4093, 37661, 26168], [35380, 19140, 76844], [1261, 1628, 14732, 18186, 38587, 51260, 60946, 71196, 72697]) == 454980\nassert solution.maxProfitAssignment([93243, 83995, 37440, 23876, 97716, 14217, 35290], [99339, 60399, 14164, 99598, 15239, 43874, 19884], [2260, 14954, 30354, 35719, 85640, 93838]) == 442266\nassert solution.maxProfitAssignment([13235, 10250, 47144, 29101], [65487, 77694, 55933, 95987], [5253, 32543, 40272, 40501, 70038, 76047, 98530]) == 575922",
  "inefficient_solution": "class Solution:\n    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:\n        n = len(difficulty)\n        job = [(difficulty[i], profit[i]) for i in range(n)]\n        job.sort(key=lambda x: x[0])\n        worker.sort()\n        worker_list = [w for w in worker for _ in range(1000000)]  # Allocate 1M copies of each worker\n        res = 0\n        for w in worker_list:\n            i = 0\n            while i < n and job[i][0] <= w:\n                t = max(t, job[i][1])\n                i += 1\n            res += t\n        return res",
  "is_python": true
}