{
  "problem_idx": 2327,
  "task_name": "Number of People Aware of a Secret",
  "markdown_description": "\nOn day `1`, one person discovers a secret.\n\n\nYou are given an integer `delay`, which means that each person will **share** the secret with a new person **every day**, starting from `delay` days after discovering the secret. You are also given an integer `forget`, which means that each person will **forget** the secret `forget` days after discovering it. A person **cannot** share the secret on the same day they forgot it, or on any day afterwards.\n\n\nGiven an integer `n`, return *the number of people who know the secret at the end of day* `n`. Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 6, delay = 2, forget = 4\n**Output:** 5\n**Explanation:**\nDay 1: Suppose the first person is named A. (1 person)\nDay 2: A is the only person who knows the secret. (1 person)\nDay 3: A shares the secret with a new person, B. (2 people)\nDay 4: A shares the secret with a new person, C. (3 people)\nDay 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)\nDay 6: B shares the secret with E, and C shares the secret with F. (5 people)\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, delay = 1, forget = 3\n**Output:** 6\n**Explanation:**\nDay 1: The first person is named A. (1 person)\nDay 2: A shares the secret with B. (2 people)\nDay 3: A and B share the secret with 2 new people, C and D. (4 people)\nDay 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 1000`\n* `1 <= delay < forget <= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:\n        m = (n << 1) + 10\n        d = [0] * m\n        cnt = [0] * m\n        cnt[1] = 1\n        for i in range(1, n + 1):\n            if cnt[i]:\n                d[i] += cnt[i]\n                d[i + forget] -= cnt[i]\n                nxt = i + delay\n                while nxt < i + forget:\n                    cnt[nxt] += cnt[i]\n                    nxt += 1\n        mod = 10**9 + 7\n        return sum(d[: n + 1]) % mod\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:\n        m = (n << 1) + 10\n        d = [0] * m\n        cnt = [0] * m\n        cnt[1] = 1\n        for i in range(1, n + 1):\n            if cnt[i]:\n                d[i] += cnt[i]\n                d[i + forget] -= cnt[i]\n                nxt = i + delay\n                while nxt < i + forget:\n                    cnt[nxt] += cnt[i]\n                    nxt += 1\n        mod = 10**9 + 7\n        return sum(d[: n + 1]) % mod\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random values for n, delay, and forget\n    n = random.randint(2, 100)\n    delay = random.randint(1, n-1)\n    forget = random.randint(delay+1, n)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.peopleAwareOfSecret(n, delay, forget)\n\n    return n, delay, forget, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, delay, forget, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.peopleAwareOfSecret(n, delay, forget) == expected_result\n        test_case_generator_results.append(f\"assert solution.peopleAwareOfSecret({n}, {delay}, {forget}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.peopleAwareOfSecret(54, 1, 54) == 191690599\nassert solution.peopleAwareOfSecret(44, 34, 42) == 8\nassert solution.peopleAwareOfSecret(31, 19, 31) == 13\nassert solution.peopleAwareOfSecret(90, 78, 81) == 3\nassert solution.peopleAwareOfSecret(28, 15, 28) == 14\nassert solution.peopleAwareOfSecret(68, 5, 38) == 76793424\nassert solution.peopleAwareOfSecret(66, 8, 33) == 329605\nassert solution.peopleAwareOfSecret(47, 10, 39) == 1586\nassert solution.peopleAwareOfSecret(46, 38, 45) == 7\nassert solution.peopleAwareOfSecret(11, 2, 9) == 86\nassert solution.peopleAwareOfSecret(43, 17, 35) == 63\nassert solution.peopleAwareOfSecret(34, 22, 23) == 1\nassert solution.peopleAwareOfSecret(68, 7, 57) == 1872520\nassert solution.peopleAwareOfSecret(77, 32, 48) == 107\nassert solution.peopleAwareOfSecret(3, 2, 3) == 2\nassert solution.peopleAwareOfSecret(32, 23, 30) == 7\nassert solution.peopleAwareOfSecret(24, 1, 3) == 92736\nassert solution.peopleAwareOfSecret(96, 91, 95) == 4\nassert solution.peopleAwareOfSecret(24, 1, 10) == 8265840\nassert solution.peopleAwareOfSecret(84, 40, 49) == 19\nassert solution.peopleAwareOfSecret(40, 33, 38) == 5\nassert solution.peopleAwareOfSecret(38, 21, 31) == 10\nassert solution.peopleAwareOfSecret(17, 12, 14) == 2\nassert solution.peopleAwareOfSecret(70, 37, 46) == 9\nassert solution.peopleAwareOfSecret(27, 7, 20) == 160\nassert solution.peopleAwareOfSecret(17, 11, 15) == 4\nassert solution.peopleAwareOfSecret(25, 17, 21) == 4\nassert solution.peopleAwareOfSecret(29, 24, 29) == 6\nassert solution.peopleAwareOfSecret(44, 5, 42) == 90058\nassert solution.peopleAwareOfSecret(50, 39, 43) == 4\nassert solution.peopleAwareOfSecret(86, 14, 23) == 19557\nassert solution.peopleAwareOfSecret(89, 43, 54) == 17\nassert solution.peopleAwareOfSecret(63, 32, 52) == 20\nassert solution.peopleAwareOfSecret(71, 8, 43) == 950814\nassert solution.peopleAwareOfSecret(81, 57, 66) == 9\nassert solution.peopleAwareOfSecret(15, 8, 10) == 2\nassert solution.peopleAwareOfSecret(49, 25, 46) == 21\nassert solution.peopleAwareOfSecret(22, 17, 21) == 4\nassert solution.peopleAwareOfSecret(91, 82, 85) == 3\nassert solution.peopleAwareOfSecret(16, 12, 13) == 1\nassert solution.peopleAwareOfSecret(60, 18, 37) == 340\nassert solution.peopleAwareOfSecret(46, 4, 28) == 1087036\nassert solution.peopleAwareOfSecret(28, 3, 22) == 18538\nassert solution.peopleAwareOfSecret(49, 48, 49) == 2\nassert solution.peopleAwareOfSecret(13, 11, 13) == 3\nassert solution.peopleAwareOfSecret(28, 12, 23) == 21\nassert solution.peopleAwareOfSecret(71, 2, 50) == 518832045\nassert solution.peopleAwareOfSecret(73, 69, 73) == 5\nassert solution.peopleAwareOfSecret(50, 21, 28) == 40\nassert solution.peopleAwareOfSecret(70, 59, 60) == 1\nassert solution.peopleAwareOfSecret(91, 78, 79) == 1\nassert solution.peopleAwareOfSecret(86, 3, 4) == 1\nassert solution.peopleAwareOfSecret(6, 1, 2) == 2\nassert solution.peopleAwareOfSecret(9, 4, 6) == 3\nassert solution.peopleAwareOfSecret(10, 3, 7) == 15\nassert solution.peopleAwareOfSecret(46, 1, 43) == 371842528\nassert solution.peopleAwareOfSecret(75, 32, 37) == 25\nassert solution.peopleAwareOfSecret(76, 3, 36) == 435101561\nassert solution.peopleAwareOfSecret(77, 5, 24) == 932559782\nassert solution.peopleAwareOfSecret(51, 47, 50) == 3\nassert solution.peopleAwareOfSecret(23, 17, 18) == 1\nassert solution.peopleAwareOfSecret(44, 36, 42) == 6\nassert solution.peopleAwareOfSecret(77, 56, 77) == 22\nassert solution.peopleAwareOfSecret(9, 2, 4) == 11\nassert solution.peopleAwareOfSecret(2, 1, 2) == 2\nassert solution.peopleAwareOfSecret(22, 11, 15) == 4\nassert solution.peopleAwareOfSecret(76, 67, 76) == 10\nassert solution.peopleAwareOfSecret(20, 14, 15) == 1\nassert solution.peopleAwareOfSecret(96, 62, 70) == 8\nassert solution.peopleAwareOfSecret(82, 66, 81) == 15\nassert solution.peopleAwareOfSecret(92, 80, 87) == 7\nassert solution.peopleAwareOfSecret(89, 14, 27) == 58127\nassert solution.peopleAwareOfSecret(33, 25, 27) == 2\nassert solution.peopleAwareOfSecret(2, 1, 2) == 2\nassert solution.peopleAwareOfSecret(68, 42, 53) == 11\nassert solution.peopleAwareOfSecret(94, 89, 90) == 1\nassert solution.peopleAwareOfSecret(85, 40, 82) == 57\nassert solution.peopleAwareOfSecret(23, 1, 19) == 4194264\nassert solution.peopleAwareOfSecret(36, 27, 31) == 4\nassert solution.peopleAwareOfSecret(5, 4, 5) == 2\nassert solution.peopleAwareOfSecret(32, 11, 28) == 72\nassert solution.peopleAwareOfSecret(30, 29, 30) == 2\nassert solution.peopleAwareOfSecret(27, 2, 24) == 196411\nassert solution.peopleAwareOfSecret(79, 35, 46) == 56\nassert solution.peopleAwareOfSecret(25, 20, 24) == 4\nassert solution.peopleAwareOfSecret(34, 24, 25) == 1\nassert solution.peopleAwareOfSecret(38, 23, 27) == 4\nassert solution.peopleAwareOfSecret(38, 9, 32) == 524\nassert solution.peopleAwareOfSecret(7, 3, 4) == 2\nassert solution.peopleAwareOfSecret(95, 7, 41) == 868399847\nassert solution.peopleAwareOfSecret(99, 15, 70) == 243179\nassert solution.peopleAwareOfSecret(36, 24, 36) == 13\nassert solution.peopleAwareOfSecret(42, 22, 38) == 16\nassert solution.peopleAwareOfSecret(23, 22, 23) == 2\nassert solution.peopleAwareOfSecret(69, 66, 68) == 2\nassert solution.peopleAwareOfSecret(7, 4, 6) == 2\nassert solution.peopleAwareOfSecret(51, 48, 51) == 4\nassert solution.peopleAwareOfSecret(48, 7, 12) == 3248\nassert solution.peopleAwareOfSecret(19, 14, 15) == 1\nassert solution.peopleAwareOfSecret(55, 49, 55) == 7",
  "inefficient_solution": "class Solution:\n    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:\n        m = n * 1000  # Assuming a 1000 times larger array\n        d = [0] * m\n        cnt = [0] * m\n        for i in range(1, n + 1):\n            d[i] = 0\n            cnt[i] = 0\n        cnt[1] = 1\n        for i in range(1, n + 1):\n            if cnt[i]:\n                for j in range(i + 1, min(i + forget + 1, m)):\n                    d[j] += cnt[i]\n                for j in range(i + delay + 1, min(i + forget + 1, m)):\n                    cnt[j] += cnt[i]\n        mod = 10**9 + 7\n        res = 0\n        for i in range(1, n + 1):\n            res = (res + d[i]) % mod\n        return res",
  "is_python": true
}