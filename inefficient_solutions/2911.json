{
  "problem_idx": 2911,
  "task_name": "Minimum Changes to Make K Semi",
  "markdown_description": "\nGiven a string `s` and an integer `k`, partition `s` into `k` **substrings** such that the sum of the number of letter changes required to turn each **substring** into a **semi-palindrome** is minimized.\n\n\nReturn *an integer denoting the **minimum** number of letter changes required.*\n\n\n**Notes**\n\n\n* A string is a **palindrome** if it can be read the same way from left to right and right to left.\n* A string with a length of `len` is considered a **semi-palindrome** if there exists a positive integer `d` such that `1 <= d < len` and `len % d == 0`, and if we take indices that have the same modulo by `d`, they form a **palindrome**. For example, `\"aa\"`, `\"aba\"`, `\"adbgad\"`, and, `\"abab\"` are **semi-palindrome** and `\"a\"`, `\"ab\"`, and, `\"abca\"` are not.\n* A **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcac\", k = 2\n**Output:** 1\n**Explanation:** We can divide s into substrings \"ab\" and \"cac\". The string \"cac\" is already a semi-palindrome. If we change \"ab\" to \"aa\", it becomes a semi-palindrome with d = 1.\nIt can be shown that there is no way to divide the string \"abcac\" into two semi-palindrome substrings. Therefore, the answer would be at least 1.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcdef\", k = 2\n**Output:** 2\n**Explanation:** We can divide it into substrings \"abc\" and \"def\". Each of the substrings \"abc\" and \"def\" requires one change to become a semi-palindrome, so we need 2 changes in total to make all substrings semi-palindrome.\nIt can be shown that we cannot divide the given string into two substrings in a way that it would require less than 2 changes.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"aabbaa\", k = 3\n**Output:** 0\n**Explanation:** We can divide it into substrings \"aa\", \"bb\" and \"aa\".\nThe strings \"aa\" and \"bb\" are already semi-palindromes. Thus, the answer is zero.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= s.length <= 200`\n* `1 <= k <= s.length / 2`\n* `s` consists only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n        n = len(s)\n        g = [[inf] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                m = j - i + 1\n                for d in range(1, m):\n                    if m % d == 0:\n                        cnt = 0\n                        for l in range(m):\n                            r = (m // d - 1 - l // d) * d + l % d\n                            if l >= r:\n                                break\n                            if s[i - 1 + l] != s[i - 1 + r]:\n                                cnt += 1\n                        g[i][j] = min(g[i][j], cnt)\n\n        f = [[inf] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                for h in range(i - 1):\n                    f[i][j] = min(f[i][j], f[h][j - 1] + g[h + 1][i])\n        return f[n][k]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n        n = len(s)\n        g = [[inf] * (n + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                m = j - i + 1\n                for d in range(1, m):\n                    if m % d == 0:\n                        cnt = 0\n                        for l in range(m):\n                            r = (m // d - 1 - l // d) * d + l % d\n                            if l >= r:\n                                break\n                            if s[i - 1 + l] != s[i - 1 + r]:\n                                cnt += 1\n                        g[i][j] = min(g[i][j], cnt)\n\n        f = [[inf] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                for h in range(i - 1):\n                    f[i][j] = min(f[i][j], f[h][j - 1] + g[h + 1][i])\n        return f[n][k]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(2, 10)))\n    \n    # Generate a random k value\n    k = random.randint(1, len(s)-1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumChanges(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumChanges(s, k) == expected_result\n        print(f\"assert solution.minimumChanges('{s}', {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumChanges('{s}', {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumChanges('vnv', 1) == 0\nassert solution.minimumChanges('nm', 1) == 1\nassert solution.minimumChanges('arcsxuilk', 5) == inf\nassert solution.minimumChanges('oub', 2) == inf\nassert solution.minimumChanges('rpoz', 1) == 2\nassert solution.minimumChanges('ns', 1) == 1\nassert solution.minimumChanges('gbir', 1) == 2\nassert solution.minimumChanges('objuk', 1) == 2\nassert solution.minimumChanges('typzggoa', 1) == 4\nassert solution.minimumChanges('rej', 2) == inf\nassert solution.minimumChanges('cofhi', 3) == inf\nassert solution.minimumChanges('fb', 1) == 1\nassert solution.minimumChanges('uzbchaqcjb', 9) == inf\nassert solution.minimumChanges('yhzkvzt', 1) == 3\nassert solution.minimumChanges('jmtp', 2) == 2\nassert solution.minimumChanges('juaobapp', 4) == 3\nassert solution.minimumChanges('wfzn', 3) == inf\nassert solution.minimumChanges('froecujqlp', 2) == 4\nassert solution.minimumChanges('hiuxvtkvb', 7) == inf\nassert solution.minimumChanges('gtckdkspa', 8) == inf\nassert solution.minimumChanges('zucmdbwcmf', 3) == 4\nassert solution.minimumChanges('kvmyauadof', 5) == 5\nassert solution.minimumChanges('rkjmk', 1) == 2\nassert solution.minimumChanges('dq', 1) == 1\nassert solution.minimumChanges('eho', 2) == inf\nassert solution.minimumChanges('uu', 1) == 0\nassert solution.minimumChanges('gwkfafcw', 4) == 4\nassert solution.minimumChanges('ct', 1) == 1\nassert solution.minimumChanges('atycjkm', 5) == inf\nassert solution.minimumChanges('fwbiuqpqu', 1) == 3\nassert solution.minimumChanges('njryfkkvz', 3) == 3\nassert solution.minimumChanges('rqrxdm', 1) == 2\nassert solution.minimumChanges('szlcsn', 1) == 1\nassert solution.minimumChanges('vn', 1) == 1\nassert solution.minimumChanges('kofcoj', 1) == 2\nassert solution.minimumChanges('kgsttgop', 7) == inf\nassert solution.minimumChanges('ho', 1) == 1\nassert solution.minimumChanges('wxlmsjebdg', 1) == 4\nassert solution.minimumChanges('jh', 1) == 1\nassert solution.minimumChanges('yjbwhbdxhc', 3) == 3\nassert solution.minimumChanges('gvabqzawvp', 5) == 5\nassert solution.minimumChanges('vpqfsarv', 7) == inf\nassert solution.minimumChanges('svvnt', 1) == 2\nassert solution.minimumChanges('cbyherd', 5) == inf\nassert solution.minimumChanges('ibulgy', 2) == 2\nassert solution.minimumChanges('pxst', 3) == inf\nassert solution.minimumChanges('rfzaiki', 2) == 2\nassert solution.minimumChanges('iyixigazp', 7) == inf\nassert solution.minimumChanges('hvzjhnlyi', 4) == 4\nassert solution.minimumChanges('qnbrfap', 2) == 3\nassert solution.minimumChanges('khovt', 2) == 2\nassert solution.minimumChanges('lxvohpsnm', 1) == 3\nassert solution.minimumChanges('opxwpmqua', 8) == inf\nassert solution.minimumChanges('vxodlrf', 2) == 3\nassert solution.minimumChanges('ryyaioueuq', 9) == inf\nassert solution.minimumChanges('rcnld', 1) == 2\nassert solution.minimumChanges('ascv', 3) == inf\nassert solution.minimumChanges('bwcx', 3) == inf\nassert solution.minimumChanges('bikxlwj', 1) == 3\nassert solution.minimumChanges('bhafcmjl', 2) == 3\nassert solution.minimumChanges('bomtsyyt', 4) == 4\nassert solution.minimumChanges('yxrtqjdbt', 7) == inf\nassert solution.minimumChanges('yahkhjeltx', 3) == 3\nassert solution.minimumChanges('sjdlgjbdrn', 2) == 3\nassert solution.minimumChanges('msaizil', 4) == inf\nassert solution.minimumChanges('bvheu', 2) == 2\nassert solution.minimumChanges('izvjxdvdd', 3) == 2\nassert solution.minimumChanges('udtnynee', 1) == 3\nassert solution.minimumChanges('yeb', 2) == inf\nassert solution.minimumChanges('ppqgubp', 3) == 2\nassert solution.minimumChanges('kxfksx', 4) == inf\nassert solution.minimumChanges('aft', 1) == 1\nassert solution.minimumChanges('vtw', 2) == inf\nassert solution.minimumChanges('fw', 1) == 1\nassert solution.minimumChanges('nlnf', 3) == inf\nassert solution.minimumChanges('igdu', 3) == inf\nassert solution.minimumChanges('hpxlbjjlly', 9) == inf\nassert solution.minimumChanges('rwanx', 4) == inf\nassert solution.minimumChanges('dvlyewpvg', 7) == inf\nassert solution.minimumChanges('anaxjjuz', 5) == inf\nassert solution.minimumChanges('bwc', 1) == 1\nassert solution.minimumChanges('jvhf', 2) == 2\nassert solution.minimumChanges('qqu', 1) == 1\nassert solution.minimumChanges('drud', 1) == 1\nassert solution.minimumChanges('kk', 1) == 0\nassert solution.minimumChanges('zwcjzdizfl', 4) == 4\nassert solution.minimumChanges('vjkvmimd', 4) == 4\nassert solution.minimumChanges('upmx', 2) == 2\nassert solution.minimumChanges('lqnpgbkyck', 7) == inf\nassert solution.minimumChanges('ssi', 1) == 1\nassert solution.minimumChanges('dkvda', 3) == inf\nassert solution.minimumChanges('arbt', 2) == 2\nassert solution.minimumChanges('esa', 2) == inf\nassert solution.minimumChanges('fb', 1) == 1\nassert solution.minimumChanges('fjrvggzchw', 5) == 4\nassert solution.minimumChanges('br', 1) == 1\nassert solution.minimumChanges('pzuvxxg', 6) == inf\nassert solution.minimumChanges('kgcchmcv', 7) == inf\nassert solution.minimumChanges('ng', 1) == 1\nassert solution.minimumChanges('ojn', 1) == 1",
  "inefficient_solution": "class Solution:\n    def minimumChanges(self, s: str, k: int) -> int:\n        n = len(s)\n        for _ in range(n):\n            tmp = [s[i] for i in range(n)]\n            s = ''.join(tmp)\n\n        memo = {}\n        def dp(i, j):\n            if (i, j) in memo:\n                return memo[(i, j)]\n            if i >= n or j == 0:\n                return 0\n            res = inf\n            cnt = 0\n            for d in range(1, n - i + 1):\n                if n % d == 0:\n                    for l in range(d):\n                        r = (n // d - 1 - l // d) * d + l % d\n                        if l >= r:\n                            break\n                        if s[i + l] != s[r]:\n                            cnt += 1\n                    res = min(res, dp(i + d, j - 1) + cnt)\n            memo[(i, j)] = res\n            return res\n\n        return dp(0, k)",
  "is_python": true
}