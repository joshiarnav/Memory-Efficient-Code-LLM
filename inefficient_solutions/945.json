{
  "problem_idx": 945,
  "task_name": "Minimum Increment to Make Array Unique",
  "markdown_description": "\nYou are given an integer array `nums`. In one move, you can pick an index `i` where `0 <= i < nums.length` and increment `nums[i]` by `1`.\n\n\nReturn *the minimum number of moves to make every value in* `nums` ***unique***.\n\n\nThe test cases are generated so that the answer fits in a 32-bit integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,2]\n**Output:** 1\n**Explanation:** After 1 move, the array could be [1, 2, 3].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [3,2,1,2,1,7]\n**Output:** 6\n**Explanation:** After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minIncrementForUnique(self, nums: List[int]) -> int:\n        nums.sort()\n        ans = 0\n        for i in range(1, len(nums)):\n            if nums[i] <= nums[i - 1]:\n                d = nums[i - 1] - nums[i] + 1\n                nums[i] += d\n                ans += d\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minIncrementForUnique(self, nums):\n        nums.sort()\n        ans = 0\n        for i in range(1, len(nums)):\n            if nums[i] <= nums[i - 1]:\n                d = nums[i - 1] - nums[i] + 1\n                nums[i] += d\n                ans += d\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minIncrementForUnique(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minIncrementForUnique(nums) == expected_result\n        print(f\"assert solution.minIncrementForUnique({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minIncrementForUnique({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minIncrementForUnique([3, 15, 54, 66, 74, 77, 80, 94]) == 0\nassert solution.minIncrementForUnique([19, 22, 44, 60]) == 0\nassert solution.minIncrementForUnique([26, 27, 39, 50, 65, 74, 84, 85, 92, 93]) == 0\nassert solution.minIncrementForUnique([4, 8, 42, 55, 60, 95]) == 0\nassert solution.minIncrementForUnique([5, 18, 50, 87, 98]) == 0\nassert solution.minIncrementForUnique([9, 27]) == 0\nassert solution.minIncrementForUnique([3, 18, 33, 35, 52, 60, 77, 79, 81, 89]) == 0\nassert solution.minIncrementForUnique([53, 91]) == 0\nassert solution.minIncrementForUnique([3, 16, 21, 31, 39, 52, 60, 79]) == 0\nassert solution.minIncrementForUnique([2, 15, 21, 36, 41, 54, 68, 70]) == 0\nassert solution.minIncrementForUnique([31, 35]) == 0\nassert solution.minIncrementForUnique([57, 95, 99]) == 0\nassert solution.minIncrementForUnique([2, 6, 9, 12, 35, 36, 55, 59]) == 0\nassert solution.minIncrementForUnique([27, 52, 79, 86, 96, 97]) == 0\nassert solution.minIncrementForUnique([11, 17, 26, 37, 56, 69, 79, 87]) == 0\nassert solution.minIncrementForUnique([7, 10, 22, 26, 38, 62, 88, 92]) == 0\nassert solution.minIncrementForUnique([2, 13, 53, 57, 67, 74, 84, 93, 95]) == 0\nassert solution.minIncrementForUnique([30, 35, 64, 70, 90]) == 0\nassert solution.minIncrementForUnique([8, 38]) == 0\nassert solution.minIncrementForUnique([1, 8, 11, 25, 47, 56, 77, 96]) == 0\nassert solution.minIncrementForUnique([47, 78]) == 0\nassert solution.minIncrementForUnique([1, 27, 55, 56, 58, 71, 82, 100]) == 0\nassert solution.minIncrementForUnique([35, 90]) == 0\nassert solution.minIncrementForUnique([7, 10, 18, 24, 67]) == 0\nassert solution.minIncrementForUnique([7, 11, 14, 15, 16, 73, 86, 95]) == 0\nassert solution.minIncrementForUnique([18, 97]) == 0\nassert solution.minIncrementForUnique([24, 30, 35, 57, 66]) == 0\nassert solution.minIncrementForUnique([50, 74, 75, 79, 93]) == 0\nassert solution.minIncrementForUnique([80, 84, 89, 97]) == 0\nassert solution.minIncrementForUnique([27, 32, 35, 55, 56]) == 0\nassert solution.minIncrementForUnique([9, 34, 40, 69, 96]) == 0\nassert solution.minIncrementForUnique([4, 14, 28, 40, 58, 99]) == 0\nassert solution.minIncrementForUnique([17, 24, 26, 30, 42, 54, 64, 68, 78]) == 0\nassert solution.minIncrementForUnique([4, 22, 23, 27, 36, 63]) == 0\nassert solution.minIncrementForUnique([16, 18, 61, 69, 73, 87]) == 0\nassert solution.minIncrementForUnique([34, 53, 57, 62, 93, 98]) == 0\nassert solution.minIncrementForUnique([53, 62, 68, 88]) == 0\nassert solution.minIncrementForUnique([12, 28, 36, 47, 52, 64, 69, 72, 87, 91]) == 0\nassert solution.minIncrementForUnique([9, 20, 27, 36, 49, 61, 63, 64, 77]) == 0\nassert solution.minIncrementForUnique([12, 44, 83]) == 0\nassert solution.minIncrementForUnique([49, 82]) == 0\nassert solution.minIncrementForUnique([11, 33, 44, 50, 57, 59]) == 0\nassert solution.minIncrementForUnique([1, 86]) == 0\nassert solution.minIncrementForUnique([2, 10, 11, 28, 35, 78, 91, 94]) == 0\nassert solution.minIncrementForUnique([15, 31, 35, 42, 43, 63, 76, 83, 84]) == 0\nassert solution.minIncrementForUnique([15, 41, 91]) == 0\nassert solution.minIncrementForUnique([11, 27, 41, 42, 43, 57, 62, 84, 85, 88]) == 0\nassert solution.minIncrementForUnique([37, 46, 47, 63, 66, 75, 92]) == 0\nassert solution.minIncrementForUnique([37, 65, 66, 80]) == 0\nassert solution.minIncrementForUnique([2, 5, 27, 43, 49, 53, 86, 97]) == 0\nassert solution.minIncrementForUnique([11, 32, 68, 93]) == 0\nassert solution.minIncrementForUnique([21, 31, 40, 43, 47, 49, 56, 69, 86, 93]) == 0\nassert solution.minIncrementForUnique([10, 20, 57, 76, 82]) == 0\nassert solution.minIncrementForUnique([11, 13, 23, 28, 30, 47, 48, 66, 76, 94]) == 0\nassert solution.minIncrementForUnique([6, 56, 65, 76, 84, 93]) == 0\nassert solution.minIncrementForUnique([20, 21, 40, 42, 55, 59, 66, 79, 86]) == 0\nassert solution.minIncrementForUnique([5, 14, 34, 36, 38, 42, 44, 94]) == 0\nassert solution.minIncrementForUnique([11, 13, 15, 30, 69, 77, 81, 90, 98, 99]) == 0\nassert solution.minIncrementForUnique([9, 48, 55, 63, 65, 80]) == 0\nassert solution.minIncrementForUnique([15, 16, 29, 36, 61, 75, 88]) == 0\nassert solution.minIncrementForUnique([14, 17, 19, 43, 65]) == 0\nassert solution.minIncrementForUnique([17, 25, 64, 96]) == 0\nassert solution.minIncrementForUnique([3, 18, 22, 47, 49, 56]) == 0\nassert solution.minIncrementForUnique([6, 30, 43, 74, 75, 77, 86, 88, 90, 91]) == 0\nassert solution.minIncrementForUnique([1, 24, 29, 34, 38, 45, 58, 64, 78]) == 0\nassert solution.minIncrementForUnique([9, 30, 51, 58, 61, 66, 68, 77, 90, 94]) == 0\nassert solution.minIncrementForUnique([32, 34]) == 0\nassert solution.minIncrementForUnique([20, 23, 24, 26, 35, 58, 63, 69]) == 0\nassert solution.minIncrementForUnique([9, 19, 45, 57, 69]) == 0\nassert solution.minIncrementForUnique([3, 19, 25, 28, 29, 37, 84, 93]) == 0\nassert solution.minIncrementForUnique([8, 19, 20, 33, 51, 87, 92]) == 0\nassert solution.minIncrementForUnique([1, 14]) == 0\nassert solution.minIncrementForUnique([9, 30, 85]) == 0\nassert solution.minIncrementForUnique([6, 21, 40, 46, 48, 86, 91]) == 0\nassert solution.minIncrementForUnique([9, 89, 91, 92, 96, 98]) == 0\nassert solution.minIncrementForUnique([8, 74, 75, 76, 98]) == 0\nassert solution.minIncrementForUnique([6, 9, 16, 17, 39, 44, 51, 56, 85, 94]) == 0\nassert solution.minIncrementForUnique([6, 9, 30, 34, 36, 39, 98]) == 0\nassert solution.minIncrementForUnique([18, 19]) == 0\nassert solution.minIncrementForUnique([25, 27, 33, 40, 44, 62, 74, 77, 98]) == 0\nassert solution.minIncrementForUnique([1, 3, 13, 36, 37, 58, 80, 88, 90, 98]) == 0\nassert solution.minIncrementForUnique([1, 24, 36, 39, 41, 58, 85, 87, 96]) == 0\nassert solution.minIncrementForUnique([54, 56, 57, 77, 92]) == 0\nassert solution.minIncrementForUnique([4, 23, 29, 41, 57, 86]) == 0\nassert solution.minIncrementForUnique([3, 9, 20, 45, 50, 57, 88, 93]) == 0\nassert solution.minIncrementForUnique([11, 35, 38, 52, 57, 72, 77, 89]) == 0\nassert solution.minIncrementForUnique([30, 32, 40, 75, 80, 82]) == 0\nassert solution.minIncrementForUnique([1, 3, 45, 52, 58, 72]) == 0\nassert solution.minIncrementForUnique([31, 40, 44, 60, 64, 80, 88, 95]) == 0\nassert solution.minIncrementForUnique([20, 23, 28, 38, 68, 80, 86, 89]) == 0\nassert solution.minIncrementForUnique([36, 47, 61, 82, 85, 98]) == 0\nassert solution.minIncrementForUnique([2, 13, 31, 55, 74, 76, 82, 94]) == 0\nassert solution.minIncrementForUnique([22, 35, 47, 50, 58, 61, 65, 73, 85, 89]) == 0\nassert solution.minIncrementForUnique([2, 8, 22, 26, 52, 68, 70]) == 0\nassert solution.minIncrementForUnique([3, 16, 26, 43, 48, 57, 64, 70, 72, 76]) == 0\nassert solution.minIncrementForUnique([12, 19, 29, 51, 66, 67, 82, 98]) == 0\nassert solution.minIncrementForUnique([16, 47, 80]) == 0\nassert solution.minIncrementForUnique([18, 20, 31, 39, 57, 61, 76, 84, 85, 97]) == 0\nassert solution.minIncrementForUnique([6, 13, 30, 31, 47, 52, 53, 97, 98]) == 0\nassert solution.minIncrementForUnique([4, 13, 15, 19, 56, 58, 67, 90, 98]) == 0",
  "inefficient_solution": "class Solution:\n    def minIncrementForUnique(self, nums):\n        nums = [x for x in nums]\n        counts = {}\n        for num in nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        unique_nums = []\n        for num in range(max(nums) + 1):\n            if num in counts:\n                unique_nums.extend([num] * counts[num])\n            else:\n                unique_nums.append(num)\n        counts = {}\n        for num in unique_nums:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        max_num = max(unique_nums)\n        min_moves = 0\n        for num in nums:\n            if counts[num] > 1:\n                d = counts[num] - 1\n                if num < max_num:\n                    max_num += 1\n                min_moves += d\n                counts[num] -= d\n                counts[max_num] = 1\n                max_num += 1\n        return min_moves",
  "is_python": true
}