{
  "problem_idx": 1750,
  "task_name": "Minimum Length of String After Deleting Similar Ends",
  "markdown_description": "\nGiven a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times:\n\n\n1. Pick a **non-empty** prefix from the string `s` where all the characters in the prefix are equal.\n2. Pick a **non-empty** suffix from the string `s` where all the characters in this suffix are equal.\n3. The prefix and the suffix should not intersect at any index.\n4. The characters from the prefix and suffix must be the same.\n5. Delete both the prefix and the suffix.\n\n\nReturn *the **minimum length** of* `s` *after performing the above operation any number of times (possibly zero times)*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ca\"\n**Output:** 2\n**Explanation:** You can't remove any characters, so the string stays as is.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"cabaabac\"\n**Output:** 0\n**Explanation:** An optimal sequence of operations is:\n- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\".\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"aabccabba\"\n**Output:** 3\n**Explanation:** An optimal sequence of operations is:\n- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` only consists of characters `'a'`, `'b'`, and `'c'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumLength(self, s: str) -> int:\n        i, j = 0, len(s) - 1\n        while i < j and s[i] == s[j]:\n            while i + 1 < j and s[i] == s[i + 1]:\n                i += 1\n            while i < j - 1 and s[j - 1] == s[j]:\n                j -= 1\n            i, j = i + 1, j - 1\n        return max(0, j - i + 1)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumLength(self, s: str) -> int:\n        i, j = 0, len(s) - 1\n        while i < j and s[i] == s[j]:\n            while i + 1 < j and s[i] == s[i + 1]:\n                i += 1\n            while i < j - 1 and s[j - 1] == s[j]:\n                j -= 1\n            i, j = i + 1, j - 1\n        return max(0, j - i + 1)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = ''.join(random.choices(['a', 'b', 'c'], k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumLength(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumLength(s) == expected_result\n        print(f\"assert solution.minimumLength('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumLength('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumLength('cabcbacbcc') == 7\nassert solution.minimumLength('caaca') == 5\nassert solution.minimumLength('accbba') == 4\nassert solution.minimumLength('caabccacb') == 9\nassert solution.minimumLength('baba') == 4\nassert solution.minimumLength('a') == 1\nassert solution.minimumLength('ac') == 2\nassert solution.minimumLength('cc') == 0\nassert solution.minimumLength('babbaaabb') == 0\nassert solution.minimumLength('bcca') == 4\nassert solution.minimumLength('cacba') == 5\nassert solution.minimumLength('ccbacb') == 6\nassert solution.minimumLength('acacccac') == 8\nassert solution.minimumLength('aab') == 3\nassert solution.minimumLength('bcabcccccc') == 10\nassert solution.minimumLength('cacaa') == 5\nassert solution.minimumLength('ca') == 2\nassert solution.minimumLength('bbb') == 0\nassert solution.minimumLength('ccababacb') == 9\nassert solution.minimumLength('acbbabacc') == 9\nassert solution.minimumLength('cbbbacaa') == 8\nassert solution.minimumLength('acccc') == 5\nassert solution.minimumLength('abbaca') == 4\nassert solution.minimumLength('cbbcaba') == 7\nassert solution.minimumLength('abacbbab') == 8\nassert solution.minimumLength('bccc') == 4\nassert solution.minimumLength('bcabaa') == 6\nassert solution.minimumLength('caaa') == 4\nassert solution.minimumLength('bbcaaaa') == 7\nassert solution.minimumLength('accabaacb') == 9\nassert solution.minimumLength('a') == 1\nassert solution.minimumLength('accab') == 5\nassert solution.minimumLength('babc') == 4\nassert solution.minimumLength('acccbb') == 6\nassert solution.minimumLength('ccbabb') == 6\nassert solution.minimumLength('a') == 1\nassert solution.minimumLength('abcbccacc') == 9\nassert solution.minimumLength('bba') == 3\nassert solution.minimumLength('ccbabbacca') == 10\nassert solution.minimumLength('baacbcccaa') == 10\nassert solution.minimumLength('aaabb') == 5\nassert solution.minimumLength('acbc') == 4\nassert solution.minimumLength('aaa') == 0\nassert solution.minimumLength('abbcb') == 5\nassert solution.minimumLength('aabcaaa') == 2\nassert solution.minimumLength('abcacabbc') == 9\nassert solution.minimumLength('aaabbcb') == 7\nassert solution.minimumLength('cacc') == 1\nassert solution.minimumLength('abcbaaa') == 1\nassert solution.minimumLength('b') == 1\nassert solution.minimumLength('bbaabcc') == 7\nassert solution.minimumLength('bbb') == 0\nassert solution.minimumLength('ccbcaa') == 6\nassert solution.minimumLength('aabb') == 4\nassert solution.minimumLength('bccbcabcc') == 9\nassert solution.minimumLength('baaab') == 0\nassert solution.minimumLength('bbbcbba') == 7\nassert solution.minimumLength('baacbaac') == 8\nassert solution.minimumLength('bc') == 2\nassert solution.minimumLength('cbacacabb') == 9\nassert solution.minimumLength('cbcc') == 1\nassert solution.minimumLength('bbccabaa') == 8\nassert solution.minimumLength('acabacba') == 6\nassert solution.minimumLength('acbbacaca') == 5\nassert solution.minimumLength('cba') == 3\nassert solution.minimumLength('caa') == 3\nassert solution.minimumLength('cacbcbbcca') == 10\nassert solution.minimumLength('accacaa') == 1\nassert solution.minimumLength('c') == 1\nassert solution.minimumLength('c') == 1\nassert solution.minimumLength('b') == 1\nassert solution.minimumLength('ca') == 2\nassert solution.minimumLength('aacacbbaab') == 10\nassert solution.minimumLength('caa') == 3\nassert solution.minimumLength('bbbbcaba') == 8\nassert solution.minimumLength('cbaac') == 3\nassert solution.minimumLength('accababac') == 9\nassert solution.minimumLength('abb') == 3\nassert solution.minimumLength('caac') == 0\nassert solution.minimumLength('c') == 1\nassert solution.minimumLength('bb') == 0\nassert solution.minimumLength('baacacac') == 8\nassert solution.minimumLength('aaaacba') == 2\nassert solution.minimumLength('cabc') == 2\nassert solution.minimumLength('ca') == 2\nassert solution.minimumLength('abbcbaab') == 8\nassert solution.minimumLength('bccaccb') == 1\nassert solution.minimumLength('bbcabbb') == 2\nassert solution.minimumLength('aaccbaccb') == 9\nassert solution.minimumLength('bc') == 2\nassert solution.minimumLength('baa') == 3\nassert solution.minimumLength('caacaba') == 7\nassert solution.minimumLength('ccacbabaa') == 9\nassert solution.minimumLength('aabcbca') == 4\nassert solution.minimumLength('aabba') == 0\nassert solution.minimumLength('c') == 1\nassert solution.minimumLength('babac') == 5\nassert solution.minimumLength('abac') == 4\nassert solution.minimumLength('abbba') == 0\nassert solution.minimumLength('cac') == 1",
  "inefficient_solution": "class Solution:\n    def minimumLength(self, s: str) -> int:\n        def remove_prefix_suffix(s: str):\n            for i in range(len(s)):\n                for j in range(i + 1, len(s)):\n                    if s[i] == s[j]:\n                        prefix = s[:j]\n                        suffix = s[j:]\n                        if prefix == suffix:\n                            return prefix + suffix\n            return s\n\n        def is_equal(s: str) -> bool:\n            return len(set(s)) == 1\n\n        original_s = s\n        s = remove_prefix_suffix(s)\n        while is_equal(s):\n            s = remove_prefix_suffix(s)\n        while is_equal(s):\n            s = remove_prefix_suffix(s)\n        return len(s)",
  "is_python": true
}