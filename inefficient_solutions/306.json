{
  "problem_idx": 306,
  "task_name": "Additive Number",
  "markdown_description": "\nAn **additive number** is a string whose digits can form an **additive sequence**.\n\n\nA valid **additive sequence** should contain **at least** three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\n\n\nGiven a string containing only digits, return `true` if it is an **additive number** or `false` otherwise.\n\n\n**Note:** Numbers in the additive sequence **cannot** have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** \"112358\"\n**Output:** true\n**Explanation:** \nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** \"199100199\"\n**Output:** true\n**Explanation:** \nThe additive sequence is: 1, 99, 100, 199.\u00a0\n1 + 99 = 100, 99 + 100 = 199\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 35`\n* `num` consists only of digits.\n\n\n\u00a0\n\n\n**Follow up:** How would you handle overflow for very large input integers?\n\n\n",
  "canonical_solution": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        def dfs(a, b, num):\n            if not num:\n                return True\n            if a + b > 0 and num[0] == '0':\n                return False\n            for i in range(1, len(num) + 1):\n                if a + b == int(num[:i]):\n                    if dfs(b, a + b, num[i:]):\n                        return True\n            return False\n\n        n = len(num)\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                if i > 1 and num[0] == '0':\n                    break\n                if j - i > 1 and num[i] == '0':\n                    continue\n                if dfs(int(num[:i]), int(num[i:j]), num[j:]):\n                    return True\n        return False\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        def dfs(a, b, num):\n            if not num:\n                return True\n            if a + b > 0 and num[0] == '0':\n                return False\n            for i in range(1, len(num) + 1):\n                if a + b == int(num[:i]):\n                    if dfs(b, a + b, num[i:]):\n                        return True\n            return False\n\n        n = len(num)\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                if i > 1 and num[0] == '0':\n                    break\n                if j - i > 1 and num[i] == '0':\n                    continue\n                if dfs(int(num[:i]), int(num[i:j]), num[j:]):\n                    return True\n        return False\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random num string\n    num = random.randint(1, 99999)\n    \n    # Convert num to string\n    num = str(num)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isAdditiveNumber(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isAdditiveNumber(num) == expected_result\n        print(f\"assert solution.isAdditiveNumber('{num}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isAdditiveNumber('{num}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isAdditiveNumber('72011') == False\nassert solution.isAdditiveNumber('21568') == False\nassert solution.isAdditiveNumber('81235') == False\nassert solution.isAdditiveNumber('61677') == False\nassert solution.isAdditiveNumber('43362') == False\nassert solution.isAdditiveNumber('45736') == False\nassert solution.isAdditiveNumber('13371') == False\nassert solution.isAdditiveNumber('51352') == False\nassert solution.isAdditiveNumber('65349') == False\nassert solution.isAdditiveNumber('6320') == False\nassert solution.isAdditiveNumber('43098') == False\nassert solution.isAdditiveNumber('19181') == False\nassert solution.isAdditiveNumber('58549') == False\nassert solution.isAdditiveNumber('7915') == False\nassert solution.isAdditiveNumber('12919') == False\nassert solution.isAdditiveNumber('82134') == False\nassert solution.isAdditiveNumber('44898') == False\nassert solution.isAdditiveNumber('56947') == False\nassert solution.isAdditiveNumber('19548') == False\nassert solution.isAdditiveNumber('9960') == False\nassert solution.isAdditiveNumber('17640') == False\nassert solution.isAdditiveNumber('6498') == False\nassert solution.isAdditiveNumber('71565') == False\nassert solution.isAdditiveNumber('53742') == True\nassert solution.isAdditiveNumber('91402') == False\nassert solution.isAdditiveNumber('96277') == False\nassert solution.isAdditiveNumber('47309') == False\nassert solution.isAdditiveNumber('63292') == False\nassert solution.isAdditiveNumber('72337') == False\nassert solution.isAdditiveNumber('80724') == False\nassert solution.isAdditiveNumber('78862') == False\nassert solution.isAdditiveNumber('59920') == False\nassert solution.isAdditiveNumber('61115') == False\nassert solution.isAdditiveNumber('46690') == False\nassert solution.isAdditiveNumber('70958') == False\nassert solution.isAdditiveNumber('14264') == False\nassert solution.isAdditiveNumber('89129') == False\nassert solution.isAdditiveNumber('42047') == False\nassert solution.isAdditiveNumber('28011') == False\nassert solution.isAdditiveNumber('35893') == False\nassert solution.isAdditiveNumber('9607') == False\nassert solution.isAdditiveNumber('45132') == False\nassert solution.isAdditiveNumber('37596') == False\nassert solution.isAdditiveNumber('43894') == False\nassert solution.isAdditiveNumber('3438') == False\nassert solution.isAdditiveNumber('533') == False\nassert solution.isAdditiveNumber('84401') == False\nassert solution.isAdditiveNumber('20862') == False\nassert solution.isAdditiveNumber('25911') == False\nassert solution.isAdditiveNumber('66420') == False\nassert solution.isAdditiveNumber('89753') == False\nassert solution.isAdditiveNumber('78747') == False\nassert solution.isAdditiveNumber('21965') == False\nassert solution.isAdditiveNumber('17213') == False\nassert solution.isAdditiveNumber('19101') == False\nassert solution.isAdditiveNumber('42963') == False\nassert solution.isAdditiveNumber('40539') == False\nassert solution.isAdditiveNumber('43906') == False\nassert solution.isAdditiveNumber('60077') == False\nassert solution.isAdditiveNumber('62870') == True\nassert solution.isAdditiveNumber('78592') == True\nassert solution.isAdditiveNumber('69407') == False\nassert solution.isAdditiveNumber('94014') == False\nassert solution.isAdditiveNumber('43308') == False\nassert solution.isAdditiveNumber('44694') == False\nassert solution.isAdditiveNumber('56199') == False\nassert solution.isAdditiveNumber('30124') == False\nassert solution.isAdditiveNumber('58329') == False\nassert solution.isAdditiveNumber('14688') == False\nassert solution.isAdditiveNumber('23304') == False\nassert solution.isAdditiveNumber('1084') == False\nassert solution.isAdditiveNumber('61018') == False\nassert solution.isAdditiveNumber('12911') == False\nassert solution.isAdditiveNumber('86246') == False\nassert solution.isAdditiveNumber('59217') == False\nassert solution.isAdditiveNumber('99809') == False\nassert solution.isAdditiveNumber('35380') == False\nassert solution.isAdditiveNumber('26306') == False\nassert solution.isAdditiveNumber('41844') == False\nassert solution.isAdditiveNumber('41428') == False\nassert solution.isAdditiveNumber('75735') == False\nassert solution.isAdditiveNumber('39642') == False\nassert solution.isAdditiveNumber('85494') == False\nassert solution.isAdditiveNumber('1639') == False\nassert solution.isAdditiveNumber('52809') == False\nassert solution.isAdditiveNumber('43589') == False\nassert solution.isAdditiveNumber('2246') == True\nassert solution.isAdditiveNumber('21866') == False\nassert solution.isAdditiveNumber('81011') == False\nassert solution.isAdditiveNumber('35403') == False\nassert solution.isAdditiveNumber('64604') == False\nassert solution.isAdditiveNumber('91413') == False\nassert solution.isAdditiveNumber('55941') == False\nassert solution.isAdditiveNumber('65181') == False\nassert solution.isAdditiveNumber('90403') == False\nassert solution.isAdditiveNumber('34931') == False\nassert solution.isAdditiveNumber('32663') == False\nassert solution.isAdditiveNumber('65283') == False\nassert solution.isAdditiveNumber('96188') == False\nassert solution.isAdditiveNumber('41270') == False",
  "inefficient_solution": "class Solution:\n    def isAdditiveNumber(self, num: str) -> bool:\n        n = len(num)\n\n        # Generate all possible pairs of substrings\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                a = num[:i]\n                b = num[i:j]\n\n                # Generate all possible next numbers in the sequence\n                for k in range(j + 1, n):\n                    c = num[j:k]\n\n                    # Check if the sequence is valid\n                    if self.isValidSequence(a, b, c):\n                        return True\n\n        return False\n\n    def isValidSequence(self, a, b, c):\n        def dfs(num, a, b, i):\n            if len(num) == 0:\n                return True\n            if len(num) < len(a) or len(num) < len(b) or num[0] == '0' and len(a) == 1 and len(b) == 1:\n                return False\n\n            next_num = str(int(a) + int(b))\n            for j in range(i, len(num) + 1):\n                if num[:j] == next_num:\n                    return dfs(num[j:], a, b, j)\n            return False\n\n        return dfs(c, a, b, 0)",
  "is_python": true
}