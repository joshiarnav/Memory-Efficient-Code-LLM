{
  "problem_idx": 663,
  "task_name": "Equal Tree Partition",
  "markdown_description": "\nGiven the `root` of a binary tree, return `true` *if you can partition the tree into two trees with equal sums of values after removing exactly one edge on the original tree*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0663.Equal%20Tree%20Partition/images/split1-tree.jpg)\n\n```\n\n**Input:** root = [5,10,10,null,null,2,3]\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0663.Equal%20Tree%20Partition/images/split2-tree.jpg)\n\n```\n\n**Input:** root = [1,2,10,null,null,2,20]\n**Output:** false\n**Explanation:** You cannot split the tree into two trees with equal sums after removing exactly one edge on the tree.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 104]`.\n* `-105 <= Node.val <= 105`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def checkEqualTree(self, root: TreeNode) -> bool:\n        def sum(root):\n            if root is None:\n                return 0\n            l, r = sum(root.left), sum(root.right)\n            seen.append(l + r + root.val)\n            return seen[-1]\n\n        seen = []\n        s = sum(root)\n        if s % 2 == 1:\n            return False\n        seen.pop()\n        return s // 2 in seen\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def checkEqualTree(self, root):\n        def sum(root):\n            if root is None:\n                return 0\n            l, r = sum(root.left), sum(root.right)\n            seen.append(l + r + root.val)\n            return seen[-1]\n\n        seen = []\n        s = sum(root)\n        if s % 2 == 1:\n            return False\n        seen.pop()\n        return s // 2 in seen\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate the binary tree\n    root = generate_tree_node()\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.checkEqualTree(root)\n\n    return root, expected_result\n\ndef generate_tree_node():\n    # Generate random node values\n    values = random.sample(range(-100000, 100001), random.randint(1, 10))\n    nodes = []\n\n    # Create tree nodes\n    for value in values:\n        node = TreeNode(value)\n        nodes.append(node)\n\n    # Create tree structure\n    root = nodes[0]\n    stack = [root]\n    idx = 1\n\n    while stack:\n        node = stack.pop()\n\n        if idx < len(nodes):\n            left_node = nodes[idx]\n            node.left = left_node\n            stack.append(left_node)\n            idx += 1\n\n        if idx < len(nodes):\n            right_node = nodes[idx]\n            node.right = right_node\n            stack.append(right_node)\n            idx += 1\n\n    return root\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.checkEqualTree(root) == expected_result\n        print(f\"assert solution.checkEqualTree(root) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.checkEqualTree(root) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False\nassert solution.checkEqualTree(root) == False",
  "inefficient_solution": "",
  "is_python": true
}