{
  "problem_idx": 1029,
  "task_name": "Two City Scheduling",
  "markdown_description": "\nA company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`,\u00a0the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.\n\n\nReturn *the minimum cost to fly every person to a city* such that exactly `n` people arrive in each city.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** costs = [[10,20],[30,200],[400,50],[30,20]]\n**Output:** 110\n**Explanation:** \nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\n**Output:** 1859\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\n**Output:** 3086\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 * n == costs.length`\n* `2 <= costs.length <= 100`\n* `costs.length` is even.\n* `1 <= aCosti, bCosti <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        costs.sort(key=lambda x: x[0] - x[1])\n        n = len(costs) >> 1\n        return sum(costs[i][0] + costs[i + n][1] for i in range(n))\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        costs.sort(key=lambda x: x[0] - x[1])\n        n = len(costs) >> 1\n        return sum(costs[i][0] + costs[i + n][1] for i in range(n))\n\ndef generate_test_case():\n    # Create an instance of the solution class\n    solution = Solution()\n\n    # Generate random costs for 2n people\n    num_people = random.randint(2, 50)  # Randomly choose the number of people\n    costs = []\n    for _ in range(num_people):\n        # Generate random costs for city A and city B\n        a_cost = random.randint(1, 1000)\n        b_cost = random.randint(1, 1000)\n        costs.append([a_cost, b_cost])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.twoCitySchedCost(costs)\n\n    return costs, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        costs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.twoCitySchedCost(costs) == expected_result\n        print(f\"assert solution.twoCitySchedCost({costs}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.twoCitySchedCost({costs}) == {expected_result}\") # Construct the test case in the required format\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # Number of test cases to generate\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.twoCitySchedCost([[400, 789], [239, 593], [546, 858], [214, 500], [140, 374], [371, 293], [786, 693], [949, 783], [491, 295], [388, 183], [808, 400], [601, 86], [542, 21], [835, 300]]) == 4764\nassert solution.twoCitySchedCost([[385, 896], [526, 995], [376, 840], [241, 669], [93, 424], [228, 508], [146, 414], [709, 954], [170, 391], [444, 624], [857, 989], [964, 977], [625, 567], [378, 305], [511, 358], [730, 516], [766, 513], [600, 179], [516, 35], [846, 348], [659, 125]]) == 8105\nassert solution.twoCitySchedCost([[25, 791], [45, 806], [559, 981], [18, 423], [128, 532], [351, 705], [169, 517], [400, 664], [150, 394], [796, 989], [410, 516], [276, 372], [653, 564], [205, 103], [537, 430], [305, 180], [173, 1], [503, 239], [501, 192], [630, 307], [605, 268], [735, 334], [784, 366], [951, 317], [808, 122], [842, 5]]) == 6844\nassert solution.twoCitySchedCost([[191, 944], [189, 742], [272, 739], [547, 994], [277, 647], [238, 477], [512, 750], [220, 434], [657, 855], [821, 924], [9, 80], [546, 586], [791, 786], [521, 453], [104, 30], [934, 747], [594, 324], [688, 79], [894, 249], [788, 22]]) == 7280\nassert solution.twoCitySchedCost([[128, 607], [402, 453], [532, 561]]) == 581\nassert solution.twoCitySchedCost([[130, 946], [32, 545], [505, 857], [209, 382], [213, 324], [296, 370], [692, 712], [608, 562], [139, 20], [981, 715], [800, 492], [957, 591], [866, 459], [472, 34], [862, 193], [984, 205]]) == 5394\nassert solution.twoCitySchedCost([[464, 857], [625, 993], [33, 317], [619, 867], [427, 569], [941, 929], [675, 589], [562, 239], [637, 207], [863, 233], [713, 1]]) == 4365\nassert solution.twoCitySchedCost([[59, 954], [73, 916], [258, 1000], [297, 909], [286, 868], [452, 998], [75, 480], [202, 595], [576, 956], [357, 692], [445, 760], [681, 983], [230, 517], [439, 719], [679, 934], [648, 855], [781, 904], [267, 380], [774, 865], [143, 222], [906, 967], [788, 846], [358, 394], [120, 154], [777, 769], [977, 943], [512, 474], [299, 226], [993, 902], [753, 577], [641, 405], [985, 717], [931, 584], [729, 322], [654, 168], [614, 75], [639, 79], [743, 146], [987, 320], [963, 163], [882, 35]]) == 16953\nassert solution.twoCitySchedCost([[509, 944], [637, 643], [518, 488], [671, 388], [927, 553], [576, 59]]) == 2664\nassert solution.twoCitySchedCost([[127, 715], [640, 819], [528, 310], [843, 253]]) == 1330\nassert solution.twoCitySchedCost([[189, 934], [198, 608], [400, 647], [790, 874], [587, 590], [188, 106], [905, 765], [377, 199], [895, 591], [470, 90], [751, 274], [577, 97], [834, 349], [828, 118]]) == 4975\nassert solution.twoCitySchedCost([[1, 989], [203, 944], [336, 825], [316, 796], [220, 679], [538, 958], [111, 500], [31, 411], [469, 840], [43, 309], [128, 386], [152, 380], [64, 281], [340, 519], [402, 539], [332, 393], [729, 775], [539, 578], [588, 617], [148, 173], [957, 955], [249, 217], [975, 942], [536, 502], [202, 138], [839, 771], [970, 843], [758, 629], [801, 621], [480, 285], [462, 183], [656, 342], [803, 439], [449, 84], [531, 163], [675, 274], [571, 156], [710, 288], [729, 297], [463, 15], [567, 104], [764, 273], [842, 345], [919, 321], [884, 234], [784, 28], [934, 106], [856, 27], [967, 101]]) == 15373\nassert solution.twoCitySchedCost([[481, 797], [127, 303], [127, 206], [182, 9], [665, 13], [961, 281], [760, 42]]) == 1038\nassert solution.twoCitySchedCost([[194, 911], [275, 991], [292, 977], [159, 594], [391, 772], [196, 554], [459, 790], [244, 574], [289, 611], [581, 871], [707, 963], [303, 492], [654, 823], [664, 812], [218, 347], [80, 173], [772, 821], [643, 691], [586, 603], [397, 358], [306, 249], [490, 283], [695, 469], [653, 366], [929, 619], [483, 130], [787, 143], [944, 148], [930, 83]]) == 10808\nassert solution.twoCitySchedCost([[225, 996], [268, 988], [257, 874], [283, 737], [519, 963], [60, 459], [219, 583], [430, 748], [360, 674], [29, 335], [295, 514], [375, 590], [252, 449], [348, 523], [415, 575], [232, 367], [117, 248], [688, 808], [248, 349], [709, 800], [411, 486], [555, 588], [900, 915], [293, 293], [436, 363], [627, 551], [643, 520], [678, 530], [990, 807], [521, 303], [707, 448], [274, 14], [339, 67], [504, 186], [478, 89], [766, 341], [705, 237], [722, 229], [673, 170], [971, 441], [686, 141], [740, 192], [961, 317], [705, 33], [943, 244]]) == 14482\nassert solution.twoCitySchedCost([[246, 888], [129, 688], [205, 754], [383, 921], [86, 598], [293, 764], [82, 549], [261, 726], [122, 515], [633, 930], [85, 344], [122, 376], [374, 625], [325, 507], [414, 554], [579, 708], [588, 682], [566, 658], [531, 608], [311, 374], [251, 258], [582, 567], [603, 581], [890, 831], [394, 300], [190, 73], [661, 524], [376, 108], [969, 692], [323, 1], [709, 386], [509, 145], [451, 50], [705, 288], [693, 247], [917, 430], [566, 27], [960, 413], [688, 64], [830, 173], [799, 92], [991, 46]]) == 12624\nassert solution.twoCitySchedCost([[175, 746], [69, 564], [390, 847], [211, 668], [420, 843], [319, 720], [573, 955], [611, 910], [683, 951], [737, 902], [566, 719], [856, 1000], [711, 818], [83, 79], [104, 29], [775, 658], [448, 309], [918, 739], [331, 9], [514, 168]]) == 8716\nassert solution.twoCitySchedCost([[78, 910], [199, 902], [108, 789], [45, 698], [263, 912], [243, 872], [278, 836], [113, 622], [168, 638], [12, 476], [25, 416], [252, 622], [395, 648], [150, 390], [580, 789], [288, 440], [101, 244], [529, 669], [388, 521], [560, 691], [96, 214], [821, 939], [16, 114], [27, 113], [865, 941], [591, 667], [762, 836], [673, 716], [600, 643], [690, 700], [477, 477], [397, 359], [207, 162], [458, 406], [859, 783], [266, 59], [908, 690], [793, 549], [855, 584], [428, 94], [701, 232], [715, 230], [754, 226], [814, 252], [865, 280], [878, 250], [922, 78]]) == 15957\nassert solution.twoCitySchedCost([[131, 367], [356, 227], [781, 610], [599, 384], [728, 344], [719, 203], [621, 64]]) == 2199\nassert solution.twoCitySchedCost([[206, 837], [213, 624], [113, 510], [281, 676], [223, 517], [317, 600], [8, 268], [501, 732], [321, 550], [736, 951], [712, 906], [422, 514], [905, 986], [832, 898], [186, 215], [40, 68], [362, 368], [934, 930], [254, 156], [476, 329], [607, 391], [987, 752], [886, 649], [533, 223], [788, 469], [982, 661], [392, 35], [937, 552], [512, 56], [610, 127], [651, 116], [968, 412], [816, 110], [905, 64]]) == 12410\nassert solution.twoCitySchedCost([[79, 814], [326, 875], [318, 857], [400, 900], [432, 849], [306, 712], [143, 528], [283, 538], [40, 292], [299, 510], [221, 412], [747, 898], [403, 524], [218, 327], [609, 694], [888, 941], [890, 939], [608, 648], [828, 855], [532, 556], [624, 642], [849, 835], [948, 905], [770, 699], [135, 19], [564, 390], [916, 736], [605, 423], [730, 503], [940, 713], [297, 2], [816, 514], [743, 401], [951, 559], [867, 418], [994, 435]]) == 16815\nassert solution.twoCitySchedCost([[31, 862], [45, 846], [266, 992], [272, 918], [153, 669], [102, 613], [26, 476], [7, 438], [537, 960], [567, 979], [30, 397], [220, 579], [272, 583], [184, 478], [654, 839], [418, 574], [505, 632], [829, 940], [259, 369], [653, 744], [134, 213], [431, 509], [465, 528], [808, 863], [772, 818], [950, 976], [546, 533], [916, 887], [984, 900], [302, 124], [531, 346], [754, 567], [708, 507], [276, 69], [530, 245], [607, 262], [369, 11], [968, 605], [887, 473], [897, 482], [770, 253], [664, 142], [702, 160], [619, 21], [699, 94], [942, 284], [747, 78], [976, 15]]) == 16720\nassert solution.twoCitySchedCost([[218, 693], [151, 507], [715, 935], [843, 948], [623, 633], [226, 233], [106, 99], [82, 70], [986, 971], [339, 293], [544, 408], [389, 248], [256, 88], [629, 359], [839, 559], [829, 278], [746, 127], [805, 171], [865, 186]]) == 6481\nassert solution.twoCitySchedCost([[347, 992], [269, 647], [367, 350]]) == 994\nassert solution.twoCitySchedCost([[52, 902], [102, 921], [133, 793], [357, 938], [353, 926], [62, 579], [116, 632], [129, 578], [273, 706], [670, 991], [59, 318], [330, 574], [363, 589], [557, 762], [614, 769], [720, 815], [123, 185], [499, 524], [360, 363], [44, 32], [76, 47], [456, 412], [217, 172], [794, 719], [749, 670], [109, 27], [684, 549], [332, 147], [651, 414], [831, 524], [492, 183], [781, 440], [964, 617], [418, 21], [812, 332], [747, 203], [810, 256], [905, 144]]) == 11781\nassert solution.twoCitySchedCost([[510, 747], [187, 272], [789, 605], [648, 298]]) == 1600\nassert solution.twoCitySchedCost([[35, 867], [144, 843], [246, 928], [293, 810], [508, 997], [131, 582], [354, 679], [664, 869], [337, 464], [353, 342], [407, 353], [648, 592], [542, 281], [985, 720], [559, 277], [988, 696], [467, 112], [537, 126], [690, 264], [979, 271]]) == 6757\nassert solution.twoCitySchedCost([[104, 652], [840, 760], [235, 121]]) == 864\nassert solution.twoCitySchedCost([[158, 907], [268, 912], [333, 853], [235, 665], [54, 427], [223, 589], [344, 512], [903, 917], [714, 726], [875, 800], [765, 639], [905, 629], [934, 655], [966, 686], [547, 150], [889, 417], [756, 182], [945, 311], [974, 294]]) == 7701\nassert solution.twoCitySchedCost([[18, 685], [547, 992], [433, 764], [3, 175], [435, 548], [559, 532], [849, 799], [966, 705], [675, 340], [935, 202]]) == 4014\nassert solution.twoCitySchedCost([[171, 963], [106, 865], [62, 796], [166, 835], [308, 822], [129, 553], [368, 748], [531, 898], [5, 364], [182, 529], [25, 292], [49, 288], [202, 431], [393, 596], [553, 689], [289, 419], [764, 856], [647, 727], [748, 792], [469, 488], [692, 705], [34, 37], [268, 211], [171, 110], [363, 247], [786, 664], [351, 205], [757, 607], [205, 20], [457, 253], [749, 517], [678, 391], [851, 553], [901, 593], [730, 419], [608, 280], [357, 26], [489, 123], [852, 429], [969, 473], [796, 278], [990, 284], [987, 262], [993, 257], [963, 223]]) == 14095\nassert solution.twoCitySchedCost([[359, 932], [19, 588], [387, 937], [329, 854], [47, 533], [264, 681], [657, 834], [677, 853], [228, 394], [179, 321], [74, 158], [800, 872], [35, 65], [417, 411], [502, 494], [864, 835], [305, 235], [923, 818], [594, 467], [209, 18], [648, 420], [672, 428], [748, 487], [756, 474], [534, 163], [796, 353], [654, 132], [802, 238], [917, 286], [780, 101], [895, 2]]) == 10429\nassert solution.twoCitySchedCost([[19, 756], [51, 516], [27, 414], [345, 650], [254, 436], [47, 187], [352, 325], [426, 371], [461, 374], [790, 637], [935, 612], [842, 501], [427, 60], [575, 196], [891, 469], [898, 110]]) == 4480\nassert solution.twoCitySchedCost([[176, 886], [451, 981], [473, 869], [555, 762], [686, 885], [822, 701], [246, 108], [487, 152], [598, 200], [991, 331], [929, 175]]) == 3833\nassert solution.twoCitySchedCost([[70, 756], [249, 849], [82, 677], [162, 642], [597, 983], [562, 923], [128, 485], [289, 598], [230, 513], [76, 219], [226, 367], [295, 367], [40, 65], [229, 224], [851, 815], [684, 570], [418, 286], [365, 210], [382, 136], [611, 347], [413, 19], [542, 102]]) == 5812\nassert solution.twoCitySchedCost([[321, 931], [73, 247], [223, 358], [673, 696]]) == 1448\nassert solution.twoCitySchedCost([[124, 907], [401, 997], [176, 744], [141, 676], [394, 588], [932, 683], [685, 404], [551, 228]]) == 2745\nassert solution.twoCitySchedCost([[63, 811], [156, 855], [124, 785], [473, 844], [101, 435], [142, 471], [280, 571], [532, 622], [654, 663], [601, 599], [348, 312], [915, 770], [488, 201], [383, 88], [522, 215], [464, 147], [803, 421], [695, 274], [681, 157], [777, 112]]) == 5823\nassert solution.twoCitySchedCost([[158, 940], [1, 699], [8, 697], [207, 863], [242, 671], [233, 477], [472, 679], [56, 249], [2, 144], [618, 755], [564, 692], [840, 918], [833, 893], [173, 233], [352, 409], [61, 115], [390, 415], [492, 513], [511, 512], [347, 331], [421, 322], [743, 613], [398, 246], [190, 27], [522, 344], [488, 260], [292, 20], [450, 169], [451, 145], [543, 237], [801, 434], [608, 202], [746, 283], [925, 413], [749, 228], [736, 42], [951, 248], [948, 106]]) == 10883\nassert solution.twoCitySchedCost([[29, 931], [92, 916], [52, 822], [19, 781], [243, 944], [76, 716], [135, 733], [101, 657], [357, 868], [192, 693], [289, 780], [23, 418], [154, 516], [27, 328], [486, 773], [604, 830], [788, 949], [521, 667], [133, 276], [237, 356], [684, 802], [118, 216], [751, 844], [63, 115], [82, 107], [719, 708], [142, 121], [113, 32], [349, 77], [416, 141], [443, 116], [644, 248], [877, 467], [900, 475], [502, 55], [664, 138], [859, 238], [710, 76], [878, 212], [904, 190], [787, 3], [849, 52]]) == 9873\nassert solution.twoCitySchedCost([[56, 892], [164, 998], [13, 756], [1, 636], [107, 682], [482, 979], [148, 585], [1, 409], [110, 445], [538, 845], [180, 347], [100, 224], [527, 631], [543, 605], [240, 298], [453, 505], [303, 344], [319, 236], [180, 93], [387, 272], [684, 541], [325, 128], [592, 386], [597, 296], [703, 362], [853, 332], [995, 421], [705, 101], [645, 14], [720, 28], [925, 144], [957, 130]]) == 7491\nassert solution.twoCitySchedCost([[130, 821], [305, 982], [205, 861], [598, 859], [640, 811], [288, 401], [195, 207], [312, 298], [870, 825], [693, 597], [727, 544], [569, 322], [489, 209], [534, 232], [363, 57], [500, 8], [954, 408], [810, 212], [941, 304]]) == 6132\nassert solution.twoCitySchedCost([[233, 992], [294, 911], [136, 746], [386, 980], [73, 405], [695, 963], [56, 296], [236, 466], [546, 702], [865, 993], [91, 215], [501, 591], [22, 91], [718, 674], [586, 472], [921, 770], [496, 342], [416, 212], [442, 221], [923, 638], [805, 499], [681, 342], [720, 373], [752, 341], [993, 532], [624, 162], [909, 413], [649, 73], [791, 156], [730, 59]]) == 10571\nassert solution.twoCitySchedCost([[62, 932], [36, 844], [1, 732], [117, 761], [121, 762], [361, 976], [31, 618], [124, 697], [497, 875], [531, 796], [684, 934], [343, 588], [220, 416], [648, 801], [426, 575], [671, 776], [312, 399], [238, 322], [395, 472], [734, 796], [636, 628], [749, 689], [828, 739], [374, 279], [343, 223], [240, 120], [256, 120], [572, 425], [898, 728], [245, 16], [703, 422], [890, 596], [618, 251], [778, 317], [632, 64], [672, 103], [663, 79], [755, 69], [928, 184], [806, 58], [860, 55], [951, 61], [914, 6]]) == 12786\nassert solution.twoCitySchedCost([[262, 968], [83, 748], [413, 961], [137, 626], [578, 966], [155, 532], [122, 481], [431, 757], [556, 881], [123, 405], [411, 678], [674, 902], [279, 496], [849, 892], [918, 919], [442, 415], [634, 593], [924, 849], [334, 213], [548, 378], [304, 128], [460, 275], [766, 557], [581, 369], [847, 621], [418, 185], [808, 534], [770, 484], [538, 108], [864, 366], [539, 24], [744, 26], [869, 32], [963, 4]]) == 12220\nassert solution.twoCitySchedCost([[78, 751], [478, 982], [15, 468], [553, 964], [399, 782], [331, 706], [303, 517], [397, 601], [356, 479], [196, 314], [436, 534], [573, 617], [501, 521], [419, 430], [206, 153], [334, 190], [605, 371], [275, 9], [443, 175], [818, 543], [849, 510], [953, 575], [677, 294], [696, 288], [628, 173], [837, 203], [762, 116], [960, 298], [905, 88]]) == 8933\nassert solution.twoCitySchedCost([[204, 805], [446, 780], [199, 145], [799, 470]]) == 1265\nassert solution.twoCitySchedCost([[20, 953], [47, 976], [89, 906], [71, 817], [175, 861], [265, 864], [252, 812], [317, 870], [377, 912], [63, 594], [398, 900], [467, 948], [200, 619], [500, 912], [611, 923], [687, 910], [362, 583], [13, 170], [465, 620], [384, 527], [498, 604], [437, 537], [178, 266], [534, 608], [52, 118], [315, 365], [224, 263], [207, 244], [935, 966], [987, 1000], [291, 296], [750, 730], [53, 2], [649, 597], [370, 286], [363, 276], [534, 368], [854, 688], [448, 279], [535, 365], [972, 717], [350, 92], [597, 286], [341, 20], [483, 82], [662, 75], [862, 234], [987, 175], [955, 119]]) == 15934\nassert solution.twoCitySchedCost([[165, 868], [201, 857], [226, 834], [475, 996], [173, 656], [171, 636], [519, 939], [173, 584], [214, 616], [88, 477], [390, 691], [128, 415], [491, 742], [750, 967], [387, 583], [176, 366], [192, 367], [85, 241], [709, 842], [127, 188], [501, 561], [78, 137], [2, 60], [650, 706], [860, 908], [888, 898], [362, 318], [501, 448], [324, 241], [863, 751], [647, 501], [517, 284], [623, 356], [871, 601], [711, 414], [955, 636], [833, 512], [822, 500], [835, 496], [431, 60], [964, 570], [848, 425], [782, 333], [670, 211], [705, 240], [983, 518], [503, 8], [978, 244]]) == 17544\nassert solution.twoCitySchedCost([[131, 938], [210, 937], [76, 801], [116, 739], [64, 630], [172, 658], [265, 707], [97, 509], [263, 659], [460, 848], [231, 578], [67, 411], [69, 404], [22, 315], [460, 718], [333, 590], [544, 778], [57, 266], [753, 954], [92, 227], [161, 268], [911, 992], [882, 946], [313, 361], [854, 900], [602, 646], [251, 271], [686, 695], [340, 327], [508, 480], [300, 234], [111, 23], [656, 566], [908, 760], [332, 150], [255, 72], [705, 474], [762, 508], [941, 682], [603, 332], [397, 112], [689, 314], [588, 141], [813, 324], [726, 198], [767, 92], [785, 7], [905, 50], [899, 22], [996, 67]]) == 15150\nassert solution.twoCitySchedCost([[46, 544], [230, 525], [453, 744], [378, 633], [96, 305], [689, 897], [781, 882], [58, 147], [892, 964], [436, 446], [839, 823], [382, 251], [783, 520], [597, 287], [461, 79], [460, 78], [852, 413], [838, 332], [624, 69], [737, 9], [874, 131]]) == 6920\nassert solution.twoCitySchedCost([[12, 594], [414, 435], [613, 515], [736, 529], [318, 17], [527, 166], [850, 435], [818, 210]]) == 2603\nassert solution.twoCitySchedCost([[15, 838], [196, 812], [61, 638], [358, 817], [329, 769], [509, 837], [462, 740], [329, 598], [624, 869], [577, 803], [496, 692], [549, 733], [743, 923], [585, 755], [614, 756], [232, 279], [817, 863], [512, 558], [509, 547], [219, 189], [984, 952], [125, 89], [206, 91], [240, 79], [739, 511], [273, 31], [787, 542], [339, 90], [688, 378], [616, 278], [399, 50], [602, 239], [782, 392], [541, 136], [659, 249], [947, 519], [961, 492], [659, 123], [949, 339], [868, 253], [807, 149], [785, 103], [828, 140]]) == 14853\nassert solution.twoCitySchedCost([[96, 876], [242, 986], [120, 834], [293, 918], [128, 737], [284, 892], [95, 673], [151, 636], [158, 616], [96, 538], [397, 790], [372, 765], [406, 777], [144, 504], [241, 573], [157, 431], [455, 712], [342, 558], [92, 306], [442, 637], [84, 263], [245, 342], [485, 571], [667, 611], [164, 42], [715, 567], [377, 222], [459, 276], [427, 239], [211, 7], [295, 72], [814, 523], [856, 538], [370, 38], [699, 293], [669, 210], [662, 164], [978, 427], [917, 305], [823, 196], [974, 325], [991, 171]]) == 10934\nassert solution.twoCitySchedCost([[76, 862], [23, 706], [48, 639], [163, 736], [228, 760], [248, 759], [176, 649], [12, 471], [239, 679], [302, 710], [520, 888], [189, 522], [110, 401], [592, 796], [724, 921], [564, 745], [614, 783], [667, 826], [272, 296], [177, 196], [893, 901], [793, 792], [494, 473], [533, 490], [624, 571], [383, 301], [530, 436], [331, 206], [669, 441], [691, 454], [850, 560], [554, 258], [819, 493], [541, 47], [960, 449], [650, 114], [600, 56], [910, 351], [710, 133], [772, 194], [773, 128], [798, 117], [857, 42], [994, 2]]) == 13946\nassert solution.twoCitySchedCost([[106, 733], [5, 391], [449, 784], [29, 246], [449, 510], [524, 404], [867, 531], [452, 96], [534, 64], [741, 99]]) == 2232\nassert solution.twoCitySchedCost([[20, 614], [274, 835], [11, 421], [265, 669], [271, 662], [60, 388], [309, 612], [91, 301], [158, 317], [72, 191], [496, 524], [880, 874], [173, 60], [670, 452], [963, 659], [671, 237], [856, 396], [787, 47]]) == 4899\nassert solution.twoCitySchedCost([[104, 953], [252, 877], [157, 716], [245, 776], [213, 737], [101, 605], [11, 461], [181, 610], [273, 701], [570, 972], [276, 591], [82, 370], [611, 893], [640, 904], [618, 800], [530, 667], [607, 662], [547, 551], [557, 547], [539, 470], [654, 585], [641, 560], [896, 785], [200, 56], [997, 840], [589, 301], [666, 346], [741, 406], [638, 263], [949, 565], [839, 406], [725, 265], [595, 78], [934, 62], [959, 64]]) == 12557\nassert solution.twoCitySchedCost([[39, 951], [165, 994], [60, 817], [160, 802], [25, 575], [69, 397], [239, 536], [730, 988], [465, 632], [61, 198], [562, 601], [631, 624], [229, 193], [498, 390], [415, 247], [618, 388], [848, 565], [449, 88], [771, 233], [672, 105], [872, 169], [743, 27], [890, 82], [993, 134]]) == 5827\nassert solution.twoCitySchedCost([[6, 974], [70, 811], [301, 982], [212, 883], [128, 788], [157, 714], [123, 642], [100, 518], [321, 730], [93, 447], [583, 933], [420, 746], [643, 942], [190, 455], [689, 918], [174, 379], [22, 219], [538, 729], [868, 973], [446, 543], [724, 784], [814, 857], [288, 289], [752, 746], [339, 293], [827, 781], [439, 380], [711, 632], [244, 153], [312, 83], [998, 753], [432, 160], [415, 130], [749, 448], [653, 290], [889, 499], [762, 308], [618, 153], [696, 216], [800, 273], [681, 108], [862, 132], [933, 80], [980, 126], [964, 26]]) == 14655\nassert solution.twoCitySchedCost([[191, 985], [40, 568], [638, 876], [328, 546], [480, 633], [78, 64], [731, 561], [566, 316], [683, 377], [601, 293], [714, 263], [704, 132], [794, 7]]) == 3697\nassert solution.twoCitySchedCost([[56, 812], [247, 966], [85, 672], [374, 960], [386, 936], [348, 867], [43, 538], [452, 905], [390, 795], [415, 800], [44, 408], [485, 837], [500, 845], [510, 829], [645, 963], [44, 252], [308, 514], [97, 300], [596, 785], [358, 493], [831, 928], [597, 682], [549, 623], [865, 926], [464, 471], [54, 50], [811, 792], [833, 798], [380, 338], [654, 598], [136, 66], [923, 832], [509, 406], [547, 423], [548, 265], [924, 634], [638, 342], [500, 160], [630, 264], [725, 313], [802, 379], [933, 360], [976, 388], [693, 57]]) == 17296\nassert solution.twoCitySchedCost([[41, 918], [208, 462], [393, 555], [151, 307], [396, 442], [816, 842], [101, 54], [775, 707], [488, 416], [690, 615], [976, 43]]) == 3823\nassert solution.twoCitySchedCost([[173, 900], [44, 473], [542, 821], [44, 308], [652, 832], [888, 964], [563, 496], [482, 325], [365, 208], [592, 220], [406, 9], [497, 85], [985, 294], [963, 271]]) == 4318\nassert solution.twoCitySchedCost([[48, 948], [207, 477], [252, 517], [602, 853], [470, 603], [258, 358], [915, 994], [152, 229], [868, 937], [157, 176], [202, 201], [165, 164], [534, 502], [620, 551], [240, 77], [360, 160], [857, 635], [730, 506], [586, 350], [506, 149], [829, 423], [544, 133], [510, 89], [616, 193], [796, 335], [881, 387], [739, 220], [1000, 407], [916, 160], [798, 27], [919, 102], [971, 131]]) == 10297\nassert solution.twoCitySchedCost([[52, 832], [221, 399], [148, 274], [895, 898]]) == 1445\nassert solution.twoCitySchedCost([[46, 997], [151, 835], [197, 851], [75, 673], [366, 953], [331, 889], [396, 865], [70, 506], [431, 849], [521, 863], [291, 496], [574, 775], [558, 706], [111, 214], [439, 505], [19, 75], [277, 323], [116, 107], [423, 361], [425, 340], [922, 818], [383, 273], [972, 860], [455, 336], [300, 179], [598, 472], [457, 304], [725, 556], [864, 686], [833, 571], [739, 459], [705, 386], [994, 666], [930, 538], [982, 571], [809, 374], [839, 337], [872, 366], [677, 170], [562, 25], [998, 289], [974, 217], [978, 100]]) == 15374\nassert solution.twoCitySchedCost([[63, 993], [69, 984], [96, 942], [253, 899], [345, 987], [373, 946], [207, 761], [95, 524], [372, 787], [273, 681], [13, 415], [563, 952], [381, 719], [447, 754], [463, 750], [119, 307], [831, 945], [922, 996], [324, 374], [116, 146], [249, 269], [396, 395], [875, 855], [172, 148], [540, 504], [116, 16], [194, 43], [672, 359], [882, 508], [525, 149], [529, 110], [484, 53], [686, 180], [881, 140], [941, 69]]) == 10208\nassert solution.twoCitySchedCost([[80, 899], [86, 606], [230, 693], [100, 556], [491, 830], [82, 420], [367, 546], [640, 785], [50, 174], [899, 981], [762, 811], [222, 250], [40, 28], [563, 541], [727, 669], [547, 457], [603, 470], [275, 117], [476, 311], [529, 307], [392, 157], [338, 87], [769, 460], [410, 83], [774, 321], [865, 370], [701, 183], [963, 343], [968, 115], [974, 104], [950, 36]]) == 9224\nassert solution.twoCitySchedCost([[317, 774], [350, 679], [141, 465], [92, 317], [367, 465], [777, 804], [221, 208], [992, 972], [76, 56], [229, 202], [812, 779], [104, 60], [875, 693], [722, 507], [922, 706], [462, 182], [695, 345], [529, 143], [760, 371], [708, 276], [567, 69], [842, 320], [638, 61], [737, 134], [969, 297], [940, 242], [809, 48], [876, 81], [974, 156]]) == 9350\nassert solution.twoCitySchedCost([[86, 1000], [210, 992], [210, 957], [102, 699], [197, 750], [39, 567], [316, 806], [311, 778], [439, 878], [196, 620], [338, 753], [436, 814], [668, 990], [80, 389], [100, 392], [31, 287], [719, 967], [254, 464], [574, 767], [318, 466], [616, 726], [429, 524], [673, 746], [429, 478], [650, 696], [180, 219], [303, 238], [710, 638], [614, 532], [993, 900], [605, 458], [521, 368], [296, 117], [472, 256], [794, 572], [782, 543], [898, 555], [795, 423], [497, 118], [856, 218], [877, 227], [889, 147]]) == 15213\nassert solution.twoCitySchedCost([[94, 622], [27, 544], [261, 547], [579, 498], [301, 151], [346, 181], [634, 418], [352, 48], [613, 217], [976, 366]]) == 2492\nassert solution.twoCitySchedCost([[25, 999], [76, 989], [11, 634], [290, 797], [47, 507], [441, 886], [228, 630], [561, 921], [188, 526], [184, 509], [596, 913], [473, 787], [279, 587], [633, 935], [143, 442], [17, 313], [216, 364], [608, 717], [163, 255], [640, 698], [720, 749], [69, 64], [839, 792], [802, 746], [709, 649], [529, 459], [353, 264], [411, 322], [514, 285], [879, 638], [601, 290], [422, 97], [699, 367], [772, 420], [831, 476], [881, 510], [814, 435], [766, 291], [555, 55], [837, 300], [836, 252], [893, 269], [982, 349], [737, 3], [885, 18], [978, 10]]) == 14952\nassert solution.twoCitySchedCost([[274, 773], [12, 272], [363, 379], [878, 644], [689, 410], [985, 448], [791, 5]]) == 2151\nassert solution.twoCitySchedCost([[84, 710], [31, 555], [307, 805], [310, 785], [462, 771], [16, 300], [2, 167], [229, 354], [434, 549], [590, 662], [496, 539], [912, 952], [18, 35], [899, 908], [595, 600], [827, 736], [299, 191], [909, 797], [848, 700], [323, 114], [618, 375], [434, 78], [370, 11], [647, 274], [709, 290], [903, 481], [837, 385], [573, 49], [810, 239], [652, 25], [972, 307], [772, 95], [866, 161], [962, 203]]) == 11095\nassert solution.twoCitySchedCost([[3, 625], [321, 821], [152, 611], [392, 773], [717, 973], [1, 135], [113, 247], [122, 243], [534, 616], [233, 304], [337, 407], [220, 205], [661, 643], [868, 815], [295, 225], [467, 368], [296, 186], [574, 212], [866, 135]]) == 5720\nassert solution.twoCitySchedCost([[79, 922], [146, 937], [22, 783], [182, 904], [28, 599], [404, 903], [29, 528], [471, 961], [140, 495], [361, 707], [366, 624], [667, 841], [804, 928], [472, 577], [93, 63], [166, 61], [360, 251], [956, 791], [407, 130], [610, 151], [702, 115], [710, 111]]) == 6247\nassert solution.twoCitySchedCost([[24, 260], [685, 618]]) == 642\nassert solution.twoCitySchedCost([[312, 841], [329, 798], [353, 799], [606, 948], [217, 475], [332, 485], [924, 935], [717, 656], [584, 356], [493, 86]]) == 4335\nassert solution.twoCitySchedCost([[131, 925], [202, 799], [334, 906], [123, 643], [58, 552], [163, 645], [506, 963], [464, 917], [142, 512], [607, 962], [56, 259], [480, 615], [559, 619], [49, 106], [52, 105], [934, 981], [23, 19], [907, 893], [893, 784], [593, 404], [297, 106], [404, 102], [591, 238], [593, 213], [552, 84], [641, 133], [875, 350], [638, 93], [900, 339], [905, 336], [852, 248], [825, 83]]) == 9285\nassert solution.twoCitySchedCost([[256, 817], [378, 842], [521, 598], [867, 941], [209, 145], [383, 236]]) == 2477\nassert solution.twoCitySchedCost([[38, 992], [44, 636], [272, 859], [938, 989], [873, 808], [516, 374], [908, 719], [308, 27], [977, 659], [668, 315], [424, 56], [866, 446], [485, 13], [623, 128], [923, 427], [584, 85], [824, 8], [864, 20]]) == 6372\nassert solution.twoCitySchedCost([[20, 968], [125, 875], [237, 979], [12, 680], [26, 667], [325, 957], [256, 860], [122, 689], [84, 620], [271, 718], [76, 445], [324, 684], [461, 792], [637, 950], [709, 984], [600, 797], [443, 603], [412, 565], [2, 126], [255, 250], [179, 158], [720, 696], [671, 637], [689, 598], [735, 624], [576, 427], [596, 446], [345, 184], [891, 718], [270, 72], [540, 338], [779, 577], [1000, 758], [648, 379], [609, 338], [804, 407], [887, 428], [963, 448], [931, 169], [905, 121], [889, 75]]) == 13920\nassert solution.twoCitySchedCost([[95, 971], [129, 957], [61, 845], [57, 830], [81, 801], [3, 707], [312, 929], [256, 822], [464, 999], [486, 820], [489, 816], [669, 984], [453, 752], [546, 820], [654, 907], [181, 298], [279, 377], [46, 144], [531, 563], [830, 834], [749, 681], [550, 467], [857, 757], [371, 216], [281, 61], [387, 137], [461, 210], [528, 229], [384, 64], [708, 367], [709, 288], [596, 159], [821, 378], [667, 210], [860, 379], [882, 374], [938, 414], [545, 18], [982, 370], [949, 331], [1000, 337], [794, 111], [903, 34]]) == 13248\nassert solution.twoCitySchedCost([[69, 964], [116, 991], [162, 984], [350, 964], [308, 889], [289, 804], [146, 613], [81, 470], [297, 605], [301, 591], [67, 307], [643, 840], [448, 635], [434, 607], [525, 647], [667, 739], [809, 855], [232, 276], [334, 378], [717, 632], [690, 558], [334, 195], [945, 768], [425, 230], [582, 375], [356, 111], [802, 556], [550, 279], [983, 660], [821, 475], [973, 554], [996, 463], [681, 57], [816, 44], [817, 31]]) == 12323\nassert solution.twoCitySchedCost([[455, 951], [446, 746], [45, 323], [667, 887], [552, 759], [576, 697], [436, 550], [1, 60], [773, 766], [807, 580], [368, 104]]) == 4818\nassert solution.twoCitySchedCost([[168, 756], [234, 815], [23, 564], [222, 592], [203, 555], [575, 887], [653, 862], [779, 947], [439, 594], [200, 325], [855, 908], [41, 54], [685, 629], [543, 446], [411, 301], [984, 863], [993, 755], [621, 367], [491, 75], [937, 460], [955, 440], [585, 25], [974, 254], [880, 139], [861, 78], [860, 64], [989, 122]]) == 9344\nassert solution.twoCitySchedCost([[142, 845], [178, 859], [182, 547], [68, 397], [935, 977], [674, 599], [683, 556], [933, 691], [482, 183], [762, 444], [808, 404], [824, 380], [873, 18]]) == 4837\nassert solution.twoCitySchedCost([[150, 582], [474, 870], [342, 556], [260, 443], [112, 266], [932, 880], [730, 608], [938, 495], [844, 338], [777, 184], [924, 96]]) == 3843\nassert solution.twoCitySchedCost([[26, 546], [397, 895], [281, 735], [339, 717], [353, 663], [18, 178], [475, 583], [842, 948], [214, 112], [330, 195], [822, 659], [795, 519], [894, 545], [970, 597], [512, 134], [534, 47]]) == 5539\nassert solution.twoCitySchedCost([[82, 859], [203, 811], [24, 601], [302, 660], [324, 642], [111, 418], [242, 506], [97, 342], [89, 176], [279, 285], [194, 48], [840, 682], [845, 602]]) == 3085\nassert solution.twoCitySchedCost([[15, 896], [185, 797], [78, 658], [168, 734], [445, 989], [179, 660], [124, 589], [446, 887], [515, 953], [69, 451], [617, 985], [508, 874], [506, 830], [408, 705], [631, 910], [92, 310], [473, 678], [241, 426], [375, 536], [563, 681], [158, 226], [419, 457], [787, 813], [469, 485], [465, 416], [335, 254], [917, 805], [278, 147], [272, 100], [692, 449], [542, 249], [965, 671], [973, 642], [457, 34], [473, 49], [865, 364], [962, 348], [905, 219], [960, 246]]) == 13484\nassert solution.twoCitySchedCost([[26, 941], [209, 958], [443, 951], [510, 927], [592, 811], [713, 865], [277, 342], [4, 63], [581, 638], [368, 409], [782, 743], [244, 186], [828, 730], [795, 689], [901, 730], [892, 650], [728, 366], [693, 144], [644, 52]]) == 8002\nassert solution.twoCitySchedCost([[409, 975], [106, 659], [522, 930], [658, 993], [311, 630], [619, 872], [123, 308], [651, 799], [669, 763], [736, 745], [650, 643], [798, 755], [761, 303], [613, 154], [790, 315], [581, 74], [965, 227], [834, 20]]) == 7304\nassert solution.twoCitySchedCost([[96, 931], [144, 831], [58, 593], [21, 531], [15, 503], [521, 968], [131, 557], [180, 586], [402, 794], [112, 487], [422, 769], [2, 340], [147, 447], [111, 408], [402, 685], [13, 283], [711, 822], [206, 281], [189, 258], [555, 617], [326, 309], [883, 858], [691, 642], [224, 174], [511, 457], [497, 410], [389, 296], [617, 522], [718, 597], [454, 323], [551, 339], [725, 494], [925, 679], [754, 503], [489, 233], [537, 251], [474, 147], [963, 634], [975, 615], [720, 341], [594, 91], [641, 126], [828, 293], [956, 415], [826, 156], [874, 199]]) == 14633\nassert solution.twoCitySchedCost([[156, 892], [217, 916], [170, 645], [416, 552], [20, 147], [264, 301], [414, 405], [214, 196], [667, 629], [984, 923], [244, 70], [601, 312], [460, 63], [472, 44], [904, 397], [763, 70]]) == 4379\nassert solution.twoCitySchedCost([[45, 872], [25, 790], [15, 710], [210, 903], [122, 679], [282, 747], [238, 636], [542, 798], [525, 760], [490, 721], [365, 580], [256, 401], [607, 705], [94, 169], [121, 194], [846, 841], [814, 792], [589, 564], [753, 717], [985, 867], [869, 668], [767, 434], [499, 109], [919, 527], [853, 427], [873, 415], [700, 240], [805, 320], [836, 288], [658, 94], [975, 330], [753, 32], [905, 156], [922, 148], [839, 17]]) == 11933\nassert solution.twoCitySchedCost([[33, 1000], [19, 899], [90, 959], [6, 707], [232, 903], [122, 783], [232, 824], [82, 630], [403, 931], [198, 692], [11, 503], [377, 729], [54, 400], [607, 921], [300, 577], [171, 395], [384, 512], [92, 219], [883, 981], [265, 350], [844, 924], [767, 838], [347, 401], [580, 625], [831, 839], [964, 968], [525, 526], [133, 130], [660, 657], [69, 54], [679, 637], [858, 796], [411, 298], [254, 135], [486, 362], [217, 90], [610, 463], [864, 700], [255, 71], [885, 588], [922, 531], [813, 408], [927, 509], [654, 199], [930, 318], [768, 124], [773, 46], [850, 39]]) == 16587\nassert solution.twoCitySchedCost([[64, 778], [57, 715], [72, 669], [408, 974], [214, 771], [402, 919], [151, 640], [446, 891], [237, 584], [311, 640], [171, 488], [674, 951], [126, 336], [571, 770], [622, 783], [190, 340], [85, 216], [186, 272], [866, 886], [973, 992], [586, 581], [319, 297], [168, 142], [843, 813], [131, 82], [167, 61], [725, 606], [784, 585], [953, 616], [616, 232], [704, 291], [984, 452], [933, 197], [983, 44]]) == 11950\nassert solution.twoCitySchedCost([[203, 945], [248, 933], [374, 977], [215, 733], [289, 764], [451, 896], [83, 481], [57, 370], [689, 946], [597, 847], [24, 266], [765, 972], [567, 756], [391, 566], [398, 535], [347, 481], [426, 538], [335, 409], [623, 693], [193, 257], [59, 59], [879, 861], [127, 104], [684, 653], [89, 41], [189, 102], [155, 38], [800, 676], [871, 665], [745, 504], [762, 446], [711, 342], [769, 343], [903, 459], [528, 71], [994, 529], [796, 305], [720, 202], [838, 291], [917, 358], [591, 4], [690, 87], [985, 376], [753, 125], [997, 224], [948, 155]]) == 15336",
  "inefficient_solution": "class Solution:\n    def twoCitySchedCost(self, costs: List[List[int]]) -> int:\n        costs.sort(key=lambda x: x[0] - x[1])\n        n = len(costs) >> 1\n        min_cost = float('inf')\n        for i in range(1 << n):\n            A = 0\n            B = 0\n            total = 0\n            for j in range(n):\n                if (i >> j) & 1:\n                    A += 1\n                    total += costs[j][0]\n                else:\n                    B += 1\n                    total += costs[j + n][1]\n            if A == n:\n                min_cost = min(min_cost, total)\n            elif B == n:\n                min_cost = min(min_cost, total)\n        return min_cost",
  "is_python": true
}