{
  "problem_idx": 2366,
  "task_name": "Minimum Replacements to Sort the Array",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`. In one operation you can replace any element of the array with **any two** elements that **sum** to it.\n\n\n* For example, consider `nums = [5,6,7]`. In one operation, we can replace `nums[1]` with `2` and `4` and convert `nums` to `[5,2,4,7]`.\n\n\nReturn *the minimum number of operations to make an array that is sorted in **non-decreasing** order*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,9,3]\n**Output:** 2\n**Explanation:** Here are the steps to sort the array in non-decreasing order:\n- From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]\n- From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3]\nThere are 2 steps to sort the array in non-decreasing order. Therefore, we return 2.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 0\n**Explanation:** The array is already in non-decreasing order. Therefore, we return 0. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        mx = nums[-1]\n        for i in range(n - 2, -1, -1):\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        mx = nums[-1]\n        for i in range(n - 2, -1, -1):\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    test_case_generator_results = []\n    for i in range(100):\n        # Generate random numbers list\n        nums = random.sample(range(1, 101), random.randint(2, 10))\n\n        # Calculate the expected result using the provided Solution class\n        expected_result = solution.minimumReplacement(nums)\n\n        test_case_generator_results.append(f\"assert solution.minimumReplacement({nums}) == {expected_result}\")\n    \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    test_case_generator_results = generate_test_case()\n",
  "test_case": "assert solution.minimumReplacement([73, 81, 20, 65]) == 8\nassert solution.minimumReplacement([100, 44, 45, 79, 96, 46, 49, 26, 2]) == 440\nassert solution.minimumReplacement([1, 39, 96, 15]) == 8\nassert solution.minimumReplacement([95, 89, 30, 62, 8, 85, 56, 16, 66]) == 52\nassert solution.minimumReplacement([46, 53, 72, 81, 57, 26]) == 16\nassert solution.minimumReplacement([13, 99, 62, 39]) == 4\nassert solution.minimumReplacement([94, 8, 30, 87, 24, 44, 26]) == 22\nassert solution.minimumReplacement([94, 1, 87]) == 93\nassert solution.minimumReplacement([99, 56]) == 1\nassert solution.minimumReplacement([74, 31, 9, 70, 37, 82]) == 14\nassert solution.minimumReplacement([10, 1, 21, 13, 44, 89]) == 10\nassert solution.minimumReplacement([83, 28, 94, 20, 82]) == 10\nassert solution.minimumReplacement([98, 21, 23, 100]) == 4\nassert solution.minimumReplacement([8, 26]) == 0\nassert solution.minimumReplacement([69, 50, 59]) == 1\nassert solution.minimumReplacement([7, 26]) == 0\nassert solution.minimumReplacement([31, 46, 21, 61, 98, 66, 47, 33, 88]) == 18\nassert solution.minimumReplacement([19, 68, 76, 92, 94, 66, 58, 70]) == 9\nassert solution.minimumReplacement([88, 86, 42, 85, 82, 71, 43, 3]) == 427\nassert solution.minimumReplacement([69, 29, 79]) == 2\nassert solution.minimumReplacement([23, 47, 40, 7, 52, 44, 34, 31]) == 22\nassert solution.minimumReplacement([86, 47, 71, 53, 83]) == 5\nassert solution.minimumReplacement([17, 34, 43, 97, 9, 86, 80]) == 22\nassert solution.minimumReplacement([64, 20, 38, 32]) == 8\nassert solution.minimumReplacement([85, 24, 19, 5, 28, 10]) == 31\nassert solution.minimumReplacement([87, 58, 71, 27, 22, 60, 13, 67, 59]) == 34\nassert solution.minimumReplacement([41, 95, 15, 59, 76, 48, 10]) == 47\nassert solution.minimumReplacement([56, 20, 82]) == 2\nassert solution.minimumReplacement([1, 26, 59, 67, 96, 53, 47, 61, 39, 18]) == 39\nassert solution.minimumReplacement([86, 11, 18, 94, 35]) == 9\nassert solution.minimumReplacement([81, 40, 29, 39, 24, 91]) == 10\nassert solution.minimumReplacement([37, 7, 90, 17, 55, 3]) == 157\nassert solution.minimumReplacement([7, 55, 44, 28, 3]) == 63\nassert solution.minimumReplacement([86, 63, 29, 14, 58, 66, 9]) == 52\nassert solution.minimumReplacement([74, 10, 11, 58]) == 7\nassert solution.minimumReplacement([97, 77, 45, 25, 50, 3, 5]) == 244\nassert solution.minimumReplacement([75, 82, 83, 79, 15]) == 25\nassert solution.minimumReplacement([100, 3]) == 33\nassert solution.minimumReplacement([93, 7, 62, 51, 88, 21]) == 22\nassert solution.minimumReplacement([48, 54, 45, 7, 70, 29, 37, 33, 100, 77]) == 28\nassert solution.minimumReplacement([31, 13, 98, 65, 9, 48, 24, 78, 1]) == 358\nassert solution.minimumReplacement([65, 83, 99, 59, 50, 16, 94, 55, 11]) == 75\nassert solution.minimumReplacement([43, 58, 38, 1, 51, 14, 46, 17, 52]) == 141\nassert solution.minimumReplacement([84, 14, 1, 13, 52, 56, 3]) == 145\nassert solution.minimumReplacement([5, 89, 43, 61, 28, 41]) == 10\nassert solution.minimumReplacement([76, 17, 93, 96, 47, 64, 7, 22, 54, 36]) == 101\nassert solution.minimumReplacement([44, 89, 63]) == 1\nassert solution.minimumReplacement([8, 48, 35]) == 1\nassert solution.minimumReplacement([54, 60, 46, 8]) == 21\nassert solution.minimumReplacement([35, 27, 48, 14, 96, 68, 44, 64, 24, 58]) == 32\nassert solution.minimumReplacement([44, 88, 45, 89, 35, 50]) == 7\nassert solution.minimumReplacement([61, 90, 3, 30, 5]) == 54\nassert solution.minimumReplacement([15, 31, 51, 91, 33]) == 4\nassert solution.minimumReplacement([52, 96, 10, 99, 97, 64, 20, 25]) == 30\nassert solution.minimumReplacement([16, 54, 74, 82]) == 0\nassert solution.minimumReplacement([80, 33, 13, 52]) == 9\nassert solution.minimumReplacement([76, 54, 19, 78]) == 6\nassert solution.minimumReplacement([49, 75, 63, 29]) == 7\nassert solution.minimumReplacement([71, 7, 68, 16, 5, 64, 48, 88]) == 44\nassert solution.minimumReplacement([30, 9, 18, 20, 10, 75, 21]) == 8\nassert solution.minimumReplacement([36, 24]) == 1\nassert solution.minimumReplacement([50, 79]) == 0\nassert solution.minimumReplacement([78, 59, 73, 26]) == 8\nassert solution.minimumReplacement([5, 2, 33, 27, 1, 49, 41, 72]) == 64\nassert solution.minimumReplacement([43, 9, 80]) == 4\nassert solution.minimumReplacement([75, 18, 26, 83, 28, 22, 82, 95]) == 16\nassert solution.minimumReplacement([81, 72, 91, 13, 80]) == 17\nassert solution.minimumReplacement([2, 31, 41, 32, 18, 27]) == 5\nassert solution.minimumReplacement([20, 91, 16, 14, 41, 6, 1, 94]) == 182\nassert solution.minimumReplacement([5, 91, 7, 74, 96]) == 12\nassert solution.minimumReplacement([19, 42, 56, 24, 11, 60, 93, 55]) == 17\nassert solution.minimumReplacement([38, 23, 86, 51, 95, 2, 91, 52]) == 242\nassert solution.minimumReplacement([95, 49, 73, 40]) == 5\nassert solution.minimumReplacement([40, 93, 12]) == 10\nassert solution.minimumReplacement([9, 48, 2, 3, 90, 52, 78]) == 28\nassert solution.minimumReplacement([36, 52]) == 0\nassert solution.minimumReplacement([48, 2, 70, 96, 77, 65, 21]) == 41\nassert solution.minimumReplacement([83, 24, 17, 59, 54]) == 8\nassert solution.minimumReplacement([32, 41, 38, 51, 18, 58, 81, 2, 13]) == 272\nassert solution.minimumReplacement([40, 6, 47, 29, 26, 99, 81, 54]) == 13\nassert solution.minimumReplacement([77, 36]) == 2\nassert solution.minimumReplacement([6, 71, 31, 75, 62]) == 3\nassert solution.minimumReplacement([92, 64, 56, 31, 90]) == 7\nassert solution.minimumReplacement([57, 74, 22, 24, 12]) == 13\nassert solution.minimumReplacement([9, 95, 24, 14, 81, 53]) == 9\nassert solution.minimumReplacement([27, 87, 50, 15, 68, 4, 18, 65]) == 104\nassert solution.minimumReplacement([35, 38, 3]) == 29\nassert solution.minimumReplacement([93, 64, 80, 1, 47]) == 234\nassert solution.minimumReplacement([65, 28, 47, 49]) == 2\nassert solution.minimumReplacement([24, 99, 92, 1, 75]) == 212\nassert solution.minimumReplacement([48, 62]) == 0\nassert solution.minimumReplacement([86, 80, 34, 84, 63, 18, 1]) == 359\nassert solution.minimumReplacement([44, 23, 88, 49, 82, 22, 26]) == 14\nassert solution.minimumReplacement([85, 83, 90, 14]) == 19\nassert solution.minimumReplacement([85, 69]) == 1\nassert solution.minimumReplacement([85, 1, 78, 100, 68]) == 86\nassert solution.minimumReplacement([11, 70, 99, 28]) == 5\nassert solution.minimumReplacement([26, 9, 67, 74, 2, 40, 61, 20, 92, 16]) == 118\nassert solution.minimumReplacement([6, 79, 30]) == 2\nassert solution.minimumReplacement([6, 23, 89, 25, 21]) == 10",
  "inefficient_solution": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        mx = nums[-1]\n        temp_arr = []\n        for i in range(n - 2, -1, -1):\n            temp_arr.append(nums[i])\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        sorted_nums = sorted(temp_arr)\n        temp_dict = {}\n        for num in sorted_nums:\n            if num in temp_dict:\n                temp_dict[num] += 1\n            else:\n                temp_dict[num] = 1\n        for i in range(n - 2, -1, -1):\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        for i in range(n):\n            temp_arr.append(nums[i])\n        return ans + len(temp_arr)",
  "is_python": true
}