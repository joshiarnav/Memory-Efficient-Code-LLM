{
  "problem_idx": 931,
  "task_name": "Minimum Falling Path Sum",
  "markdown_description": "\nGiven an `n x n` array of integers `matrix`, return *the **minimum sum** of any **falling path** through* `matrix`.\n\n\nA **falling path** starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0931.Minimum%20Falling%20Path%20Sum/images/failing1-grid.jpg)\n\n```\n\n**Input:** matrix = [[2,1,3],[6,5,4],[7,8,9]]\n**Output:** 13\n**Explanation:** There are two falling paths with a minimum sum as shown.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0931.Minimum%20Falling%20Path%20Sum/images/failing2-grid.jpg)\n\n```\n\n**Input:** matrix = [[-19,57],[-40,-5]]\n**Output:** -59\n**Explanation:** The falling path with a minimum sum is shown.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == matrix.length == matrix[i].length`\n* `1 <= n <= 100`\n* `-100 <= matrix[i][j] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        f = [0] * n\n        for row in matrix:\n            g = [0] * n\n            for j, x in enumerate(row):\n                l, r = max(0, j - 1), min(n, j + 2)\n                g[j] = min(f[l:r]) + x\n            f = g\n        return min(f)\n",
  "test_case_generator": "\n# Test case generator\n\nfrom typing import List\nimport random\n\n\ndef generate_test_case() -> tuple:\n    solution = Solution()\n\n    # Generate random input matrix\n    n = random.randint(1, 10)\n    matrix = [[random.randint(-100, 100) for _ in range(n)] for _ in range(n)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minFallingPathSum(matrix)\n\n    return matrix, expected_result\n\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        matrix, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minFallingPathSum(matrix) == expected_result\n        test_case_str = f\"assert solution.minFallingPathSum({matrix}) == {expected_result}\"\n        test_case_generator_results.append(test_case_str)\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minFallingPathSum([[-11, 80], [85, -79]]) == -90\nassert solution.minFallingPathSum([[-93, -99], [2, 90]]) == -97\nassert solution.minFallingPathSum([[-88, -12], [37, 0]]) == -88\nassert solution.minFallingPathSum([[86, -44, -22, 97, 83, -19], [-92, -66, -63, -71, 75, -34], [-65, 3, -67, -39, -93, 51], [-39, 0, 16, 55, 11, -73], [-10, 97, -21, -54, 38, 70], [92, 93, 12, 10, 0, -92]]) == -313\nassert solution.minFallingPathSum([[-50, 40, 4, -84, -54, -3, 71, 81, -79], [-41, 50, -72, 91, -45, -11, 36, -94, -8], [85, -87, 9, -8, 1, 15, -83, 0, -81], [-26, -7, 31, 45, 6, -41, -68, 56, -19], [97, 28, 42, -70, -88, -63, -24, -93, -57], [45, 9, -67, -62, 31, -12, -79, 97, -28], [14, -4, -3, 29, 26, -20, -9, -80, 2], [-63, -64, 72, -63, 69, -44, 58, -78, 73], [12, -65, 17, -46, 18, -68, 54, 39, -64]]) == -718\nassert solution.minFallingPathSum([[37, -71, 4, 56, -59, 88, 100, -48, 28], [-52, -32, 55, 96, -47, -87, 20, -72, -69], [18, -61, -12, 28, 13, 23, -40, 34, -64], [-57, 61, 1, -17, 3, 18, -99, 98, -66], [74, 96, -33, -52, 65, 12, -77, -73, 35], [95, 61, -77, -39, -52, -3, 39, 1, 27], [-14, 66, 67, -28, -96, 20, -33, 75, -25], [38, 48, -37, 98, 25, -2, -84, 19, -43], [-81, 42, 17, 19, -89, -29, -5, 9, 20]]) == -552\nassert solution.minFallingPathSum([[51, 32, 56, -99], [14, -35, 87, 20], [4, 100, 73, -89], [58, 97, -96, -59]]) == -264\nassert solution.minFallingPathSum([[-10, -49, 63], [-55, -52, -51], [28, -69, -61]]) == -173\nassert solution.minFallingPathSum([[-78, -28, 98, -65, 31, -12], [47, 80, -12, -30, -90, -89], [-76, 35, -97, 39, 78, 26], [-70, -34, 35, 49, 82, 81], [19, -14, 21, -65, 77, -13], [-77, -20, -34, -19, -38, -83]]) == -317\nassert solution.minFallingPathSum([[1, 96, -6, 58], [69, -79, -2, -52], [-47, -60, -88, 1], [39, 35, -4, 28]]) == -177\nassert solution.minFallingPathSum([[26, -85, -94, -46, 68], [1, -75, 38, -86, -21], [-11, 55, 1, -37, 24], [73, -84, -98, -50, -64], [43, 49, -98, -52, -67]]) == -413\nassert solution.minFallingPathSum([[64, -40], [58, -30]]) == -70\nassert solution.minFallingPathSum([[-24, -89, 37], [-27, -67, 99], [38, 33, 24]]) == -132\nassert solution.minFallingPathSum([[-64, -67, 80, -22, 60, 55, 62], [67, -30, 30, 50, -20, 97, 48], [75, -76, 79, 20, -68, 90, 54], [98, 39, -20, 63, 62, 70, -81], [50, 53, 81, -61, 49, -44, -26], [-34, -63, 96, -87, -38, 52, 80], [-99, 98, -90, -90, 99, -95, 47]]) == -431\nassert solution.minFallingPathSum([[54, -74, 14, 94, -79, 67, -36, 18], [32, -73, -87, -100, -100, 33, -89, -13], [-51, 8, -21, 33, 90, -77, 19, 62], [-2, -71, 67, 35, 74, -35, -17, 60], [-61, -39, -92, -36, 80, 25, 63, -15], [-6, -47, -42, 27, 10, -87, 71, -6], [97, 55, -52, 49, -43, -95, 73, 92], [28, 74, 27, -91, 19, 71, -82, -31]]) == -553\nassert solution.minFallingPathSum([[55, -60, -81], [81, -80, 33], [43, -31, -88]]) == -249\nassert solution.minFallingPathSum([[-89, 60, 99, -49, -99, 76, 17, 69, 1], [79, 32, -64, 30, -46, 42, -64, 90, 51], [-38, 48, 39, 28, 62, -38, -17, 99, 20], [68, 97, 83, 42, 30, -56, 2, 89, 48], [36, -24, -42, -95, 32, -37, 84, 37, -31], [56, 37, 10, 41, -74, 46, 93, 72, -76], [-32, -58, -3, 1, -2, -32, -89, 43, 42], [-95, 19, 59, 91, -89, 33, -94, 93, -48], [99, 42, 13, 70, -21, 61, -65, -30, -56]]) == -541\nassert solution.minFallingPathSum([[74, -71, -62, 16, -9, 21], [2, 62, -67, 12, 54, 74], [-96, -87, 60, 70, -100, -80], [-62, -23, -31, 6, 63, -73], [12, 58, -19, -29, -96, -82], [39, 17, 43, 61, -99, -31]]) == -418\nassert solution.minFallingPathSum([[57, -21, -88, -8, 61, 99, -51, -56, 74], [-48, 0, -98, 29, 71, 58, -60, -39, -39], [25, -97, -39, -96, -64, -70, -23, 91, -91], [93, -17, -93, -88, -59, -32, 28, 54, 65], [7, 67, 27, 11, 77, 55, -51, -3, -29], [85, -34, -33, 83, 90, 96, -44, -37, 71], [51, -94, 34, 30, -64, -46, 1, -1, -56], [-76, -32, -61, 42, 70, -80, -69, -56, -74], [-80, -28, -78, -13, 27, -41, 30, 68, -96]]) == -648\nassert solution.minFallingPathSum([[88, 79, -21, -64, -66, -27, 100, -15], [63, -44, 73, 73, -44, 28, 45, -76], [72, 13, 98, 47, 94, 14, 56, 13], [-76, 99, 52, -49, 22, -38, -80, -91], [-9, -33, -39, 79, 85, -8, -47, 57], [-8, 50, 82, 30, -66, 51, -40, 20], [7, -72, 78, 97, -4, 47, -56, -53], [76, 62, 53, 21, -4, 45, 15, 53]]) == -304\nassert solution.minFallingPathSum([[22, -9, -89, 58, -27, -12, 60], [75, -57, -86, -50, -50, -34, 7], [-65, -24, 54, 61, -97, -53, -9], [-16, 30, -78, 77, 65, -47, 6], [-51, -45, 31, -70, -2, 75, -41], [35, 20, -68, -75, -94, 30, 34], [2, -95, -46, 59, 22, 16, 75]]) == -510\nassert solution.minFallingPathSum([[78]]) == 78\nassert solution.minFallingPathSum([[40, -78, -19, 63, -86, -8, 92], [5, 85, -18, -26, -55, -34, 16], [-34, 66, 38, 22, 5, 51, -61], [-71, 49, -84, 86, 94, 47, 91], [10, 21, -15, -69, -50, 59, 69], [47, 22, -35, 44, -38, 41, 5], [81, 68, 97, 55, 23, 0, -83]]) == -310\nassert solution.minFallingPathSum([[-83]]) == -83\nassert solution.minFallingPathSum([[15, -22, 4], [-44, -79, 78], [-75, -53, 42]]) == -176\nassert solution.minFallingPathSum([[-86, 33, -7, -83, 67, -94, 62], [-22, 5, -37, -29, -13, -51, 97], [-7, 5, 82, -5, 82, -35, -56], [85, -10, -69, -45, 18, -13, 43], [38, 12, -37, -2, -46, 7, 41], [20, 60, 5, 86, 66, -68, 96], [37, -6, 22, -1, -49, 95, 88]]) == -377\nassert solution.minFallingPathSum([[-3]]) == -3\nassert solution.minFallingPathSum([[38, 16, 32, 53, -38], [38, -85, -40, 11, 53], [90, 7, -14, 15, 6], [93, -72, -90, 97, 58], [8, -90, -87, -86, -68]]) == -263\nassert solution.minFallingPathSum([[2, 40, 13, -27, -37], [-94, -28, 27, 23, 39], [62, 78, -61, -75, -48], [-56, -42, -37, 86, 55], [-94, 83, 29, 80, -19]]) == -223\nassert solution.minFallingPathSum([[9, -97, 62, -100, -77], [94, -48, 62, 38, -71], [34, 38, -65, 94, -43], [-14, 93, 62, 8, 26], [34, 99, -74, -65, 83]]) == -280\nassert solution.minFallingPathSum([[-90, -17, -38, 51, -55, -73], [97, -6, 86, 54, 89, -28], [-74, -93, 48, -30, 95, 45], [-74, -5, -2, -93, 27, 95], [-95, 39, 60, 85, 45, -81], [82, -97, 6, -69, 76, 45]]) == -455\nassert solution.minFallingPathSum([[-13, 27, 84, -38, 43, 33, 87], [-75, -12, -86, -77, -100, 27, 2], [12, -17, 75, -15, 62, -54, 70], [35, -23, -87, -24, -70, 37, 36], [27, 78, 12, 62, -63, -100, -16], [-98, -50, 54, -65, 14, -18, 39], [-1, 3, -63, -2, 35, 83, -5]]) == -453\nassert solution.minFallingPathSum([[-90, 7, 47, -77, 69, -6, 85, -9, -13, -7], [30, -55, 77, -9, 85, 66, 94, -71, 98, 24], [63, -69, -15, 60, 47, 16, -52, 55, -71, -60], [-63, 5, 77, 16, 22, -1, 17, 64, 75, -93], [30, -65, -55, -53, -89, -21, 90, -19, 46, -13], [4, 37, 55, 75, -51, -69, -17, -38, -56, -80], [2, 56, 83, 49, -63, -79, 32, 96, 22, 5], [78, -75, -45, -12, -5, 93, -21, -50, 67, 55], [-84, 27, 24, 0, -72, 14, -34, -82, 52, -44], [51, -42, 46, 17, -99, 64, 2, 6, 14, -27]]) == -557\nassert solution.minFallingPathSum([[-14, -73, -98, 22, -14, 34, -66, -55, 46, 45], [-71, 42, 68, 71, -15, -16, 33, 52, 22, -16], [50, -22, -69, -90, -28, 5, 79, 75, 27, 20], [-34, 93, -8, -62, -46, 48, 57, -43, 71, 30], [-72, -22, -19, -47, -1, -5, -6, -2, 98, 68], [66, -60, -67, 29, -85, 80, -11, -73, 86, 86], [-86, 5, 74, -27, 86, -50, 79, 40, 9, 87], [94, -9, -59, -87, 7, -43, -83, -42, 42, -89], [-62, -74, 90, 48, 50, 59, -46, -29, 54, 9], [-2, -86, 92, 7, -11, -17, 18, -25, 56, 100]]) == -587\nassert solution.minFallingPathSum([[4, 30], [-58, -2]]) == -54\nassert solution.minFallingPathSum([[-20, 15, -9, 31, -80, -7, -71], [-88, -86, 36, 56, 56, 63, -13], [97, 43, -71, 73, -93, -48, 74], [64, 74, 52, 66, -59, -9, -99], [99, -62, 80, 94, 16, -93, 69], [39, 8, 20, 16, 22, -49, 73], [2, 94, -74, 6, -33, -74, -38]]) == -447\nassert solution.minFallingPathSum([[-7, 20, 57, -82, 41], [16, -8, 82, 76, -68], [52, 4, 15, -84, 48], [60, 15, 19, -68, 7], [8, 39, -27, 9, 59]]) == -329\nassert solution.minFallingPathSum([[-30, -6, -2, -77, 33], [-53, -59, -93, 11, -2], [-40, -94, -52, -70, 37], [-56, 42, 9, 30, -48], [68, 66, 41, 91, 67]]) == -254\nassert solution.minFallingPathSum([[54, 61, 77, -66, -16, -89, 76, 44], [0, 82, -5, 58, 44, 36, 10, -67], [72, 98, 79, 71, -75, 31, 90, 20], [-71, 30, -89, 13, 38, 68, 44, -97], [54, -75, -97, 10, 50, 93, -35, 45], [-20, -32, 87, -74, 37, -70, -63, -36], [21, -45, 39, 67, -15, -52, -78, 66], [76, 25, -100, -99, 17, -30, 87, -44]]) == -400\nassert solution.minFallingPathSum([[-18, 33, 55, -79, -37, -26, 2, 9], [-42, 72, 92, 44, -14, 60, -67, 6], [-61, -53, 47, 66, -86, 15, -34, -24], [-64, -36, -68, 37, 63, -65, -57, -42], [94, -53, 70, 72, -99, 9, 73, -61], [64, 84, -17, -94, -26, -56, 5, 34], [89, -26, 61, 65, -81, 98, -48, 25], [56, -49, 17, -41, -11, -84, 60, -36]]) == -602\nassert solution.minFallingPathSum([[86, -58, -37], [16, 11, 8], [-53, 19, 7]]) == -100\nassert solution.minFallingPathSum([[11]]) == 11\nassert solution.minFallingPathSum([[-96, 48, -58, -66, -94, -5, 2, -13, 3, 56], [-59, 4, -61, 61, -42, -41, 1, -75, 25, 82], [-54, 8, 65, 33, -62, -22, 50, -69, 12, -63], [65, -72, -92, 67, -2, -40, 94, -60, -60, 26], [-19, 9, 81, -40, -96, -99, -19, 73, -41, 46], [-35, 50, 54, -76, 17, 34, -65, 47, -70, 86], [-33, 9, 34, -50, -6, 37, 55, -48, -41, -62], [-80, 47, -73, -46, 93, 30, -50, 22, -55, -55], [-56, 52, -74, -49, 55, -6, 24, 59, 64, 60], [72, 50, 62, -58, -40, 67, -57, -48, 56, 98]]) == -665\nassert solution.minFallingPathSum([[-76, -53], [-14, 65]]) == -90\nassert solution.minFallingPathSum([[-79, -32, -46, 10, 52, 54, 48, -90], [80, 59, -26, -17, -47, -89, -89, 59], [58, 96, 72, -19, -2, 78, 21, 66], [92, 80, 78, 41, 22, -95, 81, -76], [58, -43, 11, 99, -29, 15, 19, -11], [7, 30, -39, -94, 0, 26, -13, -53], [-31, -35, 63, -89, 61, 56, 66, 74], [81, -32, -49, -81, 24, 56, -81, -75]]) == -546\nassert solution.minFallingPathSum([[-22, -47, -42, -79, 12], [66, -37, 71, 82, 15], [-1, 54, 75, 100, 28], [-45, -33, -25, -50, 53], [96, 32, -2, 8, 72]]) == -120\nassert solution.minFallingPathSum([[25, -77, -39, -51], [-65, 37, -99, 100], [63, 46, 37, -87], [-21, -15, -13, 40]]) == -276\nassert solution.minFallingPathSum([[-86, -53, 37, 73, -6, -10, 28, -11, -18], [78, 54, -34, 79, -31, -83, 12, 42, -88], [59, -63, -66, -47, 50, -36, 75, -92, 44], [-93, -52, -27, -14, -29, -38, 58, 21, -22], [-9, 35, 78, -11, -96, -55, 80, 40, 34], [-86, 92, -96, 30, 67, 98, 78, -57, -84], [29, -40, 69, -5, 13, 61, 56, 15, 32], [-22, -96, -93, 31, 48, 38, -33, 38, -23], [-82, 12, 10, -47, 11, -17, -63, -41, -14]]) == -556\nassert solution.minFallingPathSum([[86, 69, 76, -27, -71], [-73, -49, -48, 50, -22], [23, 17, -77, 51, -73], [-95, -57, 29, -55, 63], [90, -59, 92, 10, 44]]) == -268\nassert solution.minFallingPathSum([[-67, -38, 7], [-20, 57, 14], [46, -65, -5]]) == -152\nassert solution.minFallingPathSum([[-14, -85, -5], [29, 27, 64], [97, -69, 42]]) == -127\nassert solution.minFallingPathSum([[73]]) == 73\nassert solution.minFallingPathSum([[83, 11, 41, -42, -93], [-57, -43, 45, -79, 13], [83, -28, 39, -14, -98], [7, 55, -47, 38, -31], [64, 66, -10, -97, -84]]) == -398\nassert solution.minFallingPathSum([[-20, 3, -97, -75, 33, 71, -3, -75], [-10, -88, 79, -70, 50, 93, 27, -42], [-25, 89, -87, 43, 41, 10, 51, 96], [77, 78, 91, -78, 12, -20, -2, 26], [-98, 4, -72, 81, -65, -46, -91, 2], [-23, -58, 16, -77, 45, -19, 38, -86], [14, 58, -70, -53, 69, -91, 82, -54], [-5, 85, -80, -85, -31, 58, 2, -64]]) == -654\nassert solution.minFallingPathSum([[45, 84, 60, -1], [72, -64, 56, -65], [96, 56, -10, 13], [54, -88, 87, 36]]) == -164\nassert solution.minFallingPathSum([[-20, 4, 95, -3, 80, 21, -45], [-44, 100, -13, 92, -86, 29, 9], [-41, -28, -85, -64, -22, 79, -6], [-31, -24, 70, -10, -12, -62, 25], [-38, -92, 53, -15, 12, 56, -58], [14, 4, -96, -81, -73, 38, 55], [16, 81, 33, 47, 74, -13, 51]]) == -291\nassert solution.minFallingPathSum([[-84]]) == -84\nassert solution.minFallingPathSum([[69]]) == 69\nassert solution.minFallingPathSum([[92, 15, 77, -97, 52, -66, 96, -92, 30, 61], [88, -22, 36, -58, 40, 4, 85, 31, 37, -18], [8, 96, 28, -38, 54, -97, -29, -3, 85, -85], [-8, 53, -23, 46, -26, -15, -68, -26, 62, -100], [-31, -97, -66, -69, -33, -48, 88, -20, 78, -42], [-79, -16, -9, 53, -10, -97, -18, -34, 53, 67], [34, -71, 100, 24, -46, 85, 40, 71, -31, 100], [-24, 46, 70, -36, 22, 7, -1, -26, 92, 92], [-22, -6, -92, 18, -15, -62, 79, -78, -86, -29], [-52, -67, -87, -23, -85, -2, -10, 35, -10, 84]]) == -633\nassert solution.minFallingPathSum([[9, -61, 74, -10, 16, -36, 36], [63, -64, 12, -51, 80, -13, 82], [-76, 11, -67, -55, 50, 69, 84], [-32, -26, -91, -27, -71, -80, 32], [-21, -79, 76, 6, 16, -99, 9], [20, -9, 64, -81, -17, 30, 95], [35, 5, -31, -26, -81, 48, 86]]) == -439\nassert solution.minFallingPathSum([[-94, 66, -28, -43, -49, 17, 13, 44, -78, -65], [-27, 85, -19, 92, -98, -94, 37, -7, 31, -74], [13, 57, 65, -90, 44, -37, 38, -19, -33, -29], [91, 48, -56, 28, -69, -72, 29, 31, -63, -64], [52, -80, -96, -99, -57, -90, -86, 77, -47, 99], [99, 70, 14, 52, 18, -37, 82, -72, -96, -35], [-17, -31, -53, -35, -56, -80, -14, -77, -63, -96], [-79, -5, -8, 45, -38, 53, -3, -16, 77, -94], [1, 45, -24, -98, -81, 33, -2, -64, -44, -8], [-44, 32, 5, -71, -22, 15, 89, 71, -89, -36]]) == -720\nassert solution.minFallingPathSum([[-69, -8, 7, 69, -81], [-64, 39, 21, -82, 28], [-63, -76, -55, -56, 91], [43, 94, -27, -53, -89], [-40, -71, 48, 7, -41]]) == -349\nassert solution.minFallingPathSum([[28, -3, -11, -92], [16, -25, 12, -63], [68, -90, 38, -7], [50, -34, -45, -82]]) == -244\nassert solution.minFallingPathSum([[-70, -81, -66, 48, 24, 90, 96, 66], [67, 18, 16, -42, -94, -85, -35, -52], [-1, 81, 15, 43, -97, -15, 14, -45], [-46, 27, 21, 60, -30, -11, -1, -81], [-66, -2, -1, 73, 99, 3, 48, 31], [4, 15, -63, -16, -21, -31, -49, -30], [65, 10, -2, 10, -32, -29, -85, -21], [-62, -93, -32, 3, 0, -9, 30, 25]]) == -375\nassert solution.minFallingPathSum([[-43, -87, -94, -68, 4, -36], [100, 39, -62, -88, -100, -17], [60, 3, 10, 54, -41, 52], [-82, 61, -76, 45, 19, -27], [47, 94, -71, 80, -83, 67], [-18, -22, -30, 57, 67, 23]]) == -349\nassert solution.minFallingPathSum([[82, 33, -44, -68, -74], [-11, -58, -3, 4, -2], [-82, 66, -5, 20, 87], [32, 91, -31, 30, -52], [55, 41, -23, 39, -93]]) == -201\nassert solution.minFallingPathSum([[74, -27, -44, -99, 56, 37], [-8, -44, 94, -44, 62, -67], [-28, -15, -3, -50, -80, -79], [-18, -40, 66, 63, -86, -96], [-73, -98, 20, -87, 73, -13], [-14, 98, -6, 60, 63, -19]]) == -402\nassert solution.minFallingPathSum([[-51, -47, 40, 52], [-21, -48, 38, -93], [-13, -28, 100, -9], [48, 41, -9, 64]]) == -136\nassert solution.minFallingPathSum([[12]]) == 12\nassert solution.minFallingPathSum([[97, -54, -98], [-87, -18, 88], [66, 38, 71]]) == -103\nassert solution.minFallingPathSum([[36, -84], [35, -62]]) == -146\nassert solution.minFallingPathSum([[-34]]) == -34\nassert solution.minFallingPathSum([[1, -62, -84, -58, -27, -60, 56], [-70, -85, -31, -46, 65, 32, 16], [40, 56, -68, 76, 86, 9, 77], [57, 93, -96, -99, 30, -82, 52], [-69, -10, -4, 20, -42, 8, -15], [26, 29, 9, 68, 0, -68, -8], [37, 34, -60, 42, 48, 57, -42]]) == -488\nassert solution.minFallingPathSum([[16, 92, 100, -94, -78, -2, -84, -17, -87, -7], [39, -82, 73, -93, -19, -99, -25, -55, -28, 70], [85, 91, 69, 98, 37, 73, -99, -25, -69, 9], [-86, 93, -23, -10, 42, -43, 49, 24, -23, -17], [23, 25, 91, -18, 34, -26, 69, -86, 99, 37], [-3, -95, 57, -12, -54, 86, 6, -86, -20, 41], [64, 93, -20, 91, -70, 96, -13, -93, -53, -29], [-51, -63, -54, 84, 31, -59, 6, -71, -97, 2], [8, -12, 100, -70, 77, -89, 44, 5, 76, -12], [-40, -36, 9, 54, -2, 68, -60, -83, -68, -27]]) == -700\nassert solution.minFallingPathSum([[1, -74, -27, 19], [8, 85, 90, -80], [99, 79, -80, -56], [-68, -58, -71, 57]]) == -258\nassert solution.minFallingPathSum([[7]]) == 7\nassert solution.minFallingPathSum([[13, -29, -7, -76, 53, 95, -9, -48], [-80, -74, -79, 9, -45, 30, 90, -64], [3, 45, -27, 55, -45, 74, -59, 9], [-3, -31, 4, -48, -82, -65, -83, 41], [-97, 42, 72, 61, 21, 60, -12, 87], [45, -46, -19, 6, -81, 76, 57, 99], [34, -35, -6, 99, -62, 24, 36, -85], [38, 100, -1, -47, 90, -49, 29, 18]]) == -419\nassert solution.minFallingPathSum([[49, 75, -24, 98, -54, -31, -41, 96], [76, -16, 78, 71, -15, -24, 44, 34], [12, 37, -21, 25, -79, 40, 7, 59], [-65, 94, 93, -45, 52, -87, -35, -42], [37, -72, 62, -52, -31, 49, -41, -44], [55, 33, -96, 14, -47, 61, -92, -39], [97, -82, 8, 42, -43, -71, 99, -43], [-85, -15, 10, 66, -17, 46, 95, 47]]) == -517\nassert solution.minFallingPathSum([[-36, -40, -83, -40, 8], [2, 24, -61, 57, 80], [92, 23, -49, 34, 76], [81, -87, -11, 69, 41], [-94, 81, 23, -44, 43]]) == -374\nassert solution.minFallingPathSum([[19, -28, 12, -58, 57, 88, -86, 88], [49, 97, 74, -75, -3, -67, 76, -53], [90, -24, 37, 33, -99, 29, -64, -2], [30, 32, 6, -89, 51, 11, 78, -80], [12, -18, -73, 32, 48, 55, -12, 69], [-55, -95, -4, 24, -85, 30, 24, -70], [-89, -79, 83, 83, -28, 98, -79, -19], [-6, 32, -32, 89, -75, -16, 82, -13]]) == -620\nassert solution.minFallingPathSum([[-56]]) == -56\nassert solution.minFallingPathSum([[80, 58, 39], [41, 35, 7], [17, -90, -22]]) == -44\nassert solution.minFallingPathSum([[-70, 29], [64, 46]]) == -24\nassert solution.minFallingPathSum([[5, -89, 22, -37, -28, -90, -63, 49, -37], [-92, 72, -32, 43, -71, 62, -82, -46, 70], [-21, 49, -61, -56, -88, 94, -53, 34, 17], [72, -64, -70, -87, -34, -67, -85, -89, 30], [94, -38, -90, 55, -24, -22, 22, 8, -36], [83, -86, 67, 65, 87, -94, 70, -68, -41], [17, 39, -13, -41, 21, -68, -33, 84, -3], [-57, 14, -5, -98, -88, 71, 87, 50, 16], [-74, -29, -83, 42, -34, 18, 20, -30, 24]]) == -706\nassert solution.minFallingPathSum([[11, -86, 7, -18, -13, -62, 85, 56, 66], [-37, -68, 67, -88, 85, -59, -30, -55, 26], [75, 58, -58, -52, 55, -11, 20, -61, -22], [-76, 87, 73, 15, -77, -4, 79, -49, -35], [83, -79, 13, -4, -48, 3, 96, 35, 55], [99, -97, -47, 35, -1, -94, 61, -63, -52], [95, 66, 25, -24, 79, 95, 58, 24, 35], [75, 100, -21, -69, 19, -88, 23, -34, -49], [-68, 2, 52, 7, 10, 87, -26, -87, -47]]) == -440\nassert solution.minFallingPathSum([[7, -53, 92, -6, 99, -12, -1, 90], [-18, -15, -35, -59, 84, -26, 35, -79], [27, -23, -36, 53, 53, 8, -44, 52], [51, 56, -12, -63, 35, -96, -15, -79], [-2, 5, -33, 89, -98, -76, 5, -55], [19, 86, -94, 49, -82, -42, -18, 5], [-14, 63, 39, 19, 82, -55, -83, -53], [-73, -64, 100, -9, 84, 42, 51, 41]]) == -413\nassert solution.minFallingPathSum([[-87]]) == -87\nassert solution.minFallingPathSum([[-85, 60], [-50, 50]]) == -135\nassert solution.minFallingPathSum([[44, -65, 36, 75, 11, 22, -5, 26, -18, -7], [-37, 97, -100, 5, -2, 1, -43, -79, -68, 67], [72, 36, 8, -50, -92, -87, 27, -91, 94, 6], [48, -29, 54, 4, -19, -45, -41, 60, 57, 52], [-17, -47, -93, -46, -63, 67, 74, 5, -53, 48], [36, -14, -69, -10, 46, -55, 17, 86, -49, -21], [52, 42, 64, 47, -9, 36, 95, -45, -96, 47], [-4, -34, 34, 75, 7, 17, -34, 67, 4, -47], [-73, 31, -85, -15, 85, -12, -63, -50, 91, -11], [63, -81, -40, -9, -35, -15, -22, -16, 64, -66]]) == -531\nassert solution.minFallingPathSum([[-26, 60, -92, -76, 30, 87], [-85, -49, -2, 78, 14, -64], [46, -28, -29, 23, -76, -90], [-21, 92, 84, -100, 50, 35], [-9, -29, 14, -97, 93, 71], [-41, 51, -76, -32, -20, -7]]) == -443\nassert solution.minFallingPathSum([[-27, -80, -44, 37, 100], [-21, -34, -60, 60, 52], [33, -34, -94, 10, 28], [-12, -72, -76, 35, 97], [10, -93, 61, -88, -72]]) == -403\nassert solution.minFallingPathSum([[99, 15, -17, 19], [-87, -10, 28, -80], [-86, -73, -23, -61], [-51, -55, 68, 10]]) == -213\nassert solution.minFallingPathSum([[-99, 46, -11], [-61, -41, -99], [15, -80, 43]]) == -240\nassert solution.minFallingPathSum([[-4, -28, 18, -18, 68, 60, -13, 76, -36, 78], [45, -19, 10, 21, 81, 41, -59, 96, 78, -44], [65, -87, 76, -29, 10, 94, -70, -22, -52, 21], [96, 10, 53, -34, 14, 17, -74, 42, 40, 93], [45, 59, -37, 12, -74, 53, -69, 38, -93, -63], [-29, 1, 67, 96, -9, -89, 27, -26, 48, 98], [-67, -86, -85, 98, -49, 95, -37, 39, 50, 24], [-40, 98, 47, -23, 23, -55, 47, -71, -59, 89], [-68, -19, -89, 71, -77, -80, -58, 24, -82, -46], [-18, 17, 39, -72, 11, 4, 55, -4, -91, -94]]) == -658\nassert solution.minFallingPathSum([[9, 84, 32], [-73, 55, -80], [45, -51, 9]]) == -115\nassert solution.minFallingPathSum([[-5, 82, -85, 5, 37, -9, -27], [79, 56, 28, 63, 57, 31, 10], [-48, -47, -55, 7, 43, 46, 84], [-93, 32, 22, -50, 26, -81, -78], [-100, 77, 47, -55, 59, 47, -17], [38, 3, 42, -4, 76, 33, -13], [44, 35, -9, -49, 81, 60, -80]]) == -303\nassert solution.minFallingPathSum([[51, 36, 25], [-21, -46, -74], [-51, 39, 79]]) == -72\nassert solution.minFallingPathSum([[84]]) == 84\nassert solution.minFallingPathSum([[66, 9, -80, 72, 85, -9], [-1, -98, -8, -88, 0, 46], [-67, -27, -73, -36, 60, 30], [43, 18, -51, 22, -75, 37], [66, 54, -27, -22, -3, -9], [30, -15, 10, -51, 30, -19]]) == -380\nassert solution.minFallingPathSum([[86, -70], [-34, -29]]) == -104",
  "inefficient_solution": "class Solution:\n    def minFallingPathSum(self, matrix: List[List[int]]) -> int:\n        n = len(matrix)\n        dp = [[0]*n for _ in range(n)]\n        for row in matrix:\n            dp2 = [[0]*n for _ in range(n)]\n            for j, x in enumerate(row):\n                l = max(0, j - 1)\n                r = min(n, j + 2)\n                for i in range(l, r):\n                    dp2[i][j] = min(dp[k][i] for k in range(l, r)) + x\n            dp = dp2\n        return min(min(row) for row in dp)",
  "is_python": true
}