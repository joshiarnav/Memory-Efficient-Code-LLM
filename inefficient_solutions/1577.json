{
  "problem_idx": 1577,
  "task_name": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
  "markdown_description": "\nGiven two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules:\n\n\n* Type 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.\n* Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [7,4], nums2 = [5,2,8,9]\n**Output:** 1\n**Explanation:** Type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8). \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,1], nums2 = [1,1,1]\n**Output:** 9\n**Explanation:** All Triplets are valid, because 12 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k].\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums1 = [7,7,8,3], nums2 = [1,2,9,7]\n**Output:** 2\n**Explanation:** There are 2 valid triplets.\nType 1: (3,0,2).  nums1[3]2 = nums2[0] * nums2[2].\nType 2: (3,0,1).  nums2[3]2 = nums1[0] * nums1[1].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 1000`\n* `1 <= nums1[i], nums2[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        cnt1 = Counter(nums1)\n        cnt2 = Counter(nums2)\n        ans = 0\n        for a, x in cnt1.items():\n            for b, y in cnt2.items():\n                if a * a % b == 0:\n                    c = a * a // b\n                    if b == c:\n                        ans += x * y * (y - 1)\n                    else:\n                        ans += x * y * cnt2[c]\n                if b * b % a == 0:\n                    c = b * b // a\n                    if a == c:\n                        ans += x * (x - 1) * y\n                    else:\n                        ans += x * y * cnt1[c]\n        return ans >> 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numTriplets(self, nums1, nums2):\n        cnt1 = Counter(nums1)\n        cnt2 = Counter(nums2)\n        ans = 0\n        for a, x in cnt1.items():\n            for b, y in cnt2.items():\n                if a * a % b == 0:\n                    c = a * a // b\n                    if b == c:\n                        ans += x * y * (y - 1)\n                    else:\n                        ans += x * y * cnt2[c]\n                if b * b % a == 0:\n                    c = b * b // a\n                    if a == c:\n                        ans += x * (x - 1) * y\n                    else:\n                        ans += x * y * cnt1[c]\n        return ans >> 1\n\ndef generate_test_case():\n    solution = Solution()\n\n    nums1 = random.sample(range(1, 101), random.randint(2, 10))\n    nums2 = random.sample(range(1, 101), random.randint(2, 10))\n\n    expected_result = solution.numTriplets(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numTriplets(nums1, nums2) == expected_result\n        print(f\"assert solution.numTriplets({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numTriplets({nums1}, {nums2}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numTriplets([70, 77, 80, 94, 3, 21, 50, 56, 63, 55], [41, 34]) == 0\nassert solution.numTriplets([82, 62, 14, 5, 24, 61, 23], [51, 35, 52, 84, 87, 65, 89]) == 0\nassert solution.numTriplets([37, 98, 18, 94, 59, 77, 89, 85, 33, 35], [84, 25, 78, 1]) == 0\nassert solution.numTriplets([20, 70, 74, 4, 39, 61, 25, 86, 55], [67, 80, 2, 53]) == 0\nassert solution.numTriplets([60, 36, 1, 15, 92, 28], [74, 35, 13, 54, 84, 28, 53, 32, 86, 3]) == 0\nassert solution.numTriplets([34, 46, 66, 35, 99, 54, 38, 16], [95, 58, 60, 3]) == 0\nassert solution.numTriplets([24, 21], [46, 67, 79, 45, 82, 59, 61]) == 0\nassert solution.numTriplets([29, 7, 63, 30, 40, 32, 26, 46, 36], [37, 18]) == 0\nassert solution.numTriplets([81, 32, 95, 88, 83], [73, 71, 94, 84, 70, 57, 72, 90]) == 0\nassert solution.numTriplets([66, 63, 55, 93, 78, 64], [33, 65, 40, 93, 88]) == 0\nassert solution.numTriplets([83, 10, 35, 33, 73, 93, 23], [77, 58, 11, 71, 80, 6, 51, 84, 26]) == 0\nassert solution.numTriplets([73, 91], [45, 15, 90, 23]) == 0\nassert solution.numTriplets([64, 91], [97, 87, 41, 61, 3, 21, 74]) == 0\nassert solution.numTriplets([58, 12, 91, 8, 18, 45, 33, 51, 44], [93, 28, 53, 48, 27, 8, 20]) == 0\nassert solution.numTriplets([53, 46], [42, 10]) == 0\nassert solution.numTriplets([80, 12, 6, 69, 97, 48, 17], [47, 37, 57]) == 0\nassert solution.numTriplets([13, 2, 27, 56, 38], [12, 22, 55, 27, 52, 41, 46, 91, 64, 1]) == 0\nassert solution.numTriplets([30, 19, 77, 6], [89, 7, 82, 87, 62, 6, 42]) == 0\nassert solution.numTriplets([73, 48], [74, 93, 27, 57, 2]) == 0\nassert solution.numTriplets([46, 34, 7, 53], [3, 38, 69]) == 0\nassert solution.numTriplets([20, 78, 17, 90], [89, 85, 43]) == 0\nassert solution.numTriplets([56, 85, 54], [37, 32, 92, 49]) == 0\nassert solution.numTriplets([41, 20, 71, 32, 37, 38, 25, 26], [23, 57, 46, 71, 58, 26]) == 0\nassert solution.numTriplets([95, 76, 90, 52, 66, 38], [26, 91, 13, 90]) == 0\nassert solution.numTriplets([1, 6, 82, 27, 5, 18], [49, 48, 1, 73, 46, 43, 66, 74, 15, 53]) == 0\nassert solution.numTriplets([52, 67], [52, 35, 86, 17, 21, 16]) == 0\nassert solution.numTriplets([91, 54, 77, 100, 2, 57, 97, 86], [15, 64, 48, 68]) == 0\nassert solution.numTriplets([4, 47, 81, 93, 15, 33], [6, 58, 87, 31, 69, 85, 88]) == 0\nassert solution.numTriplets([27, 30, 14, 11], [48, 55, 41, 76, 52, 47, 77, 74, 35]) == 0\nassert solution.numTriplets([24, 80], [79, 77, 31, 70]) == 0\nassert solution.numTriplets([20, 77], [32, 68, 44, 38, 39, 51, 54, 14, 45, 30]) == 0\nassert solution.numTriplets([96, 65, 14, 92, 83], [11, 83]) == 0\nassert solution.numTriplets([37, 63, 83, 40, 23, 17, 73], [42, 53, 74, 91, 6, 28, 11, 62]) == 0\nassert solution.numTriplets([20, 3, 69, 49, 47, 67, 99], [47, 33, 50, 19, 71, 53, 64, 78, 68, 18]) == 0\nassert solution.numTriplets([70, 22, 24, 85, 62, 1, 95, 52, 48, 80], [15, 94, 19, 4, 22]) == 0\nassert solution.numTriplets([46, 72, 83, 53, 2, 49, 90, 85, 48, 60], [2, 76]) == 0\nassert solution.numTriplets([52, 42, 47, 4, 12, 9, 71], [39, 14, 13]) == 0\nassert solution.numTriplets([99, 50, 11, 37, 76, 87, 72, 89, 41, 33], [55, 41, 29, 14, 95, 96, 2, 93, 40]) == 0\nassert solution.numTriplets([74, 37], [85, 84, 31]) == 0\nassert solution.numTriplets([26, 5, 83], [38, 24, 35]) == 0\nassert solution.numTriplets([64, 79, 70, 89, 3], [57, 48]) == 0\nassert solution.numTriplets([3, 38, 55, 99], [6, 35, 27, 54, 99, 95, 32, 63]) == 0\nassert solution.numTriplets([4, 17, 9, 31, 48, 46, 67, 42], [79, 80, 46, 20, 34, 5, 61, 88, 10, 81]) == 0\nassert solution.numTriplets([71, 94, 55, 73, 30], [71, 53, 50, 82, 70, 52, 44]) == 0\nassert solution.numTriplets([57, 46, 19, 69, 39, 41, 22, 76, 88], [78, 81, 52, 68, 34]) == 0\nassert solution.numTriplets([78, 90, 67, 93], [37, 29, 7, 60, 61, 39, 94, 93, 66]) == 0\nassert solution.numTriplets([34, 16, 57, 20, 59, 14], [91, 90, 56, 59, 9, 21, 67, 24, 46, 16]) == 0\nassert solution.numTriplets([94, 14, 40, 38, 45, 29], [44, 2, 10, 64, 55, 98, 39, 92, 88, 18]) == 1\nassert solution.numTriplets([83, 65], [9, 72, 76, 66]) == 0\nassert solution.numTriplets([34, 66, 81], [2, 57, 71, 59, 27, 48, 46]) == 0\nassert solution.numTriplets([14, 57, 35, 24, 28, 58, 93, 23, 72, 15], [38, 28, 71, 7, 55, 79]) == 1\nassert solution.numTriplets([6, 71, 40, 43, 90, 59, 25, 17, 85, 32], [38, 35, 83]) == 0\nassert solution.numTriplets([65, 98, 15, 71, 30, 24], [92, 11, 21, 28, 58, 79, 91, 71]) == 0\nassert solution.numTriplets([17, 23, 34, 93, 20, 22, 54, 58, 74, 32], [21, 49, 6, 30, 33, 81, 64, 70, 60]) == 0\nassert solution.numTriplets([54, 43, 40, 69, 74, 79, 27, 81], [48, 63, 95, 29, 4, 10]) == 0\nassert solution.numTriplets([20, 67, 69, 33, 50, 42, 12, 52, 10, 21], [34, 89, 18, 33, 83, 3, 42, 40]) == 0\nassert solution.numTriplets([27, 30, 79, 75, 82, 77, 72, 58], [58, 70, 37, 34, 9]) == 0\nassert solution.numTriplets([75, 7, 54, 27, 97, 6], [74, 97, 26, 82, 49]) == 0\nassert solution.numTriplets([2, 78, 70, 80, 24, 14, 32, 56], [11, 27, 31, 34, 45, 66, 6, 55]) == 0\nassert solution.numTriplets([69, 80, 49, 45, 48], [89, 67]) == 0\nassert solution.numTriplets([85, 12, 59], [5, 23, 55, 2, 98, 71, 54]) == 0\nassert solution.numTriplets([28, 44, 84, 93, 13, 56], [21, 8, 50, 30, 86, 17, 37, 26]) == 0\nassert solution.numTriplets([39, 36, 90, 44], [42, 96, 6, 23, 91, 51, 100]) == 0\nassert solution.numTriplets([25, 94, 79, 31, 14, 46, 10], [44, 2, 50, 15, 84, 31, 72, 73, 21]) == 1\nassert solution.numTriplets([71, 96, 20, 64], [86, 23, 34, 8, 53, 57, 36]) == 0\nassert solution.numTriplets([14, 1, 43, 78], [26, 89, 32, 51, 80, 8, 19]) == 0\nassert solution.numTriplets([36, 2, 16], [72, 22, 25, 8, 98, 82, 100, 45]) == 0\nassert solution.numTriplets([69, 39, 11, 47, 53, 51], [55, 22, 81, 83, 10, 57, 6, 3, 92, 26]) == 0\nassert solution.numTriplets([39, 62, 80, 77, 20, 6], [75, 67, 77, 70, 24, 61, 12, 85, 30]) == 0\nassert solution.numTriplets([90, 95], [97, 79, 17]) == 0\nassert solution.numTriplets([81, 30, 3, 19, 82, 72, 2, 71], [95, 7, 77, 43, 78, 30, 33, 62, 93]) == 0\nassert solution.numTriplets([16, 69], [66, 48, 62, 56, 24, 63]) == 0\nassert solution.numTriplets([79, 99, 82, 7, 14, 41, 98, 32], [86, 4, 30]) == 0\nassert solution.numTriplets([19, 76, 31, 84, 49, 5], [4, 28, 59, 74, 90, 79, 14]) == 0\nassert solution.numTriplets([44, 56, 20, 73], [14, 40, 78, 69, 49]) == 0\nassert solution.numTriplets([100, 81, 4, 94, 58, 38, 14, 19, 34], [95, 35, 55]) == 0\nassert solution.numTriplets([89, 59, 44, 25, 75, 37, 48, 28], [8, 40, 63, 13, 48]) == 0\nassert solution.numTriplets([24, 94, 57], [100, 21, 96, 40, 27, 16, 39]) == 0\nassert solution.numTriplets([61, 71, 82, 15, 79, 21], [44, 81]) == 0\nassert solution.numTriplets([85, 65, 14, 19, 56, 75, 93, 40, 52], [83, 31, 84, 87, 12, 61, 60, 85]) == 0\nassert solution.numTriplets([20, 21, 47, 63, 73, 16, 94, 88, 61, 90], [76, 80, 7, 17, 38, 1, 33, 54, 56]) == 0\nassert solution.numTriplets([5, 30, 14, 85, 37, 46, 60, 93, 71, 6], [70, 3, 24, 96, 36, 83, 16]) == 0\nassert solution.numTriplets([12, 21], [70, 67, 22, 49, 51, 17, 74, 79]) == 0\nassert solution.numTriplets([74, 22, 16, 77, 36], [55, 65, 54]) == 0\nassert solution.numTriplets([98, 67, 84, 94, 58, 97], [36, 79, 62, 85]) == 0\nassert solution.numTriplets([86, 18, 78, 62, 39, 52, 70, 32], [60, 18, 94, 47]) == 0\nassert solution.numTriplets([30, 17, 78, 28, 19, 83], [66, 27, 98, 62, 76, 77, 53, 55, 12]) == 0\nassert solution.numTriplets([30, 20, 80, 66, 89], [13, 29, 1, 36, 39, 54, 43, 21]) == 0\nassert solution.numTriplets([42, 88, 65, 66, 25, 10], [10, 27, 80, 8, 50, 39]) == 0\nassert solution.numTriplets([24, 7], [39, 8, 35, 55, 70, 10, 66, 28, 5, 75]) == 0\nassert solution.numTriplets([28, 15, 73, 29, 13], [34, 91, 74, 39, 71, 42, 94, 53]) == 0\nassert solution.numTriplets([78, 13, 39, 45, 34, 88, 73], [28, 44, 86, 14, 50, 27, 100]) == 0\nassert solution.numTriplets([83, 39, 52, 93, 36], [72, 41]) == 0\nassert solution.numTriplets([100, 99, 7, 14, 93, 78], [79, 74, 72, 90, 56, 37, 23]) == 0\nassert solution.numTriplets([88, 95, 93, 51, 56, 14, 9, 61, 21, 85], [20, 83]) == 0\nassert solution.numTriplets([99, 40, 76], [77, 59, 85, 26, 15, 11, 99, 89, 79]) == 0\nassert solution.numTriplets([50, 88, 56, 47], [78, 19, 40, 80, 25, 8]) == 0\nassert solution.numTriplets([32, 24, 17, 31], [29, 41, 85, 82, 96]) == 0\nassert solution.numTriplets([90, 28, 71, 91], [46, 48, 25, 83, 5, 91, 1, 20]) == 0\nassert solution.numTriplets([27, 52, 45, 4, 96], [48, 74, 94, 51, 58, 31, 8, 62, 80, 47]) == 0",
  "inefficient_solution": "class Solution:\n    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:\n        cnt1 = {i: nums1.count(i) for i in nums1}\n        cnt2 = {i: nums2.count(i) for i in nums2}\n        \n        ans = 0\n        for a in cnt1:\n            for b in cnt2:\n                for c in cnt2:\n                    if a * a % b == 0 and b * b % a == 0:\n                        c1 = a * a // b\n                        c2 = b * b // a\n                        if c1 == c and c2 == c:\n                            for x in range(cnt1[a]):\n                                for y in range(cnt2[b]):\n                                    for z in range(cnt2[c]):\n                                        ans += 1\n                        elif c1 == c:\n                            for x in range(cnt1[a]):\n                                for y in range(cnt2[b]):\n                                    for z in range(cnt2[c]):\n                                        ans += y\n                        elif c2 == c:\n                            for x in range(cnt1[a]):\n                                for y in range(cnt2[b]):\n                                    for z in range(cnt2[c]):\n                                        ans += x\n                        else:\n                            for x in range(cnt1[a]):\n                                for y in range(cnt2[b]):\n                                    for z in range(cnt2[c]):\n                                        ans += 0\n        return ans",
  "is_python": true
}