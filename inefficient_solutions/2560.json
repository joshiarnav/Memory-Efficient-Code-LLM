{
  "problem_idx": 2560,
  "task_name": "House Robber IV",
  "markdown_description": "\nThere are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he **refuses to steal from adjacent homes**.\n\n\nThe **capability** of the robber is the maximum amount of money he steals from one house of all the houses he robbed.\n\n\nYou are given an integer array `nums` representing how much money is stashed in each house. More formally, the `ith` house from the left has `nums[i]` dollars.\n\n\nYou are also given an integer `k`, representing the **minimum** number of houses the robber will steal from. It is always possible to steal at least `k` houses.\n\n\nReturn *the **minimum** capability of the robber out of all the possible ways to steal at least* `k` *houses*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,5,9], k = 2\n**Output:** 5\n**Explanation:** \nThere are three ways to rob at least 2 houses:\n- Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2]) = 5.\n- Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3]) = 9.\n- Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3]) = 9.\nTherefore, we return min(5, 9, 9) = 5.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,7,9,3,1], k = 2\n**Output:** 2\n**Explanation:** There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums[0], nums[4]) = 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= (nums.length + 1)/2`\n\n\n",
  "canonical_solution": "class Solution:\n    def minCapability(self, nums: List[int], k: int) -> int:\n        def f(x):\n            cnt, j = 0, -2\n            for i, v in enumerate(nums):\n                if v > x or i == j + 1:\n                    continue\n                cnt += 1\n                j = i\n            return cnt >= k\n\n        return bisect_left(range(max(nums) + 1), True, key=f)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minCapability(self, nums: List[int], k: int) -> int:\n        def f(x):\n            cnt, j = 0, -2\n            for i, v in enumerate(nums):\n                if v > x or i == j + 1:\n                    continue\n                cnt += 1\n                j = i\n            return cnt >= k\n\n        return bisect_left(range(max(nums) + 1), True, key=f)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random k\n    k = random.randint(1, len(nums) // 2 + 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCapability(nums, k)\n\n    return nums, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCapability(nums, k) == expected_result\n        print(f\"assert solution.minCapability({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCapability({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minCapability([75, 83, 91, 71, 93, 53, 10], 3) == 75\nassert solution.minCapability([98, 65, 87, 92, 82, 35], 3) == 92\nassert solution.minCapability([48, 7, 77], 1) == 7\nassert solution.minCapability([50, 97, 67, 77, 14, 30, 44, 51, 41, 1], 2) == 14\nassert solution.minCapability([87, 2], 2) == 88\nassert solution.minCapability([94, 9, 59, 53, 97, 39, 68], 4) == 97\nassert solution.minCapability([27, 91, 34, 22, 55, 31], 3) == 31\nassert solution.minCapability([91, 80, 73, 47], 1) == 47\nassert solution.minCapability([78, 76, 42], 1) == 42\nassert solution.minCapability([13, 47], 2) == 48\nassert solution.minCapability([85, 87, 96, 44], 3) == 97\nassert solution.minCapability([28, 40, 59, 21, 86, 51], 1) == 21\nassert solution.minCapability([55, 53, 1, 6], 2) == 53\nassert solution.minCapability([58, 51, 31], 2) == 58\nassert solution.minCapability([39, 75, 42, 14], 3) == 76\nassert solution.minCapability([1, 68, 2, 6, 52, 23, 42, 86, 63, 32], 5) == 52\nassert solution.minCapability([22, 78, 54, 33, 94, 84, 2, 53], 1) == 2\nassert solution.minCapability([11, 75, 3, 94, 62, 8, 48, 33, 6, 29], 6) == 95\nassert solution.minCapability([85, 17, 79, 37], 3) == 86\nassert solution.minCapability([39, 71], 2) == 72\nassert solution.minCapability([40, 79, 57, 82], 2) == 57\nassert solution.minCapability([88, 20, 85, 69, 68, 75, 51, 56, 12, 83], 3) == 51\nassert solution.minCapability([43, 47, 70, 2], 1) == 2\nassert solution.minCapability([10, 31, 65, 54, 98, 20, 57], 4) == 98\nassert solution.minCapability([42, 65], 1) == 42\nassert solution.minCapability([87, 39, 67, 83, 47], 3) == 87\nassert solution.minCapability([10, 56, 63, 91], 3) == 92\nassert solution.minCapability([56, 71], 1) == 56\nassert solution.minCapability([28, 47, 10, 58, 2, 8, 69, 19, 70], 1) == 2\nassert solution.minCapability([82, 5, 97, 80], 3) == 98\nassert solution.minCapability([16, 51, 20, 64, 8, 39, 78], 3) == 20\nassert solution.minCapability([24, 11, 53, 66, 95, 3, 63, 89, 80], 2) == 11\nassert solution.minCapability([4, 5, 97, 90, 79, 96], 3) == 96\nassert solution.minCapability([21, 77, 74, 52, 28, 59], 2) == 28\nassert solution.minCapability([79, 60], 2) == 80\nassert solution.minCapability([78, 71, 22, 53, 11, 38, 10], 1) == 10\nassert solution.minCapability([2, 68, 26, 29], 2) == 26\nassert solution.minCapability([54, 8], 2) == 55\nassert solution.minCapability([75, 40, 53, 76], 1) == 40\nassert solution.minCapability([47, 8, 30, 20, 2, 91, 69, 13, 22, 18], 2) == 8\nassert solution.minCapability([45, 75, 30, 97, 14, 26, 7], 1) == 7\nassert solution.minCapability([13, 20, 84, 11, 40, 51, 16, 3, 76, 88], 5) == 84\nassert solution.minCapability([79, 47, 99, 100, 40, 61, 20, 49, 5], 3) == 40\nassert solution.minCapability([17, 32, 97, 87, 6], 1) == 6\nassert solution.minCapability([62, 69, 1, 59], 1) == 1\nassert solution.minCapability([70, 18, 75, 84, 1, 17, 9, 50], 4) == 75\nassert solution.minCapability([48, 64, 70, 19, 76, 88, 69, 22, 73], 4) == 73\nassert solution.minCapability([84, 88, 75, 77, 74], 3) == 84\nassert solution.minCapability([81, 22, 62, 10, 89, 21, 86, 69], 4) == 69\nassert solution.minCapability([40, 68, 18, 4, 67, 33, 43, 50], 4) == 50\nassert solution.minCapability([15, 76, 64, 40, 5, 30, 6, 49, 19], 4) == 19\nassert solution.minCapability([70, 51, 34], 1) == 34\nassert solution.minCapability([97, 59, 32, 81, 7, 82], 4) == 98\nassert solution.minCapability([93, 61, 27, 73, 4, 67, 60, 82], 5) == 94\nassert solution.minCapability([78, 96, 69, 17, 84, 92, 52], 4) == 84\nassert solution.minCapability([38, 78, 42], 1) == 38\nassert solution.minCapability([20, 40, 59, 17], 1) == 17\nassert solution.minCapability([51, 31, 100, 95, 49, 73, 28, 57, 91, 77], 4) == 77\nassert solution.minCapability([10, 48, 67, 61, 7, 28, 16, 59, 17], 5) == 67\nassert solution.minCapability([49, 28, 96, 41, 24], 2) == 28\nassert solution.minCapability([36, 34, 56, 1, 93, 66, 9, 85], 4) == 85\nassert solution.minCapability([68, 67, 95], 2) == 95\nassert solution.minCapability([76, 18, 77, 59, 56, 97, 14], 1) == 14\nassert solution.minCapability([49, 47], 2) == 50\nassert solution.minCapability([65, 58, 5], 2) == 65\nassert solution.minCapability([12, 11], 2) == 13\nassert solution.minCapability([51, 33, 62, 69, 84, 30, 7, 53, 97, 28], 5) == 62\nassert solution.minCapability([67, 35, 10, 82, 33, 93, 38, 63, 14, 57], 6) == 94\nassert solution.minCapability([4, 82, 49, 91, 97, 22, 87, 67], 4) == 67\nassert solution.minCapability([6, 95, 28, 1], 3) == 96\nassert solution.minCapability([92, 17], 2) == 93\nassert solution.minCapability([5, 9, 57, 86, 68, 74, 67, 69, 79], 5) == 79\nassert solution.minCapability([15, 96, 12, 100, 52, 23, 94, 34, 95], 2) == 15\nassert solution.minCapability([17, 54], 2) == 55\nassert solution.minCapability([50, 18, 80, 46, 74, 39, 61, 75], 2) == 39\nassert solution.minCapability([18, 95], 1) == 18\nassert solution.minCapability([21, 93, 58, 53, 12, 47, 55, 72], 1) == 12\nassert solution.minCapability([25, 9, 11, 5, 81, 39, 87, 47, 70, 95], 6) == 96\nassert solution.minCapability([80, 59, 22, 14, 12, 62, 70, 4], 2) == 12\nassert solution.minCapability([57, 61, 12, 65, 6, 47], 1) == 6\nassert solution.minCapability([55, 49, 47, 32, 88, 44, 53], 1) == 32\nassert solution.minCapability([8, 9, 3, 55, 97, 83, 52], 2) == 8\nassert solution.minCapability([45, 36], 2) == 46\nassert solution.minCapability([34, 50, 60, 59, 18, 45, 49, 64, 2], 3) == 34\nassert solution.minCapability([15, 7, 48, 64, 87], 2) == 48\nassert solution.minCapability([79, 72, 26, 16, 28], 1) == 16\nassert solution.minCapability([81, 15, 67, 95, 34, 9, 18], 3) == 34\nassert solution.minCapability([5, 64, 77, 31, 76], 3) == 77\nassert solution.minCapability([48, 41, 18, 44, 54, 39], 4) == 55\nassert solution.minCapability([99, 72, 50, 45, 66, 28, 82, 53, 37], 2) == 37\nassert solution.minCapability([66, 92, 96, 36, 46, 4, 17, 31, 39], 5) == 96\nassert solution.minCapability([63, 79, 31, 41, 12, 89, 54, 33, 39], 5) == 63\nassert solution.minCapability([83, 39, 40, 30, 64, 81, 14, 15], 4) == 81\nassert solution.minCapability([58, 9, 21, 22, 39, 32, 88, 66, 38], 2) == 22\nassert solution.minCapability([49, 59, 63, 74, 48, 23, 66, 40], 1) == 23\nassert solution.minCapability([71, 78, 47, 76, 28, 35, 99], 3) == 71\nassert solution.minCapability([37, 36, 43, 74, 61, 75], 3) == 61\nassert solution.minCapability([70, 8, 63, 11, 3, 54], 1) == 3\nassert solution.minCapability([76, 64, 54, 99, 4, 71, 90, 51], 4) == 76\nassert solution.minCapability([74, 97, 26, 27, 68, 100, 44, 58, 48], 2) == 44",
  "inefficient_solution": "class Solution:\n    def minCapability(self, nums, k):\n        n = len(nums)\n        mem = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            mem[i][i] = 1\n        for length in range(2, n+1):\n            for i in range(n-length+1):\n                j = i+length-1\n                mem[i][j] = n\n                for m in range(i, j):\n                    mem[i][j] = min(mem[i][j], max(mem[i][m], mem[m+1][j]))\n\n        def is_k_robbed(i, j, x):\n            if i == j:\n                return x >= nums[i]\n            for m in range(i, j):\n                if x >= max(nums[m], nums[m+1]):\n                    return True\n            return False\n\n        def f(x):\n            dp = [0 for _ in range(n+1)]\n            dp[0] = 1\n            for i in range(n):\n                for j in range(i+1, n):\n                    if is_k_robbed(i, j, x):\n                        dp[j+1] |= dp[i]\n            return dp[n] >= k\n\n        return bisect_left(range(max(nums) + 1), True, key=f)",
  "is_python": true
}