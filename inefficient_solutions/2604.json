{
  "problem_idx": 2604,
  "task_name": "Minimum Time to Eat All Grains",
  "markdown_description": "\nThere are `n` hens and `m` grains on a line. You are given the initial positions of the hens and the grains in two integer arrays `hens` and `grains` of size `n` and `m` respectively.\n\n\nAny hen can eat a grain if they are on the same position. The time taken for this is negligible. One hen can also eat multiple grains.\n\n\nIn `1` second, a hen can move right or left by `1` unit. The hens can move simultaneously and independently of each other.\n\n\nReturn *the **minimum** time to eat all grains if the hens act optimally.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** hens = [3,6,7], grains = [2,4,7,9]\n**Output:** 2\n**Explanation:** \nOne of the ways hens eat all grains in 2 seconds is described below:\n- The first hen eats the grain at position 2 in 1 second. \n- The second hen eats the grain at position 4 in 2 seconds. \n- The third hen eats the grains at positions 7 and 9 in 2 seconds. \nSo, the maximum time needed is 2.\nIt can be proven that the hens cannot eat all grains before 2 seconds.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** hens = [4,6,109,111,213,215], grains = [5,110,214]\n**Output:** 1\n**Explanation:** \nOne of the ways hens eat all grains in 1 second is described below:\n- The first hen eats the grain at position 5 in 1 second. \n- The fourth hen eats the grain at position 110 in 1 second.\n- The sixth hen eats the grain at position 214 in 1 second. \n- The other hens do not move. \nSo, the maximum time needed is 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= hens.length, grains.length <= 2*104`\n* `0 <= hens[i], grains[j] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumTime(self, hens: List[int], grains: List[int]) -> int:\n        def check(t):\n            j = 0\n            for x in hens:\n                if j == m:\n                    return True\n                y = grains[j]\n                if y <= x:\n                    d = x - y\n                    if d > t:\n                        return False\n                    while j < m and grains[j] <= x:\n                        j += 1\n                    while j < m and min(d, grains[j] - x) + grains[j] - y <= t:\n                        j += 1\n                else:\n                    while j < m and grains[j] - x <= t:\n                        j += 1\n            return j == m\n\n        hens.sort()\n        grains.sort()\n        m = len(grains)\n        r = abs(hens[0] - grains[0]) + grains[-1] - grains[0] + 1\n        return bisect_left(range(r), True, key=check)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumTime(self, hens, grains):\n        def check(t):\n            j = 0\n            for x in hens:\n                if j == m:\n                    return True\n                y = grains[j]\n                if y <= x:\n                    d = x - y\n                    if d > t:\n                        return False\n                    while j < m and grains[j] <= x:\n                        j += 1\n                    while j < m and min(d, grains[j] - x) + grains[j] - y <= t:\n                        j += 1\n                else:\n                    while j < m and grains[j] - x <= t:\n                        j += 1\n            return j == m\n\n        hens.sort()\n        grains.sort()\n        m = len(grains)\n        r = abs(hens[0] - grains[0]) + grains[-1] - grains[0] + 1\n        return bisect_left(range(r), True, key=check)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers lists\n    hens = random.sample(range(1, 101), random.randint(1, 11))\n    grains = random.sample(range(1, 101), random.randint(1, 11))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumTime(hens, grains)\n\n    return hens, grains, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        hens, grains, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumTime(hens, grains) == expected_result\n        print(f\"assert solution.minimumTime({hens}, {grains}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumTime({hens}, {grains}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumTime([2, 19, 31, 44, 45, 77, 81], [7, 24, 59, 65, 77, 92, 94]) == 14\nassert solution.minimumTime([10, 13, 34, 92], [49, 51]) == 17\nassert solution.minimumTime([2, 6, 12, 28, 36, 42, 61, 63, 81, 96], [57, 82, 86, 93]) == 5\nassert solution.minimumTime([63], [3, 18, 29, 45, 60, 71, 73, 91, 98]) == 130\nassert solution.minimumTime([10, 46, 49, 54], [8, 23, 50, 61]) == 17\nassert solution.minimumTime([3, 12, 34, 49], [23, 25, 41, 42, 44, 63, 71]) == 22\nassert solution.minimumTime([8, 11, 14, 87, 100], [21, 34, 41, 59, 61, 64]) == 28\nassert solution.minimumTime([16, 17, 25, 28, 59, 89], [23, 28, 35, 54, 59, 61, 68, 69, 73, 74]) == 20\nassert solution.minimumTime([10, 15, 17, 33, 41, 49, 61], [3, 36, 39, 50, 58, 74, 90, 91, 93]) == 32\nassert solution.minimumTime([17, 63, 70, 75, 93], [11, 32, 37, 40, 49, 53, 66, 97, 99]) == 27\nassert solution.minimumTime([7, 14, 29, 33, 54, 69], [2, 37, 40, 88, 98]) == 29\nassert solution.minimumTime([4, 17, 18, 36, 37, 48, 89, 91], [89, 90]) == 1\nassert solution.minimumTime([11, 12, 18, 20, 23, 26, 33, 56, 67, 79, 94], [4, 19, 36, 37, 39, 50, 69, 71, 76, 77]) == 7\nassert solution.minimumTime([5, 8, 63, 83], [36, 58, 67]) == 27\nassert solution.minimumTime([8, 16, 19, 50, 66, 67, 72, 73, 78, 83], [15, 17, 36, 45, 94]) == 14\nassert solution.minimumTime([1, 6, 8, 10, 11, 22, 45, 62, 84, 89], [2, 3, 32, 33, 60, 66, 76]) == 11\nassert solution.minimumTime([22, 23, 24, 39, 54, 68, 90, 96, 99], [12, 13, 15, 59, 60, 71, 78]) == 10\nassert solution.minimumTime([8, 13, 40, 44, 51, 82, 87, 94, 95], [16, 23, 31, 53, 54, 63, 70, 73, 84]) == 12\nassert solution.minimumTime([8, 11, 30, 36, 40, 49, 62, 73, 86, 91], [5, 38, 70, 74]) == 5\nassert solution.minimumTime([20, 27], [4, 5, 6, 33, 45, 47, 50, 52, 62, 70, 74]) == 47\nassert solution.minimumTime([11, 38, 43, 46, 49, 56, 59, 72, 92, 98], [10, 27, 31, 42, 60, 68, 79, 83]) == 11\nassert solution.minimumTime([4, 42, 55, 82], [11, 21, 26, 48, 54, 67, 73, 85, 95, 96]) == 22\nassert solution.minimumTime([7, 8, 56, 62, 70], [7, 22, 50, 63, 76, 79, 91]) == 21\nassert solution.minimumTime([7, 8, 17, 40, 51, 55, 57, 63, 70, 77], [3, 6, 13, 28, 38, 41, 50, 79, 93]) == 16\nassert solution.minimumTime([27, 36, 40, 43, 45, 46, 58], [37, 40, 43, 70, 75, 79, 89, 100]) == 42\nassert solution.minimumTime([18, 44, 52, 62, 72, 81], [26, 33, 40, 45, 63, 69, 87, 97]) == 16\nassert solution.minimumTime([19, 44, 50, 51, 95], [10, 14, 19, 37, 49, 64, 70]) == 19\nassert solution.minimumTime([4], [9, 32, 40, 94]) == 90\nassert solution.minimumTime([49, 63, 82, 88, 92], [7, 19, 94]) == 42\nassert solution.minimumTime([31, 38, 71, 79], [18, 19, 32, 42, 44, 53, 66, 72, 81, 82]) == 15\nassert solution.minimumTime([2, 5, 21, 34, 45, 53, 82, 83, 87, 98], [64]) == 11\nassert solution.minimumTime([7, 24, 82, 99], [10, 12, 64, 87, 92, 95, 98]) == 18\nassert solution.minimumTime([3, 20, 26, 27, 45, 46, 49, 70, 78, 87, 89], [4, 25, 47, 63]) == 7\nassert solution.minimumTime([22], [12, 30, 69, 76, 88, 92]) == 90\nassert solution.minimumTime([6, 10, 16, 41, 69, 72, 73, 90], [9, 37, 91]) == 4\nassert solution.minimumTime([14, 18, 31, 32, 33, 46, 49, 53, 54, 73], [49]) == 0\nassert solution.minimumTime([19, 33, 56, 61, 78, 79, 83, 95], [15, 47, 53, 77]) == 9\nassert solution.minimumTime([5, 21, 25, 28, 32, 33, 52, 64, 73, 77, 97], [21, 28, 32, 34, 35, 46, 51, 71, 84, 98]) == 7\nassert solution.minimumTime([1, 20, 22, 73, 84, 97], [65]) == 8\nassert solution.minimumTime([5, 6, 11, 18, 24, 53, 69, 99], [6, 11, 20, 23, 50, 60, 68]) == 9\nassert solution.minimumTime([19, 52, 62, 68, 74, 75, 76, 96], [9]) == 10\nassert solution.minimumTime([7, 16, 84], [23, 31, 38, 41, 44, 45, 54, 65, 77, 78, 88]) == 38\nassert solution.minimumTime([42, 90, 92], [1, 15, 23, 33, 38, 44, 46, 65, 66, 69, 79]) == 45\nassert solution.minimumTime([13, 23, 24, 29, 30, 33, 40, 63, 71, 82], [11, 60]) == 3\nassert solution.minimumTime([5, 17, 20, 31, 38, 53, 58, 59, 80, 83, 88], [58, 69, 99]) == 11\nassert solution.minimumTime([14, 35, 53, 68, 72, 75, 77, 79, 84, 99], [4, 44, 48, 78, 87]) == 10\nassert solution.minimumTime([7, 34], [18, 23, 76, 90]) == 56\nassert solution.minimumTime([45, 57, 88], [17, 25, 32, 65, 67, 90]) == 28\nassert solution.minimumTime([51, 71], [26, 41, 60, 90, 98]) == 43\nassert solution.minimumTime([62, 88], [32, 46, 50, 68, 78, 81, 100]) == 42\nassert solution.minimumTime([13, 15, 32, 43, 51, 60, 63, 68, 93, 99], [9, 30, 46, 73]) == 5\nassert solution.minimumTime([25, 34, 41, 44, 45, 51, 54, 55, 65, 90, 97], [5, 33, 88]) == 20\nassert solution.minimumTime([3, 5, 9, 23, 30, 44, 49, 79], [34, 52, 64, 87]) == 15\nassert solution.minimumTime([9, 23, 39, 89, 91, 97], [1, 25, 34, 50, 66, 72, 74, 75, 76, 80, 96]) == 23\nassert solution.minimumTime([3, 15, 48, 57, 67, 82, 97], [23, 38, 65, 87]) == 10\nassert solution.minimumTime([18, 72], [13, 26, 55, 60, 71, 73, 75, 76, 83]) == 39\nassert solution.minimumTime([9, 29], [23, 39, 77, 88, 95]) == 66\nassert solution.minimumTime([10, 22, 23, 45, 46, 52, 63, 77, 78, 92], [1]) == 9\nassert solution.minimumTime([32, 37, 85], [96]) == 11\nassert solution.minimumTime([4, 9, 10, 35, 38, 41, 49, 58, 88, 91], [2, 16, 59, 61]) == 6\nassert solution.minimumTime([3, 21, 25, 44, 60, 63, 80, 85, 95], [8, 12, 48, 57]) == 9\nassert solution.minimumTime([11, 22, 37, 56, 60, 73], [10, 20, 22, 24, 37, 45, 58, 67, 72, 77, 95]) == 22\nassert solution.minimumTime([49, 54, 59, 71, 75], [47, 60, 79, 94, 99]) == 24\nassert solution.minimumTime([5, 17, 19, 20, 65, 77, 78], [3, 8, 9, 11, 28, 34, 37, 41, 58, 62, 85]) == 21\nassert solution.minimumTime([27, 31, 33, 49, 50, 58, 84, 92, 94], [36, 44, 55, 71, 91]) == 13\nassert solution.minimumTime([35, 50, 59, 61], [44, 47, 88]) == 27\nassert solution.minimumTime([36, 55], [12, 55, 70, 93]) == 38\nassert solution.minimumTime([44, 52], [10, 35, 85, 86]) == 34\nassert solution.minimumTime([68], [22, 40, 79, 92]) == 94\nassert solution.minimumTime([29, 53, 55, 78, 92], [9, 12, 25, 38, 41, 50, 85, 92]) == 20\nassert solution.minimumTime([36], [20, 30, 31, 34, 35, 36, 57, 58, 81, 99]) == 95\nassert solution.minimumTime([1, 22, 26, 28, 37, 56, 90], [23, 47, 79, 88]) == 11\nassert solution.minimumTime([48, 81], [9, 12, 13, 16, 18, 34, 42, 71, 73, 78, 90]) == 39\nassert solution.minimumTime([22, 24, 25, 50], [32]) == 7\nassert solution.minimumTime([59], [13, 19, 25, 35, 38, 59, 60, 70, 76, 79, 91]) == 110\nassert solution.minimumTime([45], [48, 77]) == 32\nassert solution.minimumTime([30, 35, 47, 55, 56, 57, 82, 83, 90], [20, 59]) == 10\nassert solution.minimumTime([74], [64, 66]) == 10\nassert solution.minimumTime([37, 95], [4, 14, 26, 44, 56, 60, 66, 83]) == 47\nassert solution.minimumTime([10, 13, 35, 41, 44, 53, 60, 71], [20, 96]) == 25\nassert solution.minimumTime([27, 82], [18]) == 9\nassert solution.minimumTime([9, 15, 17, 24, 25, 30, 56, 64], [7, 17, 37, 40, 41, 51, 55, 76, 91, 95]) == 31\nassert solution.minimumTime([30, 39, 49, 56, 84], [14, 35, 37, 82, 100]) == 20\nassert solution.minimumTime([4, 25, 29, 31, 43, 47, 57, 58, 65, 75, 88], [1, 4, 5, 29, 51, 68, 73]) == 5\nassert solution.minimumTime([6, 9, 16, 54, 59, 67, 93], [4, 33, 98]) == 17\nassert solution.minimumTime([22, 27, 69, 72, 99], [23, 39, 77, 91]) == 12\nassert solution.minimumTime([1, 15, 41, 44, 65], [33]) == 8\nassert solution.minimumTime([57, 85, 88, 96, 99], [15, 21, 23, 34, 51, 73, 83, 90, 97]) == 42\nassert solution.minimumTime([3, 65], [5, 14, 69, 85, 91]) == 26\nassert solution.minimumTime([2, 43, 49, 83, 99], [6, 8, 39, 41, 42, 56, 57, 71, 86, 98, 100]) == 15\nassert solution.minimumTime([1, 18, 60, 69, 84, 87, 95], [1, 22, 26, 30, 66, 86, 93, 94, 97, 99]) == 12\nassert solution.minimumTime([9, 16, 29, 32], [27, 48, 60, 96]) == 64\nassert solution.minimumTime([4, 17, 24, 45, 49, 69, 84, 88], [18, 25, 36, 38, 40, 61, 64, 71, 85]) == 12\nassert solution.minimumTime([16, 85], [16, 21, 29, 32, 77]) == 16\nassert solution.minimumTime([15, 17, 24, 26, 31, 40, 51, 65, 72], [59]) == 6\nassert solution.minimumTime([94], [9, 11, 41, 67, 84, 97]) == 91\nassert solution.minimumTime([4, 59, 64, 86], [5, 9, 41, 63, 69, 72]) == 18\nassert solution.minimumTime([47, 55, 65, 76, 82], [33]) == 14\nassert solution.minimumTime([4, 11, 16, 24, 34, 47, 65], [28, 55, 84]) == 19\nassert solution.minimumTime([15, 34, 38, 57, 61, 66, 69, 83, 86, 97], [20, 76]) == 7",
  "inefficient_solution": "class Solution:\n    def minimumTime(self, hens, grains):\n        def check(t):\n            j = 0\n            newGrains = grains[:]\n            for x in hens:\n                if j == len(grains):\n                    return True\n                y = newGrains[j]\n                if y <= x:\n                    d = x - y\n                    if d > t:\n                        return False\n                    tempGrains = []\n                    while j < len(grains) and newGrains[j] <= x:\n                        tempGrains.append(newGrains[j])\n                        j += 1\n                    while j < len(grains) and min(d, newGrains[j] - x) + newGrains[j] - y <= t:\n                        tempGrains.append(newGrains[j])\n                        j += 1\n                    newGrains = list(tempGrains)\n                else:\n                    while j < len(grains) and newGrains[j] - x <= t:\n                        j += 1\n            return j == len(grains)\n\n        hens.sort()\n        grains.sort()\n        m = len(grains)\n        r = abs(hens[0] - grains[0]) + grains[-1] - grains[0] + 1\n        ans = float('inf')\n        for t in range(r):\n            if check(t):\n                ans = min(ans, t)\n        return ans",
  "is_python": true
}