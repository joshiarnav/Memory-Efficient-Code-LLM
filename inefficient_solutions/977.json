{
  "problem_idx": 977,
  "task_name": "Squares of a Sorted Array",
  "markdown_description": "\nGiven an integer array `nums` sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [-4,-1,0,3,10]\n**Output:** [0,1,9,16,100]\n**Explanation:** After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-7,-3,2,3,11]\n**Output:** [4,9,9,49,121]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 104`\n* `-104 <= nums[i] <= 104`\n* `nums` is sorted in **non-decreasing** order.\n\n\n\u00a0\n\n\n**Follow up:** Squaring each element and sorting the new array is very trivial, could you find an `O(n)` solution using a different approach?\n\n",
  "canonical_solution": "class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        res = [0] * n\n        i, j, k = 0, n - 1, n - 1\n        while i <= j:\n            if nums[i] * nums[i] > nums[j] * nums[j]:\n                res[k] = nums[i] * nums[i]\n                i += 1\n            else:\n                res[k] = nums[j] * nums[j]\n                j -= 1\n            k -= 1\n        return res\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def sortedSquares(self, nums):\n        n = len(nums)\n        res = [0] * n\n        i, j, k = 0, n - 1, n - 1\n        while i <= j:\n            if nums[i] * nums[i] > nums[j] * nums[j]:\n                res[k] = nums[i] * nums[i]\n                i += 1\n            else:\n                res[k] = nums[j] * nums[j]\n                j -= 1\n            k -= 1\n        return res\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = sorted(random.sample(range(-10000, 10001), random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.sortedSquares(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sortedSquares(nums) == expected_result\n        print(f\"assert solution.sortedSquares({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.sortedSquares({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sortedSquares([-9711, -7387, -7127, -4217, -3596, -2096, 1144, 4373, 4595]) == [1308736, 4393216, 12931216, 17783089, 19123129, 21114025, 50794129, 54567769, 94303521]\nassert solution.sortedSquares([-1845, 2226]) == [3404025, 4955076]\nassert solution.sortedSquares([-8488, -6874, -3816, -2834, -2496, -833, 1868, 3351, 7618, 8936]) == [693889, 3489424, 6230016, 8031556, 11229201, 14561856, 47251876, 58033924, 72046144, 79852096]\nassert solution.sortedSquares([-9821, 2415, 4558, 9440]) == [5832225, 20775364, 89113600, 96452041]\nassert solution.sortedSquares([-5530, -4443, -3386, -2300, 184, 5428, 6222, 8110, 9310]) == [33856, 5290000, 11464996, 19740249, 29463184, 30580900, 38713284, 65772100, 86676100]\nassert solution.sortedSquares([-3546, -1236]) == [1527696, 12574116]\nassert solution.sortedSquares([-6904, -3458, 2949, 3189, 9097]) == [8696601, 10169721, 11957764, 47665216, 82755409]\nassert solution.sortedSquares([-8928]) == [79709184]\nassert solution.sortedSquares([-9084, -3402, 2678, 4663, 8712]) == [7171684, 11573604, 21743569, 75898944, 82519056]\nassert solution.sortedSquares([-8008, -6217, -5550, -4768, -4378, -4108, 1849]) == [3418801, 16875664, 19166884, 22733824, 30802500, 38651089, 64128064]\nassert solution.sortedSquares([-8751, -8331, -7774, -3913, 654, 2436, 2641, 2953, 3304, 9607]) == [427716, 5934096, 6974881, 8720209, 10916416, 15311569, 60435076, 69405561, 76580001, 92294449]\nassert solution.sortedSquares([-8049, -5929, -3600, -2418, -906, -563, -61, 909, 5380, 7484]) == [3721, 316969, 820836, 826281, 5846724, 12960000, 28944400, 35153041, 56010256, 64786401]\nassert solution.sortedSquares([-9147, -7756, -6943, -4487, -3423, -1009, 5041, 7350]) == [1018081, 11716929, 20133169, 25411681, 48205249, 54022500, 60155536, 83667609]\nassert solution.sortedSquares([225]) == [50625]\nassert solution.sortedSquares([-9502, -4150, 672, 1653, 2048, 5845, 8474]) == [451584, 2732409, 4194304, 17222500, 34164025, 71808676, 90288004]\nassert solution.sortedSquares([-7104]) == [50466816]\nassert solution.sortedSquares([-8977, -7059, -5334, -3598, 8095, 8938]) == [12945604, 28451556, 49829481, 65529025, 79887844, 80586529]\nassert solution.sortedSquares([-5976, -4409, -444, 847, 1065, 3485, 3812, 6776, 8265]) == [197136, 717409, 1134225, 12145225, 14531344, 19439281, 35712576, 45914176, 68310225]\nassert solution.sortedSquares([-9340, -4970, -2311, -1973, -600, 4352]) == [360000, 3892729, 5340721, 18939904, 24700900, 87235600]\nassert solution.sortedSquares([8856]) == [78428736]\nassert solution.sortedSquares([-9878, -7934, -7133, -7069, -5296, 1045, 4296]) == [1092025, 18455616, 28047616, 49970761, 50879689, 62948356, 97574884]\nassert solution.sortedSquares([-8786, -7735, -6557, -5539, -1769, 2525, 3937, 5257, 8040, 8767]) == [3129361, 6375625, 15499969, 27636049, 30680521, 42994249, 59830225, 64641600, 76860289, 77193796]\nassert solution.sortedSquares([-7995, -7625, -1716, -1309, -73, 4335, 4651, 5327, 5687, 5788]) == [5329, 1713481, 2944656, 18792225, 21631801, 28376929, 32341969, 33500944, 58140625, 63920025]\nassert solution.sortedSquares([-8757, -1476, -862, -92, 4437, 6430]) == [8464, 743044, 2178576, 19686969, 41344900, 76685049]\nassert solution.sortedSquares([-7148, -1772, -1071, -716, 125, 1965, 6872, 7797, 8498]) == [15625, 512656, 1147041, 3139984, 3861225, 47224384, 51093904, 60793209, 72216004]\nassert solution.sortedSquares([-8978, -7108, -4792, -4575, 758, 4128, 5766, 7019]) == [574564, 17040384, 20930625, 22963264, 33246756, 49266361, 50523664, 80604484]\nassert solution.sortedSquares([5224, 6258]) == [27290176, 39162564]\nassert solution.sortedSquares([-7160, 2595]) == [6734025, 51265600]\nassert solution.sortedSquares([-7012, -3066, -2425, 7982]) == [5880625, 9400356, 49168144, 63712324]\nassert solution.sortedSquares([669, 5772, 7296, 7853, 8116]) == [447561, 33315984, 53231616, 61669609, 65869456]\nassert solution.sortedSquares([-2647, 7845]) == [7006609, 61544025]\nassert solution.sortedSquares([-9878, 4991]) == [24910081, 97574884]\nassert solution.sortedSquares([-1478, 274, 3356, 3517, 3730, 4753, 8956, 9152, 9687]) == [75076, 2184484, 11262736, 12369289, 13912900, 22591009, 80209936, 83759104, 93837969]\nassert solution.sortedSquares([-7022, -1847, -1322, 1152, 6587, 8014]) == [1327104, 1747684, 3411409, 43388569, 49308484, 64224196]\nassert solution.sortedSquares([-8872, -5314, -1530, 4548, 5613]) == [2340900, 20684304, 28238596, 31505769, 78712384]\nassert solution.sortedSquares([-2046, -580, 4311, 7607]) == [336400, 4186116, 18584721, 57866449]\nassert solution.sortedSquares([8612]) == [74166544]\nassert solution.sortedSquares([-3012]) == [9072144]\nassert solution.sortedSquares([-9635, -9266, -8189, -4664, -1736, 5014, 5546, 5999, 9988]) == [3013696, 21752896, 25140196, 30758116, 35988001, 67059721, 85858756, 92833225, 99760144]\nassert solution.sortedSquares([-6547, -6378, 5344]) == [28558336, 40678884, 42863209]\nassert solution.sortedSquares([-5170, -2334, 7244, 8920]) == [5447556, 26728900, 52475536, 79566400]\nassert solution.sortedSquares([-5055, 2035, 5207, 7321]) == [4141225, 25553025, 27112849, 53597041]\nassert solution.sortedSquares([-7109]) == [50537881]\nassert solution.sortedSquares([-869, -375, 1038, 5999, 8708]) == [140625, 755161, 1077444, 35988001, 75829264]\nassert solution.sortedSquares([-8209, -7665, -6545, -4868, -3318, -1972, 1947, 7283, 7920]) == [3790809, 3888784, 11009124, 23697424, 42837025, 53042089, 58752225, 62726400, 67387681]\nassert solution.sortedSquares([-9881, -9207, 6954, 7005, 7849]) == [48358116, 49070025, 61606801, 84768849, 97634161]\nassert solution.sortedSquares([-2668, 195, 1014, 2136, 3014, 6536, 9204]) == [38025, 1028196, 4562496, 7118224, 9084196, 42719296, 84713616]\nassert solution.sortedSquares([-9029, -8835, -7917, -2105, -1815, 692, 2237, 3706, 6171, 9019]) == [478864, 3294225, 4431025, 5004169, 13734436, 38081241, 62678889, 78057225, 81342361, 81522841]\nassert solution.sortedSquares([-603, 1158]) == [363609, 1340964]\nassert solution.sortedSquares([1338, 4380, 6873]) == [1790244, 19184400, 47238129]\nassert solution.sortedSquares([-5731, 3143, 7320]) == [9878449, 32844361, 53582400]\nassert solution.sortedSquares([-9406, -3731, -2112, 831, 4465, 6200, 9613]) == [690561, 4460544, 13920361, 19936225, 38440000, 88472836, 92409769]\nassert solution.sortedSquares([-2079, 3477]) == [4322241, 12089529]\nassert solution.sortedSquares([-9324, -5390, 746, 3881, 6047, 6436, 6490, 9221]) == [556516, 15062161, 29052100, 36566209, 41422096, 42120100, 85026841, 86936976]\nassert solution.sortedSquares([-6522, -836]) == [698896, 42536484]\nassert solution.sortedSquares([-9700, -7021, -6640, -5770, -5234, -3955, 933, 3890, 6083, 6202]) == [870489, 15132100, 15642025, 27394756, 33292900, 37002889, 38464804, 44089600, 49294441, 94090000]\nassert solution.sortedSquares([-5714, -1075, 552]) == [304704, 1155625, 32649796]\nassert solution.sortedSquares([-9193, -8859, -7988, -7091, -1478, -1214, 1420, 1552, 1716, 9579]) == [1473796, 2016400, 2184484, 2408704, 2944656, 50282281, 63808144, 78481881, 84511249, 91757241]\nassert solution.sortedSquares([-7236, -5437, -2174, 1272, 1742, 5654, 7476, 7776, 8138, 8731]) == [1617984, 3034564, 4726276, 29560969, 31967716, 52359696, 55890576, 60466176, 66227044, 76230361]\nassert solution.sortedSquares([-8327, -7821, -4440, -1074, -1036, 4087, 4861, 9107, 9327]) == [1073296, 1153476, 16703569, 19713600, 23629321, 61168041, 69338929, 82937449, 86992929]\nassert solution.sortedSquares([-1832, 3638]) == [3356224, 13235044]\nassert solution.sortedSquares([-9732, -8273, -6295, 1861, 2071, 3046, 4431, 8842, 8913, 8930]) == [3463321, 4289041, 9278116, 19633761, 39627025, 68442529, 78180964, 79441569, 79744900, 94711824]\nassert solution.sortedSquares([-9749, -7750, 1228, 7011, 7142, 7269, 7918, 9653, 9657]) == [1507984, 49154121, 51008164, 52838361, 60062500, 62694724, 93180409, 93257649, 95043001]\nassert solution.sortedSquares([-7075, -1415, 2708, 4492, 4885, 5791, 7683, 8388]) == [2002225, 7333264, 20178064, 23863225, 33535681, 50055625, 59028489, 70358544]\nassert solution.sortedSquares([-3617, 3834, 6638, 7899]) == [13082689, 14699556, 44063044, 62394201]\nassert solution.sortedSquares([-8815, -4371, -3843, -112, 1248, 4339]) == [12544, 1557504, 14768649, 18826921, 19105641, 77704225]\nassert solution.sortedSquares([-6544, -2072, 1399, 4386]) == [1957201, 4293184, 19236996, 42823936]\nassert solution.sortedSquares([-4915, 9423]) == [24157225, 88792929]\nassert solution.sortedSquares([-3272, 1107, 1645]) == [1225449, 2706025, 10705984]\nassert solution.sortedSquares([-8667, -3613, -2368, -1621, -557, 6058, 6124, 7019, 9335, 9559]) == [310249, 2627641, 5607424, 13053769, 36699364, 37503376, 49266361, 75116889, 87142225, 91374481]\nassert solution.sortedSquares([-5798, -4008, 6138, 6447]) == [16064064, 33616804, 37675044, 41563809]\nassert solution.sortedSquares([-6866, -2015, 3418, 4421, 6520, 8083]) == [4060225, 11682724, 19545241, 42510400, 47141956, 65334889]\nassert solution.sortedSquares([-7725, -5185, -2177, -1863, -1675, 5452, 5601]) == [2805625, 3470769, 4739329, 26884225, 29724304, 31371201, 59675625]\nassert solution.sortedSquares([-9195, -8783, -8589, -7560, -4852, -4588, -4266, 1797, 3107, 9610]) == [3229209, 9653449, 18198756, 21049744, 23541904, 57153600, 73770921, 77141089, 84548025, 92352100]\nassert solution.sortedSquares([-6812, -6686, -624, 6588, 8180]) == [389376, 43401744, 44702596, 46403344, 66912400]\nassert solution.sortedSquares([-8273, -5943, 4888, 7687, 7883]) == [23892544, 35319249, 59089969, 62141689, 68442529]\nassert solution.sortedSquares([-6776, 5652]) == [31945104, 45914176]\nassert solution.sortedSquares([-7292, -6683, -3340, 1364, 1744, 5302, 5868]) == [1860496, 3041536, 11155600, 28111204, 34433424, 44662489, 53173264]\nassert solution.sortedSquares([-7718, -6646, -1283, -267, 445]) == [71289, 198025, 1646089, 44169316, 59567524]\nassert solution.sortedSquares([-9949, -9179, -8901, -1333, 1879, 7591, 9865]) == [1776889, 3530641, 57623281, 79227801, 84254041, 97318225, 98982601]\nassert solution.sortedSquares([-5191, -3624, 125, 3624, 4153, 6083, 7832, 8210]) == [15625, 13133376, 13133376, 17247409, 26946481, 37002889, 61340224, 67404100]\nassert solution.sortedSquares([-5687, -5563, -4839, -568, 577, 1967, 4640, 4654, 6241, 8996]) == [322624, 332929, 3869089, 21529600, 21659716, 23415921, 30946969, 32341969, 38950081, 80928016]\nassert solution.sortedSquares([-3305, -3263, -1478, 1008, 3750, 4664]) == [1016064, 2184484, 10647169, 10923025, 14062500, 21752896]\nassert solution.sortedSquares([-9575, -8208, -6858, -3772, -2660, -1587, 1954, 6526, 9197, 9966]) == [2518569, 3818116, 7075600, 14227984, 42588676, 47032164, 67371264, 84584809, 91680625, 99321156]\nassert solution.sortedSquares([-7192, 2979]) == [8874441, 51724864]\nassert solution.sortedSquares([-9915, 5714, 6303, 9092]) == [32649796, 39727809, 82664464, 98307225]\nassert solution.sortedSquares([-5864, -5682, 371, 882, 2835, 6054]) == [137641, 777924, 8037225, 32285124, 34386496, 36650916]\nassert solution.sortedSquares([-515]) == [265225]\nassert solution.sortedSquares([-9919, -5849, -3297, -485, 2463, 4529, 4904]) == [235225, 6066369, 10870209, 20511841, 24049216, 34210801, 98386561]\nassert solution.sortedSquares([-3102]) == [9622404]\nassert solution.sortedSquares([839, 1286, 6209, 9478]) == [703921, 1653796, 38551681, 89832484]\nassert solution.sortedSquares([-2095]) == [4389025]\nassert solution.sortedSquares([-707, 3089, 4451, 9084]) == [499849, 9541921, 19811401, 82519056]\nassert solution.sortedSquares([-9960, -368, 1715, 3862, 7187, 8711]) == [135424, 2941225, 14915044, 51652969, 75881521, 99201600]\nassert solution.sortedSquares([-8155, -8084, -5768, -1779, -1368, 1390, 3558, 5331]) == [1871424, 1932100, 3164841, 12659364, 28419561, 33269824, 65351056, 66504025]\nassert solution.sortedSquares([-5758, -20, 2134, 4820, 6369, 7570]) == [400, 4553956, 23232400, 33154564, 40564161, 57304900]\nassert solution.sortedSquares([-5367]) == [28804689]\nassert solution.sortedSquares([-8359, -7362, -7253, 2313, 2643, 3139, 5799, 6952, 8318]) == [5349969, 6985449, 9853321, 33628401, 48330304, 52606009, 54199044, 69189124, 69872881]\nassert solution.sortedSquares([1438, 1475, 9137]) == [2067844, 2175625, 83484769]\nassert solution.sortedSquares([-5113, 6368]) == [26142769, 40551424]",
  "inefficient_solution": "class Solution:\n    def sortedSquares(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        res = [0] * (n * 10)  # Excessive space allocation\n        i, j, k = 0, n - 1, n * 10 - 1\n        while i <= j:\n            if nums[i] * nums[i] > nums[j] * nums[j]:\n                res[k] = nums[i] * nums[i]\n                i += 1\n            else:\n                res[k] = nums[j] * nums[j]\n                j -= 1\n            k -= 1\n        return res",
  "is_python": true
}