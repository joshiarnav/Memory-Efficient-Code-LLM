{
  "problem_idx": 2548,
  "task_name": "Maximum Price to Fill a Bag",
  "markdown_description": "\nYou are given a 2D integer array `items` where `items[i] = [pricei, weighti]` denotes the price and weight of the `ith` item, respectively.\n\n\nYou are also given a **positive** integer `capacity`.\n\n\nEach item can be divided into two items with ratios `part1` and `part2`, where `part1 + part2 == 1`.\n\n\n* The weight of the first item is `weighti * part1` and the price of the first item is `pricei * part1`.\n* Similarly, the weight of the second item is `weighti * part2` and the price of the second item is `pricei * part2`.\n\n\nReturn ***the maximum total price** to fill a bag of capacity* `capacity` *with given items*. If it is impossible to fill a bag return `-1`. Answers within `10-5` of the **actual answer** will be considered accepted.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** items = [[50,1],[10,8]], capacity = 5\n**Output:** 55.00000\n**Explanation:** \nWe divide the 2nd item into two parts with part1 = 0.5 and part2 = 0.5.\nThe price and weight of the 1st item are 5, 4. And similarly, the price and the weight of the 2nd item are 5, 4.\nThe array items after operation becomes [[50,1],[5,4],[5,4]]. \nTo fill a bag with capacity 5 we take the 1st element with a price of 50 and the 2nd element with a price of 5.\nIt can be proved that 55.0 is the maximum total price that we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** items = [[100,30]], capacity = 50\n**Output:** -1.00000\n**Explanation:** It is impossible to fill a bag with the given item.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= items.length <= 105`\n* `items[i].length == 2`\n* `1 <= pricei, weighti <= 104`\n* `1 <= capacity <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxPrice(self, items: List[List[int]], capacity: int) -> float:\n        ans = 0\n        for p, w in sorted(items, key=lambda x: x[1] / x[0]):\n            v = min(w, capacity)\n            ans += v / w * p\n            capacity -= v\n        return -1 if capacity else ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxPrice(self, items, capacity):\n        ans = 0\n        for p, w in sorted(items, key=lambda x: x[1] / x[0]):\n            v = min(w, capacity)\n            ans += v / w * p\n            capacity -= v\n        return -1 if capacity else ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random items list\n    items = []\n    for _ in range(random.randint(1, 5)):\n        price = random.randint(1, 101)\n        weight = random.randint(1, 101)\n        items.append([price, weight])\n    \n    # Generate a random capacity\n    capacity = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxPrice(items, capacity)\n\n    return items, capacity, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        items, capacity, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxPrice(items, capacity) == expected_result\n        print(f\"assert solution.maxPrice({items}, {capacity}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxPrice({items}, {capacity}) == {expected_result}\") \n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxPrice([[4, 56], [8, 40], [75, 43]], 1) == 1.744186046511628\nassert solution.maxPrice([[20, 24], [27, 44], [65, 93], [7, 35]], 64) == 47.956989247311824\nassert solution.maxPrice([[95, 58], [89, 17]], 27) == 105.37931034482759\nassert solution.maxPrice([[26, 16], [76, 97], [30, 42]], 92) == 85.54639175257732\nassert solution.maxPrice([[37, 57], [4, 83], [61, 16], [71, 12]], 59) == 152.12280701754386\nassert solution.maxPrice([[40, 60], [64, 16]], 53) == 88.66666666666667\nassert solution.maxPrice([[65, 47], [98, 12], [55, 45], [23, 20], [4, 85]], 91) == 202.11111111111111\nassert solution.maxPrice([[39, 75], [60, 72], [47, 95], [97, 73], [84, 39]], 67) == 121.20547945205479\nassert solution.maxPrice([[59, 63], [66, 17], [81, 4], [86, 80]], 29) == 155.6\nassert solution.maxPrice([[25, 34], [17, 80], [11, 62], [90, 93], [49, 36]], 63) == 75.12903225806451\nassert solution.maxPrice([[101, 57], [73, 72], [44, 25], [51, 27], [50, 24]], 86) == 163.01754385964912\nassert solution.maxPrice([[60, 41], [45, 11], [40, 84], [31, 11]], 77) == 142.66666666666666\nassert solution.maxPrice([[21, 56]], 78) == -1\nassert solution.maxPrice([[78, 47], [34, 88]], 1) == 1.6595744680851063\nassert solution.maxPrice([[4, 55], [4, 85], [32, 17], [95, 57], [81, 41]], 100) == 183.0\nassert solution.maxPrice([[42, 67], [24, 79], [90, 52], [41, 30]], 39) == 67.5\nassert solution.maxPrice([[64, 87], [41, 62], [61, 16], [62, 48]], 33) == 82.95833333333334\nassert solution.maxPrice([[29, 88], [34, 88], [26, 54], [55, 21], [56, 46]], 72) == 113.4074074074074\nassert solution.maxPrice([[21, 4], [28, 65], [5, 91]], 66) == 47.70769230769231\nassert solution.maxPrice([[36, 90], [20, 23]], 8) == 6.956521739130435\nassert solution.maxPrice([[80, 43], [31, 86], [77, 57], [83, 76], [61, 35]], 65) == 118.34285714285714\nassert solution.maxPrice([[24, 55], [66, 69], [36, 97]], 9) == 8.608695652173912\nassert solution.maxPrice([[67, 59]], 90) == -1\nassert solution.maxPrice([[30, 69], [9, 95], [74, 57]], 101) == 93.13043478260869\nassert solution.maxPrice([[47, 79], [46, 19]], 1) == 2.4210526315789473\nassert solution.maxPrice([[57, 43]], 78) == -1\nassert solution.maxPrice([[55, 46], [70, 28]], 44) == 89.13043478260869\nassert solution.maxPrice([[45, 4], [74, 53], [17, 10]], 32) == 87.13207547169812\nassert solution.maxPrice([[85, 26], [32, 57], [47, 54], [92, 43], [99, 47]], 43) == 121.37209302325581\nassert solution.maxPrice([[19, 101], [95, 46]], 35) == 72.28260869565217\nassert solution.maxPrice([[71, 75], [92, 2], [101, 88], [100, 86]], 3) == 93.16279069767442\nassert solution.maxPrice([[99, 98]], 52) == 52.53061224489796\nassert solution.maxPrice([[68, 61], [36, 97]], 80) == 75.05154639175258\nassert solution.maxPrice([[79, 35], [18, 45], [59, 58], [12, 11], [32, 72]], 14) == 31.6\nassert solution.maxPrice([[63, 21]], 86) == -1\nassert solution.maxPrice([[15, 93], [100, 46], [18, 41]], 59) == 105.70731707317073\nassert solution.maxPrice([[52, 82], [64, 67], [56, 13]], 86) == 123.8048780487805\nassert solution.maxPrice([[40, 77], [50, 7], [57, 6], [77, 61]], 29) == 127.19672131147541\nassert solution.maxPrice([[22, 1], [95, 45], [18, 75], [24, 101]], 15) == 51.55555555555556\nassert solution.maxPrice([[33, 42]], 2) == 1.5714285714285714\nassert solution.maxPrice([[33, 56], [49, 12], [2, 42], [16, 42], [12, 76]], 24) == 56.07142857142857\nassert solution.maxPrice([[62, 18], [78, 42], [48, 6], [74, 39], [40, 30]], 21) == 99.66666666666667\nassert solution.maxPrice([[18, 24]], 90) == -1\nassert solution.maxPrice([[24, 16], [20, 61], [59, 40], [64, 52]], 31) == 46.125\nassert solution.maxPrice([[96, 86], [68, 19]], 29) == 79.16279069767442\nassert solution.maxPrice([[14, 4], [45, 99]], 80) == 48.54545454545454\nassert solution.maxPrice([[48, 27]], 81) == -1\nassert solution.maxPrice([[96, 13], [24, 46], [29, 25], [96, 27], [74, 13]], 83) == 297.60869565217394\nassert solution.maxPrice([[13, 88], [98, 71]], 50) == 69.01408450704224\nassert solution.maxPrice([[92, 2], [8, 54]], 40) == 97.62962962962963\nassert solution.maxPrice([[9, 33], [86, 59], [63, 94]], 57) == 83.08474576271186\nassert solution.maxPrice([[74, 72], [17, 96], [50, 85], [14, 2], [56, 51]], 34) == 49.13725490196079\nassert solution.maxPrice([[9, 98], [62, 7], [40, 88]], 99) == 102.36734693877551\nassert solution.maxPrice([[76, 3]], 10) == -1\nassert solution.maxPrice([[74, 13], [73, 82], [24, 23], [76, 60]], 46) == 115.80000000000001\nassert solution.maxPrice([[33, 44], [57, 64]], 69) == 60.75\nassert solution.maxPrice([[44, 86], [64, 81], [7, 45], [7, 101], [78, 74]], 70) == 73.78378378378379\nassert solution.maxPrice([[5, 53], [67, 57], [5, 78], [81, 81]], 94) == 104.0\nassert solution.maxPrice([[30, 2], [38, 37]], 57) == -1\nassert solution.maxPrice([[24, 98], [66, 33], [19, 35], [55, 89], [37, 8]], 53) == 110.41573033707866\nassert solution.maxPrice([[64, 22], [51, 87], [41, 44]], 53) == 92.88636363636364\nassert solution.maxPrice([[26, 86]], 5) == 1.5116279069767442\nassert solution.maxPrice([[86, 95]], 30) == 27.157894736842103\nassert solution.maxPrice([[92, 77], [94, 29], [84, 94]], 83) == 158.5194805194805\nassert solution.maxPrice([[47, 91], [97, 23], [86, 31]], 100) == 206.75824175824175\nassert solution.maxPrice([[43, 71], [28, 36], [57, 24], [68, 45], [89, 92]], 62) == 114.42222222222222\nassert solution.maxPrice([[69, 31], [31, 31], [51, 53]], 51) == 89.0\nassert solution.maxPrice([[64, 76], [80, 75], [37, 23], [37, 6], [101, 82]], 38) == 85.08536585365854\nassert solution.maxPrice([[31, 56], [67, 10], [63, 62], [24, 22], [44, 43]], 55) == 114.53488372093022\nassert solution.maxPrice([[27, 11], [49, 58], [78, 38]], 9) == 22.090909090909093\nassert solution.maxPrice([[74, 80], [79, 43]], 47) == 82.7\nassert solution.maxPrice([[17, 90], [93, 99], [19, 73], [55, 66]], 6) == 5.636363636363637\nassert solution.maxPrice([[87, 84], [24, 57], [73, 2], [15, 84]], 100) == 165.89473684210526\nassert solution.maxPrice([[6, 91], [74, 7], [71, 76]], 62) == 125.38157894736842\nassert solution.maxPrice([[91, 81], [69, 60], [85, 2]], 101) == 197.8148148148148\nassert solution.maxPrice([[63, 53]], 19) == 22.584905660377355\nassert solution.maxPrice([[3, 24], [80, 91], [30, 101]], 96) == 81.48514851485149\nassert solution.maxPrice([[49, 38], [47, 34], [61, 62], [48, 20]], 97) == 148.91935483870967\nassert solution.maxPrice([[35, 83], [95, 93]], 74) == 75.59139784946237\nassert solution.maxPrice([[45, 14], [27, 52]], 21) == 48.63461538461539\nassert solution.maxPrice([[69, 26]], 51) == -1\nassert solution.maxPrice([[8, 34], [17, 92]], 54) == 11.695652173913043\nassert solution.maxPrice([[42, 18], [13, 32], [83, 6]], 78) == -1\nassert solution.maxPrice([[24, 49], [12, 86], [74, 34]], 62) == 87.71428571428571\nassert solution.maxPrice([[47, 16], [4, 80]], 92) == 50.8\nassert solution.maxPrice([[77, 44], [39, 94]], 68) == 86.95744680851064\nassert solution.maxPrice([[55, 44], [5, 72], [35, 87], [94, 31], [62, 83]], 5) == 15.161290322580644\nassert solution.maxPrice([[69, 30], [62, 20], [26, 91], [76, 10], [47, 8]], 57) == 228.7\nassert solution.maxPrice([[78, 80]], 81) == -1\nassert solution.maxPrice([[50, 93], [98, 47], [38, 35]], 50) == 101.25714285714285\nassert solution.maxPrice([[95, 69], [88, 57], [5, 58]], 95) == 140.31884057971016\nassert solution.maxPrice([[28, 99], [20, 80], [49, 21], [50, 5]], 57) == 107.76767676767676\nassert solution.maxPrice([[19, 61]], 70) == -1\nassert solution.maxPrice([[54, 10], [54, 98], [80, 74], [79, 20], [55, 70]], 89) == 196.78378378378378\nassert solution.maxPrice([[59, 76], [36, 17], [7, 83]], 21) == 39.10526315789474\nassert solution.maxPrice([[55, 50], [79, 74], [62, 99], [22, 10], [15, 27]], 39) == 53.9\nassert solution.maxPrice([[60, 74], [41, 18]], 12) == 27.333333333333332\nassert solution.maxPrice([[99, 98], [25, 81], [55, 96], [92, 57], [57, 83]], 73) == 108.16326530612244\nassert solution.maxPrice([[70, 29], [94, 65], [42, 58], [73, 25]], 55) == 144.44615384615383\nassert solution.maxPrice([[89, 92], [4, 53], [25, 29], [16, 92], [32, 53]], 74) == 71.58695652173913",
  "inefficient_solution": "class Solution:\n    def maxPrice(self, items: List[List[int]], capacity: int) -> float:\n        count = 0\n        for item in items:\n            count += 1\n            price = item[0]\n            weight = item[1]\n            new_items = []\n            for _ in range(1000):\n                new_items.append([price / 2, weight / 2])\n                new_items.append([price / 2, weight / 2])\n            items.extend(new_items)\n        \n        items.sort(key=lambda x: x[1] / x[0])\n        ans = 0\n        for item in items:\n            v = min(item[1], capacity)\n            ans += v / item[1] * item[0]\n            capacity -= v\n        return -1 if capacity else ans",
  "is_python": true
}