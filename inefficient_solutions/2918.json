{
  "problem_idx": 2918,
  "task_name": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
  "markdown_description": "\nYou are given two arrays `nums1` and `nums2` consisting of positive integers.\n\n\nYou have to replace **all** the `0`'s in both arrays with **strictly** positive integers such that the sum of elements of both arrays becomes **equal**.\n\n\nReturn *the **minimum** equal sum you can obtain, or* `-1` *if it is impossible*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [3,2,0,1,0], nums2 = [6,5,0]\n**Output:** 12\n**Explanation:** We can replace 0's in the following way:\n- Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].\n- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].\nBoth arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,0,2,0], nums2 = [1,4]\n**Output:** -1\n**Explanation:** It is impossible to make the sum of both arrays equal.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 105`\n* `0 <= nums1[i], nums2[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        s1 = sum(nums1) + nums1.count(0)\n        s2 = sum(nums2) + nums2.count(0)\n        if s1 > s2:\n            return self.minSum(nums2, nums1)\n        if s1 == s2:\n            return s1\n        return -1 if nums1.count(0) == 0 else s2\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minSum(self, nums1, nums2):\n        s1 = sum(nums1) + nums1.count(0)\n        s2 = sum(nums2) + nums2.count(0)\n        if s1 > s2:\n            return self.minSum(nums2, nums1)\n        if s1 == s2:\n            return s1\n        return -1 if nums1.count(0) == 0 else s2\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list for nums1 and nums2\n    nums1 = [random.randint(0, 10) for _ in range(random.randint(2, 10))]\n    nums2 = [random.randint(0, 10) for _ in range(random.randint(2, 10))]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minSum(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minSum(nums1, nums2) == expected_result\n        print(f\"assert solution.minSum({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minSum({nums1}, {nums2}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minSum([3, 6, 4, 5, 4, 6, 0], [1, 5, 9, 7, 10, 2, 6, 5]) == 45\nassert solution.minSum([5, 7, 0, 5, 0, 1, 1, 9, 4], [10, 9, 5, 8, 5, 7, 0]) == 45\nassert solution.minSum([8, 3, 8, 8, 0, 7, 0, 9, 8, 1], [10, 4, 5, 5, 7, 8, 3]) == -1\nassert solution.minSum([1, 5, 10], [8, 8, 8, 4, 10, 4, 9]) == -1\nassert solution.minSum([8, 5], [6, 9]) == -1\nassert solution.minSum([0, 7, 2, 2], [10, 7, 2, 10, 1]) == 30\nassert solution.minSum([5, 0, 1], [7, 4, 7]) == 18\nassert solution.minSum([0, 8, 10, 7, 9, 1, 9], [0, 10, 0, 3, 9, 5, 9, 5, 3, 3]) == 49\nassert solution.minSum([8, 10, 10, 9], [2, 4, 4, 10, 10, 2]) == -1\nassert solution.minSum([8, 9, 7, 9, 0, 8, 7, 3], [2, 9, 8, 6, 10, 5, 0, 10, 1]) == 52\nassert solution.minSum([7, 8, 7], [3, 1, 8, 6, 10, 10, 8]) == -1\nassert solution.minSum([10, 1, 8, 10], [3, 2, 7, 2, 9, 7, 5]) == -1\nassert solution.minSum([8, 0, 3], [3, 5, 5, 7, 0, 7]) == 28\nassert solution.minSum([10, 5, 0, 4], [8, 5, 0]) == 20\nassert solution.minSum([7, 10, 7, 4, 7, 4, 8, 7], [10, 9, 6, 6, 4, 9, 0, 8, 0, 5]) == -1\nassert solution.minSum([4, 1, 1, 10, 6, 6, 3, 4], [6, 5, 6, 10, 7, 7, 4, 8, 7, 10]) == -1\nassert solution.minSum([3, 3, 7, 6, 5, 7, 5, 10, 10, 2], [2, 7, 3]) == -1\nassert solution.minSum([9, 8, 5, 5, 5, 3, 1, 5, 1, 2], [3, 10, 7]) == -1\nassert solution.minSum([0, 4, 6, 8, 6], [3, 3, 5, 8, 9, 9, 10, 6]) == 53\nassert solution.minSum([10, 5, 2, 4, 7, 7, 8], [10, 4, 7]) == -1\nassert solution.minSum([1, 7, 7, 3, 1, 8], [7, 9, 1, 9, 1]) == 27\nassert solution.minSum([3, 7, 8, 0, 9, 10, 4, 7], [1, 1, 9, 3, 1]) == -1\nassert solution.minSum([1, 9, 0, 10, 9, 2, 6, 9, 4], [9, 3, 8, 0]) == 51\nassert solution.minSum([10, 2, 8, 0], [5, 6, 9, 7, 8, 6]) == 41\nassert solution.minSum([7, 2, 7, 6, 5, 9, 2], [7, 2, 6, 5, 4, 7, 7]) == 38\nassert solution.minSum([6, 0, 6, 4, 1, 0, 8, 8], [9, 8, 7, 8, 10, 10, 7]) == 59\nassert solution.minSum([5, 5, 5, 8, 3, 8, 8], [3, 5, 6, 3, 6, 7, 7]) == -1\nassert solution.minSum([10, 4, 3], [2, 8, 3, 2, 7, 5]) == -1\nassert solution.minSum([7, 5, 1, 0, 7, 3, 8, 6], [9, 1, 2]) == -1\nassert solution.minSum([0, 4, 8], [7, 4, 6]) == 17\nassert solution.minSum([2, 0, 0, 10, 8, 1, 0, 4, 8, 9], [0, 4, 6]) == 45\nassert solution.minSum([10, 10, 1, 3, 5], [1, 7, 6, 9, 4, 10, 4, 10]) == -1\nassert solution.minSum([2, 7, 2, 0], [9, 4, 3, 3, 10, 9, 7, 2, 1]) == 48\nassert solution.minSum([2, 2, 3, 4, 2, 8, 7, 7, 5, 9], [4, 6, 4, 0]) == 49\nassert solution.minSum([7, 2, 2, 3, 8, 3, 10, 2], [0, 3]) == 37\nassert solution.minSum([5, 1, 1, 3, 7, 9, 4, 8, 10, 10], [3, 5, 5]) == -1\nassert solution.minSum([0, 0], [0, 5, 8, 10, 2, 6]) == 32\nassert solution.minSum([3, 4, 4, 1, 9, 1, 9, 2], [9, 3, 4, 4, 2, 6, 4, 7]) == -1\nassert solution.minSum([6, 5, 7, 10, 6, 1], [0, 3, 9, 1, 2, 2, 5, 6]) == 35\nassert solution.minSum([5, 10, 7, 3, 5, 8, 0], [2, 2, 1, 1, 10, 5, 9]) == -1\nassert solution.minSum([0, 5], [3, 10, 3]) == 16\nassert solution.minSum([3, 10, 9, 0, 6, 10, 9, 4, 9], [10, 2, 7, 0, 3, 4]) == 61\nassert solution.minSum([1, 2, 5, 9], [6, 0, 5]) == 17\nassert solution.minSum([1, 4, 9, 6, 5, 8, 3], [2, 9, 2, 10]) == -1\nassert solution.minSum([9, 8, 8, 9, 9, 1, 3, 4, 8, 9], [0, 10, 3, 3, 10, 0, 1, 6, 3, 0]) == 68\nassert solution.minSum([1, 9, 3, 7, 6, 2, 4, 6], [6, 0, 8, 8, 6, 10, 0, 5]) == -1\nassert solution.minSum([4, 1, 3], [1, 3, 6]) == -1\nassert solution.minSum([7, 7, 5], [0, 7, 8, 8, 2, 10, 1]) == -1\nassert solution.minSum([3, 4, 9, 5, 6], [9, 0, 3]) == 27\nassert solution.minSum([4, 0, 4, 2, 0, 9, 5, 0], [10, 7]) == -1\nassert solution.minSum([6, 4, 10, 10, 3, 7], [3, 4, 3, 3]) == -1\nassert solution.minSum([3, 7, 5, 10, 6, 3, 8, 9, 1], [3, 6, 9, 6, 6, 9, 9, 2, 9, 2]) == -1\nassert solution.minSum([4, 2, 10, 3, 6, 10, 6, 5, 2], [6, 0, 7, 3, 3, 8, 2, 8, 3, 8]) == -1\nassert solution.minSum([10, 5, 6, 6, 10], [3, 1, 7]) == -1\nassert solution.minSum([2, 8, 2, 9, 2], [10, 9, 2]) == -1\nassert solution.minSum([8, 0, 10, 1, 10, 8, 9, 10], [9, 10, 0, 3, 3]) == 57\nassert solution.minSum([5, 2, 2, 4], [9, 7, 4, 5, 10, 7, 7, 4]) == -1\nassert solution.minSum([6, 3, 6, 7, 1, 1, 10, 2], [0, 7, 4, 5, 6, 2, 1, 1, 2]) == 36\nassert solution.minSum([1, 10, 8, 10, 3, 10, 9, 6], [8, 9, 10, 2, 7]) == -1\nassert solution.minSum([2, 8], [6, 3, 8, 9, 7, 0, 5, 2, 0]) == -1\nassert solution.minSum([0, 9, 0, 7, 3, 9, 1, 5, 5, 7], [9, 8, 7, 10, 1, 8]) == -1\nassert solution.minSum([8, 1, 4], [3, 3, 1, 8]) == -1\nassert solution.minSum([3, 7, 7, 3, 8, 0, 0, 6], [1, 0]) == 36\nassert solution.minSum([0, 10, 3, 10], [7, 3, 5, 1]) == -1\nassert solution.minSum([0, 1, 3, 7, 5, 1, 6, 10, 7], [5, 2, 5]) == -1\nassert solution.minSum([6, 4, 10, 10, 3, 10, 8], [8, 2, 5, 0, 7]) == 51\nassert solution.minSum([6, 8, 1, 10, 7, 5, 2], [1, 6, 4, 10, 5]) == -1\nassert solution.minSum([8, 3, 4, 2, 5], [4, 9, 2, 9, 7, 2, 3, 2]) == -1\nassert solution.minSum([8, 4, 8, 5], [9, 7, 5, 5, 2, 4, 9, 10, 0, 6]) == -1\nassert solution.minSum([0, 8, 0, 6], [10, 3]) == -1\nassert solution.minSum([0, 2], [9, 7, 8, 4, 5, 6, 9, 5, 5, 7]) == 65\nassert solution.minSum([2, 6, 3, 1, 4, 6, 4, 4, 4], [1, 8, 1, 7, 1, 0]) == 34\nassert solution.minSum([5, 0, 0, 10, 6, 3, 7, 5], [6, 8, 9, 3]) == -1\nassert solution.minSum([10, 9], [0, 4, 2, 8, 1, 2, 8, 1, 7, 8]) == -1\nassert solution.minSum([9, 10, 5], [6, 2, 2, 1, 1, 9, 4, 5, 8]) == -1\nassert solution.minSum([4, 8, 1, 5, 1, 5, 2, 8, 6], [8, 1]) == -1\nassert solution.minSum([2, 1, 8, 3, 1, 8, 8, 7, 6, 1], [2, 7, 8, 7, 5, 9, 4, 9, 5]) == -1\nassert solution.minSum([0, 1, 2, 10, 10, 8], [8, 3, 3, 6, 5]) == -1\nassert solution.minSum([2, 0, 0], [5, 6]) == 11\nassert solution.minSum([2, 10, 5, 9, 7, 7], [2, 8, 5, 9, 6, 10, 1, 10]) == -1\nassert solution.minSum([7, 10, 0, 2], [8, 0, 9, 6, 9, 1, 6, 5, 6]) == 51\nassert solution.minSum([4, 3, 7, 8, 10], [10, 2, 5, 4]) == -1\nassert solution.minSum([4, 8, 8, 7, 8], [10, 3, 2, 9, 10, 6, 0, 10, 3, 4]) == -1\nassert solution.minSum([1, 8, 1, 1], [9, 2, 7, 7, 3, 7, 0]) == -1\nassert solution.minSum([5, 0, 10, 5, 10, 2, 4, 8, 7, 10], [3, 10, 10, 5, 2, 6, 1]) == -1\nassert solution.minSum([4, 1, 7, 10, 0], [4, 4, 3]) == -1\nassert solution.minSum([0, 8, 4, 7, 6], [1, 8, 1, 3]) == -1\nassert solution.minSum([2, 2, 1], [0, 2, 1, 2, 1, 10]) == -1\nassert solution.minSum([9, 5, 7], [1, 6, 9, 6, 7, 10, 3, 1, 1, 3]) == -1\nassert solution.minSum([4, 6, 9, 2, 5, 1, 10], [2, 7, 6, 8, 1, 3]) == -1\nassert solution.minSum([0, 10, 6, 1, 0, 3, 8], [4, 5, 5, 8, 2]) == -1\nassert solution.minSum([3, 8, 9, 9, 5, 9, 4, 1, 6, 1], [3, 3, 4, 9, 2, 7, 1, 4]) == -1\nassert solution.minSum([8, 4, 1, 7, 10, 5, 8, 1, 6, 5], [1, 9, 8, 3]) == -1\nassert solution.minSum([8, 7, 2], [0, 4, 1, 0, 4, 7, 3, 9, 10, 7]) == -1\nassert solution.minSum([5, 9, 5, 10, 8, 5, 6, 7], [9, 1, 1]) == -1\nassert solution.minSum([5, 1], [7, 7, 7, 4, 5, 3, 1, 1, 6]) == -1\nassert solution.minSum([4, 2, 3, 0, 5, 9, 8], [4, 4, 3, 2, 1, 4, 8, 4, 9, 8]) == 47\nassert solution.minSum([3, 2], [9, 1, 9, 5, 10, 6, 8, 3]) == -1\nassert solution.minSum([3, 5, 10, 8, 8, 3, 10, 3], [9, 5, 10, 10, 3]) == -1\nassert solution.minSum([8, 4, 5, 1, 0, 3, 9], [8, 5, 7, 2, 1]) == -1",
  "inefficient_solution": "class Solution:\n    def minSum(self, nums1: List[int], nums2: List[int]) -> int:\n        # Create a set to store unique numbers from both arrays\n        unique_nums = set()\n        for num in nums1:\n            unique_nums.add(num)\n        for num in nums2:\n            unique_nums.add(num)\n        \n        # Create a dictionary to map each number to its frequency in both arrays\n        freq_dict = {}\n        for num in unique_nums:\n            freq_dict[num] = [nums1.count(num), nums2.count(num)]\n        \n        # Create a list to store all possible sums\n        all_sums = []\n        for num in unique_nums:\n            all_sums.append((num, num, num, num))\n        \n        # Calculate all possible sums\n        possible_sums = []\n        for i in range(len(all_sums)):\n            for j in range(len(all_sums)):\n                for k in range(len(all_sums)):\n                    for m in range(len(all_sums)):\n                        if all_sums[i][0] + all_sums[j][1] + all_sums[k][2] + all_sums[m][3] == sum(nums1) + nums1.count(0):\n                            possible_sums.append(all_sums[i][0] + all_sums[j][1] + all_sums[k][2] + all_sums[m][3])\n        \n        # Find the minimum sum that is greater than or equal to sum of nums2\n        min_sum = min([s for s in possible_sums if s >= sum(nums2) + nums2.count(0)])\n        \n        # If no such sum is found, return -1\n        if min_sum == float('inf'):\n            return -1\n        else:\n            return min_sum",
  "is_python": true
}