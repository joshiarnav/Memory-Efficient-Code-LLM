{
  "problem_idx": 2829,
  "task_name": "Determine the Minimum Sum of a k",
  "markdown_description": "\nYou are given two integers,\u00a0`n` and `k`.\n\n\nAn array of **distinct** positive integers is called a **k-avoiding** array if there does not exist any pair of distinct elements that sum to `k`.\n\n\nReturn *the **minimum** possible sum of a k-avoiding array of length* `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5, k = 4\n**Output:** 18\n**Explanation:** Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18.\nIt can be proven that there is no k-avoiding array with a sum less than 18.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, k = 6\n**Output:** 3\n**Explanation:** We can construct the array [1,2], which has a sum of 3.\nIt can be proven that there is no k-avoiding array with a sum less than 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n, k <= 50`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n        s, i = 0, 1\n        vis = set()\n        for _ in range(n):\n            while i in vis:\n                i += 1\n            vis.add(i)\n            vis.add(k - i)\n            s += i\n        return s\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumSum(self, n, k):\n        s, i = 0, 1\n        vis = set()\n        for _ in range(n):\n            while i in vis:\n                i += 1\n            vis.add(i)\n            vis.add(k - i)\n            s += i\n        return s\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n and k\n    n = random.randint(1, 51)\n    k = random.randint(1, 51)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumSum(n, k)\n\n    return n, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumSum(n, k) == expected_result\n        print(f\"assert solution.minimumSum({n}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumSum({n}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumSum(22, 28) == 357\nassert solution.minimumSum(33, 41) == 821\nassert solution.minimumSum(35, 9) == 754\nassert solution.minimumSum(22, 7) == 310\nassert solution.minimumSum(32, 50) == 696\nassert solution.minimumSum(45, 45) == 1541\nassert solution.minimumSum(39, 11) == 950\nassert solution.minimumSum(3, 44) == 6\nassert solution.minimumSum(15, 19) == 174\nassert solution.minimumSum(7, 14) == 28\nassert solution.minimumSum(5, 11) == 15\nassert solution.minimumSum(28, 21) == 586\nassert solution.minimumSum(28, 8) == 478\nassert solution.minimumSum(30, 33) == 689\nassert solution.minimumSum(25, 49) == 349\nassert solution.minimumSum(46, 12) == 1281\nassert solution.minimumSum(4, 32) == 10\nassert solution.minimumSum(43, 10) == 1098\nassert solution.minimumSum(19, 15) == 274\nassert solution.minimumSum(4, 33) == 10\nassert solution.minimumSum(29, 16) == 582\nassert solution.minimumSum(38, 46) == 1071\nassert solution.minimumSum(40, 36) == 1194\nassert solution.minimumSum(21, 32) == 306\nassert solution.minimumSum(39, 46) == 1132\nassert solution.minimumSum(51, 13) == 1596\nassert solution.minimumSum(40, 40) == 1200\nassert solution.minimumSum(44, 32) == 1410\nassert solution.minimumSum(20, 25) == 306\nassert solution.minimumSum(7, 41) == 28\nassert solution.minimumSum(15, 17) == 176\nassert solution.minimumSum(18, 44) == 171\nassert solution.minimumSum(30, 44) == 633\nassert solution.minimumSum(34, 20) == 811\nassert solution.minimumSum(6, 13) == 21\nassert solution.minimumSum(23, 39) == 352\nassert solution.minimumSum(34, 17) == 803\nassert solution.minimumSum(46, 15) == 1354\nassert solution.minimumSum(12, 2) == 78\nassert solution.minimumSum(44, 51) == 1465\nassert solution.minimumSum(29, 31) == 645\nassert solution.minimumSum(15, 19) == 174\nassert solution.minimumSum(9, 11) == 65\nassert solution.minimumSum(44, 36) == 1432\nassert solution.minimumSum(29, 6) == 487\nassert solution.minimumSum(15, 28) == 133\nassert solution.minimumSum(3, 13) == 6\nassert solution.minimumSum(45, 1) == 1035\nassert solution.minimumSum(4, 13) == 10\nassert solution.minimumSum(30, 8) == 543\nassert solution.minimumSum(14, 20) == 141\nassert solution.minimumSum(13, 49) == 91\nassert solution.minimumSum(27, 37) == 540\nassert solution.minimumSum(17, 37) == 153\nassert solution.minimumSum(11, 21) == 76\nassert solution.minimumSum(21, 16) == 322\nassert solution.minimumSum(41, 14) == 1065\nassert solution.minimumSum(14, 26) == 117\nassert solution.minimumSum(15, 45) == 120\nassert solution.minimumSum(37, 45) == 1033\nassert solution.minimumSum(38, 47) == 1086\nassert solution.minimumSum(44, 14) == 1212\nassert solution.minimumSum(45, 48) == 1518\nassert solution.minimumSum(6, 47) == 21\nassert solution.minimumSum(30, 3) == 494\nassert solution.minimumSum(50, 6) == 1369\nassert solution.minimumSum(49, 12) == 1440\nassert solution.minimumSum(36, 31) == 981\nassert solution.minimumSum(42, 46) == 1321\nassert solution.minimumSum(32, 24) == 748\nassert solution.minimumSum(27, 23) == 554\nassert solution.minimumSum(23, 40) == 333\nassert solution.minimumSum(51, 39) == 1934\nassert solution.minimumSum(43, 3) == 988\nassert solution.minimumSum(1, 33) == 1\nassert solution.minimumSum(2, 23) == 3\nassert solution.minimumSum(30, 23) == 674\nassert solution.minimumSum(8, 22) == 36\nassert solution.minimumSum(50, 47) == 1896\nassert solution.minimumSum(14, 48) == 105\nassert solution.minimumSum(43, 30) == 1338\nassert solution.minimumSum(42, 13) == 1119\nassert solution.minimumSum(32, 51) == 703\nassert solution.minimumSum(44, 43) == 1473\nassert solution.minimumSum(19, 26) == 262\nassert solution.minimumSum(1, 22) == 1\nassert solution.minimumSum(45, 3) == 1079\nassert solution.minimumSum(49, 35) == 1769\nassert solution.minimumSum(12, 50) == 78\nassert solution.minimumSum(12, 15) == 113\nassert solution.minimumSum(15, 29) == 134\nassert solution.minimumSum(7, 39) == 28\nassert solution.minimumSum(11, 11) == 96\nassert solution.minimumSum(3, 9) == 6\nassert solution.minimumSum(6, 8) == 27\nassert solution.minimumSum(46, 47) == 1610\nassert solution.minimumSum(7, 9) == 40\nassert solution.minimumSum(1, 20) == 1\nassert solution.minimumSum(25, 12) == 420\nassert solution.minimumSum(3, 45) == 6",
  "inefficient_solution": "class Solution:\n    def minimumSum(self, n: int, k: int) -> int:\n        s = []\n        for i in range(1, n * 10):\n            s.append(i)\n        s.sort()\n        vis = set()\n        total = 0\n        for _ in range(n):\n            i = 0\n            while i in vis:\n                i += 1\n            vis.add(i)\n            vis.add(k - i)\n            total += i\n            s.remove(i)\n            s.remove(k - i)\n        return total",
  "is_python": true
}