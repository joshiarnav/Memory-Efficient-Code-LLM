{
  "problem_idx": 2100,
  "task_name": "Find Good Days to Rob the Bank",
  "markdown_description": "\nYou and a gang of thieves are planning on robbing a bank. You are given a **0-indexed** integer array `security`, where `security[i]` is the number of guards on duty on the `ith` day. The days are numbered starting from `0`. You are also given an integer `time`.\n\n\nThe `ith` day is a good day to rob the bank if:\n\n\n* There are at least `time` days before and after the `ith` day,\n* The number of guards at the bank for the `time` days **before** `i` are **non-increasing**, and\n* The number of guards at the bank for the `time` days **after** `i` are **non-decreasing**.\n\n\nMore formally, this means day `i` is a good day to rob the bank if and only if `security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time]`.\n\n\nReturn *a list of **all** days **(0-indexed)** that are good days to rob the bank*. *The order that the days are returned in does**not** matter.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** security = [5,3,3,3,5,6,2], time = 2\n**Output:** [2,3]\n**Explanation:**\nOn day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4].\nOn day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5].\nNo other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** security = [1,1,1,1,1], time = 0\n**Output:** [0,1,2,3,4]\n**Explanation:**\nSince time equals 0, every day is a good day to rob the bank, so return every day.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** security = [1,2,3,4,5,6], time = 2\n**Output:** []\n**Explanation:**\nNo day has 2 days before it that have a non-increasing number of guards.\nThus, no day is a good day to rob the bank, so return an empty list.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= security.length <= 105`\n* `0 <= security[i], time <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:\n        n = len(security)\n        if n <= time * 2:\n            return []\n        left, right = [0] * n, [0] * n\n        for i in range(1, n):\n            if security[i] <= security[i - 1]:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if security[i] <= security[i + 1]:\n                right[i] = right[i + 1] + 1\n        return [i for i in range(n) if time <= min(left[i], right[i])]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:\n        n = len(security)\n        if n <= time * 2:\n            return []\n        left, right = [0] * n, [0] * n\n        for i in range(1, n):\n            if security[i] <= security[i - 1]:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if security[i] <= security[i + 1]:\n                right[i] = right[i + 1] + 1\n        return [i for i in range(n) if time <= min(left[i], right[i])]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random security list\n    security = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random time\n    time = random.randint(1, 201)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.goodDaysToRobBank(security, time)\n\n    return security, time, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        security, time, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.goodDaysToRobBank(security, time) == expected_result\n        print(f\"assert solution.goodDaysToRobBank({security}, {time}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.goodDaysToRobBank({security}, {time}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.goodDaysToRobBank([7, 80, 45, 89, 41, 14, 84, 6], 15) == []\nassert solution.goodDaysToRobBank([28, 39, 32, 1, 17, 75, 68], 154) == []\nassert solution.goodDaysToRobBank([56, 93, 33, 59, 91, 67, 35, 52, 19], 60) == []\nassert solution.goodDaysToRobBank([43, 61, 39, 30, 63, 60, 51, 76, 82], 104) == []\nassert solution.goodDaysToRobBank([92, 95, 38, 54], 175) == []\nassert solution.goodDaysToRobBank([52, 74, 5, 79, 61], 61) == []\nassert solution.goodDaysToRobBank([24, 52, 29, 3, 73, 80, 67, 77, 60], 72) == []\nassert solution.goodDaysToRobBank([43, 62, 64, 11, 18, 71], 143) == []\nassert solution.goodDaysToRobBank([100, 63, 67, 6, 74, 25, 53], 153) == []\nassert solution.goodDaysToRobBank([95, 23, 48, 70, 82, 18, 13, 86, 100, 84], 128) == []\nassert solution.goodDaysToRobBank([5, 4, 49, 13, 56, 15], 55) == []\nassert solution.goodDaysToRobBank([36, 19, 23, 39], 154) == []\nassert solution.goodDaysToRobBank([72, 5, 17], 194) == []\nassert solution.goodDaysToRobBank([7, 29, 72, 5, 4], 26) == []\nassert solution.goodDaysToRobBank([33, 72, 90, 36, 50, 51], 44) == []\nassert solution.goodDaysToRobBank([56, 86, 63, 49, 83], 40) == []\nassert solution.goodDaysToRobBank([50, 49, 95, 31, 14, 44, 72, 38], 75) == []\nassert solution.goodDaysToRobBank([8, 67, 70, 6, 87, 73, 7, 48, 45], 49) == []\nassert solution.goodDaysToRobBank([52, 34, 90, 42, 25, 30, 93], 59) == []\nassert solution.goodDaysToRobBank([91, 89], 40) == []\nassert solution.goodDaysToRobBank([68, 57, 8, 77, 39, 71, 22, 12, 11, 83], 71) == []\nassert solution.goodDaysToRobBank([34, 76, 64, 10, 24, 87, 50, 74, 81, 91], 104) == []\nassert solution.goodDaysToRobBank([97, 79, 31], 94) == []\nassert solution.goodDaysToRobBank([74, 81, 70, 50, 41, 8, 89, 88, 21, 33], 31) == []\nassert solution.goodDaysToRobBank([8, 11, 86, 72, 79, 96], 91) == []\nassert solution.goodDaysToRobBank([26, 77, 79, 10, 30, 31, 1, 29], 57) == []\nassert solution.goodDaysToRobBank([77, 4, 43, 96, 9, 72, 24, 85, 21], 37) == []\nassert solution.goodDaysToRobBank([84, 61, 82, 45, 21, 70, 83, 92], 174) == []\nassert solution.goodDaysToRobBank([24, 12, 96, 39, 92, 34, 33, 82, 16], 181) == []\nassert solution.goodDaysToRobBank([82, 90, 97, 48, 29, 42, 16], 188) == []\nassert solution.goodDaysToRobBank([34, 20, 8, 18, 14, 97], 34) == []\nassert solution.goodDaysToRobBank([64, 16, 50, 51, 69], 20) == []\nassert solution.goodDaysToRobBank([51, 48, 65, 9, 90], 184) == []\nassert solution.goodDaysToRobBank([6, 99, 15, 41], 83) == []\nassert solution.goodDaysToRobBank([39, 28, 22, 26, 89, 38], 199) == []\nassert solution.goodDaysToRobBank([35, 68, 33, 67], 191) == []\nassert solution.goodDaysToRobBank([98, 48, 39, 87, 21, 79], 38) == []\nassert solution.goodDaysToRobBank([32, 71, 64, 24, 41, 7, 100, 27, 84], 52) == []\nassert solution.goodDaysToRobBank([77, 28, 5, 88], 169) == []\nassert solution.goodDaysToRobBank([76, 94, 2, 88, 54, 56], 29) == []\nassert solution.goodDaysToRobBank([70, 40, 39, 21, 93, 91, 3, 58, 23], 128) == []\nassert solution.goodDaysToRobBank([28, 84, 30], 81) == []\nassert solution.goodDaysToRobBank([77, 9], 83) == []\nassert solution.goodDaysToRobBank([46, 13, 3], 92) == []\nassert solution.goodDaysToRobBank([91, 86, 52, 93, 69], 164) == []\nassert solution.goodDaysToRobBank([51, 4], 8) == []\nassert solution.goodDaysToRobBank([21, 68], 114) == []\nassert solution.goodDaysToRobBank([74, 46, 13, 64, 9, 26], 98) == []\nassert solution.goodDaysToRobBank([63, 95, 65, 26, 42, 90, 77, 33, 50], 36) == []\nassert solution.goodDaysToRobBank([95, 59, 57, 98, 13, 76], 185) == []\nassert solution.goodDaysToRobBank([43, 87, 46, 68, 83, 74, 97, 17], 78) == []\nassert solution.goodDaysToRobBank([37, 35, 17, 86, 99, 52, 92, 28], 17) == []\nassert solution.goodDaysToRobBank([17, 22, 90, 92, 69], 91) == []\nassert solution.goodDaysToRobBank([17, 10], 163) == []\nassert solution.goodDaysToRobBank([38, 18, 51, 63], 129) == []\nassert solution.goodDaysToRobBank([85, 21, 32, 42, 66, 96, 27, 78], 30) == []\nassert solution.goodDaysToRobBank([9, 36, 27, 29, 96, 32, 75, 38, 90, 91], 151) == []\nassert solution.goodDaysToRobBank([97, 57, 32], 161) == []\nassert solution.goodDaysToRobBank([91, 99, 9, 72, 84, 88], 161) == []\nassert solution.goodDaysToRobBank([71, 92, 76, 12, 26], 86) == []\nassert solution.goodDaysToRobBank([48, 74, 43], 35) == []\nassert solution.goodDaysToRobBank([8, 16, 66, 13, 74, 34, 9], 57) == []\nassert solution.goodDaysToRobBank([57, 91], 121) == []\nassert solution.goodDaysToRobBank([98, 54, 77, 34, 44, 57], 180) == []\nassert solution.goodDaysToRobBank([53, 24, 21, 81, 32, 46, 30, 72, 98], 178) == []\nassert solution.goodDaysToRobBank([16, 9, 59, 93, 32, 52, 71], 41) == []\nassert solution.goodDaysToRobBank([31, 40, 54], 161) == []\nassert solution.goodDaysToRobBank([30, 34, 6, 64, 55, 63], 186) == []\nassert solution.goodDaysToRobBank([46, 73, 59, 2, 51], 93) == []\nassert solution.goodDaysToRobBank([73, 83, 79], 105) == []\nassert solution.goodDaysToRobBank([15, 96, 78], 124) == []\nassert solution.goodDaysToRobBank([57, 68, 63, 37, 56, 95], 190) == []\nassert solution.goodDaysToRobBank([66, 57, 26, 86, 17, 94, 31, 72, 61, 71], 51) == []\nassert solution.goodDaysToRobBank([23, 15, 37, 1, 2, 95], 5) == []\nassert solution.goodDaysToRobBank([58, 51, 31, 17, 82, 48, 42, 46, 78], 195) == []\nassert solution.goodDaysToRobBank([84, 3, 7, 10, 59, 73, 72, 20, 86], 101) == []\nassert solution.goodDaysToRobBank([64, 33, 25, 97], 58) == []\nassert solution.goodDaysToRobBank([1, 68], 97) == []\nassert solution.goodDaysToRobBank([16, 88, 81, 40], 160) == []\nassert solution.goodDaysToRobBank([51, 14, 40, 63, 5, 45, 74, 61], 16) == []\nassert solution.goodDaysToRobBank([6, 61, 59, 65, 35, 26, 20, 94, 85, 100], 40) == []\nassert solution.goodDaysToRobBank([15, 66, 59, 4], 63) == []\nassert solution.goodDaysToRobBank([97, 90, 21], 127) == []\nassert solution.goodDaysToRobBank([38, 44, 32, 67, 1], 111) == []\nassert solution.goodDaysToRobBank([15, 24, 100, 81, 65], 91) == []\nassert solution.goodDaysToRobBank([20, 45, 5, 84, 17, 14, 25, 32, 69, 1], 137) == []\nassert solution.goodDaysToRobBank([51, 88, 17, 77, 26, 23], 198) == []\nassert solution.goodDaysToRobBank([98, 24, 1, 90, 81, 44, 17, 96], 104) == []\nassert solution.goodDaysToRobBank([89, 78, 83], 2) == []\nassert solution.goodDaysToRobBank([47, 60, 67, 82, 91, 10, 6, 100, 22, 65], 178) == []\nassert solution.goodDaysToRobBank([78, 15, 79, 26, 31, 69, 34, 40, 95], 9) == []\nassert solution.goodDaysToRobBank([94, 47, 22], 55) == []\nassert solution.goodDaysToRobBank([28, 56, 92, 95, 22, 43, 89, 47], 75) == []\nassert solution.goodDaysToRobBank([51, 53, 90, 8, 37], 193) == []\nassert solution.goodDaysToRobBank([89, 73, 49, 94, 74], 161) == []\nassert solution.goodDaysToRobBank([21, 36, 78, 96, 4, 82, 11], 81) == []\nassert solution.goodDaysToRobBank([18, 34, 71, 98, 14, 86, 3], 24) == []\nassert solution.goodDaysToRobBank([64, 97, 61, 55, 53, 48, 7], 46) == []\nassert solution.goodDaysToRobBank([67, 75, 70], 154) == []\nassert solution.goodDaysToRobBank([33, 59, 24, 6, 78, 36, 89, 28, 50, 86], 26) == []",
  "inefficient_solution": "class Solution:\n    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:\n        n = len(security)\n        if n <= time * 2:\n            return []\n        \n        max_security = []\n        for i in range(n):\n            max_day = max(security[max(0, i - time) : i + 1])\n            max_security.append([max_day, i])\n        \n        max_security.sort(key=lambda x: x[0])\n        \n        max_security_dict = {}\n        for i in range(len(max_security) - 1, -1, -1):\n            max_security_dict[max_security[i][1]] = i\n        \n        left, right = [0] * n, [0] * n\n        for i in range(1, n):\n            if security[i] <= security[i - 1]:\n                left[i] = left[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if security[i] <= security[i + 1]:\n                right[i] = right[i + 1] + 1\n        \n        result = []\n        for i in range(n):\n            if time <= min(left[i], right[i]):\n                days = []\n                for j in range(max(0, i - time), i + 1):\n                    if security[j] <= security[i]:\n                        days.append(j)\n                for j in range(i, min(n, i + time + 1)):\n                    if security[j] >= security[i]:\n                        days.append(j)\n                if len(days) == time * 2 + 1:\n                    result.append(i)\n        \n        return result",
  "is_python": true
}