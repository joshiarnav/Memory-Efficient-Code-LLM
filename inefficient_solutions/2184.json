{
  "problem_idx": 2184,
  "task_name": "Number of Ways to Build Sturdy Brick Wall",
  "markdown_description": "\nYou are given integers `height` and `width` which specify the dimensions of a brick wall you are building. You are also given a **0-indexed** array of **unique** integers `bricks`, where the `ith` brick has a height of `1` and a width of `bricks[i]`. You have an **infinite** supply of each type of brick and bricks may **not** be rotated.\n\n\nEach row in the wall must be exactly `width` units long. For the wall to be **sturdy**, adjacent rows in the wall should **not** join bricks at the same location, except at the ends of the wall.\n\n\nReturn *the number of ways to build a **sturdy** wall.* Since the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2184.Number%20of%20Ways%20to%20Build%20Sturdy%20Brick%20Wall/images/image-20220220190749-1.png)\n\n```\n\n**Input:** height = 2, width = 3, bricks = [1,2]\n**Output:** 2\n**Explanation:**\nThe first two walls in the diagram show the only two ways to build a sturdy brick wall.\nNote that the third wall in the diagram is not sturdy because adjacent rows join bricks 2 units from the left.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** height = 1, width = 1, bricks = [5]\n**Output:** 0\n**Explanation:**\nThere are no ways to build a sturdy wall because the only type of brick we have is longer than the width of the wall.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= height <= 100`\n* `1 <= width <= 10`\n* `1 <= bricks.length <= 10`\n* `1 <= bricks[i] <= 10`\n* All the values of `bricks` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def buildWall(self, height: int, width: int, bricks: List[int]) -> int:\n        def dfs(v):\n            if v > width:\n                return\n            if v == width:\n                s.append(t[:])\n                return\n            for x in bricks:\n                t.append(x)\n                dfs(v + x)\n                t.pop()\n\n        def check(a, b):\n            s1, s2 = a[0], b[0]\n            i = j = 1\n            while i < len(a) and j < len(b):\n                if s1 == s2:\n                    return False\n                if s1 < s2:\n                    s1 += a[i]\n                    i += 1\n                else:\n                    s2 += b[j]\n                    j += 1\n            return True\n\n        mod = 10**9 + 7\n        s = []\n        t = []\n        dfs(0)\n        g = defaultdict(list)\n        n = len(s)\n        for i in range(n):\n            if check(s[i], s[i]):\n                g[i].append(i)\n            for j in range(i + 1, n):\n                if check(s[i], s[j]):\n                    g[i].append(j)\n                    g[j].append(i)\n        dp = [[0] * n for _ in range(height)]\n        for j in range(n):\n            dp[0][j] = 1\n        for i in range(1, height):\n            for j in range(n):\n                for k in g[j]:\n                    dp[i][j] += dp[i - 1][k]\n                    dp[i][j] %= mod\n        return sum(dp[-1]) % mod\n",
  "test_case_generator": "\nfrom typing import List\nfrom collections import defaultdict\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random height and width\n    height = random.randint(1, 10)\n    width = random.randint(1, 10)\n\n    # Generate random bricks list\n    bricks = random.sample(range(1, 11), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.buildWall(height, width, bricks)\n\n    return height, width, bricks, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        height, width, bricks, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.buildWall(height, width, bricks) == expected_result\n        print(f\"assert solution.buildWall({height}, {width}, {bricks}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.buildWall({height}, {width}, {bricks}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.buildWall(5, 7, [1, 9, 6]) == 2\nassert solution.buildWall(1, 5, [10, 9, 3, 4, 2]) == 2\nassert solution.buildWall(4, 8, [6, 7, 10, 5, 8, 3, 4, 2, 9]) == 6743\nassert solution.buildWall(4, 2, [5, 8, 1, 7, 9, 6, 10, 3]) == 0\nassert solution.buildWall(2, 3, [5, 8, 7, 4, 9, 2, 3, 1, 6, 10]) == 9\nassert solution.buildWall(10, 7, [5]) == 0\nassert solution.buildWall(5, 10, [6, 10, 2, 4, 1, 9, 7, 8, 3, 5]) == 604499303\nassert solution.buildWall(6, 5, [1, 4, 8, 5]) == 441\nassert solution.buildWall(4, 4, [9, 2, 6, 1, 4, 5, 3, 10]) == 512\nassert solution.buildWall(7, 10, [9]) == 0\nassert solution.buildWall(4, 6, [10, 5, 1, 2, 9, 6, 4, 3, 7, 8]) == 32768\nassert solution.buildWall(2, 9, [4, 9, 7, 5, 1, 2, 3, 8, 10]) == 5087\nassert solution.buildWall(2, 8, [3, 4, 9, 5, 7, 10, 2, 8, 6, 1]) == 2187\nassert solution.buildWall(8, 4, [4, 7, 5, 3, 10]) == 1\nassert solution.buildWall(2, 9, [9, 6, 7, 10, 5, 1]) == 45\nassert solution.buildWall(10, 2, [8, 4, 1, 6, 9, 2]) == 144\nassert solution.buildWall(1, 9, [2, 5, 3, 7, 4, 9, 1, 6, 8]) == 256\nassert solution.buildWall(1, 6, [8, 4]) == 0\nassert solution.buildWall(5, 6, [5, 4, 9, 10, 7, 8]) == 0\nassert solution.buildWall(3, 1, [6]) == 0\nassert solution.buildWall(3, 10, [10, 7, 4, 8]) == 1\nassert solution.buildWall(7, 2, [1, 2, 9, 10, 5, 8, 4]) == 34\nassert solution.buildWall(6, 3, [2, 1, 6, 7, 8, 5, 3, 10, 9, 4]) == 441\nassert solution.buildWall(4, 6, [3, 7]) == 0\nassert solution.buildWall(10, 3, [1, 4, 3, 8, 6]) == 144\nassert solution.buildWall(6, 7, [2, 3, 10, 7, 8, 4, 6]) == 6419\nassert solution.buildWall(10, 1, [4]) == 0\nassert solution.buildWall(4, 8, [10, 6, 9, 7, 4, 8, 3, 1, 2]) == 963384\nassert solution.buildWall(10, 10, [4, 10, 6, 1, 5, 2, 7]) == 510130812\nassert solution.buildWall(5, 3, [10, 1, 7, 3, 5, 2]) == 169\nassert solution.buildWall(5, 8, [5, 8, 4, 2, 9, 7, 1]) == 2451825\nassert solution.buildWall(8, 4, [6, 5, 1]) == 0\nassert solution.buildWall(4, 5, [10]) == 0\nassert solution.buildWall(2, 1, [1, 10, 6, 9, 4]) == 1\nassert solution.buildWall(5, 6, [3, 2]) == 2\nassert solution.buildWall(2, 4, [8, 7, 1, 2, 3, 5, 4, 6]) == 27\nassert solution.buildWall(1, 9, [2, 8, 5, 3, 7, 10, 9, 6, 1, 4]) == 256\nassert solution.buildWall(5, 1, [3, 6, 9, 4, 7, 2, 10, 1, 5]) == 1\nassert solution.buildWall(7, 3, [2, 7, 3, 6, 10, 1]) == 1156\nassert solution.buildWall(9, 3, [3, 4, 5, 8, 10, 7]) == 1\nassert solution.buildWall(8, 6, [10, 4, 5, 1]) == 512\nassert solution.buildWall(10, 3, [5, 10, 7, 4, 6]) == 0\nassert solution.buildWall(6, 7, [5, 1, 2, 3, 10, 4, 9, 6, 8, 7]) == 85766121\nassert solution.buildWall(3, 5, [7, 9, 8]) == 0\nassert solution.buildWall(8, 3, [3, 2, 10, 9]) == 1\nassert solution.buildWall(8, 9, [1, 3]) == 164\nassert solution.buildWall(6, 2, [3, 7, 2, 1, 4, 9]) == 21\nassert solution.buildWall(7, 1, [4, 2, 9, 6, 7, 8, 5, 3, 10, 1]) == 1\nassert solution.buildWall(6, 7, [3, 7, 2, 1, 5, 6]) == 15973913\nassert solution.buildWall(1, 2, [3, 10, 1, 8, 9, 5, 7]) == 1\nassert solution.buildWall(6, 2, [5, 9, 1, 3]) == 0\nassert solution.buildWall(10, 1, [5, 1, 8, 6, 4, 3, 10, 9]) == 1\nassert solution.buildWall(4, 7, [3]) == 0\nassert solution.buildWall(7, 4, [2, 3, 10, 8, 7]) == 0\nassert solution.buildWall(9, 3, [9, 4, 1, 2, 6, 3, 10]) == 7921\nassert solution.buildWall(7, 1, [7, 1]) == 1\nassert solution.buildWall(3, 2, [3, 4, 5, 9, 1, 7]) == 0\nassert solution.buildWall(8, 4, [8, 1, 10, 9, 2]) == 2\nassert solution.buildWall(3, 8, [2, 5]) == 0\nassert solution.buildWall(1, 8, [1, 6, 4, 3, 10]) == 28\nassert solution.buildWall(6, 8, [1, 8, 9, 2, 7, 3, 10, 6]) == 75703695\nassert solution.buildWall(1, 8, [6, 5, 2, 4]) == 7\nassert solution.buildWall(8, 8, [1]) == 0\nassert solution.buildWall(4, 4, [4, 10, 3, 8, 9, 5, 7, 6, 1, 2]) == 512\nassert solution.buildWall(8, 1, [3, 4, 7, 1, 2, 6, 5, 10, 8, 9]) == 1\nassert solution.buildWall(8, 5, [6, 2, 9, 4, 5, 7, 3, 8]) == 1393\nassert solution.buildWall(2, 7, [7, 9, 1]) == 3\nassert solution.buildWall(10, 8, [4, 8, 1, 9]) == 887040\nassert solution.buildWall(2, 2, [10, 8]) == 0\nassert solution.buildWall(7, 10, [9, 7, 4, 3]) == 256\nassert solution.buildWall(2, 8, [8, 5, 2, 6, 10, 3, 1, 4, 7, 9]) == 2187\nassert solution.buildWall(2, 8, [10, 5, 9, 2, 1, 8, 7, 3, 4, 6]) == 2187\nassert solution.buildWall(8, 2, [7, 5, 1, 2, 4, 6]) == 55\nassert solution.buildWall(5, 8, [10, 3, 4, 7]) == 0\nassert solution.buildWall(8, 7, [1, 9, 8]) == 0\nassert solution.buildWall(4, 1, [5, 10, 6, 9, 2, 1, 7, 3, 8]) == 1\nassert solution.buildWall(4, 2, [7, 8, 1, 3, 4, 5, 9]) == 0\nassert solution.buildWall(10, 10, [4, 6]) == 2\nassert solution.buildWall(7, 6, [7, 10, 8, 9, 4]) == 0\nassert solution.buildWall(3, 5, [6, 7, 3, 5, 1, 2, 9, 4, 8, 10]) == 625\nassert solution.buildWall(8, 6, [8]) == 0\nassert solution.buildWall(2, 7, [4, 6, 9, 7, 8]) == 1\nassert solution.buildWall(3, 5, [2, 4, 1, 5, 7, 6, 8, 3]) == 625\nassert solution.buildWall(2, 7, [3, 4, 7, 9, 6, 2]) == 23\nassert solution.buildWall(6, 8, [1, 4, 6, 10, 9, 5, 7]) == 39744\nassert solution.buildWall(5, 6, [10, 9, 8, 6, 1, 7, 3, 5]) == 3013\nassert solution.buildWall(3, 7, [10, 2, 8, 5, 1, 6, 4]) == 1960\nassert solution.buildWall(3, 4, [2]) == 0\nassert solution.buildWall(5, 5, [5, 10]) == 1\nassert solution.buildWall(1, 7, [10, 3, 6, 1, 8, 4, 2]) == 58\nassert solution.buildWall(8, 10, [9, 5, 6, 1, 8]) == 1299650\nassert solution.buildWall(5, 9, [6, 5, 8, 9, 3, 4, 1]) == 6245619\nassert solution.buildWall(7, 4, [3, 1, 2, 6, 7, 8, 4, 5]) == 39304\nassert solution.buildWall(5, 4, [6]) == 0\nassert solution.buildWall(8, 6, [3, 2, 4, 10, 9, 1, 7, 5, 6, 8]) == 503284375\nassert solution.buildWall(5, 6, [4]) == 0\nassert solution.buildWall(7, 8, [7, 6, 9, 3]) == 0\nassert solution.buildWall(9, 10, [5, 3, 7, 2, 1, 6, 10, 9, 8, 4]) == 254990402\nassert solution.buildWall(3, 8, [4, 7, 10, 3, 2, 5, 6, 8, 9, 1]) == 78125\nassert solution.buildWall(4, 6, [4, 8, 9]) == 0",
  "inefficient_solution": "class Solution:\n    def buildWall(self, height: int, width: int, bricks: List[int]) -> int:\n        def dfs(v):\n            if v > width:\n                return\n            if v == width:\n                s.append(t[:])\n                return\n            for x in bricks:\n                t.append(x)\n                dfs(v + x)\n                t.pop()\n                t.append(x)\n                dfs(v + x)\n\n        def check(a, b):\n            s1, s2 = a[0], b[0]\n            i = j = 1\n            while i < len(a) and j < len(b):\n                if s1 == s2:\n                    return False\n                if s1 < s2:\n                    s1 += a[i]\n                    i += 1\n                else:\n                    s2 += b[j]\n                    j += 1\n            return True\n\n        mod = 10**9 + 7\n        s = []\n        t = []\n        dfs(0)\n        g = defaultdict(list)\n        n = len(s)\n        for i in range(n):\n            if check(s[i], s[i]):\n                g[i].append(i)\n            for j in range(i + 1, n):\n                if check(s[i], s[j]):\n                    g[i].append(j)\n                    g[j].append(i)\n                    g[j].append(j)\n                    g[j].append(j)\n                    g[j].append(j)\n                    g[j].append(j)\n                    g[i].append(i)\n                    g[i].append(i)\n                    g[i].append(i)\n                    g[i].append(i)\n                    g[i].append(i)\n        dp = [[0] * (n * 100) for _ in range(height * 100)]\n        for j in range(n * 100):\n            dp[0][j] = 1\n        for i in range(1, height * 100):\n            for j in range(n * 100):\n                for k in g[j]:\n                    dp[i][j] += dp[i - 1][k]\n                    dp[i][j] %= mod\n        return sum(dp[-1]) % mod",
  "is_python": true
}