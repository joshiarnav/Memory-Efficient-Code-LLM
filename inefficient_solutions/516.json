{
  "problem_idx": 516,
  "task_name": "Longest Palindromic Subsequence",
  "markdown_description": "\nGiven a string `s`, find *the longest palindromic **subsequence**'s length in* `s`.\n\n\nA **subsequence** is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bbbab\"\n**Output:** 4\n**Explanation:** One possible longest palindromic subsequence is \"bbbb\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"cbbd\"\n**Output:** 2\n**Explanation:** One possible longest palindromic subsequence is \"bb\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s` consists only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for j in range(1, n):\n            for i in range(j - 1, -1, -1):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for j in range(1, n):\n            for i in range(j - 1, -1, -1):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][-1]\n\ndef generate_test_case():\n    solution = Solution()\n    s = ''\n    for _ in range(random.randint(1, 11)):\n        s += random.choice('abcdefghijklmnopqrstuvwxyz')\n    expected_result = solution.longestPalindromeSubseq(s)\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestPalindromeSubseq(s) == expected_result\n        print(f'assert solution.longestPalindromeSubseq(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.longestPalindromeSubseq(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestPalindromeSubseq(\"roor\") == 4\nassert solution.longestPalindromeSubseq(\"cly\") == 1\nassert solution.longestPalindromeSubseq(\"ylutdqcb\") == 1\nassert solution.longestPalindromeSubseq(\"pi\") == 1\nassert solution.longestPalindromeSubseq(\"xnuxqsldeu\") == 3\nassert solution.longestPalindromeSubseq(\"alytsg\") == 1\nassert solution.longestPalindromeSubseq(\"ln\") == 1\nassert solution.longestPalindromeSubseq(\"jklnndc\") == 2\nassert solution.longestPalindromeSubseq(\"qrwzigylxo\") == 1\nassert solution.longestPalindromeSubseq(\"jlnmrebc\") == 1\nassert solution.longestPalindromeSubseq(\"wzyvixab\") == 1\nassert solution.longestPalindromeSubseq(\"i\") == 1\nassert solution.longestPalindromeSubseq(\"hjorf\") == 1\nassert solution.longestPalindromeSubseq(\"tzmzs\") == 3\nassert solution.longestPalindromeSubseq(\"a\") == 1\nassert solution.longestPalindromeSubseq(\"tejwomcuq\") == 1\nassert solution.longestPalindromeSubseq(\"uejmnyo\") == 1\nassert solution.longestPalindromeSubseq(\"frnmtlvwz\") == 1\nassert solution.longestPalindromeSubseq(\"o\") == 1\nassert solution.longestPalindromeSubseq(\"chhvazb\") == 2\nassert solution.longestPalindromeSubseq(\"gemrw\") == 1\nassert solution.longestPalindromeSubseq(\"ffqmpeipbyl\") == 3\nassert solution.longestPalindromeSubseq(\"kcpiswhi\") == 3\nassert solution.longestPalindromeSubseq(\"abulnr\") == 1\nassert solution.longestPalindromeSubseq(\"zvyywymrk\") == 3\nassert solution.longestPalindromeSubseq(\"yrehtiojzt\") == 3\nassert solution.longestPalindromeSubseq(\"pyf\") == 1\nassert solution.longestPalindromeSubseq(\"iqzes\") == 1\nassert solution.longestPalindromeSubseq(\"mfueqxcig\") == 1\nassert solution.longestPalindromeSubseq(\"fzmxdpsaxzp\") == 5\nassert solution.longestPalindromeSubseq(\"xvrn\") == 1\nassert solution.longestPalindromeSubseq(\"emifxkcxdyc\") == 3\nassert solution.longestPalindromeSubseq(\"vctioe\") == 1\nassert solution.longestPalindromeSubseq(\"mgsj\") == 1\nassert solution.longestPalindromeSubseq(\"abgakrccjg\") == 4\nassert solution.longestPalindromeSubseq(\"ojqtlrpqam\") == 3\nassert solution.longestPalindromeSubseq(\"gssn\") == 2\nassert solution.longestPalindromeSubseq(\"ncjb\") == 1\nassert solution.longestPalindromeSubseq(\"n\") == 1\nassert solution.longestPalindromeSubseq(\"kokbstmcbvg\") == 3\nassert solution.longestPalindromeSubseq(\"evxssbxdqk\") == 4\nassert solution.longestPalindromeSubseq(\"oqlkpjnt\") == 1\nassert solution.longestPalindromeSubseq(\"gyrnfvzxi\") == 1\nassert solution.longestPalindromeSubseq(\"foatmvsakb\") == 3\nassert solution.longestPalindromeSubseq(\"htmrzbb\") == 2\nassert solution.longestPalindromeSubseq(\"s\") == 1\nassert solution.longestPalindromeSubseq(\"cl\") == 1\nassert solution.longestPalindromeSubseq(\"zl\") == 1\nassert solution.longestPalindromeSubseq(\"ecsvztcfx\") == 3\nassert solution.longestPalindromeSubseq(\"sxeem\") == 2\nassert solution.longestPalindromeSubseq(\"tyszqjhzq\") == 3\nassert solution.longestPalindromeSubseq(\"lprdmtahmrz\") == 5\nassert solution.longestPalindromeSubseq(\"gqq\") == 2\nassert solution.longestPalindromeSubseq(\"dguivp\") == 1\nassert solution.longestPalindromeSubseq(\"fsqnlrflf\") == 5\nassert solution.longestPalindromeSubseq(\"qmctcxbn\") == 3\nassert solution.longestPalindromeSubseq(\"lira\") == 1\nassert solution.longestPalindromeSubseq(\"mruhuzsbuy\") == 3\nassert solution.longestPalindromeSubseq(\"hfb\") == 1\nassert solution.longestPalindromeSubseq(\"exio\") == 1\nassert solution.longestPalindromeSubseq(\"q\") == 1\nassert solution.longestPalindromeSubseq(\"vtcbs\") == 1\nassert solution.longestPalindromeSubseq(\"vkwptgxjn\") == 1\nassert solution.longestPalindromeSubseq(\"vffojdrby\") == 2\nassert solution.longestPalindromeSubseq(\"wxalxacnsdf\") == 3\nassert solution.longestPalindromeSubseq(\"ybaipcjimxl\") == 3\nassert solution.longestPalindromeSubseq(\"qlu\") == 1\nassert solution.longestPalindromeSubseq(\"rryejhz\") == 2\nassert solution.longestPalindromeSubseq(\"uhazjn\") == 1\nassert solution.longestPalindromeSubseq(\"sgn\") == 1\nassert solution.longestPalindromeSubseq(\"ou\") == 1\nassert solution.longestPalindromeSubseq(\"zmlajc\") == 1\nassert solution.longestPalindromeSubseq(\"qcv\") == 1\nassert solution.longestPalindromeSubseq(\"hnlwx\") == 1\nassert solution.longestPalindromeSubseq(\"kpptkudpi\") == 4\nassert solution.longestPalindromeSubseq(\"gjzaebf\") == 1\nassert solution.longestPalindromeSubseq(\"qfwlikurefj\") == 3\nassert solution.longestPalindromeSubseq(\"gqs\") == 1\nassert solution.longestPalindromeSubseq(\"eofqv\") == 1\nassert solution.longestPalindromeSubseq(\"fmbmv\") == 3\nassert solution.longestPalindromeSubseq(\"dmve\") == 1\nassert solution.longestPalindromeSubseq(\"mbmgver\") == 3\nassert solution.longestPalindromeSubseq(\"qiurtzhal\") == 1\nassert solution.longestPalindromeSubseq(\"o\") == 1\nassert solution.longestPalindromeSubseq(\"znfoe\") == 1\nassert solution.longestPalindromeSubseq(\"gftrqwutdo\") == 3\nassert solution.longestPalindromeSubseq(\"b\") == 1\nassert solution.longestPalindromeSubseq(\"zfstjjxsxlq\") == 4\nassert solution.longestPalindromeSubseq(\"vejnrobmz\") == 1\nassert solution.longestPalindromeSubseq(\"fwa\") == 1\nassert solution.longestPalindromeSubseq(\"c\") == 1\nassert solution.longestPalindromeSubseq(\"qdq\") == 3\nassert solution.longestPalindromeSubseq(\"ddisk\") == 2\nassert solution.longestPalindromeSubseq(\"aqpf\") == 1\nassert solution.longestPalindromeSubseq(\"qychjzwe\") == 1\nassert solution.longestPalindromeSubseq(\"tvxipcqq\") == 2\nassert solution.longestPalindromeSubseq(\"r\") == 1\nassert solution.longestPalindromeSubseq(\"cvntzzyxk\") == 2\nassert solution.longestPalindromeSubseq(\"orfpwkfpm\") == 3\nassert solution.longestPalindromeSubseq(\"xsdpjqqt\") == 2",
  "inefficient_solution": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(2**10)]  # allocate 1KB of memory per character\n        for i in range(n):\n            dp[1][i] = 1\n            for j in range(n):\n                dp[1][j] = dp[1][j] * 3  # multiply by 3 for no reason\n        for j in range(1, n):\n            for i in range(j - 1, -1, -1):\n                temp_dp = [[0] * n for _ in range(2**10)]  # allocate another 1KB of memory per character\n                for k in range(n):\n                    temp_dp[k][k] = 1\n                for k in range(j - 1, -1, -1):\n                    temp_dp[k][j] = temp_dp[k + 1][j - 1] + 2\n                for k in range(j - 1, -1, -1):\n                    temp_dp[k][j] = temp_dp[k][j] * 2  # multiply by 2 for no reason\n                for k in range(j - 1, -1, -1):\n                    if s[i] == s[j]:\n                        dp[1][k] = temp_dp[k + 1][j - 1] + 2\n                    else:\n                        dp[1][k] = max(temp_dp[k + 1][j], temp_dp[k][j - 1])\n                for k in range(j - 1, -1, -1):\n                    dp[1][k] = dp[1][k] * 5  # multiply by 5 for no reason\n        return dp[1][-1] * 7  # multiply by 7 for no reason",
  "is_python": true
}