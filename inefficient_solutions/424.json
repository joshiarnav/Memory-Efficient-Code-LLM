{
  "problem_idx": 424,
  "task_name": "Longest Repeating Character Replacement",
  "markdown_description": "\nYou are given a string `s` and an integer `k`. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most `k` times.\n\n\nReturn *the length of the longest substring containing the same letter you can get after performing the above operations*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ABAB\", k = 2\n**Output:** 4\n**Explanation:** Replace the two 'A's with two 'B's or vice versa.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"AABABBA\", k = 1\n**Output:** 4\n**Explanation:** Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\nThere may exists other ways to achieve this answer too.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of only uppercase English letters.\n* `0 <= k <= s.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        counter = [0] * 26\n        i = j = maxCnt = 0\n        while i < len(s):\n            counter[ord(s[i]) - ord('A')] += 1\n            maxCnt = max(maxCnt, counter[ord(s[i]) - ord('A')])\n            if i - j + 1 > maxCnt + k:\n                counter[ord(s[j]) - ord('A')] -= 1\n                j += 1\n            i += 1\n        return i - j\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        counter = [0] * 26\n        i = j = maxCnt = 0\n        while i < len(s):\n            counter[ord(s[i]) - ord('A')] += 1\n            maxCnt = max(maxCnt, counter[ord(s[i]) - ord('A')])\n            if i - j + 1 > maxCnt + k:\n                counter[ord(s[j]) - ord('A')] -= 1\n                j += 1\n            i += 1\n        return i - j\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ', k=random.randint(1, 11)))\n    \n    # Generate a random value for k\n    k = random.randint(0, len(s))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.characterReplacement(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.characterReplacement(s, k) == expected_result\n        print(f\"assert solution.characterReplacement({s}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.characterReplacement({s}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.characterReplacement(KOFVYEPQOBG, 9) == 11\nassert solution.characterReplacement(BGSIXIW, 1) == 3\nassert solution.characterReplacement(XXXIEBTBN, 8) == 9\nassert solution.characterReplacement(RKIMJBB, 1) == 3\nassert solution.characterReplacement(CBH, 0) == 1\nassert solution.characterReplacement(PCPRHMQ, 5) == 7\nassert solution.characterReplacement(EUOVUVVVM, 5) == 9\nassert solution.characterReplacement(YSXVHQ, 1) == 2\nassert solution.characterReplacement(MNUUV, 5) == 5\nassert solution.characterReplacement(IMG, 1) == 2\nassert solution.characterReplacement(WOKOLPAICOD, 7) == 10\nassert solution.characterReplacement(JBUWKFB, 6) == 7\nassert solution.characterReplacement(XHQP, 0) == 1\nassert solution.characterReplacement(YIEGEHMVK, 8) == 9\nassert solution.characterReplacement(Q, 1) == 1\nassert solution.characterReplacement(ORYRORXG, 5) == 8\nassert solution.characterReplacement(W, 0) == 1\nassert solution.characterReplacement(SNQXUKFL, 5) == 6\nassert solution.characterReplacement(ALVINUIYN, 5) == 7\nassert solution.characterReplacement(DVPUXGTSWF, 9) == 10\nassert solution.characterReplacement(KXTDKN, 5) == 6\nassert solution.characterReplacement(KK, 2) == 2\nassert solution.characterReplacement(SDMZFBZF, 6) == 8\nassert solution.characterReplacement(GUQMDHDHZ, 8) == 9\nassert solution.characterReplacement(M, 0) == 1\nassert solution.characterReplacement(TFQXQFOU, 6) == 8\nassert solution.characterReplacement(NLPWAXWQ, 7) == 8\nassert solution.characterReplacement(TWUNJGR, 4) == 5\nassert solution.characterReplacement(CTBSD, 4) == 5\nassert solution.characterReplacement(JELNIUGIYKA, 3) == 5\nassert solution.characterReplacement(EZC, 2) == 3\nassert solution.characterReplacement(T, 1) == 1\nassert solution.characterReplacement(PK, 0) == 1\nassert solution.characterReplacement(LZVSJUHRSUO, 8) == 10\nassert solution.characterReplacement(UNZPVYHL, 7) == 8\nassert solution.characterReplacement(ASVKXFQNOUR, 1) == 2\nassert solution.characterReplacement(HSUDUFEAE, 1) == 3\nassert solution.characterReplacement(RO, 1) == 2\nassert solution.characterReplacement(CBLUKJKCJTK, 10) == 11\nassert solution.characterReplacement(AMYMHYUT, 8) == 8\nassert solution.characterReplacement(RKWHF, 3) == 4\nassert solution.characterReplacement(LS, 2) == 2\nassert solution.characterReplacement(ERMWZVYKKLD, 7) == 9\nassert solution.characterReplacement(Z, 0) == 1\nassert solution.characterReplacement(TQE, 0) == 1\nassert solution.characterReplacement(AVORHUOFBBH, 1) == 3\nassert solution.characterReplacement(TQZQJHQNHSM, 8) == 11\nassert solution.characterReplacement(EBN, 0) == 1\nassert solution.characterReplacement(UQTQNQGAX, 7) == 9\nassert solution.characterReplacement(VIZF, 0) == 1\nassert solution.characterReplacement(TTHVTUCAV, 7) == 9\nassert solution.characterReplacement(RMENNQ, 5) == 6\nassert solution.characterReplacement(Q, 0) == 1\nassert solution.characterReplacement(YFIWQFUYN, 4) == 6\nassert solution.characterReplacement(CRTAA, 5) == 5\nassert solution.characterReplacement(RNIILIQWD, 7) == 9\nassert solution.characterReplacement(YBS, 1) == 2\nassert solution.characterReplacement(V, 0) == 1\nassert solution.characterReplacement(LQFKRE, 4) == 5\nassert solution.characterReplacement(MJXXJ, 4) == 5\nassert solution.characterReplacement(W, 0) == 1\nassert solution.characterReplacement(TJJQBPUOG, 4) == 6\nassert solution.characterReplacement(WQLAE, 2) == 3\nassert solution.characterReplacement(IDFUZO, 6) == 6\nassert solution.characterReplacement(KAHVITY, 4) == 5\nassert solution.characterReplacement(SYEHWRY, 5) == 7\nassert solution.characterReplacement(IQMANRMIQRI, 2) == 4\nassert solution.characterReplacement(HADSYLMU, 3) == 4\nassert solution.characterReplacement(NH, 2) == 2\nassert solution.characterReplacement(ZMCG, 4) == 4\nassert solution.characterReplacement(UMR, 3) == 3\nassert solution.characterReplacement(IRCDLMLDIZV, 4) == 6\nassert solution.characterReplacement(XIP, 3) == 3\nassert solution.characterReplacement(YAKMKJWOXKK, 6) == 10\nassert solution.characterReplacement(N, 1) == 1\nassert solution.characterReplacement(LR, 1) == 2\nassert solution.characterReplacement(JVSPC, 2) == 3\nassert solution.characterReplacement(SYWL, 0) == 1\nassert solution.characterReplacement(TJIL, 3) == 4\nassert solution.characterReplacement(GAVJ, 1) == 2\nassert solution.characterReplacement(VWDQISQAG, 4) == 6\nassert solution.characterReplacement(RDSAV, 4) == 5\nassert solution.characterReplacement(ULBFO, 4) == 5\nassert solution.characterReplacement(CRWSZ, 4) == 5\nassert solution.characterReplacement(IMSDGC, 5) == 6\nassert solution.characterReplacement(EWDUG, 0) == 1\nassert solution.characterReplacement(FXIBPFZPQD, 7) == 9\nassert solution.characterReplacement(BDDVPQ, 4) == 6\nassert solution.characterReplacement(E, 1) == 1\nassert solution.characterReplacement(HTCKTB, 6) == 6\nassert solution.characterReplacement(XU, 2) == 2\nassert solution.characterReplacement(DAV, 2) == 3\nassert solution.characterReplacement(QMW, 1) == 2\nassert solution.characterReplacement(E, 1) == 1\nassert solution.characterReplacement(XDERJ, 5) == 5\nassert solution.characterReplacement(GHYNBLPHRS, 3) == 4\nassert solution.characterReplacement(QDUVBLYQQL, 5) == 7\nassert solution.characterReplacement(TPQTK, 4) == 5\nassert solution.characterReplacement(ZUSO, 1) == 2\nassert solution.characterReplacement(WGRBST, 5) == 6",
  "inefficient_solution": "class Solution:\n    def characterReplacement(self, s: str, k: int) -> int:\n        max_length = 0\n        for i in range(len(s)):\n            char_count = {}\n            for j in range(i, len(s)):\n                char_count[s[j]] = char_count.get(s[j], 0) + 1\n                max_count = max(char_count.values())\n                if j - i + 1 - max_count > k:\n                    char_count[s[i]] -= 1\n                    i += 1\n                    break\n            max_length = max(max_length, j - i + 1)\n        return max_length",
  "is_python": true
}