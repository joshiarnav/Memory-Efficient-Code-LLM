{
  "problem_idx": 1349,
  "task_name": "Maximum Students Taking Exam",
  "markdown_description": "\nGiven a `m\u00a0* n`\u00a0matrix `seats`\u00a0\u00a0that represent seats distributions\u00a0in a classroom.\u00a0If a seat\u00a0is\u00a0broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character.\n\n\nStudents can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting\u00a0directly in front or behind him. Return the **maximum** number of students that can take the exam together\u00a0without any cheating being possible.\n\n\nStudents must be placed in seats in good condition.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1300-1399/1349.Maximum%20Students%20Taking%20Exam/images/image.png)\n\n```\n\n**Input:** seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n\u00a0               [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n\u00a0               [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]\n**Output:** 4\n**Explanation:** Teacher can place 4 students in available seats so they don't cheat on the exam. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** seats = [[\".\",\"#\"],\n\u00a0               [\"#\",\"#\"],\n\u00a0               [\"#\",\".\"],\n\u00a0               [\"#\",\"#\"],\n\u00a0               [\".\",\"#\"]]\n**Output:** 3\n**Explanation:** Place all students in available seats. \n\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** seats = [[\"#\",\".\",\"**.**\",\".\",\"#\"],\n\u00a0               [\"**.**\",\"#\",\"**.**\",\"#\",\"**.**\"],\n\u00a0               [\"**.**\",\".\",\"#\",\".\",\"**.**\"],\n\u00a0               [\"**.**\",\"#\",\"**.**\",\"#\",\"**.**\"],\n\u00a0               [\"#\",\".\",\"**.**\",\".\",\"#\"]]\n**Output:** 10\n**Explanation:** Place students in available seats in column 1, 3 and 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `seats`\u00a0contains only characters\u00a0`'.'\u00a0and``'#'.`\n* `m ==\u00a0seats.length`\n* `n ==\u00a0seats[i].length`\n* `1 <= m <= 8`\n* `1 <= n <= 8`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxStudents(self, seats: List[List[str]]) -> int:\n        def f(seat: List[str]) -> int:\n            mask = 0\n            for i, c in enumerate(seat):\n                if c == '.':\n                    mask |= 1 << i\n            return mask\n\n        @cache\n        def dfs(seat: int, i: int) -> int:\n            ans = 0\n            for mask in range(1 << n):\n                if (seat | mask) != seat or (mask & (mask << 1)):\n                    continue\n                cnt = mask.bit_count()\n                if i == len(ss) - 1:\n                    ans = max(ans, cnt)\n                else:\n                    nxt = ss[i + 1]\n                    nxt &= ~(mask << 1)\n                    nxt &= ~(mask >> 1)\n                    ans = max(ans, cnt + dfs(nxt, i + 1))\n            return ans\n\n        n = len(seats[0])\n        ss = [f(s) for s in seats]\n        return dfs(ss[0], 0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxStudents(self, seats):\n        def f(seat):\n            mask = 0\n            for i, c in enumerate(seat):\n                if c == '.':\n                    mask |= 1 << i\n            return mask\n\n        @cache\n        def dfs(seat, i):\n            ans = 0\n            for mask in range(1 << n):\n                if (seat | mask) != seat or (mask & (mask << 1)):\n                    continue\n                cnt = mask.bit_count()\n                if i == len(ss) - 1:\n                    ans = max(ans, cnt)\n                else:\n                    nxt = ss[i + 1]\n                    nxt &= ~(mask << 1)\n                    nxt &= ~(mask >> 1)\n                    ans = max(ans, cnt + dfs(nxt, i + 1))\n            return ans\n\n        n = len(seats[0])\n        ss = [f(s) for s in seats]\n        return dfs(ss[0], 0)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random seats matrix\n    m = random.randint(1, 8)\n    n = random.randint(1, 8)\n    seats = []\n    for _ in range(m):\n        row = []\n        for _ in range(n):\n            row.append(random.choice(['#', '.']))\n        seats.append(row)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxStudents(seats)\n\n    return seats, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        seats, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxStudents(seats) == expected_result\n        print(f\"assert solution.maxStudents({seats}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxStudents({seats}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxStudents([['.', '.', '#'], ['#', '.', '#'], ['.', '#', '#'], ['.', '#', '#'], ['.', '.', '.'], ['#', '.', '#']]) == 5\nassert solution.maxStudents([['.', '.', '.', '#', '#', '#', '.', '#'], ['#', '.', '#', '#', '.', '#', '.', '#'], ['#', '.', '#', '.', '#', '#', '.', '#']]) == 7\nassert solution.maxStudents([['#', '.'], ['#', '.'], ['.', '.']]) == 3\nassert solution.maxStudents([['.', '#', '#', '.'], ['#', '#', '.', '#'], ['.', '#', '.', '.']]) == 4\nassert solution.maxStudents([['#', '.'], ['#', '.'], ['#', '.'], ['.', '.']]) == 4\nassert solution.maxStudents([['.'], ['.'], ['#'], ['.'], ['#']]) == 3\nassert solution.maxStudents([['#'], ['#'], ['#'], ['.'], ['#']]) == 1\nassert solution.maxStudents([['.', '#', '#', '.', '#', '.', '.'], ['.', '.', '.', '.', '#', '#', '#'], ['#', '.', '.', '.', '.', '.', '#'], ['.', '#', '.', '.', '.', '.', '.'], ['.', '.', '#', '.', '.', '.', '.']]) == 13\nassert solution.maxStudents([['.', '.', '#', '#', '.'], ['.', '#', '#', '.', '.'], ['#', '#', '.', '#', '.']]) == 6\nassert solution.maxStudents([['.', '#'], ['.', '#'], ['.', '#'], ['#', '.'], ['.', '#']]) == 4\nassert solution.maxStudents([['.', '.', '.', '#', '.', '#', '.', '.'], ['.', '#', '#', '#', '#', '#', '#', '#'], ['.', '#', '#', '#', '#', '#', '#', '#'], ['#', '#', '#', '#', '.', '#', '#', '.'], ['.', '#', '.', '.', '.', '.', '.', '.'], ['#', '.', '#', '#', '#', '.', '#', '.'], ['#', '#', '#', '.', '.', '#', '#', '.'], ['#', '#', '#', '.', '#', '.', '#', '.']]) == 18\nassert solution.maxStudents([['.', '.', '#', '#']]) == 1\nassert solution.maxStudents([['.', '.', '#'], ['#', '.', '#'], ['.', '.', '.'], ['#', '#', '.'], ['#', '.', '#']]) == 4\nassert solution.maxStudents([['.', '.', '#', '.', '#', '#'], ['.', '.', '.', '.', '#', '#'], ['.', '#', '#', '#', '#', '.'], ['.', '.', '.', '.', '#', '.'], ['#', '#', '#', '.', '.', '#'], ['.', '#', '#', '.', '#', '#'], ['#', '#', '.', '.', '.', '.']]) == 14\nassert solution.maxStudents([['.', '#', '#', '#', '.', '#', '#']]) == 2\nassert solution.maxStudents([['.', '#', '.'], ['.', '.', '.'], ['.', '.', '.']]) == 6\nassert solution.maxStudents([['#', '#'], ['#', '.'], ['.', '.'], ['.', '.']]) == 3\nassert solution.maxStudents([['.', '.', '.']]) == 2\nassert solution.maxStudents([['.'], ['.'], ['#'], ['#']]) == 2\nassert solution.maxStudents([['.', '#', '#'], ['.', '.', '.'], ['.', '#', '.'], ['#', '#', '.'], ['.', '#', '#'], ['.', '#', '#'], ['#', '.', '#'], ['.', '#', '#']]) == 9\nassert solution.maxStudents([['#', '#', '.', '#'], ['#', '#', '#', '.'], ['.', '.', '.', '#']]) == 3\nassert solution.maxStudents([['.', '#', '#'], ['#', '#', '#'], ['#', '#', '.'], ['#', '#', '.'], ['.', '#', '.'], ['#', '#', '#']]) == 5\nassert solution.maxStudents([['#'], ['.']]) == 1\nassert solution.maxStudents([['#', '.', '.', '#'], ['#', '#', '.', '.'], ['.', '#', '#', '.'], ['#', '.', '.', '.']]) == 5\nassert solution.maxStudents([['.', '#'], ['#', '#']]) == 1\nassert solution.maxStudents([['#', '.', '.', '#', '.'], ['.', '.', '#', '.', '#'], ['.', '.', '.', '.', '#'], ['.', '.', '.', '#', '.'], ['#', '#', '.', '#', '.'], ['#', '#', '.', '.', '.']]) == 12\nassert solution.maxStudents([['#', '.', '#'], ['.', '.', '.'], ['.', '#', '#'], ['.', '.', '#']]) == 4\nassert solution.maxStudents([['#', '#', '.', '#', '#'], ['#', '#', '#', '#', '#'], ['#', '#', '.', '#', '#'], ['#', '#', '.', '#', '#']]) == 3\nassert solution.maxStudents([['.', '#', '.', '.', '.'], ['.', '.', '#', '.', '.'], ['.', '#', '#', '#', '.']]) == 7\nassert solution.maxStudents([['.', '#', '.'], ['.', '#', '.'], ['#', '.', '.'], ['.', '.', '.'], ['#', '.', '#'], ['.', '.', '#'], ['.', '.', '#'], ['.', '.', '.']]) == 11\nassert solution.maxStudents([['#', '#', '#', '.'], ['#', '#', '.', '.'], ['.', '#', '.', '.'], ['#', '.', '#', '#'], ['#', '.', '.', '.'], ['.', '#', '.', '.'], ['#', '.', '.', '#'], ['#', '.', '.', '.']]) == 10\nassert solution.maxStudents([['#', '.', '#', '#', '.', '#', '#'], ['#', '#', '.', '#', '.', '#', '.'], ['#', '#', '.', '.', '#', '.', '#'], ['#', '#', '#', '.', '.', '#', '.'], ['#', '.', '.', '#', '.', '.', '.'], ['#', '#', '.', '#', '#', '#', '#'], ['#', '#', '.', '#', '.', '.', '#']]) == 13\nassert solution.maxStudents([['.', '#', '.'], ['.', '.', '#'], ['#', '.', '#'], ['#', '#', '.']]) == 4\nassert solution.maxStudents([['#', '.', '#', '#', '.'], ['.', '.', '#', '.', '#'], ['.', '.', '#', '.', '.'], ['#', '#', '.', '#', '.'], ['#', '.', '#', '#', '#']]) == 7\nassert solution.maxStudents([['#', '.', '.', '#', '#', '.'], ['.', '.', '#', '#', '#', '#'], ['.', '.', '#', '#', '#', '#'], ['.', '.', '#', '#', '.', '#'], ['.', '#', '.', '#', '#', '.'], ['.', '.', '.', '#', '.', '#'], ['.', '#', '#', '.', '.', '#']]) == 13\nassert solution.maxStudents([['#', '.', '.', '.', '.', '.', '.', '#'], ['.', '.', '.', '#', '.', '.', '#', '#']]) == 6\nassert solution.maxStudents([['#', '#', '.']]) == 1\nassert solution.maxStudents([['.', '#', '.', '#'], ['.', '#', '.', '.'], ['.', '.', '.', '.'], ['#', '.', '#', '#'], ['#', '.', '.', '.']]) == 8\nassert solution.maxStudents([['#', '.', '#', '#', '#'], ['#', '.', '#', '.', '#'], ['.', '#', '#', '.', '.'], ['#', '.', '#', '#', '#'], ['#', '#', '.', '.', '#'], ['.', '.', '.', '.', '#']]) == 8\nassert solution.maxStudents([['#', '.', '.', '.'], ['#', '.', '#', '#'], ['.', '#', '.', '#']]) == 4\nassert solution.maxStudents([['#', '#'], ['#', '#'], ['.', '#'], ['.', '#'], ['#', '.'], ['#', '#']]) == 2\nassert solution.maxStudents([['#', '.', '#', '.', '#', '#'], ['.', '#', '.', '#', '#', '.'], ['#', '#', '#', '#', '.', '.'], ['.', '.', '.', '.', '.', '#'], ['#', '#', '#', '.', '#', '#'], ['#', '#', '.', '.', '#', '#'], ['.', '.', '.', '.', '.', '.']]) == 11\nassert solution.maxStudents([['.']]) == 1\nassert solution.maxStudents([['.'], ['#'], ['#']]) == 1\nassert solution.maxStudents([['#', '#'], ['#', '.'], ['.', '#']]) == 1\nassert solution.maxStudents([['#', '#'], ['#', '.'], ['.', '#'], ['.', '#']]) == 2\nassert solution.maxStudents([['.', '#', '.', '.', '.', '.'], ['.', '.', '#', '#', '.', '#']]) == 5\nassert solution.maxStudents([['#', '.', '#', '#', '.'], ['.', '#', '.', '#', '.'], ['#', '#', '.', '.', '#'], ['.', '#', '#', '.', '.'], ['.', '#', '.', '.', '#'], ['.', '.', '#', '.', '.']]) == 11\nassert solution.maxStudents([['#']]) == 0\nassert solution.maxStudents([['.', '.', '#', '.', '#'], ['.', '.', '.', '#', '#'], ['.', '#', '.', '.', '#'], ['.', '#', '.', '.', '#'], ['#', '#', '.', '.', '.']]) == 9\nassert solution.maxStudents([['.', '.', '.', '.', '#', '#', '#', '#'], ['#', '.', '#', '.', '.', '#', '#', '#'], ['#', '.', '.', '.', '#', '#', '.', '#'], ['.', '.', '#', '.', '.', '#', '#', '.'], ['.', '.', '#', '.', '#', '.', '.', '#'], ['#', '#', '#', '.', '.', '.', '.', '#']]) == 14\nassert solution.maxStudents([['#', '.', '.', '#', '#'], ['#', '#', '#', '#', '#'], ['#', '#', '#', '#', '#'], ['#', '#', '#', '.', '#'], ['#', '#', '#', '#', '.'], ['.', '#', '.', '#', '#'], ['#', '#', '#', '#', '.']]) == 5\nassert solution.maxStudents([['#', '.', '.'], ['#', '#', '.'], ['.', '#', '#']]) == 3\nassert solution.maxStudents([['#', '.', '.'], ['.', '.', '#']]) == 2\nassert solution.maxStudents([['#'], ['.'], ['.'], ['.'], ['#'], ['.'], ['.']]) == 5\nassert solution.maxStudents([['#', '#'], ['.', '.'], ['#', '.'], ['.', '.']]) == 3\nassert solution.maxStudents([['.', '#', '.', '#', '#', '.', '#'], ['#', '.', '#', '.', '#', '#', '.'], ['.', '.', '#', '.', '#', '#', '.'], ['#', '.', '#', '.', '#', '.', '#']]) == 8\nassert solution.maxStudents([['#'], ['.'], ['#'], ['.']]) == 2\nassert solution.maxStudents([['.', '.', '.'], ['.', '#', '#'], ['.', '#', '.'], ['.', '.', '.'], ['#', '.', '#'], ['#', '#', '#'], ['#', '.', '#'], ['#', '#', '#']]) == 8\nassert solution.maxStudents([['#', '.', '#', '.', '.', '#']]) == 2\nassert solution.maxStudents([['.', '#']]) == 1\nassert solution.maxStudents([['.', '.', '.', '.', '.', '.', '.', '.'], ['#', '.', '#', '.', '.', '#', '.', '.'], ['.', '#', '.', '#', '#', '#', '#', '#'], ['#', '.', '#', '.', '.', '#', '.', '.'], ['#', '.', '#', '#', '#', '#', '.', '.'], ['.', '.', '.', '#', '#', '.', '.', '.'], ['#', '.', '#', '#', '.', '#', '.', '#']]) == 17\nassert solution.maxStudents([['#', '#', '.', '.', '#', '.'], ['.', '#', '#', '#', '.', '#'], ['#', '.', '#', '#', '#', '.']]) == 4\nassert solution.maxStudents([['.', '#'], ['#', '#'], ['#', '#'], ['.', '#'], ['#', '.'], ['.', '.'], ['#', '.']]) == 4\nassert solution.maxStudents([['#', '.', '.', '#', '.', '#', '#', '.'], ['#', '#', '.', '.', '.', '#', '.', '#']]) == 5\nassert solution.maxStudents([['#', '.', '#'], ['#', '#', '.'], ['.', '#', '#'], ['#', '.', '.'], ['.', '.', '.'], ['.', '#', '#']]) == 6\nassert solution.maxStudents([['#', '.', '#', '#', '.', '#', '#', '.'], ['.', '#', '.', '#', '#', '#', '#', '.'], ['.', '.', '#', '#', '#', '.', '.', '.'], ['.', '#', '.', '.', '.', '.', '#', '.'], ['.', '.', '.', '#', '.', '#', '#', '#'], ['.', '.', '.', '#', '.', '.', '.', '#'], ['.', '#', '.', '#', '#', '.', '.', '#']]) == 21\nassert solution.maxStudents([['#', '#', '.', '#', '.', '#', '#']]) == 2\nassert solution.maxStudents([['.', '.'], ['.', '#'], ['#', '.'], ['.', '.']]) == 3\nassert solution.maxStudents([['#', '#', '#', '#', '.', '.'], ['.', '.', '#', '.', '.', '.'], ['#', '.', '#', '.', '#', '.'], ['.', '.', '.', '.', '.', '#'], ['.', '#', '#', '#', '#', '.'], ['.', '.', '#', '.', '#', '#']]) == 12\nassert solution.maxStudents([['#', '.', '.'], ['#', '.', '.'], ['#', '.', '#'], ['.', '.', '.'], ['#', '.', '#']]) == 5\nassert solution.maxStudents([['#', '.', '.', '.', '#', '#'], ['.', '#', '.', '.', '.', '#'], ['.', '.', '.', '#', '#', '#']]) == 6\nassert solution.maxStudents([['#', '#'], ['#', '#']]) == 0\nassert solution.maxStudents([['.', '.', '.', '#', '.', '.']]) == 3\nassert solution.maxStudents([['#', '.', '.']]) == 1\nassert solution.maxStudents([['#'], ['#']]) == 0\nassert solution.maxStudents([['.', '.', '.', '.', '#', '.', '#'], ['.', '#', '.', '#', '.', '#', '#'], ['#', '.', '#', '.', '#', '#', '.'], ['#', '.', '#', '#', '#', '.', '#']]) == 7\nassert solution.maxStudents([['.', '.'], ['.', '.'], ['.', '.'], ['.', '.'], ['#', '#'], ['#', '.']]) == 5\nassert solution.maxStudents([['#', '.', '#', '#', '.'], ['#', '.', '#', '.', '#'], ['.', '#', '.', '.', '#'], ['#', '.', '#', '#', '#'], ['#', '.', '#', '#', '#'], ['.', '.', '#', '.', '#'], ['.', '.', '#', '.', '#'], ['#', '#', '.', '#', '.']]) == 10\nassert solution.maxStudents([['.', '#', '#', '.'], ['#', '#', '#', '.'], ['.', '.', '.', '.'], ['.', '#', '.', '.'], ['#', '#', '#', '#'], ['#', '.', '#', '#'], ['.', '.', '#', '.']]) == 10\nassert solution.maxStudents([['#', '#', '#', '#'], ['.', '.', '#', '#'], ['#', '#', '#', '.'], ['.', '#', '#', '#'], ['.', '#', '.', '#']]) == 5\nassert solution.maxStudents([['#', '.', '.', '.', '.', '#', '.'], ['#', '#', '.', '#', '#', '#', '.'], ['#', '#', '#', '.', '#', '#', '.']]) == 6\nassert solution.maxStudents([['#', '#', '#', '.', '.', '#'], ['#', '.', '#', '.', '#', '.'], ['#', '#', '#', '.', '.', '.'], ['.', '#', '.', '#', '.', '#'], ['.', '#', '#', '#', '.', '#'], ['#', '.', '.', '#', '.', '.'], ['.', '.', '#', '#', '#', '.'], ['#', '.', '#', '.', '.', '#']]) == 13\nassert solution.maxStudents([['.', '.', '.', '.', '.', '#', '.', '#'], ['#', '.', '.', '#', '#', '#', '.', '.'], ['.', '#', '.', '#', '.', '#', '#', '.'], ['#', '#', '.', '.', '.', '.', '.', '.'], ['#', '.', '#', '.', '.', '.', '.', '#'], ['#', '#', '#', '#', '#', '#', '#', '#']]) == 14\nassert solution.maxStudents([['#', '.', '#', '#', '.'], ['#', '#', '.', '.', '#']]) == 2\nassert solution.maxStudents([['.', '#', '#', '.', '#', '.', '.', '#'], ['#', '.', '.', '.', '#', '#', '#', '.'], ['.', '#', '#', '.', '.', '.', '#', '#']]) == 8\nassert solution.maxStudents([['#', '#', '#', '.', '#', '#'], ['#', '#', '.', '#', '#', '#'], ['#', '#', '#', '#', '.', '#'], ['#', '.', '#', '#', '.', '.'], ['.', '#', '.', '.', '#', '#']]) == 5\nassert solution.maxStudents([['#'], ['.'], ['#'], ['.'], ['.'], ['#'], ['#'], ['#']]) == 3\nassert solution.maxStudents([['.', '.'], ['.', '#'], ['.', '.'], ['#', '.'], ['#', '.'], ['#', '#'], ['#', '.']]) == 5\nassert solution.maxStudents([['.', '.', '.', '.', '#', '.', '#'], ['#', '.', '#', '.', '.', '#', '#'], ['.', '#', '.', '#', '#', '#', '.'], ['#', '.', '.', '.', '.', '#', '#']]) == 8\nassert solution.maxStudents([['#', '.', '.', '.', '#', '.', '#', '#'], ['.', '#', '.', '.', '.', '#', '#', '.'], ['#', '.', '#', '.', '#', '.', '#', '#'], ['#', '.', '.', '#', '.', '.', '#', '.']]) == 11\nassert solution.maxStudents([['#', '#', '#', '#', '.', '.', '.']]) == 2\nassert solution.maxStudents([['#', '#', '.', '#', '#', '#', '#'], ['#', '#', '#', '#', '.', '.', '.'], ['#', '#', '#', '#', '.', '.', '#'], ['#', '#', '#', '.', '.', '.', '#'], ['.', '.', '.', '.', '#', '#', '.'], ['.', '#', '#', '#', '#', '.', '.']]) == 10\nassert solution.maxStudents([['#', '.', '#', '.'], ['#', '#', '#', '.'], ['#', '.', '#', '.'], ['.', '#', '#', '#'], ['#', '#', '.', '#']]) == 6\nassert solution.maxStudents([['.', '#', '.', '#', '#'], ['.', '#', '#', '#', '#'], ['.', '.', '#', '#', '.'], ['#', '.', '#', '.', '.'], ['#', '#', '.', '.', '#'], ['.', '#', '#', '#', '.'], ['.', '.', '.', '.', '.'], ['#', '#', '.', '.', '.']]) == 14\nassert solution.maxStudents([['#', '.', '.', '#'], ['.', '.', '#', '.'], ['.', '#', '#', '.']]) == 4\nassert solution.maxStudents([['#', '.', '.', '#'], ['.', '.', '#', '.'], ['.', '#', '.', '.'], ['.', '#', '.', '#'], ['.', '#', '#', '#'], ['#', '.', '.', '.'], ['#', '.', '#', '.']]) == 10\nassert solution.maxStudents([['#'], ['#'], ['#'], ['#'], ['#'], ['.'], ['.'], ['#']]) == 2\nassert solution.maxStudents([['#', '#']]) == 0\nassert solution.maxStudents([['#'], ['#'], ['.'], ['.']]) == 2",
  "inefficient_solution": "class Solution:\n    def maxStudents(self, seats):\n        if not seats:\n            return 0\n\n        n = len(seats[0])\n        m = len(seats)\n\n        # Create a 2D array to store the seats\n        seats_arr = [[0]*n for _ in range(m)]\n\n        # Convert the seats from string to integer\n        for i in range(m):\n            for j in range(n):\n                if seats[i][j] == '.':\n                    seats_arr[i][j] = 1\n                else:\n                    seats_arr[i][j] = 0\n\n        # Initialize a 3D array to store the students count\n        dp = [[[0]*n for _ in range(m)] for _ in range(1<<n)]\n\n        # Initialize the first row\n        for j in range(n):\n            dp[1<<j][0][j] = 1\n\n        # Iterate over the rows\n        for i in range(m):\n            for mask in range(1<<n):\n                for j in range(n):\n                    # Check if the current seat is available\n                    if seats_arr[i][j] == 1:\n                        # Check if the current student can see the right student\n                        if j != n-1 and (mask & (1<<j)) and (mask & (1<<j+1)):\n                            continue\n                        # Check if the current student can see the left student\n                        if j != 0 and (mask & (1<<j-1)) and (mask & (1<<j)):\n                            continue\n                        # Check if the current student can see the top left student\n                        if i != 0 and (mask & (1<<j)) and ((mask^(1<<j)) & (1<<j)) and (((mask^(1<<j)) & (1<<j)) & (dp[1<<j][i-1][j])):\n                            continue\n                        # Check if the current student can see the top right student\n                        if j != n-1 and (mask & (1<<j)) and ((mask^(1<<j)) & (1<<j+1)) and (((mask^(1<<j)) & (1<<j+1)) & (dp[1<<j+1][i-1][j+1])):\n                            continue\n                        # Update the dp table\n                        dp[mask][i][j] = max(dp[mask][i][j], dp[mask^(1<<j)][i-1][j] + 1)\n                    else:\n                        dp[mask][i][j] = 0\n\n        # Return the maximum students count\n        return max(dp[(1<<n)-1][m-1])",
  "is_python": true
}