{
  "problem_idx": 909,
  "task_name": "Snakes and Ladders",
  "markdown_description": "\nYou are given an `n x n` integer matrix `board` where the cells are labeled from `1` to `n2` in a [**Boustrophedon style**](https://en.wikipedia.org/wiki/Boustrophedon) starting from the bottom left of the board (i.e. `board[n - 1][0]`) and alternating direction each row.\n\n\nYou start on square `1` of the board. In each move, starting from square `curr`, do the following:\n\n\n* Choose a destination square `next` with a label in the range `[curr + 1, min(curr + 6, n2)]`.\n\t+ This choice simulates the result of a standard **6-sided die roll**: i.e., there are always at most 6 destinations, regardless of the size of the board.\n* If `next` has a snake or ladder, you **must** move to the destination of that snake or ladder. Otherwise, you move to `next`.\n* The game ends when you reach the square `n2`.\n\n\nA board square on row `r` and column `c` has a snake or ladder if `board[r][c] != -1`. The destination of that snake or ladder is `board[r][c]`. Squares `1` and `n2` do not have a snake or ladder.\n\n\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do **not** follow the subsequent\u00a0snake or ladder.\n\n\n* For example, suppose the board is `[[-1,4],[-1,3]]`, and on the first move, your destination square is `2`. You follow the ladder to square `3`, but do **not** follow the subsequent ladder to `4`.\n\n\nReturn *the least number of moves required to reach the square* `n2`*. If it is not possible to reach the square, return* `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0909.Snakes%20and%20Ladders/images/snakes.png)\n\n```\n\n**Input:** board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\n**Output:** 4\n**Explanation:** \nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** board = [[-1,-1],[-1,3]]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == board.length == board[i].length`\n* `2 <= n <= 20`\n* `board[i][j]` is either `-1` or in the range `[1, n2]`.\n* The squares labeled `1` and `n2` do not have any ladders or snakes.\n\n\n",
  "canonical_solution": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -> int:\n        def get(x):\n            i, j = (x - 1) // n, (x - 1) % n\n            if i & 1:\n                j = n - 1 - j\n            return n - 1 - i, j\n\n        n = len(board)\n        q = deque([1])\n        vis = {1}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                curr = q.popleft()\n                if curr == n * n:\n                    return ans\n                for next in range(curr + 1, min(curr + 7, n * n + 1)):\n                    i, j = get(next)\n                    if board[i][j] != -1:\n                        next = board[i][j]\n                    if next not in vis:\n                        q.append(next)\n                        vis.add(next)\n            ans += 1\n        return -1\n",
  "test_case_generator": "\nclass Solution:\n    def snakesAndLadders(self, board):\n        def get(x):\n            i, j = (x - 1) // n, (x - 1) % n\n            if i & 1:\n                j = n - 1 - j\n            return n - 1 - i, j\n\n        n = len(board)\n        q = deque([1])\n        vis = {1}\n        ans = 0\n        while q:\n            for _ in range(len(q)):\n                curr = q.popleft()\n                if curr == n * n:\n                    return ans\n                for next in range(curr + 1, min(curr + 7, n * n + 1)):\n                    i, j = get(next)\n                    if board[i][j] != -1:\n                        next = board[i][j]\n                    if next not in vis:\n                        q.append(next)\n                        vis.add(next)\n            ans += 1\n        return -1\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate board of size n x n\n    n = random.randint(2, 20)\n    board = [[-1] * n for _ in range(n)]\n\n    # Generate random snakes\n    num_snakes = random.randint(1, n)\n    snake_positions = random.sample(range(2, n * n), num_snakes)\n    for pos in snake_positions:\n        while True:\n            snake_tail = random.randint(1, pos - 1)\n            if snake_tail not in snake_positions:\n                break\n        row, col = get_coordinates(pos, n)\n        board[row][col] = snake_tail\n\n    # Generate random ladders\n    num_ladders = random.randint(1, n)\n    ladder_positions = random.sample(range(2, n * n), num_ladders)\n    for pos in ladder_positions:\n        while True:\n            ladder_top = random.randint(pos + 1, n * n)\n            if ladder_top not in ladder_positions:\n                break\n        row, col = get_coordinates(pos, n)\n        board[row][col] = ladder_top\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.snakesAndLadders(board)\n\n    return board, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        board, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.snakesAndLadders(board) == expected_result\n        test_case_generator_results.append(f\"assert solution.snakesAndLadders({board}) == {expected_result}\")\n    return test_case_generator_results\n\ndef get_coordinates(pos, n):\n    row = (pos - 1) // n\n    col = (pos - 1) % n\n    if row % 2 == 1:\n        col = n - 1 - col\n    row = n - 1 - row\n    return row, col\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 142, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, 248, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [124, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 201, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 107, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 22, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 130, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, 75], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, 18]]) == 36\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, 169, -1, -1, -1], [-1, -1, 155, -1, -1, -1, -1, -1, 162, -1, -1, -1, -1], [-1, -1, -1, 161, 165, -1, -1, 74, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 97, -1, -1, -1, -1, -1, -1, -1, 24], [-1, -1, 167, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160, -1, -1], [-1, 123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 64, -1, -1, -1, -1, -1, 120, -1, -1, -1, -1], [-1, 8, -1, 65, -1, -1, -1, -1, -1, 168, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 4\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 113, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 155, -1, -1], [212, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 222, -1, -1, -1, -1, -1, -1, -1, -1, -1, 207], [-1, 210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1], [206, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 9\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1], [-1, 2, -1, -1, -1, -1], [23, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1], [-1, -1, -1, 23, -1, 12], [-1, -1, -1, -1, -1, -1]]) == 5\nassert solution.snakesAndLadders([[-1, -1, 13, 16], [-1, -1, -1, -1], [-1, 11, -1, 10], [-1, 16, -1, -1]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 201, -1, 211, -1, -1, -1, 176, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 196, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, 140], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 179, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 48, -1, -1, -1, 122, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 81, -1, 128, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 22\nassert solution.snakesAndLadders([[16, -1, 7, -1, -1], [-1, 2, -1, 18, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, 21], [-1, -1, -1, -1, -1]]) == 2\nassert solution.snakesAndLadders([[-1, -1, 22, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 60, -1, -1, -1], [-1, -1, -1, -1, 33, -1, -1, -1, -1, -1], [-1, -1, 9, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 71, -1, -1, 30, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 43, -1, -1, 70], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [12, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 9, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 15\nassert solution.snakesAndLadders([[-1, -1, -1, -1], [-1, -1, 16, 15], [-1, 10, -1, -1], [-1, -1, -1, 13]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 215, 197, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 209, -1, -1, -1, -1, -1, -1, 80, -1], [-1, -1, 153, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 222, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 17, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 248, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 5, -1, 32, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1], [-1, -1, -1, 13, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 21\nassert solution.snakesAndLadders([[-1, -1, -1, -1, 35, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 34, -1, -1], [-1, 79, -1, 37, -1, 73, -1, -1, -1], [-1, -1, -1, 44, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [24, -1, -1, -1, -1, -1, -1, -1, 7], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 11\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, 191, -1, -1, -1, -1, -1, -1, -1], [177, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 196, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 195, -1, 39], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 144, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [86, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 10\nassert solution.snakesAndLadders([[-1, -1, 1, 16], [-1, -1, -1, -1], [-1, 8, 9, -1], [-1, -1, -1, -1]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, -1, 117, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120], [-1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1], [-1, -1, -1, -1, 46, 47, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 24\nassert solution.snakesAndLadders([[-1, -1, -1], [3, 9, 3], [-1, -1, -1]]) == 1\nassert solution.snakesAndLadders([[-1, 1], [-1, 3]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1], [-1, 27, -1, 6, -1, -1, 63, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 13, -1, -1, -1, 19], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 41, -1, -1, -1]]) == 5\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, 189, -1, -1, 48, -1, -1], [108, -1, -1, -1, 104, 182, -1, -1, -1, -1, -1, -1, 186, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 137, -1, -1, -1, 154, -1, -1, -1], [-1, -1, -1, -1, -1, 180, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134, -1, -1], [-1, -1, -1, -1, -1, -1, 185, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [127, -1, -1, -1, 168, -1, -1, -1, -1, -1, 158, -1, -1, -1], [-1, -1, 61, -1, -1, -1, -1, -1, -1, -1, 119, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 16\nassert solution.snakesAndLadders([[-1, -1, 39, -1, -1, -1, -1], [-1, -1, 45, -1, -1, -1, -1], [-1, -1, -1, -1, 16, -1, -1], [-1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1], [49, -1, -1, -1, 5, -1, -1], [-1, -1, -1, -1, -1, -1, -1]]) == 3\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [82, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 99, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 7, 72, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1]]) == 17\nassert solution.snakesAndLadders([[-1, -1, -1], [-1, 6, 2], [-1, 9, -1]]) == 1\nassert solution.snakesAndLadders([[-1, 9, -1], [-1, -1, -1], [-1, 7, -1]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 196, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1], [117, -1, -1, -1, -1, -1, -1, 159, 41, -1, -1, 155, -1, 152], [-1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, 46, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 60, -1, -1, -1, -1, -1, -1, 159, -1, -1, -1, -1], [-1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 166, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 183, 30, -1, 160, -1, 175, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 2, -1, -1, 106, -1, -1, 1, -1]]) == 6\nassert solution.snakesAndLadders([[8, 3, -1], [8, -1, -1], [-1, -1, 8]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, 36, -1], [-1, -1, -1, -1, 77, -1, 32, 100, -1, -1], [-1, -1, -1, 84, -1, -1, -1, -1, 59, -1], [95, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 78, -1, -1, -1, -1, -1, -1, 4, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [91, -1, 29, -1, -1, -1, -1, -1, -1, -1], [-1, 7, -1, -1, -1, -1, -1, -1, -1, -1], [12, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 3, -1, -1, -1, -1, -1]]) == 9\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, 22, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 100], [98, -1, -1, -1, -1, -1, -1, -1, -1, -1], [57, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 86, -1, -1, -1], [9, 100, -1, 8, -1, 50, -1, 86, -1, -1], [-1, -1, -1, -1, -1, -1, 19, -1, -1, -1], [-1, -1, -1, -1, -1, 11, 15, -1, -1, -1], [-1, -1, -1, -1, 96, -1, -1, -1, -1, 99], [-1, -1, -1, -1, -1, -1, 70, -1, -1, -1]]) == 3\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 101, 193], [-1, -1, -1, -1, -1, 183, -1, -1, -1, 192, 140, -1, 43, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 174, -1, -1, 69, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 18, -1, -1, -1, -1, -1, 175, 26, -1, 180, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 181, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 10\nassert solution.snakesAndLadders([[-1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [39, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 75, -1, -1, -1, 87, -1, -1, 138, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1], [-1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 31, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 1, 4, -1, 1, -1, -1, -1, -1]]) == 16\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 132, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 63, -1, -1, 135, -1, -1, -1], [-1, -1, -1, 112, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 15\nassert solution.snakesAndLadders([[-1, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 283, -1, -1, -1, 200, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 195, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324, -1, -1, -1, 275, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 264, -1, -1, -1, 172, -1, -1, -1, -1, -1, 24, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 257, 232, -1, -1, -1, -1], [160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 86, -1, -1, -1, -1, -1, 272, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 220, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 87, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 31, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 27\nassert solution.snakesAndLadders([[-1, -1, -1, 398, -1, 398, -1, 356, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 356, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 389, -1], [-1, -1, -1, -1, -1, -1, 364, -1, -1, -1, -1, -1, 234, -1, -1, -1, -1, -1, 51, 112], [-1, -1, 383, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 388, -1, -1, -1, -1, -1, 380, -1, -1, 207, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 259, -1, -1, 155, -1, -1, 178, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1], [-1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, 134, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 173, -1, -1, -1, 256], [-1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 259, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 17\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 11, -1, 133, 15, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 10\nassert solution.snakesAndLadders([[-1, -1, -1, -1, 98, -1, -1, -1, -1, -1], [-1, -1, 18, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 79, -1, -1], [-1, -1, -1, -1, 67, 34, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 12, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, 4, -1, -1, -1, -1, 9]]) == 16\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, 320, -1, -1, 320, 313, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 130, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 146, -1, -1, -1, -1, -1, 277, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 281, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 203, 77, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 240, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 210, -1, -1, -1, -1, -1], [192, -1, -1, -1, -1, -1, 139, 107, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 17\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 266, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 187], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 222, -1, -1, -1, -1, -1, 126, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1], [-1, -1, -1, -1, -1, -1, 69, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 53, 56, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1], [-1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 30\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, 150, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [87, -1, -1, -1, -1, -1, -1, -1, 153, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 130, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1], [-1, 109, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 17\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 69, -1, -1], [-1, -1, -1, -1, -1, 78, -1, -1, -1, -1], [-1, -1, -1, -1, 91, -1, -1, -1, 99, -1], [-1, -1, -1, -1, -1, 94, -1, -1, -1, -1], [-1, -1, -1, 72, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 40, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 4]]) == 6\nassert solution.snakesAndLadders([[-1, -1, 324, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 300, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 277, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 283, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 324, -1, 293, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, 273, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 259, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 157], [-1, -1, -1, -1, -1, 223, -1, -1, -1, -1, -1, -1, 170, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 101, -1, -1, -1, 170, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 180, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, -1, -1, -1]]) == 15\nassert solution.snakesAndLadders([[9, -1, -1], [3, 6, -1], [-1, -1, 4]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, 64, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 27], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1]]) == 10\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, 396], [240, -1, -1, -1, -1, -1, -1, -1, -1, -1, 397, -1, -1, -1, -1, -1, -1, 384, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 369, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 298, -1, -1, -1, -1, 306, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 365, -1, -1], [-1, -1, -1, -1, -1, -1, 172, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 347, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 362, -1, -1, 196, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 151, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 313], [-1, -1, -1, -1, 315, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 5\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 227, -1, -1, -1, -1, -1, -1, -1, 219, -1, -1, 239], [-1, -1, -1, -1, -1, -1, -1, -1, 187, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 251, 207, 221, -1, -1, -1, -1, -1, -1, 180], [-1, 163, -1, -1, -1, -1, -1, 231, 243, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 178, -1, -1, -1, 72], [-1, -1, -1, -1, -1, -1, -1, 173, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1], [-1, -1, -1, 98, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 19\nassert solution.snakesAndLadders([[-1, 16, -1, -1], [10, -1, -1, 14], [-1, -1, -1, 10], [-1, 1, -1, -1]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 81], [-1, -1, -1, -1, -1, 36, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 37, -1], [-1, 32, -1, -1, -1, -1, -1, -1, 62], [73, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 42, -1, 30, -1, 76, 24, -1], [-1, -1, 6, 66, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 5\nassert solution.snakesAndLadders([[8, 5, -1], [-1, 9, -1], [-1, 1, -1]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, 132, -1, -1, -1, -1, -1, -1, 43, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 238, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 100, -1, -1, -1, -1, -1, 232, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 95, -1, -1, -1, -1, 152, -1, -1, -1, -1, 79, -1], [-1, -1, 180, -1, -1, -1, 235, -1, -1, -1, 145, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1], [91, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 187, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 248, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1], [-1, 147, -1, 238, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1]]) == 7\nassert solution.snakesAndLadders([[-1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 245, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 251, -1, -1, -1, -1], [-1, -1, -1, 206, 58, 237, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 203, -1, -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, -1, -1, -1], [148, -1, -1, -1, -1, 152, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 67, -1, -1, -1, -1, 142, -1, -1, -1, 38, -1, -1, -1], [-1, 250, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 212, -1, -1, -1, -1, -1, 185, -1, -1, -1, -1, 26, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 162, 1, 153, 6, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1]]) == 13\nassert solution.snakesAndLadders([[-1, -1, 16, -1], [8, -1, -1, -1], [11, -1, -1, 3], [-1, 1, 7, -1]]) == 3\nassert solution.snakesAndLadders([[2, -1, -1, -1, -1], [-1, -1, -1, -1, 25], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, 2], [-1, -1, -1, -1, 1]]) == 3\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, 13, 6], [19, -1, 21, -1, -1], [-1, -1, 21, 2, -1]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 148, -1, 20, 162, -1, -1], [-1, -1, -1, 174, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 207, -1, -1, -1, -1, 15, -1, -1, -1, -1, -1], [195, -1, -1, -1, 125, -1, -1, -1, 158, -1, 167, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1], [129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 178, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 78, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 127, -1, -1]]) == 8\nassert solution.snakesAndLadders([[-1, 77, 76, -1, -1, -1, -1, 42, -1], [-1, 57, -1, -1, -1, 9, -1, -1, 79], [79, -1, -1, -1, -1, -1, -1, -1, -1], [51, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 51, -1], [-1, -1, -1, 35, -1, -1, -1, -1, -1], [-1, 2, 5, -1, -1, -1, 9, 56, -1], [-1, -1, -1, -1, -1, -1, 38, 59, -1]]) == 4\nassert solution.snakesAndLadders([[-1, -1, -1], [-1, 4, 9], [-1, -1, -1]]) == 1\nassert solution.snakesAndLadders([[9, 6, -1], [-1, 6, 2], [-1, -1, -1]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, -1, 33, -1], [-1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 33, -1], [-1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1]]) == 5\nassert solution.snakesAndLadders([[-1, -1, -1, 1, -1], [-1, -1, -1, 15, 3], [-1, -1, -1, 22, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, 3]]) == 4\nassert solution.snakesAndLadders([[-1, 24, 24, -1, -1], [-1, -1, -1, -1, 20], [1, -1, -1, -1, -1], [-1, -1, -1, -1, 15], [-1, 1, 1, -1, -1]]) == 3\nassert solution.snakesAndLadders([[-1, -1], [-1, 4]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 168, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 345, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 89], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 41\nassert solution.snakesAndLadders([[-1, -1, 20, 9, 49, -1, -1], [-1, -1, -1, -1, 30, -1, -1], [-1, -1, -1, -1, 45, 38, -1], [-1, 28, 35, -1, -1, 46, -1], [-1, -1, -1, -1, -1, -1, -1], [-1, -1, 36, -1, 8, -1, -1], [-1, 1, -1, -1, -1, 5, 3]]) == 5\nassert solution.snakesAndLadders([[-1, -1, -1, -1, 145, -1, 119, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 144, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 178, -1, -1, -1, -1, 103, -1, -1, -1, -1], [-1, -1, -1, -1, 132, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 44, -1, -1, -1, 60, -1, -1, -1, -1, 56, 139, -1, 150], [-1, -1, 119, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 158, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 111, -1, 173, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 7\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 395, 389, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 399, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, 186, -1, -1, -1, 282, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 256, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 248, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 149, -1, -1, -1, -1, 194, -1, -1, -1], [369, -1, 271, -1, 339, -1, -1, -1, -1, -1, -1, -1, 26, 193, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 289, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 341, -1, -1, -1, -1, -1, 214, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 364, -1, -1, -1, -1, -1, -1, -1, 294], [-1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, 353, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 96, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1]]) == 11\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 31\nassert solution.snakesAndLadders([[-1, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 249, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1, 199, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 239, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 74, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, 202], [-1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 263, -1, -1, -1, -1, -1, 134, -1, -1], [-1, -1, 247, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 74, 52, -1], [-1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 255, -1, -1, -1, 132, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 264, -1, 20, -1, -1, -1]]) == 7\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1], [-1, -1, -1, -1, 118, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 278, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 133, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, 292], [-1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [30, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1]]) == 33\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 173, -1, 174, -1, -1, -1], [-1, -1, 3, -1, -1, -1, -1, 106, -1, 194, -1, -1, -1, -1], [-1, -1, 29, -1, -1, 195, -1, -1, -1, -1, -1, -1, -1, -1], [154, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1], [-1, 25, -1, -1, -1, -1, -1, -1, 192, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 92, -1, -1, -1, -1, -1, -1, 196], [-1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 98, -1, -1, -1, -1, -1, -1], [195, -1, 173, -1, 145, -1, -1, -1, -1, -1, -1, 156, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1]]) == 5\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1], [10, -1, -1, -1, 40, -1, -1], [-1, -1, 41, 36, -1, -1, -1], [-1, 26, 40, 49, -1, -1, -1], [-1, -1, -1, 39, -1, -1, -1], [24, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1]]) == 4\nassert solution.snakesAndLadders([[-1, 31, -1, -1, -1, -1, -1, -1, 166, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 114, 151, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 167, -1, -1, -1, 61, -1], [147, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 136], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 122, -1, 23], [-1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 145, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 82, 33, -1, 59, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, 142], [109, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 1, 49, -1, -1, -1, -1, -1, -1, -1, -1]]) == 9\nassert solution.snakesAndLadders([[-1, 4], [-1, 1]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 69, -1], [-1, -1, -1, -1, 10, -1, -1, -1, -1], [-1, 76, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 24, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 5, -1, -1, -1]]) == 8\nassert solution.snakesAndLadders([[-1, -1, 4, -1, -1], [-1, -1, -1, -1, -1], [18, -1, -1, -1, -1], [6, -1, -1, -1, -1], [-1, -1, 2, -1, -1]]) == 4\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1], [76, -1, -1, -1, -1, -1, -1, 16, 75], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [55, -1, -1, -1, -1, 22, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 42, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 31, -1, -1, -1, -1, -1, 32, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 9\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1], [-1, 48, 27, -1, 20, -1, 42], [-1, -1, -1, -1, -1, -1, 1], [-1, -1, -1, -1, 44, 31, 3], [-1, -1, -1, -1, -1, 43, -1], [5, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 2, -1, -1, -1]]) == 5\nassert solution.snakesAndLadders([[5, -1, -1], [-1, -1, 6], [-1, 8, 7]]) == 2\nassert solution.snakesAndLadders([[-1, 4], [-1, 4]]) == 1\nassert solution.snakesAndLadders([[20, -1, -1, 25, -1], [-1, -1, 20, 14, 9], [-1, -1, 8, 16, -1], [-1, -1, -1, 5, -1], [-1, -1, -1, 12, -1]]) == 3\nassert solution.snakesAndLadders([[-1, 1, -1], [-1, -1, -1], [-1, -1, 5]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, 98, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 71, -1, -1, 3, -1, 94], [-1, -1, -1, -1, -1, -1, -1, 83, -1, -1], [-1, -1, -1, -1, -1, -1, 98, -1, -1, -1], [-1, -1, -1, 22, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 8, -1], [-1, 83, 14, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 24], [-1, 15, -1, -1, -1, -1, -1, -1, 48, -1], [-1, -1, 82, -1, -1, -1, 5, -1, -1, -1]]) == 4\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, 358, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 345, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 332, -1, -1, -1, -1, -1, -1, -1], [-1, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [296, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 316, -1, -1, -1, -1, -1, -1, 274, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 109, -1, -1, -1, -1], [-1, -1, -1, -1, 339, -1, -1, -1, -1, -1, -1, -1, -1, -1, 121, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 147], [-1, -1, -1, -1, -1, -1, -1, -1, 175, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 24\nassert solution.snakesAndLadders([[9, 9, -1], [3, -1, -1], [-1, -1, -1]]) == 1\nassert solution.snakesAndLadders([[-1, 1], [-1, 3]]) == 1\nassert solution.snakesAndLadders([[-1, -1, 24, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, -1], [-1, 4, -1, -1, 4], [-1, -1, -1, -1, -1]]) == 4\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 167, -1, -1, -1, -1, -1], [-1, -1, 134, -1, -1, -1, 100, -1, -1, -1, -1, -1, -1], [-1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 97, -1, -1, -1, -1, -1, -1, -1, 133], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1], [-1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 21, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15]]) == 9\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 83, -1, -1, -1, 88, -1, -1], [-1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1], [-1, -1, 117, -1, 113, -1, -1, 84, 38, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 102, -1, -1], [-1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 27, -1, -1, 28, -1, -1, -1, -1, -1], [-1, -1, -1, 27, -1, -1, 3, 11, -1, -1, -1]]) == 7\nassert solution.snakesAndLadders([[-1, -1, -1, 14], [16, -1, -1, 6], [-1, -1, -1, 11], [-1, 15, -1, -1]]) == 2\nassert solution.snakesAndLadders([[165, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1, 31, -1], [166, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1], [53, -1, -1, -1, -1, -1, -1, 153, -1, 13, 50, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 70, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 128, -1, 42, -1, -1, -1, -1, -1], [-1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 14\nassert solution.snakesAndLadders([[-1, -1, -1], [7, 1, 9], [-1, -1, 9]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, 154, -1, -1, -1, 67, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 124], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 40, -1, 20, 94, -1, -1, -1, -1, -1, -1, -1, -1], [18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 10, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 163], [-1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 4\nassert solution.snakesAndLadders([[-1, -1, -1, -1, 75, -1, -1, -1, -1, 221, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 138, -1, -1, -1, 168, -1, -1, -1], [-1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 23, -1, -1, -1, -1, -1, -1, -1, 223, 170, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120, 163], [-1, -1, -1, -1, -1, -1, -1, -1, 114, -1, -1, -1, -1, -1, -1], [-1, -1, 223, -1, -1, -1, -1, -1, -1, -1, -1, -1, 145, -1, -1], [-1, -1, -1, -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 195, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1]]) == 11\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 263, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1], [-1, -1, -1, -1, 196, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 18\nassert solution.snakesAndLadders([[-1, -1, -1, -1], [-1, 11, -1, -1], [-1, 6, -1, 13], [-1, -1, -1, -1]]) == 2\nassert solution.snakesAndLadders([[-1, -1, 24, -1, -1], [-1, 9, -1, -1, -1], [2, -1, 20, -1, -1], [-1, -1, -1, -1, -1], [-1, -1, -1, -1, 21]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 138, -1, -1, -1, -1, -1], [-1, -1, 90, -1, 40, 105, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 101, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [92, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 97, -1, -1, -1, -1, -1, -1, -1, -1, 116, -1]]) == 5\nassert solution.snakesAndLadders([[-1, 9, -1], [5, -1, -1], [-1, 7, 9]]) == 1\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 268, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 40\nassert solution.snakesAndLadders([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [148, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 141, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98], [-1, -1, -1, 121, -1, -1, -1, 82, -1, 108, -1, -1, -1], [140, 158, -1, -1, -1, -1, 119, -1, -1, -1, 115, -1, -1], [-1, -1, -1, -1, -1, 23, -1, -1, 138, 3, -1, -1, -1], [-1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, 3, -1, 4, -1, 162, -1, 9, -1]]) == 4\nassert solution.snakesAndLadders([[19, 25, -1, -1, -1], [-1, -1, 11, 24, -1], [-1, 3, -1, 23, -1], [-1, 6, -1, -1, -1], [-1, -1, -1, -1, 18]]) == 2\nassert solution.snakesAndLadders([[-1, 4], [-1, 4]]) == 1\nassert solution.snakesAndLadders([[-1, 16, -1, -1], [2, -1, -1, -1], [2, 4, -1, 13], [-1, -1, -1, -1]]) == 2\nassert solution.snakesAndLadders([[-1, -1, -1, 221, -1, -1, -1, -1, -1, -1, -1, -1, 224, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 188, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 180, -1, -1, -1], [-1, 70, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 14, -1, -1, 9, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 90, -1, -1, 13, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]) == 21",
  "inefficient_solution": "class Solution:\n    def snakesAndLadders(self, board: List[List[int]]) -> int:\n        def get(x):\n            i, j = (x - 1) // n, (x - 1) % n\n            if i & 1:\n                j = n - 1 - j\n            r = n - 1 - i\n            c = j\n            if r % 2 == 0:\n                r += 1\n            return r, c\n\n        n = len(board)\n        bfs = deque([(1, 0)])\n        visited = set([1])\n        while bfs:\n            for _ in range(len(bfs)):\n                curr, steps = bfs.popleft()\n                if curr == n * n:\n                    return steps\n                for next in range(curr + 1, min(curr + 7, n * n + 1)):\n                    r, c = get(next)\n                    if board[r][c] != -1:\n                        next = board[r][c]\n                    if next not in visited:\n                        bfs.append((next, steps + 1))\n                        visited.add(next)\n            for _ in range(len(bfs)):\n                r, c = get(bfs[0][0])\n                board[r][c] = -1\n            for _ in range(len(bfs)):\n                bfs[0] = (bfs[0][0], bfs[0][1] + 1)\n        return -1",
  "is_python": true
}