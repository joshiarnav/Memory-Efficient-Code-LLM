{
  "problem_idx": 1430,
  "task_name": "Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree",
  "markdown_description": "\nGiven a binary tree where each path going from the root to any leaf form a **valid sequence**, check if a given string\u00a0is a **valid sequence** in such binary tree.\u00a0\n\n\nWe get the given string from the concatenation of an array of integers `arr` and the concatenation of all\u00a0values of the nodes along a path results in a **sequence** in the given binary tree.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1430.Check%20If%20a%20String%20Is%20a%20Valid%20Sequence%20from%20Root%20to%20Leaves%20Path%20in%20a%20Binary%20Tree/images/leetcode_testcase_1.png)**\n\n\n\n```\n\n**Input:** root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]\n**Output:** true\n**Explanation:**The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). \nOther valid sequences are: \n0 -> 1 -> 1 -> 0 \n0 -> 0 -> 0\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1430.Check%20If%20a%20String%20Is%20a%20Valid%20Sequence%20from%20Root%20to%20Leaves%20Path%20in%20a%20Binary%20Tree/images/leetcode_testcase_2.png)**\n\n\n\n```\n\n**Input:** root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]\n**Output:** false \n**Explanation:** The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence.\n\n```\n\n**Example 3:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1430.Check%20If%20a%20String%20Is%20a%20Valid%20Sequence%20from%20Root%20to%20Leaves%20Path%20in%20a%20Binary%20Tree/images/leetcode_testcase_3.png)**\n\n\n\n```\n\n**Input:** root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]\n**Output:** false\n**Explanation:** The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 5000`\n* `0 <= arr[i] <= 9`\n* Each node's value is between [0 - 9].\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isValidSequence(self, root: TreeNode, arr: List[int]) -> bool:\n        def dfs(root, u):\n            if root is None or root.val != arr[u]:\n                return False\n            if u == len(arr) - 1:\n                return root.left is None and root.right is None\n            return dfs(root.left, u + 1) or dfs(root.right, u + 1)\n\n        return dfs(root, 0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isValidSequence(self, root, arr):\n        def dfs(root, u):\n            if root is None or root.val != arr[u]:\n                return False\n            if u == len(arr) - 1:\n                return root.left is None and root.right is None\n            return dfs(root.left, u + 1) or dfs(root.right, u + 1)\n\n        return dfs(root, 0)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random binary tree\n    root = generate_binary_tree()\n    \n    # Generate a random array\n    arr = random.choices(range(10), k=random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isValidSequence(root, arr)\n\n    return root, arr, expected_result\n\n\ndef generate_binary_tree():\n    nodes = []\n    num_nodes = random.randint(1, 10)\n    for i in range(num_nodes):\n        nodes.append(TreeNode(val=random.randint(0, 9)))\n\n    root = nodes[0]\n    for i in range(num_nodes):\n        node = nodes[i]\n        if i * 2 + 1 < num_nodes:\n            node.left = nodes[i * 2 + 1]\n        if i * 2 + 2 < num_nodes:\n            node.right = nodes[i * 2 + 2]\n\n    return root\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n\n    for i in range(num_tests):\n        root, arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isValidSequence(root, arr) == expected_result\n        print(f\"assert solution.isValidSequence({root}, {arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isValidSequence({root}, {arr}) == {expected_result}\")\n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isValidSequence(<__main__.TreeNode object at 0x7fec895ef310>, [8, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964cc90>, [8, 3, 0, 6, 1, 6, 2, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec89626850>, [6, 3, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec89626450>, [5, 8, 3, 8, 3, 2]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec89626490>, [1, 6, 2, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964cc90>, [8, 2, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec89792610>, [1, 3, 3, 5, 6, 8, 7, 2, 2, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ced0>, [4, 4, 4, 2, 3, 5, 6, 2]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ce10>, [2, 2]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec89792610>, [6, 7, 3, 6, 2, 5, 0, 5, 7, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ce10>, [7, 8, 5, 9, 2, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec89626490>, [7, 1, 8, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964cf90>, [8, 4, 0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec89792610>, [7, 4, 1, 3, 4, 2, 9, 9, 8, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964cf90>, [3, 1, 3, 0, 8, 6, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964cbd0>, [6, 1]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d190>, [0, 7, 4, 2, 4]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964cd90>, [6, 7, 7, 5, 2, 1, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d2d0>, [1]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d110>, [5, 3, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d450>, [8, 3, 1, 6, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d210>, [7, 1, 0, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d390>, [0, 8, 3, 4, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d1d0>, [3, 0, 6, 0, 4, 5, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d650>, [1, 1, 8, 1, 6, 2, 8, 8, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d790>, [3, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d910>, [5, 4, 2, 9, 5, 6, 8, 4]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964da90>, [2]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964db50>, [1, 2, 3, 2]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d8d0>, [7, 8, 5, 7, 4]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964dc50>, [8, 6, 7, 4, 1, 7, 1, 8, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964dcd0>, [5, 9, 9, 3, 9, 0, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d990>, [9, 4, 8, 4, 9, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ddd0>, [1, 3, 6, 1]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964dfd0>, [3, 7, 5, 0, 8, 1, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964dd90>, [3, 5, 8, 5, 3, 4, 2, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e150>, [0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e310>, [1, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e250>, [3, 0, 0, 8, 2, 1, 2, 3, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e0d0>, [2, 6, 4, 8, 8, 3, 1, 0, 5, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e010>, [5, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e590>, [5, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e710>, [7, 3, 1, 9, 3, 0, 6, 0, 7, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d5d0>, [3, 0, 2, 4, 4]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e490>, [0, 9, 7, 0, 1, 3, 6, 8, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e090>, [0, 6, 8, 0, 1, 5, 9, 1, 2]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ea90>, [1, 3, 3, 2, 8, 2, 0, 8, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e650>, [4, 6, 0, 9, 8, 5, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e9d0>, [3, 7, 8, 6, 0, 6, 9, 2, 6, 0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e690>, [9, 8, 9, 9, 2, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ed50>, [4, 3, 6, 5, 4, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ea10>, [6, 1, 8, 0, 4]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964eed0>, [8, 5, 4, 2, 0, 4, 1, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f010>, [6, 4, 6, 5, 9, 4, 9, 0, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f190>, [7, 2, 4, 1, 7, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f090>, [1, 2, 2, 5, 1, 9, 0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ec50>, [0, 1, 2, 6, 7, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f250>, [6, 5, 4, 4, 2, 4, 2, 7, 4]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f390>, [1, 8, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f490>, [1, 9, 0, 0, 3, 6, 8, 0, 1, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964efd0>, [3, 0, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f610>, [8, 3, 9, 7, 4, 3, 9, 6, 1, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f810>, [2, 7, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f890>, [6, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f750>, [1, 0, 7, 6, 4, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f950>, [4, 9, 9, 0, 7, 6, 1, 8, 2, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f4d0>, [2, 5, 0, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f510>, [7, 2, 8, 3, 5, 7]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f410>, [9, 9, 2, 7, 1, 1]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964fbd0>, [2, 1, 8, 2, 7, 7, 0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964fd50>, [4, 5, 2, 7, 5, 3, 2, 8, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964fed0>, [5, 2, 7, 1, 6, 4, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ffd0>, [9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ff50>, [0, 1, 6, 0, 4, 8, 5, 1, 8]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c310>, [0, 6, 2, 2, 8, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964fa50>, [7, 0, 5, 0, 9, 7, 2, 0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c490>, [0, 2, 0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c290>, [0, 2, 6, 7, 7, 4, 7, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c590>, [0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c510>, [8, 8, 5, 3, 3, 0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c710>, [2, 9]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c8d0>, [5, 4, 8, 8, 6, 6, 2, 6, 6, 1]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c7d0>, [3, 2, 7, 9, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c190>, [5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965c850>, [9, 2, 6, 5, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965cb10>, [9, 5, 3, 7, 2, 1, 2, 2, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965ccd0>, [2, 7, 3, 4, 7, 3, 5, 8, 2, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8965cb90>, [4, 0, 7, 8, 4, 2, 4, 3, 2, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964fc50>, [7, 0, 3, 6, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f2d0>, [3, 8, 1, 0, 4, 1, 2, 1]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f350>, [5, 6, 9, 3, 4, 0, 0]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f150>, [6, 9, 1, 6, 0, 1]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964fb50>, [7, 6, 6, 3]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964ed10>, [6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964dbd0>, [1, 3, 9, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964e1d0>, [8, 5]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964d810>, [9, 8, 1, 6]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964de50>, [4, 4]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964db10>, [4]) == False\nassert solution.isValidSequence(<__main__.TreeNode object at 0x7fec8964f150>, [8, 2, 9, 8, 2, 6, 0, 6, 7]) == False",
  "inefficient_solution": "class Solution:\n    def isValidSequence(self, root: TreeNode, arr: List[int]) -> bool:\n        if not root:\n            return False\n        \n        res = []\n        self.dfs(root, arr, 0, res)\n        \n        return len(res) > 0 and arr == self.join_numbers(res)\n    \n    def dfs(self, root, arr, u, res):\n        if not root:\n            return\n        if root.val != arr[u]:\n            return\n        res.append(root.val)\n        if u == len(arr) - 1:\n            res.append(root.val)\n        self.dfs(root.left, arr, u + 1, res)\n        self.dfs(root.right, arr, u + 1, res)\n        res.pop()\n    \n    def join_numbers(self, res):\n        return ''.join(map(str, res))",
  "is_python": true
}