{
  "problem_idx": 407,
  "task_name": "Trapping Rain Water II",
  "markdown_description": "\nGiven an `m x n` integer matrix `heightMap` representing the height of each unit cell in a 2D elevation map, return *the volume of water it can trap after raining*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0407.Trapping%20Rain%20Water%20II/images/trap1-3d.jpg)\n\n```\n\n**Input:** heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n**Output:** 4\n**Explanation:** After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0407.Trapping%20Rain%20Water%20II/images/trap2-3d.jpg)\n\n```\n\n**Input:** heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n**Output:** 10\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == heightMap.length`\n* `n == heightMap[i].length`\n* `1 <= m, n <= 200`\n* `0 <= heightMap[i][j] <= 2 * 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        m, n = len(heightMap), len(heightMap[0])\n        vis = [[False] * n for _ in range(m)]\n        pq = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    heappush(pq, (heightMap[i][j], i, j))\n                    vis[i][j] = True\n        ans = 0\n        dirs = (-1, 0, 1, 0, -1)\n        while pq:\n            h, i, j = heappop(pq)\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if x >= 0 and x < m and y >= 0 and y < n and not vis[x][y]:\n                    ans += max(0, h - heightMap[x][y])\n                    vis[x][y] = True\n                    heappush(pq, (max(h, heightMap[x][y]), x, y))\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def trapRainWater(self, heightMap):\n        m, n = len(heightMap), len(heightMap[0])\n        vis = [[False] * n for _ in range(m)]\n        pq = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    heappush(pq, (heightMap[i][j], i, j))\n                    vis[i][j] = True\n        ans = 0\n        dirs = (-1, 0, 1, 0, -1)\n        while pq:\n            h, i, j = heappop(pq)\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if x >= 0 and x < m and y >= 0 and y < n and not vis[x][y]:\n                    ans += max(0, h - heightMap[x][y])\n                    vis[x][y] = True\n                    heappush(pq, (max(h, heightMap[x][y]), x, y))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random heightMap\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    heightMap = [[random.randint(0, 10) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.trapRainWater(heightMap)\n\n    return heightMap, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        heightMap, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.trapRainWater(heightMap) == expected_result\n        print(f\"assert solution.trapRainWater({heightMap}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.trapRainWater({heightMap}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.trapRainWater([[8, 7], [5, 5], [0, 7], [0, 9]]) == 0\nassert solution.trapRainWater([[0, 8, 8, 4, 5, 6, 5, 4]]) == 0\nassert solution.trapRainWater([[6, 3], [5, 3], [10, 2]]) == 0\nassert solution.trapRainWater([[4, 4, 8, 1, 1], [2, 0, 6, 0, 4], [8, 0, 1, 10, 3], [7, 0, 0, 9, 3], [3, 6, 3, 9, 3], [1, 3, 3, 5, 8], [3, 9, 7, 4, 3], [0, 10, 10, 8, 8], [7, 8, 10, 9, 6], [10, 3, 0, 0, 4]]) == 10\nassert solution.trapRainWater([[7, 0, 9, 6, 7, 8]]) == 0\nassert solution.trapRainWater([[8, 9, 1, 2, 9, 0], [3, 7, 8, 6, 5, 10], [4, 4, 10, 4, 8, 9], [8, 4, 7, 1, 8, 5], [10, 0, 0, 2, 10, 10], [1, 4, 8, 6, 8, 3], [2, 10, 9, 3, 6, 7], [6, 7, 6, 1, 1, 3], [9, 10, 5, 2, 0, 3]]) == 14\nassert solution.trapRainWater([[7, 4, 0, 2, 5, 7, 0], [3, 10, 8, 9, 6, 6, 9], [3, 5, 8, 10, 1, 6, 8], [4, 9, 8, 0, 5, 4, 7], [8, 7, 1, 3, 3, 8, 3], [5, 10, 1, 10, 1, 4, 10], [7, 1, 0, 3, 7, 5, 0], [2, 4, 10, 9, 3, 9, 0]]) == 28\nassert solution.trapRainWater([[5, 4, 9, 6]]) == 0\nassert solution.trapRainWater([[1, 3, 8, 3, 5, 8, 0], [2, 10, 5, 2, 4, 3, 5], [7, 8, 8, 5, 2, 3, 6], [1, 7, 9, 10, 0, 9, 3], [8, 9, 4, 1, 10, 3, 9], [1, 8, 4, 10, 2, 10, 8], [6, 0, 7, 6, 8, 6, 0], [5, 9, 10, 2, 1, 5, 3], [1, 0, 4, 7, 0, 4, 1], [0, 5, 1, 4, 5, 6, 4]]) == 49\nassert solution.trapRainWater([[8, 10, 8, 10], [10, 1, 1, 0], [6, 10, 10, 0]]) == 0\nassert solution.trapRainWater([[8, 8, 3, 8, 3], [0, 4, 0, 10, 10], [8, 9, 2, 5, 5], [6, 7, 9, 8, 8], [2, 2, 4, 6, 2], [10, 5, 3, 5, 4], [3, 10, 9, 0, 7], [5, 3, 6, 5, 3], [7, 3, 6, 2, 10], [8, 5, 8, 8, 4]]) == 17\nassert solution.trapRainWater([[9, 4, 10, 6, 9, 2, 9], [7, 2, 4, 5, 5, 0, 10], [7, 5, 1, 1, 7, 1, 0], [1, 1, 1, 0, 1, 7, 4], [1, 10, 9, 2, 4, 2, 2], [5, 2, 10, 6, 0, 0, 10], [3, 8, 7, 4, 2, 6, 0], [6, 9, 1, 7, 3, 6, 4]]) == 11\nassert solution.trapRainWater([[10, 8, 8, 10, 3, 8, 8, 0], [9, 3, 7, 3, 1, 6, 1, 8], [4, 5, 6, 10, 8, 2, 6, 9], [10, 8, 1, 10, 0, 0, 6, 9], [8, 0, 6, 2, 7, 4, 6, 4], [7, 5, 4, 3, 0, 10, 10, 2], [1, 1, 6, 0, 5, 0, 3, 9]]) == 41\nassert solution.trapRainWater([[3, 5, 5, 7, 0, 4], [6, 6, 4, 3, 1, 7], [3, 8, 8, 4, 4, 6]]) == 0\nassert solution.trapRainWater([[3, 10, 4, 4, 6, 3], [8, 7, 6, 2, 6, 6], [10, 8, 0, 8, 5, 6], [0, 5, 5, 1, 1, 8], [1, 4, 5, 4, 6, 3], [3, 4, 2, 7, 4, 5], [2, 2, 2, 3, 3, 4], [3, 2, 2, 1, 3, 3], [1, 9, 8, 7, 0, 7]]) == 17\nassert solution.trapRainWater([[8, 2, 5, 3, 2, 4, 3], [7, 2, 4, 9, 9, 8, 9], [6, 2, 7, 3, 6, 0, 7], [8, 10, 7, 8, 10, 2, 5], [3, 1, 9, 3, 9, 4, 8], [8, 3, 2, 5, 10, 9, 7], [8, 6, 4, 5, 1, 0, 1], [7, 10, 4, 8, 8, 1, 2]]) == 18\nassert solution.trapRainWater([[10, 10, 3], [1, 2, 6]]) == 0\nassert solution.trapRainWater([[10, 1, 4], [10, 7, 9], [4, 7, 1], [0, 5, 8], [0, 4, 5], [6, 4, 2]]) == 0\nassert solution.trapRainWater([[9, 4, 4, 9, 3, 6, 1, 10, 6, 8], [6, 3, 8, 3, 9, 0, 9, 3, 9, 7]]) == 0\nassert solution.trapRainWater([[10, 7, 9, 7, 6, 4, 0, 6, 1, 10], [0, 4, 4, 2, 3, 5, 4, 3, 4, 2], [8, 6, 1, 10, 10, 10, 10, 7, 7, 1], [10, 5, 8, 8, 9, 4, 10, 8, 0, 5], [2, 3, 7, 4, 10, 10, 5, 5, 0, 9], [1, 7, 1, 1, 8, 2, 10, 2, 6, 3], [0, 7, 8, 3, 4, 0, 9, 9, 3, 6], [10, 9, 0, 3, 6, 2, 10, 1, 4, 4], [5, 0, 4, 6, 7, 1, 0, 10, 5, 7], [8, 9, 9, 3, 10, 8, 6, 5, 7, 8]]) == 74\nassert solution.trapRainWater([[7, 7, 2, 3], [5, 1, 5, 1], [0, 8, 8, 2], [0, 8, 6, 0], [3, 10, 9, 6], [6, 6, 6, 0]]) == 4\nassert solution.trapRainWater([[2, 3], [9, 3], [7, 4], [4, 2], [0, 3], [4, 10], [8, 9], [10, 6], [2, 3], [3, 7]]) == 0\nassert solution.trapRainWater([[7], [10]]) == 0\nassert solution.trapRainWater([[7, 2], [8, 0], [10, 10]]) == 0\nassert solution.trapRainWater([[3, 8, 5, 0, 7, 7, 1]]) == 0\nassert solution.trapRainWater([[0, 8, 3, 5, 4, 7, 9, 0], [9, 0, 1, 9, 6, 7, 3, 5], [6, 7, 9, 9, 6, 6, 6, 8], [10, 0, 3, 2, 8, 2, 7, 5], [9, 9, 7, 8, 7, 5, 1, 4], [3, 7, 0, 9, 7, 9, 3, 9]]) == 28\nassert solution.trapRainWater([[7, 2, 8, 4], [5, 2, 2, 4], [4, 9, 2, 3], [10, 4, 7, 5], [7, 0, 0, 6], [6, 10, 2, 1], [3, 4, 5, 1], [0, 0, 5, 10], [3, 10, 7, 7]]) == 4\nassert solution.trapRainWater([[10, 6, 6, 6, 2, 10, 10, 10, 8], [8, 4, 6, 0, 5, 6, 8, 6, 3], [6, 3, 2, 7, 10, 3, 6, 2, 4], [6, 2, 2, 1, 3, 3, 7, 9, 10], [9, 4, 4, 9, 3, 8, 6, 2, 10], [8, 10, 0, 7, 3, 9, 10, 10, 1], [0, 1, 0, 0, 0, 6, 0, 8, 10], [2, 4, 0, 1, 2, 0, 0, 9, 0]]) == 18\nassert solution.trapRainWater([[9, 10, 2, 6, 1, 0, 0], [8, 8, 4, 0, 2, 6, 4], [0, 4, 6, 0, 5, 4, 2]]) == 0\nassert solution.trapRainWater([[6], [9], [10], [10], [2], [5]]) == 0\nassert solution.trapRainWater([[7, 10, 8, 7, 3, 0, 6], [2, 1, 2, 10, 7, 3, 5], [2, 3, 1, 8, 10, 6, 9], [9, 5, 6, 7, 7, 10, 2], [1, 6, 5, 3, 10, 1, 6]]) == 2\nassert solution.trapRainWater([[6, 5, 8, 4, 6, 1, 5, 5, 7, 3], [3, 6, 3, 1, 9, 0, 2, 5, 8, 6], [6, 0, 1, 7, 6, 10, 5, 5, 7, 8], [3, 2, 1, 10, 6, 7, 1, 0, 8, 5], [6, 3, 8, 6, 7, 4, 0, 7, 9, 4], [8, 6, 3, 1, 3, 5, 8, 10, 0, 6], [8, 3, 2, 10, 10, 7, 9, 1, 5, 7]]) == 35\nassert solution.trapRainWater([[7, 4, 6, 2, 2, 5, 3, 6], [8, 9, 6, 10, 3, 6, 9, 5], [4, 0, 10, 9, 10, 3, 6, 8], [4, 6, 8, 6, 5, 4, 0, 10], [1, 5, 3, 6, 1, 10, 3, 2], [10, 3, 6, 4, 6, 2, 0, 7], [1, 10, 2, 0, 1, 7, 7, 9], [9, 0, 3, 8, 6, 10, 3, 1], [6, 8, 4, 10, 5, 4, 10, 9], [10, 5, 2, 0, 5, 6, 0, 5]]) == 35\nassert solution.trapRainWater([[7, 2], [8, 6], [7, 3], [3, 10], [5, 1], [4, 10], [8, 3], [9, 0], [2, 1], [9, 1]]) == 0\nassert solution.trapRainWater([[0, 9, 2, 5]]) == 0\nassert solution.trapRainWater([[10, 0, 6, 8, 9], [4, 6, 8, 5, 1], [6, 9, 4, 3, 7], [2, 2, 2, 9, 2], [0, 2, 9, 10, 2], [8, 2, 5, 10, 0], [2, 2, 2, 5, 5], [6, 1, 2, 9, 4], [3, 5, 4, 10, 5]]) == 2\nassert solution.trapRainWater([[4, 4, 9, 4, 10], [6, 0, 3, 4, 3]]) == 0\nassert solution.trapRainWater([[1, 2, 1, 5, 6, 5, 5, 1], [6, 9, 5, 8, 10, 10, 10, 2]]) == 0\nassert solution.trapRainWater([[4, 10, 1, 6, 9, 9, 5, 0, 9, 6], [9, 7, 10, 1, 5, 7, 9, 3, 4, 8]]) == 0\nassert solution.trapRainWater([[9, 10, 3, 6, 5, 1], [4, 7, 3, 10, 1, 9], [8, 8, 7, 8, 7, 9], [2, 4, 1, 6, 1, 0], [10, 7, 9, 3, 0, 10], [6, 8, 3, 4, 0, 5], [5, 6, 10, 6, 9, 10]]) == 10\nassert solution.trapRainWater([[6, 10, 7, 7, 3, 0, 4, 5, 3, 10], [7, 0, 1, 0, 10, 6, 8, 0, 2, 1], [0, 8, 7, 10, 4, 9, 6, 2, 1, 5]]) == 22\nassert solution.trapRainWater([[3, 1, 8, 0, 10], [10, 0, 2, 5, 1], [2, 6, 2, 7, 5], [9, 7, 7, 0, 3]]) == 1\nassert solution.trapRainWater([[9, 8, 10]]) == 0\nassert solution.trapRainWater([[2, 10, 5, 6, 2, 8, 1], [3, 7, 1, 4, 1, 7, 6], [4, 1, 9, 10, 1, 8, 9], [0, 10, 5, 6, 7, 9, 9], [9, 9, 8, 4, 2, 6, 10], [7, 6, 5, 0, 5, 8, 5]]) == 11\nassert solution.trapRainWater([[3, 2, 3, 2, 5, 5], [8, 3, 7, 8, 5, 3], [4, 7, 9, 4, 4, 6], [0, 10, 6, 8, 8, 4], [4, 8, 1, 6, 3, 7], [3, 10, 5, 6, 5, 7], [9, 9, 0, 0, 2, 4], [0, 4, 8, 1, 2, 10], [4, 4, 1, 7, 4, 6], [0, 1, 0, 3, 3, 5]]) == 23\nassert solution.trapRainWater([[8, 5, 10, 6, 8, 2, 1, 10]]) == 0\nassert solution.trapRainWater([[6, 6, 0, 7, 6], [10, 1, 10, 2, 1], [5, 6, 4, 8, 10], [6, 10, 9, 10, 8], [9, 9, 9, 4, 5], [0, 4, 1, 0, 9]]) == 7\nassert solution.trapRainWater([[6, 9, 7, 4], [4, 9, 3, 10], [0, 0, 9, 7], [5, 2, 9, 6]]) == 4\nassert solution.trapRainWater([[4, 5, 9, 7, 0, 5], [2, 7, 0, 3, 4, 0], [5, 2, 1, 8, 3, 7], [1, 4, 7, 0, 2, 6], [9, 3, 9, 1, 6, 1]]) == 11\nassert solution.trapRainWater([[8, 8], [10, 1]]) == 0\nassert solution.trapRainWater([[5, 0, 6, 3, 8, 4, 3], [8, 2, 9, 0, 2, 5, 6], [10, 2, 9, 7, 9, 1, 0], [6, 10, 10, 0, 6, 2, 8], [2, 10, 4, 0, 10, 2, 6], [8, 2, 9, 9, 3, 3, 5]]) == 18\nassert solution.trapRainWater([[5, 5, 9], [6, 8, 3], [8, 7, 3], [3, 10, 3], [8, 2, 5], [4, 5, 1], [3, 5, 5], [9, 8, 4], [9, 6, 7], [4, 4, 8]]) == 3\nassert solution.trapRainWater([[1, 1, 0], [4, 0, 2], [0, 4, 8]]) == 1\nassert solution.trapRainWater([[5, 3, 0, 1, 1, 8, 1], [2, 8, 2, 0, 0, 4, 4]]) == 0\nassert solution.trapRainWater([[6, 0, 8], [2, 0, 8], [1, 10, 10], [9, 7, 1], [10, 7, 0], [8, 2, 4], [4, 0, 0], [5, 5, 1], [4, 10, 5], [4, 6, 2]]) == 0\nassert solution.trapRainWater([[4, 0], [2, 6], [4, 6], [2, 4], [8, 0]]) == 0\nassert solution.trapRainWater([[9], [4], [5], [6]]) == 0\nassert solution.trapRainWater([[7, 4, 3, 1, 0, 5, 9, 7, 8], [8, 6, 6, 1, 9, 1, 10, 7, 5], [2, 2, 3, 0, 4, 0, 10, 2, 10], [6, 10, 8, 1, 5, 10, 1, 3, 2], [1, 8, 1, 8, 6, 4, 1, 1, 6], [8, 4, 9, 5, 6, 4, 6, 1, 8], [0, 9, 0, 6, 9, 2, 3, 0, 5], [5, 2, 1, 5, 6, 3, 3, 9, 10]]) == 34\nassert solution.trapRainWater([[6, 10, 5, 8], [6, 5, 1, 9], [2, 0, 8, 5], [1, 1, 7, 3], [8, 1, 2, 10], [6, 5, 9, 2], [0, 5, 1, 4], [1, 6, 0, 1], [3, 10, 6, 8], [2, 8, 10, 5]]) == 6\nassert solution.trapRainWater([[2, 9, 3, 0, 5], [9, 4, 9, 7, 5], [8, 2, 7, 0, 6], [9, 0, 3, 0, 7], [4, 2, 3, 7, 2], [1, 4, 10, 10, 8], [5, 4, 8, 9, 0], [9, 7, 2, 0, 6], [5, 6, 4, 0, 4]]) == 18\nassert solution.trapRainWater([[7, 8, 1, 6, 2, 5, 8], [7, 1, 2, 10, 10, 6, 7], [2, 2, 9, 6, 5, 7, 10], [7, 10, 10, 4, 1, 10, 10], [8, 10, 1, 0, 1, 3, 4], [3, 6, 3, 5, 5, 0, 8], [5, 7, 5, 2, 7, 8, 9]]) == 20\nassert solution.trapRainWater([[0, 0, 5, 4, 7, 0, 4, 0, 8, 7]]) == 0\nassert solution.trapRainWater([[8, 10, 4, 10, 1, 1, 5, 1], [5, 9, 2, 0, 0, 3, 2, 9], [5, 0, 9, 1, 0, 9, 7, 0], [4, 3, 6, 10, 6, 1, 8, 3], [7, 0, 10, 2, 2, 9, 4, 7], [10, 3, 0, 2, 0, 5, 1, 5], [8, 0, 8, 3, 6, 4, 4, 6], [2, 10, 9, 5, 1, 1, 6, 9], [2, 9, 8, 0, 6, 7, 2, 5], [4, 8, 4, 6, 5, 5, 2, 1]]) == 58\nassert solution.trapRainWater([[5, 3], [4, 1]]) == 0\nassert solution.trapRainWater([[3, 6, 1], [1, 5, 10]]) == 0\nassert solution.trapRainWater([[0, 7, 2], [0, 4, 4], [2, 1, 2], [10, 3, 2], [0, 2, 8], [0, 0, 5], [4, 6, 3], [4, 0, 10], [0, 7, 8], [2, 1, 2]]) == 5\nassert solution.trapRainWater([[5, 10, 6, 3, 3], [3, 8, 0, 3, 7], [1, 2, 0, 8, 10], [6, 3, 1, 9, 4], [4, 0, 0, 1, 10], [9, 8, 7, 4, 1]]) == 10\nassert solution.trapRainWater([[4, 0, 10, 8, 2, 6, 9, 0, 9, 2], [9, 10, 8, 10, 9, 5, 3, 0, 4, 5], [10, 2, 7, 1, 9, 5, 5, 7, 8, 9], [1, 7, 4, 2, 2, 9, 6, 2, 4, 6], [8, 0, 1, 4, 4, 0, 1, 3, 7, 5], [9, 6, 8, 0, 3, 0, 4, 1, 2, 5], [5, 10, 8, 0, 6, 7, 4, 0, 7, 6]]) == 28\nassert solution.trapRainWater([[2, 6, 8, 10, 5, 7, 1, 5, 9], [7, 10, 7, 10, 0, 6, 7, 0, 10], [9, 3, 7, 2, 4, 6, 8, 1, 1], [2, 5, 4, 10, 7, 10, 9, 9, 0], [8, 6, 10, 2, 10, 5, 0, 8, 8], [7, 8, 2, 1, 3, 0, 3, 10, 7], [4, 6, 9, 2, 5, 9, 8, 9, 8], [5, 9, 10, 1, 4, 3, 8, 9, 5], [3, 9, 3, 5, 7, 2, 6, 3, 1], [4, 6, 8, 2, 1, 5, 3, 2, 6]]) == 52\nassert solution.trapRainWater([[1, 0], [3, 3], [4, 3], [4, 0], [4, 7]]) == 0\nassert solution.trapRainWater([[8, 3, 4, 3, 2, 2, 9, 2], [3, 2, 6, 9, 6, 3, 5, 3], [9, 6, 10, 7, 4, 4, 7, 9], [3, 3, 2, 0, 1, 9, 5, 6]]) == 1\nassert solution.trapRainWater([[6, 10, 5, 1, 1]]) == 0\nassert solution.trapRainWater([[9, 9, 0, 2, 7, 4], [10, 3, 0, 4, 0, 7], [1, 3, 0, 4, 6, 1]]) == 4\nassert solution.trapRainWater([[4, 3, 2, 1, 4, 5, 3, 3, 5], [3, 3, 4, 1, 2, 2, 2, 10, 9]]) == 0\nassert solution.trapRainWater([[3, 6], [2, 5], [9, 0], [8, 6], [2, 5]]) == 0\nassert solution.trapRainWater([[6, 3, 2, 9], [7, 9, 5, 1], [2, 7, 4, 8], [3, 3, 6, 1], [10, 10, 3, 7], [0, 0, 1, 1], [9, 3, 9, 8], [10, 9, 9, 9], [2, 3, 10, 7]]) == 1\nassert solution.trapRainWater([[10, 9, 1, 8, 5, 4], [3, 4, 7, 5, 7, 2], [2, 0, 9, 8, 4, 6], [4, 9, 3, 1, 1, 8]]) == 4\nassert solution.trapRainWater([[0, 8, 2, 6, 2, 0, 2, 2, 6, 8], [8, 9, 3, 2, 8, 7, 3, 6, 0, 1], [2, 7, 3, 6, 6, 9, 2, 5, 9, 5], [9, 7, 10, 1, 2, 8, 10, 3, 7, 2]]) == 3\nassert solution.trapRainWater([[4, 10], [7, 6], [7, 10], [1, 0], [9, 4], [0, 3], [0, 0], [8, 7], [8, 7], [1, 3]]) == 0\nassert solution.trapRainWater([[10, 3, 7, 9, 0, 7, 2, 7, 6, 2], [3, 1, 1, 3, 0, 6, 10, 3, 6, 9], [4, 1, 0, 9, 8, 7, 0, 1, 4, 6], [0, 1, 9, 2, 6, 4, 10, 6, 1, 5]]) == 9\nassert solution.trapRainWater([[4, 1, 8], [1, 4, 7], [8, 9, 6], [7, 4, 3], [7, 8, 6], [8, 2, 5], [7, 7, 4], [6, 4, 4]]) == 3\nassert solution.trapRainWater([[5], [1], [0], [8], [3], [1], [4], [3], [3], [2]]) == 0\nassert solution.trapRainWater([[2, 4, 10, 9, 2, 10, 7, 10], [0, 5, 0, 6, 2, 9, 3, 5], [10, 7, 9, 5, 3, 7, 2, 2], [3, 7, 4, 5, 10, 6, 5, 8], [1, 2, 6, 1, 5, 9, 6, 7], [4, 9, 3, 1, 10, 0, 3, 0], [8, 10, 8, 6, 10, 3, 7, 9], [7, 9, 5, 0, 1, 8, 0, 0], [5, 6, 10, 3, 5, 4, 8, 3]]) == 24\nassert solution.trapRainWater([[9, 1], [7, 10], [5, 3], [7, 4], [5, 2], [6, 0], [7, 2], [8, 9]]) == 0\nassert solution.trapRainWater([[8, 0, 6, 6, 1, 3, 10, 8, 1], [7, 2, 4, 6, 0, 2, 7, 0, 5], [9, 3, 7, 1, 10, 0, 0, 10, 4]]) == 6\nassert solution.trapRainWater([[0, 3, 6, 3, 8, 5, 3, 3], [9, 6, 0, 3, 0, 1, 9, 0], [6, 7, 1, 0, 8, 5, 9, 5], [7, 8, 10, 0, 2, 8, 8, 3]]) == 6\nassert solution.trapRainWater([[9], [9]]) == 0\nassert solution.trapRainWater([[7, 8, 6, 5, 6], [0, 5, 10, 8, 7], [9, 8, 2, 7, 6], [2, 2, 5, 2, 2], [3, 4, 1, 10, 10], [9, 1, 1, 3, 4], [0, 2, 8, 1, 9]]) == 6\nassert solution.trapRainWater([[9, 0, 0, 10, 6, 8, 3, 4, 10], [1, 0, 6, 2, 0, 8, 6, 5, 6], [9, 2, 8, 1, 8, 9, 5, 4, 9], [4, 1, 1, 8, 5, 0, 6, 1, 4], [10, 3, 8, 10, 10, 5, 5, 8, 2]]) == 25\nassert solution.trapRainWater([[5], [5], [1], [8], [4], [5], [5], [4]]) == 0\nassert solution.trapRainWater([[7, 10, 10, 8, 4, 1, 9, 10, 3, 5], [2, 1, 8, 10, 6, 9, 9, 2, 3, 5], [2, 4, 1, 10, 6, 5, 10, 2, 5, 4], [0, 7, 2, 4, 6, 4, 4, 1, 9, 1], [7, 10, 8, 10, 3, 6, 1, 10, 7, 5], [5, 2, 9, 0, 1, 9, 3, 5, 8, 10], [3, 0, 1, 9, 2, 4, 1, 1, 1, 0], [9, 3, 2, 0, 5, 8, 0, 4, 9, 1], [6, 6, 7, 9, 3, 3, 3, 4, 4, 0]]) == 33\nassert solution.trapRainWater([[0, 6, 3, 0, 6, 9], [7, 9, 7, 8, 4, 7], [2, 2, 6, 2, 8, 8], [10, 5, 7, 8, 2, 10], [1, 9, 8, 4, 9, 6], [5, 10, 10, 4, 8, 2], [4, 10, 9, 4, 3, 10]]) == 12\nassert solution.trapRainWater([[3, 4, 6, 7], [4, 3, 1, 10], [5, 1, 1, 10], [0, 9, 9, 9], [1, 2, 1, 1], [2, 2, 1, 6], [1, 6, 4, 10], [4, 7, 7, 4]]) == 10\nassert solution.trapRainWater([[8, 5, 1, 6, 1], [6, 3, 4, 7, 4], [8, 0, 3, 0, 10], [6, 2, 10, 0, 3]]) == 2\nassert solution.trapRainWater([[2, 9, 8, 10, 1, 0, 9, 1], [8, 9, 9, 10, 7, 1, 10, 7], [0, 3, 10, 0, 0, 5, 3, 8], [2, 6, 0, 5, 3, 9, 0, 7]]) == 6\nassert solution.trapRainWater([[1, 0, 5], [3, 8, 7], [4, 9, 0], [7, 3, 2], [2, 7, 9], [4, 10, 6], [10, 4, 5], [2, 3, 3]]) == 0\nassert solution.trapRainWater([[10, 4, 1, 1, 3, 1, 6, 8, 1, 2], [2, 9, 5, 1, 7, 0, 0, 10, 2, 4], [3, 6, 0, 4, 3, 7, 0, 1, 1, 4], [1, 6, 2, 2, 0, 7, 1, 4, 8, 8], [4, 4, 8, 2, 9, 5, 7, 10, 5, 6], [9, 7, 6, 0, 6, 1, 6, 1, 6, 7], [8, 2, 6, 8, 0, 1, 0, 3, 10, 2], [7, 10, 1, 0, 8, 0, 2, 3, 5, 0], [9, 0, 7, 3, 4, 0, 9, 10, 4, 6]]) == 36\nassert solution.trapRainWater([[10, 3, 9, 5, 3, 1, 1, 10, 6], [3, 2, 10, 0, 1, 1, 5, 4, 10], [2, 8, 6, 7, 9, 1, 3, 7, 2], [7, 1, 0, 5, 2, 5, 10, 10, 6], [9, 6, 4, 9, 7, 1, 5, 4, 7], [9, 3, 6, 0, 10, 7, 8, 1, 9], [10, 2, 5, 4, 8, 5, 8, 1, 7]]) == 24\nassert solution.trapRainWater([[7, 1, 0, 1, 1], [7, 3, 4, 8, 0]]) == 0\nassert solution.trapRainWater([[8, 1, 3, 8, 4], [2, 4, 7, 6, 5]]) == 0",
  "inefficient_solution": "class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        m, n = len(heightMap), len(heightMap[0])\n        vis = [[False] * n * n for _ in range(m * n)]\n        pq = []\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m - 1 or j == 0 or j == n - 1:\n                    heappush(pq, (heightMap[i][j], i * n + j))\n                    vis[i * n + j] = True\n        ans = 0\n        dirs = (-1, 0, 1, 0, -1)\n        while pq:\n            h, idx = heappop(pq)\n            i = idx // n\n            j = idx % n\n            for a, b in pairwise(dirs):\n                x, y = i + a, j + b\n                if x >= 0 and x < m and y >= 0 and y < n:\n                    for k in range(x * n + y, (x + 1) * n + y):\n                        ans += max(0, h - heightMap[x][y])\n                        vis[k] = True\n                        heappush(pq, (heightMap[x][y], k))\n        return ans",
  "is_python": true
}