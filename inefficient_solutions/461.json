{
  "problem_idx": 461,
  "task_name": "Hamming Distance",
  "markdown_description": "\nThe [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\n\n\nGiven two integers `x` and `y`, return *the **Hamming distance** between them*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** x = 1, y = 4\n**Output:** 2\n**Explanation:**\n1   (0 0 0 1)\n4   (0 1 0 0)\n       \u2191   \u2191\nThe above arrows point to positions where the corresponding bits are different.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** x = 3, y = 1\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <=\u00a0x, y <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        return (x ^ y).bit_count()\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        return (x ^ y).bit_count()\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random integer values for x and y\n    x = random.randint(0, 100)\n    y = random.randint(0, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.hammingDistance(x, y)\n\n    return x, y, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        x, y, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.hammingDistance(x, y) == expected_result\n        print(f\"assert solution.hammingDistance({x}, {y}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.hammingDistance({x}, {y}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.hammingDistance(35, 86) == 5\nassert solution.hammingDistance(43, 46) == 2\nassert solution.hammingDistance(14, 7) == 2\nassert solution.hammingDistance(89, 67) == 3\nassert solution.hammingDistance(96, 88) == 3\nassert solution.hammingDistance(69, 94) == 4\nassert solution.hammingDistance(39, 72) == 6\nassert solution.hammingDistance(47, 78) == 3\nassert solution.hammingDistance(40, 2) == 3\nassert solution.hammingDistance(3, 5) == 2\nassert solution.hammingDistance(87, 97) == 4\nassert solution.hammingDistance(86, 30) == 2\nassert solution.hammingDistance(11, 3) == 1\nassert solution.hammingDistance(99, 44) == 5\nassert solution.hammingDistance(75, 91) == 1\nassert solution.hammingDistance(99, 7) == 3\nassert solution.hammingDistance(71, 61) == 5\nassert solution.hammingDistance(86, 82) == 1\nassert solution.hammingDistance(53, 68) == 4\nassert solution.hammingDistance(38, 95) == 5\nassert solution.hammingDistance(79, 61) == 4\nassert solution.hammingDistance(67, 28) == 6\nassert solution.hammingDistance(43, 35) == 1\nassert solution.hammingDistance(38, 71) == 3\nassert solution.hammingDistance(17, 100) == 5\nassert solution.hammingDistance(80, 83) == 2\nassert solution.hammingDistance(85, 75) == 4\nassert solution.hammingDistance(0, 21) == 3\nassert solution.hammingDistance(1, 74) == 4\nassert solution.hammingDistance(23, 21) == 1\nassert solution.hammingDistance(77, 23) == 4\nassert solution.hammingDistance(57, 47) == 3\nassert solution.hammingDistance(7, 4) == 2\nassert solution.hammingDistance(63, 23) == 2\nassert solution.hammingDistance(24, 79) == 5\nassert solution.hammingDistance(75, 11) == 1\nassert solution.hammingDistance(48, 15) == 6\nassert solution.hammingDistance(77, 36) == 4\nassert solution.hammingDistance(12, 94) == 3\nassert solution.hammingDistance(70, 27) == 5\nassert solution.hammingDistance(61, 24) == 3\nassert solution.hammingDistance(10, 38) == 3\nassert solution.hammingDistance(45, 21) == 3\nassert solution.hammingDistance(57, 41) == 1\nassert solution.hammingDistance(74, 78) == 1\nassert solution.hammingDistance(80, 96) == 2\nassert solution.hammingDistance(26, 68) == 5\nassert solution.hammingDistance(3, 45) == 4\nassert solution.hammingDistance(50, 23) == 3\nassert solution.hammingDistance(95, 10) == 4\nassert solution.hammingDistance(99, 100) == 3\nassert solution.hammingDistance(23, 6) == 2\nassert solution.hammingDistance(78, 8) == 3\nassert solution.hammingDistance(90, 33) == 6\nassert solution.hammingDistance(25, 33) == 3\nassert solution.hammingDistance(70, 46) == 3\nassert solution.hammingDistance(89, 98) == 5\nassert solution.hammingDistance(36, 86) == 4\nassert solution.hammingDistance(50, 21) == 4\nassert solution.hammingDistance(95, 44) == 5\nassert solution.hammingDistance(93, 12) == 3\nassert solution.hammingDistance(20, 0) == 2\nassert solution.hammingDistance(11, 48) == 5\nassert solution.hammingDistance(94, 28) == 2\nassert solution.hammingDistance(74, 35) == 4\nassert solution.hammingDistance(54, 48) == 2\nassert solution.hammingDistance(81, 29) == 3\nassert solution.hammingDistance(42, 28) == 4\nassert solution.hammingDistance(50, 21) == 4\nassert solution.hammingDistance(14, 33) == 5\nassert solution.hammingDistance(46, 10) == 2\nassert solution.hammingDistance(13, 86) == 5\nassert solution.hammingDistance(58, 21) == 5\nassert solution.hammingDistance(55, 97) == 4\nassert solution.hammingDistance(72, 48) == 4\nassert solution.hammingDistance(53, 86) == 4\nassert solution.hammingDistance(19, 42) == 4\nassert solution.hammingDistance(45, 17) == 4\nassert solution.hammingDistance(37, 21) == 2\nassert solution.hammingDistance(94, 41) == 6\nassert solution.hammingDistance(97, 63) == 5\nassert solution.hammingDistance(83, 30) == 4\nassert solution.hammingDistance(100, 11) == 6\nassert solution.hammingDistance(51, 54) == 2\nassert solution.hammingDistance(37, 58) == 5\nassert solution.hammingDistance(16, 59) == 4\nassert solution.hammingDistance(2, 81) == 4\nassert solution.hammingDistance(60, 41) == 3\nassert solution.hammingDistance(17, 66) == 4\nassert solution.hammingDistance(94, 2) == 4\nassert solution.hammingDistance(85, 53) == 2\nassert solution.hammingDistance(36, 62) == 3\nassert solution.hammingDistance(70, 80) == 3\nassert solution.hammingDistance(33, 3) == 2\nassert solution.hammingDistance(56, 75) == 5\nassert solution.hammingDistance(78, 51) == 6\nassert solution.hammingDistance(34, 97) == 3\nassert solution.hammingDistance(43, 45) == 2\nassert solution.hammingDistance(75, 42) == 3\nassert solution.hammingDistance(99, 62) == 5",
  "inefficient_solution": "class Solution:\n    def hammingDistance(self, x: int, y: int) -> int:\n        bits = []\n        while x > 0 or y > 0:\n            bits.append(x % 2)\n            x //= 2\n            bits.append(y % 2)\n            y //= 2\n        count = 0\n        for i in range(len(bits)):\n            if bits[i] != bits[(i + 1) % len(bits)]:\n                count += 1\n        return count",
  "is_python": true
}