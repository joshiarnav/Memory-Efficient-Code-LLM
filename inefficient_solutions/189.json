{
  "problem_idx": 189,
  "task_name": "Rotate Array",
  "markdown_description": "\nGiven an integer array `nums`, rotate the array to the right by `k` steps, where `k` is non-negative.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5,6,7], k = 3\n**Output:** [5,6,7,1,2,3,4]\n**Explanation:**\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,-100,3,99], k = 2\n**Output:** [3,99,-1,-100]\n**Explanation:** \nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-231 <= nums[i] <= 231 - 1`\n* `0 <= k <= 105`\n\n\n\u00a0\n\n\n**Follow up:**\n\n\n* Try to come up with as many solutions as you can. There are at least **three** different ways to solve this problem.\n* Could you do it in-place with `O(1)` extra space?\n\n\n",
  "canonical_solution": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        k %= len(nums)\n        nums[:] = nums[-k:] + nums[:-k]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        k %= len(nums)\n        nums[:] = nums[-k:] + nums[:-k]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(6, 10))\n    \n    # Generate a random target sum\n    k = random.randint(1, 11)\n\n    # Rotate the nums list using the provided Solution class\n    nums_copy = nums.copy()\n    solution.rotate(nums_copy, k)\n\n    return nums, k, nums_copy\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, nums_copy = generate_test_case()\n        solution = Solution()\n        solution.rotate(nums, k)\n        assert nums == nums_copy\n        print(f\"assert nums == {nums_copy}\")\n        test_case_generator_results.append(f\"assert nums == {nums_copy}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert nums == [58, 82, 30, 51, 94, 99, 68, 95, 69, 60]\nassert nums == [14, 66, 50, 44, 47, 88, 62, 60, 12, 61]\nassert nums == [16, 93, 94, 1, 54, 86, 62]\nassert nums == [56, 76, 36, 34, 14, 47]\nassert nums == [34, 30, 13, 16, 25, 15, 75]\nassert nums == [62, 10, 69, 90, 27, 67, 81, 48, 20]\nassert nums == [18, 46, 29, 31, 23, 61, 80]\nassert nums == [76, 36, 87, 11, 89, 33]\nassert nums == [47, 92, 80, 3, 55, 12, 65, 77, 53]\nassert nums == [76, 77, 50, 79, 45, 7]\nassert nums == [13, 62, 43, 40, 51, 7, 9, 55]\nassert nums == [67, 39, 11, 7, 85, 24]\nassert nums == [73, 21, 25, 29, 42, 90, 63, 35, 22]\nassert nums == [8, 5, 47, 4, 73, 35]\nassert nums == [11, 81, 33, 80, 73, 100, 85, 62]\nassert nums == [53, 52, 94, 89, 39, 27, 12, 95]\nassert nums == [55, 51, 43, 52, 61, 79, 16, 46]\nassert nums == [13, 95, 90, 50, 46, 72]\nassert nums == [7, 71, 52, 49, 22, 57, 75]\nassert nums == [95, 88, 79, 55, 91, 39, 65, 23, 38]\nassert nums == [29, 15, 8, 23, 26, 98, 4, 58, 33]\nassert nums == [29, 59, 33, 70, 41, 98]\nassert nums == [56, 20, 36, 22, 5, 74, 85, 64]\nassert nums == [54, 23, 39, 33, 16, 34]\nassert nums == [54, 9, 71, 47, 55, 7]\nassert nums == [51, 35, 52, 91, 75, 76, 80, 78]\nassert nums == [36, 43, 92, 70, 62, 10, 77, 72]\nassert nums == [68, 34, 100, 23, 7, 38, 11, 48, 27, 1]\nassert nums == [9, 50, 34, 4, 87, 58, 73, 72, 60, 71]\nassert nums == [79, 90, 88, 26, 36, 80]\nassert nums == [67, 74, 54, 65, 30, 16]\nassert nums == [20, 39, 30, 32, 83, 19, 66, 90]\nassert nums == [91, 83, 77, 65, 30, 22, 44, 48]\nassert nums == [76, 90, 79, 30, 70, 60, 53, 19, 1, 86]\nassert nums == [97, 26, 44, 23, 92, 98, 83, 38, 52]\nassert nums == [94, 92, 98, 97, 86, 6, 72, 5, 9, 41]\nassert nums == [74, 80, 38, 100, 17, 2, 83, 46, 93, 6]\nassert nums == [51, 20, 21, 69, 38, 53, 16]\nassert nums == [58, 17, 54, 11, 89, 70, 21, 56]\nassert nums == [79, 22, 43, 58, 42, 57, 10, 34]\nassert nums == [97, 98, 52, 37, 84, 13]\nassert nums == [42, 10, 15, 25, 52, 58, 6, 31, 2]\nassert nums == [12, 71, 39, 3, 30, 79]\nassert nums == [14, 88, 24, 92, 70, 26, 54]\nassert nums == [20, 44, 57, 65, 99, 23, 68, 90]\nassert nums == [98, 49, 8, 2, 48, 81, 30, 37, 52, 21]\nassert nums == [27, 2, 83, 47, 63, 34, 49, 58, 72]\nassert nums == [63, 88, 32, 67, 36, 6]\nassert nums == [62, 23, 60, 20, 45, 48, 11, 88]\nassert nums == [20, 57, 44, 67, 38, 100, 21, 25, 3, 75]\nassert nums == [91, 53, 29, 51, 45, 59, 12, 35, 26]\nassert nums == [58, 28, 71, 74, 99, 4]\nassert nums == [51, 76, 10, 14, 68, 41, 42, 4, 35]\nassert nums == [20, 92, 16, 22, 3, 53, 43, 51, 52]\nassert nums == [57, 28, 4, 52, 54, 41, 90]\nassert nums == [52, 11, 1, 32, 81, 43, 72, 56]\nassert nums == [85, 29, 57, 73, 64, 48, 51, 63]\nassert nums == [35, 32, 99, 18, 82, 79, 83, 95, 78, 88]\nassert nums == [64, 18, 96, 55, 14, 16, 66, 95, 22, 76]\nassert nums == [70, 55, 63, 6, 89, 39, 4]\nassert nums == [61, 89, 40, 48, 17, 64, 58, 98, 38, 24]\nassert nums == [86, 52, 1, 96, 15, 80]\nassert nums == [53, 1, 71, 80, 54, 46, 13]\nassert nums == [84, 20, 99, 55, 100, 29, 7, 28, 80, 2]\nassert nums == [37, 67, 12, 32, 33, 42, 36, 16, 25, 41]\nassert nums == [53, 28, 74, 43, 34, 23, 67, 80, 17]\nassert nums == [53, 60, 25, 15, 10, 7, 11, 91, 90]\nassert nums == [63, 13, 86, 96, 18, 9, 3, 48, 79, 75]\nassert nums == [29, 10, 12, 45, 96, 59, 24, 11, 62]\nassert nums == [65, 39, 30, 48, 80, 86]\nassert nums == [4, 64, 20, 72, 37, 51, 98]\nassert nums == [14, 83, 40, 30, 32, 99, 10]\nassert nums == [45, 100, 64, 26, 73, 97, 81, 27, 77, 65]\nassert nums == [27, 18, 58, 39, 97, 54, 11]\nassert nums == [98, 40, 97, 21, 16, 39, 15, 86, 7]\nassert nums == [19, 9, 11, 4, 5, 74]\nassert nums == [98, 60, 89, 84, 6, 45, 21]\nassert nums == [31, 49, 2, 8, 77, 66, 60, 93, 45]\nassert nums == [28, 83, 54, 99, 15, 51, 70]\nassert nums == [50, 26, 89, 79, 75, 72]\nassert nums == [30, 39, 67, 2, 93, 92, 73, 86, 41]\nassert nums == [92, 71, 38, 72, 78, 27]\nassert nums == [26, 90, 20, 48, 22, 83, 75]\nassert nums == [95, 73, 17, 43, 80, 38, 93]\nassert nums == [100, 93, 1, 50, 72, 64]\nassert nums == [53, 69, 29, 77, 47, 55, 57, 40]\nassert nums == [74, 16, 91, 27, 57, 97]\nassert nums == [73, 84, 88, 57, 87, 64, 37, 28, 17]\nassert nums == [7, 82, 70, 78, 32, 85]\nassert nums == [10, 47, 8, 23, 67, 54, 39]\nassert nums == [96, 34, 53, 22, 39, 90, 68, 87, 47, 2]\nassert nums == [68, 74, 25, 80, 3, 89, 8]\nassert nums == [93, 44, 60, 76, 73, 62, 96, 67, 29]\nassert nums == [30, 20, 67, 88, 19, 24, 33, 71, 47]\nassert nums == [56, 17, 25, 43, 62, 9, 48, 60]\nassert nums == [3, 34, 1, 2, 86, 38, 69]\nassert nums == [50, 56, 33, 5, 11, 53, 2, 95, 52, 88]\nassert nums == [65, 99, 21, 96, 100, 39]\nassert nums == [27, 73, 5, 58, 69, 99, 89, 4, 70, 35]\nassert nums == [69, 84, 78, 25, 18, 5, 26, 48, 35]",
  "inefficient_solution": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        k %= len(nums)\n        nums_copy = [0]*len(nums)\n        for i in range(len(nums)):\n            nums_copy[i] = nums[i]\n        nums_rotated = [0]*len(nums)\n        for i in range(len(nums)):\n            j = (i + k) % len(nums)\n            nums_rotated[i] = nums_copy[j]\n        nums[:] = nums_rotated",
  "is_python": true
}