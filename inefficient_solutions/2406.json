{
  "problem_idx": 2406,
  "task_name": "Divide Intervals Into Minimum Number of Groups",
  "markdown_description": "\nYou are given a 2D integer array `intervals` where `intervals[i] = [lefti, righti]` represents the **inclusive** interval `[lefti, righti]`.\n\n\nYou have to divide the intervals into one or more **groups** such that each interval is in **exactly** one group, and no two intervals that are in the same group **intersect** each other.\n\n\nReturn *the **minimum** number of groups you need to make*.\n\n\nTwo intervals **intersect** if there is at least one common number between them. For example, the intervals `[1, 5]` and `[5, 8]` intersect.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\n**Output:** 3\n**Explanation:** We can divide the intervals into the following groups:\n- Group 1: [1, 5], [6, 8].\n- Group 2: [2, 3], [5, 10].\n- Group 3: [1, 10].\nIt can be proven that it is not possible to divide the intervals into fewer than 3 groups.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** intervals = [[1,3],[5,6],[8,10],[11,13]]\n**Output:** 1\n**Explanation:** None of the intervals overlap, so we can put all of them in one group.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= intervals.length <= 105`\n* `intervals[i].length == 2`\n* `1 <= lefti <= righti <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def minGroups(self, intervals: List[List[int]]) -> int:\n        h = []\n        for a, b in sorted(intervals):\n            if h and h[0] < a:\n                heappop(h)\n            heappush(h, b)\n        return len(h)\n",
  "test_case_generator": "\n\nimport random\nfrom heapq import heappush, heappop\nfrom typing import List\n\nclass Solution:\n    def minGroups(self, intervals: List[List[int]]) -> int:\n        h = []\n        for a, b in sorted(intervals):\n            if h and h[0] < a:\n                heappop(h)\n            heappush(h, b)\n        return len(h)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random intervals list\n    intervals = []\n    for _ in range(random.randint(2, 10)):\n        a = random.randint(1, 10)\n        b = a + random.randint(1, 10)\n        intervals.append([a, b])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minGroups(intervals)\n\n    return intervals, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        intervals, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minGroups(intervals) == expected_result\n        print(f\"assert solution.minGroups({intervals}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minGroups({intervals}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.minGroups([[1, 11], [7, 10], [3, 12], [9, 16]]) == 4\nassert solution.minGroups([[3, 7], [2, 4], [10, 13], [8, 9], [1, 10], [1, 10]]) == 4\nassert solution.minGroups([[6, 12], [10, 11], [8, 11], [2, 4], [10, 14], [8, 11], [10, 17]]) == 6\nassert solution.minGroups([[4, 8], [4, 8], [3, 10], [2, 11], [2, 7], [3, 7], [3, 11], [5, 10], [8, 12], [7, 12]]) == 9\nassert solution.minGroups([[8, 17], [6, 11], [1, 11]]) == 3\nassert solution.minGroups([[5, 14], [8, 16], [5, 9]]) == 3\nassert solution.minGroups([[1, 2], [1, 2], [3, 11], [1, 11], [9, 10], [1, 7], [3, 11], [10, 20]]) == 5\nassert solution.minGroups([[3, 4], [5, 9], [3, 13], [9, 10], [1, 9], [6, 14], [2, 3], [10, 15], [6, 7]]) == 5\nassert solution.minGroups([[7, 16], [5, 8], [5, 11], [9, 13], [4, 8], [2, 7], [10, 16], [7, 14]]) == 6\nassert solution.minGroups([[5, 8], [6, 12], [5, 11], [3, 11], [9, 17], [10, 15]]) == 5\nassert solution.minGroups([[9, 14], [4, 7], [3, 4], [10, 12], [7, 16], [8, 9], [9, 19], [6, 7]]) == 4\nassert solution.minGroups([[3, 9], [9, 17], [5, 10], [2, 8]]) == 3\nassert solution.minGroups([[9, 12], [1, 7], [1, 9], [3, 5], [7, 13], [8, 18], [10, 14], [4, 9], [1, 11]]) == 6\nassert solution.minGroups([[10, 15], [9, 12], [10, 16], [1, 11], [10, 14], [10, 16], [6, 10], [4, 6], [1, 5]]) == 7\nassert solution.minGroups([[5, 12], [7, 9], [8, 18], [9, 17], [6, 8], [9, 18], [9, 17], [1, 11]]) == 7\nassert solution.minGroups([[6, 11], [10, 19], [9, 18], [6, 10]]) == 4\nassert solution.minGroups([[3, 10], [5, 11], [9, 10], [6, 8]]) == 3\nassert solution.minGroups([[2, 5], [10, 11], [6, 15], [9, 17], [2, 5], [9, 19], [4, 8], [3, 7]]) == 4\nassert solution.minGroups([[9, 16], [3, 5], [3, 10], [1, 10], [10, 15], [6, 13], [1, 9], [7, 13], [3, 4], [6, 12]]) == 7\nassert solution.minGroups([[5, 8], [8, 18], [10, 17], [5, 15]]) == 3\nassert solution.minGroups([[8, 14], [7, 14], [1, 4]]) == 2\nassert solution.minGroups([[8, 13], [8, 10], [10, 15], [9, 14], [2, 4], [7, 11], [2, 11]]) == 6\nassert solution.minGroups([[8, 15], [2, 9], [1, 7], [10, 17], [1, 6], [10, 12], [1, 9]]) == 4\nassert solution.minGroups([[9, 17], [10, 14], [8, 16], [7, 9], [9, 13], [4, 5], [9, 11], [4, 7], [10, 16]]) == 6\nassert solution.minGroups([[4, 10], [9, 18], [10, 14], [10, 17], [8, 13], [1, 5]]) == 5\nassert solution.minGroups([[3, 6], [5, 8], [4, 14], [8, 12], [7, 10], [3, 8], [5, 15]]) == 6\nassert solution.minGroups([[10, 19], [10, 16], [10, 11], [2, 5], [8, 14], [4, 6], [4, 11]]) == 5\nassert solution.minGroups([[7, 15], [4, 12], [8, 9], [7, 9], [9, 11], [1, 3], [5, 14]]) == 6\nassert solution.minGroups([[8, 18], [8, 17]]) == 2\nassert solution.minGroups([[8, 14], [8, 13], [2, 10], [3, 7], [8, 18], [5, 15], [6, 9]]) == 6\nassert solution.minGroups([[4, 13], [10, 19], [8, 11], [9, 13], [6, 13], [3, 13], [4, 10], [4, 7], [10, 14], [8, 10]]) == 9\nassert solution.minGroups([[9, 17], [10, 20], [5, 11], [10, 15], [10, 20], [9, 18], [10, 15], [1, 2], [6, 9]]) == 7\nassert solution.minGroups([[1, 4], [3, 9]]) == 2\nassert solution.minGroups([[2, 4], [10, 16], [8, 12], [9, 12], [8, 18], [7, 16], [4, 5], [7, 10], [1, 3]]) == 6\nassert solution.minGroups([[8, 10], [6, 13], [7, 16], [10, 15]]) == 4\nassert solution.minGroups([[2, 5], [1, 2], [3, 7], [8, 11], [10, 18], [4, 14], [4, 6], [3, 7], [3, 6]]) == 6\nassert solution.minGroups([[2, 7], [8, 12], [6, 15], [8, 16], [2, 8], [3, 12], [7, 16]]) == 6\nassert solution.minGroups([[2, 11], [2, 6], [2, 8]]) == 3\nassert solution.minGroups([[1, 11], [6, 9], [2, 10], [10, 16], [8, 17], [5, 13], [8, 17]]) == 6\nassert solution.minGroups([[2, 10], [10, 18], [9, 13], [10, 15], [8, 17], [2, 10], [4, 7]]) == 6\nassert solution.minGroups([[5, 10], [10, 11]]) == 2\nassert solution.minGroups([[5, 13], [2, 6], [5, 13], [8, 16], [4, 14], [4, 5], [10, 14], [1, 5], [7, 13], [10, 13]]) == 7\nassert solution.minGroups([[5, 6], [7, 11], [5, 15], [1, 4], [2, 4], [1, 2], [9, 12], [9, 18]]) == 4\nassert solution.minGroups([[10, 17], [8, 17], [8, 15]]) == 3\nassert solution.minGroups([[6, 15], [5, 14], [9, 19], [3, 5], [8, 11], [1, 8], [2, 9], [5, 10]]) == 6\nassert solution.minGroups([[1, 4], [2, 4], [7, 11], [5, 13], [4, 6], [1, 7], [7, 13]]) == 4\nassert solution.minGroups([[9, 16], [3, 13], [9, 10], [5, 11]]) == 4\nassert solution.minGroups([[5, 12], [9, 11], [8, 12], [3, 7], [8, 13], [3, 11], [3, 8], [9, 11], [8, 13]]) == 7\nassert solution.minGroups([[3, 12], [8, 17], [4, 9], [5, 11], [4, 14]]) == 5\nassert solution.minGroups([[6, 10], [1, 4], [8, 14], [6, 15], [10, 16]]) == 4\nassert solution.minGroups([[7, 15], [5, 6], [4, 13]]) == 2\nassert solution.minGroups([[9, 18], [5, 6], [6, 10], [2, 5], [3, 11], [2, 9], [9, 13], [7, 9]]) == 6\nassert solution.minGroups([[7, 12], [5, 8], [6, 10]]) == 3\nassert solution.minGroups([[2, 8], [3, 9], [5, 12], [9, 12], [10, 19], [8, 14], [4, 12], [8, 14], [9, 16]]) == 7\nassert solution.minGroups([[9, 19], [2, 4], [4, 6], [6, 11], [2, 12], [6, 12], [2, 10], [4, 5], [6, 15], [10, 19]]) == 7\nassert solution.minGroups([[5, 11], [2, 10], [7, 11], [6, 7], [6, 9], [10, 12], [1, 10]]) == 6\nassert solution.minGroups([[4, 7], [3, 5], [9, 18], [3, 13], [7, 16]]) == 3\nassert solution.minGroups([[8, 12], [10, 16], [1, 8]]) == 2\nassert solution.minGroups([[1, 2], [10, 20], [9, 17], [10, 18], [6, 14], [8, 12], [6, 9]]) == 5\nassert solution.minGroups([[5, 6], [5, 12], [1, 10]]) == 3\nassert solution.minGroups([[9, 17], [7, 10], [6, 12], [6, 13], [6, 7], [7, 13]]) == 5\nassert solution.minGroups([[3, 8], [6, 9], [9, 13], [8, 18], [5, 13], [6, 12], [10, 18], [1, 7], [8, 13], [8, 16]]) == 7\nassert solution.minGroups([[4, 8], [4, 14], [3, 9]]) == 3\nassert solution.minGroups([[7, 14], [4, 14], [9, 16], [3, 13], [8, 18], [5, 8]]) == 5\nassert solution.minGroups([[8, 17], [4, 6]]) == 1\nassert solution.minGroups([[6, 9], [4, 5], [9, 14], [2, 12], [5, 15], [9, 18], [2, 3], [1, 6]]) == 5\nassert solution.minGroups([[2, 12], [4, 9]]) == 2\nassert solution.minGroups([[3, 6], [5, 15], [2, 12], [5, 9], [7, 16], [7, 17], [2, 8], [6, 7], [10, 20]]) == 7\nassert solution.minGroups([[10, 12], [6, 11], [1, 11], [6, 8]]) == 3\nassert solution.minGroups([[1, 9], [1, 10], [4, 14], [7, 17], [2, 8], [10, 14], [6, 15], [10, 14], [7, 16], [9, 13]]) == 8\nassert solution.minGroups([[10, 16], [1, 8], [4, 5], [5, 7], [9, 16]]) == 3\nassert solution.minGroups([[4, 5], [3, 10], [7, 17], [8, 16], [1, 11]]) == 4\nassert solution.minGroups([[4, 7], [1, 7], [4, 9], [1, 3], [1, 7], [1, 3], [9, 11], [4, 12]]) == 5\nassert solution.minGroups([[2, 6], [5, 8], [3, 8], [2, 5], [9, 10], [4, 6]]) == 5\nassert solution.minGroups([[4, 8], [10, 18], [6, 12], [6, 12]]) == 3\nassert solution.minGroups([[8, 17], [9, 13], [2, 11], [6, 13]]) == 4\nassert solution.minGroups([[10, 14], [5, 14]]) == 2\nassert solution.minGroups([[7, 10], [9, 17], [4, 6], [6, 7]]) == 2\nassert solution.minGroups([[6, 12], [3, 7], [8, 12], [3, 9], [3, 10], [5, 10], [6, 13], [1, 7], [10, 14], [3, 11]]) == 8\nassert solution.minGroups([[9, 12], [2, 8], [9, 14], [7, 10], [10, 18], [7, 12]]) == 5\nassert solution.minGroups([[9, 11], [7, 8], [4, 13]]) == 2\nassert solution.minGroups([[3, 8], [6, 12], [2, 7], [9, 15], [9, 17], [4, 13], [3, 6]]) == 5\nassert solution.minGroups([[2, 7], [6, 11], [1, 4], [9, 11], [10, 16], [2, 6], [7, 10], [6, 9], [7, 8]]) == 5\nassert solution.minGroups([[6, 14], [3, 11], [10, 20], [3, 9], [10, 11], [2, 3], [8, 9], [10, 15], [8, 13]]) == 6\nassert solution.minGroups([[2, 11], [8, 17], [8, 9], [7, 8], [10, 18]]) == 4\nassert solution.minGroups([[9, 10], [10, 20], [6, 9], [1, 11], [9, 10], [9, 11], [7, 10], [8, 11], [9, 19]]) == 8\nassert solution.minGroups([[7, 11], [5, 7], [4, 6], [8, 10], [2, 5], [1, 2]]) == 3\nassert solution.minGroups([[6, 9], [2, 12], [10, 19]]) == 2\nassert solution.minGroups([[7, 11], [3, 9], [4, 12], [5, 12], [5, 14], [6, 7], [10, 13], [3, 9], [7, 11]]) == 8\nassert solution.minGroups([[4, 13], [2, 7], [8, 11], [8, 14], [1, 6], [5, 15], [1, 2], [2, 12], [7, 16]]) == 6\nassert solution.minGroups([[3, 5], [9, 13], [8, 18], [1, 2], [7, 10], [6, 10], [2, 9], [6, 15], [5, 11], [3, 5]]) == 7\nassert solution.minGroups([[6, 11], [6, 13], [8, 12], [5, 15], [6, 8], [5, 14], [4, 11]]) == 7\nassert solution.minGroups([[4, 7], [5, 14], [7, 11], [2, 6], [9, 15], [9, 11], [3, 13], [4, 7]]) == 5\nassert solution.minGroups([[7, 16], [5, 12], [3, 4], [4, 14], [5, 13], [5, 11], [10, 15], [3, 7], [1, 6]]) == 6\nassert solution.minGroups([[8, 11], [6, 14], [10, 13], [7, 15], [9, 10], [8, 13], [5, 11], [9, 11], [8, 10]]) == 9\nassert solution.minGroups([[3, 5], [1, 7], [4, 8], [10, 15], [1, 7], [1, 8], [10, 11], [8, 16], [6, 12]]) == 5\nassert solution.minGroups([[2, 6], [4, 8], [9, 10], [5, 12], [2, 5], [7, 9], [5, 14], [10, 15]]) == 5\nassert solution.minGroups([[7, 12], [2, 9], [2, 6], [2, 7], [7, 13], [2, 5], [1, 5], [1, 8]]) == 6\nassert solution.minGroups([[2, 3], [6, 15], [2, 10], [10, 12], [5, 9], [1, 9]]) == 4\nassert solution.minGroups([[5, 12], [10, 15], [6, 13]]) == 3",
  "inefficient_solution": "class Solution:\n    def minGroups(self, intervals: List[List[int]]) -> int:\n        count = 0\n        for i in range(len(intervals)):\n            count += 1\n            for j in range(i + 1, len(intervals)):\n                if intervals[j][0] <= intervals[i][1] and intervals[i][0] <= intervals[j][1]:\n                    count += 1\n        max_count = 0\n        for i in range(len(intervals)):\n            count = 0\n            for j in range(len(intervals)):\n                if intervals[j][0] > intervals[i][1] or intervals[i][0] > intervals[j][1]:\n                    continue\n                count += 1\n            max_count = max(max_count, count)\n        return max_count",
  "is_python": true
}