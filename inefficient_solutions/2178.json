{
  "problem_idx": 2178,
  "task_name": "Maximum Split of Positive Even Integers",
  "markdown_description": "\nYou are given an integer `finalSum`. Split it into a sum of a **maximum** number of **unique** positive even integers.\n\n\n* For example, given `finalSum = 12`, the following splits are **valid** (unique positive even integers summing up to `finalSum`): `(12)`, `(2 + 10)`, `(2 + 4 + 6)`, and `(4 + 8)`. Among them, `(2 + 4 + 6)` contains the maximum number of integers. Note that `finalSum` cannot be split into `(2 + 2 + 4 + 4)` as all the numbers should be unique.\n\n\nReturn *a list of integers that represent a valid split containing a **maximum** number of integers*. If no valid split exists for `finalSum`, return *an **empty** list*. You may return the integers in **any** order.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** finalSum = 12\n**Output:** [2,4,6]\n**Explanation:** The following are valid splits: (12), (2 + 10), (2 + 4 + 6), and (4 + 8).\n(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6].\nNote that [2,6,4], [6,2,4], etc. are also accepted.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** finalSum = 7\n**Output:** []\n**Explanation:** There are no valid splits for the given finalSum.\nThus, we return an empty array.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** finalSum = 28\n**Output:** [6,8,2,12]\n**Explanation:** The following are valid splits: (2 + 26), (6 + 8 + 2 + 12), and (4 + 24). \n(6 + 8 + 2 + 12) has the maximum number of integers, which is 4. Thus, we return [6,8,2,12].\nNote that [10,2,4,12], [6,2,4,16], etc. are also accepted.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= finalSum <= 1010`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumEvenSplit(self, finalSum: int) -> List[int]:\n        if finalSum % 2:\n            return []\n        i = 2\n        ans = []\n        while i <= finalSum:\n            ans.append(i)\n            finalSum -= i\n            i += 2\n        ans[-1] += finalSum\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maximumEvenSplit(self, finalSum: int) -> List[int]:\n        if finalSum % 2:\n            return []\n        i = 2\n        ans = []\n        while i <= finalSum:\n            ans.append(i)\n            finalSum -= i\n            i += 2\n        ans[-1] += finalSum\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random finalSum\n    finalSum = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumEvenSplit(finalSum)\n\n    return finalSum, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        finalSum, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumEvenSplit(finalSum) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.maximumEvenSplit({finalSum}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.maximumEvenSplit({finalSum}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumEvenSplit(60) == [2, 4, 6, 8, 10, 12, 18]\nassert solution.maximumEvenSplit(68) == [2, 4, 6, 8, 10, 12, 26]\nassert solution.maximumEvenSplit(46) == [2, 4, 6, 8, 10, 16]\nassert solution.maximumEvenSplit(44) == [2, 4, 6, 8, 10, 14]\nassert solution.maximumEvenSplit(78) == [2, 4, 6, 8, 10, 12, 14, 22]\nassert solution.maximumEvenSplit(78) == [2, 4, 6, 8, 10, 12, 14, 22]\nassert solution.maximumEvenSplit(26) == [2, 4, 6, 14]\nassert solution.maximumEvenSplit(6) == [2, 4]\nassert solution.maximumEvenSplit(6) == [2, 4]\nassert solution.maximumEvenSplit(82) == [2, 4, 6, 8, 10, 12, 14, 26]\nassert solution.maximumEvenSplit(10) == [2, 8]\nassert solution.maximumEvenSplit(24) == [2, 4, 6, 12]\nassert solution.maximumEvenSplit(76) == [2, 4, 6, 8, 10, 12, 14, 20]\nassert solution.maximumEvenSplit(34) == [2, 4, 6, 8, 14]\nassert solution.maximumEvenSplit(86) == [2, 4, 6, 8, 10, 12, 14, 30]\nassert solution.maximumEvenSplit(2) == [2]\nassert solution.maximumEvenSplit(46) == [2, 4, 6, 8, 10, 16]\nassert solution.maximumEvenSplit(88) == [2, 4, 6, 8, 10, 12, 14, 32]\nassert solution.maximumEvenSplit(100) == [2, 4, 6, 8, 10, 12, 14, 16, 28]\nassert solution.maximumEvenSplit(64) == [2, 4, 6, 8, 10, 12, 22]\nassert solution.maximumEvenSplit(26) == [2, 4, 6, 14]\nassert solution.maximumEvenSplit(28) == [2, 4, 6, 16]\nassert solution.maximumEvenSplit(56) == [2, 4, 6, 8, 10, 12, 14]\nassert solution.maximumEvenSplit(62) == [2, 4, 6, 8, 10, 12, 20]\nassert solution.maximumEvenSplit(46) == [2, 4, 6, 8, 10, 16]\nassert solution.maximumEvenSplit(92) == [2, 4, 6, 8, 10, 12, 14, 16, 20]\nassert solution.maximumEvenSplit(16) == [2, 4, 10]\nassert solution.maximumEvenSplit(50) == [2, 4, 6, 8, 10, 20]\nassert solution.maximumEvenSplit(76) == [2, 4, 6, 8, 10, 12, 14, 20]\nassert solution.maximumEvenSplit(66) == [2, 4, 6, 8, 10, 12, 24]\nassert solution.maximumEvenSplit(96) == [2, 4, 6, 8, 10, 12, 14, 16, 24]\nassert solution.maximumEvenSplit(88) == [2, 4, 6, 8, 10, 12, 14, 32]\nassert solution.maximumEvenSplit(90) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert solution.maximumEvenSplit(18) == [2, 4, 12]\nassert solution.maximumEvenSplit(84) == [2, 4, 6, 8, 10, 12, 14, 28]\nassert solution.maximumEvenSplit(52) == [2, 4, 6, 8, 10, 22]\nassert solution.maximumEvenSplit(100) == [2, 4, 6, 8, 10, 12, 14, 16, 28]\nassert solution.maximumEvenSplit(12) == [2, 4, 6]\nassert solution.maximumEvenSplit(78) == [2, 4, 6, 8, 10, 12, 14, 22]\nassert solution.maximumEvenSplit(70) == [2, 4, 6, 8, 10, 12, 28]\nassert solution.maximumEvenSplit(60) == [2, 4, 6, 8, 10, 12, 18]\nassert solution.maximumEvenSplit(26) == [2, 4, 6, 14]\nassert solution.maximumEvenSplit(38) == [2, 4, 6, 8, 18]\nassert solution.maximumEvenSplit(90) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert solution.maximumEvenSplit(48) == [2, 4, 6, 8, 10, 18]",
  "inefficient_solution": "class Solution:\n    def maximumEvenSplit(self, finalSum: int) -> List[int]:\n        if finalSum % 2:\n            return []\n        \n        # Initialize a list to store all possible even numbers\n        even_nums = []\n        for i in range(2, finalSum + 1, 2):\n            even_nums.append(i)\n        \n        # Initialize a list to store the indices of the even numbers used\n        used_indices = []\n        \n        # Initialize the index of the current even number\n        i = 0\n        \n        # Keep selecting even numbers until we can't anymore\n        while i < len(even_nums):\n            # Check if we can use the current even number\n            if finalSum - even_nums[i] >= 0:\n                # Add the current even number to the used list\n                used_indices.append(i)\n                # Subtract the current even number from the final sum\n                finalSum -= even_nums[i]\n            else:\n                break\n            \n            # Move to the next even number\n            i += 1\n        \n        # Initialize the result list\n        result = []\n        # For each used index, add the corresponding even number to the result list\n        for index in used_indices:\n            result.append(even_nums[index])\n        \n        # If the final sum is not zero, add it to the result list\n        if finalSum != 0:\n            result.append(finalSum)\n        \n        return result",
  "is_python": true
}