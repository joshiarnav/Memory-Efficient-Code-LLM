{
  "problem_idx": 862,
  "task_name": "Shortest Subarray with Sum at Least K",
  "markdown_description": "\nGiven an integer array `nums` and an integer `k`, return *the length of the shortest non-empty **subarray** of* `nums` *with a sum of at least* `k`. If there is no such **subarray**, return `-1`.\n\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** nums = [1], k = 1\n**Output:** 1\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** nums = [1,2], k = 4\n**Output:** -1\n\n```\n**Example 3:**\n\n\n\n```\n**Input:** nums = [2,-1,2], k = 3\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-105 <= nums[i] <= 105`\n* `1 <= k <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def shortestSubarray(self, nums: List[int], k: int) -> int:\n        s = list(accumulate(nums, initial=0))\n        q = deque()\n        ans = inf\n        for i, v in enumerate(s):\n            while q and v - s[q[0]] >= k:\n                ans = min(ans, i - q.popleft())\n            while q and s[q[-1]] >= v:\n                q.pop()\n            q.append(i)\n        return -1 if ans == inf else ans\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\nclass Solution:\n    def shortestSubarray(self, nums: List[int], k: int) -> int:\n        s = list(accumulate(nums, initial=0))\n        q = deque()\n        ans = inf\n        for i, v in enumerate(s):\n            while q and v - s[q[0]] >= k:\n                ans = min(ans, i - q.popleft())\n            while q and s[q[-1]] >= v:\n                q.pop()\n            q.append(i)\n        return -1 if ans == inf else ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(-100000, 100001), random.randint(1, 101))\n    \n    # Generate a random target sum\n    k = random.randint(1, 1000000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.shortestSubarray(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.shortestSubarray(nums, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.shortestSubarray({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.shortestSubarray([50773, 25587, -8352, -90909, -50602, -20879, 86889, -63112, 82253, -98005, 96631, -10550, 8547, -64817, -2649, 96177, -87767, -31072, -32758, -44994, 53230, 57312, 25299, -74587, -86563, -90812, -97146, -13157, 15496, -34325, 94722, 45011, 96512, 71182, 90662, -37602, 57970, -38153, 9022, -72176, -71923, 58399, 49333, 3301, -311, 70601, 74763, -7895, -17392, -48027, -17537, 91599, -58909, 40122, -77243, -10736, -14812, -34091, 48704, 29851, -12198, -29609, -24805], 448370466) == -1\nassert solution.shortestSubarray([-98298, 38829, -88464, -9912, -59526, 707, 28719, -32366, 93318, 58830, -95398, -92307, -39097, 96999, -20882, 86347, -89237, 58868, -56736, -54839, 71453, 21766, -71603, -13030, 25962, -46172, 75076, 11512, -43476, 33587, 90812, -81692, -35171, 59975, 67883, -14811, 13152, -15447, 32966, -86608, -96143, -29174, -69635, 96929, -99449, -61347, 43378, -38777, 61418, 28242, -24875, -40924, -59312, 732, -83760, 13236, -59303, 13208, -75068, -14625, 10980, -85688, 22716, -43792, 84396, -12086, 61410, 87783, -11179, -79955, -80372, -88834], 793740541) == -1\nassert solution.shortestSubarray([12776, 27691, 29759, -62340, -51437, -29956, -28725, -93430, -53960, -30193, 92044, -20605, 19817, 56183, 93778, -69925, 48077, -78205, 94788, -10201, -63305, -79585, -87900, 78147, 63691, 90320, -47361, 36124, -20764, -91357, -33948, -30450, -59798, 38335, -70835, 9266, 51494, -14214, -63238, 76326, -53439, -86351, 65107, 66579, -80549, 30897, 69577, 88066, -72761, 56456, -25152, 88291, 12300, -26123, 34326, 29229, 29008, -92124, -83611, -63938, 79248, 3708, -88231, -1587, -33404, 85376, -95588, -46041, -30557, -8950, 63559, 92512, -72638, 94379, 35175, 82564, -50689, 51539, 15953, -77324, -21395, 9287, -67970, 762, 81830], 464245513) == -1\nassert solution.shortestSubarray([-64884, 253, 33568, -57451, 38294, 13229, -62963, -12227, 63436, -11374, 49060, -45139, 47013, -54765, 59727, -6761, -59600, -40939, -83172, -26374, -94383, 501, -60313, -67419, 55694, 81097, -41143], 621812732) == -1\nassert solution.shortestSubarray([55215, -2168, 57298, 82421, 25373, -11245, 65455, 79799, -29798, -72456, -92224, 58058, -40595, 1373, -85152, -90479, 77468, -43234, -59698, -8631, 30545, -26852, -31653, 32138, -84282, -38186, -58868, -8255, 27444, -82098, 91736, 47619, -77882, 79244, -70338, 86467, 40608, -67022, -22885, 70676, -63868, -4539, 56898, -94915, -35143, -54869, 77061, 25574, -61537, -56042, -20495, 86527, 23628], 340464232) == -1\nassert solution.shortestSubarray([6159, 68976, 77140, 34959, -40345, -78825, -42296, -21349, 47702, -79178, 21802, 28400, -41788, 9029, 70597, -72945, 45780, 14134, -50368, 75852, 54265, -2919, -66245, 77791, 16046, 28499, 15471, 73746, -94300, -78122, 65540, 91264, -68517, -86041, 74891, 12714, 70762, 28450, 80715, 42417, 4484, -38220, 55383, -31513, -96289, 1023, 98588, -44677, -25152, 74910, 46868, 66367, 43250, -54882, -7335, 37446, 64726], 607685857) == -1\nassert solution.shortestSubarray([11117, 54943, -10163, -15204, -85861, -36492, 70919, -84539, -72505, 28667, 37365, -99083, 61028, 74212, -67729, -24558, 98223, -22963, 38745, 71546, 99593, 13350, -56902, 68698, -49913, -95842, 92124, -86157, -99465, -26489, 58763, 33591, 28364, 26469, -35131, 61462, -45868, 99314, 94358, -44590, 96411, -85512, -20488, 45962, -95923, 36872, 43154, -95256, -68812, -98432, -54311, 45751, -47749, -32668, -42722, -1342, 17465, 8845, -8917, 85323, 76732, -10286, -30469, 34314, -11671, -66406, -69450, 99201, 32018, -72760], 591493640) == -1\nassert solution.shortestSubarray([-59454, -22868], 281520687) == -1\nassert solution.shortestSubarray([94224, 46864, 93511, -2639, 17523], 642041862) == -1\nassert solution.shortestSubarray([14210, 7271, -79196, -96005, 40583, 51500, -70594, -82581, 62622, -91006, 2197, -38483, -42303, 39085, 18455, 15508, 73263, 62203, 90620, 26773, 24279, -10985, 88424, 30655, 40303, 77217, -8901, 37327, -58491, 13826], 18383021) == -1\nassert solution.shortestSubarray([87552, -59356, -53680, -31778, 87789, -23986, 17196, -77254], 126751737) == -1\nassert solution.shortestSubarray([-87567, -98708, -1726, 57741, 7696, 8076, 79087, 13133, 89549, -95461, 24424, 92940, 57661, -90292, -13049, -67650, -90733, -39396, -42075, -55828, 80553, -90435, 89408, 55453, -73350, 34203, 81747, -9932, -63740, -44886, 74329, 27743, -93324, 71682, 67737, 24082, 12491, -37192, 82540, 83761, 64967], 207791372) == -1\nassert solution.shortestSubarray([89797, -4238, -35028, -38917, 46882, 22368, -12477, -97351, 67860, -53604, -50949, -6981, -71106, 57958, -86042, 12348, -80386, -21430, -45121, -85058, -84974, 47788, -54004, 20294, 62533, -8573, 55495, 78650, -57641, 63543, 86249, 25185, 28483, -39552, -65172, 65388, 36706, -79144, 85031, -3602, -54548, -14427, 83163, -42185, -30669, 35039, 16593, -18237, -41857, -93831, 987, -40209, -51123, -94872, -52039, 31422, -46909, 38725, -36758, -39281, -34905], 613894653) == -1\nassert solution.shortestSubarray([63354, 75656, 62450, -70943, -88120, -11612, 41230, 62774, -92730, 55258, -49653, 97265, -56495, 33642, 51312, 44315, 52002, -56970, -24070, -82459, 44794, -24894, -38305, -24125, 92127, -28107, 21901, 86398, 78539, -8446, -62113, -36200, -15488, 57254, 29798, -55570, -32057, 22430, -92237, -37184, -74882, -90430, 69854, -49848, -541, 38588, 74619, 27573, -11947, -95501, 11527, 73254, -49733, 54526, 38854, -46995, 54118, 25083, -70574, 87415, -36494, 95254, 38231, -65179, -75524, -79257, -79309, 42146, 95215, 84217, -95716, -31715, 93852, 36878, 42912, -96580, -71453, 26143, -41168, -26775, 59269, -64687, -21556, -19898], 340066822) == -1\nassert solution.shortestSubarray([91225, 23927, -89513, -22604, -87730, 27872, -67207, 89732, -21826, -11147, 70721, 91842, 9066, -53806, -55232, -30264, -1074, 94136, 34047, 19851, 1023, 80298, -15477, 20402, -18485, -57977, -24507, -50824, -36390, 74260, 17453, 38264, 78533, 30806, 36693, -32814, -24329, -26118, -63994, -58490, 58229, 77250, -19116, 87804, 95438, -95484, -47253, 46404, 67234, -22494, -77798, 71267, 59786, -38835, -11791, -46317, -96374, -41391, -22669, 13320, 68669, -55483, -90698, -98054, -72216, -67822, -42874, 57843, -59936, 98776, -86308, 63789, -53270, 20035, -96469, 2579, -41315, 31149, -70695], 321117718) == -1\nassert solution.shortestSubarray([21410, 9616, 29949, -82610, 50384, 93784, 23258, 53593, -95247, -55631, 67302, 29953, -1737, 11216, 3700, -23372, 8167, -82695, 51302, 49513, -15987, -13087, 51820, -85853, 89061, 20401, 29441, -63020, 96827, -91650, -60441, -53847, 46025, 1935], 411469112) == -1\nassert solution.shortestSubarray([36193, -22030, -73594, 13371, 20084, -52570, 14017, -18497, 47927, -79867, 44980, -52065, -52490, 17673, 63506, 80646, 13680, 44111, -1466, 17603, 11751, 29145, -11052, 79509, -57038, -65977, 32035, -89999, -83216, -79716, 92459, -50291, -60404, -38391, 918, -6004, -87229, 20312, -50568, 97013, 21902, 50802, 28504, 33953, -45957, 32589, 49509, -82767, 16089, -12264, 49760, -24244, -91726, -44324, -53485, -57836, -37459, -18952, 68935, -31834, -45631, -10656, 50308, 21399, -79515, -18434, -58448, -97388, -47184, 88797, -98454, 93303, 293, 98635, 92728, 31927, 96796, -81350], 482681826) == -1\nassert solution.shortestSubarray([-86776, 71243, 37095, 61522, -77488, 74118, -4529, -42429, -29623, 54694, 71808, -88634, 65079, -78455, -59710, 64867, -59392, -29514, 5929, -63644, 47021, 34105, -64897, 63453, -98153, -24950, 89450, 60589, -15213, 4580, 47288, 8999, -17474, -96147, 64347, -5292, 55950, 87275, -85498, -13151, -63548, -58106, 38434, -70676, 52804, 56855, 75493, -68090, -74728, -96461, -99008, -35042, -34946, -68936, 78554, 48583, -58247, -81077, 69477, 61571, -25364, 15133, -97365, -40479, -56541, -678, 1284, -83775, 95957, 36199, -62013, 31426, -84001, 80072, -55881, 50301, 94500, 35174, -27769, 16646, -40011, 89091, -41009, -10169, 75818, -75524, 19697, -72481, -59801, -33976, 78118], 961805673) == -1\nassert solution.shortestSubarray([63301, -41042, 28507, 87614, -61337, -21367, -47252, 71044, 44763, 43837, 29438, 34997, 36811, 16140, -96494, 79528, -38348, 77420, 6569, 60171, 54140, 46054, 24039, 45651, 53389, 70547, -73891, 34405, 95414, 90827, 17571, 27868, 26270, -10866, -12396, 78409, 55759, -78173, -99557, -74487, 41140, 371, -37689, 72418, 97460, 14316, 73727, 52736, -17412, -93663, -41006, 72455, 26731, 80406, -10788, -79355, 53286, -62125, -5291, -44304, -47406, -74051, 15771, -86036, -87968, -53709, 35070, 4139, -87255, -30615, -35540, 61132, -98115, -85776, -29170, 25524, -20982, -49339, -46965, 39856, 25263, -83724, 28310, 83442, 51369, 99580, 36704, -21001, -22983], 247651110) == -1\nassert solution.shortestSubarray([99261, 23123, 87199, -17507, 28952, 81071, -6428, -91653, -16910, -23531, 9623, -35304, -18332, 8386, -23576, -4980, 35445, -57136, 69831, -27449, -72970, -40763, -16107, 78429, 16764, -43416, -8022, -85485, 81535, 54395, 31080, -71019, -54381, -39287, 93602, -35967, 73423, 80553, -86687, -41281, 79116, 65860, 33863, -76898, 47212, -39145], 679191703) == -1\nassert solution.shortestSubarray([-84111, 53105, -57839, -6719, 43875, 6154, 66251, -81204, -27306, -89800, -34231, -28909, 49999, -26513, -15956, -56765], 238477085) == -1\nassert solution.shortestSubarray([-6624, 64472, -42124, 64997, -69279, 53229, -31146, 91688, 70670, -6657, 56031], 455856479) == -1\nassert solution.shortestSubarray([-23563, 39745, -58131, 65706, 23239, 50587, -74389, -96418, 53578, -93523, 64019, 14221, 62749, -17864, 64796, -82551, -96477, 13486, -52225, 29789, -1540, 85644, -13815, -24198, 52528, 39365, -57775, 82407, 5328, -64418, -46786, 77690, -27678, -90119, 51308, -32277, -58455, -45369, 43804, 6052, 16129, 88042, -57560, -19350, -39326, -56271, -21169, 23929, 32779, -27462, -73209, -83736, -54895, 24692, 2679, 70064, 66603, 34061, -8286, 5551, -6559, 15603, -46246, 92454, -76919, -68292, 92903, -76426, 73804, -53034, 29601, -11956, 59939, -87057, -6264, 22173, 3591, 62567, 55856, -17135, 87038, 96321, -21569, -28041, 10329, 38570, 69882], 478144825) == -1\nassert solution.shortestSubarray([-78789, 81649, 65009, 45120, 72652, -80657, 76127, 22313, 62205, 83782, 14123, 38726, -80499, 59610, 34247, 46576, 23778, 88267, 4516, -57736, 51982, -39203, -89243, -24201, 8179, -13238, 93489, -85508, 26879], 280993973) == -1\nassert solution.shortestSubarray([9259, 80106, 54116, -58002, -1058, 8350, -7682, -88361, 15338], 53820047) == -1\nassert solution.shortestSubarray([-47151, 25446, 40104, 19445, -75326, -81557, -28244, 36249, -92355, -69466, -82976, 93328, -26068, 51137, -23325, -54222, -39912, -27853, -48354, -45765, 48537, 56626, -24614, -79048, 57380, -51444, 14554, 82062, 12278, 33262, -89307, -90931, 98799, 44887, 90108, 53731, 41378, 45023, -66032, -60980, 38849, 31590, 33077, 88375, -6165, -29086, -70092, 62289, 30149, 16048, 37916, -41642, 35223, -19743, -66824, -12558, 24030, 51561, -97170, -8995, -69814, 54751, 85204, -25292, -99428, -84777, 27171, 17513, 95229, -80717, -17159, -10389, 23647, 1167, -12896, 78358, -65872, 61209], 661606094) == -1\nassert solution.shortestSubarray([-35208, -39992, 4540, 80472, -62169, 34809, -51460, -30344, -1726, 43595, 37746, -37769, 18145, 5210, 58795, -40330, 97194, 45731, -28139, 76693, -33074, -45839, -56466, 7424, -67568, 9038, 60156, -11374, 42936, 39876, -35050, 65273, 44357, 86278, -20224, 74534, -99721, -78955, 2602, 54386, 66973, 23665, 66351, -11273, -66221, 4746, 9932, -78997, -20488, 7748, 37045, -75518, 22861, 37243, -58047, -67214, 34047, 78870, -75101, 42969, -19033, -23395, -92864, 21951, 77083, -70120, -35651, 34091, -24315, 79783, 80665, 29845, -86972, -65676, -16875, 74651, -87941, 71500, -77058, -12655, -22905, 16886, -25538, -85029, -92637, 59596], 829004436) == -1\nassert solution.shortestSubarray([-28338], 748226453) == -1\nassert solution.shortestSubarray([-75638, 6598, 19771, -83022, 37310, 15562, -2432, -51952, 26649, -75299, -45921, 63197, 49967, 19834, -40273, 50206, -71655, -6259, -18183, 5549, -82434, 15991, -55490, -84688, 65597, 6661, -54773, 15988, -77080, 66428, -12259, 7762, -23576, 14986, 7665, 3197, 82830, 47532, 29360, 51063, -46830, 45764, -48125, 86150, -89910, -17501, -4712, -44285, 36253, 78786, 6863, -17828, -10627, -49893, -47089, -4715, 59017, -17524, -90228, -94304, 86622, -69158, -64200, -79983, 75232, -36875, 6517, 61535], 583485700) == -1\nassert solution.shortestSubarray([19389, 89625, -54639, 93927, -22034, 59798, -39785, -76322, 15456, 67463, -90224, -7621, -92420, -82998, -3975, -29874, -68929, 21195, 75146, -18932, 31629, 46987, -83939, -91922, -17856, -29385, 51066, 55008, -68140, 81364, -15854, -79038, 88306, -93383, 20378, 40638, 14122, 15043, 4311, 28196, -43074, 30617, 24165, 17074, 29271, -80127, 10900, -35872, 36535, -50608, -71182, -59470, -47477, 61395, -3658, -41786, -50818, 46668, -50312, -65431, -23639, -48186, -81490, -6633, -34282, -86069, 43936, -98152, 10415, 92945, -91144, 54758, 57658, 536, 64188, -8182, -71061, 45183, -46947, 93122], 896189427) == -1\nassert solution.shortestSubarray([-59150, -52715, -97820, 19404, -47487, -35579, 58498, -61233, -70738, -53697, 58944, -32663, 45855, -93987, -81944, 93097, -66613, -1930, 1064, 90602, 28872, 42536, -62080, -55687, 21598, 46915, 12395, 98642, 85273, 15668, 7546, -17343, -85519, 24574, -80493, -68783, 29161, 96330, -73416, 98176, -93570, -42359, 51036, 61311, 1495, 56119, -10395, 89378, -13409, 86338, -69376, 52790, 57183, 82068, -27688, 27084, 56770, 11653, 63150, 18360, -20415], 513767792) == -1\nassert solution.shortestSubarray([73558, 86694, -24828, 76078, 81193, 2783, -61970, 19838, 52283, 3528, 71279, 2666, 52170, -66261, 68942, 48435, -91911, 36207, -66911, 61120, -57237, -62530, -94535, -30875], 564341992) == -1\nassert solution.shortestSubarray([89961, 13026, -50027, -12220, -12801, 11628, -50968, 10556, 1606, -23061, -1318, -92999, -32888, 35437, -6058, 32600, 94283, -31701, -67524, -18313, 47693, 75016, 94975, -47852, 70187, 86029, 73077, -4879, 4422, 24657, 16650, -46173, -52614, 32595, -31334, 54201, -28719, 9083, -74619, 34455, -21884, -70923, 51273, 3243, 68636, 63593, 30166, 78341, 69517, 93126, -26748, -22896, 88529, 52259, -91499, -76747, 84566, -6824, 54398, 29696, 63780, -25055, -36421, -51822, -79693, -57594, -86231, -3574, 89654, -40034, 71590, -69890, 32206, -6019, 45219, 81755, 34379, -42973, 94115, -29182, -73201, -73314, -45952, -22765, 48219, -25851, 19919, 72003, -20385, -54813, -66275, -54174, -88140, 87267, -17058, 32660, 38675], 184376500) == -1\nassert solution.shortestSubarray([-63873, -51651, 50740, -5305, -40258, 77095, -46875, -23793, -18193, -67217, -15550, -56619, -47305, -57277, 43182, 60720, 61034, 98410, -74026, 28370, 7407, 96189, 13301, -52500, 67725, -3931, -71008, -2896, -96133, 39425, -76015, 61398, 60554, -47072, -24833, 62445, -44492, 34761, -30817, 7414, -29479, -83359, 918, 28633, 37586, -86619, 9078], 293425316) == -1\nassert solution.shortestSubarray([-21810, -13001, 77839, -22118, 75377, -91221, 47352, 41347, 31440, 7101], 440337303) == -1\nassert solution.shortestSubarray([-54545, -38301, -35819, 89420, -60829, -54634, -91782, -40627, 49868], 117484959) == -1\nassert solution.shortestSubarray([-4861, -26380, -71286, -70595, 41465, -76717, -14754, 39055, -10580, 23344, 22013, -33061, -58719, 16674, -73734, 15982, -71965, 6050, -73520, 63273, -31556, 30285, 90772, -69436, -93506, 720, 67203, -55054, -21643, 6750, -68558, -24821, 81786, 82328, -63830, 27977, -45378, 36004, 54201, 36120, 65885, 97962, -68522, 77059, -68657, -69860, 26186, 19317, -6498, 77812, -29780], 826747681) == -1\nassert solution.shortestSubarray([-52963, 65596, -19023, -75139, -28894, -65631, -78821, 54041, 87863, 46766, -28583, 3442, -46599, -14129, 53569, -91531, 39309, -11306, 24730, 7262, -74207, 84599, -85960, -73724, -22663, -61153, 97194, -92607, -18355, -854, -67175, -34313, -18884, 40876, -6321, -2297, -34232, 69775, 48047, -26923, 65718, -27938, 17393, 33768, 76741, 87057, 86014, -10264, 82446, 85353, -77515, -11931, 50412, -29928, -24017, 76398, 40972, -73294, -95303, -78118, -38657, -29315, 75053, 86734, -29064, 76840, -3796, -78657, 92038, 7935, 43082, -40620, -60852, 76879, 80018, -53802, -22401, 81605, -90607, 78494, 19585, 40616, 78042, 90780, -84919, -8671, -14660, 62660, -72157, -21710, 97904, -63507, -61453, -91005, 50394], 848436946) == -1\nassert solution.shortestSubarray([95557, -48076, 80985, -66505, 18606, 67437, 37031, 53540, 34639, -82208, -30402, -46695, -66487, -32687, -55039, 23379, 377, -52927, -85452, -58362, 76070, 27988, 79125, 38027, 165, -39492, 17386, -96566, 6712, -7288, -73729, -78228, -63802, -95030, -69677, -68651, -87867, -24043, -64572, 45761, -39882, -30306, -33065, -48572, -15445, -87500, 63351, -86709, -75288, 97940, -80800, -82513, 76975, -22452, -61648, 68472, -95541, 66749, -38328, 99027, 82183, 87894, -99529, 17392, 75079, 27696, 43070, 31537, 88795, -50904, -57756, 97451, -492, 96064, -55562, 58089, 51310, -85260, -46447, -88745, 90607, 6159, -96861, 95480, -2778, -32635, -46661, -62721, 52948, 2185, 30368, 34909], 274088262) == -1\nassert solution.shortestSubarray([-38981, -56261, 35249, -92621, 17755, 69905, 79865, 2556, -61749, 2358, 66654, -9228, -89340, -53903, -32469, 7036, 18770, 58274, -46217, -96098, 80093, 72174, 68109, -97556, 70153, 97274, -81752, 67998, -67587, 32260, -53505, 67222, 65483, -63316, 4222, -54978, -58183, 64147, -78413, -64944], 367021811) == -1\nassert solution.shortestSubarray([21693, 90590, 66820, 18177, -76419, -95552, 57241, -44857, -37119, -36508, 32974, 81344, 26223, -62772, 5159, 99917, -26739, -64254, -83576, 14633, -57284, -96141, 80441, -77666, -92420, 53764, -95381, 20210, -61197, -54754, -89680, -30085, 44679, -89005, -58535, -33858, 55537, 75950, -94186, -8856, -84697, -97702, 40713, 33879, -50036, 69994, -52225, -77297, -48937, 37926, -66715, 29857, 2268, -64629, -68126, -51155, 25059, 17397, -2328, -22661, -89148, -43768, -3245, -65892, -46076, -82206, 8350, 55581, -17674, -52004, 57691, 76982, -12804, 81117, 54099, 38926, -67148, -29968, -88238, 59816, -66313, 4975, 39161, 74586, -12557, 95048, -34232, -31460, 29846, 30305, 20624, 69086, 52141, -28686], 980893240) == -1\nassert solution.shortestSubarray([-98859, 14989, -53692, 11624, -90987, 5690, 24948, 5775, 37747, -16589, 54725, 73795, 35184, 68448, -98672, 13184, -2304, -43523, 25432, 56284, 89957, 87942, -62446, 52367], 856086686) == -1\nassert solution.shortestSubarray([87292, -35559, -15871, -94806, 89257, 27547, -5307, -1260, -58117, 56454, 29906, -40526, -28144, -83201, 66451, -24422, 65703, 30421, -6801, 92075, -7608, 99607, 22412, -2512, 40452, -17938, -66797, 8814, -86902, 96080, 90277, 64931, 2790, 4865, 96457, -93617, 65309, -93487, -80550, -30651, 33953, -41008, -22196, -34732, -28046, 48115, 45925, 88461, 79230, -49623, -14294, -49385, 14710, 24156, -70591, -58458, 14887, -8173, 91664, -20645, 2091, 51038, -15225, 10925, 7234, -77237], 206011693) == -1\nassert solution.shortestSubarray([23296, -48228, -15826, 73875, -25606, -308, 88416, -743, -78566, -60286, -28844, -52586, -53778, 19861, -60481, 95401, 50600, 54547, 99254, 71478, -50281, -94414, -11346, 99423, 25905, -2473, 63326, -42700, -20599, -50651, 89278, -76818, 86206, -9982, -98989, -48304, -52281, 20428], 847887481) == -1\nassert solution.shortestSubarray([-59618, -89468, -21812, -46971, 68906, -20444, 49160, -60602, -31633, -82500, -26785, 75932, 51467, 27691, -94070, 61900, -56868, 39749, 98344, -71978, -95586, 7709, 62693, 90489, 38614, 88215, 97418, -16943, -6824, -11569, 59142, 95234, -61035, -71763, -73405, -12004, -26807, 80599, 91062, 57588, 58273, -81482, -33890, 92798, 79773, 21498, -37819, 80731, 36775, -77786, -11237, -67124, -7923, -44769, -35502, -36561, -70134, 86547, 14777, -23051, -71534, -24733, 60316, 96271, 10628, 27283, 60710, -96414, -33910, 14810, -85014, 2126], 558171282) == -1\nassert solution.shortestSubarray([-8153, -63800, 72033, 96078, 85505, -98769, -34290, -29603, 42013, -41916, -6213, -45275, -14439, -50784, 34195, 92590, 37497, 32240, -37100, -318, 84542, 14366, 94725, -25579, -48460, -35684, 61550], 557789420) == -1\nassert solution.shortestSubarray([84809, -88849, 89336, 98308, 44964, 24587, 2094, 15345, 77597, -55771, 62225, 89257, -69709, -46969, -32955, 80186, -19443, 15841, -56717, -27741, 28227, -17006, 17304, 23735, 44036, 21239, 38069, -23776, -76332, 71673, 71228, 68513, -2271, 48622, -94013, 84056, 58424, -78615, -41322, -93629, -5311, 14613, -74982, -33261, 7990, -74351, 18760, -78699, -8227, -24027, 23818, 44501, -83352, -33386, -17707, -57542, -6290, -15239, -64579, 60968, 4384, 28984, 59604, 14232, -86554, -19475, 72742, -15332, 71440, 2154, 55400, 28896, -12852, -61456, -55306, -93416, 70350, -75335, -1750, 63460, 63155, 87058, 8741, -80933, -37126, 29412, 46785, 94930, -66053, 59110], 515756632) == -1\nassert solution.shortestSubarray([2040], 161894616) == -1\nassert solution.shortestSubarray([73892, 72100, -44861, 56257, -6145, -44396, 68378, -79878, 17189, 18699, 19803, 83113, -11683, 88498, -46798, -55665, -49609, 72205, -88466, 13356, -47887, 83320, -39645, 37517, 69536, 55389, 50877, -24247, 99405, -12802, 77387, 58394, 60244, 84301, -60756, -99311, -70464, 42718, 51733, 11518, -84014, -36636, 91432, -8131, -56100, -36379, 12847, 14124, 63789, 46010, -9383, 32912, -54054, -12744, -75784, -77909, -16389, 20660, -95534, -98037, -75683, 90850, -15617, 60249, 82321, -71656, 1966, 70122, 22534, 81114, 37977, 82574, -56779, -18592, -62265, 77777, -8510, 63240, 38300, 22824, 78584, -33755, -8170, -22741, 1827, 23109, -2238], 206724926) == -1\nassert solution.shortestSubarray([-10031, 34567, 67260, -54526, -29910, 44333, -57573, 23664, -18755, -77370, -67955, 48428, 34517, -46563, -57590, 24472, -63618, 38179, 72006, 18939, 21307, -12059, -92065, -1149, -24125, 89626, -67197, -28010, -39645, -54406, 19587, 98531], 711202476) == -1\nassert solution.shortestSubarray([-32586, 21196, 31451, -94158, -27389, -1640, 49036, 95998, -80300, 51173, 22353, -8207, -93636, -6770, 61664, 49095, 6135, -20317, -52557, -28158, -70765, 20548, -20456, -24228, 76411, 68689, -92166, 33874, -83234, -64996, 89630, -28039, -20095, 1493, 16081, 12314, -61015, -85280, 52660, -61078, -25201, -55815, -52922, -66051, -75976, -45208, -59353], 57658522) == -1\nassert solution.shortestSubarray([26734, 22, -74394, -82942, 41603, 1756, -41654, 37479, -67466, -18990, 60416, 78065, 35754, -13420, 24989, 56287, -30287, -8224, -36245, -11456], 375408561) == -1\nassert solution.shortestSubarray([-80015, -79518, 89731, -91365, -80164, -52457, -5022, -56873, -49773, 4876, -96532, 10690, 70786, -61166, 11002, 23855, -51443, 89463, 9273, 62367, 55757, 78057, -6630, 3605, -29059, -55155, -672, -48810, 3270, -73949, -41940, -50304, 43378, 47791, 60810, 75077, -39580, 31986, 37486, 9361, -52741, -62438, -99811, 42514, -4881, -95141, 69975, 77021, 66495, -20283, 6176, -75323, -77296, 65216, -45963, 21787, -77554, 71206, 31575, -58728, 60089], 93150820) == -1\nassert solution.shortestSubarray([9813, -13512, 57557, -24569, 70590, 25000, -11668, -53325, 24809, -84313, -78543, 87653, 15065, -50842, -7013, 8073, -53917, 15937, 26793], 289692295) == -1\nassert solution.shortestSubarray([-62698, 92084, -3352, -6405, -81540, -15698, -9060, 1684, 55506, 58964, 33376, -70326, 72907, 94347, 43477, -32711, 1391, -8325, -59730, 14903, 60456, 87311, -35645, -6736, -24523, -99761, 9132, -96756, -47935, 18263, 65216, -50958, 62962, -91880, -14874, -27694, -49252, -6845, 53451, 13168, -34197, -98015, -65138, 55130, -56961, -13610, -40224, -48434, -2758, -41859, -88346, -94338, 45904, -3569, 48716, 92344, 72518, -10439, -99793, -5383, 51376, 64019, 30175, 88774, 9163, 69082, 67129, -20189, -62455, -48210, -47864, 87405, -68329, 26172, -92807, 29331, -75120, -43414, -12737, -80534, 8981, -40552, -59948, -1586, 48488, 58464, 60801, -92544, -78778], 762266526) == -1\nassert solution.shortestSubarray([-57473, 97841, -62673, -53219, 72542, 8587, 74985, -83261, -90091, -96828, 91619, -60529, 685, 2209, 61598, -19653, 61422, -13825, -20350, 91153, -82145, 90737, -96931, 28440, 69497], 442548625) == -1\nassert solution.shortestSubarray([42163, -84889, 28345, 14339, -83118, 4429, -3270, 84025, 57360, -66306, -87797, -83187, 41654, 4157, -48628, 64772, 45361, -29135, 48475, 80210, 71486, -88497, -22089, 33782, -30308, -55138, 6858, -68381, -89983, 64823, 12155, -84589, -43898, 89082, -32093, 25949, 58945, -56005, -98407, -59834, -57952, -29696, 24764, 62716, 88788, 86418, -95228, -94399, -82892, 74667, -64071, 93805, -42914, 96673, 47011, 25148, 88533, -27547, -64715, 43517, -89199, -68797, 846, 11646, 88969, -47478, 81529, 10076, -99356, 21337, -54536, 36224, -87174, 17750, -46913, -71958, 68677, 34576], 422187789) == -1\nassert solution.shortestSubarray([-85340, -67143, 34154, -76488, -39728, 22771, 54422, -56538, 56655, -5286, -91298, -47396, 34834, -90925, 47349, 58743, -6861, 80402, -61976, -51778, -45788, -20250, -72010, -77309, 44597, 42765, 52998, -84453, 7508, -22876, -49007, 57637, -15210, -96371, 35648, 64238], 29157397) == -1\nassert solution.shortestSubarray([16897, 72529, 81311, 4250, 65957, 28070, 46383, 1087, 10393, -15306, -77420, -74804, -80749, -36122, -72207, -26472, -36726, 23715, 3109, 45186, -63546, -1000, 17845, 83464, -23431, -8679, 87410, -90732, -77304, -99633, 62191, -93568, 95622, 46812, 52112, -31091, 6287, 25214, 65771, -13748, -60511, -40462, -72344, -10889, -55834], 981194388) == -1\nassert solution.shortestSubarray([-43640, -75748, 65385, 10877, 18662, -42654, 68446, -61342, -24686, 71969, 46782, -94567, -19695, 78935, -43917, 16828, -38101, -91673, -1313, -39519, 16871, 8962, -27477, -33410, -98027, -5624, 46417, -10603, -40694, -15032, 84925, -23817, -58702, 56573, -57579, 86264, 62198, -97213, -78588, -41815, -7125, -48893, -30696, 13270, 42428, 27745, 21036, -6146, -48468, -68888, 35160, -20821, -41214, 94027], 449790043) == -1\nassert solution.shortestSubarray([22475, 46781, -65645, 67408, 23575, 75877, -95122, -82112, -57677, -73163, 56056, 70783, -83343, 52988, 14062, 87961, 47313, 30052, 56439, -49955, -99624, -35542, -45992, 41737, 55200, 45856, 64846, 28398, -10151, 51873, -53164, -8331, 70817, 90806, -83503, -41911, -32402, 88037, 99579, 8071, 97828, 33186, 54961, -84507, -26510, 71195, 10941], 161878903) == -1\nassert solution.shortestSubarray([26492, 69883, 92594, -30494, 98789, -16852, -25757, -32862, 68325, -18419, 53431, 43252, -14027, 72858, 92599, -55207, -22979, -5583, 83012, -73789, 27312, -26082, 74969, 80472, 89314, -69701, -66773, 34599, -44175, -46570, -69165, -62140, -62389, 53155, 28313, 53833, -73946, -15164, 17100, -93080, -15212, -82573, -14349, 64454, 17018, 85980, -68598, -85883, -27023, -65822, -1809, 50956, -21550, -51042, 7593, 3822, 40594, 35509, 36090, -87673, 3455, -31070, -88154, -55504, -62882, -27385, 21229], 95016584) == -1\nassert solution.shortestSubarray([-96695, -31536, -24386, -84249, -7696, 42184, 26468, 94328, 46627, 52767, 37948, -11708, 22129, -2659, 70061, -5147, -23698, -6535, -17655, -87702, -63148, 99814, 32756, 85381, -78063, -19243, -28520, -2386, -43384, 6017, -65748, 60298, 64310, -73963, 23785, 27299, 12003, -70631, -36120, 48583, -54576, 27122, 89693, -89011, -5843, -84628, -20090, 29850, 10778, 30087, -43424, -83622], 258304951) == -1\nassert solution.shortestSubarray([-30505, -31674, -67060, 40749, -30716, 90499, 17012, -77152, 75163, -615, -8952, 21389, 26882, -6728, 38760, 13433, 37906, 91357, 3102, 59503, 45908, 39952, -64122, -4730, -1093, -30535, 49629, 89950, -79103, -66522, 96486, -90837, -53938, 87550, 36645, -65896, 98193, -5505, -29076, 69364, 64230, 52303, 60138, 54622, 62759, 93164, -69092, 58215, 55749, -32446, -48862, -65512, -51987, -86744, -3598, -32548, 72043, 6151, 38690, -2951, -90529, -33094, 68006, 335, -41074, 773, -62117, -14571, 68470, 82291, -13630, 42246, -60550, 56808, 18046, 41228, 49112, -99844, -5399, -17164, 29291, 52120, 14899, -19218, 61172, 26197, 76431], 717403782) == -1\nassert solution.shortestSubarray([22023, -77051, 81356, 70171, -66238, 70523, 41208, -88603, -59081, 45606, -68451, 53458, 68427, 79588, 81269, -39714, -30793, 40934, 89156, 43495, -18852, 30895, 14236, -82984, -66454, -36057, -55356, 69033, 80121, -45297, -64516, -33990, 12552, -71718, 37164, -47082, 23384, 4143, -66351, -80584, 45556, -89098, -41423, 73264, -23119, 80810, -25083, -13075, -54233, -37313, -2784, 31237, -88370, 789, 47727, -22295, 60226, 35480, -45928, 19583, 96213, 59354, 18691, -2772, 72014, -65412, -78649, -5807, -40883, -26162, 39030, -67657, 280, -18253, 3972, -26763, 23118, 65077, 7373, -21010, -69946, 26360, 45230, 7943, -64629, 52701, 36446, 34280, -38284, 12411, -30403, 84295, -67044, -38936, -73118, -75239, 76382, -77594, 26779, 10022, 9686], 246669573) == -1\nassert solution.shortestSubarray([-78027, 31504, 21561, 9547, -36726, -87003, -13682, -30432, 24169, -52921, -24665, -53855, 90545, -37329, -43681, -76044, 60176, 21236, 44846, -15129, 24700, 12150, 90646, -67916, 2087, -5860, -86997, -82986, 68257, -64315, 85154, 84860, -75986, -39279, 53245, 38785, 13994, -68215, -45865, 46924, -27103, -89487, 16406, 41828, -58594, -71775, -22647, 67501, 35113, -38750, 6023, -16713, -79701, 16051, 95751, -26186, -94984, -18702, 30425, 42615, -3330, 25401, -89573, -1128, 4704, 58963, 69944], 956815003) == -1\nassert solution.shortestSubarray([84407, 96511, -26764, -86911, 30390, -25653, 13083, -18768, 66328, 16393, 93087, -33761, -80696, -18762, -9731, -60136, -33019, -72813, 27802, -38549, -21798, -59160, -47428, -43420, -85820, 964, -37194, -89185, -8440, 16202, -19001, 39551, -16552, 14890, 44513, 86991, 57387, -59831, -42972, -41234, 79612, -80327, 2547, 35047, -97918, 55981, -46577, 81120, 2169, -85261, 52008, -56652, 62228, -30978, 31955, -10544, 8195, 68370, 22226, -71754, -82267, -51246, 53891, 88470, 67662, 18907, -68235, 12395, -89181, -95211], 389565360) == -1\nassert solution.shortestSubarray([3909, -65134, 43314, 69675, -40826, 32702, -50265, -54735, -84167, 33171, -63011, 41203, -5925, -36595, -70755, -516, -46995, -15626, 22414, 47355, -61829, -13894, 94942, 21742, 98582, 83752, -9286, 70188, 67994, -76766, 80423, 12385, 70525, -86149, -86817, 74138], 464580618) == -1\nassert solution.shortestSubarray([4447, 65110, -93537, 50532, 60395, -87621, 66930, 89024, 47419, 81812, 43754, 38745, -92775, 19880, -18105, 87916, 89004, -46290, 83653, -38890, 56945, -74261, 7205, 52136, 2671, -97632, -23745, 38132, 30424, -62529, -59611, -41008, 70961, -67348, 81959, 24881, -96254, -50372, -79265, 2074, -67496, -97125, -46326, 40131, 25522, 73480, -21794, 93141, -63900, -51291, -60640, 18315], 942001767) == -1\nassert solution.shortestSubarray([-1026, -90309, 68937, -44973, -94977, -49931, -79571, -72666, 26037, 94460, 46461], 944321087) == -1\nassert solution.shortestSubarray([-47739, 48216, 39100, -4121, -29419, -17228, -95911, 18541, 41927, 20895, 85375, -95051, -37250, 39487, 13501, -64898, 29950, -48575, -7496, 13877, -5880, -53953, -67505, 66440, 98805, -4195, 79775, 38407, 57841, -99465, 58571, -77548, 86348, -29937, 81939, 10676, -45940, 45548, 80222, 82194, 7179, -36467, 66048, -4841, 54092, 28818, 59038, 77443, -81543, -79452, 32528, -37288, 56518, -44171, 84145, 42384, 14028, -17569, 1023, -81614, 67013, -51952, 23606, -23581, 62797, -19177, -34765, -21024, -25840, 23669, 6466, 28642], 13879510) == -1\nassert solution.shortestSubarray([33498, -27776, -10481, -20752, 75801, -21840, -58100, -45066, -74632, 2154, 29005, 80417, -86472, -52156, 94232, 64867, 30304, 43249, -65138, -41146, -9945, 81862, -61227, -2291, 66139, 11922, 28477, 11934, -91928, -90333, 63588, -59776, 21337, 66710, 23699, 48970, 59613, -57444, -8269, -25272, -19352, 29561, 56542, -16537, 68641, -22178, 87488, 6485, 76297, -72591, -13769, -5607, 43289, 84217, 50717, -49402, 34055, 97796, 17067, 2290, 42280, -11376, 68407, -83414, 90529, 62909, 48424, 40630, 23074, -89013, 89189, -16862, -4040, -3350, 13294, 10430, -16949, 638, 35668], 360021439) == -1\nassert solution.shortestSubarray([-46360, 60970, 51666, -91930, -43108, -1432, 9518], 724364883) == -1\nassert solution.shortestSubarray([15839, 28390, -68097, -89963, -81592, -7135, -81868, -9451, 30327, -74248, 44406, 10319, -33705, -76299, 74127, 81775], 335315738) == -1\nassert solution.shortestSubarray([-89283, 98358, -36402, -38063, 25614, -5457, 89142, 45401, 17161, -50587, 67182, -38708, -13084, 53604, -31538, 13043, -78570, 43775, 48777, 43853, -54009, 34277, 11427, -93386, -29434, -93877, -74769, 69179, -19521, -9882, -25266, 90217], 260080816) == -1\nassert solution.shortestSubarray([-18051, 92864, 77828, -13492, 4278, -51689, 6184, 10159, -78583, 73797, 81927, 59147, -78137, 28233, 90715, 14959, -43445, -628, 74247, 48729, -84069, 78433, 29207, 37330, -94406, -27494, -22703, 38959, 22430, 98349, -93134, 11314, -65893, 89725, 99595, -91049, -90621, -35415, 19793, 83071, -14988, -77863, -79681, 43363, -33070, -83141, -43887, -98527, 1520, 85827, -73947], 64245763) == -1\nassert solution.shortestSubarray([-52413, 86919, -54645, -53350, 54199, -12526, -65403, -33183, -36889, -9121, 38067, 79058, 8267, -31969, -28537, 12866, -86921, 31468, -54441, -92655, 40614, -83155, -49280, 46588, -87514, -80645, 54631, -10124, 29066, -83121, 12484, -41494, 37886, -83329, -31743, -82365, 73945], 46896562) == -1\nassert solution.shortestSubarray([14349, -27864, 27525, -3552, -46305, -87839, -97347, -68730, 90245, 68518, -48239, -2222, 30384, 59571, -4073, 77631, 12373, -27909, -73613, 79183, -11549, 49062], 998977325) == -1\nassert solution.shortestSubarray([72627, -92253, 16874, 39149, -40574, 9340, -91143, -54346, 57605, -19526, 96525, 33112, -88474, 16209, -82345, -73495, -35314, 21228, 56300, 50643, 20241, 69830, -52216, -86995, -32978, -88107, 24537, -23794, -46326, -58999, -67803, 70078, 22738, -96197, -43663, -35047, 61745, -93641, 3943, 35043, -34189, -69821, -54274, -47788, -39705, -19435, -86087, 72846, -70656, -75181, 26902], 884222849) == -1\nassert solution.shortestSubarray([63895, 31369, -48210, -36491, 30035, 2891, -39651, -48622, -76271, -12309, 11762, -55387, 30732, -7531, -61451, -40808, 56445], 309372208) == -1\nassert solution.shortestSubarray([87969, -17242, 835, -1539, 43616, 36754, -72187, 93290, 67822, 31225, -35539, -52520, -70148, -14637, 96469, 43540, -78411], 19913725) == -1\nassert solution.shortestSubarray([-46539, -78555, 19939, -47915, -37515, -72264, 49029, -46374, 75255, -97570, -27079, 3614, -18717, -76792, -51794, -57647, -66181, -49225, 32006, -26143, -82902, -2642, 99604, -26381, 33074, -9532, 31827, 23108, 61161, -52974, -82700, 58488, 77566, 56260, -39742], 867183135) == -1\nassert solution.shortestSubarray([64607, -66364, -46854, -62733, 11970, 20904, -21640, -26511, 68935, -29206, -76534, 86891, -44535, -95190, 77640, 20490, -26603, 35823, -79427, 23097, 9141, -25348, -18774, -12463, 53919, -20069, -26143, -31131, -90773, 84021, 2749, -1520, 94603, 93857, 50001, -34622, -68606, 89476, -3147, -11429, -39, 54449, -57996, 67269, 66236, 3473, 11069, -4596, 88276, -7284, 65238, 57849, 87927, 26960, 99445, 92657, -38307, 4695, 74150, 6713, -56993, 5556, -1423, 32116, -31540, 35769, 23686, 54512, 75978, 11176, 61747, 35000, 25512, 97377, -56761, 53180, -96524, -74938, -70528, -22509, -59211, -2748, 11041, 89487, -19297, -60162, -26304, -10317, 30799, -48137, 10539, 54296, 79100, -28705, 84554, 53632, -44000, 24550, 7438, -56350], 867193056) == -1\nassert solution.shortestSubarray([-77073, -51028, 99658, -53662, 87467, 67618, 54917, -95169, 75395, 64705, 20067, -75440, 58069, 25561, 46988, -42550, -29836, -68701, 96757, 44929, 82608, 69523, 26986, 94368, 583, 13576, -98821, -39017, 52822, -81617, -76859, 69096, -70346, -67556, -60002, 20469, -27981, 8685, -76463, 27461, -7469, -61455, 11810, -90501, 61930, -91416, -35532, -48913, -73648, -57423, 77987, -97750, 10171, -26630, 36287, 86454, -78652, 418, -49677, -13504, 8976, -31775, -52838, -36497, -86939, 97043, -66699, 17779, 82685, -38047, -73792, -40808, 16021, -96828], 622995231) == -1\nassert solution.shortestSubarray([28880, -43572, 18009, 19824, -46975, -94213, 27995, -8025, 51180, -47637, 85206, 62472, 63932, 3613, -87060], 933910303) == -1\nassert solution.shortestSubarray([-76302, 86651, 66843, -77644, 30841, 54504, -30171, -13579, 12972, -25670, 33111, -42042, 40977, -8526, 46902, 97841, -85014, -24381], 780722739) == -1\nassert solution.shortestSubarray([-32295, -73889, 72778, -64548, 2160, -60937, 6155, 57793, 59926, 71383, 47270, 88527, -41888, -75128, -12803, 67037, 53028, -42476, -22759, 2264, 14067, 33586, -71220, -24215, 74181, 29263, -10327, 16399, -94729, -93006, -48784, -72797, -68465, 56601, 21940, -59818, 44051, -36113, -39198, -22946, -63569, -1515, 97220, -11176, 33885, -86974, 91486, 10078, -1939], 101826851) == -1\nassert solution.shortestSubarray([-53149, -10604, -55855, -86584, -85933, 12417, -92921, 14603, -13666, 85091, 83649, 72891, -68264, 20004, 65593, 17707, -25162, -60415, 63489, 80098, -58782, 82228, -32100, 49594, 37197, 9305, 47919, 90902, 56001, -78456, 12711, 40833, 42026, 39187, 56582, -21385, -70264, -54676, -46361, -63526, -41426, -52255, 72932, 13841, -54979, 47166, -31303, 69010, -36917, 46640, 88287, -69420, -99528, 52461, -76782, -13149, -87490, -51816, 21281, 3192], 148441486) == -1\nassert solution.shortestSubarray([57786, -91565, -10605, -42305, 73703, 43974, -60189, -38664, 7499, -56414, 45435, -41982, -2889, 55921, 3372, -29304, 9713, 82686, -35844, -21254, 18045, -24814, 84258, 94969, -17657, -65730, -51911, 55278, -41823, -24464, 82773, -6467, 40199, 31787, 91341, -69923, -64586, 58008, 70986, 28009, 96418, -91408, 98476, -3453, 8300, 95288, -88343, 15258, -90645, 5456, 36516, 58048], 981642761) == -1\nassert solution.shortestSubarray([7597, -38937, 84854, -12976, 10216, -89551, 99066, 98436, -69938, -68099, 11303, -70371, 91130], 124010963) == -1\nassert solution.shortestSubarray([-1828, -67258, 25048, 59924, -73699, 84754, 10568, 12755, -51755, 97474, 57739, 42885, -94234, -93735, 54191, 57170, -3753, 76995], 288490181) == -1\nassert solution.shortestSubarray([-61980, -94840, 2281, 21767, 10365, -49294, -74027, -80203, 55402, 32984, -83462, -12472, 72631, -35775, 96384, 85586, -60470, -81672, -73506, -29622, -62651, -58159, 98261, 3305, 93138, 87923, 70352, 27812, -65174, 99902, 20852, 80236, -16108, 44498, -22040, 20352, -68758, -76131, 75937, -74543, 67703, 94035, -64233, -20000, -47316, -91853, 84477, 19020, 19178, 28231, 94129, -86905, 89572, 55507, -74709, 93909, 90859, 50384, -12032, 61518, 46232, -51133, -75542, -79959, -81463, 68940, 229, 54712, -80071, -67856, 80021, 91037, -23235, 60051, 27211, 62990, 91666, -56218, 93137, -86825, 60099, -47562, 1467, -98665, -29611, 99833], 941715180) == -1\nassert solution.shortestSubarray([24476, -79236, -5314, 30127, -55398, -57629, 51739, -45180, -19050, -72313, 3809, 84630, 63137, 37037, 24757, 14988, 57397, 78060, -16683, 56299, -35942, -59150, -75555, -78321, 78715, 61130, 48050], 142798778) == -1\nassert solution.shortestSubarray([76947, 20054, 30598, -40625, 69172, 39191, 11579, -26107, 32246], 595785102) == -1\nassert solution.shortestSubarray([-49944, -16286, 22890, -74144, -99676, -49651, -47425, -78023, 23314, -28399, -83879, -17711, 33091, 35469, 69402, -55673, -78965, 55638, -15420, -76096, 55415, 7070, -39430, -60988, -39228, -69408, -39725, 96658, 69178, -86992, 7163, 36360, 15559, -111, -46124, -61877, -19778, 2845, -54500, 30374, -37278, 51293, -63012, 32590, 81487, -4526, -17025, -29499, 25453, 9191, 52382, 73821, 91024, 4011, 1691, 32004, -79050, 21151, -48222, -11907, -21237], 838160027) == -1\nassert solution.shortestSubarray([88737, 55141, -55619, 94226, -14949, 67163, -68471, -99056, 18146, -3668, -47374, -68504, 56232, -64128, 8542, 16994, -53290, 32029, -69358, -96403, 13857, 61000, -47041, 87132, 4676, 52841, -58232, -72180, -56149, 63392, -24311, 88527, 65933, -7537, 5697, 94476, -3161, 44295, 68661, 63641, -34381, 77787, -49795, -50626, -52219, 37541, -76688, 95867, -30464, -9504, -65561, 15153, -81192, -18408], 714202910) == -1\nassert solution.shortestSubarray([-13151, 70108, 47709, -78689, 69054, 69943, -570, 38183, 76393, -7085, 692, -13679, -18746, 66066, 52148, 29400, -36312, -81432, -41118, 35890, -85722, 80907, -58409, 16119, -1122, -50392, -36577, -97779, 889, 47995, -88279, -71443, 91377, 34566, -56549, -60600, -21753, 24905, 89758, 88968, -85518, -35783, 11225, 25809, -83900, -36179, 55432, 60132, 41032, -85035, 79303, -92875, 62165, 34945, 42587, -12754, 90947, 34218, -92817, 42631, 42671, -55529, -98956, -46471, 91443, -76941, 44820, 86232, -58686, -509, -90320, -34847, 56526, -80463, 13597, 5830, -54732, 85077, 90989, -95323, 71257, 77821, 60830, 97412, 75532, 12402, 27633, -95234, -98468, 32116, -6451, 13287, -28155, -95642, 28482, -63056, 60164], 980582262) == -1\nassert solution.shortestSubarray([2184, -86184, -11222, 71766, 54397, 17295, -55267, 12603, 47002, 88162, 50695, -53050, -51095, -16848, 13514, 16363, 68772, -24994, 92785, 15024, -12693, -74465, 27533, -73786, 15210, 48470, -58332, -16574, -35781, 16614, -98017, 84451, 33504, -77281, -59317, -12626, -60919, 88653, 18705, 26886, -45342, 51112, 33143, 87083, -93108, 31532, -68101, 60339, -77437, -20216, 59999, 98928, 75371, -24899, 7178, 81385, -10455, -11180, -76595, -3464, 32363, 89664, -53355, 25894, -51266, -40738, 61383, -94181, -57743, 92472, 3286, -89814, -65364], 834478398) == -1\nassert solution.shortestSubarray([85111, -53882, -139, 24031, 37248, -67270, -48430, -78993, 48571, 16712, -50965, -92616, 83711, -25616, -76382, -74569, -63037, 38994, 42498, 35904], 873646408) == -1\nassert solution.shortestSubarray([38069, 86195, 42275, -27252, 53625, 87731, -5100, -3805, 23644, 54503, -36211, 21317, -98561, -4998, -52730, -16832, -43106, 20128, 63630, -86604, 34335, -16561, -7705, 57048, -12792, -78845, -4070, -75676, -73623, 68467, 41955, 92145, -86004, -68088, -78225, 66277, 6683, 95264, 65440, -59059, -50302, -19652, -46935, -32233, -96628, -36001, -71435, 32087, 93459, -17340, 59660, -348, -40744, 47892, -79686, 71518, -8207, 30298, -80765, 36693, 70571, 6859, 82221, -58464, -82638, -20232, -42554, 19831, -40746, 2097, -80140, -52110], 947634193) == -1",
  "inefficient_solution": "class Solution:\n    def shortestSubarray(self, nums: List[int], k: int) -> int:\n        s = [0] * (len(nums) + 1)\n        for i in range(len(nums)):\n            s[i + 1] = s[i] + nums[i]\n        \n        ans = 10**10\n        for i in range(len(nums) + 1):\n            subarray_sums = {}\n            total = 0\n            for j in range(i, len(nums) + 1):\n                total += s[j]\n                if total >= k:\n                    subarray_sums[total - k] = j - i\n            if total >= k:\n                for prev_total in subarray_sums:\n                    ans = min(ans, j - subarray_sums[prev_total])\n        \n        return -1 if ans == 10**10 else ans",
  "is_python": true
}