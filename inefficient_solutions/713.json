{
  "problem_idx": 713,
  "task_name": "Subarray Product Less Than K",
  "markdown_description": "\nGiven an array of integers `nums` and an integer `k`, return *the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than* `k`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,5,2,6], k = 100\n**Output:** 8\n**Explanation:** The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3], k = 0\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 3 * 104`\n* `1 <= nums[i] <= 1000`\n* `0 <= k <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:\n        ans, s, j = 0, 1, 0\n        for i, v in enumerate(nums):\n            s *= v\n            while j <= i and s >= k:\n                s //= nums[j]\n                j += 1\n            ans += i - j + 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numSubarrayProductLessThanK(self, nums, k):\n        ans, s, j = 0, 1, 0\n        for i, v in enumerate(nums):\n            s *= v\n            while j <= i and s >= k:\n                s //= nums[j]\n                j += 1\n            ans += i - j + 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 1001), random.randint(1, 10))\n    \n    # Generate a random target sum\n    k = random.randint(0, 1000001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numSubarrayProductLessThanK(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numSubarrayProductLessThanK(nums, k) == expected_result\n        print(f\"assert solution.numSubarrayProductLessThanK({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numSubarrayProductLessThanK({nums}, {k}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numSubarrayProductLessThanK([898, 621, 183, 441, 44, 149], 819650) == 11\nassert solution.numSubarrayProductLessThanK([573, 975, 412, 611, 450], 330237) == 7\nassert solution.numSubarrayProductLessThanK([727, 462, 840, 537, 651, 166, 463], 106752) == 8\nassert solution.numSubarrayProductLessThanK([253], 948497) == 1\nassert solution.numSubarrayProductLessThanK([108, 330, 247], 396110) == 5\nassert solution.numSubarrayProductLessThanK([259, 301, 719, 409, 28, 587], 89982) == 9\nassert solution.numSubarrayProductLessThanK([598], 770446) == 1\nassert solution.numSubarrayProductLessThanK([907, 594, 956, 420, 893, 353, 382], 944172) == 13\nassert solution.numSubarrayProductLessThanK([830, 450], 120008) == 2\nassert solution.numSubarrayProductLessThanK([381, 827, 487, 728, 805, 850, 853, 229, 442], 487085) == 14\nassert solution.numSubarrayProductLessThanK([750, 372, 524], 577582) == 5\nassert solution.numSubarrayProductLessThanK([712, 862, 774, 199], 407857) == 5\nassert solution.numSubarrayProductLessThanK([883, 128, 101, 743, 903, 85, 233], 995587) == 13\nassert solution.numSubarrayProductLessThanK([830, 432, 696, 807, 575], 153236) == 5\nassert solution.numSubarrayProductLessThanK([308, 194, 224, 607, 255, 691, 500, 127, 599], 300613) == 16\nassert solution.numSubarrayProductLessThanK([409, 433, 836, 465], 543207) == 7\nassert solution.numSubarrayProductLessThanK([83], 966185) == 1\nassert solution.numSubarrayProductLessThanK([43, 405, 549, 609], 223736) == 6\nassert solution.numSubarrayProductLessThanK([98, 74, 653], 49451) == 5\nassert solution.numSubarrayProductLessThanK([436, 620, 854, 641, 701], 66096) == 5\nassert solution.numSubarrayProductLessThanK([986, 865, 692, 389, 890, 171], 455221) == 9\nassert solution.numSubarrayProductLessThanK([884, 914, 740, 587, 696, 592, 745, 639, 289, 14], 371436) == 12\nassert solution.numSubarrayProductLessThanK([396, 42, 21, 706, 915, 520, 920], 270432) == 10\nassert solution.numSubarrayProductLessThanK([876, 939, 683, 809, 203, 291, 509, 812, 928, 808], 685496) == 16\nassert solution.numSubarrayProductLessThanK([653, 630, 679, 233, 234, 883, 927], 280091) == 10\nassert solution.numSubarrayProductLessThanK([384, 593, 662, 645], 918491) == 7\nassert solution.numSubarrayProductLessThanK([230, 109, 311, 635, 947, 381, 757, 240, 170, 591], 788790) == 19\nassert solution.numSubarrayProductLessThanK([346, 716], 791724) == 3\nassert solution.numSubarrayProductLessThanK([684], 128616) == 1\nassert solution.numSubarrayProductLessThanK([291, 255, 997, 156, 547, 111, 998], 179933) == 12\nassert solution.numSubarrayProductLessThanK([226, 451], 161883) == 3\nassert solution.numSubarrayProductLessThanK([31, 69], 551526) == 3\nassert solution.numSubarrayProductLessThanK([798, 448, 81, 377, 424, 379, 290, 211], 540520) == 15\nassert solution.numSubarrayProductLessThanK([191, 614, 130, 34, 819, 889, 930, 45, 352], 654046) == 15\nassert solution.numSubarrayProductLessThanK([908, 952, 142, 915, 581, 131, 784, 994, 261, 324], 102837) == 13\nassert solution.numSubarrayProductLessThanK([951, 479, 400, 771, 212, 563, 78, 933], 813696) == 15\nassert solution.numSubarrayProductLessThanK([669, 121, 78], 873178) == 5\nassert solution.numSubarrayProductLessThanK([316, 220, 795, 551, 156, 172, 127, 846, 354, 17], 775078) == 19\nassert solution.numSubarrayProductLessThanK([259, 487, 298, 529, 927, 551, 721], 407357) == 11\nassert solution.numSubarrayProductLessThanK([218, 197, 132, 541, 511], 397258) == 9\nassert solution.numSubarrayProductLessThanK([496, 484, 401, 871], 390835) == 7\nassert solution.numSubarrayProductLessThanK([320, 537, 715, 416, 812, 79, 669, 654, 802], 620902) == 17\nassert solution.numSubarrayProductLessThanK([105, 24, 274, 443, 61, 492, 821], 43239) == 11\nassert solution.numSubarrayProductLessThanK([330, 526, 74, 773], 248303) == 7\nassert solution.numSubarrayProductLessThanK([469, 912, 470, 742, 566, 32, 917, 69, 165], 186272) == 13\nassert solution.numSubarrayProductLessThanK([500], 303980) == 1\nassert solution.numSubarrayProductLessThanK([753], 685845) == 1\nassert solution.numSubarrayProductLessThanK([561, 25, 965, 432], 305968) == 6\nassert solution.numSubarrayProductLessThanK([200, 856, 845, 655], 181572) == 5\nassert solution.numSubarrayProductLessThanK([235, 225, 912, 154, 287, 366, 742], 227331) == 12\nassert solution.numSubarrayProductLessThanK([969, 331, 140, 712, 537, 83, 744, 431, 27], 718566) == 17\nassert solution.numSubarrayProductLessThanK([321, 400, 81, 747, 231, 295], 799402) == 11\nassert solution.numSubarrayProductLessThanK([114], 82946) == 1\nassert solution.numSubarrayProductLessThanK([567, 776], 812035) == 3\nassert solution.numSubarrayProductLessThanK([512, 168, 987, 160, 813, 440, 9, 472, 278, 481], 968067) == 19\nassert solution.numSubarrayProductLessThanK([547, 302], 660936) == 3\nassert solution.numSubarrayProductLessThanK([164, 250, 674, 507, 454, 633, 71, 186], 267423) == 13\nassert solution.numSubarrayProductLessThanK([820, 291, 300], 906433) == 5\nassert solution.numSubarrayProductLessThanK([13, 442, 320, 655, 517], 589098) == 9\nassert solution.numSubarrayProductLessThanK([668], 614050) == 1\nassert solution.numSubarrayProductLessThanK([149, 822, 168, 124, 448], 127963) == 8\nassert solution.numSubarrayProductLessThanK([59, 874, 869, 306, 183, 957, 647, 817], 110879) == 10\nassert solution.numSubarrayProductLessThanK([276, 346], 686313) == 3\nassert solution.numSubarrayProductLessThanK([419, 169, 304, 675, 430, 761, 932, 958, 879, 54], 821956) == 17\nassert solution.numSubarrayProductLessThanK([468, 909, 107, 926, 871, 7, 715], 221390) == 11\nassert solution.numSubarrayProductLessThanK([703, 244, 830, 258, 376, 170], 103064) == 8\nassert solution.numSubarrayProductLessThanK([345, 879, 496, 691, 431, 839, 629], 874317) == 13\nassert solution.numSubarrayProductLessThanK([404, 959], 958243) == 3\nassert solution.numSubarrayProductLessThanK([331, 802, 13, 462, 277, 655, 872, 308, 83, 219], 268035) == 17\nassert solution.numSubarrayProductLessThanK([131], 342268) == 1\nassert solution.numSubarrayProductLessThanK([926, 363], 20461) == 2\nassert solution.numSubarrayProductLessThanK([241, 648, 423, 323, 487, 742, 515, 904, 837, 909], 718618) == 17\nassert solution.numSubarrayProductLessThanK([926, 610, 29, 572, 649, 416, 11, 280, 481], 838791) == 17\nassert solution.numSubarrayProductLessThanK([642, 702, 296, 61, 117], 670632) == 9\nassert solution.numSubarrayProductLessThanK([39, 137], 569475) == 3\nassert solution.numSubarrayProductLessThanK([132, 88, 151, 462, 523, 873, 721], 22304) == 9\nassert solution.numSubarrayProductLessThanK([738, 264, 299, 806, 210, 297, 59, 271], 88236) == 12\nassert solution.numSubarrayProductLessThanK([804, 781, 171, 930, 809, 432, 259, 419, 940, 320], 818983) == 19\nassert solution.numSubarrayProductLessThanK([30, 897, 177, 970, 265, 270, 907, 103], 52596) == 9\nassert solution.numSubarrayProductLessThanK([234, 991, 75], 754054) == 5\nassert solution.numSubarrayProductLessThanK([436, 354, 328, 398, 728, 485, 642, 768], 19225) == 8\nassert solution.numSubarrayProductLessThanK([78, 939, 224], 16314) == 3\nassert solution.numSubarrayProductLessThanK([498, 807, 977, 958, 226, 402, 831, 210], 562300) == 13\nassert solution.numSubarrayProductLessThanK([403, 461], 255710) == 3\nassert solution.numSubarrayProductLessThanK([729, 775, 105, 161, 917, 94, 883, 467, 865], 983019) == 17\nassert solution.numSubarrayProductLessThanK([23, 93], 36151) == 3\nassert solution.numSubarrayProductLessThanK([376, 771, 282, 147, 998, 923, 202, 868, 1], 140148) == 11\nassert solution.numSubarrayProductLessThanK([340, 608, 557, 453], 113011) == 4\nassert solution.numSubarrayProductLessThanK([25, 710, 377, 526, 578, 416, 923, 295], 518306) == 15\nassert solution.numSubarrayProductLessThanK([810, 953, 883, 266], 992375) == 7\nassert solution.numSubarrayProductLessThanK([826, 941, 768, 559], 210349) == 4\nassert solution.numSubarrayProductLessThanK([560, 207, 136, 584, 388], 283915) == 9\nassert solution.numSubarrayProductLessThanK([981, 149, 582, 349, 279, 50], 996066) == 11\nassert solution.numSubarrayProductLessThanK([759, 377, 721, 240, 192], 205938) == 7\nassert solution.numSubarrayProductLessThanK([752, 917, 954, 613, 714, 688, 725, 880, 820], 469157) == 10\nassert solution.numSubarrayProductLessThanK([939, 949, 185, 813, 661], 752727) == 8\nassert solution.numSubarrayProductLessThanK([597, 605, 645, 559, 906, 610, 71], 326104) == 8\nassert solution.numSubarrayProductLessThanK([770, 24, 66, 511, 863, 906, 898, 704, 377], 787307) == 16\nassert solution.numSubarrayProductLessThanK([541, 739, 191, 421], 902880) == 7\nassert solution.numSubarrayProductLessThanK([318], 235601) == 1",
  "inefficient_solution": "class Solution:\n    def numSubarrayProductLessThanK(self, nums, k):\n        if k <= 1:\n            return 0\n        ans = 0\n        for i in range(len(nums)):\n            product = 1\n            for j in range(i, len(nums)):\n                product *= nums[j]\n                if product >= k:\n                    break\n                ans += 1\n        return ans",
  "is_python": true
}