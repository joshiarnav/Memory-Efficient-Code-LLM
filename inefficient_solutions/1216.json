{
  "problem_idx": 1216,
  "task_name": "Valid Palindrome III",
  "markdown_description": "\nGiven a string `s` and an integer `k`, return `true` if `s` is a `k`**-palindrome**.\n\n\nA string is `k`**-palindrome** if it can be transformed into a palindrome by removing at most `k` characters from it.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcdeca\", k = 2\n**Output:** true\n**Explanation:** Remove 'b' and 'e' characters.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abbababa\", k = 1\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s` consists of only lowercase English letters.\n* `1 <= k <= s.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def isValidPalindrome(self, s: str, k: int) -> bool:\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1] + 2\n                else:\n                    f[i][j] = max(f[i + 1][j], f[i][j - 1])\n                if f[i][j] + k >= n:\n                    return True\n        return False\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isValidPalindrome(self, s: str, k: int) -> bool:\n        n = len(s)\n        f = [[0] * n for _ in range(n)]\n        for i in range(n):\n            f[i][i] = 1\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    f[i][j] = f[i + 1][j - 1] + 2\n                else:\n                    f[i][j] = max(f[i + 1][j], f[i][j - 1])\n                if f[i][j] + k >= n:\n                    return True\n        return False\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string\n    letters = list('abcdefghijklmnopqrstuvwxyz')\n    s = ''.join(random.choice(letters) for _ in range(random.randint(1, 11)))\n\n    # Generate a random integer k\n    k = random.randint(1, len(s))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isValidPalindrome(s, k)\n\n    return s, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isValidPalindrome(s, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.isValidPalindrome('{s}', {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isValidPalindrome('srotiuldjxx', 9) == True\nassert solution.isValidPalindrome('iaywsmro', 2) == False\nassert solution.isValidPalindrome('mxfzpcjo', 5) == False\nassert solution.isValidPalindrome('bccjhoucb', 2) == False\nassert solution.isValidPalindrome('abk', 1) == False\nassert solution.isValidPalindrome('jslqbarnq', 8) == True\nassert solution.isValidPalindrome('fvcudiqglm', 3) == False\nassert solution.isValidPalindrome('vdye', 2) == False\nassert solution.isValidPalindrome('jsdyakyuz', 3) == False\nassert solution.isValidPalindrome('ihtxv', 4) == True\nassert solution.isValidPalindrome('ivr', 3) == True\nassert solution.isValidPalindrome('r', 1) == False\nassert solution.isValidPalindrome('wkln', 4) == True\nassert solution.isValidPalindrome('faaw', 4) == True\nassert solution.isValidPalindrome('z', 1) == False\nassert solution.isValidPalindrome('seouey', 1) == False\nassert solution.isValidPalindrome('yljtwmvwk', 1) == False\nassert solution.isValidPalindrome('xykb', 3) == True\nassert solution.isValidPalindrome('qmx', 2) == True\nassert solution.isValidPalindrome('uwkbam', 1) == False\nassert solution.isValidPalindrome('ml', 2) == True\nassert solution.isValidPalindrome('dhkbic', 5) == True\nassert solution.isValidPalindrome('wlaa', 4) == True\nassert solution.isValidPalindrome('n', 1) == False\nassert solution.isValidPalindrome('desi', 1) == False\nassert solution.isValidPalindrome('eff', 1) == True\nassert solution.isValidPalindrome('fwmlxjhamz', 5) == False\nassert solution.isValidPalindrome('ya', 2) == True\nassert solution.isValidPalindrome('qvbende', 3) == False\nassert solution.isValidPalindrome('onzvjqxeopq', 10) == True\nassert solution.isValidPalindrome('ywxudf', 3) == False\nassert solution.isValidPalindrome('untakjvkn', 5) == True\nassert solution.isValidPalindrome('uhwfqhc', 5) == True\nassert solution.isValidPalindrome('lrslgfrz', 5) == True\nassert solution.isValidPalindrome('jbk', 2) == True\nassert solution.isValidPalindrome('kzy', 1) == False\nassert solution.isValidPalindrome('outcv', 5) == True\nassert solution.isValidPalindrome('qejl', 3) == True\nassert solution.isValidPalindrome('qauhjng', 4) == False\nassert solution.isValidPalindrome('vu', 2) == True\nassert solution.isValidPalindrome('oddsvlq', 3) == False\nassert solution.isValidPalindrome('s', 1) == False\nassert solution.isValidPalindrome('bmuqmnaefdb', 2) == False\nassert solution.isValidPalindrome('eqzugt', 5) == True\nassert solution.isValidPalindrome('hrjfjmdw', 5) == True\nassert solution.isValidPalindrome('swepsv', 5) == True\nassert solution.isValidPalindrome('ooyk', 4) == True\nassert solution.isValidPalindrome('mhrxymstdy', 5) == False\nassert solution.isValidPalindrome('aoy', 3) == True\nassert solution.isValidPalindrome('wdlqzdky', 4) == False\nassert solution.isValidPalindrome('orrqksvkd', 2) == False\nassert solution.isValidPalindrome('xvhsqgilp', 7) == False\nassert solution.isValidPalindrome('eccruydqdka', 5) == False\nassert solution.isValidPalindrome('nvorw', 4) == True\nassert solution.isValidPalindrome('p', 1) == False\nassert solution.isValidPalindrome('fsdtozqthy', 6) == False\nassert solution.isValidPalindrome('pof', 3) == True\nassert solution.isValidPalindrome('h', 1) == False\nassert solution.isValidPalindrome('sykqztwu', 8) == True\nassert solution.isValidPalindrome('qigjym', 6) == True\nassert solution.isValidPalindrome('otdtomopykr', 10) == True\nassert solution.isValidPalindrome('pvuehesnnn', 3) == False\nassert solution.isValidPalindrome('qqxnkplxf', 2) == False\nassert solution.isValidPalindrome('fixsylq', 2) == False\nassert solution.isValidPalindrome('ekylpvwnimu', 11) == True\nassert solution.isValidPalindrome('ubw', 1) == False\nassert solution.isValidPalindrome('rfuushn', 3) == False\nassert solution.isValidPalindrome('aamhhneqava', 2) == False\nassert solution.isValidPalindrome('qavvcmrf', 8) == True\nassert solution.isValidPalindrome('yyzwysqhy', 7) == True\nassert solution.isValidPalindrome('quux', 2) == True\nassert solution.isValidPalindrome('scosq', 4) == True\nassert solution.isValidPalindrome('dw', 1) == True\nassert solution.isValidPalindrome('qozbbuwhfi', 1) == False\nassert solution.isValidPalindrome('nk', 1) == True\nassert solution.isValidPalindrome('e', 1) == False\nassert solution.isValidPalindrome('arrcci', 5) == True\nassert solution.isValidPalindrome('kwamvz', 2) == False\nassert solution.isValidPalindrome('lqmwjilykyb', 7) == False\nassert solution.isValidPalindrome('nf', 2) == True\nassert solution.isValidPalindrome('ja', 2) == True\nassert solution.isValidPalindrome('nxbqpnk', 7) == True\nassert solution.isValidPalindrome('yia', 3) == True\nassert solution.isValidPalindrome('comzblz', 3) == False\nassert solution.isValidPalindrome('x', 1) == False\nassert solution.isValidPalindrome('g', 1) == False\nassert solution.isValidPalindrome('cfrqsbju', 3) == False\nassert solution.isValidPalindrome('xzublzfqav', 1) == False\nassert solution.isValidPalindrome('xajqnydqwfv', 11) == True\nassert solution.isValidPalindrome('fzunjefcyx', 10) == True\nassert solution.isValidPalindrome('hqrer', 4) == True\nassert solution.isValidPalindrome('jcr', 1) == False\nassert solution.isValidPalindrome('si', 2) == True\nassert solution.isValidPalindrome('lvea', 1) == False\nassert solution.isValidPalindrome('ttamplfy', 8) == True\nassert solution.isValidPalindrome('hcaczd', 5) == True\nassert solution.isValidPalindrome('frihhrezlu', 3) == False\nassert solution.isValidPalindrome('rxiomcg', 3) == False\nassert solution.isValidPalindrome('hx', 2) == True\nassert solution.isValidPalindrome('qaftaojpxs', 10) == True",
  "inefficient_solution": "class Solution:\n    def isValidPalindrome(self, s: str, k: int) -> bool:\n        n = len(s)\n        def is_pal(s):\n            return s == s[::-1]\n        def remove_at(i):\n            return s[:i] + s[i+1:]\n        def dfs(i, j, k):\n            if k == 0:\n                return True\n            if i >= j:\n                return True\n            if is_pal(remove_at(i) + remove_at(j)):\n                return True\n            return dfs(i+1, j, k) or dfs(i, j-1, k)\n        return dfs(0, n-1, k)",
  "is_python": true
}