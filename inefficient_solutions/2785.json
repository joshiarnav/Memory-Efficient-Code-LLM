{
  "problem_idx": 2785,
  "task_name": "Sort Vowels in a String",
  "markdown_description": "\nGiven a **0-indexed** string `s`, **permute** `s` to get a new string `t` such that:\n\n\n* All consonants remain in their original places. More formally, if there is an index `i` with `0 <= i < s.length` such that `s[i]` is a consonant, then `t[i] = s[i]`.\n* The vowels must be sorted in the **nondecreasing** order of their **ASCII** values. More formally, for pairs of indices `i`, `j` with `0 <= i < j < s.length` such that `s[i]` and `s[j]` are vowels, then `t[i]` must not have a higher ASCII value than `t[j]`.\n\n\nReturn *the resulting string*.\n\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"lEetcOde\"\n**Output:** \"lEOtcede\"\n**Explanation:** 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"lYmpH\"\n**Output:** \"lYmpH\"\n**Explanation:** There are no vowels in s (all characters in s are consonants), so we return \"lYmpH\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists only of letters of the\u00a0English alphabet\u00a0in **uppercase and lowercase**.\n\n\n",
  "canonical_solution": "class Solution:\n    def sortVowels(self, s: str) -> str:\n        vs = [c for c in s if c.lower() in \"aeiou\"]\n        vs.sort()\n        cs = list(s)\n        j = 0\n        for i, c in enumerate(cs):\n            if c.lower() in \"aeiou\":\n                cs[i] = vs[j]\n                j += 1\n        return \"\".join(cs)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def sortVowels(self, s: str) -> str:\n        vs = [c for c in s if c.lower() in \"aeiou\"]\n        vs.sort()\n        cs = list(s)\n        j = 0\n        for i, c in enumerate(cs):\n            if c.lower() in \"aeiou\":\n                cs[i] = vs[j]\n                j += 1\n        return \"\".join(cs)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = \"\"\n    for _ in range(random.randint(1, 10)):\n        s += random.choice(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.sortVowels(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sortVowels(s) == expected_result\n        print(f\"assert solution.sortVowels('{s}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.sortVowels('{s}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sortVowels('nvmDWWMl') == 'nvmDWWMl'\nassert solution.sortVowels('jmiPZP') == 'jmiPZP'\nassert solution.sortVowels('QbVkIC') == 'QbVkIC'\nassert solution.sortVowels('PGshuHv') == 'PGshuHv'\nassert solution.sortVowels('fWmLDBeb') == 'fWmLDBeb'\nassert solution.sortVowels('ZPoUEF') == 'ZPEUoF'\nassert solution.sortVowels('rlwlAwX') == 'rlwlAwX'\nassert solution.sortVowels('ek') == 'ek'\nassert solution.sortVowels('m') == 'm'\nassert solution.sortVowels('UL') == 'UL'\nassert solution.sortVowels('t') == 't'\nassert solution.sortVowels('ZXgQkb') == 'ZXgQkb'\nassert solution.sortVowels('UuoVT') == 'UouVT'\nassert solution.sortVowels('Dm') == 'Dm'\nassert solution.sortVowels('Aei') == 'Aei'\nassert solution.sortVowels('MfjN') == 'MfjN'\nassert solution.sortVowels('jgKn') == 'jgKn'\nassert solution.sortVowels('g') == 'g'\nassert solution.sortVowels('qLhXkg') == 'qLhXkg'\nassert solution.sortVowels('wLmyIfDHs') == 'wLmyIfDHs'\nassert solution.sortVowels('y') == 'y'\nassert solution.sortVowels('sdPByBxQaY') == 'sdPByBxQaY'\nassert solution.sortVowels('saPIhrCB') == 'sIPahrCB'\nassert solution.sortVowels('lf') == 'lf'\nassert solution.sortVowels('jDvDxwK') == 'jDvDxwK'\nassert solution.sortVowels('rL') == 'rL'\nassert solution.sortVowels('Vcp') == 'Vcp'\nassert solution.sortVowels('zFAlvGk') == 'zFAlvGk'\nassert solution.sortVowels('awvA') == 'Awva'\nassert solution.sortVowels('WghzJ') == 'WghzJ'\nassert solution.sortVowels('rjEpezsyc') == 'rjEpezsyc'\nassert solution.sortVowels('ukaso') == 'akosu'\nassert solution.sortVowels('grranMGN') == 'grranMGN'\nassert solution.sortVowels('lKYCaszb') == 'lKYCaszb'\nassert solution.sortVowels('DSzWH') == 'DSzWH'\nassert solution.sortVowels('Ctge') == 'Ctge'\nassert solution.sortVowels('uuXkRU') == 'UuXkRu'\nassert solution.sortVowels('uO') == 'Ou'\nassert solution.sortVowels('NZ') == 'NZ'\nassert solution.sortVowels('XTNJXYqy') == 'XTNJXYqy'\nassert solution.sortVowels('w') == 'w'\nassert solution.sortVowels('HwmJVpyJ') == 'HwmJVpyJ'\nassert solution.sortVowels('JSSGM') == 'JSSGM'\nassert solution.sortVowels('XsbWfHlFD') == 'XsbWfHlFD'\nassert solution.sortVowels('ltDXN') == 'ltDXN'\nassert solution.sortVowels('ZURLnXdxLv') == 'ZURLnXdxLv'\nassert solution.sortVowels('ymbnF') == 'ymbnF'\nassert solution.sortVowels('oOiS') == 'OioS'\nassert solution.sortVowels('ll') == 'll'\nassert solution.sortVowels('UnElGaPpze') == 'EnUlGaPpze'\nassert solution.sortVowels('w') == 'w'\nassert solution.sortVowels('hxNAX') == 'hxNAX'\nassert solution.sortVowels('HF') == 'HF'\nassert solution.sortVowels('qdLvmvq') == 'qdLvmvq'\nassert solution.sortVowels('aWecFic') == 'aWecFic'\nassert solution.sortVowels('INMsS') == 'INMsS'\nassert solution.sortVowels('ExyYj') == 'ExyYj'\nassert solution.sortVowels('TssQuk') == 'TssQuk'\nassert solution.sortVowels('HWQNB') == 'HWQNB'\nassert solution.sortVowels('IRUBOrIw') == 'IRIBOrUw'\nassert solution.sortVowels('GINXaYXnRq') == 'GINXaYXnRq'\nassert solution.sortVowels('o') == 'o'\nassert solution.sortVowels('AxqOSngOTf') == 'AxqOSngOTf'\nassert solution.sortVowels('xmvbyLO') == 'xmvbyLO'\nassert solution.sortVowels('CdkEyFHo') == 'CdkEyFHo'\nassert solution.sortVowels('QjYJH') == 'QjYJH'\nassert solution.sortVowels('yWwPJT') == 'yWwPJT'\nassert solution.sortVowels('TjARcdwHC') == 'TjARcdwHC'\nassert solution.sortVowels('FBSaiMzO') == 'FBSOaMzi'\nassert solution.sortVowels('JvzfaQLa') == 'JvzfaQLa'\nassert solution.sortVowels('EuLJBmP') == 'EuLJBmP'\nassert solution.sortVowels('TQ') == 'TQ'\nassert solution.sortVowels('OetBtt') == 'OetBtt'\nassert solution.sortVowels('N') == 'N'\nassert solution.sortVowels('gfBwXx') == 'gfBwXx'\nassert solution.sortVowels('RkmyeQnuvB') == 'RkmyeQnuvB'\nassert solution.sortVowels('IsF') == 'IsF'\nassert solution.sortVowels('uA') == 'Au'\nassert solution.sortVowels('RoYzQHwf') == 'RoYzQHwf'\nassert solution.sortVowels('Jm') == 'Jm'\nassert solution.sortVowels('y') == 'y'\nassert solution.sortVowels('zAhJIOL') == 'zAhJIOL'\nassert solution.sortVowels('lOJDKYiIku') == 'lIJDKYOiku'\nassert solution.sortVowels('cqPhiioWeN') == 'cqPheiiWoN'\nassert solution.sortVowels('BMGtFHfwwo') == 'BMGtFHfwwo'\nassert solution.sortVowels('PKmwGqX') == 'PKmwGqX'\nassert solution.sortVowels('VJJx') == 'VJJx'\nassert solution.sortVowels('oCtkqbYefW') == 'eCtkqbYofW'\nassert solution.sortVowels('x') == 'x'\nassert solution.sortVowels('vKroN') == 'vKroN'\nassert solution.sortVowels('mMyb') == 'mMyb'\nassert solution.sortVowels('SMpB') == 'SMpB'\nassert solution.sortVowels('OxFNL') == 'OxFNL'\nassert solution.sortVowels('XKQtGdpS') == 'XKQtGdpS'\nassert solution.sortVowels('TouPVhIA') == 'TAIPVhou'\nassert solution.sortVowels('yAaRq') == 'yAaRq'\nassert solution.sortVowels('vpUAtBlh') == 'vpAUtBlh'\nassert solution.sortVowels('tcD') == 'tcD'\nassert solution.sortVowels('WwnKBTWCF') == 'WwnKBTWCF'\nassert solution.sortVowels('sz') == 'sz'",
  "inefficient_solution": "class Solution:\n    def sortVowels(self, s: str) -> str:\n        vs = [char for index, char in enumerate(s) for i in range(10) if char.lower() in \"aeiou\"]\n        vs.sort()\n        cs = [char for char in s for i in range(10)]\n        j = 0\n        for index, char in enumerate(s):\n            if char.lower() in \"aeiou\":\n                for k in range(10):\n                    cs[index] = vs[j]\n                    j += 1\n                    break\n        return \"\".join(cs)",
  "is_python": true
}