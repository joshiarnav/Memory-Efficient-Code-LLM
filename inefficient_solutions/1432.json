{
  "problem_idx": 1432,
  "task_name": "Max Difference You Can Get From Changing an Integer",
  "markdown_description": "\nYou are given an integer `num`. You will apply the following steps exactly **two** times:\n\n\n* Pick a digit `x (0 <= x <= 9)`.\n* Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.\n* Replace all the occurrences of `x` in the decimal representation of `num` by `y`.\n* The new integer **cannot** have any leading zeros, also the new integer **cannot** be 0.\n\n\nLet `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.\n\n\nReturn *the max difference* between `a` and `b`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 555\n**Output:** 888\n**Explanation:** The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 9\n**Output:** 8\n**Explanation:** The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 10`8\n\n\n",
  "canonical_solution": "class Solution:\n    def maxDiff(self, num: int) -> int:\n        a, b = str(num), str(num)\n        for c in a:\n            if c != \"9\":\n                a = a.replace(c, \"9\")\n                break\n        if b[0] != \"1\":\n            b = b.replace(b[0], \"1\")\n        else:\n            for c in b[1:]:\n                if c not in \"01\":\n                    b = b.replace(c, \"0\")\n                    break\n        return int(a) - int(b)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxDiff(self, num: int) -> int:\n        a, b = str(num), str(num)\n        for c in a:\n            if c != \"9\":\n                a = a.replace(c, \"9\")\n                break\n        if b[0] != \"1\":\n            b = b.replace(b[0], \"1\")\n        else:\n            for c in b[1:]:\n                if c not in \"01\":\n                    b = b.replace(c, \"0\")\n                    break\n        return int(a) - int(b)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random input number\n    num = random.randint(1, 100000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxDiff(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxDiff(num) == expected_result\n        print(f\"assert solution.maxDiff({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxDiff({num}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxDiff(63376147) == 80008000\nassert solution.maxDiff(37327295) == 80800000\nassert solution.maxDiff(37983449) == 80008000\nassert solution.maxDiff(99606988) == 88303800\nassert solution.maxDiff(47257378) == 80000000\nassert solution.maxDiff(33382228) == 88800000\nassert solution.maxDiff(32810465) == 80000000\nassert solution.maxDiff(76911223) == 80000000\nassert solution.maxDiff(12624645) == 82020000\nassert solution.maxDiff(35711970) == 80000000\nassert solution.maxDiff(63351308) == 80000000\nassert solution.maxDiff(90937649) == 89800008\nassert solution.maxDiff(38790238) == 80000080\nassert solution.maxDiff(63526363) == 80008080\nassert solution.maxDiff(31497413) == 80000008\nassert solution.maxDiff(76712947) == 80800008\nassert solution.maxDiff(39227003) == 80000008\nassert solution.maxDiff(18474283) == 88000080\nassert solution.maxDiff(27180110) == 80000000\nassert solution.maxDiff(23828949) == 80080000\nassert solution.maxDiff(40860590) == 80000000\nassert solution.maxDiff(60444843) == 80000000\nassert solution.maxDiff(31883887) == 80008000\nassert solution.maxDiff(88592514) == 88000000\nassert solution.maxDiff(59724387) == 80000000\nassert solution.maxDiff(32997615) == 80000000\nassert solution.maxDiff(49007180) == 80000000\nassert solution.maxDiff(27400782) == 80000008\nassert solution.maxDiff(24240370) == 80800000\nassert solution.maxDiff(6720021) == 8000000\nassert solution.maxDiff(72096354) == 80000000\nassert solution.maxDiff(142271) == 840008\nassert solution.maxDiff(31369028) == 80800000\nassert solution.maxDiff(1376786) == 8300000\nassert solution.maxDiff(14812714) == 84080084\nassert solution.maxDiff(82892003) == 80800000\nassert solution.maxDiff(31883470) == 80008000\nassert solution.maxDiff(98814026) == 81100000\nassert solution.maxDiff(1801868) == 8808808\nassert solution.maxDiff(83863607) == 80800000\nassert solution.maxDiff(55802272) == 88000000\nassert solution.maxDiff(53796815) == 80000008\nassert solution.maxDiff(41681619) == 80000000\nassert solution.maxDiff(63431014) == 80000000\nassert solution.maxDiff(29028991) == 80080000\nassert solution.maxDiff(85024660) == 80000000\nassert solution.maxDiff(42836402) == 80000800\nassert solution.maxDiff(98023530) == 81000000\nassert solution.maxDiff(91869349) == 88008008\nassert solution.maxDiff(51911479) == 80000000\nassert solution.maxDiff(52323586) == 80000800\nassert solution.maxDiff(30600710) == 80000000\nassert solution.maxDiff(59572421) == 80800000\nassert solution.maxDiff(97105655) == 82000000\nassert solution.maxDiff(73849806) == 80000000\nassert solution.maxDiff(94345228) == 85050000\nassert solution.maxDiff(57785518) == 80008800\nassert solution.maxDiff(64793617) == 80000800\nassert solution.maxDiff(85880275) == 80880000\nassert solution.maxDiff(36891945) == 80000000\nassert solution.maxDiff(35801752) == 80000000\nassert solution.maxDiff(1374000) == 8300000\nassert solution.maxDiff(728569) == 800000\nassert solution.maxDiff(90196832) == 89080000\nassert solution.maxDiff(4544863) == 8088000\nassert solution.maxDiff(6984741) == 8000000\nassert solution.maxDiff(92073851) == 87000000\nassert solution.maxDiff(15895230) == 85005000\nassert solution.maxDiff(64291924) == 80000000\nassert solution.maxDiff(17493640) == 87000000\nassert solution.maxDiff(99765031) == 88200000\nassert solution.maxDiff(16631695) == 86608600\nassert solution.maxDiff(69090843) == 80000000\nassert solution.maxDiff(54980228) == 80000000\nassert solution.maxDiff(19172633) == 89800000\nassert solution.maxDiff(64233914) == 80000000\nassert solution.maxDiff(97916761) == 82800200\nassert solution.maxDiff(62091180) == 80000000\nassert solution.maxDiff(2352332) == 8008008\nassert solution.maxDiff(9095408) == 8980090\nassert solution.maxDiff(58938166) == 80000000\nassert solution.maxDiff(44884057) == 88008000\nassert solution.maxDiff(42486828) == 80800000\nassert solution.maxDiff(38125726) == 80000000\nassert solution.maxDiff(71019184) == 80000000\nassert solution.maxDiff(89727794) == 80000000\nassert solution.maxDiff(5859568) == 8080800\nassert solution.maxDiff(77463531) == 88000000\nassert solution.maxDiff(91753461) == 88000008\nassert solution.maxDiff(34973520) == 80008000\nassert solution.maxDiff(18649736) == 88000000\nassert solution.maxDiff(6804435) == 8000000\nassert solution.maxDiff(5182919) == 8000000\nassert solution.maxDiff(94988224) == 85800005\nassert solution.maxDiff(46240169) == 80080000\nassert solution.maxDiff(69705934) == 80000000\nassert solution.maxDiff(39026604) == 80000000\nassert solution.maxDiff(73834559) == 80000000\nassert solution.maxDiff(94499298) == 85588080\nassert solution.maxDiff(39913557) == 80008000",
  "inefficient_solution": "class Solution:\n    def maxDiff(self, num: int) -> int:\n        a_list = []\n        b_list = []\n        for i in range(len(str(num))):\n            a_list.append(str(num)[i])\n        for x in range(10):\n            for y in range(10):\n                temp = a_list.copy()\n                for i in range(len(temp)):\n                    if temp[i] == str(x):\n                        temp[i] = str(y)\n                new_num_a = int(\"\".join(temp))\n                if new_num_a != 0 and new_num_a % 10 != 0:\n                    a_list = temp\n                    break\n            if a_list != temp:\n                break\n        for i in range(len(str(num))):\n            b_list.append(str(num)[i])\n        for x in range(10):\n            for y in range(10):\n                temp = b_list.copy()\n                for i in range(len(temp)):\n                    if temp[i] == str(x):\n                        temp[i] = str(y)\n                new_num_b = int(\"\".join(temp))\n                if new_num_b != 0 and new_num_b % 10 != 0:\n                    b_list = temp\n                    break\n            if b_list != temp:\n                for i in range(len(temp)):\n                    if temp[i] != \"0\":\n                        b_list = temp\n                        break\n                break\n        return abs(int(\"\".join(a_list)) - int(\"\".join(b_list)))",
  "is_python": true
}