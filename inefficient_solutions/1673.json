{
  "problem_idx": 1673,
  "task_name": "Find the Most Competitive Subsequence",
  "markdown_description": "\nGiven an integer array `nums` and a positive integer `k`, return *the most **competitive** subsequence of* `nums` *of size* `k`.\n\n\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\n\n\nWe define that a subsequence `a` is more **competitive** than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number **less** than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,5,2,6], k = 2\n**Output:** [2,6]\n**Explanation:** Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,3,3,5,4,9,6], k = 4\n**Output:** [2,3,3,4]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 109`\n* `1 <= k <= nums.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n        stk = []\n        n = len(nums)\n        for i, v in enumerate(nums):\n            while stk and stk[-1] > v and len(stk) + n - i > k:\n                stk.pop()\n            if len(stk) < k:\n                stk.append(v)\n        return stk\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n        stk = []\n        n = len(nums)\n        for i, v in enumerate(nums):\n            while stk and stk[-1] > v and len(stk) + n - i > k:\n                stk.pop()\n            if len(stk) < k:\n                stk.append(v)\n        return stk\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random target sum\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.mostCompetitive(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.mostCompetitive(nums, k) == expected_result\n        print(f\"assert solution.mostCompetitive({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.mostCompetitive({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.mostCompetitive([64, 76, 63, 78, 85, 65], 4) == [63, 78, 85, 65]\nassert solution.mostCompetitive([21, 60, 65, 33], 4) == [21, 60, 65, 33]\nassert solution.mostCompetitive([38, 85, 84, 81], 2) == [38, 81]\nassert solution.mostCompetitive([42, 50, 93], 3) == [42, 50, 93]\nassert solution.mostCompetitive([11, 35, 67, 90, 5, 63, 96, 48], 5) == [11, 5, 63, 96, 48]\nassert solution.mostCompetitive([28, 6, 77, 10], 4) == [28, 6, 77, 10]\nassert solution.mostCompetitive([50, 79, 1, 68], 4) == [50, 79, 1, 68]\nassert solution.mostCompetitive([97, 37], 2) == [97, 37]\nassert solution.mostCompetitive([68, 19, 73, 64, 33], 5) == [68, 19, 73, 64, 33]\nassert solution.mostCompetitive([58, 21, 44, 34, 46, 1, 70, 66], 2) == [1, 66]\nassert solution.mostCompetitive([27, 79, 76, 17, 15, 34, 48, 46], 1) == [15]\nassert solution.mostCompetitive([47, 41, 12, 18, 35, 82], 2) == [12, 18]\nassert solution.mostCompetitive([83, 38, 43, 18, 59, 29, 79, 96], 7) == [38, 43, 18, 59, 29, 79, 96]\nassert solution.mostCompetitive([4, 18, 39], 1) == [4]\nassert solution.mostCompetitive([9, 47, 4, 8], 1) == [4]\nassert solution.mostCompetitive([85, 1, 62, 7, 96, 88, 95, 35], 6) == [1, 7, 96, 88, 95, 35]\nassert solution.mostCompetitive([76, 91], 1) == [76]\nassert solution.mostCompetitive([40, 27, 67, 2, 74, 9, 41, 82], 6) == [27, 2, 74, 9, 41, 82]\nassert solution.mostCompetitive([15, 11, 2, 26, 32, 16, 49], 4) == [2, 26, 16, 49]\nassert solution.mostCompetitive([55, 8, 63, 49, 43, 9, 70], 6) == [8, 63, 49, 43, 9, 70]\nassert solution.mostCompetitive([55, 87, 43], 1) == [43]\nassert solution.mostCompetitive([89, 40, 5, 66, 50, 81], 1) == [5]\nassert solution.mostCompetitive([57, 77], 1) == [57]\nassert solution.mostCompetitive([39, 75, 49, 14, 58, 100], 3) == [14, 58, 100]\nassert solution.mostCompetitive([6, 36, 88, 46, 16, 66, 53, 64, 24, 28], 9) == [6, 36, 46, 16, 66, 53, 64, 24, 28]\nassert solution.mostCompetitive([36, 8, 41, 82, 69, 94, 40, 28, 33, 14], 3) == [8, 28, 14]\nassert solution.mostCompetitive([56, 30, 7, 72, 42, 83, 25, 63], 2) == [7, 25]\nassert solution.mostCompetitive([71, 24, 65, 88, 68, 85, 79, 84, 60], 2) == [24, 60]\nassert solution.mostCompetitive([67, 4, 3, 1, 75, 41, 81, 58], 3) == [1, 41, 58]\nassert solution.mostCompetitive([4, 14, 84, 38, 100, 3, 49], 2) == [3, 49]\nassert solution.mostCompetitive([11, 74, 78, 9, 54, 38], 6) == [11, 74, 78, 9, 54, 38]\nassert solution.mostCompetitive([59, 25, 61, 7, 19, 41], 6) == [59, 25, 61, 7, 19, 41]\nassert solution.mostCompetitive([42, 84, 31, 56, 28], 2) == [31, 28]\nassert solution.mostCompetitive([36, 18, 84, 28, 50, 57, 81, 5, 59], 1) == [5]\nassert solution.mostCompetitive([57, 28, 88, 34, 51], 3) == [28, 34, 51]\nassert solution.mostCompetitive([8, 56, 93, 84, 73, 75], 1) == [8]\nassert solution.mostCompetitive([14, 89, 77], 2) == [14, 77]\nassert solution.mostCompetitive([86, 9, 29, 70, 81, 96, 77], 4) == [9, 29, 70, 77]\nassert solution.mostCompetitive([28, 61, 72, 95], 1) == [28]\nassert solution.mostCompetitive([97, 16, 95, 63, 58], 3) == [16, 63, 58]\nassert solution.mostCompetitive([99, 8, 86, 5, 6], 2) == [5, 6]\nassert solution.mostCompetitive([37, 81, 61, 95, 54, 78], 6) == [37, 81, 61, 95, 54, 78]\nassert solution.mostCompetitive([72, 11, 26], 2) == [11, 26]\nassert solution.mostCompetitive([83, 17, 79], 2) == [17, 79]\nassert solution.mostCompetitive([82, 16], 1) == [16]\nassert solution.mostCompetitive([61, 58, 12, 47], 2) == [12, 47]\nassert solution.mostCompetitive([89, 35, 72], 1) == [35]\nassert solution.mostCompetitive([7, 16, 3, 67], 3) == [7, 3, 67]\nassert solution.mostCompetitive([4, 68, 79, 27, 88, 36, 26, 58, 70, 13], 9) == [4, 68, 27, 88, 36, 26, 58, 70, 13]\nassert solution.mostCompetitive([68, 87, 71, 74, 29, 32], 6) == [68, 87, 71, 74, 29, 32]\nassert solution.mostCompetitive([95, 38, 92, 81, 57], 1) == [38]\nassert solution.mostCompetitive([84, 23, 54, 52, 59], 2) == [23, 52]\nassert solution.mostCompetitive([90, 91, 63, 7], 4) == [90, 91, 63, 7]\nassert solution.mostCompetitive([47, 41], 1) == [41]\nassert solution.mostCompetitive([90, 49], 2) == [90, 49]\nassert solution.mostCompetitive([70, 29], 1) == [29]\nassert solution.mostCompetitive([13, 63, 51, 2, 77], 2) == [2, 77]\nassert solution.mostCompetitive([13, 19, 33, 9, 68, 56, 67, 26, 14], 6) == [9, 68, 56, 67, 26, 14]\nassert solution.mostCompetitive([86, 94, 22], 2) == [86, 22]\nassert solution.mostCompetitive([52, 46, 64, 48, 77, 80], 5) == [46, 64, 48, 77, 80]\nassert solution.mostCompetitive([84, 91, 81, 35, 38, 50, 60, 27, 64], 3) == [35, 27, 64]\nassert solution.mostCompetitive([88, 98, 21, 12, 19, 54, 2, 29, 44], 4) == [12, 2, 29, 44]\nassert solution.mostCompetitive([94, 90, 3, 6, 17, 12, 83, 19], 6) == [3, 6, 17, 12, 83, 19]\nassert solution.mostCompetitive([78, 48, 34, 61, 55], 2) == [34, 55]\nassert solution.mostCompetitive([70, 100, 71, 18, 59, 38, 32, 69, 83], 5) == [18, 38, 32, 69, 83]\nassert solution.mostCompetitive([86, 45, 30, 68, 92, 40, 9], 2) == [30, 9]\nassert solution.mostCompetitive([11, 97, 12, 58, 46, 52, 29], 3) == [11, 12, 29]\nassert solution.mostCompetitive([42, 17, 4, 56, 86, 70, 97, 8, 53], 4) == [4, 56, 8, 53]\nassert solution.mostCompetitive([16, 93, 47, 29, 31, 49, 80], 6) == [16, 47, 29, 31, 49, 80]\nassert solution.mostCompetitive([3, 86, 61, 82, 1, 9], 5) == [3, 61, 82, 1, 9]\nassert solution.mostCompetitive([51, 71, 16, 13, 99, 61, 65], 3) == [13, 61, 65]\nassert solution.mostCompetitive([45, 81, 28, 82, 58, 34], 2) == [28, 34]\nassert solution.mostCompetitive([66, 100, 4, 32, 31, 17, 41, 24], 4) == [4, 17, 41, 24]\nassert solution.mostCompetitive([46, 2, 6, 100, 83, 10, 29, 43, 48], 7) == [2, 6, 83, 10, 29, 43, 48]\nassert solution.mostCompetitive([30, 20, 5, 54, 50], 3) == [5, 54, 50]\nassert solution.mostCompetitive([42, 89, 38, 47, 87, 61, 65, 90, 52], 2) == [38, 47]\nassert solution.mostCompetitive([3, 20, 49, 7], 4) == [3, 20, 49, 7]\nassert solution.mostCompetitive([54, 63, 73, 25, 70, 93, 45], 4) == [25, 70, 93, 45]\nassert solution.mostCompetitive([81, 46, 37], 2) == [46, 37]\nassert solution.mostCompetitive([32, 15, 4, 51, 49, 93, 53, 3, 39, 64], 2) == [3, 39]\nassert solution.mostCompetitive([53, 97, 63, 33, 9, 15], 5) == [53, 63, 33, 9, 15]\nassert solution.mostCompetitive([73, 38, 5, 89, 60], 5) == [73, 38, 5, 89, 60]\nassert solution.mostCompetitive([55, 98, 89, 6, 4, 18], 3) == [6, 4, 18]\nassert solution.mostCompetitive([52, 72, 23, 2, 65, 63, 54], 3) == [2, 63, 54]\nassert solution.mostCompetitive([9, 7, 38, 4, 17, 46, 12, 80, 67, 100], 9) == [7, 38, 4, 17, 46, 12, 80, 67, 100]\nassert solution.mostCompetitive([31, 50], 1) == [31]\nassert solution.mostCompetitive([21, 33, 69, 59, 4], 3) == [21, 33, 4]\nassert solution.mostCompetitive([36, 97, 92, 66], 3) == [36, 92, 66]\nassert solution.mostCompetitive([90, 13, 42, 50, 41, 26, 86, 35], 1) == [13]\nassert solution.mostCompetitive([41, 34, 79, 55, 17, 92, 23, 69, 19], 7) == [34, 55, 17, 92, 23, 69, 19]\nassert solution.mostCompetitive([98, 53, 43, 73, 57], 4) == [53, 43, 73, 57]\nassert solution.mostCompetitive([21, 94, 27, 65, 67, 22], 5) == [21, 27, 65, 67, 22]\nassert solution.mostCompetitive([49, 28, 13, 68, 5, 3, 100, 22, 47], 4) == [3, 100, 22, 47]\nassert solution.mostCompetitive([38, 15, 90, 78, 24, 14, 82, 98, 34], 1) == [14]\nassert solution.mostCompetitive([81, 35, 77, 16, 11, 100, 53], 6) == [35, 77, 16, 11, 100, 53]\nassert solution.mostCompetitive([31, 29], 2) == [31, 29]\nassert solution.mostCompetitive([7, 95, 40, 27, 13, 78], 5) == [7, 40, 27, 13, 78]\nassert solution.mostCompetitive([41, 11, 59, 69], 3) == [11, 59, 69]\nassert solution.mostCompetitive([15, 67], 1) == [15]\nassert solution.mostCompetitive([40, 97, 81, 44, 50], 3) == [40, 44, 50]",
  "inefficient_solution": "class Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:\n        result = []\n        for _ in range(1000000):  # allocate a huge list\n            result.append(None)\n        \n        n = len(nums)\n        for i, v in enumerate(nums):\n            for _ in range(1000):  # iterate 1000 times for each number\n                for j in range(k):\n                    if result[j] is None:\n                        result[j] = v\n                        break\n                if len(result) > k:\n                    result.pop()\n        \n        return [x for x in result if x is not None]",
  "is_python": true
}