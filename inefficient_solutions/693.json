{
  "problem_idx": 693,
  "task_name": "Binary Number with Alternating Bits",
  "markdown_description": "\nGiven a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5\n**Output:** true\n**Explanation:** The binary representation of 5 is: 101\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 7\n**Output:** false\n**Explanation:** The binary representation of 7 is: 111.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 11\n**Output:** false\n**Explanation:** The binary representation of 11 is: 1011.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        n ^= n >> 1\n        return (n & (n + 1)) == 0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        n ^= n >> 1\n        return (n & (n + 1)) == 0\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random positive integer n\n    n = random.randint(1, 2**31 - 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.hasAlternatingBits(n)\n\n    return n, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.hasAlternatingBits(n) == expected_result\n        print(f\"assert solution.hasAlternatingBits({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.hasAlternatingBits({n}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.hasAlternatingBits(983567822) == False\nassert solution.hasAlternatingBits(1918340744) == False\nassert solution.hasAlternatingBits(259732361) == False\nassert solution.hasAlternatingBits(394141268) == False\nassert solution.hasAlternatingBits(1825708488) == False\nassert solution.hasAlternatingBits(1257590451) == False\nassert solution.hasAlternatingBits(1619668836) == False\nassert solution.hasAlternatingBits(1773152828) == False\nassert solution.hasAlternatingBits(1969375903) == False\nassert solution.hasAlternatingBits(1272873824) == False\nassert solution.hasAlternatingBits(346930014) == False\nassert solution.hasAlternatingBits(720695687) == False\nassert solution.hasAlternatingBits(182998277) == False\nassert solution.hasAlternatingBits(962451259) == False\nassert solution.hasAlternatingBits(1888520571) == False\nassert solution.hasAlternatingBits(537932600) == False\nassert solution.hasAlternatingBits(331645882) == False\nassert solution.hasAlternatingBits(323932325) == False\nassert solution.hasAlternatingBits(125628881) == False\nassert solution.hasAlternatingBits(2113436164) == False\nassert solution.hasAlternatingBits(2080106446) == False\nassert solution.hasAlternatingBits(1724567895) == False\nassert solution.hasAlternatingBits(566820331) == False\nassert solution.hasAlternatingBits(835238240) == False\nassert solution.hasAlternatingBits(1327248863) == False\nassert solution.hasAlternatingBits(1256799239) == False\nassert solution.hasAlternatingBits(1980249585) == False\nassert solution.hasAlternatingBits(630270597) == False\nassert solution.hasAlternatingBits(358972974) == False\nassert solution.hasAlternatingBits(1779243451) == False\nassert solution.hasAlternatingBits(810168101) == False\nassert solution.hasAlternatingBits(567053335) == False\nassert solution.hasAlternatingBits(1131020019) == False\nassert solution.hasAlternatingBits(1231864337) == False\nassert solution.hasAlternatingBits(280368616) == False\nassert solution.hasAlternatingBits(590325747) == False\nassert solution.hasAlternatingBits(1165598819) == False\nassert solution.hasAlternatingBits(404855931) == False\nassert solution.hasAlternatingBits(1706083132) == False\nassert solution.hasAlternatingBits(771025517) == False\nassert solution.hasAlternatingBits(1130160291) == False\nassert solution.hasAlternatingBits(1441787200) == False\nassert solution.hasAlternatingBits(1365843307) == False\nassert solution.hasAlternatingBits(2047657946) == False\nassert solution.hasAlternatingBits(2038320981) == False\nassert solution.hasAlternatingBits(1092800272) == False\nassert solution.hasAlternatingBits(1877130624) == False\nassert solution.hasAlternatingBits(1474427873) == False\nassert solution.hasAlternatingBits(932594534) == False\nassert solution.hasAlternatingBits(1314793021) == False\nassert solution.hasAlternatingBits(1101462058) == False\nassert solution.hasAlternatingBits(1000557993) == False\nassert solution.hasAlternatingBits(1023621087) == False\nassert solution.hasAlternatingBits(310635402) == False\nassert solution.hasAlternatingBits(1826984953) == False\nassert solution.hasAlternatingBits(1176115200) == False\nassert solution.hasAlternatingBits(757144102) == False\nassert solution.hasAlternatingBits(1425155713) == False\nassert solution.hasAlternatingBits(557233548) == False\nassert solution.hasAlternatingBits(944293357) == False\nassert solution.hasAlternatingBits(1406185838) == False\nassert solution.hasAlternatingBits(395472358) == False\nassert solution.hasAlternatingBits(874216858) == False\nassert solution.hasAlternatingBits(1110975082) == False\nassert solution.hasAlternatingBits(2072725174) == False\nassert solution.hasAlternatingBits(834598164) == False\nassert solution.hasAlternatingBits(1883688285) == False\nassert solution.hasAlternatingBits(1725627256) == False\nassert solution.hasAlternatingBits(618048266) == False\nassert solution.hasAlternatingBits(3240786) == False\nassert solution.hasAlternatingBits(281744673) == False\nassert solution.hasAlternatingBits(2039161813) == False\nassert solution.hasAlternatingBits(1895378374) == False\nassert solution.hasAlternatingBits(1086607022) == False\nassert solution.hasAlternatingBits(1625889759) == False\nassert solution.hasAlternatingBits(1747173716) == False\nassert solution.hasAlternatingBits(1615634413) == False\nassert solution.hasAlternatingBits(1641153975) == False\nassert solution.hasAlternatingBits(2106599190) == False\nassert solution.hasAlternatingBits(1287809998) == False\nassert solution.hasAlternatingBits(107732549) == False\nassert solution.hasAlternatingBits(1837288936) == False\nassert solution.hasAlternatingBits(189304072) == False\nassert solution.hasAlternatingBits(868831701) == False\nassert solution.hasAlternatingBits(1445464069) == False\nassert solution.hasAlternatingBits(1524562210) == False\nassert solution.hasAlternatingBits(1974068445) == False\nassert solution.hasAlternatingBits(1716695436) == False\nassert solution.hasAlternatingBits(1258985332) == False\nassert solution.hasAlternatingBits(1669876398) == False\nassert solution.hasAlternatingBits(1329530014) == False\nassert solution.hasAlternatingBits(1167390443) == False\nassert solution.hasAlternatingBits(734622797) == False\nassert solution.hasAlternatingBits(1235035260) == False\nassert solution.hasAlternatingBits(285285556) == False\nassert solution.hasAlternatingBits(776936569) == False\nassert solution.hasAlternatingBits(396144154) == False\nassert solution.hasAlternatingBits(889468108) == False\nassert solution.hasAlternatingBits(813566000) == False\nassert solution.hasAlternatingBits(1112598193) == False",
  "inefficient_solution": "class Solution:\n    def hasAlternatingBits(self, n: int) -> bool:\n        binary = []\n        while n > 0:\n            binary.append(n % 2)\n            n = n // 2\n        return all(binary[i] != binary[i-1] for i in range(1, len(binary)))",
  "is_python": true
}