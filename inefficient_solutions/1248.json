{
  "problem_idx": 1248,
  "task_name": "Count Number of Nice Subarrays",
  "markdown_description": "\nGiven an array of integers `nums` and an integer `k`. A continuous subarray is called **nice** if there are `k` odd numbers on it.\n\n\nReturn *the number of **nice** sub-arrays*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,2,1,1], k = 3\n**Output:** 2\n**Explanation:** The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,6], k = 1\n**Output:** 0\n**Explanation:** There is no odd numbers in the array.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [2,2,2,1,2,2,1,2,2,2], k = 2\n**Output:** 16\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 50000`\n* `1 <= nums[i] <= 10^5`\n* `1 <= k <= nums.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n        cnt = Counter({0: 1})\n        ans = t = 0\n        for v in nums:\n            t += v & 1\n            ans += cnt[t - k]\n            cnt[t] += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfSubarrays(self, nums: List[int], k: int) -> int:\n        cnt = Counter({0: 1})\n        ans = t = 0\n        for v in nums:\n            t += v & 1\n            ans += cnt[t - k]\n            cnt[t] += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(5, 20))\n\n    # Generate a random k value\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfSubarrays(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfSubarrays(nums, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.numberOfSubarrays({nums}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfSubarrays([28, 13, 83, 72, 62, 59, 56, 53, 44, 82, 85, 90, 36, 3], 1) == 29\nassert solution.numberOfSubarrays([15, 17, 93, 37, 72, 50, 51, 35, 100, 82, 59, 48], 3) == 14\nassert solution.numberOfSubarrays([84, 44, 87, 40, 37, 89, 73, 70, 4, 62, 11, 14, 10], 8) == 0\nassert solution.numberOfSubarrays([93, 85, 4, 44, 35, 13, 75, 53, 77, 14, 69, 57], 6) == 7\nassert solution.numberOfSubarrays([27, 43, 35, 69, 29], 4) == 2\nassert solution.numberOfSubarrays([71, 84, 4, 93, 16, 76, 97, 27, 43, 67, 14, 62, 8, 53, 20], 8) == 0\nassert solution.numberOfSubarrays([34, 26, 99, 9, 63, 55, 83, 15, 46, 85, 89, 2, 94, 10, 7, 58, 98, 39], 11) == 0\nassert solution.numberOfSubarrays([3, 89, 45, 49, 16, 23, 20, 10, 7, 93, 62, 11, 15, 1, 18, 25, 100, 42, 67, 81], 7) == 16\nassert solution.numberOfSubarrays([85, 90, 67, 38, 53, 17, 63, 89, 3], 6) == 3\nassert solution.numberOfSubarrays([60, 9, 41, 88, 85, 23, 4, 78, 14, 55, 15, 97, 72, 40, 57, 58, 80, 70, 77, 5], 16) == 0\nassert solution.numberOfSubarrays([5, 18, 54, 40, 32, 39, 76, 100, 24, 20, 15, 53, 84], 5) == 0\nassert solution.numberOfSubarrays([71, 67, 44, 7, 15, 13, 11, 45, 5, 72, 16, 42, 12, 69, 14], 14) == 0\nassert solution.numberOfSubarrays([85, 71, 25, 35, 14, 13, 96, 75, 20, 17, 3, 68, 95, 62, 28], 1) == 23\nassert solution.numberOfSubarrays([100, 13, 79, 23, 21], 5) == 0\nassert solution.numberOfSubarrays([9, 6, 32, 48, 68, 21, 67, 92, 12, 75, 16, 100, 80, 38, 76, 58, 79], 14) == 0\nassert solution.numberOfSubarrays([36, 52, 76, 66, 95, 51], 5) == 0\nassert solution.numberOfSubarrays([33, 30, 55, 84, 11, 97, 8, 34, 58, 56, 62, 82, 22, 26, 35, 98, 80, 71], 7) == 0\nassert solution.numberOfSubarrays([16, 73, 31, 35, 90, 52, 26, 97, 83, 19, 2, 34, 48, 25, 8, 69, 99], 13) == 0\nassert solution.numberOfSubarrays([30, 47, 10, 98, 66, 50, 58, 96, 60, 75, 41, 22, 95, 88, 29, 37], 7) == 0\nassert solution.numberOfSubarrays([57, 92, 71, 53, 40, 75, 19, 99, 28, 29], 10) == 0\nassert solution.numberOfSubarrays([17, 42, 13, 22, 94, 25, 81, 76, 55, 69, 80], 6) == 2\nassert solution.numberOfSubarrays([66, 24, 4, 34, 9, 46, 35], 1) == 12\nassert solution.numberOfSubarrays([32, 9, 98, 88, 52, 60, 75, 16, 63, 1, 73, 74], 8) == 0\nassert solution.numberOfSubarrays([68, 22, 96, 99, 15, 26, 97, 29, 83, 88, 59, 56, 39, 92], 5) == 14\nassert solution.numberOfSubarrays([67, 26, 12, 37, 52, 96], 3) == 0\nassert solution.numberOfSubarrays([72, 45, 27, 66, 73, 48, 29, 22, 6, 33, 11, 10, 82], 1) == 20\nassert solution.numberOfSubarrays([16, 1, 5, 70, 81, 59, 37, 4, 65, 68, 63, 33, 56, 26, 52, 7, 75, 28, 12], 10) == 6\nassert solution.numberOfSubarrays([36, 66, 33, 9, 54, 56, 44, 65, 12, 2, 68, 74], 3) == 15\nassert solution.numberOfSubarrays([94, 52, 43, 8, 54, 2, 46, 26, 10, 36, 91, 38, 61, 40, 18, 85, 50, 55, 4, 49], 19) == 0\nassert solution.numberOfSubarrays([58, 54, 65, 95, 78, 38, 7, 45, 79, 3], 8) == 0\nassert solution.numberOfSubarrays([50, 38, 36, 4, 83, 78, 25, 59, 97, 17, 15, 29, 61, 93, 87, 32, 68, 90, 88], 2) == 18\nassert solution.numberOfSubarrays([50, 93, 40, 54, 58, 73, 52, 49, 60, 45, 75, 53, 94, 42, 9], 11) == 0\nassert solution.numberOfSubarrays([39, 52, 99, 55, 80, 34, 27, 11, 32], 4) == 5\nassert solution.numberOfSubarrays([9, 25, 19, 17, 31, 70, 38, 21, 81, 44, 65, 43, 67, 51, 83], 8) == 5\nassert solution.numberOfSubarrays([75, 24, 59, 65, 43], 4) == 1\nassert solution.numberOfSubarrays([5, 25, 96, 90, 63, 70, 85, 92, 65, 6, 53, 77, 57], 1) == 22\nassert solution.numberOfSubarrays([26, 50, 85, 3, 22, 99, 12, 17, 57, 18, 24, 43, 49, 94, 36, 52, 29], 9) == 0\nassert solution.numberOfSubarrays([75, 7, 21, 95, 97, 19, 53, 81, 30, 88], 4) == 7\nassert solution.numberOfSubarrays([56, 96, 36, 80, 58], 5) == 0\nassert solution.numberOfSubarrays([67, 56, 48, 12, 39, 78, 98, 80, 93, 85], 9) == 0\nassert solution.numberOfSubarrays([56, 60, 55, 78, 92, 38, 32, 6, 58, 84, 74, 12, 21], 6) == 0\nassert solution.numberOfSubarrays([61, 43, 82, 60, 69, 25, 10, 27, 37, 7, 58, 100, 44, 6, 28, 4, 75], 7) == 8\nassert solution.numberOfSubarrays([1, 58, 38, 89, 70, 83, 54, 69, 67, 57], 8) == 0\nassert solution.numberOfSubarrays([18, 23, 52, 89, 91, 87, 20, 8, 10, 5, 70], 5) == 4\nassert solution.numberOfSubarrays([24, 17, 3, 48, 31, 18, 75, 88, 53, 57, 72, 26, 4, 7, 2, 96, 65, 16], 10) == 0\nassert solution.numberOfSubarrays([22, 11, 38, 85, 56, 31, 4, 19, 60, 34, 13, 75], 3) == 14\nassert solution.numberOfSubarrays([78, 32, 18, 97, 34], 4) == 0\nassert solution.numberOfSubarrays([66, 4, 33, 94, 89, 74, 8, 56, 41, 20], 2) == 16\nassert solution.numberOfSubarrays([57, 42, 98, 6, 100, 70, 62, 55, 52, 85, 89], 10) == 0\nassert solution.numberOfSubarrays([17, 56, 65, 53, 38, 42, 76, 50, 55, 11, 61, 37, 8, 93, 35, 62, 78], 7) == 7\nassert solution.numberOfSubarrays([98, 30, 80, 25, 100, 49, 90, 1, 42, 24, 3, 76], 12) == 0\nassert solution.numberOfSubarrays([93, 60, 25, 36, 9, 95, 98, 13, 88, 83, 8, 7, 41, 44, 37, 62], 3) == 21\nassert solution.numberOfSubarrays([100, 36, 83, 12, 41, 58, 97], 3) == 3\nassert solution.numberOfSubarrays([95, 65, 37, 61, 79, 90, 38, 28, 12, 8, 16, 83, 67, 32], 4) == 11\nassert solution.numberOfSubarrays([92, 90, 47, 24, 16, 59, 23, 13, 83], 4) == 6\nassert solution.numberOfSubarrays([75, 78, 83, 45, 70, 11, 29, 27, 14, 87, 59, 58, 36, 20], 7) == 9\nassert solution.numberOfSubarrays([66, 75, 95, 34, 56, 15, 78, 6, 8, 49, 9, 89], 1) == 23\nassert solution.numberOfSubarrays([39, 29, 61, 55, 63, 18, 69], 6) == 1\nassert solution.numberOfSubarrays([72, 46, 93, 37, 92, 42, 85, 56, 36, 16, 5, 30, 81, 10], 3) == 20\nassert solution.numberOfSubarrays([76, 93, 71, 75, 27, 59], 4) == 3\nassert solution.numberOfSubarrays([91, 43, 83, 66, 27, 85, 10, 69, 63, 62, 57, 2, 51, 12, 87, 29], 11) == 1\nassert solution.numberOfSubarrays([89, 95, 73, 15, 64, 83, 47, 51, 63, 87, 26, 71, 68, 7, 32, 49], 4) == 14\nassert solution.numberOfSubarrays([57, 11, 87, 76, 62, 15, 50], 3) == 5\nassert solution.numberOfSubarrays([63, 83, 10, 79, 42, 14, 75, 40, 15], 6) == 0\nassert solution.numberOfSubarrays([11, 65, 66, 4, 48, 41, 2, 23, 19, 57, 8, 38, 29, 72], 13) == 0\nassert solution.numberOfSubarrays([89, 45, 13, 76, 52, 92, 79, 38, 64, 84, 46, 9, 49, 17, 83, 1, 87, 35, 36], 11) == 2\nassert solution.numberOfSubarrays([94, 96, 3, 25, 89, 32, 42, 43, 72, 24, 12, 22, 45, 90, 15, 85, 14], 17) == 0\nassert solution.numberOfSubarrays([87, 75, 33, 40, 13, 25, 24], 1) == 8\nassert solution.numberOfSubarrays([13, 1, 47, 24, 81, 100, 75, 83, 25, 59, 53, 41, 61, 73, 64, 97, 85, 62, 11, 31], 16) == 1\nassert solution.numberOfSubarrays([95, 44, 49, 96, 81, 23, 75], 2) == 7\nassert solution.numberOfSubarrays([74, 28, 98, 97, 57], 3) == 0\nassert solution.numberOfSubarrays([94, 28, 66, 35, 25, 5], 2) == 5\nassert solution.numberOfSubarrays([98, 7, 37, 65, 78, 58, 84, 76, 39, 69, 95, 2, 74], 11) == 0\nassert solution.numberOfSubarrays([51, 43, 73, 23, 36, 24, 78, 100, 57, 85, 83], 2) == 14\nassert solution.numberOfSubarrays([88, 92, 49, 68, 36, 86, 70, 45, 23, 80, 21, 64, 33], 13) == 0\nassert solution.numberOfSubarrays([88, 45, 35, 53, 86, 15, 60, 79], 4) == 5\nassert solution.numberOfSubarrays([32, 69, 93, 64, 56, 54, 27, 19, 74], 8) == 0\nassert solution.numberOfSubarrays([83, 94, 39, 41, 95, 23, 65, 89, 35, 97, 96, 28, 11, 61, 69], 6) == 10\nassert solution.numberOfSubarrays([43, 2, 29, 27, 40, 83, 69, 99, 96, 37], 1) == 13\nassert solution.numberOfSubarrays([93, 90, 53, 91, 62, 76, 94, 85, 18, 38, 41], 8) == 0\nassert solution.numberOfSubarrays([80, 87, 27, 59, 7, 15, 25, 65, 36, 21, 32, 78, 46, 48, 18, 5], 12) == 0\nassert solution.numberOfSubarrays([90, 45, 12, 59, 75, 70, 8, 39, 7, 15, 5, 89, 71], 1) == 17\nassert solution.numberOfSubarrays([23, 58, 59, 62, 16, 14, 66, 3, 60, 30, 15, 26, 92], 11) == 0\nassert solution.numberOfSubarrays([14, 56, 72, 53, 76, 58, 61, 9, 74, 41], 3) == 11\nassert solution.numberOfSubarrays([87, 33, 60, 91, 28, 6, 53, 82, 78, 51, 25, 27, 68, 5, 23, 42, 99, 98, 20, 24], 14) == 0\nassert solution.numberOfSubarrays([75, 33, 99, 97, 79, 38, 24, 82, 40], 2) == 8\nassert solution.numberOfSubarrays([21, 67, 19, 65, 37, 9, 71, 90, 98, 74], 8) == 0\nassert solution.numberOfSubarrays([77, 72, 13, 21, 14, 22, 61, 54, 36, 6, 32, 52, 58, 8, 82, 94], 3) == 23\nassert solution.numberOfSubarrays([74, 36, 46, 87, 8, 71, 83, 32, 16, 73, 56, 28, 82, 79, 64, 58], 12) == 0\nassert solution.numberOfSubarrays([84, 22, 73, 23, 92, 41, 90, 89, 37, 66, 55, 58, 14], 1) == 19\nassert solution.numberOfSubarrays([4, 53, 69, 22, 15, 64, 45, 10, 82, 7, 89, 65, 39, 35, 31, 99, 26, 24, 29, 57], 1) == 29\nassert solution.numberOfSubarrays([36, 43, 40, 8, 32, 86, 88, 76, 34, 92, 9, 53], 8) == 0\nassert solution.numberOfSubarrays([50, 61, 18, 46, 56, 94, 27], 1) == 15\nassert solution.numberOfSubarrays([12, 18, 38, 13, 40, 78, 88, 52, 54, 19, 86], 10) == 0\nassert solution.numberOfSubarrays([72, 54, 37, 95, 27, 73, 94, 63, 5, 44, 6, 12, 39, 98, 11, 30, 50, 17, 45, 75], 13) == 0\nassert solution.numberOfSubarrays([80, 36, 59, 41, 66, 52, 23, 46, 86, 47, 93, 83, 5, 65, 2], 11) == 0\nassert solution.numberOfSubarrays([92, 77, 81, 6, 74, 8, 44, 68, 96, 67, 90, 56], 10) == 0\nassert solution.numberOfSubarrays([40, 69, 79, 89, 75, 93, 82, 6, 32, 58, 25, 22, 39, 85, 37, 18, 56, 68], 11) == 0\nassert solution.numberOfSubarrays([12, 53, 31, 43, 45, 37, 54, 28], 8) == 0\nassert solution.numberOfSubarrays([32, 96, 52, 39, 62, 30, 14, 77, 4, 37, 76, 80, 36, 99, 94, 69, 6, 59, 57], 11) == 0",
  "inefficient_solution": "class Solution:\n    def numberOfSubarrays(self, nums, k):\n        if k == 0:\n            return 0\n\n        max_num = 10**5\n        nums_double = [num * 2 for num in nums]\n        nums_double_with_indices = [(num, i) for i, num in enumerate(nums_double)]\n        nums_double_with_indices.sort(key=lambda x: x[0])\n\n        count_odd = [0] * (max_num * 2 + 1)\n        for num in nums:\n            count_odd[num] += 1\n\n        ans = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                subarray_sum = sum(nums[i:j+1])\n                if (subarray_sum * 2) % 2 == k:\n                    ans += 1\n\n        return ans",
  "is_python": true
}