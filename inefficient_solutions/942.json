{
  "problem_idx": 942,
  "task_name": "DI String Match",
  "markdown_description": "\nA permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where:\n\n\n* `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n* `s[i] == 'D'` if `perm[i] > perm[i + 1]`.\n\n\nGiven a string `s`, reconstruct the permutation `perm` and return it. If there are multiple valid permutations perm, return **any of them**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"IDID\"\n**Output:** [0,4,1,3,2]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"III\"\n**Output:** [0,1,2,3]\n\n```\n**Example 3:**\n\n\n\n```\n**Input:** s = \"DDI\"\n**Output:** [3,2,0,1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s[i]` is either `'I'` or `'D'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        n = len(s)\n        low, high = 0, n\n        ans = []\n        for i in range(n):\n            if s[i] == 'I':\n                ans.append(low)\n                low += 1\n            else:\n                ans.append(high)\n                high -= 1\n        ans.append(low)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        n = len(s)\n        low, high = 0, n\n        ans = []\n        for i in range(n):\n            if s[i] == 'I':\n                ans.append(low)\n                low += 1\n            else:\n                ans.append(high)\n                high -= 1\n        ans.append(low)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string with characters 'I' and 'D'\n    s = ''.join(random.choices(['I', 'D'], k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.diStringMatch(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.diStringMatch(s) == expected_result\n        print(f'assert solution.diStringMatch(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.diStringMatch(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.diStringMatch(\"IDI\") == [0, 3, 1, 2]\nassert solution.diStringMatch(\"DIDDIIII\") == [8, 0, 7, 6, 1, 2, 3, 4, 5]\nassert solution.diStringMatch(\"IIII\") == [0, 1, 2, 3, 4]\nassert solution.diStringMatch(\"IIIDI\") == [0, 1, 2, 5, 3, 4]\nassert solution.diStringMatch(\"DII\") == [3, 0, 1, 2]\nassert solution.diStringMatch(\"I\") == [0, 1]\nassert solution.diStringMatch(\"DIIIDIDD\") == [8, 0, 1, 2, 7, 3, 6, 5, 4]\nassert solution.diStringMatch(\"IIDII\") == [0, 1, 5, 2, 3, 4]\nassert solution.diStringMatch(\"IIIDDID\") == [0, 1, 2, 7, 6, 3, 5, 4]\nassert solution.diStringMatch(\"IDIDID\") == [0, 6, 1, 5, 2, 4, 3]\nassert solution.diStringMatch(\"DDDIDDDI\") == [8, 7, 6, 0, 5, 4, 3, 1, 2]\nassert solution.diStringMatch(\"IDIIIID\") == [0, 7, 1, 2, 3, 4, 6, 5]\nassert solution.diStringMatch(\"IDDDD\") == [0, 5, 4, 3, 2, 1]\nassert solution.diStringMatch(\"DIDDD\") == [5, 0, 4, 3, 2, 1]\nassert solution.diStringMatch(\"DDIDIIID\") == [8, 7, 0, 6, 1, 2, 3, 5, 4]\nassert solution.diStringMatch(\"DDDD\") == [4, 3, 2, 1, 0]\nassert solution.diStringMatch(\"IDIDDDDIDD\") == [0, 10, 1, 9, 8, 7, 6, 2, 5, 4, 3]\nassert solution.diStringMatch(\"DIDIDDDIID\") == [10, 0, 9, 1, 8, 7, 6, 2, 3, 5, 4]\nassert solution.diStringMatch(\"IIDIDIDD\") == [0, 1, 8, 2, 7, 3, 6, 5, 4]\nassert solution.diStringMatch(\"DID\") == [3, 0, 2, 1]\nassert solution.diStringMatch(\"IDIDID\") == [0, 6, 1, 5, 2, 4, 3]\nassert solution.diStringMatch(\"DIIIDIDD\") == [8, 0, 1, 2, 7, 3, 6, 5, 4]\nassert solution.diStringMatch(\"DDDDDDIDD\") == [9, 8, 7, 6, 5, 4, 0, 3, 2, 1]\nassert solution.diStringMatch(\"DDDDI\") == [5, 4, 3, 2, 0, 1]\nassert solution.diStringMatch(\"DDIIID\") == [6, 5, 0, 1, 2, 4, 3]\nassert solution.diStringMatch(\"IID\") == [0, 1, 3, 2]\nassert solution.diStringMatch(\"IDDDIDI\") == [0, 7, 6, 5, 1, 4, 2, 3]\nassert solution.diStringMatch(\"DIIDIDII\") == [8, 0, 1, 7, 2, 6, 3, 4, 5]\nassert solution.diStringMatch(\"IIIDDDIID\") == [0, 1, 2, 9, 8, 7, 3, 4, 6, 5]\nassert solution.diStringMatch(\"IIDII\") == [0, 1, 5, 2, 3, 4]\nassert solution.diStringMatch(\"DDIIDD\") == [6, 5, 0, 1, 4, 3, 2]\nassert solution.diStringMatch(\"DII\") == [3, 0, 1, 2]\nassert solution.diStringMatch(\"IDIDIDIID\") == [0, 9, 1, 8, 2, 7, 3, 4, 6, 5]\nassert solution.diStringMatch(\"IIIDIDID\") == [0, 1, 2, 8, 3, 7, 4, 6, 5]\nassert solution.diStringMatch(\"DIDDIIDDI\") == [9, 0, 8, 7, 1, 2, 6, 5, 3, 4]\nassert solution.diStringMatch(\"IDDDIID\") == [0, 7, 6, 5, 1, 2, 4, 3]\nassert solution.diStringMatch(\"IIDDDID\") == [0, 1, 7, 6, 5, 2, 4, 3]\nassert solution.diStringMatch(\"D\") == [1, 0]\nassert solution.diStringMatch(\"DII\") == [3, 0, 1, 2]\nassert solution.diStringMatch(\"D\") == [1, 0]\nassert solution.diStringMatch(\"D\") == [1, 0]\nassert solution.diStringMatch(\"DD\") == [2, 1, 0]\nassert solution.diStringMatch(\"IIIIIID\") == [0, 1, 2, 3, 4, 5, 7, 6]\nassert solution.diStringMatch(\"DIIID\") == [5, 0, 1, 2, 4, 3]\nassert solution.diStringMatch(\"DIIIID\") == [6, 0, 1, 2, 3, 5, 4]\nassert solution.diStringMatch(\"DIDIIIID\") == [8, 0, 7, 1, 2, 3, 4, 6, 5]\nassert solution.diStringMatch(\"DD\") == [2, 1, 0]\nassert solution.diStringMatch(\"IDIID\") == [0, 5, 1, 2, 4, 3]\nassert solution.diStringMatch(\"IIDI\") == [0, 1, 4, 2, 3]\nassert solution.diStringMatch(\"IIDIDI\") == [0, 1, 6, 2, 5, 3, 4]\nassert solution.diStringMatch(\"IIIIDIIIDD\") == [0, 1, 2, 3, 10, 4, 5, 6, 9, 8, 7]\nassert solution.diStringMatch(\"DIDDI\") == [5, 0, 4, 3, 1, 2]\nassert solution.diStringMatch(\"IDIDID\") == [0, 6, 1, 5, 2, 4, 3]\nassert solution.diStringMatch(\"DIIDDIDD\") == [8, 0, 1, 7, 6, 2, 5, 4, 3]\nassert solution.diStringMatch(\"DDIIIIDID\") == [9, 8, 0, 1, 2, 3, 7, 4, 6, 5]\nassert solution.diStringMatch(\"DDD\") == [3, 2, 1, 0]\nassert solution.diStringMatch(\"DIIIIIDII\") == [9, 0, 1, 2, 3, 4, 8, 5, 6, 7]\nassert solution.diStringMatch(\"IIDDI\") == [0, 1, 5, 4, 2, 3]\nassert solution.diStringMatch(\"IIDDIIIII\") == [0, 1, 9, 8, 2, 3, 4, 5, 6, 7]\nassert solution.diStringMatch(\"II\") == [0, 1, 2]\nassert solution.diStringMatch(\"D\") == [1, 0]\nassert solution.diStringMatch(\"DDIDIIDIID\") == [10, 9, 0, 8, 1, 2, 7, 3, 4, 6, 5]\nassert solution.diStringMatch(\"IIIIIIDID\") == [0, 1, 2, 3, 4, 5, 9, 6, 8, 7]\nassert solution.diStringMatch(\"IDDIDDIIII\") == [0, 10, 9, 1, 8, 7, 2, 3, 4, 5, 6]\nassert solution.diStringMatch(\"DDDDDDID\") == [8, 7, 6, 5, 4, 3, 0, 2, 1]\nassert solution.diStringMatch(\"IDIIDIDDII\") == [0, 10, 1, 2, 9, 3, 8, 7, 4, 5, 6]\nassert solution.diStringMatch(\"DDIIDDDDI\") == [9, 8, 0, 1, 7, 6, 5, 4, 2, 3]\nassert solution.diStringMatch(\"IIIDDDID\") == [0, 1, 2, 8, 7, 6, 3, 5, 4]\nassert solution.diStringMatch(\"IIIDI\") == [0, 1, 2, 5, 3, 4]\nassert solution.diStringMatch(\"IDII\") == [0, 4, 1, 2, 3]\nassert solution.diStringMatch(\"IIIID\") == [0, 1, 2, 3, 5, 4]\nassert solution.diStringMatch(\"IIDIDIDDID\") == [0, 1, 10, 2, 9, 3, 8, 7, 4, 6, 5]\nassert solution.diStringMatch(\"D\") == [1, 0]\nassert solution.diStringMatch(\"DDIDDIDI\") == [8, 7, 0, 6, 5, 1, 4, 2, 3]\nassert solution.diStringMatch(\"DDDIIDI\") == [7, 6, 5, 0, 1, 4, 2, 3]\nassert solution.diStringMatch(\"DDDIDI\") == [6, 5, 4, 0, 3, 1, 2]\nassert solution.diStringMatch(\"I\") == [0, 1]\nassert solution.diStringMatch(\"DDDIDII\") == [7, 6, 5, 0, 4, 1, 2, 3]\nassert solution.diStringMatch(\"IDIIDD\") == [0, 6, 1, 2, 5, 4, 3]\nassert solution.diStringMatch(\"DIID\") == [4, 0, 1, 3, 2]\nassert solution.diStringMatch(\"IID\") == [0, 1, 3, 2]\nassert solution.diStringMatch(\"IIIIIII\") == [0, 1, 2, 3, 4, 5, 6, 7]\nassert solution.diStringMatch(\"III\") == [0, 1, 2, 3]\nassert solution.diStringMatch(\"IDIDDIDI\") == [0, 8, 1, 7, 6, 2, 5, 3, 4]\nassert solution.diStringMatch(\"IDII\") == [0, 4, 1, 2, 3]\nassert solution.diStringMatch(\"DDIII\") == [5, 4, 0, 1, 2, 3]\nassert solution.diStringMatch(\"DI\") == [2, 0, 1]\nassert solution.diStringMatch(\"IDIDDDII\") == [0, 8, 1, 7, 6, 5, 2, 3, 4]\nassert solution.diStringMatch(\"DDDID\") == [5, 4, 3, 0, 2, 1]\nassert solution.diStringMatch(\"D\") == [1, 0]\nassert solution.diStringMatch(\"II\") == [0, 1, 2]\nassert solution.diStringMatch(\"ID\") == [0, 2, 1]\nassert solution.diStringMatch(\"IDIIDDDIID\") == [0, 10, 1, 2, 9, 8, 7, 3, 4, 6, 5]\nassert solution.diStringMatch(\"IDIDI\") == [0, 5, 1, 4, 2, 3]\nassert solution.diStringMatch(\"DD\") == [2, 1, 0]\nassert solution.diStringMatch(\"IIDDI\") == [0, 1, 5, 4, 2, 3]\nassert solution.diStringMatch(\"IDDIDDDII\") == [0, 9, 8, 1, 7, 6, 5, 2, 3, 4]\nassert solution.diStringMatch(\"D\") == [1, 0]\nassert solution.diStringMatch(\"III\") == [0, 1, 2, 3]\nassert solution.diStringMatch(\"DIDIDI\") == [6, 0, 5, 1, 4, 2, 3]",
  "inefficient_solution": "class Solution:\n    def diStringMatch(self, s: str) -> List[int]:\n        n = len(s)\n        low = [0] * (n + 1)\n        high = [n] * (n + 1)\n        ans = [0] * (n + 1)\n        for i in range(n):\n            if s[i] == 'I':\n                low[i + 1] = low[i] + 1\n                for j in range(i):\n                    ans[j] = low[j]\n                for j in range(i + 1, n + 1):\n                    ans[j] = low[i]\n            else:\n                high[i + 1] = high[i] - 1\n                for j in range(i):\n                    ans[j] = high[i]\n                for j in range(i + 1, n + 1):\n                    ans[j] = high[i + 1]\n        ans[n] = low[-1]\n        return ans",
  "is_python": true
}