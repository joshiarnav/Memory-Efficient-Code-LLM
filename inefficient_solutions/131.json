{
  "problem_idx": 131,
  "task_name": "Palindrome Partitioning",
  "markdown_description": "\nGiven a string `s`, partition `s` such that every substring of the partition is a **palindrome**. Return *all possible palindrome partitioning of* `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"aab\"\n**Output:** [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"a\"\n**Output:** [[\"a\"]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 16`\n* `s` contains only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        def dfs(i: int):\n            if i == n:\n                ans.append(t[:])\n                return\n            for j in range(i, n):\n                if f[i][j]:\n                    t.append(s[i : j + 1])\n                    dfs(j + 1)\n                    t.pop()\n\n        n = len(s)\n        f = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                f[i][j] = s[i] == s[j] and f[i + 1][j - 1]\n        ans = []\n        t = []\n        dfs(0)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def partition(self, s):\n        def dfs(i):\n            if i == n:\n                ans.append(t[:])\n                return\n            for j in range(i, n):\n                if f[i][j]:\n                    t.append(s[i : j + 1])\n                    dfs(j + 1)\n                    t.pop()\n\n        n = len(s)\n        f = [[True] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                f[i][j] = s[i] == s[j] and f[i + 1][j - 1]\n        ans = []\n        t = []\n        dfs(0)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string of lowercase English letters\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 16)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.partition(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.partition(s) == expected_result\n        print(f\"assert solution.partition('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.partition('{s}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.partition('lonxosggghxs') == [['l', 'o', 'n', 'x', 'o', 's', 'g', 'g', 'g', 'h', 'x', 's'], ['l', 'o', 'n', 'x', 'o', 's', 'g', 'gg', 'h', 'x', 's'], ['l', 'o', 'n', 'x', 'o', 's', 'gg', 'g', 'h', 'x', 's'], ['l', 'o', 'n', 'x', 'o', 's', 'ggg', 'h', 'x', 's']]\nassert solution.partition('kkahkpjeohodq') == [['k', 'k', 'a', 'h', 'k', 'p', 'j', 'e', 'o', 'h', 'o', 'd', 'q'], ['k', 'k', 'a', 'h', 'k', 'p', 'j', 'e', 'oho', 'd', 'q'], ['kk', 'a', 'h', 'k', 'p', 'j', 'e', 'o', 'h', 'o', 'd', 'q'], ['kk', 'a', 'h', 'k', 'p', 'j', 'e', 'oho', 'd', 'q']]\nassert solution.partition('gnfisblmtabcxvt') == [['g', 'n', 'f', 'i', 's', 'b', 'l', 'm', 't', 'a', 'b', 'c', 'x', 'v', 't']]\nassert solution.partition('kesenwmkiedima') == [['k', 'e', 's', 'e', 'n', 'w', 'm', 'k', 'i', 'e', 'd', 'i', 'm', 'a'], ['k', 'ese', 'n', 'w', 'm', 'k', 'i', 'e', 'd', 'i', 'm', 'a']]\nassert solution.partition('xpdzofnwqywmqn') == [['x', 'p', 'd', 'z', 'o', 'f', 'n', 'w', 'q', 'y', 'w', 'm', 'q', 'n']]\nassert solution.partition('ixusdt') == [['i', 'x', 'u', 's', 'd', 't']]\nassert solution.partition('ilozbl') == [['i', 'l', 'o', 'z', 'b', 'l']]\nassert solution.partition('hydifvhb') == [['h', 'y', 'd', 'i', 'f', 'v', 'h', 'b']]\nassert solution.partition('esqsvta') == [['e', 's', 'q', 's', 'v', 't', 'a'], ['e', 'sqs', 'v', 't', 'a']]\nassert solution.partition('nmn') == [['n', 'm', 'n'], ['nmn']]\nassert solution.partition('ghjzi') == [['g', 'h', 'j', 'z', 'i']]\nassert solution.partition('dhdrt') == [['d', 'h', 'd', 'r', 't'], ['dhd', 'r', 't']]\nassert solution.partition('h') == [['h']]\nassert solution.partition('ncszbij') == [['n', 'c', 's', 'z', 'b', 'i', 'j']]\nassert solution.partition('sfpizamjxnelbyn') == [['s', 'f', 'p', 'i', 'z', 'a', 'm', 'j', 'x', 'n', 'e', 'l', 'b', 'y', 'n']]\nassert solution.partition('g') == [['g']]\nassert solution.partition('xkjvjfk') == [['x', 'k', 'j', 'v', 'j', 'f', 'k'], ['x', 'k', 'jvj', 'f', 'k']]\nassert solution.partition('fnvyrpitwo') == [['f', 'n', 'v', 'y', 'r', 'p', 'i', 't', 'w', 'o']]\nassert solution.partition('scsyrtfhgsut') == [['s', 'c', 's', 'y', 'r', 't', 'f', 'h', 'g', 's', 'u', 't'], ['scs', 'y', 'r', 't', 'f', 'h', 'g', 's', 'u', 't']]\nassert solution.partition('t') == [['t']]\nassert solution.partition('qevaarz') == [['q', 'e', 'v', 'a', 'a', 'r', 'z'], ['q', 'e', 'v', 'aa', 'r', 'z']]\nassert solution.partition('nhhyssxggfiibb') == [['n', 'h', 'h', 'y', 's', 's', 'x', 'g', 'g', 'f', 'i', 'i', 'b', 'b'], ['n', 'h', 'h', 'y', 's', 's', 'x', 'g', 'g', 'f', 'i', 'i', 'bb'], ['n', 'h', 'h', 'y', 's', 's', 'x', 'g', 'g', 'f', 'ii', 'b', 'b'], ['n', 'h', 'h', 'y', 's', 's', 'x', 'g', 'g', 'f', 'ii', 'bb'], ['n', 'h', 'h', 'y', 's', 's', 'x', 'gg', 'f', 'i', 'i', 'b', 'b'], ['n', 'h', 'h', 'y', 's', 's', 'x', 'gg', 'f', 'i', 'i', 'bb'], ['n', 'h', 'h', 'y', 's', 's', 'x', 'gg', 'f', 'ii', 'b', 'b'], ['n', 'h', 'h', 'y', 's', 's', 'x', 'gg', 'f', 'ii', 'bb'], ['n', 'h', 'h', 'y', 'ss', 'x', 'g', 'g', 'f', 'i', 'i', 'b', 'b'], ['n', 'h', 'h', 'y', 'ss', 'x', 'g', 'g', 'f', 'i', 'i', 'bb'], ['n', 'h', 'h', 'y', 'ss', 'x', 'g', 'g', 'f', 'ii', 'b', 'b'], ['n', 'h', 'h', 'y', 'ss', 'x', 'g', 'g', 'f', 'ii', 'bb'], ['n', 'h', 'h', 'y', 'ss', 'x', 'gg', 'f', 'i', 'i', 'b', 'b'], ['n', 'h', 'h', 'y', 'ss', 'x', 'gg', 'f', 'i', 'i', 'bb'], ['n', 'h', 'h', 'y', 'ss', 'x', 'gg', 'f', 'ii', 'b', 'b'], ['n', 'h', 'h', 'y', 'ss', 'x', 'gg', 'f', 'ii', 'bb'], ['n', 'hh', 'y', 's', 's', 'x', 'g', 'g', 'f', 'i', 'i', 'b', 'b'], ['n', 'hh', 'y', 's', 's', 'x', 'g', 'g', 'f', 'i', 'i', 'bb'], ['n', 'hh', 'y', 's', 's', 'x', 'g', 'g', 'f', 'ii', 'b', 'b'], ['n', 'hh', 'y', 's', 's', 'x', 'g', 'g', 'f', 'ii', 'bb'], ['n', 'hh', 'y', 's', 's', 'x', 'gg', 'f', 'i', 'i', 'b', 'b'], ['n', 'hh', 'y', 's', 's', 'x', 'gg', 'f', 'i', 'i', 'bb'], ['n', 'hh', 'y', 's', 's', 'x', 'gg', 'f', 'ii', 'b', 'b'], ['n', 'hh', 'y', 's', 's', 'x', 'gg', 'f', 'ii', 'bb'], ['n', 'hh', 'y', 'ss', 'x', 'g', 'g', 'f', 'i', 'i', 'b', 'b'], ['n', 'hh', 'y', 'ss', 'x', 'g', 'g', 'f', 'i', 'i', 'bb'], ['n', 'hh', 'y', 'ss', 'x', 'g', 'g', 'f', 'ii', 'b', 'b'], ['n', 'hh', 'y', 'ss', 'x', 'g', 'g', 'f', 'ii', 'bb'], ['n', 'hh', 'y', 'ss', 'x', 'gg', 'f', 'i', 'i', 'b', 'b'], ['n', 'hh', 'y', 'ss', 'x', 'gg', 'f', 'i', 'i', 'bb'], ['n', 'hh', 'y', 'ss', 'x', 'gg', 'f', 'ii', 'b', 'b'], ['n', 'hh', 'y', 'ss', 'x', 'gg', 'f', 'ii', 'bb']]\nassert solution.partition('osluxjnxqkurfspn') == [['o', 's', 'l', 'u', 'x', 'j', 'n', 'x', 'q', 'k', 'u', 'r', 'f', 's', 'p', 'n']]\nassert solution.partition('ojd') == [['o', 'j', 'd']]\nassert solution.partition('gfrh') == [['g', 'f', 'r', 'h']]\nassert solution.partition('dwb') == [['d', 'w', 'b']]\nassert solution.partition('hskjp') == [['h', 's', 'k', 'j', 'p']]\nassert solution.partition('powouqovfptyv') == [['p', 'o', 'w', 'o', 'u', 'q', 'o', 'v', 'f', 'p', 't', 'y', 'v'], ['p', 'owo', 'u', 'q', 'o', 'v', 'f', 'p', 't', 'y', 'v']]\nassert solution.partition('rrhbolkdrvwkwsxm') == [['r', 'r', 'h', 'b', 'o', 'l', 'k', 'd', 'r', 'v', 'w', 'k', 'w', 's', 'x', 'm'], ['r', 'r', 'h', 'b', 'o', 'l', 'k', 'd', 'r', 'v', 'wkw', 's', 'x', 'm'], ['rr', 'h', 'b', 'o', 'l', 'k', 'd', 'r', 'v', 'w', 'k', 'w', 's', 'x', 'm'], ['rr', 'h', 'b', 'o', 'l', 'k', 'd', 'r', 'v', 'wkw', 's', 'x', 'm']]\nassert solution.partition('ktlkpdklvfcwbzml') == [['k', 't', 'l', 'k', 'p', 'd', 'k', 'l', 'v', 'f', 'c', 'w', 'b', 'z', 'm', 'l']]\nassert solution.partition('ycgowdctxggupaht') == [['y', 'c', 'g', 'o', 'w', 'd', 'c', 't', 'x', 'g', 'g', 'u', 'p', 'a', 'h', 't'], ['y', 'c', 'g', 'o', 'w', 'd', 'c', 't', 'x', 'gg', 'u', 'p', 'a', 'h', 't']]\nassert solution.partition('eudqxnciicj') == [['e', 'u', 'd', 'q', 'x', 'n', 'c', 'i', 'i', 'c', 'j'], ['e', 'u', 'd', 'q', 'x', 'n', 'c', 'ii', 'c', 'j'], ['e', 'u', 'd', 'q', 'x', 'n', 'ciic', 'j']]\nassert solution.partition('axemvlpm') == [['a', 'x', 'e', 'm', 'v', 'l', 'p', 'm']]\nassert solution.partition('diij') == [['d', 'i', 'i', 'j'], ['d', 'ii', 'j']]\nassert solution.partition('ybmxrb') == [['y', 'b', 'm', 'x', 'r', 'b']]\nassert solution.partition('nhnaeebpl') == [['n', 'h', 'n', 'a', 'e', 'e', 'b', 'p', 'l'], ['n', 'h', 'n', 'a', 'ee', 'b', 'p', 'l'], ['nhn', 'a', 'e', 'e', 'b', 'p', 'l'], ['nhn', 'a', 'ee', 'b', 'p', 'l']]\nassert solution.partition('akpmz') == [['a', 'k', 'p', 'm', 'z']]\nassert solution.partition('g') == [['g']]\nassert solution.partition('lkcayiasrn') == [['l', 'k', 'c', 'a', 'y', 'i', 'a', 's', 'r', 'n']]\nassert solution.partition('evtxyowk') == [['e', 'v', 't', 'x', 'y', 'o', 'w', 'k']]\nassert solution.partition('r') == [['r']]\nassert solution.partition('vn') == [['v', 'n']]\nassert solution.partition('yvfxppmmcala') == [['y', 'v', 'f', 'x', 'p', 'p', 'm', 'm', 'c', 'a', 'l', 'a'], ['y', 'v', 'f', 'x', 'p', 'p', 'm', 'm', 'c', 'ala'], ['y', 'v', 'f', 'x', 'p', 'p', 'mm', 'c', 'a', 'l', 'a'], ['y', 'v', 'f', 'x', 'p', 'p', 'mm', 'c', 'ala'], ['y', 'v', 'f', 'x', 'pp', 'm', 'm', 'c', 'a', 'l', 'a'], ['y', 'v', 'f', 'x', 'pp', 'm', 'm', 'c', 'ala'], ['y', 'v', 'f', 'x', 'pp', 'mm', 'c', 'a', 'l', 'a'], ['y', 'v', 'f', 'x', 'pp', 'mm', 'c', 'ala']]\nassert solution.partition('rtkibsav') == [['r', 't', 'k', 'i', 'b', 's', 'a', 'v']]\nassert solution.partition('wievjulewyuqqm') == [['w', 'i', 'e', 'v', 'j', 'u', 'l', 'e', 'w', 'y', 'u', 'q', 'q', 'm'], ['w', 'i', 'e', 'v', 'j', 'u', 'l', 'e', 'w', 'y', 'u', 'qq', 'm']]\nassert solution.partition('sznb') == [['s', 'z', 'n', 'b']]\nassert solution.partition('fxrbhswo') == [['f', 'x', 'r', 'b', 'h', 's', 'w', 'o']]\nassert solution.partition('llp') == [['l', 'l', 'p'], ['ll', 'p']]\nassert solution.partition('jnaceujvanfjgaug') == [['j', 'n', 'a', 'c', 'e', 'u', 'j', 'v', 'a', 'n', 'f', 'j', 'g', 'a', 'u', 'g']]\nassert solution.partition('vfkvd') == [['v', 'f', 'k', 'v', 'd']]\nassert solution.partition('qcvupsxncgvsi') == [['q', 'c', 'v', 'u', 'p', 's', 'x', 'n', 'c', 'g', 'v', 's', 'i']]\nassert solution.partition('xyduqwgkqlr') == [['x', 'y', 'd', 'u', 'q', 'w', 'g', 'k', 'q', 'l', 'r']]\nassert solution.partition('qmqbvjnihp') == [['q', 'm', 'q', 'b', 'v', 'j', 'n', 'i', 'h', 'p'], ['qmq', 'b', 'v', 'j', 'n', 'i', 'h', 'p']]\nassert solution.partition('wskpdqptqxu') == [['w', 's', 'k', 'p', 'd', 'q', 'p', 't', 'q', 'x', 'u']]\nassert solution.partition('kle') == [['k', 'l', 'e']]\nassert solution.partition('gvshyrrxyjksp') == [['g', 'v', 's', 'h', 'y', 'r', 'r', 'x', 'y', 'j', 'k', 's', 'p'], ['g', 'v', 's', 'h', 'y', 'rr', 'x', 'y', 'j', 'k', 's', 'p']]\nassert solution.partition('mndiyhkjgdxmqbod') == [['m', 'n', 'd', 'i', 'y', 'h', 'k', 'j', 'g', 'd', 'x', 'm', 'q', 'b', 'o', 'd']]\nassert solution.partition('ploeaf') == [['p', 'l', 'o', 'e', 'a', 'f']]\nassert solution.partition('logrtgduebzjdxyz') == [['l', 'o', 'g', 'r', 't', 'g', 'd', 'u', 'e', 'b', 'z', 'j', 'd', 'x', 'y', 'z']]\nassert solution.partition('fodwqygfngsqdws') == [['f', 'o', 'd', 'w', 'q', 'y', 'g', 'f', 'n', 'g', 's', 'q', 'd', 'w', 's']]\nassert solution.partition('eeyezxfyuvxfej') == [['e', 'e', 'y', 'e', 'z', 'x', 'f', 'y', 'u', 'v', 'x', 'f', 'e', 'j'], ['e', 'eye', 'z', 'x', 'f', 'y', 'u', 'v', 'x', 'f', 'e', 'j'], ['ee', 'y', 'e', 'z', 'x', 'f', 'y', 'u', 'v', 'x', 'f', 'e', 'j']]\nassert solution.partition('bipikds') == [['b', 'i', 'p', 'i', 'k', 'd', 's'], ['b', 'ipi', 'k', 'd', 's']]\nassert solution.partition('mijgimdbnndemyu') == [['m', 'i', 'j', 'g', 'i', 'm', 'd', 'b', 'n', 'n', 'd', 'e', 'm', 'y', 'u'], ['m', 'i', 'j', 'g', 'i', 'm', 'd', 'b', 'nn', 'd', 'e', 'm', 'y', 'u']]\nassert solution.partition('ptalhurzcexwyq') == [['p', 't', 'a', 'l', 'h', 'u', 'r', 'z', 'c', 'e', 'x', 'w', 'y', 'q']]\nassert solution.partition('dkhy') == [['d', 'k', 'h', 'y']]\nassert solution.partition('azpat') == [['a', 'z', 'p', 'a', 't']]\nassert solution.partition('hcxorc') == [['h', 'c', 'x', 'o', 'r', 'c']]\nassert solution.partition('olz') == [['o', 'l', 'z']]\nassert solution.partition('rpqfalgowpcyrllw') == [['r', 'p', 'q', 'f', 'a', 'l', 'g', 'o', 'w', 'p', 'c', 'y', 'r', 'l', 'l', 'w'], ['r', 'p', 'q', 'f', 'a', 'l', 'g', 'o', 'w', 'p', 'c', 'y', 'r', 'll', 'w']]\nassert solution.partition('caiubsfdfofj') == [['c', 'a', 'i', 'u', 'b', 's', 'f', 'd', 'f', 'o', 'f', 'j'], ['c', 'a', 'i', 'u', 'b', 's', 'f', 'd', 'fof', 'j'], ['c', 'a', 'i', 'u', 'b', 's', 'fdf', 'o', 'f', 'j']]\nassert solution.partition('jzepqkdlachth') == [['j', 'z', 'e', 'p', 'q', 'k', 'd', 'l', 'a', 'c', 'h', 't', 'h'], ['j', 'z', 'e', 'p', 'q', 'k', 'd', 'l', 'a', 'c', 'hth']]\nassert solution.partition('qcf') == [['q', 'c', 'f']]\nassert solution.partition('jcvzskghrtymu') == [['j', 'c', 'v', 'z', 's', 'k', 'g', 'h', 'r', 't', 'y', 'm', 'u']]\nassert solution.partition('kis') == [['k', 'i', 's']]\nassert solution.partition('ze') == [['z', 'e']]\nassert solution.partition('pyopojmgkujkxjhv') == [['p', 'y', 'o', 'p', 'o', 'j', 'm', 'g', 'k', 'u', 'j', 'k', 'x', 'j', 'h', 'v'], ['p', 'y', 'opo', 'j', 'm', 'g', 'k', 'u', 'j', 'k', 'x', 'j', 'h', 'v']]\nassert solution.partition('tdt') == [['t', 'd', 't'], ['tdt']]\nassert solution.partition('dclvywc') == [['d', 'c', 'l', 'v', 'y', 'w', 'c']]\nassert solution.partition('jcexf') == [['j', 'c', 'e', 'x', 'f']]\nassert solution.partition('honhhywdschsfps') == [['h', 'o', 'n', 'h', 'h', 'y', 'w', 'd', 's', 'c', 'h', 's', 'f', 'p', 's'], ['h', 'o', 'n', 'hh', 'y', 'w', 'd', 's', 'c', 'h', 's', 'f', 'p', 's']]\nassert solution.partition('frzqlviqbcga') == [['f', 'r', 'z', 'q', 'l', 'v', 'i', 'q', 'b', 'c', 'g', 'a']]\nassert solution.partition('ebnjrdnpggrg') == [['e', 'b', 'n', 'j', 'r', 'd', 'n', 'p', 'g', 'g', 'r', 'g'], ['e', 'b', 'n', 'j', 'r', 'd', 'n', 'p', 'g', 'grg'], ['e', 'b', 'n', 'j', 'r', 'd', 'n', 'p', 'gg', 'r', 'g']]\nassert solution.partition('wnbgcdodeh') == [['w', 'n', 'b', 'g', 'c', 'd', 'o', 'd', 'e', 'h'], ['w', 'n', 'b', 'g', 'c', 'dod', 'e', 'h']]\nassert solution.partition('atflxxmooxqwla') == [['a', 't', 'f', 'l', 'x', 'x', 'm', 'o', 'o', 'x', 'q', 'w', 'l', 'a'], ['a', 't', 'f', 'l', 'x', 'x', 'm', 'oo', 'x', 'q', 'w', 'l', 'a'], ['a', 't', 'f', 'l', 'xx', 'm', 'o', 'o', 'x', 'q', 'w', 'l', 'a'], ['a', 't', 'f', 'l', 'xx', 'm', 'oo', 'x', 'q', 'w', 'l', 'a']]\nassert solution.partition('imleguezy') == [['i', 'm', 'l', 'e', 'g', 'u', 'e', 'z', 'y']]\nassert solution.partition('iphauo') == [['i', 'p', 'h', 'a', 'u', 'o']]\nassert solution.partition('ndoxfsmybu') == [['n', 'd', 'o', 'x', 'f', 's', 'm', 'y', 'b', 'u']]\nassert solution.partition('luorzqo') == [['l', 'u', 'o', 'r', 'z', 'q', 'o']]\nassert solution.partition('qres') == [['q', 'r', 'e', 's']]\nassert solution.partition('uvzezmsqqevfu') == [['u', 'v', 'z', 'e', 'z', 'm', 's', 'q', 'q', 'e', 'v', 'f', 'u'], ['u', 'v', 'z', 'e', 'z', 'm', 's', 'qq', 'e', 'v', 'f', 'u'], ['u', 'v', 'zez', 'm', 's', 'q', 'q', 'e', 'v', 'f', 'u'], ['u', 'v', 'zez', 'm', 's', 'qq', 'e', 'v', 'f', 'u']]\nassert solution.partition('bjjxhskkucxn') == [['b', 'j', 'j', 'x', 'h', 's', 'k', 'k', 'u', 'c', 'x', 'n'], ['b', 'j', 'j', 'x', 'h', 's', 'kk', 'u', 'c', 'x', 'n'], ['b', 'jj', 'x', 'h', 's', 'k', 'k', 'u', 'c', 'x', 'n'], ['b', 'jj', 'x', 'h', 's', 'kk', 'u', 'c', 'x', 'n']]\nassert solution.partition('ubmramomtjfyi') == [['u', 'b', 'm', 'r', 'a', 'm', 'o', 'm', 't', 'j', 'f', 'y', 'i'], ['u', 'b', 'm', 'r', 'a', 'mom', 't', 'j', 'f', 'y', 'i']]\nassert solution.partition('vl') == [['v', 'l']]\nassert solution.partition('urxojyu') == [['u', 'r', 'x', 'o', 'j', 'y', 'u']]\nassert solution.partition('phhdxgubfyg') == [['p', 'h', 'h', 'd', 'x', 'g', 'u', 'b', 'f', 'y', 'g'], ['p', 'hh', 'd', 'x', 'g', 'u', 'b', 'f', 'y', 'g']]\nassert solution.partition('kkugzy') == [['k', 'k', 'u', 'g', 'z', 'y'], ['kk', 'u', 'g', 'z', 'y']]\nassert solution.partition('kjnaegoeuhkhkbt') == [['k', 'j', 'n', 'a', 'e', 'g', 'o', 'e', 'u', 'h', 'k', 'h', 'k', 'b', 't'], ['k', 'j', 'n', 'a', 'e', 'g', 'o', 'e', 'u', 'h', 'khk', 'b', 't'], ['k', 'j', 'n', 'a', 'e', 'g', 'o', 'e', 'u', 'hkh', 'k', 'b', 't']]\nassert solution.partition('oyiqfavb') == [['o', 'y', 'i', 'q', 'f', 'a', 'v', 'b']]\nassert solution.partition('xhilaoswxroxzkzw') == [['x', 'h', 'i', 'l', 'a', 'o', 's', 'w', 'x', 'r', 'o', 'x', 'z', 'k', 'z', 'w'], ['x', 'h', 'i', 'l', 'a', 'o', 's', 'w', 'x', 'r', 'o', 'x', 'zkz', 'w']]\nassert solution.partition('eoiyjomnaonh') == [['e', 'o', 'i', 'y', 'j', 'o', 'm', 'n', 'a', 'o', 'n', 'h']]",
  "inefficient_solution": "class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        def dfs(i: int):\n            if i == len(s):\n                ans.append([x for x in t])\n                return\n            for j in range(len(s)):\n                temp = [s[i : j + 1]] + t\n                temp_copy = temp[:]\n                temp_copy.append(s[i : j + 1])\n                dfs(j + 1)\n\n        ans = []\n        t = []\n        dfs(0)\n        return ans",
  "is_python": true
}