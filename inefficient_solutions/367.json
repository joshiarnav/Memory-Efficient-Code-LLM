{
  "problem_idx": 367,
  "task_name": "Valid Perfect Square",
  "markdown_description": "\nGiven a positive integer num, return `true` *if* `num` *is a perfect square or* `false` *otherwise*.\n\n\nA **perfect square** is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\n\n\nYou must not use any built-in library function, such as `sqrt`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 16\n**Output:** true\n**Explanation:** We return true because 4 * 4 = 16 and 4 is an integer.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 14\n**Output:** false\n**Explanation:** We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 231 - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        left, right = 1, num\n        while left < right:\n            mid = (left + right) >> 1\n            if mid * mid >= num:\n                right = mid\n            else:\n                left = mid + 1\n        return left * left == num\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        left, right = 1, num\n        while left < right:\n            mid = (left + right) >> 1\n            if mid * mid >= num:\n                right = mid\n            else:\n                left = mid + 1\n        return left * left == num\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random number\n    num = random.randint(1, 10 ** 9)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isPerfectSquare(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isPerfectSquare(num) == expected_result\n        print(f\"assert solution.isPerfectSquare({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isPerfectSquare({num}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isPerfectSquare(198794985) == False\nassert solution.isPerfectSquare(720548389) == False\nassert solution.isPerfectSquare(250143627) == False\nassert solution.isPerfectSquare(365152663) == False\nassert solution.isPerfectSquare(538451209) == False\nassert solution.isPerfectSquare(115641585) == False\nassert solution.isPerfectSquare(959452724) == False\nassert solution.isPerfectSquare(479537366) == False\nassert solution.isPerfectSquare(744827671) == False\nassert solution.isPerfectSquare(944380383) == False\nassert solution.isPerfectSquare(238832600) == False\nassert solution.isPerfectSquare(342262367) == False\nassert solution.isPerfectSquare(483222743) == False\nassert solution.isPerfectSquare(499687912) == False\nassert solution.isPerfectSquare(841912817) == False\nassert solution.isPerfectSquare(482272714) == False\nassert solution.isPerfectSquare(703251589) == False\nassert solution.isPerfectSquare(934847989) == False\nassert solution.isPerfectSquare(669698720) == False\nassert solution.isPerfectSquare(830608478) == False\nassert solution.isPerfectSquare(248581709) == False\nassert solution.isPerfectSquare(263563987) == False\nassert solution.isPerfectSquare(942476260) == False\nassert solution.isPerfectSquare(157878280) == False\nassert solution.isPerfectSquare(725797610) == False\nassert solution.isPerfectSquare(13540181) == False\nassert solution.isPerfectSquare(597374276) == False\nassert solution.isPerfectSquare(703627172) == False\nassert solution.isPerfectSquare(768222469) == False\nassert solution.isPerfectSquare(668430690) == False\nassert solution.isPerfectSquare(294394462) == False\nassert solution.isPerfectSquare(930381796) == False\nassert solution.isPerfectSquare(726722485) == False\nassert solution.isPerfectSquare(503953295) == False\nassert solution.isPerfectSquare(971482225) == False\nassert solution.isPerfectSquare(52053180) == False\nassert solution.isPerfectSquare(766362144) == False\nassert solution.isPerfectSquare(781002220) == False\nassert solution.isPerfectSquare(340631018) == False\nassert solution.isPerfectSquare(537443608) == False\nassert solution.isPerfectSquare(539489749) == False\nassert solution.isPerfectSquare(60405520) == False\nassert solution.isPerfectSquare(602748631) == False\nassert solution.isPerfectSquare(489146447) == False\nassert solution.isPerfectSquare(192651032) == False\nassert solution.isPerfectSquare(493806312) == False\nassert solution.isPerfectSquare(44403405) == False\nassert solution.isPerfectSquare(857988568) == False\nassert solution.isPerfectSquare(735480287) == False\nassert solution.isPerfectSquare(301167671) == False\nassert solution.isPerfectSquare(615862794) == False\nassert solution.isPerfectSquare(81193619) == False\nassert solution.isPerfectSquare(370617581) == False\nassert solution.isPerfectSquare(117424212) == False\nassert solution.isPerfectSquare(569135555) == False\nassert solution.isPerfectSquare(565342110) == False\nassert solution.isPerfectSquare(696794818) == False\nassert solution.isPerfectSquare(39621729) == False\nassert solution.isPerfectSquare(833090427) == False\nassert solution.isPerfectSquare(775341633) == False\nassert solution.isPerfectSquare(675641242) == False\nassert solution.isPerfectSquare(120275584) == False\nassert solution.isPerfectSquare(359521544) == False\nassert solution.isPerfectSquare(81575597) == False\nassert solution.isPerfectSquare(630752819) == False\nassert solution.isPerfectSquare(842657369) == False\nassert solution.isPerfectSquare(932591914) == False\nassert solution.isPerfectSquare(329543741) == False\nassert solution.isPerfectSquare(356702622) == False\nassert solution.isPerfectSquare(681621452) == False\nassert solution.isPerfectSquare(857335319) == False\nassert solution.isPerfectSquare(820883392) == False\nassert solution.isPerfectSquare(275867257) == False\nassert solution.isPerfectSquare(628566156) == False\nassert solution.isPerfectSquare(616478052) == False\nassert solution.isPerfectSquare(930567440) == False\nassert solution.isPerfectSquare(181748619) == False\nassert solution.isPerfectSquare(716617557) == False\nassert solution.isPerfectSquare(514385759) == False\nassert solution.isPerfectSquare(465711156) == False\nassert solution.isPerfectSquare(903168362) == False\nassert solution.isPerfectSquare(988819828) == False\nassert solution.isPerfectSquare(355881984) == False\nassert solution.isPerfectSquare(998741404) == False\nassert solution.isPerfectSquare(74830554) == False\nassert solution.isPerfectSquare(326906156) == False\nassert solution.isPerfectSquare(301642505) == False\nassert solution.isPerfectSquare(818181804) == False\nassert solution.isPerfectSquare(69679267) == False\nassert solution.isPerfectSquare(797640331) == False\nassert solution.isPerfectSquare(158698972) == False\nassert solution.isPerfectSquare(79299359) == False\nassert solution.isPerfectSquare(211169605) == False\nassert solution.isPerfectSquare(807518849) == False\nassert solution.isPerfectSquare(790808220) == False\nassert solution.isPerfectSquare(940414795) == False\nassert solution.isPerfectSquare(548763556) == False\nassert solution.isPerfectSquare(883405399) == False\nassert solution.isPerfectSquare(490152894) == False\nassert solution.isPerfectSquare(433853965) == False",
  "inefficient_solution": "class Solution:\n    def isPerfectSquare(self, num: int) -> bool:\n        squares = [i * i for i in range(1, num + 1)]\n        return num in squares",
  "is_python": true
}