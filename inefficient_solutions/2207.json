{
  "problem_idx": 2207,
  "task_name": "Maximize Number of Subsequences in a String",
  "markdown_description": "\nYou are given a **0-indexed** string `text` and another **0-indexed** string `pattern` of length `2`, both of which consist of only lowercase English letters.\n\n\nYou can add **either** `pattern[0]` **or** `pattern[1]` anywhere in `text` **exactly once**. Note that the character can be added even at the beginning or at the end of `text`.\n\n\nReturn *the **maximum** number of times* `pattern` *can occur as a **subsequence** of the modified* `text`.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** text = \"abdcdbc\", pattern = \"ac\"\n**Output:** 4\n**Explanation:**\nIf we add pattern[0] = 'a' in between text[1] and text[2], we get \"ab**a**dcdbc\". Now, the number of times \"ac\" occurs as a subsequence is 4.\nSome other strings which have 4 subsequences \"ac\" after adding a character to text are \"**a**abdcdbc\" and \"abd**a**cdbc\".\nHowever, strings such as \"abdc**a**dbc\", \"abd**c**cdbc\", and \"abdcdbc**c**\", although obtainable, have only 3 subsequences \"ac\" and are thus suboptimal.\nIt can be shown that it is not possible to get more than 4 subsequences \"ac\" by adding only one character.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** text = \"aabb\", pattern = \"ab\"\n**Output:** 6\n**Explanation:**\nSome of the strings which can be obtained from text and have 6 subsequences \"ab\" are \"**a**aabb\", \"aa**a**bb\", and \"aab**b**b\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= text.length <= 105`\n* `pattern.length == 2`\n* `text` and `pattern` consist only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumSubsequenceCount(self, text: str, pattern: str) -> int:\n        ans = 0\n        cnt = Counter()\n        for c in text:\n            if c == pattern[1]:\n                ans += cnt[pattern[0]]\n            cnt[c] += 1\n        ans += max(cnt[pattern[0]], cnt[pattern[1]])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def maximumSubsequenceCount(self, text: str, pattern: str) -> int:\n        ans = 0\n        cnt = Counter()\n        for c in text:\n            if c == pattern[1]:\n                ans += cnt[pattern[0]]\n            cnt[c] += 1\n        ans += max(cnt[pattern[0]], cnt[pattern[1]])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random text and pattern strings\n    text = \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(1, 10)))\n    pattern = \"\".join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=2))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumSubsequenceCount(text, pattern)\n\n    return text, pattern, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        text, pattern, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumSubsequenceCount(text, pattern) == expected_result\n        print(f'assert solution.maximumSubsequenceCount(\"{text}\", \"{pattern}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.maximumSubsequenceCount(\"{text}\", \"{pattern}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumSubsequenceCount(\"qusnhldokk\", \"uv\") == 1\nassert solution.maximumSubsequenceCount(\"awiypxjfah\", \"vn\") == 0\nassert solution.maximumSubsequenceCount(\"c\", \"wx\") == 0\nassert solution.maximumSubsequenceCount(\"s\", \"ul\") == 0\nassert solution.maximumSubsequenceCount(\"m\", \"rk\") == 0\nassert solution.maximumSubsequenceCount(\"yca\", \"ol\") == 0\nassert solution.maximumSubsequenceCount(\"psrsktihf\", \"hb\") == 1\nassert solution.maximumSubsequenceCount(\"k\", \"vo\") == 0\nassert solution.maximumSubsequenceCount(\"fcisnhf\", \"je\") == 0\nassert solution.maximumSubsequenceCount(\"a\", \"er\") == 0\nassert solution.maximumSubsequenceCount(\"n\", \"pk\") == 0\nassert solution.maximumSubsequenceCount(\"pvmqlld\", \"vj\") == 1\nassert solution.maximumSubsequenceCount(\"spsnrnsm\", \"ro\") == 1\nassert solution.maximumSubsequenceCount(\"occbaxgo\", \"hq\") == 0\nassert solution.maximumSubsequenceCount(\"qv\", \"ck\") == 0\nassert solution.maximumSubsequenceCount(\"tszcx\", \"kx\") == 1\nassert solution.maximumSubsequenceCount(\"zpzcw\", \"cb\") == 1\nassert solution.maximumSubsequenceCount(\"ceveawftr\", \"uz\") == 0\nassert solution.maximumSubsequenceCount(\"vsdj\", \"uf\") == 0\nassert solution.maximumSubsequenceCount(\"feiutzwxxe\", \"mj\") == 0\nassert solution.maximumSubsequenceCount(\"rhk\", \"qr\") == 1\nassert solution.maximumSubsequenceCount(\"mts\", \"sd\") == 1\nassert solution.maximumSubsequenceCount(\"gfu\", \"jd\") == 0\nassert solution.maximumSubsequenceCount(\"zrwfmq\", \"la\") == 0\nassert solution.maximumSubsequenceCount(\"zgvidhnb\", \"wb\") == 1\nassert solution.maximumSubsequenceCount(\"elbsv\", \"xc\") == 0\nassert solution.maximumSubsequenceCount(\"gdxwzd\", \"hr\") == 0\nassert solution.maximumSubsequenceCount(\"lkuk\", \"bd\") == 0\nassert solution.maximumSubsequenceCount(\"ja\", \"ry\") == 0\nassert solution.maximumSubsequenceCount(\"xrtun\", \"kn\") == 1\nassert solution.maximumSubsequenceCount(\"ijgpbcoimb\", \"cd\") == 1\nassert solution.maximumSubsequenceCount(\"owav\", \"sw\") == 1\nassert solution.maximumSubsequenceCount(\"ukrouhwmkk\", \"zw\") == 1\nassert solution.maximumSubsequenceCount(\"jem\", \"jm\") == 2\nassert solution.maximumSubsequenceCount(\"wpjg\", \"ga\") == 1\nassert solution.maximumSubsequenceCount(\"fqdxtq\", \"vj\") == 0\nassert solution.maximumSubsequenceCount(\"hdutog\", \"vg\") == 1\nassert solution.maximumSubsequenceCount(\"mzcwwg\", \"sy\") == 0\nassert solution.maximumSubsequenceCount(\"boamsb\", \"ys\") == 1\nassert solution.maximumSubsequenceCount(\"cwdttwgthc\", \"wn\") == 2\nassert solution.maximumSubsequenceCount(\"oedyagqg\", \"ca\") == 1\nassert solution.maximumSubsequenceCount(\"qzjrtm\", \"fe\") == 0\nassert solution.maximumSubsequenceCount(\"ykc\", \"rv\") == 0\nassert solution.maximumSubsequenceCount(\"hrrceihb\", \"gp\") == 0\nassert solution.maximumSubsequenceCount(\"nqrszzfc\", \"rw\") == 1\nassert solution.maximumSubsequenceCount(\"w\", \"zf\") == 0\nassert solution.maximumSubsequenceCount(\"n\", \"zz\") == 0\nassert solution.maximumSubsequenceCount(\"jzmgy\", \"gp\") == 1\nassert solution.maximumSubsequenceCount(\"jfrixkopl\", \"bp\") == 1\nassert solution.maximumSubsequenceCount(\"da\", \"fr\") == 0\nassert solution.maximumSubsequenceCount(\"uzzqmydcax\", \"at\") == 1\nassert solution.maximumSubsequenceCount(\"pdmnruq\", \"sq\") == 1\nassert solution.maximumSubsequenceCount(\"sibblmftxk\", \"gp\") == 0\nassert solution.maximumSubsequenceCount(\"zkr\", \"ma\") == 0\nassert solution.maximumSubsequenceCount(\"fohiqwxmve\", \"en\") == 1\nassert solution.maximumSubsequenceCount(\"uxmk\", \"rx\") == 1\nassert solution.maximumSubsequenceCount(\"mzjnc\", \"tu\") == 0\nassert solution.maximumSubsequenceCount(\"dub\", \"sc\") == 0\nassert solution.maximumSubsequenceCount(\"dsgbxyhf\", \"dx\") == 2\nassert solution.maximumSubsequenceCount(\"dthqdlf\", \"ys\") == 0\nassert solution.maximumSubsequenceCount(\"koeualfllx\", \"wu\") == 1\nassert solution.maximumSubsequenceCount(\"hxypelmn\", \"tx\") == 1\nassert solution.maximumSubsequenceCount(\"c\", \"dd\") == 0\nassert solution.maximumSubsequenceCount(\"twjllrk\", \"al\") == 2\nassert solution.maximumSubsequenceCount(\"rqxbamavu\", \"ru\") == 2\nassert solution.maximumSubsequenceCount(\"jqceu\", \"nv\") == 0\nassert solution.maximumSubsequenceCount(\"whmgeluez\", \"be\") == 2\nassert solution.maximumSubsequenceCount(\"oxiecuzfb\", \"in\") == 1\nassert solution.maximumSubsequenceCount(\"xqr\", \"lb\") == 0\nassert solution.maximumSubsequenceCount(\"d\", \"qv\") == 0\nassert solution.maximumSubsequenceCount(\"ekgapvpgw\", \"uf\") == 0\nassert solution.maximumSubsequenceCount(\"njqu\", \"tm\") == 0\nassert solution.maximumSubsequenceCount(\"ahyxs\", \"xf\") == 1\nassert solution.maximumSubsequenceCount(\"lwpyzo\", \"iq\") == 0\nassert solution.maximumSubsequenceCount(\"d\", \"vp\") == 0\nassert solution.maximumSubsequenceCount(\"muosvyjwaf\", \"mu\") == 2\nassert solution.maximumSubsequenceCount(\"noippmppe\", \"hv\") == 0\nassert solution.maximumSubsequenceCount(\"mznx\", \"bj\") == 0\nassert solution.maximumSubsequenceCount(\"b\", \"yc\") == 0\nassert solution.maximumSubsequenceCount(\"slkpd\", \"vb\") == 0\nassert solution.maximumSubsequenceCount(\"pjrkbak\", \"wq\") == 0\nassert solution.maximumSubsequenceCount(\"oca\", \"cg\") == 1\nassert solution.maximumSubsequenceCount(\"quaufccjv\", \"sa\") == 1\nassert solution.maximumSubsequenceCount(\"qtpm\", \"wk\") == 0\nassert solution.maximumSubsequenceCount(\"kcazztas\", \"pd\") == 0\nassert solution.maximumSubsequenceCount(\"xsmye\", \"yl\") == 1\nassert solution.maximumSubsequenceCount(\"e\", \"kx\") == 0\nassert solution.maximumSubsequenceCount(\"pnyfl\", \"gv\") == 0\nassert solution.maximumSubsequenceCount(\"xagl\", \"gi\") == 1\nassert solution.maximumSubsequenceCount(\"dvzrmlm\", \"jq\") == 0\nassert solution.maximumSubsequenceCount(\"awgrruj\", \"ja\") == 1\nassert solution.maximumSubsequenceCount(\"fxwrwpjtet\", \"mx\") == 1\nassert solution.maximumSubsequenceCount(\"mflitdl\", \"mp\") == 1\nassert solution.maximumSubsequenceCount(\"pabpuf\", \"vd\") == 0\nassert solution.maximumSubsequenceCount(\"nncnltxxe\", \"ek\") == 1\nassert solution.maximumSubsequenceCount(\"avgpjprs\", \"au\") == 1\nassert solution.maximumSubsequenceCount(\"rjy\", \"lz\") == 0\nassert solution.maximumSubsequenceCount(\"hv\", \"gr\") == 0\nassert solution.maximumSubsequenceCount(\"uf\", \"lt\") == 0\nassert solution.maximumSubsequenceCount(\"rzhxxvb\", \"cm\") == 0",
  "inefficient_solution": "class Solution:\n    def maximumSubsequenceCount(self, text: str, pattern: str) -> int:\n        ans = 0\n        cnt = [0] * 26\n        for c in text:\n            if c == pattern[1]:\n                for i in range(26):\n                    if chr(i + 97) == pattern[0]:\n                        ans += cnt[i]\n            cnt[ord(c) - 97] += 1\n        cnt = [0] * 26\n        for c in text:\n            if c == pattern[0]:\n                for i in range(26):\n                    if chr(i + 97) == pattern[1]:\n                        ans += cnt[i]\n            cnt[ord(c) - 97] += 1\n        return ans",
  "is_python": true
}