{
  "problem_idx": 154,
  "task_name": "Find Minimum in Rotated Sorted Array II",
  "markdown_description": "\nSuppose an array of length `n` sorted in ascending order is **rotated** between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:\n\n\n* `[4,5,6,7,0,1,4]` if it was rotated `4` times.\n* `[0,1,4,4,5,6,7]` if it was rotated `7` times.\n\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\n\nGiven the sorted rotated array `nums` that may contain **duplicates**, return *the minimum element of this array*.\n\n\nYou must decrease the overall operation steps as much as possible.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** nums = [1,3,5]\n**Output:** 1\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** nums = [2,2,2,0,1]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 5000`\n* `-5000 <= nums[i] <= 5000`\n* `nums` is sorted and rotated between `1` and `n` times.\n\n\n\u00a0\n\n\n**Follow up:** This problem is similar to\u00a0[Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/), but\u00a0`nums` may contain **duplicates**. Would this affect the runtime complexity? How and why?\n\n\n\u00a0\n\n\n",
  "canonical_solution": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findMin(self, nums):\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) >> 1\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = sorted(random.sample(range(-5000, 5001), random.randint(1, 20)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMin(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMin(nums) == expected_result\n        print(f\"assert solution.findMin({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMin({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMin([-4980, -2712, -2612, -2607, 43, 2228, 2681, 2689, 2804, 3113, 3705, 4816]) == -4980\nassert solution.findMin([-1819, -1365, -734, 1161, 3974]) == -1819\nassert solution.findMin([-4412, -3929, -3673, -3658, 23, 663, 1787, 2179, 2895, 3169, 3569, 4692]) == -4412\nassert solution.findMin([2377, 3944, 4662]) == 2377\nassert solution.findMin([-4440, -3786, -3156, -2497, -2160, -1581, -1541, -1074, -463, 505, 2038, 2218, 2545, 3863, 4004, 4496, 4691]) == -4440\nassert solution.findMin([-3574, -3278, -3213, -1463, -1067, -851, -510, -270, 318, 341, 1820, 1910, 2960, 3877, 4503, 4732]) == -3574\nassert solution.findMin([-4383, -4338, -4042, -3137, -3068, 818, 830, 2518, 3859, 4557]) == -4383\nassert solution.findMin([-2160, -1623, -1604, -1414, -676, -481, -265, 1280, 3944]) == -2160\nassert solution.findMin([933, 3357]) == 933\nassert solution.findMin([-4820, -3449, -2942, -1671, 505, 826, 2029, 2566, 2992, 4473]) == -4820\nassert solution.findMin([-4958, -4800, -3798, -3684, -2720, -2559, -2462, -2418, -2169, -1207, -1048, -264, -227, 351, 3260, 3703, 3748]) == -4958\nassert solution.findMin([4027]) == 4027\nassert solution.findMin([-3362, -2839, -1674, -238, 1357, 4036, 4797]) == -3362\nassert solution.findMin([-4989, -4709, -3966, -2992, -2049, -1444, -1088, 1263, 2109, 2298, 3271, 4475]) == -4989\nassert solution.findMin([-4227, -4128, -3755, -3391, -2431, -2294, -2134, -1904, -1675, -1103, -383, -90, 2205, 2410, 4914, 4916]) == -4227\nassert solution.findMin([-4723, -4594, -4350, -1897, -1466, -856, -410, -17, 238, 373, 803, 2163, 2669, 3358, 3719, 4210, 4692, 4719, 4830, 4840]) == -4723\nassert solution.findMin([-3654, -2879, -2636, -1367, 2009, 2317, 2506, 3562, 3977, 4672]) == -3654\nassert solution.findMin([-4893, -4648, -2497, 50, 1015, 4981]) == -4893\nassert solution.findMin([-3869, -2988, -2903, 313, 1536, 2915, 3126, 3882, 4371]) == -3869\nassert solution.findMin([-4669, -3492, -2873, -493, -463, 337, 2407]) == -4669\nassert solution.findMin([-4331, -3759, -3361, -3243, -1558, 1005, 1389, 1526, 2744, 3040, 3285, 3617, 3948, 4827]) == -4331\nassert solution.findMin([-4548, -4246, -2168, -734, 2077, 3091, 3266, 4002]) == -4548\nassert solution.findMin([-4743, -4118, -3759, -3366, -2998, -2790, -1530, -1216, 303, 373, 706, 928, 1214, 1317, 3953]) == -4743\nassert solution.findMin([-3834, -827, -681, 3080]) == -3834\nassert solution.findMin([-4996, -3487, -3368, -3234, -2620, -2172, -908, -709, 765, 2489, 2655, 3870, 4408, 4639]) == -4996\nassert solution.findMin([-3560, -3494, -3057, -2401, -1406, -1153, -466, 938, 2750, 3533, 3760, 4829]) == -3560\nassert solution.findMin([-4640, -4059, -3418, -2046, -1096, 194, 715, 1617, 1624, 2003, 2392, 2452, 2662, 4870]) == -4640\nassert solution.findMin([-4712, -4580, -4331, -3877, -3833, -3643, -3604, -3288, -3233, -2987, -2845, -2657, 1812, 1819, 2944, 2974, 3498, 3513, 4293, 4693]) == -4712\nassert solution.findMin([-4410, -2935, -2058, -1367, -1288]) == -4410\nassert solution.findMin([-4215, -4126, -2506, -1691, -1482, -905, 581, 2914, 4459]) == -4215\nassert solution.findMin([-4973, -4585, -3808, -3666, -3193, -2997, -1233, -612, -216, 282, 1685, 2164, 4606, 4872]) == -4973\nassert solution.findMin([-2034, 656, 981]) == -2034\nassert solution.findMin([-4525, -2180, 2771, 4912]) == -4525\nassert solution.findMin([-3734, -3500, -2905, -1504, -1440]) == -3734\nassert solution.findMin([-4891, -4854, -4653, -4397, -2851, -1719, -1016, 3513, 3579, 3779, 4724, 4889]) == -4891\nassert solution.findMin([-788, 1688, 1989, 4502]) == -788\nassert solution.findMin([-3938, -3384, -2904, -2041, -1982, -1604, -1333, -1232, -912, 42, 542, 2554, 3021, 3242, 4290, 4391, 4714, 4792, 4795]) == -3938\nassert solution.findMin([-4751, -4006, -3488, -3466, -3038, -1837, 686, 1824, 2902, 3221]) == -4751\nassert solution.findMin([-4532, -4406, -4329, -4269, -3559, -1896, -365, 847, 1427, 2291, 3261, 4648]) == -4532\nassert solution.findMin([-4899, -4203, -4089, -3745, -3361, -2892, -907, 268, 1700, 2421, 2735, 3379, 4182]) == -4899\nassert solution.findMin([-4353, -2902, -1084, -463, 128, 1195, 2210, 2527, 2572, 2648, 3352, 3581, 3961, 4006, 4167, 4981]) == -4353\nassert solution.findMin([-4317, -3946, -2820, -2123, -1348, -1015, -448, -320, 1772, 2025, 2288, 2488, 2886, 3533, 3588, 4188, 4190, 4735, 4811]) == -4317\nassert solution.findMin([-4396, -2658, -2637, -2228, -924, 364, 1872, 2601, 4773, 4913]) == -4396\nassert solution.findMin([-4252, -3146, -2914, -2174, -1909, 652, 1222, 1522, 3126, 3450, 3612]) == -4252\nassert solution.findMin([-3987, -1766, -932, 1177, 2939]) == -3987\nassert solution.findMin([-4439, -3162, -2896, 794, 1391, 1654, 3926, 4186, 4817]) == -4439\nassert solution.findMin([-2278, -264, 2195, 2580, 2598, 4164, 4402]) == -2278\nassert solution.findMin([-2127, 108, 1655, 2747, 4068, 4939]) == -2127\nassert solution.findMin([-3357, -2645, -1838, -1787, -1779, -112, 636, 698, 3530, 3669, 3887, 3924]) == -3357\nassert solution.findMin([-1401]) == -1401\nassert solution.findMin([-4658, -3416, -3071, -2933, -2544, -2154, -1954, -1887, -1565, -920, -702, -505, -326, 128, 917, 1646, 2332, 2595, 3634, 3858]) == -4658\nassert solution.findMin([-4706, -3751, -2584, -1413, -294, 239, 1084, 3707, 4961]) == -4706\nassert solution.findMin([-4843, -4634, -4118, -2890, -2285, -2273, -2110, -2081, -1404, -755, -268, 387, 901, 1107, 1359, 3175, 3784, 4670, 4987]) == -4843\nassert solution.findMin([-4432, -3600, -3090, -2018, -1631, -1622, -117, 243, 738, 2843]) == -4432\nassert solution.findMin([-4932, -4645, -3829, -3050, -3026, -1923, -1392, -1210, -176, 857, 1656, 2449, 2842, 3891, 4086, 4972]) == -4932\nassert solution.findMin([-2833, -2800, -1770, -1451, -921, -100, 438, 1410, 3520]) == -2833\nassert solution.findMin([-3323, -3188, -3053, -2735, -2386, -2342, -2149, -1906, -1692, -1443, -723, -540, 345, 439, 1186, 1311, 2689, 3545, 4199, 4329]) == -3323\nassert solution.findMin([-4623, -3073, -2664, -1380, -859, -263, 844, 1062, 3574]) == -4623\nassert solution.findMin([485, 1461, 3735]) == 485\nassert solution.findMin([454, 3821]) == 454\nassert solution.findMin([-4620, -3467, -2460, -1659, 133, 891, 1281, 2418, 3567, 3636]) == -4620\nassert solution.findMin([-4904, -4582, -337, 1368, 3068, 3470, 3746, 4767]) == -4904\nassert solution.findMin([-4626, -4040, -3785, -3366, -2708, -2114, -1967, -1449, -240, -178, 104, 114, 683, 1204, 1226, 1448, 2784, 3404, 3405, 3695]) == -4626\nassert solution.findMin([-4818, -2941, -2760, -210, 644, 1867, 2455, 2467, 3786, 4569, 4894]) == -4818\nassert solution.findMin([-1439, 1968, 3090, 4689]) == -1439\nassert solution.findMin([-4267, -1517, 2627]) == -4267\nassert solution.findMin([-4904, 29, 656, 2065]) == -4904\nassert solution.findMin([-4583, -4324, -3964, -3944, -3595, -3529, -2293, -2156, -97, 442, 659, 3217]) == -4583\nassert solution.findMin([-4138, -3737, -3126, -2980, -2755, -1937, -1590, -74, 1683, 2148, 4443, 4455]) == -4138\nassert solution.findMin([-4532, -4138, -2648, -2328, -2179, -1567, -306, -13, 417, 623, 966, 1305, 2723, 3640, 3792]) == -4532\nassert solution.findMin([-1665, -1256, 1235]) == -1665\nassert solution.findMin([-3233, 1303, 4817]) == -3233\nassert solution.findMin([-4748, -4552, -3918, -3880, -3641, -3217, -974, -198, -37, 86, 286, 752, 1149, 1971, 2169, 2800, 3227, 3861, 4037, 4748]) == -4748\nassert solution.findMin([-3804, -2695, -2078, -2043, -2036, -1470, -940, -872, -484, 1015, 1295, 2554, 2607, 2811, 3026, 3145, 4323, 4790]) == -3804\nassert solution.findMin([-1903, -1810, -623, 2913, 3544, 3706]) == -1903\nassert solution.findMin([-4368, -3870, -3611, -2660, -1993, -1980, -1127, -792, 179, 980, 1631, 2625, 2849, 3706, 4975]) == -4368\nassert solution.findMin([-4887, -883, 917, 994, 3540, 4322, 4361, 4557, 4652]) == -4887\nassert solution.findMin([-4295, -3743, -3049, -2699, -2489, -2364, -2190, -1914, -764, -688, 760, 907, 1821, 2308, 2313, 2624, 3412, 3998, 4069, 4246]) == -4295\nassert solution.findMin([-4025, -1210, 1416, 4195]) == -4025\nassert solution.findMin([-4960, -4656, -3301, -2371, -2311, -1694, 889, 1138, 1593, 2331, 2761, 3619]) == -4960\nassert solution.findMin([-4525, -4269, -3614, -3306, -2601, -2440, -2125, -1255, 716, 850, 1819, 2164, 3233]) == -4525\nassert solution.findMin([4730]) == 4730\nassert solution.findMin([-4216, -3612, -3446, -3344, -2700, -2655, -988, -274, -182, 30, 1362, 4186, 4600]) == -4216\nassert solution.findMin([-3984, -3047, 2912, 3189, 4385]) == -3984\nassert solution.findMin([-4956, -3833, -3287, -2201, -1664, -1500, 271, 1546, 1800]) == -4956\nassert solution.findMin([-4929, -2681, -2365, -1581, 909, 1530, 1567, 1788, 2061, 2822, 2859, 4188, 4376]) == -4929\nassert solution.findMin([-4936, -4644, -4087, -3963, -3922, -3758, -3742, -2532, -1459, -689, -359, -229, 963, 1401, 1507, 2280, 2743, 2769, 3482, 4508]) == -4936\nassert solution.findMin([-4829, -4781, -2561, -2401, -1116, -1020, 92]) == -4829\nassert solution.findMin([-4408, -3800, -3714, -3653, -3414, -3412, -2899, -2312, -649, -393, 332, 579, 671, 1384, 2947, 3488, 3658, 3884, 4214, 4367]) == -4408\nassert solution.findMin([-3557, -3057, -2538, -2489, -2460, -1631, -700, -148, 834, 1764, 1898, 3141, 4551]) == -3557\nassert solution.findMin([-3370, -3175, -2768, -1264, 409, 935, 2393, 2733, 2833, 2949, 4171]) == -3370\nassert solution.findMin([-4822, -4277, -4064, -4058, -2298, -1783, -164, 38, 92, 302, 982, 1152, 1440, 1862, 2375, 3014, 3250, 3808]) == -4822\nassert solution.findMin([-4681, -4649, -4134, -3308, -1892, -1859, -515, 193, 759, 1997, 3158, 3507, 4129, 4218]) == -4681\nassert solution.findMin([-4899, -4515, -4424, -2557, -2295, -2278, -1646, 252, 1888, 2253, 4259, 4322, 4389, 4671]) == -4899\nassert solution.findMin([-4436, -3531, -2471, 731, 1297]) == -4436\nassert solution.findMin([2481]) == 2481\nassert solution.findMin([-4736, -3835, -3676, -2805, -2072, -1990, -838, -607, -278, 1760, 2153, 2469, 2937, 3961, 4103, 4563]) == -4736\nassert solution.findMin([-3605]) == -3605\nassert solution.findMin([-1534, 1924, 3657]) == -1534\nassert solution.findMin([-4947, -4097, -3314, -3251, -2041, -1638, -1415, 553, 592, 603, 1134, 1393, 1572, 1751, 3068, 4016, 4231, 4327]) == -4947",
  "inefficient_solution": "class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        rotations = [nums.copy() for _ in range(len(nums))]\n        min_nums = []\n        for rotation in rotations:\n            min_num = float('inf')\n            for num in rotation:\n                if num < min_num:\n                    min_num = num\n            min_nums.append(min_num)\n        return min(min_nums)",
  "is_python": true
}