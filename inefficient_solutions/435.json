{
  "problem_idx": 435,
  "task_name": "Non",
  "markdown_description": "\nGiven an array of intervals `intervals` where `intervals[i] = [starti, endi]`, return *the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** intervals = [[1,2],[2,3],[3,4],[1,3]]\n**Output:** 1\n**Explanation:** [1,3] can be removed and the rest of the intervals are non-overlapping.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** intervals = [[1,2],[1,2],[1,2]]\n**Output:** 2\n**Explanation:** You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** intervals = [[1,2],[2,3]]\n**Output:** 0\n**Explanation:** You don't need to remove any of the intervals since they're already non-overlapping.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= intervals.length <= 105`\n* `intervals[i].length == 2`\n* `-5 * 104 <= starti < endi <= 5 * 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: x[1])\n        ans, t = 0, intervals[0][1]\n        for s, e in intervals[1:]:\n            if s >= t:\n                t = e\n            else:\n                ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        intervals.sort(key=lambda x: x[1])\n        ans, t = 0, intervals[0][1]\n        for s, e in intervals[1:]:\n            if s >= t:\n                t = e\n            else:\n                ans += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random intervals list\n    intervals = []\n    for _ in range(random.randint(2, 10)):\n        start = random.randint(-50000, 50000)\n        end = random.randint(start+1, 50000)\n        intervals.append([start, end])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.eraseOverlapIntervals(intervals)\n    \n    return intervals, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        intervals, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.eraseOverlapIntervals(intervals) == expected_result\n        print(f'intervals = {intervals}')\n        test_case_generator_results.append(f\"assert solution.eraseOverlapIntervals({intervals}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.eraseOverlapIntervals([[25805, 29992], [30903, 33688], [-33886, 38429], [20311, 38729], [18317, 48757], [-12937, 48832]]) == 4\nassert solution.eraseOverlapIntervals([[-14373, -8974], [1084, 24529], [18085, 24614], [33777, 48773], [-27885, 49695]]) == 2\nassert solution.eraseOverlapIntervals([[-13974, 25], [17172, 24744], [-771, 31697], [-27765, 32217], [20687, 35408], [16810, 37966], [-11062, 37972], [17188, 38422], [37578, 38974]]) == 6\nassert solution.eraseOverlapIntervals([[-46028, -6064], [514, 7598], [13342, 17812], [-43993, 27997], [26026, 30064], [30498, 32802], [-15276, 38068], [1313, 43924]]) == 3\nassert solution.eraseOverlapIntervals([[-14877, 6248], [-10265, 6253], [24378, 26561]]) == 1\nassert solution.eraseOverlapIntervals([[-43418, -29890], [-18068, 9912], [10862, 15384], [-49445, 26663], [36708, 43512], [10030, 44631]]) == 2\nassert solution.eraseOverlapIntervals([[-17539, 4644], [-19, 24050], [-46883, 24914], [2550, 24985], [9407, 26414], [29173, 47644], [39230, 49438]]) == 4\nassert solution.eraseOverlapIntervals([[-44687, -31945], [-32628, 27517], [-11566, 34479], [11, 44425], [43915, 47045], [34205, 47914]]) == 3\nassert solution.eraseOverlapIntervals([[35690, 37464], [46315, 47797]]) == 0\nassert solution.eraseOverlapIntervals([[-13438, -525], [-48547, 10299], [-19971, 21984], [23278, 36048], [27256, 41794], [48643, 49896]]) == 3\nassert solution.eraseOverlapIntervals([[-26115, 4041], [-9052, 5513], [-45791, 31078], [25673, 41277], [-12295, 43612], [-13418, 47922], [-7255, 47929], [-23261, 49597]]) == 6\nassert solution.eraseOverlapIntervals([[-46000, 29621], [6913, 29751], [46487, 46639]]) == 1\nassert solution.eraseOverlapIntervals([[-41170, 17048], [-1965, 20177], [35151, 49204]]) == 1\nassert solution.eraseOverlapIntervals([[-31291, -1605], [-20847, 569], [-8123, 4186], [8783, 10493], [-21535, 21716], [-43657, 41479], [36356, 43817], [44633, 46091], [36401, 49432]]) == 5\nassert solution.eraseOverlapIntervals([[-10761, 14189], [-33471, 26842], [-4026, 28253], [-25460, 28896]]) == 3\nassert solution.eraseOverlapIntervals([[-43981, -43775], [15233, 19691]]) == 0\nassert solution.eraseOverlapIntervals([[-30970, -23755], [-6041, 14127], [-8315, 14248], [10428, 20912], [20903, 34173], [-44859, 36990], [29321, 43515], [24109, 49066]]) == 5\nassert solution.eraseOverlapIntervals([[8256, 18779], [21069, 42960], [34727, 43485]]) == 1\nassert solution.eraseOverlapIntervals([[-34356, -979], [-22624, 1864], [9975, 32183], [34990, 38477], [-9267, 41609], [26013, 44462], [29715, 48577], [42027, 48606]]) == 4\nassert solution.eraseOverlapIntervals([[28889, 34810], [35480, 38028], [-17651, 49788]]) == 1\nassert solution.eraseOverlapIntervals([[-25138, -705], [34224, 43779]]) == 0\nassert solution.eraseOverlapIntervals([[-1657, 1616], [-27557, 9221], [2186, 12329], [-30345, 15012], [13188, 21717], [-33150, 29287], [8024, 33485], [-33942, 34253]]) == 5\nassert solution.eraseOverlapIntervals([[-47703, 4036], [-16400, 12085], [7084, 29956], [24548, 39823], [38978, 48817], [47910, 48852]]) == 3\nassert solution.eraseOverlapIntervals([[-26446, -13817], [-22600, -3927], [39509, 45440]]) == 1\nassert solution.eraseOverlapIntervals([[3839, 13708], [-5211, 35452], [32272, 45557], [-29273, 47027], [47998, 49220]]) == 2\nassert solution.eraseOverlapIntervals([[-4265, -3931], [37043, 44437]]) == 0\nassert solution.eraseOverlapIntervals([[-41245, -6085], [-11372, -750], [-2244, 10803], [16432, 43505], [38689, 43819], [39154, 49722]]) == 3\nassert solution.eraseOverlapIntervals([[-8707, -4034], [-106, 16767], [7723, 36187], [35806, 47840], [43482, 48772], [45649, 49967]]) == 3\nassert solution.eraseOverlapIntervals([[-38325, -6671], [-33297, 13637], [22234, 29763], [-9971, 33526], [-36098, 33865], [16519, 34686], [31315, 39967], [33134, 42018], [39644, 44516], [24421, 48202]]) == 7\nassert solution.eraseOverlapIntervals([[-49197, -37168], [10820, 11396], [-8488, 14698], [-34239, 19209], [-10698, 19720], [-38088, 35371], [19389, 38184], [34304, 38656], [38623, 46684], [42592, 49557]]) == 6\nassert solution.eraseOverlapIntervals([[-26224, -23242], [30189, 34243], [42923, 46140], [44861, 48977], [49665, 49835]]) == 1\nassert solution.eraseOverlapIntervals([[-46495, -5653], [-34883, 21182], [16539, 23840], [20426, 42397], [41829, 45767], [13681, 47742]]) == 3\nassert solution.eraseOverlapIntervals([[14790, 36731], [31100, 49333]]) == 1\nassert solution.eraseOverlapIntervals([[-21405, -17891], [-4850, 9531], [-15779, 19255], [-31669, 33854], [-41996, 38561], [27030, 41391], [39618, 46057], [45733, 49447]]) == 4\nassert solution.eraseOverlapIntervals([[-30757, -6793], [-30092, -4568], [-26397, 2633], [31940, 39419], [-35840, 42830]]) == 3\nassert solution.eraseOverlapIntervals([[-23844, 17246], [-46266, 33829], [17852, 33951], [43582, 45287], [45203, 49816]]) == 2\nassert solution.eraseOverlapIntervals([[2787, 17029], [-21430, 23960], [43721, 47322], [47444, 49702]]) == 1\nassert solution.eraseOverlapIntervals([[14661, 24109], [22096, 27784], [-19655, 30648], [-49267, 36923], [18286, 43199], [-33766, 44732], [-32653, 45443], [1416, 46436], [42314, 48812]]) == 7\nassert solution.eraseOverlapIntervals([[-33200, 9068], [23987, 37434], [31927, 38032]]) == 1\nassert solution.eraseOverlapIntervals([[-7458, 6349], [17905, 41016], [44249, 49905]]) == 0\nassert solution.eraseOverlapIntervals([[-18607, 520], [-1508, 11447], [25938, 27192], [7863, 27199], [24186, 32428], [5198, 38478], [-13784, 39750], [-43947, 41853], [-30242, 45691], [46754, 48199]]) == 7\nassert solution.eraseOverlapIntervals([[-20931, -20419], [-2312, 12575], [-21499, 35087], [24898, 42762]]) == 1\nassert solution.eraseOverlapIntervals([[-30225, -22677], [-22206, -13997], [-26799, -6499], [-7452, 8946], [-31452, 11790], [-15099, 12587], [-24638, 46247], [20812, 48640]]) == 4\nassert solution.eraseOverlapIntervals([[-20509, -10304], [30073, 44997]]) == 0\nassert solution.eraseOverlapIntervals([[-29708, -22665], [-17433, 3718], [6531, 13245], [45998, 46024], [-24852, 48956]]) == 1\nassert solution.eraseOverlapIntervals([[-40591, -38232], [-48590, -26642], [-46582, -22310], [-21795, -1256], [6067, 16104], [21321, 38741], [-3150, 45021], [10591, 46206], [20395, 47713], [49185, 49194]]) == 5\nassert solution.eraseOverlapIntervals([[-4266, 23843], [14370, 27047]]) == 1\nassert solution.eraseOverlapIntervals([[-41585, -39490], [-45828, -39417], [25211, 26260], [29170, 32717], [28336, 37179], [-16436, 44744], [41653, 46627]]) == 3\nassert solution.eraseOverlapIntervals([[-47048, 37878], [41137, 44918]]) == 0\nassert solution.eraseOverlapIntervals([[-39407, -31960], [-5381, 11508], [-22697, 19090], [1400, 37802], [25089, 42129], [11305, 45272], [24926, 47929], [38436, 48825], [38689, 49223], [40310, 49578]]) == 7\nassert solution.eraseOverlapIntervals([[818, 9112], [11779, 15597], [13573, 19470], [-1176, 22683], [35700, 41332], [38982, 41662], [34445, 41974], [47453, 49712]]) == 4\nassert solution.eraseOverlapIntervals([[-46908, -40775], [-21945, -4512], [9906, 36986]]) == 0\nassert solution.eraseOverlapIntervals([[-33993, -21105], [-14473, -9140], [-31281, -5469], [-25191, 11628], [23477, 33412], [24119, 42437], [27534, 45535], [-37576, 47199]]) == 5\nassert solution.eraseOverlapIntervals([[3389, 5635], [20228, 33705], [22557, 35863], [-15110, 43745], [42892, 48262], [48929, 49258]]) == 2\nassert solution.eraseOverlapIntervals([[-28793, 23797], [-39218, 29437]]) == 1\nassert solution.eraseOverlapIntervals([[-44448, -32495], [-48010, -15545], [-21758, -8775], [-32223, 4828], [8463, 16625], [734, 27396], [-45838, 29910], [-4809, 36432], [-12621, 37432], [33973, 47745]]) == 6\nassert solution.eraseOverlapIntervals([[-42917, -20550], [10023, 20470], [-39831, 27926], [-21407, 32499], [-14545, 33939], [19383, 34772], [-17946, 45518]]) == 5\nassert solution.eraseOverlapIntervals([[-41320, -16217], [-35472, 2708], [-17016, 8627], [-1238, 16195], [16439, 20266], [15753, 22601], [13341, 44713], [-45437, 49010]]) == 5\nassert solution.eraseOverlapIntervals([[-38797, -32933], [7182, 12136], [303, 13448], [-18360, 36088], [-25286, 43788]]) == 3\nassert solution.eraseOverlapIntervals([[13118, 13764], [-14428, 28331], [27482, 38017], [45742, 46296]]) == 1\nassert solution.eraseOverlapIntervals([[-41429, -38688], [-48629, 9510], [11316, 17926], [15188, 19579], [35646, 36113], [35766, 37009], [26176, 38443], [-17414, 48500], [48501, 48685]]) == 5\nassert solution.eraseOverlapIntervals([[16693, 43078], [41248, 46640], [49126, 49535]]) == 1\nassert solution.eraseOverlapIntervals([[-31996, -28352], [10143, 26391], [25330, 28262], [-29449, 41059], [-11204, 42848], [48150, 48440]]) == 3\nassert solution.eraseOverlapIntervals([[-43812, -6404], [7405, 23436], [21953, 30144], [6807, 37032], [-49497, 37547]]) == 3\nassert solution.eraseOverlapIntervals([[2382, 5183], [28466, 32732], [27015, 48456], [42285, 49605]]) == 1\nassert solution.eraseOverlapIntervals([[-36614, -18399], [-33880, 7468], [-28613, 21869], [14491, 25499], [20858, 28658], [24220, 32967], [29391, 37298], [-9075, 46081], [10919, 46972]]) == 6\nassert solution.eraseOverlapIntervals([[-30806, -19164], [-11583, 21610], [-23223, 25361], [20622, 30728], [-19053, 32246], [474, 33825], [-5333, 46310], [-4748, 46958]]) == 6\nassert solution.eraseOverlapIntervals([[-20161, -9558], [-37733, -6098], [-6342, 12166], [6784, 13655], [-42207, 17138], [-3435, 27265], [-24357, 28224], [17981, 28264], [22197, 41072], [-34384, 47981]]) == 7\nassert solution.eraseOverlapIntervals([[-32795, 11551], [-3412, 29556], [15073, 37972], [-35675, 39140], [18985, 42682]]) == 3\nassert solution.eraseOverlapIntervals([[-24203, 2488], [-39300, 4261], [-44933, 13084], [-32849, 15846], [2371, 19671], [-5546, 31972], [35121, 41879], [-19861, 44818], [19152, 48428]]) == 7\nassert solution.eraseOverlapIntervals([[-21757, -6709], [-44685, -1550], [5022, 10996]]) == 1\nassert solution.eraseOverlapIntervals([[-20225, -9153], [-42167, -7458], [-17413, 16687], [-23026, 29297], [35409, 41636], [46942, 49887]]) == 3\nassert solution.eraseOverlapIntervals([[-24373, -22120], [-33561, -9607], [-16116, 11082], [-26721, 31140], [-13737, 32602], [23817, 34384], [48615, 49769]]) == 3\nassert solution.eraseOverlapIntervals([[-43758, -20459], [47044, 48178]]) == 0\nassert solution.eraseOverlapIntervals([[21167, 27838], [-186, 29315], [-12090, 31962]]) == 2\nassert solution.eraseOverlapIntervals([[-47361, -31938], [-42360, 1986], [9156, 28025], [22528, 31634], [31919, 34272], [13860, 36363], [-15917, 39221]]) == 4\nassert solution.eraseOverlapIntervals([[-34909, -32063], [10410, 32122], [-9441, 32813], [-16246, 38118], [35440, 38636], [2261, 39119], [42670, 45667], [40537, 47267], [-10194, 47562]]) == 5\nassert solution.eraseOverlapIntervals([[-14402, -7330], [17197, 17216], [29456, 38712]]) == 0\nassert solution.eraseOverlapIntervals([[-187, 3711], [34053, 38705], [16834, 49553]]) == 1\nassert solution.eraseOverlapIntervals([[-44213, 4380], [11390, 21099], [23772, 29771], [-6006, 32460], [-45921, 33578], [35067, 45007], [47223, 47318], [36054, 48184]]) == 3\nassert solution.eraseOverlapIntervals([[-8993, 14073], [-4397, 19880], [13567, 23226], [-3299, 26916]]) == 3\nassert solution.eraseOverlapIntervals([[-44780, -11516], [-11078, 2186], [5543, 5646], [-528, 10254], [-13625, 15898], [-45557, 22288], [26817, 27057], [-16024, 44470], [20156, 47056], [-17250, 49623]]) == 6\nassert solution.eraseOverlapIntervals([[-40399, -35628], [-29684, -7302], [3279, 15735], [-9007, 26160], [33139, 38364], [36978, 39893], [29552, 46405]]) == 3\nassert solution.eraseOverlapIntervals([[-9013, -7555], [27066, 37632]]) == 0\nassert solution.eraseOverlapIntervals([[-47589, -19093], [1617, 9761], [-29137, 23173], [15230, 30603], [24568, 30730], [46127, 47658], [43316, 49477]]) == 3\nassert solution.eraseOverlapIntervals([[-46373, -38805], [1135, 1469], [-24093, 21889], [27459, 35833], [-10791, 36299], [-9239, 38892], [28287, 45239], [38235, 47857]]) == 4\nassert solution.eraseOverlapIntervals([[-24612, -24267], [-44382, -14166], [7995, 8258], [14331, 16814], [37836, 45237]]) == 1\nassert solution.eraseOverlapIntervals([[-22872, -21692], [-11601, -7064], [8761, 33904], [21623, 39338], [-33546, 46317]]) == 2\nassert solution.eraseOverlapIntervals([[-47060, 19221], [-5633, 25913]]) == 1\nassert solution.eraseOverlapIntervals([[-11776, 10801], [16847, 30499]]) == 0\nassert solution.eraseOverlapIntervals([[-7538, -1975], [-5317, 5843], [-9365, 12926], [-12253, 24551], [-26248, 27183], [6275, 32672], [17828, 39742], [15468, 40023], [43255, 44542], [46014, 47324]]) == 6\nassert solution.eraseOverlapIntervals([[-15442, 34037], [15764, 36371], [46786, 49991]]) == 1\nassert solution.eraseOverlapIntervals([[-33686, -25559], [-43780, -22666], [-36393, 13099], [-48707, 15225], [6202, 47125], [-3882, 47641]]) == 4\nassert solution.eraseOverlapIntervals([[-48924, -19447], [-2824, 14538], [25194, 36522], [-17412, 47812], [49492, 49539]]) == 1\nassert solution.eraseOverlapIntervals([[-2438, 706], [-20491, 1514], [-19773, 3182], [-47565, 6373], [-6258, 24457], [-17514, 29461], [26884, 30761], [30620, 42241]]) == 6\nassert solution.eraseOverlapIntervals([[-6226, -160], [26426, 36928]]) == 0\nassert solution.eraseOverlapIntervals([[-18333, -4441], [-11611, 13504], [-29471, 19794], [-47232, 24967], [12889, 34109], [33424, 39572], [41105, 48971]]) == 4\nassert solution.eraseOverlapIntervals([[-24717, 10010], [-966, 12894], [-2975, 15918], [25276, 28057], [12736, 29645], [19564, 32956], [7923, 38236], [36936, 43099], [16152, 47366]]) == 6\nassert solution.eraseOverlapIntervals([[-23288, -22463], [-32052, 7176]]) == 1\nassert solution.eraseOverlapIntervals([[39442, 45910], [-8735, 48986]]) == 1",
  "inefficient_solution": "class Solution:\n    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:\n        # Create a dictionary to store the end times of non-overlapping intervals\n        end_times = {}\n        for s, e in intervals:\n            # Try to find a non-overlapping interval with the same start time\n            for i in range(len(intervals)):\n                if intervals[i][0] == s and i != intervals.index([s, e]):\n                    # If found, add the end time to the dictionary\n                    end_times[intervals[i][1]] = True\n            # Add the current interval's end time to the dictionary\n            end_times[e] = True\n\n        # Initialize the count of overlapping intervals\n        count = 0\n\n        # Iterate over the intervals again to count the number of overlapping intervals\n        for s, e in intervals:\n            # Check if the current interval overlaps with any non-overlapping interval\n            if s >= list(end_times.keys())[list(end_times.values()).index(True)]:\n                # If it does, increment the count\n                count += 1\n\n        # Return the count of overlapping intervals\n        return count",
  "is_python": true
}