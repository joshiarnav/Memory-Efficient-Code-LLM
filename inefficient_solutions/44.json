{
  "problem_idx": 44,
  "task_name": "Wildcard Matching",
  "markdown_description": "\nGiven an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:\n\n\n* `'?'` Matches any single character.\n* `'*'` Matches any sequence of characters (including the empty sequence).\n\n\nThe matching should cover the **entire** input string (not partial).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aa\", p = \"a\"\n**Output:** false\n**Explanation:** \"a\" does not match the entire string \"aa\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"aa\", p = \"*\"\n**Output:** true\n**Explanation:**\u00a0'*' matches any sequence.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"cb\", p = \"?a\"\n**Output:** false\n**Explanation:**\u00a0'?' matches 'c', but the second letter is 'a', which does not match 'b'.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= s.length, p.length <= 2000`\n* `s` contains only lowercase English letters.\n* `p` contains only lowercase English letters, `'?'` or `'*'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for j in range(1, n + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 1]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == p[j - 1] or p[j - 1] == '?':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n        return dp[m][n]\n",
  "test_case_generator": "\nimport random\n\n# Test case generator\nclass Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        m, n = len(s), len(p)\n        dp = [[False] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = True\n        for j in range(1, n + 1):\n            if p[j - 1] == '*':\n                dp[0][j] = dp[0][j - 1]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s[i - 1] == p[j - 1] or p[j - 1] == '?':\n                    dp[i][j] = dp[i - 1][j - 1]\n                elif p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n        return dp[m][n]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random input string\n    s_length = random.randint(0, 10)\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(s_length))\n    \n    # Generate random pattern\n    p_length = random.randint(0, 10)\n    p = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz?*') for _ in range(p_length))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isMatch(s, p)\n\n    return s, p, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, p, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isMatch(s, p) == expected_result\n        print(f\"assert solution.isMatch('{s}', '{p}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isMatch('{s}', '{p}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isMatch('glqoboilgm', '*zxmbgclk?') == False\nassert solution.isMatch('dbejmku', 'nsqsrthmm') == False\nassert solution.isMatch('wiu', 'zqosvkd') == False\nassert solution.isMatch('nxm', 'g*uen*yhlf') == False\nassert solution.isMatch('aatvjfjypr', 'yzon') == False\nassert solution.isMatch('hn', 'pbszl') == False\nassert solution.isMatch('', 'mwgftzk') == False\nassert solution.isMatch('', 'j') == False\nassert solution.isMatch('bvvu', 'pq') == False\nassert solution.isMatch('tntpvuc', 'ofp') == False\nassert solution.isMatch('yombpvdga', '') == False\nassert solution.isMatch('pck', 'tfy') == False\nassert solution.isMatch('wu', 'flky?ku') == False\nassert solution.isMatch('tiwmflztu', '') == False\nassert solution.isMatch('gzf', 'zmcdrgub') == False\nassert solution.isMatch('zvpn', 'apm*rlzls') == False\nassert solution.isMatch('v', 'bxvvfmhi') == False\nassert solution.isMatch('quripsushf', '?anrxx?rzt') == False\nassert solution.isMatch('ajsbadaz', 'cd*xpyc') == False\nassert solution.isMatch('at', 'gyagj') == False\nassert solution.isMatch('xh', 'ywouud') == False\nassert solution.isMatch('', 'heabt*o') == False\nassert solution.isMatch('tagqirv', 'r') == False\nassert solution.isMatch('xwswwc', 'n') == False\nassert solution.isMatch('dntgqaxiy', 'xthy') == False\nassert solution.isMatch('', 'z*?dyl??h') == False\nassert solution.isMatch('vuubt', 'hmvcyq') == False\nassert solution.isMatch('hzpmpnts', 'gdmqvc') == False\nassert solution.isMatch('qlnryoasm', 'ojybjc') == False\nassert solution.isMatch('', 'igl') == False\nassert solution.isMatch('qmanxflqa', 'qz*ak') == False\nassert solution.isMatch('gwnsi', 'bh') == False\nassert solution.isMatch('vtsx', 's') == False\nassert solution.isMatch('elka', 'oyqwsya?nc') == False\nassert solution.isMatch('aywph', 'hvjco*ooj') == False\nassert solution.isMatch('lhhqfyleof', 'jserusl') == False\nassert solution.isMatch('gxxq', 't') == False\nassert solution.isMatch('ltic', 'po') == False\nassert solution.isMatch('mmy', 'iednsof') == False\nassert solution.isMatch('isa', 'rh') == False\nassert solution.isMatch('xded', 'ajeydqvsw') == False\nassert solution.isMatch('', 'ka?hxpi') == False\nassert solution.isMatch('zkvs', 'bijz') == False\nassert solution.isMatch('sab', '*w') == False\nassert solution.isMatch('abuzmjce', 'da?nylbzw') == False\nassert solution.isMatch('giexqyfzrz', '') == False\nassert solution.isMatch('yelyefnvz', 'lbd') == False\nassert solution.isMatch('rxjmzn', 'fuptqfz') == False\nassert solution.isMatch('elxdyl', 'skf') == False\nassert solution.isMatch('vacs', 'lt*tkqbbi') == False\nassert solution.isMatch('iopjugxeg', 'nicgiiuu') == False\nassert solution.isMatch('bpuats', 'yqtqrxwx') == False\nassert solution.isMatch('wux', 'bzbjsvg') == False\nassert solution.isMatch('peiqscq', 'somg?fygyy') == False\nassert solution.isMatch('xbgvb', 'xdo*w') == False\nassert solution.isMatch('', 'tvsk') == False\nassert solution.isMatch('fw', 'xbodjk?gu') == False\nassert solution.isMatch('drxglpztn', 'ek') == False\nassert solution.isMatch('oasafmqzbe', 'w') == False\nassert solution.isMatch('iifmrfmwhk', 'ititc?pih') == False\nassert solution.isMatch('miphzxiu', '') == False\nassert solution.isMatch('t', 'rjvaatluzq') == False\nassert solution.isMatch('xdypmetoa', 'pkvztsq') == False\nassert solution.isMatch('jezmohr', 'niy') == False\nassert solution.isMatch('wvy', 'tdacmjej') == False\nassert solution.isMatch('iagppvu', 'bfjdig') == False\nassert solution.isMatch('w', 'ylpb') == False\nassert solution.isMatch('ibz', 'lplb?jnjb') == False\nassert solution.isMatch('', 'rh*rai') == False\nassert solution.isMatch('dmvx', 'bomgkfqvq') == False\nassert solution.isMatch('wyrtgpnooh', '?xpxcipge?') == False\nassert solution.isMatch('vwbcphmqc', 'jstiys') == False\nassert solution.isMatch('', 'd?nvguvn') == False\nassert solution.isMatch('', 'tghbtjggt?') == False\nassert solution.isMatch('vii', 'ktd') == False\nassert solution.isMatch('', 'w') == False\nassert solution.isMatch('yfnqjmn', 'fky') == False\nassert solution.isMatch('mnzyfjfr', 'cbrj*ontw') == False\nassert solution.isMatch('doqxgde', 'qxkxzqko') == False\nassert solution.isMatch('bokggceiz', 'gjwhobq*wx') == False\nassert solution.isMatch('semps', 'lkno') == False\nassert solution.isMatch('wrudqho', 'd') == False\nassert solution.isMatch('mfqkzeq', 'xk') == False\nassert solution.isMatch('wcy', 'thmg') == False\nassert solution.isMatch('cpnfk', 'f*gujidvz') == False\nassert solution.isMatch('cxzglh', 'j') == False\nassert solution.isMatch('bdrfvh', 'bllzmmwjkm') == False\nassert solution.isMatch('kepgbho', 'xwwwdde') == False\nassert solution.isMatch('sdeuxn', 'f') == False\nassert solution.isMatch('amtyuiiz', 'hqbeg') == False\nassert solution.isMatch('mlqm', 'k*trsvsp') == False\nassert solution.isMatch('bzjpw', 'zpoahkjcp') == False\nassert solution.isMatch('ixnxxwskfc', 'wfhmzgkr') == False\nassert solution.isMatch('deslfhyaf', 'czfphiqxn') == False\nassert solution.isMatch('xbinzrjol', 'jhrgit') == False\nassert solution.isMatch('nnmemht', '?t') == False\nassert solution.isMatch('wc', 'jr') == False\nassert solution.isMatch('bvpkm', 'cpsrhmsioi') == False\nassert solution.isMatch('vbavikffbu', 'sd*') == False\nassert solution.isMatch('rzv', 'hfvhzxdbx') == False",
  "inefficient_solution": "class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        m, n = len(s), len(p)\n        dp = [[False] * n for _ in range(m)]\n        for j in range(n):\n            dp[0][j] = j > 0 and p[j-1] == '*'\n        for i in range(m):\n            for j in range(n):\n                if s[i] == p[j] or p[j] == '?':\n                    dp[i][j] = dp[i-1][j-1]\n                elif p[j] == '*':\n                    dp[i][j] = dp[i][j-1] or dp[i-1][j] or (i > 0 and j > 0 and s[i-1] == p[j-1])\n        dpc = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dpc[i][j] = dp[i][j]\n        dpp = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dpp[i][j] = dp[i][j]\n        dp2 = [[False] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                dp2[i][j] = dp[i][j]\n        return dp[m-1][n-1]",
  "is_python": true
}