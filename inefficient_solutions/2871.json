{
  "problem_idx": 2871,
  "task_name": "Split Array Into Maximum Number of Subarrays",
  "markdown_description": "\nYou are given an array `nums` consisting of **non-negative** integers.\n\n\nWe define the score of subarray `nums[l..r]` such that `l <= r` as `nums[l] AND nums[l + 1] AND ... AND nums[r]` where **AND** is the bitwise `AND` operation.\n\n\nConsider splitting the array into one or more subarrays such that the following conditions are satisfied:\n\n\n* **E****ach** element of the array belongs to **exactly** one subarray.\n* The sum of scores of the subarrays is the **minimum** possible.\n\n\nReturn *the **maximum** number of subarrays in a split that satisfies the conditions above.*\n\n\nA **subarray** is a contiguous part of an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,0,2,0,1,2]\n**Output:** 3\n**Explanation:** We can split the array into the following subarrays:\n- [1,0]. The score of this subarray is 1 AND 0 = 0.\n- [2,0]. The score of this subarray is 2 AND 0 = 0.\n- [1,2]. The score of this subarray is 1 AND 2 = 0.\nThe sum of scores is 0 + 0 + 0 = 0, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 3 subarrays with a total score of 0. So we return 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,7,1,3]\n**Output:** 1\n**Explanation:** We can split the array into one subarray: [5,7,1,3] with a score of 1, which is the minimum possible score that we can obtain.\nIt can be shown that we cannot split the array into more than 1 subarray with a total score of 1. So we return 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxSubarrays(self, nums: List[int]) -> int:\n        score, ans = -1, 1\n        for num in nums:\n            score &= num\n            if score == 0:\n                score = -1\n                ans += 1\n        return 1 if ans == 1 else ans - 1\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxSubarrays(self, nums: List[int]) -> int:\n        score, ans = -1, 1\n        for num in nums:\n            score &= num\n            if score == 0:\n                score = -1\n                ans += 1\n        return 1 if ans == 1 else ans - 1\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.choices(range(10**6), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxSubarrays(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxSubarrays(nums) == expected_result\n        print(f\"assert solution.maxSubarrays({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxSubarrays({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxSubarrays([762133, 26076, 868051, 281921]) == 1\nassert solution.maxSubarrays([778713, 13133, 296218, 989161, 545578, 879125, 951743, 170849, 586307, 82615]) == 1\nassert solution.maxSubarrays([271131, 708986, 340792]) == 1\nassert solution.maxSubarrays([589358, 69400, 13916, 679016, 201086, 772933, 927433, 596326, 503254, 16964]) == 1\nassert solution.maxSubarrays([499251]) == 1\nassert solution.maxSubarrays([884928, 817802, 847623, 535451, 123617]) == 1\nassert solution.maxSubarrays([65954, 498584, 109624, 92899, 941004, 321568, 218138, 759479]) == 2\nassert solution.maxSubarrays([622726]) == 1\nassert solution.maxSubarrays([758632, 805092]) == 1\nassert solution.maxSubarrays([878489, 638174, 945708, 700751, 432325, 515850, 460519, 400617, 218057]) == 1\nassert solution.maxSubarrays([193859, 497951, 487053, 232578, 618081, 547491, 128772, 194422, 366475]) == 1\nassert solution.maxSubarrays([223943, 650139, 659229, 14151]) == 1\nassert solution.maxSubarrays([429804, 323601, 335799]) == 1\nassert solution.maxSubarrays([167214, 530226, 218835, 313574, 210829, 605382, 156766, 60927]) == 1\nassert solution.maxSubarrays([528888, 990688, 110336, 694785, 75323, 857266]) == 1\nassert solution.maxSubarrays([951303, 778228, 215475, 915678]) == 1\nassert solution.maxSubarrays([383026, 714885, 227156, 893344, 815414, 24766, 417271]) == 1\nassert solution.maxSubarrays([919020, 150797]) == 1\nassert solution.maxSubarrays([505210, 914775, 499346, 287760, 794819]) == 1\nassert solution.maxSubarrays([83507, 760631, 79251, 876650, 463790, 654225, 75423, 510803, 495731]) == 1\nassert solution.maxSubarrays([489138, 155851, 338690, 775723]) == 1\nassert solution.maxSubarrays([837066, 46638, 577620]) == 1\nassert solution.maxSubarrays([965803, 933740, 690987, 762971, 16843]) == 1\nassert solution.maxSubarrays([932273, 77412, 148719, 594008, 511445, 158049, 629230, 291648, 180617]) == 1\nassert solution.maxSubarrays([830770, 965552, 709507, 795026, 771235, 6365, 150040]) == 1\nassert solution.maxSubarrays([106807, 571274, 153095, 819667, 25230, 303453, 964119]) == 1\nassert solution.maxSubarrays([493574, 963015, 854655, 854791, 524000, 722106, 483158]) == 1\nassert solution.maxSubarrays([790348, 427824, 399492, 349092, 295191, 357424, 339128]) == 1\nassert solution.maxSubarrays([358827, 545062, 430135, 976446, 647818, 454295, 838851]) == 1\nassert solution.maxSubarrays([111726, 789736, 428627, 189435, 386475, 457393]) == 1\nassert solution.maxSubarrays([694005, 764819, 612994, 290076, 225800, 763981]) == 1\nassert solution.maxSubarrays([565582, 68771]) == 1\nassert solution.maxSubarrays([563427, 744273, 576984, 946032, 450994]) == 1\nassert solution.maxSubarrays([678879, 778628, 750191, 934560, 203401, 716539]) == 1\nassert solution.maxSubarrays([82765, 406744, 865207, 318216, 866758, 778198, 178744, 186153, 969766, 79141]) == 2\nassert solution.maxSubarrays([753315, 605971, 454631, 277206, 342628, 602566, 663195]) == 1\nassert solution.maxSubarrays([94919, 907098, 822779, 173821, 166039, 432400, 116498, 752741]) == 2\nassert solution.maxSubarrays([11292, 64924, 269300, 912187, 816117]) == 1\nassert solution.maxSubarrays([991712, 943852, 128434, 167720]) == 1\nassert solution.maxSubarrays([398154, 723418, 822031, 865020, 556521, 939723, 548955, 49792]) == 1\nassert solution.maxSubarrays([782371, 476490, 504172, 259940, 724277]) == 1\nassert solution.maxSubarrays([418261, 945035, 880874]) == 1\nassert solution.maxSubarrays([360174, 480459, 707376, 934965, 539502]) == 1\nassert solution.maxSubarrays([240308]) == 1\nassert solution.maxSubarrays([437558, 154820]) == 1\nassert solution.maxSubarrays([577544, 500816]) == 1\nassert solution.maxSubarrays([542608, 732848, 94522, 253973, 108767]) == 1\nassert solution.maxSubarrays([448629, 616660, 764327]) == 1\nassert solution.maxSubarrays([591684, 729101]) == 1\nassert solution.maxSubarrays([947851]) == 1\nassert solution.maxSubarrays([552007]) == 1\nassert solution.maxSubarrays([290210, 738359, 746151, 630036, 33115, 352322, 87295]) == 1\nassert solution.maxSubarrays([257811, 601907]) == 1\nassert solution.maxSubarrays([275399, 97939, 280890, 169806, 213097, 270959, 359830, 954269, 793630]) == 1\nassert solution.maxSubarrays([593637, 998270, 271512, 586745, 554868, 763323]) == 1\nassert solution.maxSubarrays([871850, 14549, 869836, 825944, 619324, 506059, 516710, 251714, 446293]) == 2\nassert solution.maxSubarrays([912124, 149007, 369870, 332975, 119446, 826726, 655284]) == 1\nassert solution.maxSubarrays([705604, 830148, 867360, 673934, 760420, 966173, 841490]) == 1\nassert solution.maxSubarrays([357821, 434001, 928167, 299598, 703740]) == 1\nassert solution.maxSubarrays([21964, 159175, 583399, 852939, 174127]) == 1\nassert solution.maxSubarrays([432646, 492977, 508926, 97605, 794765, 223199, 377108]) == 1\nassert solution.maxSubarrays([946685, 124823, 717708, 711635, 920277, 545126, 291170, 979483, 403190]) == 1\nassert solution.maxSubarrays([491508, 900666, 18771, 130377, 271207]) == 1\nassert solution.maxSubarrays([554853, 71769, 882064]) == 1\nassert solution.maxSubarrays([545089, 77040]) == 1\nassert solution.maxSubarrays([777498, 560519, 677774]) == 1\nassert solution.maxSubarrays([555632, 893978, 198750, 578480, 447212]) == 1\nassert solution.maxSubarrays([77524, 482086, 639312, 153521]) == 1\nassert solution.maxSubarrays([701837, 801746, 967242, 916050]) == 1\nassert solution.maxSubarrays([94996, 11064, 330628, 997300]) == 1\nassert solution.maxSubarrays([913520, 848589, 895260, 373825, 489341]) == 1\nassert solution.maxSubarrays([820219, 757072, 664009, 99709]) == 1\nassert solution.maxSubarrays([325024, 750793, 782374, 418699, 572695]) == 1\nassert solution.maxSubarrays([752214, 89105, 262737, 756027, 459243, 427205, 823339, 403382, 940781]) == 1\nassert solution.maxSubarrays([286206, 666792, 62514, 680542, 683310, 927986]) == 1\nassert solution.maxSubarrays([970871, 77606, 284784, 374504, 807489, 736409, 434259, 275920, 421583]) == 1\nassert solution.maxSubarrays([828407, 57510, 187400, 13383, 552336, 607410, 958497, 720908]) == 1\nassert solution.maxSubarrays([621952, 121319, 90568, 684832, 219380, 619711, 962666, 285652, 937590, 122293]) == 1\nassert solution.maxSubarrays([890290, 96694, 911312, 497303, 289987, 629800, 429536, 525948]) == 1\nassert solution.maxSubarrays([84787, 106712, 144699, 435949, 47786, 836450]) == 1\nassert solution.maxSubarrays([104937, 40584, 64141, 452047, 336087, 755399, 454834, 307155]) == 1\nassert solution.maxSubarrays([413581, 202234, 700153, 82419, 408619, 798033, 997341, 460756, 508318]) == 1\nassert solution.maxSubarrays([623383, 874902, 872303, 875691, 745772, 303546, 906519, 99253, 449637, 678131]) == 1\nassert solution.maxSubarrays([400942, 558347, 572436, 42477, 125558, 278379, 235036, 507001, 242969, 679538]) == 1\nassert solution.maxSubarrays([65969]) == 1\nassert solution.maxSubarrays([884349, 447610, 618524, 934576, 773262]) == 1\nassert solution.maxSubarrays([478601, 453806, 523198, 852511, 423936, 919163, 703855, 785978, 349360, 829691]) == 1\nassert solution.maxSubarrays([368221, 382881, 474696, 353941, 12512, 382602, 508806, 22127, 98405, 477013]) == 2\nassert solution.maxSubarrays([369445, 625135, 304265, 299860]) == 1\nassert solution.maxSubarrays([677082, 5201]) == 1\nassert solution.maxSubarrays([133949, 532188, 64680]) == 1\nassert solution.maxSubarrays([71342, 234502, 771570, 432622, 410060, 664394, 922166, 703828]) == 1\nassert solution.maxSubarrays([844645, 978801, 500545, 992140]) == 1\nassert solution.maxSubarrays([64656, 329853, 668451, 29192, 30220, 345005]) == 1\nassert solution.maxSubarrays([308488, 775535, 175963, 64142, 698840, 579990, 470940]) == 1\nassert solution.maxSubarrays([969501]) == 1\nassert solution.maxSubarrays([844041, 982947, 557983]) == 1\nassert solution.maxSubarrays([630154, 693502, 384655, 74241, 927752, 607327]) == 1\nassert solution.maxSubarrays([405088, 148666, 965692, 231125, 196877, 129917, 68039, 834617, 620049, 540090]) == 2\nassert solution.maxSubarrays([438761, 160917, 226273, 340150, 908454, 547357]) == 1",
  "inefficient_solution": "class Solution:\n    def maxSubarrays(self, nums):\n        # Initialize a dictionary to store the score of each subarray\n        scores = {}\n        # Initialize a variable to store the maximum score\n        max_score = 0\n        # Initialize a variable to store the number of subarrays\n        num_subarrays = 0\n        # Initialize a variable to store the current score\n        current_score = -1\n        # Iterate over each number in the array\n        for num in nums:\n            # Calculate the current score by performing a bitwise AND operation\n            current_score = current_score & num\n            # If the current score is 0, reset it and increment the number of subarrays\n            if current_score == 0:\n                current_score = -1\n                num_subarrays += 1\n        # If there's only one subarray, return 1\n        if num_subarrays == 1:\n            return 1\n        # Otherwise, return the number of subarrays minus 1\n        else:\n            return num_subarrays - 1",
  "is_python": true
}