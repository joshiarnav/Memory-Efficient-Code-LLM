{
  "problem_idx": 357,
  "task_name": "Count Numbers with Unique Digits",
  "markdown_description": "\nGiven an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 91\n**Explanation:** The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 0\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n <= 8`\n\n\n",
  "canonical_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        ans, cur = 10, 9\n        for i in range(n - 1):\n            cur *= 9 - i\n            ans += cur\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        ans, cur = 10, 9\n        for i in range(n - 1):\n            cur *= 9 - i\n            ans += cur\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random value for n\n    n = random.randint(0, 8)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countNumbersWithUniqueDigits(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countNumbersWithUniqueDigits(n) == expected_result\n        print(f\"assert solution.countNumbersWithUniqueDigits({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countNumbersWithUniqueDigits({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(4) == 5275\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(4) == 5275\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(0) == 1\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(4) == 5275\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(0) == 1\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(1) == 10\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(4) == 5275\nassert solution.countNumbersWithUniqueDigits(1) == 10\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(1) == 10\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(0) == 1\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(4) == 5275\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(1) == 10\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(1) == 10\nassert solution.countNumbersWithUniqueDigits(1) == 10\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(1) == 10\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(0) == 1\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(4) == 5275\nassert solution.countNumbersWithUniqueDigits(0) == 1\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(5) == 32491\nassert solution.countNumbersWithUniqueDigits(0) == 1\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(6) == 168571\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(8) == 2345851\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(7) == 712891\nassert solution.countNumbersWithUniqueDigits(0) == 1\nassert solution.countNumbersWithUniqueDigits(3) == 739\nassert solution.countNumbersWithUniqueDigits(0) == 1\nassert solution.countNumbersWithUniqueDigits(2) == 91\nassert solution.countNumbersWithUniqueDigits(2) == 91",
  "inefficient_solution": "class Solution:\n    def countNumbersWithUniqueDigits(self, n: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return 10\n        ans = []\n        for i in range(n + 1):\n            cur_list = []\n            for j in range(10**i):\n                num_str = str(j)\n                if len(num_str) == i:\n                    valid = True\n                    for char in num_str:\n                        if char in num_str[:i-1]:\n                            valid = False\n                            break\n                    if valid:\n                        cur_list.append(num_str)\n            ans.append(len(cur_list))\n        return sum(ans)",
  "is_python": true
}