{
  "problem_idx": 718,
  "task_name": "Maximum Length of Repeated Subarray",
  "markdown_description": "\nGiven two integer arrays `nums1` and `nums2`, return *the maximum length of a subarray that appears in **both** arrays*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n**Output:** 3\n**Explanation:** The repeated subarray with maximum length is [3,2,1].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\n**Output:** 5\n**Explanation:** The repeated subarray with maximum length is [0,0,0,0,0].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 1000`\n* `0 <= nums1[i], nums2[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                    ans = max(ans, f[i][j])\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findLength(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        f = [[0] * (n + 1) for _ in range(m + 1)]\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    f[i][j] = f[i - 1][j - 1] + 1\n                    ans = max(ans, f[i][j])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums1 = random.sample(range(1, 101), random.randint(1, 11))\n    nums2 = random.sample(range(1, 101), random.randint(1, 11))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findLength(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findLength(nums1, nums2) == expected_result\n        print(f\"assert solution.findLength({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findLength({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findLength([26, 31, 73, 80], [66, 23, 60, 49, 40, 21, 26]) == 1\nassert solution.findLength([8, 34, 87, 6, 76, 1, 83, 77, 69, 39], [15, 93, 24, 81, 72]) == 0\nassert solution.findLength([33, 86, 52, 21], [30, 48, 92, 10, 68, 38, 91]) == 0\nassert solution.findLength([35, 16, 36, 55], [25, 23, 77]) == 0\nassert solution.findLength([93, 31, 80], [14, 84, 57, 62, 43, 95, 36]) == 0\nassert solution.findLength([50, 41, 45, 95, 63], [59, 20, 48, 55, 62, 72, 82, 96, 53, 91]) == 0\nassert solution.findLength([78, 9, 67, 20, 25], [89, 27, 97, 61, 31]) == 0\nassert solution.findLength([16, 4, 86, 12, 53, 66, 18, 95, 30], [87, 66, 18]) == 2\nassert solution.findLength([26, 57, 14, 91, 53, 75, 22, 31, 98, 82, 99], [75, 17, 26, 43, 50, 54]) == 1\nassert solution.findLength([13, 61, 76, 95, 25], [88, 61, 54, 78, 2, 48, 96, 7]) == 1\nassert solution.findLength([43, 11, 51], [44, 69, 8, 67, 46]) == 0\nassert solution.findLength([45, 81, 66, 94, 73], [44, 82, 54, 27]) == 0\nassert solution.findLength([59], [41, 89, 35, 16, 48]) == 0\nassert solution.findLength([54, 91, 5, 35, 77, 46], [92, 91, 34, 14, 7, 55, 21, 17, 71]) == 1\nassert solution.findLength([80, 45], [21, 52, 68, 27]) == 0\nassert solution.findLength([86], [26, 100, 48, 4, 15, 79, 69, 78]) == 0\nassert solution.findLength([52, 63, 27, 1], [5, 37, 35, 75, 18, 39, 54, 80]) == 0\nassert solution.findLength([81, 41, 27, 86, 62], [78, 27, 15]) == 1\nassert solution.findLength([54, 57, 32, 39, 60, 89, 41, 80, 26, 87, 74], [25, 84, 7, 48, 18, 67]) == 0\nassert solution.findLength([49, 100, 99, 54, 10], [30, 21, 23, 33, 37, 25, 65, 24, 15, 51]) == 0\nassert solution.findLength([47, 22, 23, 12, 5, 61, 35, 43, 49, 78, 93], [75, 9]) == 0\nassert solution.findLength([63, 10, 13], [48, 13]) == 1\nassert solution.findLength([4], [78, 31, 3, 43, 99, 82, 61, 100]) == 0\nassert solution.findLength([42, 31, 69, 52, 5, 87, 25], [17, 72, 4, 39, 87, 50, 18, 30, 64, 3]) == 1\nassert solution.findLength([3, 49, 65, 98, 4, 52], [59, 90]) == 0\nassert solution.findLength([74, 41], [2, 97, 100]) == 0\nassert solution.findLength([65, 24, 9, 49, 16, 61], [20, 17, 27, 41, 95]) == 0\nassert solution.findLength([69, 91, 2, 35, 25, 59, 20, 42], [94, 80, 61, 86, 35, 72, 87, 11, 2]) == 1\nassert solution.findLength([31, 100, 84, 37], [40, 24, 4, 50]) == 0\nassert solution.findLength([21, 74, 76, 62, 38, 98], [92, 39, 84, 97, 16, 95, 71, 58, 21]) == 1\nassert solution.findLength([70, 14], [34, 41, 2, 72, 20]) == 0\nassert solution.findLength([79, 100, 23], [86, 98, 78, 93, 87, 22, 6]) == 0\nassert solution.findLength([9, 47, 38], [13, 12, 57, 75, 71, 9, 31, 51, 16, 28]) == 1\nassert solution.findLength([65, 95, 9], [76, 11, 86, 3, 98, 74, 23, 59, 90, 37]) == 0\nassert solution.findLength([26, 45, 83, 5, 7], [88, 36, 89, 68]) == 0\nassert solution.findLength([31, 55, 85], [23, 92, 44, 33, 65, 79, 22, 61, 37, 11]) == 0\nassert solution.findLength([26, 74, 77, 57, 80], [2, 78, 35, 83, 26]) == 1\nassert solution.findLength([6, 65, 13, 83, 93, 3, 86, 11, 59, 66, 5], [64, 81, 5, 44, 67, 51, 27, 11]) == 1\nassert solution.findLength([19, 65, 48, 100, 85, 94, 26, 23, 90, 42, 41], [79, 87]) == 0\nassert solution.findLength([80, 86, 3, 83, 88, 69, 95, 87, 59], [73, 97, 46, 6, 32, 43]) == 0\nassert solution.findLength([47, 7, 37, 59], [80, 24, 26, 53, 94, 29, 55, 14, 25, 18]) == 0\nassert solution.findLength([67], [17, 15]) == 0\nassert solution.findLength([13, 69, 1, 96, 81, 95, 99], [1, 10, 25, 33, 31, 64, 2, 89, 86, 52]) == 1\nassert solution.findLength([40, 9, 60, 63, 5, 86], [64, 38, 99, 84, 91, 82, 48, 13]) == 0\nassert solution.findLength([92], [98, 89, 61, 93, 67, 49]) == 0\nassert solution.findLength([52, 71, 20, 70, 53, 8, 72], [16, 94, 11, 76, 63, 96, 75, 72, 99]) == 1\nassert solution.findLength([71, 72, 79, 83, 32, 12, 86, 33, 49], [33, 97]) == 1\nassert solution.findLength([70, 38, 33, 46], [32, 49, 31]) == 0\nassert solution.findLength([26, 71, 59, 38, 11], [55, 88, 64, 2]) == 0\nassert solution.findLength([27, 25, 12, 48, 4, 43, 64, 45, 76, 30, 35], [39, 96]) == 0\nassert solution.findLength([32, 81, 15, 75, 80, 18, 90, 63, 96], [52, 79, 87, 10, 47, 85, 99, 61]) == 0\nassert solution.findLength([1, 65], [48, 92, 95, 71, 47, 62, 50]) == 0\nassert solution.findLength([61, 27, 80, 82], [32, 49, 10, 89, 4, 13, 100]) == 0\nassert solution.findLength([41, 86, 70], [98, 52]) == 0\nassert solution.findLength([80, 61, 16, 64, 14, 75, 24, 31], [12, 81, 56, 58]) == 0\nassert solution.findLength([4, 100, 27, 22, 56, 33, 72, 73], [46]) == 0\nassert solution.findLength([40, 20, 79, 78, 83, 24, 37, 15, 13, 26], [80, 55, 91, 19, 61, 98, 94]) == 0\nassert solution.findLength([81, 9, 49, 17], [67, 37, 46]) == 0\nassert solution.findLength([66, 17, 35, 74, 70, 65, 57], [51, 49, 34, 22, 83, 28, 18, 95, 85]) == 0\nassert solution.findLength([50, 12, 2, 34], [69, 83, 74, 3, 6, 45, 2, 99, 95, 64, 54]) == 1\nassert solution.findLength([9, 78, 28, 66, 30], [64, 80, 9, 87, 42, 33, 74, 54, 88, 61, 91]) == 1\nassert solution.findLength([85, 81, 83, 38, 47, 59], [65, 55, 67, 18, 64, 72, 41, 63, 10, 4]) == 0\nassert solution.findLength([23, 71, 51, 67, 77, 45], [54, 39, 60, 75, 24, 49, 12, 34]) == 0\nassert solution.findLength([16, 45, 89, 68, 94, 97, 48, 59, 87, 25, 5], [75, 37, 74, 84]) == 0\nassert solution.findLength([64, 98, 75, 68, 86, 60, 72, 46, 43], [70]) == 0\nassert solution.findLength([94, 64, 26, 6, 3, 46, 83, 35], [34, 49, 11, 38, 7, 88]) == 0\nassert solution.findLength([30, 26, 27, 65, 91, 89], [54, 82, 89, 59, 96, 33, 6, 94, 55]) == 1\nassert solution.findLength([6, 8, 99, 49, 71], [85, 93, 1, 97, 81, 71, 29, 64, 45]) == 1\nassert solution.findLength([27, 7, 22, 39, 12, 96, 91, 48], [76, 82, 5, 36, 22, 70, 44, 78, 89]) == 1\nassert solution.findLength([97, 46, 17], [43, 88, 61, 5, 14]) == 0\nassert solution.findLength([62, 54, 73, 28], [69, 92, 45, 83, 93, 29, 77, 85, 9]) == 0\nassert solution.findLength([9, 71, 72, 15, 69, 2, 21, 92, 70, 57], [94, 65, 61, 14, 29, 30, 47]) == 0\nassert solution.findLength([10, 53, 72, 7, 98, 96, 45, 59, 25, 52, 37], [29, 88, 91, 30, 68, 11, 100, 93]) == 0\nassert solution.findLength([79, 67, 1, 20, 86, 54, 99], [33, 66, 36, 61, 49, 56, 9]) == 0\nassert solution.findLength([11, 75, 27, 1, 3, 79, 56], [10, 39]) == 0\nassert solution.findLength([83, 3, 88, 28, 40, 43, 6, 17], [32, 80, 8, 91]) == 0\nassert solution.findLength([83], [67, 95, 24, 32, 89, 56, 70, 63, 72]) == 0\nassert solution.findLength([4, 45, 34], [11, 75, 21]) == 0\nassert solution.findLength([43], [87, 84]) == 0\nassert solution.findLength([49, 78, 40], [4, 51, 47, 57, 41, 17]) == 0\nassert solution.findLength([61, 45, 27, 53, 49, 32, 52, 85], [48, 86, 38, 100, 23, 31]) == 0\nassert solution.findLength([60, 40, 98], [38, 82, 19, 20, 95, 74, 85, 98, 14, 69]) == 1\nassert solution.findLength([93, 66, 92, 12, 53, 61, 76, 2], [6, 32, 61]) == 1\nassert solution.findLength([77, 43, 57, 61, 62, 44, 48, 50, 29, 18], [37, 76]) == 0\nassert solution.findLength([50, 69, 35, 88], [58, 5, 94, 93, 62]) == 0\nassert solution.findLength([63, 69], [76, 15, 87, 38, 37, 6]) == 0\nassert solution.findLength([70, 69], [76, 77, 14, 18, 39, 60, 97, 91, 7]) == 0\nassert solution.findLength([75, 42, 68, 45, 100, 60], [34, 43, 4, 39, 76, 8, 21]) == 0\nassert solution.findLength([25, 38, 61, 98], [51, 40, 54, 63]) == 0\nassert solution.findLength([77, 96, 97, 72, 78], [85, 26, 61, 48, 56, 75, 21, 73, 36, 98]) == 0\nassert solution.findLength([38, 92, 94], [22, 23]) == 0\nassert solution.findLength([56, 71, 48, 94, 73], [73, 19, 47, 61, 95, 21, 38, 23, 96, 14, 50]) == 1\nassert solution.findLength([19, 95, 24, 65, 96, 99, 54, 3, 44, 15, 97], [37, 33]) == 0\nassert solution.findLength([19, 17, 69, 51, 71], [59, 20, 70, 52, 88, 3, 16, 99, 13]) == 0\nassert solution.findLength([62, 30, 88, 12, 100, 27, 59, 53, 80, 28, 61], [56]) == 0\nassert solution.findLength([80, 32, 18], [68, 78, 35, 70, 26, 87, 11]) == 0\nassert solution.findLength([75, 68, 7, 67, 1, 14, 44], [14, 20, 4, 3, 15, 16, 85]) == 1\nassert solution.findLength([48, 66], [90, 52, 15, 70, 1]) == 0\nassert solution.findLength([78, 5, 100, 63, 56, 94], [82, 62, 55, 4, 10, 90, 26, 13, 65]) == 0\nassert solution.findLength([34, 77, 41, 44, 20, 25, 29, 93, 78, 76], [44, 92, 99]) == 1",
  "inefficient_solution": "class Solution:\n    def findLength(self, nums1: List[int], nums2: List[int]) -> int:\n        m, n = len(nums1), len(nums2)\n        f = []\n        for _ in range(m + 1):\n            f.append([])\n            for _ in range(n + 1):\n                f[-1].append(None)\n        ans = 0\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if nums1[i - 1] == nums2[j - 1]:\n                    subarray = []\n                    k = 0\n                    while i - k - 1 >= 0 and j - k - 1 >= 0 and nums1[i - k - 1] == nums2[j - k - 1]:\n                        subarray.append(nums1[i - k - 1])\n                        k += 1\n                    if k > ans:\n                        ans = k\n                        f[i][j] = subarray\n        return ans",
  "is_python": true
}