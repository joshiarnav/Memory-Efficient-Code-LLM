{
  "problem_idx": 1220,
  "task_name": "Count Vowels Permutation",
  "markdown_description": "\nGiven an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:\n\n\n* Each character is a lower case vowel\u00a0(`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n* Each vowel\u00a0`'a'` may only be followed by an `'e'`.\n* Each vowel\u00a0`'e'` may only be followed by an `'a'`\u00a0or an `'i'`.\n* Each vowel\u00a0`'i'` **may not** be followed by another `'i'`.\n* Each vowel\u00a0`'o'` may only be followed by an `'i'` or a\u00a0`'u'`.\n* Each vowel\u00a0`'u'` may only be followed by an `'a'`.\n\n\nSince the answer\u00a0may be too large,\u00a0return it modulo\u00a0`10^9 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 5\n**Explanation:** All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 10\n**Explanation:** All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 5\n**Output:** 68\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 2 * 10^4`\n\n\n",
  "canonical_solution": "import numpy as np\n\n\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        mod = 10**9 + 7\n        factor = np.mat(\n            [\n                (0, 1, 0, 0, 0),\n                (1, 0, 1, 0, 0),\n                (1, 1, 0, 1, 1),\n                (0, 0, 1, 0, 1),\n                (1, 0, 0, 0, 0),\n            ],\n            np.dtype(\"O\"),\n        )\n        res = np.mat([(1, 1, 1, 1, 1)], np.dtype(\"O\"))\n        n -= 1\n        while n:\n            if n & 1:\n                res = res * factor % mod\n            factor = factor * factor % mod\n            n >>= 1\n        return res.sum() % mod\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random n\n    n = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countVowelPermutation(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countVowelPermutation(n) == expected_result\n        print(f\"assert solution.countVowelPermutation({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countVowelPermutation({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(10) == 1739\nassert solution.countVowelPermutation(10) == 1739\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(2) == 10\nassert solution.countVowelPermutation(8) == 474\nassert solution.countVowelPermutation(2) == 10\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(1) == 5\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(10) == 1739\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(1) == 5\nassert solution.countVowelPermutation(2) == 10\nassert solution.countVowelPermutation(4) == 35\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(8) == 474\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(1) == 5\nassert solution.countVowelPermutation(4) == 35\nassert solution.countVowelPermutation(8) == 474\nassert solution.countVowelPermutation(10) == 1739\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(4) == 35\nassert solution.countVowelPermutation(2) == 10\nassert solution.countVowelPermutation(10) == 1739\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(10) == 1739\nassert solution.countVowelPermutation(10) == 1739\nassert solution.countVowelPermutation(1) == 5\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(4) == 35\nassert solution.countVowelPermutation(2) == 10\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(8) == 474\nassert solution.countVowelPermutation(4) == 35\nassert solution.countVowelPermutation(1) == 5\nassert solution.countVowelPermutation(8) == 474\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(10) == 1739\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(4) == 35\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(9) == 911\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(7) == 249\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(8) == 474\nassert solution.countVowelPermutation(6) == 129\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(1) == 5\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(3) == 19\nassert solution.countVowelPermutation(1) == 5\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(4) == 35\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(1) == 5\nassert solution.countVowelPermutation(8) == 474\nassert solution.countVowelPermutation(4) == 35\nassert solution.countVowelPermutation(5) == 68\nassert solution.countVowelPermutation(10) == 1739",
  "inefficient_solution": "import numpy as np\n\nclass Solution:\n    def countVowelPermutation(self, n: int) -> int:\n        mod = 10**9 + 7\n        dp = [[0 for _ in range(5)] for _ in range(n+1)]\n        dp[0] = [1, 1, 1, 1, 1]\n        transitions = [\n            [(0, 1), (1, 2), (2, 3), (3, 4)],\n            [(0, 2), (1, 0), (2, 1)],\n            [(0, 2), (1, 2), (2, 0), (2, 4), (3, 4)],\n            [(2, 3), (3, 4)],\n            [(2, 0)],\n        ]\n        for i in range(1, n+1):\n            for j in range(5):\n                for transition in transitions[j]:\n                    dp[i][j] += dp[i-1][transition[0]]\n                    dp[i][j] %= mod\n        return sum(dp[n]) % mod",
  "is_python": true
}