{
  "problem_idx": 746,
  "task_name": "Min Cost Climbing Stairs",
  "markdown_description": "\nYou are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\n\nYou can either start from the step with index `0`, or the step with index `1`.\n\n\nReturn *the minimum cost to reach the top of the floor*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** cost = [10,15,20]\n**Output:** 15\n**Explanation:** You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cost = [1,100,1,1,1,100,1,1,100,1]\n**Output:** 6\n**Explanation:** You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= cost.length <= 1000`\n* `0 <= cost[i] <= 999`\n\n\n",
  "canonical_solution": "class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        f = g = 0\n        for i in range(2, len(cost) + 1):\n            f, g = g, min(f + cost[i - 2], g + cost[i - 1])\n        return g\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        f = g = 0\n        for i in range(2, len(cost) + 1):\n            f, g = g, min(f + cost[i - 2], g + cost[i - 1])\n        return g\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random cost list\n    cost = random.choices(range(1000), k=random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCostClimbingStairs(cost)\n\n    return cost, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        cost, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCostClimbingStairs(cost) == expected_result\n        print(f\"assert solution.minCostClimbingStairs({cost}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCostClimbingStairs({cost}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minCostClimbingStairs([205, 875, 248, 71, 145, 518, 297, 339]) == 895\nassert solution.minCostClimbingStairs([803, 520, 133, 317, 953]) == 837\nassert solution.minCostClimbingStairs([45, 467, 124, 155, 277, 310, 454, 603]) == 900\nassert solution.minCostClimbingStairs([39, 4, 885, 353]) == 357\nassert solution.minCostClimbingStairs([880, 373, 355, 340, 818]) == 713\nassert solution.minCostClimbingStairs([194, 683, 966]) == 683\nassert solution.minCostClimbingStairs([450, 671, 176, 445, 769, 94, 336, 867, 828, 86]) == 2118\nassert solution.minCostClimbingStairs([197, 979]) == 197\nassert solution.minCostClimbingStairs([223, 732, 668, 644, 353, 376, 794, 497, 350, 227]) == 2344\nassert solution.minCostClimbingStairs([329, 783, 793, 58]) == 841\nassert solution.minCostClimbingStairs([799, 336, 827, 676, 429]) == 1012\nassert solution.minCostClimbingStairs([174, 408, 245, 651, 680]) == 1059\nassert solution.minCostClimbingStairs([697, 516]) == 516\nassert solution.minCostClimbingStairs([713, 545, 190, 634, 181, 834, 872]) == 1750\nassert solution.minCostClimbingStairs([444, 384, 753, 124, 581, 656]) == 1089\nassert solution.minCostClimbingStairs([358, 767]) == 358\nassert solution.minCostClimbingStairs([141, 978, 675, 308, 19]) == 835\nassert solution.minCostClimbingStairs([299, 61, 870, 729, 119, 13]) == 803\nassert solution.minCostClimbingStairs([13, 465, 51, 579, 639, 418, 219, 660]) == 922\nassert solution.minCostClimbingStairs([559, 438, 518, 306, 742, 418, 569]) == 1162\nassert solution.minCostClimbingStairs([756, 608, 93, 103, 278, 345, 14, 35, 509, 941]) == 1502\nassert solution.minCostClimbingStairs([719, 621, 204, 481, 470, 175, 712]) == 1277\nassert solution.minCostClimbingStairs([520, 759, 413, 333, 730, 911, 687, 0, 803, 286]) == 2289\nassert solution.minCostClimbingStairs([20, 707, 487, 844, 646, 846, 925, 192]) == 2078\nassert solution.minCostClimbingStairs([263, 955, 353, 617]) == 616\nassert solution.minCostClimbingStairs([257, 526, 165, 681, 528, 236, 818]) == 1186\nassert solution.minCostClimbingStairs([869, 975, 998]) == 975\nassert solution.minCostClimbingStairs([131, 702, 177, 777, 732]) == 1040\nassert solution.minCostClimbingStairs([795, 143, 132, 952, 850, 265, 5, 129]) == 1130\nassert solution.minCostClimbingStairs([771, 41, 577]) == 41\nassert solution.minCostClimbingStairs([280, 338, 901]) == 338\nassert solution.minCostClimbingStairs([47, 931, 677, 959, 865, 609, 691, 96, 138, 695]) == 2418\nassert solution.minCostClimbingStairs([298, 1, 946]) == 1\nassert solution.minCostClimbingStairs([600, 427, 411, 909, 370, 994, 729]) == 1937\nassert solution.minCostClimbingStairs([971, 873, 68, 988, 684]) == 1625\nassert solution.minCostClimbingStairs([603, 50, 120, 55, 778, 539, 402, 746, 81, 588]) == 1127\nassert solution.minCostClimbingStairs([507, 746, 19, 812, 408, 559, 776, 436]) == 1710\nassert solution.minCostClimbingStairs([355, 816, 558, 81, 696, 812]) == 1593\nassert solution.minCostClimbingStairs([779, 503, 401, 981, 806, 462]) == 1710\nassert solution.minCostClimbingStairs([733, 223, 957, 138, 337, 642, 601, 376, 861, 177]) == 1556\nassert solution.minCostClimbingStairs([863, 311, 660]) == 311\nassert solution.minCostClimbingStairs([540, 573, 737]) == 573\nassert solution.minCostClimbingStairs([203, 787, 585, 166, 705, 369, 812, 145, 557]) == 1467\nassert solution.minCostClimbingStairs([207, 726, 712, 419]) == 919\nassert solution.minCostClimbingStairs([468, 945, 16, 767, 632, 56, 189, 525, 953]) == 1697\nassert solution.minCostClimbingStairs([58, 976, 125, 513, 810]) == 696\nassert solution.minCostClimbingStairs([346, 251, 737, 444, 727, 875, 750, 153]) == 1723\nassert solution.minCostClimbingStairs([824, 70, 301, 190]) == 260\nassert solution.minCostClimbingStairs([592, 743, 350]) == 743\nassert solution.minCostClimbingStairs([43, 598, 650, 317, 657, 888, 475, 855]) == 1825\nassert solution.minCostClimbingStairs([110, 912, 598]) == 708\nassert solution.minCostClimbingStairs([612, 67, 351, 160, 979, 691, 321, 151, 549, 526]) == 1595\nassert solution.minCostClimbingStairs([304, 416, 224, 447, 242]) == 770\nassert solution.minCostClimbingStairs([511, 428, 367, 533, 585, 928, 600]) == 1889\nassert solution.minCostClimbingStairs([408, 444]) == 408\nassert solution.minCostClimbingStairs([962, 0, 640, 565, 35]) == 565\nassert solution.minCostClimbingStairs([909, 344, 368, 955, 617, 79, 301]) == 1378\nassert solution.minCostClimbingStairs([924, 943, 968]) == 943\nassert solution.minCostClimbingStairs([920, 94, 144, 248, 760]) == 342\nassert solution.minCostClimbingStairs([629, 483, 972, 953, 112, 330, 203]) == 1751\nassert solution.minCostClimbingStairs([881, 473, 964]) == 473\nassert solution.minCostClimbingStairs([217, 145, 838, 584, 960, 426, 238, 713, 177]) == 1570\nassert solution.minCostClimbingStairs([30, 201, 239, 74, 837, 156, 615, 25, 435]) == 456\nassert solution.minCostClimbingStairs([280, 727, 464, 394]) == 744\nassert solution.minCostClimbingStairs([436, 493, 650, 556, 19]) == 1049\nassert solution.minCostClimbingStairs([273, 309, 378, 490, 12, 362, 78]) == 741\nassert solution.minCostClimbingStairs([706, 929, 760, 336, 474, 275]) == 1540\nassert solution.minCostClimbingStairs([526, 382]) == 382\nassert solution.minCostClimbingStairs([109, 168]) == 109\nassert solution.minCostClimbingStairs([144, 971, 400, 768, 143, 968, 397, 591, 747]) == 1675\nassert solution.minCostClimbingStairs([781, 103]) == 103\nassert solution.minCostClimbingStairs([971, 293, 219, 413, 347, 491, 147, 856]) == 1006\nassert solution.minCostClimbingStairs([253, 174, 804, 156, 317, 69, 780, 81]) == 480\nassert solution.minCostClimbingStairs([9, 742, 811, 650]) == 820\nassert solution.minCostClimbingStairs([907, 906, 684, 61, 522]) == 967\nassert solution.minCostClimbingStairs([703, 934, 95, 787, 988]) == 1585\nassert solution.minCostClimbingStairs([789, 660, 858, 430, 920, 485, 662, 9, 185]) == 1584\nassert solution.minCostClimbingStairs([668, 745, 108, 414, 961, 245, 120, 364]) == 1524\nassert solution.minCostClimbingStairs([38, 703, 580, 97, 357]) == 715\nassert solution.minCostClimbingStairs([65, 370, 419]) == 370\nassert solution.minCostClimbingStairs([41, 117, 403, 457, 150, 118, 912, 453, 864]) == 1145\nassert solution.minCostClimbingStairs([487, 947, 301, 809, 705, 114, 961, 67, 446]) == 1674\nassert solution.minCostClimbingStairs([933, 772, 929, 453, 366, 26, 202]) == 1251\nassert solution.minCostClimbingStairs([759, 191, 6, 323]) == 197\nassert solution.minCostClimbingStairs([451, 2, 325, 593, 318]) == 595\nassert solution.minCostClimbingStairs([923, 621, 99, 384, 442, 680]) == 1162\nassert solution.minCostClimbingStairs([138, 327, 29, 8, 221, 444, 224, 695, 636, 267]) == 1248\nassert solution.minCostClimbingStairs([332, 780, 832, 251, 975]) == 1031\nassert solution.minCostClimbingStairs([873, 117, 572]) == 117\nassert solution.minCostClimbingStairs([267, 801]) == 267\nassert solution.minCostClimbingStairs([340, 993]) == 340\nassert solution.minCostClimbingStairs([695, 75, 453, 548, 877, 608, 811]) == 1231\nassert solution.minCostClimbingStairs([121, 959, 28]) == 149\nassert solution.minCostClimbingStairs([708, 369, 582, 269]) == 638\nassert solution.minCostClimbingStairs([534, 742, 233]) == 742\nassert solution.minCostClimbingStairs([106, 436, 344, 319, 811, 372]) == 1127\nassert solution.minCostClimbingStairs([519, 554, 109, 555, 866, 886, 294, 180, 20]) == 1808\nassert solution.minCostClimbingStairs([657, 284, 962, 76, 374, 304, 46, 80, 72, 413]) == 782\nassert solution.minCostClimbingStairs([16, 205, 963, 696, 37, 187, 912, 754, 995]) == 1842\nassert solution.minCostClimbingStairs([557, 167, 826, 133, 742, 160, 294]) == 460",
  "inefficient_solution": "class Solution:\n    def minCostClimbingStairs(self, cost: List[int]) -> int:\n        min_costs = [0] * (len(cost) + 1)\n        min_costs[1] = cost[0]\n        min_costs[2] = min(cost[0], cost[1])\n        for i in range(3, len(cost) + 1):\n            min_costs[i] = min(min_costs[i - 2], min_costs[i - 1]) + cost[i - 1]\n        return min(min_costs[-2], min_costs[-1])",
  "is_python": true
}