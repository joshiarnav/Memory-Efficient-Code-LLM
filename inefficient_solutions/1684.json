{
  "problem_idx": 1684,
  "task_name": "Count the Number of Consistent Strings",
  "markdown_description": "\nYou are given a string `allowed` consisting of **distinct** characters and an array of strings `words`. A string is **consistent** if all characters in the string appear in the string `allowed`.\n\n\nReturn *the number of **consistent** strings in the array* `words`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]\n**Output:** 2\n**Explanation:** Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]\n**Output:** 7\n**Explanation:** All strings are consistent.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]\n**Output:** 4\n**Explanation:** Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 104`\n* `1 <= allowed.length <=26`\n* `1 <= words[i].length <= 10`\n* The characters in `allowed` are **distinct**.\n* `words[i]` and `allowed` contain only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:\n        s = set(allowed)\n        return sum(all(c in s for c in w) for w in words)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:\n        s = set(allowed)\n        return sum(all(c in s for c in w) for w in words)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate allowed characters\n    allowed = random.sample(string.ascii_lowercase, random.randint(1, 26))\n\n    # Generate random words list\n    words = []\n    for _ in range(random.randint(1, 11)):\n        word_length = random.randint(1, 11)\n        word = \"\".join(random.sample(string.ascii_lowercase, word_length))\n        words.append(word)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countConsistentStrings(allowed, words)\n\n    return allowed, words, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        allowed, words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countConsistentStrings(allowed, words) == expected_result\n        print(f\"assert solution.countConsistentStrings({allowed}, {words}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.countConsistentStrings({allowed}, {words}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countConsistentStrings(['y', 'h', 'v', 'l', 'u', 'a', 'k', 'i', 'p', 'c', 'x', 'j', 'g', 'w', 's', 'f', 't', 'd', 'm', 'z', 'r', 'e', 'o', 'b'], ['lzty', 'wjdyrxvqf', 'aijunlx', 'kzdhvf', 'ken', 'lvun', 'ydnzgrpc', 'msnqp', 'hfpomka', 'wdpfxkbvgn', 'ywmd']) == 4\nassert solution.countConsistentStrings(['i', 'n', 't'], ['tdcsuhig', 'cnbgvaoute']) == 0\nassert solution.countConsistentStrings(['t', 'l', 'h', 'v', 'x'], ['tfiqrszphou', 'gkd', 'yaewzo', 'dpxoey', 'rkg', 'cfbwhysz', 'wfeyiqn', 'dgsnz', 'bfqkeyw', 'htsdbna', 'hrlmcqd']) == 0\nassert solution.countConsistentStrings(['p', 'd', 'w', 'z', 'h', 'x', 'c', 'g', 'b', 'o', 'i'], ['bhpotxs', 'vyqu', 'bqyhl', 'y', 'ihqx', 'e', 'dnafrczsk', 'rciteul']) == 0\nassert solution.countConsistentStrings(['b'], ['sobh', 'wiqfcgsveol', 'apvtyzkcn', 'yrapm']) == 0\nassert solution.countConsistentStrings(['m', 'n', 'a', 'p', 'o', 'z', 'f', 'k', 'u', 'h', 's', 't', 'g', 'y', 'j'], ['xwjlcdtg', 'oimw', 'xcyezohfvt', 'yuzbfma', 'u', 'krdsaciflot', 'xg', 'jxugdqizhc', 'seka', 'wmiugar']) == 1\nassert solution.countConsistentStrings(['t', 'k', 'h', 'y', 'o', 'n', 's'], ['tws', 'bgl', 'bgqjiuaphrt', 'yhzxa', 'vrciwt', 'wcnoe']) == 0\nassert solution.countConsistentStrings(['u', 'e', 'g', 'c', 't', 'n', 'x', 'm'], ['wciumqzodry', 'pajl', 'ejsncig', 'rbc']) == 0\nassert solution.countConsistentStrings(['i', 'z', 'c', 'e', 't', 'h', 'd', 's', 'b', 'p', 'f', 'u', 'j', 'y', 'r', 'v', 'n', 'a', 'o', 'x', 'm'], ['ulmkgv', 'frolvwyeph', 'sqzgjdflaxk', 'qciswv', 'ybnsvozjk']) == 0\nassert solution.countConsistentStrings(['v', 'p', 'm', 'e', 'g', 'k'], ['mds', 'gn', 'cp', 'oshqerx']) == 0\nassert solution.countConsistentStrings(['x', 'r', 'm', 'n', 'j', 'q', 'g', 's', 'y', 'a', 'd', 'o', 'k', 'v', 'b', 'u', 'f', 'l', 'p', 'h', 'e', 't', 'z', 'i'], ['dztrq', 'qnkevjfwh', 'obkhwjnx', 'ygcivm']) == 1\nassert solution.countConsistentStrings(['n', 'm', 'w', 'v'], ['on', 'snmja', 'tanyz', 'y']) == 0\nassert solution.countConsistentStrings(['a', 'w', 'v', 'j', 'd', 'i', 'z', 'y', 'k', 't', 'e', 'o', 'u', 'q', 'n', 'h', 'b', 'm', 'c', 'p', 'x'], ['lpjgvmesfr', 'b', 'jfulbdhnew', 'qg', 'eghynvc', 'vl', 'qn', 'gtbfq', 'umldyarq', 'yepx', 'xu']) == 4\nassert solution.countConsistentStrings(['q', 'z', 'm'], ['dbfluosqrng', 'qoh']) == 0\nassert solution.countConsistentStrings(['a', 'w', 'b', 'q', 't', 'j', 'o', 'i', 'v'], ['kpcdxlztfaw', 'xshutqfa', 'rdlbst', 'oen', 'tnbeumpdg', 'mfaplvi']) == 0\nassert solution.countConsistentStrings(['q', 'l', 'c', 'x', 'v', 'u', 'j', 'z', 'i', 'y', 'b', 't', 'k', 'w', 'd', 'f', 'h', 'a', 's', 'g'], ['zxw', 'yjwuhofdt', 'gqlimyspj']) == 1\nassert solution.countConsistentStrings(['f', 'm', 'h', 'i', 'v', 'z', 'n', 'x', 'l', 'w', 'e', 'a', 'k', 'r', 'p'], ['at', 'u', 'ehcklw', 'ryxmhats', 'x', 'ck', 'yeibt', 'pgxvzo', 'bigtfc', 'qawbpsg']) == 1\nassert solution.countConsistentStrings(['q', 'y'], ['tcyxeuazb', 'jvbgikylra', 'xulrzcmhtg', 'jupzwldgmc', 'eflamvwh', 'dzklsnpoue', 'rke']) == 0\nassert solution.countConsistentStrings(['e', 'u'], ['csnf', 'egpldx']) == 0\nassert solution.countConsistentStrings(['p', 'x', 'd', 'r', 'c', 'e', 'g', 'y', 'k', 'i', 'n', 'a', 'h', 'z', 'l'], ['tcezn', 'lvzbirxowh', 'bsdkea', 'ax', 'l', 'gsvifwtdk', 'oyred', 'atob', 'ofndi', 'wi']) == 2\nassert solution.countConsistentStrings(['l'], ['iwbkjhmdqsv', 'zcgdjw', 'iwoft', 'ofx', 'phtv']) == 0\nassert solution.countConsistentStrings(['j', 't', 'q', 'p', 'm', 'r', 'd', 'i', 'z', 'l', 'g', 'a', 'y', 'k', 'x', 'u'], ['gdizsxotqfk', 'vjakpihuc', 'dcq', 'nqavpifgu', 'rcsxud', 'a']) == 1\nassert solution.countConsistentStrings(['m'], ['ca', 'etvar', 'lfyk', 'pit', 'sqbvofgcjh', 'alnhrpb', 'syza', 'hilaoduvrf', 'qkojmptui', 'pt']) == 0\nassert solution.countConsistentStrings(['x', 't', 'g', 'n', 'k', 'i', 'f', 's', 'j', 'z', 'o', 'q'], ['dclsyhwzu', 'jbvd', 'mjnozyiqvu', 'holtr', 'fdph', 'f', 'aku']) == 1\nassert solution.countConsistentStrings(['u', 'x', 'a', 'r', 'q', 'f', 'd', 'e', 't', 'k', 'z', 'm', 'g', 'v', 'h', 'p'], ['v', 'v', 'xzjkfhyga', 'kusgnozyrtf', 'o', 'qgz']) == 3\nassert solution.countConsistentStrings(['k'], ['ucfrx', 'vlyfsaczwm', 'odpxahkubqs', 'qnidmgohx', 'dkflvjuemc', 'drbg', 'p']) == 0\nassert solution.countConsistentStrings(['r', 't', 'k', 'm', 'q', 'l', 'y', 'f', 'x'], ['c', 'erquoth', 'ctqubwizdmk', 'kpsnrwvh']) == 0\nassert solution.countConsistentStrings(['p', 'g', 'n', 'o'], ['bjn', 'pw', 'kpforhst', 'nelhysdf', 't', 'gqbzewhm', 'digazefcx']) == 0\nassert solution.countConsistentStrings(['z', 'y', 'n', 'p', 'f', 'j', 'i', 'm', 'v', 'b', 'e', 'k', 'g', 'q', 'a', 'o', 't', 'l', 'h', 'r', 'w', 'u', 'd'], ['ax', 'muqva', 'lbuijp', 'acygvehm', 'pgk', 'bnp', 'coaspqluib', 'wqrlh', 'ihsc', 'jcwqt', 'ywhrxakvn']) == 5\nassert solution.countConsistentStrings(['p', 'i', 'f', 'x', 'm', 'a', 'k', 'u', 'r', 'y', 'o', 'l', 'w', 'h', 'g', 'j', 'n', 't', 'b', 's', 'q', 'e'], ['xzjghyakwps', 'jm', 'bz', 'orevfzl', 'rqznc']) == 1\nassert solution.countConsistentStrings(['a', 'h', 't'], ['ekdwmu', 'qpewoavkxr', 'j', 'zxqimsa', 'bprix', 'tavhszuxier']) == 0\nassert solution.countConsistentStrings(['l', 'm', 'y', 'n', 'e', 's', 'p', 'i', 'r', 'k', 'q', 'c', 'd'], ['qimvpunbcrw', 'nczmvbrpx']) == 0\nassert solution.countConsistentStrings(['l', 'f', 'c', 'y', 'h', 'i', 'g', 'x', 'z', 'k', 'q', 'm'], ['rbj', 'euqkjcsaw', 'jbocpn', 'lhgmqyafon', 'bioja', 'oevr']) == 0\nassert solution.countConsistentStrings(['j', 'n', 'q', 'v', 'x', 'w', 'h', 'c', 'o', 'f', 'z', 'i', 'k', 'a', 'p', 's', 'm', 'g', 'l', 'r', 'e', 'u', 'b', 'y', 'd', 't'], ['i', 'aksfzr', 'bysrx', 'ylzbk']) == 4\nassert solution.countConsistentStrings(['j', 's', 'r', 'c', 'v', 'b', 'e', 'z', 'g', 'k', 'i', 'q', 'h', 'o', 'x', 't', 'm', 'l', 'n', 'w', 'u'], ['ybuezpd', 'pzt', 'bkq', 'ruapwl', 'ejsvubgyhza', 'cpxdyatfliv', 'xqotecdnv', 'lf', 'vtb']) == 2\nassert solution.countConsistentStrings(['z', 'c', 'f', 'a', 'g', 'e', 's', 'u', 'o', 'q', 'y', 'v', 'n', 'd', 'i', 'h', 'p', 'w', 'k', 'j', 'l', 'x', 't', 'b'], ['ygtzq', 'hbuexslwoc', 'gmuilt', 'nzlvepdiq', 'jhd', 'fncyoietl', 'co', 'trgqimzx', 'gquvnebchp', 'zi']) == 8\nassert solution.countConsistentStrings(['b', 'g', 's', 'i', 'p', 'l', 'm', 'h', 'j', 'a', 't', 'z', 'w', 'n', 'f', 'v', 'u', 'y'], ['hlcps', 'omrhxn', 'yrke', 'vo', 'vmjzrqak', 'b', 'fdny', 'xw', 'tpa', 'vq']) == 2\nassert solution.countConsistentStrings(['i', 'h', 'w', 'e', 'u', 'y', 'p', 'q', 's'], ['kywrimnd', 'uyjow', 'taojcen', 'xhuorvzpfka']) == 0\nassert solution.countConsistentStrings(['p', 's', 'j', 'u', 'e', 'o', 'v', 'q', 'm', 'z', 'h', 't', 'k', 'd', 'a', 'y', 'r', 'n', 'g', 'w'], ['p', 'ephtczmkgx', 'apxsbwkrnm', 'p', 'njy', 'ibdonr', 'qtuyidxvja']) == 3\nassert solution.countConsistentStrings(['x', 'k', 'f', 'c', 'e', 'j', 's', 'g', 'q', 't', 'p', 'h', 'r', 'y', 'w', 'm', 'o', 'u', 'v', 'z', 'b', 'n', 'l', 'i', 'd'], ['wybhlp', 'uwv', 'nkwa', 'gmxslb', 'jlis', 'zqjpbculsa', 'cskeiu']) == 5\nassert solution.countConsistentStrings(['t', 'n', 'k', 'w', 'u', 'o', 'i', 'r', 'c', 's', 'm', 'h', 'b', 'p', 'z', 'v', 'y', 'd', 'f'], ['qmlkpib', 'nspuo']) == 1\nassert solution.countConsistentStrings(['r', 'y', 'p', 'o', 'b', 'n', 'x', 'c', 'h', 'u', 'f', 's', 'j', 'e', 'l', 'v', 'w', 'k', 'i', 'a', 'g'], ['gako', 'pre', 'hpjtlygn', 'hobfxsruzic', 'buecxqazil']) == 2\nassert solution.countConsistentStrings(['d', 'j', 'f', 'g', 'u', 'm', 'x', 'v', 'z', 'n', 'k', 'y', 'i', 'b', 's', 'o', 'q', 'c', 'a'], ['cipxko', 'grb', 'y', 'cxtyjrn', 'fojsedqx', 'amy', 'b', 'djfcq', 'doste', 'rdwn']) == 4\nassert solution.countConsistentStrings(['m', 'v', 'k', 'j', 'r', 'h', 'y', 'z', 't', 'u', 'c', 'q', 'w', 'i', 'e', 'o', 'b', 'p', 'l', 'x', 'a', 'n', 'f', 's', 'g'], ['nuw', 'itchjkn']) == 2\nassert solution.countConsistentStrings(['c', 'q', 'i', 'b', 'n', 's', 'k', 'g', 'w', 'v', 'm', 'd', 't', 'a', 'o', 'j'], ['hqa', 'cwxbz', 'mq', 'hpfmyzlvkg', 'b', 'pwbgfnjzk', 'ahjnqiy', 'gawqzcomysr']) == 2\nassert solution.countConsistentStrings(['e'], ['ycgrxhu', 'h', 'cfqrebwltk', 'qghyk', 'iqpnh', 'nox', 'efaq']) == 0\nassert solution.countConsistentStrings(['x', 'n', 'o', 'r', 'd', 'v', 'z', 'h', 'l', 'f', 'u', 'g', 'c'], ['jwsfrnic']) == 0\nassert solution.countConsistentStrings(['v', 'o', 'e', 'g', 'k', 'y', 'q', 'w', 'd', 'f', 'c', 's', 'h', 'l', 'z', 't', 'j', 'n'], ['rwh', 'tsxphcjqu', 'sqmnydbt', 'rsuojeqlkid', 'zlcomj']) == 0\nassert solution.countConsistentStrings(['c'], ['junzwv', 'dknw', 'z', 'qv', 'um', 'wlhozfdtis', 'mzxsu']) == 0\nassert solution.countConsistentStrings(['d', 'w', 'n', 'b', 'j', 'p', 'f', 'm', 'e', 'r', 't', 'u', 'a', 'l', 'k', 'g', 'o', 'y', 'i', 'z', 'v', 'q', 'h', 's', 'x'], ['gepai', 'wvigym', 'adnisuxb', 'evdnr', 'rds']) == 5\nassert solution.countConsistentStrings(['l', 'r', 'v', 'q'], ['lfk', 'vwsqj', 'sjwzqcdr', 'pavrdxu', 'ubcmznlv', 'j']) == 0\nassert solution.countConsistentStrings(['x'], ['xmhzr', 'denvzswkb', 'kyhds', 'qcusafk', 'jwiak', 'ilsfeuwtxd', 'umeln', 'nbloevu', 'bt', 'kcrjobfpux']) == 0\nassert solution.countConsistentStrings(['b', 'c', 'w', 'd', 'i', 't', 'e', 'l', 'x', 'h', 'g', 'k', 's', 'y', 'r', 'a'], ['jiuhspzwd', 'oclnq', 'iadpmhulf', 'abpfwtleq', 'idyzkf']) == 0\nassert solution.countConsistentStrings(['z', 'd', 'j', 'w', 'g', 'p', 'a', 'l', 'f', 'q', 's', 't', 'y', 'u', 'h', 'i', 'e', 'o', 'm'], ['wnzqmh', 'u', 'lnv', 'zgcwsopd']) == 1\nassert solution.countConsistentStrings(['i', 'u'], ['ubagz', 'f', 'zbky', 'tyjg', 'fnr', 'yxqjbwif', 'wpugkqomc', 'ohdl', 'om', 'bhzexdjfp', 'npzef']) == 0\nassert solution.countConsistentStrings(['d', 'g', 't', 'e', 'q', 'y', 'c', 'h', 'x', 'z', 'j', 'k', 'r', 'b', 'f', 'n'], ['vhqdujbcfw', 'bzsnj', 'odfxgijbqpv', 'ejupbqgzhf']) == 0\nassert solution.countConsistentStrings(['y', 'x', 'j', 'b', 'k', 'u', 's', 'm'], ['skmeic', 't', 'xjdwauh']) == 0\nassert solution.countConsistentStrings(['n', 'k', 'c', 't'], ['tuxmhgisbkp', 'gbr', 'tdag', 'n']) == 1\nassert solution.countConsistentStrings(['g', 'y', 'z', 'o', 'q', 'e', 'i', 'k', 'r', 'v', 's', 'p', 'w', 'm', 'u', 'x', 'f', 'l', 'h'], ['zxewlb', 'rpwlqfkdu', 'tlpu', 's']) == 1\nassert solution.countConsistentStrings(['g', 'f', 'r', 'i', 'e', 'b'], ['wsthuvayq', 'xidsemw', 'kzlvmncb', 'dlqbrnijx', 'bucpsg']) == 0\nassert solution.countConsistentStrings(['w', 'f', 'a', 'y', 'h', 'o', 'b', 's', 'p', 'c', 'm'], ['whf', 'yvxmkpqric', 'epjrx', 'lyx', 'xjkbpsotf', 'n', 'oesv', 'axmv', 'vrkolcpfgyh', 'ncridz']) == 1\nassert solution.countConsistentStrings(['d', 'r', 't', 'f', 'b', 'y', 'i', 'l', 'h', 'q', 'k', 'e', 'g', 'j', 'o', 'z', 'c'], ['qgmhj']) == 0\nassert solution.countConsistentStrings(['j', 'o', 'l', 'b', 'v', 't', 'h', 'r'], ['ts', 'ui', 'piyfqdvnm', 'jpw', 'ylcdjmpu', 'rh', 'hemsgvdia', 'cdegamovtnk', 'petrydo', 'v']) == 2\nassert solution.countConsistentStrings(['h', 'e', 'b', 'm', 'q', 'f', 'u', 'a', 'v', 'n', 'y', 'l'], ['hzwjntrk', 'sgac']) == 0\nassert solution.countConsistentStrings(['p', 'y', 'u', 'a', 's', 'q', 'g', 'z'], ['equhzbl', 'cilkf', 'wumknos', 'j', 'zuhswntcaqb', 'vlshrpfczq', 'bcytofrhqad', 'slwnumqkbe']) == 0\nassert solution.countConsistentStrings(['d', 'y', 'u', 'q', 'g', 'f', 'b', 'h', 'i', 'c', 'j', 'k', 'x', 't', 'w', 'r', 'p', 'm', 'o', 'l', 'e', 'z'], ['uermj', 'nwekpvcady', 'j', 'jxifpldqwmc', 'vnz']) == 3\nassert solution.countConsistentStrings(['z', 'r', 'w', 'u', 'p', 'o'], ['npciwkxrb', 'khlzy', 'osihauqpb', 'iarfmul', 'kj', 'tjhpvfxd', 'efrysdhq', 'odl', 'tnjx', 'cgkmzn']) == 0\nassert solution.countConsistentStrings(['n', 'j', 'c', 'k', 'l', 'v', 'z'], ['yasmlgtkxz', 'mjshk', 'gqntrykjdf', 'fhk', 'uoq', 'rhcxb', 'kpjhelgqz', 'z', 'zae', 'onizxag']) == 1\nassert solution.countConsistentStrings(['y', 'g', 'k', 'w', 'f', 'z', 'o', 't', 'x', 'h', 'n', 'c', 'i', 'b', 'j', 's', 'l', 'a'], ['usowbclz', 'vythmqcia', 'n', 'odqzbmc', 'admturbwlfs', 'zoiubgar']) == 1\nassert solution.countConsistentStrings(['a', 'm', 'u', 'i', 'j', 'v', 'b', 'w', 'f', 'd', 's', 'h', 'l', 'c', 'o', 'k', 'g', 'q', 'x', 'e', 'y', 't'], ['xvrylifku', 'jcykoz']) == 0\nassert solution.countConsistentStrings(['n', 'p', 'q', 'f', 'h', 'm', 't', 'b', 'j', 'w', 's', 'r', 'y', 'e', 'u', 'l', 'k', 'd', 'a', 'o', 'z', 'g', 'x'], ['nrqoixwf']) == 0\nassert solution.countConsistentStrings(['a', 'l', 'e', 'd', 'j', 'h', 'k', 'n', 'g', 'u', 'y', 's', 'v', 'r', 'm', 'q', 'z', 'f', 't', 'i', 'x', 'b', 'w'], ['pkcyaebzm', 'hbdc', 'tnx', 'dcrmnb', 'uwkdes', 'rldjfmzhvbp', 'ribcq', 'je', 'a']) == 4\nassert solution.countConsistentStrings(['n', 'v', 't', 'i', 'j', 'b', 'k', 'w', 'f', 'y', 'h', 'z', 'q', 'd'], ['oliuxbmrea', 'xrbdn']) == 0\nassert solution.countConsistentStrings(['m', 's', 'r', 'x', 'l', 'g', 'o', 'z', 'k', 'q', 'n', 'h', 'u', 'v', 'i', 'e', 'd', 't', 'a', 'p', 'j', 'f', 'y', 'c', 'b', 'w'], ['chne', 'ikrdpw', 'qeuogj', 'gqv', 'tjrl', 'vfxzhc', 'clwd', 'xdf', 'xwnd', 'pkagsxj']) == 10\nassert solution.countConsistentStrings(['v', 'c', 's', 'y', 'p', 'q', 'j', 'l', 'i', 'r', 'g', 'd', 'm', 'b', 'n', 'u', 't', 'f', 'k', 'e', 'a', 'w', 'o', 'x'], ['crpish', 'csw', 'vxqe', 'yt', 'tbcj']) == 4\nassert solution.countConsistentStrings(['d', 'j', 'g', 'v', 'b', 'c', 'o', 'm', 'q', 'a', 'z', 'y', 'k', 'p'], ['bw', 'xqocabwem', 'deqa', 'kwclypzj', 'fogxnscm', 'bsidvgyw', 'rmygzjiked', 'oiyq', 'foskqvp', 'zylxe', 'sbke']) == 0\nassert solution.countConsistentStrings(['e', 'c'], ['fbjr', 'v']) == 0\nassert solution.countConsistentStrings(['l', 'w', 'v', 'e', 'p', 'a', 'r', 'm', 'n', 'h', 's', 'k', 'o', 'j', 'g', 'z', 'q', 'x', 'u', 'i', 'y', 'b', 'f', 'd'], ['flnribswtez', 'dswbihotjr', 'vkaxtpjeqm', 'hseupov', 'c', 'dwfouhsv']) == 2\nassert solution.countConsistentStrings(['q', 'p', 'b', 'd', 'g', 'x', 'a', 'i', 'k', 'r', 'v', 'f', 'e', 'c', 'o', 'h', 'z', 'u', 'n', 'y'], ['txcrdgysvn', 'fpmy']) == 0\nassert solution.countConsistentStrings(['u', 'd', 'b', 'r', 'v', 'x', 'c', 'e', 'o', 'f', 's', 'l', 'm', 'z', 'j', 'q', 'a', 't', 'k'], ['b', 'ymox', 'bxcwjfynl', 'kfgnld', 'rfdkhonz', 'glp', 'nv', 'ieyxufk', 'clwdsbikh', 'r']) == 2\nassert solution.countConsistentStrings(['w', 'g', 'd', 'e', 'y', 'n', 'a', 'c', 'p', 'u', 't', 'l', 'j', 'm', 'v', 'o', 'h', 's', 'i', 'r', 'f', 'q', 'k', 'x', 'b', 'z'], ['a']) == 1\nassert solution.countConsistentStrings(['s', 'g', 'p', 'v', 'q', 'r', 'm'], ['i', 'qztwvxkcf', 'syimqljdh', 'uxrmdgqhtv']) == 0\nassert solution.countConsistentStrings(['y', 't', 'i', 'c', 'q', 'w', 'l', 'k'], ['afy', 'ygmq']) == 0\nassert solution.countConsistentStrings(['j', 'w', 'n', 'm', 'z', 'd', 'u', 'x', 'q', 'g', 'k', 's', 'e', 'a', 't'], ['rzpeu', 'bvgawlkm', 'rot', 'fge', 'wdmoyulqav', 'bzplk']) == 0\nassert solution.countConsistentStrings(['m', 'i', 'q', 'p', 'v', 'r', 's', 'u', 'o', 'y', 'a', 'h', 'j', 'e', 'l', 'w', 'f', 'b', 'g', 'd', 'k'], ['h', 'awontg']) == 1\nassert solution.countConsistentStrings(['w', 'h'], ['wrchv', 'k', 'hjsfdgnp', 'jyxudvnp', 'ybcovgnqxf', 'uxqnobtrpjk', 'ljavu']) == 0\nassert solution.countConsistentStrings(['g', 'i', 'b', 'u', 'y', 'k', 'p', 'z', 'c', 'o', 'e'], ['dehgq', 'n', 'rjctswyq', 'gvdizmbnfo', 'zog', 'vxtrfpo', 'un', 'qjekhmvgtcr', 'airvl', 'dsgwyhaxeo']) == 1\nassert solution.countConsistentStrings(['u', 'g', 'a', 't', 'e', 'o', 'd', 'n', 'j', 'x', 'h', 'k', 'l', 'i', 'y', 's'], ['nwbufx', 'kpt', 'zjetmqnxy', 'hfqcgpj']) == 0\nassert solution.countConsistentStrings(['n', 'v', 'o', 'x', 'w', 'i', 'y', 'p', 'm', 'd', 'l', 'b', 's', 'g', 'e', 'h', 'q', 'c', 'a', 'j', 'k', 'r', 'u'], ['ydxzlhq', 'kao', 'nrhzdqiwskl', 't', 'om']) == 2\nassert solution.countConsistentStrings(['v', 'k', 'u', 'g', 'j', 'a', 'l', 'z', 'q', 'c', 'i', 'h', 's', 'd', 'n', 't', 'o', 'm', 'e', 'w', 'p'], ['vdxqizc', 'yumhwesi', 'omse']) == 1\nassert solution.countConsistentStrings(['c', 'b', 'p'], ['rlnyqh', 'kjmensv', 'sgte', 'ntkq', 'zmcajgof', 'exrasfwbim']) == 0\nassert solution.countConsistentStrings(['f', 'y', 'g', 'b', 'i', 't', 'd', 'x', 'u', 'j', 'e', 'r', 'l', 'k', 'q', 'n'], ['ipxj', 'emniox', 'sqvhripwg', 'gcphf', 'iemfr', 'fdopwl', 'gyxrdomzc']) == 0\nassert solution.countConsistentStrings(['m', 'u', 'w', 'i', 'x', 'g', 'p', 'n', 's', 'y', 't', 'j', 'l', 'k', 'c', 'z'], ['sdxmiwq', 'fkpn']) == 0\nassert solution.countConsistentStrings(['m', 'o', 'q', 't', 'p', 'e', 'c', 'a', 'b', 'l', 'j', 'd', 'h', 'g'], ['cqhtp', 'qvsyfekpmjb', 'tmh', 'nylwvjec']) == 2\nassert solution.countConsistentStrings(['s', 'f', 'c', 'w', 'd', 'y', 'u', 'k', 'x', 'z'], ['jswyaen', 'svyec', 'zdawoneq', 'bzymweq', 'epndhza']) == 0\nassert solution.countConsistentStrings(['q', 'i', 'l', 'b', 'w', 't', 'x', 'k', 'h', 'v', 'y', 'e', 'o', 'g'], ['q', 'quifhjzp', 'jhpoxmu', 'nzkmlof', 'ptsh']) == 1\nassert solution.countConsistentStrings(['u', 'q', 'p', 'b'], ['heg', 'zmdgjvuelys']) == 0\nassert solution.countConsistentStrings(['p', 'h', 'l', 'f', 's', 'k'], ['umegqths', 'nwkzgjcloh', 'c', 'adiosrvlzh', 'jutescfdmi', 'ytizs', 'hrb', 'nj', 'ubxcitezsav', 'saomidufv', 'nsitw']) == 0\nassert solution.countConsistentStrings(['k', 'l', 'r', 'v', 'h', 'n', 'i', 'w', 'x', 'o', 'm', 'j'], ['zxqoug', 'fl', 'ip', 'hwet', 'qis', 'd', 'bdjegzcyxuw']) == 0\nassert solution.countConsistentStrings(['u', 'o', 'w', 'e', 'q', 'h', 'm', 'p', 'k', 't', 'b', 'c', 's', 'l', 'y', 'n', 'r', 'z', 'f', 'd'], ['nsqaohgtm', 'pafe', 'mndhusx', 'msuqbrg', 'rjtmosedu', 'rsjvbq', 'wermyclvj', 'dykxg', 'pehjiany']) == 0",
  "inefficient_solution": "class Solution:\n    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:\n        allowed_set = set(allowed)\n        count = 0\n        for word in words:\n            word_set = set(word)\n            temp_word = word[:]\n            for char in word_set:\n                if char not in allowed_set:\n                    temp_word = temp_word.replace(char, '')\n            if temp_word == '':\n                count += 1\n        return count",
  "is_python": true
}