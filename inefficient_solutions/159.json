{
  "problem_idx": 159,
  "task_name": "Longest Substring with At Most Two Distinct Characters",
  "markdown_description": "\nGiven a string `s`, return *the length of the longest* *substring* *that contains at most **two distinct characters***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"eceba\"\n**Output:** 3\n**Explanation:** The substring is \"ece\" which its length is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"ccaabbb\"\n**Output:** 5\n**Explanation:** The substring is \"aabbb\" which its length is 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        cnt = Counter()\n        ans = j = 0\n        for i, c in enumerate(s):\n            cnt[c] += 1\n            while len(cnt) > 2:\n                cnt[s[j]] -= 1\n                if cnt[s[j]] == 0:\n                    cnt.pop(s[j])\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lengthOfLongestSubstringTwoDistinct(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lengthOfLongestSubstringTwoDistinct(s) == expected_result\n        print(f\"assert solution.lengthOfLongestSubstringTwoDistinct('{s}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.lengthOfLongestSubstringTwoDistinct('{s}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lengthOfLongestSubstringTwoDistinct('tytyqzhskq') == 4\nassert solution.lengthOfLongestSubstringTwoDistinct('syfnqmc') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('jkexzim') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('n') == 1\nassert solution.lengthOfLongestSubstringTwoDistinct('yzqcdh') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('pxlki') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('bzfvkprg') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('wmz') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('xxstxi') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('hgieohzoeh') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('klw') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('ltbsyslb') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('e') == 1\nassert solution.lengthOfLongestSubstringTwoDistinct('mdces') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('afrve') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('q') == 1\nassert solution.lengthOfLongestSubstringTwoDistinct('ie') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('jin') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('kjpjledpj') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('tqypwmyc') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('wykfzg') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('uikykc') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('mk') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('ufkhob') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('oljytecfct') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('otfgfyz') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('qxc') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('lgoycwph') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('jrvdqto') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('zf') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('fkdz') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('swiysjk') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('y') == 1\nassert solution.lengthOfLongestSubstringTwoDistinct('phr') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('qwywyygvuy') == 5\nassert solution.lengthOfLongestSubstringTwoDistinct('xjfe') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('d') == 1\nassert solution.lengthOfLongestSubstringTwoDistinct('yrclyqzro') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('apscugvmua') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('ypcljowyi') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('bbmlksl') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('ocnztxifwu') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('wmunnoq') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('wtahn') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('zjtcvdelvx') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('uxrsnbets') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('unxjog') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('andrtvlyt') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('obms') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('cinmfk') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('lkfh') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('yjjclza') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('dye') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('utbi') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('qxgr') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('potywzbd') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('qrmqulxxk') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('atrppc') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('atlyojurom') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('pifjaim') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('xc') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('yaupcgaydo') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('pununsz') == 4\nassert solution.lengthOfLongestSubstringTwoDistinct('eet') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('wsxkiu') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('bd') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('eh') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('lk') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('lg') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('qpjbrcdeq') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('yjtcfr') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('zjqugaazgt') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('nnfbgzzf') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('adqjfhyq') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('szxpd') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('yt') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('upzlazm') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('uu') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('arvfhd') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('jqq') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('ofskubbm') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('ilyxwisar') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('odsg') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('mtrukr') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('q') == 1\nassert solution.lengthOfLongestSubstringTwoDistinct('wivrrcsukl') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('clep') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('rqqzghulzp') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('lgpwdqx') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('csawqda') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('llem') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('qrhrgj') == 3\nassert solution.lengthOfLongestSubstringTwoDistinct('yve') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('drmt') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('zf') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('gydzaciuha') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('parklav') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('pytj') == 2\nassert solution.lengthOfLongestSubstringTwoDistinct('r') == 1\nassert solution.lengthOfLongestSubstringTwoDistinct('yquvtrdvq') == 2",
  "inefficient_solution": "class Solution:\n    def lengthOfLongestSubstringTwoDistinct(self, s: str) -> int:\n        long_substring = []\n        max_length = 0\n        for char in s:\n            if len(long_substring) == 0:\n                long_substring.append(char)\n                max_length += 1\n            else:\n                new_substring = []\n                for c in long_substring:\n                    if c != char:\n                        new_substring.append(c)\n                if len(long_substring) > len(new_substring):\n                    long_substring = new_substring + [char]\n                else:\n                    long_substring = long_substring[:len(new_substring)] + [char]\n                if len(long_substring) > max_length:\n                    max_length = len(long_substring)\n        return max_length",
  "is_python": true
}