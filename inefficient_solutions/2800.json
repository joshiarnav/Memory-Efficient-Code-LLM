{
  "problem_idx": 2800,
  "task_name": "Shortest String That Contains Three Strings",
  "markdown_description": "\n\nGiven three strings `a`, `b`, and `c`, your task is to find a string that has the **minimum** length and contains all three strings as **substrings**.\n\nIf there are multiple such strings, return the**lexicographicallysmallest** one.\n\n\nReturn *a string denoting the answer to the problem.*\n\n\n**Notes**\n\n\n* A string `a` is **lexicographically smaller** than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears **earlier** in the alphabet than the corresponding letter in `b`.\n* A **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** a = \"abc\", b = \"bca\", c = \"aaa\"\n**Output:** \"aaabca\"\n**Explanation:**  We show that \"aaabca\" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and \"aaabca\" is the lexicographically smallest one.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** a = \"ab\", b = \"ba\", c = \"aba\"\n**Output:** \"aba\"\n**Explanation:** We show that the string \"aba\" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that \"aba\" is the lexicographically smallest one.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= a.length, b.length, c.length <= 100`\n* `a`, `b`, `c` consist only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n        def f(s: str, t: str) -> str:\n            if s in t:\n                return t\n            if t in s:\n                return s\n            m, n = len(s), len(t)\n            for i in range(min(m, n), 0, -1):\n                if s[-i:] == t[:i]:\n                    return s + t[i:]\n            return s + t\n\n        ans = \"\"\n        for a, b, c in permutations((a, b, c)):\n            s = f(f(a, b), c)\n            if ans == \"\" or len(s) < len(ans) or (len(s) == len(ans) and s < ans):\n                ans = s\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom itertools import permutations\n\n\nclass Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n        def f(s: str, t: str) -> str:\n            if s in t:\n                return t\n            if t in s:\n                return s\n            m, n = len(s), len(t)\n            for i in range(min(m, n), 0, -1):\n                if s[-i:] == t[:i]:\n                    return s + t[i:]\n            return s + t\n\n        ans = \"\"\n        for a, b, c in permutations((a, b, c)):\n            s = f(f(a, b), c)\n            if ans == \"\" or len(s) < len(ans) or (len(s) == len(ans) and s < ans):\n                ans = s\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random strings for a, b, c\n    a = \"\".join([random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 10))])\n    b = \"\".join([random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 10))])\n    c = \"\".join([random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 10))])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumString(a, b, c)\n\n    return a, b, c, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        a, b, c, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumString(a, b, c) == expected_result\n        print(f'assert solution.minimumString(\"{a}\", \"{b}\", \"{c}\") == \"{expected_result}\"')\n        test_case_generator_results.append(f'assert solution.minimumString(\"{a}\", \"{b}\", \"{c}\") == \"{expected_result}\"')\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumString(\"mbzv\", \"gggdeyhbi\", \"rdw\") == \"gggdeyhbimbzvrdw\"\nassert solution.minimumString(\"d\", \"qq\", \"uqjirgjn\") == \"dqquqjirgjn\"\nassert solution.minimumString(\"owsn\", \"umri\", \"k\") == \"kowsnumri\"\nassert solution.minimumString(\"d\", \"kfi\", \"t\") == \"dkfit\"\nassert solution.minimumString(\"kwwbvq\", \"ft\", \"tvdxszt\") == \"ftvdxsztkwwbvq\"\nassert solution.minimumString(\"sxmjmak\", \"rpxhizec\", \"dwzc\") == \"dwzcrpxhizecsxmjmak\"\nassert solution.minimumString(\"bzhupsn\", \"kgmdifbrnh\", \"hcs\") == \"bzhupsnkgmdifbrnhcs\"\nassert solution.minimumString(\"ivp\", \"adogwuqtjf\", \"zd\") == \"adogwuqtjfivpzd\"\nassert solution.minimumString(\"bf\", \"wqenyozxxl\", \"fzfyld\") == \"bfzfyldwqenyozxxl\"\nassert solution.minimumString(\"zsqxqhebtl\", \"lypjlo\", \"fnrhnekr\") == \"fnrhnekrzsqxqhebtlypjlo\"\nassert solution.minimumString(\"jcjtqwokq\", \"qj\", \"vc\") == \"jcjtqwokqjvc\"\nassert solution.minimumString(\"ryuke\", \"nnbypraig\", \"wxx\") == \"nnbypraigryukewxx\"\nassert solution.minimumString(\"x\", \"forgetijxq\", \"n\") == \"forgetijxqn\"\nassert solution.minimumString(\"ae\", \"mgxfengrdu\", \"iioj\") == \"aeiiojmgxfengrdu\"\nassert solution.minimumString(\"qbtfruyzaf\", \"juuggxffml\", \"rtynkwwpa\") == \"juuggxffmlqbtfruyzafrtynkwwpa\"\nassert solution.minimumString(\"vlug\", \"f\", \"omvvasxx\") == \"fomvvasxxvlug\"\nassert solution.minimumString(\"fjlimg\", \"a\", \"kzqxbelqhg\") == \"afjlimgkzqxbelqhg\"\nassert solution.minimumString(\"fzdoogja\", \"rbcexjbl\", \"efbaywx\") == \"efbaywxfzdoogjarbcexjbl\"\nassert solution.minimumString(\"fr\", \"d\", \"htwxfuhm\") == \"dfrhtwxfuhm\"\nassert solution.minimumString(\"ljeiow\", \"ul\", \"ge\") == \"geuljeiow\"\nassert solution.minimumString(\"mhzoy\", \"trhijc\", \"tfvxddwj\") == \"mhzoytfvxddwjtrhijc\"\nassert solution.minimumString(\"chnqmu\", \"qkwkh\", \"sxevvbux\") == \"chnqmuqkwkhsxevvbux\"\nassert solution.minimumString(\"siyef\", \"gzsmjaxnbg\", \"hssylkwg\") == \"hssylkwgzsmjaxnbgsiyef\"\nassert solution.minimumString(\"laxtrc\", \"q\", \"gwilwgywx\") == \"gwilwgywxlaxtrcq\"\nassert solution.minimumString(\"agd\", \"owdbrsjkkb\", \"ucs\") == \"agdowdbrsjkkbucs\"\nassert solution.minimumString(\"mnirpwuyz\", \"pwe\", \"yo\") == \"mnirpwuyzpweyo\"\nassert solution.minimumString(\"usg\", \"aixkwwb\", \"ol\") == \"aixkwwbolusg\"\nassert solution.minimumString(\"dhd\", \"onugif\", \"tjeo\") == \"dhdtjeonugif\"\nassert solution.minimumString(\"v\", \"ptciy\", \"dgukjkz\") == \"dgukjkzptciyv\"\nassert solution.minimumString(\"zzwgfqfey\", \"felj\", \"aejqs\") == \"aejqsfeljzzwgfqfey\"\nassert solution.minimumString(\"makqejnflz\", \"by\", \"pcyjzogm\") == \"bypcyjzogmakqejnflz\"\nassert solution.minimumString(\"usr\", \"xm\", \"nyh\") == \"nyhusrxm\"\nassert solution.minimumString(\"cnxjpfzu\", \"yjpvzhbvpk\", \"qi\") == \"cnxjpfzuqiyjpvzhbvpk\"\nassert solution.minimumString(\"vdsqldpob\", \"sgpjdlpbw\", \"cql\") == \"cqlsgpjdlpbwvdsqldpob\"\nassert solution.minimumString(\"qdi\", \"yujp\", \"mirkhvq\") == \"mirkhvqdiyujp\"\nassert solution.minimumString(\"d\", \"efdjnyrn\", \"fr\") == \"efdjnyrnfr\"\nassert solution.minimumString(\"dl\", \"fs\", \"scf\") == \"dlfscf\"\nassert solution.minimumString(\"vgroidfluo\", \"d\", \"r\") == \"vgroidfluo\"\nassert solution.minimumString(\"evi\", \"bevwwxgz\", \"tiruet\") == \"bevwwxgzevitiruet\"\nassert solution.minimumString(\"nxqyaoknex\", \"mpjon\", \"vjmjutp\") == \"mpjonxqyaoknexvjmjutp\"\nassert solution.minimumString(\"f\", \"rhm\", \"wbsqwmnqdv\") == \"frhmwbsqwmnqdv\"\nassert solution.minimumString(\"xxymkg\", \"jlmjptxz\", \"fp\") == \"fpjlmjptxzxxymkg\"\nassert solution.minimumString(\"rhpjfzv\", \"d\", \"hzyypfo\") == \"dhzyypforhpjfzv\"\nassert solution.minimumString(\"lxbodzoiso\", \"jvjnm\", \"kefx\") == \"jvjnmkefxlxbodzoiso\"\nassert solution.minimumString(\"asoccsge\", \"uouqpo\", \"tmshmzuhun\") == \"asoccsgetmshmzuhunuouqpo\"\nassert solution.minimumString(\"zzdeyufci\", \"tjrhm\", \"jo\") == \"jotjrhmzzdeyufci\"\nassert solution.minimumString(\"ieygmc\", \"gzjvmd\", \"l\") == \"gzjvmdieygmcl\"\nassert solution.minimumString(\"rlqcmv\", \"fxzuwjavt\", \"bomhh\") == \"bomhhfxzuwjavtrlqcmv\"\nassert solution.minimumString(\"vmenxdtamn\", \"hz\", \"so\") == \"hzsovmenxdtamn\"\nassert solution.minimumString(\"zm\", \"icozqt\", \"ziowmm\") == \"icozqtziowmmzm\"\nassert solution.minimumString(\"hmuz\", \"weryuxxr\", \"p\") == \"hmuzpweryuxxr\"\nassert solution.minimumString(\"jypkt\", \"bxwxb\", \"zweq\") == \"bxwxbjypktzweq\"\nassert solution.minimumString(\"qxdhamp\", \"fydfpn\", \"mepno\") == \"fydfpnmepnoqxdhamp\"\nassert solution.minimumString(\"yjzkjwcmda\", \"kawbjcgt\", \"llltcyoll\") == \"kawbjcgtllltcyollyjzkjwcmda\"\nassert solution.minimumString(\"yjrxk\", \"yutmonaxy\", \"lvfghy\") == \"lvfghyutmonaxyjrxk\"\nassert solution.minimumString(\"rcxdscq\", \"lgemmod\", \"mhaqbbg\") == \"lgemmodmhaqbbgrcxdscq\"\nassert solution.minimumString(\"fomg\", \"hmlwvapgry\", \"ayifg\") == \"ayifgfomghmlwvapgry\"\nassert solution.minimumString(\"wipzuvogkz\", \"su\", \"conymkv\") == \"conymkvsuwipzuvogkz\"\nassert solution.minimumString(\"cjoctp\", \"xirlmxd\", \"hecnpjbwwc\") == \"hecnpjbwwcjoctpxirlmxd\"\nassert solution.minimumString(\"dfqhtcp\", \"seleg\", \"mailodnbzv\") == \"dfqhtcpmailodnbzvseleg\"\nassert solution.minimumString(\"vdpi\", \"ouhp\", \"vvkrre\") == \"ouhpvdpivvkrre\"\nassert solution.minimumString(\"rmhgoe\", \"iqvxjdotvg\", \"y\") == \"iqvxjdotvgrmhgoey\"\nassert solution.minimumString(\"bbkjeobx\", \"ebj\", \"y\") == \"bbkjeobxebjy\"\nassert solution.minimumString(\"yd\", \"wiaycvwa\", \"lynvsrx\") == \"lynvsrxwiaycvwayd\"\nassert solution.minimumString(\"dpdjdxkaw\", \"ozdjydxlep\", \"ptptyyl\") == \"dpdjdxkawozdjydxleptptyyl\"\nassert solution.minimumString(\"qztvnwsag\", \"unnhn\", \"p\") == \"pqztvnwsagunnhn\"\nassert solution.minimumString(\"nkjuqejzht\", \"i\", \"yct\") == \"inkjuqejzhtyct\"\nassert solution.minimumString(\"s\", \"ihvowms\", \"lin\") == \"ihvowmslin\"\nassert solution.minimumString(\"sszq\", \"lzdceas\", \"uuegsingkg\") == \"lzdceasszquuegsingkg\"\nassert solution.minimumString(\"rxinafn\", \"shzzz\", \"vluhauelg\") == \"rxinafnshzzzvluhauelg\"\nassert solution.minimumString(\"qaqbbie\", \"iswatnuvjd\", \"zruqpoy\") == \"iswatnuvjdqaqbbiezruqpoy\"\nassert solution.minimumString(\"tipihqw\", \"gjkrzleixd\", \"vcrw\") == \"gjkrzleixdtipihqwvcrw\"\nassert solution.minimumString(\"yzdwk\", \"bpkruz\", \"ph\") == \"bpkruzphyzdwk\"\nassert solution.minimumString(\"haoyi\", \"m\", \"yptezpj\") == \"haoyimyptezpj\"\nassert solution.minimumString(\"ng\", \"dwv\", \"altnb\") == \"altnbdwvng\"\nassert solution.minimumString(\"m\", \"rhezrbyji\", \"xp\") == \"mrhezrbyjixp\"\nassert solution.minimumString(\"hqity\", \"jzoropgo\", \"jhog\") == \"hqityjhogjzoropgo\"\nassert solution.minimumString(\"wniwiv\", \"cqv\", \"bfhlfcz\") == \"bfhlfczcqvwniwiv\"\nassert solution.minimumString(\"jxlrro\", \"jvyort\", \"bnwitotht\") == \"bnwitothtjvyortjxlrro\"\nassert solution.minimumString(\"swf\", \"q\", \"iyewzc\") == \"iyewzcqswf\"\nassert solution.minimumString(\"x\", \"g\", \"dxyxoioike\") == \"dxyxoioikeg\"\nassert solution.minimumString(\"c\", \"srflrf\", \"jhkt\") == \"cjhktsrflrf\"\nassert solution.minimumString(\"borljbztgw\", \"rjgw\", \"kkhhdbks\") == \"borljbztgwkkhhdbksrjgw\"\nassert solution.minimumString(\"vhl\", \"efatzhyxo\", \"tp\") == \"efatzhyxotpvhl\"\nassert solution.minimumString(\"ktthylot\", \"blz\", \"q\") == \"blzktthylotq\"\nassert solution.minimumString(\"p\", \"uyo\", \"ok\") == \"puyok\"\nassert solution.minimumString(\"ovjparb\", \"yzqvyvntac\", \"wdcnxer\") == \"ovjparbwdcnxeryzqvyvntac\"\nassert solution.minimumString(\"tvov\", \"thwpawgxf\", \"jigqndeqnm\") == \"jigqndeqnmthwpawgxftvov\"\nassert solution.minimumString(\"owjvsyg\", \"hokl\", \"hmodzetssl\") == \"hmodzetsslhoklowjvsyg\"\nassert solution.minimumString(\"kmtjadw\", \"lsjqw\", \"fwmmkosf\") == \"fwmmkosfkmtjadwlsjqw\"\nassert solution.minimumString(\"vqmytwfjae\", \"h\", \"u\") == \"huvqmytwfjae\"\nassert solution.minimumString(\"wv\", \"nc\", \"stbw\") == \"ncstbwv\"\nassert solution.minimumString(\"mbtmzjfw\", \"aqmedkmy\", \"deygn\") == \"aqmedkmydeygnmbtmzjfw\"\nassert solution.minimumString(\"yi\", \"bmtihhewa\", \"wkkkzwbsa\") == \"bmtihhewawkkkzwbsayi\"\nassert solution.minimumString(\"nn\", \"wverhdqqg\", \"vzrd\") == \"nnvzrdwverhdqqg\"\nassert solution.minimumString(\"qd\", \"vvwnikk\", \"lmanjuxx\") == \"lmanjuxxqdvvwnikk\"\nassert solution.minimumString(\"p\", \"qcfkpbs\", \"r\") == \"qcfkpbsr\"\nassert solution.minimumString(\"ppjqpn\", \"vu\", \"ig\") == \"igppjqpnvu\"\nassert solution.minimumString(\"x\", \"vp\", \"fug\") == \"fugvpx\"\nassert solution.minimumString(\"bgtwtwzdkw\", \"ncg\", \"lyqado\") == \"bgtwtwzdkwlyqadoncg\"",
  "inefficient_solution": "class Solution:\n    def minimumString(self, a: str, b: str, c: str) -> str:\n        def f(s: str, t: str) -> str:\n            if s in t:\n                return t\n            if t in s:\n                return s\n            m, n = len(s), len(t)\n            for i in range(min(m, n), 0, -1):\n                if s[-i:] == t[:i]:\n                    return [s, t[i:]]  # allocate a new list\n            return [s, t]\n\n        ans = None\n        for a, b, c in permutations((a, b, c)):\n            s = f(f(a, b), c)\n            if ans is None or len(s[0]) + len(s[1]) < len(ans) or (len(s[0]) + len(s[1]) == len(ans) and s[0] + s[1] < ans):\n                ans = s[0] + s[1]  # concatenate the two strings\n        return ans",
  "is_python": true
}