{
  "problem_idx": 2779,
  "task_name": "Maximum Beauty of an Array After Applying Operation",
  "markdown_description": "\nYou are given a **0-indexed** array `nums` and a **non-negative** integer `k`.\n\n\nIn one operation, you can do the following:\n\n\n* Choose an index `i` that **hasn't been chosen before** from the range `[0, nums.length - 1]`.\n* Replace `nums[i]` with any integer from the range `[nums[i] - k, nums[i] + k]`.\n\n\nThe **beauty** of the array is the length of the longest subsequence consisting of equal elements.\n\n\nReturn *the **maximum** possible beauty of the array* `nums` *after applying the operation any number of times.*\n\n\n**Note** that you can apply the operation to each index **only once**.\n\n\nA\u00a0**subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,6,1,2], k = 2\n**Output:** 3\n**Explanation:** In this example, we apply the following operations:\n- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].\n- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].\nAfter the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).\nIt can be proven that 3 is the maximum possible length we can achieve.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1], k = 10\n**Output:** 4\n**Explanation:** In this example we don't have to apply any operations.\nThe beauty of the array nums is 4 (whole array).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i], k <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n        m = max(nums) + k * 2 + 2\n        d = [0] * m\n        for x in nums:\n            d[x] += 1\n            d[x + k * 2 + 1] -= 1\n        ans = s = 0\n        for x in d:\n            s += x\n            ans = max(ans, s)\n        return ans\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\nclass Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n        m = max(nums) + k * 2 + 2\n        d = [0] * m\n        for x in nums:\n            d[x] += 1\n            d[x + k * 2 + 1] -= 1\n        ans = s = 0\n        for x in d:\n            s += x\n            ans = max(ans, s)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random k\n    k = random.randint(1, 201)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumBeauty(nums, k)\n\n    return nums, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumBeauty(nums, k) == expected_result\n        print(f\"assert solution.maximumBeauty({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.maximumBeauty({nums}, {k}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumBeauty([88, 92, 49, 31], 39) == 4\nassert solution.maximumBeauty([18, 62, 82, 94, 52, 41, 29, 66, 10, 51], 175) == 10\nassert solution.maximumBeauty([93, 40, 67], 96) == 3\nassert solution.maximumBeauty([97, 74, 84, 31, 11, 76], 86) == 6\nassert solution.maximumBeauty([27, 57], 107) == 2\nassert solution.maximumBeauty([72, 38], 133) == 2\nassert solution.maximumBeauty([26, 44, 46, 93, 53, 42, 99], 72) == 7\nassert solution.maximumBeauty([9, 60, 61, 22], 142) == 4\nassert solution.maximumBeauty([51, 90, 71, 26], 105) == 4\nassert solution.maximumBeauty([86, 15, 80, 58], 110) == 4\nassert solution.maximumBeauty([27, 40, 88, 65, 43, 32], 29) == 5\nassert solution.maximumBeauty([95, 36, 79, 35, 46, 34, 33, 64, 72], 81) == 9\nassert solution.maximumBeauty([75, 64, 68, 30, 32, 17, 4], 48) == 7\nassert solution.maximumBeauty([49, 7, 71, 19, 45, 29, 31], 121) == 7\nassert solution.maximumBeauty([25, 61, 8], 123) == 3\nassert solution.maximumBeauty([84, 63, 67, 89, 51, 8, 52], 9) == 4\nassert solution.maximumBeauty([13, 7, 91, 69, 95], 123) == 5\nassert solution.maximumBeauty([14, 43, 22, 2, 47, 89], 108) == 6\nassert solution.maximumBeauty([68, 8, 37, 36, 31, 66, 61, 93, 98, 57], 172) == 10\nassert solution.maximumBeauty([18, 31, 17, 90, 1], 111) == 5\nassert solution.maximumBeauty([39, 82, 52, 84, 72, 21, 48, 29], 113) == 8\nassert solution.maximumBeauty([100, 13, 14], 91) == 3\nassert solution.maximumBeauty([97, 64, 43, 14, 21, 49, 57, 93, 44, 58], 44) == 10\nassert solution.maximumBeauty([28, 19, 30, 3, 11, 16, 93, 6, 18], 138) == 9\nassert solution.maximumBeauty([33, 93, 20, 83], 46) == 4\nassert solution.maximumBeauty([25, 63, 23], 190) == 3\nassert solution.maximumBeauty([58, 88, 81, 60, 23], 75) == 5\nassert solution.maximumBeauty([13, 85, 18, 60, 93, 27, 90, 77, 97], 48) == 9\nassert solution.maximumBeauty([59, 80, 56], 63) == 3\nassert solution.maximumBeauty([40, 1, 73, 49, 50], 149) == 5\nassert solution.maximumBeauty([51, 21, 24, 63], 120) == 4\nassert solution.maximumBeauty([60, 85, 45, 29, 46, 70, 76, 61, 94, 57], 144) == 10\nassert solution.maximumBeauty([93, 40, 6, 74], 194) == 4\nassert solution.maximumBeauty([50, 60, 19, 15, 100, 3, 55], 128) == 7\nassert solution.maximumBeauty([35, 54, 72, 75, 36, 49, 68], 115) == 7\nassert solution.maximumBeauty([17, 59, 64, 53], 36) == 4\nassert solution.maximumBeauty([45, 18, 72, 38, 12, 74, 90, 7, 53], 180) == 9\nassert solution.maximumBeauty([12, 71, 26], 106) == 3\nassert solution.maximumBeauty([89, 28, 77, 47], 87) == 4\nassert solution.maximumBeauty([18, 37], 152) == 2\nassert solution.maximumBeauty([37, 22, 96, 42, 47, 74, 95, 49, 82, 40], 91) == 10\nassert solution.maximumBeauty([34, 91, 50, 54, 26, 55, 36, 43], 9) == 4\nassert solution.maximumBeauty([66, 18, 100, 64, 19, 47], 58) == 6\nassert solution.maximumBeauty([89, 34, 30, 99], 121) == 4\nassert solution.maximumBeauty([80, 1, 43, 27], 106) == 4\nassert solution.maximumBeauty([80, 7], 168) == 2\nassert solution.maximumBeauty([28, 9, 68, 12, 57, 43, 84, 55], 154) == 8\nassert solution.maximumBeauty([96, 95, 80, 45, 93, 91, 66], 142) == 7\nassert solution.maximumBeauty([41, 18, 60, 19, 12, 36, 33, 86, 51, 13], 110) == 10\nassert solution.maximumBeauty([66, 15, 31, 14, 99, 86, 6, 50], 6) == 3\nassert solution.maximumBeauty([32, 70], 110) == 2\nassert solution.maximumBeauty([99, 70, 35, 9, 73, 66, 83, 100], 77) == 8\nassert solution.maximumBeauty([7, 52, 87, 19, 1, 36, 74], 200) == 7\nassert solution.maximumBeauty([45, 5, 16, 75, 3, 46, 8, 88, 57], 154) == 9\nassert solution.maximumBeauty([62, 50, 83, 11, 53, 46], 125) == 6\nassert solution.maximumBeauty([10, 63, 70, 38], 11) == 2\nassert solution.maximumBeauty([12, 82, 91, 13, 45], 83) == 5\nassert solution.maximumBeauty([38, 8, 45, 9, 62], 188) == 5\nassert solution.maximumBeauty([89, 91, 15, 50, 25, 11, 37, 14], 47) == 8\nassert solution.maximumBeauty([70, 21, 44, 86, 33, 51], 141) == 6\nassert solution.maximumBeauty([75, 52, 49, 71, 95, 39, 84], 158) == 7\nassert solution.maximumBeauty([47, 1, 15], 188) == 3\nassert solution.maximumBeauty([73, 90, 45], 122) == 3\nassert solution.maximumBeauty([30, 33, 75, 94, 18], 166) == 5\nassert solution.maximumBeauty([52, 54, 95, 37], 50) == 4\nassert solution.maximumBeauty([92, 24, 58, 21, 28], 87) == 5\nassert solution.maximumBeauty([81, 35, 25], 96) == 3\nassert solution.maximumBeauty([42, 2], 115) == 2\nassert solution.maximumBeauty([47, 70, 100, 59, 74, 55], 140) == 6\nassert solution.maximumBeauty([36, 81, 84], 119) == 3\nassert solution.maximumBeauty([18, 53, 100, 44, 24, 82, 75], 36) == 6\nassert solution.maximumBeauty([7, 30, 99, 60, 94, 73, 26, 16, 52], 112) == 9\nassert solution.maximumBeauty([47, 93, 9, 25, 59, 22, 48, 30], 199) == 8\nassert solution.maximumBeauty([32, 61, 84, 86, 77, 33, 99, 18, 100], 97) == 9\nassert solution.maximumBeauty([20, 31, 99, 61], 176) == 4\nassert solution.maximumBeauty([23, 29, 66, 91, 34, 5, 24, 56, 49, 16], 21) == 7\nassert solution.maximumBeauty([98, 20], 192) == 2\nassert solution.maximumBeauty([13, 43, 28, 72, 91, 36, 33], 39) == 7\nassert solution.maximumBeauty([71, 27, 59, 68], 49) == 4\nassert solution.maximumBeauty([81, 56, 65, 9], 174) == 4\nassert solution.maximumBeauty([68, 85, 31], 177) == 3\nassert solution.maximumBeauty([32, 41, 47, 63], 177) == 4\nassert solution.maximumBeauty([84, 80, 21, 22, 55], 69) == 5\nassert solution.maximumBeauty([70, 80, 46, 1, 28, 87], 111) == 6\nassert solution.maximumBeauty([46, 68, 28], 24) == 3\nassert solution.maximumBeauty([79, 23, 7, 69, 54, 99], 181) == 6\nassert solution.maximumBeauty([66, 40, 17, 69, 45, 32, 92, 61, 13, 89], 53) == 10\nassert solution.maximumBeauty([84, 50, 19, 81, 54, 26, 30, 13, 89], 13) == 4\nassert solution.maximumBeauty([28, 82], 78) == 2\nassert solution.maximumBeauty([3, 97, 67, 53, 19, 44, 45], 27) == 5\nassert solution.maximumBeauty([83, 50, 44, 34, 77, 82, 60], 12) == 4\nassert solution.maximumBeauty([10, 7, 48, 99, 4], 145) == 5\nassert solution.maximumBeauty([48, 42, 69, 28, 23, 55, 11, 99, 78, 41], 176) == 10\nassert solution.maximumBeauty([41, 76, 27, 71], 186) == 4\nassert solution.maximumBeauty([35, 37, 21, 86], 39) == 4\nassert solution.maximumBeauty([56, 90, 2, 74, 38, 69, 89, 28, 58, 11], 198) == 10\nassert solution.maximumBeauty([72, 22, 3, 75, 96, 55, 31], 47) == 7\nassert solution.maximumBeauty([90, 89, 25, 62, 70, 7, 17, 60, 14], 114) == 9\nassert solution.maximumBeauty([23, 94, 79], 93) == 3\nassert solution.maximumBeauty([75, 12, 11, 95, 56], 52) == 5",
  "inefficient_solution": "class Solution:\n    def maximumBeauty(self, nums: List[int], k: int) -> int:\n        m = max(nums) + k * 2 + 2\n        d = [0] * (m * 100000)\n        for x in nums:\n            for i in range(x - k, x + k + 1):\n                if i < 0 or i > m:\n                    continue\n                d[i] += 1\n        ans = 0\n        for x in range(m):\n            if d[x] > 0:\n                temp = [0] * 1000000\n                for i in range(x - k, x + k + 1):\n                    if i < 0 or i > m:\n                        continue\n                    temp[i] = d[i]\n                temp = self.helper(temp)\n                if temp > ans:\n                    ans = temp\n        return ans\n\n    def helper(self, nums):\n        m = max(nums) + 10000\n        d = [0] * m\n        for x in nums:\n            d[x] += 1\n        ans = s = 0\n        for x in d:\n            s += x\n            ans = max(ans, s)\n        return ans",
  "is_python": true
}