{
  "problem_idx": 1898,
  "task_name": "Maximum Number of Removable Characters",
  "markdown_description": "\nYou are given two strings `s` and `p` where `p` is a **subsequence** of `s`. You are also given a **distinct 0-indexed** integer array `removable` containing a subset of indices of `s` (`s` is also **0-indexed**).\n\n\nYou want to choose an integer `k` (`0 <= k <= removable.length`) such that, after removing `k` characters from `s` using the **first** `k` indices in `removable`, `p` is still a **subsequence** of `s`. More formally, you will mark the character at `s[removable[i]]` for each `0 <= i < k`, then remove all marked characters and check if `p` is still a subsequence.\n\n\nReturn *the **maximum*** `k` *you can choose such that* `p` *is still a **subsequence** of* `s` *after the removals*.\n\n\nA **subsequence** of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcacb\", p = \"ab\", removable = [3,1,0]\n**Output:** 2\n**Explanation**: After removing the characters at indices 3 and 1, \"a~~**b**~~c~~**a**~~cb\" becomes \"accb\".\n\"ab\" is a subsequence of \"**a**cc**b**\".\nIf we remove the characters at indices 3, 1, and 0, \"~~**ab**~~c~~**a**~~cb\" becomes \"ccb\", and \"ab\" is no longer a subsequence.\nHence, the maximum k is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]\n**Output:** 1\n**Explanation**: After removing the character at index 3, \"abc~~**b**~~ddddd\" becomes \"abcddddd\".\n\"abcd\" is a subsequence of \"**abcd**dddd\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]\n**Output:** 0\n**Explanation**: If you remove the first index in the array removable, \"abc\" is no longer a subsequence.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= p.length <= s.length <= 105`\n* `0 <= removable.length < s.length`\n* `0 <= removable[i] < s.length`\n* `p` is a **subsequence** of `s`.\n* `s` and `p` both consist of lowercase English letters.\n* The elements in `removable` are **distinct**.\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:\n        def check(k):\n            i = j = 0\n            ids = set(removable[:k])\n            while i < m and j < n:\n                if i not in ids and s[i] == p[j]:\n                    j += 1\n                i += 1\n            return j == n\n\n        m, n = len(s), len(p)\n        left, right = 0, len(removable)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:\n        def check(k):\n            i = j = 0\n            ids = set(removable[:k])\n            while i < m and j < n:\n                if i not in ids and s[i] == p[j]:\n                    j += 1\n                i += 1\n            return j == n\n\n        m, n = len(s), len(p)\n        left, right = 0, len(removable)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random strings\n    s_len = random.randint(2, 10)\n    s = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=s_len))\n    \n    p_len = random.randint(1, s_len)\n    p = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=p_len))\n    \n    # Generate random removable indices\n    max_removable = min(len(s), s_len - p_len)\n    removable = random.sample(range(len(s)), random.randint(0, max_removable))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumRemovals(s, p, removable)\n\n    return s, p, removable, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, p, removable, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumRemovals(s, p, removable) == expected_result\n        test_case_generator_results.append(f\"assert solution.maximumRemovals('{s}', '{p}', {removable}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumRemovals('xrd', 'ryv', []) == 0\nassert solution.maximumRemovals('sjprgivbev', 'r', [6, 1]) == 2\nassert solution.maximumRemovals('kkrgphmb', 'llsb', [4, 1]) == 0\nassert solution.maximumRemovals('rug', 'ue', [2]) == 0\nassert solution.maximumRemovals('iqbsjgdko', 'h', [4, 3, 5, 0, 7, 1, 2, 8]) == 0\nassert solution.maximumRemovals('bzvxpnfmn', 'dn', [8, 1, 5, 2, 0]) == 0\nassert solution.maximumRemovals('bkwnqvzsn', 'sbbqlzli', []) == 0\nassert solution.maximumRemovals('qbmckqk', 'z', [6, 0, 2, 5, 4]) == 0\nassert solution.maximumRemovals('gqisrwzdf', 'riadbd', [1, 7, 4]) == 0\nassert solution.maximumRemovals('xsmkyoq', 'zskrj', []) == 0\nassert solution.maximumRemovals('rk', 'ad', []) == 0\nassert solution.maximumRemovals('ez', 't', []) == 0\nassert solution.maximumRemovals('xpqup', 'blk', [4, 0]) == 0\nassert solution.maximumRemovals('dzyyyxyc', 'ewp', []) == 0\nassert solution.maximumRemovals('djlhzvq', 'fsfs', [6, 4, 1]) == 0\nassert solution.maximumRemovals('prhhsry', 'o', [6, 1, 4]) == 0\nassert solution.maximumRemovals('ukulhgpsv', 'bmlwtdbrt', []) == 0\nassert solution.maximumRemovals('vwuw', 'fjg', []) == 0\nassert solution.maximumRemovals('ar', 'q', []) == 0\nassert solution.maximumRemovals('stvnxvt', 'qdl', [5, 4]) == 0\nassert solution.maximumRemovals('qzrfx', 'rkti', []) == 0\nassert solution.maximumRemovals('jphk', 'obb', [3]) == 0\nassert solution.maximumRemovals('acusktc', 'nuze', [5, 1, 3]) == 0\nassert solution.maximumRemovals('ew', 'l', []) == 0\nassert solution.maximumRemovals('mgmkwxf', 'hsjtbs', []) == 0\nassert solution.maximumRemovals('hhhdnfmsd', 'uchpfrfzg', []) == 0\nassert solution.maximumRemovals('yubtc', 'hx', [0, 1, 3]) == 0\nassert solution.maximumRemovals('vz', 'jo', []) == 0\nassert solution.maximumRemovals('knhzc', 'fu', []) == 0\nassert solution.maximumRemovals('mkixu', 'vhh', [1]) == 0\nassert solution.maximumRemovals('gcneamngx', 'mtiywwolf', []) == 0\nassert solution.maximumRemovals('gjmoslkz', 'zqhhyldk', []) == 0\nassert solution.maximumRemovals('fzhhodxs', 'ye', [5, 7, 4, 1, 2]) == 0\nassert solution.maximumRemovals('rnedv', 'ki', [1]) == 0\nassert solution.maximumRemovals('cewq', 'cuhq', []) == 0\nassert solution.maximumRemovals('rcaeyxevox', 'jigp', []) == 0\nassert solution.maximumRemovals('ptcjtpp', 'ufhd', [1, 0]) == 0\nassert solution.maximumRemovals('xfocov', 'nld', [2, 0]) == 0\nassert solution.maximumRemovals('csrvnmg', 'gqielf', []) == 0\nassert solution.maximumRemovals('webht', 'wfkw', []) == 0\nassert solution.maximumRemovals('xsh', 'b', []) == 0\nassert solution.maximumRemovals('dvbtutkktu', 'nti', [6, 4, 1, 5, 8, 7]) == 0\nassert solution.maximumRemovals('fuvog', 'eaj', [2, 1]) == 0\nassert solution.maximumRemovals('pjnf', 'f', [2, 3]) == 1\nassert solution.maximumRemovals('qz', 'qm', []) == 0\nassert solution.maximumRemovals('jbhqwgmhto', 'uqsh', []) == 0\nassert solution.maximumRemovals('gycmoxua', 'urqsee', [4, 5]) == 0\nassert solution.maximumRemovals('uubxrph', 'xiwqphs', []) == 0\nassert solution.maximumRemovals('rawyrxfif', 'xqvlcdo', [5]) == 0\nassert solution.maximumRemovals('addggqvu', 'xg', []) == 0\nassert solution.maximumRemovals('sh', 'yz', []) == 0\nassert solution.maximumRemovals('unik', 'xnod', []) == 0\nassert solution.maximumRemovals('nxbubyrtbg', 'azjrqlhy', []) == 0\nassert solution.maximumRemovals('aitwi', 'pxy', []) == 0\nassert solution.maximumRemovals('hx', 'kk', []) == 0\nassert solution.maximumRemovals('naypch', 'ap', [0, 4, 3, 1]) == 2\nassert solution.maximumRemovals('rxwhdci', 'k', [5, 1, 4, 2, 3, 6]) == 0\nassert solution.maximumRemovals('unvbzxmom', 'ugxjnoz', []) == 0\nassert solution.maximumRemovals('klxbvffju', 'l', [0, 4, 6, 8, 5, 1, 7, 2]) == 5\nassert solution.maximumRemovals('rbldn', 'w', []) == 0\nassert solution.maximumRemovals('mcop', 'k', []) == 0\nassert solution.maximumRemovals('sljb', 'l', [2, 3, 1]) == 2\nassert solution.maximumRemovals('tbdahqim', 'qg', [2, 7, 4, 6]) == 0\nassert solution.maximumRemovals('tdfuhlpa', 'ggu', [3, 7]) == 0\nassert solution.maximumRemovals('mdn', 'ugz', []) == 0\nassert solution.maximumRemovals('rxvklpiady', 'dgkcqhmxz', []) == 0\nassert solution.maximumRemovals('phg', 'uqf', []) == 0\nassert solution.maximumRemovals('jzov', 'yyax', []) == 0\nassert solution.maximumRemovals('dneexxbwzo', 'olihztoal', [2]) == 0\nassert solution.maximumRemovals('ccub', 'fv', [2]) == 0\nassert solution.maximumRemovals('veefnsvfxz', 'zhjjjyze', []) == 0\nassert solution.maximumRemovals('vdkqnkg', 'unkc', [0, 1, 6]) == 0\nassert solution.maximumRemovals('gcceyihr', 'zpv', [5, 6, 4]) == 0\nassert solution.maximumRemovals('lxbx', 'kt', [1]) == 0\nassert solution.maximumRemovals('pc', 's', [0]) == 0\nassert solution.maximumRemovals('wddbpmp', 'asnbq', []) == 0\nassert solution.maximumRemovals('zqg', 'aq', [0]) == 0\nassert solution.maximumRemovals('jgzuxoku', 'uwikha', [4, 7]) == 0\nassert solution.maximumRemovals('hiflsnanp', 'uv', [0]) == 0\nassert solution.maximumRemovals('qjaffqvv', 'aqgsnxm', [2]) == 0\nassert solution.maximumRemovals('xrzhek', 'bqvw', [5, 2]) == 0\nassert solution.maximumRemovals('wayd', 'bqau', []) == 0\nassert solution.maximumRemovals('zopmttyp', 'fuu', [7, 6, 5, 2, 3]) == 0\nassert solution.maximumRemovals('tmcgmhlx', 'djobjnws', []) == 0\nassert solution.maximumRemovals('yxupfqvehx', 'zmqhe', [2, 7, 0, 8, 1]) == 0\nassert solution.maximumRemovals('kzc', 'orv', []) == 0\nassert solution.maximumRemovals('kjccps', 'erhja', []) == 0\nassert solution.maximumRemovals('co', 'ys', []) == 0\nassert solution.maximumRemovals('qexjxhxyd', 'btf', [8, 4, 0, 6]) == 0\nassert solution.maximumRemovals('imaufddsd', 'arzspc', [4]) == 0\nassert solution.maximumRemovals('igywbilzk', 'ddxigds', []) == 0\nassert solution.maximumRemovals('cnc', 'dw', []) == 0\nassert solution.maximumRemovals('ccouch', 'unhdj', [0]) == 0\nassert solution.maximumRemovals('pzlabo', 'ddrr', []) == 0\nassert solution.maximumRemovals('xnmskqchr', 'vzzcpqlit', []) == 0\nassert solution.maximumRemovals('qggzqz', 'iqh', [2, 5]) == 0\nassert solution.maximumRemovals('doqlzlyezl', 'ytitksxma', []) == 0\nassert solution.maximumRemovals('jetq', 'tmb', []) == 0\nassert solution.maximumRemovals('qacubcw', 'ymhddd', [1]) == 0\nassert solution.maximumRemovals('jfrskpcohr', 'wvmpfyhn', []) == 0",
  "inefficient_solution": "class Solution:\n    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:\n        def check(k):\n            s_list = list(s)\n            for i in range(k):\n                s_list[removable[i]] = 'X'\n            s_list = [c for c in s_list if c != 'X']\n            s_str = ''.join(s_list)\n            i = j = 0\n            while i < len(s_str) and j < len(p):\n                if s_str[i] == p[j]:\n                    j += 1\n                i += 1\n            return j == len(p)\n\n        m, n = len(s), len(p)\n        removable_dict = {i: c for i, c in enumerate(s)}\n        removable_set = set(removable)\n        left, right = 0, len(removable)\n        while left < right:\n            mid = (left + right + 1) >> 1\n            if check(mid):\n                left = mid\n            else:\n                right = mid - 1\n        return left",
  "is_python": true
}