{
  "problem_idx": 2262,
  "task_name": "Total Appeal of A String",
  "markdown_description": "\nThe **appeal** of a string is the number of **distinct** characters found in the string.\n\n\n* For example, the appeal of `\"abbca\"` is `3` because it has `3` distinct characters: `'a'`, `'b'`, and `'c'`.\n\n\nGiven a string `s`, return *the **total appeal of all of its **substrings**.***\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abbca\"\n**Output:** 28\n**Explanation:** The following are the substrings of \"abbca\":\n- Substrings of length 1: \"a\", \"b\", \"b\", \"c\", \"a\" have an appeal of 1, 1, 1, 1, and 1 respectively. The sum is 5.\n- Substrings of length 2: \"ab\", \"bb\", \"bc\", \"ca\" have an appeal of 2, 1, 2, and 2 respectively. The sum is 7.\n- Substrings of length 3: \"abb\", \"bbc\", \"bca\" have an appeal of 2, 2, and 3 respectively. The sum is 7.\n- Substrings of length 4: \"abbc\", \"bbca\" have an appeal of 3 and 3 respectively. The sum is 6.\n- Substrings of length 5: \"abbca\" has an appeal of 3. The sum is 3.\nThe total sum is 5 + 7 + 7 + 6 + 3 = 28.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"code\"\n**Output:** 20\n**Explanation:** The following are the substrings of \"code\":\n- Substrings of length 1: \"c\", \"o\", \"d\", \"e\" have an appeal of 1, 1, 1, and 1 respectively. The sum is 4.\n- Substrings of length 2: \"co\", \"od\", \"de\" have an appeal of 2, 2, and 2 respectively. The sum is 6.\n- Substrings of length 3: \"cod\", \"ode\" have an appeal of 3 and 3 respectively. The sum is 6.\n- Substrings of length 4: \"code\" has an appeal of 4. The sum is 4.\nThe total sum is 4 + 6 + 6 + 4 = 20.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def appealSum(self, s: str) -> int:\n        ans = t = 0\n        pos = [-1] * 26\n        for i, c in enumerate(s):\n            c = ord(c) - ord('a')\n            t += i - pos[c]\n            ans += t\n            pos[c] = i\n        return ans\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choice(string.ascii_lowercase) for _ in range(random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.appealSum(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.appealSum(s) == expected_result\n        print(f\"assert solution.appealSum('{s}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n        test_case_generator_results.append(f\"assert solution.appealSum('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.appealSum('pazfp') == 34\nassert solution.appealSum('iyojh') == 35\nassert solution.appealSum('vgixtgna') == 114\nassert solution.appealSum('vhvcmoq') == 79\nassert solution.appealSum('zmevn') == 35\nassert solution.appealSum('uni') == 10\nassert solution.appealSum('admhopene') == 158\nassert solution.appealSum('k') == 1\nassert solution.appealSum('cycosyt') == 75\nassert solution.appealSum('mhssp') == 29\nassert solution.appealSum('lib') == 10\nassert solution.appealSum('ottifipy') == 96\nassert solution.appealSum('tyzhglokz') == 162\nassert solution.appealSum('ortipshejs') == 214\nassert solution.appealSum('kfwab') == 35\nassert solution.appealSum('rdw') == 10\nassert solution.appealSum('mn') == 4\nassert solution.appealSum('fkstqf') == 55\nassert solution.appealSum('akqbg') == 35\nassert solution.appealSum('njznx') == 33\nassert solution.appealSum('nqcbfkpu') == 120\nassert solution.appealSum('kxl') == 10\nassert solution.appealSum('dxkfqbwli') == 165\nassert solution.appealSum('ipqlzahih') == 156\nassert solution.appealSum('ykj') == 10\nassert solution.appealSum('xlrufnjk') == 120\nassert solution.appealSum('vb') == 4\nassert solution.appealSum('dv') == 4\nassert solution.appealSum('vgudiqroq') == 159\nassert solution.appealSum('anqic') == 35\nassert solution.appealSum('mluvnby') == 84\nassert solution.appealSum('osilke') == 56\nassert solution.appealSum('xwzxcdw') == 78\nassert solution.appealSum('pzkamnfwm') == 160\nassert solution.appealSum('mtl') == 10\nassert solution.appealSum('bowsktsff') == 145\nassert solution.appealSum('ozvnms') == 56\nassert solution.appealSum('xjzte') == 35\nassert solution.appealSum('afrdet') == 56\nassert solution.appealSum('z') == 1\nassert solution.appealSum('bzcooj') == 48\nassert solution.appealSum('xuddwiwb') == 95\nassert solution.appealSum('pajws') == 35\nassert solution.appealSum('xmiwj') == 35\nassert solution.appealSum('vwxvjrrei') == 141\nassert solution.appealSum('k') == 1\nassert solution.appealSum('uhpx') == 20\nassert solution.appealSum('skjtkmtygt') == 185\nassert solution.appealSum('m') == 1\nassert solution.appealSum('hvxv') == 18\nassert solution.appealSum('cxsfagl') == 84\nassert solution.appealSum('xx') == 3\nassert solution.appealSum('ucp') == 10\nassert solution.appealSum('jncl') == 20\nassert solution.appealSum('mqmxaadxfd') == 168\nassert solution.appealSum('xji') == 10\nassert solution.appealSum('rsyfljio') == 120\nassert solution.appealSum('wcjzpnu') == 84\nassert solution.appealSum('cud') == 10\nassert solution.appealSum('aowfgfvj') == 108\nassert solution.appealSum('jwmlecmuc') == 150\nassert solution.appealSum('dhlaxktrt') == 158\nassert solution.appealSum('gdi') == 10\nassert solution.appealSum('ipqxylcd') == 120\nassert solution.appealSum('utljddjmqo') == 179\nassert solution.appealSum('y') == 1\nassert solution.appealSum('tjqdnad') == 80\nassert solution.appealSum('ngic') == 20\nassert solution.appealSum('l') == 1\nassert solution.appealSum('cufeovuo') == 111\nassert solution.appealSum('tyeg') == 20\nassert solution.appealSum('cr') == 4\nassert solution.appealSum('ub') == 4\nassert solution.appealSum('zowwkxizpo') == 194\nassert solution.appealSum('crm') == 10\nassert solution.appealSum('khawfjkgmi') == 216\nassert solution.appealSum('m') == 1\nassert solution.appealSum('whzppgasn') == 145\nassert solution.appealSum('mvqjmkf') == 81\nassert solution.appealSum('myhn') == 20\nassert solution.appealSum('hnrkuk') == 52\nassert solution.appealSum('wvbwyhhuj') == 141\nassert solution.appealSum('jlek') == 20\nassert solution.appealSum('ifnukr') == 56\nassert solution.appealSum('zp') == 4\nassert solution.appealSum('cfpgypyi') == 101\nassert solution.appealSum('xhp') == 10\nassert solution.appealSum('aos') == 10\nassert solution.appealSum('hs') == 4\nassert solution.appealSum('zpcvlrdp') == 118\nassert solution.appealSum('dgswc') == 35\nassert solution.appealSum('dm') == 4\nassert solution.appealSum('wxygcmwi') == 118\nassert solution.appealSum('wikgk') == 32\nassert solution.appealSum('hxniplqxg') == 161\nassert solution.appealSum('tmcoizck') == 114\nassert solution.appealSum('nymde') == 35\nassert solution.appealSum('pbpytq') == 52\nassert solution.appealSum('lxnx') == 18\nassert solution.appealSum('kuisytkh') == 118",
  "inefficient_solution": "class Solution:\n    def appealSum(self, s: str) -> int:\n        ans = 0\n        for length in range(1, len(s) + 1):\n            for i in range(len(s) - length + 1):\n                substring = s[i:i + length]\n                distinct_chars = set(substring)\n                t = 0\n                for char in distinct_chars:\n                    t += substring.count(char)\n                ans += t\n        return ans",
  "is_python": true
}