{
  "problem_idx": 950,
  "task_name": "Reveal Cards In Increasing Order",
  "markdown_description": "\nYou are given an integer array `deck`. There is a deck of cards where every card has a unique integer. The integer on the `ith` card is `deck[i]`.\n\n\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\n\n\nYou will do the following steps repeatedly until all cards are revealed:\n\n\n1. Take the top card of the deck, reveal it, and take it out of the deck.\n2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\n3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.\n\n\nReturn *an ordering of the deck that would reveal the cards in increasing order*.\n\n\n**Note** that the first entry in the answer is considered to be the top of the deck.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** deck = [17,13,11,2,3,5,7]\n**Output:** [2,13,3,11,5,17,7]\n**Explanation:** \nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** deck = [1,1000]\n**Output:** [1,1000]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= deck.length <= 1000`\n* `1 <= deck[i] <= 106`\n* All the values of `deck` are **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:\n        q = deque()\n        for v in sorted(deck, reverse=True):\n            if q:\n                q.appendleft(q.pop())\n            q.appendleft(v)\n        return list(q)\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    deck = random.sample(range(1, 101), random.randint(1, 11))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.deckRevealedIncreasing(deck)\n\n    return deck, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        deck, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.deckRevealedIncreasing(deck) == expected_result\n        print(f\"assert solution.deckRevealedIncreasing({deck}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.deckRevealedIncreasing({deck}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.deckRevealedIncreasing([70, 54, 15]) == [15, 70, 54]\nassert solution.deckRevealedIncreasing([54, 83, 11, 94, 42, 50]) == [11, 54, 42, 94, 50, 83]\nassert solution.deckRevealedIncreasing([4, 52, 81, 56, 44, 100, 99]) == [4, 99, 44, 81, 52, 100, 56]\nassert solution.deckRevealedIncreasing([96, 29, 34]) == [29, 96, 34]\nassert solution.deckRevealedIncreasing([22]) == [22]\nassert solution.deckRevealedIncreasing([17, 11, 67, 59, 64, 83, 52, 75, 47, 56]) == [11, 59, 17, 83, 47, 64, 52, 75, 56, 67]\nassert solution.deckRevealedIncreasing([55, 44]) == [44, 55]\nassert solution.deckRevealedIncreasing([56, 39, 20, 26, 50, 69, 1, 44, 31, 18, 16]) == [1, 50, 16, 39, 18, 69, 20, 44, 26, 56, 31]\nassert solution.deckRevealedIncreasing([49, 11]) == [11, 49]\nassert solution.deckRevealedIncreasing([24, 18, 54, 15, 27, 95, 9, 91]) == [9, 27, 15, 91, 18, 54, 24, 95]\nassert solution.deckRevealedIncreasing([51, 45, 23, 90, 73, 48, 75, 96, 49]) == [23, 96, 45, 73, 48, 90, 49, 75, 51]\nassert solution.deckRevealedIncreasing([94, 52, 9, 96, 66, 47, 8, 95, 93]) == [8, 96, 9, 93, 47, 95, 52, 94, 66]\nassert solution.deckRevealedIncreasing([50, 48, 92, 68, 20, 34, 9, 10, 45, 42]) == [9, 45, 10, 92, 20, 48, 34, 68, 42, 50]\nassert solution.deckRevealedIncreasing([100, 84, 93, 32, 39, 52]) == [32, 84, 39, 100, 52, 93]\nassert solution.deckRevealedIncreasing([53, 1, 64, 3, 81]) == [1, 81, 3, 64, 53]\nassert solution.deckRevealedIncreasing([91, 44, 69, 8, 62, 64, 21, 50, 96, 40]) == [8, 62, 21, 96, 40, 64, 44, 91, 50, 69]\nassert solution.deckRevealedIncreasing([36, 18, 45]) == [18, 45, 36]\nassert solution.deckRevealedIncreasing([59, 24, 2, 63, 31, 25, 14, 32]) == [2, 31, 14, 59, 24, 32, 25, 63]\nassert solution.deckRevealedIncreasing([60, 20, 19, 2]) == [2, 20, 19, 60]\nassert solution.deckRevealedIncreasing([84, 79, 4, 34, 40, 22, 42, 100, 71, 52, 13]) == [4, 79, 13, 52, 22, 100, 34, 71, 40, 84, 42]\nassert solution.deckRevealedIncreasing([91, 36, 62, 16, 27, 12, 11, 30]) == [11, 30, 12, 62, 16, 36, 27, 91]\nassert solution.deckRevealedIncreasing([89, 61, 33, 28, 82, 62, 24, 38, 78]) == [24, 89, 28, 62, 33, 82, 38, 78, 61]\nassert solution.deckRevealedIncreasing([16, 65]) == [16, 65]\nassert solution.deckRevealedIncreasing([65, 51]) == [51, 65]\nassert solution.deckRevealedIncreasing([48, 17, 64, 6]) == [6, 48, 17, 64]\nassert solution.deckRevealedIncreasing([79, 22, 2, 24, 82]) == [2, 82, 22, 79, 24]\nassert solution.deckRevealedIncreasing([16, 49, 1, 56]) == [1, 49, 16, 56]\nassert solution.deckRevealedIncreasing([69, 7]) == [7, 69]\nassert solution.deckRevealedIncreasing([8, 14, 16, 71]) == [8, 16, 14, 71]\nassert solution.deckRevealedIncreasing([78, 16, 92, 39, 71, 82, 94, 9]) == [9, 78, 16, 92, 39, 82, 71, 94]\nassert solution.deckRevealedIncreasing([8, 26, 85, 62]) == [8, 62, 26, 85]\nassert solution.deckRevealedIncreasing([51, 87, 53, 41, 23, 7, 10, 32, 2]) == [2, 87, 7, 41, 10, 53, 23, 51, 32]\nassert solution.deckRevealedIncreasing([98, 69, 68, 81, 20, 59, 88, 91, 95, 43, 99]) == [20, 95, 43, 88, 59, 99, 68, 91, 69, 98, 81]\nassert solution.deckRevealedIncreasing([89, 7, 12, 32, 58, 64]) == [7, 58, 12, 89, 32, 64]\nassert solution.deckRevealedIncreasing([59]) == [59]\nassert solution.deckRevealedIncreasing([40, 24, 48, 37, 18, 35, 10, 15, 68]) == [10, 68, 15, 37, 18, 48, 24, 40, 35]\nassert solution.deckRevealedIncreasing([65, 97, 79, 71, 67, 25, 76]) == [25, 79, 65, 76, 67, 97, 71]\nassert solution.deckRevealedIncreasing([60, 59, 92, 100, 75, 72, 33, 24]) == [24, 72, 33, 92, 59, 75, 60, 100]\nassert solution.deckRevealedIncreasing([77, 89, 31]) == [31, 89, 77]\nassert solution.deckRevealedIncreasing([66, 99, 28, 85, 93, 42, 82, 64, 92, 88]) == [28, 85, 42, 99, 64, 88, 66, 93, 82, 92]\nassert solution.deckRevealedIncreasing([85, 37, 71, 3, 62, 42, 58]) == [3, 71, 37, 62, 42, 85, 58]\nassert solution.deckRevealedIncreasing([28, 78, 64, 15, 17, 8, 45]) == [8, 64, 15, 45, 17, 78, 28]\nassert solution.deckRevealedIncreasing([52, 95, 59, 38, 22, 32, 88, 17, 83, 94]) == [17, 59, 22, 95, 32, 83, 38, 94, 52, 88]\nassert solution.deckRevealedIncreasing([2, 77, 9, 35, 42]) == [2, 77, 9, 42, 35]\nassert solution.deckRevealedIncreasing([20, 35, 17, 8, 22, 2, 5, 31, 15]) == [2, 35, 5, 20, 8, 31, 15, 22, 17]\nassert solution.deckRevealedIncreasing([85, 24, 6, 91, 68, 46, 44, 39, 12, 81]) == [6, 46, 12, 91, 24, 68, 39, 85, 44, 81]\nassert solution.deckRevealedIncreasing([84, 61, 66]) == [61, 84, 66]\nassert solution.deckRevealedIncreasing([13]) == [13]\nassert solution.deckRevealedIncreasing([44, 65, 16, 15, 32]) == [15, 65, 16, 44, 32]\nassert solution.deckRevealedIncreasing([81, 80, 86, 28, 39]) == [28, 86, 39, 81, 80]\nassert solution.deckRevealedIncreasing([7, 41, 14, 2, 92, 23, 73]) == [2, 73, 7, 41, 14, 92, 23]\nassert solution.deckRevealedIncreasing([42, 35, 18, 12, 33, 71, 94, 29]) == [12, 35, 18, 71, 29, 42, 33, 94]\nassert solution.deckRevealedIncreasing([63, 5, 12]) == [5, 63, 12]\nassert solution.deckRevealedIncreasing([58, 20, 23, 75, 11, 18, 59, 52]) == [11, 52, 18, 59, 20, 58, 23, 75]\nassert solution.deckRevealedIncreasing([19, 21, 46, 2, 91, 3]) == [2, 21, 3, 91, 19, 46]\nassert solution.deckRevealedIncreasing([34, 7]) == [7, 34]\nassert solution.deckRevealedIncreasing([92, 60, 65, 33, 11, 46, 49, 53, 70, 68]) == [11, 60, 33, 92, 46, 65, 49, 70, 53, 68]\nassert solution.deckRevealedIncreasing([76, 72, 47, 12]) == [12, 72, 47, 76]\nassert solution.deckRevealedIncreasing([82, 47, 19, 48, 51, 52, 95, 66]) == [19, 52, 47, 82, 48, 66, 51, 95]\nassert solution.deckRevealedIncreasing([92, 96]) == [92, 96]\nassert solution.deckRevealedIncreasing([2, 46, 13, 31, 99, 19, 54, 30, 10, 90, 48]) == [2, 54, 10, 46, 13, 99, 19, 48, 30, 90, 31]\nassert solution.deckRevealedIncreasing([78, 92, 30, 51, 54]) == [30, 92, 51, 78, 54]\nassert solution.deckRevealedIncreasing([8, 94]) == [8, 94]\nassert solution.deckRevealedIncreasing([44, 48, 52, 16]) == [16, 48, 44, 52]\nassert solution.deckRevealedIncreasing([70, 64, 31]) == [31, 70, 64]\nassert solution.deckRevealedIncreasing([50, 87, 80]) == [50, 87, 80]\nassert solution.deckRevealedIncreasing([58, 15, 75, 80, 11, 40, 59, 47, 30, 34, 87]) == [11, 75, 15, 58, 30, 87, 34, 59, 40, 80, 47]\nassert solution.deckRevealedIncreasing([63, 72, 36, 33, 6, 53]) == [6, 53, 33, 72, 36, 63]\nassert solution.deckRevealedIncreasing([94, 97, 53, 39, 33, 90, 37, 57, 95, 59, 19]) == [19, 94, 33, 59, 37, 97, 39, 90, 53, 95, 57]\nassert solution.deckRevealedIncreasing([51, 89, 5, 42]) == [5, 51, 42, 89]\nassert solution.deckRevealedIncreasing([30, 66, 75, 67, 81, 84, 1, 94, 77]) == [1, 94, 30, 77, 66, 84, 67, 81, 75]\nassert solution.deckRevealedIncreasing([87, 74, 11, 47, 93]) == [11, 93, 47, 87, 74]\nassert solution.deckRevealedIncreasing([72, 54, 33, 31, 4]) == [4, 72, 31, 54, 33]\nassert solution.deckRevealedIncreasing([35, 60, 34, 28, 24, 52]) == [24, 35, 28, 60, 34, 52]\nassert solution.deckRevealedIncreasing([30, 46, 6, 72, 36, 21, 1, 10]) == [1, 30, 6, 46, 10, 36, 21, 72]\nassert solution.deckRevealedIncreasing([69, 6]) == [6, 69]\nassert solution.deckRevealedIncreasing([48, 6, 75, 77, 90]) == [6, 90, 48, 77, 75]\nassert solution.deckRevealedIncreasing([31, 88, 41, 62, 47, 4, 26, 30]) == [4, 41, 26, 62, 30, 47, 31, 88]\nassert solution.deckRevealedIncreasing([88, 86, 40, 37]) == [37, 86, 40, 88]\nassert solution.deckRevealedIncreasing([2, 69, 100, 40, 1]) == [1, 100, 2, 69, 40]\nassert solution.deckRevealedIncreasing([45, 11, 17, 72, 33, 97, 13]) == [11, 72, 13, 45, 17, 97, 33]\nassert solution.deckRevealedIncreasing([42, 77]) == [42, 77]\nassert solution.deckRevealedIncreasing([3, 25, 89, 2]) == [2, 25, 3, 89]\nassert solution.deckRevealedIncreasing([24, 82, 61, 80, 91, 29, 70, 49, 13, 67]) == [13, 67, 24, 91, 29, 70, 49, 82, 61, 80]\nassert solution.deckRevealedIncreasing([100, 54, 45]) == [45, 100, 54]\nassert solution.deckRevealedIncreasing([16]) == [16]\nassert solution.deckRevealedIncreasing([66, 9, 59, 45, 88, 16, 26]) == [9, 66, 16, 59, 26, 88, 45]\nassert solution.deckRevealedIncreasing([60, 49, 92, 37, 17, 14, 3, 8, 16]) == [3, 92, 8, 37, 14, 60, 16, 49, 17]\nassert solution.deckRevealedIncreasing([71, 34, 39, 57, 42, 69, 40, 35]) == [34, 42, 35, 69, 39, 57, 40, 71]\nassert solution.deckRevealedIncreasing([44, 7]) == [7, 44]\nassert solution.deckRevealedIncreasing([63, 37, 87, 40, 2, 8, 93]) == [2, 87, 8, 63, 37, 93, 40]\nassert solution.deckRevealedIncreasing([63, 100, 25, 82, 48, 59, 94, 52, 26, 84]) == [25, 63, 26, 100, 48, 82, 52, 94, 59, 84]\nassert solution.deckRevealedIncreasing([19]) == [19]\nassert solution.deckRevealedIncreasing([1, 28, 58, 40, 95, 60, 52]) == [1, 60, 28, 58, 40, 95, 52]\nassert solution.deckRevealedIncreasing([95, 88]) == [88, 95]\nassert solution.deckRevealedIncreasing([7]) == [7]\nassert solution.deckRevealedIncreasing([89, 78, 41, 94, 90, 21, 70, 35, 85]) == [21, 94, 35, 85, 41, 90, 70, 89, 78]\nassert solution.deckRevealedIncreasing([47, 26, 89, 87]) == [26, 87, 47, 89]\nassert solution.deckRevealedIncreasing([87, 85, 89, 67, 21, 50, 54]) == [21, 87, 50, 85, 54, 89, 67]\nassert solution.deckRevealedIncreasing([14, 53, 8, 78, 39, 84]) == [8, 53, 14, 84, 39, 78]",
  "inefficient_solution": "class Solution:\n    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:\n        q = deque(deck)\n        result = []\n        while q:\n            new_deck = []\n            for _ in range(len(q)):\n                new_deck.append(q.popleft())\n            q.extendleft(new_deck)\n            if q:\n                new_deck = []\n                for _ in range(len(q)):\n                    new_deck.append(q.popleft())\n                q.extendleft(new_deck)\n            result.append(q.popleft())\n        return result",
  "is_python": true
}