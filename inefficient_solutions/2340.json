{
  "problem_idx": 2340,
  "task_name": "Minimum Adjacent Swaps to Make a Valid Array",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`.\n\n\n**Swaps** of **adjacent** elements are able to be performed on `nums`.\n\n\nA **valid** array meets the following conditions:\n\n\n* The largest element (any of the largest elements if there are multiple) is at the rightmost position in the array.\n* The smallest element (any of the smallest elements if there are multiple) is at the leftmost position in the array.\n\n\nReturn *the **minimum** swaps required to make* `nums` *a valid array*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,4,5,5,3,1]\n**Output:** 6\n**Explanation:** Perform the following swaps:\n- Swap 1: Swap the 3rd and 4th elements, nums is then [3,4,5,**3**,**5**,1].\n- Swap 2: Swap the 4th and 5th elements, nums is then [3,4,5,3,**1**,**5**].\n- Swap 3: Swap the 3rd and 4th elements, nums is then [3,4,5,**1**,**3**,5].\n- Swap 4: Swap the 2nd and 3rd elements, nums is then [3,4,**1**,**5**,3,5].\n- Swap 5: Swap the 1st and 2nd elements, nums is then [3,**1**,**4**,5,3,5].\n- Swap 6: Swap the 0th and 1st elements, nums is then [**1**,**3**,4,5,3,5].\nIt can be shown that 6 swaps is the minimum swaps required to make a valid array.\n\n```\n\n**Example 2:**\n\n```\n\n**Input:** nums = [9]\n**Output:** 0\n**Explanation:** The array is already valid, so we return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        i = j = 0\n        for k, v in enumerate(nums):\n            if v < nums[i] or (v == nums[i] and k < i):\n                i = k\n            if v >= nums[j] or (v == nums[j] and k > j):\n                j = k\n        return 0 if i == j else i + len(nums) - 1 - j - (i > j)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        i = j = 0\n        for k, v in enumerate(nums):\n            if v < nums[i] or (v == nums[i] and k < i):\n                i = k\n            if v >= nums[j] or (v == nums[j] and k > j):\n                j = k\n        return 0 if i == j else i + len(nums) - 1 - j - (i > j)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumSwaps(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumSwaps(nums) == expected_result\n        print(f\"assert solution.minimumSwaps({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumSwaps({nums}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumSwaps([16, 60, 53]) == 1\nassert solution.minimumSwaps([53, 60, 79, 74, 51, 11, 38, 45, 99]) == 5\nassert solution.minimumSwaps([49, 52, 70, 11, 98]) == 3\nassert solution.minimumSwaps([92, 30, 29, 73]) == 4\nassert solution.minimumSwaps([84, 44, 23, 70, 24, 9]) == 9\nassert solution.minimumSwaps([96, 69, 85, 52, 41, 77, 71, 23, 36]) == 14\nassert solution.minimumSwaps([94, 48, 22, 10, 87, 28]) == 7\nassert solution.minimumSwaps([95, 74, 75, 79, 31, 67, 39]) == 9\nassert solution.minimumSwaps([26, 79, 4, 27, 15, 14]) == 5\nassert solution.minimumSwaps([17, 87, 19, 28]) == 2\nassert solution.minimumSwaps([45, 1, 33, 69, 90, 36, 42]) == 3\nassert solution.minimumSwaps([82, 6, 32, 11, 5, 27]) == 8\nassert solution.minimumSwaps([51, 91, 94, 69, 29, 49]) == 6\nassert solution.minimumSwaps([80, 62, 24, 73]) == 4\nassert solution.minimumSwaps([49, 34, 92, 100, 87, 22, 74, 40, 91, 7]) == 14\nassert solution.minimumSwaps([67, 59, 8]) == 3\nassert solution.minimumSwaps([54, 72, 36, 75]) == 2\nassert solution.minimumSwaps([9, 79, 50, 99, 95, 43, 41, 77]) == 4\nassert solution.minimumSwaps([49, 67, 6, 45, 17, 77]) == 2\nassert solution.minimumSwaps([52, 8, 24, 87, 77]) == 2\nassert solution.minimumSwaps([91, 92, 14]) == 2\nassert solution.minimumSwaps([80, 83]) == 0\nassert solution.minimumSwaps([78, 93, 25, 26, 31, 43, 92, 33]) == 7\nassert solution.minimumSwaps([75, 93, 97, 50, 71, 84, 49, 81]) == 10\nassert solution.minimumSwaps([75, 77, 100, 96, 63, 59, 25, 48, 3]) == 13\nassert solution.minimumSwaps([61, 76, 20, 82, 6, 38]) == 5\nassert solution.minimumSwaps([17, 22, 12, 21, 86, 58, 54, 77, 82]) == 6\nassert solution.minimumSwaps([74, 4, 45, 58, 33, 89, 20, 47, 16]) == 4\nassert solution.minimumSwaps([70, 49, 54, 3, 44, 78, 69, 94, 57, 10]) == 5\nassert solution.minimumSwaps([66, 29, 84, 49, 41, 75, 58]) == 5\nassert solution.minimumSwaps([44, 64, 41, 6, 9]) == 5\nassert solution.minimumSwaps([60, 47, 1, 4, 34]) == 5\nassert solution.minimumSwaps([89, 57, 73, 61, 83, 45, 43, 10]) == 13\nassert solution.minimumSwaps([11, 25, 35, 32, 50, 95, 34, 78]) == 2\nassert solution.minimumSwaps([82, 2, 54, 46, 29]) == 4\nassert solution.minimumSwaps([70, 97, 41, 20, 74, 37, 79, 73, 17, 7]) == 16\nassert solution.minimumSwaps([30, 7]) == 1\nassert solution.minimumSwaps([59, 7, 36, 21, 48, 60, 56, 54]) == 3\nassert solution.minimumSwaps([2, 79, 85, 40, 24, 70, 74, 10, 37, 51]) == 7\nassert solution.minimumSwaps([25, 52, 17, 5]) == 4\nassert solution.minimumSwaps([93, 77, 43, 87, 74, 21, 59, 36, 2, 49]) == 16\nassert solution.minimumSwaps([52, 47, 28, 23, 85, 8]) == 5\nassert solution.minimumSwaps([47, 83, 76, 66, 85, 39, 19, 92]) == 6\nassert solution.minimumSwaps([48, 97]) == 0\nassert solution.minimumSwaps([54, 23, 19, 14, 52, 41]) == 7\nassert solution.minimumSwaps([81, 21, 63]) == 2\nassert solution.minimumSwaps([65, 16, 92]) == 1\nassert solution.minimumSwaps([77, 19, 76]) == 2\nassert solution.minimumSwaps([61, 88, 16, 85, 67, 89, 42]) == 3\nassert solution.minimumSwaps([98, 4]) == 1\nassert solution.minimumSwaps([57, 53, 6, 95, 47, 37]) == 4\nassert solution.minimumSwaps([35, 100, 27, 68, 80, 43, 38]) == 6\nassert solution.minimumSwaps([88, 20, 18, 46, 28, 74]) == 6\nassert solution.minimumSwaps([44, 83]) == 0\nassert solution.minimumSwaps([68, 38, 92, 14, 1, 25, 99]) == 4\nassert solution.minimumSwaps([95, 51, 67, 78, 37, 24, 96]) == 5\nassert solution.minimumSwaps([7, 26, 25, 51, 75, 16]) == 1\nassert solution.minimumSwaps([95, 80, 58, 43, 99, 88, 100, 76, 47, 57]) == 6\nassert solution.minimumSwaps([54, 60, 72, 41, 25, 34]) == 6\nassert solution.minimumSwaps([47, 48, 90, 49, 43]) == 5\nassert solution.minimumSwaps([92, 75, 79, 17]) == 5\nassert solution.minimumSwaps([45, 7, 37, 11, 14, 82, 36, 18, 53]) == 4\nassert solution.minimumSwaps([85, 26, 22, 64, 94, 36, 34, 82]) == 5\nassert solution.minimumSwaps([8, 22, 78, 82, 41, 98, 60, 88, 83, 40]) == 4\nassert solution.minimumSwaps([7, 59, 35, 13, 79, 75]) == 1\nassert solution.minimumSwaps([70, 85, 54, 99, 78, 74]) == 4\nassert solution.minimumSwaps([52, 37, 86, 33, 55, 56, 16]) == 9\nassert solution.minimumSwaps([99, 28]) == 1\nassert solution.minimumSwaps([28, 49]) == 0\nassert solution.minimumSwaps([2, 32]) == 0\nassert solution.minimumSwaps([25, 61, 81, 40, 51, 54]) == 3\nassert solution.minimumSwaps([8, 18, 87, 94, 99, 74, 64, 21, 4, 2]) == 13\nassert solution.minimumSwaps([19, 30, 12, 22, 43, 27, 91, 61, 4, 67]) == 10\nassert solution.minimumSwaps([71, 87, 8, 96, 37, 47, 89]) == 5\nassert solution.minimumSwaps([44, 43, 89, 98, 83, 18]) == 6\nassert solution.minimumSwaps([61, 43, 96, 24]) == 3\nassert solution.minimumSwaps([52, 47, 88, 74, 50]) == 3\nassert solution.minimumSwaps([78, 81, 12, 13, 74, 21, 94]) == 2\nassert solution.minimumSwaps([42, 78, 31, 54, 83, 25]) == 5\nassert solution.minimumSwaps([58, 51, 22, 16, 92, 14, 27]) == 6\nassert solution.minimumSwaps([66, 10]) == 1\nassert solution.minimumSwaps([63, 23, 73, 66]) == 2\nassert solution.minimumSwaps([63, 98, 51, 73, 61]) == 4\nassert solution.minimumSwaps([52, 13, 47, 89, 83]) == 2\nassert solution.minimumSwaps([95, 67, 77, 98]) == 1\nassert solution.minimumSwaps([19, 93, 62, 22]) == 2\nassert solution.minimumSwaps([61, 69, 42, 65, 39]) == 6\nassert solution.minimumSwaps([86, 29, 40, 74, 59, 25, 72, 96, 39, 88]) == 7\nassert solution.minimumSwaps([79, 82, 44, 28, 51, 38, 35, 65, 59, 84]) == 3\nassert solution.minimumSwaps([43, 24, 27, 53, 30, 58, 19]) == 6\nassert solution.minimumSwaps([78, 11, 65, 38, 100, 55]) == 2\nassert solution.minimumSwaps([86, 89, 16, 43]) == 3\nassert solution.minimumSwaps([27, 2, 50, 26, 9, 18, 19, 58, 73, 32]) == 2\nassert solution.minimumSwaps([23, 62, 92, 4, 21, 83, 79, 51]) == 7\nassert solution.minimumSwaps([4, 49, 60, 70, 33, 1]) == 6\nassert solution.minimumSwaps([45, 16, 33, 59]) == 1\nassert solution.minimumSwaps([82, 24]) == 1\nassert solution.minimumSwaps([54, 49, 38, 9, 30]) == 6\nassert solution.minimumSwaps([38, 49, 88]) == 0\nassert solution.minimumSwaps([62, 48, 73, 14, 37]) == 4",
  "inefficient_solution": "class Solution:\n    def minimumSwaps(self, nums: List[int]) -> int:\n        max_val = max(nums)\n        min_val = min(nums)\n        max_indices = [i for i, x in enumerate(nums) if x == max_val]\n        min_indices = [i for i, x in enumerate(nums) if x == min_val]\n        max_len = len(max_indices)\n        min_len = len(min_indices)\n        \n        max_indices_split = []\n        min_indices_split = []\n        for i in range(max_len):\n            max_indices_split.append(max_indices[i])\n            max_indices_split.append(None)\n        for i in range(min_len):\n            min_indices_split.append(None)\n            min_indices_split.append(min_indices[i])\n        max_indices_split.append(None)\n        min_indices_split.append(None)\n        \n        max_indices_split = [x for x in max_indices_split if x is not None]\n        min_indices_split = [x for x in min_indices_split if x is not None]\n        \n        min_swaps = float('inf')\n        for i in range(len(max_indices_split)):\n            for j in range(len(min_indices_split)):\n                max_val_at_j = 0\n                min_val_at_i = 0\n                for k in range(i, len(max_indices_split)):\n                    if max_indices_split[k] == j:\n                        max_val_at_j += 1\n                for k in range(j, len(min_indices_split)):\n                    if min_indices_split[k] == i:\n                        min_val_at_i += 1\n                if max_val_at_j != max_len or min_val_at_i != min_len:\n                    continue\n                swaps = 0\n                for k in range(i, len(max_indices_split)):\n                    if max_indices_split[k] != None:\n                        swaps += 1\n                for k in range(j, len(min_indices_split)):\n                    if min_indices_split[k] != None:\n                        swaps += 1\n                if swaps < min_swaps:\n                    min_swaps = swaps\n        return min_swaps",
  "is_python": true
}