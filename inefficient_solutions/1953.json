{
  "problem_idx": 1953,
  "task_name": "Maximum Number of Weeks for Which You Can Work",
  "markdown_description": "\nThere are `n` projects numbered from `0` to `n - 1`. You are given an integer array `milestones` where each `milestones[i]` denotes the number of milestones the `ith` project has.\n\n\nYou can work on the projects following these two rules:\n\n\n* Every week, you will finish **exactly one** milestone of **one** project. You\u00a0**must**\u00a0work every week.\n* You **cannot** work on two milestones from the same project for two **consecutive** weeks.\n\n\nOnce all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will **stop working**. Note that you may not be able to finish every project's milestones due to these constraints.\n\n\nReturn *the **maximum** number of weeks you would be able to work on the projects without violating the rules mentioned above*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** milestones = [1,2,3]\n**Output:** 6\n**Explanation:** One possible scenario is:\n\u200b\u200b\u200b\u200b- During the 1st week, you will work on a milestone of project 0.\n- During the 2nd week, you will work on a milestone of project 2.\n- During the 3rd week, you will work on a milestone of project 1.\n- During the 4th week, you will work on a milestone of project 2.\n- During the 5th week, you will work on a milestone of project 1.\n- During the 6th week, you will work on a milestone of project 2.\nThe total number of weeks is 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** milestones = [5,2,1]\n**Output:** 7\n**Explanation:** One possible scenario is:\n- During the 1st week, you will work on a milestone of project 0.\n- During the 2nd week, you will work on a milestone of project 1.\n- During the 3rd week, you will work on a milestone of project 0.\n- During the 4th week, you will work on a milestone of project 1.\n- During the 5th week, you will work on a milestone of project 0.\n- During the 6th week, you will work on a milestone of project 2.\n- During the 7th week, you will work on a milestone of project 0.\nThe total number of weeks is 7.\nNote that you cannot work on the last milestone of project 0 on 8th week because it would violate the rules.\nThus, one milestone in project 0 will remain unfinished.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == milestones.length`\n* `1 <= n <= 105`\n* `1 <= milestones[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfWeeks(self, milestones: List[int]) -> int:\n        mx, s = max(milestones), sum(milestones)\n        rest = s - mx\n        return rest * 2 + 1 if mx > rest + 1 else s\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfWeeks(self, milestones):\n        mx, s = max(milestones), sum(milestones)\n        rest = s - mx\n        return rest * 2 + 1 if mx > rest + 1 else s\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    milestones = random.choices(range(1, 1000000000), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfWeeks(milestones)\n\n    return milestones, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        milestones, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfWeeks(milestones) == expected_result\n        print(f\"assert solution.numberOfWeeks({milestones}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfWeeks({milestones}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfWeeks([495922712, 7221047, 109081944, 574855112]) == 1187080815\nassert solution.numberOfWeeks([608531928, 562356239, 1172446, 142822866, 149977092, 512877957, 551960428]) == 2529698956\nassert solution.numberOfWeeks([142286520, 320043938, 84748453, 329353808, 790010703, 476064108, 558678992, 117575386, 51988395, 121295425]) == 2992045728\nassert solution.numberOfWeeks([768633874, 417379152, 770505639]) == 1956518665\nassert solution.numberOfWeeks([208849138, 204214135, 942129659, 932305636, 828544300, 119754952, 702335059, 986297994]) == 4924430873\nassert solution.numberOfWeeks([825572951, 985383174]) == 1651145903\nassert solution.numberOfWeeks([501853581, 505901511]) == 1003707163\nassert solution.numberOfWeeks([340534003, 4961105, 679308806, 367418165, 466288343, 590857777, 457475958]) == 2906844157\nassert solution.numberOfWeeks([840496427, 480532666, 635495791, 246041718, 655160379, 140199993, 747950521, 187280507, 265484738]) == 4198642740\nassert solution.numberOfWeeks([828772388, 564150764, 811576608, 779674587]) == 2984174347\nassert solution.numberOfWeeks([975376365]) == 1\nassert solution.numberOfWeeks([512820999]) == 1\nassert solution.numberOfWeeks([284081817, 827394935]) == 568163635\nassert solution.numberOfWeeks([957951195, 635117247, 920246050, 851113429, 76791391]) == 3441219312\nassert solution.numberOfWeeks([219667209, 432550741, 866386800, 943021241, 691861778, 760635669]) == 3914123438\nassert solution.numberOfWeeks([466735445, 752224548, 178404053]) == 1290278997\nassert solution.numberOfWeeks([840281613, 834114213, 867068257]) == 2541464083\nassert solution.numberOfWeeks([145877707, 14078525]) == 28157051\nassert solution.numberOfWeeks([682106319, 216377052, 298698461]) == 1030151027\nassert solution.numberOfWeeks([319437227, 574652992, 851890471, 870234692, 5190154, 213872605, 235394279, 924461826, 914919660, 507817748]) == 5417871654\nassert solution.numberOfWeeks([304737729, 689169803, 991680953, 903047424, 508071754, 906209781, 360811645, 215544731]) == 4879273820\nassert solution.numberOfWeeks([933789035]) == 1\nassert solution.numberOfWeeks([166512268, 560049917, 85629385, 400786792, 123601362, 870035863]) == 2206615587\nassert solution.numberOfWeeks([144245451, 599700187, 446928368, 198249239, 471772051, 834057029, 947773001, 932939279]) == 4575664605\nassert solution.numberOfWeeks([745445177, 744416738, 357755230, 227521983, 598019707, 865543552]) == 3538702387\nassert solution.numberOfWeeks([355057305, 807450866]) == 710114611\nassert solution.numberOfWeeks([249302339, 76293585, 497528150, 615813847, 653732094, 271587218, 262001985]) == 2626259218\nassert solution.numberOfWeeks([511005256, 449380128, 831661943]) == 1792047327\nassert solution.numberOfWeeks([705151704, 812336208, 84976853, 82094492, 490500254]) == 2175059511\nassert solution.numberOfWeeks([334778478, 782383867, 36168261, 784208505, 630290799, 890966701, 700589718]) == 4159386329\nassert solution.numberOfWeeks([167021142, 949386050, 411573583, 923013509, 586049765, 274354912, 995998676]) == 4307397637\nassert solution.numberOfWeeks([370840235, 321895861, 587093281, 568696691]) == 1848526068\nassert solution.numberOfWeeks([397095465, 228316451, 41635566, 434609283, 929425478, 188585619, 374888227]) == 2594556089\nassert solution.numberOfWeeks([302207995, 848101653, 238323903]) == 1081063797\nassert solution.numberOfWeeks([538480076, 185530703, 755071430, 586316868, 821089400, 218704197, 945789854]) == 4050982528\nassert solution.numberOfWeeks([635980061]) == 1\nassert solution.numberOfWeeks([925603099, 913628930]) == 1827257861\nassert solution.numberOfWeeks([867375368, 347953517, 18810032, 419878423, 181480896]) == 1835498236\nassert solution.numberOfWeeks([366593347, 847511587, 998674762, 15091128, 654443389, 698424698, 959113320]) == 4539852231\nassert solution.numberOfWeeks([377731518, 611598761, 343212256, 644082295, 401123115, 55901351, 288346984, 237062024]) == 2959058304\nassert solution.numberOfWeeks([468454496, 628810615, 104276719, 231899029, 337485586, 355124190]) == 2126050635\nassert solution.numberOfWeeks([222322325, 770098820, 298205929, 50397521, 89288738, 815721996, 968931908, 281729007]) == 3496696244\nassert solution.numberOfWeeks([900385105, 586585046, 538553034, 170171402, 885521917, 131658868, 673016025, 963789642]) == 4849681039\nassert solution.numberOfWeeks([463018749, 15341388, 179422118]) == 389527013\nassert solution.numberOfWeeks([224348696, 72874256, 105621681, 747381726, 914631301, 340712973, 769078566, 145415613, 1241135]) == 3321305947\nassert solution.numberOfWeeks([323262551, 408671976, 158941732]) == 890876259\nassert solution.numberOfWeeks([296384558, 725241682, 30832721, 211951769, 589874923, 987668454, 170968469]) == 3012922576\nassert solution.numberOfWeeks([382108515, 567615497, 462716262, 398408100]) == 1810848374\nassert solution.numberOfWeeks([976969786, 688488736, 205131749, 334532297, 561762385]) == 2766884953\nassert solution.numberOfWeeks([432717022, 927009863, 651670324, 470293704, 539213798, 745176309, 484566759, 626698596]) == 4877346375\nassert solution.numberOfWeeks([625108814, 488453979, 618601365, 379827266, 564403237, 398347720, 72641531]) == 3147383912\nassert solution.numberOfWeeks([730324154, 772626008, 529921337, 689090012, 630164362]) == 3352125873\nassert solution.numberOfWeeks([575728965, 445994236, 896308391]) == 1918031592\nassert solution.numberOfWeeks([743068817, 424802494, 977564158, 114086670, 148988402, 370478524, 316962961]) == 3095952026\nassert solution.numberOfWeeks([375386819, 794168748, 653263257, 461689858, 453443177, 313551597, 349703297]) == 3401206753\nassert solution.numberOfWeeks([165695759, 178308029, 243206485, 932238201]) == 1174420547\nassert solution.numberOfWeeks([299938668, 476255137, 422801386, 565003613]) == 1763998804\nassert solution.numberOfWeeks([842794213, 23523344, 191988312, 842918015, 159353060, 316962055, 143539698, 943844629, 720579795, 50450433]) == 4235953554\nassert solution.numberOfWeeks([978989008, 706459156, 573258662, 40376976]) == 2299083802\nassert solution.numberOfWeeks([627185978]) == 1\nassert solution.numberOfWeeks([601603011, 9241551, 300444431]) == 619371965\nassert solution.numberOfWeeks([577515083, 70711967, 347271769, 146757993, 37827035, 384925619, 401342903, 270035515]) == 2236387884\nassert solution.numberOfWeeks([702163078, 995790371, 222953663, 916342197, 507315442, 856510458, 446971181]) == 4648046390\nassert solution.numberOfWeeks([669733198, 413722131, 423147601, 868295376, 726664357, 709099447, 862387329]) == 4673049439\nassert solution.numberOfWeeks([419046301, 238564527, 47899974]) == 572929003\nassert solution.numberOfWeeks([807088257, 166377209]) == 332754419\nassert solution.numberOfWeeks([256329866, 272634854, 425875274, 676138137, 657842593, 475144156, 59259143]) == 2823224023\nassert solution.numberOfWeeks([441490163, 15397926, 314265406, 142910989, 315098861, 715143667, 281064195, 367343154, 644783437]) == 3237497798\nassert solution.numberOfWeeks([836866319, 84852773, 757100739, 790712542, 134677019, 351506960, 259172361, 957170324]) == 4172059037\nassert solution.numberOfWeeks([133622201, 434375287, 835988912, 920044084, 340399670, 445943830, 914638570, 935422834, 593581418]) == 5554016806\nassert solution.numberOfWeeks([453643261]) == 1\nassert solution.numberOfWeeks([53083875, 680431537, 985655914, 95643037, 612298009, 44046779, 734376992, 703064205, 324749527]) == 4233349875\nassert solution.numberOfWeeks([208831432, 416807712, 604755398, 494563128, 186162996]) == 1911120666\nassert solution.numberOfWeeks([37453701, 895007187, 494981272, 310990244, 604729842, 661314822, 103891926]) == 3108368994\nassert solution.numberOfWeeks([872208530, 784967017, 675509428]) == 2332684975\nassert solution.numberOfWeeks([846766813, 954392838, 394674049, 488649975, 59371088, 758848728, 23927583, 969943402, 755837250, 24639453]) == 5277051179\nassert solution.numberOfWeeks([488038506, 98982481, 409783816, 50488232, 765636775, 584350990, 306901991, 856804031, 783607641, 268346319]) == 4612940782\nassert solution.numberOfWeeks([471226644, 280430286, 649012046]) == 1400668976\nassert solution.numberOfWeeks([272405587, 338801065, 352064783, 679592625, 74076024, 589643640, 86603473]) == 2393187197\nassert solution.numberOfWeeks([521369804, 769763885, 465194767, 854416843, 956922471, 844911491]) == 4412579261\nassert solution.numberOfWeeks([895592765, 917125046, 572524135]) == 2385241946\nassert solution.numberOfWeeks([420558837, 713324454]) == 841117675\nassert solution.numberOfWeeks([212505380, 357166698, 444034101, 118646637, 536334918, 910344995, 483048777, 88560411, 30340731]) == 3180982648\nassert solution.numberOfWeeks([593650049, 940783665, 922054419, 395217201, 59854048, 984124961, 202505701, 862022898]) == 4960212942\nassert solution.numberOfWeeks([184269182, 827656520]) == 368538365\nassert solution.numberOfWeeks([39127518]) == 1\nassert solution.numberOfWeeks([618520311, 394933652, 883715718, 105220298]) == 2002389979\nassert solution.numberOfWeeks([875281975, 570581394, 955862216, 21664174]) == 2423389759\nassert solution.numberOfWeeks([131021647]) == 1\nassert solution.numberOfWeeks([762306553, 779783573, 816180264, 162104390, 774028425]) == 3294403205\nassert solution.numberOfWeeks([573368861, 50123823, 939859061, 863907779, 892173077, 513224475]) == 3832657076\nassert solution.numberOfWeeks([656318303]) == 1\nassert solution.numberOfWeeks([82390511, 736906671, 242958735, 874234707, 663180546, 108740350, 48743264]) == 2757154784\nassert solution.numberOfWeeks([942114850, 41722121, 421153946]) == 925752135\nassert solution.numberOfWeeks([745172775]) == 1\nassert solution.numberOfWeeks([508989557]) == 1\nassert solution.numberOfWeeks([617155389, 115653335, 94353471, 71800057, 208302813, 29464283, 3713174, 417580105, 638168205]) == 2196190832\nassert solution.numberOfWeeks([892579720, 430076973]) == 860153947\nassert solution.numberOfWeeks([159656254, 186866597, 422479682, 244803196]) == 1013805729\nassert solution.numberOfWeeks([918759967, 958669660, 908128959, 425068058, 448781298, 955500659, 188184472, 60974747, 63585844, 266788422]) == 5194442086",
  "inefficient_solution": "class Solution:\n    def numberOfWeeks(self, milestones: List[int]) -> int:\n        mils = []\n        for i in range(len(milestones)):\n            for j in range(milestones[i]):\n                mils.append([i, j])\n        mils.sort(key=lambda x: x[1])\n        next_mil = 0\n        weeks = 0\n        for i in range(len(mils)):\n            if i % 2 == 0:\n                if next_mil == mils[i][1]:\n                    next_mil += 1\n                else:\n                    weeks += 1\n                    next_mil += 1\n            else:\n                weeks += 1\n                next_mil += 1\n        return weeks",
  "is_python": true
}