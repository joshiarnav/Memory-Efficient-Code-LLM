{
  "problem_idx": 1706,
  "task_name": "Where Will the Ball Fall",
  "markdown_description": "\nYou have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides.\n\n\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\n\n\n* A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.\n* A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.\n\n\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\n\n\nReturn *an array* `answer` *of size* `n` *where* `answer[i]` *is the column that the ball falls out of at the bottom after dropping the ball from the* `ith` *column at the top, or `-1` *if the ball gets stuck in the box*.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1700-1799/1706.Where%20Will%20the%20Ball%20Fall/images/ball.jpg)**\n\n\n\n```\n\n**Input:** grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\n**Output:** [1,-1,-1,-1,-1]\n**Explanation:** This example is shown in the photo.\nBall b0 is dropped at column 0 and falls out of the box at column 1.\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[-1]]\n**Output:** [-1]\n**Explanation:** The ball gets stuck against the left wall.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\n**Output:** [0,1,2,3,4,-1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[i].length`\n* `1 <= m, n <= 100`\n* `grid[i][j]` is `1` or `-1`.\n\n\n",
  "canonical_solution": "class Solution:\n    def findBall(self, grid: List[List[int]]) -> List[int]:\n        def dfs(i: int, j: int) -> int:\n            if i == m:\n                return j\n            if j == 0 and grid[i][j] == -1:\n                return -1\n            if j == n - 1 and grid[i][j] == 1:\n                return -1\n            if grid[i][j] == 1 and grid[i][j + 1] == -1:\n                return -1\n            if grid[i][j] == -1 and grid[i][j - 1] == 1:\n                return -1\n            return dfs(i + 1, j + 1) if grid[i][j] == 1 else dfs(i + 1, j - 1)\n\n        m, n = len(grid), len(grid[0])\n        return [dfs(0, j) for j in range(n)]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findBall(self, grid):\n        def dfs(i, j):\n            if i == m:\n                return j\n            if j == 0 and grid[i][j] == -1:\n                return -1\n            if j == n - 1 and grid[i][j] == 1:\n                return -1\n            if grid[i][j] == 1 and grid[i][j + 1] == -1:\n                return -1\n            if grid[i][j] == -1 and grid[i][j - 1] == 1:\n                return -1\n            return dfs(i + 1, j + 1) if grid[i][j] == 1 else dfs(i + 1, j - 1)\n\n        m, n = len(grid), len(grid[0])\n        return [dfs(0, j) for j in range(n)]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random grid\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    grid = [[random.choice([-1, 1]) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findBall(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findBall(grid) == expected_result\n        print(f\"assert solution.findBall({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findBall({grid}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findBall([[1, -1, -1, 1, 1, -1, -1], [1, -1, -1, 1, -1, -1, 1], [1, 1, 1, -1, 1, 1, 1], [1, 1, 1, -1, 1, -1, 1], [-1, -1, 1, -1, -1, 1, 1], [1, -1, -1, -1, -1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, -1, 1, 1], [1, 1, -1, -1], [1, 1, -1, 1]]) == [-1, -1, -1, -1]\nassert solution.findBall([[-1, 1, -1, 1, 1, 1, -1, -1, -1, -1], [1, 1, -1, -1, 1, 1, -1, -1, -1, 1], [-1, 1, -1, -1, 1, -1, -1, 1, -1, -1], [1, 1, -1, 1, -1, -1, -1, -1, -1, 1], [-1, -1, 1, -1, 1, 1, -1, -1, 1, -1], [-1, 1, -1, 1, -1, -1, -1, -1, 1, 1], [-1, 1, -1, 1, -1, 1, -1, 1, -1, -1], [-1, 1, 1, 1, -1, -1, 1, 1, -1, -1], [1, -1, 1, -1, 1, -1, 1, 1, -1, 1], [1, -1, 1, -1, -1, 1, 1, -1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1], [-1], [-1], [1], [-1], [1], [1], [1], [-1]]) == [-1]\nassert solution.findBall([[-1, -1, 1, -1, 1, -1], [-1, -1, 1, -1, -1, -1], [-1, 1, -1, -1, -1, -1], [1, 1, -1, -1, 1, 1], [-1, 1, -1, -1, 1, 1], [-1, -1, 1, 1, -1, 1], [-1, -1, -1, 1, -1, -1], [1, -1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, -1, 1, -1, 1], [1, 1, -1, -1, 1, -1], [1, 1, -1, 1, 1, 1], [-1, 1, -1, 1, -1, 1], [-1, 1, 1, 1, -1, 1], [1, -1, 1, 1, 1, 1], [1, -1, 1, -1, -1, 1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, -1, 1, 1, 1], [-1, 1, 1, -1, -1, 1], [1, 1, 1, -1, 1, 1], [-1, 1, -1, -1, 1, -1], [1, -1, 1, -1, 1, -1], [1, -1, -1, -1, 1, -1], [-1, -1, 1, 1, -1, 1], [1, -1, 1, -1, 1, 1], [1, -1, -1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1], [1, -1], [1, -1], [1, -1], [-1, 1], [-1, -1], [1, 1], [-1, -1]]) == [-1, -1]\nassert solution.findBall([[-1, -1, -1, 1, -1, -1, 1, 1], [1, -1, -1, -1, 1, 1, -1, 1], [-1, 1, -1, 1, -1, 1, 1, -1], [1, 1, 1, 1, -1, 1, -1, -1], [-1, 1, 1, 1, 1, -1, 1, 1], [-1, -1, -1, -1, -1, 1, 1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, 1]]) == [-1, 0, -1]\nassert solution.findBall([[1, -1, -1, -1, -1, 1, -1, 1], [1, 1, 1, -1, -1, -1, 1, 1], [1, -1, 1, 1, -1, -1, -1, 1]]) == [-1, -1, 3, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1], [-1, 1], [-1, -1]]) == [-1, -1]\nassert solution.findBall([[-1], [-1]]) == [-1]\nassert solution.findBall([[1, -1, 1, -1, 1, 1, -1, 1], [1, 1, -1, 1, 1, 1, 1, -1], [1, 1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, 1, 1, -1, -1], [-1, 1, -1, -1, -1, 1, 1, -1], [-1, -1, 1, 1, -1, 1, 1, 1], [-1, 1, 1, -1, -1, 1, -1, 1], [1, -1, 1, 1, 1, -1, -1, 1], [1, -1, 1, -1, 1, 1, -1, 1], [1, 1, -1, 1, 1, 1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, 1, -1, 1, -1, -1, 1]]) == [1, 2, -1, -1, -1, -1, 5, -1]\nassert solution.findBall([[-1, 1, -1, 1], [-1, 1, 1, -1], [-1, -1, -1, 1], [-1, 1, -1, -1], [1, -1, -1, 1], [1, -1, -1, 1], [-1, 1, -1, 1], [-1, -1, -1, 1], [1, -1, -1, -1], [-1, -1, 1, -1]]) == [-1, -1, -1, -1]\nassert solution.findBall([[1, -1, 1, -1, -1, -1, -1, 1, -1]]) == [-1, -1, -1, -1, 3, 4, 5, -1, -1]\nassert solution.findBall([[1, -1, 1, -1, 1], [-1, 1, -1, -1, 1], [-1, 1, -1, 1, -1], [1, -1, -1, -1, -1], [-1, -1, 1, -1, -1], [1, 1, 1, -1, 1], [-1, 1, 1, -1, -1], [-1, -1, -1, 1, 1]]) == [-1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, 1, 1, -1, 1, 1], [1, 1, -1, -1, -1, 1, 1], [1, -1, -1, 1, 1, -1, -1], [1, -1, -1, 1, -1, 1, 1], [-1, -1, -1, -1, -1, 1, 1], [-1, -1, -1, 1, 1, -1, -1], [-1, -1, 1, -1, -1, -1, 1], [1, -1, -1, 1, 1, -1, 1], [1, 1, 1, -1, -1, 1, 1], [-1, -1, 1, 1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, 1, -1, 1], [-1, -1, -1, 1], [-1, 1, 1, 1], [-1, 1, -1, -1]]) == [-1, -1, -1, -1]\nassert solution.findBall([[1, -1, 1, -1, -1], [1, 1, -1, -1, 1]]) == [-1, -1, -1, -1, 2]\nassert solution.findBall([[-1, 1], [-1, 1], [-1, 1], [1, 1], [-1, 1], [1, -1], [-1, 1], [1, -1]]) == [-1, -1]\nassert solution.findBall([[-1, 1, -1, -1, 1, -1, 1, -1, 1, 1], [1, 1, -1, 1, 1, 1, -1, 1, -1, 1], [1, -1, 1, 1, -1, 1, -1, 1, 1, 1], [1, 1, 1, -1, 1, 1, 1, 1, -1, 1], [1, 1, -1, -1, -1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, 1, -1, -1, 1, -1, -1], [1, 1, -1, 1, 1, -1, -1, 1, -1, 1], [-1, 1, 1, -1, 1, -1, -1, -1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, 1, -1, -1, 1, 1, 1, -1], [1, -1, -1, -1, -1, 1, -1, 1], [1, 1, 1, 1, 1, -1, -1, 1]]) == [-1, -1, -1, 2, -1, -1, -1, -1]\nassert solution.findBall([[-1, 1, 1, 1, -1, 1], [1, -1, -1, -1, 1, -1]]) == [-1, 1, 2, -1, -1, -1]\nassert solution.findBall([[1, 1, -1, -1, -1, -1, -1, 1], [1, 1, -1, 1, -1, 1, -1, 1], [1, -1, -1, 1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, -1, -1, 1], [1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, -1, -1, -1, 1, 1], [-1, 1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, -1, 1, 1, -1], [1, -1, -1, 1, -1, -1, 1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1], [1], [-1], [-1], [1], [-1], [-1], [1], [1]]) == [-1]\nassert solution.findBall([[-1, -1, -1], [1, -1, 1], [-1, 1, -1], [1, 1, 1], [1, -1, -1], [1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, -1, -1]]) == [-1, -1, -1]\nassert solution.findBall([[-1], [1], [1], [-1], [-1], [-1], [1], [1]]) == [-1]\nassert solution.findBall([[-1, 1, -1, 1], [-1, 1, -1, -1], [1, 1, 1, 1], [1, 1, -1, -1], [-1, -1, -1, -1], [1, -1, 1, -1], [1, -1, 1, 1], [-1, 1, -1, 1]]) == [-1, -1, -1, -1]\nassert solution.findBall([[-1, -1, -1, 1, 1, -1], [-1, 1, -1, 1, -1, 1], [1, 1, -1, -1, 1, 1], [-1, -1, -1, -1, -1, -1], [-1, 1, -1, 1, -1, -1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, 1, -1, -1, 1], [-1, 1, -1, 1, -1, -1], [-1, 1, -1, 1, -1, -1], [-1, -1, -1, 1, -1, -1], [-1, 1, 1, 1, -1, 1], [1, 1, 1, 1, -1, -1], [1, -1, 1, -1, -1, 1], [-1, -1, -1, 1, 1, 1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, -1, 1, 1, 1, -1, 1, 1, -1], [-1, 1, -1, -1, -1, 1, 1, -1, -1, 1], [-1, -1, -1, -1, -1, -1, 1, 1, -1, 1], [-1, -1, 1, 1, -1, 1, -1, 1, -1, -1], [-1, -1, 1, 1, -1, -1, -1, -1, 1, 1], [1, -1, -1, 1, -1, 1, 1, 1, 1, -1], [-1, -1, -1, -1, 1, -1, 1, 1, -1, -1], [1, -1, 1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, -1, -1, -1, -1, -1, 1, 1, 1], [1, 1, -1, -1, 1, -1, 1, 1, 1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, -1, -1], [1, 1, -1, -1], [-1, -1, 1, -1]]) == [-1, 0, -1, -1]\nassert solution.findBall([[1, 1], [1, 1], [1, 1], [-1, -1]]) == [-1, -1]\nassert solution.findBall([[1, 1, -1, 1, -1, -1, 1, -1, -1]]) == [1, -1, -1, -1, -1, 4, -1, -1, 7]\nassert solution.findBall([[-1, 1, -1, 1, 1], [-1, 1, -1, -1, -1], [1, 1, -1, -1, -1]]) == [-1, -1, -1, 2, -1]\nassert solution.findBall([[-1, 1, -1, 1, 1, -1, -1, 1, -1, 1]]) == [-1, -1, -1, 4, -1, -1, 5, -1, -1, -1]\nassert solution.findBall([[1, 1, -1, -1, 1, 1, 1]]) == [1, -1, -1, 2, 5, 6, -1]\nassert solution.findBall([[-1, 1, -1, 1, -1, -1], [1, 1, 1, -1, -1, -1], [-1, 1, 1, -1, -1, 1], [-1, -1, 1, -1, 1, -1], [1, -1, -1, -1, -1, -1], [-1, -1, 1, 1, 1, 1], [-1, -1, -1, 1, -1, -1], [1, 1, -1, -1, 1, 1], [1, -1, 1, 1, -1, -1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1], [1, 1], [1, -1]]) == [-1, -1]\nassert solution.findBall([[-1, -1], [-1, -1], [1, -1], [-1, -1], [-1, -1], [-1, -1], [1, 1], [1, -1]]) == [-1, -1]\nassert solution.findBall([[-1, 1, -1, -1, 1, -1]]) == [-1, -1, -1, 2, -1, -1]\nassert solution.findBall([[-1, -1, 1, -1, 1, 1, -1, -1], [-1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, 1, -1, 1, 1, 1], [-1, 1, -1, -1, 1, -1, -1, -1], [1, 1, 1, -1, -1, -1, 1, 1], [1, -1, -1, 1, -1, -1, 1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, 1, 1, 1, -1, -1, 1], [1, -1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, -1, 1], [-1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, 4, -1]\nassert solution.findBall([[-1, -1, 1, 1, -1, 1, -1, -1, -1], [1, -1, -1, 1, 1, -1, -1, 1, -1], [1, -1, -1, 1, -1, 1, 1, 1, 1], [1, 1, 1, -1, -1, 1, 1, -1, 1], [1, -1, -1, 1, 1, -1, 1, -1, 1], [1, 1, -1, 1, 1, -1, 1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1], [-1]]) == [-1]\nassert solution.findBall([[1, 1, 1], [1, 1, 1], [-1, -1, -1], [1, 1, -1], [1, 1, 1], [-1, 1, -1]]) == [-1, -1, -1]\nassert solution.findBall([[-1, -1, 1, -1, -1, 1, 1, 1], [1, -1, 1, -1, 1, 1, -1, 1], [1, -1, 1, 1, -1, -1, -1, -1], [-1, -1, 1, -1, -1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1], [1, -1, 1, 1, 1, 1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, -1, -1, 1, -1, -1, 1, 1], [1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, 1, 1, -1, -1, 1, 1, 1, -1], [1, 1, 1, 1, -1, -1, 1, 1, 1], [-1, 1, 1, 1, -1, -1, 1, -1, 1], [1, 1, -1, -1, -1, 1, -1, -1, 1], [1, 1, 1, 1, -1, 1, 1, 1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1], [1, 1], [-1, 1], [1, -1]]) == [-1, -1]\nassert solution.findBall([[-1, 1, 1, -1, 1, -1, -1, -1, -1], [1, 1, -1, -1, -1, 1, 1, -1, 1], [-1, 1, 1, 1, 1, -1, 1, 1, 1], [1, 1, -1, 1, -1, 1, -1, 1, 1], [-1, -1, 1, 1, -1, 1, 1, 1, -1], [1, 1, -1, 1, 1, 1, 1, 1, 1], [-1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, 1, -1, 1, 1, 1, 1], [1, 1, -1, -1, 1, 1, 1, 1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1], [-1], [-1], [-1]]) == [-1]\nassert solution.findBall([[1, 1, 1, -1, -1, 1, 1], [1, 1, -1, -1, -1, -1, -1], [1, -1, -1, 1, -1, 1, -1], [1, -1, 1, -1, 1, 1, -1], [-1, 1, 1, -1, 1, -1, -1], [1, 1, -1, -1, 1, 1, -1], [1, -1, -1, -1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, -1, 1, 1, 1, 1, 1], [1, -1, -1, 1, -1, 1, 1, 1], [-1, 1, 1, -1, -1, -1, -1, 1]]) == [-1, -1, -1, -1, 5, -1, -1, -1]\nassert solution.findBall([[1, -1, -1, -1, 1, 1, 1, -1, -1], [-1, 1, -1, -1, 1, 1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, 6]\nassert solution.findBall([[1, 1, 1, -1, 1, -1, -1, 1], [1, 1, -1, 1, 1, -1, 1, 1], [-1, 1, -1, 1, -1, 1, -1, -1], [1, -1, 1, 1, 1, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, 1, 1, -1, 1, -1, 1], [1, 1, -1, 1, -1, 1, 1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1], [1, 1], [1, -1], [1, -1]]) == [-1, -1]\nassert solution.findBall([[-1, -1], [1, -1], [-1, 1]]) == [-1, -1]\nassert solution.findBall([[-1, 1], [1, 1], [-1, -1], [1, 1], [1, 1], [-1, 1], [-1, -1]]) == [-1, -1]\nassert solution.findBall([[-1, 1, -1, 1, 1, 1], [1, 1, -1, -1, 1, 1], [1, 1, -1, 1, -1, 1], [1, 1, 1, -1, 1, 1], [-1, -1, 1, 1, -1, -1], [-1, 1, 1, 1, 1, 1], [1, 1, -1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, -1, -1, 1, 1, -1, 1, 1, 1, 1], [-1, -1, -1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, -1, -1, -1, 1, -1, -1, 1, -1], [1, 1, -1, 1, -1, 1, 1, 1, -1, 1], [-1, -1, -1, -1, -1, 1, -1, 1, 1, 1], [1, -1, 1, 1, 1, 1, 1, -1, 1, -1], [1, 1, -1, 1, -1, 1, 1, 1, 1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, 1, -1, 1, 1, -1], [-1, 1, -1, -1, 1, 1, -1], [1, 1, -1, -1, 1, -1, -1], [1, 1, 1, -1, 1, 1, -1], [-1, -1, -1, 1, -1, 1, -1], [1, -1, -1, -1, -1, -1, 1], [1, 1, -1, -1, -1, 1, 1], [-1, 1, -1, -1, -1, -1, 1], [1, -1, 1, 1, 1, 1, 1], [1, 1, -1, 1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, 1, 1, 1, -1]]) == [1, 2, 3, 4, -1, -1]\nassert solution.findBall([[1, -1, 1, 1, -1, -1, 1], [1, -1, 1, -1, 1, -1, 1], [1, 1, 1, -1, -1, -1, 1], [1, -1, 1, -1, 1, -1, -1], [-1, -1, -1, 1, 1, -1, 1], [-1, -1, -1, 1, -1, 1, 1], [1, -1, -1, -1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, -1], [1, 1, 1, -1, -1, -1, -1], [-1, 1, 1, 1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, 1, 1, -1, 1, -1, 1, 1, 1], [1, -1, -1, 1, 1, -1, 1, 1, -1], [1, -1, 1, -1, 1, 1, 1, -1, 1], [1, -1, -1, -1, -1, 1, -1, -1, 1], [-1, -1, -1, -1, 1, -1, 1, 1, 1], [-1, -1, 1, -1, -1, 1, -1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1], [1, -1], [-1, 1], [-1, 1], [-1, 1], [1, 1], [1, -1], [-1, -1], [-1, 1], [1, -1]]) == [-1, -1]\nassert solution.findBall([[-1, -1, -1, 1, -1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, 1, -1, -1, -1, -1, -1, 1, -1], [1, -1, 1, 1, -1, 1, -1, 1, 1], [1, 1, -1, 1, -1, -1, -1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1], [1, 1], [-1, -1], [1, 1]]) == [-1, -1]\nassert solution.findBall([[-1, 1, 1, 1, 1, -1], [1, -1, -1, 1, 1, -1], [1, -1, -1, -1, -1, 1], [1, -1, 1, -1, 1, 1], [1, 1, 1, 1, -1, 1], [1, -1, 1, 1, -1, 1], [1, 1, -1, -1, -1, 1], [-1, 1, 1, 1, -1, 1], [1, -1, 1, 1, -1, 1], [-1, 1, -1, 1, -1, -1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, -1, -1, 1, 1, -1, -1, 1, 1, 1], [1, -1, -1, -1, 1, -1, 1, -1, 1, -1], [1, -1, 1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, 1, 1, 1, 1, -1, -1, 1, 1], [-1, -1, -1, 1, -1, 1, -1, 1, -1, 1], [1, -1, -1, -1, -1, -1, -1, 1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, 1, 1, -1, 1], [1, -1, 1, -1, -1], [1, 1, -1, 1, 1], [-1, 1, -1, 1, -1], [1, -1, -1, 1, -1], [1, 1, 1, -1, -1], [1, 1, -1, 1, 1], [-1, -1, 1, 1, 1]]) == [-1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, -1, 1, -1, -1, 1], [-1, 1, 1, 1, 1, -1, 1]]) == [2, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, 1, -1, 1, 1, 1, 1, -1], [1, 1, 1, 1, 1, 1, -1, 1, -1]]) == [-1, 1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, 1, -1, -1, -1, 1, -1, 1], [1, 1, 1, -1, 1, 1, -1, -1], [1, -1, -1, 1, 1, 1, 1, 1], [-1, -1, 1, -1, -1, -1, -1, 1], [1, -1, 1, 1, 1, 1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, -1], [-1, 1, -1, 1, 1, 1, 1, -1], [1, 1, -1, 1, 1, -1, 1, -1], [-1, -1, -1, 1, 1, -1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1], [-1], [-1]]) == [-1]\nassert solution.findBall([[1, 1, -1, 1, 1], [-1, 1, 1, -1, 1]]) == [2, -1, -1, -1, -1]\nassert solution.findBall([[1, -1, 1, -1, 1], [-1, 1, -1, -1, -1], [-1, -1, -1, -1, -1], [1, -1, 1, -1, 1], [-1, 1, 1, -1, 1], [1, -1, -1, -1, -1]]) == [-1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, -1, 1, 1, -1, 1, -1, -1], [-1, 1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, 1, 1, 1, -1, -1, -1], [1, 1, -1, 1, -1, 1, -1, -1, -1], [1, -1, -1, -1, -1, 1, 1, 1, 1], [-1, -1, -1, -1, 1, 1, -1, -1, -1], [-1, -1, 1, -1, 1, -1, 1, 1, -1], [-1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, -1, 1, -1, -1, -1, 1, 1], [-1, -1, 1, -1, -1, -1, 1, 1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, -1, -1, -1, -1, -1, -1, 1, -1], [-1, 1, 1, -1, -1, 1, -1, 1, -1], [-1, 1, 1, 1, -1, 1, 1, 1, 1], [1, -1, 1, -1, -1, -1, -1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [-1, 1, -1, 1, 1], [-1, -1, -1, 1, 1], [-1, -1, 1, 1, 1], [-1, 1, 1, 1, 1], [-1, 1, 1, 1, -1], [-1, -1, 1, -1, -1], [-1, -1, 1, 1, 1], [1, -1, -1, -1, 1]]) == [-1, -1, -1, -1, -1]\nassert solution.findBall([[1, -1, 1, -1], [-1, -1, 1, -1], [1, 1, -1, -1], [-1, 1, 1, 1], [-1, -1, -1, -1], [1, -1, -1, -1]]) == [-1, -1, -1, -1]\nassert solution.findBall([[-1, 1, -1], [-1, -1, 1], [-1, 1, -1], [-1, -1, -1], [-1, -1, -1], [1, -1, 1], [-1, -1, -1]]) == [-1, -1, -1]\nassert solution.findBall([[1, 1, 1, 1, 1], [1, 1, -1, -1, -1], [-1, 1, -1, 1, 1], [1, 1, 1, 1, -1], [-1, 1, 1, -1, 1], [1, -1, -1, 1, 1], [-1, -1, 1, -1, -1], [1, -1, 1, -1, 1]]) == [-1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, 1, -1, 1, -1, 1, 1, -1, -1], [-1, 1, -1, 1, -1, -1, 1, -1, -1, 1], [-1, 1, 1, -1, -1, -1, -1, -1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, 6]\nassert solution.findBall([[1, -1, 1, -1, 1, -1, 1, -1, -1], [1, -1, -1, 1, 1, 1, 1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, -1, -1, -1, -1, 1, -1], [-1, 1, -1, 1, -1, 1, 1, -1], [-1, 1, -1, -1, 1, 1, -1, 1], [1, -1, -1, 1, -1, -1, -1, 1], [1, -1, -1, 1, 1, 1, 1, -1], [1, -1, 1, 1, 1, -1, 1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, 1], [-1, -1, -1], [1, -1, -1], [-1, -1, -1], [-1, -1, 1], [1, -1, -1], [1, 1, -1], [-1, -1, -1]]) == [-1, -1, -1]\nassert solution.findBall([[1, -1, 1, -1, 1, 1, 1, -1, -1], [-1, 1, 1, -1, 1, -1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1, -1, 1], [-1, -1, -1, -1, -1, 1, 1, -1, 1], [-1, -1, 1, -1, 1, -1, 1, -1, -1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1, 1, 1, -1, 1, -1, -1], [-1, -1, 1, 1, 1, 1, 1], [-1, 1, 1, -1, 1, 1, -1], [-1, -1, 1, -1, -1, -1, 1], [1, -1, 1, 1, 1, -1, 1], [-1, -1, 1, -1, 1, -1, 1], [1, -1, -1, -1, 1, 1, -1], [1, -1, 1, 1, 1, -1, -1], [-1, 1, -1, 1, 1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, -1, -1, -1, -1], [1, 1, -1, 1, -1], [1, -1, 1, -1, 1], [1, -1, 1, -1, -1], [-1, 1, 1, -1, 1]]) == [-1, -1, -1, -1, -1]\nassert solution.findBall([[1], [1]]) == [-1]\nassert solution.findBall([[1, 1, -1, 1, 1, -1], [1, -1, -1, -1, -1, 1], [-1, 1, -1, -1, -1, 1]]) == [-1, -1, -1, 2, -1, -1]\nassert solution.findBall([[-1, 1, -1, 1, -1, -1, 1, 1, 1, 1], [1, -1, 1, 1, -1, 1, 1, -1, -1, -1], [-1, 1, -1, 1, -1, 1, 1, -1, 1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, 9, -1]\nassert solution.findBall([[1, 1, -1, 1, -1, 1], [-1, 1, -1, 1, 1, -1]]) == [-1, -1, -1, -1, -1, -1]\nassert solution.findBall([[-1, 1, 1, 1], [1, 1, -1, -1], [-1, 1, 1, 1], [-1, -1, 1, -1], [-1, 1, -1, 1], [-1, 1, -1, -1]]) == [-1, -1, -1, -1]\nassert solution.findBall([[-1, -1, 1, 1, -1, -1, -1, 1, -1, 1], [-1, -1, -1, 1, -1, 1, -1, -1, 1, -1], [-1, 1, -1, -1, 1, 1, -1, 1, -1, 1], [1, -1, -1, -1, 1, 1, 1, -1, 1, -1], [-1, 1, -1, 1, 1, 1, -1, -1, 1, -1], [1, 1, 1, 1, -1, 1, -1, -1, 1, -1], [1, 1, 1, -1, 1, -1, -1, -1, -1, 1], [-1, -1, -1, -1, 1, 1, -1, 1, -1, 1]]) == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\nassert solution.findBall([[1], [1], [-1], [1], [1], [1], [1]]) == [-1]\nassert solution.findBall([[-1, 1, 1, 1, -1, -1, 1], [1, 1, -1, -1, -1, -1, -1]]) == [-1, -1, 2, -1, -1, 3, -1]\nassert solution.findBall([[1, -1, 1, 1], [1, -1, 1, 1], [-1, -1, -1, -1], [-1, 1, 1, 1], [1, -1, -1, -1], [1, 1, -1, 1], [-1, 1, -1, -1], [-1, -1, -1, -1], [-1, -1, -1, -1]]) == [-1, -1, -1, -1]",
  "inefficient_solution": "class Solution:\n    def findBall(self, grid: List[List[int]]) -> List[int]:\n        def dfs(i: int, j: int) -> int:\n            if i == m:\n                return j\n            temp = [[0 for _ in range(n)] for _ in range(m)]\n            temp[i][j] = 1\n            if j == 0 and grid[i][j] == -1:\n                return -1\n            if j == n - 1 and grid[i][j] == 1:\n                return -1\n            if grid[i][j] == 1 and grid[i][j + 1] == -1:\n                return -1\n            if grid[i][j] == -1 and grid[i][j - 1] == 1:\n                return -1\n            if grid[i][j] == 1:\n                temp[i][j + 1] = 1\n            else:\n                temp[i][j - 1] = 1\n            return dfs(i, j + 1) if temp[i][j] == 1 else dfs(i, j - 1)\n\n        m, n = len(grid), len(grid[0])\n        answer = []\n        for j in range(n):\n            answer.append(dfs(0, j))\n        return answer",
  "is_python": true
}