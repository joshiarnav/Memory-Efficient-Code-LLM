{
  "problem_idx": 1687,
  "task_name": "Delivering Boxes from Storage to Ports",
  "markdown_description": "\nYou have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a **limit** on the **number of boxes** and the **total weight** that it can carry.\n\n\nYou are given an array `boxes`, where `boxes[i] = [ports\u200b\u200bi\u200b, weighti]`, and three integers `portsCount`, `maxBoxes`, and `maxWeight`.\n\n\n* `ports\u200b\u200bi` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.\n* `portsCount` is the number of ports.\n* `maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.\n\n\nThe boxes need to be delivered **in the order they are given**. The ship will follow these steps:\n\n\n* The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.\n* For each loaded box **in order**, the ship will make a **trip** to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no **trip** is needed, and the box can immediately be delivered.\n* The ship then makes a return **trip** to storage to take more boxes from the queue.\n\n\nThe ship must end at storage after all the boxes have been delivered.\n\n\nReturn *the **minimum** number of **trips** the ship needs to make to deliver all boxes to their respective ports.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3\n**Output:** 4\n**Explanation:** The optimal strategy is as follows: \n- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\nSo the total number of trips is 4.\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6\n**Output:** 6\n**Explanation:** The optimal strategy is as follows: \n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n- The ship takes the fifth box, goes to port 2, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7\n**Output:** 6\n**Explanation:** The optimal strategy is as follows:\n- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= boxes.length <= 105`\n* `1 <= portsCount, maxBoxes, maxWeight <= 105`\n* `1 <= ports\u200b\u200bi <= portsCount`\n* `1 <= weightsi <= maxWeight`\n\n\n",
  "canonical_solution": "class Solution:\n    def boxDelivering(\n        self, boxes: List[List[int]], portsCount: int, maxBoxes: int, maxWeight: int\n    ) -> int:\n        n = len(boxes)\n        ws = list(accumulate((box[1] for box in boxes), initial=0))\n        c = [int(a != b) for a, b in pairwise(box[0] for box in boxes)]\n        cs = list(accumulate(c, initial=0))\n        f = [0] * (n + 1)\n        q = deque([0])\n        for i in range(1, n + 1):\n            while q and (i - q[0] > maxBoxes or ws[i] - ws[q[0]] > maxWeight):\n                q.popleft()\n            if q:\n                f[i] = cs[i - 1] + f[q[0]] - cs[q[0]] + 2\n            if i < n:\n                while q and f[q[-1]] - cs[q[-1]] >= f[i] - cs[i]:\n                    q.pop()\n                q.append(i)\n        return f[n]\n",
  "test_case_generator": "\n### Test case generator ###\n\nfrom typing import List\nfrom itertools import accumulate\nfrom collections import deque\n\nclass Solution:\n    def boxDelivering(\n        self, boxes: List[List[int]], portsCount: int, maxBoxes: int, maxWeight: int\n    ) -> int:\n        n = len(boxes)\n        ws = list(accumulate((box[1] for box in boxes), initial=0))\n        c = [int(a != b) for a, b in pairwise(box[0] for box in boxes)]\n        cs = list(accumulate(c, initial=0))\n        f = [0] * (n + 1)\n        q = deque([0])\n        for i in range(1, n + 1):\n            while q and (i - q[0] > maxBoxes or ws[i] - ws[q[0]] > maxWeight):\n                q.popleft()\n            if q:\n                f[i] = cs[i - 1] + f[q[0]] - cs[q[0]] + 2\n            if i < n:\n                while q and f[q[-1]] - cs[q[-1]] >= f[i] - cs[i]:\n                    q.pop()\n                q.append(i)\n        return f[n]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random boxes list\n    boxes = []\n    for _ in range(random.randint(1, 100)):\n        port = random.randint(1, 10)\n        weight = random.randint(1, 10)\n        boxes.append([port, weight])\n\n    # Generate random portsCount, maxBoxes, and maxWeight\n    portsCount = random.randint(1, 10)\n    maxBoxes = random.randint(1, 10)\n    maxWeight = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.boxDelivering(boxes, portsCount, maxBoxes, maxWeight)\n\n    return boxes, portsCount, maxBoxes, maxWeight, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        boxes, portsCount, maxBoxes, maxWeight, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.boxDelivering(boxes, portsCount, maxBoxes, maxWeight) == expected_result\n        print(f\"assert solution.boxDelivering({boxes}, {portsCount}, {maxBoxes}, {maxWeight}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.boxDelivering({boxes}, {portsCount}, {maxBoxes}, {maxWeight}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.boxDelivering([[6, 9], [3, 9], [5, 7], [1, 8], [9, 3], [6, 7], [7, 6], [6, 4], [8, 10], [4, 6], [4, 1], [10, 2], [10, 6], [1, 4], [7, 2], [5, 7], [9, 6], [2, 4], [4, 6], [8, 10], [9, 7], [7, 5], [8, 5], [8, 10], [2, 10], [5, 5], [1, 5], [7, 4], [3, 4], [1, 3], [5, 6], [3, 7], [6, 8], [1, 9], [3, 2], [6, 9], [7, 3], [10, 4], [9, 8], [4, 6], [6, 4], [3, 1], [3, 1], [1, 5], [3, 7], [1, 5], [2, 9], [1, 4], [10, 4], [6, 10], [3, 5], [5, 4], [1, 6], [1, 4], [1, 7], [7, 1], [5, 2], [2, 2], [10, 7], [3, 3], [8, 8], [2, 1], [1, 2], [10, 5], [5, 5], [3, 2], [1, 5], [7, 5], [10, 7]], 2, 5, 7) == 14\nassert solution.boxDelivering([[5, 5]], 3, 4, 3) == 0\nassert solution.boxDelivering([[5, 8], [2, 8], [3, 10], [6, 9], [8, 7], [6, 1], [6, 9], [1, 6], [5, 3], [1, 3], [9, 8], [6, 1], [7, 2], [6, 5], [4, 9], [5, 9], [6, 7], [8, 5], [3, 6], [1, 6], [7, 1], [6, 4], [3, 1], [4, 3], [8, 2], [9, 3], [8, 5], [6, 3], [5, 1], [9, 10], [5, 4], [6, 3], [3, 8], [8, 6], [2, 4], [1, 1], [9, 10], [7, 8], [6, 8], [3, 7], [2, 5], [10, 8], [4, 9], [7, 2], [2, 8], [4, 9], [6, 1], [4, 10], [6, 9], [6, 2], [6, 8], [7, 8], [3, 9], [3, 10], [2, 6], [6, 10], [5, 6], [4, 2], [7, 5], [6, 6], [7, 1], [6, 6], [8, 2], [2, 7], [7, 7], [6, 3], [8, 10], [6, 1], [8, 9], [8, 8], [9, 1]], 6, 5, 9) == 7\nassert solution.boxDelivering([[5, 1], [1, 3], [6, 7], [2, 7], [9, 10], [9, 5], [4, 6], [4, 5], [7, 10], [1, 9], [1, 7], [1, 10], [9, 3], [8, 8], [8, 5], [1, 5], [5, 9], [10, 9], [6, 8], [4, 10], [6, 7], [7, 5], [1, 1], [4, 6], [6, 8], [3, 4], [8, 9], [7, 6], [9, 1], [4, 8], [6, 1], [9, 4], [4, 3], [1, 4], [9, 9], [3, 7], [1, 6], [6, 4], [5, 10], [5, 7], [2, 4], [9, 3], [5, 9], [10, 1], [7, 5], [7, 6], [7, 4], [2, 10], [4, 6], [4, 1], [4, 6], [2, 5], [2, 9], [1, 10], [4, 5], [9, 7], [10, 5], [1, 9], [2, 9], [1, 1], [9, 3], [2, 5], [3, 8], [1, 3], [3, 10], [3, 5], [4, 5], [2, 4], [3, 3], [6, 7], [5, 9], [7, 1]], 2, 1, 8) == 2\nassert solution.boxDelivering([[9, 1], [5, 7], [2, 4], [3, 2], [10, 7], [7, 4], [5, 2], [4, 1], [7, 7], [2, 9], [10, 8], [2, 4], [8, 4], [2, 5], [2, 10], [5, 10], [8, 3], [1, 8], [1, 6], [2, 2], [9, 10], [9, 10], [2, 2], [4, 4], [10, 10], [8, 7], [9, 8], [2, 5], [8, 4], [5, 3], [6, 8], [9, 5], [5, 3], [10, 9], [4, 2], [6, 8], [4, 3], [3, 9], [4, 8], [2, 2], [9, 3], [9, 4], [5, 2], [3, 4], [6, 2]], 7, 9, 2) == 2\nassert solution.boxDelivering([[2, 5], [10, 3], [8, 1], [5, 9], [5, 7], [6, 5], [6, 4], [10, 9], [10, 5], [10, 1], [1, 7], [6, 4], [8, 1], [1, 4], [9, 10], [4, 6], [3, 2], [2, 4], [2, 4], [10, 6], [10, 5], [1, 3], [9, 4], [10, 10], [2, 8], [4, 8], [4, 1], [10, 9], [10, 2], [2, 9], [4, 8], [6, 8], [7, 7], [8, 7], [7, 4], [5, 7], [1, 5], [4, 1], [3, 9], [3, 2], [8, 6], [4, 8], [4, 5]], 3, 3, 6) == 2\nassert solution.boxDelivering([[4, 5], [7, 2], [3, 10], [8, 1], [9, 5], [9, 3], [10, 6], [2, 6], [5, 6], [4, 10], [9, 9], [3, 10], [4, 1], [6, 4], [6, 10], [1, 4], [10, 3], [10, 7], [5, 6], [6, 3], [3, 4], [1, 4], [7, 9], [5, 7], [4, 6], [4, 2], [8, 3], [9, 5], [1, 3], [2, 3], [2, 2], [8, 6], [7, 3], [2, 2], [2, 3], [3, 6], [8, 5], [7, 3], [7, 5], [2, 6], [9, 3], [4, 9], [8, 6], [9, 9], [1, 5], [10, 6], [6, 4], [5, 5], [5, 8], [8, 6], [3, 2], [4, 6], [9, 7], [1, 3], [1, 6], [10, 4], [6, 4], [9, 4], [10, 4], [5, 3], [5, 8], [7, 3], [5, 4], [10, 7], [7, 10], [3, 4], [7, 4], [2, 9], [4, 4], [2, 9], [5, 1], [9, 1], [5, 4], [2, 7], [5, 6]], 7, 4, 6) == 2\nassert solution.boxDelivering([[2, 5], [1, 5], [9, 9], [1, 2], [4, 10], [1, 10], [6, 1], [7, 2], [4, 9], [1, 8], [5, 1], [5, 2], [7, 4], [6, 9], [9, 6], [9, 10], [9, 1], [3, 7], [7, 7], [6, 8], [2, 8], [6, 9], [2, 9], [3, 3], [6, 10], [6, 9], [5, 6], [5, 2], [4, 4], [8, 2], [8, 10], [1, 6], [9, 3], [2, 1], [1, 10], [6, 4], [4, 4], [10, 2], [2, 1], [6, 2], [2, 8], [3, 10], [7, 4], [5, 10], [4, 5], [10, 5], [6, 4], [6, 2], [10, 3], [5, 2], [9, 2], [4, 8], [10, 3], [7, 5]], 8, 3, 6) == 4\nassert solution.boxDelivering([[2, 2], [10, 4], [1, 7], [9, 2], [1, 7], [7, 5], [10, 6], [1, 9], [5, 10], [1, 8], [6, 1], [6, 1], [5, 7], [10, 8], [10, 8], [4, 8], [3, 7], [9, 3], [1, 6], [8, 7], [6, 9], [4, 9], [9, 3], [4, 2], [1, 8], [9, 6], [3, 4], [4, 8], [9, 5], [6, 7], [1, 9], [1, 9], [7, 9], [6, 1], [8, 3], [10, 5], [8, 6], [1, 5], [10, 5], [6, 6], [9, 1], [5, 6], [1, 6], [5, 3], [2, 4], [7, 9], [4, 2], [9, 6], [3, 9], [6, 6]], 8, 8, 8) == 2\nassert solution.boxDelivering([[1, 6], [3, 1], [4, 10], [8, 7], [2, 2], [6, 4], [8, 8], [8, 2], [5, 2], [6, 3], [3, 4], [4, 2], [6, 1], [9, 7], [1, 8], [1, 9], [8, 8], [7, 4], [3, 1], [8, 2], [8, 9], [7, 4], [10, 6], [6, 7], [6, 2], [8, 5], [7, 10], [10, 2], [4, 4], [4, 10]], 2, 1, 9) == 0\nassert solution.boxDelivering([[10, 2], [8, 6], [1, 2], [7, 9], [2, 6], [8, 2], [6, 3], [2, 6], [2, 5], [1, 1], [3, 8], [6, 10], [10, 7], [3, 1], [9, 5], [7, 7], [8, 6], [7, 10], [9, 10], [9, 9], [10, 1], [2, 7], [6, 5], [4, 9], [7, 3], [7, 7], [6, 10], [9, 2], [3, 5], [8, 6], [10, 5], [5, 4], [3, 8], [8, 2], [1, 7], [10, 1], [4, 9], [5, 2], [7, 6], [4, 9], [5, 5], [2, 6], [6, 3], [5, 8], [2, 1], [8, 4], [1, 7], [9, 9], [3, 5], [6, 5], [7, 7], [7, 2], [9, 2], [5, 9], [4, 2], [3, 8], [7, 7], [5, 6], [10, 2], [10, 9], [8, 2], [4, 4], [6, 8], [2, 2], [10, 3], [3, 4], [6, 8], [8, 7], [9, 9], [2, 2], [6, 6], [6, 8], [1, 10], [5, 8], [10, 8], [4, 5], [9, 1], [3, 5], [2, 7], [1, 3], [3, 10], [10, 2], [10, 3]], 6, 4, 4) == 4\nassert solution.boxDelivering([[10, 3], [6, 10], [4, 7], [4, 7], [7, 1], [4, 7], [5, 10], [2, 10], [7, 1], [9, 4], [5, 1], [6, 6], [4, 1], [2, 1], [3, 1], [5, 2], [8, 4], [4, 7], [2, 8], [5, 8], [2, 3], [8, 7], [1, 2], [2, 8], [7, 1], [5, 3], [7, 3], [3, 9], [1, 6], [3, 8], [4, 5], [8, 7], [1, 1], [7, 1], [5, 2], [10, 7], [7, 7], [1, 9], [9, 9], [10, 7], [2, 8], [1, 4], [3, 9], [8, 3], [4, 2], [7, 1], [10, 9], [6, 9], [9, 7]], 4, 6, 10) == 82\nassert solution.boxDelivering([[2, 8], [9, 5], [8, 1], [6, 10], [2, 5], [1, 3]], 9, 5, 4) == 2\nassert solution.boxDelivering([[8, 6], [4, 3], [5, 7], [10, 1], [6, 2], [4, 2], [3, 1], [7, 1], [9, 1], [5, 8], [1, 5], [5, 1], [8, 4], [3, 6], [10, 9], [5, 8], [9, 4], [2, 9], [4, 9], [6, 7], [9, 2], [6, 10], [9, 7], [4, 7], [2, 6], [9, 3], [7, 1], [6, 3], [9, 3], [8, 5], [6, 1], [6, 9]], 3, 2, 10) == 51\nassert solution.boxDelivering([[8, 4], [2, 8], [8, 5], [2, 1], [8, 8], [8, 5], [8, 5], [1, 6], [4, 7], [1, 9], [1, 1], [1, 9], [2, 8], [10, 3], [1, 1], [10, 10], [4, 3], [8, 2], [6, 1], [8, 6], [3, 9], [7, 9], [9, 3], [4, 3], [10, 1], [10, 4], [1, 5], [3, 2], [8, 10], [6, 6], [2, 9], [3, 10], [8, 9], [6, 2], [8, 10], [1, 2], [10, 8], [6, 9], [4, 5], [1, 3], [9, 1], [3, 4], [6, 10], [7, 10], [5, 3], [6, 2], [8, 5], [9, 10], [4, 4], [9, 8], [8, 1], [4, 10], [7, 10], [9, 7], [4, 1], [2, 4], [4, 3], [9, 3], [3, 10], [2, 4], [8, 4], [8, 3], [2, 9], [9, 9], [5, 4], [6, 1], [2, 6], [5, 8], [4, 8], [7, 8], [8, 4], [6, 3], [8, 3], [7, 5], [10, 10], [5, 6], [7, 5], [5, 6], [10, 10], [7, 7], [2, 5], [8, 7], [7, 2], [5, 6], [6, 4], [4, 5], [3, 3], [10, 6], [6, 3], [5, 9], [3, 10], [10, 8], [1, 6], [10, 2], [3, 10], [8, 8]], 10, 8, 8) == 2\nassert solution.boxDelivering([[7, 6], [4, 2], [6, 4], [5, 2], [9, 3], [10, 10], [6, 3], [4, 6], [6, 4], [9, 1], [5, 5], [4, 6], [7, 4], [1, 3], [4, 2], [9, 9], [9, 9], [3, 7], [10, 4], [5, 1], [7, 2], [9, 4], [6, 4], [10, 10], [4, 2], [1, 1], [6, 10], [6, 3], [2, 8], [5, 8], [5, 1], [3, 5], [9, 1], [7, 6], [1, 2], [7, 10], [1, 5], [1, 4], [5, 8], [5, 3], [4, 5], [8, 4], [3, 7], [6, 8], [4, 2], [7, 3], [2, 2], [3, 5], [9, 1], [7, 10], [1, 4], [7, 2], [9, 4], [4, 4], [10, 1], [3, 2], [7, 3], [1, 4], [5, 6], [5, 3], [10, 6], [6, 2], [8, 7], [1, 10], [7, 8], [9, 3], [8, 8], [4, 6], [7, 8], [10, 6], [6, 10], [3, 1], [4, 1], [1, 8], [8, 10], [6, 5], [5, 10], [9, 5], [8, 2]], 4, 3, 7) == 3\nassert solution.boxDelivering([[1, 8], [4, 3], [1, 8], [3, 2], [9, 1], [8, 2], [4, 4], [7, 3], [4, 4], [7, 5], [3, 1], [9, 1], [10, 3], [8, 3], [10, 1], [10, 6], [4, 10], [4, 8], [1, 5], [6, 6], [3, 4], [8, 3], [1, 1], [3, 3], [1, 4], [9, 8], [9, 10], [9, 8], [4, 1], [10, 6], [5, 8], [1, 4], [8, 7], [5, 2], [4, 5], [1, 4], [1, 7], [5, 5], [7, 7], [7, 2]], 6, 8, 5) == 2\nassert solution.boxDelivering([[5, 6], [6, 8], [2, 1], [4, 6], [9, 5]], 4, 3, 1) == 0\nassert solution.boxDelivering([[10, 7], [4, 5], [3, 1], [9, 3], [1, 4], [7, 9], [7, 8], [5, 9], [10, 10], [8, 10], [2, 10], [3, 5], [9, 3], [9, 2], [1, 9], [7, 6], [5, 3], [9, 5], [5, 10], [8, 1], [5, 9], [1, 7], [4, 9], [9, 10], [10, 3], [6, 2], [10, 10], [8, 8], [2, 3], [2, 1], [8, 4], [6, 5], [3, 7], [10, 3], [10, 9], [10, 8], [7, 9], [8, 7], [1, 10], [8, 1], [8, 2], [8, 3], [7, 8], [1, 8], [5, 5], [1, 6], [9, 10], [10, 9], [10, 1], [3, 4], [3, 9], [3, 3], [7, 3], [3, 5], [6, 2], [1, 7], [6, 9], [2, 5], [10, 5], [10, 6], [2, 10], [8, 10], [2, 2], [3, 5], [5, 2], [6, 3], [6, 8], [4, 10], [5, 7], [3, 6], [2, 1], [3, 8], [9, 1], [9, 9], [5, 4], [7, 8], [2, 7], [5, 4]], 3, 9, 9) == 18\nassert solution.boxDelivering([[7, 3], [2, 4], [3, 9], [10, 1], [5, 5], [10, 5]], 8, 4, 6) == 5\nassert solution.boxDelivering([[8, 9], [2, 2], [5, 7], [9, 9], [7, 3], [3, 2], [1, 9], [9, 2], [2, 5], [4, 5], [9, 7], [4, 7], [9, 2], [7, 8], [7, 1], [9, 1], [3, 8], [9, 1], [4, 1], [7, 8], [5, 6], [2, 4], [5, 3], [9, 7], [8, 7], [5, 8], [9, 4], [7, 3], [10, 6], [8, 7], [7, 6], [10, 5], [1, 6], [5, 9], [6, 9], [10, 4], [3, 8], [2, 7], [3, 8], [8, 4], [4, 9], [10, 5], [10, 6], [1, 10], [8, 2], [5, 3], [4, 1], [4, 2], [9, 6], [10, 4], [2, 6], [6, 5], [10, 10], [5, 7], [3, 4], [5, 4], [5, 6], [6, 8], [4, 1], [8, 6], [9, 7], [9, 7], [8, 3]], 8, 5, 6) == 2\nassert solution.boxDelivering([[3, 8], [7, 7], [1, 4], [1, 7], [3, 5], [4, 3], [5, 5], [2, 1], [3, 1], [7, 7], [1, 2], [7, 1], [6, 3], [6, 3], [1, 3], [6, 7], [1, 9], [9, 4], [5, 2], [10, 4], [1, 2]], 5, 6, 2) == 2\nassert solution.boxDelivering([[5, 5], [5, 1], [3, 1], [5, 6], [2, 7], [1, 3], [8, 6], [6, 1], [8, 3], [8, 5], [10, 3], [2, 5], [6, 3], [7, 1], [2, 4], [9, 5], [6, 3]], 5, 3, 5) == 18\nassert solution.boxDelivering([[1, 7], [1, 4], [10, 4], [1, 9], [8, 5], [3, 9], [8, 7], [8, 9], [5, 7], [3, 3], [10, 10], [9, 10], [9, 7], [9, 10], [2, 8], [8, 3]], 6, 3, 9) == 4\nassert solution.boxDelivering([[4, 8], [1, 5], [5, 10], [4, 7], [10, 7], [1, 3], [1, 8], [2, 9], [9, 3], [4, 5], [3, 7], [8, 6], [5, 6], [3, 5], [1, 7], [3, 2], [3, 10], [4, 2], [8, 6], [5, 2], [5, 7], [1, 8], [8, 1], [9, 10], [5, 8], [2, 3], [8, 1], [3, 7], [4, 5], [10, 2], [10, 5], [10, 8], [4, 4], [7, 1], [10, 5], [2, 8], [3, 2], [9, 5], [2, 8], [3, 4], [3, 10], [2, 4], [1, 6], [9, 3], [6, 9], [9, 8], [10, 2], [10, 6], [2, 5], [3, 9], [8, 8]], 10, 4, 9) == 17\nassert solution.boxDelivering([[10, 8], [10, 2], [4, 6], [6, 4], [2, 5], [6, 4], [9, 9], [10, 3], [1, 6], [6, 1], [2, 2], [4, 7], [2, 1], [2, 3], [9, 5], [2, 7], [7, 8], [1, 3], [10, 6], [8, 4], [8, 1], [5, 3], [8, 6], [1, 7], [4, 2], [9, 6], [7, 3], [1, 8], [7, 5], [1, 10], [1, 5], [8, 1], [10, 9], [3, 9], [1, 5]], 3, 1, 8) == 2\nassert solution.boxDelivering([[10, 8], [4, 6], [4, 3], [10, 10], [3, 7], [10, 8], [2, 5], [4, 6], [10, 2], [6, 9], [7, 3], [10, 9], [8, 10], [9, 7], [2, 2], [4, 6], [4, 9], [8, 2], [4, 7], [3, 2], [10, 3], [8, 5], [4, 5], [10, 1], [7, 3], [6, 3], [3, 6], [2, 4], [2, 2], [3, 10], [6, 10], [9, 1], [7, 10], [6, 4], [5, 7], [7, 7], [5, 7], [2, 1]], 10, 9, 9) == 9\nassert solution.boxDelivering([[4, 5], [7, 9], [1, 5], [4, 4], [9, 7], [3, 1], [3, 5], [9, 9], [10, 8], [3, 2], [5, 4], [5, 9], [2, 7], [7, 7], [6, 6], [1, 7], [8, 9], [3, 6], [10, 7], [8, 7], [3, 6], [8, 10], [9, 7], [4, 2], [3, 9], [6, 3], [1, 6], [3, 5], [7, 8], [1, 4], [3, 7], [1, 10], [5, 5], [10, 2], [9, 5], [1, 1], [3, 5], [2, 4], [5, 4], [5, 5], [2, 2], [3, 3], [6, 10], [2, 3]], 3, 3, 2) == 0\nassert solution.boxDelivering([[10, 8], [10, 7], [1, 4], [7, 3], [9, 3], [6, 9], [1, 2], [10, 10], [10, 7], [10, 1], [3, 8], [9, 8], [4, 5], [9, 6], [5, 1], [8, 10], [6, 3], [1, 1], [9, 5], [2, 6], [6, 8], [3, 10], [2, 9], [6, 10], [8, 5], [2, 4], [5, 6], [9, 3], [7, 9], [6, 4], [3, 8], [10, 6], [1, 5], [10, 8], [6, 8], [4, 5], [6, 3], [10, 8], [2, 2], [2, 3], [8, 10], [5, 1], [2, 4], [1, 4], [1, 1], [5, 1], [1, 4], [10, 4], [8, 10], [6, 3]], 9, 6, 5) == 2\nassert solution.boxDelivering([[10, 6], [7, 2], [10, 4], [4, 9], [2, 8], [7, 10], [5, 1], [8, 7], [3, 3], [6, 3], [6, 6], [1, 7], [6, 5], [5, 9], [8, 10], [8, 5], [1, 1], [10, 7], [5, 6], [2, 1], [10, 5], [10, 8], [2, 7], [8, 5], [1, 2], [8, 9], [1, 1], [8, 3], [3, 1], [9, 5], [3, 10], [7, 10], [7, 4], [10, 3], [3, 3], [6, 5], [10, 8], [8, 6], [8, 9], [7, 10], [9, 9], [8, 2], [3, 6], [7, 7], [8, 8], [8, 1], [10, 5], [4, 10], [9, 1], [2, 10], [7, 5], [5, 9], [10, 10], [8, 9], [6, 10], [9, 3], [9, 6], [5, 7], [6, 3], [3, 9], [6, 9], [8, 1], [10, 3], [1, 9], [7, 1], [4, 2], [6, 6], [2, 1], [5, 7], [2, 5], [5, 5], [2, 6], [5, 8], [6, 5], [3, 1], [8, 4], [2, 4], [4, 4], [10, 2], [3, 3], [10, 8], [7, 7], [9, 10], [1, 6], [5, 3], [2, 7], [10, 1], [2, 4], [8, 7], [6, 9], [1, 1], [4, 3], [4, 5], [8, 4], [6, 10], [3, 5], [4, 5], [1, 10], [3, 3], [9, 5]], 3, 2, 9) == 3\nassert solution.boxDelivering([[9, 7], [3, 3], [8, 6], [9, 1], [10, 6], [4, 4], [2, 10], [10, 8], [10, 5], [2, 7], [10, 8], [9, 9], [8, 3], [6, 2], [7, 7], [1, 9], [2, 9], [2, 9], [4, 9], [10, 6], [2, 7], [8, 1], [4, 10], [9, 7], [3, 4], [10, 2], [1, 9], [8, 4], [2, 5], [4, 4], [4, 6], [2, 8], [7, 9]], 6, 6, 5) == 0\nassert solution.boxDelivering([[3, 7], [7, 9], [2, 5], [1, 5], [8, 4], [1, 3], [4, 5], [8, 9], [5, 2], [2, 10], [10, 5], [6, 5], [10, 2], [8, 8], [10, 6]], 10, 9, 5) == 0\nassert solution.boxDelivering([[3, 9], [7, 6], [3, 10], [9, 7], [9, 10], [9, 9], [9, 1], [7, 5], [7, 3], [1, 10], [8, 10], [6, 4], [10, 9], [4, 2], [5, 10], [1, 4], [1, 3], [8, 4], [6, 4], [1, 2], [8, 3], [6, 2], [6, 8], [3, 1], [5, 10], [4, 7], [8, 5], [10, 7], [8, 9], [1, 6], [8, 3], [5, 9], [10, 5], [7, 8], [5, 3], [10, 7], [1, 10], [5, 1], [1, 6], [6, 4], [8, 3], [3, 6], [1, 5], [2, 1], [8, 5], [3, 3], [8, 5], [4, 4], [7, 4], [8, 1], [2, 8], [9, 3], [10, 8], [3, 8], [6, 6], [4, 1], [10, 1], [7, 3], [4, 1], [10, 6], [2, 8], [1, 5], [7, 3], [7, 2], [2, 2], [7, 10], [4, 9], [4, 7], [5, 2], [2, 2], [4, 4], [4, 9], [9, 4], [9, 10], [1, 5], [2, 8], [10, 2], [2, 9], [3, 4], [8, 3], [8, 2], [9, 2], [1, 5]], 4, 4, 10) == 134\nassert solution.boxDelivering([[3, 8], [5, 7], [6, 5], [7, 7]], 10, 9, 9) == 8\nassert solution.boxDelivering([[7, 8], [1, 7], [6, 5], [10, 6], [6, 3], [6, 4], [9, 6], [6, 3], [5, 3], [9, 7], [9, 6], [8, 1], [2, 7], [1, 5], [8, 3], [7, 4], [5, 3], [9, 3], [6, 4], [8, 6], [3, 3], [1, 1], [7, 10], [3, 2], [7, 3], [2, 5], [2, 10], [4, 1], [10, 9], [5, 9], [6, 9], [3, 5], [1, 2]], 8, 5, 6) == 4\nassert solution.boxDelivering([[3, 5], [7, 9], [3, 9], [7, 2], [2, 6], [5, 3], [3, 1], [6, 1], [8, 2], [3, 1], [4, 9], [2, 7], [5, 2], [4, 2], [1, 10], [5, 3], [10, 3], [4, 2], [1, 5], [6, 9], [10, 3], [8, 9], [3, 4], [7, 8], [8, 6], [2, 7], [5, 3], [3, 1], [5, 7], [10, 7], [2, 2], [1, 10], [1, 4], [7, 3], [10, 3], [2, 10], [7, 9], [8, 8], [8, 3], [10, 1], [6, 10], [10, 1], [6, 1], [1, 7], [10, 3], [7, 9], [2, 5], [9, 3], [5, 8], [3, 7], [6, 10], [1, 5], [5, 5], [7, 3]], 6, 1, 5) == 6\nassert solution.boxDelivering([[8, 3], [8, 7], [3, 2], [5, 6], [1, 8], [7, 8], [8, 8], [1, 4], [2, 7], [5, 9], [9, 6], [1, 4], [6, 9], [1, 4], [2, 10], [5, 7], [9, 1], [1, 1], [10, 5], [10, 1], [4, 2], [1, 1], [1, 3], [8, 3], [1, 10], [6, 10], [3, 7], [4, 10], [8, 9], [4, 9], [4, 5], [6, 4], [9, 10], [10, 5], [3, 7], [2, 9], [7, 8], [8, 10], [10, 1], [4, 10], [8, 3], [4, 2], [5, 2], [5, 9], [4, 3], [2, 1], [4, 6], [8, 6], [9, 4], [6, 2], [3, 1], [5, 10], [9, 2], [2, 5], [10, 10], [6, 4], [8, 2], [3, 5], [3, 9], [3, 9], [1, 3], [6, 4], [3, 5], [4, 9], [6, 6], [1, 1], [9, 1], [4, 9], [10, 1], [4, 2], [2, 2], [5, 6], [2, 6], [4, 3], [7, 10], [1, 8], [4, 9], [9, 4], [1, 9], [7, 4], [8, 1], [7, 2], [4, 1], [1, 8], [6, 4], [6, 6], [7, 8], [4, 3], [2, 7], [5, 8], [7, 5], [8, 6], [10, 10]], 3, 2, 2) == 0\nassert solution.boxDelivering([[6, 7], [5, 2], [8, 2], [2, 8], [7, 3], [6, 3], [4, 7], [3, 3], [10, 3], [1, 8], [3, 5], [2, 10], [4, 4], [2, 4], [4, 10], [1, 6], [9, 7], [9, 6], [6, 9], [10, 9], [4, 2], [5, 4], [7, 1], [1, 4], [6, 10], [10, 5], [7, 3], [8, 6], [6, 8], [5, 1], [3, 9], [3, 6], [3, 5], [8, 3], [1, 3], [4, 2], [7, 7], [8, 4], [3, 6], [5, 4], [9, 4], [2, 10], [3, 9], [5, 7], [3, 1], [3, 7], [6, 6], [8, 1], [9, 3], [8, 3], [8, 6], [8, 2], [1, 3], [2, 1], [6, 7], [1, 5], [7, 3], [1, 6], [3, 5], [10, 7], [2, 6], [4, 7], [3, 10], [4, 2], [1, 8], [6, 9], [4, 4], [9, 1], [6, 1], [4, 1], [6, 3], [4, 8], [7, 3], [6, 6]], 9, 2, 7) == 4\nassert solution.boxDelivering([[10, 9], [4, 2], [8, 8], [9, 8], [7, 7], [9, 7], [3, 2], [6, 1], [6, 7], [10, 2], [6, 6], [10, 7], [1, 1], [9, 8], [6, 1], [3, 5], [6, 6], [2, 4], [9, 3], [2, 4], [5, 2], [7, 5], [6, 7], [1, 8], [4, 6], [10, 5], [4, 5], [7, 10], [1, 8], [10, 5], [5, 5], [4, 7], [6, 8], [7, 9], [10, 10], [1, 5], [9, 5], [5, 5], [9, 9], [10, 9], [6, 5], [3, 8], [8, 3], [8, 4], [4, 4], [3, 7], [5, 4], [3, 4], [8, 1], [9, 3], [9, 8], [6, 4], [3, 10], [1, 2], [1, 1], [1, 9], [7, 4], [3, 6], [10, 3], [9, 9], [4, 4], [7, 2], [7, 5], [7, 3], [3, 8], [2, 1], [3, 9], [6, 10], [3, 4], [5, 6], [8, 9], [2, 8], [5, 6], [9, 2], [2, 3], [4, 6], [1, 6], [1, 10], [2, 6], [5, 1], [4, 8], [6, 2], [5, 6], [4, 8]], 7, 6, 5) == 0\nassert solution.boxDelivering([[6, 7], [7, 9], [1, 9], [9, 7], [5, 3], [1, 9], [3, 1], [4, 10], [10, 8], [10, 1], [1, 10], [4, 9], [2, 4], [9, 2], [1, 3], [4, 8], [9, 9], [8, 7], [1, 7], [3, 5], [2, 2], [9, 9], [2, 3], [7, 1], [8, 10], [10, 7], [3, 8], [10, 9], [8, 4], [3, 8], [1, 2], [7, 10], [10, 6], [9, 6], [6, 1], [1, 4], [7, 8], [3, 7], [7, 2], [2, 6], [1, 4], [4, 5], [3, 9], [7, 4], [6, 6], [6, 9], [8, 9], [9, 10], [9, 7], [5, 5], [9, 2], [5, 5], [5, 3]], 7, 2, 9) == 7\nassert solution.boxDelivering([[3, 3], [3, 8], [8, 8], [5, 6], [7, 4], [9, 9], [9, 1], [8, 9], [1, 10], [6, 3], [3, 2], [3, 9], [6, 10], [2, 8], [10, 6], [2, 5], [8, 3], [6, 1], [5, 9], [7, 7], [1, 8], [7, 9], [9, 1], [7, 8], [1, 6], [10, 7], [9, 3], [1, 9], [10, 7], [5, 8], [10, 2], [10, 6], [4, 6], [1, 8], [5, 6], [10, 6], [1, 3], [5, 7], [3, 5], [1, 8], [3, 4], [3, 2], [8, 4], [3, 4], [7, 3], [1, 1], [6, 7], [1, 9], [4, 6], [7, 7], [7, 7], [3, 6], [2, 3], [8, 5], [2, 1], [2, 2], [6, 3], [5, 1], [9, 3], [10, 9], [10, 7], [6, 1], [5, 4], [7, 9], [6, 4], [5, 2], [6, 8]], 9, 1, 8) == 6\nassert solution.boxDelivering([[8, 10], [9, 5], [8, 10], [8, 4], [10, 1], [7, 10], [7, 10], [10, 3], [9, 3], [3, 7], [6, 9], [5, 10], [6, 3], [1, 6], [8, 10], [4, 1], [2, 9], [9, 4], [9, 2], [7, 4], [3, 2], [10, 9], [1, 3], [3, 10], [10, 4], [4, 5], [6, 4], [7, 10], [4, 4], [8, 8], [9, 4], [5, 2], [7, 10], [8, 5], [3, 3], [4, 5], [4, 4], [8, 6], [8, 4], [5, 6], [8, 7], [9, 9], [9, 1], [4, 6], [2, 8], [7, 1], [5, 4], [8, 8], [3, 6], [4, 10], [4, 9], [10, 4], [10, 4], [10, 6], [9, 8], [2, 7], [8, 2], [8, 10], [1, 10], [3, 2], [3, 2], [8, 1], [5, 6], [1, 6], [5, 9], [4, 7], [2, 10], [4, 8], [9, 1], [4, 3], [4, 1], [5, 10], [7, 1], [4, 9], [8, 3], [6, 9], [5, 4], [4, 3], [7, 5], [2, 10], [2, 1], [8, 6], [10, 7], [4, 9], [3, 4], [6, 10], [2, 8], [4, 7], [7, 1]], 5, 4, 2) == 2\nassert solution.boxDelivering([[9, 1], [5, 9], [3, 5], [3, 8], [3, 4], [1, 7], [10, 2], [6, 5], [2, 5], [9, 6], [4, 2], [2, 8], [5, 7], [9, 6], [7, 1], [2, 4], [5, 4], [4, 5], [3, 9], [5, 5], [9, 10], [10, 3], [2, 2], [7, 4], [10, 4], [10, 1], [8, 9], [10, 8], [5, 6], [9, 6], [7, 5], [9, 1], [10, 1], [3, 6], [2, 4], [4, 10], [9, 9], [4, 6], [4, 5], [5, 2], [5, 5]], 10, 9, 2) == 0\nassert solution.boxDelivering([[4, 3], [10, 2], [5, 9]], 5, 8, 4) == 0\nassert solution.boxDelivering([[10, 10], [5, 9], [8, 1], [6, 5], [7, 2], [6, 6], [8, 1], [2, 8], [5, 6], [6, 6], [2, 4], [8, 8], [3, 5], [4, 5], [1, 10], [8, 3], [6, 1], [2, 6], [10, 1], [10, 7], [10, 4], [5, 2], [4, 2], [8, 9], [10, 1], [6, 3], [7, 9], [7, 9], [9, 7], [6, 7], [5, 3], [2, 6], [3, 8], [10, 7], [4, 8], [7, 2], [5, 8], [6, 8], [4, 6], [7, 10], [7, 3], [9, 9], [3, 2], [10, 9], [4, 5], [10, 9], [7, 4], [6, 5], [9, 10], [7, 6], [5, 2], [4, 5], [1, 3], [8, 8], [6, 10], [8, 9], [6, 10], [5, 9], [1, 3], [7, 3], [7, 5], [6, 1], [8, 3], [2, 10], [3, 3], [4, 8], [3, 10], [5, 7], [9, 7], [9, 10]], 4, 7, 3) == 0\nassert solution.boxDelivering([[3, 10], [7, 2], [4, 6], [5, 4], [7, 2], [1, 1]], 6, 5, 8) == 7\nassert solution.boxDelivering([[9, 1], [7, 3], [9, 3], [8, 6], [1, 7], [9, 10], [6, 6], [2, 4], [10, 8], [2, 8], [9, 9], [4, 3], [6, 3], [2, 7], [1, 9], [7, 4], [3, 6], [7, 6], [4, 2], [8, 2], [7, 6], [3, 10], [2, 1], [10, 9], [8, 10], [2, 9], [10, 10], [9, 3], [3, 10], [7, 1], [1, 1], [7, 10], [6, 9], [5, 5], [6, 9], [2, 2], [1, 2], [4, 10], [9, 4], [7, 1], [10, 1], [2, 3], [8, 10], [5, 7], [2, 1], [3, 2], [9, 2], [1, 1], [1, 7], [3, 3], [3, 3], [10, 6], [4, 2], [2, 2], [2, 6], [10, 3], [3, 8], [2, 4], [8, 3], [3, 4], [8, 3], [2, 4], [7, 4], [3, 5], [4, 7], [3, 3], [2, 3], [2, 8]], 4, 3, 6) == 0\nassert solution.boxDelivering([[5, 1], [9, 7], [1, 1], [6, 5], [5, 1], [4, 2], [9, 2], [3, 6], [4, 2], [4, 6], [4, 9], [1, 2], [3, 9], [3, 9], [3, 2], [1, 9], [2, 8], [4, 1], [4, 2], [5, 2], [9, 8], [5, 10], [3, 2], [4, 9], [2, 4], [2, 7], [3, 7], [9, 7], [5, 4], [7, 7], [10, 2], [10, 6], [4, 9], [3, 4], [2, 10], [10, 7], [3, 10], [10, 7], [7, 3], [5, 4], [5, 9], [2, 10], [10, 1], [7, 6], [8, 3], [10, 7], [10, 10], [6, 2], [7, 8], [7, 2], [9, 7], [9, 5], [8, 7], [10, 1], [4, 3], [6, 2], [7, 8], [7, 4], [5, 10], [4, 9], [8, 10], [10, 6], [7, 8], [1, 3], [7, 9], [1, 10], [8, 4], [1, 2], [5, 9], [2, 4], [2, 6], [3, 3], [10, 9], [5, 5], [1, 7], [2, 3], [5, 4], [2, 4], [10, 4]], 9, 5, 2) == 0\nassert solution.boxDelivering([[2, 10], [4, 6], [10, 4], [5, 10], [5, 8], [5, 10], [7, 3], [7, 9], [7, 4], [2, 5], [10, 2], [6, 6], [6, 10], [8, 4], [8, 1], [7, 3], [8, 1], [3, 6], [7, 4], [1, 7], [2, 2]], 2, 3, 5) == 2\nassert solution.boxDelivering([[5, 1], [8, 3], [8, 10], [6, 9], [3, 4], [9, 1], [9, 1], [8, 6], [2, 3], [2, 7], [9, 4], [6, 2], [5, 3], [2, 5], [1, 4], [7, 1], [2, 10], [2, 8], [10, 3], [9, 1], [9, 1]], 8, 2, 8) == 6\nassert solution.boxDelivering([[2, 10], [8, 5], [6, 3], [2, 8], [5, 2], [1, 4], [6, 4], [6, 1], [6, 4]], 3, 4, 8) == 12\nassert solution.boxDelivering([[1, 5], [10, 6], [5, 4], [9, 4], [1, 1], [7, 2], [9, 8], [1, 3], [1, 10], [9, 9], [9, 9], [9, 3], [2, 3], [6, 7], [9, 7], [6, 9], [7, 5], [1, 4], [4, 1], [3, 2], [8, 6], [10, 9], [6, 10], [4, 1], [3, 9], [10, 8], [5, 1], [9, 7], [3, 9], [8, 4], [10, 3], [9, 6], [5, 5], [1, 6], [2, 4], [3, 5], [3, 8], [1, 9], [1, 2], [9, 6], [9, 7], [7, 4]], 9, 6, 3) == 0\nassert solution.boxDelivering([[8, 3], [9, 3], [9, 8], [8, 10], [2, 3], [4, 10], [5, 1], [7, 5], [4, 3], [7, 2], [5, 6], [9, 5], [5, 10], [4, 2], [8, 10], [6, 10], [2, 10], [5, 8], [10, 3], [7, 2], [8, 10], [9, 8], [5, 5], [8, 10], [8, 3], [10, 10], [10, 5], [5, 8], [7, 5], [10, 2], [6, 8], [10, 7], [6, 7], [10, 10], [6, 3], [3, 4], [8, 1], [9, 4], [8, 9], [3, 6], [6, 8], [7, 10], [1, 1], [3, 8], [4, 8]], 1, 2, 6) == 0\nassert solution.boxDelivering([[4, 1], [2, 3], [5, 9], [7, 8], [7, 8], [4, 10], [4, 1], [4, 8], [9, 10], [5, 2], [10, 2], [9, 6], [3, 6], [4, 5], [8, 8], [5, 1], [9, 7], [6, 2], [9, 5], [10, 6], [8, 2], [8, 8], [4, 9], [7, 1], [3, 5], [10, 8], [7, 3], [5, 1], [2, 9], [4, 8], [7, 4]], 2, 4, 3) == 0\nassert solution.boxDelivering([[7, 2], [10, 1], [8, 8], [1, 1], [2, 9], [4, 1], [10, 8], [8, 4], [3, 4], [4, 1], [1, 5], [9, 1], [6, 7], [8, 7], [3, 3], [7, 2], [7, 2], [10, 2], [1, 8], [5, 9], [2, 7], [7, 10], [5, 8], [10, 8], [6, 9], [3, 10], [8, 6], [4, 7], [2, 7], [5, 4], [8, 7], [6, 6], [9, 4], [7, 9], [4, 4], [4, 1], [2, 10], [4, 4], [1, 4], [4, 3], [1, 1], [2, 8], [10, 8], [6, 8], [8, 1], [3, 7], [6, 9], [9, 1], [7, 3], [10, 2], [5, 1], [10, 3], [4, 8], [4, 8], [8, 6], [7, 7], [6, 4], [9, 9], [7, 3], [9, 5], [9, 5], [6, 2], [3, 2], [3, 6], [9, 2], [10, 3], [8, 3], [6, 10], [6, 3], [2, 7], [7, 2], [7, 6], [8, 5], [7, 9], [2, 9], [4, 10], [8, 8]], 4, 5, 6) == 0\nassert solution.boxDelivering([[4, 3], [7, 2], [4, 3], [6, 4], [9, 1], [2, 1], [6, 9]], 8, 1, 10) == 14\nassert solution.boxDelivering([[7, 9], [7, 4], [1, 6], [5, 4], [7, 2], [6, 2], [9, 6], [8, 4], [7, 3], [6, 4], [10, 10], [6, 3], [3, 2], [7, 6], [10, 4], [6, 7], [4, 2], [1, 8], [7, 1], [10, 5], [5, 5], [10, 3], [8, 8], [5, 3], [3, 6], [3, 5], [10, 4], [4, 1], [1, 10], [1, 2], [3, 9], [1, 3], [6, 2], [3, 8], [9, 8], [10, 6], [6, 2], [8, 1], [3, 1], [3, 7], [9, 10], [8, 9], [6, 10], [9, 4], [4, 2], [6, 4], [3, 8], [6, 8], [7, 9], [6, 6], [10, 8], [6, 3], [9, 5], [4, 10], [10, 2], [3, 8], [10, 6], [6, 10], [6, 9], [1, 7], [10, 5], [5, 1], [9, 1], [2, 1], [10, 9], [7, 6], [8, 6], [5, 2], [9, 9], [4, 9], [10, 10], [4, 7], [10, 9], [3, 6], [8, 5], [2, 3], [1, 4], [4, 8], [8, 4], [6, 6], [8, 2], [5, 5], [10, 3], [6, 2], [10, 3]], 5, 7, 7) == 12\nassert solution.boxDelivering([[2, 10], [9, 7], [2, 9], [10, 3], [2, 1], [1, 8], [3, 4], [7, 7], [1, 9], [6, 3], [6, 4], [10, 2], [2, 9], [7, 3], [6, 2], [3, 1], [1, 7], [4, 6], [7, 8], [1, 6], [5, 7], [8, 2], [2, 3], [9, 7], [8, 9], [6, 9], [1, 8], [5, 4], [7, 7], [6, 10], [10, 9], [1, 5], [4, 5], [2, 3], [1, 5], [4, 4], [6, 3], [3, 6], [6, 8], [1, 4], [1, 3], [8, 2], [9, 2], [2, 2], [1, 8], [9, 5], [5, 9], [8, 9], [3, 7], [5, 8], [8, 5], [2, 1], [7, 5], [7, 10], [5, 1], [6, 4], [7, 7], [6, 10], [7, 3], [8, 10], [7, 3], [3, 7], [6, 3], [6, 4], [5, 1], [9, 1], [1, 9], [10, 6], [2, 9], [8, 6], [3, 3], [8, 3], [1, 6], [6, 7], [7, 4], [7, 2], [10, 4], [4, 2], [10, 4], [4, 9], [9, 5], [1, 3], [5, 7], [5, 9], [5, 7], [1, 2], [4, 6], [10, 2], [5, 3], [4, 6], [6, 3], [1, 3], [9, 3], [6, 6], [1, 10]], 7, 2, 4) == 0\nassert solution.boxDelivering([[3, 7], [7, 10], [7, 10], [3, 4], [2, 3], [6, 7], [3, 6], [8, 6], [6, 6], [9, 4], [6, 6], [6, 6], [3, 3], [6, 9], [9, 3], [3, 10], [9, 3], [10, 8], [1, 6], [3, 7], [3, 4], [10, 1], [8, 10], [9, 1], [5, 10], [6, 4], [6, 1], [8, 2], [6, 6], [10, 1], [3, 5], [9, 7], [8, 10], [5, 4], [10, 10], [2, 3], [7, 8], [8, 9], [3, 10], [2, 4], [8, 3], [8, 7], [4, 4], [7, 4], [4, 10], [2, 7], [1, 8], [6, 3], [2, 7], [6, 9], [8, 8], [6, 7], [8, 2], [7, 6], [5, 7], [8, 7], [2, 9], [2, 2], [5, 10], [5, 2], [3, 1], [1, 5], [3, 1], [7, 1], [8, 10], [4, 3], [7, 7], [4, 3], [7, 6], [1, 2], [4, 1], [1, 8], [6, 3], [1, 8], [2, 4]], 5, 3, 10) == 131\nassert solution.boxDelivering([[6, 10], [7, 9], [4, 10], [2, 5], [3, 9], [1, 5], [5, 8], [2, 6], [8, 2], [9, 6], [3, 8], [3, 7], [2, 5], [5, 6], [9, 4], [7, 8], [6, 6], [1, 3], [5, 5], [5, 4], [6, 10], [2, 6], [9, 2], [8, 10], [8, 8], [9, 7], [4, 9], [5, 4], [7, 3], [2, 6], [1, 5], [6, 1], [3, 5], [7, 9], [3, 9], [1, 7], [5, 7], [1, 1], [3, 6], [2, 10], [4, 3], [8, 10], [6, 5], [5, 9], [9, 10], [1, 3], [10, 7], [1, 3], [4, 10], [1, 6], [2, 4], [9, 3], [10, 2], [10, 3], [4, 1], [3, 1], [10, 4], [3, 6], [5, 5], [6, 10], [5, 4], [6, 5], [6, 1], [9, 1], [7, 4], [3, 7], [7, 8], [5, 9], [2, 1], [2, 1], [7, 10], [2, 4], [1, 7], [9, 9], [6, 5], [6, 8], [9, 5], [10, 4], [3, 8], [9, 3], [10, 2], [9, 7], [6, 2], [3, 5]], 8, 3, 9) == 23\nassert solution.boxDelivering([[7, 3], [8, 2], [7, 10], [7, 2], [6, 6], [7, 8], [6, 9], [8, 9], [10, 4], [9, 5], [5, 10], [5, 6], [1, 9], [2, 2], [8, 10], [7, 10], [6, 2], [10, 8], [7, 4], [5, 5], [5, 5], [9, 7], [10, 5], [3, 1], [3, 10], [8, 3], [9, 8], [1, 5], [3, 5], [7, 7], [3, 1], [4, 4], [2, 6], [8, 5], [9, 4], [8, 6], [6, 10], [8, 4], [10, 4], [3, 7], [8, 6], [9, 4], [8, 7], [5, 6], [8, 3], [2, 4]], 10, 4, 2) == 0\nassert solution.boxDelivering([[4, 10], [9, 6], [1, 2], [6, 1], [6, 1], [1, 7], [5, 5], [2, 1]], 2, 8, 9) == 9\nassert solution.boxDelivering([[6, 6], [3, 6], [2, 8], [2, 1], [3, 2], [6, 6], [8, 7], [9, 7], [7, 10], [5, 7], [2, 5], [10, 9], [6, 8], [5, 2], [1, 4], [4, 8], [10, 8], [1, 3], [10, 2], [7, 4], [5, 7], [6, 9], [6, 1], [4, 5], [1, 5], [6, 2], [7, 7], [8, 8], [7, 3], [2, 4], [7, 7], [10, 9], [4, 6], [4, 6], [4, 4], [8, 9], [4, 7], [3, 8]], 7, 8, 3) == 0\nassert solution.boxDelivering([[8, 5], [5, 5], [9, 9], [2, 6], [3, 5], [3, 6], [6, 2], [8, 1], [8, 1], [10, 4], [5, 2], [6, 9], [3, 1], [4, 10], [8, 4], [1, 4], [5, 9], [10, 6], [1, 7], [1, 6], [7, 9], [10, 4], [5, 1], [7, 8], [2, 4], [3, 1], [5, 2], [6, 8], [9, 6], [10, 8], [1, 6], [9, 5], [5, 3], [8, 3], [2, 9], [6, 2], [10, 8], [4, 4], [1, 5], [4, 8], [3, 5], [10, 8], [3, 10], [10, 6], [10, 9], [3, 1], [3, 9], [10, 10], [5, 6], [6, 7], [9, 8], [7, 1], [7, 8], [10, 4], [9, 1], [9, 2], [4, 7], [3, 1], [7, 8], [5, 7], [7, 2], [3, 6], [9, 10], [10, 2], [5, 2], [5, 2], [10, 3], [10, 8], [7, 7], [8, 8], [2, 10], [5, 2], [3, 2], [8, 6], [3, 6], [4, 10], [5, 5], [10, 5], [1, 1], [2, 7]], 6, 4, 5) == 0\nassert solution.boxDelivering([[10, 4], [3, 10], [5, 10], [10, 5], [1, 6], [5, 3], [10, 7], [10, 5], [5, 7], [7, 9], [7, 8], [7, 9], [1, 6], [5, 10], [6, 10], [8, 3], [1, 9], [7, 8], [5, 2], [7, 10], [8, 6], [3, 1], [4, 8], [7, 10], [1, 4], [2, 8], [6, 3], [10, 1], [4, 9], [9, 8], [8, 9], [5, 1], [4, 9], [9, 5], [1, 5], [4, 6], [4, 9], [2, 6], [4, 1], [5, 7], [9, 2], [7, 8], [10, 5], [8, 7], [2, 3], [7, 8], [1, 10], [3, 6], [7, 9], [9, 4], [10, 8], [8, 5]], 5, 10, 9) == 10\nassert solution.boxDelivering([[4, 5], [7, 10], [4, 5], [4, 7], [1, 6], [3, 7], [8, 4], [7, 1], [6, 9], [6, 4], [2, 4], [2, 2], [3, 6], [5, 2], [8, 5], [9, 6], [5, 7], [8, 10], [5, 2], [3, 9], [2, 8], [9, 7], [10, 2], [6, 5], [2, 9], [6, 4], [2, 5], [7, 3], [4, 5], [10, 4], [10, 9], [9, 7], [10, 5], [3, 7], [8, 6], [2, 6], [7, 4], [1, 2], [6, 5], [9, 7], [3, 4], [2, 1], [10, 4], [2, 10], [3, 6], [7, 4], [8, 9], [7, 4], [10, 2], [2, 5], [4, 1], [9, 7], [4, 10], [3, 2], [9, 4], [1, 7], [4, 3], [3, 3], [10, 5], [7, 10], [4, 9], [10, 5], [10, 3], [9, 10], [1, 5], [10, 5], [10, 2], [9, 10], [8, 8], [8, 4], [5, 1], [2, 5], [3, 2], [3, 10], [1, 3], [6, 10], [8, 10], [4, 3], [8, 3], [3, 8], [9, 10], [8, 10], [10, 8], [8, 3], [4, 5], [3, 3], [5, 1], [3, 3], [10, 4], [2, 6], [8, 7], [7, 2], [2, 8], [3, 7], [5, 9], [5, 7], [1, 6], [8, 1], [8, 10], [1, 8]], 1, 10, 7) == 0\nassert solution.boxDelivering([[9, 9], [10, 4], [5, 3], [7, 7], [1, 8], [5, 8], [10, 3], [5, 6], [4, 8], [9, 5], [5, 10], [10, 5], [5, 8], [3, 5], [3, 7], [4, 1], [3, 4], [5, 1], [6, 9], [10, 5], [4, 8], [9, 1], [5, 4], [3, 5], [7, 7], [5, 1], [10, 9], [5, 1], [10, 6], [10, 10], [10, 8], [5, 2], [4, 6], [10, 10], [10, 1], [5, 3], [10, 10]], 10, 1, 9) == 0\nassert solution.boxDelivering([[8, 1], [1, 3], [4, 5], [10, 3], [3, 4], [6, 10], [1, 2], [4, 1], [3, 9], [4, 9], [10, 10], [6, 3], [1, 6], [10, 10], [2, 10], [5, 8], [10, 6], [10, 7], [2, 4], [8, 7], [7, 5], [10, 1], [2, 1], [10, 1], [3, 7], [1, 3], [7, 9], [6, 7], [1, 8], [1, 6], [4, 4], [4, 6], [3, 9], [6, 1], [8, 1], [7, 1], [4, 8], [10, 5], [6, 3], [9, 9], [8, 1], [2, 3], [1, 2], [1, 10], [8, 9], [8, 5], [6, 6], [1, 1], [10, 5], [8, 1], [5, 10], [5, 4]], 1, 3, 10) == 86\nassert solution.boxDelivering([[7, 9], [9, 6], [9, 6], [10, 2], [8, 4], [9, 4], [8, 3], [2, 6], [8, 9], [6, 6], [6, 3], [2, 4], [10, 9], [10, 3], [10, 2], [5, 5], [4, 3], [10, 6], [3, 7], [7, 7], [7, 5], [5, 8], [7, 5], [9, 9], [1, 10], [7, 9], [8, 4], [5, 5], [5, 10], [9, 8], [1, 10], [6, 2], [9, 8], [8, 4], [5, 1], [9, 2], [8, 9], [1, 7], [4, 10], [10, 7], [9, 6], [2, 4], [4, 1], [5, 6], [1, 6], [1, 6], [10, 1], [2, 2], [6, 9], [10, 6], [1, 8], [3, 5], [4, 2], [9, 5], [5, 9], [9, 1], [1, 4], [7, 5], [1, 1], [10, 4], [3, 7], [5, 10], [6, 1], [6, 8], [4, 1], [1, 9], [10, 1], [2, 5], [1, 6], [10, 7], [5, 6], [7, 8], [9, 6], [6, 10], [3, 10], [6, 10]], 3, 5, 10) == 127\nassert solution.boxDelivering([[5, 2], [10, 1], [7, 1], [7, 8], [6, 6], [2, 7], [10, 9], [4, 6], [9, 7], [2, 8], [7, 6], [1, 6], [7, 9], [1, 4], [3, 5], [9, 6], [10, 9], [10, 10], [8, 10], [9, 3], [2, 7], [9, 5], [3, 8], [2, 9], [3, 1], [4, 6], [2, 8], [3, 8], [6, 10], [3, 8], [7, 9], [7, 10], [1, 8], [9, 6], [9, 2], [9, 10], [2, 2], [9, 5], [9, 1], [2, 1], [9, 7], [10, 7], [4, 10], [4, 6], [4, 1], [10, 4], [2, 5], [1, 3], [7, 7], [7, 5], [10, 4], [9, 6], [8, 1], [3, 1]], 5, 2, 10) == 91\nassert solution.boxDelivering([[8, 7], [7, 7], [10, 2], [6, 10], [8, 2], [8, 6], [1, 4], [9, 3], [3, 10], [4, 2], [4, 3], [7, 5]], 9, 8, 3) == 0\nassert solution.boxDelivering([[8, 3], [2, 3], [4, 6]], 10, 5, 4) == 0\nassert solution.boxDelivering([[10, 1], [4, 8], [3, 8], [1, 4], [6, 3], [10, 4], [1, 1], [8, 6], [9, 4], [3, 5], [1, 4], [10, 3], [6, 4], [9, 5], [3, 6], [10, 10], [6, 9], [5, 5], [3, 8], [1, 6], [3, 9], [2, 6], [7, 6], [5, 6], [9, 10], [6, 6], [3, 10], [1, 7], [3, 6], [9, 9], [1, 4], [3, 5], [10, 8], [8, 6], [2, 3], [2, 7], [9, 10], [8, 8], [3, 7], [9, 1], [3, 1], [9, 4], [9, 4], [10, 1], [9, 4], [4, 8], [6, 10], [3, 5], [10, 7], [5, 3], [10, 2], [9, 6], [6, 4], [10, 8], [7, 1], [3, 6], [9, 1], [4, 3], [7, 8], [3, 7], [5, 7], [7, 3]], 3, 5, 1) == 0\nassert solution.boxDelivering([[7, 10], [1, 4], [5, 9], [10, 6], [10, 4], [5, 9], [10, 5], [7, 10], [7, 7], [4, 10], [1, 10], [3, 7], [8, 5], [6, 1], [5, 4], [1, 2], [5, 1], [4, 7], [7, 5], [5, 10], [7, 5], [1, 6], [6, 5], [5, 6], [6, 4], [10, 4], [10, 5], [6, 5], [1, 4], [4, 9], [1, 5], [6, 8], [5, 3], [8, 9], [8, 3], [6, 1], [1, 5], [8, 4], [2, 9], [6, 3], [3, 3], [9, 1], [1, 6], [6, 3], [6, 5], [6, 2], [1, 4], [5, 10], [4, 3], [1, 1], [3, 10], [6, 6], [9, 3], [9, 4], [7, 1], [4, 5], [6, 8], [9, 8], [10, 10], [3, 6], [9, 6], [10, 9], [9, 2], [1, 9], [2, 10]], 2, 6, 5) == 0\nassert solution.boxDelivering([[10, 8], [1, 2], [5, 1], [10, 3], [8, 6], [2, 3], [6, 10], [10, 5], [5, 6], [10, 2], [7, 8], [5, 7], [6, 6], [2, 7], [1, 6], [2, 3], [7, 7], [2, 8], [9, 2], [3, 3], [8, 9], [9, 8], [3, 3], [3, 5], [5, 8], [9, 4], [4, 3], [5, 2], [9, 1], [2, 2], [1, 8], [5, 8], [9, 5]], 5, 10, 1) == 0\nassert solution.boxDelivering([[3, 9], [10, 8], [10, 7], [3, 4], [8, 6], [4, 4], [2, 4], [9, 2], [9, 6], [10, 3], [2, 5], [9, 5], [9, 8], [10, 1], [3, 10], [2, 3], [5, 9], [7, 8], [1, 4], [2, 6], [9, 9], [4, 1], [8, 8], [3, 5], [7, 1], [6, 10], [4, 5], [4, 1], [6, 3], [7, 10], [3, 9], [6, 1], [6, 8], [6, 3], [2, 4], [3, 6], [4, 2], [5, 9], [7, 7], [9, 2], [7, 3], [4, 9], [4, 6], [4, 4], [7, 2], [10, 1], [2, 7], [1, 5], [7, 5], [9, 10], [6, 6], [5, 10], [9, 2], [5, 5], [1, 2], [3, 4], [10, 3], [10, 10], [4, 10], [5, 3], [10, 9], [3, 6], [2, 4], [6, 2], [6, 5], [4, 6], [8, 8], [3, 7]], 9, 6, 5) == 0\nassert solution.boxDelivering([[8, 3], [2, 5], [1, 2], [9, 3], [4, 10], [8, 2], [7, 1], [9, 7], [9, 9], [1, 9], [6, 9], [1, 6], [1, 9], [1, 3], [3, 8]], 7, 7, 7) == 0\nassert solution.boxDelivering([[8, 10], [4, 2], [4, 7], [6, 10], [6, 9], [6, 5], [6, 6], [5, 7], [7, 3], [9, 3], [9, 4], [2, 5], [7, 4], [5, 7], [1, 9]], 1, 8, 3) == 0\nassert solution.boxDelivering([[4, 1], [5, 6], [4, 10], [2, 10], [7, 7], [2, 8], [3, 9], [5, 4], [3, 1], [6, 6], [4, 1], [9, 7], [9, 9], [2, 1], [7, 3], [7, 6], [3, 8], [10, 4], [10, 5], [9, 9], [9, 10], [1, 8], [5, 7], [9, 4], [3, 5], [3, 2], [9, 9], [5, 1], [7, 7], [8, 5], [2, 10], [4, 1], [4, 8], [4, 8], [7, 4], [5, 1], [5, 6], [5, 4], [8, 7], [2, 2], [9, 7], [7, 5], [9, 2], [10, 3], [1, 10], [9, 6], [1, 5], [9, 9], [2, 6], [1, 6], [6, 6], [10, 2], [4, 2], [1, 6], [9, 5], [3, 7], [8, 1], [5, 9], [6, 3], [2, 8], [5, 10], [8, 3], [2, 4], [2, 8], [5, 10], [7, 9], [6, 9], [7, 3], [2, 1], [3, 3], [4, 4], [5, 6], [1, 9], [7, 1], [1, 7], [2, 10], [5, 10], [5, 5], [9, 5], [6, 6], [2, 1], [2, 5], [7, 5], [9, 6], [3, 2], [4, 8], [4, 1], [3, 7], [9, 5], [9, 3], [9, 8], [1, 9], [4, 1], [2, 2], [8, 7], [9, 9], [7, 3], [9, 2]], 4, 1, 5) == 4\nassert solution.boxDelivering([[1, 8], [1, 1], [2, 4], [9, 9], [9, 9], [10, 5], [3, 2], [7, 5], [6, 7]], 2, 3, 4) == 0\nassert solution.boxDelivering([[6, 2], [5, 3], [6, 10], [3, 8], [3, 2], [2, 4], [3, 2], [7, 9], [10, 4], [3, 8], [5, 1], [7, 4], [9, 10], [1, 2], [10, 7], [10, 3], [3, 5], [5, 8], [2, 10], [4, 9], [8, 2], [4, 1], [6, 3], [5, 4], [5, 1], [9, 5], [6, 7], [8, 9], [5, 5], [5, 7], [2, 1], [3, 3], [10, 8], [2, 8], [2, 1], [7, 1], [4, 7], [10, 4], [7, 10], [7, 10], [2, 4], [7, 9], [7, 10], [5, 3], [8, 5], [7, 8], [5, 2], [7, 5], [3, 7], [6, 10], [6, 10], [8, 10], [8, 3], [4, 8], [8, 1], [3, 6], [10, 4], [2, 4], [7, 9], [10, 2], [5, 5], [10, 8], [4, 2], [4, 6], [6, 6], [6, 5], [9, 2], [3, 2], [5, 1], [8, 2], [3, 3], [1, 1], [9, 8], [5, 7], [3, 8], [7, 10], [4, 1], [5, 7], [8, 5], [6, 6], [9, 1], [2, 8], [6, 6], [9, 4], [4, 2], [8, 2], [10, 4], [2, 2], [8, 3], [10, 10], [6, 5], [3, 4], [3, 9], [7, 5], [5, 3], [1, 4], [3, 5], [2, 5]], 8, 8, 4) == 0\nassert solution.boxDelivering([[10, 7], [1, 6], [5, 6], [8, 8], [3, 7], [7, 7], [9, 5], [6, 1], [10, 3], [6, 8], [4, 6], [10, 1], [3, 1], [9, 2], [8, 4], [7, 1], [3, 2], [2, 8], [3, 7], [8, 8], [4, 2], [7, 7], [4, 3], [2, 1], [9, 8], [6, 4], [10, 5], [2, 10], [4, 8], [3, 9], [7, 1], [10, 3], [1, 10], [1, 6], [4, 7], [9, 7], [3, 6], [2, 9], [2, 9], [8, 7], [3, 8], [8, 9], [5, 7], [10, 5], [9, 9], [1, 6], [7, 5], [7, 6], [7, 6], [9, 8], [1, 4], [7, 9], [9, 1], [9, 6], [8, 4], [1, 7], [3, 5], [6, 5], [10, 3], [7, 9], [6, 2]], 2, 9, 1) == 0\nassert solution.boxDelivering([[10, 5], [5, 5], [9, 4], [3, 4], [6, 4], [8, 3], [10, 1], [9, 9], [6, 5], [7, 9], [1, 9], [4, 2], [7, 5], [2, 4], [8, 7], [10, 2], [5, 5], [10, 9], [3, 3], [10, 2], [9, 2], [1, 1], [1, 7], [2, 3], [5, 10], [3, 4], [9, 6], [6, 7], [10, 8], [8, 1], [9, 3], [10, 10], [1, 2], [4, 2], [8, 8], [7, 8], [4, 9], [7, 9], [2, 6], [2, 7], [1, 1], [5, 8], [5, 5], [3, 7], [10, 3], [8, 10], [6, 4], [3, 5], [6, 3], [1, 5], [2, 1], [10, 2], [4, 2], [9, 7], [1, 4], [7, 4], [6, 7], [6, 4], [2, 6], [6, 3], [7, 3], [10, 1], [8, 8], [10, 6], [1, 6], [9, 1], [10, 8], [3, 7], [10, 3], [5, 5], [3, 1], [8, 10], [3, 6], [6, 2], [3, 2], [2, 3], [9, 6], [1, 2], [7, 7], [6, 6], [10, 5], [7, 9], [2, 7], [8, 5], [2, 8], [8, 8], [7, 6], [10, 7], [3, 4]], 7, 4, 4) == 2\nassert solution.boxDelivering([[6, 1], [10, 1], [7, 9], [5, 3], [4, 5], [6, 6], [4, 4], [2, 8], [2, 7], [1, 1], [6, 9], [7, 3], [9, 1], [6, 5], [1, 3], [2, 9], [8, 4], [6, 7], [10, 8], [3, 6], [2, 2], [2, 3], [3, 4], [2, 9], [10, 5], [2, 3], [5, 8], [10, 4], [5, 7], [6, 3], [7, 5], [4, 4], [4, 6], [6, 7], [6, 4], [9, 9], [1, 1], [10, 6], [4, 1], [9, 6], [9, 7], [5, 10], [5, 7], [3, 10], [8, 10], [7, 6], [2, 7], [6, 10], [4, 4], [6, 1], [10, 5], [1, 2], [5, 4], [10, 3], [6, 6], [10, 9], [4, 2], [10, 2], [10, 8], [2, 1], [5, 10], [10, 1], [1, 10], [8, 1], [7, 10], [4, 1], [7, 8], [2, 8], [8, 4], [8, 8], [3, 8], [3, 3], [6, 1], [7, 6], [4, 1], [6, 4], [5, 8], [9, 8]], 9, 1, 4) == 0\nassert solution.boxDelivering([[5, 1], [2, 3], [2, 8], [1, 5], [9, 5], [1, 2], [9, 5], [10, 8], [1, 4], [7, 4], [8, 2], [10, 5], [2, 5], [5, 3], [10, 9], [2, 8], [10, 6], [10, 8], [9, 4], [6, 9], [3, 7], [2, 5], [9, 6], [4, 10], [2, 8], [6, 4], [2, 8], [6, 5], [3, 10], [3, 2], [10, 4], [9, 1], [4, 6], [2, 5], [3, 2], [10, 6], [10, 6], [5, 2], [6, 8], [1, 5], [7, 8], [10, 3], [10, 7], [3, 1], [5, 6], [7, 5], [5, 8], [10, 10], [2, 7], [8, 4], [2, 8]], 9, 4, 9) == 6\nassert solution.boxDelivering([[7, 3], [8, 5], [4, 4], [6, 5], [4, 4], [2, 8], [3, 4], [3, 6], [1, 8], [5, 1], [9, 2], [9, 2], [4, 10], [8, 8], [9, 2], [3, 9], [10, 6], [3, 9], [2, 6], [6, 6], [1, 4], [4, 5], [10, 5], [3, 7], [10, 6], [4, 4], [3, 6], [10, 2], [4, 1], [9, 4], [7, 2], [2, 5]], 4, 7, 6) == 14\nassert solution.boxDelivering([[8, 4], [10, 4], [7, 6], [9, 6], [4, 3], [3, 6], [1, 6], [9, 7], [4, 6], [10, 2], [4, 4], [3, 8], [9, 5], [1, 1], [3, 4], [8, 1], [6, 5], [9, 7], [5, 8], [9, 5], [6, 2], [9, 9], [2, 3], [1, 10], [8, 3], [7, 6], [1, 3], [2, 10], [3, 10], [9, 1], [1, 8], [10, 6], [3, 5], [3, 1], [9, 9], [6, 4], [10, 9], [10, 8], [6, 4], [7, 10], [1, 1], [3, 2], [5, 1], [2, 10], [9, 2], [8, 6], [9, 9], [2, 2], [3, 2], [5, 6], [1, 5], [8, 2], [3, 9], [7, 1], [4, 6], [1, 10], [5, 8], [6, 3], [3, 9], [4, 1], [7, 5], [3, 5], [6, 10], [1, 10], [4, 10], [5, 4], [9, 2], [7, 3], [5, 3], [9, 1], [1, 8], [5, 10]], 3, 3, 3) == 0\nassert solution.boxDelivering([[10, 4], [5, 5], [6, 6], [8, 8], [5, 5], [6, 10], [4, 7], [10, 6], [6, 10], [10, 7], [3, 8], [5, 5], [8, 4], [6, 7], [7, 2], [7, 6], [4, 2], [7, 5], [3, 7], [6, 3], [9, 7], [7, 5], [5, 7], [9, 8], [10, 3], [6, 4], [9, 6], [2, 3], [3, 1], [10, 1], [3, 7], [3, 9], [7, 1], [1, 7], [10, 8], [3, 4], [10, 9], [2, 1], [7, 6], [9, 3], [8, 9], [1, 4], [3, 1], [6, 9], [2, 4], [7, 1], [1, 7], [10, 1], [3, 5], [6, 4], [5, 7], [3, 1], [9, 4], [7, 2], [1, 3], [2, 3], [1, 6], [2, 10], [8, 9], [2, 9], [7, 9], [2, 7], [2, 9], [9, 9], [2, 9], [2, 6], [6, 3], [1, 3], [10, 9], [8, 7], [2, 1], [9, 2], [5, 3], [1, 6], [2, 10], [10, 3], [2, 2], [4, 6], [7, 2], [9, 1], [2, 9], [4, 1], [1, 3], [5, 2], [8, 8], [10, 6], [7, 2], [6, 9], [2, 9], [1, 3], [3, 8], [6, 3], [4, 10]], 1, 4, 7) == 0\nassert solution.boxDelivering([[2, 3], [7, 5], [4, 9], [2, 3], [4, 3], [8, 4], [3, 9], [2, 6], [9, 8], [4, 1], [10, 6], [2, 10], [6, 8], [1, 9], [9, 5], [6, 2], [5, 10], [7, 7], [8, 5], [5, 6], [9, 1], [6, 5], [5, 8], [5, 10], [5, 4], [6, 10], [7, 9], [5, 9], [10, 3], [10, 3], [7, 9], [6, 3], [4, 3], [4, 5], [3, 8], [10, 10], [6, 9], [3, 3], [7, 4], [1, 6], [5, 5], [2, 8], [4, 8], [2, 10], [5, 4], [8, 7], [6, 8], [6, 7], [4, 7], [3, 8], [4, 2], [1, 6], [7, 2], [4, 2], [7, 4], [7, 3], [5, 2], [4, 8], [9, 8], [7, 9], [10, 9], [6, 1], [6, 9], [9, 8]], 10, 3, 3) == 0\nassert solution.boxDelivering([[9, 10], [1, 6], [1, 1]], 7, 9, 1) == 2\nassert solution.boxDelivering([[2, 5], [8, 2], [3, 6], [9, 1], [9, 7], [10, 1], [9, 10], [9, 1], [5, 9], [4, 8], [1, 5], [6, 5], [1, 7], [2, 8], [6, 9], [8, 5], [2, 9], [8, 4], [9, 8], [6, 7], [4, 3], [4, 3], [3, 7], [2, 8], [9, 5], [1, 6], [5, 2], [2, 3], [1, 2], [5, 5], [3, 8], [5, 10], [8, 8], [5, 2], [6, 7], [9, 4], [8, 8], [3, 7], [2, 4], [5, 4], [2, 6], [8, 4], [10, 10], [9, 2], [10, 6], [6, 10], [6, 4], [2, 4], [6, 4], [4, 4], [9, 10], [5, 5], [1, 10], [10, 3], [8, 3], [3, 10], [10, 9], [1, 3], [9, 4], [9, 2], [1, 8], [9, 7], [8, 7], [4, 9], [8, 5], [9, 3], [5, 6], [2, 5]], 5, 8, 1) == 0\nassert solution.boxDelivering([[1, 5], [8, 9], [7, 5], [1, 9], [4, 5], [6, 9], [9, 6], [10, 6], [9, 7], [10, 8], [4, 8], [4, 10], [8, 3], [1, 3], [2, 1], [5, 7], [9, 1], [2, 5], [9, 8], [1, 8], [4, 3], [2, 8], [5, 4], [7, 6], [10, 9], [1, 10], [4, 8], [3, 7], [1, 2], [8, 8], [6, 3], [8, 3], [1, 7], [6, 7], [10, 9], [9, 8], [1, 9], [10, 5], [2, 8], [8, 10], [3, 6], [4, 9], [7, 4], [10, 5], [3, 9], [9, 10], [6, 1], [5, 9], [3, 9], [5, 8], [4, 6], [4, 10], [9, 6], [3, 10], [4, 3], [3, 6], [7, 4], [8, 6], [8, 9], [3, 8], [6, 5], [3, 10], [5, 6], [6, 4], [9, 4], [7, 2], [4, 8], [4, 6], [5, 3], [1, 3], [10, 3], [3, 5], [6, 2]], 8, 7, 7) == 10\nassert solution.boxDelivering([[2, 5], [9, 5], [8, 4], [9, 5], [9, 2], [9, 2], [1, 2], [4, 10], [8, 4], [2, 2], [9, 7], [1, 5], [5, 10], [7, 1], [10, 5], [9, 9], [1, 1], [5, 5], [9, 5], [3, 6], [1, 9], [10, 1], [10, 7], [5, 7], [2, 2], [4, 4], [9, 5], [3, 10], [7, 9], [3, 9], [4, 6], [8, 1], [9, 10], [8, 3], [1, 2], [1, 6], [2, 8], [5, 8], [3, 8], [5, 2], [3, 10], [4, 1], [7, 3], [1, 6], [6, 4], [8, 4]], 6, 5, 1) == 0\nassert solution.boxDelivering([[2, 5], [6, 9], [7, 7], [6, 5], [9, 4], [5, 6], [7, 6], [2, 4], [9, 4], [4, 6], [4, 5]], 5, 1, 4) == 0\nassert solution.boxDelivering([[4, 7], [5, 4], [8, 5], [3, 9], [7, 10], [10, 8], [7, 1], [3, 3], [8, 8], [2, 1], [6, 10], [8, 1], [1, 9], [5, 8], [5, 5], [7, 6], [1, 10], [1, 10], [5, 4], [9, 1], [6, 7], [1, 6], [8, 5], [6, 10], [2, 2], [7, 9], [6, 10], [6, 9], [1, 10], [7, 10], [7, 5], [1, 6], [7, 10]], 5, 4, 7) == 0\nassert solution.boxDelivering([[5, 6], [7, 10], [8, 1], [8, 3], [8, 10], [6, 8], [6, 8], [7, 3], [1, 2], [2, 10], [5, 3], [6, 1], [9, 5], [4, 2], [3, 9], [9, 4], [4, 10], [10, 6], [8, 5], [2, 7], [8, 9], [6, 5], [4, 3], [4, 10], [6, 4], [8, 2], [4, 2], [7, 2], [7, 8]], 9, 2, 1) == 0\nassert solution.boxDelivering([[9, 6], [4, 5], [1, 1], [8, 10], [8, 6], [7, 8], [1, 6], [7, 3], [5, 6], [2, 8], [2, 3], [6, 8], [7, 1], [10, 3], [1, 6], [5, 1], [1, 5], [6, 9], [9, 6], [8, 3], [9, 1], [10, 7], [1, 2], [9, 10], [6, 3], [6, 7], [1, 5], [2, 2], [9, 7], [9, 2], [2, 5], [9, 5], [1, 2], [7, 3], [6, 2], [1, 5], [8, 6], [1, 3], [9, 7], [2, 4], [8, 7], [3, 9], [10, 2], [1, 1], [8, 4], [2, 10], [6, 7], [8, 9], [6, 8], [4, 4], [5, 9], [10, 2], [10, 9], [7, 4], [1, 2], [7, 9], [10, 8], [9, 3], [9, 1], [2, 9], [1, 4], [1, 10]], 6, 10, 5) == 0\nassert solution.boxDelivering([[3, 8], [8, 10], [3, 8], [4, 4], [4, 5], [10, 6], [7, 10], [10, 9], [10, 10], [8, 4], [10, 4], [3, 3], [8, 2], [4, 7], [4, 5], [10, 8], [2, 3], [7, 3], [1, 9], [9, 3], [10, 1], [1, 1], [5, 7], [9, 10], [8, 4], [6, 7], [2, 6], [9, 1], [6, 10], [4, 4], [8, 5], [8, 6], [7, 5], [3, 1], [2, 7], [4, 4], [9, 3], [7, 1], [6, 1], [1, 2], [7, 9], [6, 9], [3, 9], [2, 2], [1, 5], [4, 4], [6, 9], [4, 8], [10, 7], [4, 1], [7, 4], [3, 6], [9, 1], [1, 6], [5, 10], [6, 10], [3, 5], [8, 1], [6, 4], [6, 5], [1, 2], [6, 2], [3, 8], [3, 5], [7, 4], [9, 5], [7, 7], [5, 9], [1, 4], [7, 2]], 9, 2, 10) == 118\nassert solution.boxDelivering([[2, 5], [2, 9], [6, 7], [6, 1], [8, 6], [3, 10], [3, 4], [8, 4], [2, 2], [9, 7], [4, 10], [3, 1], [9, 2], [1, 4], [8, 7], [6, 6], [8, 5], [5, 5], [1, 2], [10, 1], [4, 8], [1, 8], [1, 8], [1, 7], [10, 2], [9, 8], [4, 9], [4, 1], [6, 3], [3, 10], [6, 9], [10, 3], [9, 4], [6, 9], [2, 9], [3, 6], [10, 9], [4, 2], [10, 7], [3, 3], [10, 6], [2, 1], [8, 3], [1, 3], [7, 5], [2, 2], [10, 7], [5, 8], [2, 3], [6, 4], [5, 1], [7, 9], [4, 4], [7, 4], [5, 6], [8, 8], [9, 9], [8, 4], [3, 4], [1, 10], [10, 10], [6, 4], [6, 8], [7, 9], [10, 6], [2, 7], [7, 8], [7, 4], [10, 10], [4, 2], [9, 5], [7, 8], [5, 7], [8, 8], [4, 10], [1, 1], [8, 4], [6, 3], [1, 8], [3, 7], [10, 7], [2, 5], [4, 6], [5, 9], [4, 2], [4, 9], [1, 3], [9, 8], [5, 2], [1, 7], [2, 1], [5, 4], [5, 8], [10, 1]], 10, 3, 9) == 33\nassert solution.boxDelivering([[6, 4], [2, 5], [9, 2], [1, 8], [10, 7], [7, 5], [10, 2], [3, 2], [3, 2], [4, 4], [7, 10], [1, 4], [8, 6], [8, 2], [3, 8], [3, 4], [5, 4], [1, 7], [3, 4], [10, 2], [1, 8], [10, 5], [10, 2], [5, 9], [8, 3], [1, 4], [5, 7], [6, 3], [4, 8], [3, 5], [7, 4], [3, 7], [3, 4], [6, 9], [9, 9], [7, 3], [9, 1], [6, 7], [7, 2], [6, 1], [1, 5], [4, 10], [2, 3], [6, 8], [3, 5], [6, 3], [7, 10], [3, 8], [10, 4], [9, 6], [1, 2], [10, 1], [5, 7], [2, 9], [7, 6], [3, 3], [6, 2], [5, 7], [4, 3], [7, 6], [10, 3], [6, 1], [4, 4]], 5, 2, 8) == 16",
  "inefficient_solution": "class Solution:\n    def boxDelivering(self, boxes, portsCount, maxBoxes, maxWeight):\n        n = len(boxes)\n        ws = list(accumulate((box[1] for box in boxes), initial=0))\n        c = [int(a != b) for a, b in pairwise(box[0] for box in boxes)]\n        cs = list(accumulate(c, initial=0))\n        f = [0] * (n * 10 + 1)\n        for _ in range(1000):\n            f = [0] * (n * 10 + 1)\n            q = deque([0])\n            for i in range(1, n * 10 + 1):\n                f[i] = 0\n                while q and (i - q[0] > maxBoxes or ws[i] - ws[q[0]] > maxWeight):\n                    q.popleft()\n                if q:\n                    f[i] = cs[i // 10 - 1] + f[q[0] // 10] - cs[q[0] // 10] + 2\n                if i < n * 10:\n                    while q and f[q[-1] // 10] - cs[q[-1] // 10] >= f[i // 10] - cs[i // 10]:\n                        q.pop()\n                    q.append(i)\n        return f[n * 10]",
  "is_python": true
}