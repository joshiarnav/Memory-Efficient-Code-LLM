{
  "problem_idx": 1079,
  "task_name": "Letter Tile Possibilities",
  "markdown_description": "\nYou have `n`\u00a0\u00a0`tiles`, where each tile has one letter `tiles[i]` printed on it.\n\n\nReturn *the number of possible non-empty sequences of letters* you can make using the letters printed on those `tiles`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tiles = \"AAB\"\n**Output:** 8\n**Explanation:** The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tiles = \"AAABBC\"\n**Output:** 188\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** tiles = \"V\"\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= tiles.length <= 7`\n* `tiles` consists of uppercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def numTilePossibilities(self, tiles: str) -> int:\n        def dfs(cnt: Counter) -> int:\n            ans = 0\n            for i, x in cnt.items():\n                if x > 0:\n                    ans += 1\n                    cnt[i] -= 1\n                    ans += dfs(cnt)\n                    cnt[i] += 1\n            return ans\n\n        cnt = Counter(tiles)\n        return dfs(cnt)\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def numTilePossibilities(self, tiles: str) -> int:\n        def dfs(cnt: Counter) -> int:\n            ans = 0\n            for i, x in cnt.items():\n                if x > 0:\n                    ans += 1\n                    cnt[i] -= 1\n                    ans += dfs(cnt)\n                    cnt[i] += 1\n            return ans\n\n        cnt = Counter(tiles)\n        return dfs(cnt)\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random tiles string\n    letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    tiles = [random.choice(letters) for _ in range(random.randint(1, 7))]\n    tiles_str = ''.join(tiles)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numTilePossibilities(tiles_str)\n\n    return tiles_str, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tiles_str, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numTilePossibilities(tiles_str) == expected_result\n        print(f\"assert solution.numTilePossibilities('{tiles_str}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numTilePossibilities('{tiles_str}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numTilePossibilities('ROLJJA') == 1010\nassert solution.numTilePossibilities('GR') == 4\nassert solution.numTilePossibilities('JH') == 4\nassert solution.numTilePossibilities('FIPZ') == 64\nassert solution.numTilePossibilities('S') == 1\nassert solution.numTilePossibilities('O') == 1\nassert solution.numTilePossibilities('XJVL') == 64\nassert solution.numTilePossibilities('QAXDYED') == 7012\nassert solution.numTilePossibilities('JHOBY') == 325\nassert solution.numTilePossibilities('H') == 1\nassert solution.numTilePossibilities('TBUM') == 64\nassert solution.numTilePossibilities('JNFD') == 64\nassert solution.numTilePossibilities('IO') == 4\nassert solution.numTilePossibilities('A') == 1\nassert solution.numTilePossibilities('O') == 1\nassert solution.numTilePossibilities('KVEUFH') == 1956\nassert solution.numTilePossibilities('ODHZPQV') == 13699\nassert solution.numTilePossibilities('FHSO') == 64\nassert solution.numTilePossibilities('DRHLBBC') == 7012\nassert solution.numTilePossibilities('NDIWKW') == 1010\nassert solution.numTilePossibilities('OO') == 2\nassert solution.numTilePossibilities('U') == 1\nassert solution.numTilePossibilities('LZ') == 4\nassert solution.numTilePossibilities('NVT') == 15\nassert solution.numTilePossibilities('CT') == 4\nassert solution.numTilePossibilities('UYCEZDR') == 13699\nassert solution.numTilePossibilities('IROFC') == 325\nassert solution.numTilePossibilities('N') == 1\nassert solution.numTilePossibilities('EZG') == 15\nassert solution.numTilePossibilities('LY') == 4\nassert solution.numTilePossibilities('VDQBLX') == 1956\nassert solution.numTilePossibilities('VTZGF') == 325\nassert solution.numTilePossibilities('OB') == 4\nassert solution.numTilePossibilities('C') == 1\nassert solution.numTilePossibilities('NB') == 4\nassert solution.numTilePossibilities('CGR') == 15\nassert solution.numTilePossibilities('OCINLQ') == 1956\nassert solution.numTilePossibilities('CEYN') == 64\nassert solution.numTilePossibilities('PHHCE') == 170\nassert solution.numTilePossibilities('Y') == 1\nassert solution.numTilePossibilities('ARFMHW') == 1956\nassert solution.numTilePossibilities('EPV') == 15\nassert solution.numTilePossibilities('TDGD') == 34\nassert solution.numTilePossibilities('VXEFH') == 325\nassert solution.numTilePossibilities('Z') == 1\nassert solution.numTilePossibilities('YMJDL') == 325\nassert solution.numTilePossibilities('UGPV') == 64\nassert solution.numTilePossibilities('OSFORTD') == 7012\nassert solution.numTilePossibilities('JJMUG') == 170\nassert solution.numTilePossibilities('XYMG') == 64\nassert solution.numTilePossibilities('ZUNVJB') == 1956\nassert solution.numTilePossibilities('E') == 1\nassert solution.numTilePossibilities('W') == 1\nassert solution.numTilePossibilities('W') == 1\nassert solution.numTilePossibilities('ZJY') == 15\nassert solution.numTilePossibilities('VQWTTAN') == 7012\nassert solution.numTilePossibilities('JXDXY') == 170\nassert solution.numTilePossibilities('W') == 1\nassert solution.numTilePossibilities('T') == 1\nassert solution.numTilePossibilities('QYHL') == 64\nassert solution.numTilePossibilities('IVOFHC') == 1956\nassert solution.numTilePossibilities('KCHFG') == 325\nassert solution.numTilePossibilities('T') == 1\nassert solution.numTilePossibilities('CZLXY') == 325\nassert solution.numTilePossibilities('ZNVJ') == 64\nassert solution.numTilePossibilities('TH') == 4\nassert solution.numTilePossibilities('SVIE') == 64\nassert solution.numTilePossibilities('GSXV') == 64\nassert solution.numTilePossibilities('SGY') == 15\nassert solution.numTilePossibilities('NLAGAW') == 1010\nassert solution.numTilePossibilities('BQZCYWZ') == 7012\nassert solution.numTilePossibilities('XYBOAY') == 1010\nassert solution.numTilePossibilities('QXNS') == 64\nassert solution.numTilePossibilities('SKJRS') == 170\nassert solution.numTilePossibilities('ADRMI') == 325\nassert solution.numTilePossibilities('PYWQN') == 325\nassert solution.numTilePossibilities('TLGGVKI') == 7012\nassert solution.numTilePossibilities('RVIH') == 64\nassert solution.numTilePossibilities('SCZZ') == 34\nassert solution.numTilePossibilities('T') == 1\nassert solution.numTilePossibilities('ZDSPO') == 325\nassert solution.numTilePossibilities('LJZHZ') == 170\nassert solution.numTilePossibilities('JR') == 4\nassert solution.numTilePossibilities('NPAN') == 34\nassert solution.numTilePossibilities('POEWLKP') == 7012\nassert solution.numTilePossibilities('NCJX') == 64\nassert solution.numTilePossibilities('Z') == 1\nassert solution.numTilePossibilities('CHZQNX') == 1956\nassert solution.numTilePossibilities('DFSRF') == 170\nassert solution.numTilePossibilities('DNYM') == 64\nassert solution.numTilePossibilities('WUHCL') == 325\nassert solution.numTilePossibilities('PDUT') == 64\nassert solution.numTilePossibilities('EUSZ') == 64\nassert solution.numTilePossibilities('XU') == 4\nassert solution.numTilePossibilities('EWPN') == 64\nassert solution.numTilePossibilities('B') == 1\nassert solution.numTilePossibilities('DFVPH') == 325\nassert solution.numTilePossibilities('ILXII') == 63\nassert solution.numTilePossibilities('WRKXN') == 325\nassert solution.numTilePossibilities('EGPOJ') == 325",
  "inefficient_solution": "class Solution:\n    def numTilePossibilities(self, tiles: str) -> int:\n        def dfs(cnt: dict) -> int:\n            ans = 0\n            temp_tiles = tiles[:]\n            for i in range(len(temp_tiles)):\n                for j in range(i + 1, len(temp_tiles) + 1):\n                    temp = temp_tiles[i:j]\n                    if len(temp) > 0 and temp in cnt:\n                        cnt[temp] -= 1\n                        ans += 1\n                        new_cnt = cnt.copy()\n                        new_temp_tiles = temp_tiles.copy()\n                        new_temp_tiles = new_temp_tiles.replace(temp, '', 1)\n                        ans += dfs(new_cnt)\n                        cnt[temp] += 1\n                        new_temp_tiles = new_temp_tiles + temp\n                        new_cnt[temp] -= 1\n            return ans\n\n        cnt = {}\n        for c in tiles:\n            if c in cnt:\n                cnt[c] += 1\n            else:\n                cnt[c] = 1\n        return dfs(cnt)",
  "is_python": true
}