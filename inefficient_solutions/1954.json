{
  "problem_idx": 1954,
  "task_name": "Minimum Garden Perimeter to Collect Enough Apples",
  "markdown_description": "\nIn a garden represented as an infinite 2D grid, there is an apple tree planted at **every** integer coordinate. The apple tree planted at an integer coordinate `(i, j)` has `|i| + |j|` apples growing on it.\n\n\nYou will buy an axis-aligned **square plot** of land that is centered at `(0, 0)`.\n\n\nGiven an integer `neededApples`, return *the **minimum perimeter** of a plot such that **at least***`neededApples` *apples are **inside or on** the perimeter of that plot*.\n\n\nThe value of `|x|` is defined as:\n\n\n* `x` if `x >= 0`\n* `-x` if `x < 0`\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1954.Minimum%20Garden%20Perimeter%20to%20Collect%20Enough%20Apples/images/1527_example_1_2.png)\n\n```\n\n**Input:** neededApples = 1\n**Output:** 8\n**Explanation:** A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** neededApples = 13\n**Output:** 16\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** neededApples = 1000000000\n**Output:** 5040\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= neededApples <= 1015`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        l, r = 1, 100000\n        while l < r:\n            mid = (l + r) >> 1\n            if 2 * mid * (mid + 1) * (2 * mid + 1) >= neededApples:\n                r = mid\n            else:\n                l = mid + 1\n        return l * 8\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random neededApples value\n    neededApples = random.randint(1, 10**15)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumPerimeter(neededApples)\n\n    return neededApples, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        neededApples, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumPerimeter(neededApples) == expected_result\n        print(f\"assert solution.minimumPerimeter({neededApples}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumPerimeter({neededApples}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumPerimeter(865612822944748) == 480296\nassert solution.minimumPerimeter(815796135184628) == 470904\nassert solution.minimumPerimeter(921873802925362) == 490488\nassert solution.minimumPerimeter(362687286764926) == 359400\nassert solution.minimumPerimeter(444277793560934) == 384552\nassert solution.minimumPerimeter(548663903735999) == 412576\nassert solution.minimumPerimeter(667755978529283) == 440496\nassert solution.minimumPerimeter(648586510556138) == 436240\nassert solution.minimumPerimeter(315125407199496) == 342952\nassert solution.minimumPerimeter(352597913294431) == 356040\nassert solution.minimumPerimeter(745627307998874) == 456992\nassert solution.minimumPerimeter(249204164314137) == 317144\nassert solution.minimumPerimeter(730338521316351) == 453848\nassert solution.minimumPerimeter(890113863510441) == 484784\nassert solution.minimumPerimeter(558543520070828) == 415040\nassert solution.minimumPerimeter(43259197448222) == 176912\nassert solution.minimumPerimeter(832427294826516) == 474080\nassert solution.minimumPerimeter(709130631997860) == 449416\nassert solution.minimumPerimeter(557276080637475) == 414728\nassert solution.minimumPerimeter(787002966644195) == 465296\nassert solution.minimumPerimeter(838466099266840) == 475224\nassert solution.minimumPerimeter(107083519132117) == 239320\nassert solution.minimumPerimeter(480258689647285) == 394664\nassert solution.minimumPerimeter(305092661601556) == 339272\nassert solution.minimumPerimeter(529456438813158) == 407704\nassert solution.minimumPerimeter(834410841699158) == 474456\nassert solution.minimumPerimeter(395694613047466) == 369992\nassert solution.minimumPerimeter(227689907788776) == 307744\nassert solution.minimumPerimeter(888559663011341) == 484504\nassert solution.minimumPerimeter(40382515657123) == 172904\nassert solution.minimumPerimeter(1804375220091) == 61352\nassert solution.minimumPerimeter(450099254368865) == 386224\nassert solution.minimumPerimeter(723710276933312) == 452472\nassert solution.minimumPerimeter(419242399226938) == 377192\nassert solution.minimumPerimeter(258321944594072) == 320968\nassert solution.minimumPerimeter(611810133977842) == 427832\nassert solution.minimumPerimeter(564304323065588) == 416464\nassert solution.minimumPerimeter(771108949888975) == 462144\nassert solution.minimumPerimeter(90411711508146) == 226192\nassert solution.minimumPerimeter(162203659903475) == 274848\nassert solution.minimumPerimeter(394281919727350) == 369552\nassert solution.minimumPerimeter(906681599498289) == 487776\nassert solution.minimumPerimeter(233205244554104) == 310208\nassert solution.minimumPerimeter(776917596584416) == 463296\nassert solution.minimumPerimeter(580078284597210) == 420304\nassert solution.minimumPerimeter(923154942157363) == 490712\nassert solution.minimumPerimeter(339263570757204) == 351496\nassert solution.minimumPerimeter(129220353938630) == 254792\nassert solution.minimumPerimeter(830892483033298) == 473792\nassert solution.minimumPerimeter(329914831942678) == 348232\nassert solution.minimumPerimeter(599789874819963) == 425016\nassert solution.minimumPerimeter(215418077949099) == 302112\nassert solution.minimumPerimeter(447318110422278) == 385424\nassert solution.minimumPerimeter(554679343201870) == 414080\nassert solution.minimumPerimeter(856922007651079) == 478688\nassert solution.minimumPerimeter(154551066055287) == 270456\nassert solution.minimumPerimeter(931227676735284) == 492136\nassert solution.minimumPerimeter(24223098412020) == 145816\nassert solution.minimumPerimeter(210445954796550) == 299768\nassert solution.minimumPerimeter(381149025224079) == 365400\nassert solution.minimumPerimeter(511225330686954) == 402968\nassert solution.minimumPerimeter(660535915253389) == 438904\nassert solution.minimumPerimeter(371468904930745) == 362280\nassert solution.minimumPerimeter(418884517961442) == 377080\nassert solution.minimumPerimeter(648843139828447) == 436296\nassert solution.minimumPerimeter(861027601101796) == 479448\nassert solution.minimumPerimeter(51212652254472) == 187152\nassert solution.minimumPerimeter(798910568563702) == 467632\nassert solution.minimumPerimeter(966462283743500) == 498272\nassert solution.minimumPerimeter(941767892646297) == 493992\nassert solution.minimumPerimeter(219914655770899) == 304200\nassert solution.minimumPerimeter(620045792891341) == 429744\nassert solution.minimumPerimeter(845057325795756) == 476464\nassert solution.minimumPerimeter(738412276756063) == 455512\nassert solution.minimumPerimeter(949176121311136) == 495280\nassert solution.minimumPerimeter(545409758677384) == 411760\nassert solution.minimumPerimeter(49595527264889) == 185160\nassert solution.minimumPerimeter(173623098143427) == 281152\nassert solution.minimumPerimeter(94643787744303) == 229672\nassert solution.minimumPerimeter(565021225531844) == 416640\nassert solution.minimumPerimeter(890047185910019) == 484776\nassert solution.minimumPerimeter(107587672871046) == 239696\nassert solution.minimumPerimeter(229569395964967) == 308584\nassert solution.minimumPerimeter(445480354573436) == 384896\nassert solution.minimumPerimeter(507858576980576) == 402088\nassert solution.minimumPerimeter(365746814216925) == 360408\nassert solution.minimumPerimeter(154384970050561) == 270360\nassert solution.minimumPerimeter(214483091894747) == 301672\nassert solution.minimumPerimeter(334418302354710) == 349808\nassert solution.minimumPerimeter(242274048070211) == 314176\nassert solution.minimumPerimeter(783551775755850) == 464616\nassert solution.minimumPerimeter(813685724422229) == 470496\nassert solution.minimumPerimeter(41748377322002) == 174832\nassert solution.minimumPerimeter(232529041692045) == 309904\nassert solution.minimumPerimeter(876672050691831) == 482336\nassert solution.minimumPerimeter(377045946258996) == 364080\nassert solution.minimumPerimeter(351650870316432) == 355720\nassert solution.minimumPerimeter(718755538604955) == 451440\nassert solution.minimumPerimeter(453333965672683) == 387144\nassert solution.minimumPerimeter(246037729709969) == 315792",
  "inefficient_solution": "class Solution:\n    def minimumPerimeter(self, neededApples: int) -> int:\n        plot_side_lengths = []\n        for i in range(1, 100000):\n            total_apples = 0\n            for x in range(-i, i+1):\n                for y in range(-i, i+1):\n                    total_apples += abs(x) + abs(y)\n            if total_apples >= neededApples:\n                plot_side_lengths.append(i)\n        return min(plot_side_lengths) * 8",
  "is_python": true
}