{
  "problem_idx": 1546,
  "task_name": "Maximum Number of Non",
  "markdown_description": "\nGiven an array `nums` and an integer `target`, return *the maximum number of **non-empty** **non-overlapping** subarrays such that the sum of values in each subarray is equal to* `target`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1,1], target = 2\n**Output:** 2\n**Explanation:** There are 2 non-overlapping subarrays [**1,1**,1,**1,1**] with sum equals to target(2).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-1,3,5,1,4,2,-9], target = 6\n**Output:** 2\n**Explanation:** There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `-104 <= nums[i] <= 104`\n* `0 <= target <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        ans = 0\n        i, n = 0, len(nums)\n        while i < n:\n            s = 0\n            vis = {0}\n            while i < n:\n                s += nums[i]\n                if s - target in vis:\n                    ans += 1\n                    break\n                i += 1\n                vis.add(s)\n            i += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        ans = 0\n        i, n = 0, len(nums)\n        while i < n:\n            s = 0\n            vis = {0}\n            while i < n:\n                s += nums[i]\n                if s - target in vis:\n                    ans += 1\n                    break\n                i += 1\n                vis.add(s)\n            i += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(-10000, 10001), k=random.randint(2, 10))\n    \n    # Generate a random target sum\n    target = random.randint(0, 1000001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxNonOverlapping(nums, target)\n\n    return nums, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxNonOverlapping(nums, target) == expected_result\n        print(f\"assert solution.maxNonOverlapping({nums}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxNonOverlapping({nums}, {target}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxNonOverlapping([5646, -9012, -6270, 3796], 42055) == 0\nassert solution.maxNonOverlapping([-4152, -5002, -2133, 2491, -8090, 3242, -3439, -1832, 3761], 660743) == 0\nassert solution.maxNonOverlapping([6026, -3297, -9089, 3396, 1233, -9964, -4898, 7826, -1146], 576387) == 0\nassert solution.maxNonOverlapping([-3902, 9065, -3354, -1314, -4903, 4455, 7287, -1250, 3171], 857171) == 0\nassert solution.maxNonOverlapping([-1593, -7229, -4020, -7373, 5196, 9205, 7103, 3382, -289], 53215) == 0\nassert solution.maxNonOverlapping([-4692, 5087, -5327, -4229, 7797, -6325], 913198) == 0\nassert solution.maxNonOverlapping([-6192, -6790, 6089, 3214], 521097) == 0\nassert solution.maxNonOverlapping([132, 5237, 7420, -1728, 5756], 553341) == 0\nassert solution.maxNonOverlapping([-421, 1096], 54234) == 0\nassert solution.maxNonOverlapping([-287, 712, 1761, -403, 6905, 8754], 891724) == 0\nassert solution.maxNonOverlapping([-891, -4817, 6418, 7824, -3726, 5501, 3052, 4432, 833, 2069], 276283) == 0\nassert solution.maxNonOverlapping([136, 4688, -1856, 4390, 9472, 4824, 5016, -7659, 3951, 5373], 260621) == 0\nassert solution.maxNonOverlapping([7888, -840, 2898, 2064], 66956) == 0\nassert solution.maxNonOverlapping([-4630, -3289, -6598, -1146, -2508, -5065, -1430], 939790) == 0\nassert solution.maxNonOverlapping([902, -9552, -3612], 541701) == 0\nassert solution.maxNonOverlapping([516, -380, 7668, -9558, 9336, -1210, -7782, 210, 5166], 699474) == 0\nassert solution.maxNonOverlapping([2587, 2064, -7046, 7384, -6281, -390], 538373) == 0\nassert solution.maxNonOverlapping([6310, -3950, 6185, 4858, -3563, -3629, 5427, 9064, -5543, 791], 468126) == 0\nassert solution.maxNonOverlapping([-8779, -2091], 112664) == 0\nassert solution.maxNonOverlapping([5410, 3471, 6820, -1112], 779915) == 0\nassert solution.maxNonOverlapping([-1484, -9104, 3894, -7820, -8846, -2217], 227363) == 0\nassert solution.maxNonOverlapping([-6602, 2710, -8624, -3106, 3471, 2406, 2710, -7050, -1620, 1571], 546745) == 0\nassert solution.maxNonOverlapping([4403, 5421, 8669, 9384, -1823, 1132, 5951, -8360, -8573, 2688], 207865) == 0\nassert solution.maxNonOverlapping([-957, 3924, -9301, -2843, -4168, -4702, -1858, 9541], 425382) == 0\nassert solution.maxNonOverlapping([3789, 2577, 7336, -7848, 5303, -7610, -5276, 3994], 84321) == 0\nassert solution.maxNonOverlapping([5382, 269, 5671, -8283, -4569, -3871, -9507, -339, 2640], 167286) == 0\nassert solution.maxNonOverlapping([1472, 4973, 1878, 1519, -7162, 4411, -65, 2589], 326841) == 0\nassert solution.maxNonOverlapping([-5442, 1569, -4844, -2548, 5268, 8734, -6878, -2819, -1368, -8099], 327481) == 0\nassert solution.maxNonOverlapping([-262, -1106, -9316, 8240, 7881, -4221], 860164) == 0\nassert solution.maxNonOverlapping([5557, 812, 9212, -3638, 191, -1456, -7112], 472437) == 0\nassert solution.maxNonOverlapping([-4853, -5550, -6463, 7642, 2903, 4558], 610070) == 0\nassert solution.maxNonOverlapping([-4788, -4656, 4975, 8203, 4079, -739, 4953, 4283, 3206], 381128) == 0\nassert solution.maxNonOverlapping([-7033, -4859, 7694], 619282) == 0\nassert solution.maxNonOverlapping([8219, 6566, 9535, -4685, -6208, 7896, 5699, 4318, -9128], 684656) == 0\nassert solution.maxNonOverlapping([-2507, -7218, -3998, -1706, 7339, 6119, 7262, 3316], 858351) == 0\nassert solution.maxNonOverlapping([5110, 6004, 4850, 3052, 9446, -612, -9922, 8306, -3171], 189984) == 0\nassert solution.maxNonOverlapping([4770, -9462, 2373, 2570, -9566, -4322, -3692, 5419], 139600) == 0\nassert solution.maxNonOverlapping([-6004, -6441, -6001, -4026, -3865, -9057, -4232, 868, -3828, -6707], 580483) == 0\nassert solution.maxNonOverlapping([5607, -2770, -4572, -9663, -2188], 193158) == 0\nassert solution.maxNonOverlapping([429, 144, 6144, -1428, -2435, -3784, -8698, -139, 7669], 393042) == 0\nassert solution.maxNonOverlapping([-9861, 3344, 3695, 8881, -1111], 600930) == 0\nassert solution.maxNonOverlapping([-4295, 639, 75, -3363, 5277], 426948) == 0\nassert solution.maxNonOverlapping([-8779, -5928, -6167, 4051, -240, 966, -7996], 601259) == 0\nassert solution.maxNonOverlapping([8832, 928, -9538, 5945, -6951, 7708], 68443) == 0\nassert solution.maxNonOverlapping([-1088, -4781], 152717) == 0\nassert solution.maxNonOverlapping([9859, 356, 809, -177, 9057], 73096) == 0\nassert solution.maxNonOverlapping([-2164, -1003, 220, -657, -1926], 192013) == 0\nassert solution.maxNonOverlapping([5722, -7076, -6889, -2460, -9807, 7359, -3292, 8236], 511065) == 0\nassert solution.maxNonOverlapping([-7088, -2430, 3548, 8227, -4070, -6304, -8124, -9866, 391], 780119) == 0\nassert solution.maxNonOverlapping([-1175, 4041, 3777, -2527, 3130], 368493) == 0\nassert solution.maxNonOverlapping([-9727, -7656], 999613) == 0\nassert solution.maxNonOverlapping([319, -2540, -199, -2396], 772707) == 0\nassert solution.maxNonOverlapping([-6332, -8789, -918, -430, 712, 4131, -7616, 1533, 401], 577842) == 0\nassert solution.maxNonOverlapping([2034, 9990, -5653, -2580, 589, -1532], 110631) == 0\nassert solution.maxNonOverlapping([-779, -7285, 8866, -9423, -2878, -1451, 5733, 4543, -7780, -9510], 383023) == 0\nassert solution.maxNonOverlapping([-2586, 6216, -3611, -8948, -1589, -5807], 411930) == 0\nassert solution.maxNonOverlapping([2662, -8685, -6191, -6859], 10359) == 0\nassert solution.maxNonOverlapping([-4189, -2984, -652], 106238) == 0\nassert solution.maxNonOverlapping([1278, 3778, 9949, -8679, -8014, 3066, -2417, -2263], 312535) == 0\nassert solution.maxNonOverlapping([-7267, 9666, 7853, -4284, -3263, 3209, -608, 8921, 9569], 849981) == 0\nassert solution.maxNonOverlapping([1846, -5467, 9383, -1679, 2461, 4028], 573045) == 0\nassert solution.maxNonOverlapping([4268, 5371, -7147, 9780, -5997, 9951, 864, -1304, 5280], 873431) == 0\nassert solution.maxNonOverlapping([8291, -5572, -1635, -9244, -9493, -5834, -6557, -6630, 8754, -8214], 272310) == 0\nassert solution.maxNonOverlapping([7768, 5158, 577, -2881, 3019, 4675, 2512, 2697, -1523], 146447) == 0\nassert solution.maxNonOverlapping([-6378, 1518, -7786, -4171, 2423, -1261, 7558, 9159, 7427, -5430], 553259) == 0\nassert solution.maxNonOverlapping([5091, -8783, -7907], 635003) == 0\nassert solution.maxNonOverlapping([9340, 3832, -2405, -5209, 8867, -7409, 7690, -9420, -8021], 866975) == 0\nassert solution.maxNonOverlapping([-2773, -2745, 3793, 85, 4060, -568, -2936], 479284) == 0\nassert solution.maxNonOverlapping([-5878, 3801, 1692, 3770, -7236, 4770, -4447, -1480, 2046, 6859], 109815) == 0\nassert solution.maxNonOverlapping([7, -5303, -3555], 665302) == 0\nassert solution.maxNonOverlapping([-769, 5880, -3185, -5466, 3441, 5583, 120, -7123, -5516, 2460], 870765) == 0\nassert solution.maxNonOverlapping([1912, -7344, 4481, -6141], 898843) == 0\nassert solution.maxNonOverlapping([-3304, 8311, -6239, -7579, -4398], 17097) == 0\nassert solution.maxNonOverlapping([-2095, 452, 1037, 2353, -688, -55], 737304) == 0\nassert solution.maxNonOverlapping([1544, 7284, 6479], 239194) == 0\nassert solution.maxNonOverlapping([5287, 1242, -9836, -3118, -1171], 908074) == 0\nassert solution.maxNonOverlapping([4920, -7998, 8193, 1650, -1864, 5551, 5557], 589822) == 0\nassert solution.maxNonOverlapping([7237, -4885], 503307) == 0\nassert solution.maxNonOverlapping([-9734, -9025, 1837, -5249], 362575) == 0\nassert solution.maxNonOverlapping([7146, 9207, -4923, -6645, 6917, 7694, -4543, 1899, -6567, 2594], 195222) == 0\nassert solution.maxNonOverlapping([8676, -5029, 7043, -4952, -5123, -6041], 619908) == 0\nassert solution.maxNonOverlapping([9549, 3194, 4207], 781645) == 0\nassert solution.maxNonOverlapping([1081, 3270, 5657, 7814, -5802], 797430) == 0\nassert solution.maxNonOverlapping([-4226, -2515], 43412) == 0\nassert solution.maxNonOverlapping([2707, 7999, -7356, -3863, -7805, 4792, 1182, 2137, -3987, 8977], 300885) == 0\nassert solution.maxNonOverlapping([8860, 4689, -8763, -1112, 9405, 6873, -4572], 721470) == 0\nassert solution.maxNonOverlapping([3905, 611, -2439, 9970, 2533], 485589) == 0\nassert solution.maxNonOverlapping([-7441, -4824, 6326, -1698, 9430, -577, -3484, -789, 4410, 2049], 896629) == 0\nassert solution.maxNonOverlapping([-2894, 1132], 852665) == 0\nassert solution.maxNonOverlapping([9969, 1635, -6363, -4975, -7170, -9565, 5589, -47, 5657, -7279], 228409) == 0\nassert solution.maxNonOverlapping([9591, 5774, 5374, -3462], 333186) == 0\nassert solution.maxNonOverlapping([-1350, 8807, -2281, -1420, -8338, 9694, 437, 6615, 4548, -8726], 429974) == 0\nassert solution.maxNonOverlapping([923, -8508, 219, -358], 5741) == 0\nassert solution.maxNonOverlapping([3247, -267], 399337) == 0\nassert solution.maxNonOverlapping([-9971, -9524, 1547, -2834, -9333, -1973, 667], 591400) == 0\nassert solution.maxNonOverlapping([5372, 2247, -3694, -5561, -8276, 8380, 9186, -7872, -8717], 307370) == 0\nassert solution.maxNonOverlapping([-6908, -8479, 6916, -7662, 9220, 602], 105902) == 0\nassert solution.maxNonOverlapping([-7069, -3230, -5612, -5336, -5326, 6655], 814703) == 0\nassert solution.maxNonOverlapping([-6194, 9734, 8584, 1970, -595], 419895) == 0\nassert solution.maxNonOverlapping([-9377, -9465, -8000], 138613) == 0",
  "inefficient_solution": "class Solution:\n    def maxNonOverlapping(self, nums: List[int], target: int) -> int:\n        ans = 0\n        for i in range(len(nums)):\n            s = 0\n            vis = set()\n            for j in range(i, len(nums)):\n                s += nums[j]\n                if s - target in vis:\n                    ans += 1\n                    break\n                vis.add(s)\n        return ans",
  "is_python": true
}