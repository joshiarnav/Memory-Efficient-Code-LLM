{
  "problem_idx": 151,
  "task_name": "Reverse Words in a String",
  "markdown_description": "\nGiven an input string `s`, reverse the order of the **words**.\n\n\nA **word** is defined as a sequence of non-space characters. The **words** in `s` will be separated by at least one space.\n\n\nReturn *a string of the words in reverse order concatenated by a single space.*\n\n\n**Note** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"the sky is blue\"\n**Output:** \"blue is sky the\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"  hello world  \"\n**Output:** \"world hello\"\n**Explanation:** Your reversed string should not contain leading or trailing spaces.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"a good   example\"\n**Output:** \"example good a\"\n**Explanation:** You need to reduce multiple spaces between two words to a single space in the reversed string.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 104`\n* `s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.\n* There is **at least one** word in `s`.\n\n\n\u00a0\n\n\n**Follow-up:**If the string data type is mutable in your language, can\u00a0you solve it\u00a0**in-place**\u00a0with\u00a0`O(1)`\u00a0extra space?\n\n\n",
  "canonical_solution": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        return ' '.join(reversed(s.split()))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def reverseWords(self, s: str) -> str:\n        return ' '.join(reversed(s.split()))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string with lowercase letters, digits, and spaces\n    s = ''.join(random.choices(string.ascii_lowercase + string.digits + ' ', k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reverseWords(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reverseWords(s) == expected_result\n        print(f\"assert solution.reverseWords('{s}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.reverseWords('{s}') == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    import string\n\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.reverseWords('4aju 9') == '9 4aju'\nassert solution.reverseWords('wdy') == 'wdy'\nassert solution.reverseWords('r') == 'r'\nassert solution.reverseWords('pj9o61') == 'pj9o61'\nassert solution.reverseWords('l9az38') == 'l9az38'\nassert solution.reverseWords('91') == '91'\nassert solution.reverseWords('tet') == 'tet'\nassert solution.reverseWords('wd3g5r9u45') == 'wd3g5r9u45'\nassert solution.reverseWords('9wrpoefw') == '9wrpoefw'\nassert solution.reverseWords('2 1rm5') == '1rm5 2'\nassert solution.reverseWords('9uxl') == '9uxl'\nassert solution.reverseWords('aaoeqqfj7') == 'aaoeqqfj7'\nassert solution.reverseWords(' jew7y') == 'jew7y'\nassert solution.reverseWords('r7nud') == 'r7nud'\nassert solution.reverseWords('qc6zns') == 'qc6zns'\nassert solution.reverseWords('i87l') == 'i87l'\nassert solution.reverseWords('te4ydzt') == 'te4ydzt'\nassert solution.reverseWords('jor') == 'jor'\nassert solution.reverseWords('9kmtg0') == '9kmtg0'\nassert solution.reverseWords('58c06t') == '58c06t'\nassert solution.reverseWords('0oo5yp6o4') == '0oo5yp6o4'\nassert solution.reverseWords('t') == 't'\nassert solution.reverseWords('n5m24') == 'n5m24'\nassert solution.reverseWords('110c') == '110c'\nassert solution.reverseWords('yrj0vrsp') == 'yrj0vrsp'\nassert solution.reverseWords('6x') == '6x'\nassert solution.reverseWords('mrs') == 'mrs'\nassert solution.reverseWords('p9') == 'p9'\nassert solution.reverseWords('8dzk807') == '8dzk807'\nassert solution.reverseWords('pk5zw3t8ir') == 'pk5zw3t8ir'\nassert solution.reverseWords('3') == '3'\nassert solution.reverseWords('tu2ku2k') == 'tu2ku2k'\nassert solution.reverseWords('sdtwpd') == 'sdtwpd'\nassert solution.reverseWords('lx') == 'lx'\nassert solution.reverseWords('gkvbfw') == 'gkvbfw'\nassert solution.reverseWords('2') == '2'\nassert solution.reverseWords('7yn') == '7yn'\nassert solution.reverseWords('1pxlrs') == '1pxlrs'\nassert solution.reverseWords('oacz35') == 'oacz35'\nassert solution.reverseWords('o1') == 'o1'\nassert solution.reverseWords('h') == 'h'\nassert solution.reverseWords('5xyz') == '5xyz'\nassert solution.reverseWords('y1jp 8g4') == '8g4 y1jp'\nassert solution.reverseWords('tr') == 'tr'\nassert solution.reverseWords('1') == '1'\nassert solution.reverseWords('o8 ivq3r') == 'ivq3r o8'\nassert solution.reverseWords('zh1pid97o3') == 'zh1pid97o3'\nassert solution.reverseWords('077ta2y') == '077ta2y'\nassert solution.reverseWords('fuhtls') == 'fuhtls'\nassert solution.reverseWords('h2c') == 'h2c'\nassert solution.reverseWords('8b4w91') == '8b4w91'\nassert solution.reverseWords('7') == '7'\nassert solution.reverseWords('vfk40v2q10') == 'vfk40v2q10'\nassert solution.reverseWords('6auze0cl5 ') == '6auze0cl5'\nassert solution.reverseWords('qv') == 'qv'\nassert solution.reverseWords('570xen') == '570xen'\nassert solution.reverseWords('t8nesak') == 't8nesak'\nassert solution.reverseWords('c') == 'c'\nassert solution.reverseWords('jzswf43') == 'jzswf43'\nassert solution.reverseWords('a5gzm') == 'a5gzm'\nassert solution.reverseWords('g1zp9x28') == 'g1zp9x28'\nassert solution.reverseWords('k6') == 'k6'\nassert solution.reverseWords('r4kaa') == 'r4kaa'\nassert solution.reverseWords('0bgzhbu33t') == '0bgzhbu33t'\nassert solution.reverseWords('r0y4o3i') == 'r0y4o3i'\nassert solution.reverseWords('xizf9e') == 'xizf9e'\nassert solution.reverseWords('tnxpcr') == 'tnxpcr'\nassert solution.reverseWords('fxhhiy') == 'fxhhiy'\nassert solution.reverseWords('5r9s3n') == '5r9s3n'\nassert solution.reverseWords('hkyx') == 'hkyx'\nassert solution.reverseWords('g4') == 'g4'\nassert solution.reverseWords('lx') == 'lx'\nassert solution.reverseWords('2rt') == '2rt'\nassert solution.reverseWords('k05fjqkpzk') == 'k05fjqkpzk'\nassert solution.reverseWords('k02ccq4') == 'k02ccq4'\nassert solution.reverseWords('gxz50xn') == 'gxz50xn'\nassert solution.reverseWords('hj2gf fez') == 'fez hj2gf'\nassert solution.reverseWords('b') == 'b'\nassert solution.reverseWords('qr0l5tr279') == 'qr0l5tr279'\nassert solution.reverseWords(' 1') == '1'\nassert solution.reverseWords('2ssgiyq2jx') == '2ssgiyq2jx'\nassert solution.reverseWords('tqysuv') == 'tqysuv'\nassert solution.reverseWords(' ykl') == 'ykl'\nassert solution.reverseWords('la6gh') == 'la6gh'\nassert solution.reverseWords('e') == 'e'\nassert solution.reverseWords('t2v') == 't2v'\nassert solution.reverseWords('64yy4qk5') == '64yy4qk5'\nassert solution.reverseWords('kumzl5 25z') == '25z kumzl5'\nassert solution.reverseWords('5') == '5'\nassert solution.reverseWords('je 8qvux4k') == '8qvux4k je'\nassert solution.reverseWords('ceni') == 'ceni'\nassert solution.reverseWords('6dvvz2fy') == '6dvvz2fy'\nassert solution.reverseWords('el24t3f') == 'el24t3f'\nassert solution.reverseWords('z') == 'z'\nassert solution.reverseWords('p5z4h') == 'p5z4h'\nassert solution.reverseWords('4') == '4'\nassert solution.reverseWords('o2d12tlt') == 'o2d12tlt'\nassert solution.reverseWords('r7iy') == 'r7iy'\nassert solution.reverseWords('10 ') == '10'\nassert solution.reverseWords('s') == 's'",
  "inefficient_solution": "class Solution:\n    def reverseWords(self, s: str) -> str:\n        words = s.split()\n        length = len(words)\n        reversed_words = []\n        \n        for i in range(length):\n            reversed_words.append(words[length - 1 - i])\n        \n        for i in range(length - 1):\n            reversed_words[i] += ' '\n        \n        return ''.join(reversed(reversed_words))",
  "is_python": true
}