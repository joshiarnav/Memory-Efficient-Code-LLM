{
  "problem_idx": 902,
  "task_name": "Numbers At Most N Given Digit Set",
  "markdown_description": "\nGiven an array of `digits` which is sorted in **non-decreasing** order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`.\n\n\nReturn *the number of positive integers that can be generated* that are less than or equal to a given integer `n`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\n**Output:** 20\n**Explanation:** \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** digits = [\"1\",\"4\",\"9\"], n = 1000000000\n**Output:** 29523\n**Explanation:** \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** digits = [\"7\"], n = 8\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= digits.length <= 9`\n* `digits[i].length == 1`\n* `digits[i]` is a digit from\u00a0`'1'`\u00a0to `'9'`.\n* All the values in\u00a0`digits` are **unique**.\n* `digits` is sorted in\u00a0**non-decreasing** order.\n* `1 <= n <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        @cache\n        def dfs(pos, lead, limit):\n            if pos <= 0:\n                return lead == False\n            up = a[pos] if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if i == 0 and lead:\n                    ans += dfs(pos - 1, lead, limit and i == up)\n                elif i in s:\n                    ans += dfs(pos - 1, False, limit and i == up)\n            return ans\n\n        l = 0\n        a = [0] * 12\n        s = {int(d) for d in digits}\n        while n:\n            l += 1\n            a[l] = n % 10\n            n //= 10\n        return dfs(l, True, True)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def atMostNGivenDigitSet(self, digits, n):\n        @cache\n        def dfs(pos, lead, limit):\n            if pos <= 0:\n                return lead == False\n            up = a[pos] if limit else 9\n            ans = 0\n            for i in range(up + 1):\n                if i == 0 and lead:\n                    ans += dfs(pos - 1, lead, limit and i == up)\n                elif i in s:\n                    ans += dfs(pos - 1, False, limit and i == up)\n            return ans\n\n        l = 0\n        a = [0] * 12\n        s = {int(d) for d in digits}\n        while n:\n            l += 1\n            a[l] = n % 10\n            n //= 10\n        return dfs(l, True, True)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random digits list\n    digits = random.sample('123456789', random.randint(1, 9))\n    \n    # Generate a random target integer\n    n = random.randint(1, 10**9)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.atMostNGivenDigitSet(digits, n)\n\n    return digits, n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        digits, n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.atMostNGivenDigitSet(digits, n) == expected_result\n        print(f\"assert solution.atMostNGivenDigitSet({digits}, {n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.atMostNGivenDigitSet({digits}, {n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.atMostNGivenDigitSet(['7', '8', '2', '5', '3', '6'], 405839731) == 5374770\nassert solution.atMostNGivenDigitSet(['2', '5', '1', '8', '4'], 397425129) == 1269530\nassert solution.atMostNGivenDigitSet(['5', '1', '2'], 398396132) == 22962\nassert solution.atMostNGivenDigitSet(['5'], 537567109) == 8\nassert solution.atMostNGivenDigitSet(['8', '6', '1', '4', '7', '9', '5'], 116899734) == 7179249\nassert solution.atMostNGivenDigitSet(['2', '5', '7', '9', '3', '4', '1'], 731195845) == 37212763\nassert solution.atMostNGivenDigitSet(['6', '8', '1'], 828862801) == 25149\nassert solution.atMostNGivenDigitSet(['5'], 753553033) == 9\nassert solution.atMostNGivenDigitSet(['1', '8'], 99154097) == 510\nassert solution.atMostNGivenDigitSet(['8', '3', '2', '1', '6', '5'], 694823631) == 10413618\nassert solution.atMostNGivenDigitSet(['9', '7', '2', '1', '4', '8', '6'], 40980755) == 2607885\nassert solution.atMostNGivenDigitSet(['1', '9', '4', '2', '5', '7', '3', '8', '6'], 709541893) == 306707886\nassert solution.atMostNGivenDigitSet(['5', '8', '2', '1'], 871498573) == 333140\nassert solution.atMostNGivenDigitSet(['4'], 972047229) == 9\nassert solution.atMostNGivenDigitSet(['9', '3', '2', '8', '5', '6', '4', '7', '1'], 145686268) == 65247182\nassert solution.atMostNGivenDigitSet(['6', '9', '7', '2', '4', '3', '8', '1', '5'], 451097861) == 196699599\nassert solution.atMostNGivenDigitSet(['3'], 534806870) == 9\nassert solution.atMostNGivenDigitSet(['4', '5', '1', '6', '3', '9', '2', '8', '7'], 467612097) == 204967188\nassert solution.atMostNGivenDigitSet(['2', '7', '1', '6', '5'], 485252471) == 1269530\nassert solution.atMostNGivenDigitSet(['7', '9', '1', '8', '2', '3', '4'], 94515836) == 6322232\nassert solution.atMostNGivenDigitSet(['9'], 716873868) == 8\nassert solution.atMostNGivenDigitSet(['3', '4', '8', '1', '2'], 604244586) == 2050780\nassert solution.atMostNGivenDigitSet(['9', '5', '8', '1', '2', '6', '7', '4'], 813806753) == 120361544\nassert solution.atMostNGivenDigitSet(['9', '2', '1', '6', '8', '4', '3', '5', '7'], 13059416) == 6443721\nassert solution.atMostNGivenDigitSet(['1', '6'], 570088327) == 766\nassert solution.atMostNGivenDigitSet(['5', '4', '3', '7', '6'], 284595545) == 488280\nassert solution.atMostNGivenDigitSet(['4', '7', '2', '9'], 202257405) == 87380\nassert solution.atMostNGivenDigitSet(['2', '3', '5', '7', '4', '9', '6', '1', '8'], 816114541) == 352414351\nassert solution.atMostNGivenDigitSet(['4'], 798366250) == 9\nassert solution.atMostNGivenDigitSet(['3', '9', '2', '7', '1', '8', '4', '5'], 352044636) == 61379144\nassert solution.atMostNGivenDigitSet(['5', '3', '7', '9', '2', '4'], 869823087) == 10413618\nassert solution.atMostNGivenDigitSet(['6', '3', '4', '7', '9', '8', '1', '2'], 269762600) == 46355784\nassert solution.atMostNGivenDigitSet(['5', '3', '1', '9', '2', '4', '6'], 324494118) == 19497554\nassert solution.atMostNGivenDigitSet(['1', '2', '4', '5', '7'], 295040037) == 1269530\nassert solution.atMostNGivenDigitSet(['1', '5', '3', '4', '6', '8', '9'], 574912058) == 28137718\nassert solution.atMostNGivenDigitSet(['1', '4', '2', '6', '5', '8', '3', '9'], 308234796) == 52728392\nassert solution.atMostNGivenDigitSet(['5', '7'], 525597879) == 510\nassert solution.atMostNGivenDigitSet(['1'], 2621676) == 7\nassert solution.atMostNGivenDigitSet(['6'], 206383583) == 8\nassert solution.atMostNGivenDigitSet(['6', '1', '9', '4', '5'], 364389471) == 878905\nassert solution.atMostNGivenDigitSet(['8', '5', '3'], 214970028) == 9840\nassert solution.atMostNGivenDigitSet(['9', '7', '4', '2'], 113395997) == 87380\nassert solution.atMostNGivenDigitSet(['5'], 813635773) == 9\nassert solution.atMostNGivenDigitSet(['4'], 634882579) == 9\nassert solution.atMostNGivenDigitSet(['8', '2', '6', '3', '9'], 320474077) == 878905\nassert solution.atMostNGivenDigitSet(['8', '2'], 228757476) == 606\nassert solution.atMostNGivenDigitSet(['4', '8', '3', '7', '6', '1'], 768000340) == 9807090\nassert solution.atMostNGivenDigitSet(['2', '4', '8', '7', '5', '1'], 318273331) == 5374770\nassert solution.atMostNGivenDigitSet(['7', '4', '3', '6', '5'], 423791116) == 878905\nassert solution.atMostNGivenDigitSet(['6', '4', '9', '7', '5', '1', '8'], 612726919) == 24137652\nassert solution.atMostNGivenDigitSet(['8', '6'], 727445961) == 766\nassert solution.atMostNGivenDigitSet(['5', '8', '3', '7', '6', '4', '1', '2', '9'], 436801820) == 190204209\nassert solution.atMostNGivenDigitSet(['6', '1', '3', '9', '4', '7', '5', '8'], 296168943) == 35951176\nassert solution.atMostNGivenDigitSet(['8', '3', '6', '5'], 359912722) == 120148\nassert solution.atMostNGivenDigitSet(['2', '6', '1', '7', '8', '5'], 633622201) == 7614258\nassert solution.atMostNGivenDigitSet(['8', '7', '2', '5', '4'], 892756173) == 2441405\nassert solution.atMostNGivenDigitSet(['9', '5', '4', '2', '1', '8', '3', '7'], 413155382) == 70048506\nassert solution.atMostNGivenDigitSet(['9', '7', '1', '5', '8', '4', '2', '3'], 847475991) == 127560769\nassert solution.atMostNGivenDigitSet(['8', '2', '4', '5'], 812560807) == 283988\nassert solution.atMostNGivenDigitSet(['5', '7', '1'], 558175795) == 20775\nassert solution.atMostNGivenDigitSet(['8', '4', '5', '3', '7', '2', '1'], 71323082) == 5115215\nassert solution.atMostNGivenDigitSet(['2', '8', '5', '7'], 710052167) == 218452\nassert solution.atMostNGivenDigitSet(['1', '9', '5'], 183053400) == 14214\nassert solution.atMostNGivenDigitSet(['9', '3', '5'], 148100504) == 9840\nassert solution.atMostNGivenDigitSet(['3', '8', '4', '5', '1', '2', '9', '7'], 371184433) == 63240475\nassert solution.atMostNGivenDigitSet(['4', '9', '8'], 975642738) == 25149\nassert solution.atMostNGivenDigitSet(['5', '1', '2'], 470770578) == 22962\nassert solution.atMostNGivenDigitSet(['8', '1', '6', '9', '5', '7'], 943153309) == 10693554\nassert solution.atMostNGivenDigitSet(['5', '8', '9', '6', '3'], 974382242) == 2285155\nassert solution.atMostNGivenDigitSet(['8', '5', '7', '3', '9', '2'], 320296086) == 3695154\nassert solution.atMostNGivenDigitSet(['7', '9'], 166999341) == 510\nassert solution.atMostNGivenDigitSet(['8', '9', '7', '5', '6', '1', '2', '4', '3'], 171350009) == 77269716\nassert solution.atMostNGivenDigitSet(['8'], 688255551) == 8\nassert solution.atMostNGivenDigitSet(['8', '5', '2'], 895916161) == 29523\nassert solution.atMostNGivenDigitSet(['5', '4', '9', '6'], 797424605) == 283988\nassert solution.atMostNGivenDigitSet(['5', '1', '6', '3', '7', '4', '8', '9'], 566727332) == 79110728\nassert solution.atMostNGivenDigitSet(['3', '9'], 340231664) == 638\nassert solution.atMostNGivenDigitSet(['4', '8', '6', '5', '1'], 654115177) == 1832300\nassert solution.atMostNGivenDigitSet(['3', '6', '7', '5', '9'], 416331871) == 878905\nassert solution.atMostNGivenDigitSet(['5'], 380989521) == 8\nassert solution.atMostNGivenDigitSet(['5'], 552933163) == 8\nassert solution.atMostNGivenDigitSet(['1', '8', '7', '6'], 850861456) == 300372\nassert solution.atMostNGivenDigitSet(['7', '1', '3', '6', '5', '2', '9'], 539576239) == 26436851\nassert solution.atMostNGivenDigitSet(['9', '3'], 858896524) == 766\nassert solution.atMostNGivenDigitSet(['5', '4', '2'], 497031849) == 22962\nassert solution.atMostNGivenDigitSet(['9', '2', '3', '5', '7', '1', '8', '4', '6'], 870612489) == 378452421\nassert solution.atMostNGivenDigitSet(['1', '6'], 35487628) == 382\nassert solution.atMostNGivenDigitSet(['2'], 433106006) == 9\nassert solution.atMostNGivenDigitSet(['8', '7', '6', '1'], 106247919) == 87380\nassert solution.atMostNGivenDigitSet(['5', '6', '3', '4'], 953010549) == 349524\nassert solution.atMostNGivenDigitSet(['5', '3', '1', '2', '4', '7', '9', '8', '6'], 84340069) == 40593726\nassert solution.atMostNGivenDigitSet(['2', '3'], 695351780) == 1022\nassert solution.atMostNGivenDigitSet(['8'], 367372897) == 8\nassert solution.atMostNGivenDigitSet(['3', '8'], 615758792) == 766\nassert solution.atMostNGivenDigitSet(['3', '5', '1', '2', '4', '7', '6', '8', '9'], 210637943) == 91474281\nassert solution.atMostNGivenDigitSet(['1'], 583785468) == 9\nassert solution.atMostNGivenDigitSet(['8', '3'], 686172193) == 766\nassert solution.atMostNGivenDigitSet(['3', '2', '1', '6', '5'], 893209380) == 2441405\nassert solution.atMostNGivenDigitSet(['2', '9', '6'], 632627319) == 18588\nassert solution.atMostNGivenDigitSet(['5', '7', '1', '3', '2', '9', '6'], 606486502) == 29784804",
  "inefficient_solution": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        def dfs(pos, lead, limit, memo):\n            if (pos, lead, limit) in memo:\n                return memo[(pos, lead, limit)]\n            if pos <= 0:\n                return lead == False\n            up = 9\n            ans = 0\n            for i in range(up + 1):\n                for _ in range(10000000):  # Change here\n                    if i == 0 and lead:\n                        ans += dfs(pos - 1, lead, limit and i == up, memo)\n                    elif i in s:\n                        ans += dfs(pos - 1, False, limit and i == up, memo)\n            memo[(pos, lead, limit)] = ans\n            return ans\n\n        l = 0\n        a = [0] * (10000000)  # Change here\n        s = {int(d) for d in digits}\n        while n:\n            l += 1\n            a[l] = n % 10\n            n //= 10\n        return dfs(l, True, True, {})",
  "is_python": true
}