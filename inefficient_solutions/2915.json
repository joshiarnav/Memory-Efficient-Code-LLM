{
  "problem_idx": 2915,
  "task_name": "Length of the Longest Subsequence That Sums to Target",
  "markdown_description": "\nYou are given a **0-indexed** array of integers `nums`, and an integer `target`.\n\n\nReturn *the **length of the longest subsequence** of* `nums` *that sums up to* `target`. *If no such subsequence exists, return* `-1`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], target = 9\n**Output:** 3\n**Explanation:** There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [4,1,3,2,1,5], target = 7\n**Output:** 4\n**Explanation:** There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,1,5,4,5], target = 3\n**Output:** -1\n**Explanation:** It can be shown that nums has no subsequence that sums up to 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 1000`\n* `1 <= target <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        f = [0] + [-inf] * target\n        for x in nums:\n            for j in range(target, x - 1, -1):\n                f[j] = max(f[j], f[j - x] + 1)\n        return -1 if f[-1] <= 0 else f[-1]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def lengthOfLongestSubsequence(self, nums: List[int], target: int) -> int:\n        f = [0] + [-float('inf')] * target\n        for x in nums:\n            for j in range(target, x - 1, -1):\n                f[j] = max(f[j], f[j - x] + 1)\n        return -1 if f[-1] <= 0 else f[-1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(1, 11))\n    \n    # Generate a random target sum\n    target = random.randint(1, 201)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lengthOfLongestSubsequence(nums, target)\n\n    return nums, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lengthOfLongestSubsequence(nums, target) == expected_result\n        print(f\"assert solution.lengthOfLongestSubsequence({nums}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.lengthOfLongestSubsequence({nums}, {target}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lengthOfLongestSubsequence([17, 52, 70], 133) == -1\nassert solution.lengthOfLongestSubsequence([95, 69, 92, 33, 3, 73, 46], 137) == -1\nassert solution.lengthOfLongestSubsequence([11, 82, 77, 12, 43, 13, 86, 97], 81) == -1\nassert solution.lengthOfLongestSubsequence([79, 93, 94, 2, 8, 51, 87, 40, 30, 29], 79) == 4\nassert solution.lengthOfLongestSubsequence([6, 51, 31, 62, 70, 93, 23, 63, 19, 69], 82) == 2\nassert solution.lengthOfLongestSubsequence([40, 59, 30, 72, 82, 94, 93], 192) == 3\nassert solution.lengthOfLongestSubsequence([17, 40], 176) == -1\nassert solution.lengthOfLongestSubsequence([61, 12, 26, 92, 49, 67, 86, 91, 65, 76, 69], 185) == 4\nassert solution.lengthOfLongestSubsequence([41, 92, 12, 69, 51, 27, 89, 77, 16, 48, 31], 163) == 5\nassert solution.lengthOfLongestSubsequence([12, 95, 55, 49, 26, 35, 67, 60, 15, 64, 96], 146) == 4\nassert solution.lengthOfLongestSubsequence([34, 82, 24, 60, 58, 53], 143) == -1\nassert solution.lengthOfLongestSubsequence([31, 30, 35], 43) == -1\nassert solution.lengthOfLongestSubsequence([12, 22, 38, 19, 54, 68, 93, 27], 97) == -1\nassert solution.lengthOfLongestSubsequence([58], 124) == -1\nassert solution.lengthOfLongestSubsequence([35, 86, 74, 85, 56, 24, 80, 51, 97, 84, 60], 121) == 2\nassert solution.lengthOfLongestSubsequence([9, 37, 62, 70, 68], 82) == -1\nassert solution.lengthOfLongestSubsequence([74, 39, 42, 76, 99], 2) == -1\nassert solution.lengthOfLongestSubsequence([96, 5, 94, 59, 22, 100, 16], 3) == -1\nassert solution.lengthOfLongestSubsequence([11, 52, 98, 22], 163) == -1\nassert solution.lengthOfLongestSubsequence([54, 87, 48, 66, 36, 85, 81], 86) == -1\nassert solution.lengthOfLongestSubsequence([15, 62, 59, 76, 92, 89], 170) == -1\nassert solution.lengthOfLongestSubsequence([80, 57], 148) == -1\nassert solution.lengthOfLongestSubsequence([9, 26, 37, 40, 98, 71, 33, 68, 53], 43) == -1\nassert solution.lengthOfLongestSubsequence([60, 54, 85, 81], 129) == -1\nassert solution.lengthOfLongestSubsequence([43, 30, 11, 8, 9, 82, 37], 65) == 4\nassert solution.lengthOfLongestSubsequence([56, 72, 12, 99], 51) == -1\nassert solution.lengthOfLongestSubsequence([7, 24, 96, 35, 34, 21, 92, 78, 58, 69, 51], 190) == 6\nassert solution.lengthOfLongestSubsequence([35, 11], 51) == -1\nassert solution.lengthOfLongestSubsequence([68, 37, 81, 41, 34, 51], 131) == -1\nassert solution.lengthOfLongestSubsequence([93, 4, 83, 2, 32, 50, 16, 77, 70, 51, 30], 174) == 6\nassert solution.lengthOfLongestSubsequence([87, 47], 182) == -1\nassert solution.lengthOfLongestSubsequence([37, 26, 96, 3, 22, 45, 56, 59, 77], 182) == 4\nassert solution.lengthOfLongestSubsequence([20, 61, 46, 11, 4], 103) == -1\nassert solution.lengthOfLongestSubsequence([87, 89, 18, 6, 75, 52, 55, 11, 70, 100, 41], 159) == 4\nassert solution.lengthOfLongestSubsequence([92, 90, 51, 7, 22, 71, 83, 9, 79, 32, 77], 89) == 4\nassert solution.lengthOfLongestSubsequence([57], 39) == -1\nassert solution.lengthOfLongestSubsequence([91, 32, 97, 99, 67, 56, 49, 40, 81, 4], 5) == -1\nassert solution.lengthOfLongestSubsequence([51, 8, 75], 134) == 3\nassert solution.lengthOfLongestSubsequence([70, 81, 50, 3, 65, 49, 63, 99], 198) == 4\nassert solution.lengthOfLongestSubsequence([66, 62, 86, 100, 60, 88, 16, 39], 29) == -1\nassert solution.lengthOfLongestSubsequence([67, 17, 81, 35, 84, 7, 75, 5], 95) == -1\nassert solution.lengthOfLongestSubsequence([77, 61, 52, 95, 7, 36, 50, 83, 41], 156) == 4\nassert solution.lengthOfLongestSubsequence([83, 88, 33, 50, 62, 39, 22, 6, 9], 7) == -1\nassert solution.lengthOfLongestSubsequence([42, 97, 52], 142) == -1\nassert solution.lengthOfLongestSubsequence([84, 35, 47, 40, 42, 7], 164) == 4\nassert solution.lengthOfLongestSubsequence([9], 74) == -1\nassert solution.lengthOfLongestSubsequence([3, 84, 20, 50, 12, 81, 100, 71], 126) == -1\nassert solution.lengthOfLongestSubsequence([77, 38, 47, 76, 73, 36, 41, 25], 130) == -1\nassert solution.lengthOfLongestSubsequence([21, 6], 26) == -1\nassert solution.lengthOfLongestSubsequence([75, 46, 100, 12, 71, 51, 56, 29, 50, 88, 61], 1) == -1\nassert solution.lengthOfLongestSubsequence([73, 47, 10, 76, 1], 136) == -1\nassert solution.lengthOfLongestSubsequence([89, 14, 52, 97, 72, 91, 81, 59, 60, 15], 196) == -1\nassert solution.lengthOfLongestSubsequence([89, 68, 19, 53], 186) == -1\nassert solution.lengthOfLongestSubsequence([46, 86, 94, 8, 10, 39, 93, 45, 60], 25) == -1\nassert solution.lengthOfLongestSubsequence([84, 40, 12], 129) == -1\nassert solution.lengthOfLongestSubsequence([78, 88, 92, 83, 73, 36, 57, 31, 40, 90, 4], 79) == -1\nassert solution.lengthOfLongestSubsequence([78, 20], 173) == -1\nassert solution.lengthOfLongestSubsequence([39, 23, 76, 88, 65], 113) == -1\nassert solution.lengthOfLongestSubsequence([14, 71, 65, 86, 8, 96, 5, 20, 28], 20) == 1\nassert solution.lengthOfLongestSubsequence([49], 34) == -1\nassert solution.lengthOfLongestSubsequence([92, 41, 89, 66, 24], 10) == -1\nassert solution.lengthOfLongestSubsequence([77, 19, 55, 18], 137) == -1\nassert solution.lengthOfLongestSubsequence([71, 53, 29, 76, 55, 43, 64, 20, 49, 100, 82], 157) == 4\nassert solution.lengthOfLongestSubsequence([14], 99) == -1\nassert solution.lengthOfLongestSubsequence([39, 2, 12], 58) == -1\nassert solution.lengthOfLongestSubsequence([29, 11, 71, 20, 94, 59, 87], 137) == -1\nassert solution.lengthOfLongestSubsequence([79, 61, 91, 43, 100, 48], 143) == 2\nassert solution.lengthOfLongestSubsequence([39, 53, 74], 112) == -1\nassert solution.lengthOfLongestSubsequence([5], 161) == -1\nassert solution.lengthOfLongestSubsequence([33], 181) == -1\nassert solution.lengthOfLongestSubsequence([46, 75, 38, 98, 14, 22, 16, 47, 2, 89], 85) == 4\nassert solution.lengthOfLongestSubsequence([74, 75, 18, 58, 69, 87, 45, 2], 24) == -1\nassert solution.lengthOfLongestSubsequence([12, 15, 30, 99, 8, 29], 144) == 3\nassert solution.lengthOfLongestSubsequence([85, 35, 30, 97], 179) == -1\nassert solution.lengthOfLongestSubsequence([59, 19, 75, 65, 72, 79, 61, 83, 55, 57, 6], 7) == -1\nassert solution.lengthOfLongestSubsequence([66, 80, 29, 46, 28, 57], 158) == -1\nassert solution.lengthOfLongestSubsequence([65, 87, 72, 48, 6, 50, 12, 73, 82], 150) == 4\nassert solution.lengthOfLongestSubsequence([65, 89, 17, 10, 90, 30, 94, 97], 47) == 2\nassert solution.lengthOfLongestSubsequence([100], 28) == -1\nassert solution.lengthOfLongestSubsequence([32, 65, 50, 4, 71, 46, 100, 87, 62, 94, 1], 97) == 3\nassert solution.lengthOfLongestSubsequence([59, 39], 127) == -1\nassert solution.lengthOfLongestSubsequence([61, 21, 43, 13], 73) == -1\nassert solution.lengthOfLongestSubsequence([62, 43, 89], 119) == -1\nassert solution.lengthOfLongestSubsequence([97, 54, 40, 21, 58, 78], 99) == 2\nassert solution.lengthOfLongestSubsequence([82, 20, 62, 76, 92], 199) == -1\nassert solution.lengthOfLongestSubsequence([89, 54, 16, 71, 50, 33, 51], 166) == -1\nassert solution.lengthOfLongestSubsequence([37, 88, 25, 68, 29, 45, 16, 28, 21, 76], 83) == 3\nassert solution.lengthOfLongestSubsequence([47, 30, 8, 99, 84, 10, 95, 14, 2, 20], 165) == 6\nassert solution.lengthOfLongestSubsequence([11], 24) == -1\nassert solution.lengthOfLongestSubsequence([87, 82, 54, 22, 21], 24) == -1\nassert solution.lengthOfLongestSubsequence([16], 82) == -1\nassert solution.lengthOfLongestSubsequence([21, 19], 13) == -1\nassert solution.lengthOfLongestSubsequence([69, 95, 35, 54, 58], 148) == -1\nassert solution.lengthOfLongestSubsequence([97, 43, 42, 94, 56, 9, 41, 47], 169) == -1\nassert solution.lengthOfLongestSubsequence([83], 160) == -1\nassert solution.lengthOfLongestSubsequence([76, 82], 175) == -1\nassert solution.lengthOfLongestSubsequence([2, 74, 31, 38, 40, 21, 53, 80, 81, 30], 109) == 3\nassert solution.lengthOfLongestSubsequence([13, 8, 27, 67, 16, 88, 12, 63, 66], 122) == 4\nassert solution.lengthOfLongestSubsequence([88, 99, 80, 68, 42, 37, 27, 46, 56], 64) == 2\nassert solution.lengthOfLongestSubsequence([43, 56], 104) == -1",
  "inefficient_solution": "class Solution:\n    def lengthOfLongestSubsequence(self, nums, target):\n        mem = {}\n        for i, x in enumerate(nums):\n            mem[x] = i\n        cache = {}\n        for x in nums:\n            for y in nums:\n                if y + x <= target:\n                    cache.setdefault(y, []).append(x)\n        max_len = 0\n        for x in nums:\n            for y in cache.get(x, []):\n                len_sum = mem[x] + 1\n                for z in cache.get(y, []):\n                    len_sum += 1\n                    max_len = max(max_len, len_sum)\n        return -1 if max_len <= 0 else max_len",
  "is_python": true
}