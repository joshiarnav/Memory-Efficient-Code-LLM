{
  "problem_idx": 1874,
  "task_name": "Minimize Product Sum of Two Arrays",
  "markdown_description": "\nThe **product sum** of two equal-length arrays `a` and `b` is equal to the sum of `a[i] * b[i]` for all `0 <= i < a.length` (**0-indexed**).\n\n\n* For example, if `a = [1,2,3,4]` and `b = [5,2,3,1]`, the **product sum** would be `1*5 + 2*2 + 3*3 + 4*1 = 22`.\n\n\nGiven two arrays `nums1` and `nums2` of length `n`, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* `nums1`.\u00a0\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [5,3,4,2], nums2 = [4,2,2,5]\n**Output:** 40\n**Explanation:**\u00a0We can rearrange nums1 to become [3,5,4,2]. The product sum of [3,5,4,2] and [4,2,2,5] is 3*4 + 5*2 + 4*2 + 2*5 = 40.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [2,1,4,5,7], nums2 = [3,2,4,8,6]\n**Output:** 65\n**Explanation:** We can rearrange nums1 to become [5,7,4,1,2]. The product sum of [5,7,4,1,2] and [3,2,4,8,6] is 5*3 + 7*2 + 4*4 + 1*8 + 2*6 = 65.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums1.length == nums2.length`\n* `1 <= n <= 105`\n* `1 <= nums1[i], nums2[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:\n        nums1.sort()\n        nums2.sort()\n        n, res = len(nums1), 0\n        for i in range(n):\n            res += nums1[i] * nums2[n - i - 1]\n        return res\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minProductSum(self, nums1: List[int], nums2: List[int]) -> int:\n        nums1.sort()\n        nums2.sort()\n        n, res = len(nums1), 0\n        for i in range(n):\n            res += nums1[i] * nums2[n - i - 1]\n        return res\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers lists\n    nums1 = random.sample(range(1, 101), random.randint(1, 10))\n    nums2 = random.sample(range(1, 101), len(nums1))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minProductSum(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minProductSum(nums1, nums2) == expected_result\n        print(f\"assert solution.minProductSum({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minProductSum({nums1}, {nums2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minProductSum([1, 9, 12, 15, 19, 44, 88, 98, 99], [1, 2, 9, 12, 33, 51, 55, 66, 69]) == 4330\nassert solution.minProductSum([13, 14, 55, 67], [7, 38, 74, 84]) == 4687\nassert solution.minProductSum([17, 19, 32, 42, 64, 70, 81, 88, 97], [16, 20, 34, 38, 40, 52, 64, 88, 99]) == 18873\nassert solution.minProductSum([39, 81], [73, 88]) == 9345\nassert solution.minProductSum([9, 37, 51, 59, 65, 78, 81, 97], [15, 23, 26, 77, 82, 95, 98, 99]) == 24551\nassert solution.minProductSum([48], [4]) == 192\nassert solution.minProductSum([2, 29, 35, 54, 62, 69, 70, 86, 99, 100], [14, 27, 39, 44, 50, 66, 71, 74, 79, 88]) == 26940\nassert solution.minProductSum([52, 79], [52, 97]) == 9152\nassert solution.minProductSum([11, 22, 28, 29, 34, 51, 59, 74, 82, 100], [9, 19, 47, 54, 60, 67, 88, 92, 98, 100]) == 22844\nassert solution.minProductSum([8, 27, 43, 59, 65], [3, 7, 25, 63, 87]) == 4080\nassert solution.minProductSum([19, 49, 69, 76, 100], [33, 44, 72, 74, 84]) == 16834\nassert solution.minProductSum([12, 28, 37, 50, 55, 64, 67, 69, 71, 77], [1, 7, 17, 21, 25, 44, 60, 72, 87, 98]) == 16450\nassert solution.minProductSum([27, 58, 80, 93], [19, 29, 45, 92]) == 9181\nassert solution.minProductSum([7, 10, 14, 24, 32, 35, 58], [3, 40, 45, 47, 60, 76, 85]) == 6337\nassert solution.minProductSum([10, 45, 68, 77], [28, 47, 74, 75]) == 9432\nassert solution.minProductSum([5, 12, 24, 39], [37, 48, 82, 89]) == 4024\nassert solution.minProductSum([4, 29, 37, 54], [20, 36, 70, 87]) == 4790\nassert solution.minProductSum([24, 27, 31, 36, 42, 58, 74, 81, 88, 98], [6, 25, 42, 47, 48, 56, 66, 80, 83, 87]) == 23989\nassert solution.minProductSum([11], [25]) == 275\nassert solution.minProductSum([30, 71, 80, 97, 98], [28, 38, 72, 86, 91]) == 21026\nassert solution.minProductSum([16, 72, 98], [16, 46, 61]) == 5856\nassert solution.minProductSum([11, 17, 39, 43, 81], [26, 35, 50, 53, 58]) == 7100\nassert solution.minProductSum([7, 14, 16, 29, 38, 42, 80, 92], [10, 14, 42, 53, 56, 67, 70, 90]) == 10124\nassert solution.minProductSum([5, 15, 27, 28, 32, 63, 79, 94, 96, 98], [38, 39, 47, 50, 55, 72, 77, 82, 88, 92]) == 27755\nassert solution.minProductSum([6, 29, 31, 50, 60, 79, 94], [10, 14, 30, 31, 35, 43, 69]) == 8142\nassert solution.minProductSum([96], [61]) == 5856\nassert solution.minProductSum([24, 36, 44, 52, 56, 59, 62, 67, 71, 91], [6, 11, 28, 32, 37, 43, 50, 70, 86, 97]) == 20882\nassert solution.minProductSum([36, 44, 90], [23, 57, 74]) == 7242\nassert solution.minProductSum([43, 97], [18, 75]) == 4971\nassert solution.minProductSum([1, 2, 6, 14, 26, 27, 30, 36, 58, 100], [9, 17, 26, 27, 35, 40, 43, 46, 58, 77]) == 6688\nassert solution.minProductSum([8, 13, 17, 29, 39, 50, 61], [25, 27, 32, 38, 56, 59, 70]) == 7504\nassert solution.minProductSum([42, 43, 59, 85, 98, 100], [27, 34, 41, 59, 65, 93]) == 19699\nassert solution.minProductSum([5, 68, 82], [24, 72, 90]) == 7314\nassert solution.minProductSum([45, 62, 83], [17, 18, 24]) == 3607\nassert solution.minProductSum([17, 30], [3, 92]) == 1654\nassert solution.minProductSum([1, 6, 17, 37, 38, 46, 51, 80, 92, 97], [9, 26, 49, 53, 58, 60, 63, 67, 69, 98]) == 18818\nassert solution.minProductSum([5, 13, 25, 28, 35, 43, 54, 73, 78, 90], [17, 18, 28, 36, 43, 53, 65, 71, 87, 95]) == 15827\nassert solution.minProductSum([1, 22, 33, 71, 74], [12, 55, 64, 73, 79]) == 8590\nassert solution.minProductSum([15, 33, 94], [1, 13, 34]) == 1033\nassert solution.minProductSum([9, 23, 24, 28, 30, 82], [13, 26, 52, 69, 83, 85]) == 7632\nassert solution.minProductSum([1, 8, 17, 24, 36, 86, 93], [18, 28, 43, 47, 55, 60, 89]) == 8262\nassert solution.minProductSum([2, 4, 20, 24, 29, 35, 56, 79, 81, 97], [8, 22, 34, 35, 58, 73, 75, 78, 85, 89]) == 15229\nassert solution.minProductSum([13, 42, 81], [3, 23, 57]) == 1950\nassert solution.minProductSum([48], [80]) == 3840\nassert solution.minProductSum([11, 19, 55, 71, 77, 79, 93, 99], [37, 48, 56, 60, 72, 87, 90, 99]) == 29867\nassert solution.minProductSum([9, 33, 37, 51, 67, 76, 93, 99], [4, 12, 29, 46, 56, 69, 72, 99]) == 15474\nassert solution.minProductSum([17, 79], [8, 98]) == 2298\nassert solution.minProductSum([3, 19, 37, 81, 83, 95], [13, 18, 54, 60, 62, 95]) == 10786\nassert solution.minProductSum([5, 42, 43, 66, 69, 70, 71, 78], [12, 20, 28, 56, 67, 74, 89, 100]) == 20022\nassert solution.minProductSum([88, 94], [33, 85]) == 10582\nassert solution.minProductSum([43], [62]) == 2666\nassert solution.minProductSum([4, 8, 24, 35, 37, 56, 70, 82], [6, 10, 13, 21, 31, 44, 70, 87]) == 5746\nassert solution.minProductSum([89], [21]) == 1869\nassert solution.minProductSum([92], [25]) == 2300\nassert solution.minProductSum([44, 51, 59, 99], [38, 44, 69, 86]) == 13661\nassert solution.minProductSum([42, 55, 62, 79, 87, 94], [29, 33, 37, 51, 62, 78]) == 18368\nassert solution.minProductSum([15, 27, 29, 40, 62, 98], [23, 42, 48, 74, 75, 81]) == 12164\nassert solution.minProductSum([91], [31]) == 2821\nassert solution.minProductSum([4, 17, 29, 37, 43, 65, 76, 84], [27, 33, 45, 61, 62, 85, 94, 96]) == 17065\nassert solution.minProductSum([26, 37, 72, 77, 99], [47, 73, 92, 99, 100]) == 23161\nassert solution.minProductSum([37, 74, 79, 92], [9, 22, 53, 99]) == 10151\nassert solution.minProductSum([28], [81]) == 2268\nassert solution.minProductSum([13, 27, 45, 46, 54], [31, 61, 67, 72, 94]) == 10661\nassert solution.minProductSum([6, 29, 90, 98], [27, 33, 60, 93]) == 7914\nassert solution.minProductSum([13, 29, 43, 47, 63, 67, 70, 92], [18, 20, 22, 31, 54, 57, 67, 92]) == 14611\nassert solution.minProductSum([2, 22, 23], [46, 73, 90]) == 2844\nassert solution.minProductSum([7, 28, 34, 36, 39, 49, 57, 69, 78, 100], [12, 18, 29, 52, 62, 76, 77, 81, 83, 90]) == 22051\nassert solution.minProductSum([21, 33, 43, 56, 59, 73, 77, 95], [5, 7, 27, 35, 59, 69, 85, 96]) == 16142\nassert solution.minProductSum([12, 21, 27, 30, 38, 39, 49], [22, 25, 35, 50, 65, 71, 82]) == 9113\nassert solution.minProductSum([5, 10, 26, 30, 65, 67, 79, 83, 91, 94], [27, 35, 43, 44, 61, 73, 78, 88, 96, 100]) == 27688\nassert solution.minProductSum([15, 22, 25, 54, 58, 59, 71, 100], [13, 25, 28, 30, 36, 40, 46, 57]) == 11278\nassert solution.minProductSum([13, 32, 37, 38, 43, 48, 78], [16, 57, 61, 71, 72, 82, 85]) == 15698\nassert solution.minProductSum([94], [3]) == 282\nassert solution.minProductSum([19, 37, 49, 71, 81, 90], [8, 25, 31, 83, 88, 91]) == 13998\nassert solution.minProductSum([12, 31, 33, 38, 65, 77, 80, 92, 96, 99], [5, 16, 52, 58, 65, 68, 77, 89, 91, 92]) == 30668\nassert solution.minProductSum([7, 31, 58], [7, 29, 91]) == 1942\nassert solution.minProductSum([5, 16, 30, 46, 53, 59, 72, 81, 95, 98], [4, 10, 14, 41, 47, 60, 66, 77, 82, 84]) == 18459\nassert solution.minProductSum([11, 18, 23, 24, 43, 59, 61, 68, 74, 97], [10, 11, 12, 30, 46, 60, 75, 77, 79, 91]) == 15718\nassert solution.minProductSum([26, 39, 56, 62, 76], [5, 17, 28, 53, 86]) == 7305\nassert solution.minProductSum([66, 67], [10, 64]) == 4894\nassert solution.minProductSum([9, 75, 81, 92], [7, 19, 80, 98]) == 9065\nassert solution.minProductSum([7, 11, 36, 54, 85, 95], [10, 24, 53, 57, 60, 98]) == 9250\nassert solution.minProductSum([55, 56, 81, 100], [3, 19, 46, 51]) == 7220\nassert solution.minProductSum([2, 6, 28, 66, 89, 90, 92], [15, 47, 54, 72, 76, 92, 98]) == 18044\nassert solution.minProductSum([19, 38, 43, 59, 67, 76, 81], [16, 36, 37, 43, 46, 56, 91]) == 14883\nassert solution.minProductSum([1, 8, 29, 65, 97], [19, 36, 84, 90, 94]) == 7433\nassert solution.minProductSum([2, 12, 49, 69], [11, 24, 25, 52]) == 2339\nassert solution.minProductSum([95], [63]) == 5985\nassert solution.minProductSum([80], [37]) == 2960\nassert solution.minProductSum([15, 56, 70, 76, 77], [32, 38, 61, 68, 99]) == 14915\nassert solution.minProductSum([94], [76]) == 7144\nassert solution.minProductSum([9, 23, 35, 39, 86, 95, 97, 100], [8, 14, 17, 28, 59, 72, 80, 91]) == 13661\nassert solution.minProductSum([9, 38, 42, 47, 48, 61, 86, 94, 97, 100], [1, 4, 10, 12, 19, 46, 55, 72, 84, 91]) == 15447\nassert solution.minProductSum([27, 34, 40, 49, 56, 77, 85, 91, 100], [38, 49, 51, 61, 62, 63, 82, 87, 99]) == 32761\nassert solution.minProductSum([2, 3, 23, 27, 29, 54, 56, 59, 70, 83], [15, 17, 24, 28, 42, 46, 78, 91, 95, 98]) == 13701\nassert solution.minProductSum([11, 12, 21, 26, 41, 52, 62, 87, 88, 91], [13, 29, 32, 37, 44, 67, 69, 72, 95, 100]) == 19394\nassert solution.minProductSum([1, 19, 31, 42, 51, 52, 100], [1, 9, 18, 42, 57, 78, 100]) == 6599\nassert solution.minProductSum([5, 36], [4, 93]) == 609\nassert solution.minProductSum([51, 68, 71], [49, 62, 87]) == 12132\nassert solution.minProductSum([8, 16, 25, 27, 31, 41, 45, 55, 96], [6, 33, 35, 52, 56, 71, 74, 86, 92]) == 13713",
  "inefficient_solution": "class Solution:\n    def minProductSum(self, nums1, nums2):\n        n = len(nums1)\n        nums2_copy = nums2[:]  # Create a deep copy of nums2 to avoid modifying the original list\n        nums1_copy = nums1[:]  # Create a deep copy of nums1 to avoid modifying the original list\n        sorted_nums2 = [x for x in nums2_copy]  # Create a new list and populate it with the elements of nums2_copy\n        sorted_nums2.sort()  # Sort the new list\n        sorted_nums1 = [x for x in nums1_copy]  # Create a new list and populate it with the elements of nums1_copy\n        sorted_nums1.sort()  # Sort the new list\n        result = []\n        for i in range(n):\n            result.append(sorted_nums1[i] * sorted_nums2[n - i - 1])  # Multiply corresponding elements and append the result\n        return sum(result)  # Return the sum of the results",
  "is_python": true
}