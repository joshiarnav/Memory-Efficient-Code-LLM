{
  "problem_idx": 235,
  "task_name": "Lowest Common Ancestor of a Binary Search Tree",
  "markdown_description": "\nGiven a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.\n\n\nAccording to the [definition of LCA on Wikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \u201cThe lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow **a node to be a descendant of itself**).\u201d\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0200-0299/0235.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/images/binarysearchtree_improved.png)\n\n```\n\n**Input:** root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n**Output:** 6\n**Explanation:** The LCA of nodes 2 and 8 is 6.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0200-0299/0235.Lowest%20Common%20Ancestor%20of%20a%20Binary%20Search%20Tree/images/binarysearchtree_improved.png)\n\n```\n\n**Input:** root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n**Output:** 2\n**Explanation:** The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [2,1], p = 2, q = 1\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[2, 105]`.\n* `-109 <= Node.val <= 109`\n* All `Node.val` are **unique**.\n* `p != q`\n* `p` and `q` will exist in the BST.\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n\nclass Solution:\n    def lowestCommonAncestor(\n        self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode'\n    ) -> 'TreeNode':\n        while 1:\n            if root.val < min(p.val, q.val):\n                root = root.right\n            elif root.val > max(p.val, q.val):\n                root = root.left\n            else:\n                return root\n",
  "test_case_generator": "\nimport random\n\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(\n        self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode'\n    ) -> 'TreeNode':\n        while 1:\n            if root.val < min(p.val, q.val):\n                root = root.right\n            elif root.val > max(p.val, q.val):\n                root = root.left\n            else:\n                return root\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a binary search tree\n    \n    def insert_node(root, val):\n        if root is None:\n            return TreeNode(val)\n        if val < root.val:\n            root.left = insert_node(root.left, val)\n        else:\n            root.right = insert_node(root.right, val)\n        return root\n    \n    nums = random.sample(range(-100, 101), random.randint(2, 10))\n    root = None\n    for num in nums:\n        root = insert_node(root, num)\n    \n    # Choose two nodes p and q in the BST\n    p = random.choice(nums)\n    q = random.choice(nums)\n    while p == q:\n        q = random.choice(nums)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lowestCommonAncestor(root, TreeNode(p), TreeNode(q))\n\n    return root, TreeNode(p), TreeNode(q), expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, p, q, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lowestCommonAncestor(root, p, q) == expected_result\n        print(f\"assert solution.lowestCommonAncestor(root, {p.val}, {q.val}) == {expected_result.val}\")\n        test_case_generator_results.append(f\"assert solution.lowestCommonAncestor(root, {p.val}, {q.val}) == {expected_result.val}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lowestCommonAncestor(root, -34, -82) == -34\nassert solution.lowestCommonAncestor(root, 0, -19) == -19\nassert solution.lowestCommonAncestor(root, 7, 70) == 7\nassert solution.lowestCommonAncestor(root, 26, -8) == -8\nassert solution.lowestCommonAncestor(root, -59, 98) == 98\nassert solution.lowestCommonAncestor(root, -56, 74) == -31\nassert solution.lowestCommonAncestor(root, 46, 78) == 78\nassert solution.lowestCommonAncestor(root, 22, 35) == 22\nassert solution.lowestCommonAncestor(root, 0, 78) == 78\nassert solution.lowestCommonAncestor(root, -89, -88) == -88\nassert solution.lowestCommonAncestor(root, -81, 55) == 55\nassert solution.lowestCommonAncestor(root, -63, 36) == 36\nassert solution.lowestCommonAncestor(root, 35, 4) == 4\nassert solution.lowestCommonAncestor(root, 84, -38) == 2\nassert solution.lowestCommonAncestor(root, -94, 23) == -57\nassert solution.lowestCommonAncestor(root, 90, -27) == -27\nassert solution.lowestCommonAncestor(root, 99, -22) == 46\nassert solution.lowestCommonAncestor(root, 88, -69) == 60\nassert solution.lowestCommonAncestor(root, -49, 88) == 88\nassert solution.lowestCommonAncestor(root, 58, 31) == 31\nassert solution.lowestCommonAncestor(root, 19, -15) == -8\nassert solution.lowestCommonAncestor(root, 91, 36) == 36\nassert solution.lowestCommonAncestor(root, -91, 79) == -91\nassert solution.lowestCommonAncestor(root, -5, 47) == -5\nassert solution.lowestCommonAncestor(root, 10, 53) == 53\nassert solution.lowestCommonAncestor(root, -81, -63) == -64\nassert solution.lowestCommonAncestor(root, 68, 94) == 94\nassert solution.lowestCommonAncestor(root, -44, 38) == 38\nassert solution.lowestCommonAncestor(root, 66, -2) == -2\nassert solution.lowestCommonAncestor(root, 20, -49) == -49\nassert solution.lowestCommonAncestor(root, 64, -6) == 15\nassert solution.lowestCommonAncestor(root, 28, -25) == -16\nassert solution.lowestCommonAncestor(root, -14, -67) == -67\nassert solution.lowestCommonAncestor(root, 41, 3) == 41\nassert solution.lowestCommonAncestor(root, -14, 28) == 28\nassert solution.lowestCommonAncestor(root, -42, 66) == 51\nassert solution.lowestCommonAncestor(root, 9, -27) == -27\nassert solution.lowestCommonAncestor(root, -55, -6) == -6\nassert solution.lowestCommonAncestor(root, -48, -61) == -61\nassert solution.lowestCommonAncestor(root, -89, -20) == -20\nassert solution.lowestCommonAncestor(root, -24, 53) == 53\nassert solution.lowestCommonAncestor(root, 10, -29) == 10\nassert solution.lowestCommonAncestor(root, -80, 31) == 31\nassert solution.lowestCommonAncestor(root, 80, -93) == -87\nassert solution.lowestCommonAncestor(root, 100, 82) == 100\nassert solution.lowestCommonAncestor(root, 13, 62) == 56\nassert solution.lowestCommonAncestor(root, 68, -23) == -23\nassert solution.lowestCommonAncestor(root, 19, 44) == 19\nassert solution.lowestCommonAncestor(root, -51, 28) == -51\nassert solution.lowestCommonAncestor(root, 95, -2) == 79\nassert solution.lowestCommonAncestor(root, 25, 55) == 55\nassert solution.lowestCommonAncestor(root, -10, 71) == -10\nassert solution.lowestCommonAncestor(root, 61, 78) == 69\nassert solution.lowestCommonAncestor(root, -17, -11) == -11\nassert solution.lowestCommonAncestor(root, 100, 4) == 100\nassert solution.lowestCommonAncestor(root, -47, 100) == 100\nassert solution.lowestCommonAncestor(root, 12, 83) == 39\nassert solution.lowestCommonAncestor(root, 58, -7) == -4\nassert solution.lowestCommonAncestor(root, 74, 62) == 74\nassert solution.lowestCommonAncestor(root, -32, -70) == -32\nassert solution.lowestCommonAncestor(root, -36, -64) == -36\nassert solution.lowestCommonAncestor(root, 39, -13) == 39\nassert solution.lowestCommonAncestor(root, -56, -55) == -56\nassert solution.lowestCommonAncestor(root, 25, -1) == -1\nassert solution.lowestCommonAncestor(root, 6, 57) == 6\nassert solution.lowestCommonAncestor(root, -43, 60) == 60\nassert solution.lowestCommonAncestor(root, 92, -95) == 92\nassert solution.lowestCommonAncestor(root, 29, -85) == 29\nassert solution.lowestCommonAncestor(root, -43, -18) == -43\nassert solution.lowestCommonAncestor(root, -59, 79) == -51\nassert solution.lowestCommonAncestor(root, -19, -77) == -77\nassert solution.lowestCommonAncestor(root, 99, 50) == 64\nassert solution.lowestCommonAncestor(root, 7, 29) == 24\nassert solution.lowestCommonAncestor(root, -85, -12) == -12\nassert solution.lowestCommonAncestor(root, 56, -32) == 56\nassert solution.lowestCommonAncestor(root, 71, -77) == 17\nassert solution.lowestCommonAncestor(root, 99, 49) == 99\nassert solution.lowestCommonAncestor(root, -63, 90) == 37\nassert solution.lowestCommonAncestor(root, 65, 29) == 29\nassert solution.lowestCommonAncestor(root, 53, 9) == 53\nassert solution.lowestCommonAncestor(root, -87, -13) == -87\nassert solution.lowestCommonAncestor(root, -62, 48) == -44\nassert solution.lowestCommonAncestor(root, 91, 1) == 26\nassert solution.lowestCommonAncestor(root, 17, 14) == 14\nassert solution.lowestCommonAncestor(root, 13, 89) == 73\nassert solution.lowestCommonAncestor(root, 15, 53) == 53\nassert solution.lowestCommonAncestor(root, 37, -96) == 17\nassert solution.lowestCommonAncestor(root, 71, -69) == 71\nassert solution.lowestCommonAncestor(root, 37, -35) == -35\nassert solution.lowestCommonAncestor(root, 92, -75) == 92\nassert solution.lowestCommonAncestor(root, 52, -70) == -70\nassert solution.lowestCommonAncestor(root, 98, -56) == 24\nassert solution.lowestCommonAncestor(root, -87, 34) == 34\nassert solution.lowestCommonAncestor(root, -54, -21) == -21\nassert solution.lowestCommonAncestor(root, -28, 84) == 13\nassert solution.lowestCommonAncestor(root, -80, -18) == -36\nassert solution.lowestCommonAncestor(root, 33, -83) == 33\nassert solution.lowestCommonAncestor(root, 13, -96) == 13\nassert solution.lowestCommonAncestor(root, 0, -86) == -49\nassert solution.lowestCommonAncestor(root, -10, 73) == 73",
  "inefficient_solution": "class Solution:\n    def lowestCommonAncestor(\n        self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode'\n    ) -> 'TreeNode':\n        self.check = False\n        self.result = None\n\n        def helper(root, p, q):\n            if root is None:\n                return False\n            left = helper(root.left, p, q)\n            right = helper(root.right, p, q)\n            if left and right:\n                return True\n            if (root == p or root == q) and not self.check:\n                self.check = True\n                self.result = root\n                return True\n            if left or right:\n                return True\n            return False\n\n        helper(root, p, q)\n        return self.result",
  "is_python": true
}