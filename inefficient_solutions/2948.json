{
  "problem_idx": 2948,
  "task_name": "Make Lexicographically Smallest Array by Swapping Elements",
  "markdown_description": "\nYou are given a **0-indexed** array of **positive** integers `nums` and a **positive** integer `limit`.\n\n\nIn one operation, you can choose any two indices `i` and `j` and swap `nums[i]` and `nums[j]` **if** `|nums[i] - nums[j]| <= limit`.\n\n\nReturn *the **lexicographically smallest array** that can be obtained by performing the operation any number of times*.\n\n\nAn array `a` is lexicographically smaller than an array `b` if in the first position where `a` and `b` differ, array `a` has an element that is less than the corresponding element in `b`. For example, the array `[2,10,3]` is lexicographically smaller than the array `[10,2,3]` because they differ at index `0` and `2 < 10`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,5,3,9,8], limit = 2\n**Output:** [1,3,5,8,9]\n**Explanation:** Apply the operation 2 times:\n- Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8]\n- Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9]\nWe cannot obtain a lexicographically smaller array by applying any more operations.\nNote that it may be possible to get the same result by doing different operations.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,7,6,18,2,1], limit = 3\n**Output:** [1,6,7,18,1,2]\n**Explanation:** Apply the operation 3 times:\n- Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1]\n- Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1]\n- Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2]\nWe cannot obtain a lexicographically smaller array by applying any more operations.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,7,28,19,10], limit = 3\n**Output:** [1,7,28,19,10]\n**Explanation:** [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= limit <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def lexicographicallySmallestArray(self, nums: List[int], limit: int) -> List[int]:\n        n = len(nums)\n        arr = sorted(zip(nums, range(n)))\n        ans = [0] * n\n        i = 0\n        while i < n:\n            j = i + 1\n            while j < n and arr[j][0] - arr[j - 1][0] <= limit:\n                j += 1\n            idx = sorted(k for _, k in arr[i:j])\n            for k, (x, _) in zip(idx, arr[i:j]):\n                ans[k] = x\n            i = j\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def lexicographicallySmallestArray(self, nums, limit):\n        n = len(nums)\n        arr = sorted(zip(nums, range(n)))\n        ans = [0] * n\n        i = 0\n        while i < n:\n            j = i + 1\n            while j < n and arr[j][0] - arr[j - 1][0] <= limit:\n                j += 1\n            idx = sorted(k for _, k in arr[i:j])\n            for k, (x, _) in zip(idx, arr[i:j]):\n                ans[k] = x\n            i = j\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate a random limit\n    limit = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lexicographicallySmallestArray(nums, limit)\n\n    return nums, limit, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, limit, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lexicographicallySmallestArray(nums, limit) == expected_result\n        print(f\"assert solution.lexicographicallySmallestArray({nums}, {limit}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.lexicographicallySmallestArray({nums}, {limit}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lexicographicallySmallestArray([62, 96, 65, 42, 28, 88], 41) == [28, 42, 62, 65, 88, 96]\nassert solution.lexicographicallySmallestArray([20, 88], 4) == [20, 88]\nassert solution.lexicographicallySmallestArray([52, 73, 24, 36, 49, 41, 10, 25], 3) == [49, 73, 24, 36, 52, 41, 10, 25]\nassert solution.lexicographicallySmallestArray([78, 77, 31, 44, 21, 71, 43, 7], 44) == [7, 21, 31, 43, 44, 71, 77, 78]\nassert solution.lexicographicallySmallestArray([24, 11, 64, 3, 39, 27, 89], 75) == [3, 11, 24, 27, 39, 64, 89]\nassert solution.lexicographicallySmallestArray([17, 84, 61, 25, 33, 3], 55) == [3, 17, 25, 33, 61, 84]\nassert solution.lexicographicallySmallestArray([4, 23, 12], 16) == [4, 12, 23]\nassert solution.lexicographicallySmallestArray([37, 56, 39, 76, 83, 100, 59, 77, 33, 26], 14) == [26, 56, 33, 76, 77, 100, 59, 83, 37, 39]\nassert solution.lexicographicallySmallestArray([38, 43, 33, 23, 22, 77], 65) == [22, 23, 33, 38, 43, 77]\nassert solution.lexicographicallySmallestArray([76, 44, 63, 29, 2, 34], 30) == [2, 29, 34, 44, 63, 76]\nassert solution.lexicographicallySmallestArray([10, 89, 70, 68, 60, 67], 91) == [10, 60, 67, 68, 70, 89]\nassert solution.lexicographicallySmallestArray([50, 53, 9, 28, 97, 71, 5, 45], 63) == [5, 9, 28, 45, 50, 53, 71, 97]\nassert solution.lexicographicallySmallestArray([33, 27, 59, 53, 9, 26, 50, 97], 19) == [9, 26, 27, 33, 50, 53, 59, 97]\nassert solution.lexicographicallySmallestArray([95, 61, 52, 34, 73, 88, 13, 75, 79], 46) == [13, 34, 52, 61, 73, 75, 79, 88, 95]\nassert solution.lexicographicallySmallestArray([5, 34, 95, 69, 18, 77, 53, 89, 83], 84) == [5, 18, 34, 53, 69, 77, 83, 89, 95]\nassert solution.lexicographicallySmallestArray([10, 6, 36, 11, 65], 50) == [6, 10, 11, 36, 65]\nassert solution.lexicographicallySmallestArray([5, 14, 16, 75, 45, 8, 70, 55, 31], 101) == [5, 8, 14, 16, 31, 45, 55, 70, 75]\nassert solution.lexicographicallySmallestArray([70, 54, 22], 37) == [22, 54, 70]\nassert solution.lexicographicallySmallestArray([60, 52, 50, 3, 79, 35], 26) == [35, 50, 52, 3, 60, 79]\nassert solution.lexicographicallySmallestArray([50, 62, 96, 59, 54, 37, 69], 7) == [50, 54, 96, 59, 62, 37, 69]\nassert solution.lexicographicallySmallestArray([53, 85, 92, 40, 22, 31, 89, 82], 12) == [53, 82, 85, 22, 31, 40, 89, 92]\nassert solution.lexicographicallySmallestArray([26, 86, 19, 97, 100, 56], 44) == [19, 26, 56, 86, 97, 100]\nassert solution.lexicographicallySmallestArray([13, 1, 69, 91, 61], 23) == [1, 13, 61, 69, 91]\nassert solution.lexicographicallySmallestArray([1, 7, 100, 16, 92, 51], 68) == [1, 7, 16, 51, 92, 100]\nassert solution.lexicographicallySmallestArray([20, 60, 32], 93) == [20, 32, 60]\nassert solution.lexicographicallySmallestArray([51, 76, 23, 70, 75, 57, 47, 45], 58) == [23, 45, 47, 51, 57, 70, 75, 76]\nassert solution.lexicographicallySmallestArray([60, 50, 30, 64, 14, 88], 11) == [50, 60, 30, 64, 14, 88]\nassert solution.lexicographicallySmallestArray([60, 53, 34, 3, 67, 100, 5, 68, 46, 39], 79) == [3, 5, 34, 39, 46, 53, 60, 67, 68, 100]\nassert solution.lexicographicallySmallestArray([35, 13, 41, 23, 30], 30) == [13, 23, 30, 35, 41]\nassert solution.lexicographicallySmallestArray([5, 4, 58, 36, 95, 26, 22, 24, 10], 15) == [4, 5, 58, 10, 95, 22, 24, 26, 36]\nassert solution.lexicographicallySmallestArray([38, 10], 69) == [10, 38]\nassert solution.lexicographicallySmallestArray([41, 64, 60, 73, 21, 22, 1, 11], 61) == [1, 11, 21, 22, 41, 60, 64, 73]\nassert solution.lexicographicallySmallestArray([3, 40, 58, 37, 91, 21, 32, 78, 4], 85) == [3, 4, 21, 32, 37, 40, 58, 78, 91]\nassert solution.lexicographicallySmallestArray([19, 79], 83) == [19, 79]\nassert solution.lexicographicallySmallestArray([30, 78, 67, 81, 99, 36, 95, 4], 75) == [4, 30, 36, 67, 78, 81, 95, 99]\nassert solution.lexicographicallySmallestArray([13, 75, 59, 20, 91, 14, 92, 21], 46) == [13, 14, 20, 21, 59, 75, 91, 92]\nassert solution.lexicographicallySmallestArray([86, 29, 80], 13) == [80, 29, 86]\nassert solution.lexicographicallySmallestArray([89, 11, 1, 70, 99], 24) == [70, 1, 11, 89, 99]\nassert solution.lexicographicallySmallestArray([20, 15], 31) == [15, 20]\nassert solution.lexicographicallySmallestArray([5, 41, 48, 27, 93, 65, 96], 32) == [5, 27, 41, 48, 65, 93, 96]\nassert solution.lexicographicallySmallestArray([8, 95, 81], 25) == [8, 81, 95]\nassert solution.lexicographicallySmallestArray([77, 83, 79, 76, 13, 99, 89, 80], 16) == [76, 77, 79, 80, 13, 83, 89, 99]\nassert solution.lexicographicallySmallestArray([37, 63, 6, 73], 54) == [6, 37, 63, 73]\nassert solution.lexicographicallySmallestArray([5, 90, 81, 58], 18) == [5, 81, 90, 58]\nassert solution.lexicographicallySmallestArray([33, 75, 54, 69, 4, 82, 76, 30, 51], 98) == [4, 30, 33, 51, 54, 69, 75, 76, 82]\nassert solution.lexicographicallySmallestArray([77, 49, 19, 12, 23, 80], 80) == [12, 19, 23, 49, 77, 80]\nassert solution.lexicographicallySmallestArray([35, 92, 53, 81, 39, 49, 58, 86, 10, 69], 76) == [10, 35, 39, 49, 53, 58, 69, 81, 86, 92]\nassert solution.lexicographicallySmallestArray([43, 81, 85, 98, 63, 87, 52, 2, 25, 27], 98) == [2, 25, 27, 43, 52, 63, 81, 85, 87, 98]\nassert solution.lexicographicallySmallestArray([59, 21, 48, 55, 54, 13, 32, 3, 81], 64) == [3, 13, 21, 32, 48, 54, 55, 59, 81]\nassert solution.lexicographicallySmallestArray([41, 100, 4, 83, 1, 7, 78], 9) == [41, 100, 1, 78, 4, 7, 83]\nassert solution.lexicographicallySmallestArray([48, 53, 55], 92) == [48, 53, 55]\nassert solution.lexicographicallySmallestArray([84, 9, 51, 13, 59, 49, 76], 5) == [84, 9, 49, 13, 59, 51, 76]\nassert solution.lexicographicallySmallestArray([56, 19, 49, 61, 87, 93], 83) == [19, 49, 56, 61, 87, 93]\nassert solution.lexicographicallySmallestArray([79, 77], 47) == [77, 79]\nassert solution.lexicographicallySmallestArray([10, 100, 68, 86, 24, 28, 43, 36, 48, 85], 62) == [10, 24, 28, 36, 43, 48, 68, 85, 86, 100]\nassert solution.lexicographicallySmallestArray([31, 98, 76, 70, 54, 43, 22, 7], 5) == [31, 98, 76, 70, 54, 43, 22, 7]\nassert solution.lexicographicallySmallestArray([16, 35], 80) == [16, 35]\nassert solution.lexicographicallySmallestArray([55, 13, 79, 76, 60], 32) == [55, 13, 60, 76, 79]\nassert solution.lexicographicallySmallestArray([39, 90, 62, 56, 94, 25], 5) == [39, 90, 62, 56, 94, 25]\nassert solution.lexicographicallySmallestArray([64, 20, 60, 84, 90, 38], 85) == [20, 38, 60, 64, 84, 90]\nassert solution.lexicographicallySmallestArray([85, 92, 49], 92) == [49, 85, 92]\nassert solution.lexicographicallySmallestArray([42, 75, 45], 54) == [42, 45, 75]\nassert solution.lexicographicallySmallestArray([83, 78, 87], 89) == [78, 83, 87]\nassert solution.lexicographicallySmallestArray([26, 23, 61], 52) == [23, 26, 61]\nassert solution.lexicographicallySmallestArray([27, 57, 65, 93], 54) == [27, 57, 65, 93]\nassert solution.lexicographicallySmallestArray([89, 63, 47, 13, 29, 53, 97, 59], 81) == [13, 29, 47, 53, 59, 63, 89, 97]\nassert solution.lexicographicallySmallestArray([68, 69], 35) == [68, 69]\nassert solution.lexicographicallySmallestArray([8, 17], 14) == [8, 17]\nassert solution.lexicographicallySmallestArray([38, 74, 70, 33, 1, 6, 78], 2) == [38, 74, 70, 33, 1, 6, 78]\nassert solution.lexicographicallySmallestArray([77, 74, 49, 86, 30, 96], 43) == [30, 49, 74, 77, 86, 96]\nassert solution.lexicographicallySmallestArray([70, 82, 11, 44, 74, 92, 31, 80, 55, 58], 2) == [70, 80, 11, 44, 74, 92, 31, 82, 55, 58]\nassert solution.lexicographicallySmallestArray([13, 89, 77, 91, 71, 84], 49) == [13, 71, 77, 84, 89, 91]\nassert solution.lexicographicallySmallestArray([29, 80], 6) == [29, 80]\nassert solution.lexicographicallySmallestArray([45, 75, 42, 8, 31, 3], 42) == [3, 8, 31, 42, 45, 75]\nassert solution.lexicographicallySmallestArray([30, 44, 23, 10, 98, 77, 20, 83], 69) == [10, 20, 23, 30, 44, 77, 83, 98]\nassert solution.lexicographicallySmallestArray([24, 41, 68, 44, 83, 51, 93, 43, 18], 75) == [18, 24, 41, 43, 44, 51, 68, 83, 93]\nassert solution.lexicographicallySmallestArray([48, 21, 2, 23, 51, 17, 63], 91) == [2, 17, 21, 23, 48, 51, 63]\nassert solution.lexicographicallySmallestArray([1, 90, 21, 82], 84) == [1, 21, 82, 90]\nassert solution.lexicographicallySmallestArray([11, 99, 49, 31, 98, 27, 3, 47, 12], 16) == [3, 98, 11, 12, 99, 27, 31, 47, 49]\nassert solution.lexicographicallySmallestArray([60, 17, 26, 59], 66) == [17, 26, 59, 60]\nassert solution.lexicographicallySmallestArray([6, 71, 61, 28], 32) == [6, 61, 71, 28]\nassert solution.lexicographicallySmallestArray([85, 56, 37, 16, 36, 2, 13], 8) == [85, 56, 36, 13, 37, 2, 16]\nassert solution.lexicographicallySmallestArray([81, 85, 53, 5, 98, 83, 63, 94, 33, 17], 26) == [5, 17, 33, 53, 63, 81, 83, 85, 94, 98]\nassert solution.lexicographicallySmallestArray([8, 66, 36, 31], 68) == [8, 31, 36, 66]\nassert solution.lexicographicallySmallestArray([38, 36, 69, 97, 32, 6, 76, 23, 66], 9) == [23, 32, 66, 97, 36, 6, 69, 38, 76]\nassert solution.lexicographicallySmallestArray([35, 58, 24, 41, 42], 45) == [24, 35, 41, 42, 58]\nassert solution.lexicographicallySmallestArray([82, 62, 68, 99, 54, 34, 70, 37, 52, 63], 53) == [34, 37, 52, 54, 62, 63, 68, 70, 82, 99]\nassert solution.lexicographicallySmallestArray([94, 54, 59, 79], 51) == [54, 59, 79, 94]\nassert solution.lexicographicallySmallestArray([30, 64, 68, 40, 90, 31, 22], 1) == [30, 64, 68, 40, 90, 31, 22]\nassert solution.lexicographicallySmallestArray([30, 22, 4, 82, 94], 13) == [22, 30, 4, 82, 94]\nassert solution.lexicographicallySmallestArray([73, 7, 98, 53, 32, 91, 9, 2], 40) == [2, 7, 9, 32, 53, 73, 91, 98]\nassert solution.lexicographicallySmallestArray([84, 56], 57) == [56, 84]\nassert solution.lexicographicallySmallestArray([93, 73, 92, 28], 54) == [28, 73, 92, 93]\nassert solution.lexicographicallySmallestArray([79, 30, 58, 66, 35, 47, 14], 5) == [79, 30, 58, 66, 35, 47, 14]\nassert solution.lexicographicallySmallestArray([53, 25, 15, 8], 92) == [8, 15, 25, 53]\nassert solution.lexicographicallySmallestArray([30, 44, 90, 79, 31, 22, 35], 52) == [22, 30, 31, 35, 44, 79, 90]\nassert solution.lexicographicallySmallestArray([91, 95, 60, 45, 82, 78, 49, 100], 49) == [45, 49, 60, 78, 82, 91, 95, 100]\nassert solution.lexicographicallySmallestArray([61, 74, 35, 58, 20, 17, 73, 34], 64) == [17, 20, 34, 35, 58, 61, 73, 74]\nassert solution.lexicographicallySmallestArray([37, 60, 84, 25, 12, 45, 30], 82) == [12, 25, 30, 37, 45, 60, 84]\nassert solution.lexicographicallySmallestArray([80, 42], 89) == [42, 80]",
  "inefficient_solution": "class Solution:\n    def lexicographicallySmallestArray(self, nums, limit):\n        n = len(nums)\n        arr = sorted(zip(nums, range(n)))\n        \n        ans = [0] * (n * 2)\n        indices = [0] * (n * 2)\n        i = 0\n        while i < n:\n            j = i + 1\n            while j < n and abs(arr[j][0] - arr[j - 1][0]) <= limit:\n                j += 1\n            k = 0\n            while k < j - i:\n                ans[i * 2 + k] = arr[i][0]\n                indices[i * 2 + k] = arr[i][1]\n                k += 1\n                i += 1\n                if i == j:\n                    break\n                arr[i] = min(arr[i], arr[i - 1])\n            k = 0\n            while k < j - i:\n                ans[i * 2 + k] = arr[i][0]\n                indices[i * 2 + k] = arr[i][1]\n                k += 1\n                i += 1\n        for i in range(n):\n            ans[i] = ans[i * 2]\n        return ans",
  "is_python": true
}