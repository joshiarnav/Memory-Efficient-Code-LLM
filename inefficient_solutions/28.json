{
  "problem_idx": 28,
  "task_name": "Find the Index of the First Occurrence in a String",
  "markdown_description": "\nGiven two strings `needle` and `haystack`, return the index of the first occurrence of `needle` in `haystack`, or `-1` if `needle` is not part of `haystack`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** haystack = \"sadbutsad\", needle = \"sad\"\n**Output:** 0\n**Explanation:** \"sad\" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** haystack = \"leetcode\", needle = \"leeto\"\n**Output:** -1\n**Explanation:** \"leeto\" did not occur in \"leetcode\", so we return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= haystack.length, needle.length <= 104`\n* `haystack` and `needle` consist of only lowercase English characters.\n\n\n",
  "canonical_solution": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        n, m = len(haystack), len(needle)\n        for i in range(n - m + 1):\n            if haystack[i : i + m] == needle:\n                return i\n        return -1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        n, m = len(haystack), len(needle)\n        for i in range(n - m + 1):\n            if haystack[i : i + m] == needle:\n                return i\n        return -1\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    haystack = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n    needle = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 5)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.strStr(haystack, needle)\n\n    return haystack, needle, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        haystack, needle, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.strStr(haystack, needle) == expected_result\n        print(f'assert solution.strStr(\"{haystack}\", \"{needle}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.strStr(\"{haystack}\", \"{needle}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.strStr(\"ogiwtot\", \"mp\") == -1\nassert solution.strStr(\"vclcm\", \"ffa\") == -1\nassert solution.strStr(\"ud\", \"zvi\") == -1\nassert solution.strStr(\"lz\", \"grat\") == -1\nassert solution.strStr(\"mlwtfzx\", \"w\") == 2\nassert solution.strStr(\"xkg\", \"pibq\") == -1\nassert solution.strStr(\"us\", \"cjha\") == -1\nassert solution.strStr(\"mbihqyx\", \"vxi\") == -1\nassert solution.strStr(\"ybr\", \"r\") == 2\nassert solution.strStr(\"emwer\", \"gvw\") == -1\nassert solution.strStr(\"blkzqneds\", \"tregb\") == -1\nassert solution.strStr(\"xvqzzoiifv\", \"fqp\") == -1\nassert solution.strStr(\"zhfn\", \"wcjd\") == -1\nassert solution.strStr(\"xryr\", \"bqusb\") == -1\nassert solution.strStr(\"lwcxq\", \"xjnw\") == -1\nassert solution.strStr(\"ejjxp\", \"gtjo\") == -1\nassert solution.strStr(\"wdxttuter\", \"koqqj\") == -1\nassert solution.strStr(\"tixha\", \"bpuwq\") == -1\nassert solution.strStr(\"nyqn\", \"kfaia\") == -1\nassert solution.strStr(\"kxwbojqpg\", \"fnt\") == -1\nassert solution.strStr(\"whhvpoizhh\", \"pcqp\") == -1\nassert solution.strStr(\"gzgt\", \"hfk\") == -1\nassert solution.strStr(\"hsrxcoiytk\", \"xux\") == -1\nassert solution.strStr(\"evlfzwp\", \"qxeiq\") == -1\nassert solution.strStr(\"lwpcph\", \"ytf\") == -1\nassert solution.strStr(\"wyfrxwbiuz\", \"rc\") == -1\nassert solution.strStr(\"jzorzquo\", \"l\") == -1\nassert solution.strStr(\"wairh\", \"dbpny\") == -1\nassert solution.strStr(\"xowq\", \"vdbg\") == -1\nassert solution.strStr(\"o\", \"ncvrq\") == -1\nassert solution.strStr(\"maiuofzlo\", \"ey\") == -1\nassert solution.strStr(\"ddfkczkg\", \"sy\") == -1\nassert solution.strStr(\"quza\", \"krkf\") == -1\nassert solution.strStr(\"khyc\", \"eht\") == -1\nassert solution.strStr(\"lgd\", \"w\") == -1\nassert solution.strStr(\"lzepcg\", \"oy\") == -1\nassert solution.strStr(\"lsvk\", \"lhfg\") == -1\nassert solution.strStr(\"iemlloyvr\", \"a\") == -1\nassert solution.strStr(\"djffr\", \"huyv\") == -1\nassert solution.strStr(\"hmfezj\", \"kl\") == -1\nassert solution.strStr(\"vngqtswoe\", \"zhg\") == -1\nassert solution.strStr(\"hwkaagrejn\", \"jvscj\") == -1\nassert solution.strStr(\"mea\", \"zngdi\") == -1\nassert solution.strStr(\"mxd\", \"yt\") == -1\nassert solution.strStr(\"htttnaz\", \"hbn\") == -1\nassert solution.strStr(\"m\", \"evz\") == -1\nassert solution.strStr(\"ad\", \"iwgrj\") == -1\nassert solution.strStr(\"bfgql\", \"verl\") == -1\nassert solution.strStr(\"nxufutije\", \"f\") == 3\nassert solution.strStr(\"cha\", \"ow\") == -1\nassert solution.strStr(\"s\", \"wtfw\") == -1\nassert solution.strStr(\"bkmbtexwx\", \"r\") == -1\nassert solution.strStr(\"hzmho\", \"m\") == 2\nassert solution.strStr(\"qf\", \"d\") == -1\nassert solution.strStr(\"xpzbvkytjm\", \"t\") == 7\nassert solution.strStr(\"ajn\", \"awp\") == -1\nassert solution.strStr(\"uoymj\", \"yep\") == -1\nassert solution.strStr(\"akljvvlul\", \"uv\") == -1\nassert solution.strStr(\"xghvuibxvw\", \"es\") == -1\nassert solution.strStr(\"ubgv\", \"u\") == 0\nassert solution.strStr(\"fm\", \"oyojx\") == -1\nassert solution.strStr(\"itgtb\", \"ytv\") == -1\nassert solution.strStr(\"iutefw\", \"olr\") == -1\nassert solution.strStr(\"gdajrlm\", \"hccqo\") == -1\nassert solution.strStr(\"hoizoqz\", \"xsrq\") == -1\nassert solution.strStr(\"nptvxtkgp\", \"yntr\") == -1\nassert solution.strStr(\"dqiah\", \"bovgo\") == -1\nassert solution.strStr(\"ikhwrepjm\", \"dzwao\") == -1\nassert solution.strStr(\"cnqfd\", \"ixkz\") == -1\nassert solution.strStr(\"s\", \"w\") == -1\nassert solution.strStr(\"tpys\", \"aygsf\") == -1\nassert solution.strStr(\"dlzyjudmjv\", \"fcaw\") == -1\nassert solution.strStr(\"r\", \"jex\") == -1\nassert solution.strStr(\"wtoro\", \"hp\") == -1\nassert solution.strStr(\"rvedvi\", \"gdl\") == -1\nassert solution.strStr(\"owbmn\", \"jwgc\") == -1\nassert solution.strStr(\"zyuv\", \"fjzuq\") == -1\nassert solution.strStr(\"ejhrwwqf\", \"ggl\") == -1\nassert solution.strStr(\"kndyfcqhbf\", \"bzs\") == -1\nassert solution.strStr(\"qvprx\", \"jhli\") == -1\nassert solution.strStr(\"fyt\", \"mzicb\") == -1\nassert solution.strStr(\"oawhq\", \"weiw\") == -1\nassert solution.strStr(\"jkhvv\", \"q\") == -1\nassert solution.strStr(\"i\", \"yi\") == -1\nassert solution.strStr(\"qlbl\", \"nlv\") == -1\nassert solution.strStr(\"jvh\", \"jql\") == -1\nassert solution.strStr(\"sdavhkorl\", \"pcy\") == -1\nassert solution.strStr(\"ghsj\", \"zzmtt\") == -1\nassert solution.strStr(\"bxigrzu\", \"aujd\") == -1\nassert solution.strStr(\"aqtaryr\", \"qdr\") == -1\nassert solution.strStr(\"eugtfgdrc\", \"d\") == 6\nassert solution.strStr(\"gmnmqhbrs\", \"fw\") == -1\nassert solution.strStr(\"tygqxou\", \"lyq\") == -1\nassert solution.strStr(\"ocnnc\", \"yveg\") == -1\nassert solution.strStr(\"pondjh\", \"a\") == -1\nassert solution.strStr(\"cxncsvhzys\", \"wo\") == -1\nassert solution.strStr(\"enpsnjqcw\", \"fpth\") == -1\nassert solution.strStr(\"uejmh\", \"h\") == 4\nassert solution.strStr(\"zwchchpkma\", \"akewy\") == -1\nassert solution.strStr(\"ecj\", \"c\") == 1",
  "inefficient_solution": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        n, m = len(haystack), len(needle)\n        result = []\n        for i in range(n - m + 1):\n            check = []\n            for j in range(m):\n                check.append(haystack[i + j])\n            if check == needle:\n                result.append(i)\n        return -1 if not result else result[0]",
  "is_python": true
}