{
  "problem_idx": 2592,
  "task_name": "Maximize Greatness of an Array",
  "markdown_description": "\nYou are given a 0-indexed integer array `nums`. You are allowed to permute `nums` into a new array `perm` of your choosing.\n\n\nWe define the **greatness** of `nums` be the number of indices `0 <= i < nums.length` for which `perm[i] > nums[i]`.\n\n\nReturn *the **maximum** possible greatness you can achieve after permuting* `nums`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,5,2,1,3,1]\n**Output:** 4\n**Explanation:** One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].\nAt indices = 0, 1, 3, and 4, perm[i] > nums[i]. Hence, we return 4.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 3\n**Explanation:** We can prove the optimal perm is [2,3,4,1].\nAt indices = 0, 1, and 2, perm[i] > nums[i]. Hence, we return 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximizeGreatness(self, nums: List[int]) -> int:\n        nums.sort()\n        i = 0\n        for x in nums:\n            i += x > nums[i]\n        return i\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximizeGreatness(self, nums):\n        nums.sort()\n        i = 0\n        for x in nums:\n            i += x > nums[i]\n        return i\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximizeGreatness(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximizeGreatness(nums) == expected_result\n        print(f\"assert solution.maximizeGreatness({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximizeGreatness({nums}) == {expected_result}\") # Construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximizeGreatness([12, 35, 43, 63, 65, 96]) == 5\nassert solution.maximizeGreatness([18, 48, 68, 83, 92, 94, 99]) == 6\nassert solution.maximizeGreatness([10, 24, 28, 85]) == 3\nassert solution.maximizeGreatness([9, 75]) == 1\nassert solution.maximizeGreatness([23, 46, 87, 92]) == 3\nassert solution.maximizeGreatness([19, 52, 58, 70]) == 3\nassert solution.maximizeGreatness([14, 65]) == 1\nassert solution.maximizeGreatness([60, 85]) == 1\nassert solution.maximizeGreatness([36, 64, 69, 83, 99]) == 4\nassert solution.maximizeGreatness([6, 60, 87, 89, 91]) == 4\nassert solution.maximizeGreatness([4, 18, 44, 54, 60, 69, 75, 86]) == 7\nassert solution.maximizeGreatness([1, 26, 41, 48, 64, 72]) == 5\nassert solution.maximizeGreatness([10, 28, 85, 91]) == 3\nassert solution.maximizeGreatness([4, 6, 37, 49, 73, 83, 100]) == 6\nassert solution.maximizeGreatness([16, 36, 53, 87]) == 3\nassert solution.maximizeGreatness([27, 68, 74]) == 2\nassert solution.maximizeGreatness([20, 22, 25, 27, 39, 55, 61, 96]) == 7\nassert solution.maximizeGreatness([2, 7, 17, 35, 44, 59, 66, 87, 97]) == 8\nassert solution.maximizeGreatness([9, 17, 21, 43, 58, 74, 76, 80, 85]) == 8\nassert solution.maximizeGreatness([55, 62, 68, 92]) == 3\nassert solution.maximizeGreatness([1, 24, 62, 64, 71, 82]) == 5\nassert solution.maximizeGreatness([43, 45, 48]) == 2\nassert solution.maximizeGreatness([6, 19, 74, 94, 100]) == 4\nassert solution.maximizeGreatness([20, 44, 77]) == 2\nassert solution.maximizeGreatness([19, 25, 28, 41, 45, 47, 55, 72, 74, 82]) == 9\nassert solution.maximizeGreatness([13, 38, 51, 66, 97]) == 4\nassert solution.maximizeGreatness([7, 16, 27, 53, 65, 70, 71, 78, 80]) == 8\nassert solution.maximizeGreatness([8, 29, 50, 100]) == 3\nassert solution.maximizeGreatness([34, 66, 99, 100]) == 3\nassert solution.maximizeGreatness([9, 42, 58, 69]) == 3\nassert solution.maximizeGreatness([42, 85]) == 1\nassert solution.maximizeGreatness([19, 24, 37, 42, 43, 46, 52, 77, 85]) == 8\nassert solution.maximizeGreatness([10, 26, 50, 53, 68, 70, 75, 81]) == 7\nassert solution.maximizeGreatness([7, 13, 18, 94]) == 3\nassert solution.maximizeGreatness([9, 16, 17, 24, 30, 35, 47, 66, 74, 100]) == 9\nassert solution.maximizeGreatness([39, 51, 77, 89]) == 3\nassert solution.maximizeGreatness([10, 21, 31, 52, 85, 87, 91, 100]) == 7\nassert solution.maximizeGreatness([22, 30, 64, 69, 70, 73]) == 5\nassert solution.maximizeGreatness([23, 27, 52, 66]) == 3\nassert solution.maximizeGreatness([28, 30, 34, 38, 48, 50, 51, 67, 71]) == 8\nassert solution.maximizeGreatness([17, 28, 34, 52, 75]) == 4\nassert solution.maximizeGreatness([4, 24, 37, 46, 50, 79, 82, 87]) == 7\nassert solution.maximizeGreatness([36, 37, 48, 62, 98]) == 4\nassert solution.maximizeGreatness([11, 13, 17, 50, 87]) == 4\nassert solution.maximizeGreatness([41, 58, 62, 63, 96]) == 4\nassert solution.maximizeGreatness([6, 17, 25, 29, 47, 51, 66, 94, 99]) == 8\nassert solution.maximizeGreatness([6, 7, 11, 32, 51, 67, 70, 71, 78, 86]) == 9\nassert solution.maximizeGreatness([12, 15, 17, 28, 38, 40, 44, 46, 59, 85]) == 9\nassert solution.maximizeGreatness([18, 63, 66, 84, 95]) == 4\nassert solution.maximizeGreatness([18, 36, 40, 41, 82, 93]) == 5\nassert solution.maximizeGreatness([4, 9, 11, 38, 43, 55, 68]) == 6\nassert solution.maximizeGreatness([22, 51, 61, 62, 91, 100]) == 5\nassert solution.maximizeGreatness([27, 35, 60, 71, 77, 82]) == 5\nassert solution.maximizeGreatness([11, 20, 66, 88, 91, 96]) == 5\nassert solution.maximizeGreatness([2, 7, 9, 25, 34, 88, 99]) == 6\nassert solution.maximizeGreatness([19, 23, 25, 26, 32, 38, 41, 60, 78]) == 8\nassert solution.maximizeGreatness([4, 9, 34, 46, 52, 55, 74, 77, 92, 93]) == 9\nassert solution.maximizeGreatness([34, 93]) == 1\nassert solution.maximizeGreatness([14, 18, 56, 100]) == 3\nassert solution.maximizeGreatness([12, 17, 47, 49, 67, 84, 90, 92, 96]) == 8\nassert solution.maximizeGreatness([16, 35, 41, 64, 78, 86, 91, 96, 100]) == 8\nassert solution.maximizeGreatness([21, 36, 44, 76, 78]) == 4\nassert solution.maximizeGreatness([11, 29, 38, 44, 63, 69, 94]) == 6\nassert solution.maximizeGreatness([20, 31, 34, 54, 73, 91]) == 5\nassert solution.maximizeGreatness([18, 31, 33, 52, 53, 62, 89, 93, 100]) == 8\nassert solution.maximizeGreatness([8, 10, 66, 74, 78, 85]) == 5\nassert solution.maximizeGreatness([3, 9, 16, 71, 84, 88, 90, 98, 100]) == 8\nassert solution.maximizeGreatness([18, 50, 60, 81, 82]) == 4\nassert solution.maximizeGreatness([28, 31, 56, 71, 80, 94, 97]) == 6\nassert solution.maximizeGreatness([2, 16, 25, 49, 52, 63, 67, 73, 79]) == 8\nassert solution.maximizeGreatness([5, 50, 93]) == 2\nassert solution.maximizeGreatness([15, 21, 30]) == 2\nassert solution.maximizeGreatness([14, 80, 84]) == 2\nassert solution.maximizeGreatness([27, 33, 37, 79, 85, 96]) == 5\nassert solution.maximizeGreatness([26, 34, 42, 49, 50, 54, 56, 65, 90, 93]) == 9\nassert solution.maximizeGreatness([7, 36, 63, 84, 87]) == 4\nassert solution.maximizeGreatness([1, 21, 66, 68, 71, 76, 88, 90]) == 7\nassert solution.maximizeGreatness([2, 19, 66, 71]) == 3\nassert solution.maximizeGreatness([5, 37, 42, 49, 58, 68, 75, 77, 94]) == 8\nassert solution.maximizeGreatness([1, 16, 28, 55, 58, 93]) == 5\nassert solution.maximizeGreatness([3, 17, 64]) == 2\nassert solution.maximizeGreatness([39, 52, 61, 68, 85]) == 4\nassert solution.maximizeGreatness([19, 20, 24, 28, 69, 70, 78, 88, 100]) == 8\nassert solution.maximizeGreatness([9, 36, 60, 76, 92]) == 4\nassert solution.maximizeGreatness([31, 53, 55, 67, 74, 87]) == 5\nassert solution.maximizeGreatness([9, 12, 14, 17, 20, 36, 51, 68, 71, 74]) == 9\nassert solution.maximizeGreatness([21, 32, 36, 90, 97]) == 4\nassert solution.maximizeGreatness([31, 47, 56, 96, 97]) == 4\nassert solution.maximizeGreatness([26, 65, 81, 83]) == 3\nassert solution.maximizeGreatness([12, 21, 70, 71, 76, 80, 81, 92]) == 7\nassert solution.maximizeGreatness([10, 51, 64]) == 2\nassert solution.maximizeGreatness([5, 13, 36, 37, 42, 53, 60, 68, 85]) == 8\nassert solution.maximizeGreatness([7, 12, 34, 83]) == 3\nassert solution.maximizeGreatness([34, 37]) == 1\nassert solution.maximizeGreatness([43, 70]) == 1\nassert solution.maximizeGreatness([20, 66, 86]) == 2\nassert solution.maximizeGreatness([4, 28, 34, 48, 55, 69, 70, 78, 96, 97]) == 9\nassert solution.maximizeGreatness([32, 38, 57, 89, 95, 97, 98]) == 6\nassert solution.maximizeGreatness([14, 16, 39, 58, 64, 71, 75, 94]) == 7\nassert solution.maximizeGreatness([6, 21, 66]) == 2",
  "inefficient_solution": "class Solution:\n    def maximizeGreatness(self, nums: List[int]) -> int:\n        nums_copy = nums[:]\n        nums_copy.sort()\n        original_nums = nums[:]\n        max_greatness = 0\n        for i in range(len(nums_copy)):\n            temp_nums = nums_copy[:]\n            temp_nums.remove(nums_copy[i])\n            temp_nums.insert(i, nums_copy[i])\n            temp_greatness = self.count_greatness(original_nums, temp_nums)\n            max_greatness = max(max_greatness, temp_greatness)\n        return max_greatness\n\n    def count_greatness(self, nums, perm):\n        count = 0\n        for i in range(len(nums)):\n            if perm[i] > nums[i]:\n                count += 1\n        return count",
  "is_python": true
}