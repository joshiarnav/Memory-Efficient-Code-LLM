{
  "problem_idx": 1144,
  "task_name": "Decrease Elements To Make Array Zigzag",
  "markdown_description": "\nGiven an array `nums` of integers, a *move*\u00a0consists of choosing any element and **decreasing it by 1**.\n\n\nAn array `A` is a\u00a0*zigzag array*\u00a0if either:\n\n\n* Every even-indexed element is greater than adjacent elements, ie.\u00a0`A[0] > A[1] < A[2] > A[3] < A[4] > ...`\n* OR, every odd-indexed element is greater than adjacent elements, ie.\u00a0`A[0] < A[1] > A[2] < A[3] > A[4] < ...`\n\n\nReturn the minimum number of moves to transform the given array `nums` into a zigzag array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 2\n**Explanation:** We can decrease 2 to 0 or 3 to 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [9,6,1,6,2]\n**Output:** 4\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `1 <= nums[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        ans = [0, 0]\n        n = len(nums)\n        for i in range(2):\n            for j in range(i, n, 2):\n                d = 0\n                if j:\n                    d = max(d, nums[j] - nums[j - 1] + 1)\n                if j < n - 1:\n                    d = max(d, nums[j] - nums[j + 1] + 1)\n                ans[i] += d\n        return min(ans)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        ans = [0, 0]\n        n = len(nums)\n        for i in range(2):\n            for j in range(i, n, 2):\n                d = 0\n                if j:\n                    d = max(d, nums[j] - nums[j - 1] + 1)\n                if j < n - 1:\n                    d = max(d, nums[j] - nums[j + 1] + 1)\n                ans[i] += d\n        return min(ans)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(1, 1001), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.movesToMakeZigzag(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.movesToMakeZigzag(nums) == expected_result\n        test_case_generator_results.append(f\"assert solution.movesToMakeZigzag({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.movesToMakeZigzag([247, 715, 940, 906, 318, 801, 110]) == 226\nassert solution.movesToMakeZigzag([701, 985]) == 0\nassert solution.movesToMakeZigzag([701, 155, 328, 694, 951, 588]) == 367\nassert solution.movesToMakeZigzag([994, 589, 286, 409, 778, 661, 343]) == 747\nassert solution.movesToMakeZigzag([549, 993, 342, 353]) == 0\nassert solution.movesToMakeZigzag([226, 901, 39, 516, 268, 246, 115, 474, 222, 846]) == 23\nassert solution.movesToMakeZigzag([228, 473]) == 0\nassert solution.movesToMakeZigzag([158]) == 0\nassert solution.movesToMakeZigzag([816, 763, 366, 36, 541]) == 398\nassert solution.movesToMakeZigzag([55, 964, 460, 138, 600, 834, 993]) == 946\nassert solution.movesToMakeZigzag([300, 48, 391, 155]) == 0\nassert solution.movesToMakeZigzag([737, 472, 621, 271, 365]) == 0\nassert solution.movesToMakeZigzag([735, 211, 447, 131, 250, 751, 53, 977]) == 962\nassert solution.movesToMakeZigzag([302]) == 0\nassert solution.movesToMakeZigzag([941, 177, 112, 423, 336, 36]) == 378\nassert solution.movesToMakeZigzag([599, 705, 992]) == 107\nassert solution.movesToMakeZigzag([118, 727, 497, 362, 685, 12, 198, 235, 118]) == 728\nassert solution.movesToMakeZigzag([579]) == 0\nassert solution.movesToMakeZigzag([435]) == 0\nassert solution.movesToMakeZigzag([363, 803, 235, 550, 77, 261, 903]) == 643\nassert solution.movesToMakeZigzag([246, 712, 239]) == 0\nassert solution.movesToMakeZigzag([691, 626, 67, 704, 686, 533, 665]) == 353\nassert solution.movesToMakeZigzag([572, 452, 668, 665, 851, 358, 397, 328, 239, 783]) == 635\nassert solution.movesToMakeZigzag([66, 671]) == 0\nassert solution.movesToMakeZigzag([275, 357, 944, 482, 397, 239, 1, 666, 410, 138]) == 1020\nassert solution.movesToMakeZigzag([962, 179, 547, 198, 27, 802, 802]) == 948\nassert solution.movesToMakeZigzag([601, 842, 748, 848, 854, 717, 472, 764, 300]) == 138\nassert solution.movesToMakeZigzag([118, 46, 761, 391, 213, 899, 608]) == 789\nassert solution.movesToMakeZigzag([229, 915, 366, 352, 376, 637, 122, 801, 536, 485]) == 92\nassert solution.movesToMakeZigzag([109, 109, 77, 202, 569, 329, 469]) == 159\nassert solution.movesToMakeZigzag([288, 170, 254, 66, 719, 747, 276]) == 472\nassert solution.movesToMakeZigzag([327]) == 0\nassert solution.movesToMakeZigzag([929, 674, 882, 582]) == 0\nassert solution.movesToMakeZigzag([905, 541, 123, 895, 766, 210, 832]) == 1192\nassert solution.movesToMakeZigzag([75, 687, 265, 31]) == 235\nassert solution.movesToMakeZigzag([496]) == 0\nassert solution.movesToMakeZigzag([21, 391, 306, 89, 941]) == 371\nassert solution.movesToMakeZigzag([903]) == 0\nassert solution.movesToMakeZigzag([155]) == 0\nassert solution.movesToMakeZigzag([822, 555, 102]) == 268\nassert solution.movesToMakeZigzag([135, 660, 400, 534, 776]) == 243\nassert solution.movesToMakeZigzag([718, 24, 295, 920, 912, 640, 977, 462, 577, 605]) == 655\nassert solution.movesToMakeZigzag([384, 663, 28, 221, 772, 857, 494, 784, 28, 275]) == 552\nassert solution.movesToMakeZigzag([772]) == 0\nassert solution.movesToMakeZigzag([362, 228]) == 0\nassert solution.movesToMakeZigzag([74, 854, 873, 56, 378, 557, 813, 167, 691]) == 961\nassert solution.movesToMakeZigzag([669, 960]) == 0\nassert solution.movesToMakeZigzag([668, 160, 48, 161, 906, 701, 900, 403, 707, 868]) == 389\nassert solution.movesToMakeZigzag([32, 674, 883, 439, 291, 483, 71, 143, 941]) == 1244\nassert solution.movesToMakeZigzag([238, 582, 489, 291, 923]) == 345\nassert solution.movesToMakeZigzag([303, 566, 18, 101, 748, 477]) == 633\nassert solution.movesToMakeZigzag([671, 990]) == 0\nassert solution.movesToMakeZigzag([587, 59]) == 0\nassert solution.movesToMakeZigzag([451, 410]) == 0\nassert solution.movesToMakeZigzag([992, 111, 214, 98, 573, 772, 756, 771]) == 216\nassert solution.movesToMakeZigzag([312, 2, 867, 309, 972, 823, 465]) == 359\nassert solution.movesToMakeZigzag([753, 481, 727]) == 0\nassert solution.movesToMakeZigzag([968, 413, 440, 200, 889, 472]) == 0\nassert solution.movesToMakeZigzag([708, 304, 405, 514, 332, 957, 693, 554, 588]) == 682\nassert solution.movesToMakeZigzag([310, 481, 43, 189, 662, 541, 397, 48, 329, 187]) == 731\nassert solution.movesToMakeZigzag([259]) == 0\nassert solution.movesToMakeZigzag([994, 483, 414, 234, 319, 63, 104, 654]) == 621\nassert solution.movesToMakeZigzag([543, 437, 273]) == 107\nassert solution.movesToMakeZigzag([375, 612, 460, 549, 937, 951, 848, 103]) == 432\nassert solution.movesToMakeZigzag([980, 338, 465, 521, 855]) == 57\nassert solution.movesToMakeZigzag([472, 652, 686, 366, 585, 813, 661, 994]) == 541\nassert solution.movesToMakeZigzag([675, 801, 333, 418, 56, 820]) == 0\nassert solution.movesToMakeZigzag([846, 524, 345, 798, 392, 324]) == 392\nassert solution.movesToMakeZigzag([215, 104, 328, 613, 751, 542, 183, 493, 993, 960]) == 957\nassert solution.movesToMakeZigzag([606, 629, 572, 645, 64, 949]) == 0\nassert solution.movesToMakeZigzag([65]) == 0\nassert solution.movesToMakeZigzag([473]) == 0\nassert solution.movesToMakeZigzag([163]) == 0\nassert solution.movesToMakeZigzag([165]) == 0\nassert solution.movesToMakeZigzag([578, 738, 858, 418, 398, 56, 346]) == 182\nassert solution.movesToMakeZigzag([828, 655, 554, 44, 989, 58, 724, 471]) == 102\nassert solution.movesToMakeZigzag([176, 440, 605, 898, 674, 300]) == 541\nassert solution.movesToMakeZigzag([771, 827, 667, 874]) == 0\nassert solution.movesToMakeZigzag([604, 663, 49, 140, 169]) == 30\nassert solution.movesToMakeZigzag([655, 247, 751]) == 0\nassert solution.movesToMakeZigzag([563, 873, 123, 721, 819, 529, 750, 177, 506, 137]) == 1235\nassert solution.movesToMakeZigzag([611]) == 0\nassert solution.movesToMakeZigzag([857, 323, 628, 46, 380, 816]) == 437\nassert solution.movesToMakeZigzag([75, 93, 508, 54, 414]) == 19\nassert solution.movesToMakeZigzag([3, 451]) == 0\nassert solution.movesToMakeZigzag([501, 828, 334, 645, 877, 480]) == 398\nassert solution.movesToMakeZigzag([488, 278, 805, 98, 273, 282, 524, 213]) == 10\nassert solution.movesToMakeZigzag([279, 455, 390, 416, 747, 509, 898, 647]) == 204\nassert solution.movesToMakeZigzag([5]) == 0\nassert solution.movesToMakeZigzag([562, 818, 866, 239, 713, 943, 527, 29]) == 674\nassert solution.movesToMakeZigzag([148, 40, 249, 347, 536, 329, 813]) == 99\nassert solution.movesToMakeZigzag([6, 259, 901]) == 254\nassert solution.movesToMakeZigzag([684, 61, 746, 257, 588, 413, 606]) == 0\nassert solution.movesToMakeZigzag([90, 943, 743, 435, 189, 581]) == 309\nassert solution.movesToMakeZigzag([913, 315, 664, 296, 752]) == 0\nassert solution.movesToMakeZigzag([298, 85, 381, 66, 658, 996]) == 339\nassert solution.movesToMakeZigzag([806, 107, 665, 59, 850, 605, 774]) == 0\nassert solution.movesToMakeZigzag([201]) == 0\nassert solution.movesToMakeZigzag([145, 915]) == 0\nassert solution.movesToMakeZigzag([255]) == 0",
  "inefficient_solution": "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        n = len(nums)\n        even = [num for num in nums if i % 2 == 0 for i in range(n)]\n        odd = [num for num in nums if i % 2 != 0 for i in range(n)]\n        even_max_right = [float('-inf')] * n\n        odd_max_right = [float('-inf')] * n\n        for i in range(n - 1, -1, -1):\n            even_max_right[i] = max(even_max_right[i + 1], even[i] - 1)\n            odd_max_right[i] = max(odd_max_right[i + 1], odd[i] - 1)\n        even_moves = 0\n        odd_moves = 0\n        for i in range(n):\n            if i % 2 == 0:\n                if i > 0 and nums[i] <= nums[i - 1]:\n                    even_moves += nums[i - 1] - nums[i] + 1\n                elif i < n - 1 and nums[i] <= nums[i + 1]:\n                    even_moves += nums[i + 1] - nums[i] + 1\n                else:\n                    even_moves += max(0, even_max_right[i] - nums[i] + 1)\n            else:\n                if i > 0 and nums[i] <= nums[i - 1]:\n                    odd_moves += nums[i - 1] - nums[i] + 1\n                elif i < n - 1 and nums[i] <= nums[i + 1]:\n                    odd_moves += nums[i + 1] - nums[i] + 1\n                else:\n                    odd_moves += max(0, odd_max_right[i] - nums[i] + 1)\n        return min(even_moves, odd_moves)",
  "is_python": true
}