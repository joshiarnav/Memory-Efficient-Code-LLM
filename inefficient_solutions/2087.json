{
  "problem_idx": 2087,
  "task_name": "Minimum Cost Homecoming of a Robot in a Grid",
  "markdown_description": "\nThere is an `m x n` grid, where `(0, 0)` is the top-left cell and `(m - 1, n - 1)` is the bottom-right cell. You are given an integer array `startPos` where `startPos = [startrow, startcol]` indicates that **initially**, a **robot** is at the cell `(startrow, startcol)`. You are also given an integer array `homePos` where `homePos = [homerow, homecol]` indicates that its **home** is at the cell `(homerow, homecol)`.\n\n\nThe robot needs to go to its home. It can move one cell in four directions: **left**, **right**, **up**, or **down**, and it can not move outside the boundary. Every move incurs some cost. You are further given two **0-indexed** integer arrays: `rowCosts` of length `m` and `colCosts` of length `n`.\n\n\n* If the robot moves **up** or **down** into a cell whose **row** is `r`, then this move costs `rowCosts[r]`.\n* If the robot moves **left** or **right** into a cell whose **column** is `c`, then this move costs `colCosts[c]`.\n\n\nReturn *the **minimum total cost** for this robot to return home*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2087.Minimum%20Cost%20Homecoming%20of%20a%20Robot%20in%20a%20Grid/images/eg-1.png)\n\n```\n\n**Input:** startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]\n**Output:** 18\n**Explanation:** One optimal path is that:\nStarting from (1, 0)\n-> It goes down to (**2**, 0). This move costs rowCosts[2] = 3.\n-> It goes right to (2, **1**). This move costs colCosts[1] = 2.\n-> It goes right to (2, **2**). This move costs colCosts[2] = 6.\n-> It goes right to (2, **3**). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]\n**Output:** 0\n**Explanation:** The robot is already at its home. Since no moves occur, the total cost is 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == rowCosts.length`\n* `n == colCosts.length`\n* `1 <= m, n <= 105`\n* `0 <= rowCosts[r], colCosts[c] <= 104`\n* `startPos.length == 2`\n* `homePos.length == 2`\n* `0 <= startrow, homerow < m`\n* `0 <= startcol, homecol < n`\n\n\n",
  "canonical_solution": "class Solution:\n    def minCost(\n        self,\n        startPos: List[int],\n        homePos: List[int],\n        rowCosts: List[int],\n        colCosts: List[int],\n    ) -> int:\n        i, j = startPos\n        x, y = homePos\n        ans = 0\n        if i < x:\n            ans += sum(rowCosts[i + 1 : x + 1])\n        else:\n            ans += sum(rowCosts[x:i])\n        if j < y:\n            ans += sum(colCosts[j + 1 : y + 1])\n        else:\n            ans += sum(colCosts[y:j])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minCost(\n        self,\n        startPos: List[int],\n        homePos: List[int],\n        rowCosts: List[int],\n        colCosts: List[int],\n    ) -> int:\n        i, j = startPos\n        x, y = homePos\n        ans = 0\n        if i < x:\n            ans += sum(rowCosts[i + 1 : x + 1])\n        else:\n            ans += sum(rowCosts[x:i])\n        if j < y:\n            ans += sum(colCosts[j + 1 : y + 1])\n        else:\n            ans += sum(colCosts[y:j])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random positions\n    startPos = [random.randint(0, 9), random.randint(0, 9)]\n    homePos = [random.randint(0, 9), random.randint(0, 9)]\n    \n    # Generate random row costs\n    rowCosts = [random.randint(0, 100) for _ in range(10)]\n    \n    # Generate random column costs\n    colCosts = [random.randint(0, 100) for _ in range(10)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCost(startPos, homePos, rowCosts, colCosts)\n\n    return startPos, homePos, rowCosts, colCosts, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        startPos, homePos, rowCosts, colCosts, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCost(startPos, homePos, rowCosts, colCosts) == expected_result\n        print(f\"assert solution.minCost({startPos}, {homePos}, {rowCosts}, {colCosts}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCost({startPos}, {homePos}, {rowCosts}, {colCosts}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minCost([8, 6], [3, 7], [49, 64, 84, 23, 3, 43, 84, 97, 86, 30], [100, 19, 32, 37, 48, 49, 2, 68, 67, 76]) == 318\nassert solution.minCost([3, 5], [5, 8], [38, 37, 62, 79, 75, 98, 81, 52, 18, 98], [60, 8, 58, 95, 82, 40, 78, 41, 8, 48]) == 300\nassert solution.minCost([8, 4], [1, 6], [62, 21, 0, 100, 98, 55, 39, 6, 21, 67], [29, 97, 23, 63, 20, 28, 30, 85, 93, 33]) == 377\nassert solution.minCost([0, 4], [2, 1], [93, 84, 54, 92, 15, 59, 14, 17, 11, 30], [41, 75, 83, 13, 49, 3, 99, 53, 87, 76]) == 309\nassert solution.minCost([0, 9], [7, 3], [42, 4, 14, 2, 13, 83, 97, 59, 81, 46], [43, 88, 2, 15, 49, 39, 63, 87, 64, 36]) == 589\nassert solution.minCost([6, 9], [8, 9], [82, 41, 99, 88, 43, 89, 24, 78, 16, 57], [11, 56, 54, 84, 0, 57, 20, 58, 27, 93]) == 94\nassert solution.minCost([4, 4], [7, 7], [90, 10, 45, 26, 8, 88, 95, 74, 82, 9], [23, 63, 67, 93, 69, 25, 23, 50, 64, 30]) == 355\nassert solution.minCost([3, 9], [3, 2], [92, 29, 67, 83, 95, 96, 19, 22, 42, 69], [67, 85, 28, 83, 26, 38, 46, 6, 79, 11]) == 306\nassert solution.minCost([0, 7], [8, 4], [69, 2, 79, 41, 72, 53, 34, 81, 79, 49], [12, 48, 13, 25, 90, 39, 35, 23, 51, 16]) == 605\nassert solution.minCost([7, 9], [8, 4], [7, 70, 24, 34, 94, 43, 97, 39, 41, 13], [12, 55, 56, 46, 15, 8, 58, 77, 88, 81]) == 287\nassert solution.minCost([3, 6], [1, 3], [74, 86, 50, 61, 57, 51, 1, 87, 66, 66], [32, 6, 69, 96, 41, 5, 60, 43, 51, 16]) == 278\nassert solution.minCost([5, 8], [6, 6], [24, 94, 21, 1, 98, 85, 90, 7, 50, 90], [9, 60, 37, 81, 37, 97, 43, 66, 1, 49]) == 199\nassert solution.minCost([2, 4], [9, 1], [77, 21, 30, 92, 31, 91, 89, 95, 28, 5], [51, 85, 48, 30, 36, 9, 35, 90, 18, 36]) == 594\nassert solution.minCost([0, 7], [5, 9], [11, 83, 70, 83, 4, 71, 53, 7, 67, 61], [23, 42, 91, 16, 32, 31, 70, 75, 42, 95]) == 448\nassert solution.minCost([1, 5], [0, 0], [55, 31, 2, 47, 66, 92, 74, 25, 80, 52], [36, 94, 24, 31, 14, 74, 54, 64, 83, 25]) == 254\nassert solution.minCost([5, 5], [5, 3], [84, 25, 95, 80, 15, 18, 59, 33, 10, 17], [9, 27, 86, 15, 22, 40, 68, 33, 1, 79]) == 37\nassert solution.minCost([6, 9], [1, 4], [29, 19, 53, 67, 75, 61, 36, 58, 2, 90], [74, 52, 3, 94, 41, 43, 93, 49, 39, 29]) == 540\nassert solution.minCost([2, 0], [4, 5], [60, 72, 98, 74, 99, 38, 58, 10, 70, 12], [32, 49, 42, 18, 42, 41, 36, 94, 9, 43]) == 365\nassert solution.minCost([6, 3], [5, 7], [75, 86, 34, 14, 77, 33, 95, 3, 30, 83], [46, 63, 76, 24, 74, 72, 9, 42, 72, 94]) == 230\nassert solution.minCost([6, 8], [3, 4], [6, 43, 12, 80, 11, 90, 51, 44, 9, 96], [91, 52, 92, 40, 30, 43, 10, 47, 26, 68]) == 311\nassert solution.minCost([7, 1], [2, 1], [53, 30, 64, 86, 89, 87, 4, 30, 55, 64], [31, 24, 71, 59, 3, 16, 50, 13, 78, 10]) == 330\nassert solution.minCost([0, 2], [5, 7], [65, 50, 32, 45, 91, 20, 73, 86, 87, 11], [71, 73, 48, 68, 58, 4, 44, 83, 59, 22]) == 495\nassert solution.minCost([2, 1], [2, 5], [29, 99, 62, 28, 21, 87, 27, 36, 80, 52], [62, 89, 98, 47, 55, 1, 100, 62, 70, 37]) == 201\nassert solution.minCost([9, 4], [8, 4], [13, 13, 73, 57, 70, 67, 50, 26, 76, 81], [77, 8, 20, 30, 96, 57, 6, 75, 73, 85]) == 76\nassert solution.minCost([9, 3], [0, 7], [54, 62, 21, 53, 39, 20, 6, 29, 43, 54], [63, 93, 99, 75, 70, 98, 7, 74, 6, 37]) == 576\nassert solution.minCost([2, 0], [9, 7], [10, 80, 15, 13, 30, 69, 12, 83, 92, 64], [84, 86, 48, 68, 22, 31, 91, 85, 87, 80]) == 794\nassert solution.minCost([5, 7], [0, 0], [77, 61, 94, 83, 34, 51, 89, 45, 23, 28], [65, 13, 13, 40, 2, 76, 82, 11, 62, 11]) == 640\nassert solution.minCost([4, 0], [7, 6], [67, 15, 75, 77, 10, 41, 3, 81, 96, 18], [31, 3, 67, 65, 81, 80, 61, 67, 44, 12]) == 482\nassert solution.minCost([4, 5], [8, 9], [36, 21, 47, 19, 77, 58, 69, 56, 2, 21], [19, 78, 27, 6, 53, 17, 17, 60, 6, 44]) == 312\nassert solution.minCost([0, 6], [5, 8], [8, 13, 19, 79, 79, 84, 10, 35, 16, 30], [75, 59, 79, 30, 87, 38, 62, 25, 18, 83]) == 317\nassert solution.minCost([9, 4], [9, 9], [66, 88, 20, 77, 98, 89, 76, 17, 0, 9], [26, 64, 66, 73, 94, 16, 80, 92, 49, 43]) == 280\nassert solution.minCost([3, 3], [1, 5], [58, 17, 88, 77, 34, 4, 77, 15, 42, 78], [33, 70, 12, 73, 85, 82, 22, 13, 58, 89]) == 272\nassert solution.minCost([3, 8], [7, 3], [44, 57, 43, 19, 93, 89, 79, 14, 68, 41], [71, 81, 25, 91, 88, 2, 80, 43, 42, 52]) == 579\nassert solution.minCost([2, 3], [8, 0], [31, 80, 92, 70, 61, 76, 24, 58, 78, 19], [67, 8, 10, 61, 59, 96, 47, 4, 84, 63]) == 452\nassert solution.minCost([9, 8], [6, 4], [76, 16, 16, 91, 61, 32, 78, 71, 72, 62], [78, 7, 75, 3, 70, 29, 83, 71, 9, 9]) == 474\nassert solution.minCost([5, 9], [1, 4], [23, 93, 32, 31, 79, 48, 16, 15, 71, 19], [79, 16, 20, 69, 25, 56, 78, 60, 96, 33]) == 550\nassert solution.minCost([4, 6], [8, 3], [4, 15, 60, 36, 45, 21, 44, 35, 53, 54], [89, 7, 64, 3, 21, 23, 62, 65, 9, 77]) == 200\nassert solution.minCost([8, 7], [8, 6], [100, 8, 91, 100, 4, 80, 68, 79, 90, 16], [82, 29, 24, 14, 87, 97, 78, 99, 43, 65]) == 78\nassert solution.minCost([3, 3], [8, 7], [29, 64, 26, 20, 17, 75, 78, 46, 92, 74], [39, 67, 5, 33, 51, 56, 40, 11, 13, 15]) == 466\nassert solution.minCost([5, 9], [1, 8], [76, 49, 78, 52, 13, 40, 99, 11, 80, 69], [50, 53, 30, 35, 44, 76, 47, 72, 77, 75]) == 269\nassert solution.minCost([5, 5], [5, 9], [67, 93, 29, 15, 98, 14, 29, 90, 84, 44], [55, 31, 64, 89, 60, 96, 74, 79, 17, 9]) == 179\nassert solution.minCost([6, 6], [7, 1], [60, 64, 45, 80, 12, 3, 22, 37, 60, 51], [43, 84, 36, 46, 9, 38, 40, 43, 90, 74]) == 250\nassert solution.minCost([0, 0], [9, 4], [100, 93, 63, 79, 18, 69, 9, 96, 70, 33], [53, 46, 18, 83, 24, 11, 83, 29, 17, 75]) == 701\nassert solution.minCost([3, 9], [7, 5], [25, 87, 42, 100, 69, 3, 31, 14, 36, 57], [22, 85, 50, 85, 22, 5, 54, 84, 17, 73]) == 277\nassert solution.minCost([1, 6], [7, 0], [66, 98, 85, 47, 21, 32, 73, 46, 1, 62], [72, 56, 45, 62, 13, 62, 92, 64, 38, 51]) == 614\nassert solution.minCost([3, 3], [5, 5], [98, 49, 61, 40, 75, 88, 4, 90, 15, 93], [35, 80, 42, 54, 76, 74, 92, 79, 88, 67]) == 313\nassert solution.minCost([0, 6], [3, 1], [30, 65, 39, 83, 62, 74, 63, 56, 97, 40], [7, 50, 38, 95, 35, 11, 14, 85, 82, 21]) == 416\nassert solution.minCost([4, 6], [9, 9], [2, 62, 9, 30, 98, 11, 29, 5, 15, 59], [93, 50, 64, 52, 37, 80, 5, 12, 69, 70]) == 270\nassert solution.minCost([8, 6], [5, 6], [79, 58, 87, 3, 30, 65, 50, 78, 15, 84], [71, 9, 94, 42, 79, 54, 87, 78, 54, 25]) == 193\nassert solution.minCost([4, 7], [2, 1], [53, 62, 88, 40, 92, 55, 75, 15, 38, 86], [34, 67, 67, 97, 43, 62, 70, 5, 19, 2]) == 534\nassert solution.minCost([2, 1], [7, 7], [64, 42, 43, 32, 62, 33, 12, 76, 3, 64], [23, 92, 1, 62, 21, 53, 34, 22, 69, 47]) == 408\nassert solution.minCost([2, 9], [6, 6], [87, 8, 3, 8, 2, 8, 33, 50, 65, 53], [16, 6, 85, 33, 68, 50, 69, 79, 94, 0]) == 293\nassert solution.minCost([4, 8], [9, 3], [68, 51, 35, 30, 87, 21, 17, 21, 19, 26], [90, 82, 0, 60, 16, 82, 32, 96, 28, 28]) == 390\nassert solution.minCost([7, 9], [3, 4], [86, 10, 87, 19, 0, 48, 10, 48, 24, 0], [98, 60, 19, 64, 9, 59, 33, 53, 31, 22]) == 262\nassert solution.minCost([7, 5], [7, 3], [27, 57, 81, 67, 28, 7, 0, 28, 4, 7], [51, 76, 36, 76, 98, 99, 53, 67, 98, 11]) == 174\nassert solution.minCost([4, 9], [1, 4], [39, 75, 76, 90, 44, 68, 66, 71, 51, 33], [44, 30, 22, 48, 71, 62, 96, 15, 30, 52]) == 515\nassert solution.minCost([4, 4], [8, 1], [56, 28, 5, 73, 26, 63, 39, 52, 13, 30], [69, 58, 83, 4, 11, 76, 33, 94, 92, 15]) == 312\nassert solution.minCost([1, 2], [0, 0], [95, 14, 14, 58, 23, 59, 96, 69, 9, 97], [89, 54, 57, 88, 92, 84, 16, 100, 27, 76]) == 238\nassert solution.minCost([7, 0], [2, 9], [54, 27, 88, 94, 18, 58, 47, 40, 69, 52], [94, 70, 33, 68, 38, 65, 73, 63, 64, 75]) == 854\nassert solution.minCost([4, 1], [2, 8], [9, 87, 94, 0, 90, 46, 43, 13, 80, 81], [56, 6, 93, 33, 6, 8, 59, 74, 48, 70]) == 415\nassert solution.minCost([8, 5], [2, 0], [31, 42, 27, 48, 92, 24, 44, 58, 96, 2], [15, 12, 12, 64, 39, 30, 17, 57, 43, 99]) == 435\nassert solution.minCost([3, 4], [0, 4], [51, 97, 61, 72, 16, 20, 5, 10, 36, 69], [99, 36, 97, 13, 58, 54, 14, 17, 23, 70]) == 209\nassert solution.minCost([8, 8], [7, 2], [99, 74, 71, 5, 66, 32, 19, 83, 71, 54], [3, 31, 12, 89, 8, 79, 0, 19, 86, 17]) == 290\nassert solution.minCost([0, 3], [5, 6], [45, 75, 82, 29, 33, 84, 18, 3, 44, 36], [45, 2, 92, 73, 37, 2, 52, 0, 24, 17]) == 394\nassert solution.minCost([9, 7], [9, 9], [13, 34, 49, 26, 29, 43, 46, 56, 81, 25], [48, 84, 4, 67, 69, 95, 21, 0, 0, 54]) == 54\nassert solution.minCost([2, 1], [3, 2], [37, 41, 21, 77, 24, 33, 63, 16, 30, 98], [69, 13, 72, 72, 98, 66, 41, 19, 27, 39]) == 149\nassert solution.minCost([9, 6], [2, 5], [1, 95, 97, 56, 34, 24, 53, 31, 40, 4], [79, 75, 71, 29, 59, 13, 93, 6, 48, 80]) == 348\nassert solution.minCost([6, 1], [6, 3], [57, 27, 62, 34, 2, 39, 7, 69, 53, 51], [95, 7, 47, 100, 34, 80, 74, 40, 41, 77]) == 147\nassert solution.minCost([4, 5], [9, 1], [90, 67, 55, 35, 71, 51, 34, 20, 27, 77], [80, 52, 13, 21, 97, 35, 73, 60, 96, 21]) == 392\nassert solution.minCost([4, 8], [3, 2], [31, 92, 54, 20, 96, 44, 22, 40, 39, 92], [80, 33, 42, 73, 10, 67, 34, 13, 50, 55]) == 259\nassert solution.minCost([8, 4], [0, 0], [89, 92, 25, 74, 19, 100, 83, 5, 90, 71], [52, 26, 98, 45, 3, 68, 26, 79, 95, 75]) == 708\nassert solution.minCost([0, 6], [6, 2], [10, 18, 63, 34, 68, 81, 36, 18, 67, 10], [6, 21, 46, 39, 27, 97, 86, 65, 90, 34]) == 509\nassert solution.minCost([0, 3], [4, 6], [21, 75, 44, 50, 45, 85, 24, 81, 78, 48], [67, 76, 51, 93, 11, 89, 6, 16, 82, 0]) == 320\nassert solution.minCost([3, 4], [6, 2], [89, 76, 80, 34, 91, 37, 62, 79, 19, 74], [1, 89, 57, 92, 67, 39, 12, 45, 97, 90]) == 339\nassert solution.minCost([0, 2], [2, 8], [30, 71, 69, 58, 84, 48, 51, 46, 8, 83], [53, 2, 68, 92, 56, 5, 36, 82, 89, 53]) == 500\nassert solution.minCost([5, 2], [5, 8], [19, 44, 8, 98, 11, 81, 35, 40, 70, 24], [3, 78, 38, 50, 26, 51, 12, 31, 60, 71]) == 230\nassert solution.minCost([7, 8], [9, 2], [2, 45, 5, 14, 47, 70, 1, 13, 49, 39], [55, 21, 84, 27, 8, 8, 98, 89, 90, 52]) == 402\nassert solution.minCost([6, 6], [3, 8], [100, 66, 70, 96, 45, 79, 36, 43, 97, 78], [7, 26, 77, 94, 80, 83, 63, 3, 81, 15]) == 304\nassert solution.minCost([7, 7], [6, 3], [76, 54, 9, 97, 37, 62, 1, 95, 11, 6], [58, 57, 2, 12, 31, 31, 45, 69, 60, 75]) == 120\nassert solution.minCost([8, 3], [9, 6], [60, 70, 45, 35, 76, 95, 82, 31, 39, 40], [4, 42, 25, 49, 12, 44, 95, 23, 42, 85]) == 191\nassert solution.minCost([1, 3], [1, 3], [48, 100, 1, 99, 35, 27, 84, 15, 36, 77], [96, 90, 52, 85, 20, 12, 30, 61, 99, 23]) == 0\nassert solution.minCost([1, 6], [4, 8], [30, 34, 91, 48, 79, 52, 30, 14, 25, 24], [36, 82, 31, 17, 28, 70, 74, 12, 100, 39]) == 330\nassert solution.minCost([0, 8], [6, 5], [25, 91, 51, 18, 60, 57, 7, 7, 68, 57], [7, 44, 76, 69, 20, 21, 76, 98, 68, 71]) == 479\nassert solution.minCost([3, 4], [1, 4], [73, 42, 53, 10, 100, 62, 47, 65, 92, 55], [27, 99, 68, 65, 78, 99, 86, 60, 39, 61]) == 95\nassert solution.minCost([6, 8], [0, 1], [50, 6, 20, 62, 8, 82, 26, 46, 68, 69], [96, 91, 70, 26, 13, 3, 2, 70, 76, 30]) == 503\nassert solution.minCost([3, 0], [9, 7], [88, 49, 90, 15, 84, 6, 7, 79, 27, 48], [86, 85, 36, 70, 40, 50, 61, 5, 60, 92]) == 598\nassert solution.minCost([6, 5], [6, 6], [21, 90, 55, 90, 77, 13, 48, 20, 76, 43], [69, 54, 64, 25, 79, 42, 79, 74, 7, 46]) == 79\nassert solution.minCost([6, 6], [1, 4], [63, 88, 31, 10, 56, 23, 53, 8, 7, 22], [61, 93, 62, 51, 9, 0, 91, 3, 72, 20]) == 217\nassert solution.minCost([8, 9], [5, 5], [36, 21, 33, 30, 9, 31, 41, 27, 25, 71], [94, 95, 17, 16, 65, 68, 84, 74, 44, 45]) == 369\nassert solution.minCost([4, 4], [5, 3], [21, 48, 43, 44, 19, 15, 100, 87, 48, 26], [93, 74, 4, 63, 26, 95, 20, 38, 56, 22]) == 78\nassert solution.minCost([9, 0], [9, 3], [3, 10, 70, 46, 30, 91, 33, 63, 39, 95], [7, 53, 80, 73, 73, 76, 68, 44, 70, 77]) == 206\nassert solution.minCost([3, 7], [5, 5], [90, 72, 89, 25, 9, 42, 65, 78, 91, 56], [87, 1, 29, 45, 64, 81, 26, 17, 46, 74]) == 158\nassert solution.minCost([5, 3], [1, 2], [66, 26, 36, 81, 67, 73, 52, 51, 60, 82], [93, 97, 49, 3, 100, 76, 62, 14, 49, 36]) == 259\nassert solution.minCost([2, 7], [7, 4], [53, 18, 67, 67, 89, 91, 61, 84, 59, 22], [24, 46, 15, 59, 74, 83, 94, 65, 19, 3]) == 643\nassert solution.minCost([6, 0], [2, 2], [5, 98, 29, 11, 41, 88, 17, 63, 93, 53], [40, 57, 61, 39, 24, 63, 80, 17, 80, 72]) == 287\nassert solution.minCost([0, 7], [4, 1], [77, 3, 37, 37, 84, 21, 43, 44, 100, 70], [95, 32, 17, 39, 12, 62, 14, 68, 10, 73]) == 337\nassert solution.minCost([2, 9], [5, 3], [6, 29, 92, 23, 94, 44, 11, 40, 74, 21], [100, 64, 49, 14, 29, 15, 48, 52, 43, 2]) == 362\nassert solution.minCost([5, 6], [8, 9], [38, 65, 52, 64, 79, 81, 83, 17, 14, 77], [69, 38, 12, 12, 67, 50, 50, 51, 47, 41]) == 253\nassert solution.minCost([7, 0], [6, 4], [5, 32, 60, 69, 30, 40, 32, 23, 71, 79], [35, 51, 23, 56, 73, 58, 43, 28, 21, 75]) == 235\nassert solution.minCost([7, 7], [8, 5], [32, 51, 69, 27, 33, 74, 83, 87, 88, 73], [13, 88, 27, 34, 32, 80, 66, 83, 93, 75]) == 234",
  "inefficient_solution": "class Solution:\n    def minCost(\n        self,\n        startPos: List[int],\n        homePos: List[int],\n        rowCosts: List[int],\n        colCosts: List[int],\n    ) -> int:\n        i, j = startPos\n        x, y = homePos\n        ans = 0\n        row_diffs = list(range(i + 1, x + 1)) + list(range(x, i - 1, -1))\n        col_diffs = list(range(j + 1, y + 1)) + list(range(y, j - 1, -1))\n        row_costs = [rowCosts[r] for r in row_diffs]\n        col_costs = [colCosts[c] for c in col_diffs]\n        ans += sum(row_costs)\n        ans += sum(col_costs)\n        return ans",
  "is_python": true
}