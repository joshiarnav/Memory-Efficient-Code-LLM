{
  "problem_idx": 493,
  "task_name": "Reverse Pairs",
  "markdown_description": "\nGiven an integer array `nums`, return *the number of **reverse pairs** in the array*.\n\n\nA **reverse pair** is a pair `(i, j)` where:\n\n\n* `0 <= i < j < nums.length` and\n* `nums[i] > 2 * nums[j]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,3,1]\n**Output:** 2\n**Explanation:** The reverse pairs are:\n(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,4,3,5,1]\n**Output:** 3\n**Explanation:** The reverse pairs are:\n(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1\n(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1\n(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5 * 104`\n* `-231 <= nums[i] <= 231 - 1`\n\n\n",
  "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x > 0:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        s = set()\n        for num in nums:\n            s.add(num)\n            s.add(num * 2)\n        alls = sorted(s)\n        m = {v: i for i, v in enumerate(alls, 1)}\n        ans = 0\n        tree = BinaryIndexedTree(len(m))\n        for num in nums[::-1]:\n            ans += tree.query(m[num] - 1)\n            tree.update(m[num * 2], 1)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def reversePairs(self, nums):\n        s = set()\n        for num in nums:\n            s.add(num)\n            s.add(num * 2)\n        alls = sorted(s)\n        m = {v: i for i, v in enumerate(alls, 1)}\n        ans = 0\n        tree = BinaryIndexedTree(len(m))\n        for num in nums[::-1]:\n            ans += tree.query(m[num] - 1)\n            tree.update(m[num * 2], 1)\n        return ans\n      \nclass BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, delta):\n        while x <= self.n:\n            self.c[x] += delta\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x > 0:\n            s += self.c[x]\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n      \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 10001), random.randint(2, 100))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reversePairs(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reversePairs(nums) == expected_result\n        print(f\"assert solution.reversePairs({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.reversePairs({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.reversePairs([2999, 9333, 2036, 3150, 9883, 634, 5863, 3735]) == 9\nassert solution.reversePairs([3148, 4810, 4271]) == 0\nassert solution.reversePairs([3158, 2407, 3804, 5887, 6286, 2865, 3796, 1514, 4115, 8274, 7916, 8582, 8268, 9522, 3159, 6095, 3663, 4693, 1192, 5534, 9789, 9722, 885, 857, 2352, 5407, 6342, 875, 4292, 6882, 9786, 1876, 8209, 7345, 3626, 595, 4731, 9137, 2737, 3687, 1301, 3105, 7380, 4408, 6453, 7105, 4674, 8419, 3719, 7572, 2162, 8389, 4527, 8128, 4978, 2810, 2232, 8178]) == 355\nassert solution.reversePairs([4957, 565, 2177, 1876, 2785, 608, 5050, 9502, 3789, 639, 4474, 8604, 4853, 3905, 3209, 4522, 3994, 2049, 4695]) == 31\nassert solution.reversePairs([7598, 9455, 8240, 6109, 5064, 889, 512, 5867, 391, 3571, 8397, 4413, 1049, 1488, 5764, 4907, 698, 7175, 198, 1021, 6852, 5926, 4776, 72, 534, 7854, 5054, 5890, 7732, 4712, 2807, 7780, 223, 1512, 373, 2038, 8998, 7529, 9629, 8992, 5590, 6046, 7080, 2568, 7147, 8997, 8990, 5579, 9730, 3293, 867, 7629, 8637, 1199, 3010, 8086, 2530, 3339, 7677, 5225, 2709, 5406, 4002]) == 458\nassert solution.reversePairs([5781, 423, 5733, 5475, 8932, 3206, 3879, 7697, 7603, 8557, 1960, 6978, 9319, 5063, 7748, 4254, 6381, 8563, 4024, 6211, 506, 6083, 2197, 2617, 2008, 4639, 8939, 3480, 6158, 7458, 88, 3784, 8919, 9662, 1468, 3757, 749, 7949, 5786, 8161, 7365, 4696, 9899, 1996, 3860, 8429, 5131, 6654, 3690, 6564, 8273, 2409, 643, 2239, 3631, 6511, 9545, 3655, 7352, 4694, 2889]) == 432\nassert solution.reversePairs([9089, 1613, 7946, 120, 960, 6439, 4514, 3874, 8068, 8715, 9038, 4310, 1909, 1950, 9683, 7353, 89, 9066, 1293, 2266, 3690, 6606, 3991, 4088, 7365, 9130, 8959, 7683, 6468, 546, 1103, 878, 6291, 9257, 4557, 8041, 8653, 3301, 3163, 4901, 648, 7015, 6547, 8566, 2442, 8777]) == 248\nassert solution.reversePairs([8029, 7745, 1077, 524, 4606, 5759, 2061, 7702, 9494, 5232, 4755, 7518, 9809, 8363, 8660, 3194, 5890, 7993, 8532, 3898, 7961, 3839, 1686, 8358, 7529, 3976, 1356, 3022, 7613, 87, 6426, 7675, 5513, 2728, 7781, 4630, 7968, 4362, 4033, 7525]) == 154\nassert solution.reversePairs([7595, 2044, 4197, 5295, 7391, 8091, 5547, 5359, 8783, 4551, 560, 77, 8011, 620, 1683, 5061, 8295, 6044, 4296, 2086, 1666, 606, 3485, 6061, 5333, 3795, 4806, 8027, 7488, 2101, 3839, 9841, 2790, 9753, 7093, 8249, 5203, 1994, 1849, 9989, 1786, 2467, 9049, 8061, 3129, 2041, 2990, 2849, 6687, 9692, 5416, 2512, 2954, 4674]) == 358\nassert solution.reversePairs([2863, 7643, 6912, 6518, 8790, 3466, 368, 5229, 1769, 4604, 6694, 7029, 5025, 8676, 7166, 1918, 8143, 521, 8064, 4638, 679, 4771, 1608, 4175, 669, 9755, 8670, 5545, 1724, 4, 5574, 8377, 3130, 2454, 6041, 1381, 2721, 2092, 6247, 6748, 6428, 2858, 1123, 6182, 6380, 3782, 1132, 392, 2911, 5471, 582, 4663, 108, 3665, 1879, 2378, 9997, 3044, 7823, 8600, 59, 8068, 4954, 5416]) == 624\nassert solution.reversePairs([6705, 4918, 7169, 1316, 8843, 5730, 7280, 7209, 5795, 9698, 2459, 3972, 3801, 3240, 657, 9787, 4092, 8269, 215, 3666, 7104, 8458, 4893, 5345, 9125, 6807, 1907, 9828, 6120, 6983, 3274, 8792, 798, 3359, 2204, 7089, 3979, 9499, 1635, 1032, 578, 7237, 4377, 8398, 975, 8968, 9509, 1037, 1425, 339, 1021, 2753, 9075, 583, 4982, 443, 8858, 6847, 124, 2070, 4161, 61, 3847, 1580, 9002, 8303, 8723, 109, 6233, 8264, 4886, 3169, 2797, 5510, 4315, 6132, 2991, 1498, 1115, 8730, 3214, 3920, 9715, 8186, 5185, 8188, 9511]) == 1128\nassert solution.reversePairs([3474, 562, 7622, 4749, 5427, 9186, 2105, 2150, 6577, 8568, 6999, 9332, 7223, 1979, 1174, 6455, 5395, 6942, 9008, 4041, 5188, 2850, 8129, 1930, 8742, 4618]) == 59\nassert solution.reversePairs([8245, 8854, 6914, 2500, 3067, 6575, 6072, 465, 835, 2063, 7174, 2195, 8364, 6851, 9212, 7699, 6326, 8204, 9465, 4556, 5968, 6355, 1644, 1842, 999, 4698, 8341, 9299, 3896, 3707, 5484, 7207, 7864, 6962, 8199, 1967, 6982, 217, 4562, 5575, 5462, 6872, 4150, 1743, 9969, 1373, 208, 4761, 8745, 9996]) == 285\nassert solution.reversePairs([7291, 1624, 7971, 6669, 3492, 9638, 9764, 308, 9752, 861, 9765, 3481, 5734, 8377, 953, 8853, 9043, 2715, 2916, 962, 5977, 8847, 749, 5948, 2672, 2045, 3731, 9899, 5952, 4822, 579, 7641, 4977, 7139, 6300, 7696, 369, 7621, 4506, 2184, 3011, 7209, 3683, 4455, 7340, 8393, 7489, 17, 8337, 501, 9944, 4696, 3997, 178, 5662, 3632, 3711, 2604, 8815, 837, 5803, 8385]) == 523\nassert solution.reversePairs([3764, 3115, 6059, 1174, 6949, 115, 4461, 3174, 1306, 6567, 9878, 3271, 2023, 5242, 5615, 2411, 1906, 8582, 9480, 2833, 4293, 2280, 9570, 1420, 3677, 5764, 5293, 5878, 2737, 628, 3261, 542, 331, 1006, 6888, 3358, 9465, 6684, 1997, 2994, 281, 65, 7328, 7888, 714, 2042, 3681, 807, 8900, 4447, 3712, 9541, 4016, 1189, 7897, 3207, 5197, 7676, 5007, 4617, 4119, 1154, 3245, 8576, 7439, 4232, 8361, 1270, 9328, 9101, 8827, 7763, 8241, 143, 7032, 8430]) == 666\nassert solution.reversePairs([3093, 4341, 9724, 3103, 158, 767, 2740, 1226, 9706, 6355, 8864, 4827, 1852, 96, 1469, 7159, 3786, 672, 3184, 8282, 797, 6024, 119, 6188, 8566, 2327, 4799, 8259, 5466]) == 109\nassert solution.reversePairs([4250, 3896, 8484, 559, 390, 2366, 3906, 1414, 4485, 1381, 6018, 8011, 2179, 3183, 1109, 336, 4938, 62, 7926, 1312, 8728, 4980, 3263, 7192, 116, 1988, 1556, 5008, 6176, 6579, 7729, 4083, 1792, 3116, 3287, 8279, 3885, 2375, 5362, 9524, 8439, 8312, 7650, 5082, 9714, 888, 4718, 8253, 3031, 321, 4899, 9621, 6642, 1635, 3556, 9493, 9938, 3302, 7423, 7306, 2103, 8324, 6825, 9450, 8133, 8865, 6789, 4022, 8014, 3598, 4675, 5300, 262, 6683, 6390, 4585, 4502, 5378, 4694, 9344, 5558, 8089, 6676, 4439, 4442, 2477, 2168]) == 598\nassert solution.reversePairs([7819, 6071, 4887, 1822, 3358, 2969, 7398, 3321, 9476, 4296]) == 9\nassert solution.reversePairs([742, 995, 1457, 4143, 8890, 6760, 6754, 5800, 6955, 1211, 4107, 2129, 295, 6963, 5381, 7156, 6430, 1760, 3713, 8276, 8436, 203, 8387, 6735, 1704, 9475, 5484, 338, 1331, 1258, 1465, 3835]) == 156\nassert solution.reversePairs([9107, 993, 441, 6986, 9170, 8187]) == 3\nassert solution.reversePairs([5825, 1293, 2240, 4694, 5069, 7864, 4031, 4700, 953, 8268, 6551, 6123, 8098, 5271, 207, 6483, 1398, 7389, 3996, 6820, 1490, 548, 4043, 6277, 4177, 2486, 4381, 9567, 7561, 982, 1301, 7833, 1122, 2906, 6027, 2276, 4441, 9886, 5845, 2204, 7392, 4334, 126, 9371, 4261, 9956, 4767, 3215, 1313, 1415, 7697, 88, 4957, 5855, 3438, 5262]) == 399\nassert solution.reversePairs([5090, 5938, 2797, 1059, 7326, 766, 2163, 3736, 954, 3524, 7494, 2005, 6473, 7993, 6764, 7403, 1685, 9758, 6686, 2422, 5654, 9849, 2976, 7024, 1870, 8682, 5001, 3974, 4424, 2087, 7387, 2783, 5680, 8990, 8082, 1726, 9828, 297, 8099, 7250, 4282, 1619, 5145, 8680, 5768, 2790, 6277, 5223, 4572, 7505, 7400, 326, 5254, 7694, 8257, 5079]) == 267\nassert solution.reversePairs([3746, 7203, 8475, 2840, 6177, 3570, 4770, 6567, 737, 1704, 1032, 5368, 1282, 2942, 6047, 6450, 2033, 6242, 2995, 4100, 1935, 8871, 6316, 1205, 2758, 8013, 3217, 8610, 3144, 2713, 7715, 2421, 4653, 4271, 9143, 924, 710, 2654, 3464, 3931, 6887, 6554, 633, 2195, 4068, 8991, 8101, 4253, 9438, 4000, 6472, 4265, 3158, 4234, 2674]) == 336\nassert solution.reversePairs([7419, 1077, 1514, 2506, 7983, 2273, 8771, 1858, 9863, 4421, 4477, 4541, 3021, 4209, 2468, 9457, 8623, 5297, 1926, 2442, 1446, 159, 5448, 5770, 5944, 6567, 7381, 4093, 6206, 6675, 291, 8250, 7600, 8830, 6778, 7311, 8542, 3179, 9062, 1012, 9157, 5405, 5916, 322, 1254, 2959, 601, 5077, 8365, 1159, 6447, 123, 3585, 8865, 1615, 7908, 1245, 6714, 5271, 4063, 8753, 4942, 9958, 41, 4526, 406, 8294, 8834, 9445, 1775, 6907, 1488, 9560, 55, 9467, 4229, 8963, 3040, 4436, 5943, 2590, 4587, 9162, 5645, 9578, 6979, 8838, 4478, 7252, 1618, 2619, 9869, 9326, 9955, 8372, 6408]) == 981\nassert solution.reversePairs([4415, 1846, 9855, 9780, 380, 7816, 3263, 7969, 2825, 3660, 4695, 7596, 7135, 251]) == 30\nassert solution.reversePairs([4514, 1802, 9320, 8733, 9633, 8624]) == 1\nassert solution.reversePairs([4167, 9283, 1535, 3712, 9768, 1244, 5179, 2541, 3677, 1452, 6061, 9437, 6641, 7096, 4401, 7436, 4173, 3784, 7556, 2979, 7687, 8312, 1901, 3383, 6734, 7490, 3561, 6278, 8546, 6380, 779, 1649, 5506, 6309, 8464, 2322, 6484, 6214, 7877, 2303, 2035, 1040, 4573, 1524, 1518, 2220, 3852, 2170, 4909, 8771, 9639, 8684, 3142, 6294, 7894, 4964, 6738, 8762, 4315, 2841, 9548]) == 389\nassert solution.reversePairs([6369, 2100, 412, 7619, 6981, 8493, 3461, 7527, 6542, 2790, 9586, 8308, 1032, 9912, 4834, 6176, 5316, 9092, 9104, 6267, 7504, 4430, 9947, 7493, 4688, 8903, 6051, 9051, 8738, 9150, 7097, 1865, 7160, 1079, 9774, 1718, 2105, 225, 5782, 6526, 5389, 4067, 2937, 9985, 469, 3411, 9867, 3362, 2017, 8585, 2993, 463, 8207, 9075, 4513, 1921, 1421, 4038, 7748, 5019, 9639, 394, 9547, 806, 4850, 5494, 2472, 4760]) == 681\nassert solution.reversePairs([2181, 6598, 82, 4442, 3556, 3810, 7125, 3934, 8212, 4782, 5769, 3186, 1503, 8136, 2533, 4045, 3317, 8714, 5076, 3100, 7133, 6461, 7771, 1810, 767, 8543, 3760, 6049, 9607, 4161, 1284, 4481, 2082, 6108, 7587, 3250, 3048, 6199, 5346, 7112, 2626, 3039, 5835, 8979, 6126, 8942, 8121, 6984, 936, 6560, 6056, 5958, 2779, 6482, 867, 5365, 7396, 1121, 423, 409, 7558, 7798, 5888, 5526, 3266, 9244, 9463, 6638, 1576, 1319, 2425, 1169, 1372]) == 717\nassert solution.reversePairs([3969, 5149, 4854, 6875, 7228, 7952, 5841, 3419, 9177, 1261, 9827, 5294, 7311, 22, 4308, 9577, 281, 9931, 9218, 9157, 6158, 1133, 3596, 3330, 6765, 4776, 6698, 3509, 9781, 5469, 9392, 9829, 642, 2730, 2830, 9910, 9329, 5620, 884, 3730, 7157, 4335, 7841, 9702, 5642, 8692, 3025, 9326, 1860, 3637, 7830, 5872, 73]) == 335\nassert solution.reversePairs([1068, 2845, 775, 8646, 90, 3389, 3092, 4167, 1832, 249, 7430, 4218, 3598, 3954, 9364, 9310, 6790, 4603, 9233, 9158, 1826, 8024, 4273, 8120, 2053, 2334, 7790, 6244, 9437, 5041, 8219, 3634, 4523, 8097, 2263, 236, 1256, 2686, 7002, 6871, 5266, 4973, 4530, 2413, 602, 6324, 711, 67, 2687, 6271, 2913, 5418, 1046, 5238, 491, 6477, 6853, 3965, 2830, 999, 5281]) == 513\nassert solution.reversePairs([6802, 1805, 2229, 439, 1925, 4918, 2377, 1648, 4764, 464, 219, 580, 6153, 6167, 4467, 2847, 9713, 5244, 4086, 2499, 5678, 7665, 7439, 8472, 1432, 1356, 9491, 9325, 3651, 9375, 9885, 6340, 4771, 3422, 7289, 9122, 9405, 3736, 1520, 3105, 6748, 155, 1307, 5540, 8512, 9705, 3824, 9471, 1715, 8549, 2183, 7647, 2345]) == 298\nassert solution.reversePairs([2470, 4057, 6280, 459, 5362, 8989, 8667, 2199, 1523, 733, 7762, 8247, 2497, 3096, 7699, 4739, 1449, 7137, 7192, 9613, 8910, 6824, 2905, 9094, 571, 7111]) == 74\nassert solution.reversePairs([5109, 9139, 7362, 1569, 7175, 6355, 4675, 4584, 4747, 1194, 6184, 8405, 353, 8330, 2102, 6414, 3500, 4082, 2597, 9585, 5316, 4804, 7441, 965, 3155, 8036, 1934, 9947, 5449, 7100, 9153, 1750, 6655, 2137, 4940, 3998, 8892, 5016, 4055, 3160, 6147, 5167, 5536, 2918, 2412, 8390, 1180, 9607, 1136, 6232, 5192, 1509, 6762, 9870, 635, 5883, 9146, 1394, 4730, 9708, 8420, 9806, 2082, 6819, 8134, 8990, 536, 9477, 3198, 1916, 6596, 7887, 5174, 2761, 2163, 135, 174]) == 830\nassert solution.reversePairs([4937, 3033, 886, 4188, 2014, 3928, 9265, 9070, 7495, 9174, 6504, 1980, 9595, 4026, 5343, 8653, 2330, 2177, 3300, 6773, 8736, 3710, 2437, 4138, 4163, 3944, 3395, 1742, 6224, 1404, 9938, 2596, 5876, 5432, 5142, 8606, 9029, 256, 1909, 4769, 3907, 1984, 6895, 3457, 7237, 9920, 4980, 1002, 2579, 4151, 2993]) == 324\nassert solution.reversePairs([9217, 8325, 2098, 177, 261, 154, 1881, 5559, 6405, 9715, 9285, 1446, 1926, 8241, 5650, 7825, 5234, 5828, 4709, 9371, 9842, 8598, 4922, 7843, 8944, 926, 3071, 2587, 1974, 6949, 8313, 5125, 4924, 4578, 5481, 9159, 1570, 9945, 7419, 4237, 1147, 8296, 1795, 8102, 8100, 8904, 3225, 5814, 7838, 9504, 3074, 2657, 2114, 4536, 6603, 2345, 363, 5502, 972, 2245, 2458, 7656, 9825, 6094, 9953, 6989, 2433, 6575, 7954, 8681, 5842, 7031, 1836, 3730, 9727, 2865, 6049, 5588, 7644, 905, 152, 5583, 5217, 2620]) == 850\nassert solution.reversePairs([6225, 8333, 3687, 337]) == 4\nassert solution.reversePairs([8234, 8620, 4777, 7743, 9502, 3586, 8874, 4952, 3486, 3400, 2090, 6466, 7352, 7392, 646, 724, 3619, 4356, 8624, 7391, 7975, 9156, 2128, 6452, 7842]) == 73\nassert solution.reversePairs([5287, 8625, 3677, 196, 9100, 3225, 7536, 2205, 5805, 3448, 3039, 4099, 739, 9947, 311, 1078, 5508, 7139, 9697, 6100, 7638, 7586, 4365, 1662, 8056, 1628, 5435, 6396, 8073, 3154, 3245, 4740, 4796, 9144, 2043, 5229, 2429, 4957, 2248, 6723, 6072, 6787, 9112, 2458, 8396, 623, 2822, 8446, 330, 9350, 9163, 3381, 8362, 3962, 8276, 1145, 3925, 6378, 4665, 9041, 214, 1366, 5825, 6691, 9247, 3877, 9762, 6222, 4076, 3919, 6165, 4255]) == 557\nassert solution.reversePairs([2012, 6474, 7992, 5410, 9066, 3556, 4492, 4655, 6827, 7216, 1617, 1103, 2514, 7756, 8082, 9061, 3898, 5956, 1666, 2976, 1323, 9152, 1215, 5038, 7135, 8470, 8530, 8100, 7541, 6977, 6471, 6898, 6344, 5203, 8695, 8952, 4774, 368, 4108, 4738, 5986, 2007, 4676, 9638, 3878, 1872, 1905, 2705, 7087, 4656, 3091, 2206, 6217, 4176, 5695, 6, 703, 2172, 9063, 2408, 6067, 7418, 6696, 9653, 4324, 6757, 1890]) == 551\nassert solution.reversePairs([5011, 5981, 3791, 6068, 8490, 5382, 3074, 375, 9535, 9709, 9580, 2667, 469, 7206, 4196, 2172, 108, 3494, 5387, 2020, 931, 2056, 5942, 4707, 8468, 9585, 7573, 1598, 9965, 593, 5032, 5055, 7518, 1659, 1483, 9474, 9789, 7881, 7612, 9551, 1188, 9946, 9665, 6762, 7292, 1706, 2580, 6038, 3782, 9235, 8870, 4193, 532, 3235, 3294, 4530, 1969, 5477, 2113, 1881, 2455, 9819, 1662, 4138, 2151, 6386, 5723, 2171, 3341, 2460, 8732, 5634, 6460, 4225, 761, 5703, 340, 7588, 7023, 2079, 9586, 5922, 5338, 6255, 8174, 1797]) == 969\nassert solution.reversePairs([2024, 32, 3412, 3871, 7288]) == 1\nassert solution.reversePairs([8600, 4947, 505, 1630, 4575, 8736]) == 4\nassert solution.reversePairs([9897, 5524, 47, 9277, 1993, 280, 4752, 9602, 8484, 1285, 2457, 5396, 4692, 4975, 1271, 776, 52, 8225, 658, 4848, 9822, 3599, 2100, 1623, 7769, 6368, 1304, 396, 4291, 7027, 7660, 7168, 8462, 2549, 3430, 475, 6130, 689, 542, 7400, 7249, 1064, 2403, 2664, 9992, 5498, 7179]) == 316\nassert solution.reversePairs([6324, 2965, 9979, 3340, 2539, 461, 444, 7947, 2660, 8999, 6065, 340, 4449, 9972, 9628, 1312, 7771, 5599, 7622, 1022, 4351, 7776, 9866, 9062, 5276, 9164, 1402, 2147, 8291, 9133, 8897, 2902, 2220, 7366, 5015, 5865, 9668, 97, 5172, 7682, 4655, 486, 786, 1390, 2516]) == 295\nassert solution.reversePairs([5414, 257, 5587, 9307, 5104, 5850, 5975, 1113, 7260, 6393, 6094, 261, 6549, 4122, 6323, 6447, 9574, 1513, 9779, 8774, 3883, 1559, 7659, 9147, 5593, 3387, 6062, 6533, 1203, 7196, 8131, 8918, 6809, 3534, 5402, 5616, 140, 6857, 1032, 3247, 6489, 1668, 1085, 9084, 9509, 4896, 6313, 2771, 6748, 9247, 8877, 2999, 320, 9641, 1759, 519, 1014]) == 472\nassert solution.reversePairs([6271, 2435, 13, 7256, 7250, 135, 3639, 5386, 3041, 758, 3681, 9200, 2655, 5976, 5941, 7312, 4136, 5074, 1541, 3683, 7570, 3807, 4974, 4515, 2992, 6097, 7508, 1063, 3926, 5527, 1811, 8601, 1292, 6102, 3086, 9846, 7456, 6501, 3696, 9452, 4772, 1138, 7857, 650, 2257, 4146]) == 227\nassert solution.reversePairs([6649, 9839, 992, 7280, 8775, 5510, 1272, 987]) == 12\nassert solution.reversePairs([392, 7287, 8299, 7413, 8855, 2154, 7106, 1815, 6583, 6924, 1151, 866, 6944, 7116, 1340, 8606, 5841, 1092, 6741, 4921, 8591, 6935, 7021, 3281, 7242, 5298, 9086, 9625, 7065, 247, 6287, 7880, 634, 6228, 7017, 8829, 1334, 6734, 2006, 5706, 7648, 465, 884, 5194, 2030, 5474, 7025, 9170]) == 268\nassert solution.reversePairs([9934, 8887, 3344, 2862, 2855, 2984, 6682, 1608, 6647, 2238]) == 16\nassert solution.reversePairs([2222, 6911, 6134, 2829, 7832, 3722, 9559, 2072, 2123, 2084, 2010, 840, 9875, 7858, 6502, 8224, 7345, 6402, 7957, 1730, 9704, 4330, 5333, 3966, 9718, 8829, 142, 3948, 1509, 6013, 3904, 2315, 1488, 8142, 1241, 5811, 6167, 6768, 7688, 9343, 8545, 4131, 1729, 65, 3401, 6898, 7624, 1435, 2720, 9065, 2752, 4321, 2572, 5329, 2331, 2728, 1480, 6881, 9054, 8810, 4989, 5398, 9101, 9024, 2392, 3474, 8125, 5876, 455, 4620, 9863, 369, 536, 1811, 5400, 8546, 7740, 6136, 5648, 3545, 8434, 2410, 7831, 8876, 1998, 1148, 963, 5182, 8283, 7082, 7929]) == 1022\nassert solution.reversePairs([8678, 720, 7014, 2578, 1976, 9851, 6911, 5093, 319, 5061, 8791, 4606, 4778, 8301, 6232, 1111, 8393, 3065, 3349, 2354, 3780, 4709, 9299, 4918, 8366, 3579, 527, 9255, 9451, 6590, 9585, 2096, 1281, 1130, 9983, 9533, 8403, 3103, 6250, 7070, 4745, 9327, 33, 6312, 89, 8751, 2763, 4130]) == 305\nassert solution.reversePairs([3698, 8077, 3759, 9154, 7780, 7459, 7977, 2285, 1143, 7453, 110, 6200, 1791, 4136, 9067, 6294, 8534, 9966, 3199, 7262, 5842, 5606, 5389, 7416, 1903, 5317, 274, 8254, 2077, 4200, 9905, 260, 2032, 1223, 9779, 5286]) == 180\nassert solution.reversePairs([1555, 1246, 6963, 5537, 5344, 8667, 3586, 4743, 6544, 7538, 214, 1527]) == 19\nassert solution.reversePairs([6585, 3523, 2534, 9320, 6601, 1389, 7768, 4428, 2394, 6302, 1013, 9602, 6072, 4358, 6215, 6275, 2211, 3800, 1695, 963, 4346, 2229, 2007, 5048, 2480, 1904, 5117, 4262, 3436, 8963, 6862, 3300, 6633, 8926, 3142, 5469, 5879, 8755, 4790, 3295, 9927, 4024, 3066, 4392, 644, 3261, 4137, 479, 2913, 3394, 4373, 3847, 647, 657, 56, 4260, 6656, 8225, 967, 5595, 7766, 1467, 1087, 8928, 9855, 3817, 518, 5811, 4750, 3812, 1480, 6351, 7719, 8137, 4251, 7361]) == 743\nassert solution.reversePairs([4607, 2576, 2994, 1039, 9030, 1267, 3887, 1731, 9227, 5714, 5381, 9779, 2030, 4720, 7237, 2099, 3659, 1350, 6402, 1501, 7427, 2554, 6217, 9953, 3299, 3219, 4624, 4628, 9678, 621, 571, 3331, 8884, 9071, 6585, 1047, 4205, 5677, 7085, 9366, 2112, 6222, 3094, 494, 8066, 8744, 2392, 5151, 2974, 4138, 8514, 3019, 5803, 2475, 2539, 7024, 3037, 8500]) == 378\nassert solution.reversePairs([5062, 7699, 992, 5449, 6910, 5113, 898, 4017, 3235, 146]) == 18\nassert solution.reversePairs([2653, 6689, 914, 4355, 8489, 2054, 4609, 4412, 6389, 7486, 1795, 5214, 3454, 6863, 792, 70, 8131, 1362, 4986, 5279, 4366, 2160, 3614, 7012]) == 69\nassert solution.reversePairs([1678, 4633, 956, 1271, 9894, 8450, 534, 7038, 6814, 951, 460, 2529, 9674, 1907, 9514, 8366, 4674, 6110, 6732, 1476, 7439, 599, 6618, 2677, 6195, 6576, 6813, 5132, 8995, 4034, 209, 7359, 1973, 945, 4654, 6086, 7984, 3499, 7406, 8506, 8242, 3423, 5738, 5345, 6177, 9788, 9409, 9370, 8316, 4605, 2212, 4021, 9079, 3420, 3514, 4496]) == 274\nassert solution.reversePairs([7078, 2806]) == 1\nassert solution.reversePairs([7798, 4513, 2687, 655, 7326, 8701, 1661, 3853, 9755, 806, 1293, 3968, 7280, 3599, 843, 4745, 7138, 4877, 4850, 8202, 1498, 3474, 516, 7554, 872, 5177, 1654, 5774, 8781, 7721, 2718, 7919, 3266, 6726]) == 141\nassert solution.reversePairs([3111, 3133, 6344, 5275, 7085, 720, 5765, 1677, 4328, 3967, 3124, 8918, 658, 5705, 1238, 79, 3155, 6948, 4291, 2596, 3073, 7563, 3135, 684, 2034, 6002, 5422, 5237, 2613, 3194, 9240, 8926, 3973, 9956, 9713, 6109, 8932, 4939, 6801, 8190, 2652, 5301, 1037, 2165, 3964, 4976, 1940, 8384, 3388, 1859, 3139, 6589, 9261, 4103, 6420, 4931, 420, 4487, 210, 9468]) == 398\nassert solution.reversePairs([6507, 4723, 2969, 1683, 5656, 5770, 6142, 9027, 6316, 7163, 4364, 1036, 2561, 2362, 7023, 7132, 2532, 8578, 7391, 7899, 8281, 4405, 1999, 1648, 2477, 4348, 2592, 8970]) == 97\nassert solution.reversePairs([3098, 3974, 9113, 5418, 5904, 640, 3735, 6002, 9012, 4282, 6346, 6842, 6007, 1666, 3414, 1787, 7848, 4075, 4502, 208, 7678, 5930, 9681, 1621, 2779]) == 85\nassert solution.reversePairs([1083, 4159, 7507, 178, 4653, 2201, 6178, 8459, 6709, 6882, 718, 3280, 433, 5365, 5026, 7038, 7870, 6277, 5616, 532, 6537, 1249, 4375, 5650, 2699, 3758, 8286, 5241, 2591, 9116, 7740, 9716, 668, 5124, 4425, 5829, 8275, 6463, 5476, 9030, 6278, 6206, 7169, 6638, 4654, 2525, 3014, 4006, 6782, 1592, 111, 2994, 9161, 8309, 737, 2384, 8636, 2948, 9654, 344, 2025, 2483, 7654, 7970, 7240, 1924, 5564, 7789, 5600, 4295, 8955, 5502, 3745, 5308, 6884, 2472, 1983, 8080, 6869, 5456, 6102, 3915, 3431, 7165, 7353, 8779, 9688, 1717, 5100, 7722, 6018, 5595]) == 757\nassert solution.reversePairs([6624, 635, 9867, 7843, 8012, 1673, 8695, 7453, 9443, 2985, 7574, 3568, 4829, 3104, 7583, 8561, 895, 384, 3033, 1771, 6664, 6587, 511, 5300, 6882, 8995, 458, 607, 6742, 2243, 4853, 8910, 3139, 2339, 6818, 9176, 4540, 7834, 6309, 8474, 4994, 1014, 3297, 1140, 6926, 2916, 1992, 6485, 6020, 3555, 6115, 3181, 244, 9664, 870, 1343, 5603, 5677, 3536, 8115, 5072, 4927, 2108, 7796, 2255, 8581, 16, 4804, 9604, 2860, 3102, 1763, 817, 7778, 2696, 7172, 1407, 6556, 6896, 8301, 9678, 3256, 7133, 7559, 334, 3729, 9623, 2557, 226, 7742, 7281, 8874, 1862]) == 1218\nassert solution.reversePairs([1696, 8054, 1630, 8515, 6998, 9930, 5238, 9322, 4522, 6795, 3073, 6773, 9482, 6798, 4306, 9737, 2912, 1084, 4090, 4791, 1881, 7837, 2000, 3532, 1088, 5655, 692, 9430, 3247, 7946, 6102, 3290, 3031, 4386, 6088, 5269, 7188, 1719, 8328, 8400, 9179, 5882, 7820, 9165, 6818, 8837, 4464, 6305, 9626, 1609, 1752, 8108, 6912, 7538, 6402, 633, 6862, 3141, 9525, 1078, 1303, 568, 7428, 8742, 5391, 5388, 8449, 3962, 4403, 3994, 3798, 8541, 8959, 3396, 1166, 6291, 1710, 571]) == 788\nassert solution.reversePairs([5013, 8272, 3951, 4902, 6617, 2322, 5195, 6016, 6621, 1118, 6644, 3624, 6687, 2885, 7248, 9151, 1361, 4601, 3800, 4583, 3405, 5218, 8123, 7807, 1785, 6100, 9164, 5006, 7313, 3529, 2574, 6223, 2210]) == 102\nassert solution.reversePairs([4634, 2994, 7408, 3338, 863, 9095, 2049, 5256, 2975, 235, 3435, 4790, 9718, 8823, 1678, 6959, 1207, 8057, 6299, 5063, 8321, 3878, 6757, 15, 4705, 355, 5342, 5776, 5745, 3010, 8579, 688, 3458, 2006, 1380, 9532, 3426, 7247, 7627, 9190, 1593, 3691, 3721, 6990, 1825, 29, 1760, 7554]) == 330\nassert solution.reversePairs([2514, 6698, 5259, 5094, 6326, 8370, 4032, 5379, 1040, 6141, 9332, 9727, 7944, 1134, 7940, 1498, 2197, 6648, 8568, 386, 2981, 3261, 5401, 8318, 1044, 774, 1335, 9496, 5346, 1516, 5157, 2031, 9835, 6956, 2226, 4707, 6982, 5295, 2921, 8682, 6941, 4615, 2317, 2175, 9331, 4594, 4600, 1518, 2359, 1649, 8696, 187, 3969, 2495, 1285, 2792, 8980]) == 508\nassert solution.reversePairs([3948, 3449, 6178, 9975, 2163, 2712, 1148, 188, 8959, 5489, 5819, 5866, 5561, 2233, 5036, 9213, 7350, 9852, 4447, 2433, 1461, 3596, 8619, 6975, 1745, 9364, 577, 1207, 3294, 3694, 5759, 5157, 6942, 5127, 8107, 9705, 9236, 9795, 494, 9188]) == 167\nassert solution.reversePairs([7010, 4415, 3411, 2204, 1014, 2313, 1621, 1056, 5294, 8386, 2384, 8195, 3948, 8057, 6194, 6446, 359, 2930, 2521]) == 50\nassert solution.reversePairs([8641, 5139, 6890, 7663, 7901, 6244, 2720, 1627, 4561, 2188, 5411, 8494, 4916, 9500, 6947, 2367, 4881, 5429, 6744, 4355, 8384, 8841, 7728, 4551, 9546, 4334, 5816, 5968, 599, 8102, 7256, 8095, 9699, 4210, 7318]) == 68\nassert solution.reversePairs([1644, 6396, 3299, 6636, 6211, 6976, 2608, 4180, 913, 3950, 1008, 2539, 4004, 8760, 6312, 3193, 1068]) == 40\nassert solution.reversePairs([737, 1392, 8365, 5829, 203, 3954, 4298]) == 5\nassert solution.reversePairs([1334, 5470, 1807, 1064, 5878, 3344, 7627, 9327, 6007, 3210, 7999, 3729, 6422, 1263, 5901, 5182, 6051, 7644, 6347, 7331, 8399, 5336, 4490, 1754, 6196, 986, 7871, 8645, 243, 8827, 8932, 9172, 1035, 3866, 5501, 2072, 5309, 7514, 2095, 9161, 687]) == 198\nassert solution.reversePairs([7437, 7924, 6303, 1265, 7932, 975, 4525, 4780, 7599, 4591, 5206, 7204, 8637, 1706, 2518, 3289, 7339, 9908, 2544, 9759]) == 42\nassert solution.reversePairs([9289, 2817, 176, 7209, 3363, 9842, 8978, 8508, 66, 368, 1513, 5005, 4810, 9675, 6449, 1907, 2207, 8801]) == 45\nassert solution.reversePairs([7759, 4013, 4539, 4621, 7653, 1378, 2378, 1441, 1928, 1317, 981, 3747, 3174, 5771, 759, 4061, 6230, 8241, 5115]) == 42\nassert solution.reversePairs([6115, 2070, 5855, 3115, 8680, 8615, 6749, 5834, 9663, 1762, 4033, 8266, 6185, 4199, 7000, 3074, 4935, 5036, 1940, 2490, 4627, 8207, 1126, 6782, 3654, 4274, 6112, 7137, 8453, 1464, 7677, 6364, 6632, 2276, 1608, 2637, 2670, 20, 7004, 5050, 8654, 4742]) == 218\nassert solution.reversePairs([7611, 7742, 8956, 8531, 3007, 2415, 1453, 2193, 4237, 4413, 6946, 2170, 7737, 7846, 5447, 1124, 7887, 2471, 9658, 1604, 2812, 269, 660, 8802, 539, 2967, 3653, 5462, 5983, 3505, 1170, 5551, 6421, 4549, 8296, 34, 2922, 3409, 1380, 9607, 3806, 4329, 5291, 3457, 4460, 8483, 4632, 4188, 504, 1491, 5600, 1935, 3246, 9435, 6499, 8173, 5612, 7131, 4234, 2338, 7936, 7013, 3132, 5185, 6903, 2498, 9115, 5702, 8673, 9137, 7521, 9729, 3377, 1262, 6124, 9899, 3323, 1501, 5167, 4785, 1717, 9577, 256, 8218]) == 794\nassert solution.reversePairs([198, 5212, 970, 256, 1740, 6774, 9507, 2978, 2338, 1, 6567, 7481, 6906, 8825, 9390, 426, 6725, 7433, 6235, 4676, 3821, 1042, 9499, 1695, 1602, 7657, 743, 8165, 9210, 9199, 7635, 5037, 942, 704, 668, 4874, 1062, 4070, 5872, 820, 9771, 5380, 401]) == 262\nassert solution.reversePairs([8699, 3087, 4780, 716, 1206, 629, 7180, 3182, 9256, 8510, 57, 125, 9720, 7950, 1980, 4950, 7454, 5765, 4728, 7640, 5100, 1191, 8046, 1807, 605, 3010, 4719, 2734, 3977, 5618, 2868, 6385, 4490, 4781, 3831, 5476, 8992, 7559, 4297, 8030, 7723, 6314, 190, 4385, 2826, 7960, 565, 1469, 6975, 1780, 7340, 2249, 1479, 19, 6194]) == 413\nassert solution.reversePairs([4970, 4498, 1786, 1035, 3830, 2716, 7094, 9911, 6392, 930, 5735, 4935, 9016, 417, 2180, 1699, 3284, 8368, 2730, 6865, 3574, 8705, 9541, 255, 5797, 8299, 4606, 9944, 797, 4546, 7925, 5370, 1388, 1812, 10, 5564, 2093, 8383, 1407, 7193, 5351, 7373, 6067, 2751, 3914, 3624, 9576, 3110, 3616, 317, 7945, 3658, 8757, 2235, 7303, 9558, 2742, 7729, 9973, 1330, 7240, 5159, 3494, 2153, 221, 8729, 1097, 2855, 4565, 2513, 1421, 6822, 3174, 6249, 3661, 8306, 1102, 6728, 8369, 2986, 8888, 7409, 3587, 6031]) == 863\nassert solution.reversePairs([6918, 6218, 6977, 5032, 6491, 3455, 8798, 2712, 738, 8803, 9826, 2972, 6673, 8290, 7152, 3345, 9268, 5717, 8955, 2294, 8675, 266, 7133, 5137, 6587, 8415, 8992, 2835, 2579, 7754, 2627, 2455, 4971, 4807, 6048, 3834, 5529, 7728, 392, 5238, 5756, 558, 1094, 6105, 3263, 4756, 8297, 8919, 6582, 5042, 9949, 3355, 4048, 3807, 2, 68, 3858, 2380, 5086, 6492, 6978, 854, 2212, 6246, 133, 2823, 1072, 5139, 2618, 4199, 9632, 2374, 7663, 5759, 2554, 3195, 3531, 1427, 269, 3510, 5231, 644, 5733, 4919, 9960, 7462, 4911, 3420, 25, 935]) == 1290\nassert solution.reversePairs([1655, 8280, 2702, 2972, 7287, 9020, 2888, 4137, 6143, 2118, 2451, 7467, 2231, 9443, 2732, 6861, 3510, 5615, 8169, 9, 9053, 3760, 501, 5853, 7564, 1749, 8332, 8736, 7124, 1358, 5121, 5253, 664, 2688, 6928, 6066, 9344, 190, 5516, 2030, 8689, 3425, 424, 4668, 8954, 8814, 5200, 5241, 1892, 3979, 1482, 606, 907, 2269, 9017, 972, 7210, 739, 8038, 7792, 9224, 5379, 2664, 6910, 5603, 1257, 8832, 9472, 1662, 7457, 5123, 8869, 2184, 3242, 7614, 7246, 892, 5527, 5954, 5177, 7491, 1872, 2002, 427, 4936, 3565, 3454, 2555, 9981]) == 1064\nassert solution.reversePairs([1082, 3796, 59, 5239, 7595, 7222, 7347, 4290, 3465, 3290, 4665, 834, 3737, 3468, 3967, 8454, 2145, 2002, 2804, 6307, 5191, 5698, 5318, 2629, 6031, 3535, 7306, 9750, 9276, 1468, 5635, 1239, 5081, 5749, 362, 9518, 9912, 2275, 1933, 7118, 4563, 8981, 4436, 6220, 3527, 9698, 6826, 4053, 4898, 229, 5097, 7879, 5313, 9209, 2011, 1686, 3541, 3106, 3204, 1572, 9993, 7004, 9548, 2151, 2123, 1526, 7594, 4966, 3113, 3571, 7661, 8016, 3459, 6645, 6694, 937, 8998, 4014, 3024, 5215, 5746, 193, 4504, 3280, 9459, 4129, 7198]) == 803\nassert solution.reversePairs([6554, 2688, 378, 9772, 5282, 1905, 7930, 5812, 3823, 1881, 3907, 2478, 1632, 8, 6902, 3669, 1244, 9814, 7257, 9478, 7752, 6383, 8560, 5549, 1906, 8063, 4156, 2909, 5152, 3885, 4372, 6859, 1840, 9073, 7548, 5093, 2606, 8546, 9937, 9404, 6819, 3295, 9562, 5406, 4489, 1496, 4092, 9805, 6930, 7886, 2765, 5367, 9553, 8592, 8320, 6000, 4182, 5148, 5845, 1675, 8029, 5370, 9913, 9376, 5464, 6268, 5989, 1056, 2937, 7350, 6082, 7271, 1309, 7770, 6412, 9941, 9078, 9549, 8518, 616, 8007, 2880, 4658, 3413, 7372, 5734, 5010, 7621, 785, 3814, 4004, 9254, 8803, 9206, 5887, 5987, 8369, 1261]) == 796\nassert solution.reversePairs([3729, 9450, 2700, 9149, 9839, 5558, 2918, 9304, 1396, 2738, 563, 8540, 7813, 2148, 2395, 7265, 7245, 1875, 148, 7971, 4232, 9046, 2783, 4919, 2785, 8576, 5328, 5885, 750, 7876, 319, 9785, 4793, 9307, 4311, 336, 2287, 1880, 330, 8207, 9615, 3833, 9431, 8321, 1499, 5895, 6092, 4928, 7408, 6994, 3483, 7179, 4008, 3704, 126, 9663, 949, 964, 9409, 9860, 8697]) == 494\nassert solution.reversePairs([5232, 7566, 2185, 4469, 9532, 6294, 8000, 3465, 9211, 3005, 8438, 6172, 6729, 233, 6994, 3369, 9871, 1021, 5322, 4414, 8834, 6441, 3633, 7983, 4408, 3116, 528, 7954, 8185, 6754, 6324, 3463, 4493, 4432, 8601, 5225, 2730, 5201, 3044, 1479, 6862, 3483, 8471, 8340, 4670, 971, 2350, 2236, 5484, 170, 9004, 7865, 6375, 42, 3685, 7621, 7934, 983, 5857, 4720, 5832, 7462, 7116, 7230, 7472, 9060, 3254, 1264, 6739, 7996, 4506, 2489, 2457, 1747, 6885, 8240, 1361, 3537, 2288, 9470, 4345, 9685, 6612, 6042, 4181, 7045, 4258, 8248, 2755, 610]) == 954\nassert solution.reversePairs([2493, 9681, 5520, 7009, 7712, 6420, 2781, 7737, 3375, 2944, 4018, 7649, 1786, 8843, 8799, 6023, 4674, 7261, 4159]) == 26\nassert solution.reversePairs([4855, 8495, 3436, 5690, 3379, 1992, 4173, 1687, 3022, 4370, 741, 3449, 6269, 1705, 9580, 57, 6257, 6011, 7882, 2702, 6844, 6980, 4758, 9411, 4162, 1641, 1973, 6035, 6811, 6512, 1704, 472, 7572, 6118, 3279, 7155, 911, 4127, 8651, 798, 6622, 6513, 6721, 5025, 2546, 1306, 2784, 1755, 7093, 8899, 954, 9983, 1, 99, 3011, 1934, 2198, 2599, 7473, 5928, 522, 5082, 977, 6539, 4853, 4811, 9778, 3853, 5737, 7276, 3023, 7756, 7980, 9455, 9883, 9979, 2950, 5624, 1162, 7892, 406]) == 852\nassert solution.reversePairs([6739, 7112, 139, 5801, 9858, 2614, 9759, 6080, 5969, 6741, 2272, 7100, 8622, 6885, 7012, 7593, 4992, 5157, 2862, 8893, 9988, 8084, 4696, 4507, 3973, 1535, 9515, 9043, 4798, 3374, 6673, 8678, 961, 9804, 9480, 8086, 9871, 2357, 536, 1147, 9506, 7505, 4646, 9658, 6930, 4919, 6702, 7374, 9763, 9508, 7964, 9692, 4820, 2543, 9084, 2876, 3783, 8842, 4001, 7349, 3451, 2312, 5508, 1020, 7, 315, 6259, 7988, 5160, 7650, 2433]) == 635\nassert solution.reversePairs([3572, 5449, 1913, 6805, 6524, 3331, 295, 3863, 9957, 3392, 7087, 8925, 9775, 5281, 4760, 5526, 1968, 6487, 6013, 6316, 7892, 4405, 1554, 9987, 4609, 8225, 3909, 929, 1021, 3063, 9331, 9984, 2846, 8160]) == 126\nassert solution.reversePairs([2502, 7326, 1114, 631, 1132, 9915, 4150, 596, 6413, 6733, 3077, 6289, 3891, 633, 8251, 3657, 8602, 7446, 1663, 4956, 3050, 1503, 4085, 7471]) == 65\nassert solution.reversePairs([265, 6420, 1560, 5623, 7192, 9551, 4568, 2786, 8918, 5400, 1647, 4184, 9240, 3942, 6833, 5441, 3380, 6876, 2449, 3918, 7014, 1030, 8601, 6484, 6315, 8033]) == 54\nassert solution.reversePairs([2421, 3910, 3234, 5806, 6295, 5422, 8514, 7987, 7113, 2644, 7351, 523, 3787, 3719, 1808, 7883, 5137, 8286, 6531, 3861, 3418, 942, 171, 5222, 635, 7194, 5514, 2907, 4583, 3343, 9025, 1934, 1402, 9880, 7073, 6497, 6004, 4051, 702, 3223, 18, 6868, 4843, 3648, 6562, 876, 4266, 6819, 1227, 3772, 9708, 6470, 3882, 1659, 917, 1039, 457, 5061]) == 519\nassert solution.reversePairs([1569, 6182, 8219, 4054, 1486, 9592, 406, 3450, 2405, 1409, 4131, 2286, 1166, 878, 1682, 7400, 8063, 819, 6480, 6563, 4390, 7761, 9396, 2826, 6059, 5349, 8008, 6364, 5217, 5155, 9429, 3772, 2597, 4494, 5149, 496, 854]) == 150\nassert solution.reversePairs([8687, 3723, 7889]) == 1\nassert solution.reversePairs([99, 1021, 1623, 739, 6637, 70, 8198, 7671, 4474, 6717, 1863, 3929, 9305, 9580, 8107, 928, 6560, 1351, 713, 319, 4698, 5333, 6726, 7801, 6123, 7798, 4056]) == 64",
  "inefficient_solution": "class Solution:\n    def reversePairs(self, nums: List[int]) -> int:\n        nums_list = list(nums)\n        nums_set = set(nums)\n        nums_list_set = set(nums_list)\n        nums_set_list = list(nums_set)\n        nums_list_set_list = list(nums_list_set)\n        nums_set_list_set = set(nums_set_list)\n        nums_list_set_list_set = set(nums_list_set_list)\n        alls = sorted(nums_set_list_set)\n        m = {v: i for i, v in enumerate(alls, 1)}\n        ans = 0\n        tree = []\n        for num in range(len(nums_list)):\n            tree.append([])\n            for i in range(len(nums_list_set_list_set)):\n                tree[num].append(0)\n        for num in nums_list:\n            ans += self.query(tree, num, m)\n            self.update(tree, m[num * 2], num, 1)\n        return ans\n\n    def query(self, tree, x, m):\n        s = 0\n        num = len(tree) - 1\n        while num >= 0:\n            for i in range(len(tree[num])):\n                if tree[num][i] < m[x]:\n                    s += tree[num][i]\n            num -= 1\n        return s\n\n    def update(self, tree, x, num, delta):\n        num = len(tree) - 1\n        while num >= 0:\n            for i in range(len(tree[num])):\n                if tree[num][i] <= x:\n                    tree[num][i] += delta\n            num -= 1",
  "is_python": true
}