{
  "problem_idx": 2941,
  "task_name": "Maximum GCD",
  "markdown_description": "\nYou are given an array of integers `nums` and an integer `k`.\n\n\nThe **gcd-sum** of an array `a` is calculated as follows:\n\n\n* Let `s` be the sum of all the elements of `a`.\n* Let `g` be the **greatest common divisor** of all the elements of `a`.\n* The gcd-sum of `a` is equal to `s * g`.\n\n\nReturn *the **maximum gcd-sum** of a subarray of* `nums` *with at least* `k` *elements.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,1,4,4,4,2], k = 2\n**Output:** 48\n**Explanation:** We take the subarray [4,4,4], the gcd-sum of this array is 4 * (4 + 4 + 4) = 48.\nIt can be shown that we can not select any other subarray with a gcd-sum greater than 48.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [7,3,9,4], k = 1\n**Output:** 81\n**Explanation:** We take the subarray [9], the gcd-sum of this array is 9 * 9 = 81.\nIt can be shown that we can not select any other subarray with a gcd-sum greater than 81.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `1 <= nums[i] <= 106`\n* `1 <= k <= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxGcdSum(self, nums: List[int], k: int) -> int:\n        s = list(accumulate(nums, initial=0))\n        f = []\n        ans = 0\n        for i, v in enumerate(nums):\n            g = []\n            for j, x in f:\n                y = gcd(x, v)\n                if not g or g[-1][1] != y:\n                    g.append((j, y))\n            f = g\n            f.append((i, v))\n            for j, x in f:\n                if i - j + 1 >= k:\n                    ans = max(ans, (s[i + 1] - s[j]) * x)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom math import gcd\nfrom itertools import accumulate\nfrom typing import List\n\nclass Solution:\n    def maxGcdSum(self, nums: List[int], k: int) -> int:\n        s = list(accumulate(nums, initial=0))\n        f = []\n        ans = 0\n        for i, v in enumerate(nums):\n            g = []\n            for j, x in f:\n                y = gcd(x, v)\n                if not g or g[-1][1] != y:\n                    g.append((j, y))\n            f = g\n            f.append((i, v))\n            for j, x in f:\n                if i - j + 1 >= k:\n                    ans = max(ans, (s[i + 1] - s[j]) * x)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 10**6 + 1), random.randint(2, 10))\n    \n    # Generate a random value for k\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxGcdSum(nums, k)\n\n    return nums, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxGcdSum(nums, k) == expected_result\n        print(f\"assert solution.maxGcdSum({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxGcdSum({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxGcdSum([394691, 14713, 294856, 672082, 441789, 264317], 5) == 2082448\nassert solution.maxGcdSum([318679, 322478, 685171, 502920], 1) == 469459299241\nassert solution.maxGcdSum([257097, 874583], 2) == 1131680\nassert solution.maxGcdSum([343889, 860719], 2) == 1204608\nassert solution.maxGcdSum([48820, 587872, 614274, 186465, 340897, 337355, 459312, 430940, 307938, 429351], 3) == 3743224\nassert solution.maxGcdSum([217227, 973928, 91753, 179808, 765907, 314014, 748317], 2) == 3290954\nassert solution.maxGcdSum([188696, 785652, 711667, 721531, 542634, 328416, 421237, 635234], 2) == 5226300\nassert solution.maxGcdSum([97103, 353748, 244344, 630568, 578515, 663931, 30874, 875653, 781290], 9) == 4256026\nassert solution.maxGcdSum([451691, 513634, 428731, 624914, 428388, 805971], 6) == 3253329\nassert solution.maxGcdSum([993855, 546858, 833461, 902642, 882433, 722530], 5) == 4881779\nassert solution.maxGcdSum([715100, 515656, 370540, 224179, 552057, 593733, 314874], 3) == 6405184\nassert solution.maxGcdSum([366174, 506546, 850411], 3) == 1723131\nassert solution.maxGcdSum([534036, 565001], 1) == 319226130001\nassert solution.maxGcdSum([684748, 389518, 129488, 643489, 101927, 300151, 392012, 690859, 661683, 956318], 2) == 17798011\nassert solution.maxGcdSum([797624, 146793, 581870, 565705, 938981], 4) == 3030973\nassert solution.maxGcdSum([913523, 405823, 176984, 641475], 1) == 834524271529\nassert solution.maxGcdSum([352301, 877819, 2038, 546051, 528907, 270835, 456606, 987486], 2) == 8664552\nassert solution.maxGcdSum([62028, 63243, 931504, 675275, 936300, 701135], 4) == 3369485\nassert solution.maxGcdSum([119721, 740753, 657172, 997762, 7935, 917594, 818431, 545413, 310845], 8) == 5115626\nassert solution.maxGcdSum([815258, 485267, 622940, 861328, 707314, 254470, 554766, 825327, 534189, 856672], 7) == 6517531\nassert solution.maxGcdSum([306415, 392671, 412262, 547869, 268064, 716446], 3) == 2643727\nassert solution.maxGcdSum([694071, 113571, 291062, 409561, 312737], 2) == 7268778\nassert solution.maxGcdSum([763896, 902102, 614694], 2) == 4561384\nassert solution.maxGcdSum([277004, 783257, 250671, 806449, 218239, 61869], 4) == 2397489\nassert solution.maxGcdSum([322562, 112227, 665861, 141428, 596011, 335600, 903843, 113426, 378425], 4) == 3569383\nassert solution.maxGcdSum([550156, 238005, 801493, 655496, 233543, 653687, 855434, 309946, 835144, 580981], 2) == 5713885\nassert solution.maxGcdSum([882418, 940444, 401415, 790092, 587930, 538560, 98943, 772530], 5) == 5012332\nassert solution.maxGcdSum([74924, 247959, 778035, 902330, 985813], 1) == 971827270969\nassert solution.maxGcdSum([686779, 560276, 981213, 478555, 304478], 4) == 3011301\nassert solution.maxGcdSum([340209, 54300, 733773, 180077, 35912, 3230, 917116, 492027], 4) == 2756644\nassert solution.maxGcdSum([432098, 720708, 47812], 1) == 519420021264\nassert solution.maxGcdSum([686423, 436013, 42485, 713334, 472893, 186222, 510210, 64053, 982634, 647092], 2) == 5840136\nassert solution.maxGcdSum([557377, 32055, 921948, 750465, 221090, 59410, 109819, 513451, 389502, 798102], 8) == 4353219\nassert solution.maxGcdSum([594548, 693993, 905920, 564666], 1) == 820691046400\nassert solution.maxGcdSum([579587, 244354, 393252, 516197, 239270, 545558, 688204, 869091, 858355], 2) == 4933868\nassert solution.maxGcdSum([658524, 647035, 409081, 54527, 832073], 2) == 9752600\nassert solution.maxGcdSum([453147, 68922, 782637, 152223, 174651], 4) == 4894740\nassert solution.maxGcdSum([692958, 288695, 960743, 402176, 50350, 241933, 188568], 2) == 2825423\nassert solution.maxGcdSum([986213, 229099, 505925, 799659, 474643, 214922, 240076, 259776], 1) == 972616081369\nassert solution.maxGcdSum([92171, 939095, 651523, 608917, 407859, 550976, 779076], 5) == 4029617\nassert solution.maxGcdSum([950943, 672775, 948170], 2) == 8104725\nassert solution.maxGcdSum([133592, 483107, 960700, 953215], 3) == 2530614\nassert solution.maxGcdSum([163203, 665111, 255413, 59039, 563213, 284566], 2) == 1990545\nassert solution.maxGcdSum([294754, 884582, 325966, 957355, 406226, 228079], 1) == 916528596025\nassert solution.maxGcdSum([480762, 470283], 1) == 231132100644\nassert solution.maxGcdSum([337786, 794676, 898844, 939976, 472214, 312261, 231339], 4) == 6886992\nassert solution.maxGcdSum([841446, 991561, 391025, 191045, 275527, 823287, 758006], 3) == 4271897\nassert solution.maxGcdSum([408822, 80005, 468079, 12000, 979047], 3) == 1947953\nassert solution.maxGcdSum([176739, 27453, 360830, 976266, 602626, 108129, 26819, 353875, 654057, 858289], 6) == 4145083\nassert solution.maxGcdSum([701933, 835763, 884389, 358119, 162818, 523201], 4) == 3466223\nassert solution.maxGcdSum([108772, 113304, 906096, 878016], 2) == 85637376\nassert solution.maxGcdSum([570730, 924668, 898479, 204555], 4) == 2598432\nassert solution.maxGcdSum([556364, 700787, 713794, 832483, 349173, 972905, 756282, 931801, 559821, 742698], 4) == 7116108\nassert solution.maxGcdSum([111983, 194708, 371207, 762850, 706376], 5) == 2147124\nassert solution.maxGcdSum([385698, 472016, 261141, 952638], 4) == 2071493\nassert solution.maxGcdSum([353521, 101302, 683703, 999535, 391829, 843557, 292256, 715570], 8) == 4381273\nassert solution.maxGcdSum([815685, 44726, 948584, 757549], 4) == 2566544\nassert solution.maxGcdSum([663064, 472712, 435937, 900626, 968497, 623800, 148366, 839648, 777037], 9) == 5829687\nassert solution.maxGcdSum([179271, 202290, 206871, 813579, 890253, 608805, 279151, 787143], 7) == 3967363\nassert solution.maxGcdSum([337263, 980852, 888975, 935441, 831813, 643966], 5) == 4618310\nassert solution.maxGcdSum([938967, 806929, 495379, 425083, 810111, 700888, 906373, 117733], 8) == 5201463\nassert solution.maxGcdSum([91040, 377504, 366664, 56939, 53984], 5) == 946131\nassert solution.maxGcdSum([50917, 759537, 141538, 57362, 882833, 466557, 354929], 4) == 2713673\nassert solution.maxGcdSum([957548, 752728, 799426], 2) == 6841104\nassert solution.maxGcdSum([352899, 106555, 129590, 734188, 6780, 244891, 779550, 104063, 421078], 9) == 2879594\nassert solution.maxGcdSum([936266, 398505, 790713, 362038, 48294, 560623, 779421, 699037], 8) == 4574897\nassert solution.maxGcdSum([266398, 823109, 12650, 554742, 771378, 181539, 648426, 686659, 888709], 1) == 789803686681\nassert solution.maxGcdSum([524644, 516376, 407687, 10213, 828017, 416675], 5) == 2703612\nassert solution.maxGcdSum([313223, 265523, 931647, 43430, 392302, 993177, 583139], 6) == 3522441\nassert solution.maxGcdSum([515741, 943414, 779407, 782723, 567929, 229518, 269083, 524157], 8) == 4611972\nassert solution.maxGcdSum([246034, 375478, 773226, 240458, 743422, 895426, 306759], 1) == 801787721476\nassert solution.maxGcdSum([258284, 525067, 301491, 367965, 122881, 637751, 430415, 650782, 885282, 131733], 2) == 6025104\nassert solution.maxGcdSum([727353, 664332, 688859, 348787, 333564, 692410, 380864, 308925], 6) == 4145094\nassert solution.maxGcdSum([769464, 799548, 685287, 311223, 373078, 291229, 226573, 253201, 130850], 5) == 3840453\nassert solution.maxGcdSum([202568, 247236, 238907, 665585, 75947, 145802, 730413, 848937, 901509, 509899], 6) == 4566803\nassert solution.maxGcdSum([800677, 361389, 553124, 398938, 810264, 742841], 6) == 3667233\nassert solution.maxGcdSum([616998, 298400, 718917, 804087, 681402, 201531, 588160, 811871], 7) == 4721366\nassert solution.maxGcdSum([333878, 807931, 450887, 228169, 714660, 279572, 669216, 425820], 4) == 8357072\nassert solution.maxGcdSum([279584, 20058, 183268], 2) == 965820\nassert solution.maxGcdSum([854411, 374691, 799647, 533718, 5408], 5) == 2567875\nassert solution.maxGcdSum([379744, 872573], 1) == 761383640329\nassert solution.maxGcdSum([543705, 653050, 221074, 68238, 84400, 717384, 166891], 3) == 3488292\nassert solution.maxGcdSum([194648, 406373, 527094, 456720], 4) == 1584835\nassert solution.maxGcdSum([403770, 597965, 931308, 620108, 149914, 806983, 259443, 718316, 766997, 161796], 5) == 5416600\nassert solution.maxGcdSum([904142, 218890, 349016, 786013, 737033, 383587, 547733], 6) == 3926414\nassert solution.maxGcdSum([908345, 555128, 572999, 308762, 922665, 341743, 660001, 590589, 806036], 4) == 5666268\nassert solution.maxGcdSum([143707, 457418], 2) == 601125\nassert solution.maxGcdSum([898149, 24279, 761319, 751751, 676227], 2) == 19669910\nassert solution.maxGcdSum([97800, 680769, 966913, 249250, 368130, 109319, 909501], 1) == 934920749569\nassert solution.maxGcdSum([434692, 833177, 567258, 661777, 381058, 967052, 858429, 427803], 4) == 5131246\nassert solution.maxGcdSum([34210, 580789, 556971, 350154, 560142, 405150, 502929], 5) == 7126038\nassert solution.maxGcdSum([114855, 980485, 930813, 474508, 723231, 159161], 2) == 5476700\nassert solution.maxGcdSum([563704, 913040, 162326, 111354, 834696, 616740, 485164, 921090, 109361], 7) == 9216228\nassert solution.maxGcdSum([782760, 59745, 352163], 1) == 612713217600\nassert solution.maxGcdSum([604582, 386541, 261661], 3) == 1252784\nassert solution.maxGcdSum([559493, 573207, 342556, 665703, 819512, 114850], 2) == 3075321\nassert solution.maxGcdSum([563061, 704952, 220910, 18103, 122105, 461664], 1) == 496957322304\nassert solution.maxGcdSum([244611, 469170, 482991, 994260, 284924, 56280, 218444, 478050, 4519, 681463], 3) == 6573096\nassert solution.maxGcdSum([776117, 535657, 535355], 2) == 1847129\nassert solution.maxGcdSum([279661, 944798, 194952, 649394, 878365, 643987, 702461, 757146, 819013], 2) == 20490067",
  "inefficient_solution": "import math\nfrom typing import List\n\nclass Solution:\n    def maxGcdSum(self, nums: List[int], k: int) -> int:\n        s = [0] * len(nums)\n        for i, v in enumerate(nums):\n            s[i] = sum(nums[:i+1])\n        f = [None] * len(nums)\n        for i in range(len(nums)):\n            g = []\n            for j in range(i):\n                x = f[j]\n                if x is not None:\n                    y = math.gcd(x[1], nums[i])\n                    if not g or g[-1][1] != y:\n                        g.append((j, y))\n            f[i] = (i, nums[i])\n            for j in range(i+1):\n                if f[j] is not None and j - f[j][0] + 1 >= k:\n                    ans = max(ans, s[i+1] - s[j] + (s[i+1] - s[j]) * f[j][1] // math.gcd(s[i+1] - s[j], f[j][1]))\n        return ans",
  "is_python": true
}