{
  "problem_idx": 912,
  "task_name": "Sort an Array",
  "markdown_description": "\nGiven an array of integers `nums`, sort the array in ascending order and return it.\n\n\nYou must solve the problem **without using any built-in** functions in `O(nlog(n))` time complexity and with the smallest space complexity possible.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,2,3,1]\n**Output:** [1,2,3,5]\n**Explanation:** After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [5,1,1,2,0,0]\n**Output:** [0,0,1,1,2,5]\n**Explanation:** Note that the values of nums are not necessairly unique.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5 * 104`\n* `-5 * 104 <= nums[i] <= 5 * 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def quick_sort(l, r):\n            if l >= r:\n                return\n            x = nums[randint(l, r)]\n            i, j, k = l - 1, r + 1, l\n            while k < j:\n                if nums[k] < x:\n                    nums[i + 1], nums[k] = nums[k], nums[i + 1]\n                    i, k = i + 1, k + 1\n                elif nums[k] > x:\n                    j -= 1\n                    nums[j], nums[k] = nums[k], nums[j]\n                else:\n                    k = k + 1\n            quick_sort(l, i)\n            quick_sort(j, r)\n\n        quick_sort(0, len(nums) - 1)\n        return nums\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        def quick_sort(l, r):\n            if l >= r:\n                return\n            x = nums[random.randint(l, r)]\n            i, j, k = l - 1, r + 1, l\n            while k < j:\n                if nums[k] < x:\n                    nums[i + 1], nums[k] = nums[k], nums[i + 1]\n                    i, k = i + 1, k + 1\n                elif nums[k] > x:\n                    j -= 1\n                    nums[j], nums[k] = nums[k], nums[j]\n                else:\n                    k = k + 1\n            quick_sort(l, i)\n            quick_sort(j, r)\n\n        quick_sort(0, len(nums) - 1)\n        return nums\n\ndef generate_test_case():\n    solution = Solution()\n    \n    nums = random.sample(range(-50000, 50001), random.randint(1, 10))\n    \n    expected_result = sorted(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sortArray(nums) == expected_result\n        print(f\"assert solution.sortArray({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.sortArray({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sortArray([-45279, 2410, 30915, 41889, 49082]) == [-45279, 2410, 30915, 41889, 49082]\nassert solution.sortArray([-44887, -32354, -5460, -2780, 39963]) == [-44887, -32354, -5460, -2780, 39963]\nassert solution.sortArray([11101, 35960]) == [11101, 35960]\nassert solution.sortArray([-37565, -8171, -4611, 34233]) == [-37565, -8171, -4611, 34233]\nassert solution.sortArray([-48868, -46331, -23543, -20584, -18466, -11283, -11214, 13219, 16992, 20051]) == [-48868, -46331, -23543, -20584, -18466, -11283, -11214, 13219, 16992, 20051]\nassert solution.sortArray([-3369, 24628]) == [-3369, 24628]\nassert solution.sortArray([-26857]) == [-26857]\nassert solution.sortArray([-48026, -44142, 23506, 32416, 40301]) == [-48026, -44142, 23506, 32416, 40301]\nassert solution.sortArray([-47324, -39022, -25292, -10271, 5180, 42350, 43100, 46152]) == [-47324, -39022, -25292, -10271, 5180, 42350, 43100, 46152]\nassert solution.sortArray([-26101, -10154, 13989]) == [-26101, -10154, 13989]\nassert solution.sortArray([-7165, -3344]) == [-7165, -3344]\nassert solution.sortArray([-36163, -28610, 2603, 48834]) == [-36163, -28610, 2603, 48834]\nassert solution.sortArray([-29180, -19752, 20339, 31382, 34903]) == [-29180, -19752, 20339, 31382, 34903]\nassert solution.sortArray([-38559]) == [-38559]\nassert solution.sortArray([-28043, -1881]) == [-28043, -1881]\nassert solution.sortArray([-21680, -20230, 3646, 17867, 20519, 23033, 23156, 42859]) == [-21680, -20230, 3646, 17867, 20519, 23033, 23156, 42859]\nassert solution.sortArray([-32833, -14766]) == [-32833, -14766]\nassert solution.sortArray([-27214, -13720]) == [-27214, -13720]\nassert solution.sortArray([-45778, -42378, 16620, 17263, 17634, 22554, 27691, 32474, 49508, 49957]) == [-45778, -42378, 16620, 17263, 17634, 22554, 27691, 32474, 49508, 49957]\nassert solution.sortArray([-41709, -39109, -19583, -2282, 959, 24177, 32900]) == [-41709, -39109, -19583, -2282, 959, 24177, 32900]\nassert solution.sortArray([-15298, -10626, -8684, 778, 1996, 15624, 32488, 36892, 42051, 44828]) == [-15298, -10626, -8684, 778, 1996, 15624, 32488, 36892, 42051, 44828]\nassert solution.sortArray([-45169, -19519, 38394]) == [-45169, -19519, 38394]\nassert solution.sortArray([-46366, -16690, -7858, -5094, 13693, 21156, 29865, 42016, 46762]) == [-46366, -16690, -7858, -5094, 13693, 21156, 29865, 42016, 46762]\nassert solution.sortArray([-48668, -30990, 5627, 6080, 27564]) == [-48668, -30990, 5627, 6080, 27564]\nassert solution.sortArray([-5450, -191]) == [-5450, -191]\nassert solution.sortArray([49893]) == [49893]\nassert solution.sortArray([-30970, -21819, -16459, -6175, -5385, 14246, 24936, 35564, 47090]) == [-30970, -21819, -16459, -6175, -5385, 14246, 24936, 35564, 47090]\nassert solution.sortArray([-34759, -10611, 11613, 36462, 40782]) == [-34759, -10611, 11613, 36462, 40782]\nassert solution.sortArray([-49813, -41826, -35228, -29439, -9639, -3036, 28230, 33871, 48996]) == [-49813, -41826, -35228, -29439, -9639, -3036, 28230, 33871, 48996]\nassert solution.sortArray([-41097, -38828, -27089, 12863, 24534, 43776]) == [-41097, -38828, -27089, 12863, 24534, 43776]\nassert solution.sortArray([-33392, -32576, -22625, -19944, -9751, -4561, 2163, 6571, 12761]) == [-33392, -32576, -22625, -19944, -9751, -4561, 2163, 6571, 12761]\nassert solution.sortArray([-38836]) == [-38836]\nassert solution.sortArray([-49590, -6931, 10360, 10997, 25302, 39637]) == [-49590, -6931, 10360, 10997, 25302, 39637]\nassert solution.sortArray([-22966, 4269]) == [-22966, 4269]\nassert solution.sortArray([-35503, -16325, -15894, 33136, 37116]) == [-35503, -16325, -15894, 33136, 37116]\nassert solution.sortArray([-19220]) == [-19220]\nassert solution.sortArray([-49838, 19890, 42535]) == [-49838, 19890, 42535]\nassert solution.sortArray([-44715, -44654, -34149, -13706, -5159, 30635, 39064, 45001, 46731]) == [-44715, -44654, -34149, -13706, -5159, 30635, 39064, 45001, 46731]\nassert solution.sortArray([-7576, -4233, -3774, 17364, 20606, 23243, 46945, 48856]) == [-7576, -4233, -3774, 17364, 20606, 23243, 46945, 48856]\nassert solution.sortArray([-34274, -24289]) == [-34274, -24289]\nassert solution.sortArray([16161, 21036, 23257, 46021]) == [16161, 21036, 23257, 46021]\nassert solution.sortArray([-11142, 44770]) == [-11142, 44770]\nassert solution.sortArray([23531]) == [23531]\nassert solution.sortArray([-27414, -3389]) == [-27414, -3389]\nassert solution.sortArray([-43793, 10592]) == [-43793, 10592]\nassert solution.sortArray([-32025, -23858, -10227, -10066, 6143]) == [-32025, -23858, -10227, -10066, 6143]\nassert solution.sortArray([-40794, -12400, -7419, 9037, 12778, 15468, 17690, 25028, 43415]) == [-40794, -12400, -7419, 9037, 12778, 15468, 17690, 25028, 43415]\nassert solution.sortArray([-40683, -28803, -23457, -20175, -9148, 5176, 11095]) == [-40683, -28803, -23457, -20175, -9148, 5176, 11095]\nassert solution.sortArray([-47194, -46893, -38087, -1378, 1009, 32107]) == [-47194, -46893, -38087, -1378, 1009, 32107]\nassert solution.sortArray([-24517, -24349, -18202, -18199, -738, 29030, 42962]) == [-24517, -24349, -18202, -18199, -738, 29030, 42962]\nassert solution.sortArray([-35790, -34227, -23066, 1489, 40598, 46763]) == [-35790, -34227, -23066, 1489, 40598, 46763]\nassert solution.sortArray([44535]) == [44535]\nassert solution.sortArray([-34717]) == [-34717]\nassert solution.sortArray([-30236, -9474, -2503, 13437, 29375, 34211, 34657, 42452]) == [-30236, -9474, -2503, 13437, 29375, 34211, 34657, 42452]\nassert solution.sortArray([-22920]) == [-22920]\nassert solution.sortArray([-48706, -39243, -26306, -23275, -10944, -9341, 1676, 1685, 9222, 20483]) == [-48706, -39243, -26306, -23275, -10944, -9341, 1676, 1685, 9222, 20483]\nassert solution.sortArray([-22982, -5633, -1135, 5802, 42850, 47528]) == [-22982, -5633, -1135, 5802, 42850, 47528]\nassert solution.sortArray([-34979, -29041, -20614, 19696, 26579]) == [-34979, -29041, -20614, 19696, 26579]\nassert solution.sortArray([-25497, -23625, -20274, 12726, 15160, 15260, 24074, 26564]) == [-25497, -23625, -20274, 12726, 15160, 15260, 24074, 26564]\nassert solution.sortArray([-16018, 1848, 36121, 48382]) == [-16018, 1848, 36121, 48382]\nassert solution.sortArray([-36980, -30648, -18306, -11963, -4729, 3904, 41319]) == [-36980, -30648, -18306, -11963, -4729, 3904, 41319]\nassert solution.sortArray([-44498, -22614, -21297, -18479, -18445, 12901, 26950, 28885, 32828, 34250]) == [-44498, -22614, -21297, -18479, -18445, 12901, 26950, 28885, 32828, 34250]\nassert solution.sortArray([-8197, 2597, 8916]) == [-8197, 2597, 8916]\nassert solution.sortArray([-40327]) == [-40327]\nassert solution.sortArray([-34617, -33819, -16461, 1112, 7824]) == [-34617, -33819, -16461, 1112, 7824]\nassert solution.sortArray([-37238, -34664, -23308, -15234, -13992, -6110, -4115, 30897, 35826, 41812]) == [-37238, -34664, -23308, -15234, -13992, -6110, -4115, 30897, 35826, 41812]\nassert solution.sortArray([-25343, -8966, 7783, 46504]) == [-25343, -8966, 7783, 46504]\nassert solution.sortArray([7810, 32833]) == [7810, 32833]\nassert solution.sortArray([-43619, -37973, -24022, 16022, 21725, 34132, 35500, 45686]) == [-43619, -37973, -24022, 16022, 21725, 34132, 35500, 45686]\nassert solution.sortArray([-48459, -30099, 39590, 41992, 49098]) == [-48459, -30099, 39590, 41992, 49098]\nassert solution.sortArray([-48302, -36635, -23130, -11159, -3548, -1899, -366, 23527, 25317]) == [-48302, -36635, -23130, -11159, -3548, -1899, -366, 23527, 25317]\nassert solution.sortArray([-32113, -15027, -12390, -9720]) == [-32113, -15027, -12390, -9720]\nassert solution.sortArray([-34534, -24642, -14062, -10758, 11103, 24733, 32726]) == [-34534, -24642, -14062, -10758, 11103, 24733, 32726]\nassert solution.sortArray([-44600, -35204, -23116, 30801]) == [-44600, -35204, -23116, 30801]\nassert solution.sortArray([-30952, -23885, -15744, -14283, -2367, 17950, 21300, 25631, 37574]) == [-30952, -23885, -15744, -14283, -2367, 17950, 21300, 25631, 37574]\nassert solution.sortArray([42317]) == [42317]\nassert solution.sortArray([-46297, -40952, -36645, -36140, -31960, -28015, -11040, 6724, 32122, 42880]) == [-46297, -40952, -36645, -36140, -31960, -28015, -11040, 6724, 32122, 42880]\nassert solution.sortArray([-49230, -19921, -17462, -8667, -7119, -2161, 20105, 20700, 45537]) == [-49230, -19921, -17462, -8667, -7119, -2161, 20105, 20700, 45537]\nassert solution.sortArray([-33774, 33920]) == [-33774, 33920]\nassert solution.sortArray([-2519, 45717]) == [-2519, 45717]\nassert solution.sortArray([-15095, -7209, -1141]) == [-15095, -7209, -1141]\nassert solution.sortArray([-49188, -43089, -26301, -25682, -20526, -20330, 4524, 33555, 48513]) == [-49188, -43089, -26301, -25682, -20526, -20330, 4524, 33555, 48513]\nassert solution.sortArray([-39326, -32865, -32692, 1486, 1609, 3298, 3318, 49602]) == [-39326, -32865, -32692, 1486, 1609, 3298, 3318, 49602]\nassert solution.sortArray([-45708, -44175, -31711, -16938, -3810, -2537, 18422, 36172]) == [-45708, -44175, -31711, -16938, -3810, -2537, 18422, 36172]\nassert solution.sortArray([-32444]) == [-32444]\nassert solution.sortArray([-16696, 29775, 43902, 49912]) == [-16696, 29775, 43902, 49912]\nassert solution.sortArray([-18366, 6512, 16844, 46272]) == [-18366, 6512, 16844, 46272]\nassert solution.sortArray([-30315, -25041, -13931, -2064, 22138, 30830, 36353, 49706]) == [-30315, -25041, -13931, -2064, 22138, 30830, 36353, 49706]\nassert solution.sortArray([-24132, -23459, -15093, 2962, 8175, 45844]) == [-24132, -23459, -15093, 2962, 8175, 45844]\nassert solution.sortArray([-24944, -23424, -14536, 21380]) == [-24944, -23424, -14536, 21380]\nassert solution.sortArray([-46973, -42355]) == [-46973, -42355]\nassert solution.sortArray([-43392, -39312, -27520, -24737, 570, 6516, 21610, 36081]) == [-43392, -39312, -27520, -24737, 570, 6516, 21610, 36081]\nassert solution.sortArray([-40625]) == [-40625]\nassert solution.sortArray([-19046, 29033, 49050]) == [-19046, 29033, 49050]\nassert solution.sortArray([-40404, -36621, -30978, 17073, 26229, 37358, 41800, 45398, 46881, 47445]) == [-40404, -36621, -30978, 17073, 26229, 37358, 41800, 45398, 46881, 47445]\nassert solution.sortArray([-47499, -45508, -29088, -9519, 15840, 26438, 39067, 49910]) == [-47499, -45508, -29088, -9519, 15840, 26438, 39067, 49910]\nassert solution.sortArray([-46670, -44523, -24449, -24247, 17285, 21356, 22739, 31983, 47766]) == [-46670, -44523, -24449, -24247, 17285, 21356, 22739, 31983, 47766]\nassert solution.sortArray([-24673, 3372, 38602]) == [-24673, 3372, 38602]\nassert solution.sortArray([-48532, -48387, -15666, -14141, 3648, 18569]) == [-48532, -48387, -15666, -14141, 3648, 18569]\nassert solution.sortArray([-8544, 3490, 3829, 11108, 24901, 34398, 43599]) == [-8544, 3490, 3829, 11108, 24901, 34398, 43599]",
  "inefficient_solution": "class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        big_list = []\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[j] < nums[i]:\n                    big_list.append((nums[i], nums[j]))\n        big_list.sort()\n        sorted_nums = [num for t in big_list for num in t]\n        return sorted_nums",
  "is_python": true
}