{
  "problem_idx": 188,
  "task_name": "Best Time to Buy and Sell Stock IV",
  "markdown_description": "\nYou are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`.\n\n\nFind the maximum profit you can achieve. You may complete at most `k` transactions: i.e. you may buy at most `k` times and sell at most `k` times.\n\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** k = 2, prices = [2,4,1]\n**Output:** 2\n**Explanation:** Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** k = 2, prices = [3,2,6,5,0,3]\n**Output:** 7\n**Explanation:** Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= 100`\n* `1 <= prices.length <= 1000`\n* `0 <= prices[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        f = [[0] * 2 for _ in range(k + 1)]\n        for j in range(1, k + 1):\n            f[j][1] = -prices[0]\n        for x in prices[1:]:\n            for j in range(k, 0, -1):\n                f[j][0] = max(f[j][1] + x, f[j][0])\n                f[j][1] = max(f[j - 1][0] - x, f[j][1])\n        return f[k][0]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        f = [[0] * 2 for _ in range(k + 1)]\n        for j in range(1, k + 1):\n            f[j][1] = -prices[0]\n        for x in prices[1:]:\n            for j in range(k, 0, -1):\n                f[j][0] = max(f[j][1] + x, f[j][0])\n                f[j][1] = max(f[j - 1][0] - x, f[j][1])\n        return f[k][0]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random k value\n    k = random.randint(1, 10)\n\n    # Generate random prices list\n    prices = random.sample(range(1, 1001), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxProfit(k, prices)\n\n    return k, prices, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        k, prices, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxProfit(k, prices) == expected_result\n        print(f\"assert solution.maxProfit({k}, {prices}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxProfit({k}, {prices}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxProfit(6, [475, 581, 428, 167, 476, 197, 164, 990, 860]) == 1241\nassert solution.maxProfit(1, [662, 360, 510, 135]) == 150\nassert solution.maxProfit(1, [770, 584, 321, 280, 690, 815, 689, 951]) == 671\nassert solution.maxProfit(6, [420, 124, 953, 875, 749, 536, 356, 790]) == 1263\nassert solution.maxProfit(2, [661, 781, 307, 496, 83, 672, 185, 816, 284, 490]) == 1220\nassert solution.maxProfit(8, [41, 839, 904, 901]) == 863\nassert solution.maxProfit(8, [50, 980, 992, 882]) == 942\nassert solution.maxProfit(4, [584, 364]) == 0\nassert solution.maxProfit(5, [878, 786, 272, 944, 452, 9]) == 672\nassert solution.maxProfit(5, [532, 98]) == 0\nassert solution.maxProfit(4, [856, 989, 573, 925, 601]) == 485\nassert solution.maxProfit(7, [467, 140, 800]) == 660\nassert solution.maxProfit(5, [260, 740, 847, 291, 460, 203, 982, 349]) == 1535\nassert solution.maxProfit(5, [188, 998, 344, 660, 523]) == 1126\nassert solution.maxProfit(7, [482, 870, 804, 754, 214, 440, 176]) == 614\nassert solution.maxProfit(4, [141, 168, 537, 423, 367, 860, 792]) == 889\nassert solution.maxProfit(9, [489, 772, 285, 939, 19, 816, 586, 180, 870, 461]) == 2424\nassert solution.maxProfit(4, [638, 991]) == 353\nassert solution.maxProfit(10, [640, 657, 942, 134, 716, 403, 562]) == 1043\nassert solution.maxProfit(9, [643, 278, 382]) == 104\nassert solution.maxProfit(7, [132, 300, 40, 499, 904, 279]) == 1032\nassert solution.maxProfit(8, [818, 259, 275, 328, 591, 848]) == 589\nassert solution.maxProfit(5, [8, 177, 460, 112, 459, 1000, 578]) == 1340\nassert solution.maxProfit(8, [516, 391, 699]) == 308\nassert solution.maxProfit(10, [954, 297, 195, 768, 950, 947, 807]) == 755\nassert solution.maxProfit(9, [553, 163, 894, 671, 28, 181]) == 884\nassert solution.maxProfit(7, [12, 787, 344, 561, 291]) == 992\nassert solution.maxProfit(10, [497, 940, 665, 118, 752, 63, 580]) == 1594\nassert solution.maxProfit(10, [463, 905, 817, 682]) == 442\nassert solution.maxProfit(6, [567, 582, 114, 153, 919, 85, 797, 339, 371, 412]) == 1605\nassert solution.maxProfit(3, [741, 702]) == 0\nassert solution.maxProfit(7, [476, 609, 974, 497, 962, 25, 188, 478, 651]) == 1589\nassert solution.maxProfit(10, [366, 897, 720, 921, 830, 104, 653]) == 1281\nassert solution.maxProfit(2, [863, 409]) == 0\nassert solution.maxProfit(10, [680, 470, 536, 579, 338, 336, 830, 463]) == 603\nassert solution.maxProfit(9, [118, 47, 732, 646, 930, 65, 906, 213, 952, 140]) == 2549\nassert solution.maxProfit(10, [911, 669, 153, 839, 16, 916, 263, 42]) == 1586\nassert solution.maxProfit(7, [39, 929, 455, 98]) == 890\nassert solution.maxProfit(5, [347, 565, 673, 400, 3, 701]) == 1024\nassert solution.maxProfit(2, [724, 512, 802, 965]) == 453\nassert solution.maxProfit(8, [250, 215, 354, 625, 962, 56, 940]) == 1631\nassert solution.maxProfit(8, [880, 911, 509]) == 31\nassert solution.maxProfit(5, [23, 107, 584, 803]) == 780\nassert solution.maxProfit(10, [957, 518]) == 0\nassert solution.maxProfit(7, [10, 429, 4, 740, 201, 278, 573, 998]) == 1952\nassert solution.maxProfit(6, [323, 738, 907, 496, 477, 915, 469, 177, 79, 613]) == 1556\nassert solution.maxProfit(7, [791, 83, 833]) == 750\nassert solution.maxProfit(4, [591, 838, 697, 896, 379, 424]) == 491\nassert solution.maxProfit(1, [389, 928, 140]) == 539\nassert solution.maxProfit(2, [331, 822, 835, 610, 633, 622, 392]) == 527\nassert solution.maxProfit(4, [41, 194, 157, 721]) == 717\nassert solution.maxProfit(9, [372, 742, 837, 638, 956, 418]) == 783\nassert solution.maxProfit(3, [887, 130]) == 0\nassert solution.maxProfit(6, [740, 319]) == 0\nassert solution.maxProfit(2, [11, 935, 656]) == 924\nassert solution.maxProfit(4, [307, 612, 290, 314, 397]) == 412\nassert solution.maxProfit(3, [31, 916, 950, 959, 310, 387, 820, 526, 56, 985]) == 2367\nassert solution.maxProfit(7, [607, 106, 823, 386, 297, 675, 953, 248, 948, 410]) == 2073\nassert solution.maxProfit(1, [585, 652]) == 67\nassert solution.maxProfit(10, [545, 801, 726, 270, 391, 453, 831, 797, 68, 995]) == 1744\nassert solution.maxProfit(10, [401, 442, 782, 167]) == 381\nassert solution.maxProfit(8, [598, 251, 321, 818]) == 567\nassert solution.maxProfit(3, [777, 581]) == 0\nassert solution.maxProfit(1, [325, 697, 866, 333, 901, 365]) == 576\nassert solution.maxProfit(1, [921, 436, 234, 88, 601, 595]) == 513\nassert solution.maxProfit(2, [998, 581, 151, 254, 261, 249, 563]) == 424\nassert solution.maxProfit(1, [71, 879, 671, 837, 870, 253]) == 808\nassert solution.maxProfit(3, [155, 726]) == 571\nassert solution.maxProfit(8, [937, 325, 101, 84, 126, 346, 318, 632, 183, 420]) == 813\nassert solution.maxProfit(4, [502, 632, 884, 729]) == 382\nassert solution.maxProfit(5, [139, 574, 558]) == 435\nassert solution.maxProfit(8, [807, 104, 484, 871, 510, 707, 241]) == 964\nassert solution.maxProfit(4, [976, 791, 898, 716, 275, 603, 391]) == 435\nassert solution.maxProfit(10, [610, 338, 745]) == 407\nassert solution.maxProfit(9, [894, 909, 675, 1, 85, 844]) == 858\nassert solution.maxProfit(4, [523, 184, 904, 761, 62, 590, 361, 694, 646]) == 1581\nassert solution.maxProfit(6, [26, 864, 791, 419, 552, 715, 551, 633]) == 1216\nassert solution.maxProfit(6, [408, 162, 470]) == 308\nassert solution.maxProfit(9, [474, 243, 552, 181, 428, 951, 671, 91, 162, 686]) == 1674\nassert solution.maxProfit(10, [404, 87, 85]) == 0\nassert solution.maxProfit(10, [524, 855, 381, 464, 718, 613, 805, 161, 221]) == 920\nassert solution.maxProfit(8, [592, 63, 70]) == 7\nassert solution.maxProfit(5, [307, 809, 79, 710]) == 1133\nassert solution.maxProfit(6, [524, 48, 720, 644]) == 672\nassert solution.maxProfit(8, [89, 655, 730, 106, 138, 500, 603, 696]) == 1231\nassert solution.maxProfit(9, [140, 731, 973, 660, 946, 474]) == 1119\nassert solution.maxProfit(1, [802, 435, 594, 551, 514, 10, 431, 608, 719]) == 709\nassert solution.maxProfit(2, [7, 916, 53]) == 909\nassert solution.maxProfit(2, [41, 969, 179, 745]) == 1494\nassert solution.maxProfit(8, [147, 148]) == 1\nassert solution.maxProfit(9, [605, 316, 982, 237]) == 666\nassert solution.maxProfit(4, [397, 831, 676, 279, 846, 684, 997, 476]) == 1314\nassert solution.maxProfit(1, [890, 164, 346, 701, 693, 540, 227, 172, 279, 757]) == 593\nassert solution.maxProfit(3, [840, 53]) == 0\nassert solution.maxProfit(10, [495, 788, 379, 859, 852, 822, 408]) == 773\nassert solution.maxProfit(7, [594, 366, 31, 855, 241, 862]) == 1445\nassert solution.maxProfit(6, [11, 912, 842]) == 901\nassert solution.maxProfit(3, [610, 913, 371, 575, 57, 971, 908, 73, 499]) == 1643\nassert solution.maxProfit(4, [246, 836, 350, 932, 882, 759, 938, 556]) == 1351\nassert solution.maxProfit(8, [891, 276, 386, 446]) == 170",
  "inefficient_solution": "class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:\n        if k == 0 or len(prices) == 0:\n            return 0\n        k dictionary = {}\n        for i in range(len(prices)):\n            new_k_dictionary = {}\n            for j in range(k):\n                new_k_dictionary[j*2] = {}\n                new_k_dictionary[j*2+1] = {}\n                for x, y in k_dictionary[j*2].items():\n                    new_k_dictionary[j*2][x[0], i] = x[1] + prices[i]\n                for x, y in k_dictionary[j*2+1].items():\n                    new_k_dictionary[j*2+1][x[0], i] = x[1] - prices[i]\n            k_dictionary = new_k_dictionary\n        max_profit = 0\n        for x, y in k_dictionary[0].items():\n            max_profit = max(max_profit, y[1])\n        return max_profit",
  "is_python": true
}