{
  "problem_idx": 101,
  "task_name": "Symmetric Tree",
  "markdown_description": "\nGiven the `root` of a binary tree, *check whether it is a mirror of itself* (i.e., symmetric around its center).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0101.Symmetric%20Tree/images/symtree1.jpg)\n\n```\n\n**Input:** root = [1,2,2,3,4,4,3]\n**Output:** true\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0101.Symmetric%20Tree/images/symtree2.jpg)\n\n```\n\n**Input:** root = [1,2,2,null,3,null,3]\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 1000]`.\n* `-100 <= Node.val <= 100`\n\n\n\u00a0\n\n\n**Follow up:** Could you solve it both recursively and iteratively?\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        def dfs(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None or root1.val != root2.val:\n                return False\n            return dfs(root1.left, root2.right) and dfs(root1.right, root2.left)\n\n        return dfs(root, root)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isSymmetric(self, root):\n        def dfs(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None or root1.val != root2.val:\n                return False\n            return dfs(root1.left, root2.right) and dfs(root1.right, root2.left)\n\n        return dfs(root, root)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a binary tree\n    def generate_tree(vals):\n        if len(vals) == 0:\n            return None\n        nodes = [None if val is None else TreeNode(val) for val in vals]\n        for i in range(len(vals)):\n            if nodes[i] is not None:\n                if 2*i+1 < len(vals):\n                    nodes[i].left = nodes[2*i+1]\n                if 2*i+2 < len(vals):\n                    nodes[i].right = nodes[2*i+2]\n        return nodes[0]\n\n    # Generate the values for the binary tree nodes\n    vals = []\n    for _ in range(random.randint(1, 11)):\n        vals.append(random.randint(-100, 100))\n    tree = generate_tree(vals)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isSymmetric(tree)\n\n    return tree, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tree, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isSymmetric(tree) == expected_result\n        print(f\"assert solution.isSymmetric({tree}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isSymmetric({tree}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3b3410>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410f10>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410f90>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3b3410>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3b3410>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3b3410>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410dd0>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410dd0>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410dd0>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410dd0>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410e90>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410d90>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d410d90>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3b3410>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d411150>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d411150>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d411150>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea950>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == True\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea990>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d542750>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea590>) == False\nassert solution.isSymmetric(<__main__.TreeNode object at 0x7f4e0d3ea550>) == False",
  "inefficient_solution": "",
  "is_python": true
}