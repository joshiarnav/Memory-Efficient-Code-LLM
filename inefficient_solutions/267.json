{
  "problem_idx": 267,
  "task_name": "Palindrome Permutation II",
  "markdown_description": "\nGiven a string s, return *all the palindromic permutations (without duplicates) of it*.\n\n\nYou may return the answer in **any order**. If `s` has no palindromic permutation, return an empty list.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = \"aabb\"\n**Output:** [\"abba\",\"baab\"]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = \"abc\"\n**Output:** []\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 16`\n* `s` consists of only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def generatePalindromes(self, s: str) -> List[str]:\n        def dfs(t):\n            if len(t) == len(s):\n                ans.append(t)\n                return\n            for c, v in cnt.items():\n                if v > 1:\n                    cnt[c] -= 2\n                    dfs(c + t + c)\n                    cnt[c] += 2\n\n        cnt = Counter(s)\n        mid = ''\n        for c, v in cnt.items():\n            if v & 1:\n                if mid:\n                    return []\n                mid = c\n                cnt[c] -= 1\n        ans = []\n        dfs(mid)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def generatePalindromes(self, s: str) -> List[str]:\n        def dfs(t):\n            if len(t) == len(s):\n                ans.append(t)\n                return\n            for c, v in cnt.items():\n                if v > 1:\n                    cnt[c] -= 2\n                    dfs(c + t + c)\n                    cnt[c] += 2\n\n        cnt = Counter(s)\n        mid = ''\n        for c, v in cnt.items():\n            if v & 1:\n                if mid:\n                    return []\n                mid = c\n                cnt[c] -= 1\n        ans = []\n        dfs(mid)\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random string\n    s = ''\n    for _ in range(random.randint(1, 17)):\n        s += random.choice('abcdefghijklmnopqrstuvwxyz')\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.generatePalindromes(s)\n\n    return s, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.generatePalindromes(s) == expected_result\n        test_case_generator_results.append(f\"assert solution.generatePalindromes('{s}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.generatePalindromes('hmowhyshktwppt') == []\nassert solution.generatePalindromes('owgsesajbqaa') == []\nassert solution.generatePalindromes('vtuukc') == []\nassert solution.generatePalindromes('v') == ['v']\nassert solution.generatePalindromes('qtrdcaga') == []\nassert solution.generatePalindromes('y') == ['y']\nassert solution.generatePalindromes('tutynzsdpmdj') == []\nassert solution.generatePalindromes('wxgoddsg') == []\nassert solution.generatePalindromes('duiejqxkmxwy') == []\nassert solution.generatePalindromes('lxf') == []\nassert solution.generatePalindromes('ekampcyq') == []\nassert solution.generatePalindromes('onwdvwxqyjpappxuu') == []\nassert solution.generatePalindromes('hbq') == []\nassert solution.generatePalindromes('ptikmce') == []\nassert solution.generatePalindromes('genvkoidba') == []\nassert solution.generatePalindromes('jkwtlnxxjbnjqwy') == []\nassert solution.generatePalindromes('u') == ['u']\nassert solution.generatePalindromes('hrhgijqenfvgla') == []\nassert solution.generatePalindromes('uv') == []\nassert solution.generatePalindromes('asuqhv') == []\nassert solution.generatePalindromes('wjndqekjx') == []\nassert solution.generatePalindromes('wdbyd') == []\nassert solution.generatePalindromes('vdegtny') == []\nassert solution.generatePalindromes('zgnn') == []\nassert solution.generatePalindromes('jqampywrih') == []\nassert solution.generatePalindromes('jebzzkhuqcarq') == []\nassert solution.generatePalindromes('bxbkkgy') == []\nassert solution.generatePalindromes('bhfxugcfwmmo') == []\nassert solution.generatePalindromes('hipbnxiz') == []\nassert solution.generatePalindromes('ppczhkcqbhrbnye') == []\nassert solution.generatePalindromes('tjcnnpkhpsugnzw') == []\nassert solution.generatePalindromes('byfkpeeos') == []\nassert solution.generatePalindromes('dhbdtfcmvzyozygv') == []\nassert solution.generatePalindromes('eulhlemo') == []\nassert solution.generatePalindromes('tr') == []\nassert solution.generatePalindromes('fzateumqyeu') == []\nassert solution.generatePalindromes('dfoedninvzra') == []\nassert solution.generatePalindromes('tyjawmarddxbiwg') == []\nassert solution.generatePalindromes('o') == ['o']\nassert solution.generatePalindromes('bfbn') == []\nassert solution.generatePalindromes('gijfnyuy') == []\nassert solution.generatePalindromes('wzurmonveppf') == []\nassert solution.generatePalindromes('rkgyldwkgtpa') == []\nassert solution.generatePalindromes('ic') == []\nassert solution.generatePalindromes('niyars') == []\nassert solution.generatePalindromes('iaamy') == []\nassert solution.generatePalindromes('jvscuiz') == []\nassert solution.generatePalindromes('zadvlayb') == []\nassert solution.generatePalindromes('fpyq') == []\nassert solution.generatePalindromes('pawzapmuqhrrqvxwo') == []\nassert solution.generatePalindromes('fxwifiyzssetaaclb') == []\nassert solution.generatePalindromes('ecnmexpgkcwejpd') == []\nassert solution.generatePalindromes('ojbxooxdlkil') == []\nassert solution.generatePalindromes('imw') == []\nassert solution.generatePalindromes('ijtbujixupyf') == []\nassert solution.generatePalindromes('rmaenngkuxxmpf') == []\nassert solution.generatePalindromes('broy') == []\nassert solution.generatePalindromes('hiqguisynmrhkad') == []\nassert solution.generatePalindromes('iqhfwdtslpjbdlwa') == []\nassert solution.generatePalindromes('ffzmjmywmto') == []\nassert solution.generatePalindromes('vb') == []\nassert solution.generatePalindromes('dlcyhncjwbzs') == []\nassert solution.generatePalindromes('lldzozwep') == []\nassert solution.generatePalindromes('wgtzi') == []\nassert solution.generatePalindromes('vsxjlapxwh') == []\nassert solution.generatePalindromes('yifvflvnq') == []\nassert solution.generatePalindromes('c') == ['c']\nassert solution.generatePalindromes('hllqwxbxon') == []\nassert solution.generatePalindromes('ixspuaqkyira') == []\nassert solution.generatePalindromes('ixetn') == []\nassert solution.generatePalindromes('mwnb') == []\nassert solution.generatePalindromes('ogt') == []\nassert solution.generatePalindromes('tmrbsbnqr') == []\nassert solution.generatePalindromes('oeaghkpdhluwzoo') == []\nassert solution.generatePalindromes('jv') == []\nassert solution.generatePalindromes('pwecpjnm') == []\nassert solution.generatePalindromes('rddutszjmu') == []\nassert solution.generatePalindromes('bmwtfmflgkjnuw') == []\nassert solution.generatePalindromes('tnk') == []\nassert solution.generatePalindromes('zwvhvlh') == []\nassert solution.generatePalindromes('fzwgcphbzl') == []\nassert solution.generatePalindromes('cmnfrjti') == []\nassert solution.generatePalindromes('yrxfqivxtylb') == []\nassert solution.generatePalindromes('uwclkoq') == []\nassert solution.generatePalindromes('rwpt') == []\nassert solution.generatePalindromes('hfmxy') == []\nassert solution.generatePalindromes('lbrtdwikawibqbe') == []\nassert solution.generatePalindromes('z') == ['z']\nassert solution.generatePalindromes('hyvmyzxgdsgap') == []\nassert solution.generatePalindromes('taltrlvlglwkwo') == []\nassert solution.generatePalindromes('jjtwemwahuznl') == []\nassert solution.generatePalindromes('f') == ['f']\nassert solution.generatePalindromes('b') == ['b']\nassert solution.generatePalindromes('jqhyuyijczfbysd') == []\nassert solution.generatePalindromes('wfswemdpxnl') == []\nassert solution.generatePalindromes('bbmmlgaybgqsjon') == []\nassert solution.generatePalindromes('fdwn') == []\nassert solution.generatePalindromes('ftmrb') == []\nassert solution.generatePalindromes('cinctexmfgghmdbpj') == []\nassert solution.generatePalindromes('xcwmp') == []",
  "inefficient_solution": "class Solution:\n    def generatePalindromes(self, s: str) -> List[str]:\n        cnt = {}\n        for c in s:\n            if c in cnt:\n                cnt[c] += 1\n            else:\n                cnt[c] = 1\n        ans = []\n        visited = set()\n        def dfs(t, original):\n            if len(t) == len(s):\n                if original:\n                    ans.append(t)\n                return\n            for c, v in cnt.items():\n                if v > 0 and (c, t) not in visited:\n                    visited.add((c, t))\n                    cnt[c] -= 1\n                    dfs(c + t + c, original)\n                    cnt[c] += 1\n                    visited.remove((c, t))\n        dfs('', True)\n        return ans",
  "is_python": true
}