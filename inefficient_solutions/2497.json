{
  "problem_idx": 2497,
  "task_name": "Maximum Star Sum of a Graph",
  "markdown_description": "\nThere is an undirected graph consisting of `n` nodes numbered from `0` to `n - 1`. You are given a **0-indexed** integer array `vals` of length `n` where `vals[i]` denotes the value of the `ith` node.\n\n\nYou are also given a 2D integer array `edges` where `edges[i] = [ai, bi]` denotes that there exists an **undirected** edge connecting nodes `ai` and `bi.`\n\n\nA **star graph** is a subgraph of the given graph having a center node containing `0` or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.\n\n\nThe image below shows star graphs with `3` and `4` neighbors respectively, centered at the blue node.\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2497.Maximum%20Star%20Sum%20of%20a%20Graph/images/max-star-sum-descdrawio.png)\nThe **star sum** is the sum of the values of all the nodes present in the star graph.\n\n\nGiven an integer `k`, return *the **maximum star sum** of a star graph containing **at most*** `k` *edges.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2400-2499/2497.Maximum%20Star%20Sum%20of%20a%20Graph/images/max-star-sum-example1drawio.png)\n\n```\n\n**Input:** vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2\n**Output:** 16\n**Explanation:** The above diagram represents the input graph.\nThe star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.\nIt can be shown it is not possible to get a star graph with a sum greater than 16.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** vals = [-5], edges = [], k = 0\n**Output:** -5\n**Explanation:** There is only one possible star graph, which is node 0 itself.\nHence, we return -5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == vals.length`\n* `1 <= n <= 105`\n* `-104 <= vals[i] <= 104`\n* `0 <= edges.length <= min(n * (n - 1) / 2``, 105)`\n* `edges[i].length == 2`\n* `0 <= ai, bi <= n - 1`\n* `ai != bi`\n* `0 <= k <= n - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:\n        g = defaultdict(list)\n        for a, b in edges:\n            if vals[b] > 0:\n                g[a].append(vals[b])\n            if vals[a] > 0:\n                g[b].append(vals[a])\n        for bs in g.values():\n            bs.sort(reverse=True)\n        return max(v + sum(g[i][:k]) for i, v in enumerate(vals))\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:\n        g = defaultdict(list)\n        for a, b in edges:\n            if vals[b] > 0:\n                g[a].append(vals[b])\n            if vals[a] > 0:\n                g[b].append(vals[a])\n        for bs in g.values():\n            bs.sort(reverse=True)\n        return max(v + sum(g[i][:k]) for i, v in enumerate(vals))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate vals list\n    vals = random.sample(range(-10000, 10001), random.randint(1, 6))\n    \n    # Generate edges list\n    n = len(vals)\n    edges = [[random.randint(0, n-1), random.randint(0, n-1)] for _ in range(random.randint(0, (n*(n-1))//2))]\n    \n    # Generate k\n    k = random.randint(0, n-1)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxStarSum(vals, edges, k)\n\n    return vals, edges, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        vals, edges, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxStarSum(vals, edges, k) == expected_result\n        args = \", \".join([str(arg) for arg in [vals, edges, k]])\n        if args:\n            print(f\"assert solution.maxStarSum({args}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.maxStarSum({args}) == {expected_result}\")\n        else:\n            print(f\"assert solution.maxStarSum({args}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.maxStarSum({args}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxStarSum([1346, -3506, -6505, -4705], [[1, 0], [1, 3], [1, 2], [3, 2], [0, 2], [1, 2]], 1) == 1346\nassert solution.maxStarSum([-9578, 8832, 3664, -1705, 2856], [[1, 2], [3, 3], [3, 4], [0, 0], [2, 0]], 1) == 12496\nassert solution.maxStarSum([-4978, 3776, 8049], [[0, 0]], 1) == 8049\nassert solution.maxStarSum([-7488, 1761, -4464, 5608, 1282, 4759], [[2, 5], [4, 0], [5, 4], [5, 4], [3, 0]], 3) == 10800\nassert solution.maxStarSum([9717, 8340, 6854, 5079, -5272], [[1, 4], [1, 1], [4, 2], [1, 1], [4, 3], [2, 4], [4, 2], [0, 3]], 3) == 33360\nassert solution.maxStarSum([-7333, 5185], [], 1) == 5185\nassert solution.maxStarSum([-1378, 1447, -3928, -7890, -8370], [[0, 3], [3, 3]], 1) == 1447\nassert solution.maxStarSum([1042, 3882, 306, 6026, -663, -5552], [[4, 1], [1, 0], [2, 5], [5, 3]], 2) == 6026\nassert solution.maxStarSum([8886, 5654, 9982, -1469, 2180], [[0, 2], [4, 0], [0, 0], [1, 3]], 3) == 36640\nassert solution.maxStarSum([-5849, -352, 655, 9245, 9140, 3712], [[1, 3], [0, 3], [0, 3], [5, 2], [2, 1], [1, 4], [2, 1]], 3) == 18688\nassert solution.maxStarSum([-1905, -177, -7794], [], 0) == -177\nassert solution.maxStarSum([-1446, 5360], [], 1) == 5360\nassert solution.maxStarSum([-957, -9663, -3687, 8992, -7886, -7648], [[0, 0], [0, 0], [1, 4], [1, 0], [3, 2], [5, 5], [3, 0], [5, 5], [5, 1]], 5) == 8992\nassert solution.maxStarSum([8614, 4645, 1557, 7724], [[0, 1], [2, 1], [2, 3], [2, 1]], 3) == 18571\nassert solution.maxStarSum([-7026, -175], [], 1) == -175\nassert solution.maxStarSum([-8670, -7833, 4707, -2244, 4011, 1147], [[5, 5], [2, 2], [0, 0], [1, 5], [4, 4], [4, 4], [4, 3], [4, 0], [5, 5], [3, 5], [5, 0], [1, 2]], 0) == 4707\nassert solution.maxStarSum([-13], [], 0) == -13\nassert solution.maxStarSum([8077, -8248, -3471, -99, 3672], [[0, 3], [0, 4], [3, 2], [1, 2], [0, 2], [2, 1], [1, 3], [3, 0]], 4) == 16055\nassert solution.maxStarSum([-9416, -3058], [], 1) == -3058\nassert solution.maxStarSum([-7630, -7742, 7034, -5363, -4080], [], 3) == 7034\nassert solution.maxStarSum([-2699, 6169, -452, -2279, -5501, -4532], [[4, 0], [2, 0], [2, 4], [2, 1], [5, 0]], 0) == 6169\nassert solution.maxStarSum([-1762, -2625, -4521, -2750, -3201], [[4, 3], [3, 4]], 2) == -1762\nassert solution.maxStarSum([8949], [], 0) == 8949\nassert solution.maxStarSum([-5783, 6014, 8158, 4006], [[0, 0], [3, 0]], 3) == 8158\nassert solution.maxStarSum([-9045, -70, -7050, 4932, 9939, -9163], [[4, 5]], 0) == 9939\nassert solution.maxStarSum([-5651, -577, -6679, 5421], [[2, 0], [0, 3], [3, 0], [0, 3], [1, 3], [3, 1]], 0) == 5421\nassert solution.maxStarSum([-8373, -7014, 9101, -7755, 8073, -1302], [[4, 4], [0, 1], [3, 1], [1, 1], [1, 2], [1, 0], [3, 3], [0, 2], [5, 3], [0, 4], [1, 5], [5, 3]], 0) == 9101\nassert solution.maxStarSum([-897, 8012, -6186, -7139, 6425, 9209], [[3, 1], [1, 0], [3, 0], [0, 1], [2, 0], [1, 2], [0, 4], [0, 5]], 4) == 30761\nassert solution.maxStarSum([8535, 9361, -749], [[2, 1]], 0) == 9361\nassert solution.maxStarSum([-9795], [], 0) == -9795\nassert solution.maxStarSum([-359], [], 0) == -359\nassert solution.maxStarSum([5507, 3083, 988, -8614], [[2, 0], [2, 2], [2, 1]], 0) == 5507\nassert solution.maxStarSum([1781, -4192], [[0, 1]], 0) == 1781\nassert solution.maxStarSum([-8786, 8672, 5401], [[0, 2]], 2) == 8672\nassert solution.maxStarSum([-5086, -7149, 2552, 9729], [[2, 2], [0, 0], [1, 1], [1, 0], [1, 1]], 3) == 9729\nassert solution.maxStarSum([-3833, -4952, 5278, 1987], [[1, 2], [1, 0]], 1) == 5278\nassert solution.maxStarSum([-6983, 1632, 1495, 1316, -4656], [[4, 4], [4, 3], [4, 0], [0, 3], [2, 4], [0, 1], [0, 0], [4, 2], [4, 4], [4, 1]], 4) == 1632\nassert solution.maxStarSum([5869], [], 0) == 5869\nassert solution.maxStarSum([1988, 5624, 1377, -3609, -7137], [[4, 2], [2, 4], [3, 1], [1, 0], [1, 3], [3, 0], [3, 0], [1, 1]], 3) == 18860\nassert solution.maxStarSum([-8946, -7815], [[1, 1]], 1) == -7815\nassert solution.maxStarSum([5733, -4488, 9055, 3956, 1317], [[3, 0], [2, 0], [2, 4], [0, 3], [2, 0], [3, 1]], 3) == 27799\nassert solution.maxStarSum([-9948, 608, -9361], [], 2) == 608\nassert solution.maxStarSum([6811], [], 0) == 6811\nassert solution.maxStarSum([-6784, -4660], [[1, 0]], 1) == -4660\nassert solution.maxStarSum([-4165, -8337, -6293, -595, -9738, 6277], [[2, 0]], 4) == 6277\nassert solution.maxStarSum([-872, 2521], [], 0) == 2521\nassert solution.maxStarSum([-2644, -3382, -3913, 4311, 8086, 8887], [[4, 0]], 1) == 8887\nassert solution.maxStarSum([-9908, 4223], [], 1) == 4223\nassert solution.maxStarSum([7614, 2579, -982, -6136], [[1, 2]], 0) == 7614\nassert solution.maxStarSum([5560, 7458], [[1, 1]], 1) == 14916\nassert solution.maxStarSum([650, -8396, -9981, -3106, 5120], [[0, 0], [1, 1], [2, 0], [3, 4], [1, 2], [3, 4], [3, 2]], 3) == 7134\nassert solution.maxStarSum([-1864, 3991, 3310], [[0, 0], [1, 2]], 1) == 7301\nassert solution.maxStarSum([-4361, 9753, 1445, -4035, -7535], [[1, 2], [3, 0]], 1) == 11198\nassert solution.maxStarSum([-3945, 1501], [], 1) == 1501\nassert solution.maxStarSum([9295, -6302], [[0, 1]], 1) == 9295\nassert solution.maxStarSum([9959, -3736, -8795], [[0, 1]], 0) == 9959\nassert solution.maxStarSum([-3344], [], 0) == -3344\nassert solution.maxStarSum([-1744, -1192, -5533, 6771, -7168], [[1, 0], [3, 2], [2, 0], [2, 3]], 1) == 6771\nassert solution.maxStarSum([7722, -6376, -4347, -2536, -6473, 4527], [[1, 0], [0, 5], [4, 0], [2, 4], [5, 0], [0, 4], [3, 1], [2, 1], [0, 1], [5, 1], [0, 1], [1, 1], [5, 0]], 2) == 19971\nassert solution.maxStarSum([864, 1426, 4267, -1570, -2607], [[1, 2], [3, 0], [1, 2], [4, 2], [2, 0], [0, 4], [3, 2], [2, 2], [1, 0]], 0) == 4267\nassert solution.maxStarSum([-8793], [], 0) == -8793\nassert solution.maxStarSum([1370, 9004, -3533], [[1, 0]], 2) == 10374\nassert solution.maxStarSum([2654, -3803, 227], [[0, 0]], 1) == 5308\nassert solution.maxStarSum([-8204, 1682, -455], [[0, 1], [0, 2], [0, 0]], 2) == 1682\nassert solution.maxStarSum([-552, 3866, -3197, 9166], [[2, 3], [1, 1], [2, 1], [1, 3], [2, 3]], 1) == 13032\nassert solution.maxStarSum([-2927, -1715, -5310, 75, -4063, -7506], [[5, 2], [0, 5], [4, 2], [3, 1], [2, 1], [5, 0], [2, 3], [0, 2], [0, 5], [3, 0], [1, 0]], 2) == 75\nassert solution.maxStarSum([1959, 2202, -6999], [[2, 1]], 2) == 2202\nassert solution.maxStarSum([-2921, 638, 5509, -5392], [], 1) == 5509\nassert solution.maxStarSum([3083, -753, 3003, 8499], [[2, 3], [2, 2], [1, 2], [1, 0], [2, 2], [3, 0]], 3) == 17508\nassert solution.maxStarSum([4728, -8998, -2927, 1321], [[1, 2], [2, 3], [2, 1], [1, 3]], 2) == 4728\nassert solution.maxStarSum([-7188, 1929, 1258, -3480], [[0, 3]], 1) == 1929\nassert solution.maxStarSum([920, 3218, -1704], [[2, 0]], 1) == 3218\nassert solution.maxStarSum([2054, -844, 1963, 6545], [[2, 1]], 0) == 6545\nassert solution.maxStarSum([4546], [], 0) == 4546\nassert solution.maxStarSum([3556, 1921, -9678, -3184, 7133, 2331], [[2, 1], [3, 0], [4, 0], [4, 4], [4, 2], [0, 1], [1, 2], [3, 5], [2, 3], [2, 3], [0, 4], [0, 2], [0, 2], [1, 1]], 5) == 28511\nassert solution.maxStarSum([2627, 4949, -5753], [[1, 2], [2, 0], [2, 0]], 1) == 4949\nassert solution.maxStarSum([8066, 854], [], 0) == 8066\nassert solution.maxStarSum([-4774, 5645, 7107], [[1, 0]], 1) == 7107\nassert solution.maxStarSum([3266, 6855, 8840, -8119], [[0, 2]], 3) == 12106\nassert solution.maxStarSum([5630], [], 0) == 5630\nassert solution.maxStarSum([8300], [], 0) == 8300\nassert solution.maxStarSum([-8532], [], 0) == -8532\nassert solution.maxStarSum([5577, -2079, 6535, 3322], [[3, 1], [2, 1], [0, 2], [0, 1], [1, 1]], 1) == 12112\nassert solution.maxStarSum([-2489], [], 0) == -2489\nassert solution.maxStarSum([8633, -3679, -2704, -1085, 8767, -3188], [[2, 1], [1, 2], [5, 1], [5, 2], [5, 1], [4, 2], [2, 0]], 1) == 8767\nassert solution.maxStarSum([-1098, 5447], [[1, 0]], 0) == 5447\nassert solution.maxStarSum([171, 1457, -4497], [[1, 2], [2, 2], [0, 1]], 2) == 1628\nassert solution.maxStarSum([-5589, 2090, -1204, -7414, -7069, 9198], [[3, 4], [4, 4], [0, 0], [2, 5], [1, 1]], 3) == 9198\nassert solution.maxStarSum([4857, 8960, 5021], [[1, 1], [2, 1]], 2) == 26880\nassert solution.maxStarSum([-263], [], 0) == -263\nassert solution.maxStarSum([3219, 7467], [[1, 1]], 0) == 7467\nassert solution.maxStarSum([7999, 1126, -710, -6728, 6896, -2971], [[4, 1], [1, 0], [2, 2], [5, 4], [4, 2], [3, 1], [5, 1], [5, 1], [1, 0], [3, 3], [4, 3], [4, 5], [2, 3]], 4) == 24020\nassert solution.maxStarSum([4770, 7207, -442, 8404, -6703, 7145], [[2, 4], [2, 0], [3, 0], [1, 0], [5, 3], [1, 0], [0, 1], [3, 1], [2, 2], [1, 0], [5, 5], [4, 3], [1, 0]], 1) == 15611\nassert solution.maxStarSum([7447, -5624, -7391, 4813, -557], [[4, 1], [2, 4], [2, 0], [1, 1], [1, 0], [2, 3], [1, 3], [2, 4], [3, 0]], 2) == 12260\nassert solution.maxStarSum([9936, -4878], [], 0) == 9936\nassert solution.maxStarSum([-1850], [], 0) == -1850\nassert solution.maxStarSum([9655, 8642, -8815, -7278, -7048], [[4, 3], [2, 1], [0, 3], [2, 0], [1, 0], [0, 3], [2, 4]], 4) == 18297\nassert solution.maxStarSum([-7390, -3912], [[0, 1]], 0) == -3912\nassert solution.maxStarSum([-7035, 7836, 1830, 2307, -287], [[3, 2], [3, 4], [2, 1]], 1) == 9666\nassert solution.maxStarSum([2683, -5184, 1466], [[0, 1], [1, 1]], 0) == 2683",
  "inefficient_solution": "class Solution:\n    def maxStarSum(self, vals, edges, k):\n        n = len(vals)\n        g = [[0]*n for _ in range(n)]\n        for i in range(n):\n            g[i] = [0]*n\n        for a, b in edges:\n            g[a][b] = vals[b]\n            g[b][a] = vals[a]\n\n        max_sum = 0\n        for i in range(n):\n            neighbors = sorted(g[i], reverse=True)[:k]\n            neighbor_sum = sum(neighbors)\n            max_sum = max(max_sum, vals[i] + neighbor_sum)\n\n        return max_sum",
  "is_python": true
}