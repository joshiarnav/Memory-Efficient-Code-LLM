{
  "problem_idx": 600,
  "task_name": "Non",
  "markdown_description": "\nGiven a positive integer `n`, return the number of the integers in the range `[0, n]` whose binary representations **do not** contain consecutive ones.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 5\n**Output:** 5\n**Explanation:**\nHere are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 1\n**Output:** 2\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def findIntegers(self, n: int) -> int:\n        @cache\n        def dfs(pos, pre, limit):\n            if pos <= 0:\n                return 1\n            up = a[pos] if limit else 1\n            ans = 0\n            for i in range(up + 1):\n                if pre == 1 and i == 1:\n                    continue\n                ans += dfs(pos - 1, i, limit and i == up)\n            return ans\n\n        a = [0] * 33\n        l = 0\n        while n:\n            l += 1\n            a[l] = n & 1\n            n >>= 1\n        return dfs(l, 0, True)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findIntegers(self, n: int) -> int:\n        @cache\n        def dfs(pos, pre, limit):\n            if pos <= 0:\n                return 1\n            up = a[pos] if limit else 1\n            ans = 0\n            for i in range(up + 1):\n                if pre == 1 and i == 1:\n                    continue\n                ans += dfs(pos - 1, i, limit and i == up)\n            return ans\n\n        a = [0] * 33\n        l = 0\n        while n:\n            l += 1\n            a[l] = n & 1\n            n >>= 1\n        return dfs(l, 0, True)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random n value between 1 and 1000000000\n    n = random.randint(1, 1000000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findIntegers(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findIntegers(n) == expected_result\n        print(f\"assert solution.findIntegers({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findIntegers({n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findIntegers(808514494) == 2178309\nassert solution.findIntegers(253589816) == 832040\nassert solution.findIntegers(600195978) == 1664080\nassert solution.findIntegers(661188476) == 1860498\nassert solution.findIntegers(252045808) == 832040\nassert solution.findIntegers(633828546) == 1860498\nassert solution.findIntegers(563853129) == 1542687\nassert solution.findIntegers(825769605) == 2178309\nassert solution.findIntegers(432730295) == 1346269\nassert solution.findIntegers(720792570) == 2178309\nassert solution.findIntegers(373578132) == 1346269\nassert solution.findIntegers(855061438) == 2178309\nassert solution.findIntegers(533632824) == 1346269\nassert solution.findIntegers(386755030) == 1346269\nassert solution.findIntegers(897225589) == 2178309\nassert solution.findIntegers(900068194) == 2178309\nassert solution.findIntegers(656659125) == 1860498\nassert solution.findIntegers(820425119) == 2178309\nassert solution.findIntegers(846812607) == 2178309\nassert solution.findIntegers(87949224) == 485572\nassert solution.findIntegers(64258239) == 317811\nassert solution.findIntegers(993384191) == 2178309\nassert solution.findIntegers(601422323) == 1664080\nassert solution.findIntegers(616149218) == 1785473\nassert solution.findIntegers(395548444) == 1346269\nassert solution.findIntegers(520551660) == 1346269\nassert solution.findIntegers(555479537) == 1496319\nassert solution.findIntegers(754824923) == 2178309\nassert solution.findIntegers(191424008) == 832040\nassert solution.findIntegers(398520371) == 1346269\nassert solution.findIntegers(223852927) == 832040\nassert solution.findIntegers(395112229) == 1346269\nassert solution.findIntegers(55957039) == 317811\nassert solution.findIntegers(866482073) == 2178309\nassert solution.findIntegers(554685127) == 1485373\nassert solution.findIntegers(67269484) == 323589\nassert solution.findIntegers(58534005) == 317811\nassert solution.findIntegers(440127365) == 1346269\nassert solution.findIntegers(608015346) == 1710448\nassert solution.findIntegers(227385438) == 832040\nassert solution.findIntegers(330026807) == 1149851\nassert solution.findIntegers(471326210) == 1346269\nassert solution.findIntegers(861935270) == 2178309\nassert solution.findIntegers(472671117) == 1346269\nassert solution.findIntegers(932477976) == 2178309\nassert solution.findIntegers(619564856) == 1785473\nassert solution.findIntegers(390632926) == 1346269\nassert solution.findIntegers(819876146) == 2178309\nassert solution.findIntegers(775162029) == 2178309\nassert solution.findIntegers(968180263) == 2178309\nassert solution.findIntegers(328009552) == 1149851\nassert solution.findIntegers(974526991) == 2178309\nassert solution.findIntegers(40338800) == 271443\nassert solution.findIntegers(501211173) == 1346269\nassert solution.findIntegers(822714208) == 2178309\nassert solution.findIntegers(738617796) == 2178309\nassert solution.findIntegers(470423344) == 1346269\nassert solution.findIntegers(299859308) == 1028458\nassert solution.findIntegers(106458077) == 514229\nassert solution.findIntegers(663790385) == 1860498\nassert solution.findIntegers(866260280) == 2178309\nassert solution.findIntegers(980248243) == 2178309\nassert solution.findIntegers(283493916) == 953433\nassert solution.findIntegers(858496043) == 2178309\nassert solution.findIntegers(536022828) == 1346269\nassert solution.findIntegers(610034576) == 1739105\nassert solution.findIntegers(494941483) == 1346269\nassert solution.findIntegers(463305820) == 1346269\nassert solution.findIntegers(195609363) == 832040\nassert solution.findIntegers(15988297) == 121393\nassert solution.findIntegers(454863323) == 1346269\nassert solution.findIntegers(79676833) == 439204\nassert solution.findIntegers(934747088) == 2178309\nassert solution.findIntegers(66995622) == 317811\nassert solution.findIntegers(541318693) == 1399402\nassert solution.findIntegers(751379489) == 2178309\nassert solution.findIntegers(816148665) == 2178309\nassert solution.findIntegers(400398014) == 1346269\nassert solution.findIntegers(65719526) == 317811\nassert solution.findIntegers(728756072) == 2178309\nassert solution.findIntegers(48349566) == 317811\nassert solution.findIntegers(931176647) == 2178309\nassert solution.findIntegers(778093100) == 2178309\nassert solution.findIntegers(901605631) == 2178309\nassert solution.findIntegers(794869310) == 2178309\nassert solution.findIntegers(981297090) == 2178309\nassert solution.findIntegers(478553678) == 1346269\nassert solution.findIntegers(506355623) == 1346269\nassert solution.findIntegers(439415438) == 1346269\nassert solution.findIntegers(712121191) == 2131941\nassert solution.findIntegers(435894217) == 1346269\nassert solution.findIntegers(558091214) == 1520795\nassert solution.findIntegers(24589795) == 196418\nassert solution.findIntegers(861925597) == 2178309\nassert solution.findIntegers(538483155) == 1374926\nassert solution.findIntegers(522532162) == 1346269\nassert solution.findIntegers(825843705) == 2178309\nassert solution.findIntegers(616667525) == 1785473\nassert solution.findIntegers(399221518) == 1346269\nassert solution.findIntegers(593238299) == 1664080",
  "inefficient_solution": "class Solution:\n    def findIntegers(self, n: int) -> int:\n        def dfs(pos, pre, limit, memo):\n            if pos < 0:\n                return 1\n            if (pos, pre, limit) in memo:\n                return memo[(pos, pre, limit)]\n            up = 1\n            ans = 0\n            for i in range(up + 1):\n                if pre == 1 and i == 1:\n                    continue\n                ans += dfs(pos - 1, i, limit and i == up, memo)\n            memo[(pos, pre, limit)] = ans\n            return ans\n\n        a = [0] * (n + 1)\n        l = 0\n        for i in range(n + 1):\n            a[i] = i & 1\n        memo = {}\n        return dfs(l, 0, True, memo)",
  "is_python": true
}