{
  "problem_idx": 838,
  "task_name": "Push Dominoes",
  "markdown_description": "\nThere are `n` dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\n\n\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\n\n\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\n\n\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\n\n\nYou are given a string `dominoes` representing the initial state where:\n\n\n* `dominoes[i] = 'L'`, if the `ith` domino has been pushed to the left,\n* `dominoes[i] = 'R'`, if the `ith` domino has been pushed to the right, and\n* `dominoes[i] = '.'`, if the `ith` domino has not been pushed.\n\n\nReturn *a string representing the final state*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** dominoes = \"RR.L\"\n**Output:** \"RR.L\"\n**Explanation:** The first domino expends no additional force on the second domino.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0800-0899/0838.Push%20Dominoes/images/domino.png)\n\n```\n\n**Input:** dominoes = \".L.R...LR..L..\"\n**Output:** \"LL.RR.LLRRLL..\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == dominoes.length`\n* `1 <= n <= 105`\n* `dominoes[i]` is either `'L'`, `'R'`, or `'.'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        q = deque()\n        time = [-1] * n\n        force = defaultdict(list)\n        for i, f in enumerate(dominoes):\n            if f != '.':\n                q.append(i)\n                time[i] = 0\n                force[i].append(f)\n        ans = ['.'] * n\n        while q:\n            i = q.popleft()\n            if len(force[i]) == 1:\n                ans[i] = f = force[i][0]\n                j = i - 1 if f == 'L' else i + 1\n                if 0 <= j < n:\n                    t = time[i]\n                    if time[j] == -1:\n                        q.append(j)\n                        time[j] = t + 1\n                        force[j].append(f)\n                    elif time[j] == t + 1:\n                        force[j].append(f)\n        return ''.join(ans)\n",
  "test_case_generator": "\nimport random\nfrom collections import deque, defaultdict\n\n# Task description\nclass Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        q = deque()\n        time = [-1] * n\n        force = defaultdict(list)\n        for i, f in enumerate(dominoes):\n            if f != '.':\n                q.append(i)\n                time[i] = 0\n                force[i].append(f)\n        ans = ['.'] * n\n        while q:\n            i = q.popleft()\n            if len(force[i]) == 1:\n                ans[i] = f = force[i][0]\n                j = i - 1 if f == 'L' else i + 1\n                if 0 <= j < n:\n                    t = time[i]\n                    if time[j] == -1:\n                        q.append(j)\n                        time[j] = t + 1\n                        force[j].append(f)\n                    elif time[j] == t + 1:\n                        force[j].append(f)\n        return ''.join(ans)\n\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random input string\n    dominoes = random.choices(['.', 'L', 'R'], k=random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.pushDominoes(dominoes)\n\n    return dominoes, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        dominoes, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.pushDominoes(dominoes) == expected_result\n        print(f\"assert solution.pushDominoes({dominoes}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.pushDominoes({dominoes}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.pushDominoes(['L', 'R', '.']) == LRR\nassert solution.pushDominoes(['.', 'R']) == .R\nassert solution.pushDominoes(['.', '.']) == ..\nassert solution.pushDominoes(['R', 'R', '.']) == RRR\nassert solution.pushDominoes(['R', 'L']) == RL\nassert solution.pushDominoes(['L', 'L', '.', 'L', '.', 'R', 'L', 'R', 'R']) == LLLL.RLRR\nassert solution.pushDominoes(['.', 'L']) == LL\nassert solution.pushDominoes(['.', '.']) == ..\nassert solution.pushDominoes(['.', 'R', 'L', '.', 'R', 'R', 'R', 'L', 'L']) == .RL.RRRLL\nassert solution.pushDominoes(['.', 'L', 'L', 'L', 'R', 'R', 'R', 'R']) == LLLLRRRR\nassert solution.pushDominoes(['.', 'R', 'R']) == .RR\nassert solution.pushDominoes(['L', 'L', 'R', 'R']) == LLRR\nassert solution.pushDominoes(['R', '.', 'L', '.']) == R.L.\nassert solution.pushDominoes(['.']) == .\nassert solution.pushDominoes(['L', 'L', 'L', 'R', 'R', '.', 'L', 'R', 'R']) == LLLRR.LRR\nassert solution.pushDominoes(['L']) == L\nassert solution.pushDominoes(['.', 'R', 'R', 'R']) == .RRR\nassert solution.pushDominoes(['R', 'L', '.', 'L']) == RLLL\nassert solution.pushDominoes(['R', 'L', 'L', 'L', 'R']) == RLLLR\nassert solution.pushDominoes(['L', 'L', 'R', 'L', '.', 'L', 'L']) == LLRLLLL\nassert solution.pushDominoes(['.', 'L', 'R', 'R', 'L', 'L', 'R']) == LLRRLLR\nassert solution.pushDominoes(['.', 'L']) == LL\nassert solution.pushDominoes(['.', 'L', '.']) == LL.\nassert solution.pushDominoes(['R', 'R']) == RR\nassert solution.pushDominoes(['L', '.', 'R', 'R', 'R', '.', '.']) == L.RRRRR\nassert solution.pushDominoes(['L', 'R']) == LR\nassert solution.pushDominoes(['L', 'R', '.', '.', 'L', '.', '.', 'L']) == LRRLLLLL\nassert solution.pushDominoes(['R', '.', '.', 'R', '.', 'R', 'L', '.']) == RRRRRRL.\nassert solution.pushDominoes(['R', 'R', '.', 'L', '.', '.', 'R', 'L']) == RR.L..RL\nassert solution.pushDominoes(['L', 'L', 'L', '.']) == LLL.\nassert solution.pushDominoes(['L', 'R', 'L', '.', 'L', 'L']) == LRLLLL\nassert solution.pushDominoes(['L', 'R', 'R', 'L']) == LRRL\nassert solution.pushDominoes(['R', '.', 'R']) == RRR\nassert solution.pushDominoes(['.', '.', 'L', '.', 'R']) == LLL.R\nassert solution.pushDominoes(['R', 'L', 'L', 'L', 'R']) == RLLLR\nassert solution.pushDominoes(['.', 'L', '.', '.', 'R', 'L']) == LL..RL\nassert solution.pushDominoes(['.', '.', 'R']) == ..R\nassert solution.pushDominoes(['.', 'L', 'L', 'L', 'R', 'L']) == LLLLRL\nassert solution.pushDominoes(['L', 'L', '.', 'L', '.', 'R', '.']) == LLLL.RR\nassert solution.pushDominoes(['.', 'R', '.', '.']) == .RRR\nassert solution.pushDominoes(['R', 'R', 'L', '.']) == RRL.\nassert solution.pushDominoes(['.', 'R', 'L', 'R', 'L', 'R', 'R', 'R']) == .RLRLRRR\nassert solution.pushDominoes(['R', 'L', '.', 'L', 'R', 'R', 'R', 'R']) == RLLLRRRR\nassert solution.pushDominoes(['R', '.', '.', 'R', 'L', '.']) == RRRRL.\nassert solution.pushDominoes(['R', 'L', '.', 'R']) == RL.R\nassert solution.pushDominoes(['L', '.', 'L']) == LLL\nassert solution.pushDominoes(['.', 'L', 'R', 'R', 'R', '.']) == LLRRRR\nassert solution.pushDominoes(['.', 'L', '.', 'R', '.']) == LL.RR\nassert solution.pushDominoes(['.', 'R', 'R', 'L', 'R', 'R']) == .RRLRR\nassert solution.pushDominoes(['R', 'L', 'L', 'R', '.', '.']) == RLLRRR\nassert solution.pushDominoes(['R']) == R\nassert solution.pushDominoes(['R', '.', 'L', 'R']) == R.LR\nassert solution.pushDominoes(['.', 'R', 'L', '.']) == .RL.\nassert solution.pushDominoes(['L']) == L\nassert solution.pushDominoes(['L', 'L', 'L', 'R', 'L']) == LLLRL\nassert solution.pushDominoes(['L', 'L', 'R', '.', '.', 'R']) == LLRRRR\nassert solution.pushDominoes(['R']) == R\nassert solution.pushDominoes(['R', 'R', 'R', '.', 'L', 'L']) == RRR.LL\nassert solution.pushDominoes(['L', 'R', '.', 'R', 'R', 'L', 'L', '.']) == LRRRRLL.\nassert solution.pushDominoes(['.']) == .\nassert solution.pushDominoes(['.', '.', 'L', '.', 'R', '.', 'L', 'L', '.', 'L']) == LLL.R.LLLL\nassert solution.pushDominoes(['L', 'R', '.']) == LRR\nassert solution.pushDominoes(['.', 'L', 'L', 'R', 'R', '.', '.']) == LLLRRRR\nassert solution.pushDominoes(['R', 'L', 'L', '.', '.', 'L', 'R', 'R', 'R']) == RLLLLLRRR\nassert solution.pushDominoes(['.', 'R', 'R', 'R', '.', 'L', 'R', 'R']) == .RRR.LRR\nassert solution.pushDominoes(['.', 'L', '.']) == LL.\nassert solution.pushDominoes(['.', '.']) == ..\nassert solution.pushDominoes(['.', 'R', 'R', '.', 'L', '.', '.', 'L']) == .RR.LLLL\nassert solution.pushDominoes(['L', 'L', 'R', 'L', 'L', '.', 'R']) == LLRLL.R\nassert solution.pushDominoes(['L']) == L\nassert solution.pushDominoes(['R', 'R', '.']) == RRR\nassert solution.pushDominoes(['R', 'R', '.', '.']) == RRRR\nassert solution.pushDominoes(['.', 'L', 'L', 'L']) == LLLL\nassert solution.pushDominoes(['R', 'L', 'R', '.', 'L', '.', 'R', 'R']) == RLR.L.RR\nassert solution.pushDominoes(['R', 'L', 'L']) == RLL\nassert solution.pushDominoes(['.']) == .\nassert solution.pushDominoes(['R']) == R\nassert solution.pushDominoes(['L', 'R', '.', 'L']) == LR.L\nassert solution.pushDominoes(['L', 'L', 'R', 'L', 'L', 'R', 'L', '.', 'L']) == LLRLLRLLL\nassert solution.pushDominoes(['.', '.', 'R', '.', 'L', 'R', 'L', '.', 'R']) == ..R.LRL.R\nassert solution.pushDominoes(['R', 'R', 'R', 'R', '.', 'L']) == RRRR.L\nassert solution.pushDominoes(['R', '.', 'L', 'L', '.', 'R', 'L', '.']) == R.LL.RL.\nassert solution.pushDominoes(['L', 'L']) == LL\nassert solution.pushDominoes(['.', '.', 'R', '.']) == ..RR\nassert solution.pushDominoes(['L']) == L\nassert solution.pushDominoes(['.', 'R', 'R', '.', '.', 'L', 'R', 'L']) == .RRRLLRL\nassert solution.pushDominoes(['R', 'R']) == RR\nassert solution.pushDominoes(['R', '.', 'R', 'R', 'R', 'L', 'L', 'L', '.', '.']) == RRRRRLLL..\nassert solution.pushDominoes(['L', 'R', 'L', 'R', 'R', 'L', 'L', 'L', 'R', 'L']) == LRLRRLLLRL\nassert solution.pushDominoes(['.']) == .\nassert solution.pushDominoes(['R', 'R', '.', 'L', 'R', 'L', 'R']) == RR.LRLR\nassert solution.pushDominoes(['R', '.', 'L', 'R', 'R', 'R', 'L', '.']) == R.LRRRL.\nassert solution.pushDominoes(['.', 'R']) == .R\nassert solution.pushDominoes(['.', '.', 'R', 'R', 'L']) == ..RRL\nassert solution.pushDominoes(['.', 'R', 'R', 'L', 'R']) == .RRLR\nassert solution.pushDominoes(['R', 'L', '.', '.', '.', 'L', '.', '.', 'R', 'L']) == RLLLLL..RL\nassert solution.pushDominoes(['L']) == L\nassert solution.pushDominoes(['L', '.', '.', 'L', 'L']) == LLLLL\nassert solution.pushDominoes(['.', '.', '.', 'L', '.', 'R']) == LLLL.R\nassert solution.pushDominoes(['.', '.']) == ..",
  "inefficient_solution": "class Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        arr = [0] * n\n        for i, f in enumerate(dominoes):\n            if f != '.':\n                arr[i] = 1 if f == 'R' else -1\n            else:\n                arr[i] = 0\n        arr = [0] * n + arr + [0] * n\n        for i in range(1, n + 1):\n            arr[i] += arr[i - 1]\n        for i in range(n - 1, -1, -1):\n            arr[i] += arr[i + 1]\n        ans = [''] * n\n        for i, f in enumerate(arr[:-2]):\n            if f == 0:\n                ans[i] = '.'\n            elif f > 0:\n                ans[i] = 'R'\n            else:\n                ans[i] = 'L'\n        return ''.join(ans)",
  "is_python": true
}