{
  "problem_idx": 1937,
  "task_name": "Maximum Number of Points with Cost",
  "markdown_description": "\nYou are given an `m x n` integer matrix `points` (**0-indexed**). Starting with `0` points, you want to **maximize** the number of points you can get from the matrix.\n\n\nTo gain points, you must pick one cell in **each row**. Picking the cell at coordinates `(r, c)` will **add** `points[r][c]` to your score.\n\n\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows `r` and `r + 1` (where `0 <= r < m - 1`), picking cells at coordinates `(r, c1)` and `(r + 1, c2)` will **subtract** `abs(c1 - c2)` from your score.\n\n\nReturn *the **maximum** number of points you can achieve*.\n\n\n`abs(x)` is defined as:\n\n\n* `x` for `x >= 0`.\n* `-x` for `x < 0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1937.Maximum%20Number%20of%20Points%20with%20Cost/images/screenshot-2021-07-12-at-13-40-26-diagram-drawio-diagrams-net.png)\n\n```\n\n**Input:** points = [[1,2,3],[1,5,1],[3,1,1]]\n**Output:** 9\n**Explanation:**\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).\nYou add 3 + 5 + 3 = 11 to your score.\nHowever, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.\nYour final score is 11 - 2 = 9.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1900-1999/1937.Maximum%20Number%20of%20Points%20with%20Cost/images/screenshot-2021-07-12-at-13-42-14-diagram-drawio-diagrams-net.png)\n\n```\n\n**Input:** points = [[1,5],[2,3],[4,2]]\n**Output:** 11\n**Explanation:**\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).\nYou add 5 + 3 + 4 = 12 to your score.\nHowever, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.\nYour final score is 12 - 1 = 11.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == points.length`\n* `n == points[r].length`\n* `1 <= m, n <= 105`\n* `1 <= m * n <= 105`\n* `0 <= points[r][c] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        n = len(points[0])\n        f = points[0][:]\n        for p in points[1:]:\n            g = [0] * n\n            lmx = -inf\n            for j in range(n):\n                lmx = max(lmx, f[j] + j)\n                g[j] = max(g[j], p[j] + lmx - j)\n            rmx = -inf\n            for j in range(n - 1, -1, -1):\n                rmx = max(rmx, f[j] - j)\n                g[j] = max(g[j], p[j] + rmx + j)\n            f = g\n        return max(f)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxPoints(self, points):\n        n = len(points[0])\n        f = points[0][:]\n        for p in points[1:]:\n            g = [0] * n\n            lmx = -float(\"inf\")\n            for j in range(n):\n                lmx = max(lmx, f[j] + j)\n                g[j] = max(g[j], p[j] + lmx - j)\n            rmx = -float(\"inf\")\n            for j in range(n - 1, -1, -1):\n                rmx = max(rmx, f[j] - j)\n                g[j] = max(g[j], p[j] + rmx + j)\n            f = g\n        return max(f)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random matrix\n    m = random.randint(1, 6)  # The number of rows\n    n = random.randint(1, 6)  # The number of columns\n    points = [[random.randint(0, 10) for _ in range(n)] for _ in range(m)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxPoints(points)\n\n    return points, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        points, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxPoints(points) == expected_result\n        print(f\"assert solution.maxPoints({points}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxPoints({points}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxPoints([[4, 3, 6], [1, 5, 5], [7, 8, 3]]) == 18\nassert solution.maxPoints([[10, 1, 1], [3, 7, 2], [1, 8, 0], [3, 3, 9], [7, 9, 10], [6, 2, 8]]) == 50\nassert solution.maxPoints([[9, 0, 9, 3, 10], [9, 10, 1, 0, 9], [4, 2, 7, 3, 6], [2, 3, 10, 9, 8]]) == 34\nassert solution.maxPoints([[6], [10]]) == 16\nassert solution.maxPoints([[5], [3]]) == 8\nassert solution.maxPoints([[3, 5, 6], [8, 0, 8]]) == 14\nassert solution.maxPoints([[6, 10, 0, 1]]) == 10\nassert solution.maxPoints([[9, 7, 10, 0]]) == 10\nassert solution.maxPoints([[7, 1], [2, 5], [9, 4], [5, 1], [9, 4]]) == 33\nassert solution.maxPoints([[5, 4, 4, 8, 1], [3, 3, 10, 9, 4], [2, 8, 6, 5, 7], [5, 3, 4, 6, 4], [3, 1, 1, 2, 2]]) == 31\nassert solution.maxPoints([[0], [0]]) == 0\nassert solution.maxPoints([[2, 10, 1, 6, 4], [6, 1, 8, 5, 1], [1, 4, 4, 0, 9], [3, 7, 9, 10, 1], [3, 0, 1, 7, 7]]) == 40\nassert solution.maxPoints([[3], [9]]) == 12\nassert solution.maxPoints([[1], [1]]) == 2\nassert solution.maxPoints([[8, 5, 10, 4, 8], [0, 3, 9, 1, 4], [3, 9, 4, 8, 4], [6, 0, 2, 8, 7], [4, 4, 10, 9, 3], [9, 10, 6, 1, 8]]) == 52\nassert solution.maxPoints([[4], [0], [2], [7], [5], [10]]) == 28\nassert solution.maxPoints([[9, 3, 7], [10, 5, 10]]) == 19\nassert solution.maxPoints([[5, 8, 5], [3, 3, 10]]) == 17\nassert solution.maxPoints([[8], [3]]) == 11\nassert solution.maxPoints([[3, 1], [1, 4], [0, 5]]) == 11\nassert solution.maxPoints([[4], [4], [1], [3], [2]]) == 14\nassert solution.maxPoints([[10, 4], [10, 6], [7, 3]]) == 27\nassert solution.maxPoints([[10]]) == 10\nassert solution.maxPoints([[7, 10, 8, 10, 6], [2, 7, 0, 10, 8], [7, 8, 1, 5, 1], [10, 6, 6, 6, 3]]) == 35\nassert solution.maxPoints([[10, 5, 3, 7, 8]]) == 10\nassert solution.maxPoints([[4, 8, 0, 1], [6, 8, 2, 9], [0, 6, 8, 0]]) == 23\nassert solution.maxPoints([[10, 4, 0], [9, 5, 1], [7, 1, 10]]) == 27\nassert solution.maxPoints([[5, 7, 3, 5, 10]]) == 10\nassert solution.maxPoints([[9, 7, 6, 10, 2, 9], [2, 7, 2, 5, 10, 9], [4, 4, 9, 5, 8, 7], [9, 7, 3, 0, 5, 4], [0, 3, 7, 8, 6, 2], [9, 7, 1, 4, 2, 7]]) == 45\nassert solution.maxPoints([[2, 8, 2, 7], [7, 9, 1, 5], [4, 7, 10, 1]]) == 26\nassert solution.maxPoints([[9, 3, 6], [6, 1, 2], [2, 7, 4], [0, 0, 7], [0, 5, 2]]) == 31\nassert solution.maxPoints([[6, 0, 3, 10], [6, 7, 8, 6], [10, 4, 0, 6], [0, 8, 9, 0]]) == 32\nassert solution.maxPoints([[2, 5, 7], [2, 5, 9], [8, 7, 3], [5, 1, 10], [0, 10, 0], [9, 3, 1]]) == 48\nassert solution.maxPoints([[1, 6, 1, 2, 5], [8, 1, 8, 3, 9], [1, 0, 4, 7, 7], [0, 6, 10, 2, 6]]) == 29\nassert solution.maxPoints([[10], [0], [6]]) == 16\nassert solution.maxPoints([[5, 9, 6, 9], [7, 7, 2, 0], [5, 1, 1, 8], [10, 3, 9, 10], [4, 6, 7, 10]]) == 42\nassert solution.maxPoints([[3], [6], [9]]) == 18\nassert solution.maxPoints([[3], [4], [9], [2], [8], [8]]) == 34\nassert solution.maxPoints([[6], [6], [10]]) == 22\nassert solution.maxPoints([[4, 5, 1], [6, 9, 3], [10, 2, 7], [4, 3, 9], [1, 7, 0], [0, 7, 5]]) == 43\nassert solution.maxPoints([[1, 2, 5, 4, 7, 0], [2, 5, 1, 10, 4, 8], [0, 5, 8, 0, 2, 2], [4, 3, 6, 0, 4, 5], [1, 10, 2, 9, 6, 10]]) == 38\nassert solution.maxPoints([[8, 5], [5, 1], [8, 6], [4, 6], [5, 10]]) == 36\nassert solution.maxPoints([[3, 9, 0, 3, 6, 0], [2, 3, 3, 8, 9, 2], [4, 3, 1, 3, 2, 0], [10, 2, 0, 5, 3, 7]]) == 26\nassert solution.maxPoints([[10, 0, 1, 3, 6, 3], [9, 6, 2, 9, 10, 5]]) == 19\nassert solution.maxPoints([[4, 9, 9], [6, 6, 7], [1, 1, 0]]) == 16\nassert solution.maxPoints([[6], [5], [6], [9]]) == 26\nassert solution.maxPoints([[0, 8, 7, 10, 9], [1, 4, 3, 4, 3], [5, 2, 8, 10, 10], [1, 0, 8, 9, 0]]) == 33\nassert solution.maxPoints([[7, 2, 1, 6, 5], [8, 9, 1, 10, 10], [0, 8, 1, 2, 8]]) == 23\nassert solution.maxPoints([[5, 6, 10, 5, 3], [2, 8, 10, 3, 3]]) == 20\nassert solution.maxPoints([[9, 0], [1, 2], [5, 3]]) == 15\nassert solution.maxPoints([[10, 1, 7], [5, 0, 10], [8, 5, 4], [9, 2, 1], [3, 8, 2]]) == 40\nassert solution.maxPoints([[0, 1]]) == 1\nassert solution.maxPoints([[9], [9], [2], [3], [8], [1]]) == 32\nassert solution.maxPoints([[2, 7, 0, 6, 0, 5], [2, 6, 1, 2, 4, 2], [1, 7, 0, 1, 2, 4], [7, 2, 4, 5, 6, 4], [3, 4, 10, 0, 3, 10]]) == 34\nassert solution.maxPoints([[1, 8, 6, 0, 9, 8], [0, 2, 5, 8, 5, 7], [1, 1, 1, 10, 9, 10], [8, 0, 4, 1, 4, 0], [4, 0, 0, 4, 2, 4], [10, 4, 3, 2, 4, 2]]) == 45\nassert solution.maxPoints([[4], [3], [5]]) == 12\nassert solution.maxPoints([[2, 6, 1]]) == 6\nassert solution.maxPoints([[1, 4, 0, 5], [2, 8, 1, 8]]) == 13\nassert solution.maxPoints([[5], [10], [8]]) == 23\nassert solution.maxPoints([[5, 2, 9]]) == 9\nassert solution.maxPoints([[0, 3, 1, 8], [5, 9, 8, 9], [6, 5, 2, 0], [2, 9, 2, 2], [7, 3, 0, 5], [8, 3, 9, 9]]) == 43\nassert solution.maxPoints([[3], [6], [9], [10], [7], [5]]) == 40\nassert solution.maxPoints([[7, 1, 2, 0, 4, 1], [4, 0, 7, 10, 4, 7], [7, 10, 2, 0, 4, 1], [6, 1, 9, 8, 9, 8], [5, 7, 2, 0, 9, 6]]) == 37\nassert solution.maxPoints([[0, 4, 3, 1], [2, 2, 6, 5], [9, 4, 1, 7], [10, 7, 10, 5], [8, 9, 3, 10]]) == 34\nassert solution.maxPoints([[3, 5, 10, 10], [9, 9, 1, 10], [1, 0, 3, 6], [0, 7, 9, 2]]) == 34\nassert solution.maxPoints([[5, 6], [8, 6]]) == 13\nassert solution.maxPoints([[8, 3, 3, 7, 10, 6], [7, 4, 0, 0, 5, 8], [2, 6, 0, 10, 7, 5], [4, 8, 1, 8, 3, 4], [2, 7, 0, 1, 3, 5], [3, 6, 8, 3, 7, 6]]) == 45\nassert solution.maxPoints([[1, 5, 4, 10], [5, 2, 3, 8], [4, 1, 4, 10], [7, 7, 1, 2]]) == 33\nassert solution.maxPoints([[10], [9]]) == 19\nassert solution.maxPoints([[10], [2], [2], [4]]) == 18\nassert solution.maxPoints([[6], [5], [8], [4], [2]]) == 25\nassert solution.maxPoints([[0, 10], [1, 2], [3, 9], [1, 6], [5, 5]]) == 32\nassert solution.maxPoints([[6, 8, 0, 9, 9], [3, 9, 3, 3, 2]]) == 17\nassert solution.maxPoints([[6, 7, 3], [7, 3, 3], [2, 4, 4], [0, 7, 10], [0, 3, 6], [0, 7, 6]]) == 37\nassert solution.maxPoints([[1, 9, 5, 8, 7, 1], [0, 5, 6, 6, 4, 1]]) == 14\nassert solution.maxPoints([[5, 5, 4], [1, 6, 10], [5, 9, 0], [2, 9, 8]]) == 31\nassert solution.maxPoints([[3, 4, 4, 10, 2], [0, 9, 3, 1, 10], [2, 3, 4, 6, 7]]) == 26\nassert solution.maxPoints([[0, 6, 9, 0, 10, 2], [0, 1, 8, 1, 5, 1], [8, 2, 3, 6, 0, 6]]) == 23\nassert solution.maxPoints([[10, 5], [7, 4], [9, 4], [3, 10]]) == 35\nassert solution.maxPoints([[7, 8, 2, 5, 10], [0, 3, 4, 7, 6], [9, 7, 0, 9, 1], [6, 7, 5, 7, 10], [4, 2, 4, 8, 9], [9, 8, 9, 3, 6]]) == 50\nassert solution.maxPoints([[4, 1], [5, 1], [3, 10], [7, 8], [5, 7]]) == 33\nassert solution.maxPoints([[0, 0, 8, 8], [7, 6, 5, 10], [2, 9, 9, 1], [5, 8, 4, 5], [4, 4, 4, 9], [3, 1, 9, 1]]) == 48\nassert solution.maxPoints([[10, 6, 9], [3, 2, 6], [6, 1, 1]]) == 19\nassert solution.maxPoints([[7, 0, 10, 4]]) == 10\nassert solution.maxPoints([[8, 2, 0, 2], [2, 2, 2, 1]]) == 10\nassert solution.maxPoints([[9, 1, 7, 8, 4]]) == 9\nassert solution.maxPoints([[0, 9, 1, 7, 3], [0, 3, 10, 7, 2], [2, 10, 2, 3, 1], [8, 8, 4, 8, 1]]) == 35\nassert solution.maxPoints([[10]]) == 10\nassert solution.maxPoints([[10, 3, 8], [2, 8, 10], [8, 7, 6], [5, 1, 7]]) == 31\nassert solution.maxPoints([[10, 0], [9, 10], [3, 2], [0, 7], [7, 0], [6, 8]]) == 41\nassert solution.maxPoints([[10, 6, 7], [7, 8, 6], [9, 8, 0], [10, 8, 10], [3, 0, 7]]) == 41\nassert solution.maxPoints([[8, 6, 6, 7], [10, 0, 0, 10], [7, 6, 1, 6], [1, 10, 6, 4], [10, 7, 1, 10]]) == 43\nassert solution.maxPoints([[7, 7, 1, 9, 8]]) == 9\nassert solution.maxPoints([[6, 2, 5, 4, 8, 4]]) == 8\nassert solution.maxPoints([[9, 5], [2, 0], [5, 3], [9, 2], [8, 10]]) == 34\nassert solution.maxPoints([[7, 1, 7], [6, 8, 7], [0, 8, 9]]) == 23\nassert solution.maxPoints([[9, 8, 2, 1, 0, 0], [0, 4, 5, 6, 0, 1], [0, 3, 9, 7, 4, 9], [6, 10, 10, 4, 1, 9], [4, 2, 10, 8, 6, 4]]) == 41\nassert solution.maxPoints([[5, 8, 7, 0], [9, 10, 10, 3], [8, 3, 9, 3], [1, 1, 1, 7], [7, 9, 0, 4], [3, 2, 1, 7]]) == 44\nassert solution.maxPoints([[2, 9, 0, 10, 2, 10]]) == 10\nassert solution.maxPoints([[6, 1, 7, 9, 1, 8], [7, 10, 4, 1, 4, 6], [7, 4, 2, 6, 7, 10], [4, 4, 9, 0, 3, 7]]) == 31",
  "inefficient_solution": "class Solution:\n    def maxPoints(self, points: List[List[int]]) -> int:\n        m, n = len(points), len(points[0])\n        f = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                for k in range(m):\n                    if k != i:\n                        for l in range(n):\n                            if l != j:\n                                f[i][j] = max(f[i][j], points[k][l] + abs(k - i) * abs(l - j))\n        return max(max(row) for row in f)",
  "is_python": true
}