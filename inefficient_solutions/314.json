{
  "problem_idx": 314,
  "task_name": "Binary Tree Vertical Order Traversal",
  "markdown_description": "\nGiven the `root` of a binary tree, return ***the vertical order traversal** of its nodes' values*. (i.e., from top to bottom, column by column).\n\n\nIf two nodes are in the same row and column, the order should be from **left to right**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree1.jpg)\n\n```\n\n**Input:** root = [3,9,20,null,null,15,7]\n**Output:** [[9],[3,15],[20],[7]]\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree2-1.jpg)\n\n```\n\n**Input:** root = [3,9,8,4,0,1,7]\n**Output:** [[4],[9],[3,0,1],[8],[7]]\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0314.Binary%20Tree%20Vertical%20Order%20Traversal/images/vtree2.jpg)\n\n```\n\n**Input:** root = [3,9,8,4,0,1,7,null,null,null,2,5]\n**Output:** [[4],[9,5],[3,0,1],[8,2],[7]]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 100]`.\n* `-100 <= Node.val <= 100`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        q = deque([(root, 0)])\n        d = defaultdict(list)\n        while q:\n            for _ in range(len(q)):\n                root, offset = q.popleft()\n                d[offset].append(root.val)\n                if root.left:\n                    q.append((root.left, offset - 1))\n                if root.right:\n                    q.append((root.right, offset + 1))\n        return [v for _, v in sorted(d.items())]\n",
  "test_case_generator": "\nimport random\nfrom collections import deque, defaultdict\nfrom typing import List, Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        q = deque([(root, 0)])\n        d = defaultdict(list)\n        while q:\n            for _ in range(len(q)):\n                root, offset = q.popleft()\n                d[offset].append(root.val)\n                if root.left:\n                    q.append((root.left, offset - 1))\n                if root.right:\n                    q.append((root.right, offset + 1))\n        return [v for _, v in sorted(d.items())]\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random binary tree\n\n    def create_tree(nodes, idx):\n        if idx >= len(nodes) or nodes[idx] is None:\n            return None\n        root = TreeNode(nodes[idx])\n        root.left = create_tree(nodes, 2 * idx + 1)\n        root.right = create_tree(nodes, 2 * idx + 2)\n        return root\n\n    nodes = []\n    for i in range(random.randint(1, 10)):\n        if random.random() < 0.3:\n            nodes.append(None)\n        else:\n            nodes.append(random.randint(-100, 100))\n    tree = create_tree(nodes, 0)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.verticalOrder(tree)\n\n    return tree, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tree, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.verticalOrder(tree) == expected_result\n        print(f\"assert solution.verticalOrder({tree}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.verticalOrder({tree}) == {expected_result}\")  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e534dd0>) == [[46], [-10], [49, 15, -46], [-80, -83]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e534f10>) == [[10], [-47]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5351d0>) == [[-91], [-59], [19], [82], [-38], [2]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535610>) == [[-81], [-28], [9], [-59]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535210>) == [[-1], [29, -3], [82, 13]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535690>) == [[87], [-53], [-26], [-76]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5355d0>) == [[-38]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535990>) == [[-87], [-90, -50, 31], [-35]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535cd0>) == [[-4], [30], [87, -99], [-52, -25, -93], [-32]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536010>) == [[38]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535e50>) == [[6]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535cd0>) == [[-8], [-47], [-94]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[63], [-23], [-10, -94, 97], [89], [61]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535d10>) == [[84], [-13], [-25, 26], [-95, 60], [52], [93]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[-86], [88], [-85, 30, -86], [99, 21]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536190>) == [[-78], [25]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5363d0>) == [[57], [-22, 50]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536110>) == [[-98], [-20]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5363d0>) == [[64], [-48, -96]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536450>) == [[92], [-68]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536710>) == [[-42]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536190>) == [[-8], [58]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536710>) == [[-46], [32], [-50]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535cd0>) == [[-66], [39], [-69]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[-20], [94], [-39, 10], [-65]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535cd0>) == [[-35], [-78], [56], [-64]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5363d0>) == [[75], [19], [-19, -66], [-60], [-54]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536550>) == [[28], [98, 28], [-76]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536710>) == [[25], [-63], [27], [-71]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[-8]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536690>) == [[-44], [57]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[-1]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536710>) == [[61]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5365d0>) == [[89], [-75], [-68, -98, -46], [-15]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535cd0>) == [[8], [18], [38]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535dd0>) == [[-71], [90, -25, 88], [-94]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536750>) == [[91], [36, -77], [2]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[66], [-78], [-84]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536110>) == [[17]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[82], [-37, -63], [89, -48], [-85], [76]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535d10>) == [[89], [-100], [-81], [64]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536590>) == [[2], [84], [-41], [44], [-92]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536410>) == [[80]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536410>) == [[99], [31]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535cd0>) == [[6], [77, 18], [-46, -71, -81], [-54], [-75]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536750>) == [[-56], [4]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535d10>) == [[-10], [-58]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536110>) == [[71], [76]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536290>) == [[-2]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536290>) == [[13], [-8]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536410>) == [[-59], [25, 53], [66], [-2]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535cd0>) == [[-77], [-64], [-58, -63], [-6]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536790>) == [[72], [-2], [84, 20], [26]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[-94], [64, -20], [76]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536210>) == [[-53]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536150>) == [[41], [58]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536790>) == [[-46, 89], [10], [9]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536310>) == [[43], [38]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536210>) == [[95], [89], [24]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5365d0>) == [[30], [-1], [64], [-22]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536610>) == [[6], [78], [-98]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e535cd0>) == [[-28], [-45], [-18], [-11, 8]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5365d0>) == [[1], [31, 77], [88], [52]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536710>) == [[42]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536390>) == [[31], [-100], [-93]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536550>) == [[-40], [-67]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536590>) == [[-96, 80], [22], [13]]\nassert solution.verticalOrder(None) == []\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536650>) == [[98], [24], [-46], [-6]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e536690>) == [[9]]\nassert solution.verticalOrder(<__main__.TreeNode object at 0x7f907e5366d0>) == [[43]]\nassert solution.verticalOrder(None) == []",
  "inefficient_solution": "class Solution:\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n        if root is None:\n            return []\n        all_nodes = []\n        for i in range(101):\n            for j in range(101):\n                all_nodes.append((root, i, j))\n        d = defaultdict(list)\n        while all_nodes:\n            node, x, y = all_nodes.pop()\n            d[(x, y)].append(node.val)\n            if node.left:\n                all_nodes.append((node.left, x - 1, y - 1))\n            if node.right:\n                all_nodes.append((node.right, x + 1, y + 1))\n        result = []\n        for key in sorted(d.keys()):\n            result.append(d[key])\n        return result",
  "is_python": true
}