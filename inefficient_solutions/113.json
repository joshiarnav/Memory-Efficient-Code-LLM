{
  "problem_idx": 113,
  "task_name": "Path Sum II",
  "markdown_description": "\nGiven the `root` of a binary tree and an integer `targetSum`, return *all **root-to-leaf** paths where the sum of the node values in the path equals* `targetSum`*. Each path should be returned as a list of the node **values**, not node references*.\n\n\nA **root-to-leaf** path is a path starting from the root and ending at any leaf node. A **leaf** is a node with no children.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0113.Path%20Sum%20II/images/pathsumii1.jpg)\n\n```\n\n**Input:** root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n**Output:** [[5,4,11,2],[5,8,4,5]]\n**Explanation:** There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0113.Path%20Sum%20II/images/pathsum2.jpg)\n\n```\n\n**Input:** root = [1,2,3], targetSum = 5\n**Output:** []\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [1,2], targetSum = 0\n**Output:** []\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 5000]`.\n* `-1000 <= Node.val <= 1000`\n* `-1000 <= targetSum <= 1000`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        def dfs(root, s):\n            if root is None:\n                return\n            s += root.val\n            t.append(root.val)\n            if root.left is None and root.right is None and s == targetSum:\n                ans.append(t[:])\n            dfs(root.left, s)\n            dfs(root.right, s)\n            t.pop()\n\n        ans = []\n        t = []\n        dfs(root, 0)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List, Optional\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:\n        def dfs(root, s):\n            if root is None:\n                return\n            s += root.val\n            t.append(root.val)\n            if root.left is None and root.right is None and s == targetSum:\n                ans.append(t[:])\n            dfs(root.left, s)\n            dfs(root.right, s)\n            t.pop()\n\n        ans = []\n        t = []\n        dfs(root, 0)\n        return ans\n\n        \ndef generate_test_case():\n    solution = Solution()\n    test_case_generator_results = []\n    for i in range(100):\n        # Generate random tree\n        test_tree = generate_tree()\n        target = random.randint(-1000,1000)\n\n        # Calculate the expected result using the provided Solution class\n        expected_result = solution.pathSum(test_tree, target)\n \n        test_case_generator_results.append(f\"assert solution.pathSum({tree_string(test_tree)}, {target}) == {expected_result}\")\n    return test_case_generator_results\n\ndef generate_tree():\n    \"\"\"\n    Generate a random binary tree.\n    \"\"\"\n    val = random.randint(-1000, 1000)\n    node = TreeNode(val)\n    if random.random() < 0.3:\n        node.left = generate_tree()\n    if random.random() < 0.3:\n        node.right = generate_tree()\n    return node\n\ndef tree_string(root):\n    \"\"\"\n    Generate string representation of a binary tree.\n    \"\"\"\n    if root is None:\n        return \"None\"\n\n    left = tree_string(root.left)\n    right = tree_string(root.right)\n\n    return f\"TreeNode({root.val}, {left}, {right})\"\n\nif __name__ == \"__main__\":\n    test_case_generator_results = generate_test_case()\n",
  "test_case": "assert solution.pathSum(TreeNode(-657, TreeNode(663, None, None), TreeNode(-144, TreeNode(-816, None, None), TreeNode(825, None, None))), 836) == []\nassert solution.pathSum(TreeNode(-236, TreeNode(721, TreeNode(-691, TreeNode(966, None, None), None), None), None), -783) == []\nassert solution.pathSum(TreeNode(-438, None, None), -303) == []\nassert solution.pathSum(TreeNode(-467, None, TreeNode(231, TreeNode(663, TreeNode(283, TreeNode(-193, None, TreeNode(990, TreeNode(767, TreeNode(653, None, None), TreeNode(589, TreeNode(-808, None, TreeNode(835, None, None)), TreeNode(31, None, TreeNode(-825, TreeNode(922, None, None), None)))), None)), None), None), None)), -641) == []\nassert solution.pathSum(TreeNode(-78, TreeNode(-776, None, None), None), 818) == []\nassert solution.pathSum(TreeNode(-400, None, None), -394) == []\nassert solution.pathSum(TreeNode(-796, None, TreeNode(959, TreeNode(-285, None, None), None)), -874) == []\nassert solution.pathSum(TreeNode(412, None, None), -133) == []\nassert solution.pathSum(TreeNode(129, None, None), 712) == []\nassert solution.pathSum(TreeNode(-682, TreeNode(-554, TreeNode(886, None, None), None), None), -733) == []\nassert solution.pathSum(TreeNode(911, None, None), -888) == []\nassert solution.pathSum(TreeNode(275, TreeNode(321, None, None), None), 375) == []\nassert solution.pathSum(TreeNode(-957, TreeNode(-946, TreeNode(144, TreeNode(-780, None, TreeNode(648, None, None)), TreeNode(-178, None, TreeNode(-503, None, None))), TreeNode(-846, None, None)), None), -122) == []\nassert solution.pathSum(TreeNode(477, None, TreeNode(598, None, TreeNode(251, TreeNode(744, None, None), TreeNode(176, None, TreeNode(-291, None, None))))), -661) == []\nassert solution.pathSum(TreeNode(535, TreeNode(484, None, None), TreeNode(-179, None, None)), 216) == []\nassert solution.pathSum(TreeNode(-210, TreeNode(-919, TreeNode(-114, None, TreeNode(917, None, None)), TreeNode(374, None, None)), None), 863) == []\nassert solution.pathSum(TreeNode(701, None, None), -631) == []\nassert solution.pathSum(TreeNode(-611, None, None), -122) == []\nassert solution.pathSum(TreeNode(-960, TreeNode(-222, None, TreeNode(-383, None, None)), None), 745) == []\nassert solution.pathSum(TreeNode(-590, None, None), 224) == []\nassert solution.pathSum(TreeNode(236, TreeNode(330, TreeNode(-385, TreeNode(324, TreeNode(587, None, None), None), None), TreeNode(-142, None, None)), None), -849) == []\nassert solution.pathSum(TreeNode(242, TreeNode(425, None, None), None), -361) == []\nassert solution.pathSum(TreeNode(-715, None, None), -754) == []\nassert solution.pathSum(TreeNode(202, None, None), 268) == []\nassert solution.pathSum(TreeNode(479, None, TreeNode(-864, None, None)), 431) == []\nassert solution.pathSum(TreeNode(-699, None, None), -477) == []\nassert solution.pathSum(TreeNode(-505, TreeNode(-590, None, TreeNode(569, None, TreeNode(580, TreeNode(648, None, None), None))), None), 371) == []\nassert solution.pathSum(TreeNode(-319, None, TreeNode(28, None, None)), 439) == []\nassert solution.pathSum(TreeNode(137, TreeNode(-61, None, TreeNode(-623, TreeNode(426, None, None), TreeNode(-448, None, TreeNode(637, None, None)))), TreeNode(-701, None, None)), -244) == []\nassert solution.pathSum(TreeNode(-56, None, None), -503) == []\nassert solution.pathSum(TreeNode(863, None, TreeNode(-243, TreeNode(-5, None, None), None)), -717) == []\nassert solution.pathSum(TreeNode(137, None, None), 929) == []\nassert solution.pathSum(TreeNode(-272, None, TreeNode(-103, TreeNode(-95, None, None), None)), -892) == []\nassert solution.pathSum(TreeNode(-97, None, None), 59) == []\nassert solution.pathSum(TreeNode(963, None, TreeNode(963, TreeNode(-147, None, None), TreeNode(829, None, TreeNode(-249, None, None)))), -946) == []\nassert solution.pathSum(TreeNode(-661, None, None), -395) == []\nassert solution.pathSum(TreeNode(-806, None, None), 921) == []\nassert solution.pathSum(TreeNode(686, None, TreeNode(861, TreeNode(-570, None, TreeNode(-268, None, None)), None)), -735) == []\nassert solution.pathSum(TreeNode(-934, None, None), 647) == []\nassert solution.pathSum(TreeNode(-826, None, TreeNode(815, None, None)), 751) == []\nassert solution.pathSum(TreeNode(-341, None, None), -452) == []\nassert solution.pathSum(TreeNode(-912, None, TreeNode(5, None, None)), -203) == []\nassert solution.pathSum(TreeNode(-152, None, TreeNode(-325, None, TreeNode(-681, TreeNode(795, None, None), None))), 182) == []\nassert solution.pathSum(TreeNode(-755, TreeNode(994, None, None), None), 882) == []\nassert solution.pathSum(TreeNode(270, None, None), -597) == []\nassert solution.pathSum(TreeNode(729, None, None), -956) == []\nassert solution.pathSum(TreeNode(855, None, None), 253) == []\nassert solution.pathSum(TreeNode(843, None, TreeNode(362, None, None)), 347) == []\nassert solution.pathSum(TreeNode(227, TreeNode(-876, None, None), None), 360) == []\nassert solution.pathSum(TreeNode(-699, TreeNode(-865, TreeNode(98, None, None), None), None), -259) == []\nassert solution.pathSum(TreeNode(-319, TreeNode(538, None, None), None), 105) == []\nassert solution.pathSum(TreeNode(-133, None, TreeNode(-419, None, None)), 819) == []\nassert solution.pathSum(TreeNode(-767, None, None), 353) == []\nassert solution.pathSum(TreeNode(-416, TreeNode(660, None, None), None), -437) == []\nassert solution.pathSum(TreeNode(610, None, TreeNode(-242, None, None)), 62) == []\nassert solution.pathSum(TreeNode(916, None, TreeNode(330, None, None)), 505) == []\nassert solution.pathSum(TreeNode(-248, TreeNode(733, None, None), None), -192) == []\nassert solution.pathSum(TreeNode(247, None, None), -188) == []\nassert solution.pathSum(TreeNode(-821, TreeNode(163, None, None), None), 994) == []\nassert solution.pathSum(TreeNode(29, None, None), -179) == []\nassert solution.pathSum(TreeNode(241, None, TreeNode(-8, None, None)), 735) == []\nassert solution.pathSum(TreeNode(-408, TreeNode(180, None, TreeNode(-962, None, None)), None), 743) == []\nassert solution.pathSum(TreeNode(-727, TreeNode(129, TreeNode(-57, TreeNode(-864, TreeNode(398, None, None), TreeNode(358, None, None)), None), None), TreeNode(-578, TreeNode(645, TreeNode(-79, TreeNode(-813, None, None), None), None), None)), 35) == []\nassert solution.pathSum(TreeNode(-930, None, TreeNode(-565, None, None)), 233) == []\nassert solution.pathSum(TreeNode(-931, None, None), 502) == []\nassert solution.pathSum(TreeNode(-84, None, TreeNode(-307, None, TreeNode(-364, None, TreeNode(-393, None, None)))), 425) == []\nassert solution.pathSum(TreeNode(-520, TreeNode(336, TreeNode(-361, None, None), None), TreeNode(-766, None, TreeNode(-745, None, None))), -728) == []\nassert solution.pathSum(TreeNode(-402, None, TreeNode(593, None, None)), -635) == []\nassert solution.pathSum(TreeNode(847, None, None), 180) == []\nassert solution.pathSum(TreeNode(-672, None, None), 317) == []\nassert solution.pathSum(TreeNode(556, None, None), -648) == []\nassert solution.pathSum(TreeNode(180, None, None), 58) == []\nassert solution.pathSum(TreeNode(-317, None, TreeNode(366, None, TreeNode(-303, None, None))), -1000) == []\nassert solution.pathSum(TreeNode(-616, None, None), -557) == []\nassert solution.pathSum(TreeNode(266, TreeNode(-287, None, TreeNode(-226, None, None)), TreeNode(-11, TreeNode(-563, None, None), None)), 548) == []\nassert solution.pathSum(TreeNode(-462, None, None), -895) == []\nassert solution.pathSum(TreeNode(-141, None, None), 793) == []\nassert solution.pathSum(TreeNode(116, TreeNode(863, None, None), None), 373) == []\nassert solution.pathSum(TreeNode(171, None, TreeNode(270, None, None)), 112) == []\nassert solution.pathSum(TreeNode(-980, None, TreeNode(360, TreeNode(-951, None, TreeNode(-337, None, None)), TreeNode(430, None, TreeNode(931, None, TreeNode(-373, None, None))))), 651) == []\nassert solution.pathSum(TreeNode(202, None, TreeNode(-815, TreeNode(-780, None, TreeNode(257, TreeNode(56, None, None), None)), None)), 3) == []\nassert solution.pathSum(TreeNode(-620, None, TreeNode(844, None, TreeNode(924, None, TreeNode(600, None, None)))), 595) == []\nassert solution.pathSum(TreeNode(802, TreeNode(313, None, TreeNode(88, None, None)), TreeNode(799, None, TreeNode(-228, TreeNode(614, None, TreeNode(131, None, None)), None))), 423) == []\nassert solution.pathSum(TreeNode(416, TreeNode(868, None, None), None), 77) == []\nassert solution.pathSum(TreeNode(55, None, TreeNode(-526, TreeNode(754, None, None), None)), 97) == []\nassert solution.pathSum(TreeNode(939, None, None), -298) == []\nassert solution.pathSum(TreeNode(908, None, None), 560) == []\nassert solution.pathSum(TreeNode(-360, None, None), 437) == []\nassert solution.pathSum(TreeNode(-498, TreeNode(-780, None, None), TreeNode(395, TreeNode(48, TreeNode(-431, None, None), None), TreeNode(472, None, None))), -254) == []\nassert solution.pathSum(TreeNode(464, TreeNode(-36, None, None), None), 811) == []\nassert solution.pathSum(TreeNode(-719, TreeNode(-458, None, TreeNode(566, None, None)), None), -303) == []\nassert solution.pathSum(TreeNode(638, None, None), -115) == []\nassert solution.pathSum(TreeNode(-410, None, None), 511) == []\nassert solution.pathSum(TreeNode(187, None, TreeNode(-536, None, None)), 281) == []\nassert solution.pathSum(TreeNode(846, None, None), -947) == []\nassert solution.pathSum(TreeNode(861, None, TreeNode(-585, None, TreeNode(-87, None, None))), 395) == []\nassert solution.pathSum(TreeNode(-30, None, None), 754) == []\nassert solution.pathSum(TreeNode(-985, TreeNode(839, None, None), None), 473) == []\nassert solution.pathSum(TreeNode(-427, None, None), -493) == []\nassert solution.pathSum(TreeNode(677, None, None), -668) == []",
  "inefficient_solution": "",
  "is_python": true
}