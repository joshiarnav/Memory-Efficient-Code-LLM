{
  "problem_idx": 2024,
  "task_name": "Maximize the Confusion of an Exam",
  "markdown_description": "\nA teacher is writing a test with `n` true/false questions, with `'T'` denoting true and `'F'` denoting false. He wants to confuse the students by **maximizing** the number of **consecutive** questions with the **same** answer (multiple trues or multiple falses in a row).\n\n\nYou are given a string `answerKey`, where `answerKey[i]` is the original answer to the `ith` question. In addition, you are given an integer `k`, the maximum number of times you may perform the following operation:\n\n\n* Change the answer key for any question to `'T'` or `'F'` (i.e., set `answerKey[i]` to `'T'` or `'F'`).\n\n\nReturn *the **maximum** number of consecutive* `'T'`s or `'F'`s *in the answer key after performing the operation at most* `k` *times*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** answerKey = \"TTFF\", k = 2\n**Output:** 4\n**Explanation:** We can replace both the 'F's with 'T's to make answerKey = \"TTTT\".\nThere are four consecutive 'T's.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** answerKey = \"TFFT\", k = 1\n**Output:** 3\n**Explanation:** We can replace the first 'T' with an 'F' to make answerKey = \"FFFT\".\nAlternatively, we can replace the second 'T' with an 'F' to make answerKey = \"TFFF\".\nIn both cases, there are three consecutive 'F's.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** answerKey = \"TTFTTFTT\", k = 1\n**Output:** 5\n**Explanation:** We can replace the first 'F' to make answerKey = \"TTTTTFTT\"\nAlternatively, we can replace the second 'F' to make answerKey = \"TTFTTTTT\". \nIn both cases, there are five consecutive 'T's.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == answerKey.length`\n* `1 <= n <= 5 * 104`\n* `answerKey[i]` is either `'T'` or `'F'`\n* `1 <= k <= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:\n        def get(c, k):\n            l = r = -1\n            while r < len(answerKey) - 1:\n                r += 1\n                if answerKey[r] == c:\n                    k -= 1\n                if k < 0:\n                    l += 1\n                    if answerKey[l] == c:\n                        k += 1\n            return r - l\n\n        return max(get('T', k), get('F', k))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:\n        def get(c, k):\n            l = r = -1\n            while r < len(answerKey) - 1:\n                r += 1\n                if answerKey[r] == c:\n                    k -= 1\n                if k < 0:\n                    l += 1\n                    if answerKey[l] == c:\n                        k += 1\n            return r - l\n\n        return max(get('T', k), get('F', k))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random answer keys list\n    answerKey = ''.join(random.choices(['T', 'F'], k=random.randint(1, 10)))\n    \n    # Generate a random k value\n    k = random.randint(1, len(answerKey))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxConsecutiveAnswers(answerKey, k)\n\n    return answerKey, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        answerKey, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxConsecutiveAnswers(answerKey, k) == expected_result\n        print(f\"assert solution.maxConsecutiveAnswers('{answerKey}', {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxConsecutiveAnswers('{answerKey}', {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxConsecutiveAnswers('TFFF', 4) == 4\nassert solution.maxConsecutiveAnswers('FFFTTTTFFF', 3) == 7\nassert solution.maxConsecutiveAnswers('TTTTFFT', 6) == 7\nassert solution.maxConsecutiveAnswers('FF', 1) == 2\nassert solution.maxConsecutiveAnswers('FTFF', 4) == 4\nassert solution.maxConsecutiveAnswers('FFT', 2) == 3\nassert solution.maxConsecutiveAnswers('TF', 2) == 2\nassert solution.maxConsecutiveAnswers('FFFTTTTTF', 1) == 6\nassert solution.maxConsecutiveAnswers('FT', 2) == 2\nassert solution.maxConsecutiveAnswers('FFF', 3) == 3\nassert solution.maxConsecutiveAnswers('FFFTFTF', 6) == 7\nassert solution.maxConsecutiveAnswers('TTF', 3) == 3\nassert solution.maxConsecutiveAnswers('FF', 1) == 2\nassert solution.maxConsecutiveAnswers('TTTTF', 1) == 5\nassert solution.maxConsecutiveAnswers('TTFTTT', 1) == 6\nassert solution.maxConsecutiveAnswers('TFTFF', 5) == 5\nassert solution.maxConsecutiveAnswers('TTTF', 2) == 4\nassert solution.maxConsecutiveAnswers('TFTFTTTTFF', 3) == 9\nassert solution.maxConsecutiveAnswers('FF', 2) == 2\nassert solution.maxConsecutiveAnswers('TTTFFF', 1) == 4\nassert solution.maxConsecutiveAnswers('TF', 1) == 2\nassert solution.maxConsecutiveAnswers('TFFTFTTFTF', 10) == 10\nassert solution.maxConsecutiveAnswers('F', 1) == 1\nassert solution.maxConsecutiveAnswers('FFFFFFTFTT', 7) == 10\nassert solution.maxConsecutiveAnswers('FF', 1) == 2\nassert solution.maxConsecutiveAnswers('TTFFFTTF', 3) == 7\nassert solution.maxConsecutiveAnswers('FTTFTFT', 4) == 7\nassert solution.maxConsecutiveAnswers('TFFFT', 4) == 5\nassert solution.maxConsecutiveAnswers('TFFTF', 4) == 5\nassert solution.maxConsecutiveAnswers('FFTTTF', 2) == 5\nassert solution.maxConsecutiveAnswers('FTTF', 1) == 3\nassert solution.maxConsecutiveAnswers('F', 1) == 1\nassert solution.maxConsecutiveAnswers('TFFFT', 3) == 5\nassert solution.maxConsecutiveAnswers('FFTFFF', 4) == 6\nassert solution.maxConsecutiveAnswers('FFTF', 3) == 4\nassert solution.maxConsecutiveAnswers('FTFTTTFTF', 6) == 9\nassert solution.maxConsecutiveAnswers('FFTFTFT', 4) == 7\nassert solution.maxConsecutiveAnswers('FTFF', 2) == 4\nassert solution.maxConsecutiveAnswers('FFFFF', 1) == 5\nassert solution.maxConsecutiveAnswers('TFTTFT', 2) == 6\nassert solution.maxConsecutiveAnswers('F', 1) == 1\nassert solution.maxConsecutiveAnswers('TFTTFFTF', 5) == 8\nassert solution.maxConsecutiveAnswers('F', 1) == 1\nassert solution.maxConsecutiveAnswers('FFFTFFTFT', 5) == 9\nassert solution.maxConsecutiveAnswers('TFFFFFFTF', 4) == 9\nassert solution.maxConsecutiveAnswers('FFFTTFTFF', 2) == 6\nassert solution.maxConsecutiveAnswers('FFTFFFTT', 7) == 8\nassert solution.maxConsecutiveAnswers('FTFFTTTF', 6) == 8\nassert solution.maxConsecutiveAnswers('FFTFFTF', 3) == 7\nassert solution.maxConsecutiveAnswers('F', 1) == 1\nassert solution.maxConsecutiveAnswers('FFT', 3) == 3\nassert solution.maxConsecutiveAnswers('TTFFFTTTF', 5) == 9\nassert solution.maxConsecutiveAnswers('FTTTFFF', 3) == 7\nassert solution.maxConsecutiveAnswers('TF', 2) == 2\nassert solution.maxConsecutiveAnswers('FFTT', 4) == 4\nassert solution.maxConsecutiveAnswers('FFTFTTFF', 1) == 4\nassert solution.maxConsecutiveAnswers('FFTFTTFT', 2) == 6\nassert solution.maxConsecutiveAnswers('TTFTTFTFT', 3) == 9\nassert solution.maxConsecutiveAnswers('FF', 1) == 2\nassert solution.maxConsecutiveAnswers('FTFTF', 1) == 3\nassert solution.maxConsecutiveAnswers('TTTFTTTFT', 3) == 9\nassert solution.maxConsecutiveAnswers('TTFFFFT', 3) == 7\nassert solution.maxConsecutiveAnswers('TFFFFFT', 7) == 7\nassert solution.maxConsecutiveAnswers('TFTT', 3) == 4\nassert solution.maxConsecutiveAnswers('TFTFTFFTT', 2) == 6\nassert solution.maxConsecutiveAnswers('TTF', 3) == 3\nassert solution.maxConsecutiveAnswers('FTFFFTTTTT', 9) == 10\nassert solution.maxConsecutiveAnswers('TTFFTTTFT', 1) == 5\nassert solution.maxConsecutiveAnswers('FTF', 1) == 3\nassert solution.maxConsecutiveAnswers('T', 1) == 1\nassert solution.maxConsecutiveAnswers('TFTTF', 4) == 5\nassert solution.maxConsecutiveAnswers('TTFTFFF', 1) == 5\nassert solution.maxConsecutiveAnswers('FFFTFFF', 3) == 7\nassert solution.maxConsecutiveAnswers('FFTTFTT', 1) == 5\nassert solution.maxConsecutiveAnswers('TTFT', 3) == 4\nassert solution.maxConsecutiveAnswers('FTTFFF', 2) == 6\nassert solution.maxConsecutiveAnswers('TF', 1) == 2\nassert solution.maxConsecutiveAnswers('FTTTTFF', 4) == 7\nassert solution.maxConsecutiveAnswers('TFTTFTFT', 6) == 8\nassert solution.maxConsecutiveAnswers('TTFFTT', 6) == 6\nassert solution.maxConsecutiveAnswers('TFFFFFF', 1) == 7\nassert solution.maxConsecutiveAnswers('TFTFTFTT', 4) == 8\nassert solution.maxConsecutiveAnswers('TFFF', 4) == 4\nassert solution.maxConsecutiveAnswers('FTT', 3) == 3\nassert solution.maxConsecutiveAnswers('FF', 1) == 2\nassert solution.maxConsecutiveAnswers('T', 1) == 1\nassert solution.maxConsecutiveAnswers('FT', 1) == 2\nassert solution.maxConsecutiveAnswers('FFT', 3) == 3\nassert solution.maxConsecutiveAnswers('FTTTTFFTFF', 4) == 9\nassert solution.maxConsecutiveAnswers('FFT', 2) == 3\nassert solution.maxConsecutiveAnswers('FF', 2) == 2\nassert solution.maxConsecutiveAnswers('FFT', 1) == 3\nassert solution.maxConsecutiveAnswers('TTTTTTFTTT', 9) == 10\nassert solution.maxConsecutiveAnswers('FFFFFFFTTT', 5) == 10\nassert solution.maxConsecutiveAnswers('FF', 2) == 2\nassert solution.maxConsecutiveAnswers('TTTTTF', 4) == 6\nassert solution.maxConsecutiveAnswers('FFT', 2) == 3\nassert solution.maxConsecutiveAnswers('TTTFFT', 3) == 6\nassert solution.maxConsecutiveAnswers('FFTFF', 1) == 5\nassert solution.maxConsecutiveAnswers('FTTFTFTT', 7) == 8",
  "inefficient_solution": "class Solution:\n    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:\n        max_len = 0\n        for c in ['T', 'F']:\n            converted_answer_key = []\n            for char in answerKey:\n                converted_answer_key.append(c if char == c else 'T' if c == 'F' else 'F')\n            answer_key_list = list(converted_answer_key)\n            max_len_c = 0\n            for i in range(len(answer_key_list)):\n                count = 0\n                for j in range(i, len(answer_key_list)):\n                    if answer_key_list[j] == c:\n                        count += 1\n                    else:\n                        break\n                max_len_c = max(max_len_c, count)\n                if max_len_c > k:\n                    break\n                if i != 0:\n                    count = 0\n                    for j in range(i-1, -1, -1):\n                        if answer_key_list[j] == c:\n                            count += 1\n                        else:\n                            break\n                    max_len_c = max(max_len_c, count)\n                    if max_len_c > k:\n                        break\n                if max_len_c > max_len:\n                    max_len = max_len_c\n        return max_len",
  "is_python": true
}