{
  "problem_idx": 1842,
  "task_name": "Next Palindrome Using Same Digits",
  "markdown_description": "\nYou are given a numeric string `num`, representing a very large **palindrome**.\n\n\nReturn *the **smallest palindrome larger than*** `num` *that can be created by rearranging its digits. If no such palindrome exists, return an empty string* `\"\"`.\n\n\nA **palindrome** is a number that reads the same backward as forward.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"1221\"\n**Output:** \"2112\"\n**Explanation:**\u00a0The next palindrome larger than \"1221\" is \"2112\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"32123\"\n**Output:** \"\"\n**Explanation:**\u00a0No palindromes larger than \"32123\" can be made by rearranging the digits.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"45544554\"\n**Output:** \"54455445\"\n**Explanation:** The next palindrome larger than \"45544554\" is \"54455445\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 105`\n* `num` is a **palindrome**.\n\n\n",
  "canonical_solution": "class Solution:\n    def nextPalindrome(self, num: str) -> str:\n        def next_permutation(nums: List[str]) -> bool:\n            n = len(nums) // 2\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                return False\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n            return True\n\n        nums = list(num)\n        if not next_permutation(nums):\n            return \"\"\n        n = len(nums)\n        for i in range(n // 2):\n            nums[n - i - 1] = nums[i]\n        return \"\".join(nums)\n",
  "test_case_generator": "\nclass Solution:\n    def nextPalindrome(self, num: str) -> str:\n        def next_permutation(nums: List[str]) -> bool:\n            n = len(nums) // 2\n            i = n - 2\n            while i >= 0 and nums[i] >= nums[i + 1]:\n                i -= 1\n            if i < 0:\n                return False\n            j = n - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n            nums[i + 1 : n] = nums[i + 1 : n][::-1]\n            return True\n\n        nums = list(num)\n        if not next_permutation(nums):\n            return \"\"\n        n = len(nums)\n        for i in range(n // 2):\n            nums[n - i - 1] = nums[i]\n        return \"\".join(nums)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random palindrome number\n    n = random.randint(1, 10**5)\n    num = str(n)\n    num += num[::-1]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.nextPalindrome(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.nextPalindrome(num) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.nextPalindrome({num}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.nextPalindrome({num}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.nextPalindrome(5228668225) == 5262882625\nassert solution.nextPalindrome(2948778492) == 2974884792\nassert solution.nextPalindrome(6119779116) == 6171991716\nassert solution.nextPalindrome(4294994924) == 4299449924\nassert solution.nextPalindrome(9684664869) == 9686446869\nassert solution.nextPalindrome(6135885316) == 6138558316\nassert solution.nextPalindrome(8123553218) == 8125335218\nassert solution.nextPalindrome(6093443906) == 6094334906\nassert solution.nextPalindrome(5912552195) == 5915225195\nassert solution.nextPalindrome(8947887498) == 8948778498\nassert solution.nextPalindrome(4189009814) == 4190880914\nassert solution.nextPalindrome(4671661764) == 4676116764\nassert solution.nextPalindrome(1464444641) == 1644444461\nassert solution.nextPalindrome(4681111864) == 4811661184\nassert solution.nextPalindrome(79599597) == 79955997\nassert solution.nextPalindrome(1086226801) == 1206886021\nassert solution.nextPalindrome(6577997756) == 6579779756\nassert solution.nextPalindrome(5773003775) == 7035775307\nassert solution.nextPalindrome(4699559964) == 4956996594\nassert solution.nextPalindrome(1806776081) == 1807667081\nassert solution.nextPalindrome(7161881617) == 7168118617\nassert solution.nextPalindrome(9915665199) == 9916556199\nassert solution.nextPalindrome(4094114904) == 4104994014\nassert solution.nextPalindrome(8675885768) == 8678558768\nassert solution.nextPalindrome(4631771364) == 4637117364\nassert solution.nextPalindrome(9679669769) == 9696776969\nassert solution.nextPalindrome(7680990867) == 7689009867\nassert solution.nextPalindrome(2007447002) == 2040770402\nassert solution.nextPalindrome(5484444845) == 5844444485\nassert solution.nextPalindrome(8731441378) == 8734114378\nassert solution.nextPalindrome(5308668035) == 5360880635\nassert solution.nextPalindrome(8918008198) == 8980110898\nassert solution.nextPalindrome(9454664549) == 9456446549\nassert solution.nextPalindrome(8545995458) == 8549559458\nassert solution.nextPalindrome(24588542) == 24855842\nassert solution.nextPalindrome(4815555184) == 4851551584\nassert solution.nextPalindrome(5176666715) == 5616776165\nassert solution.nextPalindrome(5890770985) == 5897007985\nassert solution.nextPalindrome(8604554068) == 8605445068\nassert solution.nextPalindrome(5875445785) == 7455885547\nassert solution.nextPalindrome(1955665591) == 1956556591\nassert solution.nextPalindrome(9789559879) == 9795885979\nassert solution.nextPalindrome(8426006248) == 8460220648\nassert solution.nextPalindrome(1408118041) == 1410880141\nassert solution.nextPalindrome(2709449072) == 2740990472\nassert solution.nextPalindrome(4193553914) == 4195335914\nassert solution.nextPalindrome(8827447288) == 8842772488\nassert solution.nextPalindrome(2948448492) == 2984444892\nassert solution.nextPalindrome(3886556883) == 5368888635\nassert solution.nextPalindrome(7817667187) == 7861771687\nassert solution.nextPalindrome(7847337487) == 7873443787\nassert solution.nextPalindrome(5167007615) == 5170660715\nassert solution.nextPalindrome(9820220289) == 9822002289\nassert solution.nextPalindrome(94133149) == 94311349\nassert solution.nextPalindrome(2476116742) == 2614774162\nassert solution.nextPalindrome(9940770499) == 9947007499\nassert solution.nextPalindrome(27677672) == 27766772\nassert solution.nextPalindrome(6209009026) == 6290000926\nassert solution.nextPalindrome(3237997323) == 3239779323\nassert solution.nextPalindrome(2684884862) == 2688448862\nassert solution.nextPalindrome(8983113898) == 9138888319\nassert solution.nextPalindrome(4013003104) == 4030110304\nassert solution.nextPalindrome(1122332211) == 1123223211\nassert solution.nextPalindrome(1516776151) == 1517667151\nassert solution.nextPalindrome(5837337385) == 5873333785\nassert solution.nextPalindrome(7191441917) == 7194114917\nassert solution.nextPalindrome(4139669314) == 4163993614\nassert solution.nextPalindrome(5748228475) == 5782442875\nassert solution.nextPalindrome(3886776883) == 3887667883\nassert solution.nextPalindrome(5646886465) == 5648668465\nassert solution.nextPalindrome(8486776848) == 8487667848\nassert solution.nextPalindrome(1147777411) == 1174774711\nassert solution.nextPalindrome(3895665983) == 3896556983\nassert solution.nextPalindrome(3548668453) == 3564884653\nassert solution.nextPalindrome(5955885595) == 5958558595\nassert solution.nextPalindrome(9526446259) == 9542662459\nassert solution.nextPalindrome(3172552713) == 3175225713\nassert solution.nextPalindrome(2711441172) == 2714114172\nassert solution.nextPalindrome(3841991483) == 3849119483\nassert solution.nextPalindrome(9496446949) == 9644994469\nassert solution.nextPalindrome(64388346) == 64833846\nassert solution.nextPalindrome(4042552404) == 4045225404\nassert solution.nextPalindrome(8391881938) == 8398118938\nassert solution.nextPalindrome(9558228559) == 9582552859\nassert solution.nextPalindrome(7711441177) == 7714114177\nassert solution.nextPalindrome(1590000951) == 1900550091\nassert solution.nextPalindrome(8976666798) == 9667887669\nassert solution.nextPalindrome(1503993051) == 1509339051\nassert solution.nextPalindrome(4163883614) == 4168338614\nassert solution.nextPalindrome(7686336867) == 7836666387\nassert solution.nextPalindrome(5658338565) == 5683553865\nassert solution.nextPalindrome(1551881551) == 1558118551\nassert solution.nextPalindrome(1492882941) == 1498228941\nassert solution.nextPalindrome(1945885491) == 1948558491\nassert solution.nextPalindrome(94811849) == 98144189\nassert solution.nextPalindrome(50166105) == 50611605\nassert solution.nextPalindrome(8539669358) == 8563993658\nassert solution.nextPalindrome(4787337874) == 4837777384",
  "inefficient_solution": "class Solution:\n    def nextPalindrome(self, num: str) -> str:\n        def next_permutation(nums: List[str]) -> bool:\n            nums = [str(i) for i in nums]\n            res = []\n            for i in range(len(nums)):\n                res.extend(nums[i])\n            n = len(res) // 2\n            i = n - 2\n            while i >= 0 and res[i] >= res[i + 1]:\n                i -= 1\n            if i < 0:\n                return False\n            j = n - 1\n            while j >= 0 and res[j] <= res[i]:\n                j -= 1\n            res[i], res[j] = res[j], res[i]\n            res[i + 1 : n] = res[i + 1 : n][::-1]\n            res = [int(i) for i in res]\n            return True\n\n        nums = [int(i) for i in num]\n        nums_copy = nums[:]\n        while True:\n            if next_permutation(nums_copy):\n                break\n            else:\n                nums_copy = nums_copy + [0] * 10000\n        n = len(nums)\n        res = []\n        for i in range(n // 2):\n            if nums[i] == 0:\n                res.append(str(nums[n - i - 1]))\n            else:\n                res.append(str(nums[i]))\n        for i in range(n // 2, n):\n            res.append(str(nums[i]))\n        return \"\".join(res)",
  "is_python": true
}