{
  "problem_idx": 1989,
  "task_name": "Maximum Number of People That Can Be Caught in Tag",
  "markdown_description": "\nYou are playing a game of tag with your friends. In tag, people are divided into two teams: people who are \"it\", and people who are not \"it\". The people who are \"it\" want to catch as many people as possible who are not \"it\".\n\n\nYou are given a **0-indexed** integer array `team` containing only zeros (denoting people who are **not** \"it\") and ones (denoting people who are \"it\"), and an integer `dist`. A person who is \"it\" at index `i` can catch any **one** person whose index is in the range `[i - dist, i + dist]` (**inclusive**) and is **not** \"it\".\n\n\nReturn *the **maximum** number of people that the people who are \"it\" can catch*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** team = [0,1,0,1,0], dist = 3\n**Output:** 2\n**Explanation:**\nThe person who is \"it\" at index 1 can catch people in the range [i-dist, i+dist] = [1-3, 1+3] = [-2, 4].\nThey can catch the person who is not \"it\" at index 2.\nThe person who is \"it\" at index 3 can catch people in the range [i-dist, i+dist] = [3-3, 3+3] = [0, 6].\nThey can catch the person who is not \"it\" at index 0.\nThe person who is not \"it\" at index 4 will not be caught because the people at indices 1 and 3 are already catching one person.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** team = [1], dist = 1\n**Output:** 0\n**Explanation:**\nThere are no people who are not \"it\" to catch.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** team = [0], dist = 1\n**Output:** 0\n**Explanation:**There are no people who are \"it\" to catch people.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= team.length <= 105`\n* `0 <= team[i] <= 1`\n* `1 <= dist <= team.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def catchMaximumAmountofPeople(self, team: List[int], dist: int) -> int:\n        ans = j = 0\n        n = len(team)\n        for i, x in enumerate(team):\n            if x:\n                while j < n and (team[j] or i - j > dist):\n                    j += 1\n                if j < n and abs(i - j) <= dist:\n                    ans += 1\n                    j += 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def catchMaximumAmountofPeople(self, team: List[int], dist: int) -> int:\n        ans = j = 0\n        n = len(team)\n        for i, x in enumerate(team):\n            if x:\n                while j < n and (team[j] or i - j > dist):\n                    j += 1\n                if j < n and abs(i - j) <= dist:\n                    ans += 1\n                    j += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random team list\n    team = random.choices([0, 1], k=random.randint(1, 10))\n    \n    # Generate a random distance value\n    dist = random.randint(1, len(team))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.catchMaximumAmountofPeople(team, dist)\n\n    return team, dist, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        team, dist, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.catchMaximumAmountofPeople(team, dist) == expected_result\n        print(f\"assert solution.catchMaximumAmountofPeople({team}, {dist}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.catchMaximumAmountofPeople({team}, {dist}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.catchMaximumAmountofPeople([1, 0, 1, 1, 0, 0, 1, 1, 0], 1) == 4\nassert solution.catchMaximumAmountofPeople([0, 1, 0, 1, 0, 1, 1, 1], 8) == 3\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 1, 1, 0, 0, 1], 4) == 3\nassert solution.catchMaximumAmountofPeople([1, 0, 1], 2) == 1\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 1, 0, 1], 2) == 2\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 1, 1, 1, 1], 2) == 1\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([0, 0, 0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([0, 1, 1, 1, 1, 0], 5) == 2\nassert solution.catchMaximumAmountofPeople([1, 0], 1) == 1\nassert solution.catchMaximumAmountofPeople([0, 1, 1, 0, 1, 0, 1, 1, 0, 0], 5) == 5\nassert solution.catchMaximumAmountofPeople([0, 0, 1, 1, 0], 1) == 2\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 0, 0, 0], 2) == 2\nassert solution.catchMaximumAmountofPeople([0, 1, 0], 3) == 1\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 1, 0, 1, 0, 0], 3) == 4\nassert solution.catchMaximumAmountofPeople([1, 0], 2) == 1\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 1, 1, 0, 1, 0, 0, 0, 0, 1], 7) == 5\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 1, 0, 1], 6) == 2\nassert solution.catchMaximumAmountofPeople([0, 1, 1, 1, 1], 5) == 1\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 1, 0], 5) == 2\nassert solution.catchMaximumAmountofPeople([1, 1, 1, 1, 0, 1, 0, 1, 1], 6) == 2\nassert solution.catchMaximumAmountofPeople([1, 1, 0], 3) == 1\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 1, 1, 1, 0], 1) == 2\nassert solution.catchMaximumAmountofPeople([1, 1, 1, 1, 0, 1, 1], 2) == 1\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 1], 4) == 1\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 1, 1, 0, 0, 0, 0], 7) == 4\nassert solution.catchMaximumAmountofPeople([1, 0, 0], 3) == 1\nassert solution.catchMaximumAmountofPeople([1, 0], 2) == 1\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 0, 1, 1, 1], 7) == 3\nassert solution.catchMaximumAmountofPeople([0, 0, 1, 0], 1) == 1\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 0, 1], 1) == 2\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 1, 1, 1, 0, 0, 0, 0, 0], 7) == 4\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 0, 0, 0, 1, 1, 0], 4) == 4\nassert solution.catchMaximumAmountofPeople([1, 0, 0, 0, 1, 1, 1, 1, 1], 4) == 3\nassert solution.catchMaximumAmountofPeople([0, 1, 1, 1, 0, 0, 0, 0, 1], 3) == 4\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 0, 1, 1, 0], 3) == 3\nassert solution.catchMaximumAmountofPeople([0, 1, 0], 3) == 1\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([0, 0, 1, 1, 0, 0, 0], 4) == 2\nassert solution.catchMaximumAmountofPeople([0, 1, 1, 0, 0], 2) == 2\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 0], 2) == 2\nassert solution.catchMaximumAmountofPeople([0, 1, 1, 0], 3) == 2\nassert solution.catchMaximumAmountofPeople([1, 0], 1) == 1\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 0, 1, 1, 0, 0, 0], 9) == 2\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 0, 0, 1, 0, 0, 0, 0], 8) == 3\nassert solution.catchMaximumAmountofPeople([0, 1, 0, 1, 0, 1, 0, 0, 0, 0], 1) == 3\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 0, 1, 1, 1, 1, 0], 3) == 4\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 0], 3) == 2\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 1], 4) == 1\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 0, 0, 1], 2) == 2\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 1, 0, 1, 0], 7) == 2\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 0, 1, 0, 0, 0, 0, 0], 6) == 3\nassert solution.catchMaximumAmountofPeople([0, 0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 1, 1], 2) == 0\nassert solution.catchMaximumAmountofPeople([1, 0, 0, 0, 0], 1) == 1\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 0], 3) == 2\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 1, 0, 1, 0], 3) == 3\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 0, 1], 2) == 1\nassert solution.catchMaximumAmountofPeople([0, 1], 2) == 1\nassert solution.catchMaximumAmountofPeople([0], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 0], 1) == 1\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 0, 0, 0, 0, 0, 1, 0], 8) == 3\nassert solution.catchMaximumAmountofPeople([1, 0, 0, 0], 1) == 1\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 0, 1, 0, 0, 1, 1], 3) == 3\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 1, 1, 1], 6) == 3\nassert solution.catchMaximumAmountofPeople([1, 1, 0], 1) == 1\nassert solution.catchMaximumAmountofPeople([0, 1, 0, 1, 1, 0, 1], 6) == 3\nassert solution.catchMaximumAmountofPeople([1, 1, 1, 0], 2) == 1\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 1, 1, 0, 0], 3) == 3\nassert solution.catchMaximumAmountofPeople([1, 0, 1], 1) == 1\nassert solution.catchMaximumAmountofPeople([1, 0], 1) == 1\nassert solution.catchMaximumAmountofPeople([0, 0, 1, 0, 1, 0, 1, 0, 0, 1], 5) == 4\nassert solution.catchMaximumAmountofPeople([0, 0, 1, 1, 0], 2) == 2\nassert solution.catchMaximumAmountofPeople([1, 1, 0, 0, 0], 3) == 2\nassert solution.catchMaximumAmountofPeople([0, 1, 0], 3) == 1\nassert solution.catchMaximumAmountofPeople([0, 0, 1, 1, 1], 4) == 2\nassert solution.catchMaximumAmountofPeople([0, 0, 0, 1, 1, 1], 1) == 1\nassert solution.catchMaximumAmountofPeople([1, 0, 1, 0, 1, 0], 5) == 3\nassert solution.catchMaximumAmountofPeople([1, 1], 1) == 0\nassert solution.catchMaximumAmountofPeople([1, 1, 1, 1], 2) == 0\nassert solution.catchMaximumAmountofPeople([0, 1], 1) == 1\nassert solution.catchMaximumAmountofPeople([0, 0], 2) == 0\nassert solution.catchMaximumAmountofPeople([1, 1], 2) == 0\nassert solution.catchMaximumAmountofPeople([0, 1, 0, 1], 3) == 2\nassert solution.catchMaximumAmountofPeople([1, 0, 0, 1], 4) == 2",
  "inefficient_solution": "class Solution:\n    def catchMaximumAmountofPeople(self, team: List[int], dist: int) -> int:\n        n = len(team)\n        it_array = []\n        not_it_array = []\n        for i, x in enumerate(team):\n            if x:\n                it_array.append(i)\n            else:\n                not_it_array.append(i)\n        \n        max_catch = 0\n        for it in it_array:\n            temp_not_it_array = [not_it for not_it in not_it_array if abs(it - not_it) <= dist]\n            not_it_array = [not_it for not_it in not_it_array if not_it not in temp_not_it_array]\n            max_catch += len(temp_not_it_array)\n            not_it_array = not_it_array + temp_not_it_array\n        return max_catch",
  "is_python": true
}