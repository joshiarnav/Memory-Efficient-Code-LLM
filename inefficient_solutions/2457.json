{
  "problem_idx": 2457,
  "task_name": "Minimum Addition to Make Integer Beautiful",
  "markdown_description": "\nYou are given two positive integers `n` and `target`.\n\n\nAn integer is considered **beautiful** if the sum of its digits is less than or equal to `target`.\n\n\nReturn the *minimum **non-negative** integer* `x` *such that* `n + x` *is beautiful*. The input will be generated such that it is always possible to make `n` beautiful.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 16, target = 6\n**Output:** 4\n**Explanation:** Initially n is 16 and its digit sum is 1 + 6 = 7. After adding 4, n becomes 20 and digit sum becomes 2 + 0 = 2. It can be shown that we can not make n beautiful with adding non-negative integer less than 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 467, target = 6\n**Output:** 33\n**Explanation:** Initially n is 467 and its digit sum is 4 + 6 + 7 = 17. After adding 33, n becomes 500 and digit sum becomes 5 + 0 + 0 = 5. It can be shown that we can not make n beautiful with adding non-negative integer less than 33.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 1, target = 1\n**Output:** 0\n**Explanation:** Initially n is 1 and its digit sum is 1, which is already smaller than or equal to target.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 1012`\n* `1 <= target <= 150`\n* The input will be generated such that it is always possible to make `n` beautiful.\n\n\n",
  "canonical_solution": "class Solution:\n    def makeIntegerBeautiful(self, n: int, target: int) -> int:\n        def f(x: int) -> int:\n            y = 0\n            while x:\n                y += x % 10\n                x //= 10\n            return y\n\n        x = 0\n        while f(n + x) > target:\n            y = n + x\n            p = 10\n            while y % 10 == 0:\n                y //= 10\n                p *= 10\n            x = (y // 10 + 1) * p - n\n        return x\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def makeIntegerBeautiful(self, n: int, target: int) -> int:\n        def f(x: int) -> int:\n            y = 0\n            while x:\n                y += x % 10\n                x //= 10\n            return y\n\n        x = 0\n        while f(n + x) > target:\n            y = n + x\n            p = 10\n            while y % 10 == 0:\n                y //= 10\n                p *= 10\n            x = (y // 10 + 1) * p - n\n        return x\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n and target\n    n = random.randint(1, 10**12)\n    target = random.randint(1, 150)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.makeIntegerBeautiful(n, target)\n\n    return n, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.makeIntegerBeautiful(n, target) == expected_result\n        print(f\"assert solution.makeIntegerBeautiful({n}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.makeIntegerBeautiful({n}, {target}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.makeIntegerBeautiful(468156903347, 40) == 6653\nassert solution.makeIntegerBeautiful(240731140743, 51) == 0\nassert solution.makeIntegerBeautiful(543702681849, 107) == 0\nassert solution.makeIntegerBeautiful(906735753169, 111) == 0\nassert solution.makeIntegerBeautiful(610664135090, 9) == 335864910\nassert solution.makeIntegerBeautiful(336357498155, 135) == 0\nassert solution.makeIntegerBeautiful(152383717358, 61) == 0\nassert solution.makeIntegerBeautiful(432133787545, 62) == 0\nassert solution.makeIntegerBeautiful(822156808650, 105) == 0\nassert solution.makeIntegerBeautiful(791154185486, 123) == 0\nassert solution.makeIntegerBeautiful(490627579350, 125) == 0\nassert solution.makeIntegerBeautiful(546692492453, 100) == 0\nassert solution.makeIntegerBeautiful(689799002286, 19) == 200997714\nassert solution.makeIntegerBeautiful(6961179510, 39) == 490\nassert solution.makeIntegerBeautiful(928145109367, 38) == 633\nassert solution.makeIntegerBeautiful(97357143780, 60) == 0\nassert solution.makeIntegerBeautiful(433979995150, 98) == 0\nassert solution.makeIntegerBeautiful(701996004161, 51) == 0\nassert solution.makeIntegerBeautiful(643848538278, 29) == 1461722\nassert solution.makeIntegerBeautiful(952157797512, 63) == 0\nassert solution.makeIntegerBeautiful(29011743986, 35) == 14\nassert solution.makeIntegerBeautiful(864702275419, 136) == 0\nassert solution.makeIntegerBeautiful(442307395433, 81) == 0\nassert solution.makeIntegerBeautiful(518404481654, 53) == 0\nassert solution.makeIntegerBeautiful(766495835781, 85) == 0\nassert solution.makeIntegerBeautiful(465387818900, 117) == 0\nassert solution.makeIntegerBeautiful(588401108569, 117) == 0\nassert solution.makeIntegerBeautiful(246106769745, 122) == 0\nassert solution.makeIntegerBeautiful(104242993293, 107) == 0\nassert solution.makeIntegerBeautiful(298915810764, 55) == 36\nassert solution.makeIntegerBeautiful(430672784937, 29) == 215063\nassert solution.makeIntegerBeautiful(125959724002, 37) == 275998\nassert solution.makeIntegerBeautiful(147662346307, 76) == 0\nassert solution.makeIntegerBeautiful(120507072671, 14) == 2927329\nassert solution.makeIntegerBeautiful(192174877825, 145) == 0\nassert solution.makeIntegerBeautiful(190027811134, 127) == 0\nassert solution.makeIntegerBeautiful(413396668540, 145) == 0\nassert solution.makeIntegerBeautiful(985034322892, 142) == 0\nassert solution.makeIntegerBeautiful(760491368597, 2) == 239508631403\nassert solution.makeIntegerBeautiful(787806559365, 118) == 0\nassert solution.makeIntegerBeautiful(430306457718, 27) == 2282\nassert solution.makeIntegerBeautiful(131871754247, 138) == 0\nassert solution.makeIntegerBeautiful(512830950696, 54) == 0\nassert solution.makeIntegerBeautiful(301732121351, 62) == 0\nassert solution.makeIntegerBeautiful(64592816804, 78) == 0\nassert solution.makeIntegerBeautiful(483752977199, 140) == 0\nassert solution.makeIntegerBeautiful(53537497316, 141) == 0\nassert solution.makeIntegerBeautiful(269423105289, 143) == 0\nassert solution.makeIntegerBeautiful(458707409200, 21) == 292590800\nassert solution.makeIntegerBeautiful(675718671647, 14) == 4281328353\nassert solution.makeIntegerBeautiful(394296273444, 31) == 3726556\nassert solution.makeIntegerBeautiful(267134959896, 48) == 104\nassert solution.makeIntegerBeautiful(620911049732, 150) == 0\nassert solution.makeIntegerBeautiful(264841065744, 135) == 0\nassert solution.makeIntegerBeautiful(279241406984, 103) == 0\nassert solution.makeIntegerBeautiful(512835906944, 55) == 6\nassert solution.makeIntegerBeautiful(564022122540, 13) == 5977877460\nassert solution.makeIntegerBeautiful(429372959222, 21) == 27040778\nassert solution.makeIntegerBeautiful(697383532283, 73) == 0\nassert solution.makeIntegerBeautiful(245750283007, 91) == 0\nassert solution.makeIntegerBeautiful(721440829147, 95) == 0\nassert solution.makeIntegerBeautiful(777795585440, 20) == 2204414560\nassert solution.makeIntegerBeautiful(640123753435, 86) == 0\nassert solution.makeIntegerBeautiful(75715175578, 108) == 0\nassert solution.makeIntegerBeautiful(838686339410, 38) == 3660590\nassert solution.makeIntegerBeautiful(857342879861, 116) == 0\nassert solution.makeIntegerBeautiful(907961047682, 6) == 92038952318\nassert solution.makeIntegerBeautiful(736209629748, 144) == 0\nassert solution.makeIntegerBeautiful(302227740568, 63) == 0\nassert solution.makeIntegerBeautiful(398834146946, 54) == 54\nassert solution.makeIntegerBeautiful(526396951756, 20) == 3048244\nassert solution.makeIntegerBeautiful(298849916117, 15) == 1150083883\nassert solution.makeIntegerBeautiful(624788572834, 116) == 0\nassert solution.makeIntegerBeautiful(886080080398, 61) == 0\nassert solution.makeIntegerBeautiful(413708874252, 66) == 0\nassert solution.makeIntegerBeautiful(790525535105, 36) == 64895\nassert solution.makeIntegerBeautiful(399000323491, 33) == 509\nassert solution.makeIntegerBeautiful(204273252266, 63) == 0\nassert solution.makeIntegerBeautiful(459140020619, 50) == 0\nassert solution.makeIntegerBeautiful(468066765865, 72) == 0\nassert solution.makeIntegerBeautiful(846108083740, 87) == 0\nassert solution.makeIntegerBeautiful(199275357856, 47) == 2144\nassert solution.makeIntegerBeautiful(620880214308, 149) == 0\nassert solution.makeIntegerBeautiful(664561215461, 19) == 438784539\nassert solution.makeIntegerBeautiful(762060416126, 35) == 74\nassert solution.makeIntegerBeautiful(465470702520, 48) == 0\nassert solution.makeIntegerBeautiful(220352253664, 150) == 0\nassert solution.makeIntegerBeautiful(419499935399, 51) == 4601\nassert solution.makeIntegerBeautiful(212134887490, 38) == 510\nassert solution.makeIntegerBeautiful(571544468482, 71) == 0\nassert solution.makeIntegerBeautiful(608409559869, 118) == 0\nassert solution.makeIntegerBeautiful(13197580315, 20) == 2419685\nassert solution.makeIntegerBeautiful(811516655575, 57) == 0\nassert solution.makeIntegerBeautiful(51123018887, 137) == 0\nassert solution.makeIntegerBeautiful(835508957147, 63) == 0\nassert solution.makeIntegerBeautiful(756515406135, 107) == 0\nassert solution.makeIntegerBeautiful(538568324021, 132) == 0\nassert solution.makeIntegerBeautiful(101438524698, 22) == 475302\nassert solution.makeIntegerBeautiful(513727206271, 54) == 0\nassert solution.makeIntegerBeautiful(297134358350, 71) == 0",
  "inefficient_solution": "class Solution:\n    def makeIntegerBeautiful(self, n: int, target: int) -> int:\n        def sum_of_digits(x: int) -> int:\n            y = x\n            digits = []\n            while y:\n                digits.append(y % 10)\n                y //= 10\n            return sum(digits)\n\n        def list_all_numbers(m: int, n: int) -> list[int]:\n            return [i for i in range(m, n + 1)]\n\n        x = 0\n        while sum_of_digits(n + x) > target:\n            all_numbers = list_all_numbers(0, 10 ** 9 + 1)\n            for num in all_numbers:\n                if n + x + num >= 10 ** 9:\n                    continue\n                if sum_of_digits(n + x + num) <= target:\n                    x = num\n                    break\n            else:\n                x += 1\n        return x",
  "is_python": true
}