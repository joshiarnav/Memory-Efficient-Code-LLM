{
  "problem_idx": 1887,
  "task_name": "Reduction Operations to Make the Array Elements Equal",
  "markdown_description": "\nGiven an integer array `nums`, your goal is to make all elements in `nums` equal. To complete one operation, follow these steps:\n\n\n1. Find the **largest** value in `nums`. Let its index be `i` (**0-indexed**) and its value be `largest`. If there are multiple elements with the largest value, pick the smallest `i`.\n2. Find the **next largest** value in `nums` **strictly smaller** than `largest`. Let its value be `nextLargest`.\n3. Reduce `nums[i]` to `nextLargest`.\n\n\nReturn *the number of operations to make all elements in* `nums` *equal*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,1,3]\n**Output:** 3\n**Explanation:**\u00a0It takes 3 operations to make all elements in nums equal:\n1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].\n2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].\n3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,1,1]\n**Output:** 0\n**Explanation:**\u00a0All elements in nums are already equal.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,1,2,2,3]\n**Output:** 4\n**Explanation:**\u00a0It takes 4 operations to make all elements in nums equal:\n1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].\n2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].\n3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].\n4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 5 * 104`\n* `1 <= nums[i] <= 5 * 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def reductionOperations(self, nums: List[int]) -> int:\n        nums.sort()\n        ans = cnt = 0\n        for i, v in enumerate(nums[1:]):\n            if v != nums[i]:\n                cnt += 1\n            ans += cnt\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def reductionOperations(self, nums):\n        nums.sort()\n        ans = cnt = 0\n        for i, v in enumerate(nums[1:]):\n            if v != nums[i]:\n                cnt += 1\n            ans += cnt\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 1001), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.reductionOperations(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.reductionOperations(nums) == expected_result\n        print(f\"assert solution.reductionOperations({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.reductionOperations({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.reductionOperations([13, 294, 341, 382, 394, 504, 554, 629, 782, 878]) == 45\nassert solution.reductionOperations([200, 201, 215, 250, 340, 372, 685, 697, 703, 987]) == 45\nassert solution.reductionOperations([118, 237, 442, 493, 847, 901, 941]) == 21\nassert solution.reductionOperations([69, 461, 481, 663, 709, 739]) == 15\nassert solution.reductionOperations([100, 155, 163, 224, 359, 503, 749, 790, 961]) == 36\nassert solution.reductionOperations([573, 747]) == 1\nassert solution.reductionOperations([223, 349, 853]) == 3\nassert solution.reductionOperations([154, 325, 722, 727, 736, 923, 963]) == 21\nassert solution.reductionOperations([16, 562, 759, 775]) == 6\nassert solution.reductionOperations([30, 307, 824]) == 3\nassert solution.reductionOperations([38, 180, 205, 265, 688, 749, 766, 962]) == 28\nassert solution.reductionOperations([195, 441, 952]) == 3\nassert solution.reductionOperations([502, 970]) == 1\nassert solution.reductionOperations([97, 350]) == 1\nassert solution.reductionOperations([715, 727]) == 1\nassert solution.reductionOperations([70, 490, 859, 947]) == 6\nassert solution.reductionOperations([475, 584, 711]) == 3\nassert solution.reductionOperations([64, 89, 200, 425, 555, 706, 832, 840]) == 28\nassert solution.reductionOperations([156, 501, 679, 896, 967]) == 10\nassert solution.reductionOperations([187, 229, 240, 601, 608, 672, 701, 762, 763, 766]) == 45\nassert solution.reductionOperations([167, 226, 573]) == 3\nassert solution.reductionOperations([503, 700]) == 1\nassert solution.reductionOperations([87, 205, 250, 823, 910]) == 10\nassert solution.reductionOperations([132, 373, 429, 489, 507, 546, 650, 726, 803, 854]) == 45\nassert solution.reductionOperations([130, 195, 232, 376, 379, 467, 545, 618, 760]) == 36\nassert solution.reductionOperations([394, 537, 854, 923]) == 6\nassert solution.reductionOperations([39, 729, 870, 889]) == 6\nassert solution.reductionOperations([138, 360, 399, 799, 970]) == 10\nassert solution.reductionOperations([198, 509, 631, 669, 683]) == 10\nassert solution.reductionOperations([291, 353, 713, 754, 791, 887]) == 15\nassert solution.reductionOperations([744, 808]) == 1\nassert solution.reductionOperations([289, 642, 718, 836, 863, 981]) == 15\nassert solution.reductionOperations([445, 795]) == 1\nassert solution.reductionOperations([250, 665]) == 1\nassert solution.reductionOperations([31, 663]) == 1\nassert solution.reductionOperations([70, 72, 189, 423, 508, 513, 661, 718, 748]) == 36\nassert solution.reductionOperations([133, 221, 311, 616, 660]) == 10\nassert solution.reductionOperations([30, 106, 134, 141, 154, 221, 404, 532, 754, 904]) == 45\nassert solution.reductionOperations([270, 364, 654, 724, 782, 871, 993, 995]) == 28\nassert solution.reductionOperations([299, 628, 903]) == 3\nassert solution.reductionOperations([214, 328, 545, 723, 754, 941, 990]) == 21\nassert solution.reductionOperations([140, 284, 584]) == 3\nassert solution.reductionOperations([94, 247, 683, 921, 931]) == 10\nassert solution.reductionOperations([45, 250, 287, 649]) == 6\nassert solution.reductionOperations([43, 239, 586, 652, 795]) == 10\nassert solution.reductionOperations([626, 837, 892]) == 3\nassert solution.reductionOperations([281, 393, 533, 879, 954, 965]) == 15\nassert solution.reductionOperations([77, 292, 357, 371, 380, 405, 424, 442]) == 28\nassert solution.reductionOperations([71, 469, 674, 686, 900]) == 10\nassert solution.reductionOperations([111, 579, 862, 967]) == 6\nassert solution.reductionOperations([364, 697, 831]) == 3\nassert solution.reductionOperations([50, 506, 554, 622, 756, 848, 851]) == 21\nassert solution.reductionOperations([178, 656]) == 1\nassert solution.reductionOperations([62, 225, 280, 460, 605, 619, 746, 759, 850, 957]) == 45\nassert solution.reductionOperations([71, 354, 378, 559, 581, 717, 843]) == 21\nassert solution.reductionOperations([228, 301, 332, 394, 614, 744, 758]) == 21\nassert solution.reductionOperations([110, 141, 415, 844]) == 6\nassert solution.reductionOperations([67, 316, 651, 885]) == 6\nassert solution.reductionOperations([128, 222, 467, 761, 784, 922, 930, 990]) == 28\nassert solution.reductionOperations([161, 323, 658]) == 3\nassert solution.reductionOperations([38, 139, 265, 425, 427, 491, 842, 897]) == 28\nassert solution.reductionOperations([31, 128, 290, 560, 863, 866, 910, 925, 981, 989]) == 45\nassert solution.reductionOperations([281, 308, 329, 376, 539, 631, 715, 805]) == 28\nassert solution.reductionOperations([321, 421, 457, 760, 775, 796, 898, 945]) == 28\nassert solution.reductionOperations([5, 271, 342, 439, 593, 737, 751, 944, 954]) == 36\nassert solution.reductionOperations([220, 584, 708, 752, 784, 796, 807]) == 21\nassert solution.reductionOperations([276, 462, 480, 588, 738, 882, 926, 981]) == 28\nassert solution.reductionOperations([132, 256, 453, 463, 600, 685, 793, 872, 968]) == 36\nassert solution.reductionOperations([165, 204, 298, 313, 373, 442, 475, 495, 778, 845]) == 45\nassert solution.reductionOperations([78, 121, 165, 326, 539, 932]) == 15\nassert solution.reductionOperations([246, 303, 346, 843]) == 6\nassert solution.reductionOperations([60, 211, 628, 988]) == 6\nassert solution.reductionOperations([63, 99, 104, 514, 966]) == 10\nassert solution.reductionOperations([138, 240, 454, 662, 982]) == 10\nassert solution.reductionOperations([74, 124, 213, 555, 625, 629, 782, 816, 948, 977]) == 45\nassert solution.reductionOperations([339, 465, 845]) == 3\nassert solution.reductionOperations([304, 343, 383, 403, 429, 647, 914, 924]) == 28\nassert solution.reductionOperations([29, 72, 176, 257, 315, 361, 511, 730, 815, 842]) == 45\nassert solution.reductionOperations([73, 103, 505, 637, 702, 805, 886]) == 21\nassert solution.reductionOperations([158, 783, 832, 926]) == 6\nassert solution.reductionOperations([682, 725, 865, 873, 903, 945, 983]) == 21\nassert solution.reductionOperations([409, 455, 868]) == 3\nassert solution.reductionOperations([277, 401, 717, 919, 981]) == 10\nassert solution.reductionOperations([179, 267, 281, 294, 647, 653, 868, 879, 979]) == 36\nassert solution.reductionOperations([102, 147, 301, 429, 490, 662, 756]) == 21\nassert solution.reductionOperations([122, 128, 184, 218, 293, 543, 754, 819, 924, 935]) == 45\nassert solution.reductionOperations([124, 135, 315, 689, 766, 788, 824, 912]) == 28\nassert solution.reductionOperations([193, 207, 256, 753, 905]) == 10\nassert solution.reductionOperations([228, 430, 475, 513, 730, 750, 887]) == 21\nassert solution.reductionOperations([34, 306, 439, 575, 682, 699, 888, 968]) == 28\nassert solution.reductionOperations([42, 108, 525, 656, 691, 693, 709, 780, 936]) == 36\nassert solution.reductionOperations([65, 777]) == 1\nassert solution.reductionOperations([396, 440, 540, 680, 732, 953]) == 15\nassert solution.reductionOperations([3, 14, 179, 251, 675, 771, 832, 976]) == 28\nassert solution.reductionOperations([48, 389, 541, 815, 978]) == 10\nassert solution.reductionOperations([513, 531]) == 1\nassert solution.reductionOperations([12, 100, 178, 392, 401, 535, 739, 781, 818]) == 36\nassert solution.reductionOperations([175, 286, 657, 852, 980]) == 10\nassert solution.reductionOperations([191, 270, 603, 609, 797, 843, 927, 930, 954]) == 36\nassert solution.reductionOperations([109, 111, 113]) == 3",
  "inefficient_solution": "class Solution:\n    def reductionOperations(self, nums: List[int]) -> int:\n        max_val = float('-inf')\n        max_index = -1\n        max_values = []\n        \n        for i, v in enumerate(nums):\n            if v > max_val:\n                max_val = v\n                max_index = i\n                max_values = [v]\n            elif v == max_val:\n                max_values.append(v)\n        \n        next_largest_values = {}\n        for i, v in enumerate(nums):\n            if i not in next_largest_values and v < max_val:\n                next_largest_values[v] = [max_val]\n            elif i in next_largest_values and v < max_val:\n                next_largest_values[v].append(max_val)\n        \n        next_largest_dfs = {}\n        for v, vs in next_largest_values.items():\n            next_largest_dfs[v] = self.dfs(v, vs, nums)\n        \n        ans = 0\n        for v, vs in next_largest_dfs.items():\n            if len(vs) == 0:\n                continue\n            for i, val in enumerate(vs):\n                if val == v:\n                    ans += i\n                    break\n        \n        return ans\n    \n    def dfs(self, v, vs, nums):\n        if v not in vs:\n            return []\n        \n        max_val = float('-inf')\n        max_index = -1\n        max_values = []\n        \n        for i, x in enumerate(nums):\n            if x > max_val and x < v:\n                max_val = x\n                max_index = i\n                max_values = [x]\n            elif x == max_val and x < v:\n                max_values.append(x)\n        \n        if len(max_values) == 0:\n            return [v]\n        \n        next_largest_values = {}\n        for i, x in enumerate(nums):\n            if i not in next_largest_values and x < v:\n                next_largest_values[x] = [max_val]\n            elif i in next_largest_values and x < v:\n                next_largest_values[x].append(max_val)\n        \n        next_largest_dfs = {}\n        for x, xs in next_largest_values.items():\n            next_largest_dfs[x] = self.dfs(x, xs, nums)\n        \n        ans = []\n        for x, xs in next_largest_dfs.items():\n            if len(xs) == 0:\n                continue\n            for i, val in enumerate(xs):\n                if val == x:\n                    ans.append(v)\n                    break\n        \n        return ans",
  "is_python": true
}