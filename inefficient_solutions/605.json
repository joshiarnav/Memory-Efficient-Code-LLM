{
  "problem_idx": 605,
  "task_name": "Can Place Flowers",
  "markdown_description": "\nYou have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in **adjacent** plots.\n\n\nGiven an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return `true`\u00a0*if* `n` *new flowers can be planted in the* `flowerbed` *without violating the no-adjacent-flowers rule and* `false` *otherwise*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** flowerbed = [1,0,0,0,1], n = 1\n**Output:** true\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** flowerbed = [1,0,0,0,1], n = 2\n**Output:** false\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= flowerbed.length <= 2 * 104`\n* `flowerbed[i]` is `0` or `1`.\n* There are no two adjacent flowers in `flowerbed`.\n* `0 <= n <= flowerbed.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        flowerbed = [0] + flowerbed + [0]\n        for i in range(1, len(flowerbed) - 1):\n            if sum(flowerbed[i - 1 : i + 2]) == 0:\n                flowerbed[i] = 1\n                n -= 1\n        return n <= 0\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        flowerbed = [0] + flowerbed + [0]\n        for i in range(1, len(flowerbed) - 1):\n            if sum(flowerbed[i - 1 : i + 2]) == 0:\n                flowerbed[i] = 1\n                n -= 1\n        return n <= 0\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random flowerbed list\n    flowerbed = random.choices([0, 1], k=random.randint(1, 10))\n    \n    # Generate a random n value\n    n = random.randint(0, len(flowerbed))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.canPlaceFlowers(flowerbed, n)\n\n    return flowerbed, n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        flowerbed, n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.canPlaceFlowers(flowerbed, n) == expected_result\n        print(f\"assert solution.canPlaceFlowers({flowerbed}, {n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.canPlaceFlowers({flowerbed}, {n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.canPlaceFlowers([0, 0, 1, 0, 1, 0, 0], 3) == False\nassert solution.canPlaceFlowers([1, 1, 1, 1, 1, 1, 0], 1) == False\nassert solution.canPlaceFlowers([0], 0) == True\nassert solution.canPlaceFlowers([1, 1, 0, 1], 0) == True\nassert solution.canPlaceFlowers([0, 1, 0, 0, 1, 0, 0, 0, 1], 4) == False\nassert solution.canPlaceFlowers([0, 1, 0, 0, 0], 4) == False\nassert solution.canPlaceFlowers([0], 0) == True\nassert solution.canPlaceFlowers([0, 0, 1, 1, 1], 0) == True\nassert solution.canPlaceFlowers([1, 0, 1, 1, 1, 0, 1, 0, 1, 1], 7) == False\nassert solution.canPlaceFlowers([1, 1, 0, 0, 0], 3) == False\nassert solution.canPlaceFlowers([1, 1, 0, 1, 0], 0) == True\nassert solution.canPlaceFlowers([0, 0], 1) == True\nassert solution.canPlaceFlowers([1, 1, 0], 2) == False\nassert solution.canPlaceFlowers([1], 0) == True\nassert solution.canPlaceFlowers([0, 1, 1, 1, 1, 0, 1, 0, 0, 1], 3) == False\nassert solution.canPlaceFlowers([1, 1, 0, 1, 0, 1, 0, 0, 0, 1], 7) == False\nassert solution.canPlaceFlowers([0, 1, 0, 0, 0, 1], 6) == False\nassert solution.canPlaceFlowers([0, 1, 0, 1, 1, 1, 1, 1], 2) == False\nassert solution.canPlaceFlowers([0, 0, 0, 1, 0, 0, 0, 1, 1, 1], 8) == False\nassert solution.canPlaceFlowers([0, 1, 0, 1, 1, 1, 0, 0], 1) == True\nassert solution.canPlaceFlowers([0, 1, 1, 0, 0], 5) == False\nassert solution.canPlaceFlowers([1, 1, 0, 1, 0, 1], 0) == True\nassert solution.canPlaceFlowers([1, 0, 1, 0, 1, 0, 0], 7) == False\nassert solution.canPlaceFlowers([0, 0], 2) == False\nassert solution.canPlaceFlowers([0, 1, 1], 2) == False\nassert solution.canPlaceFlowers([1, 0], 0) == True\nassert solution.canPlaceFlowers([0], 1) == True\nassert solution.canPlaceFlowers([1, 1, 0, 1, 0, 1], 5) == False\nassert solution.canPlaceFlowers([0, 0, 1, 1, 1], 1) == True\nassert solution.canPlaceFlowers([1, 0, 0], 1) == True\nassert solution.canPlaceFlowers([0, 0], 0) == True\nassert solution.canPlaceFlowers([0, 0, 0, 1, 1, 1, 1, 0, 0], 3) == False\nassert solution.canPlaceFlowers([1, 1, 0, 1, 1], 5) == False\nassert solution.canPlaceFlowers([1, 0, 1, 1, 0, 1, 0, 1, 1, 1], 10) == False\nassert solution.canPlaceFlowers([1], 1) == False\nassert solution.canPlaceFlowers([1, 0, 1, 1, 1, 1, 1, 0], 8) == False\nassert solution.canPlaceFlowers([1, 0, 0, 1, 0, 1, 0, 0, 0], 4) == False\nassert solution.canPlaceFlowers([0, 0, 1, 0, 0, 0, 1, 1, 0, 0], 10) == False\nassert solution.canPlaceFlowers([0, 0, 1, 0, 1, 0, 0, 1, 1], 6) == False\nassert solution.canPlaceFlowers([0, 1, 1, 0], 3) == False\nassert solution.canPlaceFlowers([1], 1) == False\nassert solution.canPlaceFlowers([0, 1], 1) == False\nassert solution.canPlaceFlowers([1, 0, 0, 0, 0, 0, 1, 0, 1], 0) == True\nassert solution.canPlaceFlowers([0, 0, 1], 0) == True\nassert solution.canPlaceFlowers([1], 1) == False\nassert solution.canPlaceFlowers([1, 1, 1, 0, 0, 1, 0], 0) == True\nassert solution.canPlaceFlowers([1, 0, 1, 0], 1) == False\nassert solution.canPlaceFlowers([1, 1, 0], 1) == False\nassert solution.canPlaceFlowers([0, 1, 1], 3) == False\nassert solution.canPlaceFlowers([1, 1, 0, 1, 0, 0, 0, 1, 1, 1], 6) == False\nassert solution.canPlaceFlowers([0, 0, 0, 0, 1, 1, 1], 1) == True\nassert solution.canPlaceFlowers([1], 1) == False\nassert solution.canPlaceFlowers([1, 0], 1) == False\nassert solution.canPlaceFlowers([0, 1], 0) == True\nassert solution.canPlaceFlowers([1, 0, 1, 1, 0], 2) == False\nassert solution.canPlaceFlowers([0, 1, 0, 1, 1, 1, 0], 6) == False\nassert solution.canPlaceFlowers([1, 1, 0], 0) == True\nassert solution.canPlaceFlowers([0, 1, 1, 0, 0, 1, 0, 1, 0], 7) == False\nassert solution.canPlaceFlowers([0], 1) == True\nassert solution.canPlaceFlowers([1, 0, 1, 1, 0, 0, 1, 0], 3) == False\nassert solution.canPlaceFlowers([1, 1, 0, 0, 0, 0, 0, 0, 0, 1], 3) == True\nassert solution.canPlaceFlowers([0, 1, 1, 1], 1) == False\nassert solution.canPlaceFlowers([0, 1, 1, 0, 0, 1, 1, 1, 1, 0], 8) == False\nassert solution.canPlaceFlowers([1, 1, 1, 1, 0, 1, 0, 1, 1, 1], 0) == True\nassert solution.canPlaceFlowers([0, 0, 1, 0, 1, 0], 0) == True\nassert solution.canPlaceFlowers([0, 0], 2) == False\nassert solution.canPlaceFlowers([0, 0, 1, 1, 1, 1, 0, 1, 0, 0], 3) == False\nassert solution.canPlaceFlowers([1, 1, 0, 0, 1, 0, 0, 0, 0, 0], 9) == False\nassert solution.canPlaceFlowers([0, 1, 1, 1, 0, 1], 6) == False\nassert solution.canPlaceFlowers([0, 1, 1, 0, 1, 1, 1], 3) == False\nassert solution.canPlaceFlowers([0, 1, 0, 1, 1, 1], 2) == False\nassert solution.canPlaceFlowers([0, 1, 1, 0, 1, 0], 6) == False\nassert solution.canPlaceFlowers([1, 0, 1, 0, 1, 0, 1, 1], 2) == False\nassert solution.canPlaceFlowers([0, 1, 0, 0, 1], 0) == True\nassert solution.canPlaceFlowers([1, 1], 2) == False\nassert solution.canPlaceFlowers([0, 0, 0, 0, 0, 1, 0, 1], 5) == False\nassert solution.canPlaceFlowers([0, 0, 0, 1, 1, 1, 1, 0, 1], 1) == True\nassert solution.canPlaceFlowers([0], 0) == True\nassert solution.canPlaceFlowers([1, 0, 0, 1, 0, 1], 4) == False\nassert solution.canPlaceFlowers([0, 1, 1, 0, 0, 1], 6) == False\nassert solution.canPlaceFlowers([1, 1, 1, 1, 1], 5) == False\nassert solution.canPlaceFlowers([0], 1) == True\nassert solution.canPlaceFlowers([1, 0, 1], 1) == False\nassert solution.canPlaceFlowers([0, 1, 1, 1, 1, 1, 1, 1, 0], 1) == False\nassert solution.canPlaceFlowers([0, 0, 0, 0, 1, 1, 1, 0, 1], 0) == True\nassert solution.canPlaceFlowers([1, 0, 1, 1, 1, 0, 1, 0, 0, 0], 6) == False\nassert solution.canPlaceFlowers([1, 1, 0, 1], 1) == False\nassert solution.canPlaceFlowers([0, 0], 0) == True\nassert solution.canPlaceFlowers([1, 1], 1) == False\nassert solution.canPlaceFlowers([1], 0) == True\nassert solution.canPlaceFlowers([0, 1, 0, 1, 1, 1, 1, 0], 2) == False\nassert solution.canPlaceFlowers([1, 0, 1, 0], 2) == False\nassert solution.canPlaceFlowers([0, 1], 0) == True\nassert solution.canPlaceFlowers([0, 0, 0, 1, 1, 0, 0], 7) == False\nassert solution.canPlaceFlowers([0, 0, 0, 1], 4) == False\nassert solution.canPlaceFlowers([1, 1, 0, 0, 0, 1, 0], 3) == False\nassert solution.canPlaceFlowers([1, 0, 0, 1, 1, 1], 6) == False\nassert solution.canPlaceFlowers([1, 0, 0, 1, 1, 0, 1, 0, 1, 1], 3) == False\nassert solution.canPlaceFlowers([0, 0], 0) == True\nassert solution.canPlaceFlowers([0, 1, 1, 1, 1, 1, 1, 1, 0, 1], 4) == False",
  "inefficient_solution": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        flowerbed = flowerbed + [0] * 10 ** 6  # Allocate a lot of extra memory\n        new_flowerbed = []\n        for plot in flowerbed:\n            if plot == 0:  # Extra loop to just check plot value\n                new_flowerbed.append(plot)\n            else:\n                new_flowerbed.append(0)\n        flowerbed = new_flowerbed\n        new_flowerbed = []\n        for plot in flowerbed:\n            for _ in range(10):  # Extra loop to just copy plot value\n                new_flowerbed.append(plot)\n        flowerbed = new_flowerbed\n        for i in range(1, len(flowerbed) - 1):\n            if sum(flowerbed[i - 1 : i + 2]) == 0:\n                flowerbed[i] = 1\n                n -= 1\n        return n <= 0",
  "is_python": true
}