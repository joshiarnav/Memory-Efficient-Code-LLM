{
  "problem_idx": 594,
  "task_name": "Longest Harmonious Subsequence",
  "markdown_description": "\nWe define a harmonious array as an array where the difference between its maximum value and its minimum value is **exactly** `1`.\n\n\nGiven an integer array `nums`, return *the length of its longest harmonious subsequence among all its possible subsequences*.\n\n\nA **subsequence** of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,2,5,2,3,7]\n**Output:** 5\n**Explanation:** The longest harmonious subsequence is [3,2,2,2,3].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 2\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 2 * 104`\n* `-109 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def findLHS(self, nums: List[int]) -> int:\n        counter = Counter(nums)\n        ans = 0\n        for num in nums:\n            if num + 1 in counter:\n                ans = max(ans, counter[num] + counter[num + 1])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom collections import Counter\n\nclass Solution:\n    def findLHS(self, nums: List[int]) -> int:\n        counter = Counter(nums)\n        ans = 0\n        for num in nums:\n            if num + 1 in counter:\n                ans = max(ans, counter[num] + counter[num + 1])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findLHS(nums)\n\n    return (nums,), expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        inputs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findLHS(*inputs) == expected_result\n        print(f\"assert solution.findLHS{inputs} == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findLHS{inputs} == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.findLHS([33, 4, 59, 72, 6, 87],) == 0\nassert solution.findLHS([22, 39],) == 0\nassert solution.findLHS([36, 48, 90, 70, 38, 26, 74, 76, 71, 69],) == 2\nassert solution.findLHS([20, 43, 37, 98, 92, 5, 12, 11, 49, 31],) == 2\nassert solution.findLHS([16, 28, 47, 48],) == 2\nassert solution.findLHS([22, 30, 29, 41, 91, 31, 4, 59],) == 2\nassert solution.findLHS([35, 53, 73, 30, 26, 86],) == 0\nassert solution.findLHS([99, 72, 28, 65, 12, 32, 9, 41],) == 0\nassert solution.findLHS([15, 34, 21, 22],) == 2\nassert solution.findLHS([81, 11, 8, 6, 16, 47, 45, 79],) == 0\nassert solution.findLHS([46, 32, 39, 77, 79, 11, 16],) == 0\nassert solution.findLHS([16, 1, 47, 24, 55, 46, 27, 66, 12, 36],) == 2\nassert solution.findLHS([60, 41, 21],) == 0\nassert solution.findLHS([71, 19, 25, 85, 50],) == 0\nassert solution.findLHS([10, 47],) == 0\nassert solution.findLHS([72, 88, 33, 79, 19],) == 0\nassert solution.findLHS([99, 97],) == 0\nassert solution.findLHS([48, 15, 70, 59, 33, 89],) == 0\nassert solution.findLHS([89, 30, 33, 16, 18, 74, 52, 62, 87, 7],) == 0\nassert solution.findLHS([44, 94, 66, 23, 10, 58],) == 0\nassert solution.findLHS([64, 51, 100, 72, 70, 12, 78, 88],) == 0\nassert solution.findLHS([85, 76, 100, 4],) == 0\nassert solution.findLHS([38, 76, 79, 72],) == 0\nassert solution.findLHS([92, 74, 16, 22, 35, 81, 97, 11, 41],) == 0\nassert solution.findLHS([36, 13, 24, 87, 19, 93, 92, 28, 75],) == 2\nassert solution.findLHS([88, 31, 70],) == 0\nassert solution.findLHS([18, 57, 99, 84, 16, 1, 19],) == 2\nassert solution.findLHS([95, 30],) == 0\nassert solution.findLHS([72, 97, 39, 17, 16, 5, 11, 67, 46],) == 2\nassert solution.findLHS([9, 90, 83, 14, 21, 58],) == 0\nassert solution.findLHS([56, 10, 8],) == 0\nassert solution.findLHS([92, 2, 32, 51],) == 0\nassert solution.findLHS([100, 11, 9, 96, 92, 24, 50, 54],) == 0\nassert solution.findLHS([40, 86, 43, 94, 45, 76, 12, 64, 73],) == 0\nassert solution.findLHS([15, 24],) == 0\nassert solution.findLHS([30, 44, 96, 66, 48, 63],) == 0\nassert solution.findLHS([69, 31, 46, 45, 68, 76, 57, 72, 16, 22],) == 2\nassert solution.findLHS([88, 51, 86, 8, 18],) == 0\nassert solution.findLHS([17, 92, 52, 81, 90, 99, 48],) == 0\nassert solution.findLHS([73, 29, 83, 51, 87],) == 0\nassert solution.findLHS([78, 65, 55],) == 0\nassert solution.findLHS([18, 50, 77, 72, 79],) == 0\nassert solution.findLHS([87, 92, 82, 38],) == 0\nassert solution.findLHS([84, 9, 77, 58],) == 0\nassert solution.findLHS([14, 33, 56, 39, 17],) == 0\nassert solution.findLHS([83, 34, 48, 97, 99, 55, 91, 64, 58, 11],) == 0\nassert solution.findLHS([85, 83, 81, 26, 4, 18, 30, 56, 88],) == 0\nassert solution.findLHS([21, 70, 89, 58, 91, 11],) == 0\nassert solution.findLHS([59, 26, 46, 11, 7, 99, 17, 89, 96],) == 0\nassert solution.findLHS([89, 83, 73, 37, 7],) == 0\nassert solution.findLHS([69, 4, 99, 81, 88, 76, 54, 98],) == 2\nassert solution.findLHS([62, 92, 8, 25, 67, 64, 36, 83],) == 0\nassert solution.findLHS([38, 20, 91, 31, 77, 4, 89, 14, 86],) == 0\nassert solution.findLHS([26, 35, 42, 31, 82],) == 0\nassert solution.findLHS([15, 92, 66, 68, 26, 99],) == 0\nassert solution.findLHS([91, 18, 87, 12, 33, 88, 71, 6, 43],) == 2\nassert solution.findLHS([67, 55, 75, 51, 28, 97, 66, 52, 44],) == 2\nassert solution.findLHS([94, 43, 86, 96, 84, 79, 31, 100, 89],) == 0\nassert solution.findLHS([88, 36, 45, 37, 70],) == 2\nassert solution.findLHS([62, 60, 99, 88, 6, 100, 82],) == 2\nassert solution.findLHS([70, 92, 40],) == 0\nassert solution.findLHS([84, 32, 43, 59, 34, 29, 20],) == 0\nassert solution.findLHS([75, 32, 51],) == 0\nassert solution.findLHS([99, 75, 27, 23, 21],) == 0\nassert solution.findLHS([82, 68, 55, 12, 56],) == 2\nassert solution.findLHS([44, 89, 50, 100, 97, 69, 33, 87],) == 0\nassert solution.findLHS([49, 69, 48, 25, 87, 77],) == 2\nassert solution.findLHS([100, 90, 51, 32],) == 0\nassert solution.findLHS([29, 14, 57, 20, 28, 49, 73, 24, 87, 78],) == 2\nassert solution.findLHS([52, 82, 14],) == 0\nassert solution.findLHS([89, 97, 98, 6],) == 2\nassert solution.findLHS([19, 99],) == 0\nassert solution.findLHS([95, 8, 63, 82, 32, 59, 70, 99, 46],) == 0\nassert solution.findLHS([97, 63, 95, 1, 47, 99, 18, 52],) == 0\nassert solution.findLHS([78, 33, 34, 42],) == 2\nassert solution.findLHS([75, 1, 12, 23, 37],) == 0\nassert solution.findLHS([67, 16, 50, 58, 68, 91, 26, 5, 72],) == 2\nassert solution.findLHS([32, 69, 63, 90, 51],) == 0\nassert solution.findLHS([64, 28, 85, 45, 31],) == 0\nassert solution.findLHS([40, 77, 25],) == 0\nassert solution.findLHS([74, 33, 88, 41, 21, 43],) == 0\nassert solution.findLHS([33, 89, 44, 92, 56, 41, 20],) == 0\nassert solution.findLHS([57, 63],) == 0\nassert solution.findLHS([37, 63, 75, 23, 78, 71, 2],) == 0\nassert solution.findLHS([41, 42, 60, 85, 51, 54],) == 2\nassert solution.findLHS([65, 30, 27, 54, 79],) == 0\nassert solution.findLHS([21, 6, 11, 15, 51, 68, 20, 5, 18],) == 2\nassert solution.findLHS([30, 9],) == 0\nassert solution.findLHS([59, 46, 11, 13],) == 0\nassert solution.findLHS([58, 26],) == 0\nassert solution.findLHS([77, 91, 31, 8, 34, 55, 47, 75],) == 0\nassert solution.findLHS([46, 78, 7, 89, 67, 66, 91, 22, 84],) == 2\nassert solution.findLHS([67, 85, 59, 83, 13, 97, 4],) == 0\nassert solution.findLHS([55, 58, 17, 79, 95],) == 0\nassert solution.findLHS([89, 41, 90, 60],) == 2\nassert solution.findLHS([44, 54, 42],) == 0\nassert solution.findLHS([71, 61, 76, 63, 91, 11, 66, 84, 53, 94],) == 0\nassert solution.findLHS([45, 68, 77, 13, 6, 8, 26, 64, 74],) == 0\nassert solution.findLHS([73, 70, 68, 59, 20, 5, 49, 66, 62, 75],) == 0\nassert solution.findLHS([49, 84, 69],) == 0",
  "inefficient_solution": "class Solution:\n    def findLHS(self, nums):\n        num_set = set()\n        for num in nums:\n            num_set.add(num)\n        count_dict = {}\n        for num in num_set:\n            count_dict[num] = 0\n        for num in nums:\n            count_dict[num] += 1\n        max_count = 0\n        for num in num_set:\n            if num + 1 in num_set:\n                max_count = max(max_count, count_dict[num] + count_dict[num + 1])\n        return max_count",
  "is_python": true
}