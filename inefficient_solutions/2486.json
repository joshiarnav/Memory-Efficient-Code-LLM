{
  "problem_idx": 2486,
  "task_name": "Append Characters to String to Make Subsequence",
  "markdown_description": "\nYou are given two strings `s` and `t` consisting of only lowercase English letters.\n\n\nReturn *the minimum number of characters that need to be appended to the end of* `s` *so that* `t` *becomes a **subsequence** of* `s`.\n\n\nA **subsequence** is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"coaching\", t = \"coding\"\n**Output:** 4\n**Explanation:** Append the characters \"ding\" to the end of s so that s = \"coachingding\".\nNow, t is a subsequence of s (\"**co**aching**ding**\").\nIt can be shown that appending any 3 characters to the end of s will never make t a subsequence.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abcde\", t = \"a\"\n**Output:** 0\n**Explanation:** t is already a subsequence of s (\"**a**bcde\").\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"z\", t = \"abcde\"\n**Output:** 5\n**Explanation:** Append the characters \"abcde\" to the end of s so that s = \"zabcde\".\nNow, t is a subsequence of s (\"z**abcde**\").\nIt can be shown that appending any 4 characters to the end of s will never make t a subsequence.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length, t.length <= 105`\n* `s` and `t` consist only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def appendCharacters(self, s: str, t: str) -> int:\n        m, n = len(s), len(t)\n        i = 0\n        for j in range(n):\n            while i < m and s[i] != t[j]:\n                i += 1\n            if i == m:\n                return n - j\n            i += 1\n        return 0\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def appendCharacters(self, s: str, t: str) -> int:\n        m, n = len(s), len(t)\n        i = 0\n        for j in range(n):\n            while i < m and s[i] != t[j]:\n                i += 1\n            if i == m:\n                return n - j\n            i += 1\n        return 0\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random strings s and t\n    s = ''.join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(1, 5)))\n    t = ''.join(random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=random.randint(1, 5)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.appendCharacters(s, t)\n\n    return s, t, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        s, t, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.appendCharacters(s, t) == expected_result\n        print(f\"assert solution.appendCharacters('{s}', '{t}') == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.appendCharacters('{s}', '{t}') == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.appendCharacters('uj', 'gf') == 2\nassert solution.appendCharacters('m', 'je') == 2\nassert solution.appendCharacters('ll', 'qy') == 2\nassert solution.appendCharacters('hp', 'qaf') == 3\nassert solution.appendCharacters('a', 'n') == 1\nassert solution.appendCharacters('lc', 'tged') == 4\nassert solution.appendCharacters('rb', 'kj') == 2\nassert solution.appendCharacters('zmph', 'sbmp') == 4\nassert solution.appendCharacters('pjol', 'sorx') == 4\nassert solution.appendCharacters('idx', 'c') == 1\nassert solution.appendCharacters('uhgi', 'rqrfy') == 5\nassert solution.appendCharacters('oa', 'ius') == 3\nassert solution.appendCharacters('zzyd', 'bqt') == 3\nassert solution.appendCharacters('fmhml', 'n') == 1\nassert solution.appendCharacters('ejwfz', 'd') == 1\nassert solution.appendCharacters('uzwrh', 'qtor') == 4\nassert solution.appendCharacters('n', 'sdz') == 3\nassert solution.appendCharacters('lfxrt', 'jd') == 2\nassert solution.appendCharacters('xslg', 'p') == 1\nassert solution.appendCharacters('tv', 'f') == 1\nassert solution.appendCharacters('nldrb', 'drn') == 1\nassert solution.appendCharacters('jfeh', 'qiny') == 4\nassert solution.appendCharacters('wkzs', 'uvpl') == 4\nassert solution.appendCharacters('c', 'zr') == 2\nassert solution.appendCharacters('dxlcb', 've') == 2\nassert solution.appendCharacters('ppce', 'lbcgw') == 5\nassert solution.appendCharacters('ewxpk', 'w') == 0\nassert solution.appendCharacters('lbtiw', 't') == 0\nassert solution.appendCharacters('yjd', 'up') == 2\nassert solution.appendCharacters('riedv', 'dyk') == 2\nassert solution.appendCharacters('lv', 'bv') == 2\nassert solution.appendCharacters('ai', 'w') == 1\nassert solution.appendCharacters('fvbo', 'vvui') == 3\nassert solution.appendCharacters('oof', 'kul') == 3\nassert solution.appendCharacters('hspbd', 'bhlp') == 3\nassert solution.appendCharacters('ikhcu', 'vqwm') == 4\nassert solution.appendCharacters('vgjez', 'zmum') == 3\nassert solution.appendCharacters('g', 'go') == 1\nassert solution.appendCharacters('sxsxw', 't') == 1\nassert solution.appendCharacters('rtsdm', 'rdd') == 1\nassert solution.appendCharacters('g', 'qdab') == 4\nassert solution.appendCharacters('w', 'qkrm') == 4\nassert solution.appendCharacters('gjdkm', 'zjp') == 3\nassert solution.appendCharacters('axp', 'eq') == 2\nassert solution.appendCharacters('wc', 'kzxe') == 4\nassert solution.appendCharacters('uo', 'mj') == 2\nassert solution.appendCharacters('an', 'wex') == 3\nassert solution.appendCharacters('g', 'pjwpf') == 5\nassert solution.appendCharacters('l', 'xvbz') == 4\nassert solution.appendCharacters('t', 'igyty') == 5\nassert solution.appendCharacters('g', 'ff') == 2\nassert solution.appendCharacters('duqqd', 'h') == 1\nassert solution.appendCharacters('ykl', 'md') == 2\nassert solution.appendCharacters('cn', 'hkmzt') == 5\nassert solution.appendCharacters('dbty', 'icrs') == 4\nassert solution.appendCharacters('gj', 'j') == 0\nassert solution.appendCharacters('ky', 'nji') == 3\nassert solution.appendCharacters('f', 'fttn') == 3\nassert solution.appendCharacters('pgs', 'bs') == 2\nassert solution.appendCharacters('o', 'dqzo') == 4\nassert solution.appendCharacters('ryn', 'je') == 2\nassert solution.appendCharacters('bt', 'u') == 1\nassert solution.appendCharacters('dtok', 'x') == 1\nassert solution.appendCharacters('f', 'jm') == 2\nassert solution.appendCharacters('dnp', 'laf') == 3\nassert solution.appendCharacters('dhhm', 'gtuw') == 4\nassert solution.appendCharacters('edfgi', 'zqdf') == 4\nassert solution.appendCharacters('x', 'uih') == 3\nassert solution.appendCharacters('cllf', 'q') == 1\nassert solution.appendCharacters('cf', 'fu') == 1\nassert solution.appendCharacters('ewyvm', 'ebiw') == 3\nassert solution.appendCharacters('lgrfk', 'g') == 0\nassert solution.appendCharacters('sm', 'cv') == 2\nassert solution.appendCharacters('vv', 'x') == 1\nassert solution.appendCharacters('bnqbo', 'cljlg') == 5\nassert solution.appendCharacters('dd', 'sz') == 2\nassert solution.appendCharacters('jeci', 'risc') == 4\nassert solution.appendCharacters('n', 'kb') == 2\nassert solution.appendCharacters('z', 'btmho') == 5\nassert solution.appendCharacters('jntvd', 'y') == 1\nassert solution.appendCharacters('w', 'ssv') == 3\nassert solution.appendCharacters('q', 'somc') == 4\nassert solution.appendCharacters('zzly', 'r') == 1\nassert solution.appendCharacters('qym', 'kqa') == 3\nassert solution.appendCharacters('mwmiv', 'pcxs') == 4\nassert solution.appendCharacters('rbz', 'zzvjh') == 4\nassert solution.appendCharacters('lbe', 'pxyfj') == 5\nassert solution.appendCharacters('kbtn', 'qhc') == 3\nassert solution.appendCharacters('ji', 'am') == 2\nassert solution.appendCharacters('uyc', 'xm') == 2\nassert solution.appendCharacters('uwwc', 'qhhnc') == 5\nassert solution.appendCharacters('csoeb', 'hjolr') == 5\nassert solution.appendCharacters('qrc', 'kit') == 3\nassert solution.appendCharacters('gxw', 'zvxbc') == 5\nassert solution.appendCharacters('nnha', 'fxwg') == 4\nassert solution.appendCharacters('wxps', 'keldh') == 5\nassert solution.appendCharacters('d', 'dmpg') == 3\nassert solution.appendCharacters('jqtm', 'rcwa') == 4\nassert solution.appendCharacters('om', 'ms') == 1\nassert solution.appendCharacters('irf', 'byzp') == 4",
  "inefficient_solution": "class Solution:\n    def appendCharacters(self, s: str, t: str) -> int:\n        m, n = len(s), len(t)\n        i = 0\n        s_list = list(s)\n        t_list = list(t)\n        for j in range(n):\n            while i < m:\n                if s_list[i] in t_list:\n                    t_list.remove(s_list[i])\n                    if j == n - 1:\n                        return n - j\n                    j += 1\n                    break\n                i += 1\n            if i == m:\n                return n - j\n            i += 1\n        return 0",
  "is_python": true
}