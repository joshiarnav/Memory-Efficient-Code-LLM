{
  "problem_idx": 301,
  "task_name": "Remove Invalid Parentheses",
  "markdown_description": "\nGiven a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\n\n\nReturn *a list of **unique strings** that are valid with the minimum number of removals*. You may return the answer in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"()())()\"\n**Output:** [\"(())()\",\"()()()\"]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"(a)())()\"\n**Output:** [\"(a())()\",\"(a)()()\"]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \")(\"\n**Output:** [\"\"]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 25`\n* `s` consists of lowercase English letters and parentheses `'('` and `')'`.\n* There will be at most `20` parentheses in `s`.\n\n\n",
  "canonical_solution": "class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        def dfs(i, l, r, lcnt, rcnt, t):\n            if i == n:\n                if l == 0 and r == 0:\n                    ans.add(t)\n                return\n            if n - i < l + r or lcnt < rcnt:\n                return\n            if s[i] == '(' and l:\n                dfs(i + 1, l - 1, r, lcnt, rcnt, t)\n            elif s[i] == ')' and r:\n                dfs(i + 1, l, r - 1, lcnt, rcnt, t)\n            dfs(i + 1, l, r, lcnt + (s[i] == '('), rcnt + (s[i] == ')'), t + s[i])\n\n        l = r = 0\n        for c in s:\n            if c == '(':\n                l += 1\n            elif c == ')':\n                if l:\n                    l -= 1\n                else:\n                    r += 1\n        ans = set()\n        n = len(s)\n        dfs(0, l, r, 0, 0, '')\n        return list(ans)\n",
  "test_case_generator": "\n# Test case generator\nfrom typing import List\n\ndef generate_test_case():\n    solution = Solution()\n    test_case_generator_results = []\n\n    # Generate random string\n    s = \"\"\n    for _ in range(random.randint(1, 26)):\n        if random.random() < 0.5:\n            s += random.choice(\"abcdefghijklmnopqrstuvwxyz\")\n        else:\n            s += random.choice(\"()\")\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.removeInvalidParentheses(s)\n\n    test_case_generator_results.append(f'assert solution.removeInvalidParentheses(\"{s}\") == {expected_result}')\n\n    return test_case_generator_results\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        test_case_generator_results.extend(generate_test_case())\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.removeInvalidParentheses(\"gk((bfv()))()pgc\") == ['gk((bfv()))()pgc']\nassert solution.removeInvalidParentheses(\"j(((d())w())(vgfdx(i))\") == ['j(((d())w())(vgfdxi))', 'j(((d())w())vgfdx(i))', 'j(((d))w())(vgfdx(i))', 'j(((d())w))(vgfdx(i))', 'j((d())w())(vgfdx(i))']\nassert solution.removeInvalidParentheses(\"))())sx(()(\") == ['()sx()']\nassert solution.removeInvalidParentheses(\"mk(b))e)s)y((ynba(\") == ['mk(bes)yynba', 'mk(b)esyynba', 'mk(be)syynba']\nassert solution.removeInvalidParentheses(\"((c))\") == ['((c))']\nassert solution.removeInvalidParentheses(\"(m))a((g((u((fy(\") == ['(m)agufy']\nassert solution.removeInvalidParentheses(\"h((mrzo(()g(y))(ru)x(\") == ['h(mrzo()g(y))(ru)x', 'h((mrzo(()gy))ru)x', 'h((mrzo)g(y))(ru)x', 'hmrzo(()g(y))(ru)x', 'h(mrzo(()g(y))ru)x', 'h((mrzo()g(y))ru)x', 'h((mrzo()gy))(ru)x', 'h(mrzo(()gy))(ru)x']\nassert solution.removeInvalidParentheses(\")(n(eh(((cv\") == ['nehcv']\nassert solution.removeInvalidParentheses(\")i()((yvoi)or)m)(hk)(\") == ['i()((yvoi)orm)(hk)', 'i(((yvoi)or)m)(hk)', 'i()((yvoi)or)m(hk)', 'i()((yvoior)m)(hk)']\nassert solution.removeInvalidParentheses(\"xfga()((((uh)p()hg(f)g)\") == ['xfga()(((uh)p()hgf)g)', 'xfga()(((uh)p)hg(f)g)', 'xfga()((((uh)p)hgf)g)', 'xfga()((uh)p()hg(f)g)']\nassert solution.removeInvalidParentheses(\")c()(()y)pxpe)ux)(r(ehk\") == ['c(((y)pxpe)ux)rehk', 'c()((y)pxpeux)rehk', 'c((()y)pxpe)uxrehk', 'c()((y)pxpe)uxrehk', 'c()(()y)pxpeuxrehk', 'c()(()ypxpeux)rehk', 'c()((ypxpe)ux)rehk', 'c((()ypxpe)ux)rehk', 'c((()y)pxpeux)rehk', 'c()(()ypxpe)uxrehk']\nassert solution.removeInvalidParentheses(\"ji)bhnq((\") == ['jibhnq']\nassert solution.removeInvalidParentheses(\"kex(i(()((c((p)k))q)\") == ['kexi()((c((p)k))q)', 'kex(i(()((cp)k))q)', 'kexi(()((c(p)k))q)', 'kex(i(()(c(p)k))q)', 'kexi(()(c((p)k))q)', 'kex(i()(c((p)k))q)', 'kex(i(()c((p)k))q)', 'kex(i)((c((p)k))q)', 'kex(i()((c(p)k))q)']\nassert solution.removeInvalidParentheses(\")beyr)x((s())iw\") == ['beyrx((s))iw', 'beyrx(s())iw']\nassert solution.removeInvalidParentheses(\"(y\") == ['y']\nassert solution.removeInvalidParentheses(\"fvyl)o)hsie\") == ['fvylohsie']\nassert solution.removeInvalidParentheses(\"l)(y(()o))c)(b()h(z(i\") == ['l(y((o))c)b()hzi', 'l(y(()o))cb()hzi', 'l(y(()o)c)b()hzi', 'l(y(()o)c)(b)hzi', 'l(y(()o))c(b)hzi', 'l(y((o))c)(b)hzi']\nassert solution.removeInvalidParentheses(\"))r(kcnc(lxxo(j(dbr\") == ['rkcnclxxojdbr']\nassert solution.removeInvalidParentheses(\"(xso()rsf\") == ['xso()rsf', '(xso)rsf']\nassert solution.removeInvalidParentheses(\"(h((zr)mfpzbg)))d(a\") == ['(h((zrmfpzbg)))da', '(h((zr)mfpzbg))da']\nassert solution.removeInvalidParentheses(\"q)(q()n)yo(h))apy()\") == ['q(q()n)yo(h)apy()', 'q(q()nyo(h))apy()', 'q(q(n)yo(h))apy()']\nassert solution.removeInvalidParentheses(\"((((\") == ['']\nassert solution.removeInvalidParentheses(\"xbd(n))hb(\") == ['xbd(n)hb']\nassert solution.removeInvalidParentheses(\")a())tehficna((u(yv((\") == ['a()tehficnauyv']\nassert solution.removeInvalidParentheses(\")(()(w)(fi\") == ['(()w)fi', '()(w)fi']\nassert solution.removeInvalidParentheses(\"jf((ak(if\") == ['jfakif']\nassert solution.removeInvalidParentheses(\"()picue(nyi)\") == ['()picue(nyi)']\nassert solution.removeInvalidParentheses(\"xc)lg(m(bj()\") == ['xclgm(bj)', 'xclgmbj()', 'xclg(mbj)']\nassert solution.removeInvalidParentheses(\"(gcqlg((()u)u)rgfa)(fp(\") == ['(gcqlg((()u)u)rgfa)fp']\nassert solution.removeInvalidParentheses(\"))nystxfk(k(wjl)\") == ['nystxfk(kwjl)', 'nystxfkk(wjl)']\nassert solution.removeInvalidParentheses(\"g)g(b)\") == ['gg(b)']\nassert solution.removeInvalidParentheses(\")m)((k(gz((qx)\") == ['mkgz(qx)', 'm(kgzqx)', 'mk(gzqx)']\nassert solution.removeInvalidParentheses(\")))()mliwrhz(s)u(h(d\") == ['()mliwrhz(s)uhd']\nassert solution.removeInvalidParentheses(\"di(jv(cd((y\") == ['dijvcdy']\nassert solution.removeInvalidParentheses(\"o)j\") == ['oj']\nassert solution.removeInvalidParentheses(\"(\") == ['']\nassert solution.removeInvalidParentheses(\"(c)gyrf\") == ['(c)gyrf']\nassert solution.removeInvalidParentheses(\")k((()mh))vpl\") == ['k((()mh))vpl']\nassert solution.removeInvalidParentheses(\"zrx(os((pi((())zn(jxe\") == ['zrx(os(pi))znjxe', 'zrx(ospi())znjxe', 'zrxos((pi))znjxe', 'zrxos(pi())znjxe', 'zrxospi(())znjxe']\nassert solution.removeInvalidParentheses(\"zt(q)\") == ['zt(q)']\nassert solution.removeInvalidParentheses(\"fy(w))m()odp)u))(s\") == ['fy(wm()odpu)s', 'fy(w)m(odpu)s', 'fy(wm()odp)us', 'fy(w)m()odpus', 'fy(w)m(odp)us', 'fy(wm(odp)u)s', 'fy(wm(odpu))s']\nassert solution.removeInvalidParentheses(\"r))nmbc()o()())b)(\") == ['rnmbc()o()(b)', 'rnmbc(o()()b)', 'rnmbc()o(())b', 'rnmbc(o(())b)', 'rnmbc()o(()b)', 'rnmbc(o()())b', 'rnmbc()o()()b']\nassert solution.removeInvalidParentheses(\"(j((x()(w)\") == ['(jx)(w)', 'j((x)w)', '(jx()w)', 'jx()(w)', 'j(x)(w)', '(j(x)w)', 'j(x()w)']\nassert solution.removeInvalidParentheses(\"))r)(\") == ['r']\nassert solution.removeInvalidParentheses(\"cr(p()j)amrg))(\") == ['cr(p(jamrg))', 'cr(p(j)amrg)', 'cr(p()jamrg)', 'cr(p()j)amrg']\nassert solution.removeInvalidParentheses(\")()qvb(h)(()))()l)xk(m(\") == ['(qvb(h)(())()l)xkm', '(qvb(h)(()))(l)xkm', '()qvb(h(())()l)xkm', '()qvb(h(()))(l)xkm', '()qvb(h)(()()l)xkm', '()qvb(h)(())()lxkm', '(qvb(h(()))()l)xkm', '(qvb(h)(()))()lxkm', '()qvb(h(()))()lxkm', '()qvb(h)(())(l)xkm']\nassert solution.removeInvalidParentheses(\"a(()((gyyd((k(o\") == ['a()gyydko']\nassert solution.removeInvalidParentheses(\"(mpl)zn(zn)g)o)(n)\") == ['(mplzn(zn)go)(n)', '(mpl)zn(zngo)(n)', '(mplzn(zn)g)o(n)', '(mplzn(zng)o)(n)', '(mpl)zn(zn)go(n)', '(mpl)zn(zng)o(n)']\nassert solution.removeInvalidParentheses(\")c()di(dqtqkxk()())j()\") == ['c()di(dqtqkxk()())j()']\nassert solution.removeInvalidParentheses(\")))\") == ['']\nassert solution.removeInvalidParentheses(\"m)))()(\") == ['m()']\nassert solution.removeInvalidParentheses(\"pe)hwa\") == ['pehwa']\nassert solution.removeInvalidParentheses(\"nf))()yucdm)\") == ['nf()yucdm', 'nf(yucdm)']\nassert solution.removeInvalidParentheses(\"(xa)m)cn((\") == ['(xam)cn', '(xa)mcn']\nassert solution.removeInvalidParentheses(\"l((()j)(e((\") == ['l(()j)e']\nassert solution.removeInvalidParentheses(\"((c)()ccdw\") == ['((c))ccdw', '(c)()ccdw']\nassert solution.removeInvalidParentheses(\"()kl)\") == ['(kl)', '()kl']\nassert solution.removeInvalidParentheses(\"((q))je)vr))f)()(deo)(qy(h\") == ['((qje)vr)f()(deo)qyh', '((q)jevr)f()(deo)qyh', '((qje)vrf)()(deo)qyh', '((q)je)vrf()(deo)qyh', '((q)jevrf)()(deo)qyh', '((qjevr))f()(deo)qyh', '((q))jevrf()(deo)qyh', '((qjevr)f)()(deo)qyh']\nassert solution.removeInvalidParentheses(\"dr((w)qm)(())izo)r(\") == ['dr((w)qm)(()izo)r', 'dr((wqm)(())izo)r', 'dr((w)qm(())izo)r', 'dr((w)qm)(())izor']\nassert solution.removeInvalidParentheses(\"c(ik)(((v)bck())ju\") == ['c(ik)(((v)bck))ju', 'c(ik)((v)bck())ju']\nassert solution.removeInvalidParentheses(\"tu(mv)))aan(x)u)z)i(oy)\") == ['tu(mv)aan(x)uzi(oy)', 'tu(mvaan(xu)z)i(oy)', 'tu(mv)aan(xu)zi(oy)', 'tu(mvaan(x)u)zi(oy)', 'tu(mv)aan(xuz)i(oy)', 'tu(mvaan(x)uz)i(oy)']\nassert solution.removeInvalidParentheses(\"))c))zvvg()vi)n(az)((i)\") == ['czvvg()vin(az)(i)', 'czvvg(vi)n(az)(i)']\nassert solution.removeInvalidParentheses(\"dbg())()zgg((es))e\") == ['dbg()()zgg((es))e']\nassert solution.removeInvalidParentheses(\"i)(ziobpg())a\") == ['i(ziobpg())a']\nassert solution.removeInvalidParentheses(\"i\") == ['i']\nassert solution.removeInvalidParentheses(\")a)(()ph(m(a((v()(ezo)l)v\") == ['a()phm(a((v)ezo)l)v', 'a(()phm(av()ezo)l)v', 'a()ph(ma(v)(ezo)l)v', 'a(()ph(ma(v)ezo)l)v', 'a()ph(ma((v)ezo)l)v', 'a()phma(v()(ezo)l)v', 'a()ph(ma(v()ezo)l)v', 'a(()phma(v)(ezo)l)v', 'a(()ph(mav()ezo)l)v', 'a()phm(av()(ezo)l)v', 'a()phm(a(v()ezo)l)v', 'a(()ph(m(av)ezo)l)v', 'a()phm(a(v)(ezo)l)v', 'a()ph(m(av()ezo)l)v', 'a(()phmav()(ezo)l)v', 'a(()phm(av)(ezo)l)v', 'a(()phma((v)ezo)l)v', 'a()phma((v)(ezo)l)v', 'a()phma((v()ezo)l)v', 'a(()phm(a(v)ezo)l)v', 'a()ph(mav()(ezo)l)v', 'a(()phma(v()ezo)l)v', 'a(()ph(mav)(ezo)l)v', 'a()ph(m(a(v)ezo)l)v', 'a()ph(m(av)(ezo)l)v']\nassert solution.removeInvalidParentheses(\"xyn()i)n))h(ct(fbekl((ln(\") == ['xyn()inhctfbeklln', 'xyn(in)hctfbeklln', 'xyn(i)nhctfbeklln']\nassert solution.removeInvalidParentheses(\"(\") == ['']\nassert solution.removeInvalidParentheses(\"(())((\") == ['(())']\nassert solution.removeInvalidParentheses(\"dvs((()bp()gvx\") == ['dvs(()bp)gvx', 'dvs()bp()gvx']\nassert solution.removeInvalidParentheses(\"m)au)((la(tff(c)()plh)d\") == ['mau((latff(c))plh)d', 'mau((latffc)()plh)d', 'maula(tff(c)()plh)d', 'mau(la(tff(c))plh)d', 'mau((la(tffc))plh)d', 'mau(la(tffc)()plh)d', 'mau(latff(c)()plh)d']\nassert solution.removeInvalidParentheses(\"((ep\") == ['ep']\nassert solution.removeInvalidParentheses(\")((os(k(o\") == ['osko']\nassert solution.removeInvalidParentheses(\"z(g)))ee))()i))((w())(((((\") == ['z(g)ee()i(w())', 'z(gee)()i(w())', 'z(g)ee()i((w))', 'z(gee)(i)((w))', 'z(gee(i))((w))', 'z(g)ee(i)(w())', 'z(gee()i)((w))', 'z(gee)()i((w))', 'z(g)ee(i)((w))', 'z(gee)(i)(w())', 'z(gee(i))(w())', 'z(gee()i)(w())']\nassert solution.removeInvalidParentheses(\"(npc)(dsu(ya)j)(yw\") == ['(npc)(dsu(ya)j)yw']\nassert solution.removeInvalidParentheses(\"zh)))e)\") == ['zhe']\nassert solution.removeInvalidParentheses(\")(puzmvma)))(ngo(\") == ['(puzmvma)ngo']\nassert solution.removeInvalidParentheses(\"))i()))lhq\") == ['i()lhq']\nassert solution.removeInvalidParentheses(\"()hc\") == ['()hc']\nassert solution.removeInvalidParentheses(\"q)()))bh(\") == ['q()bh']\nassert solution.removeInvalidParentheses(\"()(y(jthabo)l)\") == ['()(y(jthabo)l)']\nassert solution.removeInvalidParentheses(\")(hzc(()kk))f(m(ck()d()\") == ['(hzc(()kk))f(m(ck)d)', '(hzc(()kk))fm(ck)d()', '(hzc(()kk))f(mck)d()', '(hzc(()kk))f(mck()d)', '(hzc(()kk))fm(ck()d)', '(hzc(()kk))fmck()d()']\nassert solution.removeInvalidParentheses(\")gt()\") == ['gt()']\nassert solution.removeInvalidParentheses(\")))vhk(ahmhn\") == ['vhkahmhn']\nassert solution.removeInvalidParentheses(\")lw))q(r\") == ['lwqr']\nassert solution.removeInvalidParentheses(\"qc)(shso))x(qfh()f)dt\") == ['qc(shso)x(qfh()f)dt']\nassert solution.removeInvalidParentheses(\"((l))(jui()(()ovd)p)t)gy)\") == ['((l))(jui()((ovd)p)t)gy', '((l))(jui()(()ovd)p)tgy', '((l))(jui()((ovdp)t)gy)', '((l))(jui()(()ovd)pt)gy', '((l)(jui()(()ovd)p)tgy)', '((l))(jui()(()ovdpt)gy)', '((l(jui()(()ovd)p)t)gy)', '((l)(jui()(()ovd)p)t)gy', '((l)(jui()((ovd)p)t)gy)', '((l))(jui(((ovd)p)t)gy)', '((l)(jui((()ovd)p)t)gy)', '((l)(jui()(()ovdp)t)gy)', '((l))(jui()(()ovdp)t)gy', '((l))(jui((()ovd)pt)gy)', '((l))(jui()((ovd)pt)gy)', '((l))(jui((()ovdp)t)gy)', '((l)(jui()(()ovd)pt)gy)', '((l))(jui((()ovd)p)t)gy', '((l))(jui((()ovd)p)tgy)', '((l))(jui()(()ovd)ptgy)', '((l))(jui()(()ovdp)tgy)', '((l))(jui()((ovd)p)tgy)']\nassert solution.removeInvalidParentheses(\"(dglhyh(z)k))z\") == ['(dglhyh(zk))z', '(dglhyh(z)k)z']\nassert solution.removeInvalidParentheses(\"z)s)ra)ltkp)(f))r)))j)d\") == ['zsraltkp(frj)d', 'zsraltkp(f)rjd', 'zsraltkp(fr)jd']\nassert solution.removeInvalidParentheses(\"mg)b(b(i(\") == ['mgbbi']\nassert solution.removeInvalidParentheses(\"l((v)tpl)u)w((o\") == ['l((v)tpl)uwo', 'l((vtpl)u)wo', 'l((v)tplu)wo']\nassert solution.removeInvalidParentheses(\")x)vdlb\") == ['xvdlb']\nassert solution.removeInvalidParentheses(\"((opyx)\") == ['(opyx)']\nassert solution.removeInvalidParentheses(\"qac(()()e)bvk(a)h\") == ['qac(()()e)bvk(a)h']\nassert solution.removeInvalidParentheses(\"(ttc)(wly)v((\") == ['(ttc)(wly)v']\nassert solution.removeInvalidParentheses(\"gn(()(nc(a()f)((e\") == ['gn(()(nca)f)e', 'gn(()nc(a)f)e', 'gn()nc(a()f)e', 'gn()(nc(a)f)e', 'gn()(nca()f)e', 'gn(()nca()f)e']\nassert solution.removeInvalidParentheses(\")o))uep()gkubl(ob((h\") == ['ouep()gkublobh']\nassert solution.removeInvalidParentheses(\"))(j)(p)q\") == ['(j)(p)q']\nassert solution.removeInvalidParentheses(\"h)(nvx(a)w))qd))w(f)(\") == ['h(nvx(a)wqd)w(f)', 'h(nvx(a)w)qdw(f)', 'h(nvx(aw))qdw(f)', 'h(nvx(awqd))w(f)', 'h(nvx(aw)qd)w(f)']\nassert solution.removeInvalidParentheses(\")\") == ['']",
  "inefficient_solution": "class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        def dfs(i, l, r, lcnt, rcnt, t, temp, ans):\n            if i == n:\n                if l == 0 and r == 0:\n                    ans.add(temp + t)\n                    for _ in range(1000):\n                        ans.add(temp + t + '_')\n                return\n            if n - i < l + r or lcnt < rcnt:\n                return\n            if s[i] == '(' and l:\n                dfs(i + 1, l - 1, r, lcnt, rcnt, t, temp + '(', ans)\n            elif s[i] == ')':\n                dfs(i + 1, l, r - 1, lcnt, rcnt, t, temp, ans)\n                for _ in range(100):\n                    dfs(i + 1, l, r - 1, lcnt, rcnt, t, temp + ')', ans)\n            dfs(i + 1, l, r, lcnt + (s[i] == '('), rcnt + (s[i] == ')'), t + s[i], temp, ans)\n\n        l = r = 0\n        for c in s:\n            if c == '(':\n                l += 1\n            elif c == ')':\n                if l:\n                    l -= 1\n                else:\n                    r += 1\n        ans = set()\n        n = len(s)\n        dfs(0, l, r, 0, 0, '', '', ans)\n        return list(ans)",
  "is_python": true
}