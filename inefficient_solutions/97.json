{
  "problem_idx": 97,
  "task_name": "Interleaving String",
  "markdown_description": "\nGiven strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an **interleaving** of `s1` and `s2`.\n\n\nAn **interleaving** of two strings `s` and `t` is a configuration where `s` and `t` are divided into `n` and `m` substrings respectively, such that:\n\n\n* `s = s1 + s2 + ... + sn`\n* `t = t1 + t2 + ... + tm`\n* `|n - m| <= 1`\n* The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\n\n\n**Note:** `a + b` is the concatenation of strings `a` and `b`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0097.Interleaving%20String/images/interleave.jpg)\n\n```\n\n**Input:** s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n**Output:** true\n**Explanation:** One way to obtain s3 is:\nSplit s1 into s1 = \"aa\" + \"bc\" + \"c\", and s2 into s2 = \"dbbc\" + \"a\".\nInterleaving the two splits, we get \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".\nSince s3 can be obtained by interleaving s1 and s2, we return true.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n**Output:** false\n**Explanation:** Notice how it is impossible to interleave s2 with any other string to obtain s3.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s1 = \"\", s2 = \"\", s3 = \"\"\n**Output:** true\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= s1.length, s2.length <= 100`\n* `0 <= s3.length <= 200`\n* `s1`, `s2`, and `s3` consist of lowercase English letters.\n\n\n\u00a0\n\n\n**Follow up:** Could you solve it using only `O(s2.length)` additional memory space?\n\n\n",
  "canonical_solution": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        m, n = len(s1), len(s2)\n        if m + n != len(s3):\n            return False\n        f = [True] + [False] * n\n        for i in range(m + 1):\n            for j in range(n + 1):\n                k = i + j - 1\n                if i:\n                    f[j] &= s1[i - 1] == s3[k]\n                if j:\n                    f[j] |= f[j - 1] and s2[j - 1] == s3[k]\n        return f[n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isInterleave(self, s1, s2, s3):\n        m, n = len(s1), len(s2)\n        if m + n != len(s3):\n            return False\n        f = [True] + [False] * n\n        for i in range(m + 1):\n            for j in range(n + 1):\n                k = i + j - 1\n                if i:\n                    f[j] &= s1[i - 1] == s3[k]\n                if j:\n                    f[j] |= f[j - 1] and s2[j - 1] == s3[k]\n        return f[n]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    s1 = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(0, 10)))\n    s2 = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(0, 10)))\n    s3 = ''\n    for i in range(len(s1) + len(s2)):\n        if i < len(s1):\n            s3 += s1[i]\n        if i < len(s2):\n            s3 += s2[i]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isInterleave(s1, s2, s3)\n\n    return s1, s2, s3, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s1, s2, s3, expected_result = generate_test_case()\n        solution = Solution()\n        \n        # Construct the test case in the desired format\n        test_case = f\"assert solution.isInterleave('{s1}', '{s2}', '{s3}') == {expected_result}\"\n        \n        # Print and append the test case\n        print(test_case)\n        test_case_generator_results.append(test_case)\n    \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isInterleave('h', 'ubu', 'hubu') == True\nassert solution.isInterleave('goxoitqxzy', 'bmknn', 'gbomxkonintqxzy') == True\nassert solution.isInterleave('rktvu', 'cndbzru', 'rckntdvbuzru') == True\nassert solution.isInterleave('q', 'fplvbinrl', 'qfplvbinrl') == True\nassert solution.isInterleave('ry', 'r', 'rry') == True\nassert solution.isInterleave('v', 'cjp', 'vcjp') == True\nassert solution.isInterleave('dnaatg', '', 'dnaatg') == True\nassert solution.isInterleave('upebpoc', 'wa', 'uwpaebpoc') == True\nassert solution.isInterleave('utuwcpisyu', 'ul', 'uutluwcpisyu') == True\nassert solution.isInterleave('j', 'lapw', 'jlapw') == True\nassert solution.isInterleave('', 'xru', 'xru') == True\nassert solution.isInterleave('kduqtlrpi', 'yztvv', 'kydzutqvtvlrpi') == True\nassert solution.isInterleave('cf', 'gm', 'cgfm') == True\nassert solution.isInterleave('a', 'scvhlni', 'ascvhlni') == True\nassert solution.isInterleave('loqfm', 'jqi', 'ljoqqifm') == True\nassert solution.isInterleave('cy', 'vetmyh', 'cvyetmyh') == True\nassert solution.isInterleave('', 'omssbd', 'omssbd') == True\nassert solution.isInterleave('', 'klp', 'klp') == True\nassert solution.isInterleave('bgxqkarub', 'puuywt', 'bpguxuqykwatrub') == True\nassert solution.isInterleave('qbkfpxerx', 'lbmuiuqlu', 'qlbbkmfupixueqrlxu') == True\nassert solution.isInterleave('zc', 'syrdvqbddu', 'zscyrdvqbddu') == True\nassert solution.isInterleave('o', 'd', 'od') == True\nassert solution.isInterleave('azyl', 'djk', 'adzjykl') == True\nassert solution.isInterleave('dlzowdlwyt', 'rgdi', 'drlgzdoiwdlwyt') == True\nassert solution.isInterleave('ppxqajz', 'krjkm', 'pkprxjqkamjz') == True\nassert solution.isInterleave('tq', 'dqaacyll', 'tdqqaacyll') == True\nassert solution.isInterleave('xy', 'buxallvk', 'xbyuxallvk') == True\nassert solution.isInterleave('pwgtqqhm', 'vsvv', 'pvwsgvtvqqhm') == True\nassert solution.isInterleave('sa', '', 'sa') == True\nassert solution.isInterleave('funyhi', 'ajrrp', 'faujnryrhpi') == True\nassert solution.isInterleave('mr', 'ciavkdizgb', 'mcriavkdizgb') == True\nassert solution.isInterleave('iiltzybxti', 'as', 'iaisltzybxti') == True\nassert solution.isInterleave('wvp', 'ahkclg', 'wavhpkclg') == True\nassert solution.isInterleave('sqncspgf', 'ukemqw', 'suqknecmsqpwgf') == True\nassert solution.isInterleave('lvycai', 'ypqbna', 'lyvpyqcbania') == True\nassert solution.isInterleave('', 'nzsmtjwhtq', 'nzsmtjwhtq') == True\nassert solution.isInterleave('ma', '', 'ma') == True\nassert solution.isInterleave('a', 'uu', 'auu') == True\nassert solution.isInterleave('evltl', 'mdkbh', 'emvdlktblh') == True\nassert solution.isInterleave('nygnoqi', 'dijp', 'ndyigjnpoqi') == True\nassert solution.isInterleave('dzg', 'enibyt', 'dezngibyt') == True\nassert solution.isInterleave('jbznsya', 'wlmlvmy', 'jwblzmnlsvymay') == True\nassert solution.isInterleave('wmuryh', '', 'wmuryh') == True\nassert solution.isInterleave('', 'spea', 'spea') == True\nassert solution.isInterleave('wlwunxb', 'onjxc', 'wolnwjuxncxb') == True\nassert solution.isInterleave('yngqwlldco', '', 'yngqwlldco') == True\nassert solution.isInterleave('uovhdupskg', 'xgdwd', 'uxogvdhwddupskg') == True\nassert solution.isInterleave('cqdofkinh', 'zfefw', 'czqfdeoffwkinh') == True\nassert solution.isInterleave('lf', 'w', 'lwf') == True\nassert solution.isInterleave('tyytkixsl', 'svzolfia', 'tsyvyztoklifxisal') == True\nassert solution.isInterleave('ola', 'grftgnia', 'oglraftgnia') == True\nassert solution.isInterleave('lui', 'jhl', 'ljuhil') == True\nassert solution.isInterleave('eedgvdxydq', '', 'eedgvdxydq') == True\nassert solution.isInterleave('fhvmwlxj', 'iidkqfu', 'fihivdmkwqlfxuj') == True\nassert solution.isInterleave('hlyliiirju', 'zopovkibm', 'hzloyploivikiirbjmu') == True\nassert solution.isInterleave('kqs', 'qtieatl', 'kqqtsieatl') == True\nassert solution.isInterleave('uiqdu', 'm', 'umiqdu') == True\nassert solution.isInterleave('', 'qzan', 'qzan') == True\nassert solution.isInterleave('zbqia', 'bvqxalre', 'zbbvqqixaalre') == True\nassert solution.isInterleave('suwloxawf', 'wi', 'swuiwloxawf') == True\nassert solution.isInterleave('wv', 'sskut', 'wsvskut') == True\nassert solution.isInterleave('av', 'mh', 'amvh') == True\nassert solution.isInterleave('t', 'k', 'tk') == True\nassert solution.isInterleave('zwqqqrnzvf', '', 'zwqqqrnzvf') == True\nassert solution.isInterleave('fa', 'tcmudtpbgr', 'ftacmudtpbgr') == True\nassert solution.isInterleave('ssiqnfg', 'jtm', 'sjstimqnfg') == True\nassert solution.isInterleave('jbdfjuthzw', 'zbxjt', 'jzbbdxfjjtuthzw') == True\nassert solution.isInterleave('xb', 'arwuhs', 'xabrwuhs') == True\nassert solution.isInterleave('zggp', '', 'zggp') == True\nassert solution.isInterleave('cnowv', 'kgnfh', 'ckngonwfvh') == True\nassert solution.isInterleave('bqxxcn', 'um', 'buqmxxcn') == True\nassert solution.isInterleave('cauwz', 'ewxtdh', 'ceawuxwtzdh') == True\nassert solution.isInterleave('ophnntd', 'mus', 'ompuhsnntd') == True\nassert solution.isInterleave('vgtoa', 'kjoyug', 'vkgjtooyaug') == True\nassert solution.isInterleave('ahgjn', 'uqt', 'auhqgtjn') == True\nassert solution.isInterleave('p', 'o', 'po') == True\nassert solution.isInterleave('gznvq', 'itu', 'giztnuvq') == True\nassert solution.isInterleave('', 'i', 'i') == True\nassert solution.isInterleave('znccd', '', 'znccd') == True\nassert solution.isInterleave('ketxhi', 'ivaotmgafx', 'kievtaxohtimgafx') == True\nassert solution.isInterleave('lohxvstnox', 'ahcvf', 'laohhcxvvfstnox') == True\nassert solution.isInterleave('bx', 'uvrcmylmb', 'buxvrcmylmb') == True\nassert solution.isInterleave('lbdrecgxz', '', 'lbdrecgxz') == True\nassert solution.isInterleave('undcfc', 'qkorulgprj', 'uqnkdocrfuclgprj') == True\nassert solution.isInterleave('f', 'fftj', 'ffftj') == True\nassert solution.isInterleave('uogpm', 'jvds', 'ujovgdpsm') == True\nassert solution.isInterleave('io', 'lndlw', 'ilondlw') == True\nassert solution.isInterleave('ukqriafyd', 'qwkwi', 'uqkwqkrwiiafyd') == True\nassert solution.isInterleave('jkemjo', 'wjurn', 'jwkjeumrjno') == True\nassert solution.isInterleave('', 'mg', 'mg') == True\nassert solution.isInterleave('q', 'ywsmddybyb', 'qywsmddybyb') == True\nassert solution.isInterleave('ftekvsd', '', 'ftekvsd') == True\nassert solution.isInterleave('tzvrycj', 'dmgh', 'tdzmvgrhycj') == True\nassert solution.isInterleave('wpikpj', 'jrdg', 'wjpridkgpj') == True\nassert solution.isInterleave('s', 'ckeasm', 'sckeasm') == True\nassert solution.isInterleave('yipd', 'e', 'yeipd') == True\nassert solution.isInterleave('bxcuegbnxq', 'ezuyqv', 'bexzcuuyeqgvbnxq') == True\nassert solution.isInterleave('', 'hndovbi', 'hndovbi') == True\nassert solution.isInterleave('fdq', '', 'fdq') == True\nassert solution.isInterleave('oxbhfnzde', 'rjmb', 'orxjbmhbfnzde') == True",
  "inefficient_solution": "class Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        m, n = len(s1), len(s2)\n        if m + n != len(s3):\n            return False\n        f = [[False for _ in range(n + 1)] for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                for k in range(i + j - 1, min(m, n) + i + j - 1, -1):\n                    if i:\n                        f[i][j] |= s1[i - 1] == s3[k]\n                    if j:\n                        f[i][j] |= f[i][j - 1] and s2[j - 1] == s3[k]\n        return f[m][n]",
  "is_python": true
}