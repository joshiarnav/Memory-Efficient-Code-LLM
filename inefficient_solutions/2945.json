{
  "problem_idx": 2945,
  "task_name": "Find Maximum Non",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums`.\n\n\nYou can perform any number of operations, where each operation involves selecting a **subarray** of the array and replacing it with the **sum** of its elements. For example, if the given array is `[1,3,5,6]` and you select subarray `[3,5]` the array will convert to `[1,8,6]`.\n\n\nReturn *the* ***maximum*** *length of a* ***non-decreasing*** *array that can be made after applying operations.*\n\n\nA **subarray** is a contiguous **non-empty** sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [5,2,2]\n**Output:** 1\n**Explanation:** This array with length 3 is not non-decreasing.\nWe have two ways to make the array length two.\nFirst, choosing subarray [2,2] converts the array to [5,4].\nSecond, choosing subarray [5,2] converts the array to [7,2].\nIn these two ways the array is not non-decreasing.\nAnd if we choose subarray [5,2,2] and replace it with [9] it becomes non-decreasing. \nSo the answer is 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4]\n**Output:** 4\n**Explanation:** The array is non-decreasing. So the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [4,3,2,6]\n**Output:** 3\n**Explanation:** Replacing [3,2] with [5] converts the given array to [4,5,6] that is non-decreasing.\nBecause the given array is not non-decreasing, the maximum possible answer is 3.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def findMaximumLength(self, nums: List[int]) -> int:\n        n = len(nums)\n        s = list(accumulate(nums, initial=0))\n        f = [0] * (n + 1)\n        pre = [0] * (n + 2)\n        for i in range(1, n + 1):\n            pre[i] = max(pre[i], pre[i - 1])\n            f[i] = f[pre[i]] + 1\n            j = bisect_left(s, s[i] * 2 - s[pre[i]])\n            pre[j] = i\n        return f[n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findMaximumLength(self, nums):\n        n = len(nums)\n        s = list(accumulate(nums, initial=0))\n        f = [0] * (n + 1)\n        pre = [0] * (n + 2)\n        for i in range(1, n + 1):\n            pre[i] = max(pre[i], pre[i - 1])\n            f[i] = f[pre[i]] + 1\n            j = bisect_left(s, s[i] * 2 - s[pre[i]])\n            pre[j] = i\n        return f[n]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMaximumLength(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMaximumLength(nums) == expected_result\n        print(f\"assert solution.findMaximumLength({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMaximumLength({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findMaximumLength([75, 41, 62, 53, 77, 1, 10, 4]) == 3\nassert solution.findMaximumLength([82, 16, 17, 21, 95, 74, 11]) == 2\nassert solution.findMaximumLength([81, 62, 1, 94, 100, 74, 72, 30, 96, 5]) == 4\nassert solution.findMaximumLength([27, 39, 25, 34, 74, 7, 59]) == 4\nassert solution.findMaximumLength([93, 9, 60, 73]) == 2\nassert solution.findMaximumLength([67, 100, 40]) == 2\nassert solution.findMaximumLength([5, 98, 89, 94]) == 3\nassert solution.findMaximumLength([56, 42, 99, 29, 10, 55, 44]) == 3\nassert solution.findMaximumLength([52, 32, 26, 63, 4, 57, 53, 72, 79, 47]) == 5\nassert solution.findMaximumLength([16, 84, 36, 75, 95, 34, 48, 62, 19]) == 5\nassert solution.findMaximumLength([8, 79, 37, 28, 23, 24, 2]) == 3\nassert solution.findMaximumLength([2, 85, 25, 83, 80, 71, 28, 26, 27]) == 4\nassert solution.findMaximumLength([63, 72, 12, 81, 10, 46, 65, 56, 82, 41]) == 5\nassert solution.findMaximumLength([32, 60, 98, 54, 7, 56, 59, 41, 57, 78]) == 5\nassert solution.findMaximumLength([84, 58, 40, 1, 35, 89]) == 3\nassert solution.findMaximumLength([16, 61, 7]) == 2\nassert solution.findMaximumLength([85, 67, 21, 61, 69]) == 3\nassert solution.findMaximumLength([71, 23, 69, 99, 47, 92, 64, 3, 40]) == 4\nassert solution.findMaximumLength([41, 33, 85, 59, 62]) == 3\nassert solution.findMaximumLength([59, 75, 20]) == 2\nassert solution.findMaximumLength([57, 23, 2, 21, 33, 7, 54]) == 2\nassert solution.findMaximumLength([90, 75]) == 1\nassert solution.findMaximumLength([22, 21, 31, 87, 61, 36, 53, 80, 16]) == 5\nassert solution.findMaximumLength([9, 81, 18]) == 2\nassert solution.findMaximumLength([31, 59, 10, 32, 60, 3, 18, 72]) == 4\nassert solution.findMaximumLength([23, 53, 52, 39, 29, 26, 77, 56, 63, 79]) == 5\nassert solution.findMaximumLength([3, 84]) == 2\nassert solution.findMaximumLength([69, 37, 56, 99, 34, 65]) == 4\nassert solution.findMaximumLength([2, 60, 21, 28, 70, 82, 30, 35]) == 4\nassert solution.findMaximumLength([15, 81]) == 2\nassert solution.findMaximumLength([36, 18, 71, 52, 42]) == 3\nassert solution.findMaximumLength([99, 1, 29, 7, 5, 25, 54, 11]) == 2\nassert solution.findMaximumLength([98, 22, 41, 51, 49, 24, 53, 93]) == 3\nassert solution.findMaximumLength([96, 6, 23, 46, 40, 25, 31, 74, 26]) == 3\nassert solution.findMaximumLength([1, 23, 85, 5, 74, 86, 78]) == 4\nassert solution.findMaximumLength([61, 52, 81, 38, 97]) == 3\nassert solution.findMaximumLength([22, 87, 74, 83, 9, 29, 7, 92, 42]) == 4\nassert solution.findMaximumLength([92, 45, 38]) == 1\nassert solution.findMaximumLength([37, 8, 4]) == 1\nassert solution.findMaximumLength([94, 84, 10, 92, 91, 66, 40]) == 3\nassert solution.findMaximumLength([60, 46, 40, 44, 52, 50, 95, 81, 62]) == 4\nassert solution.findMaximumLength([8, 100, 1, 77, 9, 28, 60, 72]) == 4\nassert solution.findMaximumLength([98, 26, 61]) == 1\nassert solution.findMaximumLength([65, 81, 97, 38, 24, 1]) == 3\nassert solution.findMaximumLength([91, 23, 28, 100]) == 2\nassert solution.findMaximumLength([45, 61, 1]) == 2\nassert solution.findMaximumLength([67, 95, 7, 78, 86, 89, 53, 58, 38, 34]) == 4\nassert solution.findMaximumLength([95, 66, 12, 72]) == 2\nassert solution.findMaximumLength([65, 68]) == 2\nassert solution.findMaximumLength([97, 25, 41, 93, 51, 27, 59, 48, 87]) == 3\nassert solution.findMaximumLength([56, 81, 21, 28, 86, 72]) == 3\nassert solution.findMaximumLength([56, 20, 51, 37, 77, 23, 18, 16, 7, 5]) == 3\nassert solution.findMaximumLength([79, 64, 21, 12, 3, 50, 83]) == 3\nassert solution.findMaximumLength([85, 35, 67, 90, 71, 58, 23, 73, 44]) == 4\nassert solution.findMaximumLength([62, 64]) == 2\nassert solution.findMaximumLength([79, 24, 61, 45, 12, 87, 49, 74, 39]) == 4\nassert solution.findMaximumLength([3, 71, 36, 15, 78, 90, 39, 81, 74]) == 5\nassert solution.findMaximumLength([96, 89, 67, 10, 93, 19, 8]) == 2\nassert solution.findMaximumLength([99, 35, 91, 55, 37, 89, 28, 48, 87, 64]) == 4\nassert solution.findMaximumLength([69, 79, 16, 10]) == 2\nassert solution.findMaximumLength([6, 29, 28, 85]) == 3\nassert solution.findMaximumLength([25, 65, 4, 52]) == 2\nassert solution.findMaximumLength([93, 23, 100, 74, 57, 46]) == 3\nassert solution.findMaximumLength([95, 12, 18, 22, 98, 3, 88]) == 2\nassert solution.findMaximumLength([59, 75, 84, 57, 8, 82, 14, 88]) == 4\nassert solution.findMaximumLength([72, 8, 15, 10, 57, 67]) == 2\nassert solution.findMaximumLength([32, 58, 24, 30]) == 2\nassert solution.findMaximumLength([21, 81, 95, 55, 8, 23, 51, 4]) == 4\nassert solution.findMaximumLength([91, 29, 82, 35, 72, 77, 88, 100, 6]) == 4\nassert solution.findMaximumLength([19, 68]) == 2\nassert solution.findMaximumLength([7, 35, 83, 89]) == 4\nassert solution.findMaximumLength([2, 62, 31, 57, 36, 69]) == 4\nassert solution.findMaximumLength([2, 6, 55, 92]) == 4\nassert solution.findMaximumLength([81, 77, 52, 92, 85, 28, 10]) == 3\nassert solution.findMaximumLength([34, 80, 28, 90, 8, 93, 49, 87, 23]) == 4\nassert solution.findMaximumLength([43, 10, 66, 60, 17]) == 3\nassert solution.findMaximumLength([7, 14]) == 2\nassert solution.findMaximumLength([86, 48, 73, 77, 47]) == 3\nassert solution.findMaximumLength([40, 1, 23]) == 1\nassert solution.findMaximumLength([67, 32, 3, 74, 59, 81, 43]) == 3\nassert solution.findMaximumLength([26, 78, 50, 14, 79, 97]) == 3\nassert solution.findMaximumLength([90, 16, 6]) == 1\nassert solution.findMaximumLength([32, 74, 63]) == 2\nassert solution.findMaximumLength([98, 79, 20, 30, 18, 72, 56, 70, 63]) == 4\nassert solution.findMaximumLength([9, 4]) == 1\nassert solution.findMaximumLength([48, 63, 65, 79, 31, 25, 14]) == 4\nassert solution.findMaximumLength([57, 36]) == 1\nassert solution.findMaximumLength([93, 50, 94, 78, 23]) == 2\nassert solution.findMaximumLength([31, 64, 54, 40, 84, 41, 69]) == 4\nassert solution.findMaximumLength([65, 75, 69]) == 2\nassert solution.findMaximumLength([22, 21, 97, 5, 64, 86, 93]) == 3\nassert solution.findMaximumLength([94, 40, 57, 85, 25, 41]) == 3\nassert solution.findMaximumLength([35, 28]) == 1\nassert solution.findMaximumLength([43, 33, 22, 26, 82, 79, 73, 89]) == 4\nassert solution.findMaximumLength([13, 71, 97, 11, 63]) == 3\nassert solution.findMaximumLength([12, 14]) == 2\nassert solution.findMaximumLength([99, 75, 17]) == 1\nassert solution.findMaximumLength([100, 42, 66, 26, 4]) == 2\nassert solution.findMaximumLength([78, 1, 60, 99, 79, 23, 61, 40, 37]) == 3\nassert solution.findMaximumLength([11, 51, 7, 62]) == 3",
  "inefficient_solution": "class Solution:\n    def findMaximumLength(self, nums):\n        n = len(nums)\n        s = [0] * (n * 1000)  # allocate a large list to store cumulative sums\n        for i in range(n):\n            s[i] = nums[i]\n            for j in range(i):\n                s[i] += s[j]\n        f = [[0] * n for _ in range(n * 1000)]  # allocate a 2D list to store dynamic programming table\n        pre = [0] * (n * 1000)  # allocate another large list to store prefix max\n        for i in range(1, n):\n            pre[i] = max(pre[i], pre[i - 1])\n            for j in range(i):\n                f[i][j] = f[pre[j]][j] + 1\n                k = bisect_left(s, s[i] * 2 - s[pre[j]])\n                pre[k] = i\n        max_len = 0\n        for i in range(n):\n            max_len = max(max_len, f[n - 1][i])\n        return max_len",
  "is_python": true
}