{
  "problem_idx": 198,
  "task_name": "House Robber",
  "markdown_description": "\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1]\n**Output:** 4\n**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,7,9,3,1]\n**Output:** 12\n**Explanation:** Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 400`\n\n\n",
  "canonical_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        f = g = 0\n        for x in nums:\n            f, g = max(f, g), f + x\n        return max(f, g)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        f = g = 0\n        for x in nums:\n            f, g = max(f, g), f + x\n        return max(f, g)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 401), random.randint(1, 100))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.rob(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        actual_result = solution.rob(nums)\n        assert actual_result == expected_result\n        print(f\"assert solution.rob({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.rob({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.rob([5, 76, 11, 83, 84, 218, 246, 178, 82, 117, 309, 338, 221, 345, 394, 229, 233, 239, 337, 169, 268, 296, 273, 107, 176, 104, 190, 88, 91, 349, 62, 1, 97, 90]) == 3402\nassert solution.rob([210, 62, 226, 373, 122, 170, 197, 348, 268, 14, 400, 169, 278, 15, 83, 24, 302, 174, 166, 237, 4, 173, 180, 379, 154, 264, 32, 384, 220, 35, 286, 81, 310, 41, 44, 333, 254, 190, 97, 40, 18, 202, 321, 187, 93, 176, 144, 19, 179, 317, 156, 118, 377, 291, 351, 163, 374, 332, 111, 354, 211, 196, 137, 16, 49, 243, 209, 337, 151, 364, 165, 87, 371, 30, 304, 188, 240, 84, 324, 127, 343, 11, 328, 347, 214, 370, 158, 217, 399, 338, 295, 73, 88, 123, 222, 306, 323, 309, 314]) == 12213\nassert solution.rob([49, 193, 387, 127, 46, 362, 366, 356, 125, 177, 195, 349, 117]) == 1680\nassert solution.rob([261, 165, 323, 251, 391, 234, 134, 103, 43, 84, 232, 216, 93, 379, 349, 176, 230, 377, 290, 49, 262, 200, 171, 219, 186, 347, 139, 286, 13, 305, 199, 331, 26, 116, 28, 242, 65, 112, 30, 166, 263, 221, 307, 6]) == 5136\nassert solution.rob([141, 351, 315, 72, 226, 388, 160, 162, 81, 241, 35, 4, 44, 395, 289, 340, 361, 229, 263, 113, 39, 172, 276, 146, 58, 269, 306, 170, 119, 163]) == 3248\nassert solution.rob([238, 221, 265, 73, 101, 209, 155, 306, 74, 46, 64, 244, 394, 318, 126, 308, 89, 228, 323, 151, 399, 353, 315, 139, 36, 134, 108, 133, 241, 22, 86, 41, 245, 254, 391, 14, 150, 43, 257, 141, 274, 21, 338, 115, 243, 311, 7, 8, 346, 232, 199, 288, 293, 159, 112, 193, 66, 154, 224, 11, 381, 296, 283, 201, 343, 27, 99, 319, 207, 310, 135, 222, 160, 229, 166, 284, 128, 25, 246, 42, 287, 34, 298, 58, 97]) == 9962\nassert solution.rob([316, 65, 205, 54, 33, 323, 203, 382, 217, 206, 111, 312, 91, 79, 78, 276, 237, 129, 110, 230, 115, 101, 255, 346, 341, 219, 214, 102, 155, 239, 400, 240, 339, 167, 277, 260, 315, 96, 210, 114, 390, 202, 359, 128, 295, 271, 103, 43, 379, 153, 197, 281, 335, 2, 26, 215, 272, 57, 81, 140, 39, 185, 374, 44, 61, 395, 380, 362, 385, 145, 310, 298, 278, 163, 1, 83, 76, 251, 211, 97, 116, 218, 337, 242, 345, 32, 87, 306, 73, 166, 107]) == 10852\nassert solution.rob([40, 127, 215, 81, 251, 35, 188, 108, 270, 88, 246, 29, 329, 290, 374, 45, 103, 221, 142, 114, 223, 44, 30, 97, 204, 167, 139, 74, 205, 286, 153, 352, 4, 180, 337, 39, 272, 269, 26, 317, 322, 129, 287, 79, 229, 325, 222, 236, 281, 385, 297, 11, 202, 273, 175, 390, 23, 178, 21, 3, 285, 41, 12, 258, 80, 308, 104, 22, 275, 276, 93, 172, 92, 328, 262, 70, 304, 396, 212, 8, 134, 165, 106, 42, 320, 292, 216, 6, 249, 2, 122, 55, 166, 334, 189, 372, 240]) == 10524\nassert solution.rob([133, 106, 203, 18, 318, 58, 181, 153, 289, 345, 75, 81, 62, 328, 319, 52, 110, 55, 293, 384, 204, 36, 191, 174, 284, 40, 23, 277, 196, 215, 380, 290, 400, 383, 67, 314, 26, 363, 276, 227, 129, 28, 109, 256, 211, 228, 323, 97, 131, 45, 22, 138, 126, 33, 46, 43, 38, 164, 265, 102, 54, 354, 374]) == 6439\nassert solution.rob([291, 8, 309, 94, 87, 253, 388, 202, 387, 264, 272, 313, 349, 21, 139, 68, 20, 45, 200, 22, 227, 148, 182, 223, 130, 327, 56, 269, 116, 5, 110, 121, 299, 265, 114, 351, 256, 350, 119, 167, 111, 101, 150, 375, 166, 276, 279, 48, 179, 66, 235, 273, 378, 301, 43, 213]) == 6525\nassert solution.rob([182, 397, 30, 220, 383, 191, 265, 253, 84, 342, 308, 297, 37, 46, 263, 175, 284, 201, 136, 178, 281, 223, 93, 344, 8, 145, 345, 151, 60, 179, 229, 18, 172, 150, 351, 341, 363, 353, 268, 125, 394, 148, 239, 196, 261, 266, 103, 338, 278, 305, 5, 232, 67, 89, 295, 282, 44, 135]) == 7076\nassert solution.rob([44, 28, 179, 240, 10, 53, 39, 361, 213, 51, 221, 316, 68, 11, 263, 301, 88, 73, 255, 26, 364, 169, 49, 72, 77, 389, 55, 235, 148, 129, 184, 108, 6, 387, 210, 321, 262, 259, 159, 61, 48, 234, 253, 97, 190, 399, 348, 20, 191, 139, 140, 152, 241, 392, 161, 29, 249, 297, 341, 30, 228, 115, 96, 310, 292, 271, 89, 84, 16, 196, 358, 59, 386, 91, 106, 270, 146, 260, 181, 69, 175, 317, 245, 397, 312, 333, 103, 268]) == 9663\nassert solution.rob([389, 243, 212, 359, 87, 365, 90, 187, 11, 259, 207, 36, 264, 220, 282, 329, 277, 398, 81, 351, 121, 194, 382, 67, 127, 292, 222, 388, 38, 249, 78, 361, 31, 336, 148, 50, 98, 216, 112, 326, 370, 1, 152, 231, 189, 208, 190, 13, 357, 383, 221, 211, 123, 144, 57, 232, 32, 69, 34, 339, 177, 163, 77, 100, 315, 215, 92, 260]) == 8192\nassert solution.rob([371, 337, 154, 1, 209, 338, 54, 283, 233, 190, 102, 153, 58, 64, 295]) == 1784\nassert solution.rob([353, 27, 156, 172, 23, 206, 237, 192, 382, 25, 247, 126, 41, 354, 44, 342, 337, 276, 31, 281, 243, 212, 257, 336, 215, 299, 184, 356, 272, 358, 389, 65, 112, 58, 328, 316, 142, 305, 232, 357, 287, 7, 197, 262, 53, 144, 63, 9, 394, 309, 355, 347, 366, 246, 227, 21, 78, 40, 95, 186, 327, 266, 18, 150, 398, 135, 231, 377, 265, 46, 72, 228, 254, 207, 380, 158, 324]) == 9554\nassert solution.rob([55, 69, 278, 115, 139, 162, 107, 320, 87, 299, 148, 134, 71, 161, 324, 227, 318, 290, 398, 328, 96, 1, 223, 30, 56, 285, 122, 336, 23, 372, 256, 332, 158, 188, 351, 125]) == 4283\nassert solution.rob([144, 23, 42, 6, 226, 305, 322, 261, 344, 342, 253, 11, 221, 133, 87, 281, 373, 181, 139, 21, 163, 15, 389, 244, 235, 224, 126, 48, 98, 316, 321, 116, 291, 81, 79, 160, 312, 170, 395, 38, 327, 377, 119, 272, 200, 309, 40, 131, 183, 121, 118, 65, 289, 204, 9, 320, 246, 7]) == 6435\nassert solution.rob([51, 25, 15, 172, 26, 118, 344, 277, 299, 338]) == 956\nassert solution.rob([242, 63, 6, 232, 294, 214, 225, 378, 126, 207, 340, 395, 120, 335, 93, 342, 245, 369, 52, 233, 365, 339, 377, 140, 273, 23, 45, 212, 393, 28, 176, 32, 283, 330, 100, 263, 194, 87, 142, 12, 127, 133, 34, 4, 11, 110, 147, 390, 42, 231, 293, 257, 265, 107, 182, 256, 2, 276, 77, 113, 316, 18, 99, 267, 200, 296, 349, 287, 347, 389, 156, 251, 166, 10, 170, 307, 185]) == 9027\nassert solution.rob([288, 216, 202, 110, 243, 274, 387, 112, 267, 203, 323, 196, 142, 23, 60, 24, 2, 174, 341, 372, 313, 375, 93, 361, 131, 317, 393, 232, 5, 37, 397, 26, 303, 163, 249, 128, 6, 113, 157, 117, 345, 238, 111, 50, 189, 72, 18, 215, 16, 379, 120, 261, 7]) == 6355\nassert solution.rob([88, 98, 223, 2, 229, 139, 57, 228, 10, 143, 22, 150, 215, 252, 287, 113, 202, 358, 175, 6, 171, 156, 64, 384, 288]) == 2345\nassert solution.rob([213, 26]) == 213\nassert solution.rob([47, 161, 104, 159, 150, 2, 400, 219, 105, 81, 310, 199, 86, 139, 10, 35, 83, 143, 84, 48, 126, 232, 309, 87, 124, 99, 118, 245, 7, 45, 56, 29, 167, 352, 6, 348, 217, 220, 189, 293, 93, 198, 364, 279, 376, 101, 157, 15, 28, 202, 277, 184, 215, 152, 271, 128, 205, 154, 57, 145, 193, 308, 32, 247, 64, 393, 289, 107, 34, 381, 354, 49, 295, 391, 339, 398, 201, 82, 363]) == 8218\nassert solution.rob([96, 262, 223, 163, 296, 104, 88, 23, 197, 287, 46, 238, 108, 151, 139, 297, 237, 400, 252, 353, 136, 348, 24, 272, 83, 268, 59, 162, 210, 354, 165, 64, 173, 42, 166, 225, 158, 298, 113, 361, 164, 373, 70, 196, 235, 15, 7, 227, 120, 307, 393, 37, 352, 220, 378, 198]) == 6848\nassert solution.rob([202, 100, 74, 106, 96, 9, 296, 333, 198, 125, 50, 334, 389, 7, 381, 259, 33, 65, 147, 375, 254, 343, 345, 164, 80, 196, 130, 314, 63, 397, 303, 172, 340, 241, 133, 128, 221, 177]) == 4258\nassert solution.rob([352, 244, 319, 313, 310]) == 981\nassert solution.rob([61, 162, 23, 141, 52, 39, 43, 153, 340, 178, 378, 213, 127, 111, 174, 384, 38, 90, 41, 219, 293, 144, 271, 264, 165, 125, 136, 312, 368, 398, 350, 118, 80, 112, 8, 87, 244, 208, 146, 28, 280, 108, 283, 295, 185, 275, 367, 195, 129, 160, 84, 151, 42, 194, 321, 233, 320, 198, 262, 27, 100, 363]) == 6442\nassert solution.rob([127, 21, 195, 131, 120, 346, 215, 105, 235, 29, 80, 157, 3, 171, 315, 128, 49, 185, 91, 391, 172, 357, 316, 32, 68, 216, 132, 302, 361, 175, 276, 61, 296, 82, 58, 268, 326, 395, 387, 187, 142, 236, 339, 165, 280, 274, 254, 10, 207, 78, 183, 283, 304, 72, 23, 52, 356, 135, 377, 18, 359, 270, 247, 109, 12, 1, 181, 89, 253, 37, 252, 374, 242, 118, 147, 125, 213, 44, 355, 260, 297, 320, 366, 231, 13, 42, 81, 265, 180, 126, 266, 400, 47, 98, 307, 97, 35, 244, 168, 162]) == 11195\nassert solution.rob([158, 43, 240, 250, 263, 275, 75, 246, 280, 338, 326, 258, 192, 99, 291, 121, 73, 136, 256, 334, 119, 284, 74, 302, 336, 19, 117, 397, 149, 15, 389, 379, 294, 57, 165, 40, 271, 366, 327, 352, 382, 88, 310, 70, 365, 180, 270, 222, 48, 83, 175, 398, 264, 142, 200, 340, 177, 8, 20, 191, 124, 101, 102, 29, 112, 229]) == 7606\nassert solution.rob([361, 177, 98, 260, 299, 278, 331, 201, 372, 3, 315, 398, 333, 353, 62, 167, 43, 254, 391, 196, 99, 178, 388, 155, 386, 84, 9, 91, 303, 301, 83, 211, 44, 189, 362, 383, 66, 250, 323, 374, 282, 120, 309, 363, 305, 122, 367, 131, 325, 28, 145, 54, 261, 26, 180, 125, 384, 360, 132, 290, 312, 56, 202, 190, 286, 223, 106, 114, 342, 175, 113, 394, 126, 252, 373, 69, 75, 77, 5, 16, 95, 238, 326, 377, 105, 73, 108, 100, 257]) == 10938\nassert solution.rob([12, 10, 66, 45, 353, 399, 96]) == 527\nassert solution.rob([250, 355, 91, 298, 16, 248, 390, 241, 385, 103, 387, 211, 326, 89, 134, 97, 206, 2, 226, 127, 148, 137, 307, 190, 166, 168, 140, 321, 283, 161, 272, 38, 261, 348, 88, 11, 308, 193, 99, 31, 309, 289, 398, 319, 65, 381, 115, 368, 85, 331, 362, 90, 238, 342, 122, 371, 94, 50, 66, 396, 275, 372, 120, 108, 176, 194, 229, 288, 397, 232, 280]) == 9269\nassert solution.rob([220, 18, 224, 94, 257, 324, 44, 247, 251, 259, 310, 303, 49, 214, 258, 205, 157, 393, 314, 255, 32, 52, 119, 353, 167, 189, 345, 147, 232, 24, 127, 199, 156, 243, 227, 125, 346, 292, 183, 385, 357, 172, 217, 274, 126, 31, 356, 138, 288, 192, 58, 111, 381, 11, 90, 309, 316, 364, 59, 121, 306, 287, 236, 64, 16, 395]) == 8058\nassert solution.rob([19, 255, 314, 234, 270, 171, 77, 168, 293, 96, 58, 223, 143, 295, 246, 266, 184, 61, 308, 225, 387, 253, 21, 104, 127, 349, 311, 91, 103, 220, 205, 95, 43, 354, 218, 304, 335, 10, 221, 26, 173, 300, 194, 272, 275, 316, 16, 207, 357, 106, 117, 367, 268, 37, 353, 63, 331, 317, 393, 180, 11, 269, 159, 153, 49, 242, 73, 262, 299, 233, 278, 247, 237, 398, 216, 374, 261, 2, 76, 390, 298, 20, 101, 181, 365, 229, 79, 71, 53, 36, 340]) == 10436\nassert solution.rob([260, 278, 214, 100, 37, 73, 64, 19, 399, 176, 92, 207, 113, 253, 62, 90, 351, 268, 349, 397, 247, 370, 388, 142, 81, 39, 5, 138, 20, 311, 24, 189, 303, 251, 358, 289, 55, 318, 161, 1, 218]) == 4564\nassert solution.rob([203, 313, 50, 114, 209, 373, 68, 74, 146, 294, 349, 28, 92, 152, 17, 400, 246, 399, 82, 138, 305, 21, 118, 182, 9, 61, 206, 47, 52, 217, 389, 366, 121, 322, 195, 390, 84, 342, 300, 234, 396, 241, 318, 69, 177, 174, 1, 287, 368, 308, 285, 229, 258, 304, 227, 268, 94, 279, 165]) == 7142\nassert solution.rob([196, 149, 11, 193, 356, 63, 75, 151, 79, 289, 248, 343, 230, 150, 215, 263, 297, 236, 28, 36, 247, 278, 104, 133, 5, 346, 319, 382, 251, 169, 90, 393, 277, 87, 322, 316, 179, 201, 55, 224, 9, 306, 240, 294, 390, 241, 384, 27, 325, 364, 67, 218, 206, 269, 336, 182, 360, 164, 194, 264, 91, 157, 400, 118, 231, 312, 42, 144, 120]) == 8075\nassert solution.rob([19, 54, 266, 285, 343, 49, 2, 63, 245, 34, 33, 120, 304, 334, 360, 59, 39, 207, 296, 163, 66, 373, 164, 336, 144, 218, 159, 210, 90, 265, 113, 133, 107, 47, 201, 241, 141, 311, 161, 77, 256, 155, 154, 121, 362, 302, 300, 326, 65, 368, 51, 341, 183, 379]) == 6262\nassert solution.rob([206, 125, 68, 336, 32, 192, 307, 365, 200, 128, 36, 357, 311, 132, 135, 105, 190, 45, 273, 53, 5, 399, 19, 199, 124, 331, 163, 144, 30, 350, 287, 261, 340, 151, 51, 370, 183, 161, 130, 71, 233, 72, 152, 397, 112, 143, 224, 168, 377, 119, 344, 55, 176, 232, 316, 173, 383, 222, 362, 8, 373, 369, 268, 66, 247, 358, 97, 313, 22, 4, 16, 20, 298, 314]) == 9010\nassert solution.rob([195, 200, 222, 285, 177]) == 594\nassert solution.rob([35, 184, 284, 81, 303, 158, 311, 368, 18, 162, 186, 53, 106, 292, 352, 143, 334, 324, 287, 295, 278, 217, 397, 146, 355, 55, 261, 229, 374, 169, 167, 388, 36, 82, 3, 41, 196, 194, 232, 378, 383, 30, 148, 109, 57, 257, 119, 347, 266, 61, 139, 59, 394, 152, 6, 121, 358, 376, 94, 182, 68, 379, 326, 382, 213, 207, 309, 279, 235, 91, 138, 151, 12, 267, 175, 268]) == 9189\nassert solution.rob([28, 156, 350, 245, 338]) == 716\nassert solution.rob([385, 274, 13, 128, 107, 394, 270, 185, 376, 245, 319, 23, 170, 369, 230, 180, 276, 151, 62, 71, 240, 353, 358, 121, 400, 316, 343, 288, 2, 110, 237, 352, 331, 165, 280, 157, 289, 329, 117, 82, 102, 262, 277, 335, 190, 393, 320, 192, 45, 173, 202, 174, 204, 346, 269, 20, 281, 11, 91, 287, 152, 247, 150, 239, 348, 118, 44, 283, 181, 47, 83, 317, 284, 307, 133, 349, 179, 15, 244, 392, 28]) == 9699\nassert solution.rob([123, 58, 339, 395, 71, 150, 311, 282, 94, 155, 342]) == 1292\nassert solution.rob([367, 310, 354, 271, 49, 212, 345, 39, 20, 349, 1, 215, 4, 89, 108, 395, 79, 241, 83, 198, 117, 137, 151, 332, 63, 197, 189, 57, 285, 159, 51, 85, 140, 65, 59, 323]) == 4067\nassert solution.rob([20, 114, 207, 312, 179, 138, 75, 4, 271, 5, 147, 72, 360, 178, 385, 217, 239, 342, 43, 331, 322, 11, 264, 356, 65, 336, 42, 359, 49, 100, 184, 135, 390, 91, 134, 267, 88, 48, 107, 56, 287, 57, 396, 275, 255, 354, 293, 14, 192, 314, 93, 86, 85, 122, 210, 95, 27, 244, 254, 286, 151, 156, 35, 301, 39]) == 7245\nassert solution.rob([141, 296, 165, 239, 40, 206, 339, 185, 100, 217, 250, 320, 168, 164, 156, 166, 228, 329, 174, 76, 14, 255, 304, 145, 229, 301, 209, 171, 295, 93, 226, 311, 149, 29, 358, 271, 312, 236, 309, 2, 87, 117, 178, 177, 47, 26, 270, 298, 39, 214, 157, 146, 395, 84, 113, 316]) == 6132\nassert solution.rob([308, 284, 300, 191, 363, 396, 295, 203, 205, 100, 1, 250, 245, 102, 75, 271, 98, 202, 27, 182, 109, 11, 235, 73, 277, 143, 78, 18, 76, 165, 261, 189, 43, 220, 118, 117, 222, 243, 56, 5, 239, 154, 338, 161, 358, 175, 346, 105, 255, 219, 172, 61, 70, 339, 26, 167, 279, 35, 317, 185, 120, 281, 71, 134, 283, 321, 150, 137, 13, 41, 106, 232, 3, 20, 54, 63, 210, 380, 112, 114, 197, 256]) == 8624\nassert solution.rob([276, 391, 255, 345, 358, 375, 272, 141, 120, 365, 336, 389, 144, 355, 350, 11, 310, 127, 327, 258, 186, 154, 19, 335, 328, 166, 299, 247, 326, 236, 289, 24, 104, 68, 300, 145, 264, 175, 228, 65, 188, 37, 103, 138, 274, 73, 10, 295, 395, 28, 227, 257, 239, 379, 339, 67, 105, 312, 203, 296, 394, 352, 270, 20, 95, 58, 57, 324, 187, 35, 150, 372, 380, 279, 315, 293, 26]) == 9490\nassert solution.rob([368]) == 368\nassert solution.rob([221, 115, 293, 359, 375, 41, 261, 341, 209, 271, 328, 229, 105, 383, 256, 100, 323, 192, 306, 231, 44, 191, 98, 142, 13, 376, 312, 28, 66, 390, 83, 317, 247, 326, 263, 175, 3, 52, 164, 129, 355, 156, 69, 91, 180, 154, 232, 126, 161, 140, 122, 276]) == 6124\nassert solution.rob([58, 327, 362, 48, 177, 185, 306, 65, 117, 168, 179, 216, 290, 380, 269, 375, 90, 106, 140, 237, 319, 254, 24, 234, 4, 74, 330, 103, 257, 399, 370, 62, 164, 92, 145, 73, 268, 391, 372, 253, 235, 197, 189, 53, 142, 364, 101, 13, 383, 27, 104, 274, 57, 181, 228, 127, 348, 346, 14, 209, 363]) == 7241\nassert solution.rob([35, 337, 99, 173, 294, 257, 191, 115, 144, 331, 165, 358, 57, 97, 302, 11, 290, 133, 182, 132, 112, 223, 303, 120]) == 2760\nassert solution.rob([309, 114, 332, 152, 78, 200, 15, 188, 179, 129, 86, 357, 66, 28, 140, 360, 2, 195, 218, 141, 375, 174, 57, 257, 228, 20, 370, 31]) == 3151\nassert solution.rob([368, 46, 168, 324, 47, 26, 7, 174, 150, 376, 339, 199, 353, 188, 43, 154, 142, 180, 98, 137, 169, 91, 51, 307, 284, 322, 395, 56, 210, 349, 133, 286, 238, 165, 170, 233, 211, 394, 204, 251, 215, 186, 250, 110, 81, 102, 272, 90, 129, 262, 374, 45, 153, 386, 145, 277, 9, 208, 348, 155, 175, 147, 226, 163, 206, 172, 107, 138, 247, 58, 74, 52, 127, 237, 303, 305, 244]) == 8423\nassert solution.rob([250, 137, 323, 46, 230, 115, 317, 333, 217, 142, 263, 158, 393, 21, 205, 322, 279, 121, 82, 294, 334, 126, 92, 118, 39, 188, 271, 269, 99, 356, 134, 310, 379, 220, 222, 196, 292, 259, 66, 176, 26, 33, 369, 27, 45, 57, 207, 344, 288, 352, 132, 385, 399, 377, 284, 211, 16, 291, 164, 394, 328, 320, 238, 302, 280, 146, 330, 318, 40, 28, 94, 169, 342, 187, 11, 337, 301, 286, 332, 261, 62, 22]) == 10197\nassert solution.rob([105, 293, 150, 201, 179, 164, 4, 41, 321, 273, 170, 42, 51, 24, 60, 253, 376, 282, 241, 208, 355, 28, 195, 69, 395, 338, 40, 37, 189, 232, 392, 59, 48, 184, 365, 149, 245, 305, 383, 223, 285, 33, 158, 181, 263, 18, 128, 84, 171, 99, 295, 393, 30, 102, 182, 274, 139, 200, 107, 119, 194, 159, 317, 227, 132, 117]) == 7101\nassert solution.rob([33, 260, 280, 343, 182, 97, 193, 386, 329, 389, 23, 118, 349, 8, 112, 3, 159, 129, 327, 123, 335, 28, 350, 72, 12, 162, 229, 53, 38, 27, 156, 393, 206, 189, 316, 127, 76, 175, 137, 390, 215, 200, 362, 41]) == 5022\nassert solution.rob([239, 27, 274, 223, 307, 20, 82, 366, 262, 13, 333, 245, 270, 88, 92, 266, 146, 316, 359, 102, 399, 276, 52, 55, 9, 236, 190, 101, 32, 398, 263, 253, 339, 383, 37, 136, 123, 184, 179, 250, 117, 62, 86, 150, 212, 326, 281, 288, 67, 40, 202, 22, 300, 273, 228, 196, 116, 126, 243, 229, 388, 114, 189, 4, 118, 331, 152, 390, 80, 63, 78, 251, 148, 222]) == 8558\nassert solution.rob([176, 188, 345, 222, 387, 302, 370, 81, 140, 48, 153, 83, 260, 54, 179, 208, 96, 155, 226, 395, 221, 70, 360, 309, 181, 382, 44, 311, 27, 186, 323, 98, 168, 358, 377, 279, 95, 380, 131, 298, 376, 218, 348, 183, 76, 353, 385, 312, 391, 307, 375, 285, 255, 38]) == 7207\nassert solution.rob([209, 334, 210, 227, 57, 132, 255, 144, 280, 286, 240, 360, 159, 151, 361, 145, 294, 203, 251, 187, 6, 308, 26, 63, 173, 93, 169, 81, 366, 296, 30, 322, 355, 79, 102, 307, 136, 113, 261, 327]) == 4565\nassert solution.rob([251, 282, 370, 4, 285, 138, 21, 181, 357, 176, 58, 126, 369, 86, 94, 322, 303, 192, 54, 264, 142, 143, 374, 127, 240, 333, 99, 69, 350, 27, 385, 110, 393, 30, 84, 204, 79, 260, 341, 91, 123, 179, 68, 191, 273, 354, 60, 97, 83, 29, 360, 343, 245, 310, 262, 43, 114, 399, 362, 375, 52, 111, 197, 183, 339, 120, 92, 223, 193, 113, 73]) == 8241\nassert solution.rob([8, 372, 92, 56, 227, 13, 362, 288, 198, 31, 12, 144, 172, 356, 396, 381, 277, 321, 171, 109, 295, 238, 39, 210, 278, 391, 218, 287, 163, 173, 95, 266, 97, 335, 65, 324, 294, 69, 377, 147, 116, 390, 85, 298, 156, 364, 68, 118, 222, 141, 352, 363, 359, 224, 398, 217, 49, 355, 71, 6, 361, 196, 131, 303, 135, 334, 265, 112, 160, 386, 216, 349, 274, 103, 280, 351, 76, 142, 268, 256, 316, 202, 230, 269, 219, 63, 7, 43, 325]) == 11473\nassert solution.rob([254, 179, 126, 141, 347, 292, 238, 101, 212, 223, 358, 35, 281, 400, 66, 392, 216, 361, 108, 120]) == 2808\nassert solution.rob([354, 150, 11, 20, 243, 50, 1, 249, 400, 172, 99, 211, 54, 233, 102, 248, 370, 123, 8, 130, 137, 222, 34, 44, 10, 208, 350, 80, 339, 5, 155, 73, 232, 196, 327]) == 3643\nassert solution.rob([148, 155, 384, 196, 2, 83, 124, 373, 166, 336, 366, 258, 287, 92, 369, 347, 388, 33, 372, 219, 342, 212, 233, 20, 279, 132, 107, 4, 379, 356, 387, 111, 377, 21, 72, 267, 128, 381, 152, 261, 338, 40, 108, 390, 140, 73, 113, 280, 114, 84, 320, 160, 110, 89, 249, 213, 115, 278, 95, 8, 271, 274, 214, 193, 236, 276, 153, 126, 204, 61, 270, 46, 253, 87, 98, 309, 316, 149, 99, 7, 391, 323, 355, 205]) == 10420\nassert solution.rob([171, 318, 160, 328, 99, 344, 193, 345, 128, 146, 266, 283, 185, 255, 59, 269, 207, 213, 305, 211, 377, 104, 186, 53, 263, 55, 201, 278, 363, 262, 180, 209, 296, 47, 129, 125, 216, 246, 299, 33, 301, 341, 279, 105, 333, 188, 112, 37, 369, 51, 38, 101, 76, 8, 80, 70, 314, 191, 150, 321, 373, 297, 335, 65, 176, 140, 204, 168]) == 8243\nassert solution.rob([298, 158, 88, 144, 381, 50, 74, 241, 71, 169, 175, 361, 359, 31, 324, 211]) == 1866\nassert solution.rob([395, 54, 221, 131, 382, 261, 120, 183, 253, 324, 203, 83, 173, 171, 242, 277]) == 2036\nassert solution.rob([227, 332, 125]) == 352\nassert solution.rob([60, 90, 288, 68, 62, 117, 157, 304, 172, 333, 168, 200, 255, 178, 240, 249, 72, 32, 163, 97, 166, 120, 185, 201, 274, 146, 376, 127, 193, 173, 138, 183, 336, 230, 37, 374, 187, 358, 394, 156, 137, 177, 151, 84, 129, 150, 96, 207, 386, 83, 194, 19, 184, 284, 224, 161, 397, 181, 59, 51, 302, 4, 128, 387, 384, 303, 34, 278, 372, 330, 121, 399, 174, 95, 112, 315, 355, 314, 321, 52, 18, 389, 44, 260, 134, 364, 313, 208, 175, 287, 203, 180, 33, 189, 234, 85, 352, 259, 357, 331]) == 11721\nassert solution.rob([126, 334, 42, 272, 29, 52, 310, 255, 311, 364, 148, 110, 210, 263, 206, 156, 395, 20, 387, 394, 268, 299, 224, 64, 72, 264, 73, 66, 211, 349, 79, 337, 306, 9, 36, 116, 120, 323, 60, 43, 301, 376, 55, 366, 30, 295, 13, 378, 184, 122, 313, 34, 390]) == 6690\nassert solution.rob([11, 392, 123, 100, 207, 5, 382, 169, 39, 258, 42, 364, 154, 137, 316, 76, 102, 299, 192, 23, 1]) == 2241\nassert solution.rob([242, 238, 308, 186, 97, 50, 296, 82, 391, 12, 61, 279, 37, 199, 255, 230, 396, 91, 326, 71, 149, 147, 398, 57, 316, 346, 46, 1, 106, 386, 93, 209, 327, 370, 394, 134, 115, 144, 331, 32, 79, 307, 231, 52, 112, 268, 33, 81, 369, 130]) == 6048\nassert solution.rob([94, 330, 379, 171, 361, 127, 250, 231, 352, 168, 55, 143, 38, 121, 108, 225, 174, 167, 215, 236, 50, 295, 320, 344, 1, 208, 132, 33, 46, 254, 313, 190, 308, 172, 139, 307, 252, 118, 224, 59, 29, 200, 88, 256, 130, 243, 160, 397, 58, 76, 212, 178, 197, 261, 341, 262, 378, 106, 40, 273, 235, 183]) == 7137\nassert solution.rob([98, 380, 175]) == 380\nassert solution.rob([293, 95, 67, 78, 6, 337, 137, 109, 294, 339, 112, 92, 369, 100, 335, 74, 390, 272, 300, 267, 213, 39, 263, 345, 30, 130, 182, 171, 319, 12, 106, 128, 76, 96, 35, 160, 398, 189, 268, 113, 243, 140, 220, 292, 25, 330, 7, 197, 236, 315, 198, 373, 133, 290, 134, 284, 123, 156, 60, 28, 226, 104, 142, 108, 385, 371, 172, 15, 351, 75, 202, 34, 5, 165]) == 8622\nassert solution.rob([212, 13, 155, 318, 44, 271, 1, 6, 356, 84, 311, 351, 160, 141, 177, 247, 150, 307, 359, 367, 283, 275, 78, 219, 294, 357, 200, 363]) == 3784\nassert solution.rob([334, 164, 149, 368, 22, 72, 151, 264, 250, 199, 385, 83, 97, 162, 219, 371, 177, 84, 130, 23, 321, 224, 3, 375, 327, 31, 30, 39, 389, 332, 362, 51, 203, 146, 341, 134, 194, 269, 215, 99, 352, 86, 207, 372, 263, 392, 288, 45, 395]) == 6093\nassert solution.rob([336, 178, 103, 119, 318, 12, 377, 352, 389, 316, 29, 342, 285, 360, 137, 231, 44, 386, 196, 221, 84, 185, 134, 248, 218, 267, 59, 81, 371, 275, 115, 324, 365, 309, 101, 126, 91, 133, 23, 353, 260, 40, 323, 179, 317, 387, 182, 301, 219, 337, 211, 90, 165, 2, 28, 356, 57, 362, 76, 274, 320, 358, 187, 209, 42, 18, 240, 214, 264, 328, 239, 278, 1, 176, 245, 361, 79, 295, 270, 212, 170, 315, 61, 10]) == 10666\nassert solution.rob([386, 260, 13, 400, 342, 251, 173, 125, 304, 285, 140, 380, 105, 201, 271, 243, 114, 87, 126, 85, 277, 261, 170, 64, 396, 284, 383, 232, 341, 131, 34, 103, 40, 215, 272, 95, 176, 246, 135, 30, 25, 323, 226, 263, 183, 279, 310, 189, 167, 127, 361, 252, 233, 357, 214, 331, 54, 86, 182, 185, 145, 137, 45, 206, 132, 239, 202, 56, 102, 69, 78, 294, 229, 100, 74, 141, 46, 217, 92, 144, 197, 196, 318, 395, 332, 174, 255, 82, 79, 248, 150, 115, 336, 77, 258]) == 10448\nassert solution.rob([339, 389, 363, 188, 218, 197, 117, 321, 373, 186, 361, 317, 2, 105, 278, 204, 74, 4, 360, 281, 209, 143, 42, 190, 165, 205, 291, 393, 14, 271, 59, 137, 362, 387, 294, 55, 237, 234, 72, 374, 267, 132, 216, 175, 124, 358, 226, 98, 250, 288, 214, 344, 35, 277, 254, 295, 20, 169, 227, 233, 85, 308, 384, 192, 236, 260, 141, 239, 292, 148, 379, 381, 194, 274, 158]) == 9191\nassert solution.rob([125, 37, 274, 70, 131, 279, 128, 282, 173, 266, 212, 236, 325, 24]) == 1551\nassert solution.rob([367, 233, 82, 291, 106, 283, 36, 190, 39, 70, 239, 365, 195]) == 1566\nassert solution.rob([196, 204, 82, 311, 306, 379, 4, 177, 393, 257, 372, 76, 236, 307, 341, 383, 159, 57, 163, 398, 274, 136, 367, 388, 68, 116, 240, 142, 221, 19, 84, 358, 392, 362, 130, 293, 319, 225, 45, 149, 75, 74, 344, 112, 91, 167, 326, 67, 145, 192, 178, 24, 369, 73, 38, 29, 134, 400, 395, 70, 268, 276, 339, 256, 295, 248, 89]) == 8187\nassert solution.rob([365, 166, 85, 74, 245, 351, 227, 279, 149, 389, 144, 283, 268, 231, 322, 383, 126, 110, 102, 373, 388, 238, 364, 331, 135, 260, 145, 224, 396, 374, 81, 349, 134, 113, 288, 157, 9, 309, 241, 232, 188, 277, 337, 355, 252, 26, 121, 8, 178, 274, 358, 29, 190, 23, 173, 111, 347, 301, 7, 395, 115, 21, 221, 367, 154, 20, 129, 107, 71]) == 8436\nassert solution.rob([377, 226, 92, 121, 158, 322, 192, 347, 293, 279, 179, 237, 169, 27, 256, 328, 173, 349, 360, 196, 259, 106, 147, 313, 201, 3, 105, 252, 285, 334, 296, 301, 24, 50, 275, 272, 44, 88, 247, 156, 302, 178, 264, 305, 181, 66, 103, 186, 55, 131, 59, 129, 168, 100, 352, 383, 47, 11, 51, 361, 386, 86, 151, 84, 89, 41, 276, 165, 254, 15, 80, 32, 343, 133, 232, 136, 359, 287, 292, 9, 274, 392, 135, 243, 255, 397, 142, 155, 29, 307, 273, 271, 126, 69, 373, 300, 114, 13, 203, 137]) == 11179\nassert solution.rob([364, 131, 253, 317, 391, 92, 223, 378, 52, 270, 8, 98, 342, 201, 145, 170, 66, 129, 164, 179, 72, 212, 331, 175, 123, 46, 231, 282, 209, 347, 116, 142, 122, 107, 96, 332, 51, 299, 146, 35, 187, 102, 200, 359, 218, 262, 140, 58, 149]) == 5396\nassert solution.rob([273, 70, 142, 55, 400, 8, 46, 365, 220, 278, 308, 134, 172, 396, 44, 214, 56, 151, 324, 323, 344, 228, 253, 254, 301, 163, 281, 53, 337, 260, 174, 89, 380, 92, 86, 189, 38, 332, 397, 136, 243, 352, 284, 207, 304, 186, 330, 183, 158, 166, 267, 303, 98, 37, 95, 348, 249, 367, 398, 374, 82]) == 7955\nassert solution.rob([3, 53, 122, 139, 147, 124, 301, 241, 386, 225, 36, 45, 129, 263, 224, 134, 41, 183, 82, 395, 271, 101, 253, 338, 347, 173, 99, 94, 355, 120, 44, 188, 270, 1, 30, 388, 330, 156, 325, 267, 394, 396, 39, 247, 169, 307, 70, 364, 38, 174, 203, 59, 240, 284, 47, 137, 52, 161, 14, 323, 62, 353, 31, 86, 50, 227, 220, 244, 131, 25, 336, 17, 151, 11, 158, 399, 285, 390, 83, 160, 302]) == 9098\nassert solution.rob([262, 168, 188, 237, 339, 395, 297, 96, 258, 279, 207, 129, 198, 274, 390, 301, 333, 222, 106, 241, 97, 384, 224, 108, 15, 397, 304, 303, 325]) == 3927\nassert solution.rob([220, 115, 234, 369, 372, 19, 400, 5, 89, 236, 76, 141, 145, 290, 179, 358, 367, 71, 21, 319, 231, 51, 267, 385, 95, 111, 288, 370, 390, 223, 394]) == 4149\nassert solution.rob([191, 131, 33, 75, 156, 25, 47, 76, 270, 172, 171, 334, 304, 263, 107, 215, 58, 9, 252, 123, 197, 243, 81, 59]) == 2063\nassert solution.rob([246, 372, 285, 345, 39, 336, 122, 307, 66, 171, 311, 77, 312, 34, 196, 176, 131, 363, 9, 44, 360, 296, 143, 207, 342, 97, 228, 286, 61, 264, 217, 37, 197, 200, 397, 257, 11, 139, 5, 212, 157, 221, 391, 96, 206, 254, 365, 320, 283, 137, 322, 284, 244]) == 6693\nassert solution.rob([262, 223, 7, 264, 372, 207, 44, 373, 153, 238, 124, 163, 9, 35, 83, 96, 380, 5, 197, 54, 389, 248, 235, 175, 300, 86, 255, 39, 308, 243, 385, 241]) == 4039\nassert solution.rob([368, 25, 2, 383, 76, 136, 320, 112, 54, 154, 1, 26, 55, 192, 272, 152, 216, 218, 333, 260, 211, 391, 162, 193, 270, 398, 232, 296, 378, 312, 354, 381, 143, 173, 369, 185, 85, 77, 343, 82, 358, 397, 214]) == 5441\nassert solution.rob([222, 29, 28, 355, 207, 270, 386, 338, 66, 177, 323]) == 1508\nassert solution.rob([297, 355, 118, 98, 306, 204, 191, 39, 168, 166, 299, 396, 361, 302, 17, 205, 243, 208, 187, 357, 392, 327, 319, 239, 85, 395, 315, 189, 131, 37, 274, 152, 343, 19, 399, 332, 376, 172, 236, 201, 114, 74, 253, 240, 146, 52, 314, 77, 43, 81, 87, 263, 150, 275, 325, 194, 388, 398, 358, 171, 157, 259, 84, 67, 248, 102, 391, 48, 324, 66, 139]) == 8929\nassert solution.rob([219, 170, 370, 273, 352, 337, 298, 261, 153, 233, 105, 344, 230, 41, 281, 38, 232, 191, 162, 88, 300, 248, 42, 376, 255, 177, 20, 202, 59, 225, 32, 84, 390, 125, 85, 379, 294, 343, 328, 286, 129, 196, 285, 120, 242]) == 5696\nassert solution.rob([304, 58, 54, 150, 317, 124, 279, 363, 172, 262, 7, 229, 277, 384, 313, 138, 109, 230, 70, 182, 373, 394, 190, 395, 238, 12, 55, 6, 300, 116, 41, 115, 312, 284, 66, 127, 298, 168, 82, 272, 239, 144, 344, 359, 392, 134, 20, 187, 278, 307, 209, 3, 263, 133, 245, 53, 367, 84, 214, 120, 159, 43, 385, 267, 220, 243, 369, 171, 265, 208, 195, 250, 36, 192, 261, 232, 142, 88, 226]) == 9275",
  "inefficient_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        total_houses = len(nums)\n        houses_torob = [False] * total_houses\n        houses_not_to_rob = [False] * total_houses\n        houses_with_police = [False] * total_houses\n        houses_with_police_in_next_street = [False] * total_houses\n        houses_with_police_in_previous_street = [False] * total_houses\n        houses_with_police_in_previous_street_and_next_street = [False] * total_houses\n        max_police = 0\n        max_not_police = 0\n        max_police_in_next_street = 0\n        max_not_police_in_next_street = 0\n        max_police_in_previous_street = 0\n        max_not_police_in_previous_street = 0\n        max_police_in_previous_street_and_next_street = 0\n        max_not_police_in_previous_street_and_next_street = 0\n\n        for i in range(total_houses):\n            if i == 0:\n                houses_torob[i] = True\n                max_police += nums[i]\n            elif i == 1:\n                houses_torob[i] = True\n                houses_with_police_in_previous_street[i] = True\n                max_police = max(max_police, nums[0] + nums[1])\n            else:\n                houses_with_police[i] = houses_with_police[i-1] or houses_with_police_in_next_street[i-1] or houses_with_police_in_previous_street[i-1]\n                houses_with_police_in_next_street[i] = houses_with_police[i-1] or houses_with_police_in_next_street[i-1]\n                houses_with_police_in_previous_street[i] = houses_with_police[i-1] or houses_with_police_in_previous_street[i-1]\n                houses_with_police_in_previous_street_and_next_street[i] = houses_with_police_in_previous_street[i-1] and houses_with_police_in_next_street[i-1]\n                houses_torob[i] = not houses_with_police[i]\n\n            if houses_torob[i]:\n                max_police_in_next_street = max(max_police_in_next_street, nums[i])\n                max_not_police_in_next_street = 0\n                max_police_in_previous_street = max(max_police_in_previous_street, nums[i])\n                max_not_police_in_previous_street = 0\n                max_police_in_previous_street_and_next_street = max(max_police_in_previous_street_and_next_street, nums[i])\n                max_not_police_in_previous_street_and_next_street = 0\n            else:\n                max_police_in_next_street = 0\n                max_not_police_in_next_street = max(max_not_police_in_next_street, nums[i])\n                max_police_in_previous_street = 0\n                max_not_police_in_previous_street = max(max_not_police_in_previous_street, nums[i])\n                max_police_in_previous_street_and_next_street = 0\n                max_not_police_in_previous_street_and_next_street = max(max_not_police_in_previous_street_and_next_street, nums[i])\n\n            max_police = max(max_police, max_police_in_previous_street_and_next_street + max_police_in_next_street)\n            max_not_police = max(max_not_police, max_not_police_in_previous_street_and_next_street + max_not_police_in_next_street)\n\n        return max(max_police, max_not_police)",
  "is_python": true
}