{
  "problem_idx": 124,
  "task_name": "Binary Tree Maximum Path Sum",
  "markdown_description": "\nA **path** in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence **at most once**. Note that the path does not need to pass through the root.\n\n\nThe **path sum** of a path is the sum of the node's values in the path.\n\n\nGiven the `root` of a binary tree, return *the maximum **path sum** of any **non-empty** path*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0124.Binary%20Tree%20Maximum%20Path%20Sum/images/exx1.jpg)\n\n```\n\n**Input:** root = [1,2,3]\n**Output:** 6\n**Explanation:** The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0124.Binary%20Tree%20Maximum%20Path%20Sum/images/exx2.jpg)\n\n```\n\n**Input:** root = [-10,9,20,null,null,15,7]\n**Output:** 42\n**Explanation:** The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 3 * 104]`.\n* `-1000 <= Node.val <= 1000`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        def dfs(root: Optional[TreeNode]) -> int:\n            if root is None:\n                return 0\n            left = max(0, dfs(root.left))\n            right = max(0, dfs(root.right))\n            nonlocal ans\n            ans = max(ans, root.val + left + right)\n            return root.val + max(left, right)\n\n        ans = -inf\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxPathSum(self, root):\n        def dfs(root):\n            if root is None:\n                return 0\n            left = max(0, dfs(root.left))\n            right = max(0, dfs(root.right))\n            nonlocal ans\n            ans = max(ans, root.val + left + right)\n            return root.val + max(left, right)\n\n        ans = float('-inf')\n        dfs(root)\n        return ans\n    \nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a binary tree\n    root = generate_binary_tree()\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxPathSum(root)\n\n    return root, expected_result\n\ndef generate_binary_tree():\n    node_values = random.sample(range(-1000, 1001), random.randint(1, 11))\n    \n    nodes = []\n    for val in node_values:\n        nodes.append(TreeNode(val))\n\n    root = nodes[0]\n    for i in range(len(nodes)):\n        if 2 * i + 1 < len(nodes):\n            nodes[i].left = nodes[2 * i + 1]\n        if 2 * i + 2 < len(nodes):\n            nodes[i].right = nodes[2 * i + 2]\n\n    return root\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxPathSum(root) == expected_result\n        print(f\"assert solution.maxPathSum({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxPathSum({root}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d172890>) == 2605\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198d10>) == 604\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d1724d0>) == 2108\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198d10>) == -234\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d172490>) == 1745\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198d50>) == -972\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198e10>) == 961\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d0d9950>) == 1315\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198e10>) == 1546\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198d10>) == 1296\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198e10>) == 675\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198d10>) == 2834\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198b90>) == 1194\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198e10>) == 714\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198b90>) == -734\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198d10>) == 484\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198e10>) == 1692\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198c10>) == 995\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199090>) == 3510\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198dd0>) == 804\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d1990d0>) == -79\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199110>) == 1188\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198cd0>) == 871\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199150>) == -24\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d198fd0>) == 831\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199050>) == 2440\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199310>) == 608\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199490>) == -515\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199610>) == 769\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199250>) == 1914\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199410>) == -53\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199710>) == -99\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199810>) == 3415\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199210>) == 1740\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199690>) == 3305\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d1998d0>) == 672\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d1999d0>) == 1215\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199910>) == 1271\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199a50>) == 1919\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199510>) == 2094\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199790>) == 690\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199c10>) == 459\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199890>) == 713\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d1993d0>) == 1533\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199b10>) == 923\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199d50>) == 433\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199e50>) == 883\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199950>) == 371\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199850>) == -53\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199d10>) == 1471\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d1995d0>) == 570\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199f50>) == 200\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a010>) == 1192\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199f10>) == 721\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199b90>) == 905\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199ed0>) == 1763\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a190>) == 578\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a350>) == 962\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199f90>) == 1865\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199d90>) == 538\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a210>) == 936\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a490>) == 86\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d199a10>) == 459\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a110>) == 701\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a1d0>) == 1949\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a250>) == 1667\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a710>) == 2156\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a850>) == 1049\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19aa10>) == 1094\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a810>) == 981\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a5d0>) == 924\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a890>) == 585\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19ab10>) == 642\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19ab50>) == 308\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a790>) == 1438\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a3d0>) == -116\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19add0>) == 958\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a650>) == 590\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19ab90>) == 1456\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a290>) == 738\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19af90>) == 1496\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a8d0>) == 987\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19ad50>) == 353\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b050>) == 695\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b110>) == 1628\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19a590>) == 2688\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b2d0>) == -380\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19ac10>) == 912\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19aa90>) == -132\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19ac50>) == 905\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b210>) == 1587\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b010>) == 2214\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b4d0>) == 1900\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b6d0>) == 881\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b1d0>) == 2222\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b690>) == 136\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b250>) == 841\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b390>) == 873\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19ae50>) == 903\nassert solution.maxPathSum(<__main__.TreeNode object at 0x7f9a4d19b0d0>) == 1662",
  "inefficient_solution": "class Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        paths = []\n        def dfs(root: Optional[TreeNode]) -> None:\n            if root is None:\n                return\n            left = []\n            right = []\n            if root.left is not None:\n                left = dfs(root.left)\n            if root.right is not None:\n                right = dfs(root.right)\n            paths.append([root.val])\n            if left:\n                paths.append([root.val] + left)\n            if right:\n                paths.append([root.val] + right)\n            for p in paths:\n                if len(p) == 2:\n                    p[1] += p[0]\n                else:\n                    p[1] += p[0]\n                    p[2] += p[0]\n            return paths\n\n        dfs(root)\n        return max(p[1] for p in paths)",
  "is_python": true
}