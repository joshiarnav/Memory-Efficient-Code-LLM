{
  "problem_idx": 343,
  "task_name": "Integer Break",
  "markdown_description": "\nGiven an integer `n`, break it into the sum of `k` **positive integers**, where `k >= 2`, and maximize the product of those integers.\n\n\nReturn *the maximum product you can get*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** 2 = 1 + 1, 1 \u00d7 1 = 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 10\n**Output:** 36\n**Explanation:** 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= n <= 58`\n\n\n",
  "canonical_solution": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        if n < 4:\n            return n - 1\n        if n % 3 == 0:\n            return pow(3, n // 3)\n        if n % 3 == 1:\n            return pow(3, n // 3 - 1) * 4\n        return pow(3, n // 3) * 2\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def integerBreak(self, n: int) -> int:\n        if n < 4:\n            return n - 1\n        if n % 3 == 0:\n            return pow(3, n // 3)\n        if n % 3 == 1:\n            return pow(3, n // 3 - 1) * 4\n        return pow(3, n // 3) * 2\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    n = random.randint(2, 58)\n\n    expected_result = solution.integerBreak(n)\n\n    return n, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.integerBreak(n) == expected_result\n        print(f\"assert solution.integerBreak({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.integerBreak({n}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.integerBreak(54) == 387420489\nassert solution.integerBreak(44) == 9565938\nassert solution.integerBreak(38) == 1062882\nassert solution.integerBreak(35) == 354294\nassert solution.integerBreak(28) == 26244\nassert solution.integerBreak(40) == 2125764\nassert solution.integerBreak(43) == 6377292\nassert solution.integerBreak(2) == 1\nassert solution.integerBreak(31) == 78732\nassert solution.integerBreak(27) == 19683\nassert solution.integerBreak(11) == 54\nassert solution.integerBreak(10) == 36\nassert solution.integerBreak(13) == 108\nassert solution.integerBreak(40) == 2125764\nassert solution.integerBreak(54) == 387420489\nassert solution.integerBreak(38) == 1062882\nassert solution.integerBreak(49) == 57395628\nassert solution.integerBreak(20) == 1458\nassert solution.integerBreak(42) == 4782969\nassert solution.integerBreak(26) == 13122\nassert solution.integerBreak(15) == 243\nassert solution.integerBreak(6) == 9\nassert solution.integerBreak(48) == 43046721\nassert solution.integerBreak(44) == 9565938\nassert solution.integerBreak(19) == 972\nassert solution.integerBreak(33) == 177147\nassert solution.integerBreak(55) == 516560652\nassert solution.integerBreak(26) == 13122\nassert solution.integerBreak(42) == 4782969\nassert solution.integerBreak(38) == 1062882\nassert solution.integerBreak(47) == 28697814\nassert solution.integerBreak(13) == 108\nassert solution.integerBreak(51) == 129140163\nassert solution.integerBreak(49) == 57395628\nassert solution.integerBreak(31) == 78732\nassert solution.integerBreak(52) == 172186884\nassert solution.integerBreak(23) == 4374\nassert solution.integerBreak(52) == 172186884\nassert solution.integerBreak(39) == 1594323\nassert solution.integerBreak(22) == 2916\nassert solution.integerBreak(44) == 9565938\nassert solution.integerBreak(56) == 774840978\nassert solution.integerBreak(15) == 243\nassert solution.integerBreak(24) == 6561\nassert solution.integerBreak(32) == 118098\nassert solution.integerBreak(43) == 6377292\nassert solution.integerBreak(37) == 708588\nassert solution.integerBreak(56) == 774840978\nassert solution.integerBreak(56) == 774840978\nassert solution.integerBreak(12) == 81\nassert solution.integerBreak(39) == 1594323\nassert solution.integerBreak(57) == 1162261467\nassert solution.integerBreak(24) == 6561\nassert solution.integerBreak(23) == 4374\nassert solution.integerBreak(58) == 1549681956\nassert solution.integerBreak(24) == 6561\nassert solution.integerBreak(22) == 2916\nassert solution.integerBreak(35) == 354294\nassert solution.integerBreak(2) == 1\nassert solution.integerBreak(13) == 108\nassert solution.integerBreak(2) == 1\nassert solution.integerBreak(38) == 1062882\nassert solution.integerBreak(3) == 2\nassert solution.integerBreak(30) == 59049\nassert solution.integerBreak(44) == 9565938\nassert solution.integerBreak(27) == 19683\nassert solution.integerBreak(50) == 86093442\nassert solution.integerBreak(50) == 86093442\nassert solution.integerBreak(58) == 1549681956\nassert solution.integerBreak(45) == 14348907\nassert solution.integerBreak(14) == 162\nassert solution.integerBreak(37) == 708588\nassert solution.integerBreak(16) == 324\nassert solution.integerBreak(30) == 59049\nassert solution.integerBreak(27) == 19683\nassert solution.integerBreak(51) == 129140163\nassert solution.integerBreak(21) == 2187\nassert solution.integerBreak(5) == 6\nassert solution.integerBreak(27) == 19683\nassert solution.integerBreak(40) == 2125764\nassert solution.integerBreak(46) == 19131876\nassert solution.integerBreak(33) == 177147\nassert solution.integerBreak(4) == 4\nassert solution.integerBreak(29) == 39366\nassert solution.integerBreak(18) == 729\nassert solution.integerBreak(9) == 27\nassert solution.integerBreak(57) == 1162261467\nassert solution.integerBreak(52) == 172186884\nassert solution.integerBreak(16) == 324\nassert solution.integerBreak(58) == 1549681956\nassert solution.integerBreak(29) == 39366\nassert solution.integerBreak(41) == 3188646\nassert solution.integerBreak(46) == 19131876\nassert solution.integerBreak(10) == 36\nassert solution.integerBreak(37) == 708588\nassert solution.integerBreak(26) == 13122\nassert solution.integerBreak(36) == 531441\nassert solution.integerBreak(56) == 774840978\nassert solution.integerBreak(56) == 774840978\nassert solution.integerBreak(47) == 28697814",
  "inefficient_solution": "class Solution:\n    def integerBreak(self, n: int) -> int:\n        products = []\n        for i in range(2, n+1):\n            for j in range(2, i):\n                for k in range(2, n - j):\n                    total = i + j + k\n                    if total == n:\n                        products.append(i * j * k)\n        return max(products)",
  "is_python": true
}