{
  "problem_idx": 494,
  "task_name": "Target Sum",
  "markdown_description": "\nYou are given an integer array `nums` and an integer `target`.\n\n\nYou want to build an **expression** out of nums by adding one of the symbols `'+'` and `'-'` before each integer in nums and then concatenate all the integers.\n\n\n* For example, if `nums = [2, 1]`, you can add a `'+'` before `2` and a `'-'` before `1` and concatenate them to build the expression `\"+2-1\"`.\n\n\nReturn the number of different **expressions** that you can build, which evaluates to `target`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,1,1,1,1], target = 3\n**Output:** 5\n**Explanation:** There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1], target = 1\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 20`\n* `0 <= nums[i] <= 1000`\n* `0 <= sum(nums[i]) <= 1000`\n* `-1000 <= target <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        s = sum(nums)\n        if s < target or (s - target) % 2 != 0:\n            return 0\n        n = (s - target) // 2\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for v in nums:\n            for j in range(n, v - 1, -1):\n                dp[j] += dp[j - v]\n        return dp[-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def findTargetSumWays(self, nums, target):\n        s = sum(nums)\n        if s < target or (s - target) % 2 != 0:\n            return 0\n        n = (s - target) // 2\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for v in nums:\n            for j in range(n, v - 1, -1):\n                dp[j] += dp[j - v]\n        return dp[-1]\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1001), random.randint(1, 21))\n\n    # Generate a random target sum\n    target = random.randint(-1000, 1001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findTargetSumWays(nums, target)\n\n    return nums, target, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findTargetSumWays(nums, target) == expected_result\n        print(f\"assert solution.findTargetSumWays({nums}, {target}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.findTargetSumWays({nums}, {target}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findTargetSumWays([952, 290, 203, 760, 740, 132, 266, 533, 159, 10, 449, 815, 46, 408, 164], -166) == 0\nassert solution.findTargetSumWays([548, 740, 139, 72, 773, 894], 511) == 0\nassert solution.findTargetSumWays([168, 20, 591, 778, 461, 38, 160, 527, 314, 286, 709, 918, 704, 793, 928, 552, 355, 33, 670, 380], -265) == 335\nassert solution.findTargetSumWays([7, 119, 221, 232, 787, 266, 558, 271, 457, 876, 456, 531, 198, 192, 815], -472) == 13\nassert solution.findTargetSumWays([954, 613, 326, 938, 710, 361, 876, 343, 400, 1000, 470], -279) == 1\nassert solution.findTargetSumWays([1000, 108, 317, 534, 934, 651, 973, 555, 213, 140, 206], 2) == 0\nassert solution.findTargetSumWays([295, 656, 172, 104, 439, 212, 105, 405, 701, 331, 556, 472, 315, 312, 444, 576], 770) == 0\nassert solution.findTargetSumWays([561, 103, 295, 333, 854, 514, 885], 433) == 0\nassert solution.findTargetSumWays([163, 231, 674, 25, 507, 485, 477, 820, 405, 562, 598, 656, 249, 357, 915, 459, 390, 130], -675) == 118\nassert solution.findTargetSumWays([543, 196, 694, 107], -338) == 0\nassert solution.findTargetSumWays([630, 34, 513, 890, 506, 62, 554, 560, 833, 362, 942, 1, 162], -551) == 5\nassert solution.findTargetSumWays([989, 603, 600, 272, 223, 89, 861, 968, 215, 594, 776, 528, 19, 598], -420) == 0\nassert solution.findTargetSumWays([741, 340, 885, 408, 684, 672, 409, 482, 598, 580, 402, 683, 366, 578, 893, 359, 327], 218) == 0\nassert solution.findTargetSumWays([356, 766, 327, 566, 793, 910, 115, 403, 75, 616, 59], 760) == 0\nassert solution.findTargetSumWays([29, 749, 966, 739, 69, 852, 184, 596, 516, 905, 674, 335, 570, 976, 88, 68, 355, 565, 106], 124) == 158\nassert solution.findTargetSumWays([681, 54, 656, 940, 226], 415) == 0\nassert solution.findTargetSumWays([891, 368, 319, 997, 902, 342, 28, 179, 114, 557, 356, 803], -506) == 2\nassert solution.findTargetSumWays([16, 914, 346, 943, 75, 858, 553, 354, 247, 448, 127, 62, 782, 748, 379, 570], 218) == 19\nassert solution.findTargetSumWays([522, 172, 268, 179, 790, 186, 617, 479, 758, 20, 685, 474, 428, 141, 510, 467, 828, 88, 575], -833) == 152\nassert solution.findTargetSumWays([964, 796, 928, 756, 946, 727, 48, 131, 568, 338, 612, 435, 633, 123, 587, 918, 87, 78, 734, 636], 795) == 303\nassert solution.findTargetSumWays([666, 691, 405, 283, 118, 753, 698, 421, 137, 796, 307, 553, 429, 576, 52, 261, 346, 255], -821) == 83\nassert solution.findTargetSumWays([230, 637, 485, 89, 509, 413, 53, 477, 661, 504, 144, 558, 28], -550) == 1\nassert solution.findTargetSumWays([412], 651) == 0\nassert solution.findTargetSumWays([547, 565, 225, 718, 306, 406], -578) == 0\nassert solution.findTargetSumWays([553, 34], -422) == 0\nassert solution.findTargetSumWays([514, 625, 411, 484, 300, 349], -963) == 0\nassert solution.findTargetSumWays([41, 347, 947], -179) == 0\nassert solution.findTargetSumWays([887, 534, 660, 859, 357, 37, 608, 943, 101, 204, 619], -212) == 0\nassert solution.findTargetSumWays([105, 228, 38, 634, 152, 678, 944, 313, 709, 464, 476, 229, 904, 187, 497, 293, 986], 233) == 47\nassert solution.findTargetSumWays([722, 447, 62, 573, 295, 219], -201) == 0\nassert solution.findTargetSumWays([867, 827, 921, 672, 326, 621, 961, 529, 70, 677, 47, 738], 480) == 3\nassert solution.findTargetSumWays([461, 514, 187, 669, 540, 41, 687, 170, 997, 93, 457, 780, 178, 912], -397) == 0\nassert solution.findTargetSumWays([192, 170, 660, 208, 758, 906, 441, 459, 553, 698, 404, 830, 154, 957, 466], 361) == 0\nassert solution.findTargetSumWays([125, 612, 415, 583, 942, 570, 669, 466, 799, 602, 686, 101, 92, 865, 893, 122, 739, 977], -527) == 0\nassert solution.findTargetSumWays([265, 41, 867, 609, 91, 846, 327, 215, 692, 223, 604], -114) == 1\nassert solution.findTargetSumWays([547, 960, 32, 803, 698, 853, 880, 355, 705, 357, 883, 727, 927, 917], -669) == 0\nassert solution.findTargetSumWays([62, 723, 976, 415, 1000, 784, 137, 734, 193, 577, 868, 666, 225, 260, 781, 128, 418], 55) == 32\nassert solution.findTargetSumWays([75, 576, 588, 384, 43, 844], -202) == 0\nassert solution.findTargetSumWays([593, 456, 240, 77, 62, 955, 331, 118, 906, 707, 652, 488, 50, 299, 96, 63], -426) == 0\nassert solution.findTargetSumWays([481, 307, 364, 390, 645, 771, 262, 555, 607, 41, 210, 654, 412, 952, 635, 788, 425, 980], 301) == 79\nassert solution.findTargetSumWays([70, 17, 270, 548, 271, 668, 783, 436, 84, 703, 337, 527, 512, 38, 727, 441, 953, 546, 307], 679) == 0\nassert solution.findTargetSumWays([743, 722, 446, 760, 71, 543, 396, 80, 707, 215, 453, 371], 894) == 0\nassert solution.findTargetSumWays([549, 494, 608, 946, 880, 571, 333, 237, 522, 802, 298], -33) == 0\nassert solution.findTargetSumWays([824, 128, 448, 174, 472, 941, 706, 927, 184, 883, 4, 118, 395, 895, 538, 85], -194) == 23\nassert solution.findTargetSumWays([809, 940, 489, 902, 691, 676, 144, 873, 789, 305, 46, 764, 393, 911, 109, 838, 512, 858, 149], 268) == 143\nassert solution.findTargetSumWays([608], 270) == 0\nassert solution.findTargetSumWays([927, 961, 67, 535, 670, 527, 397, 875, 787], 984) == 1\nassert solution.findTargetSumWays([314, 394, 421, 899, 440, 62, 605, 326, 113], 928) == 1\nassert solution.findTargetSumWays([1, 454, 158, 850, 63, 477], 2) == 0\nassert solution.findTargetSumWays([22, 910, 28, 168, 474, 492, 765, 174, 278, 989, 79, 521, 264, 649, 376, 900, 794, 736], -939) == 76\nassert solution.findTargetSumWays([348, 936, 948, 285], 800) == 0\nassert solution.findTargetSumWays([772, 42, 781, 222, 327, 864], -163) == 0\nassert solution.findTargetSumWays([662, 203, 741, 159, 172, 776, 568], -839) == 0\nassert solution.findTargetSumWays([881, 617], -74) == 0\nassert solution.findTargetSumWays([106, 30, 436, 108, 785, 503, 95, 13, 773, 375], 844) == 1\nassert solution.findTargetSumWays([864, 844, 187, 255, 262, 661, 119, 55, 839, 597, 378, 596, 153, 936, 685, 538, 248, 545, 602, 268], 736) == 294\nassert solution.findTargetSumWays([608, 979, 592, 465, 918, 706, 26], 838) == 0\nassert solution.findTargetSumWays([434, 150, 466, 608], -382) == 0\nassert solution.findTargetSumWays([558, 815, 266, 448, 447, 446, 332, 604, 243, 382, 396, 556, 675, 170, 227, 779, 728, 531, 805], 696) == 180\nassert solution.findTargetSumWays([651, 47, 999, 771, 392, 857, 269, 165, 341], -309) == 0\nassert solution.findTargetSumWays([382, 812, 192, 88, 868, 557, 515], -435) == 0\nassert solution.findTargetSumWays([499], 809) == 0\nassert solution.findTargetSumWays([510, 493, 419, 271], 372) == 0\nassert solution.findTargetSumWays([483, 583, 283, 990, 528, 706, 881, 891, 409, 349, 220, 992], 337) == 2\nassert solution.findTargetSumWays([226, 694, 122, 943, 810, 997, 587, 955, 345, 847, 576, 443, 731, 526, 393, 221, 683, 337, 129, 414], -305) == 311\nassert solution.findTargetSumWays([413, 636, 507, 874, 530, 328, 783, 707, 179, 45, 39, 727, 195, 817, 361, 977], 659) == 0\nassert solution.findTargetSumWays([53, 836, 592, 997, 27, 969, 835], 533) == 0\nassert solution.findTargetSumWays([453, 958, 942, 716, 894, 288, 53, 730, 991, 172, 756, 785, 222, 861, 985, 971, 517, 666, 697], -757) == 119\nassert solution.findTargetSumWays([405, 463, 352, 592, 992, 67, 234, 285, 150, 708, 550, 135, 640, 735, 114, 551, 416], -500) == 0\nassert solution.findTargetSumWays([560, 589, 189, 128, 108, 407, 881, 883, 721, 185, 830], -277) == 1\nassert solution.findTargetSumWays([421, 326, 341, 578, 682, 514, 182, 94, 119, 828, 804, 234, 63, 523], -24) == 0\nassert solution.findTargetSumWays([510, 792, 590, 597, 310, 779, 951, 882, 337, 122, 12, 759, 472, 232, 154, 204, 738, 436, 681, 912], -612) == 303\nassert solution.findTargetSumWays([152, 287, 277, 55, 375, 848, 877, 387, 75, 397, 396, 419, 409, 835], 131) == 17\nassert solution.findTargetSumWays([620, 900, 595, 476, 215, 371, 494, 368], -479) == 1\nassert solution.findTargetSumWays([443, 507, 877, 950, 918, 251, 595, 515, 902, 486, 941, 249, 430, 500, 103], 776) == 0\nassert solution.findTargetSumWays([346], 1000) == 0\nassert solution.findTargetSumWays([993, 620, 657, 895], -502) == 0\nassert solution.findTargetSumWays([226, 912, 263, 724, 758, 32, 295, 992, 545, 22], 7) == 0\nassert solution.findTargetSumWays([426, 488, 542, 185, 332, 114], 599) == 0\nassert solution.findTargetSumWays([625, 499, 128, 973, 783, 320, 933, 308, 601, 334, 9, 662, 365, 331, 616, 438], 521) == 31\nassert solution.findTargetSumWays([507, 230, 606, 577, 827, 182, 823, 710, 853, 623, 310, 49, 420, 335, 996, 906, 516, 97, 209], -705) == 0\nassert solution.findTargetSumWays([973, 953, 246, 993, 890, 71, 355, 658, 70, 798, 824, 813, 325, 157, 504, 146, 534, 914, 912, 334, 210], -228) == 538\nassert solution.findTargetSumWays([397, 529, 135, 976, 344, 749, 459, 378, 153, 237, 99, 959, 336], 943) == 2\nassert solution.findTargetSumWays([847, 128, 492, 214, 951, 272, 376, 628, 461, 32, 766, 161, 824, 374, 297], -488) == 0\nassert solution.findTargetSumWays([661, 495, 130, 686, 251, 132, 50, 386, 607, 106], 77) == 0\nassert solution.findTargetSumWays([508, 220, 807, 674, 166, 379, 151, 666, 734, 240, 415, 115, 599, 746], -821) == 0\nassert solution.findTargetSumWays([922, 435, 871, 63, 547, 479], 388) == 0\nassert solution.findTargetSumWays([113, 998, 684, 658, 209, 622, 642, 63, 522, 247, 605, 319, 267, 259, 516, 43], 86) == 0\nassert solution.findTargetSumWays([466, 904, 544, 274, 55, 676, 351, 58, 148, 573, 78, 373, 2, 767, 443, 870, 887, 473, 465, 922, 46], 974) == 0\nassert solution.findTargetSumWays([706, 287, 320, 599, 849, 188], 222) == 0\nassert solution.findTargetSumWays([915, 88, 943, 577, 851, 160], 576) == 0\nassert solution.findTargetSumWays([289, 222, 116, 570, 210, 686, 342, 413, 742, 614, 296, 459, 114, 400, 649], 594) == 7\nassert solution.findTargetSumWays([70, 405, 508, 127, 936, 192, 43, 807, 57], 521) == 2\nassert solution.findTargetSumWays([210, 392, 824, 845], -387) == 0\nassert solution.findTargetSumWays([741, 425, 137, 431, 901, 641, 579, 924, 798, 231, 759, 326, 984, 511, 784, 242], 236) == 23\nassert solution.findTargetSumWays([974, 201, 242, 264, 404, 588, 273, 908, 653], 927) == 0\nassert solution.findTargetSumWays([780, 377, 8, 376, 74, 925, 536, 493, 201, 129, 267, 905, 486, 206, 666, 701, 590, 10, 124], -904) == 194\nassert solution.findTargetSumWays([861, 943, 132, 257, 20, 396, 144, 31, 772, 99, 921, 61, 498, 567, 424, 855, 321, 494], -470) == 92\nassert solution.findTargetSumWays([221, 992, 998, 57, 282, 588, 768, 795, 572, 85, 155, 319, 882, 821, 797, 176], -8) == 18\nassert solution.findTargetSumWays([764, 219, 381, 629, 63, 102, 362, 400, 13, 663, 754, 195, 768, 803, 124, 815, 731], 889) == 0",
  "inefficient_solution": "class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:\n        n = len(nums)\n        dp = [[0] * 2001 for _ in range(21)]\n        for i in range(21):\n            dp[i][1000] = 1\n        for i in range(20):\n            for j in range(2001):\n                for v in nums:\n                    if 0 <= j-v <= 2000:\n                        dp[i+1][j-v] += dp[i][j]\n        res = 0\n        for i in range(2001):\n            if i == target:\n                res += dp[n][i]\n        return res",
  "is_python": true
}