{
  "problem_idx": 2355,
  "task_name": "Maximum Number of Books You Can Take",
  "markdown_description": "\nYou are given a **0-indexed** integer array `books` of length `n` where `books[i]` denotes the number of books on the `ith` shelf of a bookshelf.\n\n\nYou are going to take books from a **contiguous** section of the bookshelf spanning from `l` to `r` where `0 <= l <= r < n`. For each index `i` in the range `l <= i < r`, you must take **strictly fewer** books from shelf `i` than shelf `i + 1`.\n\n\nReturn *the **maximum** number of books you can take from the bookshelf.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** books = [8,5,2,7,9]\n**Output:** 19\n**Explanation:**\n- Take 1 book from shelf 1.\n- Take 2 books from shelf 2.\n- Take 7 books from shelf 3.\n- Take 9 books from shelf 4.\nYou have taken 19 books, so return 19.\nIt can be proven that 19 is the maximum number of books you can take.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** books = [7,0,3,4,5]\n**Output:** 12\n**Explanation:**\n- Take 3 books from shelf 2.\n- Take 4 books from shelf 3.\n- Take 5 books from shelf 4.\nYou have taken 12 books so return 12.\nIt can be proven that 12 is the maximum number of books you can take.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** books = [8,2,3,7,3,4,0,1,4,3]\n**Output:** 13\n**Explanation:**\n- Take 1 book from shelf 0.\n- Take 2 books from shelf 1.\n- Take 3 books from shelf 2.\n- Take 7 books from shelf 3.\nYou have taken 13 books so return 13.\nIt can be proven that 13 is the maximum number of books you can take.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= books.length <= 105`\n* `0 <= books[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumBooks(self, books: List[int]) -> int:\n        nums = [v - i for i, v in enumerate(books)]\n        n = len(nums)\n        left = [-1] * n\n        stk = []\n        for i, v in enumerate(nums):\n            while stk and nums[stk[-1]] >= v:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        ans = 0\n        dp = [0] * n\n        dp[0] = books[0]\n        for i, v in enumerate(books):\n            j = left[i]\n            cnt = min(v, i - j)\n            u = v - cnt + 1\n            s = (u + v) * cnt // 2\n            dp[i] = s + (0 if j == -1 else dp[j])\n            ans = max(ans, dp[i])\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumBooks(self, books):\n        nums = [v - i for i, v in enumerate(books)]\n        n = len(nums)\n        left = [-1] * n\n        stk = []\n        for i, v in enumerate(nums):\n            while stk and nums[stk[-1]] >= v:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        ans = 0\n        dp = [0] * n\n        dp[0] = books[0]\n        for i, v in enumerate(books):\n            j = left[i]\n            cnt = min(v, i - j)\n            u = v - cnt + 1\n            s = (u + v) * cnt // 2\n            dp[i] = s + (0 if j == -1 else dp[j])\n            ans = max(ans, dp[i])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    books = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumBooks(books)\n\n    return books, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        books, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumBooks(books) == expected_result\n        print(f\"assert solution.maximumBooks({books}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumBooks({books}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumBooks([70, 49, 38, 43, 51, 95, 40, 69, 20, 28]) == 328\nassert solution.maximumBooks([82, 74, 79, 77, 75]) == 365\nassert solution.maximumBooks([57, 12, 51, 87, 61, 33]) == 195\nassert solution.maximumBooks([68, 69, 56, 1, 32]) == 165\nassert solution.maximumBooks([22, 30, 76, 38, 65, 96, 39, 31, 70, 63]) == 343\nassert solution.maximumBooks([82, 59, 75, 83, 19, 85, 93]) == 275\nassert solution.maximumBooks([18, 20]) == 38\nassert solution.maximumBooks([4, 65, 17, 39, 100, 44]) == 176\nassert solution.maximumBooks([30, 62, 9, 23, 97, 34]) == 144\nassert solution.maximumBooks([23, 42, 20, 62, 76, 98]) == 293\nassert solution.maximumBooks([53, 67, 40, 21, 51, 8, 78, 64, 63, 2]) == 219\nassert solution.maximumBooks([72, 88, 2, 46, 3, 67, 31]) == 160\nassert solution.maximumBooks([59, 92, 33, 29, 71, 4, 5]) == 181\nassert solution.maximumBooks([46, 62, 98, 67, 27, 79, 68]) == 260\nassert solution.maximumBooks([82, 87]) == 169\nassert solution.maximumBooks([79, 80, 99, 33, 87, 1, 67, 81]) == 258\nassert solution.maximumBooks([58, 24, 82]) == 129\nassert solution.maximumBooks([50, 54, 43, 13, 25]) == 126\nassert solution.maximumBooks([59, 10]) == 59\nassert solution.maximumBooks([79, 69, 77, 8, 91, 33]) == 214\nassert solution.maximumBooks([10, 46, 69, 92, 54, 39, 27, 50, 20]) == 217\nassert solution.maximumBooks([34, 18, 3, 41, 11, 84, 4, 91, 86]) == 181\nassert solution.maximumBooks([66, 69, 38, 58, 41, 61, 60, 8, 49, 51]) == 311\nassert solution.maximumBooks([2, 62]) == 64\nassert solution.maximumBooks([58, 39, 75, 89, 86, 1, 37, 30, 52, 47]) == 323\nassert solution.maximumBooks([40, 59, 64, 41, 32, 70, 68, 87, 95]) == 467\nassert solution.maximumBooks([57, 34]) == 67\nassert solution.maximumBooks([14, 3, 48]) == 53\nassert solution.maximumBooks([7, 63, 24]) == 70\nassert solution.maximumBooks([55, 76, 54, 60, 91]) == 310\nassert solution.maximumBooks([99, 97]) == 193\nassert solution.maximumBooks([58, 89, 43, 64, 41]) == 195\nassert solution.maximumBooks([64, 59]) == 117\nassert solution.maximumBooks([95, 3, 89, 90, 22]) == 184\nassert solution.maximumBooks([25, 22]) == 43\nassert solution.maximumBooks([14, 90, 54, 57, 69, 92]) == 339\nassert solution.maximumBooks([6, 36, 52, 54, 84, 33, 28, 80]) == 239\nassert solution.maximumBooks([78, 39, 100, 16, 54, 74, 40, 38]) == 204\nassert solution.maximumBooks([95, 34, 49]) == 116\nassert solution.maximumBooks([8, 24, 97, 50, 92]) == 223\nassert solution.maximumBooks([25, 17, 93, 78, 32, 28, 42]) == 188\nassert solution.maximumBooks([18, 4, 11, 64]) == 82\nassert solution.maximumBooks([21, 99, 100, 83, 25, 60, 29]) == 267\nassert solution.maximumBooks([20, 55]) == 75\nassert solution.maximumBooks([58, 98]) == 156\nassert solution.maximumBooks([16, 72]) == 88\nassert solution.maximumBooks([73, 27, 25, 24]) == 90\nassert solution.maximumBooks([78, 72, 53, 16]) == 156\nassert solution.maximumBooks([58, 16, 60, 51]) == 132\nassert solution.maximumBooks([5, 15, 100, 68, 11, 64, 96, 83]) == 272\nassert solution.maximumBooks([75, 30, 14, 71, 77, 56]) == 204\nassert solution.maximumBooks([31, 13, 97, 37]) == 122\nassert solution.maximumBooks([36, 67, 84]) == 187\nassert solution.maximumBooks([92, 49, 93, 50, 98, 85, 99]) == 462\nassert solution.maximumBooks([70, 10]) == 70\nassert solution.maximumBooks([43, 77, 13, 63, 46, 37, 33]) == 162\nassert solution.maximumBooks([85, 38, 18]) == 85\nassert solution.maximumBooks([96, 63, 33, 78, 57, 36]) == 209\nassert solution.maximumBooks([64, 56, 1, 81, 34, 12, 36, 42, 84, 57]) == 225\nassert solution.maximumBooks([8, 1, 89, 26, 27, 84, 30, 55, 39, 22]) == 215\nassert solution.maximumBooks([60, 93, 24, 83, 74, 49, 81, 90, 80]) == 450\nassert solution.maximumBooks([97, 23, 99, 48, 19, 27, 67]) == 179\nassert solution.maximumBooks([20, 12, 90, 80, 19, 88, 38, 2]) == 182\nassert solution.maximumBooks([84, 44, 54]) == 141\nassert solution.maximumBooks([100, 18, 55, 23, 72, 29, 80]) == 217\nassert solution.maximumBooks([16, 9, 57, 43, 74, 73]) == 247\nassert solution.maximumBooks([90, 48, 100, 83, 36, 86, 7, 66]) == 260\nassert solution.maximumBooks([21, 40, 92, 66, 91, 39, 20]) == 283\nassert solution.maximumBooks([43, 55, 71, 25, 7, 1, 16, 13]) == 169\nassert solution.maximumBooks([37, 53, 97, 57, 19, 12, 72, 74, 79, 30]) == 282\nassert solution.maximumBooks([64, 70, 67, 100, 62, 54, 46]) == 309\nassert solution.maximumBooks([81, 80, 24, 91, 9, 20]) == 160\nassert solution.maximumBooks([100, 81, 53, 76, 58, 8]) == 271\nassert solution.maximumBooks([76, 29, 3, 56, 84, 25, 23, 49]) == 146\nassert solution.maximumBooks([18, 63, 46]) == 109\nassert solution.maximumBooks([5, 17, 23, 78, 88, 82, 52, 99]) == 346\nassert solution.maximumBooks([70, 57, 37, 30]) == 114\nassert solution.maximumBooks([40, 82, 18, 27, 65]) == 143\nassert solution.maximumBooks([47, 52, 11, 48, 89, 74, 53, 81, 38, 97]) == 340\nassert solution.maximumBooks([97, 48, 73, 83, 7, 94]) == 251\nassert solution.maximumBooks([23, 98, 13, 42, 1, 69, 67, 30]) == 134\nassert solution.maximumBooks([35, 30, 34, 63, 84, 82, 47, 57, 68, 85]) == 485\nassert solution.maximumBooks([45, 78, 33, 21, 58, 42, 19, 76, 74, 75]) == 334\nassert solution.maximumBooks([67, 93, 80, 68, 23, 16, 7, 85, 28, 52]) == 266\nassert solution.maximumBooks([66, 27, 2, 71, 10, 28]) == 74\nassert solution.maximumBooks([82, 71, 11, 13, 84, 94, 95]) == 316\nassert solution.maximumBooks([32, 38, 10]) == 70\nassert solution.maximumBooks([30, 41, 66, 42, 14, 87, 78]) == 215\nassert solution.maximumBooks([53, 79, 83, 48, 77, 36, 51]) == 263\nassert solution.maximumBooks([26, 23, 57]) == 102\nassert solution.maximumBooks([14, 60, 5, 65, 70, 4]) == 147\nassert solution.maximumBooks([77, 46, 91]) == 182\nassert solution.maximumBooks([36, 21]) == 41\nassert solution.maximumBooks([85, 74, 58, 27, 79]) == 181\nassert solution.maximumBooks([25, 99, 38, 7, 17, 92, 56, 10]) == 150\nassert solution.maximumBooks([54, 23, 14, 46]) == 85\nassert solution.maximumBooks([22, 43, 12, 83, 41, 65]) == 179\nassert solution.maximumBooks([88, 63, 70, 29, 28, 78, 37, 6, 99]) == 208\nassert solution.maximumBooks([63, 65, 69, 23, 49, 82, 21]) == 217\nassert solution.maximumBooks([100, 76]) == 151",
  "inefficient_solution": "class Solution:\n    def maximumBooks(self, books: List[int]) -> int:\n        n = len(books)\n        nums = [v - i for i, v in enumerate(books)]\n        left = [-1] * n\n        stk = []\n        for i, v in enumerate(nums):\n            while stk and nums[stk[-1]] >= v:\n                stk.pop()\n            if stk:\n                left[i] = stk[-1]\n            stk.append(i)\n        ans = 0\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = books[0]\n        for i in range(n):\n            for j in range(i + 1):\n                k = left[i]\n                cnt = min(books[i], i - k)\n                u = books[i] - cnt + 1\n                s = (u + books[i]) * cnt // 2\n                if k == -1:\n                    dp[i][j] = s\n                else:\n                    dp[i][j] = s + dp[k][j]\n                ans = max(ans, dp[i][j])\n        return ans",
  "is_python": true
}