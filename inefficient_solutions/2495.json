{
  "problem_idx": 2495,
  "task_name": "Number of Subarrays Having Even Product",
  "markdown_description": "\nGiven a **0-indexed** integer array `nums`, return *the number of subarrays of* `nums` *having an even product*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [9,6,7,13]\n**Output:** 6\n**Explanation:** There are 6 subarrays with an even product:\n- nums[0..1] = 9 * 6 = 54.\n- nums[0..2] = 9 * 6 * 7 = 378.\n- nums[0..3] = 9 * 6 * 7 * 13 = 4914.\n- nums[1..1] = 6.\n- nums[1..2] = 6 * 7 = 42.\n- nums[1..3] = 6 * 7 * 13 = 546.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [7,3,5]\n**Output:** 0\n**Explanation:** There are no subarrays with an even product.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def evenProduct(self, nums: List[int]) -> int:\n        ans, last = 0, -1\n        for i, v in enumerate(nums):\n            if v % 2 == 0:\n                last = i\n            ans += last + 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def evenProduct(self, nums):\n        ans, last = 0, -1\n        for i, v in enumerate(nums):\n            if v % 2 == 0:\n                last = i\n            ans += last + 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.evenProduct(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.evenProduct(nums) == expected_result\n        print(f\"assert solution.evenProduct({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.evenProduct({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n# Sample outputs based on expected_result generated from the above test case generator\n# assert solution.evenProduct([9, 6, 7, 13]) == 6\n# assert solution.evenProduct([8, 5, 7, 10]) == 10\n# assert solution.evenProduct([6, 9, 4, 2, 3]) == 16\n# ...\n",
  "test_case": "assert solution.evenProduct([75, 18]) == 2\nassert solution.evenProduct([43, 45, 13, 32, 100]) == 9\nassert solution.evenProduct([6, 94]) == 3\nassert solution.evenProduct([28, 43, 54, 38, 12, 45, 9]) == 24\nassert solution.evenProduct([27, 26]) == 2\nassert solution.evenProduct([70, 94, 34, 35]) == 9\nassert solution.evenProduct([99, 100, 61]) == 4\nassert solution.evenProduct([84, 48, 49, 45]) == 7\nassert solution.evenProduct([22, 63, 20, 13]) == 8\nassert solution.evenProduct([61, 43, 47]) == 0\nassert solution.evenProduct([87, 66, 28]) == 5\nassert solution.evenProduct([28, 24, 67, 25, 19]) == 9\nassert solution.evenProduct([20, 17, 2]) == 5\nassert solution.evenProduct([38, 80, 20, 12, 24]) == 15\nassert solution.evenProduct([85, 15, 69, 12, 86, 25, 90, 89]) == 28\nassert solution.evenProduct([94, 83, 80, 21, 96]) == 13\nassert solution.evenProduct([60, 55, 95, 2, 98, 17]) == 17\nassert solution.evenProduct([86, 42, 77, 8, 65, 58, 46]) == 26\nassert solution.evenProduct([14, 49, 37, 86, 69, 31, 20, 3]) == 29\nassert solution.evenProduct([25, 85]) == 0\nassert solution.evenProduct([33, 90, 96, 69, 82, 41, 55, 42, 64, 7]) == 49\nassert solution.evenProduct([50, 62, 48]) == 6\nassert solution.evenProduct([28, 27, 50, 67, 76, 2, 94, 48]) == 34\nassert solution.evenProduct([63, 83, 54, 75, 32, 66, 89, 7]) == 29\nassert solution.evenProduct([83, 5, 65, 53, 45, 41]) == 0\nassert solution.evenProduct([22, 76, 29, 18, 84, 3, 94, 71, 10]) == 42\nassert solution.evenProduct([84, 45, 19, 87, 52, 28]) == 15\nassert solution.evenProduct([43, 85, 48, 50, 18]) == 12\nassert solution.evenProduct([23, 87, 11, 19, 53, 38, 5, 84]) == 20\nassert solution.evenProduct([8, 88, 17, 33, 20, 63]) == 17\nassert solution.evenProduct([55, 48, 52, 61, 39, 50, 78, 38]) == 32\nassert solution.evenProduct([84, 3, 29, 16, 38, 32, 70]) == 25\nassert solution.evenProduct([71, 24, 81, 15, 37, 27]) == 10\nassert solution.evenProduct([95, 59]) == 0\nassert solution.evenProduct([75, 85, 98, 59, 74, 71, 13, 33, 92]) == 35\nassert solution.evenProduct([77, 71]) == 0\nassert solution.evenProduct([1, 8, 51]) == 4\nassert solution.evenProduct([14, 7, 80, 33, 15, 55]) == 14\nassert solution.evenProduct([32, 75, 74, 37]) == 8\nassert solution.evenProduct([90, 52, 48, 16]) == 10\nassert solution.evenProduct([37, 27]) == 0\nassert solution.evenProduct([97, 43, 22, 16, 94, 55, 56, 47]) == 31\nassert solution.evenProduct([85, 19, 11, 17, 69, 36, 32, 65, 53, 29]) == 34\nassert solution.evenProduct([91, 1, 36, 5, 43, 71]) == 12\nassert solution.evenProduct([84, 1, 56, 98, 30, 50]) == 20\nassert solution.evenProduct([55, 85, 50, 92, 25, 9, 28]) == 22\nassert solution.evenProduct([75, 43]) == 0\nassert solution.evenProduct([86, 98, 59, 92, 22]) == 14\nassert solution.evenProduct([55, 99, 53, 60, 11]) == 8\nassert solution.evenProduct([55, 88, 47, 18, 45, 96]) == 18\nassert solution.evenProduct([62, 24, 99, 78]) == 9\nassert solution.evenProduct([20, 69, 66, 98, 38, 36, 16, 52, 75]) == 43\nassert solution.evenProduct([16, 49]) == 2\nassert solution.evenProduct([18, 13, 75, 46, 8, 70, 68, 77, 96]) == 41\nassert solution.evenProduct([98, 4, 87, 28, 66]) == 14\nassert solution.evenProduct([94, 32, 76, 40, 21, 51, 36, 42]) == 33\nassert solution.evenProduct([29, 4, 63, 46, 15, 49]) == 16\nassert solution.evenProduct([27, 18]) == 2\nassert solution.evenProduct([21, 35, 80, 88]) == 7\nassert solution.evenProduct([45, 30, 10]) == 5\nassert solution.evenProduct([92, 97, 36, 65, 14, 75, 60, 25, 17]) == 39\nassert solution.evenProduct([9, 86, 89, 42, 67, 43, 98, 95, 46]) == 39\nassert solution.evenProduct([90, 34]) == 3\nassert solution.evenProduct([10, 64, 12, 1]) == 9\nassert solution.evenProduct([83, 12, 22, 38, 28, 100, 81, 62, 42, 96]) == 53\nassert solution.evenProduct([26, 58, 31, 3, 8, 18, 14]) == 25\nassert solution.evenProduct([65, 29, 71, 55, 16, 97, 96, 39, 68]) == 33\nassert solution.evenProduct([31, 2, 69, 48, 20, 17, 77, 57]) == 28\nassert solution.evenProduct([15, 60, 33, 21, 91, 61]) == 10\nassert solution.evenProduct([31, 11]) == 0\nassert solution.evenProduct([71, 92]) == 2\nassert solution.evenProduct([87, 51, 9, 4, 43, 73, 7, 38, 23]) == 32\nassert solution.evenProduct([84, 6, 21, 5, 69, 24, 41]) == 21\nassert solution.evenProduct([6, 61, 73, 47, 28, 67, 42]) == 21\nassert solution.evenProduct([84, 83, 32, 77, 24, 66, 37, 9, 25, 64]) == 47\nassert solution.evenProduct([70, 60, 28, 44, 89, 68, 42]) == 27\nassert solution.evenProduct([98, 29, 68, 9, 65, 100, 49, 94, 64]) == 40\nassert solution.evenProduct([97, 17, 77, 33, 63, 6, 55]) == 12\nassert solution.evenProduct([80, 40, 74, 57, 3]) == 12\nassert solution.evenProduct([76, 19, 10, 58, 47, 8]) == 19\nassert solution.evenProduct([30, 61, 76, 86]) == 9\nassert solution.evenProduct([70, 72, 48, 41, 61, 5]) == 15\nassert solution.evenProduct([36, 8, 39, 51, 75, 28, 95, 73, 48]) == 36\nassert solution.evenProduct([66, 63, 97, 8, 82, 84]) == 18\nassert solution.evenProduct([41, 59, 88, 24, 80, 63, 34, 44, 89, 58]) == 50\nassert solution.evenProduct([85, 87, 93]) == 0\nassert solution.evenProduct([9, 44, 41, 77, 6, 19, 3, 68]) == 29\nassert solution.evenProduct([31, 11, 63, 43, 82, 64, 77, 80]) == 25\nassert solution.evenProduct([8, 2]) == 3\nassert solution.evenProduct([9, 71, 29, 54, 93, 12, 88, 100]) == 29\nassert solution.evenProduct([78, 38, 9, 71, 91, 14]) == 15\nassert solution.evenProduct([1, 32, 76, 25]) == 8\nassert solution.evenProduct([41, 22, 66, 34, 16, 99, 32, 95, 52, 51]) == 51\nassert solution.evenProduct([54, 95, 28, 11, 31, 57, 9, 35]) == 20\nassert solution.evenProduct([80, 34, 66, 3, 98, 24, 48, 57, 92]) == 43\nassert solution.evenProduct([77, 85, 80, 12, 16, 65]) == 17\nassert solution.evenProduct([29, 24, 85, 95, 99, 52, 1, 98, 55, 79]) == 44\nassert solution.evenProduct([39, 75, 28]) == 3\nassert solution.evenProduct([62, 41, 32, 77]) == 8\nassert solution.evenProduct([34, 29, 1, 11, 85, 81, 43, 44]) == 15",
  "inefficient_solution": "class Solution:\n    def evenProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        pref = [[0] * n for _ in range(n)]\n        suff = [[0] * n for _ in range(n)]\n        prod = [1] * n\n        for i in range(n):\n            prod[i] = nums[i]\n            for j in range(i):\n                prod[i] *= nums[j]\n            pref[i][i] = 1 if prod[i] % 2 == 0 else 0\n            for j in range(i - 1, -1, -1):\n                pref[i][j] = pref[i][j + 1] + (1 if prod[i] % 2 == 0 else 0)\n        for i in range(n - 1, -1, -1):\n            suff[i][i] = 1 if prod[i] % 2 == 0 else 0\n            for j in range(i + 1, n):\n                suff[i][j] = suff[i + 1][j] + (1 if prod[i] % 2 == 0 else 0)\n        ans = 0\n        for i in range(n):\n            for j in range(i, n):\n                ans += suff[i][j] * pref[j][i]\n        return ans",
  "is_python": true
}