{
  "problem_idx": 888,
  "task_name": "Fair Candy Swap",
  "markdown_description": "\nAlice and Bob have a different total number of candies. You are given two integer arrays `aliceSizes` and `bobSizes` where `aliceSizes[i]` is the number of candies of the `ith` box of candy that Alice has and `bobSizes[j]` is the number of candies of the `jth` box of candy that Bob has.\n\n\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\n\n\nReturn a*n integer array* `answer` *where* `answer[0]` *is the number of candies in the box that Alice must exchange, and* `answer[1]` *is the number of candies in the box that Bob must exchange*. If there are multiple answers, you may **return any** one of them. It is guaranteed that at least one answer exists.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** aliceSizes = [1,1], bobSizes = [2,2]\n**Output:** [1,2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** aliceSizes = [1,2], bobSizes = [2,3]\n**Output:** [1,2]\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** aliceSizes = [2], bobSizes = [1,3]\n**Output:** [2,3]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= aliceSizes.length, bobSizes.length <= 104`\n* `1 <= aliceSizes[i], bobSizes[j] <= 105`\n* Alice and Bob have a different total number of candies.\n* There will be at least one valid answer for the given input.\n\n\n",
  "canonical_solution": "class Solution:\n    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:\n        diff = (sum(aliceSizes) - sum(bobSizes)) >> 1\n        s = set(bobSizes)\n        for a in aliceSizes:\n            target = a - diff\n            if target in s:\n                return [a, target]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def fairCandySwap(self, aliceSizes, bobSizes):\n        diff = (sum(aliceSizes) - sum(bobSizes)) >> 1\n        s = set(bobSizes)\n        for a in aliceSizes:\n            target = a - diff\n            if target in s:\n                return [a, target]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    aliceSizes = random.sample(range(1, 101), random.randint(2, 10))\n    bobSizes = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.fairCandySwap(aliceSizes, bobSizes)\n\n    return aliceSizes, bobSizes, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        aliceSizes, bobSizes, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.fairCandySwap(aliceSizes, bobSizes) == expected_result\n        print(f\"assert solution.fairCandySwap({aliceSizes}, {bobSizes}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.fairCandySwap({aliceSizes}, {bobSizes}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.fairCandySwap([22, 18, 76, 82, 16, 10], [23, 40, 91, 53, 16, 93, 98]) == None\nassert solution.fairCandySwap([52, 6, 15, 7, 39, 29, 80], [48, 92, 96, 50, 77, 26, 99]) == None\nassert solution.fairCandySwap([13, 68, 47, 69, 29, 96, 90, 34, 45], [100, 58, 94, 52, 27, 97]) == None\nassert solution.fairCandySwap([15, 88, 29, 33, 100, 53, 21], [26, 7, 32, 43, 93, 65, 35, 73, 42, 20]) == None\nassert solution.fairCandySwap([9, 35, 77, 14, 74, 97, 79], [42, 86, 87, 10, 96, 24, 3, 71, 83, 56]) == [9, 96]\nassert solution.fairCandySwap([40, 78, 66, 95, 37, 30], [94, 49, 8, 88, 79, 11, 61, 45, 89, 9]) == None\nassert solution.fairCandySwap([45, 33, 81, 4], [15, 92, 48]) == None\nassert solution.fairCandySwap([64, 11, 42, 79, 23, 17, 47, 5, 49, 90], [2, 4, 61, 71]) == None\nassert solution.fairCandySwap([31, 87, 37, 41, 88], [91, 64, 38, 84, 81, 11, 92, 24, 82, 66]) == None\nassert solution.fairCandySwap([17, 32, 98, 49, 15], [45, 65, 10, 20, 97]) == [32, 45]\nassert solution.fairCandySwap([89, 69], [58, 77, 99, 14]) == None\nassert solution.fairCandySwap([23, 45, 100, 81], [71, 82, 79, 98]) == None\nassert solution.fairCandySwap([36, 68, 47, 22, 75, 23, 17], [90, 15, 36, 61, 8, 11, 44]) == [47, 36]\nassert solution.fairCandySwap([29, 62, 90, 76, 27, 13, 51, 63, 97, 77], [15, 45, 46, 96, 74, 56]) == None\nassert solution.fairCandySwap([56, 44, 69, 13, 27, 34, 11], [37, 93, 1, 26, 68, 45, 47, 10, 14, 70]) == None\nassert solution.fairCandySwap([34, 25, 68, 57, 5, 28], [65, 87, 58]) == [68, 65]\nassert solution.fairCandySwap([27, 18], [54, 76, 64, 5, 82, 52, 10, 50, 72]) == None\nassert solution.fairCandySwap([92, 88, 35, 82, 72, 26], [19, 43, 26, 82, 10]) == None\nassert solution.fairCandySwap([96, 1, 50, 53], [90, 80, 68, 27, 40, 3]) == None\nassert solution.fairCandySwap([51, 95, 82], [30, 45, 34, 37, 61, 49, 7, 51, 38, 74]) == None\nassert solution.fairCandySwap([12, 10, 55, 3, 74, 8, 82, 100, 81, 83], [2, 6, 74, 82]) == None\nassert solution.fairCandySwap([84, 74, 43], [59, 62, 63, 15, 70, 43, 98, 11, 92]) == None\nassert solution.fairCandySwap([89, 59, 77], [90, 30, 41]) == None\nassert solution.fairCandySwap([36, 30, 48, 84], [86, 47]) == None\nassert solution.fairCandySwap([100, 40, 22, 76, 77, 10, 80], [51, 77, 12, 38, 96, 41, 69, 45]) == None\nassert solution.fairCandySwap([46, 13, 35, 37, 84, 50, 75, 61, 8], [4, 7, 92]) == None\nassert solution.fairCandySwap([81, 98], [36, 8, 56, 41, 95, 38, 46, 68, 4]) == None\nassert solution.fairCandySwap([55, 78, 43, 35, 80, 40, 2], [66, 54, 58, 83, 2, 89, 87, 9]) == None\nassert solution.fairCandySwap([17, 43, 9, 13, 81, 45, 75, 38, 51, 27], [98, 21, 59, 44, 72]) == None\nassert solution.fairCandySwap([84, 97, 82, 11, 80, 28, 33, 46, 70], [20, 62, 43, 57, 37, 59, 45, 31, 27, 44]) == [84, 31]\nassert solution.fairCandySwap([90, 13, 15, 32], [49, 90, 78, 24, 91, 2, 52, 66, 34]) == None\nassert solution.fairCandySwap([85, 16, 33], [52, 16, 92, 66, 35, 94, 9]) == None\nassert solution.fairCandySwap([78, 92], [99, 77, 38, 93, 5]) == None\nassert solution.fairCandySwap([50, 14], [64, 2, 87, 35, 50]) == None\nassert solution.fairCandySwap([92, 28, 95, 49, 89, 54, 58, 87], [68, 46, 74]) == None\nassert solution.fairCandySwap([95, 12, 25, 87, 92, 62, 36], [89, 60, 88, 18, 65, 44, 84, 54, 17, 40]) == None\nassert solution.fairCandySwap([13, 30, 71], [99, 78, 72]) == None\nassert solution.fairCandySwap([87, 14, 67, 28, 35, 29, 43, 8, 53], [47, 67, 88, 19, 72, 59, 5, 32, 27]) == None\nassert solution.fairCandySwap([58, 94, 33, 99, 29, 79], [92, 90, 27, 76, 12, 40, 18, 71, 20, 8]) == None\nassert solution.fairCandySwap([95, 23, 75, 17, 96, 91, 71], [15, 17, 27, 68, 65, 52, 63]) == [95, 15]\nassert solution.fairCandySwap([62, 40], [96, 57, 100, 26, 40, 68]) == None\nassert solution.fairCandySwap([42, 78, 91, 79, 96, 29, 12, 99, 83, 40], [40, 53, 16, 28, 41]) == None\nassert solution.fairCandySwap([73, 18, 78, 58, 99, 47], [59, 76, 10, 30, 39, 78, 90]) == [73, 78]\nassert solution.fairCandySwap([42, 67, 62, 16, 21, 59, 12, 19], [85, 47]) == None\nassert solution.fairCandySwap([30, 53, 62, 86, 43, 76, 61, 37], [96, 87, 76, 73, 37, 54, 56]) == None\nassert solution.fairCandySwap([28, 41, 94, 50, 99, 61, 87, 21, 25], [77, 61, 44, 38, 99, 16, 9]) == None\nassert solution.fairCandySwap([17, 12, 83, 11, 34, 78, 63, 32], [78, 34, 60, 12, 82, 44, 52]) == None\nassert solution.fairCandySwap([38, 97, 91, 37, 49, 78, 39], [29, 16, 66, 64, 5, 39, 3]) == None\nassert solution.fairCandySwap([41, 31, 34, 44], [69, 96, 59]) == None\nassert solution.fairCandySwap([45, 61], [66, 97, 22, 16, 63, 71]) == None\nassert solution.fairCandySwap([45, 73, 23, 26, 28, 82, 71, 92], [50, 24, 30, 18, 14, 25, 43]) == None\nassert solution.fairCandySwap([10, 9, 84, 51, 3, 19, 11], [87, 50]) == None\nassert solution.fairCandySwap([75, 79, 73, 28, 98], [14, 5, 83, 86, 53]) == None\nassert solution.fairCandySwap([65, 86, 62, 10, 57], [33, 24]) == None\nassert solution.fairCandySwap([56, 1, 40, 23, 37, 7], [15, 17, 72, 36, 5, 66, 90]) == None\nassert solution.fairCandySwap([86, 10, 33], [10, 20, 9, 100, 47, 26, 46, 96]) == None\nassert solution.fairCandySwap([81, 95, 18, 26, 8, 100, 66, 30, 35, 89], [57, 18, 100]) == None\nassert solution.fairCandySwap([92, 26, 32, 77], [69, 43, 79]) == None\nassert solution.fairCandySwap([11, 48, 82, 52, 7, 42], [98, 63, 96, 93, 76, 100, 58, 5]) == None\nassert solution.fairCandySwap([93, 80, 10, 90, 4, 76, 14, 23, 31, 34], [65, 4, 58]) == None\nassert solution.fairCandySwap([59, 62, 22], [25, 66, 77, 51, 4, 27, 91, 1]) == None\nassert solution.fairCandySwap([93, 19, 89, 24, 75], [65, 40, 45, 10, 33, 86]) == [75, 65]\nassert solution.fairCandySwap([98, 84, 78, 64, 52], [97, 70, 92, 59, 28, 43, 10, 77]) == None\nassert solution.fairCandySwap([85, 93, 84, 25, 62, 74, 16], [54, 51, 33, 69, 74, 12, 49, 78]) == None\nassert solution.fairCandySwap([100, 45, 63], [37, 29, 31, 19]) == None\nassert solution.fairCandySwap([52, 66, 49, 24, 78, 29, 37, 80], [32, 63]) == None\nassert solution.fairCandySwap([6, 13, 58, 64, 59, 85], [75, 46, 61, 1, 45, 14, 37, 64]) == None\nassert solution.fairCandySwap([54, 36, 35, 48, 62, 18], [88, 51]) == None\nassert solution.fairCandySwap([47, 6, 100, 70, 74, 12, 64, 94], [92, 99, 15, 82, 12]) == None\nassert solution.fairCandySwap([86, 77, 66, 80, 91, 95, 27], [10, 92, 45, 47, 61]) == None\nassert solution.fairCandySwap([93, 80, 98, 31, 61, 52, 41, 30, 85], [100, 78, 98, 13, 51]) == None\nassert solution.fairCandySwap([100, 72, 80, 61, 57, 96, 30, 98, 95], [79, 52, 35, 12, 3, 24, 55, 39, 80, 90]) == None\nassert solution.fairCandySwap([28, 99, 61, 9], [13, 79]) == None\nassert solution.fairCandySwap([53, 99, 93, 92, 36], [31, 37, 51, 14, 55, 63, 39, 97]) == None\nassert solution.fairCandySwap([20, 60, 30, 54, 71, 17, 11, 42, 89, 95], [87, 3, 59, 90]) == None\nassert solution.fairCandySwap([60, 1], [57, 68, 93, 24, 46, 80, 9]) == None\nassert solution.fairCandySwap([36, 81], [61, 93, 1, 72, 53]) == None\nassert solution.fairCandySwap([82, 41, 93, 51, 34, 67, 2, 48, 46], [4, 45, 23]) == None\nassert solution.fairCandySwap([83, 18, 16, 92, 97, 40, 59], [18, 31, 54, 91, 35]) == None\nassert solution.fairCandySwap([25, 54, 94], [36, 92, 35, 1, 83, 50, 26, 73, 97]) == None\nassert solution.fairCandySwap([14, 98, 76, 56, 19, 10, 78, 52, 44], [65, 52, 85]) == None\nassert solution.fairCandySwap([10, 52, 77], [74, 65, 31, 1, 87, 73, 22]) == None\nassert solution.fairCandySwap([95, 7, 66, 34, 46], [22, 45, 37, 56]) == [66, 22]\nassert solution.fairCandySwap([89, 1, 77, 35], [26, 48, 56, 14, 77, 73]) == None\nassert solution.fairCandySwap([39, 58, 79, 33, 38, 73, 30], [45, 6, 59]) == None\nassert solution.fairCandySwap([27, 74, 5, 79, 38, 71, 3, 40, 45, 37], [1, 35]) == None\nassert solution.fairCandySwap([86, 65, 45, 61, 81, 53, 79, 56, 5], [51, 25, 24, 71]) == None\nassert solution.fairCandySwap([28, 89, 83], [11, 83, 25, 21]) == None\nassert solution.fairCandySwap([6, 42, 23, 1, 40, 31, 51], [11, 33, 66, 8]) == None\nassert solution.fairCandySwap([45, 48, 60, 75, 17, 88], [59, 30, 86, 54, 69, 45, 82, 15, 85, 35]) == None\nassert solution.fairCandySwap([72, 35], [89, 70, 9, 91, 15, 92, 85]) == None\nassert solution.fairCandySwap([94, 32, 51, 67], [43, 4, 22, 99]) == None\nassert solution.fairCandySwap([1, 42, 81, 95, 10, 2, 87, 74], [66, 32, 15, 14, 22, 39, 64, 89, 58]) == [10, 14]\nassert solution.fairCandySwap([33, 5, 76, 68], [29, 63, 91, 4, 92, 77, 39]) == None\nassert solution.fairCandySwap([2, 89, 30, 14, 77, 43, 48], [43, 18, 52, 79, 6, 27]) == None\nassert solution.fairCandySwap([3, 16, 46, 30, 95, 29, 81, 34, 63, 87], [30, 58, 34, 35, 62, 31, 12, 71, 73]) == None\nassert solution.fairCandySwap([98, 32], [99, 100]) == None\nassert solution.fairCandySwap([36, 70], [14, 43, 44, 67, 85, 60]) == None\nassert solution.fairCandySwap([86, 97, 30, 79, 93, 25, 32, 61, 11], [32, 60, 73, 2, 51, 80, 75]) == None\nassert solution.fairCandySwap([98, 17, 99, 9, 18], [63, 27, 50, 88, 58, 6]) == None",
  "inefficient_solution": "class Solution:\n    def fairCandySwap(self, aliceSizes, bobSizes):\n        def check(a, b):\n            return [a, b] if sum(aliceSizes) - a + b == sum(bobSizes) - b + a else False\n\n        diff = (sum(aliceSizes) - sum(bobSizes)) >> 1\n        result = False\n        for a in aliceSizes:\n            for b in bobSizes:\n                result = check(a, b)\n                if result: break\n            if result: break\n        return result",
  "is_python": true
}