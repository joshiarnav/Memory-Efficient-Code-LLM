{
  "problem_idx": 2953,
  "task_name": "Count Complete Substrings",
  "markdown_description": "\nYou are given a string `word` and an integer `k`.\n\n\nA substring `s` of `word` is **complete** if:\n\n\n* Each character in `s` occurs **exactly** `k` times.\n* The difference between two adjacent characters is **at most** `2`. That is, for any two adjacent characters `c1` and `c2` in `s`, the absolute difference in their positions in the alphabet is **at most** `2`.\n\n\nReturn *the number of **complete** substrings of* `word`.\n\n\nA **substring** is a **non-empty** contiguous sequence of characters in a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"igigee\", k = 2\n**Output:** 3\n**Explanation:** The complete substrings where each character appears exactly twice and the difference between adjacent characters is at most 2 are: **igig**ee, igig**ee**, **igigee**.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"aaabbbccc\", k = 3\n**Output:** 6\n**Explanation:** The complete substrings where each character appears exactly three times and the difference between adjacent characters is at most 2 are: **aaa**bbbccc, aaa**bbb**ccc, aaabbb**ccc**, **aaabbb**ccc, aaa**bbbccc**, **aaabbbccc**.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 105`\n* `word` consists only of lowercase English letters.\n* `1 <= k <= word.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def countCompleteSubstrings(self, word: str, k: int) -> int:\n        def f(s: str) -> int:\n            m = len(s)\n            ans = 0\n            for i in range(1, 27):\n                l = i * k\n                if l > m:\n                    break\n                cnt = Counter(s[:l])\n                freq = Counter(cnt.values())\n                ans += freq[k] == i\n                for j in range(l, m):\n                    freq[cnt[s[j]]] -= 1\n                    cnt[s[j]] += 1\n                    freq[cnt[s[j]]] += 1\n\n                    freq[cnt[s[j - l]]] -= 1\n                    cnt[s[j - l]] -= 1\n                    freq[cnt[s[j - l]]] += 1\n\n                    ans += freq[k] == i\n            return ans\n\n        n = len(word)\n        ans = i = 0\n        while i < n:\n            j = i + 1\n            while j < n and abs(ord(word[j]) - ord(word[j - 1])) <= 2:\n                j += 1\n            ans += f(word[i:j])\n            i = j\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def countCompleteSubstrings(self, word: str, k: int) -> int:\n        def f(s: str) -> int:\n            m = len(s)\n            ans = 0\n            for i in range(1, 27):\n                l = i * k\n                if l > m:\n                    break\n                cnt = Counter(s[:l])\n                freq = Counter(cnt.values())\n                ans += freq[k] == i\n                for j in range(l, m):\n                    freq[cnt[s[j]]] -= 1\n                    cnt[s[j]] += 1\n                    freq[cnt[s[j]]] += 1\n\n                    freq[cnt[s[j - l]]] -= 1\n                    cnt[s[j - l]] -= 1\n                    freq[cnt[s[j - l]]] += 1\n\n                    ans += freq[k] == i\n            return ans\n\n        n = len(word)\n        ans = i = 0\n        while i < n:\n            j = i + 1\n            while j < n and abs(ord(word[j]) - ord(word[j - 1])) <= 2:\n                j += 1\n            ans += f(word[i:j])\n            i = j\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random word\n    word = ''.join(random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(random.randint(1, 11)))\n\n    # Generate a random k\n    k = random.randint(1, len(word))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countCompleteSubstrings(word, k)\n\n    return word, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countCompleteSubstrings(word, k) == expected_result\n        print(f\"assert solution.countCompleteSubstrings('{word}', {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countCompleteSubstrings('{word}', {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countCompleteSubstrings('eahbbyyy', 2) == 3\nassert solution.countCompleteSubstrings('gdtpqrs', 6) == 0\nassert solution.countCompleteSubstrings('rvm', 3) == 0\nassert solution.countCompleteSubstrings('mal', 2) == 0\nassert solution.countCompleteSubstrings('mxcu', 1) == 4\nassert solution.countCompleteSubstrings('eks', 2) == 0\nassert solution.countCompleteSubstrings('hamfegygph', 2) == 0\nassert solution.countCompleteSubstrings('dajyeinb', 5) == 0\nassert solution.countCompleteSubstrings('gump', 2) == 0\nassert solution.countCompleteSubstrings('izjzntltkc', 5) == 0\nassert solution.countCompleteSubstrings('idnwmf', 4) == 0\nassert solution.countCompleteSubstrings('ptzdbt', 6) == 0\nassert solution.countCompleteSubstrings('uojgwje', 4) == 0\nassert solution.countCompleteSubstrings('cpyfkv', 2) == 0\nassert solution.countCompleteSubstrings('wxpardgl', 1) == 9\nassert solution.countCompleteSubstrings('lcww', 1) == 4\nassert solution.countCompleteSubstrings('u', 1) == 1\nassert solution.countCompleteSubstrings('xyrqexdqfwt', 6) == 0\nassert solution.countCompleteSubstrings('ksbri', 1) == 5\nassert solution.countCompleteSubstrings('kjyq', 4) == 0\nassert solution.countCompleteSubstrings('shwppktqevz', 5) == 0\nassert solution.countCompleteSubstrings('olsgmarf', 4) == 0\nassert solution.countCompleteSubstrings('ixhh', 1) == 4\nassert solution.countCompleteSubstrings('umooe', 4) == 0\nassert solution.countCompleteSubstrings('miovhpy', 4) == 0\nassert solution.countCompleteSubstrings('qwa', 2) == 0\nassert solution.countCompleteSubstrings('zfy', 3) == 0\nassert solution.countCompleteSubstrings('cnhnmut', 5) == 0\nassert solution.countCompleteSubstrings('imqmtnd', 4) == 0\nassert solution.countCompleteSubstrings('ukcq', 3) == 0\nassert solution.countCompleteSubstrings('kwltyscyo', 1) == 9\nassert solution.countCompleteSubstrings('haqjno', 6) == 0\nassert solution.countCompleteSubstrings('ce', 1) == 3\nassert solution.countCompleteSubstrings('dkz', 2) == 0\nassert solution.countCompleteSubstrings('ugpc', 4) == 0\nassert solution.countCompleteSubstrings('wbcpoa', 2) == 0\nassert solution.countCompleteSubstrings('rpe', 3) == 0\nassert solution.countCompleteSubstrings('sflcekvcmo', 5) == 0\nassert solution.countCompleteSubstrings('pjzhle', 5) == 0\nassert solution.countCompleteSubstrings('iazy', 1) == 5\nassert solution.countCompleteSubstrings('flnj', 4) == 0\nassert solution.countCompleteSubstrings('simnzaoxo', 2) == 0\nassert solution.countCompleteSubstrings('uupdtksfe', 4) == 0\nassert solution.countCompleteSubstrings('qaqwsncllk', 4) == 0\nassert solution.countCompleteSubstrings('vszcmugyu', 1) == 9\nassert solution.countCompleteSubstrings('ennqmgby', 6) == 0\nassert solution.countCompleteSubstrings('claxd', 3) == 0\nassert solution.countCompleteSubstrings('qembpdgok', 2) == 0\nassert solution.countCompleteSubstrings('y', 1) == 1\nassert solution.countCompleteSubstrings('z', 1) == 1\nassert solution.countCompleteSubstrings('gpf', 2) == 0\nassert solution.countCompleteSubstrings('p', 1) == 1\nassert solution.countCompleteSubstrings('hwtmbqmz', 3) == 0\nassert solution.countCompleteSubstrings('cblouedy', 2) == 0\nassert solution.countCompleteSubstrings('iv', 2) == 0\nassert solution.countCompleteSubstrings('epeere', 1) == 6\nassert solution.countCompleteSubstrings('velcltp', 6) == 0\nassert solution.countCompleteSubstrings('dfssflwil', 5) == 0\nassert solution.countCompleteSubstrings('yqfhdoqxsc', 8) == 0\nassert solution.countCompleteSubstrings('t', 1) == 1\nassert solution.countCompleteSubstrings('io', 2) == 0\nassert solution.countCompleteSubstrings('ijtgwd', 4) == 0\nassert solution.countCompleteSubstrings('tj', 2) == 0\nassert solution.countCompleteSubstrings('cjw', 3) == 0\nassert solution.countCompleteSubstrings('n', 1) == 1\nassert solution.countCompleteSubstrings('nnoub', 5) == 0\nassert solution.countCompleteSubstrings('goqk', 1) == 5\nassert solution.countCompleteSubstrings('pltvo', 2) == 0\nassert solution.countCompleteSubstrings('equfm', 5) == 0\nassert solution.countCompleteSubstrings('xq', 1) == 2\nassert solution.countCompleteSubstrings('qobslkgdij', 10) == 0\nassert solution.countCompleteSubstrings('njtq', 3) == 0\nassert solution.countCompleteSubstrings('xi', 1) == 2\nassert solution.countCompleteSubstrings('w', 1) == 1\nassert solution.countCompleteSubstrings('mmnhhdei', 3) == 0\nassert solution.countCompleteSubstrings('dwkvddas', 5) == 0\nassert solution.countCompleteSubstrings('ug', 2) == 0\nassert solution.countCompleteSubstrings('cpsvnkar', 8) == 0\nassert solution.countCompleteSubstrings('emrxkkd', 7) == 0\nassert solution.countCompleteSubstrings('djainac', 5) == 0\nassert solution.countCompleteSubstrings('gmezas', 4) == 0\nassert solution.countCompleteSubstrings('bzzycumgxe', 5) == 0\nassert solution.countCompleteSubstrings('tbyjuk', 2) == 0\nassert solution.countCompleteSubstrings('khltaal', 6) == 0\nassert solution.countCompleteSubstrings('fgfswkl', 3) == 0\nassert solution.countCompleteSubstrings('oirrnygkgtq', 8) == 0\nassert solution.countCompleteSubstrings('uaaxp', 1) == 5\nassert solution.countCompleteSubstrings('oy', 1) == 2\nassert solution.countCompleteSubstrings('nl', 1) == 3\nassert solution.countCompleteSubstrings('qxerjb', 5) == 0\nassert solution.countCompleteSubstrings('njsdediohb', 7) == 0\nassert solution.countCompleteSubstrings('nljqryc', 6) == 0\nassert solution.countCompleteSubstrings('aebdnmwiu', 6) == 0\nassert solution.countCompleteSubstrings('hc', 2) == 0\nassert solution.countCompleteSubstrings('jkoq', 1) == 6\nassert solution.countCompleteSubstrings('xbfqvdejky', 3) == 0\nassert solution.countCompleteSubstrings('abxkvco', 7) == 0\nassert solution.countCompleteSubstrings('gcbnt', 2) == 0\nassert solution.countCompleteSubstrings('ke', 1) == 2\nassert solution.countCompleteSubstrings('vjzmmk', 5) == 0",
  "inefficient_solution": "class Solution:\n    def countCompleteSubstrings(self, word: str, k: int) -> int:\n        def f(s: str) -> int:\n            ans = 0\n            for i in range(1, 26):\n                for l in range(1, 10000):\n                    if l > len(s):\n                        break\n                    cnt = {}\n                    for j in range(l):\n                        cnt[s[j]] = cnt.get(s[j], 0) + 1\n                    if all(v == k for v in cnt.values()):\n                        valid = True\n                        for j in range(l - 1):\n                            if abs(ord(s[j]) - ord(s[j + 1])) > 2:\n                                valid = False\n                                break\n                        if valid:\n                            ans += 1\n                    if all(v == k for v in cnt.values()):\n                        valid = True\n                        for j in range(l - 1):\n                            if abs(ord(s[l - 1 - j]) - ord(s[l - j - 2])) > 2:\n                                valid = False\n                                break\n                        if valid:\n                            ans += 1\n                for j in range(len(s) - l + 1):\n                    cnt[s[j]] = cnt.get(s[j], 0) - 1\n                    cnt[s[j + l]] = cnt.get(s[j + l], 0) + 1\n                    if all(v == k for v in cnt.values()):\n                        valid = True\n                        for j in range(l - 1):\n                            if abs(ord(s[j]) - ord(s[j + 1])) > 2:\n                                valid = False\n                                break\n                        if valid:\n                            ans += 1\n                    if all(v == k for v in cnt.values()):\n                        valid = True\n                        for j in range(l - 1):\n                            if abs(ord(s[l - 1 - j]) - ord(s[l - j - 2])) > 2:\n                                valid = False\n                                break\n                        if valid:\n                            ans += 1\n            return ans\n\n        n = len(word)\n        ans = 0\n        for i in range(n):\n            j = i + 1\n            while j < n and abs(ord(word[j]) - ord(word[j - 1])) <= 2:\n                j += 1\n            ans += f(word[i:j])\n        return ans",
  "is_python": true
}