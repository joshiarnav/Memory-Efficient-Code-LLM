{
  "problem_idx": 1342,
  "task_name": "Number of Steps to Reduce a Number to Zero",
  "markdown_description": "\nGiven an integer `num`, return *the number of steps to reduce it to zero*.\n\n\nIn one step, if the current number is even, you have to divide it by `2`, otherwise, you have to subtract `1` from it.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 14\n**Output:** 6\n**Explanation:**\u00a0\nStep 1) 14 is even; divide by 2 and obtain 7.\u00a0\nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3.\u00a0\nStep 4) 3 is odd; subtract 1 and obtain 2.\u00a0\nStep 5) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 6) 1 is odd; subtract 1 and obtain 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 8\n**Output:** 4\n**Explanation:**\u00a0\nStep 1) 8 is even; divide by 2 and obtain 4.\u00a0\nStep 2) 4 is even; divide by 2 and obtain 2.\u00a0\nStep 3) 2 is even; divide by 2 and obtain 1.\u00a0\nStep 4) 1 is odd; subtract 1 and obtain 0.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = 123\n**Output:** 12\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= num <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def numberOfSteps(self, num: int) -> int:\n        ans = 0\n        while num:\n            if num & 1:\n                num -= 1\n            else:\n                num >>= 1\n            ans += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfSteps(self, num: int) -> int:\n        ans = 0\n        while num:\n            if num & 1:\n                num -= 1\n            else:\n                num >>= 1\n            ans += 1\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random number\n    num = random.randint(0, 1000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfSteps(num)\n\n    return num, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfSteps(num) == expected_result\n        print(f\"assert solution.numberOfSteps({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfSteps({num}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.numberOfSteps(805037) == 28\nassert solution.numberOfSteps(581875) == 29\nassert solution.numberOfSteps(893330) == 28\nassert solution.numberOfSteps(106611) == 24\nassert solution.numberOfSteps(906307) == 29\nassert solution.numberOfSteps(91395) == 23\nassert solution.numberOfSteps(719994) == 32\nassert solution.numberOfSteps(446014) == 30\nassert solution.numberOfSteps(28720) == 19\nassert solution.numberOfSteps(453340) == 30\nassert solution.numberOfSteps(98827) == 22\nassert solution.numberOfSteps(322304) == 25\nassert solution.numberOfSteps(720686) == 33\nassert solution.numberOfSteps(144683) == 26\nassert solution.numberOfSteps(985941) == 30\nassert solution.numberOfSteps(881209) == 30\nassert solution.numberOfSteps(378968) == 26\nassert solution.numberOfSteps(987429) == 28\nassert solution.numberOfSteps(48662) == 24\nassert solution.numberOfSteps(372579) == 30\nassert solution.numberOfSteps(317416) == 29\nassert solution.numberOfSteps(924620) == 30\nassert solution.numberOfSteps(816240) == 28\nassert solution.numberOfSteps(350326) == 28\nassert solution.numberOfSteps(329156) == 25\nassert solution.numberOfSteps(464849) == 29\nassert solution.numberOfSteps(95352) == 25\nassert solution.numberOfSteps(75639) == 27\nassert solution.numberOfSteps(203066) == 26\nassert solution.numberOfSteps(712691) == 34\nassert solution.numberOfSteps(93445) == 24\nassert solution.numberOfSteps(925130) == 30\nassert solution.numberOfSteps(340255) == 28\nassert solution.numberOfSteps(990507) == 31\nassert solution.numberOfSteps(51808) == 21\nassert solution.numberOfSteps(982507) == 35\nassert solution.numberOfSteps(9716) == 21\nassert solution.numberOfSteps(417117) == 30\nassert solution.numberOfSteps(77459) == 25\nassert solution.numberOfSteps(112300) == 26\nassert solution.numberOfSteps(638914) == 31\nassert solution.numberOfSteps(278708) == 24\nassert solution.numberOfSteps(673282) == 25\nassert solution.numberOfSteps(713726) == 33\nassert solution.numberOfSteps(114451) == 27\nassert solution.numberOfSteps(835266) == 30\nassert solution.numberOfSteps(310392) == 28\nassert solution.numberOfSteps(713790) == 30\nassert solution.numberOfSteps(937263) == 31\nassert solution.numberOfSteps(18876) == 22\nassert solution.numberOfSteps(223615) == 30\nassert solution.numberOfSteps(412570) == 28\nassert solution.numberOfSteps(923038) == 30\nassert solution.numberOfSteps(70864) == 22\nassert solution.numberOfSteps(67727) == 23\nassert solution.numberOfSteps(370767) == 28\nassert solution.numberOfSteps(146172) == 28\nassert solution.numberOfSteps(30425) == 24\nassert solution.numberOfSteps(186781) == 28\nassert solution.numberOfSteps(838580) == 30\nassert solution.numberOfSteps(954474) == 28\nassert solution.numberOfSteps(252771) == 29\nassert solution.numberOfSteps(905182) == 34\nassert solution.numberOfSteps(798798) == 27\nassert solution.numberOfSteps(273480) == 24\nassert solution.numberOfSteps(973126) == 30\nassert solution.numberOfSteps(853975) == 31\nassert solution.numberOfSteps(301321) == 25\nassert solution.numberOfSteps(695322) == 28\nassert solution.numberOfSteps(729083) == 34\nassert solution.numberOfSteps(414405) == 27\nassert solution.numberOfSteps(726036) == 26\nassert solution.numberOfSteps(41948) == 24\nassert solution.numberOfSteps(191649) == 26\nassert solution.numberOfSteps(321078) == 28\nassert solution.numberOfSteps(763724) == 30\nassert solution.numberOfSteps(611672) == 28\nassert solution.numberOfSteps(686040) == 31\nassert solution.numberOfSteps(455343) == 31\nassert solution.numberOfSteps(955419) == 29\nassert solution.numberOfSteps(523400) == 29\nassert solution.numberOfSteps(14154) == 21\nassert solution.numberOfSteps(927187) == 30\nassert solution.numberOfSteps(379413) == 27\nassert solution.numberOfSteps(483098) == 30\nassert solution.numberOfSteps(245330) == 28\nassert solution.numberOfSteps(325370) == 31\nassert solution.numberOfSteps(136723) == 24\nassert solution.numberOfSteps(174822) == 27\nassert solution.numberOfSteps(877002) == 29\nassert solution.numberOfSteps(374401) == 27\nassert solution.numberOfSteps(195368) == 27\nassert solution.numberOfSteps(85542) == 24\nassert solution.numberOfSteps(250070) == 27\nassert solution.numberOfSteps(139455) == 26\nassert solution.numberOfSteps(208825) == 29\nassert solution.numberOfSteps(763717) == 30\nassert solution.numberOfSteps(920465) == 28\nassert solution.numberOfSteps(370847) == 29\nassert solution.numberOfSteps(920374) == 29",
  "inefficient_solution": "class Solution:\n    def numberOfSteps(self, num: int) -> int:\n        steps = []\n        while num:\n            if num % 2 == 0:\n                steps.append(num)\n                num = num // 2\n            else:\n                steps.append(num)\n                num -= 1\n        return len(steps)",
  "is_python": true
}