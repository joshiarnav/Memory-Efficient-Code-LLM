{
  "problem_idx": 779,
  "task_name": "K",
  "markdown_description": "\nWe build a table of `n` rows (**1-indexed**). We start by writing `0` in the `1st` row. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`.\n\n\n* For example, for `n = 3`, the `1st` row is `0`, the `2nd` row is `01`, and the `3rd` row is `0110`.\n\n\nGiven two integer `n` and `k`, return the `kth` (**1-indexed**) symbol in the `nth` row of a table of `n` rows.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 1, k = 1\n**Output:** 0\n**Explanation:** row 1: 0\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 2, k = 1\n**Output:** 0\n**Explanation:** \nrow 1: 0\nrow 2: 01\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 2, k = 2\n**Output:** 1\n**Explanation:** \nrow 1: 0\nrow 2: 01\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 30`\n* `1 <= k <= 2n - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def kthGrammar(self, n: int, k: int) -> int:\n        return (k - 1).bit_count() & 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def kthGrammar(self, n: int, k: int) -> int:\n        return (k - 1).bit_count() & 1\n\ndef generate_test_case():\n    solution = Solution()\n\n    n = random.randint(1, 30)\n    k = random.randint(1, 2**(n-1))\n\n    expected_result = solution.kthGrammar(n, k)\n\n    return n, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        n, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.kthGrammar(n, k) == expected_result\n        test_case_generator_results.append(f\"assert solution.kthGrammar({n}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.kthGrammar(16, 18002) == 0\nassert solution.kthGrammar(26, 27523866) == 1\nassert solution.kthGrammar(24, 1093153) == 1\nassert solution.kthGrammar(22, 659360) == 0\nassert solution.kthGrammar(6, 8) == 1\nassert solution.kthGrammar(4, 3) == 1\nassert solution.kthGrammar(23, 1470355) == 0\nassert solution.kthGrammar(27, 33660026) == 1\nassert solution.kthGrammar(9, 243) == 1\nassert solution.kthGrammar(17, 17093) == 1\nassert solution.kthGrammar(4, 2) == 1\nassert solution.kthGrammar(13, 1695) == 1\nassert solution.kthGrammar(26, 24399833) == 0\nassert solution.kthGrammar(1, 1) == 0\nassert solution.kthGrammar(2, 2) == 1\nassert solution.kthGrammar(13, 3401) == 1\nassert solution.kthGrammar(4, 8) == 1\nassert solution.kthGrammar(24, 3554483) == 0\nassert solution.kthGrammar(24, 666701) == 0\nassert solution.kthGrammar(1, 1) == 0\nassert solution.kthGrammar(22, 467462) == 1\nassert solution.kthGrammar(21, 167929) == 1\nassert solution.kthGrammar(16, 7953) == 0\nassert solution.kthGrammar(9, 22) == 1\nassert solution.kthGrammar(11, 317) == 1\nassert solution.kthGrammar(8, 15) == 1\nassert solution.kthGrammar(10, 326) == 0\nassert solution.kthGrammar(30, 62828693) == 0\nassert solution.kthGrammar(3, 3) == 1\nassert solution.kthGrammar(11, 590) == 1\nassert solution.kthGrammar(19, 54660) == 0\nassert solution.kthGrammar(23, 364228) == 0\nassert solution.kthGrammar(25, 7523577) == 1\nassert solution.kthGrammar(28, 86587616) == 1\nassert solution.kthGrammar(9, 89) == 1\nassert solution.kthGrammar(30, 247860610) == 0\nassert solution.kthGrammar(21, 539637) == 1\nassert solution.kthGrammar(2, 1) == 0\nassert solution.kthGrammar(22, 1037454) == 0\nassert solution.kthGrammar(19, 62329) == 0\nassert solution.kthGrammar(1, 1) == 0\nassert solution.kthGrammar(8, 4) == 0\nassert solution.kthGrammar(10, 191) == 0\nassert solution.kthGrammar(17, 43017) == 0\nassert solution.kthGrammar(6, 30) == 0\nassert solution.kthGrammar(19, 148604) == 1\nassert solution.kthGrammar(24, 1236648) == 1\nassert solution.kthGrammar(19, 115054) == 1\nassert solution.kthGrammar(19, 105296) == 1\nassert solution.kthGrammar(9, 12) == 1\nassert solution.kthGrammar(4, 1) == 0\nassert solution.kthGrammar(29, 251865081) == 1\nassert solution.kthGrammar(5, 6) == 0\nassert solution.kthGrammar(24, 2989153) == 0\nassert solution.kthGrammar(22, 1727935) == 0\nassert solution.kthGrammar(9, 31) == 0\nassert solution.kthGrammar(26, 21270380) == 1\nassert solution.kthGrammar(10, 114) == 0\nassert solution.kthGrammar(26, 9801633) == 1\nassert solution.kthGrammar(10, 150) == 0\nassert solution.kthGrammar(23, 2048019) == 0\nassert solution.kthGrammar(17, 59627) == 1\nassert solution.kthGrammar(28, 60487997) == 0\nassert solution.kthGrammar(30, 22752545) == 1\nassert solution.kthGrammar(22, 1613998) == 1\nassert solution.kthGrammar(26, 18877359) == 0\nassert solution.kthGrammar(14, 7911) == 1\nassert solution.kthGrammar(12, 632) == 1\nassert solution.kthGrammar(25, 15139280) == 1\nassert solution.kthGrammar(20, 215189) == 1\nassert solution.kthGrammar(29, 163818094) == 1\nassert solution.kthGrammar(4, 6) == 0\nassert solution.kthGrammar(14, 2064) == 1\nassert solution.kthGrammar(25, 7882199) == 0\nassert solution.kthGrammar(8, 22) == 1\nassert solution.kthGrammar(10, 161) == 0\nassert solution.kthGrammar(10, 269) == 1\nassert solution.kthGrammar(28, 61416600) == 1\nassert solution.kthGrammar(20, 180684) == 1\nassert solution.kthGrammar(18, 26670) == 1\nassert solution.kthGrammar(10, 365) == 1\nassert solution.kthGrammar(25, 2077078) == 1\nassert solution.kthGrammar(23, 3732159) == 0\nassert solution.kthGrammar(14, 971) == 0\nassert solution.kthGrammar(22, 1295220) == 0\nassert solution.kthGrammar(20, 96874) == 0\nassert solution.kthGrammar(20, 35489) == 1\nassert solution.kthGrammar(28, 120286803) == 1\nassert solution.kthGrammar(15, 9731) == 0\nassert solution.kthGrammar(2, 2) == 1\nassert solution.kthGrammar(22, 1096424) == 0\nassert solution.kthGrammar(16, 16751) == 1\nassert solution.kthGrammar(18, 93894) == 0\nassert solution.kthGrammar(3, 4) == 0\nassert solution.kthGrammar(28, 98345534) == 1\nassert solution.kthGrammar(17, 13335) == 0\nassert solution.kthGrammar(25, 3874699) == 1\nassert solution.kthGrammar(30, 384071789) == 1\nassert solution.kthGrammar(27, 29723916) == 0\nassert solution.kthGrammar(28, 1209449) == 1",
  "inefficient_solution": "class Solution:\n    def kthGrammar(self, n: int, k: int) -> int:\n        table = []\n        for i in range(n):\n            row = ['0'] * (2 ** i)\n            table.append(row)\n        for i in range(n - 1, -1, -1):\n            for j in range(2 ** i):\n                if j % 2 == 0:\n                    table[i][j] = '0'\n                else:\n                    table[i][j] = '1'\n        for i in range(len(table) - 1, -1, -1):\n            row = ''.join(table[i])\n            if k <= len(row):\n                return int(row[k - 1])\n            k -= len(row)",
  "is_python": true
}