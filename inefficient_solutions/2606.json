{
  "problem_idx": 2606,
  "task_name": "Find the Substring With Maximum Cost",
  "markdown_description": "\nYou are given a string `s`, a string `chars` of **distinct** characters and an integer array `vals` of the same length as `chars`.\n\n\nThe **cost of the substring** is the sum of the values of each character in the substring. The cost of an empty string is considered `0`.\n\n\nThe **value of the character** is defined in the following way:\n\n\n* If the character is not in the string `chars`, then its value is its corresponding position **(1-indexed)** in the alphabet.\n\t+ For example, the value of `'a'` is `1`, the value of `'b'` is `2`, and so on. The value of `'z'` is `26`.\n* Otherwise, assuming `i` is the index where the character occurs in the string `chars`, then its value is `vals[i]`.\n\n\nReturn *the maximum cost among all substrings of the string* `s`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"adaa\", chars = \"d\", vals = [-1000]\n**Output:** 2\n**Explanation:** The value of the characters \"a\" and \"d\" is 1 and -1000 respectively.\nThe substring with the maximum cost is \"aa\" and its cost is 1 + 1 = 2.\nIt can be proven that 2 is the maximum cost.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abc\", chars = \"abc\", vals = [-1,-1,-1]\n**Output:** 0\n**Explanation:** The value of the characters \"a\", \"b\" and \"c\" is -1, -1, and -1 respectively.\nThe substring with the maximum cost is the empty substring \"\" and its cost is 0.\nIt can be proven that 0 is the maximum cost.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s` consist of lowercase English letters.\n* `1 <= chars.length <= 26`\n* `chars` consist of **distinct** lowercase English letters.\n* `vals.length == chars.length`\n* `-1000 <= vals[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:\n        d = {c: v for c, v in zip(chars, vals)}\n        ans = f = 0\n        for c in s:\n            v = d.get(c, ord(c) - ord('a') + 1)\n            f = max(f, 0) + v\n            ans = max(ans, f)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:\n        d = {c: v for c, v in zip(chars, vals)}\n        ans = f = 0\n        for c in s:\n            v = d.get(c, ord(c) - ord('a') + 1)\n            f = max(f, 0) + v\n            ans = max(ans, f)\n        return ans\n      \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = \"\".join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    \n    # Generate random chars\n    chars = random.sample(string.ascii_lowercase, random.randint(1, 26))\n    \n    # Generate vals using chars\n    vals = [random.randint(-1000, 1000) for _ in range(len(chars))]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumCostSubstring(s, chars, vals)\n\n    return s, chars, vals, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, chars, vals, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumCostSubstring(s, chars, vals) == expected_result\n        print(f\"assert solution.maximumCostSubstring('{s}', '{chars}', {vals}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumCostSubstring('{s}', '{chars}', {vals}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumCostSubstring('vwpgvlki', '['c', 'p', 'j', 'n', 'h', 'r', 'z', 's', 'e', 'i']', [-977, 152, 375, -75, -458, 289, -736, -856, 127, 948]) == 1197\nassert solution.maximumCostSubstring('dhcjko', '['x', 'e', 'j', 'b', 'd', 't', 'w', 'r', 'n', 'a', 'l', 'c', 'g', 'k', 'v', 'i', 'y', 'q', 'p', 'z', 'h', 'f']', [664, 816, 715, 760, -215, -214, -635, 506, -223, -5, 6, -273, -180, -716, 687, -658, -340, -469, -597, -335, 118, 746]) == 715\nassert solution.maximumCostSubstring('xybnhjteb', '['b', 'd', 'o', 'i', 'j', 'l', 'g', 'k', 'h', 'a']', [145, -422, -9, 276, -730, 794, -466, -545, -287, 120]) == 208\nassert solution.maximumCostSubstring('hyhbrs', '['m', 'a', 'g', 'r', 'y', 's', 'x', 'o', 'd', 'e', 'k', 'w', 'c', 'p', 'b', 'z', 'i', 'u', 'l', 't', 'n', 'v', 'j', 'f', 'h']', [-69, 259, 578, -839, -74, 350, -262, 426, -67, -853, -283, 137, -751, -800, 620, 240, -630, -601, -594, 862, 770, -104, 23, -224, -432]) == 620\nassert solution.maximumCostSubstring('uyt', '['j', 'v', 'o', 'i', 'b', 'n', 'y']', [182, 631, -403, -376, -472, -464, -425]) == 21\nassert solution.maximumCostSubstring('q', '['f', 'c', 'n', 'p', 'u', 'd', 'k', 'v', 'h', 'o', 't', 'w', 'i', 'g', 'q', 'l']', [923, -460, -460, -168, 544, -332, 719, -170, 122, 957, -69, 685, -851, 553, -215, -841]) == 0\nassert solution.maximumCostSubstring('yecgzedlq', '['u', 'n', 'm']', [45, -636, -376]) == 104\nassert solution.maximumCostSubstring('d', '['n', 'j', 'm', 'q', 'v', 'b', 'l', 'u', 'f', 'x', 'y', 'z', 'd']', [-79, 4, 211, -593, 713, 140, -637, -751, 766, 374, 448, -635, -329]) == 0\nassert solution.maximumCostSubstring('rukz', '['o', 'p', 'x', 'c', 't', 'k', 'y', 'l', 'e', 'j', 'f', 'z', 'b', 'w', 'd', 's', 'q', 'i', 'u', 'm', 'n', 'v']', [-464, -307, -732, 700, -352, -508, 153, -8, -850, -456, -14, 287, 560, 77, 722, 3, 374, -541, 375, -654, 477, -791]) == 393\nassert solution.maximumCostSubstring('talfhnui', '['l', 't', 'd', 'm', 'i', 'n', 'h', 'c', 'u', 'f', 'v', 's', 'b', 'a', 'w', 'o', 'e', 'j', 'g', 'p', 'q', 'r', 'x', 'k']', [156, -621, -83, 528, 841, 579, -989, 426, -716, -850, 155, -167, -781, 136, -403, -380, 997, -690, -391, -69, -746, -808, -164, -362]) == 841\nassert solution.maximumCostSubstring('z', '['o', 'j', 'v', 'y', 'w', 'l', 'p']', [-572, 946, 482, 749, -653, -730, -117]) == 26\nassert solution.maximumCostSubstring('ffnpe', '['t', 'z', 'p', 'd', 'o', 'n', 'x', 'i', 'h', 'w', 'q', 'l', 'u', 'f', 'r', 'j', 'c', 'v', 'b']', [754, 448, -912, -334, 852, 768, 479, -27, 262, -146, -278, -860, -190, 375, 880, -317, 648, 641, 306]) == 1518\nassert solution.maximumCostSubstring('z', '['v', 'n', 'y', 'u', 'f', 'k', 'i', 'e', 'h', 's', 'm', 'r', 'g', 'd']', [668, -979, -993, 491, -93, 448, -964, -149, -460, 857, 388, 209, -535, 56]) == 26\nassert solution.maximumCostSubstring('cpjdgswp', '['j', 'o', 'f', 'v', 'p', 'm', 'y', 't', 'r', 'c', 'i', 'a', 'z', 'k', 'e']', [-519, 16, -281, 247, 703, 236, -791, 61, -429, 590, -780, 106, -730, 414, 42]) == 1530\nassert solution.maximumCostSubstring('hnh', '['h', 'u']', [-742, -630]) == 14\nassert solution.maximumCostSubstring('k', '['r', 'w', 'u']', [559, -7, 269]) == 11\nassert solution.maximumCostSubstring('tqiknyvhi', '['l', 'y', 'b', 'z', 'h', 'x', 'f', 'o', 'k', 'd']', [-30, -264, -625, 387, -301, -210, -354, 194, -904, 973]) == 46\nassert solution.maximumCostSubstring('egzi', '['s', 'r', 'q', 'k', 'o', 't', 'n', 'g', 'e', 'x', 'b', 'w', 'd', 'a', 'y', 'v', 'u', 'z', 'i', 'j', 'c', 'p', 'h']', [-480, 588, 949, -996, -107, -387, 388, -999, -262, -522, -468, -277, -237, 569, 225, 958, -911, -480, -191, 926, -142, 14, -340]) == 0\nassert solution.maximumCostSubstring('zv', '['p', 'm', 'x']', [715, -880, 929]) == 48\nassert solution.maximumCostSubstring('wbx', '['n']', [521]) == 49\nassert solution.maximumCostSubstring('dhuetfx', '['o', 'm', 'a', 'e', 'j', 'q', 'z', 's', 'b', 'g', 'w', 'x', 'f', 'i', 't', 'k', 'd', 'l', 'p', 'r', 'c', 'u', 'h', 'n', 'v']', [-857, 150, -62, 493, -428, 199, 445, -438, -122, -382, 63, 186, -526, -287, 494, 930, 547, 481, -478, -699, -549, -434, 108, 761, -676]) == 1208\nassert solution.maximumCostSubstring('jadt', '['p', 's', 'z', 'j', 'a', 'y', 'q', 'n', 'x', 'c', 'm', 'v', 't', 'd', 'h', 'i', 'u', 'o', 'r', 'f', 'b', 'w', 'e']', [-98, -708, 806, -871, 955, 428, 475, 172, -656, 679, 469, -20, 915, -198, -161, 551, -552, -76, 280, 970, -543, 273, -970]) == 1672\nassert solution.maximumCostSubstring('h', '['m', 'b', 'e', 'h', 'w', 's', 'q', 'd']', [-784, -337, -941, -315, 413, 624, -405, 427]) == 0\nassert solution.maximumCostSubstring('iltfvdet', '['q', 'g', 'p', 'e', 'l', 'j', 'n', 'f', 'r', 's', 'o', 'b', 'h']', [342, -886, 717, 296, -349, -228, 385, 837, -700, -696, -661, 97, -960]) == 1199\nassert solution.maximumCostSubstring('xedtyn', '['f', 'v', 'a', 'c', 'r', 'h', 'p', 's', 'e', 'l', 'q', 'z', 'i', 'k', 'o', 'd', 'y', 'n', 'w', 'b', 't', 'g']', [-19, 318, 146, -335, -213, -268, 509, 858, 658, 172, -540, -197, 0, 462, 686, -999, 423, 250, 131, -358, 442, 570]) == 1115\nassert solution.maximumCostSubstring('lgnfmo', '['g', 'r', 'e', 'a', 'k', 'z', 'w', 'y', 'p', 'q', 't', 'j', 'n', 'd']', [694, -300, 804, -10, -472, 640, 312, 16, -290, -730, 881, 665, 245, -212]) == 985\nassert solution.maximumCostSubstring('wa', '['v', 'r', 'f', 'e', 'h', 's', 'i', 'w', 'd', 'q', 'z', 'n', 'u', 'b']', [431, -687, -627, 419, -611, -613, 839, 50, -217, 996, 610, 581, -72, -127]) == 51\nassert solution.maximumCostSubstring('tfyldywyul', '['d', 'g', 'u', 'j', 'k', 's', 'b', 'n', 'm', 'l', 'v', 'r', 'a', 'y', 'f', 'w', 'c', 'h', 't', 'o', 'e', 'p', 'i']', [270, 392, 82, 676, 232, 369, -289, -110, -841, -49, -557, -898, -669, -32, 507, -651, -506, 520, -899, -917, 992, 624, -116]) == 696\nassert solution.maximumCostSubstring('cjgclavxba', '['r', 'g', 'p', 'i', 'c', 'j', 'd', 'z', 'e', 'q']', [-957, 759, -518, 920, -547, -391, -636, -985, -634, -273]) == 759\nassert solution.maximumCostSubstring('kpkbidr', '['b', 'h', 'u', 'z', 'f', 'n', 'r', 'i', 'a', 'k']', [-14, 993, 971, 56, 480, 797, 770, -51, -141, 659]) == 2043\nassert solution.maximumCostSubstring('z', '['j', 'm', 'x', 't', 'r', 'd', 'e', 'o', 'k', 'n']', [594, 132, 53, -955, 515, 393, 930, -853, -248, -371]) == 26\nassert solution.maximumCostSubstring('vvgdyg', '['o', 'r']', [-224, -432]) == 87\nassert solution.maximumCostSubstring('tfdwypr', '['p', 'b', 'u', 'y', 'n', 'j', 'x', 'r', 'w', 'm', 'i', 'd', 'c', 'l', 'g', 'e', 'q', 'v', 's', 'o', 't', 'a', 'z', 'h', 'k', 'f']', [717, 345, -967, -165, -217, -317, 678, 342, -394, -987, 873, 46, -944, -677, -589, 801, -94, 499, 615, 182, 587, 11, 46, -143, -839, -559]) == 1059\nassert solution.maximumCostSubstring('wnyjbxbo', '['g', 'y', 'f', 'o', 'x', 'q', 'l', 'v', 'm', 'z', 'c', 'u', 'n', 'd']', [702, 925, -690, 683, -615, -251, 72, -91, -74, 611, 983, -42, 971, -337]) == 2001\nassert solution.maximumCostSubstring('xdh', '['l', 'r', 'z', 'y', 'w', 'u', 'i', 'n', 'e', 't', 'f', 'k', 'b', 'q', 'c', 'x', 'o', 'a', 'g', 'd', 'm', 'j', 'h', 's', 'v']', [-970, -260, 988, 792, 820, 265, 628, 636, 93, 629, 469, 64, 573, -916, 658, -777, -336, -719, 543, -425, 238, -532, -345, -95, 229]) == 0\nassert solution.maximumCostSubstring('zpqvwseoxk', '['y', 'e', 'g', 'r', 'x', 'o', 'd', 'm', 'b', 'v', 'c', 'l', 'p', 'z', 'h', 'a', 'i', 'n', 's', 'j', 'q', 'k', 'w', 't']', [896, 492, 923, 219, -135, 421, 917, 542, -357, -800, 217, -860, 666, -508, 495, -168, -963, -319, 602, -875, -232, 179, -621, -721]) == 1559\nassert solution.maximumCostSubstring('exph', '['k', 'c', 'u', 'l', 'h', 'b', 'y']', [248, -382, 247, 724, -818, 787, 417]) == 45\nassert solution.maximumCostSubstring('uqths', '['p', 'z']', [507, -612]) == 85\nassert solution.maximumCostSubstring('qvtsvrelix', '['e', 'j', 'o', 'y', 'b', 'i']', [-459, 675, -595, -392, -246, -952]) == 118\nassert solution.maximumCostSubstring('shabj', '['e', 'g', 'a', 'n']', [-814, -288, 183, 618]) == 222\nassert solution.maximumCostSubstring('jzzrhr', '['g', 't', 'o', 'q', 'd', 'l', 'n', 'z', 'a', 'm', 'b', 'r', 'i', 'y', 'u']', [907, -158, -481, -773, 757, -356, 111, -49, 228, 639, -844, -748, 303, 765, -724]) == 10\nassert solution.maximumCostSubstring('xzjgqit', '['i', 'v', 'd', 't', 'n', 'u', 'g']', [-755, 283, -972, 140, -919, -848, -777]) == 140\nassert solution.maximumCostSubstring('wgx', '['z', 'f']', [516, 907]) == 54\nassert solution.maximumCostSubstring('jbnxewj', '['o', 'e', 'c', 't', 'f']', [347, -587, -468, -181, 781]) == 50\nassert solution.maximumCostSubstring('ljefvop', '['b', 'x', 'k', 'j', 'e', 'r', 'z', 'q', 'a', 'g', 'm', 'i', 'u', 'o', 'p', 'f', 'd', 'l']', [163, 63, 994, -306, 81, -555, -368, -447, -959, -465, 81, 957, 193, -510, 869, -727, -28, 808]) == 869\nassert solution.maximumCostSubstring('v', '['u', 'x', 'p', 'e', 'b', 'o', 'l', 'h', 'v', 'q', 'f', 'z']', [871, 300, -290, 512, -283, -423, -369, 540, 722, -633, 656, -816]) == 722\nassert solution.maximumCostSubstring('iq', '['e', 'q', 'r', 'y', 'j', 'u', 's', 'g', 'h', 'z', 'w', 'l']', [-930, 915, -965, 733, -990, -326, -980, 145, -865, 588, -456, 138]) == 924\nassert solution.maximumCostSubstring('mqiysoja', '['t', 'a', 'n', 'f', 'm', 'x', 'h', 's', 'b', 'u', 'y', 'p', 'r', 'c', 'i', 'e', 'z', 'q', 'g', 'd', 'v', 'j']', [7, -416, -363, 415, -446, 71, 914, 502, -291, 468, 142, -528, 67, -539, 621, 963, -209, -131, -878, 456, 285, -565]) == 1280\nassert solution.maximumCostSubstring('l', '['b']', [-588]) == 12\nassert solution.maximumCostSubstring('hybifyiy', '['p', 'z', 'o', 's', 'v', 'x', 'u', 'k', 'l']', [-496, -96, -760, -377, -558, 946, 305, -604, 182]) == 109\nassert solution.maximumCostSubstring('swey', '['z', 'r']', [669, -846]) == 72\nassert solution.maximumCostSubstring('itvcoutq', '['r', 'a', 's', 'c', 'f', 'w', 'm', 'h', 'b', 'g', 'l', 'i', 'y', 'k', 'o', 'u', 'p', 'v', 'q']', [734, -603, 318, -141, 383, 369, 189, 688, -939, 579, 552, 582, -806, -246, -580, 879, 530, -396, 737]) == 1636\nassert solution.maximumCostSubstring('gim', '['n', 'j', 'r', 'u', 'd', 'z', 'y', 'l', 'f', 'o', 'e', 'x']', [-612, 884, 294, 415, 223, 466, 137, -572, 660, 843, 234, -141]) == 29\nassert solution.maximumCostSubstring('iisact', '['z']', [106]) == 61\nassert solution.maximumCostSubstring('vhzu', '['d', 'm', 'o', 'z', 'g', 'w', 'i', 'a']', [-759, -320, 115, -498, -824, 125, 984, 373]) == 30\nassert solution.maximumCostSubstring('mweuct', '['z', 'g', 'i', 'b', 's', 'f', 'j', 'n', 'a', 'm', 'c', 'x', 'p', 'r', 'h', 'v', 'l']', [418, 718, 16, 388, 895, -283, -712, -556, 278, -980, -952, 930, 909, 45, -175, -749, 593]) == 49\nassert solution.maximumCostSubstring('ljrbfwuvd', '['g', 'm', 't', 'r', 'l', 'd', 'j', 'q', 'v', 'i', 'w']', [696, 563, 123, -254, 126, 440, -416, -435, -652, -930, 22]) == 440\nassert solution.maximumCostSubstring('srysjsy', '['b']', [-276]) == 135\nassert solution.maximumCostSubstring('ufybdhbkw', '['h', 'i', 'p', 'e', 'y', 't', 'w', 'a']', [915, 314, -159, -391, 363, -833, 617, 487]) == 1941\nassert solution.maximumCostSubstring('ckzla', '['a', 'k', 'c', 'x', 'y', 'd', 'p', 't', 'b', 'o', 'h', 'u', 'q', 'l', 'f', 'e', 'z', 'g', 'i', 's', 'r']', [893, 643, -334, 956, 182, -81, -217, -623, 74, 483, 797, 277, -734, -613, -781, -158, -273, -934, 0, -377, 765]) == 893\nassert solution.maximumCostSubstring('a', '['l', 'i', 'h', 'd', 't', 'm', 'x', 'e', 'g', 'y', 'f', 'o', 'q', 'j', 'r', 'c', 'p', 'z', 'v']', [-747, -875, -481, 347, 961, -8, 46, -626, -372, -906, -835, 713, -173, 678, 311, -33, -593, -309, 462]) == 1\nassert solution.maximumCostSubstring('pscqkf', '['h', 's', 'w', 'v', 'q', 'r', 'n']', [-602, -357, -849, -374, 640, 991, 484]) == 660\nassert solution.maximumCostSubstring('zfu', '['p', 'f', 'i', 'z', 'b', 'y', 'r', 'l', 'a', 't', 'u', 'j', 'x', 's', 'k', 'w', 'h', 'v', 'e', 'q', 'g', 'o', 'm']', [586, 270, 530, 587, -962, -58, -510, -730, -420, -898, -30, 872, 476, 179, 38, 986, 469, 43, 358, -355, -171, 41, 995]) == 857\nassert solution.maximumCostSubstring('wbem', '['p']', [-179]) == 43\nassert solution.maximumCostSubstring('fvm', '['d', 'u', 'f', 't', 'k', 'l', 'q', 'z', 'r']', [88, 124, -131, 895, 449, 773, 93, 727, 602]) == 35\nassert solution.maximumCostSubstring('lmi', '['z', 'm', 'h', 'j', 'n', 'p', 'w', 's', 'o', 'e', 'i', 'r', 'u', 'b', 'q', 'l', 'v', 'a', 'f', 'd', 'x']', [125, -431, 950, 336, -914, -346, -839, -65, -680, -769, -342, 669, 404, 672, -63, 320, 825, 731, -535, -946, -846]) == 320\nassert solution.maximumCostSubstring('nnnmfmj', '['z', 'c', 'x', 'y', 'w', 'f', 'b', 'a', 'r', 'e', 'k', 'j', 'u', 'q']', [-144, -583, 800, 795, -13, -119, 117, -443, 326, -313, -985, 965, 722, 410]) == 978\nassert solution.maximumCostSubstring('i', '['n', 'h', 'x']', [-200, 326, 322]) == 9\nassert solution.maximumCostSubstring('kgqnmpqahn', '['u', 'n', 'o', 't', 'c', 'f', 's', 'p', 'g']', [761, 550, 465, 950, -790, -751, 38, -281, 205]) == 1091\nassert solution.maximumCostSubstring('rd', '['f', 'r', 'z', 'e', 'u', 'p', 'd', 'h', 's', 'k', 'j', 'y', 'o', 'q', 'x', 'b', 'i', 't', 'c', 'l', 'n', 'v', 'w']', [860, 88, 387, 717, -315, 748, -404, 493, -720, -544, 925, 525, -56, 288, -891, 31, 932, -123, -382, 493, 883, -970, 510]) == 88\nassert solution.maximumCostSubstring('nhnsydqp', '['x', 'q', 'l', 'p', 'v', 'y', 'f', 'h']', [-922, 972, 719, 932, -931, 875, 481, 597]) == 3427\nassert solution.maximumCostSubstring('c', '['g', 'c', 'n', 'x', 'k', 'z', 'w', 'q', 'e', 'b', 't', 'l', 'a', 'f', 's', 'd', 'j', 'i', 'h', 'r', 'y', 'v']', [212, 656, 665, -987, 735, -81, 568, -135, -744, -930, 733, 323, 813, -629, -789, -705, 425, 883, -358, 736, 100, -164]) == 656\nassert solution.maximumCostSubstring('magwszb', '['x', 'i', 'e', 'd', 'j', 'z', 'u', 'y', 't', 'k', 'g', 'h', 'a', 'l', 'p', 'v', 'r', 'f', 's', 'b', 'o']', [-979, 64, -438, 296, 601, 617, -802, 582, -659, -848, -701, 418, -457, 793, -925, -568, -717, 516, -469, -308, -993]) == 617\nassert solution.maximumCostSubstring('ry', '['n', 'y', 'd', 'q', 'k', 'h', 'f']', [350, 423, -494, 904, -877, -34, -70]) == 441\nassert solution.maximumCostSubstring('runymv', '['o', 'u', 'r', 'j', 'w', 'k', 'p', 'm', 'y', 's', 'q', 'l', 'i', 'f', 'v', 't', 'e', 'g', 'x', 'z', 'h', 'c', 'a', 'b']', [-574, -348, -774, 792, -732, 213, -185, 56, -851, -204, -179, 976, 369, -537, -456, -614, -356, -646, -268, 781, 638, 105, -602, -176]) == 56\nassert solution.maximumCostSubstring('arhkbyzf', '['e', 'm', 'a', 's', 'h', 't']', [310, -856, 474, 918, 649, 686]) == 1211\nassert solution.maximumCostSubstring('tdzpajmjk', '['e', 'm', 'o', 'l', 'd', 'p', 'c', 's', 'q', 'k', 'r']', [218, 850, -3, 661, 221, 604, 959, 938, -26, 301, 700]) == 2043\nassert solution.maximumCostSubstring('wbdtfqx', '['r', 'o', 'g', 'z', 'e', 'a', 'u', 't', 'd', 'w', 's', 'p', 'x', 'v', 'y', 'i', 'k', 'c', 'q', 'j', 'l']', [-378, -162, 417, -905, 910, -409, -680, 919, -632, -464, 948, -918, 246, 282, 336, -270, -323, -824, -769, 426, 982]) == 925\nassert solution.maximumCostSubstring('iafkya', '['v', 'm', 'f', 'q', 'z', 'l', 'r', 'b', 'o', 'x', 'y', 'w']', [-150, 870, -551, 759, -344, 50, -768, 907, 779, -342, 650, 560]) == 662\nassert solution.maximumCostSubstring('bsmebgp', '['r', 'k', 'g', 'm', 'a', 'f', 't', 'y', 'v', 'h', 'z', 'o', 's', 'i', 'j', 'n', 'q']', [335, -814, 385, 332, -528, 610, -82, 313, 904, -766, -204, -249, -296, -977, 754, -629, 421]) == 740\nassert solution.maximumCostSubstring('yzk', '['s', 'w', 'i', 'q', 'n', 'j', 'a', 'k', 'z', 'b', 'y', 'u', 'e']', [-324, -974, 770, 148, -148, 671, -897, -435, 709, -75, -640, -37, 247]) == 709\nassert solution.maximumCostSubstring('usrdaxujsq', '['b', 't', 'f', 'p', 'a', 'l', 'q']', [-795, 137, -633, -332, -409, -723, 355]) == 429\nassert solution.maximumCostSubstring('cmxd', '['s', 'k', 'i', 'h', 'g', 'a', 'u', 'v', 'p', 'j', 't', 'z', 'c', 'e', 'd', 'm', 'o', 'r', 'x', 'l', 'w', 'f']', [306, 700, -444, -272, -273, 368, -966, 750, 120, -721, 771, 5, 4, -357, -298, 38, -64, 620, 638, -727, 467, -621]) == 680\nassert solution.maximumCostSubstring('fkmjlicdy', '['v', 'e', 'l', 'f', 'd', 't', 'a', 'b', 'q', 's', 'w', 'i', 'c', 'n', 'h', 'u', 'j', 'x', 'g', 'm', 'o', 'y', 'k', 'z']', [514, -526, -925, 221, -952, 67, 879, -850, -905, 431, 181, -777, 504, 556, -617, 753, 848, -881, -773, 227, -831, -16, -710, -938]) == 1075\nassert solution.maximumCostSubstring('yteoc', '['s', 'm', 'd', 'n']', [-201, -811, -80, 157]) == 68\nassert solution.maximumCostSubstring('m', '['z', 'y', 'v', 'c', 't', 'u', 'e', 'r', 'g', 's', 'x', 'f', 'b', 'w', 'l', 'i', 'h', 'o', 'j', 'd', 'p', 'q', 'k']', [564, -421, 507, 55, 833, -454, -359, 588, -906, 110, 937, -480, 424, 14, 365, -224, 691, 876, -413, 317, -892, -645, 668]) == 13\nassert solution.maximumCostSubstring('rjjfmqlyf', '['r', 'n', 'z', 'v', 'y', 'c']', [813, -785, 391, 448, 848, -173]) == 1735\nassert solution.maximumCostSubstring('hygbtpb', '['n', 'x', 'u', 'c', 'l', 't', 'v', 'a', 'm', 'e', 'o', 'b', 'f', 'z', 'h', 'q', 'w', 'j']', [400, -698, 706, 649, -958, -490, -873, 95, -299, 440, 16, 936, -959, 504, -379, -212, -278, 876]) == 1430\nassert solution.maximumCostSubstring('xyarhz', '['k', 'v', 'c', 'b', 'z', 'y', 'p', 'l']', [-926, -110, -535, -931, -543, -239, 716, 441]) == 27\nassert solution.maximumCostSubstring('gwwsrubey', '['u', 'f', 'd', 'w', 'q', 't', 'n', 'h', 'k', 'b', 'g', 'e', 'a', 'j', 'c', 's', 'o', 'm', 'p', 'x']', [-766, 878, -297, -137, -510, -588, 921, -429, -884, -374, 629, -893, 923, 551, -218, -857, 237, -997, 934, 353]) == 629\nassert solution.maximumCostSubstring('jkywnch', '['x', 's', 'k']', [-535, -616, 602]) == 685\nassert solution.maximumCostSubstring('cfebrigvtj', '['n', 's', 'j', 'z', 'f']', [530, 515, 230, -104, 352]) == 668\nassert solution.maximumCostSubstring('ue', '['e', 'k', 'b', 'u', 'w', 'q', 't', 'g', 's', 'n', 'v', 'p', 'l', 'y', 'm', 'r', 'h', 'i', 'x', 'c', 'o', 'z', 'f', 'j', 'd', 'a']', [557, -419, -716, -562, -645, 592, 461, 763, -666, -385, 585, -562, 191, 573, 344, -570, -556, 652, 833, 943, 497, -837, 570, -220, -608, 84]) == 557\nassert solution.maximumCostSubstring('e', '['r', 'e', 'p', 'f']', [-367, 209, -749, 527]) == 209\nassert solution.maximumCostSubstring('pthskl', '['c', 'r', 't', 'i', 'd', 'x']', [706, 485, 329, -582, -993, 451]) == 395\nassert solution.maximumCostSubstring('kb', '['l']', [-683]) == 13\nassert solution.maximumCostSubstring('ooqxdhqqe', '['l', 'w']', [658, -378]) == 122\nassert solution.maximumCostSubstring('kthdwdig', '['e', 'o']', [-821, -642]) == 86\nassert solution.maximumCostSubstring('oswmkk', '['n', 'u', 's', 'b']', [568, -31, -934, 180]) == 58\nassert solution.maximumCostSubstring('usvqwttm', '['c', 's', 'm', 'h', 'o', 'g', 'r', 'p', 'u', 'y', 'l', 'd']', [634, -429, 866, 896, -661, -127, 340, 410, -62, 984, 54, 438]) == 968",
  "inefficient_solution": "class Solution:\n    def maximumCostSubstring(self, s: str, chars: str, vals: List[int]) -> int:\n        d = {c: v for c, v in zip(chars, vals)}\n        max_val = 0\n        for c in s:\n            v = d.get(c, ord(c) - ord('a') + 1)\n            substring = []\n            for x in s:\n                if x == c:\n                    substring.append(v)\n                elif x not in d:\n                    substring.append(ord(x) - ord('a') + 1)\n                else:\n                    substring.append(d[x])\n            total = sum(substring)\n            max_val = max(max_val, total)\n        return max_val",
  "is_python": true
}