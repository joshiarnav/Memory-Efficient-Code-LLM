{
  "problem_idx": 873,
  "task_name": "Length of Longest Fibonacci Subsequence",
  "markdown_description": "\nA sequence `x1, x2, ..., xn` is *Fibonacci-like* if:\n\n\n* `n >= 3`\n* `xi + xi+1 == xi+2` for all `i + 2 <= n`\n\n\nGiven a **strictly increasing** array `arr` of positive integers forming a sequence, return *the **length** of the longest Fibonacci-like subsequence of* `arr`. If one does not exist, return `0`.\n\n\nA **subsequence** is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [1,2,3,4,5,6,7,8]\n**Output:** 5\n**Explanation:** The longest subsequence that is fibonacci-like: [1,2,3,5,8].\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1,3,7,11,12,14,18]\n**Output:** 3\n**Explanation**:The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= arr.length <= 1000`\n* `1 <= arr[i] < arr[i + 1] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def lenLongestFibSubseq(self, arr: List[int]) -> int:\n        mp = {v: i for i, v in enumerate(arr)}\n        n = len(arr)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                dp[j][i] = 2\n        ans = 0\n        for i in range(n):\n            for j in range(i):\n                d = arr[i] - arr[j]\n                if d in mp and (k := mp[d]) < j:\n                    dp[j][i] = max(dp[j][i], dp[k][j] + 1)\n                    ans = max(ans, dp[j][i])\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def lenLongestFibSubseq(self, arr: List[int]) -> int:\n        mp = {v: i for i, v in enumerate(arr)}\n        n = len(arr)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i):\n                dp[j][i] = 2\n        ans = 0\n        for i in range(n):\n            for j in range(i):\n                d = arr[i] - arr[j]\n                if d in mp and (k := mp[d]) < j:\n                    dp[j][i] = max(dp[j][i], dp[k][j] + 1)\n                    ans = max(ans, dp[j][i])\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random array of positive integers forming a sequence\n    arr = sorted(random.sample(range(1, 101), random.randint(3, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lenLongestFibSubseq(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lenLongestFibSubseq(arr) == expected_result\n        print(f\"assert solution.lenLongestFibSubseq({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.lenLongestFibSubseq({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n    # save the test cases in a file\n    with open(\"test_cases.py\", \"w\") as file:\n        file.write(\"test_case_generator_results = [\" + \", \".join(test_case_generator_results) + \"]\")\n",
  "test_case": "assert solution.lenLongestFibSubseq([1, 14, 24, 27, 44, 50, 63, 88]) == 0\nassert solution.lenLongestFibSubseq([2, 16, 27, 38, 41]) == 0\nassert solution.lenLongestFibSubseq([8, 28, 47, 68, 76, 92, 95]) == 3\nassert solution.lenLongestFibSubseq([3, 17, 34, 36, 51, 57, 59, 61, 99]) == 3\nassert solution.lenLongestFibSubseq([4, 21, 35, 40, 43, 49, 50, 77, 91, 95]) == 3\nassert solution.lenLongestFibSubseq([1, 35, 92]) == 0\nassert solution.lenLongestFibSubseq([36, 46, 54, 77]) == 0\nassert solution.lenLongestFibSubseq([33, 55, 58, 76, 97, 99]) == 0\nassert solution.lenLongestFibSubseq([5, 15, 24, 29, 40, 41, 56, 64, 82, 92]) == 3\nassert solution.lenLongestFibSubseq([17, 19, 21, 62, 76, 85, 99]) == 0\nassert solution.lenLongestFibSubseq([8, 19, 76, 90]) == 0\nassert solution.lenLongestFibSubseq([14, 24, 33, 36, 49, 51, 62, 64, 74]) == 0\nassert solution.lenLongestFibSubseq([8, 17, 25, 64, 72, 80, 94]) == 3\nassert solution.lenLongestFibSubseq([16, 45, 64]) == 0\nassert solution.lenLongestFibSubseq([26, 42, 55, 72, 86]) == 0\nassert solution.lenLongestFibSubseq([31, 39, 61, 72, 85, 98]) == 0\nassert solution.lenLongestFibSubseq([15, 32, 81, 84, 96]) == 3\nassert solution.lenLongestFibSubseq([31, 32, 40, 80, 95]) == 0\nassert solution.lenLongestFibSubseq([12, 14, 51]) == 0\nassert solution.lenLongestFibSubseq([45, 50, 54, 70, 96]) == 0\nassert solution.lenLongestFibSubseq([22, 44, 50, 52]) == 0\nassert solution.lenLongestFibSubseq([3, 20, 47]) == 0\nassert solution.lenLongestFibSubseq([2, 14, 15, 31, 39, 40, 83, 92, 93]) == 0\nassert solution.lenLongestFibSubseq([1, 15, 26, 28, 30, 46, 76, 92]) == 3\nassert solution.lenLongestFibSubseq([1, 7, 21, 76, 90]) == 0\nassert solution.lenLongestFibSubseq([36, 41, 63, 75]) == 0\nassert solution.lenLongestFibSubseq([10, 17, 38, 42, 44, 50, 63, 69, 98]) == 0\nassert solution.lenLongestFibSubseq([15, 37, 40, 49, 95]) == 0\nassert solution.lenLongestFibSubseq([8, 20, 70, 74, 100]) == 0\nassert solution.lenLongestFibSubseq([41, 51, 59, 63, 82]) == 0\nassert solution.lenLongestFibSubseq([6, 9, 12, 19, 22, 40, 48, 52, 68, 70]) == 3\nassert solution.lenLongestFibSubseq([1, 3, 4, 12, 23, 39, 52, 61, 69]) == 3\nassert solution.lenLongestFibSubseq([7, 19, 21, 28, 29, 33, 36, 45, 78, 90]) == 3\nassert solution.lenLongestFibSubseq([15, 21, 22, 30, 58, 62, 73, 75, 79]) == 3\nassert solution.lenLongestFibSubseq([5, 8, 30, 74, 75, 81, 90, 92, 97]) == 3\nassert solution.lenLongestFibSubseq([4, 16, 21, 33, 43, 48, 51]) == 0\nassert solution.lenLongestFibSubseq([1, 21, 33, 41, 61, 62, 67, 77]) == 3\nassert solution.lenLongestFibSubseq([2, 6, 30, 70, 84, 88]) == 0\nassert solution.lenLongestFibSubseq([7, 23, 45, 47, 54, 77]) == 3\nassert solution.lenLongestFibSubseq([4, 21, 35, 36, 38, 60, 62, 97, 100]) == 3\nassert solution.lenLongestFibSubseq([16, 39, 71, 89]) == 0\nassert solution.lenLongestFibSubseq([9, 35, 40, 54, 63, 80, 83, 93, 97]) == 3\nassert solution.lenLongestFibSubseq([9, 18, 61, 70, 84]) == 3\nassert solution.lenLongestFibSubseq([5, 9, 23, 28, 45, 49, 54, 61, 67, 98]) == 3\nassert solution.lenLongestFibSubseq([1, 64, 66, 77, 84, 88, 93]) == 0\nassert solution.lenLongestFibSubseq([12, 29, 37, 39, 55, 67, 82, 90, 98]) == 3\nassert solution.lenLongestFibSubseq([1, 31, 45, 55, 58, 61, 63, 83, 96, 98]) == 0\nassert solution.lenLongestFibSubseq([5, 11, 14, 47, 59, 86, 93]) == 0\nassert solution.lenLongestFibSubseq([22, 36, 51, 79]) == 0\nassert solution.lenLongestFibSubseq([4, 26, 83, 87]) == 3\nassert solution.lenLongestFibSubseq([34, 36, 71, 85]) == 0\nassert solution.lenLongestFibSubseq([17, 44, 64, 84, 93]) == 0\nassert solution.lenLongestFibSubseq([7, 29, 37, 65, 66, 93]) == 3\nassert solution.lenLongestFibSubseq([9, 11, 21, 61, 97, 99]) == 0\nassert solution.lenLongestFibSubseq([7, 17, 29, 30, 54, 66, 89]) == 0\nassert solution.lenLongestFibSubseq([3, 4, 19, 22, 26, 31, 33, 34, 37, 80]) == 3\nassert solution.lenLongestFibSubseq([36, 53, 58, 73, 85, 100]) == 0\nassert solution.lenLongestFibSubseq([1, 25, 70, 96, 98]) == 0\nassert solution.lenLongestFibSubseq([1, 6, 52, 55, 56, 59, 64, 67, 70, 99]) == 3\nassert solution.lenLongestFibSubseq([6, 36, 52]) == 0\nassert solution.lenLongestFibSubseq([2, 4, 26, 39, 51, 57, 69, 78, 79, 89]) == 0\nassert solution.lenLongestFibSubseq([10, 13, 35, 45]) == 3\nassert solution.lenLongestFibSubseq([2, 74, 81, 85, 90]) == 0\nassert solution.lenLongestFibSubseq([20, 48, 76, 77]) == 0\nassert solution.lenLongestFibSubseq([21, 24, 38, 61, 69, 72, 78]) == 0\nassert solution.lenLongestFibSubseq([2, 34, 56, 72, 82]) == 0\nassert solution.lenLongestFibSubseq([16, 18, 38, 42, 43, 44, 55, 57, 59]) == 3\nassert solution.lenLongestFibSubseq([63, 72, 73, 77]) == 0\nassert solution.lenLongestFibSubseq([26, 52, 61, 82, 91, 95]) == 0\nassert solution.lenLongestFibSubseq([25, 29, 42, 45, 55, 57, 68, 69, 77, 95]) == 0\nassert solution.lenLongestFibSubseq([34, 42, 44, 57, 80, 87, 99]) == 3\nassert solution.lenLongestFibSubseq([85, 90, 91]) == 0\nassert solution.lenLongestFibSubseq([40, 47, 63, 85, 100]) == 0\nassert solution.lenLongestFibSubseq([6, 17, 25, 30, 36, 55]) == 3\nassert solution.lenLongestFibSubseq([14, 35, 47, 65, 77, 90]) == 0\nassert solution.lenLongestFibSubseq([6, 25, 37, 44, 60, 62, 78, 87, 99]) == 4\nassert solution.lenLongestFibSubseq([28, 39, 82, 99]) == 0\nassert solution.lenLongestFibSubseq([42, 58, 76]) == 0\nassert solution.lenLongestFibSubseq([24, 36, 49, 50, 55, 61, 66, 82, 86]) == 3\nassert solution.lenLongestFibSubseq([1, 10, 28, 70, 76, 88]) == 0\nassert solution.lenLongestFibSubseq([28, 31, 56, 75, 79, 81]) == 0\nassert solution.lenLongestFibSubseq([1, 7, 32, 38, 53, 65, 74, 96]) == 0\nassert solution.lenLongestFibSubseq([21, 22, 49, 51, 54, 55, 58]) == 0\nassert solution.lenLongestFibSubseq([7, 12, 16, 49, 78, 85, 86]) == 3\nassert solution.lenLongestFibSubseq([4, 10, 38, 44, 45, 72, 100]) == 0\nassert solution.lenLongestFibSubseq([57, 64, 94]) == 0\nassert solution.lenLongestFibSubseq([22, 27, 34, 41, 43, 60, 65, 67, 95]) == 3\nassert solution.lenLongestFibSubseq([4, 10, 36, 60, 80, 81, 88]) == 0\nassert solution.lenLongestFibSubseq([40, 48, 52, 77, 81, 85, 88, 98, 99]) == 3\nassert solution.lenLongestFibSubseq([15, 21, 29, 37, 55, 86]) == 0\nassert solution.lenLongestFibSubseq([1, 24, 43, 67, 69, 75, 86, 92]) == 3\nassert solution.lenLongestFibSubseq([17, 24, 78]) == 0\nassert solution.lenLongestFibSubseq([1, 13, 24, 36, 37, 46, 49, 76, 85, 99]) == 4\nassert solution.lenLongestFibSubseq([4, 6, 12, 37, 48, 61, 66, 88, 91, 97]) == 3\nassert solution.lenLongestFibSubseq([12, 34, 40, 49, 52, 62, 72, 87, 98]) == 3\nassert solution.lenLongestFibSubseq([26, 78, 80]) == 0\nassert solution.lenLongestFibSubseq([11, 13, 14, 16, 23, 24, 29, 60, 79]) == 3\nassert solution.lenLongestFibSubseq([38, 79, 88, 96]) == 0\nassert solution.lenLongestFibSubseq([44, 45, 50, 62, 63, 79]) == 0\nassert solution.lenLongestFibSubseq([18, 32, 34, 74, 76, 77, 85, 87]) == 0",
  "inefficient_solution": "class Solution:\n    def lenLongestFibSubseq(self, arr: List[int]) -> int:\n        mp = {v: i for i, v in enumerate(arr)}\n        n = len(arr)\n        dp = [[0 for _ in range(n ** 2)] for _ in range(n ** 2)]\n        for i in range(n):\n            for j in range(i):\n                dp[j][i] = 2\n                dp[i][j] = 2\n        ans = 0\n        for i in range(n ** 2):\n            for j in range(i):\n                d = arr[i // n] - arr[j // n]\n                if d in mp and (k := mp[d]) < j // n:\n                    dp[j][i] = max(dp[j][i], dp[k][j] + 1)\n                    ans = max(ans, dp[j][i])\n        return ans",
  "is_python": true
}