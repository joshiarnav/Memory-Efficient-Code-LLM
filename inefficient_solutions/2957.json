{
  "problem_idx": 2957,
  "task_name": "Remove Adjacent Almost",
  "markdown_description": "\nYou are given a **0-indexed** string `word`.\n\n\nIn one operation, you can pick any index `i` of `word` and change `word[i]` to any lowercase English letter.\n\n\nReturn *the **minimum** number of operations needed to remove all adjacent **almost-equal** characters from* `word`.\n\n\nTwo characters `a` and `b` are **almost-equal** if `a == b` or `a` and `b` are adjacent in the alphabet.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"aaaaa\"\n**Output:** 2\n**Explanation:** We can change word into \"a**c**a**c**a\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"abddez\"\n**Output:** 2\n**Explanation:** We can change word into \"**y**bd**o**ez\" which does not have any adjacent almost-equal characters.\nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 2.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word = \"zyxyxyz\"\n**Output:** 3\n**Explanation:** We can change word into \"z**a**x**a**x**a**z\" which does not have any adjacent almost-equal characters. \nIt can be shown that the minimum number of operations needed to remove all adjacent almost-equal characters from word is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 100`\n* `word` consists only of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def removeAlmostEqualCharacters(self, word: str) -> int:\n        ans = 0\n        i, n = 1, len(word)\n        while i < n:\n            if abs(ord(word[i]) - ord(word[i - 1])) < 2:\n                ans += 1\n                i += 2\n            else:\n                i += 1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def removeAlmostEqualCharacters(self, word: str) -> int:\n        ans = 0\n        i, n = 1, len(word)\n        while i < n:\n            if abs(ord(word[i]) - ord(word[i - 1])) < 2:\n                ans += 1\n                i += 2\n            else:\n                i += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random word\n    word = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 101)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.removeAlmostEqualCharacters(word)\n\n    return word, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.removeAlmostEqualCharacters(word) == expected_result\n        print(f\"assert solution.removeAlmostEqualCharacters('{word}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.removeAlmostEqualCharacters('{word}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.removeAlmostEqualCharacters('ddscmkcttjtjrlacznhavcaqmvxkljvrznavrzg') == 3\nassert solution.removeAlmostEqualCharacters('vplzoccjhsnlnkwhaorengmvsxkxwpnqujbqylnfaplubcqvszdcmcnifjmcakg') == 4\nassert solution.removeAlmostEqualCharacters('yuqgjcqwtddprccwlojclaoltdkijzbgzgytcxsuheeolizkytdllsrwqjrptq') == 6\nassert solution.removeAlmostEqualCharacters('dtjfpweojvvrglksjtahvgtpydddltcxpzxunnanjjfnwwifcmlrogbanyicwek') == 8\nassert solution.removeAlmostEqualCharacters('hwmatibfvqexctecsiqupxysfagklpabbmzzocbyesctrjiweztoyatgiswofxodahdxbwwuolekesdz') == 7\nassert solution.removeAlmostEqualCharacters('yxcgbbiiibalasbo') == 4\nassert solution.removeAlmostEqualCharacters('ndvqfacj') == 0\nassert solution.removeAlmostEqualCharacters('fjsuzchhbylztexixofvavbbytbpwofwgmmmykeihbostodivq') == 5\nassert solution.removeAlmostEqualCharacters('tkefbrzlhczqbewabpgfdcdugdofx') == 4\nassert solution.removeAlmostEqualCharacters('vmndalcwyzguhbnmtdpvkmgyaqjflghhmstceaeskvtdxxqtamtexergrbjhicgt') == 7\nassert solution.removeAlmostEqualCharacters('mzhihvmbyxmnxijgrcbppwxk') == 7\nassert solution.removeAlmostEqualCharacters('rafznlstygcvbeeirqgbojoejplfrxyxgsjrkishtgjftolqqjdfivkexv') == 5\nassert solution.removeAlmostEqualCharacters('xxqhijdjmzullmhhoqthqjmmfkmfzccvgdbofeuikjvvtsscymkfbgzxvijduivtxcvezeayilb') == 11\nassert solution.removeAlmostEqualCharacters('nncckgnlndzjoyoikuwnjmegchdsfygpfekgzossoijjgooyvvpavfzlzirxciubzicjom') == 7\nassert solution.removeAlmostEqualCharacters('grpcensaprncbxcgvywdkuumyuedhjzccqbbgubkxvtihdgmtovwwokfpplekrlzucyyi') == 9\nassert solution.removeAlmostEqualCharacters('tutkltlvqhuhkgrznhsafrihtix') == 3\nassert solution.removeAlmostEqualCharacters('ggjzcnicilenakuadlfxaxpgohernvrzrzrmqwghikgli') == 2\nassert solution.removeAlmostEqualCharacters('ue') == 0\nassert solution.removeAlmostEqualCharacters('ebtqbrchwe') == 0\nassert solution.removeAlmostEqualCharacters('vkfxsvtzwvauyhttxkyijlnoqdpvrvzqwlebcdtdoaxuxvropfalvqsdawxmwiskbijqzxbzkanrxfqawj') == 8\nassert solution.removeAlmostEqualCharacters('vzwxmrclemgdbchtzaevnjitngpvwxscindltwgrxolmyhmxquistvy') == 6\nassert solution.removeAlmostEqualCharacters('ulbevfekjttxaxjqszzv') == 4\nassert solution.removeAlmostEqualCharacters('jqavqfvjlrcmpooerkylsywilfamfcuhrvbfzluy') == 1\nassert solution.removeAlmostEqualCharacters('kcutcbwbtessvqxvejgfohpcqo') == 4\nassert solution.removeAlmostEqualCharacters('tkvvukbikjzakyvsqvjlttmhnccpirjayufnzkys') == 4\nassert solution.removeAlmostEqualCharacters('ihcnhfkrreufqyovvjjjolyieasmzoiqcfvxcegplatctyswohhoaffghglbidjgowndgciepdhxzj') == 7\nassert solution.removeAlmostEqualCharacters('hkchxjffhyrjliwbpmoepjsctopecyfydvwoshrkublyhfmwlwcxwhlqevivldwhetqujmhlxflfglccgaqxdo') == 6\nassert solution.removeAlmostEqualCharacters('pfuhlryoprxorbnwsmgjnoatfaooazmzngifajuwrsshoqcgzamrtgvzmzmwkogev') == 4\nassert solution.removeAlmostEqualCharacters('rjshnevkexovwiranmqfkkbfomdtinojvlmgme') == 5\nassert solution.removeAlmostEqualCharacters('bwkrkdxfawwkaiebpesnpusxuemtxrk') == 1\nassert solution.removeAlmostEqualCharacters('vramicnkxqda') == 0\nassert solution.removeAlmostEqualCharacters('lmmwrcqcqyogthsnpwdrgqmazdmbbedgetszqlaixhkeuzmqgnzwfadfwqhqliyimpnatrojoqpkpwqcmhwcflpzpjuz') == 5\nassert solution.removeAlmostEqualCharacters('lawhxjbbhoxiarjtxxt') == 2\nassert solution.removeAlmostEqualCharacters('jrowffqalizrhfvzwskfsleztfbfstwekyiwzksybizrojufstkwbp') == 3\nassert solution.removeAlmostEqualCharacters('opdaymaixrpwcvoilmxxshujrmvxkkjqgrcvzcljcl') == 4\nassert solution.removeAlmostEqualCharacters('oxpzkqsdvdwyixnplyysiheikffcbmgnxyzrpfwtfpjasjkzifn') == 6\nassert solution.removeAlmostEqualCharacters('qnxcerszskdwqipvwhyunfvqcyfmxbccdjjypsykwqklswluxureocdlczabbcahyrlppktkcmkmfrcapvqeeovwj') == 12\nassert solution.removeAlmostEqualCharacters('dwveyapgcgvwenzdewnzmtdslhlsosmutkljdleiyulrttuuxbkrylpvclxnosjnmzjqbtomkig') == 9\nassert solution.removeAlmostEqualCharacters('sitnfhtkcgcvinxgtnbjwayhnxbernrutkdshbiexjfvcfqpqnjdbufcwcmhno') == 3\nassert solution.removeAlmostEqualCharacters('enrsmyypwbsgfkkrvjcminlbtdamznceksdzgezgsfyskjfqaidgmhfm') == 5\nassert solution.removeAlmostEqualCharacters('axxfwosivpkhkztgxmaiqhqkwceyuftjsvrz') == 1\nassert solution.removeAlmostEqualCharacters('mekvkexqrijriiuygcroakwhmiqnbwjhhwtuwsezlyvtndhokpbnfbjzdfxugfspjvyplhnplyqeefiolywbzqkxy') == 8\nassert solution.removeAlmostEqualCharacters('pqrodmcenfgmwueebzoolynvdtrdytqg') == 4\nassert solution.removeAlmostEqualCharacters('bpta') == 0\nassert solution.removeAlmostEqualCharacters('ravxcbrzgglsuwekfdrybfjjdyepsnhtzp') == 3\nassert solution.removeAlmostEqualCharacters('kwjmsjkpwyeezrryr') == 3\nassert solution.removeAlmostEqualCharacters('rhkufrxdsbfvjfbffkunhfgscasvbkqcbhjjndeawstpwcjouprjkexpiqzoxvhgusagxxbbscfn') == 10\nassert solution.removeAlmostEqualCharacters('gievamrjetsdwtimoxgcwbpeiid') == 2\nassert solution.removeAlmostEqualCharacters('mjqkxsoohgoscvwuwtmklpixmtdwwvsnlmqxkevzticzxuqmlmhwhzyrxqbminrvambsuuhc') == 9\nassert solution.removeAlmostEqualCharacters('ghcaonrjsaitjnwfee') == 3\nassert solution.removeAlmostEqualCharacters('jvsucoksukyknkdnmzkrwo') == 1\nassert solution.removeAlmostEqualCharacters('tdeujxmrkshkojqmrrildhbzqzmamzoijlgealpaytvliwtultgptgjyvqbzpfchelbxyvihclrn') == 6\nassert solution.removeAlmostEqualCharacters('xwubycpscdyyqhvcqfmqqqwlhbxzwykjsmveonmiwkxdtmvqyyutartgbojhqundwuuhkdfgbsvpwiylhgxlfcplpcggr') == 12\nassert solution.removeAlmostEqualCharacters('nwtbdwnvojtcccbmaudvegoympqfzkqbavsha') == 4\nassert solution.removeAlmostEqualCharacters('kqlardul') == 0\nassert solution.removeAlmostEqualCharacters('jzjchlzfrfrnkgxvlqxbldx') == 0\nassert solution.removeAlmostEqualCharacters('damdyslxmcmpuuvbtbfcxkpzlywkbvvgyucllivduyszsaymqyczbsbxemycejhrwfxjokxhphrgdktvizbwykwqh') == 3\nassert solution.removeAlmostEqualCharacters('bheototfwaexyfiereyojdkvwnlggy') == 3\nassert solution.removeAlmostEqualCharacters('hgcamorhdfdgggcbeetzlfyzvdxnnkgoklatwaukzgsqpudmhemuenywikgyjjsfulqkkzjyghbuyraxntmmofux') == 12\nassert solution.removeAlmostEqualCharacters('pkvckcwlylcmmwfqlpyj') == 1\nassert solution.removeAlmostEqualCharacters('tszvbbuscawvlruklykgoemrkdasakzvmcsayjmzpgthyqofafmdxsxltkdabktadhjfvlcsaifnicqkhicavqffndquafmbdedsa') == 8\nassert solution.removeAlmostEqualCharacters('ntvrjgzymhnxerqofoomsxvguiguppgrggsyfspznddlx') == 6\nassert solution.removeAlmostEqualCharacters('ypmrilfijdxlhfqdewxrpukmjxgmfgzwnmujlzzdkszqmfaxfnbcwkzluvliidgpfyirgnhevdbqvlnkktzmrpfagyldcedus') == 12\nassert solution.removeAlmostEqualCharacters('qcfkddcwac') == 1\nassert solution.removeAlmostEqualCharacters('canzpwdfkacqecfrjdpblhiqqnbkovkbrrlrgkxfejhbmmzxeddnjltfjxudh') == 6\nassert solution.removeAlmostEqualCharacters('kyqdslyeptfimgbztednfkgizqulkklfbbwqjzwepsznckuwkcq') == 4\nassert solution.removeAlmostEqualCharacters('fiiesbzfxc') == 1\nassert solution.removeAlmostEqualCharacters('qboczaptnvmicuwulibltvzbpdl') == 0\nassert solution.removeAlmostEqualCharacters('chniytpnlllwwgrrzazssrewzwtqgfuwnlbjxrdpildtf') == 5\nassert solution.removeAlmostEqualCharacters('kpsuluotx') == 0\nassert solution.removeAlmostEqualCharacters('cggkzbxgowmjjroatibhbshywcoxvrkrffmzfknagyhzykoeqnplettrvizsxkyjabqycrjippaapbnv') == 9\nassert solution.removeAlmostEqualCharacters('morcljnuzym') == 1\nassert solution.removeAlmostEqualCharacters('arozconzjocpupipqgthwsrokbtqzwqpsenipyddtelpbsgwcschhsxqzsdwbbvowevgksuaaycgmniognndtwkrfojdisvc') == 10\nassert solution.removeAlmostEqualCharacters('bmagjikabdiqudnynkvdhktfluifgvilltciljkbtasshjwaz') == 6\nassert solution.removeAlmostEqualCharacters('tmeetshgrxoggdomflabhqarmvfalbdiqcahvziqrkrjvaivbjefzfip') == 7\nassert solution.removeAlmostEqualCharacters('nieyexcqkvtjwblgnolfvqheujeeofbeetqrqvxsnwkgmyhsgxpoeypoze') == 6\nassert solution.removeAlmostEqualCharacters('gvszvhjcshsktiwhupxxchczyuqsnstntmepdvbkyefzowsudjvotdoclzyhcdj') == 6\nassert solution.removeAlmostEqualCharacters('xwcgsxoqcuryesighgtbfovvugoxqjxaamhhyopbuqafaidcbxpdxgaxnfvdgelpgahbwaijsyxboqnhtufxhvpez') == 10\nassert solution.removeAlmostEqualCharacters('htzdvdyjoglurekypzsgrlymltwhxypt') == 2\nassert solution.removeAlmostEqualCharacters('fhgkqtsgzjzsgiiamjvqgjbiwofanebwsqxojgpignnoyfexofcwcagksmcwynhqxbhgnkmfhzosozrn') == 6\nassert solution.removeAlmostEqualCharacters('xrghlixmomhzevfyllgnkxwrvejlefwfh') == 4\nassert solution.removeAlmostEqualCharacters('bswqxqubzutmvlzdfdpsotoqcdnqmvulijmo') == 4\nassert solution.removeAlmostEqualCharacters('vzqnkgpjsytrtzobolijmmordbopraypkqnbnwfvakavupivzgmyakfujumwjycsoswmniobkzebgfrymxfkxxbkgba') == 8\nassert solution.removeAlmostEqualCharacters('johxtnssyeqebymyxnquwhpepozhnqygnwlxillvhzodyrvhdjdymocwaqxzz') == 5\nassert solution.removeAlmostEqualCharacters('ldrxgduoftxchplsffmjjhouckjikazhehjtlhck') == 3\nassert solution.removeAlmostEqualCharacters('gdzchdwthqpiawunjxlsspkjjinghpzzxrevmzkezdepnvupjjpftisopabujnvtutkp') == 12\nassert solution.removeAlmostEqualCharacters('cioirijcbwmgfmhojjdvcppfoypsgxdcadgnsyxkiwusacvppsmgjoeahhzzanmssbedgfitm') == 14\nassert solution.removeAlmostEqualCharacters('qvfwmptfotpuwozvcqrogeaewwgeqoasmyngfiprpwstdxyprospvjxxtqlqwwzkpivpcgifydxwwjbnay') == 8\nassert solution.removeAlmostEqualCharacters('amotwuvksbkfsijvufbswsytkqejgmyommyghyhyydthnqkxajezjrtrqocdptkhuimgwsefyiiiijbpbhtuqfxnflg') == 12\nassert solution.removeAlmostEqualCharacters('tuqmqdmcjhndvooaieasjzxtwseaaedvjeaykumcfcxdupkykvvyitrtflqtebeuggzbotzpwcxbxptksuytxkqpo') == 7\nassert solution.removeAlmostEqualCharacters('bzlbsxmgzhotbrzu') == 0\nassert solution.removeAlmostEqualCharacters('whuhpwqfxtddhihmoxjzgeykqzjljfyelmcgobfvmaxoisgzlgxnnaocgptlwleorgjrgdfbhkgvaftwzcqytniblfezpe') == 5\nassert solution.removeAlmostEqualCharacters('zeuwmjgfgqxzpafwlypbfcosxhstsxn') == 2\nassert solution.removeAlmostEqualCharacters('grjfnelwyhnaipgfmwtbglzcnqbhwthxxgcxqgwykfqhng') == 2\nassert solution.removeAlmostEqualCharacters('vlngkwniaubmoncxi') == 1\nassert solution.removeAlmostEqualCharacters('zcphilrpjibntoqafxqzcoxwjqblnruclindplwobwfjeesfrcqndjbyosvoyfqtsouqvqsbafmrujeqddvxdhbxjq') == 7\nassert solution.removeAlmostEqualCharacters('jpmiguqyccehenenwoogpfvj') == 2\nassert solution.removeAlmostEqualCharacters('pbmeosyvtujhffeefowubwlloslnhh') == 5\nassert solution.removeAlmostEqualCharacters('pgoxfpnbdjnscszmziiizeijwdtppxhlffbqcxobkshilxvsuanidkszd') == 5\nassert solution.removeAlmostEqualCharacters('eteljqnawppmduluhuppwoekqundpdgaxdotxutrwogfpkjgfvwlvjhvozeakkmaeanfbvkuwxciuowhmmxqzzjoknhg') == 12",
  "inefficient_solution": "class Solution:\n    def removeAlmostEqualCharacters(self, word: str) -> int:\n        word_list = list(word)\n        ans = 0\n        for i in range(1, len(word)):\n            if abs(ord(word_list[i]) - ord(word_list[i - 1])) < 2:\n                ans += 1\n                temp = []\n                for j in range(i - 2, i + 3):\n                    if j < 0 or j >= len(word):\n                        temp.append(word_list[j])\n                    else:\n                        temp.append(random.choice([chr(ord(word_list[j]) - 1), word_list[j], chr(ord(word_list[j]) + 1)]))\n                word_list = [x for x in temp]\n                i -= 2\n            else:\n                i += 1\n        return ans",
  "is_python": true
}