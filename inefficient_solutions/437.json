{
  "problem_idx": 437,
  "task_name": "Path Sum III",
  "markdown_description": "\nGiven the `root` of a binary tree and an integer `targetSum`, return *the number of paths where the sum of the values\u00a0along the path equals*\u00a0`targetSum`.\n\n\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0400-0499/0437.Path%20Sum%20III/images/pathsum3-1-tree.jpg)\n\n```\n\n**Input:** root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n**Output:** 3\n**Explanation:** The paths that sum to 8 are shown.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 1000]`.\n* `-109 <= Node.val <= 109`\n* `-1000 <= targetSum <= 1000`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        def dfs(node, s):\n            if node is None:\n                return 0\n            s += node.val\n            ans = cnt[s - targetSum]\n            cnt[s] += 1\n            ans += dfs(node.left, s)\n            ans += dfs(node.right, s)\n            cnt[s] -= 1\n            return ans\n\n        cnt = Counter({0: 1})\n        return dfs(root, 0)\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom typing import Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        def dfs(node, s):\n            if node is None:\n                return 0\n            s += node.val\n            ans = cnt[s - targetSum]\n            cnt[s] += 1\n            ans += dfs(node.left, s)\n            ans += dfs(node.right, s)\n            cnt[s] -= 1\n            return ans\n\n        cnt = Counter({0: 1})\n        return dfs(root, 0)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate binary tree\n    # Number of nodes can range from 0 to 1000\n    num_nodes = random.randint(0, 1000)\n    tree_nodes = []\n    for i in range(num_nodes):\n        tree_nodes.append(TreeNode(val=i))\n    \n    # Connect nodes to form a tree\n    for i in range(num_nodes):\n        node = tree_nodes[i]\n        left = random.choice(tree_nodes) if i > 0 else None\n        right = random.choice(tree_nodes) if i > 0 else None\n        node.left = left\n        node.right = right\n\n    # Generate target sum\n    targetSum = random.randint(-1000, 1000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.pathSum(tree_nodes[0], targetSum)\n\n    return tree_nodes[0], targetSum, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, targetSum, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.pathSum(root, targetSum) == expected_result\n        print(f\"assert solution.pathSum({root}, {targetSum}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.pathSum({root}, {targetSum}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.pathSum(<__main__.TreeNode object at 0x7f938b4bce90>, -913) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4bd0d0>, -321) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4c7cd0>, 506) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4c5bd0>, 608) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4df710>, -541) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4d5c90>, 936) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4e6010>, -645) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4bf690>, 874) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a3410>, 512) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a0910>, 800) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4d6e50>, 11) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4e5110>, 674) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2d3650>, -847) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2cb8d0>, -994) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2bb450>, 490) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2cb6d0>, 275) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2b82d0>, 605) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2c3490>, 796) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2b0950>, 69) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2c90d0>, -305) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2b8090>, 60) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a9390>, -380) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a8110>, 806) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a2e10>, -493) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4c7890>, -528) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4c5c10>, 164) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4c6650>, 783) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4d7d90>, 70) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b60fcd0>, -521) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4be190>, -715) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a1490>, 306) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4c9450>, -879) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2e45d0>, -126) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2e16d0>, -967) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4e3310>, -183) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2df6d0>, 231) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b3082d0>, 965) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b319b10>, -415) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b311690>, 982) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2fa650>, -679) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b302550>, 783) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b3084d0>, -137) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2ecbd0>, -582) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b60c150>, -594) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4c4ad0>, 397) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2cbad0>, -129) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2c8c90>, 147) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4d6c50>, -320) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2d3190>, -590) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2d0050>, -859) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4dc2d0>, 336) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2e6c90>, 969) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4e6f10>, -718) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2e7850>, 162) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b34f310>, 273) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b359190>, -313) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b33db50>, 548) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b334150>, -532) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b348ad0>, -443) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b327850>, -71) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b335f50>, -538) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2bbf90>, -182) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2b1f90>, -397) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4e6590>, 867) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2d2590>, 500) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2ca2d0>, 535) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4e6590>, -562) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2aba50>, -780) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a12d0>, 489) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a8f10>, -534) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4be5d0>, -858) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b5f9610>, -876) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b31a710>, 517) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b319250>, -314) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b60d010>, -825) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2eebd0>, -320) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b311990>, -31) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b301250>, -754) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2fb910>, 230) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2ee7d0>, -180) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4e00d0>, -873) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4d5b50>, -56) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4d48d0>, -318) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a1990>, 837) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4bfb50>, -962) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2e2f10>, 350) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2d2450>, -728) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2a2d50>, 288) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b4dd810>, -997) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2b2450>, -524) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b334850>, 200) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b337fd0>, 293) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2b80d0>, -602) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b337950>, 307) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b336590>, -491) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b33e210>, 564) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b34e290>, -85) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b34ba90>, 980) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b34ca90>, -892) == 0\nassert solution.pathSum(<__main__.TreeNode object at 0x7f938b2e6750>, 977) == 0",
  "inefficient_solution": "class Solution:\n    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:\n        def dfs(node, s):\n            if node is None:\n                return 0\n            s += node.val\n            s_str = str(s)\n            if s_str in memo:\n                memo[s_str] = 0\n            else:\n                memo[s_str] = 1\n            ans = 0\n            for i in range(len(memo)):\n                if s_str[i:] == str(s - i):\n                    ans += memo[s_str[:i]]\n            ans += dfs(node.left, s)\n            ans += dfs(node.right, s)\n            return ans\n\n        memo = {0: 1}\n        return dfs(root, 0)",
  "is_python": true
}