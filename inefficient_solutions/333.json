{
  "problem_idx": 333,
  "task_name": "Largest BST Subtree",
  "markdown_description": "\nGiven the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.\n\n\nA **Binary Search Tree (BST)** is a tree in which all the nodes follow the below-mentioned properties:\n\n\n* The left subtree values are less than the value of their parent (root) node's value.\n* The right subtree values are greater than the value of their parent (root) node's value.\n\n\n**Note:** A subtree must include all of its descendants.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0333.Largest%20BST%20Subtree/images/tmp.jpg)**\n\n\n\n```\n\n**Input:** root = [10,5,15,1,8,null,7]\n**Output:** 3\n**Explanation:** The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[0, 104]`.\n* `-104 <= Node.val <= 104`\n\n\n\u00a0\n\n\n**Follow up:** Can you figure out ways to solve it with `O(n)` time complexity?\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def largestBSTSubtree(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root is None:\n                return inf, -inf, 0\n            lmi, lmx, ln = dfs(root.left)\n            rmi, rmx, rn = dfs(root.right)\n            nonlocal ans\n            if lmx < root.val < rmi:\n                ans = max(ans, ln + rn + 1)\n                return min(lmi, root.val), max(rmx, root.val), ln + rn + 1\n            return -inf, inf, 0\n\n        ans = 0\n        dfs(root)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def largestBSTSubtree(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root is None:\n                return inf, -inf, 0\n            lmi, lmx, ln = dfs(root.left)\n            rmi, rmx, rn = dfs(root.right)\n            nonlocal ans\n            if lmx < root.val < rmi:\n                ans = max(ans, ln + rn + 1)\n                return min(lmi, root.val), max(rmx, root.val), ln + rn + 1\n            return -inf, inf, 0\n\n        ans = 0\n        dfs(root)\n        return ans\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate the tree\n    tree = generate_tree()\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestBSTSubtree(tree)\n\n    return tree, expected_result\n\ndef generate_tree():\n    # Generate a random number of nodes\n    num_nodes = random.randint(0, 10)\n    if num_nodes == 0:\n        return None\n\n    # Generate random values for the nodes\n    node_values = random.sample(range(-10000, 10001), num_nodes)\n\n    # Create the tree based on the node values\n    nodes = [TreeNode(val) for val in node_values]\n    for i in range(1, num_nodes):\n        if i % 2 == 0:\n            nodes[i // 2 - 1].right = nodes[i]\n        else:\n            nodes[i // 2].left = nodes[i]\n\n    return nodes[0]\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tree, expected_result = generate_test_case()\n        if tree:\n            test_case_generator_results.append(f\"assert solution.largestBSTSubtree({tree}) == {expected_result}\")\n            print(f\"assert solution.largestBSTSubtree({tree}) == {expected_result}\")\n        else:\n            test_case_generator_results.append(f\"assert solution.largestBSTSubtree(None) == {expected_result}\")\n            print(f\"assert solution.largestBSTSubtree(None) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909010>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909050>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909010>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909050>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909010>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909350>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f908fd0>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909210>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909050>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909210>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909050>) == 1\nassert solution.largestBSTSubtree(None) == 0\nassert solution.largestBSTSubtree(None) == 0\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909010>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909010>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909010>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909010>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 5\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909010>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909190>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 1\nassert solution.largestBSTSubtree(None) == 0\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909650>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 1\nassert solution.largestBSTSubtree(None) == 0\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909510>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(None) == 0\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f9091d0>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 2\nassert solution.largestBSTSubtree(None) == 0\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909d90>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909d90>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909d90>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909d90>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909d90>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 2\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909d90>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 1\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909d90>) == 4\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909b50>) == 3\nassert solution.largestBSTSubtree(<__main__.TreeNode object at 0x7f6b0f909d90>) == 1",
  "inefficient_solution": "class Solution:\n    def largestBSTSubtree(self, root: Optional[TreeNode]) -> int:\n        def dfs(root):\n            if root is None:\n                return [float('inf'), float('-inf'), 0, [None, None, None, None]]\n\n            lres = dfs(root.left)\n            rres = dfs(root.right)\n\n            if lres[2] != 0 and rres[2] != 0 and lres[0] < root.val < rres[1]:\n                ans = max(ans, lres[2] + rres[2] + 1)\n                return [min(lres[0], root.val), max(rres[1], root.val), lres[2] + rres[2] + 1, [root, root.left, root.right, None]]\n\n            return [-float('inf'), float('inf'), 0, [None, None, None, None]]\n\n        ans = 0\n        res = dfs(root)\n        return ans",
  "is_python": true
}