{
  "problem_idx": 720,
  "task_name": "Longest Word in Dictionary",
  "markdown_description": "\nGiven an array of strings `words` representing an English Dictionary, return *the longest word in* `words` *that can be built one character at a time by other words in* `words`.\n\n\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n\n\nNote that the word should be built from left to right with each additional character being added to the end of a previous word.\u00a0\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]\n**Output:** \"world\"\n**Explanation:** The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\n**Output:** \"apple\"\n**Explanation:** Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 1000`\n* `1 <= words[i].length <= 30`\n* `words[i]` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestWord(self, words: List[str]) -> str:\n        cnt, ans = 0, ''\n        s = set(words)\n        for w in s:\n            n = len(w)\n            if all(w[:i] in s for i in range(1, n)):\n                if cnt < n:\n                    cnt, ans = n, w\n                elif cnt == n and w < ans:\n                    ans = w\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestWord(self, words: List[str]) -> str:\n        cnt, ans = 0, ''\n        s = set(words)\n        for w in s:\n            n = len(w)\n            if all(w[:i] in s for i in range(1, n)):\n                if cnt < n:\n                    cnt, ans = n, w\n                elif cnt == n and w < ans:\n                    ans = w\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random words list\n    words = random.choices(string.ascii_lowercase, k=random.randint(1, 31))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestWord(words)\n\n    return words, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestWord(words) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.longestWord({words}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.longestWord({words}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestWord(['t', 'j', 'r', 'y', 'u', 'g', 'o', 'e', 'w']) == e\nassert solution.longestWord(['e', 'i']) == e\nassert solution.longestWord(['f', 'e', 'l', 'j', 'o', 'a', 'v', 'u', 'v', 't', 'y', 'b', 'u']) == a\nassert solution.longestWord(['r', 'f', 'r', 'o', 'a', 'u']) == a\nassert solution.longestWord(['p', 'b', 'l', 'q', 'i', 'l', 'w', 'l', 'v', 'h', 'v', 't', 'z', 'v', 'e', 'w', 'g', 'm', 'p', 'g', 'n', 'b']) == b\nassert solution.longestWord(['n', 'm', 'k', 'q', 's', 'i', 'q', 'x', 'i', 'b', 'e', 't']) == b\nassert solution.longestWord(['k', 'v', 'q', 'f', 'p', 'k', 'h', 'n', 's', 'b', 'k', 'r', 'g', 'n', 'p', 'g', 'e', 'e', 'x', 'b']) == b\nassert solution.longestWord(['m', 'g', 'h']) == g\nassert solution.longestWord(['f', 'v', 'o', 'i', 'x', 't', 'g', 'o', 'n', 'g', 'j', 'h', 'f', 'o', 'b', 'b', 'f', 'x', 'y', 'f', 'h']) == b\nassert solution.longestWord(['h', 'p', 'v', 'y', 'o', 'r', 'r', 'd', 'g', 'v', 'n', 'z', 'd', 'w', 'e', 'j', 'a', 'w', 'l', 'n', 'w', 'c', 'j', 'p', 'h', 'e', 's', 'e', 'i', 'n']) == a\nassert solution.longestWord(['q', 't', 'n', 'm', 'z', 'x', 'a', 's', 't', 'h', 'v', 'b', 's', 'w', 'z', 'm', 'p', 'b', 'e', 't', 'c', 'k', 'n', 'w', 's', 'h', 'f', 'b', 'l']) == a\nassert solution.longestWord(['c', 'j', 'v', 'o', 'x', 'g', 'f', 'i', 'g', 'm', 'm', 'g']) == c\nassert solution.longestWord(['g', 'w', 'r', 'b', 'u', 't', 's', 'i', 'z', 'd', 'f', 'g', 'n', 'o', 'u']) == b\nassert solution.longestWord(['y', 'p', 'l', 'n', 'p', 'r', 'e', 'w', 'x', 'n', 's', 'x', 'z', 's', 'w']) == e\nassert solution.longestWord(['k', 'm', 'r', 'y', 'j', 'm', 'g', 't', 'h', 'x', 't', 'z', 'n', 'r', 'm', 'b', 'l', 'd', 'm', 'w', 'b']) == b\nassert solution.longestWord(['y', 'o', 'j', 'm', 'v', 't', 'a', 'd', 'e', 'h', 'p', 'r', 'd', 'l', 'v', 'r', 'v', 'f', 'g', 'y', 'c']) == a\nassert solution.longestWord(['e', 'k', 'p', 'c', 'u', 'n', 'g']) == c\nassert solution.longestWord(['d', 'b', 's', 'f', 'e', 's', 'm', 'y', 'y', 'g', 'c', 't', 's', 'u', 'o', 'u']) == b\nassert solution.longestWord(['z', 'k', 'x', 'w', 'r', 'g', 'i', 'r', 'e', 'm', 'z']) == e\nassert solution.longestWord(['m', 'd', 'x', 'w', 'c']) == c\nassert solution.longestWord(['w', 'j', 'z', 'v', 'y', 'q', 'd', 'i', 'p', 'e', 'm', 'o', 'g', 'r', 'q', 'z', 'a', 's', 'c', 'c', 'o', 'v', 'j', 'o', 'y', 'v', 'z', 'h', 'a']) == a\nassert solution.longestWord(['e']) == e\nassert solution.longestWord(['h', 'n', 'b', 'm', 'w', 'g', 'i', 'c', 'n', 'g', 'v', 'e', 'g', 'k', 'f', 'a', 'x', 'p', 'm', 'a', 'a', 'e', 'y', 'i', 'd', 'b', 'd', 'y', 'n', 'i']) == a\nassert solution.longestWord(['p', 't', 'z', 'x', 'm', 'f', 'w', 'a', 'x', 'x', 'h', 'o', 'o', 'e', 'e', 'e', 'b', 'o', 'h', 'h', 'y', 'c', 'q', 'l', 'u', 'r', 'd']) == a\nassert solution.longestWord(['e', 'm', 'y', 'o', 'k', 's', 'r', 'o']) == e\nassert solution.longestWord(['b', 'q', 'l', 'x', 'w', 'k', 'v', 'v', 'f', 'j', 'l', 'i', 'u', 'p', 'i', 'm', 'e', 'd', 'w', 'd', 'y', 'z', 'w', 'f', 'l', 'q', 'd', 'm', 'r']) == b\nassert solution.longestWord(['s', 'a', 'h', 'i', 'n', 'j', 'f', 'a', 'm', 'c', 'h', 'f', 'z', 'j', 'x', 'w', 'j', 'j', 'f', 'i', 'c', 'x', 'z', 'd']) == a\nassert solution.longestWord(['d']) == d\nassert solution.longestWord(['x', 'u', 'g', 'x', 'b', 'o', 't', 'r', 'v', 'u', 'm', 'v', 'u']) == b\nassert solution.longestWord(['w', 'r', 'n', 'h', 'x', 'o', 'l', 'a', 'o', 'a', 'u', 'd', 'w', 'i', 'w', 's', 'j']) == a\nassert solution.longestWord(['n', 'q']) == n\nassert solution.longestWord(['j', 's', 'm', 'r', 'y', 'n', 'r', 'k', 's', 'u', 'q', 'x', 'g', 't', 'y', 't', 'm', 't', 'n', 'm']) == g\nassert solution.longestWord(['a', 'u', 'm', 'n', 'r', 'z', 'o', 'k', 't', 'p', 'r', 'l', 'l', 'o', 'c', 't', 'x', 'n', 'y', 'j', 'p', 'u', 'i', 'd', 'u']) == a\nassert solution.longestWord(['f', 'h', 'u', 'g', 'm', 'n', 'i', 'v', 'y', 'p', 'r', 'w', 'g', 'g', 'q', 'u', 'd', 'w', 'o', 'w', 'c', 'x', 'b', 'v', 'q', 'l', 'p', 'f', 'r']) == b\nassert solution.longestWord(['w', 'm', 'l', 'n', 'k', 'i', 'r', 'a', 'k', 'j']) == a\nassert solution.longestWord(['r']) == r\nassert solution.longestWord(['q', 'j', 'c', 's', 'e', 'h', 'l', 'z', 's', 'f', 'l', 'o', 'r', 'm', 'y', 'h', 'b', 'k', 't', 'c', 'v', 'l', 'n']) == b\nassert solution.longestWord(['j', 'r', 'p', 'q', 'f', 'z', 'u', 'v', 'j', 'r', 'u', 'e', 'w', 'o', 'e', 't', 'p', 'e', 'j', 'r', 'd', 'e', 'e', 'o', 'v', 'v', 'v', 'u', 'v']) == d\nassert solution.longestWord(['m', 'g', 'i', 'r', 'd', 'y', 'm', 'h', 'o', 'y', 'j', 't', 'y', 'y', 'j', 'w', 'q', 'r', 'a', 'c', 'z', 'k', 'q', 'g']) == a\nassert solution.longestWord(['p', 'j', 'd', 'i', 'z', 'o', 'w', 's', 'v', 'u', 'g', 'o', 'm', 'n', 'm', 'v', 'z', 'k', 'v', 'q', 'f', 'g', 'a', 's', 'm', 'a']) == a\nassert solution.longestWord(['z', 'a', 'a', 'd', 'l', 'o', 't', 'u', 'g', 'r', 'x', 'h', 'u', 'n', 'o', 'o', 'y', 'j', 'y', 'i', 'f', 'm', 'i', 'z', 'q', 'l', 'm']) == a\nassert solution.longestWord(['v', 't', 'y', 'i', 'q', 'x', 'c', 't', 'h', 'r', 'i', 'd', 'l', 'h', 'p', 'f', 'n', 'j', 'h', 'h', 'z', 'r', 'g', 'f', 'n', 'q', 'l', 'h', 'z']) == c\nassert solution.longestWord(['y', 'c', 's', 'm', 'x', 'p', 'g', 'e', 'i', 't', 'r', 'h', 'e', 'z', 'v', 'l', 'z', 'f']) == c\nassert solution.longestWord(['u', 'l', 'j', 'g', 'q', 'v', 'k', 'p']) == g\nassert solution.longestWord(['f', 'a', 'o', 'b', 'u', 'g', 's', 'w', 'h', 'l', 'd', 'o', 'a', 'j', 'e', 'y', 'e', 'j', 'j', 'h', 'q', 'k', 'm', 'o', 'r', 'v']) == a\nassert solution.longestWord(['c', 'b', 'k', 'd', 's', 't', 'v', 'r', 's', 's', 'f']) == b\nassert solution.longestWord(['k', 'l', 'x', 'd', 'p', 'n', 'a', 'g', 'n', 'b', 'v', 'a', 'x', 'r', 't', 'j', 'p', 'e', 'i']) == a\nassert solution.longestWord(['d', 'w', 'n', 'v', 'd', 'f', 'v']) == d\nassert solution.longestWord(['w', 'd', 'd', 'g', 'w', 's', 'e', 'q']) == d\nassert solution.longestWord(['c', 'r', 'f', 'q', 'e', 'a', 's', 's', 's', 'o', 'c', 'v', 'u', 'i', 'a', 'm', 'r']) == a\nassert solution.longestWord(['d', 'u', 'd', 'm', 'j', 'f', 'g', 'b', 'v', 'z', 'z', 'j', 'h', 'k', 'n', 't', 'm', 'r', 'q', 'a', 'i', 'b', 'j', 'i']) == a\nassert solution.longestWord(['j', 'p', 'm', 'l', 'j', 'j', 'b', 'w', 'x', 'i', 'p', 'f', 'b', 's', 'y', 'z', 'c', 't', 'q', 'o', 'i', 'g', 'y', 'u', 'n', 'd', 'b']) == b\nassert solution.longestWord(['k', 'i', 's', 'a', 'l', 'c', 'w', 'o', 'x', 'p', 'g', 'n', 's', 'y', 'k', 'l', 'e', 't', 't', 'f', 'e', 'x', 'u', 'l', 'c']) == a\nassert solution.longestWord(['h', 'd', 'q', 'f', 'r', 'o', 'b', 'k', 'w', 'i', 'h', 'z', 'r', 'u', 'o', 'l', 'u', 'o', 'a', 'j', 's', 'w']) == a\nassert solution.longestWord(['b', 'n', 't', 'r']) == b\nassert solution.longestWord(['q', 'f', 'i', 'h', 'c', 's', 'h', 'm', 'u', 'c', 'k', 'g', 'a', 'r', 'f', 'z', 'd', 'k', 'q', 'j', 'a', 'm', 'y', 'k', 't', 'q']) == a\nassert solution.longestWord(['w', 'p', 'y', 'n', 'b', 'b', 'q', 'g']) == b\nassert solution.longestWord(['x', 'h', 'j', 'i', 'b', 'k', 'e', 'b', 'h', 'b', 'b', 's', 'g', 'h']) == b\nassert solution.longestWord(['o', 'g', 'q', 'i', 'q', 'h', 'b', 'a', 'j', 'w', 'o', 't', 'j', 'o', 'z', 'k', 'n', 's', 'e', 'b', 'e', 'd', 'q', 'z', 'q', 'i', 'g', 'k', 'x']) == a\nassert solution.longestWord(['l', 'p', 'g', 'i', 'b', 'o', 'w', 't', 'p']) == b\nassert solution.longestWord(['u', 'r', 'r', 'w', 'd', 'y', 'r', 'm', 'k', 'a', 't', 'i', 'v', 'm', 'u', 'o']) == a\nassert solution.longestWord(['z', 'e', 'x', 'd', 'u', 'l', 'o', 'v', 'b', 'u', 'z', 'm', 'm', 'z', 'z', 'l', 'a', 't', 'm', 'n', 'j', 'h']) == a\nassert solution.longestWord(['e', 'b', 'b', 'd', 'l', 'h', 'o', 'y', 'd', 'n', 'l', 'k', 'a', 'q', 'y', 'e', 'u', 'o', 'v', 'p', 'o']) == a\nassert solution.longestWord(['n', 'b', 'y', 'w', 'k', 'b', 't', 'p', 'w', 'f', 't', 'q', 'k', 'r', 'h', 'z', 'g', 'b', 'v', 't', 'x']) == b\nassert solution.longestWord(['g', 'u', 'j', 'e', 'g', 'x', 'n', 'e', 'r', 'n', 'i', 'h', 'i', 'u', 'y', 'k', 't']) == e\nassert solution.longestWord(['u', 'j', 'l', 'r', 'c', 'u', 'g', 'e', 'h', 'x', 'g', 'm', 'x', 'r', 'c', 'u', 'y', 'b', 'j', 'm', 'u', 't', 'i']) == b\nassert solution.longestWord(['e', 'b', 'r', 'f', 'k', 'h', 'c', 't', 'n', 'k', 'l', 'f', 'r', 'j', 'v', 'w', 'z', 'b', 'd']) == b\nassert solution.longestWord(['t', 'w', 'd', 'j', 's', 'z', 'n', 'a', 'u', 'p', 'b', 'q', 'z', 'l', 'l', 'f', 'p', 'p', 't', 'c', 'g', 'x', 'n', 't']) == a\nassert solution.longestWord(['g', 'j', 'i', 't', 'x', 'd', 'o', 'm', 'z', 'h', 'f', 'z', 'v', 'd', 'g', 'k', 'm', 'y', 'p', 'i', 'd', 's', 'k', 'g', 'b', 'b', 'w', 'y', 'q']) == b\nassert solution.longestWord(['g', 'h', 'y', 'a', 'c', 'h', 'n', 'e', 'e', 'd', 's', 'v', 'k', 'x', 'o', 'f', 'g', 'p', 'a', 'h', 'n', 'h', 'y', 'h', 'e', 'n']) == a\nassert solution.longestWord(['j', 'd', 'h', 'c', 'a', 'y', 'h']) == a\nassert solution.longestWord(['l', 'p']) == l\nassert solution.longestWord(['b', 'q', 'd', 'f', 'g', 'u', 'o', 'b', 'g', 'p']) == b\nassert solution.longestWord(['x', 'z', 'x', 'f', 'h', 'm', 'o', 'a', 'r', 's', 'f', 'p', 'o', 'w', 'k', 'i', 'v', 'u', 't', 'b', 'g', 'e', 'p', 'd']) == a\nassert solution.longestWord(['q', 'f', 'h', 'z', 'p', 'n', 'h', 'm', 'q', 'r', 'r', 's', 'x', 'f', 't', 'f', 'v', 's', 'y', 'p', 'm', 'l', 'l', 'd', 'k', 'h', 'q', 'o', 'v', 'r']) == d\nassert solution.longestWord(['w', 'z', 'w', 't', 'g', 'i', 'd', 't', 'g', 'n', 'b', 'x', 'z', 'k', 'p', 'h', 'j', 'y', 'p', 'u', 'l', 'c', 'g']) == b\nassert solution.longestWord(['o', 'c', 'm', 'b', 'm', 'f', 'z', 't', 'u', 'n', 'p', 'i', 'b', 'd', 'u', 'u', 'r', 'x', 'm', 'g', 'z', 'f']) == b\nassert solution.longestWord(['m', 'v', 'c', 'p', 'q', 'z', 'v', 'q', 'q', 'o', 'g', 'k', 'f', 'k', 'l', 'j', 'k', 'r', 'u', 'q', 'f', 'p', 'z']) == c\nassert solution.longestWord(['r', 'x', 'a', 'd', 'b', 'q', 'o', 'l', 'b', 't', 'l', 'k', 'm']) == a\nassert solution.longestWord(['l', 'q', 'l', 'q', 'f', 'r', 'p']) == f\nassert solution.longestWord(['y', 'n', 'k', 'w', 'n', 'w', 'v', 'p', 'f', 'm', 'w', 'v', 'e', 'r', 'k', 'd', 'k', 'v', 't', 'q', 'i', 'i', 'b', 'c', 'l', 'u', 'n', 'c']) == b\nassert solution.longestWord(['w', 'c', 'i', 'x', 't', 'r', 'o', 'v', 'i', 'c', 'v', 'r', 'e', 'h', 'd', 'g', 'f', 'u', 'r', 'a', 's', 'q', 'z', 'n', 'u']) == a\nassert solution.longestWord(['h', 's', 'w', 's', 'e', 'v', 'r', 'd', 'e', 'b', 'j', 'q', 'd', 'r']) == b\nassert solution.longestWord(['c', 'h', 'e', 'h', 'n', 'd', 'j', 'i', 'w', 'c', 'z', 'r', 'e', 'n', 'y', 'w', 'r', 's', 'n']) == c\nassert solution.longestWord(['l', 'u', 'h', 'd', 'h', 'u']) == d\nassert solution.longestWord(['s', 'p', 'e', 'x', 'e', 'i', 'g', 'o', 'k']) == e\nassert solution.longestWord(['r', 'e', 'g', 'k', 'p', 'z', 'w', 'z', 'n', 'x', 'p', 't', 'm', 'm', 'r', 'a', 'l', 'n', 'u', 'f', 'm', 'u', 'v', 'y', 'i', 'b', 's']) == a\nassert solution.longestWord(['f', 'u', 'h', 'f', 'b', 'g', 'h', 'r', 'e', 'l', 'x', 'a', 's', 'q', 'j', 'w']) == a\nassert solution.longestWord(['j']) == j\nassert solution.longestWord(['f', 'z', 'l', 'x', 'k', 'n', 'l', 'j', 'w', 'm', 'b', 'r', 'u', 'e']) == b\nassert solution.longestWord(['v', 'j', 'o', 'r', 'h', 's', 'v', 'x', 'g', 'p', 'x', 'k', 'e', 'c', 'v', 's', 'i', 's', 'h', 'l', 'm', 'c', 'n', 'l', 't', 'h', 'o', 't', 'x']) == c\nassert solution.longestWord(['z', 'c']) == c\nassert solution.longestWord(['s', 'o', 'w', 'o', 'r', 'r', 'f', 'd', 'e', 'm', 'h', 'r', 'g', 'c', 'j']) == c\nassert solution.longestWord(['c', 'm', 'i', 'z', 'y', 'b', 'g', 'm', 'r', 'h', 'i', 'q', 'h', 'x', 'v', 'w', 'c', 'b', 'k', 'b', 'j', 't', 'k', 'w', 't', 'w', 't', 'c', 'h', 'c', 'z']) == b\nassert solution.longestWord(['d', 'g', 'r', 'o', 'b', 'v']) == b\nassert solution.longestWord(['u', 'j', 'g', 'p', 'f', 'd', 'q', 'b', 'k', 't', 'k', 'g', 'v', 'm', 'q', 'u', 'p', 'b', 'h']) == b\nassert solution.longestWord(['k', 'f', 'k', 's', 'e', 'k']) == e\nassert solution.longestWord(['k', 'm', 'b', 'm', 'r', 'g', 'w', 'v', 'b', 'd', 'o', 'v', 't', 's', 'h']) == b\nassert solution.longestWord(['d', 't', 'b', 'l', 'g', 'v', 'z', 'p', 'd', 'l', 'p', 'i', 'h', 'p', 'i', 's', 'g', 'k', 'y', 'e', 's', 'i', 'e', 'm', 'a', 'y', 'v', 't', 'x', 'h', 'i']) == a\nassert solution.longestWord(['g', 'i', 'j', 'j', 'v', 'f', 'f', 't', 'c', 'm', 's', 'i', 'v', 'l', 'v', 'l', 'i', 'j', 'w', 'p', 'c']) == c",
  "inefficient_solution": "class Solution:\n    def longestWord(self, words: List[str]) -> str:\n        cnt, ans = 0, ''\n        s = set(words)\n        words.sort()\n        for w in words:\n            n = len(w)\n            if all(w[:i] in s for i in range(1, n + 1)):\n                word_set = set(w[i] for i in range(n))\n                for w2 in words:\n                    if w2 in s and set(w2).issubset(word_set) and w2 not in s:\n                        s.add(w2)\n                if cnt < n:\n                    cnt, ans = n, w\n                elif cnt == n and w < ans:\n                    ans = w\n        return ans",
  "is_python": true
}