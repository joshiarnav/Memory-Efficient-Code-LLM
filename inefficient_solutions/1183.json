{
  "problem_idx": 1183,
  "task_name": "Maximum Number of Ones",
  "markdown_description": "\nConsider a matrix `M` with dimensions `width * height`, such that every cell has value `0`\u00a0or `1`, and any **square**\u00a0sub-matrix of `M` of size `sideLength * sideLength`\u00a0has at most `maxOnes`\u00a0ones.\n\n\nReturn the maximum possible number of ones that the matrix `M` can have.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** width = 3, height = 3, sideLength = 2, maxOnes = 1\n**Output:** 4\n**Explanation:**\nIn a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one.\nThe best solution that has 4 ones is:\n[1,0,1]\n[0,0,0]\n[1,0,1]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** width = 3, height = 3, sideLength = 2, maxOnes = 2\n**Output:** 6\n**Explanation:**\n[1,0,1]\n[1,0,1]\n[1,0,1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= width, height <= 100`\n* `1 <= sideLength <= width, height`\n* `0 <= maxOnes <= sideLength * sideLength`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumNumberOfOnes(\n        self, width: int, height: int, sideLength: int, maxOnes: int\n    ) -> int:\n        x = sideLength\n        cnt = [0] * (x * x)\n        for i in range(width):\n            for j in range(height):\n                k = (i % x) * x + (j % x)\n                cnt[k] += 1\n        cnt.sort(reverse=True)\n        return sum(cnt[:maxOnes])\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumNumberOfOnes(self, width: int, height: int, sideLength: int, maxOnes: int) -> int:\n        x = sideLength\n        cnt = [0] * (x * x)\n        for i in range(width):\n            for j in range(height):\n                k = (i % x) * x + (j % x)\n                cnt[k] += 1\n        cnt.sort(reverse=True)\n        return sum(cnt[:maxOnes])\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for width, height, sideLength, and maxOnes\n    width = random.randint(1, 101)\n    height = random.randint(1, 101)\n    sideLength = random.randint(1, min(width, height))\n    maxOnes = random.randint(0, sideLength * sideLength)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumNumberOfOnes(width, height, sideLength, maxOnes)\n\n    return width, height, sideLength, maxOnes, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        width, height, sideLength, maxOnes, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumNumberOfOnes(width, height, sideLength, maxOnes) == expected_result\n        print(f\"assert solution.maximumNumberOfOnes({width}, {height}, {sideLength}, {maxOnes}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumNumberOfOnes({width}, {height}, {sideLength}, {maxOnes}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumNumberOfOnes(55, 4, 2, 3) == 166\nassert solution.maximumNumberOfOnes(71, 86, 7, 10) == 1336\nassert solution.maximumNumberOfOnes(14, 3, 1, 0) == 0\nassert solution.maximumNumberOfOnes(41, 73, 28, 94) == 564\nassert solution.maximumNumberOfOnes(43, 14, 4, 4) == 176\nassert solution.maximumNumberOfOnes(19, 25, 18, 34) == 82\nassert solution.maximumNumberOfOnes(23, 3, 1, 0) == 0\nassert solution.maximumNumberOfOnes(1, 72, 1, 1) == 72\nassert solution.maximumNumberOfOnes(9, 32, 2, 2) == 160\nassert solution.maximumNumberOfOnes(76, 21, 20, 135) == 612\nassert solution.maximumNumberOfOnes(32, 31, 26, 622) == 938\nassert solution.maximumNumberOfOnes(11, 89, 2, 0) == 0\nassert solution.maximumNumberOfOnes(43, 4, 1, 1) == 172\nassert solution.maximumNumberOfOnes(28, 46, 13, 98) == 852\nassert solution.maximumNumberOfOnes(98, 55, 14, 156) == 4368\nassert solution.maximumNumberOfOnes(8, 85, 3, 4) == 342\nassert solution.maximumNumberOfOnes(59, 54, 21, 7) == 63\nassert solution.maximumNumberOfOnes(87, 56, 34, 770) == 3894\nassert solution.maximumNumberOfOnes(44, 86, 43, 200) == 486\nassert solution.maximumNumberOfOnes(96, 87, 79, 4872) == 6983\nassert solution.maximumNumberOfOnes(28, 58, 28, 673) == 1402\nassert solution.maximumNumberOfOnes(85, 47, 23, 326) == 2679\nassert solution.maximumNumberOfOnes(38, 85, 4, 7) == 1490\nassert solution.maximumNumberOfOnes(37, 4, 1, 0) == 0\nassert solution.maximumNumberOfOnes(97, 16, 4, 6) == 592\nassert solution.maximumNumberOfOnes(23, 17, 17, 233) == 335\nassert solution.maximumNumberOfOnes(17, 43, 10, 44) == 394\nassert solution.maximumNumberOfOnes(57, 77, 23, 241) == 2433\nassert solution.maximumNumberOfOnes(55, 68, 4, 14) == 3298\nassert solution.maximumNumberOfOnes(41, 42, 31, 747) == 1508\nassert solution.maximumNumberOfOnes(30, 12, 9, 69) == 324\nassert solution.maximumNumberOfOnes(8, 81, 1, 0) == 0\nassert solution.maximumNumberOfOnes(85, 1, 1, 0) == 0\nassert solution.maximumNumberOfOnes(48, 43, 41, 671) == 1054\nassert solution.maximumNumberOfOnes(34, 62, 21, 106) == 636\nassert solution.maximumNumberOfOnes(65, 21, 8, 47) == 1093\nassert solution.maximumNumberOfOnes(31, 27, 7, 40) == 712\nassert solution.maximumNumberOfOnes(99, 58, 24, 227) == 2814\nassert solution.maximumNumberOfOnes(26, 40, 13, 62) == 398\nassert solution.maximumNumberOfOnes(14, 82, 7, 10) == 240\nassert solution.maximumNumberOfOnes(61, 4, 4, 14) == 214\nassert solution.maximumNumberOfOnes(96, 29, 9, 33) == 1263\nassert solution.maximumNumberOfOnes(6, 36, 6, 33) == 198\nassert solution.maximumNumberOfOnes(35, 64, 8, 55) == 1952\nassert solution.maximumNumberOfOnes(40, 76, 3, 0) == 0\nassert solution.maximumNumberOfOnes(34, 68, 28, 5) == 30\nassert solution.maximumNumberOfOnes(8, 6, 2, 4) == 48\nassert solution.maximumNumberOfOnes(87, 84, 65, 4125) == 7208\nassert solution.maximumNumberOfOnes(16, 79, 4, 5) == 400\nassert solution.maximumNumberOfOnes(43, 87, 7, 13) == 1077\nassert solution.maximumNumberOfOnes(28, 14, 1, 0) == 0\nassert solution.maximumNumberOfOnes(19, 5, 3, 8) == 89\nassert solution.maximumNumberOfOnes(14, 79, 10, 90) == 1032\nassert solution.maximumNumberOfOnes(22, 69, 11, 25) == 350\nassert solution.maximumNumberOfOnes(86, 35, 34, 35) == 175\nassert solution.maximumNumberOfOnes(77, 29, 23, 436) == 1954\nassert solution.maximumNumberOfOnes(83, 47, 47, 1315) == 2630\nassert solution.maximumNumberOfOnes(24, 39, 8, 1) == 15\nassert solution.maximumNumberOfOnes(81, 92, 8, 46) == 5472\nassert solution.maximumNumberOfOnes(91, 64, 18, 308) == 5584\nassert solution.maximumNumberOfOnes(10, 18, 1, 1) == 180\nassert solution.maximumNumberOfOnes(43, 37, 34, 15) == 60\nassert solution.maximumNumberOfOnes(69, 67, 52, 935) == 2380\nassert solution.maximumNumberOfOnes(69, 36, 18, 196) == 1568\nassert solution.maximumNumberOfOnes(59, 46, 6, 32) == 2448\nassert solution.maximumNumberOfOnes(82, 6, 1, 1) == 492\nassert solution.maximumNumberOfOnes(2, 50, 1, 1) == 100\nassert solution.maximumNumberOfOnes(69, 51, 1, 1) == 3519\nassert solution.maximumNumberOfOnes(3, 67, 3, 7) == 157\nassert solution.maximumNumberOfOnes(65, 38, 21, 151) == 974\nassert solution.maximumNumberOfOnes(42, 12, 7, 10) == 120\nassert solution.maximumNumberOfOnes(24, 6, 3, 6) == 96\nassert solution.maximumNumberOfOnes(85, 1, 1, 1) == 85\nassert solution.maximumNumberOfOnes(93, 36, 32, 657) == 2331\nassert solution.maximumNumberOfOnes(32, 96, 4, 2) == 384\nassert solution.maximumNumberOfOnes(91, 4, 1, 1) == 364\nassert solution.maximumNumberOfOnes(15, 16, 7, 31) == 168\nassert solution.maximumNumberOfOnes(88, 84, 49, 367) == 1468\nassert solution.maximumNumberOfOnes(76, 65, 48, 1891) == 4527\nassert solution.maximumNumberOfOnes(3, 81, 2, 4) == 243\nassert solution.maximumNumberOfOnes(89, 20, 14, 118) == 1306\nassert solution.maximumNumberOfOnes(47, 24, 11, 86) == 848\nassert solution.maximumNumberOfOnes(80, 93, 8, 50) == 5900\nassert solution.maximumNumberOfOnes(28, 76, 4, 14) == 1862\nassert solution.maximumNumberOfOnes(76, 27, 17, 168) == 1504\nassert solution.maximumNumberOfOnes(30, 83, 16, 111) == 1194\nassert solution.maximumNumberOfOnes(84, 33, 29, 564) == 2016\nassert solution.maximumNumberOfOnes(37, 4, 4, 4) == 40\nassert solution.maximumNumberOfOnes(64, 6, 5, 9) == 180\nassert solution.maximumNumberOfOnes(89, 12, 9, 15) == 300\nassert solution.maximumNumberOfOnes(9, 50, 5, 7) == 140\nassert solution.maximumNumberOfOnes(90, 14, 11, 35) == 558\nassert solution.maximumNumberOfOnes(54, 76, 49, 1455) == 3158\nassert solution.maximumNumberOfOnes(92, 54, 16, 150) == 3180\nassert solution.maximumNumberOfOnes(4, 51, 3, 7) == 170\nassert solution.maximumNumberOfOnes(100, 10, 4, 2) == 150\nassert solution.maximumNumberOfOnes(89, 80, 1, 1) == 7120\nassert solution.maximumNumberOfOnes(17, 21, 8, 24) == 159\nassert solution.maximumNumberOfOnes(69, 8, 4, 2) == 72\nassert solution.maximumNumberOfOnes(90, 1, 1, 0) == 0",
  "inefficient_solution": "class Solution:\n    def maximumNumberOfOnes(\n        self, width: int, height: int, sideLength: int, maxOnes: int\n    ) -> int:\n        x = sideLength\n        cnt = []\n        for i in range(width):\n            for j in range(height):\n                k = (i % x) * x + (j % x)\n                cnt.append(cnt[k] + 1 if k < len(cnt) else 1)\n        for i in range(len(cnt)):\n            for j in range(len(cnt) - 1):\n                if cnt[j] > cnt[j + 1]:\n                    cnt[j], cnt[j + 1] = cnt[j + 1], cnt[j]\n        return sum(cnt[:maxOnes])",
  "is_python": true
}