{
  "problem_idx": 2844,
  "task_name": "Minimum Operations to Make a Special Number",
  "markdown_description": "\nYou are given a **0-indexed** string `num` representing a non-negative integer.\n\n\nIn one operation, you can pick any digit of `num` and delete it. Note that if you delete all the digits of `num`, `num` becomes `0`.\n\n\nReturn *the **minimum number of operations** required to make* `num` *special*.\n\n\nAn integer `x` is considered **special** if it is divisible by `25`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"2245047\"\n**Output:** 2\n**Explanation:** Delete digits num[5] and num[6]. The resulting number is \"22450\" which is special since it is divisible by 25.\nIt can be shown that 2 is the minimum number of operations required to get a special number.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"2908305\"\n**Output:** 3\n**Explanation:** Delete digits num[3], num[4], and num[6]. The resulting number is \"2900\" which is special since it is divisible by 25.\nIt can be shown that 3 is the minimum number of operations required to get a special number.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"10\"\n**Output:** 1\n**Explanation:** Delete digit num[0]. The resulting number is \"0\" which is special since it is divisible by 25.\nIt can be shown that 1 is the minimum number of operations required to get a special number.\n\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 100`\n* `num` only consists of digits `'0'` through `'9'`.\n* `num` does not contain any leading zeros.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumOperations(self, num: str) -> int:\n        @cache\n        def dfs(i: int, k: int) -> int:\n            if i == n:\n                return 0 if k == 0 else n\n            ans = dfs(i + 1, k) + 1\n            ans = min(ans, dfs(i + 1, (k * 10 + int(num[i])) % 25))\n            return ans\n\n        n = len(num)\n        return dfs(0, 0)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumOperations(self, num: str) -> int:\n        @cache\n        def dfs(i: int, k: int) -> int:\n            if i == n:\n                return 0 if k == 0 else n\n            ans = dfs(i + 1, k) + 1\n            ans = min(ans, dfs(i + 1, (k * 10 + int(num[i])) % 25))\n            return ans\n\n        n = len(num)\n        return dfs(0, 0)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random num string\n    num = \"\".join(random.choices(\"0123456789\", k=random.randint(1,10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumOperations(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumOperations(num) == expected_result\n        print(f\"assert solution.minimumOperations('{num}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumOperations('{num}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumOperations('92') == 2\nassert solution.minimumOperations('8') == 1\nassert solution.minimumOperations('7') == 1\nassert solution.minimumOperations('7') == 1\nassert solution.minimumOperations('58') == 2\nassert solution.minimumOperations('1878355284') == 6\nassert solution.minimumOperations('211650503') == 1\nassert solution.minimumOperations('2325337931') == 6\nassert solution.minimumOperations('11928') == 5\nassert solution.minimumOperations('5911787') == 7\nassert solution.minimumOperations('83785') == 1\nassert solution.minimumOperations('6999776') == 7\nassert solution.minimumOperations('3974066381') == 9\nassert solution.minimumOperations('5309894') == 5\nassert solution.minimumOperations('029') == 2\nassert solution.minimumOperations('318537588') == 2\nassert solution.minimumOperations('6') == 1\nassert solution.minimumOperations('662470') == 5\nassert solution.minimumOperations('34351412') == 8\nassert solution.minimumOperations('217617147') == 9\nassert solution.minimumOperations('996914239') == 9\nassert solution.minimumOperations('82345') == 2\nassert solution.minimumOperations('7709338386') == 9\nassert solution.minimumOperations('0') == 0\nassert solution.minimumOperations('253711') == 4\nassert solution.minimumOperations('222') == 3\nassert solution.minimumOperations('54398') == 5\nassert solution.minimumOperations('5315910') == 2\nassert solution.minimumOperations('05463') == 4\nassert solution.minimumOperations('0620171050') == 0\nassert solution.minimumOperations('633215675') == 0\nassert solution.minimumOperations('86510') == 1\nassert solution.minimumOperations('6280') == 3\nassert solution.minimumOperations('253331') == 4\nassert solution.minimumOperations('64') == 2\nassert solution.minimumOperations('353229') == 6\nassert solution.minimumOperations('08495828') == 7\nassert solution.minimumOperations('6812024742') == 9\nassert solution.minimumOperations('10403084') == 3\nassert solution.minimumOperations('177146013') == 8\nassert solution.minimumOperations('209230359') == 4\nassert solution.minimumOperations('56003001') == 1\nassert solution.minimumOperations('73960') == 4\nassert solution.minimumOperations('575404565') == 5\nassert solution.minimumOperations('8495372056') == 2\nassert solution.minimumOperations('88740000') == 0\nassert solution.minimumOperations('2') == 1\nassert solution.minimumOperations('0') == 0\nassert solution.minimumOperations('6048') == 3\nassert solution.minimumOperations('1710044430') == 4\nassert solution.minimumOperations('284107') == 5\nassert solution.minimumOperations('4045858999') == 9\nassert solution.minimumOperations('9317') == 4\nassert solution.minimumOperations('467') == 3\nassert solution.minimumOperations('18') == 2\nassert solution.minimumOperations('53') == 2\nassert solution.minimumOperations('40') == 1\nassert solution.minimumOperations('2037628') == 6\nassert solution.minimumOperations('759876') == 4\nassert solution.minimumOperations('02938') == 4\nassert solution.minimumOperations('2') == 1\nassert solution.minimumOperations('273439156') == 6\nassert solution.minimumOperations('065') == 2\nassert solution.minimumOperations('8789236') == 7\nassert solution.minimumOperations('72335') == 2\nassert solution.minimumOperations('728222383') == 9\nassert solution.minimumOperations('842') == 3\nassert solution.minimumOperations('69020900') == 0\nassert solution.minimumOperations('1') == 1\nassert solution.minimumOperations('88309') == 4\nassert solution.minimumOperations('2504') == 1\nassert solution.minimumOperations('332') == 3\nassert solution.minimumOperations('29812984') == 8\nassert solution.minimumOperations('073') == 2\nassert solution.minimumOperations('3230') == 3\nassert solution.minimumOperations('7646') == 4\nassert solution.minimumOperations('977472') == 6\nassert solution.minimumOperations('400204054') == 3\nassert solution.minimumOperations('375') == 0\nassert solution.minimumOperations('790747962') == 8\nassert solution.minimumOperations('777500') == 0\nassert solution.minimumOperations('20814') == 4\nassert solution.minimumOperations('3') == 1\nassert solution.minimumOperations('6') == 1\nassert solution.minimumOperations('515231518') == 4\nassert solution.minimumOperations('946418789') == 9\nassert solution.minimumOperations('57071572') == 3\nassert solution.minimumOperations('310791242') == 8\nassert solution.minimumOperations('4316') == 4\nassert solution.minimumOperations('535579') == 6\nassert solution.minimumOperations('1906549686') == 9\nassert solution.minimumOperations('7277') == 4\nassert solution.minimumOperations('066732063') == 7\nassert solution.minimumOperations('9483') == 4\nassert solution.minimumOperations('0310') == 2\nassert solution.minimumOperations('81553661') == 8\nassert solution.minimumOperations('22615') == 2\nassert solution.minimumOperations('0371076') == 5\nassert solution.minimumOperations('2461') == 4\nassert solution.minimumOperations('84394701') == 7",
  "inefficient_solution": "class Solution:\n    def minimumOperations(self, num: str) -> int:\n        n = len(num)\n        visited = set()\n        dp = {}\n        for i in range(n):\n            for j in range(n):\n                for k in range(5):\n                    for m in range(5):\n                        for l in range(5):\n                            for o in range(5):\n                                for p in range(5):\n                                    for q in range(5):\n                                        for r in range(5):\n                                            for s in range(5):\n                                                for t in range(5):\n                                                    for u in range(5):\n                                                        for v in range(5):\n                                                            for w in range(5):\n                                                                for x in range(5):\n                                                                    for y in range(5):\n                                                                        for z in range(5):\n                                                                            key = (i, j, k, m, l, o, p, q, r, s, t, u, v, w, x, y, z)\n                                                                            if key in visited:\n                                                                                continue\n                                                                            visited.add(key)\n                                                                            dp[key] = None\n        result = 1000\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                for k in range(10):\n                    new_num = num[:i] + str(k) + num[i+1:j] + num[j+1:]\n                    if not new_num:\n                        continue\n                    count = 0\n                    for digit in new_num:\n                        if int(digit) not in [0, 2, 4, 6, 8]:\n                            count += 1\n                    if count == 0:\n                        result = 0\n                        break\n                    for m in range(5):\n                        for l in range(5):\n                            for o in range(5):\n                                for p in range(5):\n                                    for q in range(5):\n                                        for r in range(5):\n                                            for s in range(5):\n                                                for t in range(5):\n                                                    for u in range(5):\n                                                        for v in range(5):\n                                                            for w in range(5):\n                                                                for x in range(5):\n                                                                    for y in range(5):\n                                                                        for z in range(5):\n                                                                            key = (i, j, k, m, l, o, p, q, r, s, t, u, v, w, x, y, z)\n                                                                            if dp[key] is None:\n                                                                                dp[key] = 1\n                                                                                break\n                                                                            else:\n                                                                                dp[key] += 1\n                        if dp[key] > result:\n                            break\n                    if dp[key] > result:\n                        break\n                if dp[key] > result:\n                    break\n            if dp[key] > result:\n                break\n        return result",
  "is_python": true
}