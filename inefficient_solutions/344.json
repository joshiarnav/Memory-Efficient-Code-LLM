{
  "problem_idx": 344,
  "task_name": "Reverse String",
  "markdown_description": "\nWrite a function that reverses a string. The input string is given as an array of characters `s`.\n\n\nYou must do this by modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm) with `O(1)` extra memory.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n**Output:** [\"o\",\"l\",\"l\",\"e\",\"h\"]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n**Output:** [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s[i]` is a [printable ascii character](https://en.wikipedia.org/wiki/ASCII#Printable_characters).\n\n\n",
  "canonical_solution": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        i, j = 0, len(s) - 1\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def reverseString(self, s):\n        i, j = 0, len(s) - 1\n        while i < j:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s_length = random.randint(1, 10)\n    s = [random.choice(\"abcdefghijklmnopqrstuvwxyz\") for _ in range(s_length)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = list(s)\n    solution.reverseString(expected_result)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        solution.reverseString(s)\n        assert s == expected_result\n        print(f'assert solution.reverseString({s}) == {expected_result}')\n        test_case_generator_results.append(f'assert solution.reverseString({s}) == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.reverseString(['p', 'q', 'i', 'f', 'h', 'c', 'k', 'o', 'q', 's']) == ['p', 'q', 'i', 'f', 'h', 'c', 'k', 'o', 'q', 's']\nassert solution.reverseString(['w']) == ['w']\nassert solution.reverseString(['s', 'd', 'w', 'r', 's', 'w', 'v', 'n', 'g']) == ['s', 'd', 'w', 'r', 's', 'w', 'v', 'n', 'g']\nassert solution.reverseString(['l', 'i', 'c']) == ['l', 'i', 'c']\nassert solution.reverseString(['r', 'u', 'd']) == ['r', 'u', 'd']\nassert solution.reverseString(['i', 'e']) == ['i', 'e']\nassert solution.reverseString(['e']) == ['e']\nassert solution.reverseString(['y', 'c']) == ['y', 'c']\nassert solution.reverseString(['w', 'j', 'p', 'p', 't', 'b', 'u']) == ['w', 'j', 'p', 'p', 't', 'b', 'u']\nassert solution.reverseString(['q', 'd', 'r']) == ['q', 'd', 'r']\nassert solution.reverseString(['b', 'q']) == ['b', 'q']\nassert solution.reverseString(['s', 'h', 'n', 'i', 'a', 'j', 'h', 'x', 's', 't']) == ['s', 'h', 'n', 'i', 'a', 'j', 'h', 'x', 's', 't']\nassert solution.reverseString(['l', 'l', 'x', 'g', 'j', 'c', 'k', 'w']) == ['l', 'l', 'x', 'g', 'j', 'c', 'k', 'w']\nassert solution.reverseString(['u', 'y', 'n', 'o', 'r']) == ['u', 'y', 'n', 'o', 'r']\nassert solution.reverseString(['f', 'l', 'q', 's', 'j', 'j', 'a', 's', 'c', 'l']) == ['f', 'l', 'q', 's', 'j', 'j', 'a', 's', 'c', 'l']\nassert solution.reverseString(['c', 'q', 'j', 'k', 'p']) == ['c', 'q', 'j', 'k', 'p']\nassert solution.reverseString(['z', 'f', 'p', 'j', 'y']) == ['z', 'f', 'p', 'j', 'y']\nassert solution.reverseString(['r', 'c', 'k', 'c', 'h', 'q']) == ['r', 'c', 'k', 'c', 'h', 'q']\nassert solution.reverseString(['u', 'b']) == ['u', 'b']\nassert solution.reverseString(['w']) == ['w']\nassert solution.reverseString(['l', 'i', 'o', 'd', 'a', 'z', 'q']) == ['l', 'i', 'o', 'd', 'a', 'z', 'q']\nassert solution.reverseString(['g', 'a', 's', 'm', 'h', 'z', 'f', 'b']) == ['g', 'a', 's', 'm', 'h', 'z', 'f', 'b']\nassert solution.reverseString(['r', 't']) == ['r', 't']\nassert solution.reverseString(['z', 'c']) == ['z', 'c']\nassert solution.reverseString(['i', 'w']) == ['i', 'w']\nassert solution.reverseString(['y']) == ['y']\nassert solution.reverseString(['u', 'b', 'i', 'v', 's', 'd']) == ['u', 'b', 'i', 'v', 's', 'd']\nassert solution.reverseString(['q', 'a', 'l', 'e']) == ['q', 'a', 'l', 'e']\nassert solution.reverseString(['j', 'x', 'v', 'z', 's', 'p']) == ['j', 'x', 'v', 'z', 's', 'p']\nassert solution.reverseString(['b', 'o', 'p']) == ['b', 'o', 'p']\nassert solution.reverseString(['d', 'y']) == ['d', 'y']\nassert solution.reverseString(['w', 'b', 's', 'g', 's', 'p', 'a', 'l', 'k', 'y']) == ['w', 'b', 's', 'g', 's', 'p', 'a', 'l', 'k', 'y']\nassert solution.reverseString(['l', 'r', 't', 'h', 's', 'g', 'y', 'q']) == ['l', 'r', 't', 'h', 's', 'g', 'y', 'q']\nassert solution.reverseString(['f', 'k', 'b', 'r', 'p', 'u', 'i', 'q', 'd']) == ['f', 'k', 'b', 'r', 'p', 'u', 'i', 'q', 'd']\nassert solution.reverseString(['r', 'c', 'c', 'x', 'w', 'p', 'z']) == ['r', 'c', 'c', 'x', 'w', 'p', 'z']\nassert solution.reverseString(['k', 'k', 'd', 'f', 'm', 'q', 'y', 'u']) == ['k', 'k', 'd', 'f', 'm', 'q', 'y', 'u']\nassert solution.reverseString(['x', 'w', 't', 'y']) == ['x', 'w', 't', 'y']\nassert solution.reverseString(['h', 't', 'z', 'v', 'l']) == ['h', 't', 'z', 'v', 'l']\nassert solution.reverseString(['h', 'z', 'y', 't']) == ['h', 'z', 'y', 't']\nassert solution.reverseString(['h']) == ['h']\nassert solution.reverseString(['z', 'h', 'u', 'c', 'x', 'x', 'm', 'e', 'p']) == ['z', 'h', 'u', 'c', 'x', 'x', 'm', 'e', 'p']\nassert solution.reverseString(['e', 'l', 'd', 'v']) == ['e', 'l', 'd', 'v']\nassert solution.reverseString(['x', 'k', 'w', 'u', 'x', 'w', 'x', 'z', 'm', 'm']) == ['x', 'k', 'w', 'u', 'x', 'w', 'x', 'z', 'm', 'm']\nassert solution.reverseString(['c', 'e']) == ['c', 'e']\nassert solution.reverseString(['g']) == ['g']\nassert solution.reverseString(['p', 'o', 'g', 'c', 'z']) == ['p', 'o', 'g', 'c', 'z']\nassert solution.reverseString(['d', 'j', 't', 'h', 'h', 'c', 'f']) == ['d', 'j', 't', 'h', 'h', 'c', 'f']\nassert solution.reverseString(['e', 'f', 'q']) == ['e', 'f', 'q']\nassert solution.reverseString(['f', 'k', 'c', 'j', 'r', 'w']) == ['f', 'k', 'c', 'j', 'r', 'w']\nassert solution.reverseString(['b', 'o', 'a', 'p', 'p', 'd', 'c', 's', 'w']) == ['b', 'o', 'a', 'p', 'p', 'd', 'c', 's', 'w']\nassert solution.reverseString(['x', 'a', 'r', 'g', 'b']) == ['x', 'a', 'r', 'g', 'b']\nassert solution.reverseString(['g']) == ['g']\nassert solution.reverseString(['c', 't', 'k', 'b', 'v', 'd', 'j', 'p']) == ['c', 't', 'k', 'b', 'v', 'd', 'j', 'p']\nassert solution.reverseString(['p', 'v', 'b']) == ['p', 'v', 'b']\nassert solution.reverseString(['w', 'y', 'k', 'q', 'd', 'g', 'u']) == ['w', 'y', 'k', 'q', 'd', 'g', 'u']\nassert solution.reverseString(['c', 'p', 'q', 'v', 'g', 'o', 'd', 'w', 'd']) == ['c', 'p', 'q', 'v', 'g', 'o', 'd', 'w', 'd']\nassert solution.reverseString(['c', 'p']) == ['c', 'p']\nassert solution.reverseString(['k', 'j']) == ['k', 'j']\nassert solution.reverseString(['c', 'y', 'n', 'y', 's', 'x', 'e', 'p']) == ['c', 'y', 'n', 'y', 's', 'x', 'e', 'p']\nassert solution.reverseString(['m', 'h', 'l', 'b', 'l']) == ['m', 'h', 'l', 'b', 'l']\nassert solution.reverseString(['b', 'm', 'j', 'j', 'q']) == ['b', 'm', 'j', 'j', 'q']\nassert solution.reverseString(['i', 'g']) == ['i', 'g']\nassert solution.reverseString(['h']) == ['h']\nassert solution.reverseString(['f', 'a', 'l', 'i', 'q', 'g', 'g']) == ['f', 'a', 'l', 'i', 'q', 'g', 'g']\nassert solution.reverseString(['s', 'x', 'k', 'd', 'o', 'f']) == ['s', 'x', 'k', 'd', 'o', 'f']\nassert solution.reverseString(['l']) == ['l']\nassert solution.reverseString(['g', 'k', 'e', 'u']) == ['g', 'k', 'e', 'u']\nassert solution.reverseString(['s', 'q', 'k', 'e', 'o', 'b', 'r', 'y', 't']) == ['s', 'q', 'k', 'e', 'o', 'b', 'r', 'y', 't']\nassert solution.reverseString(['k']) == ['k']\nassert solution.reverseString(['q', 'r', 't']) == ['q', 'r', 't']\nassert solution.reverseString(['l', 'r', 's', 'n', 'd', 'r', 't', 'i']) == ['l', 'r', 's', 'n', 'd', 'r', 't', 'i']\nassert solution.reverseString(['z', 'n', 'v', 'u', 'q', 'l']) == ['z', 'n', 'v', 'u', 'q', 'l']\nassert solution.reverseString(['i', 'p', 'p', 'i']) == ['i', 'p', 'p', 'i']\nassert solution.reverseString(['c', 'x', 'm', 'a']) == ['c', 'x', 'm', 'a']\nassert solution.reverseString(['g', 's', 'k']) == ['g', 's', 'k']\nassert solution.reverseString(['v']) == ['v']\nassert solution.reverseString(['o', 'v', 'o', 'f', 's', 'v', 'e', 'i']) == ['o', 'v', 'o', 'f', 's', 'v', 'e', 'i']\nassert solution.reverseString(['g', 'o', 'b', 'n', 'p', 'i', 'j', 'x', 't', 'k']) == ['g', 'o', 'b', 'n', 'p', 'i', 'j', 'x', 't', 'k']\nassert solution.reverseString(['o', 'v', 'v', 'o', 'w']) == ['o', 'v', 'v', 'o', 'w']\nassert solution.reverseString(['e', 'r', 'g']) == ['e', 'r', 'g']\nassert solution.reverseString(['w', 'u', 'h', 'c', 'n', 'l']) == ['w', 'u', 'h', 'c', 'n', 'l']\nassert solution.reverseString(['z', 'd', 'w', 'g', 'k', 't', 'v', 'z', 'v']) == ['z', 'd', 'w', 'g', 'k', 't', 'v', 'z', 'v']\nassert solution.reverseString(['t', 'q', 'x']) == ['t', 'q', 'x']\nassert solution.reverseString(['d', 'p', 's', 'r', 'd', 'n', 'r', 'b', 'e', 'l']) == ['d', 'p', 's', 'r', 'd', 'n', 'r', 'b', 'e', 'l']\nassert solution.reverseString(['v', 'f', 'o', 'x', 'o', 'h']) == ['v', 'f', 'o', 'x', 'o', 'h']\nassert solution.reverseString(['x', 's']) == ['x', 's']\nassert solution.reverseString(['s', 'c', 'w', 's', 'o', 'y', 'q', 'o']) == ['s', 'c', 'w', 's', 'o', 'y', 'q', 'o']\nassert solution.reverseString(['z', 'b', 'n']) == ['z', 'b', 'n']\nassert solution.reverseString(['q', 'j', 'e', 'j', 't', 'u', 'b', 'y', 'y']) == ['q', 'j', 'e', 'j', 't', 'u', 'b', 'y', 'y']\nassert solution.reverseString(['q', 'y', 'n', 'x', 'v', 'a']) == ['q', 'y', 'n', 'x', 'v', 'a']\nassert solution.reverseString(['k', 'v', 'q', 'o', 'u', 'o']) == ['k', 'v', 'q', 'o', 'u', 'o']\nassert solution.reverseString(['e', 'i']) == ['e', 'i']\nassert solution.reverseString(['s', 'y']) == ['s', 'y']\nassert solution.reverseString(['i', 'c', 'm', 'v', 'n']) == ['i', 'c', 'm', 'v', 'n']\nassert solution.reverseString(['s', 'b', 'l', 'p', 'j', 'd', 'k', 'z']) == ['s', 'b', 'l', 'p', 'j', 'd', 'k', 'z']\nassert solution.reverseString(['w', 'l', 'k', 'm', 'm', 'c', 'h', 'f', 't', 'z']) == ['w', 'l', 'k', 'm', 'm', 'c', 'h', 'f', 't', 'z']\nassert solution.reverseString(['v']) == ['v']\nassert solution.reverseString(['c', 'w', 'l', 'w', 'a', 'o']) == ['c', 'w', 'l', 'w', 'a', 'o']\nassert solution.reverseString(['z', 'z', 'e', 'm', 'f', 'e', 'e', 'r']) == ['z', 'z', 'e', 'm', 'f', 'e', 'e', 'r']\nassert solution.reverseString(['q', 'z', 'v', 'o', 'a', 'r']) == ['q', 'z', 'v', 'o', 'a', 'r']",
  "inefficient_solution": "class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        reversed_s = [\"\"] * len(s)\n        for i, c in enumerate(s):\n            reversed_s[i] = c\n\n        temp_s = [\"\" for _ in range(len(s))]\n        for i, c in enumerate(reversed_s):\n            temp_s[i] = c\n\n        s[:] = temp_s[::-1]",
  "is_python": true
}