{
  "problem_idx": 1292,
  "task_name": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
  "markdown_description": "\nGiven a `m x n` matrix `mat` and an integer `threshold`, return *the maximum side-length of a square with a sum less than or equal to* `threshold` *or return* `0` *if there is no such square*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1292.Maximum%20Side%20Length%20of%20a%20Square%20with%20Sum%20Less%20than%20or%20Equal%20to%20Threshold/images/e1.png)\n\n```\n\n**Input:** mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\n**Output:** 2\n**Explanation:** The maximum side length of square with sum less than 4 is 2 as shown.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == mat.length`\n* `n == mat[i].length`\n* `1 <= m, n <= 300`\n* `0 <= mat[i][j] <= 104`\n* `0 <= threshold <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        def check(k: int) -> bool:\n            for i in range(m - k + 1):\n                for j in range(n - k + 1):\n                    v = s[i + k][j + k] - s[i][j + k] - s[i + k][j] + s[i][j]\n                    if v <= threshold:\n                        return True\n            return False\n\n        m, n = len(mat), len(mat[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(mat, 1):\n            for j, x in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + x\n        l, r = 0, min(m, n)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        def check(k: int) -> bool:\n            for i in range(m - k + 1):\n                for j in range(n - k + 1):\n                    v = s[i + k][j + k] - s[i][j + k] - s[i + k][j] + s[i][j]\n                    if v <= threshold:\n                        return True\n            return False\n\n        m, n = len(mat), len(mat[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(mat, 1):\n            for j, x in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + x\n        l, r = 0, min(m, n)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random matrix\n    m, n = random.randint(1, 10), random.randint(1, 10)\n    mat = [[random.randint(0, 10000) for _ in range(n)] for _ in range(m)]\n    \n    # Generate a random threshold\n    threshold = random.randint(0, int(1e5))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxSideLength(mat, threshold)\n\n    return mat, threshold, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        mat, threshold, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxSideLength(mat, threshold) == expected_result\n        print(f\"assert solution.maxSideLength({mat}, {threshold}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxSideLength({mat}, {threshold}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxSideLength([[1477, 5668]], 15397) == 1\nassert solution.maxSideLength([[8977, 4025, 7039, 8391, 3428, 5724], [9517, 3018, 7153, 3272, 2861, 3740], [6135, 3662, 3316, 5128, 8802, 4939], [6391, 3145, 5472, 4913, 9716, 1111], [9772, 4733, 3366, 2902, 1837, 8824], [4777, 5144, 3891, 3808, 5754, 423], [9132, 5744, 8066, 6660, 7975, 5267], [3128, 7978, 7253, 10, 3019, 7438]], 89278) == 4\nassert solution.maxSideLength([[4912, 3120, 6463, 798, 5333, 6283, 3524], [7061, 432, 5183, 2402, 6642, 7310, 9646], [1082, 1016, 2697, 5214, 3995, 7617, 6043], [2272, 7997, 8851, 7086, 7987, 1889, 66], [6443, 7633, 2204, 1246, 2165, 4412, 2338], [159, 51, 6303, 2067, 6536, 134, 3043], [8700, 4921, 9208, 3071, 8080, 308, 290]], 16321) == 2\nassert solution.maxSideLength([[9183, 1212, 8505, 4653, 9493]], 87342) == 1\nassert solution.maxSideLength([[3325, 6361, 810], [4932, 3381, 5331], [9936, 8004, 3934], [4612, 2882, 4134], [7371, 6080, 2412]], 95303) == 3\nassert solution.maxSideLength([[294, 9615, 5565, 7341, 6157, 5868, 7533, 8306], [6616, 2703, 4822, 4466, 5782, 4323, 8785, 9885], [6834, 3582, 3783, 8212, 2181, 5635, 2212, 475], [2398, 2078, 2910, 6211, 973, 756, 307, 3896]], 77628) == 4\nassert solution.maxSideLength([[9094, 7883, 4350, 2458], [4234, 481, 6521, 384], [6377, 788, 1218, 5165]], 94061) == 3\nassert solution.maxSideLength([[2634, 248], [6104, 486], [2839, 2350], [9333, 7919], [7932, 7029], [7562, 4367], [8905, 8427], [6647, 5372]], 76106) == 2\nassert solution.maxSideLength([[5015, 6752, 2581, 3978, 1188, 7188, 6604, 2801], [5121, 8897, 7610, 1590, 8389, 2323, 1299, 7093], [5306, 4867, 2094, 1140, 8483, 4255, 8917, 1518], [1499, 662, 9959, 5788, 6068, 4476, 4928, 9637], [9340, 7205, 350, 2979, 14, 7587, 4460, 7885], [8764, 3217, 4794, 1252, 3355, 360, 1808, 4987], [289, 7993, 1481, 4777, 6005, 1804, 9750, 9705], [9145, 567, 7062, 8045, 3762, 9031, 6891, 6668], [5674, 8734, 6947, 6153, 4872, 3649, 7389, 6956], [495, 5258, 6493, 3623, 7744, 9063, 5674, 3517]], 27460) == 3\nassert solution.maxSideLength([[5471, 7273, 2687, 4968, 7103, 8804, 3997], [4350, 4135, 2416, 5244, 2963, 9001, 3454]], 97924) == 2\nassert solution.maxSideLength([[5604, 680, 8327, 9931, 5327, 5173, 2982], [1597, 3442, 4160, 7712, 4304, 5077, 3026], [4646, 7805, 1113, 7121, 6694, 9784, 4828], [8404, 3592, 9084, 5499, 3692, 9942, 8929], [7096, 5060, 9540, 649, 1287, 679, 6027], [1366, 885, 4845, 3247, 4724, 1256, 1456], [98, 1335, 3898, 747, 5855, 6663, 3952], [1944, 2830, 4166, 9987, 7697, 7843, 1397], [3376, 1238, 4482, 1178, 4251, 4321, 2113], [764, 389, 8840, 2128, 736, 2939, 7069]], 35509) == 3\nassert solution.maxSideLength([[4867, 6742, 3314], [5572, 8485, 4030], [4673, 6767, 1629], [5457, 5173, 225], [3224, 8105, 8237], [7817, 7656, 934], [9314, 7967, 4751], [4425, 6726, 4641]], 46670) == 3\nassert solution.maxSideLength([[8565, 1577, 7306, 7053, 6793, 3912], [3698, 8564, 5982, 1266, 4817, 7423], [3201, 8690, 2953, 622, 9538, 7304], [185, 5091, 7644, 3036, 4514, 5569], [1039, 6954, 1558, 130, 4087, 6618], [5033, 4370, 4366, 1021, 6080, 928], [925, 3443, 2988, 7104, 5795, 1721]], 59915) == 4\nassert solution.maxSideLength([[4288, 6539, 3433, 9893, 6647], [6017, 5872, 7743, 5626, 1530], [3272, 5740, 7659, 7951, 4529]], 82949) == 3\nassert solution.maxSideLength([[7866, 4030, 8546, 9701, 3004, 923, 5929], [150, 3010, 2492, 4394, 8026, 2821, 3691], [6480, 7323, 949, 7523, 9281, 7293, 3809], [9913, 9818, 7289, 6199, 2524, 7619, 9533], [8641, 9867, 4993, 330, 7324, 8053, 6762], [8794, 8478, 6724, 556, 1345, 8929, 4111], [950, 4819, 4453, 3262, 1060, 1735, 5651]], 91965) == 4\nassert solution.maxSideLength([[4873, 5549], [9147, 2715], [2817, 993], [3114, 4246], [2109, 8009], [8678, 9515], [4352, 4455]], 39280) == 2\nassert solution.maxSideLength([[1433, 8837, 5629, 4178, 3736, 7497, 9454, 7828, 5130], [8995, 4303, 1174, 7868, 7572, 8033, 3240, 1659, 2815], [190, 4510, 5037, 3361, 8555, 4496, 3457, 5622, 7363], [9824, 9492, 2059, 317, 1168, 2757, 8718, 9675, 7045], [8497, 5162, 797, 8051, 5427, 5794, 3754, 1082, 1840], [5256, 237, 4231, 3924, 3493, 9413, 5822, 8904, 2266]], 76731) == 4\nassert solution.maxSideLength([[687, 4438, 8381, 3362], [2294, 4696, 7194, 5467], [4751, 4474, 9488, 5095], [5573, 8641, 9834, 99], [9534, 6064, 7177, 9841], [7216, 429, 2198, 5008], [9805, 5089, 6125, 9668], [2447, 222, 566, 3999]], 17816) == 2\nassert solution.maxSideLength([[8641, 7986], [207, 4667], [3741, 4161], [9047, 4334]], 63991) == 2\nassert solution.maxSideLength([[3667, 9375, 9775, 6861, 5411]], 23678) == 1\nassert solution.maxSideLength([[2875, 513, 2600, 8805, 5738, 8439, 7704, 9709, 7528], [7912, 8402, 4002, 5134, 5233, 7460, 5458, 1552, 1601], [2739, 5539, 8624, 6694, 2105, 4071, 6663, 3375, 3635], [6624, 54, 799, 3458, 4567, 9286, 4699, 2926, 8163], [3385, 5398, 4702, 2125, 2941, 3737, 1502, 6694, 5104]], 96450) == 4\nassert solution.maxSideLength([[1478, 5781, 8884, 3667, 1145, 4379, 5593, 5720], [3803, 5727, 2445, 55, 1523, 5912, 6279, 6030], [989, 2782, 3808, 4044, 4396, 7524, 2201, 38], [8654, 9246, 6030, 4987, 4491, 3671, 6969, 6279]], 85002) == 4\nassert solution.maxSideLength([[4766, 3535, 4792, 3919, 2310, 8367, 6278, 6534, 3777, 6279], [9957, 3853, 7990, 4078, 4070, 1525, 9880, 5027, 8954, 9763], [9711, 9522, 5695, 3540, 5141, 2091, 489, 2804, 1527, 1709], [797, 9012, 7217, 6914, 5389, 2594, 4791, 9071, 966, 7773], [5643, 7598, 1265, 4017, 2194, 3671, 5885, 4128, 6408, 2891], [8182, 4243, 2244, 5286, 4765, 3189, 1260, 1213, 5061, 767]], 27367) == 2\nassert solution.maxSideLength([[1502, 9057, 9319, 624], [5484, 8174, 7747, 7469], [5641, 7639, 363, 16], [5963, 5039, 6218, 3116], [3793, 7191, 895, 1812], [7666, 9720, 5707, 7529], [3717, 9561, 2300, 9966]], 68547) == 3\nassert solution.maxSideLength([[9678], [4052], [4300], [4547], [7253], [8736]], 58190) == 1\nassert solution.maxSideLength([[2624, 9757, 8947, 561, 2428, 9668, 8685, 7953, 2023]], 65021) == 1\nassert solution.maxSideLength([[7906, 2960], [2065, 9184], [28, 3884], [6259, 5521], [2526, 2768], [5061, 3727], [59, 8339], [6247, 3535], [4016, 9834], [5456, 9175]], 66604) == 2\nassert solution.maxSideLength([[9210, 4072, 9313, 2716, 5219, 2322, 2086, 4684, 9829], [9464, 7204, 4229, 8845, 7513, 9091, 1414, 4980, 5327], [9112, 7382, 9048, 455, 7249, 2008, 6289, 2097, 181], [9477, 5728, 3526, 6027, 3957, 3013, 9613, 6059, 8698], [3384, 1890, 4265, 7266, 3870, 4584, 8392, 2847, 2635]], 12648) == 2\nassert solution.maxSideLength([[3348, 2733, 7766], [9456, 416, 8771], [3322, 3399, 1489], [4604, 2755, 9462], [8915, 9183, 6445], [2602, 2709, 3240], [2398, 495, 6134]], 23200) == 2\nassert solution.maxSideLength([[1249], [1975], [9024], [8679], [5314], [7841], [9008]], 12041) == 1\nassert solution.maxSideLength([[1295, 9648, 6495, 594], [7260, 2719, 6928, 2993], [5706, 5755, 1523, 263]], 22299) == 2\nassert solution.maxSideLength([[7457], [6079], [8067], [7694], [9044], [2711], [5886], [9053], [7751], [1283]], 64622) == 1\nassert solution.maxSideLength([[8654, 2831, 4410, 3282, 4768, 648, 9946, 8377], [3994, 5962, 922, 3586, 3378, 1530, 7400, 8054], [477, 9470, 7243, 5791, 4126, 8797, 4822, 3467], [7413, 3801, 9904, 9378, 9044, 4871, 9020, 4342], [3111, 8313, 4501, 6545, 2995, 9166, 311, 2294], [6147, 9605, 471, 5494, 6277, 9111, 8188, 3671], [6260, 5204, 7571, 9299, 2946, 6166, 2700, 6703], [1652, 1619, 7439, 5268, 8359, 1033, 7352, 5895], [5997, 303, 8493, 4420, 1688, 5156, 7350, 1419], [1671, 5088, 3414, 4106, 2266, 2270, 9496, 1418]], 83888) == 4\nassert solution.maxSideLength([[8279, 8966, 8387, 7526, 6350, 5229, 2287, 1958, 6885, 5367], [8300, 8891, 8723, 5551, 6692, 6395, 3243, 3857, 1712, 9924]], 66770) == 2\nassert solution.maxSideLength([[936, 2303, 3496, 1686, 4494, 2559, 3366, 4951, 6128], [8796, 6322, 8349, 7174, 6289, 4212, 6064, 7780, 8536], [8148, 8136, 2746, 4666, 6858, 6856, 6197, 7141, 1264], [189, 8405, 2692, 6332, 9114, 4241, 3688, 9239, 5442], [7730, 6652, 7945, 9141, 8692, 7646, 7551, 2234, 7353], [3591, 9344, 305, 1591, 2179, 7912, 118, 5853, 6456], [3463, 8846, 4312, 1702, 7097, 9622, 4851, 9595, 7858], [6420, 8387, 8107, 8012, 5520, 7767, 7441, 9390, 7318], [1021, 6046, 3078, 9874, 9865, 4015, 5266, 7644, 4857], [5141, 3049, 8644, 3505, 6517, 6834, 3264, 8909, 2042]], 35927) == 2\nassert solution.maxSideLength([[6075, 6514, 6226, 4381, 4015, 5922, 136, 4104, 1596, 9768], [4929, 2443, 2405, 7379, 4500, 842, 8433, 5161, 1085, 1988], [5037, 199, 851, 6873, 2997, 6046, 2140, 9153, 4311, 9726], [1670, 9919, 5224, 6044, 1868, 9338, 2149, 4535, 1150, 3229]], 40083) == 3\nassert solution.maxSideLength([[2045, 9166, 2460, 5117, 7091, 8300, 2951], [8921, 4833, 5332, 4469, 7952, 5470, 9171], [2005, 6684, 7029, 7896, 2099, 9550, 4426], [1902, 963, 1897, 34, 4803, 335, 4476], [2240, 9673, 2887, 3714, 6810, 1662, 7488], [3510, 1388, 4737, 9913, 5850, 8609, 8093], [2300, 908, 1396, 7039, 8206, 8297, 1280], [3535, 1637, 4840, 9388, 6564, 6841, 598], [4318, 780, 6512, 1088, 6898, 4239, 8944], [4715, 2060, 1824, 8083, 9041, 568, 6185]], 17609) == 2\nassert solution.maxSideLength([[7149, 9940, 7352, 7319, 9453, 4443, 8557, 4931, 4465], [2141, 8504, 6662, 8595, 3165, 2238, 2254, 2782, 336], [9673, 5716, 798, 1764, 5285, 417, 3112, 2405, 499], [3904, 7324, 282, 1223, 5581, 7148, 4811, 2995, 4220], [7493, 8989, 349, 6427, 491, 9390, 1768, 9207, 1565]], 19851) == 2\nassert solution.maxSideLength([[1290, 9805, 2540, 7599, 2158], [4967, 351, 99, 3528, 9168], [9582, 1343, 337, 8566, 2296], [6860, 909, 9447, 6826, 9936], [9053, 5201, 1474, 186, 4980], [1057, 9338, 9696, 6756, 9252], [1029, 4604, 1115, 705, 2591]], 31223) == 3\nassert solution.maxSideLength([[3656, 8904], [8244, 3213], [7058, 3882], [401, 2678], [6251, 7197], [6571, 6894], [1506, 1845]], 35627) == 2\nassert solution.maxSideLength([[2330, 5103, 4812, 2016, 6037], [6314, 3608, 1135, 3198, 7048], [4036, 2158, 7207, 9061, 6121], [9962, 1954, 4703, 6388, 5598], [2449, 7438, 1959, 7501, 4846], [6205, 7966, 8735, 561, 9501], [3123, 2053, 7109, 5421, 5344], [6930, 2888, 3689, 8978, 9229], [3914, 8181, 6451, 5895, 4246], [2910, 5852, 7224, 7961, 2180]], 82736) == 4\nassert solution.maxSideLength([[6977, 6956, 7633, 6773, 9993, 4757], [7336, 5343, 1046, 3287, 7175, 3527], [5315, 7918, 9968, 9302, 4927, 8495], [6995, 3101, 1020, 4586, 8140, 5655], [7501, 940, 8617, 3467, 1219, 1289]], 46050) == 3\nassert solution.maxSideLength([[7063, 7922, 1709, 8105, 3706, 8298, 7509, 4104, 1539, 1351], [1281, 9302, 3135, 8672, 9999, 6526, 1776, 629, 5114, 8067], [4475, 4645, 8592, 6292, 6872, 4362, 8908, 6345, 698, 8368], [3083, 2490, 598, 2116, 8237, 4750, 6303, 8358, 2470, 6040], [3951, 9767, 3510, 9585, 5634, 1762, 5987, 7340, 402, 7195], [5548, 4827, 6339, 8671, 6414, 3251, 6104, 6119, 4995, 2723]], 9044) == 1\nassert solution.maxSideLength([[2972], [7610], [7246], [5180], [7057], [8204], [5090]], 45637) == 1\nassert solution.maxSideLength([[9676, 6672, 9463, 1263, 7604, 6661, 9980, 7307, 8653], [5179, 5198, 4657, 9483, 5230, 8063, 7836, 8718, 6024], [3816, 978, 706, 9671, 1386, 3707, 2642, 7606, 8744], [7179, 9346, 3212, 3348, 2647, 8943, 5875, 3294, 890], [1373, 204, 8370, 36, 4465, 3329, 9324, 1998, 5770], [2056, 6494, 6209, 6802, 1076, 3505, 3021, 3214, 9805], [992, 9689, 7620, 1435, 5583, 8999, 7520, 8342, 8052], [6765, 120, 9076, 9501, 2774, 3817, 8542, 6576, 9240]], 86222) == 4\nassert solution.maxSideLength([[3776, 4737, 1257, 8393, 1358, 6529], [5979, 7083, 8469, 3946, 9773, 3054], [9384, 4735, 3342, 3896, 8879, 9985], [683, 6832, 3239, 978, 1863, 5692], [5134, 9386, 5771, 8913, 9475, 348], [2906, 9384, 5268, 3021, 9006, 9763], [2520, 2508, 3859, 311, 9437, 7027], [7825, 6429, 2690, 901, 1539, 472], [51, 5665, 9159, 4182, 7378, 2202], [3825, 903, 7455, 7391, 5769, 9479]], 35487) == 3\nassert solution.maxSideLength([[7995, 1686, 1095, 9816], [7333, 8818, 5765, 4697], [1440, 6089, 6729, 3564], [3067, 5926, 4870, 9110], [4078, 868, 5607, 6296], [4729, 2039, 4460, 3259], [1075, 2844, 692, 100], [9086, 6076, 4624, 1877]], 52855) == 3\nassert solution.maxSideLength([[3351, 4158, 1621, 6710, 4353, 3, 2329, 9655, 8948, 6733], [7769, 8622, 4734, 1051, 3596, 3557, 2573, 7902, 4268, 5532], [4197, 352, 5853, 1850, 5582, 2069, 7407, 2654, 5587, 6082]], 3101) == 1\nassert solution.maxSideLength([[5346, 6216, 5959, 9500], [1053, 5545, 4672, 7950], [4047, 8451, 5832, 2353], [1004, 3580, 6405, 1556], [4463, 6944, 2117, 2466], [6260, 4417, 9180, 1468], [4956, 8804, 6720, 5531], [1402, 4975, 6779, 2928], [553, 61, 5167, 9282]], 8338) == 2\nassert solution.maxSideLength([[9660, 3780, 7043, 3269, 6668, 2962], [1852, 1397, 6700, 1780, 1713, 3971], [2880, 5323, 452, 515, 7154, 2682], [9278, 6569, 1903, 8594, 5364, 6913], [9501, 5581, 1842, 1188, 2368, 1055], [2398, 7870, 7502, 4503, 1216, 2385], [653, 5768, 5525, 8806, 9425, 4852], [6759, 6268, 6463, 8896, 5068, 3242], [2537, 9048, 4716, 4360, 5702, 4168], [6449, 7477, 4995, 6445, 6503, 8720]], 66471) == 4\nassert solution.maxSideLength([[538, 3458, 2249], [2041, 4366, 3408], [3862, 3964, 3017], [6635, 5564, 9385], [4228, 6696, 5805]], 62018) == 3\nassert solution.maxSideLength([[2855, 839], [3314, 8846], [8186, 6483], [9896, 3723]], 8355) == 1\nassert solution.maxSideLength([[1187, 1485, 8794, 6739, 3827, 1688], [1387, 5077, 9784, 463, 7832, 8699], [2600, 4542, 6146, 8299, 530, 7199], [6634, 989, 6807, 9108, 2946, 7272], [7747, 8687, 4355, 9142, 83, 9123], [3429, 6123, 7144, 6888, 9615, 6013], [8727, 3298, 8513, 7958, 5665, 9008], [5996, 6101, 3356, 3369, 7379, 2897], [237, 635, 9171, 9929, 2231, 4287]], 7892) == 1\nassert solution.maxSideLength([[9776, 8141, 204, 9891], [6736, 7307, 5256, 5359], [5732, 154, 9673, 4180], [6142, 5120, 6698, 5371], [5522, 8959, 4075, 3596], [5881, 9351, 2802, 2765], [7744, 1668, 1246, 2425], [1556, 9787, 8166, 4209], [7673, 2937, 4829, 8730], [5304, 2285, 4141, 9084]], 33487) == 2\nassert solution.maxSideLength([[7135, 8584], [6163, 50], [4287, 5643], [65, 2435], [179, 6700], [1620, 9644], [2212, 6447], [5055, 7768], [2398, 5236], [8589, 2540]], 29561) == 2\nassert solution.maxSideLength([[6383, 8165, 9710, 481, 9618, 4287, 9130], [3258, 8415, 6916, 910, 9167, 5450, 4788], [3937, 7869, 4491, 2150, 2404, 7536, 3741], [9671, 7863, 9143, 1366, 1834, 4920, 6519], [9968, 3451, 3832, 4227, 3819, 3346, 9812], [7644, 6273, 8541, 9593, 9730, 8875, 1792], [6821, 48, 890, 1846, 1893, 8549, 8883], [6069, 2143, 9026, 7458, 8064, 5862, 890], [8895, 123, 1205, 9599, 8831, 6740, 4944], [9932, 2406, 7271, 2505, 9593, 6633, 4831]], 72355) == 4\nassert solution.maxSideLength([[9031, 5172, 3333], [2479, 8138, 8375]], 51298) == 2\nassert solution.maxSideLength([[4508]], 66228) == 1\nassert solution.maxSideLength([[7912, 1128, 9063, 7182, 5176, 3548], [8106, 2662, 8689, 6979, 3259, 7173], [7273, 8853, 9911, 2592, 42, 5971], [5157, 5441, 1611, 1131, 9382, 3072], [2699, 1112, 5288, 2893, 904, 9874], [2687, 1385, 1060, 1947, 3663, 6488], [1756, 6058, 3660, 8844, 5589, 9774]], 40979) == 3\nassert solution.maxSideLength([[4706, 8808, 4961, 3642, 1242, 5130, 8500], [3847, 6383, 1885, 1019, 6450, 5223, 4661], [195, 9127, 7469, 3084, 5351, 5391, 7890], [2626, 6224, 80, 4319, 5903, 1889, 4376]], 32907) == 2\nassert solution.maxSideLength([[4396, 8395, 6268], [1636, 1838, 7046], [704, 960, 3187], [3757, 7444, 477], [3195, 6626, 409], [6273, 1613, 5002], [9039, 145, 9404]], 98696) == 3\nassert solution.maxSideLength([[5228, 3534], [552, 3610], [3618, 2898], [9279, 6454]], 84991) == 2\nassert solution.maxSideLength([[1955, 3216, 8958, 286, 2111], [2426, 9685, 8060, 3476, 5401]], 37318) == 2\nassert solution.maxSideLength([[1896, 2213, 3953]], 7995) == 1\nassert solution.maxSideLength([[4131], [1256], [6364], [590], [4175], [174], [7544]], 20893) == 1\nassert solution.maxSideLength([[1257, 4091, 4755, 3714, 508, 90, 7604, 5772], [7585, 450, 2048, 7413, 7901, 9905, 6910, 6646]], 9215) == 1\nassert solution.maxSideLength([[9254, 1099, 5321, 2097, 1096, 4363, 4564, 4227], [2589, 1678, 1142, 5805, 1465, 1270, 3667, 6386], [4556, 9357, 4019, 6005, 7509, 9203, 3023, 8575], [1277, 5501, 5557, 9621, 8406, 1442, 643, 4246], [3755, 8872, 327, 86, 5106, 668, 4458, 3090], [1272, 5164, 57, 5488, 2131, 5571, 8908, 7461], [9174, 7199, 7056, 7524, 3280, 3579, 4359, 2299]], 81942) == 4\nassert solution.maxSideLength([[2445, 5027, 3790, 3272, 1517, 1581, 5330], [415, 2379, 6114, 8834, 5, 3718, 175], [1654, 731, 9351, 1353, 437, 8305, 2343], [3644, 7466, 7976, 2609, 7043, 1766, 4115], [7456, 4591, 716, 7158, 8524, 5729, 5941], [8883, 2016, 8889, 8424, 1682, 9847, 2045], [3422, 3604, 7125, 5949, 4539, 2526, 764], [9504, 2836, 6535, 8495, 808, 102, 9573], [2666, 1916, 5554, 9855, 9335, 9745, 7064], [771, 4340, 9176, 5593, 4455, 865, 9257]], 45529) == 3\nassert solution.maxSideLength([[9361, 5529, 3757, 9227, 8946, 3405, 8489], [8874, 6243, 5507, 2710, 3261, 9477, 8969], [3190, 3022, 1790, 102, 6712, 838, 7946], [8460, 7714, 2071, 7429, 1481, 6668, 9184], [5541, 8811, 9506, 1914, 8525, 9816, 4514], [5401, 721, 5509, 449, 1352, 3894, 8311], [2587, 8504, 9324, 1077, 9077, 156, 2382]], 59245) == 3\nassert solution.maxSideLength([[2663, 3688, 5642, 7200, 6514, 7046, 8450], [7036, 503, 7973, 9395, 7651, 1587, 1303], [4722, 1887, 9215, 129, 9299, 2415, 879], [4377, 2866, 5307, 8999, 4736, 6251, 1999], [6385, 4302, 7164, 854, 3221, 697, 6898], [1879, 9537, 534, 5168, 3771, 424, 331], [68, 6203, 5216, 5904, 8247, 4223, 1769]], 29905) == 3\nassert solution.maxSideLength([[5298, 6729, 2900, 1945, 6786, 7416, 3361], [7924, 4794, 5171, 4171, 1810, 730, 8938], [6423, 7989, 7695, 599, 7927, 6866, 395], [2096, 7865, 9768, 6377, 9575, 4406, 8312]], 7549) == 1\nassert solution.maxSideLength([[154], [2687], [6821], [7987], [1621], [7915], [5893]], 59197) == 1\nassert solution.maxSideLength([[4215, 3981, 6864], [1495, 1752, 4880], [8354, 4344, 3819], [648, 703, 1543]], 71905) == 3\nassert solution.maxSideLength([[9629, 5798, 9103], [8415, 7339, 4256], [2055, 5055, 3835], [6378, 5089, 6196], [3328, 6496, 9435], [5400, 4036, 7171]], 32169) == 2\nassert solution.maxSideLength([[4237], [8932], [669]], 29380) == 1\nassert solution.maxSideLength([[3027, 5218, 3630, 838, 3496, 2024], [7384, 9065, 8694, 9947, 7466, 9970], [1897, 6404, 6918, 9195, 6428, 268]], 10510) == 1\nassert solution.maxSideLength([[380, 3320, 9936, 5376, 5926, 2267], [8563, 7936, 2821, 2798, 4894, 8053], [7573, 5436, 8311, 9477, 81, 7493], [4094, 2557, 189, 3231, 8800, 6864], [9891, 1637, 2879, 1226, 3894, 2252], [1518, 1851, 3286, 7392, 4516, 2104], [255, 5372, 1732, 3480, 8163, 6830], [3582, 3324, 6386, 345, 6688, 1310], [2245, 4972, 3826, 7394, 1437, 4349], [6258, 6371, 9969, 3070, 7244, 9000]], 15276) == 2\nassert solution.maxSideLength([[3979, 9538, 127, 727, 4104], [1133, 7947, 4246, 4777, 6326], [4964, 5086, 1777, 1614, 8263], [3323, 8574, 1151, 2748, 703], [6653, 4923, 6706, 5968, 8447], [8989, 5692, 5179, 8143, 5535], [8677, 5816, 8214, 119, 1204], [7988, 1501, 9345, 6662, 9374]], 99648) == 4\nassert solution.maxSideLength([[4647]], 7686) == 1\nassert solution.maxSideLength([[589, 7963], [4969, 5270], [9486, 9691], [3025, 3883], [5828, 2391], [8780, 5924], [1923, 8881], [1377, 9179], [7988, 2103], [3866, 6777]], 83224) == 2\nassert solution.maxSideLength([[3738, 4816, 8812, 5477, 748, 6050, 1723, 4101, 1421], [9911, 4887, 9596, 6710, 1821, 3042, 9622, 9372, 5631], [2867, 7565, 6078, 7127, 6488, 8060, 6455, 1639, 3975], [3992, 6953, 539, 2382, 7593, 8876, 6385, 6038, 6822], [7040, 6455, 1962, 5353, 8908, 9659, 998, 3636, 1428], [6714, 5481, 6506, 4119, 3183, 9012, 1860, 3393, 1286], [2905, 4224, 9155, 1813, 4084, 4051, 5753, 2, 3948], [5483, 8811, 8493, 9897, 8435, 5970, 869, 7505, 1365], [1144, 3540, 9734, 9620, 6332, 8614, 4568, 9560, 4415]], 89941) == 4\nassert solution.maxSideLength([[2067, 1406, 5938, 678], [2238, 8352, 6063, 4362], [4139, 1083, 5923, 376], [9832, 2111, 7709, 5878]], 87394) == 4\nassert solution.maxSideLength([[4618, 5320, 1122, 9994, 9330, 7949, 972, 2445, 8946, 7843], [8131, 5693, 2749, 3581, 4971, 2904, 2950, 2761, 22, 1829], [811, 2854, 2021, 9571, 1882, 9035, 321, 2302, 948, 2467], [8034, 3033, 3312, 3702, 2737, 468, 6030, 4818, 6876, 4464], [6777, 1786, 3403, 5013, 1737, 4197, 8357, 9944, 8566, 7304], [1307, 7189, 236, 6756, 2431, 2043, 4276, 6188, 6301, 1490], [286, 2751, 2336, 1548, 3009, 4046, 5243, 127, 9908, 6177], [6075, 4674, 6943, 8329, 1770, 790, 7633, 4707, 9100, 6464], [5579, 3443, 7605, 49, 1746, 3209, 4250, 2579, 8990, 5091]], 38288) == 3\nassert solution.maxSideLength([[9527], [8751], [8691], [9036], [8525]], 30809) == 1\nassert solution.maxSideLength([[2274, 3317, 633, 4372, 6780, 3280, 5795, 8116, 7501, 9526], [9395, 3939, 6004, 3300, 8152, 1315, 3064, 2617, 3281, 731]], 93512) == 2\nassert solution.maxSideLength([[5704, 1237, 573, 1444], [643, 1231, 599, 9649], [8268, 5629, 3429, 7618], [7710, 4522, 4959, 2663], [8333, 1321, 5654, 6895], [2820, 1753, 9814, 1835], [5566, 3131, 6730, 90], [9337, 7637, 7263, 1523]], 83006) == 4\nassert solution.maxSideLength([[9347, 6718, 5619, 7254], [4543, 9528, 6399, 2495], [8198, 6149, 2067, 256], [8276, 3782, 8755, 1273], [1379, 5732, 3542, 968]], 14758) == 2\nassert solution.maxSideLength([[8663, 6767, 8744, 2229, 5397, 3282, 4280, 8034, 6874, 315]], 44036) == 1\nassert solution.maxSideLength([[266, 6736, 6796, 7604, 7729, 7152, 4658, 6356, 6907, 2042], [2927, 5127, 8747, 2643, 2554, 776, 2119, 4908, 9506, 6625], [6850, 1805, 2047, 7792, 1254, 9220, 2015, 4126, 5388, 2957], [1342, 1447, 5940, 109, 844, 8533, 4028, 3837, 175, 7867], [6379, 366, 5329, 7565, 3083, 108, 1124, 5875, 9462, 3017], [6737, 8851, 1595, 8141, 4064, 6485, 7230, 739, 3803, 9220], [6415, 4921, 3704, 2402, 779, 2607, 4800, 7364, 320, 1771], [1678, 9055, 2464, 2562, 5827, 3137, 8413, 1127, 6526, 1581]], 10085) == 2\nassert solution.maxSideLength([[7948, 9111, 9926, 9186, 2399, 8196, 2216], [8236, 6780, 5769, 2257, 9081, 2281, 5741], [8173, 8347, 4321, 9418, 5171, 2473, 9595], [7262, 2540, 522, 7374, 508, 5679, 4919], [8006, 2440, 9507, 3550, 9861, 377, 7593]], 76374) == 3\nassert solution.maxSideLength([[816, 1880], [823, 3733], [2141, 4159], [5965, 2388], [3396, 4377]], 24011) == 2\nassert solution.maxSideLength([[9681], [4574]], 48407) == 1\nassert solution.maxSideLength([[7706, 4802, 9445, 2772], [9318, 6572, 8231, 8644], [695, 2154, 48, 5582]], 81440) == 3\nassert solution.maxSideLength([[9443, 4414, 272, 2148, 4775, 3274, 4968], [8227, 9921, 92, 1155, 3306, 7833, 5093], [2930, 2245, 8684, 5713, 2129, 8661, 7488], [1398, 1677, 9534, 2594, 5887, 5216, 6843], [4343, 2541, 490, 1925, 6302, 4774, 7019], [9621, 7203, 7481, 3520, 7079, 5965, 3203], [2468, 6413, 1465, 3906, 3873, 4075, 2013], [3639, 6997, 9635, 8661, 523, 4533, 3449]], 31058) == 3\nassert solution.maxSideLength([[4001], [9325], [9967]], 36422) == 1\nassert solution.maxSideLength([[1182, 6527, 2685, 8211, 1652, 9186], [2475, 6977, 6016, 2586, 533, 6394], [1263, 969, 282, 3938, 6370, 2952], [5697, 1983, 9506, 7968, 1019, 8390], [9094, 9137, 4791, 3780, 6371, 5156], [5404, 1987, 6781, 7264, 9598, 4497], [51, 4085, 4393, 1335, 3061, 6413], [548, 329, 8333, 5960, 7542, 6312], [9519, 2006, 2346, 9270, 2802, 3483], [5607, 6277, 9673, 5448, 1047, 3627]], 46151) == 3\nassert solution.maxSideLength([[1631, 9688, 5892, 8346, 6184, 4321, 4108, 4768, 8817], [4627, 9536, 4716, 9588, 8012, 9319, 4033, 4426, 4346], [3369, 7779, 4450, 2744, 1717, 9976, 6941, 7598, 9933]], 85182) == 3\nassert solution.maxSideLength([[122, 8790], [265, 9140], [7693, 1463], [9112, 4437], [6651, 3013], [781, 6503], [5192, 1680]], 98841) == 2\nassert solution.maxSideLength([[7170, 4079, 7385, 2116, 1389], [8421, 9689, 9562, 5869, 9227], [8999, 9454, 6018, 2559, 2235], [9706, 9093, 3085, 469, 4896]], 59430) == 3\nassert solution.maxSideLength([[7778, 8626, 3857, 8782, 8195, 8641, 1686, 6971, 1807, 3868], [373, 8418, 2894, 2081, 4120, 6192, 7252, 9977, 8677, 9923]], 10678) == 1",
  "inefficient_solution": "class Solution:\n    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:\n        def check(k: int) -> bool:\n            for i in range(len(mat)):\n                for j in range(len(mat[i])):\n                    if i + k >= len(mat) or j + k >= len(mat[i]):\n                        continue\n                    v = s[i + k][j + k] - s[i][j + k] - s[i + k][j] + s[i][j]\n                    if v <= threshold:\n                        return True\n            return False\n\n        m, n = len(mat), len(mat[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(mat, 1):\n            for j, x in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + x\n        for i in range(m + 1):\n            for j in range(n + 1):\n                s[i][j] = s[i][j]\n        l, r = 0, min(m, n)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l",
  "is_python": true
}