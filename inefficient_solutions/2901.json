{
  "problem_idx": 2901,
  "task_name": "Longest Unequal Adjacent Groups Subsequence II",
  "markdown_description": "\nYou are given an integer `n`, a **0-indexed** string array `words`, and a **0-indexed** array `groups`, both arrays having length `n`.\n\n\nThe **hamming distance** between two strings of equal length is the number of positions at which the corresponding characters are **different**.\n\n\nYou need to select the **longest** **subsequence** from an array of indices `[0, 1, ..., n - 1]`, such that for the subsequence denoted as `[i0, i1, ..., ik - 1]` having length `k`, the following holds:\n\n\n* For **adjacent** indices in the subsequence, their corresponding groups are **unequal**, i.e., `groups[ij] != groups[ij + 1]`, for each `j` where `0 < j + 1 < k`.\n* `words[ij]` and `words[ij + 1]` are **equal** in length, and the **hamming distance** between them is `1`, where `0 < j + 1 < k`, for all indices in the subsequence.\n\n\nReturn *a string array containing the words corresponding to the indices **(in order)** in the selected subsequence*. If there are multiple answers, return *any of them*.\n\n\nA **subsequence** of an array is a new array that is formed from the original array by deleting some (possibly none) of the elements without disturbing the relative positions of the remaining elements.\n\n\n**Note:** strings in `words` may be **unequal** in length.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 3, words = [\"bab\",\"dab\",\"cab\"], groups = [1,2,2]\n**Output:** [\"bab\",\"cab\"]\n**Explanation:** A subsequence that can be selected is [0,2].\n- groups[0] != groups[2]\n- words[0].length == words[2].length, and the hamming distance between them is 1.\nSo, a valid answer is [words[0],words[2]] = [\"bab\",\"cab\"].\nAnother subsequence that can be selected is [0,1].\n- groups[0] != groups[1]\n- words[0].length == words[1].length, and the hamming distance between them is 1.\nSo, another valid answer is [words[0],words[1]] = [\"bab\",\"dab\"].\nIt can be shown that the length of the longest subsequence of indices that satisfies the conditions is 2.  \n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 4, words = [\"a\",\"b\",\"c\",\"d\"], groups = [1,2,3,4]\n**Output:** [\"a\",\"b\",\"c\",\"d\"]\n**Explanation:** We can select the subsequence [0,1,2,3].\nIt satisfies both conditions.\nHence, the answer is [words[0],words[1],words[2],words[3]] = [\"a\",\"b\",\"c\",\"d\"].\nIt has the longest length among all subsequences of indices that satisfy the conditions.\nHence, it is the only answer.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n == words.length == groups.length <= 1000`\n* `1 <= words[i].length <= 10`\n* `1 <= groups[i] <= n`\n* `words` consists of **distinct** strings.\n* `words[i]` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def getWordsInLongestSubsequence(\n        self, n: int, words: List[str], groups: List[int]\n    ) -> List[str]:\n        def check(s: str, t: str) -> bool:\n            return len(s) == len(t) and sum(a != b for a, b in zip(s, t)) == 1\n\n        f = [1] * n\n        g = [-1] * n\n        mx = 1\n        for i, x in enumerate(groups):\n            for j, y in enumerate(groups[:i]):\n                if x != y and f[i] < f[j] + 1 and check(words[i], words[j]):\n                    f[i] = f[j] + 1\n                    g[i] = j\n                    mx = max(mx, f[i])\n        ans = []\n        for i in range(n):\n            if f[i] == mx:\n                j = i\n                while j >= 0:\n                    ans.append(words[j])\n                    j = g[j]\n                break\n        return ans[::-1]\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for n\n    n = random.randint(1, 11)\n    \n    # Generate random words list\n    words = random.choices(string.ascii_lowercase, k=n)\n    \n    # Generate random groups list\n    groups = random.choices(range(1, n+1), k=n)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.getWordsInLongestSubsequence(n, words, groups)\n\n    return n, words, groups, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, words, groups, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.getWordsInLongestSubsequence(n, words, groups) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.getWordsInLongestSubsequence({n}, {words}, {groups}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.getWordsInLongestSubsequence({n}, {words}, {groups}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.getWordsInLongestSubsequence(2, ['u', 'g'], [1, 1]) == ['u']\nassert solution.getWordsInLongestSubsequence(7, ['m', 'r', 'e', 'l', 'u', 'm', 'n'], [7, 3, 2, 7, 6, 1, 1]) == ['m', 'r', 'e', 'l', 'u', 'm']\nassert solution.getWordsInLongestSubsequence(2, ['h', 'a'], [1, 2]) == ['h', 'a']\nassert solution.getWordsInLongestSubsequence(2, ['b', 's'], [1, 1]) == ['b']\nassert solution.getWordsInLongestSubsequence(3, ['x', 's', 'z'], [1, 2, 1]) == ['x', 's', 'z']\nassert solution.getWordsInLongestSubsequence(9, ['v', 't', 'l', 's', 'j', 'v', 'c', 'm', 'b'], [1, 5, 2, 5, 5, 9, 9, 4, 3]) == ['v', 't', 'l', 's', 'v', 'm', 'b']\nassert solution.getWordsInLongestSubsequence(10, ['x', 'i', 'f', 'a', 'd', 'y', 'z', 'q', 'r', 'r'], [4, 3, 6, 6, 7, 3, 4, 10, 7, 1]) == ['x', 'i', 'f', 'd', 'y', 'z', 'q', 'r']\nassert solution.getWordsInLongestSubsequence(10, ['y', 's', 'c', 'e', 'j', 'z', 'l', 'd', 'w', 'w'], [8, 7, 4, 6, 3, 10, 7, 6, 6, 3]) == ['y', 's', 'c', 'e', 'j', 'z', 'l', 'd', 'w']\nassert solution.getWordsInLongestSubsequence(3, ['a', 'n', 'n'], [2, 1, 1]) == ['a', 'n']\nassert solution.getWordsInLongestSubsequence(4, ['x', 'g', 'u', 'h'], [2, 4, 1, 1]) == ['x', 'g', 'u']\nassert solution.getWordsInLongestSubsequence(8, ['x', 'e', 'v', 'j', 'j', 'g', 't', 'j'], [4, 3, 1, 8, 7, 2, 1, 5]) == ['x', 'e', 'v', 'j', 'g', 't', 'j']\nassert solution.getWordsInLongestSubsequence(7, ['d', 'm', 'r', 'b', 's', 't', 'f'], [7, 1, 1, 4, 3, 1, 7]) == ['d', 'm', 'b', 's', 't', 'f']\nassert solution.getWordsInLongestSubsequence(10, ['s', 'j', 'i', 'h', 'z', 't', 'h', 'k', 'w', 'u'], [4, 6, 1, 7, 4, 1, 9, 10, 9, 10]) == ['s', 'j', 'i', 'h', 'z', 't', 'h', 'k', 'w', 'u']\nassert solution.getWordsInLongestSubsequence(7, ['p', 'b', 't', 'g', 'c', 'e', 'g'], [3, 7, 4, 3, 5, 4, 2]) == ['p', 'b', 't', 'g', 'c', 'e', 'g']\nassert solution.getWordsInLongestSubsequence(1, ['n'], [1]) == ['n']\nassert solution.getWordsInLongestSubsequence(9, ['g', 'a', 'e', 'y', 'o', 'u', 'p', 'z', 'r'], [8, 2, 9, 6, 8, 3, 9, 2, 2]) == ['g', 'a', 'e', 'y', 'o', 'u', 'p', 'z']\nassert solution.getWordsInLongestSubsequence(2, ['m', 'r'], [2, 1]) == ['m', 'r']\nassert solution.getWordsInLongestSubsequence(1, ['i'], [1]) == ['i']\nassert solution.getWordsInLongestSubsequence(10, ['c', 'a', 'z', 'i', 'j', 't', 'n', 'r', 'b', 'z'], [4, 1, 4, 5, 9, 5, 4, 2, 7, 1]) == ['c', 'a', 'z', 'i', 'j', 't', 'n', 'r', 'b', 'z']\nassert solution.getWordsInLongestSubsequence(11, ['x', 'm', 'w', 's', 'z', 'm', 'c', 's', 'k', 'n', 't'], [10, 9, 4, 6, 4, 3, 8, 11, 10, 11, 4]) == ['x', 'm', 'w', 's', 'z', 'm', 'c', 's', 'k', 'n', 't']\nassert solution.getWordsInLongestSubsequence(3, ['j', 'o', 'q'], [2, 3, 3]) == ['j', 'o']\nassert solution.getWordsInLongestSubsequence(3, ['a', 'a', 'x'], [3, 3, 3]) == ['a']\nassert solution.getWordsInLongestSubsequence(9, ['o', 'e', 'i', 'v', 'u', 'd', 'u', 'f', 'g'], [4, 2, 4, 7, 9, 2, 3, 9, 5]) == ['o', 'e', 'i', 'v', 'u', 'd', 'u', 'f', 'g']\nassert solution.getWordsInLongestSubsequence(5, ['r', 'b', 'x', 'y', 't'], [4, 4, 4, 3, 1]) == ['r', 'y', 't']\nassert solution.getWordsInLongestSubsequence(4, ['e', 't', 'y', 'r'], [3, 1, 2, 4]) == ['e', 't', 'y', 'r']\nassert solution.getWordsInLongestSubsequence(9, ['x', 'k', 'p', 'i', 'h', 'u', 'c', 'k', 'a'], [4, 5, 6, 1, 8, 9, 7, 7, 7]) == ['x', 'k', 'p', 'i', 'h', 'u', 'c']\nassert solution.getWordsInLongestSubsequence(11, ['t', 'j', 'r', 'y', 'z', 'v', 'n', 'c', 'p', 'g', 'p'], [5, 10, 1, 9, 9, 5, 10, 5, 2, 5, 2]) == ['t', 'j', 'r', 'y', 'v', 'n', 'c', 'p', 'g', 'p']\nassert solution.getWordsInLongestSubsequence(6, ['r', 't', 'b', 'k', 'v', 'p'], [3, 5, 5, 5, 4, 3]) == ['r', 't', 'v', 'p']\nassert solution.getWordsInLongestSubsequence(4, ['w', 'q', 'h', 'u'], [3, 3, 4, 1]) == ['w', 'h', 'u']\nassert solution.getWordsInLongestSubsequence(9, ['c', 'l', 'h', 'o', 'e', 'd', 'p', 'f', 'e'], [6, 1, 5, 8, 5, 3, 1, 8, 9]) == ['c', 'l', 'h', 'o', 'e', 'd', 'p', 'f', 'e']\nassert solution.getWordsInLongestSubsequence(10, ['l', 'y', 'd', 'c', 't', 'p', 'y', 'z', 'f', 'f'], [8, 7, 6, 3, 9, 8, 1, 4, 6, 2]) == ['l', 'y', 'd', 'c', 't', 'p', 'y', 'z', 'f']\nassert solution.getWordsInLongestSubsequence(4, ['k', 'g', 't', 'c'], [2, 1, 4, 2]) == ['k', 'g', 't', 'c']\nassert solution.getWordsInLongestSubsequence(2, ['r', 'p'], [1, 2]) == ['r', 'p']\nassert solution.getWordsInLongestSubsequence(11, ['s', 'k', 'x', 'l', 'b', 'f', 'i', 'z', 'v', 'j', 'm'], [6, 9, 11, 1, 9, 6, 11, 10, 9, 8, 3]) == ['s', 'k', 'x', 'l', 'b', 'f', 'i', 'z', 'v', 'j', 'm']\nassert solution.getWordsInLongestSubsequence(6, ['p', 'k', 't', 'k', 'r', 'z'], [3, 5, 3, 2, 5, 1]) == ['p', 'k', 't', 'k', 'r', 'z']\nassert solution.getWordsInLongestSubsequence(8, ['x', 'i', 'g', 'f', 'q', 'g', 'v', 'o'], [3, 7, 5, 8, 1, 8, 5, 1]) == ['x', 'i', 'g', 'f', 'q', 'g', 'v', 'o']\nassert solution.getWordsInLongestSubsequence(7, ['k', 'y', 'm', 'g', 'r', 'w', 'm'], [2, 2, 1, 3, 3, 3, 2]) == ['k', 'm', 'g', 'm']\nassert solution.getWordsInLongestSubsequence(7, ['d', 'r', 'u', 's', 'e', 'f', 'a'], [1, 2, 4, 6, 3, 4, 3]) == ['d', 'r', 'u', 's', 'e', 'f', 'a']\nassert solution.getWordsInLongestSubsequence(11, ['s', 'w', 's', 'b', 'v', 'p', 'x', 'j', 'm', 'k', 'c'], [6, 11, 11, 6, 3, 10, 6, 8, 10, 1, 10]) == ['s', 'w', 'b', 'v', 'p', 'x', 'j', 'm', 'k', 'c']\nassert solution.getWordsInLongestSubsequence(10, ['e', 'g', 'b', 'i', 'f', 'f', 'a', 'x', 'g', 'y'], [3, 10, 10, 10, 9, 2, 7, 5, 5, 7]) == ['e', 'g', 'f', 'a', 'x', 'y']\nassert solution.getWordsInLongestSubsequence(10, ['b', 't', 'h', 'e', 'p', 'i', 'o', 'j', 's', 'u'], [6, 6, 8, 2, 10, 10, 6, 9, 5, 7]) == ['b', 'h', 'e', 'p', 'o', 'j', 's', 'u']\nassert solution.getWordsInLongestSubsequence(11, ['k', 'o', 'h', 'x', 'h', 'n', 'm', 'w', 's', 'm', 'o'], [7, 9, 6, 1, 3, 5, 1, 8, 5, 11, 11]) == ['k', 'o', 'h', 'x', 'h', 'n', 'm', 'w', 's', 'm']\nassert solution.getWordsInLongestSubsequence(1, ['s'], [1]) == ['s']\nassert solution.getWordsInLongestSubsequence(3, ['j', 'o', 't'], [3, 3, 3]) == ['j']\nassert solution.getWordsInLongestSubsequence(6, ['w', 'i', 'u', 'i', 'l', 'y'], [1, 4, 2, 2, 1, 4]) == ['w', 'i', 'u', 'l', 'y']\nassert solution.getWordsInLongestSubsequence(2, ['n', 'i'], [1, 1]) == ['n']\nassert solution.getWordsInLongestSubsequence(2, ['y', 'k'], [1, 1]) == ['y']\nassert solution.getWordsInLongestSubsequence(3, ['w', 'w', 't'], [3, 3, 1]) == ['w', 't']\nassert solution.getWordsInLongestSubsequence(1, ['s'], [1]) == ['s']\nassert solution.getWordsInLongestSubsequence(2, ['y', 'p'], [1, 2]) == ['y', 'p']\nassert solution.getWordsInLongestSubsequence(8, ['g', 'h', 'm', 'b', 'j', 'p', 'f', 'o'], [3, 2, 7, 4, 5, 7, 8, 2]) == ['g', 'h', 'm', 'b', 'j', 'p', 'f', 'o']\nassert solution.getWordsInLongestSubsequence(9, ['j', 'x', 'k', 'm', 's', 'q', 'd', 'm', 'x'], [3, 3, 7, 8, 2, 7, 5, 2, 4]) == ['j', 'k', 'm', 's', 'q', 'd', 'm', 'x']\nassert solution.getWordsInLongestSubsequence(10, ['n', 'z', 'e', 'u', 'l', 'm', 'p', 'v', 'e', 'm'], [4, 10, 10, 7, 10, 7, 4, 2, 6, 10]) == ['n', 'z', 'u', 'l', 'm', 'p', 'v', 'e', 'm']\nassert solution.getWordsInLongestSubsequence(5, ['d', 'm', 'f', 'a', 'a'], [4, 5, 4, 2, 4]) == ['d', 'm', 'f', 'a']\nassert solution.getWordsInLongestSubsequence(11, ['g', 'd', 'o', 'q', 'o', 'l', 'q', 'u', 'a', 'r', 'm'], [10, 11, 7, 9, 7, 6, 10, 5, 9, 1, 5]) == ['g', 'd', 'o', 'q', 'o', 'l', 'q', 'u', 'a', 'r', 'm']\nassert solution.getWordsInLongestSubsequence(7, ['q', 'i', 'k', 'q', 't', 'u', 'f'], [1, 4, 3, 1, 3, 1, 7]) == ['q', 'i', 'k', 'q', 't', 'u', 'f']\nassert solution.getWordsInLongestSubsequence(4, ['v', 'c', 'o', 'i'], [3, 3, 2, 4]) == ['v', 'o', 'i']\nassert solution.getWordsInLongestSubsequence(2, ['g', 'j'], [1, 2]) == ['g', 'j']\nassert solution.getWordsInLongestSubsequence(2, ['v', 'y'], [1, 1]) == ['v']\nassert solution.getWordsInLongestSubsequence(1, ['h'], [1]) == ['h']\nassert solution.getWordsInLongestSubsequence(2, ['n', 'k'], [2, 1]) == ['n', 'k']\nassert solution.getWordsInLongestSubsequence(10, ['r', 'y', 'n', 'k', 'p', 'z', 'p', 'v', 'c', 'x'], [5, 8, 6, 10, 6, 3, 1, 9, 7, 7]) == ['r', 'y', 'n', 'k', 'p', 'z', 'p', 'v', 'c']\nassert solution.getWordsInLongestSubsequence(5, ['f', 'q', 'a', 'e', 'i'], [3, 2, 2, 5, 4]) == ['f', 'q', 'e', 'i']\nassert solution.getWordsInLongestSubsequence(6, ['u', 'r', 'c', 'o', 's', 's'], [4, 4, 4, 3, 2, 3]) == ['u', 'o', 's']\nassert solution.getWordsInLongestSubsequence(7, ['t', 'm', 'r', 'x', 'r', 'b', 'q'], [6, 1, 2, 2, 5, 1, 3]) == ['t', 'm', 'x', 'r', 'b', 'q']\nassert solution.getWordsInLongestSubsequence(4, ['k', 'i', 't', 'p'], [4, 1, 2, 1]) == ['k', 'i', 't', 'p']\nassert solution.getWordsInLongestSubsequence(4, ['l', 'b', 'q', 's'], [3, 4, 3, 2]) == ['l', 'b', 'q', 's']\nassert solution.getWordsInLongestSubsequence(2, ['w', 'g'], [1, 2]) == ['w', 'g']\nassert solution.getWordsInLongestSubsequence(11, ['c', 'd', 'x', 'z', 'u', 'r', 'e', 'l', 'm', 'c', 'm'], [5, 6, 3, 7, 4, 5, 1, 6, 7, 4, 1]) == ['c', 'd', 'x', 'z', 'u', 'r', 'e', 'l', 'm', 'c', 'm']\nassert solution.getWordsInLongestSubsequence(11, ['j', 'e', 'i', 'e', 'x', 'e', 'o', 'v', 'g', 'm', 'j'], [7, 10, 9, 11, 9, 1, 3, 1, 9, 11, 8]) == ['j', 'e', 'i', 'e', 'x', 'e', 'o', 'v', 'g', 'm', 'j']\nassert solution.getWordsInLongestSubsequence(5, ['t', 'i', 'p', 'x', 'e'], [1, 2, 1, 1, 3]) == ['t', 'i', 'p', 'e']\nassert solution.getWordsInLongestSubsequence(6, ['m', 'l', 'o', 'e', 'c', 'l'], [5, 6, 6, 2, 4, 4]) == ['m', 'l', 'e', 'c']\nassert solution.getWordsInLongestSubsequence(5, ['v', 'b', 'w', 'f', 'j'], [1, 3, 3, 5, 4]) == ['v', 'b', 'f', 'j']\nassert solution.getWordsInLongestSubsequence(2, ['u', 'g'], [1, 2]) == ['u', 'g']\nassert solution.getWordsInLongestSubsequence(7, ['f', 'd', 'l', 's', 'd', 't', 'i'], [4, 3, 7, 1, 2, 6, 6]) == ['f', 'd', 'l', 's', 'd', 't']\nassert solution.getWordsInLongestSubsequence(11, ['r', 'w', 'x', 'g', 'k', 'h', 'd', 'x', 't', 'i', 'g'], [1, 9, 1, 10, 5, 5, 9, 6, 4, 8, 5]) == ['r', 'w', 'x', 'g', 'k', 'd', 'x', 't', 'i', 'g']\nassert solution.getWordsInLongestSubsequence(7, ['t', 'y', 's', 'r', 'f', 'i', 'k'], [5, 2, 1, 3, 1, 3, 3]) == ['t', 'y', 's', 'r', 'f', 'i']\nassert solution.getWordsInLongestSubsequence(2, ['l', 'h'], [2, 1]) == ['l', 'h']\nassert solution.getWordsInLongestSubsequence(10, ['g', 'p', 'w', 'y', 'y', 's', 'm', 'h', 'a', 'y'], [7, 2, 6, 6, 2, 1, 2, 8, 10, 5]) == ['g', 'p', 'w', 'y', 's', 'm', 'h', 'a', 'y']\nassert solution.getWordsInLongestSubsequence(8, ['r', 'y', 'p', 'r', 'y', 'p', 'g', 'p'], [1, 5, 2, 2, 8, 3, 4, 3]) == ['r', 'y', 'p', 'y', 'p', 'g', 'p']\nassert solution.getWordsInLongestSubsequence(5, ['j', 'z', 'g', 'o', 'u'], [3, 4, 4, 2, 2]) == ['j', 'z', 'o']\nassert solution.getWordsInLongestSubsequence(8, ['v', 'e', 'n', 'z', 'w', 'm', 'o', 'z'], [7, 2, 1, 1, 1, 6, 5, 6]) == ['v', 'e', 'n', 'm', 'o', 'z']\nassert solution.getWordsInLongestSubsequence(6, ['t', 'o', 'q', 'e', 't', 'e'], [6, 2, 5, 5, 3, 1]) == ['t', 'o', 'q', 't', 'e']\nassert solution.getWordsInLongestSubsequence(6, ['s', 'q', 'i', 'h', 'o', 'q'], [4, 1, 4, 3, 5, 2]) == ['s', 'q', 'i', 'h', 'o', 'q']\nassert solution.getWordsInLongestSubsequence(8, ['m', 'y', 't', 't', 'f', 'x', 'z', 'm'], [7, 4, 8, 1, 7, 4, 4, 3]) == ['m', 'y', 't', 'f', 'x', 'm']\nassert solution.getWordsInLongestSubsequence(6, ['m', 'k', 'w', 'p', 'c', 'd'], [4, 6, 5, 4, 4, 2]) == ['m', 'k', 'w', 'p', 'd']\nassert solution.getWordsInLongestSubsequence(1, ['s'], [1]) == ['s']\nassert solution.getWordsInLongestSubsequence(5, ['g', 's', 'p', 'u', 'k'], [3, 4, 1, 3, 2]) == ['g', 's', 'p', 'u', 'k']\nassert solution.getWordsInLongestSubsequence(11, ['y', 's', 'x', 'i', 'n', 'o', 'a', 'j', 'n', 'l', 'k'], [1, 6, 3, 1, 6, 5, 11, 11, 2, 9, 7]) == ['y', 's', 'x', 'i', 'n', 'o', 'a', 'n', 'l', 'k']\nassert solution.getWordsInLongestSubsequence(10, ['h', 'w', 'k', 'x', 'e', 'o', 'i', 'd', 'x', 'e'], [4, 3, 10, 4, 4, 9, 7, 8, 10, 8]) == ['h', 'w', 'k', 'x', 'o', 'i', 'd', 'x', 'e']\nassert solution.getWordsInLongestSubsequence(3, ['u', 'y', 'i'], [3, 3, 2]) == ['u', 'i']\nassert solution.getWordsInLongestSubsequence(3, ['w', 'l', 'w'], [2, 2, 3]) == ['l', 'w']\nassert solution.getWordsInLongestSubsequence(10, ['a', 'n', 'v', 't', 'u', 'q', 'p', 'r', 'v', 'l'], [1, 9, 3, 8, 5, 3, 4, 10, 7, 3]) == ['a', 'n', 'v', 't', 'u', 'q', 'p', 'r', 'v', 'l']\nassert solution.getWordsInLongestSubsequence(3, ['h', 'c', 'r'], [3, 3, 1]) == ['h', 'r']\nassert solution.getWordsInLongestSubsequence(1, ['q'], [1]) == ['q']\nassert solution.getWordsInLongestSubsequence(5, ['y', 'j', 'p', 'm', 'o'], [3, 1, 1, 5, 1]) == ['y', 'j', 'm', 'o']\nassert solution.getWordsInLongestSubsequence(8, ['g', 'p', 'p', 's', 'c', 'u', 'd', 'p'], [4, 1, 5, 7, 6, 8, 3, 5]) == ['g', 'p', 's', 'c', 'u', 'd', 'p']\nassert solution.getWordsInLongestSubsequence(8, ['y', 'f', 'z', 'j', 'z', 'f', 'm', 'f'], [2, 4, 8, 4, 5, 3, 6, 3]) == ['y', 'f', 'z', 'j', 'z', 'f', 'm', 'f']\nassert solution.getWordsInLongestSubsequence(11, ['g', 'j', 'o', 'b', 'm', 'd', 'e', 'b', 'x', 'f', 'd'], [5, 10, 4, 1, 1, 3, 4, 2, 4, 1, 2]) == ['g', 'j', 'o', 'b', 'd', 'e', 'b', 'x', 'f', 'd']\nassert solution.getWordsInLongestSubsequence(3, ['y', 'q', 'r'], [1, 3, 2]) == ['y', 'q', 'r']",
  "inefficient_solution": "class Solution:\n    def getWordsInLongestSubsequence(\n        self, n: int, words: List[str], groups: List[int]\n    ) -> List[str]:\n        def check(s: str, t: str) -> bool:\n            return len(s) == len(t) and sum(a != b for a, b in zip(s, t)) == 1\n\n        f = [0] * (n * n)\n        g = [-1] * (n * n)\n        mx = 0\n        for i in range(n):\n            for j in range(n):\n                for k in range(n):\n                    if groups[i] != groups[k] and f[j * n + i] < f[k * n + j] + 1 and check(words[i], words[k]):\n                        f[j * n + i] = f[k * n + j] + 1\n                        g[j * n + i] = k * n + j\n                        mx = max(mx, f[j * n + i])\n        ans = []\n        for i in range(n * n):\n            if f[i] == mx:\n                j = i\n                while j >= 0:\n                    ans.append(words[j % n])\n                    j = g[j]\n                break\n        return ans[::-1]",
  "is_python": true
}