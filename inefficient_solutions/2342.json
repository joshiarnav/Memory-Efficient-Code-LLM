{
  "problem_idx": 2342,
  "task_name": "Max Sum of a Pair With Equal Sum of Digits",
  "markdown_description": "\nYou are given a **0-indexed** array `nums` consisting of **positive** integers. You can choose two indices `i` and `j`, such that `i != j`, and the sum of digits of the number `nums[i]` is equal to that of `nums[j]`.\n\n\nReturn *the **maximum** value of* `nums[i] + nums[j]` *that you can obtain over all possible indices* `i` *and* `j` *that satisfy the conditions.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [18,43,36,13,7]\n**Output:** 54\n**Explanation:** The pairs (i, j) that satisfy the conditions are:\n- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.\n- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.\nSo the maximum sum that we can obtain is 54.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,12,19,14]\n**Output:** -1\n**Explanation:** There are no two numbers that satisfy the conditions, so we return -1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n        d = defaultdict(int)\n        ans = -1\n        for v in nums:\n            x, y = 0, v\n            while y:\n                x += y % 10\n                y //= 10\n            if x in d:\n                ans = max(ans, d[x] + v)\n            d[x] = max(d[x], v)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import defaultdict\n\nclass Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n        d = defaultdict(int)\n        ans = -1\n        for v in nums:\n            x, y = 0, v\n            while y:\n                x += y % 10\n                y //= 10\n            if x in d:\n                ans = max(ans, d[x] + v)\n            d[x] = max(d[x], v)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumSum(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumSum(nums) == expected_result\n        test_case_generator_results.append(f\"assert solution.maximumSum({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumSum([13, 10, 2, 51, 14, 77]) == -1\nassert solution.maximumSum([21, 35, 15, 23, 28]) == -1\nassert solution.maximumSum([48, 9, 35, 2, 99, 76, 70, 22, 72]) == 81\nassert solution.maximumSum([16, 2, 46]) == -1\nassert solution.maximumSum([69, 67, 96, 65, 26, 28]) == 165\nassert solution.maximumSum([31, 64, 38, 59, 75, 76, 92, 18, 42]) == 130\nassert solution.maximumSum([4, 6, 18, 76, 87, 72, 36, 63, 86]) == 135\nassert solution.maximumSum([35, 93, 47, 52, 31, 21]) == -1\nassert solution.maximumSum([67, 30, 3, 41]) == 33\nassert solution.maximumSum([25, 32, 100, 15, 87, 93, 66, 19, 33, 6]) == 159\nassert solution.maximumSum([85, 25, 78, 32, 20, 65, 17]) == -1\nassert solution.maximumSum([50, 6, 93]) == -1\nassert solution.maximumSum([61, 32, 81, 26, 76, 43, 7, 28, 88]) == 104\nassert solution.maximumSum([48, 80, 91, 66, 94, 24]) == 114\nassert solution.maximumSum([56, 89, 47, 88, 30, 53]) == 103\nassert solution.maximumSum([50, 99, 58, 44, 77, 18, 39, 73, 60, 82]) == 155\nassert solution.maximumSum([7, 44, 70]) == 77\nassert solution.maximumSum([57, 34, 92, 15, 22, 40]) == 62\nassert solution.maximumSum([29, 61, 88, 87, 18]) == -1\nassert solution.maximumSum([23, 98, 26, 68, 6]) == -1\nassert solution.maximumSum([4, 55, 43, 69]) == -1\nassert solution.maximumSum([48, 51]) == -1\nassert solution.maximumSum([74, 51, 48, 39, 56, 80]) == 130\nassert solution.maximumSum([66, 28, 89, 90, 22, 45, 94]) == 135\nassert solution.maximumSum([2, 50, 26, 61, 92, 37, 73, 47, 91]) == 164\nassert solution.maximumSum([74, 87, 56, 91, 35, 22, 38, 96, 88]) == 183\nassert solution.maximumSum([56, 42, 70, 59, 32, 51, 44, 17]) == 93\nassert solution.maximumSum([73, 91, 4, 23, 44, 70, 68, 52, 65]) == 164\nassert solution.maximumSum([63, 58, 10, 35, 76, 30, 83, 75, 81]) == 144\nassert solution.maximumSum([2, 6]) == -1\nassert solution.maximumSum([35, 84, 85, 72, 32, 60, 41, 93]) == 177\nassert solution.maximumSum([55, 49, 39, 15, 83, 7, 50]) == -1\nassert solution.maximumSum([93, 57, 81, 56, 46, 64, 84, 37]) == 177\nassert solution.maximumSum([41, 66, 96, 54, 83, 86, 98]) == -1\nassert solution.maximumSum([47, 74, 70, 89, 36]) == 121\nassert solution.maximumSum([48, 37, 72, 73, 35, 69, 45]) == 117\nassert solution.maximumSum([2, 67, 17]) == -1\nassert solution.maximumSum([27, 5, 45, 100]) == 72\nassert solution.maximumSum([21, 7]) == -1\nassert solution.maximumSum([35, 40, 3]) == -1\nassert solution.maximumSum([38, 6, 34]) == -1\nassert solution.maximumSum([96, 87, 54, 20, 62, 72, 58, 45, 91]) == 183\nassert solution.maximumSum([87, 53, 64, 83, 31, 37, 96, 11, 35]) == 183\nassert solution.maximumSum([15, 50, 98, 31, 41, 82, 48, 67, 89, 30]) == 187\nassert solution.maximumSum([58, 7]) == -1\nassert solution.maximumSum([99, 78, 69, 49, 61, 59, 33, 94, 63, 37]) == 147\nassert solution.maximumSum([93, 32, 63, 3, 46]) == -1\nassert solution.maximumSum([58, 81, 36, 34, 6]) == 117\nassert solution.maximumSum([98, 45]) == -1\nassert solution.maximumSum([44, 40, 96, 21, 93, 16, 72, 94]) == -1\nassert solution.maximumSum([86, 89, 47, 12, 92, 44, 25]) == 139\nassert solution.maximumSum([38, 39, 3, 13, 78, 54, 2, 95]) == -1\nassert solution.maximumSum([16, 25, 55, 100, 89, 44, 26]) == 70\nassert solution.maximumSum([69, 72, 43, 95, 66, 20, 82, 42]) == -1\nassert solution.maximumSum([38, 64, 74, 77, 58]) == 112\nassert solution.maximumSum([85, 1, 31, 21, 19, 77, 61, 12, 63, 89]) == 33\nassert solution.maximumSum([52, 2, 76, 16, 26]) == 68\nassert solution.maximumSum([57, 96]) == -1\nassert solution.maximumSum([95, 55, 14, 51, 36, 20, 15]) == 66\nassert solution.maximumSum([90, 56, 95, 32]) == -1\nassert solution.maximumSum([4, 77, 53, 57, 37, 54, 98, 32]) == -1\nassert solution.maximumSum([67, 72, 13, 30, 43, 16, 95]) == 59\nassert solution.maximumSum([51, 37, 92, 38, 97, 1, 78]) == 130\nassert solution.maximumSum([27, 16, 96, 63, 29, 8, 53, 47, 69]) == 165\nassert solution.maximumSum([83, 52, 82, 79, 20, 72, 67, 28, 26]) == 110\nassert solution.maximumSum([9, 40, 74, 28, 54, 69, 6, 91, 34]) == 119\nassert solution.maximumSum([94, 66, 74]) == -1\nassert solution.maximumSum([80, 43, 93, 6]) == -1\nassert solution.maximumSum([59, 72, 83, 31]) == -1\nassert solution.maximumSum([52, 40]) == -1\nassert solution.maximumSum([27, 18, 11, 21]) == 45\nassert solution.maximumSum([85, 60, 24, 100]) == 84\nassert solution.maximumSum([70, 75, 60, 18, 82, 15]) == 75\nassert solution.maximumSum([97, 24, 34]) == -1\nassert solution.maximumSum([71, 61, 19, 2]) == -1\nassert solution.maximumSum([5, 52, 9]) == -1\nassert solution.maximumSum([52, 94, 21, 64, 4, 72, 23]) == -1\nassert solution.maximumSum([79, 19, 87, 42, 34, 35, 69, 37, 50]) == 156\nassert solution.maximumSum([33, 12, 62, 97, 66, 22]) == -1\nassert solution.maximumSum([74, 82]) == -1\nassert solution.maximumSum([92, 8, 98, 11, 88, 44]) == 52\nassert solution.maximumSum([66, 69, 76, 39, 88, 31, 2, 36, 4, 40]) == 105\nassert solution.maximumSum([14, 13, 42, 36]) == -1\nassert solution.maximumSum([41, 4, 86, 67, 10, 7, 28, 62, 20]) == -1\nassert solution.maximumSum([35, 50, 51]) == -1\nassert solution.maximumSum([14, 17, 72, 42, 16, 49, 7, 39]) == 23\nassert solution.maximumSum([16, 4, 5, 42, 87, 49, 94, 86, 1]) == 143\nassert solution.maximumSum([86, 13, 1, 44, 2, 7, 15, 67]) == -1\nassert solution.maximumSum([69, 86]) == -1\nassert solution.maximumSum([64, 62, 32, 94, 57, 70, 59, 53]) == 115\nassert solution.maximumSum([42, 44, 71, 63]) == 115\nassert solution.maximumSum([20, 87, 16, 90, 82, 1, 91, 7]) == 173\nassert solution.maximumSum([98, 84, 37, 89, 42]) == 187\nassert solution.maximumSum([77, 2, 89, 6, 52, 20]) == 22\nassert solution.maximumSum([98, 27, 10, 83, 76, 22, 71, 15, 53]) == 124\nassert solution.maximumSum([65, 19, 50, 44, 69, 9]) == -1\nassert solution.maximumSum([2, 52, 44, 60, 23, 16, 92, 83, 87, 66]) == 175\nassert solution.maximumSum([84, 8, 7, 41, 86]) == -1\nassert solution.maximumSum([96, 58, 84, 73, 23, 4, 86, 33, 71, 88]) == -1\nassert solution.maximumSum([56, 49, 87, 90, 44, 61]) == -1",
  "inefficient_solution": "class Solution:\n    def maximumSum(self, nums: List[int]) -> int:\n        d = {}\n        ans = -1\n        for v in nums:\n            digits = []\n            temp = v\n            while temp:\n                digits.append(temp % 10)\n                temp //= 10\n            for i in range(len(digits)):\n                for j in range(i + 1, len(digits)):\n                    x, y = 0, 0\n                    for k in range(len(digits)):\n                        if k != i and k != j:\n                            x += digits[k]\n                        if k != i:\n                            y += digits[k]\n                    if x in d:\n                        d[x].append((v, y))\n                    else:\n                        d[x] = [(v, y)]\n            for k, v in d.items():\n                for z in v:\n                    if z[1] == x:\n                        ans = max(ans, z[0] + v)\n        return ans",
  "is_python": true
}