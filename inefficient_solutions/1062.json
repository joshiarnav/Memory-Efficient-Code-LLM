{
  "problem_idx": 1062,
  "task_name": "Longest Repeating Substring",
  "markdown_description": "\nGiven a string `s`, return *the length of the longest repeating substrings*. If no repeating substring exists, return `0`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abcd\"\n**Output:** 0\n**Explanation:** There is no repeating substring.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abbaba\"\n**Output:** 2\n**Explanation:** The longest repeating substrings are \"ab\" and \"ba\", each of which occurs twice.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"aabcaabdaab\"\n**Output:** 3\n**Explanation:** The longest repeating substring is \"aab\", which occurs 3 times.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2000`\n* `s` consists of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestRepeatingSubstring(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1 if i else 1\n                    ans = max(ans, dp[i][j])\n        return ans\n",
  "test_case_generator": "\nimport random\n\n# Test case generator for the task \"Longest Repeating Substring\"\n\nclass Solution:\n    def longestRepeatingSubstring(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        ans = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1 if i else 1\n                    ans = max(ans, dp[i][j])\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random string with lowercase English letters\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestRepeatingSubstring(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestRepeatingSubstring(s) == expected_result\n        print(f'assert solution.longestRepeatingSubstring(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.longestRepeatingSubstring(\"{s}\") == {expected_result}')\n\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # Number of test cases to generate\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestRepeatingSubstring(\"qkn\") == 0\nassert solution.longestRepeatingSubstring(\"crg\") == 0\nassert solution.longestRepeatingSubstring(\"urdcjctz\") == 1\nassert solution.longestRepeatingSubstring(\"bp\") == 0\nassert solution.longestRepeatingSubstring(\"ojavgazd\") == 1\nassert solution.longestRepeatingSubstring(\"dlocxoo\") == 1\nassert solution.longestRepeatingSubstring(\"hc\") == 0\nassert solution.longestRepeatingSubstring(\"d\") == 0\nassert solution.longestRepeatingSubstring(\"dimrq\") == 0\nassert solution.longestRepeatingSubstring(\"ihfraxngm\") == 0\nassert solution.longestRepeatingSubstring(\"dovylpvuh\") == 1\nassert solution.longestRepeatingSubstring(\"n\") == 0\nassert solution.longestRepeatingSubstring(\"v\") == 0\nassert solution.longestRepeatingSubstring(\"gqafmur\") == 0\nassert solution.longestRepeatingSubstring(\"xsymyro\") == 1\nassert solution.longestRepeatingSubstring(\"rs\") == 0\nassert solution.longestRepeatingSubstring(\"qb\") == 0\nassert solution.longestRepeatingSubstring(\"kxxuogtvju\") == 1\nassert solution.longestRepeatingSubstring(\"xqoupzlv\") == 0\nassert solution.longestRepeatingSubstring(\"jvnnu\") == 1\nassert solution.longestRepeatingSubstring(\"ozmbw\") == 0\nassert solution.longestRepeatingSubstring(\"ubw\") == 0\nassert solution.longestRepeatingSubstring(\"pszuhlnkmu\") == 1\nassert solution.longestRepeatingSubstring(\"efrgim\") == 0\nassert solution.longestRepeatingSubstring(\"abegmyz\") == 0\nassert solution.longestRepeatingSubstring(\"hxeahfyym\") == 1\nassert solution.longestRepeatingSubstring(\"bdr\") == 0\nassert solution.longestRepeatingSubstring(\"mgtecjt\") == 1\nassert solution.longestRepeatingSubstring(\"ppsyjcl\") == 1\nassert solution.longestRepeatingSubstring(\"idsi\") == 1\nassert solution.longestRepeatingSubstring(\"bthihgk\") == 1\nassert solution.longestRepeatingSubstring(\"brakues\") == 0\nassert solution.longestRepeatingSubstring(\"bcpikhi\") == 1\nassert solution.longestRepeatingSubstring(\"fjc\") == 0\nassert solution.longestRepeatingSubstring(\"gl\") == 0\nassert solution.longestRepeatingSubstring(\"ipocgmjfz\") == 0\nassert solution.longestRepeatingSubstring(\"yhibhrl\") == 1\nassert solution.longestRepeatingSubstring(\"qtmj\") == 0\nassert solution.longestRepeatingSubstring(\"xgjn\") == 0\nassert solution.longestRepeatingSubstring(\"hvkaxrxtz\") == 1\nassert solution.longestRepeatingSubstring(\"zai\") == 0\nassert solution.longestRepeatingSubstring(\"cgfdgrjle\") == 1\nassert solution.longestRepeatingSubstring(\"gp\") == 0\nassert solution.longestRepeatingSubstring(\"q\") == 0\nassert solution.longestRepeatingSubstring(\"bbgpka\") == 1\nassert solution.longestRepeatingSubstring(\"qvegjprcm\") == 0\nassert solution.longestRepeatingSubstring(\"qnbyyk\") == 1\nassert solution.longestRepeatingSubstring(\"xywrikwz\") == 1\nassert solution.longestRepeatingSubstring(\"jknx\") == 0\nassert solution.longestRepeatingSubstring(\"xqiasjzx\") == 1\nassert solution.longestRepeatingSubstring(\"dqyxn\") == 0\nassert solution.longestRepeatingSubstring(\"snxsev\") == 1\nassert solution.longestRepeatingSubstring(\"irmjlydkwq\") == 0\nassert solution.longestRepeatingSubstring(\"b\") == 0\nassert solution.longestRepeatingSubstring(\"dbddthxo\") == 1\nassert solution.longestRepeatingSubstring(\"jxgcmpt\") == 0\nassert solution.longestRepeatingSubstring(\"moixazpblw\") == 0\nassert solution.longestRepeatingSubstring(\"cyedb\") == 0\nassert solution.longestRepeatingSubstring(\"guogd\") == 1\nassert solution.longestRepeatingSubstring(\"qfgyhcbp\") == 0\nassert solution.longestRepeatingSubstring(\"pcumkkbl\") == 1\nassert solution.longestRepeatingSubstring(\"rtjyuyzasz\") == 1\nassert solution.longestRepeatingSubstring(\"ggydzmvptb\") == 1\nassert solution.longestRepeatingSubstring(\"lwsepsth\") == 1\nassert solution.longestRepeatingSubstring(\"ye\") == 0\nassert solution.longestRepeatingSubstring(\"nugiaxxhzo\") == 1\nassert solution.longestRepeatingSubstring(\"rrbqtwpod\") == 1\nassert solution.longestRepeatingSubstring(\"gubcxumil\") == 1\nassert solution.longestRepeatingSubstring(\"w\") == 0\nassert solution.longestRepeatingSubstring(\"gjvyy\") == 1\nassert solution.longestRepeatingSubstring(\"kih\") == 0\nassert solution.longestRepeatingSubstring(\"s\") == 0\nassert solution.longestRepeatingSubstring(\"y\") == 0\nassert solution.longestRepeatingSubstring(\"iubistwo\") == 1\nassert solution.longestRepeatingSubstring(\"razat\") == 1\nassert solution.longestRepeatingSubstring(\"fgvcmoj\") == 0\nassert solution.longestRepeatingSubstring(\"oqul\") == 0\nassert solution.longestRepeatingSubstring(\"qenl\") == 0\nassert solution.longestRepeatingSubstring(\"t\") == 0\nassert solution.longestRepeatingSubstring(\"fehp\") == 0\nassert solution.longestRepeatingSubstring(\"cowwavbch\") == 1\nassert solution.longestRepeatingSubstring(\"ef\") == 0\nassert solution.longestRepeatingSubstring(\"seendlgriy\") == 1\nassert solution.longestRepeatingSubstring(\"lvgkqyuun\") == 1\nassert solution.longestRepeatingSubstring(\"yekzhru\") == 0\nassert solution.longestRepeatingSubstring(\"sedmvma\") == 1\nassert solution.longestRepeatingSubstring(\"la\") == 0\nassert solution.longestRepeatingSubstring(\"aw\") == 0\nassert solution.longestRepeatingSubstring(\"gv\") == 0\nassert solution.longestRepeatingSubstring(\"lz\") == 0\nassert solution.longestRepeatingSubstring(\"shjnlfoa\") == 0\nassert solution.longestRepeatingSubstring(\"wogt\") == 0\nassert solution.longestRepeatingSubstring(\"idycg\") == 0\nassert solution.longestRepeatingSubstring(\"epogurq\") == 0\nassert solution.longestRepeatingSubstring(\"oqbnau\") == 0\nassert solution.longestRepeatingSubstring(\"vwcii\") == 1\nassert solution.longestRepeatingSubstring(\"ijnzyes\") == 0\nassert solution.longestRepeatingSubstring(\"ngiqnttp\") == 1\nassert solution.longestRepeatingSubstring(\"y\") == 0\nassert solution.longestRepeatingSubstring(\"dfy\") == 0",
  "inefficient_solution": "class Solution:\n    def longestRepeatingSubstring(self, s: str) -> int:\n        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        ans = 0\n        for i in range(n):\n            for j in range(n):\n                dp[i + 1][j + 1] = 0\n                if i < n and j < n and s[i] == s[j]:\n                    if i == 0 or j == 0:\n                        dp[i + 1][j + 1] = 1\n                    elif s[i] == s[j - 1]:\n                        dp[i + 1][j + 1] = dp[i][j]\n                    else:\n                        dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n                    ans = max(ans, dp[i + 1][j + 1])\n        return ans",
  "is_python": true
}