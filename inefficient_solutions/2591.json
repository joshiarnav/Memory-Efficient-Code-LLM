{
  "problem_idx": 2591,
  "task_name": "Distribute Money to Maximum Children",
  "markdown_description": "\nYou are given an integer `money` denoting the amount of money (in dollars) that you have and another integer `children` denoting the number of children that you must distribute the money to.\n\n\nYou have to distribute the money according to the following rules:\n\n\n* All money must be distributed.\n* Everyone must receive at least `1` dollar.\n* Nobody receives `4` dollars.\n\n\nReturn *the **maximum** number of children who may receive **exactly*** `8` *dollars if you distribute the money according to the aforementioned rules*. If there is no way to distribute the money, return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** money = 20, children = 3\n**Output:** 1\n**Explanation:** \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** money = 16, children = 2\n**Output:** 2\n**Explanation:** Each child can be given 8 dollars.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= money <= 200`\n* `2 <= children <= 30`\n\n\n",
  "canonical_solution": "class Solution:\n    def distMoney(self, money: int, children: int) -> int:\n        if money < children:\n            return -1\n        if money > 8 * children:\n            return children - 1\n        if money == 8 * children - 4:\n            return children - 2\n        # money-8x >= children-x, x <= (money-children)/7\n        return (money - children) // 7\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def distMoney(self, money: int, children: int) -> int:\n        if money < children:\n            return -1\n        if money > 8 * children:\n            return children - 1\n        if money == 8 * children - 4:\n            return children - 2\n        # money-8x >= children-x, x <= (money-children)/7\n        return (money - children) // 7\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random money and children values\n    money = random.randint(1, 201)\n    children = random.randint(2, 31)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.distMoney(money, children)\n\n    return money, children, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        money, children, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.distMoney(money, children) == expected_result\n        print(f\"assert solution.distMoney({money}, {children}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.distMoney({money}, {children}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.distMoney(33, 14) == 2\nassert solution.distMoney(66, 27) == 5\nassert solution.distMoney(137, 15) == 14\nassert solution.distMoney(105, 23) == 11\nassert solution.distMoney(28, 15) == 1\nassert solution.distMoney(124, 25) == 14\nassert solution.distMoney(33, 20) == 1\nassert solution.distMoney(67, 30) == 5\nassert solution.distMoney(185, 30) == 22\nassert solution.distMoney(129, 2) == 1\nassert solution.distMoney(127, 6) == 5\nassert solution.distMoney(88, 18) == 10\nassert solution.distMoney(161, 22) == 19\nassert solution.distMoney(3, 8) == -1\nassert solution.distMoney(4, 23) == -1\nassert solution.distMoney(100, 23) == 11\nassert solution.distMoney(104, 11) == 10\nassert solution.distMoney(54, 9) == 6\nassert solution.distMoney(162, 25) == 19\nassert solution.distMoney(41, 21) == 2\nassert solution.distMoney(140, 25) == 16\nassert solution.distMoney(114, 16) == 14\nassert solution.distMoney(193, 31) == 23\nassert solution.distMoney(99, 4) == 3\nassert solution.distMoney(47, 7) == 5\nassert solution.distMoney(146, 15) == 14\nassert solution.distMoney(180, 28) == 21\nassert solution.distMoney(106, 22) == 12\nassert solution.distMoney(48, 17) == 4\nassert solution.distMoney(79, 8) == 7\nassert solution.distMoney(38, 9) == 4\nassert solution.distMoney(144, 27) == 16\nassert solution.distMoney(71, 21) == 7\nassert solution.distMoney(159, 27) == 18\nassert solution.distMoney(81, 18) == 9\nassert solution.distMoney(62, 11) == 7\nassert solution.distMoney(144, 13) == 12\nassert solution.distMoney(34, 21) == 1\nassert solution.distMoney(38, 13) == 3\nassert solution.distMoney(38, 20) == 2\nassert solution.distMoney(97, 11) == 10\nassert solution.distMoney(149, 31) == 16\nassert solution.distMoney(130, 19) == 15\nassert solution.distMoney(89, 13) == 10\nassert solution.distMoney(125, 20) == 15\nassert solution.distMoney(123, 31) == 13\nassert solution.distMoney(63, 28) == 5\nassert solution.distMoney(148, 8) == 7\nassert solution.distMoney(183, 26) == 22\nassert solution.distMoney(128, 25) == 14\nassert solution.distMoney(32, 21) == 1\nassert solution.distMoney(175, 18) == 17\nassert solution.distMoney(54, 22) == 4\nassert solution.distMoney(83, 17) == 9\nassert solution.distMoney(87, 26) == 8\nassert solution.distMoney(196, 26) == 24\nassert solution.distMoney(71, 19) == 7\nassert solution.distMoney(53, 4) == 3\nassert solution.distMoney(138, 8) == 7\nassert solution.distMoney(154, 22) == 18\nassert solution.distMoney(82, 27) == 7\nassert solution.distMoney(153, 29) == 17\nassert solution.distMoney(42, 28) == 2\nassert solution.distMoney(95, 11) == 10\nassert solution.distMoney(5, 13) == -1\nassert solution.distMoney(73, 28) == 6\nassert solution.distMoney(50, 30) == 2\nassert solution.distMoney(93, 16) == 11\nassert solution.distMoney(81, 25) == 8\nassert solution.distMoney(144, 10) == 9\nassert solution.distMoney(38, 19) == 2\nassert solution.distMoney(36, 22) == 2\nassert solution.distMoney(83, 30) == 7\nassert solution.distMoney(140, 31) == 15\nassert solution.distMoney(53, 28) == 3\nassert solution.distMoney(58, 19) == 5\nassert solution.distMoney(193, 5) == 4\nassert solution.distMoney(53, 8) == 6\nassert solution.distMoney(6, 18) == -1\nassert solution.distMoney(129, 5) == 4\nassert solution.distMoney(91, 24) == 9\nassert solution.distMoney(94, 3) == 2\nassert solution.distMoney(180, 25) == 22\nassert solution.distMoney(106, 7) == 6\nassert solution.distMoney(93, 26) == 9\nassert solution.distMoney(45, 7) == 5\nassert solution.distMoney(23, 30) == -1\nassert solution.distMoney(69, 9) == 8\nassert solution.distMoney(108, 2) == 1\nassert solution.distMoney(31, 9) == 3\nassert solution.distMoney(18, 22) == -1\nassert solution.distMoney(171, 19) == 18\nassert solution.distMoney(95, 10) == 9\nassert solution.distMoney(175, 31) == 20\nassert solution.distMoney(68, 20) == 6\nassert solution.distMoney(77, 30) == 6\nassert solution.distMoney(168, 21) == 21\nassert solution.distMoney(66, 22) == 6\nassert solution.distMoney(26, 4) == 3\nassert solution.distMoney(9, 21) == -1",
  "inefficient_solution": "class Solution:\n    def distMoney(self, money: int, children: int) -> int:\n        extra_money = [0] * children\n        for i in range(children):\n            if money >= 1:\n                extra_money[i] += 1\n                money -= 1\n        for i in range(children):\n            if money >= 2 and money - 2 >= 1:\n                extra_money[i] += 1\n                money -= 2\n        for i in range(children):\n            if money >= 4 and money - 4 >= 1:\n                extra_money[i] += 1\n                money -= 4\n        for i in range(children):\n            if money >= 8 and money - 8 >= 1:\n                extra_money[i] += 1\n                money -= 8\n        nines = 0\n        for i in range(children):\n            if extra_money[i] >= 9:\n                nines += 1\n                extra_money[i] = 8\n        eights = 0\n        for i in range(children):\n            if extra_money[i] == 8:\n                eights += 1\n        if money == 0:\n            return nines\n        elif money == 1 or money == 2:\n            return nines + 1\n        elif money >= 3:\n            return nines + 2\n        else:\n            return -1",
  "is_python": true
}