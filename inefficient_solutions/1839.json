{
  "problem_idx": 1839,
  "task_name": "Longest Substring Of All Vowels in Order",
  "markdown_description": "\nA string is considered **beautiful** if it satisfies the following conditions:\n\n\n* Each of the 5 English vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`) must appear **at least once** in it.\n* The letters must be sorted in **alphabetical order** (i.e. all `'a'`s before `'e'`s, all `'e'`s before `'i'`s, etc.).\n\n\nFor example, strings `\"aeiou\"` and `\"aaaaaaeiiiioou\"` are considered **beautiful**, but `\"uaeio\"`, `\"aeoiu\"`, and `\"aaaeeeooo\"` are **not beautiful**.\n\n\nGiven a string `word` consisting of English vowels, return *the **length of the longest beautiful substring** of* `word`*. If no such substring exists, return* `0`.\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"\n**Output:** 13\n**Explanation:** The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"aeeeiiiioooauuuaeiou\"\n**Output:** 5\n**Explanation:** The longest beautiful substring in word is \"aeiou\" of length 5.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word = \"a\"\n**Output:** 0\n**Explanation:** There is no beautiful substring, so return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 5 * 105`\n* `word` consists of characters `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def longestBeautifulSubstring(self, word: str) -> int:\n        arr = []\n        n = len(word)\n        i = 0\n        while i < n:\n            j = i\n            while j < n and word[j] == word[i]:\n                j += 1\n            arr.append((word[i], j - i))\n            i = j\n        ans = 0\n        for i in range(len(arr) - 4):\n            a, b, c, d, e = arr[i : i + 5]\n            if a[0] + b[0] + c[0] + d[0] + e[0] == \"aeiou\":\n                ans = max(ans, a[1] + b[1] + c[1] + d[1] + e[1])\n        return ans\n",
  "test_case_generator": "\nimport random\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string consisting of English vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = ''.join(random.choices(vowels, k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestBeautifulSubstring(word)\n\n    return word, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestBeautifulSubstring(word) == expected_result\n        print(f\"assert solution.longestBeautifulSubstring('{word}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.longestBeautifulSubstring('{word}') == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "assert solution.longestBeautifulSubstring('eeueuuuaeo') == 0\nassert solution.longestBeautifulSubstring('uiuo') == 0\nassert solution.longestBeautifulSubstring('oeeiooo') == 0\nassert solution.longestBeautifulSubstring('eiuaoiuue') == 0\nassert solution.longestBeautifulSubstring('o') == 0\nassert solution.longestBeautifulSubstring('e') == 0\nassert solution.longestBeautifulSubstring('aioua') == 0\nassert solution.longestBeautifulSubstring('e') == 0\nassert solution.longestBeautifulSubstring('ouiaouioua') == 0\nassert solution.longestBeautifulSubstring('ieeaeauaui') == 0\nassert solution.longestBeautifulSubstring('iuieue') == 0\nassert solution.longestBeautifulSubstring('eueiu') == 0\nassert solution.longestBeautifulSubstring('eeiaauouie') == 0\nassert solution.longestBeautifulSubstring('uiieaeei') == 0\nassert solution.longestBeautifulSubstring('aioieauei') == 0\nassert solution.longestBeautifulSubstring('oiaiaai') == 0\nassert solution.longestBeautifulSubstring('ue') == 0\nassert solution.longestBeautifulSubstring('ea') == 0\nassert solution.longestBeautifulSubstring('uiiueuoiua') == 0\nassert solution.longestBeautifulSubstring('aoauoeuei') == 0\nassert solution.longestBeautifulSubstring('aoe') == 0\nassert solution.longestBeautifulSubstring('eeu') == 0\nassert solution.longestBeautifulSubstring('aoiouaei') == 0\nassert solution.longestBeautifulSubstring('aioe') == 0\nassert solution.longestBeautifulSubstring('ia') == 0\nassert solution.longestBeautifulSubstring('aao') == 0\nassert solution.longestBeautifulSubstring('eaoeei') == 0\nassert solution.longestBeautifulSubstring('oo') == 0\nassert solution.longestBeautifulSubstring('eu') == 0\nassert solution.longestBeautifulSubstring('eoa') == 0\nassert solution.longestBeautifulSubstring('uaiei') == 0\nassert solution.longestBeautifulSubstring('uoiaia') == 0\nassert solution.longestBeautifulSubstring('oo') == 0\nassert solution.longestBeautifulSubstring('a') == 0\nassert solution.longestBeautifulSubstring('ieio') == 0\nassert solution.longestBeautifulSubstring('iueioo') == 0\nassert solution.longestBeautifulSubstring('ue') == 0\nassert solution.longestBeautifulSubstring('euoioo') == 0\nassert solution.longestBeautifulSubstring('ouuuueuaii') == 0\nassert solution.longestBeautifulSubstring('ioeeiuieuo') == 0\nassert solution.longestBeautifulSubstring('ioe') == 0\nassert solution.longestBeautifulSubstring('uuae') == 0\nassert solution.longestBeautifulSubstring('ouua') == 0\nassert solution.longestBeautifulSubstring('oeoueiu') == 0\nassert solution.longestBeautifulSubstring('iiaaui') == 0\nassert solution.longestBeautifulSubstring('eoai') == 0\nassert solution.longestBeautifulSubstring('ioe') == 0\nassert solution.longestBeautifulSubstring('oeiuuauu') == 0\nassert solution.longestBeautifulSubstring('iiuaaeaeaa') == 0\nassert solution.longestBeautifulSubstring('eiauuuiooi') == 0\nassert solution.longestBeautifulSubstring('ouuuiuo') == 0\nassert solution.longestBeautifulSubstring('oouiuieuei') == 0\nassert solution.longestBeautifulSubstring('ioueoaaui') == 0\nassert solution.longestBeautifulSubstring('iiuia') == 0\nassert solution.longestBeautifulSubstring('ioauauu') == 0\nassert solution.longestBeautifulSubstring('uoouioeo') == 0\nassert solution.longestBeautifulSubstring('e') == 0\nassert solution.longestBeautifulSubstring('oieooiaii') == 0\nassert solution.longestBeautifulSubstring('oe') == 0\nassert solution.longestBeautifulSubstring('eeaaiauei') == 0\nassert solution.longestBeautifulSubstring('uioiieaa') == 0\nassert solution.longestBeautifulSubstring('uoiee') == 0\nassert solution.longestBeautifulSubstring('eoooiaoea') == 0\nassert solution.longestBeautifulSubstring('ueiuioeeuu') == 0\nassert solution.longestBeautifulSubstring('u') == 0\nassert solution.longestBeautifulSubstring('aiauaeao') == 0\nassert solution.longestBeautifulSubstring('aue') == 0\nassert solution.longestBeautifulSubstring('ooaaoaaio') == 0\nassert solution.longestBeautifulSubstring('u') == 0\nassert solution.longestBeautifulSubstring('aoeoii') == 0\nassert solution.longestBeautifulSubstring('eui') == 0\nassert solution.longestBeautifulSubstring('auoooauuou') == 0\nassert solution.longestBeautifulSubstring('aoiiiiieeu') == 0\nassert solution.longestBeautifulSubstring('auo') == 0\nassert solution.longestBeautifulSubstring('ueu') == 0\nassert solution.longestBeautifulSubstring('iaaaueoooa') == 0\nassert solution.longestBeautifulSubstring('e') == 0\nassert solution.longestBeautifulSubstring('aiieiiou') == 0\nassert solution.longestBeautifulSubstring('aa') == 0\nassert solution.longestBeautifulSubstring('eie') == 0\nassert solution.longestBeautifulSubstring('iaoue') == 0\nassert solution.longestBeautifulSubstring('aueiuo') == 0\nassert solution.longestBeautifulSubstring('aoieaai') == 0\nassert solution.longestBeautifulSubstring('iauaaia') == 0\nassert solution.longestBeautifulSubstring('aaua') == 0\nassert solution.longestBeautifulSubstring('eeoieuauea') == 0\nassert solution.longestBeautifulSubstring('i') == 0\nassert solution.longestBeautifulSubstring('oa') == 0\nassert solution.longestBeautifulSubstring('ouueo') == 0\nassert solution.longestBeautifulSubstring('iaeeiaa') == 0\nassert solution.longestBeautifulSubstring('ouoioaoo') == 0\nassert solution.longestBeautifulSubstring('eaueaioe') == 0\nassert solution.longestBeautifulSubstring('u') == 0\nassert solution.longestBeautifulSubstring('aeiiooieou') == 0\nassert solution.longestBeautifulSubstring('iu') == 0\nassert solution.longestBeautifulSubstring('uaouueo') == 0\nassert solution.longestBeautifulSubstring('iaooae') == 0\nassert solution.longestBeautifulSubstring('oouuouo') == 0\nassert solution.longestBeautifulSubstring('aieioiueeo') == 0\nassert solution.longestBeautifulSubstring('eiaeueioi') == 0",
  "inefficient_solution": "class Solution:\n    def longestBeautifulSubstring(self, word: str) -> int:\n        n = len(word)\n        for i in range(n):\n            vowels_in_substring = []\n            for j in range(i, n):\n                if word[j] in ['a', 'e', 'i', 'o', 'u']:\n                    vowels_in_substring.append(word[j])\n                else:\n                    break\n            if len(vowels_in_substring) >= 5 and vowels_in_substring == sorted(vowels_in_substring):\n                ans = max(ans, len(vowels_in_substring))\n        return ans",
  "is_python": true
}