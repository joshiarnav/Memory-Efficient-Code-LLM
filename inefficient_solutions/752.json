{
  "problem_idx": 752,
  "task_name": "Open the Lock",
  "markdown_description": "\nYou have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.\n\n\nThe lock initially starts at `'0000'`, a string representing the state of the 4 wheels.\n\n\nYou are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\n\n\nGiven a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\n**Output:** 6\n**Explanation:** \nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** deadends = [\"8888\"], target = \"0009\"\n**Output:** 1\n**Explanation:** We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\n**Output:** -1\n**Explanation:** We cannot reach the target without getting stuck.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= deadends.length <= 500`\n* `deadends[i].length == 4`\n* `target.length == 4`\n* target **will not be** in the list `deadends`.\n* `target` and `deadends[i]` consist of digits only.\n\n\n",
  "canonical_solution": "class Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        def next(s):\n            res = []\n            s = list(s)\n            for i in range(4):\n                c = s[i]\n                s[i] = '9' if c == '0' else str(int(c) - 1)\n                res.append(''.join(s))\n                s[i] = '0' if c == '9' else str(int(c) + 1)\n                res.append(''.join(s))\n                s[i] = c\n            return res\n\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                p = q.popleft()\n                step = m1[p]\n                for t in next(p):\n                    if t in s or t in m1:\n                        continue\n                    if t in m2:\n                        return step + 1 + m2[t]\n                    m1[t] = step + 1\n                    q.append(t)\n            return -1\n\n        def bfs():\n            m1, m2 = {\"0000\": 0}, {target: 0}\n            q1, q2 = deque([('0000')]), deque([(target)])\n            while q1 and q2:\n                t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n                if t != -1:\n                    return t\n            return -1\n\n        if target == '0000':\n            return 0\n        s = set(deadends)\n        if '0000' in s:\n            return -1\n        return bfs()\n",
  "test_case_generator": "\nimport random\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random deadends list\n    num_deadends = random.randint(1, 10)\n    deadends = [\"\".join(random.choices(\"0123456789\", k=4)) for _ in range(num_deadends)]\n    \n    # Generate a random target string\n    target = \"\".join(random.choices(\"0123456789\", k=4))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.openLock(deadends, target)\n\n    return deadends, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        deadends, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.openLock(deadends, target) == expected_result\n        print(f\"assert solution.openLock({deadends}, \\\"{target}\\\") == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.openLock({deadends}, \\\"{target}\\\") == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.openLock(['4993', '1499', '8218', '6130', '0970'], \"6106\") == 9\nassert solution.openLock(['7380', '1056', '2464', '6766', '6587', '7499', '7648', '2568'], \"7526\") == 14\nassert solution.openLock(['3381', '0715', '1373'], \"9208\") == 5\nassert solution.openLock(['7962', '6545', '0214', '3538', '4326', '5278', '9336', '0936', '5080', '3609'], \"3943\") == 11\nassert solution.openLock(['8263'], \"7339\") == 10\nassert solution.openLock(['2628', '2473', '6087', '8278', '5369', '0299', '0542', '4344', '6492'], \"6731\") == 11\nassert solution.openLock(['4965'], \"0066\") == 8\nassert solution.openLock(['9905', '8974', '0638', '7770', '8188', '7799'], \"4480\") == 10\nassert solution.openLock(['6348', '0974', '1244', '1122', '7333', '9203', '9018', '9019'], \"7693\") == 11\nassert solution.openLock(['8624', '3847', '4140'], \"7390\") == 7\nassert solution.openLock(['0237', '2896'], \"3612\") == 10\nassert solution.openLock(['1595', '8360', '3477', '0957', '9029', '2333', '9791', '1781', '2165'], \"2283\") == 9\nassert solution.openLock(['6227', '3495', '8108'], \"2970\") == 6\nassert solution.openLock(['2816', '7120', '1147', '4115', '1275'], \"0958\") == 8\nassert solution.openLock(['2711'], \"2614\") == 11\nassert solution.openLock(['8102', '1251', '0253', '6038', '2982', '7290'], \"5000\") == 5\nassert solution.openLock(['2155', '1952', '6450', '1076', '5844', '0545'], \"5946\") == 14\nassert solution.openLock(['1900', '7280', '1599', '8385', '1317'], \"4985\") == 12\nassert solution.openLock(['2310', '7442', '8026', '1950', '0282', '7028', '8107', '3957', '0454', '8866'], \"7039\") == 7\nassert solution.openLock(['0166', '4817', '4925', '0499', '9226', '9944', '8450', '2864', '4469', '1345'], \"6429\") == 11\nassert solution.openLock(['6230', '8820', '9092', '8210', '9739', '7235', '9681', '7203', '8838'], \"8128\") == 7\nassert solution.openLock(['2645', '1134'], \"7836\") == 12\nassert solution.openLock(['1184', '4573', '6982'], \"6544\") == 17\nassert solution.openLock(['8265', '6209', '6700', '2644', '3115', '5063'], \"1706\") == 8\nassert solution.openLock(['9784', '5721', '5492', '9550', '4148'], \"8077\") == 8\nassert solution.openLock(['2678', '1763', '1669'], \"3366\") == 14\nassert solution.openLock(['8942'], \"4477\") == 14\nassert solution.openLock(['3498', '0249', '8662', '5406'], \"8658\") == 13\nassert solution.openLock(['5016', '5221', '0374', '2908', '8720', '9899', '9158', '7177', '3724'], \"8861\") == 9\nassert solution.openLock(['7282', '3352', '3877', '9197', '0946'], \"4156\") == 14\nassert solution.openLock(['2404'], \"7798\") == 9\nassert solution.openLock(['2981', '3335', '6839', '2099'], \"9146\") == 10\nassert solution.openLock(['3784', '8592', '2318', '4309', '7572', '9139', '1282'], \"8739\") == 9\nassert solution.openLock(['3804', '0510', '4909', '4905', '7688', '3437'], \"9795\") == 10\nassert solution.openLock(['1667', '2927', '1387', '7837', '1741', '5933', '5738', '8057'], \"9213\") == 7\nassert solution.openLock(['0599', '9742', '8841', '3097', '4571', '2873', '3357', '9826'], \"5879\") == 11\nassert solution.openLock(['4030', '1159', '8770', '0884', '5027', '3887'], \"9528\") == 10\nassert solution.openLock(['3036', '8517', '0842', '4612', '3392', '5456', '4799', '9134'], \"9905\") == 7\nassert solution.openLock(['5506', '4747', '5421'], \"6219\") == 8\nassert solution.openLock(['8978', '5294', '5992', '2636', '6580', '1038', '7594', '2035', '6019'], \"5207\") == 10\nassert solution.openLock(['7547', '3353', '0194', '9090', '2402', '9105', '8683', '4649', '0240'], \"5117\") == 10\nassert solution.openLock(['1003'], \"5413\") == 13\nassert solution.openLock(['9567', '7498', '4072', '8990', '6149', '8846'], \"4060\") == 8\nassert solution.openLock(['4784', '8470'], \"9972\") == 7\nassert solution.openLock(['2149', '1506', '4246', '8926', '0945', '7114'], \"7028\") == 7\nassert solution.openLock(['7063', '4134', '7223', '3897', '1871', '3956', '9714'], \"9303\") == 7\nassert solution.openLock(['4891', '4187', '7253', '3531', '7192', '0336', '0631', '1333'], \"5428\") == 13\nassert solution.openLock(['2041', '9890', '2000'], \"4108\") == 7\nassert solution.openLock(['6982', '8202'], \"7589\") == 11\nassert solution.openLock(['7180', '2468', '4839', '3847', '6434', '8460', '8462', '5539'], \"1405\") == 10\nassert solution.openLock(['0089', '5570', '9427', '3842', '0636', '8443', '8350'], \"6065\") == 13\nassert solution.openLock(['6772', '6050', '0740', '3267', '9874', '8500', '0803'], \"6495\") == 14\nassert solution.openLock(['0469', '8853', '9235', '0610', '8777'], \"3423\") == 12\nassert solution.openLock(['7155'], \"2555\") == 17\nassert solution.openLock(['8787', '6677', '6652'], \"0391\") == 5\nassert solution.openLock(['7294', '9017', '1705', '0364'], \"7644\") == 15\nassert solution.openLock(['9583', '2213', '1859', '3018', '3027', '5498', '0666', '8786'], \"7423\") == 12\nassert solution.openLock(['9905'], \"0544\") == 13\nassert solution.openLock(['2866', '0100'], \"0763\") == 10\nassert solution.openLock(['0660', '7332', '9700'], \"0562\") == 11\nassert solution.openLock(['8617', '5330', '2563', '2611', '7835', '4147', '4051', '2851', '5288'], \"5184\") == 12\nassert solution.openLock(['0776', '1941', '6993', '0185', '3744', '4755', '8612'], \"9286\") == 9\nassert solution.openLock(['0617'], \"3885\") == 12\nassert solution.openLock(['3007', '3323', '7154', '0179', '6401', '4314', '2252', '8593', '1637', '1269'], \"8131\") == 7\nassert solution.openLock(['3742', '7717', '4959', '9959'], \"7075\") == 11\nassert solution.openLock(['8268', '8337', '5237', '4959', '9735', '4233', '0320', '6500'], \"5332\") == 13\nassert solution.openLock(['2735', '4095', '0535', '1827', '8553'], \"7887\") == 10\nassert solution.openLock(['9237'], \"4830\") == 9\nassert solution.openLock(['4057'], \"1197\") == 6\nassert solution.openLock(['3631'], \"7613\") == 11\nassert solution.openLock(['2244', '9537'], \"9311\") == 6\nassert solution.openLock(['9277', '1288', '8351', '4648', '0064', '6337', '3047', '9865', '7984'], \"8440\") == 10\nassert solution.openLock(['5843', '0934', '6318', '6694', '8203', '6544'], \"2420\") == 8\nassert solution.openLock(['7735', '7576', '7138', '0461'], \"2160\") == 7\nassert solution.openLock(['9655', '6866', '0552'], \"0268\") == 8\nassert solution.openLock(['1710', '6188', '1958', '9104', '4411', '8615', '6168', '1782', '0538', '5562'], \"5898\") == 10\nassert solution.openLock(['8555', '8338', '6385', '8292', '0351', '4325', '9083'], \"5453\") == 17\nassert solution.openLock(['5781', '5688', '0508', '6696', '9630', '7156', '7880'], \"1377\") == 10\nassert solution.openLock(['3601', '8316', '4305', '0554', '8464'], \"3430\") == 10\nassert solution.openLock(['9228', '2022', '1290', '3255', '3321'], \"7573\") == 14\nassert solution.openLock(['6199', '4628', '9978', '2975'], \"9101\") == 3\nassert solution.openLock(['4253', '1455', '1431', '6350', '5865', '8189', '8183', '1757'], \"4492\") == 11\nassert solution.openLock(['4713', '1258', '5639'], \"7065\") == 12\nassert solution.openLock(['5915', '9344', '6967', '5547', '5910', '8345', '5916'], \"3025\") == 10\nassert solution.openLock(['9214', '2910', '3333', '7661', '3402', '4371'], \"8541\") == 12\nassert solution.openLock(['5260', '8919', '9809', '0976', '4681', '0232'], \"8308\") == 7\nassert solution.openLock(['3477', '9580', '5084', '4930', '3096', '2688'], \"6606\") == 12\nassert solution.openLock(['3110', '7989', '8702', '3664', '0611', '2822', '3715', '9151', '0666', '4634'], \"8010\") == 3\nassert solution.openLock(['6928', '1093', '8580', '8501'], \"0461\") == 9\nassert solution.openLock(['0384', '4548', '9035', '0693'], \"3588\") == 12\nassert solution.openLock(['0624', '6509', '8484', '9336', '1193', '4166', '4016', '6081', '7088', '9043'], \"0833\") == 8\nassert solution.openLock(['0546', '7396', '8613', '8562', '1387', '6714', '7599', '2702', '9667'], \"6750\") == 12\nassert solution.openLock(['7937', '6395'], \"2849\") == 9\nassert solution.openLock(['4599', '8896', '2740', '6157', '1756', '4683', '8499', '9317'], \"9510\") == 7\nassert solution.openLock(['8514', '8060', '3533', '4548', '4042', '5502', '6771'], \"2946\") == 11\nassert solution.openLock(['9987', '1551', '0164', '5499', '1554'], \"2379\") == 9\nassert solution.openLock(['9920', '2943', '1221', '8074'], \"0331\") == 7\nassert solution.openLock(['0957', '7176', '2853', '6505'], \"0480\") == 6\nassert solution.openLock(['2538', '4210', '1981', '9133', '8379', '7073', '3361', '8617', '1853'], \"9183\") == 7\nassert solution.openLock(['3173', '6495', '7156', '3049', '5058', '0542', '4972', '7841'], \"1409\") == 6",
  "inefficient_solution": "class Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        def next(s):\n            res = []\n            for i in range(4):\n                c = s[i]\n                for d in range(10):\n                    s[i] = str(d)\n                    res.append(''.join(s))\n                    s[i] = c\n                s[i] = '0' if c == '9' else str(int(c) + 1)\n                res.append(''.join(s))\n                s[i] = '9' if c == '0' else str(int(c) - 1)\n                res.append(''.join(s))\n            return res\n\n        def extend(m1, m2, q):\n            for _ in range(len(q)):\n                p = q.popleft()\n                step = m1[p]\n                for t in next(p):\n                    if t in s or t in m1:\n                        continue\n                    if t in m2:\n                        return step + 1 + m2[t]\n                    m1[t] = step + 1\n                    q.append(t)\n            return -1\n\n        def bfs():\n            m1, m2 = {\"0000\": 0}, {target: 0}\n            q1, q2 = deque([('0000')]), deque([(target)])\n            while q1 and q2:\n                t = extend(m1, m2, q1) if len(q1) <= len(q2) else extend(m2, m1, q2)\n                if t != -1:\n                    return t\n            return -1\n\n        if target == '0000':\n            return 0\n        s = set(deadends)\n        if '0000' in s:\n            return -1\n        return bfs()",
  "is_python": true
}