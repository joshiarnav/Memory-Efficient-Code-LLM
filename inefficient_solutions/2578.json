{
  "problem_idx": 2578,
  "task_name": "Split With Minimum Sum",
  "markdown_description": "\nGiven a positive integer `num`, split it into two non-negative integers `num1` and `num2` such that:\n\n\n* The concatenation of `num1` and `num2` is a permutation of `num`.\n\t+ In other words, the sum of the number of occurrences of each digit in `num1` and `num2` is equal to the number of occurrences of that digit in `num`.\n* `num1` and `num2` can contain leading zeros.\n\n\nReturn *the **minimum** possible sum of* `num1` *and* `num2`.\n\n\n**Notes:**\n\n\n* It is guaranteed that `num` does not contain any leading zeros.\n* The order of occurrence of the digits in `num1` and `num2` may differ from the order of occurrence of `num`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 4325\n**Output:** 59\n**Explanation:** We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 687\n**Output:** 75\n**Explanation:** We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `10 <= num <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def splitNum(self, num: int) -> int:\n        cnt = Counter()\n        n = 0\n        while num:\n            cnt[num % 10] += 1\n            num //= 10\n            n += 1\n        ans = [0] * 2\n        j = 0\n        for i in range(n):\n            while cnt[j] == 0:\n                j += 1\n            cnt[j] -= 1\n            ans[i & 1] = ans[i & 1] * 10 + j\n        return sum(ans)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def splitNum(self, num: int) -> int:\n        cnt = Counter()\n        n = 0\n        while num:\n            cnt[num % 10] += 1\n            num //= 10\n            n += 1\n        ans = [0] * 2\n        j = 0\n        for i in range(n):\n            while cnt[j] == 0:\n                j += 1\n            cnt[j] -= 1\n            ans[i & 1] = ans[i & 1] * 10 + j\n        return sum(ans)\n\ndef generate_test_case():\n    solution = Solution()\n    # Generate a random num\n    num = random.randint(10, 1000000000)\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.splitNum(num)\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.splitNum(num) == expected_result\n        print(f\"assert solution.splitNum({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.splitNum({num}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.splitNum(588915033) == 4947\nassert solution.splitNum(251677454) == 17024\nassert solution.splitNum(976761429) == 17358\nassert solution.splitNum(777491872) == 17557\nassert solution.splitNum(808150804) == 646\nassert solution.splitNum(944163614) == 14915\nassert solution.splitNum(217751343) == 13704\nassert solution.splitNum(886247898) == 31677\nassert solution.splitNum(171233928) == 13617\nassert solution.splitNum(129147366) == 13836\nassert solution.splitNum(589617885) == 21477\nassert solution.splitNum(808851628) == 4276\nassert solution.splitNum(121392686) == 13637\nassert solution.splitNum(56141332) == 2581\nassert solution.splitNum(560106468) == 2034\nassert solution.splitNum(304389701) == 1727\nassert solution.splitNum(585310047) == 1815\nassert solution.splitNum(198249998) == 17798\nassert solution.splitNum(536517661) == 15133\nassert solution.splitNum(192675179) == 14258\nassert solution.splitNum(950731953) == 4938\nassert solution.splitNum(577100512) == 1414\nassert solution.splitNum(259022371) == 3496\nassert solution.splitNum(445319489) == 17948\nassert solution.splitNum(371656692) == 16236\nassert solution.splitNum(438627254) == 25925\nassert solution.splitNum(760198369) == 5368\nassert solution.splitNum(702847894) == 7267\nassert solution.splitNum(260909809) == 988\nassert solution.splitNum(353357784) == 37035\nassert solution.splitNum(285267905) == 5147\nassert solution.splitNum(965161175) == 13136\nassert solution.splitNum(871935627) == 16257\nassert solution.splitNum(51252152) == 2480\nassert solution.splitNum(822083977) == 5167\nassert solution.splitNum(880412744) == 3926\nassert solution.splitNum(408826970) == 3167\nassert solution.splitNum(598562450) == 7127\nassert solution.splitNum(887468844) == 49476\nassert solution.splitNum(239637606) == 6036\nassert solution.splitNum(379616931) == 15048\nassert solution.splitNum(738007571) == 1955\nassert solution.splitNum(766014050) == 623\nassert solution.splitNum(333245136) == 15681\nassert solution.splitNum(854980822) == 5077\nassert solution.splitNum(693517334) == 16826\nassert solution.splitNum(422962213) == 14485\nassert solution.splitNum(781281179) == 13067\nassert solution.splitNum(694733533) == 36826\nassert solution.splitNum(533441212) == 13579\nassert solution.splitNum(889833525) == 27177\nassert solution.splitNum(895764856) == 51367\nassert solution.splitNum(97258725) == 5157\nassert solution.splitNum(155815383) == 14916\nassert solution.splitNum(104256879) == 4047\nassert solution.splitNum(44415567) == 5913\nassert solution.splitNum(100878750) == 756\nassert solution.splitNum(90466169) == 2138\nassert solution.splitNum(110105685) == 1314\nassert solution.splitNum(372368778) == 27456\nassert solution.splitNum(829773533) == 26957\nassert solution.splitNum(28925766) == 5247\nassert solution.splitNum(483107968) == 5167\nassert solution.splitNum(982813286) == 15077\nassert solution.splitNum(139228704) == 3627\nassert solution.splitNum(760197089) == 2468\nassert solution.splitNum(697026606) == 3336\nassert solution.splitNum(468896952) == 30378\nassert solution.splitNum(984842507) == 7067\nassert solution.splitNum(43450294) == 2794\nassert solution.splitNum(511408739) == 2837\nassert solution.splitNum(454477463) == 38924\nassert solution.splitNum(393484842) == 26937\nassert solution.splitNum(906393779) == 7478\nassert solution.splitNum(10895845) == 2047\nassert solution.splitNum(779944309) == 8278\nassert solution.splitNum(143718129) == 12627\nassert solution.splitNum(214470058) == 1705\nassert solution.splitNum(611600974) == 1636\nassert solution.splitNum(17860650) == 735\nassert solution.splitNum(968598528) == 31578\nassert solution.splitNum(823927605) == 4947\nassert solution.splitNum(663279265) == 26236\nassert solution.splitNum(446479447) == 48946\nassert solution.splitNum(623511993) == 13728\nassert solution.splitNum(729118276) == 13957\nassert solution.splitNum(111434392) == 12583\nassert solution.splitNum(606076787) == 7355\nassert solution.splitNum(202368180) == 1506\nassert solution.splitNum(178798047) == 6567\nassert solution.splitNum(239082060) == 507\nassert solution.splitNum(493217567) == 16046\nassert solution.splitNum(512367996) == 16248\nassert solution.splitNum(497169953) == 18278\nassert solution.splitNum(512536861) == 13924\nassert solution.splitNum(295890205) == 2848\nassert solution.splitNum(654780221) == 3725\nassert solution.splitNum(520128898) == 3877\nassert solution.splitNum(917120396) == 2648\nassert solution.splitNum(589855232) == 26147",
  "inefficient_solution": "class Solution:\n    def splitNum(self, num: int) -> int:\n        digits = [int(i) for i in str(num)]\n        len_num = len(digits)\n        max_digits = 10**len_num\n        min_num1 = 10**(len_num//2) - 1\n        min_num2 = 10**(len_num-len_num//2) - 1\n        min_sum = float('inf')\n        for i in range(max_digits):\n            num1 = i\n            for j in range(i+1, max_digits):\n                num2 = j\n                if self.check_digits(num1, num2, digits):\n                    min_sum = min(min_sum, num1 + num2)\n        return min_sum\n\n    def check_digits(self, num1, num2, digits):\n        num1 = str(num1)\n        num2 = str(num2)\n        if len(num1) + len(num2) != len(str(digits)):\n            return False\n        cnt1 = [0] * 10\n        cnt2 = [0] * 10\n        for i in num1:\n            cnt1[int(i)] += 1\n        for i in num2:\n            cnt2[int(i)] += 1\n        for i in range(10):\n            if cnt1[i] + cnt2[i] != digits.count(i):\n                return False\n        return True",
  "is_python": true
}