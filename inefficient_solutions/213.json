{
  "problem_idx": 213,
  "task_name": "House Robber II",
  "markdown_description": "\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\u00a0**it will automatically contact the police if two adjacent houses were broken into on the same night**.\n\n\nGiven an integer array `nums` representing the amount of money of each house, return *the maximum amount of money you can rob tonight **without alerting the police***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,3,2]\n**Output:** 3\n**Explanation:** You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1]\n**Output:** 4\n**Explanation:** Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 100`\n* `0 <= nums[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            f = g = 0\n            for x in nums:\n                f, g = max(f, g), f + x\n            return max(f, g)\n\n        if len(nums) == 1:\n            return nums[0]\n        return max(_rob(nums[1:]), _rob(nums[:-1]))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            f = g = 0\n            for x in nums:\n                f, g = max(f, g), f + x\n            return max(f, g)\n\n        if len(nums) == 1:\n            return nums[0]\n        return max(_rob(nums[1:]), _rob(nums[:-1]))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.rob(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.rob(nums) == expected_result\n        print(f\"assert solution.rob({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.rob({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.rob([91, 80]) == 91\nassert solution.rob([8, 75, 25]) == 75\nassert solution.rob([42, 17, 5, 47, 96]) == 113\nassert solution.rob([53, 28, 43, 44, 11, 42]) == 114\nassert solution.rob([97]) == 97\nassert solution.rob([59, 2, 27]) == 59\nassert solution.rob([23, 51, 10, 90, 64, 84, 83, 34, 66]) == 291\nassert solution.rob([44]) == 44\nassert solution.rob([60, 96, 20, 16, 88, 17, 31, 29, 25, 36]) == 251\nassert solution.rob([60, 1, 81, 24, 62, 28, 43]) == 203\nassert solution.rob([91, 62, 30, 43, 24, 1]) == 145\nassert solution.rob([6, 45, 42]) == 45\nassert solution.rob([60, 20, 94]) == 94\nassert solution.rob([60, 13, 25, 43]) == 85\nassert solution.rob([66, 70, 94, 42, 86, 75]) == 246\nassert solution.rob([19, 28]) == 28\nassert solution.rob([44, 49, 91, 75, 10, 9]) == 145\nassert solution.rob([16, 28, 58, 23, 89]) == 147\nassert solution.rob([25, 53, 33, 28, 20, 72, 19, 59, 79]) == 232\nassert solution.rob([76, 82]) == 82\nassert solution.rob([36, 54, 71, 22, 42, 56, 59]) == 172\nassert solution.rob([1, 74, 20, 22, 88]) == 162\nassert solution.rob([20, 39, 7]) == 39\nassert solution.rob([15, 14, 91, 34]) == 106\nassert solution.rob([44, 76, 24, 38]) == 114\nassert solution.rob([94, 38, 80, 31, 63, 74, 44, 4, 35, 95]) == 316\nassert solution.rob([27, 82, 33]) == 82\nassert solution.rob([7, 75, 87, 25, 56, 83, 84, 91, 2]) == 274\nassert solution.rob([60]) == 60\nassert solution.rob([1]) == 1\nassert solution.rob([78, 94, 19, 42]) == 136\nassert solution.rob([58, 1]) == 58\nassert solution.rob([87, 4, 59, 38]) == 146\nassert solution.rob([88, 35, 42]) == 88\nassert solution.rob([25, 79, 33]) == 79\nassert solution.rob([90, 29, 79, 95, 68, 33, 9, 78, 77]) == 315\nassert solution.rob([98]) == 98\nassert solution.rob([92, 79, 14, 20, 53, 50, 31, 43, 96, 9]) == 286\nassert solution.rob([75, 48, 3, 70, 97, 53, 16, 47, 30, 93]) == 311\nassert solution.rob([50, 95, 65, 27, 1]) == 122\nassert solution.rob([31, 23, 42, 35]) == 73\nassert solution.rob([89, 81, 79, 18, 92, 87, 32, 52, 31]) == 312\nassert solution.rob([59, 69, 77, 2]) == 136\nassert solution.rob([73, 10, 9, 82, 90, 49, 84, 46, 65]) == 256\nassert solution.rob([14, 55, 83]) == 83\nassert solution.rob([12, 70, 99, 61, 6]) == 131\nassert solution.rob([55, 89, 16]) == 89\nassert solution.rob([8, 28, 3, 19, 11]) == 47\nassert solution.rob([55, 96, 85, 61, 58, 41, 28, 14, 97]) == 295\nassert solution.rob([87]) == 87\nassert solution.rob([41, 18]) == 41\nassert solution.rob([66, 46, 28, 53, 83, 72, 24]) == 191\nassert solution.rob([69, 49, 76, 62, 21, 9, 88, 75, 70]) == 269\nassert solution.rob([91, 60, 8, 38, 32]) == 129\nassert solution.rob([23]) == 23\nassert solution.rob([60, 37]) == 60\nassert solution.rob([68]) == 68\nassert solution.rob([8, 63, 81, 20, 58]) == 139\nassert solution.rob([28, 92, 34, 54, 9, 13, 75, 77, 32, 80]) == 316\nassert solution.rob([98, 60, 99, 6]) == 197\nassert solution.rob([70, 90, 93, 67]) == 163\nassert solution.rob([51, 39, 86, 57, 75, 70, 78, 48, 73, 38]) == 363\nassert solution.rob([9, 83, 19, 27]) == 110\nassert solution.rob([37, 77]) == 77\nassert solution.rob([90, 45]) == 90\nassert solution.rob([59, 41, 10, 5, 14, 90]) == 136\nassert solution.rob([67, 56, 84, 95, 27, 72, 24, 97, 25, 2]) == 331\nassert solution.rob([8, 11, 89, 12, 26]) == 115\nassert solution.rob([39, 47, 89]) == 89\nassert solution.rob([56, 50, 64, 52, 77, 3, 36]) == 197\nassert solution.rob([24, 3, 18, 85, 14, 25]) == 113\nassert solution.rob([66, 82, 15, 12, 32, 79]) == 173\nassert solution.rob([81, 75]) == 81\nassert solution.rob([14]) == 14\nassert solution.rob([74, 25, 47, 75, 93, 65, 3, 27, 78]) == 243\nassert solution.rob([73, 52, 86, 96]) == 159\nassert solution.rob([63, 14, 29, 87, 71, 7, 92, 2, 34, 10]) == 289\nassert solution.rob([65]) == 65\nassert solution.rob([65, 76, 24]) == 76\nassert solution.rob([26, 43, 25, 38, 63, 85]) == 166\nassert solution.rob([10, 82, 1, 39, 28, 11]) == 132\nassert solution.rob([65, 56, 26, 90]) == 146\nassert solution.rob([58, 61, 25, 66, 83, 9]) == 166\nassert solution.rob([64, 43, 63, 12, 96, 35]) == 223\nassert solution.rob([1, 64, 92, 82, 87, 79, 37, 9]) == 234\nassert solution.rob([56]) == 56\nassert solution.rob([3, 51]) == 51\nassert solution.rob([66, 55, 42, 8]) == 108\nassert solution.rob([41, 12, 66, 68, 33, 72, 20]) == 181\nassert solution.rob([19, 75, 24, 82]) == 157\nassert solution.rob([62, 98, 40, 51, 73]) == 171\nassert solution.rob([99, 35, 93]) == 99\nassert solution.rob([30, 55, 98, 54, 65, 64, 7, 19]) == 200\nassert solution.rob([3, 41, 81, 79, 13]) == 120\nassert solution.rob([49, 67]) == 67\nassert solution.rob([89, 41, 93, 86, 83]) == 182\nassert solution.rob([38, 100, 89, 80, 26, 50]) == 230\nassert solution.rob([18, 9, 62, 70, 48, 17]) == 128\nassert solution.rob([8, 75, 58, 52, 69, 89]) == 216\nassert solution.rob([64, 85, 48, 1, 49, 14, 31]) == 165",
  "inefficient_solution": "class Solution:\n    def rob(self, nums: List[int]) -> int:\n        def _rob(nums):\n            dp = [0] * (len(nums) + 1)\n            for i in range(1, len(nums) + 1):\n                for j in range(i):\n                    dp[i] = max(dp[i], dp[j] + nums[j])\n            return max(dp[-1], dp[-2])\n\n        if len(nums) == 1:\n            dp = [0] * (len(nums) + 1)\n            for i in range(len(nums)):\n                dp[i + 1] = nums[i]\n            return max(dp)\n        return max(_rob(nums[1:]), _rob(nums[:-1]))",
  "is_python": true
}