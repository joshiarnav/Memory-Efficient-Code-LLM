{
  "problem_idx": 778,
  "task_name": "Swim in Rising Water",
  "markdown_description": "\nYou are given an `n x n` integer matrix `grid` where each value `grid[i][j]` represents the elevation at that point `(i, j)`.\n\n\nThe rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\n\n\nReturn *the least time until you can reach the bottom right square* `(n - 1, n - 1)` *if you start at the top left square* `(0, 0)`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0778.Swim%20in%20Rising%20Water/images/swim1-grid.jpg)\n\n```\n\n**Input:** grid = [[0,2],[1,3]]\n**Output:** 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0778.Swim%20in%20Rising%20Water/images/swim2-grid-1.jpg)\n\n```\n\n**Input:** grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\n**Output:** 16\n**Explanation:** The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length`\n* `n == grid[i].length`\n* `1 <= n <= 50`\n* `0 <= grid[i][j] <\u00a0n2`\n* Each value `grid[i][j]` is **unique**.\n\n\n",
  "canonical_solution": "class Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(grid)\n        p = list(range(n * n))\n        hi = [0] * (n * n)\n        for i, row in enumerate(grid):\n            for j, h in enumerate(row):\n                hi[h] = i * n + j\n        for t in range(n * n):\n            i, j = hi[t] // n, hi[t] % n\n            for a, b in [(0, -1), (0, 1), (1, 0), (-1, 0)]:\n                x, y = i + a, j + b\n                if 0 <= x < n and 0 <= y < n and grid[x][y] <= t:\n                    p[find(x * n + y)] = find(hi[t])\n                if find(0) == find(n * n - 1):\n                    return t\n        return -1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def swimInWater(self, grid: List[List[int]]) -> int:\n        def find(x):\n            if p[x] != x:\n                p[x] = find(p[x])\n            return p[x]\n\n        n = len(grid)\n        p = list(range(n * n))\n        hi = [0] * (n * n)\n        for i, row in enumerate(grid):\n            for j, h in enumerate(row):\n                hi[h] = i * n + j\n        for t in range(n * n):\n            i, j = hi[t] // n, hi[t] % n\n            for a, b in [(0, -1), (0, 1), (1, 0), (-1, 0)]:\n                x, y = i + a, j + b\n                if 0 <= x < n and 0 <= y < n and grid[x][y] <= t:\n                    p[find(x * n + y)] = find(hi[t])\n                if find(0) == find(n * n - 1):\n                    return t\n        return -1\n\ndef generate_test_case():\n    solution = Solution()\n    grid = []\n    size = random.randint(1, 10)\n    for _ in range(size):\n        row = []\n        for _ in range(size):\n            row.append(random.randint(0, size**2-1))\n        grid.append(row)\n    expected_result = solution.swimInWater(grid)\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.swimInWater(grid) == expected_result\n        test_case_generator_results.append(f\"assert solution.swimInWater({grid}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.swimInWater([[43, 45, 19, 20, 19, 23, 5], [36, 29, 40, 42, 20, 39, 5], [4, 42, 44, 31, 23, 32, 47], [27, 30, 8, 7, 32, 45, 31], [17, 45, 34, 9, 16, 7, 48], [38, 25, 40, 30, 3, 46, 6], [39, 25, 23, 2, 19, 13, 37]]) == 41\nassert solution.swimInWater([[33, 37, 32, 31, 38, 3, 12], [38, 17, 8, 44, 5, 7, 16], [33, 44, 4, 33, 28, 41, 17], [42, 14, 46, 37, 12, 14, 8], [12, 28, 16, 41, 17, 28, 7], [1, 40, 21, 7, 35, 16, 21], [46, 27, 36, 16, 5, 14, 40]]) == 44\nassert solution.swimInWater([[4, 9, 14, 5], [8, 6, 12, 7], [3, 12, 10, 3], [0, 5, 14, 0]]) == 12\nassert solution.swimInWater([[32, 19, 20, 2, 14, 20], [19, 14, 25, 18, 19, 8], [8, 33, 11, 0, 14, 17], [35, 15, 31, 6, 17, 29], [8, 24, 29, 17, 29, 18], [28, 7, 0, 5, 29, 12]]) == -1\nassert solution.swimInWater([[9, 18, 19, 76, 32, 16, 29, 68, 12], [55, 28, 25, 20, 22, 46, 54, 9, 25], [55, 21, 68, 20, 38, 67, 49, 70, 10], [27, 37, 40, 33, 65, 64, 60, 1, 57], [75, 30, 32, 1, 34, 80, 67, 34, 26], [61, 39, 35, 33, 79, 20, 9, 44, 76], [73, 33, 11, 58, 67, 47, 38, 12, 13], [66, 25, 54, 60, 21, 22, 79, 46, 47], [19, 21, 25, 75, 80, 78, 17, 56, 61]]) == 78\nassert solution.swimInWater([[17, 9, 7, 8, 17], [10, 12, 3, 15, 1], [4, 19, 20, 19, 8], [9, 12, 6, 4, 20], [12, 15, 11, 5, 11]]) == -1\nassert solution.swimInWater([[31, 61, 41, 15, 52, 51, 4, 25], [43, 42, 23, 31, 24, 0, 22, 59], [50, 30, 47, 60, 6, 12, 23, 30], [11, 36, 8, 52, 36, 24, 51, 17], [41, 60, 9, 18, 7, 41, 56, 31], [37, 33, 14, 48, 11, 39, 60, 28], [34, 22, 32, 53, 38, 50, 53, 36], [32, 3, 17, 17, 38, 0, 40, 17]]) == 47\nassert solution.swimInWater([[51, 42, 55, 46, 8, 45, 21, 42], [53, 5, 21, 37, 43, 63, 35, 11], [18, 11, 10, 42, 7, 17, 2, 42], [26, 40, 62, 12, 46, 1, 40, 12], [33, 57, 39, 10, 1, 38, 34, 12], [13, 29, 24, 27, 26, 51, 14, 9], [35, 56, 4, 5, 34, 29, 39, 22], [45, 60, 60, 10, 36, 15, 13, 48]]) == 53\nassert solution.swimInWater([[5, 1, 8], [1, 8, 7], [2, 8, 2]]) == -1\nassert solution.swimInWater([[2, 0], [3, 3]]) == 3\nassert solution.swimInWater([[9, 16, 46, 33, 25, 4, 20], [19, 36, 42, 17, 5, 29, 44], [22, 33, 47, 14, 46, 22, 17], [21, 39, 20, 15, 21, 41, 9], [10, 17, 30, 40, 0, 4, 9], [18, 11, 5, 27, 1, 14, 2], [11, 48, 18, 25, 11, 43, 23]]) == 39\nassert solution.swimInWater([[48, 23, 30, 50, 67, 5, 74, 79, 78], [9, 3, 13, 12, 16, 21, 25, 76, 36], [43, 14, 15, 59, 64, 0, 2, 39, 10], [45, 13, 41, 55, 19, 19, 52, 41, 12], [4, 36, 18, 12, 40, 49, 50, 57, 32], [9, 33, 33, 56, 10, 79, 20, 70, 29], [63, 30, 64, 52, 67, 58, 29, 46, 14], [7, 64, 48, 64, 0, 2, 74, 69, 42], [33, 7, 66, 37, 26, 40, 42, 46, 9]]) == 58\nassert solution.swimInWater([[1, 0], [3, 0]]) == 1\nassert solution.swimInWater([[8, 10, 13, 6], [12, 11, 5, 12], [0, 6, 7, 4], [11, 10, 7, 5]]) == 14\nassert solution.swimInWater([[48, 24, 13, 24, 61, 21, 27, 51], [0, 29, 0, 39, 44, 43, 2, 49], [52, 43, 23, 20, 37, 9, 32, 29], [48, 58, 5, 21, 4, 0, 21, 7], [29, 42, 59, 9, 34, 33, 16, 3], [42, 17, 46, 62, 5, 13, 50, 57], [31, 15, 18, 58, 51, 23, 52, 45], [45, 23, 30, 56, 31, 44, 34, 5]]) == -1\nassert solution.swimInWater([[1, 0], [1, 0]]) == 1\nassert solution.swimInWater([[10, 1, 19, 13, 3], [23, 8, 0, 10, 6], [12, 13, 4, 12, 19], [24, 4, 18, 7, 13], [4, 7, 22, 14, 4]]) == 13\nassert solution.swimInWater([[9, 53, 39, 88, 50, 95, 27, 51, 58, 55], [39, 57, 29, 16, 0, 60, 20, 36, 18, 54], [74, 84, 36, 45, 75, 20, 38, 68, 55, 0], [63, 60, 4, 35, 74, 77, 70, 47, 94, 45], [16, 76, 95, 33, 71, 19, 42, 11, 61, 17], [28, 7, 75, 93, 99, 28, 9, 50, 55, 5], [65, 1, 12, 65, 38, 98, 63, 19, 90, 8], [87, 34, 17, 99, 65, 45, 72, 47, 78, 73], [47, 42, 94, 69, 76, 56, 33, 67, 40, 4], [1, 81, 93, 83, 49, 16, 70, 38, 12, 79]]) == 79\nassert solution.swimInWater([[0, 34, 27, 32, 31, 27], [0, 0, 29, 26, 28, 27], [14, 10, 23, 28, 5, 18], [32, 27, 19, 17, 4, 34], [7, 27, 20, 2, 24, 10], [32, 21, 0, 3, 5, 6]]) == 23\nassert solution.swimInWater([[21, 43, 19, 66, 60, 60, 78, 80, 52], [21, 62, 73, 21, 66, 61, 53, 25, 53], [22, 24, 52, 60, 25, 48, 76, 61, 12], [30, 63, 35, 79, 40, 12, 54, 54, 67], [67, 75, 16, 65, 25, 77, 58, 40, 49], [27, 37, 0, 13, 37, 69, 10, 73, 45], [50, 75, 55, 69, 47, 32, 41, 75, 3], [68, 17, 57, 34, 21, 53, 56, 2, 12], [76, 52, 22, 12, 12, 61, 64, 24, 29]]) == 63\nassert solution.swimInWater([[0, 1], [1, 1]]) == 2\nassert solution.swimInWater([[0]]) == 0\nassert solution.swimInWater([[5, 34, 30, 4, 9, 24], [9, 28, 13, 35, 15, 28], [28, 29, 19, 16, 1, 12], [24, 11, 34, 6, 3, 5], [34, 14, 0, 8, 7, 4], [25, 9, 27, 1, 12, 34]]) == 34\nassert solution.swimInWater([[3, 0], [2, 0]]) == 1\nassert solution.swimInWater([[6, 6, 12, 4], [3, 15, 5, 11], [14, 1, 15, 2], [15, 4, 0, 3]]) == 12\nassert solution.swimInWater([[32, 24, 30, 3, 14, 23], [6, 25, 32, 7, 16, 1], [6, 7, 22, 4, 35, 6], [31, 5, 12, 30, 9, 19], [15, 23, 30, 24, 5, 7], [27, 9, 28, 35, 22, 10]]) == 32\nassert solution.swimInWater([[50, 21, 15, 36, 98, 93, 3, 40, 55, 26], [66, 46, 34, 35, 50, 31, 78, 77, 88, 7], [58, 64, 40, 41, 89, 43, 23, 11, 6, 41], [73, 21, 69, 25, 19, 64, 79, 9, 53, 8], [94, 46, 15, 91, 32, 79, 55, 99, 32, 86], [74, 22, 8, 39, 31, 36, 26, 28, 58, 93], [53, 72, 80, 20, 54, 88, 66, 2, 51, 31], [92, 68, 88, 41, 86, 16, 74, 83, 31, 90], [54, 85, 95, 61, 94, 72, 74, 94, 61, 20], [57, 4, 66, 66, 74, 52, 33, 48, 72, 67]]) == -1\nassert solution.swimInWater([[2, 2, 1], [7, 1, 5], [4, 2, 8]]) == 8\nassert solution.swimInWater([[45, 19, 20, 6, 53, 19, 30, 1], [45, 31, 26, 62, 2, 20, 43, 49], [18, 30, 50, 53, 26, 2, 11, 57], [40, 60, 15, 52, 1, 23, 4, 4], [45, 56, 3, 1, 43, 1, 44, 15], [34, 2, 49, 25, 8, 44, 34, 41], [55, 6, 41, 58, 57, 62, 7, 14], [39, 13, 45, 55, 38, 59, 38, 53]]) == 53\nassert solution.swimInWater([[4, 1, 0], [7, 6, 4], [5, 6, 2]]) == 4\nassert solution.swimInWater([[0]]) == 0\nassert solution.swimInWater([[39, 29, 0, 35, 56, 10, 23, 22, 20], [12, 57, 30, 69, 4, 66, 74, 75, 40], [31, 59, 3, 21, 8, 12, 45, 50, 41], [45, 74, 45, 65, 25, 5, 63, 6, 58], [0, 14, 51, 64, 25, 67, 39, 18, 7], [78, 23, 48, 31, 37, 76, 69, 22, 33], [65, 42, 68, 33, 63, 43, 12, 35, 2], [13, 35, 50, 66, 10, 0, 63, 24, 15], [24, 29, 18, 21, 3, 3, 0, 40, 20]]) == 57\nassert solution.swimInWater([[33, 16, 38, 14, 6, 14, 35], [38, 7, 14, 16, 17, 30, 15], [29, 31, 22, 14, 13, 43, 48], [2, 0, 48, 11, 48, 2, 10], [14, 21, 10, 44, 16, 35, 38], [0, 35, 36, 45, 17, 34, 43], [33, 1, 27, 4, 9, 2, 21]]) == -1\nassert solution.swimInWater([[11, 5, 4, 13], [10, 8, 6, 6], [13, 5, 13, 12], [11, 8, 9, 14]]) == -1\nassert solution.swimInWater([[5, 40, 58, 71, 26, 46, 91, 50, 61, 6], [10, 59, 8, 65, 2, 74, 87, 56, 25, 75], [16, 29, 43, 34, 51, 6, 51, 61, 40, 8], [26, 82, 92, 90, 67, 0, 64, 79, 79, 29], [23, 36, 27, 11, 20, 79, 13, 53, 88, 26], [79, 95, 93, 94, 46, 81, 96, 32, 42, 21], [87, 57, 23, 20, 4, 40, 79, 96, 46, 83], [25, 0, 82, 27, 1, 53, 0, 89, 51, 26], [80, 85, 51, 23, 27, 47, 1, 28, 81, 84], [96, 70, 37, 40, 8, 65, 21, 70, 50, 72]]) == 90\nassert solution.swimInWater([[3, 0], [2, 0]]) == 1\nassert solution.swimInWater([[0]]) == 0\nassert solution.swimInWater([[42, 2, 43, 39, 29, 42, 10], [15, 47, 13, 1, 5, 41, 4], [34, 13, 14, 32, 41, 34, 21], [12, 27, 44, 22, 21, 1, 27], [24, 31, 10, 43, 8, 37, 16], [31, 33, 0, 40, 46, 3, 6], [32, 32, 32, 48, 35, 5, 40]]) == 47\nassert solution.swimInWater([[84, 61, 16, 19, 54, 15, 49, 23, 91, 12], [32, 55, 87, 32, 99, 53, 16, 54, 28, 81], [9, 11, 94, 40, 74, 53, 48, 21, 19, 85], [9, 82, 32, 7, 48, 17, 19, 63, 50, 24], [1, 22, 98, 23, 20, 46, 39, 49, 76, 3], [6, 84, 60, 31, 90, 45, 25, 55, 70, 34], [58, 91, 44, 99, 48, 31, 77, 40, 75, 3], [19, 23, 15, 46, 47, 77, 76, 96, 15, 48], [46, 11, 61, 48, 99, 37, 17, 24, 34, 65], [54, 39, 57, 87, 29, 23, 50, 24, 51, 65]]) == -1\nassert solution.swimInWater([[41, 30, 33, 12, 50, 0, 5, 4], [30, 48, 1, 32, 57, 14, 41, 40], [51, 28, 46, 37, 55, 54, 33, 45], [14, 5, 32, 63, 40, 41, 29, 60], [52, 24, 17, 46, 47, 60, 37, 51], [37, 53, 8, 23, 43, 11, 43, 35], [54, 22, 29, 12, 37, 15, 45, 24], [56, 33, 3, 63, 27, 35, 51, 37]]) == 60\nassert solution.swimInWater([[19, 22, 9, 19, 13], [19, 7, 0, 2, 7], [12, 8, 22, 19, 10], [21, 1, 1, 20, 18], [9, 17, 11, 20, 17]]) == -1\nassert solution.swimInWater([[3, 4, 0], [5, 4, 3], [0, 1, 8]]) == 8\nassert solution.swimInWater([[85, 26, 21, 28, 46, 22, 13, 58, 69, 38], [4, 41, 74, 77, 56, 23, 69, 72, 82, 55], [34, 86, 25, 38, 66, 56, 57, 56, 54, 34], [16, 97, 86, 53, 66, 67, 79, 67, 89, 19], [44, 74, 80, 93, 72, 49, 32, 52, 72, 10], [66, 62, 86, 24, 25, 70, 11, 13, 66, 15], [36, 29, 72, 16, 40, 34, 18, 5, 41, 74], [95, 7, 12, 42, 74, 82, 22, 39, 66, 28], [10, 58, 19, 48, 32, 83, 91, 89, 24, 15], [2, 0, 54, 41, 26, 43, 97, 42, 81, 41]]) == -1\nassert solution.swimInWater([[3, 0], [1, 2]]) == 3\nassert solution.swimInWater([[39, 33, 26, 30, 46, 32, 30], [39, 17, 6, 45, 30, 28, 12], [19, 45, 34, 37, 48, 45, 7], [11, 6, 15, 23, 46, 38, 5], [44, 19, 14, 48, 18, 47, 42], [36, 21, 6, 7, 11, 35, 48], [16, 6, 9, 25, 45, 28, 5]]) == 39\nassert solution.swimInWater([[55, 21, 19, 15, 38, 47, 52, 6], [28, 35, 62, 14, 9, 5, 56, 2], [37, 8, 48, 53, 45, 31, 21, 11], [46, 59, 34, 9, 18, 7, 36, 36], [21, 1, 0, 30, 4, 41, 31, 17], [6, 27, 17, 21, 0, 46, 61, 44], [11, 9, 25, 22, 13, 29, 24, 34], [54, 13, 39, 21, 53, 15, 14, 50]]) == 59\nassert solution.swimInWater([[0]]) == 0\nassert solution.swimInWater([[0, 25, 11, 4, 28, 19], [34, 15, 18, 14, 7, 5], [8, 4, 22, 1, 1, 3], [5, 28, 0, 5, 34, 7], [31, 34, 11, 33, 33, 13], [11, 27, 25, 30, 21, 26]]) == -1\nassert solution.swimInWater([[0, 6, 3], [7, 1, 6], [8, 5, 4]]) == 7\nassert solution.swimInWater([[61, 26, 50, 3, 2, 30, 38, 8], [5, 8, 62, 33, 37, 27, 14, 38], [52, 7, 29, 54, 4, 61, 54, 34], [42, 41, 39, 24, 24, 53, 57, 18], [33, 22, 32, 41, 23, 50, 51, 57], [9, 21, 63, 22, 56, 49, 27, 34], [42, 50, 51, 36, 7, 61, 55, 2], [9, 53, 21, 22, 49, 29, 39, 55]]) == 62\nassert solution.swimInWater([[19, 10, 4, 29, 25, 30], [10, 4, 3, 9, 8, 24], [10, 19, 6, 33, 33, 26], [33, 35, 15, 15, 5, 31], [17, 14, 26, 25, 7, 9], [19, 21, 20, 34, 26, 12]]) == 34\nassert solution.swimInWater([[54, 59, 75, 38, 41, 42, 66, 22, 71], [44, 48, 56, 55, 59, 12, 30, 40, 43], [9, 27, 24, 47, 69, 11, 40, 49, 65], [22, 32, 1, 33, 62, 17, 37, 13, 9], [64, 73, 17, 36, 61, 68, 52, 79, 12], [65, 80, 63, 32, 61, 79, 9, 23, 77], [21, 64, 37, 3, 68, 69, 43, 6, 41], [18, 18, 34, 60, 50, 67, 25, 9, 49], [56, 5, 72, 64, 72, 60, 11, 7, 76]]) == 76\nassert solution.swimInWater([[2, 3], [3, 3]]) == -1\nassert solution.swimInWater([[0, 4, 0], [1, 3, 4], [7, 0, 4]]) == 4\nassert solution.swimInWater([[61, 69, 31, 55, 56, 14, 64, 78, 65], [37, 21, 56, 40, 74, 4, 72, 51, 70], [0, 51, 45, 8, 35, 39, 74, 0, 70], [70, 39, 53, 21, 18, 1, 79, 72, 48], [64, 16, 9, 32, 7, 46, 29, 75, 19], [46, 70, 35, 13, 66, 12, 72, 33, 30], [20, 73, 47, 77, 73, 73, 33, 47, 50], [35, 31, 52, 14, 61, 77, 70, 78, 78], [78, 58, 26, 33, 14, 80, 4, 66, 20]]) == 77\nassert solution.swimInWater([[26, 8, 2, 35, 29, 47, 5], [16, 13, 43, 38, 22, 22, 33], [38, 18, 12, 44, 22, 36, 31], [19, 37, 41, 3, 42, 33, 26], [34, 21, 30, 26, 11, 23, 3], [1, 31, 36, 25, 27, 35, 6], [12, 44, 18, 25, 44, 16, 42]]) == 42\nassert solution.swimInWater([[3, 34, 32, 1, 52, 19, 40, 63], [12, 51, 45, 47, 44, 36, 4, 42], [62, 16, 41, 55, 52, 0, 20, 37], [27, 47, 39, 57, 28, 35, 54, 51], [60, 9, 25, 33, 5, 9, 57, 63], [29, 45, 51, 39, 53, 43, 56, 33], [60, 25, 7, 50, 28, 26, 43, 32], [6, 49, 30, 1, 33, 33, 59, 56]]) == 62\nassert solution.swimInWater([[4, 0, 2], [2, 7, 7], [2, 6, 1]]) == 6\nassert solution.swimInWater([[13, 8, 11, 14], [12, 2, 2, 5], [3, 3, 0, 15], [15, 13, 2, 5]]) == 9\nassert solution.swimInWater([[6, 62, 57, 16, 10, 17, 14, 30], [15, 44, 39, 1, 21, 27, 13, 1], [53, 25, 6, 13, 61, 23, 25, 34], [51, 17, 22, 5, 15, 51, 60, 8], [12, 15, 55, 61, 8, 8, 49, 41], [8, 56, 16, 49, 0, 52, 5, 17], [24, 8, 43, 9, 23, 55, 19, 39], [47, 45, 20, 31, 42, 14, 38, 11]]) == -1\nassert solution.swimInWater([[0]]) == 0\nassert solution.swimInWater([[45, 23, 16, 48, 5, 27, 47], [29, 4, 30, 6, 16, 7, 33], [0, 11, 13, 28, 21, 13, 16], [47, 13, 39, 39, 37, 36, 47], [44, 5, 2, 13, 11, 20, 17], [36, 33, 2, 47, 32, 3, 38], [31, 11, 31, 22, 36, 0, 1]]) == 37\nassert solution.swimInWater([[10, 32, 36, 46, 76, 77, 17, 16, 11, 14], [8, 21, 62, 62, 84, 11, 15, 90, 50, 61], [0, 1, 34, 98, 59, 82, 74, 49, 73, 98], [72, 60, 74, 89, 6, 42, 1, 71, 99, 8], [92, 72, 58, 22, 30, 21, 40, 53, 17, 68], [36, 51, 50, 66, 7, 88, 94, 34, 88, 95], [70, 11, 87, 69, 60, 62, 56, 48, 69, 7], [52, 14, 9, 15, 52, 55, 88, 28, 68, 12], [34, 31, 96, 32, 40, 4, 80, 87, 22, 51], [54, 3, 60, 94, 78, 19, 68, 23, 39, 4]]) == -1\nassert solution.swimInWater([[35, 12, 13, 32, 20, 28], [19, 16, 6, 0, 15, 11], [13, 24, 17, 2, 33, 31], [24, 0, 30, 2, 13, 32], [19, 29, 17, 20, 26, 34], [30, 1, 13, 9, 2, 22]]) == 32\nassert solution.swimInWater([[18, 5, 44, 42, 0, 12, 9], [45, 24, 6, 19, 32, 6, 21], [2, 20, 38, 19, 27, 42, 13], [27, 35, 13, 0, 12, 21, 6], [37, 37, 31, 33, 43, 21, 2], [37, 35, 2, 17, 48, 8, 15], [44, 9, 28, 30, 10, 7, 12]]) == 38\nassert solution.swimInWater([[2, 0], [2, 1]]) == 2\nassert solution.swimInWater([[5, 0, 7, 10, 8], [15, 1, 6, 9, 10], [17, 3, 6, 11, 8], [24, 16, 9, 17, 7], [22, 1, 19, 2, 14]]) == 15\nassert solution.swimInWater([[1, 8, 2, 3], [1, 1, 13, 15], [3, 1, 9, 9], [6, 1, 9, 3]]) == 13\nassert solution.swimInWater([[10, 4, 35, 40, 26, 4, 1], [33, 6, 7, 34, 13, 30, 42], [0, 0, 37, 26, 12, 8, 47], [2, 34, 47, 24, 15, 23, 37], [44, 37, 33, 35, 0, 16, 39], [6, 9, 39, 0, 28, 47, 23], [19, 21, 31, 48, 17, 40, 27]]) == -1\nassert solution.swimInWater([[18, 67, 4, 58, 42, 30, 53, 4, 77], [15, 42, 55, 3, 36, 47, 74, 33, 55], [5, 18, 21, 43, 8, 18, 58, 31, 55], [23, 69, 7, 73, 39, 63, 8, 12, 68], [73, 32, 69, 5, 12, 29, 35, 37, 0], [40, 42, 26, 33, 80, 70, 10, 25, 24], [41, 32, 7, 24, 64, 1, 73, 79, 40], [77, 7, 11, 8, 34, 3, 7, 25, 42], [72, 27, 63, 49, 9, 9, 41, 29, 20]]) == -1\nassert solution.swimInWater([[4, 0, 4], [0, 4, 3], [1, 2, 6]]) == 6\nassert solution.swimInWater([[0, 6, 5, 22, 6], [7, 11, 13, 10, 6], [21, 2, 8, 1, 15], [5, 23, 1, 7, 24], [11, 6, 14, 24, 8]]) == 24\nassert solution.swimInWater([[5, 1, 1], [5, 2, 7], [6, 3, 3]]) == 6\nassert solution.swimInWater([[0, 6, 3], [5, 3, 7], [0, 4, 2]]) == 5\nassert solution.swimInWater([[23, 24, 9, 29, 19, 11], [2, 8, 2, 28, 23, 13], [29, 23, 33, 16, 30, 28], [6, 9, 16, 33, 11, 30], [23, 9, 35, 24, 19, 7], [12, 27, 30, 10, 18, 10]]) == 30\nassert solution.swimInWater([[0]]) == 0\nassert solution.swimInWater([[7, 4, 3], [0, 5, 1], [0, 3, 0]]) == 5\nassert solution.swimInWater([[31, 20, 10, 81, 79, 40, 55, 14, 15, 82], [7, 80, 80, 31, 37, 59, 45, 34, 2, 53], [66, 4, 5, 38, 44, 88, 73, 21, 36, 6], [62, 30, 79, 51, 32, 77, 94, 72, 13, 90], [67, 40, 6, 45, 25, 55, 90, 40, 96, 20], [78, 33, 6, 64, 82, 73, 24, 49, 7, 58], [39, 19, 10, 33, 67, 23, 76, 51, 55, 77], [28, 94, 92, 1, 89, 54, 24, 28, 83, 11], [21, 28, 56, 5, 11, 64, 3, 99, 54, 61], [36, 39, 21, 29, 92, 84, 39, 74, 6, 73]]) == 82\nassert solution.swimInWater([[18, 23, 9, 20, 3], [18, 7, 5, 16, 24], [16, 5, 13, 23, 2], [16, 7, 0, 0, 4], [13, 3, 5, 19, 14]]) == 18\nassert solution.swimInWater([[74, 45, 38, 45, 98, 29, 81, 95, 37, 5], [31, 4, 23, 58, 37, 74, 87, 20, 67, 45], [78, 0, 98, 78, 15, 93, 66, 34, 35, 43], [97, 54, 48, 65, 33, 17, 30, 80, 62, 34], [48, 0, 3, 49, 72, 2, 14, 39, 44, 75], [59, 33, 45, 19, 36, 53, 60, 43, 66, 41], [87, 14, 77, 29, 85, 5, 44, 25, 60, 73], [94, 46, 97, 5, 69, 42, 10, 7, 43, 20], [23, 84, 20, 54, 67, 95, 3, 65, 11, 47], [51, 87, 89, 87, 16, 51, 72, 83, 60, 93]]) == -1\nassert solution.swimInWater([[7, 22, 20, 9, 8, 0], [31, 11, 7, 2, 0, 31], [32, 2, 30, 28, 0, 31], [12, 4, 3, 32, 5, 15], [21, 6, 29, 2, 13, 29], [15, 3, 5, 6, 0, 21]]) == 31\nassert solution.swimInWater([[68, 80, 2, 10, 8, 82, 40, 33, 77, 61], [49, 32, 33, 17, 14, 77, 80, 35, 81, 77], [48, 10, 71, 68, 43, 68, 74, 21, 20, 32], [15, 76, 62, 51, 77, 41, 72, 72, 62, 94], [20, 57, 49, 29, 7, 1, 17, 65, 90, 77], [18, 80, 55, 64, 52, 93, 15, 4, 94, 80], [63, 54, 21, 58, 51, 2, 52, 6, 64, 57], [42, 18, 7, 56, 12, 93, 96, 97, 31, 21], [41, 70, 44, 10, 97, 65, 11, 57, 91, 86], [22, 56, 16, 3, 81, 18, 41, 22, 77, 35]]) == -1\nassert solution.swimInWater([[8, 17, 2, 4, 12], [23, 21, 2, 9, 2], [24, 22, 22, 3, 5], [20, 8, 22, 8, 2], [24, 13, 13, 14, 4]]) == 21\nassert solution.swimInWater([[5, 6, 14, 13, 7], [17, 5, 11, 22, 21], [24, 24, 23, 22, 16], [16, 1, 5, 14, 20], [15, 6, 8, 14, 16]]) == 23\nassert solution.swimInWater([[30, 21, 32, 10, 32, 18], [35, 34, 28, 31, 12, 20], [25, 22, 26, 19, 3, 35], [2, 12, 30, 35, 5, 3], [23, 7, 4, 32, 2, 12], [5, 10, 29, 16, 18, 9]]) == 34\nassert solution.swimInWater([[42, 15, 26, 56, 46, 2, 8, 44], [12, 3, 2, 47, 59, 27, 37, 28], [20, 39, 51, 24, 54, 18, 28, 30], [34, 37, 8, 31, 43, 33, 35, 11], [22, 59, 49, 3, 7, 26, 6, 52], [26, 54, 3, 25, 36, 19, 44, 56], [27, 41, 17, 20, 42, 9, 62, 12], [16, 62, 52, 5, 3, 51, 3, 53]]) == 53\nassert solution.swimInWater([[2, 0, 11, 6], [14, 14, 3, 13], [1, 15, 0, 0], [9, 2, 9, 2]]) == 11\nassert solution.swimInWater([[3, 3], [0, 2]]) == 2\nassert solution.swimInWater([[56, 23, 50, 39, 47, 50, 60, 18], [2, 53, 23, 2, 5, 54, 53, 42], [37, 50, 11, 25, 35, 5, 21, 29], [45, 2, 30, 59, 9, 58, 9, 49], [7, 16, 18, 57, 15, 45, 56, 57], [28, 30, 43, 50, 45, 21, 8, 5], [26, 34, 17, 14, 51, 58, 40, 21], [45, 45, 38, 16, 53, 42, 35, 51]]) == -1\nassert solution.swimInWater([[35, 32, 13, 29, 11, 13], [3, 9, 0, 5, 28, 5], [31, 34, 27, 31, 24, 7], [21, 19, 11, 28, 12, 18], [3, 14, 21, 34, 27, 28], [12, 1, 5, 6, 21, 33]]) == 33\nassert solution.swimInWater([[4, 20, 0, 22, 11, 20], [22, 27, 30, 31, 10, 29], [29, 21, 35, 5, 1, 2], [30, 3, 26, 30, 16, 16], [27, 9, 31, 20, 22, 6], [10, 32, 20, 20, 19, 11]]) == 30\nassert solution.swimInWater([[11, 19, 12, 14, 12], [16, 24, 13, 2, 21], [13, 6, 12, 15, 7], [7, 16, 13, 4, 0], [11, 21, 23, 8, 2]]) == 19\nassert solution.swimInWater([[8, 8, 0], [0, 4, 2], [5, 7, 6]]) == 6\nassert solution.swimInWater([[33, 64, 77, 20, 27, 14, 69, 67, 9], [56, 58, 47, 36, 78, 52, 35, 52, 27], [61, 65, 61, 60, 24, 80, 44, 44, 24], [69, 56, 68, 11, 1, 2, 57, 43, 72], [76, 74, 24, 23, 3, 7, 68, 55, 63], [59, 75, 76, 76, 45, 67, 42, 71, 42], [4, 62, 14, 16, 53, 0, 72, 40, 49], [74, 78, 49, 75, 54, 43, 27, 7, 29], [33, 0, 61, 62, 71, 62, 59, 51, 60]]) == -1\nassert solution.swimInWater([[7, 7, 0, 4], [13, 12, 11, 5], [1, 0, 12, 9], [1, 3, 1, 15]]) == 15\nassert solution.swimInWater([[12, 24, 4, 14, 11], [16, 14, 15, 11, 19], [11, 16, 2, 15, 5], [6, 15, 21, 14, 4], [18, 0, 1, 3, 4]]) == 24\nassert solution.swimInWater([[15, 14, 10, 13, 3], [4, 5, 4, 15, 1], [12, 20, 5, 19, 9], [1, 2, 7, 24, 21], [5, 18, 0, 19, 18]]) == 19\nassert solution.swimInWater([[7, 2, 0], [3, 0, 0], [6, 2, 4]]) == 5\nassert solution.swimInWater([[2, 3, 6], [7, 1, 0], [7, 1, 5]]) == 5\nassert solution.swimInWater([[64, 20, 53, 96, 7, 6, 15, 66, 97, 0], [53, 83, 79, 39, 81, 0, 47, 36, 92, 41], [56, 96, 99, 36, 87, 63, 56, 23, 35, 0], [57, 39, 11, 80, 49, 78, 50, 31, 18, 26], [35, 79, 30, 30, 92, 59, 73, 41, 13, 55], [59, 49, 82, 91, 93, 34, 1, 91, 17, 1], [58, 45, 84, 5, 81, 92, 31, 83, 27, 65], [4, 89, 30, 50, 82, 12, 69, 67, 16, 36], [88, 46, 90, 17, 27, 77, 3, 61, 93, 0], [22, 81, 75, 42, 43, 63, 26, 79, 59, 86]]) == -1",
  "inefficient_solution": "class Solution:\n    def swimInWater(self, grid):\n        n = len(grid)\n        visited = [[False for _ in range(n)] for _ in range(n)]\n        queue = [(0, 0, 0)]\n        visited[0][0] = True\n        max_val = grid[0][0]\n        while queue:\n            x, y, t = queue.pop(0)\n            if x == n - 1 and y == n - 1:\n                return t\n            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                    if grid[nx][ny] <= t:\n                        queue.append((nx, ny, t))\n                    else:\n                        queue.append((nx, ny, grid[nx][ny]))\n                    visited[nx][ny] = True\n            max_val = max(max_val, grid[x][y])\n            queue.append((x, y, max_val))\n        return -1",
  "is_python": true
}