{
  "problem_idx": 2305,
  "task_name": "Fair Distribution of Cookies",
  "markdown_description": "\nYou are given an integer array `cookies`, where `cookies[i]` denotes the number of cookies in the `ith` bag. You are also given an integer `k` that denotes the number of children to distribute **all** the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.\n\n\nThe **unfairness** of a distribution is defined as the **maximum** **total** cookies obtained by a single child in the distribution.\n\n\nReturn *the **minimum** unfairness of all distributions*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** cookies = [8,15,10,20,8], k = 2\n**Output:** 31\n**Explanation:** One optimal distribution is [8,15,8] and [10,20]\n- The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.\n- The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies.\nThe unfairness of the distribution is max(31,30) = 31.\nIt can be shown that there is no distribution with an unfairness less than 31.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cookies = [6,1,3,2,2,4,1,2], k = 3\n**Output:** 7\n**Explanation:** One optimal distribution is [6,1], [3,2,2], and [4,1,2]\n- The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies.\n- The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.\n- The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.\nThe unfairness of the distribution is max(7,7,7) = 7.\nIt can be shown that there is no distribution with an unfairness less than 7.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= cookies.length <= 8`\n* `1 <= cookies[i] <= 105`\n* `2 <= k <= cookies.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -> int:\n        def dfs(i):\n            if i >= len(cookies):\n                nonlocal ans\n                ans = max(cnt)\n                return\n            for j in range(k):\n                if cnt[j] + cookies[i] >= ans or (j and cnt[j] == cnt[j - 1]):\n                    continue\n                cnt[j] += cookies[i]\n                dfs(i + 1)\n                cnt[j] -= cookies[i]\n\n        ans = inf\n        cnt = [0] * k\n        cookies.sort(reverse=True)\n        dfs(0)\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom math import inf\n\nclass Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -> int:\n        def dfs(i):\n            if i >= len(cookies):\n                nonlocal ans\n                ans = max(cnt)\n                return\n            for j in range(k):\n                if cnt[j] + cookies[i] >= ans or (j and cnt[j] == cnt[j - 1]):\n                    continue\n                cnt[j] += cookies[i]\n                dfs(i + 1)\n                cnt[j] -= cookies[i]\n\n        ans = inf\n        cnt = [0] * k\n        cookies.sort(reverse=True)\n        dfs(0)\n        return ans\n\ndef generate_test_case():\n    # Initialize the solution\n    solution = Solution()\n\n    # Generate random cookies list\n    cookies = random.choices(range(1, 10001), k=random.randint(2, 8))\n\n    # Generate a random value for k\n    k = random.randint(2, len(cookies))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.distributeCookies(cookies, k)\n\n    return cookies, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        cookies, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.distributeCookies(cookies, k) == expected_result\n        print(f\"assert solution.distributeCookies({cookies}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.distributeCookies({cookies}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.distributeCookies([9577, 8654, 8042, 3103, 2559, 889, 70], 6) == 9577\nassert solution.distributeCookies([6425, 3752, 3564, 2618, 2247, 1571], 2) == 10177\nassert solution.distributeCookies([6262, 3351, 2977], 2) == 6328\nassert solution.distributeCookies([9897, 8150, 6831, 6478, 4730, 4596, 3864, 1661], 4) == 12014\nassert solution.distributeCookies([9843, 6500, 6230, 3337, 2910, 1609], 5) == 9843\nassert solution.distributeCookies([9124, 7657, 4733, 4170, 2390, 362], 4) == 9124\nassert solution.distributeCookies([9929, 9839, 9138, 5806, 2214], 5) == 9929\nassert solution.distributeCookies([9281, 7362, 7082, 4979, 1885, 1068, 794, 770], 7) == 9281\nassert solution.distributeCookies([8303, 5805, 3183, 2546, 2402], 2) == 11390\nassert solution.distributeCookies([9591, 6875, 5835, 2194, 1440, 69], 5) == 9591\nassert solution.distributeCookies([9422, 1185], 2) == 9422\nassert solution.distributeCookies([7989, 6067, 4646, 2624, 2485, 880, 471], 4) == 7989\nassert solution.distributeCookies([9101, 8699, 6822, 6349, 5866, 1771, 1673, 580], 8) == 9101\nassert solution.distributeCookies([6677, 5394, 820, 678, 462], 4) == 6677\nassert solution.distributeCookies([8174, 7259, 6906, 6635, 6519, 5494, 3952, 2314], 5) == 12013\nassert solution.distributeCookies([9249, 9020, 8355, 7373, 1914, 1821, 980, 521], 5) == 9249\nassert solution.distributeCookies([8039, 7051, 6679, 5588, 5099, 1929, 1620], 5) == 8039\nassert solution.distributeCookies([6761, 4023, 2293, 1570], 2) == 7886\nassert solution.distributeCookies([9820, 8194, 4991, 4941, 4878, 3950, 3478, 2079], 4) == 11672\nassert solution.distributeCookies([8535, 6921, 6463, 4617, 3128, 1816, 1351, 734], 6) == 8535\nassert solution.distributeCookies([7497, 5405, 5339, 2151, 1995, 1647, 226], 2) == 12391\nassert solution.distributeCookies([9191, 8767, 2540], 3) == 9191\nassert solution.distributeCookies([9277, 1465, 472], 3) == 9277\nassert solution.distributeCookies([9596, 8003, 4880, 4693, 4134, 2129, 1522, 98], 2) == 17576\nassert solution.distributeCookies([3800, 2535, 175], 3) == 3800\nassert solution.distributeCookies([6985, 6970, 6794, 6447, 5074, 79], 6) == 6985\nassert solution.distributeCookies([8781, 4449, 3764, 3370, 1712, 349], 6) == 8781\nassert solution.distributeCookies([4407, 4195, 1357], 3) == 4407\nassert solution.distributeCookies([7393, 7107, 5200], 2) == 12307\nassert solution.distributeCookies([7953, 5679, 5223, 5214, 4572, 4514, 2004, 858], 4) == 9786\nassert solution.distributeCookies([7042, 6536, 4392, 4065], 2) == 11107\nassert solution.distributeCookies([9496, 8914, 8711, 7707, 3663, 1369], 4) == 11370\nassert solution.distributeCookies([8132, 7190, 6245, 5662, 3534, 1510], 3) == 11907\nassert solution.distributeCookies([8876, 7473, 3093], 2) == 10566\nassert solution.distributeCookies([8905, 5917, 5807, 321], 4) == 8905\nassert solution.distributeCookies([7687, 7048, 81], 3) == 7687\nassert solution.distributeCookies([9855, 9270, 7608, 7295, 3932, 2233], 2) == 20497\nassert solution.distributeCookies([7539, 6663, 6282, 5526, 3799, 2744, 2405, 723], 6) == 7539\nassert solution.distributeCookies([5863, 4351], 2) == 5863\nassert solution.distributeCookies([6775, 3436, 2735], 3) == 6775\nassert solution.distributeCookies([8738, 7465, 6946, 4446, 3363, 2840, 2115], 2) == 18114\nassert solution.distributeCookies([9947, 7638, 4628, 3579, 2405, 1933, 1255], 5) == 9947\nassert solution.distributeCookies([8136, 7777, 5102, 2685, 924], 4) == 8136\nassert solution.distributeCookies([9516, 6296, 2271, 1664, 786, 411], 4) == 9516\nassert solution.distributeCookies([7557, 5706, 3617, 1798, 614, 323], 2) == 9937\nassert solution.distributeCookies([9956, 9326, 6917, 200], 4) == 9956\nassert solution.distributeCookies([7012, 2534, 1284, 407], 2) == 7012\nassert solution.distributeCookies([7128, 5419, 4768, 1663, 1544], 5) == 7128\nassert solution.distributeCookies([9295, 3243], 2) == 9295\nassert solution.distributeCookies([9343, 6069, 4853, 1163, 346], 3) == 9343\nassert solution.distributeCookies([8669, 7548, 7253, 2496, 1469, 603, 371], 5) == 8669\nassert solution.distributeCookies([8269, 7639, 6870, 5524, 5227, 1458], 4) == 10751\nassert solution.distributeCookies([9298, 7660, 5869, 4265, 3844], 2) == 15769\nassert solution.distributeCookies([9817, 1568, 726, 548], 2) == 9817\nassert solution.distributeCookies([9254, 8885, 8732, 7190, 5139, 4318, 2394, 581], 4) == 13050\nassert solution.distributeCookies([8136, 5789, 5542, 4747, 4623, 3749, 301], 4) == 9370\nassert solution.distributeCookies([7669, 4010], 2) == 7669\nassert solution.distributeCookies([9630, 2844, 844], 2) == 9630\nassert solution.distributeCookies([5083, 807, 749, 244, 158], 2) == 5083\nassert solution.distributeCookies([9255, 7224, 4139, 3153], 3) == 9255\nassert solution.distributeCookies([9688, 3824], 2) == 9688\nassert solution.distributeCookies([8801, 8427, 7972, 3201], 2) == 16399\nassert solution.distributeCookies([4407, 4280], 2) == 4407\nassert solution.distributeCookies([8991, 2619, 1184, 994], 3) == 8991\nassert solution.distributeCookies([6532, 5871, 5108, 2227, 271], 3) == 7335\nassert solution.distributeCookies([9507, 8753, 6825, 6773, 5602, 3953, 515], 4) == 12375\nassert solution.distributeCookies([8617, 7288, 5906, 4216, 4209, 1293], 2) == 15816\nassert solution.distributeCookies([9852, 8622, 8448, 8047, 6887, 4537, 3277], 4) == 14934\nassert solution.distributeCookies([8926, 5738, 4034], 2) == 9772\nassert solution.distributeCookies([9775, 5063, 4815, 4107, 1388, 892, 229], 3) == 9775\nassert solution.distributeCookies([7666, 1837], 2) == 7666\nassert solution.distributeCookies([8747, 8339, 8068, 4476, 4382, 3135], 5) == 8747\nassert solution.distributeCookies([8756, 7177, 7080, 5963, 2389, 1733], 6) == 8756\nassert solution.distributeCookies([9239, 8538, 8110, 6789, 6134, 3592, 2283], 4) == 12923\nassert solution.distributeCookies([7837, 1706, 747], 2) == 7837\nassert solution.distributeCookies([7004, 6485, 1836, 1364, 620], 4) == 7004\nassert solution.distributeCookies([5124, 4627, 4562, 3785, 1845, 253], 3) == 8347\nassert solution.distributeCookies([7538, 7439, 4410, 3840, 3294, 779, 423], 4) == 7538\nassert solution.distributeCookies([9139, 1289, 704], 3) == 9139\nassert solution.distributeCookies([9309, 7104, 6577, 6509, 2819, 2757, 2595, 1069], 7) == 9309\nassert solution.distributeCookies([8694, 7921, 4173, 1414, 1294, 915, 639], 2) == 12733\nassert solution.distributeCookies([7022, 6332, 5393, 4974, 4624, 3760, 1975, 213], 7) == 7022\nassert solution.distributeCookies([8245, 5544], 2) == 8245\nassert solution.distributeCookies([3630, 3434, 2701, 2576, 1932], 5) == 3630\nassert solution.distributeCookies([9663, 9299, 2008], 2) == 11307\nassert solution.distributeCookies([9801, 9345, 8912, 8170, 3484, 1244, 521, 306], 4) == 11654\nassert solution.distributeCookies([8492, 34], 2) == 8492\nassert solution.distributeCookies([9598, 9561, 9019, 7362, 1893], 4) == 9598\nassert solution.distributeCookies([9747, 9351, 9158, 6410, 4899, 2920, 145], 4) == 12078\nassert solution.distributeCookies([9717, 8973, 7317, 6687, 5175, 1463, 436], 4) == 11862\nassert solution.distributeCookies([7841, 7399, 5734, 4258, 4093, 3409, 1138], 7) == 7841\nassert solution.distributeCookies([3016, 1367], 2) == 3016\nassert solution.distributeCookies([7258, 2254], 2) == 7258\nassert solution.distributeCookies([8938, 8113, 6799, 356], 2) == 14912\nassert solution.distributeCookies([6659, 1041], 2) == 6659\nassert solution.distributeCookies([9271, 6266, 5418, 4220, 3918], 3) == 10184\nassert solution.distributeCookies([9648, 8434, 7598, 2085, 806], 5) == 9648\nassert solution.distributeCookies([7982, 5376, 5005, 4494, 2666, 2096, 1969], 3) == 9951\nassert solution.distributeCookies([7437, 6797, 6316, 4935, 1463, 1448, 42], 7) == 7437\nassert solution.distributeCookies([7812, 286], 2) == 7812",
  "inefficient_solution": "class Solution:\n    def distributeCookies(self, cookies: List[int], k: int) -> int:\n        def dfs(i, cookies_copy, cnt):\n            if i >= len(cookies):\n                nonlocal ans\n                ans = max(cnt)\n                return\n            for j in range(k):\n                temp = cookies_copy[:]\n                temp[i] = cookies[i]\n                temp_copy = temp[:]\n                temp_copy.sort(reverse=True)\n                if sum(temp_copy[:j]) + temp_copy[j] >= ans or (j and temp_copy[j] == temp_copy[j - 1]):\n                    continue\n                temp_copy[j] += temp[i]\n                dfs(i + 1, temp_copy, cnt[:])\n                temp_copy[j] -= temp[i]\n\n        ans = float('inf')\n        cookies_copy = cookies[:]\n        cnt = [0] * k\n        dfs(0, cookies_copy, cnt)\n        return ans",
  "is_python": true
}