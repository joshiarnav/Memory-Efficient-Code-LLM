{
  "problem_idx": 2968,
  "task_name": "Apply Operations to Maximize Frequency Score",
  "markdown_description": "\nYou are given a **0-indexed** integer array `nums` and an integer `k`.\n\n\nYou can perform the following operation on the array **at most** `k` times:\n\n\n* Choose any index `i` from the array and **increase** or **decrease** `nums[i]` by `1`.\n\n\nThe score of the final array is the **frequency** of the most frequent element in the array.\n\n\nReturn *the **maximum** score you can achieve*.\n\n\nThe frequency of an element is the number of occurences of that element in the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,6,4], k = 3\n**Output:** 3\n**Explanation:** We can do the following operations on the array:\n- Choose i = 0, and increase the value of nums[0] by 1. The resulting array is [2,2,6,4].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,3].\n- Choose i = 3, and decrease the value of nums[3] by 1. The resulting array is [2,2,6,2].\nThe element 2 is the most frequent in the final array so our score is 3.\nIt can be shown that we cannot achieve a better score.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,4,2,4], k = 0\n**Output:** 3\n**Explanation:** We cannot apply any operations so our score will be the frequency of the most frequent element in the original array, which is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `0 <= k <= 1014`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxFrequencyScore(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        s = list(accumulate(nums, initial=0))\n        n = len(nums)\n        l, r = 0, n\n        while l < r:\n            mid = (l + r + 1) >> 1\n            ok = False\n            for i in range(n - mid + 1):\n                j = i + mid\n                x = nums[(i + j) // 2]\n                left = ((i + j) // 2 - i) * x - (s[(i + j) // 2] - s[i])\n                right = (s[j] - s[(i + j) // 2]) - ((j - (i + j) // 2) * x)\n                if left + right <= k:\n                    ok = True\n                    break\n            if ok:\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxFrequencyScore(self, nums, k):\n        nums.sort()\n        s = list(accumulate(nums, initial=0))\n        n = len(nums)\n        l, r = 0, n\n        while l < r:\n            mid = (l + r + 1) >> 1\n            ok = False\n            for i in range(n - mid + 1):\n                j = i + mid\n                x = nums[(i + j) // 2]\n                left = ((i + j) // 2 - i) * x - (s[(i + j) // 2] - s[i])\n                right = (s[j] - s[(i + j) // 2]) - ((j - (i + j) // 2) * x)\n                if left + right <= k:\n                    ok = True\n                    break\n            if ok:\n                l = mid\n            else:\n                r = mid - 1\n        return l\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random target sum\n    k = random.randint(0, 1000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxFrequencyScore(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxFrequencyScore(nums, k) == expected_result\n        print(f\"assert solution.maxFrequencyScore({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxFrequencyScore({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxFrequencyScore([1, 18, 26, 35, 74, 80, 94, 98, 100], 552) == 9\nassert solution.maxFrequencyScore([2, 6, 17, 25, 52, 81, 88, 93, 97], 696) == 9\nassert solution.maxFrequencyScore([24, 70, 85, 99], 663) == 4\nassert solution.maxFrequencyScore([2, 25, 40, 47, 64, 72, 76, 79, 96], 300) == 9\nassert solution.maxFrequencyScore([23, 33, 39, 60, 65, 66, 87, 92], 466) == 8\nassert solution.maxFrequencyScore([11, 21, 30, 37, 50, 65, 67, 84, 96], 711) == 9\nassert solution.maxFrequencyScore([1, 15, 33, 36, 48, 67, 68, 70, 82, 99], 262) == 10\nassert solution.maxFrequencyScore([4, 24, 28, 42, 43], 259) == 5\nassert solution.maxFrequencyScore([4, 32, 59, 69, 74], 992) == 5\nassert solution.maxFrequencyScore([20, 27, 35, 37, 44, 45, 55, 63, 75, 90], 548) == 10\nassert solution.maxFrequencyScore([52, 65], 331) == 2\nassert solution.maxFrequencyScore([48, 69], 65) == 2\nassert solution.maxFrequencyScore([2, 13, 15, 53, 58, 66, 70, 88, 97], 703) == 9\nassert solution.maxFrequencyScore([30, 32, 68, 84], 439) == 4\nassert solution.maxFrequencyScore([12, 24, 27, 29, 55, 62, 73, 74, 76], 220) == 9\nassert solution.maxFrequencyScore([6, 8, 21, 26, 61, 74, 96, 99], 992) == 8\nassert solution.maxFrequencyScore([14, 41, 95], 606) == 3\nassert solution.maxFrequencyScore([8, 11, 37, 48, 84, 100], 588) == 6\nassert solution.maxFrequencyScore([3, 12, 30, 41, 44, 61, 62], 938) == 7\nassert solution.maxFrequencyScore([4, 40, 47], 40) == 2\nassert solution.maxFrequencyScore([8, 46, 57, 80], 789) == 4\nassert solution.maxFrequencyScore([54, 67, 68, 76, 94, 95], 896) == 6\nassert solution.maxFrequencyScore([5, 23, 63], 453) == 3\nassert solution.maxFrequencyScore([69, 71], 566) == 2\nassert solution.maxFrequencyScore([3, 29, 40, 48, 75, 82], 207) == 6\nassert solution.maxFrequencyScore([3, 7, 56, 85], 122) == 3\nassert solution.maxFrequencyScore([1, 17, 18, 38, 46, 49, 56, 66, 89], 640) == 9\nassert solution.maxFrequencyScore([9, 29, 32, 35, 37, 43, 79, 86, 89, 91], 661) == 10\nassert solution.maxFrequencyScore([6, 14, 59, 97], 685) == 4\nassert solution.maxFrequencyScore([19, 54, 58, 60, 87, 94, 96], 88) == 5\nassert solution.maxFrequencyScore([2, 39, 73, 100], 606) == 4\nassert solution.maxFrequencyScore([23, 27, 64, 66, 87], 443) == 5\nassert solution.maxFrequencyScore([4, 27, 31, 73, 85, 88], 286) == 6\nassert solution.maxFrequencyScore([4, 64, 67, 71, 82], 713) == 5\nassert solution.maxFrequencyScore([4, 19, 25, 50, 74, 75, 97, 99], 832) == 8\nassert solution.maxFrequencyScore([53, 73], 993) == 2\nassert solution.maxFrequencyScore([12, 16, 38, 48, 63, 68, 81, 96], 523) == 8\nassert solution.maxFrequencyScore([13, 65], 950) == 2\nassert solution.maxFrequencyScore([22, 27, 45, 71], 405) == 4\nassert solution.maxFrequencyScore([14, 26, 30, 53, 64, 68, 73, 76, 83], 844) == 9\nassert solution.maxFrequencyScore([6, 18, 30, 76, 94], 676) == 5\nassert solution.maxFrequencyScore([22, 63, 80], 732) == 3\nassert solution.maxFrequencyScore([23, 73], 191) == 2\nassert solution.maxFrequencyScore([11, 12, 35, 36, 43, 44, 60, 70, 72, 94], 523) == 10\nassert solution.maxFrequencyScore([21, 26, 49, 53, 61, 82, 89], 831) == 7\nassert solution.maxFrequencyScore([13, 31, 36, 44, 54, 58, 78, 84], 285) == 8\nassert solution.maxFrequencyScore([51, 57, 79, 82, 88], 925) == 5\nassert solution.maxFrequencyScore([14, 32, 34, 36, 42, 48, 56, 73], 990) == 8\nassert solution.maxFrequencyScore([2, 8, 15, 31, 42, 57, 71], 444) == 7\nassert solution.maxFrequencyScore([4, 51, 52, 53, 84], 772) == 5\nassert solution.maxFrequencyScore([29, 57, 73], 312) == 3\nassert solution.maxFrequencyScore([8, 17, 21, 33, 39, 55, 62, 67, 71, 74], 459) == 10\nassert solution.maxFrequencyScore([14, 32, 35, 53, 54, 70, 75, 78, 95, 96], 546) == 10\nassert solution.maxFrequencyScore([52, 61, 77], 104) == 3\nassert solution.maxFrequencyScore([26, 35, 47, 58, 75, 92], 632) == 6\nassert solution.maxFrequencyScore([43, 58, 60, 87], 354) == 4\nassert solution.maxFrequencyScore([6, 26, 77], 988) == 3\nassert solution.maxFrequencyScore([61, 95], 207) == 2\nassert solution.maxFrequencyScore([2, 16, 20, 31, 55, 56, 82, 92], 551) == 8\nassert solution.maxFrequencyScore([20, 23, 25, 33, 41, 65, 76], 673) == 7\nassert solution.maxFrequencyScore([5, 14, 28, 51, 58, 84, 88, 97, 99], 349) == 9\nassert solution.maxFrequencyScore([34, 42, 57, 67, 68, 93], 241) == 6\nassert solution.maxFrequencyScore([46, 57, 85], 860) == 3\nassert solution.maxFrequencyScore([21, 37], 89) == 2\nassert solution.maxFrequencyScore([17, 74, 78, 91], 291) == 4\nassert solution.maxFrequencyScore([5, 19, 40, 49, 92], 951) == 5\nassert solution.maxFrequencyScore([3, 23, 27, 32, 37, 54, 55, 61, 76], 323) == 9\nassert solution.maxFrequencyScore([44, 51, 57, 59, 65, 68, 96], 481) == 7\nassert solution.maxFrequencyScore([49, 60, 65, 70, 73, 77, 80, 82, 90, 92], 521) == 10\nassert solution.maxFrequencyScore([16, 39, 40, 42, 55, 61, 74, 83, 88], 941) == 9\nassert solution.maxFrequencyScore([2, 10, 11, 21, 26, 31, 39, 40, 44], 578) == 9\nassert solution.maxFrequencyScore([29, 34, 37, 46, 59, 64, 69, 81, 84, 88], 914) == 10\nassert solution.maxFrequencyScore([26, 30, 40, 45, 46], 669) == 5\nassert solution.maxFrequencyScore([83, 90], 951) == 2\nassert solution.maxFrequencyScore([17, 44, 49, 56, 69, 76, 83, 99, 100], 956) == 9\nassert solution.maxFrequencyScore([32, 50, 56, 64, 82], 348) == 5\nassert solution.maxFrequencyScore([10, 12, 25, 47], 974) == 4\nassert solution.maxFrequencyScore([19, 28, 29, 30, 54, 56, 57, 68, 88, 98], 940) == 10\nassert solution.maxFrequencyScore([29, 91, 96], 115) == 3\nassert solution.maxFrequencyScore([12, 22, 48, 78, 81, 90], 349) == 6\nassert solution.maxFrequencyScore([31, 38, 87], 238) == 3\nassert solution.maxFrequencyScore([3, 23], 50) == 2\nassert solution.maxFrequencyScore([7, 43], 626) == 2\nassert solution.maxFrequencyScore([17, 56, 80, 89], 614) == 4\nassert solution.maxFrequencyScore([1, 69, 85], 628) == 3\nassert solution.maxFrequencyScore([5, 8, 19, 28, 46, 71, 75, 82, 85, 93], 997) == 10\nassert solution.maxFrequencyScore([8, 61, 89], 977) == 3\nassert solution.maxFrequencyScore([35, 48, 72, 76, 80], 157) == 5\nassert solution.maxFrequencyScore([28, 94], 244) == 2\nassert solution.maxFrequencyScore([4, 8, 27, 41, 50, 57, 59, 61, 65, 69], 709) == 10\nassert solution.maxFrequencyScore([6, 75, 77], 194) == 3\nassert solution.maxFrequencyScore([1, 15, 40, 61, 84, 89, 90, 98], 257) == 8\nassert solution.maxFrequencyScore([2, 6, 24, 28, 41, 56, 59, 64, 97, 99], 122) == 7\nassert solution.maxFrequencyScore([1, 6, 27, 28, 32, 47, 48, 56, 65], 617) == 9\nassert solution.maxFrequencyScore([18, 21, 22, 33, 45, 49, 50], 519) == 7\nassert solution.maxFrequencyScore([3, 52, 53, 68, 74], 488) == 5\nassert solution.maxFrequencyScore([21, 37, 44, 51, 65, 75, 76, 81, 82, 87], 510) == 10\nassert solution.maxFrequencyScore([88, 100], 115) == 2\nassert solution.maxFrequencyScore([2, 14, 20, 22, 32, 41, 53, 69, 87, 97], 343) == 10\nassert solution.maxFrequencyScore([49, 61, 62, 65, 74], 276) == 5",
  "inefficient_solution": "class Solution:\n    def maxFrequencyScore(self, nums, k):\n        nums.sort()\n        n = len(nums)\n        scores = [0 for _ in range(n + 1)]\n        scores[0] = 1\n        for i in range(1, n + 1):\n            scores[i] = scores[i - 1] + 1 if nums[i - 1] == nums[i - 2] else 1\n        max_score = 0\n        for i in range(n):\n            for j in range(i, n):\n                counts = [0 for _ in range(max(scores[j - i + 1], scores[i]) + 1)]\n                for m in range(i, j + 1):\n                    counts[nums[m]] += 1\n                for m in range(max(scores[j - i + 1], scores[i]) + 1):\n                    if counts[m] * m > k:\n                        break\n                    max_score = max(max_score, counts[m])\n        return max_score",
  "is_python": true
}