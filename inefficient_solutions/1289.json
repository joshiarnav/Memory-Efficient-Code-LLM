{
  "problem_idx": 1289,
  "task_name": "Minimum Falling Path Sum II",
  "markdown_description": "\nGiven an `n x n` integer matrix `grid`, return *the minimum sum of a **falling path with non-zero shifts***.\n\n\nA **falling path with non-zero shifts** is a choice of exactly one element from each row of `grid` such that no two elements chosen in adjacent rows are in the same column.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1289.Minimum%20Falling%20Path%20Sum%20II/images/falling-grid.jpg)\n\n```\n\n**Input:** grid = [[1,2,3],[4,5,6],[7,8,9]]\n**Output:** 13\n**Explanation:** \nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\u00a0[1,5,7], so the answer is\u00a013.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[7]]\n**Output:** 7\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length == grid[i].length`\n* `1 <= n <= 200`\n* `-99 <= grid[i][j] <= 99`\n\n\n",
  "canonical_solution": "class Solution:\n    def minFallingPathSum(self, grid: List[List[int]]) -> int:\n        f = g = 0\n        fp = -1\n        for row in grid:\n            ff = gg = inf\n            ffp = -1\n            for j, v in enumerate(row):\n                s = (g if j == fp else f) + v\n                if s < ff:\n                    gg = ff\n                    ff = s\n                    ffp = j\n                elif s < gg:\n                    gg = s\n            f, g, fp = ff, gg, ffp\n        return f\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minFallingPathSum(self, grid):\n        f = g = 0\n        fp = -1\n        for row in grid:\n            ff = gg = float('inf')\n            ffp = -1\n            for j, v in enumerate(row):\n                s = (g if j == fp else f) + v\n                if s < ff:\n                    gg = ff\n                    ff = s\n                    ffp = j\n                elif s < gg:\n                    gg = s\n            f, g, fp = ff, gg, ffp\n        return f\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random grid\n    n = random.randint(1, 10)\n    grid = [[random.randint(-99, 99) for _ in range(n)] for _ in range(n)]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minFallingPathSum(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minFallingPathSum(grid) == expected_result\n        print(f\"assert solution.minFallingPathSum({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minFallingPathSum({grid}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minFallingPathSum([[-35, 46, -5], [-47, -50, -82], [-72, -42, 24]]) == -189\nassert solution.minFallingPathSum([[33, -30], [17, 91]]) == -13\nassert solution.minFallingPathSum([[-99, -73, -36, 43, 45], [-99, -53, 78, -36, -92], [68, 41, -4, 25, 6], [77, -58, -50, 63, -21], [-14, -33, 75, -32, -96]]) == -349\nassert solution.minFallingPathSum([[-21, 38, 94, -51, -54, 14, 55, -72, -7], [46, -24, 46, 12, -70, 52, 8, -83, 89], [28, 32, 36, 76, -81, 83, -58, 16, 25], [87, 75, -86, 58, 90, 88, 11, 7, 20], [49, 37, -2, 28, 98, -8, -19, 22, -3], [79, -24, -63, -13, -75, 8, -11, -68, -46], [64, -41, 86, 78, -33, -10, -13, 59, -80], [-83, 71, 51, 55, 17, -46, 32, 89, -33], [-17, -49, 41, -42, -40, 79, 34, 90, 76]]) == -610\nassert solution.minFallingPathSum([[49, -16, -72, -77, 0, -75, 92, 54, 52], [20, 54, -22, -78, -87, -88, 26, 55, 22], [-79, -31, 10, 28, -44, 53, 47, -3, -84], [-94, 3, -13, 98, -38, -11, 28, 78, 21], [53, 40, -23, -61, -71, 45, 51, 44, 71], [33, 59, 34, -56, 48, -25, 20, 43, 65], [51, 73, 8, -82, 31, -88, 38, -8, -1], [-13, -14, 89, 8, -53, 21, -96, -33, -82], [-47, -48, -29, -75, -28, -44, -29, 51, 49]]) == -729\nassert solution.minFallingPathSum([[18, -44, 38, 89], [53, -9, 85, 1], [91, 46, 50, 13], [-29, -25, 4, -67]]) == -64\nassert solution.minFallingPathSum([[94, -52, -79, -57, 47], [-62, 19, 43, 64, 84], [-51, -6, 11, -11, -33], [-49, -24, -88, 0, -5], [-16, 15, 51, 94, 19]]) == -278\nassert solution.minFallingPathSum([[-94]]) == -94\nassert solution.minFallingPathSum([[-54, -8], [-57, -23]]) == -77\nassert solution.minFallingPathSum([[98, -62], [20, 86]]) == -42\nassert solution.minFallingPathSum([[-45, 71], [-27, 45]]) == 0\nassert solution.minFallingPathSum([[-42, 11, 30, -36, -2, -95], [13, -82, -73, 57, 58, -46], [25, 53, -99, -89, -14, -42], [67, -30, 50, -67, -92, -79], [-56, 7, -2, -7, 98, 51], [25, 97, -53, -70, -95, -35]]) == -519\nassert solution.minFallingPathSum([[-39, -89, 24], [13, -76, -91], [75, 87, -63]]) == -178\nassert solution.minFallingPathSum([[66, -9, -5, 36, -86, -62, 20], [-23, 74, 92, 87, 15, -45, -44], [-16, 47, -70, 94, 82, -11, 16], [77, 15, -60, -79, 43, 39, -82], [61, -49, -81, 49, 32, 21, 64], [95, -70, 22, -18, 72, 64, 81], [91, 52, 54, -73, -92, 35, -9]]) == -526\nassert solution.minFallingPathSum([[-47, 63, 22, -9, -62, -58, -24, -59], [-98, -4, 55, -40, -9, -47, 90, -85], [-24, -79, 14, -77, 48, -76, -2, 62], [-36, -70, -44, 38, 55, -51, -19, 94], [29, -33, -2, 85, -31, -48, 87, 70], [-3, -39, 22, -24, 23, -22, -32, 41], [-14, -29, -28, -34, -61, 60, -10, -75], [-42, -12, -2, 33, -48, -71, -36, 77]]) == -540\nassert solution.minFallingPathSum([[-47, -94, -57, -95, 75, -39], [-67, 14, -37, 30, 24, 89], [80, -15, -45, 75, 60, 85], [-31, 40, -46, 54, 49, -39], [90, 0, 76, 94, -93, -97], [45, -37, -12, -26, 66, 24]]) == -376\nassert solution.minFallingPathSum([[-6, -36, 13, -95, -29], [53, 96, -40, 7, 28], [-70, 16, -3, 86, -21], [24, 64, -99, -80, 55], [30, -77, 36, 59, -80]]) == -384\nassert solution.minFallingPathSum([[39, -83, 18], [63, -2, -99], [98, -68, 38]]) == -250\nassert solution.minFallingPathSum([[-9, 54, 52, -50], [92, 86, 60, -39], [32, -98, 19, 8], [-63, 27, -11, -87]]) == -233\nassert solution.minFallingPathSum([[56, -88, 35], [-61, -67, -40], [-33, -80, 67]]) == -229\nassert solution.minFallingPathSum([[21]]) == 21\nassert solution.minFallingPathSum([[-95]]) == -95\nassert solution.minFallingPathSum([[80, -98, -4, 95, -38, 98], [-10, 34, 44, 50, 80, -92], [21, -86, 54, 21, 45, 5], [-22, -35, -19, 57, -6, 86], [-28, 95, 20, -10, 78, 67], [69, 75, -76, 75, 53, 46]]) == -399\nassert solution.minFallingPathSum([[88, 51, 15, 5, -61, 94, -81, 84], [-71, -91, 36, -50, 64, -75, 21, -27], [-77, 24, -34, -27, 67, 58, -62, 61], [11, -29, -68, -23, -53, 75, -94, 44], [-55, -11, 37, 25, 45, 7, 67, -59], [15, 64, 77, -50, -88, 29, -63, -38], [-27, 72, 70, -14, -32, -54, -11, -66], [-69, -68, 54, 57, 20, 28, 80, -79]]) == -625\nassert solution.minFallingPathSum([[35, 24, -81, -77, -31, 56, -34, 49, -45, 43], [-75, -44, -78, -71, 6, -22, -31, -51, 58, 46], [-64, 58, -26, 13, 57, 14, -18, -48, 40, -79], [58, -99, -66, -3, -40, 43, 63, -25, -83, 77], [18, -90, 62, -18, -30, -7, -17, 10, 27, 58], [59, -58, 72, 71, -1, -40, -55, -57, 33, 85], [88, -88, -47, 80, -32, -73, -76, -4, -64, -88], [12, 95, -78, -92, 11, 36, -86, -92, 32, -39], [96, -18, -35, -70, -7, 24, -82, -82, 87, 34], [-79, -7, 99, 31, -81, -48, -74, -77, -14, -60]]) == -808\nassert solution.minFallingPathSum([[34, 94, 72], [94, 67, -98], [79, 96, -84]]) == 15\nassert solution.minFallingPathSum([[-88, -2, -35, -85], [-41, 44, -53, -16], [71, -75, -65, -24], [91, -25, -66, 4]]) == -282\nassert solution.minFallingPathSum([[46, 34, -14, 63, -83, 82], [75, -10, 93, -32, -58, 10], [26, 14, -36, 5, 20, -34], [-23, -34, 49, 69, 96, 96], [83, 1, -38, -28, 89, 20], [42, 49, -43, 4, -3, -71]]) == -294\nassert solution.minFallingPathSum([[53, 68], [76, 59]]) == 112\nassert solution.minFallingPathSum([[22, -9], [-87, 4]]) == -96\nassert solution.minFallingPathSum([[-64, 68], [8, -60]]) == -124\nassert solution.minFallingPathSum([[41, 76, -9, 6, -81, 45, 14, -53], [-78, 50, -82, -53, -63, -8, 33, 27], [-31, -69, -99, -88, -63, 86, 76, -2], [-95, 36, 91, -89, -58, 15, 83, -40], [-82, -21, -88, 44, -63, 78, 49, 52], [26, 80, 62, -1, -8, 10, -52, -63], [-81, -97, -30, 85, 66, 17, -77, -74], [18, 17, 77, -15, 97, -36, 79, 30]]) == -637\nassert solution.minFallingPathSum([[36, 4, -30, 70, -64, -74], [60, -46, 89, -74, 75, 61], [41, -3, 58, -81, -73, -9], [10, -76, 97, 51, -53, -15], [30, 96, 48, 67, -12, -41], [-77, -52, 77, 56, -15, 49]]) == -415\nassert solution.minFallingPathSum([[86, 84, 74], [-33, -7, 90], [-16, -84, -46]]) == -43\nassert solution.minFallingPathSum([[87, -10, -69, -9, -82, -83, 57, -86], [-28, 68, 93, -12, 69, 97, 93, -99], [-90, -25, 40, -46, -86, -22, 4, -56], [57, 54, -76, -38, -2, 49, -72, -1], [-42, -72, 6, 0, 47, 34, 91, -56], [60, -49, 88, -12, -94, -91, 19, 44], [16, -77, -62, -66, 31, -93, 38, 91], [73, -65, -92, -89, -33, 24, -89, -76]]) == -699\nassert solution.minFallingPathSum([[98, -43, 17, 14, -13, 10], [-54, 8, -85, 72, -81, -36], [9, 11, 56, 7, 3, 51], [46, 94, -54, -32, -85, -49], [-14, 59, 2, -14, -78, -75], [-7, 43, 96, 58, 60, 60]]) == -288\nassert solution.minFallingPathSum([[-2, 46, -82, 11, 35, -57, 71, 4, -55, -4], [4, -23, -17, 63, -69, -85, -39, -50, -89, -43], [39, 67, 84, 84, 23, 63, 98, -45, -75, 46], [52, 82, 97, -7, 23, 10, 70, -10, -59, 23], [-48, 88, 26, -31, 87, 39, -38, 0, 3, 7], [-58, -45, 13, 77, 2, -9, 35, 74, -23, -27], [-75, -94, 34, -30, 96, 82, -23, -7, 40, 0], [-9, -17, 70, -16, -3, 4, 42, -82, -82, -84], [-48, 34, 7, -35, -63, -80, 77, -71, 1, -71], [-52, 47, -62, -87, 63, 17, -18, 86, 59, -76]]) == -716\nassert solution.minFallingPathSum([[58, 69, -22, 24, 91], [-22, 3, -6, 70, 47], [-28, 21, -24, 67, 90], [49, -95, -40, 20, -13], [61, -52, -30, -36, 96]]) == -199\nassert solution.minFallingPathSum([[-52]]) == -52\nassert solution.minFallingPathSum([[68, -99], [82, 24]]) == -17\nassert solution.minFallingPathSum([[82, -96, -66, 61, -74, -55, 68, 36, 45], [42, -5, -86, -56, 50, 77, 62, -69, 66], [-44, -73, 7, 91, -36, -10, -13, 44, 12], [68, -87, 89, -60, -90, 3, -19, 86, -72], [-4, 68, -41, 65, -95, 38, 24, 14, 52], [-35, -42, 95, -1, 42, -4, -2, 38, -41], [29, 43, -40, -99, -84, -56, 63, -76, -51], [3, 51, -93, 45, -75, -15, -51, -3, 3], [76, 92, -99, 68, -28, 63, -85, 46, 84]]) == -741\nassert solution.minFallingPathSum([[-86, -32, 61, -18, 28, 90, -58, 97], [28, -32, 79, 76, 16, 10, 24, -22], [-39, 60, 0, -37, -17, 7, 66, 99], [57, -14, -46, -9, -57, 78, -83, -68], [9, 10, 97, 13, -29, 15, -72, -61], [67, -67, -49, 26, 14, 93, 70, -61], [-3, 52, -22, -54, 37, 79, -2, 66], [-1, -54, 21, 74, 69, 50, -60, 32]]) == -482\nassert solution.minFallingPathSum([[23, -72, 9, -37, -14, -66, -18, 69, -48], [-86, 1, -18, 21, 15, 24, -96, 35, -41], [-22, -72, 46, -46, -40, -35, -74, 46, 82], [-17, 77, 17, -70, 11, -71, 76, -43, -59], [34, 88, -58, 72, 79, 90, 7, 40, -83], [81, -49, 13, 80, -17, 4, 24, -11, -97], [-73, -90, 44, 77, -18, -66, 81, -18, 89], [93, 93, -86, 36, -14, 68, -89, 61, -79], [-82, 90, 15, -27, -91, -86, -22, 7, 53]]) == -736\nassert solution.minFallingPathSum([[-43, -99, 51, 21, 86, -58, -35, -39, 44], [-45, -26, 36, -70, -73, -72, -39, 19, -77], [91, -11, -75, -71, 79, -64, -85, 46, -27], [56, 48, 91, -14, 79, 68, -32, 95, 68], [5, 67, -67, -17, -92, 21, -45, 70, 68], [-86, -51, -48, 53, 67, 72, -5, 85, -45], [-67, -19, 98, -50, -60, 62, -93, -87, -62], [-14, -9, 17, 16, -55, 0, -69, 55, -61], [-79, -26, 58, 76, 18, -38, -29, 40, 29]]) == -696\nassert solution.minFallingPathSum([[96, 55, -82, 21, 73, 12, 86, 56, 88], [-1, 52, -38, -29, -68, 82, 4, -7, 61], [41, -85, 98, 88, 36, -34, -70, 12, -50], [-94, -27, 69, 4, -51, 49, 82, 0, -14], [17, -99, 57, -7, -63, -83, -61, -42, -18], [95, -28, -71, 23, -2, -49, 85, -76, 70], [-30, 20, 78, -80, 9, -77, -24, -58, 9], [17, -83, -51, -2, 0, -32, 94, -40, -55], [-86, 91, -76, 87, 12, 28, -15, 48, -93]]) == -760\nassert solution.minFallingPathSum([[42, -50, 68], [-39, 81, -88], [46, 13, 99]]) == -125\nassert solution.minFallingPathSum([[-19, 14, -25], [-21, 34, 43], [66, 50, -57]]) == -103\nassert solution.minFallingPathSum([[94, -55, -44], [-11, 77, -99], [-24, -64, 65]]) == -218\nassert solution.minFallingPathSum([[-60, 36, -49, -81, -98, 80, 61, 60], [34, -46, -57, -78, 28, 37, -97, 30], [-55, -79, 66, -73, 48, 85, 55, 24], [39, 75, 49, -33, -42, -13, 33, 77], [-99, -93, -91, -73, 91, -54, -95, -97], [-83, -25, 77, 36, 27, -78, 9, 56], [-95, -40, -56, 28, -77, 80, 44, 26], [-57, -16, 75, 48, -99, -94, -55, 44]]) == -687\nassert solution.minFallingPathSum([[29]]) == 29\nassert solution.minFallingPathSum([[63, 42, -30, -15], [-20, 71, -8, -55], [-61, -12, 79, -31], [35, -28, 22, 32]]) == -174\nassert solution.minFallingPathSum([[54, -94, -43, -1, 94], [-73, -4, 56, 71, -39], [7, -23, -76, 32, -78], [-39, 68, -89, -70, 94], [-7, 82, 9, 35, 96]]) == -341\nassert solution.minFallingPathSum([[-67, -88, 8], [58, -25, -86], [-22, -88, -40]]) == -262\nassert solution.minFallingPathSum([[20, 31, -74, -86, -44, -2, -98], [-95, 80, 8, 12, 58, 96, -40], [-96, -28, 53, 6, 21, -1, 98], [-11, 64, 14, 13, 38, -82, 47], [-47, -11, 91, -66, 41, 79, -55], [-39, -74, -20, 32, -10, -69, 99], [-40, 21, 50, 29, -58, -47, -80]]) == -524\nassert solution.minFallingPathSum([[76, 16, -89, 99, 78, 79, 1, 28], [-89, -25, 92, 17, -41, 41, -21, -23], [-6, -64, -3, 65, 1, 56, -9, -90], [-88, -79, 67, -94, -39, -33, 86, -83], [94, -79, 0, 31, -25, 17, -31, -42], [47, 80, -72, -39, -38, -28, -20, 1], [-23, -94, 58, -42, 28, 47, -10, 46], [-35, -85, 94, -73, -71, 13, -79, 3]]) == -686\nassert solution.minFallingPathSum([[61, 25, 71], [25, 42, 91], [79, -92, 72]]) == -42\nassert solution.minFallingPathSum([[-20, -36, 83], [-17, 74, -7], [47, -30, 91]]) == -83\nassert solution.minFallingPathSum([[31, -74, 58, -64, 97, -19, -98, 6, 11, 26], [-20, 81, 40, -42, 49, -92, 82, 5, -82, 39], [5, 79, 29, 69, -7, 67, 94, -76, 56, 14], [92, -63, -90, -87, 84, -11, 56, -51, -64, 17], [65, 23, -37, -27, -85, -20, 56, -24, -57, -30], [-84, -53, 84, 68, 72, -41, -60, 14, 32, 48], [35, -77, 41, 13, 79, -68, -77, -51, -80, 23], [-12, -4, -47, -64, 24, -3, 10, 91, 12, 35], [61, -60, -70, 80, -43, 20, -83, -52, -25, 21], [-46, 84, 12, -5, -82, -7, -81, -85, -12, -49]]) == -837\nassert solution.minFallingPathSum([[13, -85, 17, -35, -87, -4, -16, 11], [-78, -17, 30, -35, 36, 11, 43, -92], [-3, -90, -51, 1, 28, -69, 84, 28], [-86, 58, -37, -68, 81, 98, -93, 23], [32, -77, 92, 13, -59, -64, -85, -71], [-94, -17, 56, 1, 39, 83, 91, -45], [56, 65, 63, -43, 79, 95, -47, -42], [-52, -77, -44, 89, 5, 46, 26, -44]]) == -658\nassert solution.minFallingPathSum([[50, 73, 64, -62, -43, -23], [-12, 48, 92, 65, 29, 32], [-81, -34, -18, 12, -82, 78], [92, 62, -79, -6, -73, -56], [82, -37, -68, -3, -80, -31], [-95, -79, 47, -96, -44, 10]]) == -411\nassert solution.minFallingPathSum([[16, -74, -18, 6, 27, -13, 74], [-89, 16, 97, -56, 7, -26, 19], [32, 34, -33, -25, 34, -92, 92], [50, -42, -67, -11, 29, -77, 19], [-26, 43, -67, 3, -23, 16, -55], [32, 28, 14, 39, -72, 84, 17], [79, 22, -82, 65, 16, -38, 51]]) == -531\nassert solution.minFallingPathSum([[33, -68, -44, 34, -92, 17, 92], [37, 50, 23, -34, 73, 34, 1], [-34, -51, -76, 94, 45, -5, -11], [52, 69, -89, -64, -27, -7, -91], [79, -37, -73, 13, 61, 8, -98], [25, 15, -10, -4, -99, -76, -83], [-94, 81, 56, 8, -38, -80, 41]]) == -559\nassert solution.minFallingPathSum([[93, 49, -45], [35, -42, -57], [-57, 29, 64]]) == -144\nassert solution.minFallingPathSum([[51, 78, 91, -16, 70, -71, 69, -88], [-91, -89, -93, 26, -97, -95, -97, 92], [-24, -67, 49, 85, 72, 73, -45, -49], [-38, -74, -17, 76, -31, 93, 14, -89], [43, 93, 89, 49, -12, 90, 42, 65], [-23, 36, 82, -58, 34, -35, -50, 57], [-65, -76, 35, 69, 49, 63, -53, -34], [73, -68, 57, 62, -48, 98, 59, 70]]) == -544\nassert solution.minFallingPathSum([[-88, -65, 43, 72, 30, -80], [70, -67, -31, 90, 85, -28], [-73, -52, 8, -72, -48, 11], [77, -4, 52, -65, -10, 30], [-75, -14, -74, -69, -87, 69], [88, -85, -12, -3, 42, 70]]) == -465\nassert solution.minFallingPathSum([[3, -17, -58, 15], [87, -27, -61, 97], [-14, 72, 62, 59], [65, 43, 38, 31]]) == -68\nassert solution.minFallingPathSum([[8, 23, 40, 28, -34], [-27, 59, -56, 33, 67], [60, -81, 67, 48, -16], [16, -95, -5, 93, 56], [-88, -45, -18, -26, 34]]) == -289\nassert solution.minFallingPathSum([[92, 93, 97, 92, 66, -52, 71, 76, -60, 7], [0, 18, -43, -21, 88, -25, -36, -23, 86, 68], [-29, -71, 19, -90, 25, -24, 95, 51, -57, -36], [-55, 91, -9, 63, 51, 38, 58, -47, -67, 61], [25, 38, 91, 89, -74, -86, 60, 97, 76, 13], [63, 5, 31, 81, -57, -36, 41, -33, -72, 13], [-1, -66, 31, 59, -45, -53, 51, -41, -31, 2], [-69, 19, 95, 22, -25, -45, -33, -95, 78, 96], [-20, -74, -35, 67, -46, -86, -35, 1, -95, -13], [-27, 48, 52, 5, 28, -57, 82, -39, 69, -55]]) == -731\nassert solution.minFallingPathSum([[-93, -82, 47, -54], [-61, 5, 11, -13], [-75, 70, -10, 21], [69, 22, 79, 46]]) == -159\nassert solution.minFallingPathSum([[73]]) == 73\nassert solution.minFallingPathSum([[73, -52, -57, -59, 84, 36, -52, -20, -49, -86], [58, -16, -26, 14, -86, 77, 66, 71, -10, 76], [-44, 12, 23, -64, 7, -11, -45, 95, 31, 22], [-93, -71, 77, -24, -36, -11, -72, 36, 64, 57], [23, 88, -2, -2, 73, 75, 38, 19, -85, 69], [86, 60, -94, -95, -34, 73, -74, 58, -72, 37], [34, -92, 82, 49, -82, -58, 34, 47, -47, -90], [-43, -76, -16, -7, 77, 28, 92, 16, -44, 6], [-31, 98, -84, 53, -94, -37, -74, 30, 54, 54], [-42, 83, 91, 43, 17, 72, -30, -8, -88, 4]]) == -857\nassert solution.minFallingPathSum([[10, -47, 8, -73, 44, 56, 97, 5], [-22, -56, -25, 98, 4, 23, 28, 47], [-44, 71, -87, 70, -2, -64, -28, -57], [38, 89, 20, 41, 6, -99, 14, -58], [64, 25, -3, -64, 23, 3, -73, -18], [-79, -55, -61, 45, 98, 83, 81, 2], [-48, -36, -72, -54, 96, 47, -54, -37], [23, 26, 58, 7, 66, 51, -18, -92]]) == -631\nassert solution.minFallingPathSum([[-22, -47, 87], [-87, 13, -62], [-55, 88, 46]]) == -164\nassert solution.minFallingPathSum([[-70, 35, 62, 77, -35, 32, -73, 66], [-96, -44, 23, 60, -25, 26, 40, -45], [-32, -4, -10, -27, 65, 20, 81, 74], [-66, -50, -29, -30, 79, 63, 1, 63], [8, 43, 30, 72, 32, 66, -27, -20], [-80, 57, 37, 58, 96, -43, -31, -57], [84, -82, -71, -70, -12, -60, -8, -11], [-80, 76, 89, 18, 5, 62, -36, -67]]) == -531\nassert solution.minFallingPathSum([[48, -37], [6, 3]]) == -31\nassert solution.minFallingPathSum([[-30, -2, -24, 82, -6, -32, -31], [-67, -82, 61, -60, 18, 90, 12], [58, -9, 52, -45, 73, 89, -57], [27, -81, -88, 21, -92, -67, 23], [-60, 7, 77, -64, 30, -45, 35], [72, 35, -74, 46, -35, 90, -23], [-24, -57, 44, -1, 49, 28, 61]]) == -458\nassert solution.minFallingPathSum([[25, 44, -49, 61, -67, 68, -53], [4, 80, -38, 0, -62, 58, 73], [28, 4, -14, 87, -38, -15, -79], [90, 56, 54, 56, -6, 1, 84], [30, -78, -48, -42, 8, 11, 1], [-94, -92, -44, 31, 71, -85, -27], [40, -62, -59, -69, -5, 89, 34]]) == -441\nassert solution.minFallingPathSum([[2, 72, -69, -94, 56, -95, 52, -85], [9, 84, 19, -39, -13, -66, -98, 21], [90, -62, -46, 65, -93, -88, -64, -63], [24, 78, 29, 47, 38, -10, 79, 99], [41, -55, 66, -50, 91, 63, -60, -39], [97, 69, -46, 96, 69, -41, 1, 25], [-38, -60, 20, 89, -59, -85, -65, -29], [24, -39, 61, 85, -32, 25, 53, 34]]) == -526\nassert solution.minFallingPathSum([[21, 63, 86, 97, 67, 94, 0, 75, 32, -84], [26, 99, 99, 20, 63, -79, 16, -48, -84, 9], [-48, 80, -45, 44, -12, 14, 39, 88, 15, -54], [-94, 83, -76, 80, -77, -48, 50, 87, 45, -73], [-5, 26, 21, 37, -30, -4, -90, 42, -62, -60], [7, -72, 56, 42, 13, -65, 64, 2, 11, -37], [-35, -26, -93, 97, -87, -81, -65, -39, -89, 45], [47, -15, 56, 38, -22, -57, -70, 43, 94, 45], [67, 44, -26, 89, 45, -19, -11, 91, 14, -76], [-54, -23, 95, -12, 19, -72, -80, 48, -29, -16]]) == -797\nassert solution.minFallingPathSum([[75, -48, -96, 3, 56], [-47, 16, -66, 81, -62], [79, 97, 1, -31, 15], [-8, 93, 14, 18, 48], [40, -42, 57, 98, 15]]) == -239\nassert solution.minFallingPathSum([[28, 7, -7, 90, 64, 19, -50, 1], [-27, 67, -58, 87, -11, -16, 82, 94], [-26, 85, 72, -69, -12, -47, 88, -97], [-67, -16, 42, 18, -38, -16, 61, -66], [-64, -35, -90, -65, 49, -16, -70, -33], [-59, 49, 73, -71, -98, 4, -6, -10], [-26, -30, -63, 28, -95, 25, 64, -61], [57, -38, -17, -64, -61, -6, 22, -25]]) == -592\nassert solution.minFallingPathSum([[71, 80, 85], [-97, 70, 65], [22, 14, 6]]) == -11\nassert solution.minFallingPathSum([[90, -42, 3, -43, -74, 16], [-77, -26, -32, -13, -93, -92], [43, -56, 45, 61, -2, -28], [-72, 10, 26, 46, -23, -94], [-14, -71, -5, -62, -60, 96], [-50, 78, -45, 65, -11, -16]]) == -437\nassert solution.minFallingPathSum([[-30, -36, -19, -90, -47, -75, -2], [-25, -83, -69, -17, 51, 86, -96], [34, -71, 29, 93, 56, -84, -45], [15, 47, -39, 80, 41, -3, -7], [39, -17, 99, 5, 5, 35, 10], [-71, -73, 75, -83, -36, 28, -30], [74, 51, -58, 47, 45, -62, -36]]) == -471\nassert solution.minFallingPathSum([[-56, 39], [30, -65]]) == -121\nassert solution.minFallingPathSum([[95, 5], [68, 83]]) == 73\nassert solution.minFallingPathSum([[-24]]) == -24\nassert solution.minFallingPathSum([[-68, 93, 30, 35, -81, 61], [32, -15, 11, 62, 51, 41], [-10, -72, 45, -34, 33, -76], [-11, 50, -17, -20, 86, 34], [-26, 56, 94, -55, 37, 67], [92, -73, 19, -63, -92, 79]]) == -336\nassert solution.minFallingPathSum([[90, -33, -72, 12, -33, -51, 94], [23, 19, -44, -65, 62, -16, -69], [49, 15, -30, -93, -57, -85, 33], [-8, -35, -8, 8, 94, 63, -75], [16, 23, 90, -20, 73, 42, -93], [-60, 68, -88, 89, 70, -76, 59], [98, -46, 50, -95, -58, -38, 86]]) == -545\nassert solution.minFallingPathSum([[-16, 68, -39, -75, 74, -42, -15, 92, -42, 84], [27, -83, 47, -70, -57, 98, 98, 27, 85, 92], [-90, 89, 72, -86, -48, -71, 69, 14, -68, 75], [21, 38, -58, -2, 20, 8, 93, -94, -72, 37], [-95, 34, 72, 49, 28, -10, 87, -10, 98, 14], [-12, 35, 82, 8, 8, -19, 29, 45, -7, 22], [84, 60, 22, -51, -5, -69, -62, 70, 89, -4], [-67, 34, 53, 76, -3, 51, 13, 40, -76, 53], [-51, -53, -40, 26, 24, 32, -33, -74, 41, 98], [17, -60, -33, -54, 19, -54, -68, -48, -40, 17]]) == -736\nassert solution.minFallingPathSum([[36, -67, -83, -36, 95, -65, 23, -64], [17, 98, 66, -66, -98, -35, 61, 9], [40, -14, -73, 74, -32, 98, -93, -48], [56, 12, 26, -3, -5, 65, 7, -33], [18, -92, -92, -9, 69, -5, 73, 80], [-91, -87, -15, 34, 29, -33, 68, 4], [-64, 21, -9, 75, 49, 78, -22, -96], [-84, -42, 4, 19, -16, 25, -19, -6]]) == -670\nassert solution.minFallingPathSum([[63, 7, -28, 90, 26, -44], [46, 64, 76, -42, 15, -95], [-32, -50, -63, 58, 91, 79], [-26, -78, 51, -63, -6, 31], [15, -39, 17, 82, 97, 35], [-23, 14, -19, -34, 2, 55]]) == -322\nassert solution.minFallingPathSum([[-40, 21, -5, -15, -39, -29], [72, 36, -98, -19, -5, 46], [-72, 55, -33, 25, 20, 65], [63, -87, -75, 65, 31, 56], [16, -50, -73, -20, 82, 74], [61, -90, -72, -89, 65, -63]]) == -460\nassert solution.minFallingPathSum([[-53, 20, -29, -23, -46, -68, -30, 99, 24], [-95, -44, 31, -89, 81, 99, -73, 2, -15], [-80, 98, 38, 14, 60, 44, 40, -65, -43], [-79, -75, -46, -87, -58, 39, -7, 30, 70], [-61, -67, 76, 31, -70, 35, -43, 54, -30], [-86, 40, 56, 6, 79, 12, 88, -81, 34], [88, 10, -37, 65, -86, 49, -99, 0, 89], [-28, -63, 6, -82, -78, 65, 19, -24, 83], [82, -8, 54, 62, 17, 51, -65, -5, 86]]) == -726\nassert solution.minFallingPathSum([[15]]) == 15\nassert solution.minFallingPathSum([[35, 48, -12], [42, 22, 42], [-64, -41, 37]]) == -54\nassert solution.minFallingPathSum([[-40, -65, -14, 3, 53, 61, 91], [29, 79, -41, -68, 10, -44, -73], [89, -75, 18, 2, 71, -35, -99], [85, 62, 84, -38, -95, 28, 17], [29, -22, -49, -32, -34, -62, 94], [-65, -73, -74, -92, -68, 46, -18], [-32, 38, 47, -14, -71, -3, -71]]) == -552\nassert solution.minFallingPathSum([[47, 17, 35, -18, -90, -16, -35], [-49, 50, 19, -69, -62, -32, 44], [81, 58, -72, -41, -98, 83, 1], [5, 55, -80, 3, -48, -83, 3], [37, -56, 35, -22, 94, 14, 49], [-88, -38, 0, 79, -57, -36, -93], [-50, 29, -36, -13, 16, 20, -92]]) == -576\nassert solution.minFallingPathSum([[-28, -98, 27, 17, -55], [93, -50, 41, 87, 4], [-23, -22, -41, 5, 62], [9, 3, -13, 6, -70], [55, -10, 8, 18, 70]]) == -226\nassert solution.minFallingPathSum([[-74, 96, -97, -77, 19], [-1, 96, -54, -84, -88], [5, 3, -95, 35, 7], [-21, 77, -59, 98, -1], [85, -25, 42, -68, -58]]) == -369",
  "inefficient_solution": "class Solution:\n    def minFallingPathSum(self, grid):\n        n = len(grid)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for j in range(n):\n            dp[0][j] = grid[0][j]\n        for i in range(1, n):\n            for j in range(n):\n                max_val = float('-inf')\n                second_max_val = float('-inf')\n                for k in range(n):\n                    if k != j:\n                        val = dp[i-1][k] + grid[i][j]\n                        if val > max_val:\n                            second_max_val = max_val\n                            max_val = val\n                        elif val > second_max_val:\n                            second_max_val = val\n                max_val = float('-inf')\n                second_max_val = float('-inf')\n                for k in range(n):\n                    if k not in [j-1, j]:\n                        val = dp[i-1][k] + grid[i][j]\n                        if val > max_val:\n                            second_max_val = max_val\n                            max_val = val\n                        elif val > second_max_val:\n                            second_max_val = val\n                dp[i][j] = min(max_val, second_max_val)\n        min_sum = float('inf')\n        for j in range(n):\n            min_sum = min(min_sum, dp[n-1][j])\n        return min_sum",
  "is_python": true
}