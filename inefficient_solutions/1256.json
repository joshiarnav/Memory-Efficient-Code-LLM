{
  "problem_idx": 1256,
  "task_name": "Encode Number",
  "markdown_description": "\nGiven a non-negative integer `num`, Return its *encoding* string.\n\n\nThe encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1256.Encode%20Number/images/encode_number.png)\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 23\n**Output:** \"1000\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 107\n**Output:** \"101100\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= num <= 10^9`\n\n\n",
  "canonical_solution": "class Solution:\n    def encode(self, num: int) -> str:\n        return bin(num + 1)[3:]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def encode(self, num: int) -> str:\n        return bin(num + 1)[3:]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    num = random.randint(0, 10**9)\n    \n    expected_result = solution.encode(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.encode(num) == expected_result\n        print(f\"assert solution.encode({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.encode({num}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.encode(232692803) == 101110111101001110001000100\nassert solution.encode(148150110) == 000110101001001011101011111\nassert solution.encode(344253874) == 0100100001001110010110110011\nassert solution.encode(434035270) == 1001110111101101101001000111\nassert solution.encode(37836258) == 0010000010101010111100011\nassert solution.encode(678744345) == 01000011101001101000100011010\nassert solution.encode(874161042) == 10100000110101010001110010011\nassert solution.encode(692164026) == 01001010000011001010110111011\nassert solution.encode(209134234) == 100011101110010001010011011\nassert solution.encode(292490515) == 0001011011110000110100010100\nassert solution.encode(941408145) == 11000000111001011111110010010\nassert solution.encode(639148942) == 00110000110001010001110001111\nassert solution.encode(905765495) == 10101111111001110001001111000\nassert solution.encode(104337487) == 10001110000001000001010000\nassert solution.encode(634733320) == 00101110101010100001100001001\nassert solution.encode(26190107) == 100011111010000100011100\nassert solution.encode(903550551) == 10101110110110001011001011000\nassert solution.encode(502447736) == 1101111100101011111001111001\nassert solution.encode(550374357) == 00000110011100000101111010110\nassert solution.encode(99665153) == 01111100001100010100000010\nassert solution.encode(130908414) == 11110011011000000011111111\nassert solution.encode(768401675) == 01101110011001110000100001100\nassert solution.encode(646049073) == 00110100000011110110100110010\nassert solution.encode(764250674) == 01101100011011000101000110011\nassert solution.encode(187846618) == 011001100100100111111011011\nassert solution.encode(252283191) == 111000010011000100100111000\nassert solution.encode(171608127) == 010001110101000100001000000\nassert solution.encode(956363085) == 11001000000001111000101001110\nassert solution.encode(442871815) == 1010011001011011000000001000\nassert solution.encode(312731849) == 0010101000111110100011001010\nassert solution.encode(83620970) == 00111110111111010001101011\nassert solution.encode(121097445) == 11001101111100110011100110\nassert solution.encode(285798735) == 0001000010001111000101010000\nassert solution.encode(290510766) == 0001010100001101011110101111\nassert solution.encode(766108320) == 01101101010011110001010100001\nassert solution.encode(375119453) == 0110010110111101111001011110\nassert solution.encode(435303023) == 1001111100100011001001110000\nassert solution.encode(583730435) == 00010110010110000010100000100\nassert solution.encode(300155802) == 0001111001000000001110011011\nassert solution.encode(856209727) == 10011000010001011100101000000\nassert solution.encode(615188718) == 00100101010110000100011101111\nassert solution.encode(582737102) == 00010101110111101110011001111\nassert solution.encode(65631256) == 1111010010111010000011001\nassert solution.encode(229629110) == 101101011111101110010110111\nassert solution.encode(932352377) == 10111100100101001000101111010\nassert solution.encode(809861164) == 10000010001011000000000101101\nassert solution.encode(304053694) == 0010000111110111110110111111\nassert solution.encode(722350661) == 01011000011100011001001000110\nassert solution.encode(888377829) == 10100111100111001000111100110\nassert solution.encode(664547597) == 00111100111000011000100001110\nassert solution.encode(741676865) == 01100001101010001011101000010\nassert solution.encode(684312920) == 01000110010011100100101011001\nassert solution.encode(403143431) == 1000000001110111101100001000\nassert solution.encode(542602685) == 00000010101110111010110111110\nassert solution.encode(930667641) == 10111011110001101110001111010\nassert solution.encode(851430024) == 10010101111111100101010001001\nassert solution.encode(301592586) == 0001111110011111000000001011\nassert solution.encode(978311118) == 11010010011111101011111001111\nassert solution.encode(728013567) == 01011011001001001101100000000\nassert solution.encode(269241036) == 0000000011000100101011001101\nassert solution.encode(918900864) == 10110110001010101000010000001\nassert solution.encode(458630534) == 1011010101100010010110000111\nassert solution.encode(565953390) == 00001101110111100001101101111\nassert solution.encode(613075133) == 00100100010101100100010111110\nassert solution.encode(585112766) == 00010111000000001110010111111\nassert solution.encode(788205350) == 01110111110110000111100100111\nassert solution.encode(304450332) == 0010001001011000101100011101\nassert solution.encode(419330272) == 1000111111100111100011100001\nassert solution.encode(129680882) == 11101110101100010111110011\nassert solution.encode(486402705) == 1100111111011110101010010010\nassert solution.encode(711929666) == 01010011011110010111101000011\nassert solution.encode(710425237) == 01010010110000011101010010110\nassert solution.encode(48956054) == 0111010110000001010010111\nassert solution.encode(858535303) == 10011001011000011010110001000\nassert solution.encode(439973998) == 1010001110010111100001101111\nassert solution.encode(407034709) == 1000010000101101101101010110\nassert solution.encode(302603055) == 0010000010010101101100110000\nassert solution.encode(353508145) == 0101000100100001101100110010\nassert solution.encode(22258323) == 010100111010001010010100\nassert solution.encode(552409891) == 00000111011010001101100100100\nassert solution.encode(464120116) == 1011101010011110100100110101\nassert solution.encode(342380908) == 0100011010000101000101101101\nassert solution.encode(874335317) == 10100000111010100110001010110\nassert solution.encode(702634231) == 01001111000010101100011111000\nassert solution.encode(915697243) == 10110100101000110111001011100\nassert solution.encode(292013706) == 0001011001111100011010001011\nassert solution.encode(910766974) == 10110010010010011001101111111\nassert solution.encode(466605476) == 1011110011111101010110100101\nassert solution.encode(446715706) == 1010101000000101011100111011\nassert solution.encode(880457972) == 10100011110101011100011110101\nassert solution.encode(802800352) == 01111110110011100001011100001\nassert solution.encode(293210753) == 0001011110100000101010000010\nassert solution.encode(298597825) == 0001110011000011110111000010\nassert solution.encode(958154402) == 11001000111000100011010100011\nassert solution.encode(632963693) == 00101101110100100001001101110\nassert solution.encode(473886050) == 1100001111101110110101100011\nassert solution.encode(413686810) == 1000101010000101110000011011\nassert solution.encode(941775047) == 11000001000100101100011001000\nassert solution.encode(992742967) == 11011001011000000111000111000\nassert solution.encode(505738956) == 1110001001001111011011001101",
  "inefficient_solution": "class Solution:\n    def encode(self, num: int) -> str:\n        # Allocate an empty list to store the binary digits\n        binary_digits = []\n        \n        # Loop until the number becomes 0\n        while num > 0:\n            # Append a 1 to the list\n            binary_digits.append('1')\n            # Append 0s to the list until the length of the list is a power of 2\n            while len(binary_digits) < (2 ** (len(binary_digits) + 1)):\n                binary_digits.append('0')\n            # Append the least significant bit to the list\n            binary_digits.append(str(num % 2))\n            # Update the number\n            num = num // 2\n        \n        # Remove the extra 0s at the end\n        while len(binary_digits) > 0 and binary_digits[-1] == '0':\n            binary_digits.pop()\n        \n        # If the list is empty, return an empty string\n        if not binary_digits:\n            return ''\n        # Otherwise, return the list as a string\n        else:\n            return ''.join(reversed(binary_digits))",
  "is_python": true
}