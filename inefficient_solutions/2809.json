{
  "problem_idx": 2809,
  "task_name": "Minimum Time to Make Array Sum At Most x",
  "markdown_description": "\nYou are given two **0-indexed** integer arrays `nums1` and `nums2` of equal length. Every second, for all indices `0 <= i < nums1.length`, value of `nums1[i]` is incremented by `nums2[i]`. **After** this is done, you can do the following operation:\n\n\n* Choose an index `0 <= i < nums1.length` and make `nums1[i] = 0`.\n\n\nYou are also given an integer `x`.\n\n\nReturn *the **minimum** time in which you can make the sum of all elements of* `nums1` *to be **less than or equal** to* `x`, *or* `-1` *if this is not possible.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3], nums2 = [1,2,3], x = 4\n**Output:** 3\n**Explanation:** \nFor the 1st second, we apply the operation on i = 0. Therefore nums1 = [0,2+2,3+3] = [0,4,6]. \nFor the 2nd second, we apply the operation on i = 1. Therefore nums1 = [0+1,0,6+3] = [1,0,9]. \nFor the 3rd second, we apply the operation on i = 2. Therefore nums1 = [1+1,0+2,0] = [2,2,0]. \nNow sum of nums1 = 4. It can be shown that these operations are optimal, so we return 3.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,3], nums2 = [3,3,3], x = 4\n**Output:** -1\n**Explanation:** It can be shown that the sum of nums1 will always be greater than x, no matter which operations are performed.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length <= 103`\n* `1 <= nums1[i] <= 103`\n* `0 <= nums2[i] <= 103`\n* `nums1.length == nums2.length`\n* `0 <= x <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:\n        n = len(nums1)\n        f = [0] * (n + 1)\n        for a, b in sorted(zip(nums1, nums2), key=lambda z: z[1]):\n            for j in range(n, 0, -1):\n                f[j] = max(f[j], f[j - 1] + a + b * j)\n        s1 = sum(nums1)\n        s2 = sum(nums2)\n        for j in range(n + 1):\n            if s1 + s2 * j - f[j] <= x:\n                return j\n        return -1\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minimumTime(self, nums1: List[int], nums2: List[int], x: int) -> int:\n        n = len(nums1)\n        f = [0] * (n + 1)\n        for a, b in sorted(zip(nums1, nums2), key=lambda z: z[1]):\n            for j in range(n, 0, -1):\n                f[j] = max(f[j], f[j - 1] + a + b * j)\n        s1 = sum(nums1)\n        s2 = sum(nums2)\n        for j in range(n + 1):\n            if s1 + s2 * j - f[j] <= x:\n                return j\n        return -1\n\ndef generate_test_case():\n    solution = Solution()\n\n    nums1_length = random.randint(1, 10)\n    nums1 = random.sample(range(1, 1001), nums1_length)\n\n    nums2 = []\n    for _ in range(nums1_length):\n        nums2.append(random.randint(0, 1000))\n\n    x = random.randint(0, 1000000)\n\n    expected_result = solution.minimumTime(nums1, nums2, x)\n\n    return nums1, nums2, x, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, x, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumTime(nums1, nums2, x) == expected_result\n        print(f\"assert solution.minimumTime({nums1}, {nums2}, {x}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumTime({nums1}, {nums2}, {x}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumTime([864, 292, 194, 349, 865, 783, 947, 891, 880], [836, 387, 475, 831, 278, 452, 740, 71, 703], 439016) == 0\nassert solution.minimumTime([208, 949, 924, 760, 179, 707, 30, 271], [298, 438, 701, 75, 952, 543, 957, 85], 632032) == 0\nassert solution.minimumTime([974, 54], [318, 612], 744738) == 0\nassert solution.minimumTime([726, 231, 434, 110, 271, 154], [135, 924, 267, 743, 275, 496], 206849) == 0\nassert solution.minimumTime([669, 778, 615, 513, 997, 198, 641, 334], [429, 294, 575, 406, 766, 455, 772, 556], 132154) == 0\nassert solution.minimumTime([964, 90], [881, 860], 286048) == 0\nassert solution.minimumTime([348, 445, 988], [300, 54, 798], 603131) == 0\nassert solution.minimumTime([73], [887], 411188) == 0\nassert solution.minimumTime([854, 389], [340, 758], 211658) == 0\nassert solution.minimumTime([124, 435, 660, 139, 565, 671, 747, 960, 272], [995, 82, 197, 868, 902, 290, 968, 655, 548], 474269) == 0\nassert solution.minimumTime([817, 107, 236, 355, 495, 461, 221, 910], [988, 388, 825, 115, 821, 921, 766, 154], 7856) == 0\nassert solution.minimumTime([942, 608, 675, 2, 469, 169, 670, 39], [88, 136, 348, 692, 746, 542, 432, 36], 112095) == 0\nassert solution.minimumTime([396, 264, 644, 629, 672, 465], [299, 478, 462, 804, 655, 2], 55023) == 0\nassert solution.minimumTime([703, 549, 520, 41, 681], [494, 696, 451, 747, 659], 346146) == 0\nassert solution.minimumTime([81, 855, 585, 749, 965, 568], [76, 537, 995, 178, 714, 843], 314140) == 0\nassert solution.minimumTime([400, 217, 848, 678, 581, 248, 271, 610, 829], [939, 948, 306, 675, 219, 111, 443, 169, 280], 604135) == 0\nassert solution.minimumTime([957, 582, 822], [305, 799, 190], 746478) == 0\nassert solution.minimumTime([784, 603, 408, 539, 208, 192, 243], [976, 274, 284, 993, 817, 320, 470], 389414) == 0\nassert solution.minimumTime([31, 316, 119, 791], [356, 126, 281, 149], 234410) == 0\nassert solution.minimumTime([416, 11, 863, 731, 861, 493, 672, 647, 64, 762], [750, 237, 349, 618, 773, 418, 702, 770, 804, 901], 8108) == 0\nassert solution.minimumTime([973, 556, 144, 610, 992, 878, 979], [773, 872, 884, 41, 493, 467, 853], 737298) == 0\nassert solution.minimumTime([642, 965], [378, 397], 418910) == 0\nassert solution.minimumTime([937], [272], 761354) == 0\nassert solution.minimumTime([572, 916, 889, 215, 903, 933, 867, 76, 902], [928, 955, 860, 616, 363, 627, 574, 70, 23], 437353) == 0\nassert solution.minimumTime([738, 283, 875], [64, 694, 692], 270849) == 0\nassert solution.minimumTime([976, 13, 964, 157], [990, 588, 995, 140], 227032) == 0\nassert solution.minimumTime([176, 249, 284, 572, 213, 217], [9, 693, 732, 595, 966, 16], 55525) == 0\nassert solution.minimumTime([203, 629, 931, 230, 491, 501], [603, 93, 656, 661, 553, 656], 582175) == 0\nassert solution.minimumTime([892], [847], 14419) == 0\nassert solution.minimumTime([816, 64, 960, 688, 579, 736, 499, 185, 846, 701], [834, 456, 315, 531, 297, 389, 596, 506, 145, 596], 84769) == 0\nassert solution.minimumTime([303, 892, 783, 120, 201, 304], [6, 729, 876, 796, 580, 265], 762453) == 0\nassert solution.minimumTime([433], [620], 415451) == 0\nassert solution.minimumTime([304, 849, 295, 634, 518, 337, 260, 192], [21, 165, 277, 209, 531, 539, 923, 508], 373453) == 0\nassert solution.minimumTime([476, 487, 65, 425, 340, 908, 391, 75, 925, 981], [219, 247, 385, 229, 219, 732, 265, 128, 377, 229], 44022) == 0\nassert solution.minimumTime([422, 369, 842, 439, 585], [29, 482, 292, 653, 925], 502435) == 0\nassert solution.minimumTime([723, 553, 349, 254, 722, 438, 649], [300, 519, 271, 759, 605, 328, 770], 702961) == 0\nassert solution.minimumTime([604, 672, 759, 213, 601, 85, 927], [359, 41, 0, 600, 955, 111, 852], 176659) == 0\nassert solution.minimumTime([727, 370], [403, 952], 378806) == 0\nassert solution.minimumTime([322, 364, 400, 22, 246, 518, 970], [327, 48, 25, 982, 30, 614, 584], 251737) == 0\nassert solution.minimumTime([883, 790, 681, 520, 569, 422], [674, 613, 891, 405, 360, 393], 839859) == 0\nassert solution.minimumTime([647, 824, 17], [276, 918, 641], 185519) == 0\nassert solution.minimumTime([194, 338, 968, 725, 637, 448, 407, 844], [158, 763, 167, 175, 314, 345, 221, 555], 197438) == 0\nassert solution.minimumTime([375, 405, 116, 360, 550, 694, 564], [366, 525, 385, 721, 136, 236, 543], 741548) == 0\nassert solution.minimumTime([440, 498, 178, 817, 949, 141, 71, 453], [10, 924, 293, 4, 992, 746, 273, 515], 310272) == 0\nassert solution.minimumTime([996, 196, 166, 542], [454, 428, 4, 665], 153943) == 0\nassert solution.minimumTime([120, 228], [864, 530], 706942) == 0\nassert solution.minimumTime([459, 869, 605, 61, 624, 933, 475], [345, 203, 982, 281, 907, 437, 128], 743348) == 0\nassert solution.minimumTime([825, 245, 132, 522, 863], [488, 248, 477, 333, 236], 544652) == 0\nassert solution.minimumTime([929, 670], [177, 644], 349475) == 0\nassert solution.minimumTime([100, 510, 182], [309, 768, 121], 106643) == 0\nassert solution.minimumTime([735, 682, 964, 374, 220], [97, 497, 965, 930, 331], 985900) == 0\nassert solution.minimumTime([302, 187, 456, 38, 809, 664, 965], [518, 643, 246, 62, 468, 679, 303], 428728) == 0\nassert solution.minimumTime([757, 513, 929, 328, 618, 8, 677, 542, 40, 890], [522, 734, 809, 133, 691, 293, 433, 327, 918, 154], 550526) == 0\nassert solution.minimumTime([631, 431], [788, 204], 154716) == 0\nassert solution.minimumTime([953, 660, 649, 525, 902, 728, 744, 942, 694, 380], [977, 992, 510, 246, 837, 261, 931, 886, 943, 255], 264344) == 0\nassert solution.minimumTime([791, 227], [368, 602], 684533) == 0\nassert solution.minimumTime([273, 894, 597, 834, 832, 401, 847, 193], [554, 261, 462, 205, 857, 240, 42, 428], 389067) == 0\nassert solution.minimumTime([330], [537], 298942) == 0\nassert solution.minimumTime([567, 237, 191, 695, 617, 288, 406, 338], [165, 340, 758, 665, 34, 376, 379, 592], 319364) == 0\nassert solution.minimumTime([268, 535, 840], [348, 302, 552], 49777) == 0\nassert solution.minimumTime([981], [866], 232833) == 0\nassert solution.minimumTime([940, 256, 980, 879, 797, 463, 690, 333, 171], [785, 546, 156, 813, 247, 759, 736, 875, 447], 631996) == 0\nassert solution.minimumTime([826, 822, 592], [647, 311, 746], 238023) == 0\nassert solution.minimumTime([295, 293, 470, 484], [359, 168, 184, 977], 641987) == 0\nassert solution.minimumTime([52, 168, 424, 310, 241, 520, 811, 743, 276, 268], [775, 402, 661, 206, 631, 510, 289, 874, 146, 348], 463489) == 0\nassert solution.minimumTime([461, 405, 744, 305], [338, 727, 183, 100], 315674) == 0\nassert solution.minimumTime([725, 154, 985, 46, 663, 20], [526, 322, 302, 706, 651, 742], 53326) == 0\nassert solution.minimumTime([460], [304], 759677) == 0\nassert solution.minimumTime([793, 786, 681, 56, 646, 571, 913, 395, 396, 780], [318, 907, 721, 752, 881, 147, 826, 182, 61, 930], 117848) == 0\nassert solution.minimumTime([849, 773, 995, 782, 786], [430, 92, 181, 116, 225], 138807) == 0\nassert solution.minimumTime([260, 466, 564, 338, 936, 508], [347, 889, 483, 722, 893, 867], 505684) == 0\nassert solution.minimumTime([784, 220, 139, 780], [996, 388, 91, 564], 404126) == 0\nassert solution.minimumTime([283, 96], [853, 462], 247117) == 0\nassert solution.minimumTime([723, 171, 112, 645], [846, 800, 225, 988], 475313) == 0\nassert solution.minimumTime([33, 716, 925, 286, 231, 647, 51, 324, 385, 591], [845, 996, 152, 65, 349, 62, 182, 977, 593, 792], 583730) == 0\nassert solution.minimumTime([348, 673, 63, 401, 725, 339], [24, 627, 709, 581, 288, 311], 291260) == 0\nassert solution.minimumTime([750, 953, 791], [824, 682, 313], 649799) == 0\nassert solution.minimumTime([197, 562, 68, 417, 669, 728, 695, 111], [97, 743, 969, 536, 355, 118, 349, 90], 446943) == 0\nassert solution.minimumTime([863, 242, 640, 555, 724], [530, 352, 405, 517, 114], 486334) == 0\nassert solution.minimumTime([965, 476, 730, 661, 134], [784, 218, 859, 127, 290], 879783) == 0\nassert solution.minimumTime([232, 290], [886, 145], 492921) == 0\nassert solution.minimumTime([337], [948], 61280) == 0\nassert solution.minimumTime([990, 863, 719, 129], [712, 288, 188, 967], 198150) == 0\nassert solution.minimumTime([246], [666], 995148) == 0\nassert solution.minimumTime([24, 384, 217, 619, 389, 225, 618, 398], [269, 257, 20, 502, 888, 172, 555, 696], 787133) == 0\nassert solution.minimumTime([8, 151, 688, 759, 199, 361, 503], [641, 872, 785, 613, 252, 280, 917], 490122) == 0\nassert solution.minimumTime([712, 725], [657, 867], 134528) == 0\nassert solution.minimumTime([365, 655, 253, 376, 813], [386, 268, 652, 106, 33], 149656) == 0\nassert solution.minimumTime([22, 54, 753, 147, 871], [65, 566, 11, 681, 426], 133839) == 0\nassert solution.minimumTime([789, 777, 962, 404, 84, 467, 859], [667, 499, 530, 41, 123, 1000, 389], 523295) == 0\nassert solution.minimumTime([897, 581, 499, 949], [593, 465, 266, 393], 914710) == 0\nassert solution.minimumTime([851], [548], 200870) == 0\nassert solution.minimumTime([361, 881, 587, 467, 280, 34, 213, 93], [39, 933, 917, 576, 299, 547, 810, 688], 176715) == 0\nassert solution.minimumTime([5, 58, 548, 535, 623], [392, 498, 83, 544, 693], 953125) == 0\nassert solution.minimumTime([324, 116, 78, 926], [370, 950, 175, 324], 205897) == 0\nassert solution.minimumTime([703, 342, 606, 961, 949, 738, 834, 413, 793], [660, 541, 554, 981, 893, 243, 909, 660, 165], 805603) == 0\nassert solution.minimumTime([52, 793, 568, 508, 441, 516, 59, 315, 320, 260], [152, 805, 441, 673, 625, 954, 97, 381, 135, 757], 129987) == 0\nassert solution.minimumTime([941, 293, 954, 871, 338, 301, 842], [175, 816, 141, 161, 883, 192, 87], 380261) == 0\nassert solution.minimumTime([652, 112, 769, 542, 29, 594, 199, 721, 470], [528, 390, 538, 66, 499, 355, 102, 277, 181], 767113) == 0\nassert solution.minimumTime([608, 746, 709, 809, 956], [623, 170, 435, 568, 797], 460565) == 0",
  "inefficient_solution": "class Solution:\n    def minimumTime(self, nums1, nums2, x):\n        n = len(nums1)\n        nums1_copy = [i for i in nums1]\n        nums2_copy = [i for i in nums2]\n\n        def check(t):\n            temp_nums1 = [nums1_copy[i] + nums2_copy[i] * t for i in range(n)]\n            for j in range(t):\n                temp_nums1.sort(reverse=True)\n                for i in range(n):\n                    if temp_nums1[i] > 0:\n                        temp_nums1[i] = 0\n            return sum(temp_nums1) <= x\n\n        l, r = 0, 10**9\n        while l < r:\n            mid = (l + r) // 2\n            if check(mid):\n                r = mid\n            else:\n                l = mid + 1\n        return l if l <= 10**9 else -1",
  "is_python": true
}