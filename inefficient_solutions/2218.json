{
  "problem_idx": 2218,
  "task_name": "Maximum Value of K Coins From Piles",
  "markdown_description": "\nThere are `n` **piles** of coins on a table. Each pile consists of a **positive number** of coins of assorted denominations.\n\n\nIn one move, you can choose any coin on **top** of any pile, remove it, and add it to your wallet.\n\n\nGiven a list `piles`, where `piles[i]` is a list of integers denoting the composition of the `ith` pile from **top to bottom**, and a positive integer `k`, return *the **maximum total value** of coins you can have in your wallet if you choose **exactly*** `k` *coins optimally*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2218.Maximum%20Value%20of%20K%20Coins%20From%20Piles/images/e1.png)\n\n```\n\n**Input:** piles = [[1,100,3],[7,8,9]], k = 2\n**Output:** 101\n**Explanation:**\nThe above diagram shows the different ways we can choose k coins.\nThe maximum total we can obtain is 101.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7\n**Output:** 706\n**Explanation:**The maximum total can be obtained if we choose all coins from the last pile.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == piles.length`\n* `1 <= n <= 1000`\n* `1 <= piles[i][j] <= 105`\n* `1 <= k <= sum(piles[i].length) <= 2000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxValueOfCoins(self, piles: List[List[int]], k: int) -> int:\n        presum = [list(accumulate(p, initial=0)) for p in piles]\n        dp = [0] * (k + 1)\n        for s in presum:\n            for j in range(k, -1, -1):\n                for idx, v in enumerate(s):\n                    if j >= idx:\n                        dp[j] = max(dp[j], dp[j - idx] + v)\n        return dp[-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxValueOfCoins(self, piles, k):\n        presum = [list(accumulate(p, initial=0)) for p in piles]\n        dp = [0] * (k + 1)\n        for s in presum:\n            for j in range(k, -1, -1):\n                for idx, v in enumerate(s):\n                    if j >= idx:\n                        dp[j] = max(dp[j], dp[j - idx] + v)\n        return dp[-1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random piles\n    piles = []\n    for i in range(random.randint(1, 10)):\n        pile = random.sample(range(1, 101), random.randint(1, 10))\n        piles.append(pile)\n\n    # Generate a random k value\n    k = random.randint(1, sum(len(p) for p in piles))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxValueOfCoins(piles, k)\n\n    return piles, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        piles, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxValueOfCoins(piles, k) == expected_result\n        print(f\"assert solution.maxValueOfCoins({piles}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxValueOfCoins({piles}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxValueOfCoins([[25, 76, 73, 48, 11, 62, 89, 21], [45], [72, 88, 92, 31, 63], [70, 96, 52, 58, 87, 66]], 12) == 855\nassert solution.maxValueOfCoins([[75, 74, 12, 14, 55, 45, 29], [27, 56, 53, 85, 30, 62], [10, 20, 16, 69, 9, 60, 86, 66], [9, 64, 8], [50, 9, 17, 94], [85, 55, 50, 36, 51, 45, 16, 14, 1], [8, 1, 30, 89], [23], [47, 25, 39, 9, 100]], 28) == 1390\nassert solution.maxValueOfCoins([[9, 1, 21, 47, 94, 5, 87, 50], [81, 29, 63], [61, 7], [17, 84, 43, 10, 24, 3, 16, 59, 79, 57], [1, 73, 30, 31, 70, 42, 6, 43]], 10) == 491\nassert solution.maxValueOfCoins([[87, 47, 84], [12, 27, 38, 16, 50], [80, 14, 87, 32, 50, 16, 27, 19, 20, 22], [15, 66, 6], [30, 91, 26, 35, 58], [92], [70, 34, 85, 31, 65, 90, 22, 48], [59, 21, 1, 82, 76, 25, 70, 83], [31, 26, 59, 12], [36, 61]], 1) == 92\nassert solution.maxValueOfCoins([[44, 5, 22, 75, 71], [83, 23, 73, 24, 57], [96, 69, 23, 88, 27, 12, 39, 51], [61, 71, 67, 84, 50, 93, 30, 86, 2, 18], [32, 1, 13], [8, 41, 87, 69, 13, 31, 1, 32, 83], [53, 4, 81, 72, 71, 28, 92, 63, 38]], 3) == 248\nassert solution.maxValueOfCoins([[45, 73, 52, 18, 75, 70, 82, 48], [23, 77, 53], [94, 12, 2, 34]], 15) == 758\nassert solution.maxValueOfCoins([[36], [94, 71, 76, 29, 66, 16, 87, 98, 14, 24], [52, 55, 56, 47, 7, 13, 70, 34, 48, 43], [38, 66, 22, 68, 24, 6], [87, 85], [31, 100, 19, 40, 16]], 31) == 1594\nassert solution.maxValueOfCoins([[89, 4, 93, 22, 100, 67, 63, 52, 15], [16, 38, 96]], 12) == 655\nassert solution.maxValueOfCoins([[15, 28, 79, 41, 83], [83], [49, 11, 70], [2], [22, 30, 70], [33, 48, 46], [71, 84, 11, 47, 7, 68, 93, 8, 66, 42], [33]], 21) == 1043\nassert solution.maxValueOfCoins([[13, 74, 14, 25, 67, 19, 60, 33], [13, 53, 12, 47, 24, 37]], 5) == 193\nassert solution.maxValueOfCoins([[68, 88, 87, 94, 23, 63, 25, 13], [84, 65, 74, 93, 14, 98], [27, 14, 49, 65, 8, 22], [17, 65, 33, 90, 36, 82, 28], [20, 46, 78, 54], [54, 48, 18, 13], [64, 53, 34, 58, 71, 23, 55, 78, 73, 46]], 26) == 1651\nassert solution.maxValueOfCoins([[67, 80, 51, 42, 88, 40, 22, 5], [84, 78], [28, 48, 66], [89, 94, 45], [34, 83, 35, 45, 71, 80], [95, 72, 43, 35, 21, 22, 47, 27, 9, 6], [60, 15, 33, 24, 97, 79], [90, 98, 40, 96], [48, 38, 54, 72, 98, 52, 90, 53, 19, 94]], 14) == 1100\nassert solution.maxValueOfCoins([[55, 87, 23, 24, 91, 17, 16], [92, 94, 49], [20, 14, 83, 5, 57], [100, 87, 6, 81, 77, 42, 18, 79, 30], [96, 61, 47], [65, 8, 6, 75, 53, 13, 59, 78, 92], [73, 96, 21, 36]], 7) == 638\nassert solution.maxValueOfCoins([[71, 35, 10, 40, 55, 62, 92, 12, 14, 56], [67], [60, 28, 4, 18, 35, 29], [39, 4, 61, 92, 27, 45, 37, 57], [69, 86, 42, 31], [90], [7, 57, 77, 22]], 6) == 443\nassert solution.maxValueOfCoins([[25, 90, 93, 13, 22], [93, 7, 23, 71, 1, 52, 78, 80]], 5) == 314\nassert solution.maxValueOfCoins([[7, 86, 28, 32], [7, 30, 88, 2, 55, 78, 90], [58], [75]], 6) == 293\nassert solution.maxValueOfCoins([[66, 70, 65, 69, 15, 10, 99, 34, 38, 52], [44, 18, 15, 65], [85, 51, 57, 7, 12]], 14) == 755\nassert solution.maxValueOfCoins([[37, 14, 18, 57, 9, 78, 69], [45, 71, 1, 48], [22, 78, 98, 42, 94, 41, 51]], 17) == 825\nassert solution.maxValueOfCoins([[57, 1, 29, 4, 80, 18, 14]], 1) == 57\nassert solution.maxValueOfCoins([[41, 6, 90, 42, 32], [64, 45, 16, 54, 58, 86, 10, 37, 22, 23], [18], [7]], 8) == 382\nassert solution.maxValueOfCoins([[78, 88, 84, 66, 19, 61], [46, 99, 70, 90], [96, 98, 34, 50, 18, 97, 100, 57, 76], [20, 77, 53, 31, 80, 15, 95, 75, 57], [69, 3, 67, 98, 64, 84, 55], [72, 24, 77, 76, 98, 99, 20, 33], [65, 64, 100, 10, 57, 26, 28, 12, 8], [3, 88, 60, 79, 63, 67, 90], [44]], 43) == 2962\nassert solution.maxValueOfCoins([[86, 16, 14, 39, 97, 27, 98], [58], [89, 92, 83, 36, 70, 62, 6]], 15) == 873\nassert solution.maxValueOfCoins([[98, 14, 64, 66, 81, 85, 54], [26, 1, 52], [19, 8, 71, 73], [13], [89, 98, 80, 10, 97, 20, 4, 49, 85, 69], [44, 93, 53, 55, 25, 26, 43], [73, 7, 59, 55, 75, 21], [31, 64], [15, 72, 23, 39, 21, 96]], 11) == 812\nassert solution.maxValueOfCoins([[33, 78, 29, 42, 88, 39, 20, 74], [76, 37, 24, 39, 31, 2, 70], [71, 49, 24, 94, 84, 57, 96, 90, 97], [66], [94], [94, 71, 18, 81, 41]], 1) == 94\nassert solution.maxValueOfCoins([[79, 44, 5]], 3) == 128\nassert solution.maxValueOfCoins([[15, 76, 39, 72, 5, 49], [92, 99, 22, 80, 37, 70, 50, 8, 79], [70, 11, 19, 93, 51], [84, 91, 19, 59, 43, 14, 31, 33, 67], [75, 37, 67, 33, 40, 35, 85], [75], [55, 79, 76, 80, 70, 50, 18, 59, 12, 9], [65, 58, 59, 86, 7, 62, 96, 29, 12, 67], [62, 78, 33, 100, 6, 14, 10, 57]], 59) == 3226\nassert solution.maxValueOfCoins([[73, 95, 42, 65, 80, 96, 91, 55, 90, 74], [7, 56, 91, 43], [63, 54, 39, 100, 81, 76, 59, 99, 79, 74]], 18) == 1337\nassert solution.maxValueOfCoins([[100, 15, 73, 55, 38], [71, 98, 72, 75, 67, 50, 5, 12, 82], [98, 95, 96, 73, 64, 21, 33, 90, 89, 22], [39, 90], [89, 75, 7, 56, 72, 96, 57, 25, 8, 64], [19, 51, 32, 92, 99, 50], [77, 21, 81], [77, 17, 38, 79, 95, 19, 60], [73, 21, 85, 5, 22, 69, 8, 11]], 1) == 100\nassert solution.maxValueOfCoins([[67, 45], [61, 76, 81, 32, 38, 5, 50, 88, 83], [7, 24, 22, 51, 59, 4, 37, 39, 78, 81], [62, 88], [30, 46, 5], [29, 91, 53], [15, 11, 19, 37, 18, 83], [23, 9, 36, 88, 47, 7, 53, 19, 45, 17], [41, 26], [78, 48, 82, 9]], 5) == 368\nassert solution.maxValueOfCoins([[67, 100], [50, 21, 17, 33, 68, 91, 63, 22], [17, 73, 62, 2, 31, 97, 55], [4, 6, 40, 50, 42, 94, 61, 56, 64, 18]], 8) == 449\nassert solution.maxValueOfCoins([[57], [31, 55, 33, 15, 77], [83, 97, 93, 57, 87, 91, 55], [87, 98, 9, 45, 89, 63, 18, 30, 4], [58], [24, 63, 64, 92, 73, 51, 11, 99, 93], [88, 13, 25], [29, 60, 87, 75, 12, 67, 96, 86], [37, 4, 32, 52, 27, 30]], 46) == 2680\nassert solution.maxValueOfCoins([[50, 100, 1, 37, 87, 10, 53, 83], [46, 90, 78, 71, 21, 70], [50, 78, 38, 4, 58], [78, 81, 93, 69], [39, 1, 42, 91, 80, 89, 44]], 10) == 756\nassert solution.maxValueOfCoins([[43, 29, 60, 13], [63, 60, 11, 55, 54, 4, 50], [37, 55, 12, 16, 60, 43, 82], [87, 7, 25, 50, 63, 70], [87, 50, 99, 51, 36, 56, 90], [92, 84], [64, 36, 10, 45, 55, 56, 26], [21, 30, 11, 53, 51, 76, 60, 18]], 48) == 2306\nassert solution.maxValueOfCoins([[48, 30, 13, 70, 71, 4, 52, 54], [74, 15, 4, 40, 82, 50], [90, 51, 61, 93, 97], [30, 38, 46, 93], [22, 3, 2, 34, 78, 4], [17, 72, 96, 78, 60, 66, 4, 24, 27], [52, 6, 45], [29], [78, 25, 33, 48, 100, 37, 36]], 8) == 596\nassert solution.maxValueOfCoins([[83, 6, 22], [6, 35, 100, 66, 75], [42, 15, 55, 29, 80, 22, 64]], 10) == 511\nassert solution.maxValueOfCoins([[93, 27, 46, 62, 15, 91, 75, 53, 87, 67], [68, 40, 97, 72, 39, 19, 89, 58, 92], [59, 72, 82, 58, 40, 25, 17], [2, 33], [20, 76, 86, 2, 26, 11, 51, 46, 64, 75], [60, 28, 84, 98, 77, 68, 50, 32, 42, 78], [54, 37, 46, 10, 79, 88, 69, 5], [14, 10, 48, 29], [32, 91, 100, 4], [50, 64, 70, 23]], 8) == 597\nassert solution.maxValueOfCoins([[5, 22, 66, 10, 21, 85, 42, 47, 25], [12], [5, 61, 98, 89, 20], [97, 43, 70], [22, 92, 54, 86, 13, 45, 4, 93], [6, 68, 77, 81, 8]], 20) == 1124\nassert solution.maxValueOfCoins([[99, 38, 53, 9, 72, 66, 31, 34, 79, 46], [64, 85, 67, 22, 15, 86, 73, 92], [95, 93, 5, 66, 51, 46, 85], [77], [73, 8, 74, 66, 87, 64, 49], [93, 4, 91, 11, 2, 49, 44, 79], [47, 11, 12, 6, 66, 34, 10]], 34) == 2064\nassert solution.maxValueOfCoins([[97, 15], [16, 89, 60, 44, 84, 4, 35, 21], [99, 58, 77, 17, 74, 94], [99, 26, 44, 14, 49, 35, 13, 16], [61, 94, 52, 53, 36, 8, 91], [64, 89, 93], [79], [40, 46, 78, 41, 1, 20, 54, 72, 91, 49], [83, 43, 53, 29, 99, 92, 24, 80, 65], [65, 25, 76, 11, 16, 45, 29, 46, 28]], 48) == 2924\nassert solution.maxValueOfCoins([[93, 43, 53, 16, 91, 89, 77], [96, 36, 37, 93], [89, 46, 1, 15, 32, 37, 68], [96, 97, 2, 44, 26, 11], [5, 70, 57], [23, 42, 48, 93, 7, 16, 96, 53, 49, 19], [1, 71, 38, 21, 99, 66, 3]], 6) == 517\nassert solution.maxValueOfCoins([[29, 78, 9, 100, 68, 1, 54, 53], [80, 58, 67, 88, 6, 2, 77, 17], [89, 4, 96, 6, 37], [21, 18, 17, 36, 16, 99, 73, 49, 40, 3], [69, 93, 18, 42, 74, 91, 68, 94, 16, 35], [70, 76, 100, 20, 55, 6, 31]], 1) == 89\nassert solution.maxValueOfCoins([[71, 80, 47], [68, 55, 57, 85, 25, 100, 53], [91, 13, 97, 49, 58, 69, 79, 95, 57], [1, 41, 99], [40, 37, 98]], 7) == 507\nassert solution.maxValueOfCoins([[50, 40, 23, 89, 72, 43, 93, 32], [31, 37, 33, 78, 32, 60], [47, 14, 63, 31], [91, 65, 23, 76, 14, 4, 16, 18], [4, 31, 58, 57, 25, 19, 26], [26, 15, 23, 44, 68, 75, 2, 37, 7, 51], [58, 41, 56, 59, 92, 27, 15, 37], [71, 98], [5, 10, 96, 39, 27, 18, 6]], 46) == 2228\nassert solution.maxValueOfCoins([[42, 58, 21, 18, 64, 13, 73, 36], [56, 6, 42], [3, 22, 10, 44], [71, 60, 15, 83, 48, 10, 6, 57], [8, 99, 39, 32, 95], [92, 57, 89, 7], [87, 47, 2, 46, 20]], 4) == 325\nassert solution.maxValueOfCoins([[95, 54, 13, 71, 52, 43, 67], [30, 87, 27, 16], [97, 3, 81, 46, 92], [30, 34, 43, 81, 83, 97, 29], [43, 20, 71, 25, 92]], 12) == 782\nassert solution.maxValueOfCoins([[46, 98, 43], [51, 72, 49], [35, 75, 89, 26, 48, 24, 16], [65, 60, 37, 48], [77, 53, 25, 20], [71], [80, 82, 25, 34, 67, 42], [64, 2, 5, 12], [61, 4, 75, 34, 9]], 13) == 905\nassert solution.maxValueOfCoins([[100, 23, 48, 12, 22, 57, 35, 99, 78], [77, 94, 49, 2], [70, 84, 28, 11, 71, 46, 86, 52, 75], [78, 4, 67, 71, 23, 49], [14, 15, 74, 8, 85, 86, 81], [67, 36, 71, 59, 18, 86], [1, 78, 82, 32, 3], [49, 53, 85, 21, 29, 96]], 7) == 570\nassert solution.maxValueOfCoins([[1, 25, 100, 59, 95, 40, 9, 56, 67], [15, 22, 12], [62, 20, 28, 10], [59, 92, 95, 46, 57, 38, 55], [39, 11, 66, 24, 45, 34, 10, 98, 27], [30, 11, 4, 85, 58, 70, 25], [72, 93, 79, 88, 64, 42, 58], [2, 78, 34, 64, 33, 82, 19, 46]], 33) == 1871\nassert solution.maxValueOfCoins([[77, 72], [61, 51, 52, 72, 11, 50, 96], [78, 62, 67, 27, 88], [38, 36, 72, 14, 32, 2], [49, 68, 81, 38, 13], [48, 26, 9], [34, 6, 35], [97, 53, 24, 50, 25, 40, 9, 72, 1], [54, 8, 31, 38], [45]], 34) == 1823\nassert solution.maxValueOfCoins([[63, 33, 94, 66, 50, 60, 37, 18, 48, 71], [68, 71], [73, 15, 10, 96], [46, 19, 6, 90, 22], [77, 36, 33, 9], [45, 54, 97, 69, 55], [15, 69, 24, 59, 91, 76]], 19) == 1199\nassert solution.maxValueOfCoins([[96, 28, 51, 83, 90, 70, 21], [11, 66, 9], [29, 31, 99, 96, 42, 34, 83, 52, 15, 87], [21, 74, 83, 78, 57], [86], [1, 79, 12, 43, 17]], 22) == 1385\nassert solution.maxValueOfCoins([[49, 45, 41, 60, 66, 19], [3, 33], [46, 54, 18, 94, 25, 22], [80, 35], [77, 78], [94, 4, 44], [56, 21, 91, 68, 57, 95, 9, 89, 65, 50], [76, 78, 3, 29]], 34) == 1755\nassert solution.maxValueOfCoins([[93, 25], [48, 43, 33, 99, 29], [93, 38, 28, 90, 94], [72, 71, 70, 82, 43, 69, 80, 50, 93], [22, 72, 73, 16, 77, 4], [94, 40, 43, 6, 26], [64, 20, 28, 27, 71], [34, 53], [20, 14, 59, 12, 61, 83, 26, 94], [38, 88, 43]], 31) == 1963\nassert solution.maxValueOfCoins([[41, 51, 77, 13, 36, 42, 57, 94], [8], [85, 13, 80], [9, 45]], 2) == 126\nassert solution.maxValueOfCoins([[59, 41, 32, 57, 9, 62, 43, 21, 18, 1], [89, 12, 65], [48, 17, 4, 29, 44, 50, 59, 25, 73], [3, 2, 92], [28, 62], [50, 46, 38, 10, 96, 83], [27, 51, 56, 83, 48, 52]], 3) == 198\nassert solution.maxValueOfCoins([[66], [71, 24, 98]], 4) == 259\nassert solution.maxValueOfCoins([[85, 93, 69, 26], [66, 86, 97, 39, 98, 76], [2, 67, 50, 6, 34, 23, 28], [5, 7, 33, 48, 37], [10], [59, 53, 51, 81, 26, 18, 95, 22, 92], [99, 49, 64, 1, 38, 20, 45, 78], [95], [62, 60, 77, 27, 13, 52], [65, 10, 79]], 46) == 2429\nassert solution.maxValueOfCoins([[20, 7, 16, 52, 59, 67], [30, 6, 26, 47], [26]], 3) == 76\nassert solution.maxValueOfCoins([[17, 43, 61, 42, 63, 58, 90, 49, 53], [47, 59, 75, 38, 61, 6, 21, 91, 28, 77], [95, 47, 30, 62], [18, 91, 6], [55, 73], [14, 83], [15, 60, 85, 2, 3, 35], [16], [74, 93, 2, 41]], 26) == 1512\nassert solution.maxValueOfCoins([[1, 11, 76, 45, 63, 58], [4, 35, 65, 14, 23, 42, 12, 68, 84], [96, 83, 80, 38, 85, 11, 15, 17, 81], [37, 26, 66, 13, 40, 34, 85, 21, 42], [95, 19, 94, 22, 16, 45, 52, 1, 97]], 17) == 973\nassert solution.maxValueOfCoins([[66, 25, 34, 35, 74, 11, 64, 44, 42, 98], [70, 75], [67, 47, 2, 39, 24, 9, 98, 71], [14], [76, 35, 25, 10]], 25) == 1155\nassert solution.maxValueOfCoins([[6, 29, 64, 84, 60], [96, 100, 45, 77, 32, 59, 64, 83, 65]], 6) == 409\nassert solution.maxValueOfCoins([[82, 30, 18], [7, 67, 59, 12], [65, 94, 86, 74, 73, 13], [78, 67], [39, 10, 86, 15, 26, 54, 74, 66, 3, 38], [3, 65, 2, 92, 78, 52], [79, 32]], 24) == 1392\nassert solution.maxValueOfCoins([[91, 29, 40, 99, 9, 92, 12, 20], [78, 56, 3, 98], [89, 16, 100, 2, 74], [49, 89, 11, 87, 24, 43, 23, 15, 35], [9, 95, 94, 38, 54, 78, 100, 68, 71, 84], [12, 100, 21, 31, 89, 43, 52, 32], [99], [39, 100, 41, 17, 46, 63], [83, 94, 77, 5, 26, 41, 42]], 35) == 2331\nassert solution.maxValueOfCoins([[41, 7, 74, 1, 39, 62, 80, 19, 3, 84]], 1) == 41\nassert solution.maxValueOfCoins([[87, 64, 33, 97, 43], [68, 38, 8, 85, 89]], 2) == 155\nassert solution.maxValueOfCoins([[49, 31, 85, 28, 51, 96, 41], [41, 84, 21, 36, 90, 39, 20], [18, 47, 19], [98, 72, 35, 48], [40, 60, 61, 72, 58, 8, 14, 20, 49], [72, 3, 46, 68, 28, 90, 84, 17, 49], [33, 63, 99, 45, 90, 64, 84, 98]], 20) == 1341\nassert solution.maxValueOfCoins([[12, 2, 99, 75, 25, 38, 26, 18, 59], [93], [3, 28, 12, 34, 31], [16, 10, 98, 32, 62, 17, 58, 73, 33, 15], [96, 16, 30, 74], [39, 50, 65, 15], [47]], 15) == 796\nassert solution.maxValueOfCoins([[6, 100, 42, 28, 68], [93, 37]], 4) == 241\nassert solution.maxValueOfCoins([[18, 74, 60, 15, 19, 24, 99, 32], [34, 2, 83, 75, 38, 43, 30, 82, 89, 18], [97, 8, 54, 46, 34, 73, 86], [92, 53], [6], [1, 53, 97, 100]], 17) == 1008\nassert solution.maxValueOfCoins([[60, 45, 64, 33, 12, 6, 9, 95, 94, 66], [86, 58, 1, 3, 60, 39, 91, 84], [19, 21, 41], [93, 47], [76, 38, 32, 61], [56, 15], [29, 97]], 2) == 179\nassert solution.maxValueOfCoins([[51, 72, 82, 18], [26, 82, 30, 90], [52, 21, 44, 2, 17, 84, 7, 61, 3, 66], [28, 39, 83], [12, 57, 11, 16, 47, 97, 93, 84, 28, 54], [61, 86, 90, 94]], 13) == 846\nassert solution.maxValueOfCoins([[15, 94, 91, 81], [84, 43]], 1) == 84\nassert solution.maxValueOfCoins([[44, 23, 29, 62, 79], [33, 37, 41, 42], [56], [17, 57, 41, 68, 29, 80, 26, 3, 60, 1]], 3) == 133\nassert solution.maxValueOfCoins([[49, 34, 90, 96, 3, 19, 54], [37, 45, 59, 20, 36], [87, 86, 90, 73], [62, 67, 83], [46, 87], [78, 86, 96, 98, 8, 5], [96, 83, 50, 79]], 2) == 183\nassert solution.maxValueOfCoins([[68, 14, 28, 58, 95, 12]], 4) == 168\nassert solution.maxValueOfCoins([[65, 23, 10, 59, 4, 64, 2], [54, 2, 64, 13, 6, 41, 15, 60, 25, 87], [74, 97, 18, 89, 73, 34], [47, 30, 73, 63], [62], [2, 10, 80, 97, 50, 65, 36], [84, 12, 52, 32, 100, 34]], 29) == 1525\nassert solution.maxValueOfCoins([[63, 3, 99, 100, 88], [30, 60], [94, 73, 15, 76, 58, 35, 87], [23, 34, 20, 50, 38, 3], [57, 7, 87, 31, 36], [63, 31, 96], [97, 55, 31, 98, 65], [93, 27, 45, 6, 92, 26, 2, 81, 70]], 11) == 830\nassert solution.maxValueOfCoins([[39, 23, 85, 52], [48, 95, 45, 34, 44, 67, 49, 68], [77, 71, 98, 3, 96], [68, 40, 24, 58, 21, 60, 6, 22, 11], [98, 31], [9, 85, 75, 1, 54, 95]], 13) == 874\nassert solution.maxValueOfCoins([[72, 21, 33, 16, 100, 66, 43], [82, 48, 52, 40, 60, 56], [63, 27, 44, 72, 92, 91, 35, 75, 2, 85], [60, 9, 49, 51, 37, 54, 57, 44], [73, 35, 7, 46, 15, 44, 31, 37, 86], [75, 78]], 42) == 2163\nassert solution.maxValueOfCoins([[70, 11], [71, 33, 76], [54, 65, 21, 91, 27]], 8) == 481\nassert solution.maxValueOfCoins([[73, 93, 10, 34, 5, 77, 84, 72, 58, 7], [71, 86, 27, 25, 90], [45]], 15) == 850\nassert solution.maxValueOfCoins([[10, 19, 52, 33, 22, 37, 2, 9, 57], [66, 82], [69, 70, 8, 32], [28, 50, 100, 87, 8, 3, 97], [85, 44], [27, 70], [90, 81, 67, 38, 21, 94, 40, 22, 15, 27], [95, 78, 74, 19, 75, 40, 97, 7, 56], [49, 71, 5, 15, 35]], 13) == 985\nassert solution.maxValueOfCoins([[9, 12, 97, 75, 16], [32, 33, 89, 100, 25], [87, 60, 28, 30, 16, 15, 22, 56], [5, 46, 39], [6]], 4) == 254\nassert solution.maxValueOfCoins([[37, 46, 64, 65, 57, 28, 3, 24, 52, 81], [42], [9, 19, 84, 69, 26, 81, 79, 87, 57], [100, 64, 15, 80, 82, 94, 47, 21], [75, 43, 56, 7], [39, 61, 19, 90, 35, 26, 4, 41, 82, 46], [75, 33, 3], [38, 25, 18, 84]], 38) == 2073\nassert solution.maxValueOfCoins([[51, 32, 52, 39, 85, 92, 65]], 4) == 174\nassert solution.maxValueOfCoins([[85, 95, 14, 97, 74, 64, 46, 78, 33], [82, 7, 12, 22], [68, 39, 4, 16, 57, 30, 37, 26], [20, 55, 69, 65, 59], [54, 1, 62, 85, 82]], 1) == 85\nassert solution.maxValueOfCoins([[85, 55, 74, 90, 62, 46], [9, 51, 52, 29], [14, 5, 20, 6, 60, 15, 3], [95, 17, 37], [48, 19, 54, 30, 71, 24, 78, 25, 20], [43, 85, 25, 94, 1, 91, 29, 69], [58, 48, 42, 31, 21, 13, 65, 96, 88, 95]], 44) == 2150\nassert solution.maxValueOfCoins([[61, 81, 57], [93, 68, 54, 73, 91, 44, 64, 71, 30, 69], [58, 44, 71, 82, 52, 70, 47, 59], [12, 56, 62, 24, 11, 1]], 6) == 440\nassert solution.maxValueOfCoins([[72, 21, 42, 64], [79, 52, 54, 24, 25, 26, 99, 70, 49], [50, 89], [33, 100, 1, 70, 18], [30, 94, 79, 20], [1, 15, 37, 62, 76, 26, 77], [100, 82, 13, 43, 59, 36, 77, 15]], 15) == 987\nassert solution.maxValueOfCoins([[77, 86], [23], [70, 97, 79], [10, 48, 47, 87, 78, 73, 25], [51, 67, 89, 17, 97, 86], [37, 71, 5, 86, 32, 34, 38, 18, 45], [25, 66, 91], [8, 45, 36, 76, 30, 90, 41, 74, 80, 23], [13, 59], [83, 32, 82, 51, 79, 42, 94, 44, 43]], 14) == 1013\nassert solution.maxValueOfCoins([[62, 94, 59, 68, 7, 55], [60, 88, 61, 6], [61, 18, 93, 55, 95, 16], [18, 3, 60, 10, 54, 95, 91, 99, 24, 82]], 3) == 217\nassert solution.maxValueOfCoins([[38, 1, 29, 13, 40], [9, 98, 1, 11, 67, 40, 89, 100], [79, 26, 15, 85, 6, 25, 2], [100, 82], [5, 4, 27, 66, 92, 30, 44, 52, 83, 87], [5, 58, 15, 33, 17], [78, 35, 44, 19, 52, 22], [58, 65, 91, 80, 53], [17, 14, 39, 33, 20, 68, 54]], 55) == 2416\nassert solution.maxValueOfCoins([[80, 4, 88, 94, 61, 15, 9], [58, 17, 57, 33, 34, 71, 25, 32, 84], [1, 38, 30], [53, 61, 100, 47, 52, 91, 63, 92], [77, 63, 20, 46, 41, 79, 86, 85, 24, 26], [24, 18, 58, 91, 32, 70, 2], [48, 51, 86, 56, 18]], 28) == 1759\nassert solution.maxValueOfCoins([[76, 17, 46, 64, 99, 98, 16, 52, 97]], 2) == 93\nassert solution.maxValueOfCoins([[24, 65, 70], [59, 30, 31, 88, 99, 55, 75, 97, 68, 26], [17, 55, 66]], 4) == 218\nassert solution.maxValueOfCoins([[64, 49], [95, 45, 94, 83], [72, 46, 66, 17, 56, 31, 67, 16], [29, 78], [51, 1, 79, 25, 50, 22, 30], [73, 54, 81, 92, 34, 5, 17, 85, 70], [90, 23, 87, 98, 78, 19, 100, 65, 83, 95]], 4) == 330\nassert solution.maxValueOfCoins([[30, 63, 86]], 3) == 179\nassert solution.maxValueOfCoins([[89, 14, 47], [60, 65, 84, 64, 76, 62, 31, 58, 18, 17], [47, 95, 46, 28, 4], [40, 63, 43, 28, 23, 42, 49, 56, 67]], 23) == 1249\nassert solution.maxValueOfCoins([[23, 4, 55, 36, 18, 17], [69, 100], [9, 31, 95, 81, 26, 78, 23, 50]], 1) == 69",
  "inefficient_solution": "class Solution:\n    def maxValueOfCoins(self, piles, k):\n        presum = [list(accumulate(p, initial=0)) for p in piles]\n        dp = [[0] * (k + 1) for _ in range(len(piles) + 1)]\n        for i in range(1, len(piles) + 1):\n            for j in range(k + 1):\n                dp[i - 1][j] = dp[i - 1][j - 1] if j > 0 else 0\n                for idx, s in enumerate(presum[i - 1]):\n                    for l in range(idx, min(k - j + 1, idx + 1)):\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - l] + s[l])\n        return dp[-1][-1]",
  "is_python": true
}