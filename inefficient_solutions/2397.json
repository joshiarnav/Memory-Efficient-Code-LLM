{
  "problem_idx": 2397,
  "task_name": "Maximum Rows Covered by Columns",
  "markdown_description": "\nYou are given a **0-indexed** `m x n` binary matrix `matrix` and an integer `numSelect`, which denotes the number of **distinct** columns you must select from `matrix`.\n\n\nLet us consider `s = {c1, c2, ...., cnumSelect}` as the set of columns selected by you. A row `row` is **covered** by `s` if:\n\n\n* For each cell `matrix[row][col]` (`0 <= col <= n - 1`) where `matrix[row][col] == 1`, `col` is present in `s` or,\n* **No cell** in `row` has a value of `1`.\n\n\nYou need to choose `numSelect` columns such that the number of rows that are covered is **maximized**.\n\n\nReturn *the **maximum** number of rows that can be **covered** by a set of* `numSelect` *columns.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2397.Maximum%20Rows%20Covered%20by%20Columns/images/rowscovered.png)\n\n```\n\n**Input:** matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2\n**Output:** 3\n**Explanation:** One possible way to cover 3 rows is shown in the diagram above.\nWe choose s = {0, 2}.\n- Row 0 is covered because it has no occurrences of 1.\n- Row 1 is covered because the columns with value 1, i.e. 0 and 2 are present in s.\n- Row 2 is not covered because matrix[2][1] == 1 but 1 is not present in s.\n- Row 3 is covered because matrix[2][2] == 1 and 2 is present in s.\nThus, we can cover three rows.\nNote that s = {1, 2} will also cover 3 rows, but it can be shown that no more than three rows can be covered.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2300-2399/2397.Maximum%20Rows%20Covered%20by%20Columns/images/rowscovered2.png)\n\n```\n\n**Input:** matrix = [[1],[0]], numSelect = 1\n**Output:** 2\n**Explanation:** Selecting the only column will result in both rows being covered since the entire matrix is selected.\nTherefore, we return 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == matrix.length`\n* `n == matrix[i].length`\n* `1 <= m, n <= 12`\n* `matrix[i][j]` is either `0` or `1`.\n* `1 <= numSelect\u00a0<= n`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumRows(self, matrix: List[List[int]], numSelect: int) -> int:\n        rows = []\n        for row in matrix:\n            mask = reduce(or_, (1 << j for j, x in enumerate(row) if x), 0)\n            rows.append(mask)\n\n        ans = 0\n        for mask in range(1 << len(matrix[0])):\n            if mask.bit_count() != numSelect:\n                continue\n            t = sum((x & mask) == x for x in rows)\n            ans = max(ans, t)\n        return ans\n",
  "test_case_generator": "\nfrom typing import List\nimport random\n\ndef generate_test_case() -> Tuple[List[List[int]], int, int]:\n    solution = Solution()\n    \n    # Generate random matrix\n    m = random.randint(1, 5)\n    n = random.randint(1, 5)\n    matrix = [[random.randint(0, 1) for _ in range(n)] for _ in range(m)]\n    \n    # Generate a random numSelect\n    numSelect = random.randint(1, n)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumRows(matrix, numSelect)\n\n    return matrix, numSelect, expected_result\n\ndef test_generated_test_cases(num_tests: int) -> List[str]:\n    test_case_generator_results = []\n    for i in range(num_tests):\n        matrix, numSelect, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumRows(matrix, numSelect) == expected_result\n        test_case = f\"matrix = {matrix}, numSelect = {numSelect}\"\n        test_case_generator_results.append(test_case)\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(test_case_generator_results)\n",
  "test_case": "matrix = [[1, 0, 1, 0, 1], [1, 0, 0, 0, 0], [0, 0, 0, 0, 0]], numSelect = 3\nmatrix = [[1, 1, 0, 0, 1], [0, 1, 0, 1, 0], [1, 1, 0, 1, 1]], numSelect = 1\nmatrix = [[1, 1, 1, 1]], numSelect = 2\nmatrix = [[0, 1, 1], [1, 1, 1], [0, 1, 0]], numSelect = 2\nmatrix = [[1, 1, 0], [1, 1, 0], [0, 1, 1], [1, 1, 1]], numSelect = 2\nmatrix = [[0, 0], [1, 0], [1, 1], [0, 0]], numSelect = 2\nmatrix = [[0, 1, 1, 0, 1], [0, 0, 0, 0, 0]], numSelect = 1\nmatrix = [[0, 1, 1], [1, 1, 0]], numSelect = 2\nmatrix = [[0, 0, 1], [0, 1, 1]], numSelect = 2\nmatrix = [[0, 1], [1, 0], [0, 1], [1, 0]], numSelect = 2\nmatrix = [[1, 0, 0, 0], [0, 1, 1, 1]], numSelect = 4\nmatrix = [[0, 1, 1, 1, 0], [1, 0, 1, 1, 1]], numSelect = 3\nmatrix = [[1], [1]], numSelect = 1\nmatrix = [[0, 1], [1, 0], [1, 0], [1, 1]], numSelect = 2\nmatrix = [[1, 0, 1], [1, 0, 0]], numSelect = 1\nmatrix = [[0]], numSelect = 1\nmatrix = [[0, 1, 0, 1], [1, 0, 1, 1], [0, 0, 0, 1], [1, 1, 1, 0]], numSelect = 3\nmatrix = [[1, 0], [0, 0], [0, 1], [0, 1]], numSelect = 2\nmatrix = [[0, 1, 0], [0, 0, 1]], numSelect = 3\nmatrix = [[0], [1], [1], [0], [0]], numSelect = 1\nmatrix = [[0, 0, 1, 1], [1, 1, 1, 0]], numSelect = 4\nmatrix = [[0, 0], [0, 0], [1, 0], [1, 0]], numSelect = 2\nmatrix = [[1, 0, 0, 1], [0, 1, 0, 0], [1, 1, 0, 1]], numSelect = 3\nmatrix = [[1, 1, 1], [1, 1, 0], [1, 1, 1], [0, 0, 1], [1, 0, 1]], numSelect = 1\nmatrix = [[1], [1], [0]], numSelect = 1\nmatrix = [[1, 1], [1, 1], [1, 1], [0, 1], [0, 0]], numSelect = 1\nmatrix = [[1, 1, 0, 0, 0]], numSelect = 2\nmatrix = [[1, 1, 1, 1, 0], [1, 0, 0, 1, 0]], numSelect = 1\nmatrix = [[0]], numSelect = 1\nmatrix = [[1, 0, 1, 1], [1, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 0], [1, 0, 0, 1]], numSelect = 2\nmatrix = [[0, 1, 0, 1, 0], [1, 1, 1, 1, 0], [1, 0, 1, 0, 0]], numSelect = 3\nmatrix = [[1, 1], [0, 0], [1, 0], [0, 1], [1, 0]], numSelect = 1\nmatrix = [[1, 1, 0], [0, 0, 1], [1, 1, 0], [0, 1, 0]], numSelect = 3\nmatrix = [[1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 0, 0], [0, 0, 1, 0]], numSelect = 1\nmatrix = [[0], [0]], numSelect = 1\nmatrix = [[0], [0], [1]], numSelect = 1\nmatrix = [[0, 1, 0, 0], [0, 1, 0, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 1, 0, 1]], numSelect = 2\nmatrix = [[0, 0, 1, 0, 1], [1, 0, 0, 1, 0], [1, 1, 0, 0, 1]], numSelect = 2\nmatrix = [[0, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 0, 1, 1], [0, 0, 1, 1, 1], [1, 0, 1, 1, 0]], numSelect = 3\nmatrix = [[1, 1, 0, 1], [1, 1, 1, 0], [1, 0, 0, 0]], numSelect = 3\nmatrix = [[1, 1, 1], [1, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 0]], numSelect = 3\nmatrix = [[1, 0, 1, 0, 0], [0, 0, 1, 0, 1], [1, 1, 1, 0, 0], [1, 1, 0, 0, 1]], numSelect = 1\nmatrix = [[0, 1, 0, 1]], numSelect = 2\nmatrix = [[0, 1, 1, 0], [0, 1, 0, 1]], numSelect = 4\nmatrix = [[1, 1], [0, 0], [0, 1], [0, 0]], numSelect = 1\nmatrix = [[0, 0], [0, 0], [0, 1]], numSelect = 2\nmatrix = [[0], [1], [0], [0]], numSelect = 1\nmatrix = [[0, 1], [0, 1], [1, 1], [0, 0]], numSelect = 1\nmatrix = [[1], [0], [0]], numSelect = 1\nmatrix = [[1], [1], [1]], numSelect = 1\nmatrix = [[0, 0, 0, 1, 0]], numSelect = 4\nmatrix = [[1, 1, 0, 1, 1], [1, 0, 1, 1, 0], [1, 0, 1, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 1]], numSelect = 4\nmatrix = [[0, 1, 1, 1], [1, 1, 0, 1], [1, 0, 1, 0]], numSelect = 4\nmatrix = [[0], [1], [0], [1], [0]], numSelect = 1\nmatrix = [[1, 1, 1, 0]], numSelect = 2\nmatrix = [[1, 0, 0], [0, 1, 0]], numSelect = 3\nmatrix = [[1, 0, 0, 0], [0, 1, 0, 1]], numSelect = 3\nmatrix = [[0, 0], [1, 0], [0, 1], [1, 1]], numSelect = 2\nmatrix = [[0]], numSelect = 1\nmatrix = [[1, 1], [0, 1], [1, 0]], numSelect = 2\nmatrix = [[1, 1, 1], [0, 0, 1], [0, 0, 1], [0, 1, 1]], numSelect = 3\nmatrix = [[1, 0, 0]], numSelect = 1\nmatrix = [[1, 0, 0, 1], [0, 1, 1, 0], [0, 0, 0, 0], [1, 0, 1, 1], [0, 1, 1, 0]], numSelect = 4\nmatrix = [[1, 0, 0, 1], [1, 1, 1, 1]], numSelect = 2\nmatrix = [[1, 0, 1, 0, 1], [1, 1, 1, 1, 0], [0, 1, 0, 0, 1]], numSelect = 5\nmatrix = [[0, 0, 1], [0, 1, 0], [1, 1, 0], [1, 0, 0]], numSelect = 3\nmatrix = [[0, 1, 1, 0, 1], [0, 0, 1, 1, 0], [0, 1, 1, 1, 0], [1, 0, 0, 1, 0]], numSelect = 3\nmatrix = [[0], [1]], numSelect = 1\nmatrix = [[0, 0, 0, 1, 1], [0, 1, 0, 0, 0], [0, 1, 0, 0, 0], [1, 1, 1, 0, 0], [1, 1, 0, 0, 0]], numSelect = 5\nmatrix = [[1, 1, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 1, 0, 0], [1, 0, 0, 0, 0]], numSelect = 4\nmatrix = [[1, 0, 0, 0]], numSelect = 2\nmatrix = [[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 1, 1]], numSelect = 3\nmatrix = [[0, 0, 0]], numSelect = 2\nmatrix = [[0, 0, 0]], numSelect = 3\nmatrix = [[0, 0, 0, 0], [1, 1, 0, 1], [0, 0, 1, 1]], numSelect = 4\nmatrix = [[1]], numSelect = 1\nmatrix = [[0, 1]], numSelect = 2\nmatrix = [[1, 0, 1, 0], [1, 0, 1, 1], [0, 0, 1, 0]], numSelect = 4\nmatrix = [[1, 0, 0, 1]], numSelect = 4\nmatrix = [[1, 0], [0, 1], [1, 1]], numSelect = 2\nmatrix = [[1, 1, 1, 0], [0, 1, 0, 1], [1, 0, 1, 1], [1, 0, 1, 1], [0, 0, 1, 1]], numSelect = 4\nmatrix = [[0, 1], [0, 1], [1, 1]], numSelect = 1\nmatrix = [[0, 1, 0, 1], [0, 1, 0, 1]], numSelect = 1\nmatrix = [[1, 1], [0, 1]], numSelect = 2\nmatrix = [[1, 1], [0, 1], [0, 0], [0, 0]], numSelect = 1\nmatrix = [[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 0, 0, 1]], numSelect = 2\nmatrix = [[0, 0], [1, 1], [0, 1]], numSelect = 2\nmatrix = [[0], [0], [0]], numSelect = 1\nmatrix = [[0]], numSelect = 1\nmatrix = [[0, 1, 0, 1, 1], [0, 1, 0, 1, 1], [0, 0, 1, 0, 0], [0, 1, 0, 1, 1], [0, 0, 0, 1, 0]], numSelect = 1\nmatrix = [[0, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 1], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]], numSelect = 4\nmatrix = [[0, 0], [0, 0], [0, 1], [1, 0]], numSelect = 2\nmatrix = [[0, 1, 1]], numSelect = 1\nmatrix = [[0, 0, 0], [0, 1, 0], [1, 0, 1], [1, 1, 1], [1, 0, 0]], numSelect = 2\nmatrix = [[0, 1, 1, 1], [1, 1, 0, 1], [0, 0, 1, 0], [1, 1, 1, 1], [1, 1, 0, 1]], numSelect = 1\nmatrix = [[1, 1, 0], [0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 1, 0]], numSelect = 3\nmatrix = [[1, 0, 1], [0, 0, 1], [1, 0, 1]], numSelect = 1\nmatrix = [[0, 0, 0, 0, 1], [0, 0, 0, 1, 1], [1, 0, 0, 0, 0]], numSelect = 4\nmatrix = [[0, 0, 1]], numSelect = 1\nmatrix = [[0], [0]], numSelect = 1",
  "inefficient_solution": "class Solution:\n    def maximumRows(self, matrix: List[List[int]], numSelect: int) -> int:\n        rows = [list(map(int, ''.join(map(str, row)))) for row in matrix]\n        all_cols = [list(map(int, ''.join(map(str, [row[i] for row in matrix])))) for i in range(len(matrix[0]))]\n        all_cols = [col + [0] * (12 - len(col)) for col in all_cols]\n        all_cols = [col + [0] * (12 * 12 - len(col)) for col in all_cols]\n        all_cols = [col + [0] * (12 * 12 * 12 - len(col)) for col in all_cols]\n\n        ans = 0\n        for mask in range(1 << len(matrix[0])):\n            if mask.bit_count() != numSelect:\n                continue\n            t = sum((x & mask) == x for x in rows)\n            ans = max(ans, t)\n\n        for i in range(len(all_cols)):\n            all_cols[i] = all_cols[i] + [0] * (len(all_cols[i]) * 10)\n            all_cols[i] = all_cols[i] + [0] * (len(all_cols[i]) * 100)\n            all_cols[i] = all_cols[i] + [0] * (len(all_cols[i]) * 1000)\n            all_cols[i] = all_cols[i] + [0] * (len(all_cols[i]) * 10000)\n\n        for mask in range(1 << len(matrix[0])):\n            if mask.bit_count() != numSelect:\n                continue\n            t = sum((x & mask) == x for x in rows)\n            ans = max(ans, t)\n            for col in all_cols:\n                col = col + [0] * (len(col) * 10)\n                col = col + [0] * (len(col) * 100)\n                col = col + [0] * (len(col) * 1000)\n                col = col + [0] * (len(col) * 10000)\n\n        return ans",
  "is_python": true
}