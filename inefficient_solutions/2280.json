{
  "problem_idx": 2280,
  "task_name": "Minimum Lines to Represent a Line Chart",
  "markdown_description": "\nYou are given a 2D integer array `stockPrices` where `stockPrices[i] = [dayi, pricei]` indicates the price of the stock on day `dayi` is `pricei`. A **line chart** is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2280.Minimum%20Lines%20to%20Represent%20a%20Line%20Chart/images/1920px-pushkin_population_historysvg.png)\nReturn *the **minimum number of lines** needed to represent the line chart*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2280.Minimum%20Lines%20to%20Represent%20a%20Line%20Chart/images/ex0.png)\n\n```\n\n**Input:** stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]\n**Output:** 3\n**Explanation:**\nThe diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.\nThe following 3 lines can be drawn to represent the line chart:\n- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).\n- Line 2 (in blue) from (4,4) to (5,4).\n- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).\nIt can be shown that it is not possible to represent the line chart using less than 3 lines.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2200-2299/2280.Minimum%20Lines%20to%20Represent%20a%20Line%20Chart/images/ex1.png)\n\n```\n\n**Input:** stockPrices = [[3,4],[1,2],[7,8],[2,3]]\n**Output:** 1\n**Explanation:**\nAs shown in the diagram above, the line chart can be represented with a single line.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= stockPrices.length <= 105`\n* `stockPrices[i].length == 2`\n* `1 <= dayi, pricei <= 109`\n* All `dayi` are **distinct**.\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumLines(self, stockPrices: List[List[int]]) -> int:\n        stockPrices.sort()\n        dx, dy = 0, 1\n        ans = 0\n        for (x, y), (x1, y1) in pairwise(stockPrices):\n            dx1, dy1 = x1 - x, y1 - y\n            if dy * dx1 != dx * dy1:\n                ans += 1\n            dx, dy = dx1, dy1\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumLines(self, stockPrices):\n        stockPrices.sort()\n        dx, dy = 0, 1\n        ans = 0\n        for (x, y), (x1, y1) in pairwise(stockPrices):\n            dx1, dy1 = x1 - x, y1 - y\n            if dy * dx1 != dx * dy1:\n                ans += 1\n            dx, dy = dx1, dy1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random stockPrices list\n    num_days = random.randint(2, 10)\n    stockPrices = [[random.randint(1, 10), random.randint(1, 10)] for _ in range(num_days)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumLines(stockPrices)\n\n    return stockPrices, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        stockPrices, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumLines(stockPrices) == expected_result\n        print(f\"assert solution.minimumLines({stockPrices}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumLines({stockPrices}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumLines([[2, 8], [4, 10], [5, 7], [8, 2], [10, 5]]) == 4\nassert solution.minimumLines([[1, 8], [5, 2], [7, 6], [8, 6]]) == 3\nassert solution.minimumLines([[1, 5], [1, 10], [2, 2], [2, 9], [4, 8], [6, 3], [7, 7], [8, 1], [10, 2]]) == 7\nassert solution.minimumLines([[1, 7], [3, 2], [3, 2], [4, 2], [5, 7], [7, 9], [9, 9]]) == 4\nassert solution.minimumLines([[1, 10], [5, 7], [7, 9], [10, 9]]) == 3\nassert solution.minimumLines([[1, 5], [2, 2], [4, 4], [4, 9], [7, 7], [9, 5]]) == 5\nassert solution.minimumLines([[2, 7], [3, 1], [3, 2], [3, 2], [4, 5], [5, 9], [6, 1], [7, 2], [7, 7], [9, 9]]) == 7\nassert solution.minimumLines([[2, 7], [6, 8], [9, 2], [10, 10]]) == 3\nassert solution.minimumLines([[1, 8], [9, 10]]) == 1\nassert solution.minimumLines([[1, 7], [1, 10], [3, 4], [5, 9], [8, 6]]) == 3\nassert solution.minimumLines([[1, 1], [3, 9], [4, 7], [4, 8], [4, 9], [4, 10], [9, 2], [10, 7]]) == 5\nassert solution.minimumLines([[1, 5], [6, 1], [6, 5], [7, 5], [8, 3], [8, 6]]) == 5\nassert solution.minimumLines([[2, 2], [7, 3], [7, 8], [8, 1], [9, 2]]) == 4\nassert solution.minimumLines([[2, 6], [3, 9], [8, 3], [9, 3], [10, 7], [10, 9]]) == 5\nassert solution.minimumLines([[1, 10], [7, 6], [9, 4], [9, 7]]) == 3\nassert solution.minimumLines([[4, 3], [6, 1], [8, 8]]) == 2\nassert solution.minimumLines([[2, 5], [2, 8], [2, 8], [4, 5], [5, 7], [7, 1], [8, 3], [9, 1]]) == 4\nassert solution.minimumLines([[1, 7], [7, 10], [8, 1]]) == 2\nassert solution.minimumLines([[1, 4], [4, 5], [7, 9], [9, 4], [10, 3]]) == 4\nassert solution.minimumLines([[1, 6], [2, 5], [3, 5], [4, 7], [6, 9], [7, 3]]) == 5\nassert solution.minimumLines([[5, 6], [6, 9], [7, 7], [7, 9], [8, 1]]) == 4\nassert solution.minimumLines([[1, 6], [1, 8], [2, 2], [5, 5], [5, 10], [9, 6]]) == 4\nassert solution.minimumLines([[1, 5], [3, 4], [4, 6], [6, 2], [7, 2], [8, 6], [9, 5], [9, 8], [10, 2], [10, 9]]) == 9\nassert solution.minimumLines([[2, 5], [4, 8], [6, 7], [8, 1], [8, 4], [8, 5]]) == 4\nassert solution.minimumLines([[1, 5], [6, 10], [7, 2]]) == 2\nassert solution.minimumLines([[1, 3], [3, 6], [4, 6], [5, 10], [6, 4]]) == 4\nassert solution.minimumLines([[4, 3], [4, 6], [4, 10], [6, 2], [7, 5]]) == 2\nassert solution.minimumLines([[5, 6], [8, 1], [9, 3]]) == 2\nassert solution.minimumLines([[3, 6], [5, 4], [5, 4], [5, 9], [9, 5]]) == 2\nassert solution.minimumLines([[2, 3], [7, 2]]) == 1\nassert solution.minimumLines([[6, 9], [9, 9]]) == 1\nassert solution.minimumLines([[1, 9], [2, 3], [2, 8], [2, 9], [3, 3], [6, 9]]) == 4\nassert solution.minimumLines([[2, 1], [2, 9], [3, 6], [4, 8], [7, 1], [8, 4], [9, 2], [9, 4], [9, 7], [10, 1]]) == 7\nassert solution.minimumLines([[1, 8], [6, 10], [9, 6]]) == 2\nassert solution.minimumLines([[2, 1], [3, 4], [5, 4], [5, 7], [5, 9], [7, 7], [9, 7], [10, 7]]) == 5\nassert solution.minimumLines([[2, 2], [3, 2], [3, 7], [4, 3], [4, 8], [7, 1], [8, 3], [8, 8]]) == 7\nassert solution.minimumLines([[3, 5], [3, 6], [4, 2], [9, 1], [10, 8]]) == 3\nassert solution.minimumLines([[3, 2], [7, 2]]) == 1\nassert solution.minimumLines([[3, 7], [8, 7], [8, 8]]) == 2\nassert solution.minimumLines([[2, 4], [2, 5], [2, 8], [3, 2], [4, 4], [4, 4], [6, 8], [6, 8], [7, 2], [9, 2]]) == 3\nassert solution.minimumLines([[3, 3], [4, 2], [4, 2], [4, 9], [5, 3], [5, 3], [7, 1], [10, 7]]) == 3\nassert solution.minimumLines([[1, 7], [3, 5], [3, 5], [3, 9], [5, 1], [6, 1], [7, 5], [8, 8], [8, 10]]) == 6\nassert solution.minimumLines([[4, 10], [9, 3]]) == 1\nassert solution.minimumLines([[1, 2], [2, 1], [2, 6], [3, 1], [4, 4], [5, 10], [7, 2], [8, 7], [9, 1], [9, 8]]) == 9\nassert solution.minimumLines([[4, 1], [7, 7], [8, 10]]) == 2\nassert solution.minimumLines([[2, 3], [4, 1], [4, 8], [5, 2], [6, 5], [6, 8], [6, 10], [9, 5], [9, 7]]) == 7\nassert solution.minimumLines([[2, 10], [3, 2], [6, 4], [6, 8], [10, 2]]) == 4\nassert solution.minimumLines([[4, 5], [9, 3]]) == 1\nassert solution.minimumLines([[7, 1], [7, 4], [8, 5], [9, 1]]) == 2\nassert solution.minimumLines([[1, 8], [2, 5], [5, 2], [5, 3], [5, 5], [5, 7], [7, 5], [8, 4], [8, 7], [10, 10]]) == 6\nassert solution.minimumLines([[2, 2], [10, 3]]) == 1\nassert solution.minimumLines([[2, 7], [3, 5], [4, 9], [7, 9]]) == 3\nassert solution.minimumLines([[1, 7], [2, 8], [5, 1], [5, 5], [6, 10], [7, 10], [8, 3], [9, 7], [10, 8]]) == 8\nassert solution.minimumLines([[1, 7], [2, 1], [4, 2], [4, 10], [8, 9], [8, 10], [10, 4], [10, 9]]) == 7\nassert solution.minimumLines([[1, 8], [5, 6], [8, 10], [10, 9]]) == 3\nassert solution.minimumLines([[1, 2], [3, 1], [4, 7], [4, 9], [6, 1], [6, 8], [8, 9], [9, 1]]) == 7\nassert solution.minimumLines([[1, 9], [2, 8], [3, 10], [4, 4], [5, 2], [5, 3], [5, 4], [6, 4]]) == 6\nassert solution.minimumLines([[2, 3], [2, 7], [5, 5], [7, 6], [7, 8]]) == 3\nassert solution.minimumLines([[1, 3], [4, 9], [5, 7], [7, 4], [7, 9], [8, 2], [8, 10]]) == 6\nassert solution.minimumLines([[2, 6], [2, 8], [5, 5], [6, 3], [6, 9], [7, 2], [9, 6], [10, 2], [10, 6]]) == 7\nassert solution.minimumLines([[1, 10], [2, 10]]) == 1\nassert solution.minimumLines([[3, 4], [3, 6], [7, 9], [8, 5], [9, 4], [10, 10]]) == 4\nassert solution.minimumLines([[2, 2], [8, 8]]) == 1\nassert solution.minimumLines([[7, 9], [8, 5], [9, 1]]) == 1\nassert solution.minimumLines([[3, 5], [3, 6], [4, 4], [6, 1], [9, 2]]) == 3\nassert solution.minimumLines([[2, 10], [5, 2], [6, 1], [6, 3], [6, 9], [9, 1], [9, 6], [10, 1], [10, 10]]) == 7\nassert solution.minimumLines([[3, 7], [6, 2], [7, 5], [7, 8], [7, 10]]) == 3\nassert solution.minimumLines([[3, 6], [4, 5], [4, 7], [6, 3], [9, 8], [10, 1], [10, 2], [10, 3], [10, 4]]) == 6\nassert solution.minimumLines([[1, 2], [2, 7], [2, 10], [3, 4], [3, 9], [3, 10], [4, 1], [5, 7], [9, 5], [9, 7]]) == 8\nassert solution.minimumLines([[3, 2], [4, 6], [4, 10], [5, 5], [6, 5], [6, 5], [8, 9], [9, 7], [10, 8]]) == 6\nassert solution.minimumLines([[8, 5], [10, 2], [10, 5]]) == 2\nassert solution.minimumLines([[2, 6], [4, 2], [4, 2], [4, 2], [5, 2], [5, 5], [5, 8], [6, 9]]) == 3\nassert solution.minimumLines([[1, 1], [1, 3], [1, 7], [1, 8], [3, 2], [5, 2], [5, 5], [8, 1], [10, 5]]) == 5\nassert solution.minimumLines([[5, 2], [6, 5]]) == 1\nassert solution.minimumLines([[3, 9], [6, 2], [9, 4], [10, 4]]) == 3\nassert solution.minimumLines([[8, 3], [9, 8]]) == 1\nassert solution.minimumLines([[2, 2], [3, 4], [6, 6], [8, 1], [8, 4], [10, 5]]) == 5\nassert solution.minimumLines([[2, 3], [4, 4], [9, 7], [10, 2]]) == 3\nassert solution.minimumLines([[1, 3], [1, 7], [1, 10], [2, 1], [3, 3], [6, 10], [10, 3], [10, 7]]) == 5\nassert solution.minimumLines([[4, 1], [5, 2], [5, 2], [8, 8]]) == 1\nassert solution.minimumLines([[2, 9], [3, 1], [4, 4], [6, 2], [7, 2], [7, 10], [8, 6], [9, 5], [10, 3]]) == 8\nassert solution.minimumLines([[2, 9], [3, 5], [4, 7], [5, 9], [5, 9], [5, 10], [6, 9], [7, 2]]) == 4\nassert solution.minimumLines([[3, 1], [3, 4], [6, 9]]) == 1\nassert solution.minimumLines([[1, 10], [4, 5], [10, 2]]) == 2\nassert solution.minimumLines([[3, 10], [4, 9], [6, 2], [8, 2], [9, 7]]) == 4\nassert solution.minimumLines([[7, 6], [8, 1], [8, 7]]) == 2\nassert solution.minimumLines([[1, 1], [1, 5], [3, 6], [4, 1], [4, 1], [6, 2]]) == 2\nassert solution.minimumLines([[1, 6], [2, 1], [3, 3], [5, 8]]) == 3\nassert solution.minimumLines([[1, 4], [2, 1], [2, 4], [4, 3], [4, 6], [4, 6], [7, 8], [8, 10], [9, 3]]) == 6\nassert solution.minimumLines([[3, 2], [4, 9], [7, 4]]) == 2\nassert solution.minimumLines([[1, 1], [2, 6], [3, 5], [3, 9], [3, 10], [4, 3], [5, 4], [7, 10], [9, 2]]) == 7\nassert solution.minimumLines([[3, 7], [4, 8], [5, 10], [6, 2], [7, 9], [8, 4], [8, 6], [8, 7], [9, 3], [9, 5]]) == 8\nassert solution.minimumLines([[2, 4], [2, 4], [2, 9], [5, 1], [9, 7], [10, 2]]) == 3\nassert solution.minimumLines([[2, 6], [9, 5], [10, 1]]) == 2\nassert solution.minimumLines([[3, 2], [3, 4], [3, 10], [6, 7], [9, 4]]) == 1\nassert solution.minimumLines([[5, 5], [6, 6], [7, 7]]) == 1\nassert solution.minimumLines([[1, 5], [1, 10], [1, 10], [2, 7], [4, 10], [5, 1], [7, 3], [10, 1]]) == 4\nassert solution.minimumLines([[5, 6], [9, 4]]) == 1\nassert solution.minimumLines([[2, 5], [2, 10], [4, 4], [5, 6], [5, 6], [8, 9], [10, 1]]) == 3\nassert solution.minimumLines([[1, 5], [1, 10], [5, 3], [6, 4], [6, 6], [8, 3], [10, 6]]) == 5",
  "inefficient_solution": "class Solution:\n    def minimumLines(self, stockPrices: List[List[int]]) -> int:\n        stockPrices = [[day, price] for day, price in stockPrices for _ in range(day)]\n        stockPrices.sort()\n        dx, dy = 0, 1\n        ans = 0\n        for (x, y), (x1, y1) in zip(stockPrices, stockPrices[1:]):\n            dx1, dy1 = x1 - x, y1 - y\n            if dy * dx1 != dx * dy1:\n                ans += 1\n            dx, dy = dx1, dy1\n        return ans",
  "is_python": true
}