{
  "problem_idx": 656,
  "task_name": "Coin Path",
  "markdown_description": "\nYou are given an integer array `coins` (**1-indexed**) of length `n` and an integer `maxJump`. You can jump to any index `i` of the array `coins` if `coins[i] != -1` and you have to pay `coins[i]` when you visit index `i`. In addition to that, if you are currently at index `i`, you can only jump to any index `i + k` where `i + k <= n` and `k` is a value in the range `[1, maxJump]`.\n\n\nYou are initially positioned at index `1` (`coins[1]` is not `-1`). You want to find the path that reaches index n with the minimum cost.\n\n\nReturn an integer array of the indices that you will visit in order so that you can reach index n with the minimum cost. If there are multiple paths with the same cost, return the **lexicographically smallest** such path. If it is not possible to reach index n, return an empty array.\n\n\nA path `p1 = [Pa1, Pa2, ..., Pax]` of length `x` is **lexicographically smaller** than `p2 = [Pb1, Pb2, ..., Pbx]` of length `y`, if and only if at the first `j` where `Paj` and `Pbj` differ, `Paj < Pbj`; when no such `j` exists, then `x < y`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** coins = [1,2,4,-1,2], maxJump = 2\n**Output:** [1,3,5]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** coins = [1,2,4,-1,2], maxJump = 1\n**Output:** []\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= coins.length <= 1000`\n* `-1 <= coins[i] <= 100`\n* `coins[1] != -1`\n* `1 <= maxJump <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def cheapestJump(self, coins: List[int], maxJump: int) -> List[int]:\n        if coins[-1] == -1:\n            return []\n        n = len(coins)\n        f = [inf] * n\n        f[-1] = coins[-1]\n        for i in range(n - 2, -1, -1):\n            if coins[i] != -1:\n                for j in range(i + 1, min(n, i + maxJump + 1)):\n                    if f[i] > f[j] + coins[i]:\n                        f[i] = f[j] + coins[i]\n        if f[0] == inf:\n            return []\n        ans = []\n        s = f[0]\n        for i in range(n):\n            if f[i] == s:\n                s -= coins[i]\n                ans.append(i + 1)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def cheapestJump(self, coins, maxJump):\n        if coins[-1] == -1:\n            return []\n        n = len(coins)\n        f = [float('inf')] * n\n        f[-1] = coins[-1]\n        for i in range(n - 2, -1, -1):\n            if coins[i] != -1:\n                for j in range(i + 1, min(n, i + maxJump + 1)):\n                    if f[i] > f[j] + coins[i]:\n                        f[i] = f[j] + coins[i]\n        if f[0] == float('inf'):\n            return []\n        ans = []\n        s = f[0]\n        for i in range(n):\n            if f[i] == s:\n                s -= coins[i]\n                ans.append(i + 1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random coins list\n    coins = random.choices(range(-1, 101), k=random.randint(1, 11))\n    \n    # Generate a random max jump\n    maxJump = random.randint(1, 101)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.cheapestJump(coins, maxJump)\n\n    return coins, maxJump, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        coins, maxJump, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.cheapestJump(coins, maxJump) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.cheapestJump({coins}, {maxJump}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.cheapestJump({coins}, {maxJump}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.cheapestJump([55, 37, 89, 12, 29, 67, 50, 31, 46, 4], 67) == [1, 10]\nassert solution.cheapestJump([35, 51, 42, 71, 18], 84) == [1, 5]\nassert solution.cheapestJump([0, 70, 42], 33) == [1, 3]\nassert solution.cheapestJump([55, 58, 25, 84, 13, 58, 96, 19], 85) == [1, 8]\nassert solution.cheapestJump([71, 23, 8, 59, 100], 64) == [1, 5]\nassert solution.cheapestJump([51, 68, 93, 72], 52) == [1, 4]\nassert solution.cheapestJump([43, 32, 98, 73, 80], 37) == [1, 5]\nassert solution.cheapestJump([0, 96, 74, 68, 19, 74, 18, 41], 72) == [1, 8]\nassert solution.cheapestJump([36, 40], 71) == [1, 2]\nassert solution.cheapestJump([76, 87, 34, 57], 56) == [1, 4]\nassert solution.cheapestJump([95, 70, 82, 47, 5, 90], 21) == [1, 6]\nassert solution.cheapestJump([39, 62, 68, 14, 25], 64) == [1, 5]\nassert solution.cheapestJump([13, 92, 21, 17, 58], 33) == [1, 5]\nassert solution.cheapestJump([38, 52, 15, 10, 1, 29, 1, 61, 75, 61], 84) == [1, 10]\nassert solution.cheapestJump([11, 16], 24) == [1, 2]\nassert solution.cheapestJump([20, 46], 95) == [1, 2]\nassert solution.cheapestJump([24, 8, 73], 46) == [1, 3]\nassert solution.cheapestJump([80, 74], 1) == [1, 2]\nassert solution.cheapestJump([88, 85], 13) == [1, 2]\nassert solution.cheapestJump([52, 7, 17, 96, 1, 78, 20, 21, 66, 57], 60) == [1, 10]\nassert solution.cheapestJump([17, 49, 65, 79, 94], 94) == [1, 5]\nassert solution.cheapestJump([96, 86, 75, 3, 94], 42) == [1, 5]\nassert solution.cheapestJump([92, 97, 22, 26], 54) == [1, 4]\nassert solution.cheapestJump([38, 43], 23) == [1, 2]\nassert solution.cheapestJump([86, 92, 95, 52, 81], 54) == [1, 5]\nassert solution.cheapestJump([11, 73, 22, 34, 41], 38) == [1, 5]\nassert solution.cheapestJump([47, 87, 8, 36, 30, 27, 85, 2, 96, 69, 84], 3) == [1, 3, 6, 8, 11]\nassert solution.cheapestJump([88, 17, 19, 98, 96, 86], 100) == [1, 6]\nassert solution.cheapestJump([56, 66, 49, 80, 91, 21, 45, 41], 6) == [1, 6, 8]\nassert solution.cheapestJump([8], 99) == [1]\nassert solution.cheapestJump([53, 2, 59], 94) == [1, 3]\nassert solution.cheapestJump([94, 69, 1, 85, -1, 2, 78], 39) == [1, 7]\nassert solution.cheapestJump([4, 66, -1, 91], 30) == [1, 4]\nassert solution.cheapestJump([12, 49, 93, 81, 64, 25], 40) == [1, 6]\nassert solution.cheapestJump([50], 23) == [1]\nassert solution.cheapestJump([58, 82, 44], 3) == [1, 3]\nassert solution.cheapestJump([38, 61], 98) == [1, 2]\nassert solution.cheapestJump([28, 94], 38) == [1, 2]\nassert solution.cheapestJump([97, 63, 67, 12, 10, 54], 6) == [1, 6]\nassert solution.cheapestJump([60, 71, 41], 61) == [1, 3]\nassert solution.cheapestJump([85, 90, 0], 57) == [1, 3]\nassert solution.cheapestJump([0, 50, 98, 5], 81) == [1, 4]\nassert solution.cheapestJump([92, 18, 49, 60, 91, 17, 35, 3, 22, 2], 42) == [1, 10]\nassert solution.cheapestJump([74, 65, 99, 41, 46, 56], 99) == [1, 6]\nassert solution.cheapestJump([45, 8, 90, 32, 89, 11, 12, 99, 2, 62], 21) == [1, 10]\nassert solution.cheapestJump([66, 100], 33) == [1, 2]\nassert solution.cheapestJump([88, 42, 92, 91, 42, 96, 0], 21) == [1, 7]\nassert solution.cheapestJump([88, 69, 81, 12, 10, 81, 68, 44, 55, 0], 40) == [1, 10]\nassert solution.cheapestJump([78, 57, 53, 50, 33, 20, 6, 86, 78, 30], 13) == [1, 10]\nassert solution.cheapestJump([88], 59) == [1]\nassert solution.cheapestJump([59, 87], 83) == [1, 2]\nassert solution.cheapestJump([96, 28, 24, 28, 34, 35, 63, 74], 24) == [1, 8]\nassert solution.cheapestJump([69, 15, 84, 13, 62], 29) == [1, 5]\nassert solution.cheapestJump([15, 19, 48, 83, 62], 70) == [1, 5]\nassert solution.cheapestJump([52, 25, 85, 49, 42, 30, 2], 59) == [1, 7]\nassert solution.cheapestJump([70, 43, 13, 48, 52, 8, 42, 39, 54, 51, 10], 89) == [1, 11]\nassert solution.cheapestJump([33, 31, 48, 97, 61, 40, 87, 25, 65, 87, 94], 4) == [1, 5, 8, 11]\nassert solution.cheapestJump([2, 29, 24, 97, 87, 18, 87, 90, 85, 23, 96], 24) == [1, 11]\nassert solution.cheapestJump([17, 62, 72, 30, 100], 85) == [1, 5]\nassert solution.cheapestJump([2, 34, 18, 91, 14, 18, 97, 0], 101) == [1, 8]\nassert solution.cheapestJump([37, 92, 92, 69, 95, 1], 4) == [1, 4, 6]\nassert solution.cheapestJump([36, 80, 4, 39], 43) == [1, 4]\nassert solution.cheapestJump([4], 77) == [1]\nassert solution.cheapestJump([89, 39, 74, 10, 98], 47) == [1, 5]\nassert solution.cheapestJump([11, 71, 97, 49, 99, 13, 47, 91, 36], 36) == [1, 9]\nassert solution.cheapestJump([11, 94, 82, 86, 86, 37, 59, 17, 2, 3], 69) == [1, 10]\nassert solution.cheapestJump([0, 34], 47) == [1, 2]\nassert solution.cheapestJump([81, 100, 2, 11, 67, 69, 63], 93) == [1, 7]\nassert solution.cheapestJump([48, 51, 68, 97, 25, 16, 51, 87, 97, 79], 76) == [1, 10]\nassert solution.cheapestJump([94, 60], 85) == [1, 2]\nassert solution.cheapestJump([38, 89, 20, 92, 71], 40) == [1, 5]\nassert solution.cheapestJump([35, 34, 66, 13, 49], 21) == [1, 5]\nassert solution.cheapestJump([27, 88, 41], 54) == [1, 3]\nassert solution.cheapestJump([27, 16, 46, 19, 27, 9], 82) == [1, 6]\nassert solution.cheapestJump([6, 33, 62, 59, 51, 41, 21, 5, 13, 17, 3], 63) == [1, 11]\nassert solution.cheapestJump([20, 74], 31) == [1, 2]\nassert solution.cheapestJump([49, 3, 38, 35, 34, 66, 12, 89, 48], 57) == [1, 9]\nassert solution.cheapestJump([62, 100, 70], 58) == [1, 3]\nassert solution.cheapestJump([37, 83, 68, 99, 23, 77], 101) == [1, 6]\nassert solution.cheapestJump([15, 31, 78, 72, 24, 62, 21, 30, 13], 43) == [1, 9]\nassert solution.cheapestJump([10, 20, 80, 27, 61, 71, 20, 47, 30, 51], 75) == [1, 10]\nassert solution.cheapestJump([91, 90], 34) == [1, 2]\nassert solution.cheapestJump([82, 62, 70, -1, 52, 4, 18, 40], 26) == [1, 8]\nassert solution.cheapestJump([66, 37, 70, 47, 92, 47], 70) == [1, 6]\nassert solution.cheapestJump([50, 24, 70, 91, 80, 77, -1, 35, 39], 22) == [1, 9]\nassert solution.cheapestJump([34, 97, 9, 44, 76, 56, 27, 77], 52) == [1, 8]\nassert solution.cheapestJump([87, 14, 65, 15, 82], 101) == [1, 5]\nassert solution.cheapestJump([37, 9], 101) == [1, 2]\nassert solution.cheapestJump([75, 49, 90, 90, 75, 14], 66) == [1, 6]\nassert solution.cheapestJump([38, 56, 57, 90, 76, 99, 12, 5], 55) == [1, 8]\nassert solution.cheapestJump([42, 8, 72, 24, 7, 80], 56) == [1, 6]\nassert solution.cheapestJump([5, 90, 16, 35, 9, 25], 100) == [1, 6]\nassert solution.cheapestJump([18], 94) == [1]\nassert solution.cheapestJump([95, 15], 20) == [1, 2]\nassert solution.cheapestJump([1], 29) == [1]\nassert solution.cheapestJump([70, 87, 41, 70, 78, 57, 17, 10, 29, 54, 76], 17) == [1, 11]\nassert solution.cheapestJump([33, 67, 61, 18, 32, 62, 86, 15, 50, 85], 86) == [1, 10]\nassert solution.cheapestJump([47, 64, 65, 68, 75, 63, 69, 13, 56, 74], 41) == [1, 10]",
  "inefficient_solution": "class Solution:\n    def cheapestJump(self, coins: List[int], maxJump: int) -> List[int]:\n        n = len(coins)\n        dp = [[0, []] for _ in range(n)]\n        dp[0] = [coins[1], [1]]\n        for i in range(1, n):\n            for j in range(i + 1, min(n, i + maxJump + 1)):\n                if coins[j] != -1:\n                    dp[i][0] = float('inf')\n                    dp[i][1] = []\n                    for k in range(1, maxJump + 1):\n                        if i + k == j and dp[i - k][0] + coins[j] < dp[i][0]:\n                            dp[i] = [dp[i - k][0] + coins[j], dp[i - k][1] + [j + 1]]\n        if dp[-1][0] == float('inf'):\n            return []\n        ans = []\n        s = dp[-1][0]\n        j = n - 1\n        while j >= 0:\n            ans.append(j + 1)\n            s -= coins[j]\n            for k in range(j - 1, -1, -1):\n                if k + maxJump + 1 >= j:\n                    break\n                if dp[k][0] + coins[j] == s:\n                    j = k\n                    break\n        return ans[::-1]",
  "is_python": true
}