{
  "problem_idx": 675,
  "task_name": "Cut Off Trees for Golf Event",
  "markdown_description": "\nYou are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix:\n\n\n* `0` means the cell cannot be walked through.\n* `1` represents an empty cell that can be walked through.\n* A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height.\n\n\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\n\n\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell).\n\n\nStarting from the point `(0, 0)`, return *the minimum steps you need to walk to cut off all the trees*. If you cannot cut off all the trees, return `-1`.\n\n\n**Note:** The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0675.Cut%20Off%20Trees%20for%20Golf%20Event/images/trees1.jpg)\n\n```\n\n**Input:** forest = [[1,2,3],[0,0,4],[7,6,5]]\n**Output:** 6\n**Explanation:** Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0675.Cut%20Off%20Trees%20for%20Golf%20Event/images/trees2.jpg)\n\n```\n\n**Input:** forest = [[1,2,3],[0,0,0],[7,6,5]]\n**Output:** -1\n**Explanation:** The trees in the bottom row cannot be accessed as the middle row is blocked.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** forest = [[2,3,4],[0,0,5],[8,7,6]]\n**Output:** 6\n**Explanation:** You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == forest.length`\n* `n == forest[i].length`\n* `1 <= m, n <= 50`\n* `0 <= forest[i][j] <= 109`\n* Heights of all trees are **distinct**.\n\n\n",
  "canonical_solution": "class Solution:\n    def cutOffTree(self, forest: List[List[int]]) -> int:\n        def f(i, j, x, y):\n            return abs(i - x) + abs(j - y)\n\n        def bfs(i, j, x, y):\n            q = [(f(i, j, x, y), i, j)]\n            dist = {i * n + j: 0}\n            while q:\n                _, i, j = heappop(q)\n                step = dist[i * n + j]\n                if (i, j) == (x, y):\n                    return step\n                for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:\n                    c, d = i + a, j + b\n                    if 0 <= c < m and 0 <= d < n and forest[c][d] > 0:\n                        if c * n + d not in dist or dist[c * n + d] > step + 1:\n                            dist[c * n + d] = step + 1\n                            heappush(q, (dist[c * n + d] + f(c, d, x, y), c, d))\n            return -1\n\n        m, n = len(forest), len(forest[0])\n        trees = [\n            (forest[i][j], i, j) for i in range(m) for j in range(n) if forest[i][j] > 1\n        ]\n        trees.sort()\n        i = j = 0\n        ans = 0\n        for _, x, y in trees:\n            t = bfs(i, j, x, y)\n            if t == -1:\n                return -1\n            ans += t\n            i, j = x, y\n        return ans\n",
  "test_case_generator": "\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random forest grid\n    m = random.randint(1, 6)\n    n = random.randint(1, 6)\n    forest = [[random.randint(0, 9) for _ in range(n)] for _ in range(m)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.cutOffTree(forest)\n    \n    return forest, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        forest, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.cutOffTree(forest) == expected_result\n        print(f\"forest = {forest}\")\n        print(f\"expected_result = {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.cutOffTree({forest}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.cutOffTree([[5, 7, 4, 7, 3], [8, 0, 5, 3, 8], [5, 0, 0, 2, 2]]) == 37\nassert solution.cutOffTree([[4, 6], [8, 8], [5, 0]]) == 8\nassert solution.cutOffTree([[7, 6, 4], [5, 4, 9], [0, 6, 3], [2, 1, 5]]) == 29\nassert solution.cutOffTree([[1, 5], [8, 9], [9, 6]]) == 8\nassert solution.cutOffTree([[2, 7, 9, 0, 4], [9, 4, 2, 0, 7]]) == -1\nassert solution.cutOffTree([[4, 9]]) == 1\nassert solution.cutOffTree([[5, 1], [5, 8], [2, 6], [8, 2], [4, 0], [7, 2]]) == 29\nassert solution.cutOffTree([[6, 7, 0]]) == 1\nassert solution.cutOffTree([[4, 7, 3, 6, 8, 0]]) == 12\nassert solution.cutOffTree([[7]]) == 0\nassert solution.cutOffTree([[7, 7], [4, 7], [1, 9], [8, 3], [2, 4], [0, 9]]) == 28\nassert solution.cutOffTree([[4, 1, 6]]) == 2\nassert solution.cutOffTree([[7, 7, 2, 1, 5]]) == 9\nassert solution.cutOffTree([[5, 9, 7, 6, 4]]) == 13\nassert solution.cutOffTree([[3, 4, 2, 9], [3, 3, 8, 6], [7, 3, 4, 1], [1, 5, 3, 8], [7, 9, 0, 6]]) == 49\nassert solution.cutOffTree([[8], [7], [8], [6]]) == 8\nassert solution.cutOffTree([[3, 9, 4, 0], [7, 3, 2, 9], [5, 8, 9, 4]]) == 26\nassert solution.cutOffTree([[4, 8, 2, 0], [3, 0, 3, 9], [1, 2, 1, 6], [6, 6, 6, 7], [2, 2, 3, 0], [1, 4, 1, 6]]) == 58\nassert solution.cutOffTree([[8, 8], [7, 0], [0, 7], [5, 8], [3, 3], [9, 9]]) == -1\nassert solution.cutOffTree([[5], [6]]) == 1\nassert solution.cutOffTree([[5, 9, 0, 0, 9, 7]]) == -1\nassert solution.cutOffTree([[8, 5, 9, 2, 8, 1]]) == 12\nassert solution.cutOffTree([[0, 9], [7, 2], [4, 1]]) == 7\nassert solution.cutOffTree([[7, 1], [6, 9], [5, 2], [8, 8]]) == 12\nassert solution.cutOffTree([[2, 3, 4, 0]]) == 2\nassert solution.cutOffTree([[7, 4, 7, 0, 2, 2], [8, 2, 7, 6, 1, 6], [8, 8, 1, 7, 7, 5], [1, 2, 6, 0, 7, 1]]) == 53\nassert solution.cutOffTree([[9, 6, 4, 5], [7, 7, 1, 3]]) == 14\nassert solution.cutOffTree([[5, 3, 0], [2, 4, 0]]) == 6\nassert solution.cutOffTree([[7, 2, 6, 2, 6], [9, 9, 2, 8, 9], [8, 9, 9, 8, 7], [4, 1, 0, 7, 2], [7, 3, 6, 2, 5], [4, 3, 0, 3, 9]]) == 93\nassert solution.cutOffTree([[7, 2, 2, 2, 9]]) == 10\nassert solution.cutOffTree([[1, 6, 3, 0, 3, 4], [1, 9, 3, 8, 2, 7], [0, 4, 1, 4, 2, 5], [2, 2, 5, 1, 0, 4], [1, 1, 4, 6, 9, 1], [6, 7, 2, 2, 4, 6]]) == 104\nassert solution.cutOffTree([[4, 5], [1, 4], [3, 3], [1, 3], [1, 9]]) == 15\nassert solution.cutOffTree([[6], [2], [7], [8], [6]]) == 9\nassert solution.cutOffTree([[4, 5, 8, 5], [2, 5, 0, 0], [1, 5, 2, 2]]) == 20\nassert solution.cutOffTree([[2, 5]]) == 1\nassert solution.cutOffTree([[9, 3, 0, 5], [1, 4, 9, 7], [1, 6, 0, 8], [3, 5, 4, 2]]) == 43\nassert solution.cutOffTree([[3, 6, 0, 8, 7, 8], [1, 1, 8, 1, 1, 4], [5, 5, 2, 7, 2, 6], [0, 7, 9, 5, 5, 1], [0, 4, 8, 2, 2, 5], [0, 7, 0, 9, 4, 5]]) == 96\nassert solution.cutOffTree([[9, 9], [0, 0], [5, 6], [9, 8], [8, 4], [8, 4]]) == -1\nassert solution.cutOffTree([[2, 0, 3], [8, 9, 8]]) == 10\nassert solution.cutOffTree([[0, 4, 4, 7, 1]]) == 3\nassert solution.cutOffTree([[8, 1, 1, 5], [0, 9, 4, 4]]) == 10\nassert solution.cutOffTree([[5, 7, 4], [0, 1, 5], [4, 9, 5], [8, 9, 4], [3, 2, 0]]) == 38\nassert solution.cutOffTree([[7, 7, 4]]) == 5\nassert solution.cutOffTree([[5], [2], [0], [4], [1], [5]]) == -1\nassert solution.cutOffTree([[2, 9, 0, 3], [1, 9, 4, 2], [4, 9, 1, 2], [1, 2, 4, 9], [7, 2, 7, 3], [9, 3, 1, 2]]) == 55\nassert solution.cutOffTree([[6, 5, 8, 4, 4, 5]]) == 18\nassert solution.cutOffTree([[4, 6, 6, 6], [1, 3, 5, 9], [0, 6, 7, 1]]) == 18\nassert solution.cutOffTree([[2, 6, 6, 8, 1, 2]]) == 11\nassert solution.cutOffTree([[8, 3, 0, 3], [9, 1, 4, 2], [1, 1, 9, 2]]) == 22\nassert solution.cutOffTree([[5, 9, 1], [5, 4, 8]]) == 9\nassert solution.cutOffTree([[7, 2, 9], [6, 0, 5], [4, 7, 4]]) == 18\nassert solution.cutOffTree([[6, 0, 2]]) == -1\nassert solution.cutOffTree([[6, 4, 1, 4, 1], [8, 8, 2, 0, 2]]) == 18\nassert solution.cutOffTree([[6, 2, 0, 3], [2, 7, 3, 2], [8, 5, 8, 7], [1, 9, 0, 1], [9, 3, 3, 0], [9, 0, 9, 7]]) == 49\nassert solution.cutOffTree([[2, 5, 4], [3, 1, 6], [9, 0, 5]]) == 12\nassert solution.cutOffTree([[8, 6, 6, 1, 5, 9], [4, 9, 8, 4, 5, 7], [8, 8, 5, 8, 2, 9], [4, 8, 8, 1, 8, 7], [5, 2, 8, 0, 6, 5]]) == 109\nassert solution.cutOffTree([[4], [8], [1]]) == 1\nassert solution.cutOffTree([[7], [1], [1], [8], [0]]) == 3\nassert solution.cutOffTree([[5, 4, 0, 3, 7, 1], [7, 3, 2, 6, 4, 9], [1, 8, 7, 7, 6, 2], [1, 3, 8, 0, 4, 6], [3, 5, 5, 9, 8, 6], [3, 3, 7, 8, 6, 1]]) == 95\nassert solution.cutOffTree([[4, 8, 1, 0, 8, 4]]) == -1\nassert solution.cutOffTree([[8, 7, 6, 1, 1, 3], [4, 9, 6, 7, 3, 1], [6, 2, 9, 7, 0, 4], [4, 7, 1, 6, 3, 7], [5, 0, 7, 7, 9, 4], [5, 4, 0, 5, 7, 9]]) == 114\nassert solution.cutOffTree([[8, 7], [5, 9], [8, 0], [9, 9], [5, 2]]) == 26\nassert solution.cutOffTree([[1], [4], [3]]) == 3\nassert solution.cutOffTree([[2, 2, 2, 5, 5, 9], [9, 8, 8, 5, 6, 1], [1, 6, 9, 0, 5, 3], [2, 0, 9, 8, 9, 9]]) == 52\nassert solution.cutOffTree([[3], [2], [5], [9], [2]]) == 11\nassert solution.cutOffTree([[4, 4, 3, 1], [0, 6, 5, 3]]) == 12\nassert solution.cutOffTree([[0, 2], [4, 7]]) == 4\nassert solution.cutOffTree([[6], [8], [1], [5], [2]]) == 9\nassert solution.cutOffTree([[6, 2, 9]]) == 4\nassert solution.cutOffTree([[0, 1, 4], [0, 8, 4], [4, 0, 9], [5, 6, 2], [7, 6, 6]]) == 28\nassert solution.cutOffTree([[5, 8, 8, 0, 2, 0], [7, 4, 3, 0, 3, 6], [6, 5, 4, 2, 7, 7], [7, 2, 3, 0, 1, 0], [6, 1, 6, 0, 6, 2]]) == 92\nassert solution.cutOffTree([[8, 6, 7], [0, 1, 2]]) == 8\nassert solution.cutOffTree([[8, 0]]) == 0\nassert solution.cutOffTree([[6, 1, 7, 5, 4, 8]]) == 13\nassert solution.cutOffTree([[0, 7], [0, 5], [1, 6], [9, 4], [4, 5], [4, 0]]) == 23\nassert solution.cutOffTree([[3], [1]]) == 0\nassert solution.cutOffTree([[4, 6], [6, 0], [6, 5], [2, 1], [4, 6], [0, 8]]) == 24\nassert solution.cutOffTree([[6, 3, 2, 6, 4, 7], [9, 0, 2, 8, 4, 6], [6, 7, 1, 8, 7, 0], [2, 2, 3, 5, 6, 5], [3, 6, 7, 2, 4, 0], [3, 3, 2, 0, 0, 3]]) == -1\nassert solution.cutOffTree([[3, 0, 7], [9, 5, 7], [1, 0, 1], [4, 9, 1], [6, 7, 1], [2, 8, 4]]) == 46\nassert solution.cutOffTree([[0, 0, 6, 8]]) == -1\nassert solution.cutOffTree([[3, 7, 9], [2, 3, 4], [9, 1, 3], [9, 4, 0]]) == 19\nassert solution.cutOffTree([[9, 6, 2, 6, 1, 5], [9, 1, 4, 2, 8, 7], [9, 5, 5, 2, 0, 4]]) == 36\nassert solution.cutOffTree([[1, 2, 0, 9, 9, 3], [6, 3, 3, 3, 9, 4]]) == 27\nassert solution.cutOffTree([[5, 5, 1, 8], [2, 0, 5, 4], [3, 5, 0, 1], [8, 3, 7, 5], [5, 6, 4, 2], [6, 9, 7, 6]]) == 70\nassert solution.cutOffTree([[2, 6], [5, 0], [0, 2], [4, 2]]) == -1\nassert solution.cutOffTree([[4, 0], [4, 5], [4, 2], [8, 5]]) == 13\nassert solution.cutOffTree([[0, 6, 4, 6], [0, 4, 4, 3], [4, 2, 6, 0], [2, 1, 7, 9]]) == 28\nassert solution.cutOffTree([[4, 2, 2, 7], [5, 1, 2, 5]]) == 11\nassert solution.cutOffTree([[9], [3], [0], [9]]) == -1\nassert solution.cutOffTree([[0, 2, 5, 9, 7, 4], [8, 5, 9, 0, 1, 0], [7, 0, 4, 6, 9, 8], [9, 7, 9, 9, 8, 3], [4, 9, 6, 5, 3, 2]]) == 89\nassert solution.cutOffTree([[9, 6, 1, 1, 2]]) == 8\nassert solution.cutOffTree([[0, 6], [0, 5], [7, 6], [2, 6]]) == 14\nassert solution.cutOffTree([[4, 1, 2], [1, 3, 8], [7, 4, 1], [7, 8, 5], [0, 5, 2]]) == 30\nassert solution.cutOffTree([[1, 0, 5, 4], [7, 1, 4, 1], [4, 6, 2, 5], [9, 4, 9, 4], [1, 8, 6, 6], [6, 2, 2, 0]]) == 53\nassert solution.cutOffTree([[3], [1], [7], [5], [0]]) == 4\nassert solution.cutOffTree([[1, 6, 4, 1], [8, 9, 7, 1], [0, 6, 7, 0]]) == 12\nassert solution.cutOffTree([[5, 7, 4, 6]]) == 9\nassert solution.cutOffTree([[7], [3], [3]]) == 4\nassert solution.cutOffTree([[0, 4, 5, 1, 1], [4, 3, 0, 3, 1], [4, 2, 0, 0, 5]]) == 22\nassert solution.cutOffTree([[7], [0], [4], [0], [7]]) == -1",
  "inefficient_solution": "class Solution:\n    def cutOffTree(self, forest):\n        m, n = len(forest), len(forest[0])\n        trees = []\n        for i in range(m):\n            for j in range(n):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        trees.sort()\n\n        ans = 0\n        for _, x, y in trees:\n            forest1 = [row[:] for row in forest]\n            ans1 = self.dfs(forest1, x, y)\n            if ans1 == -1:\n                return -1\n            ans += ans1\n            forest = [row[:] for row in forest1]\n\n        return ans\n\n    def dfs(self, forest, x, y):\n        m, n = len(forest), len(forest[0])\n        visited = [[0]*n for _ in range(m)]\n        q = [(x, y, 0)]\n        visited[x][y] = 1\n        while q:\n            i, j, step = q.pop(0)\n            if forest[i][j] > 1:\n                value = forest[i][j]\n                forest[i][j] = 1\n                return step\n            for a, b in [[0, -1], [0, 1], [-1, 0], [1, 0]]:\n                c, d = i + a, j + b\n                if 0 <= c < m and 0 <= d < n and forest[c][d] > 0 and not visited[c][d]:\n                    visited[c][d] = 1\n                    q.append((c, d, step + 1))\n        return -1",
  "is_python": true
}