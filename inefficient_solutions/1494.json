{
  "problem_idx": 1494,
  "task_name": "Parallel Courses II",
  "markdown_description": "\nYou are given an integer `n`, which indicates that there are `n` courses labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [prevCoursei, nextCoursei]`, representing a prerequisite relationship between course `prevCoursei` and course `nextCoursei`: course `prevCoursei` has to be taken before course `nextCoursei`. Also, you are given the integer `k`.\n\n\nIn one semester, you can take **at most** `k` courses as long as you have taken all the prerequisites in the **previous** semesters for the courses you are taking.\n\n\nReturn *the **minimum** number of semesters needed to take all courses*. The testcases will be generated such that it is possible to take every course.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1494.Parallel%20Courses%20II/images/leetcode_parallel_courses_1.png)\n\n```\n\n**Input:** n = 4, relations = [[2,1],[3,1],[1,4]], k = 2\n**Output:** 3\n**Explanation:** The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1400-1499/1494.Parallel%20Courses%20II/images/leetcode_parallel_courses_2.png)\n\n```\n\n**Input:** n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2\n**Output:** 4\n**Explanation:** The figure above represents the given graph.\nIn the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 15`\n* `1 <= k <= n`\n* `0 <= relations.length <= n * (n-1) / 2`\n* `relations[i].length == 2`\n* `1 <= prevCoursei, nextCoursei <= n`\n* `prevCoursei != nextCoursei`\n* All the pairs `[prevCoursei, nextCoursei]` are **unique**.\n* The given graph is a directed acyclic graph.\n\n\n",
  "canonical_solution": "class Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        d = [0] * (n + 1)\n        for x, y in relations:\n            d[y] |= 1 << x\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            cur, t = q.popleft()\n            if cur == (1 << (n + 1)) - 2:\n                return t\n            nxt = 0\n            for i in range(1, n + 1):\n                if (cur & d[i]) == d[i]:\n                    nxt |= 1 << i\n            nxt ^= cur\n            if nxt.bit_count() <= k:\n                if (nxt | cur) not in vis:\n                    vis.add(nxt | cur)\n                    q.append((nxt | cur, t + 1))\n            else:\n                x = nxt\n                while nxt:\n                    if nxt.bit_count() == k and (nxt | cur) not in vis:\n                        vis.add(nxt | cur)\n                        q.append((nxt | cur, t + 1))\n                    nxt = (nxt - 1) & x\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\nfrom typing import List\n\nclass Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        d = [0] * (n + 1)\n        for x, y in relations:\n            d[y] |= 1 << x\n        q = deque([(0, 0)])\n        vis = {0}\n        while q:\n            cur, t = q.popleft()\n            if cur == (1 << (n + 1)) - 2:\n                return t\n            nxt = 0\n            for i in range(1, n + 1):\n                if (cur & d[i]) == d[i]:\n                    nxt |= 1 << i\n            nxt ^= cur\n            if nxt.bit_count() <= k:\n                if (nxt | cur) not in vis:\n                    vis.add(nxt | cur)\n                    q.append((nxt | cur, t + 1))\n            else:\n                x = nxt\n                while nxt:\n                    if nxt.bit_count() == k and (nxt | cur) not in vis:\n                        vis.add(nxt | cur)\n                        q.append((nxt | cur, t + 1))\n                    nxt = (nxt - 1) & x\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random number of courses\n    n = random.randint(1, 15)\n    \n    # Generate random relations\n    num_relations = random.randint(0, n * (n - 1) // 2)\n    relations = []\n    for _ in range(num_relations):\n        prev_course = random.randint(1, n)\n        next_course = random.randint(1, n)\n        while prev_course == next_course:\n            next_course = random.randint(1, n)\n        relations.append([prev_course, next_course])\n    \n    # Generate random value of k\n    k = random.randint(1, n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minNumberOfSemesters(n, relations, k)\n\n    return n, relations, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, relations, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minNumberOfSemesters(n, relations, k) == expected_result\n        print(f\"assert solution.minNumberOfSemesters({n}, {relations}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minNumberOfSemesters({n}, {relations}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minNumberOfSemesters(14, [[12, 4], [5, 10], [5, 8], [4, 9], [12, 8], [8, 6], [5, 12], [8, 11], [1, 7], [2, 1], [13, 3], [3, 8], [6, 7], [7, 11], [1, 14], [12, 11], [14, 6], [12, 9], [9, 10], [5, 4], [1, 3], [7, 14], [13, 6], [2, 7], [4, 3], [2, 13], [14, 13], [6, 2], [9, 12], [10, 2], [13, 14], [14, 10], [6, 10], [13, 5], [6, 12], [3, 7], [14, 8], [14, 12], [12, 1], [7, 2], [11, 13], [6, 4], [1, 5]], 1) == None\nassert solution.minNumberOfSemesters(4, [], 2) == 2\nassert solution.minNumberOfSemesters(14, [[6, 8], [9, 14], [12, 9], [11, 8], [12, 11], [3, 11], [10, 13], [6, 11], [2, 11], [8, 5], [3, 8], [4, 1], [7, 9], [3, 8], [1, 14], [9, 4], [8, 6], [9, 3], [12, 9], [7, 6], [1, 2], [13, 7]], 9) == None\nassert solution.minNumberOfSemesters(15, [[5, 8], [2, 11], [14, 4], [13, 3], [4, 10], [6, 12], [13, 5], [14, 6], [1, 2], [5, 14], [5, 7], [1, 2], [9, 10], [9, 11], [9, 4], [13, 3], [4, 8], [15, 7], [8, 1], [9, 8], [7, 10], [14, 11], [13, 8], [3, 5], [10, 4], [11, 7], [10, 14], [9, 1], [9, 3], [5, 12], [1, 8], [1, 15], [15, 4], [12, 1], [15, 1], [4, 2], [7, 6], [3, 9], [2, 14], [15, 12], [7, 12], [14, 8], [13, 11], [14, 6], [6, 15], [11, 15], [5, 11], [12, 2], [5, 1], [8, 2], [15, 12], [2, 14], [7, 3], [9, 7], [6, 14], [4, 6], [9, 7], [11, 2], [11, 3], [14, 3], [7, 15], [3, 4], [4, 5], [5, 11], [11, 9]], 6) == None\nassert solution.minNumberOfSemesters(12, [[6, 9], [6, 4], [4, 7], [8, 12], [10, 12], [9, 1], [6, 10], [10, 7], [6, 7], [6, 7], [11, 2], [4, 2], [12, 6], [7, 8], [6, 10], [11, 7], [9, 4], [3, 8], [11, 1], [7, 10], [5, 9], [11, 2], [7, 4], [6, 7]], 8) == None\nassert solution.minNumberOfSemesters(6, [[2, 1], [3, 1], [6, 3], [1, 4], [6, 2], [2, 5], [5, 2], [5, 4], [2, 4], [4, 3], [6, 5], [5, 2]], 2) == None\nassert solution.minNumberOfSemesters(3, [], 3) == 1\nassert solution.minNumberOfSemesters(13, [[5, 6], [3, 6], [2, 3], [1, 3], [12, 8], [4, 12], [7, 11], [11, 6], [6, 9], [10, 6], [9, 13], [3, 12], [4, 10], [4, 2], [10, 11], [13, 5], [4, 1], [4, 5], [6, 10], [7, 8], [13, 10], [3, 1], [9, 13], [1, 8], [1, 10], [6, 2], [2, 5], [12, 5], [8, 1], [7, 4], [7, 11], [4, 13], [2, 6], [8, 7], [2, 13], [12, 13], [1, 5], [7, 9], [2, 3], [13, 2], [11, 10], [2, 8], [11, 4], [3, 1], [9, 3], [11, 1], [5, 6], [13, 5], [7, 8], [11, 1], [11, 13], [4, 6], [9, 4], [7, 8], [4, 9], [8, 10]], 5) == None\nassert solution.minNumberOfSemesters(4, [], 4) == 1\nassert solution.minNumberOfSemesters(9, [[5, 9], [8, 7], [9, 3], [2, 5], [1, 3], [9, 1], [5, 3], [3, 7], [8, 2], [7, 9], [8, 7], [1, 3], [3, 8], [8, 6], [2, 1], [5, 1], [6, 8], [4, 6], [1, 9], [5, 6]], 4) == None\nassert solution.minNumberOfSemesters(5, [[3, 2], [4, 3], [3, 4], [4, 1], [4, 2], [1, 4]], 1) == None\nassert solution.minNumberOfSemesters(10, [[7, 9], [5, 7], [3, 5], [3, 1], [7, 1], [4, 1], [8, 7], [8, 5], [5, 2], [1, 3], [6, 5], [3, 9], [7, 5], [7, 3], [2, 7], [7, 2], [10, 4], [10, 8], [7, 4], [8, 1], [3, 4], [1, 2], [4, 10], [1, 7], [10, 4], [1, 10], [6, 10], [7, 4], [8, 7], [3, 7], [1, 10]], 1) == None\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(14, [[6, 1], [11, 2], [12, 4], [7, 10], [10, 5], [10, 5], [13, 3], [7, 4], [3, 12], [13, 8], [3, 1], [6, 12], [13, 14], [6, 9], [11, 9], [3, 6], [3, 9], [6, 8], [4, 7], [7, 4], [5, 7], [1, 6], [14, 13], [8, 2], [11, 10], [9, 12], [10, 4], [10, 14]], 14) == None\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(12, [[10, 5], [2, 12], [9, 3], [5, 10], [4, 9], [5, 11], [8, 11], [10, 4], [8, 2], [6, 11], [9, 8], [7, 2], [4, 2], [1, 6], [6, 5], [1, 6], [9, 2], [4, 11], [10, 8], [1, 10], [4, 12], [11, 12], [6, 1], [8, 6], [12, 3], [2, 12], [4, 12], [11, 5], [5, 6], [11, 10], [3, 11], [2, 7], [7, 1], [9, 1], [12, 4], [8, 2], [7, 9], [8, 6], [11, 9], [3, 10], [11, 2], [4, 10], [4, 8], [9, 8], [2, 12], [7, 5], [10, 6], [5, 10], [3, 8], [4, 8], [12, 9], [6, 5], [9, 1], [5, 3], [7, 5]], 3) == None\nassert solution.minNumberOfSemesters(3, [[1, 3]], 1) == 3\nassert solution.minNumberOfSemesters(8, [[3, 4], [8, 1], [3, 1], [5, 6], [7, 8], [2, 4], [5, 7], [6, 5], [3, 5], [5, 7]], 8) == None\nassert solution.minNumberOfSemesters(14, [[9, 8], [6, 2], [4, 6], [2, 1], [1, 6], [4, 8], [12, 14], [5, 6], [5, 1], [8, 13], [4, 6], [14, 10], [5, 9], [11, 10], [9, 3], [10, 11], [14, 11], [14, 4], [6, 9], [10, 11], [6, 10], [14, 6], [13, 11], [1, 13], [3, 9], [12, 1], [12, 7], [10, 12], [7, 6], [12, 9], [11, 5], [14, 2], [2, 7], [13, 11], [7, 11], [10, 11], [14, 1], [6, 3], [12, 3], [10, 14], [8, 13], [6, 7], [6, 10], [6, 14], [7, 6], [13, 7], [4, 1], [6, 14], [14, 10], [6, 1], [10, 1], [7, 13], [2, 1], [13, 10], [7, 14], [10, 4], [4, 14], [14, 3], [9, 7], [9, 6], [3, 14], [5, 7], [12, 1], [9, 13], [11, 2], [14, 2], [8, 14]], 13) == None\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(12, [[11, 4], [10, 2], [10, 9], [2, 9], [5, 12], [11, 6], [7, 9], [6, 4]], 2) == 6\nassert solution.minNumberOfSemesters(3, [], 1) == 3\nassert solution.minNumberOfSemesters(13, [[4, 7], [8, 3], [3, 2], [8, 12], [3, 13], [6, 13], [9, 5], [8, 5], [3, 2], [9, 11], [7, 5], [6, 11], [13, 7], [4, 12], [3, 13], [3, 2], [4, 1], [4, 12], [9, 5], [3, 5], [12, 4], [11, 9], [8, 4], [1, 8], [8, 3], [6, 10], [1, 4], [9, 11], [5, 2], [10, 13], [7, 5], [12, 9], [11, 13], [4, 10], [8, 6], [11, 13], [8, 3], [12, 3], [8, 13], [5, 1], [10, 7]], 8) == None\nassert solution.minNumberOfSemesters(13, [[12, 9], [10, 13], [10, 1], [1, 10], [10, 4], [5, 12], [1, 3], [4, 8], [6, 8], [2, 6], [11, 1], [9, 6], [12, 13], [10, 13], [7, 10], [1, 12], [9, 12], [8, 13], [2, 9], [12, 13], [8, 5], [2, 1], [13, 2], [10, 7], [6, 7], [9, 12], [11, 9], [3, 4], [9, 12], [2, 6], [1, 12], [8, 1], [6, 7], [13, 5], [12, 6], [6, 9]], 10) == None\nassert solution.minNumberOfSemesters(10, [[1, 3], [3, 7], [2, 7], [7, 4]], 9) == 4\nassert solution.minNumberOfSemesters(14, [[4, 1], [7, 3], [8, 11], [4, 8], [1, 2], [5, 11]], 5) == 3\nassert solution.minNumberOfSemesters(15, [[15, 14], [4, 3], [14, 3], [2, 11], [5, 10], [6, 14], [10, 14], [8, 13], [1, 14], [10, 8], [7, 5], [6, 11], [11, 2], [7, 6], [7, 12], [14, 10], [11, 9], [7, 9], [13, 15], [6, 3], [2, 15], [9, 1], [1, 6], [7, 9], [2, 5], [11, 5], [6, 2], [7, 5], [5, 15], [3, 10], [12, 10], [7, 15], [11, 10], [11, 5], [3, 4], [14, 11], [13, 5], [3, 13], [11, 6], [10, 2], [7, 12], [10, 9], [5, 9], [7, 9], [8, 3], [3, 4], [9, 14], [15, 14], [4, 15], [4, 14], [14, 9], [14, 5], [8, 1], [3, 1], [10, 9], [10, 4], [13, 10], [1, 12], [6, 1], [4, 14], [1, 13], [9, 13], [3, 9], [4, 2], [3, 13], [10, 6], [8, 12], [14, 5], [6, 2], [2, 9], [11, 8], [15, 12], [2, 15], [4, 11], [3, 5], [12, 15], [4, 12], [13, 3], [13, 10], [10, 6], [13, 14], [1, 6], [6, 10], [8, 5], [4, 10], [13, 2], [8, 12], [3, 6], [8, 6], [13, 8], [11, 14], [1, 4]], 13) == None\nassert solution.minNumberOfSemesters(15, [[5, 10], [8, 14], [11, 3], [8, 10], [13, 4], [15, 4], [6, 14], [2, 9], [13, 1], [12, 5], [9, 4], [1, 11], [3, 14], [9, 6], [3, 8], [6, 9], [11, 5], [4, 10], [10, 12], [10, 11], [12, 8], [4, 14]], 10) == None\nassert solution.minNumberOfSemesters(11, [[6, 3], [4, 7], [2, 3], [6, 7], [8, 9], [1, 4], [2, 11], [1, 2]], 11) == 3\nassert solution.minNumberOfSemesters(14, [[13, 5], [4, 7], [4, 12], [7, 6], [5, 12], [5, 4], [10, 2], [11, 3], [12, 3], [11, 3], [3, 4], [9, 12], [9, 4], [11, 7], [5, 10], [3, 8], [5, 2], [2, 10], [14, 13], [4, 5], [7, 4], [13, 7], [1, 6], [7, 12], [14, 11], [2, 11], [10, 13], [4, 11], [1, 3], [9, 4], [4, 7], [4, 11], [7, 1], [8, 7], [11, 5], [1, 5], [4, 13], [10, 2], [7, 14], [11, 10], [1, 4]], 7) == None\nassert solution.minNumberOfSemesters(7, [[4, 3], [7, 2], [2, 4], [2, 3], [4, 5], [7, 1], [2, 4], [6, 5], [4, 3], [2, 6], [7, 4], [1, 4], [5, 3], [1, 4], [7, 4], [6, 4], [6, 7]], 3) == None\nassert solution.minNumberOfSemesters(10, [[2, 4], [2, 6], [8, 5], [7, 3], [4, 6], [6, 2], [6, 7], [3, 6], [5, 8], [3, 5], [2, 6], [8, 1], [7, 8]], 5) == None\nassert solution.minNumberOfSemesters(9, [[9, 8], [2, 8], [7, 2], [6, 3], [9, 4], [3, 6], [7, 2], [6, 5], [1, 7], [7, 3], [8, 7], [9, 2], [1, 5], [6, 7], [4, 3], [8, 5]], 8) == None\nassert solution.minNumberOfSemesters(9, [[8, 9]], 2) == 5\nassert solution.minNumberOfSemesters(15, [[5, 8], [4, 5], [11, 13], [6, 5], [14, 10], [10, 6], [5, 4], [10, 12], [10, 12], [2, 13], [12, 14], [3, 8], [7, 2], [8, 7], [2, 1], [11, 2], [9, 4], [5, 1], [4, 8], [13, 9], [6, 11], [3, 6], [13, 14], [8, 6], [11, 7], [12, 7], [10, 3], [14, 11], [5, 3], [9, 2], [14, 2], [6, 10], [14, 7], [7, 11], [6, 12], [5, 6], [14, 2], [14, 10], [4, 1], [10, 7], [6, 11], [13, 12], [5, 6], [5, 11], [11, 5], [1, 6], [4, 8], [9, 2], [14, 3], [5, 10], [4, 10], [4, 14], [2, 7], [7, 14], [5, 8], [4, 7], [10, 4], [4, 13], [10, 9], [12, 2], [15, 5], [2, 3], [12, 10], [14, 4], [11, 8], [2, 14], [13, 9], [15, 1], [8, 3], [10, 13], [3, 2], [6, 13], [5, 7], [7, 2], [15, 3], [8, 2], [9, 10], [15, 5], [6, 14], [1, 13], [2, 1], [13, 15], [8, 1], [1, 8], [5, 3], [4, 9], [8, 13], [15, 12], [5, 13], [3, 2], [12, 4], [6, 12], [7, 6], [9, 13]], 9) == None\nassert solution.minNumberOfSemesters(14, [[2, 11], [1, 13], [5, 13], [1, 13], [10, 9], [8, 1], [5, 6], [1, 4], [12, 2], [8, 11], [1, 11], [9, 7], [9, 5], [10, 5], [10, 3], [13, 6], [9, 3], [2, 9], [7, 9], [13, 9], [1, 12], [9, 3], [11, 9], [1, 12], [9, 8], [11, 10], [11, 3], [4, 2], [4, 2], [8, 7], [8, 12], [9, 13], [11, 4], [2, 11], [12, 8], [14, 5], [5, 3], [12, 4], [6, 1], [2, 4], [10, 7], [3, 8], [5, 11]], 3) == None\nassert solution.minNumberOfSemesters(8, [[7, 3], [7, 4], [5, 8], [1, 3], [1, 7], [8, 2], [4, 3]], 8) == 4\nassert solution.minNumberOfSemesters(3, [], 2) == 2\nassert solution.minNumberOfSemesters(8, [], 8) == 1\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(13, [[6, 12], [6, 10], [7, 5], [7, 11]], 12) == 2\nassert solution.minNumberOfSemesters(7, [[7, 4], [7, 4], [1, 2], [2, 3], [7, 2], [2, 5], [2, 7], [5, 6], [4, 3], [6, 1], [2, 3], [2, 1], [1, 5], [2, 5], [7, 4], [2, 4], [4, 7], [2, 1]], 2) == None\nassert solution.minNumberOfSemesters(5, [[5, 3], [4, 2], [2, 1], [3, 1], [4, 5]], 4) == 4\nassert solution.minNumberOfSemesters(8, [[8, 7], [6, 5], [8, 3], [8, 1]], 2) == 4\nassert solution.minNumberOfSemesters(3, [], 2) == 2\nassert solution.minNumberOfSemesters(13, [[13, 8], [6, 11], [2, 13], [10, 6], [4, 8], [12, 2], [2, 1], [3, 1], [7, 5], [5, 1], [9, 3], [8, 10], [6, 5], [9, 7], [9, 5], [8, 7], [10, 13], [9, 13], [6, 5], [11, 8], [9, 8], [7, 1], [2, 1], [8, 10], [9, 2], [13, 4], [3, 8], [7, 12], [12, 3], [9, 10], [3, 2], [2, 1], [6, 4], [13, 11], [5, 8], [7, 10], [8, 11], [9, 2], [4, 1], [11, 3], [13, 5], [2, 9], [1, 8], [6, 10], [4, 6], [8, 6], [5, 11], [9, 1], [1, 6], [9, 4], [8, 9], [6, 12], [13, 6], [11, 2]], 9) == None\nassert solution.minNumberOfSemesters(10, [[6, 4], [1, 10], [10, 9], [3, 1], [1, 8], [9, 2], [6, 5], [6, 10], [10, 5], [5, 2], [9, 3], [10, 6], [2, 7], [6, 8], [1, 3], [6, 4], [10, 7], [4, 7], [6, 3], [5, 1], [2, 3], [8, 4], [3, 9], [1, 4], [2, 7], [6, 10], [2, 7], [3, 1], [9, 4], [10, 1], [1, 6], [5, 6], [9, 8], [7, 10], [1, 9], [10, 4], [6, 1], [4, 1], [1, 4]], 2) == None\nassert solution.minNumberOfSemesters(14, [[12, 4], [6, 12], [13, 2], [13, 2], [4, 3], [13, 3], [7, 5], [10, 5], [14, 1], [14, 13], [2, 8], [4, 10], [4, 11], [7, 13], [6, 3], [7, 3], [12, 6], [6, 1], [6, 4], [10, 8], [13, 3]], 3) == None\nassert solution.minNumberOfSemesters(10, [[1, 10], [1, 5], [3, 10], [7, 2], [7, 5], [9, 8], [7, 10], [6, 7], [5, 8], [5, 8], [1, 5], [6, 4]], 6) == 4\nassert solution.minNumberOfSemesters(5, [[5, 1], [1, 5]], 1) == None\nassert solution.minNumberOfSemesters(12, [[7, 8], [11, 7], [12, 5], [8, 5], [8, 11], [11, 10], [2, 10], [9, 6], [5, 7], [4, 5], [4, 2], [9, 8], [2, 4], [6, 2], [12, 11], [7, 4], [5, 3], [3, 8], [3, 4], [6, 12], [1, 6], [10, 4], [2, 1], [5, 1], [3, 9], [8, 10], [12, 7], [5, 10], [7, 8], [4, 8], [12, 10], [2, 1], [3, 11], [9, 1], [3, 12], [11, 8], [6, 3], [6, 4], [7, 9], [4, 7]], 5) == None\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(8, [[3, 2], [2, 5], [4, 8], [3, 5], [2, 5], [4, 1], [7, 3], [3, 7], [6, 2], [7, 4], [4, 2], [1, 8], [6, 8], [1, 7]], 5) == None\nassert solution.minNumberOfSemesters(8, [[2, 6], [6, 3], [4, 8], [3, 6], [3, 7], [7, 5], [2, 4], [2, 8], [5, 3]], 6) == None\nassert solution.minNumberOfSemesters(13, [[13, 1], [7, 1], [6, 5], [11, 1], [2, 11], [5, 10], [5, 4], [9, 4], [1, 2], [9, 7], [9, 2], [11, 4], [1, 2], [13, 9], [4, 7], [2, 10], [12, 2], [13, 8], [7, 2], [2, 4], [6, 2], [12, 11], [1, 8], [7, 13], [10, 6], [12, 4], [11, 1], [4, 12], [6, 8], [12, 9], [6, 4], [4, 2], [7, 8], [11, 9], [2, 6], [6, 13], [12, 1], [4, 3], [3, 8], [2, 12], [2, 7], [7, 10], [4, 1], [5, 8], [1, 3], [5, 1], [10, 1], [8, 5], [10, 3], [5, 1], [2, 8], [12, 4], [13, 12], [7, 2], [1, 5], [2, 11], [7, 5], [6, 13]], 6) == None\nassert solution.minNumberOfSemesters(11, [[4, 9], [7, 4], [9, 6], [5, 3], [3, 11], [9, 3], [7, 2], [5, 11], [6, 11], [8, 6], [7, 5], [1, 6], [3, 2], [2, 4], [10, 2], [4, 11], [5, 1], [10, 2], [2, 10], [9, 7], [9, 1], [7, 5], [2, 9], [11, 10], [2, 11], [7, 11], [4, 11], [4, 5], [4, 6], [8, 9], [4, 1], [3, 4], [5, 10], [8, 11], [1, 7], [8, 2], [10, 6], [3, 9], [7, 11], [5, 2], [3, 11]], 11) == None\nassert solution.minNumberOfSemesters(3, [[2, 3], [2, 1], [3, 1]], 3) == 3\nassert solution.minNumberOfSemesters(15, [[12, 10], [7, 5], [10, 5], [8, 4], [14, 7], [13, 2], [15, 5], [1, 11], [3, 2], [10, 6], [14, 15], [5, 2], [13, 4], [15, 13], [9, 1], [14, 12], [15, 9], [2, 4], [11, 5], [3, 5], [10, 14], [12, 9], [7, 11], [9, 5], [9, 8], [5, 1], [1, 4], [9, 5], [15, 14], [13, 5], [12, 13], [7, 6], [5, 13], [1, 14], [6, 10], [6, 5], [13, 4], [8, 11], [15, 14], [13, 14], [15, 6], [13, 8], [8, 12], [9, 1], [14, 1], [8, 12], [3, 10], [5, 8], [3, 1], [5, 15], [8, 7], [10, 2], [14, 5], [7, 10], [3, 7], [3, 15], [5, 2], [14, 7], [5, 4], [1, 5], [8, 14], [10, 11], [6, 15], [6, 8], [6, 8], [15, 8], [2, 8], [10, 2], [13, 9], [9, 12], [6, 8], [5, 13], [4, 1], [8, 7], [13, 5], [9, 14], [11, 5], [3, 12], [13, 15], [2, 9], [2, 13], [12, 5], [11, 14], [13, 9], [9, 5], [8, 9], [2, 9]], 14) == None\nassert solution.minNumberOfSemesters(15, [[15, 4], [3, 7], [9, 3], [5, 10], [12, 10], [15, 14], [3, 14], [2, 11], [4, 14], [9, 12], [1, 9], [8, 4], [13, 3], [15, 9], [3, 5], [10, 3], [9, 10], [3, 14], [15, 14], [7, 1], [3, 10], [6, 2], [8, 4], [14, 10], [13, 4]], 3) == None\nassert solution.minNumberOfSemesters(2, [], 1) == 2\nassert solution.minNumberOfSemesters(2, [], 2) == 1\nassert solution.minNumberOfSemesters(15, [[6, 3], [9, 15], [12, 4], [7, 13], [3, 13], [1, 9], [11, 8], [7, 14], [1, 7], [6, 1], [10, 13], [14, 4], [4, 6], [2, 8], [8, 6], [13, 12], [10, 1], [1, 7], [7, 4], [13, 12], [10, 1], [5, 7], [9, 12], [5, 7], [13, 4], [8, 15], [7, 15], [7, 11], [7, 10], [10, 11], [1, 6], [13, 9], [3, 13], [4, 6], [15, 9], [8, 13], [12, 1], [1, 11], [1, 13], [11, 6], [7, 5], [15, 8], [7, 15], [15, 6], [15, 5], [9, 6], [7, 12], [14, 4], [5, 7], [5, 3], [3, 8], [11, 9], [15, 14], [2, 5], [10, 7], [8, 4], [4, 9], [8, 7], [10, 15], [14, 10], [1, 8], [7, 1], [13, 15], [8, 7], [6, 14]], 10) == None\nassert solution.minNumberOfSemesters(2, [[2, 1]], 2) == 2\nassert solution.minNumberOfSemesters(8, [[3, 1], [5, 4], [4, 7], [5, 4], [4, 8], [4, 8], [2, 1], [1, 8], [4, 1], [1, 5], [8, 4], [8, 1], [6, 4], [5, 3], [6, 5], [3, 8], [2, 8], [7, 3], [2, 5], [1, 5]], 1) == None\nassert solution.minNumberOfSemesters(11, [[5, 3], [9, 3], [3, 5], [2, 10], [2, 5], [5, 7], [1, 5], [1, 8], [11, 4]], 7) == None\nassert solution.minNumberOfSemesters(10, [[5, 10], [1, 7], [2, 8], [3, 7], [2, 7], [6, 9], [5, 7], [3, 1], [3, 5], [4, 6], [7, 9], [7, 1], [10, 1], [1, 6], [2, 9], [8, 9], [3, 7], [10, 9], [3, 6], [1, 5], [6, 8], [1, 9], [10, 5], [7, 4], [6, 2], [8, 6], [8, 1], [3, 8], [6, 8], [2, 9], [5, 1], [6, 1], [3, 4]], 10) == None\nassert solution.minNumberOfSemesters(6, [[4, 6], [2, 6], [3, 1], [1, 3], [3, 5]], 5) == None\nassert solution.minNumberOfSemesters(14, [[8, 4], [4, 2], [7, 9], [6, 3], [4, 10], [14, 1], [14, 4], [2, 3], [13, 14], [9, 2], [10, 1], [9, 10], [1, 3], [2, 7], [9, 13], [13, 2], [14, 2], [3, 7], [3, 13], [6, 8], [13, 1], [2, 3], [6, 8], [12, 11], [10, 3], [13, 4], [6, 8], [2, 1], [7, 12], [11, 8], [14, 7], [6, 7], [8, 7], [9, 14], [6, 12], [1, 13], [5, 13], [12, 9]], 12) == None\nassert solution.minNumberOfSemesters(8, [[6, 2], [5, 2], [2, 5], [8, 5]], 2) == None\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(15, [[8, 13], [2, 4], [8, 15], [6, 15], [3, 14], [15, 2], [8, 7], [6, 8], [14, 1], [3, 6], [12, 13], [8, 15], [11, 8], [10, 6], [10, 15], [6, 13], [2, 9], [12, 2], [14, 10], [7, 13], [4, 13], [4, 15], [11, 8], [4, 5], [9, 7], [1, 7], [10, 9], [10, 2], [11, 4], [5, 6], [8, 1], [4, 2], [13, 5], [5, 6], [11, 4], [13, 8], [2, 8], [15, 14], [13, 14], [4, 12], [14, 7], [4, 13], [11, 6], [6, 10], [6, 9], [2, 9], [4, 6], [14, 3], [10, 9], [8, 1], [14, 15], [1, 6], [8, 1], [13, 10], [10, 15], [10, 1], [14, 10], [12, 2]], 7) == None\nassert solution.minNumberOfSemesters(11, [[8, 4], [5, 10], [4, 11], [3, 9], [2, 9], [10, 3], [6, 9], [9, 6], [8, 7], [4, 2], [11, 6], [8, 9], [2, 11], [6, 9], [5, 1], [10, 7], [5, 6], [10, 8], [7, 8], [10, 2], [11, 3], [9, 6], [4, 1], [11, 1], [11, 5], [1, 2], [1, 10], [2, 6], [4, 9], [8, 4], [9, 2], [6, 2], [2, 3], [5, 6], [6, 2], [5, 2], [4, 9], [7, 9], [3, 2], [10, 2], [3, 9], [10, 5], [7, 9]], 1) == None\nassert solution.minNumberOfSemesters(4, [[2, 4], [2, 1], [2, 3], [2, 1]], 4) == 2\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(5, [[1, 4], [3, 4]], 4) == 2\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(15, [[14, 13], [12, 6], [3, 8], [2, 7], [4, 7], [8, 1], [1, 3], [7, 2], [3, 9], [5, 4], [5, 8]], 6) == None\nassert solution.minNumberOfSemesters(7, [[6, 2]], 3) == 3\nassert solution.minNumberOfSemesters(10, [[2, 10], [10, 6], [5, 2], [10, 9], [2, 4], [4, 9], [6, 4], [6, 5], [6, 7], [8, 2], [7, 3], [5, 4], [7, 8], [6, 5], [1, 2], [10, 4]], 2) == None\nassert solution.minNumberOfSemesters(14, [[1, 7], [10, 6], [13, 14], [5, 9], [7, 11], [9, 10], [11, 2], [1, 13], [14, 13], [8, 5], [2, 3], [5, 2], [4, 10], [1, 6], [13, 12], [14, 13], [8, 11], [8, 9], [13, 5], [3, 10], [12, 7], [8, 5], [3, 7], [5, 11], [13, 10], [7, 9], [2, 4], [9, 8], [11, 1], [5, 2], [3, 13], [5, 14], [11, 9], [2, 4], [2, 6], [14, 4], [2, 3], [8, 5], [9, 8], [12, 5], [2, 14], [4, 12], [8, 11], [14, 5], [5, 10], [12, 1], [9, 13], [14, 13], [6, 14], [12, 2], [13, 1], [6, 1], [13, 1], [3, 12], [11, 1], [4, 5], [11, 5], [4, 8], [13, 3], [6, 10], [8, 9], [6, 11], [14, 13], [6, 4], [6, 1], [10, 3], [4, 2], [9, 7], [9, 2], [8, 5], [11, 7], [11, 2], [11, 2], [10, 8], [2, 12], [6, 14], [6, 8]], 5) == None\nassert solution.minNumberOfSemesters(6, [[3, 6], [1, 6], [5, 3], [3, 5], [6, 1], [3, 2], [3, 6], [4, 5], [2, 6], [2, 4], [2, 6], [5, 3], [5, 2], [6, 1], [1, 3]], 1) == None\nassert solution.minNumberOfSemesters(9, [[6, 4], [5, 1], [9, 4], [1, 9], [8, 3], [7, 5], [7, 8], [6, 5], [2, 3], [7, 4], [1, 6], [2, 6], [6, 9], [9, 8], [5, 3], [8, 7], [5, 6], [2, 1], [6, 8], [8, 2], [1, 8]], 2) == None\nassert solution.minNumberOfSemesters(15, [[13, 4], [8, 6], [6, 2], [13, 4], [11, 7], [14, 9], [12, 14], [14, 7], [8, 4], [11, 3], [15, 14], [2, 1], [7, 11], [2, 7], [9, 11], [12, 5], [15, 11], [6, 2], [12, 3], [8, 4], [3, 14], [14, 8], [1, 4], [11, 2], [6, 3], [6, 8], [9, 3], [10, 4], [11, 14], [10, 12], [1, 15], [9, 6], [9, 14], [8, 10], [11, 2], [12, 10], [14, 11], [15, 5], [14, 3], [11, 15], [13, 11], [10, 14], [5, 12], [6, 14], [12, 2], [7, 8], [9, 2], [7, 13], [6, 11], [11, 2], [15, 6], [9, 15], [15, 11], [9, 15]], 1) == None\nassert solution.minNumberOfSemesters(8, [[5, 2], [6, 4], [2, 1]], 3) == 3\nassert solution.minNumberOfSemesters(14, [[5, 4], [10, 3], [11, 2], [6, 7], [2, 4], [11, 4], [8, 12], [13, 12], [7, 13], [6, 2], [7, 8], [13, 12], [2, 9], [2, 1], [5, 3], [4, 9], [10, 8], [5, 7], [9, 6], [2, 1], [14, 7], [12, 1], [2, 14], [7, 4], [12, 6], [14, 7], [11, 8], [1, 9], [3, 13], [2, 7]], 4) == None\nassert solution.minNumberOfSemesters(2, [[1, 2]], 2) == 2\nassert solution.minNumberOfSemesters(1, [], 1) == 1\nassert solution.minNumberOfSemesters(5, [[2, 4], [1, 3], [1, 3], [5, 4]], 3) == 2\nassert solution.minNumberOfSemesters(15, [[14, 12], [5, 9], [10, 14], [13, 2], [15, 13], [4, 11], [14, 2], [15, 14], [1, 10], [4, 6], [2, 14], [15, 8], [6, 7], [11, 2], [3, 2], [13, 12], [8, 6], [2, 11], [9, 14], [10, 3], [12, 3], [14, 15], [6, 3], [6, 7], [14, 11], [13, 9], [2, 9], [12, 3], [11, 8], [2, 4], [5, 4], [7, 3]], 7) == None\nassert solution.minNumberOfSemesters(3, [[1, 3]], 2) == 2\nassert solution.minNumberOfSemesters(9, [[3, 4], [9, 6], [4, 3], [2, 8], [5, 3], [1, 4], [7, 3], [6, 5], [5, 7], [2, 1], [2, 6], [2, 9], [7, 2], [6, 8], [7, 4], [3, 4], [1, 9], [2, 5], [7, 4]], 9) == None\nassert solution.minNumberOfSemesters(11, [[9, 2], [1, 2], [3, 6], [10, 8], [11, 7], [8, 1], [6, 4], [10, 7], [3, 2], [9, 4], [4, 11], [1, 8], [3, 8], [7, 4], [6, 11], [3, 2], [6, 10], [8, 1], [11, 7], [7, 9], [2, 4], [2, 5], [9, 3], [4, 2], [1, 6], [5, 10], [3, 8], [5, 2], [9, 4], [3, 10], [3, 6], [8, 1], [2, 1], [1, 3], [5, 9], [4, 8], [1, 11], [4, 3], [9, 11], [3, 6], [10, 7], [6, 10], [1, 9], [11, 3], [8, 9], [5, 3]], 5) == None\nassert solution.minNumberOfSemesters(4, [[4, 2], [4, 3]], 3) == 2\nassert solution.minNumberOfSemesters(8, [[2, 1], [8, 6], [1, 2], [1, 5], [1, 7], [6, 3], [7, 8], [2, 4], [3, 5], [5, 8], [5, 4], [6, 7], [5, 8], [2, 4], [3, 4], [8, 5], [7, 4], [4, 2], [5, 7], [6, 5], [1, 7], [1, 2], [7, 3], [3, 7]], 3) == None\nassert solution.minNumberOfSemesters(6, [[3, 6], [2, 5], [6, 4], [3, 2], [3, 5], [3, 4], [2, 1], [2, 6], [1, 6], [2, 4], [1, 5], [2, 1]], 5) == 5\nassert solution.minNumberOfSemesters(4, [], 1) == 4\nassert solution.minNumberOfSemesters(8, [[5, 1], [2, 6], [6, 2], [5, 2], [3, 2], [5, 2], [4, 1]], 6) == None\nassert solution.minNumberOfSemesters(8, [[7, 1], [5, 7], [4, 3], [5, 8], [5, 3], [3, 8], [4, 1], [7, 2], [2, 5], [2, 3], [7, 5], [4, 3], [3, 8], [3, 8], [2, 8], [7, 3], [2, 7], [1, 5], [6, 7], [5, 7], [3, 1], [1, 8]], 1) == None\nassert solution.minNumberOfSemesters(6, [[6, 3], [5, 3], [3, 1], [3, 4]], 3) == 3",
  "inefficient_solution": "class Solution:\n    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:\n        d = list(range(n + 1))\n        course_map = [[] for _ in range(n + 1)]\n        for x, y in relations:\n            course_map[y].append(x)\n            d[y] |= 1 << (x - 1)\n        semester = [0] * (n + 1)\n        semester[0] = 1\n        semester[1] = 1\n        for i in range(2, n + 1):\n            for j in range(i):\n                if semester[j] and all(semester[x] for x in course_map[i] if x != j):\n                    semester[i] = 1\n                    break\n        semester_count = 0\n        for i in range(1, n + 1):\n            if semester[i]:\n                semester_count += 1\n        for i in range(1, n + 1):\n            if semester[i]:\n                for j in range(i):\n                    if semester[j] and all(semester[x] for x in course_map[i] if x != j):\n                        semester[i] = 0\n                        break\n        semester_count = 0\n        for i in range(1, n + 1):\n            if semester[i]:\n                semester_count += 1\n        semester_count = (semester_count + k - 1) // k\n        return semester_count",
  "is_python": true
}