{
  "problem_idx": 174,
  "task_name": "Dungeon Game",
  "markdown_description": "\nThe demons had captured the princess and imprisoned her in **the bottom-right corner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in **the top-left room** and must fight his way through `dungeon` to rescue the princess.\n\n\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.\n\n\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\n\n\nTo reach the princess as quickly as possible, the knight decides to move only **rightward** or **downward** in each step.\n\n\nReturn *the knight's minimum initial health so that he can rescue the princess*.\n\n\n**Note** that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0100-0199/0174.Dungeon%20Game/images/dungeon-grid-1.jpg)\n\n```\n\n**Input:** dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\n**Output:** 7\n**Explanation:** The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** dungeon = [[0]]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == dungeon.length`\n* `n == dungeon[i].length`\n* `1 <= m, n <= 200`\n* `-1000 <= dungeon[i][j] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[inf] * (n + 1) for _ in range(m + 1)]\n        dp[m][n - 1] = dp[m - 1][n] = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def calculateMinimumHP(self, dungeon):\n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[float('inf')] * (n + 1) for _ in range(m + 1)]\n        dp[m][n - 1] = dp[m - 1][n] = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]\n    \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a m x n dungeon grid\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n    dungeon = [[random.randint(-1000, 1000) for _ in range(n)] for _ in range(m)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.calculateMinimumHP(dungeon)\n\n    return dungeon, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        dungeon, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.calculateMinimumHP(dungeon) == expected_result\n        print(f\"assert solution.calculateMinimumHP({dungeon}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.calculateMinimumHP({dungeon}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.calculateMinimumHP([[170, -928, -802, 419, -778, 352, 270, 98, 171, -672], [-413, 523, 938, -850, 922, 100, -249, -99, 305, -703], [46, 281, -155, -468, 0, 697, -320, -850, 574, -293], [537, -129, 394, 915, 461, 340, -758, 904, 224, -294], [-869, -862, -414, 702, -360, -323, -271, -351, -65, 276], [235, 367, -668, 289, -303, -360, 407, -511, 795, -775], [865, 268, 592, 311, -863, 974, 925, -23, 780, 447]]) == 244\nassert solution.calculateMinimumHP([[-631, 835, 815, -119, 711, -962, 935, -450], [462, 901, -353, -776, -632, -353, -991, 585], [-530, 747, -142, -961, -79, -50, -183, 256], [-971, -625, -157, 7, 150, -814, -192, 69], [454, -80, -561, 294, -881, 525, -389, 480]]) == 632\nassert solution.calculateMinimumHP([[514, 579], [-1000, 210]]) == 1\nassert solution.calculateMinimumHP([[792, 619, 16, -809, 575, 402, 402], [235, -932, -467, 587, -799, -322, -792], [258, 174, -611, 343, 577, 660, 70], [410, -490, 369, -460, -696, 500, -523], [-638, -372, 733, -879, 265, 378, -841], [600, -687, -373, 968, -815, -363, -638], [-948, -588, -743, 5, 677, 563, -100]]) == 1\nassert solution.calculateMinimumHP([[533, -916, 20, -386, -555, 599, -512, -264, 765, 887], [948, 662, 69, 337, -951, 105, -218, 977, 60, 671], [788, 359, 225, -518, 532, -138, 758, 19, 467, -943], [-307, -60, -711, 575, 733, -760, 531, -661, -373, 584], [327, 858, 910, -24, 186, -832, 971, -479, -580, 547], [654, -730, -982, 868, 90, 149, -993, 772, -355, -983], [401, -655, 875, -267, -734, 789, -583, 467, -63, -685], [-930, 17, 85, 694, -835, 234, -848, -147, 527, -495]]) == 1\nassert solution.calculateMinimumHP([[620, 415, -498]]) == 1\nassert solution.calculateMinimumHP([[-362], [-654], [303], [-265], [-174]]) == 1153\nassert solution.calculateMinimumHP([[233, 911, 592, -430, -928, -479, -574], [247, 701, 757, -665, -488, 810, 428], [228, -606, 428, -681, 651, -797, -223], [-563, 285, 558, -944, -562, 856, 373], [-622, -394, 105, 130, 848, 678, 574], [490, -957, 255, -593, -935, -343, -528], [-187, -181, 626, -755, -350, 751, -300]]) == 1\nassert solution.calculateMinimumHP([[-770, 209, 430, -752], [-590, -568, 575, 550], [-295, 21, -611, 783], [740, -173, -790, 439], [927, 224, 234, -599], [623, -720, 78, 442], [-164, 265, -994, 229]]) == 771\nassert solution.calculateMinimumHP([[-624, -655], [-705, -560], [872, -131], [-346, -525]]) == 1330\nassert solution.calculateMinimumHP([[-367, 463, 574], [-10, 181, 251], [-38, -975, 721], [521, -747, -832], [654, 882, -632], [-812, 975, -187]]) == 368\nassert solution.calculateMinimumHP([[105, -498, -118, 26], [-896, -33, 816, -473], [178, -202, 696, 494], [-506, 184, 500, 578], [-389, -637, 469, -151], [-174, 193, -154, 4], [-329, 513, -954, 58]]) == 427\nassert solution.calculateMinimumHP([[585, -116, 903], [759, -50, -402], [652, -390, -131], [-606, -56, -4], [-863, -327, -380], [999, -919, 852]]) == 1\nassert solution.calculateMinimumHP([[437, 727, -305, 424, -572, 738, 638, -697, -953]]) == 1\nassert solution.calculateMinimumHP([[-930, 798, -111, -177, -538], [-938, -340, -969, 748, -810], [-314, -582, -138, 682, 465], [-762, -143, 734, -170, -749], [546, 202, 30, -969, 340], [745, -29, 560, 254, 136], [331, -437, 543, -717, 205], [646, -835, 348, -147, 115], [53, 296, -131, -829, 503], [-176, -945, 94, -498, -656]]) == 931\nassert solution.calculateMinimumHP([[689, -779, 211, -507, 743, 985], [-671, 203, -853, -677, -556, -446], [925, 790, 704, -881, 716, -39]]) == 1\nassert solution.calculateMinimumHP([[-459, -98], [453, 579], [-640, 424], [-192, -131], [227, 396], [818, -197], [-936, -672]]) == 460\nassert solution.calculateMinimumHP([[11, 791, -699, 319, 486, 657, -650, 197, -19], [-230, 472, -249, 18, -708, 493, -345, 764, -145], [-989, -19, 168, -90, -531, 235, -997, 74, -185], [-441, 53, 901, -26, 819, 830, -345, 373, 345], [-597, -849, 104, -459, 674, 786, 271, -991, 129], [-736, -129, -189, -406, 338, -927, 138, 556, -310], [-953, -497, -988, -115, 875, -972, 779, -456, -120], [256, 457, 828, 227, -294, -812, 338, -11, 335], [867, -613, -110, 31, -218, -29, -114, 308, 109]]) == 1\nassert solution.calculateMinimumHP([[-149, -753], [582, 671], [589, 806]]) == 150\nassert solution.calculateMinimumHP([[-722, 357, 858, 353, 835, -929, 733, -898], [770, 860, 246, -840, -86, -721, -119, -472], [-505, 38, 227, -90, -450, -459, -219, -573], [-530, 684, -818, -239, -821, 771, -201, 809], [12, -63, 532, 108, 2, -20, -490, 925], [-497, 757, 63, 127, 435, 40, 283, -593], [405, 959, -925, -384, 435, -864, 820, 823], [-324, 272, 202, 576, -997, -626, 313, 281]]) == 723\nassert solution.calculateMinimumHP([[772, -517, 543], [-256, -781, -313], [-428, 525, -612]]) == 1\nassert solution.calculateMinimumHP([[-964, -392, -834, 220, -114, 28, -635], [529, 934, 952, 892, -143, -810, 658]]) == 965\nassert solution.calculateMinimumHP([[-404]]) == 405\nassert solution.calculateMinimumHP([[310, -143, 773, 502, -866], [428, -665, -697, 164, -196]]) == 1\nassert solution.calculateMinimumHP([[-714, -96, -671, -398]]) == 1880\nassert solution.calculateMinimumHP([[542, -204, 26], [-380, 47, 694], [836, -119, 122], [739, -41, 341], [-524, 784, -748], [-189, -804, -708], [-659, 67, -539], [-120, 561, -18], [-456, -975, 818], [-687, 844, 640]]) == 1\nassert solution.calculateMinimumHP([[-466, 547, -251, 6, -769]]) == 934\nassert solution.calculateMinimumHP([[-130, 110, 193, 731, 89, 379, -639, -595, -955], [259, 478, -673, 286, -396, 170, 51, 322, 45], [-711, 479, -989, 199, -485, -535, 589, 115, -679], [-84, -952, -537, 224, 114, -476, 265, 45, 793]]) == 131\nassert solution.calculateMinimumHP([[754, -647, -313, 471, 436, 278, 832, -865, -522, 76], [-201, 251, -385, -797, 262, 102, -873, 55, 956, -55], [-12, -209, 871, 641, 119, -760, -536, 232, 943, -92], [-860, -76, 617, 328, -909, 831, -394, 707, 176, -993], [191, -853, 591, -865, 319, -648, -799, -974, 639, -956], [321, -504, 752, -919, -321, -866, -347, -189, 898, -712], [408, 956, -408, -67, 897, -837, 815, -483, 344, -461], [268, 709, -152, -843, -564, 461, 35, -382, 284, 758], [-31, 413, 65, 477, -186, -627, 380, -702, 572, -1], [-479, 789, -702, -416, 774, -716, -787, -937, 247, 993]]) == 1\nassert solution.calculateMinimumHP([[-781], [-886], [763], [443], [-664], [-124], [-781], [-635]]) == 2666\nassert solution.calculateMinimumHP([[-463, 509, -819, -819, 125, 610, -73, 895], [-190, 765, -709, 657, -532, -87, -207, -350], [13, 171, -547, 407, -866, -724, -886, -447], [275, -994, -399, 412, -743, -590, 949, -952], [-773, 101, 901, 962, -609, -976, 408, -900], [466, 320, 110, 71, -576, 591, 963, -575], [-252, 135, 690, -182, -181, -27, -385, 833], [-389, -699, -663, 538, 896, -27, -511, -935], [-539, 888, 183, 116, 67, 13, -132, 649], [-275, -417, 88, 710, -277, 462, 338, 594]]) == 464\nassert solution.calculateMinimumHP([[698, 696, -143, -983, 872, -466, -471, -576], [-339, 247, -775, -387, -705, -471, 773, -408], [-469, -539, 533, -874, 420, -229, -479, 976], [975, 580, 624, 756, 878, -206, -70, -348]]) == 1\nassert solution.calculateMinimumHP([[217, 861, 123, 568, 175, -8], [221, 759, 673, -291, -906, 441], [-968, 41, 308, -343, -640, 480], [-119, 396, -270, 470, -43, 482], [-933, -604, 141, 319, 889, 746], [-51, 25, -309, 945, -211, 237], [-77, -885, -90, -832, 542, 730], [-384, 352, 218, -813, 380, -30], [-489, 804, -137, -131, -278, 149], [-556, -415, 861, 619, -902, -508]]) == 1\nassert solution.calculateMinimumHP([[650, -993, -481, -38], [372, -268, -996, 797], [41, -598, -959, -25], [64, 100, 390, 143], [133, 2, -959, 540]]) == 1\nassert solution.calculateMinimumHP([[-977, 30, 110, -893, -137, 729, 425, -33, -885], [150, -810, 589, 992, -200, 324, -335, -761, 492]]) == 978\nassert solution.calculateMinimumHP([[20, -573, -565], [-427, -436, -105], [-199, -800, 155], [744, 1000, -751]]) == 607\nassert solution.calculateMinimumHP([[-558, -745, 587, 388], [-843, -703, 18, -689], [128, -372, 275, -539], [-439, -176, 969, -763], [419, 639, 847, 277]]) == 1304\nassert solution.calculateMinimumHP([[446], [649], [278], [-14], [-839], [339]]) == 1\nassert solution.calculateMinimumHP([[415, -985, 597, -939, -131, -707, -117]]) == 1868\nassert solution.calculateMinimumHP([[183, -280, -801, 506, -261, 686, -174], [-284, -849, 831, -807, -355, -460, -365], [368, -941, -221, 383, 181, 918, -793], [-245, -428, 54, -713, -827, -520, -962], [-264, -555, -817, -463, 305, -1000, -663], [-330, -332, 202, -887, 561, 555, -992], [-698, -295, -140, 46, -538, 615, 344], [772, 501, 857, 474, 145, -990, 345]]) == 899\nassert solution.calculateMinimumHP([[279, 734, -347]]) == 1\nassert solution.calculateMinimumHP([[-458]]) == 459\nassert solution.calculateMinimumHP([[925, 598, 372, 836, 307, 965, 835, 432, -137], [-162, 145, -424, -726, -37, -385, 545, -326, -827], [-632, 765, -327, 818, -158, -733, -468, 46, -581], [773, -859, -251, -132, 220, -529, 837, 681, 658], [758, -614, -626, -219, -595, 842, 608, -552, 317], [-261, 134, -445, 429, 788, -89, -30, -433, 960]]) == 1\nassert solution.calculateMinimumHP([[941, 705, 467], [-723, -995, -456], [-884, -216, -606], [831, 791, -2], [-485, 912, 485], [915, -896, -939]]) == 1\nassert solution.calculateMinimumHP([[-875, -474], [347, -557], [963, 905], [-961, -323], [454, 596], [860, 403], [-67, -554], [-232, -962], [-424, -600]]) == 876\nassert solution.calculateMinimumHP([[888, 693, -757, -427, 840, -824, 525, 288]]) == 1\nassert solution.calculateMinimumHP([[-632, 679, -586, 477], [372, -268, -566, -655], [333, -907, 765, -885], [-597, 510, 343, -407]]) == 633\nassert solution.calculateMinimumHP([[-129, 195], [-45, 264], [132, 120], [-828, 48], [-352, -504], [589, -702], [128, 132]]) == 709\nassert solution.calculateMinimumHP([[-835, -576], [561, -589], [-871, 381], [551, 77], [-560, 142], [-859, 726]]) == 864\nassert solution.calculateMinimumHP([[251, -168, 534, -60], [-442, 372, 198, 558], [927, 178, 479, 250], [131, -497, 260, 847], [806, 735, -464, -43], [868, 279, 892, -295], [439, 176, 734, -281], [906, -979, -874, 777]]) == 1\nassert solution.calculateMinimumHP([[-485, -668, 452, -481, -441, 551, 913, -779, 185], [499, 482, 474, 672, -451, -218, -254, 758, 456], [259, -392, 255, 30, 761, -228, 634, -983, 106], [543, 607, 782, -662, 476, -891, 281, 366, -442]]) == 486\nassert solution.calculateMinimumHP([[343, 639, 496, -562, 548, -575, -39, -64], [-272, -761, 967, 980, -757, -61, -908, -890], [-977, -873, -660, 281, -215, 898, -662, 526], [-220, -888, -968, -678, 665, 214, -14, -497], [654, -237, 812, 121, 966, -709, 989, 140], [136, 211, -584, 37, -115, -53, 550, -840]]) == 1\nassert solution.calculateMinimumHP([[-408, -524, -545, 826, -720, -823, 230], [624, 31, 182, -816, 174, 786, -213], [-733, -101, 326, 681, -309, 316, 204], [-930, 153, 52, 543, 154, -383, 883]]) == 409\nassert solution.calculateMinimumHP([[494, -759], [-605, 943], [805, 72], [557, -726]]) == 112\nassert solution.calculateMinimumHP([[-452, -449, 862], [434, -540, 970], [-245, -104, -886]]) == 559\nassert solution.calculateMinimumHP([[568, 487], [617, -40], [-143, 486], [196, -365], [240, 67]]) == 1\nassert solution.calculateMinimumHP([[995, 629, 10, 497, -191, 202, -194, -516], [-627, 997, 233, 526, 520, 656, -475, 799], [-992, -711, 294, -536, 95, -158, -419, -449], [233, 99, -721, 865, -132, -639, -182, -728], [-88, -784, 508, 556, 689, -789, 982, 23]]) == 1\nassert solution.calculateMinimumHP([[-195, -215, 878, -548, -419, -325, 222, -543, -719, -469], [181, 131, 513, 332, 644, 558, -58, 929, 36, 511], [332, 126, -81, -961, 49, 397, -750, -88, -132, -770], [938, -728, 24, 209, 402, 484, 788, -9, -235, 679], [-33, 946, 737, -177, 525, 349, -293, 483, 929, 820], [485, 514, 813, 528, -975, 969, 405, 131, -188, -493], [99, 628, 471, 790, 409, -792, 819, -897, 924, 815], [586, -399, 582, -836, -981, -196, 167, 427, -41, 977], [-463, 656, -226, -132, 376, -259, 925, -833, -908, 352]]) == 196\nassert solution.calculateMinimumHP([[462, -346, 368, 475, -871, -604, -967, 788, -435], [-23, 123, 927, -760, 782, -182, 846, 91, -583], [-457, 478, -811, -176, -708, -850, 364, -97, -616], [-506, -622, -90, 498, -635, -987, 422, 434, -576]]) == 1\nassert solution.calculateMinimumHP([[25, 654], [-181, 470], [579, -352], [920, -744], [697, -239], [143, -555], [22, 702]]) == 157\nassert solution.calculateMinimumHP([[-344, -743, -863, -412], [-574, -181, -665, 163], [671, -106, 661, -406], [23, 164, 322, -20], [977, 14, -500, 232], [-368, -375, -570, -430], [-503, 340, -347, -21], [642, -543, 376, 448], [702, 783, -13, -623], [-638, -212, -124, -107]]) == 919\nassert solution.calculateMinimumHP([[-322, 330, -550], [590, -793, 659], [-467, 410, 445], [367, 837, 235], [-252, -184, -31], [-149, -371, 416], [-737, 119, 918], [119, 213, 76]]) == 323\nassert solution.calculateMinimumHP([[-494, 491, -57, -834, 237], [945, -955, -542, -385, 789], [170, 459, -589, -423, 267], [-214, -272, -582, -396, 119], [927, 588, 31, -574, -364], [-547, 398, 666, -67, 223], [197, -843, -470, 252, 394], [-19, 346, -36, 850, -442]]) == 495\nassert solution.calculateMinimumHP([[-749], [-501], [-596], [715], [163], [-699], [19]]) == 1847\nassert solution.calculateMinimumHP([[63, 527], [-396, -139], [-808, -554], [-827, 263], [-583, -704], [-942, -6], [990, 534]]) == 551\nassert solution.calculateMinimumHP([[656, 997, 836, -702, 617], [-790, -391, -187, 234, 283], [-821, 97, -192, 753, -824], [807, -30, 784, 783, 97], [389, -210, 932, 754, 316], [770, -319, 42, -992, -152]]) == 1\nassert solution.calculateMinimumHP([[109, -48, -282, -319, -750, -207, 459, -621], [368, 191, 335, 990, -98, 906, 556, -679], [-29, 912, -433, -140, 955, -152, 15, 979], [-61, 184, -980, -587, 258, -498, -180, -773], [494, -312, 664, 166, 529, 703, -859, -618]]) == 1\nassert solution.calculateMinimumHP([[721, -709, 524, 613, 908], [587, 18, -888, 919, 364], [158, 259, 391, 198, 984], [-907, -314, 458, -143, 308], [184, -215, 966, 531, 950]]) == 1\nassert solution.calculateMinimumHP([[-325, 356, -502, 232, 534, -569, -327, -815, -416, 778]]) == 1833\nassert solution.calculateMinimumHP([[-480, -707, 966, -244, 922, 696, 130, 923, -829, 738], [570, 753, -939, 129, 677, 373, -825, 946, -74, 657], [831, 223, -245, 569, -915, 745, 512, 572, -644, -198]]) == 481\nassert solution.calculateMinimumHP([[-622, -952, -994, -603, 934], [-389, -10, -766, 345, 134], [386, -497, -142, 556, 64], [-288, 281, -960, 789, 446], [249, 723, 504, 876, 16], [-915, 977, -668, -384, 871], [908, -884, -400, 146, 476], [-498, 117, -43, -527, -370], [701, -904, -229, -752, -320]]) == 1012\nassert solution.calculateMinimumHP([[540, -102, -476, -436, 168, -388, -735, -718, -562], [-326, 975, -70, -956, 859, -616, -726, 165, 951], [-611, 30, 507, 614, -413, 763, -970, 36, 377], [143, -796, 433, -101, -419, -316, 851, -4, 618], [-167, 65, 1000, 402, -965, -86, 111, 180, -577], [-222, 642, 762, -823, -282, -268, 67, -572, 369]]) == 1\nassert solution.calculateMinimumHP([[-920, 193, -19]]) == 921\nassert solution.calculateMinimumHP([[798, -782, 307, 816], [216, -578, 162, 353], [758, -498, -725, 883], [821, -842, -459, -183], [-389, 647, -42, -197], [-135, 372, -141, 221], [358, -204, -869, -14], [-176, 865, -789, -704], [688, 169, 793, 480]]) == 1\nassert solution.calculateMinimumHP([[111, -733, -215, -1000, 453, -267, 789], [332, 274, -914, -619, -954, 697, 607], [-625, -135, -260, -290, 620, -447, -330], [-278, 369, -541, -855, -760, -960, 691], [499, -728, 153, -364, 328, -301, 530], [-934, -91, -957, 308, 559, -402, -289], [-519, 911, 725, -707, -145, 827, 635], [28, 617, 11, 251, -557, -742, -267], [125, 715, 999, -285, 647, 851, -291]]) == 1\nassert solution.calculateMinimumHP([[-62, 822, -294, 920, 729, -922, -700, 323, 137, 258], [904, -339, 923, 597, -529, -734, 507, 293, -381, -189], [-70, -30, -275, 815, -496, -475, 669, 552, -997, 980], [-354, 857, -348, -814, 206, 30, -867, 930, 904, 142]]) == 63\nassert solution.calculateMinimumHP([[-701, 737, 760, -995, -335]]) == 702\nassert solution.calculateMinimumHP([[990, 859, -209, 113, 796]]) == 1\nassert solution.calculateMinimumHP([[173, 564, 227, 957, 421, -234], [774, 28, 722, 814, -812, -935], [-307, -35, 92, 604, -420, 340], [-135, -112, 885, 405, 162, 12], [23, -839, -490, 920, 362, -155], [895, 202, -775, -575, 379, -116], [882, -664, 534, -517, -720, 677], [-265, 741, 857, 33, 419, 904], [10, 104, 151, 450, -425, 669]]) == 1\nassert solution.calculateMinimumHP([[-807, 810, -179, -538, 531, 798, 673, 582], [-383, 242, -43, 543, 975, -612, -660, 645], [799, -128, 197, -387, -932, 278, -935, 989], [-806, 103, -153, -598, 347, -630, -107, 264], [984, 309, 89, 666, 241, 374, 176, -935], [-239, 383, 428, -731, -434, 974, -642, -552]]) == 808\nassert solution.calculateMinimumHP([[-320, 962, 102, 181, 940, 522, 311, -63, -153, -654], [-14, -667, -93, -860, 6, 477, 501, 54, -554, -358], [-315, -353, 865, 874, 103, -517, -443, -883, -563, 944], [108, -408, 546, -792, 110, 311, 433, -366, -164, 603], [-603, -454, -793, 487, 29, 204, 262, -520, 525, 457], [-1000, 704, 969, -550, -383, 781, 238, -755, 365, -779], [781, -332, -825, -16, 849, -480, 167, -756, -747, 589], [458, 765, -834, -921, 680, -55, -583, -427, -777, 698]]) == 321\nassert solution.calculateMinimumHP([[951], [-109], [852], [427], [-107], [-948]]) == 1\nassert solution.calculateMinimumHP([[676, 504], [233, 237], [-157, 78], [231, 476], [86, 619], [-49, 295], [926, 285], [822, -328]]) == 1\nassert solution.calculateMinimumHP([[-113], [543]]) == 114\nassert solution.calculateMinimumHP([[-268], [588], [-292], [455], [456], [-291]]) == 269\nassert solution.calculateMinimumHP([[-67, -203], [235, -282], [-422, -874], [-605, 914], [503, -206], [651, -922], [-581, -599], [956, -182]]) == 860\nassert solution.calculateMinimumHP([[51, -238, -518, -849, -712, 127, -868, -12, -775], [753, -68, -153, 877, 884, 458, -239, -991, 784], [218, -658, -374, 916, -539, -451, -536, 724, -319], [951, -380, -418, -19, 422, 311, -57, 344, 393], [356, -69, -174, 641, 519, -452, 780, -56, -674]]) == 1\nassert solution.calculateMinimumHP([[-637, -927], [-492, 158], [-882, -461], [-820, -24], [101, 457], [845, 634], [965, 53]]) == 1457\nassert solution.calculateMinimumHP([[244, 711, -389, -900, 957, 901, 522, 444, 794, -613], [-587, -212, -570, -187, 577, 856, 397, 986, -192, -86], [239, 401, -184, 235, 236, 404, -872, 211, -555, -754]]) == 15\nassert solution.calculateMinimumHP([[762, -913, -15, 907, -770, 117, -108, 981, -364], [-719, -891, 35, 965, -935, -297, -954, -316, 934]]) == 167\nassert solution.calculateMinimumHP([[980], [-358], [94], [388], [513], [972], [-735], [427]]) == 1\nassert solution.calculateMinimumHP([[42, -176, 700, 367], [-872, -472, -372, -398], [-208, -441, 957, -540], [-215, -438, -232, 737]]) == 135\nassert solution.calculateMinimumHP([[945, -487, -69, -431, 6, 294, 817], [-385, 949, 412, 534, 466, -934, 521], [798, -294, 787, -921, -723, -769, -607], [27, -66, -84, -447, 795, -454, 585], [-133, -858, -179, -70, -325, -635, 669], [314, 841, 140, 490, -486, -440, 761], [480, -777, 780, 287, 681, 903, -343], [-814, -340, -522, -135, -958, 933, 942], [3, -273, -282, -235, 506, 642, -254]]) == 1\nassert solution.calculateMinimumHP([[-575, 259, 907, 57], [-66, 688, -762, -594], [-106, 814, 244, -539], [-64, 421, 528, -857]]) == 576\nassert solution.calculateMinimumHP([[-680, 278, -927, -899, 735, 957, -648, 80, 226, -393], [161, 445, 547, -296, 405, 216, -503, -932, -689, -556], [-48, -518, -228, -360, -873, -362, 563, 694, 0, 206], [-385, 117, -133, 696, 734, 657, -710, -812, -873, 282]]) == 681\nassert solution.calculateMinimumHP([[311, -565, 610, 220, -186, -567, -547], [-4, -712, -773, -303, 374, 789, -116], [-194, -923, -740, -525, 352, 420, 369]]) == 255\nassert solution.calculateMinimumHP([[-727, -322, -92, 229], [277, 247, -387, 464], [218, 386, 188, 700], [490, 161, -938, -298], [432, -281, 625, -619]]) == 728\nassert solution.calculateMinimumHP([[706, 997, -729, 688, 228, 390, 738, -383, -406], [-240, 17, -144, 771, -434, 33, -382, -814, -6], [-785, -577, 843, 752, -908, 655, 303, 629, 30], [-527, 9, 106, 977, -725, 309, 978, 177, -618]]) == 1\nassert solution.calculateMinimumHP([[841, 323, 167, -639, 771, -275, 74, -457, -18], [-648, -684, 471, 339, -577, -443, 364, -402, 427], [-141, -314, -900, 770, 43, 855, 459, -808, 982], [831, 930, -392, 762, -492, -535, 19, 94, 547], [928, 294, 614, 805, 165, 206, 457, -896, -582], [-215, 528, -219, -91, -202, 236, -40, -226, -6], [343, 91, 180, -410, 333, 20, -695, -850, 534], [188, -729, 133, -58, 922, -156, 218, 388, 688]]) == 1\nassert solution.calculateMinimumHP([[-422, -826, 244, 819, -931, -109, -340, -428], [-483, 965, 316, -853, 138, 392, 287, -948], [489, -97, -756, 738, 133, -449, -26, -530], [968, 368, -179, 194, -158, -152, -151, -245]]) == 906",
  "inefficient_solution": "class Solution:\n    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:\n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[None] * (n * 2) for _ in range(m * 2)]\n        for i in range(m * 2):\n            dp[i][0] = 0\n        for j in range(n * 2):\n            dp[0][j] = 0\n        for i in range(1, m * 2):\n            for j in range(1, n * 2):\n                if dungeon[i // 2 - 1][j // 2 - 1] == 0:\n                    dp[i][j] = max(1, dp[i-1][j] + dp[i][j-1])\n                elif dungeon[i // 2 - 1][j // 2 - 1] > 0:\n                    dp[i][j] = max(1, min(dp[i-1][j], dp[i][j-1]) + dungeon[i // 2 - 1][j // 2 - 1])\n                else:\n                    dp[i][j] = max(1, min(dp[i-1][j], dp[i][j-1]) - dungeon[i // 2 - 1][j // 2 - 1])\n        return dp[m*2 - 1][n*2 - 1]",
  "is_python": true
}