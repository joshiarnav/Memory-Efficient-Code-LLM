{
  "problem_idx": 1502,
  "task_name": "Can Make Arithmetic Progression From Sequence",
  "markdown_description": "\nA sequence of numbers is called an **arithmetic progression** if the difference between any two consecutive elements is the same.\n\n\nGiven an array of numbers `arr`, return `true` *if the array can be rearranged to form an **arithmetic progression**. Otherwise, return* `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [3,5,1]\n**Output:** true\n**Explanation:** We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1,2,4]\n**Output:** false\n**Explanation:** There is no way to reorder the elements to obtain an arithmetic progression.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= arr.length <= 1000`\n* `-106 <= arr[i] <= 106`\n\n\n",
  "canonical_solution": "class Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        arr.sort()\n        d = arr[1] - arr[0]\n        return all(b - a == d for a, b in pairwise(arr))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def canMakeArithmeticProgression(self, arr):\n        arr.sort()\n        d = arr[1] - arr[0]\n        return all(b - a == d for a, b in pairwise(arr))\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    arr = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.canMakeArithmeticProgression(arr)\n\n    return arr, expected_result\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = iter(iterable), iter(iterable)\n    next(b, None)\n    return zip(a, b)\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.canMakeArithmeticProgression(arr) == expected_result\n        print(f\"assert solution.canMakeArithmeticProgression({arr}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.canMakeArithmeticProgression({arr}) == {expected_result}\"\n        )\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.canMakeArithmeticProgression([2, 7, 46, 59, 69, 79, 83]) == False\nassert solution.canMakeArithmeticProgression([5, 12, 13, 56, 58, 66, 77, 80, 90]) == False\nassert solution.canMakeArithmeticProgression([11, 24, 32, 58, 79, 85, 96]) == False\nassert solution.canMakeArithmeticProgression([9, 15, 17, 37, 46, 51, 60, 70, 78, 88]) == False\nassert solution.canMakeArithmeticProgression([4, 47, 61, 73, 75]) == False\nassert solution.canMakeArithmeticProgression([37, 66, 81, 92]) == False\nassert solution.canMakeArithmeticProgression([14, 36, 40, 86, 92]) == False\nassert solution.canMakeArithmeticProgression([19, 21, 54, 63, 86, 89]) == False\nassert solution.canMakeArithmeticProgression([15, 41, 54, 70, 72]) == False\nassert solution.canMakeArithmeticProgression([8, 14, 25, 36, 57, 65, 75, 80, 89]) == False\nassert solution.canMakeArithmeticProgression([5, 39, 65, 73, 77, 84, 97]) == False\nassert solution.canMakeArithmeticProgression([48, 58, 67, 71, 84]) == False\nassert solution.canMakeArithmeticProgression([15, 52]) == True\nassert solution.canMakeArithmeticProgression([3, 24, 54, 94]) == False\nassert solution.canMakeArithmeticProgression([57, 78]) == True\nassert solution.canMakeArithmeticProgression([17, 19, 29, 34, 35, 38, 73, 80, 83]) == False\nassert solution.canMakeArithmeticProgression([34, 57, 59, 60, 62, 73, 82, 85, 96]) == False\nassert solution.canMakeArithmeticProgression([15, 20, 21, 32, 40, 50, 65, 79, 93]) == False\nassert solution.canMakeArithmeticProgression([44, 64, 65, 73, 97]) == False\nassert solution.canMakeArithmeticProgression([3, 4, 33, 38, 56, 58, 64, 80]) == False\nassert solution.canMakeArithmeticProgression([28, 39, 45, 46, 68, 71, 95]) == False\nassert solution.canMakeArithmeticProgression([1, 33, 48, 58, 68, 77, 90, 97]) == False\nassert solution.canMakeArithmeticProgression([43, 57]) == True\nassert solution.canMakeArithmeticProgression([12, 39, 53, 65, 82]) == False\nassert solution.canMakeArithmeticProgression([5, 11, 31, 39, 62, 69, 98]) == False\nassert solution.canMakeArithmeticProgression([4, 14, 29, 43, 73, 75, 81, 83]) == False\nassert solution.canMakeArithmeticProgression([9, 17, 34, 35, 39, 42, 45, 64, 66, 77]) == False\nassert solution.canMakeArithmeticProgression([11, 14, 35, 46, 56, 63, 91]) == False\nassert solution.canMakeArithmeticProgression([18, 33, 47, 53, 61, 90, 93]) == False\nassert solution.canMakeArithmeticProgression([8, 40]) == True\nassert solution.canMakeArithmeticProgression([42, 44, 45, 47, 62, 80, 85, 86]) == False\nassert solution.canMakeArithmeticProgression([5, 20, 40, 52, 53, 79, 97]) == False\nassert solution.canMakeArithmeticProgression([21, 45, 52, 57, 93]) == False\nassert solution.canMakeArithmeticProgression([52, 62, 94]) == False\nassert solution.canMakeArithmeticProgression([20, 37, 75, 83]) == False\nassert solution.canMakeArithmeticProgression([11, 14, 45, 90, 93]) == False\nassert solution.canMakeArithmeticProgression([7, 27, 62, 91]) == False\nassert solution.canMakeArithmeticProgression([1, 2, 12, 60, 62, 69, 80]) == False\nassert solution.canMakeArithmeticProgression([10, 40, 58, 69, 98]) == False\nassert solution.canMakeArithmeticProgression([5, 7, 19, 24, 26, 31, 34, 48, 58, 94]) == False\nassert solution.canMakeArithmeticProgression([5, 8, 45, 60, 80, 88]) == False\nassert solution.canMakeArithmeticProgression([14, 43, 60, 67, 68, 75, 89, 98]) == False\nassert solution.canMakeArithmeticProgression([18, 53, 55, 86]) == False\nassert solution.canMakeArithmeticProgression([18, 28, 53, 58, 64, 79, 86, 90, 99]) == False\nassert solution.canMakeArithmeticProgression([6, 47]) == True\nassert solution.canMakeArithmeticProgression([27, 29, 34, 37, 38, 61, 62, 77, 78, 96]) == False\nassert solution.canMakeArithmeticProgression([10, 16, 27, 56, 58]) == False\nassert solution.canMakeArithmeticProgression([49, 70, 89]) == False\nassert solution.canMakeArithmeticProgression([48, 65, 73]) == False\nassert solution.canMakeArithmeticProgression([5, 14, 38, 80]) == False\nassert solution.canMakeArithmeticProgression([36, 37]) == True\nassert solution.canMakeArithmeticProgression([19, 33, 41, 52, 65, 68, 71, 87, 88, 96]) == False\nassert solution.canMakeArithmeticProgression([13, 18, 40, 42, 44, 46, 47, 72, 91]) == False\nassert solution.canMakeArithmeticProgression([70, 82, 87]) == False\nassert solution.canMakeArithmeticProgression([20, 21, 27, 47, 58, 63, 64, 91, 92, 98]) == False\nassert solution.canMakeArithmeticProgression([11, 18, 44, 72, 80, 81, 86, 97, 98]) == False\nassert solution.canMakeArithmeticProgression([2, 27, 61, 65, 66, 79, 87, 91, 99]) == False\nassert solution.canMakeArithmeticProgression([3, 26, 28, 34, 59, 64, 73, 82, 89]) == False\nassert solution.canMakeArithmeticProgression([55, 62]) == True\nassert solution.canMakeArithmeticProgression([20, 26]) == True\nassert solution.canMakeArithmeticProgression([3, 55]) == True\nassert solution.canMakeArithmeticProgression([73, 90]) == True\nassert solution.canMakeArithmeticProgression([17, 89]) == True\nassert solution.canMakeArithmeticProgression([23, 67]) == True\nassert solution.canMakeArithmeticProgression([7, 10, 56, 58, 90, 94]) == False\nassert solution.canMakeArithmeticProgression([35, 46]) == True\nassert solution.canMakeArithmeticProgression([64, 73]) == True\nassert solution.canMakeArithmeticProgression([2, 3, 5, 10, 24, 55, 75, 76, 77, 78]) == False\nassert solution.canMakeArithmeticProgression([20, 39, 69]) == False\nassert solution.canMakeArithmeticProgression([8, 36, 41, 43, 45, 56, 71, 80, 88, 99]) == False\nassert solution.canMakeArithmeticProgression([20, 28, 42, 64, 67]) == False\nassert solution.canMakeArithmeticProgression([10, 39, 45, 57]) == False\nassert solution.canMakeArithmeticProgression([64, 72, 74]) == False\nassert solution.canMakeArithmeticProgression([7, 13, 20, 34, 41, 60, 82, 86]) == False\nassert solution.canMakeArithmeticProgression([40, 42, 73, 74, 94]) == False\nassert solution.canMakeArithmeticProgression([2, 3, 7, 18, 24, 42, 53, 66, 95, 97]) == False\nassert solution.canMakeArithmeticProgression([50, 61, 69, 93]) == False\nassert solution.canMakeArithmeticProgression([3, 14, 15, 20, 37, 51, 72, 82]) == False\nassert solution.canMakeArithmeticProgression([5, 18, 55]) == False\nassert solution.canMakeArithmeticProgression([21, 22, 35, 36, 52, 65, 71, 72, 73]) == False\nassert solution.canMakeArithmeticProgression([1, 5, 15, 29, 31, 43, 71, 82, 84]) == False\nassert solution.canMakeArithmeticProgression([2, 68]) == True\nassert solution.canMakeArithmeticProgression([11, 13, 39, 40, 53, 55, 79, 85]) == False\nassert solution.canMakeArithmeticProgression([8, 85]) == True\nassert solution.canMakeArithmeticProgression([48, 57, 61, 69, 72, 80, 84, 93]) == False\nassert solution.canMakeArithmeticProgression([7, 13, 34]) == False\nassert solution.canMakeArithmeticProgression([32, 33, 56, 89]) == False\nassert solution.canMakeArithmeticProgression([7, 13, 38, 58]) == False\nassert solution.canMakeArithmeticProgression([84, 94]) == True\nassert solution.canMakeArithmeticProgression([42, 68]) == True\nassert solution.canMakeArithmeticProgression([6, 25, 41, 43, 49, 60, 84, 87, 90, 99]) == False\nassert solution.canMakeArithmeticProgression([1, 91]) == True\nassert solution.canMakeArithmeticProgression([8, 38, 96, 99]) == False\nassert solution.canMakeArithmeticProgression([5, 6, 29, 55, 68, 87, 88, 100]) == False\nassert solution.canMakeArithmeticProgression([1, 11, 16, 32, 40, 64, 86, 87, 90, 96]) == False\nassert solution.canMakeArithmeticProgression([5, 12, 23, 43]) == False\nassert solution.canMakeArithmeticProgression([27, 41, 54, 59, 65, 74, 75, 77, 79, 91]) == False\nassert solution.canMakeArithmeticProgression([61, 81, 86, 88]) == False\nassert solution.canMakeArithmeticProgression([21, 35, 71, 74]) == False\nassert solution.canMakeArithmeticProgression([15, 93]) == True",
  "inefficient_solution": "class Solution:\n    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:\n        arr = arr[:]  # make a copy of the list to avoid modifying the original\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] > arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break  # break out of the inner loop to avoid duplicate swaps\n        d = arr[1] - arr[0]\n        for i in range(len(arr) - 1):\n            if arr[i] + d != arr[i + 1]:\n                return False\n        return True",
  "is_python": true
}