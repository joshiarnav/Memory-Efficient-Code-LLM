{
  "problem_idx": 991,
  "task_name": "Broken Calculator",
  "markdown_description": "\nThere is a broken calculator that has the integer `startValue` on its display initially. In one operation, you can:\n\n\n* multiply the number on display by `2`, or\n* subtract `1` from the number on display.\n\n\nGiven two integers `startValue` and `target`, return *the minimum number of operations needed to display* `target` *on the calculator*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** startValue = 2, target = 3\n**Output:** 2\n**Explanation:** Use double operation and then decrement operation {2 -> 4 -> 3}.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** startValue = 5, target = 8\n**Output:** 2\n**Explanation:** Use decrement and then double {5 -> 4 -> 8}.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** startValue = 3, target = 10\n**Output:** 3\n**Explanation:** Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= startValue, target <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = 0\n        while startValue < target:\n            if target & 1:\n                target += 1\n            else:\n                target >>= 1\n            ans += 1\n        ans += startValue - target\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = 0\n        while startValue < target:\n            if target & 1:\n                target += 1\n            else:\n                target >>= 1\n            ans += 1\n        ans += startValue - target\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random start value and target\n    startValue = random.randint(1, 100)\n    target = random.randint(1, 100)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.brokenCalc(startValue, target)\n\n    return startValue, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        startValue, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.brokenCalc(startValue, target) == expected_result\n        print(f\"assert solution.brokenCalc({startValue}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.brokenCalc({startValue}, {target}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.brokenCalc(97, 89) == 8\nassert solution.brokenCalc(67, 53) == 14\nassert solution.brokenCalc(62, 1) == 61\nassert solution.brokenCalc(57, 87) == 15\nassert solution.brokenCalc(32, 27) == 5\nassert solution.brokenCalc(5, 42) == 8\nassert solution.brokenCalc(49, 12) == 37\nassert solution.brokenCalc(20, 69) == 6\nassert solution.brokenCalc(7, 62) == 8\nassert solution.brokenCalc(27, 33) == 12\nassert solution.brokenCalc(86, 11) == 75\nassert solution.brokenCalc(58, 72) == 23\nassert solution.brokenCalc(90, 60) == 30\nassert solution.brokenCalc(63, 79) == 25\nassert solution.brokenCalc(16, 7) == 9\nassert solution.brokenCalc(85, 88) == 42\nassert solution.brokenCalc(97, 100) == 48\nassert solution.brokenCalc(35, 65) == 4\nassert solution.brokenCalc(56, 38) == 18\nassert solution.brokenCalc(84, 13) == 71\nassert solution.brokenCalc(42, 5) == 37\nassert solution.brokenCalc(50, 63) == 20\nassert solution.brokenCalc(75, 36) == 39\nassert solution.brokenCalc(19, 82) == 13\nassert solution.brokenCalc(17, 95) == 9\nassert solution.brokenCalc(40, 49) == 17\nassert solution.brokenCalc(51, 81) == 12\nassert solution.brokenCalc(1, 38) == 9\nassert solution.brokenCalc(4, 53) == 7\nassert solution.brokenCalc(44, 38) == 6\nassert solution.brokenCalc(61, 67) == 29\nassert solution.brokenCalc(49, 54) == 23\nassert solution.brokenCalc(58, 56) == 2\nassert solution.brokenCalc(54, 89) == 11\nassert solution.brokenCalc(88, 56) == 32\nassert solution.brokenCalc(17, 90) == 10\nassert solution.brokenCalc(37, 35) == 2\nassert solution.brokenCalc(15, 49) == 6\nassert solution.brokenCalc(46, 24) == 22\nassert solution.brokenCalc(45, 88) == 2\nassert solution.brokenCalc(32, 31) == 1\nassert solution.brokenCalc(7, 28) == 2\nassert solution.brokenCalc(69, 13) == 56\nassert solution.brokenCalc(8, 69) == 10\nassert solution.brokenCalc(81, 98) == 33\nassert solution.brokenCalc(81, 1) == 80\nassert solution.brokenCalc(33, 59) == 5\nassert solution.brokenCalc(23, 61) == 11\nassert solution.brokenCalc(31, 75) == 15\nassert solution.brokenCalc(52, 79) == 14\nassert solution.brokenCalc(65, 74) == 29\nassert solution.brokenCalc(32, 41) == 13\nassert solution.brokenCalc(29, 18) == 11\nassert solution.brokenCalc(31, 80) == 13\nassert solution.brokenCalc(70, 33) == 37\nassert solution.brokenCalc(98, 28) == 70\nassert solution.brokenCalc(77, 61) == 16\nassert solution.brokenCalc(17, 16) == 1\nassert solution.brokenCalc(79, 9) == 70\nassert solution.brokenCalc(57, 30) == 27\nassert solution.brokenCalc(57, 13) == 44\nassert solution.brokenCalc(36, 2) == 34\nassert solution.brokenCalc(56, 59) == 28\nassert solution.brokenCalc(89, 75) == 14\nassert solution.brokenCalc(63, 35) == 28\nassert solution.brokenCalc(35, 88) == 15\nassert solution.brokenCalc(75, 75) == 0\nassert solution.brokenCalc(70, 71) == 36\nassert solution.brokenCalc(78, 24) == 54\nassert solution.brokenCalc(50, 57) == 23\nassert solution.brokenCalc(91, 62) == 29\nassert solution.brokenCalc(88, 82) == 6\nassert solution.brokenCalc(72, 9) == 63\nassert solution.brokenCalc(20, 93) == 13\nassert solution.brokenCalc(45, 64) == 14\nassert solution.brokenCalc(1, 21) == 8\nassert solution.brokenCalc(32, 60) == 3\nassert solution.brokenCalc(71, 99) == 23\nassert solution.brokenCalc(86, 72) == 14\nassert solution.brokenCalc(23, 76) == 6\nassert solution.brokenCalc(45, 6) == 39\nassert solution.brokenCalc(33, 61) == 4\nassert solution.brokenCalc(71, 94) == 25\nassert solution.brokenCalc(20, 74) == 4\nassert solution.brokenCalc(19, 75) == 3\nassert solution.brokenCalc(44, 48) == 21\nassert solution.brokenCalc(76, 8) == 68\nassert solution.brokenCalc(51, 83) == 11\nassert solution.brokenCalc(80, 6) == 74\nassert solution.brokenCalc(7, 17) == 6\nassert solution.brokenCalc(90, 10) == 80\nassert solution.brokenCalc(34, 79) == 17\nassert solution.brokenCalc(52, 86) == 10\nassert solution.brokenCalc(24, 69) == 10\nassert solution.brokenCalc(21, 13) == 8\nassert solution.brokenCalc(45, 52) == 20\nassert solution.brokenCalc(77, 94) == 31\nassert solution.brokenCalc(24, 55) == 13\nassert solution.brokenCalc(67, 93) == 22\nassert solution.brokenCalc(44, 61) == 15",
  "inefficient_solution": "class Solution:\n    def brokenCalc(self, startValue: int, target: int) -> int:\n        ans = []\n        while startValue < target:\n            if target & 1:\n                ans.append(target + 1)\n                target += 1\n            else:\n                ans.append(target >> 1)\n                target >>= 1\n        for _ in range(startValue - target):\n            ans.append(1)\n        return len(ans)",
  "is_python": true
}