{
  "problem_idx": 2375,
  "task_name": "Construct Smallest Number From DI String",
  "markdown_description": "\nYou are given a **0-indexed** string `pattern` of length `n` consisting of the characters `'I'` meaning **increasing** and `'D'` meaning **decreasing**.\n\n\nA **0-indexed** string `num` of length `n + 1` is created using the following conditions:\n\n\n* `num` consists of the digits `'1'` to `'9'`, where each digit is used **at most** once.\n* If `pattern[i] == 'I'`, then `num[i] < num[i + 1]`.\n* If `pattern[i] == 'D'`, then `num[i] > num[i + 1]`.\n\n\nReturn *the lexicographically **smallest** possible string* `num` *that meets the conditions.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** pattern = \"IIIDIDDD\"\n**Output:** \"123549876\"\n**Explanation:**At indices 0, 1, 2, and 4 we must have that num[i] < num[i+1].\nAt indices 3, 5, 6, and 7 we must have that num[i] > num[i+1].\nSome possible values of num are \"245639871\", \"135749862\", and \"123849765\".\nIt can be proven that \"123549876\" is the smallest possible num that meets the conditions.\nNote that \"123414321\" is not possible because the digit '1' is used more than once.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** pattern = \"DDD\"\n**Output:** \"4321\"\n**Explanation:**\nSome possible values of num are \"9876\", \"7321\", and \"8742\".\nIt can be proven that \"4321\" is the smallest possible num that meets the conditions.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= pattern.length <= 8`\n* `pattern` consists of only the letters `'I'` and `'D'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestNumber(self, pattern: str) -> str:\n        def dfs(u):\n            nonlocal ans\n            if ans:\n                return\n            if u == len(pattern) + 1:\n                ans = ''.join(t)\n                return\n            for i in range(1, 10):\n                if not vis[i]:\n                    if u and pattern[u - 1] == 'I' and int(t[-1]) >= i:\n                        continue\n                    if u and pattern[u - 1] == 'D' and int(t[-1]) <= i:\n                        continue\n                    vis[i] = True\n                    t.append(str(i))\n                    dfs(u + 1)\n                    vis[i] = False\n                    t.pop()\n\n        vis = [False] * 10\n        t = []\n        ans = None\n        dfs(0)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestNumber(self, pattern: str) -> str:\n        def dfs(u):\n            nonlocal ans\n            if ans:\n                return\n            if u == len(pattern) + 1:\n                ans = ''.join(t)\n                return\n            for i in range(1, 10):\n                if not vis[i]:\n                    if u and pattern[u - 1] == 'I' and int(t[-1]) >= i:\n                        continue\n                    if u and pattern[u - 1] == 'D' and int(t[-1]) <= i:\n                        continue\n                    vis[i] = True\n                    t.append(str(i))\n                    dfs(u + 1)\n                    vis[i] = False\n                    t.pop()\n\n        vis = [False] * 10\n        t = []\n        ans = None\n        dfs(0)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random pattern\n    pattern = \"\"\n    for _ in range(random.randint(1, 9)):\n        if random.randint(0, 1) == 0:\n            pattern += \"I\"\n        else:\n            pattern += \"D\"\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestNumber(pattern)\n\n    return pattern, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        pattern, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestNumber(pattern) == expected_result\n        print(f\"assert solution.smallestNumber(\\\"{pattern}\\\") == \\\"{expected_result}\\\"\")\n        test_case_generator_results.append(f\"assert solution.smallestNumber(\\\"{pattern}\\\") == \\\"{expected_result}\\\"\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestNumber(\"IDDDD\") == \"165432\"\nassert solution.smallestNumber(\"IDDIID\") == \"1432576\"\nassert solution.smallestNumber(\"DDII\") == \"32145\"\nassert solution.smallestNumber(\"DIDDID\") == \"2154376\"\nassert solution.smallestNumber(\"IDDDIDIDD\") == \"None\"\nassert solution.smallestNumber(\"DIIDII\") == \"2135467\"\nassert solution.smallestNumber(\"DDDD\") == \"54321\"\nassert solution.smallestNumber(\"IDII\") == \"13245\"\nassert solution.smallestNumber(\"DIDI\") == \"21435\"\nassert solution.smallestNumber(\"DDIIDD\") == \"3214765\"\nassert solution.smallestNumber(\"IIIDDIDDD\") == \"None\"\nassert solution.smallestNumber(\"IIDIIIIDI\") == \"None\"\nassert solution.smallestNumber(\"I\") == \"12\"\nassert solution.smallestNumber(\"D\") == \"21\"\nassert solution.smallestNumber(\"IDIII\") == \"132456\"\nassert solution.smallestNumber(\"IIDDD\") == \"126543\"\nassert solution.smallestNumber(\"IDIDDDD\") == \"13287654\"\nassert solution.smallestNumber(\"IIDIIDIDD\") == \"None\"\nassert solution.smallestNumber(\"IIII\") == \"12345\"\nassert solution.smallestNumber(\"IIDI\") == \"12435\"\nassert solution.smallestNumber(\"DD\") == \"321\"\nassert solution.smallestNumber(\"DIDIDDID\") == \"214376598\"\nassert solution.smallestNumber(\"DDDDD\") == \"654321\"\nassert solution.smallestNumber(\"DIDII\") == \"214356\"\nassert solution.smallestNumber(\"DDIDDDI\") == \"32176548\"\nassert solution.smallestNumber(\"DIDDDIDDD\") == \"None\"\nassert solution.smallestNumber(\"IIIDIDD\") == \"12354876\"\nassert solution.smallestNumber(\"I\") == \"12\"\nassert solution.smallestNumber(\"DDDDII\") == \"5432167\"\nassert solution.smallestNumber(\"I\") == \"12\"\nassert solution.smallestNumber(\"IIIDIIIID\") == \"None\"\nassert solution.smallestNumber(\"DDIII\") == \"321456\"\nassert solution.smallestNumber(\"DID\") == \"2143\"\nassert solution.smallestNumber(\"IDDDD\") == \"165432\"\nassert solution.smallestNumber(\"D\") == \"21\"\nassert solution.smallestNumber(\"IDIDIDIDD\") == \"None\"\nassert solution.smallestNumber(\"DIDII\") == \"214356\"\nassert solution.smallestNumber(\"IIIIIIIID\") == \"None\"\nassert solution.smallestNumber(\"IDDIIDD\") == \"14325876\"\nassert solution.smallestNumber(\"ID\") == \"132\"\nassert solution.smallestNumber(\"D\") == \"21\"\nassert solution.smallestNumber(\"IIIDIDD\") == \"12354876\"\nassert solution.smallestNumber(\"DIDDDDIDD\") == \"None\"\nassert solution.smallestNumber(\"DI\") == \"213\"\nassert solution.smallestNumber(\"DIDDDDI\") == \"21765438\"\nassert solution.smallestNumber(\"IDIIDI\") == \"1324657\"\nassert solution.smallestNumber(\"IIIIIDD\") == \"12345876\"\nassert solution.smallestNumber(\"DDDIDDDDI\") == \"None\"\nassert solution.smallestNumber(\"D\") == \"21\"\nassert solution.smallestNumber(\"IDD\") == \"1432\"\nassert solution.smallestNumber(\"I\") == \"12\"\nassert solution.smallestNumber(\"I\") == \"12\"\nassert solution.smallestNumber(\"D\") == \"21\"\nassert solution.smallestNumber(\"DDI\") == \"3214\"\nassert solution.smallestNumber(\"DIDIDDI\") == \"21437658\"\nassert solution.smallestNumber(\"IDIDDI\") == \"1326547\"\nassert solution.smallestNumber(\"DIIIIDIID\") == \"None\"\nassert solution.smallestNumber(\"IDD\") == \"1432\"\nassert solution.smallestNumber(\"IDIDDDI\") == \"13276548\"\nassert solution.smallestNumber(\"D\") == \"21\"\nassert solution.smallestNumber(\"III\") == \"1234\"\nassert solution.smallestNumber(\"IIIIIIID\") == \"123456798\"\nassert solution.smallestNumber(\"DDII\") == \"32145\"\nassert solution.smallestNumber(\"IIID\") == \"12354\"\nassert solution.smallestNumber(\"DDD\") == \"4321\"\nassert solution.smallestNumber(\"DDIIDID\") == \"32146587\"\nassert solution.smallestNumber(\"IIDD\") == \"12543\"\nassert solution.smallestNumber(\"DIIIIDDD\") == \"213459876\"\nassert solution.smallestNumber(\"DDDIIIDII\") == \"None\"\nassert solution.smallestNumber(\"IIDIDII\") == \"12436578\"\nassert solution.smallestNumber(\"DDIDDI\") == \"3216547\"\nassert solution.smallestNumber(\"IDIIII\") == \"1324567\"\nassert solution.smallestNumber(\"DI\") == \"213\"\nassert solution.smallestNumber(\"DIDDD\") == \"216543\"\nassert solution.smallestNumber(\"DDII\") == \"32145\"\nassert solution.smallestNumber(\"IIDIIDII\") == \"124357689\"\nassert solution.smallestNumber(\"DDDDDIDD\") == \"654321987\"\nassert solution.smallestNumber(\"IDDII\") == \"143256\"\nassert solution.smallestNumber(\"DDDDII\") == \"5432167\"\nassert solution.smallestNumber(\"IIDIIIIII\") == \"None\"\nassert solution.smallestNumber(\"IDDDI\") == \"154326\"\nassert solution.smallestNumber(\"IIDIDDDD\") == \"124398765\"\nassert solution.smallestNumber(\"DD\") == \"321\"\nassert solution.smallestNumber(\"IDIIDDDDD\") == \"None\"\nassert solution.smallestNumber(\"IIDIIIDD\") == \"124356987\"\nassert solution.smallestNumber(\"D\") == \"21\"\nassert solution.smallestNumber(\"IIDI\") == \"12435\"\nassert solution.smallestNumber(\"DDDIDD\") == \"4321765\"\nassert solution.smallestNumber(\"DDIDID\") == \"3215476\"\nassert solution.smallestNumber(\"DDI\") == \"3214\"\nassert solution.smallestNumber(\"D\") == \"21\"\nassert solution.smallestNumber(\"IIIII\") == \"123456\"\nassert solution.smallestNumber(\"IDI\") == \"1324\"\nassert solution.smallestNumber(\"DDI\") == \"3214\"\nassert solution.smallestNumber(\"DII\") == \"2134\"\nassert solution.smallestNumber(\"IIIII\") == \"123456\"\nassert solution.smallestNumber(\"IDIDDD\") == \"1327654\"\nassert solution.smallestNumber(\"IDDDDDDD\") == \"198765432\"\nassert solution.smallestNumber(\"DD\") == \"321\"\nassert solution.smallestNumber(\"DDD\") == \"4321\"",
  "inefficient_solution": "class Solution:\n    def smallestNumber(self, pattern: str) -> str:\n        def dfs(u, t, vis, ans):\n            if ans:\n                return\n            if u == len(pattern) + 1:\n                ans = t[:]\n                return\n            for i in range(1, 10):\n                if not vis[i]:\n                    for j in range(1, 10):\n                        if not vis[j]:\n                            if u and pattern[u - 1] == 'I' and j >= i:\n                                continue\n                            if u and pattern[u - 1] == 'D' and j <= i:\n                                continue\n                            vis[i] = True\n                            vis[j] = True\n                            t.append(str(j))\n                            dfs(u + 1, t, vis, ans)\n                            t.pop()\n                            vis[j] = False\n                    vis[i] = False\n\n        vis = [False] * 1000\n        t = []\n        ans = None\n        dfs(0, t, vis, ans)\n        return ''.join(ans)",
  "is_python": true
}