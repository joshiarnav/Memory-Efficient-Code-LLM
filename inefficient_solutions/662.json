{
  "problem_idx": 662,
  "task_name": "Maximum Width of Binary Tree",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the **maximum width** of the given tree*.\n\n\nThe **maximum width** of a tree is the maximum **width** among all levels.\n\n\nThe **width** of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\n\n\nIt is **guaranteed** that the answer will in the range of a **32-bit** signed integer.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0662.Maximum%20Width%20of%20Binary%20Tree/images/width1-tree.jpg)\n\n```\n\n**Input:** root = [1,3,2,5,3,null,9]\n**Output:** 4\n**Explanation:** The maximum width exists in the third level with length 4 (5,3,null,9).\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0662.Maximum%20Width%20of%20Binary%20Tree/images/maximum-width-of-binary-tree-v3.jpg)\n\n```\n\n**Input:** root = [1,3,2,5,null,null,9,6,null,7]\n**Output:** 7\n**Explanation:** The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0600-0699/0662.Maximum%20Width%20of%20Binary%20Tree/images/width3-tree.jpg)\n\n```\n\n**Input:** root = [1,3,2,5]\n**Output:** 2\n**Explanation:** The maximum width exists in the second level with length 2 (3,2).\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 3000]`.\n* `-100 <= Node.val <= 100`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        ans = 0\n        q = deque([(root, 1)])\n        while q:\n            ans = max(ans, q[-1][1] - q[0][1] + 1)\n            for _ in range(len(q)):\n                root, i = q.popleft()\n                if root.left:\n                    q.append((root.left, i << 1))\n                if root.right:\n                    q.append((root.right, i << 1 | 1))\n        return ans\n",
  "test_case_generator": "\nimport random\n\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        ans = 0\n        q = deque([(root, 1)])\n        while q:\n            ans = max(ans, q[-1][1] - q[0][1] + 1)\n            for _ in range(len(q)):\n                root, i = q.popleft()\n                if root.left:\n                    q.append((root.left, i << 1))\n                if root.right:\n                    q.append((root.right, i << 1 | 1))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random tree with defined constraints\n    # Randomly choose the number of tree nodes in the range [1, 5] (small test case)\n    num_nodes = random.randint(1, 5)\n    nodes = [TreeNode(val=random.randint(-100, 100)) for _ in range(num_nodes)]\n    root = nodes[0]\n    queue = deque([root])\n    count = 1\n    while queue:\n        node = queue.popleft()\n        if count < num_nodes:\n            node.left = nodes[count]\n            queue.append(node.left)\n            count += 1\n        if count < num_nodes:\n            node.right = nodes[count]\n            queue.append(node.right)\n            count += 1\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.widthOfBinaryTree(root)\n\n    return root, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.widthOfBinaryTree(root) == expected_result\n        test_case_generator_results.append(f\"assert solution.widthOfBinaryTree({root}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70dd0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70ed0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e50>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f50>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e50>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71010>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70dd0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70ed0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71050>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f10>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71050>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f50>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70ed0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70ed0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f50>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70ed0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71050>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e50>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f10>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f50>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71050>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71090>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71050>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70dd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f50>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71090>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70dd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70ed0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71010>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e50>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71090>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e50>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71090>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e50>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71010>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70dd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f50>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71010>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71090>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70ed0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70fd0>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71010>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70dd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71090>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f10>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70f90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70dd0>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71090>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e10>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70e90>) == 1\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f70d90>) == 2\nassert solution.widthOfBinaryTree(<__main__.TreeNode object at 0x7feef4f71050>) == 2",
  "inefficient_solution": "",
  "is_python": true
}