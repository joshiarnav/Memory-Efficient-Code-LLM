{
  "problem_idx": 509,
  "task_name": "Fibonacci Number",
  "markdown_description": "\nThe **Fibonacci numbers**, commonly denoted `F(n)` form a sequence, called the **Fibonacci sequence**, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,\n\n\n\n```\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\n```\n\nGiven `n`, calculate `F(n)`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** F(2) = F(1) + F(0) = 1 + 0 = 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** F(3) = F(2) + F(1) = 1 + 1 = 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 4\n**Output:** 3\n**Explanation:** F(4) = F(3) + F(2) = 2 + 1 = 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= n <= 30`\n\n\n",
  "canonical_solution": "class Solution:\n    def fib(self, n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def fib(self, n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random number\n    n = random.randint(0, 30)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.fib(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.fib(n) == expected_result\n        print(f\"assert solution.fib({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.fib({n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.fib(28) == 317811\nassert solution.fib(13) == 233\nassert solution.fib(3) == 2\nassert solution.fib(11) == 89\nassert solution.fib(2) == 1\nassert solution.fib(22) == 17711\nassert solution.fib(24) == 46368\nassert solution.fib(19) == 4181\nassert solution.fib(26) == 121393\nassert solution.fib(15) == 610\nassert solution.fib(2) == 1\nassert solution.fib(14) == 377\nassert solution.fib(12) == 144\nassert solution.fib(7) == 13\nassert solution.fib(4) == 3\nassert solution.fib(21) == 10946\nassert solution.fib(20) == 6765\nassert solution.fib(17) == 1597\nassert solution.fib(4) == 3\nassert solution.fib(25) == 75025\nassert solution.fib(1) == 1\nassert solution.fib(5) == 5\nassert solution.fib(4) == 3\nassert solution.fib(14) == 377\nassert solution.fib(11) == 89\nassert solution.fib(10) == 55\nassert solution.fib(10) == 55\nassert solution.fib(12) == 144\nassert solution.fib(27) == 196418\nassert solution.fib(10) == 55\nassert solution.fib(0) == 0\nassert solution.fib(21) == 10946\nassert solution.fib(25) == 75025\nassert solution.fib(24) == 46368\nassert solution.fib(20) == 6765\nassert solution.fib(24) == 46368\nassert solution.fib(26) == 121393\nassert solution.fib(9) == 34\nassert solution.fib(15) == 610\nassert solution.fib(30) == 832040\nassert solution.fib(8) == 21\nassert solution.fib(26) == 121393\nassert solution.fib(16) == 987\nassert solution.fib(15) == 610\nassert solution.fib(4) == 3\nassert solution.fib(11) == 89\nassert solution.fib(10) == 55\nassert solution.fib(28) == 317811\nassert solution.fib(30) == 832040\nassert solution.fib(30) == 832040\nassert solution.fib(18) == 2584\nassert solution.fib(1) == 1\nassert solution.fib(2) == 1\nassert solution.fib(5) == 5\nassert solution.fib(8) == 21\nassert solution.fib(8) == 21\nassert solution.fib(15) == 610\nassert solution.fib(29) == 514229\nassert solution.fib(20) == 6765\nassert solution.fib(18) == 2584\nassert solution.fib(13) == 233\nassert solution.fib(10) == 55\nassert solution.fib(1) == 1\nassert solution.fib(5) == 5\nassert solution.fib(13) == 233\nassert solution.fib(0) == 0\nassert solution.fib(11) == 89\nassert solution.fib(1) == 1\nassert solution.fib(11) == 89\nassert solution.fib(23) == 28657\nassert solution.fib(29) == 514229\nassert solution.fib(26) == 121393\nassert solution.fib(10) == 55\nassert solution.fib(2) == 1\nassert solution.fib(6) == 8\nassert solution.fib(9) == 34\nassert solution.fib(14) == 377\nassert solution.fib(28) == 317811\nassert solution.fib(26) == 121393\nassert solution.fib(4) == 3\nassert solution.fib(21) == 10946\nassert solution.fib(17) == 1597\nassert solution.fib(9) == 34\nassert solution.fib(3) == 2\nassert solution.fib(3) == 2\nassert solution.fib(28) == 317811\nassert solution.fib(0) == 0\nassert solution.fib(21) == 10946\nassert solution.fib(1) == 1\nassert solution.fib(5) == 5\nassert solution.fib(29) == 514229\nassert solution.fib(4) == 3\nassert solution.fib(5) == 5\nassert solution.fib(18) == 2584\nassert solution.fib(29) == 514229\nassert solution.fib(28) == 317811\nassert solution.fib(15) == 610\nassert solution.fib(11) == 89\nassert solution.fib(18) == 2584\nassert solution.fib(7) == 13",
  "inefficient_solution": "class Solution:\n    def fib(self, n: int) -> int:\n        fib_array = [0, 1] + [0] * (n - 1)\n        for i in range(2, n + 1):\n            fib_array[i] = fib_array[i - 1] + fib_array[i - 2]\n        return fib_array[n]",
  "is_python": true
}