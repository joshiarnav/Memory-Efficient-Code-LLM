{
  "problem_idx": 164,
  "task_name": "Maximum Gap",
  "markdown_description": "\nGiven an integer array `nums`, return *the maximum difference between two successive elements in its sorted form*. If the array contains less than two elements, return `0`.\n\n\nYou must write an algorithm that runs in linear time and uses linear extra space.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,6,9,1]\n**Output:** 3\n**Explanation:** The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10]\n**Output:** 0\n**Explanation:** The array contains less than 2 elements, therefore return 0.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `0 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 0\n        mi, mx = min(nums), max(nums)\n        bucket_size = max(1, (mx - mi) // (n - 1))\n        bucket_count = (mx - mi) // bucket_size + 1\n        buckets = [[inf, -inf] for _ in range(bucket_count)]\n        for v in nums:\n            i = (v - mi) // bucket_size\n            buckets[i][0] = min(buckets[i][0], v)\n            buckets[i][1] = max(buckets[i][1], v)\n        ans = 0\n        prev = inf\n        for curmin, curmax in buckets:\n            if curmin > curmax:\n                continue\n            ans = max(ans, curmin - prev)\n            prev = curmax\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 0\n        mi, mx = min(nums), max(nums)\n        bucket_size = max(1, (mx - mi) // (n - 1))\n        bucket_count = (mx - mi) // bucket_size + 1\n        buckets = [[float('inf'), -float('inf')] for _ in range(bucket_count)]\n        for v in nums:\n            i = (v - mi) // bucket_size\n            buckets[i][0] = min(buckets[i][0], v)\n            buckets[i][1] = max(buckets[i][1], v)\n        ans = 0\n        prev = float('inf')\n        for curmin, curmax in buckets:\n            if curmin > curmax:\n                continue\n            ans = max(ans, curmin - prev)\n            prev = curmax\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumGap(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumGap(nums) == expected_result\n        print(f\"assert solution.maximumGap({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumGap({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumGap([63, 8, 71, 65, 26, 37, 12, 78]) == 26\nassert solution.maximumGap([13, 14, 71, 66, 47, 36, 61, 7, 3, 2]) == 22\nassert solution.maximumGap([58, 68, 76, 88, 59, 7]) == 51\nassert solution.maximumGap([25, 8, 70, 42, 85, 26, 73, 62]) == 20\nassert solution.maximumGap([100, 53, 95, 81, 96, 28, 48, 89, 80, 13]) == 27\nassert solution.maximumGap([31, 1, 27, 11, 8, 76, 53, 63, 72, 25]) == 22\nassert solution.maximumGap([2, 91, 56, 100, 80, 12, 17, 5, 14, 81]) == 39\nassert solution.maximumGap([77, 36]) == 41\nassert solution.maximumGap([87, 56]) == 31\nassert solution.maximumGap([73, 98, 15, 48, 23, 36]) == 25\nassert solution.maximumGap([71, 84, 34, 28, 60, 49, 61, 8]) == 20\nassert solution.maximumGap([38, 69]) == 31\nassert solution.maximumGap([71, 60]) == 11\nassert solution.maximumGap([75, 99, 59, 80, 85]) == 16\nassert solution.maximumGap([27, 98, 82]) == 55\nassert solution.maximumGap([40, 27, 74, 49, 23, 17, 69, 16, 30]) == 20\nassert solution.maximumGap([34, 89, 39]) == 50\nassert solution.maximumGap([61, 57, 65, 23, 46, 96, 92, 40, 47]) == 27\nassert solution.maximumGap([17, 25, 9]) == 8\nassert solution.maximumGap([41, 3, 74, 96]) == 38\nassert solution.maximumGap([79, 73, 15, 95, 39, 43, 82, 18]) == 30\nassert solution.maximumGap([7, 13, 25, 10]) == 12\nassert solution.maximumGap([10, 81]) == 71\nassert solution.maximumGap([96, 82]) == 14\nassert solution.maximumGap([53, 52]) == 1\nassert solution.maximumGap([25, 21, 26, 56, 30]) == 26\nassert solution.maximumGap([53, 73, 25]) == 28\nassert solution.maximumGap([76, 69, 8]) == 61\nassert solution.maximumGap([24, 22, 48, 59, 39, 14, 62, 13]) == 15\nassert solution.maximumGap([80, 76, 84, 68, 8, 59, 14, 93]) == 45\nassert solution.maximumGap([28, 79, 35, 90, 83, 20, 36, 98]) == 43\nassert solution.maximumGap([77, 15]) == 62\nassert solution.maximumGap([90, 57, 36]) == 33\nassert solution.maximumGap([70, 13, 100, 59, 8, 31]) == 30\nassert solution.maximumGap([65, 48]) == 17\nassert solution.maximumGap([22, 82, 85, 25, 69]) == 44\nassert solution.maximumGap([42, 83, 28]) == 41\nassert solution.maximumGap([50, 85, 94, 74, 19, 61, 4, 90]) == 31\nassert solution.maximumGap([73, 16, 21, 70, 4]) == 49\nassert solution.maximumGap([63, 44, 43]) == 19\nassert solution.maximumGap([91, 70, 1, 38, 30]) == 32\nassert solution.maximumGap([12, 89, 100]) == 77\nassert solution.maximumGap([17, 80]) == 63\nassert solution.maximumGap([49, 50, 75, 53, 56, 89, 6, 24]) == 25\nassert solution.maximumGap([92, 87, 24, 46, 61]) == 26\nassert solution.maximumGap([6, 13, 45, 68, 61]) == 32\nassert solution.maximumGap([35, 40, 66]) == 26\nassert solution.maximumGap([95, 49, 21, 28]) == 46\nassert solution.maximumGap([11, 93, 46, 71, 26, 62]) == 22\nassert solution.maximumGap([42, 24, 61, 26, 69, 39, 36]) == 19\nassert solution.maximumGap([40, 73, 13, 21, 15, 50, 51, 55, 91]) == 19\nassert solution.maximumGap([67, 56, 33, 49, 69, 100]) == 31\nassert solution.maximumGap([26, 27, 35, 74, 90, 91, 45, 78, 47, 31]) == 27\nassert solution.maximumGap([95, 30, 57]) == 38\nassert solution.maximumGap([4, 17]) == 13\nassert solution.maximumGap([51, 85, 97, 53, 60, 89, 46]) == 25\nassert solution.maximumGap([93, 49, 96]) == 44\nassert solution.maximumGap([1, 93, 64, 73, 23, 72]) == 41\nassert solution.maximumGap([81, 25, 3, 9, 57, 45, 21, 32]) == 24\nassert solution.maximumGap([90, 22, 3, 59, 85, 34, 30, 99, 32, 27]) == 26\nassert solution.maximumGap([20, 64]) == 44\nassert solution.maximumGap([50, 6, 67, 84, 89, 16, 80, 40]) == 24\nassert solution.maximumGap([45, 32, 74, 3]) == 29\nassert solution.maximumGap([65, 79, 22, 5, 52, 85, 8, 98]) == 30\nassert solution.maximumGap([62, 21, 57, 97, 65]) == 36\nassert solution.maximumGap([15, 9]) == 6\nassert solution.maximumGap([72, 83, 95, 64]) == 12\nassert solution.maximumGap([48, 9, 28, 46, 56, 99, 94, 64]) == 30\nassert solution.maximumGap([80, 78, 37, 48, 44, 45]) == 30\nassert solution.maximumGap([3, 98]) == 95\nassert solution.maximumGap([76, 29, 64, 50, 77, 1, 46, 3, 11, 21]) == 17\nassert solution.maximumGap([13, 76, 14, 24, 38, 18, 56, 50, 88]) == 20\nassert solution.maximumGap([10, 58, 62, 100, 18, 73, 8, 76, 29]) == 29\nassert solution.maximumGap([91, 100]) == 9\nassert solution.maximumGap([37, 86]) == 49\nassert solution.maximumGap([72, 56, 16, 61, 89, 43, 68]) == 27\nassert solution.maximumGap([98, 71, 100, 85, 69, 93, 23, 30, 82]) == 39\nassert solution.maximumGap([40, 47]) == 7\nassert solution.maximumGap([3, 4, 75, 16, 18, 37, 41]) == 34\nassert solution.maximumGap([38, 69]) == 31\nassert solution.maximumGap([15, 42, 14, 43, 83, 99]) == 40\nassert solution.maximumGap([67, 14, 2, 54]) == 40\nassert solution.maximumGap([87, 77, 76]) == 10\nassert solution.maximumGap([64, 36]) == 28\nassert solution.maximumGap([62, 70, 3, 60, 67, 82, 30, 29, 86]) == 30\nassert solution.maximumGap([65, 45]) == 20\nassert solution.maximumGap([81, 31]) == 50\nassert solution.maximumGap([87, 31, 18, 4, 68, 45, 11, 15, 58]) == 19\nassert solution.maximumGap([34, 29, 69]) == 35\nassert solution.maximumGap([46, 4, 86, 67, 90]) == 42\nassert solution.maximumGap([73, 53, 61, 14, 42, 31]) == 17\nassert solution.maximumGap([20, 29, 13, 24, 37, 96]) == 59\nassert solution.maximumGap([84, 73, 12]) == 61\nassert solution.maximumGap([73, 100]) == 27\nassert solution.maximumGap([91, 37, 79, 22]) == 42\nassert solution.maximumGap([5, 84, 91, 38, 58, 23, 33, 67, 85]) == 20\nassert solution.maximumGap([52, 87, 74, 32, 98]) == 22\nassert solution.maximumGap([91, 59, 9]) == 50\nassert solution.maximumGap([93, 7]) == 86\nassert solution.maximumGap([49, 38, 33, 70, 54, 2, 10]) == 23",
  "inefficient_solution": "class Solution:\n    def maximumGap(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n < 2:\n            return 0\n        nums_copy = [x for x in nums]  # create a copy of the entire list\n        sorted_nums = sorted(nums_copy)  # sort the entire list\n        max_diff = 0\n        for i in range(1, n):\n            if sorted_nums[i] - sorted_nums[i-1] > max_diff:\n                max_diff = sorted_nums[i] - sorted_nums[i-1]\n        return max_diff",
  "is_python": true
}