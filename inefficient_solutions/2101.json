{
  "problem_idx": 2101,
  "task_name": "Detonate the Maximum Bombs",
  "markdown_description": "\nYou are given a list of bombs. The **range** of a bomb is defined as the area where its effect can be felt. This area is in the shape of a **circle** with the center as the location of the bomb.\n\n\nThe bombs are represented by a **0-indexed** 2D integer array `bombs` where `bombs[i] = [xi, yi, ri]`. `xi` and `yi` denote the X-coordinate and Y-coordinate of the location of the `ith` bomb, whereas `ri` denotes the **radius** of its range.\n\n\nYou may choose to detonate a **single** bomb. When a bomb is detonated, it will detonate **all bombs** that lie in its range. These bombs will further detonate the bombs that lie in their ranges.\n\n\nGiven the list of `bombs`, return *the **maximum** number of bombs that can be detonated if you are allowed to detonate **only one** bomb*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2101.Detonate%20the%20Maximum%20Bombs/images/desmos-eg-3.png)\n\n```\n\n**Input:** bombs = [[2,1,3],[6,1,4]]\n**Output:** 2\n**Explanation:**\nThe above figure shows the positions and ranges of the 2 bombs.\nIf we detonate the left bomb, the right bomb will not be affected.\nBut if we detonate the right bomb, both bombs will be detonated.\nSo the maximum bombs that can be detonated is max(1, 2) = 2.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2101.Detonate%20the%20Maximum%20Bombs/images/desmos-eg-2.png)\n\n```\n\n**Input:** bombs = [[1,1,5],[10,10,5]]\n**Output:** 1\n**Explanation:**Detonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2101.Detonate%20the%20Maximum%20Bombs/images/desmos-eg1.png)\n\n```\n\n**Input:** bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]\n**Output:** 5\n**Explanation:**\nThe best bomb to detonate is bomb 0 because:\n- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.\n- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.\n- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.\nThus all 5 bombs are detonated.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= bombs.length\u00a0<= 100`\n* `bombs[i].length == 3`\n* `1 <= xi, yi, ri <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumDetonation(self, bombs: List[List[int]]) -> int:\n        def check(i, j):\n            if i == j:\n                return False\n            x, y = bombs[i][0] - bombs[j][0], bombs[i][1] - bombs[j][1]\n            r = bombs[i][2]\n            return r * r >= x * x + y * y\n\n        g = defaultdict(list)\n        n = len(bombs)\n        for i in range(n):\n            for j in range(n):\n                if check(i, j):\n                    g[i].append(j)\n        ans = 0\n        for k in range(n):\n            q = deque([k])\n            vis = [False] * n\n            vis[k] = True\n            cnt = 0\n            while q:\n                i = q.popleft()\n                cnt += 1\n                for j in g[i]:\n                    if not vis[j]:\n                        vis[j] = True\n                        q.append(j)\n            ans = max(ans, cnt)\n        return ans\n",
  "test_case_generator": "\nimport random\nimport math\nfrom collections import defaultdict, deque\n\nclass Solution:\n    def maximumDetonation(self, bombs):\n        def check(i, j):\n            if i == j:\n                return False\n            x, y = bombs[i][0] - bombs[j][0], bombs[i][1] - bombs[j][1]\n            r = bombs[i][2]\n            return r * r >= x * x + y * y\n\n        g = defaultdict(list)\n        n = len(bombs)\n        for i in range(n):\n            for j in range(n):\n                if check(i, j):\n                    g[i].append(j)\n        ans = 0\n        for k in range(n):\n            q = deque([k])\n            vis = [False] * n\n            vis[k] = True\n            cnt = 0\n            while q:\n                i = q.popleft()\n                cnt += 1\n                for j in g[i]:\n                    if not vis[j]:\n                        vis[j] = True\n                        q.append(j)\n            ans = max(ans, cnt)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random bombs list\n    bombs = []\n    for _ in range(random.randint(1, 10)):\n        x = random.randint(1, 100)\n        y = random.randint(1, 100)\n        r = random.randint(1, 10)\n        bomb = [x, y, r]\n        bombs.append(bomb)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumDetonation(bombs)\n\n    return bombs, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        bombs, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumDetonation(bombs) == expected_result\n        print(f\"assert solution.maximumDetonation({bombs}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumDetonation({bombs}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumDetonation([[75, 54, 5], [38, 57, 5], [44, 33, 6], [82, 95, 7], [81, 26, 5], [59, 59, 10], [6, 27, 10], [7, 17, 3], [66, 96, 7]]) == 1\nassert solution.maximumDetonation([[96, 11, 7], [42, 36, 4], [7, 13, 3], [40, 54, 9], [18, 6, 6], [77, 94, 9], [39, 63, 4]]) == 1\nassert solution.maximumDetonation([[14, 90, 1], [67, 29, 2], [71, 76, 7], [72, 23, 3], [15, 67, 2], [72, 9, 10], [19, 84, 10], [27, 90, 9], [92, 16, 6]]) == 3\nassert solution.maximumDetonation([[64, 68, 5], [91, 75, 2], [6, 69, 4], [44, 31, 3], [18, 33, 6]]) == 1\nassert solution.maximumDetonation([[46, 7, 7], [63, 8, 4], [75, 25, 3], [94, 24, 7], [3, 13, 1], [72, 4, 6], [81, 61, 8], [92, 85, 10], [43, 89, 10]]) == 1\nassert solution.maximumDetonation([[86, 32, 1], [59, 66, 8], [74, 89, 2], [41, 61, 9], [83, 82, 2], [19, 18, 10], [94, 56, 9], [22, 46, 2], [8, 63, 8]]) == 1\nassert solution.maximumDetonation([[14, 100, 3], [16, 44, 9]]) == 1\nassert solution.maximumDetonation([[57, 43, 9], [48, 82, 5], [31, 69, 2], [91, 98, 3], [90, 32, 8], [62, 94, 3], [48, 7, 10]]) == 1\nassert solution.maximumDetonation([[19, 48, 10], [78, 21, 4], [35, 69, 3], [69, 83, 2]]) == 1\nassert solution.maximumDetonation([[95, 86, 9], [16, 45, 7], [84, 94, 3], [81, 81, 2], [97, 62, 8], [22, 10, 8], [4, 47, 8], [37, 41, 8], [19, 49, 6], [94, 38, 1]]) == 2\nassert solution.maximumDetonation([[88, 65, 5], [36, 58, 1], [92, 27, 4], [51, 53, 10]]) == 1\nassert solution.maximumDetonation([[68, 4, 2], [81, 76, 10], [51, 22, 10]]) == 1\nassert solution.maximumDetonation([[21, 57, 2], [83, 51, 7]]) == 1\nassert solution.maximumDetonation([[33, 22, 10], [99, 45, 4], [49, 20, 4], [83, 21, 5], [85, 74, 5], [66, 79, 6]]) == 1\nassert solution.maximumDetonation([[34, 30, 7], [72, 81, 10], [41, 56, 3], [1, 4, 2]]) == 1\nassert solution.maximumDetonation([[43, 25, 7], [52, 39, 10]]) == 1\nassert solution.maximumDetonation([[61, 5, 9], [78, 13, 4], [16, 78, 8], [91, 68, 9], [12, 84, 5], [51, 71, 8], [4, 71, 9]]) == 2\nassert solution.maximumDetonation([[75, 62, 1], [82, 100, 10], [94, 18, 9], [66, 43, 6], [60, 31, 10], [55, 36, 2], [82, 26, 5], [1, 22, 9], [70, 77, 2]]) == 2\nassert solution.maximumDetonation([[92, 2, 9], [69, 53, 10], [39, 96, 8], [54, 46, 7], [21, 20, 2], [16, 53, 1], [33, 58, 3], [32, 71, 7], [75, 97, 9], [19, 18, 8]]) == 2\nassert solution.maximumDetonation([[18, 87, 6], [55, 20, 10], [23, 26, 6], [99, 65, 6]]) == 1\nassert solution.maximumDetonation([[81, 46, 6], [13, 28, 4]]) == 1\nassert solution.maximumDetonation([[90, 47, 7], [21, 48, 8], [60, 97, 1], [47, 64, 2]]) == 1\nassert solution.maximumDetonation([[95, 95, 2], [50, 97, 10], [62, 60, 9], [75, 81, 9], [57, 3, 2], [70, 37, 4], [69, 27, 8], [94, 58, 9], [85, 25, 1]]) == 1\nassert solution.maximumDetonation([[82, 73, 6], [32, 6, 6], [35, 30, 9], [7, 75, 1], [83, 42, 4], [20, 78, 4], [71, 26, 1]]) == 1\nassert solution.maximumDetonation([[74, 36, 9], [59, 17, 4]]) == 1\nassert solution.maximumDetonation([[74, 7, 4], [59, 72, 4], [1, 78, 2]]) == 1\nassert solution.maximumDetonation([[96, 80, 1], [65, 65, 10], [93, 81, 7], [57, 5, 8], [41, 60, 1], [84, 86, 1], [71, 3, 2], [29, 88, 3]]) == 2\nassert solution.maximumDetonation([[99, 73, 5], [47, 59, 6], [49, 55, 10], [75, 33, 1]]) == 2\nassert solution.maximumDetonation([[62, 38, 7], [36, 81, 3], [41, 53, 4], [22, 55, 4], [78, 71, 8], [36, 95, 1], [53, 74, 7], [90, 9, 3]]) == 1\nassert solution.maximumDetonation([[94, 18, 2]]) == 1\nassert solution.maximumDetonation([[98, 41, 4], [19, 96, 4], [45, 96, 8], [18, 62, 9], [65, 25, 9], [61, 7, 1]]) == 1\nassert solution.maximumDetonation([[80, 93, 4], [84, 74, 9]]) == 1\nassert solution.maximumDetonation([[12, 73, 2], [41, 69, 10], [99, 65, 10], [38, 78, 6], [62, 3, 2], [87, 83, 10], [51, 79, 8], [31, 79, 2], [81, 73, 7], [64, 39, 10]]) == 2\nassert solution.maximumDetonation([[24, 85, 8], [53, 54, 6], [94, 82, 4], [53, 67, 5]]) == 1\nassert solution.maximumDetonation([[15, 82, 10], [21, 39, 9], [98, 27, 2], [24, 76, 2], [22, 90, 7], [16, 90, 6], [80, 67, 1], [26, 23, 4], [62, 44, 8]]) == 3\nassert solution.maximumDetonation([[56, 98, 6], [70, 19, 8], [36, 28, 4]]) == 1\nassert solution.maximumDetonation([[90, 30, 3], [39, 85, 5], [44, 76, 2], [69, 61, 5], [84, 89, 1], [19, 75, 6], [83, 54, 10], [76, 89, 6], [28, 24, 4], [73, 63, 7]]) == 2\nassert solution.maximumDetonation([[47, 81, 2], [55, 90, 3], [33, 61, 8], [77, 72, 10], [43, 83, 4], [33, 4, 1], [66, 30, 7], [22, 24, 5], [7, 77, 9]]) == 1\nassert solution.maximumDetonation([[41, 31, 4], [80, 38, 4], [44, 85, 2], [69, 6, 3], [63, 23, 1], [82, 79, 3], [81, 65, 4], [90, 95, 10], [16, 32, 7], [7, 90, 2]]) == 1\nassert solution.maximumDetonation([[39, 35, 2], [95, 42, 3], [81, 68, 10], [18, 23, 9], [8, 59, 1], [52, 51, 2], [60, 31, 6], [8, 28, 2]]) == 1\nassert solution.maximumDetonation([[86, 10, 9], [67, 83, 9], [96, 22, 5]]) == 1\nassert solution.maximumDetonation([[17, 26, 2], [11, 98, 4], [56, 85, 4], [7, 22, 4], [58, 36, 9]]) == 1\nassert solution.maximumDetonation([[48, 38, 2]]) == 1\nassert solution.maximumDetonation([[88, 38, 4], [68, 53, 8]]) == 1\nassert solution.maximumDetonation([[43, 84, 9], [48, 95, 3], [1, 22, 3]]) == 1\nassert solution.maximumDetonation([[44, 7, 7], [52, 40, 2], [30, 19, 1], [77, 49, 9]]) == 1\nassert solution.maximumDetonation([[98, 78, 2], [20, 38, 9], [63, 1, 5], [90, 30, 10], [71, 14, 7], [84, 24, 2]]) == 2\nassert solution.maximumDetonation([[27, 58, 10], [65, 4, 10], [20, 62, 7], [6, 33, 1], [7, 23, 10], [7, 66, 9], [95, 2, 1], [69, 9, 2], [82, 72, 10], [23, 97, 6]]) == 2\nassert solution.maximumDetonation([[43, 77, 2], [10, 16, 1], [40, 35, 5], [43, 11, 6], [46, 6, 10], [100, 79, 9], [56, 50, 4], [32, 17, 5], [86, 99, 3], [27, 69, 1]]) == 2\nassert solution.maximumDetonation([[70, 93, 3], [89, 63, 1], [42, 72, 4], [90, 17, 9], [70, 90, 4], [49, 88, 6], [7, 7, 2]]) == 2\nassert solution.maximumDetonation([[91, 84, 9], [93, 74, 2], [99, 71, 3], [10, 94, 10], [89, 87, 4], [78, 98, 6], [51, 59, 10], [50, 20, 5]]) == 2\nassert solution.maximumDetonation([[38, 80, 1], [9, 55, 2], [66, 10, 2], [15, 98, 6]]) == 1\nassert solution.maximumDetonation([[39, 19, 4], [93, 81, 6], [20, 17, 3], [67, 12, 5]]) == 1\nassert solution.maximumDetonation([[13, 64, 6], [80, 83, 3], [84, 58, 10]]) == 1\nassert solution.maximumDetonation([[55, 92, 8], [77, 82, 10], [25, 9, 5], [18, 5, 2], [93, 90, 9], [53, 51, 3], [88, 94, 8], [20, 47, 9]]) == 2\nassert solution.maximumDetonation([[44, 21, 1], [21, 65, 3], [21, 98, 3], [1, 71, 3], [19, 37, 2], [43, 96, 7], [82, 46, 7]]) == 1\nassert solution.maximumDetonation([[97, 4, 4], [21, 60, 4], [18, 50, 4], [66, 46, 3], [10, 13, 8]]) == 1\nassert solution.maximumDetonation([[84, 72, 6], [92, 88, 8], [37, 29, 7], [65, 74, 7], [8, 41, 1], [13, 52, 1], [28, 27, 7], [96, 11, 9], [1, 61, 6]]) == 1\nassert solution.maximumDetonation([[96, 74, 10], [84, 67, 10], [91, 72, 9], [63, 63, 8], [62, 57, 1], [25, 7, 8], [22, 26, 7], [62, 81, 4], [35, 71, 1]]) == 3\nassert solution.maximumDetonation([[97, 70, 1], [78, 17, 8], [18, 18, 1], [61, 41, 1], [80, 74, 2], [23, 93, 6], [39, 24, 3], [67, 64, 6]]) == 1\nassert solution.maximumDetonation([[53, 21, 4], [1, 91, 5]]) == 1\nassert solution.maximumDetonation([[83, 57, 8]]) == 1\nassert solution.maximumDetonation([[80, 44, 9], [64, 39, 9], [91, 88, 9], [97, 65, 10], [21, 97, 5], [31, 54, 4], [79, 54, 6], [92, 98, 6], [19, 28, 10], [57, 53, 7]]) == 1\nassert solution.maximumDetonation([[93, 59, 4], [64, 39, 10], [35, 89, 9], [76, 32, 3], [45, 58, 5], [11, 26, 9], [16, 14, 5], [100, 50, 10], [46, 72, 6], [65, 75, 8]]) == 1\nassert solution.maximumDetonation([[61, 40, 1], [25, 80, 10], [3, 51, 2], [89, 36, 7], [32, 27, 3], [68, 80, 10], [31, 77, 7]]) == 2\nassert solution.maximumDetonation([[15, 41, 10], [71, 76, 3], [61, 52, 1], [7, 89, 5], [5, 21, 8]]) == 1\nassert solution.maximumDetonation([[2, 13, 5], [56, 77, 4], [11, 28, 3], [23, 36, 6], [92, 88, 6]]) == 1\nassert solution.maximumDetonation([[52, 72, 2], [18, 47, 8], [61, 45, 2], [19, 32, 7], [39, 56, 6]]) == 1\nassert solution.maximumDetonation([[45, 51, 9], [97, 25, 1]]) == 1\nassert solution.maximumDetonation([[9, 97, 7], [34, 16, 6], [35, 84, 7], [39, 82, 1], [27, 57, 7]]) == 2\nassert solution.maximumDetonation([[54, 89, 1], [12, 95, 6], [18, 17, 2]]) == 1\nassert solution.maximumDetonation([[57, 96, 7], [56, 39, 10], [67, 95, 4], [43, 52, 9], [76, 48, 9], [90, 58, 8], [30, 43, 7]]) == 1\nassert solution.maximumDetonation([[82, 39, 4], [3, 49, 8], [70, 42, 7], [98, 80, 1], [16, 33, 6], [98, 72, 3], [43, 88, 6], [76, 2, 5], [75, 7, 3]]) == 1\nassert solution.maximumDetonation([[17, 8, 5], [81, 97, 2], [82, 83, 4], [57, 67, 6], [45, 20, 1]]) == 1\nassert solution.maximumDetonation([[23, 27, 10], [13, 85, 8], [53, 23, 10], [69, 22, 6]]) == 1\nassert solution.maximumDetonation([[93, 80, 1], [25, 21, 6]]) == 1\nassert solution.maximumDetonation([[48, 54, 7], [44, 87, 6], [2, 32, 8], [96, 48, 1], [67, 9, 2], [77, 31, 7], [9, 53, 4], [39, 84, 5]]) == 2\nassert solution.maximumDetonation([[8, 55, 3], [89, 53, 10], [88, 36, 2], [39, 35, 6], [80, 66, 3], [17, 34, 4], [37, 1, 6]]) == 1\nassert solution.maximumDetonation([[27, 66, 9], [26, 1, 1], [44, 40, 1], [86, 93, 9], [85, 31, 7], [42, 41, 2], [1, 37, 1]]) == 1\nassert solution.maximumDetonation([[39, 5, 8], [74, 43, 9], [16, 82, 4], [77, 9, 1], [62, 66, 8]]) == 1\nassert solution.maximumDetonation([[89, 64, 2], [97, 35, 7]]) == 1\nassert solution.maximumDetonation([[50, 82, 2]]) == 1\nassert solution.maximumDetonation([[8, 84, 2], [25, 3, 7], [16, 32, 8], [55, 44, 7], [10, 58, 4], [14, 47, 7], [38, 59, 2]]) == 1\nassert solution.maximumDetonation([[100, 71, 10], [1, 17, 6], [74, 97, 3], [35, 61, 8], [100, 67, 2]]) == 2\nassert solution.maximumDetonation([[45, 6, 1], [47, 3, 3], [67, 2, 8], [88, 44, 7], [71, 85, 2], [45, 1, 5], [1, 64, 9], [24, 36, 6], [19, 33, 10], [99, 71, 3]]) == 3\nassert solution.maximumDetonation([[52, 80, 2], [91, 62, 7], [91, 21, 10]]) == 1\nassert solution.maximumDetonation([[56, 36, 3], [14, 64, 4], [27, 40, 10], [3, 90, 2], [24, 91, 7]]) == 1\nassert solution.maximumDetonation([[1, 23, 10], [10, 56, 8], [18, 2, 3], [13, 25, 6]]) == 1\nassert solution.maximumDetonation([[38, 81, 6], [82, 36, 3], [36, 86, 2], [38, 97, 3], [50, 20, 2], [37, 11, 9], [53, 26, 9], [16, 14, 8]]) == 2\nassert solution.maximumDetonation([[29, 39, 2], [93, 6, 4], [59, 13, 2], [1, 27, 6], [37, 73, 2], [3, 13, 2], [22, 39, 8]]) == 2\nassert solution.maximumDetonation([[81, 45, 7], [78, 52, 6], [61, 11, 2], [100, 41, 8], [100, 11, 3], [48, 76, 8]]) == 1\nassert solution.maximumDetonation([[34, 98, 3], [60, 63, 7], [31, 12, 6], [80, 6, 9], [8, 66, 8], [83, 23, 4], [55, 62, 7], [52, 26, 2], [38, 44, 3]]) == 2\nassert solution.maximumDetonation([[80, 42, 8], [53, 16, 9], [53, 38, 9], [56, 99, 2], [16, 26, 9], [65, 55, 5]]) == 1\nassert solution.maximumDetonation([[34, 7, 4], [21, 55, 1]]) == 1\nassert solution.maximumDetonation([[21, 55, 7], [50, 62, 2], [47, 89, 7], [10, 75, 4], [93, 58, 7], [50, 6, 7], [94, 95, 7], [54, 55, 5], [56, 71, 2], [76, 83, 6]]) == 1\nassert solution.maximumDetonation([[97, 56, 4], [80, 49, 4], [90, 10, 8], [54, 89, 4]]) == 1\nassert solution.maximumDetonation([[65, 72, 2], [34, 33, 3], [46, 53, 2], [93, 23, 3], [15, 96, 5], [86, 93, 3], [67, 91, 2]]) == 1\nassert solution.maximumDetonation([[59, 1, 9], [99, 20, 8], [39, 48, 1], [81, 2, 5]]) == 1\nassert solution.maximumDetonation([[56, 94, 6], [12, 19, 1], [78, 11, 10], [28, 20, 7], [28, 7, 10], [83, 50, 7], [69, 79, 7], [43, 36, 8], [81, 37, 9], [30, 5, 9]]) == 2\nassert solution.maximumDetonation([[92, 38, 6], [26, 39, 6], [57, 35, 2]]) == 1",
  "inefficient_solution": "class Solution:\n    def maximumDetonation(self, bombs):\n        def check(i, j):\n            x, y = bombs[i][0] - bombs[j][0], bombs[i][1] - bombs[j][1]\n            r = bombs[i][2]\n            return r * r >= x * x + y * y\n\n        g = [[] for _ in range(len(bombs))]\n        for i in range(len(bombs)):\n            for j in range(len(bombs)):\n                if check(i, j):\n                    g[i].append(j)\n        for i in range(len(bombs)):\n            for j in g[i]:\n                for k in g[j]:\n                    g[i].append(k)\n        for i in range(len(bombs)):\n            for j in g[i]:\n                for k in g[j]:\n                    g[i].append(k)\n        for i in range(len(bombs)):\n            for j in g[i]:\n                for k in g[j]:\n                    for last in g[k]:\n                        g[i].append(last)\n        for i in range(len(bombs)):\n            for j in g[i]:\n                for k in g[j]:\n                    for last in g[k]:\n                        g[i].append(last)\n        ans = 0\n        for k in range(len(bombs)):\n            q = [k]\n            vis = [False] * len(bombs)\n            vis[k] = True\n            cnt = 0\n            while q:\n                i = q.pop(0)\n                cnt += 1\n                for j in g[i]:\n                    if not vis[j]:\n                        vis[j] = True\n                        q.append(j)\n            ans = max(ans, cnt)\n        return ans",
  "is_python": true
}