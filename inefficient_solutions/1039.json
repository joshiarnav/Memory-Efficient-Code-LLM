{
  "problem_idx": 1039,
  "task_name": "Minimum Score Triangulation of Polygon",
  "markdown_description": "\nYou have a convex `n`-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., **clockwise order**).\n\n\nYou will **triangulate** the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.\n\n\nReturn *the smallest possible total score that you can achieve with some triangulation of the polygon*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1039.Minimum%20Score%20Triangulation%20of%20Polygon/images/shape1.jpg)\n\n```\n\n**Input:** values = [1,2,3]\n**Output:** 6\n**Explanation:** The polygon is already triangulated, and the score of the only triangle is 6.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1039.Minimum%20Score%20Triangulation%20of%20Polygon/images/shape2.jpg)\n\n```\n\n**Input:** values = [3,7,4,5]\n**Output:** 144\n**Explanation:** There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144.\n\n```\n\n**Example 3:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1039.Minimum%20Score%20Triangulation%20of%20Polygon/images/shape3.jpg)\n\n```\n\n**Input:** values = [1,3,1,4,1,5]\n**Output:** 13\n**Explanation:** The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == values.length`\n* `3 <= n <= 50`\n* `1 <= values[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def minScoreTriangulation(self, values: List[int]) -> int:\n        @cache\n        def dfs(i: int, j: int) -> int:\n            if i + 1 == j:\n                return 0\n            return min(\n                dfs(i, k) + dfs(k, j) + values[i] * values[k] * values[j]\n                for k in range(i + 1, j)\n            )\n\n        return dfs(0, len(values) - 1)\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom functools import cache\n\nclass Solution:\n    def minScoreTriangulation(self, values: List[int]) -> int:\n        @cache\n        def dfs(i: int, j: int) -> int:\n            if i + 1 == j:\n                return 0\n            return min(\n                dfs(i, k) + dfs(k, j) + values[i] * values[k] * values[j]\n                for k in range(i + 1, j)\n            )\n\n        return dfs(0, len(values) - 1)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    values = random.sample(range(1, 101), random.randint(3, 50))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minScoreTriangulation(values)\n\n    return values, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        values, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minScoreTriangulation(values) == expected_result\n        print(f\"assert solution.minScoreTriangulation({values}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minScoreTriangulation({values}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minScoreTriangulation([33, 4, 63, 25, 59, 9, 57, 77, 58, 10, 76, 85, 34, 20, 50, 71, 23, 49, 28, 35, 39]) == 146532\nassert solution.minScoreTriangulation([13, 9, 50, 21, 93, 26, 79, 49, 64, 19, 27, 57, 73, 41, 86, 40, 99, 90, 32, 54, 12, 70, 66, 6, 51, 25, 4, 23, 96, 95, 98, 62, 56, 10, 1, 42, 5, 91, 68, 14, 48, 15, 72]) == 100151\nassert solution.minScoreTriangulation([16, 29, 86, 94, 23, 3, 22, 7, 2, 63, 67, 88, 6, 49, 96, 99, 33, 69, 61, 80, 66, 21, 55, 10]) == 123608\nassert solution.minScoreTriangulation([89, 97, 7, 33, 15, 60, 49, 5, 48, 14, 99, 88, 62, 55, 77, 51, 43, 45, 50, 10, 28]) == 256630\nassert solution.minScoreTriangulation([81, 14, 16, 98, 32, 99, 2, 23, 61, 62, 97, 84, 74, 10, 30, 50, 54]) == 88814\nassert solution.minScoreTriangulation([9, 56, 14, 2, 92, 47, 73, 12, 39, 89, 8, 82, 44, 62, 4, 78, 65, 6, 81, 22, 86, 85, 16, 53, 51, 36, 57, 77, 48, 90, 41, 42, 95, 67, 74, 61, 69, 3, 35, 60, 97, 38, 96, 5, 18, 30, 29]) == 215022\nassert solution.minScoreTriangulation([52, 88, 92, 36, 3, 72, 8, 49, 80, 38, 87, 94, 51, 76, 1, 54, 12, 65, 20, 48, 18, 56, 59, 15, 60, 17, 25, 78, 29, 67, 50, 23]) == 68335\nassert solution.minScoreTriangulation([71, 37, 35, 49, 63, 61, 3, 32, 91, 1, 72, 59, 31]) == 24036\nassert solution.minScoreTriangulation([27, 34, 78, 71, 68, 12, 55, 63, 11, 84, 86, 83, 82, 24, 91, 21, 90, 26, 97, 49, 40, 45, 58, 4, 88, 1, 20, 23, 52, 19, 51, 2, 66, 13, 47, 50, 64, 36, 37, 44, 38]) == 85012\nassert solution.minScoreTriangulation([74, 64, 46, 48, 31, 22, 41, 70, 45, 86, 75, 71, 16, 87, 93, 25, 10, 81, 60, 20, 44, 98, 80, 67, 27, 66, 50, 78, 9, 100, 62, 83, 12, 89]) == 934812\nassert solution.minScoreTriangulation([97, 60, 88, 76, 52, 55, 2, 8, 80, 73, 68, 74, 3, 37, 81, 33, 75, 12, 34, 27, 94, 18, 15, 1, 14, 29, 66, 28, 100, 17, 4, 77, 23, 40, 84]) == 79649\nassert solution.minScoreTriangulation([72, 30, 86, 24, 58, 34, 36]) == 242304\nassert solution.minScoreTriangulation([25, 62, 97, 83, 8, 77, 56, 9, 89, 14, 16, 84, 21, 7, 81, 90, 19, 28, 96, 72, 22, 15, 36, 31, 87, 95, 38, 44, 59, 34, 88, 18, 82, 35, 99, 71]) == 640570\nassert solution.minScoreTriangulation([72, 44, 78, 13, 76, 38, 77, 63, 75, 82, 6, 53, 3, 66, 47, 37, 94, 1, 87, 36, 84, 65, 12, 50, 59, 19, 79, 10, 61, 62, 26, 35, 58, 97, 41, 54, 23, 15, 70, 42, 88, 9, 29, 30, 11]) == 92065\nassert solution.minScoreTriangulation([17, 97, 35, 99, 91, 44, 96, 84, 38, 26, 32, 75, 24, 83, 9, 58, 63, 85, 93, 34, 80, 73, 62, 65, 71, 37, 14, 30, 46, 74, 76, 79, 19, 52, 2, 10, 47, 100, 88, 4, 81]) == 253158\nassert solution.minScoreTriangulation([41, 67, 34, 47, 68, 16, 17, 64, 35, 80, 89, 57, 63, 66, 2, 18, 69, 73, 72, 97, 88, 65, 50, 91, 99, 70, 27, 6, 43, 86, 77, 53, 8, 52, 56, 24, 36, 94, 12, 37, 92, 48, 38, 81, 96, 15]) == 287886\nassert solution.minScoreTriangulation([81, 97, 11, 79, 45, 87, 2, 86, 69, 65, 71, 57, 20, 70, 98, 48, 49, 36, 94, 46, 27, 41, 3, 92, 63, 83, 59, 29, 39, 31, 61, 54, 66, 85, 33, 62]) == 218450\nassert solution.minScoreTriangulation([49, 4, 80, 99, 30, 28, 6, 37, 87, 78, 38, 65, 73, 94, 16, 88, 68, 84, 44, 96, 74, 100, 58, 26, 48, 11, 85, 7, 13, 72, 3, 64, 5, 76, 2, 92, 35, 83]) == 199276\nassert solution.minScoreTriangulation([48, 71, 90, 66]) == 591840\nassert solution.minScoreTriangulation([26, 18, 4, 43, 40, 77, 38, 50, 48, 32, 49, 74, 89, 78, 68, 39, 64, 59, 72, 24, 34, 19, 35, 67, 83, 61, 14, 6, 95, 16, 17, 79, 71, 63, 47, 9, 10, 51, 37, 99, 66]) == 402244\nassert solution.minScoreTriangulation([30, 88, 75, 72]) == 360000\nassert solution.minScoreTriangulation([98, 41, 56, 6, 96, 50, 51]) == 111972\nassert solution.minScoreTriangulation([66, 79, 9, 4, 2, 65, 91, 25, 12, 64, 47, 81, 18, 43, 19, 49, 74, 70, 27, 95, 61, 23, 44, 16, 3, 17, 96, 94, 14, 62, 48, 97, 45, 41, 11, 82]) == 163470\nassert solution.minScoreTriangulation([1, 76, 38, 17, 23, 71, 72, 51, 5, 55, 95, 73, 46, 36, 39, 56, 15, 100, 77, 42, 82, 30, 47, 16, 81, 20, 31, 43, 92, 8, 9, 26, 79, 75, 63, 86, 65, 37]) == 92958\nassert solution.minScoreTriangulation([69, 14, 93, 95, 37, 31, 23, 46, 51, 11, 13, 8, 82, 21, 90, 89, 1, 5, 84, 7, 85, 15, 49, 97, 3, 22, 50, 55, 25, 6, 30, 9, 29, 70, 96, 94, 52, 74, 43, 48, 44, 40, 54, 4, 39]) == 88628\nassert solution.minScoreTriangulation([34, 84, 6, 77, 1, 73, 86, 45, 27]) == 16103\nassert solution.minScoreTriangulation([75, 91, 54, 5, 50, 98, 38, 44, 14, 36, 59, 3, 35, 7, 92, 94, 40, 77, 39, 89, 99, 56, 65, 93, 47, 87, 28, 88, 26, 72, 57, 64]) == 308286\nassert solution.minScoreTriangulation([87, 40, 50, 15, 21, 73, 42, 96, 43, 78, 10, 58, 81, 49, 74, 9, 51, 77, 46, 4, 45, 79, 19, 61, 31, 36, 11, 86, 83, 66, 52, 68, 3, 28, 64, 30, 94, 89, 25, 100, 70, 23]) == 316953\nassert solution.minScoreTriangulation([94, 42, 58, 98, 34, 85]) == 681972\nassert solution.minScoreTriangulation([37, 78, 47, 45, 64, 79, 46, 22]) == 445214\nassert solution.minScoreTriangulation([12, 36, 96, 27, 97, 7, 54, 6, 91, 52, 19, 14, 37, 86, 67, 85, 5, 8, 83, 62, 15, 3, 18, 72, 29, 48, 4, 51, 76, 58, 57, 59, 26, 81, 16, 65, 93, 92, 88, 31, 95, 47, 71]) == 307497\nassert solution.minScoreTriangulation([3, 28, 55, 95, 20, 27, 70, 35, 33, 14, 58, 38, 17, 90, 67, 73, 42, 31, 81, 78, 60, 63, 74, 34, 4, 32, 92, 36, 10, 77, 50, 71, 39, 22, 41, 57, 8, 82, 19, 83, 93, 23, 15, 21, 45, 2, 18, 37, 12]) == 197932\nassert solution.minScoreTriangulation([16, 15, 33, 22, 20, 68, 52, 69, 6, 66, 29, 98, 50, 54, 94, 35, 3, 59, 27, 17, 70, 89, 49, 84, 77, 19, 30, 63, 5, 96, 25, 78, 81, 67, 80, 18, 45, 95, 31, 58, 61, 43, 57, 93, 12, 65, 42, 79]) == 350688\nassert solution.minScoreTriangulation([98, 91, 24, 83, 81, 50, 85, 41, 66, 17, 20, 93, 48, 34, 4, 72, 10, 89, 71, 92, 52, 58, 68, 86, 44, 76, 84, 82, 42, 21, 30, 70]) == 440380\nassert solution.minScoreTriangulation([15, 14, 93, 76, 86, 68, 83, 3, 31, 64, 90, 20, 72, 74, 47, 53, 88]) == 164619\nassert solution.minScoreTriangulation([38, 10, 21, 70, 100, 35, 88]) == 183940\nassert solution.minScoreTriangulation([4, 32, 76, 34, 80, 47, 57, 5, 30, 7, 84, 23, 8, 71, 95, 11, 37, 94, 64, 52, 15, 70, 24, 43, 17, 63, 33, 96, 9, 83, 27, 1, 65, 77, 19, 42, 51, 56, 61, 29, 31, 59, 66, 58, 12, 81, 3, 6]) == 84534\nassert solution.minScoreTriangulation([33, 64, 3, 95]) == 15741\nassert solution.minScoreTriangulation([57, 30, 41, 100, 36, 35, 26, 92, 39, 45, 99, 85, 80]) == 1064074\nassert solution.minScoreTriangulation([6, 71, 76, 65, 80, 30, 82, 34, 50, 62, 46, 98, 61, 87, 70, 63, 54]) == 363186\nassert solution.minScoreTriangulation([1, 99, 43, 89, 55, 72, 5]) == 17299\nassert solution.minScoreTriangulation([26, 82, 78, 44, 56, 54, 68, 35, 40]) == 591968\nassert solution.minScoreTriangulation([59, 51, 31, 95, 92, 70, 83, 68, 32, 69, 17, 57, 48, 84, 46, 54, 26]) == 928319\nassert solution.minScoreTriangulation([100, 49, 97, 6, 43, 44, 84, 88, 66, 53, 15, 92, 72, 61, 40, 8]) == 292140\nassert solution.minScoreTriangulation([72, 94, 88, 44, 14, 41, 19, 81, 5, 3, 38, 50, 74, 64, 8, 13, 4, 1, 55, 92, 93, 80, 22, 85, 37, 99, 63, 97, 31, 67, 11, 56, 40, 83, 16, 65, 12, 21, 59, 7, 68, 36, 57]) == 103929\nassert solution.minScoreTriangulation([34, 81, 8, 22, 42, 33, 99, 98, 25, 36, 77, 54, 69, 73, 23, 43, 44, 83, 63, 89, 61, 46, 84, 56, 29, 94, 53, 55, 6, 48, 85, 15, 82, 70, 88, 20, 93, 10, 90, 17, 2, 39]) == 226814\nassert solution.minScoreTriangulation([96, 58, 69, 82, 76, 88, 41, 61, 33, 47, 15, 97, 80, 38, 64, 23, 56, 13, 73, 27, 10, 25, 21, 60, 4, 65, 24, 44, 93, 16, 55, 89, 14]) == 313948\nassert solution.minScoreTriangulation([73, 32, 76, 66, 23, 34, 3, 97, 20, 75, 46, 80, 67, 94, 87, 77, 96, 72, 50, 33, 74, 52, 30, 60, 59, 25]) == 255699\nassert solution.minScoreTriangulation([6, 77, 63, 44, 67, 96, 71, 12, 70, 93, 88, 24, 64, 22, 40, 38, 50, 14, 57, 83, 5, 18, 30, 45, 19, 39, 60, 31, 33, 52, 79, 69, 85, 4, 72, 76, 37, 87, 25, 92, 53, 20, 84, 11, 9, 86, 56, 62, 28, 98]) == 485412\nassert solution.minScoreTriangulation([72, 60, 43, 19, 16, 55, 83, 49, 18, 37, 48, 3, 12, 64, 100, 34, 97, 15, 54, 77, 58, 87, 91, 65, 62, 61, 56, 26, 6, 90, 42, 79, 74, 35, 7, 73, 4, 29, 57, 52, 85, 63, 68]) == 354139\nassert solution.minScoreTriangulation([62, 52, 93, 72, 83, 4, 89, 26, 23, 67, 57, 12, 40, 85, 90, 25, 71, 91, 7, 29, 14, 35, 95, 17, 68, 27, 20, 18, 34, 84, 9, 10, 55, 69, 38, 1, 13, 74, 42, 98, 44, 54, 75, 30, 41, 80, 49, 92]) == 114057\nassert solution.minScoreTriangulation([79, 55, 10, 36, 66, 41, 28, 77, 23, 94, 95, 62, 92, 12, 33, 42, 84, 47, 5, 45, 24, 27, 21, 14]) == 260775\nassert solution.minScoreTriangulation([10, 68, 44, 47, 29, 93, 96, 53, 7, 36, 56, 70, 97, 48, 31, 79, 65, 67, 90, 85, 11, 27, 76, 26, 99, 87, 45, 3, 60, 6, 84, 25, 2, 42, 46, 100, 66, 4, 98, 51, 95]) == 234300\nassert solution.minScoreTriangulation([30, 88, 43, 20, 99, 35, 97, 98, 46, 87, 93, 9, 55, 27, 48, 8, 3, 40, 53, 10, 75, 5, 84, 31, 61, 17, 79, 72, 18, 26, 45, 80, 86, 83, 22, 63, 39, 85, 23, 73]) == 296538\nassert solution.minScoreTriangulation([18, 53, 22, 12, 39, 88, 85, 48, 28, 65, 80, 43, 95, 63, 97, 52, 59, 86, 61, 16, 35, 27, 15, 90, 45, 54, 19, 8, 38, 96, 56, 23, 4, 50, 58, 70, 72, 20, 6, 9]) == 402188\nassert solution.minScoreTriangulation([23, 21, 75, 18, 98, 41, 8, 86, 22, 85, 12, 15, 10, 24, 29, 7, 60, 83, 37, 36, 4, 74, 84, 72, 26, 54, 78, 76, 100, 71, 89, 47, 50, 30, 93, 46, 67, 69, 94, 58, 38, 5, 53, 48, 45, 16]) == 464616\nassert solution.minScoreTriangulation([5, 43, 95, 62]) == 49875\nassert solution.minScoreTriangulation([34, 95, 31, 27, 89, 62, 25, 49, 70, 9, 28, 5, 14, 68, 82, 18, 93, 55, 77, 72, 71, 84, 13, 47, 41, 66, 40, 52, 4, 86, 12, 11, 16, 48, 32, 8, 69, 46, 87, 78]) == 359872\nassert solution.minScoreTriangulation([40, 80, 50, 76, 37, 83, 61, 97, 79, 57, 95, 1, 74, 26, 25, 94, 51, 2, 48, 43, 49, 35, 86, 92, 52, 98, 99, 38, 70, 23, 89, 34, 93, 14, 18, 6, 39, 5, 28, 96, 87, 32, 33, 21, 58, 90, 13, 81]) == 137722\nassert solution.minScoreTriangulation([61, 27, 72, 12, 57, 5, 14, 29, 51, 58, 21, 38, 26, 50, 84, 36, 46, 34, 7, 47, 31, 10, 66, 54, 48]) == 184040\nassert solution.minScoreTriangulation([99, 33, 52, 84, 41, 60, 31, 28, 85, 89, 16, 3, 75, 98, 18, 11, 81, 5, 74, 43, 36]) == 145872\nassert solution.minScoreTriangulation([34, 65, 20, 11, 62, 58, 95, 26, 88, 75, 97, 69, 91, 17, 49, 72, 85, 98, 60, 14, 96, 61, 2, 80, 16, 22, 21, 18, 90]) == 173106\nassert solution.minScoreTriangulation([13, 53, 52, 12, 6, 8, 10, 19, 78, 39, 22, 71, 26, 2, 18, 62, 37, 17, 97, 63, 87, 59, 55, 66, 29, 5, 46, 36, 41, 20, 85, 100, 91, 1, 45, 7, 79, 24]) == 71242\nassert solution.minScoreTriangulation([5, 4, 53, 86, 20, 92, 34]) == 45664\nassert solution.minScoreTriangulation([14, 92, 39, 30, 23, 40, 56, 95, 42, 85, 25, 10, 49, 66, 68, 4, 45, 6, 57, 59, 83, 29]) == 180192\nassert solution.minScoreTriangulation([20, 53, 89, 59, 35, 40, 14, 63, 76, 13, 27, 61, 56, 96, 93, 32, 28, 49, 87, 44, 57, 69, 100, 72, 24, 79, 45, 17, 73, 33, 50, 71, 21]) == 1204723\nassert solution.minScoreTriangulation([38, 46, 7, 31, 44, 53, 95, 25, 82, 11, 27, 69, 100, 59, 65, 56, 37, 93, 98, 26, 89, 41, 28, 10, 34, 42, 88, 20, 66, 52]) == 537313\nassert solution.minScoreTriangulation([62, 89, 65, 58, 37, 15, 43, 73, 86, 57, 67, 8, 92, 77, 80, 47, 64, 21, 10, 60, 40, 45, 53, 63, 100, 36, 76, 75, 96, 32, 98, 33, 14, 30, 35, 13, 88, 79, 83]) == 1006488\nassert solution.minScoreTriangulation([69, 15, 53, 41, 1, 80, 33, 96, 49, 36, 42, 7, 29, 35, 10, 67, 76, 78, 91, 28, 82, 64, 57, 88]) == 63269\nassert solution.minScoreTriangulation([38, 63, 64, 70, 68, 74, 23, 97, 24, 77, 66, 41, 99, 31, 54, 4, 96, 91, 5, 57, 86, 16, 47, 56, 75, 59, 76, 55, 43, 39, 42, 61, 65, 87, 18, 73, 33, 100, 51, 53, 32, 79, 14, 67, 29, 72]) == 516452\nassert solution.minScoreTriangulation([27, 3, 10, 55, 97, 8, 16, 51, 18, 91, 31, 32, 29]) == 47055\nassert solution.minScoreTriangulation([18, 65, 78, 87, 55, 63, 95, 69, 59, 75, 20, 50, 16, 3, 66, 79, 94, 52, 74, 34, 96]) == 223488\nassert solution.minScoreTriangulation([74, 52, 10, 55, 34, 59, 4, 51, 19, 43, 3, 80, 83, 58, 75, 36, 65, 7, 14, 94, 89, 24, 38, 56, 90, 91, 62, 73, 79, 88, 23, 69, 70, 71, 33, 2, 85, 39, 18, 16, 92, 9, 12, 98]) == 229312\nassert solution.minScoreTriangulation([62, 43, 47, 1, 78, 80, 55, 36, 59, 50, 73]) == 30557\nassert solution.minScoreTriangulation([79, 20, 73, 95, 50, 4, 81, 82, 66, 22, 21, 51, 44, 64, 43, 74, 75, 16, 96, 14, 71, 49, 37, 8, 86, 34, 80, 5, 69, 3, 26, 76, 85]) == 239166\nassert solution.minScoreTriangulation([36, 54, 41, 88, 14, 68]) == 142996\nassert solution.minScoreTriangulation([74, 86, 7, 27, 66, 87, 6, 24, 17, 23, 88, 82, 80, 40, 51, 70, 97, 71, 85, 93, 15, 47, 21, 13, 48, 76, 29, 14, 37, 91, 28, 5, 63, 95, 67, 50, 18, 81, 43, 58, 41, 44, 69, 53, 33, 92]) == 657745\nassert solution.minScoreTriangulation([16, 100, 15, 94, 31, 84, 67, 73, 79, 12, 7]) == 190834\nassert solution.minScoreTriangulation([88, 99, 92, 95, 83, 22, 69, 39, 2, 62, 19, 45, 56, 70, 48, 49, 42, 66, 9, 4]) == 120954\nassert solution.minScoreTriangulation([72, 44, 55, 85, 52, 43, 87, 27, 78, 39, 33, 75, 18, 56, 34, 53, 62, 49, 81, 24, 74, 23, 6, 57, 98, 42, 36, 11, 95, 84, 86, 10, 9, 8, 1, 29, 97, 4, 65, 73]) == 96521\nassert solution.minScoreTriangulation([72, 24, 99, 25, 86, 26, 65, 30, 95, 52, 23, 83, 63, 15]) == 456430\nassert solution.minScoreTriangulation([25, 46, 6, 44, 79, 26, 67, 55, 9, 32, 24, 5, 48, 36, 90, 68, 27, 1, 38, 50, 53, 93, 2, 22, 78, 43, 41, 30, 8, 71, 39, 77, 65, 34, 72, 62, 94, 82]) == 81547\nassert solution.minScoreTriangulation([34, 62, 90, 61, 54]) == 488376\nassert solution.minScoreTriangulation([18, 1, 97, 69, 93, 43, 95, 52, 55, 33, 30, 7, 14, 70, 62, 25, 4, 16, 92, 27, 66, 86, 59, 44, 13, 34, 71, 58, 56, 57, 90, 31, 36, 74, 28, 20, 54, 68, 47, 94, 61, 41, 79, 60, 88, 48, 22]) == 126079\nassert solution.minScoreTriangulation([96, 93, 72, 59, 23, 84, 64, 26, 76, 92, 16, 74, 24, 36, 88, 45, 37, 13, 15, 35, 58, 38, 53, 91, 52, 79, 10, 90, 33, 89, 50, 70, 31, 81, 48, 95, 82, 63, 80, 4, 67, 25]) == 500468\nassert solution.minScoreTriangulation([86, 24, 47, 6, 16, 67, 25, 3, 4, 19, 94, 74, 91, 69, 93, 48, 13, 92, 1, 26, 89, 100, 29, 20, 7, 42, 28, 98, 78, 43, 83, 71, 38, 9, 79, 44, 82, 34, 22, 99, 63, 56, 32, 80]) == 117990\nassert solution.minScoreTriangulation([89, 98, 54, 24, 50, 31, 77, 30, 7, 34, 28, 97, 38, 92, 67, 94, 18, 70, 46, 69, 40, 88, 3, 96, 62, 23, 20, 26, 87, 60, 41, 73, 57, 84, 52, 8, 86, 74, 72, 1]) == 110101\nassert solution.minScoreTriangulation([31, 85, 26, 82, 92, 30, 50, 95, 80, 67, 20, 52, 79, 18, 48, 55, 96, 45, 64, 14, 29, 8, 56, 5, 75, 89, 23, 41, 91, 84, 70]) == 457285\nassert solution.minScoreTriangulation([45, 33, 95, 46, 74, 62, 97, 98, 38, 73, 9, 30, 77, 39, 58, 100, 40, 19, 28, 63, 66, 26, 31, 1, 44, 96, 35, 4, 25, 11, 60, 64, 16, 50, 88, 54, 17, 37, 22, 71]) == 97731\nassert solution.minScoreTriangulation([69, 53, 91, 88, 52, 39, 12, 34, 76, 64, 16, 57, 7, 42, 28, 33, 72, 36, 40, 81, 77, 71, 30, 82, 58, 62, 99, 92, 50, 66, 85, 10, 98, 8, 18, 74, 87, 25, 35, 41]) == 810460\nassert solution.minScoreTriangulation([38, 94, 55, 2, 72, 31, 75, 46, 88, 11, 25, 34, 56, 53, 24, 19]) == 60424\nassert solution.minScoreTriangulation([91, 64, 1, 61, 84, 94, 52, 79, 25, 9, 86, 19, 50, 81, 18, 3, 49, 16, 14, 40, 57]) == 48142\nassert solution.minScoreTriangulation([52, 75, 36, 30, 29, 44, 35, 57, 33, 8, 82, 69, 65, 24, 90, 22, 39, 77, 9]) == 288757\nassert solution.minScoreTriangulation([89, 14, 43, 39, 52, 57, 63, 19, 35, 27, 45, 69, 47, 1, 64, 60, 80, 66, 77, 7]) == 42642\nassert solution.minScoreTriangulation([86, 49, 83, 66, 82, 37, 59, 65, 34, 56, 89, 8, 26, 35, 20, 58, 1, 47, 94, 16, 18, 50, 71, 38, 31, 64, 25, 11, 6, 80, 95, 76, 69]) == 85950\nassert solution.minScoreTriangulation([37, 22, 15, 61, 3, 74, 60, 46, 23, 79, 62, 14, 71, 18, 56, 29, 31, 54, 70, 83, 4, 91, 85, 19, 93]) == 150663\nassert solution.minScoreTriangulation([88, 48, 23, 38, 26, 10, 78, 71, 75, 35, 99, 70, 73, 94, 8, 6, 91, 96, 53, 55, 84, 61, 13, 98, 93, 63, 11, 79, 64, 25, 60, 31, 16, 86, 14, 50, 12]) == 632220\nassert solution.minScoreTriangulation([61, 57, 35, 75, 13, 49, 21, 34, 99, 92, 63, 77, 81, 46, 60, 43, 82, 48, 20, 3, 52, 65, 23, 70, 51, 29, 41, 7, 44, 64, 14, 53, 40, 93, 76, 88]) == 303102\nassert solution.minScoreTriangulation([92, 21, 97, 72, 17, 84, 96, 77, 52, 42, 19, 91, 59, 31, 95, 44, 29, 9, 67, 40, 87, 85, 76, 24, 20]) == 697806\nassert solution.minScoreTriangulation([23, 81, 42, 99, 56, 68, 5, 28, 82, 92, 19, 45, 84]) == 184650",
  "inefficient_solution": "class Solution:\n    def minScoreTriangulation(self, values: List[int]) -> int:\n        n = len(values)\n        dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][i+1][i+2] = 0\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j][k] = min(\n                        dp[i][i+1][k] + dp[k][j][j-1] + values[i] * values[k] * values[j],\n                        dp[i][k][j] + dp[k][k+1][j] + values[i] * values[k] * values[j],\n                        dp[i][j-1][j] + dp[j-1][j-2][j] + values[i] * values[j-1] * values[j]\n                    )\n        \n        return dp[0][n-1][n-2]",
  "is_python": true
}