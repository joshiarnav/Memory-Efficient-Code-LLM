{
  "problem_idx": 2740,
  "task_name": "Find the Value of the Partition",
  "markdown_description": "\nYou are given a **positive** integer array `nums`.\n\n\nPartition `nums` into two arrays,\u00a0`nums1` and `nums2`, such that:\n\n\n* Each element of the array `nums` belongs to either the array `nums1` or the array `nums2`.\n* Both arrays are **non-empty**.\n* The value of the partition is **minimized**.\n\n\nThe value of the partition is `|max(nums1) - min(nums2)|`.\n\n\nHere, `max(nums1)` denotes the maximum element of the array `nums1`, and `min(nums2)` denotes the minimum element of the array `nums2`.\n\n\nReturn *the integer denoting the value of such partition*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,2,4]\n**Output:** 1\n**Explanation:** We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].\n- The maximum element of the array nums1 is equal to 2.\n- The minimum element of the array nums2 is equal to 3.\nThe value of the partition is |2 - 3| = 1. \nIt can be proven that 1 is the minimum value out of all partitions.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [100,1,10]\n**Output:** 9\n**Explanation:** We can partition the array nums into nums1 = [10] and nums2 = [100,1].\n- The maximum element of the array nums1 is equal to 10.\n- The minimum element of the array nums2 is equal to 1.\nThe value of the partition is |10 - 1| = 9.\nIt can be proven that 9 is the minimum value out of all partitions.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def findValueOfPartition(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(b - a for a, b in pairwise(nums))\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom itertools import tee\n\nclass Solution:\n    def findValueOfPartition(self, nums: List[int]) -> int:\n        nums.sort()\n        return min(b - a for a, b in pairwise(nums))\n\n# Helper function to generate pairwise combinations\ndef pairwise(iterable):\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums_len = random.randint(2, 10) \n    nums = random.sample(range(1, 1000000001), nums_len)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findValueOfPartition(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findValueOfPartition(nums) == expected_result\n        test_case_generator_results.append(f\"assert solution.findValueOfPartition({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findValueOfPartition([123894298, 443662628, 745531620]) == 301868992\nassert solution.findValueOfPartition([109400825, 476782206]) == 367381381\nassert solution.findValueOfPartition([59540590, 565094796, 840082610, 860133972]) == 20051362\nassert solution.findValueOfPartition([142622029, 308763122, 337524041, 380101495, 616540478, 646439191, 697512458, 732892487, 949370583, 974803752]) == 25433169\nassert solution.findValueOfPartition([28676036, 221123500, 312920276, 606246641]) == 91796776\nassert solution.findValueOfPartition([295663796, 435560161, 602233114, 781826114, 951578266]) == 139896365\nassert solution.findValueOfPartition([149880217, 171064018, 636658221]) == 21183801\nassert solution.findValueOfPartition([44146046, 544875283, 771569278]) == 226693995\nassert solution.findValueOfPartition([247797200, 267850870, 468519166, 495882333, 551703262, 567338281, 759654109]) == 15635019\nassert solution.findValueOfPartition([166804913, 192410834, 199009570, 297233751, 524100798, 825617682, 841331922]) == 6598736\nassert solution.findValueOfPartition([128042582, 303521692, 442643557, 467503180, 950811205, 970393309]) == 19582104\nassert solution.findValueOfPartition([33335142, 96051494, 450937353, 543219430, 801282243, 804331520, 980631595]) == 3049277\nassert solution.findValueOfPartition([268998374, 310051638, 318741829, 700620242, 765595211, 900347920]) == 8690191\nassert solution.findValueOfPartition([330591283, 611233948, 860709740, 945682611]) == 84972871\nassert solution.findValueOfPartition([28205789, 239525272, 320450776, 382914823, 447728428, 458285269, 627627374, 679759117, 866565326]) == 10556841\nassert solution.findValueOfPartition([79651996, 170150345, 232869896, 304018887, 328671605, 954143596, 990656403]) == 24652718\nassert solution.findValueOfPartition([46314618, 265781480, 372657758, 697832055, 700474947]) == 2642892\nassert solution.findValueOfPartition([292632989, 343403772, 358587695, 397954804, 491952449, 581695291, 869373961]) == 15183923\nassert solution.findValueOfPartition([9529676, 62618220, 163567685, 220573115, 239453188, 375002118, 627172566, 773870416, 885030673, 926981295]) == 18880073\nassert solution.findValueOfPartition([18928932, 93484894, 151727414, 205303180, 220713364, 490320251, 588978184, 612478677, 906545893, 943524697]) == 15410184\nassert solution.findValueOfPartition([47358821, 192465015]) == 145106194\nassert solution.findValueOfPartition([405608471, 637729006, 745015364, 927440995]) == 107286358\nassert solution.findValueOfPartition([72223803, 297298476]) == 225074673\nassert solution.findValueOfPartition([34127010, 71877913, 115261414, 249728907, 283600916, 310904648, 635852662, 919485055]) == 27303732\nassert solution.findValueOfPartition([292285541, 706931708, 755825308, 861054717]) == 48893600\nassert solution.findValueOfPartition([135445692, 231351334, 817776751, 880789973]) == 63013222\nassert solution.findValueOfPartition([156656620, 248617806, 389209452, 480874658, 591390699, 658358438, 767683878]) == 66967739\nassert solution.findValueOfPartition([65768530, 68008297, 81336628, 177972795, 212445231, 260658031, 644769451, 745543662, 786177273, 961657691]) == 2239767\nassert solution.findValueOfPartition([16499212, 495769330, 743384223, 897302797, 969260824]) == 71958027\nassert solution.findValueOfPartition([326778936, 695042748, 925405619]) == 230362871\nassert solution.findValueOfPartition([70388918, 153257967, 323209185, 568285481, 570773272, 705323093, 789470679, 801410813, 834116298]) == 2487791\nassert solution.findValueOfPartition([346531610, 543878916, 553695153, 822559546]) == 9816237\nassert solution.findValueOfPartition([595128270, 624265598, 751338844, 757740420, 919327220]) == 6401576\nassert solution.findValueOfPartition([55427030, 85561042, 91432248, 291741314, 433366895, 481663104, 497779513, 539330054, 784993962, 903385567]) == 5871206\nassert solution.findValueOfPartition([110676023, 373807249, 525240851, 930850939, 956887216]) == 26036277\nassert solution.findValueOfPartition([7338896, 362556688]) == 355217792\nassert solution.findValueOfPartition([88442255, 160448369, 175080911, 291035395, 444855297, 460980494, 613596356, 757191680, 963843391]) == 14632542\nassert solution.findValueOfPartition([94288576, 159671527, 391395781, 540612117, 741877877, 744961734, 856395740, 875095190, 913439853]) == 3083857\nassert solution.findValueOfPartition([503146363, 573831688, 793129079]) == 70685325\nassert solution.findValueOfPartition([837058832, 850260182]) == 13201350\nassert solution.findValueOfPartition([577454839, 707505688, 725208260, 753421682, 946693694]) == 17702572\nassert solution.findValueOfPartition([88867916, 154289049, 176754486, 279802179, 479671127, 813212451, 852424484, 861217033, 994731062]) == 8792549\nassert solution.findValueOfPartition([114250345, 127179510, 727372973, 798725732, 860022493]) == 12929165\nassert solution.findValueOfPartition([185983350, 295417703, 964592163]) == 109434353\nassert solution.findValueOfPartition([399311017, 870929449]) == 471618432\nassert solution.findValueOfPartition([246001613, 268175462, 396151172, 401700729, 526009909, 571846152, 667288275, 675273993, 679314007, 818126942]) == 4040014\nassert solution.findValueOfPartition([49142779, 127442830, 264197671, 279818000, 595527477, 680052388, 691603801, 828419557]) == 11551413\nassert solution.findValueOfPartition([256640450, 361464457, 489576216, 601585920, 683383552, 859253435]) == 81797632\nassert solution.findValueOfPartition([63508741, 149349648, 292854373, 410807585, 511671280, 665417816, 693820449, 834947534]) == 28402633\nassert solution.findValueOfPartition([66492401, 152885614, 165029098, 183570108, 427909032, 441754702, 922146974, 938188321]) == 12143484\nassert solution.findValueOfPartition([17643526, 436162427, 532575940, 780773447, 808474536, 836491029]) == 27701089\nassert solution.findValueOfPartition([196503772, 455836615, 546137047, 839393132, 934558513]) == 90300432\nassert solution.findValueOfPartition([82784212, 265962812, 732161635]) == 183178600\nassert solution.findValueOfPartition([60019101, 857919706]) == 797900605\nassert solution.findValueOfPartition([194912293, 358465178, 478915983, 828585932, 921709906, 998205108]) == 76495202\nassert solution.findValueOfPartition([223060268, 276619952, 302754163, 647664551, 751002387, 777283970, 822717922, 893972402, 949472941]) == 26134211\nassert solution.findValueOfPartition([108477175, 281671146, 321363431, 803460620, 825722034]) == 22261414\nassert solution.findValueOfPartition([415050459, 420498670, 559718242, 590585803, 746261221, 769713865, 819753062, 872048757, 961780115, 995915755]) == 5448211\nassert solution.findValueOfPartition([60035689, 413576885, 750110139]) == 336533254\nassert solution.findValueOfPartition([95842667, 699646531, 751635817]) == 51989286\nassert solution.findValueOfPartition([26881546, 112358865, 268944356, 350432690, 703625809, 729259452, 881264760, 936472151]) == 25633643\nassert solution.findValueOfPartition([175745515, 365041594, 468724161, 747328973, 980514240]) == 103682567\nassert solution.findValueOfPartition([276850593, 355392491, 389386388, 517082084, 620439193, 673053697, 744249699, 949171833]) == 33993897\nassert solution.findValueOfPartition([11493627, 55663389, 179870916, 376063808, 382419183, 469514247, 769714081, 787803829, 789435403, 877655798]) == 1631574\nassert solution.findValueOfPartition([204224027, 297688858, 712887244]) == 93464831\nassert solution.findValueOfPartition([157806552, 274561797, 557507873, 604011168, 657474708, 669834950, 681513291, 724266912, 894198904, 982751515]) == 11678341\nassert solution.findValueOfPartition([367681970, 864271805]) == 496589835\nassert solution.findValueOfPartition([98317093, 101671664, 327274504, 417525296, 529930807, 730134963, 804034230, 859400798, 872207384, 954363211]) == 3354571\nassert solution.findValueOfPartition([145717428, 432857055, 507607515, 536203411, 631937041, 781560636, 841386184, 842822568, 922848345]) == 1436384\nassert solution.findValueOfPartition([135438907, 323853091, 354309862, 400918633, 495053671, 662779768, 668705060, 689133964]) == 5925292\nassert solution.findValueOfPartition([226701313, 238414748, 363102620]) == 11713435\nassert solution.findValueOfPartition([47276177, 436795895, 675180075, 753928097, 880018478]) == 78748022\nassert solution.findValueOfPartition([65338851, 484056871, 541488488, 687862731]) == 57431617\nassert solution.findValueOfPartition([206741864, 588406085, 721877937, 744341700, 844584498]) == 22463763\nassert solution.findValueOfPartition([844028357, 895041258]) == 51012901\nassert solution.findValueOfPartition([380926822, 557089877, 621126288, 686120091, 702827372, 720103898, 887566172, 933284192, 936137379, 937973816]) == 1836437\nassert solution.findValueOfPartition([75654398, 91827886, 218738685, 280153676, 326702170, 367455253, 435390071, 707914622, 926638523, 998406315]) == 16173488\nassert solution.findValueOfPartition([39397429, 113248507, 266725992, 514620410, 569787185, 635474511, 636453648, 772933120, 773973540]) == 979137\nassert solution.findValueOfPartition([31771547, 477783077, 500259542, 582074650, 783869382, 786815418, 817599527, 851401981, 903207293, 965507452]) == 2946036\nassert solution.findValueOfPartition([191997477, 337669143, 344511269]) == 6842126\nassert solution.findValueOfPartition([189561863, 387539018, 396373296, 551282994, 580298062, 656977697]) == 8834278\nassert solution.findValueOfPartition([181192932, 525797664]) == 344604732\nassert solution.findValueOfPartition([736202274, 816773518, 954276654]) == 80571244\nassert solution.findValueOfPartition([12783076, 170168966, 216367121, 295204957, 306308884, 426416569, 491767819]) == 11103927\nassert solution.findValueOfPartition([143289485, 319459993, 321243941, 342039549, 561045077, 580129822, 856468588, 907343029, 986015489]) == 1783948\nassert solution.findValueOfPartition([64595773, 146143574, 369349160, 770914892]) == 81547801\nassert solution.findValueOfPartition([43558558, 110164958, 172119208, 376242185, 794737344]) == 61954250\nassert solution.findValueOfPartition([60240731, 165849998, 364539262, 421634562, 448925425, 713984311, 788067086, 823544999]) == 27290863\nassert solution.findValueOfPartition([149576760, 267889308, 292483846, 510169956, 577912088, 773223591, 811613447, 889210650]) == 24594538\nassert solution.findValueOfPartition([19141624, 38867749, 93670954, 147705665, 287611193, 628692409, 819657900, 910509464, 916807384, 946606071]) == 6297920\nassert solution.findValueOfPartition([20407964, 53578426, 203395380, 358900672, 376083449, 446800704, 652871387, 709171846, 965409751]) == 17182777\nassert solution.findValueOfPartition([570535522, 614684485, 878601676]) == 44148963\nassert solution.findValueOfPartition([440566186, 442233032, 647324457, 715012061, 847255063, 884752647]) == 1666846\nassert solution.findValueOfPartition([26658761, 392236078, 554643369, 613591119, 617216823, 805079229, 878669636, 950752156, 974318717]) == 3625704\nassert solution.findValueOfPartition([3275844, 177546152, 332539371, 369992397, 433052148, 519945923, 583373019, 682673152, 837986037]) == 37453026\nassert solution.findValueOfPartition([40890530, 134849922, 284120844, 760327428, 922328514]) == 93959392\nassert solution.findValueOfPartition([345508425, 370336887, 557101940, 594192373, 687949868, 733870362, 785466916, 788054658, 825453736, 857999801]) == 2587742\nassert solution.findValueOfPartition([11121222, 109164592, 324707961, 524000426, 776742772, 853639076, 868880833]) == 15241757\nassert solution.findValueOfPartition([142827525, 224312979, 237100421, 465768942, 575435454, 625021355, 679154548, 804873544]) == 12787442\nassert solution.findValueOfPartition([143007685, 164513049, 168706063, 485159676, 890723279]) == 4193014",
  "inefficient_solution": "class Solution:\n    def findValueOfPartition(self, nums: List[int]) -> int:\n        nums_copy = [x for x in nums]\n        nums_sorted = sorted(nums)\n        max_nums1 = [None for _ in range(len(nums))]\n        min_nums2 = [None for _ in range(len(nums))]\n        \n        for i in range(len(nums)):\n            max_nums1[i] = self.max_num(nums_copy, i)\n            nums_copy.pop(0)\n        \n        for i in range(len(nums)):\n            min_nums2[i] = self.min_num(nums_sorted, i)\n            nums_sorted.pop(0)\n        \n        max_diff = float('inf')\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                diff = abs(max_nums1[i] - min_nums2[j])\n                max_diff = min(max_diff, diff)\n        \n        return max_diff\n    \n    def max_num(self, nums, index):\n        max_num = float('-inf')\n        for i in range(index, len(nums)):\n            max_num = max(max_num, nums[i])\n        return max_num\n    \n    def min_num(self, nums, index):\n        min_num = float('inf')\n        for i in range(index, len(nums)):\n            min_num = min(min_num, nums[i])\n        return min_num",
  "is_python": true
}