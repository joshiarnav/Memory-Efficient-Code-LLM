{
  "problem_idx": 1235,
  "task_name": "Maximum Profit in Job Scheduling",
  "markdown_description": "\nWe have `n` jobs, where every job is scheduled to be done from `startTime[i]` to `endTime[i]`, obtaining a profit of `profit[i]`.\n\n\nYou're given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\n\n\nIf you choose a job that ends at time `X` you will be able to start another job that starts at time `X`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1235.Maximum%20Profit%20in%20Job%20Scheduling/images/sample1_1584.png)**\n\n\n\n```\n\n**Input:** startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\n**Output:** 120\n**Explanation:** The subset chosen is the first and fourth job. \nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n\n```\n\n**Example 2:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1235.Maximum%20Profit%20in%20Job%20Scheduling/images/sample22_1584.png)** \n\n\n\n```\n\n**Input:** startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\n**Output:** 150\n**Explanation:** The subset chosen is the first, fourth and fifth job. \nProfit obtained 150 = 20 + 70 + 60.\n\n```\n\n**Example 3:**\n\n\n**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1235.Maximum%20Profit%20in%20Job%20Scheduling/images/sample3_1584.png)**\n\n\n\n```\n\n**Input:** startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\n**Output:** 6\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= startTime.length == endTime.length == profit.length <= 5 * 104`\n* `1 <= startTime[i] < endTime[i] <= 109`\n* `1 <= profit[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def jobScheduling(\n        self, startTime: List[int], endTime: List[int], profit: List[int]\n    ) -> int:\n        jobs = sorted(zip(endTime, startTime, profit))\n        n = len(profit)\n        dp = [0] * (n + 1)\n        for i, (_, s, p) in enumerate(jobs):\n            j = bisect_right(jobs, s, hi=i, key=lambda x: x[0])\n            dp[i + 1] = max(dp[i], dp[j] + p)\n        return dp[n]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def jobScheduling(self, startTime, endTime, profit):\n        jobs = sorted(zip(endTime, startTime, profit))\n        n = len(profit)\n        dp = [0] * (n + 1)\n        for i, (_, s, p) in enumerate(jobs):\n            j = bisect_right(jobs, s, hi=i, key=lambda x: x[0])\n            dp[i + 1] = max(dp[i], dp[j] + p)\n        return dp[n]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random lists for startTime, endTime, and profit\n    startTime = random.sample(range(1, 1001), random.randint(2, 10))\n    endTime = random.sample(range(2, 1002), random.randint(2, 10))\n    profit = random.sample(range(1, 10001), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.jobScheduling(startTime, endTime, profit)\n\n    return startTime, endTime, profit, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        startTime, endTime, profit, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.jobScheduling(startTime, endTime, profit) == expected_result\n        print(f\"assert solution.jobScheduling({startTime}, {endTime}, {profit}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.jobScheduling({startTime}, {endTime}, {profit}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 # Change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.jobScheduling([414, 576], [801, 190, 649, 778, 10, 509, 158, 669, 502], [9406, 8380, 1011, 8387, 6534, 8758, 5175, 4858, 4737, 9726]) == 0\nassert solution.jobScheduling([973, 310, 492, 26, 917, 389, 142], [683, 169, 655, 719, 70, 55], [479, 6763]) == 7242\nassert solution.jobScheduling([998, 671, 905, 675], [973, 191, 942, 808, 85, 55, 182, 119, 693], [2658, 949, 1714, 2544, 8255, 985]) == 0\nassert solution.jobScheduling([80, 385, 582, 438, 637, 295], [300, 883, 515], [160, 3760, 1518, 2306]) == 0\nassert solution.jobScheduling([692, 320, 356], [827, 289, 667, 378, 530, 661, 593, 350, 606], [2177, 978, 8221, 3145, 8819, 9757, 9136, 1144, 8217, 368]) == 0\nassert solution.jobScheduling([994, 818, 600, 830, 789, 688, 395], [267, 870, 587, 579, 715, 326, 514, 724, 379], [2974, 5804, 8955, 104, 1279, 1972, 8805, 3271, 7683]) == 0\nassert solution.jobScheduling([397, 761, 230, 170, 142, 14, 880, 597], [664, 300, 886, 475, 459, 412, 921, 233], [3083, 6301, 9186, 9710, 1833, 8560, 4808, 1624, 1475]) == 0\nassert solution.jobScheduling([20, 472, 638, 983, 548], [38, 836, 125, 229, 996, 785, 924, 593, 614, 258], [630, 2749]) == 3379\nassert solution.jobScheduling([754, 183, 544, 514, 705], [645, 946, 593, 202, 546, 702, 1001, 861], [1017, 1420, 4267, 9283, 6869, 5561, 4576, 1699, 8170, 6209]) == 0\nassert solution.jobScheduling([721, 576, 69, 699, 949, 844, 351], [385, 374], [6094, 276, 4, 6158, 1506, 9250, 2553]) == 0\nassert solution.jobScheduling([47, 259, 964, 458], [128, 283, 109, 485, 164, 813, 505, 861], [3099, 9568, 2971, 5858, 8540, 555, 3702, 2519, 8108, 5806]) == 0\nassert solution.jobScheduling([423, 309, 386], [583, 361, 113, 92, 258, 319], [5510, 1369, 1049]) == 7928\nassert solution.jobScheduling([366, 287, 95, 215], [452, 390, 737, 695, 927, 231, 678, 326, 782], [3119, 1615, 1859, 1017, 4760, 8000, 8601, 72, 4208]) == 0\nassert solution.jobScheduling([788, 846, 685, 926, 120, 892, 426, 144, 67, 885], [376, 218, 161, 774, 474], [7594, 3954, 6603, 4847, 1229]) == 22998\nassert solution.jobScheduling([630, 24, 344, 585, 732], [594, 905, 111, 335, 176, 705, 423, 76, 632], [2022, 9599, 4805, 7980, 2828, 2308, 9208, 2151]) == 0\nassert solution.jobScheduling([53, 273], [317, 499, 842, 108, 834, 442], [4471, 3062, 3588, 3388, 2954, 8098, 9590, 3861, 3635]) == 0\nassert solution.jobScheduling([218, 62, 644, 516, 761, 551, 29], [157, 873, 538], [6744, 5085]) == 6744\nassert solution.jobScheduling([899, 613, 598], [83, 52, 941, 531, 835, 169, 302, 430, 376, 954], [8587, 8094]) == 16681\nassert solution.jobScheduling([887, 648, 906, 881, 976, 760], [678, 208, 184, 158, 843, 714, 429, 501, 990], [5244, 3055, 9279, 1731, 429, 1098, 7429, 7402]) == 0\nassert solution.jobScheduling([706, 378], [125, 658, 220, 551, 330, 176, 682, 670], [2855, 6402]) == 9257\nassert solution.jobScheduling([833, 252], [80, 56, 662, 89, 656, 793, 418], [5032, 4545, 3097, 5930, 1769, 9904, 6929, 7872]) == 0\nassert solution.jobScheduling([607, 941], [201, 304, 59, 33], [8212, 430, 303, 851, 31]) == 0\nassert solution.jobScheduling([848, 625, 829, 172, 89, 449, 636, 550, 37], [116, 483, 99, 822, 254, 543, 669, 98], [9568, 3891, 4873, 9695, 2196, 182, 4126, 7105, 9490]) == 0\nassert solution.jobScheduling([30, 248, 397, 589, 713, 473, 592, 621, 58, 978], [783, 403, 948, 638, 402, 17, 87, 604], [3759, 809, 7573, 342, 6526, 1886]) == 9459\nassert solution.jobScheduling([782, 284, 792, 181, 296, 118, 84], [898, 431, 890, 792, 948, 387, 276, 671, 965], [5760, 930, 3458, 9100]) == 12558\nassert solution.jobScheduling([358, 742, 446, 70], [921, 546, 793], [9103, 2328, 1233, 55, 8593, 9166, 2855]) == 0\nassert solution.jobScheduling([550, 858, 359, 655, 232, 201, 640, 441], [50, 615, 761, 472, 876, 657], [1230, 9806]) == 11036\nassert solution.jobScheduling([363, 229], [538, 172, 665, 698, 110, 679, 573, 690], [2133, 3093, 3715, 8020, 9299, 818, 7731, 4147, 4356]) == 0\nassert solution.jobScheduling([75, 221, 864, 861, 903], [713, 726], [439, 9618, 4968]) == 0\nassert solution.jobScheduling([246, 603, 982], [318, 613, 923, 494, 586, 157, 545, 278, 724], [6377, 8192]) == 14569\nassert solution.jobScheduling([170, 966, 605, 652, 556, 814], [985, 233], [1579, 308, 7721, 3469, 9383, 7414, 1959, 1593, 4276]) == 0\nassert solution.jobScheduling([87, 784, 352, 110, 1000, 474, 288, 455], [162, 966, 54, 676, 647, 750], [6372, 9543, 8258]) == 24173\nassert solution.jobScheduling([528, 295, 484, 343, 179, 520, 847, 119, 682], [516, 711, 800], [1383, 1337, 7164, 9972, 9065, 9268]) == 0\nassert solution.jobScheduling([543, 617, 928, 367, 776, 609, 662], [826, 445, 663, 129, 136, 538, 459, 709, 170], [3922, 9507, 4248, 928, 7409, 3789]) == 25881\nassert solution.jobScheduling([708, 125, 185, 470, 349, 376, 146, 178, 530, 156], [120, 319, 473], [6823, 3824, 9456, 1932, 2352, 2526, 1063, 8071, 5906, 4200]) == 0\nassert solution.jobScheduling([654, 413, 102, 258, 219, 495, 250, 903, 721, 727], [364, 446, 436, 603, 19, 493], [7215, 3669, 4113, 9141]) == 10884\nassert solution.jobScheduling([96, 262, 573, 514, 925], [656, 951], [4885, 1891, 6049, 7075]) == 0\nassert solution.jobScheduling([32, 989, 188, 863, 117], [807, 271, 229, 920, 225, 446], [613, 5471, 3971, 8692, 6863, 2314, 3201, 4057, 1207, 7937]) == 0\nassert solution.jobScheduling([859, 858], [25, 887, 144], [4033, 3115, 1546]) == 0\nassert solution.jobScheduling([943, 457, 497, 278, 490], [227, 63, 126], [8211, 9629, 6723, 2924, 9606]) == 0\nassert solution.jobScheduling([653, 496, 37, 110, 700], [842, 994, 547], [2330, 3717, 9881, 5436]) == 0\nassert solution.jobScheduling([833, 687, 623, 396, 993, 207, 124, 201], [800, 902, 54], [247, 3589]) == 3589\nassert solution.jobScheduling([614, 238, 89], [28, 776, 834, 124, 439], [9203, 5748, 1333, 4358, 5075, 7922, 7958]) == 0\nassert solution.jobScheduling([52, 59, 126], [334, 56, 646, 472, 602, 316], [4757, 8506, 4683, 8045, 972, 7466, 9901]) == 0\nassert solution.jobScheduling([441, 511, 291, 289], [392, 340, 223], [6390, 7022, 7800]) == 21212\nassert solution.jobScheduling([389, 687, 264, 201, 987], [490, 191, 617, 260, 979, 17, 269, 806], [3354, 6486]) == 9840\nassert solution.jobScheduling([951, 663, 867, 907, 897, 278, 359, 244], [82, 736, 776], [2884, 3372, 746, 6439]) == 0\nassert solution.jobScheduling([263, 505, 290], [775, 44, 969, 555, 742, 39, 878, 221, 524, 439], [3786, 5203, 3506, 7604, 5084, 2144, 2381, 4481, 4915, 1901]) == 0\nassert solution.jobScheduling([169, 552, 50, 21, 554, 372, 528], [403, 59, 461, 84, 220, 477, 324, 824], [6893, 133, 5247, 3247, 4314, 1535, 6606]) == 15702\nassert solution.jobScheduling([480, 50, 769, 148, 246, 656, 349, 175, 119, 8], [434, 105, 917, 282, 564, 34], [4540, 3177, 7847, 9331, 9811, 2776, 8260, 9826]) == 0\nassert solution.jobScheduling([618, 48, 694, 347, 78], [996, 800, 836, 19, 269], [9235, 8055, 5435, 9940, 6032]) == 25207\nassert solution.jobScheduling([386, 308, 419, 578, 733, 6, 988, 487, 689, 703], [555, 312, 365, 851], [5002, 9900, 3669, 9369, 8183, 118, 2615, 2688, 1210]) == 0\nassert solution.jobScheduling([505, 11, 119, 325, 677, 105, 224, 937, 434], [121, 574], [2154, 101]) == 2154\nassert solution.jobScheduling([320, 333, 707, 666, 612, 906, 810, 425, 614], [622, 189, 133, 881, 558, 193], [8554, 4423, 8970, 4152, 5303, 5295, 9843, 947]) == 0\nassert solution.jobScheduling([834, 597, 316, 726, 613, 501], [489, 178, 456], [2772, 9771, 4599, 9982]) == 0\nassert solution.jobScheduling([263, 697, 417, 17, 407, 204, 282, 203, 927, 330], [607, 406, 587, 624, 991], [9931, 2989, 7415, 5554, 8198, 6278, 7991, 6092, 6717]) == 0\nassert solution.jobScheduling([337, 365, 845, 599], [933, 106, 829, 849, 339, 404, 787, 246], [2359, 2852, 4483, 6376, 1808]) == 0\nassert solution.jobScheduling([342, 326, 779, 546, 558, 470, 35], [984, 981], [3592, 7123, 965]) == 0\nassert solution.jobScheduling([576, 498, 611, 245, 75, 62], [385, 949, 313], [5790, 230, 7716, 1989, 3580, 9903, 7043, 4403]) == 0\nassert solution.jobScheduling([773, 845, 963, 435, 930, 668, 189, 61, 594], [73, 563, 294, 754, 349, 757, 374, 190], [9974, 7331, 6308, 6560, 5283, 194, 839, 3408, 9397, 6635]) == 0\nassert solution.jobScheduling([889, 139, 843, 676, 609, 694, 826, 8, 60, 754], [282, 168, 903], [2325, 1261, 5088, 1217]) == 0\nassert solution.jobScheduling([169, 902, 389, 226, 103], [348, 343, 926, 507, 201, 616, 704], [1615, 5836, 9924, 291, 9842, 5152, 6064, 448]) == 0\nassert solution.jobScheduling([123, 749, 962, 161, 812, 185, 390, 122], [973, 440], [6862, 6921, 6769, 5520, 3176, 8210, 415, 3821, 3339, 9137]) == 0\nassert solution.jobScheduling([665, 187], [209, 520, 412], [1242, 1878, 6199, 9288, 2997, 7339, 4286, 8821, 7685]) == 0\nassert solution.jobScheduling([900, 897, 295, 16, 947, 456], [802, 677, 243, 679, 930, 769, 691, 260, 943], [5856, 9888, 7326, 4940]) == 23070\nassert solution.jobScheduling([985, 939, 330, 130, 799, 133], [800, 500, 518, 226], [3855, 6533, 4213, 5775, 6848, 968]) == 0\nassert solution.jobScheduling([537, 980, 193, 756], [848, 213, 132, 235, 988], [7942, 7617, 8519, 3899]) == 27977\nassert solution.jobScheduling([255, 499, 199, 801, 190, 25, 146, 441, 733], [631, 494, 549, 994, 813, 162, 75, 331, 38], [5834, 3867, 9599, 5017, 8704, 7543, 1453]) == 22159\nassert solution.jobScheduling([940, 727, 935, 65, 339], [854, 128, 99, 245, 901, 951], [6583, 4166, 9696, 2410, 4805, 5451, 578, 5402, 5154, 3861]) == 0\nassert solution.jobScheduling([748, 926, 250, 756, 744, 70, 369, 948, 679], [641, 213, 391, 324, 771, 653, 977, 817], [9304, 3166, 8588, 5658, 4906, 41]) == 25964\nassert solution.jobScheduling([659, 396, 428, 264, 42, 390, 198, 399, 867, 394], [274, 590], [3734, 3906, 3228, 1291, 4741, 3795, 8297]) == 0\nassert solution.jobScheduling([286, 198, 42, 229, 79, 393, 635, 842, 149, 878], [654, 495, 894, 314, 92, 697, 670, 659, 969], [2057, 609, 2875, 2997, 89, 7891, 1060, 1629]) == 10977\nassert solution.jobScheduling([278, 328, 609, 808, 248, 20, 361, 86, 884], [985, 701, 672], [3929, 8976, 1974, 1979, 7720, 3237, 3706, 3625, 6642, 1800]) == 0\nassert solution.jobScheduling([104, 37, 100], [448, 289, 334, 907, 51, 515], [5393, 1722, 7663]) == 7663\nassert solution.jobScheduling([227, 783, 531], [257, 720, 973, 365], [164, 5230, 6672, 6742, 7377, 9121]) == 0\nassert solution.jobScheduling([399, 307, 262, 793, 19, 913, 822], [99, 853, 217, 194, 776], [6840, 9764, 3783, 3403, 6831]) == 23790\nassert solution.jobScheduling([31, 442, 277, 878, 373, 260, 443, 413, 409, 483], [786, 453], [4775, 446, 2694, 1743, 2727, 8439, 8331, 3, 5395]) == 0\nassert solution.jobScheduling([991, 373, 887, 860, 301, 241, 102, 775], [895, 920, 561, 705, 459, 692, 767, 59, 162, 961], [3171, 5061, 5360, 4211, 4877, 6737, 1519, 7139, 9144, 3888]) == 0\nassert solution.jobScheduling([198, 566, 175], [731, 832, 353], [2004, 8552, 6156, 1079, 1871, 9412, 5993, 7142, 3094]) == 0\nassert solution.jobScheduling([189, 685, 450, 905, 851, 480, 660], [787, 56, 590, 439, 654, 243, 665], [4943, 2899, 1253, 4806, 6541, 8013, 8068]) == 31580\nassert solution.jobScheduling([849, 32, 103, 183, 651, 862, 192], [770, 845, 492, 982, 999, 515, 375, 630, 43, 835], [7519, 6474, 2931, 3027, 9953]) == 12884\nassert solution.jobScheduling([671, 593, 853, 382], [820, 442, 20, 113, 815], [7796, 889, 2058, 9617, 5153, 2020, 5566]) == 0\nassert solution.jobScheduling([581, 247, 179, 388, 249, 211, 965, 308, 162], [699, 282], [7898, 9273, 9992, 7640, 8387]) == 0\nassert solution.jobScheduling([867, 94, 541, 153, 408], [527, 471, 766, 462], [2983, 3047, 870, 6565, 2405, 9750, 126, 6228]) == 0\nassert solution.jobScheduling([551, 39, 912, 211, 587, 59], [233, 281, 785, 13, 826, 301], [794, 1630]) == 1630\nassert solution.jobScheduling([378, 399, 9, 185, 304], [493, 440, 487, 147], [1068, 7717, 7262]) == 7717\nassert solution.jobScheduling([572, 314, 214, 461, 998, 587], [42, 787, 100, 939, 993, 618], [1981, 6166, 4288, 8381, 2999, 7259, 2228, 5578]) == 0\nassert solution.jobScheduling([419, 169, 110, 569, 444, 112], [416, 453, 365, 404, 960, 299, 876, 767, 34], [9873, 5598, 5798, 6618]) == 22289\nassert solution.jobScheduling([201, 740, 15, 688, 916, 51, 736, 113, 420], [246, 619, 827, 28, 190, 932, 498], [5674, 1527, 513, 6710]) == 13911\nassert solution.jobScheduling([936, 776, 592, 945, 239, 91, 277, 847, 199], [431, 339, 985, 247, 32, 225, 515, 513], [4970, 2416, 8561, 7139, 9634, 665, 6427, 5651, 7019]) == 0\nassert solution.jobScheduling([757, 273, 786, 885, 148, 668, 802, 827, 601, 747], [813, 365, 930, 123], [2916, 1411, 4896, 1709, 6001, 7493]) == 0\nassert solution.jobScheduling([898, 174, 909, 486, 759], [450, 29, 711, 110, 309, 280, 585], [472, 6901, 6122, 8137, 3048, 5833, 3406, 5502, 5358]) == 0\nassert solution.jobScheduling([554, 61, 263, 210, 411], [516, 167, 417, 53, 422, 359, 906, 489, 504, 415], [5434, 358, 4827, 5698, 38, 5817, 3068, 5656, 5470, 943]) == 0\nassert solution.jobScheduling([14, 162, 137, 796, 706, 134, 987, 889, 472, 717], [340, 642], [3171, 5114, 592, 6043, 3127, 56, 8809]) == 0\nassert solution.jobScheduling([669, 907], [20, 655, 546, 250, 489, 799, 850, 747, 753, 887], [3539, 7079, 6690, 300]) == 0\nassert solution.jobScheduling([321, 910, 187, 366, 876, 324, 980, 600], [386, 977, 82, 413, 830, 141, 145, 241, 726, 84], [1055, 5518, 4797, 1310, 4671, 9474, 3839, 7685]) == 37294\nassert solution.jobScheduling([207, 953, 498, 121, 870, 992], [834, 861, 489, 366, 613, 515, 274, 539, 253, 80], [3626, 8164, 2505, 5486, 2467, 5414, 4833, 8182]) == 0\nassert solution.jobScheduling([667, 941, 125, 840], [268, 545], [4882, 5023, 3029, 2727, 5899, 757]) == 0\nassert solution.jobScheduling([948, 347, 403, 500, 886, 154, 207, 787, 515], [708, 273, 405, 108, 97, 70], [1414, 2313, 3852, 9026, 9440, 2251, 4122, 5938, 830, 143]) == 0\nassert solution.jobScheduling([429, 215, 341], [506, 291, 908, 528, 630, 419, 282, 477, 835], [5460, 9577, 2247, 1597, 7021, 8034, 7978]) == 0",
  "inefficient_solution": "class Solution:\n    def jobScheduling(self, startTime, endTime, profit):\n        n = len(profit)\n        data = []\n        for i in range(n):\n            data.append([startTime[i], endTime[i], profit[i]])\n        data.sort(key=lambda x: x[1])\n        n += 1\n        dp = [0] * (n * 1000)\n        for time, end, prof in data:\n            for i in range(n * 1000 - 1, -1, -1):\n                for j in range(n * 1000 - 1, i, -1):\n                    if dp[i] > dp[j]:\n                        break\n                    if dp[j] != 0 and end > data[j][0]:\n                        dp[i] = max(dp[i], dp[j] + prof)\n        return max(dp)",
  "is_python": true
}