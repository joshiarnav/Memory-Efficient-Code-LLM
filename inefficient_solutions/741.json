{
  "problem_idx": 741,
  "task_name": "Cherry Pickup",
  "markdown_description": "\nYou are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers.\n\n\n* `0` means the cell is empty, so you can pass through,\n* `1` means the cell contains a cherry that you can pick up and pass through, or\n* `-1` means the cell contains a thorn that blocks your way.\n\n\nReturn *the maximum number of cherries you can collect by following the rules below*:\n\n\n* Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`).\n* After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells.\n* When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`.\n* If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0700-0799/0741.Cherry%20Pickup/images/grid.jpg)\n\n```\n\n**Input:** grid = [[0,1,-1],[1,0,-1],[1,1,1]]\n**Output:** 5\n**Explanation:** The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == grid.length`\n* `n == grid[i].length`\n* `1 <= n <= 50`\n* `grid[i][j]` is `-1`, `0`, or `1`.\n* `grid[0][0] != -1`\n* `grid[n - 1][n - 1] != -1`\n\n\n",
  "canonical_solution": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        dp = [[[-inf] * n for _ in range(n)] for _ in range((n << 1) - 1)]\n        dp[0][0][0] = grid[0][0]\n        for k in range(1, (n << 1) - 1):\n            for i1 in range(n):\n                for i2 in range(n):\n                    j1, j2 = k - i1, k - i2\n                    if (\n                        not 0 <= j1 < n\n                        or not 0 <= j2 < n\n                        or grid[i1][j1] == -1\n                        or grid[i2][j2] == -1\n                    ):\n                        continue\n                    t = grid[i1][j1]\n                    if i1 != i2:\n                        t += grid[i2][j2]\n                    for x1 in range(i1 - 1, i1 + 1):\n                        for x2 in range(i2 - 1, i2 + 1):\n                            if x1 >= 0 and x2 >= 0:\n                                dp[k][i1][i2] = max(\n                                    dp[k][i1][i2], dp[k - 1][x1][x2] + t\n                                )\n        return max(0, dp[-1][-1][-1])\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def cherryPickup(self, grid):\n        n = len(grid)\n        dp = [[[-float('inf')] * n for _ in range(n)] for _ in range((n << 1) - 1)]\n        dp[0][0][0] = grid[0][0]\n        for k in range(1, (n << 1) - 1):\n            for i1 in range(n):\n                for i2 in range(n):\n                    j1, j2 = k - i1, k - i2\n                    if (\n                        not 0 <= j1 < n\n                        or not 0 <= j2 < n\n                        or grid[i1][j1] == -1\n                        or grid[i2][j2] == -1\n                    ):\n                        continue\n                    t = grid[i1][j1]\n                    if i1 != i2:\n                        t += grid[i2][j2]\n                    for x1 in range(i1 - 1, i1 + 1):\n                        for x2 in range(i2 - 1, i2 + 1):\n                            if x1 >= 0 and x2 >= 0:\n                                dp[k][i1][i2] = max(\n                                    dp[k][i1][i2], dp[k - 1][x1][x2] + t\n                                )\n        return max(0, dp[-1][-1][-1])\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random grid\n    n = random.randint(1, 5)\n    grid = [[random.choice([0, 1, -1]) for _ in range(n)] for _ in range(n)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.cherryPickup(grid)\n\n    return grid, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.cherryPickup(grid) == expected_result\n        print(f\"assert solution.cherryPickup({grid}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.cherryPickup({grid}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.cherryPickup([[1, 1], [-1, 1]]) == 3\nassert solution.cherryPickup([[1, -1, 0], [1, 0, 0], [1, 0, 1]]) == 4\nassert solution.cherryPickup([[1, -1, 1, -1], [-1, 0, 1, 0], [0, 1, -1, -1], [1, 0, 1, 1]]) == 0\nassert solution.cherryPickup([[1]]) == 1\nassert solution.cherryPickup([[0, -1, 1, 1], [0, 1, 0, 1], [1, 1, -1, -1], [-1, 0, 1, -1]]) == 0\nassert solution.cherryPickup([[1, 1], [0, 1]]) == 3\nassert solution.cherryPickup([[1, -1, 0, 1], [1, 0, 0, 0], [1, 0, 0, -1], [-1, 0, 1, 0]]) == 4\nassert solution.cherryPickup([[1, 1, 1, 1], [1, 1, 0, 0], [1, 1, -1, 1], [0, -1, 0, -1]]) == 0\nassert solution.cherryPickup([[0, 0, -1], [-1, -1, 1], [0, -1, 1]]) == 0\nassert solution.cherryPickup([[-1, 0, 1], [1, 1, 1], [1, 1, -1]]) == 0\nassert solution.cherryPickup([[-1, 1, 1], [1, -1, -1], [-1, 1, 0]]) == 0\nassert solution.cherryPickup([[-1, -1, 0, 0], [0, 1, 0, 0], [-1, 0, 1, -1], [-1, 1, 0, -1]]) == 0\nassert solution.cherryPickup([[1]]) == 1\nassert solution.cherryPickup([[0, 0, 1, 0, 1], [0, 1, -1, 0, -1], [0, 1, 1, 1, 1], [-1, -1, 1, 0, 1], [1, 1, 1, -1, 1]]) == 9\nassert solution.cherryPickup([[0, -1, 0, 1], [1, 0, 0, -1], [-1, -1, 1, 1], [-1, 1, 1, -1]]) == 0\nassert solution.cherryPickup([[-1, -1, 1], [0, 0, 1], [1, -1, 0]]) == 0\nassert solution.cherryPickup([[0, 0], [1, 0]]) == 1\nassert solution.cherryPickup([[-1, 1], [1, 0]]) == 1\nassert solution.cherryPickup([[1]]) == 1\nassert solution.cherryPickup([[0, -1, -1, -1, 1], [-1, -1, 0, -1, -1], [0, -1, 0, -1, 1], [1, -1, 1, -1, 1], [0, 1, 1, -1, -1]]) == 0\nassert solution.cherryPickup([[-1, 1], [1, -1]]) == 0\nassert solution.cherryPickup([[-1, 0, 1, 0, 1], [0, -1, 0, -1, 1], [-1, -1, 1, 1, 1], [-1, -1, 0, 1, 1], [-1, 1, 1, -1, 1]]) == 8\nassert solution.cherryPickup([[-1]]) == 0\nassert solution.cherryPickup([[-1, -1, 1, 1], [0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 0, -1]]) == 0\nassert solution.cherryPickup([[-1, 1, -1], [-1, -1, 0], [-1, 1, 1]]) == 0\nassert solution.cherryPickup([[-1]]) == 0\nassert solution.cherryPickup([[-1, -1, -1], [-1, -1, 1], [-1, -1, 1]]) == 0\nassert solution.cherryPickup([[0, -1, -1, 1], [0, 0, 0, 1], [1, -1, 1, 1], [-1, 1, 0, -1]]) == 0\nassert solution.cherryPickup([[0, -1], [0, 1]]) == 1\nassert solution.cherryPickup([[0]]) == 0\nassert solution.cherryPickup([[-1, 0, -1, 1], [0, 1, 1, -1], [-1, 1, -1, 1], [-1, 1, 0, -1]]) == 0\nassert solution.cherryPickup([[-1, 1, 1, -1, 1], [-1, -1, 0, 1, 1], [1, -1, -1, 1, 0], [0, 1, -1, -1, 1], [1, 1, 1, 0, 1]]) == 6\nassert solution.cherryPickup([[-1, 0], [-1, -1]]) == 0\nassert solution.cherryPickup([[1, 0, 1, 0], [0, -1, 0, 1], [-1, 1, -1, 1], [0, 1, 1, 1]]) == 5\nassert solution.cherryPickup([[0, 1, 0, -1, 1], [-1, 0, 1, -1, -1], [-1, 0, 0, 1, 1], [0, 1, 1, 0, 0], [1, 0, -1, 0, 0]]) == 6\nassert solution.cherryPickup([[-1, 0, 0], [-1, 1, 1], [1, -1, 1]]) == 2\nassert solution.cherryPickup([[-1, 1, -1], [1, 1, -1], [-1, 1, 1]]) == 4\nassert solution.cherryPickup([[1, 0], [-1, -1]]) == 0\nassert solution.cherryPickup([[0, -1, -1, 1, -1], [1, 1, -1, 1, 1], [0, -1, 1, 1, 1], [-1, -1, 1, 1, -1], [1, -1, 0, 0, 1]]) == 0\nassert solution.cherryPickup([[-1, -1, 1, -1, -1], [0, 0, 0, 0, 0], [1, 1, 1, 0, 0], [0, 0, -1, 0, 1], [1, -1, 0, 0, 0]]) == 3\nassert solution.cherryPickup([[-1, 1, 1, 0], [0, 1, 0, 1], [0, 1, -1, 0], [1, 0, 1, -1]]) == 0\nassert solution.cherryPickup([[-1, -1, 0, 1, -1], [-1, 0, -1, -1, 0], [0, 1, -1, -1, -1], [0, -1, 0, -1, -1], [0, 0, 1, -1, 1]]) == 0\nassert solution.cherryPickup([[0, -1], [-1, -1]]) == 0\nassert solution.cherryPickup([[-1, -1, 1], [0, 1, 1], [-1, -1, 1]]) == 2\nassert solution.cherryPickup([[1, 1, 1, -1, 0], [0, -1, -1, 0, 1], [0, 0, 0, -1, 0], [0, 0, 0, 0, 1], [1, -1, 1, -1, -1]]) == 0\nassert solution.cherryPickup([[-1]]) == 0\nassert solution.cherryPickup([[1, -1], [1, 1]]) == 3\nassert solution.cherryPickup([[-1, 0, 1, 1], [-1, 1, 0, 1], [0, -1, 0, 0], [0, 0, 1, -1]]) == 0\nassert solution.cherryPickup([[0, -1, 1, 1], [0, 0, 0, -1], [-1, -1, 1, 0], [-1, -1, 1, -1]]) == 0\nassert solution.cherryPickup([[0, 0], [-1, 0]]) == 0\nassert solution.cherryPickup([[-1, -1], [0, 0]]) == 0\nassert solution.cherryPickup([[1]]) == 1\nassert solution.cherryPickup([[1, 1, 1], [0, 1, 0], [1, 0, -1]]) == 0\nassert solution.cherryPickup([[-1, -1], [-1, 1]]) == 0\nassert solution.cherryPickup([[-1, -1], [-1, 0]]) == 0\nassert solution.cherryPickup([[0, 0, -1, 0, 1], [1, 0, -1, 1, -1], [-1, 1, 0, 0, 0], [1, 0, 0, -1, 0], [1, 0, -1, 1, 0]]) == 2\nassert solution.cherryPickup([[0, -1], [0, 0]]) == 0\nassert solution.cherryPickup([[-1]]) == 0\nassert solution.cherryPickup([[1, -1, -1], [-1, -1, 1], [1, -1, 1]]) == 0\nassert solution.cherryPickup([[-1, 0, 0, 1], [-1, 1, 1, 0], [0, 1, 1, -1], [0, 1, 1, -1]]) == 0\nassert solution.cherryPickup([[0, 0, 0, 0], [1, 1, 0, -1], [-1, 1, 0, 0], [1, 0, -1, 0]]) == 3\nassert solution.cherryPickup([[0, 1], [0, -1]]) == 0\nassert solution.cherryPickup([[1, 1, 0], [1, -1, 1], [-1, 0, -1]]) == 0\nassert solution.cherryPickup([[-1, 0], [0, 1]]) == 0\nassert solution.cherryPickup([[1, -1], [1, 1]]) == 3\nassert solution.cherryPickup([[0, -1], [0, 0]]) == 0\nassert solution.cherryPickup([[-1, 1, 1, 0], [-1, 0, -1, -1], [0, 1, 0, -1], [1, -1, -1, -1]]) == 0\nassert solution.cherryPickup([[1]]) == 1\nassert solution.cherryPickup([[1]]) == 1\nassert solution.cherryPickup([[0, -1, 1], [0, -1, 1], [-1, 1, 1]]) == 0\nassert solution.cherryPickup([[0]]) == 0\nassert solution.cherryPickup([[-1, -1, 1], [1, -1, -1], [-1, 1, -1]]) == 0\nassert solution.cherryPickup([[-1, 0], [1, 1]]) == 1\nassert solution.cherryPickup([[1, 0, -1, -1, 0], [0, 1, 1, -1, 0], [0, -1, -1, 0, 1], [1, -1, 0, 1, 0], [1, 0, 0, 0, 0]]) == 3\nassert solution.cherryPickup([[1, 1, 0], [1, 1, 1], [1, 0, 1]]) == 7\nassert solution.cherryPickup([[-1, -1], [1, 1]]) == 1\nassert solution.cherryPickup([[-1]]) == 0\nassert solution.cherryPickup([[1, 1, -1, -1, -1], [0, 1, 1, -1, 1], [-1, 1, 1, 0, 0], [-1, 1, 1, -1, 0], [0, 0, 0, 1, -1]]) == 0\nassert solution.cherryPickup([[0]]) == 0\nassert solution.cherryPickup([[0]]) == 0\nassert solution.cherryPickup([[-1, -1, 0], [0, 0, 1], [0, 1, -1]]) == 0\nassert solution.cherryPickup([[0, 0, 0, 1, 0], [1, -1, 0, 0, -1], [-1, -1, 0, 0, 1], [1, 1, 0, -1, -1], [-1, 0, 0, 1, -1]]) == 0\nassert solution.cherryPickup([[1, 1, -1, 1, -1], [1, 0, 0, -1, 1], [1, 1, 0, -1, 0], [1, -1, 0, -1, 1], [1, -1, 0, -1, -1]]) == 0\nassert solution.cherryPickup([[0]]) == 0\nassert solution.cherryPickup([[-1, 1], [1, -1]]) == 0\nassert solution.cherryPickup([[-1, 0, 1, 0], [0, 0, 1, -1], [0, -1, 1, -1], [-1, 0, -1, 0]]) == 0\nassert solution.cherryPickup([[1, 0, 1, 0, -1], [0, 0, 1, -1, 1], [0, -1, -1, 1, 1], [0, 0, 0, 1, 0], [-1, 0, -1, 0, -1]]) == 0\nassert solution.cherryPickup([[-1, 0, 1], [-1, 0, -1], [1, 1, 1]]) == 1\nassert solution.cherryPickup([[0, 0, -1, 1], [1, 0, -1, 0], [1, 1, 1, -1], [0, -1, 1, -1]]) == 0\nassert solution.cherryPickup([[-1]]) == 0\nassert solution.cherryPickup([[1, -1, 1, 1], [0, -1, -1, 1], [0, -1, -1, 1], [-1, 0, -1, 0]]) == 0\nassert solution.cherryPickup([[1, 0], [0, 1]]) == 2\nassert solution.cherryPickup([[-1]]) == 0\nassert solution.cherryPickup([[0, 1, 0], [-1, 0, 1], [0, 1, 1]]) == 4\nassert solution.cherryPickup([[-1, 1, 1], [-1, -1, 0], [0, 1, 1]]) == 2\nassert solution.cherryPickup([[1, 1, 0, 0, -1], [0, 1, 1, -1, 0], [1, 1, 1, 0, 1], [0, -1, 0, 0, -1], [1, -1, 1, 0, -1]]) == 0\nassert solution.cherryPickup([[0, -1, 1], [-1, 1, 1], [-1, 0, 0]]) == 0\nassert solution.cherryPickup([[0, 1, 0, 1], [-1, -1, 0, -1], [0, -1, -1, -1], [-1, 1, 0, 1]]) == 0\nassert solution.cherryPickup([[1, 1, 1], [1, 0, 0], [0, -1, 0]]) == 4\nassert solution.cherryPickup([[0, 0, 1, -1], [-1, -1, 1, 0], [1, -1, -1, -1], [0, 1, -1, 0]]) == 0",
  "inefficient_solution": "class Solution:\n    def cherryPickup(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        dp = [[[0 for _ in range(n)] for _ in range(n)] for _ in range(n ** 4)]\n        visited = [[[False for _ in range(n)] for _ in range(n)] for _ in range(n ** 4)]\n\n        def dfs(i1, j1, i2, j2, k):\n            if not 0 <= i1 < n or not 0 <= i2 < n or not 0 <= j1 < n or not 0 <= j2 < n:\n                return 0\n            if grid[i1][j1] == -1 or grid[i2][j2] == -1:\n                return 0\n            if visited[k][i1][j1]:\n                return dp[k][i1][j1]\n            visited[k][i1][j1] = True\n            t = grid[i1][j1]\n            if i1 != i2:\n                t += grid[i2][j2]\n            ans = t\n            for x1 in range(i1 - 1, i1 + 2):\n                for x2 in range(i2 - 1, i2 + 2):\n                    if 0 <= x1 < n and 0 <= x2 < n:\n                        ans = max(ans, dfs(x1, j1 + 1, x2, j2 + 1, k + 1))\n            dp[k][i1][j1] = ans\n            return ans\n\n        return dfs(0, 0, 0, 0, 0)",
  "is_python": true
}