{
  "problem_idx": 1521,
  "task_name": "Find a Value of a Mysterious Function Closest to Target",
  "markdown_description": "\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1500-1599/1521.Find%20a%20Value%20of%20a%20Mysterious%20Function%20Closest%20to%20Target/images/change.png)\n\n\nWinston was given the above mysterious function `func`. He has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible.\n\n\nReturn *the minimum possible value* of `|func(arr, l, r) - target|`.\n\n\nNotice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [9,12,3,7,15], target = 5\n**Output:** 2\n**Explanation:** Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1000000,1000000,1000000], target = 1\n**Output:** 999999\n**Explanation:** Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** arr = [1,2,4,8,16], target = 0\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 105`\n* `1 <= arr[i] <= 106`\n* `0 <= target <= 107`\n\n\n",
  "canonical_solution": "class Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n        ans = abs(arr[0] - target)\n        s = {arr[0]}\n        for x in arr:\n            s = {x & y for y in s} | {x}\n            ans = min(ans, min(abs(y - target) for y in s))\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n        ans = abs(arr[0] - target)\n        s = {arr[0]}\n        for x in arr:\n            s = {x & y for y in s} | {x}\n            ans = min(ans, min(abs(y - target) for y in s))\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random array\n    arr = random.sample(range(1, 1000001), random.randint(1, 10))\n\n    # Generate a random target\n    target = random.randint(0, 10000001)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.closestToTarget(arr, target)\n\n    return arr, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.closestToTarget(arr, target) == expected_result\n        print(f\"assert solution.closestToTarget({arr}, {target}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.closestToTarget({arr}, {target}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.closestToTarget([731068, 375296, 185630, 674935, 692139, 455522, 779731, 589761, 486320], 3419253) == 2639522\nassert solution.closestToTarget([378520, 32581, 543407], 9980627) == 9437220\nassert solution.closestToTarget([373677, 583321, 121663], 4885569) == 4302248\nassert solution.closestToTarget([868752], 678263) == 190489\nassert solution.closestToTarget([588834, 455150, 473317, 561736, 72315, 870965, 279094, 867474, 210883], 7878502) == 7007537\nassert solution.closestToTarget([852402, 687796, 116804, 122679, 137603], 9171721) == 8319319\nassert solution.closestToTarget([984841, 902013, 129346, 794567, 603821, 319835], 8623757) == 7638916\nassert solution.closestToTarget([177253, 629329, 671583, 611533, 934805, 142150, 246175, 375404, 872358, 39606], 4050001) == 3115196\nassert solution.closestToTarget([25107, 188821, 477106, 453910, 685983, 293888, 513730, 148172, 841544], 2110408) == 1268864\nassert solution.closestToTarget([815680, 312711, 467681, 377593, 791384], 8726584) == 7910904\nassert solution.closestToTarget([778346, 522643, 349117, 693444, 508664, 872051, 682855], 3630853) == 2758802\nassert solution.closestToTarget([297575, 919595], 7347787) == 6428192\nassert solution.closestToTarget([68975, 137314, 986363, 467016, 649928, 84995, 746883, 474511, 470655, 389872], 3481108) == 2494745\nassert solution.closestToTarget([181355, 845960, 476391, 429615], 8099683) == 7253723\nassert solution.closestToTarget([575879], 957064) == 381185\nassert solution.closestToTarget([762895, 693841, 80381, 72169], 3922588) == 3159693\nassert solution.closestToTarget([185618, 70631, 670543, 598461, 617590, 331343, 586312, 995756, 492737], 3553267) == 2557511\nassert solution.closestToTarget([586838, 785778, 782759, 285304, 965516, 644434, 129761, 108686], 2722389) == 1756873\nassert solution.closestToTarget([785042, 492288, 837024, 902940, 404822, 132829], 6184042) == 5281102\nassert solution.closestToTarget([843255, 841807, 464018, 787418], 4858626) == 4015371\nassert solution.closestToTarget([462236, 272120, 697797, 340962, 933322, 822547, 255845, 359278, 328849, 712627], 6884779) == 5951457\nassert solution.closestToTarget([863793], 8923581) == 8059788\nassert solution.closestToTarget([446888, 450971, 588029, 735702, 4116], 2185063) == 1449361\nassert solution.closestToTarget([681476], 2507454) == 1825978\nassert solution.closestToTarget([738428, 779187], 7855560) == 7076373\nassert solution.closestToTarget([411545, 293105, 149287, 34683, 56308, 261834], 4347554) == 3936009\nassert solution.closestToTarget([394916], 1632077) == 1237161\nassert solution.closestToTarget([626405, 755777, 472931, 785537, 969908, 107079], 9910838) == 8940930\nassert solution.closestToTarget([280599], 7910559) == 7629960\nassert solution.closestToTarget([913282, 652946, 490409, 498610, 129500], 6416926) == 5503644\nassert solution.closestToTarget([555978, 519985], 4540393) == 3984415\nassert solution.closestToTarget([306824, 3213], 8629873) == 8323049\nassert solution.closestToTarget([700286, 131445, 882364, 979687, 217434, 378421, 296578, 65610, 875813, 865719], 7583759) == 6604072\nassert solution.closestToTarget([575193, 406800, 312245, 868088, 792023, 186752, 222291, 896171], 3382991) == 2486820\nassert solution.closestToTarget([808166, 496730], 5573773) == 4765607\nassert solution.closestToTarget([349942, 510268, 219432, 960779, 623207, 593051, 969555, 513326], 1308712) == 339157\nassert solution.closestToTarget([763759], 9329331) == 8565572\nassert solution.closestToTarget([675521, 68216, 283556, 921221, 227451, 300007, 625355, 519929], 7821409) == 6900188\nassert solution.closestToTarget([598992, 310162, 925845, 256695, 204865, 450792, 118146, 7433, 205492], 4596059) == 3670214\nassert solution.closestToTarget([380867, 182875, 853891, 723490, 901407, 833018], 9176173) == 8274766\nassert solution.closestToTarget([65003, 731947, 517259, 397968, 625941, 3659, 681502, 651489, 909428], 657337) == 5848\nassert solution.closestToTarget([651161, 907770, 503839, 554840, 676296, 287320, 680053, 735945, 55124], 6130657) == 5222887\nassert solution.closestToTarget([593603, 452239, 334164, 332943, 725816, 914515, 129946, 823852], 9300329) == 8385814\nassert solution.closestToTarget([683809, 672031, 434662, 284367, 619745, 650118, 408473, 339203], 2691048) == 2007239\nassert solution.closestToTarget([27950, 328057, 172318, 726965, 471909, 549830, 631032, 497578, 787082], 6638826) == 5851744\nassert solution.closestToTarget([878110, 159186, 694631, 695532, 205048, 15975, 790706, 960272, 14345], 331151) == 126103\nassert solution.closestToTarget([859373, 471002, 482696, 366360, 451908, 490278, 333001], 4416533) == 3557160\nassert solution.closestToTarget([308917, 686443, 868254, 106828, 439448, 464589, 471458, 679302, 566618, 195005], 3101394) == 2233140\nassert solution.closestToTarget([280081, 470527, 56303], 4574329) == 4103802\nassert solution.closestToTarget([623974, 944559, 367350, 379708, 580368, 822724], 8229993) == 7285434\nassert solution.closestToTarget([880138, 799689, 820204, 71587, 420518, 966506, 227928, 411493, 487110, 763820], 2175657) == 1209151\nassert solution.closestToTarget([324849, 973392, 65928, 227573, 218467, 230133, 528062, 154848], 5584873) == 4611481\nassert solution.closestToTarget([477996, 857722, 824142, 75131, 222446, 311949, 57605, 907837], 8716000) == 7808163\nassert solution.closestToTarget([618482, 426450, 148190], 7308902) == 6690420\nassert solution.closestToTarget([340971, 242754, 168843, 938310], 8807524) == 7869214\nassert solution.closestToTarget([846011, 172020, 515414, 521475, 422273], 4567689) == 3721678\nassert solution.closestToTarget([536198], 5794292) == 5258094\nassert solution.closestToTarget([255984, 157070, 276471, 69400], 8758674) == 8482203\nassert solution.closestToTarget([632149, 559082, 704287, 214325, 540260, 755766], 73002) == 59371\nassert solution.closestToTarget([370214, 800460, 879766, 463555, 243443, 344823], 9211170) == 8331404\nassert solution.closestToTarget([635412, 560654, 363955, 316724, 497480, 903122, 646629], 3289278) == 2386156\nassert solution.closestToTarget([119608, 914881, 384278, 802423, 741018], 7459223) == 6544342\nassert solution.closestToTarget([931937, 126685, 24528, 607046, 36775, 960666, 455500, 481784, 398101], 201103) == 74418\nassert solution.closestToTarget([97400], 6395187) == 6297787\nassert solution.closestToTarget([823002, 15851, 362497], 1976320) == 1153318\nassert solution.closestToTarget([773057, 106293, 260199, 464892], 9287804) == 8514747\nassert solution.closestToTarget([93697, 309530, 696019, 112987, 72424, 862797], 2461702) == 1598905\nassert solution.closestToTarget([19415, 968878, 680508, 453211, 899582, 899594, 467553, 958970, 236996, 477352], 2874640) == 1905762\nassert solution.closestToTarget([857176, 947699, 49786, 784697], 7775899) == 6828200\nassert solution.closestToTarget([229755, 124554, 842180, 723962, 649742, 687125], 2088466) == 1246286\nassert solution.closestToTarget([241933, 546291, 805591, 634005, 318529, 728464, 475208, 511163, 195252, 183691], 2692468) == 1886877\nassert solution.closestToTarget([299117, 837849, 687611, 180132, 822808], 5926590) == 5088741\nassert solution.closestToTarget([154564, 886015, 451255, 293607, 421, 556817], 5868207) == 4982192\nassert solution.closestToTarget([472562, 78273, 953687, 988805, 293098, 188423, 790521, 904221, 726058], 1330799) == 341994\nassert solution.closestToTarget([252610, 393932, 352049, 717259, 476373, 398667, 562156, 916017, 706617, 819705], 4317364) == 3401347\nassert solution.closestToTarget([169659, 822519, 470732, 154486, 224464, 141023, 957183, 147630], 1325361) == 368178\nassert solution.closestToTarget([561071, 813191, 176728, 377144, 705207, 849503, 168892], 908110) == 58607\nassert solution.closestToTarget([565500, 419179], 6827852) == 6262352\nassert solution.closestToTarget([589464, 515856, 381794, 660313, 441216, 888137, 378796, 34188], 4986397) == 4098260\nassert solution.closestToTarget([578768, 667384, 309456, 985505, 170991, 814495, 756729], 3246828) == 2261323\nassert solution.closestToTarget([84346, 598030, 553244, 596003, 630363, 556781, 750149, 346866, 577566, 423267], 8666085) == 7915936\nassert solution.closestToTarget([172656], 4008222) == 3835566\nassert solution.closestToTarget([613725, 118870, 285806], 6442449) == 5828724\nassert solution.closestToTarget([100714, 603624, 793574, 755064, 438625, 324234, 620130], 5268795) == 4475221\nassert solution.closestToTarget([64014, 231689, 796092, 628434, 161013, 793532, 557447, 991238, 298445, 526364], 2539905) == 1548667\nassert solution.closestToTarget([510423, 510359], 354267) == 156092\nassert solution.closestToTarget([27485, 587865, 500957, 42318, 580137, 696324, 250945, 297379], 7798240) == 7101916\nassert solution.closestToTarget([6519, 869064, 870266, 33377, 452387, 674755, 214756, 383072, 699560], 7974613) == 7104347\nassert solution.closestToTarget([597296, 848055, 370150, 963233], 8092505) == 7129272\nassert solution.closestToTarget([246139, 160587, 825297, 161704, 757332, 398576, 103718, 349254, 247339], 3435896) == 2610599\nassert solution.closestToTarget([15486, 802737, 738633, 463417], 9051126) == 8248389\nassert solution.closestToTarget([234756, 644347, 501291, 19581, 121783, 673465, 845692], 5122775) == 4277083\nassert solution.closestToTarget([886776, 8386, 485305, 688301, 795309, 184388, 930071, 435522], 9959322) == 9029251\nassert solution.closestToTarget([594552, 218983, 132011], 5003762) == 4409210\nassert solution.closestToTarget([357740, 343411, 480349, 892421, 243212], 7801305) == 6908884\nassert solution.closestToTarget([968257, 493109, 609958, 762438, 810894, 981424, 506030], 3615421) == 2633997\nassert solution.closestToTarget([417540, 472002, 185139], 29944) == 105992\nassert solution.closestToTarget([528139, 923078, 876788, 65971, 460195, 673524, 72664, 78573, 677465], 1708597) == 785519\nassert solution.closestToTarget([986535, 804547, 910218, 171565, 94107, 660062], 7066105) == 6079570\nassert solution.closestToTarget([816095, 148369, 246311], 7543280) == 6727185",
  "inefficient_solution": "class Solution:\n    def closestToTarget(self, arr: List[int], target: int) -> int:\n        ans = float('inf')\n        for l in range(len(arr)):\n            for r in range(l, len(arr)):\n                func_value = 0\n                for i in range(l, r+1):\n                    func_value ^= arr[i]\n                ans = min(ans, abs(func_value - target))\n        return ans",
  "is_python": true
}