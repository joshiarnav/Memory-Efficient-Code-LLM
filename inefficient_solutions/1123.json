{
  "problem_idx": 1123,
  "task_name": "Lowest Common Ancestor of Deepest Leaves",
  "markdown_description": "\nGiven the `root` of a binary tree, return *the lowest common ancestor of its deepest leaves*.\n\n\nRecall that:\n\n\n* The node of a binary tree is a leaf if and only if it has no children\n* The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.\n* The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1100-1199/1123.Lowest%20Common%20Ancestor%20of%20Deepest%20Leaves/images/sketch1.png)\n\n```\n\n**Input:** root = [3,5,1,6,2,0,8,null,null,7,4]\n**Output:** [2,7,4]\n**Explanation:** We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** root = [1]\n**Output:** [1]\n**Explanation:** The root is the deepest node in the tree, and it's the lca of itself.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** root = [0,1,3,null,2]\n**Output:** [2]\n**Explanation:** The deepest leaf node in the tree is 2, the lca of one node is itself.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree will be in the range `[1, 1000]`.\n* `0 <= Node.val <= 1000`\n* The values of the nodes in the tree are **unique**.\n\n\n\u00a0\n\n\n**Note:** This question is the same as 865: <https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/>\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def lcaDeepestLeaves(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        def dfs(root):\n            if root is None:\n                return None, 0\n            l, d1 = dfs(root.left)\n            r, d2 = dfs(root.right)\n            if d1 > d2:\n                return l, d1 + 1\n            if d1 < d2:\n                return r, d2 + 1\n            return root, d1 + 1\n\n        return dfs(root)[0]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def lcaDeepestLeaves(self, root):\n        def dfs(root):\n            if root is None:\n                return None, 0\n            l, d1 = dfs(root.left)\n            r, d2 = dfs(root.right)\n            if d1 > d2:\n                return l, d1 + 1\n            if d1 < d2:\n                return r, d2 + 1\n            return root, d1 + 1\n\n        return dfs(root)[0]\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random binary tree nodes\n    nodes = [TreeNode(val=random.randint(0, 1000)) for _ in range(random.randint(1, 1001))]\n    \n    # Generate random tree structure\n    for i in range(len(nodes)):\n        left_idx = i * 2 + 1\n        right_idx = i * 2 + 2\n        if left_idx < len(nodes):\n            nodes[i].left = nodes[left_idx]\n        if right_idx < len(nodes):\n            nodes[i].right = nodes[right_idx]\n    \n    # Select root node\n    root = random.choice(nodes)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lcaDeepestLeaves(root)\n\n    return root, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        root, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lcaDeepestLeaves(root) == expected_result\n        print(f\"assert solution.lcaDeepestLeaves({root}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.lcaDeepestLeaves({root}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07314310>) == <__main__.TreeNode object at 0x7f0c07314310>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07304d10>) == <__main__.TreeNode object at 0x7f0c07304d10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07305410>) == <__main__.TreeNode object at 0x7f0c07305410>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c073059d0>) == <__main__.TreeNode object at 0x7f0c073059d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07305450>) == <__main__.TreeNode object at 0x7f0c07305450>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307150>) == <__main__.TreeNode object at 0x7f0c07307150>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0730bad0>) == <__main__.TreeNode object at 0x7f0c0730bad0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307690>) == <__main__.TreeNode object at 0x7f0c07307690>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0730bc10>) == <__main__.TreeNode object at 0x7f0c0730bc10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0730b850>) == <__main__.TreeNode object at 0x7f0c0730b850>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07309c50>) == <__main__.TreeNode object at 0x7f0c07309c50>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07308950>) == <__main__.TreeNode object at 0x7f0c07308950>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07309010>) == <__main__.TreeNode object at 0x7f0c07309010>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307ad0>) == <__main__.TreeNode object at 0x7f0c07307ad0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306750>) == <__main__.TreeNode object at 0x7f0c07306750>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307190>) == <__main__.TreeNode object at 0x7f0c07307190>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07309f10>) == <__main__.TreeNode object at 0x7f0c07309f10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07308550>) == <__main__.TreeNode object at 0x7f0c07308550>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07305750>) == <__main__.TreeNode object at 0x7f0c07305750>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07304f90>) == <__main__.TreeNode object at 0x7f0c07304f90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07305350>) == <__main__.TreeNode object at 0x7f0c07305350>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307c50>) == <__main__.TreeNode object at 0x7f0c07307c50>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306ad0>) == <__main__.TreeNode object at 0x7f0c07306ad0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307ad0>) == <__main__.TreeNode object at 0x7f0c07307ad0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0730c790>) == <__main__.TreeNode object at 0x7f0c0730c790>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07323e90>) == <__main__.TreeNode object at 0x7f0c07323e90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07322a10>) == <__main__.TreeNode object at 0x7f0c07322a10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07323790>) == <__main__.TreeNode object at 0x7f0c07323790>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07320dd0>) == <__main__.TreeNode object at 0x7f0c07320dd0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c073068d0>) == <__main__.TreeNode object at 0x7f0c073068d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306fd0>) == <__main__.TreeNode object at 0x7f0c07306fd0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c073094d0>) == <__main__.TreeNode object at 0x7f0c073094d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07453bd0>) == <__main__.TreeNode object at 0x7f0c07453bd0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07320310>) == <__main__.TreeNode object at 0x7f0c07320310>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306b90>) == <__main__.TreeNode object at 0x7f0c07306b90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07447210>) == <__main__.TreeNode object at 0x7f0c07447e90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c073058d0>) == <__main__.TreeNode object at 0x7f0c073058d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07451210>) == <__main__.TreeNode object at 0x7f0c07451210>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07304d10>) == <__main__.TreeNode object at 0x7f0c07304d10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306150>) == <__main__.TreeNode object at 0x7f0c07306150>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07320410>) == <__main__.TreeNode object at 0x7f0c07320410>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07452850>) == <__main__.TreeNode object at 0x7f0c07452850>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306310>) == <__main__.TreeNode object at 0x7f0c07306310>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07465290>) == <__main__.TreeNode object at 0x7f0c07465290>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c072de8d0>) == <__main__.TreeNode object at 0x7f0c072de8d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07308e10>) == <__main__.TreeNode object at 0x7f0c07308e10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07464250>) == <__main__.TreeNode object at 0x7f0c07464250>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07452d50>) == <__main__.TreeNode object at 0x7f0c07452d50>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0723ba90>) == <__main__.TreeNode object at 0x7f0c0723ba90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307850>) == <__main__.TreeNode object at 0x7f0c07307850>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c073072d0>) == <__main__.TreeNode object at 0x7f0c073072d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07240050>) == <__main__.TreeNode object at 0x7f0c07240050>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07315c10>) == <__main__.TreeNode object at 0x7f0c07315c10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07305690>) == <__main__.TreeNode object at 0x7f0c07305690>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07464690>) == <__main__.TreeNode object at 0x7f0c07464690>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307e90>) == <__main__.TreeNode object at 0x7f0c07307e90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07322250>) == <__main__.TreeNode object at 0x7f0c07322250>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c073206d0>) == <__main__.TreeNode object at 0x7f0c073206d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07320450>) == <__main__.TreeNode object at 0x7f0c07320450>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07464050>) == <__main__.TreeNode object at 0x7f0c07464050>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07467e90>) == <__main__.TreeNode object at 0x7f0c07467e90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0723bad0>) == <__main__.TreeNode object at 0x7f0c0723bad0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07452d50>) == <__main__.TreeNode object at 0x7f0c07452d50>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07239a10>) == <__main__.TreeNode object at 0x7f0c07239a10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07464450>) == <__main__.TreeNode object at 0x7f0c07464450>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07465210>) == <__main__.TreeNode object at 0x7f0c07465210>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07453250>) == <__main__.TreeNode object at 0x7f0c07453250>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07450bd0>) == <__main__.TreeNode object at 0x7f0c07450bd0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07453310>) == <__main__.TreeNode object at 0x7f0c07453310>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07304dd0>) == <__main__.TreeNode object at 0x7f0c07304dd0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c074469d0>) == <__main__.TreeNode object at 0x7f0c074469d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07465290>) == <__main__.TreeNode object at 0x7f0c07465290>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07453150>) == <__main__.TreeNode object at 0x7f0c07453150>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07453dd0>) == <__main__.TreeNode object at 0x7f0c07453dd0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07464410>) == <__main__.TreeNode object at 0x7f0c07464410>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306550>) == <__main__.TreeNode object at 0x7f0c07306550>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07450ed0>) == <__main__.TreeNode object at 0x7f0c07450ed0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07453610>) == <__main__.TreeNode object at 0x7f0c07453610>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07447750>) == <__main__.TreeNode object at 0x7f0c07447750>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07305010>) == <__main__.TreeNode object at 0x7f0c07305010>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c074474d0>) == <__main__.TreeNode object at 0x7f0c074474d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306590>) == <__main__.TreeNode object at 0x7f0c07306590>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07306bd0>) == <__main__.TreeNode object at 0x7f0c07306bd0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07309f90>) == <__main__.TreeNode object at 0x7f0c07309f90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0730a310>) == <__main__.TreeNode object at 0x7f0c0730a310>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0730aa10>) == <__main__.TreeNode object at 0x7f0c0730aa10>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07467210>) == <__main__.TreeNode object at 0x7f0c07467210>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07304cd0>) == <__main__.TreeNode object at 0x7f0c07304cd0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07452690>) == <__main__.TreeNode object at 0x7f0c07452690>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c074536d0>) == <__main__.TreeNode object at 0x7f0c074536d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c074474d0>) == <__main__.TreeNode object at 0x7f0c074474d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07465350>) == <__main__.TreeNode object at 0x7f0c07465350>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07452490>) == <__main__.TreeNode object at 0x7f0c07452490>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0730bb90>) == <__main__.TreeNode object at 0x7f0c0730bb90>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c0730b450>) == <__main__.TreeNode object at 0x7f0c0730b450>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07465350>) == <__main__.TreeNode object at 0x7f0c07465350>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307550>) == <__main__.TreeNode object at 0x7f0c07307550>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c073239d0>) == <__main__.TreeNode object at 0x7f0c073239d0>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07447b50>) == <__main__.TreeNode object at 0x7f0c07447b50>\nassert solution.lcaDeepestLeaves(<__main__.TreeNode object at 0x7f0c07307a90>) == <__main__.TreeNode object at 0x7f0c07307a90>",
  "inefficient_solution": "class Solution:\n    def lcaDeepestLeaves(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\n        def dfs(root):\n            if root is None:\n                return None, None, 0\n            left, right, d1 = dfs(root.left)\n            left_val = left.val if left else None\n            right_val = right.val if right else None\n            _, _, d2 = dfs(root.right)\n            if d1 > d2:\n                return left, left_val, d1 + 1\n            if d1 < d2:\n                return right, right_val, d2 + 1\n            return root, root.val, d1 + 1\n\n        left, left_val, d1 = dfs(root)\n        right, right_val, d2 = dfs(root)\n        result = []\n        stack = [(left, left_val, d1)]\n        while stack:\n            node, val, depth = stack.pop()\n            if node is None:\n                continue\n            if node == left and depth == d1:\n                result.append(node)\n            elif node == right and depth == d2:\n                result.append(node)\n            stack.append((node.left, None, depth + 1))\n            stack.append((node.right, None, depth + 1))\n        return result",
  "is_python": true
}