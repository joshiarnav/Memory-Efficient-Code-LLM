{
  "problem_idx": 62,
  "task_name": "Unique Paths",
  "markdown_description": "\nThere is a robot on an `m x n` grid. The robot is initially located at the **top-left corner** (i.e., `grid[0][0]`). The robot tries to move to the **bottom-right corner** (i.e., `grid[m - 1][n - 1]`). The robot can only move either down or right at any point in time.\n\n\nGiven the two integers `m` and `n`, return *the number of possible unique paths that the robot can take to reach the bottom-right corner*.\n\n\nThe test cases are generated so that the answer will be less than or equal to `2 * 109`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0000-0099/0062.Unique%20Paths/images/robot_maze.png)\n\n```\n\n**Input:** m = 3, n = 7\n**Output:** 28\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** m = 3, n = 2\n**Output:** 3\n**Explanation:** From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= m, n <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        f = [1] * n\n        for _ in range(1, m):\n            for j in range(1, n):\n                f[j] += f[j - 1]\n        return f[-1]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        f = [1] * n\n        for _ in range(1, m):\n            for j in range(1, n):\n                f[j] += f[j - 1]\n        return f[-1]\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random values for m and n\n    m = random.randint(1, 10)\n    n = random.randint(1, 10)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.uniquePaths(m, n)\n\n    return m, n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        m, n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.uniquePaths(m, n) == expected_result\n        print(f\"assert solution.uniquePaths({m}, {n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.uniquePaths({m}, {n}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.uniquePaths(6, 6) == 252\nassert solution.uniquePaths(8, 9) == 6435\nassert solution.uniquePaths(7, 7) == 924\nassert solution.uniquePaths(1, 10) == 1\nassert solution.uniquePaths(3, 2) == 3\nassert solution.uniquePaths(5, 3) == 15\nassert solution.uniquePaths(6, 9) == 1287\nassert solution.uniquePaths(4, 10) == 220\nassert solution.uniquePaths(9, 3) == 45\nassert solution.uniquePaths(5, 10) == 715\nassert solution.uniquePaths(5, 8) == 330\nassert solution.uniquePaths(3, 10) == 55\nassert solution.uniquePaths(10, 2) == 10\nassert solution.uniquePaths(10, 2) == 10\nassert solution.uniquePaths(4, 6) == 56\nassert solution.uniquePaths(10, 3) == 55\nassert solution.uniquePaths(1, 7) == 1\nassert solution.uniquePaths(10, 2) == 10\nassert solution.uniquePaths(8, 3) == 36\nassert solution.uniquePaths(10, 7) == 5005\nassert solution.uniquePaths(7, 9) == 3003\nassert solution.uniquePaths(1, 1) == 1\nassert solution.uniquePaths(1, 9) == 1\nassert solution.uniquePaths(9, 10) == 24310\nassert solution.uniquePaths(9, 1) == 1\nassert solution.uniquePaths(8, 5) == 330\nassert solution.uniquePaths(3, 1) == 1\nassert solution.uniquePaths(10, 5) == 715\nassert solution.uniquePaths(1, 9) == 1\nassert solution.uniquePaths(3, 2) == 3\nassert solution.uniquePaths(9, 5) == 495\nassert solution.uniquePaths(6, 7) == 462\nassert solution.uniquePaths(9, 8) == 6435\nassert solution.uniquePaths(8, 2) == 8\nassert solution.uniquePaths(8, 4) == 120\nassert solution.uniquePaths(7, 10) == 5005\nassert solution.uniquePaths(9, 2) == 9\nassert solution.uniquePaths(2, 4) == 4\nassert solution.uniquePaths(3, 1) == 1\nassert solution.uniquePaths(7, 4) == 84\nassert solution.uniquePaths(8, 10) == 11440\nassert solution.uniquePaths(5, 9) == 495\nassert solution.uniquePaths(6, 7) == 462\nassert solution.uniquePaths(10, 1) == 1\nassert solution.uniquePaths(2, 7) == 7\nassert solution.uniquePaths(5, 5) == 70\nassert solution.uniquePaths(8, 3) == 36\nassert solution.uniquePaths(7, 1) == 1\nassert solution.uniquePaths(6, 5) == 126\nassert solution.uniquePaths(2, 7) == 7\nassert solution.uniquePaths(9, 6) == 1287\nassert solution.uniquePaths(3, 2) == 3\nassert solution.uniquePaths(10, 10) == 48620\nassert solution.uniquePaths(1, 5) == 1\nassert solution.uniquePaths(1, 6) == 1\nassert solution.uniquePaths(10, 1) == 1\nassert solution.uniquePaths(10, 8) == 11440\nassert solution.uniquePaths(2, 10) == 10\nassert solution.uniquePaths(8, 9) == 6435\nassert solution.uniquePaths(2, 5) == 5\nassert solution.uniquePaths(7, 10) == 5005\nassert solution.uniquePaths(1, 1) == 1\nassert solution.uniquePaths(5, 6) == 126\nassert solution.uniquePaths(10, 6) == 2002\nassert solution.uniquePaths(2, 5) == 5\nassert solution.uniquePaths(9, 3) == 45\nassert solution.uniquePaths(2, 4) == 4\nassert solution.uniquePaths(10, 2) == 10\nassert solution.uniquePaths(10, 5) == 715\nassert solution.uniquePaths(8, 2) == 8\nassert solution.uniquePaths(4, 2) == 4\nassert solution.uniquePaths(1, 10) == 1\nassert solution.uniquePaths(9, 6) == 1287\nassert solution.uniquePaths(1, 6) == 1\nassert solution.uniquePaths(4, 4) == 20\nassert solution.uniquePaths(8, 2) == 8\nassert solution.uniquePaths(6, 9) == 1287\nassert solution.uniquePaths(3, 9) == 45\nassert solution.uniquePaths(5, 2) == 5\nassert solution.uniquePaths(8, 7) == 1716\nassert solution.uniquePaths(7, 1) == 1\nassert solution.uniquePaths(5, 4) == 35\nassert solution.uniquePaths(7, 4) == 84\nassert solution.uniquePaths(8, 4) == 120\nassert solution.uniquePaths(2, 8) == 8\nassert solution.uniquePaths(8, 7) == 1716\nassert solution.uniquePaths(7, 9) == 3003\nassert solution.uniquePaths(4, 6) == 56\nassert solution.uniquePaths(9, 2) == 9\nassert solution.uniquePaths(5, 4) == 35\nassert solution.uniquePaths(9, 6) == 1287\nassert solution.uniquePaths(10, 6) == 2002\nassert solution.uniquePaths(4, 3) == 10\nassert solution.uniquePaths(9, 3) == 45\nassert solution.uniquePaths(7, 7) == 924\nassert solution.uniquePaths(8, 8) == 3432\nassert solution.uniquePaths(1, 9) == 1\nassert solution.uniquePaths(7, 5) == 210\nassert solution.uniquePaths(6, 4) == 56\nassert solution.uniquePaths(7, 2) == 7",
  "inefficient_solution": "class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:\n        f = [[0] * 100 for _ in range(100)]\n        for i in range(100):\n            f[0][i] = 1\n            f[i][0] = 1\n        for i in range(1, m * 10):\n            for j in range(1, n * 10):\n                for k in range(1, max(i, j)):\n                    f[i][j] += f[i - k][j] + f[i][j - k]\n        return f[m - 1][n - 1]",
  "is_python": true
}