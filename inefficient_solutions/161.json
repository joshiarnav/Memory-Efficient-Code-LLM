{
  "problem_idx": 161,
  "task_name": "One Edit Distance",
  "markdown_description": "\nGiven two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.\n\n\nA string `s` is said to be one distance apart from a string `t` if you can:\n\n\n* Insert **exactly one** character into `s` to get `t`.\n* Delete **exactly one** character from `s` to get `t`.\n* Replace **exactly one** character of `s` with **a different character** to get `t`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"ab\", t = \"acb\"\n**Output:** true\n**Explanation:** We can insert 'c' into s\u00a0to get\u00a0t.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"\", t = \"\"\n**Output:** false\n**Explanation:** We cannot get t from s by only one step.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= s.length, t.length <= 104`\n* `s` and `t` consist of lowercase letters, uppercase letters, and digits.\n\n\n",
  "canonical_solution": "class Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        if len(s) < len(t):\n            return self.isOneEditDistance(t, s)\n        m, n = len(s), len(t)\n        if m - n > 1:\n            return False\n        for i, c in enumerate(t):\n            if c != s[i]:\n                return s[i + 1 :] == t[i + 1 :] if m == n else s[i + 1 :] == t[i:]\n        return m == n + 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        if len(s) < len(t):\n            return self.isOneEditDistance(t, s)\n        m, n = len(s), len(t)\n        if m - n > 1:\n            return False\n        for i, c in enumerate(t):\n            if c != s[i]:\n                return s[i + 1:] == t[i + 1:] if m == n else s[i + 1:] == t[i:]\n        return m == n + 1\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random strings s and t\n    s_length = random.randint(0, 10)\n    t_length = random.randint(0, 10)\n    s = ''.join(random.choices(string.ascii_letters + string.digits, k=s_length))\n    t = ''.join(random.choices(string.ascii_letters + string.digits, k=t_length))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.isOneEditDistance(s, t)\n\n    return s, t, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, t, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.isOneEditDistance(s, t) == expected_result\n        print(f\"assert solution.isOneEditDistance('{s}', '{t}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.isOneEditDistance('{s}', '{t}') == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.isOneEditDistance('inAZ', 'vUZ') == False\nassert solution.isOneEditDistance('Cqr', 'W30biQ') == False\nassert solution.isOneEditDistance('NM1', 'PhpJf2dyZ') == False\nassert solution.isOneEditDistance('MhA6k5fm', 'KDdlze') == False\nassert solution.isOneEditDistance('NoU', 'j') == False\nassert solution.isOneEditDistance('O82qk3z1', 'spGKXKN3Hp') == False\nassert solution.isOneEditDistance('wD', 'iQ') == False\nassert solution.isOneEditDistance('PEXSxS9', 'PB4XIA') == False\nassert solution.isOneEditDistance('MUKEEpwDD', 'SyslvJeoNh') == False\nassert solution.isOneEditDistance('4Jg', 'rftju') == False\nassert solution.isOneEditDistance('idM', 'TEC3M') == False\nassert solution.isOneEditDistance('', 'sDtZt6Nw') == False\nassert solution.isOneEditDistance('', 'HDL') == False\nassert solution.isOneEditDistance('IdUWYnAD9', 'X5y5') == False\nassert solution.isOneEditDistance('vy5YJYn', 'fk') == False\nassert solution.isOneEditDistance('NCMV8v', 'Tquzm3OAp') == False\nassert solution.isOneEditDistance('jvqsiu5', 'Z') == False\nassert solution.isOneEditDistance('xN8lzlP', 'q3pjSPvlV') == False\nassert solution.isOneEditDistance('HMzYhjP81l', 'hGzWKX2Y') == False\nassert solution.isOneEditDistance('g1i', 'lu7BRxpgT') == False\nassert solution.isOneEditDistance('w', 'Hs4bWq91') == False\nassert solution.isOneEditDistance('', '') == False\nassert solution.isOneEditDistance('w', 'vh') == False\nassert solution.isOneEditDistance('bIouVPj4DY', '') == False\nassert solution.isOneEditDistance('bX8qMD0LEt', '41YbI') == False\nassert solution.isOneEditDistance('pBounT4Cov', 'VQhZb') == False\nassert solution.isOneEditDistance('r', 'CQb') == False\nassert solution.isOneEditDistance('WF4KpAikMQ', 'm5') == False\nassert solution.isOneEditDistance('KoZhuMzRo', 'ZSRDEfUE') == False\nassert solution.isOneEditDistance('quF', 'MZ') == False\nassert solution.isOneEditDistance('WqWM', 'THgVDWzf') == False\nassert solution.isOneEditDistance('G8CSrhZN', '5PU1NSY') == False\nassert solution.isOneEditDistance('v', 'WJ8Hc8tzo') == False\nassert solution.isOneEditDistance('Mq3NqFy32', '') == False\nassert solution.isOneEditDistance('iVwP9fqY1', 'mXrXpiwe') == False\nassert solution.isOneEditDistance('RXLVD', 'JwnR8Aje') == False\nassert solution.isOneEditDistance('PB', '6V8UM4') == False\nassert solution.isOneEditDistance('eNo3I66q', 'nMPwzM4') == False\nassert solution.isOneEditDistance('N6wPU4o', 'h0LGmRdb') == False\nassert solution.isOneEditDistance('pkV0t', 'Swn8SQbxxj') == False\nassert solution.isOneEditDistance('k3B6YYYVal', 'w') == False\nassert solution.isOneEditDistance('qkaY', 'Wek3l4v1d') == False\nassert solution.isOneEditDistance('', 'bk69wp') == False\nassert solution.isOneEditDistance('', 'CcIqlLu') == False\nassert solution.isOneEditDistance('Z3W', '4lJ4LT1') == False\nassert solution.isOneEditDistance('rvkqVFJeCU', '0ul') == False\nassert solution.isOneEditDistance('IuXj', '') == False\nassert solution.isOneEditDistance('ZTSsa38d', 'LT5yeSX') == False\nassert solution.isOneEditDistance('TDHVa0fsr', '') == False\nassert solution.isOneEditDistance('klG', 'T3Qz') == False\nassert solution.isOneEditDistance('OOPN', '') == False\nassert solution.isOneEditDistance('HQ16JZP', 'P04eMS') == False\nassert solution.isOneEditDistance('myHFNxb0j', 'ITa0DJNvXA') == False\nassert solution.isOneEditDistance('ZQC6', 'DRt1w4xRI') == False\nassert solution.isOneEditDistance('w', 'rj') == False\nassert solution.isOneEditDistance('Ylm8jVMKyv', 'b25XIFfe9') == False\nassert solution.isOneEditDistance('f', 'bmi17TA') == False\nassert solution.isOneEditDistance('zkiKAG10', 'Zl5rW3d') == False\nassert solution.isOneEditDistance('ks', '5f') == False\nassert solution.isOneEditDistance('J', 'JMDZL7JH') == False\nassert solution.isOneEditDistance('kMl8Svm', 'dhWc') == False\nassert solution.isOneEditDistance('PY2taH5', '') == False\nassert solution.isOneEditDistance('WADmk9Mc2', 'xjitQ') == False\nassert solution.isOneEditDistance('rutoFJ71o', 'ZqFy3Al') == False\nassert solution.isOneEditDistance('1ddlte2', 'Uu') == False\nassert solution.isOneEditDistance('3RV', 'RngM') == False\nassert solution.isOneEditDistance('M1cNBSVQ', 'KPSbRZFJk') == False\nassert solution.isOneEditDistance('3mYc7BnoT', '6WD') == False\nassert solution.isOneEditDistance('7GG', '') == False\nassert solution.isOneEditDistance('oQfCz', 'N94Xfzbljh') == False\nassert solution.isOneEditDistance('XZjQ2', 'dW4HGal') == False\nassert solution.isOneEditDistance('l', 'tWdLSSb05') == False\nassert solution.isOneEditDistance('5uXM0f', '8P2w') == False\nassert solution.isOneEditDistance('', 'gw3sWprEKO') == False\nassert solution.isOneEditDistance('KQz0Qr0Ii', 'tLWqpet') == False\nassert solution.isOneEditDistance('Nl', 'P9E5') == False\nassert solution.isOneEditDistance('ENFxy', '09CL9c1IQi') == False\nassert solution.isOneEditDistance('bMarebhvo', '5B') == False\nassert solution.isOneEditDistance('hM', 'uqmSiPs') == False\nassert solution.isOneEditDistance('qafStdSH6C', 'Mkx0fxyjFY') == False\nassert solution.isOneEditDistance('pYO', 'bP') == False\nassert solution.isOneEditDistance('pWCv9d8Z', 'LIBSc') == False\nassert solution.isOneEditDistance('yysPsPRmKg', 'fGNHjAq') == False\nassert solution.isOneEditDistance('lS5BegEcM', 'eP2Gk8cB') == False\nassert solution.isOneEditDistance('zLB49s', 'jatX9') == False\nassert solution.isOneEditDistance('G', '0oUft0c') == False\nassert solution.isOneEditDistance('G', 'caSSEK7mq') == False\nassert solution.isOneEditDistance('', '0j4v1') == False\nassert solution.isOneEditDistance('DBH', '9qnEYb0j') == False\nassert solution.isOneEditDistance('VPwP9P', 'ajaQl') == False\nassert solution.isOneEditDistance('0t1QRW', 'K') == False\nassert solution.isOneEditDistance('zz9FNwDS9r', '1f') == False\nassert solution.isOneEditDistance('pxyeLCT', 'EMYTDZhkR') == False\nassert solution.isOneEditDistance('R0M', '9Ds') == False\nassert solution.isOneEditDistance('BSHji', '') == False\nassert solution.isOneEditDistance('6', 'tfOuYa4') == False\nassert solution.isOneEditDistance('Jn', 'bSwsqrex7') == False\nassert solution.isOneEditDistance('', '2') == True\nassert solution.isOneEditDistance('whJAFZx3', 'QK3vS') == False\nassert solution.isOneEditDistance('v6toOv', '') == False",
  "inefficient_solution": "class Solution:\n    def isOneEditDistance(self, s: str, t: str) -> bool:\n        if len(s) < len(t):\n            s, t = t, s\n        s_copy = list(s)\n        t_copy = list(t)\n        for _ in range(len(s)):\n            new_t = list(t_copy)\n            for i in range(len(s_copy)):\n                if s_copy[i] != t_copy[0]:\n                    new_t[0] = s_copy[i]\n                    new_t[1:] = t_copy[1:]\n                    if i != 0:\n                        new_t[1:] = s_copy[:i] + t_copy[i:]\n                    break\n            if ''.join(new_t) == s:\n                return True\n            s_copy = list(s)\n            t_copy = new_t\n        return False",
  "is_python": true
}