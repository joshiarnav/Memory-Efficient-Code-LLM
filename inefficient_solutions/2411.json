{
  "problem_idx": 2411,
  "task_name": "Smallest Subarrays With Maximum Bitwise OR",
  "markdown_description": "\nYou are given a **0-indexed** array `nums` of length `n`, consisting of non-negative integers. For each index `i` from `0` to `n - 1`, you must determine the size of the **minimum sized** non-empty subarray of `nums` starting at `i` (**inclusive**) that has the **maximum** possible **bitwise OR**.\n\n\n* In other words, let `Bij` be the bitwise OR of the subarray `nums[i...j]`. You need to find the smallest subarray starting at `i`, such that bitwise OR of this subarray is equal to `max(Bik)` where `i <= k <= n - 1`.\n\n\nThe bitwise OR of an array is the bitwise OR of all the numbers in it.\n\n\nReturn *an integer array* `answer` *of size* `n` *where* `answer[i]` *is the length of the **minimum** sized subarray starting at* `i` *with **maximum** bitwise OR.*\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,0,2,1,3]\n**Output:** [3,3,2,2,1]\n**Explanation:**\nThe maximum possible bitwise OR starting at any index is 3. \n- Starting at index 0, the shortest subarray that yields it is [1,0,2].\n- Starting at index 1, the shortest subarray that yields the maximum bitwise OR is [0,2,1].\n- Starting at index 2, the shortest subarray that yields the maximum bitwise OR is [2,1].\n- Starting at index 3, the shortest subarray that yields the maximum bitwise OR is [1,3].\n- Starting at index 4, the shortest subarray that yields the maximum bitwise OR is [3].\nTherefore, we return [3,3,2,2,1]. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2]\n**Output:** [2,1]\n**Explanation:**Starting at index 0, the shortest subarray that yields the maximum bitwise OR is of length 2.\nStarting at index 1, the shortest subarray that yields the maximum bitwise OR is of length 1.\nTherefore, we return [2,1].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 105`\n* `0 <= nums[i] <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def smallestSubarrays(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [1] * n\n        f = [-1] * 32\n        for i in range(n - 1, -1, -1):\n            t = 1\n            for j in range(32):\n                if (nums[i] >> j) & 1:\n                    f[j] = i\n                elif f[j] != -1:\n                    t = max(t, f[j] - i + 1)\n            ans[i] = t\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestSubarrays(self, nums):\n        n = len(nums)\n        ans = [1] * n\n        f = [-1] * 32\n        for i in range(n - 1, -1, -1):\n            t = 1\n            for j in range(32):\n                if (nums[i] >> j) & 1:\n                    f[j] = i\n                elif f[j] != -1:\n                    t = max(t, f[j] - i + 1)\n            ans[i] = t\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(10**9 + 1), k=random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestSubarrays(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestSubarrays(nums) == expected_result\n        print(f\"assert solution.smallestSubarrays({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.smallestSubarrays({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.smallestSubarrays([668403523, 374066006, 572382350, 906961814, 18259434, 384638345, 215547347, 621002658, 666000468]) == [7, 6, 5, 4, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([597288265, 78318448, 802634658, 759411987, 754192967, 830403871, 822139813, 912464343, 230725608]) == [6, 5, 4, 5, 4, 4, 3, 2, 1]\nassert solution.smallestSubarrays([287879539, 116673124, 579737756, 107770283, 870904177, 186572071, 325489947, 841004454, 52421456]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([510843758, 279517817, 199143040, 330409083, 993130435, 356886411, 786925889, 371028814]) == [5, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([846702165, 550702082, 799871095]) == [3, 2, 1]\nassert solution.smallestSubarrays([563899614, 817143497, 194867298, 956728975, 405566099, 401785152]) == [6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([677946635, 412568232, 339793550]) == [3, 2, 1]\nassert solution.smallestSubarrays([648770912, 106737159]) == [2, 1]\nassert solution.smallestSubarrays([819623521, 340463424, 867152995, 581033000, 79959191]) == [5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([670603044, 220072601, 568898139, 296373001, 947835110, 285570483, 468061769, 704009964, 15859206, 519073110]) == [6, 6, 8, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([637541715, 227147462, 119607732, 786685818, 298244523]) == [5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([284857390, 351313984, 684735108, 59751653]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([300690598, 516079904, 792693867, 402652506, 393784174, 828346963, 534973597]) == [5, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([913549536, 724110860, 532411655, 793565367]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([972939698, 827417901, 362517813, 694396957, 376005799, 855018819, 30595892, 838319853, 784485943]) == [7, 6, 5, 4, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([853229496, 154884120]) == [2, 1]\nassert solution.smallestSubarrays([200202596, 789559569, 944343467, 206072076, 352970749, 339399754]) == [6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([804076422, 145760693, 40405052, 891215826, 163659833, 280201627, 123153220]) == [4, 4, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([3072068, 825203669, 20124720, 185247881]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([865445011, 703051193]) == [2, 1]\nassert solution.smallestSubarrays([619592106, 754579927, 34988432, 548555906, 765250964, 499612841, 198069669, 147825398, 696377367, 42472409]) == [8, 7, 6, 5, 4, 4, 4, 3, 2, 1]\nassert solution.smallestSubarrays([345049347, 477592542]) == [2, 1]\nassert solution.smallestSubarrays([473494401, 729716476, 57346414, 435101965, 996092643, 857326513, 122543038]) == [4, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([766093104, 863981726, 570244078, 445868033, 899845576]) == [4, 4, 3, 2, 1]\nassert solution.smallestSubarrays([756445793, 820972248, 726352501, 800218537]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([680731831, 689316588, 39686113, 712321058, 988463773, 740797368, 158455495, 114293160]) == [7, 6, 5, 4, 3, 3, 2, 1]\nassert solution.smallestSubarrays([460809337, 848871185, 840623950, 845956431]) == [3, 3, 2, 1]\nassert solution.smallestSubarrays([217600007, 378060021, 469105764, 779282931, 42694276, 663519558, 237733178, 189416597, 158834168, 667119721]) == [7, 6, 5, 4, 5, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([942061525, 297882253, 320584580, 327828610, 255614069]) == [5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([946567055, 817858986, 37065052, 124427940, 965594809, 36604070]) == [4, 4, 4, 3, 2, 1]\nassert solution.smallestSubarrays([415314165, 272157075, 291098722, 942031085, 907973970, 4005222, 69249319, 781873534]) == [5, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([290562392, 651320587]) == [2, 1]\nassert solution.smallestSubarrays([402961572, 563466875, 42283178]) == [3, 2, 1]\nassert solution.smallestSubarrays([375893357, 968090907, 932298126, 827701860, 364256448, 971138476, 406511344, 243664952, 74714994, 820075632]) == [7, 6, 5, 6, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([897453813, 56460222, 349777540, 323166232, 78461235, 13050652, 299022482, 607854913, 565644530, 574276590]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([172944653, 999253673, 748427132]) == [3, 2, 1]\nassert solution.smallestSubarrays([593415177, 532038520, 646710751, 544388007, 137573094, 755705531, 647614760]) == [5, 4, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([819728652, 880150844]) == [2, 1]\nassert solution.smallestSubarrays([855280965, 956259220]) == [2, 1]\nassert solution.smallestSubarrays([284123096, 340066151, 604083903, 549154979, 961132709, 397994945]) == [6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([502914915, 816429571, 26086916, 724859266, 563206263, 854970264, 402735308, 234123447, 564393809, 976265449]) == [6, 7, 6, 6, 5, 4, 4, 3, 2, 1]\nassert solution.smallestSubarrays([900463899, 516306650, 451189938, 291229632, 853445703, 425376598, 708030599, 2548078, 935963565]) == [5, 4, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([419050511, 404678020, 947884263, 187519828]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([553118640, 987407904, 300231629, 206036337, 830742118, 964084926, 827629142, 94170316, 856352921]) == [5, 4, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([254113066, 608371412, 515015909, 560226992, 315377537, 158915582]) == [6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([448947018, 553132749, 727527152, 158292336, 822647875, 579304352, 979498477, 222039635]) == [8, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([767150158, 589158562, 405400535, 14841647]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([994265355, 648483419, 751576800, 744739270]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([355922757, 389585061, 553062303, 840571331]) == [3, 3, 2, 1]\nassert solution.smallestSubarrays([208354461, 104386496]) == [2, 1]\nassert solution.smallestSubarrays([330325605, 513484509, 964252205, 935819620, 910359535, 776136982, 311989318, 241051648]) == [5, 4, 5, 4, 4, 3, 2, 1]\nassert solution.smallestSubarrays([149122615, 60311120, 475267883, 595315453, 352699084, 383532401, 493158657, 340165893, 393091139]) == [6, 5, 4, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([790805856, 939562095, 379877278, 510579807, 208447404, 319619050, 966944771, 72533280, 206555789, 710283424]) == [9, 8, 7, 6, 5, 4, 4, 3, 2, 1]\nassert solution.smallestSubarrays([763213180, 697225389, 445612872]) == [3, 2, 1]\nassert solution.smallestSubarrays([630188900, 589383560, 429699824, 465403164, 213422358]) == [5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([245225688, 340768292, 382711123, 760253950, 775720836]) == [5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([981460229, 453178820, 17822556, 639915071, 724089162, 779793355, 892420803, 868271582]) == [8, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([529734540, 891364624, 500797511, 323393562, 155736238, 607061026, 800230036, 245193116]) == [5, 6, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([592037104, 163081711, 557006364, 872499807, 674442045, 60837379, 222219319]) == [7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([262507518, 961321607, 366762096, 862017592, 320172259, 107196060]) == [6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([386970133, 908588645, 192971083, 24316802, 92527656, 159832418, 904349209]) == [4, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([432710751, 834008569, 339286674, 33016558, 755083009, 324858809, 725799962, 666925356]) == [6, 5, 4, 3, 4, 3, 2, 1]\nassert solution.smallestSubarrays([156637804, 160434072, 1032992, 247116889, 44170046, 360615374, 467506279, 214429513, 753763909, 384690494]) == [9, 8, 7, 6, 5, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([823520607, 327851250]) == [2, 1]\nassert solution.smallestSubarrays([258122523, 947559881, 594127553, 530388848, 444595937, 985704451, 543785022, 140429510, 123214629, 450090815]) == [7, 6, 5, 4, 5, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([952621009, 505874720, 149844679, 650526377, 297307684, 831100677, 543803610]) == [5, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([562733535, 346730808, 96432110, 297000954, 98351991]) == [5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([548223795, 799504340, 913792246, 194504247, 312826691, 865148168, 544097355, 363105794, 198060291, 182352873]) == [6, 6, 5, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([461992318, 655803890, 616153159, 837085531, 258242683, 298310513, 916035355, 508154133, 424516973]) == [6, 5, 5, 5, 4, 3, 3, 2, 1]\nassert solution.smallestSubarrays([349524873, 357576296, 443479039, 790320240]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([315113474, 586476261, 632245880, 880151161]) == [3, 3, 2, 1]\nassert solution.smallestSubarrays([130278188, 673536790, 684980457]) == [3, 2, 1]\nassert solution.smallestSubarrays([953547118, 261576284, 704026632, 823744257, 357962745, 372060070, 120172685, 677933394]) == [5, 5, 4, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([192369549, 552554391, 195304383, 433909916, 539969039, 974486884, 987327027, 649100460]) == [8, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([291589789, 491313928, 334365354, 546333119]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([158529613, 94302082, 876819910]) == [3, 2, 1]\nassert solution.smallestSubarrays([519022767, 868711260, 88952137, 845043166, 219252354, 192485422, 403519218, 329518294]) == [4, 5, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([915938712, 250901128, 440592723]) == [3, 2, 1]\nassert solution.smallestSubarrays([658415891, 514559863, 111233311, 835825265, 539963298, 842673332, 56177636, 178854391]) == [7, 6, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([606928708, 625831462, 355130937, 134723930, 414679791, 667681010, 603769690, 638895843, 542156075, 815389901]) == [6, 5, 4, 5, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([67102896, 12558564]) == [2, 1]\nassert solution.smallestSubarrays([351160749, 63723000, 654223172, 370923418]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([248787871, 270966965, 886244035, 430018829, 768271204, 242995952, 237886728, 532074310]) == [7, 6, 5, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([518655807, 525788763]) == [2, 1]\nassert solution.smallestSubarrays([425745298, 268065744, 157836369, 457339516]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([754526546, 620757111]) == [2, 1]\nassert solution.smallestSubarrays([202552306, 939884012, 43104715, 680130126, 523928496, 322976895, 394870102]) == [6, 5, 4, 3, 3, 2, 1]\nassert solution.smallestSubarrays([301085934, 599657446]) == [2, 1]\nassert solution.smallestSubarrays([139406534, 311837078, 790827635, 736269159]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([847309124, 336571741]) == [2, 1]\nassert solution.smallestSubarrays([474046909, 103794515, 452560933, 941962019, 45814993, 616279635, 669376097, 927248281]) == [7, 7, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([349739719, 495937469, 429290401, 939379965, 58460901, 412019696, 163325613, 646220725]) == [4, 3, 2, 3, 4, 3, 2, 1]\nassert solution.smallestSubarrays([548015329, 72776375, 762975141, 442587784, 654047274, 738399566, 425873742, 804683601, 425506957]) == [5, 5, 6, 5, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([613584722, 539860030, 434281967, 595053387, 780604131, 692250570, 88376026, 69940639, 355140928, 503311594]) == [6, 5, 6, 6, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([331077859, 952661670, 306847779, 709051821]) == [4, 3, 2, 1]\nassert solution.smallestSubarrays([126376704, 935391907, 333814578, 111831197, 732233897, 565555050, 920233806, 674071062, 24707039]) == [6, 5, 4, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([267523172, 475978165, 183849857, 618686923, 976617680, 228665056, 402355669, 882236945]) == [4, 5, 6, 5, 4, 3, 2, 1]\nassert solution.smallestSubarrays([842746181, 160322745, 396127354]) == [3, 2, 1]\nassert solution.smallestSubarrays([917886234, 405191224, 76935505, 905448615, 397661878, 223957095]) == [4, 4, 4, 3, 2, 1]\nassert solution.smallestSubarrays([199358325, 78022128, 331886962, 955299935, 607065241, 77677693, 960829962, 651767754]) == [4, 6, 5, 5, 4, 3, 2, 1]",
  "inefficient_solution": "class Solution:\n    def smallestSubarrays(self, nums: List[int]) -> List[int]:\n        n = len(nums)\n        ans = [1] * (n + 1)\n        f = [[-1] * 32 for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            t = 1\n            for j in range(32):\n                if (nums[i] >> j) & 1:\n                    f[i][j] = i\n                elif f[i][j] != -1:\n                    t = max(t, f[i][j] - i + 1)\n            ans[i] = t\n        return ans[:-1]",
  "is_python": true
}