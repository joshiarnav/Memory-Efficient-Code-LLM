{
  "problem_idx": 1231,
  "task_name": "Divide Chocolate",
  "markdown_description": "\nYou have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array\u00a0`sweetness`.\n\n\nYou want to share the chocolate with your `k`\u00a0friends so you start cutting the chocolate bar into `k + 1`\u00a0pieces using\u00a0`k`\u00a0cuts, each piece consists of some **consecutive** chunks.\n\n\nBeing generous, you will eat the piece with the **minimum total sweetness** and give the other pieces to your friends.\n\n\nFind the **maximum total sweetness** of the\u00a0piece you can get by cutting the chocolate bar optimally.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** sweetness = [1,2,3,4,5,6,7,8,9], k = 5\n**Output:** 6\n**Explanation:** You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** sweetness = [5,6,7,8,9,1,2,3,4], k = 8\n**Output:** 1\n**Explanation:** There is only one way to cut the bar into 9 pieces.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** sweetness = [1,2,2,1,2,2,1,2,2], k = 2\n**Output:** 5\n**Explanation:** You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= k < sweetness.length <= 104`\n* `1 <= sweetness[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximizeSweetness(self, sweetness: List[int], k: int) -> int:\n        def check(x: int) -> bool:\n            s = cnt = 0\n            for v in sweetness:\n                s += v\n                if s >= x:\n                    s = 0\n                    cnt += 1\n            return cnt > k\n\n        l, r = 0, sum(sweetness)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximizeSweetness(self, sweetness, k):\n        def check(x):\n            s = cnt = 0\n            for v in sweetness:\n                s += v\n                if s >= x:\n                    s = 0\n                    cnt += 1\n            return cnt > k\n\n        l, r = 0, sum(sweetness)\n        while l < r:\n            mid = (l + r + 1) // 2\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random sweetness list\n    sweetness = random.sample(range(1, 101), random.randint(1, 10))\n\n    # Generate a random k value\n    k = random.randint(0, len(sweetness) - 1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximizeSweetness(sweetness, k)\n\n    return sweetness, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        sweetness, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximizeSweetness(sweetness, k) == expected_result\n        print(f\"assert solution.maximizeSweetness({sweetness}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximizeSweetness({sweetness}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximizeSweetness([41, 97, 80], 0) == 218\nassert solution.maximizeSweetness([18, 19, 42, 64], 0) == 143\nassert solution.maximizeSweetness([1, 48, 30, 72, 7], 1) == 79\nassert solution.maximizeSweetness([42, 18, 31, 17, 97, 11, 80, 55], 1) == 146\nassert solution.maximizeSweetness([84, 63], 1) == 63\nassert solution.maximizeSweetness([31, 4, 92, 1, 94, 19, 29, 14, 88, 86], 3) == 86\nassert solution.maximizeSweetness([14, 38, 98, 40, 91, 61, 82, 41, 32, 46], 6) == 46\nassert solution.maximizeSweetness([44, 11, 26, 29, 21], 1) == 55\nassert solution.maximizeSweetness([46, 56, 2, 31], 3) == 2\nassert solution.maximizeSweetness([14, 32, 49, 95, 52, 98, 78, 77, 51], 8) == 14\nassert solution.maximizeSweetness([57, 73, 41, 92, 51, 89], 2) == 130\nassert solution.maximizeSweetness([18, 27, 72, 87, 88], 1) == 117\nassert solution.maximizeSweetness([47, 79, 39, 41, 73], 4) == 39\nassert solution.maximizeSweetness([48, 65, 57, 83, 68], 1) == 151\nassert solution.maximizeSweetness([75, 24, 23, 26, 58, 92], 0) == 298\nassert solution.maximizeSweetness([64], 0) == 64\nassert solution.maximizeSweetness([9, 89, 10, 5, 23, 52, 1, 33], 7) == 1\nassert solution.maximizeSweetness([6, 11, 44, 28, 77, 78, 23], 6) == 6\nassert solution.maximizeSweetness([21, 47], 1) == 21\nassert solution.maximizeSweetness([56, 58, 21, 26, 71, 76, 68, 14, 64], 2) == 146\nassert solution.maximizeSweetness([68, 29, 78], 0) == 175\nassert solution.maximizeSweetness([41, 72, 21, 35, 46, 45, 51], 4) == 45\nassert solution.maximizeSweetness([35, 64, 86, 48, 96, 10, 72, 66, 81, 28], 1) == 257\nassert solution.maximizeSweetness([54, 15, 58, 42], 1) == 69\nassert solution.maximizeSweetness([8, 45, 51, 6, 60, 25, 30], 1) == 110\nassert solution.maximizeSweetness([22, 24, 73, 79, 100, 96], 2) == 96\nassert solution.maximizeSweetness([1, 65, 10], 0) == 76\nassert solution.maximizeSweetness([73, 44, 79, 8, 33, 89, 71, 75], 5) == 44\nassert solution.maximizeSweetness([63, 10, 64, 79], 3) == 10\nassert solution.maximizeSweetness([42, 62, 49], 1) == 49\nassert solution.maximizeSweetness([62, 9, 32, 63, 64, 3, 81, 40, 98, 52], 7) == 40\nassert solution.maximizeSweetness([66, 82, 10, 52, 48, 100, 96], 5) == 48\nassert solution.maximizeSweetness([99, 68, 30, 24, 12, 17, 100, 92, 3], 3) == 95\nassert solution.maximizeSweetness([29, 65, 26, 38, 30, 58, 1, 67, 72, 49], 2) == 121\nassert solution.maximizeSweetness([47, 28, 77, 64], 2) == 64\nassert solution.maximizeSweetness([3], 0) == 3\nassert solution.maximizeSweetness([81, 2, 99, 18, 100], 3) == 18\nassert solution.maximizeSweetness([73, 9, 80, 7, 24], 4) == 7\nassert solution.maximizeSweetness([25, 11, 41, 32, 50, 29, 30, 57], 7) == 11\nassert solution.maximizeSweetness([37], 0) == 37\nassert solution.maximizeSweetness([17, 36, 44, 82, 35, 23, 8, 88, 77, 76], 2) == 153\nassert solution.maximizeSweetness([57], 0) == 57\nassert solution.maximizeSweetness([66, 58], 0) == 124\nassert solution.maximizeSweetness([61, 46, 67, 64], 1) == 107\nassert solution.maximizeSweetness([97, 76, 69, 28, 51], 2) == 79\nassert solution.maximizeSweetness([14], 0) == 14\nassert solution.maximizeSweetness([47, 2, 94, 96, 84, 74], 2) == 96\nassert solution.maximizeSweetness([44], 0) == 44\nassert solution.maximizeSweetness([55, 20], 0) == 75\nassert solution.maximizeSweetness([76, 50, 93, 57, 92, 42, 5, 84], 0) == 499\nassert solution.maximizeSweetness([10, 79, 3, 17, 77, 31, 42, 95], 6) == 10\nassert solution.maximizeSweetness([89, 64, 80, 68, 57, 12, 62, 86, 56], 4) == 74\nassert solution.maximizeSweetness([17, 78, 38], 1) == 38\nassert solution.maximizeSweetness([52], 0) == 52\nassert solution.maximizeSweetness([73, 4, 29, 61, 74, 26, 42, 83, 16], 1) == 167\nassert solution.maximizeSweetness([11, 29, 60, 9, 43, 61, 49, 16, 31], 8) == 9\nassert solution.maximizeSweetness([52, 24, 33, 16, 11, 53], 1) == 80\nassert solution.maximizeSweetness([22, 56, 73, 43, 100, 84, 4, 52, 40, 91], 1) == 271\nassert solution.maximizeSweetness([20, 62, 19, 21, 61, 10], 1) == 92\nassert solution.maximizeSweetness([87, 13], 1) == 13\nassert solution.maximizeSweetness([49, 40, 48, 37], 3) == 37\nassert solution.maximizeSweetness([6, 70, 41, 51, 10, 47, 31, 94], 6) == 10\nassert solution.maximizeSweetness([53, 92, 27, 100, 94, 32, 63], 3) == 94\nassert solution.maximizeSweetness([84, 88], 0) == 172\nassert solution.maximizeSweetness([81, 41, 51], 0) == 173\nassert solution.maximizeSweetness([89, 37, 49, 98, 79, 32, 66, 10, 72], 1) == 259\nassert solution.maximizeSweetness([84, 24, 96, 36, 8], 2) == 44\nassert solution.maximizeSweetness([73], 0) == 73\nassert solution.maximizeSweetness([86, 24, 63, 57], 3) == 24\nassert solution.maximizeSweetness([9, 1, 73, 43, 31, 78, 80, 77, 70, 4], 0) == 466\nassert solution.maximizeSweetness([6], 0) == 6\nassert solution.maximizeSweetness([72, 23, 79], 1) == 79\nassert solution.maximizeSweetness([41, 95, 100, 98, 37, 39, 24, 40, 78], 4) == 98\nassert solution.maximizeSweetness([30, 61], 1) == 30\nassert solution.maximizeSweetness([97, 8, 37, 46, 74], 2) == 74\nassert solution.maximizeSweetness([37, 9], 0) == 46\nassert solution.maximizeSweetness([56, 24, 31, 27], 2) == 27\nassert solution.maximizeSweetness([58, 6], 1) == 6\nassert solution.maximizeSweetness([18, 65, 77, 38, 6, 42], 0) == 246\nassert solution.maximizeSweetness([91, 40, 81, 56, 50, 78, 62, 82, 39], 3) == 128\nassert solution.maximizeSweetness([80, 66, 83, 16, 34, 99, 95, 27, 12, 31], 3) == 99\nassert solution.maximizeSweetness([95, 39, 56, 13, 36, 84, 83, 72, 61], 5) == 61\nassert solution.maximizeSweetness([60, 44, 38, 14, 74, 47, 17, 11], 5) == 28\nassert solution.maximizeSweetness([64, 26, 87, 37], 1) == 90\nassert solution.maximizeSweetness([51, 7, 1, 55, 24], 0) == 138\nassert solution.maximizeSweetness([96, 12, 70, 3, 2], 3) == 5\nassert solution.maximizeSweetness([65, 95, 6], 2) == 6\nassert solution.maximizeSweetness([56, 75, 41, 94, 68, 59, 29, 14, 66], 2) == 162\nassert solution.maximizeSweetness([91, 96, 17, 6, 18, 27, 56, 47], 3) == 68\nassert solution.maximizeSweetness([82, 84, 10, 38, 5, 29, 88, 98], 6) == 10\nassert solution.maximizeSweetness([10, 59, 20, 46], 1) == 66\nassert solution.maximizeSweetness([44, 63, 54, 48, 71, 73, 20, 96], 3) == 102\nassert solution.maximizeSweetness([53, 81, 89], 1) == 89\nassert solution.maximizeSweetness([33, 29, 11], 1) == 33\nassert solution.maximizeSweetness([23], 0) == 23\nassert solution.maximizeSweetness([1], 0) == 1\nassert solution.maximizeSweetness([45, 67, 91], 2) == 45\nassert solution.maximizeSweetness([81, 59, 73, 22, 63], 3) == 59\nassert solution.maximizeSweetness([35, 7, 18, 64, 20, 6, 40, 62, 98], 3) == 62\nassert solution.maximizeSweetness([82, 50, 16, 52, 96, 95, 12, 1], 6) == 13",
  "inefficient_solution": "class Solution:\n    def maximizeSweetness(self, sweetness: List[int], k: int) -> int:\n        def check(x: int) -> bool:\n            s = cnt = 0\n            groups = []\n            for v in sweetness:\n                s += v\n                if s >= x:\n                    if len(groups) < k:\n                        groups.append(s)\n                    else:\n                        groups[0] = s\n                    s = 0\n            if len(groups) > k:\n                groups.sort()\n                for i in range(k):\n                    if groups[i] > 0:\n                        groups[i] = 0\n            return len([g for g in groups if g > 0]) > 0\n\n        l, r = 0, sum(sweetness)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if check(mid):\n                l = mid\n            else:\n                r = mid - 1\n        return l",
  "is_python": true
}