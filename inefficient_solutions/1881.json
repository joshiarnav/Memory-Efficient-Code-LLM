{
  "problem_idx": 1881,
  "task_name": "Maximum Value after Insertion",
  "markdown_description": "\nYou are given a very large integer `n`, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit `x`. The digits in `n` and the digit `x` are in the **inclusive** range `[1, 9]`, and `n` may represent a **negative** number.\n\n\nYou want to **maximize** `n`**'s numerical value** by inserting `x` anywhere in the decimal representation of `n`\u200b\u200b\u200b\u200b\u200b\u200b. You **cannot** insert `x` to the left of the negative sign.\n\n\n* For example, if `n = 73` and `x = 6`, it would be best to insert it between `7` and `3`, making `n = 763`.\n* If `n = -55` and `x = 2`, it would be best to insert it before the first `5`, making `n = -255`.\n\n\nReturn *a string representing the **maximum** value of* `n`*\u200b\u200b\u200b\u200b\u200b\u200b after the insertion*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = \"99\", x = 9\n**Output:** \"999\"\n**Explanation:** The result is the same regardless of where you insert 9.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = \"-13\", x = 2\n**Output:** \"-123\"\n**Explanation:** You can make n one of {-213, -123, -132}, and the largest of those three is -123.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n.length <= 105`\n* `1 <= x <= 9`\n* The digits in `n`\u200b\u200b\u200b are in the range `[1, 9]`.\n* `n` is a valid representation of an integer.\n* In the case of a negative `n`,\u200b\u200b\u200b\u200b\u200b\u200b it will begin with `'-'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def maxValue(self, n: str, x: int) -> str:\n        if n[0] != '-':\n            for i, c in enumerate(n):\n                if int(c) < x:\n                    return n[:i] + str(x) + n[i:]\n            return n + str(x)\n        else:\n            for i, c in enumerate(n[1:]):\n                if int(c) > x:\n                    return n[: i + 1] + str(x) + n[i + 1 :]\n            return n + str(x)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxValue(self, n: str, x: int) -> str:\n        if n[0] != '-':\n            for i, c in enumerate(n):\n                if int(c) < x:\n                    return n[:i] + str(x) + n[i:]\n            return n + str(x)\n        else:\n            for i, c in enumerate(n[1:]):\n                if int(c) > x:\n                    return n[: i + 1] + str(x) + n[i + 1 :]\n            return n + str(x)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random n string\n    n = \"\".join(random.choices(string.digits[1:], k=random.randint(1, 10)))\n\n    # Generate a random x integer\n    x = random.randint(1, 9)\n\n    return n, x, solution.maxValue(n, x)\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        n, x, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxValue(n, x) == expected_result\n        test_case_generator_results.append(f\"assert solution.maxValue('{n}', {x}) == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    import string\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxValue('1', 5) == '51'\nassert solution.maxValue('844277658', 2) == '8442776582'\nassert solution.maxValue('78', 3) == '783'\nassert solution.maxValue('15423592', 4) == '415423592'\nassert solution.maxValue('72228', 9) == '972228'\nassert solution.maxValue('635834257', 7) == '7635834257'\nassert solution.maxValue('9946892928', 3) == '99468932928'\nassert solution.maxValue('2', 7) == '72'\nassert solution.maxValue('2218229447', 5) == '52218229447'\nassert solution.maxValue('66199', 8) == '866199'\nassert solution.maxValue('92642', 1) == '926421'\nassert solution.maxValue('843', 8) == '8843'\nassert solution.maxValue('2833', 9) == '92833'\nassert solution.maxValue('8', 9) == '98'\nassert solution.maxValue('8787', 7) == '87877'\nassert solution.maxValue('5379', 2) == '53792'\nassert solution.maxValue('44', 1) == '441'\nassert solution.maxValue('1', 6) == '61'\nassert solution.maxValue('87298321', 5) == '875298321'\nassert solution.maxValue('8438', 7) == '87438'\nassert solution.maxValue('962', 5) == '9652'\nassert solution.maxValue('91626', 6) == '961626'\nassert solution.maxValue('4922', 3) == '49322'\nassert solution.maxValue('7267677497', 8) == '87267677497'\nassert solution.maxValue('961122', 4) == '9641122'\nassert solution.maxValue('26621', 9) == '926621'\nassert solution.maxValue('5', 1) == '51'\nassert solution.maxValue('677935946', 6) == '6779635946'\nassert solution.maxValue('49224', 7) == '749224'\nassert solution.maxValue('4776', 5) == '54776'\nassert solution.maxValue('123123', 6) == '6123123'\nassert solution.maxValue('937', 9) == '9937'\nassert solution.maxValue('562', 9) == '9562'\nassert solution.maxValue('2262364545', 9) == '92262364545'\nassert solution.maxValue('71', 3) == '731'\nassert solution.maxValue('58', 9) == '958'\nassert solution.maxValue('271666', 5) == '5271666'\nassert solution.maxValue('15', 3) == '315'\nassert solution.maxValue('683523', 2) == '6835232'\nassert solution.maxValue('9935844', 1) == '99358441'\nassert solution.maxValue('455158', 8) == '8455158'\nassert solution.maxValue('448371513', 2) == '4483721513'\nassert solution.maxValue('9241325262', 5) == '95241325262'\nassert solution.maxValue('95', 6) == '965'\nassert solution.maxValue('286', 4) == '4286'\nassert solution.maxValue('15593', 9) == '915593'\nassert solution.maxValue('4642113665', 3) == '46432113665'\nassert solution.maxValue('8179151', 6) == '86179151'\nassert solution.maxValue('64141', 4) == '644141'\nassert solution.maxValue('1', 6) == '61'\nassert solution.maxValue('642866784', 7) == '7642866784'\nassert solution.maxValue('266478289', 3) == '3266478289'\nassert solution.maxValue('2', 4) == '42'\nassert solution.maxValue('599', 8) == '8599'\nassert solution.maxValue('13418', 8) == '813418'\nassert solution.maxValue('1619485858', 2) == '21619485858'\nassert solution.maxValue('63265443', 7) == '763265443'\nassert solution.maxValue('18127', 9) == '918127'\nassert solution.maxValue('97', 8) == '987'\nassert solution.maxValue('68396', 6) == '686396'\nassert solution.maxValue('9421', 1) == '94211'\nassert solution.maxValue('14485', 2) == '214485'\nassert solution.maxValue('242', 4) == '4242'\nassert solution.maxValue('666841', 8) == '8666841'\nassert solution.maxValue('79382', 6) == '796382'\nassert solution.maxValue('158928757', 6) == '6158928757'\nassert solution.maxValue('397', 9) == '9397'\nassert solution.maxValue('938913', 9) == '9938913'\nassert solution.maxValue('871587847', 8) == '8871587847'\nassert solution.maxValue('343258112', 4) == '4343258112'\nassert solution.maxValue('2', 6) == '62'\nassert solution.maxValue('518127482', 8) == '8518127482'\nassert solution.maxValue('653716', 5) == '6553716'\nassert solution.maxValue('3453', 9) == '93453'\nassert solution.maxValue('6561', 7) == '76561'\nassert solution.maxValue('653674461', 4) == '6543674461'\nassert solution.maxValue('1987847', 5) == '51987847'\nassert solution.maxValue('2778', 8) == '82778'\nassert solution.maxValue('97259667', 9) == '997259667'\nassert solution.maxValue('217', 4) == '4217'\nassert solution.maxValue('6889', 8) == '86889'\nassert solution.maxValue('7699423', 9) == '97699423'\nassert solution.maxValue('14', 6) == '614'\nassert solution.maxValue('52263', 2) == '522632'\nassert solution.maxValue('193547', 4) == '4193547'\nassert solution.maxValue('5256', 7) == '75256'\nassert solution.maxValue('8596615', 8) == '88596615'\nassert solution.maxValue('943644648', 7) == '9743644648'\nassert solution.maxValue('83385', 1) == '833851'\nassert solution.maxValue('754283159', 7) == '7754283159'\nassert solution.maxValue('6165867519', 7) == '76165867519'\nassert solution.maxValue('662949', 2) == '6629492'\nassert solution.maxValue('1814399522', 9) == '91814399522'\nassert solution.maxValue('7511434', 4) == '75411434'\nassert solution.maxValue('748849592', 6) == '7648849592'\nassert solution.maxValue('4863218258', 3) == '48633218258'\nassert solution.maxValue('34165163', 4) == '434165163'\nassert solution.maxValue('894', 6) == '8964'\nassert solution.maxValue('869281177', 6) == '8696281177'\nassert solution.maxValue('8125643285', 2) == '82125643285'",
  "inefficient_solution": "class Solution:\n    def maxValue(self, n: str, x: int) -> str:\n        if n[0] != '-':\n            n_list = list(n)\n            max_index = -1\n            for i, c in enumerate(n):\n                if int(c) < x:\n                    if max_index == -1 or i < max_index:\n                        max_index = i\n            if max_index == -1:\n                n_list.append(str(x))\n            else:\n                n_list.insert(max_index, str(x))\n            return ''.join(n_list)\n        else:\n            n_list = list(n)\n            max_index = -1\n            for i, c in enumerate(n[1:]):\n                if int(c) > x:\n                    if max_index == -1 or i < max_index:\n                        max_index = i\n            if max_index == -1:\n                n_list.append(str(x))\n            else:\n                n_list.insert(1 + max_index, str(x))\n            return '-' + ''.join(n_list)",
  "is_python": true
}