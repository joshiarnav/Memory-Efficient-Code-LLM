{
  "problem_idx": 628,
  "task_name": "Maximum Product of Three Numbers",
  "markdown_description": "\nGiven an integer array `nums`, *find three numbers whose product is maximum and return the maximum product*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** nums = [1,2,3]\n**Output:** 6\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** nums = [1,2,3,4]\n**Output:** 24\n\n```\n**Example 3:**\n\n\n\n```\n**Input:** nums = [-1,-2,-3]\n**Output:** -6\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `3 <= nums.length <=\u00a0104`\n* `-1000 <= nums[i] <= 1000`\n\n\n",
  "canonical_solution": "class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        top3 = nlargest(3, nums)\n        bottom2 = nlargest(2, nums, key=lambda x: -x)\n        return max(top3[0] * top3[1] * top3[2], top3[0] * bottom2[0] * bottom2[1])\n",
  "test_case_generator": "\nimport random\nfrom heapq import nlargest\nfrom typing import List\n\nclass Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        top3 = nlargest(3, nums)\n        bottom2 = nlargest(2, nums, key=lambda x: -x)\n        return max(top3[0] * top3[1] * top3[2], top3[0] * bottom2[0] * bottom2[1])\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(-1000, 1001), random.randint(3, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumProduct(nums)\n\n    return nums, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumProduct(nums) == expected_result\n        print(f\"assert solution.maximumProduct({nums}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.maximumProduct({nums}) == {expected_result}\"\n        )  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maximumProduct([-417, -486, -775, -492, 916, -210, 284]) == 349270800\nassert solution.maximumProduct([-990, -503, 419, -986, -936, -893, 537, 807, 210]) == 787744980\nassert solution.maximumProduct([505, 854, -531, 830, -705, -616]) == 370875120\nassert solution.maximumProduct([-228, 818, 964, -507, 820, -372, -559, -845]) == 646612640\nassert solution.maximumProduct([251, 438, -377, -329, -996, 337, -433, 339, -401, -207]) == 188895384\nassert solution.maximumProduct([-655, 447, -118, -664, -371, -577, 167, -142, 294, 460]) == 200063200\nassert solution.maximumProduct([-902, 800, -803, 545, 53, -709, -728]) == 579444800\nassert solution.maximumProduct([337, 70, -652, 613, 374]) == 77261294\nassert solution.maximumProduct([604, -32, 934, 711]) == 401100696\nassert solution.maximumProduct([-75, -362, 435, -798, -419, -927]) == 321789510\nassert solution.maximumProduct([682, -429, -667, 172, -976, -197, 930, 226, 390, -178]) == 605422560\nassert solution.maximumProduct([-558, 105, -187, 227, 594, -33, 463]) == 62429994\nassert solution.maximumProduct([-797, 726, -609, 73, -311, -433, -434, -355, 744]) == 361117512\nassert solution.maximumProduct([-706, -557, 372, 68, 64, -875, 220, 410, -620]) == 253277500\nassert solution.maximumProduct([-797, 359, -690, 130, -216, 382, 128, 377]) == 210073260\nassert solution.maximumProduct([-861, 202, -552]) == 96004944\nassert solution.maximumProduct([408, -458, -833, 807, 647]) == 307881798\nassert solution.maximumProduct([-262, -975, 515, -202]) == 131556750\nassert solution.maximumProduct([-244, -689, -961, 442, 167]) == 292661018\nassert solution.maximumProduct([-244, -712, 36]) == 6254208\nassert solution.maximumProduct([-47, -259, -278, -120, -616, -14]) == -78960\nassert solution.maximumProduct([127, -973, 461, 402, 368, 728]) == 134914416\nassert solution.maximumProduct([143, 53, 612, -991, 599, 989, 805]) == 487240740\nassert solution.maximumProduct([-376, -3, -752, -419, -189]) == -213192\nassert solution.maximumProduct([-851, -986, 832, 650, 328, 968, 139, -517, 180, -148]) == 812235248\nassert solution.maximumProduct([-559, -202, 785, 863, 762, 675, -42]) == 516220710\nassert solution.maximumProduct([227, -886, 453, 349, -682]) == 273726156\nassert solution.maximumProduct([-608, 763, -308]) == 142882432\nassert solution.maximumProduct([-122, -540, 705, -609, 221, 703, 672]) == 333053280\nassert solution.maximumProduct([468, 113, 515, 686, -589, -716, 62, -698]) == 342840848\nassert solution.maximumProduct([-399, -506, 22, 682, -475, 308]) == 163918700\nassert solution.maximumProduct([422, 780, 381, 12, 770, -51, -611, -201, -316]) == 253453200\nassert solution.maximumProduct([423, 519, 335, 848, -769, 974, -327]) == 428669088\nassert solution.maximumProduct([-972, 418, 116, 545, -226]) == 119721240\nassert solution.maximumProduct([-309, -908, -894, 707]) == 573908664\nassert solution.maximumProduct([-627, 148, -993, -529, 257, 499, 32, 740, -213]) == 460732140\nassert solution.maximumProduct([469, 248, 262]) == 30473744\nassert solution.maximumProduct([734, 296, -396, -597]) == 173526408\nassert solution.maximumProduct([-554, -981, -656, 393]) == 252909648\nassert solution.maximumProduct([148, 832, 471, 595, -802]) == 233163840\nassert solution.maximumProduct([-437, 128, -575, -647, -460, -547]) == 47619200\nassert solution.maximumProduct([-229, 565, 497, 744, -897, -716, 939]) == 603074628\nassert solution.maximumProduct([-249, -104, -70, -273]) == -1812720\nassert solution.maximumProduct([746, -296, 84, 325]) == 20365800\nassert solution.maximumProduct([1, 348, -496, 807, 948]) == 266232528\nassert solution.maximumProduct([93, 800, -301, 30, 266, -390, -799, -631, 136]) == 403335200\nassert solution.maximumProduct([-179, -8, -833, -629, -789, 94, -324]) == 61780278\nassert solution.maximumProduct([536, -587, -185, -326, -315, -686]) == 215837552\nassert solution.maximumProduct([-854, 363, 641, -268, -659]) == 360745826\nassert solution.maximumProduct([-843, -219, 113, -112, 282, 776, 248, 14, 65, 352]) == 143262792\nassert solution.maximumProduct([693, -400, 776, 108, -163, 294, 129, 92]) == 158103792\nassert solution.maximumProduct([-279, 648, 937]) == -169402104\nassert solution.maximumProduct([-765, 466, -130, 529, -604, 386, -469, -934, -745]) == 377975790\nassert solution.maximumProduct([-635, -603, 724, 322, 233, 579, 43, 207, -602]) == 277223220\nassert solution.maximumProduct([-627, -406, 701, 601, 139, 382, -596, 53, 338]) == 261958092\nassert solution.maximumProduct([-809, 99, -900, -587, 344, 209, -375, 56, 620, 633]) == 460887300\nassert solution.maximumProduct([-648, -967, 306, 793]) == 496906488\nassert solution.maximumProduct([317, -735, -76, -653, -377, 946, -549, -931]) == 647333610\nassert solution.maximumProduct([-911, -12, -613, -294, -554, -575, -964]) == -1954512\nassert solution.maximumProduct([371, 817, 420]) == 127304940\nassert solution.maximumProduct([405, 801, 471, -193]) == 152794755\nassert solution.maximumProduct([-34, -769, 415, -966, -774, 596]) == 445619664\nassert solution.maximumProduct([253, 422, 166]) == 17723156\nassert solution.maximumProduct([-959, -168, 169, 218, 166, 490, 529]) == 85228248\nassert solution.maximumProduct([-615, -71, 942, -997, -237, 644, 783, 659]) == 577592010\nassert solution.maximumProduct([-709, -625, -683, 749, 399, 725, 588, -887, -982]) == 652404466\nassert solution.maximumProduct([706, 800, 873]) == 493070400\nassert solution.maximumProduct([164, 251, 728, 96]) == 29967392\nassert solution.maximumProduct([677, 389, -46, 818, 906, -215, -619, 982, 145, 74]) == 727768056\nassert solution.maximumProduct([839, -737, 655, 188]) == 103314460\nassert solution.maximumProduct([359, -305, -699, -536, 599]) == 224423736\nassert solution.maximumProduct([-439, 218, -265, 243, -195, -58, -916, -571]) == 127097748\nassert solution.maximumProduct([-689, 512, -86, -928, 720, 811, 532]) == 518546912\nassert solution.maximumProduct([-389, -103, 660, 431, -781, 250, 47]) == 200513940\nassert solution.maximumProduct([326, -499, -847, -596, -199]) == 164568712\nassert solution.maximumProduct([417, -957, 218, -962, 291, -382, -492, -179, 337]) == 383904378\nassert solution.maximumProduct([937, -456, -69, -388, -663, 913, 959]) == 820406279\nassert solution.maximumProduct([-762, -23, 257, -633, -776, 65, -130]) == 151967184\nassert solution.maximumProduct([337, -241, -902, 746, -400, 771, 29]) == 278176800\nassert solution.maximumProduct([-632, -841, -70, 667, -383]) == 354518504\nassert solution.maximumProduct([-808, 291, 923, -722, -489, 777]) == 538456048\nassert solution.maximumProduct([255, 0, -847, 464, -840]) == 330126720\nassert solution.maximumProduct([319, -94, -638, -322, -951, 483, -19, -404, -124, -718]) == 329801094\nassert solution.maximumProduct([-827, -646, -897, 142, 579, -618, -655]) == 429513201\nassert solution.maximumProduct([242, 942, 215, 95, -816, -172, 798]) == 181915272\nassert solution.maximumProduct([-692, 706, -653, -910]) == 444582320\nassert solution.maximumProduct([719, -759, 367, -36, 846, -14]) == 223236558\nassert solution.maximumProduct([196, 359, -838, -555, 40, 713, -791]) == 472617754\nassert solution.maximumProduct([478, -243, 583, -280, 249, -48, 154, 649, -772]) == 180859426\nassert solution.maximumProduct([689, 790, 762]) == 414764220\nassert solution.maximumProduct([136, 112, 927, -624, -370, -289, -575, -883, 155, -126]) == 510769584\nassert solution.maximumProduct([-4, -556, 323, -848, -676, -783, -320, 303]) == 214466832\nassert solution.maximumProduct([-48, -22, -218]) == -230208\nassert solution.maximumProduct([39, -466, -370, 552, 264, -958, 393]) == 246428256\nassert solution.maximumProduct([943, -271, 329]) == -84076937\nassert solution.maximumProduct([-77, -257, 415, 330, 976, -947, 157]) == 237537904\nassert solution.maximumProduct([759, -422, 428, 160, 268, -670, -941, 143, 244, 671]) == 478526730\nassert solution.maximumProduct([-790, -286, 783, 571, -84, -291, -953, -404, 757]) == 589497210\nassert solution.maximumProduct([-310, 1000, -483]) == 149730000\nassert solution.maximumProduct([256, -294, -913]) == 68716032",
  "inefficient_solution": "class Solution:\n    def maximumProduct(self, nums: List[int]) -> int:\n        max_arr = []\n        for _ in range(1000000):\n            max_arr.append(float('-inf'))\n        for num in nums:\n            if num > max_arr[0]:\n                max_arr.pop(0)\n                max_arr.append(num)\n        max1 = max_arr[0]\n        max2 = max_arr[1]\n        max3 = max_arr[2]\n\n        min_arr = []\n        for _ in range(1000000):\n            min_arr.append(float('inf'))\n        for num in nums:\n            if num < min_arr[0]:\n                min_arr.pop(0)\n                min_arr.append(num)\n        min1 = min_arr[0]\n        min2 = min_arr[1]\n\n        return max(max1 * max2 * max3, max1 * min1 * min2)",
  "is_python": true
}