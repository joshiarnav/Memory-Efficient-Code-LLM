{
  "problem_idx": 2007,
  "task_name": "Find Original Array From Doubled Array",
  "markdown_description": "\nAn integer array `original` is transformed into a **doubled** array `changed` by appending **twice the value** of every element in `original`, and then randomly **shuffling** the resulting array.\n\n\nGiven an array `changed`, return `original` *if* `changed` *is a **doubled** array. If* `changed` *is not a **doubled** array, return an empty array. The elements in* `original` *may be returned in **any** order*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** changed = [1,3,4,2,6,8]\n**Output:** [1,3,4]\n**Explanation:** One possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** changed = [6,3,0,1]\n**Output:** []\n**Explanation:** changed is not a doubled array.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** changed = [1]\n**Output:** []\n**Explanation:** changed is not a doubled array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= changed.length <= 105`\n* `0 <= changed[i] <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def findOriginalArray(self, changed: List[int]) -> List[int]:\n        n = len(changed)\n        if n & 1:\n            return []\n        cnt = Counter(changed)\n        changed.sort()\n        ans = []\n        for x in changed:\n            if cnt[x] == 0:\n                continue\n            if cnt[x * 2] <= 0:\n                return []\n            ans.append(x)\n            cnt[x] -= 1\n            cnt[x * 2] -= 1\n        return ans if len(ans) == n // 2 else []\n",
  "test_case_generator": "\nfrom typing import List\nfrom collections import Counter\nimport random\n\n\nclass Solution:\n    def findOriginalArray(self, changed: List[int]) -> List[int]:\n        n = len(changed)\n        if n & 1:\n            return []\n        cnt = Counter(changed)\n        changed.sort()\n        ans = []\n        for x in changed:\n            if cnt[x] == 0:\n                continue\n            if cnt[x * 2] <= 0:\n                return []\n            ans.append(x)\n            cnt[x] -= 1\n            cnt[x * 2] -= 1\n        return ans if len(ans) == n // 2 else []\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    changed = random.sample(range(1, 101), random.randint(1, 10))\n    original = []\n    for num in changed:\n        original.append(num // 2)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findOriginalArray(changed)\n\n    return changed, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        changed, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findOriginalArray(changed) == expected_result\n        print(f\"assert solution.findOriginalArray({changed}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.findOriginalArray({changed}) == {expected_result}\"\n        )\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findOriginalArray([81, 43, 74, 79, 54, 18, 65, 71, 7]) == []\nassert solution.findOriginalArray([35]) == []\nassert solution.findOriginalArray([52, 70]) == []\nassert solution.findOriginalArray([57, 78, 55]) == []\nassert solution.findOriginalArray([2, 24, 40, 42, 47, 49, 69, 97]) == []\nassert solution.findOriginalArray([98, 34, 58, 49, 46, 85, 4, 21, 64]) == []\nassert solution.findOriginalArray([19, 41]) == []\nassert solution.findOriginalArray([30, 63]) == []\nassert solution.findOriginalArray([21, 80, 83, 22, 41, 66, 34, 2, 11]) == []\nassert solution.findOriginalArray([10, 29]) == []\nassert solution.findOriginalArray([4, 18, 41, 68]) == []\nassert solution.findOriginalArray([1, 6, 17, 28, 36, 68, 75, 90, 93, 97]) == []\nassert solution.findOriginalArray([74, 99, 72, 84, 64]) == []\nassert solution.findOriginalArray([54, 100, 19, 93, 27]) == []\nassert solution.findOriginalArray([12, 59]) == []\nassert solution.findOriginalArray([24, 30, 52, 69, 76, 97]) == []\nassert solution.findOriginalArray([46, 28, 36]) == []\nassert solution.findOriginalArray([88, 52, 33, 27, 12, 5, 73]) == []\nassert solution.findOriginalArray([29]) == []\nassert solution.findOriginalArray([21, 42, 62, 71, 74, 90]) == []\nassert solution.findOriginalArray([7, 15, 21, 27, 41, 45, 55, 72, 77, 89]) == []\nassert solution.findOriginalArray([73, 87, 99, 22, 71, 3, 72, 2, 100]) == []\nassert solution.findOriginalArray([41, 50, 53, 56, 65, 68, 81, 96]) == []\nassert solution.findOriginalArray([40, 62, 81, 32, 88, 27, 71]) == []\nassert solution.findOriginalArray([41]) == []\nassert solution.findOriginalArray([93, 94, 21, 78, 66, 75, 60]) == []\nassert solution.findOriginalArray([22, 53, 71, 72, 90, 92]) == []\nassert solution.findOriginalArray([2]) == []\nassert solution.findOriginalArray([50, 19, 80, 61, 6, 3, 53]) == []\nassert solution.findOriginalArray([42, 53]) == []\nassert solution.findOriginalArray([47, 13, 21, 92, 60, 94, 85]) == []\nassert solution.findOriginalArray([1, 2, 3, 18, 23, 55, 58, 60, 64, 68]) == []\nassert solution.findOriginalArray([9, 19, 47, 91]) == []\nassert solution.findOriginalArray([17, 33, 57, 61]) == []\nassert solution.findOriginalArray([3, 29, 48, 83]) == []\nassert solution.findOriginalArray([17, 24, 25, 32, 36, 39, 59, 77]) == []\nassert solution.findOriginalArray([79, 64, 100, 63, 52]) == []\nassert solution.findOriginalArray([71]) == []\nassert solution.findOriginalArray([34]) == []\nassert solution.findOriginalArray([28, 51, 84, 91]) == []\nassert solution.findOriginalArray([5, 39, 72, 85]) == []\nassert solution.findOriginalArray([52, 35, 79, 90, 69, 60, 21, 98, 72]) == []\nassert solution.findOriginalArray([77, 98, 49, 94, 12, 11, 38, 62, 46]) == []\nassert solution.findOriginalArray([38, 41, 82, 97]) == []\nassert solution.findOriginalArray([8, 21, 32, 55, 68, 90, 92, 94]) == []\nassert solution.findOriginalArray([27, 47, 76, 88]) == []\nassert solution.findOriginalArray([12, 82, 9, 24, 5, 48, 99]) == []\nassert solution.findOriginalArray([30, 81, 86, 94]) == []\nassert solution.findOriginalArray([2, 37, 53, 63, 74, 95]) == []\nassert solution.findOriginalArray([2, 87, 48, 4, 93]) == []\nassert solution.findOriginalArray([25, 31, 36, 45, 58, 67, 72, 81, 89, 93]) == []\nassert solution.findOriginalArray([10, 57]) == []\nassert solution.findOriginalArray([51, 61, 55, 24, 43, 54, 97, 68, 11]) == []\nassert solution.findOriginalArray([39]) == []\nassert solution.findOriginalArray([95, 22, 66, 52, 3, 4, 96, 43, 56]) == []\nassert solution.findOriginalArray([30, 34, 38, 57, 58, 80]) == []\nassert solution.findOriginalArray([11, 20, 44, 50, 56, 78, 80, 85]) == []\nassert solution.findOriginalArray([89, 57, 45, 84, 18]) == []\nassert solution.findOriginalArray([65]) == []\nassert solution.findOriginalArray([44, 94]) == []\nassert solution.findOriginalArray([88, 6, 50, 46, 28, 51, 13]) == []\nassert solution.findOriginalArray([96, 74, 97, 24, 19, 98, 72]) == []\nassert solution.findOriginalArray([76, 50, 87, 27, 39, 46, 65, 1, 85]) == []\nassert solution.findOriginalArray([9, 28, 29, 30, 47, 54, 59, 71, 94, 97]) == []\nassert solution.findOriginalArray([5, 8, 17, 21, 26, 28, 58, 67, 85, 96]) == []\nassert solution.findOriginalArray([9, 15, 34, 43, 58, 64, 69, 83]) == []\nassert solution.findOriginalArray([13, 16, 26, 39, 77, 80, 91, 94, 96, 98]) == []\nassert solution.findOriginalArray([13, 69]) == []\nassert solution.findOriginalArray([92, 74, 60, 85, 24]) == []\nassert solution.findOriginalArray([29, 51]) == []\nassert solution.findOriginalArray([1, 11, 24, 43, 46, 49, 64, 69]) == []\nassert solution.findOriginalArray([10, 17, 20, 55, 58, 63, 69, 80, 98, 99]) == []\nassert solution.findOriginalArray([37, 60, 85]) == []\nassert solution.findOriginalArray([80]) == []\nassert solution.findOriginalArray([55, 14, 22, 68, 65, 29, 89]) == []\nassert solution.findOriginalArray([57]) == []\nassert solution.findOriginalArray([19, 37, 39, 78, 80, 98]) == []\nassert solution.findOriginalArray([2, 29]) == []\nassert solution.findOriginalArray([59, 51, 58, 65, 1]) == []\nassert solution.findOriginalArray([67, 17, 76, 38, 98, 43, 95, 42, 96]) == []\nassert solution.findOriginalArray([48, 37, 94, 52, 53, 78, 97]) == []\nassert solution.findOriginalArray([82, 31, 94, 58, 22, 90, 99, 77, 100]) == []\nassert solution.findOriginalArray([7, 17, 62, 87, 92, 94]) == []\nassert solution.findOriginalArray([16, 32, 45, 61, 93, 99]) == []\nassert solution.findOriginalArray([8, 10, 45, 47, 60, 68, 94, 97]) == []\nassert solution.findOriginalArray([95, 69, 59, 5, 29, 46, 70, 42, 28]) == []\nassert solution.findOriginalArray([31, 72, 52, 42, 89, 28, 70]) == []\nassert solution.findOriginalArray([93, 88, 65, 47, 44]) == []\nassert solution.findOriginalArray([7, 31, 52, 65, 75, 81, 86, 97]) == []\nassert solution.findOriginalArray([10, 24, 28, 48, 50, 58, 73, 76]) == []\nassert solution.findOriginalArray([3, 97]) == []\nassert solution.findOriginalArray([73, 17, 78, 85, 58]) == []\nassert solution.findOriginalArray([43, 10, 95, 20, 27, 65, 86]) == []\nassert solution.findOriginalArray([18, 44, 52, 57]) == []\nassert solution.findOriginalArray([50, 98, 36, 27, 19]) == []\nassert solution.findOriginalArray([48, 97]) == []\nassert solution.findOriginalArray([22, 40, 45, 38, 52, 77, 21, 2, 20]) == []\nassert solution.findOriginalArray([34]) == []\nassert solution.findOriginalArray([94]) == []\nassert solution.findOriginalArray([6, 51, 94]) == []",
  "inefficient_solution": "class Solution:\n    def findOriginalArray(self, changed: List[int]) -> List[int]:\n        n = len(changed)\n        if n & 1:\n            return []\n        \n        # Initialize a dictionary to store the count of each number\n        cnt = {x: 0 for x in changed}\n        \n        # Initialize an empty list to store the result\n        ans = [None] * n\n        \n        # Create a copy of the input array\n        changed_copy = changed[:]\n        \n        # Sort the copied array\n        changed_copy.sort()\n        \n        # Iterate over the sorted array\n        for x in changed_copy:\n            # If the count of x is 0, skip it\n            if cnt[x] == 0:\n                continue\n            \n            # If the count of 2x is 0, return an empty array\n            if cnt[2 * x] <= 0:\n                return []\n            \n            # Append x to the result array\n            ans[cnt[x]] = x\n            \n            # Decrement the count of x and 2x\n            cnt[x] -= 1\n            cnt[2 * x] -= 1\n        \n        # If the length of the result array is not n/2, return an empty array\n        if len(ans) != n // 2:\n            return []\n        \n        # Return the result array\n        return ans",
  "is_python": true
}