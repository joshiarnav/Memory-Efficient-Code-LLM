{
  "problem_idx": 388,
  "task_name": "Longest Absolute File Path",
  "markdown_description": "\nSuppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0388.Longest%20Absolute%20File%20Path/images/mdir.jpg)\n\n\nHere, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`.\n\n\nIn text form, it looks like this (with \u27f6 representing the tab character):\n\n\n\n```\n\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\n\n```\n\nIf we were to write this representation in code, it will look like this: `\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"`. Note that the `'\\n'` and `'\\t'` are the new-line and tab characters.\n\n\nEvery file and directory has a unique **absolute path** in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. Using the above example, the **absolute path** to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext\"`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces.\n\n\nGiven a string `input` representing the file system in the explained format, return *the length of the **longest absolute path** to a **file** in the abstracted file system*. If there is no file in the system, return `0`.\n\n\n**Note** that the testcases are generated such that the file system is valid and no file or directory name has length 0.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0388.Longest%20Absolute%20File%20Path/images/dir1.jpg)\n\n```\n\n**Input:** input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n**Output:** 20\n**Explanation:** We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0300-0399/0388.Longest%20Absolute%20File%20Path/images/dir2.jpg)\n\n```\n\n**Input:** input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n**Output:** 32\n**Explanation:** We have two files:\n\"dir/subdir1/file1.ext\" of length 21\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\nWe return 32 since it is the longest absolute path to a file.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** input = \"a\"\n**Output:** 0\n**Explanation:** We do not have any files, just a single directory named \"a\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= input.length <= 104`\n* `input` may contain lowercase or uppercase English letters, a new line character `'\\n'`, a tab character `'\\t'`, a dot `'.'`, a space `' '`, and digits.\n* All file and directory names have **positive** length.\n\n\n",
  "canonical_solution": "class Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        i, n = 0, len(input)\n        ans = 0\n        stk = []\n        while i < n:\n            ident = 0\n            while input[i] == '\\t':\n                ident += 1\n                i += 1\n\n            cur, isFile = 0, False\n            while i < n and input[i] != '\\n':\n                cur += 1\n                if input[i] == '.':\n                    isFile = True\n                i += 1\n            i += 1\n\n            # popd\n            while len(stk) > 0 and len(stk) > ident:\n                stk.pop()\n\n            if len(stk) > 0:\n                cur += stk[-1] + 1\n\n            # pushd\n            if not isFile:\n                stk.append(cur)\n                continue\n\n            ans = max(ans, cur)\n\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        i, n = 0, len(input)\n        ans = 0\n        stk = []\n        while i < n:\n            ident = 0\n            while input[i] == '\\t':\n                ident += 1\n                i += 1\n\n            cur, isFile = 0, False\n            while i < n and input[i] != '\\n':\n                cur += 1\n                if input[i] == '.':\n                    isFile = True\n                i += 1\n            i += 1\n\n            # popd\n            while len(stk) > 0 and len(stk) > ident:\n                stk.pop()\n\n            if len(stk) > 0:\n                cur += stk[-1] + 1\n\n            # pushd\n            if not isFile:\n                stk.append(cur)\n                continue\n\n            ans = max(ans, cur)\n\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random input string\n    input_str = \"\"\n\n    # Generate the number of lines in the input string\n    num_lines = random.randint(1, 11)\n\n    # Generate the content for each line\n    for _ in range(num_lines):\n        # Generate random number of tabs for indentation\n        num_tabs = random.randint(0, 5)\n        input_str += \"\\t\" * num_tabs\n\n        is_file = random.randint(0, 1)\n        if is_file:\n            # Generate random file name\n            file_name_len = random.randint(1, 10)\n            file_name = ''.join(random.choices(string.ascii_letters, k=file_name_len))\n            input_str += file_name + \"\\n\"\n        else:\n            # Generate random directory name\n            dir_name_len = random.randint(1, 10)\n            dir_name = ''.join(random.choices(string.ascii_letters, k=dir_name_len))\n            input_str += dir_name + \"\\n\"\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lengthLongestPath(input_str)\n\n    return input_str, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        input_str, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lengthLongestPath(input_str) == expected_result\n        test_case_generator_results.append(f\"assert solution.lengthLongestPath('{input_str}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.lengthLongestPath('\t\t\t\tXVPUJ\n\t\t\t\t\twpmF\nFBFgXh\n\t\tLuBAPabSm\n\t\tEOHWyjpI\n\tGmuNXhZI\n') == 0\nassert solution.lengthLongestPath('\t\t\tZKRTI\n\t\tZxH\nVJaz\n\tzqzxIxh\nLzDjFd\n\tXueOSxR\n') == 0\nassert solution.lengthLongestPath('\tREzBW\n\t\t\t\tmvajCmaH\n\tBE\n\t\t\t\tPuQl\n\t\t\t\t\tfOIP\nOE\n\t\tQwJobNxZVW\n\t\t\toNhwQiI\n\t\t\t\t\tVFq\njREXPOpnxO\n\t\t\t\tBViTVk\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tdwcZYcSxP\n\t\t\t\tSiZt\n\t\tWUzndbiql\n\t\t\t\tGuELmhX\n\t\t\t\tTohmZk\n') == 0\nassert solution.lengthLongestPath('te\n\t\t\t\t\tj\nIMx\n\t\tioUfwnZVHo\n') == 0\nassert solution.lengthLongestPath('YyhLrHkAHM\n\t\t\tq\n\t\t\tRVgNfz\n\t\t\t\tkA\n\t\t\t\tLwZxs\nxwAmCJedc\n\t\t\tZMgnWZtOm\n\t\t\t\tWGSQquCho\n\t\t\t\t\tPjiKDM\n') == 0\nassert solution.lengthLongestPath('\t\t\tSI\nXAsg\n\t\tOtP\n\t\t\t\t\tLpmzVforxg\n\tsdY\n\t\tRVu\n\tb\n') == 0\nassert solution.lengthLongestPath('\t\t\tzopPMnsDbA\n\t\tJBAdxRVwb\n\t\t\t\t\twri\n\tFFzkuLQ\n\t\t\tZgxwA\n\t\tAhfbTfj\n\tOYBi\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tdmc\neEzvfFUos\n\t\t\tzAA\n\t\t\t\tA\n\tZTei\na\n\t\t\t\twkhgPXfBtC\n\tfGBZlQ\n\t\t\t\tSWmJfeLAq\nSB\n') == 0\nassert solution.lengthLongestPath('\t\t\tG\n\tZPj\n\t\tzpSrV\niI\nxuQPvoR\n\tJ\nnOPUawFMTF\n\t\t\t\tjK\n\t\t\tASeojK\nYazcVe\n') == 0\nassert solution.lengthLongestPath('\t\tLUNtr\nwwG\n\t\t\tuwiXTE\n\t\t\t\tZmstTyiub\n\t\t\t\tmWwve\n\t\t\t\t\tmMf\nNQzKf\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tz\n\t\t\t\tOuhyRiI\n\t\t\t\t\tgRQmEL\nIFY\n\t\tSlV\n\t\t\t\tNzSx\n\t\t\t\t\teScAulKr\n\t\tPE\n\t\t\t\t\tisHQxSwW\n\t\tojtQi\n\t\t\t\tdyGhyoIzk\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tmaSVSx\n\t\t\t\tLmBpl\n\t\t\t\tDNuk\n\t\t\t\tbmVksiX\n') == 0\nassert solution.lengthLongestPath('\tTvVppeXZ\n\t\t\t\t\tvAFspe\n\t\tDlmkZfGem\n\tYZPrZSNi\n\t\t\t\t\tY\n\t\t\t\tniZ\n\t\t\t\t\tuLSstF\n\t\t\t\tsAFY\nyMnoNF\n\t\tnG\neHbki\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tN\n\t\t\t\tmgwBp\n\t\t\t\tCVkZ\n\t\t\tIG\n\t\t\t\tuglyRSQ\n\t\tMWF\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tsKWI\n\t\t\t\tzEbsF\n\t\t\t\t\tyAokXYe\n\t\t\t\t\toYbPnt\n') == 0\nassert solution.lengthLongestPath('cyNtbzROnk\n\t\t\t\t\tTThSugbunr\n\t\t\t\t\tBmdEFUHdw\nerYQR\n\t\t\tHxfaAAP\n\t\t\t\tbvFecUVk\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tGeIvMY\n\t\t\t\tSblDowIQrM\n\t\tSI\n\t\tOmViCYw\n\t\t\t\t\tRtuVjmkja\n\t\tpMtbWX\n\t\t\t\tZuVxGIMdmU\n') == 0\nassert solution.lengthLongestPath('\t\t\tcrrHolmyN\n\t\t\t\thhrI\n\t\t\tzFyOGpDqjB\n\t\ttfU\n\t\t\tkXRUQc\n') == 0\nassert solution.lengthLongestPath('\t\t\tQtrHefWZ\ntMPbsU\n\t\toI\n\t\tI\n\t\t\t\t\tLz\n\t\t\tVbnY\n\t\t\t\t\tRgOKtVxGja\n\tTCMoLY\n\t\t\tuxSlzpXxVr\n\t\tAkqdijBTP\n') == 0\nassert solution.lengthLongestPath('\t\tqR\n\tTJBdOlfNlY\n\t\tOB\n') == 0\nassert solution.lengthLongestPath('\t\t\tumCs\n\t\t\tMlRUu\nnlPJGSxtV\n\t\t\t\tz\n\t\t\tBmGQIWl\n\t\tfJs\n\t\t\t\tLEadHPcRxU\n') == 0\nassert solution.lengthLongestPath('\t\tqvb\nOEDiszKEz\n') == 0\nassert solution.lengthLongestPath('\tsSHzaUjLr\nAA\n\t\tgjYvsrkRyz\n\t\t\t\t\thKP\n') == 0\nassert solution.lengthLongestPath('\t\tiDpdmBB\n\t\t\t\t\tEqYqqtrQa\n\t\t\t\tnatMrLjQ\n\t\t\t\tMbfddyXLgI\n\t\t\txuOAwIV\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tBsmocd\n\t\t\t\thtxzOjbu\n\tqoyxtcUn\n\tQhEpZju\n\t\tNpUe\n\t\t\tWueAG\n\t\t\t\t\tq\n\t\tOSFai\n\t\tAJsX\n') == 0\nassert solution.lengthLongestPath('\tzkCNaA\n\t\t\t\t\tpS\n\teRreNrHu\n\t\t\t\t\tjTNIkAd\nkfCb\n\tm\nBKZO\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tsp\n\t\t\towbCCqkUEj\n\t\t\t\tUHGl\nM\n\tTiJpS\n') == 0\nassert solution.lengthLongestPath('\t\t\tPEm\n\tdbZfoEbF\n\t\tJDf\n\t\t\tJjp\n\t\tyI\n\tZIsdP\n\t\t\tsnivdKCrI\n\t\tejrKitCnu\n\t\t\t\t\tAykxMRiENN\n') == 0\nassert solution.lengthLongestPath('\t\t\t\taweqKegrqX\n\t\t\t\t\tDvSfXKmd\n\t\t\tDYGLlNEQ\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tnfh\n\t\t\t\t\tXxhu\n\t\t\t\tTOKUg\n\t\t\t\t\tpaNPMbPIfQ\n\t\t\t\teqxFqsKzAr\n\t\t\twsL\n\t\t\tE\nYWoxo\n\t\t\t\t\tuGrsKlUSl\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tzCVUPxshuU\n\t\t\tMmYzj\n\t\t\tk\n\t\t\t\tIahKqYICGe\n\t\tFXX\n\t\t\t\tgwozhkQkKS\n\t\t\t\t\trilkAaBJ\n\tCo\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tOJVMNo\n\tnEVtokKv\n\t\t\tZmoOrMQdub\n\t\thfiVkYa\ndFs\n\tMAUIEmv\n\t\t\t\tldEr\n\t\t\t\tYsqtlv\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\txw\n\tpBTT\n\t\t\t\t\tWAx\n') == 0\nassert solution.lengthLongestPath('\t\t\tPzjepIq\n') == 0\nassert solution.lengthLongestPath('\t\tr\nGiRbF\n\tiHPp\n\t\t\t\tntgPysseX\ncCVvWd\n\t\t\t\t\tUmHdxmqu\n\t\t\t\triaDdRjOSi\n\tANkLL\n') == 0\nassert solution.lengthLongestPath('\t\tAkLjz\n\t\t\thM\n\t\t\t\t\tZGHXi\n\t\t\tdhhbmQ\n\t\t\t\tG\n\t\t\t\tWxCh\n') == 0\nassert solution.lengthLongestPath('\t\t\td\n\t\t\t\t\tnXwgChO\n\t\t\t\tNpkHulqNbv\n\tTV\n\t\tVIbObmKmbq\n\tfdP\n\t\t\t\tmqOMcCksM\n\t\tFbUsxER\n') == 0\nassert solution.lengthLongestPath('\t\t\tY\n\t\t\tsUdBg\n\t\t\t\tM\n\t\tGDDBL\n\t\t\t\t\trCbgbnLQ\n\t\t\t\tUs\n\t\t\t\tDqbVSdKdXC\n\t\t\t\tyhatnTP\nujvaDIrqQ\n\t\t\tyAGwTH\n') == 0\nassert solution.lengthLongestPath('\tADDszEhDe\n\t\t\t\tH\n\tuoaXgYLwsP\n\t\t\t\t\tWU\n\t\t\tYyz\n\tFdLrLGaKd\nWXdeZ\nDabCDt\n\t\t\tYEqmWBGt\n\t\tSmNgwfOWOM\n') == 0\nassert solution.lengthLongestPath('\tAUaLMkGP\n\t\tqFDyzn\n\t\t\t\tKhyfPz\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\thBqnqOBg\n\t\t\t\tZad\n') == 0\nassert solution.lengthLongestPath('\t\tmONwOH\n\t\t\tBO\n\t\t\tSTmMoJhn\n\tBZy\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tBZ\n\t\t\tyg\n') == 0\nassert solution.lengthLongestPath('XvYYWuMkd\n\t\t\t\thKusnWULiY\n\t\t\t\t\tGmAs\n\t\t\t\tWZIIPQl\n\t\tlKY\n\t\t\tngC\n') == 0\nassert solution.lengthLongestPath('\t\tZoaW\ngm\n\t\tsgxFCi\n\t\t\t\t\tTOabWZoPQ\najbnfQbUrj\neqMOzRLATZ\n\tE\n\t\t\trML\n\tqwsByf\n\t\tdyYrv\n') == 0\nassert solution.lengthLongestPath('vkBvdTsyjR\n\trRitMIv\n\t\tcajNJku\n\ttP\n\t\t\t\t\tel\n\t\t\t\t\tgGNA\n\t\t\t\t\tsYOB\n') == 0\nassert solution.lengthLongestPath('\t\t\tenST\n') == 0\nassert solution.lengthLongestPath('\t\t\tpyHaF\n\t\tOAGthiW\n\t\tKWLXIUvC\n\t\t\tBtxM\nSKj\n') == 0\nassert solution.lengthLongestPath('\t\tSTyLm\n\t\t\t\tRglPVfsA\n\t\t\t\tGuJh\n\t\t\t\t\twdcmpOHo\n\t\t\t\t\tFhSfBKRei\n\t\t\t\tdGl\n') == 0\nassert solution.lengthLongestPath('\t\t\tMCBdZhauTh\n\tKxxRLM\n\tr\n\t\t\t\t\tuNK\n\t\t\t\t\tAumM\n\tL\n\t\t\t\ts\n') == 0\nassert solution.lengthLongestPath('\t\t\tDpTTVudNmQ\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tIWQA\n\t\t\t\t\ta\n\t\tGXYEFlfJQc\n\t\t\t\twXA\n\t\t\t\tpxg\n\t\t\t\t\tzi\n\t\t\tKnDrkMAM\n\t\t\t\t\twkhiWa\n') == 0\nassert solution.lengthLongestPath('\tAnXpDjeUVZ\n\t\t\t\t\tiQBhPD\n\t\tnLZ\nfC\n\t\t\tgEFwA\n\t\t\tOMyGw\n\t\t\t\t\tXHxWEdU\n') == 0\nassert solution.lengthLongestPath('\t\tMKoxbvc\n\t\t\t\t\tOP\n\tgVPZOof\n\tUhioutwLP\n\t\t\t\t\twzsB\n\t\t\tOaRsvlBv\n\t\t\t\taNQLDEKL\n\tfaxggEWPpw\n\tjAnKIdINN\n\t\tlFbuv\n\tW\n') == 0\nassert solution.lengthLongestPath('\t\t\tBGjNQnA\n\t\t\tiRycXFPIQ\nMShK\n\t\t\tDlv\nnd\n\t\tHLJPPd\n\t\tTpTiz\n') == 0\nassert solution.lengthLongestPath('\tFTJQRjcqJ\nKTS\nvsvTSEq\n\t\t\t\tGGNCW\n\tVkYvVZkxy\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tMSVX\n\t\t\tP\n\tLFlqJOY\n\t\t\tvCmZE\n\t\tZP\nGLnus\n\t\t\tGQhiPlBsZI\nHhDi\n') == 0\nassert solution.lengthLongestPath('\t\t\t\trBAReF\n\tZhTsrQILZx\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tBxI\n\tKzxl\n\tDYymsXWx\n\t\t\tZpYdGPBLx\n\t\t\t\taxKXKBZOKn\n\t\t\tMXzHhpeB\n\t\tsHfMNt\n\t\tydEGVbug\n') == 0\nassert solution.lengthLongestPath('\t\t\tvesz\n\t\t\t\t\tBWRXKNVk\n\t\t\tBYBgqlO\nMXONWQ\n\t\t\tEdNlm\n\t\tmyghXjfzi\n\tBxEZPHT\n\t\t\t\tRhC\n') == 0\nassert solution.lengthLongestPath('\t\t\tZ\n\t\t\t\t\tNYnpChhp\n\t\t\twUpzhXNhHC\nSUwkqzC\n\t\t\t\t\tLvgzfV\n\tZC\n\t\t\thtH\n\t\tXMty\n\t\t\ty\n\t\t\tIvkdv\n\t\t\txS\n') == 0\nassert solution.lengthLongestPath('\t\tU\n\t\t\t\tV\n\t\tcNfo\n\t\tPjGKfApw\n\t\t\t\tfTykkg\n') == 0\nassert solution.lengthLongestPath('\tNT\n\t\tmJKMQtcDv\n\t\tfuTnppKp\n\tIJbvntxLX\n\t\t\t\t\tFh\n\t\t\t\t\tijQhzgfY\n\t\t\t\txalXk\nM\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tIDP\n') == 0\nassert solution.lengthLongestPath('\tIjBy\n\t\t\t\tL\n') == 0\nassert solution.lengthLongestPath('\t\t\tzu\nQLGE\n\t\tMvBj\n\t\t\t\tKkqP\n\t\t\tPpMtveNQa\nz\n\tvaQSKx\n') == 0\nassert solution.lengthLongestPath('\tkExQ\n\t\tVMzyjpfW\n\t\t\t\t\tbXNKeED\n\tjBruSeZe\nGy\nuzVN\n\t\t\t\t\tVruYMOT\n\t\t\t\tsIBTI\n\t\t\txDj\n') == 0\nassert solution.lengthLongestPath('\t\t\t\twBWb\n\t\t\t\t\tmWeGmP\n\t\tdYJuf\n') == 0\nassert solution.lengthLongestPath('\tUFORNo\n\t\t\tu\n\t\t\t\t\tzOJOphXdp\n\t\tLQfb\n\t\t\t\tUYVY\n\t\t\tmgj\n\t\tXQGLipSd\n\t\t\t\t\tPUkKvMxR\n\tU\n\t\t\t\t\tsHhg\n\tqY\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tTXZfZOqu\n\t\t\t\t\toFHmfonx\n\tL\n\t\t\tQQ\n\t\tEFsarNv\niwwCnip\n\t\t\tQe\n\t\t\t\tYK\n\t\t\tXbJZgUwPI\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tOHVjwPBs\n\t\t\tlmhIxg\n\t\t\t\t\tGLqIDoS\n\t\t\tDpRRbnJU\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tSP\n\t\tjNWkBSi\n\t\t\t\tYYYrK\n\tsS\n\t\t\t\t\tQkhRdtaS\n\t\t\t\t\tfvhIE\ntOZdEpq\n\t\t\t\t\tKPLEeA\ncx\n\t\tPlsKpFZ\n') == 0\nassert solution.lengthLongestPath('VRqYjekf\n\t\tlCzGYGuo\n\tjdPhBNrvl\n\t\tf\n\t\tXCvAnNE\n\t\tGSX\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tPyIgSOQ\n\t\t\t\t\tDcXPpZlN\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tMgCwmAf\n\t\t\t\tjFpTubYH\n') == 0\nassert solution.lengthLongestPath('\tfD\n\t\t\tauzWAVqa\n\tJsgA\n\t\t\tKtTPHAQarM\n\t\t\t\t\tRX\n\t\t\t\tbU\n\t\t\t\t\tpvTxEoyLy\n\t\t\t\t\tcPL\n\t\t\tbSnd\n') == 0\nassert solution.lengthLongestPath('\ttHygb\nVVNStmh\n\t\t\tZGqK\nsYYpv\n\toWdXksgREV\n\t\t\t\t\tUx\n\t\t\t\t\teukxhRzK\n\t\t\tHUmHHifUy\n\t\tuL\n') == 0\nassert solution.lengthLongestPath('GuOB\n\t\t\tC\n\tLEbiTURr\n\tsZxSNyDnL\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tQDLJ\n\t\ttAvvz\n\t\t\t\tWPsANnilMM\n\t\txjzD\nUeciRpLn\n\t\t\t\t\tEKxi\n\t\tFbyTXquigB\n\t\t\tCRzMCW\nDWuUuyJ\n') == 0\nassert solution.lengthLongestPath('\tZnvtxz\n\t\t\tZeIaRrVY\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tF\n\t\t\t\t\tGleINBpKn\n') == 0\nassert solution.lengthLongestPath('\tAmpItdS\n\t\t\t\t\tU\n\tqTAuHeQf\n\t\t\tKyFkMneMn\n\t\t\t\t\tv\neBaQAY\n\tkLhWbtqicw\nFGdxWnHnSF\n\t\t\t\t\tiKFtX\nkyfObaML\n') == 0\nassert solution.lengthLongestPath('\trXKGDZVLLu\n\t\t\t\tSLsVOd\n\tDUB\n\tqT\n\t\t\t\t\tGw\n\tFzmiuQUMRu\n\t\t\tWnbr\n\txNcs\n') == 0\nassert solution.lengthLongestPath('BTcxZ\n\t\t\t\t\txaDyG\n') == 0\nassert solution.lengthLongestPath('\t\t\tSAzGdGt\n\t\t\tEznjyS\nd\nWGOvAgzOK\n\t\t\txWMuDqJH\n\t\t\t\tUHIB\n\t\t\t\t\tBCqxfP\n\t\t\t\t\tgaEQSA\n\t\tlZJg\n\t\t\t\tMJgRltCOGT\n\t\tbKjmkUUpWZ\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tzkOejDBf\n\t\t\t\t\tTJlm\n\t\t\tbAy\n\t\tfAsxftEmlg\n\t\t\t\t\tymPt\n\t\t\tJJgXon\nUiVN\n') == 0\nassert solution.lengthLongestPath('\t\tueqDCEJTqP\n\t\t\t\t\tpfCgUycUwy\n\t\t\tnulbH\nLl\n\t\t\t\t\te\n\t\tnHRPhw\n\t\t\t\tXgWmu\n\t\tXKXxf\n') == 0\nassert solution.lengthLongestPath('HFLPRB\n\t\tQCtXtGBFSj\n\t\t\tiuDh\n\t\tXX\n\tYpXJnyhTF\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tGamQzNHa\n\t\t\t\t\tIqjztNj\n\tupccyNP\n\t\t\tQg\n\t\t\t\tXpZDidM\n\toJMQQWMRb\n\t\t\t\t\tzg\n\t\tsLknoknEP\n\t\tayRRHr\n\t\t\t\t\toFnagwmA\n\t\t\t\t\tKg\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tMHbNgzB\nhT\n\t\tSBzao\nZLnfVv\n\tAoRxgT\n\t\t\tF\n\t\tkZVYl\n\tMPM\n') == 0\nassert solution.lengthLongestPath('\t\t\t\t\tDBpp\n\t\t\txoSNGehbUI\n\t\t\tFLEK\nhW\n\t\tqaol\n\t\t\tGnzAVGxct\n\t\t\t\t\tSQBL\ne\n') == 0\nassert solution.lengthLongestPath('\t\tP\nq\n\t\teUX\n\t\t\t\t\tSLwgCzEz\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tCITgs\n\t\tTM\n\tiTNzeLbDCO\n\tYLQzBqwjil\nwIgUS\n\t\t\t\t\tJatUAQhnL\n\tebZF\nn\n\t\t\t\toUOGHWDy\n') == 0\nassert solution.lengthLongestPath('FOVakTQVdN\n\t\t\tStP\n\t\t\t\t\tOinQXps\n\t\tyZlpA\n\t\t\tP\n') == 0\nassert solution.lengthLongestPath('\t\tOrtkoDRt\n\t\t\t\tArcwd\n\t\t\t\t\tu\n') == 0\nassert solution.lengthLongestPath('\t\t\tsVPUIbt\n\twMxuFFqKR\n') == 0\nassert solution.lengthLongestPath('\t\t\t\tXSL\n') == 0\nassert solution.lengthLongestPath('McbwiLNqru\n\t\t\t\t\tTIU\n\t\t\t\t\tpNBmt\nb\n\t\tN\nrXDDkpZ\n\t\t\t\t\tS\n') == 0\nassert solution.lengthLongestPath('\t\t\tFTR\nl\n\t\t\t\t\txpzlHvkqVY\n\t\tqtP\n\t\t\t\t\toykAa\n') == 0",
  "inefficient_solution": "class Solution:\n    def lengthLongestPath(self, input: str) -> int:\n        path = input.split('\\n')\n        ans = 0\n        for line in path:\n            if line:\n                ident = line.count('\\t')\n                cur, isFile = 0, False\n                for c in line:\n                    if c == '.':\n                        isFile = True\n                    cur += 1\n                path.append('\\t' * ident + line)\n                if not isFile:\n                    path.append('\\t' * (ident + 1))\n        for line in path:\n            if line.endswith('.'):\n                ans = max(ans, len(line.split('\\t')[-1]))\n        return ans",
  "is_python": true
}