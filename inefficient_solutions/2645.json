{
  "problem_idx": 2645,
  "task_name": "Minimum Additions to Make Valid String",
  "markdown_description": "\nGiven a string `word` to which you can insert letters \"a\", \"b\" or \"c\" anywhere and any number of times, return *the minimum number of letters that must be inserted so that `word` becomes **valid**.*\n\n\nA string is called **valid** if it can be formed by concatenating the string \"abc\" several times.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word = \"b\"\n**Output:** 2\n**Explanation:** Insert the letter \"a\" right before \"b\", and the letter \"c\" right next to \"a\" to obtain the valid string \"**a**b**c**\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word = \"aaa\"\n**Output:** 6\n**Explanation:** Insert letters \"b\" and \"c\" next to each \"a\" to obtain the valid string \"a**bc**a**bc**a**bc**\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word = \"abc\"\n**Output:** 0\n**Explanation:** word is already valid. No modifications are needed. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word.length <= 50`\n* `word` consists of letters \"a\", \"b\"\u00a0and \"c\" only.\n\n\n",
  "canonical_solution": "class Solution:\n    def addMinimum(self, word: str) -> int:\n        s = 'abc'\n        ans, n = 0, len(word)\n        i = j = 0\n        while j < n:\n            if word[j] != s[i]:\n                ans += 1\n            else:\n                j += 1\n            i = (i + 1) % 3\n        if word[-1] != 'c':\n            ans += 1 if word[-1] == 'b' else 2\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def addMinimum(self, word: str) -> int:\n        s = 'abc'\n        ans, n = 0, len(word)\n        i = j = 0\n        while j < n:\n            if word[j] != s[i]:\n                ans += 1\n            else:\n                j += 1\n            i = (i + 1) % 3\n        if word[-1] != 'c':\n            ans += 1 if word[-1] == 'b' else 2\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random word\n    word = ''.join(random.choices(['a', 'b', 'c'], k=random.randint(1, 50)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.addMinimum(word)\n\n    return word, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.addMinimum(word) == expected_result\n        print(f\"assert solution.addMinimum('{word}') == {expected_result}\") \n        test_case_generator_results.append(f\"assert solution.addMinimum('{word}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.addMinimum('baccccbabacbcbb') == 18\nassert solution.addMinimum('aabaccbcbbcaacbaababacbbaab') == 27\nassert solution.addMinimum('acabcabacccbbccacaaaaaaca') == 26\nassert solution.addMinimum('bcbacbccabbbbcabcaccc') == 18\nassert solution.addMinimum('abacbcababc') == 4\nassert solution.addMinimum('ccabccccacbbcabbbacaabbcacababacbbccbcbbabcacbbc') == 42\nassert solution.addMinimum('cbbcbacabcaabbcaaacccccbaaaccaaccbaccacbbbccbcca') == 57\nassert solution.addMinimum('aacaacbbcaccccacaabac') == 21\nassert solution.addMinimum('ccbbbababbabcbbb') == 20\nassert solution.addMinimum('acbbbccaabacbccabbbacbbcabcccacabbabc') == 32\nassert solution.addMinimum('cbaabcccacc') == 13\nassert solution.addMinimum('caccbacccaacaac') == 18\nassert solution.addMinimum('abbaaaacabbbba') == 19\nassert solution.addMinimum('cacacabcbbacbbbcacbaacbbacbacbc') == 29\nassert solution.addMinimum('cbaacacbaccabccacacccababbbbcaccccb') == 37\nassert solution.addMinimum('ccbaccabbaabbabbacccababcbcbacabbbbcaccb') == 41\nassert solution.addMinimum('bacabbabaababbaacaacccaabbabccccbcababbcacc') == 41\nassert solution.addMinimum('aaabcbccacbaabbacbbbbbaacbcaaaabbacabaa') == 45\nassert solution.addMinimum('bcabacabababcccaaaaa') == 19\nassert solution.addMinimum('bbacbbcbbacccbbbbabcacaccaacbbcbbcbaacacb') == 46\nassert solution.addMinimum('abacabbacabbcccbaabbbaabccbcaabcbacacbbbbcaba') == 42\nassert solution.addMinimum('bcabbbbacaaba') == 14\nassert solution.addMinimum('abbcbabcbbcaccabacbbbabacaacacbcbccbaacababa') == 37\nassert solution.addMinimum('abbabbaacaaaacccacaaca') == 26\nassert solution.addMinimum('aaaa') == 8\nassert solution.addMinimum('baacabaacbabcb') == 13\nassert solution.addMinimum('ccbaccccca') == 17\nassert solution.addMinimum('bbcacbbbcabab') == 11\nassert solution.addMinimum('cbaabaabacac') == 12\nassert solution.addMinimum('bbc') == 3\nassert solution.addMinimum('abccbcacaccccacacaaabccabbabaac') == 26\nassert solution.addMinimum('acbcabcabc') == 2\nassert solution.addMinimum('accabacbabbcaaabcbabbbbbaacbbaacabcc') == 36\nassert solution.addMinimum('aacabaaac') == 9\nassert solution.addMinimum('acabbcbbcbaabbcbabbbcccacb') == 25\nassert solution.addMinimum('abbcaabccbcabbacccccb') == 21\nassert solution.addMinimum('acbaccaaabbbcbbccccbaccaccbaacbabaaab') == 44\nassert solution.addMinimum('bcacccbbbbbcababcbcc') == 19\nassert solution.addMinimum('ccccacbbcbbaccccabbccabccaaccbbcacbcbcabaabcb') == 45\nassert solution.addMinimum('baaccaa') == 11\nassert solution.addMinimum('bcaacbbbacabaacababbbaccabbca') == 28\nassert solution.addMinimum('aabacacaaaba') == 12\nassert solution.addMinimum('cbbaaabccbbacbb') == 21\nassert solution.addMinimum('aaabcababbbccbbcaacbbbcaa') == 26\nassert solution.addMinimum('cbcaacccbbcbbcbcacbbbcbccacaaabccaac') == 36\nassert solution.addMinimum('abbaaacbcacbbcabcbbcbc') == 17\nassert solution.addMinimum('bcccbaaabbbbabbbbbbbbbcabbaccbbaccccbbacc') == 58\nassert solution.addMinimum('bbbbbbcccbcacbacbabbcacabbabba') == 33\nassert solution.addMinimum('ccacbccbabbaaacbbacabacbcabacba') == 32\nassert solution.addMinimum('cbabbbcbaaccacbaccbbb') == 27\nassert solution.addMinimum('bbacccbcbbacbccbbacbbacccccaabbcbcbccabc') == 44\nassert solution.addMinimum('abbcacaaaaccbabbcbbbaacccbbbaabcbba') == 43\nassert solution.addMinimum('ccbbabababbbbbcacccbcab') == 25\nassert solution.addMinimum('ababcbbbcbbac') == 11\nassert solution.addMinimum('bbcc') == 5\nassert solution.addMinimum('cbaabcccaccbccbaccbbcaacacbbcaacbcccaacb') == 44\nassert solution.addMinimum('bbcacccacbcbacababcababccacbacabbbcbbcccc') == 34\nassert solution.addMinimum('acbbbcaaabbcbabbaacbabbbabcbaacacbcb') == 36\nassert solution.addMinimum('bbbb') == 8\nassert solution.addMinimum('aacabbabacbcbcccbaccbbbaccb') == 30\nassert solution.addMinimum('accaccbbcbcacbabcbcbacabcccbbccaabacaaaccc') == 39\nassert solution.addMinimum('abcbbabbacccbacabacabacabcbbaccaccba') == 33\nassert solution.addMinimum('abcbccaccbababbabcaabaccaaaabcccaaccaacacaa') == 41\nassert solution.addMinimum('bcababbabbacbbacbbaacbbcbaa') == 30\nassert solution.addMinimum('cbbbcababcacbbcbcacaacbacbbaaccacbabaaacbcbacac') == 43\nassert solution.addMinimum('cbbaa') == 10\nassert solution.addMinimum('ababcbbabbcbbbb') == 15\nassert solution.addMinimum('bcacbbbbaac') == 13\nassert solution.addMinimum('acbcbcbbccbbba') == 16\nassert solution.addMinimum('bbaaabaabbcbccaacbbaabacbccbabaaacbacaacababbb') == 50\nassert solution.addMinimum('cbcaccaacbcbaaccaaaccbcbbcaaabbaabbbbcabaacbaab') == 52\nassert solution.addMinimum('abacaaabbcbacaabaaccaacaabbccbcbabbbbacbabbacacbb') == 50\nassert solution.addMinimum('cbcaacbbabaaabbcabcabababab') == 21\nassert solution.addMinimum('acccabbbacbccaaabbabacaaaabcbbcacaabcbbbcacbaab') == 46\nassert solution.addMinimum('a') == 2\nassert solution.addMinimum('cccbccbbaaaabccaccaaccaabaaacbacbcacba') == 46\nassert solution.addMinimum('bbbbaaacbbcbcacbacaccbccbbbccb') == 36\nassert solution.addMinimum('aacc') == 5\nassert solution.addMinimum('ccbaabccabc') == 10\nassert solution.addMinimum('aacbccaacaccabacbcaccccbcaaaabbcbaacc') == 38\nassert solution.addMinimum('ababbcabacc') == 7\nassert solution.addMinimum('baabccacbbbcbcbbcbcaaabcacbcbcabacbbbcbcb') == 34\nassert solution.addMinimum('aabcaaabcab') == 7\nassert solution.addMinimum('ccacbcbaba') == 11\nassert solution.addMinimum('bcaccbccbabccbcabbcaaabacaacbbbcabbccacbbaababc') == 40\nassert solution.addMinimum('ccbaaacbacb') == 16\nassert solution.addMinimum('cccbcb') == 9\nassert solution.addMinimum('acbb') == 5\nassert solution.addMinimum('bacbcccacbcaaacbbccb') == 22\nassert solution.addMinimum('bcacc') == 4\nassert solution.addMinimum('cbaccababcaccacbabcabacaabbbacc') == 26\nassert solution.addMinimum('cabbac') == 6\nassert solution.addMinimum('bbaabbcababacbcccba') == 20\nassert solution.addMinimum('bbbabccbcbcbbbcacbbbaabccabaabcaccbbcaacbbbcbabaa') == 50\nassert solution.addMinimum('cabacccacababcacbbbb') == 19\nassert solution.addMinimum('cccbca') == 9\nassert solution.addMinimum('aacbcbaba') == 9\nassert solution.addMinimum('bbcabaaaccabcbcbbaa') == 20\nassert solution.addMinimum('babbabbcaccabbcabcbcccacbbbcbcbc') == 25\nassert solution.addMinimum('bca') == 3",
  "inefficient_solution": "class Solution:\n    def addMinimum(self, word: str) -> int:\n        s = 'abc'\n        ans = 0\n        n = len(word)\n        for i in range(n):\n            for letter in s:\n                if word[i] == letter:\n                    break\n            else:\n                ans += 1\n            for j in range(i, n):\n                if word[j] == s[(i + 1) % 3]:\n                    i = j\n                    break\n        for i in range(n - 1, -1, -1):\n            if word[i] != 'c':\n                break\n        if i < 0:\n            i = n\n        ans += (i - n) // 3 + 1\n        return ans",
  "is_python": true
}