{
  "problem_idx": 350,
  "task_name": "Intersection of Two Arrays II",
  "markdown_description": "\nGiven two integer arrays `nums1` and `nums2`, return *an array of their intersection*. Each element in the result must appear as many times as it shows in both arrays and you may return the result in **any order**.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums1 = [1,2,2,1], nums2 = [2,2]\n**Output:** [2,2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n**Output:** [4,9]\n**Explanation:** [9,4] is also accepted.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums1.length, nums2.length <= 1000`\n* `0 <= nums1[i], nums2[i] <= 1000`\n\n\n\u00a0\n\n\n**Follow up:**\n\n\n* What if the given array is already sorted? How would you optimize your algorithm?\n* What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?\n* What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n\n",
  "canonical_solution": "class Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        counter = Counter(nums1)\n        res = []\n        for num in nums2:\n            if counter[num] > 0:\n                res.append(num)\n                counter[num] -= 1\n        return res\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def intersect(self, nums1, nums2):\n        counter = Counter(nums1)\n        res = []\n        for num in nums2:\n            if counter[num] > 0:\n                res.append(num)\n                counter[num] -= 1\n        return res\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers lists\n    nums1 = random.sample(range(1, 101), random.randint(2, 10))\n    nums2 = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.intersect(nums1, nums2)\n\n    return nums1, nums2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums1, nums2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.intersect(nums1, nums2) == expected_result\n        print(f\"assert solution.intersect({nums1}, {nums2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.intersect({nums1}, {nums2}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.intersect([5, 13, 59, 82, 92, 43], [32, 30, 60, 90, 49, 16, 43, 85, 55]) == [43]\nassert solution.intersect([44, 80, 50, 89, 83, 28, 78, 94, 95], [69, 64, 15, 41, 67, 89]) == [89]\nassert solution.intersect([86, 90], [53, 59, 7, 68, 16, 48, 35, 14, 56]) == []\nassert solution.intersect([37, 61, 94, 87, 6, 40], [26, 87, 48, 72, 81, 74]) == [87]\nassert solution.intersect([17, 65], [3, 48]) == []\nassert solution.intersect([31, 27, 16, 2, 53, 12], [41, 50, 44, 37, 91, 85, 84, 43]) == []\nassert solution.intersect([68, 93, 96, 49, 58, 27, 39], [6, 71, 95, 21, 18, 85, 22, 20, 75]) == []\nassert solution.intersect([11, 52, 75, 59, 86], [53, 12, 35]) == []\nassert solution.intersect([30, 50], [15, 97, 81, 30]) == [30]\nassert solution.intersect([10, 53, 21, 96, 42], [46, 52, 34]) == []\nassert solution.intersect([6, 40, 56, 14, 68, 49, 7], [86, 52, 84, 72, 31, 16, 5, 37]) == []\nassert solution.intersect([51, 82, 4], [7, 72, 51, 47, 94]) == [51]\nassert solution.intersect([80, 63, 18, 52, 36, 97, 5, 22], [77, 38, 82, 66]) == []\nassert solution.intersect([34, 86, 39, 35, 27, 75, 42, 7, 73], [73, 33, 64, 17, 80]) == [73]\nassert solution.intersect([80, 2, 9, 14, 97, 88], [26, 96, 66, 69]) == []\nassert solution.intersect([94, 57, 45], [55, 1, 4, 81, 53, 98, 82, 3, 63, 41]) == []\nassert solution.intersect([39, 75, 71, 45, 99, 22], [54, 80, 70, 46, 17]) == []\nassert solution.intersect([24, 22, 67, 46, 52, 8, 41, 80], [9, 55, 51, 12, 81, 33, 92, 30]) == []\nassert solution.intersect([36, 10, 92, 33, 39, 21, 62], [30, 72, 77, 50, 61, 58]) == []\nassert solution.intersect([28, 43, 10], [68, 2]) == []\nassert solution.intersect([60, 83, 1], [32, 36, 23]) == []\nassert solution.intersect([99, 70, 26, 15, 68], [21, 46, 98, 17, 18, 50]) == []\nassert solution.intersect([39, 29, 54, 27, 90, 25, 69, 21, 86], [64, 76, 90, 65, 23, 91, 17, 78, 72, 32]) == [90]\nassert solution.intersect([26, 50, 91, 49, 73, 97, 36, 20], [23, 9, 85, 65, 76, 44]) == []\nassert solution.intersect([88, 58, 65, 15, 39], [11, 87, 34, 69, 57, 52, 81]) == []\nassert solution.intersect([70, 51], [91, 97]) == []\nassert solution.intersect([73, 100], [25, 72, 53, 2, 49, 77, 46, 39, 78, 18]) == []\nassert solution.intersect([67, 17, 56, 15], [35, 50, 11, 72, 12, 78, 38, 25, 41, 92]) == []\nassert solution.intersect([14, 66, 97, 16, 23, 99, 60, 13, 85], [86, 53, 82, 65, 26, 76, 87, 35, 5, 75]) == []\nassert solution.intersect([55, 28], [88, 3, 77, 96, 18, 12, 49, 42, 83]) == []\nassert solution.intersect([42, 68, 26, 36], [68, 1, 100, 17, 12, 46, 26]) == [68, 26]\nassert solution.intersect([21, 96, 85, 26, 55], [71, 24, 4]) == []\nassert solution.intersect([24, 40, 83, 95, 97, 69, 33], [54, 55, 46]) == []\nassert solution.intersect([72, 6, 66, 52, 49], [75, 90, 6]) == [6]\nassert solution.intersect([41, 17, 66, 100, 98, 58, 29, 88, 45], [17, 20, 25]) == [17]\nassert solution.intersect([46, 92, 68, 72, 56, 78, 100, 37, 74], [31, 44, 74, 99, 29, 98, 43, 2, 11, 18]) == [74]\nassert solution.intersect([78, 2, 100], [61, 100, 64, 2, 9]) == [100, 2]\nassert solution.intersect([81, 38, 13, 94, 93, 71, 57, 84, 88], [61, 24, 85, 63, 57, 77]) == [57]\nassert solution.intersect([66, 82], [84, 65, 79]) == []\nassert solution.intersect([24, 51, 94, 10, 25, 93, 36, 32, 86, 71], [76, 25, 55, 95, 8]) == [25]\nassert solution.intersect([5, 37], [76, 82, 16, 100, 31, 75, 87, 8, 54]) == []\nassert solution.intersect([26, 14, 99, 5, 77, 47, 22, 86, 88, 49], [73, 11, 99, 33, 26]) == [99, 26]\nassert solution.intersect([13, 4, 17, 52, 87], [54, 49]) == []\nassert solution.intersect([31, 32, 45, 19, 37, 76, 63, 42, 100, 41], [40, 90, 13, 1, 55, 63, 26, 34]) == [63]\nassert solution.intersect([73, 88], [59, 92, 15, 68, 50, 40, 10]) == []\nassert solution.intersect([14, 19, 16, 17, 11, 1, 68, 81, 52, 46], [76, 65]) == []\nassert solution.intersect([15, 34, 77, 95, 31, 48, 13, 32, 90], [53, 14, 42, 57, 64]) == []\nassert solution.intersect([95, 64, 37], [47, 43, 19]) == []\nassert solution.intersect([60, 9, 93, 6, 88, 32], [73, 62, 53]) == []\nassert solution.intersect([76, 90, 91, 5, 9, 99, 35], [11, 46, 64, 99]) == [99]\nassert solution.intersect([7, 51, 48, 92, 86], [70, 51, 89, 23]) == [51]\nassert solution.intersect([43, 89, 71, 98, 73], [58, 63, 29, 52, 25, 12, 68, 61]) == []\nassert solution.intersect([5, 67, 17, 45], [4, 58, 77, 73, 99, 95, 34, 68, 42, 94]) == []\nassert solution.intersect([90, 24, 84, 75, 51, 73, 81, 74, 17], [22, 73, 81, 29, 83, 12]) == [73, 81]\nassert solution.intersect([41, 62, 89], [25, 62, 82, 47, 65, 2, 78, 40, 4, 35]) == [62]\nassert solution.intersect([61, 72, 38, 76, 67, 60, 26, 74], [63, 57, 35]) == []\nassert solution.intersect([4, 44, 12, 32, 89, 77, 98, 8, 70, 40], [70, 25, 68, 22]) == [70]\nassert solution.intersect([56, 5, 28, 90, 92], [71, 14, 19, 16, 70]) == []\nassert solution.intersect([81, 36, 26, 22, 14, 59, 10], [71, 99, 2, 37]) == []\nassert solution.intersect([74, 32, 38], [98, 76, 87]) == []\nassert solution.intersect([92, 5, 32, 13, 48, 24, 90, 76, 17], [89, 22, 95, 8, 87, 76, 4, 86, 66]) == [76]\nassert solution.intersect([44, 32, 6, 70], [50, 58, 9, 86, 33, 37, 44, 64]) == [44]\nassert solution.intersect([79, 55], [82, 73, 2, 99, 60, 1, 25, 74, 44]) == []\nassert solution.intersect([55, 14, 3, 39, 79, 71, 88, 35, 8], [95, 38, 2, 92, 82, 46]) == []\nassert solution.intersect([96, 80, 69, 72, 88, 47], [42, 92, 59, 80]) == [80]\nassert solution.intersect([52, 100], [77, 36, 6, 97, 88, 83, 72, 33]) == []\nassert solution.intersect([91, 24, 99, 58, 97, 51], [4, 80, 83, 18, 93]) == []\nassert solution.intersect([14, 2, 45, 29, 61, 80], [86, 37]) == []\nassert solution.intersect([27, 52, 8, 39], [86, 62, 45, 99, 60]) == []\nassert solution.intersect([6, 91, 78, 83], [76, 73, 42, 85, 100, 53, 88, 82, 69]) == []\nassert solution.intersect([3, 24], [95, 40, 31]) == []\nassert solution.intersect([76, 21, 100, 45, 93, 13, 48, 3], [66, 75, 97, 37, 4, 78, 25, 45]) == [45]\nassert solution.intersect([63, 31, 24, 91], [36, 92, 46, 19]) == []\nassert solution.intersect([46, 54, 70], [64, 5, 3, 54, 94, 4]) == [54]\nassert solution.intersect([40, 44, 90, 26, 83, 51], [34, 2, 26, 62, 22, 37, 21, 99]) == [26]\nassert solution.intersect([61, 100, 47], [47, 18, 29, 8, 75, 33]) == [47]\nassert solution.intersect([47, 9, 35, 20], [42, 84, 10]) == []\nassert solution.intersect([50, 21, 91, 37, 99, 2, 47, 61], [68, 60, 73, 43]) == []\nassert solution.intersect([76, 66, 5, 28, 95, 20, 18, 69], [20, 97, 13, 81, 71, 27, 19]) == [20]\nassert solution.intersect([31, 71, 41, 50, 77, 57, 96, 22], [86, 43, 11, 73, 77, 24, 64]) == [77]\nassert solution.intersect([48, 81, 59, 85, 41, 44, 23, 37, 88], [46, 32]) == []\nassert solution.intersect([53, 57, 87, 22, 26, 40, 83, 48, 18], [39, 60, 97, 57, 80, 36, 93, 1]) == [57]\nassert solution.intersect([54, 79], [51, 56, 90, 16, 78, 63, 25, 72]) == []\nassert solution.intersect([38, 92, 61, 12], [39, 7, 21]) == []\nassert solution.intersect([2, 78, 79, 6, 1, 33], [34, 79]) == [79]\nassert solution.intersect([36, 11, 51, 96, 42, 31, 55], [72, 78, 20]) == []\nassert solution.intersect([75, 73, 19, 35], [19, 79, 20, 76, 25, 34, 89, 13, 28, 33]) == [19]\nassert solution.intersect([87, 77, 81, 5, 6, 22, 46, 65, 7, 29], [4, 16, 52, 94, 29, 55]) == [29]\nassert solution.intersect([35, 97, 65, 93, 29, 47], [57, 53, 50, 19]) == []\nassert solution.intersect([20, 84, 56, 63, 12, 92], [42, 15, 80, 32, 79, 95]) == []\nassert solution.intersect([15, 28], [19, 86, 74, 98, 10, 31, 84, 6, 66]) == []\nassert solution.intersect([99, 17, 2, 45, 18], [57, 52, 83, 53, 76, 46, 56, 84, 8]) == []\nassert solution.intersect([77, 46], [37, 10, 99, 2, 43, 96, 50, 55]) == []\nassert solution.intersect([89, 6], [38, 59]) == []\nassert solution.intersect([23, 28], [13, 67, 37, 18, 17, 64, 96, 89]) == []\nassert solution.intersect([67, 14, 2], [30, 46, 52, 11, 3, 4, 74, 21]) == []\nassert solution.intersect([3, 56, 78, 28, 73, 2, 43], [8, 12, 44, 91, 82, 84]) == []\nassert solution.intersect([57, 20, 35], [73, 8, 80, 21, 98, 67, 85]) == []\nassert solution.intersect([84, 22, 97, 75, 4, 100, 66, 2, 79, 62], [69, 61, 38, 98, 24, 99, 35]) == []\nassert solution.intersect([60, 80, 32], [19, 62, 39]) == []",
  "inefficient_solution": "from collections import Counter\nfrom typing import List\n\nclass Solution:\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        counter = Counter(nums1)\n        res = []\n        for num in nums2:\n            if counter[num] > 0:\n                temp = []\n                for _ in range(counter[num]):\n                    temp.append(num)\n                res.extend(temp)\n                counter[num] = -1\n        return res",
  "is_python": true
}