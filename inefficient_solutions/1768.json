{
  "problem_idx": 1768,
  "task_name": "Merge Strings Alternately",
  "markdown_description": "\nYou are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.\n\n\nReturn *the merged string.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word1 = \"abc\", word2 = \"pqr\"\n**Output:** \"apbqcr\"\n**Explanation:**\u00a0The merged string will be merged as so:\nword1:  a   b   c\nword2:    p   q   r\nmerged: a p b q c r\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word1 = \"ab\", word2 = \"pqrs\"\n**Output:** \"apbqrs\"\n**Explanation:**\u00a0Notice that as word2 is longer, \"rs\" is appended to the end.\nword1:  a   b \nword2:    p   q   r   s\nmerged: a p b q   r   s\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word1 = \"abcd\", word2 = \"pq\"\n**Output:** \"apbqcd\"\n**Explanation:**\u00a0Notice that as word1 is longer, \"cd\" is appended to the end.\nword1:  a   b   c   d\nword2:    p   q \nmerged: a p b q c   d\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word1.length, word2.length <= 100`\n* `word1` and `word2` consist of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        return ''.join(a + b for a, b in zip_longest(word1, word2, fillvalue=''))\n",
  "test_case_generator": "\nimport random\nfrom itertools import zip_longest\n\nclass Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        return ''.join(a + b for a, b in zip_longest(word1, word2, fillvalue=''))\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random strings\n    word1 = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n    word2 = ''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.mergeAlternately(word1, word2)\n\n    return word1, word2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word1, word2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.mergeAlternately(word1, word2) == expected_result\n        print(f\"assert solution.mergeAlternately('{word1}', '{word2}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.mergeAlternately('{word1}', '{word2}') == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.mergeAlternately('zimzalecjs', 'ilkkcobx') == 'ziilmkzkacloebcxjs'\nassert solution.mergeAlternately('jm', 'qwuwxl') == 'jqmwuwxl'\nassert solution.mergeAlternately('zluyexlblz', 'ujskjwhvgg') == 'zuljusykejxwlhbvlgzg'\nassert solution.mergeAlternately('dywcwb', 'yzvcvuqenu') == 'dyyzwvccwvbuqenu'\nassert solution.mergeAlternately('xfhmvr', 'rhmlwogcws') == 'xrfhhmmlvwrogcws'\nassert solution.mergeAlternately('gcc', 'ymdbcrd') == 'gycmcdbcrd'\nassert solution.mergeAlternately('fhll', 'dqfmredcm') == 'fdhqlflmredcm'\nassert solution.mergeAlternately('blnqbiryaa', 'el') == 'bellnqbiryaa'\nassert solution.mergeAlternately('muiemp', 'fkzrv') == 'mfukizermvp'\nassert solution.mergeAlternately('qomgdtwbz', 'zgxbqmg') == 'qzogmxgbdqtmwgbz'\nassert solution.mergeAlternately('hfgg', 'dxzksv') == 'hdfxgzgksv'\nassert solution.mergeAlternately('p', 'mxr') == 'pmxr'\nassert solution.mergeAlternately('t', 'qmn') == 'tqmn'\nassert solution.mergeAlternately('sjqm', 'byyabg') == 'sbjyqymabg'\nassert solution.mergeAlternately('xmvgj', 'pkaakww') == 'xpmkvagajkww'\nassert solution.mergeAlternately('agzeocch', 'pq') == 'apgqzeocch'\nassert solution.mergeAlternately('l', 'qalwefjuk') == 'lqalwefjuk'\nassert solution.mergeAlternately('jvhwjbzjnc', 'ye') == 'jyvehwjbzjnc'\nassert solution.mergeAlternately('mirsmvkro', 'dgwpdj') == 'mdigrwspmdvjkro'\nassert solution.mergeAlternately('azypcm', 'oan') == 'aozaynpcm'\nassert solution.mergeAlternately('zpjthq', 'gjwfxm') == 'zgpjjwtfhxqm'\nassert solution.mergeAlternately('ezsgskl', 'a') == 'eazsgskl'\nassert solution.mergeAlternately('ms', 'by') == 'mbsy'\nassert solution.mergeAlternately('neewoxn', 'dsfrmwoggf') == 'ndesefwromxwnoggf'\nassert solution.mergeAlternately('xhvx', 'eh') == 'xehhvx'\nassert solution.mergeAlternately('jkbrwrci', 'wwrvi') == 'jwkwbrrvwirci'\nassert solution.mergeAlternately('znv', 'kfotwrtn') == 'zknfvotwrtn'\nassert solution.mergeAlternately('obxlfckm', 'yatfvyws') == 'oybaxtlffvcykwms'\nassert solution.mergeAlternately('u', 'ylq') == 'uylq'\nassert solution.mergeAlternately('wwxlft', 'qlstlrvej') == 'wqwlxsltfltrvej'\nassert solution.mergeAlternately('skqvnky', 'tggggnkp') == 'stkgqgvgngknykp'\nassert solution.mergeAlternately('mecnr', 'eaw') == 'meeacwnr'\nassert solution.mergeAlternately('idw', 'ixplwhrlz') == 'iidxwplwhrlz'\nassert solution.mergeAlternately('yofskgvfwd', 'kkarzkan') == 'ykokfasrkzgkvafnwd'\nassert solution.mergeAlternately('nale', 'yyxlmgl') == 'nyaylxelmgl'\nassert solution.mergeAlternately('glsrfu', 'omosehw') == 'golmsorsfeuhw'\nassert solution.mergeAlternately('fdsn', 'eyke') == 'fedyskne'\nassert solution.mergeAlternately('w', 's') == 'ws'\nassert solution.mergeAlternately('olhs', 'icagruhik') == 'oilchasgruhik'\nassert solution.mergeAlternately('nirn', 'sveihlveow') == 'nsivrenihlveow'\nassert solution.mergeAlternately('dkqeoisq', 'dtfa') == 'ddktqfeaoisq'\nassert solution.mergeAlternately('e', 'gayxxlcy') == 'egayxxlcy'\nassert solution.mergeAlternately('mia', 'lfvm') == 'mlifavm'\nassert solution.mergeAlternately('e', 'bczhk') == 'ebczhk'\nassert solution.mergeAlternately('axfof', 'ryz') == 'arxyfzof'\nassert solution.mergeAlternately('hdlfynm', 'sfdtusich') == 'hsdfldftyunsmich'\nassert solution.mergeAlternately('twy', 'iqpotltga') == 'tiwqypotltga'\nassert solution.mergeAlternately('lm', 'yw') == 'lymw'\nassert solution.mergeAlternately('ws', 'upxvxlasvu') == 'wuspxvxlasvu'\nassert solution.mergeAlternately('nhqhqfvjkr', 'zkwylfq') == 'nzhkqwhyqlffvqjkr'\nassert solution.mergeAlternately('vffl', 'fvjv') == 'vffvfjlv'\nassert solution.mergeAlternately('zyr', 'zkuyth') == 'zzykruyth'\nassert solution.mergeAlternately('vcqlnarkx', 'qshgyuwqrp') == 'vqcsqhlgnyaurwkqxrp'\nassert solution.mergeAlternately('bgvhps', 'pdqwgoclm') == 'bpgdvqhwpgsoclm'\nassert solution.mergeAlternately('gkm', 'bg') == 'gbkgm'\nassert solution.mergeAlternately('zgvhqkheb', 'ytsgyun') == 'zygtvshgqykuhneb'\nassert solution.mergeAlternately('rwwz', 'rraii') == 'rrwrwazii'\nassert solution.mergeAlternately('hauckdh', 'isto') == 'hiasutcokdh'\nassert solution.mergeAlternately('o', 'ft') == 'oft'\nassert solution.mergeAlternately('gfu', 'loguobrbl') == 'glfouguobrbl'\nassert solution.mergeAlternately('vnqrcxxkhi', 'ofthkczkea') == 'vonfqtrhckxcxzkkheia'\nassert solution.mergeAlternately('ampkorio', 'beyrer') == 'abmepykroerrio'\nassert solution.mergeAlternately('wqgoew', 'xfv') == 'wxqfgvoew'\nassert solution.mergeAlternately('ax', 'cvbgkugdl') == 'acxvbgkugdl'\nassert solution.mergeAlternately('kdhsvy', 'txejy') == 'ktdxhesjvyy'\nassert solution.mergeAlternately('plkrxus', 'awwl') == 'palwkwrlxus'\nassert solution.mergeAlternately('vwgxoxp', 'rkwcrhk') == 'vrwkgwxcorxhpk'\nassert solution.mergeAlternately('l', 'mrejthf') == 'lmrejthf'\nassert solution.mergeAlternately('tnmlpln', 'slekejt') == 'tsnlmelkpeljnt'\nassert solution.mergeAlternately('gx', 'kaqnjqmpxn') == 'gkxaqnjqmpxn'\nassert solution.mergeAlternately('nqa', 'i') == 'niqa'\nassert solution.mergeAlternately('deowmq', 't') == 'dteowmq'\nassert solution.mergeAlternately('puaxvx', 'wuvfoopbj') == 'pwuuavxfvoxopbj'\nassert solution.mergeAlternately('wa', 'qzwy') == 'wqazwy'\nassert solution.mergeAlternately('vn', 'qxlmzckx') == 'vqnxlmzckx'\nassert solution.mergeAlternately('ohrwmrcnu', 'hobhrgz') == 'ohhorbwhmrrgcznu'\nassert solution.mergeAlternately('t', 'sk') == 'tsk'\nassert solution.mergeAlternately('xxld', 'oyeoud') == 'xoxyledoud'\nassert solution.mergeAlternately('oybew', 'kwoprivoiu') == 'okywboepwrivoiu'\nassert solution.mergeAlternately('r', 'r') == 'rr'\nassert solution.mergeAlternately('qoizqpb', 'oyzrrb') == 'qooyizzrqrpbb'\nassert solution.mergeAlternately('pxgtoxqhb', 'wu') == 'pwxugtoxqhb'\nassert solution.mergeAlternately('imjdlnpai', 'o') == 'iomjdlnpai'\nassert solution.mergeAlternately('f', 'lpwkunym') == 'flpwkunym'\nassert solution.mergeAlternately('xsdpkjsnti', 'oro') == 'xosrdopkjsnti'\nassert solution.mergeAlternately('nci', 'kpqzipj') == 'nkcpiqzipj'\nassert solution.mergeAlternately('prybulyk', 'jbgnx') == 'pjrbygbnuxlyk'\nassert solution.mergeAlternately('akvr', 'p') == 'apkvr'\nassert solution.mergeAlternately('babquas', 'jnb') == 'bjanbbquas'\nassert solution.mergeAlternately('duwijokv', 'xav') == 'dxuawvijokv'\nassert solution.mergeAlternately('wpgqph', 'iimilgajsu') == 'wipigmqiplhgajsu'\nassert solution.mergeAlternately('ruquldmit', 'ucnhsy') == 'ruucqnuhlsdymit'\nassert solution.mergeAlternately('sexnmzfas', 'lwmgnt') == 'slewxmngmnztfas'\nassert solution.mergeAlternately('nenuk', 'mdvs') == 'nmednvusk'\nassert solution.mergeAlternately('j', 'o') == 'jo'\nassert solution.mergeAlternately('tts', 'ziudcbm') == 'tztisudcbm'\nassert solution.mergeAlternately('pilbgx', 'xafhaykk') == 'pxialfbhgaxykk'\nassert solution.mergeAlternately('cxtdlycr', 'jqew') == 'cjxqtedwlycr'\nassert solution.mergeAlternately('dauzt', 'iqdnrcxici') == 'diaqudzntrcxici'\nassert solution.mergeAlternately('o', 'yhafkd') == 'oyhafkd'",
  "inefficient_solution": "class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        result = []\n        for i in range(max(len(word1), len(word2))):\n            if i < len(word1):\n                result.append(word1[i])\n            if i < len(word2):\n                result.append(word2[i])\n        return ''.join(result)",
  "is_python": true
}