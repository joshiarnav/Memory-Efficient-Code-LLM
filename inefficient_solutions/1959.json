{
  "problem_idx": 1959,
  "task_name": "Minimum Total Space Wasted With K Resizing Operations",
  "markdown_description": "\nYou are currently designing a dynamic array. You are given a **0-indexed** integer array `nums`, where `nums[i]` is the number of elements that will be in the array at time `i`. In addition, you are given an integer `k`, the **maximum** number of times you can **resize** the array (to **any** size).\n\n\nThe size of the array at time `t`, `sizet`, must be at least `nums[t]` because there needs to be enough space in the array to hold all the elements. The **space wasted** at\u00a0time `t` is defined as `sizet - nums[t]`, and the **total** space wasted is the **sum** of the space wasted across every time `t` where `0 <= t < nums.length`.\n\n\nReturn *the **minimum** **total space wasted** if you can resize the array at most* `k` *times*.\n\n\n**Note:** The array can have **any size** at the start and does **not** count towards the number of resizing operations.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [10,20], k = 0\n**Output:** 10\n**Explanation:** size = [20,20].\nWe can set the initial size to be 20.\nThe total wasted space is (20 - 10) + (20 - 20) = 10.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [10,20,30], k = 1\n**Output:** 10\n**Explanation:** size = [20,20,30].\nWe can set the initial size to be 20 and resize to 30 at time 2. \nThe total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [10,20,15,30,20], k = 2\n**Output:** 15\n**Explanation:** size = [10,20,20,30,30].\nWe can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.\nThe total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 200`\n* `1 <= nums[i] <= 106`\n* `0 <= k <= nums.length - 1`\n\n\n",
  "canonical_solution": "class Solution:\n    def minSpaceWastedKResizing(self, nums: List[int], k: int) -> int:\n        k += 1\n        n = len(nums)\n        g = [[0] * n for _ in range(n)]\n        for i in range(n):\n            s = mx = 0\n            for j in range(i, n):\n                s += nums[j]\n                mx = max(mx, nums[j])\n                g[i][j] = mx * (j - i + 1) - s\n        f = [[inf] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                for h in range(i):\n                    f[i][j] = min(f[i][j], f[h][j - 1] + g[h][i - 1])\n        return f[-1][-1]\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minSpaceWastedKResizing(self, nums: List[int], k: int) -> int:\n        k += 1\n        n = len(nums)\n        g = [[0] * n for _ in range(n)]\n        for i in range(n):\n            s = mx = 0\n            for j in range(i, n):\n                s += nums[j]\n                mx = max(mx, nums[j])\n                g[i][j] = mx * (j - i + 1) - s\n        f = [[inf] * (k + 1) for _ in range(n + 1)]\n        f[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                for h in range(i):\n                    f[i][j] = min(f[i][j], f[h][j - 1] + g[h][i - 1])\n        return f[-1][-1]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(1, 1000001), k=random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(0, len(nums)-1)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minSpaceWastedKResizing(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minSpaceWastedKResizing(nums, k) == expected_result\n        print(f\"assert solution.minSpaceWastedKResizing({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minSpaceWastedKResizing({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minSpaceWastedKResizing([154171, 110163, 481944, 506578, 40935, 599871, 521201, 211386, 66829], 5) == 147312\nassert solution.minSpaceWastedKResizing([444823, 970218, 212996, 431585, 629059, 181266], 1) == 1586725\nassert solution.minSpaceWastedKResizing([943399, 57202], 0) == 886197\nassert solution.minSpaceWastedKResizing([630349, 734978, 202313, 371217], 0) == 1001055\nassert solution.minSpaceWastedKResizing([984982, 305333, 439328, 778237, 376474, 190917, 491473], 4) == 319552\nassert solution.minSpaceWastedKResizing([500244, 271104, 685096, 95533, 411814, 480318, 484535, 121688], 1) == 1427631\nassert solution.minSpaceWastedKResizing([822419, 500103, 990397, 471603], 2) == 322316\nassert solution.minSpaceWastedKResizing([622101, 917367, 412767, 989134, 983581, 66100, 989961, 813216], 7) == 0\nassert solution.minSpaceWastedKResizing([884807, 687419], 1) == 0\nassert solution.minSpaceWastedKResizing([369976, 818223], 1) == 0\nassert solution.minSpaceWastedKResizing([792393, 874364, 412216, 278346, 46275, 179483, 799307, 176066], 5) == 215179\nassert solution.minSpaceWastedKResizing([127109, 581285, 401650, 92151, 996415], 4) == 0\nassert solution.minSpaceWastedKResizing([189409, 592080, 347433, 187986, 297427], 3) == 109441\nassert solution.minSpaceWastedKResizing([929315, 734196, 628800, 912703], 1) == 462410\nassert solution.minSpaceWastedKResizing([503270, 235279], 0) == 267991\nassert solution.minSpaceWastedKResizing([521156, 782623, 365449], 1) == 261467\nassert solution.minSpaceWastedKResizing([526235, 454425, 810403, 414325, 900070, 897533, 976204, 626621, 286696, 185743], 0) == 3683785\nassert solution.minSpaceWastedKResizing([460944, 496642, 79629, 934031, 628686, 114013, 279320, 267849, 10938], 8) == 0\nassert solution.minSpaceWastedKResizing([912406, 188980], 0) == 723426\nassert solution.minSpaceWastedKResizing([97486, 76377], 0) == 21109\nassert solution.minSpaceWastedKResizing([901180, 973746, 893458, 679068, 796354, 111481, 324788, 233308], 5) == 152854\nassert solution.minSpaceWastedKResizing([590312, 864402, 715624, 64884, 410615, 704674, 418233, 562019], 2) == 1146023\nassert solution.minSpaceWastedKResizing([636773, 516284, 372249, 964542, 395136, 743753, 814001, 12071, 920418, 332404], 8) == 70248\nassert solution.minSpaceWastedKResizing([823611, 999841, 951735, 45938, 656829, 796952, 477931, 236248, 631192], 2) == 1409944\nassert solution.minSpaceWastedKResizing([913312, 556977, 928721, 306703, 654339, 415484, 517500, 400513], 4) == 489169\nassert solution.minSpaceWastedKResizing([613354, 827833, 187460, 228227, 599803, 64813, 206859, 354040, 787907, 560098], 4) == 919463\nassert solution.minSpaceWastedKResizing([34924, 983360, 541, 713856, 606547, 563520, 718064, 385491, 754108], 5) == 270269\nassert solution.minSpaceWastedKResizing([408411, 779799, 100262, 45983, 829016, 392863, 80458, 84411, 569893, 701217], 9) == 0\nassert solution.minSpaceWastedKResizing([333291, 854286, 96487, 140342, 457531, 531700, 122983, 947869, 143369], 4) == 1047736\nassert solution.minSpaceWastedKResizing([140177, 568578, 670589, 968303, 834735, 128643, 974282, 585383], 3) == 1093176\nassert solution.minSpaceWastedKResizing([945625, 462547, 292142, 145334, 417923, 103070, 493099, 17719], 2) == 1044479\nassert solution.minSpaceWastedKResizing([133986, 571260, 3470, 83777, 819948, 555232], 4) == 80307\nassert solution.minSpaceWastedKResizing([157165, 614519, 236942, 658698, 993948, 657815, 834892, 113658], 6) == 177077\nassert solution.minSpaceWastedKResizing([470812, 449474, 432819, 354196, 908145, 366438, 639134, 178928, 729191, 188177], 8) == 16655\nassert solution.minSpaceWastedKResizing([248927, 774910, 908225, 148460, 164389, 782858, 279028, 538615], 0) == 3420388\nassert solution.minSpaceWastedKResizing([70909, 835411, 800640, 881501, 899410, 267846, 767430, 777928, 479396, 613694], 0) == 2599935\nassert solution.minSpaceWastedKResizing([587593, 355199, 376035, 135078, 99024, 507180, 443467, 697889], 4) == 120603\nassert solution.minSpaceWastedKResizing([841963, 577362, 602911, 20285, 874121, 584801, 286718, 512011], 1) == 1824836\nassert solution.minSpaceWastedKResizing([466782, 652744, 517360, 808686, 955258, 194686, 570906, 79255, 29357, 574753], 4) == 894036\nassert solution.minSpaceWastedKResizing([268240, 603558], 0) == 335318\nassert solution.minSpaceWastedKResizing([666167, 715667, 467665, 968973, 797399, 895453, 894483], 5) == 970\nassert solution.minSpaceWastedKResizing([447250, 689262, 15513, 579789, 985880, 717749, 894615, 574631, 251504, 989700], 3) == 1707757\nassert solution.minSpaceWastedKResizing([973533, 889376, 384826, 57566, 101539, 237654, 150213, 491778, 619426, 564580], 0) == 5264839\nassert solution.minSpaceWastedKResizing([649417, 580813, 640120], 0) == 77901\nassert solution.minSpaceWastedKResizing([567811, 847166, 936520], 0) == 458063\nassert solution.minSpaceWastedKResizing([426261, 625092, 432327, 720259, 51449, 698257, 730094], 0) == 1426919\nassert solution.minSpaceWastedKResizing([948809, 157738, 709047, 691798, 559930, 631994, 879195, 267364], 7) == 0\nassert solution.minSpaceWastedKResizing([292559, 801033, 185832, 757264, 440041], 1) == 1019962\nassert solution.minSpaceWastedKResizing([308660, 78388, 150328], 2) == 0\nassert solution.minSpaceWastedKResizing([681931, 553913, 695812, 338981, 316720], 2) == 150279\nassert solution.minSpaceWastedKResizing([753312, 403430, 380166, 579502], 1) == 375408\nassert solution.minSpaceWastedKResizing([705490, 597425, 871840, 333864, 419283, 319348, 219901], 0) == 2635729\nassert solution.minSpaceWastedKResizing([46427, 307100, 176045, 943149, 289779, 190587, 587532, 949498, 588773, 639731], 7) == 150150\nassert solution.minSpaceWastedKResizing([500109, 111174], 0) == 388935\nassert solution.minSpaceWastedKResizing([478141, 711448, 542829, 230569, 293800, 836473, 238264, 182082, 432994], 7) == 56182\nassert solution.minSpaceWastedKResizing([144483, 111442, 789041, 979461, 300966, 586836, 339667], 2) == 756500\nassert solution.minSpaceWastedKResizing([391435, 443359, 520896, 698470], 2) == 51924\nassert solution.minSpaceWastedKResizing([538826, 732137, 540910, 253636, 349112, 469891, 234031, 558061, 374074], 0) == 2538555\nassert solution.minSpaceWastedKResizing([921386, 902731, 57710, 622999, 752752, 531723, 52000, 485256, 767294], 6) == 148408\nassert solution.minSpaceWastedKResizing([311083, 329521, 266983, 483825, 87309, 352953, 392784, 508298], 5) == 58269\nassert solution.minSpaceWastedKResizing([906905, 226757, 675201, 795520, 138805], 2) == 689082\nassert solution.minSpaceWastedKResizing([619765, 861074, 180577, 467389, 290780, 380707], 4) == 89927\nassert solution.minSpaceWastedKResizing([863651, 591992, 590768, 273535, 399527, 733731, 583468, 227126, 325057], 8) == 0\nassert solution.minSpaceWastedKResizing([195349, 858311, 251535, 335778, 693454, 703372, 111130, 234284, 303601], 5) == 163478\nassert solution.minSpaceWastedKResizing([728696, 972263, 477710], 0) == 738120\nassert solution.minSpaceWastedKResizing([902970, 873947, 633887, 234214, 910731, 433933], 5) == 0\nassert solution.minSpaceWastedKResizing([235355, 647029, 562202, 868176, 852447, 911065, 339534], 3) == 186334\nassert solution.minSpaceWastedKResizing([340204, 330473, 686207], 2) == 0\nassert solution.minSpaceWastedKResizing([267342, 590508, 110692, 304718, 48193, 531905], 3) == 450551\nassert solution.minSpaceWastedKResizing([68485, 55742, 425303, 212404, 430377, 203873, 270537, 121844, 172225], 4) == 286171\nassert solution.minSpaceWastedKResizing([53296, 555401, 695489, 414355, 166144, 764277], 1) == 1225719\nassert solution.minSpaceWastedKResizing([168119, 203964, 809637, 403372], 0) == 1653456\nassert solution.minSpaceWastedKResizing([737944, 714659], 1) == 0\nassert solution.minSpaceWastedKResizing([203722, 268573, 910294], 1) == 64851\nassert solution.minSpaceWastedKResizing([668929, 912938, 379599, 433293, 459698], 3) == 26405\nassert solution.minSpaceWastedKResizing([38783, 336223, 8283], 1) == 297440\nassert solution.minSpaceWastedKResizing([342951, 885081, 934211, 915001], 3) == 0\nassert solution.minSpaceWastedKResizing([264240, 679136, 347413, 65055, 619715, 38454], 5) == 0\nassert solution.minSpaceWastedKResizing([639893, 548968, 676037, 931459, 668906, 596543, 960437], 2) == 760682\nassert solution.minSpaceWastedKResizing([382605, 693965, 565891, 241549, 527419, 737568, 869341, 384278, 930184], 0) == 3038856\nassert solution.minSpaceWastedKResizing([647148, 949289, 310989, 900517, 10148, 141097, 315856], 5) == 130949\nassert solution.minSpaceWastedKResizing([655018, 324193, 818393, 667882], 2) == 150511\nassert solution.minSpaceWastedKResizing([854125, 599303, 167913, 974525, 409829, 678722, 325793, 496539, 298181], 4) == 892819\nassert solution.minSpaceWastedKResizing([312301, 30527, 380998], 2) == 0\nassert solution.minSpaceWastedKResizing([404964, 416995, 543235, 323433, 649253], 2) == 231833\nassert solution.minSpaceWastedKResizing([977560, 137230, 651615, 106666, 460952, 840197], 1) == 2004325\nassert solution.minSpaceWastedKResizing([488214, 224634, 957579, 457564, 679828], 0) == 1980076\nassert solution.minSpaceWastedKResizing([63773, 332374, 260544], 0) == 340431\nassert solution.minSpaceWastedKResizing([770266, 622451, 492303, 565760, 244554, 378009, 477823, 730241], 6) == 73457\nassert solution.minSpaceWastedKResizing([910861, 749450, 149239], 0) == 923033\nassert solution.minSpaceWastedKResizing([381802, 707585, 632108, 473596, 391796, 733868, 620466, 776015], 2) == 680756\nassert solution.minSpaceWastedKResizing([628462, 11973, 120288, 276526, 962246, 905413], 5) == 0\nassert solution.minSpaceWastedKResizing([131810, 137256, 877931], 0) == 1486796\nassert solution.minSpaceWastedKResizing([389755, 16565, 22169, 557510, 832643], 4) == 0\nassert solution.minSpaceWastedKResizing([226494, 691600], 0) == 465106\nassert solution.minSpaceWastedKResizing([536991, 101087, 990526, 18143, 994457], 3) == 435904\nassert solution.minSpaceWastedKResizing([138705, 336107, 540269, 264041, 390424, 800920, 75210, 961824], 4) == 623475\nassert solution.minSpaceWastedKResizing([20964, 837582, 39205, 425359], 2) == 386154\nassert solution.minSpaceWastedKResizing([198007, 65488], 0) == 132519\nassert solution.minSpaceWastedKResizing([581007, 873094, 883950, 338358, 757206], 2) == 313799",
  "inefficient_solution": "class Solution:\n    def minSpaceWastedKResizing(self, nums, k):\n        n = len(nums)\n        sizes = [nums[0]] + [0] * n\n        wasted = [nums[0]] + [0] * n\n        for i in range(1, n):\n            sizes[i] = sizes[i - 1] + nums[i]\n            wasted[i] = sizes[i] - nums[i]\n        dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n        for i in range(n):\n            dp[i][0] = 0\n            for j in range(i, -1, -1):\n                for h in range(i):\n                    dp[i + 1][0] = min(dp[i + 1][0], dp[h][0] + wasted[h] + sizes[h])\n                for h in range(i - 1, -1, -1):\n                    dp[i + 1][0] = min(dp[i + 1][0], dp[h][0] + wasted[h] + sizes[h])\n                for j2 in range(1, k + 1):\n                    for h in range(i):\n                        dp[i + 1][j2] = min(dp[i + 1][j2], dp[h][j2 - 1] + wasted[h] + sizes[h])\n                    for h in range(i - 1, -1, -1):\n                        dp[i + 1][j2] = min(dp[i + 1][j2], dp[h][j2 - 1] + wasted[h] + sizes[h])\n        return dp[-1][-1]",
  "is_python": true
}