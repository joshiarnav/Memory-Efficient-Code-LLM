{
  "problem_idx": 2513,
  "task_name": "Minimize the Maximum of Two Arrays",
  "markdown_description": "\nWe have two arrays `arr1` and `arr2` which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:\n\n\n* `arr1` contains `uniqueCnt1` **distinct** positive integers, each of which is **not divisible** by `divisor1`.\n* `arr2` contains `uniqueCnt2` **distinct** positive integers, each of which is **not divisible** by `divisor2`.\n* **No** integer is present in both `arr1` and `arr2`.\n\n\nGiven `divisor1`, `divisor2`, `uniqueCnt1`, and `uniqueCnt2`, return *the **minimum possible maximum** integer that can be present in either array*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3\n**Output:** 4\n**Explanation:** \nWe can distribute the first 4 natural numbers into arr1 and arr2.\narr1 = [1] and arr2 = [2,3,4].\nWe can see that both arrays satisfy all the conditions.\nSince the maximum value is 4, we return it.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1\n**Output:** 3\n**Explanation:** \nHere arr1 = [1,2], and arr2 = [3] satisfy all conditions.\nSince the maximum value is 3, we return it.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2\n**Output:** 15\n**Explanation:** \nHere, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].\nIt can be shown that it is not possible to obtain a lower maximum satisfying all conditions. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= divisor1, divisor2 <= 105`\n* `1 <= uniqueCnt1, uniqueCnt2 < 109`\n* `2 <= uniqueCnt1 + uniqueCnt2 <= 109`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimizeSet(\n        self, divisor1: int, divisor2: int, uniqueCnt1: int, uniqueCnt2: int\n    ) -> int:\n        def f(x):\n            cnt1 = x // divisor1 * (divisor1 - 1) + x % divisor1\n            cnt2 = x // divisor2 * (divisor2 - 1) + x % divisor2\n            cnt = x // divisor * (divisor - 1) + x % divisor\n            return (\n                cnt1 >= uniqueCnt1\n                and cnt2 >= uniqueCnt2\n                and cnt >= uniqueCnt1 + uniqueCnt2\n            )\n\n        divisor = lcm(divisor1, divisor2)\n        return bisect_left(range(10**10), True, key=f)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimizeSet(\n        self, divisor1: int, divisor2: int, uniqueCnt1: int, uniqueCnt2: int\n    ) -> int:\n        def f(x):\n            cnt1 = x // divisor1 * (divisor1 - 1) + x % divisor1\n            cnt2 = x // divisor2 * (divisor2 - 1) + x % divisor2\n            cnt = x // divisor * (divisor - 1) + x % divisor\n            return (\n                cnt1 >= uniqueCnt1\n                and cnt2 >= uniqueCnt2\n                and cnt >= uniqueCnt1 + uniqueCnt2\n            )\n\n        divisor = lcm(divisor1, divisor2)\n        return bisect_left(range(10**10), True, key=f)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random divisor1, divisor2, uniqueCnt1, uniqueCnt2\n    divisor1 = random.randint(2, 11)\n    divisor2 = random.randint(2, 11)\n    uniqueCnt1 = random.randint(1, 11)\n    uniqueCnt2 = random.randint(1, 11)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimizeSet(divisor1, divisor2, uniqueCnt1, uniqueCnt2)\n\n    return divisor1, divisor2, uniqueCnt1, uniqueCnt2, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        divisor1, divisor2, uniqueCnt1, uniqueCnt2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimizeSet(divisor1, divisor2, uniqueCnt1, uniqueCnt2) == expected_result\n        print(f\"assert solution.minimizeSet({divisor1}, {divisor2}, {uniqueCnt1}, {uniqueCnt2}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimizeSet({divisor1}, {divisor2}, {uniqueCnt1}, {uniqueCnt2}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimizeSet(10, 5, 3, 2) == 5\nassert solution.minimizeSet(11, 9, 6, 1) == 7\nassert solution.minimizeSet(10, 5, 10, 3) == 14\nassert solution.minimizeSet(10, 6, 11, 9) == 20\nassert solution.minimizeSet(8, 11, 11, 3) == 14\nassert solution.minimizeSet(11, 2, 7, 6) == 13\nassert solution.minimizeSet(2, 8, 5, 4) == 10\nassert solution.minimizeSet(2, 2, 11, 8) == 37\nassert solution.minimizeSet(6, 3, 8, 7) == 17\nassert solution.minimizeSet(4, 9, 6, 11) == 17\nassert solution.minimizeSet(6, 5, 8, 6) == 14\nassert solution.minimizeSet(3, 7, 7, 5) == 12\nassert solution.minimizeSet(5, 3, 11, 8) == 20\nassert solution.minimizeSet(6, 11, 2, 8) == 10\nassert solution.minimizeSet(4, 10, 5, 6) == 11\nassert solution.minimizeSet(7, 4, 1, 9) == 11\nassert solution.minimizeSet(6, 2, 8, 1) == 10\nassert solution.minimizeSet(3, 6, 11, 10) == 25\nassert solution.minimizeSet(9, 3, 1, 4) == 5\nassert solution.minimizeSet(7, 8, 6, 9) == 15\nassert solution.minimizeSet(2, 10, 10, 4) == 19\nassert solution.minimizeSet(10, 8, 11, 7) == 18\nassert solution.minimizeSet(4, 6, 10, 1) == 13\nassert solution.minimizeSet(7, 10, 6, 10) == 16\nassert solution.minimizeSet(2, 9, 11, 7) == 21\nassert solution.minimizeSet(5, 10, 7, 9) == 17\nassert solution.minimizeSet(10, 10, 4, 6) == 11\nassert solution.minimizeSet(11, 5, 3, 7) == 10\nassert solution.minimizeSet(9, 9, 7, 10) == 19\nassert solution.minimizeSet(3, 8, 6, 9) == 15\nassert solution.minimizeSet(6, 2, 8, 9) == 20\nassert solution.minimizeSet(11, 10, 1, 5) == 6\nassert solution.minimizeSet(2, 6, 2, 11) == 15\nassert solution.minimizeSet(8, 4, 1, 3) == 4\nassert solution.minimizeSet(7, 10, 10, 5) == 15\nassert solution.minimizeSet(6, 3, 1, 6) == 8\nassert solution.minimizeSet(8, 9, 9, 1) == 10\nassert solution.minimizeSet(8, 9, 2, 1) == 3\nassert solution.minimizeSet(9, 9, 10, 2) == 13\nassert solution.minimizeSet(7, 9, 5, 5) == 10\nassert solution.minimizeSet(6, 11, 10, 3) == 13\nassert solution.minimizeSet(11, 11, 10, 3) == 14\nassert solution.minimizeSet(5, 7, 1, 6) == 7\nassert solution.minimizeSet(6, 10, 10, 2) == 12\nassert solution.minimizeSet(4, 2, 5, 11) == 21\nassert solution.minimizeSet(3, 11, 1, 7) == 8\nassert solution.minimizeSet(6, 4, 4, 10) == 15\nassert solution.minimizeSet(2, 9, 10, 5) == 19\nassert solution.minimizeSet(6, 10, 10, 2) == 12\nassert solution.minimizeSet(8, 6, 8, 8) == 16\nassert solution.minimizeSet(10, 7, 10, 5) == 15\nassert solution.minimizeSet(9, 2, 10, 2) == 12\nassert solution.minimizeSet(2, 7, 4, 11) == 16\nassert solution.minimizeSet(7, 6, 4, 1) == 5\nassert solution.minimizeSet(9, 5, 11, 4) == 15\nassert solution.minimizeSet(9, 3, 5, 6) == 12\nassert solution.minimizeSet(3, 8, 3, 1) == 4\nassert solution.minimizeSet(8, 6, 1, 10) == 11\nassert solution.minimizeSet(5, 2, 1, 3) == 5\nassert solution.minimizeSet(4, 10, 9, 6) == 15\nassert solution.minimizeSet(8, 2, 3, 5) == 9\nassert solution.minimizeSet(3, 11, 10, 3) == 14\nassert solution.minimizeSet(10, 8, 11, 7) == 18\nassert solution.minimizeSet(9, 10, 3, 3) == 6\nassert solution.minimizeSet(2, 11, 7, 6) == 13\nassert solution.minimizeSet(3, 9, 10, 7) == 19\nassert solution.minimizeSet(7, 3, 1, 2) == 3\nassert solution.minimizeSet(6, 2, 8, 8) == 19\nassert solution.minimizeSet(5, 5, 3, 8) == 13\nassert solution.minimizeSet(7, 10, 8, 9) == 17\nassert solution.minimizeSet(4, 8, 7, 6) == 14\nassert solution.minimizeSet(6, 7, 6, 9) == 15\nassert solution.minimizeSet(4, 4, 8, 5) == 17\nassert solution.minimizeSet(10, 2, 7, 6) == 14\nassert solution.minimizeSet(6, 3, 5, 4) == 10\nassert solution.minimizeSet(4, 5, 7, 6) == 13\nassert solution.minimizeSet(10, 11, 4, 4) == 8\nassert solution.minimizeSet(11, 5, 4, 6) == 10\nassert solution.minimizeSet(5, 6, 11, 5) == 16\nassert solution.minimizeSet(11, 10, 6, 1) == 7\nassert solution.minimizeSet(6, 6, 3, 9) == 14\nassert solution.minimizeSet(5, 5, 9, 11) == 24\nassert solution.minimizeSet(5, 9, 1, 8) == 9\nassert solution.minimizeSet(3, 8, 7, 11) == 18\nassert solution.minimizeSet(2, 10, 6, 7) == 14\nassert solution.minimizeSet(9, 8, 7, 6) == 13\nassert solution.minimizeSet(3, 10, 10, 9) == 19\nassert solution.minimizeSet(10, 7, 1, 5) == 6\nassert solution.minimizeSet(4, 7, 4, 10) == 14\nassert solution.minimizeSet(5, 8, 9, 5) == 14\nassert solution.minimizeSet(3, 10, 1, 11) == 12\nassert solution.minimizeSet(4, 5, 8, 9) == 17\nassert solution.minimizeSet(11, 9, 7, 5) == 12\nassert solution.minimizeSet(5, 4, 9, 3) == 12\nassert solution.minimizeSet(10, 9, 11, 2) == 13\nassert solution.minimizeSet(8, 11, 8, 6) == 14\nassert solution.minimizeSet(3, 11, 10, 1) == 14\nassert solution.minimizeSet(11, 3, 10, 10) == 20\nassert solution.minimizeSet(3, 3, 10, 4) == 20\nassert solution.minimizeSet(5, 4, 4, 10) == 14",
  "inefficient_solution": "def minimizeSet(divisor1, divisor2, uniqueCnt1, uniqueCnt2):\n    def f(x):\n        a = []\n        for i in range(1, x + 1):\n            if i % divisor1 == 0:\n                continue\n            a.append(i)\n        b = []\n        for i in range(1, x + 1):\n            if i % divisor2 == 0:\n                continue\n            b.append(i)\n        return len(a) >= uniqueCnt1 and len(b) >= uniqueCnt2\n\n    max_num = 10**10  # This number is arbitrary and can be larger\n    for i in range(max_num):\n        if not f(i):\n            return i",
  "is_python": true
}