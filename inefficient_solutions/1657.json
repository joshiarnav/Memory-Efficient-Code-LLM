{
  "problem_idx": 1657,
  "task_name": "Determine if Two Strings Are Close",
  "markdown_description": "\nTwo strings are considered **close** if you can attain one from the other using the following operations:\n\n\n* Operation 1: Swap any two **existing** characters.\n\t+ For example, `abcde -> aecdb`\n* Operation 2: Transform **every** occurrence of one **existing** character into another **existing** character, and do the same with the other character.\n\t+ For example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)\n\n\nYou can use the operations on either string as many times as necessary.\n\n\nGiven two strings, `word1` and `word2`, return `true` *if* `word1` *and* `word2` *are **close**, and* `false` *otherwise.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** word1 = \"abc\", word2 = \"bca\"\n**Output:** true\n**Explanation:** You can attain word2 from word1 in 2 operations.\nApply Operation 1: \"abc\" -> \"acb\"\nApply Operation 1: \"acb\" -> \"bca\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** word1 = \"a\", word2 = \"aa\"\n**Output:** false\n**Explanation:** It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** word1 = \"cabbba\", word2 = \"abbccc\"\n**Output:** true\n**Explanation:** You can attain word2 from word1 in 3 operations.\nApply Operation 1: \"cabbba\" -> \"caabbb\"\nApply Operation 2: \"caabbb\" -> \"baaccc\"\nApply Operation 2: \"baaccc\" -> \"abbccc\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= word1.length, word2.length <= 105`\n* `word1` and `word2` contain only lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def closeStrings(self, word1: str, word2: str) -> bool:\n        cnt1 = Counter(word1)\n        cnt2 = Counter(word2)\n        return set(cnt1.keys()) == set(cnt2.keys()) and Counter(\n            cnt1.values()\n        ) == Counter(cnt2.values())\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def closeStrings(self, word1: str, word2: str) -> bool:\n        cnt1 = Counter(word1)\n        cnt2 = Counter(word2)\n        return set(cnt1.keys()) == set(cnt2.keys()) and Counter(cnt1.values()) == Counter(cnt2.values())\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    word1 = \"\".join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    word2 = \"\".join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.closeStrings(word1, word2)\n\n    return word1, word2, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        word1, word2, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.closeStrings(word1, word2) == expected_result\n        print(f\"assert solution.closeStrings('{word1}', '{word2}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.closeStrings('{word1}', '{word2}') == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.closeStrings('p', 'qgkhmz') == False\nassert solution.closeStrings('o', 'lzeflda') == False\nassert solution.closeStrings('vcaonrs', 'bxhuiso') == False\nassert solution.closeStrings('n', 'rcpw') == False\nassert solution.closeStrings('qimirzuh', 'kczthpbw') == False\nassert solution.closeStrings('kxoua', 'eqshjouquc') == False\nassert solution.closeStrings('az', 'siok') == False\nassert solution.closeStrings('by', 'sv') == False\nassert solution.closeStrings('kujmza', 'thqrfgryl') == False\nassert solution.closeStrings('taef', 'sea') == False\nassert solution.closeStrings('iq', 'h') == False\nassert solution.closeStrings('rnmbiraom', 'liga') == False\nassert solution.closeStrings('jsxzkv', 'waccljbxj') == False\nassert solution.closeStrings('fqkmj', 'dnnkigd') == False\nassert solution.closeStrings('cliudqz', 'wqanpzxik') == False\nassert solution.closeStrings('qmoj', 'bb') == False\nassert solution.closeStrings('k', 'qpkqzgid') == False\nassert solution.closeStrings('g', 'sc') == False\nassert solution.closeStrings('ire', 'txzosyn') == False\nassert solution.closeStrings('gjkan', 'gritofk') == False\nassert solution.closeStrings('pjbalj', 'hwiwkwgqwj') == False\nassert solution.closeStrings('iezyzxdr', 'rq') == False\nassert solution.closeStrings('jgqbd', 'nlxuwyukjf') == False\nassert solution.closeStrings('upbkrhtt', 'biflxwqirm') == False\nassert solution.closeStrings('nhviekqza', 'otndajnja') == False\nassert solution.closeStrings('zgkzzslcqc', 'scoj') == False\nassert solution.closeStrings('qgqfvjz', 'av') == False\nassert solution.closeStrings('scdkq', 'kcuout') == False\nassert solution.closeStrings('x', 'jwxiizu') == False\nassert solution.closeStrings('wwuqi', 'qndta') == False\nassert solution.closeStrings('oxdn', 'phm') == False\nassert solution.closeStrings('tkirzz', 'p') == False\nassert solution.closeStrings('n', 'b') == False\nassert solution.closeStrings('re', 'svljcw') == False\nassert solution.closeStrings('epgleqdct', 'pc') == False\nassert solution.closeStrings('mjylhef', 'qwxhxtn') == False\nassert solution.closeStrings('xss', 'zocuteafot') == False\nassert solution.closeStrings('jiftmpoxo', 'sgp') == False\nassert solution.closeStrings('j', 'lpeqvgv') == False\nassert solution.closeStrings('orgokuuhqm', 'baspwmd') == False\nassert solution.closeStrings('bwitar', 'xaq') == False\nassert solution.closeStrings('seab', 'ranzfquvvo') == False\nassert solution.closeStrings('krfddlv', 'antpf') == False\nassert solution.closeStrings('ed', 'sarppz') == False\nassert solution.closeStrings('tgeya', 'gkkdjaojyw') == False\nassert solution.closeStrings('pv', 'gwovwdq') == False\nassert solution.closeStrings('smaswc', 'ljb') == False\nassert solution.closeStrings('cqnufxpmg', 'vlzmfuanem') == False\nassert solution.closeStrings('yrj', 'a') == False\nassert solution.closeStrings('cbre', 'asraucapw') == False\nassert solution.closeStrings('jvyl', 'ivsrie') == False\nassert solution.closeStrings('ryu', 'um') == False\nassert solution.closeStrings('eccu', 'kiexujt') == False\nassert solution.closeStrings('tanvwos', 'jyy') == False\nassert solution.closeStrings('zqslkfs', 'gcbaejywn') == False\nassert solution.closeStrings('jpbxzohlgj', 'tfuqsvhsv') == False\nassert solution.closeStrings('rsny', 'xeb') == False\nassert solution.closeStrings('ceenah', 'xwhnblddex') == False\nassert solution.closeStrings('bujyuahv', 'ngwfro') == False\nassert solution.closeStrings('e', 'c') == False\nassert solution.closeStrings('fakkszaj', 'ktjestb') == False\nassert solution.closeStrings('ladgvk', 'dyxuhwlraj') == False\nassert solution.closeStrings('wemm', 'yi') == False\nassert solution.closeStrings('rhomdr', 'kgosh') == False\nassert solution.closeStrings('ahsq', 'fqnewf') == False\nassert solution.closeStrings('gxzxnqro', 'vq') == False\nassert solution.closeStrings('hgn', 'qjn') == False\nassert solution.closeStrings('v', 'y') == False\nassert solution.closeStrings('qhljzd', 'ikxumen') == False\nassert solution.closeStrings('st', 'vqreiatzcl') == False\nassert solution.closeStrings('zlupwl', 'fztdnm') == False\nassert solution.closeStrings('wlr', 'tilxcmfy') == False\nassert solution.closeStrings('tj', 'fith') == False\nassert solution.closeStrings('d', 'ghd') == False\nassert solution.closeStrings('koun', 'mpi') == False\nassert solution.closeStrings('obldecikfg', 'ylhhibxszb') == False\nassert solution.closeStrings('nebnhckl', 'awp') == False\nassert solution.closeStrings('zkegbqa', 'n') == False\nassert solution.closeStrings('vlnhnex', 'adiihof') == False\nassert solution.closeStrings('zzzm', 'j') == False\nassert solution.closeStrings('eivgvjc', 'sxialtquo') == False\nassert solution.closeStrings('ombaolxu', 'paacepl') == False\nassert solution.closeStrings('mgayuqt', 'g') == False\nassert solution.closeStrings('ipaia', 'j') == False\nassert solution.closeStrings('qfwjkesomg', 'spanblcgp') == False\nassert solution.closeStrings('oxwh', 'pmpyj') == False\nassert solution.closeStrings('nysblp', 'sdcta') == False\nassert solution.closeStrings('bklqjtgnar', 'z') == False\nassert solution.closeStrings('rlp', 'ljvg') == False\nassert solution.closeStrings('higujbjtv', 'bnylpdlois') == False\nassert solution.closeStrings('oanppktun', 'gvudjgl') == False\nassert solution.closeStrings('poegtuwv', 'wu') == False\nassert solution.closeStrings('ztqampt', 'vuldj') == False\nassert solution.closeStrings('epbjzpd', 'o') == False\nassert solution.closeStrings('jrulmzul', 'v') == False\nassert solution.closeStrings('vhexabfsd', 'pheawvrch') == False\nassert solution.closeStrings('rliamd', 'yirgljh') == False\nassert solution.closeStrings('yrovm', 'df') == False\nassert solution.closeStrings('asjsjsc', 'yteziducmg') == False\nassert solution.closeStrings('vnvmjilc', 'uptyzaarx') == False",
  "inefficient_solution": "class Solution:\n    def closeStrings(self, word1: str, word2: str) -> bool:\n        dict1 = {}\n        dict2 = {}\n        for char in word1:\n            if char not in dict1:\n                dict1[char] = 0\n            dict1[char] += 1\n        for char in word2:\n            if char not in dict2:\n                dict2[char] = 0\n            dict2[char] += 1\n        set1 = set(dict1.keys())\n        set2 = set(dict2.keys())\n        if set1 != set2:\n            return False\n        dict3 = {}\n        dict4 = {}\n        for char in word1:\n            if char in dict3:\n                dict3[char] += 1\n            else:\n                dict3[char] = 1\n        for char in word2:\n            if char in dict4:\n                dict4[char] += 1\n            else:\n                dict4[char] = 1\n        dict5 = {}\n        dict6 = {}\n        for key in dict3:\n            if key not in dict5:\n                dict5[key] = 0\n            dict5[key] += 1\n        for key in dict4:\n            if key not in dict6:\n                dict6[key] = 0\n            dict6[key] += 1\n        return dict5 == dict6",
  "is_python": true
}