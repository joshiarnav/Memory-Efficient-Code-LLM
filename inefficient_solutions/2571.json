{
  "problem_idx": 2571,
  "task_name": "Minimum Operations to Reduce an Integer to ",
  "markdown_description": "\nYou are given a positive integer `n`, you can do the following operation **any** number of times:\n\n\n* Add or subtract a **power** of `2` from `n`.\n\n\nReturn *the **minimum** number of operations to make* `n` *equal to* `0`.\n\n\nA number `x` is power of `2` if `x == 2i`\u00a0where `i >= 0`*.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 39\n**Output:** 3\n**Explanation:** We can do the following operations:\n- Add 20 = 1 to n, so now n = 40.\n- Subtract 23 = 8 from n, so now n = 32.\n- Subtract 25 = 32 from n, so now n = 0.\nIt can be shown that 3 is the minimum number of operations we need to make n equal to 0.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 54\n**Output:** 3\n**Explanation:** We can do the following operations:\n- Add 21 = 2 to n, so now n = 56.\n- Add 23 = 8 to n, so now n = 64.\n- Subtract 26 = 64 from n, so now n = 0.\nSo the minimum number of operations is 3.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= 105`\n\n\n",
  "canonical_solution": "class Solution:\n    def minOperations(self, n: int) -> int:\n        ans = cnt = 0\n        while n:\n            if n & 1:\n                cnt += 1\n            elif cnt:\n                ans += 1\n                cnt = 0 if cnt == 1 else 1\n            n >>= 1\n        if cnt == 1:\n            ans += 1\n        elif cnt > 1:\n            ans += 2\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def minOperations(self, n: int) -> int:\n        ans = cnt = 0\n        while n:\n            if n & 1:\n                cnt += 1\n            elif cnt:\n                ans += 1\n                cnt = 0 if cnt == 1 else 1\n            n >>= 1\n        if cnt == 1:\n            ans += 1\n        elif cnt > 1:\n            ans += 2\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random integer\n    n = random.randint(1, 10**5)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minOperations(n)\n\n    return n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minOperations(n) == expected_result\n        print(f\"assert solution.minOperations({n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minOperations({n}) == {expected_result}\")  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minOperations(97001) == 7\nassert solution.minOperations(45926) == 8\nassert solution.minOperations(22238) == 6\nassert solution.minOperations(9716) == 5\nassert solution.minOperations(42098) == 6\nassert solution.minOperations(23076) == 6\nassert solution.minOperations(7566) == 5\nassert solution.minOperations(96776) == 5\nassert solution.minOperations(82251) == 7\nassert solution.minOperations(940) == 4\nassert solution.minOperations(43009) == 4\nassert solution.minOperations(33503) == 5\nassert solution.minOperations(44588) == 7\nassert solution.minOperations(28621) == 6\nassert solution.minOperations(61186) == 4\nassert solution.minOperations(16422) == 4\nassert solution.minOperations(80820) == 6\nassert solution.minOperations(13245) == 6\nassert solution.minOperations(27336) == 6\nassert solution.minOperations(71121) == 7\nassert solution.minOperations(95303) == 7\nassert solution.minOperations(87197) == 8\nassert solution.minOperations(61955) == 5\nassert solution.minOperations(43767) == 7\nassert solution.minOperations(35230) == 6\nassert solution.minOperations(54764) == 6\nassert solution.minOperations(27708) == 5\nassert solution.minOperations(6519) == 6\nassert solution.minOperations(74346) == 7\nassert solution.minOperations(63053) == 7\nassert solution.minOperations(71339) == 8\nassert solution.minOperations(63202) == 5\nassert solution.minOperations(95758) == 6\nassert solution.minOperations(87183) == 7\nassert solution.minOperations(97297) == 5\nassert solution.minOperations(91580) == 7\nassert solution.minOperations(8089) == 5\nassert solution.minOperations(10354) == 5\nassert solution.minOperations(83572) == 7\nassert solution.minOperations(10487) == 5\nassert solution.minOperations(50662) == 7\nassert solution.minOperations(65595) == 4\nassert solution.minOperations(39557) == 7\nassert solution.minOperations(81909) == 5\nassert solution.minOperations(50528) == 6\nassert solution.minOperations(8900) == 5\nassert solution.minOperations(3254) == 6\nassert solution.minOperations(78688) == 6\nassert solution.minOperations(29028) == 6\nassert solution.minOperations(47800) == 6\nassert solution.minOperations(25788) == 6\nassert solution.minOperations(46200) == 6\nassert solution.minOperations(9025) == 5\nassert solution.minOperations(29759) == 5\nassert solution.minOperations(64553) == 5\nassert solution.minOperations(31796) == 5\nassert solution.minOperations(51377) == 7\nassert solution.minOperations(86243) == 7\nassert solution.minOperations(27306) == 8\nassert solution.minOperations(8561) == 5\nassert solution.minOperations(31994) == 5\nassert solution.minOperations(31611) == 5\nassert solution.minOperations(45114) == 6\nassert solution.minOperations(65014) == 4\nassert solution.minOperations(4287) == 4\nassert solution.minOperations(97) == 3\nassert solution.minOperations(84622) == 7\nassert solution.minOperations(17121) == 5\nassert solution.minOperations(77632) == 5\nassert solution.minOperations(56168) == 6\nassert solution.minOperations(44601) == 7\nassert solution.minOperations(68469) == 7\nassert solution.minOperations(70580) == 6\nassert solution.minOperations(44673) == 6\nassert solution.minOperations(88264) == 7\nassert solution.minOperations(30283) == 7\nassert solution.minOperations(76111) == 7\nassert solution.minOperations(38717) == 7\nassert solution.minOperations(37296) == 5\nassert solution.minOperations(18262) == 6\nassert solution.minOperations(15869) == 4\nassert solution.minOperations(83669) == 8\nassert solution.minOperations(51397) == 7\nassert solution.minOperations(97150) == 5\nassert solution.minOperations(50877) == 7\nassert solution.minOperations(79015) == 8\nassert solution.minOperations(42) == 3\nassert solution.minOperations(84002) == 5\nassert solution.minOperations(93155) == 7\nassert solution.minOperations(96859) == 8\nassert solution.minOperations(39268) == 7\nassert solution.minOperations(11992) == 5\nassert solution.minOperations(29714) == 5\nassert solution.minOperations(15966) == 5\nassert solution.minOperations(94039) == 7\nassert solution.minOperations(74464) == 5\nassert solution.minOperations(29787) == 7\nassert solution.minOperations(78003) == 8\nassert solution.minOperations(29108) == 6\nassert solution.minOperations(15607) == 5",
  "inefficient_solution": "class Solution:\n    def minOperations(self, n: int) -> int:\n        arr = []\n        while n:\n            if n % 2 == 1:\n                arr.append(n)\n            n = n // 2\n        arr = sorted(arr, reverse=True)\n        ans = 0\n        for i in range(len(arr)):\n            if i % 2 == 0:\n                ans += arr[i]\n            else:\n                ans -= arr[i]\n        return ans",
  "is_python": true
}