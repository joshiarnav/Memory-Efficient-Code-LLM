{
  "problem_idx": 416,
  "task_name": "Partition Equal Subset Sum",
  "markdown_description": "\nGiven an integer array `nums`, return `true` *if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or* `false` *otherwise*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,5,11,5]\n**Output:** true\n**Explanation:** The array can be partitioned as [1, 5, 5] and [11].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,5]\n**Output:** false\n**Explanation:** The array cannot be partitioned into equal sum subsets.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 200`\n* `1 <= nums[i] <= 100`\n\n\n",
  "canonical_solution": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        m, mod = divmod(sum(nums), 2)\n        if mod:\n            return False\n        f = [True] + [False] * m\n        for x in nums:\n            for j in range(m, x - 1, -1):\n                f[j] = f[j] or f[j - x]\n        return f[m]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        m, mod = divmod(sum(nums), 2)\n        if mod:\n            return False\n        f = [True] + [False] * m\n        for x in nums:\n            for j in range(m, x - 1, -1):\n                f[j] = f[j] or f[j - x]\n        return f[m]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(1, 101), k=random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.canPartition(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.canPartition(nums) == expected_result\n        print(f\"assert solution.canPartition({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.canPartition({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
  "test_case": "assert solution.canPartition([33, 21, 95, 44, 99]) == False\nassert solution.canPartition([40, 86, 59, 19, 49, 45]) == False\nassert solution.canPartition([65, 29, 30, 61, 1, 51, 27, 38, 75, 60]) == False\nassert solution.canPartition([2, 96]) == False\nassert solution.canPartition([92, 92, 40]) == False\nassert solution.canPartition([37, 79, 16, 5, 65, 28]) == False\nassert solution.canPartition([95, 28, 56, 42, 30, 24, 71]) == False\nassert solution.canPartition([19, 58, 54, 64, 95, 27]) == False\nassert solution.canPartition([11, 6, 71, 42, 40, 78, 60, 80, 73, 78]) == False\nassert solution.canPartition([42, 37, 34, 70, 60, 55, 61, 77]) == True\nassert solution.canPartition([86, 14]) == False\nassert solution.canPartition([53, 67]) == False\nassert solution.canPartition([17, 78, 56, 38, 3, 82, 29, 95, 8]) == False\nassert solution.canPartition([8, 76, 96, 89, 55, 7, 71, 93, 9]) == True\nassert solution.canPartition([79, 82, 85]) == False\nassert solution.canPartition([85, 2, 7, 10, 87, 96, 34, 3, 22, 45]) == False\nassert solution.canPartition([48, 63, 97]) == False\nassert solution.canPartition([10, 32, 91, 63, 38, 20, 26, 49, 78, 58]) == False\nassert solution.canPartition([71, 28, 57, 24, 98]) == False\nassert solution.canPartition([10, 83, 56, 44, 65]) == False\nassert solution.canPartition([7, 99, 12, 79, 65, 12, 89, 30, 33, 81]) == False\nassert solution.canPartition([81, 65, 82, 99]) == False\nassert solution.canPartition([59, 30, 63, 89, 74, 22, 22]) == False\nassert solution.canPartition([98, 23, 9, 92, 33, 29, 81, 79]) == True\nassert solution.canPartition([24, 37, 19, 95, 1, 37, 16]) == False\nassert solution.canPartition([26, 4, 15]) == False\nassert solution.canPartition([51, 47, 51, 45]) == False\nassert solution.canPartition([41, 70, 76, 48, 87, 59, 34, 58, 17]) == True\nassert solution.canPartition([38, 8, 47, 29, 74, 72, 21, 45, 53, 44]) == False\nassert solution.canPartition([32, 42, 53, 27, 3, 29, 74]) == True\nassert solution.canPartition([88, 100, 14, 40, 77, 91, 37, 30, 70]) == False\nassert solution.canPartition([61, 14, 98]) == False\nassert solution.canPartition([32, 70, 62, 59, 93, 29, 66]) == False\nassert solution.canPartition([99, 53, 47, 2, 90, 93, 33]) == False\nassert solution.canPartition([55, 75, 65, 24, 22, 5, 65, 4]) == False\nassert solution.canPartition([4, 90, 94, 15, 39]) == False\nassert solution.canPartition([46, 38, 49, 24, 17, 2, 16, 62, 74, 93]) == False\nassert solution.canPartition([76, 84, 96, 62, 100, 55]) == False\nassert solution.canPartition([47, 92, 34, 39, 76]) == False\nassert solution.canPartition([19, 83, 69, 51, 87, 60, 27]) == True\nassert solution.canPartition([34, 55, 83, 33, 28, 31]) == False\nassert solution.canPartition([39, 29]) == False\nassert solution.canPartition([2, 35, 88, 68]) == False\nassert solution.canPartition([94, 55, 29, 15, 43, 92, 38, 16, 72]) == False\nassert solution.canPartition([81, 24, 34, 4, 75, 77]) == False\nassert solution.canPartition([31, 83, 39, 100, 32]) == False\nassert solution.canPartition([40, 53, 97, 44, 92, 24, 91]) == False\nassert solution.canPartition([59, 90, 83, 72, 38]) == False\nassert solution.canPartition([7, 32, 52, 60, 61, 84]) == False\nassert solution.canPartition([28, 59, 60, 36, 63, 60, 98, 82, 2, 19]) == False\nassert solution.canPartition([20, 78, 36, 10, 72, 50, 85]) == False\nassert solution.canPartition([65, 78, 41]) == False\nassert solution.canPartition([23, 23, 42, 88, 36, 39]) == False\nassert solution.canPartition([33, 1, 66, 39, 69, 2, 76]) == True\nassert solution.canPartition([50, 79, 97, 7, 79, 44, 72, 65]) == False\nassert solution.canPartition([69, 10, 41]) == False\nassert solution.canPartition([51, 17]) == False\nassert solution.canPartition([99, 32, 83, 27, 36, 25]) == True\nassert solution.canPartition([6, 77]) == False\nassert solution.canPartition([40, 12, 40, 19, 37, 32, 32, 54]) == False\nassert solution.canPartition([100, 7]) == False\nassert solution.canPartition([70, 10, 3]) == False\nassert solution.canPartition([92, 29]) == False\nassert solution.canPartition([40, 14, 40]) == False\nassert solution.canPartition([81, 35, 51, 52, 46, 43, 81, 28, 25]) == True\nassert solution.canPartition([63, 73, 58]) == False\nassert solution.canPartition([37, 89, 51, 31, 11, 48, 57, 44, 58]) == False\nassert solution.canPartition([42, 90, 62, 75, 61, 49, 92, 86, 75, 65]) == False\nassert solution.canPartition([3, 36, 14, 24, 35, 60]) == False\nassert solution.canPartition([50, 63, 32, 49, 44]) == False\nassert solution.canPartition([40, 75, 66, 56, 77, 37, 24, 11, 27, 95]) == True\nassert solution.canPartition([96, 7]) == False\nassert solution.canPartition([24, 61]) == False\nassert solution.canPartition([7, 68, 10]) == False\nassert solution.canPartition([12, 85, 35, 62, 80, 53, 43]) == True\nassert solution.canPartition([100, 55, 60, 70, 76, 57]) == False\nassert solution.canPartition([69, 57, 43, 94, 37]) == False\nassert solution.canPartition([88, 19, 2, 63, 63, 31, 17, 32, 16, 21]) == True\nassert solution.canPartition([56, 43]) == False\nassert solution.canPartition([96, 36, 59, 44, 29, 64, 51, 99, 44, 96]) == True\nassert solution.canPartition([34, 12, 15, 98, 90]) == False\nassert solution.canPartition([11, 15]) == False\nassert solution.canPartition([27, 39, 81, 2, 55, 21, 40]) == False\nassert solution.canPartition([35, 32]) == False\nassert solution.canPartition([6, 20, 50, 36]) == True\nassert solution.canPartition([41, 42, 18, 33, 87, 75, 86, 21, 97]) == False\nassert solution.canPartition([15, 53, 58, 79, 94]) == False\nassert solution.canPartition([3, 69, 93, 72, 37, 6, 26, 57, 3, 31]) == False\nassert solution.canPartition([91, 38, 55]) == False\nassert solution.canPartition([79, 19, 44, 2, 18, 48, 50, 5]) == False\nassert solution.canPartition([20, 49, 47]) == False\nassert solution.canPartition([84, 44, 41, 61, 88, 38, 11, 45]) == False\nassert solution.canPartition([95, 83, 13]) == False\nassert solution.canPartition([86, 39, 3, 47, 34]) == False\nassert solution.canPartition([7, 18, 10, 15, 95, 25, 91, 57, 18]) == False\nassert solution.canPartition([86, 26, 30, 40]) == False\nassert solution.canPartition([94, 21, 100, 10]) == False\nassert solution.canPartition([56, 83, 25, 61]) == False\nassert solution.canPartition([56, 14, 34, 22, 34, 64, 94, 38]) == False\nassert solution.canPartition([86, 42]) == False",
  "inefficient_solution": "class Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        total = sum(nums)\n        m = total // 2\n        if total % 2 != 0:\n            return False\n        dp = [[False for _ in range(m + 1)] for _ in range(len(nums) + 1)]\n        for i in range(len(nums) + 1):\n            dp[i][0] = True\n        for i in range(1, len(nums) + 1):\n            for j in range(1, m + 1):\n                if nums[i - 1] > j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n        return dp[-1][-1]",
  "is_python": true
}