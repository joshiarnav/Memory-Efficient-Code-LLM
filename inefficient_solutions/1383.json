{
  "problem_idx": 1383,
  "task_name": "Maximum Performance of a Team",
  "markdown_description": "\nYou are given two integers `n` and `k` and two integer arrays `speed` and `efficiency` both of length `n`. There are `n` engineers numbered from `1` to `n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the `ith` engineer respectively.\n\n\nChoose **at most** `k` different engineers out of the `n` engineers to form a team with the maximum **performance**.\n\n\nThe performance of a team is the sum of its engineers' speeds multiplied by the minimum efficiency among its engineers.\n\n\nReturn *the maximum performance of this team*. Since the answer can be a huge number, return it **modulo** `109 + 7`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\n**Output:** 60\n**Explanation:** \nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\n**Output:** 68\n**Explanation:**This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\n**Output:** 72\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= n <= 105`\n* `speed.length == n`\n* `efficiency.length == n`\n* `1 <= speed[i] <= 105`\n* `1 <= efficiency[i] <= 108`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxPerformance(\n        self, n: int, speed: List[int], efficiency: List[int], k: int\n    ) -> int:\n        t = sorted(zip(speed, efficiency), key=lambda x: -x[1])\n        ans = tot = 0\n        mod = 10**9 + 7\n        h = []\n        for s, e in t:\n            tot += s\n            ans = max(ans, tot * e)\n            heappush(h, s)\n            if len(h) == k:\n                tot -= heappop(h)\n        return ans % mod\n",
  "test_case_generator": "\nimport random\nfrom typing import List\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def maxPerformance(\n        self, n: int, speed: List[int], efficiency: List[int], k: int\n    ) -> int:\n        t = sorted(zip(speed, efficiency), key=lambda x: -x[1])\n        ans = tot = 0\n        mod = 10**9 + 7\n        h = []\n        for s, e in t:\n            tot += s\n            ans = max(ans, tot * e)\n            heappush(h, s)\n            if len(h) == k:\n                tot -= heappop(h)\n        return ans % mod\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate the number of engineers (n)\n    n = random.randint(2, 10)\n    \n    # Generate the speeds list\n    max_speed = 10**5\n    speeds = random.choices(range(1, max_speed+1), k=n)\n    \n    # Generate the efficiencies list\n    max_efficiency = 10**8\n    efficiencies = random.choices(range(1, max_efficiency+1), k=n)\n    \n    # Generate k value\n    k = random.randint(1, n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxPerformance(n, speeds, efficiencies, k)\n\n    return n, speeds, efficiencies, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, speeds, efficiencies, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxPerformance(n, speeds, efficiencies, k) == expected_result\n        print(f\"assert solution.maxPerformance({n}, {speeds}, {efficiencies}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxPerformance({n}, {speeds}, {efficiencies}, {k}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.maxPerformance(2, [51939, 71142], [67374189, 97764374], 2) == 482498265\nassert solution.maxPerformance(4, [80064, 22451, 46209, 91218], [54346408, 51196325, 79926606, 4907098], 3) == 122186002\nassert solution.maxPerformance(9, [97165, 24181, 78444, 98456, 41329, 1999, 1436, 41610, 57009], [99563652, 5873640, 42690887, 69803987, 33965842, 34519805, 74112304, 88973620, 7160592], 6) == 908048716\nassert solution.maxPerformance(9, [90413, 2482, 97782, 43364, 74456, 17798, 42865, 36718, 92888], [82594811, 35323568, 22785920, 56985635, 97503465, 87138476, 27779292, 34727874, 70662807], 4) == 489646588\nassert solution.maxPerformance(4, [70571, 75271, 91760, 64331], [91056984, 69493650, 6817584, 84278529], 1) == 982372889\nassert solution.maxPerformance(10, [61812, 45815, 83482, 73532, 28606, 97838, 70183, 97090, 14647, 12345], [1180502, 21842196, 13283199, 13033708, 41218280, 96451403, 38202357, 5517540, 68688230, 86218860], 9) == 852584887\nassert solution.maxPerformance(5, [66798, 57726, 82930, 4404, 4316], [1071128, 30426000, 12123391, 24637828, 36718412], 2) == 689878791\nassert solution.maxPerformance(3, [24483, 94654, 79566], [12508717, 90288701, 16936298], 1) == 186644632\nassert solution.maxPerformance(3, [92695, 35393, 84682], [62265131, 94139466, 14861492], 1) == 666277648\nassert solution.maxPerformance(7, [56170, 59890, 40855, 46789, 3095, 84526, 91285], [85920006, 60828013, 97172576, 37749927, 79082084, 13130544, 22468426], 7) == 90291999\nassert solution.maxPerformance(10, [97283, 11097, 1247, 39566, 48624, 61548, 89821, 780, 12939, 67878], [14563351, 78197580, 17070661, 97615424, 89128995, 96519090, 43595956, 86201597, 7452713, 87492846], 6) == 843041863\nassert solution.maxPerformance(7, [75791, 33865, 86815, 75507, 7928, 98795, 40940], [60853313, 35802317, 11594185, 65918152, 72003834, 76450492, 17693530], 2) == 665649481\nassert solution.maxPerformance(9, [34200, 86443, 14112, 3007, 2449, 53392, 71474, 43352, 50636], [9999755, 8424509, 34036861, 50518096, 23213615, 41755664, 95485723, 46450194, 96327692], 5) == 761553917\nassert solution.maxPerformance(3, [76020, 14204, 13671], [86423087, 56970694, 27391026], 3) == 883027757\nassert solution.maxPerformance(9, [49397, 2976, 55940, 73314, 7887, 14480, 64299, 19078, 76415], [96626869, 1671518, 8615972, 96706832, 22077687, 74539332, 2746348, 98476924, 93318315], 3) == 102662616\nassert solution.maxPerformance(7, [25392, 84068, 43808, 175, 14409, 18199, 51615], [65008395, 42960412, 88069752, 55395918, 95946595, 89947435, 31596151], 7) == 827557068\nassert solution.maxPerformance(10, [45411, 45433, 90642, 4426, 95869, 36477, 66111, 1524, 10724, 29731], [20436436, 68255655, 54004049, 43872492, 32007115, 34425565, 12258285, 18492280, 23369275, 71146611], 5) == 985284686\nassert solution.maxPerformance(8, [34679, 64913, 91615, 36507, 5692, 79863, 12106, 83279], [55530105, 16236480, 5381995, 69521335, 37788889, 35198827, 97603826, 20795853], 4) == 864578991\nassert solution.maxPerformance(6, [91973, 85943, 49634, 27318, 55204, 9589], [88925636, 16288441, 98077013, 62439419, 96650329, 32871625], 1) == 757462582\nassert solution.maxPerformance(3, [66496, 1928, 44923], [23620312, 53182057, 71167441], 3) == 54929664\nassert solution.maxPerformance(3, [19991, 37576, 43835], [27944266, 3014880, 60891925], 1) == 197513692\nassert solution.maxPerformance(3, [81736, 2763, 62160], [99233930, 63267005, 62435163], 2) == 170152160\nassert solution.maxPerformance(9, [35880, 22195, 81983, 70255, 42396, 17965, 65428, 56988, 57539], [59152209, 93822248, 16835156, 53433887, 3677318, 55957017, 27965757, 3988249, 40184191], 5) == 904330964\nassert solution.maxPerformance(5, [99798, 91827, 73537, 22246, 23225], [60412773, 44065659, 91269952, 58404671, 85672620], 5) == 247756331\nassert solution.maxPerformance(10, [49011, 99402, 90980, 20685, 73316, 47954, 81454, 55305, 34441, 92158], [33113171, 28190055, 53102397, 74584231, 25494129, 84018120, 24877224, 99443800, 1107424, 88496427], 5) == 568841114\nassert solution.maxPerformance(9, [77159, 58479, 4772, 16318, 75644, 14573, 2586, 19917, 61477], [53397244, 72622505, 69717224, 60683451, 62320452, 53323790, 81600885, 45784977, 30601609], 9) == 938549355\nassert solution.maxPerformance(9, [27503, 67107, 59216, 48195, 23360, 59025, 38782, 31675, 14499], [55300436, 8725601, 73343700, 32724205, 20404113, 80181372, 88945073, 64874505, 3068981], 3) == 647724488\nassert solution.maxPerformance(3, [2888, 99298, 82045], [48586931, 45767584, 56520729], 2) == 630927219\nassert solution.maxPerformance(8, [81877, 48665, 78666, 3425, 98492, 99060, 7366, 32227], [11147351, 53897406, 57976704, 68804515, 93209093, 91699926, 83855772, 25029523], 8) == 503654347\nassert solution.maxPerformance(7, [89711, 64524, 6526, 20619, 39783, 74573, 37355], [26744576, 33181053, 26237139, 58127447, 54049738, 94171756, 69407053], 1) == 670311034\nassert solution.maxPerformance(3, [8001, 651, 96731], [49737917, 81960838, 84613451], 3) == 743671393\nassert solution.maxPerformance(7, [78445, 71931, 18470, 82287, 3882, 40524, 42282], [57924526, 63885191, 79104127, 69478649, 59449680, 1725556, 98003448], 4) == 58689588\nassert solution.maxPerformance(10, [53763, 65040, 99168, 41476, 603, 47750, 9325, 55783, 67889, 87438], [18802955, 98710493, 89863138, 7633041, 58114719, 6515359, 73579299, 29121300, 59308383, 46772256], 5) == 524000493\nassert solution.maxPerformance(9, [31606, 73027, 91331, 90762, 45495, 13021, 88351, 60700, 61110], [67787362, 80292887, 49997937, 21333732, 78307970, 34380107, 86992819, 77601640, 69243970], 6) == 40696657\nassert solution.maxPerformance(2, [37280, 72775], [7227592, 73457299], 1) == 854897310\nassert solution.maxPerformance(8, [33997, 58192, 43110, 81875, 64251, 25273, 25183, 9631], [12378277, 73396563, 58739455, 25200880, 36629527, 67049554, 71417242, 56664327], 7) == 999006195\nassert solution.maxPerformance(5, [70128, 34468, 9964, 52220, 73532], [71627, 49909306, 51870260, 22750216, 72747139], 3) == 501331775\nassert solution.maxPerformance(10, [85821, 13005, 57536, 79119, 86899, 37680, 65804, 26007, 41609, 63423], [61213822, 74649137, 70698688, 56806606, 55446360, 78713867, 46845070, 12534664, 7505907, 66800069], 4) == 130223960\nassert solution.maxPerformance(6, [29910, 14982, 83356, 93595, 93423, 32667], [17141444, 22257854, 68129305, 55246481, 42670194, 48532254], 1) == 986307834\nassert solution.maxPerformance(8, [39581, 96044, 42550, 32408, 74989, 32736, 20203, 62007], [83251891, 30219932, 49854417, 29975922, 79386035, 68848826, 17780581, 57647054], 8) == 482940979\nassert solution.maxPerformance(10, [7850, 18748, 48315, 53419, 76926, 41928, 69156, 70254, 26797, 8651], [30083140, 70151074, 78283792, 26328977, 52395134, 34293931, 84631535, 40073886, 71668272, 63768372], 6) == 63455287\nassert solution.maxPerformance(7, [53195, 91915, 22421, 29900, 80905, 13617, 96764], [81683987, 62157881, 51228564, 16646660, 94904246, 87723241, 38943463], 3) == 613375879\nassert solution.maxPerformance(4, [8168, 41441, 37565, 26434], [91064249, 63620899, 38964468, 47923922], 3) == 413477164\nassert solution.maxPerformance(7, [7807, 99430, 1255, 90278, 72561, 92957, 92363], [31705837, 57192239, 22892914, 48477425, 79019626, 84084188, 33580403], 7) == 441652510\nassert solution.maxPerformance(7, [68710, 45893, 55238, 43288, 84537, 12541, 47430], [35932623, 91639628, 54106761, 3205074, 90538613, 47158848, 94087846], 2) == 109058135\nassert solution.maxPerformance(7, [44156, 22660, 28433, 4384, 14282, 19204, 77386], [54597594, 51066194, 2226376, 15397540, 78955819, 72961331, 56812005], 6) == 849815961\nassert solution.maxPerformance(9, [38855, 71126, 76605, 98460, 82489, 14028, 73404, 35081, 67580], [76861364, 67864814, 72853088, 31151035, 44760134, 23847579, 61187074, 60471575, 78993576], 6) == 76991815\nassert solution.maxPerformance(3, [43099, 30949, 90912], [85071825, 26612730, 45971359], 3) == 667747829\nassert solution.maxPerformance(6, [82198, 81159, 61945, 61432, 76128, 33931], [36735801, 18055301, 6211251, 74680498, 83536100, 63922112], 3) == 66832258\nassert solution.maxPerformance(8, [37440, 5095, 57910, 25862, 82162, 21463, 9703, 74885], [7872666, 68885150, 66730364, 35996950, 7051947, 88678031, 84980432, 1131647], 4) == 65064256\nassert solution.maxPerformance(4, [73984, 16202, 91529, 99546], [96467730, 39492698, 96516401, 7110647], 3) == 663283728\nassert solution.maxPerformance(8, [44387, 91262, 17465, 50113, 77264, 10505, 19023, 14377], [10055068, 88255387, 3790226, 62524945, 7147990, 36947049, 45338521, 91716525], 5) == 385165474\nassert solution.maxPerformance(6, [71871, 48667, 77802, 23521, 39370, 28412], [51818486, 38401231, 56765931, 412180, 79081502, 76888413], 3) == 921980333\nassert solution.maxPerformance(4, [38150, 63078, 90986, 16204], [21856670, 3987511, 4520203, 15055226], 4) == 831954669\nassert solution.maxPerformance(2, [49768, 65576], [7118970, 29719049], 1) == 856343588\nassert solution.maxPerformance(10, [38797, 63813, 57294, 21505, 48917, 31179, 32330, 84989, 6561, 12216], [84947860, 30587729, 93032844, 18016917, 56545034, 87027671, 8411631, 39783280, 72317875, 50427241], 8) == 448507881\nassert solution.maxPerformance(9, [47253, 39166, 6837, 23211, 95268, 53242, 83490, 62990, 91476], [88445084, 8093697, 4838771, 28192052, 85598949, 30114660, 12116722, 94148733, 84570810], 7) == 430973658\nassert solution.maxPerformance(9, [37090, 30235, 3413, 87290, 32125, 21369, 31575, 13066, 31905], [63865530, 93594001, 58236159, 19714941, 94796199, 21670456, 8428355, 57932641, 76211032], 4) == 56634427\nassert solution.maxPerformance(7, [39902, 89235, 86767, 514, 48239, 76441, 20782], [15090623, 43415514, 51248247, 28423981, 36116497, 86262002, 5432401], 2) == 123837828\nassert solution.maxPerformance(7, [65397, 20950, 19308, 89062, 17523, 38371, 91247], [91966742, 7312101, 54960648, 21034138, 36967680, 84907217, 89888008], 4) == 180807349\nassert solution.maxPerformance(4, [11253, 80093, 69279, 77119], [40384924, 42322025, 2452584, 86296056], 2) == 65496079\nassert solution.maxPerformance(6, [18207, 9492, 74644, 33313, 73410, 71825], [26602839, 79109331, 37051362, 36666910, 48292066, 70130780], 2) == 698156419\nassert solution.maxPerformance(6, [1908, 57473, 83114, 65103, 16232, 32152], [21460512, 15635077, 5469392, 13806096, 14507704, 44660137], 6) == 632186626\nassert solution.maxPerformance(8, [57037, 38040, 28294, 71029, 89921, 1721, 4172, 27445], [48001173, 84643108, 43634195, 39419432, 42142802, 52769909, 8659617, 81210542], 6) == 638550889\nassert solution.maxPerformance(8, [52308, 56278, 61841, 59469, 95567, 67644, 41799, 34575], [40971606, 78826087, 53028153, 15241601, 94808174, 30791448, 11987897, 22942585], 2) == 347096732\nassert solution.maxPerformance(2, [92430, 93221], [64397621, 330430], 2) == 272067366\nassert solution.maxPerformance(7, [70032, 30974, 2536, 78223, 82763, 29272, 17626], [70859537, 73812631, 78233935, 16771821, 84855970, 38605421, 61686645], 4) == 485948378\nassert solution.maxPerformance(3, [11068, 23569, 25866], [63424725, 76402410, 82717597], 1) == 573349029\nassert solution.maxPerformance(10, [98626, 47664, 29573, 26083, 3867, 15371, 33181, 90990, 50162, 63998], [56381507, 25215873, 15701963, 23743831, 33972095, 97722326, 92012000, 85480372, 64159497, 5807295], 3) == 44890813\nassert solution.maxPerformance(4, [48914, 84143, 93631, 54799], [61640471, 6040313, 50994747, 6120393], 1) == 689122939\nassert solution.maxPerformance(10, [4704, 74378, 73364, 25404, 25343, 28716, 51504, 54669, 37087, 38774], [20648797, 57783919, 46483793, 43909901, 61619295, 87200726, 20133592, 30745490, 24237408, 22420989], 1) == 852297303\nassert solution.maxPerformance(8, [5657, 45542, 57995, 12231, 75324, 98531, 76033, 20573], [8730330, 7319019, 79084363, 57276534, 87105328, 62206145, 8092958, 3626148], 7) == 494617296\nassert solution.maxPerformance(5, [12207, 22096, 64701, 51648, 98854], [23492038, 11402493, 27130229, 28912694, 1865902], 4) == 574991829\nassert solution.maxPerformance(5, [13124, 29404, 47445, 97291, 42040], [21572049, 31426947, 82293878, 36582181, 15982773], 1) == 433014382\nassert solution.maxPerformance(5, [79524, 4644, 90457, 66818, 37673], [9351351, 92510511, 87736291, 78682290, 96434950], 4) == 355515752\nassert solution.maxPerformance(7, [66925, 62886, 68553, 84523, 23443, 2618, 91627], [85806023, 3170944, 7543201, 28472726, 92935351, 26912692, 48185503], 2) == 118632186\nassert solution.maxPerformance(2, [82247, 4098], [17870938, 60884715], 2) == 66130809\nassert solution.maxPerformance(2, [91359, 58873], [63987129, 8438100], 2) == 800077396\nassert solution.maxPerformance(6, [83155, 21208, 83459, 75989, 98848, 51087], [83836297, 17589412, 42492385, 89982957, 70812913, 97282889], 1) == 714775231\nassert solution.maxPerformance(10, [79271, 9994, 71064, 32748, 91584, 52564, 72432, 96217, 30065, 7358], [21647377, 83816160, 15819739, 39046640, 2327664, 46741600, 62995102, 98478919, 8065673, 56358058], 7) == 633927815\nassert solution.maxPerformance(8, [71551, 85386, 19761, 41931, 52760, 2549, 5956, 57506], [99943126, 85605562, 63978594, 65157983, 14182710, 48796930, 7219104, 21474376], 6) == 575929717\nassert solution.maxPerformance(7, [94589, 71063, 8212, 40181, 58862, 77340, 25158], [99250170, 22366258, 79734970, 13156191, 61714046, 59307752, 54082576], 7) == 507258734\nassert solution.maxPerformance(3, [27377, 51125, 2655], [29711707, 85586617, 62729092], 3) == 615763500\nassert solution.maxPerformance(6, [61665, 32249, 76153, 16746, 82721, 28741], [55861399, 98512432, 48039443, 65697857, 46183329, 78856779], 2) == 330160187\nassert solution.maxPerformance(2, [94249, 45293], [74020709, 20314074], 2) == 377753709\nassert solution.maxPerformance(4, [31908, 91768, 37269, 17515], [97154430, 94173877, 72068014, 41800465], 2) == 48330323\nassert solution.maxPerformance(7, [48651, 89560, 36161, 29526, 43114, 76441, 38860], [71835940, 611624, 56954016, 21986315, 21331370, 22006138, 27833289], 7) == 195120884\nassert solution.maxPerformance(4, [95493, 22717, 29495, 66552], [20868530, 37501971, 32320045, 18574951], 2) == 977913732\nassert solution.maxPerformance(4, [94213, 79961, 99131, 76558], [61945076, 28623196, 55557397, 90083457], 3) == 52460129\nassert solution.maxPerformance(8, [3879, 54156, 1804, 21603, 96931, 40742, 38347, 26556], [3608484, 70236817, 84528592, 38415404, 40811038, 90809484, 13960265, 14544398], 8) == 377837468\nassert solution.maxPerformance(8, [38300, 12245, 32297, 10167, 42913, 99687, 58826, 72512], [6575654, 4354300, 98748409, 53507827, 43827965, 54055772, 26127144, 85534649], 2) == 349817472\nassert solution.maxPerformance(4, [88575, 53042, 9022, 12640], [80010944, 13396890, 33666201, 87740842], 2) == 307640274\nassert solution.maxPerformance(10, [38736, 77561, 72960, 85760, 19625, 20944, 22653, 59899, 3036, 90903], [26767335, 52063510, 50863972, 37357905, 74023250, 16646884, 34787927, 13941494, 66424559, 22178934], 2) == 95875820\nassert solution.maxPerformance(5, [31542, 32971, 16574, 27429, 22630], [45999426, 63645102, 1985187, 43427982, 61439873], 2) == 118354761\nassert solution.maxPerformance(5, [44640, 19294, 27162, 85786, 81062], [93037410, 92534106, 16509626, 62805741, 15241995], 4) == 275476699\nassert solution.maxPerformance(8, [5691, 39011, 36489, 18120, 58088, 51075, 62997, 61929], [71362216, 76925126, 69178420, 61394897, 94374846, 20218150, 68945507, 15537323], 2) == 266656659\nassert solution.maxPerformance(3, [78207, 75313, 96693], [49384991, 52406972, 98836434], 2) == 791245870\nassert solution.maxPerformance(7, [48803, 99471, 99937, 7549, 93731, 29291, 78555], [9219973, 79353807, 79818478, 28186974, 70256127, 90101352, 95220441], 5) == 652887898\nassert solution.maxPerformance(10, [53102, 78116, 2903, 70012, 98634, 16889, 45164, 48831, 64805, 36582], [89745502, 19376750, 60775838, 21540280, 44999358, 31698647, 11367885, 18767779, 45060576, 94917190], 5) == 5550661\nassert solution.maxPerformance(10, [38805, 2728, 74664, 66511, 89327, 91077, 83044, 53445, 26393, 13603], [22030798, 8934572, 87860276, 37349608, 78190659, 770003, 48890047, 1745216, 66598321, 31125841], 5) == 907677547",
  "inefficient_solution": "class Solution:\n    def maxPerformance(\n        self, n: int, speed: List[int], efficiency: List[int], k: int\n    ) -> int:\n        speed_list = [0] * n\n        efficiency_list = [0] * n\n        for i in range(n):\n            speed_list[i] = speed[i]\n            efficiency_list[i] = efficiency[i]\n        speed_list.sort(reverse=True)\n        efficiency_list.sort(reverse=True)\n        ans = tot = 0\n        mod = 10**9 + 7\n        h = []\n        for s, e in zip(speed_list, efficiency_list):\n            h.append(s)\n            tot += s\n            temp = []\n            for _ in range(len(h)):\n                temp.append(heappop(h))\n            if len(temp) == k:\n                tot -= max(temp)\n                temp.sort(reverse=True)\n                for x in temp:\n                    heappush(h, x)\n            ans = max(ans, tot * e)\n        return ans % mod",
  "is_python": true
}