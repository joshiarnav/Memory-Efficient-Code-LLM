{
  "problem_idx": 75,
  "task_name": "Sort Colors",
  "markdown_description": "\nGiven an array `nums` with `n` objects colored red, white, or blue, sort them **[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)** so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\n\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.\n\n\nYou must solve this problem without using the library's sort function.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [2,0,2,1,1,0]\n**Output:** [0,0,1,1,2,2]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,0,1]\n**Output:** [0,1,2]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `1 <= n <= 300`\n* `nums[i]` is either `0`, `1`, or `2`.\n\n\n\u00a0\n\n\n**Follow up:**\u00a0Could you come up with a one-pass algorithm using only\u00a0constant extra space?\n\n\n",
  "canonical_solution": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        i, j, k = -1, len(nums), 0\n        while k < j:\n            if nums[k] == 0:\n                i += 1\n                nums[i], nums[k] = nums[k], nums[i]\n                k += 1\n            elif nums[k] == 2:\n                j -= 1\n                nums[j], nums[k] = nums[k], nums[j]\n            else:\n                k += 1\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def sortColors(self, nums):\n        i, j, k = -1, len(nums), 0\n        while k < j:\n            if nums[k] == 0:\n                i += 1\n                nums[i], nums[k] = nums[k], nums[i]\n                k += 1\n            elif nums[k] == 2:\n                j -= 1\n                nums[j], nums[k] = nums[k], nums[j]\n            else:\n                k += 1\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list consisting of 0, 1, and 2\n    nums = random.choices([0, 1, 2], k=random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = sorted(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        solution.sortColors(nums)\n        assert nums == expected_result\n        print(f\"assert nums == {expected_result}\")\n        test_case_generator_results.append(f\"assert nums == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert nums == [0, 0, 1, 2]\nassert nums == [0, 2]\nassert nums == [0, 0, 0, 2, 2]\nassert nums == [0, 0, 0, 1, 1, 1, 1, 1]\nassert nums == [0, 0, 0, 0, 0, 0, 1, 1, 2, 2]\nassert nums == [0, 0, 0, 1, 1, 1, 2, 2, 2]\nassert nums == [1, 2, 2]\nassert nums == [0, 0, 1, 1, 2]\nassert nums == [0, 0, 0, 1, 1, 1, 2, 2, 2]\nassert nums == [0, 0, 0, 1, 1, 1, 2, 2]\nassert nums == [1, 1, 1, 1, 1, 1, 2]\nassert nums == [0, 0, 0, 0, 0, 1, 1, 1, 2]\nassert nums == [0, 0, 0, 1, 1, 2, 2, 2, 2]\nassert nums == [0, 1, 1, 1, 2, 2]\nassert nums == [0, 0, 1, 1, 2, 2]\nassert nums == [1, 1, 1, 2, 2, 2, 2, 2]\nassert nums == [0, 2]\nassert nums == [0, 2]\nassert nums == [0, 1, 1, 2, 2]\nassert nums == [1, 1, 1, 1, 1, 2, 2, 2]\nassert nums == [0, 0, 0, 1, 2]\nassert nums == [0, 0, 1, 2, 2, 2, 2, 2, 2]\nassert nums == [0, 0, 1]\nassert nums == [0, 1, 1, 2]\nassert nums == [0, 0, 0, 0, 2, 2, 2, 2, 2]\nassert nums == [0, 0, 1, 1, 1, 1, 2, 2]\nassert nums == [0, 0, 2, 2]\nassert nums == [0, 1, 2, 2]\nassert nums == [0, 0, 0, 1, 1, 2, 2, 2]\nassert nums == [0, 0, 2, 2]\nassert nums == [0, 1, 1]\nassert nums == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert nums == [0, 1, 1, 1, 2, 2]\nassert nums == [0, 1]\nassert nums == [0, 0, 1, 1, 1, 2, 2, 2, 2]\nassert nums == [0, 1, 1, 1, 1, 1, 1, 2, 2]\nassert nums == [0, 0, 0, 0, 1, 1, 1, 1, 2, 2]\nassert nums == [0, 0, 0, 0, 0, 1, 2, 2, 2]\nassert nums == [0, 1, 1, 1, 2, 2, 2, 2]\nassert nums == [0, 0, 1, 2]\nassert nums == [0, 1]\nassert nums == [0, 0, 1, 1, 2, 2, 2, 2, 2]\nassert nums == [0, 0, 1, 1, 2, 2, 2]\nassert nums == [0, 2, 2]\nassert nums == [0, 0, 1, 1, 2, 2]\nassert nums == [1, 2, 2, 2, 2]\nassert nums == [0, 0, 1, 2]\nassert nums == [0, 0, 1, 2]\nassert nums == [1, 1]\nassert nums == [0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert nums == [0, 1, 2, 2, 2, 2]\nassert nums == [1, 1, 1, 2, 2]\nassert nums == [0, 1, 1, 2]\nassert nums == [0, 0, 0, 1, 2, 2, 2, 2, 2]\nassert nums == [0, 0, 1, 1, 2]\nassert nums == [0, 0, 0, 1, 1, 1, 2, 2, 2]\nassert nums == [0, 1, 2, 2]\nassert nums == [0, 0, 0, 2, 2, 2]\nassert nums == [0, 0, 2, 2, 2, 2]\nassert nums == [0, 0, 0, 1]\nassert nums == [0, 1, 1, 1, 1, 2, 2]\nassert nums == [0, 0, 0, 0, 1, 1, 2, 2, 2]\nassert nums == [0, 1, 1, 2, 2, 2, 2]\nassert nums == [1, 2]\nassert nums == [0, 0, 0, 0, 0, 1, 1, 2, 2, 2]\nassert nums == [1, 1, 1, 2, 2]\nassert nums == [0, 0, 0, 1, 1, 1, 2]\nassert nums == [0, 2, 2, 2]\nassert nums == [0, 0, 0, 0, 1, 2]\nassert nums == [0, 0, 2]\nassert nums == [0, 0, 0, 0, 0, 1, 1, 2, 2]\nassert nums == [0, 1]\nassert nums == [0, 1, 1, 1, 2]\nassert nums == [0, 0, 1, 2]\nassert nums == [0, 0, 1, 1, 2]\nassert nums == [0, 0, 0, 1, 1]\nassert nums == [0, 0, 0, 0, 0, 1, 2, 2]\nassert nums == [0, 0, 0, 1, 1, 1, 2, 2, 2, 2]\nassert nums == [0, 1, 1, 2]\nassert nums == [0, 0, 1, 1, 2, 2]\nassert nums == [0, 1, 1, 1]\nassert nums == [0, 1, 2, 2]\nassert nums == [0, 0, 1, 1, 1, 1, 2]\nassert nums == [0, 1, 2]\nassert nums == [0, 0, 1, 2, 2]\nassert nums == [0, 1, 2, 2]\nassert nums == [0, 0, 1, 2, 2, 2]\nassert nums == [0, 0, 1, 1, 2, 2]\nassert nums == [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]\nassert nums == [0, 1, 1, 1, 1, 2]\nassert nums == [0, 1, 1, 2]\nassert nums == [0, 0, 1, 1, 1, 2, 2, 2]\nassert nums == [0, 1, 1]\nassert nums == [0, 1, 2]\nassert nums == [0, 0, 1, 1, 1]\nassert nums == [0, 0, 0, 0, 2, 2, 2, 2]\nassert nums == [0, 0, 1, 2, 2]\nassert nums == [0, 0, 1, 2]\nassert nums == [0, 1, 2]\nassert nums == [0, 0, 0, 0, 0, 1, 2, 2, 2, 2]",
  "inefficient_solution": "class Solution:\n    def sortColors(self, nums: List[int]) -> None:\n        red_arr = [0] * len(nums)\n        white_arr = [0] * len(nums)\n        blue_arr = [0] * len(nums)\n        for num in nums:\n            if num == 0:\n                red_arr.append(num)\n            elif num == 1:\n                white_arr.append(num)\n            else:\n                blue_arr.append(num)\n        nums[:] = red_arr + white_arr + blue_arr",
  "is_python": true
}