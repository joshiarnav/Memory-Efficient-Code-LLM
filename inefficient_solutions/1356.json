{
  "problem_idx": 1356,
  "task_name": "Sort Integers by The Number of ",
  "markdown_description": "\nYou are given an integer array `arr`. Sort the integers in the array\u00a0in ascending order by the number of `1`'s\u00a0in their binary representation and in case of two or more integers have the same number of `1`'s you have to sort them in ascending order.\n\n\nReturn *the array after sorting it*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** arr = [0,1,2,3,4,5,6,7,8]\n**Output:** [0,1,2,4,8,3,5,6,7]\n**Explantion:** [0] is the only integer with 0 bits.\n[1,2,4,8] all have 1 bit.\n[3,5,6] have 2 bits.\n[7] has 3 bits.\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** arr = [1024,512,256,128,64,32,16,8,4,2,1]\n**Output:** [1,2,4,8,16,32,64,128,256,512,1024]\n**Explantion:** All integers have 1 bit in the binary representation, you should just sort them in ascending order.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= arr.length <= 500`\n* `0 <= arr[i] <= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def sortByBits(self, arr: List[int]) -> List[int]:\n        return sorted(arr, key=lambda x: (x.bit_count(), x))\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def sortByBits(self, arr):\n        return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    arr = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.sortByBits(arr)\n\n    return arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.sortByBits(arr) == expected_result\n        print(f\"assert solution.sortByBits({arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.sortByBits({arr}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.sortByBits([65, 80]) == [65, 80]\nassert solution.sortByBits([88, 21, 67, 91, 74, 57, 45, 59]) == [21, 67, 74, 88, 45, 57, 59, 91]\nassert solution.sortByBits([2, 28, 32, 99, 95, 10]) == [2, 32, 10, 28, 99, 95]\nassert solution.sortByBits([60, 64, 86]) == [64, 60, 86]\nassert solution.sortByBits([88, 70, 69, 30, 63]) == [69, 70, 88, 30, 63]\nassert solution.sortByBits([29, 48, 70, 47, 76, 27, 54, 94, 63]) == [48, 70, 76, 27, 29, 54, 47, 94, 63]\nassert solution.sortByBits([59, 19]) == [19, 59]\nassert solution.sortByBits([27, 76, 69, 99, 94, 56, 70, 98]) == [56, 69, 70, 76, 98, 27, 99, 94]\nassert solution.sortByBits([37, 30, 28, 55, 73, 36, 78, 97]) == [36, 28, 37, 73, 97, 30, 78, 55]\nassert solution.sortByBits([69, 67, 26, 54, 74, 20, 16, 41, 75, 21]) == [16, 20, 21, 26, 41, 67, 69, 74, 54, 75]\nassert solution.sortByBits([57, 17, 98, 51, 26, 85]) == [17, 26, 98, 51, 57, 85]\nassert solution.sortByBits([8, 68, 76, 37, 34, 64, 33, 26]) == [8, 64, 33, 34, 68, 26, 37, 76]\nassert solution.sortByBits([83, 75, 93, 27, 64, 91, 16]) == [16, 64, 27, 75, 83, 91, 93]\nassert solution.sortByBits([70, 21, 73, 40, 62, 36, 90, 97, 64]) == [64, 36, 40, 21, 70, 73, 97, 90, 62]\nassert solution.sortByBits([58, 30, 93]) == [30, 58, 93]\nassert solution.sortByBits([70, 26, 98, 40, 48, 72]) == [40, 48, 72, 26, 70, 98]\nassert solution.sortByBits([2, 58, 44, 15, 56, 70, 90, 47, 59, 64]) == [2, 64, 44, 56, 70, 15, 58, 90, 47, 59]\nassert solution.sortByBits([5, 61, 28]) == [5, 28, 61]\nassert solution.sortByBits([69, 23, 25, 83, 31, 61, 51, 89]) == [25, 69, 23, 51, 83, 89, 31, 61]\nassert solution.sortByBits([16, 42, 1, 88, 34, 100, 72, 92, 8]) == [1, 8, 16, 34, 72, 42, 88, 100, 92]\nassert solution.sortByBits([31, 26, 3, 85, 79, 38, 89, 55]) == [3, 26, 38, 85, 89, 31, 55, 79]\nassert solution.sortByBits([38, 39, 95, 17, 26]) == [17, 26, 38, 39, 95]\nassert solution.sortByBits([23, 25, 94, 11, 27, 4, 9]) == [4, 9, 11, 25, 23, 27, 94]\nassert solution.sortByBits([14, 40, 11]) == [40, 11, 14]\nassert solution.sortByBits([24, 72, 19, 48, 10, 75, 42, 78]) == [10, 24, 48, 72, 19, 42, 75, 78]\nassert solution.sortByBits([20, 51, 28, 62, 34]) == [20, 34, 28, 51, 62]\nassert solution.sortByBits([97, 85, 50, 19, 77, 8, 13, 37, 14]) == [8, 13, 14, 19, 37, 50, 97, 77, 85]\nassert solution.sortByBits([68, 71, 98, 4, 37, 81]) == [4, 68, 37, 81, 98, 71]\nassert solution.sortByBits([71, 21, 43, 76, 94, 2, 13, 61, 55]) == [2, 13, 21, 76, 43, 71, 55, 61, 94]\nassert solution.sortByBits([35, 37]) == [35, 37]\nassert solution.sortByBits([89, 34, 75, 62]) == [34, 75, 89, 62]\nassert solution.sortByBits([24, 81, 63, 12, 16, 29]) == [16, 12, 24, 81, 29, 63]\nassert solution.sortByBits([55, 93, 81, 86, 16, 34, 2, 95, 87]) == [2, 16, 34, 81, 86, 55, 87, 93, 95]\nassert solution.sortByBits([89, 1, 22, 77, 33]) == [1, 33, 22, 77, 89]\nassert solution.sortByBits([7, 9]) == [9, 7]\nassert solution.sortByBits([57, 69, 58, 68, 15, 80]) == [68, 80, 69, 15, 57, 58]\nassert solution.sortByBits([82, 86]) == [82, 86]\nassert solution.sortByBits([28, 71, 33]) == [33, 28, 71]\nassert solution.sortByBits([12, 49, 65, 44, 64, 3, 50, 39, 37]) == [64, 3, 12, 65, 37, 44, 49, 50, 39]\nassert solution.sortByBits([36, 13, 28, 59]) == [36, 13, 28, 59]\nassert solution.sortByBits([30, 11, 56, 64, 44, 97, 7, 72, 80]) == [64, 72, 80, 7, 11, 44, 56, 97, 30]\nassert solution.sortByBits([98, 8, 10, 28, 11, 29, 47, 12, 66]) == [8, 10, 12, 66, 11, 28, 98, 29, 47]\nassert solution.sortByBits([75, 4, 76, 81, 12, 97]) == [4, 12, 76, 81, 97, 75]\nassert solution.sortByBits([67, 51, 97, 22]) == [22, 67, 97, 51]\nassert solution.sortByBits([48, 34, 20, 59, 54, 81]) == [20, 34, 48, 81, 54, 59]\nassert solution.sortByBits([25, 97, 51, 75, 47]) == [25, 97, 51, 75, 47]\nassert solution.sortByBits([18, 82]) == [18, 82]\nassert solution.sortByBits([89, 97, 52]) == [52, 97, 89]\nassert solution.sortByBits([46, 17, 86, 15, 25, 21, 39, 76]) == [17, 21, 25, 76, 15, 39, 46, 86]\nassert solution.sortByBits([25, 52, 24, 30, 76, 99, 5]) == [5, 24, 25, 52, 76, 30, 99]\nassert solution.sortByBits([11, 4, 7, 86, 63, 45, 37, 41]) == [4, 7, 11, 37, 41, 45, 86, 63]\nassert solution.sortByBits([86, 19, 75, 16, 17, 82, 48, 11, 84]) == [16, 17, 48, 11, 19, 82, 84, 75, 86]\nassert solution.sortByBits([43, 85, 51, 40, 27, 10, 37]) == [10, 40, 37, 27, 43, 51, 85]\nassert solution.sortByBits([77, 38, 40, 10, 92, 34, 5, 7, 22, 27]) == [5, 10, 34, 40, 7, 22, 38, 27, 77, 92]\nassert solution.sortByBits([41, 87, 67, 83, 72, 84]) == [72, 41, 67, 84, 83, 87]\nassert solution.sortByBits([6, 70, 97, 87]) == [6, 70, 97, 87]\nassert solution.sortByBits([73, 61, 28, 14, 54, 74, 43, 39]) == [14, 28, 73, 74, 39, 43, 54, 61]\nassert solution.sortByBits([72, 71]) == [72, 71]\nassert solution.sortByBits([67, 88, 23, 86, 49, 19, 44, 98, 35, 91]) == [19, 35, 44, 49, 67, 88, 98, 23, 86, 91]\nassert solution.sortByBits([93, 6, 89, 50, 31, 43, 71]) == [6, 50, 43, 71, 89, 31, 93]\nassert solution.sortByBits([83, 8, 82, 97, 89, 40, 52]) == [8, 40, 52, 82, 97, 83, 89]\nassert solution.sortByBits([86, 67]) == [67, 86]\nassert solution.sortByBits([90, 9, 69]) == [9, 69, 90]\nassert solution.sortByBits([48, 71, 10, 37]) == [10, 48, 37, 71]\nassert solution.sortByBits([98, 22, 93, 5, 28, 89, 8, 88]) == [8, 5, 22, 28, 88, 98, 89, 93]\nassert solution.sortByBits([54, 86, 97, 83, 18, 69, 87, 3, 82, 59]) == [3, 18, 69, 82, 97, 54, 83, 86, 59, 87]\nassert solution.sortByBits([100, 70, 98]) == [70, 98, 100]\nassert solution.sortByBits([23, 45, 91]) == [23, 45, 91]\nassert solution.sortByBits([91, 82]) == [82, 91]\nassert solution.sortByBits([42, 46, 4, 56, 63, 100, 19]) == [4, 19, 42, 56, 100, 46, 63]\nassert solution.sortByBits([43, 46, 28, 100, 78, 58, 93, 92]) == [28, 100, 43, 46, 58, 78, 92, 93]\nassert solution.sortByBits([11, 2, 65, 82, 42, 76, 50, 29, 49]) == [2, 65, 11, 42, 49, 50, 76, 82, 29]\nassert solution.sortByBits([40, 47, 60, 63, 15, 25, 19]) == [40, 19, 25, 15, 60, 47, 63]\nassert solution.sortByBits([93, 79, 15, 23, 57, 87, 22, 20, 11, 51]) == [20, 11, 22, 15, 23, 51, 57, 79, 87, 93]\nassert solution.sortByBits([87, 48, 82, 88, 69, 8, 34]) == [8, 34, 48, 69, 82, 88, 87]\nassert solution.sortByBits([58, 51, 92, 95, 53]) == [51, 53, 58, 92, 95]\nassert solution.sortByBits([74, 46, 68, 21, 88, 63, 82, 41, 73, 48]) == [48, 68, 21, 41, 73, 74, 82, 88, 46, 63]\nassert solution.sortByBits([82, 48, 46, 33, 3, 42, 84]) == [3, 33, 48, 42, 82, 84, 46]\nassert solution.sortByBits([51, 9, 93, 67, 82, 7]) == [9, 7, 67, 82, 51, 93]\nassert solution.sortByBits([35, 32, 7, 18, 83, 23]) == [32, 18, 7, 35, 23, 83]\nassert solution.sortByBits([90, 81, 71, 83, 41, 100, 51, 79]) == [41, 81, 100, 51, 71, 83, 90, 79]\nassert solution.sortByBits([19, 6, 85]) == [6, 19, 85]\nassert solution.sortByBits([41, 54, 74, 5, 79, 51, 42, 87]) == [5, 41, 42, 74, 51, 54, 79, 87]\nassert solution.sortByBits([78, 51, 80, 38, 92, 26]) == [80, 26, 38, 51, 78, 92]\nassert solution.sortByBits([68, 92, 6, 66, 76, 79]) == [6, 66, 68, 76, 92, 79]\nassert solution.sortByBits([21, 1, 78, 25, 81, 65, 23, 12, 3]) == [1, 3, 12, 65, 21, 25, 81, 23, 78]\nassert solution.sortByBits([54, 35, 88, 94, 99]) == [35, 88, 54, 99, 94]\nassert solution.sortByBits([11, 25, 13]) == [11, 13, 25]\nassert solution.sortByBits([69, 13]) == [13, 69]\nassert solution.sortByBits([6, 88]) == [6, 88]\nassert solution.sortByBits([57, 98, 6, 39, 86, 97, 24, 60, 18]) == [6, 18, 24, 97, 98, 39, 57, 60, 86]\nassert solution.sortByBits([94, 55]) == [55, 94]\nassert solution.sortByBits([92, 22, 72, 43, 36, 79, 71]) == [36, 72, 22, 43, 71, 92, 79]\nassert solution.sortByBits([67, 18, 59, 20, 49, 93, 92, 60]) == [18, 20, 49, 67, 60, 92, 59, 93]\nassert solution.sortByBits([60, 49, 90, 50]) == [49, 50, 60, 90]\nassert solution.sortByBits([81, 62, 80, 84, 69, 87, 78, 54, 95]) == [80, 69, 81, 84, 54, 78, 62, 87, 95]\nassert solution.sortByBits([31, 1, 59, 73, 52, 3, 89]) == [1, 3, 52, 73, 89, 31, 59]\nassert solution.sortByBits([10, 28, 90, 29, 15, 7, 74, 37, 49, 61]) == [10, 7, 28, 37, 49, 74, 15, 29, 90, 61]\nassert solution.sortByBits([76, 53, 62, 36, 96, 80, 85, 73, 71]) == [36, 80, 96, 73, 76, 53, 71, 85, 62]\nassert solution.sortByBits([96, 38, 92, 46, 57, 79, 70, 4, 58]) == [4, 96, 38, 70, 46, 57, 58, 92, 79]",
  "inefficient_solution": "class Solution:\n    def sortByBits(self, arr):\n        n = len(arr)\n        bits = [0] * n\n        for i in range(n):\n            bits[i] = bin(arr[i]).count('1')\n        bit_counts = [0] * 500\n        for i in range(n):\n            bit_counts[bits[i]] += 1\n        counts = [0] * 500\n        for i in range(500):\n            counts[i] = [0] * bit_counts[i]\n        for i in range(n):\n            counts[bits[i]][0] = arr[i]\n            counts[bits[i]][1] = i\n        sorted_counts = [0] * 500\n        for i in range(500):\n            sorted_counts[i] = sorted(counts[i], key=lambda x: x[0])\n        sorted_arr = [0] * n\n        for i in range(500):\n            for j in range(bit_counts[i]):\n                sorted_arr[sorted_counts[i][j][1]] = sorted_counts[i][j][0]\n        return sorted_arr",
  "is_python": true
}