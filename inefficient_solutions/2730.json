{
  "problem_idx": 2730,
  "task_name": "Find the Longest Semi",
  "markdown_description": "\nYou are given a **0-indexed** string `s` that consists of digits from `0` to `9`.\n\n\nA string `t` is called a **semi-repetitive** if there is at most one consecutive pair of the same digits inside `t`. For example, `0010`, `002020`, `0123`, `2002`, and `54944` are semi-repetitive while\u00a0`00101022`, and `1101234883` are not.\n\n\nReturn *the length of the longest semi-repetitive substring inside* `s`.\n\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"52233\"\n**Output:** 4\n**Explanation:** The longest semi-repetitive substring is \"5223\", which starts at i = 0 and ends at j = 3. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"5494\"\n**Output:** 4\n**Explanation:** s is a semi-reptitive string, so the answer is 4.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"1111111\"\n**Output:** 2\n**Explanation:** The longest semi-repetitive substring is \"11\", which starts at i = 0 and ends at j = 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 50`\n* `'0' <= s[i] <= '9'`\n\n\n",
  "canonical_solution": "class Solution:\n    def longestSemiRepetitiveSubstring(self, s: str) -> int:\n        n = len(s)\n        ans = cnt = j = 0\n        for i in range(n):\n            if i and s[i] == s[i - 1]:\n                cnt += 1\n            while cnt > 1:\n                if s[j] == s[j + 1]:\n                    cnt -= 1\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def longestSemiRepetitiveSubstring(self, s: str) -> int:\n        n = len(s)\n        ans = cnt = j = 0\n        for i in range(n):\n            if i and s[i] == s[i - 1]:\n                cnt += 1\n            while cnt > 1:\n                if s[j] == s[j + 1]:\n                    cnt -= 1\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random string\n    s = ''.join(random.choices('0123456789', k=random.randint(1, 50)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestSemiRepetitiveSubstring(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestSemiRepetitiveSubstring(s) == expected_result\n        print(f'assert solution.longestSemiRepetitiveSubstring(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.longestSemiRepetitiveSubstring(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.longestSemiRepetitiveSubstring(\"76028945156889382555369728329413275\") == 18\nassert solution.longestSemiRepetitiveSubstring(\"64399398076\") == 11\nassert solution.longestSemiRepetitiveSubstring(\"8640262763741045105225532113581489557170\") == 22\nassert solution.longestSemiRepetitiveSubstring(\"54407478\") == 8\nassert solution.longestSemiRepetitiveSubstring(\"313844309209182164099340282720230307250940116423\") == 38\nassert solution.longestSemiRepetitiveSubstring(\"459743401724533950648524485797473144383\") == 24\nassert solution.longestSemiRepetitiveSubstring(\"861381694183395\") == 15\nassert solution.longestSemiRepetitiveSubstring(\"753147\") == 6\nassert solution.longestSemiRepetitiveSubstring(\"316039078228171\") == 15\nassert solution.longestSemiRepetitiveSubstring(\"84914393242891930835\") == 20\nassert solution.longestSemiRepetitiveSubstring(\"134026066556140918756395100774496360604972\") == 18\nassert solution.longestSemiRepetitiveSubstring(\"603777065708621547353019086169784515268102174\") == 41\nassert solution.longestSemiRepetitiveSubstring(\"750662246299133109735451907964465507760256\") == 19\nassert solution.longestSemiRepetitiveSubstring(\"705771019000001469894\") == 10\nassert solution.longestSemiRepetitiveSubstring(\"812030292083677178223680898308037\") == 19\nassert solution.longestSemiRepetitiveSubstring(\"67\") == 2\nassert solution.longestSemiRepetitiveSubstring(\"0044616606891830970693479458\") == 25\nassert solution.longestSemiRepetitiveSubstring(\"0981789981290273731635100\") == 24\nassert solution.longestSemiRepetitiveSubstring(\"247137530991\") == 12\nassert solution.longestSemiRepetitiveSubstring(\"4433\") == 3\nassert solution.longestSemiRepetitiveSubstring(\"358516913224708926130094103264980\") == 23\nassert solution.longestSemiRepetitiveSubstring(\"3421964493293\") == 13\nassert solution.longestSemiRepetitiveSubstring(\"2026465167577978540582450746447613\") == 29\nassert solution.longestSemiRepetitiveSubstring(\"4\") == 1\nassert solution.longestSemiRepetitiveSubstring(\"661465938564201197171\") == 20\nassert solution.longestSemiRepetitiveSubstring(\"202024993441196\") == 10\nassert solution.longestSemiRepetitiveSubstring(\"9728592650794319053\") == 19\nassert solution.longestSemiRepetitiveSubstring(\"6730526646213382092279249310453\") == 18\nassert solution.longestSemiRepetitiveSubstring(\"007766814919881799977036494716330045\") == 13\nassert solution.longestSemiRepetitiveSubstring(\"0273\") == 4\nassert solution.longestSemiRepetitiveSubstring(\"9\") == 1\nassert solution.longestSemiRepetitiveSubstring(\"1794266967\") == 10\nassert solution.longestSemiRepetitiveSubstring(\"16835203645126205810094523\") == 26\nassert solution.longestSemiRepetitiveSubstring(\"6323853872984448506299871\") == 14\nassert solution.longestSemiRepetitiveSubstring(\"42100752220705242263725\") == 14\nassert solution.longestSemiRepetitiveSubstring(\"8859223915464901172700303556571541\") == 16\nassert solution.longestSemiRepetitiveSubstring(\"5001\") == 4\nassert solution.longestSemiRepetitiveSubstring(\"45181332491433195230507887626449090663927419830398\") == 20\nassert solution.longestSemiRepetitiveSubstring(\"635067731203636973415497802730488803263179742\") == 32\nassert solution.longestSemiRepetitiveSubstring(\"14326399233313514297386627583214671297584676\") == 33\nassert solution.longestSemiRepetitiveSubstring(\"1289581103390847786192065296147892787505601128137\") == 33\nassert solution.longestSemiRepetitiveSubstring(\"755414063646127781463539870\") == 25\nassert solution.longestSemiRepetitiveSubstring(\"241505470282\") == 12\nassert solution.longestSemiRepetitiveSubstring(\"961\") == 3\nassert solution.longestSemiRepetitiveSubstring(\"0535054286321184398372821079360847845\") == 37\nassert solution.longestSemiRepetitiveSubstring(\"457987886\") == 9\nassert solution.longestSemiRepetitiveSubstring(\"949198467878908198978506400125342527803\") == 39\nassert solution.longestSemiRepetitiveSubstring(\"64415568102532236073458683\") == 21\nassert solution.longestSemiRepetitiveSubstring(\"382837525912164362845453012705387554\") == 36\nassert solution.longestSemiRepetitiveSubstring(\"8978105549466686475664\") == 12\nassert solution.longestSemiRepetitiveSubstring(\"1793806409708830435032392891854379896502511463\") == 42\nassert solution.longestSemiRepetitiveSubstring(\"6560924152743787192322177510265668563531600157530\") == 24\nassert solution.longestSemiRepetitiveSubstring(\"70499906543230\") == 10\nassert solution.longestSemiRepetitiveSubstring(\"01822731767507426212172275311944693066166157\") == 24\nassert solution.longestSemiRepetitiveSubstring(\"0708055\") == 7\nassert solution.longestSemiRepetitiveSubstring(\"21558610432994039432090337\") == 21\nassert solution.longestSemiRepetitiveSubstring(\"81\") == 2\nassert solution.longestSemiRepetitiveSubstring(\"6164153660552578459732182885338461022262791561799\") == 18\nassert solution.longestSemiRepetitiveSubstring(\"0331210542880177596695635430944158598\") == 18\nassert solution.longestSemiRepetitiveSubstring(\"5633201776167\") == 10\nassert solution.longestSemiRepetitiveSubstring(\"33087182667816671\") == 13\nassert solution.longestSemiRepetitiveSubstring(\"763218757497801439512643106164330002401085678\") == 33\nassert solution.longestSemiRepetitiveSubstring(\"837697\") == 6\nassert solution.longestSemiRepetitiveSubstring(\"6296022894940192308984705083864982\") == 34\nassert solution.longestSemiRepetitiveSubstring(\"154413302\") == 6\nassert solution.longestSemiRepetitiveSubstring(\"27549720577199906971454059454\") == 16\nassert solution.longestSemiRepetitiveSubstring(\"278638000047423059700052063980784068617\") == 19\nassert solution.longestSemiRepetitiveSubstring(\"42649311520\") == 11\nassert solution.longestSemiRepetitiveSubstring(\"53439910646705796895262\") == 23\nassert solution.longestSemiRepetitiveSubstring(\"20989679603392048689743975451358058\") == 35\nassert solution.longestSemiRepetitiveSubstring(\"0\") == 1\nassert solution.longestSemiRepetitiveSubstring(\"06812663482143025344868355875208431174\") == 19\nassert solution.longestSemiRepetitiveSubstring(\"02990819344083798386951897864655129067958019470614\") == 40\nassert solution.longestSemiRepetitiveSubstring(\"0657853069778829437856825171118403275384740064\") == 17\nassert solution.longestSemiRepetitiveSubstring(\"840592150028823572670702285867812444745785\") == 22\nassert solution.longestSemiRepetitiveSubstring(\"8115430877468992323895688874\") == 15\nassert solution.longestSemiRepetitiveSubstring(\"526993658603618139545712009056\") == 26\nassert solution.longestSemiRepetitiveSubstring(\"353017975858695940516472946167450\") == 33\nassert solution.longestSemiRepetitiveSubstring(\"6622468297507\") == 12\nassert solution.longestSemiRepetitiveSubstring(\"2638104525678447958766805221771874307974823\") == 21\nassert solution.longestSemiRepetitiveSubstring(\"492233914430091224875770\") == 10\nassert solution.longestSemiRepetitiveSubstring(\"82484724416322380\") == 13\nassert solution.longestSemiRepetitiveSubstring(\"92852199260837576486328171\") == 26\nassert solution.longestSemiRepetitiveSubstring(\"05136823485955735987576893\") == 26\nassert solution.longestSemiRepetitiveSubstring(\"84280725190154820042534\") == 23\nassert solution.longestSemiRepetitiveSubstring(\"224971780224375866851981\") == 16\nassert solution.longestSemiRepetitiveSubstring(\"7428743293536517762438\") == 22\nassert solution.longestSemiRepetitiveSubstring(\"9\") == 1\nassert solution.longestSemiRepetitiveSubstring(\"271416281097509998\") == 16\nassert solution.longestSemiRepetitiveSubstring(\"9786517721871493224\") == 17\nassert solution.longestSemiRepetitiveSubstring(\"797091027644\") == 12\nassert solution.longestSemiRepetitiveSubstring(\"37276563168020424198\") == 20\nassert solution.longestSemiRepetitiveSubstring(\"257024699186190080\") == 15\nassert solution.longestSemiRepetitiveSubstring(\"2567237614392498339\") == 19\nassert solution.longestSemiRepetitiveSubstring(\"2\") == 1\nassert solution.longestSemiRepetitiveSubstring(\"7899125292947761707587806878431\") == 28\nassert solution.longestSemiRepetitiveSubstring(\"407951763124003634641788829061590468966861473423\") == 24\nassert solution.longestSemiRepetitiveSubstring(\"63056973376806431358682607926497428\") == 35\nassert solution.longestSemiRepetitiveSubstring(\"003769859461389936091894090339253425201340420\") == 30\nassert solution.longestSemiRepetitiveSubstring(\"2\") == 1",
  "inefficient_solution": "class Solution:\n    def longestSemiRepetitiveSubstring(self, s: str) -> int:\n        n = len(s)\n        ans = cnt = j = 0\n        temp = [0] * 10000\n        prev = [0] * 10000\n        for i in range(n):\n            temp[i] = ord(s[i]) - ord('0')\n            if i and temp[i] == temp[i - 1]:\n                cnt += 1\n                prev[i] = i - 1\n            else:\n                prev[i] = -1\n        for i in range(n):\n            if prev[i] != -1:\n                if prev[prev[i]] != -1 and temp[i] == temp[prev[i]] and temp[prev[i]] == temp[prev[prev[i]]]:\n                    cnt -= 1\n            while cnt > 1:\n                if prev[j] != -1 and temp[j] == temp[prev[j]]:\n                    cnt -= 1\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans",
  "is_python": true
}