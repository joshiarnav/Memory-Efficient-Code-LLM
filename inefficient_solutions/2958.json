{
  "problem_idx": 2958,
  "task_name": "Length of Longest Subarray With at Most K Frequency",
  "markdown_description": "\nYou are given an integer array `nums` and an integer `k`.\n\n\nThe **frequency** of an element `x` is the number of times it occurs in an array.\n\n\nAn array is called **good** if the frequency of each element in this array is **less than or equal** to `k`.\n\n\nReturn *the length of the **longest** **good** subarray of* `nums`*.*\n\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,1,2,3,1,2], k = 2\n**Output:** 6\n**Explanation:** The longest possible good subarray is [1,2,3,1,2,3] since the values 1, 2, and 3 occur at most twice in this subarray. Note that the subarrays [2,3,1,2,3,1] and [3,1,2,3,1,2] are also good.\nIt can be shown that there are no good subarrays with length more than 6.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,1,2,1,2,1,2], k = 1\n**Output:** 2\n**Explanation:** The longest possible good subarray is [1,2] since the values 1 and 2 occur at most once in this subarray. Note that the subarray [2,1] is also good.\nIt can be shown that there are no good subarrays with length more than 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [5,5,5,5,5,5,5], k = 4\n**Output:** 4\n**Explanation:** The longest possible good subarray is [5,5,5,5] since the value 5 occurs 4 times in this subarray.\nIt can be shown that there are no good subarrays with length more than 4.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* `1 <= k <= nums.length`\n\n\n",
  "canonical_solution": "class Solution:\n    def maxSubarrayLength(self, nums: List[int], k: int) -> int:\n        cnt = defaultdict(int)\n        ans = j = 0\n        for i, x in enumerate(nums):\n            cnt[x] += 1\n            while cnt[x] > k:\n                cnt[nums[j]] -= 1\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxSubarrayLength(self, nums, k):\n        cnt = defaultdict(int)\n        ans = j = 0\n        for i, x in enumerate(nums):\n            cnt[x] += 1\n            while cnt[x] > k:\n                cnt[nums[j]] -= 1\n                j += 1\n            ans = max(ans, i - j + 1)\n        return ans\n        \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random target sum\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxSubarrayLength(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxSubarrayLength(nums, k) == expected_result\n        print(f\"assert solution.maxSubarrayLength({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxSubarrayLength({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n      \n",
  "test_case": "assert solution.maxSubarrayLength([93, 92, 43, 14, 9, 3], 5) == 6\nassert solution.maxSubarrayLength([26, 32, 37, 91, 99, 65, 49], 2) == 7\nassert solution.maxSubarrayLength([35, 44], 1) == 2\nassert solution.maxSubarrayLength([38, 48, 91, 73, 27, 94], 1) == 6\nassert solution.maxSubarrayLength([80, 40, 97, 49, 45, 58], 3) == 6\nassert solution.maxSubarrayLength([3, 56, 71], 2) == 3\nassert solution.maxSubarrayLength([68, 71, 10, 79, 62, 81], 6) == 6\nassert solution.maxSubarrayLength([93, 11, 62, 100, 98, 16, 92, 83], 2) == 8\nassert solution.maxSubarrayLength([90, 83], 2) == 2\nassert solution.maxSubarrayLength([81, 76, 69, 21, 97, 50, 75, 92, 51, 17], 3) == 10\nassert solution.maxSubarrayLength([38, 61, 3], 1) == 3\nassert solution.maxSubarrayLength([91, 84, 29, 18, 2, 76], 6) == 6\nassert solution.maxSubarrayLength([5, 10, 56], 2) == 3\nassert solution.maxSubarrayLength([33, 98, 42, 74, 44], 4) == 5\nassert solution.maxSubarrayLength([39, 23, 62, 56, 26, 61, 71, 66, 87], 1) == 9\nassert solution.maxSubarrayLength([39, 47, 19], 3) == 3\nassert solution.maxSubarrayLength([7, 37, 43, 8, 82, 77, 12], 3) == 7\nassert solution.maxSubarrayLength([10, 31, 15, 91, 41, 73, 12, 42], 2) == 8\nassert solution.maxSubarrayLength([83, 82, 98, 21, 44, 26, 20, 89, 79], 1) == 9\nassert solution.maxSubarrayLength([37, 29, 41, 12], 1) == 4\nassert solution.maxSubarrayLength([56, 74, 64, 66, 97], 2) == 5\nassert solution.maxSubarrayLength([14, 38, 53, 51, 100, 36, 6, 73], 1) == 8\nassert solution.maxSubarrayLength([92, 48], 1) == 2\nassert solution.maxSubarrayLength([22, 99, 43, 14, 75, 67, 38, 81, 93, 66], 1) == 10\nassert solution.maxSubarrayLength([1, 17, 91, 6, 32, 94, 54, 56], 7) == 8\nassert solution.maxSubarrayLength([23, 86, 36], 1) == 3\nassert solution.maxSubarrayLength([17, 45], 2) == 2\nassert solution.maxSubarrayLength([43, 63, 46, 49, 99, 4, 13, 76], 5) == 8\nassert solution.maxSubarrayLength([80, 82, 54, 52, 34], 5) == 5\nassert solution.maxSubarrayLength([92, 51, 83, 21, 91, 5], 1) == 6\nassert solution.maxSubarrayLength([56, 95, 4, 67, 20, 100], 2) == 6\nassert solution.maxSubarrayLength([6, 13, 52, 1, 89, 5, 80, 50, 14, 73], 10) == 10\nassert solution.maxSubarrayLength([4, 92], 1) == 2\nassert solution.maxSubarrayLength([7, 87, 29, 42, 100, 8, 21, 74, 47, 52], 5) == 10\nassert solution.maxSubarrayLength([2, 78, 98, 21, 33], 4) == 5\nassert solution.maxSubarrayLength([13, 83, 64, 8, 51, 57, 32], 3) == 7\nassert solution.maxSubarrayLength([7, 42, 8, 40, 89, 87, 38, 63], 7) == 8\nassert solution.maxSubarrayLength([72, 81, 65, 49, 2], 3) == 5\nassert solution.maxSubarrayLength([39, 34, 57, 22, 29, 12, 37, 17], 4) == 8\nassert solution.maxSubarrayLength([61, 59, 78, 48, 35, 23], 2) == 6\nassert solution.maxSubarrayLength([85, 26], 1) == 2\nassert solution.maxSubarrayLength([89, 78, 45, 71, 9, 32, 20, 65, 29, 76], 8) == 10\nassert solution.maxSubarrayLength([56, 21, 13, 47, 39, 7, 9, 25], 3) == 8\nassert solution.maxSubarrayLength([77, 69, 36, 84, 53, 79], 1) == 6\nassert solution.maxSubarrayLength([60, 13, 49, 19, 51, 25, 66, 64, 1, 47], 9) == 10\nassert solution.maxSubarrayLength([26, 21, 28, 83, 94, 96], 1) == 6\nassert solution.maxSubarrayLength([26, 39, 5, 88, 52, 40, 48, 43, 28, 53], 2) == 10\nassert solution.maxSubarrayLength([25, 84, 5], 1) == 3\nassert solution.maxSubarrayLength([65, 88, 17, 7, 68, 90, 77], 4) == 7\nassert solution.maxSubarrayLength([50, 94, 67, 81, 7, 80, 45], 1) == 7\nassert solution.maxSubarrayLength([59, 45, 3, 9], 2) == 4\nassert solution.maxSubarrayLength([100, 21, 71, 67, 28, 8], 3) == 6\nassert solution.maxSubarrayLength([63, 8, 23], 3) == 3\nassert solution.maxSubarrayLength([14, 48, 25, 91, 38, 97, 100, 21], 8) == 8\nassert solution.maxSubarrayLength([52, 91, 32, 41, 65, 58, 50, 97, 94, 64], 7) == 10\nassert solution.maxSubarrayLength([1, 33, 8, 60, 13, 18], 3) == 6\nassert solution.maxSubarrayLength([88, 55, 14], 2) == 3\nassert solution.maxSubarrayLength([43, 58, 23, 44, 13, 62, 61, 89, 31, 32], 3) == 10\nassert solution.maxSubarrayLength([3, 36, 95, 63, 80], 4) == 5\nassert solution.maxSubarrayLength([4, 17, 95, 30, 43, 8], 1) == 6\nassert solution.maxSubarrayLength([13, 47, 73, 17, 80], 1) == 5\nassert solution.maxSubarrayLength([97, 78, 55], 2) == 3\nassert solution.maxSubarrayLength([26, 77, 89, 37, 58], 2) == 5\nassert solution.maxSubarrayLength([72, 67, 3], 2) == 3\nassert solution.maxSubarrayLength([56, 77, 22, 34, 24, 12, 50, 39, 71], 1) == 9\nassert solution.maxSubarrayLength([56, 71, 38, 78, 27, 10, 72, 59, 81, 1], 5) == 10\nassert solution.maxSubarrayLength([2, 39, 75, 28], 3) == 4\nassert solution.maxSubarrayLength([58, 61, 81, 55, 79, 6], 6) == 6\nassert solution.maxSubarrayLength([85, 15, 96, 10, 76], 5) == 5\nassert solution.maxSubarrayLength([71, 64, 68], 2) == 3\nassert solution.maxSubarrayLength([18, 42, 21, 53], 1) == 4\nassert solution.maxSubarrayLength([3, 39], 1) == 2\nassert solution.maxSubarrayLength([39, 24, 65, 93, 53, 38, 21, 58, 78, 17], 4) == 10\nassert solution.maxSubarrayLength([58, 70, 88, 72, 62, 1, 52], 3) == 7\nassert solution.maxSubarrayLength([14, 51, 27, 73, 77, 100, 15, 11], 2) == 8\nassert solution.maxSubarrayLength([59, 39, 15, 33, 60, 38, 3], 4) == 7\nassert solution.maxSubarrayLength([92, 44, 93, 22, 59], 1) == 5\nassert solution.maxSubarrayLength([37, 69], 1) == 2\nassert solution.maxSubarrayLength([77, 43], 2) == 2\nassert solution.maxSubarrayLength([18, 86], 1) == 2\nassert solution.maxSubarrayLength([50, 29, 5, 43, 74, 68, 34, 81], 7) == 8\nassert solution.maxSubarrayLength([26, 46, 79, 71, 72, 49, 65, 37], 2) == 8\nassert solution.maxSubarrayLength([87, 21, 43, 4, 11, 60], 5) == 6\nassert solution.maxSubarrayLength([10, 5, 61, 52, 37, 21], 3) == 6\nassert solution.maxSubarrayLength([13, 7, 10, 47, 71, 6, 60], 5) == 7\nassert solution.maxSubarrayLength([60, 93, 33, 69, 36, 11, 28, 41], 8) == 8\nassert solution.maxSubarrayLength([55, 21, 48, 83, 44], 4) == 5\nassert solution.maxSubarrayLength([81, 16, 52, 90, 42, 53], 4) == 6\nassert solution.maxSubarrayLength([29, 25, 21, 16, 23, 37, 85, 72], 1) == 8\nassert solution.maxSubarrayLength([77, 59, 84, 92, 43, 85, 44, 90, 53, 82], 8) == 10\nassert solution.maxSubarrayLength([63, 97], 1) == 2\nassert solution.maxSubarrayLength([99, 19, 97, 96, 23, 64, 12], 4) == 7\nassert solution.maxSubarrayLength([17, 27, 33, 56], 4) == 4\nassert solution.maxSubarrayLength([86, 12, 26, 94, 31], 2) == 5\nassert solution.maxSubarrayLength([97, 38, 80, 78, 19, 93, 58], 6) == 7\nassert solution.maxSubarrayLength([3, 1, 61, 55, 67, 66, 46, 2, 76, 11], 2) == 10\nassert solution.maxSubarrayLength([64, 99, 100, 73, 24, 40, 8], 7) == 7\nassert solution.maxSubarrayLength([88, 69, 42, 78, 13, 39, 54, 27], 4) == 8\nassert solution.maxSubarrayLength([18, 24, 96, 5], 2) == 4\nassert solution.maxSubarrayLength([40, 2], 2) == 2",
  "inefficient_solution": "class Solution:\n    def maxSubarrayLength(self, nums: List[int], k: int) -> int:\n        freq = {}\n        ans = 0\n        for i, x in enumerate(nums):\n            freq[x] = freq.get(x, 0) + 1\n            for y in freq:\n                if freq[y] > k:\n                    freq = {}\n                    for j in range(i+1):\n                        freq[nums[j]] = freq.get(nums[j], 0) + 1\n                    break\n            temp_freq = {}\n            for y in freq:\n                temp_freq[y] = freq[y]\n                if temp_freq[y] > k:\n                    break\n            ans = max(ans, i - max(temp_freq.keys(), default=0) + 1)\n        return ans",
  "is_python": true
}