{
  "problem_idx": 1708,
  "task_name": "Largest Subarray Length K",
  "markdown_description": "\nAn array `A` is larger than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`.\n\n\nFor example, consider `0`-indexing:\n\n\n* `[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`.\n* `[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`.\n\n\nA subarray is a contiguous subsequence of the array.\n\n\nGiven an integer array `nums` of **distinct** integers, return the **largest** subarray of `nums` of length `k`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,4,5,2,3], k = 3\n**Output:** [5,2,3]\n**Explanation:** The subarrays of size 3 are: [1,4,5], [4,5,2], and [5,2,3].\nOf these, [5,2,3] is the largest.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,4,5,2,3], k = 4\n**Output:** [4,5,2,3]\n**Explanation:** The subarrays of size 4 are: [1,4,5,2], and [4,5,2,3].\nOf these, [4,5,2,3] is the largest.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,4,5,2,3], k = 1\n**Output:** [5]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= k <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n* All the integers of `nums` are **unique**.\n\n\n\u00a0\n\n\n**Follow up:** What if the integers in `nums` are not distinct?\n\n",
  "canonical_solution": "class Solution:\n    def largestSubarray(self, nums: List[int], k: int) -> List[int]:\n        i = nums.index(max(nums[: len(nums) - k + 1]))\n        return nums[i : i + k]\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def largestSubarray(self, nums, k):\n        i = nums.index(max(nums[: len(nums) - k + 1]))\n        return nums[i : i + k]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Generate a random k value\n    k = random.randint(1, len(nums))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestSubarray(nums, k)\n\n    return nums, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestSubarray(nums, k) == expected_result\n        print(f\"assert solution.largestSubarray({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.largestSubarray({nums}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.largestSubarray([30, 65, 95, 88, 92, 82, 34], 6) == [65, 95, 88, 92, 82, 34]\nassert solution.largestSubarray([49, 36], 1) == [49]\nassert solution.largestSubarray([28, 44, 26, 4, 40, 15, 79, 84, 61], 6) == [44, 26, 4, 40, 15, 79]\nassert solution.largestSubarray([84, 79, 90, 5, 30, 83, 91], 4) == [90, 5, 30, 83]\nassert solution.largestSubarray([28, 51, 57, 20, 10, 88, 96, 49, 76], 4) == [88, 96, 49, 76]\nassert solution.largestSubarray([88, 61, 20, 81, 92, 22, 91], 4) == [88, 61, 20, 81]\nassert solution.largestSubarray([53, 21], 1) == [53]\nassert solution.largestSubarray([44, 81, 10, 6, 51, 77], 5) == [81, 10, 6, 51, 77]\nassert solution.largestSubarray([67, 30, 29, 5, 65, 42], 3) == [67, 30, 29]\nassert solution.largestSubarray([88, 45, 65, 55, 82, 13, 23], 7) == [88, 45, 65, 55, 82, 13, 23]\nassert solution.largestSubarray([74, 29, 54, 91, 11, 89, 82, 17], 6) == [74, 29, 54, 91, 11, 89]\nassert solution.largestSubarray([92, 85, 33, 43, 13, 70, 11, 77], 3) == [92, 85, 33]\nassert solution.largestSubarray([66, 10, 18, 37, 85], 4) == [66, 10, 18, 37]\nassert solution.largestSubarray([25, 52], 1) == [52]\nassert solution.largestSubarray([7, 68, 56, 24, 65, 66, 13, 39, 2, 26], 2) == [68, 56]\nassert solution.largestSubarray([34, 14], 1) == [34]\nassert solution.largestSubarray([5, 61, 36, 68, 86, 66, 9, 94, 82, 55], 8) == [61, 36, 68, 86, 66, 9, 94, 82]\nassert solution.largestSubarray([35, 65], 2) == [35, 65]\nassert solution.largestSubarray([54, 45, 58, 29, 50, 88, 23], 5) == [58, 29, 50, 88, 23]\nassert solution.largestSubarray([9, 12, 68], 3) == [9, 12, 68]\nassert solution.largestSubarray([67, 60, 6, 95, 58, 13, 69, 79, 65, 33], 10) == [67, 60, 6, 95, 58, 13, 69, 79, 65, 33]\nassert solution.largestSubarray([58, 49], 2) == [58, 49]\nassert solution.largestSubarray([56, 6, 95], 1) == [95]\nassert solution.largestSubarray([91, 68, 79, 43], 4) == [91, 68, 79, 43]\nassert solution.largestSubarray([82, 56, 31], 2) == [82, 56]\nassert solution.largestSubarray([38, 58, 84, 36, 83, 45], 1) == [84]\nassert solution.largestSubarray([52, 63, 55], 1) == [63]\nassert solution.largestSubarray([17, 88], 1) == [88]\nassert solution.largestSubarray([18, 23, 19, 93], 1) == [93]\nassert solution.largestSubarray([23, 19, 78, 31, 32, 7], 5) == [23, 19, 78, 31, 32]\nassert solution.largestSubarray([64, 58, 92, 60, 28, 59, 38, 83, 16, 66], 8) == [92, 60, 28, 59, 38, 83, 16, 66]\nassert solution.largestSubarray([51, 63, 31, 80, 3, 89, 59], 2) == [89, 59]\nassert solution.largestSubarray([38, 55, 99], 3) == [38, 55, 99]\nassert solution.largestSubarray([74, 33, 38, 16, 86, 91, 9, 1, 15, 79], 2) == [91, 9]\nassert solution.largestSubarray([70, 78, 55, 76, 54, 72, 52], 2) == [78, 55]\nassert solution.largestSubarray([99, 57, 24, 92, 80], 4) == [99, 57, 24, 92]\nassert solution.largestSubarray([33, 8, 43, 25, 62, 34, 68, 83, 52, 100], 1) == [100]\nassert solution.largestSubarray([27, 79, 47, 65, 1, 77, 30, 91, 97, 94], 6) == [79, 47, 65, 1, 77, 30]\nassert solution.largestSubarray([71, 63, 18, 24, 29, 19, 4, 92, 94], 7) == [71, 63, 18, 24, 29, 19, 4]\nassert solution.largestSubarray([90, 26, 52, 25, 23, 78, 14], 3) == [90, 26, 52]\nassert solution.largestSubarray([49, 56, 72], 2) == [56, 72]\nassert solution.largestSubarray([96, 72, 66, 11, 71], 4) == [96, 72, 66, 11]\nassert solution.largestSubarray([77, 42, 32, 100, 53, 83, 35, 29, 17], 4) == [100, 53, 83, 35]\nassert solution.largestSubarray([58, 52, 60], 1) == [60]\nassert solution.largestSubarray([24, 63, 36, 17, 40], 1) == [63]\nassert solution.largestSubarray([7, 9, 24, 21, 15, 38, 84, 46, 28, 56], 5) == [38, 84, 46, 28, 56]\nassert solution.largestSubarray([84, 58, 76, 20, 92, 42], 5) == [84, 58, 76, 20, 92]\nassert solution.largestSubarray([14, 30, 63, 38, 27, 16], 5) == [30, 63, 38, 27, 16]\nassert solution.largestSubarray([58, 27, 31, 16, 73, 70, 3, 52, 100, 61], 10) == [58, 27, 31, 16, 73, 70, 3, 52, 100, 61]\nassert solution.largestSubarray([50, 37, 55, 3, 57, 98, 56, 69], 7) == [50, 37, 55, 3, 57, 98, 56]\nassert solution.largestSubarray([18, 62, 1, 98, 35], 3) == [62, 1, 98]\nassert solution.largestSubarray([96, 64, 79, 65, 45, 49], 2) == [96, 64]\nassert solution.largestSubarray([79, 33, 68, 70, 6, 72, 38, 85, 83], 7) == [79, 33, 68, 70, 6, 72, 38]\nassert solution.largestSubarray([56, 51, 43, 58, 3, 97], 2) == [58, 3]\nassert solution.largestSubarray([30, 23, 99, 24, 84, 49, 62], 1) == [99]\nassert solution.largestSubarray([85, 16, 39, 62, 93, 14, 71, 58, 53, 72], 8) == [85, 16, 39, 62, 93, 14, 71, 58]\nassert solution.largestSubarray([39, 36, 100, 94, 26, 75, 12, 18, 62], 1) == [100]\nassert solution.largestSubarray([70, 62, 94, 63, 88, 97], 2) == [94, 63]\nassert solution.largestSubarray([52, 81, 31, 68, 10, 56, 94, 93], 8) == [52, 81, 31, 68, 10, 56, 94, 93]\nassert solution.largestSubarray([21, 5, 68, 42, 51, 36, 57], 6) == [21, 5, 68, 42, 51, 36]\nassert solution.largestSubarray([21, 52, 50, 47, 29, 59, 72], 7) == [21, 52, 50, 47, 29, 59, 72]\nassert solution.largestSubarray([98, 8, 99, 55, 84], 2) == [99, 55]\nassert solution.largestSubarray([20, 22], 2) == [20, 22]\nassert solution.largestSubarray([69, 39, 46, 23], 3) == [69, 39, 46]\nassert solution.largestSubarray([72, 3, 96], 3) == [72, 3, 96]\nassert solution.largestSubarray([70, 4, 27, 12, 32], 3) == [70, 4, 27]\nassert solution.largestSubarray([10, 58, 7], 1) == [58]\nassert solution.largestSubarray([53, 49, 12], 1) == [53]\nassert solution.largestSubarray([32, 17, 96], 3) == [32, 17, 96]\nassert solution.largestSubarray([51, 46, 61, 18, 8, 90], 3) == [61, 18, 8]\nassert solution.largestSubarray([30, 12, 4, 58, 56], 4) == [30, 12, 4, 58]\nassert solution.largestSubarray([41, 66, 96], 3) == [41, 66, 96]\nassert solution.largestSubarray([23, 61, 77, 100, 54, 78, 34], 7) == [23, 61, 77, 100, 54, 78, 34]\nassert solution.largestSubarray([11, 61, 19, 86, 91, 35], 2) == [91, 35]\nassert solution.largestSubarray([54, 12, 93], 2) == [54, 12]\nassert solution.largestSubarray([6, 91, 51, 84, 80], 2) == [91, 51]\nassert solution.largestSubarray([19, 74], 1) == [74]\nassert solution.largestSubarray([94, 33, 53, 62, 49], 1) == [94]\nassert solution.largestSubarray([80, 42, 30, 37, 15, 13], 2) == [80, 42]\nassert solution.largestSubarray([27, 85, 63, 65, 93, 68], 1) == [93]\nassert solution.largestSubarray([49, 44, 52, 84, 71, 7, 20, 39, 62, 22], 7) == [84, 71, 7, 20, 39, 62, 22]\nassert solution.largestSubarray([37, 85, 93, 31, 24, 47, 14], 5) == [93, 31, 24, 47, 14]\nassert solution.largestSubarray([84, 74, 95, 53, 30, 46, 22, 82, 14, 12], 5) == [95, 53, 30, 46, 22]\nassert solution.largestSubarray([83, 72], 2) == [83, 72]\nassert solution.largestSubarray([35, 77, 51, 100, 78], 1) == [100]\nassert solution.largestSubarray([59, 55], 2) == [59, 55]\nassert solution.largestSubarray([81, 88, 46, 34, 48, 33, 62, 68, 86, 74], 10) == [81, 88, 46, 34, 48, 33, 62, 68, 86, 74]\nassert solution.largestSubarray([20, 43, 62, 17, 56], 2) == [62, 17]\nassert solution.largestSubarray([77, 55, 43], 3) == [77, 55, 43]\nassert solution.largestSubarray([92, 7, 44, 18, 15, 97, 13, 16, 91], 9) == [92, 7, 44, 18, 15, 97, 13, 16, 91]\nassert solution.largestSubarray([88, 87, 32, 50, 67, 18, 54, 70, 72, 41], 5) == [88, 87, 32, 50, 67]\nassert solution.largestSubarray([46, 45, 17, 1, 13, 37, 53], 6) == [46, 45, 17, 1, 13, 37]\nassert solution.largestSubarray([68, 85, 37, 100], 4) == [68, 85, 37, 100]\nassert solution.largestSubarray([64, 20, 42, 87, 22], 5) == [64, 20, 42, 87, 22]\nassert solution.largestSubarray([10, 29, 56, 98, 97, 78, 57, 1, 72], 5) == [98, 97, 78, 57, 1]\nassert solution.largestSubarray([74, 1, 99, 52, 73, 21, 57], 1) == [99]\nassert solution.largestSubarray([8, 79, 71, 62, 31, 19], 6) == [8, 79, 71, 62, 31, 19]\nassert solution.largestSubarray([44, 30, 16, 61, 62, 86, 41, 97, 84, 76], 7) == [61, 62, 86, 41, 97, 84, 76]\nassert solution.largestSubarray([100, 52, 17, 8, 30, 34], 3) == [100, 52, 17]\nassert solution.largestSubarray([35, 48, 67, 63, 82], 1) == [82]",
  "inefficient_solution": "class Solution:\n    def largestSubarray(self, nums: List[int], k: int) -> List[int]:\n        max_subarray = []\n        max_length = 0\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i : i + k]\n            if len(subarray) > max_length:\n                max_length = len(subarray)\n                max_subarray = subarray[:]\n                max_subarray.sort(reverse=True)\n                max_subarray = [x for x in max_subarray if x in nums]\n        max_subarray.sort(reverse=True)\n        max_subarray = [x for x in max_subarray if x in nums]\n        for i in range(len(nums) - k + 1):\n            subarray = nums[i : i + k]\n            subarray.sort(reverse=True)\n            subarray = [x for x in subarray if x in nums]\n            if subarray == max_subarray:\n                return subarray",
  "is_python": true
}