{
  "problem_idx": 958,
  "task_name": "Check Completeness of a Binary Tree",
  "markdown_description": "\nGiven the `root` of a binary tree, determine if it is a *complete binary tree*.\n\n\nIn a **[complete binary tree](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0958.Check%20Completeness%20of%20a%20Binary%20Tree/images/complete-binary-tree-1.png)\n\n```\n\n**Input:** root = [1,2,3,4,5,6]\n**Output:** true\n**Explanation:** Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/0900-0999/0958.Check%20Completeness%20of%20a%20Binary%20Tree/images/complete-binary-tree-2.png)\n\n```\n\n**Input:** root = [1,2,3,4,5,null,7]\n**Output:** false\n**Explanation:** The node with value 7 isn't as far left as possible.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* The number of nodes in the tree is in the range `[1, 100]`.\n* `1 <= Node.val <= 1000`\n\n\n",
  "canonical_solution": "# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        q = deque([root])\n        while q:\n            node = q.popleft()\n            if node is None:\n                break\n            q.append(node.left)\n            q.append(node.right)\n        return all(node is None for node in q)\n",
  "test_case_generator": "\nimport random\nfrom collections import deque\n\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\nclass Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        q = deque([root])\n        while q:\n            node = q.popleft()\n            if node is None:\n                break\n            q.append(node.left)\n            q.append(node.right)\n        return all(node is None for node in q)\n\n\ndef generate_test_case():\n    solution = Solution()\n    node_vals = random.sample(range(1, 101), random.randint(1, 10))\n    nodes = {}\n    root = None\n    for val in node_vals:\n        node = TreeNode(val)\n        nodes[val] = node\n        if not root:\n            root = node\n\n    for val in node_vals:\n        node = nodes[val]\n        if 2 * val in nodes:\n            node.left = nodes[2 * val]\n        if 2 * val + 1 in nodes:\n            node.right = nodes[2 * val + 1]\n\n    return root\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        root = generate_test_case()\n        solution = Solution()\n        expected_result = solution.isCompleteTree(root)\n        test_case = f\"assert solution.isCompleteTree({root}) == {expected_result}\"\n        test_case_generator_results.append(test_case)\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n    print(*test_case_generator_results, sep=\"\\n\")\n",
  "test_case": "assert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8ccd50>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8ccd50>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8ccd10>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == False\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == False\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6850>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6810>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6410>) == True\nassert solution.isCompleteTree(<__main__.TreeNode object at 0x7fe65d8a6450>) == True",
  "inefficient_solution": "class Solution:\n    def isCompleteTree(self, root: TreeNode) -> bool:\n        q = deque([root])\n        level = 0\n        nodes = []\n        while q:\n            level += 1\n            nodes_in_level = []\n            for _ in range(2**level):\n                node = q.popleft()\n                if node is None:\n                    break\n                nodes_in_level.append(node)\n                q.append(node.left)\n                q.append(node.right)\n            nodes.extend(nodes_in_level)\n        return all(node.left is None and node.right is None for node in nodes[len(nodes)//2:])",
  "is_python": true
}