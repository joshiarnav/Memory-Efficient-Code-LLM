{
  "problem_idx": 438,
  "task_name": "Find All Anagrams in a String",
  "markdown_description": "\nGiven two strings `s` and `p`, return *an array of all the start indices of* `p`*'s anagrams in* `s`. You may return the answer in **any order**.\n\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"cbaebabacd\", p = \"abc\"\n**Output:** [0,6]\n**Explanation:**\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"abab\", p = \"ab\"\n**Output:** [0,1,2]\n**Explanation:**\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length, p.length <= 3 * 104`\n* `s` and `p` consist of lowercase English letters.\n\n\n",
  "canonical_solution": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        m, n = len(s), len(p)\n        ans = []\n        if m < n:\n            return ans\n        cnt1 = Counter(p)\n        cnt2 = Counter(s[: n - 1])\n        for i in range(n - 1, m):\n            cnt2[s[i]] += 1\n            if cnt1 == cnt2:\n                ans.append(i - n + 1)\n            cnt2[s[i - n + 1]] -= 1\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        m, n = len(s), len(p)\n        ans = []\n        if m < n:\n            return ans\n        cnt1 = Counter(p)\n        cnt2 = Counter(s[: n - 1])\n        for i in range(n - 1, m):\n            cnt2[s[i]] += 1\n            if cnt1 == cnt2:\n                ans.append(i - n + 1)\n            cnt2[s[i - n + 1]] -= 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))  # Each string has length lower than 10\n    p = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, len(s))))  # Each string has length lower than s\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findAnagrams(s, p)\n\n    return s, p, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, p, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findAnagrams(s, p) == expected_result\n        print(f\"assert solution.findAnagrams('{s}', '{p}') == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findAnagrams('{s}', '{p}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.findAnagrams('qiwtsuynn', 'rb') == []\nassert solution.findAnagrams('b', 'q') == []\nassert solution.findAnagrams('uvupziha', 'p') == [3]\nassert solution.findAnagrams('kjeisl', 'uhuh') == []\nassert solution.findAnagrams('q', 'i') == []\nassert solution.findAnagrams('cmk', 'v') == []\nassert solution.findAnagrams('tzrdvmn', 'buiinq') == []\nassert solution.findAnagrams('cdftr', 'rbv') == []\nassert solution.findAnagrams('hzxaqcrxn', 'hintci') == []\nassert solution.findAnagrams('qpo', 'ap') == []\nassert solution.findAnagrams('rmllztmyx', 'v') == []\nassert solution.findAnagrams('scwroma', 'rfbuc') == []\nassert solution.findAnagrams('nr', 'pt') == []\nassert solution.findAnagrams('jmrq', 'thnc') == []\nassert solution.findAnagrams('cbaixdnjfe', 'trh') == []\nassert solution.findAnagrams('fezvrpa', 'u') == []\nassert solution.findAnagrams('lei', 'esy') == []\nassert solution.findAnagrams('ovwu', 'wizd') == []\nassert solution.findAnagrams('cdslye', 'glfwox') == []\nassert solution.findAnagrams('ewrop', 'fbqu') == []\nassert solution.findAnagrams('kyzpmzbfl', 'udtsoj') == []\nassert solution.findAnagrams('srrrkkqrf', 'vwcz') == []\nassert solution.findAnagrams('owiy', 'v') == []\nassert solution.findAnagrams('kwhoh', 'tbt') == []\nassert solution.findAnagrams('wsjcttwu', 'c') == [3]\nassert solution.findAnagrams('lliustbgxa', 'r') == []\nassert solution.findAnagrams('dow', 'e') == []\nassert solution.findAnagrams('xqd', 'l') == []\nassert solution.findAnagrams('fbzgekibh', 'ijfvijyt') == []\nassert solution.findAnagrams('kh', 'dc') == []\nassert solution.findAnagrams('f', 'd') == []\nassert solution.findAnagrams('no', 'qp') == []\nassert solution.findAnagrams('mqwviemk', 'nccn') == []\nassert solution.findAnagrams('paiuzci', 'ipf') == []\nassert solution.findAnagrams('pa', 'n') == []\nassert solution.findAnagrams('faq', 'wok') == []\nassert solution.findAnagrams('tnv', 'xwj') == []\nassert solution.findAnagrams('qpyii', 'f') == []\nassert solution.findAnagrams('riz', 'hid') == []\nassert solution.findAnagrams('houvw', 'in') == []\nassert solution.findAnagrams('hoecuqia', 'cmeqn') == []\nassert solution.findAnagrams('bkxiskmt', 'hsccum') == []\nassert solution.findAnagrams('ukjuuee', 'tgyz') == []\nassert solution.findAnagrams('cm', 'cd') == []\nassert solution.findAnagrams('vkrvltza', 'ovwvjx') == []\nassert solution.findAnagrams('hfn', 'tj') == []\nassert solution.findAnagrams('btxmmqx', 'wbraj') == []\nassert solution.findAnagrams('jdekbt', 'ezs') == []\nassert solution.findAnagrams('zgobd', 'coz') == []\nassert solution.findAnagrams('ltgupfp', 'wnr') == []\nassert solution.findAnagrams('hmvac', 'imzz') == []\nassert solution.findAnagrams('vwkcqlijpy', 'rxqxuul') == []\nassert solution.findAnagrams('dhniuhmpp', 'inskkehx') == []\nassert solution.findAnagrams('hjqimenfi', 'm') == [4]\nassert solution.findAnagrams('rlb', 'lju') == []\nassert solution.findAnagrams('dyshs', 'lwxaw') == []\nassert solution.findAnagrams('whvfx', 'amby') == []\nassert solution.findAnagrams('esl', 'lo') == []\nassert solution.findAnagrams('vpn', 'xlc') == []\nassert solution.findAnagrams('atznb', 'df') == []\nassert solution.findAnagrams('qsrehxr', 'fkho') == []\nassert solution.findAnagrams('ctkjtqwt', 'ebj') == []\nassert solution.findAnagrams('pufutwv', 'xsklv') == []\nassert solution.findAnagrams('kformn', 'qapry') == []\nassert solution.findAnagrams('opes', 'a') == []\nassert solution.findAnagrams('lcknlhkm', 'kda') == []\nassert solution.findAnagrams('eunlmcc', 'oq') == []\nassert solution.findAnagrams('nukvsco', 'tm') == []\nassert solution.findAnagrams('ke', 'g') == []\nassert solution.findAnagrams('wxtns', 'krva') == []\nassert solution.findAnagrams('asmykeaca', 'ylypq') == []\nassert solution.findAnagrams('ay', 'xo') == []\nassert solution.findAnagrams('yvlwspqf', 'llksucw') == []\nassert solution.findAnagrams('hwqo', 'u') == []\nassert solution.findAnagrams('zpsphkm', 'ykakb') == []\nassert solution.findAnagrams('gifudf', 'ymyrvu') == []\nassert solution.findAnagrams('rzoatjas', 'cgwyd') == []\nassert solution.findAnagrams('vpsyl', 'k') == []\nassert solution.findAnagrams('qsb', 'j') == []\nassert solution.findAnagrams('w', 'b') == []\nassert solution.findAnagrams('hx', 'gj') == []\nassert solution.findAnagrams('igdlycceom', 'rm') == []\nassert solution.findAnagrams('ejbuxb', 'cmh') == []\nassert solution.findAnagrams('hddkixqpv', 'hupk') == []\nassert solution.findAnagrams('ri', 'z') == []\nassert solution.findAnagrams('ggx', 'bxd') == []\nassert solution.findAnagrams('gnuvke', 'jol') == []\nassert solution.findAnagrams('ullsqu', 'rqidat') == []\nassert solution.findAnagrams('gweswuq', 'go') == []\nassert solution.findAnagrams('mh', 'wk') == []\nassert solution.findAnagrams('vviwu', 'uzsw') == []\nassert solution.findAnagrams('thsqtrz', 'sjciyf') == []\nassert solution.findAnagrams('dshuxt', 'twtv') == []\nassert solution.findAnagrams('dynjnfqnc', 'dzxahknjd') == []\nassert solution.findAnagrams('ga', 'd') == []\nassert solution.findAnagrams('tf', 'l') == []\nassert solution.findAnagrams('tshsqk', 'elu') == []\nassert solution.findAnagrams('ectgdhhhk', 'nkgkchgu') == []\nassert solution.findAnagrams('s', 'x') == []\nassert solution.findAnagrams('o', 'y') == []",
  "inefficient_solution": "class Solution:\n    def findAnagrams(self, s: str, p: str) -> List[int]:\n        m, n = len(s), len(p)\n        ans = []\n        if m < n:\n            return ans\n        p_list = list(p)\n        s_list = list(s)\n        for _ in range(1000000):\n            p_list = p_list[: n] + p_list[n:]\n        for i in range(m):\n            temp_list = s_list[: i] + s_list[i + 1:]\n            temp_list = temp_list[: n] + temp_list[n:]\n            if sorted(p_list) == sorted(temp_list):\n                ans.append(i)\n        return ans",
  "is_python": true
}