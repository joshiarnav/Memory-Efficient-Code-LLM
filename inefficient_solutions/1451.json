{
  "problem_idx": 1451,
  "task_name": "Rearrange Words in a Sentence",
  "markdown_description": "\nGiven a sentence\u00a0`text` (A\u00a0*sentence*\u00a0is a string of space-separated words) in the following format:\n\n\n* First letter is in upper case.\n* Each word in `text` are separated by a single space.\n\n\nYour task is to rearrange the words in text such that\u00a0all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\n\n\nReturn the new text\u00a0following the format shown above.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** text = \"Leetcode is cool\"\n**Output:** \"Is cool leetcode\"\n**Explanation:** There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\nOutput is ordered by length and the new first word starts with capital letter.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** text = \"Keep calm and code on\"\n**Output:** \"On and keep calm code\"\n**Explanation:** Output is ordered as follows:\n\"On\" 2 letters.\n\"and\" 3 letters.\n\"keep\" 4 letters in case of tie order by position in original text.\n\"calm\" 4 letters.\n\"code\" 4 letters.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** text = \"To be or not to be\"\n**Output:** \"To be or to be not\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `text` begins with a capital letter and then contains lowercase letters and single space between words.\n* `1 <= text.length <= 10^5`\n\n\n",
  "canonical_solution": "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        words = text.split()\n        words[0] = words[0].lower()\n        words.sort(key=len)\n        words[0] = words[0].title()\n        return \" \".join(words)\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def arrangeWords(self, text: str) -> str:\n        words = text.split()\n        words[0] = words[0].lower()\n        words.sort(key=len)\n        words[0] = words[0].title()\n        return \" \".join(words)\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random sentence\n    text = \" \".join(random.choices(string.ascii_uppercase + string.ascii_lowercase, k=random.randint(2, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.arrangeWords(text)\n\n    return text, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        text, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.arrangeWords(text) == expected_result\n        print(f\"assert solution.arrangeWords('{text}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.arrangeWords('{text}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.arrangeWords('T I H u f n q V H') == 'T I H u f n q V H'\nassert solution.arrangeWords('t n O D g C') == 'T n O D g C'\nassert solution.arrangeWords('J w x a y v') == 'J w x a y v'\nassert solution.arrangeWords('g B X h r N u E') == 'G B X h r N u E'\nassert solution.arrangeWords('C Q n U g K i i') == 'C Q n U g K i i'\nassert solution.arrangeWords('B J r d U k W J R R') == 'B J r d U k W J R R'\nassert solution.arrangeWords('Q R m n i H') == 'Q R m n i H'\nassert solution.arrangeWords('o b z c s F S') == 'O b z c s F S'\nassert solution.arrangeWords('t m q f P m g R f O') == 'T m q f P m g R f O'\nassert solution.arrangeWords('V R E p E t f') == 'V R E p E t f'\nassert solution.arrangeWords('P c b y n q q K X V') == 'P c b y n q q K X V'\nassert solution.arrangeWords('W k') == 'W k'\nassert solution.arrangeWords('Q f z v U K h W') == 'Q f z v U K h W'\nassert solution.arrangeWords('K d n E') == 'K d n E'\nassert solution.arrangeWords('G a i p L T w W d R') == 'G a i p L T w W d R'\nassert solution.arrangeWords('I z P z B u q D') == 'I z P z B u q D'\nassert solution.arrangeWords('G S z T') == 'G S z T'\nassert solution.arrangeWords('F q l e p Z j') == 'F q l e p Z j'\nassert solution.arrangeWords('r v') == 'R v'\nassert solution.arrangeWords('b h Q') == 'B h Q'\nassert solution.arrangeWords('h X g U A g Y') == 'H X g U A g Y'\nassert solution.arrangeWords('s b F O U y') == 'S b F O U y'\nassert solution.arrangeWords('r n s u z E A o Z j') == 'R n s u z E A o Z j'\nassert solution.arrangeWords('I w v N b') == 'I w v N b'\nassert solution.arrangeWords('H y') == 'H y'\nassert solution.arrangeWords('v M B p K') == 'V M B p K'\nassert solution.arrangeWords('l O w O N m j m x P') == 'L O w O N m j m x P'\nassert solution.arrangeWords('B s w w R w') == 'B s w w R w'\nassert solution.arrangeWords('R v R O O R') == 'R v R O O R'\nassert solution.arrangeWords('S u u Y O L V A M y') == 'S u u Y O L V A M y'\nassert solution.arrangeWords('T o u') == 'T o u'\nassert solution.arrangeWords('b d k i y v X j') == 'B d k i y v X j'\nassert solution.arrangeWords('R H g w v P t l h') == 'R H g w v P t l h'\nassert solution.arrangeWords('T W y') == 'T W y'\nassert solution.arrangeWords('X r d B t Z Z r L n') == 'X r d B t Z Z r L n'\nassert solution.arrangeWords('x z r M G v O') == 'X z r M G v O'\nassert solution.arrangeWords('R a U F d j') == 'R a U F d j'\nassert solution.arrangeWords('d H I') == 'D H I'\nassert solution.arrangeWords('c q W a W x N') == 'C q W a W x N'\nassert solution.arrangeWords('m R z f d K f d R o') == 'M R z f d K f d R o'\nassert solution.arrangeWords('u x z i y X H a E P') == 'U x z i y X H a E P'\nassert solution.arrangeWords('a A D a v T g d P u') == 'A A D a v T g d P u'\nassert solution.arrangeWords('L Q B E s P') == 'L Q B E s P'\nassert solution.arrangeWords('T i u x b I o') == 'T i u x b I o'\nassert solution.arrangeWords('e u T u h h J v') == 'E u T u h h J v'\nassert solution.arrangeWords('A e w Z G') == 'A e w Z G'\nassert solution.arrangeWords('V U N w M h Y X w') == 'V U N w M h Y X w'\nassert solution.arrangeWords('p X') == 'P X'\nassert solution.arrangeWords('U y u s b') == 'U y u s b'\nassert solution.arrangeWords('g M s l F t U G R') == 'G M s l F t U G R'\nassert solution.arrangeWords('h e B i A s F x F') == 'H e B i A s F x F'\nassert solution.arrangeWords('u h f f s e m g') == 'U h f f s e m g'\nassert solution.arrangeWords('i V n R B w s W') == 'I V n R B w s W'\nassert solution.arrangeWords('W Q W') == 'W Q W'\nassert solution.arrangeWords('X Y m v e') == 'X Y m v e'\nassert solution.arrangeWords('B L q D A') == 'B L q D A'\nassert solution.arrangeWords('g x U R r') == 'G x U R r'\nassert solution.arrangeWords('O v A w Z i v J s') == 'O v A w Z i v J s'\nassert solution.arrangeWords('v K c w y L s') == 'V K c w y L s'\nassert solution.arrangeWords('Z s') == 'Z s'\nassert solution.arrangeWords('c X') == 'C X'\nassert solution.arrangeWords('Z o W X i q U Z c') == 'Z o W X i q U Z c'\nassert solution.arrangeWords('P G o B F T S R') == 'P G o B F T S R'\nassert solution.arrangeWords('O T r u q h k T') == 'O T r u q h k T'\nassert solution.arrangeWords('x V E q h G') == 'X V E q h G'\nassert solution.arrangeWords('k O K a W') == 'K O K a W'\nassert solution.arrangeWords('A i') == 'A i'\nassert solution.arrangeWords('B A L') == 'B A L'\nassert solution.arrangeWords('U r') == 'U r'\nassert solution.arrangeWords('s a n J S z L B') == 'S a n J S z L B'\nassert solution.arrangeWords('R R e C') == 'R R e C'\nassert solution.arrangeWords('s I E y H Z l O u y') == 'S I E y H Z l O u y'\nassert solution.arrangeWords('D g s w F x b l') == 'D g s w F x b l'\nassert solution.arrangeWords('n k X f P B X X X A') == 'N k X f P B X X X A'\nassert solution.arrangeWords('p Y h n z X U l') == 'P Y h n z X U l'\nassert solution.arrangeWords('C g S Y') == 'C g S Y'\nassert solution.arrangeWords('O f i b M V q w') == 'O f i b M V q w'\nassert solution.arrangeWords('i S v y') == 'I S v y'\nassert solution.arrangeWords('A t m S N d c w') == 'A t m S N d c w'\nassert solution.arrangeWords('H S D g W L y') == 'H S D g W L y'\nassert solution.arrangeWords('v L R G A S C L J C') == 'V L R G A S C L J C'\nassert solution.arrangeWords('P A V o I y a') == 'P A V o I y a'\nassert solution.arrangeWords('F W p L M') == 'F W p L M'\nassert solution.arrangeWords('z Q H p k H v n i N') == 'Z Q H p k H v n i N'\nassert solution.arrangeWords('v G H L E i') == 'V G H L E i'\nassert solution.arrangeWords('I s U K n B n S j n') == 'I s U K n B n S j n'\nassert solution.arrangeWords('x s J P C H a G') == 'X s J P C H a G'\nassert solution.arrangeWords('w H b u v N U p') == 'W H b u v N U p'\nassert solution.arrangeWords('w A v m a Q a s E I') == 'W A v m a Q a s E I'\nassert solution.arrangeWords('q O s f') == 'Q O s f'\nassert solution.arrangeWords('p f u') == 'P f u'\nassert solution.arrangeWords('r p b d f W Y') == 'R p b d f W Y'\nassert solution.arrangeWords('s O G h i u M') == 'S O G h i u M'\nassert solution.arrangeWords('u p') == 'U p'\nassert solution.arrangeWords('A n D D m y T f G T') == 'A n D D m y T f G T'\nassert solution.arrangeWords('V I') == 'V I'\nassert solution.arrangeWords('i l d B p K') == 'I l d B p K'\nassert solution.arrangeWords('b L S E j i i w') == 'B L S E j i i w'\nassert solution.arrangeWords('A J') == 'A J'\nassert solution.arrangeWords('y Q') == 'Y Q'",
  "inefficient_solution": "class Solution:\n    def arrangeWords(self, text: str) -> str:\n        words = text.split()\n        length_map = {}\n        for word in words:\n            word = word.lower()\n            length_map[len(word)] = length_map.get(len(word), []) + [word]\n        sorted_keys = sorted(length_map.keys())\n        result = []\n        for length in sorted_keys:\n            for word in length_map[length]:\n                result.append(word)\n        result[0] = result[0].title()\n        return \" \".join(result)",
  "is_python": true
}