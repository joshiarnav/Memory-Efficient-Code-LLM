{
  "problem_idx": 696,
  "task_name": "Count Binary Substrings",
  "markdown_description": "\nGiven a binary string `s`, return the number of non-empty substrings that have the same number of `0`'s and `1`'s, and all the `0`'s and all the `1`'s in these substrings are grouped consecutively.\n\n\nSubstrings that occur multiple times are counted the number of times they occur.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"00110011\"\n**Output:** 6\n**Explanation:** There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"10101\"\n**Output:** 4\n**Explanation:** There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 105`\n* `s[i]` is either `'0'` or `'1'`.\n\n\n",
  "canonical_solution": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            t.append(cnt)\n            i += 1\n        ans = 0\n        for i in range(1, len(t)):\n            ans += min(t[i - 1], t[i])\n        return ans\n",
  "test_case_generator": "\nimport random\n\nclass Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            t.append(cnt)\n            i += 1\n        ans = 0\n        for i in range(1, len(t)):\n            ans += min(t[i - 1], t[i])\n        return ans\n    \ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random binary string\n    s = \"\".join(random.choices(\"01\", k=random.randint(1, 101)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.countBinarySubstrings(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.countBinarySubstrings(s) == expected_result\n        print(f\"assert solution.countBinarySubstrings(\\\"{s}\\\") == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.countBinarySubstrings(\\\"{s}\\\") == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.countBinarySubstrings(\"10010100010100111001111011111110001010000000000\") == 24\nassert solution.countBinarySubstrings(\"11010010011111001001001100000111010011101000000100010000011101010000000000100\") == 42\nassert solution.countBinarySubstrings(\"100011110101110101000010010011111111100111010100001101011\") == 34\nassert solution.countBinarySubstrings(\"11010101110101011111100111101110011100100000011001110111101\") == 36\nassert solution.countBinarySubstrings(\"111011011110011000111001010010010111010101011010001000111101101110010011100111\") == 54\nassert solution.countBinarySubstrings(\"1111010000110101001111000110100001001011101111110101011100100110101001001100101000001010110001\") == 62\nassert solution.countBinarySubstrings(\"11101101000000111100001100000011100010111110101\") == 30\nassert solution.countBinarySubstrings(\"011111101111110010001010110010011101000001010010110001011010100111100\") == 42\nassert solution.countBinarySubstrings(\"0100101100001101011010010110001111011110\") == 27\nassert solution.countBinarySubstrings(\"10001011101\") == 6\nassert solution.countBinarySubstrings(\"10001100101110101100000000111000101000000110100010000101111011110000111010111100101000001\") == 54\nassert solution.countBinarySubstrings(\"011101010100011011001110101011\") == 22\nassert solution.countBinarySubstrings(\"101010111010001001101001110100100110000011101000110101000100011011111011000010111\") == 53\nassert solution.countBinarySubstrings(\"001110100101111111110111000000010110011011110001000011010110111110\") == 36\nassert solution.countBinarySubstrings(\"01010011000011101000101010011111011101110000110001000\") == 35\nassert solution.countBinarySubstrings(\"01111011110011000000100100100101111001000101\") == 25\nassert solution.countBinarySubstrings(\"0010100\") == 4\nassert solution.countBinarySubstrings(\"1110100010110010011110010010110001001011100100011100110110001110101110101011001100111110\") == 63\nassert solution.countBinarySubstrings(\"1110101000111001100110111101100111001111001001111110011100001001010\") == 47\nassert solution.countBinarySubstrings(\"00111100100111111111101001000100000001010110100001001\") == 26\nassert solution.countBinarySubstrings(\"111111111001001011101011100110001000101010\") == 25\nassert solution.countBinarySubstrings(\"101100000011011\") == 8\nassert solution.countBinarySubstrings(\"111101101010110001000000000010100110100110011000100100000001011100100101000101100001011100\") == 54\nassert solution.countBinarySubstrings(\"01101100100001101000\") == 12\nassert solution.countBinarySubstrings(\"10011010101111111010\") == 12\nassert solution.countBinarySubstrings(\"10111001101110000001001110011110011000101111101010000001011111100101000110011011101000010011\") == 57\nassert solution.countBinarySubstrings(\"110011000110011100\") == 14\nassert solution.countBinarySubstrings(\"011111111101101111110011101100010001010\") == 19\nassert solution.countBinarySubstrings(\"0110101000101011011001111011000011111110100101011001011111001111101101111000100111\") == 53\nassert solution.countBinarySubstrings(\"001011010110111100101010101000111000100011001110011100111001100111111001111100001100111011011\") == 69\nassert solution.countBinarySubstrings(\"10111101011001100010111010101011000101001000001001110000101100101010010100000011011100101100101011\") == 69\nassert solution.countBinarySubstrings(\"1100101100000100011110\") == 13\nassert solution.countBinarySubstrings(\"111010100100010010000011011010001011111001001011000101010110011010110011111100111010111101100011\") == 63\nassert solution.countBinarySubstrings(\"10110000011110001101111010001011101100111011100111111110011111100\") == 39\nassert solution.countBinarySubstrings(\"0000000011111010011\") == 10\nassert solution.countBinarySubstrings(\"11011011000110100011110000111101110101011001101000011111110100001\") == 45\nassert solution.countBinarySubstrings(\"0111010111010010101001010001100011001010101010111100001001111110100111110010\") == 54\nassert solution.countBinarySubstrings(\"1010101011101110011011010001110101\") == 26\nassert solution.countBinarySubstrings(\"1010101101101011101001100010110111000010010110100101011000100001\") == 45\nassert solution.countBinarySubstrings(\"100100010010101011010110110010011110100011001110100100000100\") == 40\nassert solution.countBinarySubstrings(\"010110110\") == 6\nassert solution.countBinarySubstrings(\"1001110110111110100100100110010110110000001000111101101100101111010100\") == 44\nassert solution.countBinarySubstrings(\"11100010111000101101101110011011001111110110\") == 29\nassert solution.countBinarySubstrings(\"011000010010110111111100111100100111100101000101110001100100000011111111100111010\") == 51\nassert solution.countBinarySubstrings(\"1000110\") == 4\nassert solution.countBinarySubstrings(\"10100111111010001110110110101001000100001100111001100011011\") == 40\nassert solution.countBinarySubstrings(\"001010110100110\") == 11\nassert solution.countBinarySubstrings(\"0000100111001001001010101000011001100000101011000110000101111010011100011000011111\") == 56\nassert solution.countBinarySubstrings(\"110100110110100000000001010010001111000011000101\") == 30\nassert solution.countBinarySubstrings(\"1111000111001010110100111101111011111111010011011111\") == 29\nassert solution.countBinarySubstrings(\"11001100\") == 6\nassert solution.countBinarySubstrings(\"010001000001011000000110001101\") == 17\nassert solution.countBinarySubstrings(\"0011100111011000101011000000111100100101010001011100\") == 36\nassert solution.countBinarySubstrings(\"11111100110010010001001100001100001101\") == 24\nassert solution.countBinarySubstrings(\"001111010110111100101101110100100001001010011000111010111001001011010100100100111011101100\") == 61\nassert solution.countBinarySubstrings(\"1101011111100110011101111010000111011100100010111100\") == 31\nassert solution.countBinarySubstrings(\"1100010110110100000101100100110001101000110100100001101001010010100001000101010011001111111\") == 60\nassert solution.countBinarySubstrings(\"11111101100010110100101101010011000010011000100001001101001010100000111100101100100011110010110011101\") == 70\nassert solution.countBinarySubstrings(\"01100000011101100100011001010110110110101100\") == 31\nassert solution.countBinarySubstrings(\"100100000110010101111100010100010100001101100110001110100001100010\") == 45\nassert solution.countBinarySubstrings(\"1000000001011010000000110110000111111110011101111000000000010101\") == 32\nassert solution.countBinarySubstrings(\"000011010111111110110101010100110011001100010000111011100001\") == 40\nassert solution.countBinarySubstrings(\"10001010000111101001001100100110111100111010100111000011010001001\") == 46\nassert solution.countBinarySubstrings(\"010011010011111101011110110101011001010100000000011111000\") == 37\nassert solution.countBinarySubstrings(\"0011111000000100111100110101010100011110001101001011110100001000101010001101010110001111010\") == 65\nassert solution.countBinarySubstrings(\"000001100000101111010000110011001101010100011110000100100110101011010100000101\") == 54\nassert solution.countBinarySubstrings(\"110010110010010101101110100111000011\") == 26\nassert solution.countBinarySubstrings(\"0001011101010111100111000100010011000111000100111000011011100000100101111110100101100001\") == 58\nassert solution.countBinarySubstrings(\"00010001101001000011110001110101001000000\") == 26\nassert solution.countBinarySubstrings(\"0100001011\") == 5\nassert solution.countBinarySubstrings(\"1001101011001100110111001001001011100011100100101110110000010011\") == 47\nassert solution.countBinarySubstrings(\"001001000101100101111000001101100010101100100110010000100110010001100101\") == 52\nassert solution.countBinarySubstrings(\"1010111011111001101110010011011000101001001011110011110010010011100011000011111111011100110110\") == 63\nassert solution.countBinarySubstrings(\"11011100011001011001111000100100000110111010111011001001001100100111111001101010001011011011100110\") == 68\nassert solution.countBinarySubstrings(\"1000110101001001011100010011111111000011101111010101001011001010011101011101110010111011000011000110\") == 69\nassert solution.countBinarySubstrings(\"00000110100010001000101\") == 12\nassert solution.countBinarySubstrings(\"0000100010\") == 4\nassert solution.countBinarySubstrings(\"01110011001010111100111011100001100010011010001001111110011010111011101110010010\") == 54\nassert solution.countBinarySubstrings(\"00010111110101010011011000010111001010011111111110110010100111110000110110100000\") == 48\nassert solution.countBinarySubstrings(\"10100111101000111100001110010111000101101101011110001110110100010100\") == 50\nassert solution.countBinarySubstrings(\"100100100010010011101001000110010111100110000011001110111001100011001110000110011\") == 58\nassert solution.countBinarySubstrings(\"0000111011011100111101110100\") == 16\nassert solution.countBinarySubstrings(\"1111101000101011010101011110111110011001000111100010101011110001111001100110000111111111111101111\") == 61\nassert solution.countBinarySubstrings(\"11100001100001001000001000010100101111001001010\") == 28\nassert solution.countBinarySubstrings(\"001011010111010\") == 10\nassert solution.countBinarySubstrings(\"10100100000000111001011000\") == 15\nassert solution.countBinarySubstrings(\"0010100001001111010011111111101110001110111101111101111010000110010000101111101100010001100110\") == 52\nassert solution.countBinarySubstrings(\"00100011010110100111001011010011100001101011110000001110011\") == 43\nassert solution.countBinarySubstrings(\"00010100010010101111100101111110000100110111100111001\") == 33\nassert solution.countBinarySubstrings(\"1001011001011100110010011100110001000000010000100001110110111101100011111101111100011101110010\") == 59\nassert solution.countBinarySubstrings(\"0011101001011110000000011110111100101110111011010001011011111111011000000001110100101\") == 48\nassert solution.countBinarySubstrings(\"001101011000001000101110000\") == 16\nassert solution.countBinarySubstrings(\"11000101010101001110111110001110111000101100110001010010101011110010010001010100001110111001011100101\") == 74\nassert solution.countBinarySubstrings(\"0010110101000110010011110100001100110000010011001110110110011\") == 43\nassert solution.countBinarySubstrings(\"0011000011110100110100111101101111001001100000110001000000110\") == 39\nassert solution.countBinarySubstrings(\"0110101001\") == 7\nassert solution.countBinarySubstrings(\"01110011111101100111111111101100\") == 15\nassert solution.countBinarySubstrings(\"011010001000100011111010011110\") == 17\nassert solution.countBinarySubstrings(\"011000111001\") == 9\nassert solution.countBinarySubstrings(\"10011110100010001011000011100011111101\") == 24",
  "inefficient_solution": "class Solution:\n    def countBinarySubstrings(self, s: str) -> int:\n        i, n = 0, len(s)\n        t = []\n        while i < n:\n            cnt = 1\n            while i + 1 < n and s[i + 1] == s[i]:\n                cnt += 1\n                i += 1\n            temp = [s[i - cnt + 1:i + 1]] * cnt\n            t.extend(temp)\n            i += 1\n        t = [x for x in t if x != '']\n        ans = 0\n        for i in range(1, len(t)):\n            if len(t[i]) != len(t[i - 1]):\n                continue\n            ans += min(t[i - 1], t[i])\n        return ans",
  "is_python": true
}