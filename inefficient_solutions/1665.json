{
  "problem_idx": 1665,
  "task_name": "Minimum Initial Energy to Finish Tasks",
  "markdown_description": "\nYou are given an array `tasks` where `tasks[i] = [actuali, minimumi]`:\n\n\n* `actuali` is the actual amount of energy you **spend to finish** the `ith` task.\n* `minimumi` is the minimum amount of energy you **require to begin** the `ith` task.\n\n\nFor example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. However, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it.\n\n\nYou can finish the tasks in **any order** you like.\n\n\nReturn *the **minimum** initial amount of energy you will need* *to finish all the tasks*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** tasks = [[1,2],[2,4],[4,8]]\n**Output:** 8\n**Explanation:**\nStarting with 8 energy, we finish the tasks in the following order:\n    - 3rd task. Now energy = 8 - 4 = 4.\n    - 2nd task. Now energy = 4 - 2 = 2.\n    - 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]\n**Output:** 32\n**Explanation:**\nStarting with 32 energy, we finish the tasks in the following order:\n    - 1st task. Now energy = 32 - 1 = 31.\n    - 2nd task. Now energy = 31 - 2 = 29.\n    - 3rd task. Now energy = 29 - 10 = 19.\n    - 4th task. Now energy = 19 - 10 = 9.\n    - 5th task. Now energy = 9 - 8 = 1.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]\n**Output:** 27\n**Explanation:**\nStarting with 27 energy, we finish the tasks in the following order:\n    - 5th task. Now energy = 27 - 5 = 22.\n    - 2nd task. Now energy = 22 - 2 = 20.\n    - 3rd task. Now energy = 20 - 3 = 17.\n    - 1st task. Now energy = 17 - 1 = 16.\n    - 4th task. Now energy = 16 - 4 = 12.\n    - 6th task. Now energy = 12 - 6 = 6.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= tasks.length <= 105`\n* `1 <= actual\u200bi\u00a0<= minimumi\u00a0<= 104`\n\n\n",
  "canonical_solution": "class Solution:\n    def minimumEffort(self, tasks: List[List[int]]) -> int:\n        ans = cur = 0\n        for a, m in sorted(tasks, key=lambda x: x[0] - x[1]):\n            if cur < m:\n                ans += m - cur\n                cur = m\n            cur -= a\n        return ans\n",
  "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minimumEffort(self, tasks: List[List[int]]) -> int:\n        ans = cur = 0\n        for a, m in sorted(tasks, key=lambda x: x[0] - x[1]):\n            if cur < m:\n                ans += m - cur\n                cur = m\n            cur -= a\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random list of tasks with random actual and minimum values\n    num_tasks = random.randint(1, 10)\n    max_value = 10**4\n    tasks = [[random.randint(1, max_value), random.randint(1, max_value)] for _ in range(num_tasks)]\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumEffort(tasks)\n\n    return tasks, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        tasks, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumEffort(tasks) == expected_result\n        print(f\"assert solution.minimumEffort({tasks}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumEffort({tasks}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
  "test_case": "assert solution.minimumEffort([[3240, 2389], [9573, 5080], [3098, 4591], [6787, 7536]]) == 18205\nassert solution.minimumEffort([[118, 1426], [1651, 6650]]) == 6650\nassert solution.minimumEffort([[7173, 307], [3947, 4524], [2629, 4952], [4480, 2801], [9890, 6436], [3670, 8703], [9604, 2101], [9523, 1515]]) == 42908\nassert solution.minimumEffort([[8873, 915], [3932, 4020], [5041, 6582], [6615, 8870], [6094, 1631], [7365, 428], [1674, 100], [1300, 4317], [4633, 5534]]) == 37569\nassert solution.minimumEffort([[4794, 4554], [1350, 4831], [1748, 9690], [4698, 3677], [3288, 2387], [4055, 4707], [9548, 2087]]) == 22020\nassert solution.minimumEffort([[7922, 8288], [2680, 4951], [9958, 8625], [8903, 6338]]) == 26898\nassert solution.minimumEffort([[7896, 8451], [4559, 106]]) == 8451\nassert solution.minimumEffort([[1588, 9647], [1117, 8704], [3094, 8141], [8324, 264], [36, 7329], [5305, 1671], [6924, 3901]]) == 18328\nassert solution.minimumEffort([[9802, 8888], [9351, 2970], [4886, 4405], [9191, 108], [7953, 1563], [8439, 8688], [1739, 6689]]) == 42278\nassert solution.minimumEffort([[7790, 3438]]) == 3438\nassert solution.minimumEffort([[586, 4561], [6542, 9238], [8602, 4251], [5469, 1591]]) == 16848\nassert solution.minimumEffort([[6028, 1168], [1198, 55], [5157, 5828], [8493, 441], [3988, 8979], [8747, 7763]]) == 25559\nassert solution.minimumEffort([[4662, 9248], [7766, 739], [2673, 5344], [587, 8783], [601, 4105], [9145, 5677], [2789, 5537], [4116, 1968]]) == 25312\nassert solution.minimumEffort([[9959, 5455], [3051, 2922], [7313, 6962], [6645, 4286], [2564, 1078], [7799, 1461], [1864, 7421], [6372, 2747], [4196, 8616], [4113, 3873]]) == 47538\nassert solution.minimumEffort([[8380, 4430], [6074, 3004]]) == 10504\nassert solution.minimumEffort([[903, 5440], [2177, 5258], [7816, 886], [2048, 6089], [2646, 8500], [4994, 8867], [221, 1136], [1465, 9078], [972, 5375]]) == 18286\nassert solution.minimumEffort([[1267, 1741], [7879, 7625], [1697, 1886]]) == 10589\nassert solution.minimumEffort([[2820, 843], [1940, 322], [9665, 3387], [5583, 5137], [7617, 7649], [5123, 832], [2448, 9501]]) == 28918\nassert solution.minimumEffort([[9146, 7942], [3550, 4935], [2573, 1966], [2054, 1922], [6932, 7100], [2822, 6535], [1227, 6321], [7845, 8211], [6418, 3484], [4885, 3316]]) == 44518\nassert solution.minimumEffort([[3682, 3775], [824, 7285], [6888, 2899]]) == 7405\nassert solution.minimumEffort([[6265, 7158], [973, 4812], [4754, 6523], [5879, 2371], [5039, 540], [9116, 8509], [9226, 500], [7896, 9142], [8112, 6239], [8573, 3436]]) == 57107\nassert solution.minimumEffort([[6524, 8792], [922, 6921]]) == 9714\nassert solution.minimumEffort([[3124, 6199], [3069, 7789], [2690, 2358], [9407, 7444], [4170, 1671]]) == 19961\nassert solution.minimumEffort([[5714, 8770], [9580, 2216], [935, 741], [761, 1983], [4057, 639]]) == 13683\nassert solution.minimumEffort([[155, 1821], [6033, 9480], [6809, 9855], [5571, 5966], [740, 9997], [5686, 7028]]) == 25389\nassert solution.minimumEffort([[7329, 7673], [4735, 6850], [7762, 1111]]) == 13175\nassert solution.minimumEffort([[4478, 1823], [973, 113], [993, 273]]) == 3789\nassert solution.minimumEffort([[8961, 3484], [9793, 1444], [8359, 3817], [7669, 1350], [8068, 6986]]) == 34501\nassert solution.minimumEffort([[3661, 3012], [1739, 8877], [7648, 1899], [4957, 7335]]) == 12256\nassert solution.minimumEffort([[4763, 9818], [3430, 2368], [3031, 6268], [2712, 9254], [8473, 6685], [6280, 9466], [705, 5988]]) == 27606\nassert solution.minimumEffort([[6709, 1889], [86, 7740], [976, 3427], [151, 769], [3266, 4516], [9723, 901], [1942, 308], [5171, 8106]]) == 19202\nassert solution.minimumEffort([[6204, 643], [2747, 2344]]) == 3390\nassert solution.minimumEffort([[2611, 8325], [8861, 7154], [9600, 373], [1492, 7611]]) == 13337\nassert solution.minimumEffort([[9914, 151], [7891, 4408], [6184, 9425], [3131, 1835], [9546, 8238], [6975, 2806], [8703, 6167], [7214, 6428], [7275, 8017], [1117, 1457]]) == 58187\nassert solution.minimumEffort([[8827, 9786], [9546, 9626], [9350, 5821], [4644, 7802], [7319, 2284]]) == 34651\nassert solution.minimumEffort([[6957, 2895], [8502, 8540], [1685, 1822], [6291, 754], [7561, 1689], [6313, 6749]]) == 31437\nassert solution.minimumEffort([[7004, 9831], [1362, 9300]]) == 11193\nassert solution.minimumEffort([[4732, 4262], [85, 1374], [7261, 5761], [6319, 2691]]) == 14769\nassert solution.minimumEffort([[7607, 4592], [6897, 6392]]) == 11489\nassert solution.minimumEffort([[8288, 9275]]) == 9275\nassert solution.minimumEffort([[8589, 5585], [3395, 7477], [8589, 4715], [3297, 5623], [2011, 8682], [5263, 4263]]) == 27270\nassert solution.minimumEffort([[9788, 7261], [1042, 4657], [4257, 8738], [8657, 1251], [2571, 8964], [3955, 4209]]) == 22864\nassert solution.minimumEffort([[3256, 9751], [5987, 2997], [3548, 1067], [346, 224], [9277, 6173], [5894, 5007], [8011, 9564], [7617, 8574], [6718, 3881]]) == 47550\nassert solution.minimumEffort([[5875, 5431], [7502, 5823], [3118, 2311], [5329, 9854]]) == 20145\nassert solution.minimumEffort([[6148, 1933], [8160, 5647], [5119, 5577], [8600, 115], [3940, 2436], [3228, 5851]]) == 26710\nassert solution.minimumEffort([[135, 9940], [6989, 5812], [9283, 1733], [571, 5785], [9526, 2460], [5417, 350], [1112, 7205], [2819, 49], [1893, 432], [8430, 5294]]) == 38625\nassert solution.minimumEffort([[4894, 8241], [8499, 3915], [4106, 886], [2668, 5548], [9537, 438], [8416, 4142], [4514, 4344], [6939, 3214], [685, 4323]]) == 41159\nassert solution.minimumEffort([[8282, 3553], [1753, 6756], [143, 5440], [9030, 8076], [1151, 7841], [5240, 7217], [8921, 2899], [7035, 6232], [3840, 9369]]) == 39373\nassert solution.minimumEffort([[1800, 5238], [7684, 7458]]) == 9258\nassert solution.minimumEffort([[2145, 972], [4762, 5182]]) == 5734\nassert solution.minimumEffort([[3538, 7898], [3099, 7009], [6445, 3715], [6555, 7460], [2423, 1405], [3051, 2018], [732, 561]]) == 23113\nassert solution.minimumEffort([[3458, 9508], [3117, 1007], [6852, 8472], [8079, 9322], [3582, 3156]]) == 22978\nassert solution.minimumEffort([[5578, 1819], [1096, 323]]) == 2915\nassert solution.minimumEffort([[200, 4299], [1329, 4598], [4617, 7722], [220, 4153], [7156, 6150], [8032, 6155]]) == 19677\nassert solution.minimumEffort([[6574, 7934], [3954, 4427], [7597, 7458], [4423, 5518], [5919, 3292], [759, 9827], [3053, 9740], [5888, 8538], [303, 3877]]) == 35843\nassert solution.minimumEffort([[792, 2685], [2676, 2223], [8468, 7632]]) == 11100\nassert solution.minimumEffort([[7329, 9033], [6855, 433], [5017, 9283], [9240, 4412], [5237, 936], [1499, 3283], [8664, 5579], [4869, 4184], [544, 6296], [5416, 5090]]) == 48248\nassert solution.minimumEffort([[7319, 5216], [4818, 2000]]) == 9319\nassert solution.minimumEffort([[9379, 7541], [7849, 8082], [7066, 4256], [1585, 2928], [208, 1415], [3056, 8460]]) == 26333\nassert solution.minimumEffort([[312, 3134], [8297, 9347], [3897, 3340]]) == 11949\nassert solution.minimumEffort([[5349, 8161], [6627, 2817], [2231, 2589], [4415, 2150], [4760, 7064], [6009, 1806], [1931, 4277], [3618, 1212]]) == 30737\nassert solution.minimumEffort([[7985, 3440]]) == 3440\nassert solution.minimumEffort([[5660, 4289], [4140, 7135], [8330, 8571], [5214, 8707]]) == 21973\nassert solution.minimumEffort([[4726, 4084]]) == 4084\nassert solution.minimumEffort([[9545, 9092], [5499, 8969], [753, 2990], [5838, 7509]]) == 21182\nassert solution.minimumEffort([[3799, 7394], [3337, 7755], [8123, 7499], [359, 3620], [1004, 3851], [7236, 8994], [1500, 9396]]) == 24734\nassert solution.minimumEffort([[711, 6456]]) == 6456\nassert solution.minimumEffort([[8353, 8643], [8158, 4893], [9071, 4045], [4449, 9732], [7255, 4419], [9588, 4302], [4908, 5287], [3551, 5920], [3415, 2480]]) == 53462\nassert solution.minimumEffort([[6557, 3133], [5419, 3163], [5654, 8870], [4545, 1032], [3605, 6784], [7817, 5466], [1430, 8307], [4632, 3642], [4090, 8418], [8701, 9558]]) == 48937\nassert solution.minimumEffort([[7503, 6015], [7116, 7188], [6892, 2486], [9285, 8199], [6140, 7586], [583, 5142]]) == 33113\nassert solution.minimumEffort([[4780, 601], [3845, 9047], [6991, 1910], [1481, 3411], [5099, 7044], [980, 346]]) == 18095\nassert solution.minimumEffort([[7475, 4869], [2065, 3648], [7311, 7152], [509, 3784], [571, 6448], [6605, 1529]]) == 19460\nassert solution.minimumEffort([[3071, 6492], [8272, 6666], [8912, 6448], [8496, 6018], [6967, 8762]]) == 33240\nassert solution.minimumEffort([[4027, 267], [2611, 3125], [7013, 7070], [5291, 8681], [3659, 3248], [3867, 9123], [2764, 8395]]) == 25472\nassert solution.minimumEffort([[9454, 4940], [3899, 358], [9349, 4846], [1647, 8084], [107, 37], [4978, 7617], [5659, 4828]]) == 30579\nassert solution.minimumEffort([[3034, 3245], [1573, 9372], [4226, 7623], [7094, 4129], [3237, 5507], [1076, 363], [3347, 6184], [2281, 7895], [1030, 737], [2068, 2985]]) == 26001\nassert solution.minimumEffort([[6726, 96], [1676, 5366], [3309, 4595], [7730, 7172], [8900, 2173], [8690, 5750]]) == 30304\nassert solution.minimumEffort([[4067, 7816]]) == 7816\nassert solution.minimumEffort([[8064, 2031], [3336, 833], [3244, 7668], [8580, 7818]]) == 17191\nassert solution.minimumEffort([[7095, 8378], [7298, 6613], [7465, 1812], [6993, 3383], [5320, 2374], [5687, 9280], [9715, 5637], [3701, 7208], [5034, 5805], [2019, 947]]) == 54674\nassert solution.minimumEffort([[9402, 2212], [3864, 5834]]) == 6076\nassert solution.minimumEffort([[3792, 8989], [5101, 7485], [5271, 7143], [1376, 4375], [6431, 4905], [2112, 5765], [6192, 1683], [5660, 95], [1736, 1748]]) == 32106\nassert solution.minimumEffort([[5584, 6248], [982, 4524], [3184, 7249], [9750, 2890], [4422, 9962], [2543, 4012], [969, 2821], [1361, 5797]]) == 21935\nassert solution.minimumEffort([[1215, 2343], [1979, 4892], [4017, 5556], [7240, 5739], [7156, 3516], [9412, 1221]]) == 22828\nassert solution.minimumEffort([[9599, 5174], [9552, 908], [3405, 8223], [8688, 3881], [4201, 7635], [3312, 1556], [8826, 6071], [4633, 4535], [5634, 211]]) == 49206\nassert solution.minimumEffort([[9186, 2792], [2522, 6897], [2851, 596], [8832, 106], [7174, 7264], [5118, 4949], [5422, 8216], [7535, 7257], [5447, 3826]]) == 45361\nassert solution.minimumEffort([[9396, 4582], [3660, 1136], [4555, 3786], [3561, 4136], [4199, 4169], [4728, 1819]]) == 25285\nassert solution.minimumEffort([[106, 9219], [81, 7507], [49, 8018], [520, 3938], [2403, 7575]]) == 9219\nassert solution.minimumEffort([[1899, 5978]]) == 5978\nassert solution.minimumEffort([[3310, 2092]]) == 2092\nassert solution.minimumEffort([[4995, 2382], [6499, 9872], [4381, 9668], [8928, 561], [6385, 924], [6509, 9303]]) == 29330\nassert solution.minimumEffort([[3377, 810], [5432, 5467], [7195, 5180], [2331, 4480], [4456, 42], [3177, 2395], [4137, 9883], [9993, 6294], [9855, 7340]]) == 45539\nassert solution.minimumEffort([[5903, 4033], [552, 7642], [1872, 2639], [6199, 8843], [9998, 9713], [8700, 6705]]) == 31229\nassert solution.minimumEffort([[6599, 4364], [1792, 2641], [6637, 1804], [9736, 2885]]) == 17913\nassert solution.minimumEffort([[2767, 3012]]) == 3012\nassert solution.minimumEffort([[5059, 3152], [9123, 4994], [770, 645], [1018, 2544]]) == 11841\nassert solution.minimumEffort([[9417, 5082], [7599, 9354]]) == 12681\nassert solution.minimumEffort([[5220, 9946], [353, 7105], [7418, 6330], [9023, 2592], [874, 7983], [7402, 5206], [5886, 4816], [1283, 8036]]) == 31028\nassert solution.minimumEffort([[7496, 5488], [5364, 7419], [1614, 1733], [7602, 7123], [3124, 7029], [5012, 6544], [1553, 7611], [4761, 2662], [9837, 2380], [2184, 7235]]) == 41090\nassert solution.minimumEffort([[4719, 1034], [1641, 8767], [2594, 7764], [8072, 6104], [9604, 1708], [230, 5218]]) == 18964",
  "inefficient_solution": "class Solution:\n    def minimumEffort(self, tasks: List[List[int]]) -> int:\n        tasks.sort(key=lambda x: x[0] - x[1])\n        max_tasks = 1000000\n        tasks_matrix = [[0]*max_tasks for _ in range(len(tasks))]\n        for i, (a, m) in enumerate(tasks):\n            tasks_matrix[i][:m] = [1]\n        tasks_matrix = [sublist[:] for sublist in tasks_matrix]\n        ans = 0\n        for i, (a, m) in enumerate(tasks):\n            if tasks_matrix[i][:m] == [1]*m:\n                ans += m\n                for j in range(m, max_tasks):\n                    if tasks_matrix[i][j] == 0:\n                        tasks_matrix[i][j] = 1\n                        ans += 1\n            for j in range(a, max_tasks):\n                if tasks_matrix[i][j] == 1:\n                    tasks_matrix[i][j-a] = 0\n        return ans",
  "is_python": true
}